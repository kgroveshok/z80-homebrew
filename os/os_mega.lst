# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 34 1c			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-09-06 12:23' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
001f			 
001f			 
001f			 
001f			;        nop  
001f			;        nop 
001f			;;	org 05h		; null out bdos call 
001f			; 
001f			;        nop  
001f			;        nop  
001f			;        nop 
001f			;;	org 08h 
001f			;;; 
001f			;;	jp cin		; rst 8 - char in 
001f			;;; 
001f			; 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;	org 010h 
001f			;; 
001f			;	jp cout		; rest 010h  - char out 
001f			;; 
001f			;	org 01bh   
001f			; 
001f			;	;jp  		; rst 01bh   - write string to display 
001f			;	jp str_at_display 
001f			; 
001f			; 
001f			;	org 020h 
001f			; 
001f			;	; jp		 ; rst 020h - read char at screen location 
001f			; 
001f			;	org 028h 
001f			 
001f				; jp		 ; rst 028h  - storage i/o 
001f			 
001f			; 	org 030h 
001f			;	jp break_point_state 
001f			  
001f			; $30  
001f			; org 038h 
001f			; $38 
001f			 
001f			; TODO any more important entry points to add to jump table for easier coding use? 
001f			 
001f			if BASE_KEV = 1  
001f			 
001f				; need to be at $66 for nmi support 
001f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0025 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0031 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0037 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0043 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0049 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0055 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0061 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0067 00 ff			db 0,255 
0069 c3 d8 73			jp nmi 
006c			endif 
006c			 
006c			include "firmware.asm" 
006c			  
006c			; main constants (used here and in firmware)  
006c			  
006c			; TODO have page 0 of storage as bios  
006c			  
006c			Device_A: equ 0h  
006c			Device_B: equ 040h          ; Sound  
006c			  
006c			if BASE_KEV  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_SC114  
006c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			; TODO fixup for CPM  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			Device_D: equ 0c0h             ; Keyboard and LCD  
006c			  
006c			; Odd specific debug points for testing hardware dev  
006c			  
006c			;if DEBUG_LEVEL0  
006c			;	include "debug_level0.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL1  
006c			;	include "debug_level1.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL2  
006c			;	include "debug_level2.asm"  
006c			;endif  
006c			  
006c			  
006c			CALLMONITOR: macro  
006c			;	call break_point_state  
006c			; now use the break point debug vector  
006c				call debug_vector  
006c				endm  
006c			  
006c			MALLOC_1: equ 1        ; from dk88   
006c			MALLOC_2: equ 0           ; broke  
006c			MALLOC_3: equ 0           ; really broke  
006c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
006c			  
006c			if BASE_KEV   
006c			;stacksize: equ 256  
006c			; each stack entry is three bytes (type + word)  
006c			stacksize: equ 3*150  
006c			  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 512  
006c			endif  
006c			if BASE_SC114  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			;if STORAGE_SE == 0  
006c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
006c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
006c			;endif  
006c			  
006c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
006c			  
006c			STORE_0_AUTORUN: equ $20  
006c			  
006c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
006c			  
006c			STORE_0_AUTOFILE: equ $21  
006c			STORE_0_BANKRUN: equ $23  
006c			STORE_0_FILERUN: equ $24  
006c			  
006c			; Block 0 offsets for settings  
006c			  
006c			; if set then skip prompt for start up and accept all  
006c			  
006c			STORE_0_QUICKSTART: equ $25  
006c			  
006c			; Blocks where directory table is held  
006c			  
006c			; Reducing the number of entries increases the max file size  
006c			  
006c			;STORE_DIR_START: equ 1  
006c			;STORE_DIR_END: equ 33  
006c			  
006c			; Blocks from where file data is stored  
006c			  
006c			;STORE_DATA_START: equ STORE_DIR_END + 1  
006c			  
006c			; Block indicators (<32 are data files)  
006c			  
006c			;STORE_BLOCK_CFG: equ $8f       ; config block  
006c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
006c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
006c			;STORE_BLOCK_FREE: equ $85       ; data block free  
006c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
006c			  
006c			  
006c			  
006c			; Directory entry flags  
006c			  
006c			;STORE_DIR_FREE: equ 0  
006c			;STORE_DIR_FILE:  equ 1  
006c			  
006c			; Structure offsets to directory entries  
006c			;STORE_DE_FLAG: equ 0  
006c			;STORE_DE_MAXEXT: equ 1  
006c			;STORE_DE_FILENAME: equ 2  
006c			  
006c			; Structure offsets to block 0  
006c			  
006c			;STORE_BK0_ISFOR: equ 1  
006c			;STORE_BK0_LABEL: equ 3  
006c			  
006c			; memory allocation   
006c			  
006c			chk_stund: equ tos+2           ; underflow check word  
006c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
006c			  
006c			; keyscan table needs rows x cols buffer  
006c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
006c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
006c			  
006c			keyscan_table_row1: equ chk_stovr -key_cols-1  
006c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
006c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
006c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
006c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
006c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
006c			keyscan_scancol: equ keyscan_table-key_cols  
006c			;keyscan_table_len: equ key_rows*key_cols  
006c			;keybufptr: equ keyscan_table - 2  
006c			;keysymbol: equ keybufptr - 1  
006c			key_held: equ keyscan_scancol-1	; currently held  
006c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
006c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
006c			key_fa: equ key_repeat_ct -1 ;  
006c			key_fb: equ key_fa -1 ;  
006c			key_fc: equ key_fb -1 ;  
006c			key_fd: equ key_fc -1 ;  
006c			key_face_held: equ key_fd - 1   
006c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
006c			  
006c			hardware_config: equ key_face_held - 10  
006c			  
006c			; hardware config switches  
006c			; TODO add bitmasks on includes for hardware  
006c			; high byte for expansion ids  
006c			;     0000 0000  no card inserted  
006c			;     0000 0001  storage card inserted  
006c			;     0000 0010  spi sd card active  
006c			  
006c			;       
006c			; low byte:  
006c			;     0000 0001   4x4 keypad  
006c			;     0000 0010   full keyboard  
006c			;     0000 0011   spi/ext keyboard  
006c			;     0000 0100   20x4 lcd  
006c			;     0000 1000   40x4 lcd  
006c			;     0000 1100   spi/ext display  
006c			;     0001 0000   ide interface available  
006c			  
006c			hardware_word: equ hardware_config - 2  
006c			  
006c			; debug marker - optional display of debug point on the debug screens  
006c			  
006c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
006c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
006c			  
006c			debug_umark: equ debug_vector - 6  ; current user mark  
006c			debug_mark: equ debug_umark - 4    ; internal word debug points  
006c			  
006c			; input_str vars  
006c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
006c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
006c			input_size: equ input_start -1  ; number of chars  
006c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
006c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
006c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
006c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
006c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
006c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
006c			input_len: equ input_cur_onoff - 5 ; length of current input  
006c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
006c			  
006c			; cursor blink rate  
006c			CUR_BLINK_RATE: equ $09  
006c			;CUR_BLINK_RATE: equ 15  
006c			  
006c			key_actual_pressed: equ input_cursor - 1   
006c			key_symbol: equ key_actual_pressed - 1   
006c			key_shift: equ key_symbol - 1   
006c			  
006c			; Display allocation  
006c			  
006c			;display_rows: equ 4     ; move out to mini and mega files  
006c			;display_cols: equ 20  
006c			  
006c			display_fb_len: equ display_rows*display_cols  
006c			  
006c			; primary frame buffer     
006c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
006c			; working frame buffers  
006c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
006c			display_fb3: equ  display_fb1-display_fb_len - 1  
006c			display_fb2: equ  display_fb3-display_fb_len - 1  
006c			;  
006c			; pointer to active frame buffer  
006c			display_fb_active: equ display_fb2 - 2  
006c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
006c			display_write_tmp: equ display_lcde1e2 - 2  
006c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
006c			  
006c			;  
006c			  
006c			;; can load into de directory  
006c			cursor_col: equ display_active-1  
006c			cursor_row: equ cursor_col-1  
006c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
006c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
006c			  
006c			; maths vars  
006c			  
006c			LFSRSeed: equ cursor_shape -20   
006c			randData: equ LFSRSeed - 2  
006c			xrandc: equ randData - 2  
006c			stackstore: equ xrandc - 2  
006c			seed1: equ  stackstore -2   
006c			seed2: equ seed1 - 2  
006c			  
006c			; cf storage vars  
006c			  
006c			iErrorNum:  equ seed2-1         ;Error number  
006c			iErrorReg:  equ iErrorNum -1              ;Error register  
006c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
006c			  
006c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
006c			  
006c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
006c			  
006c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
006c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
006c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
006c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
006c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
006c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
006c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
006c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
006c			store_tmpid: equ store_tmp3 - 1		; page temp id  
006c			store_tmpext: equ store_tmpid - 1		; file extent temp  
006c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
006c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
006c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
006c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
006c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
006c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
006c			;  
006c			; spi vars  
006c			  
006c			  
006c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
006c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
006c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
006c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
006c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
006c			spi_device_id: equ spi_device - 1    ; human readable bank number  
006c			  
006c			;;;;; forth cli params  
006c			  
006c			; TODO use a different frame buffer for forth???  
006c			  
006c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
006c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
006c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
006c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
006c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
006c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
006c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
006c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
006c			  
006c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
006c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
006c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
006c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
006c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
006c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
006c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
006c			  
006c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
006c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
006c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
006c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
006c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
006c			  
006c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
006c			  
006c			; os/forth token vars  
006c			  
006c			os_last_cmd: equ os_var_array-255  
006c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
006c			os_current_i: equ os_cli_cmd-2  
006c			os_cur_ptr: equ os_current_i-2  
006c			os_word_scratch: equ os_cur_ptr-30  
006c			os_tok_len: equ os_word_scratch - 2  
006c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
006c			os_tok_malloc: equ os_tok_ptr - 2  
006c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
006c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
006c			execscratch: equ os_input-255        ; exec cmd eval buffer  
006c			scratch: equ execscratch-255  
006c			  
006c			os_stack_1: equ scratch - 3       ; stack holding area 1  
006c			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
006c			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
006c			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
006c			  
006c			  
006c			; temp locations for new word processing to save on adding more   
006c			  
006c			os_new_malloc: equ os_stack_4-2  
006c			os_new_parse_len: equ os_new_malloc - 2  
006c			os_new_word_len: equ os_new_parse_len - 2  
006c			os_new_work_ptr: equ os_new_word_len - 2  
006c			os_new_src_ptr: equ os_new_work_ptr - 2  
006c			os_new_exec: equ os_new_src_ptr - 2  
006c			os_new_exec_ptr: equ os_new_exec - 2  
006c			  
006c			; resume memory alloocations....  
006c			  
006c			;os_view_disable: equ os_new_exec_ptr - 1  
006c			os_view_af: equ os_new_exec_ptr - 2  
006c			os_view_hl: equ os_view_af -2  
006c			os_view_de: equ os_view_hl - 2  
006c			os_view_bc: equ os_view_de - 2  
006c			  
006c			; stack checksum word  
006c			if DEBUG_STACK_IMB  
006c				curframe: equ  os_view_de - 5  
006c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
006c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			else  
006c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			endif  
006c			  
006c			; with data stack could see memory filled with junk. need some memory management   
006c			; malloc and free entry points added  
006c			  
006c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
006c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			;heap_end: equ free_list-1  ; Starting address of heap  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			heap_end: equ chk_word-1  ; Starting address of heap  
006c			  
006c			  
006c			;if BASE_KEV   
006c			;heap_start: equ 0800eh  ; Starting address of heap  
006c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;heap_start: equ baseram+15  ; Starting address of heap  
006c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;endif  
006c			  
006c			  
006c			;;;;  
006c			  
006c			  
006c			; change below to point to last memory alloc above  
006c			topusermem:  equ   heap_start  
006c			  
006c			;if BASE_KEV   
006c			;baseusermem: equ 08000h  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;;aseusermem:     equ    12  
006c			;baseusermem:     equ    prompt  
006c			;;baseusermem:     equ    endofcode  
006c			;endif  
006c			  
006c			  
006c			; **********************************************************************  
006c			; **  Constants  
006c			; **********************************************************************  
006c			  
006c			; Constants used by this code module  
006c			kDataReg:   EQU Device_D           ;PIO port A data register  
006c			kContReg:   EQU Device_D+2           ;PIO port A control register  
006c			  
006c			  
006c			portbdata:  equ Device_D+1    ; port b data  
006c			portbctl:   equ Device_D+3    ; port b control  
006c			  
006c			  
006c			;KEY_SHIFT:   equ 5  
006c			;KEY_SYMBOLSHIFT:  equ 6  
006c			  
006c			KEY_SHIFTLOCK: equ 4  
006c			  
006c			  
006c			KEY_UP: equ 5  
006c			KEY_NEXTWORD: equ 6  
006c			KEY_PREVWORD: equ 7  
006c			KEY_BS: equ 8  
006c			KEY_TAB:  equ 9  
006c			KEY_DOWN: equ 10  
006c			KEY_LEFT: equ 11  
006c			KEY_RIGHT: equ 12  
006c			KEY_CR:   equ 13  
006c			KEY_HOME: equ 14  
006c			KEY_END: equ 15  
006c			  
006c			KEY_F1: equ 16  
006c			KEY_F2: equ 17  
006c			KEY_F3: equ 18  
006c			KEY_F4: equ 19  
006c			  
006c			KEY_F5: equ 20  
006c			KEY_F6: equ 21  
006c			KEY_F7: equ 22  
006c			KEY_F8: equ 23  
006c			  
006c			KEY_F9: equ 24  
006c			KEY_F10: equ 25  
006c			KEY_F11: equ 26  
006c			KEY_F12: equ 27  
006c			  
006c			;if DEBUG_KEY  
006c			;	KEY_MATRIX_NO_PRESS: equ '.'  
006c			;	KEY_SHIFT:   equ '.'  
006c			;	KEY_SYMBOLSHIFT:  equ '.'  
006c			;else  
006c				KEY_SHIFT:   equ '~'  
006c				KEY_SYMBOLSHIFT:  equ '~'  
006c				KEY_MATRIX_NO_PRESS: equ '~'  
006c			;endi  
006c			  
006c			  
006c			  
006c			  
006c			; Macro to make adding debug marks easier  
006c			  
006c			DMARK: macro str  
006c				push af  
006c				ld a, (.dmark)  
006c				ld (debug_mark),a  
006c				ld a, (.dmark+1)  
006c				ld (debug_mark+1),a  
006c				ld a, (.dmark+2)  
006c				ld (debug_mark+2),a  
006c				jr .pastdmark  
006c			.dmark: db str  
006c			.pastdmark: pop af  
006c			  
006c			endm  
006c			  
006c			  
006c			; macro to detect for stack imbalances  
006c			  
006c			include "stackimbal.asm"  
006c			; Macro and code to detect stock imbalances 
006c			 
006c			SPPUSH: equ 0 
006c			 
006c			; Add a stack frame which can be checked before return 
006c			 
006c			STACKFRAME: macro onoff frame1 frame2 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c						exx 
006c			 
006c						ld de, frame1 
006c						ld a, d 
006c						ld hl, curframe 
006c						call hexout 
006c						ld a, e 
006c						ld hl, curframe+2 
006c						call hexout 
006c			  
006c						ld hl, frame1 
006c						push hl 
006c						ld hl, frame2 
006c						push hl 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			endm 
006c			 
006c			STACKFRAMECHK: macro onoff frame1 frame2 
006c			 
006c					 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						exx 
006c						; check stack frame SP 
006c			 
006c						ld hl, frame2 
006c						pop de   ; frame2 
006c			 
006c						call cmp16 
006c						jr nz, .spnosame 
006c						 
006c			 
006c						ld hl, frame1 
006c						pop de   ; frame1 
006c			 
006c						call cmp16 
006c						jr z, .spfrsame 
006c			 
006c						.spnosame: call showsperror 
006c			 
006c						.spfrsame: nop 
006c			 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			 
006c			 
006c			endm 
006c			 
006c			 
006c			; for a sub routine, wrap SP collection and comparisons 
006c			 
006c			; Usage: 
006c			; 
006c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
006c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
006c			 
006c			SAVESP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c			 
006c						ld (store_sp+(storeword*4)), sp 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			CHECKSP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c			 
006c						; save SP after last save 
006c				 
006c						ld (store_sp+(storeword*4)+2), sp 
006c			 
006c						push hl 
006c						ld hl, store_sp+(storeword*4) 
006c						call check_stack_sp  
006c						pop hl 
006c			 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			if DEBUG_STACK_IMB 
006c			 
006c			check_stack_sp: 
006c					push de 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					push de 
006c			 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					pop hl 
006c			 
006c			 
006c					; check to see if the same 
006c			 
006c					call cmp16 
006c					jr z, .spsame 
006c			 
006c					; not same 
006c			 
006c					call showsperror 
006c			.spsame: 
006c			 
006c					pop de 
006c			 
006c					ret 
006c			 
006c			.sperr:  db "Stack imbalance",0 
006c			 
006c			 
006c			showsperror: 
006c			 
006c			 
006c				push hl 
006c				push af 
006c				push de 
006c				call clear_display 
006c				ld de, .sperr 
006c				ld a,0 
006c			;	ld de,os_word_scratch 
006c				call str_at_display 
006c				ld a, display_row_1+17 
006c				ld de, debug_mark 
006c				call str_at_display 
006c				ld a, 0 
006c				ld (curframe+4),a 
006c				ld hl, curframe 
006c				ld de, os_word_scratch 
006c				ld a, display_row_4 
006c				call str_at_display 
006c				call update_display 
006c				;call break_point_state 
006c				call cin_wait 
006c			 
006c			;	ld a, ' ' 
006c			;	ld (os_view_disable), a 
006c				call bp_on 
006c				pop de	 
006c				pop af 
006c				pop hl 
006c				CALLMONITOR 
006c				ret 
006c			 
006c			endif 
006c			 
006c			 
006c			 
006c			; eof 
# End of file stackimbal.asm
006c			  
006c			;TODO macro to calc col and row offset into screen  
006c			  
006c			  
006c			  
006c			hardware_init:  
006c			  
006c				  
006c			  
006c					;ld a, 0  
006c					;ld (hardware_diag), a  
006c			  
006c					; clear all the buffers  
006c			  
006c 21 45 fc				ld hl, display_fb1  
006f 22 01 fb				ld (display_fb_active), hl  
0072			  
0072 cd aa 0d				call clear_display  
0075			  
0075 21 03 fb				ld hl, display_fb2  
0078 22 01 fb				ld (display_fb_active), hl  
007b			  
007b cd aa 0d				call clear_display  
007e			  
007e					; init primary frame buffer area  
007e 21 e6 fc				ld hl, display_fb0  
0081 22 01 fb				ld (display_fb_active), hl  
0084			  
0084 cd aa 0d				call clear_display  
0087			  
0087			  
0087 cd e5 73				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
008a			  
008a cd 7c 76			call key_init  
008d cd 56 02			call storage_init  
0090			  
0090				; setup malloc functions  
0090			  
0090				if MALLOC_1  
0090 cd 95 13				call  heap_init  
0093				endif  
0093				if MALLOC_4  
0093					call  heap_init  
0093				endif  
0093			  
0093				; init sound hardware if present  
0093			  
0093				if SOUND_ENABLE  
0093					call sound_init  
0093				endif  
0093			  
0093				; lcd test sequence  
0093					  
0093 cd cd 0d			call update_display  
0096 cd ed 0c			call delay1s  
0099 3e 2b			ld a,'+'  
009b cd af 0d			call fill_display  
009e cd cd 0d			call update_display  
00a1 cd ed 0c			call delay1s  
00a4 3e 2a			ld a,'*'  
00a6 cd af 0d			call fill_display  
00a9 cd cd 0d			call update_display  
00ac cd ed 0c			call delay1s  
00af 3e 2d			ld a,'-'  
00b1 cd af 0d			call fill_display  
00b4 cd cd 0d			call update_display  
00b7 cd ed 0c			call delay1s  
00ba			  
00ba			; boot splash screen  
00ba			if display_cols == 20	  
00ba			        ld a, display_row_1    
00ba			else  
00ba 3e 0a		        ld a, display_row_1 +10   
00bc			endif  
00bc 11 24 1b			ld de, prom_bootmsg  
00bf cd bd 0d			call str_at_display  
00c2 cd cd 0d			call update_display  
00c5			  
00c5			  
00c5 cd ed 0c			call delay1s  
00c8 cd ed 0c			call delay1s  
00cb			if display_cols == 20	  
00cb			            LD   A, display_row_3+2  
00cb			else  
00cb 3e 5c		            LD   A, display_row_3+12  
00cd			endif  
00cd 11 39 1b			ld de, prom_bootmsg1  
00d0 cd bd 0d			call str_at_display  
00d3			; display debug level  
00d3 3e 78		            LD   A, display_row_4  
00d5 11 1b 00			ld de, debuglevel  
00d8 cd bd 0d			call str_at_display  
00db			  
00db cd cd 0d			call update_display  
00de cd ed 0c			call delay1s  
00e1 cd ed 0c			call delay1s  
00e4			  
00e4			;	ld a, display_row_4+3  
00e4			;	ld de, bootmsg2  
00e4			;	call str_at_display  
00e4			;	call update_display  
00e4			;	call delay1s  
00e4			;	call delay1s  
00e4			  
00e4			; debug mark setup  
00e4			  
00e4 3e 5f		ld a, '_'  
00e6 32 a0 fd		ld (debug_mark),a  
00e9 32 a1 fd		ld (debug_mark+1),a  
00ec 32 a2 fd		ld (debug_mark+2),a  
00ef 3e 00		ld a,0  
00f1 32 a3 fd		ld (debug_mark+3),a  
00f4 32 a4 fd		ld (debug_umark),a  
00f7			  
00f7 c9					ret  
00f8			  
00f8			  
00f8			;bootmsg2:	db "Firmware v0.1",0  
00f8			  
00f8			; a 4x20 lcd  
00f8			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00f8			  
00f8			;if display_cols == 20  
00f8			;	include "firmware_lcd_4x20.asm"  
00f8			;endif  
00f8			  
00f8			;if display_cols == 40  
00f8			;	include "firmware_lcd_4x40.asm"  
00f8			;endif  
00f8			  
00f8			;  
00f8			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00f8			; TODO abstract the bit bang video out interface for dual display  
00f8			; TODO wire video out to tx pin on rc2014 bus  
00f8			  
00f8			; must supply cin, and cin_wait for low level hardware abstraction   
00f8			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00f8			; test scancode  
00f8			  
00f8			;;;;;  
00f8			;;;  
00f8			; Moved out to mini and maxi versions  
00f8			;  
00f8			; include "firmware_key_4x4.asm"  
00f8			; using existing 4 wire x 4 resistor array for input  
00f8			;include "firmware_key_4x10.asm"  
00f8			; need to mod the board for 5 rows due to resistor array  
00f8			;include "firmware_key_5x10.asm"  
00f8			  
00f8			; storage hardware interface  
00f8			  
00f8			; use microchip serial eeprom for storage  
00f8			  
00f8			  
00f8			if STORAGE_SE  
00f8				include "firmware_spi.asm"  
00f8			; my spi protocol (used by storage) 
00f8			 
00f8			; SPI pins 
00f8			 
00f8			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00f8			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00f8			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00f8			 
00f8			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00f8			; chip pin 4 gnd 
00f8			 
00f8			 
00f8			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00f8			SPI_CE1: equ 1      ;    port a1 pin 14  
00f8			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00f8			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00f8			SPI_CE4: equ 4      ; port a4     pin 10 
00f8			 
00f8			; active low AND masks 
00f8			 
00f8			;SPI_CE0_MASK: equ    255-1 
00f8			;SPI_CE1_MASK: equ   255-2 
00f8			;SPI_CE2_MASK: equ   255-4 
00f8			;SPI_CE3_MASK: equ   255-8 
00f8			;SPI_CE4_MASK: equ   255-16 
00f8			SPI_CE_HIGH:  equ 255 
00f8			 
00f8			 
00f8			 
00f8			;  Perform SCLK wait pulse 
00f8			 
00f8			spi_clk: 
00f8 f5				push af 
00f9 3a 99 f9			ld a, (spi_clktime) 
00fc fe 00			cp 0 
00fe 28 03			jr z, .scskip 
0100 cd d2 0c			call aDelayInMS 
0103			.scskip: 
0103 f1				pop af 
0104 c9				ret 
0105			 
0105			 
0105			 
0105			; TODO store port id for spi device ie dev c 
0105			; TODO store pin for SO 
0105			; TODO store pin for SI 
0105			; TODO store pin for SCLK 
0105			 
0105			; 
0105			 
0105			; ensure that spi bus is in a stable state with default pins  
0105			 
0105			se_stable_spi:   
0105			 
0105				 ; set DI high, CE high , SCLK low 
0105				;ld a, SPI_DI | SPI_CE0 
0105 3e 07			ld a, SPI_DI  
0107 cd 11 02			call spi_ce_high 
010a d3 80			 out (storage_adata),a 
010c 32 96 f9			ld (spi_portbyte),a 
010f			 
010f				if DEBUG_SPI 
010f					push hl 
010f					ld l, a 
010f					DMARK "SPI" 
010f					CALLMONITOR 
010f					pop hl 
010f				endif 
010f c9				ret 
0110			 
0110			; byte to send in a 
0110			 
0110			spi_send_byte: 
0110				; save byte to send for bit mask shift out 
0110 4f			        ld c,a 
0111 3a 96 f9			ld a,(spi_portbyte) 
0114				  
0114				; clock out	each bit of the byte msb first 
0114			 
0114 06 08			ld b, 8 
0116			.ssb1: 
0116				; clear so bit  
0116 cb bf			res SPI_DI, a 
0118 cb 11			rl c 
011a				; if bit 7 is set then carry is set 
011a 30 02			jr nc, .ssb2 
011c cb ff			set SPI_DI,a 
011e			.ssb2:  ; output bit to ensure it is stable 
011e d3 80			out (storage_adata),a 
0120 00				nop 
0121				; clock bit high 
0121 cb ef			set SPI_SCLK,a 
0123 d3 80			out (storage_adata),a 
0125 00				nop 
0126 cd f8 00			call spi_clk 
0129				; then low 
0129 cb af			res SPI_SCLK,a 
012b d3 80			out (storage_adata),a 
012d 00				nop 
012e cd f8 00			call spi_clk 
0131 10 e3			djnz .ssb1 
0133			 
0133 32 96 f9			ld (spi_portbyte),a 
0136 c9				ret 
0137			 
0137			; TODO low level get byte into A on spi 
0137			 
0137			spi_read_byte:  
0137			 
0137				; save byte to send for bit mask shift out 
0137 0e 00		    ld c,0 
0139 3a 96 f9			ld a,(spi_portbyte) 
013c				  
013c				; clock out	each bit of the byte msb first 
013c			 
013c			 
013c				; clock bit high 
013c cb ef			set SPI_SCLK,a 
013e d3 80			out (storage_adata),a 
0140 00				nop 
0141 cd f8 00			call spi_clk 
0144			 
0144			    ; read DO  
0144			 
0144 cb f9		    set 7,c 
0146 db 80			in a,(storage_adata) 
0148 cb 77		    bit SPI_DO,a 
014a 20 02		    jr nz, .b7 
014c cb b9		    res 7,c 
014e			.b7: 
014e				; then low 
014e cb af			res SPI_SCLK,a 
0150 d3 80			out (storage_adata),a 
0152 00				nop 
0153 cd f8 00			call spi_clk 
0156			     
0156			 
0156				; clock bit high 
0156 cb ef			set SPI_SCLK,a 
0158 d3 80			out (storage_adata),a 
015a 00				nop 
015b cd f8 00			call spi_clk 
015e			 
015e			    ; read DO  
015e			 
015e cb f1		    set 6,c 
0160 db 80			in a,(storage_adata) 
0162 cb 77		    bit SPI_DO,a 
0164 20 02		    jr nz, .b6 
0166 cb b1		    res 6,c 
0168			.b6: 
0168				; then low 
0168 cb af			res SPI_SCLK,a 
016a d3 80			out (storage_adata),a 
016c 00				nop 
016d cd f8 00			call spi_clk 
0170			 
0170				; clock bit high 
0170 cb ef			set SPI_SCLK,a 
0172 d3 80			out (storage_adata),a 
0174 00				nop 
0175 cd f8 00			call spi_clk 
0178			 
0178			 
0178			    ; read DO  
0178			 
0178 cb e9		    set 5,c 
017a db 80			in a,(storage_adata) 
017c cb 77		    bit SPI_DO,a 
017e 20 02		    jr nz, .b5 
0180 cb a9		    res 5,c 
0182			.b5: 
0182				; then low 
0182 cb af			res SPI_SCLK,a 
0184 d3 80			out (storage_adata),a 
0186 00				nop 
0187 cd f8 00			call spi_clk 
018a				; clock bit high 
018a cb ef			set SPI_SCLK,a 
018c d3 80			out (storage_adata),a 
018e 00				nop 
018f cd f8 00			call spi_clk 
0192			 
0192			    ; read DO  
0192			 
0192 cb e1		    set 4,c 
0194 db 80			in a,(storage_adata) 
0196 cb 77		    bit SPI_DO,a 
0198 20 02		    jr nz, .b4 
019a cb a1		    res 4,c 
019c			.b4: 
019c				; then low 
019c cb af			res SPI_SCLK,a 
019e d3 80			out (storage_adata),a 
01a0 00				nop 
01a1 cd f8 00			call spi_clk 
01a4				; clock bit high 
01a4 cb ef			set SPI_SCLK,a 
01a6 d3 80			out (storage_adata),a 
01a8 00				nop 
01a9 cd f8 00			call spi_clk 
01ac			 
01ac			    ; read DO  
01ac			 
01ac cb d9		    set 3,c 
01ae db 80			in a,(storage_adata) 
01b0 cb 77		    bit SPI_DO,a 
01b2 20 02		    jr nz, .b3 
01b4 cb 99		    res 3,c 
01b6			.b3: 
01b6				; then low 
01b6 cb af			res SPI_SCLK,a 
01b8 d3 80			out (storage_adata),a 
01ba 00				nop 
01bb cd f8 00			call spi_clk 
01be				; clock bit high 
01be cb ef			set SPI_SCLK,a 
01c0 d3 80			out (storage_adata),a 
01c2 00				nop 
01c3 cd f8 00			call spi_clk 
01c6			 
01c6			    ; read DO  
01c6			 
01c6 cb d1		    set 2,c 
01c8 db 80			in a,(storage_adata) 
01ca cb 77		    bit SPI_DO,a 
01cc 20 02		    jr nz, .b2 
01ce cb 91		    res 2,c 
01d0			.b2: 
01d0				; then low 
01d0 cb af			res SPI_SCLK,a 
01d2 d3 80			out (storage_adata),a 
01d4 00				nop 
01d5 cd f8 00			call spi_clk 
01d8				; clock bit high 
01d8 cb ef			set SPI_SCLK,a 
01da d3 80			out (storage_adata),a 
01dc 00				nop 
01dd cd f8 00			call spi_clk 
01e0			 
01e0			    ; read DO  
01e0			 
01e0 cb c9		    set 1,c 
01e2 db 80			in a,(storage_adata) 
01e4 cb 77		    bit SPI_DO,a 
01e6 20 02		    jr nz, .b1 
01e8 cb 89		    res 1,c 
01ea			.b1: 
01ea				; then low 
01ea cb af			res SPI_SCLK,a 
01ec d3 80			out (storage_adata),a 
01ee 00				nop 
01ef cd f8 00			call spi_clk 
01f2				; clock bit high 
01f2 cb ef			set SPI_SCLK,a 
01f4 d3 80			out (storage_adata),a 
01f6 00				nop 
01f7 cd f8 00			call spi_clk 
01fa			 
01fa			    ; read DO  
01fa			 
01fa cb c1		    set 0,c 
01fc db 80			in a,(storage_adata) 
01fe cb 77		    bit SPI_DO,a 
0200 20 02		    jr nz, .b0 
0202 cb 81		    res 0,c 
0204			.b0: 
0204				; then low 
0204 cb af			res SPI_SCLK,a 
0206 d3 80			out (storage_adata),a 
0208 00				nop 
0209 cd f8 00			call spi_clk 
020c			 
020c			 
020c 32 96 f9			ld (spi_portbyte),a 
020f			 
020f			    ; return byte 
020f 79			    ld a,c 
0210			 
0210			 
0210 c9				ret 
0211			 
0211			 
0211			 
0211			spi_ce_high: 
0211			 
0211				if DEBUG_SPI_HARD_CE0 
0211			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0211					ret 
0211			 
0211				endif 
0211			 
0211			 
0211 f5				push af 
0212			 
0212				; send direct ce to port b 
0212 3e ff			ld a, 255 
0214 d3 81			out (storage_bdata), a 
0216			 
0216 f1				pop af 
0217			 
0217				; for port a that shares with spi lines AND the mask 
0217			  
0217				if DEBUG_SPI 
0217					push hl 
0217					ld h, a 
0217				endif 
0217			;	ld c, SPI_CE_HIGH 
0217			;	and c 
0217 cb c7			set SPI_CE0, a 
0219 cb cf			set SPI_CE1, a 
021b cb d7			set SPI_CE2, a 
021d cb df			set SPI_CE3, a 
021f cb e7			set SPI_CE4, a 
0221			 
0221				if DEBUG_SPI 
0221					ld l, a 
0221					DMARK "CEh" 
0221					CALLMONITOR 
0221					pop hl 
0221				endif 
0221 c9				ret 
0222			 
0222			 
0222			spi_ce_low: 
0222			 
0222				if DEBUG_SPI_HARD_CE0 
0222			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0222					ret 
0222			 
0222				endif 
0222			 
0222 c5				push bc 
0223 f5				push af 
0224			 
0224				; send direct ce to port b 
0224 3a 98 f9			ld a, (spi_cartdev) 
0227 d3 81			out (storage_bdata), a 
0229			 
0229			 
0229			 
0229				; for port a that shares with spi lines AND the mask 
0229			 
0229 3a 95 f9			ld a, (spi_device)  
022c 4f				ld c, a 
022d			 
022d f1				pop af 
022e			 
022e				; detect CEx 
022e			 
022e				if DEBUG_SPI 
022e					push hl 
022e					ld h, a 
022e				endif 
022e			 
022e cb 41			bit SPI_CE0, c 
0230 20 04			jr nz, .cel1 
0232 cb 87			res SPI_CE0, a 
0234 18 1e			jr .celn 
0236			.cel1: 
0236 cb 49			bit SPI_CE1, c 
0238 20 04			jr nz, .cel2 
023a cb 8f			res SPI_CE1, a 
023c 18 16			jr .celn 
023e			.cel2: 
023e cb 51			bit SPI_CE2, c 
0240 20 04			jr nz, .cel3 
0242 cb 97			res SPI_CE2, a 
0244 18 0e			jr .celn 
0246			.cel3: 
0246 cb 59			bit SPI_CE3, c 
0248 20 04			jr nz, .cel4 
024a cb 9f			res SPI_CE3, a 
024c 18 06			jr .celn 
024e			.cel4: 
024e cb 61			bit SPI_CE4, c 
0250 20 02			jr nz, .celn 
0252 cb a7			res SPI_CE4, a 
0254			.celn: 
0254			 
0254			 
0254			 
0254			;	add c 
0254			 
0254				if DEBUG_SPI 
0254					ld l, a 
0254					DMARK "CEl" 
0254					CALLMONITOR 
0254					pop hl 
0254				endif 
0254 c1				pop bc 
0255 c9				ret 
0256			 
0256			 
0256			 
0256			; eof 
0256			 
0256			 
0256			 
0256			 
0256			 
# End of file firmware_spi.asm
0256				include "firmware_seeprom.asm"  
0256			; 
0256			; persisent storage interface via microchip serial eeprom 
0256			 
0256			; port a pio 2 
0256			; pa 7 - si 
0256			; pa 6 - sclk  
0256			; pa 5 - so 
0256			; pa 4 - cs 
0256			; pa 3 - cs 
0256			; pa 2 - cs 
0256			; pa 1 - cs 
0256			; pa 0 - cs 
0256			; 
0256			; TODO get block 
0256			; TODO save block 
0256			; TODO load file 
0256			; TODO save file 
0256			; TODO get dir  
0256			 
0256			;  
0256			storage_adata: equ Device_C    ; device c port a - onboard storage 
0256			storage_actl: equ Device_C+2     ; device c port a 
0256			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0256			storage_bctl: equ Device_C+3     ; device c port b 
0256			 
0256			 
0256			; TODO move these to hardware driver file 
0256			 
0256			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0256			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0256			; storage bank file system format 
0256			; 
0256			; first page of bank: 
0256			; 	addr 0 - status check 
0256			;       addr 1 - write protect flag 
0256			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0256			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0256			;         TODO see if scanning whole of for available next file id is fast enough 
0256			;	addr 4 > zero term string of bank label 
0256			; 
0256			;        
0256			;  
0256			; first page of any file: 
0256			;      byte 0 - file id  
0256			;      byte 1-17 - fixed file name  
0256			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0256			; 
0256			; other pages of any file: 
0256			;      byte 0 - file id 
0256			;      byte 1> - file data 
0256			; 
0256			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0256			;  
0256			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0256			 
0256			 
0256			;storage_so_bit: 5 
0256			;storage_si_bit: 7 
0256			;storage_sclk_bit: 6 
0256			  
0256			 
0256			; init storage pio 
0256			 
0256			storage_init: 
0256			 
0256			 
0256					; set default SPI clk pulse time as disabled 
0256			 
0256 3e 00				ld a, 0 
0258 32 99 f9				ld (spi_clktime), a 
025b			 
025b					; init hardware 
025b			 
025b 3e cf		            LD   A, 11001111b 
025d d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
025f 3e 00		            LD   A, 00000000b 
0261 cb f7			set SPI_DO,a 
0263			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
0263 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0265			 
0265 3e cf		            LD   A, 11001111b 
0267 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
0269 3e 00		            LD   A, 00000000b 
026b d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
026d			 
026d				; set all external spi devices off  
026d 3e ff			ld a, 255 
026f 32 95 f9			ld (spi_device), a 
0272 32 98 f9			ld (spi_cartdev), a 
0275			 
0275					; ensure the spi bus is in a default stable state 
0275 cd 05 01				call se_stable_spi 
0278			 
0278			; TODO scan spi bus and gather which storage banks are present 
0278			 
0278			; populate store_bank_active  
0278			; for each ce line activate and attempt to write first byte of bank and read back 
0278			; if zero is returned then bank is empty 
0278			;   
0278			; 
0278			 
0278					; init file extent cache to save on slow reads 
0278			 
0278			;	ld hl, store_filecache 
0278			;	ld de, 0 
0278			;	ld hl,(de)	 
0278			 
0278			 
0278 c9			    ret 
0279			 
0279			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
0279			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
0279			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
0279			 
0279			; INSTRUCTION SET 
0279			; READ 0000 0011 Read data from memory array beginning at selected address 
0279			; WRITE 0000 0010 Write data to memory array beginning at selected address 
0279			; WREN 0000 0110 Set the write enable latch (enable write operations) 
0279			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
0279			; RDSR 0000 0101 Read STATUS register 
0279			; WRSR 0000 0001 Write STATUS register 
0279			; PE 0100 0010 Page Erase – erase one page in memory array 
0279			; SE 1101 1000 Sector Erase – erase one sector in memory array 
0279			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
0279			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
0279			 
0279			; TODO send byte steam for page without setting the address for every single byte 
0279			; TODO read byte  
0279			 
0279			; byte in a 
0279			; address in hl  
0279			se_writebyte: 
0279			        
0279			    ;   ld c, a 
0279 f5			        push af 
027a e5			        push hl 
027b			 
027b			    ; initi write mode 
027b			    ; 
027b			    ;CS low 
027b			 
027b 3a 96 f9		       ld a,(spi_portbyte) 
027e cd 22 02			call spi_ce_low 
0281			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0281 d3 80		       out (storage_adata),a 
0283 32 96 f9		       ld (spi_portbyte), a 
0286			 
0286			    ;clock out wren instruction 
0286			 
0286 3e 06		    ld a, store_wren_ins 
0288 cd 10 01		    call spi_send_byte  
028b			 
028b			    ;cs high to enable write latch 
028b			 
028b 3a 96 f9		       ld a,(spi_portbyte) 
028e cd 11 02			call spi_ce_high 
0291			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0291 d3 80		       out (storage_adata),a 
0293 32 96 f9		       ld (spi_portbyte), a 
0296			 
0296 00				nop 
0297			    ; 
0297			    ; intial write data 
0297			    ; 
0297			    ; cs low 
0297			     
0297 3a 96 f9		       ld a,(spi_portbyte) 
029a cd 22 02			call spi_ce_low 
029d			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
029d d3 80		       out (storage_adata),a 
029f 32 96 f9		       ld (spi_portbyte), a 
02a2			 
02a2			    ; clock out write instruction 
02a2			     
02a2 3e 02		    ld a, store_write_ins  
02a4 cd 10 01		    call spi_send_byte  
02a7			 
02a7			    ; clock out address (depending on address size) 
02a7			     
02a7 e1			    pop hl 
02a8 7c			    ld a,h    ; address out msb first 
02a9 cd 10 01		    call spi_send_byte  
02ac 7d			    ld a,l 
02ad cd 10 01		    call spi_send_byte  
02b0			 
02b0			    ; clock out byte(s) for page 
02b0			 
02b0 f1			    pop af 
02b1 cd 10 01		    call spi_send_byte  
02b4			 
02b4			    ; end write with ce high 
02b4 3a 96 f9		       ld a,(spi_portbyte) 
02b7			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02b7 cd 11 02			call spi_ce_high 
02ba d3 80		       out (storage_adata),a 
02bc 32 96 f9		       ld (spi_portbyte), a 
02bf			 
02bf				; pause for internal write cycle 
02bf 3e 0a			ld a, 10 
02c1 cd d2 0c			call aDelayInMS 
02c4 c9			    ret 
02c5			 
02c5			; buffer to write in de 
02c5			; address in hl  
02c5			se_writepage: 
02c5			        
02c5			    ;   ld c, a 
02c5 d5				push de 
02c6 e5			        push hl 
02c7			 
02c7			    ; initi write mode 
02c7			    ; 
02c7			    ;CS low 
02c7			 
02c7 3a 96 f9		       ld a,(spi_portbyte) 
02ca cd 22 02			call spi_ce_low 
02cd			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02cd d3 80		       out (storage_adata),a 
02cf 32 96 f9		       ld (spi_portbyte), a 
02d2			 
02d2			    ;clock out wren instruction 
02d2			 
02d2 3e 06		    ld a, store_wren_ins 
02d4 cd 10 01		    call spi_send_byte  
02d7			 
02d7			    ;cs high to enable write latch 
02d7			 
02d7 3a 96 f9		       ld a,(spi_portbyte) 
02da cd 11 02			call spi_ce_high 
02dd			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02dd d3 80		       out (storage_adata),a 
02df 32 96 f9		       ld (spi_portbyte), a 
02e2			 
02e2 00				nop 
02e3			    ; 
02e3			    ; intial write data 
02e3			    ; 
02e3			    ; cs low 
02e3			     
02e3 3a 96 f9		       ld a,(spi_portbyte) 
02e6			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02e6 cd 22 02			call spi_ce_low 
02e9 d3 80		       out (storage_adata),a 
02eb 32 96 f9		       ld (spi_portbyte), a 
02ee			 
02ee			    ; clock out write instruction 
02ee			     
02ee 3e 02		    ld a, store_write_ins  
02f0 cd 10 01		    call spi_send_byte  
02f3			 
02f3			    ; clock out address (depending on address size) 
02f3			     
02f3 e1			    pop hl 
02f4 7c			    ld a,h    ; address out msb first 
02f5 cd 10 01		    call spi_send_byte  
02f8 7d			    ld a,l 
02f9 cd 10 01		    call spi_send_byte  
02fc			 
02fc			    ; clock out byte(s) for page 
02fc			 
02fc e1				pop hl 
02fd 06 40			ld b, STORE_BLOCK_PHY 
02ff			.bytewrite: 
02ff			 
02ff 7e				ld a,(hl) 
0300 e5			    push hl 
0301 c5				push bc 
0302 cd 10 01		    call spi_send_byte  
0305 c1				pop bc 
0306 e1				pop hl 
0307			 
0307			    ; end write with ce high 
0307 3a 96 f9		       ld a,(spi_portbyte) 
030a cd 11 02			call spi_ce_high 
030d			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
030d d3 80		       out (storage_adata),a 
030f 32 96 f9		       ld (spi_portbyte), a 
0312			 
0312 23				inc hl 
0313 10 ea			djnz .bytewrite 
0315			 
0315				; pause for internal write cycle 
0315 3e 64			ld a, 100 
0317 cd d2 0c			call aDelayInMS 
031a c9			    ret 
031b			; returns byte in a 
031b			; address in hl  
031b			se_readbyte: 
031b d5				push de 
031c c5				push bc 
031d			 
031d			    ;   ld c, a 
031d e5			        push hl 
031e			 
031e			    ; initi write mode 
031e			    ; 
031e			    ;CS low 
031e			 
031e 3a 96 f9		       ld a,(spi_portbyte) 
0321 cd 22 02			call spi_ce_low 
0324			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0324 d3 80		       out (storage_adata),a 
0326 32 96 f9		       ld (spi_portbyte), a 
0329			 
0329			    ;clock out wren instruction 
0329			 
0329 3e 03		    ld a, store_read_ins 
032b cd 10 01		    call spi_send_byte  
032e			 
032e			 
032e			    ; clock out address (depending on address size) 
032e			     
032e e1			    pop hl 
032f 7c			    ld a,h    ; address out msb first 
0330 cd 10 01		    call spi_send_byte  
0333 7d			    ld a,l 
0334 cd 10 01		    call spi_send_byte  
0337			 
0337			    ; clock in byte(s) for page 
0337			 
0337 cd 37 01		    call spi_read_byte  
033a f5				push af 
033b			 
033b			    ; end write with ce high 
033b 3a 96 f9		       ld a,(spi_portbyte) 
033e			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
033e cd 11 02			call spi_ce_high 
0341 d3 80		       out (storage_adata),a 
0343 32 96 f9		       ld (spi_portbyte), a 
0346			 
0346 f1				pop af 
0347			 
0347 c1				pop bc 
0348 d1				pop de 
0349			 
0349 c9			    ret 
034a			 
034a			if DEBUG_STORESE 
034a			 
034a			storageput:  
034a			 
034a			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
034a			 
034a 21 f8 f0			ld hl,scratch+2 
034d cd 9d 12			call get_word_hl 
0350			 
0350				; stuff it here for the moment as it will be overwritten later anyway 
0350			 
0350 22 19 f4			ld (os_cur_ptr),hl	 
0353			 
0353			 
0353			; get pointer to start of string 
0353			 
0353 21 fd f0			ld hl, scratch+7 
0356			 
0356			; loop writing char of string to eeprom 
0356			 
0356 7e			.writestr:	ld a,(hl) 
0357 fe 00				cp 0 
0359 28 12				jr z, .wsdone		; done writing 
035b e5					push hl 
035c 2a 19 f4				ld hl,(os_cur_ptr) 
035f cd 79 02				call se_writebyte 
0362			 
0362 2a 19 f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0365 23					inc hl 
0366 22 19 f4				ld (os_cur_ptr),hl 
0369			 
0369					; restore string pointer and get next char 
0369			 
0369 e1					pop hl 
036a 23					inc hl 
036b 18 e9				jr .writestr 
036d			 
036d			 
036d			 
036d			.wsdone: 
036d			 
036d			 
036d			; when done load first page into a buffer  
036d			 
036d 21 00 80				ld hl,08000h		; start in ram 
0370 22 19 f4				ld (os_cur_ptr),hl 
0373 21 00 00				ld hl, 0		 ; start of page 
0376 22 1e f1				ld (scratch+40),hl	; hang on to it 
0379			 
0379 06 80				ld b, 128		; actually get more then one page 
037b c5			.wsload:	push bc 
037c 2a 1e f1				ld hl,(scratch+40) 
037f e5					push hl 
0380 cd 1b 03				call se_readbyte 
0383			 
0383					; a now as the byte 
0383			 
0383 2a 19 f4				ld hl,(os_cur_ptr) 
0386 77					ld (hl),a 
0387					; inc next buffer area 
0387 23					inc hl 
0388 22 19 f4				ld (os_cur_ptr),hl 
038b			 
038b					; get eeprom position, inc and save for next round 
038b e1					pop hl		 
038c 23					inc hl 
038d 22 1e f1				ld (scratch+40),hl 
0390 c1					pop bc 
0391 10 e8				djnz .wsload 
0393			 
0393			; set 'd' pointer to start of buffer 
0393			 
0393 21 00 80				ld hl,08000h 
0396 22 19 f4				ld (os_cur_ptr),hl 
0399			 
0399			 
0399 c9			ret 
039a			 
039a			 
039a c9			storageread: ret 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			endif 
039b			 
039b			 
039b			 
# End of file firmware_seeprom.asm
039b			else  
039b			   ; create some stubs for the labels  
039b			se_readbyte: ret  
039b			se_writebyte: ret  
039b			storage_init: ret  
039b			  
039b			endif  
039b			  
039b			; use cf card for storage - throwing timeout errors. Hardware or software?????  
039b			;include "firmware_cf.asm"  
039b			  
039b			; load up high level storage hardward abstractions  
039b			include "firmware_storage.asm"  
039b			 
039b			; persisent storage hardware abstraction layer  
039b			 
039b			 
039b			 
039b			; Block 0 on storage is a config state 
039b			 
039b			 
039b			 
039b			; TODO add read phy block and write phy block functions 
039b			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
039b			 
039b			; Abstraction layer  
039b			 
039b			; Logocial block size is same size as physical size - using tape concept 
039b			 
039b			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
039b			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
039b			 
039b			 
039b			 
039b			; Filesystem layout (Logical layout) 
039b			; 
039b			; Block 0 - Bank config  
039b			; 
039b			;      Byte - 0 file id counter 
039b			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
039b			;      Byte - 3-20 zero terminated bank label 
039b			; 
039b			; Block 1 > File storage 
039b			; 
039b			;      Byte 0 file id    - block 0 file details 
039b			;      Byte 1 block id - block 0 is file  
039b			;            Byte 2-15 - File name 
039b			; 
039b			;       - to end of block data 
039b			; 
039b			 
039b			; Get ID for the file named in pointer held HL 
039b			; Returns ID in HL = 255 if no file found 
039b			 
039b			storage_getid: 
039b			 
039b 22 a8 f9			ld (store_tmp1), hl 
039e			 
039e				if DEBUG_STORESE 
039e					DMARK "SGI" 
039e f5				push af  
039f 3a b3 03			ld a, (.dmark)  
03a2 32 a0 fd			ld (debug_mark),a  
03a5 3a b4 03			ld a, (.dmark+1)  
03a8 32 a1 fd			ld (debug_mark+1),a  
03ab 3a b5 03			ld a, (.dmark+2)  
03ae 32 a2 fd			ld (debug_mark+2),a  
03b1 18 03			jr .pastdmark  
03b3 ..			.dmark: db "SGI"  
03b6 f1			.pastdmark: pop af  
03b7			endm  
# End of macro DMARK
03b7					CALLMONITOR 
03b7 cd aa fd			call debug_vector  
03ba				endm  
# End of macro CALLMONITOR
03ba				endif 
03ba				; get block 0 and set counter for number of files to scan 
03ba			 
03ba cd 25 05			call storage_get_block_0 
03bd			 
03bd 3a af f9			ld a, (store_page) 
03c0 47				ld b, a 
03c1			 
03c1				; get extent 0 of each file id 
03c1			 
03c1				if DEBUG_STORESE 
03c1					DMARK "SGc" 
03c1 f5				push af  
03c2 3a d6 03			ld a, (.dmark)  
03c5 32 a0 fd			ld (debug_mark),a  
03c8 3a d7 03			ld a, (.dmark+1)  
03cb 32 a1 fd			ld (debug_mark+1),a  
03ce 3a d8 03			ld a, (.dmark+2)  
03d1 32 a2 fd			ld (debug_mark+2),a  
03d4 18 03			jr .pastdmark  
03d6 ..			.dmark: db "SGc"  
03d9 f1			.pastdmark: pop af  
03da			endm  
# End of macro DMARK
03da					CALLMONITOR 
03da cd aa fd			call debug_vector  
03dd				endm  
# End of macro CALLMONITOR
03dd				endif 
03dd 60			.getloop:	ld h, b 
03de 2e 00				ld l, 0 
03e0 c5					push bc 
03e1			 
03e1 11 af f9				ld de, store_page 
03e4				if DEBUG_STORESE 
03e4					DMARK "SGr" 
03e4 f5				push af  
03e5 3a f9 03			ld a, (.dmark)  
03e8 32 a0 fd			ld (debug_mark),a  
03eb 3a fa 03			ld a, (.dmark+1)  
03ee 32 a1 fd			ld (debug_mark+1),a  
03f1 3a fb 03			ld a, (.dmark+2)  
03f4 32 a2 fd			ld (debug_mark+2),a  
03f7 18 03			jr .pastdmark  
03f9 ..			.dmark: db "SGr"  
03fc f1			.pastdmark: pop af  
03fd			endm  
# End of macro DMARK
03fd					CALLMONITOR 
03fd cd aa fd			call debug_vector  
0400				endm  
# End of macro CALLMONITOR
0400				endif 
0400 cd cd 09				call storage_read 
0403 cd 07 10				call ishlzero 
0406 28 2d				jr z, .gap 
0408					 
0408					; have a file name read. Is it one we want. 
0408			 
0408 2a a8 f9				ld hl, (store_tmp1) 
040b 11 b2 f9				ld de, store_page+3   ; file name 
040e			 
040e				if DEBUG_STORESE 
040e					DMARK "SGc" 
040e f5				push af  
040f 3a 23 04			ld a, (.dmark)  
0412 32 a0 fd			ld (debug_mark),a  
0415 3a 24 04			ld a, (.dmark+1)  
0418 32 a1 fd			ld (debug_mark+1),a  
041b 3a 25 04			ld a, (.dmark+2)  
041e 32 a2 fd			ld (debug_mark+2),a  
0421 18 03			jr .pastdmark  
0423 ..			.dmark: db "SGc"  
0426 f1			.pastdmark: pop af  
0427			endm  
# End of macro DMARK
0427					CALLMONITOR 
0427 cd aa fd			call debug_vector  
042a				endm  
# End of macro CALLMONITOR
042a				endif 
042a cd 7c 13				call strcmp 
042d 20 06				jr nz, .gap   ; not this one 
042f			 
042f c1				        pop bc 
0430			 
0430 26 00				ld h, 0 
0432 68					ld l, b 
0433 18 22				jr .getdone 
0435						 
0435			 
0435			 
0435			 
0435			.gap: 
0435				if DEBUG_STORESE 
0435					DMARK "SGg" 
0435 f5				push af  
0436 3a 4a 04			ld a, (.dmark)  
0439 32 a0 fd			ld (debug_mark),a  
043c 3a 4b 04			ld a, (.dmark+1)  
043f 32 a1 fd			ld (debug_mark+1),a  
0442 3a 4c 04			ld a, (.dmark+2)  
0445 32 a2 fd			ld (debug_mark+2),a  
0448 18 03			jr .pastdmark  
044a ..			.dmark: db "SGg"  
044d f1			.pastdmark: pop af  
044e			endm  
# End of macro DMARK
044e					CALLMONITOR 
044e cd aa fd			call debug_vector  
0451				endm  
# End of macro CALLMONITOR
0451				endif 
0451			 
0451 c1					pop bc 
0452 10 89				djnz .getloop 
0454 21 ff 00				ld hl, 255 
0457			.getdone: 
0457			 
0457				if DEBUG_STORESE 
0457					DMARK "SGe" 
0457 f5				push af  
0458 3a 6c 04			ld a, (.dmark)  
045b 32 a0 fd			ld (debug_mark),a  
045e 3a 6d 04			ld a, (.dmark+1)  
0461 32 a1 fd			ld (debug_mark+1),a  
0464 3a 6e 04			ld a, (.dmark+2)  
0467 32 a2 fd			ld (debug_mark+2),a  
046a 18 03			jr .pastdmark  
046c ..			.dmark: db "SGe"  
046f f1			.pastdmark: pop af  
0470			endm  
# End of macro DMARK
0470					CALLMONITOR 
0470 cd aa fd			call debug_vector  
0473				endm  
# End of macro CALLMONITOR
0473				endif 
0473			 
0473 c9				ret 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			; Read Block 
0474			; ---------- 
0474			; 
0474			; With current bank 
0474			;  
0474			; Get block number to read 
0474			; Load physical blocks starting at start block into buffer 
0474			 
0474			; de points to buffer to use 
0474			; hl holds logical block number  
0474			 
0474			storage_read_block: 
0474			 
0474				; TODO bank selection 
0474			 
0474				; for each of the physical blocks read it into the buffer 
0474 06 40			ld b, STORE_BLOCK_PHY 
0476			 
0476				if DEBUG_STORESE 
0476 d5					push de 
0477				endif 
0477				 
0477			.rl1:    
0477			 
0477				; read physical block at hl into de 
0477			        ; increment hl and de to next read position on exit 
0477			 
0477 e5				push hl 
0478 d5				push de	 
0479 c5				push bc 
047a			;	if DEBUG_STORESE 
047a			;		push af 
047a			;		ld a, 'R' 
047a			;		ld (debug_mark),a 
047a			;		pop af 
047a			;		CALLMONITOR 
047a			;	endif 
047a cd 1b 03			call se_readbyte 
047d			;	if DEBUG_STORESE 
047d			;		ld a,(spi_portbyte) 
047d			;		ld l, a 
047d			;		push af 
047d			;		ld a, '1' 
047d			;		ld (debug_mark),a 
047d			;		pop af 
047d			;		CALLMONITOR 
047d			;	endif 
047d c1				pop bc 
047e d1				pop de 
047f e1				pop hl 
0480 12				ld (de),a 
0481 23				inc hl 
0482 13				inc de 
0483			 
0483			;	if DEBUG_STORESE 
0483			;		push af 
0483			;		ld a, 'r' 
0483			;		ld (debug_mark),a 
0483			;		pop af 
0483			;		CALLMONITOR 
0483			;	endif 
0483			 
0483 10 f2			djnz .rl1 
0485			 
0485				if DEBUG_STORESE 
0485					DMARK "SRB" 
0485 f5				push af  
0486 3a 9a 04			ld a, (.dmark)  
0489 32 a0 fd			ld (debug_mark),a  
048c 3a 9b 04			ld a, (.dmark+1)  
048f 32 a1 fd			ld (debug_mark+1),a  
0492 3a 9c 04			ld a, (.dmark+2)  
0495 32 a2 fd			ld (debug_mark+2),a  
0498 18 03			jr .pastdmark  
049a ..			.dmark: db "SRB"  
049d f1			.pastdmark: pop af  
049e			endm  
# End of macro DMARK
049e d1					pop de 
049f			; 
049f			;		push af 
049f			;		ld a, 'R' 
049f			;		ld (debug_mark),a 
049f			;		pop af 
049f					CALLMONITOR 
049f cd aa fd			call debug_vector  
04a2				endm  
# End of macro CALLMONITOR
04a2				endif 
04a2 c9				ret	 
04a3				 
04a3			 
04a3			; File Size 
04a3			; --------- 
04a3			; 
04a3			;   hl file id 
04a3			; 
04a3			;  returns in hl the number of blocks 
04a3			 
04a3			storage_file_size: 
04a3 5d				ld e, l 
04a4 16 00			ld d, 0 
04a6 21 40 00			ld hl, STORE_BLOCK_PHY 
04a9					if DEBUG_FORTH_WORDS 
04a9						DMARK "SIZ" 
04a9 f5				push af  
04aa 3a be 04			ld a, (.dmark)  
04ad 32 a0 fd			ld (debug_mark),a  
04b0 3a bf 04			ld a, (.dmark+1)  
04b3 32 a1 fd			ld (debug_mark+1),a  
04b6 3a c0 04			ld a, (.dmark+2)  
04b9 32 a2 fd			ld (debug_mark+2),a  
04bc 18 03			jr .pastdmark  
04be ..			.dmark: db "SIZ"  
04c1 f1			.pastdmark: pop af  
04c2			endm  
# End of macro DMARK
04c2						CALLMONITOR 
04c2 cd aa fd			call debug_vector  
04c5				endm  
# End of macro CALLMONITOR
04c5					endif 
04c5 cd a7 07			call storage_findnextid 
04c8			 
04c8 cd 07 10			call ishlzero 
04cb			;	ld a, l 
04cb			;	add h 
04cb			;	cp 0 
04cb c8				ret z			; block not found so EOF 
04cc			 
04cc 11 af f9			ld de, store_page 
04cf cd 74 04			call storage_read_block 
04d2			 
04d2 3a b1 f9			ld a, (store_page+2)	 ; get extent count 
04d5 6f				ld l, a 
04d6 26 00			ld h, 0 
04d8 c9			 	ret 
04d9			 
04d9			 
04d9			; Write Block 
04d9			; ----------- 
04d9			; 
04d9			; With current bank 
04d9			;  
04d9			; Get block number to write 
04d9			; Write physical blocks starting at start block from buffer 
04d9			  
04d9			storage_write_block: 
04d9				; TODO bank selection 
04d9			 
04d9				; for each of the physical blocks read it into the buffer 
04d9 06 40			ld b, STORE_BLOCK_PHY 
04db			 
04db				if DEBUG_STORESE 
04db					DMARK "SWB" 
04db f5				push af  
04dc 3a f0 04			ld a, (.dmark)  
04df 32 a0 fd			ld (debug_mark),a  
04e2 3a f1 04			ld a, (.dmark+1)  
04e5 32 a1 fd			ld (debug_mark+1),a  
04e8 3a f2 04			ld a, (.dmark+2)  
04eb 32 a2 fd			ld (debug_mark+2),a  
04ee 18 03			jr .pastdmark  
04f0 ..			.dmark: db "SWB"  
04f3 f1			.pastdmark: pop af  
04f4			endm  
# End of macro DMARK
04f4			 
04f4					;push af 
04f4					;ld a, 'W' 
04f4					;ld (debug_mark),a 
04f4					;pop af 
04f4					CALLMONITOR 
04f4 cd aa fd			call debug_vector  
04f7				endm  
# End of macro CALLMONITOR
04f7				endif 
04f7			 
04f7			; might not be working 
04f7			;	call se_writepage 
04f7			 
04f7			;	ret 
04f7			; 
04f7			 
04f7			 
04f7			 
04f7			.wl1:    
04f7			 
04f7				; read physical block at hl into de 
04f7			        ; increment hl and de to next read position on exit 
04f7			 
04f7 e5				push hl 
04f8 d5				push de	 
04f9 c5				push bc 
04fa 1a				ld a,(de) 
04fb				;if DEBUG_STORESE 
04fb			;		push af 
04fb			;		ld a, 'W' 
04fb			;		ld (debug_mark),a 
04fb			;		pop af 
04fb			;		CALLMONITOR 
04fb			;	endif 
04fb cd 79 02			call se_writebyte 
04fe			;	call delay250ms 
04fe 00				nop 
04ff 00				nop 
0500 00				nop 
0501			;	if DEBUG_STORESE 
0501			;		push af 
0501			;		ld a, 'w' 
0501			;		ld (debug_mark),a 
0501			;		pop af 
0501			;		CALLMONITOR 
0501			;	endif 
0501 c1				pop bc 
0502 d1				pop de 
0503 e1				pop hl 
0504 23				inc hl 
0505 13				inc de 
0506			 
0506			 
0506 10 ef			djnz .wl1 
0508			 
0508				if DEBUG_STORESE 
0508					DMARK "SW2" 
0508 f5				push af  
0509 3a 1d 05			ld a, (.dmark)  
050c 32 a0 fd			ld (debug_mark),a  
050f 3a 1e 05			ld a, (.dmark+1)  
0512 32 a1 fd			ld (debug_mark+1),a  
0515 3a 1f 05			ld a, (.dmark+2)  
0518 32 a2 fd			ld (debug_mark+2),a  
051b 18 03			jr .pastdmark  
051d ..			.dmark: db "SW2"  
0520 f1			.pastdmark: pop af  
0521			endm  
# End of macro DMARK
0521			 
0521					;push af 
0521					;ld a, 'W' 
0521					;ld (debug_mark),a 
0521					;pop af 
0521					CALLMONITOR 
0521 cd aa fd			call debug_vector  
0524				endm  
# End of macro CALLMONITOR
0524				endif 
0524 c9				ret	 
0525			 
0525			; Init bank 
0525			; --------- 
0525			; 
0525			; With current bank 
0525			; 
0525			; Setup block 0 config 
0525			;     Set 0 file id counter 
0525			;     Set formatted byte pattern 
0525			;     Zero out bank label 
0525			;      
0525			; For every logical block write 0-1 byte as null 
0525			 
0525			storage_get_block_0: 
0525			 
0525				; TODO check presence 
0525			 
0525				; get block 0 config 
0525			 
0525 21 00 00			ld hl, 0 
0528 11 af f9			ld de, store_page 
052b cd 74 04			call storage_read_block 
052e			 
052e				if DEBUG_STORESE 
052e					DMARK "SB0" 
052e f5				push af  
052f 3a 43 05			ld a, (.dmark)  
0532 32 a0 fd			ld (debug_mark),a  
0535 3a 44 05			ld a, (.dmark+1)  
0538 32 a1 fd			ld (debug_mark+1),a  
053b 3a 45 05			ld a, (.dmark+2)  
053e 32 a2 fd			ld (debug_mark+2),a  
0541 18 03			jr .pastdmark  
0543 ..			.dmark: db "SB0"  
0546 f1			.pastdmark: pop af  
0547			endm  
# End of macro DMARK
0547 11 af f9				ld de, store_page 
054a			;		push af 
054a			;		ld a, 'i' 
054a			;		ld (debug_mark),a 
054a			;		pop af 
054a					CALLMONITOR 
054a cd aa fd			call debug_vector  
054d				endm  
# End of macro CALLMONITOR
054d				endif 
054d			 
054d				; is this area formatted? 
054d			 
054d			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
054d 2a b0 f9			ld hl, (store_page+1) 
0550 3e 80			ld a,0x80 
0552 bd				cp l 
0553 20 22			jr nz, .ininotformatted 
0555				; do a double check 
0555 3e 27			ld a, 0x27 
0557 bc				cp h 
0558 20 1d			jr nz, .ininotformatted 
055a			 
055a				; formatted then 
055a			 
055a				if DEBUG_STORESE 
055a					DMARK "SB1" 
055a f5				push af  
055b 3a 6f 05			ld a, (.dmark)  
055e 32 a0 fd			ld (debug_mark),a  
0561 3a 70 05			ld a, (.dmark+1)  
0564 32 a1 fd			ld (debug_mark+1),a  
0567 3a 71 05			ld a, (.dmark+2)  
056a 32 a2 fd			ld (debug_mark+2),a  
056d 18 03			jr .pastdmark  
056f ..			.dmark: db "SB1"  
0572 f1			.pastdmark: pop af  
0573			endm  
# End of macro DMARK
0573					;push af 
0573					;ld a, 'I' 
0573					;ld (debug_mark),a 
0573					;pop af 
0573					CALLMONITOR 
0573 cd aa fd			call debug_vector  
0576				endm  
# End of macro CALLMONITOR
0576				endif 
0576 c9				ret 
0577			 
0577			.ininotformatted: 
0577				; bank not formatted so poke various bits to make sure 
0577			 
0577				if DEBUG_STORESE 
0577					DMARK "SB2" 
0577 f5				push af  
0578 3a 8c 05			ld a, (.dmark)  
057b 32 a0 fd			ld (debug_mark),a  
057e 3a 8d 05			ld a, (.dmark+1)  
0581 32 a1 fd			ld (debug_mark+1),a  
0584 3a 8e 05			ld a, (.dmark+2)  
0587 32 a2 fd			ld (debug_mark+2),a  
058a 18 03			jr .pastdmark  
058c ..			.dmark: db "SB2"  
058f f1			.pastdmark: pop af  
0590			endm  
# End of macro DMARK
0590					;push af 
0590					;ld a, 'f' 
0590					;ld (debug_mark),a 
0590					;pop af 
0590					CALLMONITOR 
0590 cd aa fd			call debug_vector  
0593				endm  
# End of macro CALLMONITOR
0593				endif 
0593			 
0593 cd b0 0c			call storage_clear_page 
0596			 
0596 21 af f9			ld hl, store_page 
0599 3e 00			ld a, 0 
059b				 
059b 77				ld (hl),a   ; reset file counter 
059c			 
059c 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
059f 22 b0 f9		 	ld (store_page+1), hl	 
05a2			 
05a2				; set default label 
05a2			 
05a2 21 3e 06			ld hl, .defaultbanklabl 
05a5 11 b2 f9		 	ld de, store_page+3 
05a8 01 0f 00			ld bc, 15 
05ab ed b0			ldir 
05ad			 
05ad				; Append the current bank id 
05ad 21 bb f9			ld hl, store_page+3+9 
05b0 3a 94 f9			ld a, (spi_device_id) 
05b3 77				ld (hl), a 
05b4			 
05b4				; save default page 0 
05b4			 
05b4 21 00 00			ld hl, 0 
05b7 11 af f9			ld de, store_page 
05ba				if DEBUG_STORESE 
05ba					DMARK "SB3" 
05ba f5				push af  
05bb 3a cf 05			ld a, (.dmark)  
05be 32 a0 fd			ld (debug_mark),a  
05c1 3a d0 05			ld a, (.dmark+1)  
05c4 32 a1 fd			ld (debug_mark+1),a  
05c7 3a d1 05			ld a, (.dmark+2)  
05ca 32 a2 fd			ld (debug_mark+2),a  
05cd 18 03			jr .pastdmark  
05cf ..			.dmark: db "SB3"  
05d2 f1			.pastdmark: pop af  
05d3			endm  
# End of macro DMARK
05d3			;		push af 
05d3			;		ld a, 'F' 
05d3			;		ld (debug_mark),a 
05d3			;		pop af 
05d3					CALLMONITOR 
05d3 cd aa fd			call debug_vector  
05d6				endm  
# End of macro CALLMONITOR
05d6				endif 
05d6 cd d9 04			call storage_write_block 
05d9				if DEBUG_STORESE 
05d9					DMARK "SB4" 
05d9 f5				push af  
05da 3a ee 05			ld a, (.dmark)  
05dd 32 a0 fd			ld (debug_mark),a  
05e0 3a ef 05			ld a, (.dmark+1)  
05e3 32 a1 fd			ld (debug_mark+1),a  
05e6 3a f0 05			ld a, (.dmark+2)  
05e9 32 a2 fd			ld (debug_mark+2),a  
05ec 18 03			jr .pastdmark  
05ee ..			.dmark: db "SB4"  
05f1 f1			.pastdmark: pop af  
05f2			endm  
# End of macro DMARK
05f2			;		push af 
05f2			;		ld a, '>' 
05f2			;		ld (debug_mark),a 
05f2			;		pop af 
05f2					CALLMONITOR 
05f2 cd aa fd			call debug_vector  
05f5				endm  
# End of macro CALLMONITOR
05f5				endif 
05f5			 
05f5 00				nop 
05f6 00				nop 
05f7 00				nop 
05f8			 
05f8				; now set 0 in every page to mark as a free block 
05f8			 
05f8 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05fa 21 40 00			ld hl, STORE_BLOCK_PHY 
05fd			 
05fd 3e 00		.setmark1:   	ld a,0 
05ff e5					push hl 
0600 c5					push bc 
0601 cd 79 02				call se_writebyte 
0604 3e 0a			ld a, 10 
0606 cd d2 0c			call aDelayInMS 
0609 23				inc hl 
060a cd 79 02				call se_writebyte 
060d 3e 0a			ld a, 10 
060f cd d2 0c			call aDelayInMS 
0612 2b				dec hl 
0613 c1					pop bc 
0614 e1					pop hl 
0615 3e 40				ld a, STORE_BLOCK_PHY 
0617 cd de 0f				call addatohl 
061a 10 e1				djnz .setmark1 
061c			 
061c 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
061e 3e 00		.setmark2:   	ld a,0 
0620 e5					push hl 
0621 c5					push bc 
0622 cd 79 02				call se_writebyte 
0625 3e 0a			ld a, 10 
0627 cd d2 0c			call aDelayInMS 
062a 23				inc hl 
062b cd 79 02				call se_writebyte 
062e 3e 0a			ld a, 10 
0630 cd d2 0c			call aDelayInMS 
0633 2b				dec hl 
0634 c1					pop bc 
0635 e1					pop hl 
0636 3e 40				ld a, STORE_BLOCK_PHY 
0638 cd de 0f				call addatohl 
063b 10 e1				djnz .setmark2 
063d			 
063d					 
063d			 
063d			 
063d c9				ret 
063e			 
063e			 
063e			 
063e			 
063e .. 00		.defaultbanklabl:   db "BankLabel_",0 
0649			 
0649			 
0649			 
0649			; Label Bank 
0649			; ---------- 
0649			; 
0649			; With current bank 
0649			; Read block 0 
0649			; Set label 
0649			; Write block 0 
0649			 
0649			; label str pointer in hl 
0649			 
0649			storage_label:     
0649			 
0649				if DEBUG_STORESE 
0649					DMARK "LBL" 
0649 f5				push af  
064a 3a 5e 06			ld a, (.dmark)  
064d 32 a0 fd			ld (debug_mark),a  
0650 3a 5f 06			ld a, (.dmark+1)  
0653 32 a1 fd			ld (debug_mark+1),a  
0656 3a 60 06			ld a, (.dmark+2)  
0659 32 a2 fd			ld (debug_mark+2),a  
065c 18 03			jr .pastdmark  
065e ..			.dmark: db "LBL"  
0661 f1			.pastdmark: pop af  
0662			endm  
# End of macro DMARK
0662					CALLMONITOR 
0662 cd aa fd			call debug_vector  
0665				endm  
# End of macro CALLMONITOR
0665				endif 
0665			 
0665 e5				push hl 
0666			 
0666 cd 25 05			call storage_get_block_0 
0669			 
0669				; set default label 
0669			 
0669 e1				pop hl 
066a			 
066a 11 b2 f9		 	ld de, store_page+3 
066d 01 0f 00			ld bc, 15 
0670				if DEBUG_STORESE 
0670					DMARK "LB3" 
0670 f5				push af  
0671 3a 85 06			ld a, (.dmark)  
0674 32 a0 fd			ld (debug_mark),a  
0677 3a 86 06			ld a, (.dmark+1)  
067a 32 a1 fd			ld (debug_mark+1),a  
067d 3a 87 06			ld a, (.dmark+2)  
0680 32 a2 fd			ld (debug_mark+2),a  
0683 18 03			jr .pastdmark  
0685 ..			.dmark: db "LB3"  
0688 f1			.pastdmark: pop af  
0689			endm  
# End of macro DMARK
0689					CALLMONITOR 
0689 cd aa fd			call debug_vector  
068c				endm  
# End of macro CALLMONITOR
068c				endif 
068c ed b0			ldir 
068e				; save default page 0 
068e			 
068e 21 00 00			ld hl, 0 
0691 11 af f9			ld de, store_page 
0694				if DEBUG_STORESE 
0694					DMARK "LBW" 
0694 f5				push af  
0695 3a a9 06			ld a, (.dmark)  
0698 32 a0 fd			ld (debug_mark),a  
069b 3a aa 06			ld a, (.dmark+1)  
069e 32 a1 fd			ld (debug_mark+1),a  
06a1 3a ab 06			ld a, (.dmark+2)  
06a4 32 a2 fd			ld (debug_mark+2),a  
06a7 18 03			jr .pastdmark  
06a9 ..			.dmark: db "LBW"  
06ac f1			.pastdmark: pop af  
06ad			endm  
# End of macro DMARK
06ad					CALLMONITOR 
06ad cd aa fd			call debug_vector  
06b0				endm  
# End of macro CALLMONITOR
06b0				endif 
06b0 cd d9 04			call storage_write_block 
06b3			 
06b3 c9				ret 
06b4			 
06b4			 
06b4			 
06b4			; Read Block 0 - Config 
06b4			; --------------------- 
06b4			; 
06b4			; With current bank 
06b4			; Call presence test 
06b4			;    If not present format/init bank  
06b4			; Read block 0  
06b4			;  
06b4			 
06b4			 
06b4			; Dir 
06b4			; --- 
06b4			; 
06b4			; With current bank 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block read byte 2 
06b4			;      if first block of file 
06b4			;         Display file name 
06b4			;         Display type flags for file 
06b4			;        
06b4			 
06b4			; moving to words as this requires stack control 
06b4			 
06b4			 
06b4			; Delete File 
06b4			; ----------- 
06b4			; 
06b4			; With current bank 
06b4			; 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block file id 
06b4			;      If first block of file and dont have file id 
06b4			;         if file to delete 
06b4			;         Save file id 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			;      If file id is one saved 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			 
06b4			 
06b4			.se_done: 
06b4 e1				pop hl 
06b5 c9				ret 
06b6			 
06b6			storage_erase: 
06b6			 
06b6				; hl contains the file id 
06b6			 
06b6 5d				ld e, l 
06b7 16 00			ld d, 0 
06b9 21 40 00			ld hl, STORE_BLOCK_PHY 
06bc					if DEBUG_FORTH_WORDS 
06bc						DMARK "ERA" 
06bc f5				push af  
06bd 3a d1 06			ld a, (.dmark)  
06c0 32 a0 fd			ld (debug_mark),a  
06c3 3a d2 06			ld a, (.dmark+1)  
06c6 32 a1 fd			ld (debug_mark+1),a  
06c9 3a d3 06			ld a, (.dmark+2)  
06cc 32 a2 fd			ld (debug_mark+2),a  
06cf 18 03			jr .pastdmark  
06d1 ..			.dmark: db "ERA"  
06d4 f1			.pastdmark: pop af  
06d5			endm  
# End of macro DMARK
06d5						CALLMONITOR 
06d5 cd aa fd			call debug_vector  
06d8				endm  
# End of macro CALLMONITOR
06d8					endif 
06d8 cd a7 07			call storage_findnextid 
06db cd 07 10			call ishlzero 
06de c8				ret z 
06df			 
06df e5				push hl 
06e0			 
06e0				; TODO check file not found 
06e0			 
06e0 11 af f9			ld de, store_page 
06e3 cd 74 04			call storage_read_block 
06e6			 
06e6 cd 07 10			call ishlzero 
06e9 ca b4 06			jp z,.se_done 
06ec			 
06ec					if DEBUG_FORTH_WORDS 
06ec						DMARK "ER1" 
06ec f5				push af  
06ed 3a 01 07			ld a, (.dmark)  
06f0 32 a0 fd			ld (debug_mark),a  
06f3 3a 02 07			ld a, (.dmark+1)  
06f6 32 a1 fd			ld (debug_mark+1),a  
06f9 3a 03 07			ld a, (.dmark+2)  
06fc 32 a2 fd			ld (debug_mark+2),a  
06ff 18 03			jr .pastdmark  
0701 ..			.dmark: db "ER1"  
0704 f1			.pastdmark: pop af  
0705			endm  
# End of macro DMARK
0705						CALLMONITOR 
0705 cd aa fd			call debug_vector  
0708				endm  
# End of macro CALLMONITOR
0708					endif 
0708 3a af f9			ld a, (store_page)	; get file id 
070b 32 a3 f9			ld (store_tmpid), a 
070e			 
070e 3a b1 f9			ld a, (store_page+2)    ; get count of extends 
0711 32 a2 f9			ld (store_tmpext), a 
0714			 
0714				; wipe file header 
0714			 
0714 e1				pop hl 
0715 3e 00			ld a, 0 
0717 32 af f9			ld (store_page), a 
071a 32 b0 f9			ld (store_page+1),a 
071d 11 af f9			ld de, store_page 
0720					if DEBUG_FORTH_WORDS 
0720						DMARK "ER2" 
0720 f5				push af  
0721 3a 35 07			ld a, (.dmark)  
0724 32 a0 fd			ld (debug_mark),a  
0727 3a 36 07			ld a, (.dmark+1)  
072a 32 a1 fd			ld (debug_mark+1),a  
072d 3a 37 07			ld a, (.dmark+2)  
0730 32 a2 fd			ld (debug_mark+2),a  
0733 18 03			jr .pastdmark  
0735 ..			.dmark: db "ER2"  
0738 f1			.pastdmark: pop af  
0739			endm  
# End of macro DMARK
0739						CALLMONITOR 
0739 cd aa fd			call debug_vector  
073c				endm  
# End of macro CALLMONITOR
073c					endif 
073c cd d9 04			call storage_write_block 
073f			 
073f			 
073f				; wipe file extents 
073f			 
073f 3a a2 f9			ld a, (store_tmpext) 
0742 47				ld b, a 
0743			 
0743			.eraext:	  
0743 c5				push bc 
0744			 
0744 21 40 00			ld hl, STORE_BLOCK_PHY 
0747 3a a3 f9			ld a,(store_tmpid) 
074a 5f				ld e, a 
074b 50				ld d, b	 
074c					if DEBUG_FORTH_WORDS 
074c						DMARK "ER3" 
074c f5				push af  
074d 3a 61 07			ld a, (.dmark)  
0750 32 a0 fd			ld (debug_mark),a  
0753 3a 62 07			ld a, (.dmark+1)  
0756 32 a1 fd			ld (debug_mark+1),a  
0759 3a 63 07			ld a, (.dmark+2)  
075c 32 a2 fd			ld (debug_mark+2),a  
075f 18 03			jr .pastdmark  
0761 ..			.dmark: db "ER3"  
0764 f1			.pastdmark: pop af  
0765			endm  
# End of macro DMARK
0765						CALLMONITOR 
0765 cd aa fd			call debug_vector  
0768				endm  
# End of macro CALLMONITOR
0768					endif 
0768 cd a7 07			call storage_findnextid 
076b cd 07 10			call ishlzero 
076e ca b4 06			jp z,.se_done 
0771			 
0771 e5				push hl 
0772 11 af f9			ld de, store_page 
0775 cd 74 04			call storage_read_block 
0778			 
0778				; free block	 
0778			 
0778 3e 00			ld a, 0 
077a 32 af f9			ld (store_page), a 
077d 32 b0 f9			ld (store_page+1),a 
0780 11 af f9			ld de, store_page 
0783 e1				pop hl 
0784					if DEBUG_FORTH_WORDS 
0784						DMARK "ER4" 
0784 f5				push af  
0785 3a 99 07			ld a, (.dmark)  
0788 32 a0 fd			ld (debug_mark),a  
078b 3a 9a 07			ld a, (.dmark+1)  
078e 32 a1 fd			ld (debug_mark+1),a  
0791 3a 9b 07			ld a, (.dmark+2)  
0794 32 a2 fd			ld (debug_mark+2),a  
0797 18 03			jr .pastdmark  
0799 ..			.dmark: db "ER4"  
079c f1			.pastdmark: pop af  
079d			endm  
# End of macro DMARK
079d						CALLMONITOR 
079d cd aa fd			call debug_vector  
07a0				endm  
# End of macro CALLMONITOR
07a0					endif 
07a0 cd d9 04			call storage_write_block 
07a3			 
07a3 c1				pop bc 
07a4 10 9d			djnz .eraext 
07a6			 
07a6 c9				ret 
07a7			 
07a7			 
07a7			; Find Free Block 
07a7			; --------------- 
07a7			; 
07a7			; With current bank 
07a7			;  
07a7			; From given starting logical block 
07a7			;    Read block  
07a7			;    If no file id 
07a7			;         Return block id 
07a7			 
07a7			 
07a7			; hl starting page number 
07a7			; hl contains free page number or zero if no pages free 
07a7			; e contains the file id to locate 
07a7			; d contains the block number 
07a7			 
07a7			; TODO change to find file id and use zero for free block 
07a7			 
07a7			storage_findnextid: 
07a7			 
07a7				; now locate first 0 page to mark as a free block 
07a7			 
07a7 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07a9			;	ld hl, STORE_BLOCK_PHY 
07a9			 
07a9					if DEBUG_FORTH_WORDS 
07a9					DMARK "FNI" 
07a9 f5				push af  
07aa 3a be 07			ld a, (.dmark)  
07ad 32 a0 fd			ld (debug_mark),a  
07b0 3a bf 07			ld a, (.dmark+1)  
07b3 32 a1 fd			ld (debug_mark+1),a  
07b6 3a c0 07			ld a, (.dmark+2)  
07b9 32 a2 fd			ld (debug_mark+2),a  
07bc 18 03			jr .pastdmark  
07be ..			.dmark: db "FNI"  
07c1 f1			.pastdmark: pop af  
07c2			endm  
# End of macro DMARK
07c2						CALLMONITOR 
07c2 cd aa fd			call debug_vector  
07c5				endm  
# End of macro CALLMONITOR
07c5					endif 
07c5			.ff1:   	 
07c5 e5					push hl 
07c6 c5					push bc 
07c7 d5					push de 
07c8 cd 1b 03				call se_readbyte 
07cb 5f					ld e,a 
07cc 23					inc hl 
07cd cd 1b 03				call se_readbyte 
07d0 57					ld d, a 
07d1 e1					pop hl 
07d2 e5					push hl 
07d3 cd fc 0f				call cmp16 
07d6 28 49				jr z, .fffound 
07d8			 
07d8 d1					pop de 
07d9 c1					pop bc 
07da e1					pop hl 
07db			 
07db					; is found? 
07db					;cp e 
07db					;ret z 
07db			 
07db 3e 40				ld a, STORE_BLOCK_PHY 
07dd cd de 0f				call addatohl 
07e0 10 e3				djnz .ff1 
07e2			 
07e2 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07e4			.ff2:   	 
07e4			 
07e4 e5					push hl 
07e5 c5					push bc 
07e6 d5					push de 
07e7 cd 1b 03				call se_readbyte 
07ea 5f					ld e,a 
07eb 23					inc hl 
07ec cd 1b 03				call se_readbyte 
07ef 57					ld d, a 
07f0			 
07f0 e1					pop hl 
07f1 e5					push hl 
07f2 cd fc 0f				call cmp16 
07f5 28 2a				jr z, .fffound 
07f7			 
07f7 d1					pop de 
07f8 c1					pop bc 
07f9 e1					pop hl 
07fa					; is found? 
07fa					;cp e 
07fa					;ret z 
07fa			 
07fa 3e 40				ld a, STORE_BLOCK_PHY 
07fc cd de 0f				call addatohl 
07ff 10 e3				djnz .ff2 
0801			 
0801			 
0801					if DEBUG_FORTH_WORDS 
0801					DMARK "FN-" 
0801 f5				push af  
0802 3a 16 08			ld a, (.dmark)  
0805 32 a0 fd			ld (debug_mark),a  
0808 3a 17 08			ld a, (.dmark+1)  
080b 32 a1 fd			ld (debug_mark+1),a  
080e 3a 18 08			ld a, (.dmark+2)  
0811 32 a2 fd			ld (debug_mark+2),a  
0814 18 03			jr .pastdmark  
0816 ..			.dmark: db "FN-"  
0819 f1			.pastdmark: pop af  
081a			endm  
# End of macro DMARK
081a					;	push af 
081a					;	ld a, 'n' 
081a					;	ld (debug_mark),a 
081a					;	pop af 
081a						CALLMONITOR 
081a cd aa fd			call debug_vector  
081d				endm  
# End of macro CALLMONITOR
081d					endif 
081d				; no free marks! 
081d 21 00 00				ld hl, 0 
0820 c9				ret 
0821			.fffound: 
0821				 
0821			 
0821 d1					pop de 
0822 c1					pop bc 
0823 e1					pop hl 
0824					if DEBUG_FORTH_WORDS 
0824					DMARK "FNF" 
0824 f5				push af  
0825 3a 39 08			ld a, (.dmark)  
0828 32 a0 fd			ld (debug_mark),a  
082b 3a 3a 08			ld a, (.dmark+1)  
082e 32 a1 fd			ld (debug_mark+1),a  
0831 3a 3b 08			ld a, (.dmark+2)  
0834 32 a2 fd			ld (debug_mark+2),a  
0837 18 03			jr .pastdmark  
0839 ..			.dmark: db "FNF"  
083c f1			.pastdmark: pop af  
083d			endm  
# End of macro DMARK
083d					;	push af 
083d					;	ld a, 'n' 
083d					;	ld (debug_mark),a 
083d					;	pop af 
083d						CALLMONITOR 
083d cd aa fd			call debug_vector  
0840				endm  
# End of macro CALLMONITOR
0840					endif 
0840 c9				ret 
0841			 
0841			 
0841			 
0841			; Free Space 
0841			; ---------- 
0841			; 
0841			; With current bank 
0841			; 
0841			; Set block count to zero 
0841			; Starting with first logical block 
0841			;      Find free block  
0841			;      If block id given, increment block count 
0841			; 
0841			;  
0841			 
0841			 
0841			; hl contains count of free blocks 
0841			 
0841			storage_freeblocks: 
0841			 
0841				; now locate first 0 page to mark as a free block 
0841			 
0841 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0843 21 40 00			ld hl, STORE_BLOCK_PHY 
0846 11 00 00			ld de, 0 
0849			 
0849			.fb1:   	 
0849 e5					push hl 
084a c5					push bc 
084b d5					push de 
084c cd 1b 03				call se_readbyte 
084f d1					pop de 
0850 c1					pop bc 
0851 e1					pop hl 
0852			 
0852					; is free? 
0852 fe 00				cp 0 
0854 20 01				jr nz, .ff1cont 
0856 13					inc de 
0857			 
0857			.ff1cont: 
0857			 
0857			 
0857 3e 40				ld a, STORE_BLOCK_PHY 
0859 cd de 0f				call addatohl 
085c 10 eb				djnz .fb1 
085e			 
085e 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0860			.fb2:   	 
0860 e5					push hl 
0861 c5					push bc 
0862 d5					push de 
0863 cd 1b 03				call se_readbyte 
0866 d1					pop de 
0867 c1					pop bc 
0868 e1					pop hl 
0869			 
0869					; is free? 
0869 fe 00				cp 0 
086b 20 01				jr nz, .ff2cont 
086d 13					inc de 
086e			 
086e			.ff2cont: 
086e			 
086e 3e 40				ld a, STORE_BLOCK_PHY 
0870 cd de 0f				call addatohl 
0873 10 eb				djnz .fb2 
0875			 
0875 eb				ex de, hl 
0876 c9				ret 
0877			 
0877			; Get File ID 
0877			; ----------- 
0877			; 
0877			; With current bank 
0877			;  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; For each logical block 
0877			;    Read block file id 
0877			;      If first block of file and dont have file id 
0877			;         if file get id and exit 
0877			 
0877			 
0877			 
0877			 
0877			; Create File 
0877			; ----------- 
0877			; 
0877			; With current bank  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; Increment file id number 
0877			; Save Config 
0877			; Find free block 
0877			; Set buffer with file name and file id 
0877			; Write buffer to free block  
0877			 
0877			 
0877			; hl point to file name 
0877			; hl returns file id 
0877			 
0877			; file format: 
0877			; byte 0 - file id 
0877			; byte 1 - extent number 
0877			; byte 2-> data 
0877			 
0877			; format for extent number 0: 
0877			; 
0877			; byte 0 - file id 
0877			; byte 1 - extent 0 
0877			; byte 2 - extent count 
0877			; byte 3 -> file name and meta data 
0877			 
0877			 
0877			storage_create: 
0877				if DEBUG_STORESE 
0877					DMARK "SCR" 
0877 f5				push af  
0878 3a 8c 08			ld a, (.dmark)  
087b 32 a0 fd			ld (debug_mark),a  
087e 3a 8d 08			ld a, (.dmark+1)  
0881 32 a1 fd			ld (debug_mark+1),a  
0884 3a 8e 08			ld a, (.dmark+2)  
0887 32 a2 fd			ld (debug_mark+2),a  
088a 18 03			jr .pastdmark  
088c ..			.dmark: db "SCR"  
088f f1			.pastdmark: pop af  
0890			endm  
# End of macro DMARK
0890					CALLMONITOR 
0890 cd aa fd			call debug_vector  
0893				endm  
# End of macro CALLMONITOR
0893				endif 
0893			 
0893 e5				push hl		; save file name pointer 
0894			 
0894 cd 25 05			call storage_get_block_0 
0897			 
0897 3a af f9			ld a,(store_page)	; get current file id 
089a 3c				inc a 
089b 32 af f9			ld (store_page),a 
089e				 
089e 32 a3 f9			ld (store_tmpid),a			; save id 
08a1			 
08a1 21 00 00			ld hl, 0 
08a4 11 af f9			ld de, store_page 
08a7				if DEBUG_STORESE 
08a7					DMARK "SCw" 
08a7 f5				push af  
08a8 3a bc 08			ld a, (.dmark)  
08ab 32 a0 fd			ld (debug_mark),a  
08ae 3a bd 08			ld a, (.dmark+1)  
08b1 32 a1 fd			ld (debug_mark+1),a  
08b4 3a be 08			ld a, (.dmark+2)  
08b7 32 a2 fd			ld (debug_mark+2),a  
08ba 18 03			jr .pastdmark  
08bc ..			.dmark: db "SCw"  
08bf f1			.pastdmark: pop af  
08c0			endm  
# End of macro DMARK
08c0					CALLMONITOR 
08c0 cd aa fd			call debug_vector  
08c3				endm  
# End of macro CALLMONITOR
08c3				endif 
08c3 cd d9 04			call storage_write_block	 ; save update 
08c6			 
08c6				if DEBUG_STORESE 
08c6 11 af f9				ld de, store_page 
08c9					DMARK "SCC" 
08c9 f5				push af  
08ca 3a de 08			ld a, (.dmark)  
08cd 32 a0 fd			ld (debug_mark),a  
08d0 3a df 08			ld a, (.dmark+1)  
08d3 32 a1 fd			ld (debug_mark+1),a  
08d6 3a e0 08			ld a, (.dmark+2)  
08d9 32 a2 fd			ld (debug_mark+2),a  
08dc 18 03			jr .pastdmark  
08de ..			.dmark: db "SCC"  
08e1 f1			.pastdmark: pop af  
08e2			endm  
# End of macro DMARK
08e2					CALLMONITOR 
08e2 cd aa fd			call debug_vector  
08e5				endm  
# End of macro CALLMONITOR
08e5				endif 
08e5				;  
08e5				 
08e5 21 40 00			ld hl, STORE_BLOCK_PHY 
08e8 11 00 00			ld de, 0 
08eb cd a7 07			call storage_findnextid 
08ee			 
08ee 22 9a f9			ld (store_tmppageid), hl    ; save page to use  
08f1			 
08f1				; TODO detect 0 = no spare blocks 
08f1			 
08f1				; hl now contains the free page to use for the file header page 
08f1			 
08f1				if DEBUG_STORESE 
08f1				DMARK "SCF" 
08f1 f5				push af  
08f2 3a 06 09			ld a, (.dmark)  
08f5 32 a0 fd			ld (debug_mark),a  
08f8 3a 07 09			ld a, (.dmark+1)  
08fb 32 a1 fd			ld (debug_mark+1),a  
08fe 3a 08 09			ld a, (.dmark+2)  
0901 32 a2 fd			ld (debug_mark+2),a  
0904 18 03			jr .pastdmark  
0906 ..			.dmark: db "SCF"  
0909 f1			.pastdmark: pop af  
090a			endm  
# End of macro DMARK
090a					CALLMONITOR 
090a cd aa fd			call debug_vector  
090d				endm  
# End of macro CALLMONITOR
090d				endif 
090d			 
090d 22 9a f9			ld (store_tmppageid), hl 
0910				 
0910 3a a3 f9			ld a,(store_tmpid)    ; get file id 
0913			;	ld a, (store_filecache)			; save to cache 
0913			 
0913 32 af f9			ld (store_page),a    ; set page id 
0916 3e 00			ld a, 0			 ; extent 0 is file header 
0918 32 b0 f9			ld (store_page+1), a   ; set file extent 
091b			 
091b 32 b1 f9			ld (store_page+2), a   ; extent count for the file 
091e			 
091e			;	inc hl 		; init block 0 of file 
091e			;	inc hl   		; skip file and extent id 
091e			 ;       ld a, 0 
091e			;	ld (hl),a 
091e			;	ld a, (store_filecache+1)  	; save to cache 
091e			 
091e			;	inc hl    ; file name 
091e				 
091e				 
091e 11 b2 f9			ld de, store_page+3    ; get buffer for term string to use as file name 
0921				if DEBUG_STORESE 
0921					DMARK "SCc" 
0921 f5				push af  
0922 3a 36 09			ld a, (.dmark)  
0925 32 a0 fd			ld (debug_mark),a  
0928 3a 37 09			ld a, (.dmark+1)  
092b 32 a1 fd			ld (debug_mark+1),a  
092e 3a 38 09			ld a, (.dmark+2)  
0931 32 a2 fd			ld (debug_mark+2),a  
0934 18 03			jr .pastdmark  
0936 ..			.dmark: db "SCc"  
0939 f1			.pastdmark: pop af  
093a			endm  
# End of macro DMARK
093a					CALLMONITOR 
093a cd aa fd			call debug_vector  
093d				endm  
# End of macro CALLMONITOR
093d				endif 
093d e1				pop hl    ; get zero term string 
093e e5				push hl 
093f 3e 00			ld a, 0 
0941 cd 4f 13			call strlent 
0944 23				inc hl   ; cover zero term 
0945 06 00			ld b,0 
0947 4d				ld c,l 
0948 e1				pop hl 
0949				;ex de, hl 
0949				if DEBUG_STORESE 
0949					DMARK "SCa" 
0949 f5				push af  
094a 3a 5e 09			ld a, (.dmark)  
094d 32 a0 fd			ld (debug_mark),a  
0950 3a 5f 09			ld a, (.dmark+1)  
0953 32 a1 fd			ld (debug_mark+1),a  
0956 3a 60 09			ld a, (.dmark+2)  
0959 32 a2 fd			ld (debug_mark+2),a  
095c 18 03			jr .pastdmark  
095e ..			.dmark: db "SCa"  
0961 f1			.pastdmark: pop af  
0962			endm  
# End of macro DMARK
0962					;push af 
0962					;ld a, 'a' 
0962					;ld (debug_mark),a 
0962					;pop af 
0962					CALLMONITOR 
0962 cd aa fd			call debug_vector  
0965				endm  
# End of macro CALLMONITOR
0965				endif 
0965 ed b0			ldir    ; copy zero term string 
0967				if DEBUG_STORESE 
0967					DMARK "SCA" 
0967 f5				push af  
0968 3a 7c 09			ld a, (.dmark)  
096b 32 a0 fd			ld (debug_mark),a  
096e 3a 7d 09			ld a, (.dmark+1)  
0971 32 a1 fd			ld (debug_mark+1),a  
0974 3a 7e 09			ld a, (.dmark+2)  
0977 32 a2 fd			ld (debug_mark+2),a  
097a 18 03			jr .pastdmark  
097c ..			.dmark: db "SCA"  
097f f1			.pastdmark: pop af  
0980			endm  
# End of macro DMARK
0980					CALLMONITOR 
0980 cd aa fd			call debug_vector  
0983				endm  
# End of macro CALLMONITOR
0983				endif 
0983			 
0983				; write file header page 
0983			 
0983 2a 9a f9			ld hl,(store_tmppageid) 
0986 11 af f9			ld de, store_page 
0989				if DEBUG_STORESE 
0989					DMARK "SCb" 
0989 f5				push af  
098a 3a 9e 09			ld a, (.dmark)  
098d 32 a0 fd			ld (debug_mark),a  
0990 3a 9f 09			ld a, (.dmark+1)  
0993 32 a1 fd			ld (debug_mark+1),a  
0996 3a a0 09			ld a, (.dmark+2)  
0999 32 a2 fd			ld (debug_mark+2),a  
099c 18 03			jr .pastdmark  
099e ..			.dmark: db "SCb"  
09a1 f1			.pastdmark: pop af  
09a2			endm  
# End of macro DMARK
09a2					;push af 
09a2					;ld a, 'b' 
09a2					;ld (debug_mark),a 
09a2					;pop af 
09a2					CALLMONITOR 
09a2 cd aa fd			call debug_vector  
09a5				endm  
# End of macro CALLMONITOR
09a5				endif 
09a5 cd d9 04			call storage_write_block 
09a8			 
09a8 3a a3 f9			ld a, (store_tmpid) 
09ab 6f				ld l, a 
09ac 26 00			ld h,0 
09ae				if DEBUG_STORESE 
09ae					DMARK "SCz" 
09ae f5				push af  
09af 3a c3 09			ld a, (.dmark)  
09b2 32 a0 fd			ld (debug_mark),a  
09b5 3a c4 09			ld a, (.dmark+1)  
09b8 32 a1 fd			ld (debug_mark+1),a  
09bb 3a c5 09			ld a, (.dmark+2)  
09be 32 a2 fd			ld (debug_mark+2),a  
09c1 18 03			jr .pastdmark  
09c3 ..			.dmark: db "SCz"  
09c6 f1			.pastdmark: pop af  
09c7			endm  
# End of macro DMARK
09c7					CALLMONITOR 
09c7 cd aa fd			call debug_vector  
09ca				endm  
# End of macro CALLMONITOR
09ca				endif 
09ca c9				ret 
09cb				 
09cb			 
09cb			 
09cb			; 
09cb			; Read File 
09cb			; 
09cb			; h - file id to locate 
09cb			; l - extent to locate 
09cb			; de - pointer to string to read into 
09cb			; 
09cb			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09cb			 
09cb			.sr_fail: 
09cb d1				pop de 
09cc c9				ret 
09cd			 
09cd			storage_read: 
09cd			 
09cd			 
09cd d5				push de 
09ce			 
09ce			; TODO BUG the above push is it popped before the RET Z? 
09ce			 
09ce			; TODO how to handle multiple part blocks 
09ce			 
09ce				; locate file extent to read 
09ce			 
09ce 5c				ld e, h 
09cf 55				ld d, l 
09d0			 
09d0			.srext: 
09d0 22 ad f9			ld (store_readptr), hl     ; save the current extent to load 
09d3 ed 53 ab f9		ld (store_readbuf), de     ; save the current buffer to load in to 
09d7			 
09d7 21 40 00			ld hl, STORE_BLOCK_PHY 
09da				if DEBUG_STORESE 
09da					DMARK "sre" 
09da f5				push af  
09db 3a ef 09			ld a, (.dmark)  
09de 32 a0 fd			ld (debug_mark),a  
09e1 3a f0 09			ld a, (.dmark+1)  
09e4 32 a1 fd			ld (debug_mark+1),a  
09e7 3a f1 09			ld a, (.dmark+2)  
09ea 32 a2 fd			ld (debug_mark+2),a  
09ed 18 03			jr .pastdmark  
09ef ..			.dmark: db "sre"  
09f2 f1			.pastdmark: pop af  
09f3			endm  
# End of macro DMARK
09f3					CALLMONITOR 
09f3 cd aa fd			call debug_vector  
09f6				endm  
# End of macro CALLMONITOR
09f6				endif 
09f6 cd a7 07			call storage_findnextid 
09f9			 
09f9				if DEBUG_STORESE 
09f9					DMARK "srf" 
09f9 f5				push af  
09fa 3a 0e 0a			ld a, (.dmark)  
09fd 32 a0 fd			ld (debug_mark),a  
0a00 3a 0f 0a			ld a, (.dmark+1)  
0a03 32 a1 fd			ld (debug_mark+1),a  
0a06 3a 10 0a			ld a, (.dmark+2)  
0a09 32 a2 fd			ld (debug_mark+2),a  
0a0c 18 03			jr .pastdmark  
0a0e ..			.dmark: db "srf"  
0a11 f1			.pastdmark: pop af  
0a12			endm  
# End of macro DMARK
0a12					CALLMONITOR 
0a12 cd aa fd			call debug_vector  
0a15				endm  
# End of macro CALLMONITOR
0a15				endif 
0a15 cd 07 10			call ishlzero 
0a18			;	ld a, l 
0a18			;	add h 
0a18			;	cp 0 
0a18 28 b1			jr z,.sr_fail			; block not found so EOF 
0a1a			 
0a1a				; save current address for use by higher level words etc 
0a1a			 
0a1a 22 a0 f9			ld (store_openaddr),hl 
0a1d			 
0a1d			 
0a1d				; hl contains page number to load 
0a1d d1				pop de   ; get storage 
0a1e ed 53 ab f9		ld (store_readbuf), de     ; current buffer to load in to 
0a22 d5				push de 
0a23				if DEBUG_STORESE 
0a23					DMARK "srg" 
0a23 f5				push af  
0a24 3a 38 0a			ld a, (.dmark)  
0a27 32 a0 fd			ld (debug_mark),a  
0a2a 3a 39 0a			ld a, (.dmark+1)  
0a2d 32 a1 fd			ld (debug_mark+1),a  
0a30 3a 3a 0a			ld a, (.dmark+2)  
0a33 32 a2 fd			ld (debug_mark+2),a  
0a36 18 03			jr .pastdmark  
0a38 ..			.dmark: db "srg"  
0a3b f1			.pastdmark: pop af  
0a3c			endm  
# End of macro DMARK
0a3c					CALLMONITOR 
0a3c cd aa fd			call debug_vector  
0a3f				endm  
# End of macro CALLMONITOR
0a3f				endif 
0a3f cd 74 04			call storage_read_block 
0a42			 
0a42				; if this a continuation read??? 
0a42			 
0a42 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a45			 
0a45 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a47 cd de 0f			call addatohl 
0a4a 7e				ld a,(hl) 
0a4b fe 00			cp 0 
0a4d 28 02			jr z, .markiscont 
0a4f 3e ff			ld a, 255 
0a51			 
0a51			.markiscont: 
0a51 32 a2 f9			ld (store_readcont), a 
0a54			 
0a54				if DEBUG_STORESE 
0a54					DMARK "srC" 
0a54 f5				push af  
0a55 3a 69 0a			ld a, (.dmark)  
0a58 32 a0 fd			ld (debug_mark),a  
0a5b 3a 6a 0a			ld a, (.dmark+1)  
0a5e 32 a1 fd			ld (debug_mark+1),a  
0a61 3a 6b 0a			ld a, (.dmark+2)  
0a64 32 a2 fd			ld (debug_mark+2),a  
0a67 18 03			jr .pastdmark  
0a69 ..			.dmark: db "srC"  
0a6c f1			.pastdmark: pop af  
0a6d			endm  
# End of macro DMARK
0a6d					CALLMONITOR 
0a6d cd aa fd			call debug_vector  
0a70				endm  
# End of macro CALLMONITOR
0a70				endif 
0a70				; only short reads enabled 
0a70			 
0a70 3a aa f9			ld a, (store_longread) 
0a73 fe 00			cp 0 
0a75 ca 42 0b			jp z, .readdone 
0a78			 
0a78			; TODO if block has no zeros then need to read next block  
0a78			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a78			; check last byte of physical block. 
0a78			; if not zero then the next block needs to be loaded 
0a78			 
0a78			 
0a78 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a7b			 
0a7b 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a7d cd de 0f			call addatohl 
0a80				;dec hl 
0a80 7e				ld a,(hl) 
0a81				if DEBUG_STORESE 
0a81					DMARK "sr?" 
0a81 f5				push af  
0a82 3a 96 0a			ld a, (.dmark)  
0a85 32 a0 fd			ld (debug_mark),a  
0a88 3a 97 0a			ld a, (.dmark+1)  
0a8b 32 a1 fd			ld (debug_mark+1),a  
0a8e 3a 98 0a			ld a, (.dmark+2)  
0a91 32 a2 fd			ld (debug_mark+2),a  
0a94 18 03			jr .pastdmark  
0a96 ..			.dmark: db "sr?"  
0a99 f1			.pastdmark: pop af  
0a9a			endm  
# End of macro DMARK
0a9a					CALLMONITOR 
0a9a cd aa fd			call debug_vector  
0a9d				endm  
# End of macro CALLMONITOR
0a9d				endif 
0a9d fe 00			cp 0 
0a9f ca 42 0b			jp z, .readdone 
0aa2			 
0aa2				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0aa2			 
0aa2 23				inc hl 
0aa3			 
0aa3 22 ab f9			ld (store_readbuf), hl     ; save the current buffer to load in to 
0aa6			 
0aa6 ed 5b ad f9		ld de, (store_readptr)     ; save the current extent to load 
0aaa			 
0aaa eb				ex de, hl 
0aab			 
0aab				; next ext 
0aab			 
0aab 23				inc hl 
0aac 22 ad f9			ld  (store_readptr), hl     ; save the current extent to load 
0aaf			 
0aaf				if DEBUG_STORESE 
0aaf					DMARK "sF2" 
0aaf f5				push af  
0ab0 3a c4 0a			ld a, (.dmark)  
0ab3 32 a0 fd			ld (debug_mark),a  
0ab6 3a c5 0a			ld a, (.dmark+1)  
0ab9 32 a1 fd			ld (debug_mark+1),a  
0abc 3a c6 0a			ld a, (.dmark+2)  
0abf 32 a2 fd			ld (debug_mark+2),a  
0ac2 18 03			jr .pastdmark  
0ac4 ..			.dmark: db "sF2"  
0ac7 f1			.pastdmark: pop af  
0ac8			endm  
# End of macro DMARK
0ac8					CALLMONITOR 
0ac8 cd aa fd			call debug_vector  
0acb				endm  
# End of macro CALLMONITOR
0acb				endif 
0acb			 
0acb				; get and load block 
0acb			 
0acb cd a7 07			call storage_findnextid 
0ace			 
0ace				if DEBUG_STORESE 
0ace					DMARK "sf2" 
0ace f5				push af  
0acf 3a e3 0a			ld a, (.dmark)  
0ad2 32 a0 fd			ld (debug_mark),a  
0ad5 3a e4 0a			ld a, (.dmark+1)  
0ad8 32 a1 fd			ld (debug_mark+1),a  
0adb 3a e5 0a			ld a, (.dmark+2)  
0ade 32 a2 fd			ld (debug_mark+2),a  
0ae1 18 03			jr .pastdmark  
0ae3 ..			.dmark: db "sf2"  
0ae6 f1			.pastdmark: pop af  
0ae7			endm  
# End of macro DMARK
0ae7					CALLMONITOR 
0ae7 cd aa fd			call debug_vector  
0aea				endm  
# End of macro CALLMONITOR
0aea				endif 
0aea cd 07 10			call ishlzero 
0aed			;	ld a, l 
0aed			;	add h 
0aed			;	cp 0 
0aed ca cb 09			jp z,.sr_fail			; block not found so EOF 
0af0				 
0af0				; save current address for use by higher level words etc 
0af0			 
0af0 22 a0 f9			ld (store_openaddr),hl 
0af3			 
0af3 cd 74 04			call storage_read_block 
0af6			 
0af6				; on a continuation block, we now have the file id and ext in the middle of the block 
0af6				; we need to pull everything back  
0af6			 
0af6 ed 5b ab f9		ld de, (store_readbuf)     ; current buffer to nudge into 
0afa 2a ab f9			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0afd 23				inc hl 
0afe 23				inc hl     ; skip id and ext 
0aff 01 40 00			ld bc, STORE_BLOCK_PHY 
0b02				if DEBUG_STORESE 
0b02					DMARK "SR<" 
0b02 f5				push af  
0b03 3a 17 0b			ld a, (.dmark)  
0b06 32 a0 fd			ld (debug_mark),a  
0b09 3a 18 0b			ld a, (.dmark+1)  
0b0c 32 a1 fd			ld (debug_mark+1),a  
0b0f 3a 19 0b			ld a, (.dmark+2)  
0b12 32 a2 fd			ld (debug_mark+2),a  
0b15 18 03			jr .pastdmark  
0b17 ..			.dmark: db "SR<"  
0b1a f1			.pastdmark: pop af  
0b1b			endm  
# End of macro DMARK
0b1b					CALLMONITOR 
0b1b cd aa fd			call debug_vector  
0b1e				endm  
# End of macro CALLMONITOR
0b1e				endif 
0b1e ed b0			ldir     ; copy data 
0b20			 
0b20				; move the pointer back and pretend we have a full buffer for next recheck 
0b20			 
0b20 1b				dec de 
0b21 1b				dec de 
0b22			 
0b22			; TODO do pop below now short circuit loop????? 
0b22 c1				pop bc     ; get rid of spare de on stack 
0b23				if DEBUG_STORESE 
0b23					DMARK "SR>" 
0b23 f5				push af  
0b24 3a 38 0b			ld a, (.dmark)  
0b27 32 a0 fd			ld (debug_mark),a  
0b2a 3a 39 0b			ld a, (.dmark+1)  
0b2d 32 a1 fd			ld (debug_mark+1),a  
0b30 3a 3a 0b			ld a, (.dmark+2)  
0b33 32 a2 fd			ld (debug_mark+2),a  
0b36 18 03			jr .pastdmark  
0b38 ..			.dmark: db "SR>"  
0b3b f1			.pastdmark: pop af  
0b3c			endm  
# End of macro DMARK
0b3c					CALLMONITOR 
0b3c cd aa fd			call debug_vector  
0b3f				endm  
# End of macro CALLMONITOR
0b3f				endif 
0b3f c3 d0 09			jp .srext 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			.readdone:		 
0b42 e1				pop hl 		 ; return start of data to show as not EOF 
0b43 23				inc hl   ; past file id 
0b44 23				inc hl   ; past ext 
0b45				if DEBUG_STORESE 
0b45					DMARK "SRe" 
0b45 f5				push af  
0b46 3a 5a 0b			ld a, (.dmark)  
0b49 32 a0 fd			ld (debug_mark),a  
0b4c 3a 5b 0b			ld a, (.dmark+1)  
0b4f 32 a1 fd			ld (debug_mark+1),a  
0b52 3a 5c 0b			ld a, (.dmark+2)  
0b55 32 a2 fd			ld (debug_mark+2),a  
0b58 18 03			jr .pastdmark  
0b5a ..			.dmark: db "SRe"  
0b5d f1			.pastdmark: pop af  
0b5e			endm  
# End of macro DMARK
0b5e					CALLMONITOR 
0b5e cd aa fd			call debug_vector  
0b61				endm  
# End of macro CALLMONITOR
0b61				endif 
0b61 c9					ret 
0b62			 
0b62			 
0b62			 
0b62			; 
0b62			; Append File 
0b62			; 
0b62			; hl - file id to locate 
0b62			; de - pointer to (multi block) string to write 
0b62			 
0b62			.sa_notfound: 
0b62 d1				pop de 
0b63 c9				ret 
0b64			 
0b64			 
0b64			storage_append: 
0b64				; hl -  file id to append to 
0b64				; de - string to append 
0b64			 
0b64 d5				push de 
0b65				 
0b65				if DEBUG_STORESE 
0b65					DMARK "AP1" 
0b65 f5				push af  
0b66 3a 7a 0b			ld a, (.dmark)  
0b69 32 a0 fd			ld (debug_mark),a  
0b6c 3a 7b 0b			ld a, (.dmark+1)  
0b6f 32 a1 fd			ld (debug_mark+1),a  
0b72 3a 7c 0b			ld a, (.dmark+2)  
0b75 32 a2 fd			ld (debug_mark+2),a  
0b78 18 03			jr .pastdmark  
0b7a ..			.dmark: db "AP1"  
0b7d f1			.pastdmark: pop af  
0b7e			endm  
# End of macro DMARK
0b7e					CALLMONITOR 
0b7e cd aa fd			call debug_vector  
0b81				endm  
# End of macro CALLMONITOR
0b81				endif 
0b81			 
0b81 7d				ld a, l 
0b82 32 a3 f9			ld (store_tmpid), a 
0b85			 
0b85				; get file header  
0b85			 
0b85 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b87 3a a3 f9			ld a, (store_tmpid) 
0b8a 5f				ld e, a 
0b8b			 
0b8b 21 40 00				ld hl, STORE_BLOCK_PHY 
0b8e cd a7 07				call storage_findnextid 
0b91			 
0b91 cd 07 10			call ishlzero 
0b94 28 cc			jr z, .sa_notfound 
0b96			 
0b96 22 9a f9			ld (store_tmppageid), hl 
0b99			 
0b99				; TODO handle file id not found 
0b99			 
0b99				if DEBUG_STORESE 
0b99					DMARK "AP2" 
0b99 f5				push af  
0b9a 3a ae 0b			ld a, (.dmark)  
0b9d 32 a0 fd			ld (debug_mark),a  
0ba0 3a af 0b			ld a, (.dmark+1)  
0ba3 32 a1 fd			ld (debug_mark+1),a  
0ba6 3a b0 0b			ld a, (.dmark+2)  
0ba9 32 a2 fd			ld (debug_mark+2),a  
0bac 18 03			jr .pastdmark  
0bae ..			.dmark: db "AP2"  
0bb1 f1			.pastdmark: pop af  
0bb2			endm  
# End of macro DMARK
0bb2					CALLMONITOR 
0bb2 cd aa fd			call debug_vector  
0bb5				endm  
# End of macro CALLMONITOR
0bb5				endif 
0bb5			 
0bb5				; update file extent count 
0bb5			 
0bb5 11 af f9			ld de, store_page 
0bb8			 
0bb8 cd 74 04			call storage_read_block 
0bbb			 
0bbb				if DEBUG_STORESE 
0bbb					DMARK "AP3" 
0bbb f5				push af  
0bbc 3a d0 0b			ld a, (.dmark)  
0bbf 32 a0 fd			ld (debug_mark),a  
0bc2 3a d1 0b			ld a, (.dmark+1)  
0bc5 32 a1 fd			ld (debug_mark+1),a  
0bc8 3a d2 0b			ld a, (.dmark+2)  
0bcb 32 a2 fd			ld (debug_mark+2),a  
0bce 18 03			jr .pastdmark  
0bd0 ..			.dmark: db "AP3"  
0bd3 f1			.pastdmark: pop af  
0bd4			endm  
# End of macro DMARK
0bd4					CALLMONITOR 
0bd4 cd aa fd			call debug_vector  
0bd7				endm  
# End of macro CALLMONITOR
0bd7				endif 
0bd7			;	ld (store_tmppageid), hl 
0bd7			 
0bd7 3a b1 f9			ld a, (store_page+2) 
0bda 3c				inc a 
0bdb 32 b1 f9			ld (store_page+2), a 
0bde 32 a2 f9			ld (store_tmpext), a 
0be1				 
0be1				if DEBUG_STORESE 
0be1					DMARK "AP3" 
0be1 f5				push af  
0be2 3a f6 0b			ld a, (.dmark)  
0be5 32 a0 fd			ld (debug_mark),a  
0be8 3a f7 0b			ld a, (.dmark+1)  
0beb 32 a1 fd			ld (debug_mark+1),a  
0bee 3a f8 0b			ld a, (.dmark+2)  
0bf1 32 a2 fd			ld (debug_mark+2),a  
0bf4 18 03			jr .pastdmark  
0bf6 ..			.dmark: db "AP3"  
0bf9 f1			.pastdmark: pop af  
0bfa			endm  
# End of macro DMARK
0bfa					CALLMONITOR 
0bfa cd aa fd			call debug_vector  
0bfd				endm  
# End of macro CALLMONITOR
0bfd				endif 
0bfd 2a 9a f9			ld hl, (store_tmppageid) 
0c00 11 af f9			ld de, store_page 
0c03 cd d9 04			call storage_write_block 
0c06			 
0c06				; find free block 
0c06			 
0c06 11 00 00			ld de, 0			 ; file extent to locate 
0c09			 
0c09 21 40 00				ld hl, STORE_BLOCK_PHY 
0c0c cd a7 07				call storage_findnextid 
0c0f cd 07 10			call ishlzero 
0c12 ca 62 0b			jp z, .sa_notfound 
0c15			 
0c15					; TODO handle no space left 
0c15					 
0c15 22 9a f9				ld (store_tmppageid), hl 
0c18			 
0c18				if DEBUG_STORESE 
0c18					DMARK "AP4" 
0c18 f5				push af  
0c19 3a 2d 0c			ld a, (.dmark)  
0c1c 32 a0 fd			ld (debug_mark),a  
0c1f 3a 2e 0c			ld a, (.dmark+1)  
0c22 32 a1 fd			ld (debug_mark+1),a  
0c25 3a 2f 0c			ld a, (.dmark+2)  
0c28 32 a2 fd			ld (debug_mark+2),a  
0c2b 18 03			jr .pastdmark  
0c2d ..			.dmark: db "AP4"  
0c30 f1			.pastdmark: pop af  
0c31			endm  
# End of macro DMARK
0c31					CALLMONITOR 
0c31 cd aa fd			call debug_vector  
0c34				endm  
# End of macro CALLMONITOR
0c34				endif 
0c34					; init the buffer with zeros so we can id if the buffer is full or not 
0c34			 
0c34 e5					push hl 
0c35 c5					push bc 
0c36			 
0c36 21 af f9				ld hl, store_page 
0c39 06 40				ld b, STORE_BLOCK_PHY 
0c3b 3e 00				ld a, 0 
0c3d 77			.zeroblock:	ld (hl), a 
0c3e 23					inc hl 
0c3f 10 fc				djnz .zeroblock 
0c41			 
0c41 c1					pop bc 
0c42 e1					pop hl 
0c43			 
0c43					; construct block 
0c43			 
0c43 3a a3 f9				ld a, (store_tmpid) 
0c46 32 af f9				ld (store_page), a   ; file id 
0c49 3a a2 f9				ld a, (store_tmpext)   ; extent for this block 
0c4c 32 b0 f9				ld (store_page+1), a 
0c4f			 
0c4f e1					pop hl    ; get string to write 
0c50 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c52 11 b1 f9				ld de, store_page+2 
0c55			 
0c55				if DEBUG_STORESE 
0c55					DMARK "AP5" 
0c55 f5				push af  
0c56 3a 6a 0c			ld a, (.dmark)  
0c59 32 a0 fd			ld (debug_mark),a  
0c5c 3a 6b 0c			ld a, (.dmark+1)  
0c5f 32 a1 fd			ld (debug_mark+1),a  
0c62 3a 6c 0c			ld a, (.dmark+2)  
0c65 32 a2 fd			ld (debug_mark+2),a  
0c68 18 03			jr .pastdmark  
0c6a ..			.dmark: db "AP5"  
0c6d f1			.pastdmark: pop af  
0c6e			endm  
# End of macro DMARK
0c6e					CALLMONITOR 
0c6e cd aa fd			call debug_vector  
0c71				endm  
# End of macro CALLMONITOR
0c71				endif 
0c71			 
0c71			 
0c71			 
0c71					; fill buffer with data until end of string or full block 
0c71			 
0c71 7e			.appd:		ld a, (hl) 
0c72 12					ld (de), a 
0c73 fe 00				cp 0 
0c75 28 04				jr z, .appdone 
0c77 23					inc hl 
0c78 13					inc de 
0c79 10 f6				djnz .appd 
0c7b			 
0c7b e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c7c f5					push af   		; save last byte dumped 
0c7d			 
0c7d			 
0c7d 2a 9a f9			ld hl, (store_tmppageid) 
0c80 11 af f9			ld de, store_page 
0c83				if DEBUG_STORESE 
0c83					DMARK "AP6" 
0c83 f5				push af  
0c84 3a 98 0c			ld a, (.dmark)  
0c87 32 a0 fd			ld (debug_mark),a  
0c8a 3a 99 0c			ld a, (.dmark+1)  
0c8d 32 a1 fd			ld (debug_mark+1),a  
0c90 3a 9a 0c			ld a, (.dmark+2)  
0c93 32 a2 fd			ld (debug_mark+2),a  
0c96 18 03			jr .pastdmark  
0c98 ..			.dmark: db "AP6"  
0c9b f1			.pastdmark: pop af  
0c9c			endm  
# End of macro DMARK
0c9c					CALLMONITOR 
0c9c cd aa fd			call debug_vector  
0c9f				endm  
# End of macro CALLMONITOR
0c9f				endif 
0c9f cd d9 04				call storage_write_block 
0ca2			 
0ca2			 
0ca2				; was that a full block of data written? 
0ca2				; any more to write out? 
0ca2			 
0ca2				; if yes then set vars and jump to start of function again 
0ca2			 
0ca2 f1					pop af 
0ca3 d1					pop de 
0ca4			 
0ca4 fe 00				cp 0		 ; no, string was fully written 
0ca6 c8					ret z 
0ca7			 
0ca7					; setup vars for next cycle 
0ca7			 
0ca7 3a a3 f9				ld a, (store_tmpid) 
0caa 6f					ld l, a 
0cab 26 00				ld h, 0 
0cad			 
0cad c3 64 0b			 	jp storage_append	 ; yes, need to write out some more 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			if DEBUG_STORECF 
0cb0			storageput:	 
0cb0					ret 
0cb0			storageread: 
0cb0					ld hl, store_page 
0cb0					ld b, 200 
0cb0					ld a,0 
0cb0			.src:		ld (hl),a 
0cb0					inc hl 
0cb0					djnz .src 
0cb0					 
0cb0			 
0cb0					ld de, 0 
0cb0					ld bc, 1 
0cb0					ld hl, store_page 
0cb0					call cfRead 
0cb0			 
0cb0				call cfGetError 
0cb0				ld hl,scratch 
0cb0				call hexout 
0cb0				ld hl, scratch+2 
0cb0				ld a, 0 
0cb0				ld (hl),a 
0cb0				ld de, scratch 
0cb0				ld a,display_row_1 
0cb0				call str_at_display 
0cb0				call update_display 
0cb0			 
0cb0					ld hl, store_page 
0cb0					ld (os_cur_ptr),hl 
0cb0			 
0cb0					ret 
0cb0			endif 
0cb0			 
0cb0			 
0cb0			; Clear out the main buffer store (used to remove junk before writing a new block) 
0cb0			 
0cb0			storage_clear_page: 
0cb0 e5				push hl 
0cb1 d5				push de 
0cb2 c5				push bc 
0cb3 21 af f9			ld hl, store_page 
0cb6 3e 00			ld a, 0 
0cb8 77				ld (hl), a 
0cb9			 
0cb9 11 b0 f9			ld de, store_page+1 
0cbc 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0cbf			 
0cbf ed b0			ldir 
0cc1				 
0cc1 c1				pop bc 
0cc2 d1				pop de 
0cc3 e1				pop hl 
0cc4 c9				ret 
0cc5			 
0cc5			; eof 
# End of file firmware_storage.asm
0cc5			  
0cc5			; support routines for above hardware abstraction layer  
0cc5			  
0cc5			include "firmware_general.asm"        ; general support functions  
0cc5			 
0cc5			; word look up 
0cc5			 
0cc5			; in 
0cc5			; a is the index 
0cc5			; hl is pointer start of array 
0cc5			; 
0cc5			; returns 
0cc5			; hl to the word 
0cc5			; 
0cc5			 
0cc5			table_lookup:  
0cc5 d5					push de 
0cc6 eb					ex de, hl 
0cc7			 
0cc7 6f					ld l, a 
0cc8 26 00				ld h, 0 
0cca 29					add hl, hl 
0ccb 19					add hl, de 
0ccc 7e					ld a, (hl) 
0ccd 23					inc hl 
0cce 66					ld h,(hl) 
0ccf 6f					ld l, a 
0cd0			 
0cd0 d1					pop de 
0cd1 c9					ret 
0cd2			 
0cd2			; Delay loops 
0cd2			 
0cd2			 
0cd2			 
0cd2			aDelayInMS: 
0cd2 c5				push bc 
0cd3 47				ld b,a 
0cd4			msdelay: 
0cd4 c5				push bc 
0cd5				 
0cd5			 
0cd5 01 41 00			ld bc,041h 
0cd8 cd f0 0c			call delayloop 
0cdb c1				pop bc 
0cdc 05				dec b 
0cdd 20 f5			jr nz,msdelay 
0cdf			 
0cdf			;if CPU_CLOCK_8MHZ 
0cdf			;msdelay8: 
0cdf			;	push bc 
0cdf			;	 
0cdf			; 
0cdf			;	ld bc,041h 
0cdf			;	call delayloop 
0cdf			;	pop bc 
0cdf			;	dec b 
0cdf			;	jr nz,msdelay8 
0cdf			;endif 
0cdf			 
0cdf			 
0cdf c1				pop bc 
0ce0 c9				ret 
0ce1			 
0ce1			 
0ce1			delay250ms: 
0ce1				;push de 
0ce1 01 00 40			ld bc, 04000h 
0ce4 c3 f0 0c			jp delayloop 
0ce7			delay500ms: 
0ce7				;push de 
0ce7 01 00 80			ld bc, 08000h 
0cea c3 f0 0c			jp delayloop 
0ced			delay1s: 
0ced				;push bc 
0ced			   ; Clobbers A, d and e 
0ced 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0cf0			delayloop: 
0cf0 c5			    push bc 
0cf1			 
0cf1			if BASE_CPM 
0cf1				ld bc, CPM_DELAY_TUNE 
0cf1			.cpmloop: 
0cf1				push bc 
0cf1			 
0cf1			endif 
0cf1			 
0cf1			 
0cf1			 
0cf1			delayloopi: 
0cf1			;	push bc 
0cf1			;.dl: 
0cf1 cb 47		    bit     0,a    	; 8 
0cf3 cb 47		    bit     0,a    	; 8 
0cf5 cb 47		    bit     0,a    	; 8 
0cf7 e6 ff		    and     255  	; 7 
0cf9 0b			    dec     bc      	; 6 
0cfa 79			    ld      a,c     	; 4 
0cfb b0			    or      b     	; 4 
0cfc c2 f1 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cff			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cff				;pop de 
0cff			;pop bc 
0cff			 
0cff			if BASE_CPM 
0cff				pop bc 
0cff				 
0cff			    dec     bc      	; 6 
0cff			    ld      a,c     	; 4 
0cff			    or      b     	; 4 
0cff			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cff				 
0cff			 
0cff			endif 
0cff			;if CPU_CLOCK_8MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff			 
0cff			;if CPU_CLOCK_10MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff c1			    pop bc 
0d00			 
0d00 c9				ret 
0d01			 
0d01			 
0d01			 
0d01			; eof 
# End of file firmware_general.asm
0d01			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0d01			; display routines that use the physical hardware abstraction layer 
0d01			 
0d01			 
0d01			; Display an activity indicator 
0d01			; Each call returns the new char pointed to in hl 
0d01			 
0d01			active: 
0d01 3a fb fa			ld a, (display_active) 
0d04 fe 06			cp 6 
0d06			 
0d06 20 02			jr nz, .sne 
0d08				; gone past the last one reset sequence 
0d08 3e ff			ld a, 255 
0d0a			 
0d0a			.sne:   
0d0a				; get the next char in seq 
0d0a 3c				inc a 
0d0b 32 fb fa			ld (display_active), a 
0d0e			 
0d0e				; look up the string in the table 
0d0e 21 25 0d			ld hl, actseq 
0d11 cb 27			sla a 
0d13 cd de 0f			call addatohl 
0d16 cd ba 23			call loadwordinhl 
0d19			 
0d19				; forth will write the to string when pushing so move from rom to ram 
0d19			 
0d19 11 fc fa			ld de, display_active+1 
0d1c 01 02 00			ld bc, 2 
0d1f ed b0			ldir 
0d21			 
0d21 21 fc fa			ld hl, display_active+1 
0d24 c9				ret 
0d25				 
0d25				 
0d25			 
0d25			 
0d25			;db "|/-\|-\" 
0d25			 
0d25			actseq: 
0d25			 
0d25 33 0d		dw spin0 
0d27 35 0d		dw spin1 
0d29 37 0d		dw spin2 
0d2b 39 0d		dw spin3 
0d2d 37 0d		dw spin2 
0d2f 35 0d		dw spin1 
0d31 33 0d		dw spin0 
0d33			 
0d33 .. 00		spin0: db " ", 0 
0d35 .. 00		spin1: db "-", 0 
0d37 .. 00		spin2: db "+", 0 
0d39 .. 00		spin3: db "#", 0 
0d3b			 
0d3b			 
0d3b			; information window 
0d3b			 
0d3b			; pass hl with 1st string to display 
0d3b			; pass de with 2nd string to display 
0d3b			 
0d3b			info_panel: 
0d3b e5				push hl 
0d3c			 
0d3c 2a 01 fb			ld hl, (display_fb_active) 
0d3f e5				push hl    ; future de destination 
0d40 21 e6 fc				ld hl, display_fb0 
0d43 22 01 fb				ld (display_fb_active), hl 
0d46			 
0d46			;	call clear_display 
0d46			 
0d46				if BASE_CPM 
0d46				ld a, '.' 
0d46				else 
0d46 3e a5			ld a, 165 
0d48				endif 
0d48 cd af 0d			call fill_display 
0d4b			 
0d4b			 
0d4b 3e 55			ld a, display_row_3 + 5 
0d4d cd bd 0d			call str_at_display 
0d50			 
0d50 e1				pop hl 
0d51 d1				pop de 
0d52			 
0d52 e5				push hl 
0d53			 
0d53			 
0d53 3e 2d			ld a, display_row_2 + 5 
0d55 cd bd 0d			call str_at_display 
0d58			 
0d58			 
0d58 cd cd 0d			call update_display 
0d5b cd c0 1f			call next_page_prompt 
0d5e cd aa 0d			call clear_display 
0d61			 
0d61				 
0d61 21 45 fc				ld hl, display_fb1 
0d64 22 01 fb				ld (display_fb_active), hl 
0d67 cd cd 0d			call update_display 
0d6a			 
0d6a e1				pop hl 
0d6b			 
0d6b c9				ret 
0d6c			 
0d6c			 
0d6c			 
0d6c			 
0d6c			; TODO windowing? 
0d6c			 
0d6c			; TODO scroll line up 
0d6c			 
0d6c			scroll_up: 
0d6c			 
0d6c e5				push hl 
0d6d d5				push de 
0d6e c5				push bc 
0d6f			 
0d6f				; get frame buffer  
0d6f			 
0d6f 2a 01 fb			ld hl, (display_fb_active) 
0d72 e5				push hl    ; future de destination 
0d73			 
0d73 11 28 00			ld  de, display_cols 
0d76 19				add hl, de 
0d77			 
0d77 d1				pop de 
0d78			 
0d78				;ex de, hl 
0d78 01 9f 00			ld bc, display_fb_len -1  
0d7b			;if DEBUG_FORTH_WORDS 
0d7b			;	DMARK "SCL" 
0d7b			;	CALLMONITOR 
0d7b			;endif	 
0d7b ed b0			ldir 
0d7d			 
0d7d				; wipe bottom row 
0d7d			 
0d7d			 
0d7d 2a 01 fb			ld hl, (display_fb_active) 
0d80 11 a0 00			ld de, display_cols*display_rows 
0d83 19				add hl, de 
0d84 06 28			ld b, display_cols 
0d86 3e 20			ld a, ' ' 
0d88			.scwipe: 
0d88 77				ld (hl), a 
0d89 2b				dec hl 
0d8a 10 fc			djnz .scwipe 
0d8c			 
0d8c				;pop hl 
0d8c			 
0d8c c1				pop bc 
0d8d d1				pop de 
0d8e e1				pop hl 
0d8f			 
0d8f c9				ret 
0d90			 
0d90			 
0d90			;scroll_upo: 
0d90			;	ld de, display_row_1 
0d90			 ;	ld hl, display_row_2 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_2 
0d90			 ;	ld hl, display_row_3 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_3 
0d90			 ;	ld hl, display_row_4 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			 
0d90			; TODO clear row 4 
0d90			 
0d90			;	ret 
0d90			 
0d90				 
0d90			scroll_down: 
0d90			 
0d90 e5				push hl 
0d91 d5				push de 
0d92 c5				push bc 
0d93			 
0d93				; get frame buffer  
0d93			 
0d93 2a 01 fb			ld hl, (display_fb_active) 
0d96			 
0d96 11 9f 00			ld de, display_fb_len - 1 
0d99 19				add hl, de 
0d9a			 
0d9a e5			push hl    ; future de destination 
0d9b			 
0d9b 11 28 00			ld  de, display_cols 
0d9e ed 52			sbc hl, de 
0da0			 
0da0			 
0da0 d1				pop de 
0da1			 
0da1			;	ex de, hl 
0da1 01 9f 00			ld bc, display_fb_len -1  
0da4			 
0da4			 
0da4				 
0da4			 
0da4 ed b0			ldir 
0da6			 
0da6				; wipe bottom row 
0da6			 
0da6			 
0da6			;	ld hl, (display_fb_active) 
0da6			;;	ld de, display_cols*display_rows 
0da6			;;	add hl, de 
0da6			;	ld b, display_cols 
0da6			;	ld a, ' ' 
0da6			;.scwiped: 
0da6			;	ld (hl), a 
0da6			;	dec hl 
0da6			;	djnz .scwiped 
0da6			 
0da6				;pop hl 
0da6			 
0da6 c1				pop bc 
0da7 d1				pop de 
0da8 e1				pop hl 
0da9			 
0da9 c9				ret 
0daa			;scroll_down: 
0daa			;	ld de, display_row_4 
0daa			;	ld hl, display_row_3 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_3 
0daa			; 	ld hl, display_row_2 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_2 
0daa			;	ld hl, display_row_1 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;;; TODO clear row 1 
0daa			;	ret 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			; clear active frame buffer 
0daa			 
0daa			clear_display: 
0daa 3e 20			ld a, ' ' 
0dac c3 af 0d			jp fill_display 
0daf			 
0daf			; fill active frame buffer with a char in A 
0daf			 
0daf			fill_display: 
0daf 06 a0			ld b,display_fb_len 
0db1 2a 01 fb			ld hl, (display_fb_active) 
0db4 77			.fd1:	ld (hl),a 
0db5 23				inc hl 
0db6 10 fc			djnz .fd1 
0db8 23				inc hl 
0db9 3e 00			ld a,0 
0dbb 77				ld (hl),a 
0dbc			 
0dbc			 
0dbc c9				ret 
0dbd			; Write string (DE) at pos (A) to active frame buffer 
0dbd			 
0dbd 2a 01 fb		str_at_display:    ld hl,(display_fb_active) 
0dc0 06 00					ld b,0 
0dc2 4f					ld c,a 
0dc3 09					add hl,bc 
0dc4 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0dc5 b7			            OR   A              ;Null terminator? 
0dc6 c8			            RET  Z              ;Yes, so finished 
0dc7 77					ld (hl),a 
0dc8 23				inc hl 
0dc9 13			            INC  DE             ;Point to next character 
0dca 18 f8		            JR   .sad1     ;Repeat 
0dcc c9					ret 
0dcd			 
0dcd			; using current frame buffer write to physical display 
0dcd			 
0dcd			update_display: 
0dcd e5				push hl 
0dce 2a 01 fb			ld hl, (display_fb_active) 
0dd1 cd 11 74			call write_display 
0dd4 e1				pop hl 
0dd5 c9				ret 
0dd6			 
0dd6			; TODO scrolling 
0dd6			 
0dd6			 
0dd6			; move cursor right one char 
0dd6			cursor_right: 
0dd6			 
0dd6				; TODO shift right 
0dd6				; TODO if beyond max col 
0dd6				; TODO       cursor_next_line 
0dd6			 
0dd6 c9				ret 
0dd7			 
0dd7			 
0dd7			cursor_next_line: 
0dd7				; TODO first char 
0dd7				; TODO line down 
0dd7				; TODO if past last row 
0dd7				; TODO    scroll up 
0dd7			 
0dd7 c9				ret 
0dd8			 
0dd8			cursor_left: 
0dd8				; TODO shift left 
0dd8				; TODO if beyond left  
0dd8				; TODO     cursor prev line 
0dd8				 
0dd8 c9				ret 
0dd9			 
0dd9			cursor_prev_line: 
0dd9				; TODO last char 
0dd9				; TODO line up 
0dd9				; TODO if past first row 
0dd9				; TODO   scroll down 
0dd9			 
0dd9 c9				ret 
0dda			 
0dda			 
0dda			cout: 
0dda				; A - char 
0dda c9				ret 
0ddb			 
0ddb			 
0ddb			; Display a menu and allow item selection (optional toggle items) 
0ddb			; 
0ddb			; format: 
0ddb			; hl pointer to word array with zero term for items 
0ddb			; e.g.    db item1 
0ddb			;         db .... 
0ddb			;         db 0 
0ddb			; 
0ddb			; a = starting menu item  
0ddb			; 
0ddb			; de = pointer item toggle array   (todo) 
0ddb			; 
0ddb			; returns item selected in a 1-... 
0ddb			; returns 0 if back button pressed 
0ddb			; 
0ddb			; NOTE: Uses system frame buffer to display 
0ddb			; 
0ddb			; LEFT, Q = go back 
0ddb			; RIGHT, SPACE, CR = select 
0ddb			; UP, A - Up 
0ddb			; DOWN, Z - Down 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			menu: 
0ddb			 
0ddb					; keep array pointer 
0ddb			 
0ddb 22 a8 f9				ld (store_tmp1), hl 
0dde 32 a6 f9				ld (store_tmp2), a 
0de1			 
0de1					; check for key bounce 
0de1			 
0de1			if BASE_KEV 
0de1			 
0de1 cd 5c 77		.mbounce:	call cin 
0de4 fe 00				cp 0 
0de6 20 f9				jr nz, .mbounce 
0de8			endif 
0de8					; for ease use ex 
0de8			 
0de8					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0de8 21 e6 fc				ld hl, display_fb0 
0deb 22 01 fb				ld (display_fb_active), hl 
0dee			 
0dee cd aa 0d		.mloop:		call clear_display 
0df1 cd cd 0d				call update_display 
0df4			 
0df4					; draw selection id '>' at 1 
0df4			 
0df4					; init start of list display 
0df4			 
0df4 3e 05				ld a, 5 
0df6 32 a4 f9				ld (store_tmp3), a   ; display row count 
0df9 3a a6 f9				ld a,( store_tmp2) 
0dfc 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0dff			 
0dff					 
0dff			.mitem:	 
0dff			 
0dff			 
0dff 3a a7 f9				ld a,(store_tmp2+1) 
0e02 6f					ld l, a 
0e03 26 00				ld h, 0 
0e05 29					add hl, hl 
0e06 ed 5b a8 f9			ld de, (store_tmp1) 
0e0a 19					add hl, de 
0e0b 7e					ld a, (hl) 
0e0c 23					inc hl 
0e0d 66					ld h,(hl) 
0e0e 6f					ld l, a 
0e0f			 
0e0f cd 07 10				call ishlzero 
0e12 28 1a				jr z, .mdone 
0e14			 
0e14 eb					ex de, hl 
0e15 3a a4 f9				ld a, (store_tmp3) 
0e18 cd bd 0d				call str_at_display 
0e1b					 
0e1b			 
0e1b					; next item 
0e1b 3a a7 f9				ld a, (store_tmp2+1) 
0e1e 3c					inc a 
0e1f 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0e22			 
0e22			 		; next row 
0e22			 
0e22 3a a4 f9				ld a, (store_tmp3) 
0e25 c6 28				add display_cols 
0e27 32 a4 f9				ld (store_tmp3), a 
0e2a			 
0e2a					; at end of screen? 
0e2a			 
0e2a fe 10				cp display_rows*4 
0e2c 20 d1				jr nz, .mitem 
0e2e			 
0e2e			 
0e2e			.mdone: 
0e2e cd 07 10				call ishlzero 
0e31 28 08				jr z, .nodn 
0e33			 
0e33 3e 78				ld a, display_row_4 
0e35 11 b4 0e				ld de, .mdown 
0e38 cd bd 0d				call str_at_display 
0e3b			 
0e3b					; draw options to fill the screens with active item on line 1 
0e3b					; if current option is 2 or more then display ^ in top 
0e3b			 
0e3b 3a a6 f9		.nodn:		ld a, (store_tmp2) 
0e3e fe 00				cp 0 
0e40 28 08				jr z, .noup 
0e42			 
0e42 3e 00				ld a, 0 
0e44 11 b2 0e				ld de, .mup 
0e47 cd bd 0d				call str_at_display 
0e4a			 
0e4a 3e 02		.noup:		ld a, 2 
0e4c 11 b0 0e				ld de, .msel 
0e4f cd bd 0d				call str_at_display 
0e52			 
0e52					; if current option + 1 is not null then display V in bottom 
0e52					; get key 
0e52 cd cd 0d				call update_display 
0e55			 
0e55			 
0e55					; handle key 
0e55			 
0e55 cd 4b 77				call cin_wait 
0e58			 
0e58 fe 05				cp KEY_UP 
0e5a 28 2b				jr z, .mgoup 
0e5c fe 61				cp 'a' 
0e5e 28 27				jr z, .mgoup 
0e60 fe 0a				cp KEY_DOWN 
0e62 28 32				jr z, .mgod 
0e64 fe 7a				cp 'z' 
0e66 28 2e				jr z, .mgod 
0e68 fe 20				cp ' ' 
0e6a 28 34				jr z, .goend 
0e6c fe 0c				cp KEY_RIGHT 
0e6e 28 30				jr z, .goend 
0e70 fe 0d				cp KEY_CR 
0e72 28 2c				jr z, .goend 
0e74 fe 71				cp 'q' 
0e76 28 0b				jr z, .goback 
0e78			 
0e78 fe 0b				cp KEY_LEFT 
0e7a 28 07				jr z, .goback 
0e7c fe 08				cp KEY_BS 
0e7e 28 03				jr z, .goback 
0e80 c3 ee 0d				jp .mloop 
0e83			 
0e83			.goback: 
0e83 3e 00			ld a, 0 
0e85 18 1d			jr .goend2 
0e87			 
0e87				; move up one 
0e87			.mgoup: 
0e87 3a a6 f9				ld a, (store_tmp2) 
0e8a fe 00				cp 0 
0e8c ca ee 0d				jp z, .mloop 
0e8f 3d					dec a 
0e90 32 a6 f9				ld (store_tmp2), a 
0e93 c3 ee 0d				jp .mloop 
0e96			 
0e96				; move down one 
0e96			.mgod: 
0e96 3a a6 f9				ld a, (store_tmp2) 
0e99 3c					inc a 
0e9a 32 a6 f9				ld (store_tmp2), a 
0e9d c3 ee 0d				jp .mloop 
0ea0			 
0ea0			 
0ea0			.goend: 
0ea0					; get selected item number 
0ea0			 
0ea0 3a a6 f9				ld a, (store_tmp2) 
0ea3 3c					inc a 
0ea4			 
0ea4			.goend2: 
0ea4 f5					push af 
0ea5			 
0ea5					; restore active fb 
0ea5					; TODO BUG assumes fb1 
0ea5			 
0ea5 21 45 fc				ld hl, display_fb1 
0ea8 22 01 fb				ld (display_fb_active), hl 
0eab			 
0eab					; restore main regs 
0eab			 
0eab			 
0eab cd cd 0d				call update_display 
0eae			 
0eae f1					pop af 
0eaf			 
0eaf c9				ret 
0eb0			 
0eb0 .. 00		.msel:   db ">",0 
0eb2 .. 00		.mup:   db "^",0 
0eb4 .. 00		.mdown:   db "v",0 
0eb6			 
0eb6			 
0eb6			; eof 
0eb6			 
# End of file firmware_display.asm
0eb6			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0eb6			; random number generators 
0eb6			 
0eb6			 
0eb6			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0eb6			 
0eb6			 
0eb6			;-----> Generate a random number 
0eb6			; output a=answer 0<=a<=255 
0eb6			; all registers are preserved except: af 
0eb6			random: 
0eb6 e5			        push    hl 
0eb7 d5			        push    de 
0eb8 2a e0 fa		        ld      hl,(randData) 
0ebb ed 5f		        ld      a,r 
0ebd 57			        ld      d,a 
0ebe 5e			        ld      e,(hl) 
0ebf 19			        add     hl,de 
0ec0 85			        add     a,l 
0ec1 ac			        xor     h 
0ec2 22 e0 fa		        ld      (randData),hl 
0ec5 d1			        pop     de 
0ec6 e1			        pop     hl 
0ec7 c9			        ret 
0ec8			 
0ec8			 
0ec8			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0ec8			 
0ec8			 
0ec8			 
0ec8			;------LFSR------ 
0ec8			;James Montelongo 
0ec8			;optimized by Spencer Putt 
0ec8			;out: 
0ec8			; a = 8 bit random number 
0ec8			RandLFSR: 
0ec8 21 e6 fa		        ld hl,LFSRSeed+4 
0ecb 5e			        ld e,(hl) 
0ecc 23			        inc hl 
0ecd 56			        ld d,(hl) 
0ece 23			        inc hl 
0ecf 4e			        ld c,(hl) 
0ed0 23			        inc hl 
0ed1 7e			        ld a,(hl) 
0ed2 47			        ld b,a 
0ed3 cb 13		        rl e  
0ed5 cb 12			rl d 
0ed7 cb 11		        rl c  
0ed9 17				rla 
0eda cb 13		        rl e  
0edc cb 12			rl d 
0ede cb 11		        rl c  
0ee0 17				rla 
0ee1 cb 13		        rl e  
0ee3 cb 12			rl d 
0ee5 cb 11		        rl c  
0ee7 17				rla 
0ee8 67			        ld h,a 
0ee9 cb 13		        rl e  
0eeb cb 12			rl d 
0eed cb 11		        rl c  
0eef 17				rla 
0ef0 a8			        xor b 
0ef1 cb 13		        rl e  
0ef3 cb 12			rl d 
0ef5 ac			        xor h 
0ef6 a9			        xor c 
0ef7 aa			        xor d 
0ef8 21 e8 fa		        ld hl,LFSRSeed+6 
0efb 11 e9 fa		        ld de,LFSRSeed+7 
0efe 01 07 00		        ld bc,7 
0f01 ed b8		        lddr 
0f03 12			        ld (de),a 
0f04 c9			        ret 
0f05			 
0f05			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0f05			 
0f05			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0f05			 
0f05			 
0f05			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0f05			 
0f05			prng16: 
0f05			;Inputs: 
0f05			;   (seed1) contains a 16-bit seed value 
0f05			;   (seed2) contains a NON-ZERO 16-bit seed value 
0f05			;Outputs: 
0f05			;   HL is the result 
0f05			;   BC is the result of the LCG, so not that great of quality 
0f05			;   DE is preserved 
0f05			;Destroys: 
0f05			;   AF 
0f05			;cycle: 4,294,901,760 (almost 4.3 billion) 
0f05			;160cc 
0f05			;26 bytes 
0f05 2a da fa		    ld hl,(seed1) 
0f08 44			    ld b,h 
0f09 4d			    ld c,l 
0f0a 29			    add hl,hl 
0f0b 29			    add hl,hl 
0f0c 2c			    inc l 
0f0d 09			    add hl,bc 
0f0e 22 da fa		    ld (seed1),hl 
0f11 2a d8 fa		    ld hl,(seed2) 
0f14 29			    add hl,hl 
0f15 9f			    sbc a,a 
0f16 e6 2d		    and %00101101 
0f18 ad			    xor l 
0f19 6f			    ld l,a 
0f1a 22 d8 fa		    ld (seed2),hl 
0f1d 09			    add hl,bc 
0f1e c9			    ret 
0f1f			 
0f1f			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0f1f			 
0f1f			rand32: 
0f1f			;Inputs: 
0f1f			;   (seed1_0) holds the lower 16 bits of the first seed 
0f1f			;   (seed1_1) holds the upper 16 bits of the first seed 
0f1f			;   (seed2_0) holds the lower 16 bits of the second seed 
0f1f			;   (seed2_1) holds the upper 16 bits of the second seed 
0f1f			;   **NOTE: seed2 must be non-zero 
0f1f			;Outputs: 
0f1f			;   HL is the result 
0f1f			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0f1f			;Destroys: 
0f1f			;   AF 
0f1f			;Tested and passes all CAcert tests 
0f1f			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0f1f			;it has a period of 18,446,744,069,414,584,320 
0f1f			;roughly 18.4 quintillion. 
0f1f			;LFSR taps: 0,2,6,7  = 11000101 
0f1f			;291cc 
0f1f			;seed1_0=$+1 
0f1f			;    ld hl,12345 
0f1f			;seed1_1=$+1 
0f1f			;    ld de,6789 
0f1f			;    ld b,h 
0f1f			;    ld c,l 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    inc l 
0f1f			;    add hl,bc 
0f1f			;    ld (seed1_0),hl 
0f1f			;    ld hl,(seed1_1) 
0f1f			;    adc hl,de 
0f1f			;    ld (seed1_1),hl 
0f1f			;    ex de,hl 
0f1f			;seed2_0=$+1 
0f1f			;    ld hl,9876 
0f1f			;seed2_1=$+1 
0f1f			;    ld bc,54321 
0f1f			;    add hl,hl \ rl c \ rl b 
0f1f			;    ld (seed2_1),bc 
0f1f			;    sbc a,a 
0f1f			;    and %11000101 
0f1f			;    xor l 
0f1f			;    ld l,a 
0f1f			;    ld (seed2_0),hl 
0f1f			;    ex de,hl 
0f1f			;    add hl,bc 
0f1f			;    ret 
0f1f			; 
0f1f			 
0f1f			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0f1f			; 20 bytes, 86 cycles (excluding ret) 
0f1f			 
0f1f			; returns   hl = pseudorandom number 
0f1f			; corrupts   a 
0f1f			 
0f1f			; generates 16-bit pseudorandom numbers with a period of 65535 
0f1f			; using the xorshift method: 
0f1f			 
0f1f			; hl ^= hl << 7 
0f1f			; hl ^= hl >> 9 
0f1f			; hl ^= hl << 8 
0f1f			 
0f1f			; some alternative shift triplets which also perform well are: 
0f1f			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0f1f			 
0f1f			;  org 32768 
0f1f			 
0f1f			xrnd: 
0f1f 2a de fa		  ld hl,(xrandc)       ; seed must not be 0 
0f22 3e 00		  ld a,0 
0f24 bd			  cp l 
0f25 20 02		  jr nz, .xrnd1 
0f27 2e 01		  ld l, 1 
0f29			.xrnd1: 
0f29			 
0f29 7c			  ld a,h 
0f2a 1f			  rra 
0f2b 7d			  ld a,l 
0f2c 1f			  rra 
0f2d ac			  xor h 
0f2e 67			  ld h,a 
0f2f 7d			  ld a,l 
0f30 1f			  rra 
0f31 7c			  ld a,h 
0f32 1f			  rra 
0f33 ad			  xor l 
0f34 6f			  ld l,a 
0f35 ac			  xor h 
0f36 67			  ld h,a 
0f37			 
0f37 22 de fa		  ld (xrandc),hl 
0f3a			 
0f3a c9			  ret 
0f3b			;  
0f3b			 
0f3b			 
0f3b			;;;; int maths 
0f3b			 
0f3b			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f3b			; Divide 16-bit values (with 16-bit result) 
0f3b			; In: Divide BC by divider DE 
0f3b			; Out: BC = result, HL = rest 
0f3b			; 
0f3b			Div16: 
0f3b 21 00 00		    ld hl,0 
0f3e 78			    ld a,b 
0f3f 06 08		    ld b,8 
0f41			Div16_Loop1: 
0f41 17			    rla 
0f42 ed 6a		    adc hl,hl 
0f44 ed 52		    sbc hl,de 
0f46 30 01		    jr nc,Div16_NoAdd1 
0f48 19			    add hl,de 
0f49			Div16_NoAdd1: 
0f49 10 f6		    djnz Div16_Loop1 
0f4b 17			    rla 
0f4c 2f			    cpl 
0f4d 47			    ld b,a 
0f4e 79			    ld a,c 
0f4f 48			    ld c,b 
0f50 06 08		    ld b,8 
0f52			Div16_Loop2: 
0f52 17			    rla 
0f53 ed 6a		    adc hl,hl 
0f55 ed 52		    sbc hl,de 
0f57 30 01		    jr nc,Div16_NoAdd2 
0f59 19			    add hl,de 
0f5a			Div16_NoAdd2: 
0f5a 10 f6		    djnz Div16_Loop2 
0f5c 17			    rla 
0f5d 2f			    cpl 
0f5e 41			    ld b,c 
0f5f 4f			    ld c,a 
0f60 c9			ret 
0f61			 
0f61			 
0f61			;http://z80-heaven.wikidot.com/math 
0f61			; 
0f61			;Inputs: 
0f61			;     DE and A are factors 
0f61			;Outputs: 
0f61			;     A is not changed 
0f61			;     B is 0 
0f61			;     C is not changed 
0f61			;     DE is not changed 
0f61			;     HL is the product 
0f61			;Time: 
0f61			;     342+6x 
0f61			; 
0f61			Mult16: 
0f61			 
0f61 06 08		     ld b,8          ;7           7 
0f63 21 00 00		     ld hl,0         ;10         10 
0f66 29			       add hl,hl     ;11*8       88 
0f67 07			       rlca          ;4*8        32 
0f68 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f6a 19			         add hl,de   ;--         -- 
0f6b 10 f9		       djnz $-5      ;13*7+8     99 
0f6d c9			ret 
0f6e			 
0f6e			; 
0f6e			; Square root of 16-bit value 
0f6e			; In:  HL = value 
0f6e			; Out:  D = result (rounded down) 
0f6e			; 
0f6e			;Sqr16: 
0f6e			;    ld de,#0040 
0f6e			;    ld a,l 
0f6e			;    ld l,h 
0f6e			;    ld h,d 
0f6e			;    or a 
0f6e			;    ld b,8 
0f6e			;Sqr16_Loop: 
0f6e			;    sbc hl,de 
0f6e			;    jr nc,Sqr16_Skip 
0f6e			;    add hl,de 
0f6e			;Sqr16_Skip: 
0f6e			;    ccf 
0f6e			;    rl d 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    djnz Sqr16_Loop 
0f6e			;    ret 
0f6e			; 
0f6e			; 
0f6e			; Divide 8-bit values 
0f6e			; In: Divide E by divider C 
0f6e			; Out: A = result, B = rest 
0f6e			; 
0f6e			Div8: 
0f6e af			    xor a 
0f6f 06 08		    ld b,8 
0f71			Div8_Loop: 
0f71 cb 13		    rl e 
0f73 17			    rla 
0f74 91			    sub c 
0f75 30 01		    jr nc,Div8_NoAdd 
0f77 81			    add a,c 
0f78			Div8_NoAdd: 
0f78 10 f7		    djnz Div8_Loop 
0f7a 47			    ld b,a 
0f7b 7b			    ld a,e 
0f7c 17			    rla 
0f7d 2f			    cpl 
0f7e c9			    ret 
0f7f			 
0f7f			; 
0f7f			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f7f			; In: Multiply A with DE 
0f7f			; Out: HL = result 
0f7f			; 
0f7f			Mult12U: 
0f7f 2e 00		    ld l,0 
0f81 87			    add a,a 
0f82 30 01		    jr nc,Mult12U_NoAdd0 
0f84 19			    add hl,de 
0f85			Mult12U_NoAdd0: 
0f85 29			    add hl,hl 
0f86 87			    add a,a 
0f87 30 01		    jr nc,Mult12U_NoAdd1 
0f89 19			    add hl,de 
0f8a			Mult12U_NoAdd1: 
0f8a 29			    add hl,hl 
0f8b 87			    add a,a 
0f8c 30 01		    jr nc,Mult12U_NoAdd2 
0f8e 19			    add hl,de 
0f8f			Mult12U_NoAdd2: 
0f8f 29			    add hl,hl 
0f90 87			    add a,a 
0f91 30 01		    jr nc,Mult12U_NoAdd3 
0f93 19			    add hl,de 
0f94			Mult12U_NoAdd3: 
0f94 29			    add hl,hl 
0f95 87			    add a,a 
0f96 30 01		    jr nc,Mult12U_NoAdd4 
0f98 19			    add hl,de 
0f99			Mult12U_NoAdd4: 
0f99 29			    add hl,hl 
0f9a 87			    add a,a 
0f9b 30 01		    jr nc,Mult12U_NoAdd5 
0f9d 19			    add hl,de 
0f9e			Mult12U_NoAdd5: 
0f9e 29			    add hl,hl 
0f9f 87			    add a,a 
0fa0 30 01		    jr nc,Mult12U_NoAdd6 
0fa2 19			    add hl,de 
0fa3			Mult12U_NoAdd6: 
0fa3 29			    add hl,hl 
0fa4 87			    add a,a 
0fa5 d0			    ret nc 
0fa6 19			    add hl,de 
0fa7 c9			    ret 
0fa8			 
0fa8			; 
0fa8			; Multiply 8-bit value with a 16-bit value (right rotating) 
0fa8			; In: Multiply A with DE 
0fa8			;      Put lowest value in A for most efficient calculation 
0fa8			; Out: HL = result 
0fa8			; 
0fa8			Mult12R: 
0fa8 21 00 00		    ld hl,0 
0fab			Mult12R_Loop: 
0fab cb 3f		    srl a 
0fad 30 01		    jr nc,Mult12R_NoAdd 
0faf 19			    add hl,de 
0fb0			Mult12R_NoAdd: 
0fb0 cb 23		    sla e 
0fb2 cb 12		    rl d 
0fb4 b7			    or a 
0fb5 c2 ab 0f		    jp nz,Mult12R_Loop 
0fb8 c9			    ret 
0fb9			 
0fb9			; 
0fb9			; Multiply 16-bit values (with 32-bit result) 
0fb9			; In: Multiply BC with DE 
0fb9			; Out: BCHL = result 
0fb9			; 
0fb9			Mult32: 
0fb9 79			    ld a,c 
0fba 48			    ld c,b 
0fbb 21 00 00		    ld hl,0 
0fbe 06 10		    ld b,16 
0fc0			Mult32_Loop: 
0fc0 29			    add hl,hl 
0fc1 17			    rla 
0fc2 cb 11		    rl c 
0fc4 30 07		    jr nc,Mult32_NoAdd 
0fc6 19			    add hl,de 
0fc7 ce 00		    adc a,0 
0fc9 d2 cd 0f		    jp nc,Mult32_NoAdd 
0fcc 0c			    inc c 
0fcd			Mult32_NoAdd: 
0fcd 10 f1		    djnz Mult32_Loop 
0fcf 41			    ld b,c 
0fd0 4f			    ld c,a 
0fd1 c9			    ret 
0fd2			 
0fd2			 
0fd2			 
0fd2			; 
0fd2			; Multiply 8-bit values 
0fd2			; In:  Multiply H with E 
0fd2			; Out: HL = result 
0fd2			; 
0fd2			Mult8: 
0fd2 16 00		    ld d,0 
0fd4 6a			    ld l,d 
0fd5 06 08		    ld b,8 
0fd7			Mult8_Loop: 
0fd7 29			    add hl,hl 
0fd8 30 01		    jr nc,Mult8_NoAdd 
0fda 19			    add hl,de 
0fdb			Mult8_NoAdd: 
0fdb 10 fa		    djnz Mult8_Loop 
0fdd c9			    ret 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			;;http://z80-heaven.wikidot.com/math 
0fde			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fde			; 
0fde			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fde			;     ld a,16        ;7 
0fde			;     ld hl,0        ;10 
0fde			;     jp $+5         ;10 
0fde			;.DivLoop: 
0fde			;       add hl,bc    ;-- 
0fde			;       dec a        ;64 
0fde			;       jr z,.DivLoopEnd        ;86 
0fde			; 
0fde			;       sla e        ;128 
0fde			;       rl d         ;128 
0fde			;       adc hl,hl    ;240 
0fde			;       sbc hl,bc    ;240 
0fde			;       jr nc,.DivLoop ;23|21 
0fde			;       inc e        ;-- 
0fde			;       jp .DivLoop+1 
0fde			; 
0fde			;.DivLoopEnd: 
0fde			 
0fde			;HL_Div_C: 
0fde			;Inputs: 
0fde			;     HL is the numerator 
0fde			;     C is the denominator 
0fde			;Outputs: 
0fde			;     A is the remainder 
0fde			;     B is 0 
0fde			;     C is not changed 
0fde			;     DE is not changed 
0fde			;     HL is the quotient 
0fde			; 
0fde			;       ld b,16 
0fde			;       xor a 
0fde			;         add hl,hl 
0fde			;         rla 
0fde			;         cp c 
0fde			;         jr c,$+4 
0fde			;           inc l 
0fde			;           sub c 
0fde			;         djnz $-7 
0fde			 
0fde			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fde			 
0fde			addatohl: 
0fde 85			    add   a, l    ; A = A+L 
0fdf 6f			    ld    l, a    ; L = A+L 
0fe0 8c			    adc   a, h    ; A = A+L+H+carry 
0fe1 95			    sub   l       ; A = H+carry 
0fe2 67			    ld    h, a    ; H = H+carry 
0fe3 c9			ret 
0fe4			 
0fe4			addatode: 
0fe4 83			    add   a, e    ; A = A+L 
0fe5 5f			    ld    e, a    ; L = A+L 
0fe6 8a			    adc   a, d    ; A = A+L+H+carry 
0fe7 93			    sub   e       ; A = H+carry 
0fe8 57			    ld    d, a    ; H = H+carry 
0fe9 c9			ret 
0fea			 
0fea			 
0fea			addatobc: 
0fea 81			    add   a, c    ; A = A+L 
0feb 4f			    ld    c, a    ; L = A+L 
0fec 88			    adc   a, b    ; A = A+L+H+carry 
0fed 91			    sub   c       ; A = H+carry 
0fee 47			    ld    b, a    ; H = H+carry 
0fef c9			ret 
0ff0			 
0ff0			subafromhl: 
0ff0			   ; If A=0 do nothing 
0ff0			    ; Otherwise flip A's sign. Since 
0ff0			    ; the upper byte becomes -1, also 
0ff0			    ; substract 1 from H. 
0ff0 ed 44		    neg 
0ff2 ca fb 0f		    jp    z, Skip 
0ff5 25			    dec   h 
0ff6			     
0ff6			    ; Now add the low byte as usual 
0ff6			    ; Two's complement takes care of 
0ff6			    ; ensuring the result is correct 
0ff6 85			    add   a, l 
0ff7 6f			    ld    l, a 
0ff8 8c			    adc   a, h 
0ff9 95			    sub   l 
0ffa 67			    ld    h, a 
0ffb			Skip: 
0ffb c9				ret 
0ffc			 
0ffc			 
0ffc			; compare hl and de 
0ffc			; returns:  
0ffc			; if hl = de, z=1, s=0, c0=0 
0ffc			; if hl > de, z=0, s=0, c=0 
0ffc			; if hl < de, z=0, s=1, c=1 
0ffc			cmp16:	 
0ffc b7				or a 
0ffd ed 52			sbc hl,de 
0fff e0				ret po 
1000 7c				ld a,h 
1001 1f				rra 
1002 ee 40			xor 01000000B 
1004 37				scf 
1005 8f				adc a,a 
1006 c9				ret 
1007			 
1007			 
1007			; test if hl contains zero   - A is destroyed 
1007			 
1007			ishlzero:    
1007 b7				or a     ; reset flags 
1008 7c				ld a, h 
1009 b5				or l        	 
100a			 
100a c9				ret 
100b			 
100b			 
100b			 
100b			 
100b			if FORTH_ENABLE_FLOATMATH 
100b			;include "float/bbcmath.z80" 
100b			include "float/lpfpcalc.asm" 
100b			endif 
100b			 
100b			 
100b			; eof 
100b			 
# End of file firmware_maths.asm
100b			include "firmware_strings.asm"   ; string handling  
100b			 
100b			 
100b			; TODO string len 
100b			; input text string, end on cr with zero term 
100b			; a offset into frame buffer to start prompt 
100b			; d is max length 
100b			; e is display size TODO 
100b			; c is current cursor position 
100b			; hl is ptr to where string will be stored and edited directly 
100b			 
100b			 
100b			; TODO check limit of buffer for new inserts 
100b			; TODO check insert does not push beyond buffer 
100b			; TODO scroll in a limited display area 
100b			; TODO scroll whole screen on page wrap 
100b			 
100b			 
100b			; TODO use LCD cursor? 
100b			 
100b			EDIT_V1: equ 0 
100b			EDIT_V2: equ 1 
100b			 
100b			 
100b			 
100b			if EDIT_V2 
100b			input_str: 
100b			 
100b 32 99 fd			    	ld (input_at_pos),a      ; save display position to start 
100e			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
100e 22 9c fd				ld (input_start), hl     ; save ptr to buffer 
1011			;		ld a, c 
1011			;		call addatohl 
1011			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
1011 7a					ld a,d 
1012 32 9b fd			        ld (input_size), a       ; save length of input area 
1015 79					ld a, c 
1016 32 8a fd				ld (input_cursor),a      ; init cursor start position relative to start of string 
1019 7b					ld a,e 
101a 32 9a fd			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
101d			 
101d			 
101d					; add a trailing space to make screen refresh nicer 
101d			 
101d					;ld hl, (input_start) 
101d					;push hl 
101d					;ld a, 0 
101d					;call strlent 
101d					;ld a, l 
101d					;pop hl 
101d					;call addatohl 
101d					;dec hl 
101d					;ld a, ' ' 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld a, 0 
101d					;ld (hl), a 
101d			 
101d			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
101d					; init cursor shape if not set by the cin routines 
101d 21 f6 fa				ld hl, cursor_shape 
1020			if BASE_KEV 
1020 3e ff				ld a, 255 
1022			else 
1022					ld a, '#' 
1022			endif 
1022 77					ld (hl), a 
1023 23					inc hl 
1024 3e 00				ld a, 0 
1026 77					ld (hl), a 
1027			 
1027 3e 09				ld a, CUR_BLINK_RATE 
1029 32 95 fd				ld (input_cur_flash), a 
102c 3e 01				ld a, 1 
102e 32 94 fd				ld (input_cur_onoff),a 
1031			.inmain:	 
1031			 
1031 cd 59 11				call input_disp_ref 
1034			 
1034					; save current length of string 
1034			 
1034 2a 9c fd				ld hl, (input_start) 
1037 3e 00				ld a, 0 
1039 cd 4f 13				call strlent 
103c 7d					ld a,l 
103d 32 8f fd				ld (input_len), a 
1040			 
1040					;call input_disp_oncur 
1040			 
1040					; display current state of input buffer 
1040			 
1040					; clean any backspace chars 
1040			 
1040 3e 20				ld a, " " 
1042 32 f6 f0				ld (scratch),a 
1045 3e 00				ld a, 0 
1047 32 f7 f0				ld (scratch+1),a 
104a 3a 99 fd				ld a,(input_at_pos) 
104d 85					add l 
104e 11 f6 f0				ld de, scratch 
1051 cd bd 0d				call str_at_display 
1054			 
1054					; pause 1ms 
1054			 
1054 3e 01				ld a, 1 
1056 cd d2 0c				call aDelayInMS 
1059			 
1059			; display cursor if visible on this cycle 
1059			 
1059					; dec flash counter 
1059 3a 95 fd				ld a, (input_cur_flash) 
105c 3d					dec a 
105d 32 95 fd				ld (input_cur_flash), a 
1060 fe 00				cp 0 
1062 20 0d				jr nz, .inochgstate 
1064			 
1064			 
1064					; reset on change of state 
1064 3e 09				ld a, CUR_BLINK_RATE 
1066 32 95 fd				ld (input_cur_flash), a 
1069			 
1069					; change state 
1069 3a 94 fd				ld a,(input_cur_onoff) 
106c ed 44				neg 
106e 32 94 fd				ld (input_cur_onoff),a 
1071			 
1071			 
1071			 
1071			 
1071					; TODO is cursor visible? 
1071					; TODO if so then over write the char at curspos pos with the cursor shape 
1071			 
1071								 
1071			 
1071			.inochgstate: 
1071 3a 94 fd				ld a,(input_cur_onoff) 
1074 fe ff				cp 255 
1076 28 0e				jr z, .skipcursor 
1078 3a 99 fd				ld a, (input_at_pos) 
107b 47					ld b, a 
107c 3a 8a fd				ld a, (input_cursor) 
107f 80					add b 
1080 11 f6 fa				ld de, cursor_shape 
1083					 
1083 cd bd 0d				call str_at_display 
1086			 
1086			.skipcursor: 
1086				if DEBUG_INPUTV2 
1086			 
1086					ld a,(input_at_pos) 
1086					ld hl, LFSRSeed 
1086					call hexout 
1086					ld a, (input_cursor) 
1086					ld hl, LFSRSeed+2 
1086					call hexout 
1086					ld a,(input_size) 
1086					ld hl, LFSRSeed+4 
1086					call hexout 
1086			 
1086					ld a,(input_cur_onoff) 
1086					ld hl, LFSRSeed+6 
1086					call hexout 
1086			 
1086					ld a,(input_cur_flash) 
1086					ld hl, LFSRSeed+8 
1086					call hexout 
1086			 
1086					ld a,(input_len) 
1086					ld hl, LFSRSeed+10 
1086					call hexout 
1086					ld hl, LFSRSeed+12 
1086					ld a, 0 
1086					ld (hl),a 
1086					ld a, display_row_4 
1086					ld de, LFSRSeed 
1086					call str_at_display 
1086				endif 
1086 cd cd 0d				call update_display 
1089			 
1089					; TODO keyboard processing 
1089			 
1089			if BASE_CPM 
1089					call cin_wait 
1089			else 
1089 cd 5c 77				call cin    ; _wait 
108c			endif 
108c fe 00				cp 0 
108e ca 31 10				jp z, .inmain 
1091			 
1091 fe 0b				cp KEY_LEFT    ; cursor left 
1093 ca 4b 11				jp z, input_left 
1096				 
1096 fe 0c				cp KEY_RIGHT      ; cursor right 
1098 ca 52 11				jp z, input_right 
109b			 
109b fe 0d				cp KEY_CR 
109d c8					ret z 
109e			 
109e fe 08				cp KEY_BS 
10a0 ca c0 11				jp z, input_delchar 
10a3			 
10a3 fe 06				cp KEY_NEXTWORD 
10a5 ca cc 10				jp z, input_nxtword 
10a8			 
10a8 fe 07				cp KEY_PREVWORD 
10aa ca f3 10				jp z, input_prvword 
10ad			 
10ad fe 0e				cp KEY_HOME    ; jump to start of line 
10af 20 08				jr nz, .ikh 
10b1 3e 00				ld a, 0 
10b3 32 8a fd				ld (input_cursor), a 
10b6 ca 31 10				jp z, .inmain 
10b9			.ikh: 
10b9			 
10b9 fe 0f				cp KEY_END     ; jump to end of line 
10bb 20 09				jr nz, .ike 
10bd 3a 8f fd				ld a, (input_len) 
10c0 32 8a fd				ld (input_cursor),a 
10c3 ca 31 10				jp z, .inmain 
10c6			.ike: 
10c6 fe 05			        cp KEY_UP      ; recall last command 
10c8 c8					ret z 
10c9			;jr nz, .irec 
10c9			; TODO next word 
10c9			; TODO prev word 
10c9			;  
10c9			; 
10c9			;	ld hl, scratch 
10c9			;	ld de, os_last_cmd 
10c9			;	call strcpy 
10c9			;		jp  .inmain 
10c9			.irec: 
10c9			;		jr .instr1 
10c9			 
10c9			 
10c9			 
10c9					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
10c9			 
10c9			; TODO return if any special keys are given 
10c9			;		ld l, a 
10c9			;		ld a, 28 ; KEY_F12   ; 27 
10c9			;		sub l 
10c9			;		ret m 
10c9			;		ld a, l 
10c9					; if no special key then insert as a char 
10c9			 
10c9 c3 92 11				jp input_inschr 
10cc			 
10cc				 
10cc			input_nxtword: 
10cc				; jump to start next word after the cursor 
10cc			 
10cc			.insknwn:	 
10cc cd 88 11				call input_curptr	 
10cf 7e					ld a,(hl)	 
10d0 fe 00				cp 0 
10d2 ca 31 10				jp z, .inmain    ; end of string 
10d5			 
10d5			; if we are on a word, then move off of it 
10d5			 
10d5 fe 20				cp ' ' 
10d7 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
10d9 21 8a fd				ld hl, input_cursor 
10dc 34					inc (hl) 
10dd 18 ed				jr .insknwn 
10df			 
10df			.inspace: 
10df			 
10df cd 88 11				call input_curptr	 
10e2 7e					ld a,(hl)	 
10e3 fe 00				cp 0 
10e5 ca 31 10				jp z, .inmain    ; end of string 
10e8			 
10e8			; if we are on a word, then move off of it 
10e8			 
10e8 fe 20				cp ' ' 
10ea c2 31 10				jp nz, .inmain     ; we are on non space so at next word 
10ed 21 8a fd				ld hl, input_cursor 
10f0 34					inc (hl) 
10f1 18 ec				jr .inspace 
10f3			 
10f3			 
10f3			 
10f3			 
10f3			input_prvword: 
10f3				; jump to the start of previous word before the cursor 
10f3			 
10f3			; where are we to start with currently? 
10f3			 
10f3 cd 88 11				call input_curptr	 
10f6 7e					ld a, (hl) 
10f7 fe 20				cp ' ' 
10f9 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
10fb			 
10fb			 
10fb			 
10fb			.inskpwn:	 
10fb 3a 8a fd				ld a,(input_cursor) 
10fe fe 00				cp 0 
1100 ca 31 10				jp z, .inmain    ; start of string 
1103			 
1103			;if we are on a word, then move off of it 
1103			 
1103 cd 88 11				call input_curptr	 
1106 7e					ld a, (hl) 
1107 fe 20				cp ' ' 
1109 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
110b					;jp z, .inmain    ; start of string 
110b 21 8a fd				ld hl, input_cursor 
110e 35					dec (hl) 
110f 18 ea				jr .inskpwn 
1111			.iwstart: 
1111 21 8a fd				ld hl, input_cursor 
1114 34					inc (hl) 
1115 c3 31 10				jp .inmain 
1118					 
1118			 
1118			.inspacep: 
1118			 
1118					;jp .inmain    ; start of string 
1118			 
1118			 
1118			 
1118 3a 8a fd				ld a,(input_cursor) 
111b fe 00				cp 0 
111d ca 31 10				jp z, .inmain    ; start of string 
1120			 
1120			; if we are on a word, then move off of it 
1120			 
1120 cd 88 11				call input_curptr	 
1123 7e					ld a, (hl) 
1124 fe 20				cp ' ' 
1126 c2 2f 11				jp nz, .incharp     ; we are on non space so at end of prev word 
1129 21 8a fd				ld hl, input_cursor 
112c 35					dec (hl) 
112d 18 e9				jr .inspacep 
112f			 
112f			 
112f			.incharp:	 
112f					; eat the word to get to the start 
112f 3a 8a fd				ld a,(input_cursor) 
1132 fe 00				cp 0 
1134 ca 31 10				jp z, .inmain    ; start of string 
1137			 
1137			; if we are on a word, then move off of it 
1137			 
1137 cd 88 11				call input_curptr	 
113a 7e					ld a, (hl) 
113b fe 20				cp ' ' 
113d 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
113f 21 8a fd				ld hl, input_cursor 
1142 35					dec (hl) 
1143 18 ea				jr .incharp 
1145			.ipwordst: 
1145					; at space before the prev word so reposition over it 
1145 21 8a fd				ld hl, input_cursor 
1148 34					inc (hl) 
1149 18 b0				jr .inskpwn 
114b					 
114b			 
114b			 
114b			input_left: 
114b				; move cursor left 
114b 21 8a fd			ld hl, input_cursor 
114e 35				dec (hl) 
114f			;	cp 0 
114f			;	jp z, .inmain    ; ignore left as at the start of the string 
114f c3 31 10			jp .inmain 
1152			 
1152			input_right: 
1152				; move cursor right 
1152				 
1152				;ld a, (input_size) 
1152				;ld b, a 
1152 21 8a fd			ld hl, input_cursor 
1155 34				inc (hl) 
1156				;dec b 
1156				;cp 0 
1156				;jp z, .inmain   ; ignore as at end of the string buffer 
1156				;ld a, b 
1156				;inc a 
1156				;ld (input_cursor), a 
1156 c3 31 10			jp .inmain 
1159			 
1159			 
1159			 
1159			input_disp_ref: 
1159				; display the text from start of buffer (ie full refresh) 
1159 3a 99 fd			ld a, (input_at_pos) 
115c 2a 9c fd			ld hl,(input_start) 
115f eb				ex de, hl 
1160 cd bd 0d			call str_at_display  
1163 c9				ret 
1164			input_disp_oncur: 
1164				; display the text from cursor position to end of buffer 
1164				; TODO position start of string at cursor position on screen 
1164				; TODO draw from that point on 
1164 3a 8a fd			ld a, (input_cursor) 
1167 47				ld b, a 
1168 3a 99 fd			ld a, (input_at_pos) 
116b 80				add b 
116c 48				ld c, b     ; save a 
116d 78				ld a, b     ; inc string start for cursor 
116e 2a 9c fd			ld hl,(input_start) 
1171 cd de 0f			call addatohl 
1174 eb				ex de, hl 
1175 79				ld a, c 
1176 cd bd 0d			call str_at_display  
1179 c9				ret 
117a			 
117a			input_nxtw: 
117a				; Find next word 
117a c9				ret 
117b			 
117b			input_prvw: 
117b				; Find previous word 
117b c9				ret 
117c			 
117c			input_lenrem:   
117c				; Calculate the length of string remaining from current cursor 
117c				; position to end of buffer (exc null term) 
117c				 
117c 3a 8a fd			ld a, (input_cursor) 
117f 4f				ld c, a 
1180 3a 9b fd			ld a, (input_size) 
1183 91				sub c 
1184 06 00			ld b, 0 
1186 0d				dec c 
1187 c9				ret	 
1188			 
1188			input_curptr: 
1188				; calc address of the character under the cursor 
1188				 
1188 2a 9c fd			ld hl, (input_start) 
118b 3a 8a fd			ld a, (input_cursor) 
118e cd de 0f			call addatohl 
1191 c9				ret 
1192			 
1192			input_inschr: 
1192				; Insert char at cursor position 
1192 f5				push af   ; save char 
1193				;call input_lenrem    ; get bc length of remaining string 
1193			 
1193				 
1193 cd 88 11			call input_curptr 
1196			;	ld hl, (input_start) 
1196			;	ld a, (input_cursor) 
1196			;	call addatohl 
1196				;push hl   ; save to come back to 
1196			 
1196				; shift everything up one to end of buffer 
1196			 
1196				;push hl 
1196				;dec de 
1196				;inc de 
1196			;	ldir 
1196				 
1196				;pop hl 
1196			 
1196				; are we adding to the end of line? 
1196			 
1196 3a 8a fd			ld a, (input_cursor) 
1199 47				ld b, a 
119a 3a 8f fd			ld a, (input_len) 
119d b8				cp b 
119e 20 09			jr nz, .insmid   ; no, insert in middle of text 
11a0			 
11a0				; tack on the end of the line 
11a0 f1				pop af 
11a1 77				ld (hl), a   ; save new char 
11a2 23				inc hl 
11a3 3e 00			ld a, 0 
11a5 77				ld (hl), a 
11a6 c3 52 11			jp input_right 
11a9				 
11a9			.insmid: 
11a9				; hl has insertion point so move everything up one to allow for insertion 
11a9				;call input_shiftright 
11a9 f1				pop af 
11aa			 
11aa			.shufinsmid: 
11aa 47				ld b, a     ; b contains new char, c prev char at this position  
11ab 7e				ld a, (hl) 
11ac			 
11ac fe 00			cp 0    ; at end of string need to then dump new char and add term 
11ae 28 07			jr z, .endinsmid 
11b0 4f				ld c, a 
11b1 78				ld a, b 
11b2 77				ld (hl), a 
11b3 23				inc hl 
11b4 79				ld a, c 
11b5 18 f3			jr .shufinsmid 
11b7				 
11b7			 
11b7			 
11b7			 
11b7			.endinsmid: 
11b7 78				ld a, b 
11b8 77				ld (hl), a 
11b9 23				inc hl 
11ba 3e 00			ld a, 0 
11bc 77				ld (hl), a 
11bd			 
11bd			 
11bd			;	ld (hl), a   ; save new char 
11bd			 
11bd c3 52 11			jp input_right 
11c0			 
11c0			;input_shiftright: 
11c0			;	; shift text right at cursor, hl has shift start 
11c0			;	push hl 
11c0			;	push de 
11c0			;	push bc 
11c0			; 
11c0			; 
11c0			;	; move to end of string past zero term 
11c0			;	ld hl,(input_start) 
11c0			;	ld a, (input_len) 
11c0			;	call addatohl 
11c0			;	inc hl 
11c0			;;	inc hl 
11c0			;;	inc hl 
11c0			;	ld a, 0 
11c0			;	ld (hl), a 
11c0			;;	dec hl 
11c0			;	 
11c0			;;	ld (hl), a 
11c0			;;	dec hl 
11c0			; 
11c0			;	push hl 
11c0			;	pop de 
11c0			;	inc de 
11c0			;	 
11c0			; 
11c0			;;	ld hl,(input_start) 
11c0			;;	ld a, (input_cursor) 
11c0			;;	call addatohl 
11c0			; 
11c0			; 
11c0			;	; calc how many bytes from cursor pos to end of string we need to shift 
11c0			;	call input_lenrem    ; get bc length of remaining string 
11c0			;	;ld a, (input_cursor) 
11c0			;	;ld c, a 
11c0			;	ld a, (input_len) 
11c0			;	cp 2 
11c0			;	jr z, .iskipzero	 
11c0			;	;sub c 
11c0			;	;inc a 
11c0			;	;ld c, a 
11c0			;	;ld b, 0 
11c0			;	inc c 
11c0			;	inc c 
11c0			;	; move data 
11c0			;	lddr 
11c0			;.iskipzero: 
11c0			; 
11c0			;	pop bc 
11c0			;	pop de 
11c0			;	pop hl 
11c0			;	ret	 
11c0			 
11c0			input_delchar: 
11c0				; Delete char at cursor position 
11c0 cd 7c 11			call input_lenrem    ; get bc length of remaining string 
11c3 2a 9c fd			ld hl, (input_start) 
11c6 3a 8a fd			ld a, (input_cursor) 
11c9 cd de 0f			call addatohl 
11cc			 
11cc e5				push hl 
11cd d1				pop de 
11ce 1b				dec de 
11cf			 
11cf			.dl:	 
11cf ed a0			ldi  
11d1 7e				ld a, (hl) 
11d2 fe 00			cp 0 
11d4 28 02			jr z, .dldone 
11d6 18 f7			jr .dl 
11d8			.dldone: 
11d8 ed a0			ldi 
11da			 
11da c3 4b 11			jp input_left 
11dd			 
11dd			 
11dd			endif 
11dd			 
11dd			 
11dd			 
11dd			if EDIT_V1 
11dd			input_str: 
11dd			 
11dd				    	ld (input_at_pos),a      ; save display position to start 
11dd					add c 
11dd					ld (input_at_cursor),a	; save draw pos of cursor 
11dd					ld (input_start), hl     ; save ptr to buffer 
11dd					ld a, c 
11dd					call addatohl 
11dd					ld (input_ptr), hl     ; save ptr to point under the cursor 
11dd					ld a,d 
11dd				        ld (input_size), a       ; save length of input area 
11dd					ld a, c 
11dd					ld (input_cursor),a      ; init cursor start position  
11dd					ld a,e 
11dd				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
11dd					 
11dd					 
11dd			 
11dd			;		ld a,(input_ptr) 
11dd			;		ld (input_under_cursor),a 	; save what is under the cursor 
11dd			 
11dd			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
11dd					; init cursor shape if not set by the cin routines 
11dd					ld hl, cursor_shape 
11dd			if BASE_KEV 
11dd					ld a, 255 
11dd			else 
11dd					ld a, '#' 
11dd			endif 
11dd					ld (hl), a 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl), a 
11dd			 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					ld a, 1 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'I' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd			.is1:		; main entry loop 
11dd			 
11dd			 
11dd			 
11dd					; pause 1ms 
11dd			 
11dd					ld a, 1 
11dd					call aDelayInMS 
11dd			 
11dd					; dec flash counter 
11dd					ld a, (input_cur_flash) 
11dd					dec a 
11dd					ld (input_cur_flash), a 
11dd					cp 0 
11dd					jr nz, .nochgstate 
11dd			 
11dd			 
11dd					; change state 
11dd					ld a,(input_cur_onoff) 
11dd					neg 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			 
11dd					; reset on change of state 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd			.nochgstate: 
11dd					 
11dd					 
11dd			 
11dd					; display cursor  
11dd			 
11dd			;		ld hl, (input_start) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			 
11dd					; get char under cursor and replace with cursor 
11dd			ld hl, (input_ptr) 
11dd			;		ld a, (hl) 
11dd			;		ld (input_under_cursor),a 
11dd			;		ld a, '_' 
11dd			;		ld (hl), a 
11dd			 
11dd					; display string 
11dd			 
11dd					ld de, (input_start) 
11dd					ld a, (input_at_pos) 
11dd					call str_at_display 
11dd			;	        call update_display 
11dd			 
11dd					; find place to put the cursor 
11dd			;		add h 
11dd			;		ld l, display_row_1 
11dd			;		sub l 
11dd			; (input_at_pos) 
11dd					;ld c, a 
11dd			;		ld a, (input_cursor) 
11dd			;		ld l, (input_at_pos) 
11dd			;		;ld b, h 
11dd			;		add l 
11dd			;		ld (input_at_cursor),a 
11dd					;ld l,h 
11dd			 
11dd			;		ld h, 0 
11dd			;		ld l,(input_at_pos) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
11dd			;		call subafromhl 
11dd			;		ld a,l 
11dd			;		ld (input_at_cursor), a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					ld a, (hardware_diag) 
11dd					cp 0 
11dd					jr z, .skip_input_diag 
11dd			 
11dd					ld a,(input_at_pos) 
11dd					ld hl, LFSRSeed 
11dd					call hexout 
11dd					ld a, (input_cursor) 
11dd					ld hl, LFSRSeed+2 
11dd					call hexout 
11dd					ld a,(input_at_cursor) 
11dd					ld hl, LFSRSeed+4 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_onoff) 
11dd					ld hl, LFSRSeed+6 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_flash) 
11dd					ld hl, LFSRSeed+8 
11dd					call hexout 
11dd			 
11dd					ld a,(input_len) 
11dd					ld hl, LFSRSeed+10 
11dd					call hexout 
11dd					ld hl, LFSRSeed+12 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd					ld a, display_row_4 
11dd					ld de, LFSRSeed 
11dd					call str_at_display 
11dd					.skip_input_diag: 
11dd				endif 
11dd			 
11dd					; decide on if we are showing the cursor this time round 
11dd			 
11dd					ld a, (input_cur_onoff) 
11dd					cp 255 
11dd					jr z, .skipcur 
11dd			 
11dd			 
11dd					ld a,(input_at_cursor) 
11dd					ld de, cursor_shape 
11dd					call str_at_display 
11dd			 
11dd					; save length of current input string 
11dd					ld hl, (input_start) 
11dd					ld a, 0 
11dd					call strlent 
11dd					ld a,l 
11dd					ld (input_len),a 
11dd			 
11dd			.skipcur: 
11dd			 
11dd				        call update_display 
11dd					 
11dd			 
11dd			 
11dd					; wait 
11dd				 
11dd					; TODO loop without wait to flash the cursor and char under cursor	 
11dd					call cin    ; _wait 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 
11dd			 
11dd					; get ptr to char to input into 
11dd			 
11dd					ld c,a 
11dd					ld hl, (input_start) 
11dd					ld a, (input_cursor) 
11dd					call addatohl 
11dd					ld (input_ptr), hl 
11dd					ld a,c 
11dd			 
11dd					; replace char under cursor 
11dd			 
11dd			;		ld hl, (input_ptr) 
11dd			;		ld a, (input_under_cursor) 	; get what is under the cursor 
11dd			;		ld (hl), a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'i' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					cp KEY_HOME 
11dd					jr nz, .iske 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor),a 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					jp .is1 
11dd					 
11dd			.iske:		cp KEY_END 
11dd					jr nz, .isknw 
11dd					jp .is1 
11dd			 
11dd			.isknw:		cp KEY_NEXTWORD 
11dd					jr nz, .iskpw 
11dd			 
11dd			.isknwm:	ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0 
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd					jr .isknwm 
11dd			 
11dd			.iskpw:		cp KEY_PREVWORD 
11dd					jr nz, .iskl 
11dd			.iskpwm:	 
11dd					ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0  
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd					jr .iskpwm 
11dd			 
11dd			 
11dd			.iskl:		cp KEY_LEFT 
11dd					jr nz, .isk1 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk1:		cp KEY_RIGHT 
11dd					jr nz, .isk2 
11dd			 
11dd					ld a,(input_len)		; TODO BUG why cant i load e direct? 
11dd					ld e,a 
11dd					ld a, (input_cursor) 
11dd					cp e 
11dd					jp z, .is1		; at the end of string so dont go right 
11dd			 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk2:		cp KEY_UP 
11dd			 
11dd					jr nz, .isk3 
11dd			 
11dd					; swap last command with the current on 
11dd			 
11dd					; move cursor to start of string 
11dd					ld hl, (input_start) 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					 
11dd					; swap input and last command buffers 
11dd			 
11dd					ld hl, os_cli_cmd 
11dd					ld de, os_last_cmd 
11dd					ld b, 255 
11dd			.swap1:		ld a, (hl) 
11dd					ld c,a 
11dd					ld a, (de) 
11dd					ld (hl), a 
11dd					ld a,c 
11dd					ld (de),a 
11dd					inc hl 
11dd					inc de 
11dd					djnz .swap1 
11dd			 
11dd			 
11dd			 
11dd			 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk3:		cp KEY_BS 
11dd					jr nz, .isk4 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					; hl is source 
11dd					; de needs to be source - 1 
11dd			 
11dd			;		ld a, 0 
11dd			;		dec hl 
11dd			;		ld (hl), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					; shift all data 
11dd			 
11dd					push hl 
11dd					inc hl 
11dd					pop de 
11dd					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
11dd					ld c,a 
11dd					ld b,0 
11dd					ldir  
11dd			 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					; remove char 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld de,.iblank 
11dd					call str_at_display 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk4:		cp KEY_CR 
11dd					jr z, .endinput 
11dd			 
11dd					; else add the key press to the end 
11dd			 
11dd					ld c, a			; save key pressed 
11dd			 
11dd					ld a,(hl)		; get what is currently under char 
11dd			 
11dd					cp 0			; we are at the end of the string 
11dd					jr nz, .onchar 
11dd					 
11dd					; add a char to the end of the string 
11dd				 
11dd					ld (hl),c 
11dd					inc hl 
11dd			;		ld a,' ' 
11dd			;		ld (hl),a 
11dd			;		inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					dec hl 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc a				; TODO check max string length and scroll  
11dd					ld (input_cursor), a		; inc cursor pos 
11dd							 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, '+' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					jp .is1 
11dd					 
11dd			 
11dd			 
11dd					; if on a char then insert 
11dd			.onchar: 
11dd			 
11dd					; TODO over flow check: make sure insert does not blow out buffer 
11dd			 
11dd					; need to do some maths to use lddr 
11dd			 
11dd					push hl   ; save char pos 
11dd					push bc 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a, (input_len) 
11dd					call addatohl  		; end of string 
11dd					inc hl 
11dd					inc hl		; past zero term 
11dd					push hl 
11dd					inc hl 
11dd					push hl  
11dd			 
11dd								; start and end of lddr set, now how much to move? 
11dd			 
11dd							 
11dd					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
11dd					ld b,a 
11dd					ld a,(input_len) 
11dd					ld e,a 
11dd					sub b 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd			 
11dd					ld b,0 
11dd					ld c,a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'i' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					pop de 
11dd					pop hl 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'I' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					lddr 
11dd				 
11dd			 
11dd			 
11dd					; TODO have a key for insert/overwrite mode???? 
11dd					pop bc 
11dd					pop hl 
11dd					ld (hl), c		; otherwise overwrite current char 
11dd					 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.endinput:	; TODO look for end of string 
11dd			 
11dd					; add trailing space for end of token 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a,(input_len) 
11dd					call addatohl 
11dd					ld a, ' ' 
11dd					ld (hl),a 
11dd					; TODO eof of parse marker 
11dd			 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					ret 
11dd			 
11dd			.iblank: db " ",0 
11dd			 
11dd			 
11dd			input_str_prev:	ld (input_at_pos), a 
11dd					ld (input_start), hl 
11dd					ld a,1			; add cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					ld (input_ptr), hl 
11dd					ld a,d 
11dd					ld (input_size), a 
11dd					ld a,0 
11dd					ld (input_cursor),a 
11dd			.instr1:	 
11dd			 
11dd					; TODO do block cursor 
11dd					; TODO switch cursor depending on the modifer key 
11dd			 
11dd					; update cursor shape change on key hold 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl), a 
11dd			 
11dd					; display entered text 
11dd					ld a,(input_at_pos) 
11dd			            	CALL fLCD_Pos       ;Position cursor to location in A 
11dd			            	LD   de, (input_start) 
11dd			            	CALL fLCD_Str       ;Display string pointed to by DE 
11dd			 
11dd					call cin 
11dd					cp 0 
11dd					jr z, .instr1 
11dd			 
11dd					; proecess keyboard controls first 
11dd			 
11dd					ld hl,(input_ptr) 
11dd			 
11dd					cp KEY_CR	 ; pressing enter ends input 
11dd					jr z, .instrcr 
11dd			 
11dd					cp KEY_BS 	; back space 
11dd					jr nz, .instr2 
11dd					; process back space 
11dd			 
11dd					; TODO stop back space if at start of string 
11dd					dec hl 
11dd					dec hl ; to over write cursor 
11dd					ld a,(cursor_shape) 
11dd					;ld a,0 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a," " 
11dd					ld (hl),a 
11dd					ld (input_ptr),hl 
11dd					 
11dd			 
11dd					jr .instr1 
11dd			 
11dd			.instr2:	cp KEY_LEFT    ; cursor left 
11dd					jr nz, .instr3 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd				 
11dd			.instr3:	cp KEY_RIGHT      ; cursor right 
11dd					jr nz, .instr4 
11dd					inc hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr4:	cp KEY_HOME    ; jump to start of line 
11dd					jr nz, .instr5 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr5:	cp KEY_END     ; jump to end of line 
11dd					jr nz, .instr6 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			.instr6:        cp KEY_UP      ; recall last command 
11dd					jr nz, .instrnew 
11dd			 
11dd				ld hl, scratch 
11dd				ld de, os_last_cmd 
11dd				call strcpy 
11dd					jr .instr1 
11dd			 
11dd			 
11dd			.instrnew:	; no special key pressed to see if we have room to store it 
11dd			 
11dd					; TODO do string size test 
11dd			 
11dd					dec hl ; to over write cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd					ld (input_ptr),hl 
11dd					 
11dd					jr .instr1 
11dd			.instrcr:	dec hl		; remove cursor 
11dd					ld a,' '	; TODO add a trailing space for safety 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					; if at end of line scroll up    
11dd					; TODO detecting only end of line 4 for scroll up  
11dd			 
11dd					;ld   
11dd			 
11dd					ret 
11dd			 
11dd			 
11dd			endif 
11dd			; strcpy hl = dest, de source 
11dd			 
11dd 1a			strcpy:   LD   A, (DE)        ;Get character from string 
11de b7			            OR   A              ;Null terminator? 
11df c8			            RET  Z              ;Yes, so finished 
11e0 1a					ld a,(de) 
11e1 77					ld (hl),a 
11e2 13			            INC  DE             ;Point to next character 
11e3 23					inc hl 
11e4 18 f7		            JR   strcpy       ;Repeat 
11e6 c9					ret 
11e7			 
11e7			 
11e7			; TODO string_at  
11e7			; pass string which starts with lcd offset address and then null term string 
11e7			 
11e7			; TODO string to dec 
11e7			; TODO string to hex 
11e7			; TODO byte to string hex 
11e7			; TODO byte to string dec 
11e7			 
11e7			 
11e7			 
11e7			; from z80uartmonitor 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
11e7			; pass hl for where to put the text 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7 c5			hexout:	PUSH BC 
11e8 f5					PUSH AF 
11e9 47					LD B, A 
11ea					; Upper nybble 
11ea cb 3f				SRL A 
11ec cb 3f				SRL A 
11ee cb 3f				SRL A 
11f0 cb 3f				SRL A 
11f2 cd 02 12				CALL tohex 
11f5 77					ld (hl),a 
11f6 23					inc hl	 
11f7					 
11f7					; Lower nybble 
11f7 78					LD A, B 
11f8 e6 0f				AND 0FH 
11fa cd 02 12				CALL tohex 
11fd 77					ld (hl),a 
11fe 23					inc hl	 
11ff					 
11ff f1					POP AF 
1200 c1					POP BC 
1201 c9					RET 
1202					 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			tohex: 
1202 e5					PUSH HL 
1203 d5					PUSH DE 
1204 16 00				LD D, 0 
1206 5f					LD E, A 
1207 21 0f 12				LD HL, .DATA 
120a 19					ADD HL, DE 
120b 7e					LD A, (HL) 
120c d1					POP DE 
120d e1					POP HL 
120e c9					RET 
120f			 
120f			.DATA: 
120f 30					DEFB	30h	; 0 
1210 31					DEFB	31h	; 1 
1211 32					DEFB	32h	; 2 
1212 33					DEFB	33h	; 3 
1213 34					DEFB	34h	; 4 
1214 35					DEFB	35h	; 5 
1215 36					DEFB	36h	; 6 
1216 37					DEFB	37h	; 7 
1217 38					DEFB	38h	; 8 
1218 39					DEFB	39h	; 9 
1219 41					DEFB	41h	; A 
121a 42					DEFB	42h	; B 
121b 43					DEFB	43h	; C 
121c 44					DEFB	44h	; D 
121d 45					DEFB	45h	; E 
121e 46					DEFB	46h	; F 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
121f			;;    subtract $30, if result > 9 then subtract $7 more 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			atohex: 
121f d6 30				SUB $30 
1221 fe 0a				CP 10 
1223 f8					RET M		; If result negative it was 0-9 so we're done 
1224 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
1226 c9					RET		 
1227			 
1227			 
1227			 
1227			 
1227			; Get 2 ASCII characters as hex byte from pointer in hl 
1227			 
1227			BYTERD: 
1227 16 00			LD	D,00h		;Set up 
1229 cd 31 12			CALL	HEXCON		;Get byte and convert to hex 
122c 87				ADD	A,A		;First nibble so 
122d 87				ADD	A,A		;multiply by 16 
122e 87				ADD	A,A		; 
122f 87				ADD	A,A		; 
1230 57				LD	D,A		;Save hi nibble in D 
1231			HEXCON: 
1231 7e				ld a, (hl)		;Get next chr 
1232 23				inc hl 
1233 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1235 fe 0a			CP	00Ah		;Is it 0-9 ? 
1237 38 02			JR	C,NALPHA	;If so miss next bit 
1239 d6 07			SUB	007h		;Else convert alpha 
123b			NALPHA: 
123b b2				OR	D		;Add hi nibble back 
123c c9				RET			; 
123d			 
123d			 
123d			; 
123d			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
123d			; Since the routines get_byte and therefore get_nibble are called, only valid 
123d			; characters (0-9a-f) are accepted. 
123d			; 
123d			;get_word        push    af 
123d			;                call    get_byte        ; Get the upper byte 
123d			;                ld      h, a 
123d			;                call    get_byte        ; Get the lower byte 
123d			;                ld      l, a 
123d			;                pop     af 
123d			;                ret 
123d			; 
123d			; Get a byte in hexadecimal notation. The result is returned in A. Since 
123d			; the routine get_nibble is used only valid characters are accepted - the  
123d			; input routine only accepts characters 0-9a-f. 
123d			; 
123d c5			get_byte:        push    bc              ; Save contents of B (and C) 
123e 7e					ld a,(hl) 
123f 23					inc hl 
1240 cd 65 12		                call    nibble2val      ; Get upper nibble 
1243 cb 07		                rlc     a 
1245 cb 07		                rlc     a 
1247 cb 07		                rlc     a 
1249 cb 07		                rlc     a 
124b 47			                ld      b, a            ; Save upper four bits 
124c 7e					ld a,(hl) 
124d cd 65 12		                call    nibble2val      ; Get lower nibble 
1250 b0			                or      b               ; Combine both nibbles 
1251 c1			                pop     bc              ; Restore B (and C) 
1252 c9			                ret 
1253			; 
1253			; Get a hexadecimal digit from the serial line. This routine blocks until 
1253			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1253			; to the serial line interface. The lower 4 bits of A contain the value of  
1253			; that particular digit. 
1253			; 
1253			;get_nibble      ld a,(hl)           ; Read a character 
1253			;                call    to_upper        ; Convert to upper case 
1253			;                call    is_hex          ; Was it a hex digit? 
1253			;                jr      nc, get_nibble  ; No, get another character 
1253			 ;               call    nibble2val      ; Convert nibble to value 
1253			 ;               call    print_nibble 
1253			 ;               ret 
1253			; 
1253			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1253			; A valid hexadecimal digit is denoted by a set C flag. 
1253			; 
1253			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1253			;                ret     nc              ; Yes 
1253			;                cp      '0'             ; Less than '0'? 
1253			;                jr      nc, is_hex_1    ; No, continue 
1253			;                ccf                     ; Complement carry (i.e. clear it) 
1253			;                ret 
1253			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1253			;                ret     c               ; Yes 
1253			;                cp      'A'             ; Less than 'A'? 
1253			;                jr      nc, is_hex_2    ; No, continue 
1253			;                ccf                     ; Yes - clear carry and return 
1253			;                ret 
1253			;is_hex_2        scf                     ; Set carry 
1253			;                ret 
1253			; 
1253			; Convert a single character contained in A to upper case: 
1253			; 
1253 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1255 d8			                ret     c 
1256 fe 7b		                cp      'z' + 1         ; > 'z'? 
1258 d0			                ret     nc              ; Nothing to do, either 
1259 e6 5f		                and     $5f             ; Convert to upper case 
125b c9			                ret 
125c			 
125c			 
125c			to_lower: 
125c			 
125c			   ; if char is in [A-Z] make it lower case 
125c			 
125c			   ; enter : a = char 
125c			   ; exit  : a = lower case char 
125c			   ; uses  : af 
125c			 
125c fe 41		   cp 'A' 
125e d8			   ret c 
125f			    
125f fe 5b		   cp 'Z'+1 
1261 d0			   ret nc 
1262			    
1262 f6 20		   or $20 
1264 c9			   ret 
1265			 
1265			; 
1265			; Expects a hexadecimal digit (upper case!) in A and returns the 
1265			; corresponding value in A. 
1265			; 
1265 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1267 38 02		                jr      c, nibble2val_1 ; Yes 
1269 d6 07		                sub     7               ; Adjust for A-F 
126b d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
126d e6 0f		                and     $f              ; Only return lower 4 bits 
126f c9			                ret 
1270			; 
1270			; Print_nibble prints a single hex nibble which is contained in the lower  
1270			; four bits of A: 
1270			; 
1270			;print_nibble    push    af              ; We won't destroy the contents of A 
1270			;                and     $f              ; Just in case... 
1270			;                add     a, '0'             ; If we have a digit we are done here. 
1270			;                cp      '9' + 1         ; Is the result > 9? 
1270			;                jr      c, print_nibble_1 
1270			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1270			;print_nibble_1  call    putc            ; Print the nibble and 
1270			;                pop     af              ; restore the original value of A 
1270			;                ret 
1270			;; 
1270			;; Send a CR/LF pair: 
1270			; 
1270			;crlf            push    af 
1270			;                ld      a, cr 
1270			;                call    putc 
1270			;                ld      a, lf 
1270			;                call    putc 
1270			;                pop     af 
1270			;                ret 
1270			; 
1270			; Print_word prints the four hex digits of a word to the serial line. The  
1270			; word is expected to be in HL. 
1270			; 
1270			;print_word      push    hl 
1270			;                push    af 
1270			;                ld      a, h 
1270			;                call    print_byte 
1270			;                ld      a, l 
1270			;                call    print_byte 
1270			;                pop     af 
1270			;                pop     hl 
1270			;                ret 
1270			; 
1270			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1270			; The byte to be printed is expected to be in A. 
1270			; 
1270			;print_byte      push    af              ; Save the contents of the registers 
1270			;                push    bc 
1270			;                ld      b, a 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                call    print_nibble    ; Print high nibble 
1270			;                ld      a, b 
1270			;                call    print_nibble    ; Print low nibble 
1270			;                pop     bc              ; Restore original register contents 
1270			;                pop     af 
1270			;                ret 
1270			 
1270			 
1270			 
1270			 
1270			 
1270			fourehexhl:  
1270 7e				ld a,(hl) 
1271 cd 1f 12			call atohex 
1274 cb 3f				SRL A 
1276 cb 3f				SRL A 
1278 cb 3f				SRL A 
127a cb 3f				SRL A 
127c 47				ld b, a 
127d 23				inc hl 
127e 7e				ld a,(hl) 
127f 23				inc hl 
1280 cd 1f 12			call atohex 
1283 80				add b 
1284 57				ld d,a 
1285 7e				ld a,(hl) 
1286 cd 1f 12			call atohex 
1289 cb 3f				SRL A 
128b cb 3f				SRL A 
128d cb 3f				SRL A 
128f cb 3f				SRL A 
1291 47				ld b, a 
1292 23				inc hl 
1293 7e				ld a,(hl) 
1294 23				inc hl 
1295 cd 1f 12			call atohex 
1298 80				add b 
1299 5f				ld e, a 
129a d5				push de 
129b e1				pop hl 
129c c9				ret 
129d			 
129d			; pass hl. returns z set if the byte at hl is a digit 
129d			;isdigithl:  
129d			;	push bc 
129d			;	ld a,(hl) 
129d			;	cp ':' 
129d			;	jr nc, .isdf 		; > 
129d			;	cp '0' 
129d			;	jr c, .isdf		; < 
129d			; 
129d			;	; TODO find a better way to set z 
129d			; 
129d			;	ld b,a 
129d			;	cp b 
129d			;	pop bc 
129d			;	ret 
129d			; 
129d			;.isdf:	; not digit so clear z 
129d			; 
129d			;	; TODO find a better way to unset z 
129d			; 
129d			;	ld b,a 
129d			;	inc b 
129d			;	cp b 
129d			; 
129d			;	pop bc 
129d			;	ret 
129d				 
129d				 
129d			 
129d			 
129d			; pass hl as the four byte address to load 
129d			 
129d			get_word_hl:  
129d e5				push hl 
129e cd 3d 12			call get_byte 
12a1				 
12a1 47				ld b, a 
12a2			 
12a2 e1				pop hl 
12a3 23				inc hl 
12a4 23				inc hl 
12a5			 
12a5			; TODO not able to handle a-f  
12a5 7e				ld a,(hl) 
12a6			;	;cp ':' 
12a6			;	cp 'g' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp 'G' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp '0' 
12a6			;	jr c, .single_byte_hl		; < 
12a6			 
12a6				;call isdigithl 
12a6 fe 00			cp 0 
12a8 28 06			jr z, .single_byte_hl 
12aa			 
12aa			.getwhln:   ; hex word so get next byte 
12aa			 
12aa cd 3d 12			call get_byte 
12ad 6f				ld l, a 
12ae 60				ld h,b 
12af c9				ret 
12b0 68			.single_byte_hl:   ld l,b 
12b1 26 00				ld h,0 
12b3 c9					ret 
12b4			 
12b4			 
12b4			 
12b4			 
12b4 21 23 1d			ld hl,asc+1 
12b7			;	ld a, (hl) 
12b7			;	call nibble2val 
12b7 cd 3d 12			call get_byte 
12ba			 
12ba			;	call fourehexhl 
12ba 32 2a f1			ld (scratch+52),a 
12bd				 
12bd 21 28 f1			ld hl,scratch+50 
12c0 22 19 f4			ld (os_cur_ptr),hl 
12c3			 
12c3 c9				ret 
12c4			 
12c4			 
12c4			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
12c4			 
12c4			; Decimal Unsigned Version 
12c4			 
12c4			;Number in a to decimal ASCII 
12c4			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
12c4			;Example: display a=56 as "056" 
12c4			;input: a = number 
12c4			;Output: a=0,value of a in the screen 
12c4			;destroys af,bc (don't know about hl and de) 
12c4			DispAToASCII: 
12c4 0e 9c			ld	c,-100 
12c6 cd d0 12			call	.Na1 
12c9 0e f6			ld	c,-10 
12cb cd d0 12			call	.Na1 
12ce 0e ff			ld	c,-1 
12d0 06 2f		.Na1:	ld	b,'0'-1 
12d2 04			.Na2:	inc	b 
12d3 81				add	a,c 
12d4 38 fc			jr	c,.Na2 
12d6 91				sub	c		;works as add 100/10/1 
12d7 f5				push af		;safer than ld c,a 
12d8 78				ld	a,b		;char is in b 
12d9			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
12d9 f1				pop af		;safer than ld a,c 
12da c9				ret 
12db			 
12db			; Decimal Signed Version 
12db			 
12db			; DispA 
12db			; -------------------------------------------------------------- 
12db			; Converts a signed integer value to a zero-terminated ASCII 
12db			; string representative of that value (using radix 10). 
12db			; -------------------------------------------------------------- 
12db			; INPUTS: 
12db			;     HL     Value to convert (two's complement integer). 
12db			;     DE     Base address of string destination. (pointer). 
12db			; -------------------------------------------------------------- 
12db			; OUTPUTS: 
12db			;     None 
12db			; -------------------------------------------------------------- 
12db			; REGISTERS/MEMORY DESTROYED 
12db			; AF HL 
12db			; -------------------------------------------------------------- 
12db			 
12db			;DispHLToASCII: 
12db			;   push    de 
12db			;   push    bc 
12db			; 
12db			;; Detect sign of HL. 
12db			;    bit    7, h 
12db			;    jr     z, ._DoConvert 
12db			; 
12db			;; HL is negative. Output '-' to string and negate HL. 
12db			;    ld     a, '-' 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			; 
12db			;; Negate HL (using two's complement) 
12db			;    xor    a 
12db			;    sub    l 
12db			;    ld     l, a 
12db			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
12db			;    sbc    a, h 
12db			;    ld     h, a 
12db			; 
12db			;; Convert HL to digit characters 
12db			;._DoConvert: 
12db			;    ld     b, 0     ; B will count character length of number 
12db			;-   ld     a, 10 
12db			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
12db			;    push   af 
12db			;    inc    b 
12db			;    ld     a, h 
12db			;    or     l 
12db			;    jr     nz, - 
12db			; 
12db			;; Retrieve digits from stack 
12db			;-   pop    af 
12db			;    or     $30 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			;    djnz   - 
12db			; 
12db			;; Terminate string with NULL 
12db			;    xor    a 
12db			;    ld     (de), a 
12db			; 
12db			;    pop    bc 
12db			;    pop    de 
12db			;    ret 
12db			 
12db			;Comments 
12db			; 
12db			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
12db			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
12db			;    Note that the output string will not be fixed-width. 
12db			; 
12db			;Example Usage 
12db			; 
12db			;    ld    hl, -1004 
12db			;    ld    de, OP1 
12db			;    call  DispA 
12db			;    ld    hl, OP1 
12db			;    syscall  PutS 
12db			 
12db			 
12db			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12db			 
12db			 
12db			;Converts an ASCII string to an unsigned 16-bit integer 
12db			;Quits when it reaches a non-decimal digit 
12db			 
12db			string_to_uint16: 
12db			atoui_16: 
12db			;Input: 
12db			;     DE points to the string 
12db			;Outputs: 
12db			;     HL is the result 
12db			;     A is the 8-bit value of the number 
12db			;     DE points to the byte after the number 
12db			;Destroys: 
12db			;     BC 
12db			;       if the string is non-empty, BC is HL/10 
12db			;Size:  24 bytes 
12db			;Speed: 42+d(104+{0,9}) 
12db			;       d is the number of digits in the number 
12db			;       max is 640 cycles for a 5 digit number 
12db			;Assuming no leading zeros: 
12db			;1 digit:  146cc 
12db			;2 digit:  250cc 
12db			;3 digit:  354cc or 363cc (avg: 354.126cc) 
12db			;4 digit:  458cc or 467cc (avg: 458.27cc) 
12db			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
12db			;avg: 544.81158447265625cc (544+13297/16384) 
12db			;=============================================================== 
12db 21 00 00		  ld hl,0 
12de			.u16a: 
12de 1a			  ld a,(de) 
12df d6 30		  sub 30h 
12e1 fe 0a		  cp 10 
12e3 d0			  ret nc 
12e4 13			  inc de 
12e5 44			  ld b,h 
12e6 4d			  ld c,l 
12e7 29			  add hl,hl 
12e8 29			  add hl,hl 
12e9 09			  add hl,bc 
12ea 29			  add hl,hl 
12eb 85			  add a,l 
12ec 6f			  ld l,a 
12ed 30 ef		  jr nc,.u16a 
12ef 24			  inc h 
12f0 c3 de 12		  jp .u16a 
12f3			 
12f3			 
12f3			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12f3			 
12f3			;written by Zeda 
12f3			;Converts a 16-bit unsigned integer to an ASCII string. 
12f3			 
12f3			uitoa_16: 
12f3			;Input: 
12f3			;   DE is the number to convert 
12f3			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
12f3			;Output: 
12f3			;   HL points to the null-terminated ASCII string 
12f3			;      NOTE: This isn't necessarily the same as the input HL. 
12f3 d5			  push de 
12f4 c5			  push bc 
12f5 f5			  push af 
12f6 eb			  ex de,hl 
12f7			 
12f7 01 f0 d8		  ld bc,-10000 
12fa 3e 2f		  ld a,'0'-1 
12fc 3c			  inc a 
12fd 09			  add hl,bc  
12fe 38 fc		   jr c,$-2 
1300 12			  ld (de),a 
1301 13			  inc de 
1302			 
1302 01 e8 03		  ld bc,1000 
1305 3e 3a		  ld a,'9'+1 
1307 3d			  dec a  
1308 09			  add hl,bc  
1309 30 fc		   jr nc,$-2 
130b 12			  ld (de),a 
130c 13			  inc de 
130d			 
130d 01 9c ff		  ld bc,-100 
1310 3e 2f		  ld a,'0'-1 
1312 3c			  inc a  
1313 09			  add hl,bc  
1314 38 fc		   jr c,$-2 
1316 12			  ld (de),a 
1317 13			  inc de 
1318			 
1318 7d			  ld a,l 
1319 26 3a		  ld h,'9'+1 
131b 25			  dec h  
131c c6 0a		  add a,10  
131e 30 fb		   jr nc,$-3 
1320 c6 30		  add a,'0' 
1322 eb			  ex de,hl 
1323 72			  ld (hl),d 
1324 23			  inc hl 
1325 77			  ld (hl),a 
1326 23			  inc hl 
1327 36 00		  ld (hl),0 
1329			 
1329			;Now strip the leading zeros 
1329 0e fa		  ld c,-6 
132b 09			  add hl,bc 
132c 3e 30		  ld a,'0' 
132e 23			  inc hl  
132f be			  cp (hl)  
1330 28 fc		  jr z,$-2 
1332			 
1332			;Make sure that the string is non-empty! 
1332 7e			  ld a,(hl) 
1333 b7			  or a 
1334 20 01		  jr nz,.atoub 
1336 2b			  dec hl 
1337			.atoub: 
1337			 
1337 f1			  pop af 
1338 c1			  pop bc 
1339 d1			  pop de 
133a c9			  ret 
133b			 
133b			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
133b			 
133b			toUpper: 
133b			;A is the char. 
133b			;If A is a lowercase letter, this sets it to the matching uppercase 
133b			;18cc or 30cc or 41cc 
133b			;avg: 26.75cc 
133b fe 61		  cp 'a' 
133d d8			  ret c 
133e fe 7b		  cp 'z'+1 
1340 d0			  ret nc 
1341 d6 20		  sub 'a'-'A' 
1343 c9			  ret 
1344			 
1344			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1344			 
1344			; String Length 
1344			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1344			 
1344			; Get the length of the null-terminated string starting at $8000 hl 
1344			;    LD     HL, $8000 
1344			 
1344			strlenz: 
1344			 
1344 af			    XOR    A               ; Zero is the value we are looking for. 
1345 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1346 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1347			                           ; 65, 536 bytes (the entire addressable memory space). 
1347 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1349			 
1349			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1349 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
134a 6f			    LD     L, A             ; number of bytes 
134b ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
134d 2b			    DEC    HL              ; Compensate for null. 
134e c9				ret 
134f			 
134f			; Get the length of the A terminated string starting at $8000 hl 
134f			;    LD     HL, $8000 
134f			 
134f			strlent: 
134f			 
134f			                  ; A is the value we are looking for. 
134f 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1351 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1353			                           ; 65, 536 bytes (the entire addressable memory space). 
1353 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1355			 
1355			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1355 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1357 2e 00		    LD     L, 0             ; number of bytes 
1359 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
135b 2b			    DEC    HL              ; Compensate for null. 
135c c9				ret 
135d			 
135d			 
135d			;Comparing Strings 
135d			 
135d			;IN    HL     Address of string1. 
135d			;      DE     Address of string2. 
135d			 
135d			; doc given but wrong??? 
135d			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
135d			;      carry  Set if string1 > string2, reset if string1 <= string2. 
135d			; tested 
135d			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
135d			 
135d			strcmp_old: 
135d e5			    PUSH   HL 
135e d5			    PUSH   DE 
135f			 
135f 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1360 be			    CP     (HL)            ; (want to minimize work). 
1361 38 01		    JR     C, Str1IsBigger 
1363 7e			    LD     A, (HL) 
1364			 
1364			Str1IsBigger: 
1364 4f			    LD     C, A             ; Put length in BC 
1365 06 00		    LD     B, 0 
1367 13			    INC    DE              ; Increment pointers to meat of string. 
1368 23			    INC    HL 
1369			 
1369			CmpLoop: 
1369 1a			    LD     A, (DE)          ; Compare bytes. 
136a ed a1		    CPI 
136c 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
136e 13			    INC    DE              ; Update pointer. 
136f ea 69 13		    JP     PE, CmpLoop 
1372			 
1372 d1			    POP    DE 
1373 e1			    POP    HL 
1374 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1375 be			    CP     (HL) 
1376 c9			    RET 
1377			 
1377			NoMatch: 
1377 2b			    DEC    HL 
1378 be			    CP     (HL)            ; Compare again to affect carry. 
1379 d1			    POP    DE 
137a e1			    POP    HL 
137b c9			    RET 
137c			 
137c			;; test strmp 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr z, .z1 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z1: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr z, .z2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr c, .c1 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c1: 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr c, .c2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;	NEXTW 
137c			;.str1:   db "string1",0 
137c			;.str2:   db "string2",0 
137c			 
137c			; only care about direct match or not 
137c			; hl and de strings 
137c			; zero set if the same 
137c			 
137c			strcmp: 
137c 1a				ld a, (de) 
137d be				cp (hl) 
137e 28 02			jr z, .ssame 
1380 b7				or a 
1381 c9				ret 
1382			 
1382			.ssame:  
1382 fe 00			cp 0 
1384 c8				ret z 
1385			 
1385 23				inc hl 
1386 13				inc de 
1387 18 f3			jr strcmp 
1389				 
1389				 
1389			 
1389			;Copyright (c) 2014, Luke Maurits 
1389			;All rights reserved. 
1389			; 
1389			;Redistribution and use in source and binary forms, with or without 
1389			;modification, are permitted provided that the following conditions are met: 
1389			; 
1389			;* Redistributions of source code must retain the above copyright notice, this 
1389			;  list of conditions and the following disclaimer. 
1389			; 
1389			;* Redistributions in binary form must reproduce the above copyright notice, 
1389			;  this list of conditions and the following disclaimer in the documentation 
1389			;  and/or other materials provided with the distribution. 
1389			; 
1389			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
1389			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
1389			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
1389			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
1389			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
1389			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
1389			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
1389			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
1389			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
1389			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
1389			 
1389			; https://github.com/lmaurits/lm512/blob/master/string.z80 
1389			 
1389			StrictStrCmp: 
1389				; Load next chars of each string 
1389 1a				ld a, (de) 
138a 47				ld b, a 
138b 7e				ld a, (hl) 
138c				; Compare 
138c b8				cp b 
138d				; Return non-zero if chars don't match 
138d c0				ret nz 
138e				; Check for end of both strings 
138e fe 00			cp "\0" 
1390				; Return if strings have ended 
1390 c8				ret z 
1391				; Otherwise, advance to next chars 
1391 23				inc hl 
1392 13				inc de 
1393 18 f4			jr StrictStrCmp 
1395			 
1395			;end 
1395			; eof 
1395			 
1395			 
1395			 
1395			 
1395			 
1395			 
# End of file firmware_strings.asm
1395			include "firmware_memory.asm"   ; malloc and free  
1395			 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			.mallocsize: db "Wants malloc >256",0 
1395			.mallocasize: db "MALLOC gives >256",0 
1395			.malloczero: db "MALLOC gives zero",0 
1395			 
1395			malloc_guard_zerolen: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395				ld de, 0 
1395			        call cmp16 
1395				jr nz, .lowalloz 
1395			 
1395				push hl 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .malloczero 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395				call bp_on 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395			.lowalloz: 
1395			 
1395			 
1395				pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_entry: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowalloc 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocsize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395				jr .lowdone 
1395			.lowalloc: 
1395			 
1395			 
1395				pop hl 
1395			.lowdone:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_exit: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowallocx 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocasize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395				pop de 
1395				pop hl 
1395			 
1395				CALLMONITOR 
1395				jr .lowdonex 
1395			.lowallocx: 
1395			 
1395				pop hl 
1395			.lowdonex:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			endif 
1395			 
1395			if MALLOC_2 
1395			; Z80 Malloc and Free Functions 
1395			 
1395			; Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc: 
1395				 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_entry 
1395			endif 
1395			 
1395			 
1395			 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "mal" 
1395						CALLMONITOR 
1395					endif 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of size into A 
1395			    or h               ; Check if size is zero 
1395			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1395			 
1395			    ; Allocate memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma1" 
1395						CALLMONITOR 
1395					endif 
1395			    call malloc_internal ; Call internal malloc function 
1395			    pop af             ; Restore AF register 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret                ; Return 
1395			 
1395			; Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free: 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of pointer into A 
1395			    or h               ; Check if pointer is NULL 
1395			    jp z, free_exit    ; If pointer is NULL, exit 
1395			 
1395			    ; Free memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395			    call free_internal  ; Call internal free function 
1395			    pop af             ; Restore AF register 
1395			    ret                ; Return 
1395			 
1395			; Internal Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc_internal: 
1395			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to requested size 
1395			    ex de, hl          ; Save total size in DE, and keep it in HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			 
1395			    ; Search for free memory block 
1395			    ld de, (heap_end)  ; Load end of heap into DE 
1395			    ld bc, 0           ; Initialize counter 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			malloc_search_loop: 
1395			    ; Check if current block is free 
1395			    ld a, (hl)         ; Load current block's status (free or used) 
1395			    cp 0               ; Compare with zero (free) 
1395			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1395			 
1395			    ; Check if current block is large enough 
1395			    ld a, (hl+1)       ; Load high byte of block size 
1395			    cp l               ; Compare with low byte of requested size 
1395			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1395			 
1395			    ld a, (hl+2)       ; Load low byte of block size 
1395			    cp h               ; Compare with high byte of requested size 
1395			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1395			 
1395			    ; Mark block as used 
1395			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1395			 
1395			    ; Calculate remaining space in block 
1395			    ld bc, 0           ; Clear BC 
1395			    add hl, bc         ; Increment HL to point to start of data block 
1395			    add hl, de         ; HL = HL + DE (total size) 
1395			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to start of data block 
1395			 
1395			    ; Save pointer to allocated block in HL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma5" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			malloc_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3           ; Size of management overhead 
1395			    add hl, bc         ; Move to the next block 
1395			    inc de             ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e            ; Load low byte of heap end address 
1395			    cp (hl)            ; Compare with low byte of current address 
1395			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1395			    ld a, d            ; Load high byte of heap end address 
1395			    cp 0               ; Check if it's zero (end of memory) 
1395			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, allocation failed 
1395			    xor a              ; Set result to NULL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma6" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			malloc_exit: 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma7" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			; Internal Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free_internal: 
1395			    ld de, (heap_start) ; Load start of heap into DE 
1395			    ld bc, 0            ; Initialize counter 
1395			 
1395			free_search_loop: 
1395			    ; Check if current block contains the pointer 
1395			    ld a, l             ; Load low byte of pointer 
1395			    cp (hl+1)           ; Compare with high byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			    ld a, h             ; Load high byte of pointer 
1395			    cp (hl+2)           ; Compare with low byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			 
1395			    ; Mark block as free 
1395			    ld (hl), 0          ; Set status byte to indicate free block 
1395			    ret                 ; Return 
1395			 
1395			free_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3            ; Size of management overhead 
1395			    add hl, bc          ; Move to the next block 
1395			    inc de              ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e             ; Load low byte of heap end address 
1395			    cp (hl)             ; Compare with low byte of current address 
1395			    jr nz, free_search_loop  ; If not equal, continue searching 
1395			    ld a, d             ; Load high byte of heap end address 
1395			    cp 0                ; Check if it's zero (end of memory) 
1395			    jr nz, free_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, pointer is not found in heap 
1395			    ret 
1395			 
1395			free_exit: 
1395			    ret                 ; Return 
1395			 
1395			; Define heap start and end addresses 
1395			;heap_start:    .dw 0xC000   ; Start of heap 
1395			;heap_end:      .dw 0xE000   ; End of heap 
1395			 
1395			endif 
1395			 
1395			 
1395			if MALLOC_1 
1395			 
1395			 
1395			 
1395			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1395			 
1395			;moved to firmware.asm 
1395			;heap_start        .equ  0x9000      ; Starting address of heap 
1395			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1395			 
1395			;      .org 0 
1395			;      jp    main 
1395			 
1395			 
1395			;      .org  0x100 
1395			;main: 
1395			;      ld    HL, 0x8100 
1395			;      ld    SP, HL 
1395			; 
1395			;      call  heap_init 
1395			; 
1395			;      ; Make some allocations 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9004 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9014 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9024 
1395			; 
1395			;      ; Free some allocations 
1395			;      ld    HL, 0x9014 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9004 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9024 
1395			;      call  free 
1395			; 
1395			; 
1395			;      halt 
1395			 
1395			 
1395			;------------------------------------------------------------------------------ 
1395			;     heap_init                                                               : 
1395			;                                                                             : 
1395			; Description                                                                 : 
1395			;     Initialise the heap and make it ready for malloc and free operations.   : 
1395			;                                                                             : 
1395			;     The heap is maintained as a linked list, starting with an initial       : 
1395			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1395			;     the first free block in the heap. Each block then points to the next    : 
1395			;     free block within the heap, and the free list ends at the first block   : 
1395			;     with a null pointer to the next free block.                             : 
1395			;                                                                             : 
1395			; Parameters                                                                  : 
1395			;     Inputs are compile-time only. Two defines which specify the starting    : 
1395			;     address of the heap and its size are required, along with a memory      : 
1395			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1395			;     principally stores a pointer to the first free block in the heap.       : 
1395			;                                                                             : 
1395			; Returns                                                                     : 
1395			;     Nothing                                                                 : 
1395			;------------------------------------------------------------------------------ 
1395			heap_init: 
1395 e5			      push  HL 
1396			 
1396			      ; Initialise free list struct 
1396 21 0e 80		      ld    HL, heap_start 
1399 22 0a 80		      ld    (free_list), HL 
139c 21 00 00		      ld    HL, 0 
139f 22 0c 80		      ld    (free_list+2), HL 
13a2			 
13a2			      ; Insert first free block at bottom of heap, consumes entire heap 
13a2 21 cd f0		      ld    HL, heap_start+heap_size-4 
13a5 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
13a8 21 bf 70		      ld    HL, heap_size-4 
13ab 22 10 80		      ld    (heap_start+2), HL      ; Block size 
13ae			 
13ae			      ; Insert end of free list block at top of heap - two null words will 
13ae			      ; terminate the free list 
13ae 21 00 00		      ld    HL, 0 
13b1 22 cf f0		      ld    (heap_start+heap_size-2), HL 
13b4 22 cd f0		      ld    (heap_start+heap_size-4), HL 
13b7			 
13b7 e1			      pop   HL 
13b8			 
13b8 c9			      ret 
13b9			 
13b9			 
13b9			;------------------------------------------------------------------------------ 
13b9			;     malloc                                                                  : 
13b9			;                                                                             : 
13b9			; Description                                                                 : 
13b9			;     Allocates the wanted space from the heap and returns the address of the : 
13b9			;     first useable byte of the allocation.                                   : 
13b9			;                                                                             : 
13b9			;     Allocations can happen in one of two ways:                              : 
13b9			;                                                                             : 
13b9			;     1. A free block may be found which is the exact size wanted. In this    : 
13b9			;        case the block is removed from the free list and retuedn to the      : 
13b9			;        caller.                                                              : 
13b9			;     2. A free block may be found which is larger than the size wanted. In   : 
13b9			;        this case, the larger block is split into two. The first portion of  : 
13b9			;        this block will become the requested space by the malloc call and    : 
13b9			;        is returned to the caller. The second portion becomes a new free     : 
13b9			;        block, and the free list is adjusted to maintain continuity via this : 
13b9			;        newly created block.                                                 : 
13b9			;                                                                             : 
13b9			;     malloc does not set any initial value in the allocated space, the       : 
13b9			;     caller is required to do this as required.                              : 
13b9			;                                                                             : 
13b9			;     This implementation of malloc uses the stack exclusively, and is        : 
13b9			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
13b9			;     advisable to disable interrupts before calling malloc, and recommended  : 
13b9			;     to avoid the use of malloc inside ISRs in general.                      : 
13b9			;                                                                             : 
13b9			;     NOTE: heap_init must be called before malloc and free can be used.      : 
13b9			;                                                                             : 
13b9			; Parameters                                                                  : 
13b9			;     HL  Number of bytes wanted                                              : 
13b9			;                                                                             : 
13b9			; Returns                                                                     : 
13b9			;     HL  Address of the first useable byte of the allocation                 : 
13b9			;                                                                             : 
13b9			; Flags                                                                       : 
13b9			;     Z   Set if the allocation did not succeed, clear otherwise              : 
13b9			;                                                                             : 
13b9			; Stack frame                                                                 : 
13b9			;       |             |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     BC      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     DE      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     IX      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |  prev_free  |                                                       : 
13b9			;   +4  +-------------+                                                       : 
13b9			;       |  this_free  |                                                       : 
13b9			;   +2  +-------------+                                                       : 
13b9			;       |  next_free  |                                                       : 
13b9			;   +0  +-------------+                                                       : 
13b9			;       |             |                                                       : 
13b9			;                                                                             : 
13b9			;------------------------------------------------------------------------------ 
13b9			 
13b9			 
13b9			;malloc: 
13b9			; 
13b9			;	SAVESP ON 1 
13b9			; 
13b9			;	call malloc_code 
13b9			; 
13b9			;	CHECKSP ON 1 
13b9			;	ret 
13b9			 
13b9			 
13b9			malloc: 
13b9 c5			      push  BC 
13ba d5			      push  DE 
13bb dd e5		      push  IX 
13bd			if DEBUG_FORTH_MALLOC_HIGH 
13bd			call malloc_guard_entry 
13bd			endif 
13bd			 
13bd					if DEBUG_FORTH_MALLOC 
13bd						DMARK "mal" 
13bd						CALLMONITOR 
13bd					endif 
13bd 7c			      ld    A, H                    ; Exit if no space requested 
13be b5			      or    L 
13bf ca 7e 14		      jp    Z, malloc_early_exit 
13c2			 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			; 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			 
13c2			 
13c2			 
13c2			 
13c2					if DEBUG_FORTH_MALLOC 
13c2						DMARK "maA" 
13c2						CALLMONITOR 
13c2					endif 
13c2			      ; Set up stack frame 
13c2 eb			      ex    DE, HL 
13c3 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
13c6 39			      add   HL, SP 
13c7 f9			      ld    SP, HL 
13c8 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
13cc dd 39		      add   IX, SP 
13ce			 
13ce			      ; Setup initial state 
13ce 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
13d1 19			      add   HL, DE 
13d2			 
13d2 44			      ld    B, H                    ; Move want to BC 
13d3 4d			      ld    C, L 
13d4			 
13d4 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
13d7 dd 75 04		      ld    (IX+4), L 
13da dd 74 05		      ld    (IX+5), H 
13dd			 
13dd 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
13de 23			      inc   HL 
13df 56			      ld    D, (HL) 
13e0 dd 73 02		      ld    (IX+2), E 
13e3 dd 72 03		      ld    (IX+3), D 
13e6 eb			      ex    DE, HL                  ; this_free ptr into HL 
13e7			 
13e7					if DEBUG_FORTH_MALLOC 
13e7						DMARK "maB" 
13e7						CALLMONITOR 
13e7					endif 
13e7			      ; Loop through free block list to find some space 
13e7			malloc_find_space: 
13e7 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
13e8 23			      inc   HL 
13e9 56			      ld    D, (HL) 
13ea			 
13ea 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
13eb b3			      or    E 
13ec ca 78 14		      jp    Z, malloc_no_space 
13ef			 
13ef dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
13f2 dd 72 01		      ld    (IX+1), D 
13f5			 
13f5			      ; Does this block have enough space to make the allocation? 
13f5 23			      inc   HL                      ; Load free block size into DE 
13f6 5e			      ld    E, (HL) 
13f7 23			      inc   HL 
13f8 56			      ld    D, (HL) 
13f9			 
13f9 eb			      ex    DE, HL                  ; Check size of block against want 
13fa b7			      or    A                       ; Ensure carry flag clear 
13fb ed 42		      sbc   HL, BC 
13fd e5			      push  HL                      ; Store the result for later (new block size) 
13fe			 
13fe ca 4d 14		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1401 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1403			 
1403			      ; this_free block is not big enough, setup ptrs to test next free block 
1403 e1			      pop   HL                      ; Discard previous result 
1404			 
1404 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1407 dd 66 03		      ld    H, (IX+3) 
140a dd 75 04		      ld    (IX+4), L 
140d dd 74 05		      ld    (IX+5), H 
1410			 
1410 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1413 dd 66 01		      ld    H, (IX+1) 
1416 dd 75 02		      ld    (IX+2), L 
1419 dd 74 03		      ld    (IX+3), H 
141c			 
141c					if DEBUG_FORTH_MALLOC 
141c						DMARK "MA>" 
141c						CALLMONITOR 
141c					endif 
141c 18 c9		      jr    malloc_find_space 
141e			 
141e			      ; split a bigger block into two - requested size and remaining size 
141e			malloc_alloc_split: 
141e					if DEBUG_FORTH_MALLOC 
141e						DMARK "MAs" 
141e						CALLMONITOR 
141e					endif 
141e eb			      ex    DE, HL                  ; Calculate address of new free block 
141f 2b			      dec   HL 
1420 2b			      dec   HL 
1421 2b			      dec   HL 
1422 09			      add   HL, BC 
1423			 
1423			      ; Create a new block and point it at next_free 
1423 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
1426 dd 56 01		      ld    D, (IX+1) 
1429			 
1429 73			      ld    (HL), E                 ; Store next_free ptr into new block 
142a 23			      inc   HL 
142b 72			      ld    (HL), D 
142c			 
142c d1			      pop   DE                      ; Store size of new block into new block 
142d 23			      inc   HL 
142e 73			      ld    (HL), E 
142f 23			      inc   HL 
1430 72			      ld    (HL), D 
1431			 
1431			      ; Update this_free ptr to point to new block 
1431 2b			      dec   HL 
1432 2b			      dec   HL 
1433 2b			      dec   HL 
1434			 
1434 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1437 dd 56 03		      ld    D, (IX+3) 
143a			 
143a dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
143d dd 74 03		      ld    (IX+3), H 
1440			 
1440			      ; Modify this_free block to be allocation 
1440 eb			      ex    DE, HL 
1441 af			      xor   A                       ; Null the next block ptr of allocated block 
1442 77			      ld    (HL), A 
1443 23			      inc   HL 
1444 77			      ld    (HL), A 
1445			 
1445 23			      inc   HL                      ; Store want size into allocated block 
1446 71			      ld    (HL), C 
1447 23			      inc   HL 
1448 70			      ld    (HL), B 
1449 23			      inc   HL 
144a e5			      push  HL                      ; Address of allocation to return 
144b			 
144b 18 19		      jr    malloc_update_links 
144d			 
144d			malloc_alloc_fit: 
144d e1			      pop   HL                      ; Dont need new block size, want is exact fit 
144e			 
144e					if DEBUG_FORTH_MALLOC 
144e						DMARK "MAf" 
144e						CALLMONITOR 
144e					endif 
144e			      ; Modify this_free block to be allocation 
144e eb			      ex    DE, HL 
144f 2b			      dec   HL 
1450 2b			      dec   HL 
1451 2b			      dec   HL 
1452			 
1452 af			      xor   A                       ; Null the next block ptr of allocated block 
1453 77			      ld    (HL), A 
1454 23			      inc   HL 
1455 77			      ld    (HL), A 
1456			 
1456 23			      inc   HL                      ; Store address of allocation to return 
1457 23			      inc   HL 
1458 23			      inc   HL 
1459 e5			      push  HL 
145a			 
145a			      ; Copy next_free ptr to this_free, remove allocated block from free list 
145a dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
145d dd 66 01		      ld    H, (IX+1) 
1460			 
1460 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1463 dd 74 03		      ld    (IX+3), H 
1466			 
1466			 
1466			malloc_update_links: 
1466			      ; Update prev_free ptr to point to this_free 
1466 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1469 dd 66 05		      ld    H, (IX+5) 
146c			 
146c dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
146f dd 56 03		      ld    D, (IX+3) 
1472			 
1472 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1473 23			      inc   HL 
1474 72			      ld    (HL), D 
1475			 
1475					if DEBUG_FORTH_MALLOC 
1475						DMARK "Mul" 
1475						CALLMONITOR 
1475					endif 
1475			      ; Clear the Z flag to indicate successful allocation 
1475 7a			      ld    A, D 
1476 b3			      or    E 
1477			 
1477 d1			      pop   DE                      ; Address of allocation 
1478					if DEBUG_FORTH_MALLOC 
1478						DMARK "MAu" 
1478						CALLMONITOR 
1478					endif 
1478			 
1478			malloc_no_space: 
1478 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
147b 39			      add   HL, SP 
147c f9			      ld    SP, HL 
147d			 
147d eb			      ex    DE, HL                  ; Alloc addr into HL for return 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAN" 
147e						CALLMONITOR 
147e					endif 
147e			 
147e			malloc_early_exit: 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAx" 
147e						CALLMONITOR 
147e					endif 
147e dd e1		      pop   IX 
1480 d1			      pop   DE 
1481 c1			      pop   BC 
1482			 
1482			if DEBUG_FORTH_MALLOC_HIGH 
1482			call malloc_guard_exit 
1482			call malloc_guard_zerolen 
1482			endif 
1482 c9			      ret 
1483			 
1483			 
1483			;------------------------------------------------------------------------------ 
1483			;     free                                                                    : 
1483			;                                                                             : 
1483			; Description                                                                 : 
1483			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1483			;     returned by malloc, otherwise the behaviour is undefined.               : 
1483			;                                                                             : 
1483			;     Where possible, directly adjacent free blocks will be merged together   : 
1483			;     into larger blocks to help ensure that the heap does not become         : 
1483			;     excessively fragmented.                                                 : 
1483			;                                                                             : 
1483			;     free does not clear or set any other value into the freed space, and    : 
1483			;     therefore its contents may be visible through subsequent malloc's. The  : 
1483			;     caller should clear the freed space as required.                        : 
1483			;                                                                             : 
1483			;     This implementation of free uses the stack exclusively, and is          : 
1483			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1483			;     advisable to disable interrupts before calling free, and recommended    : 
1483			;     to avoid the use of free inside ISRs in general.                        : 
1483			;                                                                             : 
1483			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1483			;                                                                             : 
1483			; Parameters                                                                  : 
1483			;     HL  Pointer to address of first byte of allocation to be freed          : 
1483			;                                                                             : 
1483			; Returns                                                                     : 
1483			;     Nothing                                                                 : 
1483			;                                                                             : 
1483			; Stack frame                                                                 : 
1483			;       |             |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     BC      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     DE      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     IX      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |  prev_free  |                                                       : 
1483			;   +2  +-------------+                                                       : 
1483			;       |  next_free  |                                                       : 
1483			;   +0  +-------------+                                                       : 
1483			;       |             |                                                       : 
1483			;                                                                             : 
1483			;------------------------------------------------------------------------------ 
1483			free: 
1483 c5			      push  BC 
1484 d5			      push  DE 
1485 dd e5		      push  IX 
1487			 
1487 7c			      ld    A, H                    ; Exit if ptr is null 
1488 b5			      or    L 
1489 ca 4d 15		      jp    Z, free_early_exit 
148c			 
148c			      ; Set up stack frame 
148c eb			      ex    DE, HL 
148d 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1490 39			      add   HL, SP 
1491 f9			      ld    SP, HL 
1492 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1496 dd 39		      add   IX, SP 
1498			 
1498			      ; The address in HL points to the start of the useable allocated space, 
1498			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1498			      ; address of the block itself. 
1498 eb			      ex    DE, HL 
1499 11 fc ff		      ld    DE, -4 
149c 19			      add   HL, DE 
149d			 
149d			      ; An allocated block must have a null next block pointer in it 
149d 7e			      ld    A, (HL) 
149e 23			      inc   HL 
149f b6			      or    (HL) 
14a0 c2 48 15		      jp    NZ, free_done 
14a3			 
14a3 2b			      dec   HL 
14a4			 
14a4 44			      ld    B, H                    ; Copy HL to BC 
14a5 4d			      ld    C, L 
14a6			 
14a6			      ; Loop through the free list to find the first block with an address 
14a6			      ; higher than the block being freed 
14a6 21 0a 80		      ld    HL, free_list 
14a9			 
14a9			free_find_higher_block: 
14a9 5e			      ld    E, (HL)                 ; Load next ptr from free block 
14aa 23			      inc   HL 
14ab 56			      ld    D, (HL) 
14ac 2b			      dec   HL 
14ad			 
14ad dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
14b0 dd 72 01		      ld    (IX+1), D 
14b3 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
14b6 dd 74 03		      ld    (IX+3), H 
14b9			 
14b9 78			      ld    A, B                    ; Check if DE is greater than BC 
14ba ba			      cp    D                       ; Compare MSB first 
14bb 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
14bd 30 04		      jr    NC, free_find_higher_block_skip 
14bf 79			      ld    A, C 
14c0 bb			      cp    E                       ; Then compare LSB 
14c1 38 08		      jr    C, free_found_higher_block 
14c3			 
14c3			free_find_higher_block_skip: 
14c3 7a			      ld    A, D                    ; Reached the end of the free list? 
14c4 b3			      or    E 
14c5 ca 48 15		      jp    Z, free_done 
14c8			 
14c8 eb			      ex    DE, HL 
14c9			 
14c9 18 de		      jr    free_find_higher_block 
14cb			 
14cb			free_found_higher_block: 
14cb			      ; Insert freed block between prev and next free blocks 
14cb 71			      ld    (HL), C                 ; Point prev free block to freed block 
14cc 23			      inc   HL 
14cd 70			      ld    (HL), B 
14ce			 
14ce 60			      ld    H, B                    ; Point freed block at next free block 
14cf 69			      ld    L, C 
14d0 73			      ld    (HL), E 
14d1 23			      inc   HL 
14d2 72			      ld    (HL), D 
14d3			 
14d3			      ; Check if the freed block is adjacent to the next free block 
14d3 23			      inc   HL                      ; Load size of freed block into HL 
14d4 5e			      ld    E, (HL) 
14d5 23			      inc   HL 
14d6 56			      ld    D, (HL) 
14d7 eb			      ex    DE, HL 
14d8			 
14d8 09			      add   HL, BC                  ; Add addr of freed block and its size 
14d9			 
14d9 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
14dc dd 56 01		      ld    D, (IX+1) 
14df			 
14df b7			      or    A                       ; Clear the carry flag 
14e0 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
14e2 20 22		      jr    NZ, free_check_adjacent_to_prev 
14e4			 
14e4			      ; Freed block is adjacent to next, merge into one bigger block 
14e4 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
14e5 5e			      ld    E, (HL) 
14e6 23			      inc   HL 
14e7 56			      ld    D, (HL) 
14e8 e5			      push  HL                      ; Save ptr to next block for later 
14e9			 
14e9 60			      ld    H, B                    ; Store ptr from next block into freed block 
14ea 69			      ld    L, C 
14eb 73			      ld    (HL), E 
14ec 23			      inc   HL 
14ed 72			      ld    (HL), D 
14ee			 
14ee e1			      pop   HL                      ; Restore ptr to next block 
14ef 23			      inc   HL                      ; Load size of next block into DE 
14f0 5e			      ld    E, (HL) 
14f1 23			      inc   HL 
14f2 56			      ld    D, (HL) 
14f3 d5			      push  DE                      ; Save next block size for later 
14f4			 
14f4 60			      ld    H, B                    ; Load size of freed block into HL 
14f5 69			      ld    L, C 
14f6 23			      inc   HL 
14f7 23			      inc   HL 
14f8 5e			      ld    E, (HL) 
14f9 23			      inc   HL 
14fa 56			      ld    D, (HL) 
14fb eb			      ex    DE, HL 
14fc			 
14fc d1			      pop   DE                      ; Restore size of next block 
14fd 19			      add   HL, DE                  ; Add sizes of both blocks 
14fe eb			      ex    DE, HL 
14ff			 
14ff 60			      ld    H, B                    ; Store new bigger size into freed block 
1500 69			      ld    L, C 
1501 23			      inc   HL 
1502 23			      inc   HL 
1503 73			      ld    (HL), E 
1504 23			      inc   HL 
1505 72			      ld    (HL), D 
1506			 
1506			free_check_adjacent_to_prev: 
1506			      ; Check if the freed block is adjacent to the prev free block 
1506 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1509 dd 66 03		      ld    H, (IX+3) 
150c			 
150c 23			      inc   HL                      ; Size of prev free block into DE 
150d 23			      inc   HL 
150e 5e			      ld    E, (HL) 
150f 23			      inc   HL 
1510 56			      ld    D, (HL) 
1511 2b			      dec   HL 
1512 2b			      dec   HL 
1513 2b			      dec   HL 
1514			 
1514 19			      add   HL, DE                  ; Add prev block addr and size 
1515			 
1515 b7			      or    A                       ; Clear the carry flag 
1516 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1518 20 2e		      jr    NZ, free_done 
151a			 
151a			      ; Freed block is adjacent to prev, merge into one bigger block 
151a 60			      ld    H, B                    ; Load next ptr from freed block into DE 
151b 69			      ld    L, C 
151c 5e			      ld    E, (HL) 
151d 23			      inc   HL 
151e 56			      ld    D, (HL) 
151f e5			      push  HL                      ; Save freed block ptr for later 
1520			 
1520 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1523 dd 66 03		      ld    H, (IX+3) 
1526 73			      ld    (HL), E 
1527 23			      inc   HL 
1528 72			      ld    (HL), D 
1529			 
1529 e1			      pop   HL                      ; Restore freed block ptr 
152a 23			      inc   HL                      ; Load size of freed block into DE 
152b 5e			      ld    E, (HL) 
152c 23			      inc   HL 
152d 56			      ld    D, (HL) 
152e d5			      push  DE                      ; Save freed block size for later 
152f			 
152f dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1532 dd 66 03		      ld    H, (IX+3) 
1535 23			      inc   HL 
1536 23			      inc   HL 
1537 5e			      ld    E, (HL) 
1538 23			      inc   HL 
1539 56			      ld    D, (HL) 
153a			 
153a e1			      pop   HL                      ; Add sizes of both blocks 
153b 19			      add   HL, DE 
153c eb			      ex    DE, HL 
153d			 
153d dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1540 dd 66 03		      ld    H, (IX+3) 
1543 23			      inc   HL 
1544 23			      inc   HL 
1545 73			      ld    (HL), E 
1546 23			      inc   HL 
1547 72			      ld    (HL), D 
1548			 
1548			free_done: 
1548 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
154b 39			      add   HL, SP 
154c f9			      ld    SP, HL 
154d			 
154d			free_early_exit: 
154d dd e1		      pop   IX 
154f d1			      pop   DE 
1550 c1			      pop   BC 
1551			 
1551 c9			      ret 
1552			 
1552			; moved to firmware.asm 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			;                  .dw   0 
1552			 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_3 
1552			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1552			;heap_start        .equ  0x9000      ; Starting address of heap 
1552			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1552			; 
1552			 ;     .org 0 
1552			  ;    jp    main 
1552			; 
1552			; 
1552			 ;     .org  0x100 
1552			;main: 
1552			 ;     ld    HL, 0x8100 
1552			  ;    ld    SP, HL 
1552			; 
1552			;      call  heap_init 
1552			 
1552			      ; Make some allocations 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9004 
1552			; 
1552			 ;     ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9014 
1552			 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9024 
1552			 
1552			      ; Free some allocations 
1552			;      ld    HL, 0x9014 
1552			;      call  free 
1552			 
1552			;      ld    HL, 0x9004 
1552			;      call  free 
1552			; 
1552			;      ld    HL, 0x9024 
1552			;      call  free 
1552			 
1552			 
1552			 ;     halt 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     heap_init                                                               : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Initialise the heap and make it ready for malloc and free operations.   : 
1552			;                                                                             : 
1552			;     The heap is maintained as a linked list, starting with an initial       : 
1552			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1552			;     the first free block in the heap. Each block then points to the next    : 
1552			;     free block within the heap, and the free list ends at the first block   : 
1552			;     with a null pointer to the next free block.                             : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     Inputs are compile-time only. Two defines which specify the starting    : 
1552			;     address of the heap and its size are required, along with a memory      : 
1552			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1552			;     principally stores a pointer to the first free block in the heap.       : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;------------------------------------------------------------------------------ 
1552			heap_init: 
1552			      push  HL 
1552			 
1552			      ; Initialise free list struct 
1552			      ld    HL, heap_start 
1552			      ld    (free_list), HL 
1552			      ld    HL, 0 
1552			      ld    (free_list+2), HL 
1552			 
1552			      ; Insert first free block at bottom of heap, consumes entire heap 
1552			      ld    HL, heap_start+heap_size-4 
1552			      ld    (heap_start), HL        ; Next block (end of free list) 
1552			      ld    HL, heap_size-4 
1552			      ld    (heap_start+2), HL      ; Block size 
1552			 
1552			      ; Insert end of free list block at top of heap - two null words will 
1552			      ; terminate the free list 
1552			      ld    HL, 0 
1552			      ld    (heap_start+heap_size-2), HL 
1552			      ld    (heap_start+heap_size-4), HL 
1552			 
1552			      pop   HL 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     malloc                                                                  : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Allocates the wanted space from the heap and returns the address of the : 
1552			;     first useable byte of the allocation.                                   : 
1552			;                                                                             : 
1552			;     Allocations can happen in one of two ways:                              : 
1552			;                                                                             : 
1552			;     1. A free block may be found which is the exact size wanted. In this    : 
1552			;        case the block is removed from the free list and retuedn to the      : 
1552			;        caller.                                                              : 
1552			;     2. A free block may be found which is larger than the size wanted. In   : 
1552			;        this case, the larger block is split into two. The first portion of  : 
1552			;        this block will become the requested space by the malloc call and    : 
1552			;        is returned to the caller. The second portion becomes a new free     : 
1552			;        block, and the free list is adjusted to maintain continuity via this : 
1552			;        newly created block.                                                 : 
1552			;                                                                             : 
1552			;     malloc does not set any initial value in the allocated space, the       : 
1552			;     caller is required to do this as required.                              : 
1552			;                                                                             : 
1552			;     This implementation of malloc uses the stack exclusively, and is        : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling malloc, and recommended  : 
1552			;     to avoid the use of malloc inside ISRs in general.                      : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Number of bytes wanted                                              : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     HL  Address of the first useable byte of the allocation                 : 
1552			;                                                                             : 
1552			; Flags                                                                       : 
1552			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +4  +-------------+                                                       : 
1552			;       |  this_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			malloc: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if no space requested 
1552			      or    L 
1552			      jp    Z, malloc_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; Setup initial state 
1552			      ld    HL, 4                   ; want must also include space used by block struct 
1552			      add   HL, DE 
1552			 
1552			      ld    B, H                    ; Move want to BC 
1552			      ld    C, L 
1552			 
1552			      ld    HL, free_list           ; Store prev_free ptr to stack 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    E, (HL)                 ; Store this_free ptr to stack 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ld    (IX+2), E 
1552			      ld    (IX+3), D 
1552			      ex    DE, HL                  ; this_free ptr into HL 
1552			 
1552			      ; Loop through free block list to find some space 
1552			malloc_find_space: 
1552			      ld    E, (HL)                 ; Load next_free ptr into DE 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1552			      or    E 
1552			      jp    Z, malloc_no_space 
1552			 
1552			      ld    (IX+0), E               ; Store next_free ptr to stack 
1552			      ld    (IX+1), D 
1552			 
1552			      ; Does this block have enough space to make the allocation? 
1552			      inc   HL                      ; Load free block size into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ex    DE, HL                  ; Check size of block against want 
1552			      or    A                       ; Ensure carry flag clear 
1552			      sbc   HL, BC 
1552			      push  HL                      ; Store the result for later (new block size) 
1552			 
1552			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1552			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1552			 
1552			      ; this_free block is not big enough, setup ptrs to test next free block 
1552			      pop   HL                      ; Discard previous result 
1552			 
1552			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1552			      ld    H, (IX+3) 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1552			      ld    H, (IX+1) 
1552			      ld    (IX+2), L 
1552			      ld    (IX+3), H 
1552			 
1552			      jr    malloc_find_space 
1552			 
1552			      ; split a bigger block into two - requested size and remaining size 
1552			malloc_alloc_split: 
1552			      ex    DE, HL                  ; Calculate address of new free block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      add   HL, BC 
1552			 
1552			      ; Create a new block and point it at next_free 
1552			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      ld    (HL), E                 ; Store next_free ptr into new block 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   DE                      ; Store size of new block into new block 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Update this_free ptr to point to new block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1552			      ld    (IX+3), H 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store want size into allocated block 
1552			      ld    (HL), C 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			      inc   HL 
1552			      push  HL                      ; Address of allocation to return 
1552			 
1552			      jr    malloc_update_links 
1552			 
1552			malloc_alloc_fit: 
1552			      pop   HL                      ; Dont need new block size, want is exact fit 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store address of allocation to return 
1552			      inc   HL 
1552			      inc   HL 
1552			      push  HL 
1552			 
1552			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1552			      ld    L, (IX+0)               ; next_free to HL 
1552			      ld    H, (IX+1) 
1552			 
1552			      ld    (IX+2), L               ; HL to this_free 
1552			      ld    (IX+3), H 
1552			 
1552			 
1552			malloc_update_links: 
1552			      ; Update prev_free ptr to point to this_free 
1552			      ld    L, (IX+4)               ; prev_free ptr to HL 
1552			      ld    H, (IX+5) 
1552			 
1552			      ld    E, (IX+2)               ; this_free ptr to DE 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (HL), E                 ; this_free ptr into prev_free 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Clear the Z flag to indicate successful allocation 
1552			      ld    A, D 
1552			      or    E 
1552			 
1552			      pop   DE                      ; Address of allocation 
1552			 
1552			malloc_no_space: 
1552			      ld    HL, 6                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			      ex    DE, HL                  ; Alloc addr into HL for return 
1552			 
1552			malloc_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     free                                                                    : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1552			;     returned by malloc, otherwise the behaviour is undefined.               : 
1552			;                                                                             : 
1552			;     Where possible, directly adjacent free blocks will be merged together   : 
1552			;     into larger blocks to help ensure that the heap does not become         : 
1552			;     excessively fragmented.                                                 : 
1552			;                                                                             : 
1552			;     free does not clear or set any other value into the freed space, and    : 
1552			;     therefore its contents may be visible through subsequent malloc's. The  : 
1552			;     caller should clear the freed space as required.                        : 
1552			;                                                                             : 
1552			;     This implementation of free uses the stack exclusively, and is          : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling free, and recommended    : 
1552			;     to avoid the use of free inside ISRs in general.                        : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Pointer to address of first byte of allocation to be freed          : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			free: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if ptr is null 
1552			      or    L 
1552			      jp    Z, free_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; The address in HL points to the start of the useable allocated space, 
1552			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1552			      ; address of the block itself. 
1552			      ex    DE, HL 
1552			      ld    DE, -4 
1552			      add   HL, DE 
1552			 
1552			      ; An allocated block must have a null next block pointer in it 
1552			      ld    A, (HL) 
1552			      inc   HL 
1552			      or    (HL) 
1552			      jp    NZ, free_done 
1552			 
1552			      dec   HL 
1552			 
1552			      ld    B, H                    ; Copy HL to BC 
1552			      ld    C, L 
1552			 
1552			      ; Loop through the free list to find the first block with an address 
1552			      ; higher than the block being freed 
1552			      ld    HL, free_list 
1552			 
1552			free_find_higher_block: 
1552			      ld    E, (HL)                 ; Load next ptr from free block 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			 
1552			      ld    (IX+0), E               ; Save ptr to next free block 
1552			      ld    (IX+1), D 
1552			      ld    (IX+2), L               ; Save ptr to prev free block 
1552			      ld    (IX+3), H 
1552			 
1552			      ld    A, B                    ; Check if DE is greater than BC 
1552			      cp    D                       ; Compare MSB first 
1552			      jr    Z, $+4                  ; MSB the same, compare LSB 
1552			      jr    NC, free_find_higher_block_skip 
1552			      ld    A, C 
1552			      cp    E                       ; Then compare LSB 
1552			      jr    C, free_found_higher_block 
1552			 
1552			free_find_higher_block_skip: 
1552			      ld    A, D                    ; Reached the end of the free list? 
1552			      or    E 
1552			      jp    Z, free_done 
1552			 
1552			      ex    DE, HL 
1552			 
1552			      jr    free_find_higher_block 
1552			 
1552			free_found_higher_block: 
1552			      ; Insert freed block between prev and next free blocks 
1552			      ld    (HL), C                 ; Point prev free block to freed block 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			 
1552			      ld    H, B                    ; Point freed block at next free block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Check if the freed block is adjacent to the next free block 
1552			      inc   HL                      ; Load size of freed block into HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      add   HL, BC                  ; Add addr of freed block and its size 
1552			 
1552			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_check_adjacent_to_prev 
1552			 
1552			      ; Freed block is adjacent to next, merge into one bigger block 
1552			      ex    DE, HL                  ; Load next ptr from next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save ptr to next block for later 
1552			 
1552			      ld    H, B                    ; Store ptr from next block into freed block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore ptr to next block 
1552			      inc   HL                      ; Load size of next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save next block size for later 
1552			 
1552			      ld    H, B                    ; Load size of freed block into HL 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      pop   DE                      ; Restore size of next block 
1552			      add   HL, DE                  ; Add sizes of both blocks 
1552			      ex    DE, HL 
1552			 
1552			      ld    H, B                    ; Store new bigger size into freed block 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_check_adjacent_to_prev: 
1552			      ; Check if the freed block is adjacent to the prev free block 
1552			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1552			      ld    H, (IX+3) 
1552			 
1552			      inc   HL                      ; Size of prev free block into DE 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      add   HL, DE                  ; Add prev block addr and size 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_done 
1552			 
1552			      ; Freed block is adjacent to prev, merge into one bigger block 
1552			      ld    H, B                    ; Load next ptr from freed block into DE 
1552			      ld    L, C 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save freed block ptr for later 
1552			 
1552			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1552			      ld    H, (IX+3) 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore freed block ptr 
1552			      inc   HL                      ; Load size of freed block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save freed block size for later 
1552			 
1552			      ld    L, (IX+2)               ; Load size of prev block into DE 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      pop   HL                      ; Add sizes of both blocks 
1552			      add   HL, DE 
1552			      ex    DE, HL 
1552			 
1552			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_done: 
1552			      ld    HL, 4                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			free_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;      .org 0x8000 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			 ;                 .dw   0 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_4 
1552			 
1552			; My memory allocation code. Very very simple.... 
1552			; allocate space under 250 chars 
1552			 
1552			heap_init: 
1552				; init start of heap as zero 
1552				;  
1552			 
1552				ld hl, heap_start 
1552				ld a, 0 
1552				ld (hl), a      ; empty block 
1552				inc hl 
1552				ld a, 0 
1552				ld (hl), a      ; length of block 
1552				; write end of list 
1552				inc hl 
1552				ld a,(hl) 
1552				inc hl 
1552				ld a,(hl) 
1552				 
1552			 
1552				; init some malloc vars 
1552			 
1552				ld hl, 0 
1552				ld (free_list), hl       ; store last malloc location 
1552			 
1552				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1552				ld a, 0 
1552				ld (hl), a 
1552			 
1552			 
1552				ld hl, heap_start 
1552				;  
1552				  
1552				ret 
1552			 
1552			 
1552			;    free block marker 
1552			;    requested size  
1552			;    pointer to next block 
1552			;    .... 
1552			;    next block marker 
1552			 
1552			 
1552			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1552			; 
1552			 
1552			 
1552			malloc:  
1552				push de 
1552				push bc 
1552				push af 
1552			 
1552				; hl space required 
1552				 
1552				ld c, l    ; hold space   (TODO only a max of 255) 
1552			 
1552			;	inc c     ; TODO BUG need to fix memory leak on push str 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			 
1552			 
1552			 
1552				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1552			 
1552				ld a, (free_list+3) 
1552				cp 0 
1552				jr z, .contheap 
1552			 
1552				ld hl, (free_list)     ; get last alloc 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mrs" 
1552						CALLMONITOR 
1552					endif 
1552				jr .startalloc 
1552			 
1552			.contheap: 
1552				ld hl, heap_start 
1552			 
1552			.startalloc: 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mym" 
1552						CALLMONITOR 
1552					endif 
1552			.findblock: 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmf" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552				ld a,(hl)  
1552				; if byte is zero then clear to use 
1552			 
1552				cp 0 
1552				jr z, .foundemptyblock 
1552			 
1552				; if byte is not clear 
1552				;     then byte is offset to next block 
1552			 
1552				inc hl 
1552				ld a, (hl) ; get size 
1552			.nextblock:	inc hl 
1552					ld e, (hl) 
1552					inc hl 
1552					ld d, (hl) 
1552					ex de, hl 
1552			;	inc hl  ; move past the store space 
1552			;	inc hl  ; move past zero index  
1552			 
1552				; TODO detect no more space 
1552			 
1552				push hl 
1552				ld de, heap_end 
1552				call cmp16 
1552				pop hl 
1552				jr nc, .nospace 
1552			 
1552				jr .findblock 
1552			 
1552			.nospace: ld hl, 0 
1552				jp .exit 
1552			 
1552			 
1552			.foundemptyblock:	 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mme" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; TODO has block enough space if reusing??? 
1552			 
1552				;  
1552			 
1552			; see if this block has been previously used 
1552				inc hl 
1552				ld a, (hl) 
1552				dec hl 
1552				cp 0 
1552				jr z, .newblock 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meR" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; no reusing previously allocated block 
1552			 
1552			; is it smaller than previously used? 
1552				 
1552				inc hl    ; move to size 
1552				ld a, c 
1552				sub (hl)        ; we want c < (hl) 
1552				dec hl    ; move back to marker 
1552			        jr z, .findblock 
1552			 
1552				; update with the new size which should be lower 
1552			 
1552			        ;inc  hl   ; negate next move. move back to size  
1552			 
1552			.newblock: 
1552				; need to be at marker here 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meN" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			 
1552				ld a, c 
1552			 
1552				ld (free_list+3), a	 ; flag resume from last malloc  
1552				ld (free_list), hl    ; save out last location 
1552			 
1552			 
1552				;inc a     ; space for length byte 
1552				ld (hl), a     ; save block in use marker 
1552			 
1552				inc hl   ; move to space marker 
1552				ld (hl), a    ; save new space 
1552			 
1552				inc hl   ; move to start of allocated area 
1552				 
1552			;	push hl     ; save where we are - 1  
1552			 
1552			;	inc hl  ; move past zero index  
1552				; skip space to set down new marker 
1552			 
1552				; provide some extra space for now 
1552			 
1552				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1552				inc a 
1552				inc a 
1552			 
1552				push hl   ; save where we are in the node block 
1552			 
1552				call addatohl 
1552			 
1552				; write linked list point 
1552			 
1552				pop de     ; get our node position 
1552				ex de, hl 
1552			 
1552				ld (hl), e 
1552				inc hl 
1552				ld (hl), d 
1552			 
1552				inc hl 
1552			 
1552				; now at start of allocated data so save pointer 
1552			 
1552				push hl 
1552			 
1552				; jump to position of next node and setup empty header in DE 
1552			 
1552				ex de, hl 
1552			 
1552			;	inc hl ; move past end of block 
1552			 
1552				ld a, 0 
1552				ld (hl), a   ; empty marker 
1552				inc hl 
1552				ld (hl), a   ; size 
1552				inc hl  
1552				ld (hl), a   ; ptr 
1552				inc hl 
1552				ld (hl), a   ; ptr 
1552			 
1552			 
1552				pop hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmr" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			.exit: 
1552				pop af 
1552				pop bc 
1552				pop de  
1552				ret 
1552			 
1552			 
1552			 
1552			 
1552			free:  
1552				push hl 
1552				push af 
1552				; get address in hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "fre" 
1552						CALLMONITOR 
1552					endif 
1552				; data is at hl - move to block count 
1552				dec hl 
1552				dec hl    ; get past pointer 
1552				dec hl 
1552			 
1552				ld a, (hl)    ; need this for a validation check 
1552			 
1552				dec hl    ; move to block marker 
1552			 
1552				; now check that the block count and block marker are the same  
1552			        ; this checks that we are on a malloc node and not random memory 
1552			        ; OK a faint chance this could be a problem but rare - famous last words! 
1552			 
1552				ld c, a 
1552				ld a, (hl)    
1552			 
1552				cp c 
1552				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1552			 
1552				; yes good chance we are on a malloc node 
1552			 
1552				ld a, 0      
1552				ld (hl), a   ; mark as free 
1552			 
1552				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1552			 
1552			.freeignore:  
1552			 
1552				pop af 
1552				pop hl 
1552			 
1552				ret 
1552			 
1552			 
1552			 
1552			endif 
1552			 
1552			; eof 
# End of file firmware_memory.asm
1552			  
1552			; device C  
1552			; Now handled by SPI  
1552			;if SOUND_ENABLE  
1552			;	include "firmware_sound.asm"  
1552			;endif  
1552			  
1552			include "firmware_diags.asm"  
1552			; Hardware diags menu 
1552			 
1552			 
1552			config: 
1552			 
1552 3e 00			ld a, 0 
1554 21 7d 15			ld hl, .configmn 
1557 cd db 0d			call menu 
155a			 
155a fe 00			cp 0 
155c c8				ret z 
155d			 
155d			;	cp 1 
155d			;	call z, .savetostore 
155d			 
155d fe 01			cp 1 
155f			if STARTUP_V1 
155f				call z, .selautoload 
155f			endif 
155f			 
155f			if STARTUP_V2 
155f cc 8b 15			call z, .enautoload 
1562			endif 
1562 fe 02			cp 2 
1564 cc a2 15			call z, .disautoload 
1567			;	cp 3 
1567			;	call z, .selbank 
1567 fe 03			cp 3 
1569 cc 0d 18			call z, .debug_tog 
156c fe 04			cp 4 
156e cc 5b 19			call z, .bpsgo 
1571 fe 05			cp 5 
1573 cc 36 18			call z, hardware_diags 
1576			if STARTUP_V2 
1576 fe 06			cp 6 
1578 cc ce 15			call z, create_startup 
157b			endif 
157b 18 d5			jr config 
157d			 
157d			.configmn: 
157d			;	dw prom_c3 
157d 49 1b			dw prom_c2 
157f 5f 1b			dw prom_c2a 
1581			;	dw prom_c2b 
1581			;	dw prom_c4 
1581 d6 1b			dw prom_m4 
1583 f1 1b			dw prom_m4b 
1585 f9 1b			dw prom_c1 
1587			if STARTUP_V2 
1587 08 1c			dw prom_c9 
1589			endif 
1589 00 00			dw 0 
158b				 
158b			 
158b			if STARTUP_V2 
158b			.enautoload: 
158b				if STORAGE_SE 
158b 3e fe			ld a, $fe      ; bit 0 clear 
158d 32 95 f9			ld (spi_device), a 
1590			 
1590 cd 25 05			call storage_get_block_0 
1593			 
1593 3e 01			ld a, 1 
1595 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
1598			 
1598 21 00 00				ld hl, 0 
159b 11 af f9				ld de, store_page 
159e cd d9 04			call storage_write_block	 ; save update 
15a1				else 
15a1			 
15a1				ld hl, prom_notav 
15a1				ld de, prom_empty 
15a1				call info_panel 
15a1				endif 
15a1			 
15a1			 
15a1 c9				ret 
15a2			endif 
15a2			 
15a2			.disautoload: 
15a2				if STORAGE_SE 
15a2 3e fe			ld a, $fe      ; bit 0 clear 
15a4 32 95 f9			ld (spi_device), a 
15a7			 
15a7 cd 25 05			call storage_get_block_0 
15aa			 
15aa 3e 00			ld a, 0 
15ac 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
15af			 
15af 21 00 00				ld hl, 0 
15b2 11 af f9				ld de, store_page 
15b5 cd d9 04			call storage_write_block	 ; save update 
15b8				else 
15b8			 
15b8				ld hl, prom_notav 
15b8				ld de, prom_empty 
15b8				call info_panel 
15b8				endif 
15b8			 
15b8			 
15b8 c9				ret 
15b9			 
15b9			if STARTUP_V1 
15b9			 
15b9			; Select auto start 
15b9			 
15b9			.selautoload: 
15b9			 
15b9				 
15b9				if STORAGE_SE 
15b9			 
15b9					call config_dir 
15b9				        ld hl, scratch 
15b9					ld a, 0 
15b9					call menu 
15b9			 
15b9					cp 0 
15b9					ret z 
15b9			 
15b9					dec a 
15b9			 
15b9			 
15b9					; locate menu option 
15b9			 
15b9					ld hl, scratch 
15b9					call table_lookup 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALl" 
15b9						CALLMONITOR 
15b9					endif 
15b9					; with the pointer to the menu it, the byte following the zero term is the file id 
15b9			 
15b9					ld a, 0 
15b9					ld bc, 50   ; max of bytes to look at 
15b9					cpir  
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALb" 
15b9						CALLMONITOR 
15b9					endif 
15b9					;inc hl 
15b9			 
15b9					ld a, (hl)   ; file id 
15b9					 
15b9				        ; save bank and file ids 
15b9			 
15b9					push af 
15b9			 
15b9			; TODO need to save to block 0 on bank 1	 
15b9			 
15b9					call storage_get_block_0 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "AL0" 
15b9						CALLMONITOR 
15b9					endif 
15b9					pop af 
15b9			 
15b9					ld (store_page+STORE_0_FILERUN),a 
15b9					 
15b9					; save bank id 
15b9			 
15b9					ld a,(spi_device) 
15b9					ld (store_page+STORE_0_BANKRUN),a 
15b9			 
15b9					; enable auto run of store file 
15b9			 
15b9					ld a, 1 
15b9					ld (store_page+STORE_0_AUTOFILE),a 
15b9			 
15b9					; save buffer 
15b9			 
15b9					ld hl, 0 
15b9					ld de, store_page 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALw" 
15b9						CALLMONITOR 
15b9					endif 
15b9				call storage_write_block	 ; save update 
15b9			  
15b9			 
15b9			 
15b9			 
15b9					ld hl, scratch 
15b9					call config_fdir 
15b9			 
15b9				else 
15b9			 
15b9				ld hl, prom_notav 
15b9				ld de, prom_empty 
15b9				call info_panel 
15b9			 
15b9				endif 
15b9				ret 
15b9			endif 
15b9			 
15b9			 
15b9			; Select storage bank 
15b9			 
15b9			.selbank: 
15b9			 
15b9			;	if STORAGE_SE 
15b9			;	else 
15b9			 
15b9 21 1d 1c			ld hl, prom_notav 
15bc 11 33 1c			ld de, prom_empty 
15bf cd 3b 0d			call info_panel 
15c2			;	endif 
15c2				 
15c2 c9				ret 
15c3			 
15c3			if STORAGE_SE 
15c3			 
15c3			.config_ldir:   
15c3				; Load storage bank labels into menu array 
15c3			 
15c3				 
15c3			 
15c3			 
15c3 c9				ret 
15c4			 
15c4			 
15c4			endif 
15c4			 
15c4			 
15c4			; Save user words to storage 
15c4			 
15c4			.savetostore: 
15c4			 
15c4			;	if STORAGE_SE 
15c4			; 
15c4			;		call config_dir 
15c4			;	        ld hl, scratch 
15c4			;		ld a, 0 
15c4			;		call menu 
15c4			;		 
15c4			;		ld hl, scratch 
15c4			;		call config_fdir 
15c4			; 
15c4			;	else 
15c4			 
15c4 21 1d 1c			ld hl, prom_notav 
15c7 11 33 1c			ld de, prom_empty 
15ca cd 3b 0d			call info_panel 
15cd			 
15cd			;	endif 
15cd			 
15cd c9				ret 
15ce			 
15ce			if STARTUP_V2 
15ce			 
15ce			create_startup: 
15ce			 
15ce 3e 00			ld a, 0 
15d0 21 32 17			ld hl, .crstart 
15d3 cd db 0d			call menu 
15d6			 
15d6 fe 00			cp 0 
15d8 c8				ret z 
15d9			 
15d9 fe 01			cp 1 
15db cc 17 16			call z, .genlsword 
15de fe 02			cp 2 
15e0 cc 21 16			call z, .genedword 
15e3			 
15e3 fe 03			cp 3 
15e5 cc 2b 16			call z, .gendemword 
15e8			 
15e8 fe 04			cp 4 
15ea cc 35 16			call z, .genutlword 
15ed fe 05			cp 5 
15ef cc 3f 16			call z, .genspiword 
15f2 fe 06			cp 6 
15f4 cc 49 16			call z, .genkeyword 
15f7 fe 07			cp 7 
15f9 cc 0d 16			call z, .gensoundword 
15fc fe 08			cp 8 
15fe cc 03 16			call z, .genhwword 
1601 18 cb			jr create_startup 
1603			 
1603			.genhwword: 
1603 21 c0 1b			ld hl, crs_hw 
1606 11 96 16			ld de, .hwworddef 
1609 cd 53 16			call .genfile 
160c c9				ret 
160d			.gensoundword: 
160d 21 b4 1b			ld hl, crs_sound 
1610 11 a4 16			ld de, .soundworddef 
1613 cd 53 16			call .genfile 
1616 c9				ret 
1617			.genlsword: 
1617 21 76 1b			ld hl, crs_s1 
161a 11 ca 16			ld de, .lsworddef 
161d cd 53 16			call .genfile 
1620 c9				ret 
1621			 
1621			.genedword: 
1621 11 ce 16			ld de, .edworddef 
1624 21 7f 1b			ld hl, crs_s2 
1627 cd 53 16			call .genfile 
162a c9				ret 
162b			 
162b			.gendemword: 
162b 11 d6 16			ld de, .demoworddef 
162e 21 88 1b			ld hl, crs_s3 
1631 cd 53 16			call .genfile 
1634 c9				ret 
1635			 
1635			.genutlword: 
1635 21 94 1b			ld hl, crs_s4 
1638 11 b8 16			ld de, .utilwordef 
163b cd 53 16			call .genfile 
163e c9				ret 
163f			.genspiword: 
163f 21 9b 1b			ld hl, crs_s5 
1642 11 f8 16			ld de, .spiworddef 
1645 cd 53 16			call .genfile 
1648 c9				ret 
1649			.genkeyword: 
1649 21 a5 1b			ld hl, crs_s6 
164c 11 06 17			ld de, .keyworddef 
164f cd 53 16			call .genfile 
1652 c9				ret 
1653			 
1653			; hl - points to file name 
1653			; de - points to strings to add to file 
1653			 
1653			.genfile: 
1653 e5				push hl 
1654 d5				push de 
1655			 
1655 cd aa 0d			call clear_display 
1658 3e 00			ld a, display_row_1 
165a 11 85 16			ld de, .genfiletxt 
165d cd bd 0d			call str_at_display 
1660 cd cd 0d			call update_display 
1663			 
1663 d1				pop de 
1664 e1				pop hl 
1665			 
1665			 
1665 d5				push de 
1666 cd 77 08			call storage_create 
1669				; id in hl 
1669 d1				pop de   ; table of strings to add 
166a			 
166a			.genloop: 
166a			 
166a e5				push hl ; save id for next time around 
166b d5				push de ; save de for next time around 
166c			 
166c eb				ex de, hl 
166d cd ba 23			call loadwordinhl 
1670 eb				ex de, hl 
1671			 
1671				; need hl to be the id 
1671				; need de to be the string ptr 
1671				 
1671 cd 64 0b			call storage_append 
1674			 
1674 d1				pop de 
1675 e1				pop hl 
1676			 
1676 13				inc de 
1677 13				inc de 
1678			 
1678 1a				ld a,(de) 
1679 fe 00			cp 0 
167b 20 ed			jr nz, .genloop 
167d 13				inc de 
167e 1a				ld a, (de) 
167f 1b				dec de 
1680 fe 00			cp 0 
1682 20 e6			jr nz, .genloop	 
1684			 
1684 c9				ret 
1685			 
1685 .. 00		.genfiletxt:  db "Creating file...",0 
1696			 
1696			.hwworddef: 
1696 9b 69			dw test5 
1698 d3 69			dw test6 
169a 0b 6a			dw test7 
169c 1f 6a			dw test8 
169e 4b 6a			dw test9 
16a0 61 6a			dw test10 
16a2 00 00			dw 0 
16a4			 
16a4			.soundworddef: 
16a4 86 6a			dw sound1 
16a6 aa 6a			dw sound2 
16a8 da 6a			dw sound3 
16aa ff 6a			dw sound4 
16ac 0c 6b			dw sound5 
16ae 19 6b			dw sound6 
16b0 26 6b			dw sound7 
16b2 33 6b			dw sound8 
16b4 4b 6b			dw sound9 
16b6 00 00			dw 0 
16b8			 
16b8			.utilwordef: 
16b8 c1 67			dw strncpy 
16ba 9c 67			dw type 
16bc 1e 69			dw tuck 
16be 68 67			dw clrstack 
16c0 21 67			dw longread 
16c2 22 68			dw start1 
16c4 32 68			dw start2 
16c6			; duplicated 
16c6			;	dw start3b 
16c6			;	dw start3c 
16c6 31 69			dw list 
16c8 00 00			dw 0 
16ca			 
16ca			.lsworddef: 
16ca 43 68			dw start3b 
16cc 00 00			dw 0 
16ce			 
16ce			.edworddef: 
16ce 80 63			dw edit1 
16d0 a1 63			dw edit2 
16d2 d6 63			dw edit3 
16d4 00 00			dw 0 
16d6			 
16d6			.demoworddef: 
16d6 62 6b			dw game1 
16d8 73 6b			dw game1a 
16da d5 6b			dw game1b 
16dc 0a 6c			dw game1c 
16de 40 6c			dw game1d 
16e0 71 6c			dw game1s 
16e2 85 6c			dw game1t 
16e4 9a 6c			dw game1f 
16e6 ce 6c			dw game1z 
16e8 12 6d			dw game1zz 
16ea 7b 6d			dw ssv2 
16ec b1 6d			dw ssv3 
16ee cd 6d			dw ssv4 
16f0 e9 6d			dw ssv5 
16f2 02 6e			dw ssv1 
16f4 4a 6e			dw ssv1cpm	 
16f6			;	dw game2b 
16f6			;	dw game2bf 
16f6			;	dw game2mba 
16f6			;	dw game2mbas	 
16f6			;	dw game2mbht 
16f6			;	dw game2mbms 
16f6			;	dw game2mb 
16f6			;	dw game3w 
16f6			;	dw game3p 
16f6			;	dw game3sc 
16f6			;	dw game3vsi 
16f6			;	dw game3vs 
16f6 00 00			dw 0 
16f8			 
16f8			 
16f8			.spiworddef: 
16f8			 
16f8 0e 64		    dw spi1 
16fa 67 64		    dw spi2 
16fc 9b 64		    dw spi2b 
16fe 1f 65		    dw spi3 
1700 c9 64		    dw spi4 
1702 f2 64		    dw spi5 
1704			;    dw spi6 
1704			;    dw spi7 
1704			 
1704			;    dw spi8 
1704			;    dw spi9 
1704			;    dw spi10 
1704 00 00		    dw 0 
1706			 
1706			.keyworddef: 
1706			 
1706 a1 6e			dw keyup 
1708 af 6e			dw keydown 
170a bf 6e			dw keyleft 
170c cf 6e			dw keyright 
170e e0 6e			dw 	keyf1 
1710 ee 6e			dw keyf2 
1712 fc 6e			dw keyf3 
1714 0a 6f			dw keyf4 
1716 18 6f			dw keyf5 
1718 26 6f			dw keyf6 
171a 34 6f			dw keyf7 
171c 42 6f			dw keyf8 
171e 50 6f			dw keyf9 
1720 5e 6f			dw keyf10 
1722 6d 6f			dw keyf11 
1724 7c 6f			dw keyf12 
1726 8b 6f			dw keytab 
1728 9a 6f			dw keycr 
172a a8 6f			dw keyhome 
172c b8 6f			dw keyend 
172e c7 6f			dw keybs 
1730 00 00			dw 0 
1732			 
1732			.crstart: 
1732 76 1b			dw crs_s1 
1734 7f 1b			dw crs_s2 
1736 88 1b			dw crs_s3 
1738 94 1b			dw crs_s4 
173a 9b 1b			dw crs_s5 
173c a5 1b			dw crs_s6 
173e b4 1b			dw crs_sound 
1740 c0 1b			dw crs_hw 
1742 00 00			dw 0 
1744			 
1744			endif 
1744			 
1744			 
1744			if STORAGE_SE 
1744			 
1744			config_fdir: 
1744				; using the scratch dir go through and release the memory allocated for each string 
1744				 
1744 21 f6 f0			ld hl, scratch 
1747 5e			.cfdir:	ld e,(hl) 
1748 23				inc hl 
1749 56				ld d,(hl) 
174a 23				inc hl 
174b			 
174b eb				ex de, hl 
174c cd 07 10			call ishlzero 
174f c8				ret z     ; return on null pointer 
1750 cd 83 14			call free 
1753 eb				ex de, hl 
1754 18 f1			jr .cfdir 
1756			 
1756			 
1756 c9				ret 
1757			 
1757			 
1757			config_dir: 
1757			 
1757				; for the config menus that need to build a directory of storage call this routine 
1757				; it will construct a menu in scratch to pass to menu 
1757			 
1757				; open storage device 
1757			 
1757				; execute DIR to build a list of files and their ids into scratch in menu format 
1757				; once the menu has finished then will need to call config_fdir to release the strings 
1757				 
1757				; c = number items 
1757			 
1757				 
1757 cd 25 05			call storage_get_block_0 
175a			 
175a 21 af f9			ld hl, store_page     ; get current id count 
175d 46				ld b, (hl) 
175e 0e 00			ld c, 0    ; count of files   
1760			 
1760			 
1760 21 f6 f0			ld hl, scratch 
1763 22 a6 f9			ld (store_tmp2), hl    ; location to poke strings 
1766			 
1766				; check for empty drive 
1766			 
1766 3e 00			ld a, 0 
1768 b8				cp b 
1769 ca 03 18			jp z, .dirdone 
176c			 
176c				 
176c					if DEBUG_FORTH_WORDS 
176c						DMARK "Cdc" 
176c f5				push af  
176d 3a 81 17			ld a, (.dmark)  
1770 32 a0 fd			ld (debug_mark),a  
1773 3a 82 17			ld a, (.dmark+1)  
1776 32 a1 fd			ld (debug_mark+1),a  
1779 3a 83 17			ld a, (.dmark+2)  
177c 32 a2 fd			ld (debug_mark+2),a  
177f 18 03			jr .pastdmark  
1781 ..			.dmark: db "Cdc"  
1784 f1			.pastdmark: pop af  
1785			endm  
# End of macro DMARK
1785						CALLMONITOR 
1785 cd aa fd			call debug_vector  
1788				endm  
# End of macro CALLMONITOR
1788					endif 
1788			 
1788			 
1788			.diritem:	 
1788 c5				push bc 
1789				; for each of the current ids do a search for them and if found push to stack 
1789			 
1789 21 40 00				ld hl, STORE_BLOCK_PHY 
178c 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
178e 58					ld e,b 
178f			 
178f cd a7 07				call storage_findnextid 
1792			 
1792			 
1792					; if found hl will be non zero 
1792			 
1792 cd 07 10				call ishlzero 
1795 28 69				jr z, .dirnotfound 
1797			 
1797					; increase count 
1797			 
1797 c1					pop bc	 
1798 0c					inc c 
1799 c5					push bc 
179a					 
179a			 
179a					; get file header and push the file name 
179a			 
179a 11 af f9				ld de, store_page 
179d cd 74 04				call storage_read_block 
17a0			 
17a0					; push file id to stack 
17a0				 
17a0 3a af f9				ld a, (store_page) 
17a3 26 00				ld h, 0 
17a5 6f					ld l, a 
17a6			 
17a6					;call forth_push_numhl 
17a6					; TODO store id 
17a6			 
17a6 e5					push hl 
17a7			 
17a7					; push extent count to stack  
17a7				 
17a7 21 b2 f9				ld hl, store_page+3 
17aa			 
17aa					; get file name length 
17aa			 
17aa cd 44 13				call strlenz   
17ad			 
17ad 23					inc hl   ; cover zero term 
17ae 23					inc hl  ; stick the id at the end of the area 
17af			 
17af e5					push hl 
17b0 c1					pop bc    ; move length to bc 
17b1			 
17b1 cd b9 13				call malloc 
17b4			 
17b4					; TODO save malloc area to scratch 
17b4			 
17b4 eb					ex de, hl 
17b5 2a a6 f9				ld hl, (store_tmp2) 
17b8 73					ld (hl), e 
17b9 23					inc hl 
17ba 72					ld (hl), d 
17bb 23					inc hl 
17bc 22 a6 f9				ld (store_tmp2), hl 
17bf			 
17bf					 
17bf			 
17bf					;pop hl   ; get source 
17bf			;		ex de, hl    ; swap aronund	 
17bf			 
17bf 21 b2 f9				ld hl, store_page+3 
17c2					if DEBUG_FORTH_WORDS 
17c2						DMARK "CFd" 
17c2 f5				push af  
17c3 3a d7 17			ld a, (.dmark)  
17c6 32 a0 fd			ld (debug_mark),a  
17c9 3a d8 17			ld a, (.dmark+1)  
17cc 32 a1 fd			ld (debug_mark+1),a  
17cf 3a d9 17			ld a, (.dmark+2)  
17d2 32 a2 fd			ld (debug_mark+2),a  
17d5 18 03			jr .pastdmark  
17d7 ..			.dmark: db "CFd"  
17da f1			.pastdmark: pop af  
17db			endm  
# End of macro DMARK
17db						CALLMONITOR 
17db cd aa fd			call debug_vector  
17de				endm  
# End of macro CALLMONITOR
17de					endif 
17de ed b0				ldir 
17e0			 
17e0					; de is past string, move back one and store id 
17e0					 
17e0 1b					dec de 
17e1			 
17e1					; store file id 
17e1			 
17e1 e1					pop hl 
17e2 eb					ex de,hl 
17e3 73					ld (hl), e 
17e4			 
17e4					if DEBUG_FORTH_WORDS 
17e4						DMARK "Cdi" 
17e4 f5				push af  
17e5 3a f9 17			ld a, (.dmark)  
17e8 32 a0 fd			ld (debug_mark),a  
17eb 3a fa 17			ld a, (.dmark+1)  
17ee 32 a1 fd			ld (debug_mark+1),a  
17f1 3a fb 17			ld a, (.dmark+2)  
17f4 32 a2 fd			ld (debug_mark+2),a  
17f7 18 03			jr .pastdmark  
17f9 ..			.dmark: db "Cdi"  
17fc f1			.pastdmark: pop af  
17fd			endm  
# End of macro DMARK
17fd						CALLMONITOR 
17fd cd aa fd			call debug_vector  
1800				endm  
# End of macro CALLMONITOR
1800					endif 
1800					 
1800			.dirnotfound: 
1800 c1					pop bc     
1801 10 85				djnz .diritem 
1803				 
1803			.dirdone:	 
1803			 
1803 3e 00				ld a, 0 
1805 2a a6 f9				ld hl, (store_tmp2) 
1808 77					ld (hl), a 
1809 23					inc hl 
180a 77					ld (hl), a 
180b 23					inc hl 
180c					; push a count of the dir items found 
180c			 
180c			;		ld h, 0 
180c			;		ld l, c 
180c			 
180c c9				ret 
180d			 
180d			endif 
180d			 
180d			 
180d			; Settings 
180d			; Run  
180d			 
180d			 
180d			 
180d			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
180d			;;hd_menu2:   db "        2: Editor",0   
180d			;hd_menu2:   db "        2: Editor       6: Menu",0   
180d			;hd_menu3:   db "        3: Storage",0 
180d			;hd_menu4:   db "0=quit  4: Debug",0 
180d			;hd_don:     db "ON",0 
180d			;hd_doff:     db "OFF",0 
180d			; 
180d			; 
180d			; 
180d			;hardware_diags_old:       
180d			; 
180d			;.diagmenu: 
180d			;	call clear_display 
180d			;	ld a, display_row_1 
180d			;	ld de, hd_menu1 
180d			;	call str_at_display 
180d			; 
180d			;	ld a, display_row_2 
180d			;	ld de, hd_menu2 
180d			;	call str_at_display 
180d			; 
180d			;	ld a, display_row_3 
180d			;	ld de, hd_menu3 
180d			;	call str_at_display 
180d			; 
180d			;	ld a,  display_row_4 
180d			;	ld de, hd_menu4 
180d			;	call str_at_display 
180d			; 
180d			;	; display debug state 
180d			; 
180d			;	ld de, hd_don 
180d			;	ld a, (os_view_disable) 
180d			;	cp 0 
180d			;	jr z, .distog 
180d			;	ld de, hd_doff 
180d			;.distog: ld a, display_row_4+17 
180d			;	call str_at_display 
180d			; 
180d			;	call update_display 
180d			; 
180d			;	call cin_wait 
180d			; 
180d			; 
180d			; 
180d			;	cp '4' 
180d			;	jr nz, .diagn1 
180d			; 
180d			;	; debug toggle 
180d			; 
180d			;	ld a, (os_view_disable) 
180d			;	ld b, '*' 
180d			;	cp 0 
180d			;	jr z, .debtog 
180d			;	ld b, 0 
180d			;.debtog:	 
180d			;	ld a,b 
180d			;	ld (os_view_disable),a 
180d			; 
180d			;.diagn1: cp '0' 
180d			;	 ret z 
180d			; 
180d			;;	cp '1' 
180d			;;       jp z, matrix	 
180d			;;   TODO keyboard matrix test 
180d			; 
180d			;	cp '2' 
180d			;	jp z, .diagedit 
180d			; 
180d			;;	cp '6' 
180d			;;	jp z, .menutest 
180d			;;if ENABLE_BASIC 
180d			;;	cp '6' 
180d			;;	jp z, basic 
180d			;;endif 
180d			 ; 
180d			;	jp .diagmenu 
180d			; 
180d			; 
180d			;	ret 
180d			 
180d			 
180d			.debug_tog: 
180d 21 57 18			ld hl, .menudebug 
1810				 
1810			;	ld a, (os_view_disable) 
1810			;	cp '*' 
1810 3a aa fd			ld a,(debug_vector) 
1813 fe c9			cp $C9   ; RET 
1815 20 04			jr nz,.tdon  
1817 3e 01			ld a, 1 
1819 18 02			jr .tog1 
181b 3e 00		.tdon: ld a, 0 
181d			 
181d			.tog1: 
181d cd db 0d			call menu 
1820 fe 00			cp 0 
1822 c8				ret z 
1823 fe 01			cp 1    ; disable debug 
1825 28 04			jr z, .dtog0 
1827 3e 2a			ld a, '*' 
1829 18 05			jr .dtogset 
182b			.dtog0:  
182b				;ld a, 0 
182b cd 49 19			call bp_on 
182e 18 dd			jr .debug_tog 
1830			.dtogset:  
1830				; ld (os_view_disable), a 
1830 cd 55 19			call bp_off 
1833 c3 0d 18			jp .debug_tog 
1836			 
1836			 
1836			hardware_diags:       
1836			 
1836			.diagm: 
1836 21 49 18			ld hl, .menuitems 
1839 3e 00			ld a, 0 
183b cd db 0d			call menu 
183e			 
183e fe 00		         cp 0 
1840 c8				 ret z 
1841			 
1841 fe 02			cp 2 
1843 ca a2 18			jp z, .diagedit 
1846			 
1846			;	cp '6' 
1846			;	jp z, .menutest 
1846			;if ENABLE_BASIC 
1846			;	cp '6' 
1846			;	jp z, basic 
1846			;endif 
1846			  
1846 c3 36 18			jp .diagm 
1849			 
1849				 
1849 5d 18		.menuitems:   	dw .m1 
184b 68 18				dw .m2 
184d 6f 18				dw .m3 
184f 77 18				dw .m5 
1851 7d 18				dw .m5a 
1853 86 18				dw .m5b 
1855 00 00				dw 0 
1857			 
1857			.menudebug: 
1857 8f 18				dw .m6 
1859 98 18				dw .m7 
185b 00 00				dw 0 
185d			 
185d .. 00		.m1:   db "Key Matrix",0 
1868 .. 00		.m2:   db "Editor",0 
186f .. 00		.m3:   db "Storage",0 
1877 .. 00		.m5:   db "Sound",0 
187d .. 00		.m5a:  db "RAM Test",0 
1886 .. 00		.m5b:  db "LCD Test",0 
188f			 
188f .. 00		.m6:   db "Debug ON",0 
1898 .. 00		.m7:   db "Debug OFF",0 
18a2			 
18a2			; debug editor 
18a2			 
18a2			.diagedit: 
18a2			 
18a2 21 f6 f0			ld hl, scratch 
18a5			;	ld bc, 250 
18a5			;	ldir 
18a5				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
18a5 3e 00			ld a, 0 
18a7 77				ld (hl), a 
18a8 23				inc hl 
18a9 77				ld (hl), a 
18aa 23				inc hl 
18ab 77				ld (hl), a 
18ac			 
18ac cd aa 0d		        call clear_display 
18af cd cd 0d			call update_display 
18b2				;ld a, 1 
18b2				;ld (hardware_diag), a 
18b2			.diloop: 
18b2 3e 00			ld a, display_row_1 
18b4 0e 00			ld c, 0 
18b6 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
18b8 1e 28			ld e, 40 
18ba			 
18ba 21 f6 f0			ld hl, scratch	 
18bd cd 0b 10			call input_str 
18c0			 
18c0 3e 28			ld a, display_row_2 
18c2 11 f6 f0			ld de, scratch 
18c5 cd bd 0d			call str_at_display 
18c8 cd cd 0d			call update_display 
18cb			 
18cb c3 b2 18			jp .diloop 
18ce			 
18ce			 
18ce			; pass word in hl 
18ce			; a has display location 
18ce			display_word_at: 
18ce f5				push af 
18cf e5				push hl 
18d0 7c				ld a,h 
18d1 21 fb f3			ld hl, os_word_scratch 
18d4 cd e7 11			call hexout 
18d7 e1				pop hl 
18d8 7d				ld a,l 
18d9 21 fd f3			ld hl, os_word_scratch+2 
18dc cd e7 11			call hexout 
18df 21 ff f3			ld hl, os_word_scratch+4 
18e2 3e 00			ld a,0 
18e4 77				ld (hl),a 
18e5 11 fb f3			ld de,os_word_scratch 
18e8 f1				pop af 
18e9 cd bd 0d				call str_at_display 
18ec c9				ret 
18ed			 
18ed			display_ptr_state: 
18ed			 
18ed				; to restore afterwards 
18ed			 
18ed d5				push de 
18ee c5				push bc 
18ef e5				push hl 
18f0 f5				push af 
18f1			 
18f1				; for use in here 
18f1			 
18f1			;	push bc 
18f1			;	push de 
18f1			;	push hl 
18f1			;	push af 
18f1			 
18f1 cd aa 0d			call clear_display 
18f4			 
18f4 11 cc 1a			ld de, .ptrstate 
18f7 3e 00			ld a, display_row_1 
18f9 cd bd 0d			call str_at_display 
18fc			 
18fc				; display debug step 
18fc			 
18fc			 
18fc 11 a0 fd			ld de, debug_mark 
18ff 3e 26			ld a, display_row_1+display_cols-2 
1901 cd bd 0d			call str_at_display 
1904			 
1904				; display a 
1904 11 d6 1a			ld de, .ptrcliptr 
1907 3e 28			ld a, display_row_2 
1909 cd bd 0d			call str_at_display 
190c			 
190c f1				pop af 
190d 2a 75 f9			ld hl,(cli_ptr) 
1910 3e 30			ld a, display_row_2+8 
1912 cd ce 18			call display_word_at 
1915			 
1915			 
1915				; display hl 
1915			 
1915			 
1915 11 de 1a			ld de, .ptrclioptr 
1918 3e 32			ld a, display_row_2+10 
191a cd bd 0d			call str_at_display 
191d			; 
191d			;	pop hl 
191d 3e 35			ld a, display_row_2+13 
191f 2a 73 f9			ld hl,(cli_origptr) 
1922 cd ce 18			call display_word_at 
1925			; 
1925			;	 
1925			;	; display de 
1925			 
1925			;	ld de, .regstatede 
1925			;	ld a, display_row_3 
1925			;	call str_at_display 
1925			 
1925			;	pop de 
1925			;	ld h,d 
1925			;	ld l, e 
1925			;	ld a, display_row_3+3 
1925			;	call display_word_at 
1925			 
1925			 
1925				; display bc 
1925			 
1925			;	ld de, .regstatebc 
1925			;	ld a, display_row_3+10 
1925			;	call str_at_display 
1925			 
1925			;	pop bc 
1925			;	ld h,b 
1925			;	ld l, c 
1925			;	ld a, display_row_3+13 
1925			;	call display_word_at 
1925			 
1925			 
1925				; display dsp 
1925			 
1925			;	ld de, .regstatedsp 
1925			;	ld a, display_row_4 
1925			;	call str_at_display 
1925			 
1925				 
1925			;	ld hl,(cli_data_sp) 
1925			;	ld a, display_row_4+4 
1925			;	call display_word_at 
1925			 
1925				; display rsp 
1925			 
1925 11 0d 1b			ld de, .regstatersp 
1928 3e 82			ld a, display_row_4+10 
192a cd bd 0d			call str_at_display 
192d			 
192d				 
192d 2a 27 f9			ld hl,(cli_ret_sp) 
1930 3e 86			ld a, display_row_4+14 
1932 cd ce 18			call display_word_at 
1935			 
1935 cd cd 0d			call update_display 
1938			 
1938 cd ed 0c			call delay1s 
193b cd ed 0c			call delay1s 
193e cd ed 0c			call delay1s 
1941			 
1941			 
1941 cd c0 1f			call next_page_prompt 
1944			 
1944				; restore  
1944			 
1944 f1				pop af 
1945 e1				pop hl 
1946 c1				pop bc 
1947 d1				pop de 
1948 c9				ret 
1949			 
1949			; Update the break point vector so that the user can hook a new routine 
1949			 
1949			bp_on: 
1949 3e c3			ld a, $c3    ; JP 
194b 32 aa fd			ld (debug_vector), a 
194e 21 5b 19			ld hl, break_point_state 
1951 22 ab fd			ld (debug_vector+1), hl 
1954 c9				ret 
1955			 
1955			bp_off: 
1955 3e c9			ld a, $c9    ; RET 
1957 32 aa fd			ld (debug_vector), a 
195a c9				ret 
195b			 
195b			 
195b			break_point_state: 
195b			;	push af 
195b			; 
195b			;	; see if disabled 
195b			; 
195b			;	ld a, (os_view_disable) 
195b			;	cp '*' 
195b			;	jr nz, .bpsgo 
195b			;	pop af 
195b			;	ret 
195b			 
195b			.bpsgo: 
195b			;	pop af 
195b f5				push af 
195c 22 d8 f0			ld (os_view_hl), hl 
195f ed 53 d6 f0		ld (os_view_de), de 
1963 ed 43 d4 f0		ld (os_view_bc), bc 
1967 e5				push hl 
1968 6f				ld l, a 
1969 26 00			ld h, 0 
196b 22 da f0			ld (os_view_af),hl 
196e			 
196e 21 e6 fc				ld hl, display_fb0 
1971 22 01 fb				ld (display_fb_active), hl 
1974 e1				pop hl	 
1975			 
1975 3e 31			ld a, '1' 
1977 fe 2a		.bps1:  cp '*' 
1979 cc 55 19			call z, bp_off 
197c			;	jr nz, .bps1b 
197c			;	ld (os_view_disable),a 
197c fe 31		.bps1b:  cp '1' 
197e 20 14			jr nz, .bps2 
1980			 
1980				; display reg 
1980			 
1980				 
1980			 
1980 3a da f0			ld a, (os_view_af) 
1983 2a d8 f0			ld hl, (os_view_hl) 
1986 ed 5b d6 f0		ld de, (os_view_de) 
198a ed 4b d4 f0		ld bc, (os_view_bc) 
198e cd 28 1a			call display_reg_state 
1991 c3 14 1a			jp .bpschk 
1994			 
1994 fe 32		.bps2:  cp '2' 
1996 20 08			jr nz, .bps3 
1998				 
1998				; display hl 
1998 2a d8 f0			ld hl, (os_view_hl) 
199b cd 12 1b			call display_dump_at_hl 
199e			 
199e 18 74			jr .bpschk 
19a0			 
19a0 fe 33		.bps3:  cp '3' 
19a2 20 08			jr nz, .bps4 
19a4			 
19a4			        ; display de 
19a4 2a d6 f0			ld hl, (os_view_de) 
19a7 cd 12 1b			call display_dump_at_hl 
19aa			 
19aa 18 68			jr .bpschk 
19ac fe 34		.bps4:  cp '4' 
19ae 20 08			jr nz, .bps5 
19b0			 
19b0			        ; display bc 
19b0 2a d4 f0			ld hl, (os_view_bc) 
19b3 cd 12 1b			call display_dump_at_hl 
19b6			 
19b6 18 5c			jr .bpschk 
19b8 fe 35		.bps5:  cp '5' 
19ba 20 08		        jr nz, .bps7 
19bc			 
19bc				; display cur ptr 
19bc 2a 75 f9			ld hl, (cli_ptr) 
19bf cd 12 1b			call display_dump_at_hl 
19c2			 
19c2 18 50			jr .bpschk 
19c4 fe 36		.bps7:  cp '6' 
19c6 20 08			jr nz, .bps8b 
19c8				 
19c8				; display cur orig ptr 
19c8 2a 73 f9			ld hl, (cli_origptr) 
19cb cd 12 1b			call display_dump_at_hl 
19ce 18 44			jr .bpschk 
19d0 fe 37		.bps8b:  cp '7' 
19d2 20 08			jr nz, .bps9 
19d4				 
19d4				; display dsp 
19d4 2a 23 f9			ld hl, (cli_data_sp) 
19d7 cd 12 1b			call display_dump_at_hl 
19da			 
19da 18 38			jr .bpschk 
19dc fe 39		.bps9:  cp '9' 
19de 20 05			jr nz, .bps8c 
19e0				 
19e0				; display SP 
19e0			;	ld hl, sp 
19e0 cd 12 1b			call display_dump_at_hl 
19e3			 
19e3 18 2f			jr .bpschk 
19e5 fe 38		.bps8c:  cp '8' 
19e7 20 08			jr nz, .bps8d 
19e9				 
19e9				; display rsp 
19e9 2a 27 f9			ld hl, (cli_ret_sp) 
19ec cd 12 1b			call display_dump_at_hl 
19ef			 
19ef 18 23			jr .bpschk 
19f1 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
19f3 20 05			jr nz, .bps8 
19f5 cd 7a 1d			call monitor 
19f8			 
19f8 18 1a			jr .bpschk 
19fa fe 30		.bps8:  cp '0' 
19fc 20 16			jr nz, .bpschk 
19fe			 
19fe 21 45 fc				ld hl, display_fb1 
1a01 22 01 fb				ld (display_fb_active), hl 
1a04 cd cd 0d				call update_display 
1a07			 
1a07				;ld a, (os_view_af) 
1a07 2a d8 f0			ld hl, (os_view_hl) 
1a0a ed 5b d6 f0		ld de, (os_view_de) 
1a0e ed 4b d4 f0		ld bc, (os_view_bc) 
1a12 f1				pop af 
1a13 c9				ret 
1a14			 
1a14			.bpschk:   
1a14 cd ed 0c			call delay1s 
1a17 3e 9f		ld a,display_row_4 + display_cols - 1 
1a19 11 be 1f		        ld de, endprg 
1a1c cd bd 0d			call str_at_display 
1a1f cd cd 0d			call update_display 
1a22 cd 4b 77			call cin_wait 
1a25			 
1a25 c3 77 19			jp .bps1 
1a28			 
1a28			 
1a28			display_reg_state: 
1a28			 
1a28				; to restore afterwards 
1a28			 
1a28 d5				push de 
1a29 c5				push bc 
1a2a e5				push hl 
1a2b f5				push af 
1a2c			 
1a2c				; for use in here 
1a2c			 
1a2c c5				push bc 
1a2d d5				push de 
1a2e e5				push hl 
1a2f f5				push af 
1a30			 
1a30 cd aa 0d			call clear_display 
1a33			 
1a33 11 e8 1a			ld de, .regstate 
1a36 3e 00			ld a, display_row_1 
1a38 cd bd 0d			call str_at_display 
1a3b			 
1a3b				; display debug step 
1a3b			 
1a3b			 
1a3b 11 a0 fd			ld de, debug_mark 
1a3e 3e 25			ld a, display_row_1+display_cols-3 
1a40 cd bd 0d			call str_at_display 
1a43			 
1a43				; display a 
1a43 11 04 1b			ld de, .regstatea 
1a46 3e 28			ld a, display_row_2 
1a48 cd bd 0d			call str_at_display 
1a4b			 
1a4b e1				pop hl 
1a4c			;	ld h,0 
1a4c			;	ld l, a 
1a4c 3e 2b			ld a, display_row_2+3 
1a4e cd ce 18			call display_word_at 
1a51			 
1a51			 
1a51				; display hl 
1a51			 
1a51			 
1a51 11 f8 1a			ld de, .regstatehl 
1a54 3e 32			ld a, display_row_2+10 
1a56 cd bd 0d			call str_at_display 
1a59			 
1a59 e1				pop hl 
1a5a 3e 35			ld a, display_row_2+13 
1a5c cd ce 18			call display_word_at 
1a5f			 
1a5f				 
1a5f				; display de 
1a5f			 
1a5f 11 fc 1a			ld de, .regstatede 
1a62 3e 50			ld a, display_row_3 
1a64 cd bd 0d			call str_at_display 
1a67			 
1a67 e1				pop hl 
1a68			;	ld h,d 
1a68			;	ld l, e 
1a68 3e 53			ld a, display_row_3+3 
1a6a cd ce 18			call display_word_at 
1a6d			 
1a6d			 
1a6d				; display bc 
1a6d			 
1a6d 11 00 1b			ld de, .regstatebc 
1a70 3e 5a			ld a, display_row_3+10 
1a72 cd bd 0d			call str_at_display 
1a75			 
1a75 e1				pop hl 
1a76			;	ld h,b 
1a76			;	ld l, c 
1a76 3e 5d			ld a, display_row_3+13 
1a78 cd ce 18			call display_word_at 
1a7b			 
1a7b			 
1a7b				; display dsp 
1a7b			 
1a7b 11 08 1b			ld de, .regstatedsp 
1a7e 3e 78			ld a, display_row_4 
1a80 cd bd 0d			call str_at_display 
1a83			 
1a83				 
1a83 2a 23 f9			ld hl,(cli_data_sp) 
1a86 3e 7c			ld a, display_row_4+4 
1a88 cd ce 18			call display_word_at 
1a8b			 
1a8b				; display rsp 
1a8b			 
1a8b 11 0d 1b			ld de, .regstatersp 
1a8e 3e 82			ld a, display_row_4+10 
1a90 cd bd 0d			call str_at_display 
1a93			 
1a93				 
1a93 2a 27 f9			ld hl,(cli_ret_sp) 
1a96 3e 86			ld a, display_row_4+14 
1a98 cd ce 18			call display_word_at 
1a9b			 
1a9b cd cd 0d			call update_display 
1a9e			 
1a9e			;	call delay1s 
1a9e			;	call delay1s 
1a9e			;	call delay1s 
1a9e			 
1a9e			 
1a9e			;	call next_page_prompt 
1a9e			 
1a9e				; restore  
1a9e			 
1a9e f1				pop af 
1a9f e1				pop hl 
1aa0 c1				pop bc 
1aa1 d1				pop de 
1aa2 c9				ret 
1aa3			 
1aa3 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1ab7 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1acc .. 00		.ptrstate:	db "Ptr State",0 
1ad6 .. 00		.ptrcliptr:     db "cli_ptr",0 
1ade .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1ae8 .. 00		.regstate:	db "Reg State (1/0)",0 
1af8 .. 00		.regstatehl:	db "HL:",0 
1afc .. 00		.regstatede:	db "DE:",0 
1b00 .. 00		.regstatebc:	db "BC:",0 
1b04 .. 00		.regstatea:	db "A :",0 
1b08 .. 00		.regstatedsp:	db "DSP:",0 
1b0d .. 00		.regstatersp:	db "RSP:",0 
1b12			 
1b12			display_dump_at_hl: 
1b12 e5				push hl 
1b13 d5				push de 
1b14 c5				push bc 
1b15 f5				push af 
1b16			 
1b16 22 19 f4			ld (os_cur_ptr),hl	 
1b19 cd aa 0d			call clear_display 
1b1c cd c8 1e			call dumpcont 
1b1f			;	call delay1s 
1b1f			;	call next_page_prompt 
1b1f			 
1b1f			 
1b1f f1				pop af 
1b20 c1				pop bc 
1b21 d1				pop de 
1b22 e1				pop hl 
1b23 c9				ret 
1b24			 
1b24			;if ENABLE_BASIC 
1b24			;	include "nascombasic.asm" 
1b24			;	basic: 
1b24			;	include "forth/FORTH.ASM" 
1b24			;endif 
1b24			 
1b24			; eof 
1b24			 
1b24			 
# End of file firmware_diags.asm
1b24			  
1b24			include "firmware_prompts.asm"  
1b24			; Prompts  
1b24			 
1b24			; boot messages 
1b24			 
1b24 .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1b39 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1b49			 
1b49			 
1b49			; config menus 
1b49			 
1b49			;prom_c3: db "Add Dictionary To File",0 
1b49			 
1b49			if STARTUP_V1 
1b49			prom_c2: db "Select Autoload File",0 
1b49			prom_c2a: db "Disable Autoload File", 0 
1b49			endif 
1b49			 
1b49			if STARTUP_V2 
1b49 .. 00		prom_c2: db "Enable Autoload Files",0 
1b5f .. 00		prom_c2a: db "Disable Autoload Files", 0 
1b76			 
1b76 .. 00		crs_s1: db "*ls-word", 0 
1b7f .. 00		crs_s2: db "*ed-word", 0 
1b88 .. 00		crs_s3: db "*Demo-Games", 0 
1b94 .. 00		crs_s4: db "*Utils", 0 
1b9b .. 00		crs_s5: db "*SPI-Util", 0 
1ba5 .. 00		crs_s6: db "*Key-Constants", 0 
1bb4 .. 00		crs_sound: db "*Sound-Util", 0 
1bc0 .. 00		crs_hw: db "*Hello-World",0 
1bcd			 
1bcd			 
1bcd			 
1bcd			endif 
1bcd			;prom_c2b: db "Select Storage Bank",0 
1bcd .. 00		prom_c4: db "Settings",0 
1bd6 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1bf1 .. 00		prom_m4b:   db "Monitor",0 
1bf9 .. 00		prom_c1: db "Hardware Diags",0 
1c08			 
1c08			 
1c08			if STARTUP_V2 
1c08 .. 00		prom_c9: db "Create Startup Files",0 
1c1d			endif 
1c1d			 
1c1d .. 00		prom_notav:    db "Feature not available",0 
1c33 .. 00		prom_empty:    db "",0 
1c34			 
1c34			; eof 
1c34			 
# End of file firmware_prompts.asm
1c34			  
1c34			; eof  
1c34			  
# End of file firmware.asm
1c34			 
1c34			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1c34			;if BASE_KEV  
1c34			;baseram: equ 08000h 
1c34			;endif 
1c34			 
1c34			;if BASE_SC114 
1c34			;baseram:     equ    endofcode 
1c34			;endif 
1c34			 
1c34			 
1c34			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1c34			 
1c34			; start system 
1c34			 
1c34			coldstart: 
1c34				; set sp 
1c34				; di/ei 
1c34			 
1c34 f3				di 
1c35 31 fd ff			ld sp, tos 
1c38 cd d2 73			call init_nmi 
1c3b			;	ei 
1c3b			 
1c3b				; init spinner 
1c3b 3e 00			ld a,0 
1c3d 32 fb fa			ld (display_active), a 
1c40			 
1c40				; disable breakpoint by default 
1c40			 
1c40				;ld a,'*' 
1c40			;	ld a,' ' 
1c40			;	ld (os_view_disable),a 
1c40			 
1c40				; set break point vector as new break point on or off 
1c40 cd 55 19			call bp_off 
1c43			 
1c43				; init hardware 
1c43			 
1c43				; init keyboard and screen hardware 
1c43			 
1c43 cd 6c 00			call hardware_init 
1c46			 
1c46			 
1c46 cd ed 0c			call delay1s 
1c49 3e 58			ld a, display_row_3+8 
1c4b 11 03 00			ld de, buildtime 
1c4e cd bd 0d			call str_at_display 
1c51 cd cd 0d			call update_display 
1c54			 
1c54 cd ed 0c			call delay1s 
1c57 cd ed 0c			call delay1s 
1c5a cd ed 0c			call delay1s 
1c5d			 
1c5d				; detect if any keys are held down to enable breakpoints at start up 
1c5d			 
1c5d cd 5c 77			call cin  
1c60 fe 00			cp 0 
1c62 28 03			jr z, .nokeys 
1c64			 
1c64				;call hardware_diags 
1c64 cd 52 15			call config 
1c67			 
1c67			;	ld de, .bpen 
1c67			;	ld a, display_row_4 
1c67			;	call str_at_display 
1c67			;	call update_display 
1c67			; 
1c67			;	ld a,0 
1c67			;	ld (os_view_disable),a 
1c67			; 
1c67			;.bpwait: 
1c67			;	call cin 
1c67			;	cp 0 
1c67			;	jr z, .bpwait 
1c67			;	jr .nokeys 
1c67			; 
1c67			; 
1c67			;.bpen:  db "Break points enabled!",0 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			.nokeys: 
1c67			 
1c67			 
1c67				 
1c67			 
1c67			;jp  testkey 
1c67			 
1c67			;call storage_get_block_0 
1c67			; 
1c67			;ld hl, 0 
1c67			;ld de, store_page 
1c67			;call storage_read_block 
1c67			 
1c67				 
1c67			;ld hl, 10 
1c67			;ld de, store_page 
1c67			;call storage_read_block 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			;stop:	nop 
1c67			;	jp stop 
1c67			 
1c67			 
1c67			 
1c67			main: 
1c67 cd aa 0d			call clear_display 
1c6a cd cd 0d			call update_display 
1c6d			 
1c6d			 
1c6d			 
1c6d			;	call testlcd 
1c6d			 
1c6d			 
1c6d			 
1c6d cd 08 24			call forth_init 
1c70			 
1c70			 
1c70			warmstart: 
1c70 cd de 23			call forth_warmstart 
1c73			 
1c73				; run startup word load 
1c73			        ; TODO prevent this running at warmstart after crash  
1c73			 
1c73				if STARTUP_ENABLE 
1c73			 
1c73					if STARTUP_V1 
1c73			 
1c73						if STORAGE_SE 
1c73							call forth_autoload 
1c73						endif 
1c73						call forth_startup 
1c73					endif 
1c73			 
1c73					if STARTUP_V2 
1c73			 
1c73						if STORAGE_SE 
1c73 cd 00 72						call forth_autoload 
1c76						else 
1c76							call forth_startup 
1c76						endif 
1c76			 
1c76			 
1c76					endif 
1c76			 
1c76				endif 
1c76			 
1c76			warmstart_afterauto: 
1c76			 
1c76				; show free memory after boot 
1c76 11 15 1d			ld de, freeram 
1c79 3e 00			ld a, display_row_1 
1c7b cd bd 0d			call str_at_display 
1c7e			 
1c7e				; get current heap start after loading any uwords 
1c7e			 
1c7e				;ld de, (os_last_new_uword) 
1c7e				;ex de, hl 
1c7e			 
1c7e			; Or use heap_size word???? 
1c7e				;ld hl, heap_end 
1c7e				;ld hl, heap_size 
1c7e				;ld de, topusermem 
1c7e				;ld de, heap_start 
1c7e ed 5b 0a 80			ld de, (free_list )      
1c82 21 d1 f0				ld hl, heap_end 
1c85 ed 52			sbc hl, de 
1c87				;push hl 
1c87				;ld a,h	         	 
1c87				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1c87				;call hexout 
1c87			   	;pop hl 
1c87			; 
1c87			;	ld a,l 
1c87			;	ld hl, os_word_scratch+2 
1c87			;	call hexout 
1c87			;	ld hl, os_word_scratch+4 
1c87			;	ld a, 0 
1c87			;	ld (hl),a 
1c87 eb				ex de, hl 
1c88 21 fb f3			ld hl, os_word_scratch 
1c8b cd f3 12			call uitoa_16 
1c8e			 
1c8e			 
1c8e 11 fb f3			ld de, os_word_scratch 
1c91 3e 0d			ld a, display_row_1 + 13 
1c93 cd bd 0d			call str_at_display 
1c96 cd cd 0d			call update_display 
1c99			 
1c99			 
1c99				;call demo 
1c99			 
1c99			 
1c99				; init scratch input area for cli commands 
1c99			 
1c99 21 1d f4			ld hl, os_cli_cmd 
1c9c 3e 00			ld a,0 
1c9e 77				ld (hl),a 
1c9f 23				inc hl 
1ca0 77				ld (hl),a 
1ca1			 
1ca1 3e 00			ld a,0 
1ca3 32 1c f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1ca6			 
1ca6 32 19 f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1ca9 32 1a f4			ld (os_cur_ptr+1),a	 
1cac			 
1cac 32 fb f3			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1caf 32 fc f3			ld (os_word_scratch+1),a	 
1cb2				 
1cb2			 
1cb2				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cb2 21 1d f4			ld hl, os_cli_cmd 
1cb5			 
1cb5 3e 00			ld a, 0		 ; init cli input 
1cb7 77				ld (hl), a 
1cb8 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cba			cli: 
1cba				; show cli prompt 
1cba				;push af 
1cba				;ld a, 0 
1cba				;ld de, prompt 
1cba				;call str_at_display 
1cba			 
1cba				;call update_display 
1cba				;pop af 
1cba				;inc a 
1cba				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1cba			 
1cba			.lastrecall: 
1cba			 
1cba 0e 00			ld c, 0 
1cbc 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1cbe 1e 28			ld e, 40 
1cc0			 
1cc0 21 1d f4			ld hl, os_cli_cmd 
1cc3			 
1cc3				STACKFRAME OFF $fefe $9f9f 
1cc3				if DEBUG_STACK_IMB 
1cc3					if OFF 
1cc3						exx 
1cc3						ld de, $fefe 
1cc3						ld a, d 
1cc3						ld hl, curframe 
1cc3						call hexout 
1cc3						ld a, e 
1cc3						ld hl, curframe+2 
1cc3						call hexout 
1cc3						ld hl, $fefe 
1cc3						push hl 
1cc3						ld hl, $9f9f 
1cc3						push hl 
1cc3						exx 
1cc3					endif 
1cc3				endif 
1cc3			endm 
# End of macro STACKFRAME
1cc3			 
1cc3 cd 0b 10			call input_str 
1cc6			 
1cc6				STACKFRAMECHK OFF $fefe $9f9f 
1cc6				if DEBUG_STACK_IMB 
1cc6					if OFF 
1cc6						exx 
1cc6						ld hl, $9f9f 
1cc6						pop de   ; $9f9f 
1cc6						call cmp16 
1cc6						jr nz, .spnosame 
1cc6						ld hl, $fefe 
1cc6						pop de   ; $fefe 
1cc6						call cmp16 
1cc6						jr z, .spfrsame 
1cc6						.spnosame: call showsperror 
1cc6						.spfrsame: nop 
1cc6						exx 
1cc6					endif 
1cc6				endif 
1cc6			endm 
# End of macro STACKFRAMECHK
1cc6			 
1cc6			 
1cc6				; check to see if last line recall has been requested 
1cc6			 
1cc6			if EDIT_V2 
1cc6 fe 05			cp KEY_UP 
1cc8 20 0f			jr nz, .noexecline 
1cca			 
1cca 11 1d f4			ld de, os_cli_cmd 
1ccd 21 1c f5			ld hl, os_last_cmd 
1cd0 01 ff 00			ld bc, 255 
1cd3 ed b0			ldir 
1cd5 3e 00			ld a, 0 
1cd7 18 e1			jr .lastrecall 
1cd9			endif 
1cd9			 
1cd9			.noexecline: 
1cd9				; no so exec the line		 
1cd9			 
1cd9				; copy input to last command 
1cd9			 
1cd9 21 1d f4			ld hl, os_cli_cmd 
1cdc 11 1c f5			ld de, os_last_cmd 
1cdf 01 ff 00			ld bc, 255 
1ce2 ed b0			ldir 
1ce4			 
1ce4				; wipe current buffer 
1ce4			 
1ce4			;	ld a, 0 
1ce4			;	ld hl, os_cli_cmd 
1ce4			;	ld de, os_cli_cmd+1 
1ce4			;	ld bc, 254 
1ce4			;	ldir 
1ce4				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1ce4			;	call strcpy 
1ce4			;	ld a, 0 
1ce4			;	ld (hl), a 
1ce4			;	inc hl 
1ce4			;	ld (hl), a 
1ce4			;	inc hl 
1ce4			;	ld (hl), a 
1ce4			 
1ce4				; switch frame buffer to program  
1ce4			 
1ce4 21 45 fc				ld hl, display_fb1 
1ce7 22 01 fb				ld (display_fb_active), hl 
1cea			 
1cea			;	nop 
1cea				STACKFRAME ON $fbfe $8f9f 
1cea				if DEBUG_STACK_IMB 
1cea					if ON 
1cea						exx 
1cea						ld de, $fbfe 
1cea						ld a, d 
1cea						ld hl, curframe 
1cea						call hexout 
1cea						ld a, e 
1cea						ld hl, curframe+2 
1cea						call hexout 
1cea						ld hl, $fbfe 
1cea						push hl 
1cea						ld hl, $8f9f 
1cea						push hl 
1cea						exx 
1cea					endif 
1cea				endif 
1cea			endm 
# End of macro STACKFRAME
1cea				; first time into the parser so pass over the current scratch pad 
1cea 21 1d f4			ld hl,os_cli_cmd 
1ced				; tokenise the entered statement(s) in HL 
1ced cd 82 24			call forthparse 
1cf0			        ; exec forth statements in top of return stack 
1cf0 cd be 24			call forthexec 
1cf3				;call forthexec_cleanup 
1cf3			;	call parsenext 
1cf3			 
1cf3				STACKFRAMECHK ON $fbfe $8f9f 
1cf3				if DEBUG_STACK_IMB 
1cf3					if ON 
1cf3						exx 
1cf3						ld hl, $8f9f 
1cf3						pop de   ; $8f9f 
1cf3						call cmp16 
1cf3						jr nz, .spnosame 
1cf3						ld hl, $fbfe 
1cf3						pop de   ; $fbfe 
1cf3						call cmp16 
1cf3						jr z, .spfrsame 
1cf3						.spnosame: call showsperror 
1cf3						.spfrsame: nop 
1cf3						exx 
1cf3					endif 
1cf3				endif 
1cf3			endm 
# End of macro STACKFRAMECHK
1cf3				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1cf3			 
1cf3 3e 78			ld a, display_row_4 
1cf5 11 26 1d			ld de, endprog 
1cf8			 
1cf8 cd cd 0d			call update_display		 
1cfb			 
1cfb cd c0 1f			call next_page_prompt 
1cfe			 
1cfe				; switch frame buffer to cli 
1cfe			 
1cfe 21 e6 fc				ld hl, display_fb0 
1d01 22 01 fb				ld (display_fb_active), hl 
1d04			 
1d04			 
1d04 cd aa 0d		        call clear_display 
1d07 cd cd 0d			call update_display		 
1d0a			 
1d0a 21 1d f4			ld hl, os_cli_cmd 
1d0d			 
1d0d 3e 00			ld a, 0		 ; init cli input 
1d0f 77				ld (hl), a 
1d10			 
1d10				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1d10			 
1d10				; now on last line 
1d10			 
1d10				; TODO scroll screen up 
1d10			 
1d10				; TODO instead just clear screen and place at top of screen 
1d10			 
1d10			;	ld a, 0 
1d10			;	ld (f_cursor_ptr),a 
1d10			 
1d10				;call clear_display 
1d10				;call update_display 
1d10			 
1d10				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d10 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d12 c3 ba 1c			jp cli 
1d15			 
1d15 .. 00		freeram: db "Free bytes: ",0 
1d22 ..			asc: db "1A2F" 
1d26 .. 00		endprog: db "End prog...",0 
1d32			 
1d32			testenter2:   
1d32 21 28 f1			ld hl,scratch+50 
1d35 22 19 f4			ld (os_cur_ptr),hl 
1d38 c3 ba 1c			jp cli 
1d3b			 
1d3b			testenter:  
1d3b			 
1d3b 21 22 1d			ld hl,asc 
1d3e			;	ld a,(hl) 
1d3e			;	call nibble2val 
1d3e cd 3d 12			call get_byte 
1d41			 
1d41			 
1d41			;	ld a,(hl) 
1d41			;	call atohex 
1d41			 
1d41			;	call fourehexhl 
1d41 32 28 f1			ld (scratch+50),a 
1d44			 
1d44			 
1d44			 
1d44 21 24 1d			ld hl,asc+2 
1d47			;	ld a, (hl) 
1d47			;	call nibble2val 
1d47 cd 3d 12			call get_byte 
1d4a			 
1d4a			;	call fourehexhl 
1d4a 32 2a f1			ld (scratch+52),a 
1d4d				 
1d4d 21 28 f1			ld hl,scratch+50 
1d50 22 19 f4			ld (os_cur_ptr),hl 
1d53 c3 ba 1c			jp cli 
1d56			 
1d56			enter:	 
1d56 3a fa f0			ld a,(scratch+4) 
1d59 fe 00			cp 0 
1d5b 28 0c			jr z, .entercont 
1d5d				; no, not a null term line so has an address to work out.... 
1d5d			 
1d5d 21 f8 f0			ld hl,scratch+2 
1d60 cd 9d 12			call get_word_hl 
1d63			 
1d63 22 19 f4			ld (os_cur_ptr),hl	 
1d66 c3 ba 1c			jp cli 
1d69			 
1d69			 
1d69			.entercont:  
1d69			 
1d69 21 f8 f0			ld hl, scratch+2 
1d6c cd 3d 12			call get_byte 
1d6f			 
1d6f 2a 19 f4		   	ld hl,(os_cur_ptr) 
1d72 77					ld (hl),a 
1d73 23					inc hl 
1d74 22 19 f4				ld (os_cur_ptr),hl 
1d77				 
1d77			; get byte  
1d77			 
1d77			 
1d77 c3 ba 1c			jp cli 
1d7a			 
1d7a			 
1d7a			; basic monitor support 
1d7a			 
1d7a			monitor: 
1d7a				;  
1d7a cd aa 0d			call clear_display 
1d7d 3e 00			ld a, 0 
1d7f 11 d3 1d			ld de, .monprompt 
1d82 cd bd 0d			call str_at_display 
1d85 cd cd 0d			call update_display 
1d88			 
1d88				; get a monitor command 
1d88			 
1d88 0e 00			ld c, 0     ; entry at top left 
1d8a 16 64			ld d, 100   ; max buffer size 
1d8c 1e 0f			ld e, 15    ; input scroll area 
1d8e 3e 00			ld a, 0     ; init string 
1d90 21 f4 f2			ld hl, os_input 
1d93 77				ld (hl), a 
1d94 23				inc hl 
1d95 77				ld (hl), a 
1d96 21 f4 f2			ld hl, os_input 
1d99 3e 01			ld a, 1     ; init string 
1d9b cd 0b 10			call input_str 
1d9e			 
1d9e cd aa 0d		        call clear_display 
1da1 cd cd 0d			call update_display		 
1da4			 
1da4 3a f4 f2			ld a, (os_input) 
1da7 cd 3b 13			call toUpper 
1daa fe 48		        cp 'H' 
1dac ca 47 1e		        jp z, .monhelp 
1daf fe 44			cp 'D'		; dump 
1db1 ca 7a 1e			jp z, .mondump	 
1db4 fe 43			cp 'C'		; dump 
1db6 ca 94 1e			jp z, .moncdump	 
1db9 fe 4d			cp 'M'		; dump 
1dbb ca d5 1d			jp z, .moneditstart 
1dbe fe 55			cp 'U'		; dump 
1dc0 ca e1 1d			jp z, .monedit	 
1dc3 fe 47			cp 'G'		; dump 
1dc5 ca 70 1e			jp z, .monjump 
1dc8 fe 42			cp 'B'		; forth breakpoint 
1dca cc 5b 19			call z, break_point_state 
1dcd fe 51			cp 'Q'		; dump 
1dcf c8				ret z	 
1dd0			 
1dd0			 
1dd0				; TODO "S" to access symbol by name and not need the address 
1dd0				; TODO "F" to find a string in memory 
1dd0			 
1dd0 c3 7a 1d			jp monitor 
1dd3			 
1dd3 .. 00		.monprompt: db ">", 0 
1dd5			 
1dd5			.moneditstart: 
1dd5				; get starting address 
1dd5			 
1dd5 21 f6 f2			ld hl,os_input+2 
1dd8 cd 9d 12			call get_word_hl 
1ddb			 
1ddb 22 19 f4			ld (os_cur_ptr),hl	 
1dde			 
1dde c3 7a 1d			jp monitor 
1de1			 
1de1			.monedit: 
1de1				; get byte to load 
1de1			 
1de1 21 f6 f2			ld hl,os_input+2 
1de4 cd 3d 12			call get_byte 
1de7			 
1de7				; get address to update 
1de7 2a 19 f4			ld hl, (os_cur_ptr) 
1dea			 
1dea				; update byte 
1dea			 
1dea 77				ld (hl), a 
1deb			 
1deb				; move to next address and save it 
1deb			 
1deb 23				inc hl 
1dec 22 19 f4			ld (os_cur_ptr),hl	 
1def			 
1def c3 7a 1d			jp monitor 
1df2			 
1df2			 
1df2 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1e06 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1e22 .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1e40 .. 00		.monhelptext4:  db "Q-Quit",0 
1e47			        
1e47			.monhelp: 
1e47 3e 00			ld a, display_row_1 
1e49 11 f2 1d		        ld de, .monhelptext1 
1e4c			 
1e4c cd bd 0d			call str_at_display 
1e4f 3e 28			ld a, display_row_2 
1e51 11 06 1e		        ld de, .monhelptext2 
1e54					 
1e54 cd bd 0d			call str_at_display 
1e57 3e 50			ld a, display_row_3 
1e59 11 22 1e		        ld de, .monhelptext3 
1e5c					 
1e5c cd bd 0d			call str_at_display 
1e5f 3e 78			ld a, display_row_4 
1e61 11 40 1e		        ld de, .monhelptext4 
1e64 cd bd 0d			call str_at_display 
1e67			 
1e67 cd cd 0d			call update_display		 
1e6a			 
1e6a cd c0 1f			call next_page_prompt 
1e6d c3 7a 1d			jp monitor 
1e70			 
1e70			.monjump:    
1e70 21 f6 f2			ld hl,os_input+2 
1e73 cd 9d 12			call get_word_hl 
1e76			 
1e76 e9				jp (hl) 
1e77 c3 7a 1d			jp monitor 
1e7a			 
1e7a			.mondump:    
1e7a 21 f6 f2			ld hl,os_input+2 
1e7d cd 9d 12			call get_word_hl 
1e80			 
1e80 22 19 f4			ld (os_cur_ptr),hl	 
1e83 cd c8 1e			call dumpcont 
1e86 3e 78			ld a, display_row_4 
1e88 11 26 1d			ld de, endprog 
1e8b			 
1e8b cd cd 0d			call update_display		 
1e8e			 
1e8e cd c0 1f			call next_page_prompt 
1e91 c3 7a 1d			jp monitor 
1e94			.moncdump: 
1e94 cd c8 1e			call dumpcont 
1e97 3e 78			ld a, display_row_4 
1e99 11 26 1d			ld de, endprog 
1e9c			 
1e9c cd cd 0d			call update_display		 
1e9f			 
1e9f cd c0 1f			call next_page_prompt 
1ea2 c3 7a 1d			jp monitor 
1ea5			 
1ea5			 
1ea5			; TODO symbol access  
1ea5			 
1ea5			.symbols:     ;; A list of symbols that can be called up  
1ea5 e6 fc			dw display_fb0 
1ea7 .. 00			db "fb0",0  
1eab af f9		     	dw store_page 
1ead .. 00			db "store_page",0 
1eb8			 
1eb8			 
1eb8			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1eb8			 
1eb8 3a f7 f0			ld a,(scratch+1) 
1ebb fe 00			cp 0 
1ebd 28 09			jr z, dumpcont 
1ebf			 
1ebf				; no, not a null term line so has an address to work out.... 
1ebf			 
1ebf 21 f8 f0			ld hl,scratch+2 
1ec2 cd 9d 12			call get_word_hl 
1ec5			 
1ec5 22 19 f4			ld (os_cur_ptr),hl	 
1ec8			 
1ec8			 
1ec8			 
1ec8			dumpcont: 
1ec8			 
1ec8				; dump bytes at ptr 
1ec8			 
1ec8			 
1ec8 3e 00			ld a, display_row_1 
1eca 2a 01 fb			ld hl, (display_fb_active) 
1ecd cd de 0f			call addatohl 
1ed0 cd f8 1e			call .dumpbyterow 
1ed3			 
1ed3 3e 28			ld a, display_row_2 
1ed5 2a 01 fb			ld hl, (display_fb_active) 
1ed8 cd de 0f			call addatohl 
1edb cd f8 1e			call .dumpbyterow 
1ede			 
1ede			 
1ede 3e 50			ld a, display_row_3 
1ee0 2a 01 fb			ld hl, (display_fb_active) 
1ee3 cd de 0f			call addatohl 
1ee6 cd f8 1e			call .dumpbyterow 
1ee9			 
1ee9 3e 78			ld a, display_row_4 
1eeb 2a 01 fb			ld hl, (display_fb_active) 
1eee cd de 0f			call addatohl 
1ef1 cd f8 1e			call .dumpbyterow 
1ef4			 
1ef4 cd cd 0d			call update_display 
1ef7			;		jp cli 
1ef7 c9				ret 
1ef8			 
1ef8			.dumpbyterow: 
1ef8			 
1ef8				;push af 
1ef8			 
1ef8 e5				push hl 
1ef9			 
1ef9				; calc where to poke the ascii 
1ef9			if display_cols == 20 
1ef9				ld a, 16 
1ef9			else 
1ef9 3e 1f			ld a, 31 
1efb			endif 
1efb			 
1efb cd de 0f			call addatohl 
1efe 22 fb f3			ld (os_word_scratch),hl  		; save pos for later 
1f01			 
1f01			 
1f01			; display decoding address 
1f01 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f04			 
1f04 7c				ld a,h 
1f05 e1				pop hl 
1f06 e5				push hl 
1f07			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1f07 cd e7 11			call hexout 
1f0a 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f0d			 
1f0d 7d				ld a,l 
1f0e e1				pop hl 
1f0f 23				inc hl 
1f10 23				inc hl 
1f11 e5				push hl 
1f12			;	ld hl, os_word_scratch+2 
1f12 cd e7 11			call hexout 
1f15 e1				pop hl 
1f16 23				inc hl 
1f17 23				inc hl 
1f18				;ld hl, os_word_scratch+4 
1f18 3e 3a			ld a, ':' 
1f1a 77				ld (hl),a 
1f1b 23				inc hl 
1f1c				;ld a, 0 
1f1c				;ld (hl),a 
1f1c				;ld de, os_word_scratch 
1f1c				;pop af 
1f1c				;push af 
1f1c			;		ld a, display_row_2 
1f1c			;		call str_at_display 
1f1c			;		call update_display 
1f1c			 
1f1c			 
1f1c			;pop af 
1f1c			;	add 5 
1f1c			 
1f1c			if display_cols == 20 
1f1c				ld b, 4 
1f1c			else 
1f1c 06 08			ld b, 8 
1f1e			endif	 
1f1e			 
1f1e			.dumpbyte: 
1f1e c5				push bc 
1f1f e5				push hl 
1f20			 
1f20			 
1f20 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f23 7e					ld a,(hl) 
1f24			 
1f24					; poke the ascii to display 
1f24 2a fb f3				ld hl,(os_word_scratch) 
1f27 77					ld (hl),a 
1f28 23					inc hl 
1f29 22 fb f3				ld (os_word_scratch),hl 
1f2c			 
1f2c					 
1f2c			 
1f2c			 
1f2c e1					pop hl 
1f2d e5					push hl 
1f2e			 
1f2e cd e7 11				call hexout 
1f31			 
1f31					 
1f31 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f34 23				inc hl 
1f35 22 19 f4		   	ld (os_cur_ptr),hl 
1f38			 
1f38 e1					pop hl 
1f39 23					inc hl 
1f3a 23					inc hl 
1f3b 23					inc hl 
1f3c			 
1f3c			 
1f3c			 
1f3c					;ld a,0 
1f3c					;ld (os_word_scratch+2),a 
1f3c					;pop af 
1f3c					;push af 
1f3c			 
1f3c					;ld de, os_word_scratch 
1f3c					;call str_at_display 
1f3c			;		call update_display 
1f3c			;		pop af 
1f3c c1					pop bc 
1f3d c6 03				add 3 
1f3f 10 dd			djnz .dumpbyte 
1f41			 
1f41				 
1f41			 
1f41 c9				ret 
1f42			 
1f42			jump:	 
1f42			 
1f42 21 f8 f0			ld hl,scratch+2 
1f45 cd 9d 12			call get_word_hl 
1f48				;ld hl,(scratch+2) 
1f48				;call fourehexhl 
1f48			 
1f48 22 19 f4			ld (os_cur_ptr),hl	 
1f4b			 
1f4b e9				jp (hl) 
1f4c			 
1f4c			 
1f4c			 
1f4c			; TODO implement a basic monitor mode to start with 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			; testing and demo code during development 
1f4c			 
1f4c			 
1f4c .. 00		str1: db "Enter some text...",0 
1f5f .. 00		clear: db "                    ",0 
1f74			 
1f74			demo: 
1f74			 
1f74			 
1f74			 
1f74			;	call update_display 
1f74			 
1f74				; init scratch input area for testing 
1f74 21 f6 f0			ld hl, scratch	 
1f77 3e 00			ld a,0 
1f79 77				ld (hl),a 
1f7a			 
1f7a			 
1f7a 3e 28		            LD   A, display_row_2 
1f7c			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f7c 11 4c 1f		            LD   DE, str1 
1f7f cd bd 0d			call str_at_display 
1f82			 
1f82			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f82			cloop:	 
1f82 3e 50		            LD   A, display_row_3 
1f84			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f84 11 5f 1f		            LD   DE, clear 
1f87			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1f87 cd bd 0d				call str_at_display 
1f8a 3e 78			ld a, display_row_4 
1f8c 11 bc 1f			ld de, prompt 
1f8f			 
1f8f cd bd 0d				call str_at_display 
1f92 cd cd 0d			call update_display 
1f95			 
1f95 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1f97 16 0a			ld d, 10 
1f99 21 f6 f0			ld hl, scratch	 
1f9c cd 0b 10			call input_str 
1f9f			 
1f9f			;	call clear_display 
1f9f			;'	call update_display 
1f9f			 
1f9f 3e 00		            LD   A, display_row_1 
1fa1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa1 11 5f 1f		            LD   DE, clear 
1fa4 cd bd 0d				call str_at_display 
1fa7			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fa7 3e 00		            LD   A, display_row_1 
1fa9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa9 11 f6 f0		            LD   DE, scratch 
1fac			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fac cd bd 0d				call str_at_display 
1faf cd cd 0d			call update_display 
1fb2			 
1fb2 3e 00				ld a,0 
1fb4 21 f6 f0			ld hl, scratch 
1fb7 77				ld (hl),a 
1fb8			 
1fb8 00				nop 
1fb9 c3 82 1f			jp cloop 
1fbc			 
1fbc			 
1fbc			 
1fbc			; OS Prompt 
1fbc			 
1fbc .. 00		prompt: db ">",0 
1fbe .. 00		endprg: db "?",0 
1fc0			 
1fc0			 
1fc0			; handy next page prompt 
1fc0			next_page_prompt: 
1fc0 e5				push hl 
1fc1 d5				push de 
1fc2 f5				push af 
1fc3 c5				push bc 
1fc4			 
1fc4 3e 9f			ld a,display_row_4 + display_cols - 1 
1fc6 11 be 1f		        ld de, endprg 
1fc9 cd bd 0d			call str_at_display 
1fcc cd cd 0d			call update_display 
1fcf cd 4b 77			call cin_wait 
1fd2 c1				pop bc 
1fd3 f1				pop af 
1fd4 d1				pop de 
1fd5 e1				pop hl 
1fd6			 
1fd6			 
1fd6 c9				ret 
1fd7			 
1fd7			 
1fd7			; forth parser 
1fd7			 
1fd7			; My forth kernel 
1fd7			include "forth_kernel.asm" 
1fd7			; 
1fd7			; kernel to the forth OS 
1fd7			 
1fd7			DS_TYPE_STR: equ 1     ; string type 
1fd7			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1fd7			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1fd7			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1fd7			 
1fd7			FORTH_PARSEV1: equ 0 
1fd7			FORTH_PARSEV2: equ 0 
1fd7			FORTH_PARSEV3: equ 0 
1fd7			FORTH_PARSEV4: equ 0 
1fd7			FORTH_PARSEV5: equ 0 
1fd7			FORTH_PARSEV6: equ 1 
1fd7			 
1fd7			;if FORTH_PARSEV5 
1fd7			;	FORTH_END_BUFFER: equ 0 
1fd7			;else 
1fd7			FORTH_END_BUFFER: equ 127 
1fd7			;endif 
1fd7			 
1fd7			FORTH_TRUE: equ 1 
1fd7			FORTH_FALSE: equ 0 
1fd7			 
1fd7			if FORTH_PARSEV4 
1fd7			include "forth_stackops.asm" 
1fd7			endif 
1fd7			 
1fd7			if FORTH_PARSEV5 
1fd7			include "forth_stackopsv5.asm" 
1fd7			endif 
1fd7			 
1fd7			if FORTH_PARSEV6 
1fd7			include "forth_stackopsv5.asm" 
1fd7			 
1fd7			; Stack operations for v5 parser on wards 
1fd7			; * DATA stack 
1fd7			; * LOOP stack 
1fd7			; * RETURN stack 
1fd7			 
1fd7			 
1fd7			 
1fd7			FORTH_CHK_DSP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_data_sp) 
1fd7				ld de, cli_data_stack 
1fd7				call cmp16 
1fd7				jp c, fault_dsp_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			FORTH_CHK_RSP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_ret_sp) 
1fd7				ld de, cli_ret_stack 
1fd7				call cmp16 
1fd7				jp c, fault_rsp_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			FORTH_CHK_LOOP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_loop_sp) 
1fd7				ld de, cli_loop_stack 
1fd7				call cmp16 
1fd7				jp c, fault_loop_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			FORTH_ERR_TOS_NOTSTR: macro 
1fd7				; TOSO might need more for checks when used 
1fd7				push af 
1fd7				ld a,(hl) 
1fd7				cp DS_TYPE_STR 
1fd7				jp nz, type_faultn   
1fd7				pop af 
1fd7				endm 
1fd7			 
1fd7			FORTH_ERR_TOS_NOTNUM: macro 
1fd7				push af 
1fd7				ld a,(hl) 
1fd7				cp DS_TYPE_INUM 
1fd7				jp nz, type_faultn   
1fd7				pop af 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			; increase data stack pointer and save hl to it 
1fd7				 
1fd7			FORTH_DSP_NEXT: macro 
1fd7				call macro_forth_dsp_next 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			macro_forth_dsp_next: 
1fd7				if DEBUG_FORTH_STACK_GUARD 
1fd7 cd ef 6f				call check_stacks 
1fda				endif 
1fda e5				push hl 
1fdb d5				push de 
1fdc eb				ex de,hl 
1fdd 2a 23 f9			ld hl,(cli_data_sp) 
1fe0 23				inc hl 
1fe1 23				inc hl 
1fe2			 
1fe2			; PARSEV5 
1fe2 23				inc hl 
1fe3 22 23 f9			ld (cli_data_sp),hl 
1fe6 73				ld (hl), e 
1fe7 23				inc hl 
1fe8 72				ld (hl), d 
1fe9 d1				pop de 
1fea e1				pop hl 
1feb				if DEBUG_FORTH_STACK_GUARD 
1feb cd ef 6f				call check_stacks 
1fee				endif 
1fee c9				ret 
1fef			 
1fef			 
1fef			; increase ret stack pointer and save hl to it 
1fef				 
1fef			FORTH_RSP_NEXT: macro 
1fef				call macro_forth_rsp_next 
1fef				endm 
1fef			 
1fef			macro_forth_rsp_next: 
1fef				if DEBUG_FORTH_STACK_GUARD 
1fef cd ef 6f				call check_stacks 
1ff2				endif 
1ff2 e5				push hl 
1ff3 d5				push de 
1ff4 eb				ex de,hl 
1ff5 2a 27 f9			ld hl,(cli_ret_sp) 
1ff8 23				inc hl 
1ff9 23				inc hl 
1ffa 22 27 f9			ld (cli_ret_sp),hl 
1ffd 73				ld (hl), e 
1ffe 23				inc hl 
1fff 72				ld (hl), d 
2000 d1				pop de 
2001 e1				pop hl 
2002				if DEBUG_FORTH_STACK_GUARD 
2002 cd ef 6f				call check_stacks 
2005				endif 
2005 c9				ret 
2006			 
2006			; get current ret stack pointer and save to hl  
2006				 
2006			FORTH_RSP_TOS: macro 
2006				call macro_forth_rsp_tos 
2006				endm 
2006			 
2006			macro_forth_rsp_tos: 
2006				;push de 
2006 2a 27 f9			ld hl,(cli_ret_sp) 
2009 cd 41 20			call loadhlptrtohl 
200c				;ld e, (hl) 
200c				;inc hl 
200c				;ld d, (hl) 
200c				;ex de, hl 
200c					if DEBUG_FORTH_WORDS 
200c			;			DMARK "RST" 
200c						CALLMONITOR 
200c cd aa fd			call debug_vector  
200f				endm  
# End of macro CALLMONITOR
200f					endif 
200f				;pop de 
200f c9				ret 
2010			 
2010			; pop ret stack pointer 
2010				 
2010			FORTH_RSP_POP: macro 
2010				call macro_forth_rsp_pop 
2010				endm 
2010			 
2010			 
2010			macro_forth_rsp_pop: 
2010				if DEBUG_FORTH_STACK_GUARD 
2010			;		DMARK "RPP" 
2010 cd ef 6f				call check_stacks 
2013					FORTH_CHK_RSP_UNDER 
2013 e5				push hl 
2014 d5				push de 
2015 2a 27 f9			ld hl,(cli_ret_sp) 
2018 11 e1 f8			ld de, cli_ret_stack 
201b cd fc 0f			call cmp16 
201e da 06 71			jp c, fault_rsp_under 
2021 d1				pop de 
2022 e1				pop hl 
2023				endm 
# End of macro FORTH_CHK_RSP_UNDER
2023				endif 
2023 e5				push hl 
2024 2a 27 f9			ld hl,(cli_ret_sp) 
2027			 
2027			 
2027				if FORTH_ENABLE_FREE 
2027			 
2027					; get pointer 
2027			 
2027					push de 
2027					push hl 
2027			 
2027					ld e, (hl) 
2027					inc hl 
2027					ld d, (hl) 
2027			 
2027					ex de, hl 
2027					call free 
2027			 
2027					pop hl 
2027					pop de 
2027			 
2027			 
2027				endif 
2027			 
2027			 
2027 2b				dec hl 
2028 2b				dec hl 
2029 22 27 f9			ld (cli_ret_sp), hl 
202c				; do stack underflow checks 
202c e1				pop hl 
202d				if DEBUG_FORTH_STACK_GUARD 
202d cd ef 6f				call check_stacks 
2030					FORTH_CHK_RSP_UNDER 
2030 e5				push hl 
2031 d5				push de 
2032 2a 27 f9			ld hl,(cli_ret_sp) 
2035 11 e1 f8			ld de, cli_ret_stack 
2038 cd fc 0f			call cmp16 
203b da 06 71			jp c, fault_rsp_under 
203e d1				pop de 
203f e1				pop hl 
2040				endm 
# End of macro FORTH_CHK_RSP_UNDER
2040				endif 
2040 c9				ret 
2041			 
2041			 
2041			 
2041			; routine to load word pointed to by hl into hl 
2041			 
2041			loadhlptrtohl: 
2041			 
2041 d5				push de 
2042 5e				ld e, (hl) 
2043 23				inc hl 
2044 56				ld d, (hl) 
2045 eb				ex de, hl 
2046 d1				pop de 
2047			 
2047 c9				ret 
2048			 
2048			 
2048			 
2048			 
2048			 
2048			; push a number held in HL onto the data stack 
2048			; entry point for pushing a value when already in hl used in function above 
2048			 
2048			forth_push_numhl: 
2048			 
2048 e5				push hl    ; save value to push 
2049			 
2049			if DEBUG_FORTH_PUSH 
2049				; see if disabled 
2049			 
2049			 
2049 f5				push af 
204a 3a aa fd			ld a,(debug_vector) 
204d fe c9			cp $c9   ; ret 
204f			;	ld a, (os_view_disable) 
204f			;	cp '*' 
204f 28 34			jr z, .pskip2 
2051 e5				push hl 
2052 e5			push hl 
2053 cd aa 0d			call clear_display 
2056 e1			pop hl 
2057 7c				ld a,h 
2058 21 fb f3			ld hl, os_word_scratch 
205b cd e7 11			call hexout 
205e e1				pop hl 
205f 7d				ld a,l 
2060 21 fd f3			ld hl, os_word_scratch+2 
2063 cd e7 11			call hexout 
2066			 
2066 21 ff f3			ld hl, os_word_scratch+4 
2069 3e 00			ld a,0 
206b 77				ld (hl),a 
206c 11 fb f3			ld de,os_word_scratch 
206f 3e 28				ld a, display_row_2 
2071 cd bd 0d				call str_at_display 
2074 11 e8 61			ld de, .push_num 
2077 3e 00			ld a, display_row_1 
2079			 
2079 cd bd 0d				call str_at_display 
207c			 
207c			 
207c cd cd 0d			call update_display 
207f cd ed 0c			call delay1s 
2082 cd ed 0c			call delay1s 
2085			.pskip2:  
2085			 
2085 f1				pop af 
2086			endif	 
2086			 
2086			 
2086				FORTH_DSP_NEXT 
2086 cd d7 1f			call macro_forth_dsp_next 
2089				endm 
# End of macro FORTH_DSP_NEXT
2089			 
2089 2a 23 f9			ld hl, (cli_data_sp) 
208c			 
208c				; save item type 
208c 3e 02			ld a,  DS_TYPE_INUM 
208e 77				ld (hl), a 
208f 23				inc hl 
2090			 
2090				; get word off stack 
2090 d1				pop de 
2091 7b				ld a,e 
2092 77				ld (hl), a 
2093 23				inc hl 
2094 7a				ld a,d 
2095 77				ld (hl), a 
2096			 
2096			if DEBUG_FORTH_PUSH 
2096 2b				dec hl 
2097 2b				dec hl 
2098 2b				dec hl 
2099						DMARK "PH5" 
2099 f5				push af  
209a 3a ae 20			ld a, (.dmark)  
209d 32 a0 fd			ld (debug_mark),a  
20a0 3a af 20			ld a, (.dmark+1)  
20a3 32 a1 fd			ld (debug_mark+1),a  
20a6 3a b0 20			ld a, (.dmark+2)  
20a9 32 a2 fd			ld (debug_mark+2),a  
20ac 18 03			jr .pastdmark  
20ae ..			.dmark: db "PH5"  
20b1 f1			.pastdmark: pop af  
20b2			endm  
# End of macro DMARK
20b2				CALLMONITOR 
20b2 cd aa fd			call debug_vector  
20b5				endm  
# End of macro CALLMONITOR
20b5			endif	 
20b5			 
20b5 c9				ret 
20b6			 
20b6			 
20b6			; Push a string to stack pointed to by hl 
20b6			 
20b6			forth_push_str: 
20b6			 
20b6			if DEBUG_FORTH_PUSH 
20b6						DMARK "PSQ" 
20b6 f5				push af  
20b7 3a cb 20			ld a, (.dmark)  
20ba 32 a0 fd			ld (debug_mark),a  
20bd 3a cc 20			ld a, (.dmark+1)  
20c0 32 a1 fd			ld (debug_mark+1),a  
20c3 3a cd 20			ld a, (.dmark+2)  
20c6 32 a2 fd			ld (debug_mark+2),a  
20c9 18 03			jr .pastdmark  
20cb ..			.dmark: db "PSQ"  
20ce f1			.pastdmark: pop af  
20cf			endm  
# End of macro DMARK
20cf				CALLMONITOR 
20cf cd aa fd			call debug_vector  
20d2				endm  
# End of macro CALLMONITOR
20d2			endif	 
20d2			 
20d2			 
20d2			    
20d2 e5				push hl 
20d3 e5				push hl 
20d4			 
20d4			;	ld a, 0   ; find end of string 
20d4 cd 44 13			call strlenz 
20d7			if DEBUG_FORTH_PUSH 
20d7						DMARK "PQ2" 
20d7 f5				push af  
20d8 3a ec 20			ld a, (.dmark)  
20db 32 a0 fd			ld (debug_mark),a  
20de 3a ed 20			ld a, (.dmark+1)  
20e1 32 a1 fd			ld (debug_mark+1),a  
20e4 3a ee 20			ld a, (.dmark+2)  
20e7 32 a2 fd			ld (debug_mark+2),a  
20ea 18 03			jr .pastdmark  
20ec ..			.dmark: db "PQ2"  
20ef f1			.pastdmark: pop af  
20f0			endm  
# End of macro DMARK
20f0				CALLMONITOR 
20f0 cd aa fd			call debug_vector  
20f3				endm  
# End of macro CALLMONITOR
20f3			endif	 
20f3 eb				ex de, hl 
20f4 e1				pop hl   ; get ptr to start of string 
20f5			if DEBUG_FORTH_PUSH 
20f5						DMARK "PQ3" 
20f5 f5				push af  
20f6 3a 0a 21			ld a, (.dmark)  
20f9 32 a0 fd			ld (debug_mark),a  
20fc 3a 0b 21			ld a, (.dmark+1)  
20ff 32 a1 fd			ld (debug_mark+1),a  
2102 3a 0c 21			ld a, (.dmark+2)  
2105 32 a2 fd			ld (debug_mark+2),a  
2108 18 03			jr .pastdmark  
210a ..			.dmark: db "PQ3"  
210d f1			.pastdmark: pop af  
210e			endm  
# End of macro DMARK
210e				CALLMONITOR 
210e cd aa fd			call debug_vector  
2111				endm  
# End of macro CALLMONITOR
2111			endif	 
2111 19				add hl,de 
2112			if DEBUG_FORTH_PUSH 
2112						DMARK "PQE" 
2112 f5				push af  
2113 3a 27 21			ld a, (.dmark)  
2116 32 a0 fd			ld (debug_mark),a  
2119 3a 28 21			ld a, (.dmark+1)  
211c 32 a1 fd			ld (debug_mark+1),a  
211f 3a 29 21			ld a, (.dmark+2)  
2122 32 a2 fd			ld (debug_mark+2),a  
2125 18 03			jr .pastdmark  
2127 ..			.dmark: db "PQE"  
212a f1			.pastdmark: pop af  
212b			endm  
# End of macro DMARK
212b				CALLMONITOR 
212b cd aa fd			call debug_vector  
212e				endm  
# End of macro CALLMONITOR
212e			endif	 
212e			 
212e 2b				dec hl    ; see if there is an optional trailing double quote 
212f 7e				ld a,(hl) 
2130 fe 22			cp '"' 
2132 20 03			jr nz, .strnoq 
2134 3e 00			ld a, 0      ; get rid of double quote 
2136 77				ld (hl), a 
2137 23			.strnoq: inc hl 
2138			 
2138 3e 00			ld a, 0 
213a 77				ld (hl), a     ; add null term and get rid of trailing double quote 
213b			 
213b 13				inc de ; add one for the type string 
213c 13				inc de ; add one for null term??? 
213d			 
213d				; tos is get string pointer again 
213d				; de contains space to allocate 
213d				 
213d d5				push de 
213e			 
213e eb				ex de, hl 
213f			 
213f				;push af 
213f			 
213f			if DEBUG_FORTH_PUSH 
213f						DMARK "PHm" 
213f f5				push af  
2140 3a 54 21			ld a, (.dmark)  
2143 32 a0 fd			ld (debug_mark),a  
2146 3a 55 21			ld a, (.dmark+1)  
2149 32 a1 fd			ld (debug_mark+1),a  
214c 3a 56 21			ld a, (.dmark+2)  
214f 32 a2 fd			ld (debug_mark+2),a  
2152 18 03			jr .pastdmark  
2154 ..			.dmark: db "PHm"  
2157 f1			.pastdmark: pop af  
2158			endm  
# End of macro DMARK
2158				CALLMONITOR 
2158 cd aa fd			call debug_vector  
215b				endm  
# End of macro CALLMONITOR
215b			endif	 
215b cd b9 13			call malloc	; on ret hl now contains allocated memory 
215e				if DEBUG_FORTH_MALLOC_GUARD 
215e cc 40 62				call z,malloc_error 
2161				endif 
2161			 
2161				 
2161 c1				pop bc    ; get length 
2162 d1				pop de   ;  get string start    
2163			 
2163				; hl has destination from malloc 
2163			 
2163 eb				ex de, hl    ; prep for ldir 
2164			 
2164 d5				push de   ; save malloc area for DSP later 
2165				;push hl   ; save malloc area for DSP later 
2165			 
2165			if DEBUG_FORTH_PUSH 
2165						DMARK "PHc" 
2165 f5				push af  
2166 3a 7a 21			ld a, (.dmark)  
2169 32 a0 fd			ld (debug_mark),a  
216c 3a 7b 21			ld a, (.dmark+1)  
216f 32 a1 fd			ld (debug_mark+1),a  
2172 3a 7c 21			ld a, (.dmark+2)  
2175 32 a2 fd			ld (debug_mark+2),a  
2178 18 03			jr .pastdmark  
217a ..			.dmark: db "PHc"  
217d f1			.pastdmark: pop af  
217e			endm  
# End of macro DMARK
217e				CALLMONITOR 
217e cd aa fd			call debug_vector  
2181				endm  
# End of macro CALLMONITOR
2181			endif	 
2181			 
2181			 
2181 ed b0			ldir 
2183			 
2183			 
2183				; push malloc to data stack     macro?????  
2183			 
2183				FORTH_DSP_NEXT 
2183 cd d7 1f			call macro_forth_dsp_next 
2186				endm 
# End of macro FORTH_DSP_NEXT
2186			 
2186				; save value and type 
2186			 
2186 2a 23 f9			ld hl, (cli_data_sp) 
2189			 
2189				; save item type 
2189 3e 01			ld a,  DS_TYPE_STR 
218b 77				ld (hl), a 
218c 23				inc hl 
218d			 
218d				; get malloc word off stack 
218d d1				pop de 
218e 73				ld (hl), e 
218f 23				inc hl 
2190 72				ld (hl), d 
2191			 
2191			 
2191			 
2191			if DEBUG_FORTH_PUSH 
2191 2a 23 f9			ld hl, (cli_data_sp) 
2194						DMARK "PHS" 
2194 f5				push af  
2195 3a a9 21			ld a, (.dmark)  
2198 32 a0 fd			ld (debug_mark),a  
219b 3a aa 21			ld a, (.dmark+1)  
219e 32 a1 fd			ld (debug_mark+1),a  
21a1 3a ab 21			ld a, (.dmark+2)  
21a4 32 a2 fd			ld (debug_mark+2),a  
21a7 18 03			jr .pastdmark  
21a9 ..			.dmark: db "PHS"  
21ac f1			.pastdmark: pop af  
21ad			endm  
# End of macro DMARK
21ad				CALLMONITOR 
21ad cd aa fd			call debug_vector  
21b0				endm  
# End of macro CALLMONITOR
21b0			;	ex de,hl 
21b0			endif	 
21b0				; in case of spaces, skip the ptr past the copied string 
21b0				;pop af 
21b0				;ld (cli_origptr),hl 
21b0			 
21b0 c9				ret 
21b1			 
21b1			 
21b1			 
21b1			; TODO ascii push input onto stack given hl to start of input 
21b1			 
21b1			; identify type 
21b1			; if starts with a " then a string 
21b1			; otherwise it is a number 
21b1			;  
21b1			; if a string 
21b1			;     scan for ending " to get length of string to malloc for + 1 
21b1			;     malloc 
21b1			;     put pointer to string on stack first byte flags as string 
21b1			; 
21b1			; else a number 
21b1			;    look for number format identifier 
21b1			;    $xx hex 
21b1			;    %xxxxx bin 
21b1			;    xxxxx decimal 
21b1			;    convert number to 16bit word.  
21b1			;    malloc word + 1 with flag to identiy as num 
21b1			;    put pointer to number on stack 
21b1			;   
21b1			;  
21b1			  
21b1			forth_apush: 
21b1				; kernel push 
21b1			 
21b1			if DEBUG_FORTH_PUSH 
21b1						DMARK "PSH" 
21b1 f5				push af  
21b2 3a c6 21			ld a, (.dmark)  
21b5 32 a0 fd			ld (debug_mark),a  
21b8 3a c7 21			ld a, (.dmark+1)  
21bb 32 a1 fd			ld (debug_mark+1),a  
21be 3a c8 21			ld a, (.dmark+2)  
21c1 32 a2 fd			ld (debug_mark+2),a  
21c4 18 03			jr .pastdmark  
21c6 ..			.dmark: db "PSH"  
21c9 f1			.pastdmark: pop af  
21ca			endm  
# End of macro DMARK
21ca				CALLMONITOR 
21ca cd aa fd			call debug_vector  
21cd				endm  
# End of macro CALLMONITOR
21cd			endif	 
21cd				; identify input type 
21cd			 
21cd 7e				ld a,(hl) 
21ce			 
21ce fe 23			cp '#' 
21d0 ca 0a 22			jp z, .fapdec 
21d3			 
21d3			 
21d3 fe 22			cp '"' 
21d5 28 0a			jr z, .fapstr 
21d7 fe 24			cp '$' 
21d9 ca 01 22			jp z, .faphex 
21dc fe 25			cp '%' 
21de ca e9 21			jp z, .fapbin 
21e1			;	cp 'b' 
21e1			;	jp z, .fabin 
21e1				; else decimal 
21e1			 
21e1				; TODO do decimal conversion 
21e1				; decimal is stored as a 16bit word 
21e1			 
21e1				; by default everything is a string if type is not detected 
21e1			.fapstr: ; 
21e1 fe 22			cp '"' 
21e3 20 01			jr nz, .strnoqu 
21e5 23				inc hl 
21e6			.strnoqu: 
21e6 c3 b6 20			jp forth_push_str 
21e9			 
21e9			 
21e9			 
21e9			.fapbin:    ; push a binary string.  
21e9 11 00 00			ld de, 0   ; hold a 16bit value 
21ec			 
21ec 23			.fapbinshift:	inc hl  
21ed 7e				ld a,(hl) 
21ee fe 00			cp 0     ; done scanning  
21f0 28 0b			jr z, .fapbdone  	; got it in HL so push  
21f2			 
21f2				; left shift de 
21f2 eb				ex de, hl	 
21f3 29				add hl, hl 
21f4			 
21f4				; is 1 
21f4 fe 31			cp '1' 
21f6 20 02			jr nz, .binzero 
21f8 cb 4d			bit 1, l 
21fa			.binzero: 
21fa eb				ex de, hl	 ; save current de 
21fb 18 ef			jr .fapbinshift 
21fd			 
21fd			.fapbdone: 
21fd eb				ex de, hl 
21fe c3 48 20			jp forth_push_numhl 
2201			 
2201			 
2201			.faphex:   ; hex is always stored as a 16bit word 
2201				; skip number prefix 
2201 23				inc hl 
2202				; turn ascii into number 
2202 cd 9d 12			call get_word_hl	; ret 16bit word in hl 
2205			 
2205 c3 48 20			jp forth_push_numhl 
2208			 
2208 00				 nop 
2209			 
2209			.fabin:   ; TODO bin conversion 
2209			 
2209			 
2209 c9				ret 
220a			.fapdec:	 
220a				; string to dec conversion 
220a 23				inc hl 
220b eb				ex de, hl 
220c cd db 12			call string_to_uint16 
220f c3 48 20			jp forth_push_numhl 
2212 c9				ret 
2213				 
2213			;atoui_16: 
2213			 
2213			; get either a string ptr or a 16bit word from the data stack 
2213			 
2213			FORTH_DSP: macro 
2213				call macro_forth_dsp 
2213				endm 
2213			 
2213			macro_forth_dsp: 
2213				; data stack pointer points to current word on tos 
2213			 
2213 2a 23 f9			ld hl,(cli_data_sp) 
2216			 
2216				if DEBUG_FORTH_PUSH 
2216						DMARK "DSP" 
2216 f5				push af  
2217 3a 2b 22			ld a, (.dmark)  
221a 32 a0 fd			ld (debug_mark),a  
221d 3a 2c 22			ld a, (.dmark+1)  
2220 32 a1 fd			ld (debug_mark+1),a  
2223 3a 2d 22			ld a, (.dmark+2)  
2226 32 a2 fd			ld (debug_mark+2),a  
2229 18 03			jr .pastdmark  
222b ..			.dmark: db "DSP"  
222e f1			.pastdmark: pop af  
222f			endm  
# End of macro DMARK
222f			 
222f cd 73 62				call display_data_sp 
2232				;call break_point_state 
2232				;rst 030h 
2232				CALLMONITOR 
2232 cd aa fd			call debug_vector  
2235				endm  
# End of macro CALLMONITOR
2235				endif 
2235			 
2235 c9				ret 
2236			 
2236			; return hl to start of value on stack 
2236			 
2236			FORTH_DSP_VALUE: macro 
2236				call macro_forth_dsp_value 
2236				endm 
2236			 
2236			macro_forth_dsp_value: 
2236			 
2236				FORTH_DSP 
2236 cd 13 22			call macro_forth_dsp 
2239				endm 
# End of macro FORTH_DSP
2239			 
2239 d5				push de 
223a			 
223a 23				inc hl ; skip type 
223b			 
223b 5e				ld e, (hl) 
223c 23				inc hl 
223d 56				ld d, (hl) 
223e eb				ex de,hl  
223f			 
223f d1				pop de 
2240			 
2240 c9				ret 
2241			 
2241			; return hl to start of value to second item on stack 
2241			 
2241			FORTH_DSP_VALUEM1: macro 
2241				call macro_forth_dsp_value_m1 
2241				endm 
2241			 
2241			macro_forth_dsp_value_m1: 
2241			 
2241				FORTH_DSP 
2241 cd 13 22			call macro_forth_dsp 
2244				endm 
# End of macro FORTH_DSP
2244			 
2244 2b				dec hl 
2245 2b				dec hl 
2246			;	dec hl 
2246			 
2246 d5				push de 
2247			 
2247 5e				ld e, (hl) 
2248 23				inc hl 
2249 56				ld d, (hl) 
224a eb				ex de,hl  
224b			 
224b d1				pop de 
224c			 
224c c9				ret 
224d			 
224d				 
224d			 
224d			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
224d			 
224d			FORTH_DSP_POP: macro 
224d				call macro_forth_dsp_pop 
224d				endm 
224d			 
224d			 
224d			; get the tos data type 
224d			 
224d			FORTH_DSP_TYPE:   macro 
224d			 
224d				;FORTH_DSP_VALUE 
224d				FORTH_DSP 
224d				 
224d				; hl points to value 
224d				; check type 
224d			 
224d				ld a,(hl) 
224d			 
224d				endm 
224d			 
224d			; load the tos value into hl 
224d			 
224d			 
224d			FORTH_DSP_VALUEHL:  macro 
224d				call macro_dsp_valuehl 
224d				endm 
224d			 
224d			 
224d			 
224d			macro_dsp_valuehl: 
224d				FORTH_DSP_VALUE 
224d cd 36 22			call macro_forth_dsp_value 
2250				endm 
# End of macro FORTH_DSP_VALUE
2250			 
2250				;FORTH_ERR_TOS_NOTNUM 
2250			 
2250				;inc hl   ; skip type id 
2250			 
2250			;	push de 
2250			; 
2250			;	ld e, (hl) 
2250			;	inc hl 
2250			;	ld d, (hl) 
2250			;	ex de,hl  
2250			 
2250			;	pop de 
2250			 
2250				if DEBUG_FORTH_PUSH 
2250						DMARK "DVL" 
2250 f5				push af  
2251 3a 65 22			ld a, (.dmark)  
2254 32 a0 fd			ld (debug_mark),a  
2257 3a 66 22			ld a, (.dmark+1)  
225a 32 a1 fd			ld (debug_mark+1),a  
225d 3a 67 22			ld a, (.dmark+2)  
2260 32 a2 fd			ld (debug_mark+2),a  
2263 18 03			jr .pastdmark  
2265 ..			.dmark: db "DVL"  
2268 f1			.pastdmark: pop af  
2269			endm  
# End of macro DMARK
2269				CALLMONITOR 
2269 cd aa fd			call debug_vector  
226c				endm  
# End of macro CALLMONITOR
226c				endif 
226c c9				ret 
226d			 
226d			forth_apushstrhl:      
226d				; push of string requires use of cli_origptr 
226d				; bodge use 
226d			 
226d				; get current cli_origptr, save, update with temp pointer  
226d ed 5b 73 f9		ld de, (cli_origptr) 
2271 22 73 f9			ld (cli_origptr), hl 
2274 d5				push de 
2275 cd b1 21			call forth_apush 
2278 d1				pop de 
2279 ed 53 73 f9		ld (cli_origptr), de 
227d c9			        ret	 
227e			 
227e			 
227e			; increase loop stack pointer and save hl to it 
227e				 
227e			FORTH_LOOP_NEXT: macro 
227e				call macro_forth_loop_next 
227e				;nop 
227e				endm 
227e			 
227e			macro_forth_loop_next: 
227e				if DEBUG_FORTH_STACK_GUARD 
227e cd ef 6f				call check_stacks 
2281				endif 
2281 e5				push hl 
2282 d5				push de 
2283 eb				ex de,hl 
2284 2a 25 f9			ld hl,(cli_loop_sp) 
2287 23				inc hl 
2288 23				inc hl 
2289					if DEBUG_FORTH_WORDS 
2289						DMARK "LNX" 
2289 f5				push af  
228a 3a 9e 22			ld a, (.dmark)  
228d 32 a0 fd			ld (debug_mark),a  
2290 3a 9f 22			ld a, (.dmark+1)  
2293 32 a1 fd			ld (debug_mark+1),a  
2296 3a a0 22			ld a, (.dmark+2)  
2299 32 a2 fd			ld (debug_mark+2),a  
229c 18 03			jr .pastdmark  
229e ..			.dmark: db "LNX"  
22a1 f1			.pastdmark: pop af  
22a2			endm  
# End of macro DMARK
22a2						CALLMONITOR 
22a2 cd aa fd			call debug_vector  
22a5				endm  
# End of macro CALLMONITOR
22a5					endif 
22a5 22 25 f9			ld (cli_loop_sp),hl 
22a8 73				ld (hl), e 
22a9 23				inc hl 
22aa 72				ld (hl), d 
22ab d1				pop de    ; been reversed so save a swap on restore 
22ac e1				pop hl 
22ad				if DEBUG_FORTH_STACK_GUARD 
22ad cd ef 6f				call check_stacks 
22b0				endif 
22b0 c9				ret 
22b1			 
22b1			; get current ret stack pointer and save to hl  
22b1				 
22b1			FORTH_LOOP_TOS: macro 
22b1				call macro_forth_loop_tos 
22b1				endm 
22b1			 
22b1			macro_forth_loop_tos: 
22b1 d5				push de 
22b2 2a 25 f9			ld hl,(cli_loop_sp) 
22b5 5e				ld e, (hl) 
22b6 23				inc hl 
22b7 56				ld d, (hl) 
22b8 eb				ex de, hl 
22b9 d1				pop de 
22ba c9				ret 
22bb			 
22bb			; pop loop stack pointer 
22bb				 
22bb			FORTH_LOOP_POP: macro 
22bb				call macro_forth_loop_pop 
22bb				endm 
22bb			 
22bb			 
22bb			macro_forth_loop_pop: 
22bb				if DEBUG_FORTH_STACK_GUARD 
22bb					DMARK "LPP" 
22bb f5				push af  
22bc 3a d0 22			ld a, (.dmark)  
22bf 32 a0 fd			ld (debug_mark),a  
22c2 3a d1 22			ld a, (.dmark+1)  
22c5 32 a1 fd			ld (debug_mark+1),a  
22c8 3a d2 22			ld a, (.dmark+2)  
22cb 32 a2 fd			ld (debug_mark+2),a  
22ce 18 03			jr .pastdmark  
22d0 ..			.dmark: db "LPP"  
22d3 f1			.pastdmark: pop af  
22d4			endm  
# End of macro DMARK
22d4 cd ef 6f				call check_stacks 
22d7					FORTH_CHK_LOOP_UNDER 
22d7 e5				push hl 
22d8 d5				push de 
22d9 2a 25 f9			ld hl,(cli_loop_sp) 
22dc 11 5f f8			ld de, cli_loop_stack 
22df cd fc 0f			call cmp16 
22e2 da 0c 71			jp c, fault_loop_under 
22e5 d1				pop de 
22e6 e1				pop hl 
22e7				endm 
# End of macro FORTH_CHK_LOOP_UNDER
22e7				endif 
22e7 e5				push hl 
22e8 2a 25 f9			ld hl,(cli_loop_sp) 
22eb 2b				dec hl 
22ec 2b				dec hl 
22ed 22 25 f9			ld (cli_loop_sp), hl 
22f0				; TODO do stack underflow checks 
22f0 e1				pop hl 
22f1				if DEBUG_FORTH_STACK_GUARD 
22f1 cd ef 6f				call check_stacks 
22f4					FORTH_CHK_LOOP_UNDER 
22f4 e5				push hl 
22f5 d5				push de 
22f6 2a 25 f9			ld hl,(cli_loop_sp) 
22f9 11 5f f8			ld de, cli_loop_stack 
22fc cd fc 0f			call cmp16 
22ff da 0c 71			jp c, fault_loop_under 
2302 d1				pop de 
2303 e1				pop hl 
2304				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2304				endif 
2304 c9				ret 
2305			 
2305			macro_forth_dsp_pop: 
2305			 
2305 e5				push hl 
2306			 
2306				; release malloc data 
2306			 
2306				if DEBUG_FORTH_STACK_GUARD 
2306 cd ef 6f				call check_stacks 
2309					FORTH_CHK_DSP_UNDER 
2309 e5				push hl 
230a d5				push de 
230b 2a 23 f9			ld hl,(cli_data_sp) 
230e 11 5d f6			ld de, cli_data_stack 
2311 cd fc 0f			call cmp16 
2314 da 00 71			jp c, fault_dsp_under 
2317 d1				pop de 
2318 e1				pop hl 
2319				endm 
# End of macro FORTH_CHK_DSP_UNDER
2319				endif 
2319				;ld hl,(cli_data_sp) 
2319			if DEBUG_FORTH_DOT 
2319				DMARK "DPP" 
2319 f5				push af  
231a 3a 2e 23			ld a, (.dmark)  
231d 32 a0 fd			ld (debug_mark),a  
2320 3a 2f 23			ld a, (.dmark+1)  
2323 32 a1 fd			ld (debug_mark+1),a  
2326 3a 30 23			ld a, (.dmark+2)  
2329 32 a2 fd			ld (debug_mark+2),a  
232c 18 03			jr .pastdmark  
232e ..			.dmark: db "DPP"  
2331 f1			.pastdmark: pop af  
2332			endm  
# End of macro DMARK
2332				CALLMONITOR 
2332 cd aa fd			call debug_vector  
2335				endm  
# End of macro CALLMONITOR
2335			endif	 
2335			 
2335			 
2335			if FORTH_ENABLE_DSPPOPFREE 
2335			 
2335				FORTH_DSP 
2335 cd 13 22			call macro_forth_dsp 
2338				endm 
# End of macro FORTH_DSP
2338			 
2338 7e				ld a, (hl) 
2339 fe 01			cp DS_TYPE_STR 
233b 20 22			jr nz, .skippopfree 
233d			 
233d				FORTH_DSP_VALUEHL 
233d cd 4d 22			call macro_dsp_valuehl 
2340				endm 
# End of macro FORTH_DSP_VALUEHL
2340			;	nop 
2340			if DEBUG_FORTH_DOT 
2340				DMARK "DPf" 
2340 f5				push af  
2341 3a 55 23			ld a, (.dmark)  
2344 32 a0 fd			ld (debug_mark),a  
2347 3a 56 23			ld a, (.dmark+1)  
234a 32 a1 fd			ld (debug_mark+1),a  
234d 3a 57 23			ld a, (.dmark+2)  
2350 32 a2 fd			ld (debug_mark+2),a  
2353 18 03			jr .pastdmark  
2355 ..			.dmark: db "DPf"  
2358 f1			.pastdmark: pop af  
2359			endm  
# End of macro DMARK
2359				CALLMONITOR 
2359 cd aa fd			call debug_vector  
235c				endm  
# End of macro CALLMONITOR
235c			endif	 
235c cd 83 14			call free 
235f			.skippopfree: 
235f				 
235f			 
235f			endif 
235f			 
235f			if DEBUG_FORTH_DOT_KEY 
235f				DMARK "DP2" 
235f				CALLMONITOR 
235f			endif	 
235f			 
235f				; move pointer down 
235f			 
235f 2a 23 f9			ld hl,(cli_data_sp) 
2362 2b				dec hl 
2363 2b				dec hl 
2364			; PARSEV5 
2364 2b				dec hl 
2365 22 23 f9			ld (cli_data_sp), hl 
2368			 
2368				if DEBUG_FORTH_STACK_GUARD 
2368 cd ef 6f				call check_stacks 
236b					FORTH_CHK_DSP_UNDER 
236b e5				push hl 
236c d5				push de 
236d 2a 23 f9			ld hl,(cli_data_sp) 
2370 11 5d f6			ld de, cli_data_stack 
2373 cd fc 0f			call cmp16 
2376 da 00 71			jp c, fault_dsp_under 
2379 d1				pop de 
237a e1				pop hl 
237b				endm 
# End of macro FORTH_CHK_DSP_UNDER
237b				endif 
237b			 
237b e1				pop hl 
237c			 
237c c9				ret 
237d			 
237d			getwordathl: 
237d				; hl points to an address 
237d				; load hl with the word at that address 
237d			 
237d d5				push de 
237e			 
237e 5e				ld e, (hl) 
237f 23				inc hl 
2380 56				ld d, (hl) 
2381 eb				ex de, hl 
2382			 
2382 d1				pop de 
2383 c9				ret 
2384			 
2384			 
2384			; functions to manuplite stack pointers 
2384			 
2384			; generate fragment to set hl to be pointer to a stack item 
2384			 
2384			FORTH_DSP_PTR: macro  x 
2384				ld hl,(cli_data_sp) 
2384				ld de, x * 3 
2384				sbc hl, de 
2384				endm 
2384			 
2384			 
2384			 
2384			; copy point in hl to stack tmp storage slots 1-4 
2384			hltostack1: 
2384 11 f3 f0			ld de, os_stack_1  
2387 c3 b2 23			jp hltostackmv 
238a			 
238a			hltostack2:  
238a 11 f0 f0			ld de, os_stack_2 
238d c3 b2 23			jp hltostackmv 
2390			 
2390			hltostack3:  
2390 11 ed f0			ld de, os_stack_3 
2393 c3 b2 23			jp hltostackmv 
2396			 
2396			hltostack4:  
2396 11 ea f0			ld de, os_stack_4  
2399 c3 b2 23			jp hltostackmv 
239c			 
239c			; copy to point in hl from stack tmp storage slots 1-4 
239c			hlfromstack1: 
239c 11 f3 f0			ld de, os_stack_1 
239f c3 b1 23			jp hlfromsttackmv 
23a2			 
23a2			hlfromstack2:  
23a2 11 f0 f0			ld de, os_stack_2 
23a5 c3 b1 23			jp hlfromsttackmv 
23a8			 
23a8			hlfromstack3:  
23a8 11 ed f0			ld de, os_stack_3 
23ab c3 b1 23			jp hlfromsttackmv 
23ae			 
23ae			hlfromstack4:  
23ae 11 ea f0			ld de, os_stack_4 
23b1			 
23b1			hlfromsttackmv: 
23b1 eb				ex de, hl 
23b2			 
23b2			hltostackmv: 
23b2			 
23b2				; do stack move 
23b2 c5				push bc 
23b3 01 03 00			ld bc, 3 
23b6 ed b0			ldir  
23b8 c1				pop bc	 
23b9 c9				ret 
23ba			 
23ba			; eof 
23ba			 
# End of file forth_stackopsv5.asm
23ba			endif 
23ba			loadwordinhl:	 
23ba			 
23ba d5				push de 
23bb			 
23bb 5e				ld e, (hl) 
23bc 23				inc hl 
23bd 56				ld d, (hl) 
23be eb				ex de,hl  
23bf			 
23bf d1				pop de 
23c0			 
23c0 c9				ret 
23c1			 
23c1			user_word_eol:  
23c1				; hl contains the pointer to where to create a linked list item from the end 
23c1				; of the user dict to continue on at the system word dict 
23c1				 
23c1				; poke the stub of the word list linked list to repoint to rom words 
23c1			 
23c1				; stub format 
23c1				; db   word id 
23c1				; dw    link to next word 
23c1			        ; db char length of token 
23c1				; db string + 0 term 
23c1				; db exec code....  
23c1			 
23c1 3e 00			ld a, WORD_SYS_ROOT     ; root word 
23c3 77				ld (hl), a		; word id 
23c4 23				inc hl 
23c5			 
23c5 11 7c 25			ld de, sysdict 
23c8 73				ld (hl), e		; next word link ie system dict 
23c9 23				inc hl 
23ca 72				ld (hl), d		; next word link ie system dict 
23cb 23				inc hl	 
23cc			 
23cc			;	ld (hl), sysdict		; next word link ie system dict 
23cc			;	inc hl 
23cc			;	inc hl 
23cc			 
23cc			;	inc hl 
23cc			;	inc hl 
23cc			 
23cc 3e 02			ld a, 2			; word length is 0 
23ce 77				ld (hl), a	 
23cf 23				inc hl 
23d0			 
23d0 3e 7e			ld a, '~'			; word length is 0 
23d2 77				ld (hl), a	 
23d3 23				inc hl 
23d4 3e 00			ld a, 0			; save empty word 
23d6 77				ld (hl), a 
23d7			 
23d7 c9				ret 
23d8			 
23d8				 
23d8			 
23d8			forthexec_cleanup: 
23d8				FORTH_RSP_POP 
23d8 cd 10 20			call macro_forth_rsp_pop 
23db				endm 
# End of macro FORTH_RSP_POP
23db c9				ret 
23dc			 
23dc			forth_call_hl: 
23dc				; taking hl 
23dc e5				push hl 
23dd c9				ret 
23de			 
23de			; this is called to reset Forth system but keep existing uwords etc 
23de			 
23de			forth_warmstart: 
23de				; setup stack over/under flow checks 
23de				if DEBUG_FORTH_STACK_GUARD 
23de cd d5 6f				call chk_stk_init 
23e1				endif 
23e1			 
23e1				; init stack pointers  - * these stacks go upwards *  
23e1 21 e1 f8			ld hl, cli_ret_stack 
23e4 22 27 f9			ld (cli_ret_sp), hl	 
23e7				; set bottom of stack 
23e7 3e 00			ld a,0 
23e9 77				ld (hl),a 
23ea 23				inc hl 
23eb 77				ld (hl),a 
23ec			 
23ec 21 5d f6			ld hl, cli_data_stack 
23ef 22 23 f9			ld (cli_data_sp), hl	 
23f2				; set bottom of stack 
23f2 3e 00			ld a,0 
23f4 77				ld (hl),a 
23f5 23				inc hl 
23f6 77				ld (hl),a 
23f7			 
23f7 21 5f f8			ld hl, cli_loop_stack 
23fa 22 25 f9			ld (cli_loop_sp), hl	 
23fd				; set bottom of stack 
23fd 3e 00			ld a,0 
23ff 77				ld (hl),a 
2400 23				inc hl 
2401 77				ld (hl),a 
2402			 
2402				; init extent of current open file 
2402			 
2402 3e 00			ld a, 0 
2404 32 9f f9			ld (store_openext), a 
2407			 
2407 c9				ret 
2408			 
2408			 
2408			 
2408			; Cold Start - this is called to setup the whole Forth system 
2408			 
2408			forth_init: 
2408			 
2408				; setup stack over/under flow checks 
2408			 
2408			;	if DEBUG_FORTH_STACK_GUARD 
2408			;		call chk_stk_init 
2408			;	endif 
2408			 
2408				; enable auto display updates (slow.....) 
2408			 
2408 3e 01			ld a, 1 
240a 32 71 f9			ld (cli_autodisplay), a 
240d			 
240d				; if storage is in use disable long reads for now 
240d 3e 00			ld a, 0 
240f 32 aa f9			ld (store_longread), a 
2412			 
2412			 
2412				; show start up screen 
2412			 
2412 cd aa 0d			call clear_display 
2415			 
2415 3e 00			ld a,0 
2417 32 93 f9			ld (f_cursor_ptr), a 
241a			 
241a				; set start of word list in start of ram - for use when creating user words 
241a			 
241a 21 00 80			ld hl, baseram 
241d 22 f3 f3			ld (os_last_new_uword), hl 
2420 cd c1 23			call user_word_eol 
2423				 
2423			;		call display_data_sp 
2423			;		call next_page_prompt 
2423			 
2423			 
2423			 
2423			 
2423 c9				ret 
2424			 
2424 .. 00		.bootforth: db " Forth Kernel Init ",0 
2438			 
2438			; TODO push to stack 
2438			 
2438			;  
2438			 
2438			if FORTH_PARSEV2 
2438			 
2438			 
2438				include "forth_parserv2.asm" 
2438			 
2438			endif 
2438			 
2438			 
2438			; parse cli version 1 
2438			 
2438			if FORTH_PARSEV1 
2438			 
2438			 
2438			 
2438			      include "forth_parserv1.asm" 
2438			endif 
2438				 
2438			if FORTH_PARSEV3 
2438			      include "forth_parserv3.asm" 
2438				include "forth_wordsv3.asm" 
2438			endif 
2438			 
2438			if FORTH_PARSEV4 
2438			      include "forth_parserv4.asm" 
2438				include "forth_wordsv4.asm" 
2438			endif 
2438			 
2438			if FORTH_PARSEV5 
2438			      include "forth_parserv5.asm" 
2438				include "forth_wordsv4.asm" 
2438			endif 
2438			 
2438			if FORTH_PARSEV6 
2438			      include "forth_parserv6.asm" 
2438			 
2438			 
2438			; A better parser without using malloc and string copies all over the place.  
2438			; Exec in situ should be faster 
2438			 
2438			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
2438			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
2438			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
2438			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
2438			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
2438			WORD_SYS_END: equ 0   ; Opcode for all user words 
2438			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
2438			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
2438			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
2438			 
2438			; Core word preamble macro 
2438			 
2438			CWHEAD:   macro nxtword opcode lit len opflags 
2438				db WORD_SYS_CORE+opcode             
2438				; internal op code number 
2438				dw nxtword            
2438				; link to next dict word block 
2438				db len + 1 
2438				; literal length of dict word inc zero term 
2438				db lit,0              
2438				; literal dict word 
2438			        ; TODO db opflags        
2438				endm 
2438			 
2438			 
2438			NEXTW: macro  
2438				jp macro_next 
2438				endm 
2438			 
2438			macro_next: 
2438			if DEBUG_FORTH_PARSE_EXEC 
2438				DMARK "NXT" 
2438				CALLMONITOR 
2438			endif	 
2438			;	inc hl  ; skip token null term  
2438 ed 4b 75 f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
243c ed 5b 73 f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2440 2a f7 f3			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2443			if DEBUG_FORTH_PARSE_EXEC 
2443				DMARK "}AA" 
2443				CALLMONITOR 
2443			endif	 
2443 c3 32 25			jp execnext 
2446				;jp exec1 
2446			       
2446			 
2446			 
2446			; Another go at the parser to compile  
2446			 
2446			 
2446			; TODO rework parser to change all of the string words to byte tokens 
2446			; TODO do a search for  
2446			 
2446			; TODO first run normal parser to zero term sections 
2446			; TODO for each word do a token look up to get the op code 
2446			; TODO need some means to flag to the exec that this is a byte code form    
2446			 
2446			 
2446			forthcompile: 
2446			 
2446			; 
2446			; line parse: 
2446			;       parse raw input buffer 
2446			;       tokenise the words 
2446			;       malloc new copy (for looping etc) 
2446			;       copy to malloc + current pc in line to start of string and add line term 
2446			;       save on new rsp 
2446			; 
2446			 
2446			; hl to point to the line to tokenise 
2446			 
2446			;	push hl 
2446 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2449			 
2449			;	ld a,0		; string term on input 
2449			;	call strlent 
2449			 
2449			;	ld (os_tok_len), hl	 ; save string length 
2449			 
2449			;if DEBUG_FORTH_TOK 
2449			;	ex de,hl		 
2449			;endif 
2449			 
2449			;	pop hl 		; get back string pointer 
2449			 
2449			if DEBUG_FORTH_TOK 
2449						DMARK "TOc" 
2449				CALLMONITOR 
2449			endif 
2449 7e			.cptoken2:    ld a,(hl) 
244a 23				inc hl 
244b fe 7f			cp FORTH_END_BUFFER 
244d 28 29			jr z, .cptokendone2 
244f fe 00			cp 0 
2451 28 25			jr z, .cptokendone2 
2453 fe 22			cp '"' 
2455 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2457 fe 20			cp ' ' 
2459 20 ee			jr nz,  .cptoken2 
245b			 
245b			; TODO consume comments held between ( and ) 
245b			 
245b				; we have a space so change to zero term for dict match later 
245b 2b				dec hl 
245c 3e 00			ld a,0 
245e 77				ld (hl), a 
245f 23				inc hl 
2460 18 e7			jr .cptoken2 
2462				 
2462			 
2462			.cptokenstr2: 
2462				; skip all white space until either eol (because forgot to term) or end double quote 
2462			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2462				;inc hl ; skip current double quote 
2462 7e				ld a,(hl) 
2463 23				inc hl 
2464 fe 22			cp '"' 
2466 28 e1			jr z, .cptoken2 
2468 fe 7f			cp FORTH_END_BUFFER 
246a 28 0c			jr z, .cptokendone2 
246c fe 00			cp 0 
246e 28 08			jr z, .cptokendone2 
2470 fe 20			cp ' ' 
2472 28 02			jr z, .cptmp2 
2474 18 ec			jr .cptokenstr2 
2476			 
2476			.cptmp2:	; we have a space so change to zero term for dict match later 
2476				;dec hl 
2476				;ld a,"-"	; TODO remove this when working 
2476				;ld (hl), a 
2476				;inc hl 
2476 18 ea			jr .cptokenstr2 
2478			 
2478			.cptokendone2: 
2478				;inc hl 
2478 3e 7f			ld a, FORTH_END_BUFFER 
247a 77				ld (hl),a 
247b			;	inc hl 
247b			;	ld a, '!' 
247b			;	ld (hl),a 
247b			 
247b 2a f7 f3			ld hl,(os_tok_ptr) 
247e			         
247e			if DEBUG_FORTH_TOK 
247e						DMARK "Tc1" 
247e				CALLMONITOR 
247e			endif 
247e			 
247e				; push exec string to top of return stack 
247e				FORTH_RSP_NEXT 
247e cd ef 1f			call macro_forth_rsp_next 
2481				endm 
# End of macro FORTH_RSP_NEXT
2481 c9				ret 
2482			 
2482			; Another go at the parser need to simplify the process 
2482			 
2482			forthparse: 
2482			 
2482			; 
2482			; line parse: 
2482			;       parse raw input buffer 
2482			;       tokenise the words 
2482			;       malloc new copy (for looping etc) 
2482			;       copy to malloc + current pc in line to start of string and add line term 
2482			;       save on new rsp 
2482			; 
2482			 
2482			; hl to point to the line to tokenise 
2482			 
2482			;	push hl 
2482 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2485			 
2485			;	ld a,0		; string term on input 
2485			;	call strlent 
2485			 
2485			;	ld (os_tok_len), hl	 ; save string length 
2485			 
2485			;if DEBUG_FORTH_TOK 
2485			;	ex de,hl		 
2485			;endif 
2485			 
2485			;	pop hl 		; get back string pointer 
2485			 
2485			if DEBUG_FORTH_TOK 
2485						DMARK "TOK" 
2485				CALLMONITOR 
2485			endif 
2485 7e			.ptoken2:    ld a,(hl) 
2486 23				inc hl 
2487 fe 7f			cp FORTH_END_BUFFER 
2489 28 29			jr z, .ptokendone2 
248b fe 00			cp 0 
248d 28 25			jr z, .ptokendone2 
248f fe 22			cp '"' 
2491 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2493 fe 20			cp ' ' 
2495 20 ee			jr nz,  .ptoken2 
2497			 
2497			; TODO consume comments held between ( and ) 
2497			 
2497				; we have a space so change to zero term for dict match later 
2497 2b				dec hl 
2498 3e 00			ld a,0 
249a 77				ld (hl), a 
249b 23				inc hl 
249c 18 e7			jr .ptoken2 
249e				 
249e			 
249e			.ptokenstr2: 
249e				; skip all white space until either eol (because forgot to term) or end double quote 
249e			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
249e				;inc hl ; skip current double quote 
249e 7e				ld a,(hl) 
249f 23				inc hl 
24a0 fe 22			cp '"' 
24a2 28 e1			jr z, .ptoken2 
24a4 fe 7f			cp FORTH_END_BUFFER 
24a6 28 0c			jr z, .ptokendone2 
24a8 fe 00			cp 0 
24aa 28 08			jr z, .ptokendone2 
24ac fe 20			cp ' ' 
24ae 28 02			jr z, .ptmp2 
24b0 18 ec			jr .ptokenstr2 
24b2			 
24b2			.ptmp2:	; we have a space so change to zero term for dict match later 
24b2				;dec hl 
24b2				;ld a,"-"	; TODO remove this when working 
24b2				;ld (hl), a 
24b2				;inc hl 
24b2 18 ea			jr .ptokenstr2 
24b4			 
24b4			.ptokendone2: 
24b4				;inc hl 
24b4 3e 7f			ld a, FORTH_END_BUFFER 
24b6 77				ld (hl),a 
24b7			;	inc hl 
24b7			;	ld a, '!' 
24b7			;	ld (hl),a 
24b7			 
24b7 2a f7 f3			ld hl,(os_tok_ptr) 
24ba			         
24ba			if DEBUG_FORTH_TOK 
24ba						DMARK "TK1" 
24ba				CALLMONITOR 
24ba			endif 
24ba			 
24ba				; push exec string to top of return stack 
24ba				FORTH_RSP_NEXT 
24ba cd ef 1f			call macro_forth_rsp_next 
24bd				endm 
# End of macro FORTH_RSP_NEXT
24bd c9				ret 
24be			 
24be			; 
24be			;	; malloc size + buffer pointer + if is loop flag 
24be			;	ld hl,(os_tok_len) 		 ; get string length 
24be			; 
24be			;	ld a,l 
24be			; 
24be			;	cp 0			; we dont want to use a null string 
24be			;	ret z 
24be			; 
24be			;;	add 3    ; prefix malloc with buffer for current word ptr 
24be			; 
24be			;	add 5     ; TODO when certain not over writing memory remove 
24be			; 
24be			;		 
24be			; 
24be			;if DEBUG_FORTH_TOK 
24be			;			DMARK "TKE" 
24be			;	CALLMONITOR 
24be			;endif 
24be			; 
24be			;	ld l,a 
24be			;	ld h,0 
24be			;;	push hl   ; save required space for the copy later 
24be			;	call malloc 
24be			;if DEBUG_FORTH_TOK 
24be			;			DMARK "TKM" 
24be			;	CALLMONITOR 
24be			;endif 
24be			;	if DEBUG_FORTH_MALLOC_GUARD 
24be			;		push af 
24be			;		call ishlzero 
24be			;;		ld a, l 
24be			;;		add h 
24be			;;		cp 0 
24be			;		pop af 
24be			;		 
24be			;		call z,malloc_error 
24be			;	endif 
24be			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
24be			; 
24be			; 
24be			;if DEBUG_FORTH_TOK 
24be			;			DMARK "TKR" 
24be			;	CALLMONITOR 
24be			;endif 
24be			; 
24be			;	FORTH_RSP_NEXT 
24be			; 
24be			;	;inc hl	 ; go past current buffer pointer 
24be			;	;inc hl 
24be			;	;inc hl   ; and past if loop flag 
24be			;		; TODO Need to set flag  
24be			; 
24be			;	 
24be			;	 
24be			;	ex de,hl	; malloc is dest 
24be			;	ld hl, (os_tok_len) 
24be			;;	pop bc 
24be			;	ld c, l                
24be			;	ld b,0 
24be			;	ld hl, (os_tok_ptr) 
24be			; 
24be			;if DEBUG_FORTH_TOK 
24be			;			DMARK "TKT" 
24be			;	CALLMONITOR 
24be			;endif 
24be			; 
24be			;	; do str cpy 
24be			; 
24be			;	ldir      ; copy byte in hl to de 
24be			; 
24be			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
24be			; 
24be			;if DEBUG_FORTH_TOK 
24be			; 
24be			;			DMARK "TKY" 
24be			;	CALLMONITOR 
24be			;endif 
24be			;	;ld a,0 
24be			;	;ld a,FORTH_END_BUFFER 
24be			;	ex de, hl 
24be			;	;dec hl			 ; go back over the space delim at the end of word 
24be			;	;ld (hl),a 
24be			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
24be			;	ld a,FORTH_END_BUFFER 
24be			;	ld (hl),a 
24be			;	inc hl 
24be			;	ld a,FORTH_END_BUFFER 
24be			;	ld (hl),a 
24be			; 
24be			;	; init the malloc area data 
24be			;	; set pc for in current area 
24be			;	;ld hl, (os_tok_malloc) 
24be			;	;inc hl 
24be			;	;inc hl 
24be			;	;inc hl 
24be			;	;ex de,hl 
24be			;	;ld hl, (os_tok_malloc) 
24be			;	;ld (hl),e 
24be			;	;inc hl 
24be			;	;ld (hl),d 
24be			; 
24be			; 
24be			;	ld hl,(os_tok_malloc) 
24be			;if DEBUG_FORTH_PARSE_KEY 
24be			;			DMARK "TKU" 
24be			;	CALLMONITOR 
24be			;endif 
24be			; 
24be			;	ret 
24be			 
24be			forthexec: 
24be			 
24be			; line exec: 
24be			; forth parser 
24be			 
24be			; 
24be			;       get current exec line on rsp 
24be			 
24be				FORTH_RSP_TOS 
24be cd 06 20			call macro_forth_rsp_tos 
24c1				endm 
# End of macro FORTH_RSP_TOS
24c1			 
24c1			;       restore current pc - hl points to malloc of data 
24c1			 
24c1				;ld e, (hl) 
24c1				;inc hl 
24c1				;ld d, (hl) 
24c1				;ex de,hl 
24c1			 
24c1			 
24c1			exec1: 
24c1 22 f7 f3			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
24c4			 
24c4				; copy our PC to working vars  
24c4 22 75 f9			ld (cli_ptr), hl                    ; here 
24c7 22 73 f9			ld (cli_origptr), hl                ; here 
24ca			 
24ca 7e				ld a,(hl)                           ; here make hl be the ram ptr 
24cb fe 7f			cp FORTH_END_BUFFER 
24cd c8				ret z 
24ce			 
24ce				; skip any nulls 
24ce			 
24ce fe 00			cp 0 
24d0 20 03			jr nz, .execword 
24d2 23				inc hl 
24d3 18 ec			jr exec1 
24d5			 
24d5			 
24d5			.execword: 
24d5			 
24d5			 
24d5			 
24d5			if DEBUG_FORTH_PARSE_EXEC 
24d5						DMARK "KYQ" 
24d5				CALLMONITOR 
24d5			endif 
24d5			;       while at start of word: 
24d5			; get start of dict (in user area first) 
24d5			 
24d5 21 00 80		ld hl, baseram 
24d8			;ld hl, sysdict 
24d8 22 77 f9		ld (cli_nextword),hl                            ; here do we need to do this? 
24db			;           match word at pc 
24db			;           exec word 
24db			;           or push to dsp 
24db			;           forward to next token 
24db			;           if line term pop rsp and exit 
24db			;        
24db			 
24db			if DEBUG_FORTH_PARSE_EXEC 
24db						DMARK "KYq" 
24db				CALLMONITOR 
24db			endif 
24db			 
24db			; 
24db			; word comp 
24db			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
24db			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
24db			;    move to start of word  
24db			;    compare word to cli_token 
24db			 
24db			.execpnword:	; HL at start of a word in the dictionary to check 
24db			 
24db 2a 77 f9			ld hl,(cli_nextword)                  ; here remove the need to store???? 
24de			 
24de cd 75 25			call forth_tok_next 
24e1			; tok next end here 
24e1 22 77 f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
24e4 eb				ex de, hl 
24e5			 
24e5			 
24e5				; save the pointer of the current token - 1 to check against 
24e5				 
24e5 22 7b f9			ld (cli_token), hl   
24e8				; TODO maybe remove below save if no debug 
24e8				; save token string ptr for any debug later 
24e8 23				inc hl  
24e9 22 7d f9			ld (cli_origtoken), hl 
24ec 2b				dec hl 
24ed				; save pointer to the start of the next dictionay word 
24ed 7e				ld a,(hl)   ; get string length 
24ee 47				ld b,a 
24ef			.execpnwordinc:  
24ef 23				inc hl 
24f0 10 fd			djnz .execpnwordinc 
24f2 22 79 f9			ld (cli_execword), hl      ; save start of this words code 
24f5			 
24f5				; now check the word token against the string being parsed 
24f5			 
24f5 2a 7b f9			ld hl,(cli_token) 
24f8 23				inc hl     ; skip string length (use zero term instead to end) 
24f9				;ld (cli_token), hl 
24f9			 
24f9			.execpnchar:    ; compare char between token and string to parse 
24f9			 
24f9			 
24f9				;ld hl, (cli_token)     ; the dict word  
24f9 ed 5b 75 f9		ld de, (cli_ptr)     ; cli to parse 
24fd			 
24fd			 
24fd			.execpncharl:    ; compare char between token and string to parse (loop) 
24fd			 
24fd 1a				ld a,(de) 
24fe cd 3b 13			call toUpper 		; make sure the input string matches case 
2501 be				cp (hl) 
2502			 
2502 c2 1b 25			jp nz, .execpnskipword	 ; no match so move to next word 
2505				 
2505			;    if same 
2505			;       scan for string terms 0 for token and 32 for input 
2505 46				ld b,(hl) 
2506 80				add b			 
2507 23				inc hl 
2508 13				inc de 
2509 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
250b							; TODO need to make sure last word in zero term string is accounted for 
250b 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
250d			 
250d			 
250d				; at end of both strings so both are exact match 
250d			 
250d			;       skip ptr for next word 
250d			 
250d 2a 75 f9			ld hl,(cli_ptr) 	; at input string term 
2510 23				inc hl			 ; at next char 
2511 22 75 f9			ld (cli_ptr), hl     ; save for next round of the parser 
2514 22 73 f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2517				 
2517				 
2517			 
2517			 
2517			 
2517			;       exec code block 
2517			if DEBUG_FORTH_JP 
2517				call clear_display 
2517				call update_display 
2517				call delay1s 
2517				ld hl, (cli_execword)     ; save for next check if no match on this word 
2517				ld a,h 
2517				ld hl, os_word_scratch 
2517				call hexout 
2517				ld hl, (cli_execword)     ; save for next check if no match on this word 
2517				ld a,l 
2517				ld hl, os_word_scratch+2 
2517				call hexout 
2517				ld hl, os_word_scratch+4 
2517				ld a,0 
2517				ld (hl),a 
2517				ld de,os_word_scratch 
2517				call str_at_display 
2517					ld a, display_row_2 
2517					call str_at_display 
2517				ld de, (cli_origtoken) 
2517				ld a, display_row_1+10 
2517					call str_at_display 
2517			 
2517				ld a,display_row_1 
2517				ld de, .foundword 
2517				ld a, display_row_3 
2517				call str_at_display 
2517				call update_display 
2517				call delay1s 
2517				call delay1s 
2517				call delay1s 
2517			endif 
2517			 
2517			if DEBUG_FORTH_PARSE_EXEC 
2517						DMARK "KYj" 
2517			endif 
2517				; TODO save the word pointer in this exec 
2517			 
2517 2a 79 f9			ld hl,(cli_execword) 
251a e9				jp (hl) 
251b			 
251b			 
251b			;    if not same 
251b			;	scan for zero term 
251b			;	get ptr for next word 
251b			;	goto word comp 
251b			 
251b			.execpnskipword:	; get pointer to next word 
251b 2a 77 f9			ld hl,(cli_nextword) 
251e			 
251e 7e				ld a,(hl) 
251f fe 00			cp WORD_SYS_END 
2521			;	cp 0 
2521 28 09			jr z, .execendofdict			 ; at end of words 
2523			 
2523			if DEBUG_FORTH_PARSE_EXEC 
2523						DMARK "KY4" 
2523			endif 
2523			if DEBUG_FORTH_PARSE_EXEC 
2523			 
2523				; see if disabled 
2523			 
2523			;	ld a, (os_view_disable) 
2523			;	cp '*' 
2523				ld a,(debug_vector) 
2523				cp $c9   ; RET 
2523				jr z, .noskip 
2523			 
2523			 
2523				ld de, .nowordfound 
2523				ld a, display_row_3 
2523				call str_at_display 
2523				call update_display 
2523				ld a, 100 
2523				call aDelayInMS 
2523				 
2523				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2523					call delay250ms 
2523				endif 
2523			.noskip:  
2523			 
2523			endif	 
2523			 
2523 2a 73 f9			ld hl,(cli_origptr) 
2526 22 75 f9			ld (cli_ptr),hl 
2529			 
2529			if DEBUG_FORTH_PARSE_EXEC 
2529						DMARK "KY5" 
2529			endif 
2529 c3 db 24			jp .execpnword			; else go to next word 
252c			 
252c			.execendofdict:  
252c			 
252c			if DEBUG_FORTH_PARSE_EXEC 
252c						DMARK "KYe" 
252c			endif 
252c			if DEBUG_FORTH_PARSE_EXEC 
252c				; see if disabled 
252c			 
252c			;	ld a, (os_view_disable) 
252c			;	cp '*' 
252c				ld a,(debug_vector) 
252c				cp $c9   ; ret 
252c				jr z, .ispskip 
252c			 
252c				call clear_display 
252c				call update_display 
252c				call delay1s 
252c				ld de, (cli_origptr) 
252c				ld a, display_row_1 
252c				call str_at_display 
252c				 
252c				ld de, .enddict 
252c				ld a, display_row_3 
252c				call str_at_display 
252c				call update_display 
252c				ld a, 100 
252c				call aDelayInMS 
252c				if DEBUG_FORTH_PARSE_EXEC_SLOW 
252c				call delay1s 
252c				call delay1s 
252c				call delay1s 
252c				endif 
252c			.ispskip:  
252c				 
252c			endif	 
252c			 
252c			 
252c			 
252c				; if the word is not a keyword then must be a literal so push it to stack 
252c			 
252c			; push token to stack to end of word 
252c			 
252c				STACKFRAME ON $1efe $2f9f 
252c				if DEBUG_STACK_IMB 
252c					if ON 
252c						exx 
252c						ld de, $1efe 
252c						ld a, d 
252c						ld hl, curframe 
252c						call hexout 
252c						ld a, e 
252c						ld hl, curframe+2 
252c						call hexout 
252c						ld hl, $1efe 
252c						push hl 
252c						ld hl, $2f9f 
252c						push hl 
252c						exx 
252c					endif 
252c				endif 
252c			endm 
# End of macro STACKFRAME
252c			 
252c 2a f7 f3		ld hl,(os_tok_ptr) 
252f cd b1 21		call forth_apush 
2532			 
2532				STACKFRAMECHK ON $1efe $2f9f 
2532				if DEBUG_STACK_IMB 
2532					if ON 
2532						exx 
2532						ld hl, $2f9f 
2532						pop de   ; $2f9f 
2532						call cmp16 
2532						jr nz, .spnosame 
2532						ld hl, $1efe 
2532						pop de   ; $1efe 
2532						call cmp16 
2532						jr z, .spfrsame 
2532						.spnosame: call showsperror 
2532						.spfrsame: nop 
2532						exx 
2532					endif 
2532				endif 
2532			endm 
# End of macro STACKFRAMECHK
2532			 
2532			execnext: 
2532			 
2532			if DEBUG_FORTH_PARSE_EXEC 
2532						DMARK "KY>" 
2532			endif 
2532			; move past token to next word 
2532			 
2532 2a f7 f3		ld hl, (os_tok_ptr) 
2535 3e 00		ld a, 0 
2537 01 ff 00		ld bc, 255     ; input buffer size 
253a ed b1		cpir 
253c			 
253c			if DEBUG_FORTH_PARSE_EXEC 
253c						DMARK "KY!" 
253c				CALLMONITOR 
253c			endif	 
253c			; TODO this might place hl on the null, so will need to forward on??? 
253c			;inc hl   ; see if this gets onto the next item 
253c			 
253c			 
253c			; TODO pass a pointer to the buffer to push 
253c			; TODO call function to push 
253c			 
253c			; look for end of input 
253c			 
253c			;inc hl 
253c			;ld a,(hl) 
253c			;cp FORTH_END_BUFFER 
253c			;ret z 
253c			 
253c			 
253c c3 c1 24		jp exec1 
253f			 
253f			 
253f			 
253f			 
253f			 
253f			 
253f			 
253f			 
253f			 
253f			findnexttok: 
253f			 
253f				; hl is pointer to move 
253f				; de is the token to locate 
253f			 
253f					if DEBUG_FORTH 
253f						DMARK "NTK" 
253f						CALLMONITOR 
253f					endif 
253f d5				push de 
2540			 
2540			.fnt1:	 
2540				; find first char of token to locate 
2540			 
2540 1a				ld a, (de) 
2541 4f				ld c,a 
2542 7e				ld a,(hl) 
2543 cd 3b 13			call toUpper 
2546					if DEBUG_FORTH 
2546						DMARK "NT1" 
2546						CALLMONITOR 
2546					endif 
2546 b9				cp c 
2547			 
2547 28 03			jr z, .fnt2cmpmorefirst	 
2549			 
2549				; first char not found move to next char 
2549			 
2549 23				inc hl 
254a 18 f4			jr .fnt1 
254c			 
254c			.fnt2cmpmorefirst:	 
254c				; first char of token found.  
254c			 
254c e5				push hl     ; save start of token just in case it is the right one 
254d d9				exx 
254e e1				pop hl        ; save it to hl' 
254f d9				exx 
2550			 
2550			 
2550			.fnt2cmpmore:	 
2550				; compare the rest 
2550				 
2550 23				inc hl 
2551 13				inc de 
2552				 
2552 1a				ld a, (de) 
2553 4f				ld c,a 
2554 7e				ld a,(hl) 
2555 cd 3b 13			call toUpper 
2558			 
2558					if DEBUG_FORTH 
2558						DMARK "NT2" 
2558						CALLMONITOR 
2558					endif 
2558				; c has the token to find char 
2558				; a has the mem to scan char 
2558			 
2558 b9				cp c 
2559 28 04			jr z,.fntmatch1 
255b			 
255b				; they are not the same 
255b			 
255b					if DEBUG_FORTH 
255b						DMARK "NT3" 
255b						CALLMONITOR 
255b					endif 
255b d1				pop de	; reset de token to look for 
255c d5				push de 
255d 18 e1			jr .fnt1 
255f				 
255f			.fntmatch1: 
255f			 
255f				; is the same char a null which means we might have a full hit? 
255f					if DEBUG_FORTH 
255f						DMARK "NT4" 
255f						CALLMONITOR 
255f					endif 
255f			 
255f fe 00			cp 0 
2561 28 0b			jr z, .fntmatchyes 
2563			 
2563				; are we at the end of the token to find? 
2563			 
2563					if DEBUG_FORTH 
2563						DMARK "NT5" 
2563						CALLMONITOR 
2563					endif 
2563 3e 00			ld a, 0 
2565 b9				cp c 
2566			 
2566 c2 50 25			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
2569			 
2569					if DEBUG_FORTH 
2569						DMARK "NT6" 
2569						CALLMONITOR 
2569					endif 
2569				; token to find is exhusted but no match to stream 
2569			 
2569				; restore tok pointer and continue on 
2569 d1				pop de 
256a d5				push de 
256b c3 40 25			jp .fnt1 
256e			 
256e			 
256e			.fntmatchyes: 
256e			 
256e				; hl now contains the end of the found token 
256e			 
256e				; get rid of saved token pointer to find 
256e			 
256e d1				pop de 
256f			 
256f					if DEBUG_FORTH 
256f						DMARK "NT9" 
256f						CALLMONITOR 
256f					endif 
256f			 
256f				; hl will be on the null term so forward on 
256f			 
256f				; get back the saved start of the token 
256f			 
256f d9				exx 
2570 e5				push hl     ; save start of token just in case it is the right one 
2571 d9				exx 
2572 e1				pop hl        ; save it to hl 
2573			 
2573 c9				ret 
2574			 
2574			 
2574			; LIST needs to find a specific token   
2574			; FORGET needs to find a spefici token 
2574			 
2574			; SAVE needs to find all tokens by flag 
2574			; WORDS just needs to scan through all  by flag 
2574			; UWORDS needs to scan through all by flag 
2574			 
2574			 
2574			; given hl as pointer to start of dict look up string 
2574			; return hl as pointer to start of word block 
2574			; or 0 if not found 
2574			 
2574			forth_find_tok: 
2574 c9				ret 
2575			 
2575			; given hl as pointer to dict structure 
2575			; move to the next dict block structure 
2575			 
2575			forth_tok_next: 
2575				; hl now points to the address of the next word pointer  
2575				; TODO skip compiled symbol for now 
2575			;	push de 
2575 23				inc hl 
2576 5e				ld e, (hl) 
2577 23				inc hl 
2578 56				ld d, (hl) 
2579 23				inc hl 
257a			 
257a eb				ex de,hl 
257b			if DEBUG_FORTH_PARSE_NEXTWORD 
257b				push bc 
257b				ld bc, (cli_nextword) 
257b						DMARK "NXW" 
257b				CALLMONITOR 
257b				pop bc 
257b			endif 
257b			;	pop de	 
257b c9				ret 
257c			 
257c			 
257c			 
257c			; eof 
# End of file forth_parserv6.asm
257c				include "forth_wordsv4.asm" 
257c			 
257c			; the core word dictionary v4 
257c			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
257c			 
257c			; this is a linked list for each of the system words used 
257c			; user defined words will follow the same format but will be in ram 
257c			 
257c			 
257c			; 
257c			; 
257c			; define linked list: 
257c			; 
257c			; 1. compiled byte op code 
257c			; 2. len of text word 
257c			; 3. text word 
257c			; 4. ptr to next dictionary word 
257c			; 5. asm, calls etc for the word 
257c			; 
257c			;  if 1 == 0 then last word in dict  
257c			;   
257c			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
257c			;  
257c			;  
257c			; create basic standard set of words 
257c			; 
257c			;  
257c			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
257c			; 2DUP 2DROP 2SWAP  
257c			; @ C@ - get byte  
257c			; ! C! - store byte 
257c			; 0< true if less than zero 
257c			; 0= true if zero 
257c			; < >  
257c			; = true if same 
257c			; variables 
257c			 
257c			 
257c			; Hardware specific words I may need 
257c			; 
257c			; IN OUT  
257c			; calls to key util functions 
257c			; calls to hardward abstraction stuff 
257c			; easy control of frame buffers and lcd i/o 
257c			; keyboard  
257c			 
257c			 
257c			;DICT: macro 
257c			; op_code, len, word, next 
257c			;    word: 
257c			;    db op_code 
257c			;    ds word zero term 
257c			;    dw next 
257c			;    endm 
257c			 
257c			 
257c			 
257c			 
257c			; op code 1 is a flag for user define words which are to be handled differently 
257c			 
257c			 
257c			; 
257c			; 
257c			;    TODO on entry to a word this should be the expected environment 
257c			;    hl - tos value if number then held, if string this is the ptr 
257c			;    de -  
257c			 
257c			 
257c			; opcode ranges 
257c			; 0 - end of word dict 
257c			; 255 - user define words 
257c			 
257c			sysdict: 
257c			include "forth_opcodes.asm" 
257c			; op codes for forth keywords 
257c			 
257c			; Changing use of opcodes to flag is the word exists in compiled form or not.  
257c			; This provides a means to compile uwords if required for higher performance 
257c			; by avoiding the use of the keyword parser and just jumping directly to the code 
257c			; Actually there is already a flag for if the code exists as binary thinking about it... 
257c			 
257c			 
257c			 
257c			 
257c			 
257c			; free to use code 0  
257c				OPCODE_HEAP: equ  1 
257c				OPCODE_EXEC: equ 2 
257c				OPCODE_DUP: equ 3 
257c				OPCODE_SWAP: equ 4 
257c				OPCODE_COLN: equ 5 
257c				OPCODE_SCOLN: equ 6 
257c				OPCODE_DROP: equ 7 
257c				OPCODE_DUP2: equ 8 
257c				OPCODE_DROP2: equ 9 
257c				OPCODE_SWAP2: equ 10 
257c				OPCODE_AT: equ 11 
257c				OPCODE_CAT: equ 12 
257c				OPCODE_BANG: equ 13 
257c				OPCODE_CBANG: equ 14 
257c				OPCODE_SCALL: equ 15 
257c				OPCODE_DEPTH: equ 16 
257c				OPCODE_OVER: equ 17 
257c				OPCODE_PAUSE: equ 18 
257c				OPCODE_PAUSES: equ 19 
257c				OPCODE_ROT: equ 20 
257c			;free to reuse	OPCODE_WORDS: equ 21 
257c			        OPCODE_NOT: equ 21 
257c				OPCODE_UWORDS: equ 22 
257c				OPCODE_BP: equ 23 
257c				OPCODE_MONITOR: equ 24  
257c				OPCODE_MALLOC: equ 25 
257c				OPCODE_FREE: equ 26 
257c				OPCODE_LIST: equ 27 
257c				OPCODE_FORGET: equ 28 
257c				OPCODE_NOP: equ 29 
257c				OPCODE_COMO: equ 30 
257c				OPCODE_COMC: equ 31 
257c			;free to reuse	OPCODE_ENDCORE: equ 32 
257c				OPCODE_AFTERSOUND: equ 33 
257c				OPCODE_GP2: equ 34 
257c				OPCODE_GP3: equ 35 
257c				OPCODE_GP4: equ 36 
257c				OPCODE_SIN: equ 37 
257c				OPCODE_SOUT: equ 38 
257c				OPCODE_SPIO: equ 39 
257c				OPCODE_SPICEH: equ 40 
257c				OPCODE_SPIOb: equ 41 
257c				OPCODE_SPII: equ 42 
257c				OPCODE_SESEL: equ 43 
257c				OPCODE_CARTDEV: equ 44 
257c			; free to reuse	OPCODE_ENDDEVICE: equ 45 
257c				OPCODE_FB: equ 46 
257c				OPCODE_EMIT: equ 47 
257c				OPCODE_DOTH: equ 48 
257c				OPCODE_DOTF: equ 49 
257c				OPCODE_DOT: equ 50 
257c				OPCODE_CLS: equ 51 
257c				OPCODE_DRAW: equ 52 
257c				OPCODE_DUMP: equ 53 
257c				OPCODE_CDUMP: equ 54 
257c				OPCODE_DAT: equ 55 
257c				OPCODE_HOME: equ 56 
257c				OPCODE_SPACE: equ 57 
257c				OPCODE_SPACES: equ 58 
257c				OPCODE_SCROLL: equ 59 
257c				OPCODE_ATQ: equ 60 
257c				OPCODE_AUTODSP: equ 61 
257c				OPCODE_MENU: equ 62 
257c			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
257c				OPCODE_THEN: equ 64 
257c				OPCODE_ELSE: equ 65 
257c				OPCODE_DO: equ 66 
257c				OPCODE_LOOP: equ 67 
257c				OPCODE_I: equ 68 
257c				OPCODE_DLOOP: equ 69  
257c				OPCODE_REPEAT: equ 70  
257c				OPCODE_UNTIL: equ 71 
257c				OPCODE_ENDFLOW: equ 72 
257c				OPCODE_WAITK: equ 73 
257c				OPCODE_ACCEPT: equ 74 
257c				OPCODE_EDIT: equ 75 
257c			;free to reuse	OPCODE_ENDKEY: equ 76 
257c				OPCODE_LZERO: equ 77 
257c				OPCODE_TZERO: equ 78 
257c				OPCODE_LESS: equ 79 
257c				OPCODE_GT: equ 80 
257c				OPCODE_EQUAL: equ 81  
257c			;free to reuse	OPCODE_ENDLOGIC: equ 82 
257c				OPCODE_NEG: equ 83 
257c				OPCODE_DIV: equ 84 
257c				OPCODE_MUL: equ 85 
257c				OPCODE_MIN: equ 86 
257c				OPCODE_MAX: equ 87 
257c				OPCODE_RND16: equ 88 
257c				OPCODE_RND8: equ 89 
257c				OPCODE_RND: equ 90 
257c			;free to reuse	OPCODE_ENDMATHS: equ 91  
257c				OPCODE_BYNAME: equ 92 
257c				OPCODE_DIR: equ 93 
257c				OPCODE_SAVE: equ 94 
257c				OPCODE_LOAD: equ 95 
257c				OPCODE_BSAVE: equ 96 
257c				OPCODE_BLOAD: equ 97 
257c				OPCODE_SEO: equ 98  
257c				OPCODE_SEI: equ 99 
257c				OPCODE_SFREE: equ 100 
257c				OPCODE_SIZE: equ 101 
257c				OPCODE_CREATE: equ 102 
257c				OPCODE_APPEND: equ 103 
257c				OPCODE_SDEL: equ 104 
257c				OPCODE_OPEN: equ 105 
257c				OPCODE_READ: equ 106 
257c				OPCODE_EOF: equ 106 
257c				OPCODE_FORMAT: equ 107 
257c				OPCODE_LABEL: equ 108 
257c				OPCODE_LABELS: equ 109 
257c			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
257c				OPCODE_UPPER: equ 111 
257c				OPCODE_LOWER: equ 112 
257c				OPCODE_SUBSTR: equ 113 
257c				OPCODE_LEFT: equ 114 
257c				OPCODE_RIGHT: equ 115 
257c				OPCODE_STR2NUM: equ 116 
257c				OPCODE_NUM2STR: equ 117 
257c				OPCODE_CONCAT: equ 118 
257c				OPCODE_FIND: equ 119 
257c				OPCODE_LEN: equ 120 
257c				OPCODE_CHAR: equ 121 
257c			; free to reuse	OPCODE_STRLEN: equ 122 
257c			; free to reuse	OPCODE_ENDSTR: equ 123 
257c				OPCODE_V0S: equ 124 
257c				OPCODE_V0Q: equ 125 
257c				OPCODE_V1S: equ 126 
257c				OPCODE_V1Q: equ 127 
257c				OPCODE_V2S: equ 128 
257c				OPCODE_V2Q: equ 129 
257c				OPCODE_V3S: equ 130 
257c				OPCODE_V3Q: equ 131 
257c			;free to reuse	OPCODE_END: equ 132 
257c				OPCODE_ZDUP: equ 133 
257c			 
257c			; eof 
# End of file forth_opcodes.asm
257c			 
257c			include "forth_words_core.asm" 
257c			 
257c			; | ## Core Words 
257c			 
257c			;if MALLOC_4 
257c			 
257c			.HEAP: 
257c			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
257c 15				db WORD_SYS_CORE+OPCODE_HEAP             
257d bb 25			dw .EXEC            
257f 05				db 4 + 1 
2580 .. 00			db "HEAP",0              
2585				endm 
# End of macro CWHEAD
2585			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2585			; | | u1 - Current number of bytes in the heap 
2585			; | | u2 - Remaining bytes left on the heap 
2585			; | |  
2585			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2585			 
2585			 
2585				if DEBUG_FORTH_WORDS_KEY 
2585					DMARK "HEP" 
2585 f5				push af  
2586 3a 9a 25			ld a, (.dmark)  
2589 32 a0 fd			ld (debug_mark),a  
258c 3a 9b 25			ld a, (.dmark+1)  
258f 32 a1 fd			ld (debug_mark+1),a  
2592 3a 9c 25			ld a, (.dmark+2)  
2595 32 a2 fd			ld (debug_mark+2),a  
2598 18 03			jr .pastdmark  
259a ..			.dmark: db "HEP"  
259d f1			.pastdmark: pop af  
259e			endm  
# End of macro DMARK
259e					CALLMONITOR 
259e cd aa fd			call debug_vector  
25a1				endm  
# End of macro CALLMONITOR
25a1				endif 
25a1 2a 0a 80			ld hl, (free_list )      
25a4 11 0e 80			ld de, heap_start 
25a7			 
25a7 ed 52			sbc hl, de  
25a9			 
25a9 cd 48 20			call forth_push_numhl 
25ac			 
25ac			 
25ac ed 5b 0a 80		ld de, (free_list )      
25b0 21 d1 f0			ld hl, heap_end 
25b3			 
25b3 ed 52			sbc hl, de 
25b5			 
25b5 cd 48 20			call forth_push_numhl 
25b8				 
25b8			 
25b8				 
25b8			 
25b8			 
25b8			 
25b8				NEXTW 
25b8 c3 38 24			jp macro_next 
25bb				endm 
# End of macro NEXTW
25bb			;endif 
25bb			 
25bb			.EXEC: 
25bb			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
25bb			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
25bb			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
25bb			;; > > 
25bb			;; > >   
25bb			;	STACKFRAME OFF $5efe $5f9f 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS_KEY 
25bb			;			DMARK "EXE" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			; 
25bb			;	FORTH_DSP_VALUEHL 
25bb			; 
25bb			;	FORTH_DSP_POP 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX1" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;;	ld e,(hl) 
25bb			;;	inc hl 
25bb			;;	ld d,(hl) 
25bb			;;	ex de,hl 
25bb			; 
25bb			;;		if DEBUG_FORTH_WORDS 
25bb			;;			DMARK "EX2" 
25bb			;;			CALLMONITOR 
25bb			;;		endif 
25bb			;	push hl 
25bb			; 
25bb			;	;ld a, 0 
25bb			;	;ld a, FORTH_END_BUFFER 
25bb			;	call strlenz 
25bb			;	inc hl   ; include zero term to copy 
25bb			;	inc hl   ; include term 
25bb			;	inc hl   ; include term 
25bb			;	ld b,0 
25bb			;	ld c,l 
25bb			;	pop hl 
25bb			;	ld de, execscratch 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX3" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	ldir 
25bb			; 
25bb			; 
25bb			;	ld hl, execscratch 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EXe" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			; 
25bb			;	call forthparse 
25bb			;	call forthexec 
25bb			;;	call forthexec_cleanup 
25bb			;;	call forthparse 
25bb			;;	call forthexec 
25bb			; 
25bb			;	STACKFRAMECHK OFF $5efe $5f9f 
25bb			; 
25bb			;	; an immediate word so no need to process any more words 
25bb			;	ret 
25bb			;	NEXTW 
25bb			 
25bb			; dead code - old version  
25bb			;	FORTH_RSP_NEXT 
25bb			 
25bb			;  
25bb			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
25bb			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
25bb			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
25bb			;	push hl 
25bb			;	push de 
25bb			;	push bc 
25bb			; 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS_KEY 
25bb			;			DMARK "EXR" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			; 
25bb			; 
25bb			; 
25bb			;	;v5 FORTH_DSP_VALUE 
25bb			;	FORTH_DSP_VALUEHL 
25bb			; 
25bb			;	; TODO do string type checks 
25bb			; 
25bb			;;v5	inc hl   ; skip type 
25bb			; 
25bb			;	push hl  ; source code  
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX1" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	ld a, 0 
25bb			;	call strlent 
25bb			; 
25bb			;	inc hl 
25bb			;	inc hl 
25bb			;	inc hl 
25bb			;	inc hl 
25bb			; 
25bb			;	push hl    ; size 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX2" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	call malloc 
25bb			; 
25bb			;	ex de, hl    ; de now contains malloc area 
25bb			;	pop bc   	; get byte count 
25bb			;	pop hl      ; get string to copy 
25bb			; 
25bb			;	push de     ; save malloc for free later 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX3" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	ldir       ; duplicate string 
25bb			; 
25bb			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
25bb			;	 
25bb			;	; TODO fix the parse would be better than this...  
25bb			;	ex de, hl 
25bb			;	dec hl 
25bb			;	ld a, 0 
25bb			;	ld (hl), a 
25bb			;	dec hl 
25bb			;	ld a, ' ' 
25bb			;	ld (hl), a 
25bb			;	dec hl 
25bb			;	ld (hl), a 
25bb			; 
25bb			;	dec hl 
25bb			;	ld (hl), a 
25bb			; 
25bb			; 
25bb			;	FORTH_DSP_POP  
25bb			; 
25bb			;	pop hl     
25bb			;	push hl    ; save malloc area 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX4" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			; 
25bb			;	call forthparse 
25bb			;	call forthexec 
25bb			;	 
25bb			;	pop hl 
25bb			;	if DEBUG_FORTH_WORDS 
25bb			;		DMARK "EX5" 
25bb			;		CALLMONITOR 
25bb			;	endif 
25bb			; 
25bb			;	if FORTH_ENABLE_FREE 
25bb			;	call free 
25bb			;	endif 
25bb			; 
25bb			;	if DEBUG_FORTH_WORDS 
25bb			;		DMARK "EX6" 
25bb			;		CALLMONITOR 
25bb			;	endif 
25bb			; 
25bb			;	pop bc 
25bb			;	pop de 
25bb			;	pop hl 
25bb			;;	FORTH_RSP_POP	  
25bb			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
25bb			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
25bb			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
25bb			; 
25bb			;	if DEBUG_FORTH_WORDS 
25bb			;		DMARK "EX7" 
25bb			;		CALLMONITOR 
25bb			;	endif 
25bb			;	NEXTW 
25bb			 
25bb			;.STKEXEC: 
25bb			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
25bb			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
25bb			; 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS_KEY 
25bb			;			DMARK "STX" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			; 
25bb			;	FORTH_DSP_VALUEHL 
25bb			; 
25bb			;	ld (store_tmp1), hl    ; count 
25bb			; 
25bb			;	FORTH_DSP_POP 
25bb			;.stkexec1: 
25bb			;	ld hl, (store_tmp1)   ; count 
25bb			;	ld a, 0 
25bb			;	cp l 
25bb			;	ret z 
25bb			; 
25bb			;	dec hl 
25bb			;	ld (store_tmp1), hl    ; count 
25bb			;	 
25bb			;	FORTH_DSP_VALUEHL 
25bb			;	push hl 
25bb			;	 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EXp" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	FORTH_DSP_POP 
25bb			; 
25bb			;	call strlenz 
25bb			;	inc hl   ; include zero term to copy 
25bb			;	inc hl   ; include zero term to copy 
25bb			;	inc hl   ; include zero term to copy 
25bb			;	ld b,0 
25bb			;	ld c,l 
25bb			;	pop hl 
25bb			;	ld de, execscratch 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EX3" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	ldir 
25bb			; 
25bb			; 
25bb			;	ld hl, execscratch 
25bb			; 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EXP" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			; 
25bb			;	call forthparse 
25bb			;	ld hl, execscratch 
25bb			;		if DEBUG_FORTH_WORDS 
25bb			;			DMARK "EXx" 
25bb			;			CALLMONITOR 
25bb			;		endif 
25bb			;	call forthexec 
25bb			; 
25bb			;	jp .stkexec1 
25bb			; 
25bb			;	ret 
25bb			 
25bb			 
25bb			.DUP: 
25bb			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
25bb 17				db WORD_SYS_CORE+OPCODE_DUP             
25bc 31 26			dw .ZDUP            
25be 04				db 3 + 1 
25bf .. 00			db "DUP",0              
25c3				endm 
# End of macro CWHEAD
25c3			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
25c3			 
25c3				if DEBUG_FORTH_WORDS_KEY 
25c3					DMARK "DUP" 
25c3 f5				push af  
25c4 3a d8 25			ld a, (.dmark)  
25c7 32 a0 fd			ld (debug_mark),a  
25ca 3a d9 25			ld a, (.dmark+1)  
25cd 32 a1 fd			ld (debug_mark+1),a  
25d0 3a da 25			ld a, (.dmark+2)  
25d3 32 a2 fd			ld (debug_mark+2),a  
25d6 18 03			jr .pastdmark  
25d8 ..			.dmark: db "DUP"  
25db f1			.pastdmark: pop af  
25dc			endm  
# End of macro DMARK
25dc					CALLMONITOR 
25dc cd aa fd			call debug_vector  
25df				endm  
# End of macro CALLMONITOR
25df				endif 
25df			 
25df				FORTH_DSP 
25df cd 13 22			call macro_forth_dsp 
25e2				endm 
# End of macro FORTH_DSP
25e2			 
25e2 7e				ld a, (HL) 
25e3 fe 01			cp DS_TYPE_STR 
25e5 20 25			jr nz, .dupinum 
25e7			 
25e7				; push another string 
25e7			 
25e7				FORTH_DSP_VALUEHL     		 
25e7 cd 4d 22			call macro_dsp_valuehl 
25ea				endm 
# End of macro FORTH_DSP_VALUEHL
25ea			 
25ea			if DEBUG_FORTH_WORDS 
25ea				DMARK "DUs" 
25ea f5				push af  
25eb 3a ff 25			ld a, (.dmark)  
25ee 32 a0 fd			ld (debug_mark),a  
25f1 3a 00 26			ld a, (.dmark+1)  
25f4 32 a1 fd			ld (debug_mark+1),a  
25f7 3a 01 26			ld a, (.dmark+2)  
25fa 32 a2 fd			ld (debug_mark+2),a  
25fd 18 03			jr .pastdmark  
25ff ..			.dmark: db "DUs"  
2602 f1			.pastdmark: pop af  
2603			endm  
# End of macro DMARK
2603				CALLMONITOR 
2603 cd aa fd			call debug_vector  
2606				endm  
# End of macro CALLMONITOR
2606			endif 
2606 cd b6 20			call forth_push_str 
2609			 
2609				NEXTW 
2609 c3 38 24			jp macro_next 
260c				endm 
# End of macro NEXTW
260c			 
260c			 
260c			.dupinum: 
260c				 
260c			 
260c			 
260c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
260c cd 4d 22			call macro_dsp_valuehl 
260f				endm 
# End of macro FORTH_DSP_VALUEHL
260f			 
260f			; TODO add floating point number detection 
260f			 
260f			if DEBUG_FORTH_WORDS 
260f				DMARK "DUi" 
260f f5				push af  
2610 3a 24 26			ld a, (.dmark)  
2613 32 a0 fd			ld (debug_mark),a  
2616 3a 25 26			ld a, (.dmark+1)  
2619 32 a1 fd			ld (debug_mark+1),a  
261c 3a 26 26			ld a, (.dmark+2)  
261f 32 a2 fd			ld (debug_mark+2),a  
2622 18 03			jr .pastdmark  
2624 ..			.dmark: db "DUi"  
2627 f1			.pastdmark: pop af  
2628			endm  
# End of macro DMARK
2628				CALLMONITOR 
2628 cd aa fd			call debug_vector  
262b				endm  
# End of macro CALLMONITOR
262b			endif 
262b			 
262b cd 48 20			call forth_push_numhl 
262e				NEXTW 
262e c3 38 24			jp macro_next 
2631				endm 
# End of macro NEXTW
2631			.ZDUP: 
2631			CWHEAD .DMRK OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2631 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2632 69 26			dw .DMRK            
2634 05				db 4 + 1 
2635 .. 00			db "?DUP",0              
263a				endm 
# End of macro CWHEAD
263a			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
263a			 
263a				if DEBUG_FORTH_WORDS_KEY 
263a					DMARK "qDU" 
263a f5				push af  
263b 3a 4f 26			ld a, (.dmark)  
263e 32 a0 fd			ld (debug_mark),a  
2641 3a 50 26			ld a, (.dmark+1)  
2644 32 a1 fd			ld (debug_mark+1),a  
2647 3a 51 26			ld a, (.dmark+2)  
264a 32 a2 fd			ld (debug_mark+2),a  
264d 18 03			jr .pastdmark  
264f ..			.dmark: db "qDU"  
2652 f1			.pastdmark: pop af  
2653			endm  
# End of macro DMARK
2653					CALLMONITOR 
2653 cd aa fd			call debug_vector  
2656				endm  
# End of macro CALLMONITOR
2656				endif 
2656				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2656 cd 4d 22			call macro_dsp_valuehl 
2659				endm 
# End of macro FORTH_DSP_VALUEHL
2659			 
2659 e5				push hl 
265a			 
265a				; is it a zero? 
265a			 
265a 3e 00			ld a, 0 
265c 84				add h 
265d 85				add l 
265e			 
265e e1				pop hl 
265f			 
265f fe 00			cp 0 
2661 28 03			jr z, .dup2orig 
2663			 
2663			 
2663 cd 48 20			call forth_push_numhl 
2666			 
2666			 
2666			; TODO add floating point number detection 
2666			 
2666			.dup2orig: 
2666			 
2666				NEXTW 
2666 c3 38 24			jp macro_next 
2669				endm 
# End of macro NEXTW
2669			.DMRK: 
2669			CWHEAD .LSHIFT OPCODE_ZDUP "DMARK" 5 WORD_FLAG_CODE 
2669 99				db WORD_SYS_CORE+OPCODE_ZDUP             
266a a6 26			dw .LSHIFT            
266c 06				db 5 + 1 
266d .. 00			db "DMARK",0              
2673				endm 
# End of macro CWHEAD
2673			; | DMARK ( s --  )  Set the debug marker id to first three chars of s | DONE 
2673			; | | Most useful for tracing your code for errors as you can set various markers to display when MONITOR is called 
2673				if DEBUG_FORTH_WORDS_KEY 
2673					DMARK "DMK" 
2673 f5				push af  
2674 3a 88 26			ld a, (.dmark)  
2677 32 a0 fd			ld (debug_mark),a  
267a 3a 89 26			ld a, (.dmark+1)  
267d 32 a1 fd			ld (debug_mark+1),a  
2680 3a 8a 26			ld a, (.dmark+2)  
2683 32 a2 fd			ld (debug_mark+2),a  
2686 18 03			jr .pastdmark  
2688 ..			.dmark: db "DMK"  
268b f1			.pastdmark: pop af  
268c			endm  
# End of macro DMARK
268c					CALLMONITOR 
268c cd aa fd			call debug_vector  
268f				endm  
# End of macro CALLMONITOR
268f				endif 
268f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
268f cd 4d 22			call macro_dsp_valuehl 
2692				endm 
# End of macro FORTH_DSP_VALUEHL
2692			 
2692 7e				ld a, (hl) 
2693 32 a0 fd			ld (debug_mark),a 
2696 23				inc hl 
2697 7e				ld a, (hl) 
2698 32 a1 fd			ld (debug_mark+1),a 
269b 23				inc hl 
269c 7e				ld a, (hl) 
269d 32 a2 fd			ld (debug_mark+2),a 
26a0			 
26a0			 
26a0				FORTH_DSP_POP 
26a0 cd 05 23			call macro_forth_dsp_pop 
26a3				endm 
# End of macro FORTH_DSP_POP
26a3				NEXTW 
26a3 c3 38 24			jp macro_next 
26a6				endm 
# End of macro NEXTW
26a6			.LSHIFT: 
26a6			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
26a6 99				db WORD_SYS_CORE+OPCODE_ZDUP             
26a7 da 26			dw .RSHIFT            
26a9 07				db 6 + 1 
26aa .. 00			db "LSHIFT",0              
26b1				endm 
# End of macro CWHEAD
26b1			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
26b1				if DEBUG_FORTH_WORDS_KEY 
26b1					DMARK "LSH" 
26b1 f5				push af  
26b2 3a c6 26			ld a, (.dmark)  
26b5 32 a0 fd			ld (debug_mark),a  
26b8 3a c7 26			ld a, (.dmark+1)  
26bb 32 a1 fd			ld (debug_mark+1),a  
26be 3a c8 26			ld a, (.dmark+2)  
26c1 32 a2 fd			ld (debug_mark+2),a  
26c4 18 03			jr .pastdmark  
26c6 ..			.dmark: db "LSH"  
26c9 f1			.pastdmark: pop af  
26ca			endm  
# End of macro DMARK
26ca					CALLMONITOR 
26ca cd aa fd			call debug_vector  
26cd				endm  
# End of macro CALLMONITOR
26cd				endif 
26cd				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26cd cd 4d 22			call macro_dsp_valuehl 
26d0				endm 
# End of macro FORTH_DSP_VALUEHL
26d0				FORTH_DSP_POP 
26d0 cd 05 23			call macro_forth_dsp_pop 
26d3				endm 
# End of macro FORTH_DSP_POP
26d3			 
26d3 29				add hl, hl 
26d4 cd 48 20			call forth_push_numhl 
26d7				NEXTW 
26d7 c3 38 24			jp macro_next 
26da				endm 
# End of macro NEXTW
26da			.RSHIFT: 
26da			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
26da 99				db WORD_SYS_CORE+OPCODE_ZDUP             
26db 11 27			dw .SWAP            
26dd 07				db 6 + 1 
26de .. 00			db "RSHIFT",0              
26e5				endm 
# End of macro CWHEAD
26e5			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
26e5				if DEBUG_FORTH_WORDS_KEY 
26e5					DMARK "RSH" 
26e5 f5				push af  
26e6 3a fa 26			ld a, (.dmark)  
26e9 32 a0 fd			ld (debug_mark),a  
26ec 3a fb 26			ld a, (.dmark+1)  
26ef 32 a1 fd			ld (debug_mark+1),a  
26f2 3a fc 26			ld a, (.dmark+2)  
26f5 32 a2 fd			ld (debug_mark+2),a  
26f8 18 03			jr .pastdmark  
26fa ..			.dmark: db "RSH"  
26fd f1			.pastdmark: pop af  
26fe			endm  
# End of macro DMARK
26fe					CALLMONITOR 
26fe cd aa fd			call debug_vector  
2701				endm  
# End of macro CALLMONITOR
2701				endif 
2701				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2701 cd 4d 22			call macro_dsp_valuehl 
2704				endm 
# End of macro FORTH_DSP_VALUEHL
2704				FORTH_DSP_POP 
2704 cd 05 23			call macro_forth_dsp_pop 
2707				endm 
# End of macro FORTH_DSP_POP
2707 cb 3c			srl h 
2709 cb 1d			rr l 
270b cd 48 20			call forth_push_numhl 
270e				NEXTW 
270e c3 38 24			jp macro_next 
2711				endm 
# End of macro NEXTW
2711			.SWAP: 
2711			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
2711 18				db WORD_SYS_CORE+OPCODE_SWAP             
2712 65 27			dw .COLN            
2714 05				db 4 + 1 
2715 .. 00			db "SWAP",0              
271a				endm 
# End of macro CWHEAD
271a			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
271a				if DEBUG_FORTH_WORDS_KEY 
271a					DMARK "SWP" 
271a f5				push af  
271b 3a 2f 27			ld a, (.dmark)  
271e 32 a0 fd			ld (debug_mark),a  
2721 3a 30 27			ld a, (.dmark+1)  
2724 32 a1 fd			ld (debug_mark+1),a  
2727 3a 31 27			ld a, (.dmark+2)  
272a 32 a2 fd			ld (debug_mark+2),a  
272d 18 03			jr .pastdmark  
272f ..			.dmark: db "SWP"  
2732 f1			.pastdmark: pop af  
2733			endm  
# End of macro DMARK
2733					CALLMONITOR 
2733 cd aa fd			call debug_vector  
2736				endm  
# End of macro CALLMONITOR
2736				endif 
2736			 
2736			; DONE Use os stack swap memory 
2736			 
2736				FORTH_DSP_PTR 0     ; TOS 
2736 2a 23 f9			ld hl,(cli_data_sp) 
2739 11 00 00			ld de, 0 * 3 
273c ed 52			sbc hl, de 
273e				endm 
# End of macro FORTH_DSP_PTR
273e cd 84 23			call hltostack1 
2741			  
2741				FORTH_DSP_PTR 1     ; TOS 
2741 2a 23 f9			ld hl,(cli_data_sp) 
2744 11 03 00			ld de, 1 * 3 
2747 ed 52			sbc hl, de 
2749				endm 
# End of macro FORTH_DSP_PTR
2749 cd 8a 23			call hltostack2 
274c			 
274c				FORTH_DSP_PTR 0     ; TOS 
274c 2a 23 f9			ld hl,(cli_data_sp) 
274f 11 00 00			ld de, 0 * 3 
2752 ed 52			sbc hl, de 
2754				endm 
# End of macro FORTH_DSP_PTR
2754 cd a2 23			call hlfromstack2 
2757			 
2757				FORTH_DSP_PTR 1     ; TOS 
2757 2a 23 f9			ld hl,(cli_data_sp) 
275a 11 03 00			ld de, 1 * 3 
275d ed 52			sbc hl, de 
275f				endm 
# End of macro FORTH_DSP_PTR
275f cd 9c 23			call hlfromstack1 
2762			;	FORTH_DSP_VALUEHL 
2762			;	push hl     ; w2 
2762			; 
2762			;	FORTH_DSP_POP 
2762			; 
2762			;	FORTH_DSP_VALUEHL 
2762			; 
2762			;	FORTH_DSP_POP 
2762			; 
2762			;	pop de     ; w2	, hl = w1 
2762			; 
2762			;	ex de, hl 
2762			;	push de 
2762			; 
2762			;	call forth_push_numhl 
2762			; 
2762			;	pop hl 
2762			; 
2762			;	call forth_push_numhl 
2762				 
2762			 
2762				NEXTW 
2762 c3 38 24			jp macro_next 
2765				endm 
# End of macro NEXTW
2765			.COLN: 
2765			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2765 19				db WORD_SYS_CORE+OPCODE_COLN             
2766 f1 28			dw .SCOLN            
2768 02				db 1 + 1 
2769 .. 00			db ":",0              
276b				endm 
# End of macro CWHEAD
276b			; | : ( -- )         Create new word | DONE 
276b			 
276b				if DEBUG_FORTH_WORDS_KEY 
276b					DMARK "CLN" 
276b f5				push af  
276c 3a 80 27			ld a, (.dmark)  
276f 32 a0 fd			ld (debug_mark),a  
2772 3a 81 27			ld a, (.dmark+1)  
2775 32 a1 fd			ld (debug_mark+1),a  
2778 3a 82 27			ld a, (.dmark+2)  
277b 32 a2 fd			ld (debug_mark+2),a  
277e 18 03			jr .pastdmark  
2780 ..			.dmark: db "CLN"  
2783 f1			.pastdmark: pop af  
2784			endm  
# End of macro DMARK
2784					CALLMONITOR 
2784 cd aa fd			call debug_vector  
2787				endm  
# End of macro CALLMONITOR
2787				endif 
2787			STACKFRAME OFF $8efe $989f 
2787				if DEBUG_STACK_IMB 
2787					if OFF 
2787						exx 
2787						ld de, $8efe 
2787						ld a, d 
2787						ld hl, curframe 
2787						call hexout 
2787						ld a, e 
2787						ld hl, curframe+2 
2787						call hexout 
2787						ld hl, $8efe 
2787						push hl 
2787						ld hl, $989f 
2787						push hl 
2787						exx 
2787					endif 
2787				endif 
2787			endm 
# End of macro STACKFRAME
2787			; get parser buffer length  of new word 
2787			 
2787			 
2787			 
2787				; move tok past this to start of name defintition 
2787				; TODO get word to define 
2787				; TODO Move past word token 
2787				; TODO get length of string up to the ';' 
2787			 
2787 2a f7 f3		ld hl, (os_tok_ptr) 
278a 23			inc hl 
278b 23			inc hl 
278c			 
278c 3e 3b		ld a, ';' 
278e cd 4f 13		call strlent 
2791			 
2791 7d			ld a,l 
2792 32 e6 f0		ld (os_new_parse_len), a 
2795			 
2795			 
2795			if DEBUG_FORTH_UWORD 
2795 ed 5b f7 f3	ld de, (os_tok_ptr) 
2799					DMARK ":01" 
2799 f5				push af  
279a 3a ae 27			ld a, (.dmark)  
279d 32 a0 fd			ld (debug_mark),a  
27a0 3a af 27			ld a, (.dmark+1)  
27a3 32 a1 fd			ld (debug_mark+1),a  
27a6 3a b0 27			ld a, (.dmark+2)  
27a9 32 a2 fd			ld (debug_mark+2),a  
27ac 18 03			jr .pastdmark  
27ae ..			.dmark: db ":01"  
27b1 f1			.pastdmark: pop af  
27b2			endm  
# End of macro DMARK
27b2			CALLMONITOR 
27b2 cd aa fd			call debug_vector  
27b5				endm  
# End of macro CALLMONITOR
27b5			endif 
27b5			 
27b5			; 
27b5			;  new word memory layout: 
27b5			;  
27b5			;    : adg 6666 ;  
27b5			; 
27b5			;    db   1     ; user defined word  
27b5 23			inc hl    
27b6			;    dw   sysdict 
27b6 23			inc hl 
27b7 23			inc hl 
27b8			;    db <word len>+1 (for null) 
27b8 23			inc hl 
27b9			;    db .... <word> 
27b9			; 
27b9			 
27b9 23			inc hl    ; some extras for the word preamble before the above 
27ba 23			inc hl 
27bb 23			inc hl 
27bc 23			inc hl 
27bd 23			inc hl 
27be 23			inc hl 
27bf 23			inc hl  
27c0 23			inc hl 
27c1 23			inc hl 
27c2 23			inc hl 
27c3 23			inc hl 
27c4 23			inc hl 
27c5 23			inc hl 
27c6 23			inc hl     ; TODO how many do we really need?     maybe only 6 
27c7			;       exec word buffer 
27c7			;	<ptr word>   
27c7 23			inc hl 
27c8 23			inc hl 
27c9			;       <word list><null term> 7F final term 
27c9			 
27c9			 
27c9			if DEBUG_FORTH_UWORD 
27c9					DMARK ":02" 
27c9 f5				push af  
27ca 3a de 27			ld a, (.dmark)  
27cd 32 a0 fd			ld (debug_mark),a  
27d0 3a df 27			ld a, (.dmark+1)  
27d3 32 a1 fd			ld (debug_mark+1),a  
27d6 3a e0 27			ld a, (.dmark+2)  
27d9 32 a2 fd			ld (debug_mark+2),a  
27dc 18 03			jr .pastdmark  
27de ..			.dmark: db ":02"  
27e1 f1			.pastdmark: pop af  
27e2			endm  
# End of macro DMARK
27e2			CALLMONITOR 
27e2 cd aa fd			call debug_vector  
27e5				endm  
# End of macro CALLMONITOR
27e5			endif 
27e5			 
27e5			 
27e5				; malloc the size 
27e5			 
27e5 cd b9 13			call malloc 
27e8 22 e8 f0			ld (os_new_malloc), hl     ; save malloc start 
27eb			 
27eb			;    db   1     ; user defined word  
27eb 3e 01			ld a, WORD_SYS_UWORD  
27ed 77				ld (hl), a 
27ee			 
27ee 23			inc hl    
27ef			;    dw   sysdict 
27ef 11 7c 25		ld de, sysdict       ; continue on with the scan to the system dict 
27f2 73			ld (hl), e 
27f3 23			inc hl 
27f4 72			ld (hl), d 
27f5 23			inc hl 
27f6			 
27f6			 
27f6			;    Setup dict word 
27f6			 
27f6 23			inc hl 
27f7 22 e2 f0		ld (os_new_work_ptr), hl     ; save start of dict word  
27fa			 
27fa			; 1. get length of dict word 
27fa			 
27fa			 
27fa 2a f7 f3		ld hl, (os_tok_ptr) 
27fd 23			inc hl 
27fe 23			inc hl    ; position to start of dict word 
27ff 3e 00		ld a, 0 
2801 cd 4f 13		call strlent 
2804			 
2804			 
2804 23			inc hl    ; to include null??? 
2805			 
2805			; write length of dict word 
2805			 
2805 ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2809 1b			dec de 
280a eb			ex de, hl 
280b 73			ld (hl), e 
280c eb			ex de, hl 
280d			 
280d			 
280d			 
280d			; copy  
280d 4d			ld c, l 
280e 06 00		ld b, 0 
2810 ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2814 2a f7 f3		ld hl, (os_tok_ptr) 
2817 23			inc hl 
2818 23			inc hl    ; position to start of dict word 
2819			 
2819			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2819			 
2819			; TODO need to convert word to upper case 
2819			 
2819			ucasetok:	 
2819 7e			ld a,(hl) 
281a cd 3b 13		call toUpper 
281d 77			ld (hl),a 
281e ed a0		ldi 
2820 f2 19 28		jp p, ucasetok 
2823			 
2823			 
2823			 
2823			; de now points to start of where the word body code should be placed 
2823 ed 53 e2 f0	ld (os_new_work_ptr), de 
2827			; hl now points to the words to throw at forthexec which needs to be copied 
2827 22 e0 f0		ld (os_new_src_ptr), hl 
282a			 
282a			; TODO add 'call to forthexec' 
282a			 
282a			if DEBUG_FORTH_UWORD 
282a c5			push bc 
282b ed 4b e8 f0	ld bc, (os_new_malloc) 
282f					DMARK ":0x" 
282f f5				push af  
2830 3a 44 28			ld a, (.dmark)  
2833 32 a0 fd			ld (debug_mark),a  
2836 3a 45 28			ld a, (.dmark+1)  
2839 32 a1 fd			ld (debug_mark+1),a  
283c 3a 46 28			ld a, (.dmark+2)  
283f 32 a2 fd			ld (debug_mark+2),a  
2842 18 03			jr .pastdmark  
2844 ..			.dmark: db ":0x"  
2847 f1			.pastdmark: pop af  
2848			endm  
# End of macro DMARK
2848			CALLMONITOR 
2848 cd aa fd			call debug_vector  
284b				endm  
# End of macro CALLMONITOR
284b c1			pop bc 
284c			endif 
284c			 
284c			 
284c			; create word preamble which should be: 
284c			 
284c			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
284c			 
284c			;    ld hl, <word code> 
284c			;    jp user_exec 
284c			;    <word code bytes> 
284c			 
284c			 
284c			;	inc de     ; TODO ??? or are we already past the word's null 
284c eb			ex de, hl 
284d			 
284d 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
284f			 
284f 23			inc hl 
2850 22 dc f0		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
2853 23			inc hl 
2854			 
2854 23			inc hl 
2855 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
2857			 
2857 01 6e 61		ld bc, user_exec 
285a 23			inc hl 
285b 71			ld (hl), c     ; poke address of user_exec 
285c 23			inc hl 
285d 70			ld (hl), b     
285e			; 
285e			;	inc hl 
285e			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
285e			; 
285e			; 
285e			;	ld bc, macro_forth_rsp_next 
285e			;	inc hl 
285e			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
285e			;	inc hl 
285e			;	ld (hl), b     
285e			; 
285e			;	inc hl 
285e			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
285e			; 
285e			; 
285e			;	inc hl 
285e			;	ld bc, forthexec 
285e			;	ld (hl), c     ; poke address of forthexec 
285e			;	inc hl 
285e			;	ld (hl), b      
285e			; 
285e			;	inc hl 
285e			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
285e			; 
285e			;	ld bc, user_dict_next 
285e			;	inc hl 
285e			;	ld (hl), c     ; poke address of forthexec 
285e			;	inc hl 
285e			;	ld (hl), b      
285e			 
285e			; hl is now where we need to copy the word byte data to save this 
285e			 
285e 23			inc hl 
285f 22 de f0		ld (os_new_exec), hl 
2862			 
2862			; copy definition 
2862			 
2862 eb			ex de, hl 
2863			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
2863			;	inc de    ; skip the PC for this parse 
2863 3a e6 f0		ld a, (os_new_parse_len) 
2866 4f			ld c, a 
2867 06 00		ld b, 0 
2869 ed b0		ldir		 ; copy defintion 
286b			 
286b			 
286b			; poke the address of where the new word bytes live for forthexec 
286b			 
286b 2a dc f0		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
286e			 
286e ed 5b de f0	ld de, (os_new_exec)      
2872			 
2872 73			ld (hl), e 
2873 23			inc hl 
2874 72			ld (hl), d 
2875			 
2875				; TODO copy last user dict word next link to this word 
2875				; TODO update last user dict word to point to this word 
2875			; 
2875			; hl f923 de 812a ; bc 811a 
2875			 
2875			if DEBUG_FORTH_UWORD 
2875 c5			push bc 
2876 ed 4b e8 f0	ld bc, (os_new_malloc) 
287a					DMARK ":0A" 
287a f5				push af  
287b 3a 8f 28			ld a, (.dmark)  
287e 32 a0 fd			ld (debug_mark),a  
2881 3a 90 28			ld a, (.dmark+1)  
2884 32 a1 fd			ld (debug_mark+1),a  
2887 3a 91 28			ld a, (.dmark+2)  
288a 32 a2 fd			ld (debug_mark+2),a  
288d 18 03			jr .pastdmark  
288f ..			.dmark: db ":0A"  
2892 f1			.pastdmark: pop af  
2893			endm  
# End of macro DMARK
2893			CALLMONITOR 
2893 cd aa fd			call debug_vector  
2896				endm  
# End of macro CALLMONITOR
2896 c1			pop bc 
2897			endif 
2897			if DEBUG_FORTH_UWORD 
2897 c5			push bc 
2898 ed 4b e8 f0	ld bc, (os_new_malloc) 
289c 03			inc bc 
289d 03			inc bc 
289e 03			inc bc 
289f 03			inc bc 
28a0 03			inc bc 
28a1 03			inc bc 
28a2 03			inc bc 
28a3 03			inc bc 
28a4			 
28a4					DMARK ":0B" 
28a4 f5				push af  
28a5 3a b9 28			ld a, (.dmark)  
28a8 32 a0 fd			ld (debug_mark),a  
28ab 3a ba 28			ld a, (.dmark+1)  
28ae 32 a1 fd			ld (debug_mark+1),a  
28b1 3a bb 28			ld a, (.dmark+2)  
28b4 32 a2 fd			ld (debug_mark+2),a  
28b7 18 03			jr .pastdmark  
28b9 ..			.dmark: db ":0B"  
28bc f1			.pastdmark: pop af  
28bd			endm  
# End of macro DMARK
28bd			CALLMONITOR 
28bd cd aa fd			call debug_vector  
28c0				endm  
# End of macro CALLMONITOR
28c0 c1			pop bc 
28c1			endif 
28c1			 
28c1			; update word dict linked list for new word 
28c1			 
28c1			 
28c1 2a f3 f3		ld hl, (os_last_new_uword)		; get the start of the last added uword 
28c4 23			inc hl     ; move to next work linked list ptr 
28c5			 
28c5 ed 5b e8 f0	ld de, (os_new_malloc)		 ; new next word 
28c9 73			ld (hl), e 
28ca 23			inc hl 
28cb 72			ld (hl), d 
28cc			 
28cc			if DEBUG_FORTH_UWORD 
28cc ed 4b f3 f3	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
28d0			endif 
28d0			 
28d0 ed 53 f3 f3	ld (os_last_new_uword), de      ; update last new uword ptr 
28d4			 
28d4			 
28d4			if DEBUG_FORTH_UWORD 
28d4					DMARK ":0+" 
28d4 f5				push af  
28d5 3a e9 28			ld a, (.dmark)  
28d8 32 a0 fd			ld (debug_mark),a  
28db 3a ea 28			ld a, (.dmark+1)  
28de 32 a1 fd			ld (debug_mark+1),a  
28e1 3a eb 28			ld a, (.dmark+2)  
28e4 32 a2 fd			ld (debug_mark+2),a  
28e7 18 03			jr .pastdmark  
28e9 ..			.dmark: db ":0+"  
28ec f1			.pastdmark: pop af  
28ed			endm  
# End of macro DMARK
28ed			CALLMONITOR 
28ed cd aa fd			call debug_vector  
28f0				endm  
# End of macro CALLMONITOR
28f0			endif 
28f0			 
28f0			STACKFRAMECHK OFF $8efe $989f 
28f0				if DEBUG_STACK_IMB 
28f0					if OFF 
28f0						exx 
28f0						ld hl, $989f 
28f0						pop de   ; $989f 
28f0						call cmp16 
28f0						jr nz, .spnosame 
28f0						ld hl, $8efe 
28f0						pop de   ; $8efe 
28f0						call cmp16 
28f0						jr z, .spfrsame 
28f0						.spnosame: call showsperror 
28f0						.spfrsame: nop 
28f0						exx 
28f0					endif 
28f0				endif 
28f0			endm 
# End of macro STACKFRAMECHK
28f0			 
28f0 c9			ret    ; dont process any remaining parser tokens as they form new word 
28f1			 
28f1			 
28f1			 
28f1			 
28f1			;		NEXT 
28f1			.SCOLN: 
28f1			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
28f1 06			db OPCODE_SCOLN 
28f2 3d 29		dw .DROP 
28f4 02			db 2 
28f5 .. 00		db ";",0           
28f7			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
28f7				if DEBUG_FORTH_WORDS_KEY 
28f7					DMARK "SCN" 
28f7 f5				push af  
28f8 3a 0c 29			ld a, (.dmark)  
28fb 32 a0 fd			ld (debug_mark),a  
28fe 3a 0d 29			ld a, (.dmark+1)  
2901 32 a1 fd			ld (debug_mark+1),a  
2904 3a 0e 29			ld a, (.dmark+2)  
2907 32 a2 fd			ld (debug_mark+2),a  
290a 18 03			jr .pastdmark  
290c ..			.dmark: db "SCN"  
290f f1			.pastdmark: pop af  
2910			endm  
# End of macro DMARK
2910					CALLMONITOR 
2910 cd aa fd			call debug_vector  
2913				endm  
# End of macro CALLMONITOR
2913				endif 
2913				FORTH_RSP_TOS 
2913 cd 06 20			call macro_forth_rsp_tos 
2916				endm 
# End of macro FORTH_RSP_TOS
2916 e5				push hl 
2917				FORTH_RSP_POP 
2917 cd 10 20			call macro_forth_rsp_pop 
291a				endm 
# End of macro FORTH_RSP_POP
291a e1				pop hl 
291b			;		ex de,hl 
291b 22 f7 f3			ld (os_tok_ptr),hl 
291e			 
291e			if DEBUG_FORTH_UWORD 
291e					DMARK "SCL" 
291e f5				push af  
291f 3a 33 29			ld a, (.dmark)  
2922 32 a0 fd			ld (debug_mark),a  
2925 3a 34 29			ld a, (.dmark+1)  
2928 32 a1 fd			ld (debug_mark+1),a  
292b 3a 35 29			ld a, (.dmark+2)  
292e 32 a2 fd			ld (debug_mark+2),a  
2931 18 03			jr .pastdmark  
2933 ..			.dmark: db "SCL"  
2936 f1			.pastdmark: pop af  
2937			endm  
# End of macro DMARK
2937			CALLMONITOR 
2937 cd aa fd			call debug_vector  
293a				endm  
# End of macro CALLMONITOR
293a			endif 
293a				NEXTW 
293a c3 38 24			jp macro_next 
293d				endm 
# End of macro NEXTW
293d			 
293d			.DROP: 
293d			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
293d 1b				db WORD_SYS_CORE+OPCODE_DROP             
293e 68 29			dw .DUP2            
2940 05				db 4 + 1 
2941 .. 00			db "DROP",0              
2946				endm 
# End of macro CWHEAD
2946			; | DROP ( w -- )   drop the TOS item   | DONE 
2946				if DEBUG_FORTH_WORDS_KEY 
2946					DMARK "DRP" 
2946 f5				push af  
2947 3a 5b 29			ld a, (.dmark)  
294a 32 a0 fd			ld (debug_mark),a  
294d 3a 5c 29			ld a, (.dmark+1)  
2950 32 a1 fd			ld (debug_mark+1),a  
2953 3a 5d 29			ld a, (.dmark+2)  
2956 32 a2 fd			ld (debug_mark+2),a  
2959 18 03			jr .pastdmark  
295b ..			.dmark: db "DRP"  
295e f1			.pastdmark: pop af  
295f			endm  
# End of macro DMARK
295f					CALLMONITOR 
295f cd aa fd			call debug_vector  
2962				endm  
# End of macro CALLMONITOR
2962				endif 
2962				FORTH_DSP_POP 
2962 cd 05 23			call macro_forth_dsp_pop 
2965				endm 
# End of macro FORTH_DSP_POP
2965				NEXTW 
2965 c3 38 24			jp macro_next 
2968				endm 
# End of macro NEXTW
2968			.DUP2: 
2968			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2968 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2969 ad 29			dw .DROP2            
296b 05				db 4 + 1 
296c .. 00			db "2DUP",0              
2971				endm 
# End of macro CWHEAD
2971			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
2971				if DEBUG_FORTH_WORDS_KEY 
2971					DMARK "2DU" 
2971 f5				push af  
2972 3a 86 29			ld a, (.dmark)  
2975 32 a0 fd			ld (debug_mark),a  
2978 3a 87 29			ld a, (.dmark+1)  
297b 32 a1 fd			ld (debug_mark+1),a  
297e 3a 88 29			ld a, (.dmark+2)  
2981 32 a2 fd			ld (debug_mark+2),a  
2984 18 03			jr .pastdmark  
2986 ..			.dmark: db "2DU"  
2989 f1			.pastdmark: pop af  
298a			endm  
# End of macro DMARK
298a					CALLMONITOR 
298a cd aa fd			call debug_vector  
298d				endm  
# End of macro CALLMONITOR
298d				endif 
298d				FORTH_DSP_VALUEHL 
298d cd 4d 22			call macro_dsp_valuehl 
2990				endm 
# End of macro FORTH_DSP_VALUEHL
2990 e5				push hl      ; 2 
2991			 
2991				FORTH_DSP_POP 
2991 cd 05 23			call macro_forth_dsp_pop 
2994				endm 
# End of macro FORTH_DSP_POP
2994				 
2994				FORTH_DSP_VALUEHL 
2994 cd 4d 22			call macro_dsp_valuehl 
2997				endm 
# End of macro FORTH_DSP_VALUEHL
2997			;		push hl      ; 1 
2997			 
2997				FORTH_DSP_POP 
2997 cd 05 23			call macro_forth_dsp_pop 
299a				endm 
# End of macro FORTH_DSP_POP
299a			 
299a			;		pop hl       ; 1 
299a d1				pop de       ; 2 
299b			 
299b cd 48 20			call forth_push_numhl 
299e eb				ex de, hl 
299f cd 48 20			call forth_push_numhl 
29a2			 
29a2				 
29a2 eb				ex de, hl 
29a3			 
29a3 cd 48 20			call forth_push_numhl 
29a6 eb				ex de, hl 
29a7 cd 48 20			call forth_push_numhl 
29aa			 
29aa			 
29aa				NEXTW 
29aa c3 38 24			jp macro_next 
29ad				endm 
# End of macro NEXTW
29ad			.DROP2: 
29ad			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
29ad 1d				db WORD_SYS_CORE+OPCODE_DROP2             
29ae dc 29			dw .PICK            
29b0 06				db 5 + 1 
29b1 .. 00			db "2DROP",0              
29b7				endm 
# End of macro CWHEAD
29b7			; | 2DROP ( w w -- )    Double drop | DONE 
29b7				if DEBUG_FORTH_WORDS_KEY 
29b7					DMARK "2DR" 
29b7 f5				push af  
29b8 3a cc 29			ld a, (.dmark)  
29bb 32 a0 fd			ld (debug_mark),a  
29be 3a cd 29			ld a, (.dmark+1)  
29c1 32 a1 fd			ld (debug_mark+1),a  
29c4 3a ce 29			ld a, (.dmark+2)  
29c7 32 a2 fd			ld (debug_mark+2),a  
29ca 18 03			jr .pastdmark  
29cc ..			.dmark: db "2DR"  
29cf f1			.pastdmark: pop af  
29d0			endm  
# End of macro DMARK
29d0					CALLMONITOR 
29d0 cd aa fd			call debug_vector  
29d3				endm  
# End of macro CALLMONITOR
29d3				endif 
29d3				FORTH_DSP_POP 
29d3 cd 05 23			call macro_forth_dsp_pop 
29d6				endm 
# End of macro FORTH_DSP_POP
29d6				FORTH_DSP_POP 
29d6 cd 05 23			call macro_forth_dsp_pop 
29d9				endm 
# End of macro FORTH_DSP_POP
29d9				NEXTW 
29d9 c3 38 24			jp macro_next 
29dc				endm 
# End of macro NEXTW
29dc			.PICK: 
29dc			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
29dc 77				db WORD_SYS_CORE+99             
29dd 76 2a			dw .SWAP2            
29df 05				db 4 + 1 
29e0 .. 00			db "PICK",0              
29e5				endm 
# End of macro CWHEAD
29e5			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | DONE 
29e5			; | | >[!NOTE] 
29e5			; | | > If the chosen item is a string the pointer is pushed to TOS. The string is not safely duplicated. 
29e5				if DEBUG_FORTH_WORDS_KEY 
29e5					DMARK "PIK" 
29e5 f5				push af  
29e6 3a fa 29			ld a, (.dmark)  
29e9 32 a0 fd			ld (debug_mark),a  
29ec 3a fb 29			ld a, (.dmark+1)  
29ef 32 a1 fd			ld (debug_mark+1),a  
29f2 3a fc 29			ld a, (.dmark+2)  
29f5 32 a2 fd			ld (debug_mark+2),a  
29f8 18 03			jr .pastdmark  
29fa ..			.dmark: db "PIK"  
29fd f1			.pastdmark: pop af  
29fe			endm  
# End of macro DMARK
29fe					CALLMONITOR 
29fe cd aa fd			call debug_vector  
2a01				endm  
# End of macro CALLMONITOR
2a01				endif 
2a01			 
2a01				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a01 cd 4d 22			call macro_dsp_valuehl 
2a04				endm 
# End of macro FORTH_DSP_VALUEHL
2a04				 
2a04				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a04 cd 05 23			call macro_forth_dsp_pop 
2a07				endm 
# End of macro FORTH_DSP_POP
2a07			 
2a07				; init from TOS 
2a07 e5				push hl 
2a08				FORTH_DSP 
2a08 cd 13 22			call macro_forth_dsp 
2a0b				endm 
# End of macro FORTH_DSP
2a0b			;	ld hl, cli_data_sp 
2a0b				if DEBUG_FORTH_WORDS 
2a0b					DMARK "PK1" 
2a0b f5				push af  
2a0c 3a 20 2a			ld a, (.dmark)  
2a0f 32 a0 fd			ld (debug_mark),a  
2a12 3a 21 2a			ld a, (.dmark+1)  
2a15 32 a1 fd			ld (debug_mark+1),a  
2a18 3a 22 2a			ld a, (.dmark+2)  
2a1b 32 a2 fd			ld (debug_mark+2),a  
2a1e 18 03			jr .pastdmark  
2a20 ..			.dmark: db "PK1"  
2a23 f1			.pastdmark: pop af  
2a24			endm  
# End of macro DMARK
2a24					CALLMONITOR 
2a24 cd aa fd			call debug_vector  
2a27				endm  
# End of macro CALLMONITOR
2a27				endif 
2a27 c1				pop bc 
2a28 41				ld b,c 
2a29 3e 00			ld a, 0 
2a2b b8				cp b 
2a2c 28 21			jr z, .pdone	 
2a2e			.pkl: 
2a2e 2b				dec hl 
2a2f 2b				dec hl 
2a30 2b				dec hl 
2a31			 
2a31				if DEBUG_FORTH_WORDS 
2a31					DMARK "PKl" 
2a31 f5				push af  
2a32 3a 46 2a			ld a, (.dmark)  
2a35 32 a0 fd			ld (debug_mark),a  
2a38 3a 47 2a			ld a, (.dmark+1)  
2a3b 32 a1 fd			ld (debug_mark+1),a  
2a3e 3a 48 2a			ld a, (.dmark+2)  
2a41 32 a2 fd			ld (debug_mark+2),a  
2a44 18 03			jr .pastdmark  
2a46 ..			.dmark: db "PKl"  
2a49 f1			.pastdmark: pop af  
2a4a			endm  
# End of macro DMARK
2a4a					CALLMONITOR 
2a4a cd aa fd			call debug_vector  
2a4d				endm  
# End of macro CALLMONITOR
2a4d				endif 
2a4d 10 df			djnz .pkl 
2a4f			.pdone: 
2a4f				 
2a4f				; TODO do type check with correct push 
2a4f			 
2a4f 23				inc hl 
2a50				;call loadwordinhl 
2a50 5e				ld e, (hl) 
2a51 23				inc hl 
2a52 56				ld d, (hl) 
2a53 eb				ex de,hl 
2a54				if DEBUG_FORTH_WORDS 
2a54					DMARK "PKp" 
2a54 f5				push af  
2a55 3a 69 2a			ld a, (.dmark)  
2a58 32 a0 fd			ld (debug_mark),a  
2a5b 3a 6a 2a			ld a, (.dmark+1)  
2a5e 32 a1 fd			ld (debug_mark+1),a  
2a61 3a 6b 2a			ld a, (.dmark+2)  
2a64 32 a2 fd			ld (debug_mark+2),a  
2a67 18 03			jr .pastdmark  
2a69 ..			.dmark: db "PKp"  
2a6c f1			.pastdmark: pop af  
2a6d			endm  
# End of macro DMARK
2a6d					CALLMONITOR 
2a6d cd aa fd			call debug_vector  
2a70				endm  
# End of macro CALLMONITOR
2a70				endif 
2a70 cd 48 20			call forth_push_numhl 
2a73			 
2a73				NEXTW 
2a73 c3 38 24			jp macro_next 
2a76				endm 
# End of macro NEXTW
2a76			.SWAP2: 
2a76			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2a76 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2a77 f7 2a			dw .AT            
2a79 06				db 5 + 1 
2a7a .. 00			db "2SWAP",0              
2a80				endm 
# End of macro CWHEAD
2a80			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
2a80				if DEBUG_FORTH_WORDS_KEY 
2a80					DMARK "2SW" 
2a80 f5				push af  
2a81 3a 95 2a			ld a, (.dmark)  
2a84 32 a0 fd			ld (debug_mark),a  
2a87 3a 96 2a			ld a, (.dmark+1)  
2a8a 32 a1 fd			ld (debug_mark+1),a  
2a8d 3a 97 2a			ld a, (.dmark+2)  
2a90 32 a2 fd			ld (debug_mark+2),a  
2a93 18 03			jr .pastdmark  
2a95 ..			.dmark: db "2SW"  
2a98 f1			.pastdmark: pop af  
2a99			endm  
# End of macro DMARK
2a99					CALLMONITOR 
2a99 cd aa fd			call debug_vector  
2a9c				endm  
# End of macro CALLMONITOR
2a9c				endif 
2a9c			; TODO Use os stack swap memory 
2a9c			 
2a9c				FORTH_DSP_PTR 0     ; TOS    w4 
2a9c 2a 23 f9			ld hl,(cli_data_sp) 
2a9f 11 00 00			ld de, 0 * 3 
2aa2 ed 52			sbc hl, de 
2aa4				endm 
# End of macro FORTH_DSP_PTR
2aa4 cd 84 23			call hltostack1 
2aa7			  
2aa7				FORTH_DSP_PTR 1     ; TOS    w3 
2aa7 2a 23 f9			ld hl,(cli_data_sp) 
2aaa 11 03 00			ld de, 1 * 3 
2aad ed 52			sbc hl, de 
2aaf				endm 
# End of macro FORTH_DSP_PTR
2aaf cd 8a 23			call hltostack2 
2ab2			 
2ab2			 
2ab2			 
2ab2				FORTH_DSP_PTR 2     ; TOS    w2 
2ab2 2a 23 f9			ld hl,(cli_data_sp) 
2ab5 11 06 00			ld de, 2 * 3 
2ab8 ed 52			sbc hl, de 
2aba				endm 
# End of macro FORTH_DSP_PTR
2aba cd 90 23			call hltostack3 
2abd			 
2abd				FORTH_DSP_PTR 3     ; TOS   w1 
2abd 2a 23 f9			ld hl,(cli_data_sp) 
2ac0 11 09 00			ld de, 3 * 3 
2ac3 ed 52			sbc hl, de 
2ac5				endm 
# End of macro FORTH_DSP_PTR
2ac5 cd 96 23			call hltostack4 
2ac8			 
2ac8			 
2ac8			 
2ac8			 
2ac8				FORTH_DSP_PTR 0     ; TOS 
2ac8 2a 23 f9			ld hl,(cli_data_sp) 
2acb 11 00 00			ld de, 0 * 3 
2ace ed 52			sbc hl, de 
2ad0				endm 
# End of macro FORTH_DSP_PTR
2ad0 cd a8 23			call hlfromstack3 
2ad3			 
2ad3				FORTH_DSP_PTR 1     ; TOS 
2ad3 2a 23 f9			ld hl,(cli_data_sp) 
2ad6 11 03 00			ld de, 1 * 3 
2ad9 ed 52			sbc hl, de 
2adb				endm 
# End of macro FORTH_DSP_PTR
2adb cd ae 23			call hlfromstack4 
2ade			 
2ade			 
2ade			 
2ade				FORTH_DSP_PTR 2     ; TOS 
2ade 2a 23 f9			ld hl,(cli_data_sp) 
2ae1 11 06 00			ld de, 2 * 3 
2ae4 ed 52			sbc hl, de 
2ae6				endm 
# End of macro FORTH_DSP_PTR
2ae6 cd 9c 23			call hlfromstack1 
2ae9			 
2ae9				FORTH_DSP_PTR 3     ; TOS 
2ae9 2a 23 f9			ld hl,(cli_data_sp) 
2aec 11 09 00			ld de, 3 * 3 
2aef ed 52			sbc hl, de 
2af1				endm 
# End of macro FORTH_DSP_PTR
2af1 cd a2 23			call hlfromstack2 
2af4			 
2af4				NEXTW 
2af4 c3 38 24			jp macro_next 
2af7				endm 
# End of macro NEXTW
2af7			.AT: 
2af7			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
2af7 1f				db WORD_SYS_CORE+OPCODE_AT             
2af8 29 2b			dw .CAT            
2afa 02				db 1 + 1 
2afb .. 00			db "@",0              
2afd				endm 
# End of macro CWHEAD
2afd			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2afd			 
2afd				if DEBUG_FORTH_WORDS_KEY 
2afd					DMARK "AT." 
2afd f5				push af  
2afe 3a 12 2b			ld a, (.dmark)  
2b01 32 a0 fd			ld (debug_mark),a  
2b04 3a 13 2b			ld a, (.dmark+1)  
2b07 32 a1 fd			ld (debug_mark+1),a  
2b0a 3a 14 2b			ld a, (.dmark+2)  
2b0d 32 a2 fd			ld (debug_mark+2),a  
2b10 18 03			jr .pastdmark  
2b12 ..			.dmark: db "AT."  
2b15 f1			.pastdmark: pop af  
2b16			endm  
# End of macro DMARK
2b16					CALLMONITOR 
2b16 cd aa fd			call debug_vector  
2b19				endm  
# End of macro CALLMONITOR
2b19				endif 
2b19			.getbyteat:	 
2b19				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b19 cd 4d 22			call macro_dsp_valuehl 
2b1c				endm 
# End of macro FORTH_DSP_VALUEHL
2b1c				 
2b1c			;		push hl 
2b1c			 
2b1c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b1c cd 05 23			call macro_forth_dsp_pop 
2b1f				endm 
# End of macro FORTH_DSP_POP
2b1f			 
2b1f			;		pop hl 
2b1f			 
2b1f 7e				ld a, (hl) 
2b20			 
2b20 6f				ld l, a 
2b21 26 00			ld h, 0 
2b23 cd 48 20			call forth_push_numhl 
2b26			 
2b26				NEXTW 
2b26 c3 38 24			jp macro_next 
2b29				endm 
# End of macro NEXTW
2b29			.CAT: 
2b29			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2b29 20				db WORD_SYS_CORE+OPCODE_CAT             
2b2a 52 2b			dw .BANG            
2b2c 03				db 2 + 1 
2b2d .. 00			db "C@",0              
2b30				endm 
# End of macro CWHEAD
2b30			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2b30				if DEBUG_FORTH_WORDS_KEY 
2b30					DMARK "CAA" 
2b30 f5				push af  
2b31 3a 45 2b			ld a, (.dmark)  
2b34 32 a0 fd			ld (debug_mark),a  
2b37 3a 46 2b			ld a, (.dmark+1)  
2b3a 32 a1 fd			ld (debug_mark+1),a  
2b3d 3a 47 2b			ld a, (.dmark+2)  
2b40 32 a2 fd			ld (debug_mark+2),a  
2b43 18 03			jr .pastdmark  
2b45 ..			.dmark: db "CAA"  
2b48 f1			.pastdmark: pop af  
2b49			endm  
# End of macro DMARK
2b49					CALLMONITOR 
2b49 cd aa fd			call debug_vector  
2b4c				endm  
# End of macro CALLMONITOR
2b4c				endif 
2b4c c3 19 2b			jp .getbyteat 
2b4f				NEXTW 
2b4f c3 38 24			jp macro_next 
2b52				endm 
# End of macro NEXTW
2b52			.BANG: 
2b52			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2b52 21				db WORD_SYS_CORE+OPCODE_BANG             
2b53 88 2b			dw .CBANG            
2b55 02				db 1 + 1 
2b56 .. 00			db "!",0              
2b58				endm 
# End of macro CWHEAD
2b58			; | ! ( x w -- ) Store x at address w      | DONE 
2b58				if DEBUG_FORTH_WORDS_KEY 
2b58					DMARK "BNG" 
2b58 f5				push af  
2b59 3a 6d 2b			ld a, (.dmark)  
2b5c 32 a0 fd			ld (debug_mark),a  
2b5f 3a 6e 2b			ld a, (.dmark+1)  
2b62 32 a1 fd			ld (debug_mark+1),a  
2b65 3a 6f 2b			ld a, (.dmark+2)  
2b68 32 a2 fd			ld (debug_mark+2),a  
2b6b 18 03			jr .pastdmark  
2b6d ..			.dmark: db "BNG"  
2b70 f1			.pastdmark: pop af  
2b71			endm  
# End of macro DMARK
2b71					CALLMONITOR 
2b71 cd aa fd			call debug_vector  
2b74				endm  
# End of macro CALLMONITOR
2b74				endif 
2b74			 
2b74			.storebyteat:		 
2b74				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b74 cd 4d 22			call macro_dsp_valuehl 
2b77				endm 
# End of macro FORTH_DSP_VALUEHL
2b77				 
2b77 e5				push hl 
2b78			 
2b78				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b78 cd 05 23			call macro_forth_dsp_pop 
2b7b				endm 
# End of macro FORTH_DSP_POP
2b7b			 
2b7b				; get byte to poke 
2b7b			 
2b7b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b7b cd 4d 22			call macro_dsp_valuehl 
2b7e				endm 
# End of macro FORTH_DSP_VALUEHL
2b7e e5				push hl 
2b7f			 
2b7f			 
2b7f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b7f cd 05 23			call macro_forth_dsp_pop 
2b82				endm 
# End of macro FORTH_DSP_POP
2b82			 
2b82			 
2b82 d1				pop de 
2b83 e1				pop hl 
2b84			 
2b84 73				ld (hl),e 
2b85			 
2b85			 
2b85				NEXTW 
2b85 c3 38 24			jp macro_next 
2b88				endm 
# End of macro NEXTW
2b88			.CBANG: 
2b88			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2b88 22				db WORD_SYS_CORE+OPCODE_CBANG             
2b89 b1 2b			dw .SCALL            
2b8b 03				db 2 + 1 
2b8c .. 00			db "C!",0              
2b8f				endm 
# End of macro CWHEAD
2b8f			; | C!  ( x w -- ) Store x at address w  | DONE 
2b8f				if DEBUG_FORTH_WORDS_KEY 
2b8f					DMARK "CBA" 
2b8f f5				push af  
2b90 3a a4 2b			ld a, (.dmark)  
2b93 32 a0 fd			ld (debug_mark),a  
2b96 3a a5 2b			ld a, (.dmark+1)  
2b99 32 a1 fd			ld (debug_mark+1),a  
2b9c 3a a6 2b			ld a, (.dmark+2)  
2b9f 32 a2 fd			ld (debug_mark+2),a  
2ba2 18 03			jr .pastdmark  
2ba4 ..			.dmark: db "CBA"  
2ba7 f1			.pastdmark: pop af  
2ba8			endm  
# End of macro DMARK
2ba8					CALLMONITOR 
2ba8 cd aa fd			call debug_vector  
2bab				endm  
# End of macro CALLMONITOR
2bab				endif 
2bab c3 74 2b			jp .storebyteat 
2bae				NEXTW 
2bae c3 38 24			jp macro_next 
2bb1				endm 
# End of macro NEXTW
2bb1			.SCALL: 
2bb1			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2bb1 23				db WORD_SYS_CORE+OPCODE_SCALL             
2bb2 e5 2b			dw .DEPTH            
2bb4 05				db 4 + 1 
2bb5 .. 00			db "CALL",0              
2bba				endm 
# End of macro CWHEAD
2bba			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2bba				if DEBUG_FORTH_WORDS_KEY 
2bba					DMARK "CLL" 
2bba f5				push af  
2bbb 3a cf 2b			ld a, (.dmark)  
2bbe 32 a0 fd			ld (debug_mark),a  
2bc1 3a d0 2b			ld a, (.dmark+1)  
2bc4 32 a1 fd			ld (debug_mark+1),a  
2bc7 3a d1 2b			ld a, (.dmark+2)  
2bca 32 a2 fd			ld (debug_mark+2),a  
2bcd 18 03			jr .pastdmark  
2bcf ..			.dmark: db "CLL"  
2bd2 f1			.pastdmark: pop af  
2bd3			endm  
# End of macro DMARK
2bd3					CALLMONITOR 
2bd3 cd aa fd			call debug_vector  
2bd6				endm  
# End of macro CALLMONITOR
2bd6				endif 
2bd6			 
2bd6				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2bd6 cd 4d 22			call macro_dsp_valuehl 
2bd9				endm 
# End of macro FORTH_DSP_VALUEHL
2bd9			 
2bd9			;		push hl 
2bd9			 
2bd9				; destroy value TOS 
2bd9			 
2bd9				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2bd9 cd 05 23			call macro_forth_dsp_pop 
2bdc				endm 
# End of macro FORTH_DSP_POP
2bdc			 
2bdc					 
2bdc			;		pop hl 
2bdc			 
2bdc				; how to do a call with hl???? save SP? 
2bdc cd dc 23			call forth_call_hl 
2bdf			 
2bdf			 
2bdf				; TODO push value back onto stack for another op etc 
2bdf			 
2bdf cd 48 20			call forth_push_numhl 
2be2				NEXTW 
2be2 c3 38 24			jp macro_next 
2be5				endm 
# End of macro NEXTW
2be5			.DEPTH: 
2be5			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2be5 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2be6 22 2c			dw .OVER            
2be8 06				db 5 + 1 
2be9 .. 00			db "DEPTH",0              
2bef				endm 
# End of macro CWHEAD
2bef			; | DEPTH ( -- u ) Push count of stack | DONE 
2bef				; take current TOS and remove from base value div by two to get count 
2bef				if DEBUG_FORTH_WORDS_KEY 
2bef					DMARK "DEP" 
2bef f5				push af  
2bf0 3a 04 2c			ld a, (.dmark)  
2bf3 32 a0 fd			ld (debug_mark),a  
2bf6 3a 05 2c			ld a, (.dmark+1)  
2bf9 32 a1 fd			ld (debug_mark+1),a  
2bfc 3a 06 2c			ld a, (.dmark+2)  
2bff 32 a2 fd			ld (debug_mark+2),a  
2c02 18 03			jr .pastdmark  
2c04 ..			.dmark: db "DEP"  
2c07 f1			.pastdmark: pop af  
2c08			endm  
# End of macro DMARK
2c08					CALLMONITOR 
2c08 cd aa fd			call debug_vector  
2c0b				endm  
# End of macro CALLMONITOR
2c0b				endif 
2c0b			 
2c0b			 
2c0b 2a 23 f9		ld hl, (cli_data_sp) 
2c0e 11 5d f6		ld de, cli_data_stack 
2c11 ed 52		sbc hl,de 
2c13			 
2c13			; div by size of stack item 
2c13			 
2c13 5d			ld e,l 
2c14 0e 03		ld c, 3 
2c16 cd 6e 0f		call Div8 
2c19			 
2c19 6f			ld l,a 
2c1a 26 00		ld h,0 
2c1c			 
2c1c			;srl h 
2c1c			;rr l 
2c1c			 
2c1c cd 48 20			call forth_push_numhl 
2c1f				NEXTW 
2c1f c3 38 24			jp macro_next 
2c22				endm 
# End of macro NEXTW
2c22			.OVER: 
2c22			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2c22 42				db WORD_SYS_CORE+46             
2c23 69 2c			dw .PAUSE            
2c25 05				db 4 + 1 
2c26 .. 00			db "OVER",0              
2c2b				endm 
# End of macro CWHEAD
2c2b			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
2c2b			; | | If the copied item is a string it is properly duplicated allowing for a safe release after use.  
2c2b				if DEBUG_FORTH_WORDS_KEY 
2c2b					DMARK "OVR" 
2c2b f5				push af  
2c2c 3a 40 2c			ld a, (.dmark)  
2c2f 32 a0 fd			ld (debug_mark),a  
2c32 3a 41 2c			ld a, (.dmark+1)  
2c35 32 a1 fd			ld (debug_mark+1),a  
2c38 3a 42 2c			ld a, (.dmark+2)  
2c3b 32 a2 fd			ld (debug_mark+2),a  
2c3e 18 03			jr .pastdmark  
2c40 ..			.dmark: db "OVR"  
2c43 f1			.pastdmark: pop af  
2c44			endm  
# End of macro DMARK
2c44					CALLMONITOR 
2c44 cd aa fd			call debug_vector  
2c47				endm  
# End of macro CALLMONITOR
2c47				endif 
2c47			 
2c47			; TODO Use os stack swap memory 
2c47			 
2c47				; work out what type we are looking at 
2c47			 
2c47				FORTH_DSP_PTR 1 
2c47 2a 23 f9			ld hl,(cli_data_sp) 
2c4a 11 03 00			ld de, 1 * 3 
2c4d ed 52			sbc hl, de 
2c4f				endm 
# End of macro FORTH_DSP_PTR
2c4f			 
2c4f 7e				ld a, (hl) 
2c50				 
2c50 f5				push af 
2c51				; whatever the type lets get the pointer or word 
2c51 23				inc hl 
2c52			;; 
2c52			 
2c52				; type check now to decide on how to push  
2c52			 
2c52 cd ba 23			call loadwordinhl 
2c55 f1				pop af 
2c56 fe 01			cp DS_TYPE_STR 
2c58 28 06			jr z, .ovstr 
2c5a			 
2c5a				; we have a numeric so load the word and push 
2c5a			;	ld e, (hl) 
2c5a			;	inc hl 
2c5a			;	ld d, (hl) 
2c5a			;	ex de, hl 
2c5a cd 48 20			call forth_push_numhl 
2c5d				NEXTW 
2c5d c3 38 24			jp macro_next 
2c60				endm 
# End of macro NEXTW
2c60			 
2c60			.ovstr: 
2c60				; ok, a string so get the pointer and push as a string 
2c60			 
2c60			;	call loadwordinhl 
2c60 cd b6 20			call forth_push_str 
2c63				NEXTW 
2c63 c3 38 24			jp macro_next 
2c66				endm 
# End of macro NEXTW
2c66			 
2c66			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2c66			;	push hl    ; n2 
2c66			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2c66			; 
2c66			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2c66			;	push hl    ; n1 
2c66			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2c66			; 
2c66			;	pop de     ; n1 
2c66			;	pop hl     ; n2 
2c66			; 
2c66			;	push de 
2c66			;	push hl 
2c66			;	push de 
2c66			 
2c66				; push back  
2c66			 
2c66			;	pop hl 
2c66			;	call forth_push_numhl 
2c66			;	pop hl 
2c66			;	call forth_push_numhl 
2c66			;	pop hl 
2c66			;	call forth_push_numhl 
2c66				NEXTW 
2c66 c3 38 24			jp macro_next 
2c69				endm 
# End of macro NEXTW
2c69			 
2c69			.PAUSE: 
2c69			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2c69 43				db WORD_SYS_CORE+47             
2c6a 9e 2c			dw .PAUSES            
2c6c 08				db 7 + 1 
2c6d .. 00			db "PAUSEMS",0              
2c75				endm 
# End of macro CWHEAD
2c75			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2c75				if DEBUG_FORTH_WORDS_KEY 
2c75					DMARK "PMS" 
2c75 f5				push af  
2c76 3a 8a 2c			ld a, (.dmark)  
2c79 32 a0 fd			ld (debug_mark),a  
2c7c 3a 8b 2c			ld a, (.dmark+1)  
2c7f 32 a1 fd			ld (debug_mark+1),a  
2c82 3a 8c 2c			ld a, (.dmark+2)  
2c85 32 a2 fd			ld (debug_mark+2),a  
2c88 18 03			jr .pastdmark  
2c8a ..			.dmark: db "PMS"  
2c8d f1			.pastdmark: pop af  
2c8e			endm  
# End of macro DMARK
2c8e					CALLMONITOR 
2c8e cd aa fd			call debug_vector  
2c91				endm  
# End of macro CALLMONITOR
2c91				endif 
2c91				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2c91 cd 4d 22			call macro_dsp_valuehl 
2c94				endm 
# End of macro FORTH_DSP_VALUEHL
2c94			;		push hl    ; n2 
2c94				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2c94 cd 05 23			call macro_forth_dsp_pop 
2c97				endm 
# End of macro FORTH_DSP_POP
2c97			;		pop hl 
2c97			 
2c97 7d				ld a, l 
2c98 cd d2 0c			call aDelayInMS 
2c9b			       NEXTW 
2c9b c3 38 24			jp macro_next 
2c9e				endm 
# End of macro NEXTW
2c9e			.PAUSES:  
2c9e			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2c9e 44				db WORD_SYS_CORE+48             
2c9f 0d 2d			dw .ROT            
2ca1 06				db 5 + 1 
2ca2 .. 00			db "PAUSE",0              
2ca8				endm 
# End of macro CWHEAD
2ca8			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2ca8				if DEBUG_FORTH_WORDS_KEY 
2ca8					DMARK "PAU" 
2ca8 f5				push af  
2ca9 3a bd 2c			ld a, (.dmark)  
2cac 32 a0 fd			ld (debug_mark),a  
2caf 3a be 2c			ld a, (.dmark+1)  
2cb2 32 a1 fd			ld (debug_mark+1),a  
2cb5 3a bf 2c			ld a, (.dmark+2)  
2cb8 32 a2 fd			ld (debug_mark+2),a  
2cbb 18 03			jr .pastdmark  
2cbd ..			.dmark: db "PAU"  
2cc0 f1			.pastdmark: pop af  
2cc1			endm  
# End of macro DMARK
2cc1					CALLMONITOR 
2cc1 cd aa fd			call debug_vector  
2cc4				endm  
# End of macro CALLMONITOR
2cc4				endif 
2cc4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2cc4 cd 4d 22			call macro_dsp_valuehl 
2cc7				endm 
# End of macro FORTH_DSP_VALUEHL
2cc7			;		push hl    ; n2 
2cc7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2cc7 cd 05 23			call macro_forth_dsp_pop 
2cca				endm 
# End of macro FORTH_DSP_POP
2cca			;		pop hl 
2cca 45				ld b, l 
2ccb				if DEBUG_FORTH_WORDS 
2ccb					DMARK "PAU" 
2ccb f5				push af  
2ccc 3a e0 2c			ld a, (.dmark)  
2ccf 32 a0 fd			ld (debug_mark),a  
2cd2 3a e1 2c			ld a, (.dmark+1)  
2cd5 32 a1 fd			ld (debug_mark+1),a  
2cd8 3a e2 2c			ld a, (.dmark+2)  
2cdb 32 a2 fd			ld (debug_mark+2),a  
2cde 18 03			jr .pastdmark  
2ce0 ..			.dmark: db "PAU"  
2ce3 f1			.pastdmark: pop af  
2ce4			endm  
# End of macro DMARK
2ce4					CALLMONITOR 
2ce4 cd aa fd			call debug_vector  
2ce7				endm  
# End of macro CALLMONITOR
2ce7				endif 
2ce7 c5			.pauses1:	push bc 
2ce8 cd ed 0c			call delay1s 
2ceb c1				pop bc 
2cec				if DEBUG_FORTH_WORDS 
2cec					DMARK "PA1" 
2cec f5				push af  
2ced 3a 01 2d			ld a, (.dmark)  
2cf0 32 a0 fd			ld (debug_mark),a  
2cf3 3a 02 2d			ld a, (.dmark+1)  
2cf6 32 a1 fd			ld (debug_mark+1),a  
2cf9 3a 03 2d			ld a, (.dmark+2)  
2cfc 32 a2 fd			ld (debug_mark+2),a  
2cff 18 03			jr .pastdmark  
2d01 ..			.dmark: db "PA1"  
2d04 f1			.pastdmark: pop af  
2d05			endm  
# End of macro DMARK
2d05					CALLMONITOR 
2d05 cd aa fd			call debug_vector  
2d08				endm  
# End of macro CALLMONITOR
2d08				endif 
2d08 10 dd			djnz .pauses1 
2d0a			 
2d0a			       NEXTW 
2d0a c3 38 24			jp macro_next 
2d0d				endm 
# End of macro NEXTW
2d0d			.ROT: 
2d0d			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2d0d 45				db WORD_SYS_CORE+49             
2d0e 76 2d			dw .UWORDS            
2d10 04				db 3 + 1 
2d11 .. 00			db "ROT",0              
2d15				endm 
# End of macro CWHEAD
2d15			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
2d15				if DEBUG_FORTH_WORDS_KEY 
2d15					DMARK "ROT" 
2d15 f5				push af  
2d16 3a 2a 2d			ld a, (.dmark)  
2d19 32 a0 fd			ld (debug_mark),a  
2d1c 3a 2b 2d			ld a, (.dmark+1)  
2d1f 32 a1 fd			ld (debug_mark+1),a  
2d22 3a 2c 2d			ld a, (.dmark+2)  
2d25 32 a2 fd			ld (debug_mark+2),a  
2d28 18 03			jr .pastdmark  
2d2a ..			.dmark: db "ROT"  
2d2d f1			.pastdmark: pop af  
2d2e			endm  
# End of macro DMARK
2d2e					CALLMONITOR 
2d2e cd aa fd			call debug_vector  
2d31				endm  
# End of macro CALLMONITOR
2d31				endif 
2d31			 
2d31			; DONE Use os stack swap memory 
2d31			 
2d31				FORTH_DSP_PTR 0     ; u3 
2d31 2a 23 f9			ld hl,(cli_data_sp) 
2d34 11 00 00			ld de, 0 * 3 
2d37 ed 52			sbc hl, de 
2d39				endm 
# End of macro FORTH_DSP_PTR
2d39 cd 84 23			call hltostack1     
2d3c			  
2d3c				FORTH_DSP_PTR 1     ; u2 
2d3c 2a 23 f9			ld hl,(cli_data_sp) 
2d3f 11 03 00			ld de, 1 * 3 
2d42 ed 52			sbc hl, de 
2d44				endm 
# End of macro FORTH_DSP_PTR
2d44 cd 8a 23			call hltostack2      
2d47			 
2d47				FORTH_DSP_PTR 2     ; u1 
2d47 2a 23 f9			ld hl,(cli_data_sp) 
2d4a 11 06 00			ld de, 2 * 3 
2d4d ed 52			sbc hl, de 
2d4f				endm 
# End of macro FORTH_DSP_PTR
2d4f cd 90 23			call hltostack3 
2d52			 
2d52			 
2d52				FORTH_DSP_PTR 0     ;  
2d52 2a 23 f9			ld hl,(cli_data_sp) 
2d55 11 00 00			ld de, 0 * 3 
2d58 ed 52			sbc hl, de 
2d5a				endm 
# End of macro FORTH_DSP_PTR
2d5a cd a8 23			call hlfromstack3 
2d5d			 
2d5d				FORTH_DSP_PTR 1     ; TOS 
2d5d 2a 23 f9			ld hl,(cli_data_sp) 
2d60 11 03 00			ld de, 1 * 3 
2d63 ed 52			sbc hl, de 
2d65				endm 
# End of macro FORTH_DSP_PTR
2d65 cd 9c 23			call hlfromstack1 
2d68			 
2d68				FORTH_DSP_PTR 2     ; TOS 
2d68 2a 23 f9			ld hl,(cli_data_sp) 
2d6b 11 06 00			ld de, 2 * 3 
2d6e ed 52			sbc hl, de 
2d70				endm 
# End of macro FORTH_DSP_PTR
2d70 cd a2 23			call hlfromstack2 
2d73			 
2d73			 
2d73			;	FORTH_DSP_VALUEHL 
2d73			;	push hl    ; u3  
2d73			; 
2d73			;	FORTH_DSP_POP 
2d73			; 
2d73			;	FORTH_DSP_VALUEHL 
2d73			;	push hl     ; u2 
2d73			; 
2d73			;	FORTH_DSP_POP 
2d73			; 
2d73			;	FORTH_DSP_VALUEHL 
2d73			;	push hl     ; u1 
2d73			; 
2d73			;	FORTH_DSP_POP 
2d73			; 
2d73			;	pop bc      ; u1 
2d73			;	pop hl      ; u2 
2d73			;	pop de      ; u3 
2d73			; 
2d73			; 
2d73			;	push bc 
2d73			;	push de 
2d73			;	push hl 
2d73			; 
2d73			; 
2d73			;	pop hl 
2d73			;	call forth_push_numhl 
2d73			; 
2d73			;	pop hl 
2d73			;	call forth_push_numhl 
2d73			; 
2d73			;	pop hl 
2d73			;	call forth_push_numhl 
2d73				 
2d73			 
2d73			 
2d73			 
2d73			 
2d73			 
2d73			       NEXTW 
2d73 c3 38 24			jp macro_next 
2d76				endm 
# End of macro NEXTW
2d76			 
2d76			.UWORDS: 
2d76			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2d76 50				db WORD_SYS_CORE+60             
2d77 38 2e			dw .BP            
2d79 07				db 6 + 1 
2d7a .. 00			db "UWORDS",0              
2d81				endm 
# End of macro CWHEAD
2d81			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2d81			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2d81			; | | Following the count are the individual words. 
2d81			; | | 
2d81			; | | e.g. UWORDS 
2d81			; | | BOX DIRLIST 2 
2d81			; | |  
2d81			; | | Can be used to save the words to storage via: 
2d81			; | | UWORDS $01 DO $01 APPEND LOOP 
2d81			if DEBUG_FORTH_WORDS_KEY 
2d81				DMARK "UWR" 
2d81 f5				push af  
2d82 3a 96 2d			ld a, (.dmark)  
2d85 32 a0 fd			ld (debug_mark),a  
2d88 3a 97 2d			ld a, (.dmark+1)  
2d8b 32 a1 fd			ld (debug_mark+1),a  
2d8e 3a 98 2d			ld a, (.dmark+2)  
2d91 32 a2 fd			ld (debug_mark+2),a  
2d94 18 03			jr .pastdmark  
2d96 ..			.dmark: db "UWR"  
2d99 f1			.pastdmark: pop af  
2d9a			endm  
# End of macro DMARK
2d9a				CALLMONITOR 
2d9a cd aa fd			call debug_vector  
2d9d				endm  
# End of macro CALLMONITOR
2d9d			endif 
2d9d 21 00 80			ld hl, baseram 
2da0				;ld hl, baseusermem 
2da0 01 00 00			ld bc, 0    ; start a counter 
2da3			 
2da3			; skip dict stub 
2da3			 
2da3 cd 75 25			call forth_tok_next 
2da6			 
2da6			 
2da6			; while we have words to look for 
2da6			 
2da6 7e			.douscan:	ld a, (hl)      
2da7			if DEBUG_FORTH_WORDS 
2da7				DMARK "UWs" 
2da7 f5				push af  
2da8 3a bc 2d			ld a, (.dmark)  
2dab 32 a0 fd			ld (debug_mark),a  
2dae 3a bd 2d			ld a, (.dmark+1)  
2db1 32 a1 fd			ld (debug_mark+1),a  
2db4 3a be 2d			ld a, (.dmark+2)  
2db7 32 a2 fd			ld (debug_mark+2),a  
2dba 18 03			jr .pastdmark  
2dbc ..			.dmark: db "UWs"  
2dbf f1			.pastdmark: pop af  
2dc0			endm  
# End of macro DMARK
2dc0				CALLMONITOR 
2dc0 cd aa fd			call debug_vector  
2dc3				endm  
# End of macro CALLMONITOR
2dc3			endif 
2dc3 fe 00			cp WORD_SYS_END 
2dc5 28 4d			jr z, .udone 
2dc7 fe 01			cp WORD_SYS_UWORD 
2dc9 20 44			jr nz, .nuword 
2dcb			 
2dcb			if DEBUG_FORTH_WORDS 
2dcb				DMARK "UWu" 
2dcb f5				push af  
2dcc 3a e0 2d			ld a, (.dmark)  
2dcf 32 a0 fd			ld (debug_mark),a  
2dd2 3a e1 2d			ld a, (.dmark+1)  
2dd5 32 a1 fd			ld (debug_mark+1),a  
2dd8 3a e2 2d			ld a, (.dmark+2)  
2ddb 32 a2 fd			ld (debug_mark+2),a  
2dde 18 03			jr .pastdmark  
2de0 ..			.dmark: db "UWu"  
2de3 f1			.pastdmark: pop af  
2de4			endm  
# End of macro DMARK
2de4				CALLMONITOR 
2de4 cd aa fd			call debug_vector  
2de7				endm  
# End of macro CALLMONITOR
2de7			endif 
2de7				; we have a uword so push its name to the stack 
2de7			 
2de7 e5				push hl  ; save so we can move to next dict block 
2de8			 
2de8				; skip opcode 
2de8 23				inc hl  
2de9				; skip next ptr 
2de9 23				inc hl  
2dea 23				inc hl 
2deb				; skip len 
2deb 23				inc hl 
2dec			if DEBUG_FORTH_WORDS 
2dec				DMARK "UWt" 
2dec f5				push af  
2ded 3a 01 2e			ld a, (.dmark)  
2df0 32 a0 fd			ld (debug_mark),a  
2df3 3a 02 2e			ld a, (.dmark+1)  
2df6 32 a1 fd			ld (debug_mark+1),a  
2df9 3a 03 2e			ld a, (.dmark+2)  
2dfc 32 a2 fd			ld (debug_mark+2),a  
2dff 18 03			jr .pastdmark  
2e01 ..			.dmark: db "UWt"  
2e04 f1			.pastdmark: pop af  
2e05			endm  
# End of macro DMARK
2e05				CALLMONITOR 
2e05 cd aa fd			call debug_vector  
2e08				endm  
# End of macro CALLMONITOR
2e08			endif 
2e08 03				inc bc 
2e09			 
2e09 c5				push bc 
2e0a cd b6 20			call forth_push_str 
2e0d c1				pop bc 
2e0e			 
2e0e e1				pop hl 	 
2e0f			 
2e0f cd 75 25		.nuword:	call forth_tok_next 
2e12 18 92			jr .douscan  
2e14			 
2e14			.udone:		 ; push count of uwords found 
2e14 c5				push bc 
2e15 e1				pop hl 
2e16			 
2e16			if DEBUG_FORTH_WORDS 
2e16				DMARK "UWc" 
2e16 f5				push af  
2e17 3a 2b 2e			ld a, (.dmark)  
2e1a 32 a0 fd			ld (debug_mark),a  
2e1d 3a 2c 2e			ld a, (.dmark+1)  
2e20 32 a1 fd			ld (debug_mark+1),a  
2e23 3a 2d 2e			ld a, (.dmark+2)  
2e26 32 a2 fd			ld (debug_mark+2),a  
2e29 18 03			jr .pastdmark  
2e2b ..			.dmark: db "UWc"  
2e2e f1			.pastdmark: pop af  
2e2f			endm  
# End of macro DMARK
2e2f				CALLMONITOR 
2e2f cd aa fd			call debug_vector  
2e32				endm  
# End of macro CALLMONITOR
2e32			endif 
2e32 cd 48 20			call forth_push_numhl 
2e35			 
2e35			 
2e35			       NEXTW 
2e35 c3 38 24			jp macro_next 
2e38				endm 
# End of macro NEXTW
2e38			 
2e38			.BP: 
2e38			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2e38 54				db WORD_SYS_CORE+64             
2e39 72 2e			dw .MONITOR            
2e3b 03				db 2 + 1 
2e3c .. 00			db "BP",0              
2e3f				endm 
# End of macro CWHEAD
2e3f			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2e3f			; | | $00 Will enable the break points within specific code paths 
2e3f			; | | $01 Will disable break points 
2e3f			; | |  
2e3f			; | | By default break points are off. Either the above can be used to enable them 
2e3f			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2e3f			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2e3f			; | | can disable break points. Exiting will then continue boot process. 
2e3f				; get byte count 
2e3f				if DEBUG_FORTH_WORDS_KEY 
2e3f					DMARK "BP." 
2e3f f5				push af  
2e40 3a 54 2e			ld a, (.dmark)  
2e43 32 a0 fd			ld (debug_mark),a  
2e46 3a 55 2e			ld a, (.dmark+1)  
2e49 32 a1 fd			ld (debug_mark+1),a  
2e4c 3a 56 2e			ld a, (.dmark+2)  
2e4f 32 a2 fd			ld (debug_mark+2),a  
2e52 18 03			jr .pastdmark  
2e54 ..			.dmark: db "BP."  
2e57 f1			.pastdmark: pop af  
2e58			endm  
# End of macro DMARK
2e58					CALLMONITOR 
2e58 cd aa fd			call debug_vector  
2e5b				endm  
# End of macro CALLMONITOR
2e5b				endif 
2e5b			 
2e5b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2e5b cd 4d 22			call macro_dsp_valuehl 
2e5e				endm 
# End of macro FORTH_DSP_VALUEHL
2e5e			 
2e5e			;		push hl 
2e5e			 
2e5e				; destroy value TOS 
2e5e			 
2e5e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2e5e cd 05 23			call macro_forth_dsp_pop 
2e61				endm 
# End of macro FORTH_DSP_POP
2e61			 
2e61			;		pop hl 
2e61			 
2e61 3e 00			ld a,0 
2e63 bd				cp l 
2e64 28 06			jr z, .bpset 
2e66			;		ld a, '*' 
2e66 cd 55 19			call bp_off 
2e69				NEXTW 
2e69 c3 38 24			jp macro_next 
2e6c				endm 
# End of macro NEXTW
2e6c			 
2e6c			.bpset:	 
2e6c				;	ld (os_view_disable), a 
2e6c cd 49 19			call bp_on 
2e6f			 
2e6f			 
2e6f				NEXTW 
2e6f c3 38 24			jp macro_next 
2e72				endm 
# End of macro NEXTW
2e72			 
2e72			 
2e72			.MONITOR: 
2e72			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2e72 55				db WORD_SYS_CORE+65             
2e73 a3 2e			dw .MALLOC            
2e75 08				db 7 + 1 
2e76 .. 00			db "MONITOR",0              
2e7e				endm 
# End of macro CWHEAD
2e7e			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2e7e			; | | At start the current various registers will be displayed with contents. 
2e7e			; | | Top right corner will show the most recent debug marker seen. 
2e7e			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2e7e			; | | and the return stack pointer (RSP). 
2e7e			; | | Pressing: 
2e7e			; | |    1 - Initial screen 
2e7e			; | |    2 - Display a data dump of HL 
2e7e			; | |    3 - Display a data dump of DE 
2e7e			; | |    4 - Display a data dump of BC 
2e7e			; | |    5 - Display a data dump of HL 
2e7e			; | |    6 - Display a data dump of DSP 
2e7e			; | |    7 - Display a data dump of RSP 
2e7e			; | |    8 - Display a data dump of what is at DSP 
2e7e			; | |    9 - Display a data dump of what is at RSP 
2e7e			; | |    0 - Exit monitor and continue running. This will also enable break points 
2e7e			; | |    * - Disable break points 
2e7e			; | |    # - Enter traditional monitor mode 
2e7e			; | | 
2e7e			; | | Monitor Mode 
2e7e			; | | ------------ 
2e7e			; | | A prompt of '>' will be shown for various commands: 
2e7e			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2e7e			; | |    C - Continue display a data dump from the last set address 
2e7e			; | |    M xxxx - Set start of memory edit at address xx 
2e7e			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2e7e			; | |    G xxxx - Exec code at specific address 
2e7e			; | |    Q - Return to previous 
2e7e				if DEBUG_FORTH_WORDS_KEY 
2e7e					DMARK "MON" 
2e7e f5				push af  
2e7f 3a 93 2e			ld a, (.dmark)  
2e82 32 a0 fd			ld (debug_mark),a  
2e85 3a 94 2e			ld a, (.dmark+1)  
2e88 32 a1 fd			ld (debug_mark+1),a  
2e8b 3a 95 2e			ld a, (.dmark+2)  
2e8e 32 a2 fd			ld (debug_mark+2),a  
2e91 18 03			jr .pastdmark  
2e93 ..			.dmark: db "MON"  
2e96 f1			.pastdmark: pop af  
2e97			endm  
# End of macro DMARK
2e97					CALLMONITOR 
2e97 cd aa fd			call debug_vector  
2e9a				endm  
# End of macro CALLMONITOR
2e9a				endif 
2e9a			;		ld a, 0 
2e9a			;		ld (os_view_disable), a 
2e9a cd 49 19			call bp_on 
2e9d			 
2e9d				CALLMONITOR 
2e9d cd aa fd			call debug_vector  
2ea0				endm  
# End of macro CALLMONITOR
2ea0			 
2ea0			;	call monitor 
2ea0			 
2ea0				NEXTW 
2ea0 c3 38 24			jp macro_next 
2ea3				endm 
# End of macro NEXTW
2ea3			 
2ea3			 
2ea3			.MALLOC: 
2ea3			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2ea3 56				db WORD_SYS_CORE+66             
2ea4 cc 2e			dw .MALLOC2            
2ea6 06				db 5 + 1 
2ea7 .. 00			db "ALLOT",0              
2ead				endm 
# End of macro CWHEAD
2ead			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2ead				if DEBUG_FORTH_WORDS_KEY 
2ead					DMARK "ALL" 
2ead f5				push af  
2eae 3a c2 2e			ld a, (.dmark)  
2eb1 32 a0 fd			ld (debug_mark),a  
2eb4 3a c3 2e			ld a, (.dmark+1)  
2eb7 32 a1 fd			ld (debug_mark+1),a  
2eba 3a c4 2e			ld a, (.dmark+2)  
2ebd 32 a2 fd			ld (debug_mark+2),a  
2ec0 18 03			jr .pastdmark  
2ec2 ..			.dmark: db "ALL"  
2ec5 f1			.pastdmark: pop af  
2ec6			endm  
# End of macro DMARK
2ec6					CALLMONITOR 
2ec6 cd aa fd			call debug_vector  
2ec9				endm  
# End of macro CALLMONITOR
2ec9				endif 
2ec9 c3 f3 2e			jp .mallocc 
2ecc			.MALLOC2: 
2ecc			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2ecc 56				db WORD_SYS_CORE+66             
2ecd 0a 2f			dw .FREE            
2ecf 07				db 6 + 1 
2ed0 .. 00			db "MALLOC",0              
2ed7				endm 
# End of macro CWHEAD
2ed7			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2ed7				; get byte count 
2ed7				if DEBUG_FORTH_WORDS_KEY 
2ed7					DMARK "MAL" 
2ed7 f5				push af  
2ed8 3a ec 2e			ld a, (.dmark)  
2edb 32 a0 fd			ld (debug_mark),a  
2ede 3a ed 2e			ld a, (.dmark+1)  
2ee1 32 a1 fd			ld (debug_mark+1),a  
2ee4 3a ee 2e			ld a, (.dmark+2)  
2ee7 32 a2 fd			ld (debug_mark+2),a  
2eea 18 03			jr .pastdmark  
2eec ..			.dmark: db "MAL"  
2eef f1			.pastdmark: pop af  
2ef0			endm  
# End of macro DMARK
2ef0					CALLMONITOR 
2ef0 cd aa fd			call debug_vector  
2ef3				endm  
# End of macro CALLMONITOR
2ef3				endif 
2ef3			.mallocc: 
2ef3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2ef3 cd 4d 22			call macro_dsp_valuehl 
2ef6				endm 
# End of macro FORTH_DSP_VALUEHL
2ef6			 
2ef6			;		push hl 
2ef6			 
2ef6				; destroy value TOS 
2ef6			 
2ef6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2ef6 cd 05 23			call macro_forth_dsp_pop 
2ef9				endm 
# End of macro FORTH_DSP_POP
2ef9			 
2ef9			;		pop hl 
2ef9 cd b9 13			call malloc 
2efc			if DEBUG_FORTH_MALLOC_GUARD 
2efc f5				push af 
2efd cd 07 10			call ishlzero 
2f00			;		ld a, l 
2f00			;		add h 
2f00			;		cp 0 
2f00 f1				pop af 
2f01				 
2f01 cc 40 62			call z,malloc_error 
2f04			endif 
2f04			 
2f04 cd 48 20			call forth_push_numhl 
2f07				NEXTW 
2f07 c3 38 24			jp macro_next 
2f0a				endm 
# End of macro NEXTW
2f0a			 
2f0a			.FREE: 
2f0a			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2f0a 57				db WORD_SYS_CORE+67             
2f0b 3b 2f			dw .LIST            
2f0d 05				db 4 + 1 
2f0e .. 00			db "FREE",0              
2f13				endm 
# End of macro CWHEAD
2f13			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2f13				if DEBUG_FORTH_WORDS_KEY 
2f13					DMARK "FRE" 
2f13 f5				push af  
2f14 3a 28 2f			ld a, (.dmark)  
2f17 32 a0 fd			ld (debug_mark),a  
2f1a 3a 29 2f			ld a, (.dmark+1)  
2f1d 32 a1 fd			ld (debug_mark+1),a  
2f20 3a 2a 2f			ld a, (.dmark+2)  
2f23 32 a2 fd			ld (debug_mark+2),a  
2f26 18 03			jr .pastdmark  
2f28 ..			.dmark: db "FRE"  
2f2b f1			.pastdmark: pop af  
2f2c			endm  
# End of macro DMARK
2f2c					CALLMONITOR 
2f2c cd aa fd			call debug_vector  
2f2f				endm  
# End of macro CALLMONITOR
2f2f				endif 
2f2f				; get address 
2f2f			 
2f2f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2f2f cd 4d 22			call macro_dsp_valuehl 
2f32				endm 
# End of macro FORTH_DSP_VALUEHL
2f32			 
2f32			;		push hl 
2f32			 
2f32				; destroy value TOS 
2f32			 
2f32				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2f32 cd 05 23			call macro_forth_dsp_pop 
2f35				endm 
# End of macro FORTH_DSP_POP
2f35			 
2f35			;		pop hl 
2f35			if FORTH_ENABLE_MALLOCFREE 
2f35 cd 83 14			call free 
2f38			endif 
2f38				NEXTW 
2f38 c3 38 24			jp macro_next 
2f3b				endm 
# End of macro NEXTW
2f3b			.LIST: 
2f3b			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2f3b 5c				db WORD_SYS_CORE+72             
2f3c 37 31			dw .FORGET            
2f3e 05				db 4 + 1 
2f3f .. 00			db "LIST",0              
2f44				endm 
# End of macro CWHEAD
2f44			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2f44			; | | The quoted word must be in upper case. 
2f44			if DEBUG_FORTH_WORDS_KEY 
2f44				DMARK "LST" 
2f44 f5				push af  
2f45 3a 59 2f			ld a, (.dmark)  
2f48 32 a0 fd			ld (debug_mark),a  
2f4b 3a 5a 2f			ld a, (.dmark+1)  
2f4e 32 a1 fd			ld (debug_mark+1),a  
2f51 3a 5b 2f			ld a, (.dmark+2)  
2f54 32 a2 fd			ld (debug_mark+2),a  
2f57 18 03			jr .pastdmark  
2f59 ..			.dmark: db "LST"  
2f5c f1			.pastdmark: pop af  
2f5d			endm  
# End of macro DMARK
2f5d				CALLMONITOR 
2f5d cd aa fd			call debug_vector  
2f60				endm  
# End of macro CALLMONITOR
2f60			endif 
2f60			 
2f60				FORTH_DSP_VALUEHL 
2f60 cd 4d 22			call macro_dsp_valuehl 
2f63				endm 
# End of macro FORTH_DSP_VALUEHL
2f63			 
2f63 e5				push hl 
2f64				FORTH_DSP_POP 
2f64 cd 05 23			call macro_forth_dsp_pop 
2f67				endm 
# End of macro FORTH_DSP_POP
2f67 c1				pop bc 
2f68			 
2f68			; Start format of scratch string 
2f68			 
2f68 21 f6 f0			ld hl, scratch 
2f6b			 
2f6b 3e 3a			ld a, ':' 
2f6d 77				ld (hl),a 
2f6e 23				inc hl 
2f6f 3e 20			ld a, ' ' 
2f71 77				ld (hl), a 
2f72			 
2f72				; Get ptr to the word we need to look up 
2f72			 
2f72			;		FORTH_DSP_VALUEHL 
2f72				;v5 FORTH_DSP_VALUE 
2f72			; TODO type check 
2f72			;		inc hl    ; Skip type check  
2f72			;		push hl 
2f72			;		ex de, hl    ; put into DE 
2f72			 
2f72			 
2f72 21 00 80			ld hl, baseram 
2f75				;ld hl, baseusermem 
2f75			 
2f75 e5			push hl   ; sacreifical push 
2f76			 
2f76			.ldouscanm: 
2f76 e1			pop hl 
2f77			.ldouscan: 
2f77			if DEBUG_FORTH_WORDS 
2f77				DMARK "LSs" 
2f77 f5				push af  
2f78 3a 8c 2f			ld a, (.dmark)  
2f7b 32 a0 fd			ld (debug_mark),a  
2f7e 3a 8d 2f			ld a, (.dmark+1)  
2f81 32 a1 fd			ld (debug_mark+1),a  
2f84 3a 8e 2f			ld a, (.dmark+2)  
2f87 32 a2 fd			ld (debug_mark+2),a  
2f8a 18 03			jr .pastdmark  
2f8c ..			.dmark: db "LSs"  
2f8f f1			.pastdmark: pop af  
2f90			endm  
# End of macro DMARK
2f90				CALLMONITOR 
2f90 cd aa fd			call debug_vector  
2f93				endm  
# End of macro CALLMONITOR
2f93			endif 
2f93			; skip dict stub 
2f93 cd 75 25			call forth_tok_next 
2f96			 
2f96			 
2f96			; while we have words to look for 
2f96			 
2f96 7e			ld a, (hl)      
2f97			if DEBUG_FORTH_WORDS 
2f97				DMARK "LSk" 
2f97 f5				push af  
2f98 3a ac 2f			ld a, (.dmark)  
2f9b 32 a0 fd			ld (debug_mark),a  
2f9e 3a ad 2f			ld a, (.dmark+1)  
2fa1 32 a1 fd			ld (debug_mark+1),a  
2fa4 3a ae 2f			ld a, (.dmark+2)  
2fa7 32 a2 fd			ld (debug_mark+2),a  
2faa 18 03			jr .pastdmark  
2fac ..			.dmark: db "LSk"  
2faf f1			.pastdmark: pop af  
2fb0			endm  
# End of macro DMARK
2fb0				CALLMONITOR 
2fb0 cd aa fd			call debug_vector  
2fb3				endm  
# End of macro CALLMONITOR
2fb3			endif 
2fb3				;cp WORD_SYS_END 
2fb3				;jp z, .lunotfound 
2fb3			 
2fb3					; if we hit non uwords then gone too far 
2fb3 fe 01				cp WORD_SYS_UWORD 
2fb5 c2 f3 30				jp nz, .lunotfound 
2fb8			 
2fb8				if DEBUG_FORTH_WORDS 
2fb8					DMARK "LSu" 
2fb8 f5				push af  
2fb9 3a cd 2f			ld a, (.dmark)  
2fbc 32 a0 fd			ld (debug_mark),a  
2fbf 3a ce 2f			ld a, (.dmark+1)  
2fc2 32 a1 fd			ld (debug_mark+1),a  
2fc5 3a cf 2f			ld a, (.dmark+2)  
2fc8 32 a2 fd			ld (debug_mark+2),a  
2fcb 18 03			jr .pastdmark  
2fcd ..			.dmark: db "LSu"  
2fd0 f1			.pastdmark: pop af  
2fd1			endm  
# End of macro DMARK
2fd1					CALLMONITOR 
2fd1 cd aa fd			call debug_vector  
2fd4				endm  
# End of macro CALLMONITOR
2fd4				endif 
2fd4			 
2fd4					; found a uword but is it the one we want... 
2fd4			 
2fd4 c5					push bc     ; uword to find is on bc 
2fd5 d1					pop de 
2fd6			 
2fd6 e5					push hl  ; to save the ptr 
2fd7			 
2fd7					; skip opcode 
2fd7 23					inc hl  
2fd8					; skip next ptr 
2fd8 23					inc hl  
2fd9 23					inc hl 
2fda					; skip len 
2fda 23					inc hl 
2fdb			 
2fdb				if DEBUG_FORTH_WORDS 
2fdb					DMARK "LSc" 
2fdb f5				push af  
2fdc 3a f0 2f			ld a, (.dmark)  
2fdf 32 a0 fd			ld (debug_mark),a  
2fe2 3a f1 2f			ld a, (.dmark+1)  
2fe5 32 a1 fd			ld (debug_mark+1),a  
2fe8 3a f2 2f			ld a, (.dmark+2)  
2feb 32 a2 fd			ld (debug_mark+2),a  
2fee 18 03			jr .pastdmark  
2ff0 ..			.dmark: db "LSc"  
2ff3 f1			.pastdmark: pop af  
2ff4			endm  
# End of macro DMARK
2ff4					CALLMONITOR 
2ff4 cd aa fd			call debug_vector  
2ff7				endm  
# End of macro CALLMONITOR
2ff7				endif 
2ff7			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2ff7			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2ff7			; Nope that has gone the other way. It needs to be exact not on first zero 
2ff7			;		call strcmp 
2ff7 c5					push bc 
2ff8 cd 89 13				call StrictStrCmp 
2ffb c1					pop bc 
2ffc c2 76 2f				jp nz, .ldouscanm 
2fff				 
2fff			 
2fff			 
2fff					; we have a uword so push its name to the stack 
2fff			 
2fff			;	   	push hl  ; save so we can move to next dict block 
2fff e1			pop hl 
3000			 
3000				if DEBUG_FORTH_WORDS 
3000					DMARK "LSm" 
3000 f5				push af  
3001 3a 15 30			ld a, (.dmark)  
3004 32 a0 fd			ld (debug_mark),a  
3007 3a 16 30			ld a, (.dmark+1)  
300a 32 a1 fd			ld (debug_mark+1),a  
300d 3a 17 30			ld a, (.dmark+2)  
3010 32 a2 fd			ld (debug_mark+2),a  
3013 18 03			jr .pastdmark  
3015 ..			.dmark: db "LSm"  
3018 f1			.pastdmark: pop af  
3019			endm  
# End of macro DMARK
3019					CALLMONITOR 
3019 cd aa fd			call debug_vector  
301c				endm  
# End of macro CALLMONITOR
301c				endif 
301c			 
301c					; skip opcode 
301c 23					inc hl  
301d					; skip next ptr 
301d 23					inc hl  
301e 23					inc hl 
301f					; skip len 
301f 7e					ld a, (hl)   ; save length to add 
3020				if DEBUG_FORTH_WORDS 
3020					DMARK "LS2" 
3020 f5				push af  
3021 3a 35 30			ld a, (.dmark)  
3024 32 a0 fd			ld (debug_mark),a  
3027 3a 36 30			ld a, (.dmark+1)  
302a 32 a1 fd			ld (debug_mark+1),a  
302d 3a 37 30			ld a, (.dmark+2)  
3030 32 a2 fd			ld (debug_mark+2),a  
3033 18 03			jr .pastdmark  
3035 ..			.dmark: db "LS2"  
3038 f1			.pastdmark: pop af  
3039			endm  
# End of macro DMARK
3039					CALLMONITOR 
3039 cd aa fd			call debug_vector  
303c				endm  
# End of macro CALLMONITOR
303c				endif 
303c			 
303c					; save this location 
303c				 
303c e5					push hl 
303d			 
303d 23					inc hl 
303e 11 f8 f0				ld de, scratch+2 
3041 4f					ld c, a 
3042 06 00				ld b, 0 
3044			 
3044				if DEBUG_FORTH_WORDS 
3044					DMARK "LSn" 
3044 f5				push af  
3045 3a 59 30			ld a, (.dmark)  
3048 32 a0 fd			ld (debug_mark),a  
304b 3a 5a 30			ld a, (.dmark+1)  
304e 32 a1 fd			ld (debug_mark+1),a  
3051 3a 5b 30			ld a, (.dmark+2)  
3054 32 a2 fd			ld (debug_mark+2),a  
3057 18 03			jr .pastdmark  
3059 ..			.dmark: db "LSn"  
305c f1			.pastdmark: pop af  
305d			endm  
# End of macro DMARK
305d					CALLMONITOR 
305d cd aa fd			call debug_vector  
3060				endm  
# End of macro CALLMONITOR
3060				endif 
3060			 
3060					; copy uword name to scratch 
3060			 
3060			;		ldir 
3060			.licplw:	; copy uword name to scratch converting to lower case as we go 
3060 ed a0				ldi 
3062 1b					dec de 
3063 1a					ld a, (de) 
3064 cd 5c 12				call to_lower 
3067 12					ld (de),a 
3068 13					inc de 
3069 3e 00				ld a, 0 
306b b9					cp c 
306c 20 f2				jr nz, .licplw 
306e			 
306e			 
306e			 
306e 1b					dec de 
306f 3e 20				ld a, ' '    ; change null to space 
3071 12					ld (de), a 
3072			 
3072 13					inc de 
3073			 
3073 d5					push de 
3074 c1					pop bc     ; move scratch pointer to end of word name and save it 
3075			 
3075 e1					pop hl 
3076 7e					ld a, (hl) 
3077					;inc hl 
3077					; skip word string 
3077 cd de 0f				call addatohl 
307a			 
307a 23					inc hl 
307b			 
307b				if DEBUG_FORTH_WORDS 
307b					DMARK "LS3" 
307b f5				push af  
307c 3a 90 30			ld a, (.dmark)  
307f 32 a0 fd			ld (debug_mark),a  
3082 3a 91 30			ld a, (.dmark+1)  
3085 32 a1 fd			ld (debug_mark+1),a  
3088 3a 92 30			ld a, (.dmark+2)  
308b 32 a2 fd			ld (debug_mark+2),a  
308e 18 03			jr .pastdmark  
3090 ..			.dmark: db "LS3"  
3093 f1			.pastdmark: pop af  
3094			endm  
# End of macro DMARK
3094					CALLMONITOR 
3094 cd aa fd			call debug_vector  
3097				endm  
# End of macro CALLMONITOR
3097				endif 
3097					; should now be at the start of the machine code to setup the eval of the uword 
3097					; now locate the ptr to the string defintion 
3097			 
3097					; skip ld hl, 
3097					; then load the ptr 
3097			; TODO use get from hl ptr 
3097 23					inc hl 
3098 5e					ld e, (hl) 
3099 23					inc hl 
309a 56					ld d, (hl) 
309b eb					ex de, hl 
309c			 
309c			 
309c				if DEBUG_FORTH_WORDS 
309c					DMARK "LSt" 
309c f5				push af  
309d 3a b1 30			ld a, (.dmark)  
30a0 32 a0 fd			ld (debug_mark),a  
30a3 3a b2 30			ld a, (.dmark+1)  
30a6 32 a1 fd			ld (debug_mark+1),a  
30a9 3a b3 30			ld a, (.dmark+2)  
30ac 32 a2 fd			ld (debug_mark+2),a  
30af 18 03			jr .pastdmark  
30b1 ..			.dmark: db "LSt"  
30b4 f1			.pastdmark: pop af  
30b5			endm  
# End of macro DMARK
30b5					CALLMONITOR 
30b5 cd aa fd			call debug_vector  
30b8				endm  
# End of macro CALLMONITOR
30b8				endif 
30b8			 
30b8			; cant push right now due to tokenised strings  
30b8			 
30b8			; get the destination of where to copy this definition to. 
30b8			 
30b8 c5					push bc 
30b9 d1					pop de 
30ba			 
30ba 7e			.listl:         ld a,(hl) 
30bb fe 00				cp 0 
30bd 28 09				jr z, .lreplsp     ; replace zero with space 
30bf					;cp FORTH_END_BUFFER 
30bf fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
30c1 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
30c3				 
30c3					; just copy this char as is then 
30c3			 
30c3 12					ld (de), a 
30c4			 
30c4 23			.listnxt:	inc hl 
30c5 13					inc de 
30c6 18 f2				jr .listl 
30c8			 
30c8 3e 20		.lreplsp:	ld a,' ' 
30ca 12					ld (de), a 
30cb 18 f7				jr .listnxt 
30cd			 
30cd			; close up uword def 
30cd			 
30cd			.listdone: 
30cd 12					ld (de), a 
30ce 13					inc de 
30cf 3e 00				ld a, 0 
30d1 12					ld (de), a 
30d2			 
30d2			; now have def so clean up and push to stack 
30d2			 
30d2 21 f6 f0				ld hl, scratch 
30d5				if DEBUG_FORTH_WORDS 
30d5					DMARK "Ltp" 
30d5 f5				push af  
30d6 3a ea 30			ld a, (.dmark)  
30d9 32 a0 fd			ld (debug_mark),a  
30dc 3a eb 30			ld a, (.dmark+1)  
30df 32 a1 fd			ld (debug_mark+1),a  
30e2 3a ec 30			ld a, (.dmark+2)  
30e5 32 a2 fd			ld (debug_mark+2),a  
30e8 18 03			jr .pastdmark  
30ea ..			.dmark: db "Ltp"  
30ed f1			.pastdmark: pop af  
30ee			endm  
# End of macro DMARK
30ee					CALLMONITOR 
30ee cd aa fd			call debug_vector  
30f1				endm  
# End of macro CALLMONITOR
30f1				endif 
30f1			 
30f1 18 1f			jr .listpush 
30f3			 
30f3			;.lnuword:	pop hl 
30f3			;		call forth_tok_next 
30f3			;		jp .ldouscan  
30f3			 
30f3			.lunotfound:		  
30f3			 
30f3				if DEBUG_FORTH_WORDS 
30f3					DMARK "LSn" 
30f3 f5				push af  
30f4 3a 08 31			ld a, (.dmark)  
30f7 32 a0 fd			ld (debug_mark),a  
30fa 3a 09 31			ld a, (.dmark+1)  
30fd 32 a1 fd			ld (debug_mark+1),a  
3100 3a 0a 31			ld a, (.dmark+2)  
3103 32 a2 fd			ld (debug_mark+2),a  
3106 18 03			jr .pastdmark  
3108 ..			.dmark: db "LSn"  
310b f1			.pastdmark: pop af  
310c			endm  
# End of macro DMARK
310c					CALLMONITOR 
310c cd aa fd			call debug_vector  
310f				endm  
# End of macro CALLMONITOR
310f				endif 
310f			 
310f					 
310f			;		FORTH_DSP_POP 
310f			;		ld hl, .luno 
310f			 
310f					NEXTW			 
310f c3 38 24			jp macro_next 
3112				endm 
# End of macro NEXTW
3112			 
3112			.listpush: 
3112				if DEBUG_FORTH_WORDS 
3112					DMARK "LS>" 
3112 f5				push af  
3113 3a 27 31			ld a, (.dmark)  
3116 32 a0 fd			ld (debug_mark),a  
3119 3a 28 31			ld a, (.dmark+1)  
311c 32 a1 fd			ld (debug_mark+1),a  
311f 3a 29 31			ld a, (.dmark+2)  
3122 32 a2 fd			ld (debug_mark+2),a  
3125 18 03			jr .pastdmark  
3127 ..			.dmark: db "LS>"  
312a f1			.pastdmark: pop af  
312b			endm  
# End of macro DMARK
312b					CALLMONITOR 
312b cd aa fd			call debug_vector  
312e				endm  
# End of macro CALLMONITOR
312e				endif 
312e cd b6 20				call forth_push_str 
3131			 
3131			 
3131			 
3131					NEXTW 
3131 c3 38 24			jp macro_next 
3134				endm 
# End of macro NEXTW
3134			 
3134			;.luno:    db "Word not found",0 
3134			 
3134			 
3134			 
3134			 
3134			 
3134			;		push hl   ; save pointer to start of uword def string 
3134			; 
3134			;; look for FORTH_EOL_LINE 
3134			;		ld a, FORTH_END_BUFFER 
3134			;		call strlent 
3134			; 
3134			;		inc hl		 ; space for coln def 
3134			;		inc hl 
3134			;		inc hl          ; space for terms 
3134			;		inc hl 
3134			; 
3134			;		ld a, 20   ; TODO get actual length 
3134			;		call addatohl    ; include a random amount of room for the uword name 
3134			; 
3134			;		 
3134			;	if DEBUG_FORTH_WORDS 
3134			;		DMARK "Lt1" 
3134			;		CALLMONITOR 
3134			;	endif 
3134			;		 
3134			; 
3134			;; malloc space for the string because we cant change it 
3134			; 
3134			;		call malloc 
3134			;	if DEBUG_FORTH_MALLOC_GUARD 
3134			;		push af 
3134			;		call ishlzero 
3134			;		pop af 
3134			;		 
3134			;		call z,malloc_error 
3134			;	endif 
3134			; 
3134			;	if DEBUG_FORTH_WORDS 
3134			;		DMARK "Lt2" 
3134			;		CALLMONITOR 
3134			;	endif 
3134			;		pop de 
3134			;		push hl    ; push the malloc to release later 
3134			;		push hl   ;  push back a copy for the later stack push 
3134			;		 
3134			;; copy the string swapping out the zero terms for spaces 
3134			; 
3134			;		; de has our source 
3134			;		; hl has our dest 
3134			; 
3134			;; add the coln def 
3134			; 
3134			;		ld a, ':' 
3134			;		ld (hl), a 
3134			;		inc hl 
3134			;		ld a, ' ' 
3134			;		ld (hl), a 
3134			;		inc hl 
3134			; 
3134			;; add the uname word 
3134			;		push de   ; save our string for now 
3134			;		ex de, hl 
3134			; 
3134			;		FORTH_DSP_VALUE 
3134			;		;v5 FORTH_DSP_VALUE 
3134			; 
3134			;		inc hl   ; skip type but we know by now this is OK 
3134			; 
3134			;.luword:	ld a,(hl) 
3134			;		cp 0 
3134			;		jr z, .luword2 
3134			;		ld (de), a 
3134			;		inc de 
3134			;		inc hl 
3134			;		jr .luword 
3134			; 
3134			;.luword2:	ld a, ' ' 
3134			;		ld (de), a 
3134			;;		inc hl 
3134			;;		inc de 
3134			;;		ld (de), a 
3134			;;		inc hl 
3134			;		inc de 
3134			; 
3134			;		ex de, hl 
3134			;		pop de 
3134			;		 
3134			;		 
3134			; 
3134			;; detoken that string and copy it 
3134			; 
3134			;	if DEBUG_FORTH_WORDS 
3134			;		DMARK "Lt2" 
3134			;		CALLMONITOR 
3134			;	endif 
3134			;.ldetok:	ld a, (de) 
3134			;		cp FORTH_END_BUFFER 
3134			;		jr z, .ldetokend 
3134			;		; swap out any zero term for space 
3134			;		cp 0 
3134			;		jr nz, .ldetoknext 
3134			;		ld a, ' ' 
3134			; 
3134			;	if DEBUG_FORTH_WORDS 
3134			;		DMARK "LtS" 
3134			;		CALLMONITOR 
3134			;	endif 
3134			;.ldetoknext:	ld (hl), a 
3134			;		inc de 
3134			;		inc hl 
3134			;		jr .ldetok 
3134			; 
3134			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
3134			;		ld (hl), a  
3134			; 
3134			;; free that temp malloc 
3134			; 
3134			;		pop hl    
3134			; 
3134			;	if DEBUG_FORTH_WORDS 
3134			;		DMARK "Lt4" 
3134			;		CALLMONITOR 
3134			;	endif 
3134			;		call forth_apushstrhl 
3134			; 
3134			;		; get rid of temp malloc area 
3134			; 
3134			;		pop hl 
3134			;		call free 
3134			; 
3134			;		jr .ludone 
3134			; 
3134			;.lnuword:	pop hl 
3134			;		call forth_tok_next 
3134			;		jp .ldouscan  
3134			; 
3134			;.ludone:		 pop hl 
3134			; 
3134					NEXTW 
3134 c3 38 24			jp macro_next 
3137				endm 
# End of macro NEXTW
3137			 
3137			.FORGET: 
3137				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
3137 5d				db WORD_SYS_CORE+73             
3138 b0 31			dw .NOP            
313a 07				db 6 + 1 
313b .. 00			db "FORGET",0              
3142				endm 
# End of macro CWHEAD
3142			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
3142			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
3142			; | |  
3142			; | | e.g. "MORE" forget 
3142					if DEBUG_FORTH_WORDS_KEY 
3142						DMARK "FRG" 
3142 f5				push af  
3143 3a 57 31			ld a, (.dmark)  
3146 32 a0 fd			ld (debug_mark),a  
3149 3a 58 31			ld a, (.dmark+1)  
314c 32 a1 fd			ld (debug_mark+1),a  
314f 3a 59 31			ld a, (.dmark+2)  
3152 32 a2 fd			ld (debug_mark+2),a  
3155 18 03			jr .pastdmark  
3157 ..			.dmark: db "FRG"  
315a f1			.pastdmark: pop af  
315b			endm  
# End of macro DMARK
315b						CALLMONITOR 
315b cd aa fd			call debug_vector  
315e				endm  
# End of macro CALLMONITOR
315e					endif 
315e			 
315e				; find uword 
315e			        ; update start of word with "_" 
315e				; replace uword with deleted flag 
315e			 
315e			 
315e			;	if DEBUG_FORTH_WORDS 
315e			;		DMARK "FOG" 
315e			;		CALLMONITOR 
315e			;	endif 
315e			 
315e			 
315e					; Get ptr to the word we need to look up 
315e			 
315e					FORTH_DSP_VALUEHL 
315e cd 4d 22			call macro_dsp_valuehl 
3161				endm 
# End of macro FORTH_DSP_VALUEHL
3161					;v5 FORTH_DSP_VALUE 
3161				; TODO type check 
3161			;		inc hl    ; Skip type check  
3161 e5					push hl 
3162 c1					pop bc 
3163			;		ex de, hl    ; put into DE 
3163			 
3163			 
3163 21 00 80				ld hl, baseram 
3166					;ld hl, baseusermem 
3166			 
3166				; skip dict stub 
3166			;	call forth_tok_next 
3166 e5			push hl   ; sacreifical push 
3167			 
3167			.fldouscanm: 
3167 e1				pop hl 
3168			.fldouscan: 
3168			;	if DEBUG_FORTH_WORDS 
3168			;		DMARK "LSs" 
3168			;		CALLMONITOR 
3168			;	endif 
3168				; skip dict stub 
3168 cd 75 25				call forth_tok_next 
316b			 
316b			 
316b			; while we have words to look for 
316b			 
316b 7e				ld a, (hl)      
316c			;	if DEBUG_FORTH_WORDS 
316c			;		DMARK "LSk" 
316c			;		CALLMONITOR 
316c			;	endif 
316c fe 00				cp WORD_SYS_END 
316e ca aa 31				jp z, .flunotfound 
3171 fe 01				cp WORD_SYS_UWORD 
3173 c2 68 31				jp nz, .fldouscan 
3176			 
3176			;	if DEBUG_FORTH_WORDS 
3176			;		DMARK "LSu" 
3176			;		CALLMONITOR 
3176			;	endif 
3176			 
3176					; found a uword but is it the one we want... 
3176			 
3176 c5					push bc     ; uword to find is on bc 
3177 d1					pop de 
3178			 
3178 e5					push hl  ; to save the ptr 
3179			 
3179					; skip opcode 
3179 23					inc hl  
317a					; skip next ptr 
317a 23					inc hl  
317b 23					inc hl 
317c					; skip len 
317c 23					inc hl 
317d			 
317d			;	if DEBUG_FORTH_WORDS 
317d			;		DMARK "LSc" 
317d			;		CALLMONITOR 
317d			;	endif 
317d cd 7c 13				call strcmp 
3180 c2 67 31				jp nz, .fldouscanm 
3183			; 
3183			; 
3183			;; while we have words to look for 
3183			; 
3183			;.fdouscan:	ld a, (hl)      
3183			;	if DEBUG_FORTH_WORDS 
3183			;		DMARK "LSs" 
3183			;		CALLMONITOR 
3183			;	endif 
3183			;		cp WORD_SYS_END 
3183			;		jp z, .fudone 
3183			;		cp WORD_SYS_UWORD 
3183			;		jp nz, .fnuword 
3183			; 
3183			;	if DEBUG_FORTH_WORDS 
3183			;		DMARK "FGu" 
3183			;		CALLMONITOR 
3183			;	endif 
3183			; 
3183			;		; found a uword but is it the one we want... 
3183			; 
3183			; 
3183			;	        pop de   ; get back the dsp name 
3183			;		push de 
3183			; 
3183			;		push hl  ; to save the ptr 
3183			; 
3183			;		; skip opcode 
3183			;		inc hl  
3183			;		; skip next ptr 
3183			;		inc hl  
3183			;		inc hl 
3183			;		; skip len 
3183			;		inc hl 
3183			; 
3183			;	if DEBUG_FORTH_WORDS 
3183			;		DMARK "FGc" 
3183			;		CALLMONITOR 
3183			;	endif 
3183			;		call strcmp 
3183			;		jp nz, .fnuword 
3183			 
3183			 
3183 e1			pop hl 
3184			 
3184				 
3184				if DEBUG_FORTH_WORDS 
3184					DMARK "FGm" 
3184 f5				push af  
3185 3a 99 31			ld a, (.dmark)  
3188 32 a0 fd			ld (debug_mark),a  
318b 3a 9a 31			ld a, (.dmark+1)  
318e 32 a1 fd			ld (debug_mark+1),a  
3191 3a 9b 31			ld a, (.dmark+2)  
3194 32 a2 fd			ld (debug_mark+2),a  
3197 18 03			jr .pastdmark  
3199 ..			.dmark: db "FGm"  
319c f1			.pastdmark: pop af  
319d			endm  
# End of macro DMARK
319d					CALLMONITOR 
319d cd aa fd			call debug_vector  
31a0				endm  
# End of macro CALLMONITOR
31a0				endif 
31a0			 
31a0			 
31a0			 
31a0					; we have a uword so push its name to the stack 
31a0			 
31a0			;	   	push hl  ; save so we can move to next dict block 
31a0			;pop hl 
31a0			 
31a0					; update opcode to deleted 
31a0 3e 03				ld a, WORD_SYS_DELETED 
31a2 77					ld (hl), a 
31a3			 
31a3 23					inc hl  
31a4					; skip next ptr 
31a4 23					inc hl  
31a5 23					inc hl 
31a6					; skip len 
31a6 23					inc hl 
31a7			 
31a7					; TODO change parser to skip deleted words but for now mark it out 
31a7 3e 5f				ld a, "_" 
31a9 77					ld  (hl),a 
31aa			 
31aa			;		jr .fudone 
31aa			; 
31aa			;.fnuword:	pop hl 
31aa			;		call forth_tok_next 
31aa			;		jp .fdouscan  
31aa			 
31aa			.flunotfound:		  
31aa			 
31aa			 
31aa					 
31aa					FORTH_DSP_POP 
31aa cd 05 23			call macro_forth_dsp_pop 
31ad				endm 
# End of macro FORTH_DSP_POP
31ad			;		ld hl, .luno 
31ad			;.fudone:		 pop hl 
31ad					NEXTW 
31ad c3 38 24			jp macro_next 
31b0				endm 
# End of macro NEXTW
31b0			.NOP: 
31b0				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
31b0 61				db WORD_SYS_CORE+77             
31b1 d7 31			dw .COMO            
31b3 04				db 3 + 1 
31b4 .. 00			db "NOP",0              
31b8				endm 
# End of macro CWHEAD
31b8			; | NOP (  --  ) Do nothing | DONE 
31b8					if DEBUG_FORTH_WORDS_KEY 
31b8						DMARK "NOP" 
31b8 f5				push af  
31b9 3a cd 31			ld a, (.dmark)  
31bc 32 a0 fd			ld (debug_mark),a  
31bf 3a ce 31			ld a, (.dmark+1)  
31c2 32 a1 fd			ld (debug_mark+1),a  
31c5 3a cf 31			ld a, (.dmark+2)  
31c8 32 a2 fd			ld (debug_mark+2),a  
31cb 18 03			jr .pastdmark  
31cd ..			.dmark: db "NOP"  
31d0 f1			.pastdmark: pop af  
31d1			endm  
# End of macro DMARK
31d1						CALLMONITOR 
31d1 cd aa fd			call debug_vector  
31d4				endm  
# End of macro CALLMONITOR
31d4					endif 
31d4				       NEXTW 
31d4 c3 38 24			jp macro_next 
31d7				endm 
# End of macro NEXTW
31d7			.COMO: 
31d7				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
31d7 6e				db WORD_SYS_CORE+90             
31d8 29 32			dw .COMC            
31da 02				db 1 + 1 
31db .. 00			db "(",0              
31dd				endm 
# End of macro CWHEAD
31dd			; | ( ( -- )  Start of comment | DONE 
31dd			 
31dd			 
31dd 2a f7 f3				ld hl, ( os_tok_ptr) 
31e0 11 24 32			ld de, .closepar 
31e3					 
31e3					if DEBUG_FORTH_WORDS 
31e3						DMARK ").." 
31e3 f5				push af  
31e4 3a f8 31			ld a, (.dmark)  
31e7 32 a0 fd			ld (debug_mark),a  
31ea 3a f9 31			ld a, (.dmark+1)  
31ed 32 a1 fd			ld (debug_mark+1),a  
31f0 3a fa 31			ld a, (.dmark+2)  
31f3 32 a2 fd			ld (debug_mark+2),a  
31f6 18 03			jr .pastdmark  
31f8 ..			.dmark: db ").."  
31fb f1			.pastdmark: pop af  
31fc			endm  
# End of macro DMARK
31fc						CALLMONITOR 
31fc cd aa fd			call debug_vector  
31ff				endm  
# End of macro CALLMONITOR
31ff					endif 
31ff cd 3f 25			call findnexttok  
3202			 
3202					if DEBUG_FORTH_WORDS 
3202						DMARK "IF5" 
3202 f5				push af  
3203 3a 17 32			ld a, (.dmark)  
3206 32 a0 fd			ld (debug_mark),a  
3209 3a 18 32			ld a, (.dmark+1)  
320c 32 a1 fd			ld (debug_mark+1),a  
320f 3a 19 32			ld a, (.dmark+2)  
3212 32 a2 fd			ld (debug_mark+2),a  
3215 18 03			jr .pastdmark  
3217 ..			.dmark: db "IF5"  
321a f1			.pastdmark: pop af  
321b			endm  
# End of macro DMARK
321b						CALLMONITOR 
321b cd aa fd			call debug_vector  
321e				endm  
# End of macro CALLMONITOR
321e					endif 
321e				; replace below with ) exec using tok_ptr 
321e 22 f7 f3			ld (os_tok_ptr), hl 
3221 c3 c1 24			jp exec1 
3224			 
3224 .. 00			.closepar:   db ")",0 
3226			 
3226				       NEXTW 
3226 c3 38 24			jp macro_next 
3229				endm 
# End of macro NEXTW
3229			.COMC: 
3229				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
3229 6f				db WORD_SYS_CORE+91             
322a 32 32			dw .SCRATCH            
322c 02				db 1 + 1 
322d .. 00			db ")",0              
322f				endm 
# End of macro CWHEAD
322f			; | ) ( -- )  End of comment |  DONE  
322f				       NEXTW 
322f c3 38 24			jp macro_next 
3232				endm 
# End of macro NEXTW
3232			 
3232			.SCRATCH: 
3232				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
3232 6f				db WORD_SYS_CORE+91             
3233 6d 32			dw .INC            
3235 08				db 7 + 1 
3236 .. 00			db "SCRATCH",0              
323e				endm 
# End of macro CWHEAD
323e			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
323e			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
323e			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
323e			; | |  
323e			; | | e.g.    : score $00 scratch ; 
323e			; | |  
323e			; | | $00 score ! 
323e			; | | $01 score +! 
323e			; | |  
323e			; | | e.g.   : varword $0a scratch ;  
323e			; | | 
323e			; | | $8000 varword ! 
323e					if DEBUG_FORTH_WORDS_KEY 
323e						DMARK "SCR" 
323e f5				push af  
323f 3a 53 32			ld a, (.dmark)  
3242 32 a0 fd			ld (debug_mark),a  
3245 3a 54 32			ld a, (.dmark+1)  
3248 32 a1 fd			ld (debug_mark+1),a  
324b 3a 55 32			ld a, (.dmark+2)  
324e 32 a2 fd			ld (debug_mark+2),a  
3251 18 03			jr .pastdmark  
3253 ..			.dmark: db "SCR"  
3256 f1			.pastdmark: pop af  
3257			endm  
# End of macro DMARK
3257						CALLMONITOR 
3257 cd aa fd			call debug_vector  
325a				endm  
# End of macro CALLMONITOR
325a					endif 
325a			 
325a					FORTH_DSP_VALUEHL 
325a cd 4d 22			call macro_dsp_valuehl 
325d				endm 
# End of macro FORTH_DSP_VALUEHL
325d				 
325d					FORTH_DSP_POP 
325d cd 05 23			call macro_forth_dsp_pop 
3260				endm 
# End of macro FORTH_DSP_POP
3260			 
3260 7d					ld a, l 
3261 21 1b f6				ld hl, os_var_array 
3264 cd de 0f				call addatohl 
3267			 
3267 cd 48 20				call forth_push_numhl 
326a			 
326a				       NEXTW 
326a c3 38 24			jp macro_next 
326d				endm 
# End of macro NEXTW
326d			 
326d			.INC: 
326d				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
326d 6f				db WORD_SYS_CORE+91             
326e c3 32			dw .DEC            
3270 03				db 2 + 1 
3271 .. 00			db "+!",0              
3274				endm 
# End of macro CWHEAD
3274			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
3274					if DEBUG_FORTH_WORDS_KEY 
3274						DMARK "+s_" 
3274 f5				push af  
3275 3a 89 32			ld a, (.dmark)  
3278 32 a0 fd			ld (debug_mark),a  
327b 3a 8a 32			ld a, (.dmark+1)  
327e 32 a1 fd			ld (debug_mark+1),a  
3281 3a 8b 32			ld a, (.dmark+2)  
3284 32 a2 fd			ld (debug_mark+2),a  
3287 18 03			jr .pastdmark  
3289 ..			.dmark: db "+s_"  
328c f1			.pastdmark: pop af  
328d			endm  
# End of macro DMARK
328d						CALLMONITOR 
328d cd aa fd			call debug_vector  
3290				endm  
# End of macro CALLMONITOR
3290					endif 
3290			 
3290					FORTH_DSP_VALUEHL 
3290 cd 4d 22			call macro_dsp_valuehl 
3293				endm 
# End of macro FORTH_DSP_VALUEHL
3293			 
3293 e5					push hl   ; save address 
3294			 
3294					FORTH_DSP_POP 
3294 cd 05 23			call macro_forth_dsp_pop 
3297				endm 
# End of macro FORTH_DSP_POP
3297			 
3297					FORTH_DSP_VALUEHL 
3297 cd 4d 22			call macro_dsp_valuehl 
329a				endm 
# End of macro FORTH_DSP_VALUEHL
329a			 
329a e5					push hl 
329b					FORTH_DSP_POP 
329b cd 05 23			call macro_forth_dsp_pop 
329e				endm 
# End of macro FORTH_DSP_POP
329e e1					pop hl 
329f			 
329f					; hl contains value to add to byte at a 
329f				 
329f eb					ex de, hl 
32a0			 
32a0 e1					pop hl 
32a1			 
32a1					if DEBUG_FORTH_WORDS 
32a1						DMARK "INC" 
32a1 f5				push af  
32a2 3a b6 32			ld a, (.dmark)  
32a5 32 a0 fd			ld (debug_mark),a  
32a8 3a b7 32			ld a, (.dmark+1)  
32ab 32 a1 fd			ld (debug_mark+1),a  
32ae 3a b8 32			ld a, (.dmark+2)  
32b1 32 a2 fd			ld (debug_mark+2),a  
32b4 18 03			jr .pastdmark  
32b6 ..			.dmark: db "INC"  
32b9 f1			.pastdmark: pop af  
32ba			endm  
# End of macro DMARK
32ba						CALLMONITOR 
32ba cd aa fd			call debug_vector  
32bd				endm  
# End of macro CALLMONITOR
32bd					endif 
32bd			 
32bd 7e					ld a,(hl) 
32be 83					add e 
32bf 77					ld (hl),a 
32c0			 
32c0			 
32c0			 
32c0				       NEXTW 
32c0 c3 38 24			jp macro_next 
32c3				endm 
# End of macro NEXTW
32c3			 
32c3			.DEC: 
32c3				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
32c3 6f				db WORD_SYS_CORE+91             
32c4 17 33			dw .INC2            
32c6 03				db 2 + 1 
32c7 .. 00			db "-!",0              
32ca				endm 
# End of macro CWHEAD
32ca			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
32ca					if DEBUG_FORTH_WORDS_KEY 
32ca						DMARK "-s_" 
32ca f5				push af  
32cb 3a df 32			ld a, (.dmark)  
32ce 32 a0 fd			ld (debug_mark),a  
32d1 3a e0 32			ld a, (.dmark+1)  
32d4 32 a1 fd			ld (debug_mark+1),a  
32d7 3a e1 32			ld a, (.dmark+2)  
32da 32 a2 fd			ld (debug_mark+2),a  
32dd 18 03			jr .pastdmark  
32df ..			.dmark: db "-s_"  
32e2 f1			.pastdmark: pop af  
32e3			endm  
# End of macro DMARK
32e3						CALLMONITOR 
32e3 cd aa fd			call debug_vector  
32e6				endm  
# End of macro CALLMONITOR
32e6					endif 
32e6			 
32e6					FORTH_DSP_VALUEHL 
32e6 cd 4d 22			call macro_dsp_valuehl 
32e9				endm 
# End of macro FORTH_DSP_VALUEHL
32e9			 
32e9 e5					push hl   ; save address 
32ea			 
32ea					FORTH_DSP_POP 
32ea cd 05 23			call macro_forth_dsp_pop 
32ed				endm 
# End of macro FORTH_DSP_POP
32ed			 
32ed					FORTH_DSP_VALUEHL 
32ed cd 4d 22			call macro_dsp_valuehl 
32f0				endm 
# End of macro FORTH_DSP_VALUEHL
32f0			 
32f0					; hl contains value to add to byte at a 
32f0				 
32f0 eb					ex de, hl 
32f1			 
32f1 e1					pop hl 
32f2			 
32f2					if DEBUG_FORTH_WORDS 
32f2						DMARK "DEC" 
32f2 f5				push af  
32f3 3a 07 33			ld a, (.dmark)  
32f6 32 a0 fd			ld (debug_mark),a  
32f9 3a 08 33			ld a, (.dmark+1)  
32fc 32 a1 fd			ld (debug_mark+1),a  
32ff 3a 09 33			ld a, (.dmark+2)  
3302 32 a2 fd			ld (debug_mark+2),a  
3305 18 03			jr .pastdmark  
3307 ..			.dmark: db "DEC"  
330a f1			.pastdmark: pop af  
330b			endm  
# End of macro DMARK
330b						CALLMONITOR 
330b cd aa fd			call debug_vector  
330e				endm  
# End of macro CALLMONITOR
330e					endif 
330e			 
330e 7e					ld a,(hl) 
330f 93					sub e 
3310 77					ld (hl),a 
3311			 
3311			 
3311					FORTH_DSP_POP 
3311 cd 05 23			call macro_forth_dsp_pop 
3314				endm 
# End of macro FORTH_DSP_POP
3314			 
3314				       NEXTW 
3314 c3 38 24			jp macro_next 
3317				endm 
# End of macro NEXTW
3317			 
3317			.INC2: 
3317				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
3317 6f				db WORD_SYS_CORE+91             
3318 c4 33			dw .DEC2            
331a 04				db 3 + 1 
331b .. 00			db "+2!",0              
331f				endm 
# End of macro CWHEAD
331f			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
331f			 
331f					if DEBUG_FORTH_WORDS_KEY 
331f						DMARK "+2s" 
331f f5				push af  
3320 3a 34 33			ld a, (.dmark)  
3323 32 a0 fd			ld (debug_mark),a  
3326 3a 35 33			ld a, (.dmark+1)  
3329 32 a1 fd			ld (debug_mark+1),a  
332c 3a 36 33			ld a, (.dmark+2)  
332f 32 a2 fd			ld (debug_mark+2),a  
3332 18 03			jr .pastdmark  
3334 ..			.dmark: db "+2s"  
3337 f1			.pastdmark: pop af  
3338			endm  
# End of macro DMARK
3338						CALLMONITOR 
3338 cd aa fd			call debug_vector  
333b				endm  
# End of macro CALLMONITOR
333b					endif 
333b			 
333b					; Address 
333b			 
333b					FORTH_DSP_VALUEHL 
333b cd 4d 22			call macro_dsp_valuehl 
333e				endm 
# End of macro FORTH_DSP_VALUEHL
333e			 
333e e5					push hl    ; save address 
333f			 
333f					; load content into de 
333f			 
333f 5e					ld e,(hl) 
3340 23					inc hl 
3341 56					ld d, (hl) 
3342			 
3342					if DEBUG_FORTH_WORDS 
3342						DMARK "+2a" 
3342 f5				push af  
3343 3a 57 33			ld a, (.dmark)  
3346 32 a0 fd			ld (debug_mark),a  
3349 3a 58 33			ld a, (.dmark+1)  
334c 32 a1 fd			ld (debug_mark+1),a  
334f 3a 59 33			ld a, (.dmark+2)  
3352 32 a2 fd			ld (debug_mark+2),a  
3355 18 03			jr .pastdmark  
3357 ..			.dmark: db "+2a"  
335a f1			.pastdmark: pop af  
335b			endm  
# End of macro DMARK
335b						CALLMONITOR 
335b cd aa fd			call debug_vector  
335e				endm  
# End of macro CALLMONITOR
335e					endif 
335e			 
335e					FORTH_DSP_POP 
335e cd 05 23			call macro_forth_dsp_pop 
3361				endm 
# End of macro FORTH_DSP_POP
3361			 
3361					; Get value to add 
3361			 
3361					FORTH_DSP_VALUE 
3361 cd 36 22			call macro_forth_dsp_value 
3364				endm 
# End of macro FORTH_DSP_VALUE
3364			 
3364					if DEBUG_FORTH_WORDS 
3364						DMARK "+2v" 
3364 f5				push af  
3365 3a 79 33			ld a, (.dmark)  
3368 32 a0 fd			ld (debug_mark),a  
336b 3a 7a 33			ld a, (.dmark+1)  
336e 32 a1 fd			ld (debug_mark+1),a  
3371 3a 7b 33			ld a, (.dmark+2)  
3374 32 a2 fd			ld (debug_mark+2),a  
3377 18 03			jr .pastdmark  
3379 ..			.dmark: db "+2v"  
337c f1			.pastdmark: pop af  
337d			endm  
# End of macro DMARK
337d						CALLMONITOR 
337d cd aa fd			call debug_vector  
3380				endm  
# End of macro CALLMONITOR
3380					endif 
3380			 
3380 19					add hl, de 
3381			 
3381					if DEBUG_FORTH_WORDS 
3381						DMARK "+2+" 
3381 f5				push af  
3382 3a 96 33			ld a, (.dmark)  
3385 32 a0 fd			ld (debug_mark),a  
3388 3a 97 33			ld a, (.dmark+1)  
338b 32 a1 fd			ld (debug_mark+1),a  
338e 3a 98 33			ld a, (.dmark+2)  
3391 32 a2 fd			ld (debug_mark+2),a  
3394 18 03			jr .pastdmark  
3396 ..			.dmark: db "+2+"  
3399 f1			.pastdmark: pop af  
339a			endm  
# End of macro DMARK
339a						CALLMONITOR 
339a cd aa fd			call debug_vector  
339d				endm  
# End of macro CALLMONITOR
339d					endif 
339d			 
339d					; move result to de 
339d			 
339d eb					ex de, hl 
339e			 
339e					; Address 
339e			 
339e e1					pop hl 
339f			 
339f					; save it back 
339f			 
339f 73					ld (hl), e 
33a0 23					inc hl 
33a1 72					ld (hl), d 
33a2			 
33a2					if DEBUG_FORTH_WORDS 
33a2						DMARK "+2e" 
33a2 f5				push af  
33a3 3a b7 33			ld a, (.dmark)  
33a6 32 a0 fd			ld (debug_mark),a  
33a9 3a b8 33			ld a, (.dmark+1)  
33ac 32 a1 fd			ld (debug_mark+1),a  
33af 3a b9 33			ld a, (.dmark+2)  
33b2 32 a2 fd			ld (debug_mark+2),a  
33b5 18 03			jr .pastdmark  
33b7 ..			.dmark: db "+2e"  
33ba f1			.pastdmark: pop af  
33bb			endm  
# End of macro DMARK
33bb						CALLMONITOR 
33bb cd aa fd			call debug_vector  
33be				endm  
# End of macro CALLMONITOR
33be					endif 
33be			 
33be			 
33be			 
33be					FORTH_DSP_POP 
33be cd 05 23			call macro_forth_dsp_pop 
33c1				endm 
# End of macro FORTH_DSP_POP
33c1			 
33c1			 
33c1				       NEXTW 
33c1 c3 38 24			jp macro_next 
33c4				endm 
# End of macro NEXTW
33c4			 
33c4			.DEC2: 
33c4				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
33c4 6f				db WORD_SYS_CORE+91             
33c5 73 34			dw .GET2            
33c7 04				db 3 + 1 
33c8 .. 00			db "-2!",0              
33cc				endm 
# End of macro CWHEAD
33cc			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
33cc			 
33cc			 
33cc					if DEBUG_FORTH_WORDS_KEY 
33cc						DMARK "-2s" 
33cc f5				push af  
33cd 3a e1 33			ld a, (.dmark)  
33d0 32 a0 fd			ld (debug_mark),a  
33d3 3a e2 33			ld a, (.dmark+1)  
33d6 32 a1 fd			ld (debug_mark+1),a  
33d9 3a e3 33			ld a, (.dmark+2)  
33dc 32 a2 fd			ld (debug_mark+2),a  
33df 18 03			jr .pastdmark  
33e1 ..			.dmark: db "-2s"  
33e4 f1			.pastdmark: pop af  
33e5			endm  
# End of macro DMARK
33e5						CALLMONITOR 
33e5 cd aa fd			call debug_vector  
33e8				endm  
# End of macro CALLMONITOR
33e8					endif 
33e8			 
33e8					; Address 
33e8			 
33e8					FORTH_DSP_VALUEHL 
33e8 cd 4d 22			call macro_dsp_valuehl 
33eb				endm 
# End of macro FORTH_DSP_VALUEHL
33eb			 
33eb e5					push hl    ; save address 
33ec			 
33ec					; load content into de 
33ec			 
33ec 5e					ld e,(hl) 
33ed 23					inc hl 
33ee 56					ld d, (hl) 
33ef			 
33ef					if DEBUG_FORTH_WORDS 
33ef						DMARK "-2a" 
33ef f5				push af  
33f0 3a 04 34			ld a, (.dmark)  
33f3 32 a0 fd			ld (debug_mark),a  
33f6 3a 05 34			ld a, (.dmark+1)  
33f9 32 a1 fd			ld (debug_mark+1),a  
33fc 3a 06 34			ld a, (.dmark+2)  
33ff 32 a2 fd			ld (debug_mark+2),a  
3402 18 03			jr .pastdmark  
3404 ..			.dmark: db "-2a"  
3407 f1			.pastdmark: pop af  
3408			endm  
# End of macro DMARK
3408						CALLMONITOR 
3408 cd aa fd			call debug_vector  
340b				endm  
# End of macro CALLMONITOR
340b					endif 
340b			 
340b					FORTH_DSP_POP 
340b cd 05 23			call macro_forth_dsp_pop 
340e				endm 
# End of macro FORTH_DSP_POP
340e			 
340e					; Get value to remove 
340e			 
340e					FORTH_DSP_VALUE 
340e cd 36 22			call macro_forth_dsp_value 
3411				endm 
# End of macro FORTH_DSP_VALUE
3411			 
3411					if DEBUG_FORTH_WORDS 
3411						DMARK "-2v" 
3411 f5				push af  
3412 3a 26 34			ld a, (.dmark)  
3415 32 a0 fd			ld (debug_mark),a  
3418 3a 27 34			ld a, (.dmark+1)  
341b 32 a1 fd			ld (debug_mark+1),a  
341e 3a 28 34			ld a, (.dmark+2)  
3421 32 a2 fd			ld (debug_mark+2),a  
3424 18 03			jr .pastdmark  
3426 ..			.dmark: db "-2v"  
3429 f1			.pastdmark: pop af  
342a			endm  
# End of macro DMARK
342a						CALLMONITOR 
342a cd aa fd			call debug_vector  
342d				endm  
# End of macro CALLMONITOR
342d					endif 
342d			 
342d eb					ex de, hl 
342e ed 52				sbc hl, de 
3430			 
3430					if DEBUG_FORTH_WORDS 
3430						DMARK "-2d" 
3430 f5				push af  
3431 3a 45 34			ld a, (.dmark)  
3434 32 a0 fd			ld (debug_mark),a  
3437 3a 46 34			ld a, (.dmark+1)  
343a 32 a1 fd			ld (debug_mark+1),a  
343d 3a 47 34			ld a, (.dmark+2)  
3440 32 a2 fd			ld (debug_mark+2),a  
3443 18 03			jr .pastdmark  
3445 ..			.dmark: db "-2d"  
3448 f1			.pastdmark: pop af  
3449			endm  
# End of macro DMARK
3449						CALLMONITOR 
3449 cd aa fd			call debug_vector  
344c				endm  
# End of macro CALLMONITOR
344c					endif 
344c			 
344c					; move result to de 
344c			 
344c eb					ex de, hl 
344d			 
344d					; Address 
344d			 
344d e1					pop hl 
344e			 
344e					; save it back 
344e			 
344e 73					ld (hl), e 
344f 23					inc hl 
3450 72					ld (hl), d 
3451			 
3451					if DEBUG_FORTH_WORDS 
3451						DMARK "-2e" 
3451 f5				push af  
3452 3a 66 34			ld a, (.dmark)  
3455 32 a0 fd			ld (debug_mark),a  
3458 3a 67 34			ld a, (.dmark+1)  
345b 32 a1 fd			ld (debug_mark+1),a  
345e 3a 68 34			ld a, (.dmark+2)  
3461 32 a2 fd			ld (debug_mark+2),a  
3464 18 03			jr .pastdmark  
3466 ..			.dmark: db "-2e"  
3469 f1			.pastdmark: pop af  
346a			endm  
# End of macro DMARK
346a						CALLMONITOR 
346a cd aa fd			call debug_vector  
346d				endm  
# End of macro CALLMONITOR
346d					endif 
346d			 
346d			 
346d					FORTH_DSP_POP 
346d cd 05 23			call macro_forth_dsp_pop 
3470				endm 
# End of macro FORTH_DSP_POP
3470			 
3470			 
3470			 
3470				       NEXTW 
3470 c3 38 24			jp macro_next 
3473				endm 
# End of macro NEXTW
3473			.GET2: 
3473				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
3473 6f				db WORD_SYS_CORE+91             
3474 a8 34			dw .BANG2            
3476 03				db 2 + 1 
3477 .. 00			db "2@",0              
347a				endm 
# End of macro CWHEAD
347a			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
347a					if DEBUG_FORTH_WORDS_KEY 
347a						DMARK "2A_" 
347a f5				push af  
347b 3a 8f 34			ld a, (.dmark)  
347e 32 a0 fd			ld (debug_mark),a  
3481 3a 90 34			ld a, (.dmark+1)  
3484 32 a1 fd			ld (debug_mark+1),a  
3487 3a 91 34			ld a, (.dmark+2)  
348a 32 a2 fd			ld (debug_mark+2),a  
348d 18 03			jr .pastdmark  
348f ..			.dmark: db "2A_"  
3492 f1			.pastdmark: pop af  
3493			endm  
# End of macro DMARK
3493						CALLMONITOR 
3493 cd aa fd			call debug_vector  
3496				endm  
# End of macro CALLMONITOR
3496					endif 
3496			 
3496					FORTH_DSP_VALUEHL 
3496 cd 4d 22			call macro_dsp_valuehl 
3499				endm 
# End of macro FORTH_DSP_VALUEHL
3499			 
3499 e5					push hl   ; save address 
349a			 
349a					FORTH_DSP_POP 
349a cd 05 23			call macro_forth_dsp_pop 
349d				endm 
# End of macro FORTH_DSP_POP
349d			 
349d e1					pop hl 
349e			 
349e 5e					ld e, (hl) 
349f 23					inc hl 
34a0 56					ld d, (hl) 
34a1			 
34a1 eb					ex de, hl 
34a2			 
34a2 cd 48 20				call forth_push_numhl 
34a5			 
34a5				       NEXTW 
34a5 c3 38 24			jp macro_next 
34a8				endm 
# End of macro NEXTW
34a8			.BANG2: 
34a8				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
34a8 6f				db WORD_SYS_CORE+91             
34a9 e0 34			dw .CONFIG            
34ab 03				db 2 + 1 
34ac .. 00			db "2!",0              
34af				endm 
# End of macro CWHEAD
34af			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
34af					if DEBUG_FORTH_WORDS_KEY 
34af						DMARK "2S_" 
34af f5				push af  
34b0 3a c4 34			ld a, (.dmark)  
34b3 32 a0 fd			ld (debug_mark),a  
34b6 3a c5 34			ld a, (.dmark+1)  
34b9 32 a1 fd			ld (debug_mark+1),a  
34bc 3a c6 34			ld a, (.dmark+2)  
34bf 32 a2 fd			ld (debug_mark+2),a  
34c2 18 03			jr .pastdmark  
34c4 ..			.dmark: db "2S_"  
34c7 f1			.pastdmark: pop af  
34c8			endm  
# End of macro DMARK
34c8						CALLMONITOR 
34c8 cd aa fd			call debug_vector  
34cb				endm  
# End of macro CALLMONITOR
34cb					endif 
34cb			 
34cb					FORTH_DSP_VALUEHL 
34cb cd 4d 22			call macro_dsp_valuehl 
34ce				endm 
# End of macro FORTH_DSP_VALUEHL
34ce			 
34ce e5					push hl   ; save address 
34cf			 
34cf			 
34cf					FORTH_DSP_POP 
34cf cd 05 23			call macro_forth_dsp_pop 
34d2				endm 
# End of macro FORTH_DSP_POP
34d2			 
34d2					 
34d2					FORTH_DSP_VALUEHL 
34d2 cd 4d 22			call macro_dsp_valuehl 
34d5				endm 
# End of macro FORTH_DSP_VALUEHL
34d5			 
34d5					FORTH_DSP_POP 
34d5 cd 05 23			call macro_forth_dsp_pop 
34d8				endm 
# End of macro FORTH_DSP_POP
34d8			 
34d8 eb					ex de, hl    ; value now in de 
34d9			 
34d9 e1					pop hl 
34da			 
34da 73					ld (hl), e 
34db			 
34db 23					inc hl 
34dc			 
34dc 72					ld (hl), d 
34dd			 
34dd			 
34dd				       NEXTW 
34dd c3 38 24			jp macro_next 
34e0				endm 
# End of macro NEXTW
34e0			.CONFIG: 
34e0				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
34e0 6f				db WORD_SYS_CORE+91             
34e1 f1 34			dw .ADTOS            
34e3 07				db 6 + 1 
34e4 .. 00			db "CONFIG",0              
34eb				endm 
# End of macro CWHEAD
34eb			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
34eb			 
34eb cd 52 15				call config 
34ee					NEXTW 
34ee c3 38 24			jp macro_next 
34f1				endm 
# End of macro NEXTW
34f1			 
34f1			.ADTOS: 
34f1				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
34f1 6f				db WORD_SYS_CORE+91             
34f2 07 35			dw .SBTOS            
34f4 03				db 2 + 1 
34f5 .. 00			db "1+",0              
34f8				endm 
# End of macro CWHEAD
34f8			; | 1+ ( u -- u )  Increment value on TOS | DONE 
34f8			 
34f8					FORTH_DSP_VALUEHL 
34f8 cd 4d 22			call macro_dsp_valuehl 
34fb				endm 
# End of macro FORTH_DSP_VALUEHL
34fb e5					push hl 
34fc			 
34fc					FORTH_DSP_POP 
34fc cd 05 23			call macro_forth_dsp_pop 
34ff				endm 
# End of macro FORTH_DSP_POP
34ff e1					pop hl 
3500			 
3500 23					inc hl 
3501 cd 48 20				call forth_push_numhl 
3504					 
3504					NEXTW 
3504 c3 38 24			jp macro_next 
3507				endm 
# End of macro NEXTW
3507			.SBTOS: 
3507				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
3507 6f				db WORD_SYS_CORE+91             
3508 1d 35			dw .ADSTORE            
350a 03				db 2 + 1 
350b .. 00			db "1-",0              
350e				endm 
# End of macro CWHEAD
350e			; | 1- ( u -- u )  Decrement value on TOS | DONE 
350e			 
350e					FORTH_DSP_VALUEHL 
350e cd 4d 22			call macro_dsp_valuehl 
3511				endm 
# End of macro FORTH_DSP_VALUEHL
3511 e5					push hl 
3512			 
3512					FORTH_DSP_POP 
3512 cd 05 23			call macro_forth_dsp_pop 
3515				endm 
# End of macro FORTH_DSP_POP
3515 e1					pop hl 
3516			 
3516 2b					dec hl 
3517 cd 48 20				call forth_push_numhl 
351a					 
351a					NEXTW 
351a c3 38 24			jp macro_next 
351d				endm 
# End of macro NEXTW
351d			.ADSTORE: 
351d				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
351d 6f				db WORD_SYS_CORE+91             
351e 33 35			dw .ADWSTORE            
3520 04				db 3 + 1 
3521 .. 00			db "1+!",0              
3525				endm 
# End of macro CWHEAD
3525			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
3525			 
3525					FORTH_DSP_VALUEHL 
3525 cd 4d 22			call macro_dsp_valuehl 
3528				endm 
# End of macro FORTH_DSP_VALUEHL
3528 e5					push hl 
3529			 
3529					FORTH_DSP_POP 
3529 cd 05 23			call macro_forth_dsp_pop 
352c				endm 
# End of macro FORTH_DSP_POP
352c e1					pop hl 
352d			 
352d 7e					ld a, (hl) 
352e 3c					inc a 
352f 77					ld (hl), a 
3530					 
3530					NEXTW 
3530 c3 38 24			jp macro_next 
3533				endm 
# End of macro NEXTW
3533			.ADWSTORE: 
3533				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
3533 6f				db WORD_SYS_CORE+91             
3534 51 35			dw .SBSTORE            
3536 05				db 4 + 1 
3537 .. 00			db "1+2!",0              
353c				endm 
# End of macro CWHEAD
353c			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
353c			 
353c					FORTH_DSP_VALUEHL 
353c cd 4d 22			call macro_dsp_valuehl 
353f				endm 
# End of macro FORTH_DSP_VALUEHL
353f e5					push hl 
3540			 
3540					FORTH_DSP_POP 
3540 cd 05 23			call macro_forth_dsp_pop 
3543				endm 
# End of macro FORTH_DSP_POP
3543 e1					pop hl 
3544			 
3544 e5					push hl 
3545			 
3545 cd ba 23				call loadwordinhl 
3548 23					inc hl 
3549			 
3549 d1					pop de 
354a eb					ex de, hl 
354b 73					ld (hl), e 
354c 23					inc hl 
354d 72					ld (hl), d 
354e					 
354e					NEXTW 
354e c3 38 24			jp macro_next 
3551				endm 
# End of macro NEXTW
3551			.SBSTORE: 
3551				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
3551 6f				db WORD_SYS_CORE+91             
3552 67 35			dw .SBWSTORE            
3554 04				db 3 + 1 
3555 .. 00			db "1-!",0              
3559				endm 
# End of macro CWHEAD
3559			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
3559			 
3559					FORTH_DSP_VALUEHL 
3559 cd 4d 22			call macro_dsp_valuehl 
355c				endm 
# End of macro FORTH_DSP_VALUEHL
355c e5					push hl 
355d			 
355d					FORTH_DSP_POP 
355d cd 05 23			call macro_forth_dsp_pop 
3560				endm 
# End of macro FORTH_DSP_POP
3560 e1					pop hl 
3561			 
3561 7e					ld a, (hl) 
3562 3d					dec a 
3563 77					ld (hl), a 
3564					 
3564					NEXTW 
3564 c3 38 24			jp macro_next 
3567				endm 
# End of macro NEXTW
3567			.SBWSTORE: 
3567				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
3567 6f				db WORD_SYS_CORE+91             
3568 85 35			dw .ENDCORE            
356a 05				db 4 + 1 
356b .. 00			db "1-2!",0              
3570				endm 
# End of macro CWHEAD
3570			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
3570			 
3570					FORTH_DSP_VALUEHL 
3570 cd 4d 22			call macro_dsp_valuehl 
3573				endm 
# End of macro FORTH_DSP_VALUEHL
3573 e5					push hl 
3574			 
3574					FORTH_DSP_POP 
3574 cd 05 23			call macro_forth_dsp_pop 
3577				endm 
# End of macro FORTH_DSP_POP
3577 e1					pop hl 
3578			 
3578 e5					push hl 
3579			 
3579 cd ba 23				call loadwordinhl 
357c 2b					dec hl 
357d			 
357d d1					pop de 
357e eb					ex de, hl 
357f 73					ld (hl), e 
3580 23					inc hl 
3581 72					ld (hl), d 
3582					 
3582					NEXTW 
3582 c3 38 24			jp macro_next 
3585				endm 
# End of macro NEXTW
3585			.ENDCORE: 
3585			 
3585			; eof 
3585			 
3585			 
# End of file forth_words_core.asm
3585			include "forth_words_flow.asm" 
3585			 
3585			; | ## Program Flow Words 
3585			 
3585			.IF: 
3585				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
3585 1e				db WORD_SYS_CORE+10             
3586 7a 36			dw .THEN            
3588 03				db 2 + 1 
3589 .. 00			db "IF",0              
358c				endm 
# End of macro CWHEAD
358c			; | IF ( w -- f ) If TOS is true exec code following up to THEN  | DONE 
358c			; | | Note: currently not supporting ELSE or nested IF 
358c			; 
358c					if DEBUG_FORTH_WORDS_KEY 
358c						DMARK "IF." 
358c f5				push af  
358d 3a a1 35			ld a, (.dmark)  
3590 32 a0 fd			ld (debug_mark),a  
3593 3a a2 35			ld a, (.dmark+1)  
3596 32 a1 fd			ld (debug_mark+1),a  
3599 3a a3 35			ld a, (.dmark+2)  
359c 32 a2 fd			ld (debug_mark+2),a  
359f 18 03			jr .pastdmark  
35a1 ..			.dmark: db "IF."  
35a4 f1			.pastdmark: pop af  
35a5			endm  
# End of macro DMARK
35a5						CALLMONITOR 
35a5 cd aa fd			call debug_vector  
35a8				endm  
# End of macro CALLMONITOR
35a8					endif 
35a8			; eval TOS 
35a8			 
35a8				FORTH_DSP_VALUEHL 
35a8 cd 4d 22			call macro_dsp_valuehl 
35ab				endm 
# End of macro FORTH_DSP_VALUEHL
35ab			 
35ab			;	push hl 
35ab				FORTH_DSP_POP 
35ab cd 05 23			call macro_forth_dsp_pop 
35ae				endm 
# End of macro FORTH_DSP_POP
35ae			;	pop hl 
35ae			 
35ae					if DEBUG_FORTH_WORDS 
35ae						DMARK "IF1" 
35ae f5				push af  
35af 3a c3 35			ld a, (.dmark)  
35b2 32 a0 fd			ld (debug_mark),a  
35b5 3a c4 35			ld a, (.dmark+1)  
35b8 32 a1 fd			ld (debug_mark+1),a  
35bb 3a c5 35			ld a, (.dmark+2)  
35be 32 a2 fd			ld (debug_mark+2),a  
35c1 18 03			jr .pastdmark  
35c3 ..			.dmark: db "IF1"  
35c6 f1			.pastdmark: pop af  
35c7			endm  
# End of macro DMARK
35c7						CALLMONITOR 
35c7 cd aa fd			call debug_vector  
35ca				endm  
# End of macro CALLMONITOR
35ca					endif 
35ca b7				or a        ; clear carry flag 
35cb 11 00 00			ld de, 0 
35ce eb				ex de,hl 
35cf ed 52			sbc hl, de 
35d1 c2 5b 36			jp nz, .iftrue 
35d4			 
35d4					if DEBUG_FORTH_WORDS 
35d4						DMARK "IF2" 
35d4 f5				push af  
35d5 3a e9 35			ld a, (.dmark)  
35d8 32 a0 fd			ld (debug_mark),a  
35db 3a ea 35			ld a, (.dmark+1)  
35de 32 a1 fd			ld (debug_mark+1),a  
35e1 3a eb 35			ld a, (.dmark+2)  
35e4 32 a2 fd			ld (debug_mark+2),a  
35e7 18 03			jr .pastdmark  
35e9 ..			.dmark: db "IF2"  
35ec f1			.pastdmark: pop af  
35ed			endm  
# End of macro DMARK
35ed						CALLMONITOR 
35ed cd aa fd			call debug_vector  
35f0				endm  
# End of macro CALLMONITOR
35f0					endif 
35f0			 
35f0			; if not true then skip to THEN 
35f0			 
35f0				; TODO get tok_ptr 
35f0				; TODO consume toks until we get to THEN 
35f0			 
35f0 2a f7 f3			ld hl, (os_tok_ptr) 
35f3					if DEBUG_FORTH_WORDS 
35f3						DMARK "IF3" 
35f3 f5				push af  
35f4 3a 08 36			ld a, (.dmark)  
35f7 32 a0 fd			ld (debug_mark),a  
35fa 3a 09 36			ld a, (.dmark+1)  
35fd 32 a1 fd			ld (debug_mark+1),a  
3600 3a 0a 36			ld a, (.dmark+2)  
3603 32 a2 fd			ld (debug_mark+2),a  
3606 18 03			jr .pastdmark  
3608 ..			.dmark: db "IF3"  
360b f1			.pastdmark: pop af  
360c			endm  
# End of macro DMARK
360c						CALLMONITOR 
360c cd aa fd			call debug_vector  
360f				endm  
# End of macro CALLMONITOR
360f						 
360f					endif 
360f 11 56 36			ld de, .ifthen 
3612					if DEBUG_FORTH_WORDS 
3612						DMARK "IF4" 
3612 f5				push af  
3613 3a 27 36			ld a, (.dmark)  
3616 32 a0 fd			ld (debug_mark),a  
3619 3a 28 36			ld a, (.dmark+1)  
361c 32 a1 fd			ld (debug_mark+1),a  
361f 3a 29 36			ld a, (.dmark+2)  
3622 32 a2 fd			ld (debug_mark+2),a  
3625 18 03			jr .pastdmark  
3627 ..			.dmark: db "IF4"  
362a f1			.pastdmark: pop af  
362b			endm  
# End of macro DMARK
362b						CALLMONITOR 
362b cd aa fd			call debug_vector  
362e				endm  
# End of macro CALLMONITOR
362e					endif 
362e cd 3f 25			call findnexttok  
3631			 
3631					if DEBUG_FORTH_WORDS 
3631						DMARK "IF5" 
3631 f5				push af  
3632 3a 46 36			ld a, (.dmark)  
3635 32 a0 fd			ld (debug_mark),a  
3638 3a 47 36			ld a, (.dmark+1)  
363b 32 a1 fd			ld (debug_mark+1),a  
363e 3a 48 36			ld a, (.dmark+2)  
3641 32 a2 fd			ld (debug_mark+2),a  
3644 18 03			jr .pastdmark  
3646 ..			.dmark: db "IF5"  
3649 f1			.pastdmark: pop af  
364a			endm  
# End of macro DMARK
364a						CALLMONITOR 
364a cd aa fd			call debug_vector  
364d				endm  
# End of macro CALLMONITOR
364d					endif 
364d				; TODO replace below with ; exec using tok_ptr 
364d 22 f7 f3			ld (os_tok_ptr), hl 
3650 c3 c1 24			jp exec1 
3653				NEXTW 
3653 c3 38 24			jp macro_next 
3656				endm 
# End of macro NEXTW
3656			 
3656 .. 00		.ifthen:  db "THEN",0 
365b			 
365b			.iftrue:		 
365b				; Exec next words normally 
365b			 
365b				; if true then exec following IF as normal 
365b					if DEBUG_FORTH_WORDS 
365b						DMARK "IFT" 
365b f5				push af  
365c 3a 70 36			ld a, (.dmark)  
365f 32 a0 fd			ld (debug_mark),a  
3662 3a 71 36			ld a, (.dmark+1)  
3665 32 a1 fd			ld (debug_mark+1),a  
3668 3a 72 36			ld a, (.dmark+2)  
366b 32 a2 fd			ld (debug_mark+2),a  
366e 18 03			jr .pastdmark  
3670 ..			.dmark: db "IFT"  
3673 f1			.pastdmark: pop af  
3674			endm  
# End of macro DMARK
3674						CALLMONITOR 
3674 cd aa fd			call debug_vector  
3677				endm  
# End of macro CALLMONITOR
3677					endif 
3677			 
3677					NEXTW 
3677 c3 38 24			jp macro_next 
367a				endm 
# End of macro NEXTW
367a			.THEN: 
367a				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
367a 1f				db WORD_SYS_CORE+11             
367b a2 36			dw .ELSE            
367d 05				db 4 + 1 
367e .. 00			db "THEN",0              
3683				endm 
# End of macro CWHEAD
3683			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3683					if DEBUG_FORTH_WORDS_KEY 
3683						DMARK "THN" 
3683 f5				push af  
3684 3a 98 36			ld a, (.dmark)  
3687 32 a0 fd			ld (debug_mark),a  
368a 3a 99 36			ld a, (.dmark+1)  
368d 32 a1 fd			ld (debug_mark+1),a  
3690 3a 9a 36			ld a, (.dmark+2)  
3693 32 a2 fd			ld (debug_mark+2),a  
3696 18 03			jr .pastdmark  
3698 ..			.dmark: db "THN"  
369b f1			.pastdmark: pop af  
369c			endm  
# End of macro DMARK
369c						CALLMONITOR 
369c cd aa fd			call debug_vector  
369f				endm  
# End of macro CALLMONITOR
369f					endif 
369f					NEXTW 
369f c3 38 24			jp macro_next 
36a2				endm 
# End of macro NEXTW
36a2			.ELSE: 
36a2				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
36a2 20				db WORD_SYS_CORE+12             
36a3 ca 36			dw .DO            
36a5 03				db 2 + 1 
36a6 .. 00			db "ELSE",0              
36ab				endm 
# End of macro CWHEAD
36ab			; | ELSE ( -- ) Not supported - does nothing | TODO 
36ab			 
36ab					if DEBUG_FORTH_WORDS_KEY 
36ab						DMARK "ELS" 
36ab f5				push af  
36ac 3a c0 36			ld a, (.dmark)  
36af 32 a0 fd			ld (debug_mark),a  
36b2 3a c1 36			ld a, (.dmark+1)  
36b5 32 a1 fd			ld (debug_mark+1),a  
36b8 3a c2 36			ld a, (.dmark+2)  
36bb 32 a2 fd			ld (debug_mark+2),a  
36be 18 03			jr .pastdmark  
36c0 ..			.dmark: db "ELS"  
36c3 f1			.pastdmark: pop af  
36c4			endm  
# End of macro DMARK
36c4						CALLMONITOR 
36c4 cd aa fd			call debug_vector  
36c7				endm  
# End of macro CALLMONITOR
36c7					endif 
36c7			 
36c7			 
36c7					NEXTW 
36c7 c3 38 24			jp macro_next 
36ca				endm 
# End of macro NEXTW
36ca			.DO: 
36ca				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
36ca 21				db WORD_SYS_CORE+13             
36cb f1 37			dw .LOOP            
36cd 03				db 2 + 1 
36ce .. 00			db "DO",0              
36d1				endm 
# End of macro CWHEAD
36d1			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
36d1			 
36d1					if DEBUG_FORTH_WORDS_KEY 
36d1						DMARK "DO." 
36d1 f5				push af  
36d2 3a e6 36			ld a, (.dmark)  
36d5 32 a0 fd			ld (debug_mark),a  
36d8 3a e7 36			ld a, (.dmark+1)  
36db 32 a1 fd			ld (debug_mark+1),a  
36de 3a e8 36			ld a, (.dmark+2)  
36e1 32 a2 fd			ld (debug_mark+2),a  
36e4 18 03			jr .pastdmark  
36e6 ..			.dmark: db "DO."  
36e9 f1			.pastdmark: pop af  
36ea			endm  
# End of macro DMARK
36ea						CALLMONITOR 
36ea cd aa fd			call debug_vector  
36ed				endm  
# End of macro CALLMONITOR
36ed					endif 
36ed			;  push pc to rsp stack past the DO 
36ed			 
36ed 2a f7 f3				ld hl, (os_tok_ptr) 
36f0 23					inc hl   ; D 
36f1 23					inc hl  ; O 
36f2 23					inc hl   ; null 
36f3					if DEBUG_FORTH_WORDS 
36f3						DMARK "DO2" 
36f3 f5				push af  
36f4 3a 08 37			ld a, (.dmark)  
36f7 32 a0 fd			ld (debug_mark),a  
36fa 3a 09 37			ld a, (.dmark+1)  
36fd 32 a1 fd			ld (debug_mark+1),a  
3700 3a 0a 37			ld a, (.dmark+2)  
3703 32 a2 fd			ld (debug_mark+2),a  
3706 18 03			jr .pastdmark  
3708 ..			.dmark: db "DO2"  
370b f1			.pastdmark: pop af  
370c			endm  
# End of macro DMARK
370c						CALLMONITOR 
370c cd aa fd			call debug_vector  
370f				endm  
# End of macro CALLMONITOR
370f					endif 
370f					FORTH_RSP_NEXT 
370f cd ef 1f			call macro_forth_rsp_next 
3712				endm 
# End of macro FORTH_RSP_NEXT
3712					if DEBUG_FORTH_WORDS 
3712						DMARK "DO3" 
3712 f5				push af  
3713 3a 27 37			ld a, (.dmark)  
3716 32 a0 fd			ld (debug_mark),a  
3719 3a 28 37			ld a, (.dmark+1)  
371c 32 a1 fd			ld (debug_mark+1),a  
371f 3a 29 37			ld a, (.dmark+2)  
3722 32 a2 fd			ld (debug_mark+2),a  
3725 18 03			jr .pastdmark  
3727 ..			.dmark: db "DO3"  
372a f1			.pastdmark: pop af  
372b			endm  
# End of macro DMARK
372b						CALLMONITOR 
372b cd aa fd			call debug_vector  
372e				endm  
# End of macro CALLMONITOR
372e					endif 
372e			 
372e					;if DEBUG_FORTH_WORDS 
372e				;		push hl 
372e			;		endif  
372e			 
372e			; get counters from data stack 
372e			 
372e			 
372e					FORTH_DSP_VALUEHL 
372e cd 4d 22			call macro_dsp_valuehl 
3731				endm 
# End of macro FORTH_DSP_VALUEHL
3731 e5					push hl		 ; hl now has starting counter which needs to be tos 
3732			 
3732					if DEBUG_FORTH_WORDS 
3732						DMARK "DO4" 
3732 f5				push af  
3733 3a 47 37			ld a, (.dmark)  
3736 32 a0 fd			ld (debug_mark),a  
3739 3a 48 37			ld a, (.dmark+1)  
373c 32 a1 fd			ld (debug_mark+1),a  
373f 3a 49 37			ld a, (.dmark+2)  
3742 32 a2 fd			ld (debug_mark+2),a  
3745 18 03			jr .pastdmark  
3747 ..			.dmark: db "DO4"  
374a f1			.pastdmark: pop af  
374b			endm  
# End of macro DMARK
374b						CALLMONITOR 
374b cd aa fd			call debug_vector  
374e				endm  
# End of macro CALLMONITOR
374e					endif 
374e					FORTH_DSP_POP 
374e cd 05 23			call macro_forth_dsp_pop 
3751				endm 
# End of macro FORTH_DSP_POP
3751			 
3751					if DEBUG_FORTH_WORDS 
3751						DMARK "DO5" 
3751 f5				push af  
3752 3a 66 37			ld a, (.dmark)  
3755 32 a0 fd			ld (debug_mark),a  
3758 3a 67 37			ld a, (.dmark+1)  
375b 32 a1 fd			ld (debug_mark+1),a  
375e 3a 68 37			ld a, (.dmark+2)  
3761 32 a2 fd			ld (debug_mark+2),a  
3764 18 03			jr .pastdmark  
3766 ..			.dmark: db "DO5"  
3769 f1			.pastdmark: pop af  
376a			endm  
# End of macro DMARK
376a						CALLMONITOR 
376a cd aa fd			call debug_vector  
376d				endm  
# End of macro CALLMONITOR
376d					endif 
376d			 
376d					FORTH_DSP_VALUEHL 
376d cd 4d 22			call macro_dsp_valuehl 
3770				endm 
# End of macro FORTH_DSP_VALUEHL
3770			;		push hl		 ; hl now has starting limit counter 
3770			 
3770					if DEBUG_FORTH_WORDS 
3770						DMARK "DO6" 
3770 f5				push af  
3771 3a 85 37			ld a, (.dmark)  
3774 32 a0 fd			ld (debug_mark),a  
3777 3a 86 37			ld a, (.dmark+1)  
377a 32 a1 fd			ld (debug_mark+1),a  
377d 3a 87 37			ld a, (.dmark+2)  
3780 32 a2 fd			ld (debug_mark+2),a  
3783 18 03			jr .pastdmark  
3785 ..			.dmark: db "DO6"  
3788 f1			.pastdmark: pop af  
3789			endm  
# End of macro DMARK
3789						CALLMONITOR 
3789 cd aa fd			call debug_vector  
378c				endm  
# End of macro CALLMONITOR
378c					endif 
378c					FORTH_DSP_POP 
378c cd 05 23			call macro_forth_dsp_pop 
378f				endm 
# End of macro FORTH_DSP_POP
378f			 
378f			; put counters on the loop stack 
378f			 
378f			;		pop hl			 ; limit counter 
378f d1					pop de			; start counter 
3790			 
3790					; push limit counter 
3790			 
3790					if DEBUG_FORTH_WORDS 
3790						DMARK "DO7" 
3790 f5				push af  
3791 3a a5 37			ld a, (.dmark)  
3794 32 a0 fd			ld (debug_mark),a  
3797 3a a6 37			ld a, (.dmark+1)  
379a 32 a1 fd			ld (debug_mark+1),a  
379d 3a a7 37			ld a, (.dmark+2)  
37a0 32 a2 fd			ld (debug_mark+2),a  
37a3 18 03			jr .pastdmark  
37a5 ..			.dmark: db "DO7"  
37a8 f1			.pastdmark: pop af  
37a9			endm  
# End of macro DMARK
37a9						CALLMONITOR 
37a9 cd aa fd			call debug_vector  
37ac				endm  
# End of macro CALLMONITOR
37ac					endif 
37ac					FORTH_LOOP_NEXT 
37ac cd 7e 22			call macro_forth_loop_next 
37af				endm 
# End of macro FORTH_LOOP_NEXT
37af			 
37af					; push start counter 
37af			 
37af eb					ex de, hl 
37b0					if DEBUG_FORTH_WORDS 
37b0						DMARK "DO7" 
37b0 f5				push af  
37b1 3a c5 37			ld a, (.dmark)  
37b4 32 a0 fd			ld (debug_mark),a  
37b7 3a c6 37			ld a, (.dmark+1)  
37ba 32 a1 fd			ld (debug_mark+1),a  
37bd 3a c7 37			ld a, (.dmark+2)  
37c0 32 a2 fd			ld (debug_mark+2),a  
37c3 18 03			jr .pastdmark  
37c5 ..			.dmark: db "DO7"  
37c8 f1			.pastdmark: pop af  
37c9			endm  
# End of macro DMARK
37c9						CALLMONITOR 
37c9 cd aa fd			call debug_vector  
37cc				endm  
# End of macro CALLMONITOR
37cc					endif 
37cc					FORTH_LOOP_NEXT 
37cc cd 7e 22			call macro_forth_loop_next 
37cf				endm 
# End of macro FORTH_LOOP_NEXT
37cf			 
37cf			 
37cf					; init first round of I counter 
37cf			 
37cf 22 1b f4				ld (os_current_i), hl 
37d2			 
37d2					if DEBUG_FORTH_WORDS 
37d2						DMARK "DO8" 
37d2 f5				push af  
37d3 3a e7 37			ld a, (.dmark)  
37d6 32 a0 fd			ld (debug_mark),a  
37d9 3a e8 37			ld a, (.dmark+1)  
37dc 32 a1 fd			ld (debug_mark+1),a  
37df 3a e9 37			ld a, (.dmark+2)  
37e2 32 a2 fd			ld (debug_mark+2),a  
37e5 18 03			jr .pastdmark  
37e7 ..			.dmark: db "DO8"  
37ea f1			.pastdmark: pop af  
37eb			endm  
# End of macro DMARK
37eb						CALLMONITOR 
37eb cd aa fd			call debug_vector  
37ee				endm  
# End of macro CALLMONITOR
37ee					endif 
37ee			 
37ee					NEXTW 
37ee c3 38 24			jp macro_next 
37f1				endm 
# End of macro NEXTW
37f1			.LOOP: 
37f1				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
37f1 22				db WORD_SYS_CORE+14             
37f2 09 39			dw .I            
37f4 05				db 4 + 1 
37f5 .. 00			db "LOOP",0              
37fa				endm 
# End of macro CWHEAD
37fa			; | LOOP ( -- ) Increment and test loop counter  | DONE 
37fa			 
37fa				; pop tos as current loop count to hl 
37fa			 
37fa				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
37fa			 
37fa				FORTH_LOOP_TOS 
37fa cd b1 22			call macro_forth_loop_tos 
37fd				endm 
# End of macro FORTH_LOOP_TOS
37fd e5				push hl 
37fe			 
37fe					if DEBUG_FORTH_WORDS_KEY 
37fe						DMARK "LOP" 
37fe f5				push af  
37ff 3a 13 38			ld a, (.dmark)  
3802 32 a0 fd			ld (debug_mark),a  
3805 3a 14 38			ld a, (.dmark+1)  
3808 32 a1 fd			ld (debug_mark+1),a  
380b 3a 15 38			ld a, (.dmark+2)  
380e 32 a2 fd			ld (debug_mark+2),a  
3811 18 03			jr .pastdmark  
3813 ..			.dmark: db "LOP"  
3816 f1			.pastdmark: pop af  
3817			endm  
# End of macro DMARK
3817						CALLMONITOR 
3817 cd aa fd			call debug_vector  
381a				endm  
# End of macro CALLMONITOR
381a					endif 
381a				; next item on the stack is the limit. get it 
381a			 
381a			 
381a				FORTH_LOOP_POP 
381a cd bb 22			call macro_forth_loop_pop 
381d				endm 
# End of macro FORTH_LOOP_POP
381d			 
381d				FORTH_LOOP_TOS 
381d cd b1 22			call macro_forth_loop_tos 
3820				endm 
# End of macro FORTH_LOOP_TOS
3820			 
3820 d1				pop de		 ; de = i, hl = limit 
3821			 
3821					if DEBUG_FORTH_WORDS 
3821						DMARK "LP1" 
3821 f5				push af  
3822 3a 36 38			ld a, (.dmark)  
3825 32 a0 fd			ld (debug_mark),a  
3828 3a 37 38			ld a, (.dmark+1)  
382b 32 a1 fd			ld (debug_mark+1),a  
382e 3a 38 38			ld a, (.dmark+2)  
3831 32 a2 fd			ld (debug_mark+2),a  
3834 18 03			jr .pastdmark  
3836 ..			.dmark: db "LP1"  
3839 f1			.pastdmark: pop af  
383a			endm  
# End of macro DMARK
383a						CALLMONITOR 
383a cd aa fd			call debug_vector  
383d				endm  
# End of macro CALLMONITOR
383d					endif 
383d			 
383d				; go back to previous word 
383d			 
383d d5				push de    ; save I for inc later 
383e			 
383e			 
383e				; get limit 
383e				;  is I at limit? 
383e			 
383e			 
383e					if DEBUG_FORTH_WORDS 
383e						DMARK "LP1" 
383e f5				push af  
383f 3a 53 38			ld a, (.dmark)  
3842 32 a0 fd			ld (debug_mark),a  
3845 3a 54 38			ld a, (.dmark+1)  
3848 32 a1 fd			ld (debug_mark+1),a  
384b 3a 55 38			ld a, (.dmark+2)  
384e 32 a2 fd			ld (debug_mark+2),a  
3851 18 03			jr .pastdmark  
3853 ..			.dmark: db "LP1"  
3856 f1			.pastdmark: pop af  
3857			endm  
# End of macro DMARK
3857						CALLMONITOR 
3857 cd aa fd			call debug_vector  
385a				endm  
# End of macro CALLMONITOR
385a					endif 
385a			 
385a ed 52			sbc hl, de 
385c			 
385c			 
385c				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
385c			 
385c 20 26				jr nz, .loopnotdone 
385e			 
385e e1				pop hl   ; get rid of saved I 
385f				FORTH_LOOP_POP     ; get rid of limit 
385f cd bb 22			call macro_forth_loop_pop 
3862				endm 
# End of macro FORTH_LOOP_POP
3862			 
3862				FORTH_RSP_POP     ; get rid of DO ptr 
3862 cd 10 20			call macro_forth_rsp_pop 
3865				endm 
# End of macro FORTH_RSP_POP
3865			 
3865			if DEBUG_FORTH_WORDS 
3865						DMARK "LP>" 
3865 f5				push af  
3866 3a 7a 38			ld a, (.dmark)  
3869 32 a0 fd			ld (debug_mark),a  
386c 3a 7b 38			ld a, (.dmark+1)  
386f 32 a1 fd			ld (debug_mark+1),a  
3872 3a 7c 38			ld a, (.dmark+2)  
3875 32 a2 fd			ld (debug_mark+2),a  
3878 18 03			jr .pastdmark  
387a ..			.dmark: db "LP>"  
387d f1			.pastdmark: pop af  
387e			endm  
# End of macro DMARK
387e				CALLMONITOR 
387e cd aa fd			call debug_vector  
3881				endm  
# End of macro CALLMONITOR
3881			endif 
3881			 
3881					NEXTW 
3881 c3 38 24			jp macro_next 
3884				endm 
# End of macro NEXTW
3884				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3884			 
3884			.loopnotdone: 
3884			 
3884 e1				pop hl    ; get I 
3885 23				inc hl 
3886			 
3886			   	; save new I 
3886			 
3886			 
3886					; set I counter 
3886			 
3886 22 1b f4				ld (os_current_i), hl 
3889			 
3889					if DEBUG_FORTH_WORDS 
3889						DMARK "LPN" 
3889 f5				push af  
388a 3a 9e 38			ld a, (.dmark)  
388d 32 a0 fd			ld (debug_mark),a  
3890 3a 9f 38			ld a, (.dmark+1)  
3893 32 a1 fd			ld (debug_mark+1),a  
3896 3a a0 38			ld a, (.dmark+2)  
3899 32 a2 fd			ld (debug_mark+2),a  
389c 18 03			jr .pastdmark  
389e ..			.dmark: db "LPN"  
38a1 f1			.pastdmark: pop af  
38a2			endm  
# End of macro DMARK
38a2					CALLMONITOR 
38a2 cd aa fd			call debug_vector  
38a5				endm  
# End of macro CALLMONITOR
38a5					endif 
38a5					 
38a5				FORTH_LOOP_NEXT 
38a5 cd 7e 22			call macro_forth_loop_next 
38a8				endm 
# End of macro FORTH_LOOP_NEXT
38a8			 
38a8			 
38a8					if DEBUG_FORTH_WORDS 
38a8 eb						ex de,hl 
38a9					endif 
38a9			 
38a9			;	; get DO ptr 
38a9			; 
38a9					if DEBUG_FORTH_WORDS 
38a9						DMARK "LP7" 
38a9 f5				push af  
38aa 3a be 38			ld a, (.dmark)  
38ad 32 a0 fd			ld (debug_mark),a  
38b0 3a bf 38			ld a, (.dmark+1)  
38b3 32 a1 fd			ld (debug_mark+1),a  
38b6 3a c0 38			ld a, (.dmark+2)  
38b9 32 a2 fd			ld (debug_mark+2),a  
38bc 18 03			jr .pastdmark  
38be ..			.dmark: db "LP7"  
38c1 f1			.pastdmark: pop af  
38c2			endm  
# End of macro DMARK
38c2					CALLMONITOR 
38c2 cd aa fd			call debug_vector  
38c5				endm  
# End of macro CALLMONITOR
38c5					endif 
38c5				FORTH_RSP_TOS 
38c5 cd 06 20			call macro_forth_rsp_tos 
38c8				endm 
# End of macro FORTH_RSP_TOS
38c8			 
38c8					if DEBUG_FORTH_WORDS 
38c8						DMARK "LP8" 
38c8 f5				push af  
38c9 3a dd 38			ld a, (.dmark)  
38cc 32 a0 fd			ld (debug_mark),a  
38cf 3a de 38			ld a, (.dmark+1)  
38d2 32 a1 fd			ld (debug_mark+1),a  
38d5 3a df 38			ld a, (.dmark+2)  
38d8 32 a2 fd			ld (debug_mark+2),a  
38db 18 03			jr .pastdmark  
38dd ..			.dmark: db "LP8"  
38e0 f1			.pastdmark: pop af  
38e1			endm  
# End of macro DMARK
38e1					CALLMONITOR 
38e1 cd aa fd			call debug_vector  
38e4				endm  
# End of macro CALLMONITOR
38e4					endif 
38e4				;push hl 
38e4			 
38e4				; not going to DO any more 
38e4				; get rid of the RSP pointer as DO will add it back in 
38e4				;FORTH_RSP_POP 
38e4				;pop hl 
38e4			 
38e4				;ld hl,(cli_ret_sp) 
38e4				;ld e, (hl) 
38e4				;inc hl 
38e4				;ld d, (hl) 
38e4				;ex de,hl 
38e4 22 f7 f3			ld (os_tok_ptr), hl 
38e7					if DEBUG_FORTH_WORDS 
38e7						DMARK "LP<" 
38e7 f5				push af  
38e8 3a fc 38			ld a, (.dmark)  
38eb 32 a0 fd			ld (debug_mark),a  
38ee 3a fd 38			ld a, (.dmark+1)  
38f1 32 a1 fd			ld (debug_mark+1),a  
38f4 3a fe 38			ld a, (.dmark+2)  
38f7 32 a2 fd			ld (debug_mark+2),a  
38fa 18 03			jr .pastdmark  
38fc ..			.dmark: db "LP<"  
38ff f1			.pastdmark: pop af  
3900			endm  
# End of macro DMARK
3900					CALLMONITOR 
3900 cd aa fd			call debug_vector  
3903				endm  
# End of macro CALLMONITOR
3903				endif 
3903 c3 c1 24			jp exec1 
3906			 
3906					 
3906			 
3906			 
3906					NEXTW 
3906 c3 38 24			jp macro_next 
3909				endm 
# End of macro NEXTW
3909			.I:  
3909			 
3909				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
3909 5e				db WORD_SYS_CORE+74             
390a 34 39			dw .DLOOP            
390c 02				db 1 + 1 
390d .. 00			db "I",0              
390f				endm 
# End of macro CWHEAD
390f			; | I ( -- ) Current loop counter | DONE 
390f					if DEBUG_FORTH_WORDS_KEY 
390f						DMARK "I.." 
390f f5				push af  
3910 3a 24 39			ld a, (.dmark)  
3913 32 a0 fd			ld (debug_mark),a  
3916 3a 25 39			ld a, (.dmark+1)  
3919 32 a1 fd			ld (debug_mark+1),a  
391c 3a 26 39			ld a, (.dmark+2)  
391f 32 a2 fd			ld (debug_mark+2),a  
3922 18 03			jr .pastdmark  
3924 ..			.dmark: db "I.."  
3927 f1			.pastdmark: pop af  
3928			endm  
# End of macro DMARK
3928						CALLMONITOR 
3928 cd aa fd			call debug_vector  
392b				endm  
# End of macro CALLMONITOR
392b					endif 
392b			 
392b 2a 1b f4				ld hl,(os_current_i) 
392e cd 48 20				call forth_push_numhl 
3931			 
3931					NEXTW 
3931 c3 38 24			jp macro_next 
3934				endm 
# End of macro NEXTW
3934			.DLOOP: 
3934				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
3934 5f				db WORD_SYS_CORE+75             
3935 15 3a			dw .REPEAT            
3937 06				db 5 + 1 
3938 .. 00			db "-LOOP",0              
393e				endm 
# End of macro CWHEAD
393e			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
393e				; pop tos as current loop count to hl 
393e					if DEBUG_FORTH_WORDS_KEY 
393e						DMARK "-LP" 
393e f5				push af  
393f 3a 53 39			ld a, (.dmark)  
3942 32 a0 fd			ld (debug_mark),a  
3945 3a 54 39			ld a, (.dmark+1)  
3948 32 a1 fd			ld (debug_mark+1),a  
394b 3a 55 39			ld a, (.dmark+2)  
394e 32 a2 fd			ld (debug_mark+2),a  
3951 18 03			jr .pastdmark  
3953 ..			.dmark: db "-LP"  
3956 f1			.pastdmark: pop af  
3957			endm  
# End of macro DMARK
3957						CALLMONITOR 
3957 cd aa fd			call debug_vector  
395a				endm  
# End of macro CALLMONITOR
395a					endif 
395a			 
395a				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
395a			 
395a				FORTH_LOOP_TOS 
395a cd b1 22			call macro_forth_loop_tos 
395d				endm 
# End of macro FORTH_LOOP_TOS
395d e5				push hl 
395e			 
395e					if DEBUG_FORTH_WORDS 
395e						DMARK "-LP" 
395e f5				push af  
395f 3a 73 39			ld a, (.dmark)  
3962 32 a0 fd			ld (debug_mark),a  
3965 3a 74 39			ld a, (.dmark+1)  
3968 32 a1 fd			ld (debug_mark+1),a  
396b 3a 75 39			ld a, (.dmark+2)  
396e 32 a2 fd			ld (debug_mark+2),a  
3971 18 03			jr .pastdmark  
3973 ..			.dmark: db "-LP"  
3976 f1			.pastdmark: pop af  
3977			endm  
# End of macro DMARK
3977						CALLMONITOR 
3977 cd aa fd			call debug_vector  
397a				endm  
# End of macro CALLMONITOR
397a					endif 
397a				; next item on the stack is the limit. get it 
397a			 
397a			 
397a				FORTH_LOOP_POP 
397a cd bb 22			call macro_forth_loop_pop 
397d				endm 
# End of macro FORTH_LOOP_POP
397d			 
397d				FORTH_LOOP_TOS 
397d cd b1 22			call macro_forth_loop_tos 
3980				endm 
# End of macro FORTH_LOOP_TOS
3980			 
3980 d1				pop de		 ; de = i, hl = limit 
3981			 
3981					if DEBUG_FORTH_WORDS 
3981						DMARK "-L1" 
3981 f5				push af  
3982 3a 96 39			ld a, (.dmark)  
3985 32 a0 fd			ld (debug_mark),a  
3988 3a 97 39			ld a, (.dmark+1)  
398b 32 a1 fd			ld (debug_mark+1),a  
398e 3a 98 39			ld a, (.dmark+2)  
3991 32 a2 fd			ld (debug_mark+2),a  
3994 18 03			jr .pastdmark  
3996 ..			.dmark: db "-L1"  
3999 f1			.pastdmark: pop af  
399a			endm  
# End of macro DMARK
399a						CALLMONITOR 
399a cd aa fd			call debug_vector  
399d				endm  
# End of macro CALLMONITOR
399d					endif 
399d			 
399d				; go back to previous word 
399d			 
399d d5				push de    ; save I for inc later 
399e			 
399e			 
399e				; get limit 
399e				;  is I at limit? 
399e			 
399e			 
399e					if DEBUG_FORTH_WORDS 
399e						DMARK "-L1" 
399e f5				push af  
399f 3a b3 39			ld a, (.dmark)  
39a2 32 a0 fd			ld (debug_mark),a  
39a5 3a b4 39			ld a, (.dmark+1)  
39a8 32 a1 fd			ld (debug_mark+1),a  
39ab 3a b5 39			ld a, (.dmark+2)  
39ae 32 a2 fd			ld (debug_mark+2),a  
39b1 18 03			jr .pastdmark  
39b3 ..			.dmark: db "-L1"  
39b6 f1			.pastdmark: pop af  
39b7			endm  
# End of macro DMARK
39b7						CALLMONITOR 
39b7 cd aa fd			call debug_vector  
39ba				endm  
# End of macro CALLMONITOR
39ba					endif 
39ba			 
39ba ed 52			sbc hl, de 
39bc			 
39bc			 
39bc				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
39bc			 
39bc 20 26				jr nz, .mloopnotdone 
39be			 
39be e1				pop hl   ; get rid of saved I 
39bf				FORTH_LOOP_POP     ; get rid of limit 
39bf cd bb 22			call macro_forth_loop_pop 
39c2				endm 
# End of macro FORTH_LOOP_POP
39c2			 
39c2				FORTH_RSP_POP     ; get rid of DO ptr 
39c2 cd 10 20			call macro_forth_rsp_pop 
39c5				endm 
# End of macro FORTH_RSP_POP
39c5			 
39c5			if DEBUG_FORTH_WORDS 
39c5						DMARK "-L>" 
39c5 f5				push af  
39c6 3a da 39			ld a, (.dmark)  
39c9 32 a0 fd			ld (debug_mark),a  
39cc 3a db 39			ld a, (.dmark+1)  
39cf 32 a1 fd			ld (debug_mark+1),a  
39d2 3a dc 39			ld a, (.dmark+2)  
39d5 32 a2 fd			ld (debug_mark+2),a  
39d8 18 03			jr .pastdmark  
39da ..			.dmark: db "-L>"  
39dd f1			.pastdmark: pop af  
39de			endm  
# End of macro DMARK
39de				CALLMONITOR 
39de cd aa fd			call debug_vector  
39e1				endm  
# End of macro CALLMONITOR
39e1			endif 
39e1			 
39e1					NEXTW 
39e1 c3 38 24			jp macro_next 
39e4				endm 
# End of macro NEXTW
39e4				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
39e4			 
39e4			.mloopnotdone: 
39e4			 
39e4 e1				pop hl    ; get I 
39e5 2b				dec hl 
39e6			 
39e6			   	; save new I 
39e6			 
39e6			 
39e6					; set I counter 
39e6			 
39e6 22 1b f4				ld (os_current_i), hl 
39e9			 
39e9					 
39e9				FORTH_LOOP_NEXT 
39e9 cd 7e 22			call macro_forth_loop_next 
39ec				endm 
# End of macro FORTH_LOOP_NEXT
39ec			 
39ec			 
39ec					if DEBUG_FORTH_WORDS 
39ec eb						ex de,hl 
39ed					endif 
39ed			 
39ed			;	; get DO ptr 
39ed			; 
39ed				FORTH_RSP_TOS 
39ed cd 06 20			call macro_forth_rsp_tos 
39f0				endm 
# End of macro FORTH_RSP_TOS
39f0			 
39f0				;push hl 
39f0			 
39f0				; not going to DO any more 
39f0				; get rid of the RSP pointer as DO will add it back in 
39f0				;FORTH_RSP_POP 
39f0				;pop hl 
39f0			 
39f0			 
39f0 22 f7 f3			ld (os_tok_ptr), hl 
39f3					if DEBUG_FORTH_WORDS 
39f3						DMARK "-L<" 
39f3 f5				push af  
39f4 3a 08 3a			ld a, (.dmark)  
39f7 32 a0 fd			ld (debug_mark),a  
39fa 3a 09 3a			ld a, (.dmark+1)  
39fd 32 a1 fd			ld (debug_mark+1),a  
3a00 3a 0a 3a			ld a, (.dmark+2)  
3a03 32 a2 fd			ld (debug_mark+2),a  
3a06 18 03			jr .pastdmark  
3a08 ..			.dmark: db "-L<"  
3a0b f1			.pastdmark: pop af  
3a0c			endm  
# End of macro DMARK
3a0c					CALLMONITOR 
3a0c cd aa fd			call debug_vector  
3a0f				endm  
# End of macro CALLMONITOR
3a0f				endif 
3a0f c3 c1 24			jp exec1 
3a12			 
3a12					 
3a12			 
3a12			 
3a12			 
3a12				NEXTW 
3a12 c3 38 24			jp macro_next 
3a15				endm 
# End of macro NEXTW
3a15			 
3a15			 
3a15			 
3a15			 
3a15			.REPEAT: 
3a15				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3a15 71				db WORD_SYS_CORE+93             
3a16 68 3a			dw .UNTIL            
3a18 06				db 5 + 1 
3a19 .. 00			db "REPEAT",0              
3a20				endm 
# End of macro CWHEAD
3a20			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3a20			;  push pc to rsp stack past the REPEAT 
3a20					if DEBUG_FORTH_WORDS_KEY 
3a20						DMARK "REP" 
3a20 f5				push af  
3a21 3a 35 3a			ld a, (.dmark)  
3a24 32 a0 fd			ld (debug_mark),a  
3a27 3a 36 3a			ld a, (.dmark+1)  
3a2a 32 a1 fd			ld (debug_mark+1),a  
3a2d 3a 37 3a			ld a, (.dmark+2)  
3a30 32 a2 fd			ld (debug_mark+2),a  
3a33 18 03			jr .pastdmark  
3a35 ..			.dmark: db "REP"  
3a38 f1			.pastdmark: pop af  
3a39			endm  
# End of macro DMARK
3a39						CALLMONITOR 
3a39 cd aa fd			call debug_vector  
3a3c				endm  
# End of macro CALLMONITOR
3a3c					endif 
3a3c			 
3a3c 2a f7 f3				ld hl, (os_tok_ptr) 
3a3f 23					inc hl   ; R 
3a40 23					inc hl  ; E 
3a41 23					inc hl   ; P 
3a42 23					inc hl   ; E 
3a43 23					inc hl   ; A 
3a44 23					inc hl   ; T 
3a45 23					inc hl   ; zero 
3a46					FORTH_RSP_NEXT 
3a46 cd ef 1f			call macro_forth_rsp_next 
3a49				endm 
# End of macro FORTH_RSP_NEXT
3a49			 
3a49			 
3a49					if DEBUG_FORTH_WORDS 
3a49						DMARK "REP" 
3a49 f5				push af  
3a4a 3a 5e 3a			ld a, (.dmark)  
3a4d 32 a0 fd			ld (debug_mark),a  
3a50 3a 5f 3a			ld a, (.dmark+1)  
3a53 32 a1 fd			ld (debug_mark+1),a  
3a56 3a 60 3a			ld a, (.dmark+2)  
3a59 32 a2 fd			ld (debug_mark+2),a  
3a5c 18 03			jr .pastdmark  
3a5e ..			.dmark: db "REP"  
3a61 f1			.pastdmark: pop af  
3a62			endm  
# End of macro DMARK
3a62						;pop bc    ; TODO BUG ?????? what is this for???? 
3a62						CALLMONITOR 
3a62 cd aa fd			call debug_vector  
3a65				endm  
# End of macro CALLMONITOR
3a65					endif 
3a65			 
3a65					NEXTW 
3a65 c3 38 24			jp macro_next 
3a68				endm 
# End of macro NEXTW
3a68			;	       NEXTW 
3a68			 
3a68			.UNTIL: 
3a68				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3a68 72				db WORD_SYS_CORE+94             
3a69 ff 3a			dw .ENDFLOW            
3a6b 06				db 5 + 1 
3a6c .. 00			db "UNTIL",0              
3a72				endm 
# End of macro CWHEAD
3a72			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3a72			 
3a72				; pop tos as check 
3a72			 
3a72				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3a72			 
3a72				FORTH_DSP_VALUEHL 
3a72 cd 4d 22			call macro_dsp_valuehl 
3a75				endm 
# End of macro FORTH_DSP_VALUEHL
3a75			 
3a75					if DEBUG_FORTH_WORDS_KEY 
3a75						DMARK "UNT" 
3a75 f5				push af  
3a76 3a 8a 3a			ld a, (.dmark)  
3a79 32 a0 fd			ld (debug_mark),a  
3a7c 3a 8b 3a			ld a, (.dmark+1)  
3a7f 32 a1 fd			ld (debug_mark+1),a  
3a82 3a 8c 3a			ld a, (.dmark+2)  
3a85 32 a2 fd			ld (debug_mark+2),a  
3a88 18 03			jr .pastdmark  
3a8a ..			.dmark: db "UNT"  
3a8d f1			.pastdmark: pop af  
3a8e			endm  
# End of macro DMARK
3a8e						CALLMONITOR 
3a8e cd aa fd			call debug_vector  
3a91				endm  
# End of macro CALLMONITOR
3a91					endif 
3a91			 
3a91			;	push hl 
3a91				FORTH_DSP_POP 
3a91 cd 05 23			call macro_forth_dsp_pop 
3a94				endm 
# End of macro FORTH_DSP_POP
3a94			 
3a94			;	pop hl 
3a94			 
3a94				; test if true 
3a94			 
3a94 cd 07 10			call ishlzero 
3a97			;	ld a,l 
3a97			;	add h 
3a97			; 
3a97			;	cp 0 
3a97			 
3a97 20 3e			jr nz, .untilnotdone 
3a99			 
3a99					if DEBUG_FORTH_WORDS 
3a99						DMARK "UNf" 
3a99 f5				push af  
3a9a 3a ae 3a			ld a, (.dmark)  
3a9d 32 a0 fd			ld (debug_mark),a  
3aa0 3a af 3a			ld a, (.dmark+1)  
3aa3 32 a1 fd			ld (debug_mark+1),a  
3aa6 3a b0 3a			ld a, (.dmark+2)  
3aa9 32 a2 fd			ld (debug_mark+2),a  
3aac 18 03			jr .pastdmark  
3aae ..			.dmark: db "UNf"  
3ab1 f1			.pastdmark: pop af  
3ab2			endm  
# End of macro DMARK
3ab2						CALLMONITOR 
3ab2 cd aa fd			call debug_vector  
3ab5				endm  
# End of macro CALLMONITOR
3ab5					endif 
3ab5			 
3ab5			 
3ab5			 
3ab5				FORTH_RSP_POP     ; get rid of DO ptr 
3ab5 cd 10 20			call macro_forth_rsp_pop 
3ab8				endm 
# End of macro FORTH_RSP_POP
3ab8			 
3ab8			if DEBUG_FORTH_WORDS 
3ab8						DMARK "UN>" 
3ab8 f5				push af  
3ab9 3a cd 3a			ld a, (.dmark)  
3abc 32 a0 fd			ld (debug_mark),a  
3abf 3a ce 3a			ld a, (.dmark+1)  
3ac2 32 a1 fd			ld (debug_mark+1),a  
3ac5 3a cf 3a			ld a, (.dmark+2)  
3ac8 32 a2 fd			ld (debug_mark+2),a  
3acb 18 03			jr .pastdmark  
3acd ..			.dmark: db "UN>"  
3ad0 f1			.pastdmark: pop af  
3ad1			endm  
# End of macro DMARK
3ad1				CALLMONITOR 
3ad1 cd aa fd			call debug_vector  
3ad4				endm  
# End of macro CALLMONITOR
3ad4			endif 
3ad4			 
3ad4					NEXTW 
3ad4 c3 38 24			jp macro_next 
3ad7				endm 
# End of macro NEXTW
3ad7				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3ad7			 
3ad7			.untilnotdone: 
3ad7			 
3ad7			 
3ad7			;	; get DO ptr 
3ad7			; 
3ad7				FORTH_RSP_TOS 
3ad7 cd 06 20			call macro_forth_rsp_tos 
3ada				endm 
# End of macro FORTH_RSP_TOS
3ada			 
3ada				;push hl 
3ada			 
3ada				; not going to DO any more 
3ada				; get rid of the RSP pointer as DO will add it back in 
3ada				;FORTH_RSP_POP 
3ada				;pop hl 
3ada			 
3ada			 
3ada 22 f7 f3			ld (os_tok_ptr), hl 
3add					if DEBUG_FORTH_WORDS 
3add						DMARK "UN<" 
3add f5				push af  
3ade 3a f2 3a			ld a, (.dmark)  
3ae1 32 a0 fd			ld (debug_mark),a  
3ae4 3a f3 3a			ld a, (.dmark+1)  
3ae7 32 a1 fd			ld (debug_mark+1),a  
3aea 3a f4 3a			ld a, (.dmark+2)  
3aed 32 a2 fd			ld (debug_mark+2),a  
3af0 18 03			jr .pastdmark  
3af2 ..			.dmark: db "UN<"  
3af5 f1			.pastdmark: pop af  
3af6			endm  
# End of macro DMARK
3af6					CALLMONITOR 
3af6 cd aa fd			call debug_vector  
3af9				endm  
# End of macro CALLMONITOR
3af9				endif 
3af9 c3 c1 24			jp exec1 
3afc			 
3afc					 
3afc			 
3afc			 
3afc					NEXTW 
3afc c3 38 24			jp macro_next 
3aff				endm 
# End of macro NEXTW
3aff			 
3aff			 
3aff			.ENDFLOW: 
3aff			 
3aff			; eof 
3aff			 
# End of file forth_words_flow.asm
3aff			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3aff			include "forth_words_logic.asm" 
3aff			 
3aff			; | ## Logic Words 
3aff			 
3aff			.NOT: 
3aff				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3aff 2d				db WORD_SYS_CORE+25             
3b00 47 3b			dw .IS            
3b02 04				db 3 + 1 
3b03 .. 00			db "NOT",0              
3b07				endm 
# End of macro CWHEAD
3b07			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
3b07					if DEBUG_FORTH_WORDS_KEY 
3b07						DMARK "NOT" 
3b07 f5				push af  
3b08 3a 1c 3b			ld a, (.dmark)  
3b0b 32 a0 fd			ld (debug_mark),a  
3b0e 3a 1d 3b			ld a, (.dmark+1)  
3b11 32 a1 fd			ld (debug_mark+1),a  
3b14 3a 1e 3b			ld a, (.dmark+2)  
3b17 32 a2 fd			ld (debug_mark+2),a  
3b1a 18 03			jr .pastdmark  
3b1c ..			.dmark: db "NOT"  
3b1f f1			.pastdmark: pop af  
3b20			endm  
# End of macro DMARK
3b20						CALLMONITOR 
3b20 cd aa fd			call debug_vector  
3b23				endm  
# End of macro CALLMONITOR
3b23					endif 
3b23					FORTH_DSP 
3b23 cd 13 22			call macro_forth_dsp 
3b26				endm 
# End of macro FORTH_DSP
3b26 7e					ld a,(hl)	; get type of value on TOS 
3b27 fe 02				cp DS_TYPE_INUM  
3b29 28 03				jr z, .noti 
3b2b					NEXTW 
3b2b c3 38 24			jp macro_next 
3b2e				endm 
# End of macro NEXTW
3b2e			.noti:          FORTH_DSP_VALUEHL 
3b2e cd 4d 22			call macro_dsp_valuehl 
3b31				endm 
# End of macro FORTH_DSP_VALUEHL
3b31			;		push hl 
3b31					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b31 cd 05 23			call macro_forth_dsp_pop 
3b34				endm 
# End of macro FORTH_DSP_POP
3b34			;		pop hl 
3b34 3e 00				ld a,0 
3b36 bd					cp l 
3b37 28 04				jr z, .not2t 
3b39 2e 00				ld l, 0 
3b3b 18 02				jr .notip 
3b3d			 
3b3d 2e ff		.not2t:		ld l, 255 
3b3f			 
3b3f 26 00		.notip:		ld h, 0	 
3b41			 
3b41 cd 48 20				call forth_push_numhl 
3b44					NEXTW 
3b44 c3 38 24			jp macro_next 
3b47				endm 
# End of macro NEXTW
3b47			 
3b47			.IS: 
3b47				CWHEAD .LZERO 25 "COMPARE" 7 WORD_FLAG_CODE 
3b47 2d				db WORD_SYS_CORE+25             
3b48 88 3b			dw .LZERO            
3b4a 08				db 7 + 1 
3b4b .. 00			db "COMPARE",0              
3b53				endm 
# End of macro CWHEAD
3b53			; | COMPARE ( s1 s2  -- f ) Push true if string s1 is the same as s2 | DONE 
3b53					if DEBUG_FORTH_WORDS_KEY 
3b53						DMARK "CMP" 
3b53 f5				push af  
3b54 3a 68 3b			ld a, (.dmark)  
3b57 32 a0 fd			ld (debug_mark),a  
3b5a 3a 69 3b			ld a, (.dmark+1)  
3b5d 32 a1 fd			ld (debug_mark+1),a  
3b60 3a 6a 3b			ld a, (.dmark+2)  
3b63 32 a2 fd			ld (debug_mark+2),a  
3b66 18 03			jr .pastdmark  
3b68 ..			.dmark: db "CMP"  
3b6b f1			.pastdmark: pop af  
3b6c			endm  
# End of macro DMARK
3b6c						CALLMONITOR 
3b6c cd aa fd			call debug_vector  
3b6f				endm  
# End of macro CALLMONITOR
3b6f					endif 
3b6f			 
3b6f					FORTH_DSP_VALUEHL 
3b6f cd 4d 22			call macro_dsp_valuehl 
3b72				endm 
# End of macro FORTH_DSP_VALUEHL
3b72			 
3b72 e5					push hl 
3b73			 
3b73					FORTH_DSP_VALUEM1 
3b73 cd 41 22			call macro_forth_dsp_value_m1 
3b76				endm 
# End of macro FORTH_DSP_VALUEM1
3b76			 
3b76 d1					pop de 
3b77			 
3b77					; got pointers to both. Now check. 
3b77			 
3b77 cd 7c 13				call strcmp 
3b7a				 
3b7a 26 00				ld h, 0 
3b7c 2e 00				ld l, 0 
3b7e 20 02				jr nz, .compnsame 
3b80 2e 01				ld l, 1	 
3b82			.compnsame: 
3b82 cd 48 20				call forth_push_numhl 
3b85			 
3b85					NEXTW 
3b85 c3 38 24			jp macro_next 
3b88				endm 
# End of macro NEXTW
3b88			.LZERO: 
3b88				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3b88 2d				db WORD_SYS_CORE+25             
3b89 92 3b			dw .TZERO            
3b8b 03				db 2 + 1 
3b8c .. 00			db "0<",0              
3b8f				endm 
# End of macro CWHEAD
3b8f			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3b8f					NEXTW 
3b8f c3 38 24			jp macro_next 
3b92				endm 
# End of macro NEXTW
3b92			.TZERO: 
3b92				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3b92 2e				db WORD_SYS_CORE+26             
3b93 d9 3b			dw .LESS            
3b95 03				db 2 + 1 
3b96 .. 00			db "0=",0              
3b99				endm 
# End of macro CWHEAD
3b99			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3b99				; TODO add floating point number detection 
3b99					;v5 FORTH_DSP_VALUE 
3b99					if DEBUG_FORTH_WORDS_KEY 
3b99						DMARK "0=." 
3b99 f5				push af  
3b9a 3a ae 3b			ld a, (.dmark)  
3b9d 32 a0 fd			ld (debug_mark),a  
3ba0 3a af 3b			ld a, (.dmark+1)  
3ba3 32 a1 fd			ld (debug_mark+1),a  
3ba6 3a b0 3b			ld a, (.dmark+2)  
3ba9 32 a2 fd			ld (debug_mark+2),a  
3bac 18 03			jr .pastdmark  
3bae ..			.dmark: db "0=."  
3bb1 f1			.pastdmark: pop af  
3bb2			endm  
# End of macro DMARK
3bb2						CALLMONITOR 
3bb2 cd aa fd			call debug_vector  
3bb5				endm  
# End of macro CALLMONITOR
3bb5					endif 
3bb5					FORTH_DSP 
3bb5 cd 13 22			call macro_forth_dsp 
3bb8				endm 
# End of macro FORTH_DSP
3bb8 7e					ld a,(hl)	; get type of value on TOS 
3bb9 fe 02				cp DS_TYPE_INUM  
3bbb 28 00				jr z, .tz_inum 
3bbd			 
3bbd				if FORTH_ENABLE_FLOATMATH 
3bbd					jr .tz_done 
3bbd			 
3bbd				endif 
3bbd					 
3bbd			 
3bbd			.tz_inum: 
3bbd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bbd cd 4d 22			call macro_dsp_valuehl 
3bc0				endm 
# End of macro FORTH_DSP_VALUEHL
3bc0			 
3bc0			;		push hl 
3bc0			 
3bc0					; destroy value TOS 
3bc0			 
3bc0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bc0 cd 05 23			call macro_forth_dsp_pop 
3bc3				endm 
# End of macro FORTH_DSP_POP
3bc3			 
3bc3			;		pop hl 
3bc3			 
3bc3 3e 00				ld a,0 
3bc5			 
3bc5 bd					cp l 
3bc6 20 08				jr nz, .tz_notzero 
3bc8			 
3bc8 bc					cp h 
3bc9			 
3bc9 20 05				jr nz, .tz_notzero 
3bcb			 
3bcb			 
3bcb 21 01 00				ld hl, FORTH_TRUE 
3bce 18 03				jr .tz_done 
3bd0			 
3bd0 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3bd3			 
3bd3					; push value back onto stack for another op etc 
3bd3			 
3bd3			.tz_done: 
3bd3 cd 48 20				call forth_push_numhl 
3bd6			 
3bd6					NEXTW 
3bd6 c3 38 24			jp macro_next 
3bd9				endm 
# End of macro NEXTW
3bd9			.LESS: 
3bd9				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3bd9 2f				db WORD_SYS_CORE+27             
3bda 42 3c			dw .GT            
3bdc 02				db 1 + 1 
3bdd .. 00			db "<",0              
3bdf				endm 
# End of macro CWHEAD
3bdf			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3bdf				; TODO add floating point number detection 
3bdf					if DEBUG_FORTH_WORDS_KEY 
3bdf						DMARK "LES" 
3bdf f5				push af  
3be0 3a f4 3b			ld a, (.dmark)  
3be3 32 a0 fd			ld (debug_mark),a  
3be6 3a f5 3b			ld a, (.dmark+1)  
3be9 32 a1 fd			ld (debug_mark+1),a  
3bec 3a f6 3b			ld a, (.dmark+2)  
3bef 32 a2 fd			ld (debug_mark+2),a  
3bf2 18 03			jr .pastdmark  
3bf4 ..			.dmark: db "LES"  
3bf7 f1			.pastdmark: pop af  
3bf8			endm  
# End of macro DMARK
3bf8						CALLMONITOR 
3bf8 cd aa fd			call debug_vector  
3bfb				endm  
# End of macro CALLMONITOR
3bfb					endif 
3bfb					FORTH_DSP 
3bfb cd 13 22			call macro_forth_dsp 
3bfe				endm 
# End of macro FORTH_DSP
3bfe					;v5 FORTH_DSP_VALUE 
3bfe 7e					ld a,(hl)	; get type of value on TOS 
3bff fe 02				cp DS_TYPE_INUM  
3c01 28 00				jr z, .less_inum 
3c03			 
3c03				if FORTH_ENABLE_FLOATMATH 
3c03					jr .less_done 
3c03			 
3c03				endif 
3c03					 
3c03			 
3c03			.less_inum: 
3c03					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c03 cd 4d 22			call macro_dsp_valuehl 
3c06				endm 
# End of macro FORTH_DSP_VALUEHL
3c06			 
3c06 e5					push hl  ; u2 
3c07			 
3c07					; destroy value TOS 
3c07			 
3c07					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c07 cd 05 23			call macro_forth_dsp_pop 
3c0a				endm 
# End of macro FORTH_DSP_POP
3c0a			 
3c0a			 
3c0a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c0a cd 4d 22			call macro_dsp_valuehl 
3c0d				endm 
# End of macro FORTH_DSP_VALUEHL
3c0d			 
3c0d e5					push hl    ; u1 
3c0e			 
3c0e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c0e cd 05 23			call macro_forth_dsp_pop 
3c11				endm 
# End of macro FORTH_DSP_POP
3c11			 
3c11			 
3c11 b7			 or a      ;clear carry flag 
3c12 01 00 00		 ld bc, FORTH_FALSE 
3c15 e1			  pop hl    ; u1 
3c16 d1			  pop de    ; u2 
3c17 ed 52		  sbc hl,de 
3c19 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3c1b			 
3c1b 01 01 00		 ld bc, FORTH_TRUE 
3c1e			.lscont:  
3c1e c5					push bc 
3c1f e1					pop hl 
3c20			 
3c20					if DEBUG_FORTH_WORDS 
3c20						DMARK "LT1" 
3c20 f5				push af  
3c21 3a 35 3c			ld a, (.dmark)  
3c24 32 a0 fd			ld (debug_mark),a  
3c27 3a 36 3c			ld a, (.dmark+1)  
3c2a 32 a1 fd			ld (debug_mark+1),a  
3c2d 3a 37 3c			ld a, (.dmark+2)  
3c30 32 a2 fd			ld (debug_mark+2),a  
3c33 18 03			jr .pastdmark  
3c35 ..			.dmark: db "LT1"  
3c38 f1			.pastdmark: pop af  
3c39			endm  
# End of macro DMARK
3c39						CALLMONITOR 
3c39 cd aa fd			call debug_vector  
3c3c				endm  
# End of macro CALLMONITOR
3c3c					endif 
3c3c cd 48 20				call forth_push_numhl 
3c3f			 
3c3f					NEXTW 
3c3f c3 38 24			jp macro_next 
3c42				endm 
# End of macro NEXTW
3c42			.GT: 
3c42				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3c42 30				db WORD_SYS_CORE+28             
3c43 ab 3c			dw .EQUAL            
3c45 02				db 1 + 1 
3c46 .. 00			db ">",0              
3c48				endm 
# End of macro CWHEAD
3c48			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3c48				; TODO add floating point number detection 
3c48					if DEBUG_FORTH_WORDS_KEY 
3c48						DMARK "GRT" 
3c48 f5				push af  
3c49 3a 5d 3c			ld a, (.dmark)  
3c4c 32 a0 fd			ld (debug_mark),a  
3c4f 3a 5e 3c			ld a, (.dmark+1)  
3c52 32 a1 fd			ld (debug_mark+1),a  
3c55 3a 5f 3c			ld a, (.dmark+2)  
3c58 32 a2 fd			ld (debug_mark+2),a  
3c5b 18 03			jr .pastdmark  
3c5d ..			.dmark: db "GRT"  
3c60 f1			.pastdmark: pop af  
3c61			endm  
# End of macro DMARK
3c61						CALLMONITOR 
3c61 cd aa fd			call debug_vector  
3c64				endm  
# End of macro CALLMONITOR
3c64					endif 
3c64					FORTH_DSP 
3c64 cd 13 22			call macro_forth_dsp 
3c67				endm 
# End of macro FORTH_DSP
3c67					;FORTH_DSP_VALUE 
3c67 7e					ld a,(hl)	; get type of value on TOS 
3c68 fe 02				cp DS_TYPE_INUM  
3c6a 28 00				jr z, .gt_inum 
3c6c			 
3c6c				if FORTH_ENABLE_FLOATMATH 
3c6c					jr .gt_done 
3c6c			 
3c6c				endif 
3c6c					 
3c6c			 
3c6c			.gt_inum: 
3c6c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c6c cd 4d 22			call macro_dsp_valuehl 
3c6f				endm 
# End of macro FORTH_DSP_VALUEHL
3c6f			 
3c6f e5					push hl  ; u2 
3c70			 
3c70					; destroy value TOS 
3c70			 
3c70					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c70 cd 05 23			call macro_forth_dsp_pop 
3c73				endm 
# End of macro FORTH_DSP_POP
3c73			 
3c73			 
3c73					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c73 cd 4d 22			call macro_dsp_valuehl 
3c76				endm 
# End of macro FORTH_DSP_VALUEHL
3c76			 
3c76 e5					push hl    ; u1 
3c77			 
3c77					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c77 cd 05 23			call macro_forth_dsp_pop 
3c7a				endm 
# End of macro FORTH_DSP_POP
3c7a			 
3c7a			 
3c7a b7			 or a      ;clear carry flag 
3c7b 01 00 00		 ld bc, FORTH_FALSE 
3c7e e1			  pop hl    ; u1 
3c7f d1			  pop de    ; u2 
3c80 ed 52		  sbc hl,de 
3c82 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3c84			 
3c84 01 01 00		 ld bc, FORTH_TRUE 
3c87			.gtcont:  
3c87 c5					push bc 
3c88 e1					pop hl 
3c89			 
3c89					if DEBUG_FORTH_WORDS 
3c89						DMARK "GT1" 
3c89 f5				push af  
3c8a 3a 9e 3c			ld a, (.dmark)  
3c8d 32 a0 fd			ld (debug_mark),a  
3c90 3a 9f 3c			ld a, (.dmark+1)  
3c93 32 a1 fd			ld (debug_mark+1),a  
3c96 3a a0 3c			ld a, (.dmark+2)  
3c99 32 a2 fd			ld (debug_mark+2),a  
3c9c 18 03			jr .pastdmark  
3c9e ..			.dmark: db "GT1"  
3ca1 f1			.pastdmark: pop af  
3ca2			endm  
# End of macro DMARK
3ca2						CALLMONITOR 
3ca2 cd aa fd			call debug_vector  
3ca5				endm  
# End of macro CALLMONITOR
3ca5					endif 
3ca5 cd 48 20				call forth_push_numhl 
3ca8			 
3ca8					NEXTW 
3ca8 c3 38 24			jp macro_next 
3cab				endm 
# End of macro NEXTW
3cab			.EQUAL: 
3cab				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3cab 31				db WORD_SYS_CORE+29             
3cac 16 3d			dw .ENDLOGIC            
3cae 02				db 1 + 1 
3caf .. 00			db "=",0              
3cb1				endm 
# End of macro CWHEAD
3cb1			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3cb1				; TODO add floating point number detection 
3cb1					if DEBUG_FORTH_WORDS_KEY 
3cb1						DMARK "EQ." 
3cb1 f5				push af  
3cb2 3a c6 3c			ld a, (.dmark)  
3cb5 32 a0 fd			ld (debug_mark),a  
3cb8 3a c7 3c			ld a, (.dmark+1)  
3cbb 32 a1 fd			ld (debug_mark+1),a  
3cbe 3a c8 3c			ld a, (.dmark+2)  
3cc1 32 a2 fd			ld (debug_mark+2),a  
3cc4 18 03			jr .pastdmark  
3cc6 ..			.dmark: db "EQ."  
3cc9 f1			.pastdmark: pop af  
3cca			endm  
# End of macro DMARK
3cca						CALLMONITOR 
3cca cd aa fd			call debug_vector  
3ccd				endm  
# End of macro CALLMONITOR
3ccd					endif 
3ccd					FORTH_DSP 
3ccd cd 13 22			call macro_forth_dsp 
3cd0				endm 
# End of macro FORTH_DSP
3cd0					;v5 FORTH_DSP_VALUE 
3cd0 7e					ld a,(hl)	; get type of value on TOS 
3cd1 fe 02				cp DS_TYPE_INUM  
3cd3 28 00				jr z, .eq_inum 
3cd5			 
3cd5				if FORTH_ENABLE_FLOATMATH 
3cd5					jr .eq_done 
3cd5			 
3cd5				endif 
3cd5					 
3cd5			 
3cd5			.eq_inum: 
3cd5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cd5 cd 4d 22			call macro_dsp_valuehl 
3cd8				endm 
# End of macro FORTH_DSP_VALUEHL
3cd8			 
3cd8 e5					push hl 
3cd9			 
3cd9					; destroy value TOS 
3cd9			 
3cd9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cd9 cd 05 23			call macro_forth_dsp_pop 
3cdc				endm 
# End of macro FORTH_DSP_POP
3cdc			 
3cdc			 
3cdc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cdc cd 4d 22			call macro_dsp_valuehl 
3cdf				endm 
# End of macro FORTH_DSP_VALUEHL
3cdf			 
3cdf					; one value on hl get other one back 
3cdf			 
3cdf e5					push hl 
3ce0			 
3ce0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ce0 cd 05 23			call macro_forth_dsp_pop 
3ce3				endm 
# End of macro FORTH_DSP_POP
3ce3			 
3ce3 0e 00				ld c, FORTH_FALSE 
3ce5			 
3ce5 e1					pop hl 
3ce6 d1					pop de 
3ce7			 
3ce7 7b					ld a, e 
3ce8 bd					cp l 
3ce9			 
3ce9 20 06				jr nz, .eq_done 
3ceb			 
3ceb 7a					ld a, d 
3cec bc					cp h 
3ced			 
3ced 20 02				jr nz, .eq_done 
3cef			 
3cef 0e 01				ld c, FORTH_TRUE 
3cf1					 
3cf1			 
3cf1			 
3cf1			.eq_done: 
3cf1			 
3cf1					; TODO push value back onto stack for another op etc 
3cf1			 
3cf1 26 00				ld h, 0 
3cf3 69					ld l, c 
3cf4					if DEBUG_FORTH_WORDS 
3cf4						DMARK "EQ1" 
3cf4 f5				push af  
3cf5 3a 09 3d			ld a, (.dmark)  
3cf8 32 a0 fd			ld (debug_mark),a  
3cfb 3a 0a 3d			ld a, (.dmark+1)  
3cfe 32 a1 fd			ld (debug_mark+1),a  
3d01 3a 0b 3d			ld a, (.dmark+2)  
3d04 32 a2 fd			ld (debug_mark+2),a  
3d07 18 03			jr .pastdmark  
3d09 ..			.dmark: db "EQ1"  
3d0c f1			.pastdmark: pop af  
3d0d			endm  
# End of macro DMARK
3d0d						CALLMONITOR 
3d0d cd aa fd			call debug_vector  
3d10				endm  
# End of macro CALLMONITOR
3d10					endif 
3d10 cd 48 20				call forth_push_numhl 
3d13			 
3d13					NEXTW 
3d13 c3 38 24			jp macro_next 
3d16				endm 
# End of macro NEXTW
3d16			 
3d16			 
3d16			.ENDLOGIC: 
3d16			; eof 
3d16			 
3d16			 
# End of file forth_words_logic.asm
3d16			include "forth_words_maths.asm" 
3d16			 
3d16			; | ## Maths Words 
3d16			 
3d16			.PLUS:	 
3d16				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3d16 15				db WORD_SYS_CORE+1             
3d17 74 3d			dw .NEG            
3d19 02				db 1 + 1 
3d1a .. 00			db "+",0              
3d1c				endm 
# End of macro CWHEAD
3d1c			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3d1c					if DEBUG_FORTH_WORDS_KEY 
3d1c						DMARK "PLU" 
3d1c f5				push af  
3d1d 3a 31 3d			ld a, (.dmark)  
3d20 32 a0 fd			ld (debug_mark),a  
3d23 3a 32 3d			ld a, (.dmark+1)  
3d26 32 a1 fd			ld (debug_mark+1),a  
3d29 3a 33 3d			ld a, (.dmark+2)  
3d2c 32 a2 fd			ld (debug_mark+2),a  
3d2f 18 03			jr .pastdmark  
3d31 ..			.dmark: db "PLU"  
3d34 f1			.pastdmark: pop af  
3d35			endm  
# End of macro DMARK
3d35						CALLMONITOR 
3d35 cd aa fd			call debug_vector  
3d38				endm  
# End of macro CALLMONITOR
3d38					endif 
3d38					; add top two values and push back result 
3d38			 
3d38					;for v5 FORTH_DSP_VALUE 
3d38					FORTH_DSP 
3d38 cd 13 22			call macro_forth_dsp 
3d3b				endm 
# End of macro FORTH_DSP
3d3b 7e					ld a,(hl)	; get type of value on TOS 
3d3c fe 02				cp DS_TYPE_INUM  
3d3e 28 03				jr z, .dot_inum 
3d40			 
3d40					NEXTW 
3d40 c3 38 24			jp macro_next 
3d43				endm 
# End of macro NEXTW
3d43			 
3d43			; float maths 
3d43			 
3d43				if FORTH_ENABLE_FLOATMATH 
3d43						inc hl      ; now at start of numeric as string 
3d43			 
3d43					if DEBUG_FORTH_MATHS 
3d43						DMARK "ADD" 
3d43				CALLMONITOR 
3d43					endif 
3d43			 
3d43					;ld ix, hl 
3d43					call CON 
3d43			 
3d43			 
3d43					push hl 
3d43					 
3d43					 
3d43			 
3d43						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3d43			 
3d43					; get next number 
3d43			 
3d43						FORTH_DSP_VALUE 
3d43			 
3d43						inc hl      ; now at start of numeric as string 
3d43			 
3d43					;ld ix, hl 
3d43					call CON 
3d43			 
3d43					push hl 
3d43			 
3d43			 
3d43						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d43			 
3d43						; TODO do add 
3d43			 
3d43						call IADD 
3d43			 
3d43						; TODO get result back as ascii 
3d43			 
3d43						; TODO push result  
3d43			 
3d43			 
3d43			 
3d43						jr .dot_done 
3d43				endif 
3d43			 
3d43			.dot_inum: 
3d43			 
3d43			 
3d43					if DEBUG_FORTH_DOT 
3d43						DMARK "+IT" 
3d43 f5				push af  
3d44 3a 58 3d			ld a, (.dmark)  
3d47 32 a0 fd			ld (debug_mark),a  
3d4a 3a 59 3d			ld a, (.dmark+1)  
3d4d 32 a1 fd			ld (debug_mark+1),a  
3d50 3a 5a 3d			ld a, (.dmark+2)  
3d53 32 a2 fd			ld (debug_mark+2),a  
3d56 18 03			jr .pastdmark  
3d58 ..			.dmark: db "+IT"  
3d5b f1			.pastdmark: pop af  
3d5c			endm  
# End of macro DMARK
3d5c				CALLMONITOR 
3d5c cd aa fd			call debug_vector  
3d5f				endm  
# End of macro CALLMONITOR
3d5f					endif 
3d5f			 
3d5f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d5f cd 4d 22			call macro_dsp_valuehl 
3d62				endm 
# End of macro FORTH_DSP_VALUEHL
3d62			 
3d62				; TODO add floating point number detection 
3d62			 
3d62 e5					push hl 
3d63			 
3d63					; destroy value TOS 
3d63			 
3d63					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d63 cd 05 23			call macro_forth_dsp_pop 
3d66				endm 
# End of macro FORTH_DSP_POP
3d66			 
3d66			 
3d66					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d66 cd 4d 22			call macro_dsp_valuehl 
3d69				endm 
# End of macro FORTH_DSP_VALUEHL
3d69			 
3d69					; one value on hl get other one back 
3d69			 
3d69 d1					pop de 
3d6a			 
3d6a					; do the add 
3d6a			 
3d6a 19					add hl,de 
3d6b			 
3d6b					; save it 
3d6b			 
3d6b			;		push hl	 
3d6b			 
3d6b					; 
3d6b			 
3d6b					; destroy value TOS 
3d6b			 
3d6b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d6b cd 05 23			call macro_forth_dsp_pop 
3d6e				endm 
# End of macro FORTH_DSP_POP
3d6e			 
3d6e					; TODO push value back onto stack for another op etc 
3d6e			 
3d6e			;		pop hl 
3d6e			 
3d6e			.dot_done: 
3d6e cd 48 20				call forth_push_numhl 
3d71			 
3d71					NEXTW 
3d71 c3 38 24			jp macro_next 
3d74				endm 
# End of macro NEXTW
3d74			.NEG: 
3d74			 
3d74				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3d74 17				db WORD_SYS_CORE+3             
3d75 b7 3d			dw .DIV            
3d77 02				db 1 + 1 
3d78 .. 00			db "-",0              
3d7a				endm 
# End of macro CWHEAD
3d7a			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3d7a					if DEBUG_FORTH_WORDS_KEY 
3d7a						DMARK "SUB" 
3d7a f5				push af  
3d7b 3a 8f 3d			ld a, (.dmark)  
3d7e 32 a0 fd			ld (debug_mark),a  
3d81 3a 90 3d			ld a, (.dmark+1)  
3d84 32 a1 fd			ld (debug_mark+1),a  
3d87 3a 91 3d			ld a, (.dmark+2)  
3d8a 32 a2 fd			ld (debug_mark+2),a  
3d8d 18 03			jr .pastdmark  
3d8f ..			.dmark: db "SUB"  
3d92 f1			.pastdmark: pop af  
3d93			endm  
# End of macro DMARK
3d93						CALLMONITOR 
3d93 cd aa fd			call debug_vector  
3d96				endm  
# End of macro CALLMONITOR
3d96					endif 
3d96			 
3d96			 
3d96				; TODO add floating point number detection 
3d96					; v5 FORTH_DSP_VALUE 
3d96					FORTH_DSP 
3d96 cd 13 22			call macro_forth_dsp 
3d99				endm 
# End of macro FORTH_DSP
3d99 7e					ld a,(hl)	; get type of value on TOS 
3d9a fe 02				cp DS_TYPE_INUM  
3d9c 28 03				jr z, .neg_inum 
3d9e			 
3d9e					NEXTW 
3d9e c3 38 24			jp macro_next 
3da1				endm 
# End of macro NEXTW
3da1			 
3da1			; float maths 
3da1			 
3da1				if FORTH_ENABLE_FLOATMATH 
3da1					jr .neg_done 
3da1			 
3da1				endif 
3da1					 
3da1			 
3da1			.neg_inum: 
3da1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3da1 cd 4d 22			call macro_dsp_valuehl 
3da4				endm 
# End of macro FORTH_DSP_VALUEHL
3da4			 
3da4 e5					push hl 
3da5			 
3da5					; destroy value TOS 
3da5			 
3da5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3da5 cd 05 23			call macro_forth_dsp_pop 
3da8				endm 
# End of macro FORTH_DSP_POP
3da8			 
3da8			 
3da8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3da8 cd 4d 22			call macro_dsp_valuehl 
3dab				endm 
# End of macro FORTH_DSP_VALUEHL
3dab			 
3dab					; one value on hl get other one back 
3dab			 
3dab d1					pop de 
3dac			 
3dac					; do the sub 
3dac			;		ex de, hl 
3dac			 
3dac ed 52				sbc hl,de 
3dae			 
3dae					; save it 
3dae			 
3dae			;		push hl	 
3dae			 
3dae					; 
3dae			 
3dae					; destroy value TOS 
3dae			 
3dae					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3dae cd 05 23			call macro_forth_dsp_pop 
3db1				endm 
# End of macro FORTH_DSP_POP
3db1			 
3db1					; TODO push value back onto stack for another op etc 
3db1			 
3db1			;		pop hl 
3db1			 
3db1 cd 48 20				call forth_push_numhl 
3db4			.neg_done: 
3db4			 
3db4					NEXTW 
3db4 c3 38 24			jp macro_next 
3db7				endm 
# End of macro NEXTW
3db7			.DIV: 
3db7				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3db7 18				db WORD_SYS_CORE+4             
3db8 04 3e			dw .MUL            
3dba 02				db 1 + 1 
3dbb .. 00			db "/",0              
3dbd				endm 
# End of macro CWHEAD
3dbd			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3dbd					if DEBUG_FORTH_WORDS_KEY 
3dbd						DMARK "DIV" 
3dbd f5				push af  
3dbe 3a d2 3d			ld a, (.dmark)  
3dc1 32 a0 fd			ld (debug_mark),a  
3dc4 3a d3 3d			ld a, (.dmark+1)  
3dc7 32 a1 fd			ld (debug_mark+1),a  
3dca 3a d4 3d			ld a, (.dmark+2)  
3dcd 32 a2 fd			ld (debug_mark+2),a  
3dd0 18 03			jr .pastdmark  
3dd2 ..			.dmark: db "DIV"  
3dd5 f1			.pastdmark: pop af  
3dd6			endm  
# End of macro DMARK
3dd6						CALLMONITOR 
3dd6 cd aa fd			call debug_vector  
3dd9				endm  
# End of macro CALLMONITOR
3dd9					endif 
3dd9				; TODO add floating point number detection 
3dd9					; v5 FORTH_DSP_VALUE 
3dd9					FORTH_DSP 
3dd9 cd 13 22			call macro_forth_dsp 
3ddc				endm 
# End of macro FORTH_DSP
3ddc 7e					ld a,(hl)	; get type of value on TOS 
3ddd fe 02				cp DS_TYPE_INUM  
3ddf 28 03				jr z, .div_inum 
3de1			 
3de1				if FORTH_ENABLE_FLOATMATH 
3de1					jr .div_done 
3de1			 
3de1				endif 
3de1					NEXTW 
3de1 c3 38 24			jp macro_next 
3de4				endm 
# End of macro NEXTW
3de4			.div_inum: 
3de4			 
3de4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3de4 cd 4d 22			call macro_dsp_valuehl 
3de7				endm 
# End of macro FORTH_DSP_VALUEHL
3de7			 
3de7 e5					push hl    ; to go to bc 
3de8			 
3de8					; destroy value TOS 
3de8			 
3de8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3de8 cd 05 23			call macro_forth_dsp_pop 
3deb				endm 
# End of macro FORTH_DSP_POP
3deb			 
3deb			 
3deb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3deb cd 4d 22			call macro_dsp_valuehl 
3dee				endm 
# End of macro FORTH_DSP_VALUEHL
3dee			 
3dee					; hl to go to de 
3dee			 
3dee e5					push hl 
3def			 
3def c1					pop bc 
3df0 d1					pop de		 
3df1			 
3df1			 
3df1					if DEBUG_FORTH_MATHS 
3df1						DMARK "DIV" 
3df1				CALLMONITOR 
3df1					endif 
3df1					; one value on hl but move to a get other one back 
3df1			 
3df1			        
3df1 cd 3b 0f			call Div16 
3df4			 
3df4			;	push af	 
3df4 e5				push hl 
3df5 c5				push bc 
3df6			 
3df6					if DEBUG_FORTH_MATHS 
3df6						DMARK "DI1" 
3df6				CALLMONITOR 
3df6					endif 
3df6			 
3df6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3df6 cd 05 23			call macro_forth_dsp_pop 
3df9				endm 
# End of macro FORTH_DSP_POP
3df9			 
3df9			 
3df9			 
3df9 e1					pop hl    ; result 
3dfa			 
3dfa cd 48 20				call forth_push_numhl 
3dfd			 
3dfd e1					pop hl    ; reminder 
3dfe			;		ld h,0 
3dfe			;		ld l,d 
3dfe			 
3dfe cd 48 20				call forth_push_numhl 
3e01			.div_done: 
3e01					NEXTW 
3e01 c3 38 24			jp macro_next 
3e04				endm 
# End of macro NEXTW
3e04			.MUL: 
3e04				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3e04 19				db WORD_SYS_CORE+5             
3e05 49 3e			dw .MIN            
3e07 02				db 1 + 1 
3e08 .. 00			db "*",0              
3e0a				endm 
# End of macro CWHEAD
3e0a			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3e0a				; TODO add floating point number detection 
3e0a					if DEBUG_FORTH_WORDS_KEY 
3e0a						DMARK "MUL" 
3e0a f5				push af  
3e0b 3a 1f 3e			ld a, (.dmark)  
3e0e 32 a0 fd			ld (debug_mark),a  
3e11 3a 20 3e			ld a, (.dmark+1)  
3e14 32 a1 fd			ld (debug_mark+1),a  
3e17 3a 21 3e			ld a, (.dmark+2)  
3e1a 32 a2 fd			ld (debug_mark+2),a  
3e1d 18 03			jr .pastdmark  
3e1f ..			.dmark: db "MUL"  
3e22 f1			.pastdmark: pop af  
3e23			endm  
# End of macro DMARK
3e23						CALLMONITOR 
3e23 cd aa fd			call debug_vector  
3e26				endm  
# End of macro CALLMONITOR
3e26					endif 
3e26					FORTH_DSP 
3e26 cd 13 22			call macro_forth_dsp 
3e29				endm 
# End of macro FORTH_DSP
3e29					; v5 FORTH_DSP_VALUE 
3e29 7e					ld a,(hl)	; get type of value on TOS 
3e2a fe 02				cp DS_TYPE_INUM  
3e2c 28 03				jr z, .mul_inum 
3e2e			 
3e2e				if FORTH_ENABLE_FLOATMATH 
3e2e					jr .mul_done 
3e2e			 
3e2e				endif 
3e2e			 
3e2e					NEXTW 
3e2e c3 38 24			jp macro_next 
3e31				endm 
# End of macro NEXTW
3e31			.mul_inum:	 
3e31			 
3e31					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e31 cd 4d 22			call macro_dsp_valuehl 
3e34				endm 
# End of macro FORTH_DSP_VALUEHL
3e34			 
3e34 e5					push hl 
3e35			 
3e35					; destroy value TOS 
3e35			 
3e35					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e35 cd 05 23			call macro_forth_dsp_pop 
3e38				endm 
# End of macro FORTH_DSP_POP
3e38			 
3e38			 
3e38					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e38 cd 4d 22			call macro_dsp_valuehl 
3e3b				endm 
# End of macro FORTH_DSP_VALUEHL
3e3b			 
3e3b					; one value on hl but move to a get other one back 
3e3b			 
3e3b 7d					ld a, l 
3e3c			 
3e3c d1					pop de 
3e3d			 
3e3d					; do the mull 
3e3d			;		ex de, hl 
3e3d			 
3e3d cd 61 0f				call Mult16 
3e40					; save it 
3e40			 
3e40			;		push hl	 
3e40			 
3e40					; 
3e40			 
3e40					; destroy value TOS 
3e40			 
3e40					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e40 cd 05 23			call macro_forth_dsp_pop 
3e43				endm 
# End of macro FORTH_DSP_POP
3e43			 
3e43					; TODO push value back onto stack for another op etc 
3e43			 
3e43			;		pop hl 
3e43			 
3e43 cd 48 20				call forth_push_numhl 
3e46			 
3e46			.mul_done: 
3e46					NEXTW 
3e46 c3 38 24			jp macro_next 
3e49				endm 
# End of macro NEXTW
3e49			 
3e49			 
3e49			 
3e49			 
3e49			.MIN: 
3e49				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3e49 49				db WORD_SYS_CORE+53             
3e4a ca 3e			dw .MAX            
3e4c 04				db 3 + 1 
3e4d .. 00			db "MIN",0              
3e51				endm 
# End of macro CWHEAD
3e51			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3e51					if DEBUG_FORTH_WORDS_KEY 
3e51						DMARK "MIN" 
3e51 f5				push af  
3e52 3a 66 3e			ld a, (.dmark)  
3e55 32 a0 fd			ld (debug_mark),a  
3e58 3a 67 3e			ld a, (.dmark+1)  
3e5b 32 a1 fd			ld (debug_mark+1),a  
3e5e 3a 68 3e			ld a, (.dmark+2)  
3e61 32 a2 fd			ld (debug_mark+2),a  
3e64 18 03			jr .pastdmark  
3e66 ..			.dmark: db "MIN"  
3e69 f1			.pastdmark: pop af  
3e6a			endm  
# End of macro DMARK
3e6a						CALLMONITOR 
3e6a cd aa fd			call debug_vector  
3e6d				endm  
# End of macro CALLMONITOR
3e6d					endif 
3e6d					; get u2 
3e6d			 
3e6d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e6d cd 4d 22			call macro_dsp_valuehl 
3e70				endm 
# End of macro FORTH_DSP_VALUEHL
3e70			 
3e70 e5					push hl   ; u2 
3e71			 
3e71					; destroy value TOS 
3e71			 
3e71					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e71 cd 05 23			call macro_forth_dsp_pop 
3e74				endm 
# End of macro FORTH_DSP_POP
3e74			 
3e74					; get u1 
3e74			 
3e74					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e74 cd 4d 22			call macro_dsp_valuehl 
3e77				endm 
# End of macro FORTH_DSP_VALUEHL
3e77			 
3e77 e5					push hl  ; u1 
3e78			 
3e78					; destroy value TOS 
3e78			 
3e78					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e78 cd 05 23			call macro_forth_dsp_pop 
3e7b				endm 
# End of macro FORTH_DSP_POP
3e7b			 
3e7b b7			 or a      ;clear carry flag 
3e7c e1			  pop hl    ; u1 
3e7d d1			  pop de    ; u2 
3e7e e5				push hl   ; saved in case hl is lowest 
3e7f ed 52		  sbc hl,de 
3e81 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3e83			 
3e83 e1				pop hl 
3e84					if DEBUG_FORTH_WORDS 
3e84						DMARK "MIN" 
3e84 f5				push af  
3e85 3a 99 3e			ld a, (.dmark)  
3e88 32 a0 fd			ld (debug_mark),a  
3e8b 3a 9a 3e			ld a, (.dmark+1)  
3e8e 32 a1 fd			ld (debug_mark+1),a  
3e91 3a 9b 3e			ld a, (.dmark+2)  
3e94 32 a2 fd			ld (debug_mark+2),a  
3e97 18 03			jr .pastdmark  
3e99 ..			.dmark: db "MIN"  
3e9c f1			.pastdmark: pop af  
3e9d			endm  
# End of macro DMARK
3e9d						CALLMONITOR 
3e9d cd aa fd			call debug_vector  
3ea0				endm  
# End of macro CALLMONITOR
3ea0					endif 
3ea0 cd 48 20				call forth_push_numhl 
3ea3			 
3ea3				       NEXTW 
3ea3 c3 38 24			jp macro_next 
3ea6				endm 
# End of macro NEXTW
3ea6			 
3ea6			.mincont:  
3ea6 c1				pop bc   ; tidy up 
3ea7 eb				ex de , hl  
3ea8					if DEBUG_FORTH_WORDS 
3ea8						DMARK "MI1" 
3ea8 f5				push af  
3ea9 3a bd 3e			ld a, (.dmark)  
3eac 32 a0 fd			ld (debug_mark),a  
3eaf 3a be 3e			ld a, (.dmark+1)  
3eb2 32 a1 fd			ld (debug_mark+1),a  
3eb5 3a bf 3e			ld a, (.dmark+2)  
3eb8 32 a2 fd			ld (debug_mark+2),a  
3ebb 18 03			jr .pastdmark  
3ebd ..			.dmark: db "MI1"  
3ec0 f1			.pastdmark: pop af  
3ec1			endm  
# End of macro DMARK
3ec1						CALLMONITOR 
3ec1 cd aa fd			call debug_vector  
3ec4				endm  
# End of macro CALLMONITOR
3ec4					endif 
3ec4 cd 48 20				call forth_push_numhl 
3ec7			 
3ec7				       NEXTW 
3ec7 c3 38 24			jp macro_next 
3eca				endm 
# End of macro NEXTW
3eca			.MAX: 
3eca				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3eca 4a				db WORD_SYS_CORE+54             
3ecb 4b 3f			dw .RND16            
3ecd 04				db 3 + 1 
3ece .. 00			db "MAX",0              
3ed2				endm 
# End of macro CWHEAD
3ed2			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3ed2					if DEBUG_FORTH_WORDS_KEY 
3ed2						DMARK "MAX" 
3ed2 f5				push af  
3ed3 3a e7 3e			ld a, (.dmark)  
3ed6 32 a0 fd			ld (debug_mark),a  
3ed9 3a e8 3e			ld a, (.dmark+1)  
3edc 32 a1 fd			ld (debug_mark+1),a  
3edf 3a e9 3e			ld a, (.dmark+2)  
3ee2 32 a2 fd			ld (debug_mark+2),a  
3ee5 18 03			jr .pastdmark  
3ee7 ..			.dmark: db "MAX"  
3eea f1			.pastdmark: pop af  
3eeb			endm  
# End of macro DMARK
3eeb						CALLMONITOR 
3eeb cd aa fd			call debug_vector  
3eee				endm  
# End of macro CALLMONITOR
3eee					endif 
3eee					; get u2 
3eee			 
3eee					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3eee cd 4d 22			call macro_dsp_valuehl 
3ef1				endm 
# End of macro FORTH_DSP_VALUEHL
3ef1			 
3ef1 e5					push hl   ; u2 
3ef2			 
3ef2					; destroy value TOS 
3ef2			 
3ef2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ef2 cd 05 23			call macro_forth_dsp_pop 
3ef5				endm 
# End of macro FORTH_DSP_POP
3ef5			 
3ef5					; get u1 
3ef5			 
3ef5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ef5 cd 4d 22			call macro_dsp_valuehl 
3ef8				endm 
# End of macro FORTH_DSP_VALUEHL
3ef8			 
3ef8 e5					push hl  ; u1 
3ef9			 
3ef9					; destroy value TOS 
3ef9			 
3ef9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ef9 cd 05 23			call macro_forth_dsp_pop 
3efc				endm 
# End of macro FORTH_DSP_POP
3efc			 
3efc b7			 or a      ;clear carry flag 
3efd e1			  pop hl    ; u1 
3efe d1			  pop de    ; u2 
3eff e5				push hl   ; saved in case hl is lowest 
3f00 ed 52		  sbc hl,de 
3f02 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3f04			 
3f04 e1				pop hl 
3f05					if DEBUG_FORTH_WORDS 
3f05						DMARK "MAX" 
3f05 f5				push af  
3f06 3a 1a 3f			ld a, (.dmark)  
3f09 32 a0 fd			ld (debug_mark),a  
3f0c 3a 1b 3f			ld a, (.dmark+1)  
3f0f 32 a1 fd			ld (debug_mark+1),a  
3f12 3a 1c 3f			ld a, (.dmark+2)  
3f15 32 a2 fd			ld (debug_mark+2),a  
3f18 18 03			jr .pastdmark  
3f1a ..			.dmark: db "MAX"  
3f1d f1			.pastdmark: pop af  
3f1e			endm  
# End of macro DMARK
3f1e						CALLMONITOR 
3f1e cd aa fd			call debug_vector  
3f21				endm  
# End of macro CALLMONITOR
3f21					endif 
3f21 cd 48 20				call forth_push_numhl 
3f24			 
3f24				       NEXTW 
3f24 c3 38 24			jp macro_next 
3f27				endm 
# End of macro NEXTW
3f27			 
3f27			.maxcont:  
3f27 c1				pop bc   ; tidy up 
3f28 eb				ex de , hl  
3f29					if DEBUG_FORTH_WORDS 
3f29						DMARK "MA1" 
3f29 f5				push af  
3f2a 3a 3e 3f			ld a, (.dmark)  
3f2d 32 a0 fd			ld (debug_mark),a  
3f30 3a 3f 3f			ld a, (.dmark+1)  
3f33 32 a1 fd			ld (debug_mark+1),a  
3f36 3a 40 3f			ld a, (.dmark+2)  
3f39 32 a2 fd			ld (debug_mark+2),a  
3f3c 18 03			jr .pastdmark  
3f3e ..			.dmark: db "MA1"  
3f41 f1			.pastdmark: pop af  
3f42			endm  
# End of macro DMARK
3f42						CALLMONITOR 
3f42 cd aa fd			call debug_vector  
3f45				endm  
# End of macro CALLMONITOR
3f45					endif 
3f45 cd 48 20				call forth_push_numhl 
3f48				       NEXTW 
3f48 c3 38 24			jp macro_next 
3f4b				endm 
# End of macro NEXTW
3f4b			 
3f4b			.RND16: 
3f4b				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3f4b 4e				db WORD_SYS_CORE+58             
3f4c 7a 3f			dw .RND8            
3f4e 06				db 5 + 1 
3f4f .. 00			db "RND16",0              
3f55				endm 
# End of macro CWHEAD
3f55			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3f55					if DEBUG_FORTH_WORDS_KEY 
3f55						DMARK "R16" 
3f55 f5				push af  
3f56 3a 6a 3f			ld a, (.dmark)  
3f59 32 a0 fd			ld (debug_mark),a  
3f5c 3a 6b 3f			ld a, (.dmark+1)  
3f5f 32 a1 fd			ld (debug_mark+1),a  
3f62 3a 6c 3f			ld a, (.dmark+2)  
3f65 32 a2 fd			ld (debug_mark+2),a  
3f68 18 03			jr .pastdmark  
3f6a ..			.dmark: db "R16"  
3f6d f1			.pastdmark: pop af  
3f6e			endm  
# End of macro DMARK
3f6e						CALLMONITOR 
3f6e cd aa fd			call debug_vector  
3f71				endm  
# End of macro CALLMONITOR
3f71					endif 
3f71 cd 05 0f				call prng16  
3f74 cd 48 20				call forth_push_numhl 
3f77				       NEXTW 
3f77 c3 38 24			jp macro_next 
3f7a				endm 
# End of macro NEXTW
3f7a			.RND8: 
3f7a				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3f7a 60				db WORD_SYS_CORE+76             
3f7b af 3f			dw .RND            
3f7d 05				db 4 + 1 
3f7e .. 00			db "RND8",0              
3f83				endm 
# End of macro CWHEAD
3f83			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3f83					if DEBUG_FORTH_WORDS_KEY 
3f83						DMARK "RN8" 
3f83 f5				push af  
3f84 3a 98 3f			ld a, (.dmark)  
3f87 32 a0 fd			ld (debug_mark),a  
3f8a 3a 99 3f			ld a, (.dmark+1)  
3f8d 32 a1 fd			ld (debug_mark+1),a  
3f90 3a 9a 3f			ld a, (.dmark+2)  
3f93 32 a2 fd			ld (debug_mark+2),a  
3f96 18 03			jr .pastdmark  
3f98 ..			.dmark: db "RN8"  
3f9b f1			.pastdmark: pop af  
3f9c			endm  
# End of macro DMARK
3f9c						CALLMONITOR 
3f9c cd aa fd			call debug_vector  
3f9f				endm  
# End of macro CALLMONITOR
3f9f					endif 
3f9f 2a de fa				ld hl,(xrandc) 
3fa2 23					inc hl 
3fa3 cd 1f 0f				call xrnd 
3fa6 6f					ld l,a	 
3fa7 26 00				ld h,0 
3fa9 cd 48 20				call forth_push_numhl 
3fac				       NEXTW 
3fac c3 38 24			jp macro_next 
3faf				endm 
# End of macro NEXTW
3faf			.RND: 
3faf				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3faf 60				db WORD_SYS_CORE+76             
3fb0 b5 40			dw .ENDMATHS            
3fb2 04				db 3 + 1 
3fb3 .. 00			db "RND",0              
3fb7				endm 
# End of macro CWHEAD
3fb7			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3fb7			 
3fb7					if DEBUG_FORTH_WORDS_KEY 
3fb7						DMARK "RND" 
3fb7 f5				push af  
3fb8 3a cc 3f			ld a, (.dmark)  
3fbb 32 a0 fd			ld (debug_mark),a  
3fbe 3a cd 3f			ld a, (.dmark+1)  
3fc1 32 a1 fd			ld (debug_mark+1),a  
3fc4 3a ce 3f			ld a, (.dmark+2)  
3fc7 32 a2 fd			ld (debug_mark+2),a  
3fca 18 03			jr .pastdmark  
3fcc ..			.dmark: db "RND"  
3fcf f1			.pastdmark: pop af  
3fd0			endm  
# End of macro DMARK
3fd0						CALLMONITOR 
3fd0 cd aa fd			call debug_vector  
3fd3				endm  
# End of macro CALLMONITOR
3fd3					endif 
3fd3					 
3fd3					FORTH_DSP_VALUEHL    ; upper range 
3fd3 cd 4d 22			call macro_dsp_valuehl 
3fd6				endm 
# End of macro FORTH_DSP_VALUEHL
3fd6			 
3fd6 22 e2 fa				ld (LFSRSeed), hl	 
3fd9			 
3fd9					if DEBUG_FORTH_WORDS 
3fd9						DMARK "RN1" 
3fd9 f5				push af  
3fda 3a ee 3f			ld a, (.dmark)  
3fdd 32 a0 fd			ld (debug_mark),a  
3fe0 3a ef 3f			ld a, (.dmark+1)  
3fe3 32 a1 fd			ld (debug_mark+1),a  
3fe6 3a f0 3f			ld a, (.dmark+2)  
3fe9 32 a2 fd			ld (debug_mark+2),a  
3fec 18 03			jr .pastdmark  
3fee ..			.dmark: db "RN1"  
3ff1 f1			.pastdmark: pop af  
3ff2			endm  
# End of macro DMARK
3ff2						CALLMONITOR 
3ff2 cd aa fd			call debug_vector  
3ff5				endm  
# End of macro CALLMONITOR
3ff5					endif 
3ff5					FORTH_DSP_POP 
3ff5 cd 05 23			call macro_forth_dsp_pop 
3ff8				endm 
# End of macro FORTH_DSP_POP
3ff8			 
3ff8					FORTH_DSP_VALUEHL    ; low range 
3ff8 cd 4d 22			call macro_dsp_valuehl 
3ffb				endm 
# End of macro FORTH_DSP_VALUEHL
3ffb			 
3ffb					if DEBUG_FORTH_WORDS 
3ffb						DMARK "RN2" 
3ffb f5				push af  
3ffc 3a 10 40			ld a, (.dmark)  
3fff 32 a0 fd			ld (debug_mark),a  
4002 3a 11 40			ld a, (.dmark+1)  
4005 32 a1 fd			ld (debug_mark+1),a  
4008 3a 12 40			ld a, (.dmark+2)  
400b 32 a2 fd			ld (debug_mark+2),a  
400e 18 03			jr .pastdmark  
4010 ..			.dmark: db "RN2"  
4013 f1			.pastdmark: pop af  
4014			endm  
# End of macro DMARK
4014						CALLMONITOR 
4014 cd aa fd			call debug_vector  
4017				endm  
# End of macro CALLMONITOR
4017					endif 
4017 22 e4 fa				ld (LFSRSeed+2), hl 
401a			 
401a					FORTH_DSP_POP 
401a cd 05 23			call macro_forth_dsp_pop 
401d				endm 
# End of macro FORTH_DSP_POP
401d			 
401d e5					push hl 
401e			 
401e e1			.inrange:	pop hl 
401f cd 05 0f				call prng16  
4022					if DEBUG_FORTH_WORDS 
4022						DMARK "RN3" 
4022 f5				push af  
4023 3a 37 40			ld a, (.dmark)  
4026 32 a0 fd			ld (debug_mark),a  
4029 3a 38 40			ld a, (.dmark+1)  
402c 32 a1 fd			ld (debug_mark+1),a  
402f 3a 39 40			ld a, (.dmark+2)  
4032 32 a2 fd			ld (debug_mark+2),a  
4035 18 03			jr .pastdmark  
4037 ..			.dmark: db "RN3"  
403a f1			.pastdmark: pop af  
403b			endm  
# End of macro DMARK
403b						CALLMONITOR 
403b cd aa fd			call debug_vector  
403e				endm  
# End of macro CALLMONITOR
403e					endif 
403e					 
403e					; if the range is 8bit knock out the high byte 
403e			 
403e ed 5b e2 fa			ld de, (LFSRSeed)     ; check high level 
4042			 
4042 3e 00				ld a, 0 
4044 ba					cp d  
4045 20 1e				jr nz, .hirange 
4047 26 00				ld h, 0   ; knock it down to 8bit 
4049			 
4049					if DEBUG_FORTH_WORDS 
4049						DMARK "RNk" 
4049 f5				push af  
404a 3a 5e 40			ld a, (.dmark)  
404d 32 a0 fd			ld (debug_mark),a  
4050 3a 5f 40			ld a, (.dmark+1)  
4053 32 a1 fd			ld (debug_mark+1),a  
4056 3a 60 40			ld a, (.dmark+2)  
4059 32 a2 fd			ld (debug_mark+2),a  
405c 18 03			jr .pastdmark  
405e ..			.dmark: db "RNk"  
4061 f1			.pastdmark: pop af  
4062			endm  
# End of macro DMARK
4062						CALLMONITOR 
4062 cd aa fd			call debug_vector  
4065				endm  
# End of macro CALLMONITOR
4065					endif 
4065			.hirange:   
4065 e5					push hl  
4066 b7					or a  
4067 ed 52		                sbc hl, de 
4069			 
4069					;call cmp16 
4069			 
4069 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
406b e1					pop hl 
406c e5					push hl 
406d			 
406d					if DEBUG_FORTH_WORDS 
406d						DMARK "RN4" 
406d f5				push af  
406e 3a 82 40			ld a, (.dmark)  
4071 32 a0 fd			ld (debug_mark),a  
4074 3a 83 40			ld a, (.dmark+1)  
4077 32 a1 fd			ld (debug_mark+1),a  
407a 3a 84 40			ld a, (.dmark+2)  
407d 32 a2 fd			ld (debug_mark+2),a  
4080 18 03			jr .pastdmark  
4082 ..			.dmark: db "RN4"  
4085 f1			.pastdmark: pop af  
4086			endm  
# End of macro DMARK
4086						CALLMONITOR 
4086 cd aa fd			call debug_vector  
4089				endm  
# End of macro CALLMONITOR
4089					endif 
4089 ed 5b e4 fa			ld de, (LFSRSeed+2)   ; check low range 
408d					;call cmp16 
408d				 
408d b7					or a  
408e ed 52		                sbc hl, de 
4090 38 8c				jr c, .inrange 
4092			 
4092 e1					pop hl 
4093					 
4093					if DEBUG_FORTH_WORDS 
4093						DMARK "RNd" 
4093 f5				push af  
4094 3a a8 40			ld a, (.dmark)  
4097 32 a0 fd			ld (debug_mark),a  
409a 3a a9 40			ld a, (.dmark+1)  
409d 32 a1 fd			ld (debug_mark+1),a  
40a0 3a aa 40			ld a, (.dmark+2)  
40a3 32 a2 fd			ld (debug_mark+2),a  
40a6 18 03			jr .pastdmark  
40a8 ..			.dmark: db "RNd"  
40ab f1			.pastdmark: pop af  
40ac			endm  
# End of macro DMARK
40ac						CALLMONITOR 
40ac cd aa fd			call debug_vector  
40af				endm  
# End of macro CALLMONITOR
40af					endif 
40af			 
40af			 
40af cd 48 20				call forth_push_numhl 
40b2				       NEXTW 
40b2 c3 38 24			jp macro_next 
40b5				endm 
# End of macro NEXTW
40b5			 
40b5			.ENDMATHS: 
40b5			 
40b5			; eof 
40b5			 
# End of file forth_words_maths.asm
40b5			include "forth_words_display.asm" 
40b5			 
40b5			; | ## Display Words 
40b5			 
40b5			.ACT: 
40b5			 
40b5				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
40b5 62				db WORD_SYS_CORE+78             
40b6 01 41			dw .INFO            
40b8 07				db 6 + 1 
40b9 .. 00			db "ACTIVE",0              
40c0				endm 
# End of macro CWHEAD
40c0			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
40c0			;  
40c0			; | | To display a pulsing activity indicator in a processing loop do this... 
40c0			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
40c0			 
40c0					if DEBUG_FORTH_WORDS_KEY 
40c0						DMARK "ACT" 
40c0 f5				push af  
40c1 3a d5 40			ld a, (.dmark)  
40c4 32 a0 fd			ld (debug_mark),a  
40c7 3a d6 40			ld a, (.dmark+1)  
40ca 32 a1 fd			ld (debug_mark+1),a  
40cd 3a d7 40			ld a, (.dmark+2)  
40d0 32 a2 fd			ld (debug_mark+2),a  
40d3 18 03			jr .pastdmark  
40d5 ..			.dmark: db "ACT"  
40d8 f1			.pastdmark: pop af  
40d9			endm  
# End of macro DMARK
40d9						CALLMONITOR 
40d9 cd aa fd			call debug_vector  
40dc				endm  
# End of macro CALLMONITOR
40dc					endif 
40dc cd 01 0d				call active 
40df					if DEBUG_FORTH_WORDS 
40df						DMARK "ACp" 
40df f5				push af  
40e0 3a f4 40			ld a, (.dmark)  
40e3 32 a0 fd			ld (debug_mark),a  
40e6 3a f5 40			ld a, (.dmark+1)  
40e9 32 a1 fd			ld (debug_mark+1),a  
40ec 3a f6 40			ld a, (.dmark+2)  
40ef 32 a2 fd			ld (debug_mark+2),a  
40f2 18 03			jr .pastdmark  
40f4 ..			.dmark: db "ACp"  
40f7 f1			.pastdmark: pop af  
40f8			endm  
# End of macro DMARK
40f8						CALLMONITOR 
40f8 cd aa fd			call debug_vector  
40fb				endm  
# End of macro CALLMONITOR
40fb					endif 
40fb cd b6 20				call forth_push_str 
40fe			 
40fe					NEXTW 
40fe c3 38 24			jp macro_next 
4101				endm 
# End of macro NEXTW
4101			.INFO: 
4101			 
4101				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
4101 62				db WORD_SYS_CORE+78             
4102 1e 41			dw .ATP            
4104 05				db 4 + 1 
4105 .. 00			db "INFO",0              
410a				endm 
# End of macro CWHEAD
410a			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
410a					FORTH_DSP_VALUEHL 
410a cd 4d 22			call macro_dsp_valuehl 
410d				endm 
# End of macro FORTH_DSP_VALUEHL
410d			 
410d					FORTH_DSP_POP 
410d cd 05 23			call macro_forth_dsp_pop 
4110				endm 
# End of macro FORTH_DSP_POP
4110			 
4110 e5					push hl 
4111			 
4111					FORTH_DSP_VALUEHL 
4111 cd 4d 22			call macro_dsp_valuehl 
4114				endm 
# End of macro FORTH_DSP_VALUEHL
4114			 
4114					FORTH_DSP_POP 
4114 cd 05 23			call macro_forth_dsp_pop 
4117				endm 
# End of macro FORTH_DSP_POP
4117			 
4117 d1					pop de 
4118			 
4118 cd 3b 0d				call info_panel 
411b			 
411b			 
411b					NEXTW 
411b c3 38 24			jp macro_next 
411e				endm 
# End of macro NEXTW
411e			.ATP: 
411e				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
411e 62				db WORD_SYS_CORE+78             
411f 95 41			dw .FB            
4121 04				db 3 + 1 
4122 .. 00			db "AT?",0              
4126				endm 
# End of macro CWHEAD
4126			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
4126					if DEBUG_FORTH_WORDS_KEY 
4126						DMARK "AT?" 
4126 f5				push af  
4127 3a 3b 41			ld a, (.dmark)  
412a 32 a0 fd			ld (debug_mark),a  
412d 3a 3c 41			ld a, (.dmark+1)  
4130 32 a1 fd			ld (debug_mark+1),a  
4133 3a 3d 41			ld a, (.dmark+2)  
4136 32 a2 fd			ld (debug_mark+2),a  
4139 18 03			jr .pastdmark  
413b ..			.dmark: db "AT?"  
413e f1			.pastdmark: pop af  
413f			endm  
# End of macro DMARK
413f						CALLMONITOR 
413f cd aa fd			call debug_vector  
4142				endm  
# End of macro CALLMONITOR
4142					endif 
4142 3a 93 f9				ld a, (f_cursor_ptr) 
4145			 
4145			if DEBUG_FORTH_WORDS 
4145				DMARK "AT?" 
4145 f5				push af  
4146 3a 5a 41			ld a, (.dmark)  
4149 32 a0 fd			ld (debug_mark),a  
414c 3a 5b 41			ld a, (.dmark+1)  
414f 32 a1 fd			ld (debug_mark+1),a  
4152 3a 5c 41			ld a, (.dmark+2)  
4155 32 a2 fd			ld (debug_mark+2),a  
4158 18 03			jr .pastdmark  
415a ..			.dmark: db "AT?"  
415d f1			.pastdmark: pop af  
415e			endm  
# End of macro DMARK
415e				CALLMONITOR 
415e cd aa fd			call debug_vector  
4161				endm  
# End of macro CALLMONITOR
4161			endif	 
4161					; count the number of rows 
4161			 
4161 06 00				ld b, 0 
4163 4f			.atpr:		ld c, a    ; save in case we go below zero 
4164 d6 28				sub display_cols 
4166 f2 6c 41				jp p, .atprunder 
4169 04					inc b 
416a 18 f7				jr .atpr 
416c			.atprunder:	 
416c			if DEBUG_FORTH_WORDS 
416c				DMARK "A?2" 
416c f5				push af  
416d 3a 81 41			ld a, (.dmark)  
4170 32 a0 fd			ld (debug_mark),a  
4173 3a 82 41			ld a, (.dmark+1)  
4176 32 a1 fd			ld (debug_mark+1),a  
4179 3a 83 41			ld a, (.dmark+2)  
417c 32 a2 fd			ld (debug_mark+2),a  
417f 18 03			jr .pastdmark  
4181 ..			.dmark: db "A?2"  
4184 f1			.pastdmark: pop af  
4185			endm  
# End of macro DMARK
4185				CALLMONITOR 
4185 cd aa fd			call debug_vector  
4188				endm  
# End of macro CALLMONITOR
4188			endif	 
4188 26 00				ld h, 0 
418a 69					ld l, c 
418b cd 48 20				call forth_push_numhl 
418e 68					ld l, b  
418f cd 48 20				call forth_push_numhl 
4192			 
4192			 
4192				NEXTW 
4192 c3 38 24			jp macro_next 
4195				endm 
# End of macro NEXTW
4195			 
4195			.FB: 
4195				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
4195 1b				db WORD_SYS_CORE+7             
4196 e3 41			dw .EMIT            
4198 03				db 2 + 1 
4199 .. 00			db "FB",0              
419c				endm 
# End of macro CWHEAD
419c			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
419c			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
419c			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
419c			; | | If automatic display is off then updates will not be shown until DRAW is used. 
419c					if DEBUG_FORTH_WORDS_KEY 
419c						DMARK "FB." 
419c f5				push af  
419d 3a b1 41			ld a, (.dmark)  
41a0 32 a0 fd			ld (debug_mark),a  
41a3 3a b2 41			ld a, (.dmark+1)  
41a6 32 a1 fd			ld (debug_mark+1),a  
41a9 3a b3 41			ld a, (.dmark+2)  
41ac 32 a2 fd			ld (debug_mark+2),a  
41af 18 03			jr .pastdmark  
41b1 ..			.dmark: db "FB."  
41b4 f1			.pastdmark: pop af  
41b5			endm  
# End of macro DMARK
41b5						CALLMONITOR 
41b5 cd aa fd			call debug_vector  
41b8				endm  
# End of macro CALLMONITOR
41b8					endif 
41b8			 
41b8					FORTH_DSP_VALUEHL 
41b8 cd 4d 22			call macro_dsp_valuehl 
41bb				endm 
# End of macro FORTH_DSP_VALUEHL
41bb			 
41bb 7d					ld a, l 
41bc fe 01				cp 1 
41be 20 05				jr nz, .fbn1 
41c0 21 45 fc				ld hl, display_fb1 
41c3 18 15				jr .fbset 
41c5 fe 02		.fbn1:		cp 2 
41c7 20 05				jr nz, .fbn2 
41c9 21 03 fb				ld hl, display_fb2 
41cc 18 0c				jr .fbset 
41ce fe 03		.fbn2:		cp 3 
41d0 20 05				jr nz, .fbn3 
41d2 21 a4 fb				ld hl, display_fb3 
41d5 18 03				jr .fbset 
41d7			.fbn3:		 ; if invalid number select first 
41d7 21 45 fc				ld hl, display_fb1 
41da 22 01 fb		.fbset:		ld (display_fb_active), hl 
41dd			 
41dd					FORTH_DSP_POP 
41dd cd 05 23			call macro_forth_dsp_pop 
41e0				endm 
# End of macro FORTH_DSP_POP
41e0			 
41e0					NEXTW 
41e0 c3 38 24			jp macro_next 
41e3				endm 
# End of macro NEXTW
41e3			 
41e3			 
41e3			.EMIT: 
41e3				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
41e3 1b				db WORD_SYS_CORE+7             
41e4 34 42			dw .DOTH            
41e6 05				db 4 + 1 
41e7 .. 00			db "EMIT",0              
41ec				endm 
# End of macro CWHEAD
41ec			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
41ec					; get value off TOS and display it 
41ec			 
41ec					if DEBUG_FORTH_WORDS_KEY 
41ec						DMARK "EMT" 
41ec f5				push af  
41ed 3a 01 42			ld a, (.dmark)  
41f0 32 a0 fd			ld (debug_mark),a  
41f3 3a 02 42			ld a, (.dmark+1)  
41f6 32 a1 fd			ld (debug_mark+1),a  
41f9 3a 03 42			ld a, (.dmark+2)  
41fc 32 a2 fd			ld (debug_mark+2),a  
41ff 18 03			jr .pastdmark  
4201 ..			.dmark: db "EMT"  
4204 f1			.pastdmark: pop af  
4205			endm  
# End of macro DMARK
4205						CALLMONITOR 
4205 cd aa fd			call debug_vector  
4208				endm  
# End of macro CALLMONITOR
4208					endif 
4208			 
4208					FORTH_DSP_VALUEHL 
4208 cd 4d 22			call macro_dsp_valuehl 
420b				endm 
# End of macro FORTH_DSP_VALUEHL
420b			 
420b 7d					ld a,l 
420c			 
420c					; TODO write to display 
420c			 
420c 32 f4 f2				ld (os_input), a 
420f 3e 00				ld a, 0 
4211 32 f5 f2				ld (os_input+1), a 
4214					 
4214 3a 93 f9				ld a, (f_cursor_ptr) 
4217 11 f4 f2				ld de, os_input 
421a cd bd 0d				call str_at_display 
421d			 
421d			 
421d 3a 71 f9				ld a,(cli_autodisplay) 
4220 fe 00				cp 0 
4222 28 03				jr z, .enoupdate 
4224 cd cd 0d						call update_display 
4227					.enoupdate: 
4227			 
4227 3a 93 f9				ld a, (f_cursor_ptr) 
422a 3c					inc a 
422b 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
422e			 
422e			 
422e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
422e cd 05 23			call macro_forth_dsp_pop 
4231				endm 
# End of macro FORTH_DSP_POP
4231			  
4231			 
4231					NEXTW 
4231 c3 38 24			jp macro_next 
4234				endm 
# End of macro NEXTW
4234			.DOTH: 
4234				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
4234 1c				db WORD_SYS_CORE+8             
4235 64 42			dw .DOTF            
4237 03				db 2 + 1 
4238 .. 00			db ".-",0              
423b				endm 
# End of macro CWHEAD
423b			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
423b					; get value off TOS and display it 
423b					if DEBUG_FORTH_WORDS_KEY 
423b						DMARK "DTD" 
423b f5				push af  
423c 3a 50 42			ld a, (.dmark)  
423f 32 a0 fd			ld (debug_mark),a  
4242 3a 51 42			ld a, (.dmark+1)  
4245 32 a1 fd			ld (debug_mark+1),a  
4248 3a 52 42			ld a, (.dmark+2)  
424b 32 a2 fd			ld (debug_mark+2),a  
424e 18 03			jr .pastdmark  
4250 ..			.dmark: db "DTD"  
4253 f1			.pastdmark: pop af  
4254			endm  
# End of macro DMARK
4254						CALLMONITOR 
4254 cd aa fd			call debug_vector  
4257				endm  
# End of macro CALLMONITOR
4257					endif 
4257 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
4259 3e 00			ld a, 0 
425b 32 72 f9			ld (cli_mvdot), a 
425e c3 bb 42			jp .dotgo 
4261				NEXTW 
4261 c3 38 24			jp macro_next 
4264				endm 
# End of macro NEXTW
4264			.DOTF: 
4264				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
4264 1c				db WORD_SYS_CORE+8             
4265 92 42			dw .DOT            
4267 03				db 2 + 1 
4268 .. 00			db ".>",0              
426b				endm 
# End of macro CWHEAD
426b			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
426b					; get value off TOS and display it 
426b			        ; TODO BUG adds extra spaces 
426b			        ; TODO BUG handle numerics? 
426b					if DEBUG_FORTH_WORDS_KEY 
426b						DMARK "DTC" 
426b f5				push af  
426c 3a 80 42			ld a, (.dmark)  
426f 32 a0 fd			ld (debug_mark),a  
4272 3a 81 42			ld a, (.dmark+1)  
4275 32 a1 fd			ld (debug_mark+1),a  
4278 3a 82 42			ld a, (.dmark+2)  
427b 32 a2 fd			ld (debug_mark+2),a  
427e 18 03			jr .pastdmark  
4280 ..			.dmark: db "DTC"  
4283 f1			.pastdmark: pop af  
4284			endm  
# End of macro DMARK
4284						CALLMONITOR 
4284 cd aa fd			call debug_vector  
4287				endm  
# End of macro CALLMONITOR
4287					endif 
4287 3e 01			ld a, 1 
4289 32 72 f9			ld (cli_mvdot), a 
428c c3 bb 42			jp .dotgo 
428f				NEXTW 
428f c3 38 24			jp macro_next 
4292				endm 
# End of macro NEXTW
4292			 
4292			.DOT: 
4292				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
4292 1c				db WORD_SYS_CORE+8             
4293 6e 44			dw .CLS            
4295 02				db 1 + 1 
4296 .. 00			db ".",0              
4298				endm 
# End of macro CWHEAD
4298			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
4298					; get value off TOS and display it 
4298			 
4298					if DEBUG_FORTH_WORDS_KEY 
4298						DMARK "DOT" 
4298 f5				push af  
4299 3a ad 42			ld a, (.dmark)  
429c 32 a0 fd			ld (debug_mark),a  
429f 3a ae 42			ld a, (.dmark+1)  
42a2 32 a1 fd			ld (debug_mark+1),a  
42a5 3a af 42			ld a, (.dmark+2)  
42a8 32 a2 fd			ld (debug_mark+2),a  
42ab 18 03			jr .pastdmark  
42ad ..			.dmark: db "DOT"  
42b0 f1			.pastdmark: pop af  
42b1			endm  
# End of macro DMARK
42b1						CALLMONITOR 
42b1 cd aa fd			call debug_vector  
42b4				endm  
# End of macro CALLMONITOR
42b4					endif 
42b4 3e 00			ld a, 0 
42b6 32 72 f9			ld (cli_mvdot), a 
42b9 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
42bb				 
42bb			 
42bb			.dotgo: 
42bb			 
42bb			; move up type to on stack for parserv5 
42bb					FORTH_DSP 
42bb cd 13 22			call macro_forth_dsp 
42be				endm 
# End of macro FORTH_DSP
42be				;FORTH_DSP_VALUE  
42be			 
42be			if DEBUG_FORTH_DOT 
42be				DMARK "DOT" 
42be f5				push af  
42bf 3a d3 42			ld a, (.dmark)  
42c2 32 a0 fd			ld (debug_mark),a  
42c5 3a d4 42			ld a, (.dmark+1)  
42c8 32 a1 fd			ld (debug_mark+1),a  
42cb 3a d5 42			ld a, (.dmark+2)  
42ce 32 a2 fd			ld (debug_mark+2),a  
42d1 18 03			jr .pastdmark  
42d3 ..			.dmark: db "DOT"  
42d6 f1			.pastdmark: pop af  
42d7			endm  
# End of macro DMARK
42d7				CALLMONITOR 
42d7 cd aa fd			call debug_vector  
42da				endm  
# End of macro CALLMONITOR
42da			endif	 
42da			;		.print: 
42da			 
42da 7e				ld a,(hl)  ; work out what type of value is on the TOS 
42db 23				inc hl   ; position to the actual value 
42dc fe 01			cp DS_TYPE_STR 
42de 20 06			jr nz, .dotnum1  
42e0			 
42e0			; display string 
42e0				FORTH_DSP_VALUE  
42e0 cd 36 22			call macro_forth_dsp_value 
42e3				endm 
# End of macro FORTH_DSP_VALUE
42e3 eb				ex de,hl 
42e4 18 49			jr .dotwrite 
42e6			 
42e6			.dotnum1: 
42e6 fe 02			cp DS_TYPE_INUM 
42e8 20 44			jr nz, .dotflot 
42ea			 
42ea			 
42ea			; display number 
42ea			 
42ea			;	push hl 
42ea			;	call clear_display 
42ea			;	pop hl 
42ea			 
42ea 5e				ld e, (hl) 
42eb 23				inc hl 
42ec 56				ld d, (hl) 
42ed 21 f6 f0			ld hl, scratch 
42f0			if DEBUG_FORTH_DOT 
42f0				DMARK "DT1" 
42f0 f5				push af  
42f1 3a 05 43			ld a, (.dmark)  
42f4 32 a0 fd			ld (debug_mark),a  
42f7 3a 06 43			ld a, (.dmark+1)  
42fa 32 a1 fd			ld (debug_mark+1),a  
42fd 3a 07 43			ld a, (.dmark+2)  
4300 32 a2 fd			ld (debug_mark+2),a  
4303 18 03			jr .pastdmark  
4305 ..			.dmark: db "DT1"  
4308 f1			.pastdmark: pop af  
4309			endm  
# End of macro DMARK
4309				CALLMONITOR 
4309 cd aa fd			call debug_vector  
430c				endm  
# End of macro CALLMONITOR
430c			endif	 
430c			 
430c cd f3 12			call uitoa_16 
430f eb				ex de,hl 
4310			 
4310			if DEBUG_FORTH_DOT 
4310				DMARK "DT2" 
4310 f5				push af  
4311 3a 25 43			ld a, (.dmark)  
4314 32 a0 fd			ld (debug_mark),a  
4317 3a 26 43			ld a, (.dmark+1)  
431a 32 a1 fd			ld (debug_mark+1),a  
431d 3a 27 43			ld a, (.dmark+2)  
4320 32 a2 fd			ld (debug_mark+2),a  
4323 18 03			jr .pastdmark  
4325 ..			.dmark: db "DT2"  
4328 f1			.pastdmark: pop af  
4329			endm  
# End of macro DMARK
4329				CALLMONITOR 
4329 cd aa fd			call debug_vector  
432c				endm  
# End of macro CALLMONITOR
432c			endif	 
432c			 
432c			;	ld de, os_word_scratch 
432c 18 01			jr .dotwrite 
432e			 
432e 00			.dotflot:   nop 
432f			; TODO print floating point number 
432f			 
432f			.dotwrite:		 
432f			 
432f					; if c is set then set all '-' to spaces 
432f					; need to also take into account .>  
432f			 
432f 3e 01				ld a, 1 
4331 b9					cp c 
4332 20 67				jr nz, .nodashswap 
4334			 
4334					; DE has the string to write, working with HL 
4334			 
4334 06 ff				ld b, 255 
4336 d5					push de 
4337 e1					pop hl 
4338			 
4338			if DEBUG_FORTH_DOT 
4338				DMARK "DT-" 
4338 f5				push af  
4339 3a 4d 43			ld a, (.dmark)  
433c 32 a0 fd			ld (debug_mark),a  
433f 3a 4e 43			ld a, (.dmark+1)  
4342 32 a1 fd			ld (debug_mark+1),a  
4345 3a 4f 43			ld a, (.dmark+2)  
4348 32 a2 fd			ld (debug_mark+2),a  
434b 18 03			jr .pastdmark  
434d ..			.dmark: db "DT-"  
4350 f1			.pastdmark: pop af  
4351			endm  
# End of macro DMARK
4351				CALLMONITOR 
4351 cd aa fd			call debug_vector  
4354				endm  
# End of macro CALLMONITOR
4354			endif	 
4354 7e			.dashscan:	ld a, (hl) 
4355 fe 00				cp 0 
4357 28 42				jr z, .nodashswap 
4359 fe 2d				cp '-' 
435b 20 03				jr nz, .dashskip 
435d 3e 20				ld a, ' ' 
435f 77					ld (hl), a 
4360 23			.dashskip:	inc hl 
4361			if DEBUG_FORTH_DOT 
4361				DMARK "D-2" 
4361 f5				push af  
4362 3a 76 43			ld a, (.dmark)  
4365 32 a0 fd			ld (debug_mark),a  
4368 3a 77 43			ld a, (.dmark+1)  
436b 32 a1 fd			ld (debug_mark+1),a  
436e 3a 78 43			ld a, (.dmark+2)  
4371 32 a2 fd			ld (debug_mark+2),a  
4374 18 03			jr .pastdmark  
4376 ..			.dmark: db "D-2"  
4379 f1			.pastdmark: pop af  
437a			endm  
# End of macro DMARK
437a				CALLMONITOR 
437a cd aa fd			call debug_vector  
437d				endm  
# End of macro CALLMONITOR
437d			endif	 
437d 10 d5				djnz .dashscan 
437f			 
437f			if DEBUG_FORTH_DOT 
437f				DMARK "D-1" 
437f f5				push af  
4380 3a 94 43			ld a, (.dmark)  
4383 32 a0 fd			ld (debug_mark),a  
4386 3a 95 43			ld a, (.dmark+1)  
4389 32 a1 fd			ld (debug_mark+1),a  
438c 3a 96 43			ld a, (.dmark+2)  
438f 32 a2 fd			ld (debug_mark+2),a  
4392 18 03			jr .pastdmark  
4394 ..			.dmark: db "D-1"  
4397 f1			.pastdmark: pop af  
4398			endm  
# End of macro DMARK
4398				CALLMONITOR 
4398 cd aa fd			call debug_vector  
439b				endm  
# End of macro CALLMONITOR
439b			endif	 
439b			 
439b			.nodashswap: 
439b			 
439b			if DEBUG_FORTH_DOT 
439b				DMARK "D-o" 
439b f5				push af  
439c 3a b0 43			ld a, (.dmark)  
439f 32 a0 fd			ld (debug_mark),a  
43a2 3a b1 43			ld a, (.dmark+1)  
43a5 32 a1 fd			ld (debug_mark+1),a  
43a8 3a b2 43			ld a, (.dmark+2)  
43ab 32 a2 fd			ld (debug_mark+2),a  
43ae 18 03			jr .pastdmark  
43b0 ..			.dmark: db "D-o"  
43b3 f1			.pastdmark: pop af  
43b4			endm  
# End of macro DMARK
43b4				CALLMONITOR 
43b4 cd aa fd			call debug_vector  
43b7				endm  
# End of macro CALLMONITOR
43b7			endif	 
43b7			 
43b7 d5					push de   ; save string start in case we need to advance print 
43b8			 
43b8 3a 93 f9				ld a, (f_cursor_ptr) 
43bb cd bd 0d				call str_at_display 
43be 3a 71 f9				ld a,(cli_autodisplay) 
43c1 fe 00				cp 0 
43c3 28 03				jr z, .noupdate 
43c5 cd cd 0d						call update_display 
43c8					.noupdate: 
43c8			 
43c8			 
43c8					; see if we need to advance the print position 
43c8			 
43c8 e1					pop hl   ; get back string 
43c9			;		ex de,hl 
43c9			 
43c9 3a 72 f9				ld a, (cli_mvdot) 
43cc			if DEBUG_FORTH_DOT 
43cc			;		ld e,a 
43cc				DMARK "D>1" 
43cc f5				push af  
43cd 3a e1 43			ld a, (.dmark)  
43d0 32 a0 fd			ld (debug_mark),a  
43d3 3a e2 43			ld a, (.dmark+1)  
43d6 32 a1 fd			ld (debug_mark+1),a  
43d9 3a e3 43			ld a, (.dmark+2)  
43dc 32 a2 fd			ld (debug_mark+2),a  
43df 18 03			jr .pastdmark  
43e1 ..			.dmark: db "D>1"  
43e4 f1			.pastdmark: pop af  
43e5			endm  
# End of macro DMARK
43e5				CALLMONITOR 
43e5 cd aa fd			call debug_vector  
43e8				endm  
# End of macro CALLMONITOR
43e8			endif	 
43e8 fe 00				cp 0 
43ea 28 44				jr z, .noadv 
43ec					; yes, lets advance the print position 
43ec 3e 00				ld a, 0 
43ee cd 4f 13				call strlent 
43f1			if DEBUG_FORTH_DOT 
43f1				DMARK "D-?" 
43f1 f5				push af  
43f2 3a 06 44			ld a, (.dmark)  
43f5 32 a0 fd			ld (debug_mark),a  
43f8 3a 07 44			ld a, (.dmark+1)  
43fb 32 a1 fd			ld (debug_mark+1),a  
43fe 3a 08 44			ld a, (.dmark+2)  
4401 32 a2 fd			ld (debug_mark+2),a  
4404 18 03			jr .pastdmark  
4406 ..			.dmark: db "D-?"  
4409 f1			.pastdmark: pop af  
440a			endm  
# End of macro DMARK
440a				CALLMONITOR 
440a cd aa fd			call debug_vector  
440d				endm  
# End of macro CALLMONITOR
440d			endif	 
440d 3a 93 f9				ld a, (f_cursor_ptr) 
4410 85					add a,l 
4411					;call addatohl 
4411					;ld a, l 
4411 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
4414			 
4414			if DEBUG_FORTH_DOT 
4414				DMARK "D->" 
4414 f5				push af  
4415 3a 29 44			ld a, (.dmark)  
4418 32 a0 fd			ld (debug_mark),a  
441b 3a 2a 44			ld a, (.dmark+1)  
441e 32 a1 fd			ld (debug_mark+1),a  
4421 3a 2b 44			ld a, (.dmark+2)  
4424 32 a2 fd			ld (debug_mark+2),a  
4427 18 03			jr .pastdmark  
4429 ..			.dmark: db "D->"  
442c f1			.pastdmark: pop af  
442d			endm  
# End of macro DMARK
442d				CALLMONITOR 
442d cd aa fd			call debug_vector  
4430				endm  
# End of macro CALLMONITOR
4430			endif	 
4430			 
4430			.noadv:	 
4430			 
4430					if DEBUG_FORTH_DOT_WAIT 
4430							call next_page_prompt 
4430					endif	 
4430			; TODO this pop off the stack causes a crash. i dont know why 
4430			 
4430			 
4430			if DEBUG_FORTH_DOT 
4430				DMARK "DTh" 
4430 f5				push af  
4431 3a 45 44			ld a, (.dmark)  
4434 32 a0 fd			ld (debug_mark),a  
4437 3a 46 44			ld a, (.dmark+1)  
443a 32 a1 fd			ld (debug_mark+1),a  
443d 3a 47 44			ld a, (.dmark+2)  
4440 32 a2 fd			ld (debug_mark+2),a  
4443 18 03			jr .pastdmark  
4445 ..			.dmark: db "DTh"  
4448 f1			.pastdmark: pop af  
4449			endm  
# End of macro DMARK
4449				CALLMONITOR 
4449 cd aa fd			call debug_vector  
444c				endm  
# End of macro CALLMONITOR
444c			endif	 
444c			 
444c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
444c cd 05 23			call macro_forth_dsp_pop 
444f				endm 
# End of macro FORTH_DSP_POP
444f			 
444f			if DEBUG_FORTH_DOT 
444f				DMARK "DTi" 
444f f5				push af  
4450 3a 64 44			ld a, (.dmark)  
4453 32 a0 fd			ld (debug_mark),a  
4456 3a 65 44			ld a, (.dmark+1)  
4459 32 a1 fd			ld (debug_mark+1),a  
445c 3a 66 44			ld a, (.dmark+2)  
445f 32 a2 fd			ld (debug_mark+2),a  
4462 18 03			jr .pastdmark  
4464 ..			.dmark: db "DTi"  
4467 f1			.pastdmark: pop af  
4468			endm  
# End of macro DMARK
4468				CALLMONITOR 
4468 cd aa fd			call debug_vector  
446b				endm  
# End of macro CALLMONITOR
446b			endif	 
446b			 
446b			 
446b					NEXTW 
446b c3 38 24			jp macro_next 
446e				endm 
# End of macro NEXTW
446e			 
446e			.CLS: 
446e				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
446e 35				db WORD_SYS_CORE+33             
446f 9b 44			dw .DRAW            
4471 04				db 3 + 1 
4472 .. 00			db "CLS",0              
4476				endm 
# End of macro CWHEAD
4476			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
4476					if DEBUG_FORTH_WORDS_KEY 
4476						DMARK "CLS" 
4476 f5				push af  
4477 3a 8b 44			ld a, (.dmark)  
447a 32 a0 fd			ld (debug_mark),a  
447d 3a 8c 44			ld a, (.dmark+1)  
4480 32 a1 fd			ld (debug_mark+1),a  
4483 3a 8d 44			ld a, (.dmark+2)  
4486 32 a2 fd			ld (debug_mark+2),a  
4489 18 03			jr .pastdmark  
448b ..			.dmark: db "CLS"  
448e f1			.pastdmark: pop af  
448f			endm  
# End of macro DMARK
448f						CALLMONITOR 
448f cd aa fd			call debug_vector  
4492				endm  
# End of macro CALLMONITOR
4492					endif 
4492 cd aa 0d				call clear_display 
4495 c3 a9 45				jp .home		; and home cursor 
4498					NEXTW 
4498 c3 38 24			jp macro_next 
449b				endm 
# End of macro NEXTW
449b			 
449b			.DRAW: 
449b				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
449b 36				db WORD_SYS_CORE+34             
449c c6 44			dw .DUMP            
449e 05				db 4 + 1 
449f .. 00			db "DRAW",0              
44a4				endm 
# End of macro CWHEAD
44a4			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
44a4					if DEBUG_FORTH_WORDS_KEY 
44a4						DMARK "DRW" 
44a4 f5				push af  
44a5 3a b9 44			ld a, (.dmark)  
44a8 32 a0 fd			ld (debug_mark),a  
44ab 3a ba 44			ld a, (.dmark+1)  
44ae 32 a1 fd			ld (debug_mark+1),a  
44b1 3a bb 44			ld a, (.dmark+2)  
44b4 32 a2 fd			ld (debug_mark+2),a  
44b7 18 03			jr .pastdmark  
44b9 ..			.dmark: db "DRW"  
44bc f1			.pastdmark: pop af  
44bd			endm  
# End of macro DMARK
44bd						CALLMONITOR 
44bd cd aa fd			call debug_vector  
44c0				endm  
# End of macro CALLMONITOR
44c0					endif 
44c0 cd cd 0d				call update_display 
44c3					NEXTW 
44c3 c3 38 24			jp macro_next 
44c6				endm 
# End of macro NEXTW
44c6			 
44c6			.DUMP: 
44c6				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
44c6 37				db WORD_SYS_CORE+35             
44c7 fe 44			dw .CDUMP            
44c9 05				db 4 + 1 
44ca .. 00			db "DUMP",0              
44cf				endm 
# End of macro CWHEAD
44cf			; | DUMP ( x -- ) With address x display dump   | DONE 
44cf			; TODO pop address to use off of the stack 
44cf					if DEBUG_FORTH_WORDS_KEY 
44cf						DMARK "DUM" 
44cf f5				push af  
44d0 3a e4 44			ld a, (.dmark)  
44d3 32 a0 fd			ld (debug_mark),a  
44d6 3a e5 44			ld a, (.dmark+1)  
44d9 32 a1 fd			ld (debug_mark+1),a  
44dc 3a e6 44			ld a, (.dmark+2)  
44df 32 a2 fd			ld (debug_mark+2),a  
44e2 18 03			jr .pastdmark  
44e4 ..			.dmark: db "DUM"  
44e7 f1			.pastdmark: pop af  
44e8			endm  
# End of macro DMARK
44e8						CALLMONITOR 
44e8 cd aa fd			call debug_vector  
44eb				endm  
# End of macro CALLMONITOR
44eb					endif 
44eb cd aa 0d				call clear_display 
44ee			 
44ee					; get address 
44ee			 
44ee					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
44ee cd 4d 22			call macro_dsp_valuehl 
44f1				endm 
# End of macro FORTH_DSP_VALUEHL
44f1				 
44f1					; save it for cdump 
44f1			 
44f1 22 19 f4				ld (os_cur_ptr),hl 
44f4			 
44f4					; destroy value TOS 
44f4			 
44f4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44f4 cd 05 23			call macro_forth_dsp_pop 
44f7				endm 
# End of macro FORTH_DSP_POP
44f7			 
44f7 cd c8 1e				call dumpcont	; skip old style of param parsing	 
44fa c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
44fb					NEXTW 
44fb c3 38 24			jp macro_next 
44fe				endm 
# End of macro NEXTW
44fe			.CDUMP: 
44fe				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
44fe 38				db WORD_SYS_CORE+36             
44ff 2e 45			dw .DAT            
4501 06				db 5 + 1 
4502 .. 00			db "CDUMP",0              
4508				endm 
# End of macro CWHEAD
4508			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
4508					if DEBUG_FORTH_WORDS_KEY 
4508						DMARK "CDP" 
4508 f5				push af  
4509 3a 1d 45			ld a, (.dmark)  
450c 32 a0 fd			ld (debug_mark),a  
450f 3a 1e 45			ld a, (.dmark+1)  
4512 32 a1 fd			ld (debug_mark+1),a  
4515 3a 1f 45			ld a, (.dmark+2)  
4518 32 a2 fd			ld (debug_mark+2),a  
451b 18 03			jr .pastdmark  
451d ..			.dmark: db "CDP"  
4520 f1			.pastdmark: pop af  
4521			endm  
# End of macro DMARK
4521						CALLMONITOR 
4521 cd aa fd			call debug_vector  
4524				endm  
# End of macro CALLMONITOR
4524					endif 
4524 cd aa 0d				call clear_display 
4527 cd c8 1e				call dumpcont	 
452a c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
452b					NEXTW 
452b c3 38 24			jp macro_next 
452e				endm 
# End of macro NEXTW
452e			 
452e			 
452e			 
452e			 
452e			.DAT: 
452e				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
452e 3d				db WORD_SYS_CORE+41             
452f 84 45			dw .HOME            
4531 03				db 2 + 1 
4532 .. 00			db "AT",0              
4535				endm 
# End of macro CWHEAD
4535			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
4535					if DEBUG_FORTH_WORDS_KEY 
4535						DMARK "AT." 
4535 f5				push af  
4536 3a 4a 45			ld a, (.dmark)  
4539 32 a0 fd			ld (debug_mark),a  
453c 3a 4b 45			ld a, (.dmark+1)  
453f 32 a1 fd			ld (debug_mark+1),a  
4542 3a 4c 45			ld a, (.dmark+2)  
4545 32 a2 fd			ld (debug_mark+2),a  
4548 18 03			jr .pastdmark  
454a ..			.dmark: db "AT."  
454d f1			.pastdmark: pop af  
454e			endm  
# End of macro DMARK
454e						CALLMONITOR 
454e cd aa fd			call debug_vector  
4551				endm  
# End of macro CALLMONITOR
4551					endif 
4551					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4551 cd 4d 22			call macro_dsp_valuehl 
4554				endm 
# End of macro FORTH_DSP_VALUEHL
4554			 
4554			 
4554					; TODO save cursor row 
4554 7d					ld a,l 
4555 fe 02				cp 2 
4557 20 04				jr nz, .crow3 
4559 3e 28				ld a, display_row_2 
455b 18 12				jr .ccol1 
455d fe 03		.crow3:		cp 3 
455f 20 04				jr nz, .crow4 
4561 3e 50				ld a, display_row_3 
4563 18 0a				jr .ccol1 
4565 fe 04		.crow4:		cp 4 
4567 20 04				jr nz, .crow1 
4569 3e 78				ld a, display_row_4 
456b 18 02				jr .ccol1 
456d 3e 00		.crow1:		ld a,display_row_1 
456f f5			.ccol1:		push af			; got row offset 
4570 6f					ld l,a 
4571 26 00				ld h,0 
4573					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4573 cd 05 23			call macro_forth_dsp_pop 
4576				endm 
# End of macro FORTH_DSP_POP
4576					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4576 cd 4d 22			call macro_dsp_valuehl 
4579				endm 
# End of macro FORTH_DSP_VALUEHL
4579					; TODO save cursor col 
4579 f1					pop af 
457a 85					add l		; add col offset 
457b 32 93 f9				ld (f_cursor_ptr), a 
457e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
457e cd 05 23			call macro_forth_dsp_pop 
4581				endm 
# End of macro FORTH_DSP_POP
4581			 
4581					; calculate  
4581			 
4581					NEXTW 
4581 c3 38 24			jp macro_next 
4584				endm 
# End of macro NEXTW
4584			 
4584			 
4584			.HOME: 
4584				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
4584 41				db WORD_SYS_CORE+45             
4585 b1 45			dw .CR            
4587 05				db 4 + 1 
4588 .. 00			db "HOME",0              
458d				endm 
# End of macro CWHEAD
458d			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
458d					if DEBUG_FORTH_WORDS_KEY 
458d						DMARK "HOM" 
458d f5				push af  
458e 3a a2 45			ld a, (.dmark)  
4591 32 a0 fd			ld (debug_mark),a  
4594 3a a3 45			ld a, (.dmark+1)  
4597 32 a1 fd			ld (debug_mark+1),a  
459a 3a a4 45			ld a, (.dmark+2)  
459d 32 a2 fd			ld (debug_mark+2),a  
45a0 18 03			jr .pastdmark  
45a2 ..			.dmark: db "HOM"  
45a5 f1			.pastdmark: pop af  
45a6			endm  
# End of macro DMARK
45a6						CALLMONITOR 
45a6 cd aa fd			call debug_vector  
45a9				endm  
# End of macro CALLMONITOR
45a9					endif 
45a9 3e 00		.home:		ld a, 0		; and home cursor 
45ab 32 93 f9				ld (f_cursor_ptr), a 
45ae					NEXTW 
45ae c3 38 24			jp macro_next 
45b1				endm 
# End of macro NEXTW
45b1			 
45b1			 
45b1			.CR: 
45b1				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
45b1 46				db WORD_SYS_CORE+50             
45b2 ec 45			dw .SPACE            
45b4 03				db 2 + 1 
45b5 .. 00			db "CR",0              
45b8				endm 
# End of macro CWHEAD
45b8			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
45b8					if DEBUG_FORTH_WORDS_KEY 
45b8						DMARK "CR." 
45b8 f5				push af  
45b9 3a cd 45			ld a, (.dmark)  
45bc 32 a0 fd			ld (debug_mark),a  
45bf 3a ce 45			ld a, (.dmark+1)  
45c2 32 a1 fd			ld (debug_mark+1),a  
45c5 3a cf 45			ld a, (.dmark+2)  
45c8 32 a2 fd			ld (debug_mark+2),a  
45cb 18 03			jr .pastdmark  
45cd ..			.dmark: db "CR."  
45d0 f1			.pastdmark: pop af  
45d1			endm  
# End of macro DMARK
45d1						CALLMONITOR 
45d1 cd aa fd			call debug_vector  
45d4				endm  
# End of macro CALLMONITOR
45d4					endif 
45d4 3e 0d				ld a, 13 
45d6 32 f6 f0				ld (scratch),a 
45d9 3e 0a				ld a, 10 
45db 32 f7 f0				ld (scratch+1),a 
45de 3e 00				ld a, 0 
45e0 32 f8 f0				ld (scratch+2),a 
45e3 21 f6 f0				ld hl, scratch 
45e6 cd b6 20				call forth_push_str 
45e9					 
45e9				       NEXTW 
45e9 c3 38 24			jp macro_next 
45ec				endm 
# End of macro NEXTW
45ec			.SPACE: 
45ec				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
45ec 46				db WORD_SYS_CORE+50             
45ed 22 46			dw .SPACES            
45ef 03				db 2 + 1 
45f0 .. 00			db "BL",0              
45f3				endm 
# End of macro CWHEAD
45f3			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
45f3					if DEBUG_FORTH_WORDS_KEY 
45f3						DMARK "BL." 
45f3 f5				push af  
45f4 3a 08 46			ld a, (.dmark)  
45f7 32 a0 fd			ld (debug_mark),a  
45fa 3a 09 46			ld a, (.dmark+1)  
45fd 32 a1 fd			ld (debug_mark+1),a  
4600 3a 0a 46			ld a, (.dmark+2)  
4603 32 a2 fd			ld (debug_mark+2),a  
4606 18 03			jr .pastdmark  
4608 ..			.dmark: db "BL."  
460b f1			.pastdmark: pop af  
460c			endm  
# End of macro DMARK
460c						CALLMONITOR 
460c cd aa fd			call debug_vector  
460f				endm  
# End of macro CALLMONITOR
460f					endif 
460f 3e 20				ld a, " " 
4611 32 f6 f0				ld (scratch),a 
4614 3e 00				ld a, 0 
4616 32 f7 f0				ld (scratch+1),a 
4619 21 f6 f0				ld hl, scratch 
461c cd b6 20				call forth_push_str 
461f					 
461f				       NEXTW 
461f c3 38 24			jp macro_next 
4622				endm 
# End of macro NEXTW
4622			 
4622			;.blstr: db " ", 0 
4622			 
4622			.SPACES: 
4622				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
4622 47				db WORD_SYS_CORE+51             
4623 bd 46			dw .SCROLL            
4625 07				db 6 + 1 
4626 .. 00			db "SPACES",0              
462d				endm 
# End of macro CWHEAD
462d			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
462d					if DEBUG_FORTH_WORDS_KEY 
462d						DMARK "SPS" 
462d f5				push af  
462e 3a 42 46			ld a, (.dmark)  
4631 32 a0 fd			ld (debug_mark),a  
4634 3a 43 46			ld a, (.dmark+1)  
4637 32 a1 fd			ld (debug_mark+1),a  
463a 3a 44 46			ld a, (.dmark+2)  
463d 32 a2 fd			ld (debug_mark+2),a  
4640 18 03			jr .pastdmark  
4642 ..			.dmark: db "SPS"  
4645 f1			.pastdmark: pop af  
4646			endm  
# End of macro DMARK
4646						CALLMONITOR 
4646 cd aa fd			call debug_vector  
4649				endm  
# End of macro CALLMONITOR
4649					endif 
4649			 
4649			 
4649					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4649 cd 4d 22			call macro_dsp_valuehl 
464c				endm 
# End of macro FORTH_DSP_VALUEHL
464c			 
464c e5					push hl    ; u 
464d					if DEBUG_FORTH_WORDS 
464d						DMARK "SPA" 
464d f5				push af  
464e 3a 62 46			ld a, (.dmark)  
4651 32 a0 fd			ld (debug_mark),a  
4654 3a 63 46			ld a, (.dmark+1)  
4657 32 a1 fd			ld (debug_mark+1),a  
465a 3a 64 46			ld a, (.dmark+2)  
465d 32 a2 fd			ld (debug_mark+2),a  
4660 18 03			jr .pastdmark  
4662 ..			.dmark: db "SPA"  
4665 f1			.pastdmark: pop af  
4666			endm  
# End of macro DMARK
4666						CALLMONITOR 
4666 cd aa fd			call debug_vector  
4669				endm  
# End of macro CALLMONITOR
4669					endif 
4669			 
4669					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4669 cd 05 23			call macro_forth_dsp_pop 
466c				endm 
# End of macro FORTH_DSP_POP
466c e1					pop hl 
466d 0e 00				ld c, 0 
466f 45					ld b, l 
4670 21 f6 f0				ld hl, scratch  
4673			 
4673					if DEBUG_FORTH_WORDS 
4673						DMARK "SP2" 
4673 f5				push af  
4674 3a 88 46			ld a, (.dmark)  
4677 32 a0 fd			ld (debug_mark),a  
467a 3a 89 46			ld a, (.dmark+1)  
467d 32 a1 fd			ld (debug_mark+1),a  
4680 3a 8a 46			ld a, (.dmark+2)  
4683 32 a2 fd			ld (debug_mark+2),a  
4686 18 03			jr .pastdmark  
4688 ..			.dmark: db "SP2"  
468b f1			.pastdmark: pop af  
468c			endm  
# End of macro DMARK
468c						CALLMONITOR 
468c cd aa fd			call debug_vector  
468f				endm  
# End of macro CALLMONITOR
468f					endif 
468f 3e 20				ld a, ' ' 
4691			.spaces1:	 
4691 77					ld (hl),a 
4692 23					inc hl 
4693					 
4693 10 fc				djnz .spaces1 
4695 3e 00				ld a,0 
4697 77					ld (hl),a 
4698 21 f6 f0				ld hl, scratch 
469b					if DEBUG_FORTH_WORDS 
469b						DMARK "SP3" 
469b f5				push af  
469c 3a b0 46			ld a, (.dmark)  
469f 32 a0 fd			ld (debug_mark),a  
46a2 3a b1 46			ld a, (.dmark+1)  
46a5 32 a1 fd			ld (debug_mark+1),a  
46a8 3a b2 46			ld a, (.dmark+2)  
46ab 32 a2 fd			ld (debug_mark+2),a  
46ae 18 03			jr .pastdmark  
46b0 ..			.dmark: db "SP3"  
46b3 f1			.pastdmark: pop af  
46b4			endm  
# End of macro DMARK
46b4						CALLMONITOR 
46b4 cd aa fd			call debug_vector  
46b7				endm  
# End of macro CALLMONITOR
46b7					endif 
46b7 cd b6 20				call forth_push_str 
46ba			 
46ba				       NEXTW 
46ba c3 38 24			jp macro_next 
46bd				endm 
# End of macro NEXTW
46bd			 
46bd			 
46bd			 
46bd			.SCROLL: 
46bd				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
46bd 53				db WORD_SYS_CORE+63             
46be ea 46			dw .SCROLLD            
46c0 07				db 6 + 1 
46c1 .. 00			db "SCROLL",0              
46c8				endm 
# End of macro CWHEAD
46c8			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
46c8					if DEBUG_FORTH_WORDS_KEY 
46c8						DMARK "SCR" 
46c8 f5				push af  
46c9 3a dd 46			ld a, (.dmark)  
46cc 32 a0 fd			ld (debug_mark),a  
46cf 3a de 46			ld a, (.dmark+1)  
46d2 32 a1 fd			ld (debug_mark+1),a  
46d5 3a df 46			ld a, (.dmark+2)  
46d8 32 a2 fd			ld (debug_mark+2),a  
46db 18 03			jr .pastdmark  
46dd ..			.dmark: db "SCR"  
46e0 f1			.pastdmark: pop af  
46e1			endm  
# End of macro DMARK
46e1						CALLMONITOR 
46e1 cd aa fd			call debug_vector  
46e4				endm  
# End of macro CALLMONITOR
46e4					endif 
46e4			 
46e4 cd 6c 0d			call scroll_up 
46e7			;	call update_display 
46e7			 
46e7					NEXTW 
46e7 c3 38 24			jp macro_next 
46ea				endm 
# End of macro NEXTW
46ea			 
46ea			 
46ea			 
46ea			;		; get dir 
46ea			; 
46ea			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
46ea			; 
46ea			;		push hl 
46ea			; 
46ea			;		; destroy value TOS 
46ea			; 
46ea			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
46ea			; 
46ea			;		; get count 
46ea			; 
46ea			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
46ea			; 
46ea			;		push hl 
46ea			; 
46ea			;		; destroy value TOS 
46ea			; 
46ea			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
46ea			; 
46ea			;		; one value on hl get other one back 
46ea			; 
46ea			;		pop bc    ; count 
46ea			; 
46ea			;		pop de   ; dir 
46ea			; 
46ea			; 
46ea			;		ld b, c 
46ea			; 
46ea			;.scrolldir:     push bc 
46ea			;		push de 
46ea			; 
46ea			;		ld a, 0 
46ea			;		cp e 
46ea			;		jr z, .scrollup  
46ea			;		call scroll_down 
46ea			;		jr .scrollnext 
46ea			;.scrollup:	call scroll_up 
46ea			; 
46ea			;		 
46ea			;.scrollnext: 
46ea			;		pop de 
46ea			;		pop bc 
46ea			;		djnz .scrolldir 
46ea			; 
46ea			; 
46ea			; 
46ea			; 
46ea			; 
46ea			;		NEXTW 
46ea			 
46ea			.SCROLLD: 
46ea				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
46ea 53				db WORD_SYS_CORE+63             
46eb 18 47			dw .ATQ            
46ed 08				db 7 + 1 
46ee .. 00			db "SCROLLD",0              
46f6				endm 
# End of macro CWHEAD
46f6			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
46f6					if DEBUG_FORTH_WORDS_KEY 
46f6						DMARK "SCD" 
46f6 f5				push af  
46f7 3a 0b 47			ld a, (.dmark)  
46fa 32 a0 fd			ld (debug_mark),a  
46fd 3a 0c 47			ld a, (.dmark+1)  
4700 32 a1 fd			ld (debug_mark+1),a  
4703 3a 0d 47			ld a, (.dmark+2)  
4706 32 a2 fd			ld (debug_mark+2),a  
4709 18 03			jr .pastdmark  
470b ..			.dmark: db "SCD"  
470e f1			.pastdmark: pop af  
470f			endm  
# End of macro DMARK
470f						CALLMONITOR 
470f cd aa fd			call debug_vector  
4712				endm  
# End of macro CALLMONITOR
4712					endif 
4712			 
4712 cd 90 0d			call scroll_down 
4715			;	call update_display 
4715			 
4715					NEXTW 
4715 c3 38 24			jp macro_next 
4718				endm 
# End of macro NEXTW
4718			 
4718			 
4718			.ATQ: 
4718				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4718 62				db WORD_SYS_CORE+78             
4719 76 47			dw .AUTODSP            
471b 04				db 3 + 1 
471c .. 00			db "AT@",0              
4720				endm 
# End of macro CWHEAD
4720			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
4720					if DEBUG_FORTH_WORDS_KEY 
4720						DMARK "ATA" 
4720 f5				push af  
4721 3a 35 47			ld a, (.dmark)  
4724 32 a0 fd			ld (debug_mark),a  
4727 3a 36 47			ld a, (.dmark+1)  
472a 32 a1 fd			ld (debug_mark+1),a  
472d 3a 37 47			ld a, (.dmark+2)  
4730 32 a2 fd			ld (debug_mark+2),a  
4733 18 03			jr .pastdmark  
4735 ..			.dmark: db "ATA"  
4738 f1			.pastdmark: pop af  
4739			endm  
# End of macro DMARK
4739						CALLMONITOR 
4739 cd aa fd			call debug_vector  
473c				endm  
# End of macro CALLMONITOR
473c					endif 
473c			 
473c			 
473c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
473c cd 4d 22			call macro_dsp_valuehl 
473f				endm 
# End of macro FORTH_DSP_VALUEHL
473f			 
473f					; TODO save cursor row 
473f 7d					ld a,l 
4740 fe 02				cp 2 
4742 20 04				jr nz, .crow3aq 
4744 3e 28				ld a, display_row_2 
4746 18 12				jr .ccol1aq 
4748 fe 03		.crow3aq:		cp 3 
474a 20 04				jr nz, .crow4aq 
474c 3e 50				ld a, display_row_3 
474e 18 0a				jr .ccol1aq 
4750 fe 04		.crow4aq:		cp 4 
4752 20 04				jr nz, .crow1aq 
4754 3e 78				ld a, display_row_4 
4756 18 02				jr .ccol1aq 
4758 3e 00		.crow1aq:		ld a,display_row_1 
475a f5			.ccol1aq:		push af			; got row offset 
475b 6f					ld l,a 
475c 26 00				ld h,0 
475e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
475e cd 05 23			call macro_forth_dsp_pop 
4761				endm 
# End of macro FORTH_DSP_POP
4761					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4761 cd 4d 22			call macro_dsp_valuehl 
4764				endm 
# End of macro FORTH_DSP_VALUEHL
4764					; TODO save cursor col 
4764 f1					pop af 
4765 85					add l		; add col offset 
4766			 
4766					; add current frame buffer address 
4766 2a 01 fb				ld hl, (display_fb_active) 
4769 cd de 0f				call addatohl 
476c			 
476c			 
476c			 
476c			 
476c					; get char frame buffer location offset in hl 
476c			 
476c 7e					ld a,(hl) 
476d 26 00				ld h, 0 
476f 6f					ld l, a 
4770			 
4770 cd 48 20				call forth_push_numhl 
4773			 
4773			 
4773					NEXTW 
4773 c3 38 24			jp macro_next 
4776				endm 
# End of macro NEXTW
4776			 
4776			.AUTODSP: 
4776				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
4776 63				db WORD_SYS_CORE+79             
4777 8c 47			dw .MENU            
4779 05				db 4 + 1 
477a .. 00			db "ADSP",0              
477f				endm 
# End of macro CWHEAD
477f			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
477f			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
477f			 
477f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
477f cd 4d 22			call macro_dsp_valuehl 
4782				endm 
# End of macro FORTH_DSP_VALUEHL
4782			 
4782			;		push hl 
4782			 
4782					; destroy value TOS 
4782			 
4782					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4782 cd 05 23			call macro_forth_dsp_pop 
4785				endm 
# End of macro FORTH_DSP_POP
4785			 
4785			;		pop hl 
4785			 
4785 7d					ld a,l 
4786 32 71 f9				ld (cli_autodisplay), a 
4789				       NEXTW 
4789 c3 38 24			jp macro_next 
478c				endm 
# End of macro NEXTW
478c			 
478c			.MENU: 
478c				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
478c 70				db WORD_SYS_CORE+92             
478d 35 48			dw .ENDDISPLAY            
478f 05				db 4 + 1 
4790 .. 00			db "MENU",0              
4795				endm 
# End of macro CWHEAD
4795			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
4795			 
4795			;		; get number of items on the stack 
4795			; 
4795				 
4795					FORTH_DSP_VALUEHL 
4795 cd 4d 22			call macro_dsp_valuehl 
4798				endm 
# End of macro FORTH_DSP_VALUEHL
4798				 
4798					if DEBUG_FORTH_WORDS_KEY 
4798						DMARK "MNU" 
4798 f5				push af  
4799 3a ad 47			ld a, (.dmark)  
479c 32 a0 fd			ld (debug_mark),a  
479f 3a ae 47			ld a, (.dmark+1)  
47a2 32 a1 fd			ld (debug_mark+1),a  
47a5 3a af 47			ld a, (.dmark+2)  
47a8 32 a2 fd			ld (debug_mark+2),a  
47ab 18 03			jr .pastdmark  
47ad ..			.dmark: db "MNU"  
47b0 f1			.pastdmark: pop af  
47b1			endm  
# End of macro DMARK
47b1						CALLMONITOR 
47b1 cd aa fd			call debug_vector  
47b4				endm  
# End of macro CALLMONITOR
47b4					endif 
47b4			 
47b4 45					ld b, l	 
47b5 05					dec b 
47b6			 
47b6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
47b6 cd 05 23			call macro_forth_dsp_pop 
47b9				endm 
# End of macro FORTH_DSP_POP
47b9			 
47b9			 
47b9					; go directly through the stack to pluck out the string pointers and build an array 
47b9			 
47b9			;		FORTH_DSP 
47b9			 
47b9					; hl contains top most stack item 
47b9				 
47b9 11 f6 f0				ld de, scratch 
47bc			 
47bc			.mbuild: 
47bc			 
47bc					FORTH_DSP_VALUEHL 
47bc cd 4d 22			call macro_dsp_valuehl 
47bf				endm 
# End of macro FORTH_DSP_VALUEHL
47bf			 
47bf					if DEBUG_FORTH_WORDS 
47bf						DMARK "MN3" 
47bf f5				push af  
47c0 3a d4 47			ld a, (.dmark)  
47c3 32 a0 fd			ld (debug_mark),a  
47c6 3a d5 47			ld a, (.dmark+1)  
47c9 32 a1 fd			ld (debug_mark+1),a  
47cc 3a d6 47			ld a, (.dmark+2)  
47cf 32 a2 fd			ld (debug_mark+2),a  
47d2 18 03			jr .pastdmark  
47d4 ..			.dmark: db "MN3"  
47d7 f1			.pastdmark: pop af  
47d8			endm  
# End of macro DMARK
47d8						CALLMONITOR 
47d8 cd aa fd			call debug_vector  
47db				endm  
# End of macro CALLMONITOR
47db					endif 
47db eb					ex de, hl 
47dc 73					ld (hl), e 
47dd 23					inc hl 
47de 72					ld (hl), d 
47df 23					inc hl 
47e0 eb					ex de, hl 
47e1			 
47e1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
47e1 cd 05 23			call macro_forth_dsp_pop 
47e4				endm 
# End of macro FORTH_DSP_POP
47e4			 
47e4 10 d6				djnz .mbuild 
47e6			 
47e6					; done add term 
47e6			 
47e6 eb					ex de, hl 
47e7 36 00				ld (hl), 0 
47e9 23					inc hl 
47ea 36 00				ld (hl), 0 
47ec			 
47ec				 
47ec					 
47ec 21 f6 f0				ld hl, scratch 
47ef			 
47ef					if DEBUG_FORTH_WORDS 
47ef						DMARK "MNx" 
47ef f5				push af  
47f0 3a 04 48			ld a, (.dmark)  
47f3 32 a0 fd			ld (debug_mark),a  
47f6 3a 05 48			ld a, (.dmark+1)  
47f9 32 a1 fd			ld (debug_mark+1),a  
47fc 3a 06 48			ld a, (.dmark+2)  
47ff 32 a2 fd			ld (debug_mark+2),a  
4802 18 03			jr .pastdmark  
4804 ..			.dmark: db "MNx"  
4807 f1			.pastdmark: pop af  
4808			endm  
# End of macro DMARK
4808						CALLMONITOR 
4808 cd aa fd			call debug_vector  
480b				endm  
# End of macro CALLMONITOR
480b					endif 
480b			 
480b			 
480b			 
480b 3e 00				ld a, 0 
480d cd db 0d				call menu 
4810			 
4810			 
4810 6f					ld l, a 
4811 26 00				ld h, 0 
4813			 
4813					if DEBUG_FORTH_WORDS 
4813						DMARK "MNr" 
4813 f5				push af  
4814 3a 28 48			ld a, (.dmark)  
4817 32 a0 fd			ld (debug_mark),a  
481a 3a 29 48			ld a, (.dmark+1)  
481d 32 a1 fd			ld (debug_mark+1),a  
4820 3a 2a 48			ld a, (.dmark+2)  
4823 32 a2 fd			ld (debug_mark+2),a  
4826 18 03			jr .pastdmark  
4828 ..			.dmark: db "MNr"  
482b f1			.pastdmark: pop af  
482c			endm  
# End of macro DMARK
482c						CALLMONITOR 
482c cd aa fd			call debug_vector  
482f				endm  
# End of macro CALLMONITOR
482f					endif 
482f			 
482f cd 48 20				call forth_push_numhl 
4832			 
4832			 
4832			 
4832			 
4832				       NEXTW 
4832 c3 38 24			jp macro_next 
4835				endm 
# End of macro NEXTW
4835			 
4835			 
4835			.ENDDISPLAY: 
4835			 
4835			; eof 
# End of file forth_words_display.asm
4835			include "forth_words_str.asm" 
4835			 
4835			; | ## String Words 
4835			 
4835			.SPLIT:   
4835			 
4835				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
4835 48				db WORD_SYS_CORE+52             
4836 2a 49			dw .PTR            
4838 06				db 5 + 1 
4839 .. 00			db "SPLIT",0              
483f				endm 
# End of macro CWHEAD
483f			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
483f					if DEBUG_FORTH_WORDS_KEY 
483f						DMARK "SPT" 
483f f5				push af  
4840 3a 54 48			ld a, (.dmark)  
4843 32 a0 fd			ld (debug_mark),a  
4846 3a 55 48			ld a, (.dmark+1)  
4849 32 a1 fd			ld (debug_mark+1),a  
484c 3a 56 48			ld a, (.dmark+2)  
484f 32 a2 fd			ld (debug_mark+2),a  
4852 18 03			jr .pastdmark  
4854 ..			.dmark: db "SPT"  
4857 f1			.pastdmark: pop af  
4858			endm  
# End of macro DMARK
4858						CALLMONITOR 
4858 cd aa fd			call debug_vector  
485b				endm  
# End of macro CALLMONITOR
485b					endif 
485b			 
485b					; get delim 
485b					FORTH_DSP_VALUEHL 
485b cd 4d 22			call macro_dsp_valuehl 
485e				endm 
# End of macro FORTH_DSP_VALUEHL
485e			 
485e					FORTH_DSP_POP 
485e cd 05 23			call macro_forth_dsp_pop 
4861				endm 
# End of macro FORTH_DSP_POP
4861					 
4861			 
4861 45					ld b, l    ; move delim to b 
4862 0e 01				ld c, 1   ; count of poritions 
4864			 
4864 c5					push bc 
4865			 
4865					if DEBUG_FORTH_WORDS 
4865						DMARK "SPa" 
4865 f5				push af  
4866 3a 7a 48			ld a, (.dmark)  
4869 32 a0 fd			ld (debug_mark),a  
486c 3a 7b 48			ld a, (.dmark+1)  
486f 32 a1 fd			ld (debug_mark+1),a  
4872 3a 7c 48			ld a, (.dmark+2)  
4875 32 a2 fd			ld (debug_mark+2),a  
4878 18 03			jr .pastdmark  
487a ..			.dmark: db "SPa"  
487d f1			.pastdmark: pop af  
487e			endm  
# End of macro DMARK
487e						CALLMONITOR 
487e cd aa fd			call debug_vector  
4881				endm  
# End of macro CALLMONITOR
4881					endif 
4881					; get pointer to string to chop up 
4881					FORTH_DSP_VALUEHL 
4881 cd 4d 22			call macro_dsp_valuehl 
4884				endm 
# End of macro FORTH_DSP_VALUEHL
4884			 
4884			;		push hl 
4884 11 f6 f0				ld de, scratch 
4887			.spllop: 
4887 c1					pop bc 
4888 c5					push bc 
4889			;		pop hl 
4889					if DEBUG_FORTH_WORDS 
4889						DMARK "SPl" 
4889 f5				push af  
488a 3a 9e 48			ld a, (.dmark)  
488d 32 a0 fd			ld (debug_mark),a  
4890 3a 9f 48			ld a, (.dmark+1)  
4893 32 a1 fd			ld (debug_mark+1),a  
4896 3a a0 48			ld a, (.dmark+2)  
4899 32 a2 fd			ld (debug_mark+2),a  
489c 18 03			jr .pastdmark  
489e ..			.dmark: db "SPl"  
48a1 f1			.pastdmark: pop af  
48a2			endm  
# End of macro DMARK
48a2						CALLMONITOR 
48a2 cd aa fd			call debug_vector  
48a5				endm  
# End of macro CALLMONITOR
48a5					endif 
48a5 7e					ld a, (hl) 
48a6 b8					cp b 
48a7 28 08				jr z, .splnxt 
48a9 fe 00				cp 0 
48ab 28 34				jr z, .splend 
48ad ed a0				ldi 
48af 18 d6				jr .spllop 
48b1			 
48b1					; hit dlim 
48b1			 
48b1			.splnxt: 
48b1					if DEBUG_FORTH_WORDS 
48b1						DMARK "SPx" 
48b1 f5				push af  
48b2 3a c6 48			ld a, (.dmark)  
48b5 32 a0 fd			ld (debug_mark),a  
48b8 3a c7 48			ld a, (.dmark+1)  
48bb 32 a1 fd			ld (debug_mark+1),a  
48be 3a c8 48			ld a, (.dmark+2)  
48c1 32 a2 fd			ld (debug_mark+2),a  
48c4 18 03			jr .pastdmark  
48c6 ..			.dmark: db "SPx"  
48c9 f1			.pastdmark: pop af  
48ca			endm  
# End of macro DMARK
48ca						CALLMONITOR 
48ca cd aa fd			call debug_vector  
48cd				endm  
# End of macro CALLMONITOR
48cd					endif 
48cd 3e 00				ld a, 0 
48cf 12					ld (de), a 
48d0					;ex de, hl 
48d0 e5					push hl 
48d1 21 f6 f0				ld hl, scratch 
48d4 cd b6 20				call forth_push_str 
48d7 e1					pop hl 
48d8					;ex de, hl 
48d8 23					inc hl 
48d9 c1					pop bc 
48da 0c					inc c 
48db c5					push bc 
48dc 11 f6 f0				ld de, scratch 
48df 18 a6				jr .spllop 
48e1			 
48e1			.splend:		 
48e1					if DEBUG_FORTH_WORDS 
48e1						DMARK "SPe" 
48e1 f5				push af  
48e2 3a f6 48			ld a, (.dmark)  
48e5 32 a0 fd			ld (debug_mark),a  
48e8 3a f7 48			ld a, (.dmark+1)  
48eb 32 a1 fd			ld (debug_mark+1),a  
48ee 3a f8 48			ld a, (.dmark+2)  
48f1 32 a2 fd			ld (debug_mark+2),a  
48f4 18 03			jr .pastdmark  
48f6 ..			.dmark: db "SPe"  
48f9 f1			.pastdmark: pop af  
48fa			endm  
# End of macro DMARK
48fa						CALLMONITOR 
48fa cd aa fd			call debug_vector  
48fd				endm  
# End of macro CALLMONITOR
48fd					endif 
48fd 12					ld (de), a 
48fe eb					ex de, hl 
48ff			;		push hl 
48ff 21 f6 f0				ld hl, scratch 
4902 cd b6 20				call forth_push_str 
4905					 
4905					if DEBUG_FORTH_WORDS 
4905						DMARK "SPc" 
4905 f5				push af  
4906 3a 1a 49			ld a, (.dmark)  
4909 32 a0 fd			ld (debug_mark),a  
490c 3a 1b 49			ld a, (.dmark+1)  
490f 32 a1 fd			ld (debug_mark+1),a  
4912 3a 1c 49			ld a, (.dmark+2)  
4915 32 a2 fd			ld (debug_mark+2),a  
4918 18 03			jr .pastdmark  
491a ..			.dmark: db "SPc"  
491d f1			.pastdmark: pop af  
491e			endm  
# End of macro DMARK
491e						CALLMONITOR 
491e cd aa fd			call debug_vector  
4921				endm  
# End of macro CALLMONITOR
4921					endif 
4921			 
4921 e1					pop hl    ; get counter from bc which has been push 
4922 26 00				ld h, 0 
4924			;		ld l, c 
4924 cd 48 20				call forth_push_numhl 
4927			 
4927			 
4927				NEXTW 
4927 c3 38 24			jp macro_next 
492a				endm 
# End of macro NEXTW
492a			.PTR:   
492a			 
492a				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
492a 48				db WORD_SYS_CORE+52             
492b 57 49			dw .STYPE            
492d 04				db 3 + 1 
492e .. 00			db "PTR",0              
4932				endm 
# End of macro CWHEAD
4932			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4932			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4932			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4932			 
4932					if DEBUG_FORTH_WORDS_KEY 
4932						DMARK "PTR" 
4932 f5				push af  
4933 3a 47 49			ld a, (.dmark)  
4936 32 a0 fd			ld (debug_mark),a  
4939 3a 48 49			ld a, (.dmark+1)  
493c 32 a1 fd			ld (debug_mark+1),a  
493f 3a 49 49			ld a, (.dmark+2)  
4942 32 a2 fd			ld (debug_mark+2),a  
4945 18 03			jr .pastdmark  
4947 ..			.dmark: db "PTR"  
494a f1			.pastdmark: pop af  
494b			endm  
# End of macro DMARK
494b						CALLMONITOR 
494b cd aa fd			call debug_vector  
494e				endm  
# End of macro CALLMONITOR
494e					endif 
494e					FORTH_DSP_VALUEHL 
494e cd 4d 22			call macro_dsp_valuehl 
4951				endm 
# End of macro FORTH_DSP_VALUEHL
4951 cd 48 20				call forth_push_numhl 
4954			 
4954			 
4954					NEXTW 
4954 c3 38 24			jp macro_next 
4957				endm 
# End of macro NEXTW
4957			.STYPE: 
4957				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
4957 48				db WORD_SYS_CORE+52             
4958 a6 49			dw .UPPER            
495a 06				db 5 + 1 
495b .. 00			db "STYPE",0              
4961				endm 
# End of macro CWHEAD
4961			; | STYPE ( u -- u type ) Push type of value on TOS  | DONE 
4961			; | | 's' string or 'i' integer 
4961					if DEBUG_FORTH_WORDS_KEY 
4961						DMARK "STY" 
4961 f5				push af  
4962 3a 76 49			ld a, (.dmark)  
4965 32 a0 fd			ld (debug_mark),a  
4968 3a 77 49			ld a, (.dmark+1)  
496b 32 a1 fd			ld (debug_mark+1),a  
496e 3a 78 49			ld a, (.dmark+2)  
4971 32 a2 fd			ld (debug_mark+2),a  
4974 18 03			jr .pastdmark  
4976 ..			.dmark: db "STY"  
4979 f1			.pastdmark: pop af  
497a			endm  
# End of macro DMARK
497a						CALLMONITOR 
497a cd aa fd			call debug_vector  
497d				endm  
# End of macro CALLMONITOR
497d					endif 
497d					FORTH_DSP 
497d cd 13 22			call macro_forth_dsp 
4980				endm 
# End of macro FORTH_DSP
4980					;v5 FORTH_DSP_VALUE 
4980			 
4980 7e					ld a, (hl) 
4981			 
4981 f5					push af 
4982			 
4982			; Dont destroy TOS		FORTH_DSP_POP 
4982			 
4982 f1					pop af 
4983			 
4983 fe 01				cp DS_TYPE_STR 
4985 28 09				jr z, .typestr 
4987			 
4987 fe 02				cp DS_TYPE_INUM 
4989 28 0a				jr z, .typeinum 
498b			 
498b 21 a4 49				ld hl, .tna 
498e 18 0a				jr .tpush 
4990			 
4990 21 a0 49		.typestr:	ld hl, .tstr 
4993 18 05				jr .tpush 
4995 21 a2 49		.typeinum:	ld hl, .tinum 
4998 18 00				jr .tpush 
499a			 
499a			.tpush: 
499a			 
499a cd b6 20				call forth_push_str 
499d			 
499d					NEXTW 
499d c3 38 24			jp macro_next 
49a0				endm 
# End of macro NEXTW
49a0 .. 00		.tstr:	db "s",0 
49a2 .. 00		.tinum:  db "i",0 
49a4 .. 00		.tna:   db "?", 0 
49a6			 
49a6			 
49a6			.UPPER: 
49a6				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
49a6 48				db WORD_SYS_CORE+52             
49a7 e1 49			dw .LOWER            
49a9 06				db 5 + 1 
49aa .. 00			db "UPPER",0              
49b0				endm 
# End of macro CWHEAD
49b0			; | UPPER ( s -- s ) Upper case string s  | DONE 
49b0					if DEBUG_FORTH_WORDS_KEY 
49b0						DMARK "UPR" 
49b0 f5				push af  
49b1 3a c5 49			ld a, (.dmark)  
49b4 32 a0 fd			ld (debug_mark),a  
49b7 3a c6 49			ld a, (.dmark+1)  
49ba 32 a1 fd			ld (debug_mark+1),a  
49bd 3a c7 49			ld a, (.dmark+2)  
49c0 32 a2 fd			ld (debug_mark+2),a  
49c3 18 03			jr .pastdmark  
49c5 ..			.dmark: db "UPR"  
49c8 f1			.pastdmark: pop af  
49c9			endm  
# End of macro DMARK
49c9						CALLMONITOR 
49c9 cd aa fd			call debug_vector  
49cc				endm  
# End of macro CALLMONITOR
49cc					endif 
49cc			 
49cc					FORTH_DSP 
49cc cd 13 22			call macro_forth_dsp 
49cf				endm 
# End of macro FORTH_DSP
49cf					 
49cf			; TODO check is string type 
49cf			 
49cf					FORTH_DSP_VALUEHL 
49cf cd 4d 22			call macro_dsp_valuehl 
49d2				endm 
# End of macro FORTH_DSP_VALUEHL
49d2			; get pointer to string in hl 
49d2			 
49d2 7e			.toup:		ld a, (hl) 
49d3 fe 00				cp 0 
49d5 28 07				jr z, .toupdone 
49d7			 
49d7 cd 53 12				call to_upper 
49da			 
49da 77					ld (hl), a 
49db 23					inc hl 
49dc 18 f4				jr .toup 
49de			 
49de					 
49de			 
49de			 
49de			; for each char convert to upper 
49de					 
49de			.toupdone: 
49de			 
49de			 
49de					NEXTW 
49de c3 38 24			jp macro_next 
49e1				endm 
# End of macro NEXTW
49e1			.LOWER: 
49e1				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
49e1 48				db WORD_SYS_CORE+52             
49e2 1c 4a			dw .TCASE            
49e4 06				db 5 + 1 
49e5 .. 00			db "LOWER",0              
49eb				endm 
# End of macro CWHEAD
49eb			; | LOWER ( s -- s ) Lower case string s  | DONE 
49eb					if DEBUG_FORTH_WORDS_KEY 
49eb						DMARK "LWR" 
49eb f5				push af  
49ec 3a 00 4a			ld a, (.dmark)  
49ef 32 a0 fd			ld (debug_mark),a  
49f2 3a 01 4a			ld a, (.dmark+1)  
49f5 32 a1 fd			ld (debug_mark+1),a  
49f8 3a 02 4a			ld a, (.dmark+2)  
49fb 32 a2 fd			ld (debug_mark+2),a  
49fe 18 03			jr .pastdmark  
4a00 ..			.dmark: db "LWR"  
4a03 f1			.pastdmark: pop af  
4a04			endm  
# End of macro DMARK
4a04						CALLMONITOR 
4a04 cd aa fd			call debug_vector  
4a07				endm  
# End of macro CALLMONITOR
4a07					endif 
4a07			 
4a07					FORTH_DSP 
4a07 cd 13 22			call macro_forth_dsp 
4a0a				endm 
# End of macro FORTH_DSP
4a0a					 
4a0a			; TODO check is string type 
4a0a			 
4a0a					FORTH_DSP_VALUEHL 
4a0a cd 4d 22			call macro_dsp_valuehl 
4a0d				endm 
# End of macro FORTH_DSP_VALUEHL
4a0d			; get pointer to string in hl 
4a0d			 
4a0d 7e			.tolow:		ld a, (hl) 
4a0e fe 00				cp 0 
4a10 28 07				jr z, .tolowdone 
4a12			 
4a12 cd 5c 12				call to_lower 
4a15			 
4a15 77					ld (hl), a 
4a16 23					inc hl 
4a17 18 f4				jr .tolow 
4a19			 
4a19					 
4a19			 
4a19			 
4a19			; for each char convert to low 
4a19					 
4a19			.tolowdone: 
4a19					NEXTW 
4a19 c3 38 24			jp macro_next 
4a1c				endm 
# End of macro NEXTW
4a1c			.TCASE: 
4a1c				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4a1c 48				db WORD_SYS_CORE+52             
4a1d 52 4b			dw .SUBSTR            
4a1f 06				db 5 + 1 
4a20 .. 00			db "TCASE",0              
4a26				endm 
# End of macro CWHEAD
4a26			; | TCASE ( s -- s ) Title case string s  | DONE 
4a26					if DEBUG_FORTH_WORDS_KEY 
4a26						DMARK "TCS" 
4a26 f5				push af  
4a27 3a 3b 4a			ld a, (.dmark)  
4a2a 32 a0 fd			ld (debug_mark),a  
4a2d 3a 3c 4a			ld a, (.dmark+1)  
4a30 32 a1 fd			ld (debug_mark+1),a  
4a33 3a 3d 4a			ld a, (.dmark+2)  
4a36 32 a2 fd			ld (debug_mark+2),a  
4a39 18 03			jr .pastdmark  
4a3b ..			.dmark: db "TCS"  
4a3e f1			.pastdmark: pop af  
4a3f			endm  
# End of macro DMARK
4a3f						CALLMONITOR 
4a3f cd aa fd			call debug_vector  
4a42				endm  
# End of macro CALLMONITOR
4a42					endif 
4a42			 
4a42					FORTH_DSP 
4a42 cd 13 22			call macro_forth_dsp 
4a45				endm 
# End of macro FORTH_DSP
4a45					 
4a45			; TODO check is string type 
4a45			 
4a45					FORTH_DSP_VALUEHL 
4a45 cd 4d 22			call macro_dsp_valuehl 
4a48				endm 
# End of macro FORTH_DSP_VALUEHL
4a48			; get pointer to string in hl 
4a48			 
4a48					if DEBUG_FORTH_WORDS 
4a48						DMARK "TC1" 
4a48 f5				push af  
4a49 3a 5d 4a			ld a, (.dmark)  
4a4c 32 a0 fd			ld (debug_mark),a  
4a4f 3a 5e 4a			ld a, (.dmark+1)  
4a52 32 a1 fd			ld (debug_mark+1),a  
4a55 3a 5f 4a			ld a, (.dmark+2)  
4a58 32 a2 fd			ld (debug_mark+2),a  
4a5b 18 03			jr .pastdmark  
4a5d ..			.dmark: db "TC1"  
4a60 f1			.pastdmark: pop af  
4a61			endm  
# End of macro DMARK
4a61						CALLMONITOR 
4a61 cd aa fd			call debug_vector  
4a64				endm  
# End of macro CALLMONITOR
4a64					endif 
4a64			 
4a64					; first time in turn to upper case first char 
4a64			 
4a64 7e					ld a, (hl) 
4a65 c3 ef 4a				jp .totsiptou 
4a68			 
4a68			 
4a68 7e			.tot:		ld a, (hl) 
4a69 fe 00				cp 0 
4a6b ca 33 4b				jp z, .totdone 
4a6e			 
4a6e					if DEBUG_FORTH_WORDS 
4a6e						DMARK "TC2" 
4a6e f5				push af  
4a6f 3a 83 4a			ld a, (.dmark)  
4a72 32 a0 fd			ld (debug_mark),a  
4a75 3a 84 4a			ld a, (.dmark+1)  
4a78 32 a1 fd			ld (debug_mark+1),a  
4a7b 3a 85 4a			ld a, (.dmark+2)  
4a7e 32 a2 fd			ld (debug_mark+2),a  
4a81 18 03			jr .pastdmark  
4a83 ..			.dmark: db "TC2"  
4a86 f1			.pastdmark: pop af  
4a87			endm  
# End of macro DMARK
4a87						CALLMONITOR 
4a87 cd aa fd			call debug_vector  
4a8a				endm  
# End of macro CALLMONITOR
4a8a					endif 
4a8a					; check to see if current char is a space 
4a8a			 
4a8a fe 20				cp ' ' 
4a8c 28 21				jr z, .totsp 
4a8e cd 5c 12				call to_lower 
4a91					if DEBUG_FORTH_WORDS 
4a91						DMARK "TC3" 
4a91 f5				push af  
4a92 3a a6 4a			ld a, (.dmark)  
4a95 32 a0 fd			ld (debug_mark),a  
4a98 3a a7 4a			ld a, (.dmark+1)  
4a9b 32 a1 fd			ld (debug_mark+1),a  
4a9e 3a a8 4a			ld a, (.dmark+2)  
4aa1 32 a2 fd			ld (debug_mark+2),a  
4aa4 18 03			jr .pastdmark  
4aa6 ..			.dmark: db "TC3"  
4aa9 f1			.pastdmark: pop af  
4aaa			endm  
# End of macro DMARK
4aaa						CALLMONITOR 
4aaa cd aa fd			call debug_vector  
4aad				endm  
# End of macro CALLMONITOR
4aad					endif 
4aad 18 63				jr .totnxt 
4aaf			 
4aaf			.totsp:         ; on a space, find next char which should be upper 
4aaf			 
4aaf					if DEBUG_FORTH_WORDS 
4aaf						DMARK "TC4" 
4aaf f5				push af  
4ab0 3a c4 4a			ld a, (.dmark)  
4ab3 32 a0 fd			ld (debug_mark),a  
4ab6 3a c5 4a			ld a, (.dmark+1)  
4ab9 32 a1 fd			ld (debug_mark+1),a  
4abc 3a c6 4a			ld a, (.dmark+2)  
4abf 32 a2 fd			ld (debug_mark+2),a  
4ac2 18 03			jr .pastdmark  
4ac4 ..			.dmark: db "TC4"  
4ac7 f1			.pastdmark: pop af  
4ac8			endm  
# End of macro DMARK
4ac8						CALLMONITOR 
4ac8 cd aa fd			call debug_vector  
4acb				endm  
# End of macro CALLMONITOR
4acb					endif 
4acb					;; 
4acb			 
4acb fe 20				cp ' ' 
4acd 20 20				jr nz, .totsiptou 
4acf 23					inc hl 
4ad0 7e					ld a, (hl) 
4ad1					if DEBUG_FORTH_WORDS 
4ad1						DMARK "TC5" 
4ad1 f5				push af  
4ad2 3a e6 4a			ld a, (.dmark)  
4ad5 32 a0 fd			ld (debug_mark),a  
4ad8 3a e7 4a			ld a, (.dmark+1)  
4adb 32 a1 fd			ld (debug_mark+1),a  
4ade 3a e8 4a			ld a, (.dmark+2)  
4ae1 32 a2 fd			ld (debug_mark+2),a  
4ae4 18 03			jr .pastdmark  
4ae6 ..			.dmark: db "TC5"  
4ae9 f1			.pastdmark: pop af  
4aea			endm  
# End of macro DMARK
4aea						CALLMONITOR 
4aea cd aa fd			call debug_vector  
4aed				endm  
# End of macro CALLMONITOR
4aed					endif 
4aed 18 c0				jr .totsp 
4aef fe 00		.totsiptou:    cp 0 
4af1 28 40				jr z, .totdone 
4af3					; not space and not zero term so upper case it 
4af3 cd 53 12				call to_upper 
4af6			 
4af6					if DEBUG_FORTH_WORDS 
4af6						DMARK "TC6" 
4af6 f5				push af  
4af7 3a 0b 4b			ld a, (.dmark)  
4afa 32 a0 fd			ld (debug_mark),a  
4afd 3a 0c 4b			ld a, (.dmark+1)  
4b00 32 a1 fd			ld (debug_mark+1),a  
4b03 3a 0d 4b			ld a, (.dmark+2)  
4b06 32 a2 fd			ld (debug_mark+2),a  
4b09 18 03			jr .pastdmark  
4b0b ..			.dmark: db "TC6"  
4b0e f1			.pastdmark: pop af  
4b0f			endm  
# End of macro DMARK
4b0f						CALLMONITOR 
4b0f cd aa fd			call debug_vector  
4b12				endm  
# End of macro CALLMONITOR
4b12					endif 
4b12			 
4b12			 
4b12			.totnxt: 
4b12			 
4b12 77					ld (hl), a 
4b13 23					inc hl 
4b14					if DEBUG_FORTH_WORDS 
4b14						DMARK "TC7" 
4b14 f5				push af  
4b15 3a 29 4b			ld a, (.dmark)  
4b18 32 a0 fd			ld (debug_mark),a  
4b1b 3a 2a 4b			ld a, (.dmark+1)  
4b1e 32 a1 fd			ld (debug_mark+1),a  
4b21 3a 2b 4b			ld a, (.dmark+2)  
4b24 32 a2 fd			ld (debug_mark+2),a  
4b27 18 03			jr .pastdmark  
4b29 ..			.dmark: db "TC7"  
4b2c f1			.pastdmark: pop af  
4b2d			endm  
# End of macro DMARK
4b2d						CALLMONITOR 
4b2d cd aa fd			call debug_vector  
4b30				endm  
# End of macro CALLMONITOR
4b30					endif 
4b30 c3 68 4a				jp .tot 
4b33			 
4b33					 
4b33			 
4b33			 
4b33			; for each char convert to low 
4b33					 
4b33			.totdone: 
4b33					if DEBUG_FORTH_WORDS 
4b33						DMARK "TCd" 
4b33 f5				push af  
4b34 3a 48 4b			ld a, (.dmark)  
4b37 32 a0 fd			ld (debug_mark),a  
4b3a 3a 49 4b			ld a, (.dmark+1)  
4b3d 32 a1 fd			ld (debug_mark+1),a  
4b40 3a 4a 4b			ld a, (.dmark+2)  
4b43 32 a2 fd			ld (debug_mark+2),a  
4b46 18 03			jr .pastdmark  
4b48 ..			.dmark: db "TCd"  
4b4b f1			.pastdmark: pop af  
4b4c			endm  
# End of macro DMARK
4b4c						CALLMONITOR 
4b4c cd aa fd			call debug_vector  
4b4f				endm  
# End of macro CALLMONITOR
4b4f					endif 
4b4f					NEXTW 
4b4f c3 38 24			jp macro_next 
4b52				endm 
# End of macro NEXTW
4b52			 
4b52			.SUBSTR: 
4b52				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4b52 48				db WORD_SYS_CORE+52             
4b53 b0 4b			dw .LEFT            
4b55 07				db 6 + 1 
4b56 .. 00			db "SUBSTR",0              
4b5d				endm 
# End of macro CWHEAD
4b5d			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
4b5d			 
4b5d					if DEBUG_FORTH_WORDS_KEY 
4b5d						DMARK "SST" 
4b5d f5				push af  
4b5e 3a 72 4b			ld a, (.dmark)  
4b61 32 a0 fd			ld (debug_mark),a  
4b64 3a 73 4b			ld a, (.dmark+1)  
4b67 32 a1 fd			ld (debug_mark+1),a  
4b6a 3a 74 4b			ld a, (.dmark+2)  
4b6d 32 a2 fd			ld (debug_mark+2),a  
4b70 18 03			jr .pastdmark  
4b72 ..			.dmark: db "SST"  
4b75 f1			.pastdmark: pop af  
4b76			endm  
# End of macro DMARK
4b76						CALLMONITOR 
4b76 cd aa fd			call debug_vector  
4b79				endm  
# End of macro CALLMONITOR
4b79					endif 
4b79			; TODO check string type 
4b79					FORTH_DSP_VALUEHL 
4b79 cd 4d 22			call macro_dsp_valuehl 
4b7c				endm 
# End of macro FORTH_DSP_VALUEHL
4b7c			 
4b7c e5					push hl      ; string length 
4b7d			 
4b7d					FORTH_DSP_POP 
4b7d cd 05 23			call macro_forth_dsp_pop 
4b80				endm 
# End of macro FORTH_DSP_POP
4b80			 
4b80					FORTH_DSP_VALUEHL 
4b80 cd 4d 22			call macro_dsp_valuehl 
4b83				endm 
# End of macro FORTH_DSP_VALUEHL
4b83			 
4b83 e5					push hl     ; start char 
4b84			 
4b84					FORTH_DSP_POP 
4b84 cd 05 23			call macro_forth_dsp_pop 
4b87				endm 
# End of macro FORTH_DSP_POP
4b87			 
4b87			 
4b87					FORTH_DSP_VALUE 
4b87 cd 36 22			call macro_forth_dsp_value 
4b8a				endm 
# End of macro FORTH_DSP_VALUE
4b8a			 
4b8a d1					pop de    ; get start post offset 
4b8b			 
4b8b 19					add hl, de    ; starting offset 
4b8c			 
4b8c c1					pop bc 
4b8d c5					push bc      ; grab size of string 
4b8e			 
4b8e e5					push hl    ; save string start  
4b8f			 
4b8f 26 00				ld h, 0 
4b91 69					ld l, c 
4b92 23					inc hl 
4b93 23					inc hl 
4b94			 
4b94 cd b9 13				call malloc 
4b97				if DEBUG_FORTH_MALLOC_GUARD 
4b97 cc 40 62				call z,malloc_error 
4b9a				endif 
4b9a			 
4b9a eb					ex de, hl      ; save malloc area for string copy 
4b9b e1					pop hl    ; get back source 
4b9c c1					pop bc    ; get length of string back 
4b9d			 
4b9d d5					push de    ; save malloc area for after we push 
4b9e ed b0				ldir     ; copy substr 
4ba0			 
4ba0			 
4ba0 eb					ex de, hl 
4ba1 3e 00				ld a, 0 
4ba3 77					ld (hl), a   ; term substr 
4ba4			 
4ba4					 
4ba4 e1					pop hl    ; get malloc so we can push it 
4ba5 e5					push hl   ; save so we can free it afterwards 
4ba6			 
4ba6 cd b6 20				call forth_push_str 
4ba9			 
4ba9 e1					pop hl 
4baa cd 83 14				call free 
4bad			 
4bad					 
4bad					 
4bad			 
4bad			 
4bad					NEXTW 
4bad c3 38 24			jp macro_next 
4bb0				endm 
# End of macro NEXTW
4bb0			 
4bb0			.LEFT: 
4bb0				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4bb0 48				db WORD_SYS_CORE+52             
4bb1 f1 4b			dw .RIGHT            
4bb3 05				db 4 + 1 
4bb4 .. 00			db "LEFT",0              
4bb9				endm 
# End of macro CWHEAD
4bb9			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | DONE 
4bb9					if DEBUG_FORTH_WORDS_KEY 
4bb9						DMARK "LEF" 
4bb9 f5				push af  
4bba 3a ce 4b			ld a, (.dmark)  
4bbd 32 a0 fd			ld (debug_mark),a  
4bc0 3a cf 4b			ld a, (.dmark+1)  
4bc3 32 a1 fd			ld (debug_mark+1),a  
4bc6 3a d0 4b			ld a, (.dmark+2)  
4bc9 32 a2 fd			ld (debug_mark+2),a  
4bcc 18 03			jr .pastdmark  
4bce ..			.dmark: db "LEF"  
4bd1 f1			.pastdmark: pop af  
4bd2			endm  
# End of macro DMARK
4bd2						CALLMONITOR 
4bd2 cd aa fd			call debug_vector  
4bd5				endm  
# End of macro CALLMONITOR
4bd5					endif 
4bd5			 
4bd5					 
4bd5			; TODO check string type 
4bd5					FORTH_DSP_VALUEHL 
4bd5 cd 4d 22			call macro_dsp_valuehl 
4bd8				endm 
# End of macro FORTH_DSP_VALUEHL
4bd8			 
4bd8 e5					push hl      ; string length 
4bd9			 
4bd9					FORTH_DSP_POP 
4bd9 cd 05 23			call macro_forth_dsp_pop 
4bdc				endm 
# End of macro FORTH_DSP_POP
4bdc			 
4bdc					FORTH_DSP_VALUEHL 
4bdc cd 4d 22			call macro_dsp_valuehl 
4bdf				endm 
# End of macro FORTH_DSP_VALUEHL
4bdf			 
4bdf c1					pop bc 
4be0			 
4be0 11 f6 f0				ld de, scratch 
4be3 ed b0				ldir 
4be5 3e 00				ld a, 0 
4be7 12					ld (de), a 
4be8					 
4be8 21 f6 f0				ld hl, scratch 
4beb cd b6 20				call forth_push_str 
4bee			 
4bee					NEXTW 
4bee c3 38 24			jp macro_next 
4bf1				endm 
# End of macro NEXTW
4bf1			.RIGHT: 
4bf1				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4bf1 48				db WORD_SYS_CORE+52             
4bf2 af 4c			dw .STR2NUM            
4bf4 06				db 5 + 1 
4bf5 .. 00			db "RIGHT",0              
4bfb				endm 
# End of macro CWHEAD
4bfb			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | DONE 
4bfb					if DEBUG_FORTH_WORDS_KEY 
4bfb						DMARK "RIG" 
4bfb f5				push af  
4bfc 3a 10 4c			ld a, (.dmark)  
4bff 32 a0 fd			ld (debug_mark),a  
4c02 3a 11 4c			ld a, (.dmark+1)  
4c05 32 a1 fd			ld (debug_mark+1),a  
4c08 3a 12 4c			ld a, (.dmark+2)  
4c0b 32 a2 fd			ld (debug_mark+2),a  
4c0e 18 03			jr .pastdmark  
4c10 ..			.dmark: db "RIG"  
4c13 f1			.pastdmark: pop af  
4c14			endm  
# End of macro DMARK
4c14						CALLMONITOR 
4c14 cd aa fd			call debug_vector  
4c17				endm  
# End of macro CALLMONITOR
4c17					endif 
4c17			 
4c17			; TODO check string type 
4c17					FORTH_DSP_VALUEHL 
4c17 cd 4d 22			call macro_dsp_valuehl 
4c1a				endm 
# End of macro FORTH_DSP_VALUEHL
4c1a			 
4c1a e5					push hl      ; string length 
4c1b			 
4c1b					FORTH_DSP_POP 
4c1b cd 05 23			call macro_forth_dsp_pop 
4c1e				endm 
# End of macro FORTH_DSP_POP
4c1e			 
4c1e					FORTH_DSP_VALUEHL 
4c1e cd 4d 22			call macro_dsp_valuehl 
4c21				endm 
# End of macro FORTH_DSP_VALUEHL
4c21			 
4c21					if DEBUG_FORTH_WORDS 
4c21						DMARK "RI1" 
4c21 f5				push af  
4c22 3a 36 4c			ld a, (.dmark)  
4c25 32 a0 fd			ld (debug_mark),a  
4c28 3a 37 4c			ld a, (.dmark+1)  
4c2b 32 a1 fd			ld (debug_mark+1),a  
4c2e 3a 38 4c			ld a, (.dmark+2)  
4c31 32 a2 fd			ld (debug_mark+2),a  
4c34 18 03			jr .pastdmark  
4c36 ..			.dmark: db "RI1"  
4c39 f1			.pastdmark: pop af  
4c3a			endm  
# End of macro DMARK
4c3a						CALLMONITOR 
4c3a cd aa fd			call debug_vector  
4c3d				endm  
# End of macro CALLMONITOR
4c3d					endif 
4c3d					; from the pointer to string get to the end of string 
4c3d			 
4c3d 01 ff 00				ld bc, 255 
4c40 3e 00				ld a, 0 
4c42 ed b1				cpir 
4c44 2b					dec hl 
4c45			 
4c45					;  
4c45			 
4c45					if DEBUG_FORTH_WORDS 
4c45						DMARK "RI2" 
4c45 f5				push af  
4c46 3a 5a 4c			ld a, (.dmark)  
4c49 32 a0 fd			ld (debug_mark),a  
4c4c 3a 5b 4c			ld a, (.dmark+1)  
4c4f 32 a1 fd			ld (debug_mark+1),a  
4c52 3a 5c 4c			ld a, (.dmark+2)  
4c55 32 a2 fd			ld (debug_mark+2),a  
4c58 18 03			jr .pastdmark  
4c5a ..			.dmark: db "RI2"  
4c5d f1			.pastdmark: pop af  
4c5e			endm  
# End of macro DMARK
4c5e						CALLMONITOR 
4c5e cd aa fd			call debug_vector  
4c61				endm  
# End of macro CALLMONITOR
4c61					endif 
4c61			 
4c61 c1					pop bc    ;  length of string to copy 
4c62			 
4c62 79					ld a, c 
4c63 eb					ex de, hl 
4c64 21 f6 f0				ld hl, scratch  
4c67 cd de 0f				call addatohl 
4c6a			 
4c6a eb					ex de, hl 
4c6b			 
4c6b					if DEBUG_FORTH_WORDS 
4c6b						DMARK "RI3" 
4c6b f5				push af  
4c6c 3a 80 4c			ld a, (.dmark)  
4c6f 32 a0 fd			ld (debug_mark),a  
4c72 3a 81 4c			ld a, (.dmark+1)  
4c75 32 a1 fd			ld (debug_mark+1),a  
4c78 3a 82 4c			ld a, (.dmark+2)  
4c7b 32 a2 fd			ld (debug_mark+2),a  
4c7e 18 03			jr .pastdmark  
4c80 ..			.dmark: db "RI3"  
4c83 f1			.pastdmark: pop af  
4c84			endm  
# End of macro DMARK
4c84						CALLMONITOR 
4c84 cd aa fd			call debug_vector  
4c87				endm  
# End of macro CALLMONITOR
4c87					endif 
4c87			 
4c87 03					inc bc 
4c88 ed b8				lddr 
4c8a					 
4c8a 21 f6 f0				ld hl, scratch 
4c8d					if DEBUG_FORTH_WORDS 
4c8d						DMARK "RI4" 
4c8d f5				push af  
4c8e 3a a2 4c			ld a, (.dmark)  
4c91 32 a0 fd			ld (debug_mark),a  
4c94 3a a3 4c			ld a, (.dmark+1)  
4c97 32 a1 fd			ld (debug_mark+1),a  
4c9a 3a a4 4c			ld a, (.dmark+2)  
4c9d 32 a2 fd			ld (debug_mark+2),a  
4ca0 18 03			jr .pastdmark  
4ca2 ..			.dmark: db "RI4"  
4ca5 f1			.pastdmark: pop af  
4ca6			endm  
# End of macro DMARK
4ca6						CALLMONITOR 
4ca6 cd aa fd			call debug_vector  
4ca9				endm  
# End of macro CALLMONITOR
4ca9					endif 
4ca9 cd b6 20				call forth_push_str 
4cac			 
4cac			 
4cac					NEXTW 
4cac c3 38 24			jp macro_next 
4caf				endm 
# End of macro NEXTW
4caf			 
4caf			 
4caf			.STR2NUM: 
4caf				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4caf 48				db WORD_SYS_CORE+52             
4cb0 3b 4d			dw .NUM2STR            
4cb2 08				db 7 + 1 
4cb3 .. 00			db "STR2NUM",0              
4cbb				endm 
# End of macro CWHEAD
4cbb			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4cbb			 
4cbb			 
4cbb			; TODO STR type check to do 
4cbb					if DEBUG_FORTH_WORDS_KEY 
4cbb						DMARK "S2N" 
4cbb f5				push af  
4cbc 3a d0 4c			ld a, (.dmark)  
4cbf 32 a0 fd			ld (debug_mark),a  
4cc2 3a d1 4c			ld a, (.dmark+1)  
4cc5 32 a1 fd			ld (debug_mark+1),a  
4cc8 3a d2 4c			ld a, (.dmark+2)  
4ccb 32 a2 fd			ld (debug_mark+2),a  
4cce 18 03			jr .pastdmark  
4cd0 ..			.dmark: db "S2N"  
4cd3 f1			.pastdmark: pop af  
4cd4			endm  
# End of macro DMARK
4cd4						CALLMONITOR 
4cd4 cd aa fd			call debug_vector  
4cd7				endm  
# End of macro CALLMONITOR
4cd7					endif 
4cd7			 
4cd7					;FORTH_DSP 
4cd7					FORTH_DSP_VALUE 
4cd7 cd 36 22			call macro_forth_dsp_value 
4cda				endm 
# End of macro FORTH_DSP_VALUE
4cda					;inc hl 
4cda			 
4cda eb					ex de, hl 
4cdb					if DEBUG_FORTH_WORDS 
4cdb						DMARK "S2a" 
4cdb f5				push af  
4cdc 3a f0 4c			ld a, (.dmark)  
4cdf 32 a0 fd			ld (debug_mark),a  
4ce2 3a f1 4c			ld a, (.dmark+1)  
4ce5 32 a1 fd			ld (debug_mark+1),a  
4ce8 3a f2 4c			ld a, (.dmark+2)  
4ceb 32 a2 fd			ld (debug_mark+2),a  
4cee 18 03			jr .pastdmark  
4cf0 ..			.dmark: db "S2a"  
4cf3 f1			.pastdmark: pop af  
4cf4			endm  
# End of macro DMARK
4cf4						CALLMONITOR 
4cf4 cd aa fd			call debug_vector  
4cf7				endm  
# End of macro CALLMONITOR
4cf7					endif 
4cf7 cd db 12				call string_to_uint16 
4cfa			 
4cfa					if DEBUG_FORTH_WORDS 
4cfa						DMARK "S2b" 
4cfa f5				push af  
4cfb 3a 0f 4d			ld a, (.dmark)  
4cfe 32 a0 fd			ld (debug_mark),a  
4d01 3a 10 4d			ld a, (.dmark+1)  
4d04 32 a1 fd			ld (debug_mark+1),a  
4d07 3a 11 4d			ld a, (.dmark+2)  
4d0a 32 a2 fd			ld (debug_mark+2),a  
4d0d 18 03			jr .pastdmark  
4d0f ..			.dmark: db "S2b"  
4d12 f1			.pastdmark: pop af  
4d13			endm  
# End of macro DMARK
4d13						CALLMONITOR 
4d13 cd aa fd			call debug_vector  
4d16				endm  
# End of macro CALLMONITOR
4d16					endif 
4d16			;		push hl 
4d16					FORTH_DSP_POP 
4d16 cd 05 23			call macro_forth_dsp_pop 
4d19				endm 
# End of macro FORTH_DSP_POP
4d19			;		pop hl 
4d19					 
4d19					if DEBUG_FORTH_WORDS 
4d19						DMARK "S2b" 
4d19 f5				push af  
4d1a 3a 2e 4d			ld a, (.dmark)  
4d1d 32 a0 fd			ld (debug_mark),a  
4d20 3a 2f 4d			ld a, (.dmark+1)  
4d23 32 a1 fd			ld (debug_mark+1),a  
4d26 3a 30 4d			ld a, (.dmark+2)  
4d29 32 a2 fd			ld (debug_mark+2),a  
4d2c 18 03			jr .pastdmark  
4d2e ..			.dmark: db "S2b"  
4d31 f1			.pastdmark: pop af  
4d32			endm  
# End of macro DMARK
4d32						CALLMONITOR 
4d32 cd aa fd			call debug_vector  
4d35				endm  
# End of macro CALLMONITOR
4d35					endif 
4d35 cd 48 20				call forth_push_numhl	 
4d38			 
4d38				 
4d38				       NEXTW 
4d38 c3 38 24			jp macro_next 
4d3b				endm 
# End of macro NEXTW
4d3b			.NUM2STR: 
4d3b				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4d3b 48				db WORD_SYS_CORE+52             
4d3c cd 4d			dw .CONCAT            
4d3e 08				db 7 + 1 
4d3f .. 00			db "NUM2STR",0              
4d47				endm 
# End of macro CWHEAD
4d47			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
4d47			 
4d47			;		; malloc a string to target 
4d47			;		ld hl, 10     ; TODO max string size should be fine 
4d47			;		call malloc 
4d47			;		push hl    ; save malloc location 
4d47			; 
4d47			; 
4d47			;; TODO check int type 
4d47					if DEBUG_FORTH_WORDS_KEY 
4d47						DMARK "N2S" 
4d47 f5				push af  
4d48 3a 5c 4d			ld a, (.dmark)  
4d4b 32 a0 fd			ld (debug_mark),a  
4d4e 3a 5d 4d			ld a, (.dmark+1)  
4d51 32 a1 fd			ld (debug_mark+1),a  
4d54 3a 5e 4d			ld a, (.dmark+2)  
4d57 32 a2 fd			ld (debug_mark+2),a  
4d5a 18 03			jr .pastdmark  
4d5c ..			.dmark: db "N2S"  
4d5f f1			.pastdmark: pop af  
4d60			endm  
# End of macro DMARK
4d60						CALLMONITOR 
4d60 cd aa fd			call debug_vector  
4d63				endm  
# End of macro CALLMONITOR
4d63					endif 
4d63			 
4d63					FORTH_DSP_VALUEHL 
4d63 cd 4d 22			call macro_dsp_valuehl 
4d66				endm 
# End of macro FORTH_DSP_VALUEHL
4d66			 
4d66					if DEBUG_FORTH_WORDS 
4d66						DMARK "NS1" 
4d66 f5				push af  
4d67 3a 7b 4d			ld a, (.dmark)  
4d6a 32 a0 fd			ld (debug_mark),a  
4d6d 3a 7c 4d			ld a, (.dmark+1)  
4d70 32 a1 fd			ld (debug_mark+1),a  
4d73 3a 7d 4d			ld a, (.dmark+2)  
4d76 32 a2 fd			ld (debug_mark+2),a  
4d79 18 03			jr .pastdmark  
4d7b ..			.dmark: db "NS1"  
4d7e f1			.pastdmark: pop af  
4d7f			endm  
# End of macro DMARK
4d7f						CALLMONITOR 
4d7f cd aa fd			call debug_vector  
4d82				endm  
# End of macro CALLMONITOR
4d82					endif 
4d82					FORTH_DSP_POP 
4d82 cd 05 23			call macro_forth_dsp_pop 
4d85				endm 
# End of macro FORTH_DSP_POP
4d85			 
4d85 eb					ex de, hl 
4d86 21 f6 f0				ld hl, scratch 
4d89					if DEBUG_FORTH_WORDS 
4d89						DMARK "NS2" 
4d89 f5				push af  
4d8a 3a 9e 4d			ld a, (.dmark)  
4d8d 32 a0 fd			ld (debug_mark),a  
4d90 3a 9f 4d			ld a, (.dmark+1)  
4d93 32 a1 fd			ld (debug_mark+1),a  
4d96 3a a0 4d			ld a, (.dmark+2)  
4d99 32 a2 fd			ld (debug_mark+2),a  
4d9c 18 03			jr .pastdmark  
4d9e ..			.dmark: db "NS2"  
4da1 f1			.pastdmark: pop af  
4da2			endm  
# End of macro DMARK
4da2						CALLMONITOR 
4da2 cd aa fd			call debug_vector  
4da5				endm  
# End of macro CALLMONITOR
4da5					endif 
4da5 cd f3 12				call uitoa_16 
4da8 21 f6 f0				ld hl, scratch 
4dab					if DEBUG_FORTH_WORDS 
4dab						DMARK "NS3" 
4dab f5				push af  
4dac 3a c0 4d			ld a, (.dmark)  
4daf 32 a0 fd			ld (debug_mark),a  
4db2 3a c1 4d			ld a, (.dmark+1)  
4db5 32 a1 fd			ld (debug_mark+1),a  
4db8 3a c2 4d			ld a, (.dmark+2)  
4dbb 32 a2 fd			ld (debug_mark+2),a  
4dbe 18 03			jr .pastdmark  
4dc0 ..			.dmark: db "NS3"  
4dc3 f1			.pastdmark: pop af  
4dc4			endm  
# End of macro DMARK
4dc4						CALLMONITOR 
4dc4 cd aa fd			call debug_vector  
4dc7				endm  
# End of macro CALLMONITOR
4dc7					endif 
4dc7 cd b6 20				call forth_push_str 
4dca			;		ld a, l 
4dca			;		call DispAToASCII   
4dca			;;TODO need to chage above call to dump into string 
4dca			; 
4dca			; 
4dca			 
4dca				       NEXTW 
4dca c3 38 24			jp macro_next 
4dcd				endm 
# End of macro NEXTW
4dcd			 
4dcd			.CONCAT: 
4dcd				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4dcd 48				db WORD_SYS_CORE+52             
4dce 80 4e			dw .FIND            
4dd0 07				db 6 + 1 
4dd1 .. 00			db "CONCAT",0              
4dd8				endm 
# End of macro CWHEAD
4dd8			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4dd8			 
4dd8			; TODO check string type 
4dd8			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4dd8			 
4dd8					if DEBUG_FORTH_WORDS_KEY 
4dd8						DMARK "CON" 
4dd8 f5				push af  
4dd9 3a ed 4d			ld a, (.dmark)  
4ddc 32 a0 fd			ld (debug_mark),a  
4ddf 3a ee 4d			ld a, (.dmark+1)  
4de2 32 a1 fd			ld (debug_mark+1),a  
4de5 3a ef 4d			ld a, (.dmark+2)  
4de8 32 a2 fd			ld (debug_mark+2),a  
4deb 18 03			jr .pastdmark  
4ded ..			.dmark: db "CON"  
4df0 f1			.pastdmark: pop af  
4df1			endm  
# End of macro DMARK
4df1						CALLMONITOR 
4df1 cd aa fd			call debug_vector  
4df4				endm  
# End of macro CALLMONITOR
4df4					endif 
4df4			 
4df4			 
4df4					FORTH_DSP_VALUE 
4df4 cd 36 22			call macro_forth_dsp_value 
4df7				endm 
# End of macro FORTH_DSP_VALUE
4df7 e5					push hl   ; s2 
4df8			 
4df8					FORTH_DSP_POP 
4df8 cd 05 23			call macro_forth_dsp_pop 
4dfb				endm 
# End of macro FORTH_DSP_POP
4dfb			 
4dfb					FORTH_DSP_VALUE 
4dfb cd 36 22			call macro_forth_dsp_value 
4dfe				endm 
# End of macro FORTH_DSP_VALUE
4dfe			 
4dfe e5					push hl   ; s1 
4dff			 
4dff					FORTH_DSP_POP 
4dff cd 05 23			call macro_forth_dsp_pop 
4e02				endm 
# End of macro FORTH_DSP_POP
4e02					 
4e02			 
4e02					; copy s1 
4e02			 
4e02				 
4e02					; save ptr 
4e02 e1					pop hl  
4e03 e5					push hl 
4e04 3e 00				ld a, 0 
4e06 cd 4f 13				call strlent 
4e09					;inc hl    ; zer0 
4e09 06 00				ld b, 0 
4e0b 4d					ld c, l 
4e0c e1					pop hl		 
4e0d 11 f6 f0				ld de, scratch	 
4e10					if DEBUG_FORTH_WORDS 
4e10						DMARK "CO1" 
4e10 f5				push af  
4e11 3a 25 4e			ld a, (.dmark)  
4e14 32 a0 fd			ld (debug_mark),a  
4e17 3a 26 4e			ld a, (.dmark+1)  
4e1a 32 a1 fd			ld (debug_mark+1),a  
4e1d 3a 27 4e			ld a, (.dmark+2)  
4e20 32 a2 fd			ld (debug_mark+2),a  
4e23 18 03			jr .pastdmark  
4e25 ..			.dmark: db "CO1"  
4e28 f1			.pastdmark: pop af  
4e29			endm  
# End of macro DMARK
4e29						CALLMONITOR 
4e29 cd aa fd			call debug_vector  
4e2c				endm  
# End of macro CALLMONITOR
4e2c					endif 
4e2c ed b0				ldir 
4e2e			 
4e2e e1					pop hl 
4e2f e5					push hl 
4e30 d5					push de 
4e31			 
4e31			 
4e31 3e 00				ld a, 0 
4e33 cd 4f 13				call strlent 
4e36 23					inc hl    ; zer0 
4e37 23					inc hl 
4e38 06 00				ld b, 0 
4e3a 4d					ld c, l 
4e3b d1					pop de 
4e3c e1					pop hl		 
4e3d					if DEBUG_FORTH_WORDS 
4e3d						DMARK "CO2" 
4e3d f5				push af  
4e3e 3a 52 4e			ld a, (.dmark)  
4e41 32 a0 fd			ld (debug_mark),a  
4e44 3a 53 4e			ld a, (.dmark+1)  
4e47 32 a1 fd			ld (debug_mark+1),a  
4e4a 3a 54 4e			ld a, (.dmark+2)  
4e4d 32 a2 fd			ld (debug_mark+2),a  
4e50 18 03			jr .pastdmark  
4e52 ..			.dmark: db "CO2"  
4e55 f1			.pastdmark: pop af  
4e56			endm  
# End of macro DMARK
4e56						CALLMONITOR 
4e56 cd aa fd			call debug_vector  
4e59				endm  
# End of macro CALLMONITOR
4e59					endif 
4e59 ed b0				ldir 
4e5b			 
4e5b			 
4e5b			 
4e5b 21 f6 f0				ld hl, scratch 
4e5e					if DEBUG_FORTH_WORDS 
4e5e						DMARK "CO5" 
4e5e f5				push af  
4e5f 3a 73 4e			ld a, (.dmark)  
4e62 32 a0 fd			ld (debug_mark),a  
4e65 3a 74 4e			ld a, (.dmark+1)  
4e68 32 a1 fd			ld (debug_mark+1),a  
4e6b 3a 75 4e			ld a, (.dmark+2)  
4e6e 32 a2 fd			ld (debug_mark+2),a  
4e71 18 03			jr .pastdmark  
4e73 ..			.dmark: db "CO5"  
4e76 f1			.pastdmark: pop af  
4e77			endm  
# End of macro DMARK
4e77						CALLMONITOR 
4e77 cd aa fd			call debug_vector  
4e7a				endm  
# End of macro CALLMONITOR
4e7a					endif 
4e7a			 
4e7a cd b6 20				call forth_push_str 
4e7d			 
4e7d			 
4e7d			 
4e7d			 
4e7d				       NEXTW 
4e7d c3 38 24			jp macro_next 
4e80				endm 
# End of macro NEXTW
4e80			 
4e80			 
4e80			.FIND: 
4e80				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4e80 4b				db WORD_SYS_CORE+55             
4e81 3e 4f			dw .LEN            
4e83 05				db 4 + 1 
4e84 .. 00			db "FIND",0              
4e89				endm 
# End of macro CWHEAD
4e89			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4e89			 
4e89					if DEBUG_FORTH_WORDS_KEY 
4e89						DMARK "FND" 
4e89 f5				push af  
4e8a 3a 9e 4e			ld a, (.dmark)  
4e8d 32 a0 fd			ld (debug_mark),a  
4e90 3a 9f 4e			ld a, (.dmark+1)  
4e93 32 a1 fd			ld (debug_mark+1),a  
4e96 3a a0 4e			ld a, (.dmark+2)  
4e99 32 a2 fd			ld (debug_mark+2),a  
4e9c 18 03			jr .pastdmark  
4e9e ..			.dmark: db "FND"  
4ea1 f1			.pastdmark: pop af  
4ea2			endm  
# End of macro DMARK
4ea2						CALLMONITOR 
4ea2 cd aa fd			call debug_vector  
4ea5				endm  
# End of macro CALLMONITOR
4ea5					endif 
4ea5			 
4ea5			; TODO check string type 
4ea5					FORTH_DSP_VALUE 
4ea5 cd 36 22			call macro_forth_dsp_value 
4ea8				endm 
# End of macro FORTH_DSP_VALUE
4ea8			 
4ea8 e5					push hl    
4ea9 7e					ld a,(hl)    ; char to find   
4eaa			; TODO change char to substr 
4eaa			 
4eaa f5					push af 
4eab					 
4eab			 
4eab			 
4eab					if DEBUG_FORTH_WORDS 
4eab						DMARK "FN1" 
4eab f5				push af  
4eac 3a c0 4e			ld a, (.dmark)  
4eaf 32 a0 fd			ld (debug_mark),a  
4eb2 3a c1 4e			ld a, (.dmark+1)  
4eb5 32 a1 fd			ld (debug_mark+1),a  
4eb8 3a c2 4e			ld a, (.dmark+2)  
4ebb 32 a2 fd			ld (debug_mark+2),a  
4ebe 18 03			jr .pastdmark  
4ec0 ..			.dmark: db "FN1"  
4ec3 f1			.pastdmark: pop af  
4ec4			endm  
# End of macro DMARK
4ec4						CALLMONITOR 
4ec4 cd aa fd			call debug_vector  
4ec7				endm  
# End of macro CALLMONITOR
4ec7					endif 
4ec7			 
4ec7					FORTH_DSP_POP 
4ec7 cd 05 23			call macro_forth_dsp_pop 
4eca				endm 
# End of macro FORTH_DSP_POP
4eca			 
4eca					; string to search 
4eca			 
4eca					FORTH_DSP_VALUE 
4eca cd 36 22			call macro_forth_dsp_value 
4ecd				endm 
# End of macro FORTH_DSP_VALUE
4ecd			 
4ecd d1					pop de  ; d is char to find  
4ece			 
4ece					if DEBUG_FORTH_WORDS 
4ece						DMARK "FN2" 
4ece f5				push af  
4ecf 3a e3 4e			ld a, (.dmark)  
4ed2 32 a0 fd			ld (debug_mark),a  
4ed5 3a e4 4e			ld a, (.dmark+1)  
4ed8 32 a1 fd			ld (debug_mark+1),a  
4edb 3a e5 4e			ld a, (.dmark+2)  
4ede 32 a2 fd			ld (debug_mark+2),a  
4ee1 18 03			jr .pastdmark  
4ee3 ..			.dmark: db "FN2"  
4ee6 f1			.pastdmark: pop af  
4ee7			endm  
# End of macro DMARK
4ee7						CALLMONITOR 
4ee7 cd aa fd			call debug_vector  
4eea				endm  
# End of macro CALLMONITOR
4eea					endif 
4eea					 
4eea 01 00 00				ld bc, 0 
4eed 7e			.findchar:      ld a,(hl) 
4eee fe 00				cp 0   		 
4ef0 28 27				jr z, .finddone     
4ef2 ba					cp d 
4ef3 28 20				jr z, .foundchar 
4ef5 03					inc bc 
4ef6 23					inc hl 
4ef7					if DEBUG_FORTH_WORDS 
4ef7						DMARK "FN3" 
4ef7 f5				push af  
4ef8 3a 0c 4f			ld a, (.dmark)  
4efb 32 a0 fd			ld (debug_mark),a  
4efe 3a 0d 4f			ld a, (.dmark+1)  
4f01 32 a1 fd			ld (debug_mark+1),a  
4f04 3a 0e 4f			ld a, (.dmark+2)  
4f07 32 a2 fd			ld (debug_mark+2),a  
4f0a 18 03			jr .pastdmark  
4f0c ..			.dmark: db "FN3"  
4f0f f1			.pastdmark: pop af  
4f10			endm  
# End of macro DMARK
4f10						CALLMONITOR 
4f10 cd aa fd			call debug_vector  
4f13				endm  
# End of macro CALLMONITOR
4f13					endif 
4f13 18 d8				jr .findchar 
4f15			 
4f15			 
4f15 c5			.foundchar:	push bc 
4f16 e1					pop hl 
4f17 18 03				jr .findexit 
4f19			 
4f19			 
4f19							 
4f19			 
4f19			.finddone:     ; got to end of string with no find 
4f19 21 00 00				ld hl, 0 
4f1c			.findexit: 
4f1c			 
4f1c					if DEBUG_FORTH_WORDS 
4f1c						DMARK "FNd" 
4f1c f5				push af  
4f1d 3a 31 4f			ld a, (.dmark)  
4f20 32 a0 fd			ld (debug_mark),a  
4f23 3a 32 4f			ld a, (.dmark+1)  
4f26 32 a1 fd			ld (debug_mark+1),a  
4f29 3a 33 4f			ld a, (.dmark+2)  
4f2c 32 a2 fd			ld (debug_mark+2),a  
4f2f 18 03			jr .pastdmark  
4f31 ..			.dmark: db "FNd"  
4f34 f1			.pastdmark: pop af  
4f35			endm  
# End of macro DMARK
4f35						CALLMONITOR 
4f35 cd aa fd			call debug_vector  
4f38				endm  
# End of macro CALLMONITOR
4f38					endif 
4f38 cd 48 20			call forth_push_numhl 
4f3b			 
4f3b				       NEXTW 
4f3b c3 38 24			jp macro_next 
4f3e				endm 
# End of macro NEXTW
4f3e			 
4f3e			.LEN: 
4f3e				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4f3e 4c				db WORD_SYS_CORE+56             
4f3f a8 4f			dw .ASC            
4f41 06				db 5 + 1 
4f42 .. 00			db "COUNT",0              
4f48				endm 
# End of macro CWHEAD
4f48			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4f48			 
4f48					if DEBUG_FORTH_WORDS_KEY 
4f48						DMARK "CNT" 
4f48 f5				push af  
4f49 3a 5d 4f			ld a, (.dmark)  
4f4c 32 a0 fd			ld (debug_mark),a  
4f4f 3a 5e 4f			ld a, (.dmark+1)  
4f52 32 a1 fd			ld (debug_mark+1),a  
4f55 3a 5f 4f			ld a, (.dmark+2)  
4f58 32 a2 fd			ld (debug_mark+2),a  
4f5b 18 03			jr .pastdmark  
4f5d ..			.dmark: db "CNT"  
4f60 f1			.pastdmark: pop af  
4f61			endm  
# End of macro DMARK
4f61						CALLMONITOR 
4f61 cd aa fd			call debug_vector  
4f64				endm  
# End of macro CALLMONITOR
4f64					endif 
4f64			; TODO check string type 
4f64					FORTH_DSP_VALUE 
4f64 cd 36 22			call macro_forth_dsp_value 
4f67				endm 
# End of macro FORTH_DSP_VALUE
4f67			 
4f67			 
4f67					if DEBUG_FORTH_WORDS 
4f67						DMARK "CN?" 
4f67 f5				push af  
4f68 3a 7c 4f			ld a, (.dmark)  
4f6b 32 a0 fd			ld (debug_mark),a  
4f6e 3a 7d 4f			ld a, (.dmark+1)  
4f71 32 a1 fd			ld (debug_mark+1),a  
4f74 3a 7e 4f			ld a, (.dmark+2)  
4f77 32 a2 fd			ld (debug_mark+2),a  
4f7a 18 03			jr .pastdmark  
4f7c ..			.dmark: db "CN?"  
4f7f f1			.pastdmark: pop af  
4f80			endm  
# End of macro DMARK
4f80						CALLMONITOR 
4f80 cd aa fd			call debug_vector  
4f83				endm  
# End of macro CALLMONITOR
4f83					endif 
4f83 cd 44 13				call strlenz 
4f86					if DEBUG_FORTH_WORDS 
4f86						DMARK "CNl" 
4f86 f5				push af  
4f87 3a 9b 4f			ld a, (.dmark)  
4f8a 32 a0 fd			ld (debug_mark),a  
4f8d 3a 9c 4f			ld a, (.dmark+1)  
4f90 32 a1 fd			ld (debug_mark+1),a  
4f93 3a 9d 4f			ld a, (.dmark+2)  
4f96 32 a2 fd			ld (debug_mark+2),a  
4f99 18 03			jr .pastdmark  
4f9b ..			.dmark: db "CNl"  
4f9e f1			.pastdmark: pop af  
4f9f			endm  
# End of macro DMARK
4f9f						CALLMONITOR 
4f9f cd aa fd			call debug_vector  
4fa2				endm  
# End of macro CALLMONITOR
4fa2					endif 
4fa2			 
4fa2 cd 48 20				call forth_push_numhl 
4fa5			 
4fa5			 
4fa5			 
4fa5				       NEXTW 
4fa5 c3 38 24			jp macro_next 
4fa8				endm 
# End of macro NEXTW
4fa8			.ASC: 
4fa8				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4fa8 4d				db WORD_SYS_CORE+57             
4fa9 16 50			dw .CHR            
4fab 04				db 3 + 1 
4fac .. 00			db "ASC",0              
4fb0				endm 
# End of macro CWHEAD
4fb0			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4fb0					if DEBUG_FORTH_WORDS_KEY 
4fb0						DMARK "ASC" 
4fb0 f5				push af  
4fb1 3a c5 4f			ld a, (.dmark)  
4fb4 32 a0 fd			ld (debug_mark),a  
4fb7 3a c6 4f			ld a, (.dmark+1)  
4fba 32 a1 fd			ld (debug_mark+1),a  
4fbd 3a c7 4f			ld a, (.dmark+2)  
4fc0 32 a2 fd			ld (debug_mark+2),a  
4fc3 18 03			jr .pastdmark  
4fc5 ..			.dmark: db "ASC"  
4fc8 f1			.pastdmark: pop af  
4fc9			endm  
# End of macro DMARK
4fc9						CALLMONITOR 
4fc9 cd aa fd			call debug_vector  
4fcc				endm  
# End of macro CALLMONITOR
4fcc					endif 
4fcc					FORTH_DSP_VALUE 
4fcc cd 36 22			call macro_forth_dsp_value 
4fcf				endm 
# End of macro FORTH_DSP_VALUE
4fcf					;v5 FORTH_DSP_VALUE 
4fcf			;		inc hl      ; now at start of numeric as string 
4fcf			 
4fcf e5					push hl 
4fd0			 
4fd0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4fd0 cd 05 23			call macro_forth_dsp_pop 
4fd3				endm 
# End of macro FORTH_DSP_POP
4fd3			 
4fd3 e1					pop hl 
4fd4			 
4fd4					if DEBUG_FORTH_WORDS 
4fd4						DMARK "AS1" 
4fd4 f5				push af  
4fd5 3a e9 4f			ld a, (.dmark)  
4fd8 32 a0 fd			ld (debug_mark),a  
4fdb 3a ea 4f			ld a, (.dmark+1)  
4fde 32 a1 fd			ld (debug_mark+1),a  
4fe1 3a eb 4f			ld a, (.dmark+2)  
4fe4 32 a2 fd			ld (debug_mark+2),a  
4fe7 18 03			jr .pastdmark  
4fe9 ..			.dmark: db "AS1"  
4fec f1			.pastdmark: pop af  
4fed			endm  
# End of macro DMARK
4fed						CALLMONITOR 
4fed cd aa fd			call debug_vector  
4ff0				endm  
# End of macro CALLMONITOR
4ff0					endif 
4ff0					; push the content of a onto the stack as a value 
4ff0			 
4ff0 7e					ld a,(hl)   ; get char 
4ff1 26 00				ld h,0 
4ff3 6f					ld l,a 
4ff4					if DEBUG_FORTH_WORDS 
4ff4						DMARK "AS2" 
4ff4 f5				push af  
4ff5 3a 09 50			ld a, (.dmark)  
4ff8 32 a0 fd			ld (debug_mark),a  
4ffb 3a 0a 50			ld a, (.dmark+1)  
4ffe 32 a1 fd			ld (debug_mark+1),a  
5001 3a 0b 50			ld a, (.dmark+2)  
5004 32 a2 fd			ld (debug_mark+2),a  
5007 18 03			jr .pastdmark  
5009 ..			.dmark: db "AS2"  
500c f1			.pastdmark: pop af  
500d			endm  
# End of macro DMARK
500d						CALLMONITOR 
500d cd aa fd			call debug_vector  
5010				endm  
# End of macro CALLMONITOR
5010					endif 
5010 cd 48 20				call forth_push_numhl 
5013			 
5013				       NEXTW 
5013 c3 38 24			jp macro_next 
5016				endm 
# End of macro NEXTW
5016			 
5016			.CHR: 
5016				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
5016 4d				db WORD_SYS_CORE+57             
5017 52 50			dw .ENDSTR            
5019 04				db 3 + 1 
501a .. 00			db "CHR",0              
501e				endm 
# End of macro CWHEAD
501e			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
501e					if DEBUG_FORTH_WORDS_KEY 
501e						DMARK "CHR" 
501e f5				push af  
501f 3a 33 50			ld a, (.dmark)  
5022 32 a0 fd			ld (debug_mark),a  
5025 3a 34 50			ld a, (.dmark+1)  
5028 32 a1 fd			ld (debug_mark+1),a  
502b 3a 35 50			ld a, (.dmark+2)  
502e 32 a2 fd			ld (debug_mark+2),a  
5031 18 03			jr .pastdmark  
5033 ..			.dmark: db "CHR"  
5036 f1			.pastdmark: pop af  
5037			endm  
# End of macro DMARK
5037						CALLMONITOR 
5037 cd aa fd			call debug_vector  
503a				endm  
# End of macro CALLMONITOR
503a					endif 
503a					FORTH_DSP_VALUEHL 
503a cd 4d 22			call macro_dsp_valuehl 
503d				endm 
# End of macro FORTH_DSP_VALUEHL
503d			 
503d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
503d cd 05 23			call macro_forth_dsp_pop 
5040				endm 
# End of macro FORTH_DSP_POP
5040			 
5040					; save asci byte as a zero term string and push string 
5040			 
5040 7d					ld a,l 
5041 32 f6 f0				ld (scratch), a 
5044			 
5044 3e 00				ld a, 0 
5046 32 f7 f0				ld (scratch+1), a 
5049			 
5049 21 f6 f0				ld hl, scratch 
504c cd b6 20				call forth_push_str 
504f			 
504f			 
504f				       NEXTW 
504f c3 38 24			jp macro_next 
5052				endm 
# End of macro NEXTW
5052			 
5052			 
5052			 
5052			 
5052			.ENDSTR: 
5052			; eof 
5052			 
# End of file forth_words_str.asm
5052			include "forth_words_key.asm" 
5052			 
5052			; | ## Keyboard Words 
5052			 
5052			.KEY: 
5052				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
5052 3e				db WORD_SYS_CORE+42             
5053 82 50			dw .KEYDB            
5055 04				db 3 + 1 
5056 .. 00			db "KEY",0              
505a				endm 
# End of macro CWHEAD
505a			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
505a			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
505a			; | | Can use something like this to process: 
505a			; | | > repeat active . key ?dup if emit then #1 until  
505a			 
505a					if DEBUG_FORTH_WORDS_KEY 
505a						DMARK "KEY" 
505a f5				push af  
505b 3a 6f 50			ld a, (.dmark)  
505e 32 a0 fd			ld (debug_mark),a  
5061 3a 70 50			ld a, (.dmark+1)  
5064 32 a1 fd			ld (debug_mark+1),a  
5067 3a 71 50			ld a, (.dmark+2)  
506a 32 a2 fd			ld (debug_mark+2),a  
506d 18 03			jr .pastdmark  
506f ..			.dmark: db "KEY"  
5072 f1			.pastdmark: pop af  
5073			endm  
# End of macro DMARK
5073						CALLMONITOR 
5073 cd aa fd			call debug_vector  
5076				endm  
# End of macro CALLMONITOR
5076					endif 
5076			; TODO currently waits 
5076 cd 70 77				call cinndb 
5079					;call cin_wait 
5079 6f					ld l, a 
507a 26 00				ld h, 0 
507c cd 48 20				call forth_push_numhl 
507f					NEXTW 
507f c3 38 24			jp macro_next 
5082				endm 
# End of macro NEXTW
5082			.KEYDB: 
5082				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
5082 3e				db WORD_SYS_CORE+42             
5083 b4 50			dw .WAITK            
5085 06				db 5 + 1 
5086 .. 00			db "KEYDB",0              
508c				endm 
# End of macro CWHEAD
508c			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
508c			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
508c			; | | Can use something like this to process: 
508c			; | | > repeat active . key ?dup if emit then #1 until  
508c			 
508c					if DEBUG_FORTH_WORDS_KEY 
508c						DMARK "KEB" 
508c f5				push af  
508d 3a a1 50			ld a, (.dmark)  
5090 32 a0 fd			ld (debug_mark),a  
5093 3a a2 50			ld a, (.dmark+1)  
5096 32 a1 fd			ld (debug_mark+1),a  
5099 3a a3 50			ld a, (.dmark+2)  
509c 32 a2 fd			ld (debug_mark+2),a  
509f 18 03			jr .pastdmark  
50a1 ..			.dmark: db "KEB"  
50a4 f1			.pastdmark: pop af  
50a5			endm  
# End of macro DMARK
50a5						CALLMONITOR 
50a5 cd aa fd			call debug_vector  
50a8				endm  
# End of macro CALLMONITOR
50a8					endif 
50a8			; TODO currently waits 
50a8 cd 5c 77				call cin 
50ab					;call cin_wait 
50ab 6f					ld l, a 
50ac 26 00				ld h, 0 
50ae cd 48 20				call forth_push_numhl 
50b1					NEXTW 
50b1 c3 38 24			jp macro_next 
50b4				endm 
# End of macro NEXTW
50b4			.WAITK: 
50b4				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
50b4 3f				db WORD_SYS_CORE+43             
50b5 e6 50			dw .ACCEPT            
50b7 06				db 5 + 1 
50b8 .. 00			db "WAITK",0              
50be				endm 
# End of macro CWHEAD
50be			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
50be					if DEBUG_FORTH_WORDS_KEY 
50be						DMARK "WAI" 
50be f5				push af  
50bf 3a d3 50			ld a, (.dmark)  
50c2 32 a0 fd			ld (debug_mark),a  
50c5 3a d4 50			ld a, (.dmark+1)  
50c8 32 a1 fd			ld (debug_mark+1),a  
50cb 3a d5 50			ld a, (.dmark+2)  
50ce 32 a2 fd			ld (debug_mark+2),a  
50d1 18 03			jr .pastdmark  
50d3 ..			.dmark: db "WAI"  
50d6 f1			.pastdmark: pop af  
50d7			endm  
# End of macro DMARK
50d7						CALLMONITOR 
50d7 cd aa fd			call debug_vector  
50da				endm  
# End of macro CALLMONITOR
50da					endif 
50da cd 4b 77				call cin_wait 
50dd 6f					ld l, a 
50de 26 00				ld h, 0 
50e0 cd 48 20				call forth_push_numhl 
50e3					NEXTW 
50e3 c3 38 24			jp macro_next 
50e6				endm 
# End of macro NEXTW
50e6			.ACCEPT: 
50e6				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
50e6 40				db WORD_SYS_CORE+44             
50e7 44 51			dw .EDIT            
50e9 07				db 6 + 1 
50ea .. 00			db "ACCEPT",0              
50f1				endm 
# End of macro CWHEAD
50f1			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
50f1					; TODO crashes on push 
50f1					if DEBUG_FORTH_WORDS_KEY 
50f1						DMARK "ACC" 
50f1 f5				push af  
50f2 3a 06 51			ld a, (.dmark)  
50f5 32 a0 fd			ld (debug_mark),a  
50f8 3a 07 51			ld a, (.dmark+1)  
50fb 32 a1 fd			ld (debug_mark+1),a  
50fe 3a 08 51			ld a, (.dmark+2)  
5101 32 a2 fd			ld (debug_mark+2),a  
5104 18 03			jr .pastdmark  
5106 ..			.dmark: db "ACC"  
5109 f1			.pastdmark: pop af  
510a			endm  
# End of macro DMARK
510a						CALLMONITOR 
510a cd aa fd			call debug_vector  
510d				endm  
# End of macro CALLMONITOR
510d					endif 
510d 21 f4 f2				ld hl, os_input 
5110 3e 00				ld a, 0 
5112 77					ld (hl),a 
5113 3a 93 f9				ld a,(f_cursor_ptr) 
5116 16 64				ld d, 100 
5118 0e 00				ld c, 0 
511a 1e 28				ld e, 40 
511c cd 0b 10				call input_str 
511f					; TODO perhaps do a type check and wrap in quotes if not a number 
511f 21 f4 f2				ld hl, os_input 
5122					if DEBUG_FORTH_WORDS 
5122						DMARK "AC1" 
5122 f5				push af  
5123 3a 37 51			ld a, (.dmark)  
5126 32 a0 fd			ld (debug_mark),a  
5129 3a 38 51			ld a, (.dmark+1)  
512c 32 a1 fd			ld (debug_mark+1),a  
512f 3a 39 51			ld a, (.dmark+2)  
5132 32 a2 fd			ld (debug_mark+2),a  
5135 18 03			jr .pastdmark  
5137 ..			.dmark: db "AC1"  
513a f1			.pastdmark: pop af  
513b			endm  
# End of macro DMARK
513b						CALLMONITOR 
513b cd aa fd			call debug_vector  
513e				endm  
# End of macro CALLMONITOR
513e					endif 
513e cd b6 20				call forth_push_str 
5141					NEXTW 
5141 c3 38 24			jp macro_next 
5144				endm 
# End of macro NEXTW
5144			 
5144			.EDIT: 
5144				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
5144 40				db WORD_SYS_CORE+44             
5145 e6 51			dw .DEDIT            
5147 05				db 4 + 1 
5148 .. 00			db "EDIT",0              
514d				endm 
# End of macro CWHEAD
514d			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
514d			 
514d					; TODO does not copy from stack 
514d					if DEBUG_FORTH_WORDS_KEY 
514d						DMARK "EDT" 
514d f5				push af  
514e 3a 62 51			ld a, (.dmark)  
5151 32 a0 fd			ld (debug_mark),a  
5154 3a 63 51			ld a, (.dmark+1)  
5157 32 a1 fd			ld (debug_mark+1),a  
515a 3a 64 51			ld a, (.dmark+2)  
515d 32 a2 fd			ld (debug_mark+2),a  
5160 18 03			jr .pastdmark  
5162 ..			.dmark: db "EDT"  
5165 f1			.pastdmark: pop af  
5166			endm  
# End of macro DMARK
5166						CALLMONITOR 
5166 cd aa fd			call debug_vector  
5169				endm  
# End of macro CALLMONITOR
5169					endif 
5169			 
5169					;FORTH_DSP 
5169					FORTH_DSP_VALUEHL 
5169 cd 4d 22			call macro_dsp_valuehl 
516c				endm 
# End of macro FORTH_DSP_VALUEHL
516c			;		inc hl    ; TODO do type check 
516c			 
516c			;		call get_word_hl 
516c e5					push hl 
516d					if DEBUG_FORTH_WORDS 
516d						DMARK "EDp" 
516d f5				push af  
516e 3a 82 51			ld a, (.dmark)  
5171 32 a0 fd			ld (debug_mark),a  
5174 3a 83 51			ld a, (.dmark+1)  
5177 32 a1 fd			ld (debug_mark+1),a  
517a 3a 84 51			ld a, (.dmark+2)  
517d 32 a2 fd			ld (debug_mark+2),a  
5180 18 03			jr .pastdmark  
5182 ..			.dmark: db "EDp"  
5185 f1			.pastdmark: pop af  
5186			endm  
# End of macro DMARK
5186						CALLMONITOR 
5186 cd aa fd			call debug_vector  
5189				endm  
# End of macro CALLMONITOR
5189					endif 
5189				;	ld a, 0 
5189 cd 44 13				call strlenz 
518c 23					inc hl 
518d			 
518d 06 00				ld b, 0 
518f 4d					ld c, l 
5190			 
5190 e1					pop hl 
5191 11 f4 f2				ld de, os_input 
5194					if DEBUG_FORTH_WORDS_KEY 
5194						DMARK "EDc" 
5194 f5				push af  
5195 3a a9 51			ld a, (.dmark)  
5198 32 a0 fd			ld (debug_mark),a  
519b 3a aa 51			ld a, (.dmark+1)  
519e 32 a1 fd			ld (debug_mark+1),a  
51a1 3a ab 51			ld a, (.dmark+2)  
51a4 32 a2 fd			ld (debug_mark+2),a  
51a7 18 03			jr .pastdmark  
51a9 ..			.dmark: db "EDc"  
51ac f1			.pastdmark: pop af  
51ad			endm  
# End of macro DMARK
51ad						CALLMONITOR 
51ad cd aa fd			call debug_vector  
51b0				endm  
# End of macro CALLMONITOR
51b0					endif 
51b0 ed b0				ldir 
51b2			 
51b2			 
51b2 21 f4 f2				ld hl, os_input 
51b5					;ld a, 0 
51b5					;ld (hl),a 
51b5 3a 93 f9				ld a,(f_cursor_ptr) 
51b8 16 64				ld d, 100 
51ba 0e 00				ld c, 0 
51bc 1e 28				ld e, 40 
51be cd 0b 10				call input_str 
51c1					; TODO perhaps do a type check and wrap in quotes if not a number 
51c1 21 f4 f2				ld hl, os_input 
51c4					if DEBUG_FORTH_WORDS 
51c4						DMARK "ED1" 
51c4 f5				push af  
51c5 3a d9 51			ld a, (.dmark)  
51c8 32 a0 fd			ld (debug_mark),a  
51cb 3a da 51			ld a, (.dmark+1)  
51ce 32 a1 fd			ld (debug_mark+1),a  
51d1 3a db 51			ld a, (.dmark+2)  
51d4 32 a2 fd			ld (debug_mark+2),a  
51d7 18 03			jr .pastdmark  
51d9 ..			.dmark: db "ED1"  
51dc f1			.pastdmark: pop af  
51dd			endm  
# End of macro DMARK
51dd						CALLMONITOR 
51dd cd aa fd			call debug_vector  
51e0				endm  
# End of macro CALLMONITOR
51e0					endif 
51e0 cd b6 20				call forth_push_str 
51e3					NEXTW 
51e3 c3 38 24			jp macro_next 
51e6				endm 
# End of macro NEXTW
51e6			 
51e6			.DEDIT: 
51e6				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
51e6 40				db WORD_SYS_CORE+44             
51e7 48 52			dw .ENDKEY            
51e9 06				db 5 + 1 
51ea .. 00			db "DEDIT",0              
51f0				endm 
# End of macro CWHEAD
51f0			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
51f0			 
51f0					; TODO does not copy from stack 
51f0					if DEBUG_FORTH_WORDS_KEY 
51f0						DMARK "DED" 
51f0 f5				push af  
51f1 3a 05 52			ld a, (.dmark)  
51f4 32 a0 fd			ld (debug_mark),a  
51f7 3a 06 52			ld a, (.dmark+1)  
51fa 32 a1 fd			ld (debug_mark+1),a  
51fd 3a 07 52			ld a, (.dmark+2)  
5200 32 a2 fd			ld (debug_mark+2),a  
5203 18 03			jr .pastdmark  
5205 ..			.dmark: db "DED"  
5208 f1			.pastdmark: pop af  
5209			endm  
# End of macro DMARK
5209						CALLMONITOR 
5209 cd aa fd			call debug_vector  
520c				endm  
# End of macro CALLMONITOR
520c					endif 
520c			 
520c					;FORTH_DSP 
520c					FORTH_DSP_VALUEHL 
520c cd 4d 22			call macro_dsp_valuehl 
520f				endm 
# End of macro FORTH_DSP_VALUEHL
520f			;		inc hl    ; TODO do type check 
520f			 
520f			;		call get_word_hl 
520f e5					push hl 
5210 e5					push hl 
5211					FORTH_DSP_POP 
5211 cd 05 23			call macro_forth_dsp_pop 
5214				endm 
# End of macro FORTH_DSP_POP
5214 e1					pop hl 
5215					if DEBUG_FORTH_WORDS 
5215						DMARK "EDp" 
5215 f5				push af  
5216 3a 2a 52			ld a, (.dmark)  
5219 32 a0 fd			ld (debug_mark),a  
521c 3a 2b 52			ld a, (.dmark+1)  
521f 32 a1 fd			ld (debug_mark+1),a  
5222 3a 2c 52			ld a, (.dmark+2)  
5225 32 a2 fd			ld (debug_mark+2),a  
5228 18 03			jr .pastdmark  
522a ..			.dmark: db "EDp"  
522d f1			.pastdmark: pop af  
522e			endm  
# End of macro DMARK
522e						CALLMONITOR 
522e cd aa fd			call debug_vector  
5231				endm  
# End of macro CALLMONITOR
5231					endif 
5231				;	ld a, 0 
5231 cd 44 13				call strlenz 
5234 23					inc hl 
5235			 
5235 06 00				ld b, 0 
5237 4d					ld c, l 
5238			 
5238 e1					pop hl 
5239			 
5239					;ld a, 0 
5239					;ld (hl),a 
5239 3a 93 f9				ld a,(f_cursor_ptr) 
523c 16 64				ld d, 100 
523e 0e 00				ld c, 0 
5240 1e 28				ld e, 40 
5242 cd 0b 10				call input_str 
5245					; TODO perhaps do a type check and wrap in quotes if not a number 
5245					NEXTW 
5245 c3 38 24			jp macro_next 
5248				endm 
# End of macro NEXTW
5248			 
5248			 
5248			.ENDKEY: 
5248			; eof 
5248			 
# End of file forth_words_key.asm
5248			include "forth_words_const.asm" 
5248			 
5248			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
5248			 
5248			 
5248			.SPITIME: 
5248				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
5248 77				db WORD_SYS_CORE+99             
5249 5d 52			dw .VA            
524b 08				db 7 + 1 
524c .. 00			db "SPITIME",0              
5254				endm 
# End of macro CWHEAD
5254			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
5254			; 
5254			; | | If using BANK devices then leave as is. 
5254			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
5254			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
5254			 
5254 21 99 f9				ld hl, spi_clktime  
5257 cd 48 20				call forth_push_numhl 
525a			 
525a					NEXTW 
525a c3 38 24			jp macro_next 
525d				endm 
# End of macro NEXTW
525d			 
525d			 
525d			.VA: 
525d				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
525d 77				db WORD_SYS_CORE+99             
525e 6d 52			dw .SYMBOL            
5260 03				db 2 + 1 
5261 .. 00			db "VA",0              
5264				endm 
# End of macro CWHEAD
5264			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
5264 21 5d f9				ld hl, cli_var_array 
5267 cd 48 20				call forth_push_numhl 
526a			 
526a					NEXTW 
526a c3 38 24			jp macro_next 
526d				endm 
# End of macro NEXTW
526d			 
526d			.SYMBOL: 
526d				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
526d 77				db WORD_SYS_CORE+99             
526e 77 53			dw .ENDCONST            
5270 07				db 6 + 1 
5271 .. 00			db "SYMBOL",0              
5278				endm 
# End of macro CWHEAD
5278			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
5278			; | 
5278			; | | The value is the number reference and the final address is pushed to stack 
5278			 
5278			; | | ``` 
5278			; | | dw sym_table 
5278			; | | dw nmi_vector 
5278			; | | dw cli_autodisplay 
5278			; | | dw cli_data_sp 
5278			; | | dw cli_data_stack 
5278			; | | dw cli_loop_sp 
5278			; | | dw cli_loop_stack 
5278			; | | dw cli_var_array 
5278			; | | dw cursor_col 
5278			; | | dw cursor_ptr 
5278			; | | ; 10 
5278			; | | dw cursor_row 
5278			; | | dw debug_mark 
5278			; | | dw display_fb0 
5278			; | | dw display_fb1 
5278			; | | dw display_fb2 
5278			; | | dw display_fb3 
5278			; | | dw display_fb_active 
5278			; | | dw execscratch 
5278			; | | dw f_cursor_ptr 
5278			; | | dw hardware_word 
5278			; | | ;20 
5278			; | | dw input_at_cursor 
5278			; | | dw input_at_pos 
5278			; | | dw input_cur_flash 
5278			; | | dw input_cur_onoff 
5278			; | | dw input_cursor 
5278			; | | dw input_display_size 
5278			; | | dw input_len 
5278			; | | dw input_ptr 
5278			; | | dw input_size 
5278			; | | dw input_start 
5278			; | | ; 30 
5278			; | | dw input_str 
5278			; | | dw input_under_cursor 
5278			; | | dw os_cli_cmd 
5278			; | | dw os_cur_ptr 
5278			; | | dw os_current_i 
5278			; | | dw os_input 
5278			; | | dw os_last_cmd 
5278			; | | dw os_last_new_uword 
5278			; | | dw debug_vector 
5278			; | | dw os_view_hl 
5278			; | | ;40 
5278			; | | dw os_word_scratch 
5278			; | | dw portbctl 
5278			; | | dw portbdata 
5278			; | | dw spi_cartdev 
5278			; | | dw spi_cartdev2 
5278			; | | dw spi_clktime 
5278			; | | dw spi_device 
5278			; | | dw spi_device_id 
5278			; | | dw spi_portbyte 
5278			; | | dw stackstore 
5278			; | | ; 50 
5278			; | | if STORAGE_SE 
5278			; | | dw storage_actl 
5278			; | | dw storage_adata 
5278			; | | else 
5278			; | | dw 0 
5278			; | | dw 0 
5278			; | | endif 
5278			; | | dw storage_append 
5278			; | | if STORAGE_SE 
5278			; | | dw storage_bctl 
5278			; | | else 
5278			; | | dw 0 
5278			; | | endif 
5278			; | | dw store_bank_active 
5278			; | | dw store_filecache 
5278			; | | dw store_longread 
5278			; | | dw store_openaddr 
5278			; | | dw store_openext 
5278			; | | dw store_openmaxext 
5278			; | | ; 60 
5278			; | | dw store_page 
5278			; | | dw store_readbuf 
5278			; | | dw store_readcont 
5278			; | | dw store_readptr 
5278			; | | dw store_tmpext 
5278			; | | dw store_tmpid 
5278			; | | dw store_tmppageid 
5278			; | | dw malloc 
5278			; | | dw free 
5278			; | | dw cin 
5278			; | | ; 70 
5278			; | | dw cin_wait 
5278			; | | dw forth_push_numhl 
5278			; | | dw forth_push_str 
5278			; | | ``` 
5278			 
5278					if DEBUG_FORTH_WORDS_KEY 
5278						DMARK "SYM" 
5278 f5				push af  
5279 3a 8d 52			ld a, (.dmark)  
527c 32 a0 fd			ld (debug_mark),a  
527f 3a 8e 52			ld a, (.dmark+1)  
5282 32 a1 fd			ld (debug_mark+1),a  
5285 3a 8f 52			ld a, (.dmark+2)  
5288 32 a2 fd			ld (debug_mark+2),a  
528b 18 03			jr .pastdmark  
528d ..			.dmark: db "SYM"  
5290 f1			.pastdmark: pop af  
5291			endm  
# End of macro DMARK
5291						CALLMONITOR 
5291 cd aa fd			call debug_vector  
5294				endm  
# End of macro CALLMONITOR
5294					endif 
5294			 
5294					FORTH_DSP_VALUEHL 
5294 cd 4d 22			call macro_dsp_valuehl 
5297				endm 
# End of macro FORTH_DSP_VALUEHL
5297			 
5297 7d					ld a, l     
5298			 
5298			 
5298					if DEBUG_FORTH_WORDS 
5298						DMARK "SY1" 
5298 f5				push af  
5299 3a ad 52			ld a, (.dmark)  
529c 32 a0 fd			ld (debug_mark),a  
529f 3a ae 52			ld a, (.dmark+1)  
52a2 32 a1 fd			ld (debug_mark+1),a  
52a5 3a af 52			ld a, (.dmark+2)  
52a8 32 a2 fd			ld (debug_mark+2),a  
52ab 18 03			jr .pastdmark  
52ad ..			.dmark: db "SY1"  
52b0 f1			.pastdmark: pop af  
52b1			endm  
# End of macro DMARK
52b1						CALLMONITOR 
52b1 cd aa fd			call debug_vector  
52b4				endm  
# End of macro CALLMONITOR
52b4					endif 
52b4					 
52b4 f5					push af	 
52b5					FORTH_DSP_POP 
52b5 cd 05 23			call macro_forth_dsp_pop 
52b8				endm 
# End of macro FORTH_DSP_POP
52b8 f1					pop af 
52b9			 
52b9 cb 27				sla a  
52bb				 
52bb					 
52bb					if DEBUG_FORTH_WORDS 
52bb						DMARK "SY" 
52bb f5				push af  
52bc 3a d0 52			ld a, (.dmark)  
52bf 32 a0 fd			ld (debug_mark),a  
52c2 3a d1 52			ld a, (.dmark+1)  
52c5 32 a1 fd			ld (debug_mark+1),a  
52c8 3a d2 52			ld a, (.dmark+2)  
52cb 32 a2 fd			ld (debug_mark+2),a  
52ce 18 02			jr .pastdmark  
52d0 ..			.dmark: db "SY"  
52d2 f1			.pastdmark: pop af  
52d3			endm  
# End of macro DMARK
52d3						CALLMONITOR 
52d3 cd aa fd			call debug_vector  
52d6				endm  
# End of macro CALLMONITOR
52d6					endif 
52d6			 
52d6 21 e5 52				ld hl, sym_table 
52d9 cd de 0f				call addatohl 
52dc cd ba 23				call loadwordinhl 
52df cd 48 20				call forth_push_numhl 
52e2			 
52e2			 
52e2				       NEXTW 
52e2 c3 38 24			jp macro_next 
52e5				endm 
# End of macro NEXTW
52e5			 
52e5			sym_table: 
52e5			 
52e5			; 0 
52e5 e5 52		dw sym_table 
52e7 ad fd		dw nmi_vector 
52e9 71 f9		dw cli_autodisplay 
52eb 23 f9		dw cli_data_sp 
52ed 5d f6		dw cli_data_stack 
52ef 25 f9		dw cli_loop_sp 
52f1 5f f8		dw cli_loop_stack 
52f3 5d f9		dw cli_var_array 
52f5 fa fa		dw cursor_col 
52f7 f8 fa		dw cursor_ptr 
52f9			; 10 
52f9 f9 fa		dw cursor_row 
52fb a0 fd		dw debug_mark 
52fd e6 fc		dw display_fb0 
52ff 45 fc		dw display_fb1 
5301 03 fb		dw display_fb2 
5303 a4 fb		dw display_fb3 
5305 01 fb		dw display_fb_active 
5307 f5 f1		dw execscratch 
5309 93 f9		dw f_cursor_ptr 
530b b0 fd		dw hardware_word 
530d			;20 
530d 97 fd		dw input_at_cursor 
530f 99 fd		dw input_at_pos 
5311 95 fd		dw input_cur_flash 
5313 94 fd		dw input_cur_onoff 
5315 8a fd		dw input_cursor 
5317 9a fd		dw input_display_size 
5319 8f fd		dw input_len 
531b 9e fd		dw input_ptr 
531d 9b fd		dw input_size 
531f 9c fd		dw input_start 
5321			; 30 
5321 0b 10		dw input_str 
5323 98 fd		dw input_under_cursor 
5325 1d f4		dw os_cli_cmd 
5327 19 f4		dw os_cur_ptr 
5329 1b f4		dw os_current_i 
532b f4 f2		dw os_input 
532d 1c f5		dw os_last_cmd 
532f f3 f3		dw os_last_new_uword 
5331 aa fd		dw debug_vector 
5333 d8 f0		dw os_view_hl 
5335			;40 
5335 fb f3		dw os_word_scratch 
5337 c3 00		dw portbctl 
5339 c1 00		dw portbdata 
533b 98 f9		dw spi_cartdev 
533d 97 f9		dw spi_cartdev2 
533f 99 f9		dw spi_clktime 
5341 95 f9		dw spi_device 
5343 94 f9		dw spi_device_id 
5345 96 f9		dw spi_portbyte 
5347 dc fa		dw stackstore 
5349			; 50 
5349			if STORAGE_SE 
5349 82 00		dw storage_actl 
534b 80 00		dw storage_adata 
534d			else 
534d			dw 0 
534d			dw 0 
534d			endif 
534d 64 0b		dw storage_append 
534f			if STORAGE_SE 
534f 83 00		dw storage_bctl 
5351			else 
5351			dw 0 
5351			endif 
5351 c8 fa		dw store_bank_active 
5353 9c f9		dw store_filecache 
5355 aa f9		dw store_longread 
5357 a0 f9		dw store_openaddr 
5359 9f f9		dw store_openext 
535b 9e f9		dw store_openmaxext 
535d			; 60 
535d af f9		dw store_page 
535f ab f9		dw store_readbuf 
5361 a2 f9		dw store_readcont 
5363 ad f9		dw store_readptr 
5365 a2 f9		dw store_tmpext 
5367 a3 f9		dw store_tmpid 
5369 9a f9		dw store_tmppageid 
536b b9 13		dw malloc 
536d 83 14		dw free 
536f 5c 77		dw cin 
5371			; 70 
5371 4b 77		dw cin_wait 
5373 48 20		dw forth_push_numhl 
5375 b6 20		dw forth_push_str 
5377			 
5377			 
5377			.ENDCONST: 
5377			 
5377			; eof 
5377			 
5377			 
# End of file forth_words_const.asm
5377			 
5377			if STORAGE_SE 
5377			   	include "forth_words_storage.asm" 
5377			 
5377			; | ## Fixed Storage Words 
5377			 
5377			.RENAME: 
5377			  
5377				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
5377 3a				db WORD_SYS_CORE+38             
5378 6d 54			dw .RECORD            
537a 07				db 6 + 1 
537b .. 00			db "RENAME",0              
5382				endm 
# End of macro CWHEAD
5382			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
5382			; | | > [!NOTE] 
5382			; | | > Compatible with PicoSPINet  
5382					if DEBUG_FORTH_WORDS_KEY 
5382						DMARK "REN" 
5382 f5				push af  
5383 3a 97 53			ld a, (.dmark)  
5386 32 a0 fd			ld (debug_mark),a  
5389 3a 98 53			ld a, (.dmark+1)  
538c 32 a1 fd			ld (debug_mark+1),a  
538f 3a 99 53			ld a, (.dmark+2)  
5392 32 a2 fd			ld (debug_mark+2),a  
5395 18 03			jr .pastdmark  
5397 ..			.dmark: db "REN"  
539a f1			.pastdmark: pop af  
539b			endm  
# End of macro DMARK
539b						CALLMONITOR 
539b cd aa fd			call debug_vector  
539e				endm  
# End of macro CALLMONITOR
539e					endif 
539e			 
539e			 
539e					; preserve some internal vars used by other file handing routines 
539e			 
539e 2a a0 f9				ld hl, (store_openaddr) 
53a1 e5					push hl 
53a2 3a a2 f9				ld a, (store_readcont) 
53a5 f5					push af 
53a6			 
53a6					FORTH_DSP_VALUEHL 
53a6 cd 4d 22			call macro_dsp_valuehl 
53a9				endm 
# End of macro FORTH_DSP_VALUEHL
53a9			 
53a9					; move ext and id around for the file header 
53a9			 
53a9 65					ld h, l 
53aa 2e 00				ld l, 0 
53ac			 
53ac e5					push hl    ; id 
53ad			 
53ad					FORTH_DSP_POP 
53ad cd 05 23			call macro_forth_dsp_pop 
53b0				endm 
# End of macro FORTH_DSP_POP
53b0			 
53b0					; Locate the file header 
53b0			 
53b0 e1					pop hl 
53b1 e5					push hl 
53b2 11 af f9				ld de, store_page      ; get block zero of file 
53b5					if DEBUG_FORTH_WORDS 
53b5						DMARK "REr" 
53b5 f5				push af  
53b6 3a ca 53			ld a, (.dmark)  
53b9 32 a0 fd			ld (debug_mark),a  
53bc 3a cb 53			ld a, (.dmark+1)  
53bf 32 a1 fd			ld (debug_mark+1),a  
53c2 3a cc 53			ld a, (.dmark+2)  
53c5 32 a2 fd			ld (debug_mark+2),a  
53c8 18 03			jr .pastdmark  
53ca ..			.dmark: db "REr"  
53cd f1			.pastdmark: pop af  
53ce			endm  
# End of macro DMARK
53ce						CALLMONITOR 
53ce cd aa fd			call debug_vector  
53d1				endm  
# End of macro CALLMONITOR
53d1					endif 
53d1 cd cd 09				call storage_read 
53d4			 
53d4 cd 07 10			call ishlzero 
53d7 20 05			jr nz, .rnfound 
53d9			 
53d9				; file does not exist so indicate with 255 extents in use 
53d9			 
53d9 3e ff			ld a, 255 
53db e1				pop hl ; clear dup hl 
53dc 18 7b			jr .skiprneof 
53de			 
53de			 
53de			.rnfound: 
53de					; file found so rename 
53de			 
53de					FORTH_DSP_VALUEHL 
53de cd 4d 22			call macro_dsp_valuehl 
53e1				endm 
# End of macro FORTH_DSP_VALUEHL
53e1			 
53e1 e5				push hl 
53e2 3e 00			ld a, 0 
53e4 cd 4f 13			call strlent 
53e7 23				inc hl   ; cover zero term 
53e8 06 00			ld b,0 
53ea 4d				ld c,l 
53eb e1				pop hl 
53ec 11 b2 f9				ld de, store_page + 3 
53ef ed b0				ldir 
53f1			 
53f1 11 af f9				ld de, store_page 
53f4					if DEBUG_FORTH_WORDS 
53f4						DMARK "RER" 
53f4 f5				push af  
53f5 3a 09 54			ld a, (.dmark)  
53f8 32 a0 fd			ld (debug_mark),a  
53fb 3a 0a 54			ld a, (.dmark+1)  
53fe 32 a1 fd			ld (debug_mark+1),a  
5401 3a 0b 54			ld a, (.dmark+2)  
5404 32 a2 fd			ld (debug_mark+2),a  
5407 18 03			jr .pastdmark  
5409 ..			.dmark: db "RER"  
540c f1			.pastdmark: pop af  
540d			endm  
# End of macro DMARK
540d						CALLMONITOR 
540d cd aa fd			call debug_vector  
5410				endm  
# End of macro CALLMONITOR
5410					endif 
5410			 
5410 e1					pop hl    ; get orig file id and mangle it for find id 
5411 55					ld d, l 
5412 5c					ld e, h 
5413			 
5413 21 00 00				ld hl, 0 
5416					if DEBUG_FORTH_WORDS 
5416						DMARK "REf" 
5416 f5				push af  
5417 3a 2b 54			ld a, (.dmark)  
541a 32 a0 fd			ld (debug_mark),a  
541d 3a 2c 54			ld a, (.dmark+1)  
5420 32 a1 fd			ld (debug_mark+1),a  
5423 3a 2d 54			ld a, (.dmark+2)  
5426 32 a2 fd			ld (debug_mark+2),a  
5429 18 03			jr .pastdmark  
542b ..			.dmark: db "REf"  
542e f1			.pastdmark: pop af  
542f			endm  
# End of macro DMARK
542f						CALLMONITOR 
542f cd aa fd			call debug_vector  
5432				endm  
# End of macro CALLMONITOR
5432					endif 
5432 cd a7 07				call storage_findnextid 
5435 11 af f9				ld de, store_page 
5438					if DEBUG_FORTH_WORDS 
5438						DMARK "REw" 
5438 f5				push af  
5439 3a 4d 54			ld a, (.dmark)  
543c 32 a0 fd			ld (debug_mark),a  
543f 3a 4e 54			ld a, (.dmark+1)  
5442 32 a1 fd			ld (debug_mark+1),a  
5445 3a 4f 54			ld a, (.dmark+2)  
5448 32 a2 fd			ld (debug_mark+2),a  
544b 18 03			jr .pastdmark  
544d ..			.dmark: db "REw"  
5450 f1			.pastdmark: pop af  
5451			endm  
# End of macro DMARK
5451						CALLMONITOR 
5451 cd aa fd			call debug_vector  
5454				endm  
# End of macro CALLMONITOR
5454					endif 
5454 cd d9 04				call storage_write_block 
5457			 
5457 3e 00				ld a, 0 
5459			.skiprneof: 
5459					; drop file name 
5459					FORTH_DSP_POP 
5459 cd 05 23			call macro_forth_dsp_pop 
545c				endm 
# End of macro FORTH_DSP_POP
545c			 
545c 6f					ld l, a 
545d 26 00				ld h, 0 
545f cd 48 20				call forth_push_numhl 
5462			 
5462			 
5462 f1					pop af 
5463 32 a2 f9				ld (store_readcont),a 
5466 e1					pop hl 
5467 22 a0 f9				ld (store_openaddr), hl 
546a						 
546a				NEXTW 
546a c3 38 24			jp macro_next 
546d				endm 
# End of macro NEXTW
546d			.RECORD: 
546d			  
546d				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
546d 3a				db WORD_SYS_CORE+38             
546e 11 55			dw .BREAD            
5470 07				db 6 + 1 
5471 .. 00			db "RECORD",0              
5478				endm 
# End of macro CWHEAD
5478			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
5478			; | | > [!NOTE] 
5478			; | | > Compatible with PicoSPINet  
5478			 
5478					if DEBUG_FORTH_WORDS_KEY 
5478						DMARK "REC" 
5478 f5				push af  
5479 3a 8d 54			ld a, (.dmark)  
547c 32 a0 fd			ld (debug_mark),a  
547f 3a 8e 54			ld a, (.dmark+1)  
5482 32 a1 fd			ld (debug_mark+1),a  
5485 3a 8f 54			ld a, (.dmark+2)  
5488 32 a2 fd			ld (debug_mark+2),a  
548b 18 03			jr .pastdmark  
548d ..			.dmark: db "REC"  
5490 f1			.pastdmark: pop af  
5491			endm  
# End of macro DMARK
5491						CALLMONITOR 
5491 cd aa fd			call debug_vector  
5494				endm  
# End of macro CALLMONITOR
5494					endif 
5494			 
5494					FORTH_DSP_VALUEHL 
5494 cd 4d 22			call macro_dsp_valuehl 
5497				endm 
# End of macro FORTH_DSP_VALUEHL
5497			 
5497 e5					push hl    ; id 
5498			 
5498					FORTH_DSP_POP 
5498 cd 05 23			call macro_forth_dsp_pop 
549b				endm 
# End of macro FORTH_DSP_POP
549b			 
549b					FORTH_DSP_VALUEHL 
549b cd 4d 22			call macro_dsp_valuehl 
549e				endm 
# End of macro FORTH_DSP_VALUEHL
549e			 
549e					FORTH_DSP_POP 
549e cd 05 23			call macro_forth_dsp_pop 
54a1				endm 
# End of macro FORTH_DSP_POP
54a1			 
54a1 d1					pop de     ; get file id 
54a2			 
54a2					; e = file id 
54a2					; l = file extent 
54a2			 
54a2			 
54a2					; construct request to access file extent 
54a2			 
54a2			;		ld a, e 
54a2 63					ld h, e 
54a3					 
54a3					 
54a3					 
54a3			 
54a3					; e has id 
54a3			 
54a3 11 af f9			ld de, store_page 
54a6					if DEBUG_FORTH_WORDS 
54a6						DMARK "REr" 
54a6 f5				push af  
54a7 3a bb 54			ld a, (.dmark)  
54aa 32 a0 fd			ld (debug_mark),a  
54ad 3a bc 54			ld a, (.dmark+1)  
54b0 32 a1 fd			ld (debug_mark+1),a  
54b3 3a bd 54			ld a, (.dmark+2)  
54b6 32 a2 fd			ld (debug_mark+2),a  
54b9 18 03			jr .pastdmark  
54bb ..			.dmark: db "REr"  
54be f1			.pastdmark: pop af  
54bf			endm  
# End of macro DMARK
54bf						CALLMONITOR 
54bf cd aa fd			call debug_vector  
54c2				endm  
# End of macro CALLMONITOR
54c2					endif 
54c2 cd cd 09				call storage_read 
54c5 cd 07 10			call ishlzero 
54c8 28 22			jr z, .recnotfound 
54ca			 
54ca			 
54ca					if DEBUG_FORTH_WORDS 
54ca						DMARK "REe" 
54ca f5				push af  
54cb 3a df 54			ld a, (.dmark)  
54ce 32 a0 fd			ld (debug_mark),a  
54d1 3a e0 54			ld a, (.dmark+1)  
54d4 32 a1 fd			ld (debug_mark+1),a  
54d7 3a e1 54			ld a, (.dmark+2)  
54da 32 a2 fd			ld (debug_mark+2),a  
54dd 18 03			jr .pastdmark  
54df ..			.dmark: db "REe"  
54e2 f1			.pastdmark: pop af  
54e3			endm  
# End of macro DMARK
54e3						CALLMONITOR 
54e3 cd aa fd			call debug_vector  
54e6				endm  
# End of macro CALLMONITOR
54e6					endif 
54e6 cd b6 20			call forth_push_str 
54e9			 
54e9					NEXTW 
54e9 c3 38 24			jp macro_next 
54ec				endm 
# End of macro NEXTW
54ec			 
54ec			.recnotfound: 
54ec					if DEBUG_FORTH_WORDS 
54ec						DMARK "REf" 
54ec f5				push af  
54ed 3a 01 55			ld a, (.dmark)  
54f0 32 a0 fd			ld (debug_mark),a  
54f3 3a 02 55			ld a, (.dmark+1)  
54f6 32 a1 fd			ld (debug_mark+1),a  
54f9 3a 03 55			ld a, (.dmark+2)  
54fc 32 a2 fd			ld (debug_mark+2),a  
54ff 18 03			jr .pastdmark  
5501 ..			.dmark: db "REf"  
5504 f1			.pastdmark: pop af  
5505			endm  
# End of macro DMARK
5505						CALLMONITOR 
5505 cd aa fd			call debug_vector  
5508				endm  
# End of macro CALLMONITOR
5508					endif 
5508 21 ff 00			ld hl, 255 
550b cd 48 20			call forth_push_numhl 
550e				NEXTW 
550e c3 38 24			jp macro_next 
5511				endm 
# End of macro NEXTW
5511			 
5511			 
5511			.BREAD: 
5511			  
5511				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
5511 3a				db WORD_SYS_CORE+38             
5512 94 55			dw .BWRITE            
5514 06				db 5 + 1 
5515 .. 00			db "BREAD",0              
551b				endm 
# End of macro CWHEAD
551b			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
551b			; | | > [!NOTE] 
551b			; | | > Compatible with PicoSPINet  
551b				 
551b					if DEBUG_FORTH_WORDS_KEY 
551b						DMARK "BRD" 
551b f5				push af  
551c 3a 30 55			ld a, (.dmark)  
551f 32 a0 fd			ld (debug_mark),a  
5522 3a 31 55			ld a, (.dmark+1)  
5525 32 a1 fd			ld (debug_mark+1),a  
5528 3a 32 55			ld a, (.dmark+2)  
552b 32 a2 fd			ld (debug_mark+2),a  
552e 18 03			jr .pastdmark  
5530 ..			.dmark: db "BRD"  
5533 f1			.pastdmark: pop af  
5534			endm  
# End of macro DMARK
5534						CALLMONITOR 
5534 cd aa fd			call debug_vector  
5537				endm  
# End of macro CALLMONITOR
5537					endif 
5537			 
5537				FORTH_DSP_VALUEHL 
5537 cd 4d 22			call macro_dsp_valuehl 
553a				endm 
# End of macro FORTH_DSP_VALUEHL
553a			 
553a				FORTH_DSP_POP 
553a cd 05 23			call macro_forth_dsp_pop 
553d				endm 
# End of macro FORTH_DSP_POP
553d			 
553d				; calc block address 
553d			 
553d eb				ex de, hl 
553e 3e 40			ld a, STORE_BLOCK_PHY 
5540 cd 61 0f			call Mult16 
5543			 
5543			 
5543 11 af f9			ld de, store_page 
5546			 
5546					if DEBUG_FORTH_WORDS 
5546						DMARK "BR1" 
5546 f5				push af  
5547 3a 5b 55			ld a, (.dmark)  
554a 32 a0 fd			ld (debug_mark),a  
554d 3a 5c 55			ld a, (.dmark+1)  
5550 32 a1 fd			ld (debug_mark+1),a  
5553 3a 5d 55			ld a, (.dmark+2)  
5556 32 a2 fd			ld (debug_mark+2),a  
5559 18 03			jr .pastdmark  
555b ..			.dmark: db "BR1"  
555e f1			.pastdmark: pop af  
555f			endm  
# End of macro DMARK
555f						CALLMONITOR 
555f cd aa fd			call debug_vector  
5562				endm  
# End of macro CALLMONITOR
5562					endif 
5562			 
5562 cd 74 04			call storage_read_block 
5565			 
5565 cd 07 10			call ishlzero 
5568 20 05			jr nz, .brfound 
556a			 
556a cd 48 20			call forth_push_numhl 
556d 18 22			jr .brdone 
556f			 
556f			 
556f			.brfound: 
556f 21 b1 f9		        ld hl, store_page+2 
5572			 
5572					if DEBUG_FORTH_WORDS 
5572						DMARK "BR2" 
5572 f5				push af  
5573 3a 87 55			ld a, (.dmark)  
5576 32 a0 fd			ld (debug_mark),a  
5579 3a 88 55			ld a, (.dmark+1)  
557c 32 a1 fd			ld (debug_mark+1),a  
557f 3a 89 55			ld a, (.dmark+2)  
5582 32 a2 fd			ld (debug_mark+2),a  
5585 18 03			jr .pastdmark  
5587 ..			.dmark: db "BR2"  
558a f1			.pastdmark: pop af  
558b			endm  
# End of macro DMARK
558b						CALLMONITOR 
558b cd aa fd			call debug_vector  
558e				endm  
# End of macro CALLMONITOR
558e					endif 
558e			 
558e cd b6 20			call forth_push_str 
5591			 
5591			 
5591			.brdone: 
5591			 
5591					NEXTW 
5591 c3 38 24			jp macro_next 
5594				endm 
# End of macro NEXTW
5594			.BWRITE: 
5594				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
5594 3a				db WORD_SYS_CORE+38             
5595 29 56			dw .BUPD            
5597 07				db 6 + 1 
5598 .. 00			db "BWRITE",0              
559f				endm 
# End of macro CWHEAD
559f			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
559f			; | | > [!NOTE] 
559f			; | | > Compatible with PicoSPINet  
559f			 
559f					if DEBUG_FORTH_WORDS_KEY 
559f						DMARK "BWR" 
559f f5				push af  
55a0 3a b4 55			ld a, (.dmark)  
55a3 32 a0 fd			ld (debug_mark),a  
55a6 3a b5 55			ld a, (.dmark+1)  
55a9 32 a1 fd			ld (debug_mark+1),a  
55ac 3a b6 55			ld a, (.dmark+2)  
55af 32 a2 fd			ld (debug_mark+2),a  
55b2 18 03			jr .pastdmark  
55b4 ..			.dmark: db "BWR"  
55b7 f1			.pastdmark: pop af  
55b8			endm  
# End of macro DMARK
55b8						CALLMONITOR 
55b8 cd aa fd			call debug_vector  
55bb				endm  
# End of macro CALLMONITOR
55bb					endif 
55bb			 
55bb				FORTH_DSP_VALUEHL 
55bb cd 4d 22			call macro_dsp_valuehl 
55be				endm 
# End of macro FORTH_DSP_VALUEHL
55be			 
55be				; calc block address 
55be			 
55be eb				ex de, hl 
55bf 3e 40			ld a, STORE_BLOCK_PHY 
55c1 cd 61 0f			call Mult16 
55c4			 
55c4 e5				push hl         ; address 
55c5			 
55c5				FORTH_DSP_POP 
55c5 cd 05 23			call macro_forth_dsp_pop 
55c8				endm 
# End of macro FORTH_DSP_POP
55c8			 
55c8				FORTH_DSP_VALUEHL 
55c8 cd 4d 22			call macro_dsp_valuehl 
55cb				endm 
# End of macro FORTH_DSP_VALUEHL
55cb			 
55cb				FORTH_DSP_POP 
55cb cd 05 23			call macro_forth_dsp_pop 
55ce				endm 
# End of macro FORTH_DSP_POP
55ce			 
55ce cd b0 0c			call storage_clear_page 
55d1			 
55d1				; copy string to store page 
55d1			 
55d1 e5				push hl     ; save string address 
55d2			 
55d2 3e 00			ld a, 0 
55d4 cd 4f 13			call strlent 
55d7			 
55d7 23				inc hl 
55d8			 
55d8 4d				ld c, l 
55d9 06 00			ld b, 0 
55db			 
55db e1				pop hl 
55dc 11 b1 f9			ld de, store_page + 2 
55df					if DEBUG_FORTH_WORDS 
55df						DMARK "BW1" 
55df f5				push af  
55e0 3a f4 55			ld a, (.dmark)  
55e3 32 a0 fd			ld (debug_mark),a  
55e6 3a f5 55			ld a, (.dmark+1)  
55e9 32 a1 fd			ld (debug_mark+1),a  
55ec 3a f6 55			ld a, (.dmark+2)  
55ef 32 a2 fd			ld (debug_mark+2),a  
55f2 18 03			jr .pastdmark  
55f4 ..			.dmark: db "BW1"  
55f7 f1			.pastdmark: pop af  
55f8			endm  
# End of macro DMARK
55f8						CALLMONITOR 
55f8 cd aa fd			call debug_vector  
55fb				endm  
# End of macro CALLMONITOR
55fb					endif 
55fb ed b0			ldir 
55fd			 
55fd			 
55fd				; poke the start of the block with flags to prevent high level file ops hitting the block 
55fd			 
55fd 21 ff ff			ld hl, $ffff 
5600			 
5600 22 af f9			ld (store_page), hl	 
5603				 
5603 e1				pop hl    ; get address 
5604 11 af f9			ld de, store_page 
5607			 
5607					if DEBUG_FORTH_WORDS 
5607						DMARK "BW2" 
5607 f5				push af  
5608 3a 1c 56			ld a, (.dmark)  
560b 32 a0 fd			ld (debug_mark),a  
560e 3a 1d 56			ld a, (.dmark+1)  
5611 32 a1 fd			ld (debug_mark+1),a  
5614 3a 1e 56			ld a, (.dmark+2)  
5617 32 a2 fd			ld (debug_mark+2),a  
561a 18 03			jr .pastdmark  
561c ..			.dmark: db "BW2"  
561f f1			.pastdmark: pop af  
5620			endm  
# End of macro DMARK
5620						CALLMONITOR 
5620 cd aa fd			call debug_vector  
5623				endm  
# End of macro CALLMONITOR
5623					endif 
5623			 
5623 cd d9 04			call storage_write_block 
5626			 
5626					NEXTW 
5626 c3 38 24			jp macro_next 
5629				endm 
# End of macro NEXTW
5629			 
5629			.BUPD: 
5629				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
5629 3a				db WORD_SYS_CORE+38             
562a 7f 56			dw .BYID            
562c 05				db 4 + 1 
562d .. 00			db "BUPD",0              
5632				endm 
# End of macro CWHEAD
5632			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
5632			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
5632			; | | or completely different file system structure. 
5632			; | | > [!NOTE] 
5632			; | | > Compatible with PicoSPINet  
5632			 
5632					if DEBUG_FORTH_WORDS_KEY 
5632						DMARK "BUD" 
5632 f5				push af  
5633 3a 47 56			ld a, (.dmark)  
5636 32 a0 fd			ld (debug_mark),a  
5639 3a 48 56			ld a, (.dmark+1)  
563c 32 a1 fd			ld (debug_mark+1),a  
563f 3a 49 56			ld a, (.dmark+2)  
5642 32 a2 fd			ld (debug_mark+2),a  
5645 18 03			jr .pastdmark  
5647 ..			.dmark: db "BUD"  
564a f1			.pastdmark: pop af  
564b			endm  
# End of macro DMARK
564b						CALLMONITOR 
564b cd aa fd			call debug_vector  
564e				endm  
# End of macro CALLMONITOR
564e					endif 
564e			 
564e				FORTH_DSP_VALUEHL 
564e cd 4d 22			call macro_dsp_valuehl 
5651				endm 
# End of macro FORTH_DSP_VALUEHL
5651			 
5651				; calc block address 
5651			 
5651 eb				ex de, hl 
5652 3e 40			ld a, STORE_BLOCK_PHY 
5654 cd 61 0f			call Mult16 
5657			 
5657				FORTH_DSP_POP 
5657 cd 05 23			call macro_forth_dsp_pop 
565a				endm 
# End of macro FORTH_DSP_POP
565a			 
565a			 
565a 11 af f9			ld de, store_page 
565d			 
565d					if DEBUG_FORTH_WORDS 
565d						DMARK "BUe" 
565d f5				push af  
565e 3a 72 56			ld a, (.dmark)  
5661 32 a0 fd			ld (debug_mark),a  
5664 3a 73 56			ld a, (.dmark+1)  
5667 32 a1 fd			ld (debug_mark+1),a  
566a 3a 74 56			ld a, (.dmark+2)  
566d 32 a2 fd			ld (debug_mark+2),a  
5670 18 03			jr .pastdmark  
5672 ..			.dmark: db "BUe"  
5675 f1			.pastdmark: pop af  
5676			endm  
# End of macro DMARK
5676						CALLMONITOR 
5676 cd aa fd			call debug_vector  
5679				endm  
# End of macro CALLMONITOR
5679					endif 
5679			 
5679 cd d9 04			call storage_write_block 
567c			 
567c					NEXTW 
567c c3 38 24			jp macro_next 
567f				endm 
# End of macro NEXTW
567f			 
567f			.BYID: 
567f			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
567f			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
567f			; 
567f			;		 
567f			;		if DEBUG_FORTH_WORDS_KEY 
567f			;			DMARK "BYID" 
567f			;			CALLMONITOR 
567f			;		endif 
567f			; 
567f			;		; get direct address 
567f			; 
567f			;		FORTH_DSP_VALUEHL 
567f			; 
567f			;		FORTH_DSP_POP 
567f			; 
567f			;	; calc block address 
567f			; 
567f			;	ex de, hl 
567f			;	ld a, STORE_BLOCK_PHY 
567f			;	call Mult16 
567f			;	;	do BREAD with number as param 
567f			;	; push the file name	 
567f			;	ld de, store_page 
567f			;	call storage_read_block 
567f			 ;       ld hl, store_page+2 
567f			; 
567f			; 
567f			;		NEXTW 
567f			;.BYNAME: 
567f				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
567f 3a				db WORD_SYS_CORE+38             
5680 98 56			dw .DIR            
5682 06				db 5 + 1 
5683 .. 00			db "GETID",0              
5689				endm 
# End of macro CWHEAD
5689			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
5689			; | | > [!NOTE] 
5689			; | | > Compatible with PicoSPINet  
5689			 
5689					; get pointer to file name to seek 
5689			 
5689					FORTH_DSP_VALUEHL 
5689 cd 4d 22			call macro_dsp_valuehl 
568c				endm 
# End of macro FORTH_DSP_VALUEHL
568c			 
568c			 
568c cd 9b 03				call storage_getid  
568f			 
568f					FORTH_DSP_POP 
568f cd 05 23			call macro_forth_dsp_pop 
5692				endm 
# End of macro FORTH_DSP_POP
5692			 
5692 cd 48 20				call forth_push_numhl 
5695			 
5695					NEXTW 
5695 c3 38 24			jp macro_next 
5698				endm 
# End of macro NEXTW
5698			; 
5698			.DIR: 
5698				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
5698 3a				db WORD_SYS_CORE+38             
5699 9c 57			dw .SAVE            
569b 04				db 3 + 1 
569c .. 00			db "DIR",0              
56a0				endm 
# End of macro CWHEAD
56a0			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
56a0			; | | > [!NOTE] 
56a0			; | | > Compatible with PicoSPINet  
56a0			 
56a0					if DEBUG_FORTH_WORDS_KEY 
56a0						DMARK "DIR" 
56a0 f5				push af  
56a1 3a b5 56			ld a, (.dmark)  
56a4 32 a0 fd			ld (debug_mark),a  
56a7 3a b6 56			ld a, (.dmark+1)  
56aa 32 a1 fd			ld (debug_mark+1),a  
56ad 3a b7 56			ld a, (.dmark+2)  
56b0 32 a2 fd			ld (debug_mark+2),a  
56b3 18 03			jr .pastdmark  
56b5 ..			.dmark: db "DIR"  
56b8 f1			.pastdmark: pop af  
56b9			endm  
# End of macro DMARK
56b9						CALLMONITOR 
56b9 cd aa fd			call debug_vector  
56bc				endm  
# End of macro CALLMONITOR
56bc					endif 
56bc cd 25 05			call storage_get_block_0 
56bf			 
56bf 21 af f9			ld hl, store_page     ; get current id count 
56c2 46				ld b, (hl) 
56c3 0e 00			ld c, 0    ; count of files   
56c5					if DEBUG_FORTH_WORDS 
56c5						DMARK "DI1" 
56c5 f5				push af  
56c6 3a da 56			ld a, (.dmark)  
56c9 32 a0 fd			ld (debug_mark),a  
56cc 3a db 56			ld a, (.dmark+1)  
56cf 32 a1 fd			ld (debug_mark+1),a  
56d2 3a dc 56			ld a, (.dmark+2)  
56d5 32 a2 fd			ld (debug_mark+2),a  
56d8 18 03			jr .pastdmark  
56da ..			.dmark: db "DI1"  
56dd f1			.pastdmark: pop af  
56de			endm  
# End of macro DMARK
56de						CALLMONITOR 
56de cd aa fd			call debug_vector  
56e1				endm  
# End of macro CALLMONITOR
56e1					endif 
56e1			 
56e1				; check for empty drive 
56e1			 
56e1 3e 00			ld a, 0 
56e3 b8				cp b 
56e4 ca 52 57			jp z, .dirdone 
56e7			 
56e7				; for each of the current ids do a search for them and if found push to stack 
56e7			 
56e7 c5			.diritem:	push bc 
56e8 21 40 00				ld hl, STORE_BLOCK_PHY 
56eb 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
56ed 58					ld e,b 
56ee			 
56ee			;		if DEBUG_FORTH_WORDS 
56ee			;			DMARK "DI2" 
56ee			;			CALLMONITOR 
56ee			;		endif 
56ee			 
56ee cd a7 07				call storage_findnextid 
56f1			 
56f1			;		if DEBUG_FORTH_WORDS 
56f1			;			DMARK "DI3" 
56f1			;			CALLMONITOR 
56f1			;		endif 
56f1			 
56f1					; if found hl will be non zero 
56f1			 
56f1 cd 07 10				call ishlzero 
56f4			;		ld a, l 
56f4			;		add h 
56f4			; 
56f4			;		cp 0 
56f4 28 59				jr z, .dirnotfound 
56f6			 
56f6					; increase count 
56f6			 
56f6 c1					pop bc	 
56f7 0c					inc c 
56f8 c5					push bc 
56f9					 
56f9			 
56f9					; get file header and push the file name 
56f9			 
56f9 11 af f9				ld de, store_page 
56fc cd 74 04				call storage_read_block 
56ff			 
56ff					; push file id to stack 
56ff				 
56ff 3a af f9				ld a, (store_page) 
5702 26 00				ld h, 0 
5704 6f					ld l, a 
5705 cd 48 20				call forth_push_numhl 
5708			 
5708					; push extent count to stack  
5708				 
5708 3a b1 f9				ld a, (store_page+2) 
570b 26 00				ld h, 0 
570d 6f					ld l, a 
570e cd 48 20				call forth_push_numhl 
5711			 
5711					; push file name 
5711			 
5711 21 b2 f9				ld hl, store_page+3 
5714					if DEBUG_FORTH_WORDS 
5714						DMARK "DI5" 
5714 f5				push af  
5715 3a 29 57			ld a, (.dmark)  
5718 32 a0 fd			ld (debug_mark),a  
571b 3a 2a 57			ld a, (.dmark+1)  
571e 32 a1 fd			ld (debug_mark+1),a  
5721 3a 2b 57			ld a, (.dmark+2)  
5724 32 a2 fd			ld (debug_mark+2),a  
5727 18 03			jr .pastdmark  
5729 ..			.dmark: db "DI5"  
572c f1			.pastdmark: pop af  
572d			endm  
# End of macro DMARK
572d						CALLMONITOR 
572d cd aa fd			call debug_vector  
5730				endm  
# End of macro CALLMONITOR
5730					endif 
5730 cd b6 20				call forth_push_str 
5733					if DEBUG_FORTH_WORDS 
5733						DMARK "DI6" 
5733 f5				push af  
5734 3a 48 57			ld a, (.dmark)  
5737 32 a0 fd			ld (debug_mark),a  
573a 3a 49 57			ld a, (.dmark+1)  
573d 32 a1 fd			ld (debug_mark+1),a  
5740 3a 4a 57			ld a, (.dmark+2)  
5743 32 a2 fd			ld (debug_mark+2),a  
5746 18 03			jr .pastdmark  
5748 ..			.dmark: db "DI6"  
574b f1			.pastdmark: pop af  
574c			endm  
# End of macro DMARK
574c						CALLMONITOR 
574c cd aa fd			call debug_vector  
574f				endm  
# End of macro CALLMONITOR
574f					endif 
574f			.dirnotfound: 
574f c1					pop bc     
5750 10 95				djnz .diritem 
5752				 
5752			.dirdone:	 
5752					if DEBUG_FORTH_WORDS 
5752						DMARK "DI7" 
5752 f5				push af  
5753 3a 67 57			ld a, (.dmark)  
5756 32 a0 fd			ld (debug_mark),a  
5759 3a 68 57			ld a, (.dmark+1)  
575c 32 a1 fd			ld (debug_mark+1),a  
575f 3a 69 57			ld a, (.dmark+2)  
5762 32 a2 fd			ld (debug_mark+2),a  
5765 18 03			jr .pastdmark  
5767 ..			.dmark: db "DI7"  
576a f1			.pastdmark: pop af  
576b			endm  
# End of macro DMARK
576b						CALLMONITOR 
576b cd aa fd			call debug_vector  
576e				endm  
# End of macro CALLMONITOR
576e					endif 
576e			 
576e					; push a count of the dir items found 
576e			 
576e 26 00				ld h, 0 
5770 69					ld l, c 
5771 cd 48 20				call forth_push_numhl 
5774			 
5774					; push the bank label 
5774			 
5774 cd 25 05				call storage_get_block_0 
5777			 
5777				 
5777 21 b2 f9		 		ld hl, store_page+3 
577a			 
577a					if DEBUG_FORTH_WORDS 
577a						DMARK "DI8" 
577a f5				push af  
577b 3a 8f 57			ld a, (.dmark)  
577e 32 a0 fd			ld (debug_mark),a  
5781 3a 90 57			ld a, (.dmark+1)  
5784 32 a1 fd			ld (debug_mark+1),a  
5787 3a 91 57			ld a, (.dmark+2)  
578a 32 a2 fd			ld (debug_mark+2),a  
578d 18 03			jr .pastdmark  
578f ..			.dmark: db "DI8"  
5792 f1			.pastdmark: pop af  
5793			endm  
# End of macro DMARK
5793						CALLMONITOR 
5793 cd aa fd			call debug_vector  
5796				endm  
# End of macro CALLMONITOR
5796					endif 
5796 cd b6 20				call forth_push_str 
5799			 
5799			 
5799				 
5799					NEXTW 
5799 c3 38 24			jp macro_next 
579c				endm 
# End of macro NEXTW
579c			.SAVE: 
579c			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
579c			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
579c			;		NEXTW 
579c			;.LOAD: 
579c			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
579c			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
579c			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
579c			;; > > The LOAD command can not be used in any user words or compound lines. 
579c			; 
579c			;		; store_openext use it. If zero it is EOF 
579c			; 
579c			;		; read block from current stream id 
579c			;		; if the block does not contain zero term keep reading blocks until zero found 
579c			;		; push the block to stack 
579c			;		; save the block id to stream 
579c			; 
579c			; 
579c			;		FORTH_DSP_VALUEHL 
579c			; 
579c			;;		push hl 
579c			; 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LOA" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;		FORTH_DSP_POP 
579c			; 
579c			;;		pop hl 
579c			; 
579c			;		ld h, l 
579c			;		ld l, 0 
579c			; 
579c			;		push hl     ; stack holds current file id and extent to work with 
579c			; 
579c			; 
579c			;		ld de, store_page      ; get block zero of file 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LO0" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;		call storage_read 
579c			; 
579c			;		ld a, (store_page+2)    ; max extents for this file 
579c			;		ld  (store_openmaxext),a   ; get our limit 
579c			; 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LOE" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			; 
579c			;; TODO dont know why max extents are not present 
579c			;;		cp 0 
579c			;;		jp z, .loadeof     ; dont read past eof 
579c			; 
579c			;;		ld a, 1   ; start from the head of the file 
579c			; 
579c			;.loadline:	pop hl 
579c			;		inc hl 
579c			;		ld  a, (store_openmaxext)   ; get our limit 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LOx" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;		inc a 
579c			;		cp l 
579c			;		jp z, .loadeof 
579c			;		push hl    ; save current extent 
579c			; 
579c			;		ld de, store_page 
579c			; 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LO1" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;		call storage_read 
579c			; 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LO2" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;	call ishlzero 
579c			;	ld a, l 
579c			;	add h 
579c			;	cp 0 
579c			;	jr z, .loadeof 
579c			; 
579c			;	; not eof so hl should point to data to exec 
579c			; 
579c			;	; will need to add the FORTH_END_BUFFER flag 
579c			 ; 
579c			;	ld hl, store_page+2 
579c			;	ld bc, 255 
579c			;	ld a, 0 
579c			;	cpir 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LOt" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;	dec hl 
579c			;	ld a, ' ' 
579c			;	ld (hl), a 
579c			;	inc hl 
579c			;	ld (hl), a 
579c			;	inc hl 
579c			;	ld (hl), a 
579c			;	inc hl 
579c			;	ld a, FORTH_END_BUFFER 
579c			;	ld (hl), a 
579c			; 
579c			;	; TODO handle more than a single block read 
579c			; 
579c			; 
579c			;	ld hl, store_page+2 
579c			; 
579c			;	ld (os_tok_ptr), hl 
579c			; 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LO3" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			; 
579c			;	call forthparse 
579c			;	call forthexec 
579c			;	call forthexec_cleanup 
579c			; 
579c			;	; go to next extent 
579c			; 
579c			;	; get next block  or mark as eof 
579c			;	jp .loadline 
579c			; 
579c			; 
579c			; 
579c			;	       NEXTW 
579c			;.loadeof:	ld a, 0 
579c			;		ld (store_openext), a 
579c			; 
579c			;	if DEBUG_STORESE 
579c			;		DMARK "LOF" 
579c			;		CALLMONITOR 
579c			;	endif 
579c			;		ret 
579c			;		;NEXTW 
579c			;.BSAVE:   
579c			; 
579c			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
579c			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
579c			;		NEXTW 
579c			;.BLOAD: 
579c			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
579c			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
579c			;		NEXTW 
579c			;;;; counter gap 
579c			 
579c			 
579c			.SEO: 
579c				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
579c 64				db WORD_SYS_CORE+80             
579d bb 57			dw .SEI            
579f 04				db 3 + 1 
57a0 .. 00			db "SEO",0              
57a4				endm 
# End of macro CWHEAD
57a4			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
57a4			 
57a4					; get port 
57a4			 
57a4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
57a4 cd 4d 22			call macro_dsp_valuehl 
57a7				endm 
# End of macro FORTH_DSP_VALUEHL
57a7			 
57a7 e5					push hl    ; u2 - byte 
57a8			 
57a8					; destroy value TOS 
57a8			 
57a8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
57a8 cd 05 23			call macro_forth_dsp_pop 
57ab				endm 
# End of macro FORTH_DSP_POP
57ab			 
57ab					; get byte to send 
57ab			 
57ab					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
57ab cd 4d 22			call macro_dsp_valuehl 
57ae				endm 
# End of macro FORTH_DSP_VALUEHL
57ae			 
57ae e5					push hl    ; u1 - addr 
57af			 
57af					; destroy value TOS 
57af			 
57af					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
57af cd 05 23			call macro_forth_dsp_pop 
57b2				endm 
# End of macro FORTH_DSP_POP
57b2			 
57b2					; one value on hl get other one back 
57b2			 
57b2 d1					pop de   ; u1 - byte 
57b3			 
57b3 e1					pop hl   ; u2 - addr 
57b4			 
57b4					; TODO Send SPI byte 
57b4			 
57b4			 
57b4 7b					ld a, e 
57b5 cd 79 02				call se_writebyte 
57b8			 
57b8					 
57b8			 
57b8					NEXTW 
57b8 c3 38 24			jp macro_next 
57bb				endm 
# End of macro NEXTW
57bb			 
57bb			.SEI: 
57bb				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
57bb 65				db WORD_SYS_CORE+81             
57bc d5 57			dw .SFREE            
57be 04				db 3 + 1 
57bf .. 00			db "SEI",0              
57c3				endm 
# End of macro CWHEAD
57c3			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
57c3			 
57c3					; get port 
57c3			 
57c3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
57c3 cd 4d 22			call macro_dsp_valuehl 
57c6				endm 
# End of macro FORTH_DSP_VALUEHL
57c6			 
57c6			;		push hl 
57c6			 
57c6					; destroy value TOS 
57c6			 
57c6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
57c6 cd 05 23			call macro_forth_dsp_pop 
57c9				endm 
# End of macro FORTH_DSP_POP
57c9			 
57c9					; one value on hl get other one back 
57c9			 
57c9			;		pop hl 
57c9			 
57c9			 
57c9					; TODO Get SPI byte 
57c9			 
57c9 cd 1b 03				call se_readbyte 
57cc			 
57cc 26 00				ld h, 0 
57ce 6f					ld l, a 
57cf cd 48 20				call forth_push_numhl 
57d2			 
57d2					NEXTW 
57d2 c3 38 24			jp macro_next 
57d5				endm 
# End of macro NEXTW
57d5			 
57d5			.SFREE: 
57d5				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
57d5 67				db WORD_SYS_CORE+83             
57d6 04 58			dw .SIZE            
57d8 06				db 5 + 1 
57d9 .. 00			db "FFREE",0              
57df				endm 
# End of macro CWHEAD
57df			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
57df			; | | > [!NOTE] 
57df			; | | > Compatible with PicoSPINet  
57df					if DEBUG_FORTH_WORDS_KEY 
57df						DMARK "FFR" 
57df f5				push af  
57e0 3a f4 57			ld a, (.dmark)  
57e3 32 a0 fd			ld (debug_mark),a  
57e6 3a f5 57			ld a, (.dmark+1)  
57e9 32 a1 fd			ld (debug_mark+1),a  
57ec 3a f6 57			ld a, (.dmark+2)  
57ef 32 a2 fd			ld (debug_mark+2),a  
57f2 18 03			jr .pastdmark  
57f4 ..			.dmark: db "FFR"  
57f7 f1			.pastdmark: pop af  
57f8			endm  
# End of macro DMARK
57f8						CALLMONITOR 
57f8 cd aa fd			call debug_vector  
57fb				endm  
# End of macro CALLMONITOR
57fb					endif 
57fb			 
57fb cd 41 08				call storage_freeblocks 
57fe			 
57fe cd 48 20				call forth_push_numhl 
5801			 
5801				       NEXTW 
5801 c3 38 24			jp macro_next 
5804				endm 
# End of macro NEXTW
5804			.SIZE: 
5804				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
5804 67				db WORD_SYS_CORE+83             
5805 38 58			dw .CREATE            
5807 05				db 4 + 1 
5808 .. 00			db "SIZE",0              
580d				endm 
# End of macro CWHEAD
580d			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
580d			; | | > [!NOTE] 
580d			; | | > Compatible with PicoSPINet  
580d					if DEBUG_FORTH_WORDS_KEY 
580d						DMARK "SIZ" 
580d f5				push af  
580e 3a 22 58			ld a, (.dmark)  
5811 32 a0 fd			ld (debug_mark),a  
5814 3a 23 58			ld a, (.dmark+1)  
5817 32 a1 fd			ld (debug_mark+1),a  
581a 3a 24 58			ld a, (.dmark+2)  
581d 32 a2 fd			ld (debug_mark+2),a  
5820 18 03			jr .pastdmark  
5822 ..			.dmark: db "SIZ"  
5825 f1			.pastdmark: pop af  
5826			endm  
# End of macro DMARK
5826						CALLMONITOR 
5826 cd aa fd			call debug_vector  
5829				endm  
# End of macro CALLMONITOR
5829					endif 
5829			 
5829					FORTH_DSP_VALUEHL 
5829 cd 4d 22			call macro_dsp_valuehl 
582c				endm 
# End of macro FORTH_DSP_VALUEHL
582c			;		push hl 
582c					FORTH_DSP_POP 
582c cd 05 23			call macro_forth_dsp_pop 
582f				endm 
# End of macro FORTH_DSP_POP
582f			;		pop hl 
582f cd a3 04				call storage_file_size 
5832			 
5832 cd 48 20				call forth_push_numhl 
5835			  
5835			 
5835				       NEXTW 
5835 c3 38 24			jp macro_next 
5838				endm 
# End of macro NEXTW
5838			 
5838			.CREATE: 
5838				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
5838 68				db WORD_SYS_CORE+84             
5839 a6 58			dw .APPEND            
583b 07				db 6 + 1 
583c .. 00			db "CREATE",0              
5843				endm 
# End of macro CWHEAD
5843			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
5843			; | | e.g.  
5843			; | | TestProgram CREATE 
5843			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
5843			; | |  
5843			; | | Max file IDs are 255. 
5843			; | |  
5843			; | | > [!NOTE] 
5843			; | | > Compatible with PicoSPINet  
5843					 
5843					if DEBUG_FORTH_WORDS_KEY 
5843						DMARK "CRT" 
5843 f5				push af  
5844 3a 58 58			ld a, (.dmark)  
5847 32 a0 fd			ld (debug_mark),a  
584a 3a 59 58			ld a, (.dmark+1)  
584d 32 a1 fd			ld (debug_mark+1),a  
5850 3a 5a 58			ld a, (.dmark+2)  
5853 32 a2 fd			ld (debug_mark+2),a  
5856 18 03			jr .pastdmark  
5858 ..			.dmark: db "CRT"  
585b f1			.pastdmark: pop af  
585c			endm  
# End of macro DMARK
585c						CALLMONITOR 
585c cd aa fd			call debug_vector  
585f				endm  
# End of macro CALLMONITOR
585f					endif 
585f			;		call storage_get_block_0 
585f			 
585f					; TODO pop hl 
585f			 
585f					;v5 FORTH_DSP_VALUE 
585f					FORTH_DSP_VALUE 
585f cd 36 22			call macro_forth_dsp_value 
5862				endm 
# End of macro FORTH_DSP_VALUE
5862			 
5862				if DEBUG_STORESE 
5862					DMARK "CR1" 
5862 f5				push af  
5863 3a 77 58			ld a, (.dmark)  
5866 32 a0 fd			ld (debug_mark),a  
5869 3a 78 58			ld a, (.dmark+1)  
586c 32 a1 fd			ld (debug_mark+1),a  
586f 3a 79 58			ld a, (.dmark+2)  
5872 32 a2 fd			ld (debug_mark+2),a  
5875 18 03			jr .pastdmark  
5877 ..			.dmark: db "CR1"  
587a f1			.pastdmark: pop af  
587b			endm  
# End of macro DMARK
587b					CALLMONITOR 
587b cd aa fd			call debug_vector  
587e				endm  
# End of macro CALLMONITOR
587e				endif 
587e			;		push hl 
587e			;		FORTH_DSP_POP 
587e			;		pop hl 
587e			 
587e			;		inc hl   ; move past the type marker 
587e			 
587e cd 77 08				call storage_create 
5881			 
5881				if DEBUG_STORESE 
5881					DMARK "CT1" 
5881 f5				push af  
5882 3a 96 58			ld a, (.dmark)  
5885 32 a0 fd			ld (debug_mark),a  
5888 3a 97 58			ld a, (.dmark+1)  
588b 32 a1 fd			ld (debug_mark+1),a  
588e 3a 98 58			ld a, (.dmark+2)  
5891 32 a2 fd			ld (debug_mark+2),a  
5894 18 03			jr .pastdmark  
5896 ..			.dmark: db "CT1"  
5899 f1			.pastdmark: pop af  
589a			endm  
# End of macro DMARK
589a					CALLMONITOR 
589a cd aa fd			call debug_vector  
589d				endm  
# End of macro CALLMONITOR
589d				endif 
589d			;		push hl 
589d					FORTH_DSP_POP 
589d cd 05 23			call macro_forth_dsp_pop 
58a0				endm 
# End of macro FORTH_DSP_POP
58a0			;		pop hl 
58a0					; push file id to stack 
58a0 cd 48 20				call forth_push_numhl 
58a3			 
58a3			 
58a3			 
58a3				       NEXTW 
58a3 c3 38 24			jp macro_next 
58a6				endm 
# End of macro NEXTW
58a6			 
58a6			.APPEND: 
58a6				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
58a6 69				db WORD_SYS_CORE+85             
58a7 37 59			dw .SDEL            
58a9 07				db 6 + 1 
58aa .. 00			db "APPEND",0              
58b1				endm 
# End of macro CWHEAD
58b1			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
58b1			; | | e.g. 
58b1			; | | Test CREATE      -> $01 
58b1			; | | "A string to add to file" $01 APPEND 
58b1			; | |  
58b1			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
58b1			; | | > [!NOTE] 
58b1			; | | > Compatible with PicoSPINet  
58b1					if DEBUG_FORTH_WORDS_KEY 
58b1						DMARK "APP" 
58b1 f5				push af  
58b2 3a c6 58			ld a, (.dmark)  
58b5 32 a0 fd			ld (debug_mark),a  
58b8 3a c7 58			ld a, (.dmark+1)  
58bb 32 a1 fd			ld (debug_mark+1),a  
58be 3a c8 58			ld a, (.dmark+2)  
58c1 32 a2 fd			ld (debug_mark+2),a  
58c4 18 03			jr .pastdmark  
58c6 ..			.dmark: db "APP"  
58c9 f1			.pastdmark: pop af  
58ca			endm  
# End of macro DMARK
58ca						CALLMONITOR 
58ca cd aa fd			call debug_vector  
58cd				endm  
# End of macro CALLMONITOR
58cd					endif 
58cd			 
58cd					FORTH_DSP_VALUEHL 
58cd cd 4d 22			call macro_dsp_valuehl 
58d0				endm 
# End of macro FORTH_DSP_VALUEHL
58d0 e5					push hl 	; save file id 
58d1			 
58d1				if DEBUG_STORESE 
58d1					DMARK "AP1" 
58d1 f5				push af  
58d2 3a e6 58			ld a, (.dmark)  
58d5 32 a0 fd			ld (debug_mark),a  
58d8 3a e7 58			ld a, (.dmark+1)  
58db 32 a1 fd			ld (debug_mark+1),a  
58de 3a e8 58			ld a, (.dmark+2)  
58e1 32 a2 fd			ld (debug_mark+2),a  
58e4 18 03			jr .pastdmark  
58e6 ..			.dmark: db "AP1"  
58e9 f1			.pastdmark: pop af  
58ea			endm  
# End of macro DMARK
58ea					CALLMONITOR 
58ea cd aa fd			call debug_vector  
58ed				endm  
# End of macro CALLMONITOR
58ed				endif 
58ed					FORTH_DSP_POP 
58ed cd 05 23			call macro_forth_dsp_pop 
58f0				endm 
# End of macro FORTH_DSP_POP
58f0			 
58f0					FORTH_DSP_VALUEHL 
58f0 cd 4d 22			call macro_dsp_valuehl 
58f3				endm 
# End of macro FORTH_DSP_VALUEHL
58f3					;v5 FORTH_DSP_VALUE 
58f3 e5					push hl 	; save ptr to string to save 
58f4			 
58f4				if DEBUG_STORESE 
58f4					DMARK "AP1" 
58f4 f5				push af  
58f5 3a 09 59			ld a, (.dmark)  
58f8 32 a0 fd			ld (debug_mark),a  
58fb 3a 0a 59			ld a, (.dmark+1)  
58fe 32 a1 fd			ld (debug_mark+1),a  
5901 3a 0b 59			ld a, (.dmark+2)  
5904 32 a2 fd			ld (debug_mark+2),a  
5907 18 03			jr .pastdmark  
5909 ..			.dmark: db "AP1"  
590c f1			.pastdmark: pop af  
590d			endm  
# End of macro DMARK
590d					CALLMONITOR 
590d cd aa fd			call debug_vector  
5910				endm  
# End of macro CALLMONITOR
5910				endif 
5910					FORTH_DSP_POP 
5910 cd 05 23			call macro_forth_dsp_pop 
5913				endm 
# End of macro FORTH_DSP_POP
5913			 
5913 d1					pop de 
5914 e1					pop hl 
5915				if DEBUG_STORESE 
5915					DMARK "AP2" 
5915 f5				push af  
5916 3a 2a 59			ld a, (.dmark)  
5919 32 a0 fd			ld (debug_mark),a  
591c 3a 2b 59			ld a, (.dmark+1)  
591f 32 a1 fd			ld (debug_mark+1),a  
5922 3a 2c 59			ld a, (.dmark+2)  
5925 32 a2 fd			ld (debug_mark+2),a  
5928 18 03			jr .pastdmark  
592a ..			.dmark: db "AP2"  
592d f1			.pastdmark: pop af  
592e			endm  
# End of macro DMARK
592e					CALLMONITOR 
592e cd aa fd			call debug_vector  
5931				endm  
# End of macro CALLMONITOR
5931				endif 
5931					;inc de ; skip var type indicator 
5931			 
5931					; TODO how to append numerics???? 
5931			 
5931 cd 64 0b				call storage_append		 
5934			 
5934				       NEXTW 
5934 c3 38 24			jp macro_next 
5937				endm 
# End of macro NEXTW
5937			.SDEL: 
5937				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
5937 6a				db WORD_SYS_CORE+86             
5938 83 59			dw .OPEN            
593a 05				db 4 + 1 
593b .. 00			db "ERA",0              
593f				endm 
# End of macro CWHEAD
593f			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
593f			; | | > [!NOTE] 
593f			; | | > Compatible with PicoSPINet  
593f					FORTH_DSP_VALUEHL 
593f cd 4d 22			call macro_dsp_valuehl 
5942				endm 
# End of macro FORTH_DSP_VALUEHL
5942			;		push hl 	; save file id 
5942			 
5942					if DEBUG_FORTH_WORDS_KEY 
5942						DMARK "ERA" 
5942 f5				push af  
5943 3a 57 59			ld a, (.dmark)  
5946 32 a0 fd			ld (debug_mark),a  
5949 3a 58 59			ld a, (.dmark+1)  
594c 32 a1 fd			ld (debug_mark+1),a  
594f 3a 59 59			ld a, (.dmark+2)  
5952 32 a2 fd			ld (debug_mark+2),a  
5955 18 03			jr .pastdmark  
5957 ..			.dmark: db "ERA"  
595a f1			.pastdmark: pop af  
595b			endm  
# End of macro DMARK
595b						CALLMONITOR 
595b cd aa fd			call debug_vector  
595e				endm  
# End of macro CALLMONITOR
595e					endif 
595e				if DEBUG_STORESE 
595e					DMARK "ER1" 
595e f5				push af  
595f 3a 73 59			ld a, (.dmark)  
5962 32 a0 fd			ld (debug_mark),a  
5965 3a 74 59			ld a, (.dmark+1)  
5968 32 a1 fd			ld (debug_mark+1),a  
596b 3a 75 59			ld a, (.dmark+2)  
596e 32 a2 fd			ld (debug_mark+2),a  
5971 18 03			jr .pastdmark  
5973 ..			.dmark: db "ER1"  
5976 f1			.pastdmark: pop af  
5977			endm  
# End of macro DMARK
5977					CALLMONITOR 
5977 cd aa fd			call debug_vector  
597a				endm  
# End of macro CALLMONITOR
597a				endif 
597a					FORTH_DSP_POP 
597a cd 05 23			call macro_forth_dsp_pop 
597d				endm 
# End of macro FORTH_DSP_POP
597d			 
597d			;		pop hl 
597d			 
597d cd b6 06				call storage_erase 
5980				       NEXTW 
5980 c3 38 24			jp macro_next 
5983				endm 
# End of macro NEXTW
5983			 
5983			.OPEN: 
5983				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
5983 6b				db WORD_SYS_CORE+87             
5984 17 5a			dw .READ            
5986 05				db 4 + 1 
5987 .. 00			db "OPEN",0              
598c				endm 
# End of macro CWHEAD
598c			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
598c			; | | e.g. 
598c			; | | $01 OPEN $01 DO $01 READ . LOOP 
598c			; | | 
598c			; | | Will return with 255 blocks if the file does not exist 
598c			; | | > [!NOTE] 
598c			; | | > Compatible with PicoSPINet  
598c			 
598c					if DEBUG_FORTH_WORDS_KEY 
598c						DMARK "OPN" 
598c f5				push af  
598d 3a a1 59			ld a, (.dmark)  
5990 32 a0 fd			ld (debug_mark),a  
5993 3a a2 59			ld a, (.dmark+1)  
5996 32 a1 fd			ld (debug_mark+1),a  
5999 3a a3 59			ld a, (.dmark+2)  
599c 32 a2 fd			ld (debug_mark+2),a  
599f 18 03			jr .pastdmark  
59a1 ..			.dmark: db "OPN"  
59a4 f1			.pastdmark: pop af  
59a5			endm  
# End of macro DMARK
59a5						CALLMONITOR 
59a5 cd aa fd			call debug_vector  
59a8				endm  
# End of macro CALLMONITOR
59a8					endif 
59a8					; TODO handle multiple file opens 
59a8			 
59a8 3e 01			       	ld a, 1 
59aa 32 9f f9				ld (store_openext), a 
59ad			 
59ad					; get max extents for this file 
59ad				 
59ad								 
59ad					FORTH_DSP_VALUEHL 
59ad cd 4d 22			call macro_dsp_valuehl 
59b0				endm 
# End of macro FORTH_DSP_VALUEHL
59b0			 
59b0 65					ld h, l 
59b1 2e 00				ld l, 0 
59b3			 
59b3					; store file id 
59b3			 
59b3 7c					ld a, h 
59b4 32 9c f9				ld (store_filecache), a 
59b7			 
59b7				if DEBUG_STORESE 
59b7					DMARK "OPN" 
59b7 f5				push af  
59b8 3a cc 59			ld a, (.dmark)  
59bb 32 a0 fd			ld (debug_mark),a  
59be 3a cd 59			ld a, (.dmark+1)  
59c1 32 a1 fd			ld (debug_mark+1),a  
59c4 3a ce 59			ld a, (.dmark+2)  
59c7 32 a2 fd			ld (debug_mark+2),a  
59ca 18 03			jr .pastdmark  
59cc ..			.dmark: db "OPN"  
59cf f1			.pastdmark: pop af  
59d0			endm  
# End of macro DMARK
59d0					CALLMONITOR 
59d0 cd aa fd			call debug_vector  
59d3				endm  
# End of macro CALLMONITOR
59d3				endif 
59d3			;		push hl 
59d3					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
59d3 cd 05 23			call macro_forth_dsp_pop 
59d6				endm 
# End of macro FORTH_DSP_POP
59d6			;		pop hl 
59d6						 
59d6 11 af f9				ld de, store_page      ; get block zero of file 
59d9 cd cd 09				call storage_read 
59dc cd 07 10			call ishlzero 
59df 20 04			jr nz, .opfound 
59e1			 
59e1				; file does not exist so indicate with 255 extents in use 
59e1			 
59e1 3e ff			ld a, 255 
59e3 18 29			jr .skipopeneof 
59e5			 
59e5			 
59e5			.opfound: 
59e5			 
59e5			 
59e5 3a b1 f9				ld a, (store_page+2)    ; max extents for this file 
59e8 32 9e f9				ld  (store_openmaxext), a   ; get our limit and push 
59eb					 
59eb				if DEBUG_STORESE 
59eb					DMARK "OPx" 
59eb f5				push af  
59ec 3a 00 5a			ld a, (.dmark)  
59ef 32 a0 fd			ld (debug_mark),a  
59f2 3a 01 5a			ld a, (.dmark+1)  
59f5 32 a1 fd			ld (debug_mark+1),a  
59f8 3a 02 5a			ld a, (.dmark+2)  
59fb 32 a2 fd			ld (debug_mark+2),a  
59fe 18 03			jr .pastdmark  
5a00 ..			.dmark: db "OPx"  
5a03 f1			.pastdmark: pop af  
5a04			endm  
# End of macro DMARK
5a04					CALLMONITOR 
5a04 cd aa fd			call debug_vector  
5a07				endm  
# End of macro CALLMONITOR
5a07				endif 
5a07 fe 00				cp 0 
5a09 20 03				jr nz, .skipopeneof 
5a0b					; have opened an empty file 
5a0b					 
5a0b 32 9f f9				ld (store_openext), a 
5a0e			 
5a0e			.skipopeneof: 
5a0e			 
5a0e 6f					ld l, a 
5a0f 26 00				ld h, 0 
5a11 cd 48 20				call forth_push_numhl 
5a14			 
5a14			 
5a14				       NEXTW 
5a14 c3 38 24			jp macro_next 
5a17				endm 
# End of macro NEXTW
5a17			.READ: 
5a17				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
5a17 6c				db WORD_SYS_CORE+88             
5a18 41 5b			dw .EOF            
5a1a 05				db 4 + 1 
5a1b .. 00			db "READ",0              
5a20				endm 
# End of macro CWHEAD
5a20			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
5a20			; | | e.g. 
5a20			; | | $01 OPEN $01 DO READ . LOOP 
5a20			; | | 
5a20			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
5a20			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
5a20			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
5a20			; | | two bytes contain the file id and extent. 
5a20			; | |  
5a20			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
5a20			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
5a20			; | | > [!NOTE] 
5a20			; | | > Compatible with PicoSPINet  
5a20			 
5a20					if DEBUG_FORTH_WORDS_KEY 
5a20						DMARK "REA" 
5a20 f5				push af  
5a21 3a 35 5a			ld a, (.dmark)  
5a24 32 a0 fd			ld (debug_mark),a  
5a27 3a 36 5a			ld a, (.dmark+1)  
5a2a 32 a1 fd			ld (debug_mark+1),a  
5a2d 3a 37 5a			ld a, (.dmark+2)  
5a30 32 a2 fd			ld (debug_mark+2),a  
5a33 18 03			jr .pastdmark  
5a35 ..			.dmark: db "REA"  
5a38 f1			.pastdmark: pop af  
5a39			endm  
# End of macro DMARK
5a39						CALLMONITOR 
5a39 cd aa fd			call debug_vector  
5a3c				endm  
# End of macro CALLMONITOR
5a3c					endif 
5a3c					; store_openext use it. If zero it is EOF 
5a3c			 
5a3c					; read block from current stream id 
5a3c					; if the block does not contain zero term keep reading blocks until zero found 
5a3c					; push the block to stack 
5a3c					; save the block id to stream 
5a3c			 
5a3c			 
5a3c cd 6e 5b				call .testeof 
5a3f 3e 01				ld a, 1 
5a41 bd					cp l 
5a42 ca 1d 5b				jp z, .ateof 
5a45			 
5a45			 
5a45			;		FORTH_DSP_VALUEHL 
5a45			 
5a45			;		push hl 
5a45			 
5a45			;	if DEBUG_STORESE 
5a45			;		DMARK "REA" 
5a45			;		CALLMONITOR 
5a45			;	endif 
5a45			;		FORTH_DSP_POP 
5a45			 
5a45			;		pop hl 
5a45				 
5a45 3a 9c f9				ld a, (store_filecache) 
5a48 67					ld h,a 
5a49			 
5a49 3a 9f f9				ld a, (store_openext) 
5a4c 6f					ld l, a 
5a4d					 
5a4d fe 00				cp 0 
5a4f ca 1d 5b				jp z, .ateof     ; dont read past eof 
5a52			 
5a52 cd b0 0c				call storage_clear_page 
5a55			 
5a55 11 af f9				ld de, store_page 
5a58				if DEBUG_STORESE 
5a58					DMARK "RE1" 
5a58 f5				push af  
5a59 3a 6d 5a			ld a, (.dmark)  
5a5c 32 a0 fd			ld (debug_mark),a  
5a5f 3a 6e 5a			ld a, (.dmark+1)  
5a62 32 a1 fd			ld (debug_mark+1),a  
5a65 3a 6f 5a			ld a, (.dmark+2)  
5a68 32 a2 fd			ld (debug_mark+2),a  
5a6b 18 03			jr .pastdmark  
5a6d ..			.dmark: db "RE1"  
5a70 f1			.pastdmark: pop af  
5a71			endm  
# End of macro DMARK
5a71					CALLMONITOR 
5a71 cd aa fd			call debug_vector  
5a74				endm  
# End of macro CALLMONITOR
5a74				endif 
5a74 cd cd 09				call storage_read 
5a77			 
5a77				if DEBUG_STORESE 
5a77					DMARK "RE2" 
5a77 f5				push af  
5a78 3a 8c 5a			ld a, (.dmark)  
5a7b 32 a0 fd			ld (debug_mark),a  
5a7e 3a 8d 5a			ld a, (.dmark+1)  
5a81 32 a1 fd			ld (debug_mark+1),a  
5a84 3a 8e 5a			ld a, (.dmark+2)  
5a87 32 a2 fd			ld (debug_mark+2),a  
5a8a 18 03			jr .pastdmark  
5a8c ..			.dmark: db "RE2"  
5a8f f1			.pastdmark: pop af  
5a90			endm  
# End of macro DMARK
5a90					CALLMONITOR 
5a90 cd aa fd			call debug_vector  
5a93				endm  
# End of macro CALLMONITOR
5a93				endif 
5a93 cd 07 10			call ishlzero 
5a96			;	ld a, l 
5a96			;	add h 
5a96			;	cp 0 
5a96 ca 1d 5b			jp z, .readeof 
5a99			 
5a99				; not eof so hl should point to data to push to stack 
5a99			 
5a99				if DEBUG_STORESE 
5a99					DMARK "RE3" 
5a99 f5				push af  
5a9a 3a ae 5a			ld a, (.dmark)  
5a9d 32 a0 fd			ld (debug_mark),a  
5aa0 3a af 5a			ld a, (.dmark+1)  
5aa3 32 a1 fd			ld (debug_mark+1),a  
5aa6 3a b0 5a			ld a, (.dmark+2)  
5aa9 32 a2 fd			ld (debug_mark+2),a  
5aac 18 03			jr .pastdmark  
5aae ..			.dmark: db "RE3"  
5ab1 f1			.pastdmark: pop af  
5ab2			endm  
# End of macro DMARK
5ab2					CALLMONITOR 
5ab2 cd aa fd			call debug_vector  
5ab5				endm  
# End of macro CALLMONITOR
5ab5				endif 
5ab5 cd b6 20			call forth_push_str 
5ab8			 
5ab8				if DEBUG_STORESE 
5ab8					DMARK "RE4" 
5ab8 f5				push af  
5ab9 3a cd 5a			ld a, (.dmark)  
5abc 32 a0 fd			ld (debug_mark),a  
5abf 3a ce 5a			ld a, (.dmark+1)  
5ac2 32 a1 fd			ld (debug_mark+1),a  
5ac5 3a cf 5a			ld a, (.dmark+2)  
5ac8 32 a2 fd			ld (debug_mark+2),a  
5acb 18 03			jr .pastdmark  
5acd ..			.dmark: db "RE4"  
5ad0 f1			.pastdmark: pop af  
5ad1			endm  
# End of macro DMARK
5ad1					CALLMONITOR 
5ad1 cd aa fd			call debug_vector  
5ad4				endm  
# End of macro CALLMONITOR
5ad4				endif 
5ad4				; get next block  or mark as eof 
5ad4			 
5ad4 3a 9e f9			ld a, (store_openmaxext)   ; get our limit 
5ad7 4f				ld c, a	 
5ad8 3a 9f f9			ld a, (store_openext) 
5adb			 
5adb				if DEBUG_STORESE 
5adb					DMARK "RE5" 
5adb f5				push af  
5adc 3a f0 5a			ld a, (.dmark)  
5adf 32 a0 fd			ld (debug_mark),a  
5ae2 3a f1 5a			ld a, (.dmark+1)  
5ae5 32 a1 fd			ld (debug_mark+1),a  
5ae8 3a f2 5a			ld a, (.dmark+2)  
5aeb 32 a2 fd			ld (debug_mark+2),a  
5aee 18 03			jr .pastdmark  
5af0 ..			.dmark: db "RE5"  
5af3 f1			.pastdmark: pop af  
5af4			endm  
# End of macro DMARK
5af4					CALLMONITOR 
5af4 cd aa fd			call debug_vector  
5af7				endm  
# End of macro CALLMONITOR
5af7				endif 
5af7 b9				cp c 
5af8 28 23			jr z, .readeof     ; at last extent 
5afa			 
5afa 3c					inc a 
5afb 32 9f f9				ld (store_openext), a 
5afe			 
5afe				if DEBUG_STORESE 
5afe					DMARK "RE6" 
5afe f5				push af  
5aff 3a 13 5b			ld a, (.dmark)  
5b02 32 a0 fd			ld (debug_mark),a  
5b05 3a 14 5b			ld a, (.dmark+1)  
5b08 32 a1 fd			ld (debug_mark+1),a  
5b0b 3a 15 5b			ld a, (.dmark+2)  
5b0e 32 a2 fd			ld (debug_mark+2),a  
5b11 18 03			jr .pastdmark  
5b13 ..			.dmark: db "RE6"  
5b16 f1			.pastdmark: pop af  
5b17			endm  
# End of macro DMARK
5b17					CALLMONITOR 
5b17 cd aa fd			call debug_vector  
5b1a				endm  
# End of macro CALLMONITOR
5b1a				endif 
5b1a			 
5b1a			 
5b1a				       NEXTW 
5b1a c3 38 24			jp macro_next 
5b1d				endm 
# End of macro NEXTW
5b1d			.ateof: 
5b1d				;	ld hl, .showeof 
5b1d				;	call forth_push_str 
5b1d 3e 00		.readeof:	ld a, 0 
5b1f 32 9f f9				ld (store_openext), a 
5b22			 
5b22					 
5b22				if DEBUG_STORESE 
5b22					DMARK "REF" 
5b22 f5				push af  
5b23 3a 37 5b			ld a, (.dmark)  
5b26 32 a0 fd			ld (debug_mark),a  
5b29 3a 38 5b			ld a, (.dmark+1)  
5b2c 32 a1 fd			ld (debug_mark+1),a  
5b2f 3a 39 5b			ld a, (.dmark+2)  
5b32 32 a2 fd			ld (debug_mark+2),a  
5b35 18 03			jr .pastdmark  
5b37 ..			.dmark: db "REF"  
5b3a f1			.pastdmark: pop af  
5b3b			endm  
# End of macro DMARK
5b3b					CALLMONITOR 
5b3b cd aa fd			call debug_vector  
5b3e				endm  
# End of macro CALLMONITOR
5b3e				endif 
5b3e				       NEXTW 
5b3e c3 38 24			jp macro_next 
5b41				endm 
# End of macro NEXTW
5b41			 
5b41			;.showeof:   db "eof", 0 
5b41			 
5b41			 
5b41			.EOF: 
5b41				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
5b41 6d				db WORD_SYS_CORE+89             
5b42 83 5b			dw .FORMAT            
5b44 04				db 3 + 1 
5b45 .. 00			db "EOF",0              
5b49				endm 
# End of macro CWHEAD
5b49			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
5b49			; | | e.g. 
5b49			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
5b49			; | | > [!NOTE] 
5b49			; | | > Compatible with PicoSPINet  
5b49					; TODO if current block id for stream is zero then push true else false 
5b49			 
5b49					if DEBUG_FORTH_WORDS_KEY 
5b49						DMARK "EOF" 
5b49 f5				push af  
5b4a 3a 5e 5b			ld a, (.dmark)  
5b4d 32 a0 fd			ld (debug_mark),a  
5b50 3a 5f 5b			ld a, (.dmark+1)  
5b53 32 a1 fd			ld (debug_mark+1),a  
5b56 3a 60 5b			ld a, (.dmark+2)  
5b59 32 a2 fd			ld (debug_mark+2),a  
5b5c 18 03			jr .pastdmark  
5b5e ..			.dmark: db "EOF"  
5b61 f1			.pastdmark: pop af  
5b62			endm  
# End of macro DMARK
5b62						CALLMONITOR 
5b62 cd aa fd			call debug_vector  
5b65				endm  
# End of macro CALLMONITOR
5b65					endif 
5b65			 
5b65					; TODO handlue multiple file streams 
5b65			 
5b65			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
5b65 cd 6e 5b				call .testeof 
5b68 cd 48 20				call forth_push_numhl 
5b6b			 
5b6b			 
5b6b				       NEXTW 
5b6b c3 38 24			jp macro_next 
5b6e				endm 
# End of macro NEXTW
5b6e			 
5b6e			.testeof: 
5b6e 2e 01				ld l, 1 
5b70 3a 9e f9				ld a, (store_openmaxext) 
5b73 fe 00				cp 0 
5b75 28 09				jr  z, .eofdone   ; empty file 
5b77 3a 9f f9				ld a, (store_openext) 
5b7a fe 00				cp 0 
5b7c 28 02				jr  z, .eofdone 
5b7e 2e 00				ld l, 0 
5b80 26 00		.eofdone:	ld h, 0 
5b82 c9					ret 
5b83			 
5b83			 
5b83			 
5b83			 
5b83			.FORMAT: 
5b83				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
5b83 6d				db WORD_SYS_CORE+89             
5b84 d4 5b			dw .LABEL            
5b86 07				db 6 + 1 
5b87 .. 00			db "FORMAT",0              
5b8e				endm 
# End of macro CWHEAD
5b8e			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
5b8e			; | | > [!NOTE] 
5b8e			; | | > Compatible with PicoSPINet  
5b8e					; TODO if current block id for stream is zero then push true else false 
5b8e				 
5b8e				if DEBUG_STORESE 
5b8e					DMARK "FOR" 
5b8e f5				push af  
5b8f 3a a3 5b			ld a, (.dmark)  
5b92 32 a0 fd			ld (debug_mark),a  
5b95 3a a4 5b			ld a, (.dmark+1)  
5b98 32 a1 fd			ld (debug_mark+1),a  
5b9b 3a a5 5b			ld a, (.dmark+2)  
5b9e 32 a2 fd			ld (debug_mark+2),a  
5ba1 18 03			jr .pastdmark  
5ba3 ..			.dmark: db "FOR"  
5ba6 f1			.pastdmark: pop af  
5ba7			endm  
# End of macro DMARK
5ba7					CALLMONITOR 
5ba7 cd aa fd			call debug_vector  
5baa				endm  
# End of macro CALLMONITOR
5baa				endif 
5baa					; Wipes the bank check flags to cause a reformat on next block 0 read 
5baa			 
5baa 21 01 00				ld hl, 1 
5bad 3e 00				ld a, 0 
5baf cd 79 02				call se_writebyte 
5bb2			 
5bb2				if DEBUG_STORESE 
5bb2					DMARK "FO0" 
5bb2 f5				push af  
5bb3 3a c7 5b			ld a, (.dmark)  
5bb6 32 a0 fd			ld (debug_mark),a  
5bb9 3a c8 5b			ld a, (.dmark+1)  
5bbc 32 a1 fd			ld (debug_mark+1),a  
5bbf 3a c9 5b			ld a, (.dmark+2)  
5bc2 32 a2 fd			ld (debug_mark+2),a  
5bc5 18 03			jr .pastdmark  
5bc7 ..			.dmark: db "FO0"  
5bca f1			.pastdmark: pop af  
5bcb			endm  
# End of macro DMARK
5bcb					CALLMONITOR 
5bcb cd aa fd			call debug_vector  
5bce				endm  
# End of macro CALLMONITOR
5bce				endif 
5bce					; force bank init 
5bce			 
5bce cd 25 05				call storage_get_block_0 
5bd1					 
5bd1				       NEXTW 
5bd1 c3 38 24			jp macro_next 
5bd4				endm 
# End of macro NEXTW
5bd4			.LABEL: 
5bd4				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
5bd4 6d				db WORD_SYS_CORE+89             
5bd5 22 5c			dw .STOREPAGE            
5bd7 06				db 5 + 1 
5bd8 .. 00			db "LABEL",0              
5bde				endm 
# End of macro CWHEAD
5bde			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
5bde			; | | > [!NOTE] 
5bde			; | | > Compatible with PicoSPINet  
5bde					; TODO test to see if bank is selected 
5bde				 
5bde					if DEBUG_FORTH_WORDS_KEY 
5bde						DMARK "LBL" 
5bde f5				push af  
5bdf 3a f3 5b			ld a, (.dmark)  
5be2 32 a0 fd			ld (debug_mark),a  
5be5 3a f4 5b			ld a, (.dmark+1)  
5be8 32 a1 fd			ld (debug_mark+1),a  
5beb 3a f5 5b			ld a, (.dmark+2)  
5bee 32 a2 fd			ld (debug_mark+2),a  
5bf1 18 03			jr .pastdmark  
5bf3 ..			.dmark: db "LBL"  
5bf6 f1			.pastdmark: pop af  
5bf7			endm  
# End of macro DMARK
5bf7						CALLMONITOR 
5bf7 cd aa fd			call debug_vector  
5bfa				endm  
# End of macro CALLMONITOR
5bfa					endif 
5bfa			;	if DEBUG_STORESE 
5bfa			;		DMARK "LBL" 
5bfa			;		CALLMONITOR 
5bfa			;	endif 
5bfa					FORTH_DSP_VALUEHL 
5bfa cd 4d 22			call macro_dsp_valuehl 
5bfd				endm 
# End of macro FORTH_DSP_VALUEHL
5bfd					;v5FORTH_DSP_VALUE 
5bfd					 
5bfd			;		push hl 
5bfd					FORTH_DSP_POP 
5bfd cd 05 23			call macro_forth_dsp_pop 
5c00				endm 
# End of macro FORTH_DSP_POP
5c00			;		pop hl 
5c00			 
5c00			;v5		inc hl   ; move past the type marker 
5c00			 
5c00				if DEBUG_STORESE 
5c00					DMARK "LBl" 
5c00 f5				push af  
5c01 3a 15 5c			ld a, (.dmark)  
5c04 32 a0 fd			ld (debug_mark),a  
5c07 3a 16 5c			ld a, (.dmark+1)  
5c0a 32 a1 fd			ld (debug_mark+1),a  
5c0d 3a 17 5c			ld a, (.dmark+2)  
5c10 32 a2 fd			ld (debug_mark+2),a  
5c13 18 03			jr .pastdmark  
5c15 ..			.dmark: db "LBl"  
5c18 f1			.pastdmark: pop af  
5c19			endm  
# End of macro DMARK
5c19					CALLMONITOR 
5c19 cd aa fd			call debug_vector  
5c1c				endm  
# End of macro CALLMONITOR
5c1c				endif 
5c1c cd 49 06				call storage_label 
5c1f			 
5c1f				       NEXTW 
5c1f c3 38 24			jp macro_next 
5c22				endm 
# End of macro NEXTW
5c22			.STOREPAGE: 
5c22				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
5c22 6d				db WORD_SYS_CORE+89             
5c23 55 5c			dw .LABELS            
5c25 0a				db 9 + 1 
5c26 .. 00			db "STOREPAGE",0              
5c30				endm 
# End of macro CWHEAD
5c30			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
5c30			; | | > [!NOTE] 
5c30			; | | > Compatible with PicoSPINet  
5c30					; TODO test to see if bank is selected 
5c30				 
5c30					if DEBUG_FORTH_WORDS_KEY 
5c30						DMARK "STP" 
5c30 f5				push af  
5c31 3a 45 5c			ld a, (.dmark)  
5c34 32 a0 fd			ld (debug_mark),a  
5c37 3a 46 5c			ld a, (.dmark+1)  
5c3a 32 a1 fd			ld (debug_mark+1),a  
5c3d 3a 47 5c			ld a, (.dmark+2)  
5c40 32 a2 fd			ld (debug_mark+2),a  
5c43 18 03			jr .pastdmark  
5c45 ..			.dmark: db "STP"  
5c48 f1			.pastdmark: pop af  
5c49			endm  
# End of macro DMARK
5c49						CALLMONITOR 
5c49 cd aa fd			call debug_vector  
5c4c				endm  
# End of macro CALLMONITOR
5c4c					endif 
5c4c			;	if DEBUG_STORESE 
5c4c			;		DMARK "STP" 
5c4c			;		CALLMONITOR 
5c4c			;	endif 
5c4c			 
5c4c 21 af f9			ld hl, store_page 
5c4f cd 48 20			call forth_push_numhl 
5c52			 
5c52			 
5c52				       NEXTW 
5c52 c3 38 24			jp macro_next 
5c55				endm 
# End of macro NEXTW
5c55			.LABELS: 
5c55				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
5c55 6d				db WORD_SYS_CORE+89             
5c56 df 5c			dw .SCONST1            
5c58 07				db 6 + 1 
5c59 .. 00			db "LABELS",0              
5c60				endm 
# End of macro CWHEAD
5c60			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | DONE 
5c60			; | | > [!CAUTION] 
5c60			; | | > *NOT* Compatible with PicoSPINet  
5c60					;  
5c60			 
5c60					; save the current device selected to restore afterwards 
5c60				 
5c60 3a 95 f9				ld a, (spi_device) 
5c63 f5					push af 
5c64			 
5c64			 
5c64					; run through each of the banks 
5c64			 
5c64 21 01 00				ld hl, 1 
5c67 cd 48 20				call forth_push_numhl 
5c6a 3e ff				ld a, SPI_CE_HIGH 
5c6c cb 87				res SPI_CE0, a 
5c6e 32 95 f9				ld (spi_device), a 
5c71 cd 25 05				call storage_get_block_0 
5c74 21 b2 f9				ld hl, store_page+3 
5c77 cd b6 20				call forth_push_str 
5c7a			 
5c7a					 
5c7a 21 02 00				ld hl, 2 
5c7d cd 48 20				call forth_push_numhl 
5c80 3e ff				ld a, SPI_CE_HIGH 
5c82 cb 8f				res SPI_CE1, a 
5c84 32 95 f9				ld (spi_device), a 
5c87 cd 25 05				call storage_get_block_0 
5c8a 21 b2 f9				ld hl, store_page+3 
5c8d cd b6 20				call forth_push_str 
5c90			 
5c90					 
5c90 21 03 00				ld hl, 3 
5c93 cd 48 20				call forth_push_numhl 
5c96 3e ff				ld a, SPI_CE_HIGH 
5c98 cb 97				res SPI_CE2, a 
5c9a 32 95 f9				ld (spi_device), a 
5c9d cd 25 05				call storage_get_block_0 
5ca0 21 b2 f9				ld hl, store_page+3 
5ca3 cd b6 20				call forth_push_str 
5ca6			 
5ca6			 
5ca6 21 04 00				ld hl, 4 
5ca9 cd 48 20				call forth_push_numhl 
5cac 3e ff				ld a, SPI_CE_HIGH 
5cae cb 9f				res SPI_CE3, a 
5cb0 32 95 f9				ld (spi_device), a 
5cb3 cd 25 05				call storage_get_block_0 
5cb6 21 b2 f9				ld hl, store_page+3 
5cb9 cd b6 20				call forth_push_str 
5cbc			 
5cbc					 
5cbc			 
5cbc 21 05 00				ld hl, 5 
5cbf cd 48 20				call forth_push_numhl 
5cc2 3e ff				ld a, SPI_CE_HIGH 
5cc4 cb a7				res SPI_CE4, a 
5cc6 32 95 f9				ld (spi_device), a 
5cc9 cd 25 05				call storage_get_block_0 
5ccc 21 b2 f9				ld hl, store_page+3 
5ccf cd b6 20				call forth_push_str 
5cd2			 
5cd2					 
5cd2					; push fixed count of storage devices (on board) for now 
5cd2			 
5cd2 21 05 00				ld hl, 5 
5cd5 cd 48 20				call forth_push_numhl 
5cd8			 
5cd8					; restore selected device  
5cd8				 
5cd8 f1					pop af 
5cd9 32 95 f9				ld (spi_device), a 
5cdc			 
5cdc				       NEXTW 
5cdc c3 38 24			jp macro_next 
5cdf				endm 
# End of macro NEXTW
5cdf			 
5cdf			.SCONST1: 
5cdf				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
5cdf 6d				db WORD_SYS_CORE+89             
5ce0 f6 5c			dw .SCONST2            
5ce2 07				db 6 + 1 
5ce3 .. 00			db "FILEID",0              
5cea				endm 
# End of macro CWHEAD
5cea			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
5cea			; | | > [!NOTE] 
5cea			; | | > Compatible with PicoSPINet  
5cea 3a 9c f9				ld a, (store_filecache) 
5ced 26 00				ld h, 0 
5cef 6f					ld l, a 
5cf0 cd 48 20				call forth_push_numhl 
5cf3					NEXTW 
5cf3 c3 38 24			jp macro_next 
5cf6				endm 
# End of macro NEXTW
5cf6			.SCONST2: 
5cf6				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
5cf6 6d				db WORD_SYS_CORE+89             
5cf7 0e 5d			dw .SCONST3            
5cf9 08				db 7 + 1 
5cfa .. 00			db "FILEEXT",0              
5d02				endm 
# End of macro CWHEAD
5d02			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
5d02			; | | > [!NOTE] 
5d02			; | | > Compatible with PicoSPINet  
5d02 3a 9f f9				ld a, (store_openext) 
5d05 26 00				ld h, 0 
5d07 6f					ld l, a 
5d08 cd 48 20				call forth_push_numhl 
5d0b					NEXTW 
5d0b c3 38 24			jp macro_next 
5d0e				endm 
# End of macro NEXTW
5d0e			.SCONST3: 
5d0e				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
5d0e 6d				db WORD_SYS_CORE+89             
5d0f 26 5d			dw .SCONST4            
5d11 08				db 7 + 1 
5d12 .. 00			db "FILEMAX",0              
5d1a				endm 
# End of macro CWHEAD
5d1a			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5d1a			; | | > [!NOTE] 
5d1a			; | | > Compatible with PicoSPINet  
5d1a 3a 9e f9				ld a, (store_openmaxext) 
5d1d 26 00				ld h, 0 
5d1f 6f					ld l, a 
5d20 cd 48 20				call forth_push_numhl 
5d23					NEXTW 
5d23 c3 38 24			jp macro_next 
5d26				endm 
# End of macro NEXTW
5d26			.SCONST4: 
5d26				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
5d26 6d				db WORD_SYS_CORE+89             
5d27 3c 5d			dw .SCONST5            
5d29 09				db 8 + 1 
5d2a .. 00			db "FILEADDR",0              
5d33				endm 
# End of macro CWHEAD
5d33			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currently open file to stack | DONE 
5d33			; | | > [!NOTE] 
5d33			; | | > Compatible with PicoSPINet  
5d33 2a a0 f9				ld hl, (store_openaddr) 
5d36 cd 48 20				call forth_push_numhl 
5d39					NEXTW 
5d39 c3 38 24			jp macro_next 
5d3c				endm 
# End of macro NEXTW
5d3c			.SCONST5: 
5d3c				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
5d3c 6d				db WORD_SYS_CORE+89             
5d3d 5d 5d			dw .SCONST6            
5d3f 09				db 8 + 1 
5d40 .. 00			db "FILEPAGE",0              
5d49				endm 
# End of macro CWHEAD
5d49			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
5d49			; | | > [!NOTE] 
5d49			; | | > Compatible with PicoSPINet  
5d49 2a a0 f9				ld hl, (store_openaddr) 
5d4c e5					push hl 
5d4d c1					pop bc 
5d4e 16 00				ld d, 0 
5d50 1e 40				ld e, STORE_BLOCK_PHY 
5d52 cd 3b 0f				call Div16 
5d55 c5					push bc 
5d56 e1					pop hl 
5d57 cd 48 20				call forth_push_numhl 
5d5a					NEXTW 
5d5a c3 38 24			jp macro_next 
5d5d				endm 
# End of macro NEXTW
5d5d			.SCONST6: 
5d5d				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
5d5d 6d				db WORD_SYS_CORE+89             
5d5e 76 5d			dw .ENDSTORAGE            
5d60 09				db 8 + 1 
5d61 .. 00			db "READCONT",0              
5d6a				endm 
# End of macro CWHEAD
5d6a			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
5d6a			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
5d6a			; | | a further read should, if applicable, be CONCAT to the previous read. 
5d6a			; | | > [!NOTE] 
5d6a			; | | > Compatible with PicoSPINet  
5d6a 3a a2 f9				ld a, (store_readcont) 
5d6d 26 00				ld h, 0 
5d6f 6f					ld l, a 
5d70 cd 48 20				call forth_push_numhl 
5d73					NEXTW 
5d73 c3 38 24			jp macro_next 
5d76				endm 
# End of macro NEXTW
5d76			.ENDSTORAGE: 
5d76			; eof 
# End of file forth_words_storage.asm
5d76			endif 
5d76				include "forth_words_device.asm" 
5d76			; Device related words 
5d76			 
5d76			; | ## Device Words 
5d76			 
5d76			;if SOUND_ENABLE 
5d76			;.NOTE: 
5d76			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
5d76			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
5d76			;		if DEBUG_FORTH_WORDS_KEY 
5d76			;			DMARK "NTE" 
5d76			;			CALLMONITOR 
5d76			;		endif 
5d76			; 
5d76			;	 
5d76			; 
5d76			;		NEXTW 
5d76			;.AFTERSOUND: 
5d76			;endif 
5d76			 
5d76			 
5d76			USE_GPIO: equ 0 
5d76			 
5d76			if USE_GPIO 
5d76			.GP1: 
5d76				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
5d76			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
5d76					NEXTW 
5d76			.GP2: 
5d76				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
5d76			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
5d76			 
5d76					NEXTW 
5d76			 
5d76			.GP3: 
5d76				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
5d76			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
5d76			 
5d76					NEXTW 
5d76			 
5d76			.GP4: 
5d76				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
5d76			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
5d76			 
5d76					NEXTW 
5d76			.SIN: 
5d76			 
5d76			 
5d76			endif 
5d76			 
5d76			 
5d76				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
5d76 33				db WORD_SYS_CORE+31             
5d77 ab 5d			dw .SOUT            
5d79 03				db 2 + 1 
5d7a .. 00			db "IN",0              
5d7d				endm 
# End of macro CWHEAD
5d7d			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
5d7d					if DEBUG_FORTH_WORDS_KEY 
5d7d						DMARK "IN." 
5d7d f5				push af  
5d7e 3a 92 5d			ld a, (.dmark)  
5d81 32 a0 fd			ld (debug_mark),a  
5d84 3a 93 5d			ld a, (.dmark+1)  
5d87 32 a1 fd			ld (debug_mark+1),a  
5d8a 3a 94 5d			ld a, (.dmark+2)  
5d8d 32 a2 fd			ld (debug_mark+2),a  
5d90 18 03			jr .pastdmark  
5d92 ..			.dmark: db "IN."  
5d95 f1			.pastdmark: pop af  
5d96			endm  
# End of macro DMARK
5d96						CALLMONITOR 
5d96 cd aa fd			call debug_vector  
5d99				endm  
# End of macro CALLMONITOR
5d99					endif 
5d99					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d99 cd 4d 22			call macro_dsp_valuehl 
5d9c				endm 
# End of macro FORTH_DSP_VALUEHL
5d9c			 
5d9c e5					push hl 
5d9d			 
5d9d					; destroy value TOS 
5d9d			 
5d9d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d9d cd 05 23			call macro_forth_dsp_pop 
5da0				endm 
# End of macro FORTH_DSP_POP
5da0			 
5da0					; one value on hl get other one back 
5da0			 
5da0 c1					pop bc 
5da1			 
5da1					; do the sub 
5da1			;		ex de, hl 
5da1			 
5da1 ed 68				in l,(c) 
5da3			 
5da3					; save it 
5da3			 
5da3 26 00				ld h,0 
5da5			 
5da5					; TODO push value back onto stack for another op etc 
5da5			 
5da5 cd 48 20				call forth_push_numhl 
5da8					NEXTW 
5da8 c3 38 24			jp macro_next 
5dab				endm 
# End of macro NEXTW
5dab			.SOUT: 
5dab				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
5dab 34				db WORD_SYS_CORE+32             
5dac fe 5d			dw .SPIO            
5dae 04				db 3 + 1 
5daf .. 00			db "OUT",0              
5db3				endm 
# End of macro CWHEAD
5db3			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
5db3					if DEBUG_FORTH_WORDS_KEY 
5db3						DMARK "OUT" 
5db3 f5				push af  
5db4 3a c8 5d			ld a, (.dmark)  
5db7 32 a0 fd			ld (debug_mark),a  
5dba 3a c9 5d			ld a, (.dmark+1)  
5dbd 32 a1 fd			ld (debug_mark+1),a  
5dc0 3a ca 5d			ld a, (.dmark+2)  
5dc3 32 a2 fd			ld (debug_mark+2),a  
5dc6 18 03			jr .pastdmark  
5dc8 ..			.dmark: db "OUT"  
5dcb f1			.pastdmark: pop af  
5dcc			endm  
# End of macro DMARK
5dcc						CALLMONITOR 
5dcc cd aa fd			call debug_vector  
5dcf				endm  
# End of macro CALLMONITOR
5dcf					endif 
5dcf			 
5dcf					; get port 
5dcf			 
5dcf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5dcf cd 4d 22			call macro_dsp_valuehl 
5dd2				endm 
# End of macro FORTH_DSP_VALUEHL
5dd2			 
5dd2 e5					push hl 
5dd3			 
5dd3					; destroy value TOS 
5dd3			 
5dd3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5dd3 cd 05 23			call macro_forth_dsp_pop 
5dd6				endm 
# End of macro FORTH_DSP_POP
5dd6			 
5dd6					; get byte to send 
5dd6			 
5dd6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5dd6 cd 4d 22			call macro_dsp_valuehl 
5dd9				endm 
# End of macro FORTH_DSP_VALUEHL
5dd9			 
5dd9			;		push hl 
5dd9			 
5dd9					; destroy value TOS 
5dd9			 
5dd9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5dd9 cd 05 23			call macro_forth_dsp_pop 
5ddc				endm 
# End of macro FORTH_DSP_POP
5ddc			 
5ddc					; one value on hl get other one back 
5ddc			 
5ddc			;		pop hl 
5ddc			 
5ddc c1					pop bc 
5ddd			 
5ddd					if DEBUG_FORTH_WORDS 
5ddd						DMARK "OUT" 
5ddd f5				push af  
5dde 3a f2 5d			ld a, (.dmark)  
5de1 32 a0 fd			ld (debug_mark),a  
5de4 3a f3 5d			ld a, (.dmark+1)  
5de7 32 a1 fd			ld (debug_mark+1),a  
5dea 3a f4 5d			ld a, (.dmark+2)  
5ded 32 a2 fd			ld (debug_mark+2),a  
5df0 18 03			jr .pastdmark  
5df2 ..			.dmark: db "OUT"  
5df5 f1			.pastdmark: pop af  
5df6			endm  
# End of macro DMARK
5df6						CALLMONITOR 
5df6 cd aa fd			call debug_vector  
5df9				endm  
# End of macro CALLMONITOR
5df9					endif 
5df9			 
5df9 ed 69				out (c), l 
5dfb			 
5dfb					NEXTW 
5dfb c3 38 24			jp macro_next 
5dfe				endm 
# End of macro NEXTW
5dfe			 
5dfe			 
5dfe			.SPIO: 
5dfe			 
5dfe			if STORAGE_SE 
5dfe				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
5dfe 51				db WORD_SYS_CORE+61             
5dff 0f 5e			dw .SPICEH            
5e01 07				db 6 + 1 
5e02 .. 00			db "SPICEL",0              
5e09				endm 
# End of macro CWHEAD
5e09			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5e09			 
5e09 cd 22 02				call spi_ce_low 
5e0c			    NEXTW 
5e0c c3 38 24			jp macro_next 
5e0f				endm 
# End of macro NEXTW
5e0f			 
5e0f			.SPICEH: 
5e0f				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
5e0f 51				db WORD_SYS_CORE+61             
5e10 20 5e			dw .SPIOb            
5e12 07				db 6 + 1 
5e13 .. 00			db "SPICEH",0              
5e1a				endm 
# End of macro CWHEAD
5e1a			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
5e1a			 
5e1a cd 11 02				call spi_ce_high 
5e1d			    NEXTW 
5e1d c3 38 24			jp macro_next 
5e20				endm 
# End of macro NEXTW
5e20			 
5e20			 
5e20			.SPIOb: 
5e20			 
5e20				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
5e20 51				db WORD_SYS_CORE+61             
5e21 52 5e			dw .SPII            
5e23 05				db 4 + 1 
5e24 .. 00			db "SPIO",0              
5e29				endm 
# End of macro CWHEAD
5e29			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
5e29			 
5e29					if DEBUG_FORTH_WORDS_KEY 
5e29						DMARK "SPo" 
5e29 f5				push af  
5e2a 3a 3e 5e			ld a, (.dmark)  
5e2d 32 a0 fd			ld (debug_mark),a  
5e30 3a 3f 5e			ld a, (.dmark+1)  
5e33 32 a1 fd			ld (debug_mark+1),a  
5e36 3a 40 5e			ld a, (.dmark+2)  
5e39 32 a2 fd			ld (debug_mark+2),a  
5e3c 18 03			jr .pastdmark  
5e3e ..			.dmark: db "SPo"  
5e41 f1			.pastdmark: pop af  
5e42			endm  
# End of macro DMARK
5e42						CALLMONITOR 
5e42 cd aa fd			call debug_vector  
5e45				endm  
# End of macro CALLMONITOR
5e45					endif 
5e45					; get port 
5e45			 
5e45			 
5e45					; get byte to send 
5e45			 
5e45					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5e45 cd 4d 22			call macro_dsp_valuehl 
5e48				endm 
# End of macro FORTH_DSP_VALUEHL
5e48			 
5e48			;		push hl    ; u1  
5e48			 
5e48					; destroy value TOS 
5e48			 
5e48					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5e48 cd 05 23			call macro_forth_dsp_pop 
5e4b				endm 
# End of macro FORTH_DSP_POP
5e4b			 
5e4b					; one value on hl get other one back 
5e4b			 
5e4b			;		pop hl   ; u2 - addr 
5e4b			 
5e4b					; TODO Send SPI byte 
5e4b			 
5e4b			;		push hl 
5e4b			;		call spi_ce_low 
5e4b			;		pop hl 
5e4b 7d					ld a, l 
5e4c cd 10 01				call spi_send_byte 
5e4f			;		call spi_ce_high 
5e4f			 
5e4f					NEXTW 
5e4f c3 38 24			jp macro_next 
5e52				endm 
# End of macro NEXTW
5e52			 
5e52			.SPII: 
5e52				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
5e52 52				db WORD_SYS_CORE+62             
5e53 bb 5e			dw .SESEL            
5e55 06				db 5 + 1 
5e56 .. 00			db "SPII",0              
5e5b				endm 
# End of macro CWHEAD
5e5b			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
5e5b					if DEBUG_FORTH_WORDS_KEY 
5e5b						DMARK "SPi" 
5e5b f5				push af  
5e5c 3a 70 5e			ld a, (.dmark)  
5e5f 32 a0 fd			ld (debug_mark),a  
5e62 3a 71 5e			ld a, (.dmark+1)  
5e65 32 a1 fd			ld (debug_mark+1),a  
5e68 3a 72 5e			ld a, (.dmark+2)  
5e6b 32 a2 fd			ld (debug_mark+2),a  
5e6e 18 03			jr .pastdmark  
5e70 ..			.dmark: db "SPi"  
5e73 f1			.pastdmark: pop af  
5e74			endm  
# End of macro DMARK
5e74						CALLMONITOR 
5e74 cd aa fd			call debug_vector  
5e77				endm  
# End of macro CALLMONITOR
5e77					endif 
5e77			 
5e77					; TODO Get SPI byte 
5e77			 
5e77 cd 37 01				call spi_read_byte 
5e7a			 
5e7a					if DEBUG_FORTH_WORDS 
5e7a						DMARK "Si2" 
5e7a f5				push af  
5e7b 3a 8f 5e			ld a, (.dmark)  
5e7e 32 a0 fd			ld (debug_mark),a  
5e81 3a 90 5e			ld a, (.dmark+1)  
5e84 32 a1 fd			ld (debug_mark+1),a  
5e87 3a 91 5e			ld a, (.dmark+2)  
5e8a 32 a2 fd			ld (debug_mark+2),a  
5e8d 18 03			jr .pastdmark  
5e8f ..			.dmark: db "Si2"  
5e92 f1			.pastdmark: pop af  
5e93			endm  
# End of macro DMARK
5e93						CALLMONITOR 
5e93 cd aa fd			call debug_vector  
5e96				endm  
# End of macro CALLMONITOR
5e96					endif 
5e96 26 00				ld h, 0 
5e98 6f					ld l, a 
5e99					if DEBUG_FORTH_WORDS 
5e99						DMARK "Si3" 
5e99 f5				push af  
5e9a 3a ae 5e			ld a, (.dmark)  
5e9d 32 a0 fd			ld (debug_mark),a  
5ea0 3a af 5e			ld a, (.dmark+1)  
5ea3 32 a1 fd			ld (debug_mark+1),a  
5ea6 3a b0 5e			ld a, (.dmark+2)  
5ea9 32 a2 fd			ld (debug_mark+2),a  
5eac 18 03			jr .pastdmark  
5eae ..			.dmark: db "Si3"  
5eb1 f1			.pastdmark: pop af  
5eb2			endm  
# End of macro DMARK
5eb2						CALLMONITOR 
5eb2 cd aa fd			call debug_vector  
5eb5				endm  
# End of macro CALLMONITOR
5eb5					endif 
5eb5 cd 48 20				call forth_push_numhl 
5eb8			 
5eb8					NEXTW 
5eb8 c3 38 24			jp macro_next 
5ebb				endm 
# End of macro NEXTW
5ebb			 
5ebb			 
5ebb			 
5ebb			.SESEL: 
5ebb				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
5ebb 66				db WORD_SYS_CORE+82             
5ebc 64 5f			dw .CARTDEV            
5ebe 05				db 4 + 1 
5ebf .. 00			db "BANK",0              
5ec4				endm 
# End of macro CWHEAD
5ec4			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
5ec4					if DEBUG_FORTH_WORDS_KEY 
5ec4						DMARK "BNK" 
5ec4 f5				push af  
5ec5 3a d9 5e			ld a, (.dmark)  
5ec8 32 a0 fd			ld (debug_mark),a  
5ecb 3a da 5e			ld a, (.dmark+1)  
5ece 32 a1 fd			ld (debug_mark+1),a  
5ed1 3a db 5e			ld a, (.dmark+2)  
5ed4 32 a2 fd			ld (debug_mark+2),a  
5ed7 18 03			jr .pastdmark  
5ed9 ..			.dmark: db "BNK"  
5edc f1			.pastdmark: pop af  
5edd			endm  
# End of macro DMARK
5edd						CALLMONITOR 
5edd cd aa fd			call debug_vector  
5ee0				endm  
# End of macro CALLMONITOR
5ee0					endif 
5ee0			 
5ee0 3e ff				ld a, 255 
5ee2 32 98 f9				ld (spi_cartdev), a 
5ee5			 
5ee5					; get bank 
5ee5			 
5ee5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5ee5 cd 4d 22			call macro_dsp_valuehl 
5ee8				endm 
# End of macro FORTH_DSP_VALUEHL
5ee8			 
5ee8			;		push hl 
5ee8			 
5ee8					; destroy value TOS 
5ee8			 
5ee8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5ee8 cd 05 23			call macro_forth_dsp_pop 
5eeb				endm 
# End of macro FORTH_DSP_POP
5eeb			 
5eeb					; one value on hl get other one back 
5eeb			 
5eeb			;		pop hl 
5eeb			 
5eeb			 
5eeb 0e ff				ld c, SPI_CE_HIGH 
5eed 06 30				ld b, '0'    ; human readable bank number 
5eef			 
5eef 7d					ld a, l 
5ef0			 
5ef0					if DEBUG_FORTH_WORDS 
5ef0						DMARK "BNK" 
5ef0 f5				push af  
5ef1 3a 05 5f			ld a, (.dmark)  
5ef4 32 a0 fd			ld (debug_mark),a  
5ef7 3a 06 5f			ld a, (.dmark+1)  
5efa 32 a1 fd			ld (debug_mark+1),a  
5efd 3a 07 5f			ld a, (.dmark+2)  
5f00 32 a2 fd			ld (debug_mark+2),a  
5f03 18 03			jr .pastdmark  
5f05 ..			.dmark: db "BNK"  
5f08 f1			.pastdmark: pop af  
5f09			endm  
# End of macro DMARK
5f09						CALLMONITOR 
5f09 cd aa fd			call debug_vector  
5f0c				endm  
# End of macro CALLMONITOR
5f0c					endif 
5f0c			 
5f0c					; active low 
5f0c			 
5f0c fe 00				cp 0 
5f0e 28 28				jr z, .bset 
5f10 fe 01				cp 1 
5f12 20 04				jr nz, .b2 
5f14 cb 81				res 0, c 
5f16 06 31				ld b, '1'    ; human readable bank number 
5f18 fe 02		.b2:		cp 2 
5f1a 20 04				jr nz, .b3 
5f1c cb 89				res 1, c 
5f1e 06 32				ld b, '2'    ; human readable bank number 
5f20 fe 03		.b3:		cp 3 
5f22 20 04				jr nz, .b4 
5f24 cb 91				res 2, c 
5f26 06 33				ld b, '3'    ; human readable bank number 
5f28 fe 04		.b4:		cp 4 
5f2a 20 04				jr nz, .b5 
5f2c cb 99				res 3, c 
5f2e 06 34				ld b, '4'    ; human readable bank number 
5f30 fe 05		.b5:		cp 5 
5f32 20 04				jr nz, .bset 
5f34 cb a1				res 4, c 
5f36 06 35				ld b, '5'    ; human readable bank number 
5f38			 
5f38			.bset: 
5f38 79					ld a, c 
5f39 32 95 f9				ld (spi_device),a 
5f3c 78					ld a, b 
5f3d 32 94 f9				ld (spi_device_id),a 
5f40					if DEBUG_FORTH_WORDS 
5f40						DMARK "BN2" 
5f40 f5				push af  
5f41 3a 55 5f			ld a, (.dmark)  
5f44 32 a0 fd			ld (debug_mark),a  
5f47 3a 56 5f			ld a, (.dmark+1)  
5f4a 32 a1 fd			ld (debug_mark+1),a  
5f4d 3a 57 5f			ld a, (.dmark+2)  
5f50 32 a2 fd			ld (debug_mark+2),a  
5f53 18 03			jr .pastdmark  
5f55 ..			.dmark: db "BN2"  
5f58 f1			.pastdmark: pop af  
5f59			endm  
# End of macro DMARK
5f59						CALLMONITOR 
5f59 cd aa fd			call debug_vector  
5f5c				endm  
# End of macro CALLMONITOR
5f5c					endif 
5f5c			 
5f5c					; set default SPI clk pulse time as disabled for BANK use 
5f5c			 
5f5c 3e 00				ld a, 0 
5f5e 32 99 f9				ld (spi_clktime), a 
5f61			 
5f61					NEXTW 
5f61 c3 38 24			jp macro_next 
5f64				endm 
# End of macro NEXTW
5f64			 
5f64			.CARTDEV: 
5f64				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5f64 66				db WORD_SYS_CORE+82             
5f65 12 60			dw .ENDDEVICE            
5f67 08				db 7 + 1 
5f68 .. 00			db "CARTDEV",0              
5f70				endm 
# End of macro CWHEAD
5f70			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
5f70					if DEBUG_FORTH_WORDS_KEY 
5f70						DMARK "CDV" 
5f70 f5				push af  
5f71 3a 85 5f			ld a, (.dmark)  
5f74 32 a0 fd			ld (debug_mark),a  
5f77 3a 86 5f			ld a, (.dmark+1)  
5f7a 32 a1 fd			ld (debug_mark+1),a  
5f7d 3a 87 5f			ld a, (.dmark+2)  
5f80 32 a2 fd			ld (debug_mark+2),a  
5f83 18 03			jr .pastdmark  
5f85 ..			.dmark: db "CDV"  
5f88 f1			.pastdmark: pop af  
5f89			endm  
# End of macro DMARK
5f89						CALLMONITOR 
5f89 cd aa fd			call debug_vector  
5f8c				endm  
# End of macro CALLMONITOR
5f8c					endif 
5f8c			 
5f8c					; disable se storage bank selection 
5f8c			 
5f8c 3e ff				ld a, SPI_CE_HIGH		; ce high 
5f8e 32 95 f9				ld (spi_device), a 
5f91			 
5f91					; get bank 
5f91			 
5f91					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f91 cd 4d 22			call macro_dsp_valuehl 
5f94				endm 
# End of macro FORTH_DSP_VALUEHL
5f94			 
5f94			;		push hl 
5f94			 
5f94					; destroy value TOS 
5f94			 
5f94					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f94 cd 05 23			call macro_forth_dsp_pop 
5f97				endm 
# End of macro FORTH_DSP_POP
5f97			 
5f97					; one value on hl get other one back 
5f97			 
5f97			;		pop hl 
5f97			 
5f97					; active low 
5f97			 
5f97 0e ff				ld c, 255 
5f99			 
5f99 7d					ld a, l 
5f9a					if DEBUG_FORTH_WORDS 
5f9a						DMARK "CDV" 
5f9a f5				push af  
5f9b 3a af 5f			ld a, (.dmark)  
5f9e 32 a0 fd			ld (debug_mark),a  
5fa1 3a b0 5f			ld a, (.dmark+1)  
5fa4 32 a1 fd			ld (debug_mark+1),a  
5fa7 3a b1 5f			ld a, (.dmark+2)  
5faa 32 a2 fd			ld (debug_mark+2),a  
5fad 18 03			jr .pastdmark  
5faf ..			.dmark: db "CDV"  
5fb2 f1			.pastdmark: pop af  
5fb3			endm  
# End of macro DMARK
5fb3						CALLMONITOR 
5fb3 cd aa fd			call debug_vector  
5fb6				endm  
# End of macro CALLMONITOR
5fb6					endif 
5fb6 fe 00				cp 0 
5fb8 28 30				jr z, .cset 
5fba fe 01				cp 1 
5fbc 20 02				jr nz, .c2 
5fbe cb 81				res 0, c 
5fc0 fe 02		.c2:		cp 2 
5fc2 20 02				jr nz, .c3 
5fc4 cb 89				res 1, c 
5fc6 fe 03		.c3:		cp 3 
5fc8 20 02				jr nz, .c4 
5fca cb 91				res 2, c 
5fcc fe 04		.c4:		cp 4 
5fce 20 02				jr nz, .c5 
5fd0 cb 99				res 3, c 
5fd2 fe 05		.c5:		cp 5 
5fd4 20 02				jr nz, .c6 
5fd6 cb a1				res 4, c 
5fd8 fe 06		.c6:		cp 6 
5fda 20 02				jr nz, .c7 
5fdc cb a9				res 5, c 
5fde fe 07		.c7:		cp 7 
5fe0 20 02				jr nz, .c8 
5fe2 cb b1				res 6, c 
5fe4 fe 08		.c8:		cp 8 
5fe6 20 02				jr nz, .cset 
5fe8 cb b9				res 7, c 
5fea 79			.cset:		ld a, c 
5feb 32 98 f9				ld (spi_cartdev),a 
5fee			 
5fee					if DEBUG_FORTH_WORDS 
5fee						DMARK "CD2" 
5fee f5				push af  
5fef 3a 03 60			ld a, (.dmark)  
5ff2 32 a0 fd			ld (debug_mark),a  
5ff5 3a 04 60			ld a, (.dmark+1)  
5ff8 32 a1 fd			ld (debug_mark+1),a  
5ffb 3a 05 60			ld a, (.dmark+2)  
5ffe 32 a2 fd			ld (debug_mark+2),a  
6001 18 03			jr .pastdmark  
6003 ..			.dmark: db "CD2"  
6006 f1			.pastdmark: pop af  
6007			endm  
# End of macro DMARK
6007						CALLMONITOR 
6007 cd aa fd			call debug_vector  
600a				endm  
# End of macro CALLMONITOR
600a					endif 
600a			 
600a					; set default SPI clk pulse time as 10ms for CARTDEV use 
600a			 
600a 3e 0a				ld a, $0a 
600c 32 99 f9				ld (spi_clktime), a 
600f					NEXTW 
600f c3 38 24			jp macro_next 
6012				endm 
# End of macro NEXTW
6012			endif 
6012			 
6012			.ENDDEVICE: 
6012			; eof 
6012			 
# End of file forth_words_device.asm
6012			 
6012			; var handler 
6012			 
6012			 
6012			.VARS: 
6012				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
6012 77				db WORD_SYS_CORE+99             
6013 c3 60			dw .V0            
6015 04				db 3 + 1 
6016 .. 00			db "VAR",0              
601a				endm 
# End of macro CWHEAD
601a			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
601a			;| 
601a			;| The variable name should consist of a single letter. e.g. "a" 
601a			;! If a full string is passed then only the first char is looked at 
601a			;| Any other char could exceed bounds checks!  
601a			 
601a					if DEBUG_FORTH_WORDS_KEY 
601a						DMARK "VAR" 
601a f5				push af  
601b 3a 2f 60			ld a, (.dmark)  
601e 32 a0 fd			ld (debug_mark),a  
6021 3a 30 60			ld a, (.dmark+1)  
6024 32 a1 fd			ld (debug_mark+1),a  
6027 3a 31 60			ld a, (.dmark+2)  
602a 32 a2 fd			ld (debug_mark+2),a  
602d 18 03			jr .pastdmark  
602f ..			.dmark: db "VAR"  
6032 f1			.pastdmark: pop af  
6033			endm  
# End of macro DMARK
6033						CALLMONITOR 
6033 cd aa fd			call debug_vector  
6036				endm  
# End of macro CALLMONITOR
6036					endif 
6036			 
6036					FORTH_DSP_VALUEHL 
6036 cd 4d 22			call macro_dsp_valuehl 
6039				endm 
# End of macro FORTH_DSP_VALUEHL
6039			 
6039 7e					ld a, (hl)    ; get first char on of the string 
603a			 
603a			 
603a					if DEBUG_FORTH_WORDS 
603a						DMARK "VR1" 
603a f5				push af  
603b 3a 4f 60			ld a, (.dmark)  
603e 32 a0 fd			ld (debug_mark),a  
6041 3a 50 60			ld a, (.dmark+1)  
6044 32 a1 fd			ld (debug_mark+1),a  
6047 3a 51 60			ld a, (.dmark+2)  
604a 32 a2 fd			ld (debug_mark+2),a  
604d 18 03			jr .pastdmark  
604f ..			.dmark: db "VR1"  
6052 f1			.pastdmark: pop af  
6053			endm  
# End of macro DMARK
6053						CALLMONITOR 
6053 cd aa fd			call debug_vector  
6056				endm  
# End of macro CALLMONITOR
6056					endif 
6056					 
6056 f5					push af	 
6057					FORTH_DSP_POP 
6057 cd 05 23			call macro_forth_dsp_pop 
605a				endm 
# End of macro FORTH_DSP_POP
605a f1					pop af 
605b			 
605b					; convert to upper 
605b			 
605b cd 53 12				call to_upper 
605e					if DEBUG_FORTH_WORDS 
605e						DMARK "Vaa" 
605e f5				push af  
605f 3a 73 60			ld a, (.dmark)  
6062 32 a0 fd			ld (debug_mark),a  
6065 3a 74 60			ld a, (.dmark+1)  
6068 32 a1 fd			ld (debug_mark+1),a  
606b 3a 75 60			ld a, (.dmark+2)  
606e 32 a2 fd			ld (debug_mark+2),a  
6071 18 03			jr .pastdmark  
6073 ..			.dmark: db "Vaa"  
6076 f1			.pastdmark: pop af  
6077			endm  
# End of macro DMARK
6077						CALLMONITOR 
6077 cd aa fd			call debug_vector  
607a				endm  
# End of macro CALLMONITOR
607a					endif 
607a 06 41				ld b, 'A' 
607c 90					sub b			; set offset 
607d					if DEBUG_FORTH_WORDS 
607d						DMARK "Vbb" 
607d f5				push af  
607e 3a 92 60			ld a, (.dmark)  
6081 32 a0 fd			ld (debug_mark),a  
6084 3a 93 60			ld a, (.dmark+1)  
6087 32 a1 fd			ld (debug_mark+1),a  
608a 3a 94 60			ld a, (.dmark+2)  
608d 32 a2 fd			ld (debug_mark+2),a  
6090 18 03			jr .pastdmark  
6092 ..			.dmark: db "Vbb"  
6095 f1			.pastdmark: pop af  
6096			endm  
# End of macro DMARK
6096						CALLMONITOR 
6096 cd aa fd			call debug_vector  
6099				endm  
# End of macro CALLMONITOR
6099					endif 
6099 cb 27				sla a  
609b				 
609b					 
609b					if DEBUG_FORTH_WORDS 
609b						DMARK "VR2" 
609b f5				push af  
609c 3a b0 60			ld a, (.dmark)  
609f 32 a0 fd			ld (debug_mark),a  
60a2 3a b1 60			ld a, (.dmark+1)  
60a5 32 a1 fd			ld (debug_mark+1),a  
60a8 3a b2 60			ld a, (.dmark+2)  
60ab 32 a2 fd			ld (debug_mark+2),a  
60ae 18 03			jr .pastdmark  
60b0 ..			.dmark: db "VR2"  
60b3 f1			.pastdmark: pop af  
60b4			endm  
# End of macro DMARK
60b4						CALLMONITOR 
60b4 cd aa fd			call debug_vector  
60b7				endm  
# End of macro CALLMONITOR
60b7					endif 
60b7			 
60b7 21 29 f9				ld hl, cli_var_array2 
60ba cd de 0f				call addatohl 
60bd cd 48 20				call forth_push_numhl 
60c0			 
60c0			 
60c0				       NEXTW 
60c0 c3 38 24			jp macro_next 
60c3				endm 
# End of macro NEXTW
60c3			.V0: 
60c3				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
60c3 78				db WORD_SYS_CORE+100             
60c4 db 60			dw .V0Q            
60c6 04				db 3 + 1 
60c7 .. 00			db "V0!",0              
60cb				endm 
# End of macro CWHEAD
60cb			;| V0! ( u1 -- )  Store value to v0  | DONE 
60cb			 
60cb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
60cb cd 4d 22			call macro_dsp_valuehl 
60ce				endm 
# End of macro FORTH_DSP_VALUEHL
60ce			 
60ce 11 5d f9				ld de, cli_var_array 
60d1			 
60d1 eb					ex de, hl 
60d2 73					ld (hl), e 
60d3 23					inc hl 
60d4 72					ld (hl), d 
60d5			 
60d5					; destroy value TOS 
60d5			 
60d5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
60d5 cd 05 23			call macro_forth_dsp_pop 
60d8				endm 
# End of macro FORTH_DSP_POP
60d8			 
60d8				       NEXTW 
60d8 c3 38 24			jp macro_next 
60db				endm 
# End of macro NEXTW
60db			.V0Q: 
60db				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
60db 79				db WORD_SYS_CORE+101             
60dc ec 60			dw .V1S            
60de 04				db 3 + 1 
60df .. 00			db "V0@",0              
60e3				endm 
# End of macro CWHEAD
60e3			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
60e3 2a 5d f9				ld hl, (cli_var_array) 
60e6 cd 48 20				call forth_push_numhl 
60e9			 
60e9				       NEXTW 
60e9 c3 38 24			jp macro_next 
60ec				endm 
# End of macro NEXTW
60ec			.V1S: 
60ec				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
60ec 7a				db WORD_SYS_CORE+102             
60ed 04 61			dw .V1Q            
60ef 04				db 3 + 1 
60f0 .. 00			db "V1!",0              
60f4				endm 
# End of macro CWHEAD
60f4			;| V1! ( u1 -- )  Store value to v1 | DONE 
60f4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
60f4 cd 4d 22			call macro_dsp_valuehl 
60f7				endm 
# End of macro FORTH_DSP_VALUEHL
60f7			 
60f7 11 5f f9				ld de, cli_var_array+2 
60fa				 
60fa eb					ex de, hl 
60fb 73					ld (hl), e 
60fc 23					inc hl 
60fd 72					ld (hl), d 
60fe			 
60fe					; destroy value TOS 
60fe			 
60fe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
60fe cd 05 23			call macro_forth_dsp_pop 
6101				endm 
# End of macro FORTH_DSP_POP
6101				       NEXTW 
6101 c3 38 24			jp macro_next 
6104				endm 
# End of macro NEXTW
6104			.V1Q: 
6104				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
6104 7b				db WORD_SYS_CORE+103             
6105 15 61			dw .V2S            
6107 04				db 3 + 1 
6108 .. 00			db "V1@",0              
610c				endm 
# End of macro CWHEAD
610c			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
610c 2a 5f f9				ld hl, (cli_var_array+2) 
610f cd 48 20				call forth_push_numhl 
6112				       NEXTW 
6112 c3 38 24			jp macro_next 
6115				endm 
# End of macro NEXTW
6115			.V2S: 
6115				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
6115 7c				db WORD_SYS_CORE+104             
6116 2d 61			dw .V2Q            
6118 04				db 3 + 1 
6119 .. 00			db "V2!",0              
611d				endm 
# End of macro CWHEAD
611d			;| V2! ( u1 -- )  Store value to v2 | DONE 
611d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
611d cd 4d 22			call macro_dsp_valuehl 
6120				endm 
# End of macro FORTH_DSP_VALUEHL
6120			 
6120 11 61 f9				ld de, cli_var_array+4 
6123				 
6123 eb					ex de, hl 
6124 73					ld (hl), e 
6125 23					inc hl 
6126 72					ld (hl), d 
6127			 
6127					; destroy value TOS 
6127			 
6127					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
6127 cd 05 23			call macro_forth_dsp_pop 
612a				endm 
# End of macro FORTH_DSP_POP
612a				       NEXTW 
612a c3 38 24			jp macro_next 
612d				endm 
# End of macro NEXTW
612d			.V2Q: 
612d				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
612d 7d				db WORD_SYS_CORE+105             
612e 3e 61			dw .V3S            
6130 04				db 3 + 1 
6131 .. 00			db "V2@",0              
6135				endm 
# End of macro CWHEAD
6135			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
6135 2a 61 f9				ld hl, (cli_var_array+4) 
6138 cd 48 20				call forth_push_numhl 
613b				       NEXTW 
613b c3 38 24			jp macro_next 
613e				endm 
# End of macro NEXTW
613e			.V3S: 
613e				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
613e 7c				db WORD_SYS_CORE+104             
613f 56 61			dw .V3Q            
6141 04				db 3 + 1 
6142 .. 00			db "V3!",0              
6146				endm 
# End of macro CWHEAD
6146			;| V3! ( u1 -- )  Store value to v3 | DONE 
6146					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
6146 cd 4d 22			call macro_dsp_valuehl 
6149				endm 
# End of macro FORTH_DSP_VALUEHL
6149			 
6149 11 63 f9				ld de, cli_var_array+6 
614c				 
614c eb					ex de, hl 
614d 73					ld (hl), e 
614e 23					inc hl 
614f 72					ld (hl), d 
6150			 
6150					; destroy value TOS 
6150			 
6150					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
6150 cd 05 23			call macro_forth_dsp_pop 
6153				endm 
# End of macro FORTH_DSP_POP
6153				       NEXTW 
6153 c3 38 24			jp macro_next 
6156				endm 
# End of macro NEXTW
6156			.V3Q: 
6156				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
6156 7d				db WORD_SYS_CORE+105             
6157 67 61			dw .END            
6159 04				db 3 + 1 
615a .. 00			db "V3@",0              
615e				endm 
# End of macro CWHEAD
615e			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
615e 2a 63 f9				ld hl, (cli_var_array+6) 
6161 cd 48 20				call forth_push_numhl 
6164				       NEXTW 
6164 c3 38 24			jp macro_next 
6167				endm 
# End of macro NEXTW
6167			 
6167			 
6167			 
6167			 
6167			 
6167			; end of dict marker 
6167			 
6167 00			.END:    db WORD_SYS_END 
6168 00 00			dw 0 
616a 00				db 0 
616b			 
616b			; use to jp here for user dict words to save on macro expansion  
616b			 
616b			user_dict_next: 
616b				NEXTW 
616b c3 38 24			jp macro_next 
616e				endm 
# End of macro NEXTW
616e			 
616e			 
616e			user_exec: 
616e				;    ld hl, <word code> 
616e				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
616e				;    call forthexec 
616e				;    jp user_dict_next   (NEXT) 
616e			        ;    <word code bytes> 
616e eb				ex de, hl 
616f 2a f7 f3			ld hl,(os_tok_ptr) 
6172				 
6172				FORTH_RSP_NEXT 
6172 cd ef 1f			call macro_forth_rsp_next 
6175				endm 
# End of macro FORTH_RSP_NEXT
6175			 
6175			if DEBUG_FORTH_UWORD 
6175						DMARK "UEX" 
6175 f5				push af  
6176 3a 8a 61			ld a, (.dmark)  
6179 32 a0 fd			ld (debug_mark),a  
617c 3a 8b 61			ld a, (.dmark+1)  
617f 32 a1 fd			ld (debug_mark+1),a  
6182 3a 8c 61			ld a, (.dmark+2)  
6185 32 a2 fd			ld (debug_mark+2),a  
6188 18 03			jr .pastdmark  
618a ..			.dmark: db "UEX"  
618d f1			.pastdmark: pop af  
618e			endm  
# End of macro DMARK
618e				CALLMONITOR 
618e cd aa fd			call debug_vector  
6191				endm  
# End of macro CALLMONITOR
6191			endif 
6191			 
6191			 
6191			 
6191 eb				ex de, hl 
6192 22 f7 f3			ld (os_tok_ptr), hl 
6195				 
6195				; Don't use next - Skips the first word in uword. 
6195			 
6195 c3 c1 24			jp exec1 
6198			;	NEXT 
6198			 
6198			 
6198			; eof 
# End of file forth_wordsv4.asm
6198			endif 
6198			;;;;;;;;;;;;;; Debug code 
6198			 
6198			 
6198			;if DEBUG_FORTH_PARSE 
6198 .. 00		.nowordfound: db "No match",0 
61a1 .. 00		.compword:	db "Comparing word ",0 
61b1 .. 00		.nextwordat:	db "Next word at",0 
61be .. 00		.charmatch:	db "Char match",0 
61c9			;endif 
61c9			if DEBUG_FORTH_JP 
61c9			.foundword:	db "Word match. Exec..",0 
61c9			endif 
61c9			;if DEBUG_FORTH_PUSH 
61c9 .. 00		.enddict:	db "Dict end. Push.",0 
61d9 .. 00		.push_str:	db "Pushing string",0 
61e8 .. 00		.push_num:	db "Pushing number",0 
61f7 .. 00		.data_sp:	db "SP:",0 
61fb .. 00		.wordinhl:	db "Word in HL (2/0):",0 
620d .. 00		.wordinde:	db "Word in DE (3/0):",0 
621f .. 00		.wordinbc:	db "Word in BC (4/0):",0 
6231			;endif 
6231			;if DEBUG_FORTH_MALLOC 
6231 .. 00		.push_malloc:	db "Malloc address",0 
6240			;endif 
6240			 
6240			 
6240			 
6240			; display malloc address and current data stack pointer  
6240			 
6240			malloc_error: 
6240 d5				push de 
6241 f5				push af 
6242 e5				push hl 
6243 cd aa 0d			call clear_display 
6246 11 66 62			ld de, .mallocerr 
6249 3e 00			ld a,0 
624b			;	ld de,os_word_scratch 
624b cd bd 0d			call str_at_display 
624e 3e 11			ld a, display_row_1+17 
6250 11 a0 fd			ld de, debug_mark 
6253 cd bd 0d			call str_at_display 
6256 cd cd 0d			call update_display 
6259				;call break_point_state 
6259 cd 4b 77			call cin_wait 
625c			 
625c			;	ld a, ' ' 
625c			;	ld (os_view_disable), a 
625c cd 49 19			call bp_on 
625f e1				pop hl 
6260 f1				pop af 
6261 d1				pop de	 
6262				CALLMONITOR 
6262 cd aa fd			call debug_vector  
6265				endm  
# End of macro CALLMONITOR
6265 c9				ret 
6266			 
6266 .. 00		.mallocerr: 	db "Malloc Error",0 
6273			;if DEBUG_FORTH_PUSH 
6273			display_data_sp: 
6273 f5				push af 
6274			 
6274				; see if disabled 
6274			 
6274			 
6274 3a aa fd			ld a, (debug_vector) 
6277 fe c9			cp $C9  ; RET 
6279				;ld a, (os_view_disable) 
6279				;cp '*' 
6279 28 67			jr z, .skipdsp 
627b			 
627b e5				push hl 
627c e5				push hl 
627d e5			push hl 
627e cd aa 0d			call clear_display 
6281 e1			pop hl 
6282 7c				ld a,h 
6283 21 fb f3			ld hl, os_word_scratch 
6286 cd e7 11			call hexout 
6289 e1				pop hl 
628a 7d				ld a,l 
628b 21 fd f3			ld hl, os_word_scratch+2 
628e cd e7 11			call hexout 
6291 21 ff f3			ld hl, os_word_scratch+4 
6294 3e 00			ld a,0 
6296 77				ld (hl),a 
6297 11 fb f3			ld de,os_word_scratch 
629a 3e 28				ld a, display_row_2 
629c cd bd 0d				call str_at_display 
629f 11 fb 61			ld de, .wordinhl 
62a2 3e 00			ld a, display_row_1 
62a4			 
62a4 cd bd 0d				call str_at_display 
62a7 11 a0 fd			ld de, debug_mark 
62aa 3e 11			ld a, display_row_1+17 
62ac			 
62ac cd bd 0d				call str_at_display 
62af			 
62af				; display current data stack pointer 
62af 11 f7 61			ld de,.data_sp 
62b2 3e 30				ld a, display_row_2 + 8 
62b4 cd bd 0d				call str_at_display 
62b7			 
62b7 2a 23 f9			ld hl,(cli_data_sp) 
62ba e5				push hl 
62bb 7c				ld a,h 
62bc 21 fb f3			ld hl, os_word_scratch 
62bf cd e7 11			call hexout 
62c2 e1				pop hl 
62c3 7d				ld a,l 
62c4 21 fd f3			ld hl, os_word_scratch+2 
62c7 cd e7 11			call hexout 
62ca 21 ff f3			ld hl, os_word_scratch+4 
62cd 3e 00			ld a,0 
62cf 77				ld (hl),a 
62d0 11 fb f3			ld de,os_word_scratch 
62d3 3e 33				ld a, display_row_2 + 11 
62d5 cd bd 0d				call str_at_display 
62d8			 
62d8			 
62d8 cd cd 0d			call update_display 
62db cd ed 0c			call delay1s 
62de cd ed 0c			call delay1s 
62e1 e1				pop hl 
62e2			.skipdsp: 
62e2 f1				pop af 
62e3 c9				ret 
62e4			 
62e4			display_data_malloc: 
62e4			 
62e4 f5				push af 
62e5 e5				push hl 
62e6 e5				push hl 
62e7 e5			push hl 
62e8 cd aa 0d			call clear_display 
62eb e1			pop hl 
62ec 7c				ld a,h 
62ed 21 fb f3			ld hl, os_word_scratch 
62f0 cd e7 11			call hexout 
62f3 e1				pop hl 
62f4 7d				ld a,l 
62f5 21 fd f3			ld hl, os_word_scratch+2 
62f8 cd e7 11			call hexout 
62fb 21 ff f3			ld hl, os_word_scratch+4 
62fe 3e 00			ld a,0 
6300 77				ld (hl),a 
6301 11 fb f3			ld de,os_word_scratch 
6304 3e 28				ld a, display_row_2 
6306 cd bd 0d				call str_at_display 
6309 11 31 62			ld de, .push_malloc 
630c 3e 00			ld a, display_row_1 
630e			 
630e cd bd 0d				call str_at_display 
6311			 
6311				; display current data stack pointer 
6311 11 f7 61			ld de,.data_sp 
6314 3e 30				ld a, display_row_2 + 8 
6316 cd bd 0d				call str_at_display 
6319			 
6319 2a 23 f9			ld hl,(cli_data_sp) 
631c e5				push hl 
631d 7c				ld a,h 
631e 21 fb f3			ld hl, os_word_scratch 
6321 cd e7 11			call hexout 
6324 e1				pop hl 
6325 7d				ld a,l 
6326 21 fd f3			ld hl, os_word_scratch+2 
6329 cd e7 11			call hexout 
632c 21 ff f3			ld hl, os_word_scratch+4 
632f 3e 00			ld a,0 
6331 77				ld (hl),a 
6332 11 fb f3			ld de,os_word_scratch 
6335 3e 33				ld a, display_row_2 + 11 
6337 cd bd 0d				call str_at_display 
633a			 
633a cd cd 0d			call update_display 
633d cd ed 0c			call delay1s 
6340 cd ed 0c			call delay1s 
6343 e1				pop hl 
6344 f1				pop af 
6345 c9				ret 
6346			;endif 
6346			 
6346			include "forth_autostart.asm" 
6346			; list of commands to perform at system start up 
6346			 
6346			startcmds: 
6346			;	dw test11 
6346			;	dw test12 
6346			;	dw test13 
6346			;	dw test14 
6346			;	dw test15 
6346			;	dw test16 
6346			;	dw test17 
6346			;	dw ifthtest1 
6346			;	dw ifthtest2 
6346			;	dw ifthtest3 
6346			;	dw mmtest1 
6346			;	dw mmtest2 
6346			;	dw mmtest3 
6346			;	dw mmtest4 
6346			;	dw mmtest5 
6346			;	dw mmtest6 
6346			;	dw iftest1 
6346			;	dw iftest2 
6346			;	dw iftest3 
6346			;	dw looptest1 
6346			;	dw looptest2 
6346			;	dw test1 
6346			;	dw test2 
6346			;	dw test3 
6346			;	dw test4 
6346			;	dw game2r 
6346			;	dw game2b1 
6346			;	dw game2b2 
6346			 
6346				; start up words that are actually useful 
6346			 
6346			;    dw spi1 
6346			;    dw spi2 
6346			;    dw spi3 
6346			;    dw spi4 
6346			;    dw spi5 
6346			;    dw spi6 
6346			;    dw spi7 
6346			; 
6346			;    dw spi8 
6346			;    dw spi9 
6346			;    dw spi10 
6346			 
6346			; file editor 
6346			;	dw edit1 
6346			;	dw edit2 
6346			;	dw edit3 
6346			 
6346			;	dw longread 
6346 68 67			dw clrstack 
6348 9c 67			dw type 
634a			;	dw stest 
634a c1 67			dw strncpy 
634c 31 69			dw list 
634e 22 68			dw start1 
6350 32 68			dw start2 
6352			;	dw start3 
6352			;	dw start3b 
6352			;	dw start3c 
6352			 
6352				; (unit) testing words 
6352			 
6352			;	dw mtesta 
6352			;	dw mtestb 
6352			;	dw mtestc 
6352			;	dw mtestd 
6352			;	dw mteste 
6352			 
6352				; demo/game words 
6352			 
6352			;        dw game3w 
6352			;        dw game3p 
6352			;        dw game3sc 
6352			;        dw game3vsi 
6352			;        dw game3vs 
6352				 
6352			;	dw game2b 
6352			;	dw game2bf 
6352			;	dw game2mba 
6352			;	dw game2mbas 
6352			;	dw game2mb 
6352			 
6352 62 6b			dw game1 
6354 73 6b			dw game1a 
6356 d5 6b			dw game1b 
6358 0a 6c			dw game1c 
635a 40 6c			dw game1d 
635c 71 6c			dw game1s 
635e 85 6c			dw game1t 
6360 9a 6c			dw game1f 
6362 ce 6c			dw game1z 
6364 12 6d			dw game1zz 
6366			 
6366 9b 69			dw test5 
6368 d3 69			dw test6 
636a 0b 6a			dw test7 
636c 1f 6a			dw test8 
636e 4b 6a			dw test9 
6370 61 6a			dw test10 
6372				 
6372 e9 6d		        dw ssv5 
6374 cd 6d		        dw ssv4 
6376 b1 6d		        dw ssv3 
6378 7b 6d		        dw ssv2 
637a 02 6e		        dw ssv1 
637c 4a 6e		        dw ssv1cpm 
637e			;	dw keyup 
637e			;	dw keydown 
637e			;	dw keyleft 
637e			;	dw keyright 
637e			;	dw 	keyf1 
637e			;	dw keyf2 
637e			;	dw keyf3 
637e			;	dw keyf4 
637e			;	dw keyf5 
637e			;	dw keyf6 
637e			;	dw keyf7 
637e			;	dw keyf8 
637e			;	dw keyf9 
637e			;	dw keyf10 
637e			;	dw keyf11 
637e			;	dw keyf12 
637e			;	dw keytab 
637e			;	dw keycr 
637e			;	dw keyhome 
637e			;	dw keyend 
637e			;	dw keybs 
637e 00 00			db 0, 0	 
6380			 
6380			 
6380			; File Editor 
6380			 
6380			; ( id - ) use 'e' to edit the displayed line 
6380 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
63a1 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
63d6			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
63d6 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
640e			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
640e			 
640e			; SPI Net support words 
640e			 
640e			; v0! = node to send to 
640e			; ( str count - ) 
640e .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
6467			 
6467			; spiputc ( char node - ) 
6467 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
649b			; spiputc ( u node - ) 
649b .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
64c9			 
64c9			; spigetc ( - n ) 
64c9 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
64f2			 
64f2			; getnode ( - n ) 
64f2 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
651f			 
651f			; ( str node - )  
651f .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
6585			; store string ( str i - ) 
6585			 
6585			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
6585 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
65da			 
65da			; get string ( addr i -  )    TO FIX 
65da			 
65da .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
6632			 
6632			 
6632			; NETCHAT (TODO) 
6632			; Program to allow two nodes to chat with eachother 
6632			; 
6632			; v0 - target node 
6632			;  
6632			; accept input at 0,0 
6632			; if input is string send spitype to target node 
6632			; starting at row 2,0 , while spigetchr is not zero ->  
6632			; 
6632			; 
6632			; TODO add paging of get request 
6632			 
6632			; ( node - ) 
6632 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
6651 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
66a9 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
6721			 
6721			 
6721			; Long read of currently open file 
6721 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
6768			 
6768			; clear stack  
6768			 
6768 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
679c			 
679c			; type ( addr count - ) 
679c .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
67c1			 
67c1			; some direct memory words 
67c1			; strncpy ( len t f -- t ) 
67c1			 
67c1 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
6822			 
6822 .. 00		start1:     	db ": bpon $00 bp ;",0 
6832 .. 00		start2:     	db ": bpoff $01 bp ;",0 
6843 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
68be .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
691e			 
691e .. 00		tuck:         db ": tuck swap over ;", 0 
6931			 
6931			; a handy word to list items on the stack 
6931			 
6931 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
699b			 
699b			 
699b			; test stack  
699b			; rnd8 stest 
699b			 
699b			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
699b			 
699b			; random malloc and free cycles 
699b			 
699b			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
699b			 
699b			; fixed malloc and free cycles 
699b			 
699b			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
699b			 
699b			; fixed double string push and drop cycle  
699b			 
699b			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
699b			 
699b			; consistent fixed string push and drop cycle  
699b			 
699b			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
699b			 
699b			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
699b			 
699b			;test1:		db ": aa 1 2 3 ;", 0 
699b			;test2:     	db "111 aa 888 999",0 
699b			;test3:     	db ": bb 77 ;",0 
699b			;test4:     	db "$02 $01 do i . loop bb",0 
699b			 
699b .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
69d3 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
6a0b .. 00		test7:     	db ": box hline vline ;",0 
6a1f .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
6a4b .. 00		test9:     	db ": sw $01 adsp world ;",0 
6a61 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
6a86			;test11:     	db "hello create .",0 
6a86			;test12:     	db "hello2 create .",0 
6a86			 
6a86			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
6a86			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
6a86			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
6a86			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
6a86			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
6a86			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
6a86			 
6a86			;iftest1:     	db "$0001 IF cls .",0 
6a86			;iftest2:     	db "$0000 IF cls .",0 
6a86			;iftest3:     	db "$0002 $0003 - IF cls .",0 
6a86			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
6a86			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
6a86			 
6a86			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6a86			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6a86			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6a86			 
6a86			 
6a86 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
6aaa .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
6ada .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
6aff .. 00		sound4: db ": cha $00 ; ",0 
6b0c .. 00		sound5: db ": chb $20 ; ",0 
6b19 .. 00		sound6: db ": chc $40 ; ",0 
6b26 .. 00		sound7: db ": chd $60 ; ",0 
6b33 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
6b4b .. 00		sound9: db ": cvol $90 + + note ; ", 0 
6b62			 
6b62			 
6b62			 
6b62			 
6b62			; a small guess the number game 
6b62			 
6b62 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
6b73 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
6bd5			 
6bd5 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
6c0a .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
6c40 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
6c71 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
6c85 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
6c9a .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
6cce .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
6d12			 
6d12			; Using 'ga' save a high score across multiple runs using external storage 
6d12			 
6d12 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
6d7b			 
6d7b			 
6d7b			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
6d7b			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
6d7b			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
6d7b			 
6d7b			; simple screen saver to test code memory reuse to destruction 
6d7b			 
6d7b .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
6db1 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
6dcd .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
6de9 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
6e02 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
6e4a .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
6ea1			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
6ea1			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
6ea1			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
6ea1			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
6ea1			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
6ea1			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
6ea1			 
6ea1			 
6ea1			 
6ea1			; minesweeper/battleship finding game 
6ea1			; draws a game board of random ship/mine positions 
6ea1			; user enters coords to see if it hits on 
6ea1			; game ends when all are hit 
6ea1			; when hit or miss says how many may be in the area 
6ea1			 
6ea1			; setup the game board and then hide it 
6ea1			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
6ea1			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
6ea1			;; prompt for where to target 
6ea1			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
6ea1			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
6ea1			;; TODO see if the entered coords hits or misses pushes char hit of miss 
6ea1			;game2mbht:      db ": mbckht nop ;",0 
6ea1			;game2mbms:      db ": mbcms nop ;",0 
6ea1			; TODO how many might be near by 
6ea1			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
6ea1			 
6ea1			; Game 3 
6ea1			 
6ea1			; Vert scroller ski game - avoid the trees! 
6ea1			 
6ea1			; v0 score (ie turns) 
6ea1			; v1 player pos 
6ea1			; v2 left wall 
6ea1			; v3 right wall 
6ea1			 
6ea1			; Draw side walls randomly 
6ea1			 
6ea1			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
6ea1			 
6ea1			; Draw player 
6ea1			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
6ea1			 
6ea1			; TODO Get Key 
6ea1			 
6ea1			; TODO Move left right 
6ea1			 
6ea1			; scroll and move walls a bit 
6ea1			 
6ea1			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
6ea1			 
6ea1			; main game loop 
6ea1			 
6ea1			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
6ea1			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
6ea1			 
6ea1			; key board defs 
6ea1			 
6ea1 .. 00		keyup:       db ": keyup $05 ;",0 
6eaf .. 00		keydown:       db ": keydown $0a ;",0 
6ebf .. 00		keyleft:       db ": keyleft $0b ;",0 
6ecf .. 00		keyright:       db ": keyright $0c ;",0 
6ee0 .. 00		keyf1:       db ": keyf1 $10 ;",0 
6eee .. 00		keyf2:       db ": keyf2 $11 ;",0 
6efc .. 00		keyf3:       db ": keyf3 $12 ;",0 
6f0a .. 00		keyf4:       db ": keyf4 $13 ;",0 
6f18 .. 00		keyf5:       db ": keyf5 $14 ;",0 
6f26 .. 00		keyf6:       db ": keyf6 $15 ;",0 
6f34 .. 00		keyf7:       db ": keyf7 $16 ;",0 
6f42 .. 00		keyf8:       db ": keyf8 $17 ;",0 
6f50 .. 00		keyf9:       db ": keyf9 $18 ;",0 
6f5e .. 00		keyf10:       db ": keyf10 $19 ;",0 
6f6d .. 00		keyf11:       db ": keyf11 $1a ;",0 
6f7c .. 00		keyf12:       db ": keyf12 $1b ;",0 
6f8b			 
6f8b .. 00		keytab:       db ": keytab $09 ;",0 
6f9a .. 00		keycr:       db ": keycr $0d ;",0 
6fa8 .. 00		keyhome:       db ": keyhome $0e ;",0 
6fb8 .. 00		keyend:       db ": keyend $0f ;",0 
6fc7 .. 00		keybs:       db ": keybs $08 ;",0 
6fd5			 
6fd5			   
6fd5			 
6fd5			 
6fd5			 
6fd5			; eof 
# End of file forth_autostart.asm
6fd5			 
6fd5			 
6fd5			 
6fd5			; stack over and underflow checks 
6fd5			 
6fd5			; init the words to detect the under/overflow 
6fd5			 
6fd5			chk_stk_init: 
6fd5				; a vague random number to check so we dont get any "lucky" hits 
6fd5 3e 2d			ld a, 45 
6fd7 6f				ld l, a 
6fd8 00				nop 
6fd9 3e 17			ld a, 23 
6fdb 67				ld h, a 
6fdc			 
6fdc 22 d2 f0			ld (chk_word), hl     ; the word we need to check against 
6fdf			 
6fdf			;	ld (chk_stund), hl	; stack points.... 
6fdf 22 3b fe			ld (chk_stovr), hl 
6fe2 22 21 f9			ld (chk_ret_und), hl 
6fe5 22 df f8			ld (chk_ret_ovr), hl 
6fe8 22 5d f8			ld (chk_loop_ovr), hl 
6feb 22 5b f6			ld (chk_data_ovr), hl 
6fee c9				ret 
6fef				 
6fef			check_stacks: 
6fef				; check all stack words 
6fef			 
6fef e5				push hl 
6ff0 d5				push de 
6ff1			 
6ff1			;	ld de,(chk_word) 
6ff1			;	ld hl, (chk_stund)	; stack points.... 
6ff1			;	if DEBUG_STK_FAULT 
6ff1			;		DMARK "FAa" 
6ff1			;		CALLMONITOR 
6ff1			;	endif 
6ff1			;	call cmp16 
6ff1			;	jp z, .chk_faulta 
6ff1			; 
6ff1			;	ld de, sfaultsu 
6ff1			;	jp .chk_fault 
6ff1			 
6ff1 2a 3b fe		.chk_faulta: ld hl, (chk_stovr) 
6ff4 ed 5b d2 f0		ld de,(chk_word) 
6ff8				if DEBUG_STK_FAULT 
6ff8					DMARK "FAb" 
6ff8					CALLMONITOR 
6ff8				endif 
6ff8 cd fc 0f			call cmp16 
6ffb 28 06			jr z, .chk_fault1 
6ffd 11 a1 70			ld de, sfaultso 
7000 c3 52 70			jp .chk_fault 
7003			.chk_fault1:  
7003 2a 21 f9			ld hl, (chk_ret_und) 
7006 ed 5b d2 f0		ld de,(chk_word) 
700a				if DEBUG_STK_FAULT 
700a					DMARK "FAU" 
700a					CALLMONITOR 
700a				endif 
700a cd fc 0f			call cmp16 
700d ca 16 70			jp z, .chk_fault2 
7010 11 b1 70			ld de, sfaultru 
7013 c3 52 70			jp .chk_fault 
7016			.chk_fault2:  
7016 2a df f8			ld hl, (chk_ret_ovr) 
7019 ed 5b d2 f0		ld de,(chk_word) 
701d				if DEBUG_STK_FAULT 
701d					DMARK "FA1" 
701d					CALLMONITOR 
701d				endif 
701d cd fc 0f			call cmp16 
7020 ca 29 70			jp z, .chk_fault3 
7023 11 bf 70			ld de, sfaultro 
7026 c3 52 70			jp .chk_fault 
7029			.chk_fault3:  
7029 2a 5d f8			ld hl, (chk_loop_ovr) 
702c ed 5b d2 f0		ld de,(chk_word) 
7030				if DEBUG_STK_FAULT 
7030					DMARK "FA2" 
7030					CALLMONITOR 
7030				endif 
7030 cd fc 0f			call cmp16 
7033 ca 3c 70			jp z, .chk_fault4 
7036 11 d9 70			ld de, sfaultlo 
7039 c3 52 70			jp .chk_fault 
703c			.chk_fault4:  
703c 2a 5b f6			ld hl, (chk_data_ovr) 
703f ed 5b d2 f0		ld de,(chk_word) 
7043				if DEBUG_STK_FAULT 
7043					DMARK "FA3" 
7043					CALLMONITOR 
7043				endif 
7043 cd fc 0f			call cmp16 
7046 ca 4f 70			jp z, .chk_fault5 
7049 11 f3 70			ld de, sfaultdo 
704c c3 52 70			jp .chk_fault 
704f			 
704f			 
704f			.chk_fault5:  
704f d1				pop de 
7050 e1				pop hl 
7051			 
7051 c9				ret 
7052			 
7052 cd aa 0d		.chk_fault: 	call clear_display 
7055 3e 28				ld a, display_row_2 
7057 cd bd 0d				call str_at_display 
705a 11 83 70				   ld de, .stackfault 
705d 3e 00				ld a, display_row_1 
705f cd bd 0d				call str_at_display 
7062 11 a0 fd				    ld de, debug_mark 
7065 3e 11				ld a, display_row_1+17 
7067 cd bd 0d				call str_at_display 
706a cd cd 0d				call update_display 
706d			 
706d				; prompt before entering montior for investigating issue 
706d			 
706d 3e 78			ld a, display_row_4 
706f 11 26 1d			ld de, endprog 
7072			 
7072 cd cd 0d			call update_display		 
7075			 
7075 cd c0 1f			call next_page_prompt 
7078			 
7078 d1				pop de 
7079 e1				pop hl 
707a cd 7a 1d				call monitor 
707d cd de 23				call forth_warmstart 
7080 c3 76 1c				jp warmstart_afterauto 
7083					;jp 0 
7083					;halt 
7083			 
7083			 
7083			 
7083 .. 00		.stackfault: 	db "Stack fault:",0 
7090			 
7090 .. 00		sfaultsu: 	db	"Stack under flow",0 
70a1 .. 00		sfaultso: 	db	"Stack over flow",0 
70b1 .. 00		sfaultru:	db "RTS underflow",0 
70bf .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
70d9 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
70f3 .. 00		sfaultdo:	db "DTS overflow", 0 
7100			 
7100			 
7100			fault_dsp_under: 
7100 11 12 71			ld de, .dsp_under 
7103 c3 c8 71			jp .show_fault 
7106			 
7106			fault_rsp_under: 
7106 11 20 71			ld de, .rsp_under 
7109 c3 c8 71			jp .show_fault 
710c			fault_loop_under: 
710c 11 2e 71			ld de, .loop_under 
710f c3 c8 71			jp .show_fault 
7112			 
7112 .. 00		.dsp_under: db "DSP Underflow",0 
7120 .. 00		.rsp_under: db "RSP Underflow",0 
712e .. 00		.loop_under: db "LOOP Underflow",0 
713d			 
713d			 
713d d5			type_faultn: 	push de 
713e e5					push hl 
713f cd aa 0d				call clear_display 
7142 11 6c 71				   ld de, .typefaultn 
7145 3e 00				ld a, display_row_1 
7147 cd bd 0d				call str_at_display 
714a 11 a0 fd				    ld de, debug_mark 
714d 3e 11				ld a, display_row_1+17 
714f cd bd 0d				call str_at_display 
7152 cd cd 0d				call update_display 
7155			 
7155				; prompt before entering montior for investigating issue 
7155			 
7155 3e 78			ld a, display_row_4 
7157 11 26 1d			ld de, endprog 
715a			 
715a cd cd 0d			call update_display		 
715d			 
715d cd c0 1f			call next_page_prompt 
7160			 
7160 e5					push hl 
7161 d5					push de 
7162 cd 7a 1d				call monitor 
7165 cd de 23				call forth_warmstart 
7168 c3 76 1c				jp warmstart_afterauto 
716b 76					halt 
716c			 
716c			 
716c .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
7183			 
7183 d5			type_faults: 	push de 
7184 e5					push hl 
7185 cd aa 0d				call clear_display 
7188 11 b1 71				   ld de, .typefaults 
718b 3e 00				ld a, display_row_1 
718d cd bd 0d				call str_at_display 
7190 11 a0 fd				    ld de, debug_mark 
7193 3e 11				ld a, display_row_1+17 
7195 cd bd 0d				call str_at_display 
7198 cd cd 0d				call update_display 
719b			 
719b				; prompt before entering montior for investigating issue 
719b			 
719b 3e 78			ld a, display_row_4 
719d 11 26 1d			ld de, endprog 
71a0			 
71a0 cd cd 0d			call update_display		 
71a3			 
71a3 cd c0 1f			call next_page_prompt 
71a6			 
71a6 e1					pop hl 
71a7 d1					pop de 
71a8 cd 7a 1d				call monitor 
71ab cd de 23				call forth_warmstart 
71ae c3 76 1c				jp warmstart_afterauto 
71b1			 
71b1			 
71b1 .. 00		.typefaults: db "STR Type Expected TOS!",0 
71c8			 
71c8			.show_fault: 	 
71c8 d5					push de 
71c9 cd aa 0d				call clear_display 
71cc d1					pop de 
71cd 3e 00				ld a, display_row_1 
71cf cd bd 0d				call str_at_display 
71d2 11 a0 fd				    ld de, debug_mark 
71d5 3e 11				ld a, display_row_1+17 
71d7 cd bd 0d				call str_at_display 
71da cd cd 0d				call update_display 
71dd			 
71dd				; prompt before entering montior for investigating issue 
71dd			 
71dd 3e 78			ld a, display_row_4 
71df 11 26 1d			ld de, endprog 
71e2			 
71e2 cd cd 0d			call update_display		 
71e5			 
71e5 cd c0 1f			call next_page_prompt 
71e8			 
71e8 e1					pop hl 
71e9 d1					pop de 
71ea cd 7a 1d				call monitor 
71ed			; do a dump to cli and not warmstart so we preserve all of the uwords.  
71ed			; TODO Make optional fault restart to cli or warm boot? 
71ed					;jp warmstart 
71ed c3 ba 1c				jp cli 
71f0 76					halt 
71f1			 
71f1			 
71f1			; handle the auto run of code from files in storage 
71f1			 
71f1			 
71f1			include "forth_startup.asm" 
71f1			; Which startup method to use? 
71f1			; 
71f1			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
71f1			; followed by loading of a list of scripts in eeprom 
71f1			 
71f1			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
71f1			; from eeprom 
71f1			 
71f1			; Select with define in main stubs 
71f1			 
71f1			if STARTUP_V1 
71f1				include "forth_startupv1.asm" 
71f1			endif 
71f1			if STARTUP_V2 
71f1				include "forth_startupv2.asm" 
71f1			; Version 2 of the startup  
71f1			;  
71f1			; Auto load any files in bank 1 that start with a '*' 
71f1			; If no se storage then revert to using eprom 
71f1			 
71f1			 
71f1			if STORAGE_SE = 0 
71f1			 
71f1			sprompt1: db "Startup load...",0 
71f1			sprompt2: db "Run? 1=No *=End #=All",0 
71f1			 
71f1			 
71f1			 
71f1			 
71f1			forth_startup: 
71f1				ld hl, startcmds 
71f1				ld a, 0 
71f1				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
71f1			 
71f1			.start1:	push hl 
71f1				call clear_display 
71f1				ld de, sprompt1 
71f1			        ld a, display_row_1 
71f1				call str_at_display 
71f1				ld de, sprompt2 
71f1			        ld a, display_row_2 
71f1				call str_at_display 
71f1				pop hl 
71f1				push hl 
71f1				ld e,(hl) 
71f1				inc hl 
71f1				ld d,(hl) 
71f1			        ld a, display_row_3 
71f1				call str_at_display 
71f1				call update_display 
71f1			 
71f1			 
71f1				ld a, (os_last_cmd) 
71f1				cp 0 
71f1				jr z, .startprompt 
71f1				call delay250ms 
71f1				jr .startdo 
71f1				 
71f1				 
71f1			 
71f1			.startprompt: 
71f1			 
71f1				ld a,display_row_4 + display_cols - 1 
71f1			        ld de, endprg 
71f1				call str_at_display 
71f1				call update_display 
71f1				call delay1s 
71f1				call cin_wait 
71f1						 
71f1				cp '*' 
71f1				jr z, .startupend1 
71f1				cp '#' 
71f1				jr nz, .startno 
71f1				ld a, 1 
71f1				ld (os_last_cmd),a 
71f1				jr .startdo 
71f1			.startno:	cp '1' 
71f1				jr z,.startnxt  
71f1			 
71f1				; exec startup line 
71f1			.startdo:	 
71f1				pop hl 
71f1				push hl 
71f1				 
71f1				ld e,(hl) 
71f1				inc hl 
71f1				ld d,(hl) 
71f1				ex de,hl 
71f1			 
71f1				push hl 
71f1			 
71f1				ld a, 0 
71f1				;ld a, FORTH_END_BUFFER 
71f1				call strlent 
71f1				inc hl   ; include zero term to copy 
71f1				ld b,0 
71f1				ld c,l 
71f1				pop hl 
71f1				ld de, scratch 
71f1				ldir 
71f1			 
71f1			 
71f1				ld hl, scratch 
71f1				call forthparse 
71f1				call forthexec 
71f1				call forthexec_cleanup 
71f1			 
71f1				ld a, display_row_4 
71f1				ld de, endprog 
71f1			 
71f1				call update_display		 
71f1			 
71f1				ld a, (os_last_cmd) 
71f1				cp 0 
71f1				jr nz, .startnxt 
71f1				call next_page_prompt 
71f1			        call clear_display 
71f1				call update_display		 
71f1			 
71f1				; move onto next startup line? 
71f1			.startnxt: 
71f1			 
71f1				call delay250ms 
71f1				pop hl 
71f1			 
71f1				inc hl 
71f1				inc hl 
71f1			 
71f1				push hl 
71f1				ld e, (hl) 
71f1				inc hl 
71f1				ld d, (hl) 
71f1				pop hl 
71f1				; TODO replace 0 test 
71f1			 
71f1				ex de, hl 
71f1				call ishlzero 
71f1			;	ld a,e 
71f1			;	add d 
71f1			;	cp 0    ; any left to do? 
71f1				ex de, hl 
71f1				jp nz, .start1 
71f1				jr .startupend 
71f1			 
71f1			.startupend1: pop hl 
71f1			.startupend: 
71f1			 
71f1				call clear_display 
71f1				call update_display 
71f1				ret 
71f1			endif 
71f1			 
71f1			 
71f1			if STORAGE_SE 
71f1			 
71f1			;sprompt3: db "Loading from start-up file:",0 
71f1 .. 00		sprompt3: db "  Searching...",0 
7200			;sprompt4: db "(Any key to stop)",0 
7200			 
7200			 
7200			forth_autoload: 
7200			 
7200				; load block 0 of store 1 
7200				 
7200 3e fe			ld a, $fe      ; bit 0 clear 
7202 32 95 f9			ld (spi_device), a 
7205			 
7205 cd 25 05			call storage_get_block_0 
7208			 
7208 3a d0 f9			ld a, (store_page+STORE_0_AUTOFILE) 
720b			 
720b fe 00			cp 0 
720d c8				ret z     ; auto start not enabled 
720e			 
720e cd aa 0d			call clear_display 
7211			 
7211				; set bank 
7211			 
7211 3a d2 f9				ld a, (store_page+STORE_0_BANKRUN) 
7214 32 95 f9				ld (spi_device), a 
7217			 
7217			 
7217				; generate a directory of bank 1 and search for flagged files 
7217			 
7217					if DEBUG_FORTH_WORDS_KEY 
7217						DMARK "DIR" 
7217 f5				push af  
7218 3a 2c 72			ld a, (.dmark)  
721b 32 a0 fd			ld (debug_mark),a  
721e 3a 2d 72			ld a, (.dmark+1)  
7221 32 a1 fd			ld (debug_mark+1),a  
7224 3a 2e 72			ld a, (.dmark+2)  
7227 32 a2 fd			ld (debug_mark+2),a  
722a 18 03			jr .pastdmark  
722c ..			.dmark: db "DIR"  
722f f1			.pastdmark: pop af  
7230			endm  
# End of macro DMARK
7230						CALLMONITOR 
7230 cd aa fd			call debug_vector  
7233				endm  
# End of macro CALLMONITOR
7233					endif 
7233			 
7233 cd 25 05			call storage_get_block_0 
7236			 
7236 21 af f9			ld hl, store_page     ; get current id count 
7239 46				ld b, (hl) 
723a 0e 00			ld c, 0    ; count of files   
723c					if DEBUG_FORTH_WORDS 
723c						DMARK "DI1" 
723c f5				push af  
723d 3a 51 72			ld a, (.dmark)  
7240 32 a0 fd			ld (debug_mark),a  
7243 3a 52 72			ld a, (.dmark+1)  
7246 32 a1 fd			ld (debug_mark+1),a  
7249 3a 53 72			ld a, (.dmark+2)  
724c 32 a2 fd			ld (debug_mark+2),a  
724f 18 03			jr .pastdmark  
7251 ..			.dmark: db "DI1"  
7254 f1			.pastdmark: pop af  
7255			endm  
# End of macro DMARK
7255						CALLMONITOR 
7255 cd aa fd			call debug_vector  
7258				endm  
# End of macro CALLMONITOR
7258					endif 
7258			 
7258				; check for empty drive 
7258			 
7258 3e 00			ld a, 0 
725a b8				cp b 
725b ca a8 72			jp z, .dirdone 
725e			 
725e				; for each of the current ids do a search for them and if found push to stack 
725e			 
725e c5			.diritem:	push bc 
725f 21 40 00				ld hl, STORE_BLOCK_PHY 
7262 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
7264 58					ld e,b 
7265			 
7265 d5					push de 
7266 e5					push hl 
7267 cd aa 0d			call clear_display 
726a 3e 32			ld a, display_row_2 + 10 
726c 11 f1 71			ld de, sprompt3 
726f cd bd 0d			call str_at_display 
7272 cd 01 0d			call active 
7275 eb				ex de, hl 
7276 3e 2f			ld a, display_row_2 + 7 
7278 cd bd 0d			call str_at_display 
727b cd cd 0d			call update_display 
727e e1				pop hl 
727f d1				pop de 
7280			 
7280			;		if DEBUG_FORTH_WORDS 
7280			;			DMARK "DI2" 
7280			;			CALLMONITOR 
7280			;		endif 
7280			 
7280 cd a7 07				call storage_findnextid 
7283			 
7283			;		if DEBUG_FORTH_WORDS 
7283			;			DMARK "DI3" 
7283			;			CALLMONITOR 
7283			;		endif 
7283			 
7283					; if found hl will be non zero 
7283			 
7283 cd 07 10				call ishlzero 
7286			;		ld a, l 
7286			;		add h 
7286			; 
7286			;		cp 0 
7286 28 1d				jr z, .dirnotfound 
7288			 
7288					; increase count 
7288			 
7288 c1					pop bc	 
7289 0c					inc c 
728a c5					push bc 
728b					 
728b			 
728b					; get file header and push the file name 
728b			 
728b 11 af f9				ld de, store_page 
728e cd 74 04				call storage_read_block 
7291			 
7291					; push file id to stack 
7291				 
7291			 
7291					; is this a file we want to run? 
7291			 
7291 21 b2 f9				ld hl, store_page+3 
7294 7e					ld a,(hl) 
7295 fe 2a				cp '*' 
7297 20 0c				jr nz,  .dirnotfound 
7299					 
7299			 
7299			 
7299 3a af f9				ld a, (store_page) 
729c d5					push de 
729d e5					push hl 
729e c5					push bc 
729f cd cb 72				call .autorunf 
72a2 c1					pop bc 
72a3 e1					pop hl 
72a4 d1					pop de 
72a5			 
72a5			 
72a5			 
72a5				; save this extent 
72a5			 
72a5					; push file name 
72a5			;display file name to run 
72a5			 
72a5			;		ld hl, store_page+3 
72a5			;		if DEBUG_FORTH_WORDS 
72a5			;			DMARK "DI5" 
72a5			;			CALLMONITOR 
72a5			;		endif 
72a5			; 
72a5			;		 
72a5			; 
72a5			;		call forth_push_str 
72a5			;		if DEBUG_FORTH_WORDS 
72a5			;			DMARK "DI6" 
72a5			;			CALLMONITOR 
72a5			;		endif 
72a5			.dirnotfound: 
72a5 c1					pop bc     
72a6 10 b6				djnz .diritem 
72a8				 
72a8			.dirdone:	 
72a8					if DEBUG_FORTH_WORDS 
72a8						DMARK "DI7" 
72a8 f5				push af  
72a9 3a bd 72			ld a, (.dmark)  
72ac 32 a0 fd			ld (debug_mark),a  
72af 3a be 72			ld a, (.dmark+1)  
72b2 32 a1 fd			ld (debug_mark+1),a  
72b5 3a bf 72			ld a, (.dmark+2)  
72b8 32 a2 fd			ld (debug_mark+2),a  
72bb 18 03			jr .pastdmark  
72bd ..			.dmark: db "DI7"  
72c0 f1			.pastdmark: pop af  
72c1			endm  
# End of macro DMARK
72c1						CALLMONITOR 
72c1 cd aa fd			call debug_vector  
72c4				endm  
# End of macro CALLMONITOR
72c4					endif 
72c4			 
72c4 cd aa 0d				call clear_display 
72c7 cd cd 0d				call update_display 
72ca			 
72ca c9					ret 
72cb			 
72cb			 
72cb			 
72cb			 
72cb			 
72cb			.autorunf: 
72cb			 
72cb			 
72cb				; get file id to load from and get the file name to display 
72cb			 
72cb			;		ld a, (store_page+STORE_0_FILERUN) 
72cb			 
72cb 2e 00				ld l, 0 
72cd 67					ld h, a 
72ce 11 af f9				ld de, store_page 
72d1			 
72d1					if DEBUG_FORTH_WORDS 
72d1						DMARK "ASp" 
72d1 f5				push af  
72d2 3a e6 72			ld a, (.dmark)  
72d5 32 a0 fd			ld (debug_mark),a  
72d8 3a e7 72			ld a, (.dmark+1)  
72db 32 a1 fd			ld (debug_mark+1),a  
72de 3a e8 72			ld a, (.dmark+2)  
72e1 32 a2 fd			ld (debug_mark+2),a  
72e4 18 03			jr .pastdmark  
72e6 ..			.dmark: db "ASp"  
72e9 f1			.pastdmark: pop af  
72ea			endm  
# End of macro DMARK
72ea						CALLMONITOR 
72ea cd aa fd			call debug_vector  
72ed				endm  
# End of macro CALLMONITOR
72ed					endif 
72ed cd cd 09				call storage_read 
72f0			 
72f0					if DEBUG_FORTH_WORDS 
72f0						DMARK "ASr" 
72f0 f5				push af  
72f1 3a 05 73			ld a, (.dmark)  
72f4 32 a0 fd			ld (debug_mark),a  
72f7 3a 06 73			ld a, (.dmark+1)  
72fa 32 a1 fd			ld (debug_mark+1),a  
72fd 3a 07 73			ld a, (.dmark+2)  
7300 32 a2 fd			ld (debug_mark+2),a  
7303 18 03			jr .pastdmark  
7305 ..			.dmark: db "ASr"  
7308 f1			.pastdmark: pop af  
7309			endm  
# End of macro DMARK
7309						CALLMONITOR 
7309 cd aa fd			call debug_vector  
730c				endm  
# End of macro CALLMONITOR
730c					endif 
730c			 
730c cd 07 10				call ishlzero 
730f c8					ret z             ; file not found 
7310			 
7310					; display file name we are loading 
7310			 
7310 cd aa 0d				call clear_display 
7313			 
7313 3e 32				ld a, display_row_2 + 10 
7315 11 b2 f9				ld de, store_page+3 
7318 cd bd 0d				call str_at_display 
731b				 
731b			; 
731b			 
731b			;	ld a, display_row_1+5 
731b			;	ld de, sprompt3 
731b			;	call str_at_display 
731b			;	ld a, display_row_2+7 
731b			;	call active 
731b			;	ex de, hl 
731b			;;	ld de, sprompt4 
731b			;	call str_at_display 
731b			; 
731b cd cd 0d			call update_display 
731e			 
731e			;	call cin_wait 
731e			;	cp 'n' 
731e			;	ret z 
731e			;	cp 'N' 
731e			;	ret z 
731e			 
731e			;	call delay1s 
731e			 
731e 3a b1 f9			ld a, (store_page+2) 
7321 32 9e f9			ld (store_openmaxext), a    ; save count of ext 
7324 3e 01			ld a, 1  
7326 32 9f f9			ld (store_openext), a    ; save count of ext 
7329			 
7329			.autof: 
7329				; begin to read a line from file 
7329			 
7329 21 1d f4			ld hl, os_cli_cmd 
732c 22 1b f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
732f			  
732f			.readext: 
732f 3a 9f f9			ld a, (store_openext) 
7332 6f				ld l , a 
7333				 
7333 3a af f9			ld a, (store_page) 
7336 67				ld h, a	 
7337 11 af f9			ld de, store_page 
733a					if DEBUG_FORTH_WORDS 
733a						DMARK "ASl" 
733a f5				push af  
733b 3a 4f 73			ld a, (.dmark)  
733e 32 a0 fd			ld (debug_mark),a  
7341 3a 50 73			ld a, (.dmark+1)  
7344 32 a1 fd			ld (debug_mark+1),a  
7347 3a 51 73			ld a, (.dmark+2)  
734a 32 a2 fd			ld (debug_mark+2),a  
734d 18 03			jr .pastdmark  
734f ..			.dmark: db "ASl"  
7352 f1			.pastdmark: pop af  
7353			endm  
# End of macro DMARK
7353						CALLMONITOR 
7353 cd aa fd			call debug_vector  
7356				endm  
# End of macro CALLMONITOR
7356					endif 
7356 cd cd 09				call storage_read 
7359 cd 07 10			call ishlzero 
735c c8				ret z 
735d			 
735d			; TODO copy to exec buffer 
735d			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
735d			 
735d				; copy the record buffer to the cli buffer 
735d			 
735d ed 5b 1b f6		ld de, (os_var_array) 
7361 21 b1 f9			ld hl, store_page+2 
7364			;	ex de, hl 
7364 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
7367 ed b0			ldir 
7369 ed 53 1b f6		ld (os_var_array), de 
736d				 
736d 3a 9f f9			ld a, (store_openext) 
7370 3c				inc a 
7371 32 9f f9			ld (store_openext), a    ; save count of ext 
7374			 
7374			 
7374			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
7374				 
7374 3a a2 f9			ld a, (store_readcont) 
7377 fe 00			cp 0 
7379 20 b4			jr nz, .readext 
737b			 
737b			;	jr z, .autoend 
737b			 
737b					if DEBUG_FORTH_WORDS 
737b						DMARK "ASc" 
737b f5				push af  
737c 3a 90 73			ld a, (.dmark)  
737f 32 a0 fd			ld (debug_mark),a  
7382 3a 91 73			ld a, (.dmark+1)  
7385 32 a1 fd			ld (debug_mark+1),a  
7388 3a 92 73			ld a, (.dmark+2)  
738b 32 a2 fd			ld (debug_mark+2),a  
738e 18 03			jr .pastdmark  
7390 ..			.dmark: db "ASc"  
7393 f1			.pastdmark: pop af  
7394			endm  
# End of macro DMARK
7394						CALLMONITOR 
7394 cd aa fd			call debug_vector  
7397				endm  
# End of macro CALLMONITOR
7397					endif 
7397 e5				push hl	 
7398 d5				push de 
7399 cd 01 0d			call active 
739c eb				ex de, hl 
739d 3e 2f			ld a, display_row_2 + 7 
739f cd bd 0d			call str_at_display 
73a2			 
73a2 cd cd 0d			call update_display 
73a5 d1				pop de  
73a6 e1				pop hl 
73a7			;	call delay250ms 
73a7			 
73a7			 
73a7			 
73a7			 
73a7			.autoexec: 
73a7			 
73a7			 
73a7 21 1d f4			ld hl, os_cli_cmd 
73aa					if DEBUG_FORTH_WORDS 
73aa						DMARK "ASx" 
73aa f5				push af  
73ab 3a bf 73			ld a, (.dmark)  
73ae 32 a0 fd			ld (debug_mark),a  
73b1 3a c0 73			ld a, (.dmark+1)  
73b4 32 a1 fd			ld (debug_mark+1),a  
73b7 3a c1 73			ld a, (.dmark+2)  
73ba 32 a2 fd			ld (debug_mark+2),a  
73bd 18 03			jr .pastdmark  
73bf ..			.dmark: db "ASx"  
73c2 f1			.pastdmark: pop af  
73c3			endm  
# End of macro DMARK
73c3						CALLMONITOR 
73c3 cd aa fd			call debug_vector  
73c6				endm  
# End of macro CALLMONITOR
73c6					endif 
73c6 cd 82 24			call forthparse 
73c9 cd be 24			call forthexec 
73cc cd d8 23			call forthexec_cleanup 
73cf			 
73cf			 
73cf			 
73cf c3 29 73			jp .autof 
73d2			;.autofdone: 
73d2			; 
73d2			;		if DEBUG_FORTH_WORDS 
73d2			;			DMARK "ASx" 
73d2			;			CALLMONITOR 
73d2			;		endif 
73d2			;;	call clear_display 
73d2			;	ret 
73d2			 
73d2			 
73d2			 
73d2			endif 
# End of file forth_startupv2.asm
73d2			endif 
73d2			 
# End of file forth_startup.asm
73d2			 
73d2			; eof 
# End of file forth_kernel.asm
73d2			;include "nascombasic.asm" 
73d2			 
73d2			 
73d2			; find out where the code ends if loaded into RAM (for SC114) 
73d2			;endofcode:  
73d2			;	nop 
73d2			 
73d2			 
73d2			; jump to nmi vector 
73d2			 
73d2			init_nmi: 
73d2 3e c9			ld a, $c9   ; RET 
73d4 32 ad fd			ld (nmi_vector), a 
73d7 c9				ret 
73d8			nmi: 
73d8 e5				push hl 
73d9 d5				push de 
73da c5				push bc 
73db f5				push af 
73dc cd ad fd			call nmi_vector 
73df f5				push af 
73e0 c5				push bc 
73e1 d5				push de 
73e2 e5				push hl 
73e3 ed 4d			reti 
73e5			 
73e5			 
73e5			; eof 
73e5			 
# End of file main.asm
73e5			include "firmware_lcd_4x40.asm" 
73e5			; **********************************************************************  
73e5			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
73e5			; **********************************************************************  
73e5			;  
73e5			; **  Written as a Small Computer Monitor App  
73e5			; **  www.scc.me.uk  
73e5			;  
73e5			; History  
73e5			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
73e5			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
73e5			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
73e5			;  
73e5			; **********************************************************************  
73e5			;  
73e5			; This program is an example of one of the methods of interfacing an   
73e5			; alphanumeric LCD module.   
73e5			;  
73e5			; In this example the display is connected to either a Z80 PIO or a   
73e5			; simple 8-bit output port.   
73e5			;  
73e5			; This interfacing method uses 4-bit data mode and uses time delays  
73e5			; rather than polling the display's ready status. As a result the   
73e5			; interface only requires 6 simple output lines:  
73e5			;   Output bit 0 = not used  
73e5			;   Output bit 1 = not used  
73e5			;   Output bit 2 = RS         High = data, Low = instruction  
73e5			;   Output bit 3 = E          Active high  
73e5			;   Output bit 4 = DB4  
73e5			;   Output bit 5 = DB5  
73e5			;   Output bit 6 = DB6  
73e5			;   Output bit 7 = DB7  
73e5			; Display's R/W is connected to 0v so it is always in write mode  
73e5			;  
73e5			; This set up should work with any system supporting the RC2014 bus  
73e5			  
73e5			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
73e5			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
73e5			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
73e5			;  
73e5			; **********************************************************************  
73e5			  
73e5			; Additonal for 4x40. E1 and E2 instead of just E   
73e5			; TODO swipe vidout signal on port a to activate E2  
73e5			  
73e5			; **********************************************************************  
73e5			; **  Constants  
73e5			; **********************************************************************  
73e5			; LCD constants required by LCD support module  
73e5			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
73e5			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
73e5			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
73e5			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
73e5			; TODO Decide which E is being set  
73e5			kLCDWidth:  EQU display_cols             ;Width in characters  
73e5			  
73e5			; **********************************************************************  
73e5			; **  Code library usage  
73e5			; **********************************************************************  
73e5			  
73e5			; send character to current cursor position  
73e5			; wraps and/or scrolls screen automatically  
73e5			  
73e5			  
73e5			  
73e5			lcd_init:  
73e5			  
73e5			; SCMonAPI functions used  
73e5			  
73e5			; Alphanumeric LCD functions used  
73e5			; no need to specify specific functions for this module  
73e5			  
73e5 3e cf		            LD   A, 11001111b  
73e7 d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
73e9 3e 00		            LD   A, 00000000b  
73eb d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
73ed			  
73ed			; Initialise alphanumeric LCD module  
73ed 3e 00				ld a, 0  
73ef 32 00 fb				ld (display_lcde1e2), a  
73f2 cd 73 74		            CALL fLCD_Init      ;Initialise LCD module  
73f5 3e 01				ld a, 1  
73f7 32 00 fb				ld (display_lcde1e2), a  
73fa cd 73 74		            CALL fLCD_Init      ;Initialise LCD module  
73fd			  
73fd c9				ret  
73fe			  
73fe			;  
73fe			;;  
73fe			; lcd functions  
73fe			;  
73fe			;  
73fe			  
73fe			; what is at cursor position   
73fe			  
73fe			;get_cursor:	ld de, (cursor_row)   ;  row + col  
73fe			;		call curptr  
73fe			;		ret  
73fe			  
73fe			  
73fe			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
73fe			  
73fe			curptr:  
73fe c5				push bc  
73ff 21 e6 fc			ld hl, display_fb0  
7402			cpr:	  
7402				; loop for cursor whole row  
7402 0e 28			ld c, display_cols  
7404 23			cpr1:	inc hl  
7405 0d				dec c  
7406 20 fc			jr nz, cpr1  
7408 05				dec b  
7409 20 f7			jr nz, cpr  
740b			  
740b				; add col	  
740b			  
740b 23			cpr2:	inc hl  
740c 1d				dec e  
740d 20 fc			jr nz, cpr2  
740f			  
740f c1				pop bc  
7410 c9				ret  
7411				  
7411			  
7411			  
7411			  
7411			  
7411			; write the frame buffer given in hl to hardware   
7411 22 fe fa		write_display: ld (display_write_tmp), hl 	   
7414 3e 00			ld a, kLCD_Line1  
7416 cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
7419 06 28			ld b, display_cols  
741b ed 5b fe fa		ld de, (display_write_tmp)  
741f cd 6b 74			call write_len_string  
7422				  
7422				  
7422 2a fe fa			ld hl, (display_write_tmp)  
7425 11 28 00			ld de, display_cols  
7428 19				add hl,de  
7429 22 fe fa			ld (display_write_tmp),hl  
742c			  
742c				  
742c 3e 28			ld a, kLCD_Line2  
742e cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
7431 06 28			ld b, display_cols  
7433 ed 5b fe fa		ld de, (display_write_tmp)  
7437 cd 6b 74			call write_len_string  
743a				  
743a 2a fe fa			ld hl, (display_write_tmp)  
743d 11 28 00			ld de, display_cols  
7440 19				add hl,de  
7441 22 fe fa			ld (display_write_tmp),hl  
7444			  
7444				  
7444 3e 50			ld a, kLCD_Line3  
7446 cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
7449 06 28			ld b, display_cols  
744b ed 5b fe fa		ld de, (display_write_tmp)  
744f cd 6b 74			call write_len_string  
7452				  
7452 2a fe fa			ld hl, (display_write_tmp)  
7455 11 28 00			ld de, display_cols  
7458 19				add hl,de  
7459 22 fe fa			ld (display_write_tmp),hl  
745c			  
745c				  
745c 3e 78			ld a, kLCD_Line4  
745e cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
7461 06 28			ld b, display_cols  
7463 ed 5b fe fa		ld de, (display_write_tmp)  
7467 cd 6b 74			call write_len_string  
746a c9					ret  
746b				  
746b				; write out a fixed length string given in b from de  
746b			  
746b 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
746c cd d8 74		            CALL fLCD_Data      ;Write character to display  
746f 13				inc de  
7470 10 f9			djnz write_len_string  
7472 c9				ret  
7473			  
7473			; Some other things to do  
7473			;            LD   A, kLCD_Clear ;Display clear  
7473			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
7473			;            LD   A, kLCD_Under ;Display on with underscore cursor  
7473			;            LD   A, kLCD_On     ;Display on with no cursor  
7473			;            ;LD   A, kLCD_Off   ;Display off  
7473			;            CALL fLCD_Inst      ;Send instruction to display  
7473			;  
7473			;  
7473			;            halt  
7473			;  
7473			;  
7473			;MsgHello:   DB  "Hello World!",0  
7473			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
7473			  
7473			; Custom characters 5 pixels wide by 8 pixels high  
7473			; Up to 8 custom characters can be defined  
7473			;BitMaps:      
7473			;; Character 0x00 = Battery icon  
7473			;            DB  01110b  
7473			;            DB  11011b  
7473			;            DB  10001b  
7473			;            DB  10001b  
7473			;            DB  11111b  
7473			;            DB  11111b  
7473			;            DB  11111b  
7473			;            DB  11111b  
7473			;; Character 0x01 = Bluetooth icon  
7473			;            DB  01100b  
7473			;            DB  01010b  
7473			;            DB  11100b  
7473			;            DB  01000b  
7473			;            DB  11100b  
7473			;            DB  01010b  
7473			;            DB  01100b  
7473			;            DB  00000b  
7473			;  
7473			  
7473			  
7473			; **********************************************************************  
7473			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
7473			; **********************************************************************  
7473			;  
7473			; **  Written as a Small Computer Monitor App   
7473			; **  Version 0.1 SCC 2018-05-16  
7473			; **  www.scc.me.uk  
7473			;  
7473			; **********************************************************************  
7473			;  
7473			; This module provides support for alphanumeric LCD modules using with  
7473			; *  HD44780 (or compatible) controller  
7473			; *  5 x 7 pixel fonts  
7473			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
7473			; *  Interface via six digital outputs to the display (see below)  
7473			;  
7473			; LCD module pinout:  
7473			;   1  Vss   0v supply  
7473			;   2  Vdd   5v supply  
7473			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
7473			;   4  RS    High = data, Low = instruction  
7473			;   5  R/W   High = Read, Low = Write  
7473			;   6  E     Enable signal (active high)  
7473			;   7  DB0   Data bit 0  
7473			;   8  DB1   Data bit 1  
7473			;   9  DB2   Data bit 2  
7473			;  10  DB3   Data bit 3  
7473			;  11  DB4   Data bit 4  
7473			;  12  DB5   Data bit 5  
7473			;  13  DB6   Data bit 6  
7473			;  14  DB7   Data bit 7  
7473			;  15  A     Backlight anode (+)  
7473			;  16  K     Backlight cathode (-)  
7473			;  
7473			; This interfacing method uses 4-bit data mode and uses time delays  
7473			; rather than polling the display's ready status. As a result the   
7473			; interface only requires 6 simple output lines:  
7473			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
7473			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
7473			;   LCD DB4 = Microcomputer output port bit 4  
7473			;   LCD DB5 = Microcomputer output port bit 5  
7473			;   LCD DB6 = Microcomputer output port bit 6  
7473			;   LCD DB7 = Microcomputer output port bit 7  
7473			; Display's R/W is connected to 0v so it is always in write mode  
7473			; All 6 connections must be on the same port address <kLCDPrt>  
7473			; This method also allows a decent length of cable from micro to LCD  
7473			;  
7473			; **********************************************************************  
7473			;  
7473			; To include the code for any given function provided by this module,   
7473			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
7473			; the parent source file.  
7473			; For example:  #REQUIRES   uHexPrefix  
7473			;  
7473			; Also #INCLUDE this file at some point after the #REQUIRES statements  
7473			; in the parent source file.  
7473			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
7473			;  
7473			; These are the function names provided by this module:  
7473			; fLCD_Init                     ;Initialise LCD  
7473			; fLCD_Inst                     ;Send instruction to LCD  
7473			; fLCD_Data                     ;Send data byte to LCD  
7473			; fLCD_Pos                      ;Position cursor  
7473			; fLCD_Str                      ;Display string  
7473			; fLCD_Def                      ;Define custom character  
7473			;  
7473			; **********************************************************************  
7473			;  
7473			; Requires SCMonAPI.asm to also be included in the project  
7473			;  
7473			  
7473			  
7473			; **********************************************************************  
7473			; **  Constants  
7473			; **********************************************************************  
7473			  
7473			; Constants that must be defined externally  
7473			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
7473			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
7473			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
7473			;kLCDWidth: EQU 20             ;Width in characters  
7473			  
7473			; general line offsets in any frame buffer  
7473			  
7473			  
7473			display_row_1: equ 0  
7473			display_row_2: equ display_row_1+display_cols  
7473			display_row_3: equ display_row_2 + display_cols  
7473			display_row_4: equ display_row_3 + display_cols  
7473			;display_row_4_eol:   
7473			  
7473			  
7473			; Cursor position values for the start of each line  
7473			  
7473			; E  
7473			kLCD_Line1: EQU 0x00   
7473			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
7473			; E1  
7473			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
7473			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
7473			  
7473			; Instructions to send as A register to fLCD_Inst  
7473			kLCD_Clear: EQU 00000001b     ;LCD clear  
7473			kLCD_Off:   EQU 00001000b     ;LCD off  
7473			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
7473			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
7473			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
7473			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
7473			  
7473			; Constants used by this code module  
7473			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
7473			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
7473			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
7473			  
7473			  
7473			  
7473			; **********************************************************************  
7473			; **  LCD support functions  
7473			; **********************************************************************  
7473			  
7473			; Initialise alphanumeric LCD module  
7473			; LCD control register codes:  
7473			;   DL   0 = 4-bit mode        1 = 8-bit mode  
7473			;   N    0 = 1-line mode       1 = 2-line mode  
7473			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
7473			;   D    0 = Display off       1 = Display on  
7473			;   C    0 = Cursor off        1 = Cursor on  
7473			;   B    0 = Blinking off      1 = Blinking on  
7473			;   ID   0 = Decrement mode    1 = Increment mode  
7473			;   SH   0 = Entire shift off  1 = Entire shift on  
7473 3e 28		fLCD_Init:  LD   A, 40  
7475 cd 9a 75		            CALL LCDDelay       ;Delay 40ms after power up  
7478			; For reliable reset set 8-bit mode - 3 times  
7478 cd 6a 75		            CALL WrFn8bit       ;Function = 8-bit mode  
747b cd 6a 75		            CALL WrFn8bit       ;Function = 8-bit mode  
747e cd 6a 75		            CALL WrFn8bit       ;Function = 8-bit mode  
7481			; Set 4-bit mode  
7481 cd 66 75		            CALL WrFn4bit       ;Function = 4-bit mode  
7484 cd 98 75		            CALL LCDDelay1      ;Delay 37 us or more  
7487			; Function set  
7487 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
7489 cd 9c 74		            CALL fLCD_Inst      ;2 line, display on  
748c			; Display On/Off control  
748c 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
748e cd 9c 74		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
7491			; Display Clear  
7491 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
7493 cd 9c 74		            CALL fLCD_Inst      ;Clear display  
7496			; Entry mode  
7496 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
7498 cd 9c 74		            CALL fLCD_Inst      ;Increment mode, shift off  
749b			; Display module now initialised  
749b c9			            RET  
749c			; ok to here  
749c			  
749c			; Write instruction to LCD  
749c			;   On entry: A = Instruction byte to be written  
749c			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
749c f5			fLCD_Inst:  PUSH AF  
749d f5			            PUSH AF  
749e cd b0 74		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
74a1 f1			            POP  AF  
74a2 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
74a3 17			            RLA  
74a4 17			            RLA  
74a5 17			            RLA  
74a6 cd b0 74		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
74a9 3e 02		            LD   A, 2  
74ab cd 9a 75		            CALL LCDDelay       ;Delay 2 ms to complete   
74ae f1			            POP  AF  
74af c9			            RET  
74b0			Wr4bits:   
74b0 f5					push af  
74b1 3a 00 fb				ld a, (display_lcde1e2)  
74b4 fe 00				cp 0     ; e  
74b6 20 10				jr nz, .wea2	  
74b8 f1					pop af  
74b9 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
74bb d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
74bd cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
74bf cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
74c1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
74c3 cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
74c5 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
74c7 c9			            RET  
74c8 f1			.wea2:		pop af  
74c9 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
74cb d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
74cd cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
74cf cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
74d1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
74d3 cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
74d5 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
74d7 c9			            RET  
74d8			  
74d8			  
74d8			; Write data to LCD  
74d8			;   On entry: A = Data byte to be written  
74d8			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
74d8 f5			fLCD_Data:  PUSH AF  
74d9 f5			            PUSH AF  
74da cd ec 74		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
74dd f1			            POP  AF  
74de 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
74df 17			            RLA  
74e0 17			            RLA  
74e1 17			            RLA  
74e2 cd ec 74		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
74e5 3e 96		            LD   A, 150  
74e7 3d			Wait:      DEC  A              ;Wait a while to allow data   
74e8 20 fd		            JR   NZ, Wait      ;  write to complete  
74ea f1			            POP  AF  
74eb c9			            RET  
74ec			Wr4bitsa:     
74ec f5					push af  
74ed 3a 00 fb				ld a, (display_lcde1e2)  
74f0 fe 00				cp 0     ; e1  
74f2 20 16				jr nz, .we2	  
74f4 f1					pop af  
74f5 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
74f7 cb d7		            SET  kLCDBitRS, A  
74f9 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
74fb cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
74fd cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
74ff d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
7501 cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
7503 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7505 cb 97		            RES  kLCDBitRS, A  
7507 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7509 c9			            RET  
750a f1			.we2:		pop af  
750b e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
750d cb d7		            SET  kLCDBitRS, A  
750f d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7511 cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
7513 cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
7515 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
7517 cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
7519 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
751b cb 97		            RES  kLCDBitRS, A  
751d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
751f c9			            RET  
7520			  
7520			  
7520			; Position cursor to specified location  
7520			;   On entry: A = Cursor position  
7520			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7520 f5			fLCD_Pos:   PUSH AF  
7521					; at this point set the E1 or E2 flag depending on position  
7521			  
7521 c5					push bc  
7522			;		push af  
7522 06 00				ld b, 0  
7524 4f					ld c, a  
7525 3e 4f				ld a, kLCD_Line3-1  
7527 b7			 		or a      ;clear carry flag  
7528 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
7529 38 04				jr c, .pe1  
752b			  
752b					; E selection  
752b cb 80				res 0, b         ; bit 0 unset e  
752d			;		pop af    ; before line 3 so recover orig pos  
752d			;		ld c, a    ; save for poking back  
752d 18 06				jr .peset	          
752f			.pe1:          	; E2 selection  
752f cb c0				set 0, b         ; bit 0 set e1  
7531 79					ld a, c  
7532 de 4f				sbc a, kLCD_Line3-1  
7534 4f					ld c, a	         ; save caculated offset  
7535			;		pop af     ; bin this original value now we have calculated form  
7535			  
7535			.peset:		; set bit  
7535 78					ld a, b  
7536 32 00 fb				ld (display_lcde1e2), a 	  
7539 79					ld a, c  
753a c1					pop bc  
753b			  
753b f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
753d cd 9c 74		            CALL fLCD_Inst      ;Write instruction to LCD  
7540 f1			            POP  AF  
7541 c9			            RET  
7542			  
7542			  
7542			; Output text string to LCD  
7542			;   On entry: DE = Pointer to null terminated text string  
7542			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
7542 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
7543 b7			            OR   A              ;Null terminator?  
7544 c8			            RET  Z              ;Yes, so finished  
7545 cd d8 74		            CALL fLCD_Data      ;Write character to display  
7548 13			            INC  DE             ;Point to next character  
7549 18 f7		            JR   fLCD_Str       ;Repeat  
754b c9					ret  
754c			  
754c			; Define custom character  
754c			;   On entry: A = Character number (0 to 7)  
754c			;             DE = Pointer to character bitmap data  
754c			;   On exit:  A = Next character number  
754c			;             DE = Next location following bitmap  
754c			;             BC HL IX IY I AF' BC' DE' HL' preserved  
754c			; Character is   
754c c5			fLCD_Def:   PUSH BC  
754d f5			            PUSH AF  
754e 07			            RLCA                ;Calculate location  
754f 07			            RLCA                ;  for bitmap data  
7550 07			            RLCA                ;  = 8 x CharacterNumber  
7551 f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
7553 cd 9c 74		            CALL fLCD_Inst      ;Write instruction to LCD  
7556 06 00		            LD   B, 0  
7558 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
7559 cd d8 74		            CALL fLCD_Data      ;Write byte to display  
755c 13			            INC  DE             ;Point to next byte  
755d 04			            INC  B              ;Count bytes  
755e cb 58		            BIT  3, B           ;Finish all 8 bytes?  
7560 28 f6		            JR   Z, Loop       ;No, so repeat  
7562 f1			            POP  AF  
7563 3c			            INC  A              ;Increment character number  
7564 c1			            POP  BC  
7565 c9			            RET  
7566			  
7566			  
7566			; **********************************************************************  
7566			; **  Private functions  
7566			; **********************************************************************  
7566			  
7566			; Write function to LCD  
7566			;   On entry: A = Function byte to be written  
7566			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7566 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
7568 18 02		            JR   WrFunc  
756a 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
756c f5			WrFunc:     PUSH AF  
756d f5					push af  
756e 3a 00 fb				ld a, (display_lcde1e2)  
7571 fe 00				cp 0     ; e1  
7573 20 0f				jr nz, .wfea2	  
7575 f1					pop af  
7576 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7578 cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
757a cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
757c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
757e cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
7580 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7582 18 0d			jr .wfskip  
7584 f1			.wfea2:		pop af  
7585 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7587 cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
7589 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
758b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
758d cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
758f d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7591 3e 05		.wfskip:            LD  A, 5  
7593 cd 9a 75		            CALL LCDDelay       ;Delay 5 ms to complete  
7596 f1			            POP  AF  
7597 c9			            RET  
7598			  
7598			  
7598			; Delay in milliseconds  
7598			;   On entry: A = Number of milliseconds delay  
7598			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7598 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
759a d5			LCDDelay:   PUSH DE  
759b 5f			            LD   E, A           ;Delay by 'A' ms  
759c 16 00		            LD   D, 0  
759e cd d2 0c		            CALL aDelayInMS  
75a1 d1			            POP  DE  
75a2 c9			            RET  
75a3			  
75a3			  
75a3			testlcd:  
75a3 3e 00			ld a, kLCD_Line1  
75a5 cd 20 75			call fLCD_Pos  
75a8 06 28			ld b, 40  
75aa 11 d8 75			ld de, .ttext1  
75ad cd 6b 74			call write_len_string  
75b0			  
75b0 3e 28			ld a, kLCD_Line2  
75b2 cd 20 75			call fLCD_Pos  
75b5 06 28			ld b, 40  
75b7 11 01 76			ld de, .ttext2  
75ba cd 6b 74			call write_len_string  
75bd 3e 50			ld a, kLCD_Line3  
75bf cd 20 75			call fLCD_Pos  
75c2 06 28			ld b, 40  
75c4 11 2a 76			ld de, .ttext3  
75c7 cd 6b 74			call write_len_string  
75ca 3e 78			ld a, kLCD_Line4  
75cc cd 20 75			call fLCD_Pos  
75cf 06 28			ld b, 40  
75d1 11 53 76			ld de, .ttext4  
75d4 cd 6b 74			call write_len_string  
75d7			  
75d7 76				halt  
75d8			  
75d8			  
75d8 .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
7601 .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
762a .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
7653 .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
767c			   
767c			  
767c			  
767c			; eof  
767c			  
# End of file firmware_lcd_4x40.asm
767c			;include "firmware_lcd_4x20.asm" 
767c			include "firmware_key_5x10.asm" 
767c			; 5 x 10 decade counter scanner  
767c			  
767c			  
767c			; TODO do cursor shape change for shift keys  
767c			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
767c			  
767c			  
767c			; bit mask for each scan column and row for teing the matrix  
767c			  
767c			  
767c			key_init:  
767c			  
767c			; SCMonAPI functions used  
767c			  
767c			; Alphanumeric LCD functions used  
767c			; no need to specify specific functions for this module  
767c			  
767c			  
767c 3e cf		            LD   A, 11001111b  
767e d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
7680			;            LD   A, 00000000b  
7680 3e 1f		            LD   A, 00011111b  
7682 d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
7684			  
7684			  
7684				; TODO Configure cursor shapes  
7684			  
7684				; Load cursor shapes   
7684 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
7686 11 96 76		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
7689 06 02		            LD   B, 2           ;Number of characters to define  
768b cd 4c 75		.DefLoop:   CALL fLCD_Def       ;Define custom character  
768e 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
7690			  
7690 3e 01				ld a, 1  
7692 32 f6 fa			ld (cursor_shape),a  
7695 c9				ret  
7696			  
7696			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
7696			; Up to 8 custom characters can be defined  
7696			.cursor_shapes:      
7696			;; Character 0x00 = Normal  
7696 1f			            DB  11111b  
7697 1f			            DB  11111b  
7698 1f			            DB  11111b  
7699 1f			            DB  11111b  
769a 1f			            DB  11111b  
769b 1f			            DB  11111b  
769c 1f			            DB  11111b  
769d 1f			            DB  11111b  
769e			;; Character 0x01 = Modifier  
769e 1f			            DB  11111b  
769f 1b			            DB  11011b  
76a0 1b			            DB  11011b  
76a1 1b			            DB  11011b  
76a2 1b			            DB  11011b  
76a3 1f			            DB  11111b  
76a4 1b			            DB  11011b  
76a5 1f			            DB  11111b  
76a6			  
76a6			  
76a6			  
76a6			  
76a6			; Display custom character 0  
76a6			;            LD   A, kLCD_Line1+14  
76a6			;            CALL fLCD_Pos       ;Position cursor to location in A  
76a6			;            LD   A, 0  
76a6			;            CALL fLCD_Data      ;Write character in A at cursor  
76a6			  
76a6			; Display custom character 1  
76a6			;            LD   A, kLCD_Line2+14  
76a6			;            CALL fLCD_Pos      ;Position cursor to location in A  
76a6			;            LD   A, 1  
76a6			;            CALL fLCD_Data     ;Write character in A at cursor  
76a6			  
76a6			; keyboard scanning   
76a6			  
76a6			; character in from keyboard  
76a6			  
76a6			; mapping for the pcb layout  
76a6			  
76a6			.matrix_to_char:  
76a6 .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
76b1 .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
76bc 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
76c7 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
76d2 .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
76dd			.matrix_to_shift:  
76dd			  
76dd .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
76e8 .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
76f3 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
76fe 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
7709 .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
7714			  
7714			.matrix_to_symbolshift:  
7714			  
7714 fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
771f .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
772a 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
7735			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
7735 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
7740 .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
774b			  
774b			  
774b			  
774b			; mapping for a simple straight through breadboard layout  
774b			  
774b			;.matrix_to_char:  
774b			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
774b			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
774b			;		db "asdfghjkl",KEY_CR,0  
774b			;		db "qwertyuiop",0  
774b			;		 db "1234567890",0  
774b			;.matrix_to_shift:  
774b			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
774b			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
774b			;		db "ASDFGHJKL",KEY_CR,0  
774b			;		db "QWERTYUIOP",0  
774b			;		 db "!",'"',"#$%^&*()",0  
774b			;.matrix_to_symbolshift:  
774b			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
774b			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
774b			;		db "_?*fghjk=",KEY_CR,0  
774b			;		db "-/+*[]{}@#",0  
774b			;		 db "1234567890",0  
774b			  
774b			;.matrix_to_char: db "D#0*C987B654A321"  
774b			  
774b			  
774b				  
774b			  
774b			; add cin and cin_wait  
774b			  
774b cd 5c 77		cin_wait: 	call cin  
774e						if DEBUG_KEYCINWAIT  
774e							push af  
774e							  
774e							ld hl,key_repeat_ct  
774e							ld (hl),a  
774e							inc hl  
774e							call hexout  
774e							ld hl,key_repeat_ct+3  
774e							ld a,0  
774e							ld (hl),a  
774e			  
774e							    LD   A, kLCD_Line1+11  
774e							    CALL fLCD_Pos       ;Position cursor to location in A  
774e							    LD   DE, key_repeat_ct  
774e							    ;LD   DE, MsgHello  
774e							    CALL fLCD_Str       ;Display string pointed to by DE  
774e			  
774e			  
774e			  
774e							pop af  
774e						endif  
774e fe 00			cp 0  
7750 28 f9			jr z, cin_wait   ; block until key press  
7752			  
7752							if DEBUG_KEYCINWAIT  
7752								push af  
7752			  
7752								ld a, 'A'	  
7752								ld hl,key_repeat_ct  
7752								ld (hl),a  
7752								inc hl  
7752								ld a,0  
7752								ld (hl),a  
7752			  
7752								    LD   A, kLCD_Line2+11  
7752								    CALL fLCD_Pos       ;Position cursor to location in A  
7752								    LD   DE, key_repeat_ct  
7752								    ;LD   DE, MsgHello  
7752								    CALL fLCD_Str       ;Display string pointed to by DE  
7752			  
7752							call delay500ms  
7752			  
7752								pop af  
7752							endif  
7752 f5				push af   ; save key pressed  
7753			  
7753			.cin_wait1:	  
7753							if DEBUG_KEYCINWAIT  
7753								push af  
7753			  
7753								ld a, 'b'	  
7753								ld hl,key_repeat_ct  
7753								ld (hl),a  
7753								inc hl  
7753								ld a,0  
7753								ld (hl),a  
7753			  
7753								    LD   A, kLCD_Line2+11  
7753								    CALL fLCD_Pos       ;Position cursor to location in A  
7753								    LD   DE, key_repeat_ct  
7753								    ;LD   DE, MsgHello  
7753								    CALL fLCD_Str       ;Display string pointed to by DE  
7753			  
7753			  
7753							call delay500ms  
7753			  
7753								pop af  
7753							endif  
7753			  
7753 cd 5c 77		call cin  
7756 fe 00			cp 0  
7758 20 f9			jr nz, .cin_wait1  	; wait for key release  
775a			if DEBUG_KEYCINWAIT  
775a				push af  
775a			  
775a				ld a, '3'	  
775a				ld hl,key_repeat_ct  
775a				ld (hl),a  
775a				inc hl  
775a				ld a,0  
775a				ld (hl),a  
775a			  
775a			            LD   A, kLCD_Line2+11  
775a			            CALL fLCD_Pos       ;Position cursor to location in A  
775a			            LD   DE, key_repeat_ct  
775a			            ;LD   DE, MsgHello  
775a			            CALL fLCD_Str       ;Display string pointed to by DE  
775a			  
775a			  
775a			call delay500ms  
775a			  
775a				pop af  
775a			endif  
775a			  
775a f1				pop af   ; get key  
775b c9				ret  
775c			  
775c			  
775c			; cin - key non-blocking except for keybounce release  
775c			  
775c cd 7a 77		cin: 	call .mtoc  
775f			  
775f			if DEBUG_KEYCIN  
775f				push af  
775f				  
775f				ld hl,key_repeat_ct  
775f				ld (hl),a  
775f				inc hl  
775f				call hexout  
775f				ld hl,key_repeat_ct+3  
775f				ld a,0  
775f				ld (hl),a  
775f			  
775f			            LD   A, kLCD_Line3+15  
775f			            CALL fLCD_Pos       ;Position cursor to location in A  
775f			            LD   DE, key_repeat_ct  
775f			            ;LD   DE, MsgHello  
775f			            CALL fLCD_Str       ;Display string pointed to by DE  
775f			  
775f			  
775f			call delay500ms  
775f			  
775f				pop af  
775f			endif  
775f			  
775f			  
775f				; no key held  
775f fe 00			cp 0  
7761 c8				ret z  
7762			  
7762			if DEBUG_KEYCIN  
7762				push af  
7762			  
7762				ld a, '1'	  
7762				ld hl,key_repeat_ct  
7762				ld (hl),a  
7762				inc hl  
7762				ld a,0  
7762				ld (hl),a  
7762			  
7762			            LD   A, kLCD_Line4+15  
7762			            CALL fLCD_Pos       ;Position cursor to location in A  
7762			            LD   DE, key_repeat_ct  
7762			            ;LD   DE, MsgHello  
7762			            CALL fLCD_Str       ;Display string pointed to by DE  
7762			  
7762			  
7762			call delay500ms  
7762			  
7762				pop af  
7762			endif  
7762			  
7762				; stop key bounce  
7762			  
7762 32 c6 fd			ld (key_held),a		 ; save it  
7765 47				ld b, a  
7766			  
7766 c5			.cina1:	push bc  
7767			if DEBUG_KEYCIN  
7767				push af  
7767			  
7767				ld hl,key_repeat_ct  
7767				inc hl  
7767				call hexout  
7767				ld hl,key_repeat_ct+3  
7767				ld a,0  
7767				ld (hl),a  
7767				ld hl,key_repeat_ct  
7767				ld a, '2'	  
7767				ld (hl),a  
7767			  
7767			            LD   A, kLCD_Line4+15  
7767			            CALL fLCD_Pos       ;Position cursor to location in A  
7767			            LD   DE, key_repeat_ct  
7767			            ;LD   DE, MsgHello  
7767			            CALL fLCD_Str       ;Display string pointed to by DE  
7767			  
7767				pop af  
7767			endif  
7767 cd 7a 77			call .mtoc  
776a c1				pop bc  
776b b8				cp b  
776c 28 f8			jr z, .cina1  
776e 78				ld a,b		  
776f			if DEBUG_KEYCIN  
776f				push af  
776f			  
776f				ld hl,key_repeat_ct  
776f				inc hl  
776f				call hexout  
776f				ld hl,key_repeat_ct+3  
776f				ld a,0  
776f				ld (hl),a  
776f				ld hl,key_repeat_ct  
776f				ld a, '3'	  
776f				ld (hl),a  
776f			  
776f			            LD   A, kLCD_Line4+15  
776f			            CALL fLCD_Pos       ;Position cursor to location in A  
776f			            LD   DE, key_repeat_ct  
776f			            ;LD   DE, MsgHello  
776f			            CALL fLCD_Str       ;Display string pointed to by DE  
776f			  
776f				pop af  
776f			endif  
776f c9				ret  
7770			  
7770			; cinndb - key non-blocking without keybounce release  
7770			  
7770 cd 7a 77		cinndb: 	call .mtoc  
7773			  
7773			if DEBUG_KEYCIN  
7773				push af  
7773				  
7773				ld hl,key_repeat_ct  
7773				ld (hl),a  
7773				inc hl  
7773				call hexout  
7773				ld hl,key_repeat_ct+3  
7773				ld a,0  
7773				ld (hl),a  
7773			  
7773			            LD   A, kLCD_Line3+15  
7773			            CALL fLCD_Pos       ;Position cursor to location in A  
7773			            LD   DE, key_repeat_ct  
7773			            ;LD   DE, MsgHello  
7773			            CALL fLCD_Str       ;Display string pointed to by DE  
7773			  
7773			  
7773			call delay500ms  
7773			  
7773				pop af  
7773			endif  
7773			  
7773			  
7773				; no key held  
7773 fe 00			cp 0  
7775 c8				ret z  
7776			  
7776			if DEBUG_KEYCIN  
7776				push af  
7776			  
7776				ld a, '1'	  
7776				ld hl,key_repeat_ct  
7776				ld (hl),a  
7776				inc hl  
7776				ld a,0  
7776				ld (hl),a  
7776			  
7776			            LD   A, kLCD_Line4+15  
7776			            CALL fLCD_Pos       ;Position cursor to location in A  
7776			            LD   DE, key_repeat_ct  
7776			            ;LD   DE, MsgHello  
7776			            CALL fLCD_Str       ;Display string pointed to by DE  
7776			  
7776			  
7776			call delay500ms  
7776			  
7776				pop af  
7776			endif  
7776			  
7776 32 c6 fd			ld (key_held),a		 ; save it  
7779			  
7779			if DEBUG_KEYCIN  
7779				push af  
7779			  
7779				ld hl,key_repeat_ct  
7779				inc hl  
7779				call hexout  
7779				ld hl,key_repeat_ct+3  
7779				ld a,0  
7779				ld (hl),a  
7779				ld hl,key_repeat_ct  
7779				ld a, '3'	  
7779				ld (hl),a  
7779			  
7779			            LD   A, kLCD_Line4+15  
7779			            CALL fLCD_Pos       ;Position cursor to location in A  
7779			            LD   DE, key_repeat_ct  
7779			            ;LD   DE, MsgHello  
7779			            CALL fLCD_Str       ;Display string pointed to by DE  
7779			  
7779				pop af  
7779			endif  
7779 c9				ret  
777a			; detect keyboard modifier key press and apply new overlay to the face key held  
777a			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
777a			  
777a			;.cin_map_modifier:   
777a			;	ld a, (hl)  
777a			;	and 255  
777a			;	ret NZ		; modifier key not flagged  
777a			;  
777a			;	; get key face  
777a			;  
777a			;	ld b,(key_face_held)  
777a			;  
777a			;	ld b, key_cols * key_rows  
777a			;  
777a			;	push de  
777a			;	pop hl  
777a			;  
777a			;.mmod1: ld a,(hl)   ; get map test  
777a			;	cp b  
777a			;	jr z, .mmod2  
777a			;  
777a			;  
777a			;  
777a			;.mmod2: inc hl    ;   
777a			;  
777a			;	  
777a			;  
777a			;	  
777a			;  
777a			;	ld hl,key_actual_pressed  
777a			;	ld (hl),a,  
777a			;	ret  
777a			  
777a			; map matrix key held to char on face of key  
777a			  
777a			.mtoc:  
777a			  
777a			; test decade counter strobes  
777a			  
777a			;.decadetest1:  
777a			  
777a			; reset counter  
777a			;ld a, 128  
777a			;out (portbdata),a  
777a			  
777a			  
777a			;ld b, 5  
777a			;.dec1:  
777a			;ld a, 0  
777a			;out (portbdata),a  
777a			;call delay1s  
777a			  
777a			;ld a, 32  
777a			;out (portbdata),a  
777a			;call delay1s  
777a			;call delay1s  
777a			;call delay1s  
777a			;  
777a			;ld a, 64+32  
777a			;out (portbdata),a  
777a			;call delay1s  
777a			;;djnz .dec1  
777a			;  
777a			;jp .decadetest1  
777a			  
777a			  
777a			  
777a			  
777a			  
777a			  
777a			  
777a			  
777a			  
777a			  
777a				; scan keyboard matrix and generate raw scan map  
777a cd 0d 78			call matrix  
777d			  
777d				; reuse c bit 0 left modifer button - ie shift  
777d			        ; reuse c bit 1 for right modifer button - ie symbol shift  
777d				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
777d			  
777d 0e 00			ld c, 0  
777f			  
777f				; TODO set flags for modifer key presses   
777f				; TODO do a search for modifer key...  
777f			  
777f				;ld hl,keyscan_table_row4  
777f 21 25 fe			ld hl,keyscan_table_row2  
7782			  
7782 7e				ld a, (hl)  
7783 fe 23			cp '#'  
7785 20 07			jr nz, .nextmodcheck  
7787 cb c1			set 0, c  
7789 21 dd 76			ld hl, .matrix_to_shift  
778c 18 21			jr .dokeymap  
778e				; TODO for now igonre  
778e			.nextmodcheck:  
778e 21 1a fe			ld hl,keyscan_table_row3  
7791			  
7791 7e				ld a, (hl)  
7792 fe 23			cp '#'  
7794 20 07			jr nz, .nextmodcheck2  
7796 cb c9			set 1, c   
7798 21 14 77			ld hl, .matrix_to_symbolshift  
779b 18 12			jr .dokeymap  
779d			.nextmodcheck2:  
779d 21 2e fe			ld hl,keyscan_table_row2+9    ; right shift  
77a0			  
77a0 7e				ld a, (hl)  
77a1 fe 23			cp '#'  
77a3 20 07			jr nz, .donemodcheck  
77a5 cb c9			set 1, c   
77a7 21 dd 76			ld hl, .matrix_to_shift  
77aa 18 03			jr .dokeymap  
77ac			  
77ac				; no modifer found so just map to normal keys  
77ac				; get mtoc map matrix to respective keys  
77ac			;	ld hl, .matrix_to_char  
77ac			;	ld hl, .matrix_to_char  
77ac			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
77ac			;	ld a, KEY_SHIFT  
77ac			;	call findchar  
77ac			;  
77ac			;	; got offset to key modifer in b  
77ac			;  
77ac			;	ld hl,keyscan_table_row5  
77ac			;  
77ac			;	ld a,b  
77ac			;	call addatohl  
77ac			;	ld a,(hl)  
77ac			;  
77ac			;	cp '#'  
77ac			;	jr nz, .nextmodcheck  
77ac			;	set 0, c  
77ac			;	ld hl, .matrix_to_char  
77ac			;	jr .dokeymap  
77ac			;	; TODO for now igonre  
77ac			;.nextmodcheck:  
77ac			;	ld hl, .matrix_to_symbolshift  
77ac			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
77ac			;	ld a, KEY_SYMBOLSHIFT  
77ac			;	call findchar  
77ac			;  
77ac			;  
77ac			;	; got offset to key modifer in b  
77ac			;  
77ac			;	ld hl,keyscan_table_row5  
77ac			;  
77ac			;	ld a,b  
77ac			;	call addatohl  
77ac			;	ld a,(hl)  
77ac			;  
77ac			;	cp '#'  
77ac			;	jr nz, .donemodcheck  
77ac			;	set 1, c   
77ac			;	ld hl, .matrix_to_symbolshift  
77ac			;	jr .dokeymap  
77ac			  
77ac			  
77ac			  
77ac			.donemodcheck:  
77ac				; no modifer found so just map to normal keys  
77ac				; get mtoc map matrix to respective keys  
77ac 21 a6 76			ld hl, .matrix_to_char  
77af			  
77af			.dokeymap:  
77af				;ld (key_fa), c   
77af cd c8 77			call .mapkeys  
77b2			  
77b2			  
77b2			if DEBUG_KEY  
77b2			  
77b2			; Display text on first line  
77b2			            LD   A, kLCD_Line1  
77b2			            CALL fLCD_Pos       ;Position cursor to location in A  
77b2			            LD   DE, keyscan_table_row1  
77b2			            ;LD   DE, MsgHello  
77b2			            CALL fLCD_Str       ;Display string pointed to by DE  
77b2			  
77b2			; Display text on second line  
77b2			            LD   A, kLCD_Line2  
77b2			            CALL fLCD_Pos       ;Position cursor to location in A  
77b2			            LD   DE, keyscan_table_row2  
77b2			            CALL fLCD_Str       ;Display string pointed to by DE  
77b2			            LD   A, kLCD_Line3  
77b2			            CALL fLCD_Pos       ;Position cursor to location in A  
77b2			            LD   DE, keyscan_table_row3  
77b2			            CALL fLCD_Str       ;Display string pointed to by DE  
77b2			            LD   A, kLCD_Line4  
77b2			            CALL fLCD_Pos       ;Position cursor to location in A  
77b2			            LD   DE, keyscan_table_row4  
77b2			            CALL fLCD_Str       ;Display string pointed to by DE  
77b2			            LD   A, kLCD_Line1+10  
77b2			            CALL fLCD_Pos       ;Position cursor to location in A  
77b2			            LD   DE, keyscan_table_row5  
77b2			            CALL fLCD_Str       ;Display string pointed to by DE  
77b2			  
77b2				;call delay250ms  
77b2			endif  
77b2			;	jp testkey  
77b2			  
77b2			; get first char reported  
77b2			  
77b2 21 04 fe			ld hl,keyscan_table_row5  
77b5			  
77b5				;ld b, 46   ; 30 keys to remap + 8 nulls   
77b5 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
77b7			.findkey:  
77b7 7e				ld a,(hl)  
77b8 fe 00			cp 0  
77ba 28 04			jr z, .nextkey  
77bc fe 7e			cp KEY_MATRIX_NO_PRESS  
77be 20 06			jr nz, .foundkey  
77c0			.nextkey:  
77c0 23				inc hl  
77c1 10 f4			djnz .findkey  
77c3 3e 00			ld a,0  
77c5 c9				ret  
77c6			.foundkey:  
77c6 7e				ld a,(hl)  
77c7 c9				ret  
77c8				  
77c8			  
77c8			; convert the raw key map given hl for destination key  
77c8			.mapkeys:  
77c8 11 04 fe			ld de,keyscan_table_row5  
77cb			  
77cb 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
77cd			.remap:  
77cd 1a				ld a,(de)  
77ce fe 23			cp '#'  
77d0 20 02			jr nz, .remapnext  
77d2				;CALLMONITOR  
77d2 7e				ld a,(hl)  
77d3 12				ld (de),a  
77d4			  
77d4			  
77d4			  
77d4			.remapnext:  
77d4 23				inc hl  
77d5 13				inc de  
77d6 10 f5			djnz .remap  
77d8				  
77d8 c9				ret  
77d9			  
77d9			  
77d9			  
77d9			.mtocold2:  
77d9			  
77d9			;	; flag if key D is held down and remove from reporting  
77d9			;	ld bc, .key_map_fd    
77d9			;	ld hl, keyscan_table  
77d9			;	ld de, key_fd  
77d9			;	call .key_shift_hold  
77d9			;	cp 255  
77d9			;	jr z, .cinmap  
77d9			;	; flag if key C is held down and remove from reporting  
77d9			;	ld bc, .key_map_fc    
77d9			;	ld hl, keyscan_table+key_cols  
77d9			;	ld de, key_fc  
77d9			;	call .key_shift_hold  
77d9			;	cp 255  
77d9			;	jr z, .cinmap  
77d9			;	; flag if key B is held down and remove from reporting  
77d9			;	ld bc, .key_map_fb    
77d9			;	ld hl, keyscan_table+(key_cols*2)  
77d9			;	ld de, key_fb  
77d9			;	call .key_shift_hold  
77d9			;	cp 255  
77d9			;	jr z, .cinmap  
77d9			;	; flag if key A is held down and remove from reporting  
77d9			;	ld bc, .key_map_fa    
77d9			;	ld hl, keyscan_table+(key_cols*3)  
77d9			;	ld de, key_fa  
77d9			;	call .key_shift_hold  
77d9			;	cp 255  
77d9			;	jr z, .cinmap  
77d9			  
77d9 11 a6 76			ld de, .matrix_to_char  
77dc			  
77dc			  
77dc			.cinmap1:   
77dc				if DEBUG_KEY  
77dc			            LD   A, kLCD_Line4  
77dc			            CALL fLCD_Pos       ;Position cursor to location in A  
77dc					push de  
77dc			            LD   DE, keyscan_table  
77dc			            CALL fLCD_Str       ;Display string pointed to by DE  
77dc					pop de  
77dc				endif  
77dc			  
77dc				; scan key matrix table for any held key  
77dc			  
77dc				; de holds either the default matrix or one selected above  
77dc			  
77dc 21 d1 fd			ld hl, keyscan_table  
77df 06 32			ld b,key_cols*key_rows  
77e1			  
77e1 7e			.cin11:	ld a,(hl)  
77e2 fe 23			cp '#'  
77e4 28 08			jr z, .cinhit1  
77e6 23				inc hl  
77e7 13				inc de  
77e8 05				dec b  
77e9 20 f6			jr nz, .cin11  
77eb				; no key found held  
77eb 3e 00			ld a,0  
77ed c9				ret  
77ee d5			.cinhit1: push de  
77ef e1				pop hl  
77f0 7e				ld a,(hl)  
77f1 c9				ret  
77f2			  
77f2			; flag a control key is held   
77f2			; hl is key pin, de is flag indicator  
77f2			  
77f2			.key_shift_hold1:  
77f2 c5				push bc  
77f3 3e 01			ld a, 1  
77f5 32 f6 fa			ld (cursor_shape),a  
77f8 06 00			ld b, 0  
77fa 7e				ld a, (hl)  
77fb fe 2e			cp '.'  
77fd 28 0a			jr z, .key_shift11  
77ff 06 ff			ld b, 255  
7801 3e 2b			ld a, '+'    ; hide key from later scans  
7803 77				ld (hl),a  
7804 3e 02			ld a, 2  
7806 32 f6 fa			ld (cursor_shape),a  
7809			.key_shift11:  
7809				; write flag indicator  
7809 78				ld a,b  
780a 12				ld (de),a  
780b			  
780b d1				pop de    ; de now holds the key map ptr  
780c c9				ret  
780d			  
780d				  
780d			  
780d			; scans keyboard matrix and flags key press in memory array	  
780d				  
780d			matrix:  
780d				;call matrix  
780d				; TODO optimise the code....  
780d			  
780d			  
780d			;ld hl, keyscan_table_row1  
780d			;ld de, keyscan_table_row1+1  
780d			;ld bc,46  
780d			;ld a,KEY_MATRIX_NO_PRESS  
780d			;ldir  
780d			  
780d			  
780d			  
780d			; reset counter  
780d 3e 80		ld a, 128  
780f d3 c1		out (portbdata),a  
7811			  
7811 06 0a		ld b, 10  
7813 0e 00		ld c, 0       ; current clock toggle  
7815			  
7815			.colscan:  
7815			  
7815			; set current column  
7815			; disable clock enable and set clock low  
7815			  
7815			;ld a, 0  
7815			;out (portbdata),a  
7815			  
7815			; For each column scan for switches  
7815			  
7815 c5			push bc  
7816 21 c7 fd		ld hl, keyscan_scancol  
7819 cd 22 79		call .rowscan  
781c c1			pop bc  
781d			  
781d			  
781d			; get back current column  
781d			  
781d			; translate the row scan  
781d			  
781d			;   
781d			; row 1  
781d			  
781d 78			ld a,b  
781e			  
781e 21 3a fe		LD   hl, keyscan_table_row1+10  
7821			  
7821 cd f0 0f		call subafromhl  
7824			;call addatohl  
7824			  
7824 11 c7 fd		ld de, keyscan_scancol  
7827			  
7827 1a			ld a,(de)  
7828 77			ld (hl),a  
7829			  
7829			  
7829			  
7829			  
7829			; row 2  
7829			  
7829 78			ld a,b  
782a			  
782a 21 2f fe		LD   hl, keyscan_table_row2+10  
782d			  
782d			;call addatohl  
782d cd f0 0f		call subafromhl  
7830			  
7830			  
7830 11 c8 fd		ld de, keyscan_scancol+1  
7833			  
7833 1a			ld a,(de)  
7834 77			ld (hl),a  
7835			  
7835			  
7835			; row 3  
7835			  
7835 78			ld a,b  
7836			  
7836 21 24 fe		LD   hl, keyscan_table_row3+10  
7839			  
7839			;call addatohl  
7839 cd f0 0f		call subafromhl  
783c			  
783c 11 c9 fd		ld de, keyscan_scancol+2  
783f			  
783f 1a			ld a,(de)  
7840 77			ld (hl),a  
7841			  
7841			  
7841			  
7841			; row 4  
7841			  
7841 78			ld a,b  
7842			  
7842 21 19 fe		LD   hl, keyscan_table_row4+10  
7845			  
7845			;call addatohl  
7845 cd f0 0f		call subafromhl  
7848			  
7848 11 ca fd		ld de, keyscan_scancol+3  
784b			  
784b 1a			ld a,(de)  
784c 77			ld (hl),a  
784d			  
784d			; row 5  
784d			  
784d 78			ld a,b  
784e			  
784e 21 0e fe		LD   hl, keyscan_table_row5+10  
7851			  
7851			;call addatohl  
7851 cd f0 0f		call subafromhl  
7854			  
7854 11 cb fd		ld de, keyscan_scancol+4  
7857			  
7857 1a			ld a,(de)  
7858 77			ld (hl),a  
7859			  
7859			; handshake next column  
7859			  
7859			  
7859 3e 40		ld a, 64  
785b d3 c1		out (portbdata),a  
785d			  
785d 3e 00		ld a, 0  
785f d3 c1		out (portbdata),a  
7861			  
7861			; toggle clk and move to next column  
7861			;ld a, 64  
7861			;cp c  
7861			;  
7861			;jr z, .coltoglow  
7861			;ld c, a  
7861			;jr .coltog  
7861			;.coltoglow:  
7861			;ld c, 0  
7861			;.coltog:  
7861			;ld a, c  
7861			;out (portbdata),a  
7861			  
7861 10 b2		djnz .colscan  
7863			  
7863 3e 0a		ld a,10  
7865 21 30 fe		LD   hl, keyscan_table_row1  
7868 cd de 0f		call addatohl  
786b 3e 00		ld a, 0  
786d 77			ld (hl), a  
786e			  
786e			  
786e 3e 0a		ld a,10  
7870 21 25 fe		LD   hl, keyscan_table_row2  
7873 cd de 0f		call addatohl  
7876 3e 00		ld a, 0  
7878 77			ld (hl), a  
7879			  
7879 3e 0a		ld a,10  
787b 21 1a fe		LD   hl, keyscan_table_row3  
787e cd de 0f		call addatohl  
7881 3e 00		ld a, 0  
7883 77			ld (hl), a  
7884			  
7884 3e 0a		ld a,10  
7886 21 0f fe		LD   hl, keyscan_table_row4  
7889 cd de 0f		call addatohl  
788c 3e 00		ld a, 0  
788e 77			ld (hl), a  
788f			  
788f 3e 0a		ld a,10  
7891 21 04 fe		LD   hl, keyscan_table_row5  
7894 cd de 0f		call addatohl  
7897 3e 00		ld a, 0  
7899 77			ld (hl), a  
789a			  
789a			if DEBUG_KEY_MATRIX  
789a			  
789a			; Display text on first line  
789a			            LD   A, kLCD_Line1  
789a			            CALL fLCD_Pos       ;Position cursor to location in A  
789a			            LD   DE, keyscan_table_row1  
789a			            ;LD   DE, MsgHello  
789a			            CALL fLCD_Str       ;Display string pointed to by DE  
789a			  
789a			; Display text on second line  
789a			            LD   A, kLCD_Line2  
789a			            CALL fLCD_Pos       ;Position cursor to location in A  
789a			            LD   DE, keyscan_table_row2  
789a			            CALL fLCD_Str       ;Display string pointed to by DE  
789a			            LD   A, kLCD_Line3  
789a			            CALL fLCD_Pos       ;Position cursor to location in A  
789a			            LD   DE, keyscan_table_row3  
789a			            CALL fLCD_Str       ;Display string pointed to by DE  
789a			            LD   A, kLCD_Line4  
789a			            CALL fLCD_Pos       ;Position cursor to location in A  
789a			            LD   DE, keyscan_table_row4  
789a			            CALL fLCD_Str       ;Display string pointed to by DE  
789a			            LD   A, kLCD_Line4+10  
789a			            CALL fLCD_Pos       ;Position cursor to location in A  
789a			            LD   DE, keyscan_table_row5  
789a			            CALL fLCD_Str       ;Display string pointed to by DE  
789a			  
789a			;call delay250ms  
789a				jp matrix  
789a			endif  
789a c9			ret  
789b			  
789b			; using decade counter....  
789b			  
789b			  
789b			; TODO reset decade counter to start of scan  
789b			  
789b			; reset 15  
789b			; clock 14  
789b			; ce 13  
789b			  
789b			; 1 - q5  
789b			; 2 - q1  
789b			; 3 - q0  
789b			; 4 - q2  
789b			; 5 - q6  
789b			; 6 - q7  
789b			; 7 - q3  
789b			; 8 - vss  
789b			; 9 - q8  
789b			; 10 - q4  
789b			; 11 - q9  
789b			; 12 - cout  
789b			; 16 - vdd  
789b			  
789b			; clock      ce       reset     output  
789b			; 0          x        0         n  
789b			; x          1        0         n  
789b			; x          x        1         q0  
789b			; rising     0        0         n+1  
789b			; falling    x        0         n  
789b			; x          rising   0         n  
789b			; 1          falling  0         x+1  
789b			;  
789b			; x = dont care, if n < 5 carry = 1 otherwise 0  
789b			  
789b			;   
789b			; reset   
789b			; 13=0, 14=0, 15=1 .. 15=0  
789b			;  
789b			; handshake line  
789b			; 14=1.... read line 14=0  
789b			  
789b			  
789b			  
789b			  
789b			  
789b			; TODO hand shake clock for next column scan  
789b			; TODO detect each row  
789b			  
789b			  
789b			  
789b			  
789b			; reset 128  
789b			; clock 64  
789b			; ce 32  
789b			  
789b			  
789b			.cyclestart:  
789b			  
789b			; reset counter  
789b 3e 80		ld a, 128  
789d d3 c1		out (portbdata),a  
789f			  
789f			; loop leds  
789f 06 0a		ld b,10  
78a1			  
78a1			.cycle1:  
78a1 c5			push bc  
78a2 3e 00		ld a, 0  
78a4 d3 c1		out (portbdata),a  
78a6 cd e1 0c		call delay250ms  
78a9			  
78a9 3e 40		ld a, 64  
78ab d3 c1		out (portbdata),a  
78ad cd e1 0c		call delay250ms  
78b0			  
78b0 3e 00		ld a, 0  
78b2 d3 c1		out (portbdata),a  
78b4 cd e1 0c		call delay250ms  
78b7			  
78b7 c1			pop bc  
78b8 10 e7		djnz .cycle1  
78ba			  
78ba			  
78ba 18 df		jr .cyclestart  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			; map matrix key held to char on face of key  
78bc			  
78bc			;.mtocold:  
78bc			;  
78bc			;  
78bc			;; reset counter  
78bc			;ld a, 128  
78bc			;out (portbdata),a  
78bc			;  
78bc			;  
78bc			;; scan keyboard row 1  
78bc			;ld a, 0  
78bc			;out (portbdata),a  
78bc			;;ld a, 64  
78bc			;;out (portbdata),a  
78bc			;  
78bc			;  
78bc			;	ld a, 128  
78bc			;	ld hl, keyscan_table  
78bc			;	call .rowscan  
78bc			;  
78bc			;;ld a, 0  
78bc			;;out (portbdata),a  
78bc			;ld a, 64  
78bc			;out (portbdata),a  
78bc			;  
78bc			;	ld a, 64  
78bc			;	ld hl, keyscan_table+key_cols  
78bc			;	call .rowscan  
78bc			;  
78bc			;ld a, 0  
78bc			;out (portbdata),a  
78bc			;;ld a, 64  
78bc			;;out (portbdata),a  
78bc			;	ld a, 32  
78bc			;	ld hl, keyscan_table+(key_cols*2)  
78bc			;	call .rowscan  
78bc			;  
78bc			;  
78bc			;;ld a, 0  
78bc			;;out (portbdata),a  
78bc			;ld a, 64  
78bc			;out (portbdata),a  
78bc			;  
78bc			;	ld a, 16  
78bc			;	ld hl, keyscan_table+(key_cols*3)  
78bc			;	call .rowscan  
78bc			;  
78bc			;  
78bc			;	; flag if key D is held down and remove from reporting  
78bc			;	ld bc, .key_map_fd    
78bc			;	ld hl, keyscan_table  
78bc			;	ld de, key_fd  
78bc			;	call .key_shift_hold  
78bc			;	cp 255  
78bc			;	jr z, .cinmap  
78bc			;	; flag if key C is held down and remove from reporting  
78bc			;	ld bc, .key_map_fc    
78bc			;	ld hl, keyscan_table+key_cols  
78bc			;	ld de, key_fc  
78bc			;	call .key_shift_hold  
78bc			;	cp 255  
78bc			;	jr z, .cinmap  
78bc			;	; flag if key B is held down and remove from reporting  
78bc			;	ld bc, .key_map_fb    
78bc			;	ld hl, keyscan_table+(key_cols*2)  
78bc			;	ld de, key_fb  
78bc			;	call .key_shift_hold  
78bc			;	cp 255  
78bc			;	jr z, .cinmap  
78bc			;	; flag if key A is held down and remove from reporting  
78bc			;	ld bc, .key_map_fa    
78bc			;	ld hl, keyscan_table+(key_cols*3)  
78bc			;	ld de, key_fa  
78bc			;	call .key_shift_hold  
78bc			;	cp 255  
78bc			;	jr z, .cinmap  
78bc			;  
78bc			;	ld de, .matrix_to_char  
78bc			;  
78bc			;  
78bc			;.cinmap:   
78bc			;	if DEBUG_KEY  
78bc			;            LD   A, kLCD_Line4  
78bc			;            CALL fLCD_Pos       ;Position cursor to location in A  
78bc			;		push de  
78bc			;            LD   DE, keyscan_table  
78bc			;            CALL fLCD_Str       ;Display string pointed to by DE  
78bc			;		pop de  
78bc			;	endif  
78bc			  
78bc				; scan key matrix table for any held key  
78bc			  
78bc				; de holds either the default matrix or one selected above  
78bc			  
78bc			;	ld hl, keyscan_table  
78bc			;	ld b,key_cols*key_rows  
78bc			;  
78bc			;.cin1:	ld a,(hl)  
78bc			;	cp '#'  
78bc			;	jr z, .cinhit  
78bc			;	inc hl  
78bc			;	inc de  
78bc			;	dec b  
78bc			;	jr nz, .cin1  
78bc			;	; no key found held  
78bc			;	ld a,0  
78bc			;	ret  
78bc			;.cinhit: push de  
78bc			;	pop hl  
78bc			;	ld a,(hl)  
78bc			;	ret  
78bc			  
78bc			; flag a control key is held   
78bc			; hl is key pin, de is flag indicator  
78bc			  
78bc			;.key_shift_hold:  
78bc			;	push bc  
78bc			;	ld a, 1  
78bc			;	ld (cursor_shape),a  
78bc			;	ld b, 0  
78bc			;	ld a, (hl)  
78bc			;	cp '.'  
78bc			;	jr z, .key_shift1  
78bc			;	ld b, 255  
78bc			;	ld a, '+'    ; hide key from later scans  
78bc			;	ld (hl),a  
78bc			;	ld a, 2  
78bc			;	ld (cursor_shape),a  
78bc			;.key_shift1:  
78bc			;	; write flag indicator  
78bc			;	ld a,b  
78bc			;	ld (de),a  
78bc			;  
78bc			;	pop de    ; de now holds the key map ptr  
78bc			;	ret  
78bc			  
78bc				  
78bc				  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			;	push hl  
78bc			;	push de  
78bc			;	push bc  
78bc			;	call keyscan  
78bc			;	; map key matrix to ascii value of key face  
78bc			;  
78bc			;	ld hl, key_face_map  
78bc			;	ld de, keyscan_table  
78bc			;  
78bc			;	; get how many keys to look at  
78bc			;	ld b, keyscan_table_len  
78bc			;	  
78bc			;  
78bc			;	; at this stage fall out on first key hit  
78bc			;	; TODO handle multiple key press  
78bc			;  
78bc			;map1:	ld a,(hl)  
78bc			;	cp '#'  
78bc			;	jr z, keyhit  
78bc			;	inc hl  
78bc			;	inc de  
78bc			;	dec b  
78bc			;	jr nz, map1  
78bc			;nohit:	ld a, 0  
78bc			;	jr keydone  
78bc			;keyhit: push de  
78bc			;	pop hl  
78bc			;	ld a,(hl)  
78bc			;keydone:  
78bc			;	push bc  
78bc			;	push de  
78bc			; 	push hl  
78bc			;	ret   
78bc			;  
78bc			  
78bc			  
78bc			  
78bc			  
78bc			; scan physical key matrix  
78bc			  
78bc			  
78bc			;keyscan:  
78bc			;  
78bc			;; for each key_row use keyscanr bit mask for out  
78bc			;; then read in for keyscanc bitmask  
78bc			;; save result of row scan to keyscantable  
78bc			;  
78bc			;; scan keyboard row 1  
78bc			;  
78bc			;	ld b, key_rows  
78bc			;	ld hl, key_scanr  
78bc			;	ld de, keyscan_table  
78bc			;  
78bc			;rowloop:  
78bc			;  
78bc			;	ld a,(hl)		; out bit mask to energise keyboard row  
78bc			;	call rowscan  
78bc			;	inc hl  
78bc			;	dec b  
78bc			;	jr nz, rowloop  
78bc			;  
78bc			;	ret  
78bc			;  
78bc			;  
78bc			;; pass a out bitmask, b row number  
78bc			;arowscan:   
78bc			;	push bc  
78bc			;  
78bc			;	ld d, b  
78bc			;  
78bc			;	; calculate buffer location for this row  
78bc			;  
78bc			;	ld hl, keyscan_table	  
78bc			;kbufr:  ld e, key_cols  
78bc			;kbufc:	inc hl  
78bc			;	dec e  
78bc			;	jr nz, kbufc  
78bc			;	dec d  
78bc			;	jr nz, kbufr  
78bc			;  
78bc			;	; energise row and read columns  
78bc			;  
78bc			;	out (portbdata),a  
78bc			;	in a,(portbdata)  
78bc			;	ld c,a  
78bc			;  
78bc			;  
78bc			;	; save buffer loc  
78bc			;  
78bc			;	ld (keybufptr), hl  
78bc			;  
78bc			;	ld hl, key_scanc  
78bc			;	ld d, key_cols  
78bc			;  
78bc			;	; for each column check each bit mask  
78bc			;  
78bc			;colloop:  
78bc			;	  
78bc			;  
78bc			;	; reset flags for the row   
78bc			;  
78bc			;	ld b,'.'  
78bc			;	and (hl)  
78bc			;	jr z, maskskip  
78bc			;	ld b,'#'  
78bc			;maskskip:  
78bc			;	; save  key state  
78bc			;	push hl  
78bc			;	ld hl, (keybufptr)  
78bc			;	ld (hl), b  
78bc			;	inc hl  
78bc			;	ld (keybufptr), hl  
78bc			;  
78bc			;	; move to next bit mask  
78bc			;	pop hl  
78bc			;	inc hl  
78bc			;  
78bc			;	dec d  
78bc			;	jr nz, colloop  
78bc			;  
78bc			;	ret  
78bc			;  
78bc			;  
78bc			;;  
78bc			; lcd functions  
78bc			;  
78bc			;  
78bc			  
78bc			;if DEBUG_KEY_MATRIX  
78bc			  
78bc			; test function to display hardware view of matrix state  
78bc			  
78bc			matrixold:  
78bc			  
78bc			  
78bc			  
78bc			; reset counter  
78bc 3e 80		ld a, 128  
78be d3 c1		out (portbdata),a  
78c0			; scan keyboard row 1  
78c0 3e 00		ld a, 0  
78c2 d3 c1		out (portbdata),a  
78c4			;ld a, 64  
78c4			;out (portbdata),a  
78c4 3e 80			ld a, 128  
78c6 21 30 fe			ld hl, keyscan_table_row1  
78c9 cd 22 79			call .rowscan  
78cc			  
78cc			;ld a, 0  
78cc			;out (portbdata),a  
78cc 3e 40		ld a, 64  
78ce d3 c1		out (portbdata),a  
78d0 3e 40			ld a, 64  
78d2 21 25 fe			ld hl, keyscan_table_row2  
78d5 cd 22 79			call .rowscan  
78d8			  
78d8 3e 00		ld a, 0  
78da d3 c1		out (portbdata),a  
78dc			;ld a, 64  
78dc			;out (portbdata),a  
78dc 3e 20			ld a, 32  
78de 21 1a fe			ld hl, keyscan_table_row3  
78e1 cd 22 79			call .rowscan  
78e4			  
78e4			;ld a, 0  
78e4			;out (portbdata),a  
78e4 3e 40		ld a, 64  
78e6 d3 c1		out (portbdata),a  
78e8 3e 10			ld a, 16  
78ea 21 0f fe			ld hl, keyscan_table_row4  
78ed cd 22 79			call .rowscan  
78f0			  
78f0			; Display text on first line  
78f0 3e 00		            LD   A, kLCD_Line1  
78f2 cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
78f5 11 30 fe		            LD   DE, keyscan_table_row1  
78f8			            ;LD   DE, MsgHello  
78f8 cd 42 75		            CALL fLCD_Str       ;Display string pointed to by DE  
78fb			  
78fb			; Display text on second line  
78fb 3e 28		            LD   A, kLCD_Line2  
78fd cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
7900 11 25 fe		            LD   DE, keyscan_table_row2  
7903 cd 42 75		            CALL fLCD_Str       ;Display string pointed to by DE  
7906 3e 50		            LD   A, kLCD_Line3  
7908 cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
790b 11 1a fe		            LD   DE, keyscan_table_row3  
790e cd 42 75		            CALL fLCD_Str       ;Display string pointed to by DE  
7911 3e 78		            LD   A, kLCD_Line4  
7913 cd 20 75		            CALL fLCD_Pos       ;Position cursor to location in A  
7916 11 0f fe		            LD   DE, keyscan_table_row4  
7919 cd 42 75		            CALL fLCD_Str       ;Display string pointed to by DE  
791c			  
791c cd e1 0c			call delay250ms  
791f c3 0d 78			jp matrix  
7922			  
7922			; pass de as row display flags  
7922			.rowscan:   
7922			;	out (portbdata),a  
7922 db c1			in a,(portbdata)  
7924 4f				ld c,a  
7925				; reset flags for the row   
7925 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7927 e6 01			and 1  
7929 28 02			jr z, .p1on  
792b 06 23			ld b,'#'  
792d			.p1on:  
792d 70				ld (hl), b  
792e 23				inc hl  
792f			  
792f 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7931 79				ld a,c  
7932 e6 02			and 2  
7934			;	bit 0,a  
7934 28 02			jr z, .p2on  
7936 06 23			ld b,'#'  
7938			.p2on:  
7938 70				ld (hl), b  
7939 23				inc hl  
793a			;  
793a 06 7e			ld b,KEY_MATRIX_NO_PRESS  
793c 79				ld a,c  
793d e6 04			and 4  
793f			;;	bit 0,a  
793f 28 02			jr z, .p3on  
7941 06 23			ld b,'#'  
7943			.p3on:  
7943 70				ld (hl), b  
7944 23				inc hl  
7945			;;  
7945 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7947			;;	bit 0,a  
7947 79				ld a,c  
7948 e6 08			and 8  
794a 28 02			jr z, .p4on  
794c 06 23			ld b,'#'  
794e			.p4on:  
794e 70				ld (hl), b  
794f 23				inc hl  
7950			  
7950 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7952			;;	bit 0,a  
7952 79				ld a,c  
7953 e6 10			and 16  
7955 28 02			jr z, .p5on  
7957 06 23			ld b,'#'  
7959			.p5on:  
7959 70				ld (hl), b  
795a 23				inc hl  
795b			; zero term  
795b 06 00			ld b,0  
795d 70				ld (hl), b  
795e			  
795e c9			.rscandone: ret  
795f			  
795f			;addatohl:  
795f			;  
795f			 ;add   a, l    ; A = A+L  
795f			  ;  ld    l, a    ; L = A+L  
795f			   ; adc   a, h    ; A = A+L+H+carry  
795f			   ; sub   l       ; A = H+carry  
795f			   ; ld    h, a    ; H = H+carry  
795f			  
795f			;ret  
795f			; eof  
# End of file firmware_key_5x10.asm
795f			;include "firmware_key_4x10.asm" 
795f			 
795f			heap_size:    equ heap_end - heap_start 
795f			;eof 
# End of file os_mega.asm
795f
