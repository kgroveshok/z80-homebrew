# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_cpm.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 1 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; Use this to tune the delay functions if your CPU is a bit quick. i.e. RunCPM on a PC 
0000			 
0000			CPM_DELAY_TUNE: equ 4000 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0100			endif 
0100 c3 7c 17			jp coldstart     ; rst 0 - cold boot 
0103			 
0103			 
0103 ..			buildtime: db   "Build: " 
010a					include "romtimestamp.asm" 
010a ..			db '2025-09-06 14:50' 
# End of file romtimestamp.asm
011a 00				   db 0 
011b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
011f			 
011f			 
011f			 
011f			;        nop  
011f			;        nop 
011f			;;	org 05h		; null out bdos call 
011f			; 
011f			;        nop  
011f			;        nop  
011f			;        nop 
011f			;;	org 08h 
011f			;;; 
011f			;;	jp cin		; rst 8 - char in 
011f			;;; 
011f			; 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;	org 010h 
011f			;; 
011f			;	jp cout		; rest 010h  - char out 
011f			;; 
011f			;	org 01bh   
011f			; 
011f			;	;jp  		; rst 01bh   - write string to display 
011f			;	jp str_at_display 
011f			; 
011f			; 
011f			;	org 020h 
011f			; 
011f			;	; jp		 ; rst 020h - read char at screen location 
011f			; 
011f			;	org 028h 
011f			 
011f				; jp		 ; rst 028h  - storage i/o 
011f			 
011f			; 	org 030h 
011f			;	jp break_point_state 
011f			  
011f			; $30  
011f			; org 038h 
011f			; $38 
011f			 
011f			; TODO any more important entry points to add to jump table for easier coding use? 
011f			 
011f			if BASE_KEV = 1  
011f			 
011f				; need to be at $66 for nmi support 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255 
011f				jp nmi 
011f			endif 
011f			 
011f			include "firmware.asm" 
011f			  
011f			; main constants (used here and in firmware)  
011f			  
011f			; TODO have page 0 of storage as bios  
011f			  
011f			Device_A: equ 0h  
011f			Device_B: equ 040h          ; Sound  
011f			  
011f			if BASE_KEV  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_SC114  
011f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			; TODO fixup for CPM  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			Device_D: equ 0c0h             ; Keyboard and LCD  
011f			  
011f			; Odd specific debug points for testing hardware dev  
011f			  
011f			;if DEBUG_LEVEL0  
011f			;	include "debug_level0.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL1  
011f			;	include "debug_level1.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL2  
011f			;	include "debug_level2.asm"  
011f			;endif  
011f			  
011f			  
011f			CALLMONITOR: macro  
011f			;	call break_point_state  
011f			; now use the break point debug vector  
011f				call debug_vector  
011f				endm  
011f			  
011f			MALLOC_1: equ 1        ; from dk88   
011f			MALLOC_2: equ 0           ; broke  
011f			MALLOC_3: equ 0           ; really broke  
011f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
011f			  
011f			if BASE_KEV   
011f			;stacksize: equ 256  
011f			; each stack entry is three bytes (type + word)  
011f			stacksize: equ 3*150  
011f			  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 512  
011f			endif  
011f			if BASE_SC114  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			;if STORAGE_SE == 0  
011f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
011f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
011f			;endif  
011f			  
011f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
011f			  
011f			STORE_0_AUTORUN: equ $20  
011f			  
011f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
011f			  
011f			STORE_0_AUTOFILE: equ $21  
011f			STORE_0_BANKRUN: equ $23  
011f			STORE_0_FILERUN: equ $24  
011f			  
011f			; Block 0 offsets for settings  
011f			  
011f			; if set then skip prompt for start up and accept all  
011f			  
011f			STORE_0_QUICKSTART: equ $25  
011f			  
011f			; Blocks where directory table is held  
011f			  
011f			; Reducing the number of entries increases the max file size  
011f			  
011f			;STORE_DIR_START: equ 1  
011f			;STORE_DIR_END: equ 33  
011f			  
011f			; Blocks from where file data is stored  
011f			  
011f			;STORE_DATA_START: equ STORE_DIR_END + 1  
011f			  
011f			; Block indicators (<32 are data files)  
011f			  
011f			;STORE_BLOCK_CFG: equ $8f       ; config block  
011f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
011f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
011f			;STORE_BLOCK_FREE: equ $85       ; data block free  
011f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
011f			  
011f			  
011f			  
011f			; Directory entry flags  
011f			  
011f			;STORE_DIR_FREE: equ 0  
011f			;STORE_DIR_FILE:  equ 1  
011f			  
011f			; Structure offsets to directory entries  
011f			;STORE_DE_FLAG: equ 0  
011f			;STORE_DE_MAXEXT: equ 1  
011f			;STORE_DE_FILENAME: equ 2  
011f			  
011f			; Structure offsets to block 0  
011f			  
011f			;STORE_BK0_ISFOR: equ 1  
011f			;STORE_BK0_LABEL: equ 3  
011f			  
011f			; memory allocation   
011f			  
011f			chk_stund: equ tos+2           ; underflow check word  
011f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
011f			  
011f			; keyscan table needs rows x cols buffer  
011f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
011f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
011f			  
011f			keyscan_table_row1: equ chk_stovr -key_cols-1  
011f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
011f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
011f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
011f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
011f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
011f			keyscan_scancol: equ keyscan_table-key_cols  
011f			;keyscan_table_len: equ key_rows*key_cols  
011f			;keybufptr: equ keyscan_table - 2  
011f			;keysymbol: equ keybufptr - 1  
011f			key_held: equ keyscan_scancol-1	; currently held  
011f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
011f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
011f			key_fa: equ key_repeat_ct -1 ;  
011f			key_fb: equ key_fa -1 ;  
011f			key_fc: equ key_fb -1 ;  
011f			key_fd: equ key_fc -1 ;  
011f			key_face_held: equ key_fd - 1   
011f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
011f			  
011f			hardware_config: equ key_face_held - 10  
011f			  
011f			; hardware config switches  
011f			; TODO add bitmasks on includes for hardware  
011f			; high byte for expansion ids  
011f			;     0000 0000  no card inserted  
011f			;     0000 0001  storage card inserted  
011f			;     0000 0010  spi sd card active  
011f			  
011f			;       
011f			; low byte:  
011f			;     0000 0001   4x4 keypad  
011f			;     0000 0010   full keyboard  
011f			;     0000 0011   spi/ext keyboard  
011f			;     0000 0100   20x4 lcd  
011f			;     0000 1000   40x4 lcd  
011f			;     0000 1100   spi/ext display  
011f			;     0001 0000   ide interface available  
011f			  
011f			hardware_word: equ hardware_config - 2  
011f			  
011f			; debug marker - optional display of debug point on the debug screens  
011f			  
011f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
011f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
011f			  
011f			debug_umark: equ debug_vector - 6  ; current user mark  
011f			debug_mark: equ debug_umark - 4    ; internal word debug points  
011f			  
011f			; input_str vars  
011f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
011f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
011f			input_size: equ input_start -1  ; number of chars  
011f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
011f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
011f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
011f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
011f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
011f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
011f			input_len: equ input_cur_onoff - 5 ; length of current input  
011f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
011f			  
011f			; cursor blink rate  
011f			CUR_BLINK_RATE: equ $09  
011f			;CUR_BLINK_RATE: equ 15  
011f			  
011f			key_actual_pressed: equ input_cursor - 1   
011f			key_symbol: equ key_actual_pressed - 1   
011f			key_shift: equ key_symbol - 1   
011f			  
011f			; Display allocation  
011f			  
011f			;display_rows: equ 4     ; move out to mini and mega files  
011f			;display_cols: equ 20  
011f			  
011f			display_fb_len: equ display_rows*display_cols  
011f			  
011f			; primary frame buffer     
011f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
011f			; working frame buffers  
011f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
011f			display_fb3: equ  display_fb1-display_fb_len - 1  
011f			display_fb2: equ  display_fb3-display_fb_len - 1  
011f			;  
011f			; pointer to active frame buffer  
011f			display_fb_active: equ display_fb2 - 2  
011f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
011f			display_write_tmp: equ display_lcde1e2 - 2  
011f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
011f			  
011f			;  
011f			  
011f			;; can load into de directory  
011f			cursor_col: equ display_active-1  
011f			cursor_row: equ cursor_col-1  
011f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
011f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
011f			  
011f			; maths vars  
011f			  
011f			LFSRSeed: equ cursor_shape -20   
011f			randData: equ LFSRSeed - 2  
011f			xrandc: equ randData - 2  
011f			stackstore: equ xrandc - 2  
011f			seed1: equ  stackstore -2   
011f			seed2: equ seed1 - 2  
011f			  
011f			; cf storage vars  
011f			  
011f			iErrorNum:  equ seed2-1         ;Error number  
011f			iErrorReg:  equ iErrorNum -1              ;Error register  
011f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
011f			  
011f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
011f			  
011f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
011f			  
011f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
011f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
011f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
011f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
011f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
011f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
011f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
011f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
011f			store_tmpid: equ store_tmp3 - 1		; page temp id  
011f			store_tmpext: equ store_tmpid - 1		; file extent temp  
011f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
011f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
011f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
011f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
011f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
011f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
011f			;  
011f			; spi vars  
011f			  
011f			  
011f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
011f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
011f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
011f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
011f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
011f			spi_device_id: equ spi_device - 1    ; human readable bank number  
011f			  
011f			;;;;; forth cli params  
011f			  
011f			; TODO use a different frame buffer for forth???  
011f			  
011f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
011f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
011f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
011f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
011f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
011f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
011f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
011f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
011f			  
011f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
011f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
011f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
011f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
011f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
011f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
011f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
011f			  
011f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
011f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
011f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
011f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
011f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
011f			  
011f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
011f			  
011f			; os/forth token vars  
011f			  
011f			os_last_cmd: equ os_var_array-255  
011f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
011f			os_current_i: equ os_cli_cmd-2  
011f			os_cur_ptr: equ os_current_i-2  
011f			os_word_scratch: equ os_cur_ptr-30  
011f			os_tok_len: equ os_word_scratch - 2  
011f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
011f			os_tok_malloc: equ os_tok_ptr - 2  
011f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
011f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
011f			execscratch: equ os_input-255        ; exec cmd eval buffer  
011f			scratch: equ execscratch-255  
011f			  
011f			os_stack_1: equ scratch - 3       ; stack holding area 1  
011f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
011f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
011f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
011f			  
011f			  
011f			; temp locations for new word processing to save on adding more   
011f			  
011f			os_new_malloc: equ os_stack_4-2  
011f			os_new_parse_len: equ os_new_malloc - 2  
011f			os_new_word_len: equ os_new_parse_len - 2  
011f			os_new_work_ptr: equ os_new_word_len - 2  
011f			os_new_src_ptr: equ os_new_work_ptr - 2  
011f			os_new_exec: equ os_new_src_ptr - 2  
011f			os_new_exec_ptr: equ os_new_exec - 2  
011f			  
011f			; resume memory alloocations....  
011f			  
011f			;os_view_disable: equ os_new_exec_ptr - 1  
011f			os_view_af: equ os_new_exec_ptr - 2  
011f			os_view_hl: equ os_view_af -2  
011f			os_view_de: equ os_view_hl - 2  
011f			os_view_bc: equ os_view_de - 2  
011f			  
011f			; stack checksum word  
011f			if DEBUG_STACK_IMB  
011f				curframe: equ  os_view_de - 5  
011f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
011f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			else  
011f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			endif  
011f			  
011f			; with data stack could see memory filled with junk. need some memory management   
011f			; malloc and free entry points added  
011f			  
011f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
011f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			;heap_end: equ free_list-1  ; Starting address of heap  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			heap_end: equ chk_word-1  ; Starting address of heap  
011f			  
011f			  
011f			;if BASE_KEV   
011f			;heap_start: equ 0800eh  ; Starting address of heap  
011f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;heap_start: equ baseram+15  ; Starting address of heap  
011f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;endif  
011f			  
011f			  
011f			;;;;  
011f			  
011f			  
011f			; change below to point to last memory alloc above  
011f			topusermem:  equ   heap_start  
011f			  
011f			;if BASE_KEV   
011f			;baseusermem: equ 08000h  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;;aseusermem:     equ    12  
011f			;baseusermem:     equ    prompt  
011f			;;baseusermem:     equ    endofcode  
011f			;endif  
011f			  
011f			  
011f			; **********************************************************************  
011f			; **  Constants  
011f			; **********************************************************************  
011f			  
011f			; Constants used by this code module  
011f			kDataReg:   EQU Device_D           ;PIO port A data register  
011f			kContReg:   EQU Device_D+2           ;PIO port A control register  
011f			  
011f			  
011f			portbdata:  equ Device_D+1    ; port b data  
011f			portbctl:   equ Device_D+3    ; port b control  
011f			  
011f			  
011f			;KEY_SHIFT:   equ 5  
011f			;KEY_SYMBOLSHIFT:  equ 6  
011f			  
011f			KEY_SHIFTLOCK: equ 4  
011f			  
011f			  
011f			KEY_UP: equ 5  
011f			KEY_NEXTWORD: equ 6  
011f			KEY_PREVWORD: equ 7  
011f			KEY_BS: equ 8  
011f			KEY_TAB:  equ 9  
011f			KEY_DOWN: equ 10  
011f			KEY_LEFT: equ 11  
011f			KEY_RIGHT: equ 12  
011f			KEY_CR:   equ 13  
011f			KEY_HOME: equ 14  
011f			KEY_END: equ 15  
011f			  
011f			KEY_F1: equ 16  
011f			KEY_F2: equ 17  
011f			KEY_F3: equ 18  
011f			KEY_F4: equ 19  
011f			  
011f			KEY_F5: equ 20  
011f			KEY_F6: equ 21  
011f			KEY_F7: equ 22  
011f			KEY_F8: equ 23  
011f			  
011f			KEY_F9: equ 24  
011f			KEY_F10: equ 25  
011f			KEY_F11: equ 26  
011f			KEY_F12: equ 27  
011f			  
011f			;if DEBUG_KEY  
011f			;	KEY_MATRIX_NO_PRESS: equ '.'  
011f			;	KEY_SHIFT:   equ '.'  
011f			;	KEY_SYMBOLSHIFT:  equ '.'  
011f			;else  
011f				KEY_SHIFT:   equ '~'  
011f				KEY_SYMBOLSHIFT:  equ '~'  
011f				KEY_MATRIX_NO_PRESS: equ '~'  
011f			;endi  
011f			  
011f			  
011f			  
011f			  
011f			; Macro to make adding debug marks easier  
011f			  
011f			DMARK: macro str  
011f				push af  
011f				ld a, (.dmark)  
011f				ld (debug_mark),a  
011f				ld a, (.dmark+1)  
011f				ld (debug_mark+1),a  
011f				ld a, (.dmark+2)  
011f				ld (debug_mark+2),a  
011f				jr .pastdmark  
011f			.dmark: db str  
011f			.pastdmark: pop af  
011f			  
011f			endm  
011f			  
011f			  
011f			; macro to detect for stack imbalances  
011f			  
011f			include "stackimbal.asm"  
011f			; Macro and code to detect stock imbalances 
011f			 
011f			SPPUSH: equ 0 
011f			 
011f			; Add a stack frame which can be checked before return 
011f			 
011f			STACKFRAME: macro onoff frame1 frame2 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f						exx 
011f			 
011f						ld de, frame1 
011f						ld a, d 
011f						ld hl, curframe 
011f						call hexout 
011f						ld a, e 
011f						ld hl, curframe+2 
011f						call hexout 
011f			  
011f						ld hl, frame1 
011f						push hl 
011f						ld hl, frame2 
011f						push hl 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			endm 
011f			 
011f			STACKFRAMECHK: macro onoff frame1 frame2 
011f			 
011f					 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						exx 
011f						; check stack frame SP 
011f			 
011f						ld hl, frame2 
011f						pop de   ; frame2 
011f			 
011f						call cmp16 
011f						jr nz, .spnosame 
011f						 
011f			 
011f						ld hl, frame1 
011f						pop de   ; frame1 
011f			 
011f						call cmp16 
011f						jr z, .spfrsame 
011f			 
011f						.spnosame: call showsperror 
011f			 
011f						.spfrsame: nop 
011f			 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			 
011f			 
011f			endm 
011f			 
011f			 
011f			; for a sub routine, wrap SP collection and comparisons 
011f			 
011f			; Usage: 
011f			; 
011f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
011f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
011f			 
011f			SAVESP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f			 
011f						ld (store_sp+(storeword*4)), sp 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			CHECKSP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f			 
011f						; save SP after last save 
011f				 
011f						ld (store_sp+(storeword*4)+2), sp 
011f			 
011f						push hl 
011f						ld hl, store_sp+(storeword*4) 
011f						call check_stack_sp  
011f						pop hl 
011f			 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			if DEBUG_STACK_IMB 
011f			 
011f			check_stack_sp: 
011f					push de 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					push de 
011f			 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					pop hl 
011f			 
011f			 
011f					; check to see if the same 
011f			 
011f					call cmp16 
011f					jr z, .spsame 
011f			 
011f					; not same 
011f			 
011f					call showsperror 
011f			.spsame: 
011f			 
011f					pop de 
011f			 
011f					ret 
011f			 
011f			.sperr:  db "Stack imbalance",0 
011f			 
011f			 
011f			showsperror: 
011f			 
011f			 
011f				push hl 
011f				push af 
011f				push de 
011f				call clear_display 
011f				ld de, .sperr 
011f				ld a,0 
011f			;	ld de,os_word_scratch 
011f				call str_at_display 
011f				ld a, display_row_1+17 
011f				ld de, debug_mark 
011f				call str_at_display 
011f				ld a, 0 
011f				ld (curframe+4),a 
011f				ld hl, curframe 
011f				ld de, os_word_scratch 
011f				ld a, display_row_4 
011f				call str_at_display 
011f				call update_display 
011f				;call break_point_state 
011f				call cin_wait 
011f			 
011f			;	ld a, ' ' 
011f			;	ld (os_view_disable), a 
011f				call bp_on 
011f				pop de	 
011f				pop af 
011f				pop hl 
011f				CALLMONITOR 
011f				ret 
011f			 
011f			endif 
011f			 
011f			 
011f			 
011f			; eof 
# End of file stackimbal.asm
011f			  
011f			;TODO macro to calc col and row offset into screen  
011f			  
011f			  
011f			  
011f			hardware_init:  
011f			  
011f				  
011f			  
011f					;ld a, 0  
011f					;ld (hardware_diag), a  
011f			  
011f					; clear all the buffers  
011f			  
011f 21 0a ed				ld hl, display_fb1  
0122 22 c6 eb				ld (display_fb_active), hl  
0125			  
0125 cd c8 0b				call clear_display  
0128			  
0128 21 c8 eb				ld hl, display_fb2  
012b 22 c6 eb				ld (display_fb_active), hl  
012e			  
012e cd c8 0b				call clear_display  
0131			  
0131					; init primary frame buffer area  
0131 21 ab ed				ld hl, display_fb0  
0134 22 c6 eb				ld (display_fb_active), hl  
0137			  
0137 cd c8 0b				call clear_display  
013a			  
013a			  
013a cd 0f 62				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
013d			  
013d cd fd 62			call key_init  
0140 cd ad 01			call storage_init  
0143			  
0143				; setup malloc functions  
0143			  
0143				if MALLOC_1  
0143 cd ac 11				call  heap_init  
0146				endif  
0146				if MALLOC_4  
0146					call  heap_init  
0146				endif  
0146			  
0146				; init sound hardware if present  
0146			  
0146				if SOUND_ENABLE  
0146					call sound_init  
0146				endif  
0146			  
0146				; lcd test sequence  
0146					  
0146 cd eb 0b			call update_display  
0149 cd 00 0b			call delay1s  
014c 3e 2b			ld a,'+'  
014e cd cd 0b			call fill_display  
0151 cd eb 0b			call update_display  
0154 cd 00 0b			call delay1s  
0157 3e 2a			ld a,'*'  
0159 cd cd 0b			call fill_display  
015c cd eb 0b			call update_display  
015f cd 00 0b			call delay1s  
0162 3e 2d			ld a,'-'  
0164 cd cd 0b			call fill_display  
0167 cd eb 0b			call update_display  
016a cd 00 0b			call delay1s  
016d			  
016d			; boot splash screen  
016d			if display_cols == 20	  
016d			        ld a, display_row_1    
016d			else  
016d 3e 0a		        ld a, display_row_1 +10   
016f			endif  
016f 11 da 16			ld de, prom_bootmsg  
0172 cd db 0b			call str_at_display  
0175 cd eb 0b			call update_display  
0178			  
0178			  
0178 cd 00 0b			call delay1s  
017b cd 00 0b			call delay1s  
017e			if display_cols == 20	  
017e			            LD   A, display_row_3+2  
017e			else  
017e 3e 5c		            LD   A, display_row_3+12  
0180			endif  
0180 11 ef 16			ld de, prom_bootmsg1  
0183 cd db 0b			call str_at_display  
0186			; display debug level  
0186 3e 78		            LD   A, display_row_4  
0188 11 1b 01			ld de, debuglevel  
018b cd db 0b			call str_at_display  
018e			  
018e cd eb 0b			call update_display  
0191 cd 00 0b			call delay1s  
0194 cd 00 0b			call delay1s  
0197			  
0197			;	ld a, display_row_4+3  
0197			;	ld de, bootmsg2  
0197			;	call str_at_display  
0197			;	call update_display  
0197			;	call delay1s  
0197			;	call delay1s  
0197			  
0197			; debug mark setup  
0197			  
0197 3e 5f		ld a, '_'  
0199 32 65 ee		ld (debug_mark),a  
019c 32 66 ee		ld (debug_mark+1),a  
019f 32 67 ee		ld (debug_mark+2),a  
01a2 3e 00		ld a,0  
01a4 32 68 ee		ld (debug_mark+3),a  
01a7 32 69 ee		ld (debug_umark),a  
01aa			  
01aa c9					ret  
01ab			  
01ab			  
01ab			;bootmsg2:	db "Firmware v0.1",0  
01ab			  
01ab			; a 4x20 lcd  
01ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
01ab			  
01ab			;if display_cols == 20  
01ab			;	include "firmware_lcd_4x20.asm"  
01ab			;endif  
01ab			  
01ab			;if display_cols == 40  
01ab			;	include "firmware_lcd_4x40.asm"  
01ab			;endif  
01ab			  
01ab			;  
01ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
01ab			; TODO abstract the bit bang video out interface for dual display  
01ab			; TODO wire video out to tx pin on rc2014 bus  
01ab			  
01ab			; must supply cin, and cin_wait for low level hardware abstraction   
01ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
01ab			; test scancode  
01ab			  
01ab			;;;;;  
01ab			;;;  
01ab			; Moved out to mini and maxi versions  
01ab			;  
01ab			; include "firmware_key_4x4.asm"  
01ab			; using existing 4 wire x 4 resistor array for input  
01ab			;include "firmware_key_4x10.asm"  
01ab			; need to mod the board for 5 rows due to resistor array  
01ab			;include "firmware_key_5x10.asm"  
01ab			  
01ab			; storage hardware interface  
01ab			  
01ab			; use microchip serial eeprom for storage  
01ab			  
01ab			  
01ab			if STORAGE_SE  
01ab				include "firmware_spi.asm"  
01ab				include "firmware_seeprom.asm"  
01ab			else  
01ab			   ; create some stubs for the labels  
01ab c9			se_readbyte: ret  
01ac c9			se_writebyte: ret  
01ad c9			storage_init: ret  
01ae			  
01ae			endif  
01ae			  
01ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
01ae			;include "firmware_cf.asm"  
01ae			  
01ae			; load up high level storage hardward abstractions  
01ae			include "firmware_storage.asm"  
01ae			 
01ae			; persisent storage hardware abstraction layer  
01ae			 
01ae			 
01ae			 
01ae			; Block 0 on storage is a config state 
01ae			 
01ae			 
01ae			 
01ae			; TODO add read phy block and write phy block functions 
01ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
01ae			 
01ae			; Abstraction layer  
01ae			 
01ae			; Logocial block size is same size as physical size - using tape concept 
01ae			 
01ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
01ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
01ae			 
01ae			 
01ae			 
01ae			; Filesystem layout (Logical layout) 
01ae			; 
01ae			; Block 0 - Bank config  
01ae			; 
01ae			;      Byte - 0 file id counter 
01ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
01ae			;      Byte - 3-20 zero terminated bank label 
01ae			; 
01ae			; Block 1 > File storage 
01ae			; 
01ae			;      Byte 0 file id    - block 0 file details 
01ae			;      Byte 1 block id - block 0 is file  
01ae			;            Byte 2-15 - File name 
01ae			; 
01ae			;       - to end of block data 
01ae			; 
01ae			 
01ae			; Get ID for the file named in pointer held HL 
01ae			; Returns ID in HL = 255 if no file found 
01ae			 
01ae			storage_getid: 
01ae			 
01ae 22 6d ea			ld (store_tmp1), hl 
01b1			 
01b1				if DEBUG_STORESE 
01b1					DMARK "SGI" 
01b1 f5				push af  
01b2 3a c6 01			ld a, (.dmark)  
01b5 32 65 ee			ld (debug_mark),a  
01b8 3a c7 01			ld a, (.dmark+1)  
01bb 32 66 ee			ld (debug_mark+1),a  
01be 3a c8 01			ld a, (.dmark+2)  
01c1 32 67 ee			ld (debug_mark+2),a  
01c4 18 03			jr .pastdmark  
01c6 ..			.dmark: db "SGI"  
01c9 f1			.pastdmark: pop af  
01ca			endm  
# End of macro DMARK
01ca					CALLMONITOR 
01ca cd 6f ee			call debug_vector  
01cd				endm  
# End of macro CALLMONITOR
01cd				endif 
01cd				; get block 0 and set counter for number of files to scan 
01cd			 
01cd cd 38 03			call storage_get_block_0 
01d0			 
01d0 3a 74 ea			ld a, (store_page) 
01d3 47				ld b, a 
01d4			 
01d4				; get extent 0 of each file id 
01d4			 
01d4				if DEBUG_STORESE 
01d4					DMARK "SGc" 
01d4 f5				push af  
01d5 3a e9 01			ld a, (.dmark)  
01d8 32 65 ee			ld (debug_mark),a  
01db 3a ea 01			ld a, (.dmark+1)  
01de 32 66 ee			ld (debug_mark+1),a  
01e1 3a eb 01			ld a, (.dmark+2)  
01e4 32 67 ee			ld (debug_mark+2),a  
01e7 18 03			jr .pastdmark  
01e9 ..			.dmark: db "SGc"  
01ec f1			.pastdmark: pop af  
01ed			endm  
# End of macro DMARK
01ed					CALLMONITOR 
01ed cd 6f ee			call debug_vector  
01f0				endm  
# End of macro CALLMONITOR
01f0				endif 
01f0 60			.getloop:	ld h, b 
01f1 2e 00				ld l, 0 
01f3 c5					push bc 
01f4			 
01f4 11 74 ea				ld de, store_page 
01f7				if DEBUG_STORESE 
01f7					DMARK "SGr" 
01f7 f5				push af  
01f8 3a 0c 02			ld a, (.dmark)  
01fb 32 65 ee			ld (debug_mark),a  
01fe 3a 0d 02			ld a, (.dmark+1)  
0201 32 66 ee			ld (debug_mark+1),a  
0204 3a 0e 02			ld a, (.dmark+2)  
0207 32 67 ee			ld (debug_mark+2),a  
020a 18 03			jr .pastdmark  
020c ..			.dmark: db "SGr"  
020f f1			.pastdmark: pop af  
0210			endm  
# End of macro DMARK
0210					CALLMONITOR 
0210 cd 6f ee			call debug_vector  
0213				endm  
# End of macro CALLMONITOR
0213				endif 
0213 cd e0 07				call storage_read 
0216 cd 1e 0e				call ishlzero 
0219 28 2d				jr z, .gap 
021b					 
021b					; have a file name read. Is it one we want. 
021b			 
021b 2a 6d ea				ld hl, (store_tmp1) 
021e 11 77 ea				ld de, store_page+3   ; file name 
0221			 
0221				if DEBUG_STORESE 
0221					DMARK "SGc" 
0221 f5				push af  
0222 3a 36 02			ld a, (.dmark)  
0225 32 65 ee			ld (debug_mark),a  
0228 3a 37 02			ld a, (.dmark+1)  
022b 32 66 ee			ld (debug_mark+1),a  
022e 3a 38 02			ld a, (.dmark+2)  
0231 32 67 ee			ld (debug_mark+2),a  
0234 18 03			jr .pastdmark  
0236 ..			.dmark: db "SGc"  
0239 f1			.pastdmark: pop af  
023a			endm  
# End of macro DMARK
023a					CALLMONITOR 
023a cd 6f ee			call debug_vector  
023d				endm  
# End of macro CALLMONITOR
023d				endif 
023d cd 93 11				call strcmp 
0240 20 06				jr nz, .gap   ; not this one 
0242			 
0242 c1				        pop bc 
0243			 
0243 26 00				ld h, 0 
0245 68					ld l, b 
0246 18 22				jr .getdone 
0248						 
0248			 
0248			 
0248			 
0248			.gap: 
0248				if DEBUG_STORESE 
0248					DMARK "SGg" 
0248 f5				push af  
0249 3a 5d 02			ld a, (.dmark)  
024c 32 65 ee			ld (debug_mark),a  
024f 3a 5e 02			ld a, (.dmark+1)  
0252 32 66 ee			ld (debug_mark+1),a  
0255 3a 5f 02			ld a, (.dmark+2)  
0258 32 67 ee			ld (debug_mark+2),a  
025b 18 03			jr .pastdmark  
025d ..			.dmark: db "SGg"  
0260 f1			.pastdmark: pop af  
0261			endm  
# End of macro DMARK
0261					CALLMONITOR 
0261 cd 6f ee			call debug_vector  
0264				endm  
# End of macro CALLMONITOR
0264				endif 
0264			 
0264 c1					pop bc 
0265 10 89				djnz .getloop 
0267 21 ff 00				ld hl, 255 
026a			.getdone: 
026a			 
026a				if DEBUG_STORESE 
026a					DMARK "SGe" 
026a f5				push af  
026b 3a 7f 02			ld a, (.dmark)  
026e 32 65 ee			ld (debug_mark),a  
0271 3a 80 02			ld a, (.dmark+1)  
0274 32 66 ee			ld (debug_mark+1),a  
0277 3a 81 02			ld a, (.dmark+2)  
027a 32 67 ee			ld (debug_mark+2),a  
027d 18 03			jr .pastdmark  
027f ..			.dmark: db "SGe"  
0282 f1			.pastdmark: pop af  
0283			endm  
# End of macro DMARK
0283					CALLMONITOR 
0283 cd 6f ee			call debug_vector  
0286				endm  
# End of macro CALLMONITOR
0286				endif 
0286			 
0286 c9				ret 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			; Read Block 
0287			; ---------- 
0287			; 
0287			; With current bank 
0287			;  
0287			; Get block number to read 
0287			; Load physical blocks starting at start block into buffer 
0287			 
0287			; de points to buffer to use 
0287			; hl holds logical block number  
0287			 
0287			storage_read_block: 
0287			 
0287				; TODO bank selection 
0287			 
0287				; for each of the physical blocks read it into the buffer 
0287 06 40			ld b, STORE_BLOCK_PHY 
0289			 
0289				if DEBUG_STORESE 
0289 d5					push de 
028a				endif 
028a				 
028a			.rl1:    
028a			 
028a				; read physical block at hl into de 
028a			        ; increment hl and de to next read position on exit 
028a			 
028a e5				push hl 
028b d5				push de	 
028c c5				push bc 
028d			;	if DEBUG_STORESE 
028d			;		push af 
028d			;		ld a, 'R' 
028d			;		ld (debug_mark),a 
028d			;		pop af 
028d			;		CALLMONITOR 
028d			;	endif 
028d cd ab 01			call se_readbyte 
0290			;	if DEBUG_STORESE 
0290			;		ld a,(spi_portbyte) 
0290			;		ld l, a 
0290			;		push af 
0290			;		ld a, '1' 
0290			;		ld (debug_mark),a 
0290			;		pop af 
0290			;		CALLMONITOR 
0290			;	endif 
0290 c1				pop bc 
0291 d1				pop de 
0292 e1				pop hl 
0293 12				ld (de),a 
0294 23				inc hl 
0295 13				inc de 
0296			 
0296			;	if DEBUG_STORESE 
0296			;		push af 
0296			;		ld a, 'r' 
0296			;		ld (debug_mark),a 
0296			;		pop af 
0296			;		CALLMONITOR 
0296			;	endif 
0296			 
0296 10 f2			djnz .rl1 
0298			 
0298				if DEBUG_STORESE 
0298					DMARK "SRB" 
0298 f5				push af  
0299 3a ad 02			ld a, (.dmark)  
029c 32 65 ee			ld (debug_mark),a  
029f 3a ae 02			ld a, (.dmark+1)  
02a2 32 66 ee			ld (debug_mark+1),a  
02a5 3a af 02			ld a, (.dmark+2)  
02a8 32 67 ee			ld (debug_mark+2),a  
02ab 18 03			jr .pastdmark  
02ad ..			.dmark: db "SRB"  
02b0 f1			.pastdmark: pop af  
02b1			endm  
# End of macro DMARK
02b1 d1					pop de 
02b2			; 
02b2			;		push af 
02b2			;		ld a, 'R' 
02b2			;		ld (debug_mark),a 
02b2			;		pop af 
02b2					CALLMONITOR 
02b2 cd 6f ee			call debug_vector  
02b5				endm  
# End of macro CALLMONITOR
02b5				endif 
02b5 c9				ret	 
02b6				 
02b6			 
02b6			; File Size 
02b6			; --------- 
02b6			; 
02b6			;   hl file id 
02b6			; 
02b6			;  returns in hl the number of blocks 
02b6			 
02b6			storage_file_size: 
02b6 5d				ld e, l 
02b7 16 00			ld d, 0 
02b9 21 40 00			ld hl, STORE_BLOCK_PHY 
02bc					if DEBUG_FORTH_WORDS 
02bc						DMARK "SIZ" 
02bc f5				push af  
02bd 3a d1 02			ld a, (.dmark)  
02c0 32 65 ee			ld (debug_mark),a  
02c3 3a d2 02			ld a, (.dmark+1)  
02c6 32 66 ee			ld (debug_mark+1),a  
02c9 3a d3 02			ld a, (.dmark+2)  
02cc 32 67 ee			ld (debug_mark+2),a  
02cf 18 03			jr .pastdmark  
02d1 ..			.dmark: db "SIZ"  
02d4 f1			.pastdmark: pop af  
02d5			endm  
# End of macro DMARK
02d5						CALLMONITOR 
02d5 cd 6f ee			call debug_vector  
02d8				endm  
# End of macro CALLMONITOR
02d8					endif 
02d8 cd ba 05			call storage_findnextid 
02db			 
02db cd 1e 0e			call ishlzero 
02de			;	ld a, l 
02de			;	add h 
02de			;	cp 0 
02de c8				ret z			; block not found so EOF 
02df			 
02df 11 74 ea			ld de, store_page 
02e2 cd 87 02			call storage_read_block 
02e5			 
02e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
02e8 6f				ld l, a 
02e9 26 00			ld h, 0 
02eb c9			 	ret 
02ec			 
02ec			 
02ec			; Write Block 
02ec			; ----------- 
02ec			; 
02ec			; With current bank 
02ec			;  
02ec			; Get block number to write 
02ec			; Write physical blocks starting at start block from buffer 
02ec			  
02ec			storage_write_block: 
02ec				; TODO bank selection 
02ec			 
02ec				; for each of the physical blocks read it into the buffer 
02ec 06 40			ld b, STORE_BLOCK_PHY 
02ee			 
02ee				if DEBUG_STORESE 
02ee					DMARK "SWB" 
02ee f5				push af  
02ef 3a 03 03			ld a, (.dmark)  
02f2 32 65 ee			ld (debug_mark),a  
02f5 3a 04 03			ld a, (.dmark+1)  
02f8 32 66 ee			ld (debug_mark+1),a  
02fb 3a 05 03			ld a, (.dmark+2)  
02fe 32 67 ee			ld (debug_mark+2),a  
0301 18 03			jr .pastdmark  
0303 ..			.dmark: db "SWB"  
0306 f1			.pastdmark: pop af  
0307			endm  
# End of macro DMARK
0307			 
0307					;push af 
0307					;ld a, 'W' 
0307					;ld (debug_mark),a 
0307					;pop af 
0307					CALLMONITOR 
0307 cd 6f ee			call debug_vector  
030a				endm  
# End of macro CALLMONITOR
030a				endif 
030a			 
030a			; might not be working 
030a			;	call se_writepage 
030a			 
030a			;	ret 
030a			; 
030a			 
030a			 
030a			 
030a			.wl1:    
030a			 
030a				; read physical block at hl into de 
030a			        ; increment hl and de to next read position on exit 
030a			 
030a e5				push hl 
030b d5				push de	 
030c c5				push bc 
030d 1a				ld a,(de) 
030e				;if DEBUG_STORESE 
030e			;		push af 
030e			;		ld a, 'W' 
030e			;		ld (debug_mark),a 
030e			;		pop af 
030e			;		CALLMONITOR 
030e			;	endif 
030e cd ac 01			call se_writebyte 
0311			;	call delay250ms 
0311 00				nop 
0312 00				nop 
0313 00				nop 
0314			;	if DEBUG_STORESE 
0314			;		push af 
0314			;		ld a, 'w' 
0314			;		ld (debug_mark),a 
0314			;		pop af 
0314			;		CALLMONITOR 
0314			;	endif 
0314 c1				pop bc 
0315 d1				pop de 
0316 e1				pop hl 
0317 23				inc hl 
0318 13				inc de 
0319			 
0319			 
0319 10 ef			djnz .wl1 
031b			 
031b				if DEBUG_STORESE 
031b					DMARK "SW2" 
031b f5				push af  
031c 3a 30 03			ld a, (.dmark)  
031f 32 65 ee			ld (debug_mark),a  
0322 3a 31 03			ld a, (.dmark+1)  
0325 32 66 ee			ld (debug_mark+1),a  
0328 3a 32 03			ld a, (.dmark+2)  
032b 32 67 ee			ld (debug_mark+2),a  
032e 18 03			jr .pastdmark  
0330 ..			.dmark: db "SW2"  
0333 f1			.pastdmark: pop af  
0334			endm  
# End of macro DMARK
0334			 
0334					;push af 
0334					;ld a, 'W' 
0334					;ld (debug_mark),a 
0334					;pop af 
0334					CALLMONITOR 
0334 cd 6f ee			call debug_vector  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338			 
0338			; Init bank 
0338			; --------- 
0338			; 
0338			; With current bank 
0338			; 
0338			; Setup block 0 config 
0338			;     Set 0 file id counter 
0338			;     Set formatted byte pattern 
0338			;     Zero out bank label 
0338			;      
0338			; For every logical block write 0-1 byte as null 
0338			 
0338			storage_get_block_0: 
0338			 
0338				; TODO check presence 
0338			 
0338				; get block 0 config 
0338			 
0338 21 00 00			ld hl, 0 
033b 11 74 ea			ld de, store_page 
033e cd 87 02			call storage_read_block 
0341			 
0341				if DEBUG_STORESE 
0341					DMARK "SB0" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 65 ee			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 66 ee			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 67 ee			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SB0"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a 11 74 ea				ld de, store_page 
035d			;		push af 
035d			;		ld a, 'i' 
035d			;		ld (debug_mark),a 
035d			;		pop af 
035d					CALLMONITOR 
035d cd 6f ee			call debug_vector  
0360				endm  
# End of macro CALLMONITOR
0360				endif 
0360			 
0360				; is this area formatted? 
0360			 
0360			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0360 2a 75 ea			ld hl, (store_page+1) 
0363 3e 80			ld a,0x80 
0365 bd				cp l 
0366 20 22			jr nz, .ininotformatted 
0368				; do a double check 
0368 3e 27			ld a, 0x27 
036a bc				cp h 
036b 20 1d			jr nz, .ininotformatted 
036d			 
036d				; formatted then 
036d			 
036d				if DEBUG_STORESE 
036d					DMARK "SB1" 
036d f5				push af  
036e 3a 82 03			ld a, (.dmark)  
0371 32 65 ee			ld (debug_mark),a  
0374 3a 83 03			ld a, (.dmark+1)  
0377 32 66 ee			ld (debug_mark+1),a  
037a 3a 84 03			ld a, (.dmark+2)  
037d 32 67 ee			ld (debug_mark+2),a  
0380 18 03			jr .pastdmark  
0382 ..			.dmark: db "SB1"  
0385 f1			.pastdmark: pop af  
0386			endm  
# End of macro DMARK
0386					;push af 
0386					;ld a, 'I' 
0386					;ld (debug_mark),a 
0386					;pop af 
0386					CALLMONITOR 
0386 cd 6f ee			call debug_vector  
0389				endm  
# End of macro CALLMONITOR
0389				endif 
0389 c9				ret 
038a			 
038a			.ininotformatted: 
038a				; bank not formatted so poke various bits to make sure 
038a			 
038a				if DEBUG_STORESE 
038a					DMARK "SB2" 
038a f5				push af  
038b 3a 9f 03			ld a, (.dmark)  
038e 32 65 ee			ld (debug_mark),a  
0391 3a a0 03			ld a, (.dmark+1)  
0394 32 66 ee			ld (debug_mark+1),a  
0397 3a a1 03			ld a, (.dmark+2)  
039a 32 67 ee			ld (debug_mark+2),a  
039d 18 03			jr .pastdmark  
039f ..			.dmark: db "SB2"  
03a2 f1			.pastdmark: pop af  
03a3			endm  
# End of macro DMARK
03a3					;push af 
03a3					;ld a, 'f' 
03a3					;ld (debug_mark),a 
03a3					;pop af 
03a3					CALLMONITOR 
03a3 cd 6f ee			call debug_vector  
03a6				endm  
# End of macro CALLMONITOR
03a6				endif 
03a6			 
03a6 cd c3 0a			call storage_clear_page 
03a9			 
03a9 21 74 ea			ld hl, store_page 
03ac 3e 00			ld a, 0 
03ae				 
03ae 77				ld (hl),a   ; reset file counter 
03af			 
03af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03b2 22 75 ea		 	ld (store_page+1), hl	 
03b5			 
03b5				; set default label 
03b5			 
03b5 21 51 04			ld hl, .defaultbanklabl 
03b8 11 77 ea		 	ld de, store_page+3 
03bb 01 0f 00			ld bc, 15 
03be ed b0			ldir 
03c0			 
03c0				; Append the current bank id 
03c0 21 80 ea			ld hl, store_page+3+9 
03c3 3a 59 ea			ld a, (spi_device_id) 
03c6 77				ld (hl), a 
03c7			 
03c7				; save default page 0 
03c7			 
03c7 21 00 00			ld hl, 0 
03ca 11 74 ea			ld de, store_page 
03cd				if DEBUG_STORESE 
03cd					DMARK "SB3" 
03cd f5				push af  
03ce 3a e2 03			ld a, (.dmark)  
03d1 32 65 ee			ld (debug_mark),a  
03d4 3a e3 03			ld a, (.dmark+1)  
03d7 32 66 ee			ld (debug_mark+1),a  
03da 3a e4 03			ld a, (.dmark+2)  
03dd 32 67 ee			ld (debug_mark+2),a  
03e0 18 03			jr .pastdmark  
03e2 ..			.dmark: db "SB3"  
03e5 f1			.pastdmark: pop af  
03e6			endm  
# End of macro DMARK
03e6			;		push af 
03e6			;		ld a, 'F' 
03e6			;		ld (debug_mark),a 
03e6			;		pop af 
03e6					CALLMONITOR 
03e6 cd 6f ee			call debug_vector  
03e9				endm  
# End of macro CALLMONITOR
03e9				endif 
03e9 cd ec 02			call storage_write_block 
03ec				if DEBUG_STORESE 
03ec					DMARK "SB4" 
03ec f5				push af  
03ed 3a 01 04			ld a, (.dmark)  
03f0 32 65 ee			ld (debug_mark),a  
03f3 3a 02 04			ld a, (.dmark+1)  
03f6 32 66 ee			ld (debug_mark+1),a  
03f9 3a 03 04			ld a, (.dmark+2)  
03fc 32 67 ee			ld (debug_mark+2),a  
03ff 18 03			jr .pastdmark  
0401 ..			.dmark: db "SB4"  
0404 f1			.pastdmark: pop af  
0405			endm  
# End of macro DMARK
0405			;		push af 
0405			;		ld a, '>' 
0405			;		ld (debug_mark),a 
0405			;		pop af 
0405					CALLMONITOR 
0405 cd 6f ee			call debug_vector  
0408				endm  
# End of macro CALLMONITOR
0408				endif 
0408			 
0408 00				nop 
0409 00				nop 
040a 00				nop 
040b			 
040b				; now set 0 in every page to mark as a free block 
040b			 
040b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
040d 21 40 00			ld hl, STORE_BLOCK_PHY 
0410			 
0410 3e 00		.setmark1:   	ld a,0 
0412 e5					push hl 
0413 c5					push bc 
0414 cd ac 01				call se_writebyte 
0417 3e 0a			ld a, 10 
0419 cd e5 0a			call aDelayInMS 
041c 23				inc hl 
041d cd ac 01				call se_writebyte 
0420 3e 0a			ld a, 10 
0422 cd e5 0a			call aDelayInMS 
0425 2b				dec hl 
0426 c1					pop bc 
0427 e1					pop hl 
0428 3e 40				ld a, STORE_BLOCK_PHY 
042a cd f5 0d				call addatohl 
042d 10 e1				djnz .setmark1 
042f			 
042f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0431 3e 00		.setmark2:   	ld a,0 
0433 e5					push hl 
0434 c5					push bc 
0435 cd ac 01				call se_writebyte 
0438 3e 0a			ld a, 10 
043a cd e5 0a			call aDelayInMS 
043d 23				inc hl 
043e cd ac 01				call se_writebyte 
0441 3e 0a			ld a, 10 
0443 cd e5 0a			call aDelayInMS 
0446 2b				dec hl 
0447 c1					pop bc 
0448 e1					pop hl 
0449 3e 40				ld a, STORE_BLOCK_PHY 
044b cd f5 0d				call addatohl 
044e 10 e1				djnz .setmark2 
0450			 
0450					 
0450			 
0450			 
0450 c9				ret 
0451			 
0451			 
0451			 
0451			 
0451 .. 00		.defaultbanklabl:   db "BankLabel_",0 
045c			 
045c			 
045c			 
045c			; Label Bank 
045c			; ---------- 
045c			; 
045c			; With current bank 
045c			; Read block 0 
045c			; Set label 
045c			; Write block 0 
045c			 
045c			; label str pointer in hl 
045c			 
045c			storage_label:     
045c			 
045c				if DEBUG_STORESE 
045c					DMARK "LBL" 
045c f5				push af  
045d 3a 71 04			ld a, (.dmark)  
0460 32 65 ee			ld (debug_mark),a  
0463 3a 72 04			ld a, (.dmark+1)  
0466 32 66 ee			ld (debug_mark+1),a  
0469 3a 73 04			ld a, (.dmark+2)  
046c 32 67 ee			ld (debug_mark+2),a  
046f 18 03			jr .pastdmark  
0471 ..			.dmark: db "LBL"  
0474 f1			.pastdmark: pop af  
0475			endm  
# End of macro DMARK
0475					CALLMONITOR 
0475 cd 6f ee			call debug_vector  
0478				endm  
# End of macro CALLMONITOR
0478				endif 
0478			 
0478 e5				push hl 
0479			 
0479 cd 38 03			call storage_get_block_0 
047c			 
047c				; set default label 
047c			 
047c e1				pop hl 
047d			 
047d 11 77 ea		 	ld de, store_page+3 
0480 01 0f 00			ld bc, 15 
0483				if DEBUG_STORESE 
0483					DMARK "LB3" 
0483 f5				push af  
0484 3a 98 04			ld a, (.dmark)  
0487 32 65 ee			ld (debug_mark),a  
048a 3a 99 04			ld a, (.dmark+1)  
048d 32 66 ee			ld (debug_mark+1),a  
0490 3a 9a 04			ld a, (.dmark+2)  
0493 32 67 ee			ld (debug_mark+2),a  
0496 18 03			jr .pastdmark  
0498 ..			.dmark: db "LB3"  
049b f1			.pastdmark: pop af  
049c			endm  
# End of macro DMARK
049c					CALLMONITOR 
049c cd 6f ee			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f ed b0			ldir 
04a1				; save default page 0 
04a1			 
04a1 21 00 00			ld hl, 0 
04a4 11 74 ea			ld de, store_page 
04a7				if DEBUG_STORESE 
04a7					DMARK "LBW" 
04a7 f5				push af  
04a8 3a bc 04			ld a, (.dmark)  
04ab 32 65 ee			ld (debug_mark),a  
04ae 3a bd 04			ld a, (.dmark+1)  
04b1 32 66 ee			ld (debug_mark+1),a  
04b4 3a be 04			ld a, (.dmark+2)  
04b7 32 67 ee			ld (debug_mark+2),a  
04ba 18 03			jr .pastdmark  
04bc ..			.dmark: db "LBW"  
04bf f1			.pastdmark: pop af  
04c0			endm  
# End of macro DMARK
04c0					CALLMONITOR 
04c0 cd 6f ee			call debug_vector  
04c3				endm  
# End of macro CALLMONITOR
04c3				endif 
04c3 cd ec 02			call storage_write_block 
04c6			 
04c6 c9				ret 
04c7			 
04c7			 
04c7			 
04c7			; Read Block 0 - Config 
04c7			; --------------------- 
04c7			; 
04c7			; With current bank 
04c7			; Call presence test 
04c7			;    If not present format/init bank  
04c7			; Read block 0  
04c7			;  
04c7			 
04c7			 
04c7			; Dir 
04c7			; --- 
04c7			; 
04c7			; With current bank 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block read byte 2 
04c7			;      if first block of file 
04c7			;         Display file name 
04c7			;         Display type flags for file 
04c7			;        
04c7			 
04c7			; moving to words as this requires stack control 
04c7			 
04c7			 
04c7			; Delete File 
04c7			; ----------- 
04c7			; 
04c7			; With current bank 
04c7			; 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block file id 
04c7			;      If first block of file and dont have file id 
04c7			;         if file to delete 
04c7			;         Save file id 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			;      If file id is one saved 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			 
04c7			 
04c7			.se_done: 
04c7 e1				pop hl 
04c8 c9				ret 
04c9			 
04c9			storage_erase: 
04c9			 
04c9				; hl contains the file id 
04c9			 
04c9 5d				ld e, l 
04ca 16 00			ld d, 0 
04cc 21 40 00			ld hl, STORE_BLOCK_PHY 
04cf					if DEBUG_FORTH_WORDS 
04cf						DMARK "ERA" 
04cf f5				push af  
04d0 3a e4 04			ld a, (.dmark)  
04d3 32 65 ee			ld (debug_mark),a  
04d6 3a e5 04			ld a, (.dmark+1)  
04d9 32 66 ee			ld (debug_mark+1),a  
04dc 3a e6 04			ld a, (.dmark+2)  
04df 32 67 ee			ld (debug_mark+2),a  
04e2 18 03			jr .pastdmark  
04e4 ..			.dmark: db "ERA"  
04e7 f1			.pastdmark: pop af  
04e8			endm  
# End of macro DMARK
04e8						CALLMONITOR 
04e8 cd 6f ee			call debug_vector  
04eb				endm  
# End of macro CALLMONITOR
04eb					endif 
04eb cd ba 05			call storage_findnextid 
04ee cd 1e 0e			call ishlzero 
04f1 c8				ret z 
04f2			 
04f2 e5				push hl 
04f3			 
04f3				; TODO check file not found 
04f3			 
04f3 11 74 ea			ld de, store_page 
04f6 cd 87 02			call storage_read_block 
04f9			 
04f9 cd 1e 0e			call ishlzero 
04fc ca c7 04			jp z,.se_done 
04ff			 
04ff					if DEBUG_FORTH_WORDS 
04ff						DMARK "ER1" 
04ff f5				push af  
0500 3a 14 05			ld a, (.dmark)  
0503 32 65 ee			ld (debug_mark),a  
0506 3a 15 05			ld a, (.dmark+1)  
0509 32 66 ee			ld (debug_mark+1),a  
050c 3a 16 05			ld a, (.dmark+2)  
050f 32 67 ee			ld (debug_mark+2),a  
0512 18 03			jr .pastdmark  
0514 ..			.dmark: db "ER1"  
0517 f1			.pastdmark: pop af  
0518			endm  
# End of macro DMARK
0518						CALLMONITOR 
0518 cd 6f ee			call debug_vector  
051b				endm  
# End of macro CALLMONITOR
051b					endif 
051b 3a 74 ea			ld a, (store_page)	; get file id 
051e 32 68 ea			ld (store_tmpid), a 
0521			 
0521 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
0524 32 67 ea			ld (store_tmpext), a 
0527			 
0527				; wipe file header 
0527			 
0527 e1				pop hl 
0528 3e 00			ld a, 0 
052a 32 74 ea			ld (store_page), a 
052d 32 75 ea			ld (store_page+1),a 
0530 11 74 ea			ld de, store_page 
0533					if DEBUG_FORTH_WORDS 
0533						DMARK "ER2" 
0533 f5				push af  
0534 3a 48 05			ld a, (.dmark)  
0537 32 65 ee			ld (debug_mark),a  
053a 3a 49 05			ld a, (.dmark+1)  
053d 32 66 ee			ld (debug_mark+1),a  
0540 3a 4a 05			ld a, (.dmark+2)  
0543 32 67 ee			ld (debug_mark+2),a  
0546 18 03			jr .pastdmark  
0548 ..			.dmark: db "ER2"  
054b f1			.pastdmark: pop af  
054c			endm  
# End of macro DMARK
054c						CALLMONITOR 
054c cd 6f ee			call debug_vector  
054f				endm  
# End of macro CALLMONITOR
054f					endif 
054f cd ec 02			call storage_write_block 
0552			 
0552			 
0552				; wipe file extents 
0552			 
0552 3a 67 ea			ld a, (store_tmpext) 
0555 47				ld b, a 
0556			 
0556			.eraext:	  
0556 c5				push bc 
0557			 
0557 21 40 00			ld hl, STORE_BLOCK_PHY 
055a 3a 68 ea			ld a,(store_tmpid) 
055d 5f				ld e, a 
055e 50				ld d, b	 
055f					if DEBUG_FORTH_WORDS 
055f						DMARK "ER3" 
055f f5				push af  
0560 3a 74 05			ld a, (.dmark)  
0563 32 65 ee			ld (debug_mark),a  
0566 3a 75 05			ld a, (.dmark+1)  
0569 32 66 ee			ld (debug_mark+1),a  
056c 3a 76 05			ld a, (.dmark+2)  
056f 32 67 ee			ld (debug_mark+2),a  
0572 18 03			jr .pastdmark  
0574 ..			.dmark: db "ER3"  
0577 f1			.pastdmark: pop af  
0578			endm  
# End of macro DMARK
0578						CALLMONITOR 
0578 cd 6f ee			call debug_vector  
057b				endm  
# End of macro CALLMONITOR
057b					endif 
057b cd ba 05			call storage_findnextid 
057e cd 1e 0e			call ishlzero 
0581 ca c7 04			jp z,.se_done 
0584			 
0584 e5				push hl 
0585 11 74 ea			ld de, store_page 
0588 cd 87 02			call storage_read_block 
058b			 
058b				; free block	 
058b			 
058b 3e 00			ld a, 0 
058d 32 74 ea			ld (store_page), a 
0590 32 75 ea			ld (store_page+1),a 
0593 11 74 ea			ld de, store_page 
0596 e1				pop hl 
0597					if DEBUG_FORTH_WORDS 
0597						DMARK "ER4" 
0597 f5				push af  
0598 3a ac 05			ld a, (.dmark)  
059b 32 65 ee			ld (debug_mark),a  
059e 3a ad 05			ld a, (.dmark+1)  
05a1 32 66 ee			ld (debug_mark+1),a  
05a4 3a ae 05			ld a, (.dmark+2)  
05a7 32 67 ee			ld (debug_mark+2),a  
05aa 18 03			jr .pastdmark  
05ac ..			.dmark: db "ER4"  
05af f1			.pastdmark: pop af  
05b0			endm  
# End of macro DMARK
05b0						CALLMONITOR 
05b0 cd 6f ee			call debug_vector  
05b3				endm  
# End of macro CALLMONITOR
05b3					endif 
05b3 cd ec 02			call storage_write_block 
05b6			 
05b6 c1				pop bc 
05b7 10 9d			djnz .eraext 
05b9			 
05b9 c9				ret 
05ba			 
05ba			 
05ba			; Find Free Block 
05ba			; --------------- 
05ba			; 
05ba			; With current bank 
05ba			;  
05ba			; From given starting logical block 
05ba			;    Read block  
05ba			;    If no file id 
05ba			;         Return block id 
05ba			 
05ba			 
05ba			; hl starting page number 
05ba			; hl contains free page number or zero if no pages free 
05ba			; e contains the file id to locate 
05ba			; d contains the block number 
05ba			 
05ba			; TODO change to find file id and use zero for free block 
05ba			 
05ba			storage_findnextid: 
05ba			 
05ba				; now locate first 0 page to mark as a free block 
05ba			 
05ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05bc			;	ld hl, STORE_BLOCK_PHY 
05bc			 
05bc					if DEBUG_FORTH_WORDS 
05bc					DMARK "FNI" 
05bc f5				push af  
05bd 3a d1 05			ld a, (.dmark)  
05c0 32 65 ee			ld (debug_mark),a  
05c3 3a d2 05			ld a, (.dmark+1)  
05c6 32 66 ee			ld (debug_mark+1),a  
05c9 3a d3 05			ld a, (.dmark+2)  
05cc 32 67 ee			ld (debug_mark+2),a  
05cf 18 03			jr .pastdmark  
05d1 ..			.dmark: db "FNI"  
05d4 f1			.pastdmark: pop af  
05d5			endm  
# End of macro DMARK
05d5						CALLMONITOR 
05d5 cd 6f ee			call debug_vector  
05d8				endm  
# End of macro CALLMONITOR
05d8					endif 
05d8			.ff1:   	 
05d8 e5					push hl 
05d9 c5					push bc 
05da d5					push de 
05db cd ab 01				call se_readbyte 
05de 5f					ld e,a 
05df 23					inc hl 
05e0 cd ab 01				call se_readbyte 
05e3 57					ld d, a 
05e4 e1					pop hl 
05e5 e5					push hl 
05e6 cd 13 0e				call cmp16 
05e9 28 49				jr z, .fffound 
05eb			 
05eb d1					pop de 
05ec c1					pop bc 
05ed e1					pop hl 
05ee			 
05ee					; is found? 
05ee					;cp e 
05ee					;ret z 
05ee			 
05ee 3e 40				ld a, STORE_BLOCK_PHY 
05f0 cd f5 0d				call addatohl 
05f3 10 e3				djnz .ff1 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7			.ff2:   	 
05f7			 
05f7 e5					push hl 
05f8 c5					push bc 
05f9 d5					push de 
05fa cd ab 01				call se_readbyte 
05fd 5f					ld e,a 
05fe 23					inc hl 
05ff cd ab 01				call se_readbyte 
0602 57					ld d, a 
0603			 
0603 e1					pop hl 
0604 e5					push hl 
0605 cd 13 0e				call cmp16 
0608 28 2a				jr z, .fffound 
060a			 
060a d1					pop de 
060b c1					pop bc 
060c e1					pop hl 
060d					; is found? 
060d					;cp e 
060d					;ret z 
060d			 
060d 3e 40				ld a, STORE_BLOCK_PHY 
060f cd f5 0d				call addatohl 
0612 10 e3				djnz .ff2 
0614			 
0614			 
0614					if DEBUG_FORTH_WORDS 
0614					DMARK "FN-" 
0614 f5				push af  
0615 3a 29 06			ld a, (.dmark)  
0618 32 65 ee			ld (debug_mark),a  
061b 3a 2a 06			ld a, (.dmark+1)  
061e 32 66 ee			ld (debug_mark+1),a  
0621 3a 2b 06			ld a, (.dmark+2)  
0624 32 67 ee			ld (debug_mark+2),a  
0627 18 03			jr .pastdmark  
0629 ..			.dmark: db "FN-"  
062c f1			.pastdmark: pop af  
062d			endm  
# End of macro DMARK
062d					;	push af 
062d					;	ld a, 'n' 
062d					;	ld (debug_mark),a 
062d					;	pop af 
062d						CALLMONITOR 
062d cd 6f ee			call debug_vector  
0630				endm  
# End of macro CALLMONITOR
0630					endif 
0630				; no free marks! 
0630 21 00 00				ld hl, 0 
0633 c9				ret 
0634			.fffound: 
0634				 
0634			 
0634 d1					pop de 
0635 c1					pop bc 
0636 e1					pop hl 
0637					if DEBUG_FORTH_WORDS 
0637					DMARK "FNF" 
0637 f5				push af  
0638 3a 4c 06			ld a, (.dmark)  
063b 32 65 ee			ld (debug_mark),a  
063e 3a 4d 06			ld a, (.dmark+1)  
0641 32 66 ee			ld (debug_mark+1),a  
0644 3a 4e 06			ld a, (.dmark+2)  
0647 32 67 ee			ld (debug_mark+2),a  
064a 18 03			jr .pastdmark  
064c ..			.dmark: db "FNF"  
064f f1			.pastdmark: pop af  
0650			endm  
# End of macro DMARK
0650					;	push af 
0650					;	ld a, 'n' 
0650					;	ld (debug_mark),a 
0650					;	pop af 
0650						CALLMONITOR 
0650 cd 6f ee			call debug_vector  
0653				endm  
# End of macro CALLMONITOR
0653					endif 
0653 c9				ret 
0654			 
0654			 
0654			 
0654			; Free Space 
0654			; ---------- 
0654			; 
0654			; With current bank 
0654			; 
0654			; Set block count to zero 
0654			; Starting with first logical block 
0654			;      Find free block  
0654			;      If block id given, increment block count 
0654			; 
0654			;  
0654			 
0654			 
0654			; hl contains count of free blocks 
0654			 
0654			storage_freeblocks: 
0654			 
0654				; now locate first 0 page to mark as a free block 
0654			 
0654 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0656 21 40 00			ld hl, STORE_BLOCK_PHY 
0659 11 00 00			ld de, 0 
065c			 
065c			.fb1:   	 
065c e5					push hl 
065d c5					push bc 
065e d5					push de 
065f cd ab 01				call se_readbyte 
0662 d1					pop de 
0663 c1					pop bc 
0664 e1					pop hl 
0665			 
0665					; is free? 
0665 fe 00				cp 0 
0667 20 01				jr nz, .ff1cont 
0669 13					inc de 
066a			 
066a			.ff1cont: 
066a			 
066a			 
066a 3e 40				ld a, STORE_BLOCK_PHY 
066c cd f5 0d				call addatohl 
066f 10 eb				djnz .fb1 
0671			 
0671 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0673			.fb2:   	 
0673 e5					push hl 
0674 c5					push bc 
0675 d5					push de 
0676 cd ab 01				call se_readbyte 
0679 d1					pop de 
067a c1					pop bc 
067b e1					pop hl 
067c			 
067c					; is free? 
067c fe 00				cp 0 
067e 20 01				jr nz, .ff2cont 
0680 13					inc de 
0681			 
0681			.ff2cont: 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd f5 0d				call addatohl 
0686 10 eb				djnz .fb2 
0688			 
0688 eb				ex de, hl 
0689 c9				ret 
068a			 
068a			; Get File ID 
068a			; ----------- 
068a			; 
068a			; With current bank 
068a			;  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; For each logical block 
068a			;    Read block file id 
068a			;      If first block of file and dont have file id 
068a			;         if file get id and exit 
068a			 
068a			 
068a			 
068a			 
068a			; Create File 
068a			; ----------- 
068a			; 
068a			; With current bank  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; Increment file id number 
068a			; Save Config 
068a			; Find free block 
068a			; Set buffer with file name and file id 
068a			; Write buffer to free block  
068a			 
068a			 
068a			; hl point to file name 
068a			; hl returns file id 
068a			 
068a			; file format: 
068a			; byte 0 - file id 
068a			; byte 1 - extent number 
068a			; byte 2-> data 
068a			 
068a			; format for extent number 0: 
068a			; 
068a			; byte 0 - file id 
068a			; byte 1 - extent 0 
068a			; byte 2 - extent count 
068a			; byte 3 -> file name and meta data 
068a			 
068a			 
068a			storage_create: 
068a				if DEBUG_STORESE 
068a					DMARK "SCR" 
068a f5				push af  
068b 3a 9f 06			ld a, (.dmark)  
068e 32 65 ee			ld (debug_mark),a  
0691 3a a0 06			ld a, (.dmark+1)  
0694 32 66 ee			ld (debug_mark+1),a  
0697 3a a1 06			ld a, (.dmark+2)  
069a 32 67 ee			ld (debug_mark+2),a  
069d 18 03			jr .pastdmark  
069f ..			.dmark: db "SCR"  
06a2 f1			.pastdmark: pop af  
06a3			endm  
# End of macro DMARK
06a3					CALLMONITOR 
06a3 cd 6f ee			call debug_vector  
06a6				endm  
# End of macro CALLMONITOR
06a6				endif 
06a6			 
06a6 e5				push hl		; save file name pointer 
06a7			 
06a7 cd 38 03			call storage_get_block_0 
06aa			 
06aa 3a 74 ea			ld a,(store_page)	; get current file id 
06ad 3c				inc a 
06ae 32 74 ea			ld (store_page),a 
06b1				 
06b1 32 68 ea			ld (store_tmpid),a			; save id 
06b4			 
06b4 21 00 00			ld hl, 0 
06b7 11 74 ea			ld de, store_page 
06ba				if DEBUG_STORESE 
06ba					DMARK "SCw" 
06ba f5				push af  
06bb 3a cf 06			ld a, (.dmark)  
06be 32 65 ee			ld (debug_mark),a  
06c1 3a d0 06			ld a, (.dmark+1)  
06c4 32 66 ee			ld (debug_mark+1),a  
06c7 3a d1 06			ld a, (.dmark+2)  
06ca 32 67 ee			ld (debug_mark+2),a  
06cd 18 03			jr .pastdmark  
06cf ..			.dmark: db "SCw"  
06d2 f1			.pastdmark: pop af  
06d3			endm  
# End of macro DMARK
06d3					CALLMONITOR 
06d3 cd 6f ee			call debug_vector  
06d6				endm  
# End of macro CALLMONITOR
06d6				endif 
06d6 cd ec 02			call storage_write_block	 ; save update 
06d9			 
06d9				if DEBUG_STORESE 
06d9 11 74 ea				ld de, store_page 
06dc					DMARK "SCC" 
06dc f5				push af  
06dd 3a f1 06			ld a, (.dmark)  
06e0 32 65 ee			ld (debug_mark),a  
06e3 3a f2 06			ld a, (.dmark+1)  
06e6 32 66 ee			ld (debug_mark+1),a  
06e9 3a f3 06			ld a, (.dmark+2)  
06ec 32 67 ee			ld (debug_mark+2),a  
06ef 18 03			jr .pastdmark  
06f1 ..			.dmark: db "SCC"  
06f4 f1			.pastdmark: pop af  
06f5			endm  
# End of macro DMARK
06f5					CALLMONITOR 
06f5 cd 6f ee			call debug_vector  
06f8				endm  
# End of macro CALLMONITOR
06f8				endif 
06f8				;  
06f8				 
06f8 21 40 00			ld hl, STORE_BLOCK_PHY 
06fb 11 00 00			ld de, 0 
06fe cd ba 05			call storage_findnextid 
0701			 
0701 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
0704			 
0704				; TODO detect 0 = no spare blocks 
0704			 
0704				; hl now contains the free page to use for the file header page 
0704			 
0704				if DEBUG_STORESE 
0704				DMARK "SCF" 
0704 f5				push af  
0705 3a 19 07			ld a, (.dmark)  
0708 32 65 ee			ld (debug_mark),a  
070b 3a 1a 07			ld a, (.dmark+1)  
070e 32 66 ee			ld (debug_mark+1),a  
0711 3a 1b 07			ld a, (.dmark+2)  
0714 32 67 ee			ld (debug_mark+2),a  
0717 18 03			jr .pastdmark  
0719 ..			.dmark: db "SCF"  
071c f1			.pastdmark: pop af  
071d			endm  
# End of macro DMARK
071d					CALLMONITOR 
071d cd 6f ee			call debug_vector  
0720				endm  
# End of macro CALLMONITOR
0720				endif 
0720			 
0720 22 5f ea			ld (store_tmppageid), hl 
0723				 
0723 3a 68 ea			ld a,(store_tmpid)    ; get file id 
0726			;	ld a, (store_filecache)			; save to cache 
0726			 
0726 32 74 ea			ld (store_page),a    ; set page id 
0729 3e 00			ld a, 0			 ; extent 0 is file header 
072b 32 75 ea			ld (store_page+1), a   ; set file extent 
072e			 
072e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
0731			 
0731			;	inc hl 		; init block 0 of file 
0731			;	inc hl   		; skip file and extent id 
0731			 ;       ld a, 0 
0731			;	ld (hl),a 
0731			;	ld a, (store_filecache+1)  	; save to cache 
0731			 
0731			;	inc hl    ; file name 
0731				 
0731				 
0731 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
0734				if DEBUG_STORESE 
0734					DMARK "SCc" 
0734 f5				push af  
0735 3a 49 07			ld a, (.dmark)  
0738 32 65 ee			ld (debug_mark),a  
073b 3a 4a 07			ld a, (.dmark+1)  
073e 32 66 ee			ld (debug_mark+1),a  
0741 3a 4b 07			ld a, (.dmark+2)  
0744 32 67 ee			ld (debug_mark+2),a  
0747 18 03			jr .pastdmark  
0749 ..			.dmark: db "SCc"  
074c f1			.pastdmark: pop af  
074d			endm  
# End of macro DMARK
074d					CALLMONITOR 
074d cd 6f ee			call debug_vector  
0750				endm  
# End of macro CALLMONITOR
0750				endif 
0750 e1				pop hl    ; get zero term string 
0751 e5				push hl 
0752 3e 00			ld a, 0 
0754 cd 66 11			call strlent 
0757 23				inc hl   ; cover zero term 
0758 06 00			ld b,0 
075a 4d				ld c,l 
075b e1				pop hl 
075c				;ex de, hl 
075c				if DEBUG_STORESE 
075c					DMARK "SCa" 
075c f5				push af  
075d 3a 71 07			ld a, (.dmark)  
0760 32 65 ee			ld (debug_mark),a  
0763 3a 72 07			ld a, (.dmark+1)  
0766 32 66 ee			ld (debug_mark+1),a  
0769 3a 73 07			ld a, (.dmark+2)  
076c 32 67 ee			ld (debug_mark+2),a  
076f 18 03			jr .pastdmark  
0771 ..			.dmark: db "SCa"  
0774 f1			.pastdmark: pop af  
0775			endm  
# End of macro DMARK
0775					;push af 
0775					;ld a, 'a' 
0775					;ld (debug_mark),a 
0775					;pop af 
0775					CALLMONITOR 
0775 cd 6f ee			call debug_vector  
0778				endm  
# End of macro CALLMONITOR
0778				endif 
0778 ed b0			ldir    ; copy zero term string 
077a				if DEBUG_STORESE 
077a					DMARK "SCA" 
077a f5				push af  
077b 3a 8f 07			ld a, (.dmark)  
077e 32 65 ee			ld (debug_mark),a  
0781 3a 90 07			ld a, (.dmark+1)  
0784 32 66 ee			ld (debug_mark+1),a  
0787 3a 91 07			ld a, (.dmark+2)  
078a 32 67 ee			ld (debug_mark+2),a  
078d 18 03			jr .pastdmark  
078f ..			.dmark: db "SCA"  
0792 f1			.pastdmark: pop af  
0793			endm  
# End of macro DMARK
0793					CALLMONITOR 
0793 cd 6f ee			call debug_vector  
0796				endm  
# End of macro CALLMONITOR
0796				endif 
0796			 
0796				; write file header page 
0796			 
0796 2a 5f ea			ld hl,(store_tmppageid) 
0799 11 74 ea			ld de, store_page 
079c				if DEBUG_STORESE 
079c					DMARK "SCb" 
079c f5				push af  
079d 3a b1 07			ld a, (.dmark)  
07a0 32 65 ee			ld (debug_mark),a  
07a3 3a b2 07			ld a, (.dmark+1)  
07a6 32 66 ee			ld (debug_mark+1),a  
07a9 3a b3 07			ld a, (.dmark+2)  
07ac 32 67 ee			ld (debug_mark+2),a  
07af 18 03			jr .pastdmark  
07b1 ..			.dmark: db "SCb"  
07b4 f1			.pastdmark: pop af  
07b5			endm  
# End of macro DMARK
07b5					;push af 
07b5					;ld a, 'b' 
07b5					;ld (debug_mark),a 
07b5					;pop af 
07b5					CALLMONITOR 
07b5 cd 6f ee			call debug_vector  
07b8				endm  
# End of macro CALLMONITOR
07b8				endif 
07b8 cd ec 02			call storage_write_block 
07bb			 
07bb 3a 68 ea			ld a, (store_tmpid) 
07be 6f				ld l, a 
07bf 26 00			ld h,0 
07c1				if DEBUG_STORESE 
07c1					DMARK "SCz" 
07c1 f5				push af  
07c2 3a d6 07			ld a, (.dmark)  
07c5 32 65 ee			ld (debug_mark),a  
07c8 3a d7 07			ld a, (.dmark+1)  
07cb 32 66 ee			ld (debug_mark+1),a  
07ce 3a d8 07			ld a, (.dmark+2)  
07d1 32 67 ee			ld (debug_mark+2),a  
07d4 18 03			jr .pastdmark  
07d6 ..			.dmark: db "SCz"  
07d9 f1			.pastdmark: pop af  
07da			endm  
# End of macro DMARK
07da					CALLMONITOR 
07da cd 6f ee			call debug_vector  
07dd				endm  
# End of macro CALLMONITOR
07dd				endif 
07dd c9				ret 
07de				 
07de			 
07de			 
07de			; 
07de			; Read File 
07de			; 
07de			; h - file id to locate 
07de			; l - extent to locate 
07de			; de - pointer to string to read into 
07de			; 
07de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
07de			 
07de			.sr_fail: 
07de d1				pop de 
07df c9				ret 
07e0			 
07e0			storage_read: 
07e0			 
07e0			 
07e0 d5				push de 
07e1			 
07e1			; TODO BUG the above push is it popped before the RET Z? 
07e1			 
07e1			; TODO how to handle multiple part blocks 
07e1			 
07e1				; locate file extent to read 
07e1			 
07e1 5c				ld e, h 
07e2 55				ld d, l 
07e3			 
07e3			.srext: 
07e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
07e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
07ea			 
07ea 21 40 00			ld hl, STORE_BLOCK_PHY 
07ed				if DEBUG_STORESE 
07ed					DMARK "sre" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 65 ee			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 66 ee			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 67 ee			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "sre"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 6f ee			call debug_vector  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809 cd ba 05			call storage_findnextid 
080c			 
080c				if DEBUG_STORESE 
080c					DMARK "srf" 
080c f5				push af  
080d 3a 21 08			ld a, (.dmark)  
0810 32 65 ee			ld (debug_mark),a  
0813 3a 22 08			ld a, (.dmark+1)  
0816 32 66 ee			ld (debug_mark+1),a  
0819 3a 23 08			ld a, (.dmark+2)  
081c 32 67 ee			ld (debug_mark+2),a  
081f 18 03			jr .pastdmark  
0821 ..			.dmark: db "srf"  
0824 f1			.pastdmark: pop af  
0825			endm  
# End of macro DMARK
0825					CALLMONITOR 
0825 cd 6f ee			call debug_vector  
0828				endm  
# End of macro CALLMONITOR
0828				endif 
0828 cd 1e 0e			call ishlzero 
082b			;	ld a, l 
082b			;	add h 
082b			;	cp 0 
082b 28 b1			jr z,.sr_fail			; block not found so EOF 
082d			 
082d				; save current address for use by higher level words etc 
082d			 
082d 22 65 ea			ld (store_openaddr),hl 
0830			 
0830			 
0830				; hl contains page number to load 
0830 d1				pop de   ; get storage 
0831 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
0835 d5				push de 
0836				if DEBUG_STORESE 
0836					DMARK "srg" 
0836 f5				push af  
0837 3a 4b 08			ld a, (.dmark)  
083a 32 65 ee			ld (debug_mark),a  
083d 3a 4c 08			ld a, (.dmark+1)  
0840 32 66 ee			ld (debug_mark+1),a  
0843 3a 4d 08			ld a, (.dmark+2)  
0846 32 67 ee			ld (debug_mark+2),a  
0849 18 03			jr .pastdmark  
084b ..			.dmark: db "srg"  
084e f1			.pastdmark: pop af  
084f			endm  
# End of macro DMARK
084f					CALLMONITOR 
084f cd 6f ee			call debug_vector  
0852				endm  
# End of macro CALLMONITOR
0852				endif 
0852 cd 87 02			call storage_read_block 
0855			 
0855				; if this a continuation read??? 
0855			 
0855 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
0858			 
0858 3e 3f			ld a, STORE_BLOCK_PHY-1 
085a cd f5 0d			call addatohl 
085d 7e				ld a,(hl) 
085e fe 00			cp 0 
0860 28 02			jr z, .markiscont 
0862 3e ff			ld a, 255 
0864			 
0864			.markiscont: 
0864 32 67 ea			ld (store_readcont), a 
0867			 
0867				if DEBUG_STORESE 
0867					DMARK "srC" 
0867 f5				push af  
0868 3a 7c 08			ld a, (.dmark)  
086b 32 65 ee			ld (debug_mark),a  
086e 3a 7d 08			ld a, (.dmark+1)  
0871 32 66 ee			ld (debug_mark+1),a  
0874 3a 7e 08			ld a, (.dmark+2)  
0877 32 67 ee			ld (debug_mark+2),a  
087a 18 03			jr .pastdmark  
087c ..			.dmark: db "srC"  
087f f1			.pastdmark: pop af  
0880			endm  
# End of macro DMARK
0880					CALLMONITOR 
0880 cd 6f ee			call debug_vector  
0883				endm  
# End of macro CALLMONITOR
0883				endif 
0883				; only short reads enabled 
0883			 
0883 3a 6f ea			ld a, (store_longread) 
0886 fe 00			cp 0 
0888 ca 55 09			jp z, .readdone 
088b			 
088b			; TODO if block has no zeros then need to read next block  
088b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
088b			; check last byte of physical block. 
088b			; if not zero then the next block needs to be loaded 
088b			 
088b			 
088b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
088e			 
088e 3e 3f			ld a, STORE_BLOCK_PHY-1 
0890 cd f5 0d			call addatohl 
0893				;dec hl 
0893 7e				ld a,(hl) 
0894				if DEBUG_STORESE 
0894					DMARK "sr?" 
0894 f5				push af  
0895 3a a9 08			ld a, (.dmark)  
0898 32 65 ee			ld (debug_mark),a  
089b 3a aa 08			ld a, (.dmark+1)  
089e 32 66 ee			ld (debug_mark+1),a  
08a1 3a ab 08			ld a, (.dmark+2)  
08a4 32 67 ee			ld (debug_mark+2),a  
08a7 18 03			jr .pastdmark  
08a9 ..			.dmark: db "sr?"  
08ac f1			.pastdmark: pop af  
08ad			endm  
# End of macro DMARK
08ad					CALLMONITOR 
08ad cd 6f ee			call debug_vector  
08b0				endm  
# End of macro CALLMONITOR
08b0				endif 
08b0 fe 00			cp 0 
08b2 ca 55 09			jp z, .readdone 
08b5			 
08b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
08b5			 
08b5 23				inc hl 
08b6			 
08b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
08b9			 
08b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
08bd			 
08bd eb				ex de, hl 
08be			 
08be				; next ext 
08be			 
08be 23				inc hl 
08bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
08c2			 
08c2				if DEBUG_STORESE 
08c2					DMARK "sF2" 
08c2 f5				push af  
08c3 3a d7 08			ld a, (.dmark)  
08c6 32 65 ee			ld (debug_mark),a  
08c9 3a d8 08			ld a, (.dmark+1)  
08cc 32 66 ee			ld (debug_mark+1),a  
08cf 3a d9 08			ld a, (.dmark+2)  
08d2 32 67 ee			ld (debug_mark+2),a  
08d5 18 03			jr .pastdmark  
08d7 ..			.dmark: db "sF2"  
08da f1			.pastdmark: pop af  
08db			endm  
# End of macro DMARK
08db					CALLMONITOR 
08db cd 6f ee			call debug_vector  
08de				endm  
# End of macro CALLMONITOR
08de				endif 
08de			 
08de				; get and load block 
08de			 
08de cd ba 05			call storage_findnextid 
08e1			 
08e1				if DEBUG_STORESE 
08e1					DMARK "sf2" 
08e1 f5				push af  
08e2 3a f6 08			ld a, (.dmark)  
08e5 32 65 ee			ld (debug_mark),a  
08e8 3a f7 08			ld a, (.dmark+1)  
08eb 32 66 ee			ld (debug_mark+1),a  
08ee 3a f8 08			ld a, (.dmark+2)  
08f1 32 67 ee			ld (debug_mark+2),a  
08f4 18 03			jr .pastdmark  
08f6 ..			.dmark: db "sf2"  
08f9 f1			.pastdmark: pop af  
08fa			endm  
# End of macro DMARK
08fa					CALLMONITOR 
08fa cd 6f ee			call debug_vector  
08fd				endm  
# End of macro CALLMONITOR
08fd				endif 
08fd cd 1e 0e			call ishlzero 
0900			;	ld a, l 
0900			;	add h 
0900			;	cp 0 
0900 ca de 07			jp z,.sr_fail			; block not found so EOF 
0903				 
0903				; save current address for use by higher level words etc 
0903			 
0903 22 65 ea			ld (store_openaddr),hl 
0906			 
0906 cd 87 02			call storage_read_block 
0909			 
0909				; on a continuation block, we now have the file id and ext in the middle of the block 
0909				; we need to pull everything back  
0909			 
0909 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
090d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0910 23				inc hl 
0911 23				inc hl     ; skip id and ext 
0912 01 40 00			ld bc, STORE_BLOCK_PHY 
0915				if DEBUG_STORESE 
0915					DMARK "SR<" 
0915 f5				push af  
0916 3a 2a 09			ld a, (.dmark)  
0919 32 65 ee			ld (debug_mark),a  
091c 3a 2b 09			ld a, (.dmark+1)  
091f 32 66 ee			ld (debug_mark+1),a  
0922 3a 2c 09			ld a, (.dmark+2)  
0925 32 67 ee			ld (debug_mark+2),a  
0928 18 03			jr .pastdmark  
092a ..			.dmark: db "SR<"  
092d f1			.pastdmark: pop af  
092e			endm  
# End of macro DMARK
092e					CALLMONITOR 
092e cd 6f ee			call debug_vector  
0931				endm  
# End of macro CALLMONITOR
0931				endif 
0931 ed b0			ldir     ; copy data 
0933			 
0933				; move the pointer back and pretend we have a full buffer for next recheck 
0933			 
0933 1b				dec de 
0934 1b				dec de 
0935			 
0935			; TODO do pop below now short circuit loop????? 
0935 c1				pop bc     ; get rid of spare de on stack 
0936				if DEBUG_STORESE 
0936					DMARK "SR>" 
0936 f5				push af  
0937 3a 4b 09			ld a, (.dmark)  
093a 32 65 ee			ld (debug_mark),a  
093d 3a 4c 09			ld a, (.dmark+1)  
0940 32 66 ee			ld (debug_mark+1),a  
0943 3a 4d 09			ld a, (.dmark+2)  
0946 32 67 ee			ld (debug_mark+2),a  
0949 18 03			jr .pastdmark  
094b ..			.dmark: db "SR>"  
094e f1			.pastdmark: pop af  
094f			endm  
# End of macro DMARK
094f					CALLMONITOR 
094f cd 6f ee			call debug_vector  
0952				endm  
# End of macro CALLMONITOR
0952				endif 
0952 c3 e3 07			jp .srext 
0955			 
0955			 
0955			 
0955			 
0955			 
0955			.readdone:		 
0955 e1				pop hl 		 ; return start of data to show as not EOF 
0956 23				inc hl   ; past file id 
0957 23				inc hl   ; past ext 
0958				if DEBUG_STORESE 
0958					DMARK "SRe" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 65 ee			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 66 ee			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 67 ee			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SRe"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6f ee			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974 c9					ret 
0975			 
0975			 
0975			 
0975			; 
0975			; Append File 
0975			; 
0975			; hl - file id to locate 
0975			; de - pointer to (multi block) string to write 
0975			 
0975			.sa_notfound: 
0975 d1				pop de 
0976 c9				ret 
0977			 
0977			 
0977			storage_append: 
0977				; hl -  file id to append to 
0977				; de - string to append 
0977			 
0977 d5				push de 
0978				 
0978				if DEBUG_STORESE 
0978					DMARK "AP1" 
0978 f5				push af  
0979 3a 8d 09			ld a, (.dmark)  
097c 32 65 ee			ld (debug_mark),a  
097f 3a 8e 09			ld a, (.dmark+1)  
0982 32 66 ee			ld (debug_mark+1),a  
0985 3a 8f 09			ld a, (.dmark+2)  
0988 32 67 ee			ld (debug_mark+2),a  
098b 18 03			jr .pastdmark  
098d ..			.dmark: db "AP1"  
0990 f1			.pastdmark: pop af  
0991			endm  
# End of macro DMARK
0991					CALLMONITOR 
0991 cd 6f ee			call debug_vector  
0994				endm  
# End of macro CALLMONITOR
0994				endif 
0994			 
0994 7d				ld a, l 
0995 32 68 ea			ld (store_tmpid), a 
0998			 
0998				; get file header  
0998			 
0998 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
099a 3a 68 ea			ld a, (store_tmpid) 
099d 5f				ld e, a 
099e			 
099e 21 40 00				ld hl, STORE_BLOCK_PHY 
09a1 cd ba 05				call storage_findnextid 
09a4			 
09a4 cd 1e 0e			call ishlzero 
09a7 28 cc			jr z, .sa_notfound 
09a9			 
09a9 22 5f ea			ld (store_tmppageid), hl 
09ac			 
09ac				; TODO handle file id not found 
09ac			 
09ac				if DEBUG_STORESE 
09ac					DMARK "AP2" 
09ac f5				push af  
09ad 3a c1 09			ld a, (.dmark)  
09b0 32 65 ee			ld (debug_mark),a  
09b3 3a c2 09			ld a, (.dmark+1)  
09b6 32 66 ee			ld (debug_mark+1),a  
09b9 3a c3 09			ld a, (.dmark+2)  
09bc 32 67 ee			ld (debug_mark+2),a  
09bf 18 03			jr .pastdmark  
09c1 ..			.dmark: db "AP2"  
09c4 f1			.pastdmark: pop af  
09c5			endm  
# End of macro DMARK
09c5					CALLMONITOR 
09c5 cd 6f ee			call debug_vector  
09c8				endm  
# End of macro CALLMONITOR
09c8				endif 
09c8			 
09c8				; update file extent count 
09c8			 
09c8 11 74 ea			ld de, store_page 
09cb			 
09cb cd 87 02			call storage_read_block 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP3" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 65 ee			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 66 ee			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 67 ee			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP3"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 6f ee			call debug_vector  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			;	ld (store_tmppageid), hl 
09ea			 
09ea 3a 76 ea			ld a, (store_page+2) 
09ed 3c				inc a 
09ee 32 76 ea			ld (store_page+2), a 
09f1 32 67 ea			ld (store_tmpext), a 
09f4				 
09f4				if DEBUG_STORESE 
09f4					DMARK "AP3" 
09f4 f5				push af  
09f5 3a 09 0a			ld a, (.dmark)  
09f8 32 65 ee			ld (debug_mark),a  
09fb 3a 0a 0a			ld a, (.dmark+1)  
09fe 32 66 ee			ld (debug_mark+1),a  
0a01 3a 0b 0a			ld a, (.dmark+2)  
0a04 32 67 ee			ld (debug_mark+2),a  
0a07 18 03			jr .pastdmark  
0a09 ..			.dmark: db "AP3"  
0a0c f1			.pastdmark: pop af  
0a0d			endm  
# End of macro DMARK
0a0d					CALLMONITOR 
0a0d cd 6f ee			call debug_vector  
0a10				endm  
# End of macro CALLMONITOR
0a10				endif 
0a10 2a 5f ea			ld hl, (store_tmppageid) 
0a13 11 74 ea			ld de, store_page 
0a16 cd ec 02			call storage_write_block 
0a19			 
0a19				; find free block 
0a19			 
0a19 11 00 00			ld de, 0			 ; file extent to locate 
0a1c			 
0a1c 21 40 00				ld hl, STORE_BLOCK_PHY 
0a1f cd ba 05				call storage_findnextid 
0a22 cd 1e 0e			call ishlzero 
0a25 ca 75 09			jp z, .sa_notfound 
0a28			 
0a28					; TODO handle no space left 
0a28					 
0a28 22 5f ea				ld (store_tmppageid), hl 
0a2b			 
0a2b				if DEBUG_STORESE 
0a2b					DMARK "AP4" 
0a2b f5				push af  
0a2c 3a 40 0a			ld a, (.dmark)  
0a2f 32 65 ee			ld (debug_mark),a  
0a32 3a 41 0a			ld a, (.dmark+1)  
0a35 32 66 ee			ld (debug_mark+1),a  
0a38 3a 42 0a			ld a, (.dmark+2)  
0a3b 32 67 ee			ld (debug_mark+2),a  
0a3e 18 03			jr .pastdmark  
0a40 ..			.dmark: db "AP4"  
0a43 f1			.pastdmark: pop af  
0a44			endm  
# End of macro DMARK
0a44					CALLMONITOR 
0a44 cd 6f ee			call debug_vector  
0a47				endm  
# End of macro CALLMONITOR
0a47				endif 
0a47					; init the buffer with zeros so we can id if the buffer is full or not 
0a47			 
0a47 e5					push hl 
0a48 c5					push bc 
0a49			 
0a49 21 74 ea				ld hl, store_page 
0a4c 06 40				ld b, STORE_BLOCK_PHY 
0a4e 3e 00				ld a, 0 
0a50 77			.zeroblock:	ld (hl), a 
0a51 23					inc hl 
0a52 10 fc				djnz .zeroblock 
0a54			 
0a54 c1					pop bc 
0a55 e1					pop hl 
0a56			 
0a56					; construct block 
0a56			 
0a56 3a 68 ea				ld a, (store_tmpid) 
0a59 32 74 ea				ld (store_page), a   ; file id 
0a5c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
0a5f 32 75 ea				ld (store_page+1), a 
0a62			 
0a62 e1					pop hl    ; get string to write 
0a63 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0a65 11 76 ea				ld de, store_page+2 
0a68			 
0a68				if DEBUG_STORESE 
0a68					DMARK "AP5" 
0a68 f5				push af  
0a69 3a 7d 0a			ld a, (.dmark)  
0a6c 32 65 ee			ld (debug_mark),a  
0a6f 3a 7e 0a			ld a, (.dmark+1)  
0a72 32 66 ee			ld (debug_mark+1),a  
0a75 3a 7f 0a			ld a, (.dmark+2)  
0a78 32 67 ee			ld (debug_mark+2),a  
0a7b 18 03			jr .pastdmark  
0a7d ..			.dmark: db "AP5"  
0a80 f1			.pastdmark: pop af  
0a81			endm  
# End of macro DMARK
0a81					CALLMONITOR 
0a81 cd 6f ee			call debug_vector  
0a84				endm  
# End of macro CALLMONITOR
0a84				endif 
0a84			 
0a84			 
0a84			 
0a84					; fill buffer with data until end of string or full block 
0a84			 
0a84 7e			.appd:		ld a, (hl) 
0a85 12					ld (de), a 
0a86 fe 00				cp 0 
0a88 28 04				jr z, .appdone 
0a8a 23					inc hl 
0a8b 13					inc de 
0a8c 10 f6				djnz .appd 
0a8e			 
0a8e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0a8f f5					push af   		; save last byte dumped 
0a90			 
0a90			 
0a90 2a 5f ea			ld hl, (store_tmppageid) 
0a93 11 74 ea			ld de, store_page 
0a96				if DEBUG_STORESE 
0a96					DMARK "AP6" 
0a96 f5				push af  
0a97 3a ab 0a			ld a, (.dmark)  
0a9a 32 65 ee			ld (debug_mark),a  
0a9d 3a ac 0a			ld a, (.dmark+1)  
0aa0 32 66 ee			ld (debug_mark+1),a  
0aa3 3a ad 0a			ld a, (.dmark+2)  
0aa6 32 67 ee			ld (debug_mark+2),a  
0aa9 18 03			jr .pastdmark  
0aab ..			.dmark: db "AP6"  
0aae f1			.pastdmark: pop af  
0aaf			endm  
# End of macro DMARK
0aaf					CALLMONITOR 
0aaf cd 6f ee			call debug_vector  
0ab2				endm  
# End of macro CALLMONITOR
0ab2				endif 
0ab2 cd ec 02				call storage_write_block 
0ab5			 
0ab5			 
0ab5				; was that a full block of data written? 
0ab5				; any more to write out? 
0ab5			 
0ab5				; if yes then set vars and jump to start of function again 
0ab5			 
0ab5 f1					pop af 
0ab6 d1					pop de 
0ab7			 
0ab7 fe 00				cp 0		 ; no, string was fully written 
0ab9 c8					ret z 
0aba			 
0aba					; setup vars for next cycle 
0aba			 
0aba 3a 68 ea				ld a, (store_tmpid) 
0abd 6f					ld l, a 
0abe 26 00				ld h, 0 
0ac0			 
0ac0 c3 77 09			 	jp storage_append	 ; yes, need to write out some more 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			if DEBUG_STORECF 
0ac3			storageput:	 
0ac3					ret 
0ac3			storageread: 
0ac3					ld hl, store_page 
0ac3					ld b, 200 
0ac3					ld a,0 
0ac3			.src:		ld (hl),a 
0ac3					inc hl 
0ac3					djnz .src 
0ac3					 
0ac3			 
0ac3					ld de, 0 
0ac3					ld bc, 1 
0ac3					ld hl, store_page 
0ac3					call cfRead 
0ac3			 
0ac3				call cfGetError 
0ac3				ld hl,scratch 
0ac3				call hexout 
0ac3				ld hl, scratch+2 
0ac3				ld a, 0 
0ac3				ld (hl),a 
0ac3				ld de, scratch 
0ac3				ld a,display_row_1 
0ac3				call str_at_display 
0ac3				call update_display 
0ac3			 
0ac3					ld hl, store_page 
0ac3					ld (os_cur_ptr),hl 
0ac3			 
0ac3					ret 
0ac3			endif 
0ac3			 
0ac3			 
0ac3			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ac3			 
0ac3			storage_clear_page: 
0ac3 e5				push hl 
0ac4 d5				push de 
0ac5 c5				push bc 
0ac6 21 74 ea			ld hl, store_page 
0ac9 3e 00			ld a, 0 
0acb 77				ld (hl), a 
0acc			 
0acc 11 75 ea			ld de, store_page+1 
0acf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0ad2			 
0ad2 ed b0			ldir 
0ad4				 
0ad4 c1				pop bc 
0ad5 d1				pop de 
0ad6 e1				pop hl 
0ad7 c9				ret 
0ad8			 
0ad8			; eof 
# End of file firmware_storage.asm
0ad8			  
0ad8			; support routines for above hardware abstraction layer  
0ad8			  
0ad8			include "firmware_general.asm"        ; general support functions  
0ad8			 
0ad8			; word look up 
0ad8			 
0ad8			; in 
0ad8			; a is the index 
0ad8			; hl is pointer start of array 
0ad8			; 
0ad8			; returns 
0ad8			; hl to the word 
0ad8			; 
0ad8			 
0ad8			table_lookup:  
0ad8 d5					push de 
0ad9 eb					ex de, hl 
0ada			 
0ada 6f					ld l, a 
0adb 26 00				ld h, 0 
0add 29					add hl, hl 
0ade 19					add hl, de 
0adf 7e					ld a, (hl) 
0ae0 23					inc hl 
0ae1 66					ld h,(hl) 
0ae2 6f					ld l, a 
0ae3			 
0ae3 d1					pop de 
0ae4 c9					ret 
0ae5			 
0ae5			; Delay loops 
0ae5			 
0ae5			 
0ae5			 
0ae5			aDelayInMS: 
0ae5 c5				push bc 
0ae6 47				ld b,a 
0ae7			msdelay: 
0ae7 c5				push bc 
0ae8				 
0ae8			 
0ae8 01 41 00			ld bc,041h 
0aeb cd 03 0b			call delayloop 
0aee c1				pop bc 
0aef 05				dec b 
0af0 20 f5			jr nz,msdelay 
0af2			 
0af2			;if CPU_CLOCK_8MHZ 
0af2			;msdelay8: 
0af2			;	push bc 
0af2			;	 
0af2			; 
0af2			;	ld bc,041h 
0af2			;	call delayloop 
0af2			;	pop bc 
0af2			;	dec b 
0af2			;	jr nz,msdelay8 
0af2			;endif 
0af2			 
0af2			 
0af2 c1				pop bc 
0af3 c9				ret 
0af4			 
0af4			 
0af4			delay250ms: 
0af4				;push de 
0af4 01 00 40			ld bc, 04000h 
0af7 c3 03 0b			jp delayloop 
0afa			delay500ms: 
0afa				;push de 
0afa 01 00 80			ld bc, 08000h 
0afd c3 03 0b			jp delayloop 
0b00			delay1s: 
0b00				;push bc 
0b00			   ; Clobbers A, d and e 
0b00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0b03			delayloop: 
0b03 c5			    push bc 
0b04			 
0b04			if BASE_CPM 
0b04 01 a0 0f			ld bc, CPM_DELAY_TUNE 
0b07			.cpmloop: 
0b07 c5				push bc 
0b08			 
0b08			endif 
0b08			 
0b08			 
0b08			 
0b08			delayloopi: 
0b08			;	push bc 
0b08			;.dl: 
0b08 cb 47		    bit     0,a    	; 8 
0b0a cb 47		    bit     0,a    	; 8 
0b0c cb 47		    bit     0,a    	; 8 
0b0e e6 ff		    and     255  	; 7 
0b10 0b			    dec     bc      	; 6 
0b11 79			    ld      a,c     	; 4 
0b12 b0			    or      b     	; 4 
0b13 c2 08 0b		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0b16			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0b16				;pop de 
0b16			;pop bc 
0b16			 
0b16			if BASE_CPM 
0b16 c1				pop bc 
0b17				 
0b17 0b			    dec     bc      	; 6 
0b18 79			    ld      a,c     	; 4 
0b19 b0			    or      b     	; 4 
0b1a c2 07 0b		    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0b1d				 
0b1d			 
0b1d			endif 
0b1d			;if CPU_CLOCK_8MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d			 
0b1d			;if CPU_CLOCK_10MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d c1			    pop bc 
0b1e			 
0b1e c9				ret 
0b1f			 
0b1f			 
0b1f			 
0b1f			; eof 
# End of file firmware_general.asm
0b1f			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0b1f			; display routines that use the physical hardware abstraction layer 
0b1f			 
0b1f			 
0b1f			; Display an activity indicator 
0b1f			; Each call returns the new char pointed to in hl 
0b1f			 
0b1f			active: 
0b1f 3a c0 eb			ld a, (display_active) 
0b22 fe 06			cp 6 
0b24			 
0b24 20 02			jr nz, .sne 
0b26				; gone past the last one reset sequence 
0b26 3e ff			ld a, 255 
0b28			 
0b28			.sne:   
0b28				; get the next char in seq 
0b28 3c				inc a 
0b29 32 c0 eb			ld (display_active), a 
0b2c			 
0b2c				; look up the string in the table 
0b2c 21 43 0b			ld hl, actseq 
0b2f cb 27			sla a 
0b31 cd f5 0d			call addatohl 
0b34 cd 02 1f			call loadwordinhl 
0b37			 
0b37				; forth will write the to string when pushing so move from rom to ram 
0b37			 
0b37 11 c1 eb			ld de, display_active+1 
0b3a 01 02 00			ld bc, 2 
0b3d ed b0			ldir 
0b3f			 
0b3f 21 c1 eb			ld hl, display_active+1 
0b42 c9				ret 
0b43				 
0b43				 
0b43			 
0b43			 
0b43			;db "|/-\|-\" 
0b43			 
0b43			actseq: 
0b43			 
0b43 51 0b		dw spin0 
0b45 53 0b		dw spin1 
0b47 55 0b		dw spin2 
0b49 57 0b		dw spin3 
0b4b 55 0b		dw spin2 
0b4d 53 0b		dw spin1 
0b4f 51 0b		dw spin0 
0b51			 
0b51 .. 00		spin0: db " ", 0 
0b53 .. 00		spin1: db "-", 0 
0b55 .. 00		spin2: db "+", 0 
0b57 .. 00		spin3: db "#", 0 
0b59			 
0b59			 
0b59			; information window 
0b59			 
0b59			; pass hl with 1st string to display 
0b59			; pass de with 2nd string to display 
0b59			 
0b59			info_panel: 
0b59 e5				push hl 
0b5a			 
0b5a 2a c6 eb			ld hl, (display_fb_active) 
0b5d e5				push hl    ; future de destination 
0b5e 21 ab ed				ld hl, display_fb0 
0b61 22 c6 eb				ld (display_fb_active), hl 
0b64			 
0b64			;	call clear_display 
0b64			 
0b64				if BASE_CPM 
0b64 3e 2e			ld a, '.' 
0b66				else 
0b66				ld a, 165 
0b66				endif 
0b66 cd cd 0b			call fill_display 
0b69			 
0b69			 
0b69 3e 55			ld a, display_row_3 + 5 
0b6b cd db 0b			call str_at_display 
0b6e			 
0b6e e1				pop hl 
0b6f d1				pop de 
0b70			 
0b70 e5				push hl 
0b71			 
0b71			 
0b71 3e 2d			ld a, display_row_2 + 5 
0b73 cd db 0b			call str_at_display 
0b76			 
0b76			 
0b76 cd eb 0b			call update_display 
0b79 cd 08 1b			call next_page_prompt 
0b7c cd c8 0b			call clear_display 
0b7f			 
0b7f				 
0b7f 21 0a ed				ld hl, display_fb1 
0b82 22 c6 eb				ld (display_fb_active), hl 
0b85 cd eb 0b			call update_display 
0b88			 
0b88 e1				pop hl 
0b89			 
0b89 c9				ret 
0b8a			 
0b8a			 
0b8a			 
0b8a			 
0b8a			; TODO windowing? 
0b8a			 
0b8a			; TODO scroll line up 
0b8a			 
0b8a			scroll_up: 
0b8a			 
0b8a e5				push hl 
0b8b d5				push de 
0b8c c5				push bc 
0b8d			 
0b8d				; get frame buffer  
0b8d			 
0b8d 2a c6 eb			ld hl, (display_fb_active) 
0b90 e5				push hl    ; future de destination 
0b91			 
0b91 11 28 00			ld  de, display_cols 
0b94 19				add hl, de 
0b95			 
0b95 d1				pop de 
0b96			 
0b96				;ex de, hl 
0b96 01 9f 00			ld bc, display_fb_len -1  
0b99			;if DEBUG_FORTH_WORDS 
0b99			;	DMARK "SCL" 
0b99			;	CALLMONITOR 
0b99			;endif	 
0b99 ed b0			ldir 
0b9b			 
0b9b				; wipe bottom row 
0b9b			 
0b9b			 
0b9b 2a c6 eb			ld hl, (display_fb_active) 
0b9e 11 a0 00			ld de, display_cols*display_rows 
0ba1 19				add hl, de 
0ba2 06 28			ld b, display_cols 
0ba4 3e 20			ld a, ' ' 
0ba6			.scwipe: 
0ba6 77				ld (hl), a 
0ba7 2b				dec hl 
0ba8 10 fc			djnz .scwipe 
0baa			 
0baa				;pop hl 
0baa			 
0baa c1				pop bc 
0bab d1				pop de 
0bac e1				pop hl 
0bad			 
0bad c9				ret 
0bae			 
0bae			 
0bae			;scroll_upo: 
0bae			;	ld de, display_row_1 
0bae			 ;	ld hl, display_row_2 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_2 
0bae			 ;	ld hl, display_row_3 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_3 
0bae			 ;	ld hl, display_row_4 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			 
0bae			; TODO clear row 4 
0bae			 
0bae			;	ret 
0bae			 
0bae				 
0bae			scroll_down: 
0bae			 
0bae e5				push hl 
0baf d5				push de 
0bb0 c5				push bc 
0bb1			 
0bb1				; get frame buffer  
0bb1			 
0bb1 2a c6 eb			ld hl, (display_fb_active) 
0bb4			 
0bb4 11 9f 00			ld de, display_fb_len - 1 
0bb7 19				add hl, de 
0bb8			 
0bb8 e5			push hl    ; future de destination 
0bb9			 
0bb9 11 28 00			ld  de, display_cols 
0bbc ed 52			sbc hl, de 
0bbe			 
0bbe			 
0bbe d1				pop de 
0bbf			 
0bbf			;	ex de, hl 
0bbf 01 9f 00			ld bc, display_fb_len -1  
0bc2			 
0bc2			 
0bc2				 
0bc2			 
0bc2 ed b0			ldir 
0bc4			 
0bc4				; wipe bottom row 
0bc4			 
0bc4			 
0bc4			;	ld hl, (display_fb_active) 
0bc4			;;	ld de, display_cols*display_rows 
0bc4			;;	add hl, de 
0bc4			;	ld b, display_cols 
0bc4			;	ld a, ' ' 
0bc4			;.scwiped: 
0bc4			;	ld (hl), a 
0bc4			;	dec hl 
0bc4			;	djnz .scwiped 
0bc4			 
0bc4				;pop hl 
0bc4			 
0bc4 c1				pop bc 
0bc5 d1				pop de 
0bc6 e1				pop hl 
0bc7			 
0bc7 c9				ret 
0bc8			;scroll_down: 
0bc8			;	ld de, display_row_4 
0bc8			;	ld hl, display_row_3 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_3 
0bc8			; 	ld hl, display_row_2 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_2 
0bc8			;	ld hl, display_row_1 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;;; TODO clear row 1 
0bc8			;	ret 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			; clear active frame buffer 
0bc8			 
0bc8			clear_display: 
0bc8 3e 20			ld a, ' ' 
0bca c3 cd 0b			jp fill_display 
0bcd			 
0bcd			; fill active frame buffer with a char in A 
0bcd			 
0bcd			fill_display: 
0bcd 06 a0			ld b,display_fb_len 
0bcf 2a c6 eb			ld hl, (display_fb_active) 
0bd2 77			.fd1:	ld (hl),a 
0bd3 23				inc hl 
0bd4 10 fc			djnz .fd1 
0bd6 23				inc hl 
0bd7 3e 00			ld a,0 
0bd9 77				ld (hl),a 
0bda			 
0bda			 
0bda c9				ret 
0bdb			; Write string (DE) at pos (A) to active frame buffer 
0bdb			 
0bdb 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
0bde 06 00					ld b,0 
0be0 4f					ld c,a 
0be1 09					add hl,bc 
0be2 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0be3 b7			            OR   A              ;Null terminator? 
0be4 c8			            RET  Z              ;Yes, so finished 
0be5 77					ld (hl),a 
0be6 23				inc hl 
0be7 13			            INC  DE             ;Point to next character 
0be8 18 f8		            JR   .sad1     ;Repeat 
0bea c9					ret 
0beb			 
0beb			; using current frame buffer write to physical display 
0beb			 
0beb			update_display: 
0beb e5				push hl 
0bec 2a c6 eb			ld hl, (display_fb_active) 
0bef cd 4c 62			call write_display 
0bf2 e1				pop hl 
0bf3 c9				ret 
0bf4			 
0bf4			; TODO scrolling 
0bf4			 
0bf4			 
0bf4			; move cursor right one char 
0bf4			cursor_right: 
0bf4			 
0bf4				; TODO shift right 
0bf4				; TODO if beyond max col 
0bf4				; TODO       cursor_next_line 
0bf4			 
0bf4 c9				ret 
0bf5			 
0bf5			 
0bf5			cursor_next_line: 
0bf5				; TODO first char 
0bf5				; TODO line down 
0bf5				; TODO if past last row 
0bf5				; TODO    scroll up 
0bf5			 
0bf5 c9				ret 
0bf6			 
0bf6			cursor_left: 
0bf6				; TODO shift left 
0bf6				; TODO if beyond left  
0bf6				; TODO     cursor prev line 
0bf6				 
0bf6 c9				ret 
0bf7			 
0bf7			cursor_prev_line: 
0bf7				; TODO last char 
0bf7				; TODO line up 
0bf7				; TODO if past first row 
0bf7				; TODO   scroll down 
0bf7			 
0bf7 c9				ret 
0bf8			 
0bf8			 
0bf8			cout: 
0bf8				; A - char 
0bf8 c9				ret 
0bf9			 
0bf9			 
0bf9			; Display a menu and allow item selection (optional toggle items) 
0bf9			; 
0bf9			; format: 
0bf9			; hl pointer to word array with zero term for items 
0bf9			; e.g.    db item1 
0bf9			;         db .... 
0bf9			;         db 0 
0bf9			; 
0bf9			; a = starting menu item  
0bf9			; 
0bf9			; de = pointer item toggle array   (todo) 
0bf9			; 
0bf9			; returns item selected in a 1-... 
0bf9			; returns 0 if back button pressed 
0bf9			; 
0bf9			; NOTE: Uses system frame buffer to display 
0bf9			; 
0bf9			; LEFT, Q = go back 
0bf9			; RIGHT, SPACE, CR = select 
0bf9			; UP, A - Up 
0bf9			; DOWN, Z - Down 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			menu: 
0bf9			 
0bf9					; keep array pointer 
0bf9			 
0bf9 22 6d ea				ld (store_tmp1), hl 
0bfc 32 6b ea				ld (store_tmp2), a 
0bff			 
0bff					; check for key bounce 
0bff			 
0bff			if BASE_KEV 
0bff			 
0bff			.mbounce:	call cin 
0bff					cp 0 
0bff					jr nz, .mbounce 
0bff			endif 
0bff					; for ease use ex 
0bff			 
0bff					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0bff 21 ab ed				ld hl, display_fb0 
0c02 22 c6 eb				ld (display_fb_active), hl 
0c05			 
0c05 cd c8 0b		.mloop:		call clear_display 
0c08 cd eb 0b				call update_display 
0c0b			 
0c0b					; draw selection id '>' at 1 
0c0b			 
0c0b					; init start of list display 
0c0b			 
0c0b 3e 05				ld a, 5 
0c0d 32 69 ea				ld (store_tmp3), a   ; display row count 
0c10 3a 6b ea				ld a,( store_tmp2) 
0c13 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c16			 
0c16					 
0c16			.mitem:	 
0c16			 
0c16			 
0c16 3a 6c ea				ld a,(store_tmp2+1) 
0c19 6f					ld l, a 
0c1a 26 00				ld h, 0 
0c1c 29					add hl, hl 
0c1d ed 5b 6d ea			ld de, (store_tmp1) 
0c21 19					add hl, de 
0c22 7e					ld a, (hl) 
0c23 23					inc hl 
0c24 66					ld h,(hl) 
0c25 6f					ld l, a 
0c26			 
0c26 cd 1e 0e				call ishlzero 
0c29 28 1a				jr z, .mdone 
0c2b			 
0c2b eb					ex de, hl 
0c2c 3a 69 ea				ld a, (store_tmp3) 
0c2f cd db 0b				call str_at_display 
0c32					 
0c32			 
0c32					; next item 
0c32 3a 6c ea				ld a, (store_tmp2+1) 
0c35 3c					inc a 
0c36 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c39			 
0c39			 		; next row 
0c39			 
0c39 3a 69 ea				ld a, (store_tmp3) 
0c3c c6 28				add display_cols 
0c3e 32 69 ea				ld (store_tmp3), a 
0c41			 
0c41					; at end of screen? 
0c41			 
0c41 fe 10				cp display_rows*4 
0c43 20 d1				jr nz, .mitem 
0c45			 
0c45			 
0c45			.mdone: 
0c45 cd 1e 0e				call ishlzero 
0c48 28 08				jr z, .nodn 
0c4a			 
0c4a 3e 78				ld a, display_row_4 
0c4c 11 cb 0c				ld de, .mdown 
0c4f cd db 0b				call str_at_display 
0c52			 
0c52					; draw options to fill the screens with active item on line 1 
0c52					; if current option is 2 or more then display ^ in top 
0c52			 
0c52 3a 6b ea		.nodn:		ld a, (store_tmp2) 
0c55 fe 00				cp 0 
0c57 28 08				jr z, .noup 
0c59			 
0c59 3e 00				ld a, 0 
0c5b 11 c9 0c				ld de, .mup 
0c5e cd db 0b				call str_at_display 
0c61			 
0c61 3e 02		.noup:		ld a, 2 
0c63 11 c7 0c				ld de, .msel 
0c66 cd db 0b				call str_at_display 
0c69			 
0c69					; if current option + 1 is not null then display V in bottom 
0c69					; get key 
0c69 cd eb 0b				call update_display 
0c6c			 
0c6c			 
0c6c					; handle key 
0c6c			 
0c6c cd fe 62				call cin_wait 
0c6f			 
0c6f fe 05				cp KEY_UP 
0c71 28 2b				jr z, .mgoup 
0c73 fe 61				cp 'a' 
0c75 28 27				jr z, .mgoup 
0c77 fe 0a				cp KEY_DOWN 
0c79 28 32				jr z, .mgod 
0c7b fe 7a				cp 'z' 
0c7d 28 2e				jr z, .mgod 
0c7f fe 20				cp ' ' 
0c81 28 34				jr z, .goend 
0c83 fe 0c				cp KEY_RIGHT 
0c85 28 30				jr z, .goend 
0c87 fe 0d				cp KEY_CR 
0c89 28 2c				jr z, .goend 
0c8b fe 71				cp 'q' 
0c8d 28 0b				jr z, .goback 
0c8f			 
0c8f fe 0b				cp KEY_LEFT 
0c91 28 07				jr z, .goback 
0c93 fe 08				cp KEY_BS 
0c95 28 03				jr z, .goback 
0c97 c3 05 0c				jp .mloop 
0c9a			 
0c9a			.goback: 
0c9a 3e 00			ld a, 0 
0c9c 18 1d			jr .goend2 
0c9e			 
0c9e				; move up one 
0c9e			.mgoup: 
0c9e 3a 6b ea				ld a, (store_tmp2) 
0ca1 fe 00				cp 0 
0ca3 ca 05 0c				jp z, .mloop 
0ca6 3d					dec a 
0ca7 32 6b ea				ld (store_tmp2), a 
0caa c3 05 0c				jp .mloop 
0cad			 
0cad				; move down one 
0cad			.mgod: 
0cad 3a 6b ea				ld a, (store_tmp2) 
0cb0 3c					inc a 
0cb1 32 6b ea				ld (store_tmp2), a 
0cb4 c3 05 0c				jp .mloop 
0cb7			 
0cb7			 
0cb7			.goend: 
0cb7					; get selected item number 
0cb7			 
0cb7 3a 6b ea				ld a, (store_tmp2) 
0cba 3c					inc a 
0cbb			 
0cbb			.goend2: 
0cbb f5					push af 
0cbc			 
0cbc					; restore active fb 
0cbc					; TODO BUG assumes fb1 
0cbc			 
0cbc 21 0a ed				ld hl, display_fb1 
0cbf 22 c6 eb				ld (display_fb_active), hl 
0cc2			 
0cc2					; restore main regs 
0cc2			 
0cc2			 
0cc2 cd eb 0b				call update_display 
0cc5			 
0cc5 f1					pop af 
0cc6			 
0cc6 c9				ret 
0cc7			 
0cc7 .. 00		.msel:   db ">",0 
0cc9 .. 00		.mup:   db "^",0 
0ccb .. 00		.mdown:   db "v",0 
0ccd			 
0ccd			 
0ccd			; eof 
0ccd			 
# End of file firmware_display.asm
0ccd			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ccd			; random number generators 
0ccd			 
0ccd			 
0ccd			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ccd			 
0ccd			 
0ccd			;-----> Generate a random number 
0ccd			; output a=answer 0<=a<=255 
0ccd			; all registers are preserved except: af 
0ccd			random: 
0ccd e5			        push    hl 
0cce d5			        push    de 
0ccf 2a a5 eb		        ld      hl,(randData) 
0cd2 ed 5f		        ld      a,r 
0cd4 57			        ld      d,a 
0cd5 5e			        ld      e,(hl) 
0cd6 19			        add     hl,de 
0cd7 85			        add     a,l 
0cd8 ac			        xor     h 
0cd9 22 a5 eb		        ld      (randData),hl 
0cdc d1			        pop     de 
0cdd e1			        pop     hl 
0cde c9			        ret 
0cdf			 
0cdf			 
0cdf			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0cdf			 
0cdf			 
0cdf			 
0cdf			;------LFSR------ 
0cdf			;James Montelongo 
0cdf			;optimized by Spencer Putt 
0cdf			;out: 
0cdf			; a = 8 bit random number 
0cdf			RandLFSR: 
0cdf 21 ab eb		        ld hl,LFSRSeed+4 
0ce2 5e			        ld e,(hl) 
0ce3 23			        inc hl 
0ce4 56			        ld d,(hl) 
0ce5 23			        inc hl 
0ce6 4e			        ld c,(hl) 
0ce7 23			        inc hl 
0ce8 7e			        ld a,(hl) 
0ce9 47			        ld b,a 
0cea cb 13		        rl e  
0cec cb 12			rl d 
0cee cb 11		        rl c  
0cf0 17				rla 
0cf1 cb 13		        rl e  
0cf3 cb 12			rl d 
0cf5 cb 11		        rl c  
0cf7 17				rla 
0cf8 cb 13		        rl e  
0cfa cb 12			rl d 
0cfc cb 11		        rl c  
0cfe 17				rla 
0cff 67			        ld h,a 
0d00 cb 13		        rl e  
0d02 cb 12			rl d 
0d04 cb 11		        rl c  
0d06 17				rla 
0d07 a8			        xor b 
0d08 cb 13		        rl e  
0d0a cb 12			rl d 
0d0c ac			        xor h 
0d0d a9			        xor c 
0d0e aa			        xor d 
0d0f 21 ad eb		        ld hl,LFSRSeed+6 
0d12 11 ae eb		        ld de,LFSRSeed+7 
0d15 01 07 00		        ld bc,7 
0d18 ed b8		        lddr 
0d1a 12			        ld (de),a 
0d1b c9			        ret 
0d1c			 
0d1c			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0d1c			 
0d1c			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0d1c			 
0d1c			 
0d1c			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0d1c			 
0d1c			prng16: 
0d1c			;Inputs: 
0d1c			;   (seed1) contains a 16-bit seed value 
0d1c			;   (seed2) contains a NON-ZERO 16-bit seed value 
0d1c			;Outputs: 
0d1c			;   HL is the result 
0d1c			;   BC is the result of the LCG, so not that great of quality 
0d1c			;   DE is preserved 
0d1c			;Destroys: 
0d1c			;   AF 
0d1c			;cycle: 4,294,901,760 (almost 4.3 billion) 
0d1c			;160cc 
0d1c			;26 bytes 
0d1c 2a 9f eb		    ld hl,(seed1) 
0d1f 44			    ld b,h 
0d20 4d			    ld c,l 
0d21 29			    add hl,hl 
0d22 29			    add hl,hl 
0d23 2c			    inc l 
0d24 09			    add hl,bc 
0d25 22 9f eb		    ld (seed1),hl 
0d28 2a 9d eb		    ld hl,(seed2) 
0d2b 29			    add hl,hl 
0d2c 9f			    sbc a,a 
0d2d e6 2d		    and %00101101 
0d2f ad			    xor l 
0d30 6f			    ld l,a 
0d31 22 9d eb		    ld (seed2),hl 
0d34 09			    add hl,bc 
0d35 c9			    ret 
0d36			 
0d36			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0d36			 
0d36			rand32: 
0d36			;Inputs: 
0d36			;   (seed1_0) holds the lower 16 bits of the first seed 
0d36			;   (seed1_1) holds the upper 16 bits of the first seed 
0d36			;   (seed2_0) holds the lower 16 bits of the second seed 
0d36			;   (seed2_1) holds the upper 16 bits of the second seed 
0d36			;   **NOTE: seed2 must be non-zero 
0d36			;Outputs: 
0d36			;   HL is the result 
0d36			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0d36			;Destroys: 
0d36			;   AF 
0d36			;Tested and passes all CAcert tests 
0d36			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0d36			;it has a period of 18,446,744,069,414,584,320 
0d36			;roughly 18.4 quintillion. 
0d36			;LFSR taps: 0,2,6,7  = 11000101 
0d36			;291cc 
0d36			;seed1_0=$+1 
0d36			;    ld hl,12345 
0d36			;seed1_1=$+1 
0d36			;    ld de,6789 
0d36			;    ld b,h 
0d36			;    ld c,l 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    inc l 
0d36			;    add hl,bc 
0d36			;    ld (seed1_0),hl 
0d36			;    ld hl,(seed1_1) 
0d36			;    adc hl,de 
0d36			;    ld (seed1_1),hl 
0d36			;    ex de,hl 
0d36			;seed2_0=$+1 
0d36			;    ld hl,9876 
0d36			;seed2_1=$+1 
0d36			;    ld bc,54321 
0d36			;    add hl,hl \ rl c \ rl b 
0d36			;    ld (seed2_1),bc 
0d36			;    sbc a,a 
0d36			;    and %11000101 
0d36			;    xor l 
0d36			;    ld l,a 
0d36			;    ld (seed2_0),hl 
0d36			;    ex de,hl 
0d36			;    add hl,bc 
0d36			;    ret 
0d36			; 
0d36			 
0d36			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0d36			; 20 bytes, 86 cycles (excluding ret) 
0d36			 
0d36			; returns   hl = pseudorandom number 
0d36			; corrupts   a 
0d36			 
0d36			; generates 16-bit pseudorandom numbers with a period of 65535 
0d36			; using the xorshift method: 
0d36			 
0d36			; hl ^= hl << 7 
0d36			; hl ^= hl >> 9 
0d36			; hl ^= hl << 8 
0d36			 
0d36			; some alternative shift triplets which also perform well are: 
0d36			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0d36			 
0d36			;  org 32768 
0d36			 
0d36			xrnd: 
0d36 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
0d39 3e 00		  ld a,0 
0d3b bd			  cp l 
0d3c 20 02		  jr nz, .xrnd1 
0d3e 2e 01		  ld l, 1 
0d40			.xrnd1: 
0d40			 
0d40 7c			  ld a,h 
0d41 1f			  rra 
0d42 7d			  ld a,l 
0d43 1f			  rra 
0d44 ac			  xor h 
0d45 67			  ld h,a 
0d46 7d			  ld a,l 
0d47 1f			  rra 
0d48 7c			  ld a,h 
0d49 1f			  rra 
0d4a ad			  xor l 
0d4b 6f			  ld l,a 
0d4c ac			  xor h 
0d4d 67			  ld h,a 
0d4e			 
0d4e 22 a3 eb		  ld (xrandc),hl 
0d51			 
0d51 c9			  ret 
0d52			;  
0d52			 
0d52			 
0d52			;;;; int maths 
0d52			 
0d52			; https://map.grauw.nl/articles/mult_div_shifts.php 
0d52			; Divide 16-bit values (with 16-bit result) 
0d52			; In: Divide BC by divider DE 
0d52			; Out: BC = result, HL = rest 
0d52			; 
0d52			Div16: 
0d52 21 00 00		    ld hl,0 
0d55 78			    ld a,b 
0d56 06 08		    ld b,8 
0d58			Div16_Loop1: 
0d58 17			    rla 
0d59 ed 6a		    adc hl,hl 
0d5b ed 52		    sbc hl,de 
0d5d 30 01		    jr nc,Div16_NoAdd1 
0d5f 19			    add hl,de 
0d60			Div16_NoAdd1: 
0d60 10 f6		    djnz Div16_Loop1 
0d62 17			    rla 
0d63 2f			    cpl 
0d64 47			    ld b,a 
0d65 79			    ld a,c 
0d66 48			    ld c,b 
0d67 06 08		    ld b,8 
0d69			Div16_Loop2: 
0d69 17			    rla 
0d6a ed 6a		    adc hl,hl 
0d6c ed 52		    sbc hl,de 
0d6e 30 01		    jr nc,Div16_NoAdd2 
0d70 19			    add hl,de 
0d71			Div16_NoAdd2: 
0d71 10 f6		    djnz Div16_Loop2 
0d73 17			    rla 
0d74 2f			    cpl 
0d75 41			    ld b,c 
0d76 4f			    ld c,a 
0d77 c9			ret 
0d78			 
0d78			 
0d78			;http://z80-heaven.wikidot.com/math 
0d78			; 
0d78			;Inputs: 
0d78			;     DE and A are factors 
0d78			;Outputs: 
0d78			;     A is not changed 
0d78			;     B is 0 
0d78			;     C is not changed 
0d78			;     DE is not changed 
0d78			;     HL is the product 
0d78			;Time: 
0d78			;     342+6x 
0d78			; 
0d78			Mult16: 
0d78			 
0d78 06 08		     ld b,8          ;7           7 
0d7a 21 00 00		     ld hl,0         ;10         10 
0d7d 29			       add hl,hl     ;11*8       88 
0d7e 07			       rlca          ;4*8        32 
0d7f 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0d81 19			         add hl,de   ;--         -- 
0d82 10 f9		       djnz $-5      ;13*7+8     99 
0d84 c9			ret 
0d85			 
0d85			; 
0d85			; Square root of 16-bit value 
0d85			; In:  HL = value 
0d85			; Out:  D = result (rounded down) 
0d85			; 
0d85			;Sqr16: 
0d85			;    ld de,#0040 
0d85			;    ld a,l 
0d85			;    ld l,h 
0d85			;    ld h,d 
0d85			;    or a 
0d85			;    ld b,8 
0d85			;Sqr16_Loop: 
0d85			;    sbc hl,de 
0d85			;    jr nc,Sqr16_Skip 
0d85			;    add hl,de 
0d85			;Sqr16_Skip: 
0d85			;    ccf 
0d85			;    rl d 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    djnz Sqr16_Loop 
0d85			;    ret 
0d85			; 
0d85			; 
0d85			; Divide 8-bit values 
0d85			; In: Divide E by divider C 
0d85			; Out: A = result, B = rest 
0d85			; 
0d85			Div8: 
0d85 af			    xor a 
0d86 06 08		    ld b,8 
0d88			Div8_Loop: 
0d88 cb 13		    rl e 
0d8a 17			    rla 
0d8b 91			    sub c 
0d8c 30 01		    jr nc,Div8_NoAdd 
0d8e 81			    add a,c 
0d8f			Div8_NoAdd: 
0d8f 10 f7		    djnz Div8_Loop 
0d91 47			    ld b,a 
0d92 7b			    ld a,e 
0d93 17			    rla 
0d94 2f			    cpl 
0d95 c9			    ret 
0d96			 
0d96			; 
0d96			; Multiply 8-bit value with a 16-bit value (unrolled) 
0d96			; In: Multiply A with DE 
0d96			; Out: HL = result 
0d96			; 
0d96			Mult12U: 
0d96 2e 00		    ld l,0 
0d98 87			    add a,a 
0d99 30 01		    jr nc,Mult12U_NoAdd0 
0d9b 19			    add hl,de 
0d9c			Mult12U_NoAdd0: 
0d9c 29			    add hl,hl 
0d9d 87			    add a,a 
0d9e 30 01		    jr nc,Mult12U_NoAdd1 
0da0 19			    add hl,de 
0da1			Mult12U_NoAdd1: 
0da1 29			    add hl,hl 
0da2 87			    add a,a 
0da3 30 01		    jr nc,Mult12U_NoAdd2 
0da5 19			    add hl,de 
0da6			Mult12U_NoAdd2: 
0da6 29			    add hl,hl 
0da7 87			    add a,a 
0da8 30 01		    jr nc,Mult12U_NoAdd3 
0daa 19			    add hl,de 
0dab			Mult12U_NoAdd3: 
0dab 29			    add hl,hl 
0dac 87			    add a,a 
0dad 30 01		    jr nc,Mult12U_NoAdd4 
0daf 19			    add hl,de 
0db0			Mult12U_NoAdd4: 
0db0 29			    add hl,hl 
0db1 87			    add a,a 
0db2 30 01		    jr nc,Mult12U_NoAdd5 
0db4 19			    add hl,de 
0db5			Mult12U_NoAdd5: 
0db5 29			    add hl,hl 
0db6 87			    add a,a 
0db7 30 01		    jr nc,Mult12U_NoAdd6 
0db9 19			    add hl,de 
0dba			Mult12U_NoAdd6: 
0dba 29			    add hl,hl 
0dbb 87			    add a,a 
0dbc d0			    ret nc 
0dbd 19			    add hl,de 
0dbe c9			    ret 
0dbf			 
0dbf			; 
0dbf			; Multiply 8-bit value with a 16-bit value (right rotating) 
0dbf			; In: Multiply A with DE 
0dbf			;      Put lowest value in A for most efficient calculation 
0dbf			; Out: HL = result 
0dbf			; 
0dbf			Mult12R: 
0dbf 21 00 00		    ld hl,0 
0dc2			Mult12R_Loop: 
0dc2 cb 3f		    srl a 
0dc4 30 01		    jr nc,Mult12R_NoAdd 
0dc6 19			    add hl,de 
0dc7			Mult12R_NoAdd: 
0dc7 cb 23		    sla e 
0dc9 cb 12		    rl d 
0dcb b7			    or a 
0dcc c2 c2 0d		    jp nz,Mult12R_Loop 
0dcf c9			    ret 
0dd0			 
0dd0			; 
0dd0			; Multiply 16-bit values (with 32-bit result) 
0dd0			; In: Multiply BC with DE 
0dd0			; Out: BCHL = result 
0dd0			; 
0dd0			Mult32: 
0dd0 79			    ld a,c 
0dd1 48			    ld c,b 
0dd2 21 00 00		    ld hl,0 
0dd5 06 10		    ld b,16 
0dd7			Mult32_Loop: 
0dd7 29			    add hl,hl 
0dd8 17			    rla 
0dd9 cb 11		    rl c 
0ddb 30 07		    jr nc,Mult32_NoAdd 
0ddd 19			    add hl,de 
0dde ce 00		    adc a,0 
0de0 d2 e4 0d		    jp nc,Mult32_NoAdd 
0de3 0c			    inc c 
0de4			Mult32_NoAdd: 
0de4 10 f1		    djnz Mult32_Loop 
0de6 41			    ld b,c 
0de7 4f			    ld c,a 
0de8 c9			    ret 
0de9			 
0de9			 
0de9			 
0de9			; 
0de9			; Multiply 8-bit values 
0de9			; In:  Multiply H with E 
0de9			; Out: HL = result 
0de9			; 
0de9			Mult8: 
0de9 16 00		    ld d,0 
0deb 6a			    ld l,d 
0dec 06 08		    ld b,8 
0dee			Mult8_Loop: 
0dee 29			    add hl,hl 
0def 30 01		    jr nc,Mult8_NoAdd 
0df1 19			    add hl,de 
0df2			Mult8_NoAdd: 
0df2 10 fa		    djnz Mult8_Loop 
0df4 c9			    ret 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			;;http://z80-heaven.wikidot.com/math 
0df5			;;This divides DE by BC, storing the result in DE, remainder in HL 
0df5			; 
0df5			;DE_Div_BC:          ;1281-2x, x is at most 16 
0df5			;     ld a,16        ;7 
0df5			;     ld hl,0        ;10 
0df5			;     jp $+5         ;10 
0df5			;.DivLoop: 
0df5			;       add hl,bc    ;-- 
0df5			;       dec a        ;64 
0df5			;       jr z,.DivLoopEnd        ;86 
0df5			; 
0df5			;       sla e        ;128 
0df5			;       rl d         ;128 
0df5			;       adc hl,hl    ;240 
0df5			;       sbc hl,bc    ;240 
0df5			;       jr nc,.DivLoop ;23|21 
0df5			;       inc e        ;-- 
0df5			;       jp .DivLoop+1 
0df5			; 
0df5			;.DivLoopEnd: 
0df5			 
0df5			;HL_Div_C: 
0df5			;Inputs: 
0df5			;     HL is the numerator 
0df5			;     C is the denominator 
0df5			;Outputs: 
0df5			;     A is the remainder 
0df5			;     B is 0 
0df5			;     C is not changed 
0df5			;     DE is not changed 
0df5			;     HL is the quotient 
0df5			; 
0df5			;       ld b,16 
0df5			;       xor a 
0df5			;         add hl,hl 
0df5			;         rla 
0df5			;         cp c 
0df5			;         jr c,$+4 
0df5			;           inc l 
0df5			;           sub c 
0df5			;         djnz $-7 
0df5			 
0df5			; https://plutiedev.com/z80-add-8bit-to-16bit 
0df5			 
0df5			addatohl: 
0df5 85			    add   a, l    ; A = A+L 
0df6 6f			    ld    l, a    ; L = A+L 
0df7 8c			    adc   a, h    ; A = A+L+H+carry 
0df8 95			    sub   l       ; A = H+carry 
0df9 67			    ld    h, a    ; H = H+carry 
0dfa c9			ret 
0dfb			 
0dfb			addatode: 
0dfb 83			    add   a, e    ; A = A+L 
0dfc 5f			    ld    e, a    ; L = A+L 
0dfd 8a			    adc   a, d    ; A = A+L+H+carry 
0dfe 93			    sub   e       ; A = H+carry 
0dff 57			    ld    d, a    ; H = H+carry 
0e00 c9			ret 
0e01			 
0e01			 
0e01			addatobc: 
0e01 81			    add   a, c    ; A = A+L 
0e02 4f			    ld    c, a    ; L = A+L 
0e03 88			    adc   a, b    ; A = A+L+H+carry 
0e04 91			    sub   c       ; A = H+carry 
0e05 47			    ld    b, a    ; H = H+carry 
0e06 c9			ret 
0e07			 
0e07			subafromhl: 
0e07			   ; If A=0 do nothing 
0e07			    ; Otherwise flip A's sign. Since 
0e07			    ; the upper byte becomes -1, also 
0e07			    ; substract 1 from H. 
0e07 ed 44		    neg 
0e09 ca 12 0e		    jp    z, Skip 
0e0c 25			    dec   h 
0e0d			     
0e0d			    ; Now add the low byte as usual 
0e0d			    ; Two's complement takes care of 
0e0d			    ; ensuring the result is correct 
0e0d 85			    add   a, l 
0e0e 6f			    ld    l, a 
0e0f 8c			    adc   a, h 
0e10 95			    sub   l 
0e11 67			    ld    h, a 
0e12			Skip: 
0e12 c9				ret 
0e13			 
0e13			 
0e13			; compare hl and de 
0e13			; returns:  
0e13			; if hl = de, z=1, s=0, c0=0 
0e13			; if hl > de, z=0, s=0, c=0 
0e13			; if hl < de, z=0, s=1, c=1 
0e13			cmp16:	 
0e13 b7				or a 
0e14 ed 52			sbc hl,de 
0e16 e0				ret po 
0e17 7c				ld a,h 
0e18 1f				rra 
0e19 ee 40			xor 01000000B 
0e1b 37				scf 
0e1c 8f				adc a,a 
0e1d c9				ret 
0e1e			 
0e1e			 
0e1e			; test if hl contains zero   - A is destroyed 
0e1e			 
0e1e			ishlzero:    
0e1e b7				or a     ; reset flags 
0e1f 7c				ld a, h 
0e20 b5				or l        	 
0e21			 
0e21 c9				ret 
0e22			 
0e22			 
0e22			 
0e22			 
0e22			if FORTH_ENABLE_FLOATMATH 
0e22			;include "float/bbcmath.z80" 
0e22			include "float/lpfpcalc.asm" 
0e22			endif 
0e22			 
0e22			 
0e22			; eof 
0e22			 
# End of file firmware_maths.asm
0e22			include "firmware_strings.asm"   ; string handling  
0e22			 
0e22			 
0e22			; TODO string len 
0e22			; input text string, end on cr with zero term 
0e22			; a offset into frame buffer to start prompt 
0e22			; d is max length 
0e22			; e is display size TODO 
0e22			; c is current cursor position 
0e22			; hl is ptr to where string will be stored and edited directly 
0e22			 
0e22			 
0e22			; TODO check limit of buffer for new inserts 
0e22			; TODO check insert does not push beyond buffer 
0e22			; TODO scroll in a limited display area 
0e22			; TODO scroll whole screen on page wrap 
0e22			 
0e22			 
0e22			; TODO use LCD cursor? 
0e22			 
0e22			EDIT_V1: equ 0 
0e22			EDIT_V2: equ 1 
0e22			 
0e22			 
0e22			 
0e22			if EDIT_V2 
0e22			input_str: 
0e22			 
0e22 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
0e25			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0e25 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
0e28			;		ld a, c 
0e28			;		call addatohl 
0e28			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0e28 7a					ld a,d 
0e29 32 60 ee			        ld (input_size), a       ; save length of input area 
0e2c 79					ld a, c 
0e2d 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
0e30 7b					ld a,e 
0e31 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0e34			 
0e34			 
0e34					; add a trailing space to make screen refresh nicer 
0e34			 
0e34					;ld hl, (input_start) 
0e34					;push hl 
0e34					;ld a, 0 
0e34					;call strlent 
0e34					;ld a, l 
0e34					;pop hl 
0e34					;call addatohl 
0e34					;dec hl 
0e34					;ld a, ' ' 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld a, 0 
0e34					;ld (hl), a 
0e34			 
0e34			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0e34					; init cursor shape if not set by the cin routines 
0e34 21 bb eb				ld hl, cursor_shape 
0e37			if BASE_KEV 
0e37					ld a, 255 
0e37			else 
0e37 3e 23				ld a, '#' 
0e39			endif 
0e39 77					ld (hl), a 
0e3a 23					inc hl 
0e3b 3e 00				ld a, 0 
0e3d 77					ld (hl), a 
0e3e			 
0e3e 3e 09				ld a, CUR_BLINK_RATE 
0e40 32 5a ee				ld (input_cur_flash), a 
0e43 3e 01				ld a, 1 
0e45 32 59 ee				ld (input_cur_onoff),a 
0e48			.inmain:	 
0e48			 
0e48 cd 70 0f				call input_disp_ref 
0e4b			 
0e4b					; save current length of string 
0e4b			 
0e4b 2a 61 ee				ld hl, (input_start) 
0e4e 3e 00				ld a, 0 
0e50 cd 66 11				call strlent 
0e53 7d					ld a,l 
0e54 32 54 ee				ld (input_len), a 
0e57			 
0e57					;call input_disp_oncur 
0e57			 
0e57					; display current state of input buffer 
0e57			 
0e57					; clean any backspace chars 
0e57			 
0e57 3e 20				ld a, " " 
0e59 32 bb e2				ld (scratch),a 
0e5c 3e 00				ld a, 0 
0e5e 32 bc e2				ld (scratch+1),a 
0e61 3a 5e ee				ld a,(input_at_pos) 
0e64 85					add l 
0e65 11 bb e2				ld de, scratch 
0e68 cd db 0b				call str_at_display 
0e6b			 
0e6b					; pause 1ms 
0e6b			 
0e6b 3e 01				ld a, 1 
0e6d cd e5 0a				call aDelayInMS 
0e70			 
0e70			; display cursor if visible on this cycle 
0e70			 
0e70					; dec flash counter 
0e70 3a 5a ee				ld a, (input_cur_flash) 
0e73 3d					dec a 
0e74 32 5a ee				ld (input_cur_flash), a 
0e77 fe 00				cp 0 
0e79 20 0d				jr nz, .inochgstate 
0e7b			 
0e7b			 
0e7b					; reset on change of state 
0e7b 3e 09				ld a, CUR_BLINK_RATE 
0e7d 32 5a ee				ld (input_cur_flash), a 
0e80			 
0e80					; change state 
0e80 3a 59 ee				ld a,(input_cur_onoff) 
0e83 ed 44				neg 
0e85 32 59 ee				ld (input_cur_onoff),a 
0e88			 
0e88			 
0e88			 
0e88			 
0e88					; TODO is cursor visible? 
0e88					; TODO if so then over write the char at curspos pos with the cursor shape 
0e88			 
0e88								 
0e88			 
0e88			.inochgstate: 
0e88 3a 59 ee				ld a,(input_cur_onoff) 
0e8b fe ff				cp 255 
0e8d 28 0e				jr z, .skipcursor 
0e8f 3a 5e ee				ld a, (input_at_pos) 
0e92 47					ld b, a 
0e93 3a 4f ee				ld a, (input_cursor) 
0e96 80					add b 
0e97 11 bb eb				ld de, cursor_shape 
0e9a					 
0e9a cd db 0b				call str_at_display 
0e9d			 
0e9d			.skipcursor: 
0e9d				if DEBUG_INPUTV2 
0e9d			 
0e9d					ld a,(input_at_pos) 
0e9d					ld hl, LFSRSeed 
0e9d					call hexout 
0e9d					ld a, (input_cursor) 
0e9d					ld hl, LFSRSeed+2 
0e9d					call hexout 
0e9d					ld a,(input_size) 
0e9d					ld hl, LFSRSeed+4 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_onoff) 
0e9d					ld hl, LFSRSeed+6 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_flash) 
0e9d					ld hl, LFSRSeed+8 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_len) 
0e9d					ld hl, LFSRSeed+10 
0e9d					call hexout 
0e9d					ld hl, LFSRSeed+12 
0e9d					ld a, 0 
0e9d					ld (hl),a 
0e9d					ld a, display_row_4 
0e9d					ld de, LFSRSeed 
0e9d					call str_at_display 
0e9d				endif 
0e9d cd eb 0b				call update_display 
0ea0			 
0ea0					; TODO keyboard processing 
0ea0			 
0ea0			if BASE_CPM 
0ea0 cd fe 62				call cin_wait 
0ea3			else 
0ea3					call cin    ; _wait 
0ea3			endif 
0ea3 fe 00				cp 0 
0ea5 ca 48 0e				jp z, .inmain 
0ea8			 
0ea8 fe 0b				cp KEY_LEFT    ; cursor left 
0eaa ca 62 0f				jp z, input_left 
0ead				 
0ead fe 0c				cp KEY_RIGHT      ; cursor right 
0eaf ca 69 0f				jp z, input_right 
0eb2			 
0eb2 fe 0d				cp KEY_CR 
0eb4 c8					ret z 
0eb5			 
0eb5 fe 08				cp KEY_BS 
0eb7 ca d7 0f				jp z, input_delchar 
0eba			 
0eba fe 06				cp KEY_NEXTWORD 
0ebc ca e3 0e				jp z, input_nxtword 
0ebf			 
0ebf fe 07				cp KEY_PREVWORD 
0ec1 ca 0a 0f				jp z, input_prvword 
0ec4			 
0ec4 fe 0e				cp KEY_HOME    ; jump to start of line 
0ec6 20 08				jr nz, .ikh 
0ec8 3e 00				ld a, 0 
0eca 32 4f ee				ld (input_cursor), a 
0ecd ca 48 0e				jp z, .inmain 
0ed0			.ikh: 
0ed0			 
0ed0 fe 0f				cp KEY_END     ; jump to end of line 
0ed2 20 09				jr nz, .ike 
0ed4 3a 54 ee				ld a, (input_len) 
0ed7 32 4f ee				ld (input_cursor),a 
0eda ca 48 0e				jp z, .inmain 
0edd			.ike: 
0edd fe 05			        cp KEY_UP      ; recall last command 
0edf c8					ret z 
0ee0			;jr nz, .irec 
0ee0			; TODO next word 
0ee0			; TODO prev word 
0ee0			;  
0ee0			; 
0ee0			;	ld hl, scratch 
0ee0			;	ld de, os_last_cmd 
0ee0			;	call strcpy 
0ee0			;		jp  .inmain 
0ee0			.irec: 
0ee0			;		jr .instr1 
0ee0			 
0ee0			 
0ee0			 
0ee0					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
0ee0			 
0ee0			; TODO return if any special keys are given 
0ee0			;		ld l, a 
0ee0			;		ld a, 28 ; KEY_F12   ; 27 
0ee0			;		sub l 
0ee0			;		ret m 
0ee0			;		ld a, l 
0ee0					; if no special key then insert as a char 
0ee0			 
0ee0 c3 a9 0f				jp input_inschr 
0ee3			 
0ee3				 
0ee3			input_nxtword: 
0ee3				; jump to start next word after the cursor 
0ee3			 
0ee3			.insknwn:	 
0ee3 cd 9f 0f				call input_curptr	 
0ee6 7e					ld a,(hl)	 
0ee7 fe 00				cp 0 
0ee9 ca 48 0e				jp z, .inmain    ; end of string 
0eec			 
0eec			; if we are on a word, then move off of it 
0eec			 
0eec fe 20				cp ' ' 
0eee 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
0ef0 21 4f ee				ld hl, input_cursor 
0ef3 34					inc (hl) 
0ef4 18 ed				jr .insknwn 
0ef6			 
0ef6			.inspace: 
0ef6			 
0ef6 cd 9f 0f				call input_curptr	 
0ef9 7e					ld a,(hl)	 
0efa fe 00				cp 0 
0efc ca 48 0e				jp z, .inmain    ; end of string 
0eff			 
0eff			; if we are on a word, then move off of it 
0eff			 
0eff fe 20				cp ' ' 
0f01 c2 48 0e				jp nz, .inmain     ; we are on non space so at next word 
0f04 21 4f ee				ld hl, input_cursor 
0f07 34					inc (hl) 
0f08 18 ec				jr .inspace 
0f0a			 
0f0a			 
0f0a			 
0f0a			 
0f0a			input_prvword: 
0f0a				; jump to the start of previous word before the cursor 
0f0a			 
0f0a			; where are we to start with currently? 
0f0a			 
0f0a cd 9f 0f				call input_curptr	 
0f0d 7e					ld a, (hl) 
0f0e fe 20				cp ' ' 
0f10 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
0f12			 
0f12			 
0f12			 
0f12			.inskpwn:	 
0f12 3a 4f ee				ld a,(input_cursor) 
0f15 fe 00				cp 0 
0f17 ca 48 0e				jp z, .inmain    ; start of string 
0f1a			 
0f1a			;if we are on a word, then move off of it 
0f1a			 
0f1a cd 9f 0f				call input_curptr	 
0f1d 7e					ld a, (hl) 
0f1e fe 20				cp ' ' 
0f20 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
0f22					;jp z, .inmain    ; start of string 
0f22 21 4f ee				ld hl, input_cursor 
0f25 35					dec (hl) 
0f26 18 ea				jr .inskpwn 
0f28			.iwstart: 
0f28 21 4f ee				ld hl, input_cursor 
0f2b 34					inc (hl) 
0f2c c3 48 0e				jp .inmain 
0f2f					 
0f2f			 
0f2f			.inspacep: 
0f2f			 
0f2f					;jp .inmain    ; start of string 
0f2f			 
0f2f			 
0f2f			 
0f2f 3a 4f ee				ld a,(input_cursor) 
0f32 fe 00				cp 0 
0f34 ca 48 0e				jp z, .inmain    ; start of string 
0f37			 
0f37			; if we are on a word, then move off of it 
0f37			 
0f37 cd 9f 0f				call input_curptr	 
0f3a 7e					ld a, (hl) 
0f3b fe 20				cp ' ' 
0f3d c2 46 0f				jp nz, .incharp     ; we are on non space so at end of prev word 
0f40 21 4f ee				ld hl, input_cursor 
0f43 35					dec (hl) 
0f44 18 e9				jr .inspacep 
0f46			 
0f46			 
0f46			.incharp:	 
0f46					; eat the word to get to the start 
0f46 3a 4f ee				ld a,(input_cursor) 
0f49 fe 00				cp 0 
0f4b ca 48 0e				jp z, .inmain    ; start of string 
0f4e			 
0f4e			; if we are on a word, then move off of it 
0f4e			 
0f4e cd 9f 0f				call input_curptr	 
0f51 7e					ld a, (hl) 
0f52 fe 20				cp ' ' 
0f54 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
0f56 21 4f ee				ld hl, input_cursor 
0f59 35					dec (hl) 
0f5a 18 ea				jr .incharp 
0f5c			.ipwordst: 
0f5c					; at space before the prev word so reposition over it 
0f5c 21 4f ee				ld hl, input_cursor 
0f5f 34					inc (hl) 
0f60 18 b0				jr .inskpwn 
0f62					 
0f62			 
0f62			 
0f62			input_left: 
0f62				; move cursor left 
0f62 21 4f ee			ld hl, input_cursor 
0f65 35				dec (hl) 
0f66			;	cp 0 
0f66			;	jp z, .inmain    ; ignore left as at the start of the string 
0f66 c3 48 0e			jp .inmain 
0f69			 
0f69			input_right: 
0f69				; move cursor right 
0f69				 
0f69				;ld a, (input_size) 
0f69				;ld b, a 
0f69 21 4f ee			ld hl, input_cursor 
0f6c 34				inc (hl) 
0f6d				;dec b 
0f6d				;cp 0 
0f6d				;jp z, .inmain   ; ignore as at end of the string buffer 
0f6d				;ld a, b 
0f6d				;inc a 
0f6d				;ld (input_cursor), a 
0f6d c3 48 0e			jp .inmain 
0f70			 
0f70			 
0f70			 
0f70			input_disp_ref: 
0f70				; display the text from start of buffer (ie full refresh) 
0f70 3a 5e ee			ld a, (input_at_pos) 
0f73 2a 61 ee			ld hl,(input_start) 
0f76 eb				ex de, hl 
0f77 cd db 0b			call str_at_display  
0f7a c9				ret 
0f7b			input_disp_oncur: 
0f7b				; display the text from cursor position to end of buffer 
0f7b				; TODO position start of string at cursor position on screen 
0f7b				; TODO draw from that point on 
0f7b 3a 4f ee			ld a, (input_cursor) 
0f7e 47				ld b, a 
0f7f 3a 5e ee			ld a, (input_at_pos) 
0f82 80				add b 
0f83 48				ld c, b     ; save a 
0f84 78				ld a, b     ; inc string start for cursor 
0f85 2a 61 ee			ld hl,(input_start) 
0f88 cd f5 0d			call addatohl 
0f8b eb				ex de, hl 
0f8c 79				ld a, c 
0f8d cd db 0b			call str_at_display  
0f90 c9				ret 
0f91			 
0f91			input_nxtw: 
0f91				; Find next word 
0f91 c9				ret 
0f92			 
0f92			input_prvw: 
0f92				; Find previous word 
0f92 c9				ret 
0f93			 
0f93			input_lenrem:   
0f93				; Calculate the length of string remaining from current cursor 
0f93				; position to end of buffer (exc null term) 
0f93				 
0f93 3a 4f ee			ld a, (input_cursor) 
0f96 4f				ld c, a 
0f97 3a 60 ee			ld a, (input_size) 
0f9a 91				sub c 
0f9b 06 00			ld b, 0 
0f9d 0d				dec c 
0f9e c9				ret	 
0f9f			 
0f9f			input_curptr: 
0f9f				; calc address of the character under the cursor 
0f9f				 
0f9f 2a 61 ee			ld hl, (input_start) 
0fa2 3a 4f ee			ld a, (input_cursor) 
0fa5 cd f5 0d			call addatohl 
0fa8 c9				ret 
0fa9			 
0fa9			input_inschr: 
0fa9				; Insert char at cursor position 
0fa9 f5				push af   ; save char 
0faa				;call input_lenrem    ; get bc length of remaining string 
0faa			 
0faa				 
0faa cd 9f 0f			call input_curptr 
0fad			;	ld hl, (input_start) 
0fad			;	ld a, (input_cursor) 
0fad			;	call addatohl 
0fad				;push hl   ; save to come back to 
0fad			 
0fad				; shift everything up one to end of buffer 
0fad			 
0fad				;push hl 
0fad				;dec de 
0fad				;inc de 
0fad			;	ldir 
0fad				 
0fad				;pop hl 
0fad			 
0fad				; are we adding to the end of line? 
0fad			 
0fad 3a 4f ee			ld a, (input_cursor) 
0fb0 47				ld b, a 
0fb1 3a 54 ee			ld a, (input_len) 
0fb4 b8				cp b 
0fb5 20 09			jr nz, .insmid   ; no, insert in middle of text 
0fb7			 
0fb7				; tack on the end of the line 
0fb7 f1				pop af 
0fb8 77				ld (hl), a   ; save new char 
0fb9 23				inc hl 
0fba 3e 00			ld a, 0 
0fbc 77				ld (hl), a 
0fbd c3 69 0f			jp input_right 
0fc0				 
0fc0			.insmid: 
0fc0				; hl has insertion point so move everything up one to allow for insertion 
0fc0				;call input_shiftright 
0fc0 f1				pop af 
0fc1			 
0fc1			.shufinsmid: 
0fc1 47				ld b, a     ; b contains new char, c prev char at this position  
0fc2 7e				ld a, (hl) 
0fc3			 
0fc3 fe 00			cp 0    ; at end of string need to then dump new char and add term 
0fc5 28 07			jr z, .endinsmid 
0fc7 4f				ld c, a 
0fc8 78				ld a, b 
0fc9 77				ld (hl), a 
0fca 23				inc hl 
0fcb 79				ld a, c 
0fcc 18 f3			jr .shufinsmid 
0fce				 
0fce			 
0fce			 
0fce			 
0fce			.endinsmid: 
0fce 78				ld a, b 
0fcf 77				ld (hl), a 
0fd0 23				inc hl 
0fd1 3e 00			ld a, 0 
0fd3 77				ld (hl), a 
0fd4			 
0fd4			 
0fd4			;	ld (hl), a   ; save new char 
0fd4			 
0fd4 c3 69 0f			jp input_right 
0fd7			 
0fd7			;input_shiftright: 
0fd7			;	; shift text right at cursor, hl has shift start 
0fd7			;	push hl 
0fd7			;	push de 
0fd7			;	push bc 
0fd7			; 
0fd7			; 
0fd7			;	; move to end of string past zero term 
0fd7			;	ld hl,(input_start) 
0fd7			;	ld a, (input_len) 
0fd7			;	call addatohl 
0fd7			;	inc hl 
0fd7			;;	inc hl 
0fd7			;;	inc hl 
0fd7			;	ld a, 0 
0fd7			;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			;	 
0fd7			;;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			; 
0fd7			;	push hl 
0fd7			;	pop de 
0fd7			;	inc de 
0fd7			;	 
0fd7			; 
0fd7			;;	ld hl,(input_start) 
0fd7			;;	ld a, (input_cursor) 
0fd7			;;	call addatohl 
0fd7			; 
0fd7			; 
0fd7			;	; calc how many bytes from cursor pos to end of string we need to shift 
0fd7			;	call input_lenrem    ; get bc length of remaining string 
0fd7			;	;ld a, (input_cursor) 
0fd7			;	;ld c, a 
0fd7			;	ld a, (input_len) 
0fd7			;	cp 2 
0fd7			;	jr z, .iskipzero	 
0fd7			;	;sub c 
0fd7			;	;inc a 
0fd7			;	;ld c, a 
0fd7			;	;ld b, 0 
0fd7			;	inc c 
0fd7			;	inc c 
0fd7			;	; move data 
0fd7			;	lddr 
0fd7			;.iskipzero: 
0fd7			; 
0fd7			;	pop bc 
0fd7			;	pop de 
0fd7			;	pop hl 
0fd7			;	ret	 
0fd7			 
0fd7			input_delchar: 
0fd7				; Delete char at cursor position 
0fd7 cd 93 0f			call input_lenrem    ; get bc length of remaining string 
0fda 2a 61 ee			ld hl, (input_start) 
0fdd 3a 4f ee			ld a, (input_cursor) 
0fe0 cd f5 0d			call addatohl 
0fe3			 
0fe3 e5				push hl 
0fe4 d1				pop de 
0fe5 1b				dec de 
0fe6			 
0fe6			.dl:	 
0fe6 ed a0			ldi  
0fe8 7e				ld a, (hl) 
0fe9 fe 00			cp 0 
0feb 28 02			jr z, .dldone 
0fed 18 f7			jr .dl 
0fef			.dldone: 
0fef ed a0			ldi 
0ff1			 
0ff1 c3 62 0f			jp input_left 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			 
0ff4			 
0ff4			 
0ff4			if EDIT_V1 
0ff4			input_str: 
0ff4			 
0ff4				    	ld (input_at_pos),a      ; save display position to start 
0ff4					add c 
0ff4					ld (input_at_cursor),a	; save draw pos of cursor 
0ff4					ld (input_start), hl     ; save ptr to buffer 
0ff4					ld a, c 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl     ; save ptr to point under the cursor 
0ff4					ld a,d 
0ff4				        ld (input_size), a       ; save length of input area 
0ff4					ld a, c 
0ff4					ld (input_cursor),a      ; init cursor start position  
0ff4					ld a,e 
0ff4				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0ff4					 
0ff4					 
0ff4			 
0ff4			;		ld a,(input_ptr) 
0ff4			;		ld (input_under_cursor),a 	; save what is under the cursor 
0ff4			 
0ff4			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0ff4					; init cursor shape if not set by the cin routines 
0ff4					ld hl, cursor_shape 
0ff4			if BASE_KEV 
0ff4					ld a, 255 
0ff4			else 
0ff4					ld a, '#' 
0ff4			endif 
0ff4					ld (hl), a 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl), a 
0ff4			 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					ld a, 1 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'I' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4			.is1:		; main entry loop 
0ff4			 
0ff4			 
0ff4			 
0ff4					; pause 1ms 
0ff4			 
0ff4					ld a, 1 
0ff4					call aDelayInMS 
0ff4			 
0ff4					; dec flash counter 
0ff4					ld a, (input_cur_flash) 
0ff4					dec a 
0ff4					ld (input_cur_flash), a 
0ff4					cp 0 
0ff4					jr nz, .nochgstate 
0ff4			 
0ff4			 
0ff4					; change state 
0ff4					ld a,(input_cur_onoff) 
0ff4					neg 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			 
0ff4					; reset on change of state 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4			.nochgstate: 
0ff4					 
0ff4					 
0ff4			 
0ff4					; display cursor  
0ff4			 
0ff4			;		ld hl, (input_start) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			 
0ff4					; get char under cursor and replace with cursor 
0ff4			ld hl, (input_ptr) 
0ff4			;		ld a, (hl) 
0ff4			;		ld (input_under_cursor),a 
0ff4			;		ld a, '_' 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					; display string 
0ff4			 
0ff4					ld de, (input_start) 
0ff4					ld a, (input_at_pos) 
0ff4					call str_at_display 
0ff4			;	        call update_display 
0ff4			 
0ff4					; find place to put the cursor 
0ff4			;		add h 
0ff4			;		ld l, display_row_1 
0ff4			;		sub l 
0ff4			; (input_at_pos) 
0ff4					;ld c, a 
0ff4			;		ld a, (input_cursor) 
0ff4			;		ld l, (input_at_pos) 
0ff4			;		;ld b, h 
0ff4			;		add l 
0ff4			;		ld (input_at_cursor),a 
0ff4					;ld l,h 
0ff4			 
0ff4			;		ld h, 0 
0ff4			;		ld l,(input_at_pos) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0ff4			;		call subafromhl 
0ff4			;		ld a,l 
0ff4			;		ld (input_at_cursor), a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					ld a, (hardware_diag) 
0ff4					cp 0 
0ff4					jr z, .skip_input_diag 
0ff4			 
0ff4					ld a,(input_at_pos) 
0ff4					ld hl, LFSRSeed 
0ff4					call hexout 
0ff4					ld a, (input_cursor) 
0ff4					ld hl, LFSRSeed+2 
0ff4					call hexout 
0ff4					ld a,(input_at_cursor) 
0ff4					ld hl, LFSRSeed+4 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_onoff) 
0ff4					ld hl, LFSRSeed+6 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_flash) 
0ff4					ld hl, LFSRSeed+8 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_len) 
0ff4					ld hl, LFSRSeed+10 
0ff4					call hexout 
0ff4					ld hl, LFSRSeed+12 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4					ld a, display_row_4 
0ff4					ld de, LFSRSeed 
0ff4					call str_at_display 
0ff4					.skip_input_diag: 
0ff4				endif 
0ff4			 
0ff4					; decide on if we are showing the cursor this time round 
0ff4			 
0ff4					ld a, (input_cur_onoff) 
0ff4					cp 255 
0ff4					jr z, .skipcur 
0ff4			 
0ff4			 
0ff4					ld a,(input_at_cursor) 
0ff4					ld de, cursor_shape 
0ff4					call str_at_display 
0ff4			 
0ff4					; save length of current input string 
0ff4					ld hl, (input_start) 
0ff4					ld a, 0 
0ff4					call strlent 
0ff4					ld a,l 
0ff4					ld (input_len),a 
0ff4			 
0ff4			.skipcur: 
0ff4			 
0ff4				        call update_display 
0ff4					 
0ff4			 
0ff4			 
0ff4					; wait 
0ff4				 
0ff4					; TODO loop without wait to flash the cursor and char under cursor	 
0ff4					call cin    ; _wait 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 
0ff4			 
0ff4					; get ptr to char to input into 
0ff4			 
0ff4					ld c,a 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_cursor) 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl 
0ff4					ld a,c 
0ff4			 
0ff4					; replace char under cursor 
0ff4			 
0ff4			;		ld hl, (input_ptr) 
0ff4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0ff4			;		ld (hl), a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'i' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					cp KEY_HOME 
0ff4					jr nz, .iske 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor),a 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					jp .is1 
0ff4					 
0ff4			.iske:		cp KEY_END 
0ff4					jr nz, .isknw 
0ff4					jp .is1 
0ff4			 
0ff4			.isknw:		cp KEY_NEXTWORD 
0ff4					jr nz, .iskpw 
0ff4			 
0ff4			.isknwm:	ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0 
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .isknwm 
0ff4			 
0ff4			.iskpw:		cp KEY_PREVWORD 
0ff4					jr nz, .iskl 
0ff4			.iskpwm:	 
0ff4					ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0  
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .iskpwm 
0ff4			 
0ff4			 
0ff4			.iskl:		cp KEY_LEFT 
0ff4					jr nz, .isk1 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk1:		cp KEY_RIGHT 
0ff4					jr nz, .isk2 
0ff4			 
0ff4					ld a,(input_len)		; TODO BUG why cant i load e direct? 
0ff4					ld e,a 
0ff4					ld a, (input_cursor) 
0ff4					cp e 
0ff4					jp z, .is1		; at the end of string so dont go right 
0ff4			 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk2:		cp KEY_UP 
0ff4			 
0ff4					jr nz, .isk3 
0ff4			 
0ff4					; swap last command with the current on 
0ff4			 
0ff4					; move cursor to start of string 
0ff4					ld hl, (input_start) 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					 
0ff4					; swap input and last command buffers 
0ff4			 
0ff4					ld hl, os_cli_cmd 
0ff4					ld de, os_last_cmd 
0ff4					ld b, 255 
0ff4			.swap1:		ld a, (hl) 
0ff4					ld c,a 
0ff4					ld a, (de) 
0ff4					ld (hl), a 
0ff4					ld a,c 
0ff4					ld (de),a 
0ff4					inc hl 
0ff4					inc de 
0ff4					djnz .swap1 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk3:		cp KEY_BS 
0ff4					jr nz, .isk4 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					; hl is source 
0ff4					; de needs to be source - 1 
0ff4			 
0ff4			;		ld a, 0 
0ff4			;		dec hl 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					; shift all data 
0ff4			 
0ff4					push hl 
0ff4					inc hl 
0ff4					pop de 
0ff4					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ff4					ld c,a 
0ff4					ld b,0 
0ff4					ldir  
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					; remove char 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld de,.iblank 
0ff4					call str_at_display 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk4:		cp KEY_CR 
0ff4					jr z, .endinput 
0ff4			 
0ff4					; else add the key press to the end 
0ff4			 
0ff4					ld c, a			; save key pressed 
0ff4			 
0ff4					ld a,(hl)		; get what is currently under char 
0ff4			 
0ff4					cp 0			; we are at the end of the string 
0ff4					jr nz, .onchar 
0ff4					 
0ff4					; add a char to the end of the string 
0ff4				 
0ff4					ld (hl),c 
0ff4					inc hl 
0ff4			;		ld a,' ' 
0ff4			;		ld (hl),a 
0ff4			;		inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					dec hl 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc a				; TODO check max string length and scroll  
0ff4					ld (input_cursor), a		; inc cursor pos 
0ff4							 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, '+' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					jp .is1 
0ff4					 
0ff4			 
0ff4			 
0ff4					; if on a char then insert 
0ff4			.onchar: 
0ff4			 
0ff4					; TODO over flow check: make sure insert does not blow out buffer 
0ff4			 
0ff4					; need to do some maths to use lddr 
0ff4			 
0ff4					push hl   ; save char pos 
0ff4					push bc 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_len) 
0ff4					call addatohl  		; end of string 
0ff4					inc hl 
0ff4					inc hl		; past zero term 
0ff4					push hl 
0ff4					inc hl 
0ff4					push hl  
0ff4			 
0ff4								; start and end of lddr set, now how much to move? 
0ff4			 
0ff4							 
0ff4					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0ff4					ld b,a 
0ff4					ld a,(input_len) 
0ff4					ld e,a 
0ff4					sub b 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4			 
0ff4					ld b,0 
0ff4					ld c,a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'i' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					pop de 
0ff4					pop hl 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'I' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					lddr 
0ff4				 
0ff4			 
0ff4			 
0ff4					; TODO have a key for insert/overwrite mode???? 
0ff4					pop bc 
0ff4					pop hl 
0ff4					ld (hl), c		; otherwise overwrite current char 
0ff4					 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.endinput:	; TODO look for end of string 
0ff4			 
0ff4					; add trailing space for end of token 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a,(input_len) 
0ff4					call addatohl 
0ff4					ld a, ' ' 
0ff4					ld (hl),a 
0ff4					; TODO eof of parse marker 
0ff4			 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					ret 
0ff4			 
0ff4			.iblank: db " ",0 
0ff4			 
0ff4			 
0ff4			input_str_prev:	ld (input_at_pos), a 
0ff4					ld (input_start), hl 
0ff4					ld a,1			; add cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					ld (input_ptr), hl 
0ff4					ld a,d 
0ff4					ld (input_size), a 
0ff4					ld a,0 
0ff4					ld (input_cursor),a 
0ff4			.instr1:	 
0ff4			 
0ff4					; TODO do block cursor 
0ff4					; TODO switch cursor depending on the modifer key 
0ff4			 
0ff4					; update cursor shape change on key hold 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl), a 
0ff4			 
0ff4					; display entered text 
0ff4					ld a,(input_at_pos) 
0ff4			            	CALL fLCD_Pos       ;Position cursor to location in A 
0ff4			            	LD   de, (input_start) 
0ff4			            	CALL fLCD_Str       ;Display string pointed to by DE 
0ff4			 
0ff4					call cin 
0ff4					cp 0 
0ff4					jr z, .instr1 
0ff4			 
0ff4					; proecess keyboard controls first 
0ff4			 
0ff4					ld hl,(input_ptr) 
0ff4			 
0ff4					cp KEY_CR	 ; pressing enter ends input 
0ff4					jr z, .instrcr 
0ff4			 
0ff4					cp KEY_BS 	; back space 
0ff4					jr nz, .instr2 
0ff4					; process back space 
0ff4			 
0ff4					; TODO stop back space if at start of string 
0ff4					dec hl 
0ff4					dec hl ; to over write cursor 
0ff4					ld a,(cursor_shape) 
0ff4					;ld a,0 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a," " 
0ff4					ld (hl),a 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4			 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr2:	cp KEY_LEFT    ; cursor left 
0ff4					jr nz, .instr3 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4				 
0ff4			.instr3:	cp KEY_RIGHT      ; cursor right 
0ff4					jr nz, .instr4 
0ff4					inc hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr4:	cp KEY_HOME    ; jump to start of line 
0ff4					jr nz, .instr5 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr5:	cp KEY_END     ; jump to end of line 
0ff4					jr nz, .instr6 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			.instr6:        cp KEY_UP      ; recall last command 
0ff4					jr nz, .instrnew 
0ff4			 
0ff4				ld hl, scratch 
0ff4				ld de, os_last_cmd 
0ff4				call strcpy 
0ff4					jr .instr1 
0ff4			 
0ff4			 
0ff4			.instrnew:	; no special key pressed to see if we have room to store it 
0ff4			 
0ff4					; TODO do string size test 
0ff4			 
0ff4					dec hl ; to over write cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4					jr .instr1 
0ff4			.instrcr:	dec hl		; remove cursor 
0ff4					ld a,' '	; TODO add a trailing space for safety 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					; if at end of line scroll up    
0ff4					; TODO detecting only end of line 4 for scroll up  
0ff4			 
0ff4					;ld   
0ff4			 
0ff4					ret 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			; strcpy hl = dest, de source 
0ff4			 
0ff4 1a			strcpy:   LD   A, (DE)        ;Get character from string 
0ff5 b7			            OR   A              ;Null terminator? 
0ff6 c8			            RET  Z              ;Yes, so finished 
0ff7 1a					ld a,(de) 
0ff8 77					ld (hl),a 
0ff9 13			            INC  DE             ;Point to next character 
0ffa 23					inc hl 
0ffb 18 f7		            JR   strcpy       ;Repeat 
0ffd c9					ret 
0ffe			 
0ffe			 
0ffe			; TODO string_at  
0ffe			; pass string which starts with lcd offset address and then null term string 
0ffe			 
0ffe			; TODO string to dec 
0ffe			; TODO string to hex 
0ffe			; TODO byte to string hex 
0ffe			; TODO byte to string dec 
0ffe			 
0ffe			 
0ffe			 
0ffe			; from z80uartmonitor 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
0ffe			; pass hl for where to put the text 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe c5			hexout:	PUSH BC 
0fff f5					PUSH AF 
1000 47					LD B, A 
1001					; Upper nybble 
1001 cb 3f				SRL A 
1003 cb 3f				SRL A 
1005 cb 3f				SRL A 
1007 cb 3f				SRL A 
1009 cd 19 10				CALL tohex 
100c 77					ld (hl),a 
100d 23					inc hl	 
100e					 
100e					; Lower nybble 
100e 78					LD A, B 
100f e6 0f				AND 0FH 
1011 cd 19 10				CALL tohex 
1014 77					ld (hl),a 
1015 23					inc hl	 
1016					 
1016 f1					POP AF 
1017 c1					POP BC 
1018 c9					RET 
1019					 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			tohex: 
1019 e5					PUSH HL 
101a d5					PUSH DE 
101b 16 00				LD D, 0 
101d 5f					LD E, A 
101e 21 26 10				LD HL, .DATA 
1021 19					ADD HL, DE 
1022 7e					LD A, (HL) 
1023 d1					POP DE 
1024 e1					POP HL 
1025 c9					RET 
1026			 
1026			.DATA: 
1026 30					DEFB	30h	; 0 
1027 31					DEFB	31h	; 1 
1028 32					DEFB	32h	; 2 
1029 33					DEFB	33h	; 3 
102a 34					DEFB	34h	; 4 
102b 35					DEFB	35h	; 5 
102c 36					DEFB	36h	; 6 
102d 37					DEFB	37h	; 7 
102e 38					DEFB	38h	; 8 
102f 39					DEFB	39h	; 9 
1030 41					DEFB	41h	; A 
1031 42					DEFB	42h	; B 
1032 43					DEFB	43h	; C 
1033 44					DEFB	44h	; D 
1034 45					DEFB	45h	; E 
1035 46					DEFB	46h	; F 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1036			;;    subtract $30, if result > 9 then subtract $7 more 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			atohex: 
1036 d6 30				SUB $30 
1038 fe 0a				CP 10 
103a f8					RET M		; If result negative it was 0-9 so we're done 
103b d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
103d c9					RET		 
103e			 
103e			 
103e			 
103e			 
103e			; Get 2 ASCII characters as hex byte from pointer in hl 
103e			 
103e			BYTERD: 
103e 16 00			LD	D,00h		;Set up 
1040 cd 48 10			CALL	HEXCON		;Get byte and convert to hex 
1043 87				ADD	A,A		;First nibble so 
1044 87				ADD	A,A		;multiply by 16 
1045 87				ADD	A,A		; 
1046 87				ADD	A,A		; 
1047 57				LD	D,A		;Save hi nibble in D 
1048			HEXCON: 
1048 7e				ld a, (hl)		;Get next chr 
1049 23				inc hl 
104a d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
104c fe 0a			CP	00Ah		;Is it 0-9 ? 
104e 38 02			JR	C,NALPHA	;If so miss next bit 
1050 d6 07			SUB	007h		;Else convert alpha 
1052			NALPHA: 
1052 b2				OR	D		;Add hi nibble back 
1053 c9				RET			; 
1054			 
1054			 
1054			; 
1054			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1054			; Since the routines get_byte and therefore get_nibble are called, only valid 
1054			; characters (0-9a-f) are accepted. 
1054			; 
1054			;get_word        push    af 
1054			;                call    get_byte        ; Get the upper byte 
1054			;                ld      h, a 
1054			;                call    get_byte        ; Get the lower byte 
1054			;                ld      l, a 
1054			;                pop     af 
1054			;                ret 
1054			; 
1054			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1054			; the routine get_nibble is used only valid characters are accepted - the  
1054			; input routine only accepts characters 0-9a-f. 
1054			; 
1054 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1055 7e					ld a,(hl) 
1056 23					inc hl 
1057 cd 7c 10		                call    nibble2val      ; Get upper nibble 
105a cb 07		                rlc     a 
105c cb 07		                rlc     a 
105e cb 07		                rlc     a 
1060 cb 07		                rlc     a 
1062 47			                ld      b, a            ; Save upper four bits 
1063 7e					ld a,(hl) 
1064 cd 7c 10		                call    nibble2val      ; Get lower nibble 
1067 b0			                or      b               ; Combine both nibbles 
1068 c1			                pop     bc              ; Restore B (and C) 
1069 c9			                ret 
106a			; 
106a			; Get a hexadecimal digit from the serial line. This routine blocks until 
106a			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
106a			; to the serial line interface. The lower 4 bits of A contain the value of  
106a			; that particular digit. 
106a			; 
106a			;get_nibble      ld a,(hl)           ; Read a character 
106a			;                call    to_upper        ; Convert to upper case 
106a			;                call    is_hex          ; Was it a hex digit? 
106a			;                jr      nc, get_nibble  ; No, get another character 
106a			 ;               call    nibble2val      ; Convert nibble to value 
106a			 ;               call    print_nibble 
106a			 ;               ret 
106a			; 
106a			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
106a			; A valid hexadecimal digit is denoted by a set C flag. 
106a			; 
106a			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
106a			;                ret     nc              ; Yes 
106a			;                cp      '0'             ; Less than '0'? 
106a			;                jr      nc, is_hex_1    ; No, continue 
106a			;                ccf                     ; Complement carry (i.e. clear it) 
106a			;                ret 
106a			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
106a			;                ret     c               ; Yes 
106a			;                cp      'A'             ; Less than 'A'? 
106a			;                jr      nc, is_hex_2    ; No, continue 
106a			;                ccf                     ; Yes - clear carry and return 
106a			;                ret 
106a			;is_hex_2        scf                     ; Set carry 
106a			;                ret 
106a			; 
106a			; Convert a single character contained in A to upper case: 
106a			; 
106a fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
106c d8			                ret     c 
106d fe 7b		                cp      'z' + 1         ; > 'z'? 
106f d0			                ret     nc              ; Nothing to do, either 
1070 e6 5f		                and     $5f             ; Convert to upper case 
1072 c9			                ret 
1073			 
1073			 
1073			to_lower: 
1073			 
1073			   ; if char is in [A-Z] make it lower case 
1073			 
1073			   ; enter : a = char 
1073			   ; exit  : a = lower case char 
1073			   ; uses  : af 
1073			 
1073 fe 41		   cp 'A' 
1075 d8			   ret c 
1076			    
1076 fe 5b		   cp 'Z'+1 
1078 d0			   ret nc 
1079			    
1079 f6 20		   or $20 
107b c9			   ret 
107c			 
107c			; 
107c			; Expects a hexadecimal digit (upper case!) in A and returns the 
107c			; corresponding value in A. 
107c			; 
107c fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
107e 38 02		                jr      c, nibble2val_1 ; Yes 
1080 d6 07		                sub     7               ; Adjust for A-F 
1082 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1084 e6 0f		                and     $f              ; Only return lower 4 bits 
1086 c9			                ret 
1087			; 
1087			; Print_nibble prints a single hex nibble which is contained in the lower  
1087			; four bits of A: 
1087			; 
1087			;print_nibble    push    af              ; We won't destroy the contents of A 
1087			;                and     $f              ; Just in case... 
1087			;                add     a, '0'             ; If we have a digit we are done here. 
1087			;                cp      '9' + 1         ; Is the result > 9? 
1087			;                jr      c, print_nibble_1 
1087			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1087			;print_nibble_1  call    putc            ; Print the nibble and 
1087			;                pop     af              ; restore the original value of A 
1087			;                ret 
1087			;; 
1087			;; Send a CR/LF pair: 
1087			; 
1087			;crlf            push    af 
1087			;                ld      a, cr 
1087			;                call    putc 
1087			;                ld      a, lf 
1087			;                call    putc 
1087			;                pop     af 
1087			;                ret 
1087			; 
1087			; Print_word prints the four hex digits of a word to the serial line. The  
1087			; word is expected to be in HL. 
1087			; 
1087			;print_word      push    hl 
1087			;                push    af 
1087			;                ld      a, h 
1087			;                call    print_byte 
1087			;                ld      a, l 
1087			;                call    print_byte 
1087			;                pop     af 
1087			;                pop     hl 
1087			;                ret 
1087			; 
1087			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1087			; The byte to be printed is expected to be in A. 
1087			; 
1087			;print_byte      push    af              ; Save the contents of the registers 
1087			;                push    bc 
1087			;                ld      b, a 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                call    print_nibble    ; Print high nibble 
1087			;                ld      a, b 
1087			;                call    print_nibble    ; Print low nibble 
1087			;                pop     bc              ; Restore original register contents 
1087			;                pop     af 
1087			;                ret 
1087			 
1087			 
1087			 
1087			 
1087			 
1087			fourehexhl:  
1087 7e				ld a,(hl) 
1088 cd 36 10			call atohex 
108b cb 3f				SRL A 
108d cb 3f				SRL A 
108f cb 3f				SRL A 
1091 cb 3f				SRL A 
1093 47				ld b, a 
1094 23				inc hl 
1095 7e				ld a,(hl) 
1096 23				inc hl 
1097 cd 36 10			call atohex 
109a 80				add b 
109b 57				ld d,a 
109c 7e				ld a,(hl) 
109d cd 36 10			call atohex 
10a0 cb 3f				SRL A 
10a2 cb 3f				SRL A 
10a4 cb 3f				SRL A 
10a6 cb 3f				SRL A 
10a8 47				ld b, a 
10a9 23				inc hl 
10aa 7e				ld a,(hl) 
10ab 23				inc hl 
10ac cd 36 10			call atohex 
10af 80				add b 
10b0 5f				ld e, a 
10b1 d5				push de 
10b2 e1				pop hl 
10b3 c9				ret 
10b4			 
10b4			; pass hl. returns z set if the byte at hl is a digit 
10b4			;isdigithl:  
10b4			;	push bc 
10b4			;	ld a,(hl) 
10b4			;	cp ':' 
10b4			;	jr nc, .isdf 		; > 
10b4			;	cp '0' 
10b4			;	jr c, .isdf		; < 
10b4			; 
10b4			;	; TODO find a better way to set z 
10b4			; 
10b4			;	ld b,a 
10b4			;	cp b 
10b4			;	pop bc 
10b4			;	ret 
10b4			; 
10b4			;.isdf:	; not digit so clear z 
10b4			; 
10b4			;	; TODO find a better way to unset z 
10b4			; 
10b4			;	ld b,a 
10b4			;	inc b 
10b4			;	cp b 
10b4			; 
10b4			;	pop bc 
10b4			;	ret 
10b4				 
10b4				 
10b4			 
10b4			 
10b4			; pass hl as the four byte address to load 
10b4			 
10b4			get_word_hl:  
10b4 e5				push hl 
10b5 cd 54 10			call get_byte 
10b8				 
10b8 47				ld b, a 
10b9			 
10b9 e1				pop hl 
10ba 23				inc hl 
10bb 23				inc hl 
10bc			 
10bc			; TODO not able to handle a-f  
10bc 7e				ld a,(hl) 
10bd			;	;cp ':' 
10bd			;	cp 'g' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp 'G' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp '0' 
10bd			;	jr c, .single_byte_hl		; < 
10bd			 
10bd				;call isdigithl 
10bd fe 00			cp 0 
10bf 28 06			jr z, .single_byte_hl 
10c1			 
10c1			.getwhln:   ; hex word so get next byte 
10c1			 
10c1 cd 54 10			call get_byte 
10c4 6f				ld l, a 
10c5 60				ld h,b 
10c6 c9				ret 
10c7 68			.single_byte_hl:   ld l,b 
10c8 26 00				ld h,0 
10ca c9					ret 
10cb			 
10cb			 
10cb			 
10cb			 
10cb 21 6b 18			ld hl,asc+1 
10ce			;	ld a, (hl) 
10ce			;	call nibble2val 
10ce cd 54 10			call get_byte 
10d1			 
10d1			;	call fourehexhl 
10d1 32 ef e2			ld (scratch+52),a 
10d4				 
10d4 21 ed e2			ld hl,scratch+50 
10d7 22 de e5			ld (os_cur_ptr),hl 
10da			 
10da c9				ret 
10db			 
10db			 
10db			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10db			 
10db			; Decimal Unsigned Version 
10db			 
10db			;Number in a to decimal ASCII 
10db			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10db			;Example: display a=56 as "056" 
10db			;input: a = number 
10db			;Output: a=0,value of a in the screen 
10db			;destroys af,bc (don't know about hl and de) 
10db			DispAToASCII: 
10db 0e 9c			ld	c,-100 
10dd cd e7 10			call	.Na1 
10e0 0e f6			ld	c,-10 
10e2 cd e7 10			call	.Na1 
10e5 0e ff			ld	c,-1 
10e7 06 2f		.Na1:	ld	b,'0'-1 
10e9 04			.Na2:	inc	b 
10ea 81				add	a,c 
10eb 38 fc			jr	c,.Na2 
10ed 91				sub	c		;works as add 100/10/1 
10ee f5				push af		;safer than ld c,a 
10ef 78				ld	a,b		;char is in b 
10f0			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10f0 f1				pop af		;safer than ld a,c 
10f1 c9				ret 
10f2			 
10f2			; Decimal Signed Version 
10f2			 
10f2			; DispA 
10f2			; -------------------------------------------------------------- 
10f2			; Converts a signed integer value to a zero-terminated ASCII 
10f2			; string representative of that value (using radix 10). 
10f2			; -------------------------------------------------------------- 
10f2			; INPUTS: 
10f2			;     HL     Value to convert (two's complement integer). 
10f2			;     DE     Base address of string destination. (pointer). 
10f2			; -------------------------------------------------------------- 
10f2			; OUTPUTS: 
10f2			;     None 
10f2			; -------------------------------------------------------------- 
10f2			; REGISTERS/MEMORY DESTROYED 
10f2			; AF HL 
10f2			; -------------------------------------------------------------- 
10f2			 
10f2			;DispHLToASCII: 
10f2			;   push    de 
10f2			;   push    bc 
10f2			; 
10f2			;; Detect sign of HL. 
10f2			;    bit    7, h 
10f2			;    jr     z, ._DoConvert 
10f2			; 
10f2			;; HL is negative. Output '-' to string and negate HL. 
10f2			;    ld     a, '-' 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			; 
10f2			;; Negate HL (using two's complement) 
10f2			;    xor    a 
10f2			;    sub    l 
10f2			;    ld     l, a 
10f2			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10f2			;    sbc    a, h 
10f2			;    ld     h, a 
10f2			; 
10f2			;; Convert HL to digit characters 
10f2			;._DoConvert: 
10f2			;    ld     b, 0     ; B will count character length of number 
10f2			;-   ld     a, 10 
10f2			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10f2			;    push   af 
10f2			;    inc    b 
10f2			;    ld     a, h 
10f2			;    or     l 
10f2			;    jr     nz, - 
10f2			; 
10f2			;; Retrieve digits from stack 
10f2			;-   pop    af 
10f2			;    or     $30 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			;    djnz   - 
10f2			; 
10f2			;; Terminate string with NULL 
10f2			;    xor    a 
10f2			;    ld     (de), a 
10f2			; 
10f2			;    pop    bc 
10f2			;    pop    de 
10f2			;    ret 
10f2			 
10f2			;Comments 
10f2			; 
10f2			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10f2			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10f2			;    Note that the output string will not be fixed-width. 
10f2			; 
10f2			;Example Usage 
10f2			; 
10f2			;    ld    hl, -1004 
10f2			;    ld    de, OP1 
10f2			;    call  DispA 
10f2			;    ld    hl, OP1 
10f2			;    syscall  PutS 
10f2			 
10f2			 
10f2			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10f2			 
10f2			 
10f2			;Converts an ASCII string to an unsigned 16-bit integer 
10f2			;Quits when it reaches a non-decimal digit 
10f2			 
10f2			string_to_uint16: 
10f2			atoui_16: 
10f2			;Input: 
10f2			;     DE points to the string 
10f2			;Outputs: 
10f2			;     HL is the result 
10f2			;     A is the 8-bit value of the number 
10f2			;     DE points to the byte after the number 
10f2			;Destroys: 
10f2			;     BC 
10f2			;       if the string is non-empty, BC is HL/10 
10f2			;Size:  24 bytes 
10f2			;Speed: 42+d(104+{0,9}) 
10f2			;       d is the number of digits in the number 
10f2			;       max is 640 cycles for a 5 digit number 
10f2			;Assuming no leading zeros: 
10f2			;1 digit:  146cc 
10f2			;2 digit:  250cc 
10f2			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10f2			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10f2			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10f2			;avg: 544.81158447265625cc (544+13297/16384) 
10f2			;=============================================================== 
10f2 21 00 00		  ld hl,0 
10f5			.u16a: 
10f5 1a			  ld a,(de) 
10f6 d6 30		  sub 30h 
10f8 fe 0a		  cp 10 
10fa d0			  ret nc 
10fb 13			  inc de 
10fc 44			  ld b,h 
10fd 4d			  ld c,l 
10fe 29			  add hl,hl 
10ff 29			  add hl,hl 
1100 09			  add hl,bc 
1101 29			  add hl,hl 
1102 85			  add a,l 
1103 6f			  ld l,a 
1104 30 ef		  jr nc,.u16a 
1106 24			  inc h 
1107 c3 f5 10		  jp .u16a 
110a			 
110a			 
110a			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110a			 
110a			;written by Zeda 
110a			;Converts a 16-bit unsigned integer to an ASCII string. 
110a			 
110a			uitoa_16: 
110a			;Input: 
110a			;   DE is the number to convert 
110a			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
110a			;Output: 
110a			;   HL points to the null-terminated ASCII string 
110a			;      NOTE: This isn't necessarily the same as the input HL. 
110a d5			  push de 
110b c5			  push bc 
110c f5			  push af 
110d eb			  ex de,hl 
110e			 
110e 01 f0 d8		  ld bc,-10000 
1111 3e 2f		  ld a,'0'-1 
1113 3c			  inc a 
1114 09			  add hl,bc  
1115 38 fc		   jr c,$-2 
1117 12			  ld (de),a 
1118 13			  inc de 
1119			 
1119 01 e8 03		  ld bc,1000 
111c 3e 3a		  ld a,'9'+1 
111e 3d			  dec a  
111f 09			  add hl,bc  
1120 30 fc		   jr nc,$-2 
1122 12			  ld (de),a 
1123 13			  inc de 
1124			 
1124 01 9c ff		  ld bc,-100 
1127 3e 2f		  ld a,'0'-1 
1129 3c			  inc a  
112a 09			  add hl,bc  
112b 38 fc		   jr c,$-2 
112d 12			  ld (de),a 
112e 13			  inc de 
112f			 
112f 7d			  ld a,l 
1130 26 3a		  ld h,'9'+1 
1132 25			  dec h  
1133 c6 0a		  add a,10  
1135 30 fb		   jr nc,$-3 
1137 c6 30		  add a,'0' 
1139 eb			  ex de,hl 
113a 72			  ld (hl),d 
113b 23			  inc hl 
113c 77			  ld (hl),a 
113d 23			  inc hl 
113e 36 00		  ld (hl),0 
1140			 
1140			;Now strip the leading zeros 
1140 0e fa		  ld c,-6 
1142 09			  add hl,bc 
1143 3e 30		  ld a,'0' 
1145 23			  inc hl  
1146 be			  cp (hl)  
1147 28 fc		  jr z,$-2 
1149			 
1149			;Make sure that the string is non-empty! 
1149 7e			  ld a,(hl) 
114a b7			  or a 
114b 20 01		  jr nz,.atoub 
114d 2b			  dec hl 
114e			.atoub: 
114e			 
114e f1			  pop af 
114f c1			  pop bc 
1150 d1			  pop de 
1151 c9			  ret 
1152			 
1152			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1152			 
1152			toUpper: 
1152			;A is the char. 
1152			;If A is a lowercase letter, this sets it to the matching uppercase 
1152			;18cc or 30cc or 41cc 
1152			;avg: 26.75cc 
1152 fe 61		  cp 'a' 
1154 d8			  ret c 
1155 fe 7b		  cp 'z'+1 
1157 d0			  ret nc 
1158 d6 20		  sub 'a'-'A' 
115a c9			  ret 
115b			 
115b			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
115b			 
115b			; String Length 
115b			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
115b			 
115b			; Get the length of the null-terminated string starting at $8000 hl 
115b			;    LD     HL, $8000 
115b			 
115b			strlenz: 
115b			 
115b af			    XOR    A               ; Zero is the value we are looking for. 
115c 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
115d 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
115e			                           ; 65, 536 bytes (the entire addressable memory space). 
115e ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1160			 
1160			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1160 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1161 6f			    LD     L, A             ; number of bytes 
1162 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1164 2b			    DEC    HL              ; Compensate for null. 
1165 c9				ret 
1166			 
1166			; Get the length of the A terminated string starting at $8000 hl 
1166			;    LD     HL, $8000 
1166			 
1166			strlent: 
1166			 
1166			                  ; A is the value we are looking for. 
1166 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1168 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
116e 2e 00		    LD     L, 0             ; number of bytes 
1170 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1172 2b			    DEC    HL              ; Compensate for null. 
1173 c9				ret 
1174			 
1174			 
1174			;Comparing Strings 
1174			 
1174			;IN    HL     Address of string1. 
1174			;      DE     Address of string2. 
1174			 
1174			; doc given but wrong??? 
1174			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1174			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1174			; tested 
1174			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1174			 
1174			strcmp_old: 
1174 e5			    PUSH   HL 
1175 d5			    PUSH   DE 
1176			 
1176 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1177 be			    CP     (HL)            ; (want to minimize work). 
1178 38 01		    JR     C, Str1IsBigger 
117a 7e			    LD     A, (HL) 
117b			 
117b			Str1IsBigger: 
117b 4f			    LD     C, A             ; Put length in BC 
117c 06 00		    LD     B, 0 
117e 13			    INC    DE              ; Increment pointers to meat of string. 
117f 23			    INC    HL 
1180			 
1180			CmpLoop: 
1180 1a			    LD     A, (DE)          ; Compare bytes. 
1181 ed a1		    CPI 
1183 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1185 13			    INC    DE              ; Update pointer. 
1186 ea 80 11		    JP     PE, CmpLoop 
1189			 
1189 d1			    POP    DE 
118a e1			    POP    HL 
118b 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
118c be			    CP     (HL) 
118d c9			    RET 
118e			 
118e			NoMatch: 
118e 2b			    DEC    HL 
118f be			    CP     (HL)            ; Compare again to affect carry. 
1190 d1			    POP    DE 
1191 e1			    POP    HL 
1192 c9			    RET 
1193			 
1193			;; test strmp 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr z, .z1 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z1: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr z, .z2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr c, .c1 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c1: 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr c, .c2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;	NEXTW 
1193			;.str1:   db "string1",0 
1193			;.str2:   db "string2",0 
1193			 
1193			; only care about direct match or not 
1193			; hl and de strings 
1193			; zero set if the same 
1193			 
1193			strcmp: 
1193 1a				ld a, (de) 
1194 be				cp (hl) 
1195 28 02			jr z, .ssame 
1197 b7				or a 
1198 c9				ret 
1199			 
1199			.ssame:  
1199 fe 00			cp 0 
119b c8				ret z 
119c			 
119c 23				inc hl 
119d 13				inc de 
119e 18 f3			jr strcmp 
11a0				 
11a0				 
11a0			 
11a0			;Copyright (c) 2014, Luke Maurits 
11a0			;All rights reserved. 
11a0			; 
11a0			;Redistribution and use in source and binary forms, with or without 
11a0			;modification, are permitted provided that the following conditions are met: 
11a0			; 
11a0			;* Redistributions of source code must retain the above copyright notice, this 
11a0			;  list of conditions and the following disclaimer. 
11a0			; 
11a0			;* Redistributions in binary form must reproduce the above copyright notice, 
11a0			;  this list of conditions and the following disclaimer in the documentation 
11a0			;  and/or other materials provided with the distribution. 
11a0			; 
11a0			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
11a0			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
11a0			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
11a0			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
11a0			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
11a0			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
11a0			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
11a0			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
11a0			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
11a0			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
11a0			 
11a0			; https://github.com/lmaurits/lm512/blob/master/string.z80 
11a0			 
11a0			StrictStrCmp: 
11a0				; Load next chars of each string 
11a0 1a				ld a, (de) 
11a1 47				ld b, a 
11a2 7e				ld a, (hl) 
11a3				; Compare 
11a3 b8				cp b 
11a4				; Return non-zero if chars don't match 
11a4 c0				ret nz 
11a5				; Check for end of both strings 
11a5 fe 00			cp "\0" 
11a7				; Return if strings have ended 
11a7 c8				ret z 
11a8				; Otherwise, advance to next chars 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f4			jr StrictStrCmp 
11ac			 
11ac			;end 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				call bp_on 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 2e 63		      ld    HL, heap_start 
11b0 22 29 63		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 2b 63		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 92 e2		      ld    HL, heap_start+heap_size-4 
11bc 22 2e 63		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 64 7f		      ld    HL, heap_size-4 
11c2 22 30 63		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 94 e2		      ld    (heap_start+heap_size-2), HL 
11cb 22 92 e2		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 29 63		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 29 63		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			; Now handled by SPI  
1369			;if SOUND_ENABLE  
1369			;	include "firmware_sound.asm"  
1369			;endif  
1369			  
1369			include "firmware_diags.asm"  
1369			; Hardware diags menu 
1369			 
1369			 
1369			config: 
1369			 
1369 3e 00			ld a, 0 
136b 21 8f 13			ld hl, .configmn 
136e cd f9 0b			call menu 
1371			 
1371 fe 00			cp 0 
1373 c8				ret z 
1374			 
1374			;	cp 1 
1374			;	call z, .savetostore 
1374			 
1374 fe 01			cp 1 
1376			if STARTUP_V1 
1376 cc a5 13			call z, .selautoload 
1379			endif 
1379			 
1379			if STARTUP_V2 
1379				call z, .enautoload 
1379			endif 
1379 fe 02			cp 2 
137b cc 9b 13			call z, .disautoload 
137e			;	cp 3 
137e			;	call z, .selbank 
137e fe 03			cp 3 
1380 cc c3 13			call z, .debug_tog 
1383 fe 04			cp 4 
1385 cc 11 15			call z, .bpsgo 
1388 fe 05			cp 5 
138a cc ec 13			call z, hardware_diags 
138d			if STARTUP_V2 
138d				cp 6 
138d				call z, create_startup 
138d			endif 
138d 18 da			jr config 
138f			 
138f			.configmn: 
138f			;	dw prom_c3 
138f ff 16			dw prom_c2 
1391 14 17			dw prom_c2a 
1393			;	dw prom_c2b 
1393			;	dw prom_c4 
1393 33 17			dw prom_m4 
1395 4e 17			dw prom_m4b 
1397 56 17			dw prom_c1 
1399			if STARTUP_V2 
1399				dw prom_c9 
1399			endif 
1399 00 00			dw 0 
139b				 
139b			 
139b			if STARTUP_V2 
139b			.enautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 1 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b				ld hl, prom_notav 
139b				ld de, prom_empty 
139b				call info_panel 
139b				endif 
139b			 
139b			 
139b				ret 
139b			endif 
139b			 
139b			.disautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 0 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b 21 65 17			ld hl, prom_notav 
139e 11 7b 17			ld de, prom_empty 
13a1 cd 59 0b			call info_panel 
13a4				endif 
13a4			 
13a4			 
13a4 c9				ret 
13a5			 
13a5			if STARTUP_V1 
13a5			 
13a5			; Select auto start 
13a5			 
13a5			.selautoload: 
13a5			 
13a5				 
13a5				if STORAGE_SE 
13a5			 
13a5					call config_dir 
13a5				        ld hl, scratch 
13a5					ld a, 0 
13a5					call menu 
13a5			 
13a5					cp 0 
13a5					ret z 
13a5			 
13a5					dec a 
13a5			 
13a5			 
13a5					; locate menu option 
13a5			 
13a5					ld hl, scratch 
13a5					call table_lookup 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALl" 
13a5						CALLMONITOR 
13a5					endif 
13a5					; with the pointer to the menu it, the byte following the zero term is the file id 
13a5			 
13a5					ld a, 0 
13a5					ld bc, 50   ; max of bytes to look at 
13a5					cpir  
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALb" 
13a5						CALLMONITOR 
13a5					endif 
13a5					;inc hl 
13a5			 
13a5					ld a, (hl)   ; file id 
13a5					 
13a5				        ; save bank and file ids 
13a5			 
13a5					push af 
13a5			 
13a5			; TODO need to save to block 0 on bank 1	 
13a5			 
13a5					call storage_get_block_0 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "AL0" 
13a5						CALLMONITOR 
13a5					endif 
13a5					pop af 
13a5			 
13a5					ld (store_page+STORE_0_FILERUN),a 
13a5					 
13a5					; save bank id 
13a5			 
13a5					ld a,(spi_device) 
13a5					ld (store_page+STORE_0_BANKRUN),a 
13a5			 
13a5					; enable auto run of store file 
13a5			 
13a5					ld a, 1 
13a5					ld (store_page+STORE_0_AUTOFILE),a 
13a5			 
13a5					; save buffer 
13a5			 
13a5					ld hl, 0 
13a5					ld de, store_page 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALw" 
13a5						CALLMONITOR 
13a5					endif 
13a5				call storage_write_block	 ; save update 
13a5			  
13a5			 
13a5			 
13a5			 
13a5					ld hl, scratch 
13a5					call config_fdir 
13a5			 
13a5				else 
13a5			 
13a5 21 65 17			ld hl, prom_notav 
13a8 11 7b 17			ld de, prom_empty 
13ab cd 59 0b			call info_panel 
13ae			 
13ae				endif 
13ae c9				ret 
13af			endif 
13af			 
13af			 
13af			; Select storage bank 
13af			 
13af			.selbank: 
13af			 
13af			;	if STORAGE_SE 
13af			;	else 
13af			 
13af 21 65 17			ld hl, prom_notav 
13b2 11 7b 17			ld de, prom_empty 
13b5 cd 59 0b			call info_panel 
13b8			;	endif 
13b8				 
13b8 c9				ret 
13b9			 
13b9			if STORAGE_SE 
13b9			 
13b9			.config_ldir:   
13b9				; Load storage bank labels into menu array 
13b9			 
13b9				 
13b9			 
13b9			 
13b9				ret 
13b9			 
13b9			 
13b9			endif 
13b9			 
13b9			 
13b9			; Save user words to storage 
13b9			 
13b9			.savetostore: 
13b9			 
13b9			;	if STORAGE_SE 
13b9			; 
13b9			;		call config_dir 
13b9			;	        ld hl, scratch 
13b9			;		ld a, 0 
13b9			;		call menu 
13b9			;		 
13b9			;		ld hl, scratch 
13b9			;		call config_fdir 
13b9			; 
13b9			;	else 
13b9			 
13b9 21 65 17			ld hl, prom_notav 
13bc 11 7b 17			ld de, prom_empty 
13bf cd 59 0b			call info_panel 
13c2			 
13c2			;	endif 
13c2			 
13c2 c9				ret 
13c3			 
13c3			if STARTUP_V2 
13c3			 
13c3			create_startup: 
13c3			 
13c3				ld a, 0 
13c3				ld hl, .crstart 
13c3				call menu 
13c3			 
13c3				cp 0 
13c3				ret z 
13c3			 
13c3				cp 1 
13c3				call z, .genlsword 
13c3				cp 2 
13c3				call z, .genedword 
13c3			 
13c3				cp 3 
13c3				call z, .gendemword 
13c3			 
13c3				cp 4 
13c3				call z, .genutlword 
13c3				cp 5 
13c3				call z, .genspiword 
13c3				cp 6 
13c3				call z, .genkeyword 
13c3				cp 7 
13c3				call z, .gensoundword 
13c3				cp 8 
13c3				call z, .genhwword 
13c3				jr create_startup 
13c3			 
13c3			.genhwword: 
13c3				ld hl, crs_hw 
13c3				ld de, .hwworddef 
13c3				call .genfile 
13c3				ret 
13c3			.gensoundword: 
13c3				ld hl, crs_sound 
13c3				ld de, .soundworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genlsword: 
13c3				ld hl, crs_s1 
13c3				ld de, .lsworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genedword: 
13c3				ld de, .edworddef 
13c3				ld hl, crs_s2 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.gendemword: 
13c3				ld de, .demoworddef 
13c3				ld hl, crs_s3 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genutlword: 
13c3				ld hl, crs_s4 
13c3				ld de, .utilwordef 
13c3				call .genfile 
13c3				ret 
13c3			.genspiword: 
13c3				ld hl, crs_s5 
13c3				ld de, .spiworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genkeyword: 
13c3				ld hl, crs_s6 
13c3				ld de, .keyworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			; hl - points to file name 
13c3			; de - points to strings to add to file 
13c3			 
13c3			.genfile: 
13c3				push hl 
13c3				push de 
13c3			 
13c3				call clear_display 
13c3				ld a, display_row_1 
13c3				ld de, .genfiletxt 
13c3				call str_at_display 
13c3				call update_display 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3			 
13c3				push de 
13c3				call storage_create 
13c3				; id in hl 
13c3				pop de   ; table of strings to add 
13c3			 
13c3			.genloop: 
13c3			 
13c3				push hl ; save id for next time around 
13c3				push de ; save de for next time around 
13c3			 
13c3				ex de, hl 
13c3				call loadwordinhl 
13c3				ex de, hl 
13c3			 
13c3				; need hl to be the id 
13c3				; need de to be the string ptr 
13c3				 
13c3				call storage_append 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3				inc de 
13c3				inc de 
13c3			 
13c3				ld a,(de) 
13c3				cp 0 
13c3				jr nz, .genloop 
13c3				inc de 
13c3				ld a, (de) 
13c3				dec de 
13c3				cp 0 
13c3				jr nz, .genloop	 
13c3			 
13c3				ret 
13c3			 
13c3			.genfiletxt:  db "Creating file...",0 
13c3			 
13c3			.hwworddef: 
13c3				dw test5 
13c3				dw test6 
13c3				dw test7 
13c3				dw test8 
13c3				dw test9 
13c3				dw test10 
13c3				dw 0 
13c3			 
13c3			.soundworddef: 
13c3				dw sound1 
13c3				dw sound2 
13c3				dw sound3 
13c3				dw sound4 
13c3				dw sound5 
13c3				dw sound6 
13c3				dw sound7 
13c3				dw sound8 
13c3				dw sound9 
13c3				dw 0 
13c3			 
13c3			.utilwordef: 
13c3				dw strncpy 
13c3				dw type 
13c3				dw tuck 
13c3				dw clrstack 
13c3				dw longread 
13c3				dw start1 
13c3				dw start2 
13c3			; duplicated 
13c3			;	dw start3b 
13c3			;	dw start3c 
13c3				dw list 
13c3				dw 0 
13c3			 
13c3			.lsworddef: 
13c3				dw start3b 
13c3				dw 0 
13c3			 
13c3			.edworddef: 
13c3				dw edit1 
13c3				dw edit2 
13c3				dw edit3 
13c3				dw 0 
13c3			 
13c3			.demoworddef: 
13c3				dw game1 
13c3				dw game1a 
13c3				dw game1b 
13c3				dw game1c 
13c3				dw game1d 
13c3				dw game1s 
13c3				dw game1t 
13c3				dw game1f 
13c3				dw game1z 
13c3				dw game1zz 
13c3				dw ssv2 
13c3				dw ssv3 
13c3				dw ssv4 
13c3				dw ssv5 
13c3				dw ssv1 
13c3				dw ssv1cpm	 
13c3			;	dw game2b 
13c3			;	dw game2bf 
13c3			;	dw game2mba 
13c3			;	dw game2mbas	 
13c3			;	dw game2mbht 
13c3			;	dw game2mbms 
13c3			;	dw game2mb 
13c3			;	dw game3w 
13c3			;	dw game3p 
13c3			;	dw game3sc 
13c3			;	dw game3vsi 
13c3			;	dw game3vs 
13c3				dw 0 
13c3			 
13c3			 
13c3			.spiworddef: 
13c3			 
13c3			    dw spi1 
13c3			    dw spi2 
13c3			    dw spi2b 
13c3			    dw spi3 
13c3			    dw spi4 
13c3			    dw spi5 
13c3			;    dw spi6 
13c3			;    dw spi7 
13c3			 
13c3			;    dw spi8 
13c3			;    dw spi9 
13c3			;    dw spi10 
13c3			    dw 0 
13c3			 
13c3			.keyworddef: 
13c3			 
13c3				dw keyup 
13c3				dw keydown 
13c3				dw keyleft 
13c3				dw keyright 
13c3				dw 	keyf1 
13c3				dw keyf2 
13c3				dw keyf3 
13c3				dw keyf4 
13c3				dw keyf5 
13c3				dw keyf6 
13c3				dw keyf7 
13c3				dw keyf8 
13c3				dw keyf9 
13c3				dw keyf10 
13c3				dw keyf11 
13c3				dw keyf12 
13c3				dw keytab 
13c3				dw keycr 
13c3				dw keyhome 
13c3				dw keyend 
13c3				dw keybs 
13c3				dw 0 
13c3			 
13c3			.crstart: 
13c3				dw crs_s1 
13c3				dw crs_s2 
13c3				dw crs_s3 
13c3				dw crs_s4 
13c3				dw crs_s5 
13c3				dw crs_s6 
13c3				dw crs_sound 
13c3				dw crs_hw 
13c3				dw 0 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			if STORAGE_SE 
13c3			 
13c3			config_fdir: 
13c3				; using the scratch dir go through and release the memory allocated for each string 
13c3				 
13c3				ld hl, scratch 
13c3			.cfdir:	ld e,(hl) 
13c3				inc hl 
13c3				ld d,(hl) 
13c3				inc hl 
13c3			 
13c3				ex de, hl 
13c3				call ishlzero 
13c3				ret z     ; return on null pointer 
13c3				call free 
13c3				ex de, hl 
13c3				jr .cfdir 
13c3			 
13c3			 
13c3				ret 
13c3			 
13c3			 
13c3			config_dir: 
13c3			 
13c3				; for the config menus that need to build a directory of storage call this routine 
13c3				; it will construct a menu in scratch to pass to menu 
13c3			 
13c3				; open storage device 
13c3			 
13c3				; execute DIR to build a list of files and their ids into scratch in menu format 
13c3				; once the menu has finished then will need to call config_fdir to release the strings 
13c3				 
13c3				; c = number items 
13c3			 
13c3				 
13c3				call storage_get_block_0 
13c3			 
13c3				ld hl, store_page     ; get current id count 
13c3				ld b, (hl) 
13c3				ld c, 0    ; count of files   
13c3			 
13c3			 
13c3				ld hl, scratch 
13c3				ld (store_tmp2), hl    ; location to poke strings 
13c3			 
13c3				; check for empty drive 
13c3			 
13c3				ld a, 0 
13c3				cp b 
13c3				jp z, .dirdone 
13c3			 
13c3				 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdc" 
13c3						CALLMONITOR 
13c3					endif 
13c3			 
13c3			 
13c3			.diritem:	 
13c3				push bc 
13c3				; for each of the current ids do a search for them and if found push to stack 
13c3			 
13c3					ld hl, STORE_BLOCK_PHY 
13c3					ld d, 0		 ; look for extent 0 of block id as this contains file name 
13c3					ld e,b 
13c3			 
13c3					call storage_findnextid 
13c3			 
13c3			 
13c3					; if found hl will be non zero 
13c3			 
13c3					call ishlzero 
13c3					jr z, .dirnotfound 
13c3			 
13c3					; increase count 
13c3			 
13c3					pop bc	 
13c3					inc c 
13c3					push bc 
13c3					 
13c3			 
13c3					; get file header and push the file name 
13c3			 
13c3					ld de, store_page 
13c3					call storage_read_block 
13c3			 
13c3					; push file id to stack 
13c3				 
13c3					ld a, (store_page) 
13c3					ld h, 0 
13c3					ld l, a 
13c3			 
13c3					;call forth_push_numhl 
13c3					; TODO store id 
13c3			 
13c3					push hl 
13c3			 
13c3					; push extent count to stack  
13c3				 
13c3					ld hl, store_page+3 
13c3			 
13c3					; get file name length 
13c3			 
13c3					call strlenz   
13c3			 
13c3					inc hl   ; cover zero term 
13c3					inc hl  ; stick the id at the end of the area 
13c3			 
13c3					push hl 
13c3					pop bc    ; move length to bc 
13c3			 
13c3					call malloc 
13c3			 
13c3					; TODO save malloc area to scratch 
13c3			 
13c3					ex de, hl 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), e 
13c3					inc hl 
13c3					ld (hl), d 
13c3					inc hl 
13c3					ld (store_tmp2), hl 
13c3			 
13c3					 
13c3			 
13c3					;pop hl   ; get source 
13c3			;		ex de, hl    ; swap aronund	 
13c3			 
13c3					ld hl, store_page+3 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "CFd" 
13c3						CALLMONITOR 
13c3					endif 
13c3					ldir 
13c3			 
13c3					; de is past string, move back one and store id 
13c3					 
13c3					dec de 
13c3			 
13c3					; store file id 
13c3			 
13c3					pop hl 
13c3					ex de,hl 
13c3					ld (hl), e 
13c3			 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdi" 
13c3						CALLMONITOR 
13c3					endif 
13c3					 
13c3			.dirnotfound: 
13c3					pop bc     
13c3					djnz .diritem 
13c3				 
13c3			.dirdone:	 
13c3			 
13c3					ld a, 0 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), a 
13c3					inc hl 
13c3					ld (hl), a 
13c3					inc hl 
13c3					; push a count of the dir items found 
13c3			 
13c3			;		ld h, 0 
13c3			;		ld l, c 
13c3			 
13c3				ret 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			; Settings 
13c3			; Run  
13c3			 
13c3			 
13c3			 
13c3			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
13c3			;;hd_menu2:   db "        2: Editor",0   
13c3			;hd_menu2:   db "        2: Editor       6: Menu",0   
13c3			;hd_menu3:   db "        3: Storage",0 
13c3			;hd_menu4:   db "0=quit  4: Debug",0 
13c3			;hd_don:     db "ON",0 
13c3			;hd_doff:     db "OFF",0 
13c3			; 
13c3			; 
13c3			; 
13c3			;hardware_diags_old:       
13c3			; 
13c3			;.diagmenu: 
13c3			;	call clear_display 
13c3			;	ld a, display_row_1 
13c3			;	ld de, hd_menu1 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_2 
13c3			;	ld de, hd_menu2 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_3 
13c3			;	ld de, hd_menu3 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a,  display_row_4 
13c3			;	ld de, hd_menu4 
13c3			;	call str_at_display 
13c3			; 
13c3			;	; display debug state 
13c3			; 
13c3			;	ld de, hd_don 
13c3			;	ld a, (os_view_disable) 
13c3			;	cp 0 
13c3			;	jr z, .distog 
13c3			;	ld de, hd_doff 
13c3			;.distog: ld a, display_row_4+17 
13c3			;	call str_at_display 
13c3			; 
13c3			;	call update_display 
13c3			; 
13c3			;	call cin_wait 
13c3			; 
13c3			; 
13c3			; 
13c3			;	cp '4' 
13c3			;	jr nz, .diagn1 
13c3			; 
13c3			;	; debug toggle 
13c3			; 
13c3			;	ld a, (os_view_disable) 
13c3			;	ld b, '*' 
13c3			;	cp 0 
13c3			;	jr z, .debtog 
13c3			;	ld b, 0 
13c3			;.debtog:	 
13c3			;	ld a,b 
13c3			;	ld (os_view_disable),a 
13c3			; 
13c3			;.diagn1: cp '0' 
13c3			;	 ret z 
13c3			; 
13c3			;;	cp '1' 
13c3			;;       jp z, matrix	 
13c3			;;   TODO keyboard matrix test 
13c3			; 
13c3			;	cp '2' 
13c3			;	jp z, .diagedit 
13c3			; 
13c3			;;	cp '6' 
13c3			;;	jp z, .menutest 
13c3			;;if ENABLE_BASIC 
13c3			;;	cp '6' 
13c3			;;	jp z, basic 
13c3			;;endif 
13c3			 ; 
13c3			;	jp .diagmenu 
13c3			; 
13c3			; 
13c3			;	ret 
13c3			 
13c3			 
13c3			.debug_tog: 
13c3 21 0d 14			ld hl, .menudebug 
13c6				 
13c6			;	ld a, (os_view_disable) 
13c6			;	cp '*' 
13c6 3a 6f ee			ld a,(debug_vector) 
13c9 fe c9			cp $C9   ; RET 
13cb 20 04			jr nz,.tdon  
13cd 3e 01			ld a, 1 
13cf 18 02			jr .tog1 
13d1 3e 00		.tdon: ld a, 0 
13d3			 
13d3			.tog1: 
13d3 cd f9 0b			call menu 
13d6 fe 00			cp 0 
13d8 c8				ret z 
13d9 fe 01			cp 1    ; disable debug 
13db 28 04			jr z, .dtog0 
13dd 3e 2a			ld a, '*' 
13df 18 05			jr .dtogset 
13e1			.dtog0:  
13e1				;ld a, 0 
13e1 cd ff 14			call bp_on 
13e4 18 dd			jr .debug_tog 
13e6			.dtogset:  
13e6				; ld (os_view_disable), a 
13e6 cd 0b 15			call bp_off 
13e9 c3 c3 13			jp .debug_tog 
13ec			 
13ec			 
13ec			hardware_diags:       
13ec			 
13ec			.diagm: 
13ec 21 ff 13			ld hl, .menuitems 
13ef 3e 00			ld a, 0 
13f1 cd f9 0b			call menu 
13f4			 
13f4 fe 00		         cp 0 
13f6 c8				 ret z 
13f7			 
13f7 fe 02			cp 2 
13f9 ca 58 14			jp z, .diagedit 
13fc			 
13fc			;	cp '6' 
13fc			;	jp z, .menutest 
13fc			;if ENABLE_BASIC 
13fc			;	cp '6' 
13fc			;	jp z, basic 
13fc			;endif 
13fc			  
13fc c3 ec 13			jp .diagm 
13ff			 
13ff				 
13ff 13 14		.menuitems:   	dw .m1 
1401 1e 14				dw .m2 
1403 25 14				dw .m3 
1405 2d 14				dw .m5 
1407 33 14				dw .m5a 
1409 3c 14				dw .m5b 
140b 00 00				dw 0 
140d			 
140d			.menudebug: 
140d 45 14				dw .m6 
140f 4e 14				dw .m7 
1411 00 00				dw 0 
1413			 
1413 .. 00		.m1:   db "Key Matrix",0 
141e .. 00		.m2:   db "Editor",0 
1425 .. 00		.m3:   db "Storage",0 
142d .. 00		.m5:   db "Sound",0 
1433 .. 00		.m5a:  db "RAM Test",0 
143c .. 00		.m5b:  db "LCD Test",0 
1445			 
1445 .. 00		.m6:   db "Debug ON",0 
144e .. 00		.m7:   db "Debug OFF",0 
1458			 
1458			; debug editor 
1458			 
1458			.diagedit: 
1458			 
1458 21 bb e2			ld hl, scratch 
145b			;	ld bc, 250 
145b			;	ldir 
145b				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
145b 3e 00			ld a, 0 
145d 77				ld (hl), a 
145e 23				inc hl 
145f 77				ld (hl), a 
1460 23				inc hl 
1461 77				ld (hl), a 
1462			 
1462 cd c8 0b		        call clear_display 
1465 cd eb 0b			call update_display 
1468				;ld a, 1 
1468				;ld (hardware_diag), a 
1468			.diloop: 
1468 3e 00			ld a, display_row_1 
146a 0e 00			ld c, 0 
146c 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
146e 1e 28			ld e, 40 
1470			 
1470 21 bb e2			ld hl, scratch	 
1473 cd 22 0e			call input_str 
1476			 
1476 3e 28			ld a, display_row_2 
1478 11 bb e2			ld de, scratch 
147b cd db 0b			call str_at_display 
147e cd eb 0b			call update_display 
1481			 
1481 c3 68 14			jp .diloop 
1484			 
1484			 
1484			; pass word in hl 
1484			; a has display location 
1484			display_word_at: 
1484 f5				push af 
1485 e5				push hl 
1486 7c				ld a,h 
1487 21 c0 e5			ld hl, os_word_scratch 
148a cd fe 0f			call hexout 
148d e1				pop hl 
148e 7d				ld a,l 
148f 21 c2 e5			ld hl, os_word_scratch+2 
1492 cd fe 0f			call hexout 
1495 21 c4 e5			ld hl, os_word_scratch+4 
1498 3e 00			ld a,0 
149a 77				ld (hl),a 
149b 11 c0 e5			ld de,os_word_scratch 
149e f1				pop af 
149f cd db 0b				call str_at_display 
14a2 c9				ret 
14a3			 
14a3			display_ptr_state: 
14a3			 
14a3				; to restore afterwards 
14a3			 
14a3 d5				push de 
14a4 c5				push bc 
14a5 e5				push hl 
14a6 f5				push af 
14a7			 
14a7				; for use in here 
14a7			 
14a7			;	push bc 
14a7			;	push de 
14a7			;	push hl 
14a7			;	push af 
14a7			 
14a7 cd c8 0b			call clear_display 
14aa			 
14aa 11 82 16			ld de, .ptrstate 
14ad 3e 00			ld a, display_row_1 
14af cd db 0b			call str_at_display 
14b2			 
14b2				; display debug step 
14b2			 
14b2			 
14b2 11 65 ee			ld de, debug_mark 
14b5 3e 26			ld a, display_row_1+display_cols-2 
14b7 cd db 0b			call str_at_display 
14ba			 
14ba				; display a 
14ba 11 8c 16			ld de, .ptrcliptr 
14bd 3e 28			ld a, display_row_2 
14bf cd db 0b			call str_at_display 
14c2			 
14c2 f1				pop af 
14c3 2a 3a ea			ld hl,(cli_ptr) 
14c6 3e 30			ld a, display_row_2+8 
14c8 cd 84 14			call display_word_at 
14cb			 
14cb			 
14cb				; display hl 
14cb			 
14cb			 
14cb 11 94 16			ld de, .ptrclioptr 
14ce 3e 32			ld a, display_row_2+10 
14d0 cd db 0b			call str_at_display 
14d3			; 
14d3			;	pop hl 
14d3 3e 35			ld a, display_row_2+13 
14d5 2a 38 ea			ld hl,(cli_origptr) 
14d8 cd 84 14			call display_word_at 
14db			; 
14db			;	 
14db			;	; display de 
14db			 
14db			;	ld de, .regstatede 
14db			;	ld a, display_row_3 
14db			;	call str_at_display 
14db			 
14db			;	pop de 
14db			;	ld h,d 
14db			;	ld l, e 
14db			;	ld a, display_row_3+3 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display bc 
14db			 
14db			;	ld de, .regstatebc 
14db			;	ld a, display_row_3+10 
14db			;	call str_at_display 
14db			 
14db			;	pop bc 
14db			;	ld h,b 
14db			;	ld l, c 
14db			;	ld a, display_row_3+13 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display dsp 
14db			 
14db			;	ld de, .regstatedsp 
14db			;	ld a, display_row_4 
14db			;	call str_at_display 
14db			 
14db				 
14db			;	ld hl,(cli_data_sp) 
14db			;	ld a, display_row_4+4 
14db			;	call display_word_at 
14db			 
14db				; display rsp 
14db			 
14db 11 c3 16			ld de, .regstatersp 
14de 3e 82			ld a, display_row_4+10 
14e0 cd db 0b			call str_at_display 
14e3			 
14e3				 
14e3 2a ec e9			ld hl,(cli_ret_sp) 
14e6 3e 86			ld a, display_row_4+14 
14e8 cd 84 14			call display_word_at 
14eb			 
14eb cd eb 0b			call update_display 
14ee			 
14ee cd 00 0b			call delay1s 
14f1 cd 00 0b			call delay1s 
14f4 cd 00 0b			call delay1s 
14f7			 
14f7			 
14f7 cd 08 1b			call next_page_prompt 
14fa			 
14fa				; restore  
14fa			 
14fa f1				pop af 
14fb e1				pop hl 
14fc c1				pop bc 
14fd d1				pop de 
14fe c9				ret 
14ff			 
14ff			; Update the break point vector so that the user can hook a new routine 
14ff			 
14ff			bp_on: 
14ff 3e c3			ld a, $c3    ; JP 
1501 32 6f ee			ld (debug_vector), a 
1504 21 11 15			ld hl, break_point_state 
1507 22 70 ee			ld (debug_vector+1), hl 
150a c9				ret 
150b			 
150b			bp_off: 
150b 3e c9			ld a, $c9    ; RET 
150d 32 6f ee			ld (debug_vector), a 
1510 c9				ret 
1511			 
1511			 
1511			break_point_state: 
1511			;	push af 
1511			; 
1511			;	; see if disabled 
1511			; 
1511			;	ld a, (os_view_disable) 
1511			;	cp '*' 
1511			;	jr nz, .bpsgo 
1511			;	pop af 
1511			;	ret 
1511			 
1511			.bpsgo: 
1511			;	pop af 
1511 f5				push af 
1512 22 9d e2			ld (os_view_hl), hl 
1515 ed 53 9b e2		ld (os_view_de), de 
1519 ed 43 99 e2		ld (os_view_bc), bc 
151d e5				push hl 
151e 6f				ld l, a 
151f 26 00			ld h, 0 
1521 22 9f e2			ld (os_view_af),hl 
1524			 
1524 21 ab ed				ld hl, display_fb0 
1527 22 c6 eb				ld (display_fb_active), hl 
152a e1				pop hl	 
152b			 
152b 3e 31			ld a, '1' 
152d fe 2a		.bps1:  cp '*' 
152f cc 0b 15			call z, bp_off 
1532			;	jr nz, .bps1b 
1532			;	ld (os_view_disable),a 
1532 fe 31		.bps1b:  cp '1' 
1534 20 14			jr nz, .bps2 
1536			 
1536				; display reg 
1536			 
1536				 
1536			 
1536 3a 9f e2			ld a, (os_view_af) 
1539 2a 9d e2			ld hl, (os_view_hl) 
153c ed 5b 9b e2		ld de, (os_view_de) 
1540 ed 4b 99 e2		ld bc, (os_view_bc) 
1544 cd de 15			call display_reg_state 
1547 c3 ca 15			jp .bpschk 
154a			 
154a fe 32		.bps2:  cp '2' 
154c 20 08			jr nz, .bps3 
154e				 
154e				; display hl 
154e 2a 9d e2			ld hl, (os_view_hl) 
1551 cd c8 16			call display_dump_at_hl 
1554			 
1554 18 74			jr .bpschk 
1556			 
1556 fe 33		.bps3:  cp '3' 
1558 20 08			jr nz, .bps4 
155a			 
155a			        ; display de 
155a 2a 9b e2			ld hl, (os_view_de) 
155d cd c8 16			call display_dump_at_hl 
1560			 
1560 18 68			jr .bpschk 
1562 fe 34		.bps4:  cp '4' 
1564 20 08			jr nz, .bps5 
1566			 
1566			        ; display bc 
1566 2a 99 e2			ld hl, (os_view_bc) 
1569 cd c8 16			call display_dump_at_hl 
156c			 
156c 18 5c			jr .bpschk 
156e fe 35		.bps5:  cp '5' 
1570 20 08		        jr nz, .bps7 
1572			 
1572				; display cur ptr 
1572 2a 3a ea			ld hl, (cli_ptr) 
1575 cd c8 16			call display_dump_at_hl 
1578			 
1578 18 50			jr .bpschk 
157a fe 36		.bps7:  cp '6' 
157c 20 08			jr nz, .bps8b 
157e				 
157e				; display cur orig ptr 
157e 2a 38 ea			ld hl, (cli_origptr) 
1581 cd c8 16			call display_dump_at_hl 
1584 18 44			jr .bpschk 
1586 fe 37		.bps8b:  cp '7' 
1588 20 08			jr nz, .bps9 
158a				 
158a				; display dsp 
158a 2a e8 e9			ld hl, (cli_data_sp) 
158d cd c8 16			call display_dump_at_hl 
1590			 
1590 18 38			jr .bpschk 
1592 fe 39		.bps9:  cp '9' 
1594 20 05			jr nz, .bps8c 
1596				 
1596				; display SP 
1596			;	ld hl, sp 
1596 cd c8 16			call display_dump_at_hl 
1599			 
1599 18 2f			jr .bpschk 
159b fe 38		.bps8c:  cp '8' 
159d 20 08			jr nz, .bps8d 
159f				 
159f				; display rsp 
159f 2a ec e9			ld hl, (cli_ret_sp) 
15a2 cd c8 16			call display_dump_at_hl 
15a5			 
15a5 18 23			jr .bpschk 
15a7 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
15a9 20 05			jr nz, .bps8 
15ab cd c2 18			call monitor 
15ae			 
15ae 18 1a			jr .bpschk 
15b0 fe 30		.bps8:  cp '0' 
15b2 20 16			jr nz, .bpschk 
15b4			 
15b4 21 0a ed				ld hl, display_fb1 
15b7 22 c6 eb				ld (display_fb_active), hl 
15ba cd eb 0b				call update_display 
15bd			 
15bd				;ld a, (os_view_af) 
15bd 2a 9d e2			ld hl, (os_view_hl) 
15c0 ed 5b 9b e2		ld de, (os_view_de) 
15c4 ed 4b 99 e2		ld bc, (os_view_bc) 
15c8 f1				pop af 
15c9 c9				ret 
15ca			 
15ca			.bpschk:   
15ca cd 00 0b			call delay1s 
15cd 3e 9f		ld a,display_row_4 + display_cols - 1 
15cf 11 06 1b		        ld de, endprg 
15d2 cd db 0b			call str_at_display 
15d5 cd eb 0b			call update_display 
15d8 cd fe 62			call cin_wait 
15db			 
15db c3 2d 15			jp .bps1 
15de			 
15de			 
15de			display_reg_state: 
15de			 
15de				; to restore afterwards 
15de			 
15de d5				push de 
15df c5				push bc 
15e0 e5				push hl 
15e1 f5				push af 
15e2			 
15e2				; for use in here 
15e2			 
15e2 c5				push bc 
15e3 d5				push de 
15e4 e5				push hl 
15e5 f5				push af 
15e6			 
15e6 cd c8 0b			call clear_display 
15e9			 
15e9 11 9e 16			ld de, .regstate 
15ec 3e 00			ld a, display_row_1 
15ee cd db 0b			call str_at_display 
15f1			 
15f1				; display debug step 
15f1			 
15f1			 
15f1 11 65 ee			ld de, debug_mark 
15f4 3e 25			ld a, display_row_1+display_cols-3 
15f6 cd db 0b			call str_at_display 
15f9			 
15f9				; display a 
15f9 11 ba 16			ld de, .regstatea 
15fc 3e 28			ld a, display_row_2 
15fe cd db 0b			call str_at_display 
1601			 
1601 e1				pop hl 
1602			;	ld h,0 
1602			;	ld l, a 
1602 3e 2b			ld a, display_row_2+3 
1604 cd 84 14			call display_word_at 
1607			 
1607			 
1607				; display hl 
1607			 
1607			 
1607 11 ae 16			ld de, .regstatehl 
160a 3e 32			ld a, display_row_2+10 
160c cd db 0b			call str_at_display 
160f			 
160f e1				pop hl 
1610 3e 35			ld a, display_row_2+13 
1612 cd 84 14			call display_word_at 
1615			 
1615				 
1615				; display de 
1615			 
1615 11 b2 16			ld de, .regstatede 
1618 3e 50			ld a, display_row_3 
161a cd db 0b			call str_at_display 
161d			 
161d e1				pop hl 
161e			;	ld h,d 
161e			;	ld l, e 
161e 3e 53			ld a, display_row_3+3 
1620 cd 84 14			call display_word_at 
1623			 
1623			 
1623				; display bc 
1623			 
1623 11 b6 16			ld de, .regstatebc 
1626 3e 5a			ld a, display_row_3+10 
1628 cd db 0b			call str_at_display 
162b			 
162b e1				pop hl 
162c			;	ld h,b 
162c			;	ld l, c 
162c 3e 5d			ld a, display_row_3+13 
162e cd 84 14			call display_word_at 
1631			 
1631			 
1631				; display dsp 
1631			 
1631 11 be 16			ld de, .regstatedsp 
1634 3e 78			ld a, display_row_4 
1636 cd db 0b			call str_at_display 
1639			 
1639				 
1639 2a e8 e9			ld hl,(cli_data_sp) 
163c 3e 7c			ld a, display_row_4+4 
163e cd 84 14			call display_word_at 
1641			 
1641				; display rsp 
1641			 
1641 11 c3 16			ld de, .regstatersp 
1644 3e 82			ld a, display_row_4+10 
1646 cd db 0b			call str_at_display 
1649			 
1649				 
1649 2a ec e9			ld hl,(cli_ret_sp) 
164c 3e 86			ld a, display_row_4+14 
164e cd 84 14			call display_word_at 
1651			 
1651 cd eb 0b			call update_display 
1654			 
1654			;	call delay1s 
1654			;	call delay1s 
1654			;	call delay1s 
1654			 
1654			 
1654			;	call next_page_prompt 
1654			 
1654				; restore  
1654			 
1654 f1				pop af 
1655 e1				pop hl 
1656 c1				pop bc 
1657 d1				pop de 
1658 c9				ret 
1659			 
1659 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
166d .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1682 .. 00		.ptrstate:	db "Ptr State",0 
168c .. 00		.ptrcliptr:     db "cli_ptr",0 
1694 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
169e .. 00		.regstate:	db "Reg State (1/0)",0 
16ae .. 00		.regstatehl:	db "HL:",0 
16b2 .. 00		.regstatede:	db "DE:",0 
16b6 .. 00		.regstatebc:	db "BC:",0 
16ba .. 00		.regstatea:	db "A :",0 
16be .. 00		.regstatedsp:	db "DSP:",0 
16c3 .. 00		.regstatersp:	db "RSP:",0 
16c8			 
16c8			display_dump_at_hl: 
16c8 e5				push hl 
16c9 d5				push de 
16ca c5				push bc 
16cb f5				push af 
16cc			 
16cc 22 de e5			ld (os_cur_ptr),hl	 
16cf cd c8 0b			call clear_display 
16d2 cd 10 1a			call dumpcont 
16d5			;	call delay1s 
16d5			;	call next_page_prompt 
16d5			 
16d5			 
16d5 f1				pop af 
16d6 c1				pop bc 
16d7 d1				pop de 
16d8 e1				pop hl 
16d9 c9				ret 
16da			 
16da			;if ENABLE_BASIC 
16da			;	include "nascombasic.asm" 
16da			;	basic: 
16da			;	include "forth/FORTH.ASM" 
16da			;endif 
16da			 
16da			; eof 
16da			 
16da			 
# End of file firmware_diags.asm
16da			  
16da			include "firmware_prompts.asm"  
16da			; Prompts  
16da			 
16da			; boot messages 
16da			 
16da .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
16ef .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
16ff			 
16ff			 
16ff			; config menus 
16ff			 
16ff			;prom_c3: db "Add Dictionary To File",0 
16ff			 
16ff			if STARTUP_V1 
16ff .. 00		prom_c2: db "Select Autoload File",0 
1714 .. 00		prom_c2a: db "Disable Autoload File", 0 
172a			endif 
172a			 
172a			if STARTUP_V2 
172a			prom_c2: db "Enable Autoload Files",0 
172a			prom_c2a: db "Disable Autoload Files", 0 
172a			 
172a			crs_s1: db "*ls-word", 0 
172a			crs_s2: db "*ed-word", 0 
172a			crs_s3: db "*Demo-Games", 0 
172a			crs_s4: db "*Utils", 0 
172a			crs_s5: db "*SPI-Util", 0 
172a			crs_s6: db "*Key-Constants", 0 
172a			crs_sound: db "*Sound-Util", 0 
172a			crs_hw: db "*Hello-World",0 
172a			 
172a			 
172a			 
172a			endif 
172a			;prom_c2b: db "Select Storage Bank",0 
172a .. 00		prom_c4: db "Settings",0 
1733 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
174e .. 00		prom_m4b:   db "Monitor",0 
1756 .. 00		prom_c1: db "Hardware Diags",0 
1765			 
1765			 
1765			if STARTUP_V2 
1765			prom_c9: db "Create Startup Files",0 
1765			endif 
1765			 
1765 .. 00		prom_notav:    db "Feature not available",0 
177b .. 00		prom_empty:    db "",0 
177c			 
177c			; eof 
177c			 
# End of file firmware_prompts.asm
177c			  
177c			; eof  
177c			  
# End of file firmware.asm
177c			 
177c			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
177c			;if BASE_KEV  
177c			;baseram: equ 08000h 
177c			;endif 
177c			 
177c			;if BASE_SC114 
177c			;baseram:     equ    endofcode 
177c			;endif 
177c			 
177c			 
177c			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
177c			 
177c			; start system 
177c			 
177c			coldstart: 
177c				; set sp 
177c				; di/ei 
177c			 
177c f3				di 
177d 31 00 f0			ld sp, tos 
1780 cd fc 61			call init_nmi 
1783			;	ei 
1783			 
1783				; init spinner 
1783 3e 00			ld a,0 
1785 32 c0 eb			ld (display_active), a 
1788			 
1788				; disable breakpoint by default 
1788			 
1788				;ld a,'*' 
1788			;	ld a,' ' 
1788			;	ld (os_view_disable),a 
1788			 
1788				; set break point vector as new break point on or off 
1788 cd 0b 15			call bp_off 
178b			 
178b				; init hardware 
178b			 
178b				; init keyboard and screen hardware 
178b			 
178b cd 1f 01			call hardware_init 
178e			 
178e			 
178e cd 00 0b			call delay1s 
1791 3e 58			ld a, display_row_3+8 
1793 11 03 01			ld de, buildtime 
1796 cd db 0b			call str_at_display 
1799 cd eb 0b			call update_display 
179c			 
179c cd 00 0b			call delay1s 
179f cd 00 0b			call delay1s 
17a2 cd 00 0b			call delay1s 
17a5			 
17a5				; detect if any keys are held down to enable breakpoints at start up 
17a5			 
17a5 cd 06 63			call cin  
17a8 fe 00			cp 0 
17aa 28 03			jr z, .nokeys 
17ac			 
17ac				;call hardware_diags 
17ac cd 69 13			call config 
17af			 
17af			;	ld de, .bpen 
17af			;	ld a, display_row_4 
17af			;	call str_at_display 
17af			;	call update_display 
17af			; 
17af			;	ld a,0 
17af			;	ld (os_view_disable),a 
17af			; 
17af			;.bpwait: 
17af			;	call cin 
17af			;	cp 0 
17af			;	jr z, .bpwait 
17af			;	jr .nokeys 
17af			; 
17af			; 
17af			;.bpen:  db "Break points enabled!",0 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			.nokeys: 
17af			 
17af			 
17af				 
17af			 
17af			;jp  testkey 
17af			 
17af			;call storage_get_block_0 
17af			; 
17af			;ld hl, 0 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af				 
17af			;ld hl, 10 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			;stop:	nop 
17af			;	jp stop 
17af			 
17af			 
17af			 
17af			main: 
17af cd c8 0b			call clear_display 
17b2 cd eb 0b			call update_display 
17b5			 
17b5			 
17b5			 
17b5			;	call testlcd 
17b5			 
17b5			 
17b5			 
17b5 cd 50 1f			call forth_init 
17b8			 
17b8			 
17b8			warmstart: 
17b8 cd 26 1f			call forth_warmstart 
17bb			 
17bb				; run startup word load 
17bb			        ; TODO prevent this running at warmstart after crash  
17bb			 
17bb				if STARTUP_ENABLE 
17bb			 
17bb					if STARTUP_V1 
17bb			 
17bb						if STORAGE_SE 
17bb							call forth_autoload 
17bb						endif 
17bb cd 4c 61					call forth_startup 
17be					endif 
17be			 
17be					if STARTUP_V2 
17be			 
17be						if STORAGE_SE 
17be							call forth_autoload 
17be						else 
17be							call forth_startup 
17be						endif 
17be			 
17be			 
17be					endif 
17be			 
17be				endif 
17be			 
17be			warmstart_afterauto: 
17be			 
17be				; show free memory after boot 
17be 11 5d 18			ld de, freeram 
17c1 3e 00			ld a, display_row_1 
17c3 cd db 0b			call str_at_display 
17c6			 
17c6				; get current heap start after loading any uwords 
17c6			 
17c6				;ld de, (os_last_new_uword) 
17c6				;ex de, hl 
17c6			 
17c6			; Or use heap_size word???? 
17c6				;ld hl, heap_end 
17c6				;ld hl, heap_size 
17c6				;ld de, topusermem 
17c6				;ld de, heap_start 
17c6 ed 5b 29 63			ld de, (free_list )      
17ca 21 96 e2				ld hl, heap_end 
17cd ed 52			sbc hl, de 
17cf				;push hl 
17cf				;ld a,h	         	 
17cf				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
17cf				;call hexout 
17cf			   	;pop hl 
17cf			; 
17cf			;	ld a,l 
17cf			;	ld hl, os_word_scratch+2 
17cf			;	call hexout 
17cf			;	ld hl, os_word_scratch+4 
17cf			;	ld a, 0 
17cf			;	ld (hl),a 
17cf eb				ex de, hl 
17d0 21 c0 e5			ld hl, os_word_scratch 
17d3 cd 0a 11			call uitoa_16 
17d6			 
17d6			 
17d6 11 c0 e5			ld de, os_word_scratch 
17d9 3e 0d			ld a, display_row_1 + 13 
17db cd db 0b			call str_at_display 
17de cd eb 0b			call update_display 
17e1			 
17e1			 
17e1				;call demo 
17e1			 
17e1			 
17e1				; init scratch input area for cli commands 
17e1			 
17e1 21 e2 e5			ld hl, os_cli_cmd 
17e4 3e 00			ld a,0 
17e6 77				ld (hl),a 
17e7 23				inc hl 
17e8 77				ld (hl),a 
17e9			 
17e9 3e 00			ld a,0 
17eb 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
17ee			 
17ee 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
17f1 32 df e5			ld (os_cur_ptr+1),a	 
17f4			 
17f4 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
17f7 32 c1 e5			ld (os_word_scratch+1),a	 
17fa				 
17fa			 
17fa				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
17fa 21 e2 e5			ld hl, os_cli_cmd 
17fd			 
17fd 3e 00			ld a, 0		 ; init cli input 
17ff 77				ld (hl), a 
1800 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1802			cli: 
1802				; show cli prompt 
1802				;push af 
1802				;ld a, 0 
1802				;ld de, prompt 
1802				;call str_at_display 
1802			 
1802				;call update_display 
1802				;pop af 
1802				;inc a 
1802				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1802			 
1802			.lastrecall: 
1802			 
1802 0e 00			ld c, 0 
1804 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1806 1e 28			ld e, 40 
1808			 
1808 21 e2 e5			ld hl, os_cli_cmd 
180b			 
180b				STACKFRAME OFF $fefe $9f9f 
180b				if DEBUG_STACK_IMB 
180b					if OFF 
180b						exx 
180b						ld de, $fefe 
180b						ld a, d 
180b						ld hl, curframe 
180b						call hexout 
180b						ld a, e 
180b						ld hl, curframe+2 
180b						call hexout 
180b						ld hl, $fefe 
180b						push hl 
180b						ld hl, $9f9f 
180b						push hl 
180b						exx 
180b					endif 
180b				endif 
180b			endm 
# End of macro STACKFRAME
180b			 
180b cd 22 0e			call input_str 
180e			 
180e				STACKFRAMECHK OFF $fefe $9f9f 
180e				if DEBUG_STACK_IMB 
180e					if OFF 
180e						exx 
180e						ld hl, $9f9f 
180e						pop de   ; $9f9f 
180e						call cmp16 
180e						jr nz, .spnosame 
180e						ld hl, $fefe 
180e						pop de   ; $fefe 
180e						call cmp16 
180e						jr z, .spfrsame 
180e						.spnosame: call showsperror 
180e						.spfrsame: nop 
180e						exx 
180e					endif 
180e				endif 
180e			endm 
# End of macro STACKFRAMECHK
180e			 
180e			 
180e				; check to see if last line recall has been requested 
180e			 
180e			if EDIT_V2 
180e fe 05			cp KEY_UP 
1810 20 0f			jr nz, .noexecline 
1812			 
1812 11 e2 e5			ld de, os_cli_cmd 
1815 21 e1 e6			ld hl, os_last_cmd 
1818 01 ff 00			ld bc, 255 
181b ed b0			ldir 
181d 3e 00			ld a, 0 
181f 18 e1			jr .lastrecall 
1821			endif 
1821			 
1821			.noexecline: 
1821				; no so exec the line		 
1821			 
1821				; copy input to last command 
1821			 
1821 21 e2 e5			ld hl, os_cli_cmd 
1824 11 e1 e6			ld de, os_last_cmd 
1827 01 ff 00			ld bc, 255 
182a ed b0			ldir 
182c			 
182c				; wipe current buffer 
182c			 
182c			;	ld a, 0 
182c			;	ld hl, os_cli_cmd 
182c			;	ld de, os_cli_cmd+1 
182c			;	ld bc, 254 
182c			;	ldir 
182c				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
182c			;	call strcpy 
182c			;	ld a, 0 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			 
182c				; switch frame buffer to program  
182c			 
182c 21 0a ed				ld hl, display_fb1 
182f 22 c6 eb				ld (display_fb_active), hl 
1832			 
1832			;	nop 
1832				STACKFRAME ON $fbfe $8f9f 
1832				if DEBUG_STACK_IMB 
1832					if ON 
1832						exx 
1832						ld de, $fbfe 
1832						ld a, d 
1832						ld hl, curframe 
1832						call hexout 
1832						ld a, e 
1832						ld hl, curframe+2 
1832						call hexout 
1832						ld hl, $fbfe 
1832						push hl 
1832						ld hl, $8f9f 
1832						push hl 
1832						exx 
1832					endif 
1832				endif 
1832			endm 
# End of macro STACKFRAME
1832				; first time into the parser so pass over the current scratch pad 
1832 21 e2 e5			ld hl,os_cli_cmd 
1835				; tokenise the entered statement(s) in HL 
1835 cd ca 1f			call forthparse 
1838			        ; exec forth statements in top of return stack 
1838 cd 06 20			call forthexec 
183b				;call forthexec_cleanup 
183b			;	call parsenext 
183b			 
183b				STACKFRAMECHK ON $fbfe $8f9f 
183b				if DEBUG_STACK_IMB 
183b					if ON 
183b						exx 
183b						ld hl, $8f9f 
183b						pop de   ; $8f9f 
183b						call cmp16 
183b						jr nz, .spnosame 
183b						ld hl, $fbfe 
183b						pop de   ; $fbfe 
183b						call cmp16 
183b						jr z, .spfrsame 
183b						.spnosame: call showsperror 
183b						.spfrsame: nop 
183b						exx 
183b					endif 
183b				endif 
183b			endm 
# End of macro STACKFRAMECHK
183b				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
183b			 
183b 3e 78			ld a, display_row_4 
183d 11 6e 18			ld de, endprog 
1840			 
1840 cd eb 0b			call update_display		 
1843			 
1843 cd 08 1b			call next_page_prompt 
1846			 
1846				; switch frame buffer to cli 
1846			 
1846 21 ab ed				ld hl, display_fb0 
1849 22 c6 eb				ld (display_fb_active), hl 
184c			 
184c			 
184c cd c8 0b		        call clear_display 
184f cd eb 0b			call update_display		 
1852			 
1852 21 e2 e5			ld hl, os_cli_cmd 
1855			 
1855 3e 00			ld a, 0		 ; init cli input 
1857 77				ld (hl), a 
1858			 
1858				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1858			 
1858				; now on last line 
1858			 
1858				; TODO scroll screen up 
1858			 
1858				; TODO instead just clear screen and place at top of screen 
1858			 
1858			;	ld a, 0 
1858			;	ld (f_cursor_ptr),a 
1858			 
1858				;call clear_display 
1858				;call update_display 
1858			 
1858				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1858 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
185a c3 02 18			jp cli 
185d			 
185d .. 00		freeram: db "Free bytes: ",0 
186a ..			asc: db "1A2F" 
186e .. 00		endprog: db "End prog...",0 
187a			 
187a			testenter2:   
187a 21 ed e2			ld hl,scratch+50 
187d 22 de e5			ld (os_cur_ptr),hl 
1880 c3 02 18			jp cli 
1883			 
1883			testenter:  
1883			 
1883 21 6a 18			ld hl,asc 
1886			;	ld a,(hl) 
1886			;	call nibble2val 
1886 cd 54 10			call get_byte 
1889			 
1889			 
1889			;	ld a,(hl) 
1889			;	call atohex 
1889			 
1889			;	call fourehexhl 
1889 32 ed e2			ld (scratch+50),a 
188c			 
188c			 
188c			 
188c 21 6c 18			ld hl,asc+2 
188f			;	ld a, (hl) 
188f			;	call nibble2val 
188f cd 54 10			call get_byte 
1892			 
1892			;	call fourehexhl 
1892 32 ef e2			ld (scratch+52),a 
1895				 
1895 21 ed e2			ld hl,scratch+50 
1898 22 de e5			ld (os_cur_ptr),hl 
189b c3 02 18			jp cli 
189e			 
189e			enter:	 
189e 3a bf e2			ld a,(scratch+4) 
18a1 fe 00			cp 0 
18a3 28 0c			jr z, .entercont 
18a5				; no, not a null term line so has an address to work out.... 
18a5			 
18a5 21 bd e2			ld hl,scratch+2 
18a8 cd b4 10			call get_word_hl 
18ab			 
18ab 22 de e5			ld (os_cur_ptr),hl	 
18ae c3 02 18			jp cli 
18b1			 
18b1			 
18b1			.entercont:  
18b1			 
18b1 21 bd e2			ld hl, scratch+2 
18b4 cd 54 10			call get_byte 
18b7			 
18b7 2a de e5		   	ld hl,(os_cur_ptr) 
18ba 77					ld (hl),a 
18bb 23					inc hl 
18bc 22 de e5				ld (os_cur_ptr),hl 
18bf				 
18bf			; get byte  
18bf			 
18bf			 
18bf c3 02 18			jp cli 
18c2			 
18c2			 
18c2			; basic monitor support 
18c2			 
18c2			monitor: 
18c2				;  
18c2 cd c8 0b			call clear_display 
18c5 3e 00			ld a, 0 
18c7 11 1b 19			ld de, .monprompt 
18ca cd db 0b			call str_at_display 
18cd cd eb 0b			call update_display 
18d0			 
18d0				; get a monitor command 
18d0			 
18d0 0e 00			ld c, 0     ; entry at top left 
18d2 16 64			ld d, 100   ; max buffer size 
18d4 1e 0f			ld e, 15    ; input scroll area 
18d6 3e 00			ld a, 0     ; init string 
18d8 21 b9 e4			ld hl, os_input 
18db 77				ld (hl), a 
18dc 23				inc hl 
18dd 77				ld (hl), a 
18de 21 b9 e4			ld hl, os_input 
18e1 3e 01			ld a, 1     ; init string 
18e3 cd 22 0e			call input_str 
18e6			 
18e6 cd c8 0b		        call clear_display 
18e9 cd eb 0b			call update_display		 
18ec			 
18ec 3a b9 e4			ld a, (os_input) 
18ef cd 52 11			call toUpper 
18f2 fe 48		        cp 'H' 
18f4 ca 8f 19		        jp z, .monhelp 
18f7 fe 44			cp 'D'		; dump 
18f9 ca c2 19			jp z, .mondump	 
18fc fe 43			cp 'C'		; dump 
18fe ca dc 19			jp z, .moncdump	 
1901 fe 4d			cp 'M'		; dump 
1903 ca 1d 19			jp z, .moneditstart 
1906 fe 55			cp 'U'		; dump 
1908 ca 29 19			jp z, .monedit	 
190b fe 47			cp 'G'		; dump 
190d ca b8 19			jp z, .monjump 
1910 fe 42			cp 'B'		; forth breakpoint 
1912 cc 11 15			call z, break_point_state 
1915 fe 51			cp 'Q'		; dump 
1917 c8				ret z	 
1918			 
1918			 
1918				; TODO "S" to access symbol by name and not need the address 
1918				; TODO "F" to find a string in memory 
1918			 
1918 c3 c2 18			jp monitor 
191b			 
191b .. 00		.monprompt: db ">", 0 
191d			 
191d			.moneditstart: 
191d				; get starting address 
191d			 
191d 21 bb e4			ld hl,os_input+2 
1920 cd b4 10			call get_word_hl 
1923			 
1923 22 de e5			ld (os_cur_ptr),hl	 
1926			 
1926 c3 c2 18			jp monitor 
1929			 
1929			.monedit: 
1929				; get byte to load 
1929			 
1929 21 bb e4			ld hl,os_input+2 
192c cd 54 10			call get_byte 
192f			 
192f				; get address to update 
192f 2a de e5			ld hl, (os_cur_ptr) 
1932			 
1932				; update byte 
1932			 
1932 77				ld (hl), a 
1933			 
1933				; move to next address and save it 
1933			 
1933 23				inc hl 
1934 22 de e5			ld (os_cur_ptr),hl	 
1937			 
1937 c3 c2 18			jp monitor 
193a			 
193a			 
193a .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
194e .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
196a .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1988 .. 00		.monhelptext4:  db "Q-Quit",0 
198f			        
198f			.monhelp: 
198f 3e 00			ld a, display_row_1 
1991 11 3a 19		        ld de, .monhelptext1 
1994			 
1994 cd db 0b			call str_at_display 
1997 3e 28			ld a, display_row_2 
1999 11 4e 19		        ld de, .monhelptext2 
199c					 
199c cd db 0b			call str_at_display 
199f 3e 50			ld a, display_row_3 
19a1 11 6a 19		        ld de, .monhelptext3 
19a4					 
19a4 cd db 0b			call str_at_display 
19a7 3e 78			ld a, display_row_4 
19a9 11 88 19		        ld de, .monhelptext4 
19ac cd db 0b			call str_at_display 
19af			 
19af cd eb 0b			call update_display		 
19b2			 
19b2 cd 08 1b			call next_page_prompt 
19b5 c3 c2 18			jp monitor 
19b8			 
19b8			.monjump:    
19b8 21 bb e4			ld hl,os_input+2 
19bb cd b4 10			call get_word_hl 
19be			 
19be e9				jp (hl) 
19bf c3 c2 18			jp monitor 
19c2			 
19c2			.mondump:    
19c2 21 bb e4			ld hl,os_input+2 
19c5 cd b4 10			call get_word_hl 
19c8			 
19c8 22 de e5			ld (os_cur_ptr),hl	 
19cb cd 10 1a			call dumpcont 
19ce 3e 78			ld a, display_row_4 
19d0 11 6e 18			ld de, endprog 
19d3			 
19d3 cd eb 0b			call update_display		 
19d6			 
19d6 cd 08 1b			call next_page_prompt 
19d9 c3 c2 18			jp monitor 
19dc			.moncdump: 
19dc cd 10 1a			call dumpcont 
19df 3e 78			ld a, display_row_4 
19e1 11 6e 18			ld de, endprog 
19e4			 
19e4 cd eb 0b			call update_display		 
19e7			 
19e7 cd 08 1b			call next_page_prompt 
19ea c3 c2 18			jp monitor 
19ed			 
19ed			 
19ed			; TODO symbol access  
19ed			 
19ed			.symbols:     ;; A list of symbols that can be called up  
19ed ab ed			dw display_fb0 
19ef .. 00			db "fb0",0  
19f3 74 ea		     	dw store_page 
19f5 .. 00			db "store_page",0 
1a00			 
1a00			 
1a00			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a00			 
1a00 3a bc e2			ld a,(scratch+1) 
1a03 fe 00			cp 0 
1a05 28 09			jr z, dumpcont 
1a07			 
1a07				; no, not a null term line so has an address to work out.... 
1a07			 
1a07 21 bd e2			ld hl,scratch+2 
1a0a cd b4 10			call get_word_hl 
1a0d			 
1a0d 22 de e5			ld (os_cur_ptr),hl	 
1a10			 
1a10			 
1a10			 
1a10			dumpcont: 
1a10			 
1a10				; dump bytes at ptr 
1a10			 
1a10			 
1a10 3e 00			ld a, display_row_1 
1a12 2a c6 eb			ld hl, (display_fb_active) 
1a15 cd f5 0d			call addatohl 
1a18 cd 40 1a			call .dumpbyterow 
1a1b			 
1a1b 3e 28			ld a, display_row_2 
1a1d 2a c6 eb			ld hl, (display_fb_active) 
1a20 cd f5 0d			call addatohl 
1a23 cd 40 1a			call .dumpbyterow 
1a26			 
1a26			 
1a26 3e 50			ld a, display_row_3 
1a28 2a c6 eb			ld hl, (display_fb_active) 
1a2b cd f5 0d			call addatohl 
1a2e cd 40 1a			call .dumpbyterow 
1a31			 
1a31 3e 78			ld a, display_row_4 
1a33 2a c6 eb			ld hl, (display_fb_active) 
1a36 cd f5 0d			call addatohl 
1a39 cd 40 1a			call .dumpbyterow 
1a3c			 
1a3c cd eb 0b			call update_display 
1a3f			;		jp cli 
1a3f c9				ret 
1a40			 
1a40			.dumpbyterow: 
1a40			 
1a40				;push af 
1a40			 
1a40 e5				push hl 
1a41			 
1a41				; calc where to poke the ascii 
1a41			if display_cols == 20 
1a41				ld a, 16 
1a41			else 
1a41 3e 1f			ld a, 31 
1a43			endif 
1a43			 
1a43 cd f5 0d			call addatohl 
1a46 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
1a49			 
1a49			 
1a49			; display decoding address 
1a49 2a de e5		   	ld hl,(os_cur_ptr) 
1a4c			 
1a4c 7c				ld a,h 
1a4d e1				pop hl 
1a4e e5				push hl 
1a4f			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1a4f cd fe 0f			call hexout 
1a52 2a de e5		   	ld hl,(os_cur_ptr) 
1a55			 
1a55 7d				ld a,l 
1a56 e1				pop hl 
1a57 23				inc hl 
1a58 23				inc hl 
1a59 e5				push hl 
1a5a			;	ld hl, os_word_scratch+2 
1a5a cd fe 0f			call hexout 
1a5d e1				pop hl 
1a5e 23				inc hl 
1a5f 23				inc hl 
1a60				;ld hl, os_word_scratch+4 
1a60 3e 3a			ld a, ':' 
1a62 77				ld (hl),a 
1a63 23				inc hl 
1a64				;ld a, 0 
1a64				;ld (hl),a 
1a64				;ld de, os_word_scratch 
1a64				;pop af 
1a64				;push af 
1a64			;		ld a, display_row_2 
1a64			;		call str_at_display 
1a64			;		call update_display 
1a64			 
1a64			 
1a64			;pop af 
1a64			;	add 5 
1a64			 
1a64			if display_cols == 20 
1a64				ld b, 4 
1a64			else 
1a64 06 08			ld b, 8 
1a66			endif	 
1a66			 
1a66			.dumpbyte: 
1a66 c5				push bc 
1a67 e5				push hl 
1a68			 
1a68			 
1a68 2a de e5		   	ld hl,(os_cur_ptr) 
1a6b 7e					ld a,(hl) 
1a6c			 
1a6c					; poke the ascii to display 
1a6c 2a c0 e5				ld hl,(os_word_scratch) 
1a6f 77					ld (hl),a 
1a70 23					inc hl 
1a71 22 c0 e5				ld (os_word_scratch),hl 
1a74			 
1a74					 
1a74			 
1a74			 
1a74 e1					pop hl 
1a75 e5					push hl 
1a76			 
1a76 cd fe 0f				call hexout 
1a79			 
1a79					 
1a79 2a de e5		   	ld hl,(os_cur_ptr) 
1a7c 23				inc hl 
1a7d 22 de e5		   	ld (os_cur_ptr),hl 
1a80			 
1a80 e1					pop hl 
1a81 23					inc hl 
1a82 23					inc hl 
1a83 23					inc hl 
1a84			 
1a84			 
1a84			 
1a84					;ld a,0 
1a84					;ld (os_word_scratch+2),a 
1a84					;pop af 
1a84					;push af 
1a84			 
1a84					;ld de, os_word_scratch 
1a84					;call str_at_display 
1a84			;		call update_display 
1a84			;		pop af 
1a84 c1					pop bc 
1a85 c6 03				add 3 
1a87 10 dd			djnz .dumpbyte 
1a89			 
1a89				 
1a89			 
1a89 c9				ret 
1a8a			 
1a8a			jump:	 
1a8a			 
1a8a 21 bd e2			ld hl,scratch+2 
1a8d cd b4 10			call get_word_hl 
1a90				;ld hl,(scratch+2) 
1a90				;call fourehexhl 
1a90			 
1a90 22 de e5			ld (os_cur_ptr),hl	 
1a93			 
1a93 e9				jp (hl) 
1a94			 
1a94			 
1a94			 
1a94			; TODO implement a basic monitor mode to start with 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			; testing and demo code during development 
1a94			 
1a94			 
1a94 .. 00		str1: db "Enter some text...",0 
1aa7 .. 00		clear: db "                    ",0 
1abc			 
1abc			demo: 
1abc			 
1abc			 
1abc			 
1abc			;	call update_display 
1abc			 
1abc				; init scratch input area for testing 
1abc 21 bb e2			ld hl, scratch	 
1abf 3e 00			ld a,0 
1ac1 77				ld (hl),a 
1ac2			 
1ac2			 
1ac2 3e 28		            LD   A, display_row_2 
1ac4			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ac4 11 94 1a		            LD   DE, str1 
1ac7 cd db 0b			call str_at_display 
1aca			 
1aca			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aca			cloop:	 
1aca 3e 50		            LD   A, display_row_3 
1acc			;            CALL fLCD_Pos       ;Position cursor to location in A 
1acc 11 a7 1a		            LD   DE, clear 
1acf			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1acf cd db 0b				call str_at_display 
1ad2 3e 78			ld a, display_row_4 
1ad4 11 04 1b			ld de, prompt 
1ad7			 
1ad7 cd db 0b				call str_at_display 
1ada cd eb 0b			call update_display 
1add			 
1add 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1adf 16 0a			ld d, 10 
1ae1 21 bb e2			ld hl, scratch	 
1ae4 cd 22 0e			call input_str 
1ae7			 
1ae7			;	call clear_display 
1ae7			;'	call update_display 
1ae7			 
1ae7 3e 00		            LD   A, display_row_1 
1ae9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ae9 11 a7 1a		            LD   DE, clear 
1aec cd db 0b				call str_at_display 
1aef			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aef 3e 00		            LD   A, display_row_1 
1af1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1af1 11 bb e2		            LD   DE, scratch 
1af4			;            CALL fLCD_Str       ;Display string pointed to by DE 
1af4 cd db 0b				call str_at_display 
1af7 cd eb 0b			call update_display 
1afa			 
1afa 3e 00				ld a,0 
1afc 21 bb e2			ld hl, scratch 
1aff 77				ld (hl),a 
1b00			 
1b00 00				nop 
1b01 c3 ca 1a			jp cloop 
1b04			 
1b04			 
1b04			 
1b04			; OS Prompt 
1b04			 
1b04 .. 00		prompt: db ">",0 
1b06 .. 00		endprg: db "?",0 
1b08			 
1b08			 
1b08			; handy next page prompt 
1b08			next_page_prompt: 
1b08 e5				push hl 
1b09 d5				push de 
1b0a f5				push af 
1b0b c5				push bc 
1b0c			 
1b0c 3e 9f			ld a,display_row_4 + display_cols - 1 
1b0e 11 06 1b		        ld de, endprg 
1b11 cd db 0b			call str_at_display 
1b14 cd eb 0b			call update_display 
1b17 cd fe 62			call cin_wait 
1b1a c1				pop bc 
1b1b f1				pop af 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e			 
1b1e			 
1b1e c9				ret 
1b1f			 
1b1f			 
1b1f			; forth parser 
1b1f			 
1b1f			; My forth kernel 
1b1f			include "forth_kernel.asm" 
1b1f			; 
1b1f			; kernel to the forth OS 
1b1f			 
1b1f			DS_TYPE_STR: equ 1     ; string type 
1b1f			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1b1f			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1b1f			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1b1f			 
1b1f			FORTH_PARSEV1: equ 0 
1b1f			FORTH_PARSEV2: equ 0 
1b1f			FORTH_PARSEV3: equ 0 
1b1f			FORTH_PARSEV4: equ 0 
1b1f			FORTH_PARSEV5: equ 0 
1b1f			FORTH_PARSEV6: equ 1 
1b1f			 
1b1f			;if FORTH_PARSEV5 
1b1f			;	FORTH_END_BUFFER: equ 0 
1b1f			;else 
1b1f			FORTH_END_BUFFER: equ 127 
1b1f			;endif 
1b1f			 
1b1f			FORTH_TRUE: equ 1 
1b1f			FORTH_FALSE: equ 0 
1b1f			 
1b1f			if FORTH_PARSEV4 
1b1f			include "forth_stackops.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV5 
1b1f			include "forth_stackopsv5.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV6 
1b1f			include "forth_stackopsv5.asm" 
1b1f			 
1b1f			; Stack operations for v5 parser on wards 
1b1f			; * DATA stack 
1b1f			; * LOOP stack 
1b1f			; * RETURN stack 
1b1f			 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_DSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_data_sp) 
1b1f				ld de, cli_data_stack 
1b1f				call cmp16 
1b1f				jp c, fault_dsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_RSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_ret_sp) 
1b1f				ld de, cli_ret_stack 
1b1f				call cmp16 
1b1f				jp c, fault_rsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_CHK_LOOP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_loop_sp) 
1b1f				ld de, cli_loop_stack 
1b1f				call cmp16 
1b1f				jp c, fault_loop_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTSTR: macro 
1b1f				; TOSO might need more for checks when used 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_STR 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTNUM: macro 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_INUM 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			; increase data stack pointer and save hl to it 
1b1f				 
1b1f			FORTH_DSP_NEXT: macro 
1b1f				call macro_forth_dsp_next 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			macro_forth_dsp_next: 
1b1f				if DEBUG_FORTH_STACK_GUARD 
1b1f cd 24 5f				call check_stacks 
1b22				endif 
1b22 e5				push hl 
1b23 d5				push de 
1b24 eb				ex de,hl 
1b25 2a e8 e9			ld hl,(cli_data_sp) 
1b28 23				inc hl 
1b29 23				inc hl 
1b2a			 
1b2a			; PARSEV5 
1b2a 23				inc hl 
1b2b 22 e8 e9			ld (cli_data_sp),hl 
1b2e 73				ld (hl), e 
1b2f 23				inc hl 
1b30 72				ld (hl), d 
1b31 d1				pop de 
1b32 e1				pop hl 
1b33				if DEBUG_FORTH_STACK_GUARD 
1b33 cd 24 5f				call check_stacks 
1b36				endif 
1b36 c9				ret 
1b37			 
1b37			 
1b37			; increase ret stack pointer and save hl to it 
1b37				 
1b37			FORTH_RSP_NEXT: macro 
1b37				call macro_forth_rsp_next 
1b37				endm 
1b37			 
1b37			macro_forth_rsp_next: 
1b37				if DEBUG_FORTH_STACK_GUARD 
1b37 cd 24 5f				call check_stacks 
1b3a				endif 
1b3a e5				push hl 
1b3b d5				push de 
1b3c eb				ex de,hl 
1b3d 2a ec e9			ld hl,(cli_ret_sp) 
1b40 23				inc hl 
1b41 23				inc hl 
1b42 22 ec e9			ld (cli_ret_sp),hl 
1b45 73				ld (hl), e 
1b46 23				inc hl 
1b47 72				ld (hl), d 
1b48 d1				pop de 
1b49 e1				pop hl 
1b4a				if DEBUG_FORTH_STACK_GUARD 
1b4a cd 24 5f				call check_stacks 
1b4d				endif 
1b4d c9				ret 
1b4e			 
1b4e			; get current ret stack pointer and save to hl  
1b4e				 
1b4e			FORTH_RSP_TOS: macro 
1b4e				call macro_forth_rsp_tos 
1b4e				endm 
1b4e			 
1b4e			macro_forth_rsp_tos: 
1b4e				;push de 
1b4e 2a ec e9			ld hl,(cli_ret_sp) 
1b51 cd 89 1b			call loadhlptrtohl 
1b54				;ld e, (hl) 
1b54				;inc hl 
1b54				;ld d, (hl) 
1b54				;ex de, hl 
1b54					if DEBUG_FORTH_WORDS 
1b54			;			DMARK "RST" 
1b54						CALLMONITOR 
1b54 cd 6f ee			call debug_vector  
1b57				endm  
# End of macro CALLMONITOR
1b57					endif 
1b57				;pop de 
1b57 c9				ret 
1b58			 
1b58			; pop ret stack pointer 
1b58				 
1b58			FORTH_RSP_POP: macro 
1b58				call macro_forth_rsp_pop 
1b58				endm 
1b58			 
1b58			 
1b58			macro_forth_rsp_pop: 
1b58				if DEBUG_FORTH_STACK_GUARD 
1b58			;		DMARK "RPP" 
1b58 cd 24 5f				call check_stacks 
1b5b					FORTH_CHK_RSP_UNDER 
1b5b e5				push hl 
1b5c d5				push de 
1b5d 2a ec e9			ld hl,(cli_ret_sp) 
1b60 11 a6 e9			ld de, cli_ret_stack 
1b63 cd 13 0e			call cmp16 
1b66 da 3b 60			jp c, fault_rsp_under 
1b69 d1				pop de 
1b6a e1				pop hl 
1b6b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b6b				endif 
1b6b e5				push hl 
1b6c 2a ec e9			ld hl,(cli_ret_sp) 
1b6f			 
1b6f			 
1b6f				if FORTH_ENABLE_FREE 
1b6f			 
1b6f					; get pointer 
1b6f			 
1b6f					push de 
1b6f					push hl 
1b6f			 
1b6f					ld e, (hl) 
1b6f					inc hl 
1b6f					ld d, (hl) 
1b6f			 
1b6f					ex de, hl 
1b6f					call free 
1b6f			 
1b6f					pop hl 
1b6f					pop de 
1b6f			 
1b6f			 
1b6f				endif 
1b6f			 
1b6f			 
1b6f 2b				dec hl 
1b70 2b				dec hl 
1b71 22 ec e9			ld (cli_ret_sp), hl 
1b74				; do stack underflow checks 
1b74 e1				pop hl 
1b75				if DEBUG_FORTH_STACK_GUARD 
1b75 cd 24 5f				call check_stacks 
1b78					FORTH_CHK_RSP_UNDER 
1b78 e5				push hl 
1b79 d5				push de 
1b7a 2a ec e9			ld hl,(cli_ret_sp) 
1b7d 11 a6 e9			ld de, cli_ret_stack 
1b80 cd 13 0e			call cmp16 
1b83 da 3b 60			jp c, fault_rsp_under 
1b86 d1				pop de 
1b87 e1				pop hl 
1b88				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b88				endif 
1b88 c9				ret 
1b89			 
1b89			 
1b89			 
1b89			; routine to load word pointed to by hl into hl 
1b89			 
1b89			loadhlptrtohl: 
1b89			 
1b89 d5				push de 
1b8a 5e				ld e, (hl) 
1b8b 23				inc hl 
1b8c 56				ld d, (hl) 
1b8d eb				ex de, hl 
1b8e d1				pop de 
1b8f			 
1b8f c9				ret 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			; push a number held in HL onto the data stack 
1b90			; entry point for pushing a value when already in hl used in function above 
1b90			 
1b90			forth_push_numhl: 
1b90			 
1b90 e5				push hl    ; save value to push 
1b91			 
1b91			if DEBUG_FORTH_PUSH 
1b91				; see if disabled 
1b91			 
1b91			 
1b91 f5				push af 
1b92 3a 6f ee			ld a,(debug_vector) 
1b95 fe c9			cp $c9   ; ret 
1b97			;	ld a, (os_view_disable) 
1b97			;	cp '*' 
1b97 28 34			jr z, .pskip2 
1b99 e5				push hl 
1b9a e5			push hl 
1b9b cd c8 0b			call clear_display 
1b9e e1			pop hl 
1b9f 7c				ld a,h 
1ba0 21 c0 e5			ld hl, os_word_scratch 
1ba3 cd fe 0f			call hexout 
1ba6 e1				pop hl 
1ba7 7d				ld a,l 
1ba8 21 c2 e5			ld hl, os_word_scratch+2 
1bab cd fe 0f			call hexout 
1bae			 
1bae 21 c4 e5			ld hl, os_word_scratch+4 
1bb1 3e 00			ld a,0 
1bb3 77				ld (hl),a 
1bb4 11 c0 e5			ld de,os_word_scratch 
1bb7 3e 28				ld a, display_row_2 
1bb9 cd db 0b				call str_at_display 
1bbc 11 1d 51			ld de, .push_num 
1bbf 3e 00			ld a, display_row_1 
1bc1			 
1bc1 cd db 0b				call str_at_display 
1bc4			 
1bc4			 
1bc4 cd eb 0b			call update_display 
1bc7 cd 00 0b			call delay1s 
1bca cd 00 0b			call delay1s 
1bcd			.pskip2:  
1bcd			 
1bcd f1				pop af 
1bce			endif	 
1bce			 
1bce			 
1bce				FORTH_DSP_NEXT 
1bce cd 1f 1b			call macro_forth_dsp_next 
1bd1				endm 
# End of macro FORTH_DSP_NEXT
1bd1			 
1bd1 2a e8 e9			ld hl, (cli_data_sp) 
1bd4			 
1bd4				; save item type 
1bd4 3e 02			ld a,  DS_TYPE_INUM 
1bd6 77				ld (hl), a 
1bd7 23				inc hl 
1bd8			 
1bd8				; get word off stack 
1bd8 d1				pop de 
1bd9 7b				ld a,e 
1bda 77				ld (hl), a 
1bdb 23				inc hl 
1bdc 7a				ld a,d 
1bdd 77				ld (hl), a 
1bde			 
1bde			if DEBUG_FORTH_PUSH 
1bde 2b				dec hl 
1bdf 2b				dec hl 
1be0 2b				dec hl 
1be1						DMARK "PH5" 
1be1 f5				push af  
1be2 3a f6 1b			ld a, (.dmark)  
1be5 32 65 ee			ld (debug_mark),a  
1be8 3a f7 1b			ld a, (.dmark+1)  
1beb 32 66 ee			ld (debug_mark+1),a  
1bee 3a f8 1b			ld a, (.dmark+2)  
1bf1 32 67 ee			ld (debug_mark+2),a  
1bf4 18 03			jr .pastdmark  
1bf6 ..			.dmark: db "PH5"  
1bf9 f1			.pastdmark: pop af  
1bfa			endm  
# End of macro DMARK
1bfa				CALLMONITOR 
1bfa cd 6f ee			call debug_vector  
1bfd				endm  
# End of macro CALLMONITOR
1bfd			endif	 
1bfd			 
1bfd c9				ret 
1bfe			 
1bfe			 
1bfe			; Push a string to stack pointed to by hl 
1bfe			 
1bfe			forth_push_str: 
1bfe			 
1bfe			if DEBUG_FORTH_PUSH 
1bfe						DMARK "PSQ" 
1bfe f5				push af  
1bff 3a 13 1c			ld a, (.dmark)  
1c02 32 65 ee			ld (debug_mark),a  
1c05 3a 14 1c			ld a, (.dmark+1)  
1c08 32 66 ee			ld (debug_mark+1),a  
1c0b 3a 15 1c			ld a, (.dmark+2)  
1c0e 32 67 ee			ld (debug_mark+2),a  
1c11 18 03			jr .pastdmark  
1c13 ..			.dmark: db "PSQ"  
1c16 f1			.pastdmark: pop af  
1c17			endm  
# End of macro DMARK
1c17				CALLMONITOR 
1c17 cd 6f ee			call debug_vector  
1c1a				endm  
# End of macro CALLMONITOR
1c1a			endif	 
1c1a			 
1c1a			 
1c1a			    
1c1a e5				push hl 
1c1b e5				push hl 
1c1c			 
1c1c			;	ld a, 0   ; find end of string 
1c1c cd 5b 11			call strlenz 
1c1f			if DEBUG_FORTH_PUSH 
1c1f						DMARK "PQ2" 
1c1f f5				push af  
1c20 3a 34 1c			ld a, (.dmark)  
1c23 32 65 ee			ld (debug_mark),a  
1c26 3a 35 1c			ld a, (.dmark+1)  
1c29 32 66 ee			ld (debug_mark+1),a  
1c2c 3a 36 1c			ld a, (.dmark+2)  
1c2f 32 67 ee			ld (debug_mark+2),a  
1c32 18 03			jr .pastdmark  
1c34 ..			.dmark: db "PQ2"  
1c37 f1			.pastdmark: pop af  
1c38			endm  
# End of macro DMARK
1c38				CALLMONITOR 
1c38 cd 6f ee			call debug_vector  
1c3b				endm  
# End of macro CALLMONITOR
1c3b			endif	 
1c3b eb				ex de, hl 
1c3c e1				pop hl   ; get ptr to start of string 
1c3d			if DEBUG_FORTH_PUSH 
1c3d						DMARK "PQ3" 
1c3d f5				push af  
1c3e 3a 52 1c			ld a, (.dmark)  
1c41 32 65 ee			ld (debug_mark),a  
1c44 3a 53 1c			ld a, (.dmark+1)  
1c47 32 66 ee			ld (debug_mark+1),a  
1c4a 3a 54 1c			ld a, (.dmark+2)  
1c4d 32 67 ee			ld (debug_mark+2),a  
1c50 18 03			jr .pastdmark  
1c52 ..			.dmark: db "PQ3"  
1c55 f1			.pastdmark: pop af  
1c56			endm  
# End of macro DMARK
1c56				CALLMONITOR 
1c56 cd 6f ee			call debug_vector  
1c59				endm  
# End of macro CALLMONITOR
1c59			endif	 
1c59 19				add hl,de 
1c5a			if DEBUG_FORTH_PUSH 
1c5a						DMARK "PQE" 
1c5a f5				push af  
1c5b 3a 6f 1c			ld a, (.dmark)  
1c5e 32 65 ee			ld (debug_mark),a  
1c61 3a 70 1c			ld a, (.dmark+1)  
1c64 32 66 ee			ld (debug_mark+1),a  
1c67 3a 71 1c			ld a, (.dmark+2)  
1c6a 32 67 ee			ld (debug_mark+2),a  
1c6d 18 03			jr .pastdmark  
1c6f ..			.dmark: db "PQE"  
1c72 f1			.pastdmark: pop af  
1c73			endm  
# End of macro DMARK
1c73				CALLMONITOR 
1c73 cd 6f ee			call debug_vector  
1c76				endm  
# End of macro CALLMONITOR
1c76			endif	 
1c76			 
1c76 2b				dec hl    ; see if there is an optional trailing double quote 
1c77 7e				ld a,(hl) 
1c78 fe 22			cp '"' 
1c7a 20 03			jr nz, .strnoq 
1c7c 3e 00			ld a, 0      ; get rid of double quote 
1c7e 77				ld (hl), a 
1c7f 23			.strnoq: inc hl 
1c80			 
1c80 3e 00			ld a, 0 
1c82 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1c83			 
1c83 13				inc de ; add one for the type string 
1c84 13				inc de ; add one for null term??? 
1c85			 
1c85				; tos is get string pointer again 
1c85				; de contains space to allocate 
1c85				 
1c85 d5				push de 
1c86			 
1c86 eb				ex de, hl 
1c87			 
1c87				;push af 
1c87			 
1c87			if DEBUG_FORTH_PUSH 
1c87						DMARK "PHm" 
1c87 f5				push af  
1c88 3a 9c 1c			ld a, (.dmark)  
1c8b 32 65 ee			ld (debug_mark),a  
1c8e 3a 9d 1c			ld a, (.dmark+1)  
1c91 32 66 ee			ld (debug_mark+1),a  
1c94 3a 9e 1c			ld a, (.dmark+2)  
1c97 32 67 ee			ld (debug_mark+2),a  
1c9a 18 03			jr .pastdmark  
1c9c ..			.dmark: db "PHm"  
1c9f f1			.pastdmark: pop af  
1ca0			endm  
# End of macro DMARK
1ca0				CALLMONITOR 
1ca0 cd 6f ee			call debug_vector  
1ca3				endm  
# End of macro CALLMONITOR
1ca3			endif	 
1ca3 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1ca6				if DEBUG_FORTH_MALLOC_GUARD 
1ca6 cc 75 51				call z,malloc_error 
1ca9				endif 
1ca9			 
1ca9				 
1ca9 c1				pop bc    ; get length 
1caa d1				pop de   ;  get string start    
1cab			 
1cab				; hl has destination from malloc 
1cab			 
1cab eb				ex de, hl    ; prep for ldir 
1cac			 
1cac d5				push de   ; save malloc area for DSP later 
1cad				;push hl   ; save malloc area for DSP later 
1cad			 
1cad			if DEBUG_FORTH_PUSH 
1cad						DMARK "PHc" 
1cad f5				push af  
1cae 3a c2 1c			ld a, (.dmark)  
1cb1 32 65 ee			ld (debug_mark),a  
1cb4 3a c3 1c			ld a, (.dmark+1)  
1cb7 32 66 ee			ld (debug_mark+1),a  
1cba 3a c4 1c			ld a, (.dmark+2)  
1cbd 32 67 ee			ld (debug_mark+2),a  
1cc0 18 03			jr .pastdmark  
1cc2 ..			.dmark: db "PHc"  
1cc5 f1			.pastdmark: pop af  
1cc6			endm  
# End of macro DMARK
1cc6				CALLMONITOR 
1cc6 cd 6f ee			call debug_vector  
1cc9				endm  
# End of macro CALLMONITOR
1cc9			endif	 
1cc9			 
1cc9			 
1cc9 ed b0			ldir 
1ccb			 
1ccb			 
1ccb				; push malloc to data stack     macro?????  
1ccb			 
1ccb				FORTH_DSP_NEXT 
1ccb cd 1f 1b			call macro_forth_dsp_next 
1cce				endm 
# End of macro FORTH_DSP_NEXT
1cce			 
1cce				; save value and type 
1cce			 
1cce 2a e8 e9			ld hl, (cli_data_sp) 
1cd1			 
1cd1				; save item type 
1cd1 3e 01			ld a,  DS_TYPE_STR 
1cd3 77				ld (hl), a 
1cd4 23				inc hl 
1cd5			 
1cd5				; get malloc word off stack 
1cd5 d1				pop de 
1cd6 73				ld (hl), e 
1cd7 23				inc hl 
1cd8 72				ld (hl), d 
1cd9			 
1cd9			 
1cd9			 
1cd9			if DEBUG_FORTH_PUSH 
1cd9 2a e8 e9			ld hl, (cli_data_sp) 
1cdc						DMARK "PHS" 
1cdc f5				push af  
1cdd 3a f1 1c			ld a, (.dmark)  
1ce0 32 65 ee			ld (debug_mark),a  
1ce3 3a f2 1c			ld a, (.dmark+1)  
1ce6 32 66 ee			ld (debug_mark+1),a  
1ce9 3a f3 1c			ld a, (.dmark+2)  
1cec 32 67 ee			ld (debug_mark+2),a  
1cef 18 03			jr .pastdmark  
1cf1 ..			.dmark: db "PHS"  
1cf4 f1			.pastdmark: pop af  
1cf5			endm  
# End of macro DMARK
1cf5				CALLMONITOR 
1cf5 cd 6f ee			call debug_vector  
1cf8				endm  
# End of macro CALLMONITOR
1cf8			;	ex de,hl 
1cf8			endif	 
1cf8				; in case of spaces, skip the ptr past the copied string 
1cf8				;pop af 
1cf8				;ld (cli_origptr),hl 
1cf8			 
1cf8 c9				ret 
1cf9			 
1cf9			 
1cf9			 
1cf9			; TODO ascii push input onto stack given hl to start of input 
1cf9			 
1cf9			; identify type 
1cf9			; if starts with a " then a string 
1cf9			; otherwise it is a number 
1cf9			;  
1cf9			; if a string 
1cf9			;     scan for ending " to get length of string to malloc for + 1 
1cf9			;     malloc 
1cf9			;     put pointer to string on stack first byte flags as string 
1cf9			; 
1cf9			; else a number 
1cf9			;    look for number format identifier 
1cf9			;    $xx hex 
1cf9			;    %xxxxx bin 
1cf9			;    xxxxx decimal 
1cf9			;    convert number to 16bit word.  
1cf9			;    malloc word + 1 with flag to identiy as num 
1cf9			;    put pointer to number on stack 
1cf9			;   
1cf9			;  
1cf9			  
1cf9			forth_apush: 
1cf9				; kernel push 
1cf9			 
1cf9			if DEBUG_FORTH_PUSH 
1cf9						DMARK "PSH" 
1cf9 f5				push af  
1cfa 3a 0e 1d			ld a, (.dmark)  
1cfd 32 65 ee			ld (debug_mark),a  
1d00 3a 0f 1d			ld a, (.dmark+1)  
1d03 32 66 ee			ld (debug_mark+1),a  
1d06 3a 10 1d			ld a, (.dmark+2)  
1d09 32 67 ee			ld (debug_mark+2),a  
1d0c 18 03			jr .pastdmark  
1d0e ..			.dmark: db "PSH"  
1d11 f1			.pastdmark: pop af  
1d12			endm  
# End of macro DMARK
1d12				CALLMONITOR 
1d12 cd 6f ee			call debug_vector  
1d15				endm  
# End of macro CALLMONITOR
1d15			endif	 
1d15				; identify input type 
1d15			 
1d15 7e				ld a,(hl) 
1d16			 
1d16 fe 23			cp '#' 
1d18 ca 52 1d			jp z, .fapdec 
1d1b			 
1d1b			 
1d1b fe 22			cp '"' 
1d1d 28 0a			jr z, .fapstr 
1d1f fe 24			cp '$' 
1d21 ca 49 1d			jp z, .faphex 
1d24 fe 25			cp '%' 
1d26 ca 31 1d			jp z, .fapbin 
1d29			;	cp 'b' 
1d29			;	jp z, .fabin 
1d29				; else decimal 
1d29			 
1d29				; TODO do decimal conversion 
1d29				; decimal is stored as a 16bit word 
1d29			 
1d29				; by default everything is a string if type is not detected 
1d29			.fapstr: ; 
1d29 fe 22			cp '"' 
1d2b 20 01			jr nz, .strnoqu 
1d2d 23				inc hl 
1d2e			.strnoqu: 
1d2e c3 fe 1b			jp forth_push_str 
1d31			 
1d31			 
1d31			 
1d31			.fapbin:    ; push a binary string.  
1d31 11 00 00			ld de, 0   ; hold a 16bit value 
1d34			 
1d34 23			.fapbinshift:	inc hl  
1d35 7e				ld a,(hl) 
1d36 fe 00			cp 0     ; done scanning  
1d38 28 0b			jr z, .fapbdone  	; got it in HL so push  
1d3a			 
1d3a				; left shift de 
1d3a eb				ex de, hl	 
1d3b 29				add hl, hl 
1d3c			 
1d3c				; is 1 
1d3c fe 31			cp '1' 
1d3e 20 02			jr nz, .binzero 
1d40 cb 4d			bit 1, l 
1d42			.binzero: 
1d42 eb				ex de, hl	 ; save current de 
1d43 18 ef			jr .fapbinshift 
1d45			 
1d45			.fapbdone: 
1d45 eb				ex de, hl 
1d46 c3 90 1b			jp forth_push_numhl 
1d49			 
1d49			 
1d49			.faphex:   ; hex is always stored as a 16bit word 
1d49				; skip number prefix 
1d49 23				inc hl 
1d4a				; turn ascii into number 
1d4a cd b4 10			call get_word_hl	; ret 16bit word in hl 
1d4d			 
1d4d c3 90 1b			jp forth_push_numhl 
1d50			 
1d50 00				 nop 
1d51			 
1d51			.fabin:   ; TODO bin conversion 
1d51			 
1d51			 
1d51 c9				ret 
1d52			.fapdec:	 
1d52				; string to dec conversion 
1d52 23				inc hl 
1d53 eb				ex de, hl 
1d54 cd f2 10			call string_to_uint16 
1d57 c3 90 1b			jp forth_push_numhl 
1d5a c9				ret 
1d5b				 
1d5b			;atoui_16: 
1d5b			 
1d5b			; get either a string ptr or a 16bit word from the data stack 
1d5b			 
1d5b			FORTH_DSP: macro 
1d5b				call macro_forth_dsp 
1d5b				endm 
1d5b			 
1d5b			macro_forth_dsp: 
1d5b				; data stack pointer points to current word on tos 
1d5b			 
1d5b 2a e8 e9			ld hl,(cli_data_sp) 
1d5e			 
1d5e				if DEBUG_FORTH_PUSH 
1d5e						DMARK "DSP" 
1d5e f5				push af  
1d5f 3a 73 1d			ld a, (.dmark)  
1d62 32 65 ee			ld (debug_mark),a  
1d65 3a 74 1d			ld a, (.dmark+1)  
1d68 32 66 ee			ld (debug_mark+1),a  
1d6b 3a 75 1d			ld a, (.dmark+2)  
1d6e 32 67 ee			ld (debug_mark+2),a  
1d71 18 03			jr .pastdmark  
1d73 ..			.dmark: db "DSP"  
1d76 f1			.pastdmark: pop af  
1d77			endm  
# End of macro DMARK
1d77			 
1d77 cd a8 51				call display_data_sp 
1d7a				;call break_point_state 
1d7a				;rst 030h 
1d7a				CALLMONITOR 
1d7a cd 6f ee			call debug_vector  
1d7d				endm  
# End of macro CALLMONITOR
1d7d				endif 
1d7d			 
1d7d c9				ret 
1d7e			 
1d7e			; return hl to start of value on stack 
1d7e			 
1d7e			FORTH_DSP_VALUE: macro 
1d7e				call macro_forth_dsp_value 
1d7e				endm 
1d7e			 
1d7e			macro_forth_dsp_value: 
1d7e			 
1d7e				FORTH_DSP 
1d7e cd 5b 1d			call macro_forth_dsp 
1d81				endm 
# End of macro FORTH_DSP
1d81			 
1d81 d5				push de 
1d82			 
1d82 23				inc hl ; skip type 
1d83			 
1d83 5e				ld e, (hl) 
1d84 23				inc hl 
1d85 56				ld d, (hl) 
1d86 eb				ex de,hl  
1d87			 
1d87 d1				pop de 
1d88			 
1d88 c9				ret 
1d89			 
1d89			; return hl to start of value to second item on stack 
1d89			 
1d89			FORTH_DSP_VALUEM1: macro 
1d89				call macro_forth_dsp_value_m1 
1d89				endm 
1d89			 
1d89			macro_forth_dsp_value_m1: 
1d89			 
1d89				FORTH_DSP 
1d89 cd 5b 1d			call macro_forth_dsp 
1d8c				endm 
# End of macro FORTH_DSP
1d8c			 
1d8c 2b				dec hl 
1d8d 2b				dec hl 
1d8e			;	dec hl 
1d8e			 
1d8e d5				push de 
1d8f			 
1d8f 5e				ld e, (hl) 
1d90 23				inc hl 
1d91 56				ld d, (hl) 
1d92 eb				ex de,hl  
1d93			 
1d93 d1				pop de 
1d94			 
1d94 c9				ret 
1d95			 
1d95				 
1d95			 
1d95			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1d95			 
1d95			FORTH_DSP_POP: macro 
1d95				call macro_forth_dsp_pop 
1d95				endm 
1d95			 
1d95			 
1d95			; get the tos data type 
1d95			 
1d95			FORTH_DSP_TYPE:   macro 
1d95			 
1d95				;FORTH_DSP_VALUE 
1d95				FORTH_DSP 
1d95				 
1d95				; hl points to value 
1d95				; check type 
1d95			 
1d95				ld a,(hl) 
1d95			 
1d95				endm 
1d95			 
1d95			; load the tos value into hl 
1d95			 
1d95			 
1d95			FORTH_DSP_VALUEHL:  macro 
1d95				call macro_dsp_valuehl 
1d95				endm 
1d95			 
1d95			 
1d95			 
1d95			macro_dsp_valuehl: 
1d95				FORTH_DSP_VALUE 
1d95 cd 7e 1d			call macro_forth_dsp_value 
1d98				endm 
# End of macro FORTH_DSP_VALUE
1d98			 
1d98				;FORTH_ERR_TOS_NOTNUM 
1d98			 
1d98				;inc hl   ; skip type id 
1d98			 
1d98			;	push de 
1d98			; 
1d98			;	ld e, (hl) 
1d98			;	inc hl 
1d98			;	ld d, (hl) 
1d98			;	ex de,hl  
1d98			 
1d98			;	pop de 
1d98			 
1d98				if DEBUG_FORTH_PUSH 
1d98						DMARK "DVL" 
1d98 f5				push af  
1d99 3a ad 1d			ld a, (.dmark)  
1d9c 32 65 ee			ld (debug_mark),a  
1d9f 3a ae 1d			ld a, (.dmark+1)  
1da2 32 66 ee			ld (debug_mark+1),a  
1da5 3a af 1d			ld a, (.dmark+2)  
1da8 32 67 ee			ld (debug_mark+2),a  
1dab 18 03			jr .pastdmark  
1dad ..			.dmark: db "DVL"  
1db0 f1			.pastdmark: pop af  
1db1			endm  
# End of macro DMARK
1db1				CALLMONITOR 
1db1 cd 6f ee			call debug_vector  
1db4				endm  
# End of macro CALLMONITOR
1db4				endif 
1db4 c9				ret 
1db5			 
1db5			forth_apushstrhl:      
1db5				; push of string requires use of cli_origptr 
1db5				; bodge use 
1db5			 
1db5				; get current cli_origptr, save, update with temp pointer  
1db5 ed 5b 38 ea		ld de, (cli_origptr) 
1db9 22 38 ea			ld (cli_origptr), hl 
1dbc d5				push de 
1dbd cd f9 1c			call forth_apush 
1dc0 d1				pop de 
1dc1 ed 53 38 ea		ld (cli_origptr), de 
1dc5 c9			        ret	 
1dc6			 
1dc6			 
1dc6			; increase loop stack pointer and save hl to it 
1dc6				 
1dc6			FORTH_LOOP_NEXT: macro 
1dc6				call macro_forth_loop_next 
1dc6				;nop 
1dc6				endm 
1dc6			 
1dc6			macro_forth_loop_next: 
1dc6				if DEBUG_FORTH_STACK_GUARD 
1dc6 cd 24 5f				call check_stacks 
1dc9				endif 
1dc9 e5				push hl 
1dca d5				push de 
1dcb eb				ex de,hl 
1dcc 2a ea e9			ld hl,(cli_loop_sp) 
1dcf 23				inc hl 
1dd0 23				inc hl 
1dd1					if DEBUG_FORTH_WORDS 
1dd1						DMARK "LNX" 
1dd1 f5				push af  
1dd2 3a e6 1d			ld a, (.dmark)  
1dd5 32 65 ee			ld (debug_mark),a  
1dd8 3a e7 1d			ld a, (.dmark+1)  
1ddb 32 66 ee			ld (debug_mark+1),a  
1dde 3a e8 1d			ld a, (.dmark+2)  
1de1 32 67 ee			ld (debug_mark+2),a  
1de4 18 03			jr .pastdmark  
1de6 ..			.dmark: db "LNX"  
1de9 f1			.pastdmark: pop af  
1dea			endm  
# End of macro DMARK
1dea						CALLMONITOR 
1dea cd 6f ee			call debug_vector  
1ded				endm  
# End of macro CALLMONITOR
1ded					endif 
1ded 22 ea e9			ld (cli_loop_sp),hl 
1df0 73				ld (hl), e 
1df1 23				inc hl 
1df2 72				ld (hl), d 
1df3 d1				pop de    ; been reversed so save a swap on restore 
1df4 e1				pop hl 
1df5				if DEBUG_FORTH_STACK_GUARD 
1df5 cd 24 5f				call check_stacks 
1df8				endif 
1df8 c9				ret 
1df9			 
1df9			; get current ret stack pointer and save to hl  
1df9				 
1df9			FORTH_LOOP_TOS: macro 
1df9				call macro_forth_loop_tos 
1df9				endm 
1df9			 
1df9			macro_forth_loop_tos: 
1df9 d5				push de 
1dfa 2a ea e9			ld hl,(cli_loop_sp) 
1dfd 5e				ld e, (hl) 
1dfe 23				inc hl 
1dff 56				ld d, (hl) 
1e00 eb				ex de, hl 
1e01 d1				pop de 
1e02 c9				ret 
1e03			 
1e03			; pop loop stack pointer 
1e03				 
1e03			FORTH_LOOP_POP: macro 
1e03				call macro_forth_loop_pop 
1e03				endm 
1e03			 
1e03			 
1e03			macro_forth_loop_pop: 
1e03				if DEBUG_FORTH_STACK_GUARD 
1e03					DMARK "LPP" 
1e03 f5				push af  
1e04 3a 18 1e			ld a, (.dmark)  
1e07 32 65 ee			ld (debug_mark),a  
1e0a 3a 19 1e			ld a, (.dmark+1)  
1e0d 32 66 ee			ld (debug_mark+1),a  
1e10 3a 1a 1e			ld a, (.dmark+2)  
1e13 32 67 ee			ld (debug_mark+2),a  
1e16 18 03			jr .pastdmark  
1e18 ..			.dmark: db "LPP"  
1e1b f1			.pastdmark: pop af  
1e1c			endm  
# End of macro DMARK
1e1c cd 24 5f				call check_stacks 
1e1f					FORTH_CHK_LOOP_UNDER 
1e1f e5				push hl 
1e20 d5				push de 
1e21 2a ea e9			ld hl,(cli_loop_sp) 
1e24 11 24 e9			ld de, cli_loop_stack 
1e27 cd 13 0e			call cmp16 
1e2a da 41 60			jp c, fault_loop_under 
1e2d d1				pop de 
1e2e e1				pop hl 
1e2f				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e2f				endif 
1e2f e5				push hl 
1e30 2a ea e9			ld hl,(cli_loop_sp) 
1e33 2b				dec hl 
1e34 2b				dec hl 
1e35 22 ea e9			ld (cli_loop_sp), hl 
1e38				; TODO do stack underflow checks 
1e38 e1				pop hl 
1e39				if DEBUG_FORTH_STACK_GUARD 
1e39 cd 24 5f				call check_stacks 
1e3c					FORTH_CHK_LOOP_UNDER 
1e3c e5				push hl 
1e3d d5				push de 
1e3e 2a ea e9			ld hl,(cli_loop_sp) 
1e41 11 24 e9			ld de, cli_loop_stack 
1e44 cd 13 0e			call cmp16 
1e47 da 41 60			jp c, fault_loop_under 
1e4a d1				pop de 
1e4b e1				pop hl 
1e4c				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e4c				endif 
1e4c c9				ret 
1e4d			 
1e4d			macro_forth_dsp_pop: 
1e4d			 
1e4d e5				push hl 
1e4e			 
1e4e				; release malloc data 
1e4e			 
1e4e				if DEBUG_FORTH_STACK_GUARD 
1e4e cd 24 5f				call check_stacks 
1e51					FORTH_CHK_DSP_UNDER 
1e51 e5				push hl 
1e52 d5				push de 
1e53 2a e8 e9			ld hl,(cli_data_sp) 
1e56 11 22 e8			ld de, cli_data_stack 
1e59 cd 13 0e			call cmp16 
1e5c da 35 60			jp c, fault_dsp_under 
1e5f d1				pop de 
1e60 e1				pop hl 
1e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
1e61				endif 
1e61				;ld hl,(cli_data_sp) 
1e61			if DEBUG_FORTH_DOT 
1e61				DMARK "DPP" 
1e61 f5				push af  
1e62 3a 76 1e			ld a, (.dmark)  
1e65 32 65 ee			ld (debug_mark),a  
1e68 3a 77 1e			ld a, (.dmark+1)  
1e6b 32 66 ee			ld (debug_mark+1),a  
1e6e 3a 78 1e			ld a, (.dmark+2)  
1e71 32 67 ee			ld (debug_mark+2),a  
1e74 18 03			jr .pastdmark  
1e76 ..			.dmark: db "DPP"  
1e79 f1			.pastdmark: pop af  
1e7a			endm  
# End of macro DMARK
1e7a				CALLMONITOR 
1e7a cd 6f ee			call debug_vector  
1e7d				endm  
# End of macro CALLMONITOR
1e7d			endif	 
1e7d			 
1e7d			 
1e7d			if FORTH_ENABLE_DSPPOPFREE 
1e7d			 
1e7d				FORTH_DSP 
1e7d cd 5b 1d			call macro_forth_dsp 
1e80				endm 
# End of macro FORTH_DSP
1e80			 
1e80 7e				ld a, (hl) 
1e81 fe 01			cp DS_TYPE_STR 
1e83 20 22			jr nz, .skippopfree 
1e85			 
1e85				FORTH_DSP_VALUEHL 
1e85 cd 95 1d			call macro_dsp_valuehl 
1e88				endm 
# End of macro FORTH_DSP_VALUEHL
1e88			;	nop 
1e88			if DEBUG_FORTH_DOT 
1e88				DMARK "DPf" 
1e88 f5				push af  
1e89 3a 9d 1e			ld a, (.dmark)  
1e8c 32 65 ee			ld (debug_mark),a  
1e8f 3a 9e 1e			ld a, (.dmark+1)  
1e92 32 66 ee			ld (debug_mark+1),a  
1e95 3a 9f 1e			ld a, (.dmark+2)  
1e98 32 67 ee			ld (debug_mark+2),a  
1e9b 18 03			jr .pastdmark  
1e9d ..			.dmark: db "DPf"  
1ea0 f1			.pastdmark: pop af  
1ea1			endm  
# End of macro DMARK
1ea1				CALLMONITOR 
1ea1 cd 6f ee			call debug_vector  
1ea4				endm  
# End of macro CALLMONITOR
1ea4			endif	 
1ea4 cd 9a 12			call free 
1ea7			.skippopfree: 
1ea7				 
1ea7			 
1ea7			endif 
1ea7			 
1ea7			if DEBUG_FORTH_DOT_KEY 
1ea7				DMARK "DP2" 
1ea7				CALLMONITOR 
1ea7			endif	 
1ea7			 
1ea7				; move pointer down 
1ea7			 
1ea7 2a e8 e9			ld hl,(cli_data_sp) 
1eaa 2b				dec hl 
1eab 2b				dec hl 
1eac			; PARSEV5 
1eac 2b				dec hl 
1ead 22 e8 e9			ld (cli_data_sp), hl 
1eb0			 
1eb0				if DEBUG_FORTH_STACK_GUARD 
1eb0 cd 24 5f				call check_stacks 
1eb3					FORTH_CHK_DSP_UNDER 
1eb3 e5				push hl 
1eb4 d5				push de 
1eb5 2a e8 e9			ld hl,(cli_data_sp) 
1eb8 11 22 e8			ld de, cli_data_stack 
1ebb cd 13 0e			call cmp16 
1ebe da 35 60			jp c, fault_dsp_under 
1ec1 d1				pop de 
1ec2 e1				pop hl 
1ec3				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ec3				endif 
1ec3			 
1ec3 e1				pop hl 
1ec4			 
1ec4 c9				ret 
1ec5			 
1ec5			getwordathl: 
1ec5				; hl points to an address 
1ec5				; load hl with the word at that address 
1ec5			 
1ec5 d5				push de 
1ec6			 
1ec6 5e				ld e, (hl) 
1ec7 23				inc hl 
1ec8 56				ld d, (hl) 
1ec9 eb				ex de, hl 
1eca			 
1eca d1				pop de 
1ecb c9				ret 
1ecc			 
1ecc			 
1ecc			; functions to manuplite stack pointers 
1ecc			 
1ecc			; generate fragment to set hl to be pointer to a stack item 
1ecc			 
1ecc			FORTH_DSP_PTR: macro  x 
1ecc				ld hl,(cli_data_sp) 
1ecc				ld de, x * 3 
1ecc				sbc hl, de 
1ecc				endm 
1ecc			 
1ecc			 
1ecc			 
1ecc			; copy point in hl to stack tmp storage slots 1-4 
1ecc			hltostack1: 
1ecc 11 b8 e2			ld de, os_stack_1  
1ecf c3 fa 1e			jp hltostackmv 
1ed2			 
1ed2			hltostack2:  
1ed2 11 b5 e2			ld de, os_stack_2 
1ed5 c3 fa 1e			jp hltostackmv 
1ed8			 
1ed8			hltostack3:  
1ed8 11 b2 e2			ld de, os_stack_3 
1edb c3 fa 1e			jp hltostackmv 
1ede			 
1ede			hltostack4:  
1ede 11 af e2			ld de, os_stack_4  
1ee1 c3 fa 1e			jp hltostackmv 
1ee4			 
1ee4			; copy to point in hl from stack tmp storage slots 1-4 
1ee4			hlfromstack1: 
1ee4 11 b8 e2			ld de, os_stack_1 
1ee7 c3 f9 1e			jp hlfromsttackmv 
1eea			 
1eea			hlfromstack2:  
1eea 11 b5 e2			ld de, os_stack_2 
1eed c3 f9 1e			jp hlfromsttackmv 
1ef0			 
1ef0			hlfromstack3:  
1ef0 11 b2 e2			ld de, os_stack_3 
1ef3 c3 f9 1e			jp hlfromsttackmv 
1ef6			 
1ef6			hlfromstack4:  
1ef6 11 af e2			ld de, os_stack_4 
1ef9			 
1ef9			hlfromsttackmv: 
1ef9 eb				ex de, hl 
1efa			 
1efa			hltostackmv: 
1efa			 
1efa				; do stack move 
1efa c5				push bc 
1efb 01 03 00			ld bc, 3 
1efe ed b0			ldir  
1f00 c1				pop bc	 
1f01 c9				ret 
1f02			 
1f02			; eof 
1f02			 
# End of file forth_stackopsv5.asm
1f02			endif 
1f02			loadwordinhl:	 
1f02			 
1f02 d5				push de 
1f03			 
1f03 5e				ld e, (hl) 
1f04 23				inc hl 
1f05 56				ld d, (hl) 
1f06 eb				ex de,hl  
1f07			 
1f07 d1				pop de 
1f08			 
1f08 c9				ret 
1f09			 
1f09			user_word_eol:  
1f09				; hl contains the pointer to where to create a linked list item from the end 
1f09				; of the user dict to continue on at the system word dict 
1f09				 
1f09				; poke the stub of the word list linked list to repoint to rom words 
1f09			 
1f09				; stub format 
1f09				; db   word id 
1f09				; dw    link to next word 
1f09			        ; db char length of token 
1f09				; db string + 0 term 
1f09				; db exec code....  
1f09			 
1f09 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f0b 77				ld (hl), a		; word id 
1f0c 23				inc hl 
1f0d			 
1f0d 11 c4 20			ld de, sysdict 
1f10 73				ld (hl), e		; next word link ie system dict 
1f11 23				inc hl 
1f12 72				ld (hl), d		; next word link ie system dict 
1f13 23				inc hl	 
1f14			 
1f14			;	ld (hl), sysdict		; next word link ie system dict 
1f14			;	inc hl 
1f14			;	inc hl 
1f14			 
1f14			;	inc hl 
1f14			;	inc hl 
1f14			 
1f14 3e 02			ld a, 2			; word length is 0 
1f16 77				ld (hl), a	 
1f17 23				inc hl 
1f18			 
1f18 3e 7e			ld a, '~'			; word length is 0 
1f1a 77				ld (hl), a	 
1f1b 23				inc hl 
1f1c 3e 00			ld a, 0			; save empty word 
1f1e 77				ld (hl), a 
1f1f			 
1f1f c9				ret 
1f20			 
1f20				 
1f20			 
1f20			forthexec_cleanup: 
1f20				FORTH_RSP_POP 
1f20 cd 58 1b			call macro_forth_rsp_pop 
1f23				endm 
# End of macro FORTH_RSP_POP
1f23 c9				ret 
1f24			 
1f24			forth_call_hl: 
1f24				; taking hl 
1f24 e5				push hl 
1f25 c9				ret 
1f26			 
1f26			; this is called to reset Forth system but keep existing uwords etc 
1f26			 
1f26			forth_warmstart: 
1f26				; setup stack over/under flow checks 
1f26				if DEBUG_FORTH_STACK_GUARD 
1f26 cd 0a 5f				call chk_stk_init 
1f29				endif 
1f29			 
1f29				; init stack pointers  - * these stacks go upwards *  
1f29 21 a6 e9			ld hl, cli_ret_stack 
1f2c 22 ec e9			ld (cli_ret_sp), hl	 
1f2f				; set bottom of stack 
1f2f 3e 00			ld a,0 
1f31 77				ld (hl),a 
1f32 23				inc hl 
1f33 77				ld (hl),a 
1f34			 
1f34 21 22 e8			ld hl, cli_data_stack 
1f37 22 e8 e9			ld (cli_data_sp), hl	 
1f3a				; set bottom of stack 
1f3a 3e 00			ld a,0 
1f3c 77				ld (hl),a 
1f3d 23				inc hl 
1f3e 77				ld (hl),a 
1f3f			 
1f3f 21 24 e9			ld hl, cli_loop_stack 
1f42 22 ea e9			ld (cli_loop_sp), hl	 
1f45				; set bottom of stack 
1f45 3e 00			ld a,0 
1f47 77				ld (hl),a 
1f48 23				inc hl 
1f49 77				ld (hl),a 
1f4a			 
1f4a				; init extent of current open file 
1f4a			 
1f4a 3e 00			ld a, 0 
1f4c 32 64 ea			ld (store_openext), a 
1f4f			 
1f4f c9				ret 
1f50			 
1f50			 
1f50			 
1f50			; Cold Start - this is called to setup the whole Forth system 
1f50			 
1f50			forth_init: 
1f50			 
1f50				; setup stack over/under flow checks 
1f50			 
1f50			;	if DEBUG_FORTH_STACK_GUARD 
1f50			;		call chk_stk_init 
1f50			;	endif 
1f50			 
1f50				; enable auto display updates (slow.....) 
1f50			 
1f50 3e 01			ld a, 1 
1f52 32 36 ea			ld (cli_autodisplay), a 
1f55			 
1f55				; if storage is in use disable long reads for now 
1f55 3e 00			ld a, 0 
1f57 32 6f ea			ld (store_longread), a 
1f5a			 
1f5a			 
1f5a				; show start up screen 
1f5a			 
1f5a cd c8 0b			call clear_display 
1f5d			 
1f5d 3e 00			ld a,0 
1f5f 32 58 ea			ld (f_cursor_ptr), a 
1f62			 
1f62				; set start of word list in start of ram - for use when creating user words 
1f62			 
1f62 21 1f 63			ld hl, baseram 
1f65 22 b8 e5			ld (os_last_new_uword), hl 
1f68 cd 09 1f			call user_word_eol 
1f6b				 
1f6b			;		call display_data_sp 
1f6b			;		call next_page_prompt 
1f6b			 
1f6b			 
1f6b			 
1f6b			 
1f6b c9				ret 
1f6c			 
1f6c .. 00		.bootforth: db " Forth Kernel Init ",0 
1f80			 
1f80			; TODO push to stack 
1f80			 
1f80			;  
1f80			 
1f80			if FORTH_PARSEV2 
1f80			 
1f80			 
1f80				include "forth_parserv2.asm" 
1f80			 
1f80			endif 
1f80			 
1f80			 
1f80			; parse cli version 1 
1f80			 
1f80			if FORTH_PARSEV1 
1f80			 
1f80			 
1f80			 
1f80			      include "forth_parserv1.asm" 
1f80			endif 
1f80				 
1f80			if FORTH_PARSEV3 
1f80			      include "forth_parserv3.asm" 
1f80				include "forth_wordsv3.asm" 
1f80			endif 
1f80			 
1f80			if FORTH_PARSEV4 
1f80			      include "forth_parserv4.asm" 
1f80				include "forth_wordsv4.asm" 
1f80			endif 
1f80			 
1f80			if FORTH_PARSEV5 
1f80			      include "forth_parserv5.asm" 
1f80				include "forth_wordsv4.asm" 
1f80			endif 
1f80			 
1f80			if FORTH_PARSEV6 
1f80			      include "forth_parserv6.asm" 
1f80			 
1f80			 
1f80			; A better parser without using malloc and string copies all over the place.  
1f80			; Exec in situ should be faster 
1f80			 
1f80			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f80			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f80			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f80			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f80			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f80			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f80			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f80			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f80			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f80			 
1f80			; Core word preamble macro 
1f80			 
1f80			CWHEAD:   macro nxtword opcode lit len opflags 
1f80				db WORD_SYS_CORE+opcode             
1f80				; internal op code number 
1f80				dw nxtword            
1f80				; link to next dict word block 
1f80				db len + 1 
1f80				; literal length of dict word inc zero term 
1f80				db lit,0              
1f80				; literal dict word 
1f80			        ; TODO db opflags        
1f80				endm 
1f80			 
1f80			 
1f80			NEXTW: macro  
1f80				jp macro_next 
1f80				endm 
1f80			 
1f80			macro_next: 
1f80			if DEBUG_FORTH_PARSE_EXEC 
1f80				DMARK "NXT" 
1f80				CALLMONITOR 
1f80			endif	 
1f80			;	inc hl  ; skip token null term  
1f80 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f84 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f88 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f8b			if DEBUG_FORTH_PARSE_EXEC 
1f8b				DMARK "}AA" 
1f8b				CALLMONITOR 
1f8b			endif	 
1f8b c3 7a 20			jp execnext 
1f8e				;jp exec1 
1f8e			       
1f8e			 
1f8e			 
1f8e			; Another go at the parser to compile  
1f8e			 
1f8e			 
1f8e			; TODO rework parser to change all of the string words to byte tokens 
1f8e			; TODO do a search for  
1f8e			 
1f8e			; TODO first run normal parser to zero term sections 
1f8e			; TODO for each word do a token look up to get the op code 
1f8e			; TODO need some means to flag to the exec that this is a byte code form    
1f8e			 
1f8e			 
1f8e			forthcompile: 
1f8e			 
1f8e			; 
1f8e			; line parse: 
1f8e			;       parse raw input buffer 
1f8e			;       tokenise the words 
1f8e			;       malloc new copy (for looping etc) 
1f8e			;       copy to malloc + current pc in line to start of string and add line term 
1f8e			;       save on new rsp 
1f8e			; 
1f8e			 
1f8e			; hl to point to the line to tokenise 
1f8e			 
1f8e			;	push hl 
1f8e 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1f91			 
1f91			;	ld a,0		; string term on input 
1f91			;	call strlent 
1f91			 
1f91			;	ld (os_tok_len), hl	 ; save string length 
1f91			 
1f91			;if DEBUG_FORTH_TOK 
1f91			;	ex de,hl		 
1f91			;endif 
1f91			 
1f91			;	pop hl 		; get back string pointer 
1f91			 
1f91			if DEBUG_FORTH_TOK 
1f91						DMARK "TOc" 
1f91				CALLMONITOR 
1f91			endif 
1f91 7e			.cptoken2:    ld a,(hl) 
1f92 23				inc hl 
1f93 fe 7f			cp FORTH_END_BUFFER 
1f95 28 29			jr z, .cptokendone2 
1f97 fe 00			cp 0 
1f99 28 25			jr z, .cptokendone2 
1f9b fe 22			cp '"' 
1f9d 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1f9f fe 20			cp ' ' 
1fa1 20 ee			jr nz,  .cptoken2 
1fa3			 
1fa3			; TODO consume comments held between ( and ) 
1fa3			 
1fa3				; we have a space so change to zero term for dict match later 
1fa3 2b				dec hl 
1fa4 3e 00			ld a,0 
1fa6 77				ld (hl), a 
1fa7 23				inc hl 
1fa8 18 e7			jr .cptoken2 
1faa				 
1faa			 
1faa			.cptokenstr2: 
1faa				; skip all white space until either eol (because forgot to term) or end double quote 
1faa			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1faa				;inc hl ; skip current double quote 
1faa 7e				ld a,(hl) 
1fab 23				inc hl 
1fac fe 22			cp '"' 
1fae 28 e1			jr z, .cptoken2 
1fb0 fe 7f			cp FORTH_END_BUFFER 
1fb2 28 0c			jr z, .cptokendone2 
1fb4 fe 00			cp 0 
1fb6 28 08			jr z, .cptokendone2 
1fb8 fe 20			cp ' ' 
1fba 28 02			jr z, .cptmp2 
1fbc 18 ec			jr .cptokenstr2 
1fbe			 
1fbe			.cptmp2:	; we have a space so change to zero term for dict match later 
1fbe				;dec hl 
1fbe				;ld a,"-"	; TODO remove this when working 
1fbe				;ld (hl), a 
1fbe				;inc hl 
1fbe 18 ea			jr .cptokenstr2 
1fc0			 
1fc0			.cptokendone2: 
1fc0				;inc hl 
1fc0 3e 7f			ld a, FORTH_END_BUFFER 
1fc2 77				ld (hl),a 
1fc3			;	inc hl 
1fc3			;	ld a, '!' 
1fc3			;	ld (hl),a 
1fc3			 
1fc3 2a bc e5			ld hl,(os_tok_ptr) 
1fc6			         
1fc6			if DEBUG_FORTH_TOK 
1fc6						DMARK "Tc1" 
1fc6				CALLMONITOR 
1fc6			endif 
1fc6			 
1fc6				; push exec string to top of return stack 
1fc6				FORTH_RSP_NEXT 
1fc6 cd 37 1b			call macro_forth_rsp_next 
1fc9				endm 
# End of macro FORTH_RSP_NEXT
1fc9 c9				ret 
1fca			 
1fca			; Another go at the parser need to simplify the process 
1fca			 
1fca			forthparse: 
1fca			 
1fca			; 
1fca			; line parse: 
1fca			;       parse raw input buffer 
1fca			;       tokenise the words 
1fca			;       malloc new copy (for looping etc) 
1fca			;       copy to malloc + current pc in line to start of string and add line term 
1fca			;       save on new rsp 
1fca			; 
1fca			 
1fca			; hl to point to the line to tokenise 
1fca			 
1fca			;	push hl 
1fca 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1fcd			 
1fcd			;	ld a,0		; string term on input 
1fcd			;	call strlent 
1fcd			 
1fcd			;	ld (os_tok_len), hl	 ; save string length 
1fcd			 
1fcd			;if DEBUG_FORTH_TOK 
1fcd			;	ex de,hl		 
1fcd			;endif 
1fcd			 
1fcd			;	pop hl 		; get back string pointer 
1fcd			 
1fcd			if DEBUG_FORTH_TOK 
1fcd						DMARK "TOK" 
1fcd				CALLMONITOR 
1fcd			endif 
1fcd 7e			.ptoken2:    ld a,(hl) 
1fce 23				inc hl 
1fcf fe 7f			cp FORTH_END_BUFFER 
1fd1 28 29			jr z, .ptokendone2 
1fd3 fe 00			cp 0 
1fd5 28 25			jr z, .ptokendone2 
1fd7 fe 22			cp '"' 
1fd9 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fdb fe 20			cp ' ' 
1fdd 20 ee			jr nz,  .ptoken2 
1fdf			 
1fdf			; TODO consume comments held between ( and ) 
1fdf			 
1fdf				; we have a space so change to zero term for dict match later 
1fdf 2b				dec hl 
1fe0 3e 00			ld a,0 
1fe2 77				ld (hl), a 
1fe3 23				inc hl 
1fe4 18 e7			jr .ptoken2 
1fe6				 
1fe6			 
1fe6			.ptokenstr2: 
1fe6				; skip all white space until either eol (because forgot to term) or end double quote 
1fe6			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fe6				;inc hl ; skip current double quote 
1fe6 7e				ld a,(hl) 
1fe7 23				inc hl 
1fe8 fe 22			cp '"' 
1fea 28 e1			jr z, .ptoken2 
1fec fe 7f			cp FORTH_END_BUFFER 
1fee 28 0c			jr z, .ptokendone2 
1ff0 fe 00			cp 0 
1ff2 28 08			jr z, .ptokendone2 
1ff4 fe 20			cp ' ' 
1ff6 28 02			jr z, .ptmp2 
1ff8 18 ec			jr .ptokenstr2 
1ffa			 
1ffa			.ptmp2:	; we have a space so change to zero term for dict match later 
1ffa				;dec hl 
1ffa				;ld a,"-"	; TODO remove this when working 
1ffa				;ld (hl), a 
1ffa				;inc hl 
1ffa 18 ea			jr .ptokenstr2 
1ffc			 
1ffc			.ptokendone2: 
1ffc				;inc hl 
1ffc 3e 7f			ld a, FORTH_END_BUFFER 
1ffe 77				ld (hl),a 
1fff			;	inc hl 
1fff			;	ld a, '!' 
1fff			;	ld (hl),a 
1fff			 
1fff 2a bc e5			ld hl,(os_tok_ptr) 
2002			         
2002			if DEBUG_FORTH_TOK 
2002						DMARK "TK1" 
2002				CALLMONITOR 
2002			endif 
2002			 
2002				; push exec string to top of return stack 
2002				FORTH_RSP_NEXT 
2002 cd 37 1b			call macro_forth_rsp_next 
2005				endm 
# End of macro FORTH_RSP_NEXT
2005 c9				ret 
2006			 
2006			; 
2006			;	; malloc size + buffer pointer + if is loop flag 
2006			;	ld hl,(os_tok_len) 		 ; get string length 
2006			; 
2006			;	ld a,l 
2006			; 
2006			;	cp 0			; we dont want to use a null string 
2006			;	ret z 
2006			; 
2006			;;	add 3    ; prefix malloc with buffer for current word ptr 
2006			; 
2006			;	add 5     ; TODO when certain not over writing memory remove 
2006			; 
2006			;		 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKE" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	ld l,a 
2006			;	ld h,0 
2006			;;	push hl   ; save required space for the copy later 
2006			;	call malloc 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKM" 
2006			;	CALLMONITOR 
2006			;endif 
2006			;	if DEBUG_FORTH_MALLOC_GUARD 
2006			;		push af 
2006			;		call ishlzero 
2006			;;		ld a, l 
2006			;;		add h 
2006			;;		cp 0 
2006			;		pop af 
2006			;		 
2006			;		call z,malloc_error 
2006			;	endif 
2006			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2006			; 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKR" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	FORTH_RSP_NEXT 
2006			; 
2006			;	;inc hl	 ; go past current buffer pointer 
2006			;	;inc hl 
2006			;	;inc hl   ; and past if loop flag 
2006			;		; TODO Need to set flag  
2006			; 
2006			;	 
2006			;	 
2006			;	ex de,hl	; malloc is dest 
2006			;	ld hl, (os_tok_len) 
2006			;;	pop bc 
2006			;	ld c, l                
2006			;	ld b,0 
2006			;	ld hl, (os_tok_ptr) 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKT" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	; do str cpy 
2006			; 
2006			;	ldir      ; copy byte in hl to de 
2006			; 
2006			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			; 
2006			;			DMARK "TKY" 
2006			;	CALLMONITOR 
2006			;endif 
2006			;	;ld a,0 
2006			;	;ld a,FORTH_END_BUFFER 
2006			;	ex de, hl 
2006			;	;dec hl			 ; go back over the space delim at the end of word 
2006			;	;ld (hl),a 
2006			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2006			;	ld a,FORTH_END_BUFFER 
2006			;	ld (hl),a 
2006			;	inc hl 
2006			;	ld a,FORTH_END_BUFFER 
2006			;	ld (hl),a 
2006			; 
2006			;	; init the malloc area data 
2006			;	; set pc for in current area 
2006			;	;ld hl, (os_tok_malloc) 
2006			;	;inc hl 
2006			;	;inc hl 
2006			;	;inc hl 
2006			;	;ex de,hl 
2006			;	;ld hl, (os_tok_malloc) 
2006			;	;ld (hl),e 
2006			;	;inc hl 
2006			;	;ld (hl),d 
2006			; 
2006			; 
2006			;	ld hl,(os_tok_malloc) 
2006			;if DEBUG_FORTH_PARSE_KEY 
2006			;			DMARK "TKU" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	ret 
2006			 
2006			forthexec: 
2006			 
2006			; line exec: 
2006			; forth parser 
2006			 
2006			; 
2006			;       get current exec line on rsp 
2006			 
2006				FORTH_RSP_TOS 
2006 cd 4e 1b			call macro_forth_rsp_tos 
2009				endm 
# End of macro FORTH_RSP_TOS
2009			 
2009			;       restore current pc - hl points to malloc of data 
2009			 
2009				;ld e, (hl) 
2009				;inc hl 
2009				;ld d, (hl) 
2009				;ex de,hl 
2009			 
2009			 
2009			exec1: 
2009 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
200c			 
200c				; copy our PC to working vars  
200c 22 3a ea			ld (cli_ptr), hl                    ; here 
200f 22 38 ea			ld (cli_origptr), hl                ; here 
2012			 
2012 7e				ld a,(hl)                           ; here make hl be the ram ptr 
2013 fe 7f			cp FORTH_END_BUFFER 
2015 c8				ret z 
2016			 
2016				; skip any nulls 
2016			 
2016 fe 00			cp 0 
2018 20 03			jr nz, .execword 
201a 23				inc hl 
201b 18 ec			jr exec1 
201d			 
201d			 
201d			.execword: 
201d			 
201d			 
201d			 
201d			if DEBUG_FORTH_PARSE_EXEC 
201d						DMARK "KYQ" 
201d				CALLMONITOR 
201d			endif 
201d			;       while at start of word: 
201d			; get start of dict (in user area first) 
201d			 
201d 21 1f 63		ld hl, baseram 
2020			;ld hl, sysdict 
2020 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
2023			;           match word at pc 
2023			;           exec word 
2023			;           or push to dsp 
2023			;           forward to next token 
2023			;           if line term pop rsp and exit 
2023			;        
2023			 
2023			if DEBUG_FORTH_PARSE_EXEC 
2023						DMARK "KYq" 
2023				CALLMONITOR 
2023			endif 
2023			 
2023			; 
2023			; word comp 
2023			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2023			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2023			;    move to start of word  
2023			;    compare word to cli_token 
2023			 
2023			.execpnword:	; HL at start of a word in the dictionary to check 
2023			 
2023 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
2026			 
2026 cd bd 20			call forth_tok_next 
2029			; tok next end here 
2029 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
202c eb				ex de, hl 
202d			 
202d			 
202d				; save the pointer of the current token - 1 to check against 
202d				 
202d 22 40 ea			ld (cli_token), hl   
2030				; TODO maybe remove below save if no debug 
2030				; save token string ptr for any debug later 
2030 23				inc hl  
2031 22 42 ea			ld (cli_origtoken), hl 
2034 2b				dec hl 
2035				; save pointer to the start of the next dictionay word 
2035 7e				ld a,(hl)   ; get string length 
2036 47				ld b,a 
2037			.execpnwordinc:  
2037 23				inc hl 
2038 10 fd			djnz .execpnwordinc 
203a 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
203d			 
203d				; now check the word token against the string being parsed 
203d			 
203d 2a 40 ea			ld hl,(cli_token) 
2040 23				inc hl     ; skip string length (use zero term instead to end) 
2041				;ld (cli_token), hl 
2041			 
2041			.execpnchar:    ; compare char between token and string to parse 
2041			 
2041			 
2041				;ld hl, (cli_token)     ; the dict word  
2041 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
2045			 
2045			 
2045			.execpncharl:    ; compare char between token and string to parse (loop) 
2045			 
2045 1a				ld a,(de) 
2046 cd 52 11			call toUpper 		; make sure the input string matches case 
2049 be				cp (hl) 
204a			 
204a c2 63 20			jp nz, .execpnskipword	 ; no match so move to next word 
204d				 
204d			;    if same 
204d			;       scan for string terms 0 for token and 32 for input 
204d 46				ld b,(hl) 
204e 80				add b			 
204f 23				inc hl 
2050 13				inc de 
2051 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2053							; TODO need to make sure last word in zero term string is accounted for 
2053 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
2055			 
2055			 
2055				; at end of both strings so both are exact match 
2055			 
2055			;       skip ptr for next word 
2055			 
2055 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
2058 23				inc hl			 ; at next char 
2059 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
205c 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
205f				 
205f				 
205f			 
205f			 
205f			 
205f			;       exec code block 
205f			if DEBUG_FORTH_JP 
205f				call clear_display 
205f				call update_display 
205f				call delay1s 
205f				ld hl, (cli_execword)     ; save for next check if no match on this word 
205f				ld a,h 
205f				ld hl, os_word_scratch 
205f				call hexout 
205f				ld hl, (cli_execword)     ; save for next check if no match on this word 
205f				ld a,l 
205f				ld hl, os_word_scratch+2 
205f				call hexout 
205f				ld hl, os_word_scratch+4 
205f				ld a,0 
205f				ld (hl),a 
205f				ld de,os_word_scratch 
205f				call str_at_display 
205f					ld a, display_row_2 
205f					call str_at_display 
205f				ld de, (cli_origtoken) 
205f				ld a, display_row_1+10 
205f					call str_at_display 
205f			 
205f				ld a,display_row_1 
205f				ld de, .foundword 
205f				ld a, display_row_3 
205f				call str_at_display 
205f				call update_display 
205f				call delay1s 
205f				call delay1s 
205f				call delay1s 
205f			endif 
205f			 
205f			if DEBUG_FORTH_PARSE_EXEC 
205f						DMARK "KYj" 
205f			endif 
205f				; TODO save the word pointer in this exec 
205f			 
205f 2a 3e ea			ld hl,(cli_execword) 
2062 e9				jp (hl) 
2063			 
2063			 
2063			;    if not same 
2063			;	scan for zero term 
2063			;	get ptr for next word 
2063			;	goto word comp 
2063			 
2063			.execpnskipword:	; get pointer to next word 
2063 2a 3c ea			ld hl,(cli_nextword) 
2066			 
2066 7e				ld a,(hl) 
2067 fe 00			cp WORD_SYS_END 
2069			;	cp 0 
2069 28 09			jr z, .execendofdict			 ; at end of words 
206b			 
206b			if DEBUG_FORTH_PARSE_EXEC 
206b						DMARK "KY4" 
206b			endif 
206b			if DEBUG_FORTH_PARSE_EXEC 
206b			 
206b				; see if disabled 
206b			 
206b			;	ld a, (os_view_disable) 
206b			;	cp '*' 
206b				ld a,(debug_vector) 
206b				cp $c9   ; RET 
206b				jr z, .noskip 
206b			 
206b			 
206b				ld de, .nowordfound 
206b				ld a, display_row_3 
206b				call str_at_display 
206b				call update_display 
206b				ld a, 100 
206b				call aDelayInMS 
206b				 
206b				if DEBUG_FORTH_PARSE_EXEC_SLOW 
206b					call delay250ms 
206b				endif 
206b			.noskip:  
206b			 
206b			endif	 
206b			 
206b 2a 38 ea			ld hl,(cli_origptr) 
206e 22 3a ea			ld (cli_ptr),hl 
2071			 
2071			if DEBUG_FORTH_PARSE_EXEC 
2071						DMARK "KY5" 
2071			endif 
2071 c3 23 20			jp .execpnword			; else go to next word 
2074			 
2074			.execendofdict:  
2074			 
2074			if DEBUG_FORTH_PARSE_EXEC 
2074						DMARK "KYe" 
2074			endif 
2074			if DEBUG_FORTH_PARSE_EXEC 
2074				; see if disabled 
2074			 
2074			;	ld a, (os_view_disable) 
2074			;	cp '*' 
2074				ld a,(debug_vector) 
2074				cp $c9   ; ret 
2074				jr z, .ispskip 
2074			 
2074				call clear_display 
2074				call update_display 
2074				call delay1s 
2074				ld de, (cli_origptr) 
2074				ld a, display_row_1 
2074				call str_at_display 
2074				 
2074				ld de, .enddict 
2074				ld a, display_row_3 
2074				call str_at_display 
2074				call update_display 
2074				ld a, 100 
2074				call aDelayInMS 
2074				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2074				call delay1s 
2074				call delay1s 
2074				call delay1s 
2074				endif 
2074			.ispskip:  
2074				 
2074			endif	 
2074			 
2074			 
2074			 
2074				; if the word is not a keyword then must be a literal so push it to stack 
2074			 
2074			; push token to stack to end of word 
2074			 
2074				STACKFRAME ON $1efe $2f9f 
2074				if DEBUG_STACK_IMB 
2074					if ON 
2074						exx 
2074						ld de, $1efe 
2074						ld a, d 
2074						ld hl, curframe 
2074						call hexout 
2074						ld a, e 
2074						ld hl, curframe+2 
2074						call hexout 
2074						ld hl, $1efe 
2074						push hl 
2074						ld hl, $2f9f 
2074						push hl 
2074						exx 
2074					endif 
2074				endif 
2074			endm 
# End of macro STACKFRAME
2074			 
2074 2a bc e5		ld hl,(os_tok_ptr) 
2077 cd f9 1c		call forth_apush 
207a			 
207a				STACKFRAMECHK ON $1efe $2f9f 
207a				if DEBUG_STACK_IMB 
207a					if ON 
207a						exx 
207a						ld hl, $2f9f 
207a						pop de   ; $2f9f 
207a						call cmp16 
207a						jr nz, .spnosame 
207a						ld hl, $1efe 
207a						pop de   ; $1efe 
207a						call cmp16 
207a						jr z, .spfrsame 
207a						.spnosame: call showsperror 
207a						.spfrsame: nop 
207a						exx 
207a					endif 
207a				endif 
207a			endm 
# End of macro STACKFRAMECHK
207a			 
207a			execnext: 
207a			 
207a			if DEBUG_FORTH_PARSE_EXEC 
207a						DMARK "KY>" 
207a			endif 
207a			; move past token to next word 
207a			 
207a 2a bc e5		ld hl, (os_tok_ptr) 
207d 3e 00		ld a, 0 
207f 01 ff 00		ld bc, 255     ; input buffer size 
2082 ed b1		cpir 
2084			 
2084			if DEBUG_FORTH_PARSE_EXEC 
2084						DMARK "KY!" 
2084				CALLMONITOR 
2084			endif	 
2084			; TODO this might place hl on the null, so will need to forward on??? 
2084			;inc hl   ; see if this gets onto the next item 
2084			 
2084			 
2084			; TODO pass a pointer to the buffer to push 
2084			; TODO call function to push 
2084			 
2084			; look for end of input 
2084			 
2084			;inc hl 
2084			;ld a,(hl) 
2084			;cp FORTH_END_BUFFER 
2084			;ret z 
2084			 
2084			 
2084 c3 09 20		jp exec1 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			findnexttok: 
2087			 
2087				; hl is pointer to move 
2087				; de is the token to locate 
2087			 
2087					if DEBUG_FORTH 
2087						DMARK "NTK" 
2087						CALLMONITOR 
2087					endif 
2087 d5				push de 
2088			 
2088			.fnt1:	 
2088				; find first char of token to locate 
2088			 
2088 1a				ld a, (de) 
2089 4f				ld c,a 
208a 7e				ld a,(hl) 
208b cd 52 11			call toUpper 
208e					if DEBUG_FORTH 
208e						DMARK "NT1" 
208e						CALLMONITOR 
208e					endif 
208e b9				cp c 
208f			 
208f 28 03			jr z, .fnt2cmpmorefirst	 
2091			 
2091				; first char not found move to next char 
2091			 
2091 23				inc hl 
2092 18 f4			jr .fnt1 
2094			 
2094			.fnt2cmpmorefirst:	 
2094				; first char of token found.  
2094			 
2094 e5				push hl     ; save start of token just in case it is the right one 
2095 d9				exx 
2096 e1				pop hl        ; save it to hl' 
2097 d9				exx 
2098			 
2098			 
2098			.fnt2cmpmore:	 
2098				; compare the rest 
2098				 
2098 23				inc hl 
2099 13				inc de 
209a				 
209a 1a				ld a, (de) 
209b 4f				ld c,a 
209c 7e				ld a,(hl) 
209d cd 52 11			call toUpper 
20a0			 
20a0					if DEBUG_FORTH 
20a0						DMARK "NT2" 
20a0						CALLMONITOR 
20a0					endif 
20a0				; c has the token to find char 
20a0				; a has the mem to scan char 
20a0			 
20a0 b9				cp c 
20a1 28 04			jr z,.fntmatch1 
20a3			 
20a3				; they are not the same 
20a3			 
20a3					if DEBUG_FORTH 
20a3						DMARK "NT3" 
20a3						CALLMONITOR 
20a3					endif 
20a3 d1				pop de	; reset de token to look for 
20a4 d5				push de 
20a5 18 e1			jr .fnt1 
20a7				 
20a7			.fntmatch1: 
20a7			 
20a7				; is the same char a null which means we might have a full hit? 
20a7					if DEBUG_FORTH 
20a7						DMARK "NT4" 
20a7						CALLMONITOR 
20a7					endif 
20a7			 
20a7 fe 00			cp 0 
20a9 28 0b			jr z, .fntmatchyes 
20ab			 
20ab				; are we at the end of the token to find? 
20ab			 
20ab					if DEBUG_FORTH 
20ab						DMARK "NT5" 
20ab						CALLMONITOR 
20ab					endif 
20ab 3e 00			ld a, 0 
20ad b9				cp c 
20ae			 
20ae c2 98 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20b1			 
20b1					if DEBUG_FORTH 
20b1						DMARK "NT6" 
20b1						CALLMONITOR 
20b1					endif 
20b1				; token to find is exhusted but no match to stream 
20b1			 
20b1				; restore tok pointer and continue on 
20b1 d1				pop de 
20b2 d5				push de 
20b3 c3 88 20			jp .fnt1 
20b6			 
20b6			 
20b6			.fntmatchyes: 
20b6			 
20b6				; hl now contains the end of the found token 
20b6			 
20b6				; get rid of saved token pointer to find 
20b6			 
20b6 d1				pop de 
20b7			 
20b7					if DEBUG_FORTH 
20b7						DMARK "NT9" 
20b7						CALLMONITOR 
20b7					endif 
20b7			 
20b7				; hl will be on the null term so forward on 
20b7			 
20b7				; get back the saved start of the token 
20b7			 
20b7 d9				exx 
20b8 e5				push hl     ; save start of token just in case it is the right one 
20b9 d9				exx 
20ba e1				pop hl        ; save it to hl 
20bb			 
20bb c9				ret 
20bc			 
20bc			 
20bc			; LIST needs to find a specific token   
20bc			; FORGET needs to find a spefici token 
20bc			 
20bc			; SAVE needs to find all tokens by flag 
20bc			; WORDS just needs to scan through all  by flag 
20bc			; UWORDS needs to scan through all by flag 
20bc			 
20bc			 
20bc			; given hl as pointer to start of dict look up string 
20bc			; return hl as pointer to start of word block 
20bc			; or 0 if not found 
20bc			 
20bc			forth_find_tok: 
20bc c9				ret 
20bd			 
20bd			; given hl as pointer to dict structure 
20bd			; move to the next dict block structure 
20bd			 
20bd			forth_tok_next: 
20bd				; hl now points to the address of the next word pointer  
20bd				; TODO skip compiled symbol for now 
20bd			;	push de 
20bd 23				inc hl 
20be 5e				ld e, (hl) 
20bf 23				inc hl 
20c0 56				ld d, (hl) 
20c1 23				inc hl 
20c2			 
20c2 eb				ex de,hl 
20c3			if DEBUG_FORTH_PARSE_NEXTWORD 
20c3				push bc 
20c3				ld bc, (cli_nextword) 
20c3						DMARK "NXW" 
20c3				CALLMONITOR 
20c3				pop bc 
20c3			endif 
20c3			;	pop de	 
20c3 c9				ret 
20c4			 
20c4			 
20c4			 
20c4			; eof 
# End of file forth_parserv6.asm
20c4				include "forth_wordsv4.asm" 
20c4			 
20c4			; the core word dictionary v4 
20c4			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20c4			 
20c4			; this is a linked list for each of the system words used 
20c4			; user defined words will follow the same format but will be in ram 
20c4			 
20c4			 
20c4			; 
20c4			; 
20c4			; define linked list: 
20c4			; 
20c4			; 1. compiled byte op code 
20c4			; 2. len of text word 
20c4			; 3. text word 
20c4			; 4. ptr to next dictionary word 
20c4			; 5. asm, calls etc for the word 
20c4			; 
20c4			;  if 1 == 0 then last word in dict  
20c4			;   
20c4			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20c4			;  
20c4			;  
20c4			; create basic standard set of words 
20c4			; 
20c4			;  
20c4			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20c4			; 2DUP 2DROP 2SWAP  
20c4			; @ C@ - get byte  
20c4			; ! C! - store byte 
20c4			; 0< true if less than zero 
20c4			; 0= true if zero 
20c4			; < >  
20c4			; = true if same 
20c4			; variables 
20c4			 
20c4			 
20c4			; Hardware specific words I may need 
20c4			; 
20c4			; IN OUT  
20c4			; calls to key util functions 
20c4			; calls to hardward abstraction stuff 
20c4			; easy control of frame buffers and lcd i/o 
20c4			; keyboard  
20c4			 
20c4			 
20c4			;DICT: macro 
20c4			; op_code, len, word, next 
20c4			;    word: 
20c4			;    db op_code 
20c4			;    ds word zero term 
20c4			;    dw next 
20c4			;    endm 
20c4			 
20c4			 
20c4			 
20c4			 
20c4			; op code 1 is a flag for user define words which are to be handled differently 
20c4			 
20c4			 
20c4			; 
20c4			; 
20c4			;    TODO on entry to a word this should be the expected environment 
20c4			;    hl - tos value if number then held, if string this is the ptr 
20c4			;    de -  
20c4			 
20c4			 
20c4			; opcode ranges 
20c4			; 0 - end of word dict 
20c4			; 255 - user define words 
20c4			 
20c4			sysdict: 
20c4			include "forth_opcodes.asm" 
20c4			; op codes for forth keywords 
20c4			 
20c4			; Changing use of opcodes to flag is the word exists in compiled form or not.  
20c4			; This provides a means to compile uwords if required for higher performance 
20c4			; by avoiding the use of the keyword parser and just jumping directly to the code 
20c4			; Actually there is already a flag for if the code exists as binary thinking about it... 
20c4			 
20c4			 
20c4			 
20c4			 
20c4			 
20c4			; free to use code 0  
20c4				OPCODE_HEAP: equ  1 
20c4				OPCODE_EXEC: equ 2 
20c4				OPCODE_DUP: equ 3 
20c4				OPCODE_SWAP: equ 4 
20c4				OPCODE_COLN: equ 5 
20c4				OPCODE_SCOLN: equ 6 
20c4				OPCODE_DROP: equ 7 
20c4				OPCODE_DUP2: equ 8 
20c4				OPCODE_DROP2: equ 9 
20c4				OPCODE_SWAP2: equ 10 
20c4				OPCODE_AT: equ 11 
20c4				OPCODE_CAT: equ 12 
20c4				OPCODE_BANG: equ 13 
20c4				OPCODE_CBANG: equ 14 
20c4				OPCODE_SCALL: equ 15 
20c4				OPCODE_DEPTH: equ 16 
20c4				OPCODE_OVER: equ 17 
20c4				OPCODE_PAUSE: equ 18 
20c4				OPCODE_PAUSES: equ 19 
20c4				OPCODE_ROT: equ 20 
20c4			;free to reuse	OPCODE_WORDS: equ 21 
20c4			        OPCODE_NOT: equ 21 
20c4				OPCODE_UWORDS: equ 22 
20c4				OPCODE_BP: equ 23 
20c4				OPCODE_MONITOR: equ 24  
20c4				OPCODE_MALLOC: equ 25 
20c4				OPCODE_FREE: equ 26 
20c4				OPCODE_LIST: equ 27 
20c4				OPCODE_FORGET: equ 28 
20c4				OPCODE_NOP: equ 29 
20c4				OPCODE_COMO: equ 30 
20c4				OPCODE_COMC: equ 31 
20c4			;free to reuse	OPCODE_ENDCORE: equ 32 
20c4				OPCODE_AFTERSOUND: equ 33 
20c4				OPCODE_GP2: equ 34 
20c4				OPCODE_GP3: equ 35 
20c4				OPCODE_GP4: equ 36 
20c4				OPCODE_SIN: equ 37 
20c4				OPCODE_SOUT: equ 38 
20c4				OPCODE_SPIO: equ 39 
20c4				OPCODE_SPICEH: equ 40 
20c4				OPCODE_SPIOb: equ 41 
20c4				OPCODE_SPII: equ 42 
20c4				OPCODE_SESEL: equ 43 
20c4				OPCODE_CARTDEV: equ 44 
20c4			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20c4				OPCODE_FB: equ 46 
20c4				OPCODE_EMIT: equ 47 
20c4				OPCODE_DOTH: equ 48 
20c4				OPCODE_DOTF: equ 49 
20c4				OPCODE_DOT: equ 50 
20c4				OPCODE_CLS: equ 51 
20c4				OPCODE_DRAW: equ 52 
20c4				OPCODE_DUMP: equ 53 
20c4				OPCODE_CDUMP: equ 54 
20c4				OPCODE_DAT: equ 55 
20c4				OPCODE_HOME: equ 56 
20c4				OPCODE_SPACE: equ 57 
20c4				OPCODE_SPACES: equ 58 
20c4				OPCODE_SCROLL: equ 59 
20c4				OPCODE_ATQ: equ 60 
20c4				OPCODE_AUTODSP: equ 61 
20c4				OPCODE_MENU: equ 62 
20c4			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20c4				OPCODE_THEN: equ 64 
20c4				OPCODE_ELSE: equ 65 
20c4				OPCODE_DO: equ 66 
20c4				OPCODE_LOOP: equ 67 
20c4				OPCODE_I: equ 68 
20c4				OPCODE_DLOOP: equ 69  
20c4				OPCODE_REPEAT: equ 70  
20c4				OPCODE_UNTIL: equ 71 
20c4				OPCODE_ENDFLOW: equ 72 
20c4				OPCODE_WAITK: equ 73 
20c4				OPCODE_ACCEPT: equ 74 
20c4				OPCODE_EDIT: equ 75 
20c4			;free to reuse	OPCODE_ENDKEY: equ 76 
20c4				OPCODE_LZERO: equ 77 
20c4				OPCODE_TZERO: equ 78 
20c4				OPCODE_LESS: equ 79 
20c4				OPCODE_GT: equ 80 
20c4				OPCODE_EQUAL: equ 81  
20c4			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20c4				OPCODE_NEG: equ 83 
20c4				OPCODE_DIV: equ 84 
20c4				OPCODE_MUL: equ 85 
20c4				OPCODE_MIN: equ 86 
20c4				OPCODE_MAX: equ 87 
20c4				OPCODE_RND16: equ 88 
20c4				OPCODE_RND8: equ 89 
20c4				OPCODE_RND: equ 90 
20c4			;free to reuse	OPCODE_ENDMATHS: equ 91  
20c4				OPCODE_BYNAME: equ 92 
20c4				OPCODE_DIR: equ 93 
20c4				OPCODE_SAVE: equ 94 
20c4				OPCODE_LOAD: equ 95 
20c4				OPCODE_BSAVE: equ 96 
20c4				OPCODE_BLOAD: equ 97 
20c4				OPCODE_SEO: equ 98  
20c4				OPCODE_SEI: equ 99 
20c4				OPCODE_SFREE: equ 100 
20c4				OPCODE_SIZE: equ 101 
20c4				OPCODE_CREATE: equ 102 
20c4				OPCODE_APPEND: equ 103 
20c4				OPCODE_SDEL: equ 104 
20c4				OPCODE_OPEN: equ 105 
20c4				OPCODE_READ: equ 106 
20c4				OPCODE_EOF: equ 106 
20c4				OPCODE_FORMAT: equ 107 
20c4				OPCODE_LABEL: equ 108 
20c4				OPCODE_LABELS: equ 109 
20c4			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20c4				OPCODE_UPPER: equ 111 
20c4				OPCODE_LOWER: equ 112 
20c4				OPCODE_SUBSTR: equ 113 
20c4				OPCODE_LEFT: equ 114 
20c4				OPCODE_RIGHT: equ 115 
20c4				OPCODE_STR2NUM: equ 116 
20c4				OPCODE_NUM2STR: equ 117 
20c4				OPCODE_CONCAT: equ 118 
20c4				OPCODE_FIND: equ 119 
20c4				OPCODE_LEN: equ 120 
20c4				OPCODE_CHAR: equ 121 
20c4			; free to reuse	OPCODE_STRLEN: equ 122 
20c4			; free to reuse	OPCODE_ENDSTR: equ 123 
20c4				OPCODE_V0S: equ 124 
20c4				OPCODE_V0Q: equ 125 
20c4				OPCODE_V1S: equ 126 
20c4				OPCODE_V1Q: equ 127 
20c4				OPCODE_V2S: equ 128 
20c4				OPCODE_V2Q: equ 129 
20c4				OPCODE_V3S: equ 130 
20c4				OPCODE_V3Q: equ 131 
20c4			;free to reuse	OPCODE_END: equ 132 
20c4				OPCODE_ZDUP: equ 133 
20c4			 
20c4			; eof 
# End of file forth_opcodes.asm
20c4			 
20c4			include "forth_words_core.asm" 
20c4			 
20c4			; | ## Core Words 
20c4			 
20c4			;if MALLOC_4 
20c4			 
20c4			.HEAP: 
20c4			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20c4 15				db WORD_SYS_CORE+OPCODE_HEAP             
20c5 03 21			dw .EXEC            
20c7 05				db 4 + 1 
20c8 .. 00			db "HEAP",0              
20cd				endm 
# End of macro CWHEAD
20cd			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20cd			; | | u1 - Current number of bytes in the heap 
20cd			; | | u2 - Remaining bytes left on the heap 
20cd			; | |  
20cd			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20cd			 
20cd			 
20cd				if DEBUG_FORTH_WORDS_KEY 
20cd					DMARK "HEP" 
20cd f5				push af  
20ce 3a e2 20			ld a, (.dmark)  
20d1 32 65 ee			ld (debug_mark),a  
20d4 3a e3 20			ld a, (.dmark+1)  
20d7 32 66 ee			ld (debug_mark+1),a  
20da 3a e4 20			ld a, (.dmark+2)  
20dd 32 67 ee			ld (debug_mark+2),a  
20e0 18 03			jr .pastdmark  
20e2 ..			.dmark: db "HEP"  
20e5 f1			.pastdmark: pop af  
20e6			endm  
# End of macro DMARK
20e6					CALLMONITOR 
20e6 cd 6f ee			call debug_vector  
20e9				endm  
# End of macro CALLMONITOR
20e9				endif 
20e9 2a 29 63			ld hl, (free_list )      
20ec 11 2e 63			ld de, heap_start 
20ef			 
20ef ed 52			sbc hl, de  
20f1			 
20f1 cd 90 1b			call forth_push_numhl 
20f4			 
20f4			 
20f4 ed 5b 29 63		ld de, (free_list )      
20f8 21 96 e2			ld hl, heap_end 
20fb			 
20fb ed 52			sbc hl, de 
20fd			 
20fd cd 90 1b			call forth_push_numhl 
2100				 
2100			 
2100				 
2100			 
2100			 
2100			 
2100				NEXTW 
2100 c3 80 1f			jp macro_next 
2103				endm 
# End of macro NEXTW
2103			;endif 
2103			 
2103			.EXEC: 
2103			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2103			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2103			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2103			;; > > 
2103			;; > >   
2103			;	STACKFRAME OFF $5efe $5f9f 
2103			; 
2103			;		if DEBUG_FORTH_WORDS_KEY 
2103			;			DMARK "EXE" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	FORTH_DSP_VALUEHL 
2103			; 
2103			;	FORTH_DSP_POP 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX1" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;;	ld e,(hl) 
2103			;;	inc hl 
2103			;;	ld d,(hl) 
2103			;;	ex de,hl 
2103			; 
2103			;;		if DEBUG_FORTH_WORDS 
2103			;;			DMARK "EX2" 
2103			;;			CALLMONITOR 
2103			;;		endif 
2103			;	push hl 
2103			; 
2103			;	;ld a, 0 
2103			;	;ld a, FORTH_END_BUFFER 
2103			;	call strlenz 
2103			;	inc hl   ; include zero term to copy 
2103			;	inc hl   ; include term 
2103			;	inc hl   ; include term 
2103			;	ld b,0 
2103			;	ld c,l 
2103			;	pop hl 
2103			;	ld de, execscratch 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX3" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ldir 
2103			; 
2103			; 
2103			;	ld hl, execscratch 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXe" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	call forthparse 
2103			;	call forthexec 
2103			;;	call forthexec_cleanup 
2103			;;	call forthparse 
2103			;;	call forthexec 
2103			; 
2103			;	STACKFRAMECHK OFF $5efe $5f9f 
2103			; 
2103			;	; an immediate word so no need to process any more words 
2103			;	ret 
2103			;	NEXTW 
2103			 
2103			; dead code - old version  
2103			;	FORTH_RSP_NEXT 
2103			 
2103			;  
2103			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2103			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2103			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2103			;	push hl 
2103			;	push de 
2103			;	push bc 
2103			; 
2103			; 
2103			;		if DEBUG_FORTH_WORDS_KEY 
2103			;			DMARK "EXR" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			; 
2103			; 
2103			;	;v5 FORTH_DSP_VALUE 
2103			;	FORTH_DSP_VALUEHL 
2103			; 
2103			;	; TODO do string type checks 
2103			; 
2103			;;v5	inc hl   ; skip type 
2103			; 
2103			;	push hl  ; source code  
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX1" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ld a, 0 
2103			;	call strlent 
2103			; 
2103			;	inc hl 
2103			;	inc hl 
2103			;	inc hl 
2103			;	inc hl 
2103			; 
2103			;	push hl    ; size 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX2" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	call malloc 
2103			; 
2103			;	ex de, hl    ; de now contains malloc area 
2103			;	pop bc   	; get byte count 
2103			;	pop hl      ; get string to copy 
2103			; 
2103			;	push de     ; save malloc for free later 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX3" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ldir       ; duplicate string 
2103			; 
2103			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2103			;	 
2103			;	; TODO fix the parse would be better than this...  
2103			;	ex de, hl 
2103			;	dec hl 
2103			;	ld a, 0 
2103			;	ld (hl), a 
2103			;	dec hl 
2103			;	ld a, ' ' 
2103			;	ld (hl), a 
2103			;	dec hl 
2103			;	ld (hl), a 
2103			; 
2103			;	dec hl 
2103			;	ld (hl), a 
2103			; 
2103			; 
2103			;	FORTH_DSP_POP  
2103			; 
2103			;	pop hl     
2103			;	push hl    ; save malloc area 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX4" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	call forthparse 
2103			;	call forthexec 
2103			;	 
2103			;	pop hl 
2103			;	if DEBUG_FORTH_WORDS 
2103			;		DMARK "EX5" 
2103			;		CALLMONITOR 
2103			;	endif 
2103			; 
2103			;	if FORTH_ENABLE_FREE 
2103			;	call free 
2103			;	endif 
2103			; 
2103			;	if DEBUG_FORTH_WORDS 
2103			;		DMARK "EX6" 
2103			;		CALLMONITOR 
2103			;	endif 
2103			; 
2103			;	pop bc 
2103			;	pop de 
2103			;	pop hl 
2103			;;	FORTH_RSP_POP	  
2103			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2103			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2103			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2103			; 
2103			;	if DEBUG_FORTH_WORDS 
2103			;		DMARK "EX7" 
2103			;		CALLMONITOR 
2103			;	endif 
2103			;	NEXTW 
2103			 
2103			;.STKEXEC: 
2103			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2103			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2103			; 
2103			; 
2103			;		if DEBUG_FORTH_WORDS_KEY 
2103			;			DMARK "STX" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	FORTH_DSP_VALUEHL 
2103			; 
2103			;	ld (store_tmp1), hl    ; count 
2103			; 
2103			;	FORTH_DSP_POP 
2103			;.stkexec1: 
2103			;	ld hl, (store_tmp1)   ; count 
2103			;	ld a, 0 
2103			;	cp l 
2103			;	ret z 
2103			; 
2103			;	dec hl 
2103			;	ld (store_tmp1), hl    ; count 
2103			;	 
2103			;	FORTH_DSP_VALUEHL 
2103			;	push hl 
2103			;	 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXp" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	FORTH_DSP_POP 
2103			; 
2103			;	call strlenz 
2103			;	inc hl   ; include zero term to copy 
2103			;	inc hl   ; include zero term to copy 
2103			;	inc hl   ; include zero term to copy 
2103			;	ld b,0 
2103			;	ld c,l 
2103			;	pop hl 
2103			;	ld de, execscratch 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX3" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ldir 
2103			; 
2103			; 
2103			;	ld hl, execscratch 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXP" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	call forthparse 
2103			;	ld hl, execscratch 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXx" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	call forthexec 
2103			; 
2103			;	jp .stkexec1 
2103			; 
2103			;	ret 
2103			 
2103			 
2103			.DUP: 
2103			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2103 17				db WORD_SYS_CORE+OPCODE_DUP             
2104 79 21			dw .ZDUP            
2106 04				db 3 + 1 
2107 .. 00			db "DUP",0              
210b				endm 
# End of macro CWHEAD
210b			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
210b			 
210b				if DEBUG_FORTH_WORDS_KEY 
210b					DMARK "DUP" 
210b f5				push af  
210c 3a 20 21			ld a, (.dmark)  
210f 32 65 ee			ld (debug_mark),a  
2112 3a 21 21			ld a, (.dmark+1)  
2115 32 66 ee			ld (debug_mark+1),a  
2118 3a 22 21			ld a, (.dmark+2)  
211b 32 67 ee			ld (debug_mark+2),a  
211e 18 03			jr .pastdmark  
2120 ..			.dmark: db "DUP"  
2123 f1			.pastdmark: pop af  
2124			endm  
# End of macro DMARK
2124					CALLMONITOR 
2124 cd 6f ee			call debug_vector  
2127				endm  
# End of macro CALLMONITOR
2127				endif 
2127			 
2127				FORTH_DSP 
2127 cd 5b 1d			call macro_forth_dsp 
212a				endm 
# End of macro FORTH_DSP
212a			 
212a 7e				ld a, (HL) 
212b fe 01			cp DS_TYPE_STR 
212d 20 25			jr nz, .dupinum 
212f			 
212f				; push another string 
212f			 
212f				FORTH_DSP_VALUEHL     		 
212f cd 95 1d			call macro_dsp_valuehl 
2132				endm 
# End of macro FORTH_DSP_VALUEHL
2132			 
2132			if DEBUG_FORTH_WORDS 
2132				DMARK "DUs" 
2132 f5				push af  
2133 3a 47 21			ld a, (.dmark)  
2136 32 65 ee			ld (debug_mark),a  
2139 3a 48 21			ld a, (.dmark+1)  
213c 32 66 ee			ld (debug_mark+1),a  
213f 3a 49 21			ld a, (.dmark+2)  
2142 32 67 ee			ld (debug_mark+2),a  
2145 18 03			jr .pastdmark  
2147 ..			.dmark: db "DUs"  
214a f1			.pastdmark: pop af  
214b			endm  
# End of macro DMARK
214b				CALLMONITOR 
214b cd 6f ee			call debug_vector  
214e				endm  
# End of macro CALLMONITOR
214e			endif 
214e cd fe 1b			call forth_push_str 
2151			 
2151				NEXTW 
2151 c3 80 1f			jp macro_next 
2154				endm 
# End of macro NEXTW
2154			 
2154			 
2154			.dupinum: 
2154				 
2154			 
2154			 
2154				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2154 cd 95 1d			call macro_dsp_valuehl 
2157				endm 
# End of macro FORTH_DSP_VALUEHL
2157			 
2157			; TODO add floating point number detection 
2157			 
2157			if DEBUG_FORTH_WORDS 
2157				DMARK "DUi" 
2157 f5				push af  
2158 3a 6c 21			ld a, (.dmark)  
215b 32 65 ee			ld (debug_mark),a  
215e 3a 6d 21			ld a, (.dmark+1)  
2161 32 66 ee			ld (debug_mark+1),a  
2164 3a 6e 21			ld a, (.dmark+2)  
2167 32 67 ee			ld (debug_mark+2),a  
216a 18 03			jr .pastdmark  
216c ..			.dmark: db "DUi"  
216f f1			.pastdmark: pop af  
2170			endm  
# End of macro DMARK
2170				CALLMONITOR 
2170 cd 6f ee			call debug_vector  
2173				endm  
# End of macro CALLMONITOR
2173			endif 
2173			 
2173 cd 90 1b			call forth_push_numhl 
2176				NEXTW 
2176 c3 80 1f			jp macro_next 
2179				endm 
# End of macro NEXTW
2179			.ZDUP: 
2179			CWHEAD .DMRK OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2179 99				db WORD_SYS_CORE+OPCODE_ZDUP             
217a b1 21			dw .DMRK            
217c 05				db 4 + 1 
217d .. 00			db "?DUP",0              
2182				endm 
# End of macro CWHEAD
2182			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
2182			 
2182				if DEBUG_FORTH_WORDS_KEY 
2182					DMARK "qDU" 
2182 f5				push af  
2183 3a 97 21			ld a, (.dmark)  
2186 32 65 ee			ld (debug_mark),a  
2189 3a 98 21			ld a, (.dmark+1)  
218c 32 66 ee			ld (debug_mark+1),a  
218f 3a 99 21			ld a, (.dmark+2)  
2192 32 67 ee			ld (debug_mark+2),a  
2195 18 03			jr .pastdmark  
2197 ..			.dmark: db "qDU"  
219a f1			.pastdmark: pop af  
219b			endm  
# End of macro DMARK
219b					CALLMONITOR 
219b cd 6f ee			call debug_vector  
219e				endm  
# End of macro CALLMONITOR
219e				endif 
219e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
219e cd 95 1d			call macro_dsp_valuehl 
21a1				endm 
# End of macro FORTH_DSP_VALUEHL
21a1			 
21a1 e5				push hl 
21a2			 
21a2				; is it a zero? 
21a2			 
21a2 3e 00			ld a, 0 
21a4 84				add h 
21a5 85				add l 
21a6			 
21a6 e1				pop hl 
21a7			 
21a7 fe 00			cp 0 
21a9 28 03			jr z, .dup2orig 
21ab			 
21ab			 
21ab cd 90 1b			call forth_push_numhl 
21ae			 
21ae			 
21ae			; TODO add floating point number detection 
21ae			 
21ae			.dup2orig: 
21ae			 
21ae				NEXTW 
21ae c3 80 1f			jp macro_next 
21b1				endm 
# End of macro NEXTW
21b1			.DMRK: 
21b1			CWHEAD .LSHIFT OPCODE_ZDUP "DMARK" 5 WORD_FLAG_CODE 
21b1 99				db WORD_SYS_CORE+OPCODE_ZDUP             
21b2 ee 21			dw .LSHIFT            
21b4 06				db 5 + 1 
21b5 .. 00			db "DMARK",0              
21bb				endm 
# End of macro CWHEAD
21bb			; | DMARK ( s --  )  Set the debug marker id to first three chars of s | DONE 
21bb			; | | Most useful for tracing your code for errors as you can set various markers to display when MONITOR is called 
21bb				if DEBUG_FORTH_WORDS_KEY 
21bb					DMARK "DMK" 
21bb f5				push af  
21bc 3a d0 21			ld a, (.dmark)  
21bf 32 65 ee			ld (debug_mark),a  
21c2 3a d1 21			ld a, (.dmark+1)  
21c5 32 66 ee			ld (debug_mark+1),a  
21c8 3a d2 21			ld a, (.dmark+2)  
21cb 32 67 ee			ld (debug_mark+2),a  
21ce 18 03			jr .pastdmark  
21d0 ..			.dmark: db "DMK"  
21d3 f1			.pastdmark: pop af  
21d4			endm  
# End of macro DMARK
21d4					CALLMONITOR 
21d4 cd 6f ee			call debug_vector  
21d7				endm  
# End of macro CALLMONITOR
21d7				endif 
21d7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
21d7 cd 95 1d			call macro_dsp_valuehl 
21da				endm 
# End of macro FORTH_DSP_VALUEHL
21da			 
21da 7e				ld a, (hl) 
21db 32 65 ee			ld (debug_mark),a 
21de 23				inc hl 
21df 7e				ld a, (hl) 
21e0 32 66 ee			ld (debug_mark+1),a 
21e3 23				inc hl 
21e4 7e				ld a, (hl) 
21e5 32 67 ee			ld (debug_mark+2),a 
21e8			 
21e8			 
21e8				FORTH_DSP_POP 
21e8 cd 4d 1e			call macro_forth_dsp_pop 
21eb				endm 
# End of macro FORTH_DSP_POP
21eb				NEXTW 
21eb c3 80 1f			jp macro_next 
21ee				endm 
# End of macro NEXTW
21ee			.LSHIFT: 
21ee			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
21ee 99				db WORD_SYS_CORE+OPCODE_ZDUP             
21ef 22 22			dw .RSHIFT            
21f1 07				db 6 + 1 
21f2 .. 00			db "LSHIFT",0              
21f9				endm 
# End of macro CWHEAD
21f9			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
21f9				if DEBUG_FORTH_WORDS_KEY 
21f9					DMARK "LSH" 
21f9 f5				push af  
21fa 3a 0e 22			ld a, (.dmark)  
21fd 32 65 ee			ld (debug_mark),a  
2200 3a 0f 22			ld a, (.dmark+1)  
2203 32 66 ee			ld (debug_mark+1),a  
2206 3a 10 22			ld a, (.dmark+2)  
2209 32 67 ee			ld (debug_mark+2),a  
220c 18 03			jr .pastdmark  
220e ..			.dmark: db "LSH"  
2211 f1			.pastdmark: pop af  
2212			endm  
# End of macro DMARK
2212					CALLMONITOR 
2212 cd 6f ee			call debug_vector  
2215				endm  
# End of macro CALLMONITOR
2215				endif 
2215				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2215 cd 95 1d			call macro_dsp_valuehl 
2218				endm 
# End of macro FORTH_DSP_VALUEHL
2218				FORTH_DSP_POP 
2218 cd 4d 1e			call macro_forth_dsp_pop 
221b				endm 
# End of macro FORTH_DSP_POP
221b			 
221b 29				add hl, hl 
221c cd 90 1b			call forth_push_numhl 
221f				NEXTW 
221f c3 80 1f			jp macro_next 
2222				endm 
# End of macro NEXTW
2222			.RSHIFT: 
2222			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
2222 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2223 59 22			dw .SWAP            
2225 07				db 6 + 1 
2226 .. 00			db "RSHIFT",0              
222d				endm 
# End of macro CWHEAD
222d			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
222d				if DEBUG_FORTH_WORDS_KEY 
222d					DMARK "RSH" 
222d f5				push af  
222e 3a 42 22			ld a, (.dmark)  
2231 32 65 ee			ld (debug_mark),a  
2234 3a 43 22			ld a, (.dmark+1)  
2237 32 66 ee			ld (debug_mark+1),a  
223a 3a 44 22			ld a, (.dmark+2)  
223d 32 67 ee			ld (debug_mark+2),a  
2240 18 03			jr .pastdmark  
2242 ..			.dmark: db "RSH"  
2245 f1			.pastdmark: pop af  
2246			endm  
# End of macro DMARK
2246					CALLMONITOR 
2246 cd 6f ee			call debug_vector  
2249				endm  
# End of macro CALLMONITOR
2249				endif 
2249				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2249 cd 95 1d			call macro_dsp_valuehl 
224c				endm 
# End of macro FORTH_DSP_VALUEHL
224c				FORTH_DSP_POP 
224c cd 4d 1e			call macro_forth_dsp_pop 
224f				endm 
# End of macro FORTH_DSP_POP
224f cb 3c			srl h 
2251 cb 1d			rr l 
2253 cd 90 1b			call forth_push_numhl 
2256				NEXTW 
2256 c3 80 1f			jp macro_next 
2259				endm 
# End of macro NEXTW
2259			.SWAP: 
2259			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
2259 18				db WORD_SYS_CORE+OPCODE_SWAP             
225a ad 22			dw .COLN            
225c 05				db 4 + 1 
225d .. 00			db "SWAP",0              
2262				endm 
# End of macro CWHEAD
2262			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2262				if DEBUG_FORTH_WORDS_KEY 
2262					DMARK "SWP" 
2262 f5				push af  
2263 3a 77 22			ld a, (.dmark)  
2266 32 65 ee			ld (debug_mark),a  
2269 3a 78 22			ld a, (.dmark+1)  
226c 32 66 ee			ld (debug_mark+1),a  
226f 3a 79 22			ld a, (.dmark+2)  
2272 32 67 ee			ld (debug_mark+2),a  
2275 18 03			jr .pastdmark  
2277 ..			.dmark: db "SWP"  
227a f1			.pastdmark: pop af  
227b			endm  
# End of macro DMARK
227b					CALLMONITOR 
227b cd 6f ee			call debug_vector  
227e				endm  
# End of macro CALLMONITOR
227e				endif 
227e			 
227e			; DONE Use os stack swap memory 
227e			 
227e				FORTH_DSP_PTR 0     ; TOS 
227e 2a e8 e9			ld hl,(cli_data_sp) 
2281 11 00 00			ld de, 0 * 3 
2284 ed 52			sbc hl, de 
2286				endm 
# End of macro FORTH_DSP_PTR
2286 cd cc 1e			call hltostack1 
2289			  
2289				FORTH_DSP_PTR 1     ; TOS 
2289 2a e8 e9			ld hl,(cli_data_sp) 
228c 11 03 00			ld de, 1 * 3 
228f ed 52			sbc hl, de 
2291				endm 
# End of macro FORTH_DSP_PTR
2291 cd d2 1e			call hltostack2 
2294			 
2294				FORTH_DSP_PTR 0     ; TOS 
2294 2a e8 e9			ld hl,(cli_data_sp) 
2297 11 00 00			ld de, 0 * 3 
229a ed 52			sbc hl, de 
229c				endm 
# End of macro FORTH_DSP_PTR
229c cd ea 1e			call hlfromstack2 
229f			 
229f				FORTH_DSP_PTR 1     ; TOS 
229f 2a e8 e9			ld hl,(cli_data_sp) 
22a2 11 03 00			ld de, 1 * 3 
22a5 ed 52			sbc hl, de 
22a7				endm 
# End of macro FORTH_DSP_PTR
22a7 cd e4 1e			call hlfromstack1 
22aa			;	FORTH_DSP_VALUEHL 
22aa			;	push hl     ; w2 
22aa			; 
22aa			;	FORTH_DSP_POP 
22aa			; 
22aa			;	FORTH_DSP_VALUEHL 
22aa			; 
22aa			;	FORTH_DSP_POP 
22aa			; 
22aa			;	pop de     ; w2	, hl = w1 
22aa			; 
22aa			;	ex de, hl 
22aa			;	push de 
22aa			; 
22aa			;	call forth_push_numhl 
22aa			; 
22aa			;	pop hl 
22aa			; 
22aa			;	call forth_push_numhl 
22aa				 
22aa			 
22aa				NEXTW 
22aa c3 80 1f			jp macro_next 
22ad				endm 
# End of macro NEXTW
22ad			.COLN: 
22ad			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
22ad 19				db WORD_SYS_CORE+OPCODE_COLN             
22ae 39 24			dw .SCOLN            
22b0 02				db 1 + 1 
22b1 .. 00			db ":",0              
22b3				endm 
# End of macro CWHEAD
22b3			; | : ( -- )         Create new word | DONE 
22b3			 
22b3				if DEBUG_FORTH_WORDS_KEY 
22b3					DMARK "CLN" 
22b3 f5				push af  
22b4 3a c8 22			ld a, (.dmark)  
22b7 32 65 ee			ld (debug_mark),a  
22ba 3a c9 22			ld a, (.dmark+1)  
22bd 32 66 ee			ld (debug_mark+1),a  
22c0 3a ca 22			ld a, (.dmark+2)  
22c3 32 67 ee			ld (debug_mark+2),a  
22c6 18 03			jr .pastdmark  
22c8 ..			.dmark: db "CLN"  
22cb f1			.pastdmark: pop af  
22cc			endm  
# End of macro DMARK
22cc					CALLMONITOR 
22cc cd 6f ee			call debug_vector  
22cf				endm  
# End of macro CALLMONITOR
22cf				endif 
22cf			STACKFRAME OFF $8efe $989f 
22cf				if DEBUG_STACK_IMB 
22cf					if OFF 
22cf						exx 
22cf						ld de, $8efe 
22cf						ld a, d 
22cf						ld hl, curframe 
22cf						call hexout 
22cf						ld a, e 
22cf						ld hl, curframe+2 
22cf						call hexout 
22cf						ld hl, $8efe 
22cf						push hl 
22cf						ld hl, $989f 
22cf						push hl 
22cf						exx 
22cf					endif 
22cf				endif 
22cf			endm 
# End of macro STACKFRAME
22cf			; get parser buffer length  of new word 
22cf			 
22cf			 
22cf			 
22cf				; move tok past this to start of name defintition 
22cf				; TODO get word to define 
22cf				; TODO Move past word token 
22cf				; TODO get length of string up to the ';' 
22cf			 
22cf 2a bc e5		ld hl, (os_tok_ptr) 
22d2 23			inc hl 
22d3 23			inc hl 
22d4			 
22d4 3e 3b		ld a, ';' 
22d6 cd 66 11		call strlent 
22d9			 
22d9 7d			ld a,l 
22da 32 ab e2		ld (os_new_parse_len), a 
22dd			 
22dd			 
22dd			if DEBUG_FORTH_UWORD 
22dd ed 5b bc e5	ld de, (os_tok_ptr) 
22e1					DMARK ":01" 
22e1 f5				push af  
22e2 3a f6 22			ld a, (.dmark)  
22e5 32 65 ee			ld (debug_mark),a  
22e8 3a f7 22			ld a, (.dmark+1)  
22eb 32 66 ee			ld (debug_mark+1),a  
22ee 3a f8 22			ld a, (.dmark+2)  
22f1 32 67 ee			ld (debug_mark+2),a  
22f4 18 03			jr .pastdmark  
22f6 ..			.dmark: db ":01"  
22f9 f1			.pastdmark: pop af  
22fa			endm  
# End of macro DMARK
22fa			CALLMONITOR 
22fa cd 6f ee			call debug_vector  
22fd				endm  
# End of macro CALLMONITOR
22fd			endif 
22fd			 
22fd			; 
22fd			;  new word memory layout: 
22fd			;  
22fd			;    : adg 6666 ;  
22fd			; 
22fd			;    db   1     ; user defined word  
22fd 23			inc hl    
22fe			;    dw   sysdict 
22fe 23			inc hl 
22ff 23			inc hl 
2300			;    db <word len>+1 (for null) 
2300 23			inc hl 
2301			;    db .... <word> 
2301			; 
2301			 
2301 23			inc hl    ; some extras for the word preamble before the above 
2302 23			inc hl 
2303 23			inc hl 
2304 23			inc hl 
2305 23			inc hl 
2306 23			inc hl 
2307 23			inc hl  
2308 23			inc hl 
2309 23			inc hl 
230a 23			inc hl 
230b 23			inc hl 
230c 23			inc hl 
230d 23			inc hl 
230e 23			inc hl     ; TODO how many do we really need?     maybe only 6 
230f			;       exec word buffer 
230f			;	<ptr word>   
230f 23			inc hl 
2310 23			inc hl 
2311			;       <word list><null term> 7F final term 
2311			 
2311			 
2311			if DEBUG_FORTH_UWORD 
2311					DMARK ":02" 
2311 f5				push af  
2312 3a 26 23			ld a, (.dmark)  
2315 32 65 ee			ld (debug_mark),a  
2318 3a 27 23			ld a, (.dmark+1)  
231b 32 66 ee			ld (debug_mark+1),a  
231e 3a 28 23			ld a, (.dmark+2)  
2321 32 67 ee			ld (debug_mark+2),a  
2324 18 03			jr .pastdmark  
2326 ..			.dmark: db ":02"  
2329 f1			.pastdmark: pop af  
232a			endm  
# End of macro DMARK
232a			CALLMONITOR 
232a cd 6f ee			call debug_vector  
232d				endm  
# End of macro CALLMONITOR
232d			endif 
232d			 
232d			 
232d				; malloc the size 
232d			 
232d cd d0 11			call malloc 
2330 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
2333			 
2333			;    db   1     ; user defined word  
2333 3e 01			ld a, WORD_SYS_UWORD  
2335 77				ld (hl), a 
2336			 
2336 23			inc hl    
2337			;    dw   sysdict 
2337 11 c4 20		ld de, sysdict       ; continue on with the scan to the system dict 
233a 73			ld (hl), e 
233b 23			inc hl 
233c 72			ld (hl), d 
233d 23			inc hl 
233e			 
233e			 
233e			;    Setup dict word 
233e			 
233e 23			inc hl 
233f 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
2342			 
2342			; 1. get length of dict word 
2342			 
2342			 
2342 2a bc e5		ld hl, (os_tok_ptr) 
2345 23			inc hl 
2346 23			inc hl    ; position to start of dict word 
2347 3e 00		ld a, 0 
2349 cd 66 11		call strlent 
234c			 
234c			 
234c 23			inc hl    ; to include null??? 
234d			 
234d			; write length of dict word 
234d			 
234d ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2351 1b			dec de 
2352 eb			ex de, hl 
2353 73			ld (hl), e 
2354 eb			ex de, hl 
2355			 
2355			 
2355			 
2355			; copy  
2355 4d			ld c, l 
2356 06 00		ld b, 0 
2358 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
235c 2a bc e5		ld hl, (os_tok_ptr) 
235f 23			inc hl 
2360 23			inc hl    ; position to start of dict word 
2361			 
2361			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2361			 
2361			; TODO need to convert word to upper case 
2361			 
2361			ucasetok:	 
2361 7e			ld a,(hl) 
2362 cd 52 11		call toUpper 
2365 77			ld (hl),a 
2366 ed a0		ldi 
2368 f2 61 23		jp p, ucasetok 
236b			 
236b			 
236b			 
236b			; de now points to start of where the word body code should be placed 
236b ed 53 a7 e2	ld (os_new_work_ptr), de 
236f			; hl now points to the words to throw at forthexec which needs to be copied 
236f 22 a5 e2		ld (os_new_src_ptr), hl 
2372			 
2372			; TODO add 'call to forthexec' 
2372			 
2372			if DEBUG_FORTH_UWORD 
2372 c5			push bc 
2373 ed 4b ad e2	ld bc, (os_new_malloc) 
2377					DMARK ":0x" 
2377 f5				push af  
2378 3a 8c 23			ld a, (.dmark)  
237b 32 65 ee			ld (debug_mark),a  
237e 3a 8d 23			ld a, (.dmark+1)  
2381 32 66 ee			ld (debug_mark+1),a  
2384 3a 8e 23			ld a, (.dmark+2)  
2387 32 67 ee			ld (debug_mark+2),a  
238a 18 03			jr .pastdmark  
238c ..			.dmark: db ":0x"  
238f f1			.pastdmark: pop af  
2390			endm  
# End of macro DMARK
2390			CALLMONITOR 
2390 cd 6f ee			call debug_vector  
2393				endm  
# End of macro CALLMONITOR
2393 c1			pop bc 
2394			endif 
2394			 
2394			 
2394			; create word preamble which should be: 
2394			 
2394			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2394			 
2394			;    ld hl, <word code> 
2394			;    jp user_exec 
2394			;    <word code bytes> 
2394			 
2394			 
2394			;	inc de     ; TODO ??? or are we already past the word's null 
2394 eb			ex de, hl 
2395			 
2395 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
2397			 
2397 23			inc hl 
2398 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
239b 23			inc hl 
239c			 
239c 23			inc hl 
239d 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
239f			 
239f 01 a3 50		ld bc, user_exec 
23a2 23			inc hl 
23a3 71			ld (hl), c     ; poke address of user_exec 
23a4 23			inc hl 
23a5 70			ld (hl), b     
23a6			; 
23a6			;	inc hl 
23a6			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
23a6			; 
23a6			; 
23a6			;	ld bc, macro_forth_rsp_next 
23a6			;	inc hl 
23a6			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
23a6			;	inc hl 
23a6			;	ld (hl), b     
23a6			; 
23a6			;	inc hl 
23a6			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
23a6			; 
23a6			; 
23a6			;	inc hl 
23a6			;	ld bc, forthexec 
23a6			;	ld (hl), c     ; poke address of forthexec 
23a6			;	inc hl 
23a6			;	ld (hl), b      
23a6			; 
23a6			;	inc hl 
23a6			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
23a6			; 
23a6			;	ld bc, user_dict_next 
23a6			;	inc hl 
23a6			;	ld (hl), c     ; poke address of forthexec 
23a6			;	inc hl 
23a6			;	ld (hl), b      
23a6			 
23a6			; hl is now where we need to copy the word byte data to save this 
23a6			 
23a6 23			inc hl 
23a7 22 a3 e2		ld (os_new_exec), hl 
23aa			 
23aa			; copy definition 
23aa			 
23aa eb			ex de, hl 
23ab			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
23ab			;	inc de    ; skip the PC for this parse 
23ab 3a ab e2		ld a, (os_new_parse_len) 
23ae 4f			ld c, a 
23af 06 00		ld b, 0 
23b1 ed b0		ldir		 ; copy defintion 
23b3			 
23b3			 
23b3			; poke the address of where the new word bytes live for forthexec 
23b3			 
23b3 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
23b6			 
23b6 ed 5b a3 e2	ld de, (os_new_exec)      
23ba			 
23ba 73			ld (hl), e 
23bb 23			inc hl 
23bc 72			ld (hl), d 
23bd			 
23bd				; TODO copy last user dict word next link to this word 
23bd				; TODO update last user dict word to point to this word 
23bd			; 
23bd			; hl f923 de 812a ; bc 811a 
23bd			 
23bd			if DEBUG_FORTH_UWORD 
23bd c5			push bc 
23be ed 4b ad e2	ld bc, (os_new_malloc) 
23c2					DMARK ":0A" 
23c2 f5				push af  
23c3 3a d7 23			ld a, (.dmark)  
23c6 32 65 ee			ld (debug_mark),a  
23c9 3a d8 23			ld a, (.dmark+1)  
23cc 32 66 ee			ld (debug_mark+1),a  
23cf 3a d9 23			ld a, (.dmark+2)  
23d2 32 67 ee			ld (debug_mark+2),a  
23d5 18 03			jr .pastdmark  
23d7 ..			.dmark: db ":0A"  
23da f1			.pastdmark: pop af  
23db			endm  
# End of macro DMARK
23db			CALLMONITOR 
23db cd 6f ee			call debug_vector  
23de				endm  
# End of macro CALLMONITOR
23de c1			pop bc 
23df			endif 
23df			if DEBUG_FORTH_UWORD 
23df c5			push bc 
23e0 ed 4b ad e2	ld bc, (os_new_malloc) 
23e4 03			inc bc 
23e5 03			inc bc 
23e6 03			inc bc 
23e7 03			inc bc 
23e8 03			inc bc 
23e9 03			inc bc 
23ea 03			inc bc 
23eb 03			inc bc 
23ec			 
23ec					DMARK ":0B" 
23ec f5				push af  
23ed 3a 01 24			ld a, (.dmark)  
23f0 32 65 ee			ld (debug_mark),a  
23f3 3a 02 24			ld a, (.dmark+1)  
23f6 32 66 ee			ld (debug_mark+1),a  
23f9 3a 03 24			ld a, (.dmark+2)  
23fc 32 67 ee			ld (debug_mark+2),a  
23ff 18 03			jr .pastdmark  
2401 ..			.dmark: db ":0B"  
2404 f1			.pastdmark: pop af  
2405			endm  
# End of macro DMARK
2405			CALLMONITOR 
2405 cd 6f ee			call debug_vector  
2408				endm  
# End of macro CALLMONITOR
2408 c1			pop bc 
2409			endif 
2409			 
2409			; update word dict linked list for new word 
2409			 
2409			 
2409 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
240c 23			inc hl     ; move to next work linked list ptr 
240d			 
240d ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
2411 73			ld (hl), e 
2412 23			inc hl 
2413 72			ld (hl), d 
2414			 
2414			if DEBUG_FORTH_UWORD 
2414 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2418			endif 
2418			 
2418 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
241c			 
241c			 
241c			if DEBUG_FORTH_UWORD 
241c					DMARK ":0+" 
241c f5				push af  
241d 3a 31 24			ld a, (.dmark)  
2420 32 65 ee			ld (debug_mark),a  
2423 3a 32 24			ld a, (.dmark+1)  
2426 32 66 ee			ld (debug_mark+1),a  
2429 3a 33 24			ld a, (.dmark+2)  
242c 32 67 ee			ld (debug_mark+2),a  
242f 18 03			jr .pastdmark  
2431 ..			.dmark: db ":0+"  
2434 f1			.pastdmark: pop af  
2435			endm  
# End of macro DMARK
2435			CALLMONITOR 
2435 cd 6f ee			call debug_vector  
2438				endm  
# End of macro CALLMONITOR
2438			endif 
2438			 
2438			STACKFRAMECHK OFF $8efe $989f 
2438				if DEBUG_STACK_IMB 
2438					if OFF 
2438						exx 
2438						ld hl, $989f 
2438						pop de   ; $989f 
2438						call cmp16 
2438						jr nz, .spnosame 
2438						ld hl, $8efe 
2438						pop de   ; $8efe 
2438						call cmp16 
2438						jr z, .spfrsame 
2438						.spnosame: call showsperror 
2438						.spfrsame: nop 
2438						exx 
2438					endif 
2438				endif 
2438			endm 
# End of macro STACKFRAMECHK
2438			 
2438 c9			ret    ; dont process any remaining parser tokens as they form new word 
2439			 
2439			 
2439			 
2439			 
2439			;		NEXT 
2439			.SCOLN: 
2439			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
2439 06			db OPCODE_SCOLN 
243a 85 24		dw .DROP 
243c 02			db 2 
243d .. 00		db ";",0           
243f			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
243f				if DEBUG_FORTH_WORDS_KEY 
243f					DMARK "SCN" 
243f f5				push af  
2440 3a 54 24			ld a, (.dmark)  
2443 32 65 ee			ld (debug_mark),a  
2446 3a 55 24			ld a, (.dmark+1)  
2449 32 66 ee			ld (debug_mark+1),a  
244c 3a 56 24			ld a, (.dmark+2)  
244f 32 67 ee			ld (debug_mark+2),a  
2452 18 03			jr .pastdmark  
2454 ..			.dmark: db "SCN"  
2457 f1			.pastdmark: pop af  
2458			endm  
# End of macro DMARK
2458					CALLMONITOR 
2458 cd 6f ee			call debug_vector  
245b				endm  
# End of macro CALLMONITOR
245b				endif 
245b				FORTH_RSP_TOS 
245b cd 4e 1b			call macro_forth_rsp_tos 
245e				endm 
# End of macro FORTH_RSP_TOS
245e e5				push hl 
245f				FORTH_RSP_POP 
245f cd 58 1b			call macro_forth_rsp_pop 
2462				endm 
# End of macro FORTH_RSP_POP
2462 e1				pop hl 
2463			;		ex de,hl 
2463 22 bc e5			ld (os_tok_ptr),hl 
2466			 
2466			if DEBUG_FORTH_UWORD 
2466					DMARK "SCL" 
2466 f5				push af  
2467 3a 7b 24			ld a, (.dmark)  
246a 32 65 ee			ld (debug_mark),a  
246d 3a 7c 24			ld a, (.dmark+1)  
2470 32 66 ee			ld (debug_mark+1),a  
2473 3a 7d 24			ld a, (.dmark+2)  
2476 32 67 ee			ld (debug_mark+2),a  
2479 18 03			jr .pastdmark  
247b ..			.dmark: db "SCL"  
247e f1			.pastdmark: pop af  
247f			endm  
# End of macro DMARK
247f			CALLMONITOR 
247f cd 6f ee			call debug_vector  
2482				endm  
# End of macro CALLMONITOR
2482			endif 
2482				NEXTW 
2482 c3 80 1f			jp macro_next 
2485				endm 
# End of macro NEXTW
2485			 
2485			.DROP: 
2485			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2485 1b				db WORD_SYS_CORE+OPCODE_DROP             
2486 b0 24			dw .DUP2            
2488 05				db 4 + 1 
2489 .. 00			db "DROP",0              
248e				endm 
# End of macro CWHEAD
248e			; | DROP ( w -- )   drop the TOS item   | DONE 
248e				if DEBUG_FORTH_WORDS_KEY 
248e					DMARK "DRP" 
248e f5				push af  
248f 3a a3 24			ld a, (.dmark)  
2492 32 65 ee			ld (debug_mark),a  
2495 3a a4 24			ld a, (.dmark+1)  
2498 32 66 ee			ld (debug_mark+1),a  
249b 3a a5 24			ld a, (.dmark+2)  
249e 32 67 ee			ld (debug_mark+2),a  
24a1 18 03			jr .pastdmark  
24a3 ..			.dmark: db "DRP"  
24a6 f1			.pastdmark: pop af  
24a7			endm  
# End of macro DMARK
24a7					CALLMONITOR 
24a7 cd 6f ee			call debug_vector  
24aa				endm  
# End of macro CALLMONITOR
24aa				endif 
24aa				FORTH_DSP_POP 
24aa cd 4d 1e			call macro_forth_dsp_pop 
24ad				endm 
# End of macro FORTH_DSP_POP
24ad				NEXTW 
24ad c3 80 1f			jp macro_next 
24b0				endm 
# End of macro NEXTW
24b0			.DUP2: 
24b0			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
24b0 1c				db WORD_SYS_CORE+OPCODE_DUP2             
24b1 f5 24			dw .DROP2            
24b3 05				db 4 + 1 
24b4 .. 00			db "2DUP",0              
24b9				endm 
# End of macro CWHEAD
24b9			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
24b9				if DEBUG_FORTH_WORDS_KEY 
24b9					DMARK "2DU" 
24b9 f5				push af  
24ba 3a ce 24			ld a, (.dmark)  
24bd 32 65 ee			ld (debug_mark),a  
24c0 3a cf 24			ld a, (.dmark+1)  
24c3 32 66 ee			ld (debug_mark+1),a  
24c6 3a d0 24			ld a, (.dmark+2)  
24c9 32 67 ee			ld (debug_mark+2),a  
24cc 18 03			jr .pastdmark  
24ce ..			.dmark: db "2DU"  
24d1 f1			.pastdmark: pop af  
24d2			endm  
# End of macro DMARK
24d2					CALLMONITOR 
24d2 cd 6f ee			call debug_vector  
24d5				endm  
# End of macro CALLMONITOR
24d5				endif 
24d5				FORTH_DSP_VALUEHL 
24d5 cd 95 1d			call macro_dsp_valuehl 
24d8				endm 
# End of macro FORTH_DSP_VALUEHL
24d8 e5				push hl      ; 2 
24d9			 
24d9				FORTH_DSP_POP 
24d9 cd 4d 1e			call macro_forth_dsp_pop 
24dc				endm 
# End of macro FORTH_DSP_POP
24dc				 
24dc				FORTH_DSP_VALUEHL 
24dc cd 95 1d			call macro_dsp_valuehl 
24df				endm 
# End of macro FORTH_DSP_VALUEHL
24df			;		push hl      ; 1 
24df			 
24df				FORTH_DSP_POP 
24df cd 4d 1e			call macro_forth_dsp_pop 
24e2				endm 
# End of macro FORTH_DSP_POP
24e2			 
24e2			;		pop hl       ; 1 
24e2 d1				pop de       ; 2 
24e3			 
24e3 cd 90 1b			call forth_push_numhl 
24e6 eb				ex de, hl 
24e7 cd 90 1b			call forth_push_numhl 
24ea			 
24ea				 
24ea eb				ex de, hl 
24eb			 
24eb cd 90 1b			call forth_push_numhl 
24ee eb				ex de, hl 
24ef cd 90 1b			call forth_push_numhl 
24f2			 
24f2			 
24f2				NEXTW 
24f2 c3 80 1f			jp macro_next 
24f5				endm 
# End of macro NEXTW
24f5			.DROP2: 
24f5			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
24f5 1d				db WORD_SYS_CORE+OPCODE_DROP2             
24f6 24 25			dw .PICK            
24f8 06				db 5 + 1 
24f9 .. 00			db "2DROP",0              
24ff				endm 
# End of macro CWHEAD
24ff			; | 2DROP ( w w -- )    Double drop | DONE 
24ff				if DEBUG_FORTH_WORDS_KEY 
24ff					DMARK "2DR" 
24ff f5				push af  
2500 3a 14 25			ld a, (.dmark)  
2503 32 65 ee			ld (debug_mark),a  
2506 3a 15 25			ld a, (.dmark+1)  
2509 32 66 ee			ld (debug_mark+1),a  
250c 3a 16 25			ld a, (.dmark+2)  
250f 32 67 ee			ld (debug_mark+2),a  
2512 18 03			jr .pastdmark  
2514 ..			.dmark: db "2DR"  
2517 f1			.pastdmark: pop af  
2518			endm  
# End of macro DMARK
2518					CALLMONITOR 
2518 cd 6f ee			call debug_vector  
251b				endm  
# End of macro CALLMONITOR
251b				endif 
251b				FORTH_DSP_POP 
251b cd 4d 1e			call macro_forth_dsp_pop 
251e				endm 
# End of macro FORTH_DSP_POP
251e				FORTH_DSP_POP 
251e cd 4d 1e			call macro_forth_dsp_pop 
2521				endm 
# End of macro FORTH_DSP_POP
2521				NEXTW 
2521 c3 80 1f			jp macro_next 
2524				endm 
# End of macro NEXTW
2524			.PICK: 
2524			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
2524 77				db WORD_SYS_CORE+99             
2525 be 25			dw .SWAP2            
2527 05				db 4 + 1 
2528 .. 00			db "PICK",0              
252d				endm 
# End of macro CWHEAD
252d			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | DONE 
252d			; | | >[!NOTE] 
252d			; | | > If the chosen item is a string the pointer is pushed to TOS. The string is not safely duplicated. 
252d				if DEBUG_FORTH_WORDS_KEY 
252d					DMARK "PIK" 
252d f5				push af  
252e 3a 42 25			ld a, (.dmark)  
2531 32 65 ee			ld (debug_mark),a  
2534 3a 43 25			ld a, (.dmark+1)  
2537 32 66 ee			ld (debug_mark+1),a  
253a 3a 44 25			ld a, (.dmark+2)  
253d 32 67 ee			ld (debug_mark+2),a  
2540 18 03			jr .pastdmark  
2542 ..			.dmark: db "PIK"  
2545 f1			.pastdmark: pop af  
2546			endm  
# End of macro DMARK
2546					CALLMONITOR 
2546 cd 6f ee			call debug_vector  
2549				endm  
# End of macro CALLMONITOR
2549				endif 
2549			 
2549				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2549 cd 95 1d			call macro_dsp_valuehl 
254c				endm 
# End of macro FORTH_DSP_VALUEHL
254c				 
254c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
254c cd 4d 1e			call macro_forth_dsp_pop 
254f				endm 
# End of macro FORTH_DSP_POP
254f			 
254f				; init from TOS 
254f e5				push hl 
2550				FORTH_DSP 
2550 cd 5b 1d			call macro_forth_dsp 
2553				endm 
# End of macro FORTH_DSP
2553			;	ld hl, cli_data_sp 
2553				if DEBUG_FORTH_WORDS 
2553					DMARK "PK1" 
2553 f5				push af  
2554 3a 68 25			ld a, (.dmark)  
2557 32 65 ee			ld (debug_mark),a  
255a 3a 69 25			ld a, (.dmark+1)  
255d 32 66 ee			ld (debug_mark+1),a  
2560 3a 6a 25			ld a, (.dmark+2)  
2563 32 67 ee			ld (debug_mark+2),a  
2566 18 03			jr .pastdmark  
2568 ..			.dmark: db "PK1"  
256b f1			.pastdmark: pop af  
256c			endm  
# End of macro DMARK
256c					CALLMONITOR 
256c cd 6f ee			call debug_vector  
256f				endm  
# End of macro CALLMONITOR
256f				endif 
256f c1				pop bc 
2570 41				ld b,c 
2571 3e 00			ld a, 0 
2573 b8				cp b 
2574 28 21			jr z, .pdone	 
2576			.pkl: 
2576 2b				dec hl 
2577 2b				dec hl 
2578 2b				dec hl 
2579			 
2579				if DEBUG_FORTH_WORDS 
2579					DMARK "PKl" 
2579 f5				push af  
257a 3a 8e 25			ld a, (.dmark)  
257d 32 65 ee			ld (debug_mark),a  
2580 3a 8f 25			ld a, (.dmark+1)  
2583 32 66 ee			ld (debug_mark+1),a  
2586 3a 90 25			ld a, (.dmark+2)  
2589 32 67 ee			ld (debug_mark+2),a  
258c 18 03			jr .pastdmark  
258e ..			.dmark: db "PKl"  
2591 f1			.pastdmark: pop af  
2592			endm  
# End of macro DMARK
2592					CALLMONITOR 
2592 cd 6f ee			call debug_vector  
2595				endm  
# End of macro CALLMONITOR
2595				endif 
2595 10 df			djnz .pkl 
2597			.pdone: 
2597				 
2597				; TODO do type check with correct push 
2597			 
2597 23				inc hl 
2598				;call loadwordinhl 
2598 5e				ld e, (hl) 
2599 23				inc hl 
259a 56				ld d, (hl) 
259b eb				ex de,hl 
259c				if DEBUG_FORTH_WORDS 
259c					DMARK "PKp" 
259c f5				push af  
259d 3a b1 25			ld a, (.dmark)  
25a0 32 65 ee			ld (debug_mark),a  
25a3 3a b2 25			ld a, (.dmark+1)  
25a6 32 66 ee			ld (debug_mark+1),a  
25a9 3a b3 25			ld a, (.dmark+2)  
25ac 32 67 ee			ld (debug_mark+2),a  
25af 18 03			jr .pastdmark  
25b1 ..			.dmark: db "PKp"  
25b4 f1			.pastdmark: pop af  
25b5			endm  
# End of macro DMARK
25b5					CALLMONITOR 
25b5 cd 6f ee			call debug_vector  
25b8				endm  
# End of macro CALLMONITOR
25b8				endif 
25b8 cd 90 1b			call forth_push_numhl 
25bb			 
25bb				NEXTW 
25bb c3 80 1f			jp macro_next 
25be				endm 
# End of macro NEXTW
25be			.SWAP2: 
25be			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
25be 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
25bf 3f 26			dw .AT            
25c1 06				db 5 + 1 
25c2 .. 00			db "2SWAP",0              
25c8				endm 
# End of macro CWHEAD
25c8			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
25c8				if DEBUG_FORTH_WORDS_KEY 
25c8					DMARK "2SW" 
25c8 f5				push af  
25c9 3a dd 25			ld a, (.dmark)  
25cc 32 65 ee			ld (debug_mark),a  
25cf 3a de 25			ld a, (.dmark+1)  
25d2 32 66 ee			ld (debug_mark+1),a  
25d5 3a df 25			ld a, (.dmark+2)  
25d8 32 67 ee			ld (debug_mark+2),a  
25db 18 03			jr .pastdmark  
25dd ..			.dmark: db "2SW"  
25e0 f1			.pastdmark: pop af  
25e1			endm  
# End of macro DMARK
25e1					CALLMONITOR 
25e1 cd 6f ee			call debug_vector  
25e4				endm  
# End of macro CALLMONITOR
25e4				endif 
25e4			; TODO Use os stack swap memory 
25e4			 
25e4				FORTH_DSP_PTR 0     ; TOS    w4 
25e4 2a e8 e9			ld hl,(cli_data_sp) 
25e7 11 00 00			ld de, 0 * 3 
25ea ed 52			sbc hl, de 
25ec				endm 
# End of macro FORTH_DSP_PTR
25ec cd cc 1e			call hltostack1 
25ef			  
25ef				FORTH_DSP_PTR 1     ; TOS    w3 
25ef 2a e8 e9			ld hl,(cli_data_sp) 
25f2 11 03 00			ld de, 1 * 3 
25f5 ed 52			sbc hl, de 
25f7				endm 
# End of macro FORTH_DSP_PTR
25f7 cd d2 1e			call hltostack2 
25fa			 
25fa			 
25fa			 
25fa				FORTH_DSP_PTR 2     ; TOS    w2 
25fa 2a e8 e9			ld hl,(cli_data_sp) 
25fd 11 06 00			ld de, 2 * 3 
2600 ed 52			sbc hl, de 
2602				endm 
# End of macro FORTH_DSP_PTR
2602 cd d8 1e			call hltostack3 
2605			 
2605				FORTH_DSP_PTR 3     ; TOS   w1 
2605 2a e8 e9			ld hl,(cli_data_sp) 
2608 11 09 00			ld de, 3 * 3 
260b ed 52			sbc hl, de 
260d				endm 
# End of macro FORTH_DSP_PTR
260d cd de 1e			call hltostack4 
2610			 
2610			 
2610			 
2610			 
2610				FORTH_DSP_PTR 0     ; TOS 
2610 2a e8 e9			ld hl,(cli_data_sp) 
2613 11 00 00			ld de, 0 * 3 
2616 ed 52			sbc hl, de 
2618				endm 
# End of macro FORTH_DSP_PTR
2618 cd f0 1e			call hlfromstack3 
261b			 
261b				FORTH_DSP_PTR 1     ; TOS 
261b 2a e8 e9			ld hl,(cli_data_sp) 
261e 11 03 00			ld de, 1 * 3 
2621 ed 52			sbc hl, de 
2623				endm 
# End of macro FORTH_DSP_PTR
2623 cd f6 1e			call hlfromstack4 
2626			 
2626			 
2626			 
2626				FORTH_DSP_PTR 2     ; TOS 
2626 2a e8 e9			ld hl,(cli_data_sp) 
2629 11 06 00			ld de, 2 * 3 
262c ed 52			sbc hl, de 
262e				endm 
# End of macro FORTH_DSP_PTR
262e cd e4 1e			call hlfromstack1 
2631			 
2631				FORTH_DSP_PTR 3     ; TOS 
2631 2a e8 e9			ld hl,(cli_data_sp) 
2634 11 09 00			ld de, 3 * 3 
2637 ed 52			sbc hl, de 
2639				endm 
# End of macro FORTH_DSP_PTR
2639 cd ea 1e			call hlfromstack2 
263c			 
263c				NEXTW 
263c c3 80 1f			jp macro_next 
263f				endm 
# End of macro NEXTW
263f			.AT: 
263f			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
263f 1f				db WORD_SYS_CORE+OPCODE_AT             
2640 71 26			dw .CAT            
2642 02				db 1 + 1 
2643 .. 00			db "@",0              
2645				endm 
# End of macro CWHEAD
2645			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2645			 
2645				if DEBUG_FORTH_WORDS_KEY 
2645					DMARK "AT." 
2645 f5				push af  
2646 3a 5a 26			ld a, (.dmark)  
2649 32 65 ee			ld (debug_mark),a  
264c 3a 5b 26			ld a, (.dmark+1)  
264f 32 66 ee			ld (debug_mark+1),a  
2652 3a 5c 26			ld a, (.dmark+2)  
2655 32 67 ee			ld (debug_mark+2),a  
2658 18 03			jr .pastdmark  
265a ..			.dmark: db "AT."  
265d f1			.pastdmark: pop af  
265e			endm  
# End of macro DMARK
265e					CALLMONITOR 
265e cd 6f ee			call debug_vector  
2661				endm  
# End of macro CALLMONITOR
2661				endif 
2661			.getbyteat:	 
2661				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2661 cd 95 1d			call macro_dsp_valuehl 
2664				endm 
# End of macro FORTH_DSP_VALUEHL
2664				 
2664			;		push hl 
2664			 
2664				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2664 cd 4d 1e			call macro_forth_dsp_pop 
2667				endm 
# End of macro FORTH_DSP_POP
2667			 
2667			;		pop hl 
2667			 
2667 7e				ld a, (hl) 
2668			 
2668 6f				ld l, a 
2669 26 00			ld h, 0 
266b cd 90 1b			call forth_push_numhl 
266e			 
266e				NEXTW 
266e c3 80 1f			jp macro_next 
2671				endm 
# End of macro NEXTW
2671			.CAT: 
2671			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2671 20				db WORD_SYS_CORE+OPCODE_CAT             
2672 9a 26			dw .BANG            
2674 03				db 2 + 1 
2675 .. 00			db "C@",0              
2678				endm 
# End of macro CWHEAD
2678			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2678				if DEBUG_FORTH_WORDS_KEY 
2678					DMARK "CAA" 
2678 f5				push af  
2679 3a 8d 26			ld a, (.dmark)  
267c 32 65 ee			ld (debug_mark),a  
267f 3a 8e 26			ld a, (.dmark+1)  
2682 32 66 ee			ld (debug_mark+1),a  
2685 3a 8f 26			ld a, (.dmark+2)  
2688 32 67 ee			ld (debug_mark+2),a  
268b 18 03			jr .pastdmark  
268d ..			.dmark: db "CAA"  
2690 f1			.pastdmark: pop af  
2691			endm  
# End of macro DMARK
2691					CALLMONITOR 
2691 cd 6f ee			call debug_vector  
2694				endm  
# End of macro CALLMONITOR
2694				endif 
2694 c3 61 26			jp .getbyteat 
2697				NEXTW 
2697 c3 80 1f			jp macro_next 
269a				endm 
# End of macro NEXTW
269a			.BANG: 
269a			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
269a 21				db WORD_SYS_CORE+OPCODE_BANG             
269b d0 26			dw .CBANG            
269d 02				db 1 + 1 
269e .. 00			db "!",0              
26a0				endm 
# End of macro CWHEAD
26a0			; | ! ( x w -- ) Store x at address w      | DONE 
26a0				if DEBUG_FORTH_WORDS_KEY 
26a0					DMARK "BNG" 
26a0 f5				push af  
26a1 3a b5 26			ld a, (.dmark)  
26a4 32 65 ee			ld (debug_mark),a  
26a7 3a b6 26			ld a, (.dmark+1)  
26aa 32 66 ee			ld (debug_mark+1),a  
26ad 3a b7 26			ld a, (.dmark+2)  
26b0 32 67 ee			ld (debug_mark+2),a  
26b3 18 03			jr .pastdmark  
26b5 ..			.dmark: db "BNG"  
26b8 f1			.pastdmark: pop af  
26b9			endm  
# End of macro DMARK
26b9					CALLMONITOR 
26b9 cd 6f ee			call debug_vector  
26bc				endm  
# End of macro CALLMONITOR
26bc				endif 
26bc			 
26bc			.storebyteat:		 
26bc				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26bc cd 95 1d			call macro_dsp_valuehl 
26bf				endm 
# End of macro FORTH_DSP_VALUEHL
26bf				 
26bf e5				push hl 
26c0			 
26c0				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26c0 cd 4d 1e			call macro_forth_dsp_pop 
26c3				endm 
# End of macro FORTH_DSP_POP
26c3			 
26c3				; get byte to poke 
26c3			 
26c3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26c3 cd 95 1d			call macro_dsp_valuehl 
26c6				endm 
# End of macro FORTH_DSP_VALUEHL
26c6 e5				push hl 
26c7			 
26c7			 
26c7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26c7 cd 4d 1e			call macro_forth_dsp_pop 
26ca				endm 
# End of macro FORTH_DSP_POP
26ca			 
26ca			 
26ca d1				pop de 
26cb e1				pop hl 
26cc			 
26cc 73				ld (hl),e 
26cd			 
26cd			 
26cd				NEXTW 
26cd c3 80 1f			jp macro_next 
26d0				endm 
# End of macro NEXTW
26d0			.CBANG: 
26d0			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
26d0 22				db WORD_SYS_CORE+OPCODE_CBANG             
26d1 f9 26			dw .SCALL            
26d3 03				db 2 + 1 
26d4 .. 00			db "C!",0              
26d7				endm 
# End of macro CWHEAD
26d7			; | C!  ( x w -- ) Store x at address w  | DONE 
26d7				if DEBUG_FORTH_WORDS_KEY 
26d7					DMARK "CBA" 
26d7 f5				push af  
26d8 3a ec 26			ld a, (.dmark)  
26db 32 65 ee			ld (debug_mark),a  
26de 3a ed 26			ld a, (.dmark+1)  
26e1 32 66 ee			ld (debug_mark+1),a  
26e4 3a ee 26			ld a, (.dmark+2)  
26e7 32 67 ee			ld (debug_mark+2),a  
26ea 18 03			jr .pastdmark  
26ec ..			.dmark: db "CBA"  
26ef f1			.pastdmark: pop af  
26f0			endm  
# End of macro DMARK
26f0					CALLMONITOR 
26f0 cd 6f ee			call debug_vector  
26f3				endm  
# End of macro CALLMONITOR
26f3				endif 
26f3 c3 bc 26			jp .storebyteat 
26f6				NEXTW 
26f6 c3 80 1f			jp macro_next 
26f9				endm 
# End of macro NEXTW
26f9			.SCALL: 
26f9			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
26f9 23				db WORD_SYS_CORE+OPCODE_SCALL             
26fa 2d 27			dw .DEPTH            
26fc 05				db 4 + 1 
26fd .. 00			db "CALL",0              
2702				endm 
# End of macro CWHEAD
2702			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2702				if DEBUG_FORTH_WORDS_KEY 
2702					DMARK "CLL" 
2702 f5				push af  
2703 3a 17 27			ld a, (.dmark)  
2706 32 65 ee			ld (debug_mark),a  
2709 3a 18 27			ld a, (.dmark+1)  
270c 32 66 ee			ld (debug_mark+1),a  
270f 3a 19 27			ld a, (.dmark+2)  
2712 32 67 ee			ld (debug_mark+2),a  
2715 18 03			jr .pastdmark  
2717 ..			.dmark: db "CLL"  
271a f1			.pastdmark: pop af  
271b			endm  
# End of macro DMARK
271b					CALLMONITOR 
271b cd 6f ee			call debug_vector  
271e				endm  
# End of macro CALLMONITOR
271e				endif 
271e			 
271e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
271e cd 95 1d			call macro_dsp_valuehl 
2721				endm 
# End of macro FORTH_DSP_VALUEHL
2721			 
2721			;		push hl 
2721			 
2721				; destroy value TOS 
2721			 
2721				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2721 cd 4d 1e			call macro_forth_dsp_pop 
2724				endm 
# End of macro FORTH_DSP_POP
2724			 
2724					 
2724			;		pop hl 
2724			 
2724				; how to do a call with hl???? save SP? 
2724 cd 24 1f			call forth_call_hl 
2727			 
2727			 
2727				; TODO push value back onto stack for another op etc 
2727			 
2727 cd 90 1b			call forth_push_numhl 
272a				NEXTW 
272a c3 80 1f			jp macro_next 
272d				endm 
# End of macro NEXTW
272d			.DEPTH: 
272d			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
272d 24				db WORD_SYS_CORE+OPCODE_DEPTH             
272e 6a 27			dw .OVER            
2730 06				db 5 + 1 
2731 .. 00			db "DEPTH",0              
2737				endm 
# End of macro CWHEAD
2737			; | DEPTH ( -- u ) Push count of stack | DONE 
2737				; take current TOS and remove from base value div by two to get count 
2737				if DEBUG_FORTH_WORDS_KEY 
2737					DMARK "DEP" 
2737 f5				push af  
2738 3a 4c 27			ld a, (.dmark)  
273b 32 65 ee			ld (debug_mark),a  
273e 3a 4d 27			ld a, (.dmark+1)  
2741 32 66 ee			ld (debug_mark+1),a  
2744 3a 4e 27			ld a, (.dmark+2)  
2747 32 67 ee			ld (debug_mark+2),a  
274a 18 03			jr .pastdmark  
274c ..			.dmark: db "DEP"  
274f f1			.pastdmark: pop af  
2750			endm  
# End of macro DMARK
2750					CALLMONITOR 
2750 cd 6f ee			call debug_vector  
2753				endm  
# End of macro CALLMONITOR
2753				endif 
2753			 
2753			 
2753 2a e8 e9		ld hl, (cli_data_sp) 
2756 11 22 e8		ld de, cli_data_stack 
2759 ed 52		sbc hl,de 
275b			 
275b			; div by size of stack item 
275b			 
275b 5d			ld e,l 
275c 0e 03		ld c, 3 
275e cd 85 0d		call Div8 
2761			 
2761 6f			ld l,a 
2762 26 00		ld h,0 
2764			 
2764			;srl h 
2764			;rr l 
2764			 
2764 cd 90 1b			call forth_push_numhl 
2767				NEXTW 
2767 c3 80 1f			jp macro_next 
276a				endm 
# End of macro NEXTW
276a			.OVER: 
276a			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
276a 42				db WORD_SYS_CORE+46             
276b b1 27			dw .PAUSE            
276d 05				db 4 + 1 
276e .. 00			db "OVER",0              
2773				endm 
# End of macro CWHEAD
2773			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
2773			; | | If the copied item is a string it is properly duplicated allowing for a safe release after use.  
2773				if DEBUG_FORTH_WORDS_KEY 
2773					DMARK "OVR" 
2773 f5				push af  
2774 3a 88 27			ld a, (.dmark)  
2777 32 65 ee			ld (debug_mark),a  
277a 3a 89 27			ld a, (.dmark+1)  
277d 32 66 ee			ld (debug_mark+1),a  
2780 3a 8a 27			ld a, (.dmark+2)  
2783 32 67 ee			ld (debug_mark+2),a  
2786 18 03			jr .pastdmark  
2788 ..			.dmark: db "OVR"  
278b f1			.pastdmark: pop af  
278c			endm  
# End of macro DMARK
278c					CALLMONITOR 
278c cd 6f ee			call debug_vector  
278f				endm  
# End of macro CALLMONITOR
278f				endif 
278f			 
278f			; TODO Use os stack swap memory 
278f			 
278f				; work out what type we are looking at 
278f			 
278f				FORTH_DSP_PTR 1 
278f 2a e8 e9			ld hl,(cli_data_sp) 
2792 11 03 00			ld de, 1 * 3 
2795 ed 52			sbc hl, de 
2797				endm 
# End of macro FORTH_DSP_PTR
2797			 
2797 7e				ld a, (hl) 
2798				 
2798 f5				push af 
2799				; whatever the type lets get the pointer or word 
2799 23				inc hl 
279a			;; 
279a			 
279a				; type check now to decide on how to push  
279a			 
279a cd 02 1f			call loadwordinhl 
279d f1				pop af 
279e fe 01			cp DS_TYPE_STR 
27a0 28 06			jr z, .ovstr 
27a2			 
27a2				; we have a numeric so load the word and push 
27a2			;	ld e, (hl) 
27a2			;	inc hl 
27a2			;	ld d, (hl) 
27a2			;	ex de, hl 
27a2 cd 90 1b			call forth_push_numhl 
27a5				NEXTW 
27a5 c3 80 1f			jp macro_next 
27a8				endm 
# End of macro NEXTW
27a8			 
27a8			.ovstr: 
27a8				; ok, a string so get the pointer and push as a string 
27a8			 
27a8			;	call loadwordinhl 
27a8 cd fe 1b			call forth_push_str 
27ab				NEXTW 
27ab c3 80 1f			jp macro_next 
27ae				endm 
# End of macro NEXTW
27ae			 
27ae			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27ae			;	push hl    ; n2 
27ae			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27ae			; 
27ae			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27ae			;	push hl    ; n1 
27ae			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27ae			; 
27ae			;	pop de     ; n1 
27ae			;	pop hl     ; n2 
27ae			; 
27ae			;	push de 
27ae			;	push hl 
27ae			;	push de 
27ae			 
27ae				; push back  
27ae			 
27ae			;	pop hl 
27ae			;	call forth_push_numhl 
27ae			;	pop hl 
27ae			;	call forth_push_numhl 
27ae			;	pop hl 
27ae			;	call forth_push_numhl 
27ae				NEXTW 
27ae c3 80 1f			jp macro_next 
27b1				endm 
# End of macro NEXTW
27b1			 
27b1			.PAUSE: 
27b1			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
27b1 43				db WORD_SYS_CORE+47             
27b2 e6 27			dw .PAUSES            
27b4 08				db 7 + 1 
27b5 .. 00			db "PAUSEMS",0              
27bd				endm 
# End of macro CWHEAD
27bd			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
27bd				if DEBUG_FORTH_WORDS_KEY 
27bd					DMARK "PMS" 
27bd f5				push af  
27be 3a d2 27			ld a, (.dmark)  
27c1 32 65 ee			ld (debug_mark),a  
27c4 3a d3 27			ld a, (.dmark+1)  
27c7 32 66 ee			ld (debug_mark+1),a  
27ca 3a d4 27			ld a, (.dmark+2)  
27cd 32 67 ee			ld (debug_mark+2),a  
27d0 18 03			jr .pastdmark  
27d2 ..			.dmark: db "PMS"  
27d5 f1			.pastdmark: pop af  
27d6			endm  
# End of macro DMARK
27d6					CALLMONITOR 
27d6 cd 6f ee			call debug_vector  
27d9				endm  
# End of macro CALLMONITOR
27d9				endif 
27d9				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27d9 cd 95 1d			call macro_dsp_valuehl 
27dc				endm 
# End of macro FORTH_DSP_VALUEHL
27dc			;		push hl    ; n2 
27dc				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27dc cd 4d 1e			call macro_forth_dsp_pop 
27df				endm 
# End of macro FORTH_DSP_POP
27df			;		pop hl 
27df			 
27df 7d				ld a, l 
27e0 cd e5 0a			call aDelayInMS 
27e3			       NEXTW 
27e3 c3 80 1f			jp macro_next 
27e6				endm 
# End of macro NEXTW
27e6			.PAUSES:  
27e6			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
27e6 44				db WORD_SYS_CORE+48             
27e7 55 28			dw .ROT            
27e9 06				db 5 + 1 
27ea .. 00			db "PAUSE",0              
27f0				endm 
# End of macro CWHEAD
27f0			; | PAUSE ( n -- )  Pause for n seconds | DONE 
27f0				if DEBUG_FORTH_WORDS_KEY 
27f0					DMARK "PAU" 
27f0 f5				push af  
27f1 3a 05 28			ld a, (.dmark)  
27f4 32 65 ee			ld (debug_mark),a  
27f7 3a 06 28			ld a, (.dmark+1)  
27fa 32 66 ee			ld (debug_mark+1),a  
27fd 3a 07 28			ld a, (.dmark+2)  
2800 32 67 ee			ld (debug_mark+2),a  
2803 18 03			jr .pastdmark  
2805 ..			.dmark: db "PAU"  
2808 f1			.pastdmark: pop af  
2809			endm  
# End of macro DMARK
2809					CALLMONITOR 
2809 cd 6f ee			call debug_vector  
280c				endm  
# End of macro CALLMONITOR
280c				endif 
280c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
280c cd 95 1d			call macro_dsp_valuehl 
280f				endm 
# End of macro FORTH_DSP_VALUEHL
280f			;		push hl    ; n2 
280f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
280f cd 4d 1e			call macro_forth_dsp_pop 
2812				endm 
# End of macro FORTH_DSP_POP
2812			;		pop hl 
2812 45				ld b, l 
2813				if DEBUG_FORTH_WORDS 
2813					DMARK "PAU" 
2813 f5				push af  
2814 3a 28 28			ld a, (.dmark)  
2817 32 65 ee			ld (debug_mark),a  
281a 3a 29 28			ld a, (.dmark+1)  
281d 32 66 ee			ld (debug_mark+1),a  
2820 3a 2a 28			ld a, (.dmark+2)  
2823 32 67 ee			ld (debug_mark+2),a  
2826 18 03			jr .pastdmark  
2828 ..			.dmark: db "PAU"  
282b f1			.pastdmark: pop af  
282c			endm  
# End of macro DMARK
282c					CALLMONITOR 
282c cd 6f ee			call debug_vector  
282f				endm  
# End of macro CALLMONITOR
282f				endif 
282f c5			.pauses1:	push bc 
2830 cd 00 0b			call delay1s 
2833 c1				pop bc 
2834				if DEBUG_FORTH_WORDS 
2834					DMARK "PA1" 
2834 f5				push af  
2835 3a 49 28			ld a, (.dmark)  
2838 32 65 ee			ld (debug_mark),a  
283b 3a 4a 28			ld a, (.dmark+1)  
283e 32 66 ee			ld (debug_mark+1),a  
2841 3a 4b 28			ld a, (.dmark+2)  
2844 32 67 ee			ld (debug_mark+2),a  
2847 18 03			jr .pastdmark  
2849 ..			.dmark: db "PA1"  
284c f1			.pastdmark: pop af  
284d			endm  
# End of macro DMARK
284d					CALLMONITOR 
284d cd 6f ee			call debug_vector  
2850				endm  
# End of macro CALLMONITOR
2850				endif 
2850 10 dd			djnz .pauses1 
2852			 
2852			       NEXTW 
2852 c3 80 1f			jp macro_next 
2855				endm 
# End of macro NEXTW
2855			.ROT: 
2855			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2855 45				db WORD_SYS_CORE+49             
2856 be 28			dw .UWORDS            
2858 04				db 3 + 1 
2859 .. 00			db "ROT",0              
285d				endm 
# End of macro CWHEAD
285d			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
285d				if DEBUG_FORTH_WORDS_KEY 
285d					DMARK "ROT" 
285d f5				push af  
285e 3a 72 28			ld a, (.dmark)  
2861 32 65 ee			ld (debug_mark),a  
2864 3a 73 28			ld a, (.dmark+1)  
2867 32 66 ee			ld (debug_mark+1),a  
286a 3a 74 28			ld a, (.dmark+2)  
286d 32 67 ee			ld (debug_mark+2),a  
2870 18 03			jr .pastdmark  
2872 ..			.dmark: db "ROT"  
2875 f1			.pastdmark: pop af  
2876			endm  
# End of macro DMARK
2876					CALLMONITOR 
2876 cd 6f ee			call debug_vector  
2879				endm  
# End of macro CALLMONITOR
2879				endif 
2879			 
2879			; DONE Use os stack swap memory 
2879			 
2879				FORTH_DSP_PTR 0     ; u3 
2879 2a e8 e9			ld hl,(cli_data_sp) 
287c 11 00 00			ld de, 0 * 3 
287f ed 52			sbc hl, de 
2881				endm 
# End of macro FORTH_DSP_PTR
2881 cd cc 1e			call hltostack1     
2884			  
2884				FORTH_DSP_PTR 1     ; u2 
2884 2a e8 e9			ld hl,(cli_data_sp) 
2887 11 03 00			ld de, 1 * 3 
288a ed 52			sbc hl, de 
288c				endm 
# End of macro FORTH_DSP_PTR
288c cd d2 1e			call hltostack2      
288f			 
288f				FORTH_DSP_PTR 2     ; u1 
288f 2a e8 e9			ld hl,(cli_data_sp) 
2892 11 06 00			ld de, 2 * 3 
2895 ed 52			sbc hl, de 
2897				endm 
# End of macro FORTH_DSP_PTR
2897 cd d8 1e			call hltostack3 
289a			 
289a			 
289a				FORTH_DSP_PTR 0     ;  
289a 2a e8 e9			ld hl,(cli_data_sp) 
289d 11 00 00			ld de, 0 * 3 
28a0 ed 52			sbc hl, de 
28a2				endm 
# End of macro FORTH_DSP_PTR
28a2 cd f0 1e			call hlfromstack3 
28a5			 
28a5				FORTH_DSP_PTR 1     ; TOS 
28a5 2a e8 e9			ld hl,(cli_data_sp) 
28a8 11 03 00			ld de, 1 * 3 
28ab ed 52			sbc hl, de 
28ad				endm 
# End of macro FORTH_DSP_PTR
28ad cd e4 1e			call hlfromstack1 
28b0			 
28b0				FORTH_DSP_PTR 2     ; TOS 
28b0 2a e8 e9			ld hl,(cli_data_sp) 
28b3 11 06 00			ld de, 2 * 3 
28b6 ed 52			sbc hl, de 
28b8				endm 
# End of macro FORTH_DSP_PTR
28b8 cd ea 1e			call hlfromstack2 
28bb			 
28bb			 
28bb			;	FORTH_DSP_VALUEHL 
28bb			;	push hl    ; u3  
28bb			; 
28bb			;	FORTH_DSP_POP 
28bb			; 
28bb			;	FORTH_DSP_VALUEHL 
28bb			;	push hl     ; u2 
28bb			; 
28bb			;	FORTH_DSP_POP 
28bb			; 
28bb			;	FORTH_DSP_VALUEHL 
28bb			;	push hl     ; u1 
28bb			; 
28bb			;	FORTH_DSP_POP 
28bb			; 
28bb			;	pop bc      ; u1 
28bb			;	pop hl      ; u2 
28bb			;	pop de      ; u3 
28bb			; 
28bb			; 
28bb			;	push bc 
28bb			;	push de 
28bb			;	push hl 
28bb			; 
28bb			; 
28bb			;	pop hl 
28bb			;	call forth_push_numhl 
28bb			; 
28bb			;	pop hl 
28bb			;	call forth_push_numhl 
28bb			; 
28bb			;	pop hl 
28bb			;	call forth_push_numhl 
28bb				 
28bb			 
28bb			 
28bb			 
28bb			 
28bb			 
28bb			       NEXTW 
28bb c3 80 1f			jp macro_next 
28be				endm 
# End of macro NEXTW
28be			 
28be			.UWORDS: 
28be			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
28be 50				db WORD_SYS_CORE+60             
28bf 80 29			dw .BP            
28c1 07				db 6 + 1 
28c2 .. 00			db "UWORDS",0              
28c9				endm 
# End of macro CWHEAD
28c9			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
28c9			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
28c9			; | | Following the count are the individual words. 
28c9			; | | 
28c9			; | | e.g. UWORDS 
28c9			; | | BOX DIRLIST 2 
28c9			; | |  
28c9			; | | Can be used to save the words to storage via: 
28c9			; | | UWORDS $01 DO $01 APPEND LOOP 
28c9			if DEBUG_FORTH_WORDS_KEY 
28c9				DMARK "UWR" 
28c9 f5				push af  
28ca 3a de 28			ld a, (.dmark)  
28cd 32 65 ee			ld (debug_mark),a  
28d0 3a df 28			ld a, (.dmark+1)  
28d3 32 66 ee			ld (debug_mark+1),a  
28d6 3a e0 28			ld a, (.dmark+2)  
28d9 32 67 ee			ld (debug_mark+2),a  
28dc 18 03			jr .pastdmark  
28de ..			.dmark: db "UWR"  
28e1 f1			.pastdmark: pop af  
28e2			endm  
# End of macro DMARK
28e2				CALLMONITOR 
28e2 cd 6f ee			call debug_vector  
28e5				endm  
# End of macro CALLMONITOR
28e5			endif 
28e5 21 1f 63			ld hl, baseram 
28e8				;ld hl, baseusermem 
28e8 01 00 00			ld bc, 0    ; start a counter 
28eb			 
28eb			; skip dict stub 
28eb			 
28eb cd bd 20			call forth_tok_next 
28ee			 
28ee			 
28ee			; while we have words to look for 
28ee			 
28ee 7e			.douscan:	ld a, (hl)      
28ef			if DEBUG_FORTH_WORDS 
28ef				DMARK "UWs" 
28ef f5				push af  
28f0 3a 04 29			ld a, (.dmark)  
28f3 32 65 ee			ld (debug_mark),a  
28f6 3a 05 29			ld a, (.dmark+1)  
28f9 32 66 ee			ld (debug_mark+1),a  
28fc 3a 06 29			ld a, (.dmark+2)  
28ff 32 67 ee			ld (debug_mark+2),a  
2902 18 03			jr .pastdmark  
2904 ..			.dmark: db "UWs"  
2907 f1			.pastdmark: pop af  
2908			endm  
# End of macro DMARK
2908				CALLMONITOR 
2908 cd 6f ee			call debug_vector  
290b				endm  
# End of macro CALLMONITOR
290b			endif 
290b fe 00			cp WORD_SYS_END 
290d 28 4d			jr z, .udone 
290f fe 01			cp WORD_SYS_UWORD 
2911 20 44			jr nz, .nuword 
2913			 
2913			if DEBUG_FORTH_WORDS 
2913				DMARK "UWu" 
2913 f5				push af  
2914 3a 28 29			ld a, (.dmark)  
2917 32 65 ee			ld (debug_mark),a  
291a 3a 29 29			ld a, (.dmark+1)  
291d 32 66 ee			ld (debug_mark+1),a  
2920 3a 2a 29			ld a, (.dmark+2)  
2923 32 67 ee			ld (debug_mark+2),a  
2926 18 03			jr .pastdmark  
2928 ..			.dmark: db "UWu"  
292b f1			.pastdmark: pop af  
292c			endm  
# End of macro DMARK
292c				CALLMONITOR 
292c cd 6f ee			call debug_vector  
292f				endm  
# End of macro CALLMONITOR
292f			endif 
292f				; we have a uword so push its name to the stack 
292f			 
292f e5				push hl  ; save so we can move to next dict block 
2930			 
2930				; skip opcode 
2930 23				inc hl  
2931				; skip next ptr 
2931 23				inc hl  
2932 23				inc hl 
2933				; skip len 
2933 23				inc hl 
2934			if DEBUG_FORTH_WORDS 
2934				DMARK "UWt" 
2934 f5				push af  
2935 3a 49 29			ld a, (.dmark)  
2938 32 65 ee			ld (debug_mark),a  
293b 3a 4a 29			ld a, (.dmark+1)  
293e 32 66 ee			ld (debug_mark+1),a  
2941 3a 4b 29			ld a, (.dmark+2)  
2944 32 67 ee			ld (debug_mark+2),a  
2947 18 03			jr .pastdmark  
2949 ..			.dmark: db "UWt"  
294c f1			.pastdmark: pop af  
294d			endm  
# End of macro DMARK
294d				CALLMONITOR 
294d cd 6f ee			call debug_vector  
2950				endm  
# End of macro CALLMONITOR
2950			endif 
2950 03				inc bc 
2951			 
2951 c5				push bc 
2952 cd fe 1b			call forth_push_str 
2955 c1				pop bc 
2956			 
2956 e1				pop hl 	 
2957			 
2957 cd bd 20		.nuword:	call forth_tok_next 
295a 18 92			jr .douscan  
295c			 
295c			.udone:		 ; push count of uwords found 
295c c5				push bc 
295d e1				pop hl 
295e			 
295e			if DEBUG_FORTH_WORDS 
295e				DMARK "UWc" 
295e f5				push af  
295f 3a 73 29			ld a, (.dmark)  
2962 32 65 ee			ld (debug_mark),a  
2965 3a 74 29			ld a, (.dmark+1)  
2968 32 66 ee			ld (debug_mark+1),a  
296b 3a 75 29			ld a, (.dmark+2)  
296e 32 67 ee			ld (debug_mark+2),a  
2971 18 03			jr .pastdmark  
2973 ..			.dmark: db "UWc"  
2976 f1			.pastdmark: pop af  
2977			endm  
# End of macro DMARK
2977				CALLMONITOR 
2977 cd 6f ee			call debug_vector  
297a				endm  
# End of macro CALLMONITOR
297a			endif 
297a cd 90 1b			call forth_push_numhl 
297d			 
297d			 
297d			       NEXTW 
297d c3 80 1f			jp macro_next 
2980				endm 
# End of macro NEXTW
2980			 
2980			.BP: 
2980			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2980 54				db WORD_SYS_CORE+64             
2981 ba 29			dw .MONITOR            
2983 03				db 2 + 1 
2984 .. 00			db "BP",0              
2987				endm 
# End of macro CWHEAD
2987			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2987			; | | $00 Will enable the break points within specific code paths 
2987			; | | $01 Will disable break points 
2987			; | |  
2987			; | | By default break points are off. Either the above can be used to enable them 
2987			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2987			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2987			; | | can disable break points. Exiting will then continue boot process. 
2987				; get byte count 
2987				if DEBUG_FORTH_WORDS_KEY 
2987					DMARK "BP." 
2987 f5				push af  
2988 3a 9c 29			ld a, (.dmark)  
298b 32 65 ee			ld (debug_mark),a  
298e 3a 9d 29			ld a, (.dmark+1)  
2991 32 66 ee			ld (debug_mark+1),a  
2994 3a 9e 29			ld a, (.dmark+2)  
2997 32 67 ee			ld (debug_mark+2),a  
299a 18 03			jr .pastdmark  
299c ..			.dmark: db "BP."  
299f f1			.pastdmark: pop af  
29a0			endm  
# End of macro DMARK
29a0					CALLMONITOR 
29a0 cd 6f ee			call debug_vector  
29a3				endm  
# End of macro CALLMONITOR
29a3				endif 
29a3			 
29a3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29a3 cd 95 1d			call macro_dsp_valuehl 
29a6				endm 
# End of macro FORTH_DSP_VALUEHL
29a6			 
29a6			;		push hl 
29a6			 
29a6				; destroy value TOS 
29a6			 
29a6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29a6 cd 4d 1e			call macro_forth_dsp_pop 
29a9				endm 
# End of macro FORTH_DSP_POP
29a9			 
29a9			;		pop hl 
29a9			 
29a9 3e 00			ld a,0 
29ab bd				cp l 
29ac 28 06			jr z, .bpset 
29ae			;		ld a, '*' 
29ae cd 0b 15			call bp_off 
29b1				NEXTW 
29b1 c3 80 1f			jp macro_next 
29b4				endm 
# End of macro NEXTW
29b4			 
29b4			.bpset:	 
29b4				;	ld (os_view_disable), a 
29b4 cd ff 14			call bp_on 
29b7			 
29b7			 
29b7				NEXTW 
29b7 c3 80 1f			jp macro_next 
29ba				endm 
# End of macro NEXTW
29ba			 
29ba			 
29ba			.MONITOR: 
29ba			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
29ba 55				db WORD_SYS_CORE+65             
29bb eb 29			dw .MALLOC            
29bd 08				db 7 + 1 
29be .. 00			db "MONITOR",0              
29c6				endm 
# End of macro CWHEAD
29c6			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
29c6			; | | At start the current various registers will be displayed with contents. 
29c6			; | | Top right corner will show the most recent debug marker seen. 
29c6			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
29c6			; | | and the return stack pointer (RSP). 
29c6			; | | Pressing: 
29c6			; | |    1 - Initial screen 
29c6			; | |    2 - Display a data dump of HL 
29c6			; | |    3 - Display a data dump of DE 
29c6			; | |    4 - Display a data dump of BC 
29c6			; | |    5 - Display a data dump of HL 
29c6			; | |    6 - Display a data dump of DSP 
29c6			; | |    7 - Display a data dump of RSP 
29c6			; | |    8 - Display a data dump of what is at DSP 
29c6			; | |    9 - Display a data dump of what is at RSP 
29c6			; | |    0 - Exit monitor and continue running. This will also enable break points 
29c6			; | |    * - Disable break points 
29c6			; | |    # - Enter traditional monitor mode 
29c6			; | | 
29c6			; | | Monitor Mode 
29c6			; | | ------------ 
29c6			; | | A prompt of '>' will be shown for various commands: 
29c6			; | |    D xxxx - Display a data dump starting from hex address xxxx 
29c6			; | |    C - Continue display a data dump from the last set address 
29c6			; | |    M xxxx - Set start of memory edit at address xx 
29c6			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
29c6			; | |    G xxxx - Exec code at specific address 
29c6			; | |    Q - Return to previous 
29c6				if DEBUG_FORTH_WORDS_KEY 
29c6					DMARK "MON" 
29c6 f5				push af  
29c7 3a db 29			ld a, (.dmark)  
29ca 32 65 ee			ld (debug_mark),a  
29cd 3a dc 29			ld a, (.dmark+1)  
29d0 32 66 ee			ld (debug_mark+1),a  
29d3 3a dd 29			ld a, (.dmark+2)  
29d6 32 67 ee			ld (debug_mark+2),a  
29d9 18 03			jr .pastdmark  
29db ..			.dmark: db "MON"  
29de f1			.pastdmark: pop af  
29df			endm  
# End of macro DMARK
29df					CALLMONITOR 
29df cd 6f ee			call debug_vector  
29e2				endm  
# End of macro CALLMONITOR
29e2				endif 
29e2			;		ld a, 0 
29e2			;		ld (os_view_disable), a 
29e2 cd ff 14			call bp_on 
29e5			 
29e5				CALLMONITOR 
29e5 cd 6f ee			call debug_vector  
29e8				endm  
# End of macro CALLMONITOR
29e8			 
29e8			;	call monitor 
29e8			 
29e8				NEXTW 
29e8 c3 80 1f			jp macro_next 
29eb				endm 
# End of macro NEXTW
29eb			 
29eb			 
29eb			.MALLOC: 
29eb			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
29eb 56				db WORD_SYS_CORE+66             
29ec 14 2a			dw .MALLOC2            
29ee 06				db 5 + 1 
29ef .. 00			db "ALLOT",0              
29f5				endm 
# End of macro CWHEAD
29f5			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
29f5				if DEBUG_FORTH_WORDS_KEY 
29f5					DMARK "ALL" 
29f5 f5				push af  
29f6 3a 0a 2a			ld a, (.dmark)  
29f9 32 65 ee			ld (debug_mark),a  
29fc 3a 0b 2a			ld a, (.dmark+1)  
29ff 32 66 ee			ld (debug_mark+1),a  
2a02 3a 0c 2a			ld a, (.dmark+2)  
2a05 32 67 ee			ld (debug_mark+2),a  
2a08 18 03			jr .pastdmark  
2a0a ..			.dmark: db "ALL"  
2a0d f1			.pastdmark: pop af  
2a0e			endm  
# End of macro DMARK
2a0e					CALLMONITOR 
2a0e cd 6f ee			call debug_vector  
2a11				endm  
# End of macro CALLMONITOR
2a11				endif 
2a11 c3 3b 2a			jp .mallocc 
2a14			.MALLOC2: 
2a14			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2a14 56				db WORD_SYS_CORE+66             
2a15 52 2a			dw .FREE            
2a17 07				db 6 + 1 
2a18 .. 00			db "MALLOC",0              
2a1f				endm 
# End of macro CWHEAD
2a1f			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2a1f				; get byte count 
2a1f				if DEBUG_FORTH_WORDS_KEY 
2a1f					DMARK "MAL" 
2a1f f5				push af  
2a20 3a 34 2a			ld a, (.dmark)  
2a23 32 65 ee			ld (debug_mark),a  
2a26 3a 35 2a			ld a, (.dmark+1)  
2a29 32 66 ee			ld (debug_mark+1),a  
2a2c 3a 36 2a			ld a, (.dmark+2)  
2a2f 32 67 ee			ld (debug_mark+2),a  
2a32 18 03			jr .pastdmark  
2a34 ..			.dmark: db "MAL"  
2a37 f1			.pastdmark: pop af  
2a38			endm  
# End of macro DMARK
2a38					CALLMONITOR 
2a38 cd 6f ee			call debug_vector  
2a3b				endm  
# End of macro CALLMONITOR
2a3b				endif 
2a3b			.mallocc: 
2a3b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a3b cd 95 1d			call macro_dsp_valuehl 
2a3e				endm 
# End of macro FORTH_DSP_VALUEHL
2a3e			 
2a3e			;		push hl 
2a3e			 
2a3e				; destroy value TOS 
2a3e			 
2a3e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a3e cd 4d 1e			call macro_forth_dsp_pop 
2a41				endm 
# End of macro FORTH_DSP_POP
2a41			 
2a41			;		pop hl 
2a41 cd d0 11			call malloc 
2a44			if DEBUG_FORTH_MALLOC_GUARD 
2a44 f5				push af 
2a45 cd 1e 0e			call ishlzero 
2a48			;		ld a, l 
2a48			;		add h 
2a48			;		cp 0 
2a48 f1				pop af 
2a49				 
2a49 cc 75 51			call z,malloc_error 
2a4c			endif 
2a4c			 
2a4c cd 90 1b			call forth_push_numhl 
2a4f				NEXTW 
2a4f c3 80 1f			jp macro_next 
2a52				endm 
# End of macro NEXTW
2a52			 
2a52			.FREE: 
2a52			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2a52 57				db WORD_SYS_CORE+67             
2a53 83 2a			dw .LIST            
2a55 05				db 4 + 1 
2a56 .. 00			db "FREE",0              
2a5b				endm 
# End of macro CWHEAD
2a5b			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2a5b				if DEBUG_FORTH_WORDS_KEY 
2a5b					DMARK "FRE" 
2a5b f5				push af  
2a5c 3a 70 2a			ld a, (.dmark)  
2a5f 32 65 ee			ld (debug_mark),a  
2a62 3a 71 2a			ld a, (.dmark+1)  
2a65 32 66 ee			ld (debug_mark+1),a  
2a68 3a 72 2a			ld a, (.dmark+2)  
2a6b 32 67 ee			ld (debug_mark+2),a  
2a6e 18 03			jr .pastdmark  
2a70 ..			.dmark: db "FRE"  
2a73 f1			.pastdmark: pop af  
2a74			endm  
# End of macro DMARK
2a74					CALLMONITOR 
2a74 cd 6f ee			call debug_vector  
2a77				endm  
# End of macro CALLMONITOR
2a77				endif 
2a77				; get address 
2a77			 
2a77				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a77 cd 95 1d			call macro_dsp_valuehl 
2a7a				endm 
# End of macro FORTH_DSP_VALUEHL
2a7a			 
2a7a			;		push hl 
2a7a			 
2a7a				; destroy value TOS 
2a7a			 
2a7a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a7a cd 4d 1e			call macro_forth_dsp_pop 
2a7d				endm 
# End of macro FORTH_DSP_POP
2a7d			 
2a7d			;		pop hl 
2a7d			if FORTH_ENABLE_MALLOCFREE 
2a7d cd 9a 12			call free 
2a80			endif 
2a80				NEXTW 
2a80 c3 80 1f			jp macro_next 
2a83				endm 
# End of macro NEXTW
2a83			.LIST: 
2a83			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2a83 5c				db WORD_SYS_CORE+72             
2a84 7f 2c			dw .FORGET            
2a86 05				db 4 + 1 
2a87 .. 00			db "LIST",0              
2a8c				endm 
# End of macro CWHEAD
2a8c			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2a8c			; | | The quoted word must be in upper case. 
2a8c			if DEBUG_FORTH_WORDS_KEY 
2a8c				DMARK "LST" 
2a8c f5				push af  
2a8d 3a a1 2a			ld a, (.dmark)  
2a90 32 65 ee			ld (debug_mark),a  
2a93 3a a2 2a			ld a, (.dmark+1)  
2a96 32 66 ee			ld (debug_mark+1),a  
2a99 3a a3 2a			ld a, (.dmark+2)  
2a9c 32 67 ee			ld (debug_mark+2),a  
2a9f 18 03			jr .pastdmark  
2aa1 ..			.dmark: db "LST"  
2aa4 f1			.pastdmark: pop af  
2aa5			endm  
# End of macro DMARK
2aa5				CALLMONITOR 
2aa5 cd 6f ee			call debug_vector  
2aa8				endm  
# End of macro CALLMONITOR
2aa8			endif 
2aa8			 
2aa8				FORTH_DSP_VALUEHL 
2aa8 cd 95 1d			call macro_dsp_valuehl 
2aab				endm 
# End of macro FORTH_DSP_VALUEHL
2aab			 
2aab e5				push hl 
2aac				FORTH_DSP_POP 
2aac cd 4d 1e			call macro_forth_dsp_pop 
2aaf				endm 
# End of macro FORTH_DSP_POP
2aaf c1				pop bc 
2ab0			 
2ab0			; Start format of scratch string 
2ab0			 
2ab0 21 bb e2			ld hl, scratch 
2ab3			 
2ab3 3e 3a			ld a, ':' 
2ab5 77				ld (hl),a 
2ab6 23				inc hl 
2ab7 3e 20			ld a, ' ' 
2ab9 77				ld (hl), a 
2aba			 
2aba				; Get ptr to the word we need to look up 
2aba			 
2aba			;		FORTH_DSP_VALUEHL 
2aba				;v5 FORTH_DSP_VALUE 
2aba			; TODO type check 
2aba			;		inc hl    ; Skip type check  
2aba			;		push hl 
2aba			;		ex de, hl    ; put into DE 
2aba			 
2aba			 
2aba 21 1f 63			ld hl, baseram 
2abd				;ld hl, baseusermem 
2abd			 
2abd e5			push hl   ; sacreifical push 
2abe			 
2abe			.ldouscanm: 
2abe e1			pop hl 
2abf			.ldouscan: 
2abf			if DEBUG_FORTH_WORDS 
2abf				DMARK "LSs" 
2abf f5				push af  
2ac0 3a d4 2a			ld a, (.dmark)  
2ac3 32 65 ee			ld (debug_mark),a  
2ac6 3a d5 2a			ld a, (.dmark+1)  
2ac9 32 66 ee			ld (debug_mark+1),a  
2acc 3a d6 2a			ld a, (.dmark+2)  
2acf 32 67 ee			ld (debug_mark+2),a  
2ad2 18 03			jr .pastdmark  
2ad4 ..			.dmark: db "LSs"  
2ad7 f1			.pastdmark: pop af  
2ad8			endm  
# End of macro DMARK
2ad8				CALLMONITOR 
2ad8 cd 6f ee			call debug_vector  
2adb				endm  
# End of macro CALLMONITOR
2adb			endif 
2adb			; skip dict stub 
2adb cd bd 20			call forth_tok_next 
2ade			 
2ade			 
2ade			; while we have words to look for 
2ade			 
2ade 7e			ld a, (hl)      
2adf			if DEBUG_FORTH_WORDS 
2adf				DMARK "LSk" 
2adf f5				push af  
2ae0 3a f4 2a			ld a, (.dmark)  
2ae3 32 65 ee			ld (debug_mark),a  
2ae6 3a f5 2a			ld a, (.dmark+1)  
2ae9 32 66 ee			ld (debug_mark+1),a  
2aec 3a f6 2a			ld a, (.dmark+2)  
2aef 32 67 ee			ld (debug_mark+2),a  
2af2 18 03			jr .pastdmark  
2af4 ..			.dmark: db "LSk"  
2af7 f1			.pastdmark: pop af  
2af8			endm  
# End of macro DMARK
2af8				CALLMONITOR 
2af8 cd 6f ee			call debug_vector  
2afb				endm  
# End of macro CALLMONITOR
2afb			endif 
2afb				;cp WORD_SYS_END 
2afb				;jp z, .lunotfound 
2afb			 
2afb					; if we hit non uwords then gone too far 
2afb fe 01				cp WORD_SYS_UWORD 
2afd c2 3b 2c				jp nz, .lunotfound 
2b00			 
2b00				if DEBUG_FORTH_WORDS 
2b00					DMARK "LSu" 
2b00 f5				push af  
2b01 3a 15 2b			ld a, (.dmark)  
2b04 32 65 ee			ld (debug_mark),a  
2b07 3a 16 2b			ld a, (.dmark+1)  
2b0a 32 66 ee			ld (debug_mark+1),a  
2b0d 3a 17 2b			ld a, (.dmark+2)  
2b10 32 67 ee			ld (debug_mark+2),a  
2b13 18 03			jr .pastdmark  
2b15 ..			.dmark: db "LSu"  
2b18 f1			.pastdmark: pop af  
2b19			endm  
# End of macro DMARK
2b19					CALLMONITOR 
2b19 cd 6f ee			call debug_vector  
2b1c				endm  
# End of macro CALLMONITOR
2b1c				endif 
2b1c			 
2b1c					; found a uword but is it the one we want... 
2b1c			 
2b1c c5					push bc     ; uword to find is on bc 
2b1d d1					pop de 
2b1e			 
2b1e e5					push hl  ; to save the ptr 
2b1f			 
2b1f					; skip opcode 
2b1f 23					inc hl  
2b20					; skip next ptr 
2b20 23					inc hl  
2b21 23					inc hl 
2b22					; skip len 
2b22 23					inc hl 
2b23			 
2b23				if DEBUG_FORTH_WORDS 
2b23					DMARK "LSc" 
2b23 f5				push af  
2b24 3a 38 2b			ld a, (.dmark)  
2b27 32 65 ee			ld (debug_mark),a  
2b2a 3a 39 2b			ld a, (.dmark+1)  
2b2d 32 66 ee			ld (debug_mark+1),a  
2b30 3a 3a 2b			ld a, (.dmark+2)  
2b33 32 67 ee			ld (debug_mark+2),a  
2b36 18 03			jr .pastdmark  
2b38 ..			.dmark: db "LSc"  
2b3b f1			.pastdmark: pop af  
2b3c			endm  
# End of macro DMARK
2b3c					CALLMONITOR 
2b3c cd 6f ee			call debug_vector  
2b3f				endm  
# End of macro CALLMONITOR
2b3f				endif 
2b3f			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2b3f			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2b3f			; Nope that has gone the other way. It needs to be exact not on first zero 
2b3f			;		call strcmp 
2b3f c5					push bc 
2b40 cd a0 11				call StrictStrCmp 
2b43 c1					pop bc 
2b44 c2 be 2a				jp nz, .ldouscanm 
2b47				 
2b47			 
2b47			 
2b47					; we have a uword so push its name to the stack 
2b47			 
2b47			;	   	push hl  ; save so we can move to next dict block 
2b47 e1			pop hl 
2b48			 
2b48				if DEBUG_FORTH_WORDS 
2b48					DMARK "LSm" 
2b48 f5				push af  
2b49 3a 5d 2b			ld a, (.dmark)  
2b4c 32 65 ee			ld (debug_mark),a  
2b4f 3a 5e 2b			ld a, (.dmark+1)  
2b52 32 66 ee			ld (debug_mark+1),a  
2b55 3a 5f 2b			ld a, (.dmark+2)  
2b58 32 67 ee			ld (debug_mark+2),a  
2b5b 18 03			jr .pastdmark  
2b5d ..			.dmark: db "LSm"  
2b60 f1			.pastdmark: pop af  
2b61			endm  
# End of macro DMARK
2b61					CALLMONITOR 
2b61 cd 6f ee			call debug_vector  
2b64				endm  
# End of macro CALLMONITOR
2b64				endif 
2b64			 
2b64					; skip opcode 
2b64 23					inc hl  
2b65					; skip next ptr 
2b65 23					inc hl  
2b66 23					inc hl 
2b67					; skip len 
2b67 7e					ld a, (hl)   ; save length to add 
2b68				if DEBUG_FORTH_WORDS 
2b68					DMARK "LS2" 
2b68 f5				push af  
2b69 3a 7d 2b			ld a, (.dmark)  
2b6c 32 65 ee			ld (debug_mark),a  
2b6f 3a 7e 2b			ld a, (.dmark+1)  
2b72 32 66 ee			ld (debug_mark+1),a  
2b75 3a 7f 2b			ld a, (.dmark+2)  
2b78 32 67 ee			ld (debug_mark+2),a  
2b7b 18 03			jr .pastdmark  
2b7d ..			.dmark: db "LS2"  
2b80 f1			.pastdmark: pop af  
2b81			endm  
# End of macro DMARK
2b81					CALLMONITOR 
2b81 cd 6f ee			call debug_vector  
2b84				endm  
# End of macro CALLMONITOR
2b84				endif 
2b84			 
2b84					; save this location 
2b84				 
2b84 e5					push hl 
2b85			 
2b85 23					inc hl 
2b86 11 bd e2				ld de, scratch+2 
2b89 4f					ld c, a 
2b8a 06 00				ld b, 0 
2b8c			 
2b8c				if DEBUG_FORTH_WORDS 
2b8c					DMARK "LSn" 
2b8c f5				push af  
2b8d 3a a1 2b			ld a, (.dmark)  
2b90 32 65 ee			ld (debug_mark),a  
2b93 3a a2 2b			ld a, (.dmark+1)  
2b96 32 66 ee			ld (debug_mark+1),a  
2b99 3a a3 2b			ld a, (.dmark+2)  
2b9c 32 67 ee			ld (debug_mark+2),a  
2b9f 18 03			jr .pastdmark  
2ba1 ..			.dmark: db "LSn"  
2ba4 f1			.pastdmark: pop af  
2ba5			endm  
# End of macro DMARK
2ba5					CALLMONITOR 
2ba5 cd 6f ee			call debug_vector  
2ba8				endm  
# End of macro CALLMONITOR
2ba8				endif 
2ba8			 
2ba8					; copy uword name to scratch 
2ba8			 
2ba8			;		ldir 
2ba8			.licplw:	; copy uword name to scratch converting to lower case as we go 
2ba8 ed a0				ldi 
2baa 1b					dec de 
2bab 1a					ld a, (de) 
2bac cd 73 10				call to_lower 
2baf 12					ld (de),a 
2bb0 13					inc de 
2bb1 3e 00				ld a, 0 
2bb3 b9					cp c 
2bb4 20 f2				jr nz, .licplw 
2bb6			 
2bb6			 
2bb6			 
2bb6 1b					dec de 
2bb7 3e 20				ld a, ' '    ; change null to space 
2bb9 12					ld (de), a 
2bba			 
2bba 13					inc de 
2bbb			 
2bbb d5					push de 
2bbc c1					pop bc     ; move scratch pointer to end of word name and save it 
2bbd			 
2bbd e1					pop hl 
2bbe 7e					ld a, (hl) 
2bbf					;inc hl 
2bbf					; skip word string 
2bbf cd f5 0d				call addatohl 
2bc2			 
2bc2 23					inc hl 
2bc3			 
2bc3				if DEBUG_FORTH_WORDS 
2bc3					DMARK "LS3" 
2bc3 f5				push af  
2bc4 3a d8 2b			ld a, (.dmark)  
2bc7 32 65 ee			ld (debug_mark),a  
2bca 3a d9 2b			ld a, (.dmark+1)  
2bcd 32 66 ee			ld (debug_mark+1),a  
2bd0 3a da 2b			ld a, (.dmark+2)  
2bd3 32 67 ee			ld (debug_mark+2),a  
2bd6 18 03			jr .pastdmark  
2bd8 ..			.dmark: db "LS3"  
2bdb f1			.pastdmark: pop af  
2bdc			endm  
# End of macro DMARK
2bdc					CALLMONITOR 
2bdc cd 6f ee			call debug_vector  
2bdf				endm  
# End of macro CALLMONITOR
2bdf				endif 
2bdf					; should now be at the start of the machine code to setup the eval of the uword 
2bdf					; now locate the ptr to the string defintion 
2bdf			 
2bdf					; skip ld hl, 
2bdf					; then load the ptr 
2bdf			; TODO use get from hl ptr 
2bdf 23					inc hl 
2be0 5e					ld e, (hl) 
2be1 23					inc hl 
2be2 56					ld d, (hl) 
2be3 eb					ex de, hl 
2be4			 
2be4			 
2be4				if DEBUG_FORTH_WORDS 
2be4					DMARK "LSt" 
2be4 f5				push af  
2be5 3a f9 2b			ld a, (.dmark)  
2be8 32 65 ee			ld (debug_mark),a  
2beb 3a fa 2b			ld a, (.dmark+1)  
2bee 32 66 ee			ld (debug_mark+1),a  
2bf1 3a fb 2b			ld a, (.dmark+2)  
2bf4 32 67 ee			ld (debug_mark+2),a  
2bf7 18 03			jr .pastdmark  
2bf9 ..			.dmark: db "LSt"  
2bfc f1			.pastdmark: pop af  
2bfd			endm  
# End of macro DMARK
2bfd					CALLMONITOR 
2bfd cd 6f ee			call debug_vector  
2c00				endm  
# End of macro CALLMONITOR
2c00				endif 
2c00			 
2c00			; cant push right now due to tokenised strings  
2c00			 
2c00			; get the destination of where to copy this definition to. 
2c00			 
2c00 c5					push bc 
2c01 d1					pop de 
2c02			 
2c02 7e			.listl:         ld a,(hl) 
2c03 fe 00				cp 0 
2c05 28 09				jr z, .lreplsp     ; replace zero with space 
2c07					;cp FORTH_END_BUFFER 
2c07 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2c09 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2c0b				 
2c0b					; just copy this char as is then 
2c0b			 
2c0b 12					ld (de), a 
2c0c			 
2c0c 23			.listnxt:	inc hl 
2c0d 13					inc de 
2c0e 18 f2				jr .listl 
2c10			 
2c10 3e 20		.lreplsp:	ld a,' ' 
2c12 12					ld (de), a 
2c13 18 f7				jr .listnxt 
2c15			 
2c15			; close up uword def 
2c15			 
2c15			.listdone: 
2c15 12					ld (de), a 
2c16 13					inc de 
2c17 3e 00				ld a, 0 
2c19 12					ld (de), a 
2c1a			 
2c1a			; now have def so clean up and push to stack 
2c1a			 
2c1a 21 bb e2				ld hl, scratch 
2c1d				if DEBUG_FORTH_WORDS 
2c1d					DMARK "Ltp" 
2c1d f5				push af  
2c1e 3a 32 2c			ld a, (.dmark)  
2c21 32 65 ee			ld (debug_mark),a  
2c24 3a 33 2c			ld a, (.dmark+1)  
2c27 32 66 ee			ld (debug_mark+1),a  
2c2a 3a 34 2c			ld a, (.dmark+2)  
2c2d 32 67 ee			ld (debug_mark+2),a  
2c30 18 03			jr .pastdmark  
2c32 ..			.dmark: db "Ltp"  
2c35 f1			.pastdmark: pop af  
2c36			endm  
# End of macro DMARK
2c36					CALLMONITOR 
2c36 cd 6f ee			call debug_vector  
2c39				endm  
# End of macro CALLMONITOR
2c39				endif 
2c39			 
2c39 18 1f			jr .listpush 
2c3b			 
2c3b			;.lnuword:	pop hl 
2c3b			;		call forth_tok_next 
2c3b			;		jp .ldouscan  
2c3b			 
2c3b			.lunotfound:		  
2c3b			 
2c3b				if DEBUG_FORTH_WORDS 
2c3b					DMARK "LSn" 
2c3b f5				push af  
2c3c 3a 50 2c			ld a, (.dmark)  
2c3f 32 65 ee			ld (debug_mark),a  
2c42 3a 51 2c			ld a, (.dmark+1)  
2c45 32 66 ee			ld (debug_mark+1),a  
2c48 3a 52 2c			ld a, (.dmark+2)  
2c4b 32 67 ee			ld (debug_mark+2),a  
2c4e 18 03			jr .pastdmark  
2c50 ..			.dmark: db "LSn"  
2c53 f1			.pastdmark: pop af  
2c54			endm  
# End of macro DMARK
2c54					CALLMONITOR 
2c54 cd 6f ee			call debug_vector  
2c57				endm  
# End of macro CALLMONITOR
2c57				endif 
2c57			 
2c57					 
2c57			;		FORTH_DSP_POP 
2c57			;		ld hl, .luno 
2c57			 
2c57					NEXTW			 
2c57 c3 80 1f			jp macro_next 
2c5a				endm 
# End of macro NEXTW
2c5a			 
2c5a			.listpush: 
2c5a				if DEBUG_FORTH_WORDS 
2c5a					DMARK "LS>" 
2c5a f5				push af  
2c5b 3a 6f 2c			ld a, (.dmark)  
2c5e 32 65 ee			ld (debug_mark),a  
2c61 3a 70 2c			ld a, (.dmark+1)  
2c64 32 66 ee			ld (debug_mark+1),a  
2c67 3a 71 2c			ld a, (.dmark+2)  
2c6a 32 67 ee			ld (debug_mark+2),a  
2c6d 18 03			jr .pastdmark  
2c6f ..			.dmark: db "LS>"  
2c72 f1			.pastdmark: pop af  
2c73			endm  
# End of macro DMARK
2c73					CALLMONITOR 
2c73 cd 6f ee			call debug_vector  
2c76				endm  
# End of macro CALLMONITOR
2c76				endif 
2c76 cd fe 1b				call forth_push_str 
2c79			 
2c79			 
2c79			 
2c79					NEXTW 
2c79 c3 80 1f			jp macro_next 
2c7c				endm 
# End of macro NEXTW
2c7c			 
2c7c			;.luno:    db "Word not found",0 
2c7c			 
2c7c			 
2c7c			 
2c7c			 
2c7c			 
2c7c			;		push hl   ; save pointer to start of uword def string 
2c7c			; 
2c7c			;; look for FORTH_EOL_LINE 
2c7c			;		ld a, FORTH_END_BUFFER 
2c7c			;		call strlent 
2c7c			; 
2c7c			;		inc hl		 ; space for coln def 
2c7c			;		inc hl 
2c7c			;		inc hl          ; space for terms 
2c7c			;		inc hl 
2c7c			; 
2c7c			;		ld a, 20   ; TODO get actual length 
2c7c			;		call addatohl    ; include a random amount of room for the uword name 
2c7c			; 
2c7c			;		 
2c7c			;	if DEBUG_FORTH_WORDS 
2c7c			;		DMARK "Lt1" 
2c7c			;		CALLMONITOR 
2c7c			;	endif 
2c7c			;		 
2c7c			; 
2c7c			;; malloc space for the string because we cant change it 
2c7c			; 
2c7c			;		call malloc 
2c7c			;	if DEBUG_FORTH_MALLOC_GUARD 
2c7c			;		push af 
2c7c			;		call ishlzero 
2c7c			;		pop af 
2c7c			;		 
2c7c			;		call z,malloc_error 
2c7c			;	endif 
2c7c			; 
2c7c			;	if DEBUG_FORTH_WORDS 
2c7c			;		DMARK "Lt2" 
2c7c			;		CALLMONITOR 
2c7c			;	endif 
2c7c			;		pop de 
2c7c			;		push hl    ; push the malloc to release later 
2c7c			;		push hl   ;  push back a copy for the later stack push 
2c7c			;		 
2c7c			;; copy the string swapping out the zero terms for spaces 
2c7c			; 
2c7c			;		; de has our source 
2c7c			;		; hl has our dest 
2c7c			; 
2c7c			;; add the coln def 
2c7c			; 
2c7c			;		ld a, ':' 
2c7c			;		ld (hl), a 
2c7c			;		inc hl 
2c7c			;		ld a, ' ' 
2c7c			;		ld (hl), a 
2c7c			;		inc hl 
2c7c			; 
2c7c			;; add the uname word 
2c7c			;		push de   ; save our string for now 
2c7c			;		ex de, hl 
2c7c			; 
2c7c			;		FORTH_DSP_VALUE 
2c7c			;		;v5 FORTH_DSP_VALUE 
2c7c			; 
2c7c			;		inc hl   ; skip type but we know by now this is OK 
2c7c			; 
2c7c			;.luword:	ld a,(hl) 
2c7c			;		cp 0 
2c7c			;		jr z, .luword2 
2c7c			;		ld (de), a 
2c7c			;		inc de 
2c7c			;		inc hl 
2c7c			;		jr .luword 
2c7c			; 
2c7c			;.luword2:	ld a, ' ' 
2c7c			;		ld (de), a 
2c7c			;;		inc hl 
2c7c			;;		inc de 
2c7c			;;		ld (de), a 
2c7c			;;		inc hl 
2c7c			;		inc de 
2c7c			; 
2c7c			;		ex de, hl 
2c7c			;		pop de 
2c7c			;		 
2c7c			;		 
2c7c			; 
2c7c			;; detoken that string and copy it 
2c7c			; 
2c7c			;	if DEBUG_FORTH_WORDS 
2c7c			;		DMARK "Lt2" 
2c7c			;		CALLMONITOR 
2c7c			;	endif 
2c7c			;.ldetok:	ld a, (de) 
2c7c			;		cp FORTH_END_BUFFER 
2c7c			;		jr z, .ldetokend 
2c7c			;		; swap out any zero term for space 
2c7c			;		cp 0 
2c7c			;		jr nz, .ldetoknext 
2c7c			;		ld a, ' ' 
2c7c			; 
2c7c			;	if DEBUG_FORTH_WORDS 
2c7c			;		DMARK "LtS" 
2c7c			;		CALLMONITOR 
2c7c			;	endif 
2c7c			;.ldetoknext:	ld (hl), a 
2c7c			;		inc de 
2c7c			;		inc hl 
2c7c			;		jr .ldetok 
2c7c			; 
2c7c			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2c7c			;		ld (hl), a  
2c7c			; 
2c7c			;; free that temp malloc 
2c7c			; 
2c7c			;		pop hl    
2c7c			; 
2c7c			;	if DEBUG_FORTH_WORDS 
2c7c			;		DMARK "Lt4" 
2c7c			;		CALLMONITOR 
2c7c			;	endif 
2c7c			;		call forth_apushstrhl 
2c7c			; 
2c7c			;		; get rid of temp malloc area 
2c7c			; 
2c7c			;		pop hl 
2c7c			;		call free 
2c7c			; 
2c7c			;		jr .ludone 
2c7c			; 
2c7c			;.lnuword:	pop hl 
2c7c			;		call forth_tok_next 
2c7c			;		jp .ldouscan  
2c7c			; 
2c7c			;.ludone:		 pop hl 
2c7c			; 
2c7c					NEXTW 
2c7c c3 80 1f			jp macro_next 
2c7f				endm 
# End of macro NEXTW
2c7f			 
2c7f			.FORGET: 
2c7f				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2c7f 5d				db WORD_SYS_CORE+73             
2c80 f8 2c			dw .NOP            
2c82 07				db 6 + 1 
2c83 .. 00			db "FORGET",0              
2c8a				endm 
# End of macro CWHEAD
2c8a			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2c8a			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2c8a			; | |  
2c8a			; | | e.g. "MORE" forget 
2c8a					if DEBUG_FORTH_WORDS_KEY 
2c8a						DMARK "FRG" 
2c8a f5				push af  
2c8b 3a 9f 2c			ld a, (.dmark)  
2c8e 32 65 ee			ld (debug_mark),a  
2c91 3a a0 2c			ld a, (.dmark+1)  
2c94 32 66 ee			ld (debug_mark+1),a  
2c97 3a a1 2c			ld a, (.dmark+2)  
2c9a 32 67 ee			ld (debug_mark+2),a  
2c9d 18 03			jr .pastdmark  
2c9f ..			.dmark: db "FRG"  
2ca2 f1			.pastdmark: pop af  
2ca3			endm  
# End of macro DMARK
2ca3						CALLMONITOR 
2ca3 cd 6f ee			call debug_vector  
2ca6				endm  
# End of macro CALLMONITOR
2ca6					endif 
2ca6			 
2ca6				; find uword 
2ca6			        ; update start of word with "_" 
2ca6				; replace uword with deleted flag 
2ca6			 
2ca6			 
2ca6			;	if DEBUG_FORTH_WORDS 
2ca6			;		DMARK "FOG" 
2ca6			;		CALLMONITOR 
2ca6			;	endif 
2ca6			 
2ca6			 
2ca6					; Get ptr to the word we need to look up 
2ca6			 
2ca6					FORTH_DSP_VALUEHL 
2ca6 cd 95 1d			call macro_dsp_valuehl 
2ca9				endm 
# End of macro FORTH_DSP_VALUEHL
2ca9					;v5 FORTH_DSP_VALUE 
2ca9				; TODO type check 
2ca9			;		inc hl    ; Skip type check  
2ca9 e5					push hl 
2caa c1					pop bc 
2cab			;		ex de, hl    ; put into DE 
2cab			 
2cab			 
2cab 21 1f 63				ld hl, baseram 
2cae					;ld hl, baseusermem 
2cae			 
2cae				; skip dict stub 
2cae			;	call forth_tok_next 
2cae e5			push hl   ; sacreifical push 
2caf			 
2caf			.fldouscanm: 
2caf e1				pop hl 
2cb0			.fldouscan: 
2cb0			;	if DEBUG_FORTH_WORDS 
2cb0			;		DMARK "LSs" 
2cb0			;		CALLMONITOR 
2cb0			;	endif 
2cb0				; skip dict stub 
2cb0 cd bd 20				call forth_tok_next 
2cb3			 
2cb3			 
2cb3			; while we have words to look for 
2cb3			 
2cb3 7e				ld a, (hl)      
2cb4			;	if DEBUG_FORTH_WORDS 
2cb4			;		DMARK "LSk" 
2cb4			;		CALLMONITOR 
2cb4			;	endif 
2cb4 fe 00				cp WORD_SYS_END 
2cb6 ca f2 2c				jp z, .flunotfound 
2cb9 fe 01				cp WORD_SYS_UWORD 
2cbb c2 b0 2c				jp nz, .fldouscan 
2cbe			 
2cbe			;	if DEBUG_FORTH_WORDS 
2cbe			;		DMARK "LSu" 
2cbe			;		CALLMONITOR 
2cbe			;	endif 
2cbe			 
2cbe					; found a uword but is it the one we want... 
2cbe			 
2cbe c5					push bc     ; uword to find is on bc 
2cbf d1					pop de 
2cc0			 
2cc0 e5					push hl  ; to save the ptr 
2cc1			 
2cc1					; skip opcode 
2cc1 23					inc hl  
2cc2					; skip next ptr 
2cc2 23					inc hl  
2cc3 23					inc hl 
2cc4					; skip len 
2cc4 23					inc hl 
2cc5			 
2cc5			;	if DEBUG_FORTH_WORDS 
2cc5			;		DMARK "LSc" 
2cc5			;		CALLMONITOR 
2cc5			;	endif 
2cc5 cd 93 11				call strcmp 
2cc8 c2 af 2c				jp nz, .fldouscanm 
2ccb			; 
2ccb			; 
2ccb			;; while we have words to look for 
2ccb			; 
2ccb			;.fdouscan:	ld a, (hl)      
2ccb			;	if DEBUG_FORTH_WORDS 
2ccb			;		DMARK "LSs" 
2ccb			;		CALLMONITOR 
2ccb			;	endif 
2ccb			;		cp WORD_SYS_END 
2ccb			;		jp z, .fudone 
2ccb			;		cp WORD_SYS_UWORD 
2ccb			;		jp nz, .fnuword 
2ccb			; 
2ccb			;	if DEBUG_FORTH_WORDS 
2ccb			;		DMARK "FGu" 
2ccb			;		CALLMONITOR 
2ccb			;	endif 
2ccb			; 
2ccb			;		; found a uword but is it the one we want... 
2ccb			; 
2ccb			; 
2ccb			;	        pop de   ; get back the dsp name 
2ccb			;		push de 
2ccb			; 
2ccb			;		push hl  ; to save the ptr 
2ccb			; 
2ccb			;		; skip opcode 
2ccb			;		inc hl  
2ccb			;		; skip next ptr 
2ccb			;		inc hl  
2ccb			;		inc hl 
2ccb			;		; skip len 
2ccb			;		inc hl 
2ccb			; 
2ccb			;	if DEBUG_FORTH_WORDS 
2ccb			;		DMARK "FGc" 
2ccb			;		CALLMONITOR 
2ccb			;	endif 
2ccb			;		call strcmp 
2ccb			;		jp nz, .fnuword 
2ccb			 
2ccb			 
2ccb e1			pop hl 
2ccc			 
2ccc				 
2ccc				if DEBUG_FORTH_WORDS 
2ccc					DMARK "FGm" 
2ccc f5				push af  
2ccd 3a e1 2c			ld a, (.dmark)  
2cd0 32 65 ee			ld (debug_mark),a  
2cd3 3a e2 2c			ld a, (.dmark+1)  
2cd6 32 66 ee			ld (debug_mark+1),a  
2cd9 3a e3 2c			ld a, (.dmark+2)  
2cdc 32 67 ee			ld (debug_mark+2),a  
2cdf 18 03			jr .pastdmark  
2ce1 ..			.dmark: db "FGm"  
2ce4 f1			.pastdmark: pop af  
2ce5			endm  
# End of macro DMARK
2ce5					CALLMONITOR 
2ce5 cd 6f ee			call debug_vector  
2ce8				endm  
# End of macro CALLMONITOR
2ce8				endif 
2ce8			 
2ce8			 
2ce8			 
2ce8					; we have a uword so push its name to the stack 
2ce8			 
2ce8			;	   	push hl  ; save so we can move to next dict block 
2ce8			;pop hl 
2ce8			 
2ce8					; update opcode to deleted 
2ce8 3e 03				ld a, WORD_SYS_DELETED 
2cea 77					ld (hl), a 
2ceb			 
2ceb 23					inc hl  
2cec					; skip next ptr 
2cec 23					inc hl  
2ced 23					inc hl 
2cee					; skip len 
2cee 23					inc hl 
2cef			 
2cef					; TODO change parser to skip deleted words but for now mark it out 
2cef 3e 5f				ld a, "_" 
2cf1 77					ld  (hl),a 
2cf2			 
2cf2			;		jr .fudone 
2cf2			; 
2cf2			;.fnuword:	pop hl 
2cf2			;		call forth_tok_next 
2cf2			;		jp .fdouscan  
2cf2			 
2cf2			.flunotfound:		  
2cf2			 
2cf2			 
2cf2					 
2cf2					FORTH_DSP_POP 
2cf2 cd 4d 1e			call macro_forth_dsp_pop 
2cf5				endm 
# End of macro FORTH_DSP_POP
2cf5			;		ld hl, .luno 
2cf5			;.fudone:		 pop hl 
2cf5					NEXTW 
2cf5 c3 80 1f			jp macro_next 
2cf8				endm 
# End of macro NEXTW
2cf8			.NOP: 
2cf8				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2cf8 61				db WORD_SYS_CORE+77             
2cf9 1f 2d			dw .COMO            
2cfb 04				db 3 + 1 
2cfc .. 00			db "NOP",0              
2d00				endm 
# End of macro CWHEAD
2d00			; | NOP (  --  ) Do nothing | DONE 
2d00					if DEBUG_FORTH_WORDS_KEY 
2d00						DMARK "NOP" 
2d00 f5				push af  
2d01 3a 15 2d			ld a, (.dmark)  
2d04 32 65 ee			ld (debug_mark),a  
2d07 3a 16 2d			ld a, (.dmark+1)  
2d0a 32 66 ee			ld (debug_mark+1),a  
2d0d 3a 17 2d			ld a, (.dmark+2)  
2d10 32 67 ee			ld (debug_mark+2),a  
2d13 18 03			jr .pastdmark  
2d15 ..			.dmark: db "NOP"  
2d18 f1			.pastdmark: pop af  
2d19			endm  
# End of macro DMARK
2d19						CALLMONITOR 
2d19 cd 6f ee			call debug_vector  
2d1c				endm  
# End of macro CALLMONITOR
2d1c					endif 
2d1c				       NEXTW 
2d1c c3 80 1f			jp macro_next 
2d1f				endm 
# End of macro NEXTW
2d1f			.COMO: 
2d1f				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2d1f 6e				db WORD_SYS_CORE+90             
2d20 71 2d			dw .COMC            
2d22 02				db 1 + 1 
2d23 .. 00			db "(",0              
2d25				endm 
# End of macro CWHEAD
2d25			; | ( ( -- )  Start of comment | DONE 
2d25			 
2d25			 
2d25 2a bc e5				ld hl, ( os_tok_ptr) 
2d28 11 6c 2d			ld de, .closepar 
2d2b					 
2d2b					if DEBUG_FORTH_WORDS 
2d2b						DMARK ").." 
2d2b f5				push af  
2d2c 3a 40 2d			ld a, (.dmark)  
2d2f 32 65 ee			ld (debug_mark),a  
2d32 3a 41 2d			ld a, (.dmark+1)  
2d35 32 66 ee			ld (debug_mark+1),a  
2d38 3a 42 2d			ld a, (.dmark+2)  
2d3b 32 67 ee			ld (debug_mark+2),a  
2d3e 18 03			jr .pastdmark  
2d40 ..			.dmark: db ").."  
2d43 f1			.pastdmark: pop af  
2d44			endm  
# End of macro DMARK
2d44						CALLMONITOR 
2d44 cd 6f ee			call debug_vector  
2d47				endm  
# End of macro CALLMONITOR
2d47					endif 
2d47 cd 87 20			call findnexttok  
2d4a			 
2d4a					if DEBUG_FORTH_WORDS 
2d4a						DMARK "IF5" 
2d4a f5				push af  
2d4b 3a 5f 2d			ld a, (.dmark)  
2d4e 32 65 ee			ld (debug_mark),a  
2d51 3a 60 2d			ld a, (.dmark+1)  
2d54 32 66 ee			ld (debug_mark+1),a  
2d57 3a 61 2d			ld a, (.dmark+2)  
2d5a 32 67 ee			ld (debug_mark+2),a  
2d5d 18 03			jr .pastdmark  
2d5f ..			.dmark: db "IF5"  
2d62 f1			.pastdmark: pop af  
2d63			endm  
# End of macro DMARK
2d63						CALLMONITOR 
2d63 cd 6f ee			call debug_vector  
2d66				endm  
# End of macro CALLMONITOR
2d66					endif 
2d66				; replace below with ) exec using tok_ptr 
2d66 22 bc e5			ld (os_tok_ptr), hl 
2d69 c3 09 20			jp exec1 
2d6c			 
2d6c .. 00			.closepar:   db ")",0 
2d6e			 
2d6e				       NEXTW 
2d6e c3 80 1f			jp macro_next 
2d71				endm 
# End of macro NEXTW
2d71			.COMC: 
2d71				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2d71 6f				db WORD_SYS_CORE+91             
2d72 7a 2d			dw .SCRATCH            
2d74 02				db 1 + 1 
2d75 .. 00			db ")",0              
2d77				endm 
# End of macro CWHEAD
2d77			; | ) ( -- )  End of comment |  DONE  
2d77				       NEXTW 
2d77 c3 80 1f			jp macro_next 
2d7a				endm 
# End of macro NEXTW
2d7a			 
2d7a			.SCRATCH: 
2d7a				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2d7a 6f				db WORD_SYS_CORE+91             
2d7b b5 2d			dw .INC            
2d7d 08				db 7 + 1 
2d7e .. 00			db "SCRATCH",0              
2d86				endm 
# End of macro CWHEAD
2d86			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2d86			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2d86			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2d86			; | |  
2d86			; | | e.g.    : score $00 scratch ; 
2d86			; | |  
2d86			; | | $00 score ! 
2d86			; | | $01 score +! 
2d86			; | |  
2d86			; | | e.g.   : varword $0a scratch ;  
2d86			; | | 
2d86			; | | $8000 varword ! 
2d86					if DEBUG_FORTH_WORDS_KEY 
2d86						DMARK "SCR" 
2d86 f5				push af  
2d87 3a 9b 2d			ld a, (.dmark)  
2d8a 32 65 ee			ld (debug_mark),a  
2d8d 3a 9c 2d			ld a, (.dmark+1)  
2d90 32 66 ee			ld (debug_mark+1),a  
2d93 3a 9d 2d			ld a, (.dmark+2)  
2d96 32 67 ee			ld (debug_mark+2),a  
2d99 18 03			jr .pastdmark  
2d9b ..			.dmark: db "SCR"  
2d9e f1			.pastdmark: pop af  
2d9f			endm  
# End of macro DMARK
2d9f						CALLMONITOR 
2d9f cd 6f ee			call debug_vector  
2da2				endm  
# End of macro CALLMONITOR
2da2					endif 
2da2			 
2da2					FORTH_DSP_VALUEHL 
2da2 cd 95 1d			call macro_dsp_valuehl 
2da5				endm 
# End of macro FORTH_DSP_VALUEHL
2da5				 
2da5					FORTH_DSP_POP 
2da5 cd 4d 1e			call macro_forth_dsp_pop 
2da8				endm 
# End of macro FORTH_DSP_POP
2da8			 
2da8 7d					ld a, l 
2da9 21 e0 e7				ld hl, os_var_array 
2dac cd f5 0d				call addatohl 
2daf			 
2daf cd 90 1b				call forth_push_numhl 
2db2			 
2db2				       NEXTW 
2db2 c3 80 1f			jp macro_next 
2db5				endm 
# End of macro NEXTW
2db5			 
2db5			.INC: 
2db5				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2db5 6f				db WORD_SYS_CORE+91             
2db6 0b 2e			dw .DEC            
2db8 03				db 2 + 1 
2db9 .. 00			db "+!",0              
2dbc				endm 
# End of macro CWHEAD
2dbc			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2dbc					if DEBUG_FORTH_WORDS_KEY 
2dbc						DMARK "+s_" 
2dbc f5				push af  
2dbd 3a d1 2d			ld a, (.dmark)  
2dc0 32 65 ee			ld (debug_mark),a  
2dc3 3a d2 2d			ld a, (.dmark+1)  
2dc6 32 66 ee			ld (debug_mark+1),a  
2dc9 3a d3 2d			ld a, (.dmark+2)  
2dcc 32 67 ee			ld (debug_mark+2),a  
2dcf 18 03			jr .pastdmark  
2dd1 ..			.dmark: db "+s_"  
2dd4 f1			.pastdmark: pop af  
2dd5			endm  
# End of macro DMARK
2dd5						CALLMONITOR 
2dd5 cd 6f ee			call debug_vector  
2dd8				endm  
# End of macro CALLMONITOR
2dd8					endif 
2dd8			 
2dd8					FORTH_DSP_VALUEHL 
2dd8 cd 95 1d			call macro_dsp_valuehl 
2ddb				endm 
# End of macro FORTH_DSP_VALUEHL
2ddb			 
2ddb e5					push hl   ; save address 
2ddc			 
2ddc					FORTH_DSP_POP 
2ddc cd 4d 1e			call macro_forth_dsp_pop 
2ddf				endm 
# End of macro FORTH_DSP_POP
2ddf			 
2ddf					FORTH_DSP_VALUEHL 
2ddf cd 95 1d			call macro_dsp_valuehl 
2de2				endm 
# End of macro FORTH_DSP_VALUEHL
2de2			 
2de2 e5					push hl 
2de3					FORTH_DSP_POP 
2de3 cd 4d 1e			call macro_forth_dsp_pop 
2de6				endm 
# End of macro FORTH_DSP_POP
2de6 e1					pop hl 
2de7			 
2de7					; hl contains value to add to byte at a 
2de7				 
2de7 eb					ex de, hl 
2de8			 
2de8 e1					pop hl 
2de9			 
2de9					if DEBUG_FORTH_WORDS 
2de9						DMARK "INC" 
2de9 f5				push af  
2dea 3a fe 2d			ld a, (.dmark)  
2ded 32 65 ee			ld (debug_mark),a  
2df0 3a ff 2d			ld a, (.dmark+1)  
2df3 32 66 ee			ld (debug_mark+1),a  
2df6 3a 00 2e			ld a, (.dmark+2)  
2df9 32 67 ee			ld (debug_mark+2),a  
2dfc 18 03			jr .pastdmark  
2dfe ..			.dmark: db "INC"  
2e01 f1			.pastdmark: pop af  
2e02			endm  
# End of macro DMARK
2e02						CALLMONITOR 
2e02 cd 6f ee			call debug_vector  
2e05				endm  
# End of macro CALLMONITOR
2e05					endif 
2e05			 
2e05 7e					ld a,(hl) 
2e06 83					add e 
2e07 77					ld (hl),a 
2e08			 
2e08			 
2e08			 
2e08				       NEXTW 
2e08 c3 80 1f			jp macro_next 
2e0b				endm 
# End of macro NEXTW
2e0b			 
2e0b			.DEC: 
2e0b				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2e0b 6f				db WORD_SYS_CORE+91             
2e0c 5f 2e			dw .INC2            
2e0e 03				db 2 + 1 
2e0f .. 00			db "-!",0              
2e12				endm 
# End of macro CWHEAD
2e12			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2e12					if DEBUG_FORTH_WORDS_KEY 
2e12						DMARK "-s_" 
2e12 f5				push af  
2e13 3a 27 2e			ld a, (.dmark)  
2e16 32 65 ee			ld (debug_mark),a  
2e19 3a 28 2e			ld a, (.dmark+1)  
2e1c 32 66 ee			ld (debug_mark+1),a  
2e1f 3a 29 2e			ld a, (.dmark+2)  
2e22 32 67 ee			ld (debug_mark+2),a  
2e25 18 03			jr .pastdmark  
2e27 ..			.dmark: db "-s_"  
2e2a f1			.pastdmark: pop af  
2e2b			endm  
# End of macro DMARK
2e2b						CALLMONITOR 
2e2b cd 6f ee			call debug_vector  
2e2e				endm  
# End of macro CALLMONITOR
2e2e					endif 
2e2e			 
2e2e					FORTH_DSP_VALUEHL 
2e2e cd 95 1d			call macro_dsp_valuehl 
2e31				endm 
# End of macro FORTH_DSP_VALUEHL
2e31			 
2e31 e5					push hl   ; save address 
2e32			 
2e32					FORTH_DSP_POP 
2e32 cd 4d 1e			call macro_forth_dsp_pop 
2e35				endm 
# End of macro FORTH_DSP_POP
2e35			 
2e35					FORTH_DSP_VALUEHL 
2e35 cd 95 1d			call macro_dsp_valuehl 
2e38				endm 
# End of macro FORTH_DSP_VALUEHL
2e38			 
2e38					; hl contains value to add to byte at a 
2e38				 
2e38 eb					ex de, hl 
2e39			 
2e39 e1					pop hl 
2e3a			 
2e3a					if DEBUG_FORTH_WORDS 
2e3a						DMARK "DEC" 
2e3a f5				push af  
2e3b 3a 4f 2e			ld a, (.dmark)  
2e3e 32 65 ee			ld (debug_mark),a  
2e41 3a 50 2e			ld a, (.dmark+1)  
2e44 32 66 ee			ld (debug_mark+1),a  
2e47 3a 51 2e			ld a, (.dmark+2)  
2e4a 32 67 ee			ld (debug_mark+2),a  
2e4d 18 03			jr .pastdmark  
2e4f ..			.dmark: db "DEC"  
2e52 f1			.pastdmark: pop af  
2e53			endm  
# End of macro DMARK
2e53						CALLMONITOR 
2e53 cd 6f ee			call debug_vector  
2e56				endm  
# End of macro CALLMONITOR
2e56					endif 
2e56			 
2e56 7e					ld a,(hl) 
2e57 93					sub e 
2e58 77					ld (hl),a 
2e59			 
2e59			 
2e59					FORTH_DSP_POP 
2e59 cd 4d 1e			call macro_forth_dsp_pop 
2e5c				endm 
# End of macro FORTH_DSP_POP
2e5c			 
2e5c				       NEXTW 
2e5c c3 80 1f			jp macro_next 
2e5f				endm 
# End of macro NEXTW
2e5f			 
2e5f			.INC2: 
2e5f				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2e5f 6f				db WORD_SYS_CORE+91             
2e60 0c 2f			dw .DEC2            
2e62 04				db 3 + 1 
2e63 .. 00			db "+2!",0              
2e67				endm 
# End of macro CWHEAD
2e67			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2e67			 
2e67					if DEBUG_FORTH_WORDS_KEY 
2e67						DMARK "+2s" 
2e67 f5				push af  
2e68 3a 7c 2e			ld a, (.dmark)  
2e6b 32 65 ee			ld (debug_mark),a  
2e6e 3a 7d 2e			ld a, (.dmark+1)  
2e71 32 66 ee			ld (debug_mark+1),a  
2e74 3a 7e 2e			ld a, (.dmark+2)  
2e77 32 67 ee			ld (debug_mark+2),a  
2e7a 18 03			jr .pastdmark  
2e7c ..			.dmark: db "+2s"  
2e7f f1			.pastdmark: pop af  
2e80			endm  
# End of macro DMARK
2e80						CALLMONITOR 
2e80 cd 6f ee			call debug_vector  
2e83				endm  
# End of macro CALLMONITOR
2e83					endif 
2e83			 
2e83					; Address 
2e83			 
2e83					FORTH_DSP_VALUEHL 
2e83 cd 95 1d			call macro_dsp_valuehl 
2e86				endm 
# End of macro FORTH_DSP_VALUEHL
2e86			 
2e86 e5					push hl    ; save address 
2e87			 
2e87					; load content into de 
2e87			 
2e87 5e					ld e,(hl) 
2e88 23					inc hl 
2e89 56					ld d, (hl) 
2e8a			 
2e8a					if DEBUG_FORTH_WORDS 
2e8a						DMARK "+2a" 
2e8a f5				push af  
2e8b 3a 9f 2e			ld a, (.dmark)  
2e8e 32 65 ee			ld (debug_mark),a  
2e91 3a a0 2e			ld a, (.dmark+1)  
2e94 32 66 ee			ld (debug_mark+1),a  
2e97 3a a1 2e			ld a, (.dmark+2)  
2e9a 32 67 ee			ld (debug_mark+2),a  
2e9d 18 03			jr .pastdmark  
2e9f ..			.dmark: db "+2a"  
2ea2 f1			.pastdmark: pop af  
2ea3			endm  
# End of macro DMARK
2ea3						CALLMONITOR 
2ea3 cd 6f ee			call debug_vector  
2ea6				endm  
# End of macro CALLMONITOR
2ea6					endif 
2ea6			 
2ea6					FORTH_DSP_POP 
2ea6 cd 4d 1e			call macro_forth_dsp_pop 
2ea9				endm 
# End of macro FORTH_DSP_POP
2ea9			 
2ea9					; Get value to add 
2ea9			 
2ea9					FORTH_DSP_VALUE 
2ea9 cd 7e 1d			call macro_forth_dsp_value 
2eac				endm 
# End of macro FORTH_DSP_VALUE
2eac			 
2eac					if DEBUG_FORTH_WORDS 
2eac						DMARK "+2v" 
2eac f5				push af  
2ead 3a c1 2e			ld a, (.dmark)  
2eb0 32 65 ee			ld (debug_mark),a  
2eb3 3a c2 2e			ld a, (.dmark+1)  
2eb6 32 66 ee			ld (debug_mark+1),a  
2eb9 3a c3 2e			ld a, (.dmark+2)  
2ebc 32 67 ee			ld (debug_mark+2),a  
2ebf 18 03			jr .pastdmark  
2ec1 ..			.dmark: db "+2v"  
2ec4 f1			.pastdmark: pop af  
2ec5			endm  
# End of macro DMARK
2ec5						CALLMONITOR 
2ec5 cd 6f ee			call debug_vector  
2ec8				endm  
# End of macro CALLMONITOR
2ec8					endif 
2ec8			 
2ec8 19					add hl, de 
2ec9			 
2ec9					if DEBUG_FORTH_WORDS 
2ec9						DMARK "+2+" 
2ec9 f5				push af  
2eca 3a de 2e			ld a, (.dmark)  
2ecd 32 65 ee			ld (debug_mark),a  
2ed0 3a df 2e			ld a, (.dmark+1)  
2ed3 32 66 ee			ld (debug_mark+1),a  
2ed6 3a e0 2e			ld a, (.dmark+2)  
2ed9 32 67 ee			ld (debug_mark+2),a  
2edc 18 03			jr .pastdmark  
2ede ..			.dmark: db "+2+"  
2ee1 f1			.pastdmark: pop af  
2ee2			endm  
# End of macro DMARK
2ee2						CALLMONITOR 
2ee2 cd 6f ee			call debug_vector  
2ee5				endm  
# End of macro CALLMONITOR
2ee5					endif 
2ee5			 
2ee5					; move result to de 
2ee5			 
2ee5 eb					ex de, hl 
2ee6			 
2ee6					; Address 
2ee6			 
2ee6 e1					pop hl 
2ee7			 
2ee7					; save it back 
2ee7			 
2ee7 73					ld (hl), e 
2ee8 23					inc hl 
2ee9 72					ld (hl), d 
2eea			 
2eea					if DEBUG_FORTH_WORDS 
2eea						DMARK "+2e" 
2eea f5				push af  
2eeb 3a ff 2e			ld a, (.dmark)  
2eee 32 65 ee			ld (debug_mark),a  
2ef1 3a 00 2f			ld a, (.dmark+1)  
2ef4 32 66 ee			ld (debug_mark+1),a  
2ef7 3a 01 2f			ld a, (.dmark+2)  
2efa 32 67 ee			ld (debug_mark+2),a  
2efd 18 03			jr .pastdmark  
2eff ..			.dmark: db "+2e"  
2f02 f1			.pastdmark: pop af  
2f03			endm  
# End of macro DMARK
2f03						CALLMONITOR 
2f03 cd 6f ee			call debug_vector  
2f06				endm  
# End of macro CALLMONITOR
2f06					endif 
2f06			 
2f06			 
2f06			 
2f06					FORTH_DSP_POP 
2f06 cd 4d 1e			call macro_forth_dsp_pop 
2f09				endm 
# End of macro FORTH_DSP_POP
2f09			 
2f09			 
2f09				       NEXTW 
2f09 c3 80 1f			jp macro_next 
2f0c				endm 
# End of macro NEXTW
2f0c			 
2f0c			.DEC2: 
2f0c				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2f0c 6f				db WORD_SYS_CORE+91             
2f0d bb 2f			dw .GET2            
2f0f 04				db 3 + 1 
2f10 .. 00			db "-2!",0              
2f14				endm 
# End of macro CWHEAD
2f14			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2f14			 
2f14			 
2f14					if DEBUG_FORTH_WORDS_KEY 
2f14						DMARK "-2s" 
2f14 f5				push af  
2f15 3a 29 2f			ld a, (.dmark)  
2f18 32 65 ee			ld (debug_mark),a  
2f1b 3a 2a 2f			ld a, (.dmark+1)  
2f1e 32 66 ee			ld (debug_mark+1),a  
2f21 3a 2b 2f			ld a, (.dmark+2)  
2f24 32 67 ee			ld (debug_mark+2),a  
2f27 18 03			jr .pastdmark  
2f29 ..			.dmark: db "-2s"  
2f2c f1			.pastdmark: pop af  
2f2d			endm  
# End of macro DMARK
2f2d						CALLMONITOR 
2f2d cd 6f ee			call debug_vector  
2f30				endm  
# End of macro CALLMONITOR
2f30					endif 
2f30			 
2f30					; Address 
2f30			 
2f30					FORTH_DSP_VALUEHL 
2f30 cd 95 1d			call macro_dsp_valuehl 
2f33				endm 
# End of macro FORTH_DSP_VALUEHL
2f33			 
2f33 e5					push hl    ; save address 
2f34			 
2f34					; load content into de 
2f34			 
2f34 5e					ld e,(hl) 
2f35 23					inc hl 
2f36 56					ld d, (hl) 
2f37			 
2f37					if DEBUG_FORTH_WORDS 
2f37						DMARK "-2a" 
2f37 f5				push af  
2f38 3a 4c 2f			ld a, (.dmark)  
2f3b 32 65 ee			ld (debug_mark),a  
2f3e 3a 4d 2f			ld a, (.dmark+1)  
2f41 32 66 ee			ld (debug_mark+1),a  
2f44 3a 4e 2f			ld a, (.dmark+2)  
2f47 32 67 ee			ld (debug_mark+2),a  
2f4a 18 03			jr .pastdmark  
2f4c ..			.dmark: db "-2a"  
2f4f f1			.pastdmark: pop af  
2f50			endm  
# End of macro DMARK
2f50						CALLMONITOR 
2f50 cd 6f ee			call debug_vector  
2f53				endm  
# End of macro CALLMONITOR
2f53					endif 
2f53			 
2f53					FORTH_DSP_POP 
2f53 cd 4d 1e			call macro_forth_dsp_pop 
2f56				endm 
# End of macro FORTH_DSP_POP
2f56			 
2f56					; Get value to remove 
2f56			 
2f56					FORTH_DSP_VALUE 
2f56 cd 7e 1d			call macro_forth_dsp_value 
2f59				endm 
# End of macro FORTH_DSP_VALUE
2f59			 
2f59					if DEBUG_FORTH_WORDS 
2f59						DMARK "-2v" 
2f59 f5				push af  
2f5a 3a 6e 2f			ld a, (.dmark)  
2f5d 32 65 ee			ld (debug_mark),a  
2f60 3a 6f 2f			ld a, (.dmark+1)  
2f63 32 66 ee			ld (debug_mark+1),a  
2f66 3a 70 2f			ld a, (.dmark+2)  
2f69 32 67 ee			ld (debug_mark+2),a  
2f6c 18 03			jr .pastdmark  
2f6e ..			.dmark: db "-2v"  
2f71 f1			.pastdmark: pop af  
2f72			endm  
# End of macro DMARK
2f72						CALLMONITOR 
2f72 cd 6f ee			call debug_vector  
2f75				endm  
# End of macro CALLMONITOR
2f75					endif 
2f75			 
2f75 eb					ex de, hl 
2f76 ed 52				sbc hl, de 
2f78			 
2f78					if DEBUG_FORTH_WORDS 
2f78						DMARK "-2d" 
2f78 f5				push af  
2f79 3a 8d 2f			ld a, (.dmark)  
2f7c 32 65 ee			ld (debug_mark),a  
2f7f 3a 8e 2f			ld a, (.dmark+1)  
2f82 32 66 ee			ld (debug_mark+1),a  
2f85 3a 8f 2f			ld a, (.dmark+2)  
2f88 32 67 ee			ld (debug_mark+2),a  
2f8b 18 03			jr .pastdmark  
2f8d ..			.dmark: db "-2d"  
2f90 f1			.pastdmark: pop af  
2f91			endm  
# End of macro DMARK
2f91						CALLMONITOR 
2f91 cd 6f ee			call debug_vector  
2f94				endm  
# End of macro CALLMONITOR
2f94					endif 
2f94			 
2f94					; move result to de 
2f94			 
2f94 eb					ex de, hl 
2f95			 
2f95					; Address 
2f95			 
2f95 e1					pop hl 
2f96			 
2f96					; save it back 
2f96			 
2f96 73					ld (hl), e 
2f97 23					inc hl 
2f98 72					ld (hl), d 
2f99			 
2f99					if DEBUG_FORTH_WORDS 
2f99						DMARK "-2e" 
2f99 f5				push af  
2f9a 3a ae 2f			ld a, (.dmark)  
2f9d 32 65 ee			ld (debug_mark),a  
2fa0 3a af 2f			ld a, (.dmark+1)  
2fa3 32 66 ee			ld (debug_mark+1),a  
2fa6 3a b0 2f			ld a, (.dmark+2)  
2fa9 32 67 ee			ld (debug_mark+2),a  
2fac 18 03			jr .pastdmark  
2fae ..			.dmark: db "-2e"  
2fb1 f1			.pastdmark: pop af  
2fb2			endm  
# End of macro DMARK
2fb2						CALLMONITOR 
2fb2 cd 6f ee			call debug_vector  
2fb5				endm  
# End of macro CALLMONITOR
2fb5					endif 
2fb5			 
2fb5			 
2fb5					FORTH_DSP_POP 
2fb5 cd 4d 1e			call macro_forth_dsp_pop 
2fb8				endm 
# End of macro FORTH_DSP_POP
2fb8			 
2fb8			 
2fb8			 
2fb8				       NEXTW 
2fb8 c3 80 1f			jp macro_next 
2fbb				endm 
# End of macro NEXTW
2fbb			.GET2: 
2fbb				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2fbb 6f				db WORD_SYS_CORE+91             
2fbc f0 2f			dw .BANG2            
2fbe 03				db 2 + 1 
2fbf .. 00			db "2@",0              
2fc2				endm 
# End of macro CWHEAD
2fc2			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2fc2					if DEBUG_FORTH_WORDS_KEY 
2fc2						DMARK "2A_" 
2fc2 f5				push af  
2fc3 3a d7 2f			ld a, (.dmark)  
2fc6 32 65 ee			ld (debug_mark),a  
2fc9 3a d8 2f			ld a, (.dmark+1)  
2fcc 32 66 ee			ld (debug_mark+1),a  
2fcf 3a d9 2f			ld a, (.dmark+2)  
2fd2 32 67 ee			ld (debug_mark+2),a  
2fd5 18 03			jr .pastdmark  
2fd7 ..			.dmark: db "2A_"  
2fda f1			.pastdmark: pop af  
2fdb			endm  
# End of macro DMARK
2fdb						CALLMONITOR 
2fdb cd 6f ee			call debug_vector  
2fde				endm  
# End of macro CALLMONITOR
2fde					endif 
2fde			 
2fde					FORTH_DSP_VALUEHL 
2fde cd 95 1d			call macro_dsp_valuehl 
2fe1				endm 
# End of macro FORTH_DSP_VALUEHL
2fe1			 
2fe1 e5					push hl   ; save address 
2fe2			 
2fe2					FORTH_DSP_POP 
2fe2 cd 4d 1e			call macro_forth_dsp_pop 
2fe5				endm 
# End of macro FORTH_DSP_POP
2fe5			 
2fe5 e1					pop hl 
2fe6			 
2fe6 5e					ld e, (hl) 
2fe7 23					inc hl 
2fe8 56					ld d, (hl) 
2fe9			 
2fe9 eb					ex de, hl 
2fea			 
2fea cd 90 1b				call forth_push_numhl 
2fed			 
2fed				       NEXTW 
2fed c3 80 1f			jp macro_next 
2ff0				endm 
# End of macro NEXTW
2ff0			.BANG2: 
2ff0				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2ff0 6f				db WORD_SYS_CORE+91             
2ff1 28 30			dw .CONFIG            
2ff3 03				db 2 + 1 
2ff4 .. 00			db "2!",0              
2ff7				endm 
# End of macro CWHEAD
2ff7			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2ff7					if DEBUG_FORTH_WORDS_KEY 
2ff7						DMARK "2S_" 
2ff7 f5				push af  
2ff8 3a 0c 30			ld a, (.dmark)  
2ffb 32 65 ee			ld (debug_mark),a  
2ffe 3a 0d 30			ld a, (.dmark+1)  
3001 32 66 ee			ld (debug_mark+1),a  
3004 3a 0e 30			ld a, (.dmark+2)  
3007 32 67 ee			ld (debug_mark+2),a  
300a 18 03			jr .pastdmark  
300c ..			.dmark: db "2S_"  
300f f1			.pastdmark: pop af  
3010			endm  
# End of macro DMARK
3010						CALLMONITOR 
3010 cd 6f ee			call debug_vector  
3013				endm  
# End of macro CALLMONITOR
3013					endif 
3013			 
3013					FORTH_DSP_VALUEHL 
3013 cd 95 1d			call macro_dsp_valuehl 
3016				endm 
# End of macro FORTH_DSP_VALUEHL
3016			 
3016 e5					push hl   ; save address 
3017			 
3017			 
3017					FORTH_DSP_POP 
3017 cd 4d 1e			call macro_forth_dsp_pop 
301a				endm 
# End of macro FORTH_DSP_POP
301a			 
301a					 
301a					FORTH_DSP_VALUEHL 
301a cd 95 1d			call macro_dsp_valuehl 
301d				endm 
# End of macro FORTH_DSP_VALUEHL
301d			 
301d					FORTH_DSP_POP 
301d cd 4d 1e			call macro_forth_dsp_pop 
3020				endm 
# End of macro FORTH_DSP_POP
3020			 
3020 eb					ex de, hl    ; value now in de 
3021			 
3021 e1					pop hl 
3022			 
3022 73					ld (hl), e 
3023			 
3023 23					inc hl 
3024			 
3024 72					ld (hl), d 
3025			 
3025			 
3025				       NEXTW 
3025 c3 80 1f			jp macro_next 
3028				endm 
# End of macro NEXTW
3028			.CONFIG: 
3028				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
3028 6f				db WORD_SYS_CORE+91             
3029 39 30			dw .ADTOS            
302b 07				db 6 + 1 
302c .. 00			db "CONFIG",0              
3033				endm 
# End of macro CWHEAD
3033			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
3033			 
3033 cd 69 13				call config 
3036					NEXTW 
3036 c3 80 1f			jp macro_next 
3039				endm 
# End of macro NEXTW
3039			 
3039			.ADTOS: 
3039				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
3039 6f				db WORD_SYS_CORE+91             
303a 4f 30			dw .SBTOS            
303c 03				db 2 + 1 
303d .. 00			db "1+",0              
3040				endm 
# End of macro CWHEAD
3040			; | 1+ ( u -- u )  Increment value on TOS | DONE 
3040			 
3040					FORTH_DSP_VALUEHL 
3040 cd 95 1d			call macro_dsp_valuehl 
3043				endm 
# End of macro FORTH_DSP_VALUEHL
3043 e5					push hl 
3044			 
3044					FORTH_DSP_POP 
3044 cd 4d 1e			call macro_forth_dsp_pop 
3047				endm 
# End of macro FORTH_DSP_POP
3047 e1					pop hl 
3048			 
3048 23					inc hl 
3049 cd 90 1b				call forth_push_numhl 
304c					 
304c					NEXTW 
304c c3 80 1f			jp macro_next 
304f				endm 
# End of macro NEXTW
304f			.SBTOS: 
304f				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
304f 6f				db WORD_SYS_CORE+91             
3050 65 30			dw .ADSTORE            
3052 03				db 2 + 1 
3053 .. 00			db "1-",0              
3056				endm 
# End of macro CWHEAD
3056			; | 1- ( u -- u )  Decrement value on TOS | DONE 
3056			 
3056					FORTH_DSP_VALUEHL 
3056 cd 95 1d			call macro_dsp_valuehl 
3059				endm 
# End of macro FORTH_DSP_VALUEHL
3059 e5					push hl 
305a			 
305a					FORTH_DSP_POP 
305a cd 4d 1e			call macro_forth_dsp_pop 
305d				endm 
# End of macro FORTH_DSP_POP
305d e1					pop hl 
305e			 
305e 2b					dec hl 
305f cd 90 1b				call forth_push_numhl 
3062					 
3062					NEXTW 
3062 c3 80 1f			jp macro_next 
3065				endm 
# End of macro NEXTW
3065			.ADSTORE: 
3065				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
3065 6f				db WORD_SYS_CORE+91             
3066 7b 30			dw .ADWSTORE            
3068 04				db 3 + 1 
3069 .. 00			db "1+!",0              
306d				endm 
# End of macro CWHEAD
306d			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
306d			 
306d					FORTH_DSP_VALUEHL 
306d cd 95 1d			call macro_dsp_valuehl 
3070				endm 
# End of macro FORTH_DSP_VALUEHL
3070 e5					push hl 
3071			 
3071					FORTH_DSP_POP 
3071 cd 4d 1e			call macro_forth_dsp_pop 
3074				endm 
# End of macro FORTH_DSP_POP
3074 e1					pop hl 
3075			 
3075 7e					ld a, (hl) 
3076 3c					inc a 
3077 77					ld (hl), a 
3078					 
3078					NEXTW 
3078 c3 80 1f			jp macro_next 
307b				endm 
# End of macro NEXTW
307b			.ADWSTORE: 
307b				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
307b 6f				db WORD_SYS_CORE+91             
307c 99 30			dw .SBSTORE            
307e 05				db 4 + 1 
307f .. 00			db "1+2!",0              
3084				endm 
# End of macro CWHEAD
3084			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
3084			 
3084					FORTH_DSP_VALUEHL 
3084 cd 95 1d			call macro_dsp_valuehl 
3087				endm 
# End of macro FORTH_DSP_VALUEHL
3087 e5					push hl 
3088			 
3088					FORTH_DSP_POP 
3088 cd 4d 1e			call macro_forth_dsp_pop 
308b				endm 
# End of macro FORTH_DSP_POP
308b e1					pop hl 
308c			 
308c e5					push hl 
308d			 
308d cd 02 1f				call loadwordinhl 
3090 23					inc hl 
3091			 
3091 d1					pop de 
3092 eb					ex de, hl 
3093 73					ld (hl), e 
3094 23					inc hl 
3095 72					ld (hl), d 
3096					 
3096					NEXTW 
3096 c3 80 1f			jp macro_next 
3099				endm 
# End of macro NEXTW
3099			.SBSTORE: 
3099				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
3099 6f				db WORD_SYS_CORE+91             
309a af 30			dw .SBWSTORE            
309c 04				db 3 + 1 
309d .. 00			db "1-!",0              
30a1				endm 
# End of macro CWHEAD
30a1			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
30a1			 
30a1					FORTH_DSP_VALUEHL 
30a1 cd 95 1d			call macro_dsp_valuehl 
30a4				endm 
# End of macro FORTH_DSP_VALUEHL
30a4 e5					push hl 
30a5			 
30a5					FORTH_DSP_POP 
30a5 cd 4d 1e			call macro_forth_dsp_pop 
30a8				endm 
# End of macro FORTH_DSP_POP
30a8 e1					pop hl 
30a9			 
30a9 7e					ld a, (hl) 
30aa 3d					dec a 
30ab 77					ld (hl), a 
30ac					 
30ac					NEXTW 
30ac c3 80 1f			jp macro_next 
30af				endm 
# End of macro NEXTW
30af			.SBWSTORE: 
30af				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
30af 6f				db WORD_SYS_CORE+91             
30b0 cd 30			dw .ENDCORE            
30b2 05				db 4 + 1 
30b3 .. 00			db "1-2!",0              
30b8				endm 
# End of macro CWHEAD
30b8			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
30b8			 
30b8					FORTH_DSP_VALUEHL 
30b8 cd 95 1d			call macro_dsp_valuehl 
30bb				endm 
# End of macro FORTH_DSP_VALUEHL
30bb e5					push hl 
30bc			 
30bc					FORTH_DSP_POP 
30bc cd 4d 1e			call macro_forth_dsp_pop 
30bf				endm 
# End of macro FORTH_DSP_POP
30bf e1					pop hl 
30c0			 
30c0 e5					push hl 
30c1			 
30c1 cd 02 1f				call loadwordinhl 
30c4 2b					dec hl 
30c5			 
30c5 d1					pop de 
30c6 eb					ex de, hl 
30c7 73					ld (hl), e 
30c8 23					inc hl 
30c9 72					ld (hl), d 
30ca					 
30ca					NEXTW 
30ca c3 80 1f			jp macro_next 
30cd				endm 
# End of macro NEXTW
30cd			.ENDCORE: 
30cd			 
30cd			; eof 
30cd			 
30cd			 
# End of file forth_words_core.asm
30cd			include "forth_words_flow.asm" 
30cd			 
30cd			; | ## Program Flow Words 
30cd			 
30cd			.IF: 
30cd				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
30cd 1e				db WORD_SYS_CORE+10             
30ce c2 31			dw .THEN            
30d0 03				db 2 + 1 
30d1 .. 00			db "IF",0              
30d4				endm 
# End of macro CWHEAD
30d4			; | IF ( w -- f ) If TOS is true exec code following up to THEN  | DONE 
30d4			; | | Note: currently not supporting ELSE or nested IF 
30d4			; 
30d4					if DEBUG_FORTH_WORDS_KEY 
30d4						DMARK "IF." 
30d4 f5				push af  
30d5 3a e9 30			ld a, (.dmark)  
30d8 32 65 ee			ld (debug_mark),a  
30db 3a ea 30			ld a, (.dmark+1)  
30de 32 66 ee			ld (debug_mark+1),a  
30e1 3a eb 30			ld a, (.dmark+2)  
30e4 32 67 ee			ld (debug_mark+2),a  
30e7 18 03			jr .pastdmark  
30e9 ..			.dmark: db "IF."  
30ec f1			.pastdmark: pop af  
30ed			endm  
# End of macro DMARK
30ed						CALLMONITOR 
30ed cd 6f ee			call debug_vector  
30f0				endm  
# End of macro CALLMONITOR
30f0					endif 
30f0			; eval TOS 
30f0			 
30f0				FORTH_DSP_VALUEHL 
30f0 cd 95 1d			call macro_dsp_valuehl 
30f3				endm 
# End of macro FORTH_DSP_VALUEHL
30f3			 
30f3			;	push hl 
30f3				FORTH_DSP_POP 
30f3 cd 4d 1e			call macro_forth_dsp_pop 
30f6				endm 
# End of macro FORTH_DSP_POP
30f6			;	pop hl 
30f6			 
30f6					if DEBUG_FORTH_WORDS 
30f6						DMARK "IF1" 
30f6 f5				push af  
30f7 3a 0b 31			ld a, (.dmark)  
30fa 32 65 ee			ld (debug_mark),a  
30fd 3a 0c 31			ld a, (.dmark+1)  
3100 32 66 ee			ld (debug_mark+1),a  
3103 3a 0d 31			ld a, (.dmark+2)  
3106 32 67 ee			ld (debug_mark+2),a  
3109 18 03			jr .pastdmark  
310b ..			.dmark: db "IF1"  
310e f1			.pastdmark: pop af  
310f			endm  
# End of macro DMARK
310f						CALLMONITOR 
310f cd 6f ee			call debug_vector  
3112				endm  
# End of macro CALLMONITOR
3112					endif 
3112 b7				or a        ; clear carry flag 
3113 11 00 00			ld de, 0 
3116 eb				ex de,hl 
3117 ed 52			sbc hl, de 
3119 c2 a3 31			jp nz, .iftrue 
311c			 
311c					if DEBUG_FORTH_WORDS 
311c						DMARK "IF2" 
311c f5				push af  
311d 3a 31 31			ld a, (.dmark)  
3120 32 65 ee			ld (debug_mark),a  
3123 3a 32 31			ld a, (.dmark+1)  
3126 32 66 ee			ld (debug_mark+1),a  
3129 3a 33 31			ld a, (.dmark+2)  
312c 32 67 ee			ld (debug_mark+2),a  
312f 18 03			jr .pastdmark  
3131 ..			.dmark: db "IF2"  
3134 f1			.pastdmark: pop af  
3135			endm  
# End of macro DMARK
3135						CALLMONITOR 
3135 cd 6f ee			call debug_vector  
3138				endm  
# End of macro CALLMONITOR
3138					endif 
3138			 
3138			; if not true then skip to THEN 
3138			 
3138				; TODO get tok_ptr 
3138				; TODO consume toks until we get to THEN 
3138			 
3138 2a bc e5			ld hl, (os_tok_ptr) 
313b					if DEBUG_FORTH_WORDS 
313b						DMARK "IF3" 
313b f5				push af  
313c 3a 50 31			ld a, (.dmark)  
313f 32 65 ee			ld (debug_mark),a  
3142 3a 51 31			ld a, (.dmark+1)  
3145 32 66 ee			ld (debug_mark+1),a  
3148 3a 52 31			ld a, (.dmark+2)  
314b 32 67 ee			ld (debug_mark+2),a  
314e 18 03			jr .pastdmark  
3150 ..			.dmark: db "IF3"  
3153 f1			.pastdmark: pop af  
3154			endm  
# End of macro DMARK
3154						CALLMONITOR 
3154 cd 6f ee			call debug_vector  
3157				endm  
# End of macro CALLMONITOR
3157						 
3157					endif 
3157 11 9e 31			ld de, .ifthen 
315a					if DEBUG_FORTH_WORDS 
315a						DMARK "IF4" 
315a f5				push af  
315b 3a 6f 31			ld a, (.dmark)  
315e 32 65 ee			ld (debug_mark),a  
3161 3a 70 31			ld a, (.dmark+1)  
3164 32 66 ee			ld (debug_mark+1),a  
3167 3a 71 31			ld a, (.dmark+2)  
316a 32 67 ee			ld (debug_mark+2),a  
316d 18 03			jr .pastdmark  
316f ..			.dmark: db "IF4"  
3172 f1			.pastdmark: pop af  
3173			endm  
# End of macro DMARK
3173						CALLMONITOR 
3173 cd 6f ee			call debug_vector  
3176				endm  
# End of macro CALLMONITOR
3176					endif 
3176 cd 87 20			call findnexttok  
3179			 
3179					if DEBUG_FORTH_WORDS 
3179						DMARK "IF5" 
3179 f5				push af  
317a 3a 8e 31			ld a, (.dmark)  
317d 32 65 ee			ld (debug_mark),a  
3180 3a 8f 31			ld a, (.dmark+1)  
3183 32 66 ee			ld (debug_mark+1),a  
3186 3a 90 31			ld a, (.dmark+2)  
3189 32 67 ee			ld (debug_mark+2),a  
318c 18 03			jr .pastdmark  
318e ..			.dmark: db "IF5"  
3191 f1			.pastdmark: pop af  
3192			endm  
# End of macro DMARK
3192						CALLMONITOR 
3192 cd 6f ee			call debug_vector  
3195				endm  
# End of macro CALLMONITOR
3195					endif 
3195				; TODO replace below with ; exec using tok_ptr 
3195 22 bc e5			ld (os_tok_ptr), hl 
3198 c3 09 20			jp exec1 
319b				NEXTW 
319b c3 80 1f			jp macro_next 
319e				endm 
# End of macro NEXTW
319e			 
319e .. 00		.ifthen:  db "THEN",0 
31a3			 
31a3			.iftrue:		 
31a3				; Exec next words normally 
31a3			 
31a3				; if true then exec following IF as normal 
31a3					if DEBUG_FORTH_WORDS 
31a3						DMARK "IFT" 
31a3 f5				push af  
31a4 3a b8 31			ld a, (.dmark)  
31a7 32 65 ee			ld (debug_mark),a  
31aa 3a b9 31			ld a, (.dmark+1)  
31ad 32 66 ee			ld (debug_mark+1),a  
31b0 3a ba 31			ld a, (.dmark+2)  
31b3 32 67 ee			ld (debug_mark+2),a  
31b6 18 03			jr .pastdmark  
31b8 ..			.dmark: db "IFT"  
31bb f1			.pastdmark: pop af  
31bc			endm  
# End of macro DMARK
31bc						CALLMONITOR 
31bc cd 6f ee			call debug_vector  
31bf				endm  
# End of macro CALLMONITOR
31bf					endif 
31bf			 
31bf					NEXTW 
31bf c3 80 1f			jp macro_next 
31c2				endm 
# End of macro NEXTW
31c2			.THEN: 
31c2				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
31c2 1f				db WORD_SYS_CORE+11             
31c3 ea 31			dw .ELSE            
31c5 05				db 4 + 1 
31c6 .. 00			db "THEN",0              
31cb				endm 
# End of macro CWHEAD
31cb			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
31cb					if DEBUG_FORTH_WORDS_KEY 
31cb						DMARK "THN" 
31cb f5				push af  
31cc 3a e0 31			ld a, (.dmark)  
31cf 32 65 ee			ld (debug_mark),a  
31d2 3a e1 31			ld a, (.dmark+1)  
31d5 32 66 ee			ld (debug_mark+1),a  
31d8 3a e2 31			ld a, (.dmark+2)  
31db 32 67 ee			ld (debug_mark+2),a  
31de 18 03			jr .pastdmark  
31e0 ..			.dmark: db "THN"  
31e3 f1			.pastdmark: pop af  
31e4			endm  
# End of macro DMARK
31e4						CALLMONITOR 
31e4 cd 6f ee			call debug_vector  
31e7				endm  
# End of macro CALLMONITOR
31e7					endif 
31e7					NEXTW 
31e7 c3 80 1f			jp macro_next 
31ea				endm 
# End of macro NEXTW
31ea			.ELSE: 
31ea				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
31ea 20				db WORD_SYS_CORE+12             
31eb 12 32			dw .DO            
31ed 03				db 2 + 1 
31ee .. 00			db "ELSE",0              
31f3				endm 
# End of macro CWHEAD
31f3			; | ELSE ( -- ) Not supported - does nothing | TODO 
31f3			 
31f3					if DEBUG_FORTH_WORDS_KEY 
31f3						DMARK "ELS" 
31f3 f5				push af  
31f4 3a 08 32			ld a, (.dmark)  
31f7 32 65 ee			ld (debug_mark),a  
31fa 3a 09 32			ld a, (.dmark+1)  
31fd 32 66 ee			ld (debug_mark+1),a  
3200 3a 0a 32			ld a, (.dmark+2)  
3203 32 67 ee			ld (debug_mark+2),a  
3206 18 03			jr .pastdmark  
3208 ..			.dmark: db "ELS"  
320b f1			.pastdmark: pop af  
320c			endm  
# End of macro DMARK
320c						CALLMONITOR 
320c cd 6f ee			call debug_vector  
320f				endm  
# End of macro CALLMONITOR
320f					endif 
320f			 
320f			 
320f					NEXTW 
320f c3 80 1f			jp macro_next 
3212				endm 
# End of macro NEXTW
3212			.DO: 
3212				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
3212 21				db WORD_SYS_CORE+13             
3213 39 33			dw .LOOP            
3215 03				db 2 + 1 
3216 .. 00			db "DO",0              
3219				endm 
# End of macro CWHEAD
3219			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3219			 
3219					if DEBUG_FORTH_WORDS_KEY 
3219						DMARK "DO." 
3219 f5				push af  
321a 3a 2e 32			ld a, (.dmark)  
321d 32 65 ee			ld (debug_mark),a  
3220 3a 2f 32			ld a, (.dmark+1)  
3223 32 66 ee			ld (debug_mark+1),a  
3226 3a 30 32			ld a, (.dmark+2)  
3229 32 67 ee			ld (debug_mark+2),a  
322c 18 03			jr .pastdmark  
322e ..			.dmark: db "DO."  
3231 f1			.pastdmark: pop af  
3232			endm  
# End of macro DMARK
3232						CALLMONITOR 
3232 cd 6f ee			call debug_vector  
3235				endm  
# End of macro CALLMONITOR
3235					endif 
3235			;  push pc to rsp stack past the DO 
3235			 
3235 2a bc e5				ld hl, (os_tok_ptr) 
3238 23					inc hl   ; D 
3239 23					inc hl  ; O 
323a 23					inc hl   ; null 
323b					if DEBUG_FORTH_WORDS 
323b						DMARK "DO2" 
323b f5				push af  
323c 3a 50 32			ld a, (.dmark)  
323f 32 65 ee			ld (debug_mark),a  
3242 3a 51 32			ld a, (.dmark+1)  
3245 32 66 ee			ld (debug_mark+1),a  
3248 3a 52 32			ld a, (.dmark+2)  
324b 32 67 ee			ld (debug_mark+2),a  
324e 18 03			jr .pastdmark  
3250 ..			.dmark: db "DO2"  
3253 f1			.pastdmark: pop af  
3254			endm  
# End of macro DMARK
3254						CALLMONITOR 
3254 cd 6f ee			call debug_vector  
3257				endm  
# End of macro CALLMONITOR
3257					endif 
3257					FORTH_RSP_NEXT 
3257 cd 37 1b			call macro_forth_rsp_next 
325a				endm 
# End of macro FORTH_RSP_NEXT
325a					if DEBUG_FORTH_WORDS 
325a						DMARK "DO3" 
325a f5				push af  
325b 3a 6f 32			ld a, (.dmark)  
325e 32 65 ee			ld (debug_mark),a  
3261 3a 70 32			ld a, (.dmark+1)  
3264 32 66 ee			ld (debug_mark+1),a  
3267 3a 71 32			ld a, (.dmark+2)  
326a 32 67 ee			ld (debug_mark+2),a  
326d 18 03			jr .pastdmark  
326f ..			.dmark: db "DO3"  
3272 f1			.pastdmark: pop af  
3273			endm  
# End of macro DMARK
3273						CALLMONITOR 
3273 cd 6f ee			call debug_vector  
3276				endm  
# End of macro CALLMONITOR
3276					endif 
3276			 
3276					;if DEBUG_FORTH_WORDS 
3276				;		push hl 
3276			;		endif  
3276			 
3276			; get counters from data stack 
3276			 
3276			 
3276					FORTH_DSP_VALUEHL 
3276 cd 95 1d			call macro_dsp_valuehl 
3279				endm 
# End of macro FORTH_DSP_VALUEHL
3279 e5					push hl		 ; hl now has starting counter which needs to be tos 
327a			 
327a					if DEBUG_FORTH_WORDS 
327a						DMARK "DO4" 
327a f5				push af  
327b 3a 8f 32			ld a, (.dmark)  
327e 32 65 ee			ld (debug_mark),a  
3281 3a 90 32			ld a, (.dmark+1)  
3284 32 66 ee			ld (debug_mark+1),a  
3287 3a 91 32			ld a, (.dmark+2)  
328a 32 67 ee			ld (debug_mark+2),a  
328d 18 03			jr .pastdmark  
328f ..			.dmark: db "DO4"  
3292 f1			.pastdmark: pop af  
3293			endm  
# End of macro DMARK
3293						CALLMONITOR 
3293 cd 6f ee			call debug_vector  
3296				endm  
# End of macro CALLMONITOR
3296					endif 
3296					FORTH_DSP_POP 
3296 cd 4d 1e			call macro_forth_dsp_pop 
3299				endm 
# End of macro FORTH_DSP_POP
3299			 
3299					if DEBUG_FORTH_WORDS 
3299						DMARK "DO5" 
3299 f5				push af  
329a 3a ae 32			ld a, (.dmark)  
329d 32 65 ee			ld (debug_mark),a  
32a0 3a af 32			ld a, (.dmark+1)  
32a3 32 66 ee			ld (debug_mark+1),a  
32a6 3a b0 32			ld a, (.dmark+2)  
32a9 32 67 ee			ld (debug_mark+2),a  
32ac 18 03			jr .pastdmark  
32ae ..			.dmark: db "DO5"  
32b1 f1			.pastdmark: pop af  
32b2			endm  
# End of macro DMARK
32b2						CALLMONITOR 
32b2 cd 6f ee			call debug_vector  
32b5				endm  
# End of macro CALLMONITOR
32b5					endif 
32b5			 
32b5					FORTH_DSP_VALUEHL 
32b5 cd 95 1d			call macro_dsp_valuehl 
32b8				endm 
# End of macro FORTH_DSP_VALUEHL
32b8			;		push hl		 ; hl now has starting limit counter 
32b8			 
32b8					if DEBUG_FORTH_WORDS 
32b8						DMARK "DO6" 
32b8 f5				push af  
32b9 3a cd 32			ld a, (.dmark)  
32bc 32 65 ee			ld (debug_mark),a  
32bf 3a ce 32			ld a, (.dmark+1)  
32c2 32 66 ee			ld (debug_mark+1),a  
32c5 3a cf 32			ld a, (.dmark+2)  
32c8 32 67 ee			ld (debug_mark+2),a  
32cb 18 03			jr .pastdmark  
32cd ..			.dmark: db "DO6"  
32d0 f1			.pastdmark: pop af  
32d1			endm  
# End of macro DMARK
32d1						CALLMONITOR 
32d1 cd 6f ee			call debug_vector  
32d4				endm  
# End of macro CALLMONITOR
32d4					endif 
32d4					FORTH_DSP_POP 
32d4 cd 4d 1e			call macro_forth_dsp_pop 
32d7				endm 
# End of macro FORTH_DSP_POP
32d7			 
32d7			; put counters on the loop stack 
32d7			 
32d7			;		pop hl			 ; limit counter 
32d7 d1					pop de			; start counter 
32d8			 
32d8					; push limit counter 
32d8			 
32d8					if DEBUG_FORTH_WORDS 
32d8						DMARK "DO7" 
32d8 f5				push af  
32d9 3a ed 32			ld a, (.dmark)  
32dc 32 65 ee			ld (debug_mark),a  
32df 3a ee 32			ld a, (.dmark+1)  
32e2 32 66 ee			ld (debug_mark+1),a  
32e5 3a ef 32			ld a, (.dmark+2)  
32e8 32 67 ee			ld (debug_mark+2),a  
32eb 18 03			jr .pastdmark  
32ed ..			.dmark: db "DO7"  
32f0 f1			.pastdmark: pop af  
32f1			endm  
# End of macro DMARK
32f1						CALLMONITOR 
32f1 cd 6f ee			call debug_vector  
32f4				endm  
# End of macro CALLMONITOR
32f4					endif 
32f4					FORTH_LOOP_NEXT 
32f4 cd c6 1d			call macro_forth_loop_next 
32f7				endm 
# End of macro FORTH_LOOP_NEXT
32f7			 
32f7					; push start counter 
32f7			 
32f7 eb					ex de, hl 
32f8					if DEBUG_FORTH_WORDS 
32f8						DMARK "DO7" 
32f8 f5				push af  
32f9 3a 0d 33			ld a, (.dmark)  
32fc 32 65 ee			ld (debug_mark),a  
32ff 3a 0e 33			ld a, (.dmark+1)  
3302 32 66 ee			ld (debug_mark+1),a  
3305 3a 0f 33			ld a, (.dmark+2)  
3308 32 67 ee			ld (debug_mark+2),a  
330b 18 03			jr .pastdmark  
330d ..			.dmark: db "DO7"  
3310 f1			.pastdmark: pop af  
3311			endm  
# End of macro DMARK
3311						CALLMONITOR 
3311 cd 6f ee			call debug_vector  
3314				endm  
# End of macro CALLMONITOR
3314					endif 
3314					FORTH_LOOP_NEXT 
3314 cd c6 1d			call macro_forth_loop_next 
3317				endm 
# End of macro FORTH_LOOP_NEXT
3317			 
3317			 
3317					; init first round of I counter 
3317			 
3317 22 e0 e5				ld (os_current_i), hl 
331a			 
331a					if DEBUG_FORTH_WORDS 
331a						DMARK "DO8" 
331a f5				push af  
331b 3a 2f 33			ld a, (.dmark)  
331e 32 65 ee			ld (debug_mark),a  
3321 3a 30 33			ld a, (.dmark+1)  
3324 32 66 ee			ld (debug_mark+1),a  
3327 3a 31 33			ld a, (.dmark+2)  
332a 32 67 ee			ld (debug_mark+2),a  
332d 18 03			jr .pastdmark  
332f ..			.dmark: db "DO8"  
3332 f1			.pastdmark: pop af  
3333			endm  
# End of macro DMARK
3333						CALLMONITOR 
3333 cd 6f ee			call debug_vector  
3336				endm  
# End of macro CALLMONITOR
3336					endif 
3336			 
3336					NEXTW 
3336 c3 80 1f			jp macro_next 
3339				endm 
# End of macro NEXTW
3339			.LOOP: 
3339				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
3339 22				db WORD_SYS_CORE+14             
333a 51 34			dw .I            
333c 05				db 4 + 1 
333d .. 00			db "LOOP",0              
3342				endm 
# End of macro CWHEAD
3342			; | LOOP ( -- ) Increment and test loop counter  | DONE 
3342			 
3342				; pop tos as current loop count to hl 
3342			 
3342				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3342			 
3342				FORTH_LOOP_TOS 
3342 cd f9 1d			call macro_forth_loop_tos 
3345				endm 
# End of macro FORTH_LOOP_TOS
3345 e5				push hl 
3346			 
3346					if DEBUG_FORTH_WORDS_KEY 
3346						DMARK "LOP" 
3346 f5				push af  
3347 3a 5b 33			ld a, (.dmark)  
334a 32 65 ee			ld (debug_mark),a  
334d 3a 5c 33			ld a, (.dmark+1)  
3350 32 66 ee			ld (debug_mark+1),a  
3353 3a 5d 33			ld a, (.dmark+2)  
3356 32 67 ee			ld (debug_mark+2),a  
3359 18 03			jr .pastdmark  
335b ..			.dmark: db "LOP"  
335e f1			.pastdmark: pop af  
335f			endm  
# End of macro DMARK
335f						CALLMONITOR 
335f cd 6f ee			call debug_vector  
3362				endm  
# End of macro CALLMONITOR
3362					endif 
3362				; next item on the stack is the limit. get it 
3362			 
3362			 
3362				FORTH_LOOP_POP 
3362 cd 03 1e			call macro_forth_loop_pop 
3365				endm 
# End of macro FORTH_LOOP_POP
3365			 
3365				FORTH_LOOP_TOS 
3365 cd f9 1d			call macro_forth_loop_tos 
3368				endm 
# End of macro FORTH_LOOP_TOS
3368			 
3368 d1				pop de		 ; de = i, hl = limit 
3369			 
3369					if DEBUG_FORTH_WORDS 
3369						DMARK "LP1" 
3369 f5				push af  
336a 3a 7e 33			ld a, (.dmark)  
336d 32 65 ee			ld (debug_mark),a  
3370 3a 7f 33			ld a, (.dmark+1)  
3373 32 66 ee			ld (debug_mark+1),a  
3376 3a 80 33			ld a, (.dmark+2)  
3379 32 67 ee			ld (debug_mark+2),a  
337c 18 03			jr .pastdmark  
337e ..			.dmark: db "LP1"  
3381 f1			.pastdmark: pop af  
3382			endm  
# End of macro DMARK
3382						CALLMONITOR 
3382 cd 6f ee			call debug_vector  
3385				endm  
# End of macro CALLMONITOR
3385					endif 
3385			 
3385				; go back to previous word 
3385			 
3385 d5				push de    ; save I for inc later 
3386			 
3386			 
3386				; get limit 
3386				;  is I at limit? 
3386			 
3386			 
3386					if DEBUG_FORTH_WORDS 
3386						DMARK "LP1" 
3386 f5				push af  
3387 3a 9b 33			ld a, (.dmark)  
338a 32 65 ee			ld (debug_mark),a  
338d 3a 9c 33			ld a, (.dmark+1)  
3390 32 66 ee			ld (debug_mark+1),a  
3393 3a 9d 33			ld a, (.dmark+2)  
3396 32 67 ee			ld (debug_mark+2),a  
3399 18 03			jr .pastdmark  
339b ..			.dmark: db "LP1"  
339e f1			.pastdmark: pop af  
339f			endm  
# End of macro DMARK
339f						CALLMONITOR 
339f cd 6f ee			call debug_vector  
33a2				endm  
# End of macro CALLMONITOR
33a2					endif 
33a2			 
33a2 ed 52			sbc hl, de 
33a4			 
33a4			 
33a4				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
33a4			 
33a4 20 26				jr nz, .loopnotdone 
33a6			 
33a6 e1				pop hl   ; get rid of saved I 
33a7				FORTH_LOOP_POP     ; get rid of limit 
33a7 cd 03 1e			call macro_forth_loop_pop 
33aa				endm 
# End of macro FORTH_LOOP_POP
33aa			 
33aa				FORTH_RSP_POP     ; get rid of DO ptr 
33aa cd 58 1b			call macro_forth_rsp_pop 
33ad				endm 
# End of macro FORTH_RSP_POP
33ad			 
33ad			if DEBUG_FORTH_WORDS 
33ad						DMARK "LP>" 
33ad f5				push af  
33ae 3a c2 33			ld a, (.dmark)  
33b1 32 65 ee			ld (debug_mark),a  
33b4 3a c3 33			ld a, (.dmark+1)  
33b7 32 66 ee			ld (debug_mark+1),a  
33ba 3a c4 33			ld a, (.dmark+2)  
33bd 32 67 ee			ld (debug_mark+2),a  
33c0 18 03			jr .pastdmark  
33c2 ..			.dmark: db "LP>"  
33c5 f1			.pastdmark: pop af  
33c6			endm  
# End of macro DMARK
33c6				CALLMONITOR 
33c6 cd 6f ee			call debug_vector  
33c9				endm  
# End of macro CALLMONITOR
33c9			endif 
33c9			 
33c9					NEXTW 
33c9 c3 80 1f			jp macro_next 
33cc				endm 
# End of macro NEXTW
33cc				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
33cc			 
33cc			.loopnotdone: 
33cc			 
33cc e1				pop hl    ; get I 
33cd 23				inc hl 
33ce			 
33ce			   	; save new I 
33ce			 
33ce			 
33ce					; set I counter 
33ce			 
33ce 22 e0 e5				ld (os_current_i), hl 
33d1			 
33d1					if DEBUG_FORTH_WORDS 
33d1						DMARK "LPN" 
33d1 f5				push af  
33d2 3a e6 33			ld a, (.dmark)  
33d5 32 65 ee			ld (debug_mark),a  
33d8 3a e7 33			ld a, (.dmark+1)  
33db 32 66 ee			ld (debug_mark+1),a  
33de 3a e8 33			ld a, (.dmark+2)  
33e1 32 67 ee			ld (debug_mark+2),a  
33e4 18 03			jr .pastdmark  
33e6 ..			.dmark: db "LPN"  
33e9 f1			.pastdmark: pop af  
33ea			endm  
# End of macro DMARK
33ea					CALLMONITOR 
33ea cd 6f ee			call debug_vector  
33ed				endm  
# End of macro CALLMONITOR
33ed					endif 
33ed					 
33ed				FORTH_LOOP_NEXT 
33ed cd c6 1d			call macro_forth_loop_next 
33f0				endm 
# End of macro FORTH_LOOP_NEXT
33f0			 
33f0			 
33f0					if DEBUG_FORTH_WORDS 
33f0 eb						ex de,hl 
33f1					endif 
33f1			 
33f1			;	; get DO ptr 
33f1			; 
33f1					if DEBUG_FORTH_WORDS 
33f1						DMARK "LP7" 
33f1 f5				push af  
33f2 3a 06 34			ld a, (.dmark)  
33f5 32 65 ee			ld (debug_mark),a  
33f8 3a 07 34			ld a, (.dmark+1)  
33fb 32 66 ee			ld (debug_mark+1),a  
33fe 3a 08 34			ld a, (.dmark+2)  
3401 32 67 ee			ld (debug_mark+2),a  
3404 18 03			jr .pastdmark  
3406 ..			.dmark: db "LP7"  
3409 f1			.pastdmark: pop af  
340a			endm  
# End of macro DMARK
340a					CALLMONITOR 
340a cd 6f ee			call debug_vector  
340d				endm  
# End of macro CALLMONITOR
340d					endif 
340d				FORTH_RSP_TOS 
340d cd 4e 1b			call macro_forth_rsp_tos 
3410				endm 
# End of macro FORTH_RSP_TOS
3410			 
3410					if DEBUG_FORTH_WORDS 
3410						DMARK "LP8" 
3410 f5				push af  
3411 3a 25 34			ld a, (.dmark)  
3414 32 65 ee			ld (debug_mark),a  
3417 3a 26 34			ld a, (.dmark+1)  
341a 32 66 ee			ld (debug_mark+1),a  
341d 3a 27 34			ld a, (.dmark+2)  
3420 32 67 ee			ld (debug_mark+2),a  
3423 18 03			jr .pastdmark  
3425 ..			.dmark: db "LP8"  
3428 f1			.pastdmark: pop af  
3429			endm  
# End of macro DMARK
3429					CALLMONITOR 
3429 cd 6f ee			call debug_vector  
342c				endm  
# End of macro CALLMONITOR
342c					endif 
342c				;push hl 
342c			 
342c				; not going to DO any more 
342c				; get rid of the RSP pointer as DO will add it back in 
342c				;FORTH_RSP_POP 
342c				;pop hl 
342c			 
342c				;ld hl,(cli_ret_sp) 
342c				;ld e, (hl) 
342c				;inc hl 
342c				;ld d, (hl) 
342c				;ex de,hl 
342c 22 bc e5			ld (os_tok_ptr), hl 
342f					if DEBUG_FORTH_WORDS 
342f						DMARK "LP<" 
342f f5				push af  
3430 3a 44 34			ld a, (.dmark)  
3433 32 65 ee			ld (debug_mark),a  
3436 3a 45 34			ld a, (.dmark+1)  
3439 32 66 ee			ld (debug_mark+1),a  
343c 3a 46 34			ld a, (.dmark+2)  
343f 32 67 ee			ld (debug_mark+2),a  
3442 18 03			jr .pastdmark  
3444 ..			.dmark: db "LP<"  
3447 f1			.pastdmark: pop af  
3448			endm  
# End of macro DMARK
3448					CALLMONITOR 
3448 cd 6f ee			call debug_vector  
344b				endm  
# End of macro CALLMONITOR
344b				endif 
344b c3 09 20			jp exec1 
344e			 
344e					 
344e			 
344e			 
344e					NEXTW 
344e c3 80 1f			jp macro_next 
3451				endm 
# End of macro NEXTW
3451			.I:  
3451			 
3451				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
3451 5e				db WORD_SYS_CORE+74             
3452 7c 34			dw .DLOOP            
3454 02				db 1 + 1 
3455 .. 00			db "I",0              
3457				endm 
# End of macro CWHEAD
3457			; | I ( -- ) Current loop counter | DONE 
3457					if DEBUG_FORTH_WORDS_KEY 
3457						DMARK "I.." 
3457 f5				push af  
3458 3a 6c 34			ld a, (.dmark)  
345b 32 65 ee			ld (debug_mark),a  
345e 3a 6d 34			ld a, (.dmark+1)  
3461 32 66 ee			ld (debug_mark+1),a  
3464 3a 6e 34			ld a, (.dmark+2)  
3467 32 67 ee			ld (debug_mark+2),a  
346a 18 03			jr .pastdmark  
346c ..			.dmark: db "I.."  
346f f1			.pastdmark: pop af  
3470			endm  
# End of macro DMARK
3470						CALLMONITOR 
3470 cd 6f ee			call debug_vector  
3473				endm  
# End of macro CALLMONITOR
3473					endif 
3473			 
3473 2a e0 e5				ld hl,(os_current_i) 
3476 cd 90 1b				call forth_push_numhl 
3479			 
3479					NEXTW 
3479 c3 80 1f			jp macro_next 
347c				endm 
# End of macro NEXTW
347c			.DLOOP: 
347c				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
347c 5f				db WORD_SYS_CORE+75             
347d 5d 35			dw .REPEAT            
347f 06				db 5 + 1 
3480 .. 00			db "-LOOP",0              
3486				endm 
# End of macro CWHEAD
3486			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
3486				; pop tos as current loop count to hl 
3486					if DEBUG_FORTH_WORDS_KEY 
3486						DMARK "-LP" 
3486 f5				push af  
3487 3a 9b 34			ld a, (.dmark)  
348a 32 65 ee			ld (debug_mark),a  
348d 3a 9c 34			ld a, (.dmark+1)  
3490 32 66 ee			ld (debug_mark+1),a  
3493 3a 9d 34			ld a, (.dmark+2)  
3496 32 67 ee			ld (debug_mark+2),a  
3499 18 03			jr .pastdmark  
349b ..			.dmark: db "-LP"  
349e f1			.pastdmark: pop af  
349f			endm  
# End of macro DMARK
349f						CALLMONITOR 
349f cd 6f ee			call debug_vector  
34a2				endm  
# End of macro CALLMONITOR
34a2					endif 
34a2			 
34a2				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
34a2			 
34a2				FORTH_LOOP_TOS 
34a2 cd f9 1d			call macro_forth_loop_tos 
34a5				endm 
# End of macro FORTH_LOOP_TOS
34a5 e5				push hl 
34a6			 
34a6					if DEBUG_FORTH_WORDS 
34a6						DMARK "-LP" 
34a6 f5				push af  
34a7 3a bb 34			ld a, (.dmark)  
34aa 32 65 ee			ld (debug_mark),a  
34ad 3a bc 34			ld a, (.dmark+1)  
34b0 32 66 ee			ld (debug_mark+1),a  
34b3 3a bd 34			ld a, (.dmark+2)  
34b6 32 67 ee			ld (debug_mark+2),a  
34b9 18 03			jr .pastdmark  
34bb ..			.dmark: db "-LP"  
34be f1			.pastdmark: pop af  
34bf			endm  
# End of macro DMARK
34bf						CALLMONITOR 
34bf cd 6f ee			call debug_vector  
34c2				endm  
# End of macro CALLMONITOR
34c2					endif 
34c2				; next item on the stack is the limit. get it 
34c2			 
34c2			 
34c2				FORTH_LOOP_POP 
34c2 cd 03 1e			call macro_forth_loop_pop 
34c5				endm 
# End of macro FORTH_LOOP_POP
34c5			 
34c5				FORTH_LOOP_TOS 
34c5 cd f9 1d			call macro_forth_loop_tos 
34c8				endm 
# End of macro FORTH_LOOP_TOS
34c8			 
34c8 d1				pop de		 ; de = i, hl = limit 
34c9			 
34c9					if DEBUG_FORTH_WORDS 
34c9						DMARK "-L1" 
34c9 f5				push af  
34ca 3a de 34			ld a, (.dmark)  
34cd 32 65 ee			ld (debug_mark),a  
34d0 3a df 34			ld a, (.dmark+1)  
34d3 32 66 ee			ld (debug_mark+1),a  
34d6 3a e0 34			ld a, (.dmark+2)  
34d9 32 67 ee			ld (debug_mark+2),a  
34dc 18 03			jr .pastdmark  
34de ..			.dmark: db "-L1"  
34e1 f1			.pastdmark: pop af  
34e2			endm  
# End of macro DMARK
34e2						CALLMONITOR 
34e2 cd 6f ee			call debug_vector  
34e5				endm  
# End of macro CALLMONITOR
34e5					endif 
34e5			 
34e5				; go back to previous word 
34e5			 
34e5 d5				push de    ; save I for inc later 
34e6			 
34e6			 
34e6				; get limit 
34e6				;  is I at limit? 
34e6			 
34e6			 
34e6					if DEBUG_FORTH_WORDS 
34e6						DMARK "-L1" 
34e6 f5				push af  
34e7 3a fb 34			ld a, (.dmark)  
34ea 32 65 ee			ld (debug_mark),a  
34ed 3a fc 34			ld a, (.dmark+1)  
34f0 32 66 ee			ld (debug_mark+1),a  
34f3 3a fd 34			ld a, (.dmark+2)  
34f6 32 67 ee			ld (debug_mark+2),a  
34f9 18 03			jr .pastdmark  
34fb ..			.dmark: db "-L1"  
34fe f1			.pastdmark: pop af  
34ff			endm  
# End of macro DMARK
34ff						CALLMONITOR 
34ff cd 6f ee			call debug_vector  
3502				endm  
# End of macro CALLMONITOR
3502					endif 
3502			 
3502 ed 52			sbc hl, de 
3504			 
3504			 
3504				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3504			 
3504 20 26				jr nz, .mloopnotdone 
3506			 
3506 e1				pop hl   ; get rid of saved I 
3507				FORTH_LOOP_POP     ; get rid of limit 
3507 cd 03 1e			call macro_forth_loop_pop 
350a				endm 
# End of macro FORTH_LOOP_POP
350a			 
350a				FORTH_RSP_POP     ; get rid of DO ptr 
350a cd 58 1b			call macro_forth_rsp_pop 
350d				endm 
# End of macro FORTH_RSP_POP
350d			 
350d			if DEBUG_FORTH_WORDS 
350d						DMARK "-L>" 
350d f5				push af  
350e 3a 22 35			ld a, (.dmark)  
3511 32 65 ee			ld (debug_mark),a  
3514 3a 23 35			ld a, (.dmark+1)  
3517 32 66 ee			ld (debug_mark+1),a  
351a 3a 24 35			ld a, (.dmark+2)  
351d 32 67 ee			ld (debug_mark+2),a  
3520 18 03			jr .pastdmark  
3522 ..			.dmark: db "-L>"  
3525 f1			.pastdmark: pop af  
3526			endm  
# End of macro DMARK
3526				CALLMONITOR 
3526 cd 6f ee			call debug_vector  
3529				endm  
# End of macro CALLMONITOR
3529			endif 
3529			 
3529					NEXTW 
3529 c3 80 1f			jp macro_next 
352c				endm 
# End of macro NEXTW
352c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
352c			 
352c			.mloopnotdone: 
352c			 
352c e1				pop hl    ; get I 
352d 2b				dec hl 
352e			 
352e			   	; save new I 
352e			 
352e			 
352e					; set I counter 
352e			 
352e 22 e0 e5				ld (os_current_i), hl 
3531			 
3531					 
3531				FORTH_LOOP_NEXT 
3531 cd c6 1d			call macro_forth_loop_next 
3534				endm 
# End of macro FORTH_LOOP_NEXT
3534			 
3534			 
3534					if DEBUG_FORTH_WORDS 
3534 eb						ex de,hl 
3535					endif 
3535			 
3535			;	; get DO ptr 
3535			; 
3535				FORTH_RSP_TOS 
3535 cd 4e 1b			call macro_forth_rsp_tos 
3538				endm 
# End of macro FORTH_RSP_TOS
3538			 
3538				;push hl 
3538			 
3538				; not going to DO any more 
3538				; get rid of the RSP pointer as DO will add it back in 
3538				;FORTH_RSP_POP 
3538				;pop hl 
3538			 
3538			 
3538 22 bc e5			ld (os_tok_ptr), hl 
353b					if DEBUG_FORTH_WORDS 
353b						DMARK "-L<" 
353b f5				push af  
353c 3a 50 35			ld a, (.dmark)  
353f 32 65 ee			ld (debug_mark),a  
3542 3a 51 35			ld a, (.dmark+1)  
3545 32 66 ee			ld (debug_mark+1),a  
3548 3a 52 35			ld a, (.dmark+2)  
354b 32 67 ee			ld (debug_mark+2),a  
354e 18 03			jr .pastdmark  
3550 ..			.dmark: db "-L<"  
3553 f1			.pastdmark: pop af  
3554			endm  
# End of macro DMARK
3554					CALLMONITOR 
3554 cd 6f ee			call debug_vector  
3557				endm  
# End of macro CALLMONITOR
3557				endif 
3557 c3 09 20			jp exec1 
355a			 
355a					 
355a			 
355a			 
355a			 
355a				NEXTW 
355a c3 80 1f			jp macro_next 
355d				endm 
# End of macro NEXTW
355d			 
355d			 
355d			 
355d			 
355d			.REPEAT: 
355d				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
355d 71				db WORD_SYS_CORE+93             
355e b0 35			dw .UNTIL            
3560 06				db 5 + 1 
3561 .. 00			db "REPEAT",0              
3568				endm 
# End of macro CWHEAD
3568			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3568			;  push pc to rsp stack past the REPEAT 
3568					if DEBUG_FORTH_WORDS_KEY 
3568						DMARK "REP" 
3568 f5				push af  
3569 3a 7d 35			ld a, (.dmark)  
356c 32 65 ee			ld (debug_mark),a  
356f 3a 7e 35			ld a, (.dmark+1)  
3572 32 66 ee			ld (debug_mark+1),a  
3575 3a 7f 35			ld a, (.dmark+2)  
3578 32 67 ee			ld (debug_mark+2),a  
357b 18 03			jr .pastdmark  
357d ..			.dmark: db "REP"  
3580 f1			.pastdmark: pop af  
3581			endm  
# End of macro DMARK
3581						CALLMONITOR 
3581 cd 6f ee			call debug_vector  
3584				endm  
# End of macro CALLMONITOR
3584					endif 
3584			 
3584 2a bc e5				ld hl, (os_tok_ptr) 
3587 23					inc hl   ; R 
3588 23					inc hl  ; E 
3589 23					inc hl   ; P 
358a 23					inc hl   ; E 
358b 23					inc hl   ; A 
358c 23					inc hl   ; T 
358d 23					inc hl   ; zero 
358e					FORTH_RSP_NEXT 
358e cd 37 1b			call macro_forth_rsp_next 
3591				endm 
# End of macro FORTH_RSP_NEXT
3591			 
3591			 
3591					if DEBUG_FORTH_WORDS 
3591						DMARK "REP" 
3591 f5				push af  
3592 3a a6 35			ld a, (.dmark)  
3595 32 65 ee			ld (debug_mark),a  
3598 3a a7 35			ld a, (.dmark+1)  
359b 32 66 ee			ld (debug_mark+1),a  
359e 3a a8 35			ld a, (.dmark+2)  
35a1 32 67 ee			ld (debug_mark+2),a  
35a4 18 03			jr .pastdmark  
35a6 ..			.dmark: db "REP"  
35a9 f1			.pastdmark: pop af  
35aa			endm  
# End of macro DMARK
35aa						;pop bc    ; TODO BUG ?????? what is this for???? 
35aa						CALLMONITOR 
35aa cd 6f ee			call debug_vector  
35ad				endm  
# End of macro CALLMONITOR
35ad					endif 
35ad			 
35ad					NEXTW 
35ad c3 80 1f			jp macro_next 
35b0				endm 
# End of macro NEXTW
35b0			;	       NEXTW 
35b0			 
35b0			.UNTIL: 
35b0				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
35b0 72				db WORD_SYS_CORE+94             
35b1 47 36			dw .ENDFLOW            
35b3 06				db 5 + 1 
35b4 .. 00			db "UNTIL",0              
35ba				endm 
# End of macro CWHEAD
35ba			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
35ba			 
35ba				; pop tos as check 
35ba			 
35ba				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
35ba			 
35ba				FORTH_DSP_VALUEHL 
35ba cd 95 1d			call macro_dsp_valuehl 
35bd				endm 
# End of macro FORTH_DSP_VALUEHL
35bd			 
35bd					if DEBUG_FORTH_WORDS_KEY 
35bd						DMARK "UNT" 
35bd f5				push af  
35be 3a d2 35			ld a, (.dmark)  
35c1 32 65 ee			ld (debug_mark),a  
35c4 3a d3 35			ld a, (.dmark+1)  
35c7 32 66 ee			ld (debug_mark+1),a  
35ca 3a d4 35			ld a, (.dmark+2)  
35cd 32 67 ee			ld (debug_mark+2),a  
35d0 18 03			jr .pastdmark  
35d2 ..			.dmark: db "UNT"  
35d5 f1			.pastdmark: pop af  
35d6			endm  
# End of macro DMARK
35d6						CALLMONITOR 
35d6 cd 6f ee			call debug_vector  
35d9				endm  
# End of macro CALLMONITOR
35d9					endif 
35d9			 
35d9			;	push hl 
35d9				FORTH_DSP_POP 
35d9 cd 4d 1e			call macro_forth_dsp_pop 
35dc				endm 
# End of macro FORTH_DSP_POP
35dc			 
35dc			;	pop hl 
35dc			 
35dc				; test if true 
35dc			 
35dc cd 1e 0e			call ishlzero 
35df			;	ld a,l 
35df			;	add h 
35df			; 
35df			;	cp 0 
35df			 
35df 20 3e			jr nz, .untilnotdone 
35e1			 
35e1					if DEBUG_FORTH_WORDS 
35e1						DMARK "UNf" 
35e1 f5				push af  
35e2 3a f6 35			ld a, (.dmark)  
35e5 32 65 ee			ld (debug_mark),a  
35e8 3a f7 35			ld a, (.dmark+1)  
35eb 32 66 ee			ld (debug_mark+1),a  
35ee 3a f8 35			ld a, (.dmark+2)  
35f1 32 67 ee			ld (debug_mark+2),a  
35f4 18 03			jr .pastdmark  
35f6 ..			.dmark: db "UNf"  
35f9 f1			.pastdmark: pop af  
35fa			endm  
# End of macro DMARK
35fa						CALLMONITOR 
35fa cd 6f ee			call debug_vector  
35fd				endm  
# End of macro CALLMONITOR
35fd					endif 
35fd			 
35fd			 
35fd			 
35fd				FORTH_RSP_POP     ; get rid of DO ptr 
35fd cd 58 1b			call macro_forth_rsp_pop 
3600				endm 
# End of macro FORTH_RSP_POP
3600			 
3600			if DEBUG_FORTH_WORDS 
3600						DMARK "UN>" 
3600 f5				push af  
3601 3a 15 36			ld a, (.dmark)  
3604 32 65 ee			ld (debug_mark),a  
3607 3a 16 36			ld a, (.dmark+1)  
360a 32 66 ee			ld (debug_mark+1),a  
360d 3a 17 36			ld a, (.dmark+2)  
3610 32 67 ee			ld (debug_mark+2),a  
3613 18 03			jr .pastdmark  
3615 ..			.dmark: db "UN>"  
3618 f1			.pastdmark: pop af  
3619			endm  
# End of macro DMARK
3619				CALLMONITOR 
3619 cd 6f ee			call debug_vector  
361c				endm  
# End of macro CALLMONITOR
361c			endif 
361c			 
361c					NEXTW 
361c c3 80 1f			jp macro_next 
361f				endm 
# End of macro NEXTW
361f				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
361f			 
361f			.untilnotdone: 
361f			 
361f			 
361f			;	; get DO ptr 
361f			; 
361f				FORTH_RSP_TOS 
361f cd 4e 1b			call macro_forth_rsp_tos 
3622				endm 
# End of macro FORTH_RSP_TOS
3622			 
3622				;push hl 
3622			 
3622				; not going to DO any more 
3622				; get rid of the RSP pointer as DO will add it back in 
3622				;FORTH_RSP_POP 
3622				;pop hl 
3622			 
3622			 
3622 22 bc e5			ld (os_tok_ptr), hl 
3625					if DEBUG_FORTH_WORDS 
3625						DMARK "UN<" 
3625 f5				push af  
3626 3a 3a 36			ld a, (.dmark)  
3629 32 65 ee			ld (debug_mark),a  
362c 3a 3b 36			ld a, (.dmark+1)  
362f 32 66 ee			ld (debug_mark+1),a  
3632 3a 3c 36			ld a, (.dmark+2)  
3635 32 67 ee			ld (debug_mark+2),a  
3638 18 03			jr .pastdmark  
363a ..			.dmark: db "UN<"  
363d f1			.pastdmark: pop af  
363e			endm  
# End of macro DMARK
363e					CALLMONITOR 
363e cd 6f ee			call debug_vector  
3641				endm  
# End of macro CALLMONITOR
3641				endif 
3641 c3 09 20			jp exec1 
3644			 
3644					 
3644			 
3644			 
3644					NEXTW 
3644 c3 80 1f			jp macro_next 
3647				endm 
# End of macro NEXTW
3647			 
3647			 
3647			.ENDFLOW: 
3647			 
3647			; eof 
3647			 
# End of file forth_words_flow.asm
3647			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3647			include "forth_words_logic.asm" 
3647			 
3647			; | ## Logic Words 
3647			 
3647			.NOT: 
3647				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3647 2d				db WORD_SYS_CORE+25             
3648 8f 36			dw .IS            
364a 04				db 3 + 1 
364b .. 00			db "NOT",0              
364f				endm 
# End of macro CWHEAD
364f			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
364f					if DEBUG_FORTH_WORDS_KEY 
364f						DMARK "NOT" 
364f f5				push af  
3650 3a 64 36			ld a, (.dmark)  
3653 32 65 ee			ld (debug_mark),a  
3656 3a 65 36			ld a, (.dmark+1)  
3659 32 66 ee			ld (debug_mark+1),a  
365c 3a 66 36			ld a, (.dmark+2)  
365f 32 67 ee			ld (debug_mark+2),a  
3662 18 03			jr .pastdmark  
3664 ..			.dmark: db "NOT"  
3667 f1			.pastdmark: pop af  
3668			endm  
# End of macro DMARK
3668						CALLMONITOR 
3668 cd 6f ee			call debug_vector  
366b				endm  
# End of macro CALLMONITOR
366b					endif 
366b					FORTH_DSP 
366b cd 5b 1d			call macro_forth_dsp 
366e				endm 
# End of macro FORTH_DSP
366e 7e					ld a,(hl)	; get type of value on TOS 
366f fe 02				cp DS_TYPE_INUM  
3671 28 03				jr z, .noti 
3673					NEXTW 
3673 c3 80 1f			jp macro_next 
3676				endm 
# End of macro NEXTW
3676			.noti:          FORTH_DSP_VALUEHL 
3676 cd 95 1d			call macro_dsp_valuehl 
3679				endm 
# End of macro FORTH_DSP_VALUEHL
3679			;		push hl 
3679					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3679 cd 4d 1e			call macro_forth_dsp_pop 
367c				endm 
# End of macro FORTH_DSP_POP
367c			;		pop hl 
367c 3e 00				ld a,0 
367e bd					cp l 
367f 28 04				jr z, .not2t 
3681 2e 00				ld l, 0 
3683 18 02				jr .notip 
3685			 
3685 2e ff		.not2t:		ld l, 255 
3687			 
3687 26 00		.notip:		ld h, 0	 
3689			 
3689 cd 90 1b				call forth_push_numhl 
368c					NEXTW 
368c c3 80 1f			jp macro_next 
368f				endm 
# End of macro NEXTW
368f			 
368f			.IS: 
368f				CWHEAD .LZERO 25 "COMPARE" 7 WORD_FLAG_CODE 
368f 2d				db WORD_SYS_CORE+25             
3690 d0 36			dw .LZERO            
3692 08				db 7 + 1 
3693 .. 00			db "COMPARE",0              
369b				endm 
# End of macro CWHEAD
369b			; | COMPARE ( s1 s2  -- f ) Push true if string s1 is the same as s2 | DONE 
369b					if DEBUG_FORTH_WORDS_KEY 
369b						DMARK "CMP" 
369b f5				push af  
369c 3a b0 36			ld a, (.dmark)  
369f 32 65 ee			ld (debug_mark),a  
36a2 3a b1 36			ld a, (.dmark+1)  
36a5 32 66 ee			ld (debug_mark+1),a  
36a8 3a b2 36			ld a, (.dmark+2)  
36ab 32 67 ee			ld (debug_mark+2),a  
36ae 18 03			jr .pastdmark  
36b0 ..			.dmark: db "CMP"  
36b3 f1			.pastdmark: pop af  
36b4			endm  
# End of macro DMARK
36b4						CALLMONITOR 
36b4 cd 6f ee			call debug_vector  
36b7				endm  
# End of macro CALLMONITOR
36b7					endif 
36b7			 
36b7					FORTH_DSP_VALUEHL 
36b7 cd 95 1d			call macro_dsp_valuehl 
36ba				endm 
# End of macro FORTH_DSP_VALUEHL
36ba			 
36ba e5					push hl 
36bb			 
36bb					FORTH_DSP_VALUEM1 
36bb cd 89 1d			call macro_forth_dsp_value_m1 
36be				endm 
# End of macro FORTH_DSP_VALUEM1
36be			 
36be d1					pop de 
36bf			 
36bf					; got pointers to both. Now check. 
36bf			 
36bf cd 93 11				call strcmp 
36c2				 
36c2 26 00				ld h, 0 
36c4 2e 00				ld l, 0 
36c6 20 02				jr nz, .compnsame 
36c8 2e 01				ld l, 1	 
36ca			.compnsame: 
36ca cd 90 1b				call forth_push_numhl 
36cd			 
36cd					NEXTW 
36cd c3 80 1f			jp macro_next 
36d0				endm 
# End of macro NEXTW
36d0			.LZERO: 
36d0				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
36d0 2d				db WORD_SYS_CORE+25             
36d1 da 36			dw .TZERO            
36d3 03				db 2 + 1 
36d4 .. 00			db "0<",0              
36d7				endm 
# End of macro CWHEAD
36d7			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
36d7					NEXTW 
36d7 c3 80 1f			jp macro_next 
36da				endm 
# End of macro NEXTW
36da			.TZERO: 
36da				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
36da 2e				db WORD_SYS_CORE+26             
36db 21 37			dw .LESS            
36dd 03				db 2 + 1 
36de .. 00			db "0=",0              
36e1				endm 
# End of macro CWHEAD
36e1			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
36e1				; TODO add floating point number detection 
36e1					;v5 FORTH_DSP_VALUE 
36e1					if DEBUG_FORTH_WORDS_KEY 
36e1						DMARK "0=." 
36e1 f5				push af  
36e2 3a f6 36			ld a, (.dmark)  
36e5 32 65 ee			ld (debug_mark),a  
36e8 3a f7 36			ld a, (.dmark+1)  
36eb 32 66 ee			ld (debug_mark+1),a  
36ee 3a f8 36			ld a, (.dmark+2)  
36f1 32 67 ee			ld (debug_mark+2),a  
36f4 18 03			jr .pastdmark  
36f6 ..			.dmark: db "0=."  
36f9 f1			.pastdmark: pop af  
36fa			endm  
# End of macro DMARK
36fa						CALLMONITOR 
36fa cd 6f ee			call debug_vector  
36fd				endm  
# End of macro CALLMONITOR
36fd					endif 
36fd					FORTH_DSP 
36fd cd 5b 1d			call macro_forth_dsp 
3700				endm 
# End of macro FORTH_DSP
3700 7e					ld a,(hl)	; get type of value on TOS 
3701 fe 02				cp DS_TYPE_INUM  
3703 28 00				jr z, .tz_inum 
3705			 
3705				if FORTH_ENABLE_FLOATMATH 
3705					jr .tz_done 
3705			 
3705				endif 
3705					 
3705			 
3705			.tz_inum: 
3705					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3705 cd 95 1d			call macro_dsp_valuehl 
3708				endm 
# End of macro FORTH_DSP_VALUEHL
3708			 
3708			;		push hl 
3708			 
3708					; destroy value TOS 
3708			 
3708					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3708 cd 4d 1e			call macro_forth_dsp_pop 
370b				endm 
# End of macro FORTH_DSP_POP
370b			 
370b			;		pop hl 
370b			 
370b 3e 00				ld a,0 
370d			 
370d bd					cp l 
370e 20 08				jr nz, .tz_notzero 
3710			 
3710 bc					cp h 
3711			 
3711 20 05				jr nz, .tz_notzero 
3713			 
3713			 
3713 21 01 00				ld hl, FORTH_TRUE 
3716 18 03				jr .tz_done 
3718			 
3718 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
371b			 
371b					; push value back onto stack for another op etc 
371b			 
371b			.tz_done: 
371b cd 90 1b				call forth_push_numhl 
371e			 
371e					NEXTW 
371e c3 80 1f			jp macro_next 
3721				endm 
# End of macro NEXTW
3721			.LESS: 
3721				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3721 2f				db WORD_SYS_CORE+27             
3722 8a 37			dw .GT            
3724 02				db 1 + 1 
3725 .. 00			db "<",0              
3727				endm 
# End of macro CWHEAD
3727			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3727				; TODO add floating point number detection 
3727					if DEBUG_FORTH_WORDS_KEY 
3727						DMARK "LES" 
3727 f5				push af  
3728 3a 3c 37			ld a, (.dmark)  
372b 32 65 ee			ld (debug_mark),a  
372e 3a 3d 37			ld a, (.dmark+1)  
3731 32 66 ee			ld (debug_mark+1),a  
3734 3a 3e 37			ld a, (.dmark+2)  
3737 32 67 ee			ld (debug_mark+2),a  
373a 18 03			jr .pastdmark  
373c ..			.dmark: db "LES"  
373f f1			.pastdmark: pop af  
3740			endm  
# End of macro DMARK
3740						CALLMONITOR 
3740 cd 6f ee			call debug_vector  
3743				endm  
# End of macro CALLMONITOR
3743					endif 
3743					FORTH_DSP 
3743 cd 5b 1d			call macro_forth_dsp 
3746				endm 
# End of macro FORTH_DSP
3746					;v5 FORTH_DSP_VALUE 
3746 7e					ld a,(hl)	; get type of value on TOS 
3747 fe 02				cp DS_TYPE_INUM  
3749 28 00				jr z, .less_inum 
374b			 
374b				if FORTH_ENABLE_FLOATMATH 
374b					jr .less_done 
374b			 
374b				endif 
374b					 
374b			 
374b			.less_inum: 
374b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
374b cd 95 1d			call macro_dsp_valuehl 
374e				endm 
# End of macro FORTH_DSP_VALUEHL
374e			 
374e e5					push hl  ; u2 
374f			 
374f					; destroy value TOS 
374f			 
374f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
374f cd 4d 1e			call macro_forth_dsp_pop 
3752				endm 
# End of macro FORTH_DSP_POP
3752			 
3752			 
3752					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3752 cd 95 1d			call macro_dsp_valuehl 
3755				endm 
# End of macro FORTH_DSP_VALUEHL
3755			 
3755 e5					push hl    ; u1 
3756			 
3756					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3756 cd 4d 1e			call macro_forth_dsp_pop 
3759				endm 
# End of macro FORTH_DSP_POP
3759			 
3759			 
3759 b7			 or a      ;clear carry flag 
375a 01 00 00		 ld bc, FORTH_FALSE 
375d e1			  pop hl    ; u1 
375e d1			  pop de    ; u2 
375f ed 52		  sbc hl,de 
3761 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3763			 
3763 01 01 00		 ld bc, FORTH_TRUE 
3766			.lscont:  
3766 c5					push bc 
3767 e1					pop hl 
3768			 
3768					if DEBUG_FORTH_WORDS 
3768						DMARK "LT1" 
3768 f5				push af  
3769 3a 7d 37			ld a, (.dmark)  
376c 32 65 ee			ld (debug_mark),a  
376f 3a 7e 37			ld a, (.dmark+1)  
3772 32 66 ee			ld (debug_mark+1),a  
3775 3a 7f 37			ld a, (.dmark+2)  
3778 32 67 ee			ld (debug_mark+2),a  
377b 18 03			jr .pastdmark  
377d ..			.dmark: db "LT1"  
3780 f1			.pastdmark: pop af  
3781			endm  
# End of macro DMARK
3781						CALLMONITOR 
3781 cd 6f ee			call debug_vector  
3784				endm  
# End of macro CALLMONITOR
3784					endif 
3784 cd 90 1b				call forth_push_numhl 
3787			 
3787					NEXTW 
3787 c3 80 1f			jp macro_next 
378a				endm 
# End of macro NEXTW
378a			.GT: 
378a				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
378a 30				db WORD_SYS_CORE+28             
378b f3 37			dw .EQUAL            
378d 02				db 1 + 1 
378e .. 00			db ">",0              
3790				endm 
# End of macro CWHEAD
3790			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3790				; TODO add floating point number detection 
3790					if DEBUG_FORTH_WORDS_KEY 
3790						DMARK "GRT" 
3790 f5				push af  
3791 3a a5 37			ld a, (.dmark)  
3794 32 65 ee			ld (debug_mark),a  
3797 3a a6 37			ld a, (.dmark+1)  
379a 32 66 ee			ld (debug_mark+1),a  
379d 3a a7 37			ld a, (.dmark+2)  
37a0 32 67 ee			ld (debug_mark+2),a  
37a3 18 03			jr .pastdmark  
37a5 ..			.dmark: db "GRT"  
37a8 f1			.pastdmark: pop af  
37a9			endm  
# End of macro DMARK
37a9						CALLMONITOR 
37a9 cd 6f ee			call debug_vector  
37ac				endm  
# End of macro CALLMONITOR
37ac					endif 
37ac					FORTH_DSP 
37ac cd 5b 1d			call macro_forth_dsp 
37af				endm 
# End of macro FORTH_DSP
37af					;FORTH_DSP_VALUE 
37af 7e					ld a,(hl)	; get type of value on TOS 
37b0 fe 02				cp DS_TYPE_INUM  
37b2 28 00				jr z, .gt_inum 
37b4			 
37b4				if FORTH_ENABLE_FLOATMATH 
37b4					jr .gt_done 
37b4			 
37b4				endif 
37b4					 
37b4			 
37b4			.gt_inum: 
37b4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37b4 cd 95 1d			call macro_dsp_valuehl 
37b7				endm 
# End of macro FORTH_DSP_VALUEHL
37b7			 
37b7 e5					push hl  ; u2 
37b8			 
37b8					; destroy value TOS 
37b8			 
37b8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37b8 cd 4d 1e			call macro_forth_dsp_pop 
37bb				endm 
# End of macro FORTH_DSP_POP
37bb			 
37bb			 
37bb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37bb cd 95 1d			call macro_dsp_valuehl 
37be				endm 
# End of macro FORTH_DSP_VALUEHL
37be			 
37be e5					push hl    ; u1 
37bf			 
37bf					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37bf cd 4d 1e			call macro_forth_dsp_pop 
37c2				endm 
# End of macro FORTH_DSP_POP
37c2			 
37c2			 
37c2 b7			 or a      ;clear carry flag 
37c3 01 00 00		 ld bc, FORTH_FALSE 
37c6 e1			  pop hl    ; u1 
37c7 d1			  pop de    ; u2 
37c8 ed 52		  sbc hl,de 
37ca 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
37cc			 
37cc 01 01 00		 ld bc, FORTH_TRUE 
37cf			.gtcont:  
37cf c5					push bc 
37d0 e1					pop hl 
37d1			 
37d1					if DEBUG_FORTH_WORDS 
37d1						DMARK "GT1" 
37d1 f5				push af  
37d2 3a e6 37			ld a, (.dmark)  
37d5 32 65 ee			ld (debug_mark),a  
37d8 3a e7 37			ld a, (.dmark+1)  
37db 32 66 ee			ld (debug_mark+1),a  
37de 3a e8 37			ld a, (.dmark+2)  
37e1 32 67 ee			ld (debug_mark+2),a  
37e4 18 03			jr .pastdmark  
37e6 ..			.dmark: db "GT1"  
37e9 f1			.pastdmark: pop af  
37ea			endm  
# End of macro DMARK
37ea						CALLMONITOR 
37ea cd 6f ee			call debug_vector  
37ed				endm  
# End of macro CALLMONITOR
37ed					endif 
37ed cd 90 1b				call forth_push_numhl 
37f0			 
37f0					NEXTW 
37f0 c3 80 1f			jp macro_next 
37f3				endm 
# End of macro NEXTW
37f3			.EQUAL: 
37f3				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
37f3 31				db WORD_SYS_CORE+29             
37f4 5e 38			dw .ENDLOGIC            
37f6 02				db 1 + 1 
37f7 .. 00			db "=",0              
37f9				endm 
# End of macro CWHEAD
37f9			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
37f9				; TODO add floating point number detection 
37f9					if DEBUG_FORTH_WORDS_KEY 
37f9						DMARK "EQ." 
37f9 f5				push af  
37fa 3a 0e 38			ld a, (.dmark)  
37fd 32 65 ee			ld (debug_mark),a  
3800 3a 0f 38			ld a, (.dmark+1)  
3803 32 66 ee			ld (debug_mark+1),a  
3806 3a 10 38			ld a, (.dmark+2)  
3809 32 67 ee			ld (debug_mark+2),a  
380c 18 03			jr .pastdmark  
380e ..			.dmark: db "EQ."  
3811 f1			.pastdmark: pop af  
3812			endm  
# End of macro DMARK
3812						CALLMONITOR 
3812 cd 6f ee			call debug_vector  
3815				endm  
# End of macro CALLMONITOR
3815					endif 
3815					FORTH_DSP 
3815 cd 5b 1d			call macro_forth_dsp 
3818				endm 
# End of macro FORTH_DSP
3818					;v5 FORTH_DSP_VALUE 
3818 7e					ld a,(hl)	; get type of value on TOS 
3819 fe 02				cp DS_TYPE_INUM  
381b 28 00				jr z, .eq_inum 
381d			 
381d				if FORTH_ENABLE_FLOATMATH 
381d					jr .eq_done 
381d			 
381d				endif 
381d					 
381d			 
381d			.eq_inum: 
381d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
381d cd 95 1d			call macro_dsp_valuehl 
3820				endm 
# End of macro FORTH_DSP_VALUEHL
3820			 
3820 e5					push hl 
3821			 
3821					; destroy value TOS 
3821			 
3821					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3821 cd 4d 1e			call macro_forth_dsp_pop 
3824				endm 
# End of macro FORTH_DSP_POP
3824			 
3824			 
3824					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3824 cd 95 1d			call macro_dsp_valuehl 
3827				endm 
# End of macro FORTH_DSP_VALUEHL
3827			 
3827					; one value on hl get other one back 
3827			 
3827 e5					push hl 
3828			 
3828					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3828 cd 4d 1e			call macro_forth_dsp_pop 
382b				endm 
# End of macro FORTH_DSP_POP
382b			 
382b 0e 00				ld c, FORTH_FALSE 
382d			 
382d e1					pop hl 
382e d1					pop de 
382f			 
382f 7b					ld a, e 
3830 bd					cp l 
3831			 
3831 20 06				jr nz, .eq_done 
3833			 
3833 7a					ld a, d 
3834 bc					cp h 
3835			 
3835 20 02				jr nz, .eq_done 
3837			 
3837 0e 01				ld c, FORTH_TRUE 
3839					 
3839			 
3839			 
3839			.eq_done: 
3839			 
3839					; TODO push value back onto stack for another op etc 
3839			 
3839 26 00				ld h, 0 
383b 69					ld l, c 
383c					if DEBUG_FORTH_WORDS 
383c						DMARK "EQ1" 
383c f5				push af  
383d 3a 51 38			ld a, (.dmark)  
3840 32 65 ee			ld (debug_mark),a  
3843 3a 52 38			ld a, (.dmark+1)  
3846 32 66 ee			ld (debug_mark+1),a  
3849 3a 53 38			ld a, (.dmark+2)  
384c 32 67 ee			ld (debug_mark+2),a  
384f 18 03			jr .pastdmark  
3851 ..			.dmark: db "EQ1"  
3854 f1			.pastdmark: pop af  
3855			endm  
# End of macro DMARK
3855						CALLMONITOR 
3855 cd 6f ee			call debug_vector  
3858				endm  
# End of macro CALLMONITOR
3858					endif 
3858 cd 90 1b				call forth_push_numhl 
385b			 
385b					NEXTW 
385b c3 80 1f			jp macro_next 
385e				endm 
# End of macro NEXTW
385e			 
385e			 
385e			.ENDLOGIC: 
385e			; eof 
385e			 
385e			 
# End of file forth_words_logic.asm
385e			include "forth_words_maths.asm" 
385e			 
385e			; | ## Maths Words 
385e			 
385e			.PLUS:	 
385e				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
385e 15				db WORD_SYS_CORE+1             
385f bc 38			dw .NEG            
3861 02				db 1 + 1 
3862 .. 00			db "+",0              
3864				endm 
# End of macro CWHEAD
3864			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3864					if DEBUG_FORTH_WORDS_KEY 
3864						DMARK "PLU" 
3864 f5				push af  
3865 3a 79 38			ld a, (.dmark)  
3868 32 65 ee			ld (debug_mark),a  
386b 3a 7a 38			ld a, (.dmark+1)  
386e 32 66 ee			ld (debug_mark+1),a  
3871 3a 7b 38			ld a, (.dmark+2)  
3874 32 67 ee			ld (debug_mark+2),a  
3877 18 03			jr .pastdmark  
3879 ..			.dmark: db "PLU"  
387c f1			.pastdmark: pop af  
387d			endm  
# End of macro DMARK
387d						CALLMONITOR 
387d cd 6f ee			call debug_vector  
3880				endm  
# End of macro CALLMONITOR
3880					endif 
3880					; add top two values and push back result 
3880			 
3880					;for v5 FORTH_DSP_VALUE 
3880					FORTH_DSP 
3880 cd 5b 1d			call macro_forth_dsp 
3883				endm 
# End of macro FORTH_DSP
3883 7e					ld a,(hl)	; get type of value on TOS 
3884 fe 02				cp DS_TYPE_INUM  
3886 28 03				jr z, .dot_inum 
3888			 
3888					NEXTW 
3888 c3 80 1f			jp macro_next 
388b				endm 
# End of macro NEXTW
388b			 
388b			; float maths 
388b			 
388b				if FORTH_ENABLE_FLOATMATH 
388b						inc hl      ; now at start of numeric as string 
388b			 
388b					if DEBUG_FORTH_MATHS 
388b						DMARK "ADD" 
388b				CALLMONITOR 
388b					endif 
388b			 
388b					;ld ix, hl 
388b					call CON 
388b			 
388b			 
388b					push hl 
388b					 
388b					 
388b			 
388b						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
388b			 
388b					; get next number 
388b			 
388b						FORTH_DSP_VALUE 
388b			 
388b						inc hl      ; now at start of numeric as string 
388b			 
388b					;ld ix, hl 
388b					call CON 
388b			 
388b					push hl 
388b			 
388b			 
388b						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
388b			 
388b						; TODO do add 
388b			 
388b						call IADD 
388b			 
388b						; TODO get result back as ascii 
388b			 
388b						; TODO push result  
388b			 
388b			 
388b			 
388b						jr .dot_done 
388b				endif 
388b			 
388b			.dot_inum: 
388b			 
388b			 
388b					if DEBUG_FORTH_DOT 
388b						DMARK "+IT" 
388b f5				push af  
388c 3a a0 38			ld a, (.dmark)  
388f 32 65 ee			ld (debug_mark),a  
3892 3a a1 38			ld a, (.dmark+1)  
3895 32 66 ee			ld (debug_mark+1),a  
3898 3a a2 38			ld a, (.dmark+2)  
389b 32 67 ee			ld (debug_mark+2),a  
389e 18 03			jr .pastdmark  
38a0 ..			.dmark: db "+IT"  
38a3 f1			.pastdmark: pop af  
38a4			endm  
# End of macro DMARK
38a4				CALLMONITOR 
38a4 cd 6f ee			call debug_vector  
38a7				endm  
# End of macro CALLMONITOR
38a7					endif 
38a7			 
38a7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38a7 cd 95 1d			call macro_dsp_valuehl 
38aa				endm 
# End of macro FORTH_DSP_VALUEHL
38aa			 
38aa				; TODO add floating point number detection 
38aa			 
38aa e5					push hl 
38ab			 
38ab					; destroy value TOS 
38ab			 
38ab					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38ab cd 4d 1e			call macro_forth_dsp_pop 
38ae				endm 
# End of macro FORTH_DSP_POP
38ae			 
38ae			 
38ae					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38ae cd 95 1d			call macro_dsp_valuehl 
38b1				endm 
# End of macro FORTH_DSP_VALUEHL
38b1			 
38b1					; one value on hl get other one back 
38b1			 
38b1 d1					pop de 
38b2			 
38b2					; do the add 
38b2			 
38b2 19					add hl,de 
38b3			 
38b3					; save it 
38b3			 
38b3			;		push hl	 
38b3			 
38b3					; 
38b3			 
38b3					; destroy value TOS 
38b3			 
38b3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38b3 cd 4d 1e			call macro_forth_dsp_pop 
38b6				endm 
# End of macro FORTH_DSP_POP
38b6			 
38b6					; TODO push value back onto stack for another op etc 
38b6			 
38b6			;		pop hl 
38b6			 
38b6			.dot_done: 
38b6 cd 90 1b				call forth_push_numhl 
38b9			 
38b9					NEXTW 
38b9 c3 80 1f			jp macro_next 
38bc				endm 
# End of macro NEXTW
38bc			.NEG: 
38bc			 
38bc				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
38bc 17				db WORD_SYS_CORE+3             
38bd ff 38			dw .DIV            
38bf 02				db 1 + 1 
38c0 .. 00			db "-",0              
38c2				endm 
# End of macro CWHEAD
38c2			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
38c2					if DEBUG_FORTH_WORDS_KEY 
38c2						DMARK "SUB" 
38c2 f5				push af  
38c3 3a d7 38			ld a, (.dmark)  
38c6 32 65 ee			ld (debug_mark),a  
38c9 3a d8 38			ld a, (.dmark+1)  
38cc 32 66 ee			ld (debug_mark+1),a  
38cf 3a d9 38			ld a, (.dmark+2)  
38d2 32 67 ee			ld (debug_mark+2),a  
38d5 18 03			jr .pastdmark  
38d7 ..			.dmark: db "SUB"  
38da f1			.pastdmark: pop af  
38db			endm  
# End of macro DMARK
38db						CALLMONITOR 
38db cd 6f ee			call debug_vector  
38de				endm  
# End of macro CALLMONITOR
38de					endif 
38de			 
38de			 
38de				; TODO add floating point number detection 
38de					; v5 FORTH_DSP_VALUE 
38de					FORTH_DSP 
38de cd 5b 1d			call macro_forth_dsp 
38e1				endm 
# End of macro FORTH_DSP
38e1 7e					ld a,(hl)	; get type of value on TOS 
38e2 fe 02				cp DS_TYPE_INUM  
38e4 28 03				jr z, .neg_inum 
38e6			 
38e6					NEXTW 
38e6 c3 80 1f			jp macro_next 
38e9				endm 
# End of macro NEXTW
38e9			 
38e9			; float maths 
38e9			 
38e9				if FORTH_ENABLE_FLOATMATH 
38e9					jr .neg_done 
38e9			 
38e9				endif 
38e9					 
38e9			 
38e9			.neg_inum: 
38e9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38e9 cd 95 1d			call macro_dsp_valuehl 
38ec				endm 
# End of macro FORTH_DSP_VALUEHL
38ec			 
38ec e5					push hl 
38ed			 
38ed					; destroy value TOS 
38ed			 
38ed					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38ed cd 4d 1e			call macro_forth_dsp_pop 
38f0				endm 
# End of macro FORTH_DSP_POP
38f0			 
38f0			 
38f0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38f0 cd 95 1d			call macro_dsp_valuehl 
38f3				endm 
# End of macro FORTH_DSP_VALUEHL
38f3			 
38f3					; one value on hl get other one back 
38f3			 
38f3 d1					pop de 
38f4			 
38f4					; do the sub 
38f4			;		ex de, hl 
38f4			 
38f4 ed 52				sbc hl,de 
38f6			 
38f6					; save it 
38f6			 
38f6			;		push hl	 
38f6			 
38f6					; 
38f6			 
38f6					; destroy value TOS 
38f6			 
38f6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38f6 cd 4d 1e			call macro_forth_dsp_pop 
38f9				endm 
# End of macro FORTH_DSP_POP
38f9			 
38f9					; TODO push value back onto stack for another op etc 
38f9			 
38f9			;		pop hl 
38f9			 
38f9 cd 90 1b				call forth_push_numhl 
38fc			.neg_done: 
38fc			 
38fc					NEXTW 
38fc c3 80 1f			jp macro_next 
38ff				endm 
# End of macro NEXTW
38ff			.DIV: 
38ff				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
38ff 18				db WORD_SYS_CORE+4             
3900 4c 39			dw .MUL            
3902 02				db 1 + 1 
3903 .. 00			db "/",0              
3905				endm 
# End of macro CWHEAD
3905			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3905					if DEBUG_FORTH_WORDS_KEY 
3905						DMARK "DIV" 
3905 f5				push af  
3906 3a 1a 39			ld a, (.dmark)  
3909 32 65 ee			ld (debug_mark),a  
390c 3a 1b 39			ld a, (.dmark+1)  
390f 32 66 ee			ld (debug_mark+1),a  
3912 3a 1c 39			ld a, (.dmark+2)  
3915 32 67 ee			ld (debug_mark+2),a  
3918 18 03			jr .pastdmark  
391a ..			.dmark: db "DIV"  
391d f1			.pastdmark: pop af  
391e			endm  
# End of macro DMARK
391e						CALLMONITOR 
391e cd 6f ee			call debug_vector  
3921				endm  
# End of macro CALLMONITOR
3921					endif 
3921				; TODO add floating point number detection 
3921					; v5 FORTH_DSP_VALUE 
3921					FORTH_DSP 
3921 cd 5b 1d			call macro_forth_dsp 
3924				endm 
# End of macro FORTH_DSP
3924 7e					ld a,(hl)	; get type of value on TOS 
3925 fe 02				cp DS_TYPE_INUM  
3927 28 03				jr z, .div_inum 
3929			 
3929				if FORTH_ENABLE_FLOATMATH 
3929					jr .div_done 
3929			 
3929				endif 
3929					NEXTW 
3929 c3 80 1f			jp macro_next 
392c				endm 
# End of macro NEXTW
392c			.div_inum: 
392c			 
392c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
392c cd 95 1d			call macro_dsp_valuehl 
392f				endm 
# End of macro FORTH_DSP_VALUEHL
392f			 
392f e5					push hl    ; to go to bc 
3930			 
3930					; destroy value TOS 
3930			 
3930					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3930 cd 4d 1e			call macro_forth_dsp_pop 
3933				endm 
# End of macro FORTH_DSP_POP
3933			 
3933			 
3933					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3933 cd 95 1d			call macro_dsp_valuehl 
3936				endm 
# End of macro FORTH_DSP_VALUEHL
3936			 
3936					; hl to go to de 
3936			 
3936 e5					push hl 
3937			 
3937 c1					pop bc 
3938 d1					pop de		 
3939			 
3939			 
3939					if DEBUG_FORTH_MATHS 
3939						DMARK "DIV" 
3939				CALLMONITOR 
3939					endif 
3939					; one value on hl but move to a get other one back 
3939			 
3939			        
3939 cd 52 0d			call Div16 
393c			 
393c			;	push af	 
393c e5				push hl 
393d c5				push bc 
393e			 
393e					if DEBUG_FORTH_MATHS 
393e						DMARK "DI1" 
393e				CALLMONITOR 
393e					endif 
393e			 
393e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
393e cd 4d 1e			call macro_forth_dsp_pop 
3941				endm 
# End of macro FORTH_DSP_POP
3941			 
3941			 
3941			 
3941 e1					pop hl    ; result 
3942			 
3942 cd 90 1b				call forth_push_numhl 
3945			 
3945 e1					pop hl    ; reminder 
3946			;		ld h,0 
3946			;		ld l,d 
3946			 
3946 cd 90 1b				call forth_push_numhl 
3949			.div_done: 
3949					NEXTW 
3949 c3 80 1f			jp macro_next 
394c				endm 
# End of macro NEXTW
394c			.MUL: 
394c				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
394c 19				db WORD_SYS_CORE+5             
394d 91 39			dw .MIN            
394f 02				db 1 + 1 
3950 .. 00			db "*",0              
3952				endm 
# End of macro CWHEAD
3952			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3952				; TODO add floating point number detection 
3952					if DEBUG_FORTH_WORDS_KEY 
3952						DMARK "MUL" 
3952 f5				push af  
3953 3a 67 39			ld a, (.dmark)  
3956 32 65 ee			ld (debug_mark),a  
3959 3a 68 39			ld a, (.dmark+1)  
395c 32 66 ee			ld (debug_mark+1),a  
395f 3a 69 39			ld a, (.dmark+2)  
3962 32 67 ee			ld (debug_mark+2),a  
3965 18 03			jr .pastdmark  
3967 ..			.dmark: db "MUL"  
396a f1			.pastdmark: pop af  
396b			endm  
# End of macro DMARK
396b						CALLMONITOR 
396b cd 6f ee			call debug_vector  
396e				endm  
# End of macro CALLMONITOR
396e					endif 
396e					FORTH_DSP 
396e cd 5b 1d			call macro_forth_dsp 
3971				endm 
# End of macro FORTH_DSP
3971					; v5 FORTH_DSP_VALUE 
3971 7e					ld a,(hl)	; get type of value on TOS 
3972 fe 02				cp DS_TYPE_INUM  
3974 28 03				jr z, .mul_inum 
3976			 
3976				if FORTH_ENABLE_FLOATMATH 
3976					jr .mul_done 
3976			 
3976				endif 
3976			 
3976					NEXTW 
3976 c3 80 1f			jp macro_next 
3979				endm 
# End of macro NEXTW
3979			.mul_inum:	 
3979			 
3979					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3979 cd 95 1d			call macro_dsp_valuehl 
397c				endm 
# End of macro FORTH_DSP_VALUEHL
397c			 
397c e5					push hl 
397d			 
397d					; destroy value TOS 
397d			 
397d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
397d cd 4d 1e			call macro_forth_dsp_pop 
3980				endm 
# End of macro FORTH_DSP_POP
3980			 
3980			 
3980					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3980 cd 95 1d			call macro_dsp_valuehl 
3983				endm 
# End of macro FORTH_DSP_VALUEHL
3983			 
3983					; one value on hl but move to a get other one back 
3983			 
3983 7d					ld a, l 
3984			 
3984 d1					pop de 
3985			 
3985					; do the mull 
3985			;		ex de, hl 
3985			 
3985 cd 78 0d				call Mult16 
3988					; save it 
3988			 
3988			;		push hl	 
3988			 
3988					; 
3988			 
3988					; destroy value TOS 
3988			 
3988					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3988 cd 4d 1e			call macro_forth_dsp_pop 
398b				endm 
# End of macro FORTH_DSP_POP
398b			 
398b					; TODO push value back onto stack for another op etc 
398b			 
398b			;		pop hl 
398b			 
398b cd 90 1b				call forth_push_numhl 
398e			 
398e			.mul_done: 
398e					NEXTW 
398e c3 80 1f			jp macro_next 
3991				endm 
# End of macro NEXTW
3991			 
3991			 
3991			 
3991			 
3991			.MIN: 
3991				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3991 49				db WORD_SYS_CORE+53             
3992 12 3a			dw .MAX            
3994 04				db 3 + 1 
3995 .. 00			db "MIN",0              
3999				endm 
# End of macro CWHEAD
3999			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3999					if DEBUG_FORTH_WORDS_KEY 
3999						DMARK "MIN" 
3999 f5				push af  
399a 3a ae 39			ld a, (.dmark)  
399d 32 65 ee			ld (debug_mark),a  
39a0 3a af 39			ld a, (.dmark+1)  
39a3 32 66 ee			ld (debug_mark+1),a  
39a6 3a b0 39			ld a, (.dmark+2)  
39a9 32 67 ee			ld (debug_mark+2),a  
39ac 18 03			jr .pastdmark  
39ae ..			.dmark: db "MIN"  
39b1 f1			.pastdmark: pop af  
39b2			endm  
# End of macro DMARK
39b2						CALLMONITOR 
39b2 cd 6f ee			call debug_vector  
39b5				endm  
# End of macro CALLMONITOR
39b5					endif 
39b5					; get u2 
39b5			 
39b5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
39b5 cd 95 1d			call macro_dsp_valuehl 
39b8				endm 
# End of macro FORTH_DSP_VALUEHL
39b8			 
39b8 e5					push hl   ; u2 
39b9			 
39b9					; destroy value TOS 
39b9			 
39b9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39b9 cd 4d 1e			call macro_forth_dsp_pop 
39bc				endm 
# End of macro FORTH_DSP_POP
39bc			 
39bc					; get u1 
39bc			 
39bc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
39bc cd 95 1d			call macro_dsp_valuehl 
39bf				endm 
# End of macro FORTH_DSP_VALUEHL
39bf			 
39bf e5					push hl  ; u1 
39c0			 
39c0					; destroy value TOS 
39c0			 
39c0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39c0 cd 4d 1e			call macro_forth_dsp_pop 
39c3				endm 
# End of macro FORTH_DSP_POP
39c3			 
39c3 b7			 or a      ;clear carry flag 
39c4 e1			  pop hl    ; u1 
39c5 d1			  pop de    ; u2 
39c6 e5				push hl   ; saved in case hl is lowest 
39c7 ed 52		  sbc hl,de 
39c9 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
39cb			 
39cb e1				pop hl 
39cc					if DEBUG_FORTH_WORDS 
39cc						DMARK "MIN" 
39cc f5				push af  
39cd 3a e1 39			ld a, (.dmark)  
39d0 32 65 ee			ld (debug_mark),a  
39d3 3a e2 39			ld a, (.dmark+1)  
39d6 32 66 ee			ld (debug_mark+1),a  
39d9 3a e3 39			ld a, (.dmark+2)  
39dc 32 67 ee			ld (debug_mark+2),a  
39df 18 03			jr .pastdmark  
39e1 ..			.dmark: db "MIN"  
39e4 f1			.pastdmark: pop af  
39e5			endm  
# End of macro DMARK
39e5						CALLMONITOR 
39e5 cd 6f ee			call debug_vector  
39e8				endm  
# End of macro CALLMONITOR
39e8					endif 
39e8 cd 90 1b				call forth_push_numhl 
39eb			 
39eb				       NEXTW 
39eb c3 80 1f			jp macro_next 
39ee				endm 
# End of macro NEXTW
39ee			 
39ee			.mincont:  
39ee c1				pop bc   ; tidy up 
39ef eb				ex de , hl  
39f0					if DEBUG_FORTH_WORDS 
39f0						DMARK "MI1" 
39f0 f5				push af  
39f1 3a 05 3a			ld a, (.dmark)  
39f4 32 65 ee			ld (debug_mark),a  
39f7 3a 06 3a			ld a, (.dmark+1)  
39fa 32 66 ee			ld (debug_mark+1),a  
39fd 3a 07 3a			ld a, (.dmark+2)  
3a00 32 67 ee			ld (debug_mark+2),a  
3a03 18 03			jr .pastdmark  
3a05 ..			.dmark: db "MI1"  
3a08 f1			.pastdmark: pop af  
3a09			endm  
# End of macro DMARK
3a09						CALLMONITOR 
3a09 cd 6f ee			call debug_vector  
3a0c				endm  
# End of macro CALLMONITOR
3a0c					endif 
3a0c cd 90 1b				call forth_push_numhl 
3a0f			 
3a0f				       NEXTW 
3a0f c3 80 1f			jp macro_next 
3a12				endm 
# End of macro NEXTW
3a12			.MAX: 
3a12				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3a12 4a				db WORD_SYS_CORE+54             
3a13 93 3a			dw .RND16            
3a15 04				db 3 + 1 
3a16 .. 00			db "MAX",0              
3a1a				endm 
# End of macro CWHEAD
3a1a			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3a1a					if DEBUG_FORTH_WORDS_KEY 
3a1a						DMARK "MAX" 
3a1a f5				push af  
3a1b 3a 2f 3a			ld a, (.dmark)  
3a1e 32 65 ee			ld (debug_mark),a  
3a21 3a 30 3a			ld a, (.dmark+1)  
3a24 32 66 ee			ld (debug_mark+1),a  
3a27 3a 31 3a			ld a, (.dmark+2)  
3a2a 32 67 ee			ld (debug_mark+2),a  
3a2d 18 03			jr .pastdmark  
3a2f ..			.dmark: db "MAX"  
3a32 f1			.pastdmark: pop af  
3a33			endm  
# End of macro DMARK
3a33						CALLMONITOR 
3a33 cd 6f ee			call debug_vector  
3a36				endm  
# End of macro CALLMONITOR
3a36					endif 
3a36					; get u2 
3a36			 
3a36					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a36 cd 95 1d			call macro_dsp_valuehl 
3a39				endm 
# End of macro FORTH_DSP_VALUEHL
3a39			 
3a39 e5					push hl   ; u2 
3a3a			 
3a3a					; destroy value TOS 
3a3a			 
3a3a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a3a cd 4d 1e			call macro_forth_dsp_pop 
3a3d				endm 
# End of macro FORTH_DSP_POP
3a3d			 
3a3d					; get u1 
3a3d			 
3a3d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a3d cd 95 1d			call macro_dsp_valuehl 
3a40				endm 
# End of macro FORTH_DSP_VALUEHL
3a40			 
3a40 e5					push hl  ; u1 
3a41			 
3a41					; destroy value TOS 
3a41			 
3a41					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a41 cd 4d 1e			call macro_forth_dsp_pop 
3a44				endm 
# End of macro FORTH_DSP_POP
3a44			 
3a44 b7			 or a      ;clear carry flag 
3a45 e1			  pop hl    ; u1 
3a46 d1			  pop de    ; u2 
3a47 e5				push hl   ; saved in case hl is lowest 
3a48 ed 52		  sbc hl,de 
3a4a 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3a4c			 
3a4c e1				pop hl 
3a4d					if DEBUG_FORTH_WORDS 
3a4d						DMARK "MAX" 
3a4d f5				push af  
3a4e 3a 62 3a			ld a, (.dmark)  
3a51 32 65 ee			ld (debug_mark),a  
3a54 3a 63 3a			ld a, (.dmark+1)  
3a57 32 66 ee			ld (debug_mark+1),a  
3a5a 3a 64 3a			ld a, (.dmark+2)  
3a5d 32 67 ee			ld (debug_mark+2),a  
3a60 18 03			jr .pastdmark  
3a62 ..			.dmark: db "MAX"  
3a65 f1			.pastdmark: pop af  
3a66			endm  
# End of macro DMARK
3a66						CALLMONITOR 
3a66 cd 6f ee			call debug_vector  
3a69				endm  
# End of macro CALLMONITOR
3a69					endif 
3a69 cd 90 1b				call forth_push_numhl 
3a6c			 
3a6c				       NEXTW 
3a6c c3 80 1f			jp macro_next 
3a6f				endm 
# End of macro NEXTW
3a6f			 
3a6f			.maxcont:  
3a6f c1				pop bc   ; tidy up 
3a70 eb				ex de , hl  
3a71					if DEBUG_FORTH_WORDS 
3a71						DMARK "MA1" 
3a71 f5				push af  
3a72 3a 86 3a			ld a, (.dmark)  
3a75 32 65 ee			ld (debug_mark),a  
3a78 3a 87 3a			ld a, (.dmark+1)  
3a7b 32 66 ee			ld (debug_mark+1),a  
3a7e 3a 88 3a			ld a, (.dmark+2)  
3a81 32 67 ee			ld (debug_mark+2),a  
3a84 18 03			jr .pastdmark  
3a86 ..			.dmark: db "MA1"  
3a89 f1			.pastdmark: pop af  
3a8a			endm  
# End of macro DMARK
3a8a						CALLMONITOR 
3a8a cd 6f ee			call debug_vector  
3a8d				endm  
# End of macro CALLMONITOR
3a8d					endif 
3a8d cd 90 1b				call forth_push_numhl 
3a90				       NEXTW 
3a90 c3 80 1f			jp macro_next 
3a93				endm 
# End of macro NEXTW
3a93			 
3a93			.RND16: 
3a93				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3a93 4e				db WORD_SYS_CORE+58             
3a94 c2 3a			dw .RND8            
3a96 06				db 5 + 1 
3a97 .. 00			db "RND16",0              
3a9d				endm 
# End of macro CWHEAD
3a9d			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3a9d					if DEBUG_FORTH_WORDS_KEY 
3a9d						DMARK "R16" 
3a9d f5				push af  
3a9e 3a b2 3a			ld a, (.dmark)  
3aa1 32 65 ee			ld (debug_mark),a  
3aa4 3a b3 3a			ld a, (.dmark+1)  
3aa7 32 66 ee			ld (debug_mark+1),a  
3aaa 3a b4 3a			ld a, (.dmark+2)  
3aad 32 67 ee			ld (debug_mark+2),a  
3ab0 18 03			jr .pastdmark  
3ab2 ..			.dmark: db "R16"  
3ab5 f1			.pastdmark: pop af  
3ab6			endm  
# End of macro DMARK
3ab6						CALLMONITOR 
3ab6 cd 6f ee			call debug_vector  
3ab9				endm  
# End of macro CALLMONITOR
3ab9					endif 
3ab9 cd 1c 0d				call prng16  
3abc cd 90 1b				call forth_push_numhl 
3abf				       NEXTW 
3abf c3 80 1f			jp macro_next 
3ac2				endm 
# End of macro NEXTW
3ac2			.RND8: 
3ac2				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3ac2 60				db WORD_SYS_CORE+76             
3ac3 f7 3a			dw .RND            
3ac5 05				db 4 + 1 
3ac6 .. 00			db "RND8",0              
3acb				endm 
# End of macro CWHEAD
3acb			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3acb					if DEBUG_FORTH_WORDS_KEY 
3acb						DMARK "RN8" 
3acb f5				push af  
3acc 3a e0 3a			ld a, (.dmark)  
3acf 32 65 ee			ld (debug_mark),a  
3ad2 3a e1 3a			ld a, (.dmark+1)  
3ad5 32 66 ee			ld (debug_mark+1),a  
3ad8 3a e2 3a			ld a, (.dmark+2)  
3adb 32 67 ee			ld (debug_mark+2),a  
3ade 18 03			jr .pastdmark  
3ae0 ..			.dmark: db "RN8"  
3ae3 f1			.pastdmark: pop af  
3ae4			endm  
# End of macro DMARK
3ae4						CALLMONITOR 
3ae4 cd 6f ee			call debug_vector  
3ae7				endm  
# End of macro CALLMONITOR
3ae7					endif 
3ae7 2a a3 eb				ld hl,(xrandc) 
3aea 23					inc hl 
3aeb cd 36 0d				call xrnd 
3aee 6f					ld l,a	 
3aef 26 00				ld h,0 
3af1 cd 90 1b				call forth_push_numhl 
3af4				       NEXTW 
3af4 c3 80 1f			jp macro_next 
3af7				endm 
# End of macro NEXTW
3af7			.RND: 
3af7				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3af7 60				db WORD_SYS_CORE+76             
3af8 fd 3b			dw .ENDMATHS            
3afa 04				db 3 + 1 
3afb .. 00			db "RND",0              
3aff				endm 
# End of macro CWHEAD
3aff			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3aff			 
3aff					if DEBUG_FORTH_WORDS_KEY 
3aff						DMARK "RND" 
3aff f5				push af  
3b00 3a 14 3b			ld a, (.dmark)  
3b03 32 65 ee			ld (debug_mark),a  
3b06 3a 15 3b			ld a, (.dmark+1)  
3b09 32 66 ee			ld (debug_mark+1),a  
3b0c 3a 16 3b			ld a, (.dmark+2)  
3b0f 32 67 ee			ld (debug_mark+2),a  
3b12 18 03			jr .pastdmark  
3b14 ..			.dmark: db "RND"  
3b17 f1			.pastdmark: pop af  
3b18			endm  
# End of macro DMARK
3b18						CALLMONITOR 
3b18 cd 6f ee			call debug_vector  
3b1b				endm  
# End of macro CALLMONITOR
3b1b					endif 
3b1b					 
3b1b					FORTH_DSP_VALUEHL    ; upper range 
3b1b cd 95 1d			call macro_dsp_valuehl 
3b1e				endm 
# End of macro FORTH_DSP_VALUEHL
3b1e			 
3b1e 22 a7 eb				ld (LFSRSeed), hl	 
3b21			 
3b21					if DEBUG_FORTH_WORDS 
3b21						DMARK "RN1" 
3b21 f5				push af  
3b22 3a 36 3b			ld a, (.dmark)  
3b25 32 65 ee			ld (debug_mark),a  
3b28 3a 37 3b			ld a, (.dmark+1)  
3b2b 32 66 ee			ld (debug_mark+1),a  
3b2e 3a 38 3b			ld a, (.dmark+2)  
3b31 32 67 ee			ld (debug_mark+2),a  
3b34 18 03			jr .pastdmark  
3b36 ..			.dmark: db "RN1"  
3b39 f1			.pastdmark: pop af  
3b3a			endm  
# End of macro DMARK
3b3a						CALLMONITOR 
3b3a cd 6f ee			call debug_vector  
3b3d				endm  
# End of macro CALLMONITOR
3b3d					endif 
3b3d					FORTH_DSP_POP 
3b3d cd 4d 1e			call macro_forth_dsp_pop 
3b40				endm 
# End of macro FORTH_DSP_POP
3b40			 
3b40					FORTH_DSP_VALUEHL    ; low range 
3b40 cd 95 1d			call macro_dsp_valuehl 
3b43				endm 
# End of macro FORTH_DSP_VALUEHL
3b43			 
3b43					if DEBUG_FORTH_WORDS 
3b43						DMARK "RN2" 
3b43 f5				push af  
3b44 3a 58 3b			ld a, (.dmark)  
3b47 32 65 ee			ld (debug_mark),a  
3b4a 3a 59 3b			ld a, (.dmark+1)  
3b4d 32 66 ee			ld (debug_mark+1),a  
3b50 3a 5a 3b			ld a, (.dmark+2)  
3b53 32 67 ee			ld (debug_mark+2),a  
3b56 18 03			jr .pastdmark  
3b58 ..			.dmark: db "RN2"  
3b5b f1			.pastdmark: pop af  
3b5c			endm  
# End of macro DMARK
3b5c						CALLMONITOR 
3b5c cd 6f ee			call debug_vector  
3b5f				endm  
# End of macro CALLMONITOR
3b5f					endif 
3b5f 22 a9 eb				ld (LFSRSeed+2), hl 
3b62			 
3b62					FORTH_DSP_POP 
3b62 cd 4d 1e			call macro_forth_dsp_pop 
3b65				endm 
# End of macro FORTH_DSP_POP
3b65			 
3b65 e5					push hl 
3b66			 
3b66 e1			.inrange:	pop hl 
3b67 cd 1c 0d				call prng16  
3b6a					if DEBUG_FORTH_WORDS 
3b6a						DMARK "RN3" 
3b6a f5				push af  
3b6b 3a 7f 3b			ld a, (.dmark)  
3b6e 32 65 ee			ld (debug_mark),a  
3b71 3a 80 3b			ld a, (.dmark+1)  
3b74 32 66 ee			ld (debug_mark+1),a  
3b77 3a 81 3b			ld a, (.dmark+2)  
3b7a 32 67 ee			ld (debug_mark+2),a  
3b7d 18 03			jr .pastdmark  
3b7f ..			.dmark: db "RN3"  
3b82 f1			.pastdmark: pop af  
3b83			endm  
# End of macro DMARK
3b83						CALLMONITOR 
3b83 cd 6f ee			call debug_vector  
3b86				endm  
# End of macro CALLMONITOR
3b86					endif 
3b86					 
3b86					; if the range is 8bit knock out the high byte 
3b86			 
3b86 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
3b8a			 
3b8a 3e 00				ld a, 0 
3b8c ba					cp d  
3b8d 20 1e				jr nz, .hirange 
3b8f 26 00				ld h, 0   ; knock it down to 8bit 
3b91			 
3b91					if DEBUG_FORTH_WORDS 
3b91						DMARK "RNk" 
3b91 f5				push af  
3b92 3a a6 3b			ld a, (.dmark)  
3b95 32 65 ee			ld (debug_mark),a  
3b98 3a a7 3b			ld a, (.dmark+1)  
3b9b 32 66 ee			ld (debug_mark+1),a  
3b9e 3a a8 3b			ld a, (.dmark+2)  
3ba1 32 67 ee			ld (debug_mark+2),a  
3ba4 18 03			jr .pastdmark  
3ba6 ..			.dmark: db "RNk"  
3ba9 f1			.pastdmark: pop af  
3baa			endm  
# End of macro DMARK
3baa						CALLMONITOR 
3baa cd 6f ee			call debug_vector  
3bad				endm  
# End of macro CALLMONITOR
3bad					endif 
3bad			.hirange:   
3bad e5					push hl  
3bae b7					or a  
3baf ed 52		                sbc hl, de 
3bb1			 
3bb1					;call cmp16 
3bb1			 
3bb1 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3bb3 e1					pop hl 
3bb4 e5					push hl 
3bb5			 
3bb5					if DEBUG_FORTH_WORDS 
3bb5						DMARK "RN4" 
3bb5 f5				push af  
3bb6 3a ca 3b			ld a, (.dmark)  
3bb9 32 65 ee			ld (debug_mark),a  
3bbc 3a cb 3b			ld a, (.dmark+1)  
3bbf 32 66 ee			ld (debug_mark+1),a  
3bc2 3a cc 3b			ld a, (.dmark+2)  
3bc5 32 67 ee			ld (debug_mark+2),a  
3bc8 18 03			jr .pastdmark  
3bca ..			.dmark: db "RN4"  
3bcd f1			.pastdmark: pop af  
3bce			endm  
# End of macro DMARK
3bce						CALLMONITOR 
3bce cd 6f ee			call debug_vector  
3bd1				endm  
# End of macro CALLMONITOR
3bd1					endif 
3bd1 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
3bd5					;call cmp16 
3bd5				 
3bd5 b7					or a  
3bd6 ed 52		                sbc hl, de 
3bd8 38 8c				jr c, .inrange 
3bda			 
3bda e1					pop hl 
3bdb					 
3bdb					if DEBUG_FORTH_WORDS 
3bdb						DMARK "RNd" 
3bdb f5				push af  
3bdc 3a f0 3b			ld a, (.dmark)  
3bdf 32 65 ee			ld (debug_mark),a  
3be2 3a f1 3b			ld a, (.dmark+1)  
3be5 32 66 ee			ld (debug_mark+1),a  
3be8 3a f2 3b			ld a, (.dmark+2)  
3beb 32 67 ee			ld (debug_mark+2),a  
3bee 18 03			jr .pastdmark  
3bf0 ..			.dmark: db "RNd"  
3bf3 f1			.pastdmark: pop af  
3bf4			endm  
# End of macro DMARK
3bf4						CALLMONITOR 
3bf4 cd 6f ee			call debug_vector  
3bf7				endm  
# End of macro CALLMONITOR
3bf7					endif 
3bf7			 
3bf7			 
3bf7 cd 90 1b				call forth_push_numhl 
3bfa				       NEXTW 
3bfa c3 80 1f			jp macro_next 
3bfd				endm 
# End of macro NEXTW
3bfd			 
3bfd			.ENDMATHS: 
3bfd			 
3bfd			; eof 
3bfd			 
# End of file forth_words_maths.asm
3bfd			include "forth_words_display.asm" 
3bfd			 
3bfd			; | ## Display Words 
3bfd			 
3bfd			.ACT: 
3bfd			 
3bfd				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3bfd 62				db WORD_SYS_CORE+78             
3bfe 49 3c			dw .INFO            
3c00 07				db 6 + 1 
3c01 .. 00			db "ACTIVE",0              
3c08				endm 
# End of macro CWHEAD
3c08			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3c08			;  
3c08			; | | To display a pulsing activity indicator in a processing loop do this... 
3c08			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3c08			 
3c08					if DEBUG_FORTH_WORDS_KEY 
3c08						DMARK "ACT" 
3c08 f5				push af  
3c09 3a 1d 3c			ld a, (.dmark)  
3c0c 32 65 ee			ld (debug_mark),a  
3c0f 3a 1e 3c			ld a, (.dmark+1)  
3c12 32 66 ee			ld (debug_mark+1),a  
3c15 3a 1f 3c			ld a, (.dmark+2)  
3c18 32 67 ee			ld (debug_mark+2),a  
3c1b 18 03			jr .pastdmark  
3c1d ..			.dmark: db "ACT"  
3c20 f1			.pastdmark: pop af  
3c21			endm  
# End of macro DMARK
3c21						CALLMONITOR 
3c21 cd 6f ee			call debug_vector  
3c24				endm  
# End of macro CALLMONITOR
3c24					endif 
3c24 cd 1f 0b				call active 
3c27					if DEBUG_FORTH_WORDS 
3c27						DMARK "ACp" 
3c27 f5				push af  
3c28 3a 3c 3c			ld a, (.dmark)  
3c2b 32 65 ee			ld (debug_mark),a  
3c2e 3a 3d 3c			ld a, (.dmark+1)  
3c31 32 66 ee			ld (debug_mark+1),a  
3c34 3a 3e 3c			ld a, (.dmark+2)  
3c37 32 67 ee			ld (debug_mark+2),a  
3c3a 18 03			jr .pastdmark  
3c3c ..			.dmark: db "ACp"  
3c3f f1			.pastdmark: pop af  
3c40			endm  
# End of macro DMARK
3c40						CALLMONITOR 
3c40 cd 6f ee			call debug_vector  
3c43				endm  
# End of macro CALLMONITOR
3c43					endif 
3c43 cd fe 1b				call forth_push_str 
3c46			 
3c46					NEXTW 
3c46 c3 80 1f			jp macro_next 
3c49				endm 
# End of macro NEXTW
3c49			.INFO: 
3c49			 
3c49				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3c49 62				db WORD_SYS_CORE+78             
3c4a 66 3c			dw .ATP            
3c4c 05				db 4 + 1 
3c4d .. 00			db "INFO",0              
3c52				endm 
# End of macro CWHEAD
3c52			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3c52					FORTH_DSP_VALUEHL 
3c52 cd 95 1d			call macro_dsp_valuehl 
3c55				endm 
# End of macro FORTH_DSP_VALUEHL
3c55			 
3c55					FORTH_DSP_POP 
3c55 cd 4d 1e			call macro_forth_dsp_pop 
3c58				endm 
# End of macro FORTH_DSP_POP
3c58			 
3c58 e5					push hl 
3c59			 
3c59					FORTH_DSP_VALUEHL 
3c59 cd 95 1d			call macro_dsp_valuehl 
3c5c				endm 
# End of macro FORTH_DSP_VALUEHL
3c5c			 
3c5c					FORTH_DSP_POP 
3c5c cd 4d 1e			call macro_forth_dsp_pop 
3c5f				endm 
# End of macro FORTH_DSP_POP
3c5f			 
3c5f d1					pop de 
3c60			 
3c60 cd 59 0b				call info_panel 
3c63			 
3c63			 
3c63					NEXTW 
3c63 c3 80 1f			jp macro_next 
3c66				endm 
# End of macro NEXTW
3c66			.ATP: 
3c66				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3c66 62				db WORD_SYS_CORE+78             
3c67 dd 3c			dw .FB            
3c69 04				db 3 + 1 
3c6a .. 00			db "AT?",0              
3c6e				endm 
# End of macro CWHEAD
3c6e			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3c6e					if DEBUG_FORTH_WORDS_KEY 
3c6e						DMARK "AT?" 
3c6e f5				push af  
3c6f 3a 83 3c			ld a, (.dmark)  
3c72 32 65 ee			ld (debug_mark),a  
3c75 3a 84 3c			ld a, (.dmark+1)  
3c78 32 66 ee			ld (debug_mark+1),a  
3c7b 3a 85 3c			ld a, (.dmark+2)  
3c7e 32 67 ee			ld (debug_mark+2),a  
3c81 18 03			jr .pastdmark  
3c83 ..			.dmark: db "AT?"  
3c86 f1			.pastdmark: pop af  
3c87			endm  
# End of macro DMARK
3c87						CALLMONITOR 
3c87 cd 6f ee			call debug_vector  
3c8a				endm  
# End of macro CALLMONITOR
3c8a					endif 
3c8a 3a 58 ea				ld a, (f_cursor_ptr) 
3c8d			 
3c8d			if DEBUG_FORTH_WORDS 
3c8d				DMARK "AT?" 
3c8d f5				push af  
3c8e 3a a2 3c			ld a, (.dmark)  
3c91 32 65 ee			ld (debug_mark),a  
3c94 3a a3 3c			ld a, (.dmark+1)  
3c97 32 66 ee			ld (debug_mark+1),a  
3c9a 3a a4 3c			ld a, (.dmark+2)  
3c9d 32 67 ee			ld (debug_mark+2),a  
3ca0 18 03			jr .pastdmark  
3ca2 ..			.dmark: db "AT?"  
3ca5 f1			.pastdmark: pop af  
3ca6			endm  
# End of macro DMARK
3ca6				CALLMONITOR 
3ca6 cd 6f ee			call debug_vector  
3ca9				endm  
# End of macro CALLMONITOR
3ca9			endif	 
3ca9					; count the number of rows 
3ca9			 
3ca9 06 00				ld b, 0 
3cab 4f			.atpr:		ld c, a    ; save in case we go below zero 
3cac d6 28				sub display_cols 
3cae f2 b4 3c				jp p, .atprunder 
3cb1 04					inc b 
3cb2 18 f7				jr .atpr 
3cb4			.atprunder:	 
3cb4			if DEBUG_FORTH_WORDS 
3cb4				DMARK "A?2" 
3cb4 f5				push af  
3cb5 3a c9 3c			ld a, (.dmark)  
3cb8 32 65 ee			ld (debug_mark),a  
3cbb 3a ca 3c			ld a, (.dmark+1)  
3cbe 32 66 ee			ld (debug_mark+1),a  
3cc1 3a cb 3c			ld a, (.dmark+2)  
3cc4 32 67 ee			ld (debug_mark+2),a  
3cc7 18 03			jr .pastdmark  
3cc9 ..			.dmark: db "A?2"  
3ccc f1			.pastdmark: pop af  
3ccd			endm  
# End of macro DMARK
3ccd				CALLMONITOR 
3ccd cd 6f ee			call debug_vector  
3cd0				endm  
# End of macro CALLMONITOR
3cd0			endif	 
3cd0 26 00				ld h, 0 
3cd2 69					ld l, c 
3cd3 cd 90 1b				call forth_push_numhl 
3cd6 68					ld l, b  
3cd7 cd 90 1b				call forth_push_numhl 
3cda			 
3cda			 
3cda				NEXTW 
3cda c3 80 1f			jp macro_next 
3cdd				endm 
# End of macro NEXTW
3cdd			 
3cdd			.FB: 
3cdd				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3cdd 1b				db WORD_SYS_CORE+7             
3cde 2b 3d			dw .EMIT            
3ce0 03				db 2 + 1 
3ce1 .. 00			db "FB",0              
3ce4				endm 
# End of macro CWHEAD
3ce4			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3ce4			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3ce4			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3ce4			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3ce4					if DEBUG_FORTH_WORDS_KEY 
3ce4						DMARK "FB." 
3ce4 f5				push af  
3ce5 3a f9 3c			ld a, (.dmark)  
3ce8 32 65 ee			ld (debug_mark),a  
3ceb 3a fa 3c			ld a, (.dmark+1)  
3cee 32 66 ee			ld (debug_mark+1),a  
3cf1 3a fb 3c			ld a, (.dmark+2)  
3cf4 32 67 ee			ld (debug_mark+2),a  
3cf7 18 03			jr .pastdmark  
3cf9 ..			.dmark: db "FB."  
3cfc f1			.pastdmark: pop af  
3cfd			endm  
# End of macro DMARK
3cfd						CALLMONITOR 
3cfd cd 6f ee			call debug_vector  
3d00				endm  
# End of macro CALLMONITOR
3d00					endif 
3d00			 
3d00					FORTH_DSP_VALUEHL 
3d00 cd 95 1d			call macro_dsp_valuehl 
3d03				endm 
# End of macro FORTH_DSP_VALUEHL
3d03			 
3d03 7d					ld a, l 
3d04 fe 01				cp 1 
3d06 20 05				jr nz, .fbn1 
3d08 21 0a ed				ld hl, display_fb1 
3d0b 18 15				jr .fbset 
3d0d fe 02		.fbn1:		cp 2 
3d0f 20 05				jr nz, .fbn2 
3d11 21 c8 eb				ld hl, display_fb2 
3d14 18 0c				jr .fbset 
3d16 fe 03		.fbn2:		cp 3 
3d18 20 05				jr nz, .fbn3 
3d1a 21 69 ec				ld hl, display_fb3 
3d1d 18 03				jr .fbset 
3d1f			.fbn3:		 ; if invalid number select first 
3d1f 21 0a ed				ld hl, display_fb1 
3d22 22 c6 eb		.fbset:		ld (display_fb_active), hl 
3d25			 
3d25					FORTH_DSP_POP 
3d25 cd 4d 1e			call macro_forth_dsp_pop 
3d28				endm 
# End of macro FORTH_DSP_POP
3d28			 
3d28					NEXTW 
3d28 c3 80 1f			jp macro_next 
3d2b				endm 
# End of macro NEXTW
3d2b			 
3d2b			 
3d2b			.EMIT: 
3d2b				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3d2b 1b				db WORD_SYS_CORE+7             
3d2c 7c 3d			dw .DOTH            
3d2e 05				db 4 + 1 
3d2f .. 00			db "EMIT",0              
3d34				endm 
# End of macro CWHEAD
3d34			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3d34					; get value off TOS and display it 
3d34			 
3d34					if DEBUG_FORTH_WORDS_KEY 
3d34						DMARK "EMT" 
3d34 f5				push af  
3d35 3a 49 3d			ld a, (.dmark)  
3d38 32 65 ee			ld (debug_mark),a  
3d3b 3a 4a 3d			ld a, (.dmark+1)  
3d3e 32 66 ee			ld (debug_mark+1),a  
3d41 3a 4b 3d			ld a, (.dmark+2)  
3d44 32 67 ee			ld (debug_mark+2),a  
3d47 18 03			jr .pastdmark  
3d49 ..			.dmark: db "EMT"  
3d4c f1			.pastdmark: pop af  
3d4d			endm  
# End of macro DMARK
3d4d						CALLMONITOR 
3d4d cd 6f ee			call debug_vector  
3d50				endm  
# End of macro CALLMONITOR
3d50					endif 
3d50			 
3d50					FORTH_DSP_VALUEHL 
3d50 cd 95 1d			call macro_dsp_valuehl 
3d53				endm 
# End of macro FORTH_DSP_VALUEHL
3d53			 
3d53 7d					ld a,l 
3d54			 
3d54					; TODO write to display 
3d54			 
3d54 32 b9 e4				ld (os_input), a 
3d57 3e 00				ld a, 0 
3d59 32 ba e4				ld (os_input+1), a 
3d5c					 
3d5c 3a 58 ea				ld a, (f_cursor_ptr) 
3d5f 11 b9 e4				ld de, os_input 
3d62 cd db 0b				call str_at_display 
3d65			 
3d65			 
3d65 3a 36 ea				ld a,(cli_autodisplay) 
3d68 fe 00				cp 0 
3d6a 28 03				jr z, .enoupdate 
3d6c cd eb 0b						call update_display 
3d6f					.enoupdate: 
3d6f			 
3d6f 3a 58 ea				ld a, (f_cursor_ptr) 
3d72 3c					inc a 
3d73 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3d76			 
3d76			 
3d76					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d76 cd 4d 1e			call macro_forth_dsp_pop 
3d79				endm 
# End of macro FORTH_DSP_POP
3d79			  
3d79			 
3d79					NEXTW 
3d79 c3 80 1f			jp macro_next 
3d7c				endm 
# End of macro NEXTW
3d7c			.DOTH: 
3d7c				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3d7c 1c				db WORD_SYS_CORE+8             
3d7d ac 3d			dw .DOTF            
3d7f 03				db 2 + 1 
3d80 .. 00			db ".-",0              
3d83				endm 
# End of macro CWHEAD
3d83			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3d83					; get value off TOS and display it 
3d83					if DEBUG_FORTH_WORDS_KEY 
3d83						DMARK "DTD" 
3d83 f5				push af  
3d84 3a 98 3d			ld a, (.dmark)  
3d87 32 65 ee			ld (debug_mark),a  
3d8a 3a 99 3d			ld a, (.dmark+1)  
3d8d 32 66 ee			ld (debug_mark+1),a  
3d90 3a 9a 3d			ld a, (.dmark+2)  
3d93 32 67 ee			ld (debug_mark+2),a  
3d96 18 03			jr .pastdmark  
3d98 ..			.dmark: db "DTD"  
3d9b f1			.pastdmark: pop af  
3d9c			endm  
# End of macro DMARK
3d9c						CALLMONITOR 
3d9c cd 6f ee			call debug_vector  
3d9f				endm  
# End of macro CALLMONITOR
3d9f					endif 
3d9f 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3da1 3e 00			ld a, 0 
3da3 32 37 ea			ld (cli_mvdot), a 
3da6 c3 03 3e			jp .dotgo 
3da9				NEXTW 
3da9 c3 80 1f			jp macro_next 
3dac				endm 
# End of macro NEXTW
3dac			.DOTF: 
3dac				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3dac 1c				db WORD_SYS_CORE+8             
3dad da 3d			dw .DOT            
3daf 03				db 2 + 1 
3db0 .. 00			db ".>",0              
3db3				endm 
# End of macro CWHEAD
3db3			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
3db3					; get value off TOS and display it 
3db3			        ; TODO BUG adds extra spaces 
3db3			        ; TODO BUG handle numerics? 
3db3					if DEBUG_FORTH_WORDS_KEY 
3db3						DMARK "DTC" 
3db3 f5				push af  
3db4 3a c8 3d			ld a, (.dmark)  
3db7 32 65 ee			ld (debug_mark),a  
3dba 3a c9 3d			ld a, (.dmark+1)  
3dbd 32 66 ee			ld (debug_mark+1),a  
3dc0 3a ca 3d			ld a, (.dmark+2)  
3dc3 32 67 ee			ld (debug_mark+2),a  
3dc6 18 03			jr .pastdmark  
3dc8 ..			.dmark: db "DTC"  
3dcb f1			.pastdmark: pop af  
3dcc			endm  
# End of macro DMARK
3dcc						CALLMONITOR 
3dcc cd 6f ee			call debug_vector  
3dcf				endm  
# End of macro CALLMONITOR
3dcf					endif 
3dcf 3e 01			ld a, 1 
3dd1 32 37 ea			ld (cli_mvdot), a 
3dd4 c3 03 3e			jp .dotgo 
3dd7				NEXTW 
3dd7 c3 80 1f			jp macro_next 
3dda				endm 
# End of macro NEXTW
3dda			 
3dda			.DOT: 
3dda				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3dda 1c				db WORD_SYS_CORE+8             
3ddb b6 3f			dw .CLS            
3ddd 02				db 1 + 1 
3dde .. 00			db ".",0              
3de0				endm 
# End of macro CWHEAD
3de0			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
3de0					; get value off TOS and display it 
3de0			 
3de0					if DEBUG_FORTH_WORDS_KEY 
3de0						DMARK "DOT" 
3de0 f5				push af  
3de1 3a f5 3d			ld a, (.dmark)  
3de4 32 65 ee			ld (debug_mark),a  
3de7 3a f6 3d			ld a, (.dmark+1)  
3dea 32 66 ee			ld (debug_mark+1),a  
3ded 3a f7 3d			ld a, (.dmark+2)  
3df0 32 67 ee			ld (debug_mark+2),a  
3df3 18 03			jr .pastdmark  
3df5 ..			.dmark: db "DOT"  
3df8 f1			.pastdmark: pop af  
3df9			endm  
# End of macro DMARK
3df9						CALLMONITOR 
3df9 cd 6f ee			call debug_vector  
3dfc				endm  
# End of macro CALLMONITOR
3dfc					endif 
3dfc 3e 00			ld a, 0 
3dfe 32 37 ea			ld (cli_mvdot), a 
3e01 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3e03				 
3e03			 
3e03			.dotgo: 
3e03			 
3e03			; move up type to on stack for parserv5 
3e03					FORTH_DSP 
3e03 cd 5b 1d			call macro_forth_dsp 
3e06				endm 
# End of macro FORTH_DSP
3e06				;FORTH_DSP_VALUE  
3e06			 
3e06			if DEBUG_FORTH_DOT 
3e06				DMARK "DOT" 
3e06 f5				push af  
3e07 3a 1b 3e			ld a, (.dmark)  
3e0a 32 65 ee			ld (debug_mark),a  
3e0d 3a 1c 3e			ld a, (.dmark+1)  
3e10 32 66 ee			ld (debug_mark+1),a  
3e13 3a 1d 3e			ld a, (.dmark+2)  
3e16 32 67 ee			ld (debug_mark+2),a  
3e19 18 03			jr .pastdmark  
3e1b ..			.dmark: db "DOT"  
3e1e f1			.pastdmark: pop af  
3e1f			endm  
# End of macro DMARK
3e1f				CALLMONITOR 
3e1f cd 6f ee			call debug_vector  
3e22				endm  
# End of macro CALLMONITOR
3e22			endif	 
3e22			;		.print: 
3e22			 
3e22 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3e23 23				inc hl   ; position to the actual value 
3e24 fe 01			cp DS_TYPE_STR 
3e26 20 06			jr nz, .dotnum1  
3e28			 
3e28			; display string 
3e28				FORTH_DSP_VALUE  
3e28 cd 7e 1d			call macro_forth_dsp_value 
3e2b				endm 
# End of macro FORTH_DSP_VALUE
3e2b eb				ex de,hl 
3e2c 18 49			jr .dotwrite 
3e2e			 
3e2e			.dotnum1: 
3e2e fe 02			cp DS_TYPE_INUM 
3e30 20 44			jr nz, .dotflot 
3e32			 
3e32			 
3e32			; display number 
3e32			 
3e32			;	push hl 
3e32			;	call clear_display 
3e32			;	pop hl 
3e32			 
3e32 5e				ld e, (hl) 
3e33 23				inc hl 
3e34 56				ld d, (hl) 
3e35 21 bb e2			ld hl, scratch 
3e38			if DEBUG_FORTH_DOT 
3e38				DMARK "DT1" 
3e38 f5				push af  
3e39 3a 4d 3e			ld a, (.dmark)  
3e3c 32 65 ee			ld (debug_mark),a  
3e3f 3a 4e 3e			ld a, (.dmark+1)  
3e42 32 66 ee			ld (debug_mark+1),a  
3e45 3a 4f 3e			ld a, (.dmark+2)  
3e48 32 67 ee			ld (debug_mark+2),a  
3e4b 18 03			jr .pastdmark  
3e4d ..			.dmark: db "DT1"  
3e50 f1			.pastdmark: pop af  
3e51			endm  
# End of macro DMARK
3e51				CALLMONITOR 
3e51 cd 6f ee			call debug_vector  
3e54				endm  
# End of macro CALLMONITOR
3e54			endif	 
3e54			 
3e54 cd 0a 11			call uitoa_16 
3e57 eb				ex de,hl 
3e58			 
3e58			if DEBUG_FORTH_DOT 
3e58				DMARK "DT2" 
3e58 f5				push af  
3e59 3a 6d 3e			ld a, (.dmark)  
3e5c 32 65 ee			ld (debug_mark),a  
3e5f 3a 6e 3e			ld a, (.dmark+1)  
3e62 32 66 ee			ld (debug_mark+1),a  
3e65 3a 6f 3e			ld a, (.dmark+2)  
3e68 32 67 ee			ld (debug_mark+2),a  
3e6b 18 03			jr .pastdmark  
3e6d ..			.dmark: db "DT2"  
3e70 f1			.pastdmark: pop af  
3e71			endm  
# End of macro DMARK
3e71				CALLMONITOR 
3e71 cd 6f ee			call debug_vector  
3e74				endm  
# End of macro CALLMONITOR
3e74			endif	 
3e74			 
3e74			;	ld de, os_word_scratch 
3e74 18 01			jr .dotwrite 
3e76			 
3e76 00			.dotflot:   nop 
3e77			; TODO print floating point number 
3e77			 
3e77			.dotwrite:		 
3e77			 
3e77					; if c is set then set all '-' to spaces 
3e77					; need to also take into account .>  
3e77			 
3e77 3e 01				ld a, 1 
3e79 b9					cp c 
3e7a 20 67				jr nz, .nodashswap 
3e7c			 
3e7c					; DE has the string to write, working with HL 
3e7c			 
3e7c 06 ff				ld b, 255 
3e7e d5					push de 
3e7f e1					pop hl 
3e80			 
3e80			if DEBUG_FORTH_DOT 
3e80				DMARK "DT-" 
3e80 f5				push af  
3e81 3a 95 3e			ld a, (.dmark)  
3e84 32 65 ee			ld (debug_mark),a  
3e87 3a 96 3e			ld a, (.dmark+1)  
3e8a 32 66 ee			ld (debug_mark+1),a  
3e8d 3a 97 3e			ld a, (.dmark+2)  
3e90 32 67 ee			ld (debug_mark+2),a  
3e93 18 03			jr .pastdmark  
3e95 ..			.dmark: db "DT-"  
3e98 f1			.pastdmark: pop af  
3e99			endm  
# End of macro DMARK
3e99				CALLMONITOR 
3e99 cd 6f ee			call debug_vector  
3e9c				endm  
# End of macro CALLMONITOR
3e9c			endif	 
3e9c 7e			.dashscan:	ld a, (hl) 
3e9d fe 00				cp 0 
3e9f 28 42				jr z, .nodashswap 
3ea1 fe 2d				cp '-' 
3ea3 20 03				jr nz, .dashskip 
3ea5 3e 20				ld a, ' ' 
3ea7 77					ld (hl), a 
3ea8 23			.dashskip:	inc hl 
3ea9			if DEBUG_FORTH_DOT 
3ea9				DMARK "D-2" 
3ea9 f5				push af  
3eaa 3a be 3e			ld a, (.dmark)  
3ead 32 65 ee			ld (debug_mark),a  
3eb0 3a bf 3e			ld a, (.dmark+1)  
3eb3 32 66 ee			ld (debug_mark+1),a  
3eb6 3a c0 3e			ld a, (.dmark+2)  
3eb9 32 67 ee			ld (debug_mark+2),a  
3ebc 18 03			jr .pastdmark  
3ebe ..			.dmark: db "D-2"  
3ec1 f1			.pastdmark: pop af  
3ec2			endm  
# End of macro DMARK
3ec2				CALLMONITOR 
3ec2 cd 6f ee			call debug_vector  
3ec5				endm  
# End of macro CALLMONITOR
3ec5			endif	 
3ec5 10 d5				djnz .dashscan 
3ec7			 
3ec7			if DEBUG_FORTH_DOT 
3ec7				DMARK "D-1" 
3ec7 f5				push af  
3ec8 3a dc 3e			ld a, (.dmark)  
3ecb 32 65 ee			ld (debug_mark),a  
3ece 3a dd 3e			ld a, (.dmark+1)  
3ed1 32 66 ee			ld (debug_mark+1),a  
3ed4 3a de 3e			ld a, (.dmark+2)  
3ed7 32 67 ee			ld (debug_mark+2),a  
3eda 18 03			jr .pastdmark  
3edc ..			.dmark: db "D-1"  
3edf f1			.pastdmark: pop af  
3ee0			endm  
# End of macro DMARK
3ee0				CALLMONITOR 
3ee0 cd 6f ee			call debug_vector  
3ee3				endm  
# End of macro CALLMONITOR
3ee3			endif	 
3ee3			 
3ee3			.nodashswap: 
3ee3			 
3ee3			if DEBUG_FORTH_DOT 
3ee3				DMARK "D-o" 
3ee3 f5				push af  
3ee4 3a f8 3e			ld a, (.dmark)  
3ee7 32 65 ee			ld (debug_mark),a  
3eea 3a f9 3e			ld a, (.dmark+1)  
3eed 32 66 ee			ld (debug_mark+1),a  
3ef0 3a fa 3e			ld a, (.dmark+2)  
3ef3 32 67 ee			ld (debug_mark+2),a  
3ef6 18 03			jr .pastdmark  
3ef8 ..			.dmark: db "D-o"  
3efb f1			.pastdmark: pop af  
3efc			endm  
# End of macro DMARK
3efc				CALLMONITOR 
3efc cd 6f ee			call debug_vector  
3eff				endm  
# End of macro CALLMONITOR
3eff			endif	 
3eff			 
3eff d5					push de   ; save string start in case we need to advance print 
3f00			 
3f00 3a 58 ea				ld a, (f_cursor_ptr) 
3f03 cd db 0b				call str_at_display 
3f06 3a 36 ea				ld a,(cli_autodisplay) 
3f09 fe 00				cp 0 
3f0b 28 03				jr z, .noupdate 
3f0d cd eb 0b						call update_display 
3f10					.noupdate: 
3f10			 
3f10			 
3f10					; see if we need to advance the print position 
3f10			 
3f10 e1					pop hl   ; get back string 
3f11			;		ex de,hl 
3f11			 
3f11 3a 37 ea				ld a, (cli_mvdot) 
3f14			if DEBUG_FORTH_DOT 
3f14			;		ld e,a 
3f14				DMARK "D>1" 
3f14 f5				push af  
3f15 3a 29 3f			ld a, (.dmark)  
3f18 32 65 ee			ld (debug_mark),a  
3f1b 3a 2a 3f			ld a, (.dmark+1)  
3f1e 32 66 ee			ld (debug_mark+1),a  
3f21 3a 2b 3f			ld a, (.dmark+2)  
3f24 32 67 ee			ld (debug_mark+2),a  
3f27 18 03			jr .pastdmark  
3f29 ..			.dmark: db "D>1"  
3f2c f1			.pastdmark: pop af  
3f2d			endm  
# End of macro DMARK
3f2d				CALLMONITOR 
3f2d cd 6f ee			call debug_vector  
3f30				endm  
# End of macro CALLMONITOR
3f30			endif	 
3f30 fe 00				cp 0 
3f32 28 44				jr z, .noadv 
3f34					; yes, lets advance the print position 
3f34 3e 00				ld a, 0 
3f36 cd 66 11				call strlent 
3f39			if DEBUG_FORTH_DOT 
3f39				DMARK "D-?" 
3f39 f5				push af  
3f3a 3a 4e 3f			ld a, (.dmark)  
3f3d 32 65 ee			ld (debug_mark),a  
3f40 3a 4f 3f			ld a, (.dmark+1)  
3f43 32 66 ee			ld (debug_mark+1),a  
3f46 3a 50 3f			ld a, (.dmark+2)  
3f49 32 67 ee			ld (debug_mark+2),a  
3f4c 18 03			jr .pastdmark  
3f4e ..			.dmark: db "D-?"  
3f51 f1			.pastdmark: pop af  
3f52			endm  
# End of macro DMARK
3f52				CALLMONITOR 
3f52 cd 6f ee			call debug_vector  
3f55				endm  
# End of macro CALLMONITOR
3f55			endif	 
3f55 3a 58 ea				ld a, (f_cursor_ptr) 
3f58 85					add a,l 
3f59					;call addatohl 
3f59					;ld a, l 
3f59 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3f5c			 
3f5c			if DEBUG_FORTH_DOT 
3f5c				DMARK "D->" 
3f5c f5				push af  
3f5d 3a 71 3f			ld a, (.dmark)  
3f60 32 65 ee			ld (debug_mark),a  
3f63 3a 72 3f			ld a, (.dmark+1)  
3f66 32 66 ee			ld (debug_mark+1),a  
3f69 3a 73 3f			ld a, (.dmark+2)  
3f6c 32 67 ee			ld (debug_mark+2),a  
3f6f 18 03			jr .pastdmark  
3f71 ..			.dmark: db "D->"  
3f74 f1			.pastdmark: pop af  
3f75			endm  
# End of macro DMARK
3f75				CALLMONITOR 
3f75 cd 6f ee			call debug_vector  
3f78				endm  
# End of macro CALLMONITOR
3f78			endif	 
3f78			 
3f78			.noadv:	 
3f78			 
3f78					if DEBUG_FORTH_DOT_WAIT 
3f78							call next_page_prompt 
3f78					endif	 
3f78			; TODO this pop off the stack causes a crash. i dont know why 
3f78			 
3f78			 
3f78			if DEBUG_FORTH_DOT 
3f78				DMARK "DTh" 
3f78 f5				push af  
3f79 3a 8d 3f			ld a, (.dmark)  
3f7c 32 65 ee			ld (debug_mark),a  
3f7f 3a 8e 3f			ld a, (.dmark+1)  
3f82 32 66 ee			ld (debug_mark+1),a  
3f85 3a 8f 3f			ld a, (.dmark+2)  
3f88 32 67 ee			ld (debug_mark+2),a  
3f8b 18 03			jr .pastdmark  
3f8d ..			.dmark: db "DTh"  
3f90 f1			.pastdmark: pop af  
3f91			endm  
# End of macro DMARK
3f91				CALLMONITOR 
3f91 cd 6f ee			call debug_vector  
3f94				endm  
# End of macro CALLMONITOR
3f94			endif	 
3f94			 
3f94					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f94 cd 4d 1e			call macro_forth_dsp_pop 
3f97				endm 
# End of macro FORTH_DSP_POP
3f97			 
3f97			if DEBUG_FORTH_DOT 
3f97				DMARK "DTi" 
3f97 f5				push af  
3f98 3a ac 3f			ld a, (.dmark)  
3f9b 32 65 ee			ld (debug_mark),a  
3f9e 3a ad 3f			ld a, (.dmark+1)  
3fa1 32 66 ee			ld (debug_mark+1),a  
3fa4 3a ae 3f			ld a, (.dmark+2)  
3fa7 32 67 ee			ld (debug_mark+2),a  
3faa 18 03			jr .pastdmark  
3fac ..			.dmark: db "DTi"  
3faf f1			.pastdmark: pop af  
3fb0			endm  
# End of macro DMARK
3fb0				CALLMONITOR 
3fb0 cd 6f ee			call debug_vector  
3fb3				endm  
# End of macro CALLMONITOR
3fb3			endif	 
3fb3			 
3fb3			 
3fb3					NEXTW 
3fb3 c3 80 1f			jp macro_next 
3fb6				endm 
# End of macro NEXTW
3fb6			 
3fb6			.CLS: 
3fb6				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3fb6 35				db WORD_SYS_CORE+33             
3fb7 e3 3f			dw .DRAW            
3fb9 04				db 3 + 1 
3fba .. 00			db "CLS",0              
3fbe				endm 
# End of macro CWHEAD
3fbe			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3fbe					if DEBUG_FORTH_WORDS_KEY 
3fbe						DMARK "CLS" 
3fbe f5				push af  
3fbf 3a d3 3f			ld a, (.dmark)  
3fc2 32 65 ee			ld (debug_mark),a  
3fc5 3a d4 3f			ld a, (.dmark+1)  
3fc8 32 66 ee			ld (debug_mark+1),a  
3fcb 3a d5 3f			ld a, (.dmark+2)  
3fce 32 67 ee			ld (debug_mark+2),a  
3fd1 18 03			jr .pastdmark  
3fd3 ..			.dmark: db "CLS"  
3fd6 f1			.pastdmark: pop af  
3fd7			endm  
# End of macro DMARK
3fd7						CALLMONITOR 
3fd7 cd 6f ee			call debug_vector  
3fda				endm  
# End of macro CALLMONITOR
3fda					endif 
3fda cd c8 0b				call clear_display 
3fdd c3 f1 40				jp .home		; and home cursor 
3fe0					NEXTW 
3fe0 c3 80 1f			jp macro_next 
3fe3				endm 
# End of macro NEXTW
3fe3			 
3fe3			.DRAW: 
3fe3				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3fe3 36				db WORD_SYS_CORE+34             
3fe4 0e 40			dw .DUMP            
3fe6 05				db 4 + 1 
3fe7 .. 00			db "DRAW",0              
3fec				endm 
# End of macro CWHEAD
3fec			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3fec					if DEBUG_FORTH_WORDS_KEY 
3fec						DMARK "DRW" 
3fec f5				push af  
3fed 3a 01 40			ld a, (.dmark)  
3ff0 32 65 ee			ld (debug_mark),a  
3ff3 3a 02 40			ld a, (.dmark+1)  
3ff6 32 66 ee			ld (debug_mark+1),a  
3ff9 3a 03 40			ld a, (.dmark+2)  
3ffc 32 67 ee			ld (debug_mark+2),a  
3fff 18 03			jr .pastdmark  
4001 ..			.dmark: db "DRW"  
4004 f1			.pastdmark: pop af  
4005			endm  
# End of macro DMARK
4005						CALLMONITOR 
4005 cd 6f ee			call debug_vector  
4008				endm  
# End of macro CALLMONITOR
4008					endif 
4008 cd eb 0b				call update_display 
400b					NEXTW 
400b c3 80 1f			jp macro_next 
400e				endm 
# End of macro NEXTW
400e			 
400e			.DUMP: 
400e				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
400e 37				db WORD_SYS_CORE+35             
400f 46 40			dw .CDUMP            
4011 05				db 4 + 1 
4012 .. 00			db "DUMP",0              
4017				endm 
# End of macro CWHEAD
4017			; | DUMP ( x -- ) With address x display dump   | DONE 
4017			; TODO pop address to use off of the stack 
4017					if DEBUG_FORTH_WORDS_KEY 
4017						DMARK "DUM" 
4017 f5				push af  
4018 3a 2c 40			ld a, (.dmark)  
401b 32 65 ee			ld (debug_mark),a  
401e 3a 2d 40			ld a, (.dmark+1)  
4021 32 66 ee			ld (debug_mark+1),a  
4024 3a 2e 40			ld a, (.dmark+2)  
4027 32 67 ee			ld (debug_mark+2),a  
402a 18 03			jr .pastdmark  
402c ..			.dmark: db "DUM"  
402f f1			.pastdmark: pop af  
4030			endm  
# End of macro DMARK
4030						CALLMONITOR 
4030 cd 6f ee			call debug_vector  
4033				endm  
# End of macro CALLMONITOR
4033					endif 
4033 cd c8 0b				call clear_display 
4036			 
4036					; get address 
4036			 
4036					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4036 cd 95 1d			call macro_dsp_valuehl 
4039				endm 
# End of macro FORTH_DSP_VALUEHL
4039				 
4039					; save it for cdump 
4039			 
4039 22 de e5				ld (os_cur_ptr),hl 
403c			 
403c					; destroy value TOS 
403c			 
403c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
403c cd 4d 1e			call macro_forth_dsp_pop 
403f				endm 
# End of macro FORTH_DSP_POP
403f			 
403f cd 10 1a				call dumpcont	; skip old style of param parsing	 
4042 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
4043					NEXTW 
4043 c3 80 1f			jp macro_next 
4046				endm 
# End of macro NEXTW
4046			.CDUMP: 
4046				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
4046 38				db WORD_SYS_CORE+36             
4047 76 40			dw .DAT            
4049 06				db 5 + 1 
404a .. 00			db "CDUMP",0              
4050				endm 
# End of macro CWHEAD
4050			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
4050					if DEBUG_FORTH_WORDS_KEY 
4050						DMARK "CDP" 
4050 f5				push af  
4051 3a 65 40			ld a, (.dmark)  
4054 32 65 ee			ld (debug_mark),a  
4057 3a 66 40			ld a, (.dmark+1)  
405a 32 66 ee			ld (debug_mark+1),a  
405d 3a 67 40			ld a, (.dmark+2)  
4060 32 67 ee			ld (debug_mark+2),a  
4063 18 03			jr .pastdmark  
4065 ..			.dmark: db "CDP"  
4068 f1			.pastdmark: pop af  
4069			endm  
# End of macro DMARK
4069						CALLMONITOR 
4069 cd 6f ee			call debug_vector  
406c				endm  
# End of macro CALLMONITOR
406c					endif 
406c cd c8 0b				call clear_display 
406f cd 10 1a				call dumpcont	 
4072 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
4073					NEXTW 
4073 c3 80 1f			jp macro_next 
4076				endm 
# End of macro NEXTW
4076			 
4076			 
4076			 
4076			 
4076			.DAT: 
4076				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
4076 3d				db WORD_SYS_CORE+41             
4077 cc 40			dw .HOME            
4079 03				db 2 + 1 
407a .. 00			db "AT",0              
407d				endm 
# End of macro CWHEAD
407d			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
407d					if DEBUG_FORTH_WORDS_KEY 
407d						DMARK "AT." 
407d f5				push af  
407e 3a 92 40			ld a, (.dmark)  
4081 32 65 ee			ld (debug_mark),a  
4084 3a 93 40			ld a, (.dmark+1)  
4087 32 66 ee			ld (debug_mark+1),a  
408a 3a 94 40			ld a, (.dmark+2)  
408d 32 67 ee			ld (debug_mark+2),a  
4090 18 03			jr .pastdmark  
4092 ..			.dmark: db "AT."  
4095 f1			.pastdmark: pop af  
4096			endm  
# End of macro DMARK
4096						CALLMONITOR 
4096 cd 6f ee			call debug_vector  
4099				endm  
# End of macro CALLMONITOR
4099					endif 
4099					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4099 cd 95 1d			call macro_dsp_valuehl 
409c				endm 
# End of macro FORTH_DSP_VALUEHL
409c			 
409c			 
409c					; TODO save cursor row 
409c 7d					ld a,l 
409d fe 02				cp 2 
409f 20 04				jr nz, .crow3 
40a1 3e 28				ld a, display_row_2 
40a3 18 12				jr .ccol1 
40a5 fe 03		.crow3:		cp 3 
40a7 20 04				jr nz, .crow4 
40a9 3e 50				ld a, display_row_3 
40ab 18 0a				jr .ccol1 
40ad fe 04		.crow4:		cp 4 
40af 20 04				jr nz, .crow1 
40b1 3e 78				ld a, display_row_4 
40b3 18 02				jr .ccol1 
40b5 3e 00		.crow1:		ld a,display_row_1 
40b7 f5			.ccol1:		push af			; got row offset 
40b8 6f					ld l,a 
40b9 26 00				ld h,0 
40bb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40bb cd 4d 1e			call macro_forth_dsp_pop 
40be				endm 
# End of macro FORTH_DSP_POP
40be					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40be cd 95 1d			call macro_dsp_valuehl 
40c1				endm 
# End of macro FORTH_DSP_VALUEHL
40c1					; TODO save cursor col 
40c1 f1					pop af 
40c2 85					add l		; add col offset 
40c3 32 58 ea				ld (f_cursor_ptr), a 
40c6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40c6 cd 4d 1e			call macro_forth_dsp_pop 
40c9				endm 
# End of macro FORTH_DSP_POP
40c9			 
40c9					; calculate  
40c9			 
40c9					NEXTW 
40c9 c3 80 1f			jp macro_next 
40cc				endm 
# End of macro NEXTW
40cc			 
40cc			 
40cc			.HOME: 
40cc				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
40cc 41				db WORD_SYS_CORE+45             
40cd f9 40			dw .CR            
40cf 05				db 4 + 1 
40d0 .. 00			db "HOME",0              
40d5				endm 
# End of macro CWHEAD
40d5			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
40d5					if DEBUG_FORTH_WORDS_KEY 
40d5						DMARK "HOM" 
40d5 f5				push af  
40d6 3a ea 40			ld a, (.dmark)  
40d9 32 65 ee			ld (debug_mark),a  
40dc 3a eb 40			ld a, (.dmark+1)  
40df 32 66 ee			ld (debug_mark+1),a  
40e2 3a ec 40			ld a, (.dmark+2)  
40e5 32 67 ee			ld (debug_mark+2),a  
40e8 18 03			jr .pastdmark  
40ea ..			.dmark: db "HOM"  
40ed f1			.pastdmark: pop af  
40ee			endm  
# End of macro DMARK
40ee						CALLMONITOR 
40ee cd 6f ee			call debug_vector  
40f1				endm  
# End of macro CALLMONITOR
40f1					endif 
40f1 3e 00		.home:		ld a, 0		; and home cursor 
40f3 32 58 ea				ld (f_cursor_ptr), a 
40f6					NEXTW 
40f6 c3 80 1f			jp macro_next 
40f9				endm 
# End of macro NEXTW
40f9			 
40f9			 
40f9			.CR: 
40f9				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
40f9 46				db WORD_SYS_CORE+50             
40fa 34 41			dw .SPACE            
40fc 03				db 2 + 1 
40fd .. 00			db "CR",0              
4100				endm 
# End of macro CWHEAD
4100			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
4100					if DEBUG_FORTH_WORDS_KEY 
4100						DMARK "CR." 
4100 f5				push af  
4101 3a 15 41			ld a, (.dmark)  
4104 32 65 ee			ld (debug_mark),a  
4107 3a 16 41			ld a, (.dmark+1)  
410a 32 66 ee			ld (debug_mark+1),a  
410d 3a 17 41			ld a, (.dmark+2)  
4110 32 67 ee			ld (debug_mark+2),a  
4113 18 03			jr .pastdmark  
4115 ..			.dmark: db "CR."  
4118 f1			.pastdmark: pop af  
4119			endm  
# End of macro DMARK
4119						CALLMONITOR 
4119 cd 6f ee			call debug_vector  
411c				endm  
# End of macro CALLMONITOR
411c					endif 
411c 3e 0d				ld a, 13 
411e 32 bb e2				ld (scratch),a 
4121 3e 0a				ld a, 10 
4123 32 bc e2				ld (scratch+1),a 
4126 3e 00				ld a, 0 
4128 32 bd e2				ld (scratch+2),a 
412b 21 bb e2				ld hl, scratch 
412e cd fe 1b				call forth_push_str 
4131					 
4131				       NEXTW 
4131 c3 80 1f			jp macro_next 
4134				endm 
# End of macro NEXTW
4134			.SPACE: 
4134				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
4134 46				db WORD_SYS_CORE+50             
4135 6a 41			dw .SPACES            
4137 03				db 2 + 1 
4138 .. 00			db "BL",0              
413b				endm 
# End of macro CWHEAD
413b			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
413b					if DEBUG_FORTH_WORDS_KEY 
413b						DMARK "BL." 
413b f5				push af  
413c 3a 50 41			ld a, (.dmark)  
413f 32 65 ee			ld (debug_mark),a  
4142 3a 51 41			ld a, (.dmark+1)  
4145 32 66 ee			ld (debug_mark+1),a  
4148 3a 52 41			ld a, (.dmark+2)  
414b 32 67 ee			ld (debug_mark+2),a  
414e 18 03			jr .pastdmark  
4150 ..			.dmark: db "BL."  
4153 f1			.pastdmark: pop af  
4154			endm  
# End of macro DMARK
4154						CALLMONITOR 
4154 cd 6f ee			call debug_vector  
4157				endm  
# End of macro CALLMONITOR
4157					endif 
4157 3e 20				ld a, " " 
4159 32 bb e2				ld (scratch),a 
415c 3e 00				ld a, 0 
415e 32 bc e2				ld (scratch+1),a 
4161 21 bb e2				ld hl, scratch 
4164 cd fe 1b				call forth_push_str 
4167					 
4167				       NEXTW 
4167 c3 80 1f			jp macro_next 
416a				endm 
# End of macro NEXTW
416a			 
416a			;.blstr: db " ", 0 
416a			 
416a			.SPACES: 
416a				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
416a 47				db WORD_SYS_CORE+51             
416b 05 42			dw .SCROLL            
416d 07				db 6 + 1 
416e .. 00			db "SPACES",0              
4175				endm 
# End of macro CWHEAD
4175			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
4175					if DEBUG_FORTH_WORDS_KEY 
4175						DMARK "SPS" 
4175 f5				push af  
4176 3a 8a 41			ld a, (.dmark)  
4179 32 65 ee			ld (debug_mark),a  
417c 3a 8b 41			ld a, (.dmark+1)  
417f 32 66 ee			ld (debug_mark+1),a  
4182 3a 8c 41			ld a, (.dmark+2)  
4185 32 67 ee			ld (debug_mark+2),a  
4188 18 03			jr .pastdmark  
418a ..			.dmark: db "SPS"  
418d f1			.pastdmark: pop af  
418e			endm  
# End of macro DMARK
418e						CALLMONITOR 
418e cd 6f ee			call debug_vector  
4191				endm  
# End of macro CALLMONITOR
4191					endif 
4191			 
4191			 
4191					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4191 cd 95 1d			call macro_dsp_valuehl 
4194				endm 
# End of macro FORTH_DSP_VALUEHL
4194			 
4194 e5					push hl    ; u 
4195					if DEBUG_FORTH_WORDS 
4195						DMARK "SPA" 
4195 f5				push af  
4196 3a aa 41			ld a, (.dmark)  
4199 32 65 ee			ld (debug_mark),a  
419c 3a ab 41			ld a, (.dmark+1)  
419f 32 66 ee			ld (debug_mark+1),a  
41a2 3a ac 41			ld a, (.dmark+2)  
41a5 32 67 ee			ld (debug_mark+2),a  
41a8 18 03			jr .pastdmark  
41aa ..			.dmark: db "SPA"  
41ad f1			.pastdmark: pop af  
41ae			endm  
# End of macro DMARK
41ae						CALLMONITOR 
41ae cd 6f ee			call debug_vector  
41b1				endm  
# End of macro CALLMONITOR
41b1					endif 
41b1			 
41b1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41b1 cd 4d 1e			call macro_forth_dsp_pop 
41b4				endm 
# End of macro FORTH_DSP_POP
41b4 e1					pop hl 
41b5 0e 00				ld c, 0 
41b7 45					ld b, l 
41b8 21 bb e2				ld hl, scratch  
41bb			 
41bb					if DEBUG_FORTH_WORDS 
41bb						DMARK "SP2" 
41bb f5				push af  
41bc 3a d0 41			ld a, (.dmark)  
41bf 32 65 ee			ld (debug_mark),a  
41c2 3a d1 41			ld a, (.dmark+1)  
41c5 32 66 ee			ld (debug_mark+1),a  
41c8 3a d2 41			ld a, (.dmark+2)  
41cb 32 67 ee			ld (debug_mark+2),a  
41ce 18 03			jr .pastdmark  
41d0 ..			.dmark: db "SP2"  
41d3 f1			.pastdmark: pop af  
41d4			endm  
# End of macro DMARK
41d4						CALLMONITOR 
41d4 cd 6f ee			call debug_vector  
41d7				endm  
# End of macro CALLMONITOR
41d7					endif 
41d7 3e 20				ld a, ' ' 
41d9			.spaces1:	 
41d9 77					ld (hl),a 
41da 23					inc hl 
41db					 
41db 10 fc				djnz .spaces1 
41dd 3e 00				ld a,0 
41df 77					ld (hl),a 
41e0 21 bb e2				ld hl, scratch 
41e3					if DEBUG_FORTH_WORDS 
41e3						DMARK "SP3" 
41e3 f5				push af  
41e4 3a f8 41			ld a, (.dmark)  
41e7 32 65 ee			ld (debug_mark),a  
41ea 3a f9 41			ld a, (.dmark+1)  
41ed 32 66 ee			ld (debug_mark+1),a  
41f0 3a fa 41			ld a, (.dmark+2)  
41f3 32 67 ee			ld (debug_mark+2),a  
41f6 18 03			jr .pastdmark  
41f8 ..			.dmark: db "SP3"  
41fb f1			.pastdmark: pop af  
41fc			endm  
# End of macro DMARK
41fc						CALLMONITOR 
41fc cd 6f ee			call debug_vector  
41ff				endm  
# End of macro CALLMONITOR
41ff					endif 
41ff cd fe 1b				call forth_push_str 
4202			 
4202				       NEXTW 
4202 c3 80 1f			jp macro_next 
4205				endm 
# End of macro NEXTW
4205			 
4205			 
4205			 
4205			.SCROLL: 
4205				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4205 53				db WORD_SYS_CORE+63             
4206 32 42			dw .SCROLLD            
4208 07				db 6 + 1 
4209 .. 00			db "SCROLL",0              
4210				endm 
# End of macro CWHEAD
4210			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
4210					if DEBUG_FORTH_WORDS_KEY 
4210						DMARK "SCR" 
4210 f5				push af  
4211 3a 25 42			ld a, (.dmark)  
4214 32 65 ee			ld (debug_mark),a  
4217 3a 26 42			ld a, (.dmark+1)  
421a 32 66 ee			ld (debug_mark+1),a  
421d 3a 27 42			ld a, (.dmark+2)  
4220 32 67 ee			ld (debug_mark+2),a  
4223 18 03			jr .pastdmark  
4225 ..			.dmark: db "SCR"  
4228 f1			.pastdmark: pop af  
4229			endm  
# End of macro DMARK
4229						CALLMONITOR 
4229 cd 6f ee			call debug_vector  
422c				endm  
# End of macro CALLMONITOR
422c					endif 
422c			 
422c cd 8a 0b			call scroll_up 
422f			;	call update_display 
422f			 
422f					NEXTW 
422f c3 80 1f			jp macro_next 
4232				endm 
# End of macro NEXTW
4232			 
4232			 
4232			 
4232			;		; get dir 
4232			; 
4232			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4232			; 
4232			;		push hl 
4232			; 
4232			;		; destroy value TOS 
4232			; 
4232			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4232			; 
4232			;		; get count 
4232			; 
4232			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4232			; 
4232			;		push hl 
4232			; 
4232			;		; destroy value TOS 
4232			; 
4232			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4232			; 
4232			;		; one value on hl get other one back 
4232			; 
4232			;		pop bc    ; count 
4232			; 
4232			;		pop de   ; dir 
4232			; 
4232			; 
4232			;		ld b, c 
4232			; 
4232			;.scrolldir:     push bc 
4232			;		push de 
4232			; 
4232			;		ld a, 0 
4232			;		cp e 
4232			;		jr z, .scrollup  
4232			;		call scroll_down 
4232			;		jr .scrollnext 
4232			;.scrollup:	call scroll_up 
4232			; 
4232			;		 
4232			;.scrollnext: 
4232			;		pop de 
4232			;		pop bc 
4232			;		djnz .scrolldir 
4232			; 
4232			; 
4232			; 
4232			; 
4232			; 
4232			;		NEXTW 
4232			 
4232			.SCROLLD: 
4232				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4232 53				db WORD_SYS_CORE+63             
4233 60 42			dw .ATQ            
4235 08				db 7 + 1 
4236 .. 00			db "SCROLLD",0              
423e				endm 
# End of macro CWHEAD
423e			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
423e					if DEBUG_FORTH_WORDS_KEY 
423e						DMARK "SCD" 
423e f5				push af  
423f 3a 53 42			ld a, (.dmark)  
4242 32 65 ee			ld (debug_mark),a  
4245 3a 54 42			ld a, (.dmark+1)  
4248 32 66 ee			ld (debug_mark+1),a  
424b 3a 55 42			ld a, (.dmark+2)  
424e 32 67 ee			ld (debug_mark+2),a  
4251 18 03			jr .pastdmark  
4253 ..			.dmark: db "SCD"  
4256 f1			.pastdmark: pop af  
4257			endm  
# End of macro DMARK
4257						CALLMONITOR 
4257 cd 6f ee			call debug_vector  
425a				endm  
# End of macro CALLMONITOR
425a					endif 
425a			 
425a cd ae 0b			call scroll_down 
425d			;	call update_display 
425d			 
425d					NEXTW 
425d c3 80 1f			jp macro_next 
4260				endm 
# End of macro NEXTW
4260			 
4260			 
4260			.ATQ: 
4260				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4260 62				db WORD_SYS_CORE+78             
4261 be 42			dw .AUTODSP            
4263 04				db 3 + 1 
4264 .. 00			db "AT@",0              
4268				endm 
# End of macro CWHEAD
4268			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
4268					if DEBUG_FORTH_WORDS_KEY 
4268						DMARK "ATA" 
4268 f5				push af  
4269 3a 7d 42			ld a, (.dmark)  
426c 32 65 ee			ld (debug_mark),a  
426f 3a 7e 42			ld a, (.dmark+1)  
4272 32 66 ee			ld (debug_mark+1),a  
4275 3a 7f 42			ld a, (.dmark+2)  
4278 32 67 ee			ld (debug_mark+2),a  
427b 18 03			jr .pastdmark  
427d ..			.dmark: db "ATA"  
4280 f1			.pastdmark: pop af  
4281			endm  
# End of macro DMARK
4281						CALLMONITOR 
4281 cd 6f ee			call debug_vector  
4284				endm  
# End of macro CALLMONITOR
4284					endif 
4284			 
4284			 
4284					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4284 cd 95 1d			call macro_dsp_valuehl 
4287				endm 
# End of macro FORTH_DSP_VALUEHL
4287			 
4287					; TODO save cursor row 
4287 7d					ld a,l 
4288 fe 02				cp 2 
428a 20 04				jr nz, .crow3aq 
428c 3e 28				ld a, display_row_2 
428e 18 12				jr .ccol1aq 
4290 fe 03		.crow3aq:		cp 3 
4292 20 04				jr nz, .crow4aq 
4294 3e 50				ld a, display_row_3 
4296 18 0a				jr .ccol1aq 
4298 fe 04		.crow4aq:		cp 4 
429a 20 04				jr nz, .crow1aq 
429c 3e 78				ld a, display_row_4 
429e 18 02				jr .ccol1aq 
42a0 3e 00		.crow1aq:		ld a,display_row_1 
42a2 f5			.ccol1aq:		push af			; got row offset 
42a3 6f					ld l,a 
42a4 26 00				ld h,0 
42a6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42a6 cd 4d 1e			call macro_forth_dsp_pop 
42a9				endm 
# End of macro FORTH_DSP_POP
42a9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
42a9 cd 95 1d			call macro_dsp_valuehl 
42ac				endm 
# End of macro FORTH_DSP_VALUEHL
42ac					; TODO save cursor col 
42ac f1					pop af 
42ad 85					add l		; add col offset 
42ae			 
42ae					; add current frame buffer address 
42ae 2a c6 eb				ld hl, (display_fb_active) 
42b1 cd f5 0d				call addatohl 
42b4			 
42b4			 
42b4			 
42b4			 
42b4					; get char frame buffer location offset in hl 
42b4			 
42b4 7e					ld a,(hl) 
42b5 26 00				ld h, 0 
42b7 6f					ld l, a 
42b8			 
42b8 cd 90 1b				call forth_push_numhl 
42bb			 
42bb			 
42bb					NEXTW 
42bb c3 80 1f			jp macro_next 
42be				endm 
# End of macro NEXTW
42be			 
42be			.AUTODSP: 
42be				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
42be 63				db WORD_SYS_CORE+79             
42bf d4 42			dw .MENU            
42c1 05				db 4 + 1 
42c2 .. 00			db "ADSP",0              
42c7				endm 
# End of macro CWHEAD
42c7			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
42c7			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
42c7			 
42c7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
42c7 cd 95 1d			call macro_dsp_valuehl 
42ca				endm 
# End of macro FORTH_DSP_VALUEHL
42ca			 
42ca			;		push hl 
42ca			 
42ca					; destroy value TOS 
42ca			 
42ca					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42ca cd 4d 1e			call macro_forth_dsp_pop 
42cd				endm 
# End of macro FORTH_DSP_POP
42cd			 
42cd			;		pop hl 
42cd			 
42cd 7d					ld a,l 
42ce 32 36 ea				ld (cli_autodisplay), a 
42d1				       NEXTW 
42d1 c3 80 1f			jp macro_next 
42d4				endm 
# End of macro NEXTW
42d4			 
42d4			.MENU: 
42d4				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
42d4 70				db WORD_SYS_CORE+92             
42d5 7d 43			dw .ENDDISPLAY            
42d7 05				db 4 + 1 
42d8 .. 00			db "MENU",0              
42dd				endm 
# End of macro CWHEAD
42dd			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
42dd			 
42dd			;		; get number of items on the stack 
42dd			; 
42dd				 
42dd					FORTH_DSP_VALUEHL 
42dd cd 95 1d			call macro_dsp_valuehl 
42e0				endm 
# End of macro FORTH_DSP_VALUEHL
42e0				 
42e0					if DEBUG_FORTH_WORDS_KEY 
42e0						DMARK "MNU" 
42e0 f5				push af  
42e1 3a f5 42			ld a, (.dmark)  
42e4 32 65 ee			ld (debug_mark),a  
42e7 3a f6 42			ld a, (.dmark+1)  
42ea 32 66 ee			ld (debug_mark+1),a  
42ed 3a f7 42			ld a, (.dmark+2)  
42f0 32 67 ee			ld (debug_mark+2),a  
42f3 18 03			jr .pastdmark  
42f5 ..			.dmark: db "MNU"  
42f8 f1			.pastdmark: pop af  
42f9			endm  
# End of macro DMARK
42f9						CALLMONITOR 
42f9 cd 6f ee			call debug_vector  
42fc				endm  
# End of macro CALLMONITOR
42fc					endif 
42fc			 
42fc 45					ld b, l	 
42fd 05					dec b 
42fe			 
42fe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42fe cd 4d 1e			call macro_forth_dsp_pop 
4301				endm 
# End of macro FORTH_DSP_POP
4301			 
4301			 
4301					; go directly through the stack to pluck out the string pointers and build an array 
4301			 
4301			;		FORTH_DSP 
4301			 
4301					; hl contains top most stack item 
4301				 
4301 11 bb e2				ld de, scratch 
4304			 
4304			.mbuild: 
4304			 
4304					FORTH_DSP_VALUEHL 
4304 cd 95 1d			call macro_dsp_valuehl 
4307				endm 
# End of macro FORTH_DSP_VALUEHL
4307			 
4307					if DEBUG_FORTH_WORDS 
4307						DMARK "MN3" 
4307 f5				push af  
4308 3a 1c 43			ld a, (.dmark)  
430b 32 65 ee			ld (debug_mark),a  
430e 3a 1d 43			ld a, (.dmark+1)  
4311 32 66 ee			ld (debug_mark+1),a  
4314 3a 1e 43			ld a, (.dmark+2)  
4317 32 67 ee			ld (debug_mark+2),a  
431a 18 03			jr .pastdmark  
431c ..			.dmark: db "MN3"  
431f f1			.pastdmark: pop af  
4320			endm  
# End of macro DMARK
4320						CALLMONITOR 
4320 cd 6f ee			call debug_vector  
4323				endm  
# End of macro CALLMONITOR
4323					endif 
4323 eb					ex de, hl 
4324 73					ld (hl), e 
4325 23					inc hl 
4326 72					ld (hl), d 
4327 23					inc hl 
4328 eb					ex de, hl 
4329			 
4329					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4329 cd 4d 1e			call macro_forth_dsp_pop 
432c				endm 
# End of macro FORTH_DSP_POP
432c			 
432c 10 d6				djnz .mbuild 
432e			 
432e					; done add term 
432e			 
432e eb					ex de, hl 
432f 36 00				ld (hl), 0 
4331 23					inc hl 
4332 36 00				ld (hl), 0 
4334			 
4334				 
4334					 
4334 21 bb e2				ld hl, scratch 
4337			 
4337					if DEBUG_FORTH_WORDS 
4337						DMARK "MNx" 
4337 f5				push af  
4338 3a 4c 43			ld a, (.dmark)  
433b 32 65 ee			ld (debug_mark),a  
433e 3a 4d 43			ld a, (.dmark+1)  
4341 32 66 ee			ld (debug_mark+1),a  
4344 3a 4e 43			ld a, (.dmark+2)  
4347 32 67 ee			ld (debug_mark+2),a  
434a 18 03			jr .pastdmark  
434c ..			.dmark: db "MNx"  
434f f1			.pastdmark: pop af  
4350			endm  
# End of macro DMARK
4350						CALLMONITOR 
4350 cd 6f ee			call debug_vector  
4353				endm  
# End of macro CALLMONITOR
4353					endif 
4353			 
4353			 
4353			 
4353 3e 00				ld a, 0 
4355 cd f9 0b				call menu 
4358			 
4358			 
4358 6f					ld l, a 
4359 26 00				ld h, 0 
435b			 
435b					if DEBUG_FORTH_WORDS 
435b						DMARK "MNr" 
435b f5				push af  
435c 3a 70 43			ld a, (.dmark)  
435f 32 65 ee			ld (debug_mark),a  
4362 3a 71 43			ld a, (.dmark+1)  
4365 32 66 ee			ld (debug_mark+1),a  
4368 3a 72 43			ld a, (.dmark+2)  
436b 32 67 ee			ld (debug_mark+2),a  
436e 18 03			jr .pastdmark  
4370 ..			.dmark: db "MNr"  
4373 f1			.pastdmark: pop af  
4374			endm  
# End of macro DMARK
4374						CALLMONITOR 
4374 cd 6f ee			call debug_vector  
4377				endm  
# End of macro CALLMONITOR
4377					endif 
4377			 
4377 cd 90 1b				call forth_push_numhl 
437a			 
437a			 
437a			 
437a			 
437a				       NEXTW 
437a c3 80 1f			jp macro_next 
437d				endm 
# End of macro NEXTW
437d			 
437d			 
437d			.ENDDISPLAY: 
437d			 
437d			; eof 
# End of file forth_words_display.asm
437d			include "forth_words_str.asm" 
437d			 
437d			; | ## String Words 
437d			 
437d			.SPLIT:   
437d			 
437d				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
437d 48				db WORD_SYS_CORE+52             
437e 72 44			dw .PTR            
4380 06				db 5 + 1 
4381 .. 00			db "SPLIT",0              
4387				endm 
# End of macro CWHEAD
4387			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
4387					if DEBUG_FORTH_WORDS_KEY 
4387						DMARK "SPT" 
4387 f5				push af  
4388 3a 9c 43			ld a, (.dmark)  
438b 32 65 ee			ld (debug_mark),a  
438e 3a 9d 43			ld a, (.dmark+1)  
4391 32 66 ee			ld (debug_mark+1),a  
4394 3a 9e 43			ld a, (.dmark+2)  
4397 32 67 ee			ld (debug_mark+2),a  
439a 18 03			jr .pastdmark  
439c ..			.dmark: db "SPT"  
439f f1			.pastdmark: pop af  
43a0			endm  
# End of macro DMARK
43a0						CALLMONITOR 
43a0 cd 6f ee			call debug_vector  
43a3				endm  
# End of macro CALLMONITOR
43a3					endif 
43a3			 
43a3					; get delim 
43a3					FORTH_DSP_VALUEHL 
43a3 cd 95 1d			call macro_dsp_valuehl 
43a6				endm 
# End of macro FORTH_DSP_VALUEHL
43a6			 
43a6					FORTH_DSP_POP 
43a6 cd 4d 1e			call macro_forth_dsp_pop 
43a9				endm 
# End of macro FORTH_DSP_POP
43a9					 
43a9			 
43a9 45					ld b, l    ; move delim to b 
43aa 0e 01				ld c, 1   ; count of poritions 
43ac			 
43ac c5					push bc 
43ad			 
43ad					if DEBUG_FORTH_WORDS 
43ad						DMARK "SPa" 
43ad f5				push af  
43ae 3a c2 43			ld a, (.dmark)  
43b1 32 65 ee			ld (debug_mark),a  
43b4 3a c3 43			ld a, (.dmark+1)  
43b7 32 66 ee			ld (debug_mark+1),a  
43ba 3a c4 43			ld a, (.dmark+2)  
43bd 32 67 ee			ld (debug_mark+2),a  
43c0 18 03			jr .pastdmark  
43c2 ..			.dmark: db "SPa"  
43c5 f1			.pastdmark: pop af  
43c6			endm  
# End of macro DMARK
43c6						CALLMONITOR 
43c6 cd 6f ee			call debug_vector  
43c9				endm  
# End of macro CALLMONITOR
43c9					endif 
43c9					; get pointer to string to chop up 
43c9					FORTH_DSP_VALUEHL 
43c9 cd 95 1d			call macro_dsp_valuehl 
43cc				endm 
# End of macro FORTH_DSP_VALUEHL
43cc			 
43cc			;		push hl 
43cc 11 bb e2				ld de, scratch 
43cf			.spllop: 
43cf c1					pop bc 
43d0 c5					push bc 
43d1			;		pop hl 
43d1					if DEBUG_FORTH_WORDS 
43d1						DMARK "SPl" 
43d1 f5				push af  
43d2 3a e6 43			ld a, (.dmark)  
43d5 32 65 ee			ld (debug_mark),a  
43d8 3a e7 43			ld a, (.dmark+1)  
43db 32 66 ee			ld (debug_mark+1),a  
43de 3a e8 43			ld a, (.dmark+2)  
43e1 32 67 ee			ld (debug_mark+2),a  
43e4 18 03			jr .pastdmark  
43e6 ..			.dmark: db "SPl"  
43e9 f1			.pastdmark: pop af  
43ea			endm  
# End of macro DMARK
43ea						CALLMONITOR 
43ea cd 6f ee			call debug_vector  
43ed				endm  
# End of macro CALLMONITOR
43ed					endif 
43ed 7e					ld a, (hl) 
43ee b8					cp b 
43ef 28 08				jr z, .splnxt 
43f1 fe 00				cp 0 
43f3 28 34				jr z, .splend 
43f5 ed a0				ldi 
43f7 18 d6				jr .spllop 
43f9			 
43f9					; hit dlim 
43f9			 
43f9			.splnxt: 
43f9					if DEBUG_FORTH_WORDS 
43f9						DMARK "SPx" 
43f9 f5				push af  
43fa 3a 0e 44			ld a, (.dmark)  
43fd 32 65 ee			ld (debug_mark),a  
4400 3a 0f 44			ld a, (.dmark+1)  
4403 32 66 ee			ld (debug_mark+1),a  
4406 3a 10 44			ld a, (.dmark+2)  
4409 32 67 ee			ld (debug_mark+2),a  
440c 18 03			jr .pastdmark  
440e ..			.dmark: db "SPx"  
4411 f1			.pastdmark: pop af  
4412			endm  
# End of macro DMARK
4412						CALLMONITOR 
4412 cd 6f ee			call debug_vector  
4415				endm  
# End of macro CALLMONITOR
4415					endif 
4415 3e 00				ld a, 0 
4417 12					ld (de), a 
4418					;ex de, hl 
4418 e5					push hl 
4419 21 bb e2				ld hl, scratch 
441c cd fe 1b				call forth_push_str 
441f e1					pop hl 
4420					;ex de, hl 
4420 23					inc hl 
4421 c1					pop bc 
4422 0c					inc c 
4423 c5					push bc 
4424 11 bb e2				ld de, scratch 
4427 18 a6				jr .spllop 
4429			 
4429			.splend:		 
4429					if DEBUG_FORTH_WORDS 
4429						DMARK "SPe" 
4429 f5				push af  
442a 3a 3e 44			ld a, (.dmark)  
442d 32 65 ee			ld (debug_mark),a  
4430 3a 3f 44			ld a, (.dmark+1)  
4433 32 66 ee			ld (debug_mark+1),a  
4436 3a 40 44			ld a, (.dmark+2)  
4439 32 67 ee			ld (debug_mark+2),a  
443c 18 03			jr .pastdmark  
443e ..			.dmark: db "SPe"  
4441 f1			.pastdmark: pop af  
4442			endm  
# End of macro DMARK
4442						CALLMONITOR 
4442 cd 6f ee			call debug_vector  
4445				endm  
# End of macro CALLMONITOR
4445					endif 
4445 12					ld (de), a 
4446 eb					ex de, hl 
4447			;		push hl 
4447 21 bb e2				ld hl, scratch 
444a cd fe 1b				call forth_push_str 
444d					 
444d					if DEBUG_FORTH_WORDS 
444d						DMARK "SPc" 
444d f5				push af  
444e 3a 62 44			ld a, (.dmark)  
4451 32 65 ee			ld (debug_mark),a  
4454 3a 63 44			ld a, (.dmark+1)  
4457 32 66 ee			ld (debug_mark+1),a  
445a 3a 64 44			ld a, (.dmark+2)  
445d 32 67 ee			ld (debug_mark+2),a  
4460 18 03			jr .pastdmark  
4462 ..			.dmark: db "SPc"  
4465 f1			.pastdmark: pop af  
4466			endm  
# End of macro DMARK
4466						CALLMONITOR 
4466 cd 6f ee			call debug_vector  
4469				endm  
# End of macro CALLMONITOR
4469					endif 
4469			 
4469 e1					pop hl    ; get counter from bc which has been push 
446a 26 00				ld h, 0 
446c			;		ld l, c 
446c cd 90 1b				call forth_push_numhl 
446f			 
446f			 
446f				NEXTW 
446f c3 80 1f			jp macro_next 
4472				endm 
# End of macro NEXTW
4472			.PTR:   
4472			 
4472				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
4472 48				db WORD_SYS_CORE+52             
4473 9f 44			dw .STYPE            
4475 04				db 3 + 1 
4476 .. 00			db "PTR",0              
447a				endm 
# End of macro CWHEAD
447a			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
447a			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
447a			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
447a			 
447a					if DEBUG_FORTH_WORDS_KEY 
447a						DMARK "PTR" 
447a f5				push af  
447b 3a 8f 44			ld a, (.dmark)  
447e 32 65 ee			ld (debug_mark),a  
4481 3a 90 44			ld a, (.dmark+1)  
4484 32 66 ee			ld (debug_mark+1),a  
4487 3a 91 44			ld a, (.dmark+2)  
448a 32 67 ee			ld (debug_mark+2),a  
448d 18 03			jr .pastdmark  
448f ..			.dmark: db "PTR"  
4492 f1			.pastdmark: pop af  
4493			endm  
# End of macro DMARK
4493						CALLMONITOR 
4493 cd 6f ee			call debug_vector  
4496				endm  
# End of macro CALLMONITOR
4496					endif 
4496					FORTH_DSP_VALUEHL 
4496 cd 95 1d			call macro_dsp_valuehl 
4499				endm 
# End of macro FORTH_DSP_VALUEHL
4499 cd 90 1b				call forth_push_numhl 
449c			 
449c			 
449c					NEXTW 
449c c3 80 1f			jp macro_next 
449f				endm 
# End of macro NEXTW
449f			.STYPE: 
449f				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
449f 48				db WORD_SYS_CORE+52             
44a0 ee 44			dw .UPPER            
44a2 06				db 5 + 1 
44a3 .. 00			db "STYPE",0              
44a9				endm 
# End of macro CWHEAD
44a9			; | STYPE ( u -- u type ) Push type of value on TOS  | DONE 
44a9			; | | 's' string or 'i' integer 
44a9					if DEBUG_FORTH_WORDS_KEY 
44a9						DMARK "STY" 
44a9 f5				push af  
44aa 3a be 44			ld a, (.dmark)  
44ad 32 65 ee			ld (debug_mark),a  
44b0 3a bf 44			ld a, (.dmark+1)  
44b3 32 66 ee			ld (debug_mark+1),a  
44b6 3a c0 44			ld a, (.dmark+2)  
44b9 32 67 ee			ld (debug_mark+2),a  
44bc 18 03			jr .pastdmark  
44be ..			.dmark: db "STY"  
44c1 f1			.pastdmark: pop af  
44c2			endm  
# End of macro DMARK
44c2						CALLMONITOR 
44c2 cd 6f ee			call debug_vector  
44c5				endm  
# End of macro CALLMONITOR
44c5					endif 
44c5					FORTH_DSP 
44c5 cd 5b 1d			call macro_forth_dsp 
44c8				endm 
# End of macro FORTH_DSP
44c8					;v5 FORTH_DSP_VALUE 
44c8			 
44c8 7e					ld a, (hl) 
44c9			 
44c9 f5					push af 
44ca			 
44ca			; Dont destroy TOS		FORTH_DSP_POP 
44ca			 
44ca f1					pop af 
44cb			 
44cb fe 01				cp DS_TYPE_STR 
44cd 28 09				jr z, .typestr 
44cf			 
44cf fe 02				cp DS_TYPE_INUM 
44d1 28 0a				jr z, .typeinum 
44d3			 
44d3 21 ec 44				ld hl, .tna 
44d6 18 0a				jr .tpush 
44d8			 
44d8 21 e8 44		.typestr:	ld hl, .tstr 
44db 18 05				jr .tpush 
44dd 21 ea 44		.typeinum:	ld hl, .tinum 
44e0 18 00				jr .tpush 
44e2			 
44e2			.tpush: 
44e2			 
44e2 cd fe 1b				call forth_push_str 
44e5			 
44e5					NEXTW 
44e5 c3 80 1f			jp macro_next 
44e8				endm 
# End of macro NEXTW
44e8 .. 00		.tstr:	db "s",0 
44ea .. 00		.tinum:  db "i",0 
44ec .. 00		.tna:   db "?", 0 
44ee			 
44ee			 
44ee			.UPPER: 
44ee				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
44ee 48				db WORD_SYS_CORE+52             
44ef 29 45			dw .LOWER            
44f1 06				db 5 + 1 
44f2 .. 00			db "UPPER",0              
44f8				endm 
# End of macro CWHEAD
44f8			; | UPPER ( s -- s ) Upper case string s  | DONE 
44f8					if DEBUG_FORTH_WORDS_KEY 
44f8						DMARK "UPR" 
44f8 f5				push af  
44f9 3a 0d 45			ld a, (.dmark)  
44fc 32 65 ee			ld (debug_mark),a  
44ff 3a 0e 45			ld a, (.dmark+1)  
4502 32 66 ee			ld (debug_mark+1),a  
4505 3a 0f 45			ld a, (.dmark+2)  
4508 32 67 ee			ld (debug_mark+2),a  
450b 18 03			jr .pastdmark  
450d ..			.dmark: db "UPR"  
4510 f1			.pastdmark: pop af  
4511			endm  
# End of macro DMARK
4511						CALLMONITOR 
4511 cd 6f ee			call debug_vector  
4514				endm  
# End of macro CALLMONITOR
4514					endif 
4514			 
4514					FORTH_DSP 
4514 cd 5b 1d			call macro_forth_dsp 
4517				endm 
# End of macro FORTH_DSP
4517					 
4517			; TODO check is string type 
4517			 
4517					FORTH_DSP_VALUEHL 
4517 cd 95 1d			call macro_dsp_valuehl 
451a				endm 
# End of macro FORTH_DSP_VALUEHL
451a			; get pointer to string in hl 
451a			 
451a 7e			.toup:		ld a, (hl) 
451b fe 00				cp 0 
451d 28 07				jr z, .toupdone 
451f			 
451f cd 6a 10				call to_upper 
4522			 
4522 77					ld (hl), a 
4523 23					inc hl 
4524 18 f4				jr .toup 
4526			 
4526					 
4526			 
4526			 
4526			; for each char convert to upper 
4526					 
4526			.toupdone: 
4526			 
4526			 
4526					NEXTW 
4526 c3 80 1f			jp macro_next 
4529				endm 
# End of macro NEXTW
4529			.LOWER: 
4529				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
4529 48				db WORD_SYS_CORE+52             
452a 64 45			dw .TCASE            
452c 06				db 5 + 1 
452d .. 00			db "LOWER",0              
4533				endm 
# End of macro CWHEAD
4533			; | LOWER ( s -- s ) Lower case string s  | DONE 
4533					if DEBUG_FORTH_WORDS_KEY 
4533						DMARK "LWR" 
4533 f5				push af  
4534 3a 48 45			ld a, (.dmark)  
4537 32 65 ee			ld (debug_mark),a  
453a 3a 49 45			ld a, (.dmark+1)  
453d 32 66 ee			ld (debug_mark+1),a  
4540 3a 4a 45			ld a, (.dmark+2)  
4543 32 67 ee			ld (debug_mark+2),a  
4546 18 03			jr .pastdmark  
4548 ..			.dmark: db "LWR"  
454b f1			.pastdmark: pop af  
454c			endm  
# End of macro DMARK
454c						CALLMONITOR 
454c cd 6f ee			call debug_vector  
454f				endm  
# End of macro CALLMONITOR
454f					endif 
454f			 
454f					FORTH_DSP 
454f cd 5b 1d			call macro_forth_dsp 
4552				endm 
# End of macro FORTH_DSP
4552					 
4552			; TODO check is string type 
4552			 
4552					FORTH_DSP_VALUEHL 
4552 cd 95 1d			call macro_dsp_valuehl 
4555				endm 
# End of macro FORTH_DSP_VALUEHL
4555			; get pointer to string in hl 
4555			 
4555 7e			.tolow:		ld a, (hl) 
4556 fe 00				cp 0 
4558 28 07				jr z, .tolowdone 
455a			 
455a cd 73 10				call to_lower 
455d			 
455d 77					ld (hl), a 
455e 23					inc hl 
455f 18 f4				jr .tolow 
4561			 
4561					 
4561			 
4561			 
4561			; for each char convert to low 
4561					 
4561			.tolowdone: 
4561					NEXTW 
4561 c3 80 1f			jp macro_next 
4564				endm 
# End of macro NEXTW
4564			.TCASE: 
4564				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4564 48				db WORD_SYS_CORE+52             
4565 9a 46			dw .SUBSTR            
4567 06				db 5 + 1 
4568 .. 00			db "TCASE",0              
456e				endm 
# End of macro CWHEAD
456e			; | TCASE ( s -- s ) Title case string s  | DONE 
456e					if DEBUG_FORTH_WORDS_KEY 
456e						DMARK "TCS" 
456e f5				push af  
456f 3a 83 45			ld a, (.dmark)  
4572 32 65 ee			ld (debug_mark),a  
4575 3a 84 45			ld a, (.dmark+1)  
4578 32 66 ee			ld (debug_mark+1),a  
457b 3a 85 45			ld a, (.dmark+2)  
457e 32 67 ee			ld (debug_mark+2),a  
4581 18 03			jr .pastdmark  
4583 ..			.dmark: db "TCS"  
4586 f1			.pastdmark: pop af  
4587			endm  
# End of macro DMARK
4587						CALLMONITOR 
4587 cd 6f ee			call debug_vector  
458a				endm  
# End of macro CALLMONITOR
458a					endif 
458a			 
458a					FORTH_DSP 
458a cd 5b 1d			call macro_forth_dsp 
458d				endm 
# End of macro FORTH_DSP
458d					 
458d			; TODO check is string type 
458d			 
458d					FORTH_DSP_VALUEHL 
458d cd 95 1d			call macro_dsp_valuehl 
4590				endm 
# End of macro FORTH_DSP_VALUEHL
4590			; get pointer to string in hl 
4590			 
4590					if DEBUG_FORTH_WORDS 
4590						DMARK "TC1" 
4590 f5				push af  
4591 3a a5 45			ld a, (.dmark)  
4594 32 65 ee			ld (debug_mark),a  
4597 3a a6 45			ld a, (.dmark+1)  
459a 32 66 ee			ld (debug_mark+1),a  
459d 3a a7 45			ld a, (.dmark+2)  
45a0 32 67 ee			ld (debug_mark+2),a  
45a3 18 03			jr .pastdmark  
45a5 ..			.dmark: db "TC1"  
45a8 f1			.pastdmark: pop af  
45a9			endm  
# End of macro DMARK
45a9						CALLMONITOR 
45a9 cd 6f ee			call debug_vector  
45ac				endm  
# End of macro CALLMONITOR
45ac					endif 
45ac			 
45ac					; first time in turn to upper case first char 
45ac			 
45ac 7e					ld a, (hl) 
45ad c3 37 46				jp .totsiptou 
45b0			 
45b0			 
45b0 7e			.tot:		ld a, (hl) 
45b1 fe 00				cp 0 
45b3 ca 7b 46				jp z, .totdone 
45b6			 
45b6					if DEBUG_FORTH_WORDS 
45b6						DMARK "TC2" 
45b6 f5				push af  
45b7 3a cb 45			ld a, (.dmark)  
45ba 32 65 ee			ld (debug_mark),a  
45bd 3a cc 45			ld a, (.dmark+1)  
45c0 32 66 ee			ld (debug_mark+1),a  
45c3 3a cd 45			ld a, (.dmark+2)  
45c6 32 67 ee			ld (debug_mark+2),a  
45c9 18 03			jr .pastdmark  
45cb ..			.dmark: db "TC2"  
45ce f1			.pastdmark: pop af  
45cf			endm  
# End of macro DMARK
45cf						CALLMONITOR 
45cf cd 6f ee			call debug_vector  
45d2				endm  
# End of macro CALLMONITOR
45d2					endif 
45d2					; check to see if current char is a space 
45d2			 
45d2 fe 20				cp ' ' 
45d4 28 21				jr z, .totsp 
45d6 cd 73 10				call to_lower 
45d9					if DEBUG_FORTH_WORDS 
45d9						DMARK "TC3" 
45d9 f5				push af  
45da 3a ee 45			ld a, (.dmark)  
45dd 32 65 ee			ld (debug_mark),a  
45e0 3a ef 45			ld a, (.dmark+1)  
45e3 32 66 ee			ld (debug_mark+1),a  
45e6 3a f0 45			ld a, (.dmark+2)  
45e9 32 67 ee			ld (debug_mark+2),a  
45ec 18 03			jr .pastdmark  
45ee ..			.dmark: db "TC3"  
45f1 f1			.pastdmark: pop af  
45f2			endm  
# End of macro DMARK
45f2						CALLMONITOR 
45f2 cd 6f ee			call debug_vector  
45f5				endm  
# End of macro CALLMONITOR
45f5					endif 
45f5 18 63				jr .totnxt 
45f7			 
45f7			.totsp:         ; on a space, find next char which should be upper 
45f7			 
45f7					if DEBUG_FORTH_WORDS 
45f7						DMARK "TC4" 
45f7 f5				push af  
45f8 3a 0c 46			ld a, (.dmark)  
45fb 32 65 ee			ld (debug_mark),a  
45fe 3a 0d 46			ld a, (.dmark+1)  
4601 32 66 ee			ld (debug_mark+1),a  
4604 3a 0e 46			ld a, (.dmark+2)  
4607 32 67 ee			ld (debug_mark+2),a  
460a 18 03			jr .pastdmark  
460c ..			.dmark: db "TC4"  
460f f1			.pastdmark: pop af  
4610			endm  
# End of macro DMARK
4610						CALLMONITOR 
4610 cd 6f ee			call debug_vector  
4613				endm  
# End of macro CALLMONITOR
4613					endif 
4613					;; 
4613			 
4613 fe 20				cp ' ' 
4615 20 20				jr nz, .totsiptou 
4617 23					inc hl 
4618 7e					ld a, (hl) 
4619					if DEBUG_FORTH_WORDS 
4619						DMARK "TC5" 
4619 f5				push af  
461a 3a 2e 46			ld a, (.dmark)  
461d 32 65 ee			ld (debug_mark),a  
4620 3a 2f 46			ld a, (.dmark+1)  
4623 32 66 ee			ld (debug_mark+1),a  
4626 3a 30 46			ld a, (.dmark+2)  
4629 32 67 ee			ld (debug_mark+2),a  
462c 18 03			jr .pastdmark  
462e ..			.dmark: db "TC5"  
4631 f1			.pastdmark: pop af  
4632			endm  
# End of macro DMARK
4632						CALLMONITOR 
4632 cd 6f ee			call debug_vector  
4635				endm  
# End of macro CALLMONITOR
4635					endif 
4635 18 c0				jr .totsp 
4637 fe 00		.totsiptou:    cp 0 
4639 28 40				jr z, .totdone 
463b					; not space and not zero term so upper case it 
463b cd 6a 10				call to_upper 
463e			 
463e					if DEBUG_FORTH_WORDS 
463e						DMARK "TC6" 
463e f5				push af  
463f 3a 53 46			ld a, (.dmark)  
4642 32 65 ee			ld (debug_mark),a  
4645 3a 54 46			ld a, (.dmark+1)  
4648 32 66 ee			ld (debug_mark+1),a  
464b 3a 55 46			ld a, (.dmark+2)  
464e 32 67 ee			ld (debug_mark+2),a  
4651 18 03			jr .pastdmark  
4653 ..			.dmark: db "TC6"  
4656 f1			.pastdmark: pop af  
4657			endm  
# End of macro DMARK
4657						CALLMONITOR 
4657 cd 6f ee			call debug_vector  
465a				endm  
# End of macro CALLMONITOR
465a					endif 
465a			 
465a			 
465a			.totnxt: 
465a			 
465a 77					ld (hl), a 
465b 23					inc hl 
465c					if DEBUG_FORTH_WORDS 
465c						DMARK "TC7" 
465c f5				push af  
465d 3a 71 46			ld a, (.dmark)  
4660 32 65 ee			ld (debug_mark),a  
4663 3a 72 46			ld a, (.dmark+1)  
4666 32 66 ee			ld (debug_mark+1),a  
4669 3a 73 46			ld a, (.dmark+2)  
466c 32 67 ee			ld (debug_mark+2),a  
466f 18 03			jr .pastdmark  
4671 ..			.dmark: db "TC7"  
4674 f1			.pastdmark: pop af  
4675			endm  
# End of macro DMARK
4675						CALLMONITOR 
4675 cd 6f ee			call debug_vector  
4678				endm  
# End of macro CALLMONITOR
4678					endif 
4678 c3 b0 45				jp .tot 
467b			 
467b					 
467b			 
467b			 
467b			; for each char convert to low 
467b					 
467b			.totdone: 
467b					if DEBUG_FORTH_WORDS 
467b						DMARK "TCd" 
467b f5				push af  
467c 3a 90 46			ld a, (.dmark)  
467f 32 65 ee			ld (debug_mark),a  
4682 3a 91 46			ld a, (.dmark+1)  
4685 32 66 ee			ld (debug_mark+1),a  
4688 3a 92 46			ld a, (.dmark+2)  
468b 32 67 ee			ld (debug_mark+2),a  
468e 18 03			jr .pastdmark  
4690 ..			.dmark: db "TCd"  
4693 f1			.pastdmark: pop af  
4694			endm  
# End of macro DMARK
4694						CALLMONITOR 
4694 cd 6f ee			call debug_vector  
4697				endm  
# End of macro CALLMONITOR
4697					endif 
4697					NEXTW 
4697 c3 80 1f			jp macro_next 
469a				endm 
# End of macro NEXTW
469a			 
469a			.SUBSTR: 
469a				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
469a 48				db WORD_SYS_CORE+52             
469b f8 46			dw .LEFT            
469d 07				db 6 + 1 
469e .. 00			db "SUBSTR",0              
46a5				endm 
# End of macro CWHEAD
46a5			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
46a5			 
46a5					if DEBUG_FORTH_WORDS_KEY 
46a5						DMARK "SST" 
46a5 f5				push af  
46a6 3a ba 46			ld a, (.dmark)  
46a9 32 65 ee			ld (debug_mark),a  
46ac 3a bb 46			ld a, (.dmark+1)  
46af 32 66 ee			ld (debug_mark+1),a  
46b2 3a bc 46			ld a, (.dmark+2)  
46b5 32 67 ee			ld (debug_mark+2),a  
46b8 18 03			jr .pastdmark  
46ba ..			.dmark: db "SST"  
46bd f1			.pastdmark: pop af  
46be			endm  
# End of macro DMARK
46be						CALLMONITOR 
46be cd 6f ee			call debug_vector  
46c1				endm  
# End of macro CALLMONITOR
46c1					endif 
46c1			; TODO check string type 
46c1					FORTH_DSP_VALUEHL 
46c1 cd 95 1d			call macro_dsp_valuehl 
46c4				endm 
# End of macro FORTH_DSP_VALUEHL
46c4			 
46c4 e5					push hl      ; string length 
46c5			 
46c5					FORTH_DSP_POP 
46c5 cd 4d 1e			call macro_forth_dsp_pop 
46c8				endm 
# End of macro FORTH_DSP_POP
46c8			 
46c8					FORTH_DSP_VALUEHL 
46c8 cd 95 1d			call macro_dsp_valuehl 
46cb				endm 
# End of macro FORTH_DSP_VALUEHL
46cb			 
46cb e5					push hl     ; start char 
46cc			 
46cc					FORTH_DSP_POP 
46cc cd 4d 1e			call macro_forth_dsp_pop 
46cf				endm 
# End of macro FORTH_DSP_POP
46cf			 
46cf			 
46cf					FORTH_DSP_VALUE 
46cf cd 7e 1d			call macro_forth_dsp_value 
46d2				endm 
# End of macro FORTH_DSP_VALUE
46d2			 
46d2 d1					pop de    ; get start post offset 
46d3			 
46d3 19					add hl, de    ; starting offset 
46d4			 
46d4 c1					pop bc 
46d5 c5					push bc      ; grab size of string 
46d6			 
46d6 e5					push hl    ; save string start  
46d7			 
46d7 26 00				ld h, 0 
46d9 69					ld l, c 
46da 23					inc hl 
46db 23					inc hl 
46dc			 
46dc cd d0 11				call malloc 
46df				if DEBUG_FORTH_MALLOC_GUARD 
46df cc 75 51				call z,malloc_error 
46e2				endif 
46e2			 
46e2 eb					ex de, hl      ; save malloc area for string copy 
46e3 e1					pop hl    ; get back source 
46e4 c1					pop bc    ; get length of string back 
46e5			 
46e5 d5					push de    ; save malloc area for after we push 
46e6 ed b0				ldir     ; copy substr 
46e8			 
46e8			 
46e8 eb					ex de, hl 
46e9 3e 00				ld a, 0 
46eb 77					ld (hl), a   ; term substr 
46ec			 
46ec					 
46ec e1					pop hl    ; get malloc so we can push it 
46ed e5					push hl   ; save so we can free it afterwards 
46ee			 
46ee cd fe 1b				call forth_push_str 
46f1			 
46f1 e1					pop hl 
46f2 cd 9a 12				call free 
46f5			 
46f5					 
46f5					 
46f5			 
46f5			 
46f5					NEXTW 
46f5 c3 80 1f			jp macro_next 
46f8				endm 
# End of macro NEXTW
46f8			 
46f8			.LEFT: 
46f8				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
46f8 48				db WORD_SYS_CORE+52             
46f9 39 47			dw .RIGHT            
46fb 05				db 4 + 1 
46fc .. 00			db "LEFT",0              
4701				endm 
# End of macro CWHEAD
4701			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | DONE 
4701					if DEBUG_FORTH_WORDS_KEY 
4701						DMARK "LEF" 
4701 f5				push af  
4702 3a 16 47			ld a, (.dmark)  
4705 32 65 ee			ld (debug_mark),a  
4708 3a 17 47			ld a, (.dmark+1)  
470b 32 66 ee			ld (debug_mark+1),a  
470e 3a 18 47			ld a, (.dmark+2)  
4711 32 67 ee			ld (debug_mark+2),a  
4714 18 03			jr .pastdmark  
4716 ..			.dmark: db "LEF"  
4719 f1			.pastdmark: pop af  
471a			endm  
# End of macro DMARK
471a						CALLMONITOR 
471a cd 6f ee			call debug_vector  
471d				endm  
# End of macro CALLMONITOR
471d					endif 
471d			 
471d					 
471d			; TODO check string type 
471d					FORTH_DSP_VALUEHL 
471d cd 95 1d			call macro_dsp_valuehl 
4720				endm 
# End of macro FORTH_DSP_VALUEHL
4720			 
4720 e5					push hl      ; string length 
4721			 
4721					FORTH_DSP_POP 
4721 cd 4d 1e			call macro_forth_dsp_pop 
4724				endm 
# End of macro FORTH_DSP_POP
4724			 
4724					FORTH_DSP_VALUEHL 
4724 cd 95 1d			call macro_dsp_valuehl 
4727				endm 
# End of macro FORTH_DSP_VALUEHL
4727			 
4727 c1					pop bc 
4728			 
4728 11 bb e2				ld de, scratch 
472b ed b0				ldir 
472d 3e 00				ld a, 0 
472f 12					ld (de), a 
4730					 
4730 21 bb e2				ld hl, scratch 
4733 cd fe 1b				call forth_push_str 
4736			 
4736					NEXTW 
4736 c3 80 1f			jp macro_next 
4739				endm 
# End of macro NEXTW
4739			.RIGHT: 
4739				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4739 48				db WORD_SYS_CORE+52             
473a f7 47			dw .STR2NUM            
473c 06				db 5 + 1 
473d .. 00			db "RIGHT",0              
4743				endm 
# End of macro CWHEAD
4743			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | DONE 
4743					if DEBUG_FORTH_WORDS_KEY 
4743						DMARK "RIG" 
4743 f5				push af  
4744 3a 58 47			ld a, (.dmark)  
4747 32 65 ee			ld (debug_mark),a  
474a 3a 59 47			ld a, (.dmark+1)  
474d 32 66 ee			ld (debug_mark+1),a  
4750 3a 5a 47			ld a, (.dmark+2)  
4753 32 67 ee			ld (debug_mark+2),a  
4756 18 03			jr .pastdmark  
4758 ..			.dmark: db "RIG"  
475b f1			.pastdmark: pop af  
475c			endm  
# End of macro DMARK
475c						CALLMONITOR 
475c cd 6f ee			call debug_vector  
475f				endm  
# End of macro CALLMONITOR
475f					endif 
475f			 
475f			; TODO check string type 
475f					FORTH_DSP_VALUEHL 
475f cd 95 1d			call macro_dsp_valuehl 
4762				endm 
# End of macro FORTH_DSP_VALUEHL
4762			 
4762 e5					push hl      ; string length 
4763			 
4763					FORTH_DSP_POP 
4763 cd 4d 1e			call macro_forth_dsp_pop 
4766				endm 
# End of macro FORTH_DSP_POP
4766			 
4766					FORTH_DSP_VALUEHL 
4766 cd 95 1d			call macro_dsp_valuehl 
4769				endm 
# End of macro FORTH_DSP_VALUEHL
4769			 
4769					if DEBUG_FORTH_WORDS 
4769						DMARK "RI1" 
4769 f5				push af  
476a 3a 7e 47			ld a, (.dmark)  
476d 32 65 ee			ld (debug_mark),a  
4770 3a 7f 47			ld a, (.dmark+1)  
4773 32 66 ee			ld (debug_mark+1),a  
4776 3a 80 47			ld a, (.dmark+2)  
4779 32 67 ee			ld (debug_mark+2),a  
477c 18 03			jr .pastdmark  
477e ..			.dmark: db "RI1"  
4781 f1			.pastdmark: pop af  
4782			endm  
# End of macro DMARK
4782						CALLMONITOR 
4782 cd 6f ee			call debug_vector  
4785				endm  
# End of macro CALLMONITOR
4785					endif 
4785					; from the pointer to string get to the end of string 
4785			 
4785 01 ff 00				ld bc, 255 
4788 3e 00				ld a, 0 
478a ed b1				cpir 
478c 2b					dec hl 
478d			 
478d					;  
478d			 
478d					if DEBUG_FORTH_WORDS 
478d						DMARK "RI2" 
478d f5				push af  
478e 3a a2 47			ld a, (.dmark)  
4791 32 65 ee			ld (debug_mark),a  
4794 3a a3 47			ld a, (.dmark+1)  
4797 32 66 ee			ld (debug_mark+1),a  
479a 3a a4 47			ld a, (.dmark+2)  
479d 32 67 ee			ld (debug_mark+2),a  
47a0 18 03			jr .pastdmark  
47a2 ..			.dmark: db "RI2"  
47a5 f1			.pastdmark: pop af  
47a6			endm  
# End of macro DMARK
47a6						CALLMONITOR 
47a6 cd 6f ee			call debug_vector  
47a9				endm  
# End of macro CALLMONITOR
47a9					endif 
47a9			 
47a9 c1					pop bc    ;  length of string to copy 
47aa			 
47aa 79					ld a, c 
47ab eb					ex de, hl 
47ac 21 bb e2				ld hl, scratch  
47af cd f5 0d				call addatohl 
47b2			 
47b2 eb					ex de, hl 
47b3			 
47b3					if DEBUG_FORTH_WORDS 
47b3						DMARK "RI3" 
47b3 f5				push af  
47b4 3a c8 47			ld a, (.dmark)  
47b7 32 65 ee			ld (debug_mark),a  
47ba 3a c9 47			ld a, (.dmark+1)  
47bd 32 66 ee			ld (debug_mark+1),a  
47c0 3a ca 47			ld a, (.dmark+2)  
47c3 32 67 ee			ld (debug_mark+2),a  
47c6 18 03			jr .pastdmark  
47c8 ..			.dmark: db "RI3"  
47cb f1			.pastdmark: pop af  
47cc			endm  
# End of macro DMARK
47cc						CALLMONITOR 
47cc cd 6f ee			call debug_vector  
47cf				endm  
# End of macro CALLMONITOR
47cf					endif 
47cf			 
47cf 03					inc bc 
47d0 ed b8				lddr 
47d2					 
47d2 21 bb e2				ld hl, scratch 
47d5					if DEBUG_FORTH_WORDS 
47d5						DMARK "RI4" 
47d5 f5				push af  
47d6 3a ea 47			ld a, (.dmark)  
47d9 32 65 ee			ld (debug_mark),a  
47dc 3a eb 47			ld a, (.dmark+1)  
47df 32 66 ee			ld (debug_mark+1),a  
47e2 3a ec 47			ld a, (.dmark+2)  
47e5 32 67 ee			ld (debug_mark+2),a  
47e8 18 03			jr .pastdmark  
47ea ..			.dmark: db "RI4"  
47ed f1			.pastdmark: pop af  
47ee			endm  
# End of macro DMARK
47ee						CALLMONITOR 
47ee cd 6f ee			call debug_vector  
47f1				endm  
# End of macro CALLMONITOR
47f1					endif 
47f1 cd fe 1b				call forth_push_str 
47f4			 
47f4			 
47f4					NEXTW 
47f4 c3 80 1f			jp macro_next 
47f7				endm 
# End of macro NEXTW
47f7			 
47f7			 
47f7			.STR2NUM: 
47f7				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
47f7 48				db WORD_SYS_CORE+52             
47f8 83 48			dw .NUM2STR            
47fa 08				db 7 + 1 
47fb .. 00			db "STR2NUM",0              
4803				endm 
# End of macro CWHEAD
4803			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4803			 
4803			 
4803			; TODO STR type check to do 
4803					if DEBUG_FORTH_WORDS_KEY 
4803						DMARK "S2N" 
4803 f5				push af  
4804 3a 18 48			ld a, (.dmark)  
4807 32 65 ee			ld (debug_mark),a  
480a 3a 19 48			ld a, (.dmark+1)  
480d 32 66 ee			ld (debug_mark+1),a  
4810 3a 1a 48			ld a, (.dmark+2)  
4813 32 67 ee			ld (debug_mark+2),a  
4816 18 03			jr .pastdmark  
4818 ..			.dmark: db "S2N"  
481b f1			.pastdmark: pop af  
481c			endm  
# End of macro DMARK
481c						CALLMONITOR 
481c cd 6f ee			call debug_vector  
481f				endm  
# End of macro CALLMONITOR
481f					endif 
481f			 
481f					;FORTH_DSP 
481f					FORTH_DSP_VALUE 
481f cd 7e 1d			call macro_forth_dsp_value 
4822				endm 
# End of macro FORTH_DSP_VALUE
4822					;inc hl 
4822			 
4822 eb					ex de, hl 
4823					if DEBUG_FORTH_WORDS 
4823						DMARK "S2a" 
4823 f5				push af  
4824 3a 38 48			ld a, (.dmark)  
4827 32 65 ee			ld (debug_mark),a  
482a 3a 39 48			ld a, (.dmark+1)  
482d 32 66 ee			ld (debug_mark+1),a  
4830 3a 3a 48			ld a, (.dmark+2)  
4833 32 67 ee			ld (debug_mark+2),a  
4836 18 03			jr .pastdmark  
4838 ..			.dmark: db "S2a"  
483b f1			.pastdmark: pop af  
483c			endm  
# End of macro DMARK
483c						CALLMONITOR 
483c cd 6f ee			call debug_vector  
483f				endm  
# End of macro CALLMONITOR
483f					endif 
483f cd f2 10				call string_to_uint16 
4842			 
4842					if DEBUG_FORTH_WORDS 
4842						DMARK "S2b" 
4842 f5				push af  
4843 3a 57 48			ld a, (.dmark)  
4846 32 65 ee			ld (debug_mark),a  
4849 3a 58 48			ld a, (.dmark+1)  
484c 32 66 ee			ld (debug_mark+1),a  
484f 3a 59 48			ld a, (.dmark+2)  
4852 32 67 ee			ld (debug_mark+2),a  
4855 18 03			jr .pastdmark  
4857 ..			.dmark: db "S2b"  
485a f1			.pastdmark: pop af  
485b			endm  
# End of macro DMARK
485b						CALLMONITOR 
485b cd 6f ee			call debug_vector  
485e				endm  
# End of macro CALLMONITOR
485e					endif 
485e			;		push hl 
485e					FORTH_DSP_POP 
485e cd 4d 1e			call macro_forth_dsp_pop 
4861				endm 
# End of macro FORTH_DSP_POP
4861			;		pop hl 
4861					 
4861					if DEBUG_FORTH_WORDS 
4861						DMARK "S2b" 
4861 f5				push af  
4862 3a 76 48			ld a, (.dmark)  
4865 32 65 ee			ld (debug_mark),a  
4868 3a 77 48			ld a, (.dmark+1)  
486b 32 66 ee			ld (debug_mark+1),a  
486e 3a 78 48			ld a, (.dmark+2)  
4871 32 67 ee			ld (debug_mark+2),a  
4874 18 03			jr .pastdmark  
4876 ..			.dmark: db "S2b"  
4879 f1			.pastdmark: pop af  
487a			endm  
# End of macro DMARK
487a						CALLMONITOR 
487a cd 6f ee			call debug_vector  
487d				endm  
# End of macro CALLMONITOR
487d					endif 
487d cd 90 1b				call forth_push_numhl	 
4880			 
4880				 
4880				       NEXTW 
4880 c3 80 1f			jp macro_next 
4883				endm 
# End of macro NEXTW
4883			.NUM2STR: 
4883				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4883 48				db WORD_SYS_CORE+52             
4884 15 49			dw .CONCAT            
4886 08				db 7 + 1 
4887 .. 00			db "NUM2STR",0              
488f				endm 
# End of macro CWHEAD
488f			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
488f			 
488f			;		; malloc a string to target 
488f			;		ld hl, 10     ; TODO max string size should be fine 
488f			;		call malloc 
488f			;		push hl    ; save malloc location 
488f			; 
488f			; 
488f			;; TODO check int type 
488f					if DEBUG_FORTH_WORDS_KEY 
488f						DMARK "N2S" 
488f f5				push af  
4890 3a a4 48			ld a, (.dmark)  
4893 32 65 ee			ld (debug_mark),a  
4896 3a a5 48			ld a, (.dmark+1)  
4899 32 66 ee			ld (debug_mark+1),a  
489c 3a a6 48			ld a, (.dmark+2)  
489f 32 67 ee			ld (debug_mark+2),a  
48a2 18 03			jr .pastdmark  
48a4 ..			.dmark: db "N2S"  
48a7 f1			.pastdmark: pop af  
48a8			endm  
# End of macro DMARK
48a8						CALLMONITOR 
48a8 cd 6f ee			call debug_vector  
48ab				endm  
# End of macro CALLMONITOR
48ab					endif 
48ab			 
48ab					FORTH_DSP_VALUEHL 
48ab cd 95 1d			call macro_dsp_valuehl 
48ae				endm 
# End of macro FORTH_DSP_VALUEHL
48ae			 
48ae					if DEBUG_FORTH_WORDS 
48ae						DMARK "NS1" 
48ae f5				push af  
48af 3a c3 48			ld a, (.dmark)  
48b2 32 65 ee			ld (debug_mark),a  
48b5 3a c4 48			ld a, (.dmark+1)  
48b8 32 66 ee			ld (debug_mark+1),a  
48bb 3a c5 48			ld a, (.dmark+2)  
48be 32 67 ee			ld (debug_mark+2),a  
48c1 18 03			jr .pastdmark  
48c3 ..			.dmark: db "NS1"  
48c6 f1			.pastdmark: pop af  
48c7			endm  
# End of macro DMARK
48c7						CALLMONITOR 
48c7 cd 6f ee			call debug_vector  
48ca				endm  
# End of macro CALLMONITOR
48ca					endif 
48ca					FORTH_DSP_POP 
48ca cd 4d 1e			call macro_forth_dsp_pop 
48cd				endm 
# End of macro FORTH_DSP_POP
48cd			 
48cd eb					ex de, hl 
48ce 21 bb e2				ld hl, scratch 
48d1					if DEBUG_FORTH_WORDS 
48d1						DMARK "NS2" 
48d1 f5				push af  
48d2 3a e6 48			ld a, (.dmark)  
48d5 32 65 ee			ld (debug_mark),a  
48d8 3a e7 48			ld a, (.dmark+1)  
48db 32 66 ee			ld (debug_mark+1),a  
48de 3a e8 48			ld a, (.dmark+2)  
48e1 32 67 ee			ld (debug_mark+2),a  
48e4 18 03			jr .pastdmark  
48e6 ..			.dmark: db "NS2"  
48e9 f1			.pastdmark: pop af  
48ea			endm  
# End of macro DMARK
48ea						CALLMONITOR 
48ea cd 6f ee			call debug_vector  
48ed				endm  
# End of macro CALLMONITOR
48ed					endif 
48ed cd 0a 11				call uitoa_16 
48f0 21 bb e2				ld hl, scratch 
48f3					if DEBUG_FORTH_WORDS 
48f3						DMARK "NS3" 
48f3 f5				push af  
48f4 3a 08 49			ld a, (.dmark)  
48f7 32 65 ee			ld (debug_mark),a  
48fa 3a 09 49			ld a, (.dmark+1)  
48fd 32 66 ee			ld (debug_mark+1),a  
4900 3a 0a 49			ld a, (.dmark+2)  
4903 32 67 ee			ld (debug_mark+2),a  
4906 18 03			jr .pastdmark  
4908 ..			.dmark: db "NS3"  
490b f1			.pastdmark: pop af  
490c			endm  
# End of macro DMARK
490c						CALLMONITOR 
490c cd 6f ee			call debug_vector  
490f				endm  
# End of macro CALLMONITOR
490f					endif 
490f cd fe 1b				call forth_push_str 
4912			;		ld a, l 
4912			;		call DispAToASCII   
4912			;;TODO need to chage above call to dump into string 
4912			; 
4912			; 
4912			 
4912				       NEXTW 
4912 c3 80 1f			jp macro_next 
4915				endm 
# End of macro NEXTW
4915			 
4915			.CONCAT: 
4915				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4915 48				db WORD_SYS_CORE+52             
4916 c8 49			dw .FIND            
4918 07				db 6 + 1 
4919 .. 00			db "CONCAT",0              
4920				endm 
# End of macro CWHEAD
4920			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4920			 
4920			; TODO check string type 
4920			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4920			 
4920					if DEBUG_FORTH_WORDS_KEY 
4920						DMARK "CON" 
4920 f5				push af  
4921 3a 35 49			ld a, (.dmark)  
4924 32 65 ee			ld (debug_mark),a  
4927 3a 36 49			ld a, (.dmark+1)  
492a 32 66 ee			ld (debug_mark+1),a  
492d 3a 37 49			ld a, (.dmark+2)  
4930 32 67 ee			ld (debug_mark+2),a  
4933 18 03			jr .pastdmark  
4935 ..			.dmark: db "CON"  
4938 f1			.pastdmark: pop af  
4939			endm  
# End of macro DMARK
4939						CALLMONITOR 
4939 cd 6f ee			call debug_vector  
493c				endm  
# End of macro CALLMONITOR
493c					endif 
493c			 
493c			 
493c					FORTH_DSP_VALUE 
493c cd 7e 1d			call macro_forth_dsp_value 
493f				endm 
# End of macro FORTH_DSP_VALUE
493f e5					push hl   ; s2 
4940			 
4940					FORTH_DSP_POP 
4940 cd 4d 1e			call macro_forth_dsp_pop 
4943				endm 
# End of macro FORTH_DSP_POP
4943			 
4943					FORTH_DSP_VALUE 
4943 cd 7e 1d			call macro_forth_dsp_value 
4946				endm 
# End of macro FORTH_DSP_VALUE
4946			 
4946 e5					push hl   ; s1 
4947			 
4947					FORTH_DSP_POP 
4947 cd 4d 1e			call macro_forth_dsp_pop 
494a				endm 
# End of macro FORTH_DSP_POP
494a					 
494a			 
494a					; copy s1 
494a			 
494a				 
494a					; save ptr 
494a e1					pop hl  
494b e5					push hl 
494c 3e 00				ld a, 0 
494e cd 66 11				call strlent 
4951					;inc hl    ; zer0 
4951 06 00				ld b, 0 
4953 4d					ld c, l 
4954 e1					pop hl		 
4955 11 bb e2				ld de, scratch	 
4958					if DEBUG_FORTH_WORDS 
4958						DMARK "CO1" 
4958 f5				push af  
4959 3a 6d 49			ld a, (.dmark)  
495c 32 65 ee			ld (debug_mark),a  
495f 3a 6e 49			ld a, (.dmark+1)  
4962 32 66 ee			ld (debug_mark+1),a  
4965 3a 6f 49			ld a, (.dmark+2)  
4968 32 67 ee			ld (debug_mark+2),a  
496b 18 03			jr .pastdmark  
496d ..			.dmark: db "CO1"  
4970 f1			.pastdmark: pop af  
4971			endm  
# End of macro DMARK
4971						CALLMONITOR 
4971 cd 6f ee			call debug_vector  
4974				endm  
# End of macro CALLMONITOR
4974					endif 
4974 ed b0				ldir 
4976			 
4976 e1					pop hl 
4977 e5					push hl 
4978 d5					push de 
4979			 
4979			 
4979 3e 00				ld a, 0 
497b cd 66 11				call strlent 
497e 23					inc hl    ; zer0 
497f 23					inc hl 
4980 06 00				ld b, 0 
4982 4d					ld c, l 
4983 d1					pop de 
4984 e1					pop hl		 
4985					if DEBUG_FORTH_WORDS 
4985						DMARK "CO2" 
4985 f5				push af  
4986 3a 9a 49			ld a, (.dmark)  
4989 32 65 ee			ld (debug_mark),a  
498c 3a 9b 49			ld a, (.dmark+1)  
498f 32 66 ee			ld (debug_mark+1),a  
4992 3a 9c 49			ld a, (.dmark+2)  
4995 32 67 ee			ld (debug_mark+2),a  
4998 18 03			jr .pastdmark  
499a ..			.dmark: db "CO2"  
499d f1			.pastdmark: pop af  
499e			endm  
# End of macro DMARK
499e						CALLMONITOR 
499e cd 6f ee			call debug_vector  
49a1				endm  
# End of macro CALLMONITOR
49a1					endif 
49a1 ed b0				ldir 
49a3			 
49a3			 
49a3			 
49a3 21 bb e2				ld hl, scratch 
49a6					if DEBUG_FORTH_WORDS 
49a6						DMARK "CO5" 
49a6 f5				push af  
49a7 3a bb 49			ld a, (.dmark)  
49aa 32 65 ee			ld (debug_mark),a  
49ad 3a bc 49			ld a, (.dmark+1)  
49b0 32 66 ee			ld (debug_mark+1),a  
49b3 3a bd 49			ld a, (.dmark+2)  
49b6 32 67 ee			ld (debug_mark+2),a  
49b9 18 03			jr .pastdmark  
49bb ..			.dmark: db "CO5"  
49be f1			.pastdmark: pop af  
49bf			endm  
# End of macro DMARK
49bf						CALLMONITOR 
49bf cd 6f ee			call debug_vector  
49c2				endm  
# End of macro CALLMONITOR
49c2					endif 
49c2			 
49c2 cd fe 1b				call forth_push_str 
49c5			 
49c5			 
49c5			 
49c5			 
49c5				       NEXTW 
49c5 c3 80 1f			jp macro_next 
49c8				endm 
# End of macro NEXTW
49c8			 
49c8			 
49c8			.FIND: 
49c8				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
49c8 4b				db WORD_SYS_CORE+55             
49c9 86 4a			dw .LEN            
49cb 05				db 4 + 1 
49cc .. 00			db "FIND",0              
49d1				endm 
# End of macro CWHEAD
49d1			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
49d1			 
49d1					if DEBUG_FORTH_WORDS_KEY 
49d1						DMARK "FND" 
49d1 f5				push af  
49d2 3a e6 49			ld a, (.dmark)  
49d5 32 65 ee			ld (debug_mark),a  
49d8 3a e7 49			ld a, (.dmark+1)  
49db 32 66 ee			ld (debug_mark+1),a  
49de 3a e8 49			ld a, (.dmark+2)  
49e1 32 67 ee			ld (debug_mark+2),a  
49e4 18 03			jr .pastdmark  
49e6 ..			.dmark: db "FND"  
49e9 f1			.pastdmark: pop af  
49ea			endm  
# End of macro DMARK
49ea						CALLMONITOR 
49ea cd 6f ee			call debug_vector  
49ed				endm  
# End of macro CALLMONITOR
49ed					endif 
49ed			 
49ed			; TODO check string type 
49ed					FORTH_DSP_VALUE 
49ed cd 7e 1d			call macro_forth_dsp_value 
49f0				endm 
# End of macro FORTH_DSP_VALUE
49f0			 
49f0 e5					push hl    
49f1 7e					ld a,(hl)    ; char to find   
49f2			; TODO change char to substr 
49f2			 
49f2 f5					push af 
49f3					 
49f3			 
49f3			 
49f3					if DEBUG_FORTH_WORDS 
49f3						DMARK "FN1" 
49f3 f5				push af  
49f4 3a 08 4a			ld a, (.dmark)  
49f7 32 65 ee			ld (debug_mark),a  
49fa 3a 09 4a			ld a, (.dmark+1)  
49fd 32 66 ee			ld (debug_mark+1),a  
4a00 3a 0a 4a			ld a, (.dmark+2)  
4a03 32 67 ee			ld (debug_mark+2),a  
4a06 18 03			jr .pastdmark  
4a08 ..			.dmark: db "FN1"  
4a0b f1			.pastdmark: pop af  
4a0c			endm  
# End of macro DMARK
4a0c						CALLMONITOR 
4a0c cd 6f ee			call debug_vector  
4a0f				endm  
# End of macro CALLMONITOR
4a0f					endif 
4a0f			 
4a0f					FORTH_DSP_POP 
4a0f cd 4d 1e			call macro_forth_dsp_pop 
4a12				endm 
# End of macro FORTH_DSP_POP
4a12			 
4a12					; string to search 
4a12			 
4a12					FORTH_DSP_VALUE 
4a12 cd 7e 1d			call macro_forth_dsp_value 
4a15				endm 
# End of macro FORTH_DSP_VALUE
4a15			 
4a15 d1					pop de  ; d is char to find  
4a16			 
4a16					if DEBUG_FORTH_WORDS 
4a16						DMARK "FN2" 
4a16 f5				push af  
4a17 3a 2b 4a			ld a, (.dmark)  
4a1a 32 65 ee			ld (debug_mark),a  
4a1d 3a 2c 4a			ld a, (.dmark+1)  
4a20 32 66 ee			ld (debug_mark+1),a  
4a23 3a 2d 4a			ld a, (.dmark+2)  
4a26 32 67 ee			ld (debug_mark+2),a  
4a29 18 03			jr .pastdmark  
4a2b ..			.dmark: db "FN2"  
4a2e f1			.pastdmark: pop af  
4a2f			endm  
# End of macro DMARK
4a2f						CALLMONITOR 
4a2f cd 6f ee			call debug_vector  
4a32				endm  
# End of macro CALLMONITOR
4a32					endif 
4a32					 
4a32 01 00 00				ld bc, 0 
4a35 7e			.findchar:      ld a,(hl) 
4a36 fe 00				cp 0   		 
4a38 28 27				jr z, .finddone     
4a3a ba					cp d 
4a3b 28 20				jr z, .foundchar 
4a3d 03					inc bc 
4a3e 23					inc hl 
4a3f					if DEBUG_FORTH_WORDS 
4a3f						DMARK "FN3" 
4a3f f5				push af  
4a40 3a 54 4a			ld a, (.dmark)  
4a43 32 65 ee			ld (debug_mark),a  
4a46 3a 55 4a			ld a, (.dmark+1)  
4a49 32 66 ee			ld (debug_mark+1),a  
4a4c 3a 56 4a			ld a, (.dmark+2)  
4a4f 32 67 ee			ld (debug_mark+2),a  
4a52 18 03			jr .pastdmark  
4a54 ..			.dmark: db "FN3"  
4a57 f1			.pastdmark: pop af  
4a58			endm  
# End of macro DMARK
4a58						CALLMONITOR 
4a58 cd 6f ee			call debug_vector  
4a5b				endm  
# End of macro CALLMONITOR
4a5b					endif 
4a5b 18 d8				jr .findchar 
4a5d			 
4a5d			 
4a5d c5			.foundchar:	push bc 
4a5e e1					pop hl 
4a5f 18 03				jr .findexit 
4a61			 
4a61			 
4a61							 
4a61			 
4a61			.finddone:     ; got to end of string with no find 
4a61 21 00 00				ld hl, 0 
4a64			.findexit: 
4a64			 
4a64					if DEBUG_FORTH_WORDS 
4a64						DMARK "FNd" 
4a64 f5				push af  
4a65 3a 79 4a			ld a, (.dmark)  
4a68 32 65 ee			ld (debug_mark),a  
4a6b 3a 7a 4a			ld a, (.dmark+1)  
4a6e 32 66 ee			ld (debug_mark+1),a  
4a71 3a 7b 4a			ld a, (.dmark+2)  
4a74 32 67 ee			ld (debug_mark+2),a  
4a77 18 03			jr .pastdmark  
4a79 ..			.dmark: db "FNd"  
4a7c f1			.pastdmark: pop af  
4a7d			endm  
# End of macro DMARK
4a7d						CALLMONITOR 
4a7d cd 6f ee			call debug_vector  
4a80				endm  
# End of macro CALLMONITOR
4a80					endif 
4a80 cd 90 1b			call forth_push_numhl 
4a83			 
4a83				       NEXTW 
4a83 c3 80 1f			jp macro_next 
4a86				endm 
# End of macro NEXTW
4a86			 
4a86			.LEN: 
4a86				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4a86 4c				db WORD_SYS_CORE+56             
4a87 f0 4a			dw .ASC            
4a89 06				db 5 + 1 
4a8a .. 00			db "COUNT",0              
4a90				endm 
# End of macro CWHEAD
4a90			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4a90			 
4a90					if DEBUG_FORTH_WORDS_KEY 
4a90						DMARK "CNT" 
4a90 f5				push af  
4a91 3a a5 4a			ld a, (.dmark)  
4a94 32 65 ee			ld (debug_mark),a  
4a97 3a a6 4a			ld a, (.dmark+1)  
4a9a 32 66 ee			ld (debug_mark+1),a  
4a9d 3a a7 4a			ld a, (.dmark+2)  
4aa0 32 67 ee			ld (debug_mark+2),a  
4aa3 18 03			jr .pastdmark  
4aa5 ..			.dmark: db "CNT"  
4aa8 f1			.pastdmark: pop af  
4aa9			endm  
# End of macro DMARK
4aa9						CALLMONITOR 
4aa9 cd 6f ee			call debug_vector  
4aac				endm  
# End of macro CALLMONITOR
4aac					endif 
4aac			; TODO check string type 
4aac					FORTH_DSP_VALUE 
4aac cd 7e 1d			call macro_forth_dsp_value 
4aaf				endm 
# End of macro FORTH_DSP_VALUE
4aaf			 
4aaf			 
4aaf					if DEBUG_FORTH_WORDS 
4aaf						DMARK "CN?" 
4aaf f5				push af  
4ab0 3a c4 4a			ld a, (.dmark)  
4ab3 32 65 ee			ld (debug_mark),a  
4ab6 3a c5 4a			ld a, (.dmark+1)  
4ab9 32 66 ee			ld (debug_mark+1),a  
4abc 3a c6 4a			ld a, (.dmark+2)  
4abf 32 67 ee			ld (debug_mark+2),a  
4ac2 18 03			jr .pastdmark  
4ac4 ..			.dmark: db "CN?"  
4ac7 f1			.pastdmark: pop af  
4ac8			endm  
# End of macro DMARK
4ac8						CALLMONITOR 
4ac8 cd 6f ee			call debug_vector  
4acb				endm  
# End of macro CALLMONITOR
4acb					endif 
4acb cd 5b 11				call strlenz 
4ace					if DEBUG_FORTH_WORDS 
4ace						DMARK "CNl" 
4ace f5				push af  
4acf 3a e3 4a			ld a, (.dmark)  
4ad2 32 65 ee			ld (debug_mark),a  
4ad5 3a e4 4a			ld a, (.dmark+1)  
4ad8 32 66 ee			ld (debug_mark+1),a  
4adb 3a e5 4a			ld a, (.dmark+2)  
4ade 32 67 ee			ld (debug_mark+2),a  
4ae1 18 03			jr .pastdmark  
4ae3 ..			.dmark: db "CNl"  
4ae6 f1			.pastdmark: pop af  
4ae7			endm  
# End of macro DMARK
4ae7						CALLMONITOR 
4ae7 cd 6f ee			call debug_vector  
4aea				endm  
# End of macro CALLMONITOR
4aea					endif 
4aea			 
4aea cd 90 1b				call forth_push_numhl 
4aed			 
4aed			 
4aed			 
4aed				       NEXTW 
4aed c3 80 1f			jp macro_next 
4af0				endm 
# End of macro NEXTW
4af0			.ASC: 
4af0				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4af0 4d				db WORD_SYS_CORE+57             
4af1 5e 4b			dw .CHR            
4af3 04				db 3 + 1 
4af4 .. 00			db "ASC",0              
4af8				endm 
# End of macro CWHEAD
4af8			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4af8					if DEBUG_FORTH_WORDS_KEY 
4af8						DMARK "ASC" 
4af8 f5				push af  
4af9 3a 0d 4b			ld a, (.dmark)  
4afc 32 65 ee			ld (debug_mark),a  
4aff 3a 0e 4b			ld a, (.dmark+1)  
4b02 32 66 ee			ld (debug_mark+1),a  
4b05 3a 0f 4b			ld a, (.dmark+2)  
4b08 32 67 ee			ld (debug_mark+2),a  
4b0b 18 03			jr .pastdmark  
4b0d ..			.dmark: db "ASC"  
4b10 f1			.pastdmark: pop af  
4b11			endm  
# End of macro DMARK
4b11						CALLMONITOR 
4b11 cd 6f ee			call debug_vector  
4b14				endm  
# End of macro CALLMONITOR
4b14					endif 
4b14					FORTH_DSP_VALUE 
4b14 cd 7e 1d			call macro_forth_dsp_value 
4b17				endm 
# End of macro FORTH_DSP_VALUE
4b17					;v5 FORTH_DSP_VALUE 
4b17			;		inc hl      ; now at start of numeric as string 
4b17			 
4b17 e5					push hl 
4b18			 
4b18					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4b18 cd 4d 1e			call macro_forth_dsp_pop 
4b1b				endm 
# End of macro FORTH_DSP_POP
4b1b			 
4b1b e1					pop hl 
4b1c			 
4b1c					if DEBUG_FORTH_WORDS 
4b1c						DMARK "AS1" 
4b1c f5				push af  
4b1d 3a 31 4b			ld a, (.dmark)  
4b20 32 65 ee			ld (debug_mark),a  
4b23 3a 32 4b			ld a, (.dmark+1)  
4b26 32 66 ee			ld (debug_mark+1),a  
4b29 3a 33 4b			ld a, (.dmark+2)  
4b2c 32 67 ee			ld (debug_mark+2),a  
4b2f 18 03			jr .pastdmark  
4b31 ..			.dmark: db "AS1"  
4b34 f1			.pastdmark: pop af  
4b35			endm  
# End of macro DMARK
4b35						CALLMONITOR 
4b35 cd 6f ee			call debug_vector  
4b38				endm  
# End of macro CALLMONITOR
4b38					endif 
4b38					; push the content of a onto the stack as a value 
4b38			 
4b38 7e					ld a,(hl)   ; get char 
4b39 26 00				ld h,0 
4b3b 6f					ld l,a 
4b3c					if DEBUG_FORTH_WORDS 
4b3c						DMARK "AS2" 
4b3c f5				push af  
4b3d 3a 51 4b			ld a, (.dmark)  
4b40 32 65 ee			ld (debug_mark),a  
4b43 3a 52 4b			ld a, (.dmark+1)  
4b46 32 66 ee			ld (debug_mark+1),a  
4b49 3a 53 4b			ld a, (.dmark+2)  
4b4c 32 67 ee			ld (debug_mark+2),a  
4b4f 18 03			jr .pastdmark  
4b51 ..			.dmark: db "AS2"  
4b54 f1			.pastdmark: pop af  
4b55			endm  
# End of macro DMARK
4b55						CALLMONITOR 
4b55 cd 6f ee			call debug_vector  
4b58				endm  
# End of macro CALLMONITOR
4b58					endif 
4b58 cd 90 1b				call forth_push_numhl 
4b5b			 
4b5b				       NEXTW 
4b5b c3 80 1f			jp macro_next 
4b5e				endm 
# End of macro NEXTW
4b5e			 
4b5e			.CHR: 
4b5e				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4b5e 4d				db WORD_SYS_CORE+57             
4b5f 9a 4b			dw .ENDSTR            
4b61 04				db 3 + 1 
4b62 .. 00			db "CHR",0              
4b66				endm 
# End of macro CWHEAD
4b66			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4b66					if DEBUG_FORTH_WORDS_KEY 
4b66						DMARK "CHR" 
4b66 f5				push af  
4b67 3a 7b 4b			ld a, (.dmark)  
4b6a 32 65 ee			ld (debug_mark),a  
4b6d 3a 7c 4b			ld a, (.dmark+1)  
4b70 32 66 ee			ld (debug_mark+1),a  
4b73 3a 7d 4b			ld a, (.dmark+2)  
4b76 32 67 ee			ld (debug_mark+2),a  
4b79 18 03			jr .pastdmark  
4b7b ..			.dmark: db "CHR"  
4b7e f1			.pastdmark: pop af  
4b7f			endm  
# End of macro DMARK
4b7f						CALLMONITOR 
4b7f cd 6f ee			call debug_vector  
4b82				endm  
# End of macro CALLMONITOR
4b82					endif 
4b82					FORTH_DSP_VALUEHL 
4b82 cd 95 1d			call macro_dsp_valuehl 
4b85				endm 
# End of macro FORTH_DSP_VALUEHL
4b85			 
4b85					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4b85 cd 4d 1e			call macro_forth_dsp_pop 
4b88				endm 
# End of macro FORTH_DSP_POP
4b88			 
4b88					; save asci byte as a zero term string and push string 
4b88			 
4b88 7d					ld a,l 
4b89 32 bb e2				ld (scratch), a 
4b8c			 
4b8c 3e 00				ld a, 0 
4b8e 32 bc e2				ld (scratch+1), a 
4b91			 
4b91 21 bb e2				ld hl, scratch 
4b94 cd fe 1b				call forth_push_str 
4b97			 
4b97			 
4b97				       NEXTW 
4b97 c3 80 1f			jp macro_next 
4b9a				endm 
# End of macro NEXTW
4b9a			 
4b9a			 
4b9a			 
4b9a			 
4b9a			.ENDSTR: 
4b9a			; eof 
4b9a			 
# End of file forth_words_str.asm
4b9a			include "forth_words_key.asm" 
4b9a			 
4b9a			; | ## Keyboard Words 
4b9a			 
4b9a			.KEY: 
4b9a				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
4b9a 3e				db WORD_SYS_CORE+42             
4b9b ca 4b			dw .KEYDB            
4b9d 04				db 3 + 1 
4b9e .. 00			db "KEY",0              
4ba2				endm 
# End of macro CWHEAD
4ba2			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4ba2			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4ba2			; | | Can use something like this to process: 
4ba2			; | | > repeat active . key ?dup if emit then #1 until  
4ba2			 
4ba2					if DEBUG_FORTH_WORDS_KEY 
4ba2						DMARK "KEY" 
4ba2 f5				push af  
4ba3 3a b7 4b			ld a, (.dmark)  
4ba6 32 65 ee			ld (debug_mark),a  
4ba9 3a b8 4b			ld a, (.dmark+1)  
4bac 32 66 ee			ld (debug_mark+1),a  
4baf 3a b9 4b			ld a, (.dmark+2)  
4bb2 32 67 ee			ld (debug_mark+2),a  
4bb5 18 03			jr .pastdmark  
4bb7 ..			.dmark: db "KEY"  
4bba f1			.pastdmark: pop af  
4bbb			endm  
# End of macro DMARK
4bbb						CALLMONITOR 
4bbb cd 6f ee			call debug_vector  
4bbe				endm  
# End of macro CALLMONITOR
4bbe					endif 
4bbe			; TODO currently waits 
4bbe cd 06 63				call cinndb 
4bc1					;call cin_wait 
4bc1 6f					ld l, a 
4bc2 26 00				ld h, 0 
4bc4 cd 90 1b				call forth_push_numhl 
4bc7					NEXTW 
4bc7 c3 80 1f			jp macro_next 
4bca				endm 
# End of macro NEXTW
4bca			.KEYDB: 
4bca				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
4bca 3e				db WORD_SYS_CORE+42             
4bcb fc 4b			dw .WAITK            
4bcd 06				db 5 + 1 
4bce .. 00			db "KEYDB",0              
4bd4				endm 
# End of macro CWHEAD
4bd4			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
4bd4			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4bd4			; | | Can use something like this to process: 
4bd4			; | | > repeat active . key ?dup if emit then #1 until  
4bd4			 
4bd4					if DEBUG_FORTH_WORDS_KEY 
4bd4						DMARK "KEB" 
4bd4 f5				push af  
4bd5 3a e9 4b			ld a, (.dmark)  
4bd8 32 65 ee			ld (debug_mark),a  
4bdb 3a ea 4b			ld a, (.dmark+1)  
4bde 32 66 ee			ld (debug_mark+1),a  
4be1 3a eb 4b			ld a, (.dmark+2)  
4be4 32 67 ee			ld (debug_mark+2),a  
4be7 18 03			jr .pastdmark  
4be9 ..			.dmark: db "KEB"  
4bec f1			.pastdmark: pop af  
4bed			endm  
# End of macro DMARK
4bed						CALLMONITOR 
4bed cd 6f ee			call debug_vector  
4bf0				endm  
# End of macro CALLMONITOR
4bf0					endif 
4bf0			; TODO currently waits 
4bf0 cd 06 63				call cin 
4bf3					;call cin_wait 
4bf3 6f					ld l, a 
4bf4 26 00				ld h, 0 
4bf6 cd 90 1b				call forth_push_numhl 
4bf9					NEXTW 
4bf9 c3 80 1f			jp macro_next 
4bfc				endm 
# End of macro NEXTW
4bfc			.WAITK: 
4bfc				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4bfc 3f				db WORD_SYS_CORE+43             
4bfd 2e 4c			dw .ACCEPT            
4bff 06				db 5 + 1 
4c00 .. 00			db "WAITK",0              
4c06				endm 
# End of macro CWHEAD
4c06			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4c06					if DEBUG_FORTH_WORDS_KEY 
4c06						DMARK "WAI" 
4c06 f5				push af  
4c07 3a 1b 4c			ld a, (.dmark)  
4c0a 32 65 ee			ld (debug_mark),a  
4c0d 3a 1c 4c			ld a, (.dmark+1)  
4c10 32 66 ee			ld (debug_mark+1),a  
4c13 3a 1d 4c			ld a, (.dmark+2)  
4c16 32 67 ee			ld (debug_mark+2),a  
4c19 18 03			jr .pastdmark  
4c1b ..			.dmark: db "WAI"  
4c1e f1			.pastdmark: pop af  
4c1f			endm  
# End of macro DMARK
4c1f						CALLMONITOR 
4c1f cd 6f ee			call debug_vector  
4c22				endm  
# End of macro CALLMONITOR
4c22					endif 
4c22 cd fe 62				call cin_wait 
4c25 6f					ld l, a 
4c26 26 00				ld h, 0 
4c28 cd 90 1b				call forth_push_numhl 
4c2b					NEXTW 
4c2b c3 80 1f			jp macro_next 
4c2e				endm 
# End of macro NEXTW
4c2e			.ACCEPT: 
4c2e				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4c2e 40				db WORD_SYS_CORE+44             
4c2f 8c 4c			dw .EDIT            
4c31 07				db 6 + 1 
4c32 .. 00			db "ACCEPT",0              
4c39				endm 
# End of macro CWHEAD
4c39			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4c39					; TODO crashes on push 
4c39					if DEBUG_FORTH_WORDS_KEY 
4c39						DMARK "ACC" 
4c39 f5				push af  
4c3a 3a 4e 4c			ld a, (.dmark)  
4c3d 32 65 ee			ld (debug_mark),a  
4c40 3a 4f 4c			ld a, (.dmark+1)  
4c43 32 66 ee			ld (debug_mark+1),a  
4c46 3a 50 4c			ld a, (.dmark+2)  
4c49 32 67 ee			ld (debug_mark+2),a  
4c4c 18 03			jr .pastdmark  
4c4e ..			.dmark: db "ACC"  
4c51 f1			.pastdmark: pop af  
4c52			endm  
# End of macro DMARK
4c52						CALLMONITOR 
4c52 cd 6f ee			call debug_vector  
4c55				endm  
# End of macro CALLMONITOR
4c55					endif 
4c55 21 b9 e4				ld hl, os_input 
4c58 3e 00				ld a, 0 
4c5a 77					ld (hl),a 
4c5b 3a 58 ea				ld a,(f_cursor_ptr) 
4c5e 16 64				ld d, 100 
4c60 0e 00				ld c, 0 
4c62 1e 28				ld e, 40 
4c64 cd 22 0e				call input_str 
4c67					; TODO perhaps do a type check and wrap in quotes if not a number 
4c67 21 b9 e4				ld hl, os_input 
4c6a					if DEBUG_FORTH_WORDS 
4c6a						DMARK "AC1" 
4c6a f5				push af  
4c6b 3a 7f 4c			ld a, (.dmark)  
4c6e 32 65 ee			ld (debug_mark),a  
4c71 3a 80 4c			ld a, (.dmark+1)  
4c74 32 66 ee			ld (debug_mark+1),a  
4c77 3a 81 4c			ld a, (.dmark+2)  
4c7a 32 67 ee			ld (debug_mark+2),a  
4c7d 18 03			jr .pastdmark  
4c7f ..			.dmark: db "AC1"  
4c82 f1			.pastdmark: pop af  
4c83			endm  
# End of macro DMARK
4c83						CALLMONITOR 
4c83 cd 6f ee			call debug_vector  
4c86				endm  
# End of macro CALLMONITOR
4c86					endif 
4c86 cd fe 1b				call forth_push_str 
4c89					NEXTW 
4c89 c3 80 1f			jp macro_next 
4c8c				endm 
# End of macro NEXTW
4c8c			 
4c8c			.EDIT: 
4c8c				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4c8c 40				db WORD_SYS_CORE+44             
4c8d 2e 4d			dw .DEDIT            
4c8f 05				db 4 + 1 
4c90 .. 00			db "EDIT",0              
4c95				endm 
# End of macro CWHEAD
4c95			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4c95			 
4c95					; TODO does not copy from stack 
4c95					if DEBUG_FORTH_WORDS_KEY 
4c95						DMARK "EDT" 
4c95 f5				push af  
4c96 3a aa 4c			ld a, (.dmark)  
4c99 32 65 ee			ld (debug_mark),a  
4c9c 3a ab 4c			ld a, (.dmark+1)  
4c9f 32 66 ee			ld (debug_mark+1),a  
4ca2 3a ac 4c			ld a, (.dmark+2)  
4ca5 32 67 ee			ld (debug_mark+2),a  
4ca8 18 03			jr .pastdmark  
4caa ..			.dmark: db "EDT"  
4cad f1			.pastdmark: pop af  
4cae			endm  
# End of macro DMARK
4cae						CALLMONITOR 
4cae cd 6f ee			call debug_vector  
4cb1				endm  
# End of macro CALLMONITOR
4cb1					endif 
4cb1			 
4cb1					;FORTH_DSP 
4cb1					FORTH_DSP_VALUEHL 
4cb1 cd 95 1d			call macro_dsp_valuehl 
4cb4				endm 
# End of macro FORTH_DSP_VALUEHL
4cb4			;		inc hl    ; TODO do type check 
4cb4			 
4cb4			;		call get_word_hl 
4cb4 e5					push hl 
4cb5					if DEBUG_FORTH_WORDS 
4cb5						DMARK "EDp" 
4cb5 f5				push af  
4cb6 3a ca 4c			ld a, (.dmark)  
4cb9 32 65 ee			ld (debug_mark),a  
4cbc 3a cb 4c			ld a, (.dmark+1)  
4cbf 32 66 ee			ld (debug_mark+1),a  
4cc2 3a cc 4c			ld a, (.dmark+2)  
4cc5 32 67 ee			ld (debug_mark+2),a  
4cc8 18 03			jr .pastdmark  
4cca ..			.dmark: db "EDp"  
4ccd f1			.pastdmark: pop af  
4cce			endm  
# End of macro DMARK
4cce						CALLMONITOR 
4cce cd 6f ee			call debug_vector  
4cd1				endm  
# End of macro CALLMONITOR
4cd1					endif 
4cd1				;	ld a, 0 
4cd1 cd 5b 11				call strlenz 
4cd4 23					inc hl 
4cd5			 
4cd5 06 00				ld b, 0 
4cd7 4d					ld c, l 
4cd8			 
4cd8 e1					pop hl 
4cd9 11 b9 e4				ld de, os_input 
4cdc					if DEBUG_FORTH_WORDS_KEY 
4cdc						DMARK "EDc" 
4cdc f5				push af  
4cdd 3a f1 4c			ld a, (.dmark)  
4ce0 32 65 ee			ld (debug_mark),a  
4ce3 3a f2 4c			ld a, (.dmark+1)  
4ce6 32 66 ee			ld (debug_mark+1),a  
4ce9 3a f3 4c			ld a, (.dmark+2)  
4cec 32 67 ee			ld (debug_mark+2),a  
4cef 18 03			jr .pastdmark  
4cf1 ..			.dmark: db "EDc"  
4cf4 f1			.pastdmark: pop af  
4cf5			endm  
# End of macro DMARK
4cf5						CALLMONITOR 
4cf5 cd 6f ee			call debug_vector  
4cf8				endm  
# End of macro CALLMONITOR
4cf8					endif 
4cf8 ed b0				ldir 
4cfa			 
4cfa			 
4cfa 21 b9 e4				ld hl, os_input 
4cfd					;ld a, 0 
4cfd					;ld (hl),a 
4cfd 3a 58 ea				ld a,(f_cursor_ptr) 
4d00 16 64				ld d, 100 
4d02 0e 00				ld c, 0 
4d04 1e 28				ld e, 40 
4d06 cd 22 0e				call input_str 
4d09					; TODO perhaps do a type check and wrap in quotes if not a number 
4d09 21 b9 e4				ld hl, os_input 
4d0c					if DEBUG_FORTH_WORDS 
4d0c						DMARK "ED1" 
4d0c f5				push af  
4d0d 3a 21 4d			ld a, (.dmark)  
4d10 32 65 ee			ld (debug_mark),a  
4d13 3a 22 4d			ld a, (.dmark+1)  
4d16 32 66 ee			ld (debug_mark+1),a  
4d19 3a 23 4d			ld a, (.dmark+2)  
4d1c 32 67 ee			ld (debug_mark+2),a  
4d1f 18 03			jr .pastdmark  
4d21 ..			.dmark: db "ED1"  
4d24 f1			.pastdmark: pop af  
4d25			endm  
# End of macro DMARK
4d25						CALLMONITOR 
4d25 cd 6f ee			call debug_vector  
4d28				endm  
# End of macro CALLMONITOR
4d28					endif 
4d28 cd fe 1b				call forth_push_str 
4d2b					NEXTW 
4d2b c3 80 1f			jp macro_next 
4d2e				endm 
# End of macro NEXTW
4d2e			 
4d2e			.DEDIT: 
4d2e				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4d2e 40				db WORD_SYS_CORE+44             
4d2f 90 4d			dw .ENDKEY            
4d31 06				db 5 + 1 
4d32 .. 00			db "DEDIT",0              
4d38				endm 
# End of macro CWHEAD
4d38			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
4d38			 
4d38					; TODO does not copy from stack 
4d38					if DEBUG_FORTH_WORDS_KEY 
4d38						DMARK "DED" 
4d38 f5				push af  
4d39 3a 4d 4d			ld a, (.dmark)  
4d3c 32 65 ee			ld (debug_mark),a  
4d3f 3a 4e 4d			ld a, (.dmark+1)  
4d42 32 66 ee			ld (debug_mark+1),a  
4d45 3a 4f 4d			ld a, (.dmark+2)  
4d48 32 67 ee			ld (debug_mark+2),a  
4d4b 18 03			jr .pastdmark  
4d4d ..			.dmark: db "DED"  
4d50 f1			.pastdmark: pop af  
4d51			endm  
# End of macro DMARK
4d51						CALLMONITOR 
4d51 cd 6f ee			call debug_vector  
4d54				endm  
# End of macro CALLMONITOR
4d54					endif 
4d54			 
4d54					;FORTH_DSP 
4d54					FORTH_DSP_VALUEHL 
4d54 cd 95 1d			call macro_dsp_valuehl 
4d57				endm 
# End of macro FORTH_DSP_VALUEHL
4d57			;		inc hl    ; TODO do type check 
4d57			 
4d57			;		call get_word_hl 
4d57 e5					push hl 
4d58 e5					push hl 
4d59					FORTH_DSP_POP 
4d59 cd 4d 1e			call macro_forth_dsp_pop 
4d5c				endm 
# End of macro FORTH_DSP_POP
4d5c e1					pop hl 
4d5d					if DEBUG_FORTH_WORDS 
4d5d						DMARK "EDp" 
4d5d f5				push af  
4d5e 3a 72 4d			ld a, (.dmark)  
4d61 32 65 ee			ld (debug_mark),a  
4d64 3a 73 4d			ld a, (.dmark+1)  
4d67 32 66 ee			ld (debug_mark+1),a  
4d6a 3a 74 4d			ld a, (.dmark+2)  
4d6d 32 67 ee			ld (debug_mark+2),a  
4d70 18 03			jr .pastdmark  
4d72 ..			.dmark: db "EDp"  
4d75 f1			.pastdmark: pop af  
4d76			endm  
# End of macro DMARK
4d76						CALLMONITOR 
4d76 cd 6f ee			call debug_vector  
4d79				endm  
# End of macro CALLMONITOR
4d79					endif 
4d79				;	ld a, 0 
4d79 cd 5b 11				call strlenz 
4d7c 23					inc hl 
4d7d			 
4d7d 06 00				ld b, 0 
4d7f 4d					ld c, l 
4d80			 
4d80 e1					pop hl 
4d81			 
4d81					;ld a, 0 
4d81					;ld (hl),a 
4d81 3a 58 ea				ld a,(f_cursor_ptr) 
4d84 16 64				ld d, 100 
4d86 0e 00				ld c, 0 
4d88 1e 28				ld e, 40 
4d8a cd 22 0e				call input_str 
4d8d					; TODO perhaps do a type check and wrap in quotes if not a number 
4d8d					NEXTW 
4d8d c3 80 1f			jp macro_next 
4d90				endm 
# End of macro NEXTW
4d90			 
4d90			 
4d90			.ENDKEY: 
4d90			; eof 
4d90			 
# End of file forth_words_key.asm
4d90			include "forth_words_const.asm" 
4d90			 
4d90			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4d90			 
4d90			 
4d90			.SPITIME: 
4d90				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4d90 77				db WORD_SYS_CORE+99             
4d91 a5 4d			dw .VA            
4d93 08				db 7 + 1 
4d94 .. 00			db "SPITIME",0              
4d9c				endm 
# End of macro CWHEAD
4d9c			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4d9c			; 
4d9c			; | | If using BANK devices then leave as is. 
4d9c			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4d9c			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4d9c			 
4d9c 21 5e ea				ld hl, spi_clktime  
4d9f cd 90 1b				call forth_push_numhl 
4da2			 
4da2					NEXTW 
4da2 c3 80 1f			jp macro_next 
4da5				endm 
# End of macro NEXTW
4da5			 
4da5			 
4da5			.VA: 
4da5				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4da5 77				db WORD_SYS_CORE+99             
4da6 b5 4d			dw .SYMBOL            
4da8 03				db 2 + 1 
4da9 .. 00			db "VA",0              
4dac				endm 
# End of macro CWHEAD
4dac			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4dac 21 22 ea				ld hl, cli_var_array 
4daf cd 90 1b				call forth_push_numhl 
4db2			 
4db2					NEXTW 
4db2 c3 80 1f			jp macro_next 
4db5				endm 
# End of macro NEXTW
4db5			 
4db5			.SYMBOL: 
4db5				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4db5 77				db WORD_SYS_CORE+99             
4db6 bf 4e			dw .ENDCONST            
4db8 07				db 6 + 1 
4db9 .. 00			db "SYMBOL",0              
4dc0				endm 
# End of macro CWHEAD
4dc0			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4dc0			; | 
4dc0			; | | The value is the number reference and the final address is pushed to stack 
4dc0			 
4dc0			; | | ``` 
4dc0			; | | dw sym_table 
4dc0			; | | dw nmi_vector 
4dc0			; | | dw cli_autodisplay 
4dc0			; | | dw cli_data_sp 
4dc0			; | | dw cli_data_stack 
4dc0			; | | dw cli_loop_sp 
4dc0			; | | dw cli_loop_stack 
4dc0			; | | dw cli_var_array 
4dc0			; | | dw cursor_col 
4dc0			; | | dw cursor_ptr 
4dc0			; | | ; 10 
4dc0			; | | dw cursor_row 
4dc0			; | | dw debug_mark 
4dc0			; | | dw display_fb0 
4dc0			; | | dw display_fb1 
4dc0			; | | dw display_fb2 
4dc0			; | | dw display_fb3 
4dc0			; | | dw display_fb_active 
4dc0			; | | dw execscratch 
4dc0			; | | dw f_cursor_ptr 
4dc0			; | | dw hardware_word 
4dc0			; | | ;20 
4dc0			; | | dw input_at_cursor 
4dc0			; | | dw input_at_pos 
4dc0			; | | dw input_cur_flash 
4dc0			; | | dw input_cur_onoff 
4dc0			; | | dw input_cursor 
4dc0			; | | dw input_display_size 
4dc0			; | | dw input_len 
4dc0			; | | dw input_ptr 
4dc0			; | | dw input_size 
4dc0			; | | dw input_start 
4dc0			; | | ; 30 
4dc0			; | | dw input_str 
4dc0			; | | dw input_under_cursor 
4dc0			; | | dw os_cli_cmd 
4dc0			; | | dw os_cur_ptr 
4dc0			; | | dw os_current_i 
4dc0			; | | dw os_input 
4dc0			; | | dw os_last_cmd 
4dc0			; | | dw os_last_new_uword 
4dc0			; | | dw debug_vector 
4dc0			; | | dw os_view_hl 
4dc0			; | | ;40 
4dc0			; | | dw os_word_scratch 
4dc0			; | | dw portbctl 
4dc0			; | | dw portbdata 
4dc0			; | | dw spi_cartdev 
4dc0			; | | dw spi_cartdev2 
4dc0			; | | dw spi_clktime 
4dc0			; | | dw spi_device 
4dc0			; | | dw spi_device_id 
4dc0			; | | dw spi_portbyte 
4dc0			; | | dw stackstore 
4dc0			; | | ; 50 
4dc0			; | | if STORAGE_SE 
4dc0			; | | dw storage_actl 
4dc0			; | | dw storage_adata 
4dc0			; | | else 
4dc0			; | | dw 0 
4dc0			; | | dw 0 
4dc0			; | | endif 
4dc0			; | | dw storage_append 
4dc0			; | | if STORAGE_SE 
4dc0			; | | dw storage_bctl 
4dc0			; | | else 
4dc0			; | | dw 0 
4dc0			; | | endif 
4dc0			; | | dw store_bank_active 
4dc0			; | | dw store_filecache 
4dc0			; | | dw store_longread 
4dc0			; | | dw store_openaddr 
4dc0			; | | dw store_openext 
4dc0			; | | dw store_openmaxext 
4dc0			; | | ; 60 
4dc0			; | | dw store_page 
4dc0			; | | dw store_readbuf 
4dc0			; | | dw store_readcont 
4dc0			; | | dw store_readptr 
4dc0			; | | dw store_tmpext 
4dc0			; | | dw store_tmpid 
4dc0			; | | dw store_tmppageid 
4dc0			; | | dw malloc 
4dc0			; | | dw free 
4dc0			; | | dw cin 
4dc0			; | | ; 70 
4dc0			; | | dw cin_wait 
4dc0			; | | dw forth_push_numhl 
4dc0			; | | dw forth_push_str 
4dc0			; | | ``` 
4dc0			 
4dc0					if DEBUG_FORTH_WORDS_KEY 
4dc0						DMARK "SYM" 
4dc0 f5				push af  
4dc1 3a d5 4d			ld a, (.dmark)  
4dc4 32 65 ee			ld (debug_mark),a  
4dc7 3a d6 4d			ld a, (.dmark+1)  
4dca 32 66 ee			ld (debug_mark+1),a  
4dcd 3a d7 4d			ld a, (.dmark+2)  
4dd0 32 67 ee			ld (debug_mark+2),a  
4dd3 18 03			jr .pastdmark  
4dd5 ..			.dmark: db "SYM"  
4dd8 f1			.pastdmark: pop af  
4dd9			endm  
# End of macro DMARK
4dd9						CALLMONITOR 
4dd9 cd 6f ee			call debug_vector  
4ddc				endm  
# End of macro CALLMONITOR
4ddc					endif 
4ddc			 
4ddc					FORTH_DSP_VALUEHL 
4ddc cd 95 1d			call macro_dsp_valuehl 
4ddf				endm 
# End of macro FORTH_DSP_VALUEHL
4ddf			 
4ddf 7d					ld a, l     
4de0			 
4de0			 
4de0					if DEBUG_FORTH_WORDS 
4de0						DMARK "SY1" 
4de0 f5				push af  
4de1 3a f5 4d			ld a, (.dmark)  
4de4 32 65 ee			ld (debug_mark),a  
4de7 3a f6 4d			ld a, (.dmark+1)  
4dea 32 66 ee			ld (debug_mark+1),a  
4ded 3a f7 4d			ld a, (.dmark+2)  
4df0 32 67 ee			ld (debug_mark+2),a  
4df3 18 03			jr .pastdmark  
4df5 ..			.dmark: db "SY1"  
4df8 f1			.pastdmark: pop af  
4df9			endm  
# End of macro DMARK
4df9						CALLMONITOR 
4df9 cd 6f ee			call debug_vector  
4dfc				endm  
# End of macro CALLMONITOR
4dfc					endif 
4dfc					 
4dfc f5					push af	 
4dfd					FORTH_DSP_POP 
4dfd cd 4d 1e			call macro_forth_dsp_pop 
4e00				endm 
# End of macro FORTH_DSP_POP
4e00 f1					pop af 
4e01			 
4e01 cb 27				sla a  
4e03				 
4e03					 
4e03					if DEBUG_FORTH_WORDS 
4e03						DMARK "SY" 
4e03 f5				push af  
4e04 3a 18 4e			ld a, (.dmark)  
4e07 32 65 ee			ld (debug_mark),a  
4e0a 3a 19 4e			ld a, (.dmark+1)  
4e0d 32 66 ee			ld (debug_mark+1),a  
4e10 3a 1a 4e			ld a, (.dmark+2)  
4e13 32 67 ee			ld (debug_mark+2),a  
4e16 18 02			jr .pastdmark  
4e18 ..			.dmark: db "SY"  
4e1a f1			.pastdmark: pop af  
4e1b			endm  
# End of macro DMARK
4e1b						CALLMONITOR 
4e1b cd 6f ee			call debug_vector  
4e1e				endm  
# End of macro CALLMONITOR
4e1e					endif 
4e1e			 
4e1e 21 2d 4e				ld hl, sym_table 
4e21 cd f5 0d				call addatohl 
4e24 cd 02 1f				call loadwordinhl 
4e27 cd 90 1b				call forth_push_numhl 
4e2a			 
4e2a			 
4e2a				       NEXTW 
4e2a c3 80 1f			jp macro_next 
4e2d				endm 
# End of macro NEXTW
4e2d			 
4e2d			sym_table: 
4e2d			 
4e2d			; 0 
4e2d 2d 4e		dw sym_table 
4e2f 72 ee		dw nmi_vector 
4e31 36 ea		dw cli_autodisplay 
4e33 e8 e9		dw cli_data_sp 
4e35 22 e8		dw cli_data_stack 
4e37 ea e9		dw cli_loop_sp 
4e39 24 e9		dw cli_loop_stack 
4e3b 22 ea		dw cli_var_array 
4e3d bf eb		dw cursor_col 
4e3f bd eb		dw cursor_ptr 
4e41			; 10 
4e41 be eb		dw cursor_row 
4e43 65 ee		dw debug_mark 
4e45 ab ed		dw display_fb0 
4e47 0a ed		dw display_fb1 
4e49 c8 eb		dw display_fb2 
4e4b 69 ec		dw display_fb3 
4e4d c6 eb		dw display_fb_active 
4e4f ba e3		dw execscratch 
4e51 58 ea		dw f_cursor_ptr 
4e53 75 ee		dw hardware_word 
4e55			;20 
4e55 5c ee		dw input_at_cursor 
4e57 5e ee		dw input_at_pos 
4e59 5a ee		dw input_cur_flash 
4e5b 59 ee		dw input_cur_onoff 
4e5d 4f ee		dw input_cursor 
4e5f 5f ee		dw input_display_size 
4e61 54 ee		dw input_len 
4e63 63 ee		dw input_ptr 
4e65 60 ee		dw input_size 
4e67 61 ee		dw input_start 
4e69			; 30 
4e69 22 0e		dw input_str 
4e6b 5d ee		dw input_under_cursor 
4e6d e2 e5		dw os_cli_cmd 
4e6f de e5		dw os_cur_ptr 
4e71 e0 e5		dw os_current_i 
4e73 b9 e4		dw os_input 
4e75 e1 e6		dw os_last_cmd 
4e77 b8 e5		dw os_last_new_uword 
4e79 6f ee		dw debug_vector 
4e7b 9d e2		dw os_view_hl 
4e7d			;40 
4e7d c0 e5		dw os_word_scratch 
4e7f c3 00		dw portbctl 
4e81 c1 00		dw portbdata 
4e83 5d ea		dw spi_cartdev 
4e85 5c ea		dw spi_cartdev2 
4e87 5e ea		dw spi_clktime 
4e89 5a ea		dw spi_device 
4e8b 59 ea		dw spi_device_id 
4e8d 5b ea		dw spi_portbyte 
4e8f a1 eb		dw stackstore 
4e91			; 50 
4e91			if STORAGE_SE 
4e91			dw storage_actl 
4e91			dw storage_adata 
4e91			else 
4e91 00 00		dw 0 
4e93 00 00		dw 0 
4e95			endif 
4e95 77 09		dw storage_append 
4e97			if STORAGE_SE 
4e97			dw storage_bctl 
4e97			else 
4e97 00 00		dw 0 
4e99			endif 
4e99 8d eb		dw store_bank_active 
4e9b 61 ea		dw store_filecache 
4e9d 6f ea		dw store_longread 
4e9f 65 ea		dw store_openaddr 
4ea1 64 ea		dw store_openext 
4ea3 63 ea		dw store_openmaxext 
4ea5			; 60 
4ea5 74 ea		dw store_page 
4ea7 70 ea		dw store_readbuf 
4ea9 67 ea		dw store_readcont 
4eab 72 ea		dw store_readptr 
4ead 67 ea		dw store_tmpext 
4eaf 68 ea		dw store_tmpid 
4eb1 5f ea		dw store_tmppageid 
4eb3 d0 11		dw malloc 
4eb5 9a 12		dw free 
4eb7 06 63		dw cin 
4eb9			; 70 
4eb9 fe 62		dw cin_wait 
4ebb 90 1b		dw forth_push_numhl 
4ebd fe 1b		dw forth_push_str 
4ebf			 
4ebf			 
4ebf			.ENDCONST: 
4ebf			 
4ebf			; eof 
4ebf			 
4ebf			 
# End of file forth_words_const.asm
4ebf			 
4ebf			if STORAGE_SE 
4ebf			   	include "forth_words_storage.asm" 
4ebf			endif 
4ebf				include "forth_words_device.asm" 
4ebf			; Device related words 
4ebf			 
4ebf			; | ## Device Words 
4ebf			 
4ebf			;if SOUND_ENABLE 
4ebf			;.NOTE: 
4ebf			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4ebf			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
4ebf			;		if DEBUG_FORTH_WORDS_KEY 
4ebf			;			DMARK "NTE" 
4ebf			;			CALLMONITOR 
4ebf			;		endif 
4ebf			; 
4ebf			;	 
4ebf			; 
4ebf			;		NEXTW 
4ebf			;.AFTERSOUND: 
4ebf			;endif 
4ebf			 
4ebf			 
4ebf			USE_GPIO: equ 0 
4ebf			 
4ebf			if USE_GPIO 
4ebf			.GP1: 
4ebf				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4ebf			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
4ebf					NEXTW 
4ebf			.GP2: 
4ebf				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4ebf			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
4ebf			 
4ebf					NEXTW 
4ebf			 
4ebf			.GP3: 
4ebf				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4ebf			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
4ebf			 
4ebf					NEXTW 
4ebf			 
4ebf			.GP4: 
4ebf				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4ebf			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
4ebf			 
4ebf					NEXTW 
4ebf			.SIN: 
4ebf			 
4ebf			 
4ebf			endif 
4ebf			 
4ebf			 
4ebf				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4ebf 33				db WORD_SYS_CORE+31             
4ec0 f4 4e			dw .SOUT            
4ec2 03				db 2 + 1 
4ec3 .. 00			db "IN",0              
4ec6				endm 
# End of macro CWHEAD
4ec6			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4ec6					if DEBUG_FORTH_WORDS_KEY 
4ec6						DMARK "IN." 
4ec6 f5				push af  
4ec7 3a db 4e			ld a, (.dmark)  
4eca 32 65 ee			ld (debug_mark),a  
4ecd 3a dc 4e			ld a, (.dmark+1)  
4ed0 32 66 ee			ld (debug_mark+1),a  
4ed3 3a dd 4e			ld a, (.dmark+2)  
4ed6 32 67 ee			ld (debug_mark+2),a  
4ed9 18 03			jr .pastdmark  
4edb ..			.dmark: db "IN."  
4ede f1			.pastdmark: pop af  
4edf			endm  
# End of macro DMARK
4edf						CALLMONITOR 
4edf cd 6f ee			call debug_vector  
4ee2				endm  
# End of macro CALLMONITOR
4ee2					endif 
4ee2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ee2 cd 95 1d			call macro_dsp_valuehl 
4ee5				endm 
# End of macro FORTH_DSP_VALUEHL
4ee5			 
4ee5 e5					push hl 
4ee6			 
4ee6					; destroy value TOS 
4ee6			 
4ee6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4ee6 cd 4d 1e			call macro_forth_dsp_pop 
4ee9				endm 
# End of macro FORTH_DSP_POP
4ee9			 
4ee9					; one value on hl get other one back 
4ee9			 
4ee9 c1					pop bc 
4eea			 
4eea					; do the sub 
4eea			;		ex de, hl 
4eea			 
4eea ed 68				in l,(c) 
4eec			 
4eec					; save it 
4eec			 
4eec 26 00				ld h,0 
4eee			 
4eee					; TODO push value back onto stack for another op etc 
4eee			 
4eee cd 90 1b				call forth_push_numhl 
4ef1					NEXTW 
4ef1 c3 80 1f			jp macro_next 
4ef4				endm 
# End of macro NEXTW
4ef4			.SOUT: 
4ef4				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4ef4 34				db WORD_SYS_CORE+32             
4ef5 47 4f			dw .SPIO            
4ef7 04				db 3 + 1 
4ef8 .. 00			db "OUT",0              
4efc				endm 
# End of macro CWHEAD
4efc			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4efc					if DEBUG_FORTH_WORDS_KEY 
4efc						DMARK "OUT" 
4efc f5				push af  
4efd 3a 11 4f			ld a, (.dmark)  
4f00 32 65 ee			ld (debug_mark),a  
4f03 3a 12 4f			ld a, (.dmark+1)  
4f06 32 66 ee			ld (debug_mark+1),a  
4f09 3a 13 4f			ld a, (.dmark+2)  
4f0c 32 67 ee			ld (debug_mark+2),a  
4f0f 18 03			jr .pastdmark  
4f11 ..			.dmark: db "OUT"  
4f14 f1			.pastdmark: pop af  
4f15			endm  
# End of macro DMARK
4f15						CALLMONITOR 
4f15 cd 6f ee			call debug_vector  
4f18				endm  
# End of macro CALLMONITOR
4f18					endif 
4f18			 
4f18					; get port 
4f18			 
4f18					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f18 cd 95 1d			call macro_dsp_valuehl 
4f1b				endm 
# End of macro FORTH_DSP_VALUEHL
4f1b			 
4f1b e5					push hl 
4f1c			 
4f1c					; destroy value TOS 
4f1c			 
4f1c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f1c cd 4d 1e			call macro_forth_dsp_pop 
4f1f				endm 
# End of macro FORTH_DSP_POP
4f1f			 
4f1f					; get byte to send 
4f1f			 
4f1f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f1f cd 95 1d			call macro_dsp_valuehl 
4f22				endm 
# End of macro FORTH_DSP_VALUEHL
4f22			 
4f22			;		push hl 
4f22			 
4f22					; destroy value TOS 
4f22			 
4f22					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f22 cd 4d 1e			call macro_forth_dsp_pop 
4f25				endm 
# End of macro FORTH_DSP_POP
4f25			 
4f25					; one value on hl get other one back 
4f25			 
4f25			;		pop hl 
4f25			 
4f25 c1					pop bc 
4f26			 
4f26					if DEBUG_FORTH_WORDS 
4f26						DMARK "OUT" 
4f26 f5				push af  
4f27 3a 3b 4f			ld a, (.dmark)  
4f2a 32 65 ee			ld (debug_mark),a  
4f2d 3a 3c 4f			ld a, (.dmark+1)  
4f30 32 66 ee			ld (debug_mark+1),a  
4f33 3a 3d 4f			ld a, (.dmark+2)  
4f36 32 67 ee			ld (debug_mark+2),a  
4f39 18 03			jr .pastdmark  
4f3b ..			.dmark: db "OUT"  
4f3e f1			.pastdmark: pop af  
4f3f			endm  
# End of macro DMARK
4f3f						CALLMONITOR 
4f3f cd 6f ee			call debug_vector  
4f42				endm  
# End of macro CALLMONITOR
4f42					endif 
4f42			 
4f42 ed 69				out (c), l 
4f44			 
4f44					NEXTW 
4f44 c3 80 1f			jp macro_next 
4f47				endm 
# End of macro NEXTW
4f47			 
4f47			 
4f47			.SPIO: 
4f47			 
4f47			if STORAGE_SE 
4f47				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4f47			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4f47			 
4f47					call spi_ce_low 
4f47			    NEXTW 
4f47			 
4f47			.SPICEH: 
4f47				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4f47			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4f47			 
4f47					call spi_ce_high 
4f47			    NEXTW 
4f47			 
4f47			 
4f47			.SPIOb: 
4f47			 
4f47				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4f47			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4f47			 
4f47					if DEBUG_FORTH_WORDS_KEY 
4f47						DMARK "SPo" 
4f47						CALLMONITOR 
4f47					endif 
4f47					; get port 
4f47			 
4f47			 
4f47					; get byte to send 
4f47			 
4f47					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f47			 
4f47			;		push hl    ; u1  
4f47			 
4f47					; destroy value TOS 
4f47			 
4f47					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f47			 
4f47					; one value on hl get other one back 
4f47			 
4f47			;		pop hl   ; u2 - addr 
4f47			 
4f47					; TODO Send SPI byte 
4f47			 
4f47			;		push hl 
4f47			;		call spi_ce_low 
4f47			;		pop hl 
4f47					ld a, l 
4f47					call spi_send_byte 
4f47			;		call spi_ce_high 
4f47			 
4f47					NEXTW 
4f47			 
4f47			.SPII: 
4f47				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4f47			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4f47					if DEBUG_FORTH_WORDS_KEY 
4f47						DMARK "SPi" 
4f47						CALLMONITOR 
4f47					endif 
4f47			 
4f47					; TODO Get SPI byte 
4f47			 
4f47					call spi_read_byte 
4f47			 
4f47					if DEBUG_FORTH_WORDS 
4f47						DMARK "Si2" 
4f47						CALLMONITOR 
4f47					endif 
4f47					ld h, 0 
4f47					ld l, a 
4f47					if DEBUG_FORTH_WORDS 
4f47						DMARK "Si3" 
4f47						CALLMONITOR 
4f47					endif 
4f47					call forth_push_numhl 
4f47			 
4f47					NEXTW 
4f47			 
4f47			 
4f47			 
4f47			.SESEL: 
4f47				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4f47			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4f47					if DEBUG_FORTH_WORDS_KEY 
4f47						DMARK "BNK" 
4f47						CALLMONITOR 
4f47					endif 
4f47			 
4f47					ld a, 255 
4f47					ld (spi_cartdev), a 
4f47			 
4f47					; get bank 
4f47			 
4f47					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f47			 
4f47			;		push hl 
4f47			 
4f47					; destroy value TOS 
4f47			 
4f47					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f47			 
4f47					; one value on hl get other one back 
4f47			 
4f47			;		pop hl 
4f47			 
4f47			 
4f47					ld c, SPI_CE_HIGH 
4f47					ld b, '0'    ; human readable bank number 
4f47			 
4f47					ld a, l 
4f47			 
4f47					if DEBUG_FORTH_WORDS 
4f47						DMARK "BNK" 
4f47						CALLMONITOR 
4f47					endif 
4f47			 
4f47					; active low 
4f47			 
4f47					cp 0 
4f47					jr z, .bset 
4f47					cp 1 
4f47					jr nz, .b2 
4f47					res 0, c 
4f47					ld b, '1'    ; human readable bank number 
4f47			.b2:		cp 2 
4f47					jr nz, .b3 
4f47					res 1, c 
4f47					ld b, '2'    ; human readable bank number 
4f47			.b3:		cp 3 
4f47					jr nz, .b4 
4f47					res 2, c 
4f47					ld b, '3'    ; human readable bank number 
4f47			.b4:		cp 4 
4f47					jr nz, .b5 
4f47					res 3, c 
4f47					ld b, '4'    ; human readable bank number 
4f47			.b5:		cp 5 
4f47					jr nz, .bset 
4f47					res 4, c 
4f47					ld b, '5'    ; human readable bank number 
4f47			 
4f47			.bset: 
4f47					ld a, c 
4f47					ld (spi_device),a 
4f47					ld a, b 
4f47					ld (spi_device_id),a 
4f47					if DEBUG_FORTH_WORDS 
4f47						DMARK "BN2" 
4f47						CALLMONITOR 
4f47					endif 
4f47			 
4f47					; set default SPI clk pulse time as disabled for BANK use 
4f47			 
4f47					ld a, 0 
4f47					ld (spi_clktime), a 
4f47			 
4f47					NEXTW 
4f47			 
4f47			.CARTDEV: 
4f47				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4f47			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4f47					if DEBUG_FORTH_WORDS_KEY 
4f47						DMARK "CDV" 
4f47						CALLMONITOR 
4f47					endif 
4f47			 
4f47					; disable se storage bank selection 
4f47			 
4f47					ld a, SPI_CE_HIGH		; ce high 
4f47					ld (spi_device), a 
4f47			 
4f47					; get bank 
4f47			 
4f47					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f47			 
4f47			;		push hl 
4f47			 
4f47					; destroy value TOS 
4f47			 
4f47					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f47			 
4f47					; one value on hl get other one back 
4f47			 
4f47			;		pop hl 
4f47			 
4f47					; active low 
4f47			 
4f47					ld c, 255 
4f47			 
4f47					ld a, l 
4f47					if DEBUG_FORTH_WORDS 
4f47						DMARK "CDV" 
4f47						CALLMONITOR 
4f47					endif 
4f47					cp 0 
4f47					jr z, .cset 
4f47					cp 1 
4f47					jr nz, .c2 
4f47					res 0, c 
4f47			.c2:		cp 2 
4f47					jr nz, .c3 
4f47					res 1, c 
4f47			.c3:		cp 3 
4f47					jr nz, .c4 
4f47					res 2, c 
4f47			.c4:		cp 4 
4f47					jr nz, .c5 
4f47					res 3, c 
4f47			.c5:		cp 5 
4f47					jr nz, .c6 
4f47					res 4, c 
4f47			.c6:		cp 6 
4f47					jr nz, .c7 
4f47					res 5, c 
4f47			.c7:		cp 7 
4f47					jr nz, .c8 
4f47					res 6, c 
4f47			.c8:		cp 8 
4f47					jr nz, .cset 
4f47					res 7, c 
4f47			.cset:		ld a, c 
4f47					ld (spi_cartdev),a 
4f47			 
4f47					if DEBUG_FORTH_WORDS 
4f47						DMARK "CD2" 
4f47						CALLMONITOR 
4f47					endif 
4f47			 
4f47					; set default SPI clk pulse time as 10ms for CARTDEV use 
4f47			 
4f47					ld a, $0a 
4f47					ld (spi_clktime), a 
4f47					NEXTW 
4f47			endif 
4f47			 
4f47			.ENDDEVICE: 
4f47			; eof 
4f47			 
# End of file forth_words_device.asm
4f47			 
4f47			; var handler 
4f47			 
4f47			 
4f47			.VARS: 
4f47				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
4f47 77				db WORD_SYS_CORE+99             
4f48 f8 4f			dw .V0            
4f4a 04				db 3 + 1 
4f4b .. 00			db "VAR",0              
4f4f				endm 
# End of macro CWHEAD
4f4f			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
4f4f			;| 
4f4f			;| The variable name should consist of a single letter. e.g. "a" 
4f4f			;! If a full string is passed then only the first char is looked at 
4f4f			;| Any other char could exceed bounds checks!  
4f4f			 
4f4f					if DEBUG_FORTH_WORDS_KEY 
4f4f						DMARK "VAR" 
4f4f f5				push af  
4f50 3a 64 4f			ld a, (.dmark)  
4f53 32 65 ee			ld (debug_mark),a  
4f56 3a 65 4f			ld a, (.dmark+1)  
4f59 32 66 ee			ld (debug_mark+1),a  
4f5c 3a 66 4f			ld a, (.dmark+2)  
4f5f 32 67 ee			ld (debug_mark+2),a  
4f62 18 03			jr .pastdmark  
4f64 ..			.dmark: db "VAR"  
4f67 f1			.pastdmark: pop af  
4f68			endm  
# End of macro DMARK
4f68						CALLMONITOR 
4f68 cd 6f ee			call debug_vector  
4f6b				endm  
# End of macro CALLMONITOR
4f6b					endif 
4f6b			 
4f6b					FORTH_DSP_VALUEHL 
4f6b cd 95 1d			call macro_dsp_valuehl 
4f6e				endm 
# End of macro FORTH_DSP_VALUEHL
4f6e			 
4f6e 7e					ld a, (hl)    ; get first char on of the string 
4f6f			 
4f6f			 
4f6f					if DEBUG_FORTH_WORDS 
4f6f						DMARK "VR1" 
4f6f f5				push af  
4f70 3a 84 4f			ld a, (.dmark)  
4f73 32 65 ee			ld (debug_mark),a  
4f76 3a 85 4f			ld a, (.dmark+1)  
4f79 32 66 ee			ld (debug_mark+1),a  
4f7c 3a 86 4f			ld a, (.dmark+2)  
4f7f 32 67 ee			ld (debug_mark+2),a  
4f82 18 03			jr .pastdmark  
4f84 ..			.dmark: db "VR1"  
4f87 f1			.pastdmark: pop af  
4f88			endm  
# End of macro DMARK
4f88						CALLMONITOR 
4f88 cd 6f ee			call debug_vector  
4f8b				endm  
# End of macro CALLMONITOR
4f8b					endif 
4f8b					 
4f8b f5					push af	 
4f8c					FORTH_DSP_POP 
4f8c cd 4d 1e			call macro_forth_dsp_pop 
4f8f				endm 
# End of macro FORTH_DSP_POP
4f8f f1					pop af 
4f90			 
4f90					; convert to upper 
4f90			 
4f90 cd 6a 10				call to_upper 
4f93					if DEBUG_FORTH_WORDS 
4f93						DMARK "Vaa" 
4f93 f5				push af  
4f94 3a a8 4f			ld a, (.dmark)  
4f97 32 65 ee			ld (debug_mark),a  
4f9a 3a a9 4f			ld a, (.dmark+1)  
4f9d 32 66 ee			ld (debug_mark+1),a  
4fa0 3a aa 4f			ld a, (.dmark+2)  
4fa3 32 67 ee			ld (debug_mark+2),a  
4fa6 18 03			jr .pastdmark  
4fa8 ..			.dmark: db "Vaa"  
4fab f1			.pastdmark: pop af  
4fac			endm  
# End of macro DMARK
4fac						CALLMONITOR 
4fac cd 6f ee			call debug_vector  
4faf				endm  
# End of macro CALLMONITOR
4faf					endif 
4faf 06 41				ld b, 'A' 
4fb1 90					sub b			; set offset 
4fb2					if DEBUG_FORTH_WORDS 
4fb2						DMARK "Vbb" 
4fb2 f5				push af  
4fb3 3a c7 4f			ld a, (.dmark)  
4fb6 32 65 ee			ld (debug_mark),a  
4fb9 3a c8 4f			ld a, (.dmark+1)  
4fbc 32 66 ee			ld (debug_mark+1),a  
4fbf 3a c9 4f			ld a, (.dmark+2)  
4fc2 32 67 ee			ld (debug_mark+2),a  
4fc5 18 03			jr .pastdmark  
4fc7 ..			.dmark: db "Vbb"  
4fca f1			.pastdmark: pop af  
4fcb			endm  
# End of macro DMARK
4fcb						CALLMONITOR 
4fcb cd 6f ee			call debug_vector  
4fce				endm  
# End of macro CALLMONITOR
4fce					endif 
4fce cb 27				sla a  
4fd0				 
4fd0					 
4fd0					if DEBUG_FORTH_WORDS 
4fd0						DMARK "VR2" 
4fd0 f5				push af  
4fd1 3a e5 4f			ld a, (.dmark)  
4fd4 32 65 ee			ld (debug_mark),a  
4fd7 3a e6 4f			ld a, (.dmark+1)  
4fda 32 66 ee			ld (debug_mark+1),a  
4fdd 3a e7 4f			ld a, (.dmark+2)  
4fe0 32 67 ee			ld (debug_mark+2),a  
4fe3 18 03			jr .pastdmark  
4fe5 ..			.dmark: db "VR2"  
4fe8 f1			.pastdmark: pop af  
4fe9			endm  
# End of macro DMARK
4fe9						CALLMONITOR 
4fe9 cd 6f ee			call debug_vector  
4fec				endm  
# End of macro CALLMONITOR
4fec					endif 
4fec			 
4fec 21 ee e9				ld hl, cli_var_array2 
4fef cd f5 0d				call addatohl 
4ff2 cd 90 1b				call forth_push_numhl 
4ff5			 
4ff5			 
4ff5				       NEXTW 
4ff5 c3 80 1f			jp macro_next 
4ff8				endm 
# End of macro NEXTW
4ff8			.V0: 
4ff8				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
4ff8 78				db WORD_SYS_CORE+100             
4ff9 10 50			dw .V0Q            
4ffb 04				db 3 + 1 
4ffc .. 00			db "V0!",0              
5000				endm 
# End of macro CWHEAD
5000			;| V0! ( u1 -- )  Store value to v0  | DONE 
5000			 
5000					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5000 cd 95 1d			call macro_dsp_valuehl 
5003				endm 
# End of macro FORTH_DSP_VALUEHL
5003			 
5003 11 22 ea				ld de, cli_var_array 
5006			 
5006 eb					ex de, hl 
5007 73					ld (hl), e 
5008 23					inc hl 
5009 72					ld (hl), d 
500a			 
500a					; destroy value TOS 
500a			 
500a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
500a cd 4d 1e			call macro_forth_dsp_pop 
500d				endm 
# End of macro FORTH_DSP_POP
500d			 
500d				       NEXTW 
500d c3 80 1f			jp macro_next 
5010				endm 
# End of macro NEXTW
5010			.V0Q: 
5010				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
5010 79				db WORD_SYS_CORE+101             
5011 21 50			dw .V1S            
5013 04				db 3 + 1 
5014 .. 00			db "V0@",0              
5018				endm 
# End of macro CWHEAD
5018			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5018 2a 22 ea				ld hl, (cli_var_array) 
501b cd 90 1b				call forth_push_numhl 
501e			 
501e				       NEXTW 
501e c3 80 1f			jp macro_next 
5021				endm 
# End of macro NEXTW
5021			.V1S: 
5021				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
5021 7a				db WORD_SYS_CORE+102             
5022 39 50			dw .V1Q            
5024 04				db 3 + 1 
5025 .. 00			db "V1!",0              
5029				endm 
# End of macro CWHEAD
5029			;| V1! ( u1 -- )  Store value to v1 | DONE 
5029					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5029 cd 95 1d			call macro_dsp_valuehl 
502c				endm 
# End of macro FORTH_DSP_VALUEHL
502c			 
502c 11 24 ea				ld de, cli_var_array+2 
502f				 
502f eb					ex de, hl 
5030 73					ld (hl), e 
5031 23					inc hl 
5032 72					ld (hl), d 
5033			 
5033					; destroy value TOS 
5033			 
5033					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5033 cd 4d 1e			call macro_forth_dsp_pop 
5036				endm 
# End of macro FORTH_DSP_POP
5036				       NEXTW 
5036 c3 80 1f			jp macro_next 
5039				endm 
# End of macro NEXTW
5039			.V1Q: 
5039				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5039 7b				db WORD_SYS_CORE+103             
503a 4a 50			dw .V2S            
503c 04				db 3 + 1 
503d .. 00			db "V1@",0              
5041				endm 
# End of macro CWHEAD
5041			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5041 2a 24 ea				ld hl, (cli_var_array+2) 
5044 cd 90 1b				call forth_push_numhl 
5047				       NEXTW 
5047 c3 80 1f			jp macro_next 
504a				endm 
# End of macro NEXTW
504a			.V2S: 
504a				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
504a 7c				db WORD_SYS_CORE+104             
504b 62 50			dw .V2Q            
504d 04				db 3 + 1 
504e .. 00			db "V2!",0              
5052				endm 
# End of macro CWHEAD
5052			;| V2! ( u1 -- )  Store value to v2 | DONE 
5052					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5052 cd 95 1d			call macro_dsp_valuehl 
5055				endm 
# End of macro FORTH_DSP_VALUEHL
5055			 
5055 11 26 ea				ld de, cli_var_array+4 
5058				 
5058 eb					ex de, hl 
5059 73					ld (hl), e 
505a 23					inc hl 
505b 72					ld (hl), d 
505c			 
505c					; destroy value TOS 
505c			 
505c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
505c cd 4d 1e			call macro_forth_dsp_pop 
505f				endm 
# End of macro FORTH_DSP_POP
505f				       NEXTW 
505f c3 80 1f			jp macro_next 
5062				endm 
# End of macro NEXTW
5062			.V2Q: 
5062				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5062 7d				db WORD_SYS_CORE+105             
5063 73 50			dw .V3S            
5065 04				db 3 + 1 
5066 .. 00			db "V2@",0              
506a				endm 
# End of macro CWHEAD
506a			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
506a 2a 26 ea				ld hl, (cli_var_array+4) 
506d cd 90 1b				call forth_push_numhl 
5070				       NEXTW 
5070 c3 80 1f			jp macro_next 
5073				endm 
# End of macro NEXTW
5073			.V3S: 
5073				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5073 7c				db WORD_SYS_CORE+104             
5074 8b 50			dw .V3Q            
5076 04				db 3 + 1 
5077 .. 00			db "V3!",0              
507b				endm 
# End of macro CWHEAD
507b			;| V3! ( u1 -- )  Store value to v3 | DONE 
507b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
507b cd 95 1d			call macro_dsp_valuehl 
507e				endm 
# End of macro FORTH_DSP_VALUEHL
507e			 
507e 11 28 ea				ld de, cli_var_array+6 
5081				 
5081 eb					ex de, hl 
5082 73					ld (hl), e 
5083 23					inc hl 
5084 72					ld (hl), d 
5085			 
5085					; destroy value TOS 
5085			 
5085					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5085 cd 4d 1e			call macro_forth_dsp_pop 
5088				endm 
# End of macro FORTH_DSP_POP
5088				       NEXTW 
5088 c3 80 1f			jp macro_next 
508b				endm 
# End of macro NEXTW
508b			.V3Q: 
508b				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
508b 7d				db WORD_SYS_CORE+105             
508c 9c 50			dw .END            
508e 04				db 3 + 1 
508f .. 00			db "V3@",0              
5093				endm 
# End of macro CWHEAD
5093			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5093 2a 28 ea				ld hl, (cli_var_array+6) 
5096 cd 90 1b				call forth_push_numhl 
5099				       NEXTW 
5099 c3 80 1f			jp macro_next 
509c				endm 
# End of macro NEXTW
509c			 
509c			 
509c			 
509c			 
509c			 
509c			; end of dict marker 
509c			 
509c 00			.END:    db WORD_SYS_END 
509d 00 00			dw 0 
509f 00				db 0 
50a0			 
50a0			; use to jp here for user dict words to save on macro expansion  
50a0			 
50a0			user_dict_next: 
50a0				NEXTW 
50a0 c3 80 1f			jp macro_next 
50a3				endm 
# End of macro NEXTW
50a3			 
50a3			 
50a3			user_exec: 
50a3				;    ld hl, <word code> 
50a3				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
50a3				;    call forthexec 
50a3				;    jp user_dict_next   (NEXT) 
50a3			        ;    <word code bytes> 
50a3 eb				ex de, hl 
50a4 2a bc e5			ld hl,(os_tok_ptr) 
50a7				 
50a7				FORTH_RSP_NEXT 
50a7 cd 37 1b			call macro_forth_rsp_next 
50aa				endm 
# End of macro FORTH_RSP_NEXT
50aa			 
50aa			if DEBUG_FORTH_UWORD 
50aa						DMARK "UEX" 
50aa f5				push af  
50ab 3a bf 50			ld a, (.dmark)  
50ae 32 65 ee			ld (debug_mark),a  
50b1 3a c0 50			ld a, (.dmark+1)  
50b4 32 66 ee			ld (debug_mark+1),a  
50b7 3a c1 50			ld a, (.dmark+2)  
50ba 32 67 ee			ld (debug_mark+2),a  
50bd 18 03			jr .pastdmark  
50bf ..			.dmark: db "UEX"  
50c2 f1			.pastdmark: pop af  
50c3			endm  
# End of macro DMARK
50c3				CALLMONITOR 
50c3 cd 6f ee			call debug_vector  
50c6				endm  
# End of macro CALLMONITOR
50c6			endif 
50c6			 
50c6			 
50c6			 
50c6 eb				ex de, hl 
50c7 22 bc e5			ld (os_tok_ptr), hl 
50ca				 
50ca				; Don't use next - Skips the first word in uword. 
50ca			 
50ca c3 09 20			jp exec1 
50cd			;	NEXT 
50cd			 
50cd			 
50cd			; eof 
# End of file forth_wordsv4.asm
50cd			endif 
50cd			;;;;;;;;;;;;;; Debug code 
50cd			 
50cd			 
50cd			;if DEBUG_FORTH_PARSE 
50cd .. 00		.nowordfound: db "No match",0 
50d6 .. 00		.compword:	db "Comparing word ",0 
50e6 .. 00		.nextwordat:	db "Next word at",0 
50f3 .. 00		.charmatch:	db "Char match",0 
50fe			;endif 
50fe			if DEBUG_FORTH_JP 
50fe			.foundword:	db "Word match. Exec..",0 
50fe			endif 
50fe			;if DEBUG_FORTH_PUSH 
50fe .. 00		.enddict:	db "Dict end. Push.",0 
510e .. 00		.push_str:	db "Pushing string",0 
511d .. 00		.push_num:	db "Pushing number",0 
512c .. 00		.data_sp:	db "SP:",0 
5130 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5142 .. 00		.wordinde:	db "Word in DE (3/0):",0 
5154 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5166			;endif 
5166			;if DEBUG_FORTH_MALLOC 
5166 .. 00		.push_malloc:	db "Malloc address",0 
5175			;endif 
5175			 
5175			 
5175			 
5175			; display malloc address and current data stack pointer  
5175			 
5175			malloc_error: 
5175 d5				push de 
5176 f5				push af 
5177 e5				push hl 
5178 cd c8 0b			call clear_display 
517b 11 9b 51			ld de, .mallocerr 
517e 3e 00			ld a,0 
5180			;	ld de,os_word_scratch 
5180 cd db 0b			call str_at_display 
5183 3e 11			ld a, display_row_1+17 
5185 11 65 ee			ld de, debug_mark 
5188 cd db 0b			call str_at_display 
518b cd eb 0b			call update_display 
518e				;call break_point_state 
518e cd fe 62			call cin_wait 
5191			 
5191			;	ld a, ' ' 
5191			;	ld (os_view_disable), a 
5191 cd ff 14			call bp_on 
5194 e1				pop hl 
5195 f1				pop af 
5196 d1				pop de	 
5197				CALLMONITOR 
5197 cd 6f ee			call debug_vector  
519a				endm  
# End of macro CALLMONITOR
519a c9				ret 
519b			 
519b .. 00		.mallocerr: 	db "Malloc Error",0 
51a8			;if DEBUG_FORTH_PUSH 
51a8			display_data_sp: 
51a8 f5				push af 
51a9			 
51a9				; see if disabled 
51a9			 
51a9			 
51a9 3a 6f ee			ld a, (debug_vector) 
51ac fe c9			cp $C9  ; RET 
51ae				;ld a, (os_view_disable) 
51ae				;cp '*' 
51ae 28 67			jr z, .skipdsp 
51b0			 
51b0 e5				push hl 
51b1 e5				push hl 
51b2 e5			push hl 
51b3 cd c8 0b			call clear_display 
51b6 e1			pop hl 
51b7 7c				ld a,h 
51b8 21 c0 e5			ld hl, os_word_scratch 
51bb cd fe 0f			call hexout 
51be e1				pop hl 
51bf 7d				ld a,l 
51c0 21 c2 e5			ld hl, os_word_scratch+2 
51c3 cd fe 0f			call hexout 
51c6 21 c4 e5			ld hl, os_word_scratch+4 
51c9 3e 00			ld a,0 
51cb 77				ld (hl),a 
51cc 11 c0 e5			ld de,os_word_scratch 
51cf 3e 28				ld a, display_row_2 
51d1 cd db 0b				call str_at_display 
51d4 11 30 51			ld de, .wordinhl 
51d7 3e 00			ld a, display_row_1 
51d9			 
51d9 cd db 0b				call str_at_display 
51dc 11 65 ee			ld de, debug_mark 
51df 3e 11			ld a, display_row_1+17 
51e1			 
51e1 cd db 0b				call str_at_display 
51e4			 
51e4				; display current data stack pointer 
51e4 11 2c 51			ld de,.data_sp 
51e7 3e 30				ld a, display_row_2 + 8 
51e9 cd db 0b				call str_at_display 
51ec			 
51ec 2a e8 e9			ld hl,(cli_data_sp) 
51ef e5				push hl 
51f0 7c				ld a,h 
51f1 21 c0 e5			ld hl, os_word_scratch 
51f4 cd fe 0f			call hexout 
51f7 e1				pop hl 
51f8 7d				ld a,l 
51f9 21 c2 e5			ld hl, os_word_scratch+2 
51fc cd fe 0f			call hexout 
51ff 21 c4 e5			ld hl, os_word_scratch+4 
5202 3e 00			ld a,0 
5204 77				ld (hl),a 
5205 11 c0 e5			ld de,os_word_scratch 
5208 3e 33				ld a, display_row_2 + 11 
520a cd db 0b				call str_at_display 
520d			 
520d			 
520d cd eb 0b			call update_display 
5210 cd 00 0b			call delay1s 
5213 cd 00 0b			call delay1s 
5216 e1				pop hl 
5217			.skipdsp: 
5217 f1				pop af 
5218 c9				ret 
5219			 
5219			display_data_malloc: 
5219			 
5219 f5				push af 
521a e5				push hl 
521b e5				push hl 
521c e5			push hl 
521d cd c8 0b			call clear_display 
5220 e1			pop hl 
5221 7c				ld a,h 
5222 21 c0 e5			ld hl, os_word_scratch 
5225 cd fe 0f			call hexout 
5228 e1				pop hl 
5229 7d				ld a,l 
522a 21 c2 e5			ld hl, os_word_scratch+2 
522d cd fe 0f			call hexout 
5230 21 c4 e5			ld hl, os_word_scratch+4 
5233 3e 00			ld a,0 
5235 77				ld (hl),a 
5236 11 c0 e5			ld de,os_word_scratch 
5239 3e 28				ld a, display_row_2 
523b cd db 0b				call str_at_display 
523e 11 66 51			ld de, .push_malloc 
5241 3e 00			ld a, display_row_1 
5243			 
5243 cd db 0b				call str_at_display 
5246			 
5246				; display current data stack pointer 
5246 11 2c 51			ld de,.data_sp 
5249 3e 30				ld a, display_row_2 + 8 
524b cd db 0b				call str_at_display 
524e			 
524e 2a e8 e9			ld hl,(cli_data_sp) 
5251 e5				push hl 
5252 7c				ld a,h 
5253 21 c0 e5			ld hl, os_word_scratch 
5256 cd fe 0f			call hexout 
5259 e1				pop hl 
525a 7d				ld a,l 
525b 21 c2 e5			ld hl, os_word_scratch+2 
525e cd fe 0f			call hexout 
5261 21 c4 e5			ld hl, os_word_scratch+4 
5264 3e 00			ld a,0 
5266 77				ld (hl),a 
5267 11 c0 e5			ld de,os_word_scratch 
526a 3e 33				ld a, display_row_2 + 11 
526c cd db 0b				call str_at_display 
526f			 
526f cd eb 0b			call update_display 
5272 cd 00 0b			call delay1s 
5275 cd 00 0b			call delay1s 
5278 e1				pop hl 
5279 f1				pop af 
527a c9				ret 
527b			;endif 
527b			 
527b			include "forth_autostart.asm" 
527b			; list of commands to perform at system start up 
527b			 
527b			startcmds: 
527b			;	dw test11 
527b			;	dw test12 
527b			;	dw test13 
527b			;	dw test14 
527b			;	dw test15 
527b			;	dw test16 
527b			;	dw test17 
527b			;	dw ifthtest1 
527b			;	dw ifthtest2 
527b			;	dw ifthtest3 
527b			;	dw mmtest1 
527b			;	dw mmtest2 
527b			;	dw mmtest3 
527b			;	dw mmtest4 
527b			;	dw mmtest5 
527b			;	dw mmtest6 
527b			;	dw iftest1 
527b			;	dw iftest2 
527b			;	dw iftest3 
527b			;	dw looptest1 
527b			;	dw looptest2 
527b			;	dw test1 
527b			;	dw test2 
527b			;	dw test3 
527b			;	dw test4 
527b			;	dw game2r 
527b			;	dw game2b1 
527b			;	dw game2b2 
527b			 
527b				; start up words that are actually useful 
527b			 
527b			;    dw spi1 
527b			;    dw spi2 
527b			;    dw spi3 
527b			;    dw spi4 
527b			;    dw spi5 
527b			;    dw spi6 
527b			;    dw spi7 
527b			; 
527b			;    dw spi8 
527b			;    dw spi9 
527b			;    dw spi10 
527b			 
527b			; file editor 
527b			;	dw edit1 
527b			;	dw edit2 
527b			;	dw edit3 
527b			 
527b			;	dw longread 
527b 9d 56			dw clrstack 
527d d1 56			dw type 
527f			;	dw stest 
527f f6 56			dw strncpy 
5281 66 58			dw list 
5283 57 57			dw start1 
5285 67 57			dw start2 
5287			;	dw start3 
5287			;	dw start3b 
5287			;	dw start3c 
5287			 
5287				; (unit) testing words 
5287			 
5287			;	dw mtesta 
5287			;	dw mtestb 
5287			;	dw mtestc 
5287			;	dw mtestd 
5287			;	dw mteste 
5287			 
5287				; demo/game words 
5287			 
5287			;        dw game3w 
5287			;        dw game3p 
5287			;        dw game3sc 
5287			;        dw game3vsi 
5287			;        dw game3vs 
5287				 
5287			;	dw game2b 
5287			;	dw game2bf 
5287			;	dw game2mba 
5287			;	dw game2mbas 
5287			;	dw game2mb 
5287			 
5287 97 5a			dw game1 
5289 a8 5a			dw game1a 
528b 0a 5b			dw game1b 
528d 3f 5b			dw game1c 
528f 75 5b			dw game1d 
5291 a6 5b			dw game1s 
5293 ba 5b			dw game1t 
5295 cf 5b			dw game1f 
5297 03 5c			dw game1z 
5299 47 5c			dw game1zz 
529b			 
529b d0 58			dw test5 
529d 08 59			dw test6 
529f 40 59			dw test7 
52a1 54 59			dw test8 
52a3 80 59			dw test9 
52a5 96 59			dw test10 
52a7				 
52a7 1e 5d		        dw ssv5 
52a9 02 5d		        dw ssv4 
52ab e6 5c		        dw ssv3 
52ad b0 5c		        dw ssv2 
52af 37 5d		        dw ssv1 
52b1 7f 5d		        dw ssv1cpm 
52b3			;	dw keyup 
52b3			;	dw keydown 
52b3			;	dw keyleft 
52b3			;	dw keyright 
52b3			;	dw 	keyf1 
52b3			;	dw keyf2 
52b3			;	dw keyf3 
52b3			;	dw keyf4 
52b3			;	dw keyf5 
52b3			;	dw keyf6 
52b3			;	dw keyf7 
52b3			;	dw keyf8 
52b3			;	dw keyf9 
52b3			;	dw keyf10 
52b3			;	dw keyf11 
52b3			;	dw keyf12 
52b3			;	dw keytab 
52b3			;	dw keycr 
52b3			;	dw keyhome 
52b3			;	dw keyend 
52b3			;	dw keybs 
52b3 00 00			db 0, 0	 
52b5			 
52b5			 
52b5			; File Editor 
52b5			 
52b5			; ( id - ) use 'e' to edit the displayed line 
52b5 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
52d6 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
530b			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
530b .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
5343			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
5343			 
5343			; SPI Net support words 
5343			 
5343			; v0! = node to send to 
5343			; ( str count - ) 
5343 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
539c			 
539c			; spiputc ( char node - ) 
539c .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
53d0			; spiputc ( u node - ) 
53d0 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
53fe			 
53fe			; spigetc ( - n ) 
53fe .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
5427			 
5427			; getnode ( - n ) 
5427 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
5454			 
5454			; ( str node - )  
5454 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
54ba			; store string ( str i - ) 
54ba			 
54ba			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
54ba .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
550f			 
550f			; get string ( addr i -  )    TO FIX 
550f			 
550f .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
5567			 
5567			 
5567			; NETCHAT (TODO) 
5567			; Program to allow two nodes to chat with eachother 
5567			; 
5567			; v0 - target node 
5567			;  
5567			; accept input at 0,0 
5567			; if input is string send spitype to target node 
5567			; starting at row 2,0 , while spigetchr is not zero ->  
5567			; 
5567			; 
5567			; TODO add paging of get request 
5567			 
5567			; ( node - ) 
5567 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
5586 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
55de .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
5656			 
5656			 
5656			; Long read of currently open file 
5656 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
569d			 
569d			; clear stack  
569d			 
569d .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
56d1			 
56d1			; type ( addr count - ) 
56d1 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
56f6			 
56f6			; some direct memory words 
56f6			; strncpy ( len t f -- t ) 
56f6			 
56f6 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
5757			 
5757 .. 00		start1:     	db ": bpon $00 bp ;",0 
5767 .. 00		start2:     	db ": bpoff $01 bp ;",0 
5778 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
57f3 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
5853			 
5853 .. 00		tuck:         db ": tuck swap over ;", 0 
5866			 
5866			; a handy word to list items on the stack 
5866			 
5866 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
58d0			 
58d0			 
58d0			; test stack  
58d0			; rnd8 stest 
58d0			 
58d0			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
58d0			 
58d0			; random malloc and free cycles 
58d0			 
58d0			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
58d0			 
58d0			; fixed malloc and free cycles 
58d0			 
58d0			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
58d0			 
58d0			; fixed double string push and drop cycle  
58d0			 
58d0			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
58d0			 
58d0			; consistent fixed string push and drop cycle  
58d0			 
58d0			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
58d0			 
58d0			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
58d0			 
58d0			;test1:		db ": aa 1 2 3 ;", 0 
58d0			;test2:     	db "111 aa 888 999",0 
58d0			;test3:     	db ": bb 77 ;",0 
58d0			;test4:     	db "$02 $01 do i . loop bb",0 
58d0			 
58d0 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
5908 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
5940 .. 00		test7:     	db ": box hline vline ;",0 
5954 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
5980 .. 00		test9:     	db ": sw $01 adsp world ;",0 
5996 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
59bb			;test11:     	db "hello create .",0 
59bb			;test12:     	db "hello2 create .",0 
59bb			 
59bb			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
59bb			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
59bb			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
59bb			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
59bb			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
59bb			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
59bb			 
59bb			;iftest1:     	db "$0001 IF cls .",0 
59bb			;iftest2:     	db "$0000 IF cls .",0 
59bb			;iftest3:     	db "$0002 $0003 - IF cls .",0 
59bb			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
59bb			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
59bb			 
59bb			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
59bb			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
59bb			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
59bb			 
59bb			 
59bb .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
59df .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
5a0f .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
5a34 .. 00		sound4: db ": cha $00 ; ",0 
5a41 .. 00		sound5: db ": chb $20 ; ",0 
5a4e .. 00		sound6: db ": chc $40 ; ",0 
5a5b .. 00		sound7: db ": chd $60 ; ",0 
5a68 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
5a80 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
5a97			 
5a97			 
5a97			 
5a97			 
5a97			; a small guess the number game 
5a97			 
5a97 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
5aa8 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
5b0a			 
5b0a .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
5b3f .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5b75 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5ba6 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
5bba .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5bcf .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
5c03 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5c47			 
5c47			; Using 'ga' save a high score across multiple runs using external storage 
5c47			 
5c47 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5cb0			 
5cb0			 
5cb0			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5cb0			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5cb0			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5cb0			 
5cb0			; simple screen saver to test code memory reuse to destruction 
5cb0			 
5cb0 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5ce6 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5d02 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5d1e .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5d37 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5d7f .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5dd6			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5dd6			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5dd6			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5dd6			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5dd6			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5dd6			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5dd6			 
5dd6			 
5dd6			 
5dd6			; minesweeper/battleship finding game 
5dd6			; draws a game board of random ship/mine positions 
5dd6			; user enters coords to see if it hits on 
5dd6			; game ends when all are hit 
5dd6			; when hit or miss says how many may be in the area 
5dd6			 
5dd6			; setup the game board and then hide it 
5dd6			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5dd6			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5dd6			;; prompt for where to target 
5dd6			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5dd6			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5dd6			;; TODO see if the entered coords hits or misses pushes char hit of miss 
5dd6			;game2mbht:      db ": mbckht nop ;",0 
5dd6			;game2mbms:      db ": mbcms nop ;",0 
5dd6			; TODO how many might be near by 
5dd6			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5dd6			 
5dd6			; Game 3 
5dd6			 
5dd6			; Vert scroller ski game - avoid the trees! 
5dd6			 
5dd6			; v0 score (ie turns) 
5dd6			; v1 player pos 
5dd6			; v2 left wall 
5dd6			; v3 right wall 
5dd6			 
5dd6			; Draw side walls randomly 
5dd6			 
5dd6			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5dd6			 
5dd6			; Draw player 
5dd6			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5dd6			 
5dd6			; TODO Get Key 
5dd6			 
5dd6			; TODO Move left right 
5dd6			 
5dd6			; scroll and move walls a bit 
5dd6			 
5dd6			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5dd6			 
5dd6			; main game loop 
5dd6			 
5dd6			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5dd6			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
5dd6			 
5dd6			; key board defs 
5dd6			 
5dd6 .. 00		keyup:       db ": keyup $05 ;",0 
5de4 .. 00		keydown:       db ": keydown $0a ;",0 
5df4 .. 00		keyleft:       db ": keyleft $0b ;",0 
5e04 .. 00		keyright:       db ": keyright $0c ;",0 
5e15 .. 00		keyf1:       db ": keyf1 $10 ;",0 
5e23 .. 00		keyf2:       db ": keyf2 $11 ;",0 
5e31 .. 00		keyf3:       db ": keyf3 $12 ;",0 
5e3f .. 00		keyf4:       db ": keyf4 $13 ;",0 
5e4d .. 00		keyf5:       db ": keyf5 $14 ;",0 
5e5b .. 00		keyf6:       db ": keyf6 $15 ;",0 
5e69 .. 00		keyf7:       db ": keyf7 $16 ;",0 
5e77 .. 00		keyf8:       db ": keyf8 $17 ;",0 
5e85 .. 00		keyf9:       db ": keyf9 $18 ;",0 
5e93 .. 00		keyf10:       db ": keyf10 $19 ;",0 
5ea2 .. 00		keyf11:       db ": keyf11 $1a ;",0 
5eb1 .. 00		keyf12:       db ": keyf12 $1b ;",0 
5ec0			 
5ec0 .. 00		keytab:       db ": keytab $09 ;",0 
5ecf .. 00		keycr:       db ": keycr $0d ;",0 
5edd .. 00		keyhome:       db ": keyhome $0e ;",0 
5eed .. 00		keyend:       db ": keyend $0f ;",0 
5efc .. 00		keybs:       db ": keybs $08 ;",0 
5f0a			 
5f0a			   
5f0a			 
5f0a			 
5f0a			 
5f0a			; eof 
# End of file forth_autostart.asm
5f0a			 
5f0a			 
5f0a			 
5f0a			; stack over and underflow checks 
5f0a			 
5f0a			; init the words to detect the under/overflow 
5f0a			 
5f0a			chk_stk_init: 
5f0a				; a vague random number to check so we dont get any "lucky" hits 
5f0a 3e 2d			ld a, 45 
5f0c 6f				ld l, a 
5f0d 00				nop 
5f0e 3e 17			ld a, 23 
5f10 67				ld h, a 
5f11			 
5f11 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
5f14			 
5f14			;	ld (chk_stund), hl	; stack points.... 
5f14 22 00 ef			ld (chk_stovr), hl 
5f17 22 e6 e9			ld (chk_ret_und), hl 
5f1a 22 a4 e9			ld (chk_ret_ovr), hl 
5f1d 22 22 e9			ld (chk_loop_ovr), hl 
5f20 22 20 e8			ld (chk_data_ovr), hl 
5f23 c9				ret 
5f24				 
5f24			check_stacks: 
5f24				; check all stack words 
5f24			 
5f24 e5				push hl 
5f25 d5				push de 
5f26			 
5f26			;	ld de,(chk_word) 
5f26			;	ld hl, (chk_stund)	; stack points.... 
5f26			;	if DEBUG_STK_FAULT 
5f26			;		DMARK "FAa" 
5f26			;		CALLMONITOR 
5f26			;	endif 
5f26			;	call cmp16 
5f26			;	jp z, .chk_faulta 
5f26			; 
5f26			;	ld de, sfaultsu 
5f26			;	jp .chk_fault 
5f26			 
5f26 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
5f29 ed 5b 97 e2		ld de,(chk_word) 
5f2d				if DEBUG_STK_FAULT 
5f2d					DMARK "FAb" 
5f2d					CALLMONITOR 
5f2d				endif 
5f2d cd 13 0e			call cmp16 
5f30 28 06			jr z, .chk_fault1 
5f32 11 d6 5f			ld de, sfaultso 
5f35 c3 87 5f			jp .chk_fault 
5f38			.chk_fault1:  
5f38 2a e6 e9			ld hl, (chk_ret_und) 
5f3b ed 5b 97 e2		ld de,(chk_word) 
5f3f				if DEBUG_STK_FAULT 
5f3f					DMARK "FAU" 
5f3f					CALLMONITOR 
5f3f				endif 
5f3f cd 13 0e			call cmp16 
5f42 ca 4b 5f			jp z, .chk_fault2 
5f45 11 e6 5f			ld de, sfaultru 
5f48 c3 87 5f			jp .chk_fault 
5f4b			.chk_fault2:  
5f4b 2a a4 e9			ld hl, (chk_ret_ovr) 
5f4e ed 5b 97 e2		ld de,(chk_word) 
5f52				if DEBUG_STK_FAULT 
5f52					DMARK "FA1" 
5f52					CALLMONITOR 
5f52				endif 
5f52 cd 13 0e			call cmp16 
5f55 ca 5e 5f			jp z, .chk_fault3 
5f58 11 f4 5f			ld de, sfaultro 
5f5b c3 87 5f			jp .chk_fault 
5f5e			.chk_fault3:  
5f5e 2a 22 e9			ld hl, (chk_loop_ovr) 
5f61 ed 5b 97 e2		ld de,(chk_word) 
5f65				if DEBUG_STK_FAULT 
5f65					DMARK "FA2" 
5f65					CALLMONITOR 
5f65				endif 
5f65 cd 13 0e			call cmp16 
5f68 ca 71 5f			jp z, .chk_fault4 
5f6b 11 0e 60			ld de, sfaultlo 
5f6e c3 87 5f			jp .chk_fault 
5f71			.chk_fault4:  
5f71 2a 20 e8			ld hl, (chk_data_ovr) 
5f74 ed 5b 97 e2		ld de,(chk_word) 
5f78				if DEBUG_STK_FAULT 
5f78					DMARK "FA3" 
5f78					CALLMONITOR 
5f78				endif 
5f78 cd 13 0e			call cmp16 
5f7b ca 84 5f			jp z, .chk_fault5 
5f7e 11 28 60			ld de, sfaultdo 
5f81 c3 87 5f			jp .chk_fault 
5f84			 
5f84			 
5f84			.chk_fault5:  
5f84 d1				pop de 
5f85 e1				pop hl 
5f86			 
5f86 c9				ret 
5f87			 
5f87 cd c8 0b		.chk_fault: 	call clear_display 
5f8a 3e 28				ld a, display_row_2 
5f8c cd db 0b				call str_at_display 
5f8f 11 b8 5f				   ld de, .stackfault 
5f92 3e 00				ld a, display_row_1 
5f94 cd db 0b				call str_at_display 
5f97 11 65 ee				    ld de, debug_mark 
5f9a 3e 11				ld a, display_row_1+17 
5f9c cd db 0b				call str_at_display 
5f9f cd eb 0b				call update_display 
5fa2			 
5fa2				; prompt before entering montior for investigating issue 
5fa2			 
5fa2 3e 78			ld a, display_row_4 
5fa4 11 6e 18			ld de, endprog 
5fa7			 
5fa7 cd eb 0b			call update_display		 
5faa			 
5faa cd 08 1b			call next_page_prompt 
5fad			 
5fad d1				pop de 
5fae e1				pop hl 
5faf cd c2 18				call monitor 
5fb2 cd 26 1f				call forth_warmstart 
5fb5 c3 be 17				jp warmstart_afterauto 
5fb8					;jp 0 
5fb8					;halt 
5fb8			 
5fb8			 
5fb8			 
5fb8 .. 00		.stackfault: 	db "Stack fault:",0 
5fc5			 
5fc5 .. 00		sfaultsu: 	db	"Stack under flow",0 
5fd6 .. 00		sfaultso: 	db	"Stack over flow",0 
5fe6 .. 00		sfaultru:	db "RTS underflow",0 
5ff4 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
600e .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
6028 .. 00		sfaultdo:	db "DTS overflow", 0 
6035			 
6035			 
6035			fault_dsp_under: 
6035 11 47 60			ld de, .dsp_under 
6038 c3 fd 60			jp .show_fault 
603b			 
603b			fault_rsp_under: 
603b 11 55 60			ld de, .rsp_under 
603e c3 fd 60			jp .show_fault 
6041			fault_loop_under: 
6041 11 63 60			ld de, .loop_under 
6044 c3 fd 60			jp .show_fault 
6047			 
6047 .. 00		.dsp_under: db "DSP Underflow",0 
6055 .. 00		.rsp_under: db "RSP Underflow",0 
6063 .. 00		.loop_under: db "LOOP Underflow",0 
6072			 
6072			 
6072 d5			type_faultn: 	push de 
6073 e5					push hl 
6074 cd c8 0b				call clear_display 
6077 11 a1 60				   ld de, .typefaultn 
607a 3e 00				ld a, display_row_1 
607c cd db 0b				call str_at_display 
607f 11 65 ee				    ld de, debug_mark 
6082 3e 11				ld a, display_row_1+17 
6084 cd db 0b				call str_at_display 
6087 cd eb 0b				call update_display 
608a			 
608a				; prompt before entering montior for investigating issue 
608a			 
608a 3e 78			ld a, display_row_4 
608c 11 6e 18			ld de, endprog 
608f			 
608f cd eb 0b			call update_display		 
6092			 
6092 cd 08 1b			call next_page_prompt 
6095			 
6095 e5					push hl 
6096 d5					push de 
6097 cd c2 18				call monitor 
609a cd 26 1f				call forth_warmstart 
609d c3 be 17				jp warmstart_afterauto 
60a0 76					halt 
60a1			 
60a1			 
60a1 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
60b8			 
60b8 d5			type_faults: 	push de 
60b9 e5					push hl 
60ba cd c8 0b				call clear_display 
60bd 11 e6 60				   ld de, .typefaults 
60c0 3e 00				ld a, display_row_1 
60c2 cd db 0b				call str_at_display 
60c5 11 65 ee				    ld de, debug_mark 
60c8 3e 11				ld a, display_row_1+17 
60ca cd db 0b				call str_at_display 
60cd cd eb 0b				call update_display 
60d0			 
60d0				; prompt before entering montior for investigating issue 
60d0			 
60d0 3e 78			ld a, display_row_4 
60d2 11 6e 18			ld de, endprog 
60d5			 
60d5 cd eb 0b			call update_display		 
60d8			 
60d8 cd 08 1b			call next_page_prompt 
60db			 
60db e1					pop hl 
60dc d1					pop de 
60dd cd c2 18				call monitor 
60e0 cd 26 1f				call forth_warmstart 
60e3 c3 be 17				jp warmstart_afterauto 
60e6			 
60e6			 
60e6 .. 00		.typefaults: db "STR Type Expected TOS!",0 
60fd			 
60fd			.show_fault: 	 
60fd d5					push de 
60fe cd c8 0b				call clear_display 
6101 d1					pop de 
6102 3e 00				ld a, display_row_1 
6104 cd db 0b				call str_at_display 
6107 11 65 ee				    ld de, debug_mark 
610a 3e 11				ld a, display_row_1+17 
610c cd db 0b				call str_at_display 
610f cd eb 0b				call update_display 
6112			 
6112				; prompt before entering montior for investigating issue 
6112			 
6112 3e 78			ld a, display_row_4 
6114 11 6e 18			ld de, endprog 
6117			 
6117 cd eb 0b			call update_display		 
611a			 
611a cd 08 1b			call next_page_prompt 
611d			 
611d e1					pop hl 
611e d1					pop de 
611f cd c2 18				call monitor 
6122			; do a dump to cli and not warmstart so we preserve all of the uwords.  
6122			; TODO Make optional fault restart to cli or warm boot? 
6122					;jp warmstart 
6122 c3 02 18				jp cli 
6125 76					halt 
6126			 
6126			 
6126			; handle the auto run of code from files in storage 
6126			 
6126			 
6126			include "forth_startup.asm" 
6126			; Which startup method to use? 
6126			; 
6126			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
6126			; followed by loading of a list of scripts in eeprom 
6126			 
6126			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
6126			; from eeprom 
6126			 
6126			; Select with define in main stubs 
6126			 
6126			if STARTUP_V1 
6126				include "forth_startupv1.asm" 
6126			; Startup script loading version 1 
6126			 
6126			; If SE storage is available first stage is to use the selected file 
6126			; then go through the eeprom list 
6126			 
6126 .. 00		sprompt1: db "Startup load...",0 
6136 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
614c			 
614c			 
614c			 
614c			 
614c			forth_startup: 
614c 21 7b 52			ld hl, startcmds 
614f 3e 00			ld a, 0 
6151 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
6154			 
6154 e5			.start1:	push hl 
6155 cd c8 0b			call clear_display 
6158 11 26 61			ld de, sprompt1 
615b 3e 00		        ld a, display_row_1 
615d cd db 0b			call str_at_display 
6160 11 36 61			ld de, sprompt2 
6163 3e 28		        ld a, display_row_2 
6165 cd db 0b			call str_at_display 
6168 e1				pop hl 
6169 e5				push hl 
616a 5e				ld e,(hl) 
616b 23				inc hl 
616c 56				ld d,(hl) 
616d 3e 50		        ld a, display_row_3 
616f cd db 0b			call str_at_display 
6172 cd eb 0b			call update_display 
6175			 
6175			 
6175 3a e1 e6			ld a, (os_last_cmd) 
6178 fe 00			cp 0 
617a 28 05			jr z, .startprompt 
617c cd f4 0a			call delay250ms 
617f 18 24			jr .startdo 
6181				 
6181				 
6181			 
6181			.startprompt: 
6181			 
6181 3e 9f			ld a,display_row_4 + display_cols - 1 
6183 11 06 1b		        ld de, endprg 
6186 cd db 0b			call str_at_display 
6189 cd eb 0b			call update_display 
618c cd 00 0b			call delay1s 
618f cd fe 62			call cin_wait 
6192						 
6192 fe 2a			cp '*' 
6194 28 5e			jr z, .startupend1 
6196 fe 23			cp '#' 
6198 20 07			jr nz, .startno 
619a 3e 01			ld a, 1 
619c 32 e1 e6			ld (os_last_cmd),a 
619f 18 04			jr .startdo 
61a1 fe 31		.startno:	cp '1' 
61a3 28 3a			jr z,.startnxt  
61a5			 
61a5				; exec startup line 
61a5			.startdo:	 
61a5 e1				pop hl 
61a6 e5				push hl 
61a7				 
61a7 5e				ld e,(hl) 
61a8 23				inc hl 
61a9 56				ld d,(hl) 
61aa eb				ex de,hl 
61ab			 
61ab e5				push hl 
61ac			 
61ac 3e 00			ld a, 0 
61ae				;ld a, FORTH_END_BUFFER 
61ae cd 66 11			call strlent 
61b1 23				inc hl   ; include zero term to copy 
61b2 06 00			ld b,0 
61b4 4d				ld c,l 
61b5 e1				pop hl 
61b6 11 bb e2			ld de, scratch 
61b9 ed b0			ldir 
61bb			 
61bb			 
61bb 21 bb e2			ld hl, scratch 
61be cd ca 1f			call forthparse 
61c1 cd 06 20			call forthexec 
61c4 cd 20 1f			call forthexec_cleanup 
61c7			 
61c7 3e 78			ld a, display_row_4 
61c9 11 6e 18			ld de, endprog 
61cc			 
61cc cd eb 0b			call update_display		 
61cf			 
61cf 3a e1 e6			ld a, (os_last_cmd) 
61d2 fe 00			cp 0 
61d4 20 09			jr nz, .startnxt 
61d6 cd 08 1b			call next_page_prompt 
61d9 cd c8 0b		        call clear_display 
61dc cd eb 0b			call update_display		 
61df			 
61df				; move onto next startup line? 
61df			.startnxt: 
61df			 
61df cd f4 0a			call delay250ms 
61e2 e1				pop hl 
61e3			 
61e3 23				inc hl 
61e4 23				inc hl 
61e5			 
61e5 e5				push hl 
61e6 5e				ld e, (hl) 
61e7 23				inc hl 
61e8 56				ld d, (hl) 
61e9 e1				pop hl 
61ea				; TODO replace 0 test 
61ea			 
61ea eb				ex de, hl 
61eb cd 1e 0e			call ishlzero 
61ee			;	ld a,e 
61ee			;	add d 
61ee			;	cp 0    ; any left to do? 
61ee eb				ex de, hl 
61ef c2 54 61			jp nz, .start1 
61f2 18 01			jr .startupend 
61f4			 
61f4 e1			.startupend1: pop hl 
61f5			.startupend: 
61f5			 
61f5 cd c8 0b			call clear_display 
61f8 cd eb 0b			call update_display 
61fb c9				ret 
61fc			if STORAGE_SE 
61fc			 
61fc			sprompt3: db "Loading from start-up file?:",0 
61fc			sprompt4: db "(Y=Any key/N=No)",0 
61fc			 
61fc			 
61fc			forth_autoload: 
61fc			 
61fc				; load block 0 of store 1 
61fc				 
61fc				ld a, $fe      ; bit 0 clear 
61fc				ld (spi_device), a 
61fc			 
61fc				call storage_get_block_0 
61fc			 
61fc				ld a, (store_page+STORE_0_AUTOFILE) 
61fc			 
61fc				cp 0 
61fc				ret z     ; auto start not enabled 
61fc			 
61fc				call clear_display 
61fc			 
61fc				; set bank 
61fc			 
61fc					ld a, (store_page+STORE_0_BANKRUN) 
61fc					ld (spi_device), a 
61fc			 
61fc				; get file id to load from and get the file name to display 
61fc			 
61fc					ld a, (store_page+STORE_0_FILERUN) 
61fc			 
61fc					ld l, 0 
61fc					ld h, a 
61fc					ld de, store_page 
61fc			 
61fc					if DEBUG_FORTH_WORDS 
61fc						DMARK "ASp" 
61fc						CALLMONITOR 
61fc					endif 
61fc					call storage_read 
61fc			 
61fc					if DEBUG_FORTH_WORDS 
61fc						DMARK "ASr" 
61fc						CALLMONITOR 
61fc					endif 
61fc			 
61fc					call ishlzero 
61fc					ret z             ; file not found 
61fc			 
61fc					ld a, display_row_2 + 10 
61fc					ld de, store_page+3 
61fc					call str_at_display 
61fc				 
61fc			; 
61fc			 
61fc				ld a, display_row_1+5 
61fc				ld de, sprompt3 
61fc				call str_at_display 
61fc				ld a, display_row_3+15 
61fc				ld de, sprompt4 
61fc				call str_at_display 
61fc			 
61fc				call update_display 
61fc			 
61fc				call cin_wait 
61fc				cp 'n' 
61fc				ret z 
61fc				cp 'N' 
61fc				ret z 
61fc			 
61fc				call delay1s 
61fc			 
61fc				ld a, (store_page+2) 
61fc				ld (store_openmaxext), a    ; save count of ext 
61fc				ld a, 1  
61fc				ld (store_openext), a    ; save count of ext 
61fc			 
61fc			.autof:  
61fc				ld l , a 
61fc				 
61fc				ld a, (store_page) 
61fc				ld h, a	 
61fc				ld de, store_page 
61fc					if DEBUG_FORTH_WORDS 
61fc						DMARK "ASl" 
61fc						CALLMONITOR 
61fc					endif 
61fc					call storage_read 
61fc				call ishlzero 
61fc				ret z 
61fc			;	jr z, .autoend 
61fc			 
61fc					if DEBUG_FORTH_WORDS 
61fc						DMARK "ASc" 
61fc						CALLMONITOR 
61fc					endif 
61fc				ld de, store_page+2 
61fc				ld a, display_row_4 
61fc				call str_at_display 
61fc			 
61fc				call update_display 
61fc				call delay250ms 
61fc			 
61fc			 
61fc			 
61fc				ld hl, store_page+2 
61fc				call forthparse 
61fc				call forthexec 
61fc				call forthexec_cleanup 
61fc			 
61fc				 
61fc				ld a, (store_openext) 
61fc				inc a 
61fc				ld (store_openext), a    ; save count of ext 
61fc			 
61fc				jr .autof 
61fc			;.autofdone: 
61fc			; 
61fc			;		if DEBUG_FORTH_WORDS 
61fc			;			DMARK "ASx" 
61fc			;			CALLMONITOR 
61fc			;		endif 
61fc			;;	call clear_display 
61fc			;	ret 
61fc			 
61fc			 
61fc			 
61fc			endif 
# End of file forth_startupv1.asm
61fc			endif 
61fc			if STARTUP_V2 
61fc				include "forth_startupv2.asm" 
61fc			endif 
61fc			 
# End of file forth_startup.asm
61fc			 
61fc			; eof 
# End of file forth_kernel.asm
61fc			;include "nascombasic.asm" 
61fc			 
61fc			 
61fc			; find out where the code ends if loaded into RAM (for SC114) 
61fc			;endofcode:  
61fc			;	nop 
61fc			 
61fc			 
61fc			; jump to nmi vector 
61fc			 
61fc			init_nmi: 
61fc 3e c9			ld a, $c9   ; RET 
61fe 32 72 ee			ld (nmi_vector), a 
6201 c9				ret 
6202			nmi: 
6202 e5				push hl 
6203 d5				push de 
6204 c5				push bc 
6205 f5				push af 
6206 cd 72 ee			call nmi_vector 
6209 f5				push af 
620a c5				push bc 
620b d5				push de 
620c e5				push hl 
620d ed 4d			reti 
620f			 
620f			 
620f			; eof 
620f			 
# End of file main.asm
620f			;include "firmware_lcd_4x40.asm" 
620f			;;include "firmware_lcd_4x20.asm" 
620f			include "firmware_cpm_display.asm" 
620f			 
620f			; Serial display interface for SC114 
620f			 
620f			 
620f			display_row_1: equ 0 
620f			display_row_2: equ display_row_1+display_cols 
620f			display_row_3: equ display_row_2 + display_cols 
620f			display_row_4: equ display_row_3 + display_cols 
620f			 
620f			kLCDWidth:  EQU display_cols             ;Width in characters 
620f			kLCD_Line1: EQU 0x00  
620f			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
620f			; E1 
620f			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
620f			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
620f			 
620f			lcd_init: 
620f				; no init as handled by the SCM bios 
620f c9				ret 
6210			 
6210			 
6210			; low level functions for direct screen writes 
6210			 
6210			; output char at pos? 
6210			fLCD_Str: 
6210			        ;out (SC114_SIO_1_OUT),a 
6210 c5				push bc 
6211 d5				push de 
6212 5f				ld e, a 
6213			; TODO Replace with CP/M BIOS call 
6213 0e 02			ld c, $02 
6215 cd 05 00			call 5 
6218 d1				pop de 
6219 c1				pop bc 
621a c9				ret 
621b			 
621b			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
621b			fLCD_Pos: 
621b				; use ASCII escape to position 
621b			        ;out (SC114_SIO_1_OUT),a 
621b c5				push bc 
621c d5				push de 
621d 5f				ld e, a 
621e 0e 02			ld c, $02 
6220			; TODO Replace with CP/M BIOS call 
6220 cd 05 00			call 5 
6223 d1				pop de 
6224 c1				pop bc 
6225			 
6225 c9				ret 
6226			 
6226			; output char at pos 
6226			fLCD_Data: 
6226			      ;  out (SC114_SIO_1_OUT),a 
6226 c5				push bc 
6227 d5				push de 
6228 0e 02			ld c, $02 
622a 5f				ld e, a 
622b			; TODO Replace with CP/M BIOS call 
622b cd 05 00			call 5 
622e d1				pop de 
622f c1				pop bc 
6230			 
6230 c9				ret 
6231			 
6231			; ascii cls  
6231			 
6231 1b 5b 48 24	.cls:   db 27, '[', 'H', "$" 
6235			 
6235 0d 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ..	.clscpm: db 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,10,10,10,10,10,"$" 
624c			;.clscpm: db 3, $3c,"$" 
624c			 
624c			; write the frame buffer given in hl to hardware  
624c			write_display: 
624c			 
624c			API: equ 0 
624c			 
624c			if API 
624c				push bc 
624c				ld b, 4 
624c			 
624c			        ld (display_write_tmp), hl 	  
624c			 
624c				; clear and home cursor 
624c			 
624c				ld c, 9 
624c				ld de, .cls 
624c			; TODO Replace with CP/M BIOS call 
624c				call 5 
624c			 
624c			 
624c			.writeln: 
624c			 
624c				ld de, (display_write_tmp) 
624c				ld c, 6 
624c			; TODO Replace with CP/M BIOS call 
624c				rst $30 
624c				ld c, 7 
624c				rst $30 
624c			 
624c				ld hl, (display_write_tmp) 
624c				ld de, display_cols 
624c				add hl,de 
624c				ld (display_write_tmp),hl 
624c			 
624c				djnz  .writeln 
624c			 
624c				pop bc 
624c			 
624c			 
624c				ret 
624c			endif 
624c e5				push hl 
624d c5				push bc 
624e d5				push de 
624f			 
624f			;	ld c, 2 
624f			;	;ld de, .cls 
624f			;	ld a, 27 
624f			;	rst $30 
624f			;	ld c, 2 
624f			;	;ld de, .cls 
624f			;	ld a, '[' 
624f			;	rst $30 
624f			; 
624f			;	ld c, 2 
624f			;	;ld de, .cls 
624f			;	ld a, 'H' 
624f			;	rst $30 
624f			; 
624f			 
624f			 
624f			; lots of CR/LF 
624f			;	ld c, 9 
624f			;	ld de, .clscpm 
624f			;	call 5 
624f			 
624f			; xterm cls 
624f 0e 02			ld c, 2 
6251 1e 1b			ld e, 27 
6253 cd 05 00			call 5 
6256			; cls causes too much flicker 
6256			;	ld c, 2 
6256			;	ld e, 'c' 
6256			;	call 5 
6256			 
6256			; use xterm home instead 
6256 0e 02			ld c, 2 
6258 1e 5b			ld e, '[' 
625a cd 05 00			call 5 
625d 0e 02			ld c, 2 
625f 1e 48			ld e, 'H' 
6261 cd 05 00			call 5 
6264			LLL: equ 0 
6264			 
6264			if LLL 
6264			 
6264				ld c, 2 
6264				;ld de, .cls 
6264				ld e, 27 
6264			; TODO Replace with CP/M BIOS call 
6264				call 5 
6264			 
6264			 
6264				ld c, 2 
6264				;ld de, .cls 
6264				ld e, '[' 
6264			; TODO Replace with CP/M BIOS call 
6264				call 5 
6264				ld c, 2 
6264				;ld de, .cls 
6264				ld e, '2' 
6264			; TODO Replace with CP/M BIOS call 
6264				call 5 
6264				ld c, 2 
6264				;ld de, .cls 
6264				ld e, 'J' 
6264			; TODO Replace with CP/M BIOS call 
6264				call 5 
6264			 
6264			endif 
6264			 
6264 d1				pop de 
6265 c1				pop bc 
6266 e1				pop hl 
6267			 
6267			 
6267 22 c3 eb		        ld (display_write_tmp), hl 	  
626a 3e 00			ld a, kLCD_Line1 
626c			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
626c 06 28			ld b, display_cols 
626e ed 5b c3 eb		ld de, (display_write_tmp) 
6272 cd f5 62			call write_len_string 
6275				 
6275			 
6275 e5			push hl 
6276 d5			push de 
6277 c5			push bc 
6278 0e 02			ld c, 2 
627a 1e 0a			ld e, 10 
627c cd 05 00			call 5 
627f 0e 02			ld c, 2 
6281 1e 0d			ld e, 13 
6283 cd 05 00			call 5 
6286			; TODO Replace with CP/M BIOS call 
6286				;rst $30 
6286 c1			pop bc 
6287 d1			pop de 
6288 e1			pop hl 
6289			 
6289				 
6289 2a c3 eb			ld hl, (display_write_tmp) 
628c 11 28 00			ld de, display_cols 
628f 19				add hl,de 
6290 22 c3 eb			ld (display_write_tmp),hl 
6293			 
6293				 
6293 3e 28			ld a, kLCD_Line2 
6295			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
6295 06 28			ld b, display_cols 
6297 ed 5b c3 eb		ld de, (display_write_tmp) 
629b cd f5 62			call write_len_string 
629e				 
629e 2a c3 eb			ld hl, (display_write_tmp) 
62a1 11 28 00			ld de, display_cols 
62a4 19				add hl,de 
62a5 22 c3 eb			ld (display_write_tmp),hl 
62a8			 
62a8 e5			push hl 
62a9 d5			push de 
62aa c5			push bc 
62ab 0e 07			ld c, 7 
62ad			; TODO Replace with CP/M BIOS call 
62ad				;rst $30 
62ad 0e 02			ld c, 2 
62af 1e 0a			ld e, 10 
62b1 cd 05 00			call 5 
62b4 0e 02			ld c, 2 
62b6 1e 0d			ld e, 13 
62b8 cd 05 00			call 5 
62bb c1			pop bc 
62bc d1			pop de 
62bd e1			pop hl 
62be			 
62be				 
62be 3e 50			ld a, kLCD_Line3 
62c0			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
62c0 06 28			ld b, display_cols 
62c2 ed 5b c3 eb		ld de, (display_write_tmp) 
62c6 cd f5 62			call write_len_string 
62c9				 
62c9 2a c3 eb			ld hl, (display_write_tmp) 
62cc 11 28 00			ld de, display_cols 
62cf 19				add hl,de 
62d0 22 c3 eb			ld (display_write_tmp),hl 
62d3			 
62d3 e5			push hl 
62d4 d5			push de 
62d5 c5			push bc 
62d6 0e 07			ld c, 7 
62d8			; TODO Replace with CP/M BIOS call 
62d8				;rst $30 
62d8 0e 02			ld c, 2 
62da 1e 0a			ld e, 10 
62dc cd 05 00			call 5 
62df 0e 02			ld c, 2 
62e1 1e 0d			ld e, 13 
62e3 cd 05 00			call 5 
62e6 c1			pop bc 
62e7 d1			pop de 
62e8 e1			pop hl 
62e9			 
62e9				 
62e9 3e 78			ld a, kLCD_Line4 
62eb			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
62eb 06 28			ld b, display_cols 
62ed ed 5b c3 eb		ld de, (display_write_tmp) 
62f1 cd f5 62			call write_len_string 
62f4 c9					ret 
62f5			 
62f5			 
62f5				; write out a fixed length string given in b from de 
62f5			 
62f5 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
62f6 cd 26 62		            CALL fLCD_Data      ;Write character to display 
62f9 13				inc de 
62fa 10 f9			djnz write_len_string 
62fc c9				ret 
62fd			 
62fd			 
62fd			; eof 
# End of file firmware_cpm_display.asm
62fd			;include "firmware_key_5x10.asm" 
62fd			;;include "firmware_key_4x10.asm" 
62fd			include "firmware_key_cpm.asm" 
62fd			; Serial keyboard interface for SC114 
62fd			 
62fd			 
62fd			key_init: 
62fd				; no init as handled by the SCM bios 
62fd c9				ret 
62fe			 
62fe			 
62fe			cin_wait: 
62fe			;	ld a, 0 
62fe			;	ret 
62fe			 
62fe				;in a,(SC114_SIO_1_IN) 
62fe			        ; Use SCM API to get from whatever console device we are using 
62fe			 
62fe			; TODO Replace with CP/M BIOS call 
62fe c5				push bc 
62ff 0e 01			ld c, $01 
6301 cd 05 00			call 5 
6304 c1				pop bc 
6305 c9				ret 
6306			 
6306			cinndb:  
6306			cin: 
6306			 
6306			 
6306 c5				push bc 
6307			 
6307				; any key waiting to process? 
6307			; TODO Replace with CP/M BIOS call 
6307 0e 06			ld c, $06 
6309 cd 05 00			call 5 
630c 28 0d			jr z, .cin_skip 
630e			 
630e				; yep, get it 
630e			 
630e 0e 01			ld c, $01 
6310			; TODO Replace with CP/M BIOS call 
6310 cd 05 00			call 5 
6313			 
6313 fe 7f			cp $7f     ; back space 
6315 20 02			jr nz, .skipbs 
6317 3e 08			ld a, KEY_BS 
6319			.skipbs: 
6319			 
6319 c1				pop bc 
631a c9				ret 
631b			.cin_skip: 
631b 3e 00			ld a, 0 
631d c1				pop bc 
631e c9				ret 
631f			 
631f			 
631f			 
631f			 
# End of file firmware_key_cpm.asm
631f			endofcode:  
631f			baseram:  
631f 00				nop 
6320			 
6320			heap_start: equ baseram+15  ; Starting address of heap 
6320			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
6320			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
6320			;VDU:  EQU     endofcode           ; BASIC Work space 
6320			; eof 
6320			 
# End of file os_mega_cpm.asm
6320
