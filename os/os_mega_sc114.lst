# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 71 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-08-11 13:24' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
801f			 
801f			 
801f			 
801f			;        nop  
801f			;        nop 
801f			;;	org 05h		; null out bdos call 
801f			; 
801f			;        nop  
801f			;        nop  
801f			;        nop 
801f			;;	org 08h 
801f			;;; 
801f			;;	jp cin		; rst 8 - char in 
801f			;;; 
801f			; 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;	org 010h 
801f			;; 
801f			;	jp cout		; rest 010h  - char out 
801f			;; 
801f			;	org 01bh   
801f			; 
801f			;	;jp  		; rst 01bh   - write string to display 
801f			;	jp str_at_display 
801f			; 
801f			; 
801f			;	org 020h 
801f			; 
801f			;	; jp		 ; rst 020h - read char at screen location 
801f			; 
801f			;	org 028h 
801f			 
801f				; jp		 ; rst 028h  - storage i/o 
801f			 
801f			; 	org 030h 
801f			;	jp break_point_state 
801f			  
801f			; $30  
801f			; org 038h 
801f			; $38 
801f			 
801f			; TODO any more important entry points to add to jump table for easier coding use? 
801f			 
801f			if BASE_KEV = 1  
801f			 
801f				; need to be at $66 for nmi support 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255 
801f				jp nmi 
801f			endif 
801f			 
801f			include "firmware.asm" 
801f			  
801f			; main constants (used here and in firmware)  
801f			  
801f			; TODO have page 0 of storage as bios  
801f			  
801f			Device_A: equ 0h  
801f			Device_B: equ 040h          ; Sound  
801f			  
801f			if BASE_KEV  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_SC114  
801f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			; TODO fixup for CPM  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			Device_D: equ 0c0h             ; Keyboard and LCD  
801f			  
801f			; Odd specific debug points for testing hardware dev  
801f			  
801f			;if DEBUG_LEVEL0  
801f			;	include "debug_level0.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL1  
801f			;	include "debug_level1.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL2  
801f			;	include "debug_level2.asm"  
801f			;endif  
801f			  
801f			  
801f			CALLMONITOR: macro  
801f			;	call break_point_state  
801f			; now use the break point debug vector  
801f				call debug_vector  
801f				endm  
801f			  
801f			MALLOC_1: equ 1        ; from dk88   
801f			MALLOC_2: equ 0           ; broke  
801f			MALLOC_3: equ 0           ; really broke  
801f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801f			  
801f			if BASE_KEV   
801f			;stacksize: equ 256  
801f			; each stack entry is three bytes (type + word)  
801f			stacksize: equ 3*150  
801f			  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 512  
801f			endif  
801f			if BASE_SC114  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			;if STORAGE_SE == 0  
801f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801f			;endif  
801f			  
801f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801f			  
801f			STORE_0_AUTORUN: equ $20  
801f			  
801f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801f			  
801f			STORE_0_AUTOFILE: equ $21  
801f			STORE_0_BANKRUN: equ $23  
801f			STORE_0_FILERUN: equ $24  
801f			  
801f			; Block 0 offsets for settings  
801f			  
801f			; if set then skip prompt for start up and accept all  
801f			  
801f			STORE_0_QUICKSTART: equ $25  
801f			  
801f			; Blocks where directory table is held  
801f			  
801f			; Reducing the number of entries increases the max file size  
801f			  
801f			;STORE_DIR_START: equ 1  
801f			;STORE_DIR_END: equ 33  
801f			  
801f			; Blocks from where file data is stored  
801f			  
801f			;STORE_DATA_START: equ STORE_DIR_END + 1  
801f			  
801f			; Block indicators (<32 are data files)  
801f			  
801f			;STORE_BLOCK_CFG: equ $8f       ; config block  
801f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801f			;STORE_BLOCK_FREE: equ $85       ; data block free  
801f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801f			  
801f			  
801f			  
801f			; Directory entry flags  
801f			  
801f			;STORE_DIR_FREE: equ 0  
801f			;STORE_DIR_FILE:  equ 1  
801f			  
801f			; Structure offsets to directory entries  
801f			;STORE_DE_FLAG: equ 0  
801f			;STORE_DE_MAXEXT: equ 1  
801f			;STORE_DE_FILENAME: equ 2  
801f			  
801f			; Structure offsets to block 0  
801f			  
801f			;STORE_BK0_ISFOR: equ 1  
801f			;STORE_BK0_LABEL: equ 3  
801f			  
801f			; memory allocation   
801f			  
801f			chk_stund: equ tos+2           ; underflow check word  
801f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801f			  
801f			; keyscan table needs rows x cols buffer  
801f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801f			  
801f			keyscan_table_row1: equ chk_stovr -key_cols-1  
801f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801f			keyscan_scancol: equ keyscan_table-key_cols  
801f			;keyscan_table_len: equ key_rows*key_cols  
801f			;keybufptr: equ keyscan_table - 2  
801f			;keysymbol: equ keybufptr - 1  
801f			key_held: equ keyscan_scancol-1	; currently held  
801f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801f			key_fa: equ key_repeat_ct -1 ;  
801f			key_fb: equ key_fa -1 ;  
801f			key_fc: equ key_fb -1 ;  
801f			key_fd: equ key_fc -1 ;  
801f			key_face_held: equ key_fd - 1   
801f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801f			  
801f			hardware_config: equ key_face_held - 10  
801f			  
801f			; hardware config switches  
801f			; TODO add bitmasks on includes for hardware  
801f			; high byte for expansion ids  
801f			;     0000 0000  no card inserted  
801f			;     0000 0001  storage card inserted  
801f			;     0000 0010  spi sd card active  
801f			  
801f			;       
801f			; low byte:  
801f			;     0000 0001   4x4 keypad  
801f			;     0000 0010   full keyboard  
801f			;     0000 0011   spi/ext keyboard  
801f			;     0000 0100   20x4 lcd  
801f			;     0000 1000   40x4 lcd  
801f			;     0000 1100   spi/ext display  
801f			;     0001 0000   ide interface available  
801f			  
801f			hardware_word: equ hardware_config - 2  
801f			  
801f			; debug marker - optional display of debug point on the debug screens  
801f			  
801f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801f			  
801f			debug_umark: equ debug_vector - 6  ; current user mark  
801f			debug_mark: equ debug_umark - 4    ; internal word debug points  
801f			  
801f			; input_str vars  
801f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801f			input_size: equ input_start -1  ; number of chars  
801f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801f			input_len: equ input_cur_onoff - 5 ; length of current input  
801f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801f			  
801f			; cursor blink rate  
801f			CUR_BLINK_RATE: equ $09  
801f			;CUR_BLINK_RATE: equ 15  
801f			  
801f			key_actual_pressed: equ input_cursor - 1   
801f			key_symbol: equ key_actual_pressed - 1   
801f			key_shift: equ key_symbol - 1   
801f			  
801f			; Display allocation  
801f			  
801f			;display_rows: equ 4     ; move out to mini and mega files  
801f			;display_cols: equ 20  
801f			  
801f			display_fb_len: equ display_rows*display_cols  
801f			  
801f			; primary frame buffer     
801f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801f			; working frame buffers  
801f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801f			display_fb3: equ  display_fb1-display_fb_len - 1  
801f			display_fb2: equ  display_fb3-display_fb_len - 1  
801f			;  
801f			; pointer to active frame buffer  
801f			display_fb_active: equ display_fb2 - 2  
801f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801f			display_write_tmp: equ display_lcde1e2 - 2  
801f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801f			  
801f			;  
801f			  
801f			;; can load into de directory  
801f			cursor_col: equ display_active-1  
801f			cursor_row: equ cursor_col-1  
801f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801f			  
801f			; maths vars  
801f			  
801f			LFSRSeed: equ cursor_shape -20   
801f			randData: equ LFSRSeed - 2  
801f			xrandc: equ randData - 2  
801f			stackstore: equ xrandc - 2  
801f			seed1: equ  stackstore -2   
801f			seed2: equ seed1 - 2  
801f			  
801f			; cf storage vars  
801f			  
801f			iErrorNum:  equ seed2-1         ;Error number  
801f			iErrorReg:  equ iErrorNum -1              ;Error register  
801f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801f			  
801f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801f			  
801f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801f			  
801f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801f			store_tmpid: equ store_tmp3 - 1		; page temp id  
801f			store_tmpext: equ store_tmpid - 1		; file extent temp  
801f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801f			;  
801f			; spi vars  
801f			  
801f			  
801f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801f			spi_device_id: equ spi_device - 1    ; human readable bank number  
801f			  
801f			;;;;; forth cli params  
801f			  
801f			; TODO use a different frame buffer for forth???  
801f			  
801f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801f			  
801f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801f			  
801f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801f			  
801f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801f			  
801f			; os/forth token vars  
801f			  
801f			os_last_cmd: equ os_var_array-255  
801f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801f			os_current_i: equ os_cli_cmd-2  
801f			os_cur_ptr: equ os_current_i-2  
801f			os_word_scratch: equ os_cur_ptr-30  
801f			os_tok_len: equ os_word_scratch - 2  
801f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801f			os_tok_malloc: equ os_tok_ptr - 2  
801f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801f			execscratch: equ os_input-255        ; exec cmd eval buffer  
801f			scratch: equ execscratch-255  
801f			  
801f			os_stack_1: equ scratch - 3       ; stack holding area 1  
801f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801f			  
801f			  
801f			; temp locations for new word processing to save on adding more   
801f			  
801f			os_new_malloc: equ os_stack_4-2  
801f			os_new_parse_len: equ os_new_malloc - 2  
801f			os_new_word_len: equ os_new_parse_len - 2  
801f			os_new_work_ptr: equ os_new_word_len - 2  
801f			os_new_src_ptr: equ os_new_work_ptr - 2  
801f			os_new_exec: equ os_new_src_ptr - 2  
801f			os_new_exec_ptr: equ os_new_exec - 2  
801f			  
801f			; resume memory alloocations....  
801f			  
801f			;os_view_disable: equ os_new_exec_ptr - 1  
801f			os_view_af: equ os_new_exec_ptr - 2  
801f			os_view_hl: equ os_view_af -2  
801f			os_view_de: equ os_view_hl - 2  
801f			os_view_bc: equ os_view_de - 2  
801f			  
801f			; stack checksum word  
801f			if DEBUG_STACK_IMB  
801f				curframe: equ  os_view_de - 5  
801f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			else  
801f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			endif  
801f			  
801f			; with data stack could see memory filled with junk. need some memory management   
801f			; malloc and free entry points added  
801f			  
801f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			;heap_end: equ free_list-1  ; Starting address of heap  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			heap_end: equ chk_word-1  ; Starting address of heap  
801f			  
801f			  
801f			;if BASE_KEV   
801f			;heap_start: equ 0800eh  ; Starting address of heap  
801f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;heap_start: equ baseram+15  ; Starting address of heap  
801f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;endif  
801f			  
801f			  
801f			;;;;  
801f			  
801f			  
801f			; change below to point to last memory alloc above  
801f			topusermem:  equ   heap_start  
801f			  
801f			;if BASE_KEV   
801f			;baseusermem: equ 08000h  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;;aseusermem:     equ    12  
801f			;baseusermem:     equ    prompt  
801f			;;baseusermem:     equ    endofcode  
801f			;endif  
801f			  
801f			  
801f			; **********************************************************************  
801f			; **  Constants  
801f			; **********************************************************************  
801f			  
801f			; Constants used by this code module  
801f			kDataReg:   EQU Device_D           ;PIO port A data register  
801f			kContReg:   EQU Device_D+2           ;PIO port A control register  
801f			  
801f			  
801f			portbdata:  equ Device_D+1    ; port b data  
801f			portbctl:   equ Device_D+3    ; port b control  
801f			  
801f			  
801f			;KEY_SHIFT:   equ 5  
801f			;KEY_SYMBOLSHIFT:  equ 6  
801f			  
801f			KEY_SHIFTLOCK: equ 4  
801f			  
801f			  
801f			KEY_UP: equ 5  
801f			KEY_NEXTWORD: equ 6  
801f			KEY_PREVWORD: equ 7  
801f			KEY_BS: equ 8  
801f			KEY_TAB:  equ 9  
801f			KEY_DOWN: equ 10  
801f			KEY_LEFT: equ 11  
801f			KEY_RIGHT: equ 12  
801f			KEY_CR:   equ 13  
801f			KEY_HOME: equ 14  
801f			KEY_END: equ 15  
801f			  
801f			KEY_F1: equ 16  
801f			KEY_F2: equ 17  
801f			KEY_F3: equ 18  
801f			KEY_F4: equ 19  
801f			  
801f			KEY_F5: equ 20  
801f			KEY_F6: equ 21  
801f			KEY_F7: equ 22  
801f			KEY_F8: equ 23  
801f			  
801f			KEY_F9: equ 24  
801f			KEY_F10: equ 25  
801f			KEY_F11: equ 26  
801f			KEY_F12: equ 27  
801f			  
801f			;if DEBUG_KEY  
801f			;	KEY_MATRIX_NO_PRESS: equ '.'  
801f			;	KEY_SHIFT:   equ '.'  
801f			;	KEY_SYMBOLSHIFT:  equ '.'  
801f			;else  
801f				KEY_SHIFT:   equ '~'  
801f				KEY_SYMBOLSHIFT:  equ '~'  
801f				KEY_MATRIX_NO_PRESS: equ '~'  
801f			;endi  
801f			  
801f			  
801f			  
801f			  
801f			; Macro to make adding debug marks easier  
801f			  
801f			DMARK: macro str  
801f				push af  
801f				ld a, (.dmark)  
801f				ld (debug_mark),a  
801f				ld a, (.dmark+1)  
801f				ld (debug_mark+1),a  
801f				ld a, (.dmark+2)  
801f				ld (debug_mark+2),a  
801f				jr .pastdmark  
801f			.dmark: db str  
801f			.pastdmark: pop af  
801f			  
801f			endm  
801f			  
801f			  
801f			; macro to detect for stack imbalances  
801f			  
801f			include "stackimbal.asm"  
801f			; Macro and code to detect stock imbalances 
801f			 
801f			SPPUSH: equ 0 
801f			 
801f			; Add a stack frame which can be checked before return 
801f			 
801f			STACKFRAME: macro onoff frame1 frame2 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f						exx 
801f			 
801f						ld de, frame1 
801f						ld a, d 
801f						ld hl, curframe 
801f						call hexout 
801f						ld a, e 
801f						ld hl, curframe+2 
801f						call hexout 
801f			  
801f						ld hl, frame1 
801f						push hl 
801f						ld hl, frame2 
801f						push hl 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			endm 
801f			 
801f			STACKFRAMECHK: macro onoff frame1 frame2 
801f			 
801f					 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						exx 
801f						; check stack frame SP 
801f			 
801f						ld hl, frame2 
801f						pop de   ; frame2 
801f			 
801f						call cmp16 
801f						jr nz, .spnosame 
801f						 
801f			 
801f						ld hl, frame1 
801f						pop de   ; frame1 
801f			 
801f						call cmp16 
801f						jr z, .spfrsame 
801f			 
801f						.spnosame: call showsperror 
801f			 
801f						.spfrsame: nop 
801f			 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			 
801f			 
801f			endm 
801f			 
801f			 
801f			; for a sub routine, wrap SP collection and comparisons 
801f			 
801f			; Usage: 
801f			; 
801f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801f			 
801f			SAVESP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f			 
801f						ld (store_sp+(storeword*4)), sp 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			CHECKSP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f			 
801f						; save SP after last save 
801f				 
801f						ld (store_sp+(storeword*4)+2), sp 
801f			 
801f						push hl 
801f						ld hl, store_sp+(storeword*4) 
801f						call check_stack_sp  
801f						pop hl 
801f			 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			if DEBUG_STACK_IMB 
801f			 
801f			check_stack_sp: 
801f					push de 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					push de 
801f			 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					pop hl 
801f			 
801f			 
801f					; check to see if the same 
801f			 
801f					call cmp16 
801f					jr z, .spsame 
801f			 
801f					; not same 
801f			 
801f					call showsperror 
801f			.spsame: 
801f			 
801f					pop de 
801f			 
801f					ret 
801f			 
801f			.sperr:  db "Stack imbalance",0 
801f			 
801f			 
801f			showsperror: 
801f			 
801f			 
801f				push hl 
801f				push af 
801f				push de 
801f				call clear_display 
801f				ld de, .sperr 
801f				ld a,0 
801f			;	ld de,os_word_scratch 
801f				call str_at_display 
801f				ld a, display_row_1+17 
801f				ld de, debug_mark 
801f				call str_at_display 
801f				ld a, 0 
801f				ld (curframe+4),a 
801f				ld hl, curframe 
801f				ld de, os_word_scratch 
801f				ld a, display_row_4 
801f				call str_at_display 
801f				call update_display 
801f				;call break_point_state 
801f				call cin_wait 
801f			 
801f			;	ld a, ' ' 
801f			;	ld (os_view_disable), a 
801f				call bp_on 
801f				pop de	 
801f				pop af 
801f				pop hl 
801f				CALLMONITOR 
801f				ret 
801f			 
801f			endif 
801f			 
801f			 
801f			 
801f			; eof 
# End of file stackimbal.asm
801f			  
801f			;TODO macro to calc col and row offset into screen  
801f			  
801f			  
801f			  
801f			hardware_init:  
801f			  
801f				  
801f			  
801f					;ld a, 0  
801f					;ld (hardware_diag), a  
801f			  
801f					; clear all the buffers  
801f			  
801f 21 0a ed				ld hl, display_fb1  
8022 22 c6 eb				ld (display_fb_active), hl  
8025			  
8025 cd bd 8a				call clear_display  
8028			  
8028 21 c8 eb				ld hl, display_fb2  
802b 22 c6 eb				ld (display_fb_active), hl  
802e			  
802e cd bd 8a				call clear_display  
8031			  
8031					; init primary frame buffer area  
8031 21 ab ed				ld hl, display_fb0  
8034 22 c6 eb				ld (display_fb_active), hl  
8037			  
8037 cd bd 8a				call clear_display  
803a			  
803a			  
803a cd c7 dc				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803d			  
803d cd 69 dd			call key_init  
8040 cd ad 80			call storage_init  
8043			  
8043				; setup malloc functions  
8043			  
8043				if MALLOC_1  
8043 cd a1 90				call  heap_init  
8046				endif  
8046				if MALLOC_4  
8046					call  heap_init  
8046				endif  
8046			  
8046				; init sound hardware if present  
8046			  
8046				if SOUND_ENABLE  
8046					call sound_init  
8046				endif  
8046			  
8046				; lcd test sequence  
8046					  
8046 cd e0 8a			call update_display  
8049 cd 00 8a			call delay1s  
804c 3e 2b			ld a,'+'  
804e cd c2 8a			call fill_display  
8051 cd e0 8a			call update_display  
8054 cd 00 8a			call delay1s  
8057 3e 2a			ld a,'*'  
8059 cd c2 8a			call fill_display  
805c cd e0 8a			call update_display  
805f cd 00 8a			call delay1s  
8062 3e 2d			ld a,'-'  
8064 cd c2 8a			call fill_display  
8067 cd e0 8a			call update_display  
806a cd 00 8a			call delay1s  
806d			  
806d			; boot splash screen  
806d			if display_cols == 20	  
806d			        ld a, display_row_1    
806d			else  
806d 3e 0a		        ld a, display_row_1 +10   
806f			endif  
806f 11 cf 95			ld de, prom_bootmsg  
8072 cd d0 8a			call str_at_display  
8075 cd e0 8a			call update_display  
8078			  
8078			  
8078 cd 00 8a			call delay1s  
807b cd 00 8a			call delay1s  
807e			if display_cols == 20	  
807e			            LD   A, display_row_3+2  
807e			else  
807e 3e 5c		            LD   A, display_row_3+12  
8080			endif  
8080 11 e4 95			ld de, prom_bootmsg1  
8083 cd d0 8a			call str_at_display  
8086			; display debug level  
8086 3e 78		            LD   A, display_row_4  
8088 11 1b 80			ld de, debuglevel  
808b cd d0 8a			call str_at_display  
808e			  
808e cd e0 8a			call update_display  
8091 cd 00 8a			call delay1s  
8094 cd 00 8a			call delay1s  
8097			  
8097			;	ld a, display_row_4+3  
8097			;	ld de, bootmsg2  
8097			;	call str_at_display  
8097			;	call update_display  
8097			;	call delay1s  
8097			;	call delay1s  
8097			  
8097			; debug mark setup  
8097			  
8097 3e 5f		ld a, '_'  
8099 32 65 ee		ld (debug_mark),a  
809c 32 66 ee		ld (debug_mark+1),a  
809f 32 67 ee		ld (debug_mark+2),a  
80a2 3e 00		ld a,0  
80a4 32 68 ee		ld (debug_mark+3),a  
80a7 32 69 ee		ld (debug_umark),a  
80aa			  
80aa c9					ret  
80ab			  
80ab			  
80ab			;bootmsg2:	db "Firmware v0.1",0  
80ab			  
80ab			; a 4x20 lcd  
80ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
80ab			  
80ab			;if display_cols == 20  
80ab			;	include "firmware_lcd_4x20.asm"  
80ab			;endif  
80ab			  
80ab			;if display_cols == 40  
80ab			;	include "firmware_lcd_4x40.asm"  
80ab			;endif  
80ab			  
80ab			;  
80ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
80ab			; TODO abstract the bit bang video out interface for dual display  
80ab			; TODO wire video out to tx pin on rc2014 bus  
80ab			  
80ab			; must supply cin, and cin_wait for low level hardware abstraction   
80ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
80ab			; test scancode  
80ab			  
80ab			;;;;;  
80ab			;;;  
80ab			; Moved out to mini and maxi versions  
80ab			;  
80ab			; include "firmware_key_4x4.asm"  
80ab			; using existing 4 wire x 4 resistor array for input  
80ab			;include "firmware_key_4x10.asm"  
80ab			; need to mod the board for 5 rows due to resistor array  
80ab			;include "firmware_key_5x10.asm"  
80ab			  
80ab			; storage hardware interface  
80ab			  
80ab			; use microchip serial eeprom for storage  
80ab			  
80ab			  
80ab			if STORAGE_SE  
80ab				include "firmware_spi.asm"  
80ab				include "firmware_seeprom.asm"  
80ab			else  
80ab			   ; create some stubs for the labels  
80ab c9			se_readbyte: ret  
80ac c9			se_writebyte: ret  
80ad c9			storage_init: ret  
80ae			  
80ae			endif  
80ae			  
80ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80ae			;include "firmware_cf.asm"  
80ae			  
80ae			; load up high level storage hardward abstractions  
80ae			include "firmware_storage.asm"  
80ae			 
80ae			; persisent storage hardware abstraction layer  
80ae			 
80ae			 
80ae			 
80ae			; Block 0 on storage is a config state 
80ae			 
80ae			 
80ae			 
80ae			; TODO add read phy block and write phy block functions 
80ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80ae			 
80ae			; Abstraction layer  
80ae			 
80ae			; Logocial block size is same size as physical size - using tape concept 
80ae			 
80ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80ae			 
80ae			 
80ae			 
80ae			; Filesystem layout (Logical layout) 
80ae			; 
80ae			; Block 0 - Bank config  
80ae			; 
80ae			;      Byte - 0 file id counter 
80ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80ae			;      Byte - 3-20 zero terminated bank label 
80ae			; 
80ae			; Block 1 > File storage 
80ae			; 
80ae			;      Byte 0 file id    - block 0 file details 
80ae			;      Byte 1 block id - block 0 is file  
80ae			;            Byte 2-15 - File name 
80ae			; 
80ae			;       - to end of block data 
80ae			; 
80ae			 
80ae			; Get ID for the file named in pointer held HL 
80ae			; Returns ID in HL = 255 if no file found 
80ae			 
80ae			storage_getid: 
80ae			 
80ae 22 6d ea			ld (store_tmp1), hl 
80b1			 
80b1				if DEBUG_STORESE 
80b1					DMARK "SGI" 
80b1 f5				push af  
80b2 3a c6 80			ld a, (.dmark)  
80b5 32 65 ee			ld (debug_mark),a  
80b8 3a c7 80			ld a, (.dmark+1)  
80bb 32 66 ee			ld (debug_mark+1),a  
80be 3a c8 80			ld a, (.dmark+2)  
80c1 32 67 ee			ld (debug_mark+2),a  
80c4 18 03			jr .pastdmark  
80c6 ..			.dmark: db "SGI"  
80c9 f1			.pastdmark: pop af  
80ca			endm  
# End of macro DMARK
80ca					CALLMONITOR 
80ca cd 6f ee			call debug_vector  
80cd				endm  
# End of macro CALLMONITOR
80cd				endif 
80cd				; get block 0 and set counter for number of files to scan 
80cd			 
80cd cd 38 82			call storage_get_block_0 
80d0			 
80d0 3a 74 ea			ld a, (store_page) 
80d3 47				ld b, a 
80d4			 
80d4				; get extent 0 of each file id 
80d4			 
80d4				if DEBUG_STORESE 
80d4					DMARK "SGc" 
80d4 f5				push af  
80d5 3a e9 80			ld a, (.dmark)  
80d8 32 65 ee			ld (debug_mark),a  
80db 3a ea 80			ld a, (.dmark+1)  
80de 32 66 ee			ld (debug_mark+1),a  
80e1 3a eb 80			ld a, (.dmark+2)  
80e4 32 67 ee			ld (debug_mark+2),a  
80e7 18 03			jr .pastdmark  
80e9 ..			.dmark: db "SGc"  
80ec f1			.pastdmark: pop af  
80ed			endm  
# End of macro DMARK
80ed					CALLMONITOR 
80ed cd 6f ee			call debug_vector  
80f0				endm  
# End of macro CALLMONITOR
80f0				endif 
80f0 60			.getloop:	ld h, b 
80f1 2e 00				ld l, 0 
80f3 c5					push bc 
80f4			 
80f4 11 74 ea				ld de, store_page 
80f7				if DEBUG_STORESE 
80f7					DMARK "SGr" 
80f7 f5				push af  
80f8 3a 0c 81			ld a, (.dmark)  
80fb 32 65 ee			ld (debug_mark),a  
80fe 3a 0d 81			ld a, (.dmark+1)  
8101 32 66 ee			ld (debug_mark+1),a  
8104 3a 0e 81			ld a, (.dmark+2)  
8107 32 67 ee			ld (debug_mark+2),a  
810a 18 03			jr .pastdmark  
810c ..			.dmark: db "SGr"  
810f f1			.pastdmark: pop af  
8110			endm  
# End of macro DMARK
8110					CALLMONITOR 
8110 cd 6f ee			call debug_vector  
8113				endm  
# End of macro CALLMONITOR
8113				endif 
8113 cd e0 86				call storage_read 
8116 cd 13 8d				call ishlzero 
8119 28 2d				jr z, .gap 
811b					 
811b					; have a file name read. Is it one we want. 
811b			 
811b 2a 6d ea				ld hl, (store_tmp1) 
811e 11 77 ea				ld de, store_page+3   ; file name 
8121			 
8121				if DEBUG_STORESE 
8121					DMARK "SGc" 
8121 f5				push af  
8122 3a 36 81			ld a, (.dmark)  
8125 32 65 ee			ld (debug_mark),a  
8128 3a 37 81			ld a, (.dmark+1)  
812b 32 66 ee			ld (debug_mark+1),a  
812e 3a 38 81			ld a, (.dmark+2)  
8131 32 67 ee			ld (debug_mark+2),a  
8134 18 03			jr .pastdmark  
8136 ..			.dmark: db "SGc"  
8139 f1			.pastdmark: pop af  
813a			endm  
# End of macro DMARK
813a					CALLMONITOR 
813a cd 6f ee			call debug_vector  
813d				endm  
# End of macro CALLMONITOR
813d				endif 
813d cd 88 90				call strcmp 
8140 20 06				jr nz, .gap   ; not this one 
8142			 
8142 c1				        pop bc 
8143			 
8143 26 00				ld h, 0 
8145 68					ld l, b 
8146 18 22				jr .getdone 
8148						 
8148			 
8148			 
8148			 
8148			.gap: 
8148				if DEBUG_STORESE 
8148					DMARK "SGg" 
8148 f5				push af  
8149 3a 5d 81			ld a, (.dmark)  
814c 32 65 ee			ld (debug_mark),a  
814f 3a 5e 81			ld a, (.dmark+1)  
8152 32 66 ee			ld (debug_mark+1),a  
8155 3a 5f 81			ld a, (.dmark+2)  
8158 32 67 ee			ld (debug_mark+2),a  
815b 18 03			jr .pastdmark  
815d ..			.dmark: db "SGg"  
8160 f1			.pastdmark: pop af  
8161			endm  
# End of macro DMARK
8161					CALLMONITOR 
8161 cd 6f ee			call debug_vector  
8164				endm  
# End of macro CALLMONITOR
8164				endif 
8164			 
8164 c1					pop bc 
8165 10 89				djnz .getloop 
8167 21 ff 00				ld hl, 255 
816a			.getdone: 
816a			 
816a				if DEBUG_STORESE 
816a					DMARK "SGe" 
816a f5				push af  
816b 3a 7f 81			ld a, (.dmark)  
816e 32 65 ee			ld (debug_mark),a  
8171 3a 80 81			ld a, (.dmark+1)  
8174 32 66 ee			ld (debug_mark+1),a  
8177 3a 81 81			ld a, (.dmark+2)  
817a 32 67 ee			ld (debug_mark+2),a  
817d 18 03			jr .pastdmark  
817f ..			.dmark: db "SGe"  
8182 f1			.pastdmark: pop af  
8183			endm  
# End of macro DMARK
8183					CALLMONITOR 
8183 cd 6f ee			call debug_vector  
8186				endm  
# End of macro CALLMONITOR
8186				endif 
8186			 
8186 c9				ret 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			; Read Block 
8187			; ---------- 
8187			; 
8187			; With current bank 
8187			;  
8187			; Get block number to read 
8187			; Load physical blocks starting at start block into buffer 
8187			 
8187			; de points to buffer to use 
8187			; hl holds logical block number  
8187			 
8187			storage_read_block: 
8187			 
8187				; TODO bank selection 
8187			 
8187				; for each of the physical blocks read it into the buffer 
8187 06 40			ld b, STORE_BLOCK_PHY 
8189			 
8189				if DEBUG_STORESE 
8189 d5					push de 
818a				endif 
818a				 
818a			.rl1:    
818a			 
818a				; read physical block at hl into de 
818a			        ; increment hl and de to next read position on exit 
818a			 
818a e5				push hl 
818b d5				push de	 
818c c5				push bc 
818d			;	if DEBUG_STORESE 
818d			;		push af 
818d			;		ld a, 'R' 
818d			;		ld (debug_mark),a 
818d			;		pop af 
818d			;		CALLMONITOR 
818d			;	endif 
818d cd ab 80			call se_readbyte 
8190			;	if DEBUG_STORESE 
8190			;		ld a,(spi_portbyte) 
8190			;		ld l, a 
8190			;		push af 
8190			;		ld a, '1' 
8190			;		ld (debug_mark),a 
8190			;		pop af 
8190			;		CALLMONITOR 
8190			;	endif 
8190 c1				pop bc 
8191 d1				pop de 
8192 e1				pop hl 
8193 12				ld (de),a 
8194 23				inc hl 
8195 13				inc de 
8196			 
8196			;	if DEBUG_STORESE 
8196			;		push af 
8196			;		ld a, 'r' 
8196			;		ld (debug_mark),a 
8196			;		pop af 
8196			;		CALLMONITOR 
8196			;	endif 
8196			 
8196 10 f2			djnz .rl1 
8198			 
8198				if DEBUG_STORESE 
8198					DMARK "SRB" 
8198 f5				push af  
8199 3a ad 81			ld a, (.dmark)  
819c 32 65 ee			ld (debug_mark),a  
819f 3a ae 81			ld a, (.dmark+1)  
81a2 32 66 ee			ld (debug_mark+1),a  
81a5 3a af 81			ld a, (.dmark+2)  
81a8 32 67 ee			ld (debug_mark+2),a  
81ab 18 03			jr .pastdmark  
81ad ..			.dmark: db "SRB"  
81b0 f1			.pastdmark: pop af  
81b1			endm  
# End of macro DMARK
81b1 d1					pop de 
81b2			; 
81b2			;		push af 
81b2			;		ld a, 'R' 
81b2			;		ld (debug_mark),a 
81b2			;		pop af 
81b2					CALLMONITOR 
81b2 cd 6f ee			call debug_vector  
81b5				endm  
# End of macro CALLMONITOR
81b5				endif 
81b5 c9				ret	 
81b6				 
81b6			 
81b6			; File Size 
81b6			; --------- 
81b6			; 
81b6			;   hl file id 
81b6			; 
81b6			;  returns in hl the number of blocks 
81b6			 
81b6			storage_file_size: 
81b6 5d				ld e, l 
81b7 16 00			ld d, 0 
81b9 21 40 00			ld hl, STORE_BLOCK_PHY 
81bc					if DEBUG_FORTH_WORDS 
81bc						DMARK "SIZ" 
81bc f5				push af  
81bd 3a d1 81			ld a, (.dmark)  
81c0 32 65 ee			ld (debug_mark),a  
81c3 3a d2 81			ld a, (.dmark+1)  
81c6 32 66 ee			ld (debug_mark+1),a  
81c9 3a d3 81			ld a, (.dmark+2)  
81cc 32 67 ee			ld (debug_mark+2),a  
81cf 18 03			jr .pastdmark  
81d1 ..			.dmark: db "SIZ"  
81d4 f1			.pastdmark: pop af  
81d5			endm  
# End of macro DMARK
81d5						CALLMONITOR 
81d5 cd 6f ee			call debug_vector  
81d8				endm  
# End of macro CALLMONITOR
81d8					endif 
81d8 cd ba 84			call storage_findnextid 
81db			 
81db cd 13 8d			call ishlzero 
81de			;	ld a, l 
81de			;	add h 
81de			;	cp 0 
81de c8				ret z			; block not found so EOF 
81df			 
81df 11 74 ea			ld de, store_page 
81e2 cd 87 81			call storage_read_block 
81e5			 
81e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
81e8 6f				ld l, a 
81e9 26 00			ld h, 0 
81eb c9			 	ret 
81ec			 
81ec			 
81ec			; Write Block 
81ec			; ----------- 
81ec			; 
81ec			; With current bank 
81ec			;  
81ec			; Get block number to write 
81ec			; Write physical blocks starting at start block from buffer 
81ec			  
81ec			storage_write_block: 
81ec				; TODO bank selection 
81ec			 
81ec				; for each of the physical blocks read it into the buffer 
81ec 06 40			ld b, STORE_BLOCK_PHY 
81ee			 
81ee				if DEBUG_STORESE 
81ee					DMARK "SWB" 
81ee f5				push af  
81ef 3a 03 82			ld a, (.dmark)  
81f2 32 65 ee			ld (debug_mark),a  
81f5 3a 04 82			ld a, (.dmark+1)  
81f8 32 66 ee			ld (debug_mark+1),a  
81fb 3a 05 82			ld a, (.dmark+2)  
81fe 32 67 ee			ld (debug_mark+2),a  
8201 18 03			jr .pastdmark  
8203 ..			.dmark: db "SWB"  
8206 f1			.pastdmark: pop af  
8207			endm  
# End of macro DMARK
8207			 
8207					;push af 
8207					;ld a, 'W' 
8207					;ld (debug_mark),a 
8207					;pop af 
8207					CALLMONITOR 
8207 cd 6f ee			call debug_vector  
820a				endm  
# End of macro CALLMONITOR
820a				endif 
820a			 
820a			; might not be working 
820a			;	call se_writepage 
820a			 
820a			;	ret 
820a			; 
820a			 
820a			 
820a			 
820a			.wl1:    
820a			 
820a				; read physical block at hl into de 
820a			        ; increment hl and de to next read position on exit 
820a			 
820a e5				push hl 
820b d5				push de	 
820c c5				push bc 
820d 1a				ld a,(de) 
820e				;if DEBUG_STORESE 
820e			;		push af 
820e			;		ld a, 'W' 
820e			;		ld (debug_mark),a 
820e			;		pop af 
820e			;		CALLMONITOR 
820e			;	endif 
820e cd ac 80			call se_writebyte 
8211			;	call delay250ms 
8211 00				nop 
8212 00				nop 
8213 00				nop 
8214			;	if DEBUG_STORESE 
8214			;		push af 
8214			;		ld a, 'w' 
8214			;		ld (debug_mark),a 
8214			;		pop af 
8214			;		CALLMONITOR 
8214			;	endif 
8214 c1				pop bc 
8215 d1				pop de 
8216 e1				pop hl 
8217 23				inc hl 
8218 13				inc de 
8219			 
8219			 
8219 10 ef			djnz .wl1 
821b			 
821b				if DEBUG_STORESE 
821b					DMARK "SW2" 
821b f5				push af  
821c 3a 30 82			ld a, (.dmark)  
821f 32 65 ee			ld (debug_mark),a  
8222 3a 31 82			ld a, (.dmark+1)  
8225 32 66 ee			ld (debug_mark+1),a  
8228 3a 32 82			ld a, (.dmark+2)  
822b 32 67 ee			ld (debug_mark+2),a  
822e 18 03			jr .pastdmark  
8230 ..			.dmark: db "SW2"  
8233 f1			.pastdmark: pop af  
8234			endm  
# End of macro DMARK
8234			 
8234					;push af 
8234					;ld a, 'W' 
8234					;ld (debug_mark),a 
8234					;pop af 
8234					CALLMONITOR 
8234 cd 6f ee			call debug_vector  
8237				endm  
# End of macro CALLMONITOR
8237				endif 
8237 c9				ret	 
8238			 
8238			; Init bank 
8238			; --------- 
8238			; 
8238			; With current bank 
8238			; 
8238			; Setup block 0 config 
8238			;     Set 0 file id counter 
8238			;     Set formatted byte pattern 
8238			;     Zero out bank label 
8238			;      
8238			; For every logical block write 0-1 byte as null 
8238			 
8238			storage_get_block_0: 
8238			 
8238				; TODO check presence 
8238			 
8238				; get block 0 config 
8238			 
8238 21 00 00			ld hl, 0 
823b 11 74 ea			ld de, store_page 
823e cd 87 81			call storage_read_block 
8241			 
8241				if DEBUG_STORESE 
8241					DMARK "SB0" 
8241 f5				push af  
8242 3a 56 82			ld a, (.dmark)  
8245 32 65 ee			ld (debug_mark),a  
8248 3a 57 82			ld a, (.dmark+1)  
824b 32 66 ee			ld (debug_mark+1),a  
824e 3a 58 82			ld a, (.dmark+2)  
8251 32 67 ee			ld (debug_mark+2),a  
8254 18 03			jr .pastdmark  
8256 ..			.dmark: db "SB0"  
8259 f1			.pastdmark: pop af  
825a			endm  
# End of macro DMARK
825a 11 74 ea				ld de, store_page 
825d			;		push af 
825d			;		ld a, 'i' 
825d			;		ld (debug_mark),a 
825d			;		pop af 
825d					CALLMONITOR 
825d cd 6f ee			call debug_vector  
8260				endm  
# End of macro CALLMONITOR
8260				endif 
8260			 
8260				; is this area formatted? 
8260			 
8260			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8260 2a 75 ea			ld hl, (store_page+1) 
8263 3e 80			ld a,0x80 
8265 bd				cp l 
8266 20 22			jr nz, .ininotformatted 
8268				; do a double check 
8268 3e 27			ld a, 0x27 
826a bc				cp h 
826b 20 1d			jr nz, .ininotformatted 
826d			 
826d				; formatted then 
826d			 
826d				if DEBUG_STORESE 
826d					DMARK "SB1" 
826d f5				push af  
826e 3a 82 82			ld a, (.dmark)  
8271 32 65 ee			ld (debug_mark),a  
8274 3a 83 82			ld a, (.dmark+1)  
8277 32 66 ee			ld (debug_mark+1),a  
827a 3a 84 82			ld a, (.dmark+2)  
827d 32 67 ee			ld (debug_mark+2),a  
8280 18 03			jr .pastdmark  
8282 ..			.dmark: db "SB1"  
8285 f1			.pastdmark: pop af  
8286			endm  
# End of macro DMARK
8286					;push af 
8286					;ld a, 'I' 
8286					;ld (debug_mark),a 
8286					;pop af 
8286					CALLMONITOR 
8286 cd 6f ee			call debug_vector  
8289				endm  
# End of macro CALLMONITOR
8289				endif 
8289 c9				ret 
828a			 
828a			.ininotformatted: 
828a				; bank not formatted so poke various bits to make sure 
828a			 
828a				if DEBUG_STORESE 
828a					DMARK "SB2" 
828a f5				push af  
828b 3a 9f 82			ld a, (.dmark)  
828e 32 65 ee			ld (debug_mark),a  
8291 3a a0 82			ld a, (.dmark+1)  
8294 32 66 ee			ld (debug_mark+1),a  
8297 3a a1 82			ld a, (.dmark+2)  
829a 32 67 ee			ld (debug_mark+2),a  
829d 18 03			jr .pastdmark  
829f ..			.dmark: db "SB2"  
82a2 f1			.pastdmark: pop af  
82a3			endm  
# End of macro DMARK
82a3					;push af 
82a3					;ld a, 'f' 
82a3					;ld (debug_mark),a 
82a3					;pop af 
82a3					CALLMONITOR 
82a3 cd 6f ee			call debug_vector  
82a6				endm  
# End of macro CALLMONITOR
82a6				endif 
82a6			 
82a6 cd c3 89			call storage_clear_page 
82a9			 
82a9 21 74 ea			ld hl, store_page 
82ac 3e 00			ld a, 0 
82ae				 
82ae 77				ld (hl),a   ; reset file counter 
82af			 
82af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82b2 22 75 ea		 	ld (store_page+1), hl	 
82b5			 
82b5				; set default label 
82b5			 
82b5 21 51 83			ld hl, .defaultbanklabl 
82b8 11 77 ea		 	ld de, store_page+3 
82bb 01 0f 00			ld bc, 15 
82be ed b0			ldir 
82c0			 
82c0				; Append the current bank id 
82c0 21 80 ea			ld hl, store_page+3+9 
82c3 3a 59 ea			ld a, (spi_device_id) 
82c6 77				ld (hl), a 
82c7			 
82c7				; save default page 0 
82c7			 
82c7 21 00 00			ld hl, 0 
82ca 11 74 ea			ld de, store_page 
82cd				if DEBUG_STORESE 
82cd					DMARK "SB3" 
82cd f5				push af  
82ce 3a e2 82			ld a, (.dmark)  
82d1 32 65 ee			ld (debug_mark),a  
82d4 3a e3 82			ld a, (.dmark+1)  
82d7 32 66 ee			ld (debug_mark+1),a  
82da 3a e4 82			ld a, (.dmark+2)  
82dd 32 67 ee			ld (debug_mark+2),a  
82e0 18 03			jr .pastdmark  
82e2 ..			.dmark: db "SB3"  
82e5 f1			.pastdmark: pop af  
82e6			endm  
# End of macro DMARK
82e6			;		push af 
82e6			;		ld a, 'F' 
82e6			;		ld (debug_mark),a 
82e6			;		pop af 
82e6					CALLMONITOR 
82e6 cd 6f ee			call debug_vector  
82e9				endm  
# End of macro CALLMONITOR
82e9				endif 
82e9 cd ec 81			call storage_write_block 
82ec				if DEBUG_STORESE 
82ec					DMARK "SB4" 
82ec f5				push af  
82ed 3a 01 83			ld a, (.dmark)  
82f0 32 65 ee			ld (debug_mark),a  
82f3 3a 02 83			ld a, (.dmark+1)  
82f6 32 66 ee			ld (debug_mark+1),a  
82f9 3a 03 83			ld a, (.dmark+2)  
82fc 32 67 ee			ld (debug_mark+2),a  
82ff 18 03			jr .pastdmark  
8301 ..			.dmark: db "SB4"  
8304 f1			.pastdmark: pop af  
8305			endm  
# End of macro DMARK
8305			;		push af 
8305			;		ld a, '>' 
8305			;		ld (debug_mark),a 
8305			;		pop af 
8305					CALLMONITOR 
8305 cd 6f ee			call debug_vector  
8308				endm  
# End of macro CALLMONITOR
8308				endif 
8308			 
8308 00				nop 
8309 00				nop 
830a 00				nop 
830b			 
830b				; now set 0 in every page to mark as a free block 
830b			 
830b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
830d 21 40 00			ld hl, STORE_BLOCK_PHY 
8310			 
8310 3e 00		.setmark1:   	ld a,0 
8312 e5					push hl 
8313 c5					push bc 
8314 cd ac 80				call se_writebyte 
8317 3e 0a			ld a, 10 
8319 cd e5 89			call aDelayInMS 
831c 23				inc hl 
831d cd ac 80				call se_writebyte 
8320 3e 0a			ld a, 10 
8322 cd e5 89			call aDelayInMS 
8325 2b				dec hl 
8326 c1					pop bc 
8327 e1					pop hl 
8328 3e 40				ld a, STORE_BLOCK_PHY 
832a cd ea 8c				call addatohl 
832d 10 e1				djnz .setmark1 
832f			 
832f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8331 3e 00		.setmark2:   	ld a,0 
8333 e5					push hl 
8334 c5					push bc 
8335 cd ac 80				call se_writebyte 
8338 3e 0a			ld a, 10 
833a cd e5 89			call aDelayInMS 
833d 23				inc hl 
833e cd ac 80				call se_writebyte 
8341 3e 0a			ld a, 10 
8343 cd e5 89			call aDelayInMS 
8346 2b				dec hl 
8347 c1					pop bc 
8348 e1					pop hl 
8349 3e 40				ld a, STORE_BLOCK_PHY 
834b cd ea 8c				call addatohl 
834e 10 e1				djnz .setmark2 
8350			 
8350					 
8350			 
8350			 
8350 c9				ret 
8351			 
8351			 
8351			 
8351			 
8351 .. 00		.defaultbanklabl:   db "BankLabel_",0 
835c			 
835c			 
835c			 
835c			; Label Bank 
835c			; ---------- 
835c			; 
835c			; With current bank 
835c			; Read block 0 
835c			; Set label 
835c			; Write block 0 
835c			 
835c			; label str pointer in hl 
835c			 
835c			storage_label:     
835c			 
835c				if DEBUG_STORESE 
835c					DMARK "LBL" 
835c f5				push af  
835d 3a 71 83			ld a, (.dmark)  
8360 32 65 ee			ld (debug_mark),a  
8363 3a 72 83			ld a, (.dmark+1)  
8366 32 66 ee			ld (debug_mark+1),a  
8369 3a 73 83			ld a, (.dmark+2)  
836c 32 67 ee			ld (debug_mark+2),a  
836f 18 03			jr .pastdmark  
8371 ..			.dmark: db "LBL"  
8374 f1			.pastdmark: pop af  
8375			endm  
# End of macro DMARK
8375					CALLMONITOR 
8375 cd 6f ee			call debug_vector  
8378				endm  
# End of macro CALLMONITOR
8378				endif 
8378			 
8378 e5				push hl 
8379			 
8379 cd 38 82			call storage_get_block_0 
837c			 
837c				; set default label 
837c			 
837c e1				pop hl 
837d			 
837d 11 77 ea		 	ld de, store_page+3 
8380 01 0f 00			ld bc, 15 
8383				if DEBUG_STORESE 
8383					DMARK "LB3" 
8383 f5				push af  
8384 3a 98 83			ld a, (.dmark)  
8387 32 65 ee			ld (debug_mark),a  
838a 3a 99 83			ld a, (.dmark+1)  
838d 32 66 ee			ld (debug_mark+1),a  
8390 3a 9a 83			ld a, (.dmark+2)  
8393 32 67 ee			ld (debug_mark+2),a  
8396 18 03			jr .pastdmark  
8398 ..			.dmark: db "LB3"  
839b f1			.pastdmark: pop af  
839c			endm  
# End of macro DMARK
839c					CALLMONITOR 
839c cd 6f ee			call debug_vector  
839f				endm  
# End of macro CALLMONITOR
839f				endif 
839f ed b0			ldir 
83a1				; save default page 0 
83a1			 
83a1 21 00 00			ld hl, 0 
83a4 11 74 ea			ld de, store_page 
83a7				if DEBUG_STORESE 
83a7					DMARK "LBW" 
83a7 f5				push af  
83a8 3a bc 83			ld a, (.dmark)  
83ab 32 65 ee			ld (debug_mark),a  
83ae 3a bd 83			ld a, (.dmark+1)  
83b1 32 66 ee			ld (debug_mark+1),a  
83b4 3a be 83			ld a, (.dmark+2)  
83b7 32 67 ee			ld (debug_mark+2),a  
83ba 18 03			jr .pastdmark  
83bc ..			.dmark: db "LBW"  
83bf f1			.pastdmark: pop af  
83c0			endm  
# End of macro DMARK
83c0					CALLMONITOR 
83c0 cd 6f ee			call debug_vector  
83c3				endm  
# End of macro CALLMONITOR
83c3				endif 
83c3 cd ec 81			call storage_write_block 
83c6			 
83c6 c9				ret 
83c7			 
83c7			 
83c7			 
83c7			; Read Block 0 - Config 
83c7			; --------------------- 
83c7			; 
83c7			; With current bank 
83c7			; Call presence test 
83c7			;    If not present format/init bank  
83c7			; Read block 0  
83c7			;  
83c7			 
83c7			 
83c7			; Dir 
83c7			; --- 
83c7			; 
83c7			; With current bank 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block read byte 2 
83c7			;      if first block of file 
83c7			;         Display file name 
83c7			;         Display type flags for file 
83c7			;        
83c7			 
83c7			; moving to words as this requires stack control 
83c7			 
83c7			 
83c7			; Delete File 
83c7			; ----------- 
83c7			; 
83c7			; With current bank 
83c7			; 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block file id 
83c7			;      If first block of file and dont have file id 
83c7			;         if file to delete 
83c7			;         Save file id 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			;      If file id is one saved 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			 
83c7			 
83c7			.se_done: 
83c7 e1				pop hl 
83c8 c9				ret 
83c9			 
83c9			storage_erase: 
83c9			 
83c9				; hl contains the file id 
83c9			 
83c9 5d				ld e, l 
83ca 16 00			ld d, 0 
83cc 21 40 00			ld hl, STORE_BLOCK_PHY 
83cf					if DEBUG_FORTH_WORDS 
83cf						DMARK "ERA" 
83cf f5				push af  
83d0 3a e4 83			ld a, (.dmark)  
83d3 32 65 ee			ld (debug_mark),a  
83d6 3a e5 83			ld a, (.dmark+1)  
83d9 32 66 ee			ld (debug_mark+1),a  
83dc 3a e6 83			ld a, (.dmark+2)  
83df 32 67 ee			ld (debug_mark+2),a  
83e2 18 03			jr .pastdmark  
83e4 ..			.dmark: db "ERA"  
83e7 f1			.pastdmark: pop af  
83e8			endm  
# End of macro DMARK
83e8						CALLMONITOR 
83e8 cd 6f ee			call debug_vector  
83eb				endm  
# End of macro CALLMONITOR
83eb					endif 
83eb cd ba 84			call storage_findnextid 
83ee cd 13 8d			call ishlzero 
83f1 c8				ret z 
83f2			 
83f2 e5				push hl 
83f3			 
83f3				; TODO check file not found 
83f3			 
83f3 11 74 ea			ld de, store_page 
83f6 cd 87 81			call storage_read_block 
83f9			 
83f9 cd 13 8d			call ishlzero 
83fc ca c7 83			jp z,.se_done 
83ff			 
83ff					if DEBUG_FORTH_WORDS 
83ff						DMARK "ER1" 
83ff f5				push af  
8400 3a 14 84			ld a, (.dmark)  
8403 32 65 ee			ld (debug_mark),a  
8406 3a 15 84			ld a, (.dmark+1)  
8409 32 66 ee			ld (debug_mark+1),a  
840c 3a 16 84			ld a, (.dmark+2)  
840f 32 67 ee			ld (debug_mark+2),a  
8412 18 03			jr .pastdmark  
8414 ..			.dmark: db "ER1"  
8417 f1			.pastdmark: pop af  
8418			endm  
# End of macro DMARK
8418						CALLMONITOR 
8418 cd 6f ee			call debug_vector  
841b				endm  
# End of macro CALLMONITOR
841b					endif 
841b 3a 74 ea			ld a, (store_page)	; get file id 
841e 32 68 ea			ld (store_tmpid), a 
8421			 
8421 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
8424 32 67 ea			ld (store_tmpext), a 
8427			 
8427				; wipe file header 
8427			 
8427 e1				pop hl 
8428 3e 00			ld a, 0 
842a 32 74 ea			ld (store_page), a 
842d 32 75 ea			ld (store_page+1),a 
8430 11 74 ea			ld de, store_page 
8433					if DEBUG_FORTH_WORDS 
8433						DMARK "ER2" 
8433 f5				push af  
8434 3a 48 84			ld a, (.dmark)  
8437 32 65 ee			ld (debug_mark),a  
843a 3a 49 84			ld a, (.dmark+1)  
843d 32 66 ee			ld (debug_mark+1),a  
8440 3a 4a 84			ld a, (.dmark+2)  
8443 32 67 ee			ld (debug_mark+2),a  
8446 18 03			jr .pastdmark  
8448 ..			.dmark: db "ER2"  
844b f1			.pastdmark: pop af  
844c			endm  
# End of macro DMARK
844c						CALLMONITOR 
844c cd 6f ee			call debug_vector  
844f				endm  
# End of macro CALLMONITOR
844f					endif 
844f cd ec 81			call storage_write_block 
8452			 
8452			 
8452				; wipe file extents 
8452			 
8452 3a 67 ea			ld a, (store_tmpext) 
8455 47				ld b, a 
8456			 
8456			.eraext:	  
8456 c5				push bc 
8457			 
8457 21 40 00			ld hl, STORE_BLOCK_PHY 
845a 3a 68 ea			ld a,(store_tmpid) 
845d 5f				ld e, a 
845e 50				ld d, b	 
845f					if DEBUG_FORTH_WORDS 
845f						DMARK "ER3" 
845f f5				push af  
8460 3a 74 84			ld a, (.dmark)  
8463 32 65 ee			ld (debug_mark),a  
8466 3a 75 84			ld a, (.dmark+1)  
8469 32 66 ee			ld (debug_mark+1),a  
846c 3a 76 84			ld a, (.dmark+2)  
846f 32 67 ee			ld (debug_mark+2),a  
8472 18 03			jr .pastdmark  
8474 ..			.dmark: db "ER3"  
8477 f1			.pastdmark: pop af  
8478			endm  
# End of macro DMARK
8478						CALLMONITOR 
8478 cd 6f ee			call debug_vector  
847b				endm  
# End of macro CALLMONITOR
847b					endif 
847b cd ba 84			call storage_findnextid 
847e cd 13 8d			call ishlzero 
8481 ca c7 83			jp z,.se_done 
8484			 
8484 e5				push hl 
8485 11 74 ea			ld de, store_page 
8488 cd 87 81			call storage_read_block 
848b			 
848b				; free block	 
848b			 
848b 3e 00			ld a, 0 
848d 32 74 ea			ld (store_page), a 
8490 32 75 ea			ld (store_page+1),a 
8493 11 74 ea			ld de, store_page 
8496 e1				pop hl 
8497					if DEBUG_FORTH_WORDS 
8497						DMARK "ER4" 
8497 f5				push af  
8498 3a ac 84			ld a, (.dmark)  
849b 32 65 ee			ld (debug_mark),a  
849e 3a ad 84			ld a, (.dmark+1)  
84a1 32 66 ee			ld (debug_mark+1),a  
84a4 3a ae 84			ld a, (.dmark+2)  
84a7 32 67 ee			ld (debug_mark+2),a  
84aa 18 03			jr .pastdmark  
84ac ..			.dmark: db "ER4"  
84af f1			.pastdmark: pop af  
84b0			endm  
# End of macro DMARK
84b0						CALLMONITOR 
84b0 cd 6f ee			call debug_vector  
84b3				endm  
# End of macro CALLMONITOR
84b3					endif 
84b3 cd ec 81			call storage_write_block 
84b6			 
84b6 c1				pop bc 
84b7 10 9d			djnz .eraext 
84b9			 
84b9 c9				ret 
84ba			 
84ba			 
84ba			; Find Free Block 
84ba			; --------------- 
84ba			; 
84ba			; With current bank 
84ba			;  
84ba			; From given starting logical block 
84ba			;    Read block  
84ba			;    If no file id 
84ba			;         Return block id 
84ba			 
84ba			 
84ba			; hl starting page number 
84ba			; hl contains free page number or zero if no pages free 
84ba			; e contains the file id to locate 
84ba			; d contains the block number 
84ba			 
84ba			; TODO change to find file id and use zero for free block 
84ba			 
84ba			storage_findnextid: 
84ba			 
84ba				; now locate first 0 page to mark as a free block 
84ba			 
84ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84bc			;	ld hl, STORE_BLOCK_PHY 
84bc			 
84bc					if DEBUG_FORTH_WORDS 
84bc					DMARK "FNI" 
84bc f5				push af  
84bd 3a d1 84			ld a, (.dmark)  
84c0 32 65 ee			ld (debug_mark),a  
84c3 3a d2 84			ld a, (.dmark+1)  
84c6 32 66 ee			ld (debug_mark+1),a  
84c9 3a d3 84			ld a, (.dmark+2)  
84cc 32 67 ee			ld (debug_mark+2),a  
84cf 18 03			jr .pastdmark  
84d1 ..			.dmark: db "FNI"  
84d4 f1			.pastdmark: pop af  
84d5			endm  
# End of macro DMARK
84d5						CALLMONITOR 
84d5 cd 6f ee			call debug_vector  
84d8				endm  
# End of macro CALLMONITOR
84d8					endif 
84d8			.ff1:   	 
84d8 e5					push hl 
84d9 c5					push bc 
84da d5					push de 
84db cd ab 80				call se_readbyte 
84de 5f					ld e,a 
84df 23					inc hl 
84e0 cd ab 80				call se_readbyte 
84e3 57					ld d, a 
84e4 e1					pop hl 
84e5 e5					push hl 
84e6 cd 08 8d				call cmp16 
84e9 28 49				jr z, .fffound 
84eb			 
84eb d1					pop de 
84ec c1					pop bc 
84ed e1					pop hl 
84ee			 
84ee					; is found? 
84ee					;cp e 
84ee					;ret z 
84ee			 
84ee 3e 40				ld a, STORE_BLOCK_PHY 
84f0 cd ea 8c				call addatohl 
84f3 10 e3				djnz .ff1 
84f5			 
84f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84f7			.ff2:   	 
84f7			 
84f7 e5					push hl 
84f8 c5					push bc 
84f9 d5					push de 
84fa cd ab 80				call se_readbyte 
84fd 5f					ld e,a 
84fe 23					inc hl 
84ff cd ab 80				call se_readbyte 
8502 57					ld d, a 
8503			 
8503 e1					pop hl 
8504 e5					push hl 
8505 cd 08 8d				call cmp16 
8508 28 2a				jr z, .fffound 
850a			 
850a d1					pop de 
850b c1					pop bc 
850c e1					pop hl 
850d					; is found? 
850d					;cp e 
850d					;ret z 
850d			 
850d 3e 40				ld a, STORE_BLOCK_PHY 
850f cd ea 8c				call addatohl 
8512 10 e3				djnz .ff2 
8514			 
8514			 
8514					if DEBUG_FORTH_WORDS 
8514					DMARK "FN-" 
8514 f5				push af  
8515 3a 29 85			ld a, (.dmark)  
8518 32 65 ee			ld (debug_mark),a  
851b 3a 2a 85			ld a, (.dmark+1)  
851e 32 66 ee			ld (debug_mark+1),a  
8521 3a 2b 85			ld a, (.dmark+2)  
8524 32 67 ee			ld (debug_mark+2),a  
8527 18 03			jr .pastdmark  
8529 ..			.dmark: db "FN-"  
852c f1			.pastdmark: pop af  
852d			endm  
# End of macro DMARK
852d					;	push af 
852d					;	ld a, 'n' 
852d					;	ld (debug_mark),a 
852d					;	pop af 
852d						CALLMONITOR 
852d cd 6f ee			call debug_vector  
8530				endm  
# End of macro CALLMONITOR
8530					endif 
8530				; no free marks! 
8530 21 00 00				ld hl, 0 
8533 c9				ret 
8534			.fffound: 
8534				 
8534			 
8534 d1					pop de 
8535 c1					pop bc 
8536 e1					pop hl 
8537					if DEBUG_FORTH_WORDS 
8537					DMARK "FNF" 
8537 f5				push af  
8538 3a 4c 85			ld a, (.dmark)  
853b 32 65 ee			ld (debug_mark),a  
853e 3a 4d 85			ld a, (.dmark+1)  
8541 32 66 ee			ld (debug_mark+1),a  
8544 3a 4e 85			ld a, (.dmark+2)  
8547 32 67 ee			ld (debug_mark+2),a  
854a 18 03			jr .pastdmark  
854c ..			.dmark: db "FNF"  
854f f1			.pastdmark: pop af  
8550			endm  
# End of macro DMARK
8550					;	push af 
8550					;	ld a, 'n' 
8550					;	ld (debug_mark),a 
8550					;	pop af 
8550						CALLMONITOR 
8550 cd 6f ee			call debug_vector  
8553				endm  
# End of macro CALLMONITOR
8553					endif 
8553 c9				ret 
8554			 
8554			 
8554			 
8554			; Free Space 
8554			; ---------- 
8554			; 
8554			; With current bank 
8554			; 
8554			; Set block count to zero 
8554			; Starting with first logical block 
8554			;      Find free block  
8554			;      If block id given, increment block count 
8554			; 
8554			;  
8554			 
8554			 
8554			; hl contains count of free blocks 
8554			 
8554			storage_freeblocks: 
8554			 
8554				; now locate first 0 page to mark as a free block 
8554			 
8554 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8556 21 40 00			ld hl, STORE_BLOCK_PHY 
8559 11 00 00			ld de, 0 
855c			 
855c			.fb1:   	 
855c e5					push hl 
855d c5					push bc 
855e d5					push de 
855f cd ab 80				call se_readbyte 
8562 d1					pop de 
8563 c1					pop bc 
8564 e1					pop hl 
8565			 
8565					; is free? 
8565 fe 00				cp 0 
8567 20 01				jr nz, .ff1cont 
8569 13					inc de 
856a			 
856a			.ff1cont: 
856a			 
856a			 
856a 3e 40				ld a, STORE_BLOCK_PHY 
856c cd ea 8c				call addatohl 
856f 10 eb				djnz .fb1 
8571			 
8571 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8573			.fb2:   	 
8573 e5					push hl 
8574 c5					push bc 
8575 d5					push de 
8576 cd ab 80				call se_readbyte 
8579 d1					pop de 
857a c1					pop bc 
857b e1					pop hl 
857c			 
857c					; is free? 
857c fe 00				cp 0 
857e 20 01				jr nz, .ff2cont 
8580 13					inc de 
8581			 
8581			.ff2cont: 
8581			 
8581 3e 40				ld a, STORE_BLOCK_PHY 
8583 cd ea 8c				call addatohl 
8586 10 eb				djnz .fb2 
8588			 
8588 eb				ex de, hl 
8589 c9				ret 
858a			 
858a			; Get File ID 
858a			; ----------- 
858a			; 
858a			; With current bank 
858a			;  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; For each logical block 
858a			;    Read block file id 
858a			;      If first block of file and dont have file id 
858a			;         if file get id and exit 
858a			 
858a			 
858a			 
858a			 
858a			; Create File 
858a			; ----------- 
858a			; 
858a			; With current bank  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; Increment file id number 
858a			; Save Config 
858a			; Find free block 
858a			; Set buffer with file name and file id 
858a			; Write buffer to free block  
858a			 
858a			 
858a			; hl point to file name 
858a			; hl returns file id 
858a			 
858a			; file format: 
858a			; byte 0 - file id 
858a			; byte 1 - extent number 
858a			; byte 2-> data 
858a			 
858a			; format for extent number 0: 
858a			; 
858a			; byte 0 - file id 
858a			; byte 1 - extent 0 
858a			; byte 2 - extent count 
858a			; byte 3 -> file name and meta data 
858a			 
858a			 
858a			storage_create: 
858a				if DEBUG_STORESE 
858a					DMARK "SCR" 
858a f5				push af  
858b 3a 9f 85			ld a, (.dmark)  
858e 32 65 ee			ld (debug_mark),a  
8591 3a a0 85			ld a, (.dmark+1)  
8594 32 66 ee			ld (debug_mark+1),a  
8597 3a a1 85			ld a, (.dmark+2)  
859a 32 67 ee			ld (debug_mark+2),a  
859d 18 03			jr .pastdmark  
859f ..			.dmark: db "SCR"  
85a2 f1			.pastdmark: pop af  
85a3			endm  
# End of macro DMARK
85a3					CALLMONITOR 
85a3 cd 6f ee			call debug_vector  
85a6				endm  
# End of macro CALLMONITOR
85a6				endif 
85a6			 
85a6 e5				push hl		; save file name pointer 
85a7			 
85a7 cd 38 82			call storage_get_block_0 
85aa			 
85aa 3a 74 ea			ld a,(store_page)	; get current file id 
85ad 3c				inc a 
85ae 32 74 ea			ld (store_page),a 
85b1				 
85b1 32 68 ea			ld (store_tmpid),a			; save id 
85b4			 
85b4 21 00 00			ld hl, 0 
85b7 11 74 ea			ld de, store_page 
85ba				if DEBUG_STORESE 
85ba					DMARK "SCw" 
85ba f5				push af  
85bb 3a cf 85			ld a, (.dmark)  
85be 32 65 ee			ld (debug_mark),a  
85c1 3a d0 85			ld a, (.dmark+1)  
85c4 32 66 ee			ld (debug_mark+1),a  
85c7 3a d1 85			ld a, (.dmark+2)  
85ca 32 67 ee			ld (debug_mark+2),a  
85cd 18 03			jr .pastdmark  
85cf ..			.dmark: db "SCw"  
85d2 f1			.pastdmark: pop af  
85d3			endm  
# End of macro DMARK
85d3					CALLMONITOR 
85d3 cd 6f ee			call debug_vector  
85d6				endm  
# End of macro CALLMONITOR
85d6				endif 
85d6 cd ec 81			call storage_write_block	 ; save update 
85d9			 
85d9				if DEBUG_STORESE 
85d9 11 74 ea				ld de, store_page 
85dc					DMARK "SCC" 
85dc f5				push af  
85dd 3a f1 85			ld a, (.dmark)  
85e0 32 65 ee			ld (debug_mark),a  
85e3 3a f2 85			ld a, (.dmark+1)  
85e6 32 66 ee			ld (debug_mark+1),a  
85e9 3a f3 85			ld a, (.dmark+2)  
85ec 32 67 ee			ld (debug_mark+2),a  
85ef 18 03			jr .pastdmark  
85f1 ..			.dmark: db "SCC"  
85f4 f1			.pastdmark: pop af  
85f5			endm  
# End of macro DMARK
85f5					CALLMONITOR 
85f5 cd 6f ee			call debug_vector  
85f8				endm  
# End of macro CALLMONITOR
85f8				endif 
85f8				;  
85f8				 
85f8 21 40 00			ld hl, STORE_BLOCK_PHY 
85fb 11 00 00			ld de, 0 
85fe cd ba 84			call storage_findnextid 
8601			 
8601 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
8604			 
8604				; TODO detect 0 = no spare blocks 
8604			 
8604				; hl now contains the free page to use for the file header page 
8604			 
8604				if DEBUG_STORESE 
8604				DMARK "SCF" 
8604 f5				push af  
8605 3a 19 86			ld a, (.dmark)  
8608 32 65 ee			ld (debug_mark),a  
860b 3a 1a 86			ld a, (.dmark+1)  
860e 32 66 ee			ld (debug_mark+1),a  
8611 3a 1b 86			ld a, (.dmark+2)  
8614 32 67 ee			ld (debug_mark+2),a  
8617 18 03			jr .pastdmark  
8619 ..			.dmark: db "SCF"  
861c f1			.pastdmark: pop af  
861d			endm  
# End of macro DMARK
861d					CALLMONITOR 
861d cd 6f ee			call debug_vector  
8620				endm  
# End of macro CALLMONITOR
8620				endif 
8620			 
8620 22 5f ea			ld (store_tmppageid), hl 
8623				 
8623 3a 68 ea			ld a,(store_tmpid)    ; get file id 
8626			;	ld a, (store_filecache)			; save to cache 
8626			 
8626 32 74 ea			ld (store_page),a    ; set page id 
8629 3e 00			ld a, 0			 ; extent 0 is file header 
862b 32 75 ea			ld (store_page+1), a   ; set file extent 
862e			 
862e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
8631			 
8631			;	inc hl 		; init block 0 of file 
8631			;	inc hl   		; skip file and extent id 
8631			 ;       ld a, 0 
8631			;	ld (hl),a 
8631			;	ld a, (store_filecache+1)  	; save to cache 
8631			 
8631			;	inc hl    ; file name 
8631				 
8631				 
8631 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8634				if DEBUG_STORESE 
8634					DMARK "SCc" 
8634 f5				push af  
8635 3a 49 86			ld a, (.dmark)  
8638 32 65 ee			ld (debug_mark),a  
863b 3a 4a 86			ld a, (.dmark+1)  
863e 32 66 ee			ld (debug_mark+1),a  
8641 3a 4b 86			ld a, (.dmark+2)  
8644 32 67 ee			ld (debug_mark+2),a  
8647 18 03			jr .pastdmark  
8649 ..			.dmark: db "SCc"  
864c f1			.pastdmark: pop af  
864d			endm  
# End of macro DMARK
864d					CALLMONITOR 
864d cd 6f ee			call debug_vector  
8650				endm  
# End of macro CALLMONITOR
8650				endif 
8650 e1				pop hl    ; get zero term string 
8651 e5				push hl 
8652 3e 00			ld a, 0 
8654 cd 5b 90			call strlent 
8657 23				inc hl   ; cover zero term 
8658 06 00			ld b,0 
865a 4d				ld c,l 
865b e1				pop hl 
865c				;ex de, hl 
865c				if DEBUG_STORESE 
865c					DMARK "SCa" 
865c f5				push af  
865d 3a 71 86			ld a, (.dmark)  
8660 32 65 ee			ld (debug_mark),a  
8663 3a 72 86			ld a, (.dmark+1)  
8666 32 66 ee			ld (debug_mark+1),a  
8669 3a 73 86			ld a, (.dmark+2)  
866c 32 67 ee			ld (debug_mark+2),a  
866f 18 03			jr .pastdmark  
8671 ..			.dmark: db "SCa"  
8674 f1			.pastdmark: pop af  
8675			endm  
# End of macro DMARK
8675					;push af 
8675					;ld a, 'a' 
8675					;ld (debug_mark),a 
8675					;pop af 
8675					CALLMONITOR 
8675 cd 6f ee			call debug_vector  
8678				endm  
# End of macro CALLMONITOR
8678				endif 
8678 ed b0			ldir    ; copy zero term string 
867a				if DEBUG_STORESE 
867a					DMARK "SCA" 
867a f5				push af  
867b 3a 8f 86			ld a, (.dmark)  
867e 32 65 ee			ld (debug_mark),a  
8681 3a 90 86			ld a, (.dmark+1)  
8684 32 66 ee			ld (debug_mark+1),a  
8687 3a 91 86			ld a, (.dmark+2)  
868a 32 67 ee			ld (debug_mark+2),a  
868d 18 03			jr .pastdmark  
868f ..			.dmark: db "SCA"  
8692 f1			.pastdmark: pop af  
8693			endm  
# End of macro DMARK
8693					CALLMONITOR 
8693 cd 6f ee			call debug_vector  
8696				endm  
# End of macro CALLMONITOR
8696				endif 
8696			 
8696				; write file header page 
8696			 
8696 2a 5f ea			ld hl,(store_tmppageid) 
8699 11 74 ea			ld de, store_page 
869c				if DEBUG_STORESE 
869c					DMARK "SCb" 
869c f5				push af  
869d 3a b1 86			ld a, (.dmark)  
86a0 32 65 ee			ld (debug_mark),a  
86a3 3a b2 86			ld a, (.dmark+1)  
86a6 32 66 ee			ld (debug_mark+1),a  
86a9 3a b3 86			ld a, (.dmark+2)  
86ac 32 67 ee			ld (debug_mark+2),a  
86af 18 03			jr .pastdmark  
86b1 ..			.dmark: db "SCb"  
86b4 f1			.pastdmark: pop af  
86b5			endm  
# End of macro DMARK
86b5					;push af 
86b5					;ld a, 'b' 
86b5					;ld (debug_mark),a 
86b5					;pop af 
86b5					CALLMONITOR 
86b5 cd 6f ee			call debug_vector  
86b8				endm  
# End of macro CALLMONITOR
86b8				endif 
86b8 cd ec 81			call storage_write_block 
86bb			 
86bb 3a 68 ea			ld a, (store_tmpid) 
86be 6f				ld l, a 
86bf 26 00			ld h,0 
86c1				if DEBUG_STORESE 
86c1					DMARK "SCz" 
86c1 f5				push af  
86c2 3a d6 86			ld a, (.dmark)  
86c5 32 65 ee			ld (debug_mark),a  
86c8 3a d7 86			ld a, (.dmark+1)  
86cb 32 66 ee			ld (debug_mark+1),a  
86ce 3a d8 86			ld a, (.dmark+2)  
86d1 32 67 ee			ld (debug_mark+2),a  
86d4 18 03			jr .pastdmark  
86d6 ..			.dmark: db "SCz"  
86d9 f1			.pastdmark: pop af  
86da			endm  
# End of macro DMARK
86da					CALLMONITOR 
86da cd 6f ee			call debug_vector  
86dd				endm  
# End of macro CALLMONITOR
86dd				endif 
86dd c9				ret 
86de				 
86de			 
86de			 
86de			; 
86de			; Read File 
86de			; 
86de			; h - file id to locate 
86de			; l - extent to locate 
86de			; de - pointer to string to read into 
86de			; 
86de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86de			 
86de			.sr_fail: 
86de d1				pop de 
86df c9				ret 
86e0			 
86e0			storage_read: 
86e0			 
86e0			 
86e0 d5				push de 
86e1			 
86e1			; TODO BUG the above push is it popped before the RET Z? 
86e1			 
86e1			; TODO how to handle multiple part blocks 
86e1			 
86e1				; locate file extent to read 
86e1			 
86e1 5c				ld e, h 
86e2 55				ld d, l 
86e3			 
86e3			.srext: 
86e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
86e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86ea			 
86ea 21 40 00			ld hl, STORE_BLOCK_PHY 
86ed				if DEBUG_STORESE 
86ed					DMARK "sre" 
86ed f5				push af  
86ee 3a 02 87			ld a, (.dmark)  
86f1 32 65 ee			ld (debug_mark),a  
86f4 3a 03 87			ld a, (.dmark+1)  
86f7 32 66 ee			ld (debug_mark+1),a  
86fa 3a 04 87			ld a, (.dmark+2)  
86fd 32 67 ee			ld (debug_mark+2),a  
8700 18 03			jr .pastdmark  
8702 ..			.dmark: db "sre"  
8705 f1			.pastdmark: pop af  
8706			endm  
# End of macro DMARK
8706					CALLMONITOR 
8706 cd 6f ee			call debug_vector  
8709				endm  
# End of macro CALLMONITOR
8709				endif 
8709 cd ba 84			call storage_findnextid 
870c			 
870c				if DEBUG_STORESE 
870c					DMARK "srf" 
870c f5				push af  
870d 3a 21 87			ld a, (.dmark)  
8710 32 65 ee			ld (debug_mark),a  
8713 3a 22 87			ld a, (.dmark+1)  
8716 32 66 ee			ld (debug_mark+1),a  
8719 3a 23 87			ld a, (.dmark+2)  
871c 32 67 ee			ld (debug_mark+2),a  
871f 18 03			jr .pastdmark  
8721 ..			.dmark: db "srf"  
8724 f1			.pastdmark: pop af  
8725			endm  
# End of macro DMARK
8725					CALLMONITOR 
8725 cd 6f ee			call debug_vector  
8728				endm  
# End of macro CALLMONITOR
8728				endif 
8728 cd 13 8d			call ishlzero 
872b			;	ld a, l 
872b			;	add h 
872b			;	cp 0 
872b 28 b1			jr z,.sr_fail			; block not found so EOF 
872d			 
872d				; save current address for use by higher level words etc 
872d			 
872d 22 65 ea			ld (store_openaddr),hl 
8730			 
8730			 
8730				; hl contains page number to load 
8730 d1				pop de   ; get storage 
8731 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
8735 d5				push de 
8736				if DEBUG_STORESE 
8736					DMARK "srg" 
8736 f5				push af  
8737 3a 4b 87			ld a, (.dmark)  
873a 32 65 ee			ld (debug_mark),a  
873d 3a 4c 87			ld a, (.dmark+1)  
8740 32 66 ee			ld (debug_mark+1),a  
8743 3a 4d 87			ld a, (.dmark+2)  
8746 32 67 ee			ld (debug_mark+2),a  
8749 18 03			jr .pastdmark  
874b ..			.dmark: db "srg"  
874e f1			.pastdmark: pop af  
874f			endm  
# End of macro DMARK
874f					CALLMONITOR 
874f cd 6f ee			call debug_vector  
8752				endm  
# End of macro CALLMONITOR
8752				endif 
8752 cd 87 81			call storage_read_block 
8755			 
8755				; if this a continuation read??? 
8755			 
8755 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8758			 
8758 3e 3f			ld a, STORE_BLOCK_PHY-1 
875a cd ea 8c			call addatohl 
875d 7e				ld a,(hl) 
875e fe 00			cp 0 
8760 28 02			jr z, .markiscont 
8762 3e ff			ld a, 255 
8764			 
8764			.markiscont: 
8764 32 67 ea			ld (store_readcont), a 
8767			 
8767				if DEBUG_STORESE 
8767					DMARK "srC" 
8767 f5				push af  
8768 3a 7c 87			ld a, (.dmark)  
876b 32 65 ee			ld (debug_mark),a  
876e 3a 7d 87			ld a, (.dmark+1)  
8771 32 66 ee			ld (debug_mark+1),a  
8774 3a 7e 87			ld a, (.dmark+2)  
8777 32 67 ee			ld (debug_mark+2),a  
877a 18 03			jr .pastdmark  
877c ..			.dmark: db "srC"  
877f f1			.pastdmark: pop af  
8780			endm  
# End of macro DMARK
8780					CALLMONITOR 
8780 cd 6f ee			call debug_vector  
8783				endm  
# End of macro CALLMONITOR
8783				endif 
8783				; only short reads enabled 
8783			 
8783 3a 6f ea			ld a, (store_longread) 
8786 fe 00			cp 0 
8788 ca 55 88			jp z, .readdone 
878b			 
878b			; TODO if block has no zeros then need to read next block  
878b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
878b			; check last byte of physical block. 
878b			; if not zero then the next block needs to be loaded 
878b			 
878b			 
878b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
878e			 
878e 3e 3f			ld a, STORE_BLOCK_PHY-1 
8790 cd ea 8c			call addatohl 
8793				;dec hl 
8793 7e				ld a,(hl) 
8794				if DEBUG_STORESE 
8794					DMARK "sr?" 
8794 f5				push af  
8795 3a a9 87			ld a, (.dmark)  
8798 32 65 ee			ld (debug_mark),a  
879b 3a aa 87			ld a, (.dmark+1)  
879e 32 66 ee			ld (debug_mark+1),a  
87a1 3a ab 87			ld a, (.dmark+2)  
87a4 32 67 ee			ld (debug_mark+2),a  
87a7 18 03			jr .pastdmark  
87a9 ..			.dmark: db "sr?"  
87ac f1			.pastdmark: pop af  
87ad			endm  
# End of macro DMARK
87ad					CALLMONITOR 
87ad cd 6f ee			call debug_vector  
87b0				endm  
# End of macro CALLMONITOR
87b0				endif 
87b0 fe 00			cp 0 
87b2 ca 55 88			jp z, .readdone 
87b5			 
87b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87b5			 
87b5 23				inc hl 
87b6			 
87b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87b9			 
87b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
87bd			 
87bd eb				ex de, hl 
87be			 
87be				; next ext 
87be			 
87be 23				inc hl 
87bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
87c2			 
87c2				if DEBUG_STORESE 
87c2					DMARK "sF2" 
87c2 f5				push af  
87c3 3a d7 87			ld a, (.dmark)  
87c6 32 65 ee			ld (debug_mark),a  
87c9 3a d8 87			ld a, (.dmark+1)  
87cc 32 66 ee			ld (debug_mark+1),a  
87cf 3a d9 87			ld a, (.dmark+2)  
87d2 32 67 ee			ld (debug_mark+2),a  
87d5 18 03			jr .pastdmark  
87d7 ..			.dmark: db "sF2"  
87da f1			.pastdmark: pop af  
87db			endm  
# End of macro DMARK
87db					CALLMONITOR 
87db cd 6f ee			call debug_vector  
87de				endm  
# End of macro CALLMONITOR
87de				endif 
87de			 
87de				; get and load block 
87de			 
87de cd ba 84			call storage_findnextid 
87e1			 
87e1				if DEBUG_STORESE 
87e1					DMARK "sf2" 
87e1 f5				push af  
87e2 3a f6 87			ld a, (.dmark)  
87e5 32 65 ee			ld (debug_mark),a  
87e8 3a f7 87			ld a, (.dmark+1)  
87eb 32 66 ee			ld (debug_mark+1),a  
87ee 3a f8 87			ld a, (.dmark+2)  
87f1 32 67 ee			ld (debug_mark+2),a  
87f4 18 03			jr .pastdmark  
87f6 ..			.dmark: db "sf2"  
87f9 f1			.pastdmark: pop af  
87fa			endm  
# End of macro DMARK
87fa					CALLMONITOR 
87fa cd 6f ee			call debug_vector  
87fd				endm  
# End of macro CALLMONITOR
87fd				endif 
87fd cd 13 8d			call ishlzero 
8800			;	ld a, l 
8800			;	add h 
8800			;	cp 0 
8800 ca de 86			jp z,.sr_fail			; block not found so EOF 
8803				 
8803				; save current address for use by higher level words etc 
8803			 
8803 22 65 ea			ld (store_openaddr),hl 
8806			 
8806 cd 87 81			call storage_read_block 
8809			 
8809				; on a continuation block, we now have the file id and ext in the middle of the block 
8809				; we need to pull everything back  
8809			 
8809 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
880d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8810 23				inc hl 
8811 23				inc hl     ; skip id and ext 
8812 01 40 00			ld bc, STORE_BLOCK_PHY 
8815				if DEBUG_STORESE 
8815					DMARK "SR<" 
8815 f5				push af  
8816 3a 2a 88			ld a, (.dmark)  
8819 32 65 ee			ld (debug_mark),a  
881c 3a 2b 88			ld a, (.dmark+1)  
881f 32 66 ee			ld (debug_mark+1),a  
8822 3a 2c 88			ld a, (.dmark+2)  
8825 32 67 ee			ld (debug_mark+2),a  
8828 18 03			jr .pastdmark  
882a ..			.dmark: db "SR<"  
882d f1			.pastdmark: pop af  
882e			endm  
# End of macro DMARK
882e					CALLMONITOR 
882e cd 6f ee			call debug_vector  
8831				endm  
# End of macro CALLMONITOR
8831				endif 
8831 ed b0			ldir     ; copy data 
8833			 
8833				; move the pointer back and pretend we have a full buffer for next recheck 
8833			 
8833 1b				dec de 
8834 1b				dec de 
8835			 
8835			; TODO do pop below now short circuit loop????? 
8835 c1				pop bc     ; get rid of spare de on stack 
8836				if DEBUG_STORESE 
8836					DMARK "SR>" 
8836 f5				push af  
8837 3a 4b 88			ld a, (.dmark)  
883a 32 65 ee			ld (debug_mark),a  
883d 3a 4c 88			ld a, (.dmark+1)  
8840 32 66 ee			ld (debug_mark+1),a  
8843 3a 4d 88			ld a, (.dmark+2)  
8846 32 67 ee			ld (debug_mark+2),a  
8849 18 03			jr .pastdmark  
884b ..			.dmark: db "SR>"  
884e f1			.pastdmark: pop af  
884f			endm  
# End of macro DMARK
884f					CALLMONITOR 
884f cd 6f ee			call debug_vector  
8852				endm  
# End of macro CALLMONITOR
8852				endif 
8852 c3 e3 86			jp .srext 
8855			 
8855			 
8855			 
8855			 
8855			 
8855			.readdone:		 
8855 e1				pop hl 		 ; return start of data to show as not EOF 
8856 23				inc hl   ; past file id 
8857 23				inc hl   ; past ext 
8858				if DEBUG_STORESE 
8858					DMARK "SRe" 
8858 f5				push af  
8859 3a 6d 88			ld a, (.dmark)  
885c 32 65 ee			ld (debug_mark),a  
885f 3a 6e 88			ld a, (.dmark+1)  
8862 32 66 ee			ld (debug_mark+1),a  
8865 3a 6f 88			ld a, (.dmark+2)  
8868 32 67 ee			ld (debug_mark+2),a  
886b 18 03			jr .pastdmark  
886d ..			.dmark: db "SRe"  
8870 f1			.pastdmark: pop af  
8871			endm  
# End of macro DMARK
8871					CALLMONITOR 
8871 cd 6f ee			call debug_vector  
8874				endm  
# End of macro CALLMONITOR
8874				endif 
8874 c9					ret 
8875			 
8875			 
8875			 
8875			; 
8875			; Append File 
8875			; 
8875			; hl - file id to locate 
8875			; de - pointer to (multi block) string to write 
8875			 
8875			.sa_notfound: 
8875 d1				pop de 
8876 c9				ret 
8877			 
8877			 
8877			storage_append: 
8877				; hl -  file id to append to 
8877				; de - string to append 
8877			 
8877 d5				push de 
8878				 
8878				if DEBUG_STORESE 
8878					DMARK "AP1" 
8878 f5				push af  
8879 3a 8d 88			ld a, (.dmark)  
887c 32 65 ee			ld (debug_mark),a  
887f 3a 8e 88			ld a, (.dmark+1)  
8882 32 66 ee			ld (debug_mark+1),a  
8885 3a 8f 88			ld a, (.dmark+2)  
8888 32 67 ee			ld (debug_mark+2),a  
888b 18 03			jr .pastdmark  
888d ..			.dmark: db "AP1"  
8890 f1			.pastdmark: pop af  
8891			endm  
# End of macro DMARK
8891					CALLMONITOR 
8891 cd 6f ee			call debug_vector  
8894				endm  
# End of macro CALLMONITOR
8894				endif 
8894			 
8894 7d				ld a, l 
8895 32 68 ea			ld (store_tmpid), a 
8898			 
8898				; get file header  
8898			 
8898 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
889a 3a 68 ea			ld a, (store_tmpid) 
889d 5f				ld e, a 
889e			 
889e 21 40 00				ld hl, STORE_BLOCK_PHY 
88a1 cd ba 84				call storage_findnextid 
88a4			 
88a4 cd 13 8d			call ishlzero 
88a7 28 cc			jr z, .sa_notfound 
88a9			 
88a9 22 5f ea			ld (store_tmppageid), hl 
88ac			 
88ac				; TODO handle file id not found 
88ac			 
88ac				if DEBUG_STORESE 
88ac					DMARK "AP2" 
88ac f5				push af  
88ad 3a c1 88			ld a, (.dmark)  
88b0 32 65 ee			ld (debug_mark),a  
88b3 3a c2 88			ld a, (.dmark+1)  
88b6 32 66 ee			ld (debug_mark+1),a  
88b9 3a c3 88			ld a, (.dmark+2)  
88bc 32 67 ee			ld (debug_mark+2),a  
88bf 18 03			jr .pastdmark  
88c1 ..			.dmark: db "AP2"  
88c4 f1			.pastdmark: pop af  
88c5			endm  
# End of macro DMARK
88c5					CALLMONITOR 
88c5 cd 6f ee			call debug_vector  
88c8				endm  
# End of macro CALLMONITOR
88c8				endif 
88c8			 
88c8				; update file extent count 
88c8			 
88c8 11 74 ea			ld de, store_page 
88cb			 
88cb cd 87 81			call storage_read_block 
88ce			 
88ce				if DEBUG_STORESE 
88ce					DMARK "AP3" 
88ce f5				push af  
88cf 3a e3 88			ld a, (.dmark)  
88d2 32 65 ee			ld (debug_mark),a  
88d5 3a e4 88			ld a, (.dmark+1)  
88d8 32 66 ee			ld (debug_mark+1),a  
88db 3a e5 88			ld a, (.dmark+2)  
88de 32 67 ee			ld (debug_mark+2),a  
88e1 18 03			jr .pastdmark  
88e3 ..			.dmark: db "AP3"  
88e6 f1			.pastdmark: pop af  
88e7			endm  
# End of macro DMARK
88e7					CALLMONITOR 
88e7 cd 6f ee			call debug_vector  
88ea				endm  
# End of macro CALLMONITOR
88ea				endif 
88ea			;	ld (store_tmppageid), hl 
88ea			 
88ea 3a 76 ea			ld a, (store_page+2) 
88ed 3c				inc a 
88ee 32 76 ea			ld (store_page+2), a 
88f1 32 67 ea			ld (store_tmpext), a 
88f4				 
88f4				if DEBUG_STORESE 
88f4					DMARK "AP3" 
88f4 f5				push af  
88f5 3a 09 89			ld a, (.dmark)  
88f8 32 65 ee			ld (debug_mark),a  
88fb 3a 0a 89			ld a, (.dmark+1)  
88fe 32 66 ee			ld (debug_mark+1),a  
8901 3a 0b 89			ld a, (.dmark+2)  
8904 32 67 ee			ld (debug_mark+2),a  
8907 18 03			jr .pastdmark  
8909 ..			.dmark: db "AP3"  
890c f1			.pastdmark: pop af  
890d			endm  
# End of macro DMARK
890d					CALLMONITOR 
890d cd 6f ee			call debug_vector  
8910				endm  
# End of macro CALLMONITOR
8910				endif 
8910 2a 5f ea			ld hl, (store_tmppageid) 
8913 11 74 ea			ld de, store_page 
8916 cd ec 81			call storage_write_block 
8919			 
8919				; find free block 
8919			 
8919 11 00 00			ld de, 0			 ; file extent to locate 
891c			 
891c 21 40 00				ld hl, STORE_BLOCK_PHY 
891f cd ba 84				call storage_findnextid 
8922 cd 13 8d			call ishlzero 
8925 ca 75 88			jp z, .sa_notfound 
8928			 
8928					; TODO handle no space left 
8928					 
8928 22 5f ea				ld (store_tmppageid), hl 
892b			 
892b				if DEBUG_STORESE 
892b					DMARK "AP4" 
892b f5				push af  
892c 3a 40 89			ld a, (.dmark)  
892f 32 65 ee			ld (debug_mark),a  
8932 3a 41 89			ld a, (.dmark+1)  
8935 32 66 ee			ld (debug_mark+1),a  
8938 3a 42 89			ld a, (.dmark+2)  
893b 32 67 ee			ld (debug_mark+2),a  
893e 18 03			jr .pastdmark  
8940 ..			.dmark: db "AP4"  
8943 f1			.pastdmark: pop af  
8944			endm  
# End of macro DMARK
8944					CALLMONITOR 
8944 cd 6f ee			call debug_vector  
8947				endm  
# End of macro CALLMONITOR
8947				endif 
8947					; init the buffer with zeros so we can id if the buffer is full or not 
8947			 
8947 e5					push hl 
8948 c5					push bc 
8949			 
8949 21 74 ea				ld hl, store_page 
894c 06 40				ld b, STORE_BLOCK_PHY 
894e 3e 00				ld a, 0 
8950 77			.zeroblock:	ld (hl), a 
8951 23					inc hl 
8952 10 fc				djnz .zeroblock 
8954			 
8954 c1					pop bc 
8955 e1					pop hl 
8956			 
8956					; construct block 
8956			 
8956 3a 68 ea				ld a, (store_tmpid) 
8959 32 74 ea				ld (store_page), a   ; file id 
895c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
895f 32 75 ea				ld (store_page+1), a 
8962			 
8962 e1					pop hl    ; get string to write 
8963 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8965 11 76 ea				ld de, store_page+2 
8968			 
8968				if DEBUG_STORESE 
8968					DMARK "AP5" 
8968 f5				push af  
8969 3a 7d 89			ld a, (.dmark)  
896c 32 65 ee			ld (debug_mark),a  
896f 3a 7e 89			ld a, (.dmark+1)  
8972 32 66 ee			ld (debug_mark+1),a  
8975 3a 7f 89			ld a, (.dmark+2)  
8978 32 67 ee			ld (debug_mark+2),a  
897b 18 03			jr .pastdmark  
897d ..			.dmark: db "AP5"  
8980 f1			.pastdmark: pop af  
8981			endm  
# End of macro DMARK
8981					CALLMONITOR 
8981 cd 6f ee			call debug_vector  
8984				endm  
# End of macro CALLMONITOR
8984				endif 
8984			 
8984			 
8984			 
8984					; fill buffer with data until end of string or full block 
8984			 
8984 7e			.appd:		ld a, (hl) 
8985 12					ld (de), a 
8986 fe 00				cp 0 
8988 28 04				jr z, .appdone 
898a 23					inc hl 
898b 13					inc de 
898c 10 f6				djnz .appd 
898e			 
898e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
898f f5					push af   		; save last byte dumped 
8990			 
8990			 
8990 2a 5f ea			ld hl, (store_tmppageid) 
8993 11 74 ea			ld de, store_page 
8996				if DEBUG_STORESE 
8996					DMARK "AP6" 
8996 f5				push af  
8997 3a ab 89			ld a, (.dmark)  
899a 32 65 ee			ld (debug_mark),a  
899d 3a ac 89			ld a, (.dmark+1)  
89a0 32 66 ee			ld (debug_mark+1),a  
89a3 3a ad 89			ld a, (.dmark+2)  
89a6 32 67 ee			ld (debug_mark+2),a  
89a9 18 03			jr .pastdmark  
89ab ..			.dmark: db "AP6"  
89ae f1			.pastdmark: pop af  
89af			endm  
# End of macro DMARK
89af					CALLMONITOR 
89af cd 6f ee			call debug_vector  
89b2				endm  
# End of macro CALLMONITOR
89b2				endif 
89b2 cd ec 81				call storage_write_block 
89b5			 
89b5			 
89b5				; was that a full block of data written? 
89b5				; any more to write out? 
89b5			 
89b5				; if yes then set vars and jump to start of function again 
89b5			 
89b5 f1					pop af 
89b6 d1					pop de 
89b7			 
89b7 fe 00				cp 0		 ; no, string was fully written 
89b9 c8					ret z 
89ba			 
89ba					; setup vars for next cycle 
89ba			 
89ba 3a 68 ea				ld a, (store_tmpid) 
89bd 6f					ld l, a 
89be 26 00				ld h, 0 
89c0			 
89c0 c3 77 88			 	jp storage_append	 ; yes, need to write out some more 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			if DEBUG_STORECF 
89c3			storageput:	 
89c3					ret 
89c3			storageread: 
89c3					ld hl, store_page 
89c3					ld b, 200 
89c3					ld a,0 
89c3			.src:		ld (hl),a 
89c3					inc hl 
89c3					djnz .src 
89c3					 
89c3			 
89c3					ld de, 0 
89c3					ld bc, 1 
89c3					ld hl, store_page 
89c3					call cfRead 
89c3			 
89c3				call cfGetError 
89c3				ld hl,scratch 
89c3				call hexout 
89c3				ld hl, scratch+2 
89c3				ld a, 0 
89c3				ld (hl),a 
89c3				ld de, scratch 
89c3				ld a,display_row_1 
89c3				call str_at_display 
89c3				call update_display 
89c3			 
89c3					ld hl, store_page 
89c3					ld (os_cur_ptr),hl 
89c3			 
89c3					ret 
89c3			endif 
89c3			 
89c3			 
89c3			; Clear out the main buffer store (used to remove junk before writing a new block) 
89c3			 
89c3			storage_clear_page: 
89c3 e5				push hl 
89c4 d5				push de 
89c5 c5				push bc 
89c6 21 74 ea			ld hl, store_page 
89c9 3e 00			ld a, 0 
89cb 77				ld (hl), a 
89cc			 
89cc 11 75 ea			ld de, store_page+1 
89cf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89d2			 
89d2 ed b0			ldir 
89d4				 
89d4 c1				pop bc 
89d5 d1				pop de 
89d6 e1				pop hl 
89d7 c9				ret 
89d8			 
89d8			; eof 
# End of file firmware_storage.asm
89d8			  
89d8			; support routines for above hardware abstraction layer  
89d8			  
89d8			include "firmware_general.asm"        ; general support functions  
89d8			 
89d8			; word look up 
89d8			 
89d8			; in 
89d8			; a is the index 
89d8			; hl is pointer start of array 
89d8			; 
89d8			; returns 
89d8			; hl to the word 
89d8			; 
89d8			 
89d8			table_lookup:  
89d8 d5					push de 
89d9 eb					ex de, hl 
89da			 
89da 6f					ld l, a 
89db 26 00				ld h, 0 
89dd 29					add hl, hl 
89de 19					add hl, de 
89df 7e					ld a, (hl) 
89e0 23					inc hl 
89e1 66					ld h,(hl) 
89e2 6f					ld l, a 
89e3			 
89e3 d1					pop de 
89e4 c9					ret 
89e5			 
89e5			; Delay loops 
89e5			 
89e5			 
89e5			 
89e5			aDelayInMS: 
89e5 c5				push bc 
89e6 47				ld b,a 
89e7			msdelay: 
89e7 c5				push bc 
89e8				 
89e8			 
89e8 01 41 00			ld bc,041h 
89eb cd 03 8a			call delayloop 
89ee c1				pop bc 
89ef 05				dec b 
89f0 20 f5			jr nz,msdelay 
89f2			 
89f2			;if CPU_CLOCK_8MHZ 
89f2			;msdelay8: 
89f2			;	push bc 
89f2			;	 
89f2			; 
89f2			;	ld bc,041h 
89f2			;	call delayloop 
89f2			;	pop bc 
89f2			;	dec b 
89f2			;	jr nz,msdelay8 
89f2			;endif 
89f2			 
89f2			 
89f2 c1				pop bc 
89f3 c9				ret 
89f4			 
89f4			 
89f4			delay250ms: 
89f4				;push de 
89f4 01 00 40			ld bc, 04000h 
89f7 c3 03 8a			jp delayloop 
89fa			delay500ms: 
89fa				;push de 
89fa 01 00 80			ld bc, 08000h 
89fd c3 03 8a			jp delayloop 
8a00			delay1s: 
8a00				;push bc 
8a00			   ; Clobbers A, d and e 
8a00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
8a03			delayloop: 
8a03 c5			    push bc 
8a04			 
8a04			if BASE_CPM 
8a04				ld bc, CPM_DELAY_TUNE 
8a04			.cpmloop: 
8a04				push bc 
8a04			 
8a04			endif 
8a04			 
8a04			 
8a04			 
8a04			delayloopi: 
8a04			;	push bc 
8a04			;.dl: 
8a04 cb 47		    bit     0,a    	; 8 
8a06 cb 47		    bit     0,a    	; 8 
8a08 cb 47		    bit     0,a    	; 8 
8a0a e6 ff		    and     255  	; 7 
8a0c 0b			    dec     bc      	; 6 
8a0d 79			    ld      a,c     	; 4 
8a0e b0			    or      b     	; 4 
8a0f c2 04 8a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a12			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a12				;pop de 
8a12			;pop bc 
8a12			 
8a12			if BASE_CPM 
8a12				pop bc 
8a12				 
8a12			    dec     bc      	; 6 
8a12			    ld      a,c     	; 4 
8a12			    or      b     	; 4 
8a12			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a12				 
8a12			 
8a12			endif 
8a12			;if CPU_CLOCK_8MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12			 
8a12			;if CPU_CLOCK_10MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12 c1			    pop bc 
8a13			 
8a13 c9				ret 
8a14			 
8a14			 
8a14			 
8a14			; eof 
# End of file firmware_general.asm
8a14			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a14			; display routines that use the physical hardware abstraction layer 
8a14			 
8a14			 
8a14			; Display an activity indicator 
8a14			; Each call returns the new char pointed to in hl 
8a14			 
8a14			active: 
8a14 3a c0 eb			ld a, (display_active) 
8a17 fe 06			cp 6 
8a19			 
8a19 20 02			jr nz, .sne 
8a1b				; gone past the last one reset sequence 
8a1b 3e ff			ld a, 255 
8a1d			 
8a1d			.sne:   
8a1d				; get the next char in seq 
8a1d 3c				inc a 
8a1e 32 c0 eb			ld (display_active), a 
8a21			 
8a21				; look up the string in the table 
8a21 21 38 8a			ld hl, actseq 
8a24 cb 27			sla a 
8a26 cd ea 8c			call addatohl 
8a29 cd f8 9d			call loadwordinhl 
8a2c			 
8a2c				; forth will write the to string when pushing so move from rom to ram 
8a2c			 
8a2c 11 c1 eb			ld de, display_active+1 
8a2f 01 02 00			ld bc, 2 
8a32 ed b0			ldir 
8a34			 
8a34 21 c1 eb			ld hl, display_active+1 
8a37 c9				ret 
8a38				 
8a38				 
8a38			 
8a38			 
8a38			;db "|/-\|-\" 
8a38			 
8a38			actseq: 
8a38			 
8a38 46 8a		dw spin0 
8a3a 48 8a		dw spin1 
8a3c 4a 8a		dw spin2 
8a3e 4c 8a		dw spin3 
8a40 4a 8a		dw spin2 
8a42 48 8a		dw spin1 
8a44 46 8a		dw spin0 
8a46			 
8a46 .. 00		spin0: db " ", 0 
8a48 .. 00		spin1: db "-", 0 
8a4a .. 00		spin2: db "+", 0 
8a4c .. 00		spin3: db "#", 0 
8a4e			 
8a4e			 
8a4e			; information window 
8a4e			 
8a4e			; pass hl with 1st string to display 
8a4e			; pass de with 2nd string to display 
8a4e			 
8a4e			info_panel: 
8a4e e5				push hl 
8a4f			 
8a4f 2a c6 eb			ld hl, (display_fb_active) 
8a52 e5				push hl    ; future de destination 
8a53 21 ab ed				ld hl, display_fb0 
8a56 22 c6 eb				ld (display_fb_active), hl 
8a59			 
8a59			;	call clear_display 
8a59			 
8a59				if BASE_CPM 
8a59				ld a, '.' 
8a59				else 
8a59 3e a5			ld a, 165 
8a5b				endif 
8a5b cd c2 8a			call fill_display 
8a5e			 
8a5e			 
8a5e 3e 55			ld a, display_row_3 + 5 
8a60 cd d0 8a			call str_at_display 
8a63			 
8a63 e1				pop hl 
8a64 d1				pop de 
8a65			 
8a65 e5				push hl 
8a66			 
8a66			 
8a66 3e 2d			ld a, display_row_2 + 5 
8a68 cd d0 8a			call str_at_display 
8a6b			 
8a6b			 
8a6b cd e0 8a			call update_display 
8a6e cd fd 99			call next_page_prompt 
8a71 cd bd 8a			call clear_display 
8a74			 
8a74				 
8a74 21 0a ed				ld hl, display_fb1 
8a77 22 c6 eb				ld (display_fb_active), hl 
8a7a cd e0 8a			call update_display 
8a7d			 
8a7d e1				pop hl 
8a7e			 
8a7e c9				ret 
8a7f			 
8a7f			 
8a7f			 
8a7f			 
8a7f			; TODO windowing? 
8a7f			 
8a7f			; TODO scroll line up 
8a7f			 
8a7f			scroll_up: 
8a7f			 
8a7f e5				push hl 
8a80 d5				push de 
8a81 c5				push bc 
8a82			 
8a82				; get frame buffer  
8a82			 
8a82 2a c6 eb			ld hl, (display_fb_active) 
8a85 e5				push hl    ; future de destination 
8a86			 
8a86 11 28 00			ld  de, display_cols 
8a89 19				add hl, de 
8a8a			 
8a8a d1				pop de 
8a8b			 
8a8b				;ex de, hl 
8a8b 01 9f 00			ld bc, display_fb_len -1  
8a8e			;if DEBUG_FORTH_WORDS 
8a8e			;	DMARK "SCL" 
8a8e			;	CALLMONITOR 
8a8e			;endif	 
8a8e ed b0			ldir 
8a90			 
8a90				; wipe bottom row 
8a90			 
8a90			 
8a90 2a c6 eb			ld hl, (display_fb_active) 
8a93 11 a0 00			ld de, display_cols*display_rows 
8a96 19				add hl, de 
8a97 06 28			ld b, display_cols 
8a99 3e 20			ld a, ' ' 
8a9b			.scwipe: 
8a9b 77				ld (hl), a 
8a9c 2b				dec hl 
8a9d 10 fc			djnz .scwipe 
8a9f			 
8a9f				;pop hl 
8a9f			 
8a9f c1				pop bc 
8aa0 d1				pop de 
8aa1 e1				pop hl 
8aa2			 
8aa2 c9				ret 
8aa3			 
8aa3			 
8aa3			;scroll_upo: 
8aa3			;	ld de, display_row_1 
8aa3			 ;	ld hl, display_row_2 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_2 
8aa3			 ;	ld hl, display_row_3 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_3 
8aa3			 ;	ld hl, display_row_4 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			 
8aa3			; TODO clear row 4 
8aa3			 
8aa3			;	ret 
8aa3			 
8aa3				 
8aa3			scroll_down: 
8aa3			 
8aa3 e5				push hl 
8aa4 d5				push de 
8aa5 c5				push bc 
8aa6			 
8aa6				; get frame buffer  
8aa6			 
8aa6 2a c6 eb			ld hl, (display_fb_active) 
8aa9			 
8aa9 11 9f 00			ld de, display_fb_len - 1 
8aac 19				add hl, de 
8aad			 
8aad e5			push hl    ; future de destination 
8aae			 
8aae 11 28 00			ld  de, display_cols 
8ab1 ed 52			sbc hl, de 
8ab3			 
8ab3			 
8ab3 d1				pop de 
8ab4			 
8ab4			;	ex de, hl 
8ab4 01 9f 00			ld bc, display_fb_len -1  
8ab7			 
8ab7			 
8ab7				 
8ab7			 
8ab7 ed b0			ldir 
8ab9			 
8ab9				; wipe bottom row 
8ab9			 
8ab9			 
8ab9			;	ld hl, (display_fb_active) 
8ab9			;;	ld de, display_cols*display_rows 
8ab9			;;	add hl, de 
8ab9			;	ld b, display_cols 
8ab9			;	ld a, ' ' 
8ab9			;.scwiped: 
8ab9			;	ld (hl), a 
8ab9			;	dec hl 
8ab9			;	djnz .scwiped 
8ab9			 
8ab9				;pop hl 
8ab9			 
8ab9 c1				pop bc 
8aba d1				pop de 
8abb e1				pop hl 
8abc			 
8abc c9				ret 
8abd			;scroll_down: 
8abd			;	ld de, display_row_4 
8abd			;	ld hl, display_row_3 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_3 
8abd			; 	ld hl, display_row_2 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_2 
8abd			;	ld hl, display_row_1 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;;; TODO clear row 1 
8abd			;	ret 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			; clear active frame buffer 
8abd			 
8abd			clear_display: 
8abd 3e 20			ld a, ' ' 
8abf c3 c2 8a			jp fill_display 
8ac2			 
8ac2			; fill active frame buffer with a char in A 
8ac2			 
8ac2			fill_display: 
8ac2 06 a0			ld b,display_fb_len 
8ac4 2a c6 eb			ld hl, (display_fb_active) 
8ac7 77			.fd1:	ld (hl),a 
8ac8 23				inc hl 
8ac9 10 fc			djnz .fd1 
8acb 23				inc hl 
8acc 3e 00			ld a,0 
8ace 77				ld (hl),a 
8acf			 
8acf			 
8acf c9				ret 
8ad0			; Write string (DE) at pos (A) to active frame buffer 
8ad0			 
8ad0 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
8ad3 06 00					ld b,0 
8ad5 4f					ld c,a 
8ad6 09					add hl,bc 
8ad7 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ad8 b7			            OR   A              ;Null terminator? 
8ad9 c8			            RET  Z              ;Yes, so finished 
8ada 77					ld (hl),a 
8adb 23				inc hl 
8adc 13			            INC  DE             ;Point to next character 
8add 18 f8		            JR   .sad1     ;Repeat 
8adf c9					ret 
8ae0			 
8ae0			; using current frame buffer write to physical display 
8ae0			 
8ae0			update_display: 
8ae0 e5				push hl 
8ae1 2a c6 eb			ld hl, (display_fb_active) 
8ae4 cd de dc			call write_display 
8ae7 e1				pop hl 
8ae8 c9				ret 
8ae9			 
8ae9			; TODO scrolling 
8ae9			 
8ae9			 
8ae9			; move cursor right one char 
8ae9			cursor_right: 
8ae9			 
8ae9				; TODO shift right 
8ae9				; TODO if beyond max col 
8ae9				; TODO       cursor_next_line 
8ae9			 
8ae9 c9				ret 
8aea			 
8aea			 
8aea			cursor_next_line: 
8aea				; TODO first char 
8aea				; TODO line down 
8aea				; TODO if past last row 
8aea				; TODO    scroll up 
8aea			 
8aea c9				ret 
8aeb			 
8aeb			cursor_left: 
8aeb				; TODO shift left 
8aeb				; TODO if beyond left  
8aeb				; TODO     cursor prev line 
8aeb				 
8aeb c9				ret 
8aec			 
8aec			cursor_prev_line: 
8aec				; TODO last char 
8aec				; TODO line up 
8aec				; TODO if past first row 
8aec				; TODO   scroll down 
8aec			 
8aec c9				ret 
8aed			 
8aed			 
8aed			cout: 
8aed				; A - char 
8aed c9				ret 
8aee			 
8aee			 
8aee			; Display a menu and allow item selection (optional toggle items) 
8aee			; 
8aee			; format: 
8aee			; hl pointer to word array with zero term for items 
8aee			; e.g.    db item1 
8aee			;         db .... 
8aee			;         db 0 
8aee			; 
8aee			; a = starting menu item  
8aee			; 
8aee			; de = pointer item toggle array   (todo) 
8aee			; 
8aee			; returns item selected in a 1-... 
8aee			; returns 0 if back button pressed 
8aee			; 
8aee			; NOTE: Uses system frame buffer to display 
8aee			; 
8aee			; LEFT, Q = go back 
8aee			; RIGHT, SPACE, CR = select 
8aee			; UP, A - Up 
8aee			; DOWN, Z - Down 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			menu: 
8aee			 
8aee					; keep array pointer 
8aee			 
8aee 22 6d ea				ld (store_tmp1), hl 
8af1 32 6b ea				ld (store_tmp2), a 
8af4			 
8af4					; check for key bounce 
8af4			 
8af4			if BASE_KEV 
8af4			 
8af4			.mbounce:	call cin 
8af4					cp 0 
8af4					jr nz, .mbounce 
8af4			endif 
8af4					; for ease use ex 
8af4			 
8af4					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8af4 21 ab ed				ld hl, display_fb0 
8af7 22 c6 eb				ld (display_fb_active), hl 
8afa			 
8afa cd bd 8a		.mloop:		call clear_display 
8afd cd e0 8a				call update_display 
8b00			 
8b00					; draw selection id '>' at 1 
8b00			 
8b00					; init start of list display 
8b00			 
8b00 3e 05				ld a, 5 
8b02 32 69 ea				ld (store_tmp3), a   ; display row count 
8b05 3a 6b ea				ld a,( store_tmp2) 
8b08 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b0b			 
8b0b					 
8b0b			.mitem:	 
8b0b			 
8b0b			 
8b0b 3a 6c ea				ld a,(store_tmp2+1) 
8b0e 6f					ld l, a 
8b0f 26 00				ld h, 0 
8b11 29					add hl, hl 
8b12 ed 5b 6d ea			ld de, (store_tmp1) 
8b16 19					add hl, de 
8b17 7e					ld a, (hl) 
8b18 23					inc hl 
8b19 66					ld h,(hl) 
8b1a 6f					ld l, a 
8b1b			 
8b1b cd 13 8d				call ishlzero 
8b1e 28 1a				jr z, .mdone 
8b20			 
8b20 eb					ex de, hl 
8b21 3a 69 ea				ld a, (store_tmp3) 
8b24 cd d0 8a				call str_at_display 
8b27					 
8b27			 
8b27					; next item 
8b27 3a 6c ea				ld a, (store_tmp2+1) 
8b2a 3c					inc a 
8b2b 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b2e			 
8b2e			 		; next row 
8b2e			 
8b2e 3a 69 ea				ld a, (store_tmp3) 
8b31 c6 28				add display_cols 
8b33 32 69 ea				ld (store_tmp3), a 
8b36			 
8b36					; at end of screen? 
8b36			 
8b36 fe 10				cp display_rows*4 
8b38 20 d1				jr nz, .mitem 
8b3a			 
8b3a			 
8b3a			.mdone: 
8b3a cd 13 8d				call ishlzero 
8b3d 28 08				jr z, .nodn 
8b3f			 
8b3f 3e 78				ld a, display_row_4 
8b41 11 c0 8b				ld de, .mdown 
8b44 cd d0 8a				call str_at_display 
8b47			 
8b47					; draw options to fill the screens with active item on line 1 
8b47					; if current option is 2 or more then display ^ in top 
8b47			 
8b47 3a 6b ea		.nodn:		ld a, (store_tmp2) 
8b4a fe 00				cp 0 
8b4c 28 08				jr z, .noup 
8b4e			 
8b4e 3e 00				ld a, 0 
8b50 11 be 8b				ld de, .mup 
8b53 cd d0 8a				call str_at_display 
8b56			 
8b56 3e 02		.noup:		ld a, 2 
8b58 11 bc 8b				ld de, .msel 
8b5b cd d0 8a				call str_at_display 
8b5e			 
8b5e					; if current option + 1 is not null then display V in bottom 
8b5e					; get key 
8b5e cd e0 8a				call update_display 
8b61			 
8b61			 
8b61					; handle key 
8b61			 
8b61 cd 6a dd				call cin_wait 
8b64			 
8b64 fe 05				cp KEY_UP 
8b66 28 2b				jr z, .mgoup 
8b68 fe 61				cp 'a' 
8b6a 28 27				jr z, .mgoup 
8b6c fe 0a				cp KEY_DOWN 
8b6e 28 32				jr z, .mgod 
8b70 fe 7a				cp 'z' 
8b72 28 2e				jr z, .mgod 
8b74 fe 20				cp ' ' 
8b76 28 34				jr z, .goend 
8b78 fe 0c				cp KEY_RIGHT 
8b7a 28 30				jr z, .goend 
8b7c fe 0d				cp KEY_CR 
8b7e 28 2c				jr z, .goend 
8b80 fe 71				cp 'q' 
8b82 28 0b				jr z, .goback 
8b84			 
8b84 fe 0b				cp KEY_LEFT 
8b86 28 07				jr z, .goback 
8b88 fe 08				cp KEY_BS 
8b8a 28 03				jr z, .goback 
8b8c c3 fa 8a				jp .mloop 
8b8f			 
8b8f			.goback: 
8b8f 3e 00			ld a, 0 
8b91 18 1d			jr .goend2 
8b93			 
8b93				; move up one 
8b93			.mgoup: 
8b93 3a 6b ea				ld a, (store_tmp2) 
8b96 fe 00				cp 0 
8b98 ca fa 8a				jp z, .mloop 
8b9b 3d					dec a 
8b9c 32 6b ea				ld (store_tmp2), a 
8b9f c3 fa 8a				jp .mloop 
8ba2			 
8ba2				; move down one 
8ba2			.mgod: 
8ba2 3a 6b ea				ld a, (store_tmp2) 
8ba5 3c					inc a 
8ba6 32 6b ea				ld (store_tmp2), a 
8ba9 c3 fa 8a				jp .mloop 
8bac			 
8bac			 
8bac			.goend: 
8bac					; get selected item number 
8bac			 
8bac 3a 6b ea				ld a, (store_tmp2) 
8baf 3c					inc a 
8bb0			 
8bb0			.goend2: 
8bb0 f5					push af 
8bb1			 
8bb1					; restore active fb 
8bb1					; TODO BUG assumes fb1 
8bb1			 
8bb1 21 0a ed				ld hl, display_fb1 
8bb4 22 c6 eb				ld (display_fb_active), hl 
8bb7			 
8bb7					; restore main regs 
8bb7			 
8bb7			 
8bb7 cd e0 8a				call update_display 
8bba			 
8bba f1					pop af 
8bbb			 
8bbb c9				ret 
8bbc			 
8bbc .. 00		.msel:   db ">",0 
8bbe .. 00		.mup:   db "^",0 
8bc0 .. 00		.mdown:   db "v",0 
8bc2			 
8bc2			 
8bc2			; eof 
8bc2			 
# End of file firmware_display.asm
8bc2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bc2			; random number generators 
8bc2			 
8bc2			 
8bc2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bc2			 
8bc2			 
8bc2			;-----> Generate a random number 
8bc2			; output a=answer 0<=a<=255 
8bc2			; all registers are preserved except: af 
8bc2			random: 
8bc2 e5			        push    hl 
8bc3 d5			        push    de 
8bc4 2a a5 eb		        ld      hl,(randData) 
8bc7 ed 5f		        ld      a,r 
8bc9 57			        ld      d,a 
8bca 5e			        ld      e,(hl) 
8bcb 19			        add     hl,de 
8bcc 85			        add     a,l 
8bcd ac			        xor     h 
8bce 22 a5 eb		        ld      (randData),hl 
8bd1 d1			        pop     de 
8bd2 e1			        pop     hl 
8bd3 c9			        ret 
8bd4			 
8bd4			 
8bd4			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bd4			 
8bd4			 
8bd4			 
8bd4			;------LFSR------ 
8bd4			;James Montelongo 
8bd4			;optimized by Spencer Putt 
8bd4			;out: 
8bd4			; a = 8 bit random number 
8bd4			RandLFSR: 
8bd4 21 ab eb		        ld hl,LFSRSeed+4 
8bd7 5e			        ld e,(hl) 
8bd8 23			        inc hl 
8bd9 56			        ld d,(hl) 
8bda 23			        inc hl 
8bdb 4e			        ld c,(hl) 
8bdc 23			        inc hl 
8bdd 7e			        ld a,(hl) 
8bde 47			        ld b,a 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed cb 13		        rl e  
8bef cb 12			rl d 
8bf1 cb 11		        rl c  
8bf3 17				rla 
8bf4 67			        ld h,a 
8bf5 cb 13		        rl e  
8bf7 cb 12			rl d 
8bf9 cb 11		        rl c  
8bfb 17				rla 
8bfc a8			        xor b 
8bfd cb 13		        rl e  
8bff cb 12			rl d 
8c01 ac			        xor h 
8c02 a9			        xor c 
8c03 aa			        xor d 
8c04 21 ad eb		        ld hl,LFSRSeed+6 
8c07 11 ae eb		        ld de,LFSRSeed+7 
8c0a 01 07 00		        ld bc,7 
8c0d ed b8		        lddr 
8c0f 12			        ld (de),a 
8c10 c9			        ret 
8c11			 
8c11			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c11			 
8c11			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c11			 
8c11			 
8c11			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c11			 
8c11			prng16: 
8c11			;Inputs: 
8c11			;   (seed1) contains a 16-bit seed value 
8c11			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c11			;Outputs: 
8c11			;   HL is the result 
8c11			;   BC is the result of the LCG, so not that great of quality 
8c11			;   DE is preserved 
8c11			;Destroys: 
8c11			;   AF 
8c11			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c11			;160cc 
8c11			;26 bytes 
8c11 2a 9f eb		    ld hl,(seed1) 
8c14 44			    ld b,h 
8c15 4d			    ld c,l 
8c16 29			    add hl,hl 
8c17 29			    add hl,hl 
8c18 2c			    inc l 
8c19 09			    add hl,bc 
8c1a 22 9f eb		    ld (seed1),hl 
8c1d 2a 9d eb		    ld hl,(seed2) 
8c20 29			    add hl,hl 
8c21 9f			    sbc a,a 
8c22 e6 2d		    and %00101101 
8c24 ad			    xor l 
8c25 6f			    ld l,a 
8c26 22 9d eb		    ld (seed2),hl 
8c29 09			    add hl,bc 
8c2a c9			    ret 
8c2b			 
8c2b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c2b			 
8c2b			rand32: 
8c2b			;Inputs: 
8c2b			;   (seed1_0) holds the lower 16 bits of the first seed 
8c2b			;   (seed1_1) holds the upper 16 bits of the first seed 
8c2b			;   (seed2_0) holds the lower 16 bits of the second seed 
8c2b			;   (seed2_1) holds the upper 16 bits of the second seed 
8c2b			;   **NOTE: seed2 must be non-zero 
8c2b			;Outputs: 
8c2b			;   HL is the result 
8c2b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c2b			;Destroys: 
8c2b			;   AF 
8c2b			;Tested and passes all CAcert tests 
8c2b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c2b			;it has a period of 18,446,744,069,414,584,320 
8c2b			;roughly 18.4 quintillion. 
8c2b			;LFSR taps: 0,2,6,7  = 11000101 
8c2b			;291cc 
8c2b			;seed1_0=$+1 
8c2b			;    ld hl,12345 
8c2b			;seed1_1=$+1 
8c2b			;    ld de,6789 
8c2b			;    ld b,h 
8c2b			;    ld c,l 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    inc l 
8c2b			;    add hl,bc 
8c2b			;    ld (seed1_0),hl 
8c2b			;    ld hl,(seed1_1) 
8c2b			;    adc hl,de 
8c2b			;    ld (seed1_1),hl 
8c2b			;    ex de,hl 
8c2b			;seed2_0=$+1 
8c2b			;    ld hl,9876 
8c2b			;seed2_1=$+1 
8c2b			;    ld bc,54321 
8c2b			;    add hl,hl \ rl c \ rl b 
8c2b			;    ld (seed2_1),bc 
8c2b			;    sbc a,a 
8c2b			;    and %11000101 
8c2b			;    xor l 
8c2b			;    ld l,a 
8c2b			;    ld (seed2_0),hl 
8c2b			;    ex de,hl 
8c2b			;    add hl,bc 
8c2b			;    ret 
8c2b			; 
8c2b			 
8c2b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c2b			; 20 bytes, 86 cycles (excluding ret) 
8c2b			 
8c2b			; returns   hl = pseudorandom number 
8c2b			; corrupts   a 
8c2b			 
8c2b			; generates 16-bit pseudorandom numbers with a period of 65535 
8c2b			; using the xorshift method: 
8c2b			 
8c2b			; hl ^= hl << 7 
8c2b			; hl ^= hl >> 9 
8c2b			; hl ^= hl << 8 
8c2b			 
8c2b			; some alternative shift triplets which also perform well are: 
8c2b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c2b			 
8c2b			;  org 32768 
8c2b			 
8c2b			xrnd: 
8c2b 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c2e 3e 00		  ld a,0 
8c30 bd			  cp l 
8c31 20 02		  jr nz, .xrnd1 
8c33 2e 01		  ld l, 1 
8c35			.xrnd1: 
8c35			 
8c35 7c			  ld a,h 
8c36 1f			  rra 
8c37 7d			  ld a,l 
8c38 1f			  rra 
8c39 ac			  xor h 
8c3a 67			  ld h,a 
8c3b 7d			  ld a,l 
8c3c 1f			  rra 
8c3d 7c			  ld a,h 
8c3e 1f			  rra 
8c3f ad			  xor l 
8c40 6f			  ld l,a 
8c41 ac			  xor h 
8c42 67			  ld h,a 
8c43			 
8c43 22 a3 eb		  ld (xrandc),hl 
8c46			 
8c46 c9			  ret 
8c47			;  
8c47			 
8c47			 
8c47			;;;; int maths 
8c47			 
8c47			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c47			; Divide 16-bit values (with 16-bit result) 
8c47			; In: Divide BC by divider DE 
8c47			; Out: BC = result, HL = rest 
8c47			; 
8c47			Div16: 
8c47 21 00 00		    ld hl,0 
8c4a 78			    ld a,b 
8c4b 06 08		    ld b,8 
8c4d			Div16_Loop1: 
8c4d 17			    rla 
8c4e ed 6a		    adc hl,hl 
8c50 ed 52		    sbc hl,de 
8c52 30 01		    jr nc,Div16_NoAdd1 
8c54 19			    add hl,de 
8c55			Div16_NoAdd1: 
8c55 10 f6		    djnz Div16_Loop1 
8c57 17			    rla 
8c58 2f			    cpl 
8c59 47			    ld b,a 
8c5a 79			    ld a,c 
8c5b 48			    ld c,b 
8c5c 06 08		    ld b,8 
8c5e			Div16_Loop2: 
8c5e 17			    rla 
8c5f ed 6a		    adc hl,hl 
8c61 ed 52		    sbc hl,de 
8c63 30 01		    jr nc,Div16_NoAdd2 
8c65 19			    add hl,de 
8c66			Div16_NoAdd2: 
8c66 10 f6		    djnz Div16_Loop2 
8c68 17			    rla 
8c69 2f			    cpl 
8c6a 41			    ld b,c 
8c6b 4f			    ld c,a 
8c6c c9			ret 
8c6d			 
8c6d			 
8c6d			;http://z80-heaven.wikidot.com/math 
8c6d			; 
8c6d			;Inputs: 
8c6d			;     DE and A are factors 
8c6d			;Outputs: 
8c6d			;     A is not changed 
8c6d			;     B is 0 
8c6d			;     C is not changed 
8c6d			;     DE is not changed 
8c6d			;     HL is the product 
8c6d			;Time: 
8c6d			;     342+6x 
8c6d			; 
8c6d			Mult16: 
8c6d			 
8c6d 06 08		     ld b,8          ;7           7 
8c6f 21 00 00		     ld hl,0         ;10         10 
8c72 29			       add hl,hl     ;11*8       88 
8c73 07			       rlca          ;4*8        32 
8c74 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c76 19			         add hl,de   ;--         -- 
8c77 10 f9		       djnz $-5      ;13*7+8     99 
8c79 c9			ret 
8c7a			 
8c7a			; 
8c7a			; Square root of 16-bit value 
8c7a			; In:  HL = value 
8c7a			; Out:  D = result (rounded down) 
8c7a			; 
8c7a			;Sqr16: 
8c7a			;    ld de,#0040 
8c7a			;    ld a,l 
8c7a			;    ld l,h 
8c7a			;    ld h,d 
8c7a			;    or a 
8c7a			;    ld b,8 
8c7a			;Sqr16_Loop: 
8c7a			;    sbc hl,de 
8c7a			;    jr nc,Sqr16_Skip 
8c7a			;    add hl,de 
8c7a			;Sqr16_Skip: 
8c7a			;    ccf 
8c7a			;    rl d 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    djnz Sqr16_Loop 
8c7a			;    ret 
8c7a			; 
8c7a			; 
8c7a			; Divide 8-bit values 
8c7a			; In: Divide E by divider C 
8c7a			; Out: A = result, B = rest 
8c7a			; 
8c7a			Div8: 
8c7a af			    xor a 
8c7b 06 08		    ld b,8 
8c7d			Div8_Loop: 
8c7d cb 13		    rl e 
8c7f 17			    rla 
8c80 91			    sub c 
8c81 30 01		    jr nc,Div8_NoAdd 
8c83 81			    add a,c 
8c84			Div8_NoAdd: 
8c84 10 f7		    djnz Div8_Loop 
8c86 47			    ld b,a 
8c87 7b			    ld a,e 
8c88 17			    rla 
8c89 2f			    cpl 
8c8a c9			    ret 
8c8b			 
8c8b			; 
8c8b			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c8b			; In: Multiply A with DE 
8c8b			; Out: HL = result 
8c8b			; 
8c8b			Mult12U: 
8c8b 2e 00		    ld l,0 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd0 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd0: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd1 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd1: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd2 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd2: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd3 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd3: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 30 01		    jr nc,Mult12U_NoAdd4 
8ca4 19			    add hl,de 
8ca5			Mult12U_NoAdd4: 
8ca5 29			    add hl,hl 
8ca6 87			    add a,a 
8ca7 30 01		    jr nc,Mult12U_NoAdd5 
8ca9 19			    add hl,de 
8caa			Mult12U_NoAdd5: 
8caa 29			    add hl,hl 
8cab 87			    add a,a 
8cac 30 01		    jr nc,Mult12U_NoAdd6 
8cae 19			    add hl,de 
8caf			Mult12U_NoAdd6: 
8caf 29			    add hl,hl 
8cb0 87			    add a,a 
8cb1 d0			    ret nc 
8cb2 19			    add hl,de 
8cb3 c9			    ret 
8cb4			 
8cb4			; 
8cb4			; Multiply 8-bit value with a 16-bit value (right rotating) 
8cb4			; In: Multiply A with DE 
8cb4			;      Put lowest value in A for most efficient calculation 
8cb4			; Out: HL = result 
8cb4			; 
8cb4			Mult12R: 
8cb4 21 00 00		    ld hl,0 
8cb7			Mult12R_Loop: 
8cb7 cb 3f		    srl a 
8cb9 30 01		    jr nc,Mult12R_NoAdd 
8cbb 19			    add hl,de 
8cbc			Mult12R_NoAdd: 
8cbc cb 23		    sla e 
8cbe cb 12		    rl d 
8cc0 b7			    or a 
8cc1 c2 b7 8c		    jp nz,Mult12R_Loop 
8cc4 c9			    ret 
8cc5			 
8cc5			; 
8cc5			; Multiply 16-bit values (with 32-bit result) 
8cc5			; In: Multiply BC with DE 
8cc5			; Out: BCHL = result 
8cc5			; 
8cc5			Mult32: 
8cc5 79			    ld a,c 
8cc6 48			    ld c,b 
8cc7 21 00 00		    ld hl,0 
8cca 06 10		    ld b,16 
8ccc			Mult32_Loop: 
8ccc 29			    add hl,hl 
8ccd 17			    rla 
8cce cb 11		    rl c 
8cd0 30 07		    jr nc,Mult32_NoAdd 
8cd2 19			    add hl,de 
8cd3 ce 00		    adc a,0 
8cd5 d2 d9 8c		    jp nc,Mult32_NoAdd 
8cd8 0c			    inc c 
8cd9			Mult32_NoAdd: 
8cd9 10 f1		    djnz Mult32_Loop 
8cdb 41			    ld b,c 
8cdc 4f			    ld c,a 
8cdd c9			    ret 
8cde			 
8cde			 
8cde			 
8cde			; 
8cde			; Multiply 8-bit values 
8cde			; In:  Multiply H with E 
8cde			; Out: HL = result 
8cde			; 
8cde			Mult8: 
8cde 16 00		    ld d,0 
8ce0 6a			    ld l,d 
8ce1 06 08		    ld b,8 
8ce3			Mult8_Loop: 
8ce3 29			    add hl,hl 
8ce4 30 01		    jr nc,Mult8_NoAdd 
8ce6 19			    add hl,de 
8ce7			Mult8_NoAdd: 
8ce7 10 fa		    djnz Mult8_Loop 
8ce9 c9			    ret 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			;;http://z80-heaven.wikidot.com/math 
8cea			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cea			; 
8cea			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cea			;     ld a,16        ;7 
8cea			;     ld hl,0        ;10 
8cea			;     jp $+5         ;10 
8cea			;.DivLoop: 
8cea			;       add hl,bc    ;-- 
8cea			;       dec a        ;64 
8cea			;       jr z,.DivLoopEnd        ;86 
8cea			; 
8cea			;       sla e        ;128 
8cea			;       rl d         ;128 
8cea			;       adc hl,hl    ;240 
8cea			;       sbc hl,bc    ;240 
8cea			;       jr nc,.DivLoop ;23|21 
8cea			;       inc e        ;-- 
8cea			;       jp .DivLoop+1 
8cea			; 
8cea			;.DivLoopEnd: 
8cea			 
8cea			;HL_Div_C: 
8cea			;Inputs: 
8cea			;     HL is the numerator 
8cea			;     C is the denominator 
8cea			;Outputs: 
8cea			;     A is the remainder 
8cea			;     B is 0 
8cea			;     C is not changed 
8cea			;     DE is not changed 
8cea			;     HL is the quotient 
8cea			; 
8cea			;       ld b,16 
8cea			;       xor a 
8cea			;         add hl,hl 
8cea			;         rla 
8cea			;         cp c 
8cea			;         jr c,$+4 
8cea			;           inc l 
8cea			;           sub c 
8cea			;         djnz $-7 
8cea			 
8cea			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cea			 
8cea			addatohl: 
8cea 85			    add   a, l    ; A = A+L 
8ceb 6f			    ld    l, a    ; L = A+L 
8cec 8c			    adc   a, h    ; A = A+L+H+carry 
8ced 95			    sub   l       ; A = H+carry 
8cee 67			    ld    h, a    ; H = H+carry 
8cef c9			ret 
8cf0			 
8cf0			addatode: 
8cf0 83			    add   a, e    ; A = A+L 
8cf1 5f			    ld    e, a    ; L = A+L 
8cf2 8a			    adc   a, d    ; A = A+L+H+carry 
8cf3 93			    sub   e       ; A = H+carry 
8cf4 57			    ld    d, a    ; H = H+carry 
8cf5 c9			ret 
8cf6			 
8cf6			 
8cf6			addatobc: 
8cf6 81			    add   a, c    ; A = A+L 
8cf7 4f			    ld    c, a    ; L = A+L 
8cf8 88			    adc   a, b    ; A = A+L+H+carry 
8cf9 91			    sub   c       ; A = H+carry 
8cfa 47			    ld    b, a    ; H = H+carry 
8cfb c9			ret 
8cfc			 
8cfc			subafromhl: 
8cfc			   ; If A=0 do nothing 
8cfc			    ; Otherwise flip A's sign. Since 
8cfc			    ; the upper byte becomes -1, also 
8cfc			    ; substract 1 from H. 
8cfc ed 44		    neg 
8cfe ca 07 8d		    jp    z, Skip 
8d01 25			    dec   h 
8d02			     
8d02			    ; Now add the low byte as usual 
8d02			    ; Two's complement takes care of 
8d02			    ; ensuring the result is correct 
8d02 85			    add   a, l 
8d03 6f			    ld    l, a 
8d04 8c			    adc   a, h 
8d05 95			    sub   l 
8d06 67			    ld    h, a 
8d07			Skip: 
8d07 c9				ret 
8d08			 
8d08			 
8d08			; compare hl and de 
8d08			; returns:  
8d08			; if hl = de, z=1, s=0, c0=0 
8d08			; if hl > de, z=0, s=0, c=0 
8d08			; if hl < de, z=0, s=1, c=1 
8d08			cmp16:	 
8d08 b7				or a 
8d09 ed 52			sbc hl,de 
8d0b e0				ret po 
8d0c 7c				ld a,h 
8d0d 1f				rra 
8d0e ee 40			xor 01000000B 
8d10 37				scf 
8d11 8f				adc a,a 
8d12 c9				ret 
8d13			 
8d13			 
8d13			; test if hl contains zero   - A is destroyed 
8d13			 
8d13			ishlzero:    
8d13 b7				or a     ; reset flags 
8d14 7c				ld a, h 
8d15 b5				or l        	 
8d16			 
8d16 c9				ret 
8d17			 
8d17			 
8d17			 
8d17			 
8d17			if FORTH_ENABLE_FLOATMATH 
8d17			;include "float/bbcmath.z80" 
8d17			include "float/lpfpcalc.asm" 
8d17			endif 
8d17			 
8d17			 
8d17			; eof 
8d17			 
# End of file firmware_maths.asm
8d17			include "firmware_strings.asm"   ; string handling  
8d17			 
8d17			 
8d17			; TODO string len 
8d17			; input text string, end on cr with zero term 
8d17			; a offset into frame buffer to start prompt 
8d17			; d is max length 
8d17			; e is display size TODO 
8d17			; c is current cursor position 
8d17			; hl is ptr to where string will be stored and edited directly 
8d17			 
8d17			 
8d17			; TODO check limit of buffer for new inserts 
8d17			; TODO check insert does not push beyond buffer 
8d17			; TODO scroll in a limited display area 
8d17			; TODO scroll whole screen on page wrap 
8d17			 
8d17			 
8d17			; TODO use LCD cursor? 
8d17			 
8d17			EDIT_V1: equ 0 
8d17			EDIT_V2: equ 1 
8d17			 
8d17			 
8d17			 
8d17			if EDIT_V2 
8d17			input_str: 
8d17			 
8d17 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
8d1a			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d1a 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
8d1d			;		ld a, c 
8d1d			;		call addatohl 
8d1d			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1d 7a					ld a,d 
8d1e 32 60 ee			        ld (input_size), a       ; save length of input area 
8d21 79					ld a, c 
8d22 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d25 7b					ld a,e 
8d26 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d29			 
8d29			 
8d29					; add a trailing space to make screen refresh nicer 
8d29			 
8d29					;ld hl, (input_start) 
8d29					;push hl 
8d29					;ld a, 0 
8d29					;call strlent 
8d29					;ld a, l 
8d29					;pop hl 
8d29					;call addatohl 
8d29					;dec hl 
8d29					;ld a, ' ' 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld a, 0 
8d29					;ld (hl), a 
8d29			 
8d29			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d29					; init cursor shape if not set by the cin routines 
8d29 21 bb eb				ld hl, cursor_shape 
8d2c			if BASE_KEV 
8d2c					ld a, 255 
8d2c			else 
8d2c 3e 23				ld a, '#' 
8d2e			endif 
8d2e 77					ld (hl), a 
8d2f 23					inc hl 
8d30 3e 00				ld a, 0 
8d32 77					ld (hl), a 
8d33			 
8d33 3e 09				ld a, CUR_BLINK_RATE 
8d35 32 5a ee				ld (input_cur_flash), a 
8d38 3e 01				ld a, 1 
8d3a 32 59 ee				ld (input_cur_onoff),a 
8d3d			.inmain:	 
8d3d			 
8d3d cd 65 8e				call input_disp_ref 
8d40			 
8d40					; save current length of string 
8d40			 
8d40 2a 61 ee				ld hl, (input_start) 
8d43 3e 00				ld a, 0 
8d45 cd 5b 90				call strlent 
8d48 7d					ld a,l 
8d49 32 54 ee				ld (input_len), a 
8d4c			 
8d4c					;call input_disp_oncur 
8d4c			 
8d4c					; display current state of input buffer 
8d4c			 
8d4c					; clean any backspace chars 
8d4c			 
8d4c 3e 20				ld a, " " 
8d4e 32 bb e2				ld (scratch),a 
8d51 3e 00				ld a, 0 
8d53 32 bc e2				ld (scratch+1),a 
8d56 3a 5e ee				ld a,(input_at_pos) 
8d59 85					add l 
8d5a 11 bb e2				ld de, scratch 
8d5d cd d0 8a				call str_at_display 
8d60			 
8d60					; pause 1ms 
8d60			 
8d60 3e 01				ld a, 1 
8d62 cd e5 89				call aDelayInMS 
8d65			 
8d65			; display cursor if visible on this cycle 
8d65			 
8d65					; dec flash counter 
8d65 3a 5a ee				ld a, (input_cur_flash) 
8d68 3d					dec a 
8d69 32 5a ee				ld (input_cur_flash), a 
8d6c fe 00				cp 0 
8d6e 20 0d				jr nz, .inochgstate 
8d70			 
8d70			 
8d70					; reset on change of state 
8d70 3e 09				ld a, CUR_BLINK_RATE 
8d72 32 5a ee				ld (input_cur_flash), a 
8d75			 
8d75					; change state 
8d75 3a 59 ee				ld a,(input_cur_onoff) 
8d78 ed 44				neg 
8d7a 32 59 ee				ld (input_cur_onoff),a 
8d7d			 
8d7d			 
8d7d			 
8d7d			 
8d7d					; TODO is cursor visible? 
8d7d					; TODO if so then over write the char at curspos pos with the cursor shape 
8d7d			 
8d7d								 
8d7d			 
8d7d			.inochgstate: 
8d7d 3a 59 ee				ld a,(input_cur_onoff) 
8d80 fe ff				cp 255 
8d82 28 0e				jr z, .skipcursor 
8d84 3a 5e ee				ld a, (input_at_pos) 
8d87 47					ld b, a 
8d88 3a 4f ee				ld a, (input_cursor) 
8d8b 80					add b 
8d8c 11 bb eb				ld de, cursor_shape 
8d8f					 
8d8f cd d0 8a				call str_at_display 
8d92			 
8d92			.skipcursor: 
8d92				if DEBUG_INPUTV2 
8d92			 
8d92					ld a,(input_at_pos) 
8d92					ld hl, LFSRSeed 
8d92					call hexout 
8d92					ld a, (input_cursor) 
8d92					ld hl, LFSRSeed+2 
8d92					call hexout 
8d92					ld a,(input_size) 
8d92					ld hl, LFSRSeed+4 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_onoff) 
8d92					ld hl, LFSRSeed+6 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_flash) 
8d92					ld hl, LFSRSeed+8 
8d92					call hexout 
8d92			 
8d92					ld a,(input_len) 
8d92					ld hl, LFSRSeed+10 
8d92					call hexout 
8d92					ld hl, LFSRSeed+12 
8d92					ld a, 0 
8d92					ld (hl),a 
8d92					ld a, display_row_4 
8d92					ld de, LFSRSeed 
8d92					call str_at_display 
8d92				endif 
8d92 cd e0 8a				call update_display 
8d95			 
8d95					; TODO keyboard processing 
8d95			 
8d95			if BASE_CPM 
8d95					call cin_wait 
8d95			else 
8d95 cd 70 dd				call cin    ; _wait 
8d98			endif 
8d98 fe 00				cp 0 
8d9a ca 3d 8d				jp z, .inmain 
8d9d			 
8d9d fe 0b				cp KEY_LEFT    ; cursor left 
8d9f ca 57 8e				jp z, input_left 
8da2				 
8da2 fe 0c				cp KEY_RIGHT      ; cursor right 
8da4 ca 5e 8e				jp z, input_right 
8da7			 
8da7 fe 0d				cp KEY_CR 
8da9 c8					ret z 
8daa			 
8daa fe 08				cp KEY_BS 
8dac ca cc 8e				jp z, input_delchar 
8daf			 
8daf fe 06				cp KEY_NEXTWORD 
8db1 ca d8 8d				jp z, input_nxtword 
8db4			 
8db4 fe 07				cp KEY_PREVWORD 
8db6 ca ff 8d				jp z, input_prvword 
8db9			 
8db9 fe 0e				cp KEY_HOME    ; jump to start of line 
8dbb 20 08				jr nz, .ikh 
8dbd 3e 00				ld a, 0 
8dbf 32 4f ee				ld (input_cursor), a 
8dc2 ca 3d 8d				jp z, .inmain 
8dc5			.ikh: 
8dc5			 
8dc5 fe 0f				cp KEY_END     ; jump to end of line 
8dc7 20 09				jr nz, .ike 
8dc9 3a 54 ee				ld a, (input_len) 
8dcc 32 4f ee				ld (input_cursor),a 
8dcf ca 3d 8d				jp z, .inmain 
8dd2			.ike: 
8dd2 fe 05			        cp KEY_UP      ; recall last command 
8dd4 c8					ret z 
8dd5			;jr nz, .irec 
8dd5			; TODO next word 
8dd5			; TODO prev word 
8dd5			;  
8dd5			; 
8dd5			;	ld hl, scratch 
8dd5			;	ld de, os_last_cmd 
8dd5			;	call strcpy 
8dd5			;		jp  .inmain 
8dd5			.irec: 
8dd5			;		jr .instr1 
8dd5			 
8dd5			 
8dd5			 
8dd5					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dd5			 
8dd5			; TODO return if any special keys are given 
8dd5			;		ld l, a 
8dd5			;		ld a, 28 ; KEY_F12   ; 27 
8dd5			;		sub l 
8dd5			;		ret m 
8dd5			;		ld a, l 
8dd5					; if no special key then insert as a char 
8dd5			 
8dd5 c3 9e 8e				jp input_inschr 
8dd8			 
8dd8				 
8dd8			input_nxtword: 
8dd8				; jump to start next word after the cursor 
8dd8			 
8dd8			.insknwn:	 
8dd8 cd 94 8e				call input_curptr	 
8ddb 7e					ld a,(hl)	 
8ddc fe 00				cp 0 
8dde ca 3d 8d				jp z, .inmain    ; end of string 
8de1			 
8de1			; if we are on a word, then move off of it 
8de1			 
8de1 fe 20				cp ' ' 
8de3 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8de5 21 4f ee				ld hl, input_cursor 
8de8 34					inc (hl) 
8de9 18 ed				jr .insknwn 
8deb			 
8deb			.inspace: 
8deb			 
8deb cd 94 8e				call input_curptr	 
8dee 7e					ld a,(hl)	 
8def fe 00				cp 0 
8df1 ca 3d 8d				jp z, .inmain    ; end of string 
8df4			 
8df4			; if we are on a word, then move off of it 
8df4			 
8df4 fe 20				cp ' ' 
8df6 c2 3d 8d				jp nz, .inmain     ; we are on non space so at next word 
8df9 21 4f ee				ld hl, input_cursor 
8dfc 34					inc (hl) 
8dfd 18 ec				jr .inspace 
8dff			 
8dff			 
8dff			 
8dff			 
8dff			input_prvword: 
8dff				; jump to the start of previous word before the cursor 
8dff			 
8dff			; where are we to start with currently? 
8dff			 
8dff cd 94 8e				call input_curptr	 
8e02 7e					ld a, (hl) 
8e03 fe 20				cp ' ' 
8e05 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8e07			 
8e07			 
8e07			 
8e07			.inskpwn:	 
8e07 3a 4f ee				ld a,(input_cursor) 
8e0a fe 00				cp 0 
8e0c ca 3d 8d				jp z, .inmain    ; start of string 
8e0f			 
8e0f			;if we are on a word, then move off of it 
8e0f			 
8e0f cd 94 8e				call input_curptr	 
8e12 7e					ld a, (hl) 
8e13 fe 20				cp ' ' 
8e15 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e17					;jp z, .inmain    ; start of string 
8e17 21 4f ee				ld hl, input_cursor 
8e1a 35					dec (hl) 
8e1b 18 ea				jr .inskpwn 
8e1d			.iwstart: 
8e1d 21 4f ee				ld hl, input_cursor 
8e20 34					inc (hl) 
8e21 c3 3d 8d				jp .inmain 
8e24					 
8e24			 
8e24			.inspacep: 
8e24			 
8e24					;jp .inmain    ; start of string 
8e24			 
8e24			 
8e24			 
8e24 3a 4f ee				ld a,(input_cursor) 
8e27 fe 00				cp 0 
8e29 ca 3d 8d				jp z, .inmain    ; start of string 
8e2c			 
8e2c			; if we are on a word, then move off of it 
8e2c			 
8e2c cd 94 8e				call input_curptr	 
8e2f 7e					ld a, (hl) 
8e30 fe 20				cp ' ' 
8e32 c2 3b 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e35 21 4f ee				ld hl, input_cursor 
8e38 35					dec (hl) 
8e39 18 e9				jr .inspacep 
8e3b			 
8e3b			 
8e3b			.incharp:	 
8e3b					; eat the word to get to the start 
8e3b 3a 4f ee				ld a,(input_cursor) 
8e3e fe 00				cp 0 
8e40 ca 3d 8d				jp z, .inmain    ; start of string 
8e43			 
8e43			; if we are on a word, then move off of it 
8e43			 
8e43 cd 94 8e				call input_curptr	 
8e46 7e					ld a, (hl) 
8e47 fe 20				cp ' ' 
8e49 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e4b 21 4f ee				ld hl, input_cursor 
8e4e 35					dec (hl) 
8e4f 18 ea				jr .incharp 
8e51			.ipwordst: 
8e51					; at space before the prev word so reposition over it 
8e51 21 4f ee				ld hl, input_cursor 
8e54 34					inc (hl) 
8e55 18 b0				jr .inskpwn 
8e57					 
8e57			 
8e57			 
8e57			input_left: 
8e57				; move cursor left 
8e57 21 4f ee			ld hl, input_cursor 
8e5a 35				dec (hl) 
8e5b			;	cp 0 
8e5b			;	jp z, .inmain    ; ignore left as at the start of the string 
8e5b c3 3d 8d			jp .inmain 
8e5e			 
8e5e			input_right: 
8e5e				; move cursor right 
8e5e				 
8e5e				;ld a, (input_size) 
8e5e				;ld b, a 
8e5e 21 4f ee			ld hl, input_cursor 
8e61 34				inc (hl) 
8e62				;dec b 
8e62				;cp 0 
8e62				;jp z, .inmain   ; ignore as at end of the string buffer 
8e62				;ld a, b 
8e62				;inc a 
8e62				;ld (input_cursor), a 
8e62 c3 3d 8d			jp .inmain 
8e65			 
8e65			 
8e65			 
8e65			input_disp_ref: 
8e65				; display the text from start of buffer (ie full refresh) 
8e65 3a 5e ee			ld a, (input_at_pos) 
8e68 2a 61 ee			ld hl,(input_start) 
8e6b eb				ex de, hl 
8e6c cd d0 8a			call str_at_display  
8e6f c9				ret 
8e70			input_disp_oncur: 
8e70				; display the text from cursor position to end of buffer 
8e70				; TODO position start of string at cursor position on screen 
8e70				; TODO draw from that point on 
8e70 3a 4f ee			ld a, (input_cursor) 
8e73 47				ld b, a 
8e74 3a 5e ee			ld a, (input_at_pos) 
8e77 80				add b 
8e78 48				ld c, b     ; save a 
8e79 78				ld a, b     ; inc string start for cursor 
8e7a 2a 61 ee			ld hl,(input_start) 
8e7d cd ea 8c			call addatohl 
8e80 eb				ex de, hl 
8e81 79				ld a, c 
8e82 cd d0 8a			call str_at_display  
8e85 c9				ret 
8e86			 
8e86			input_nxtw: 
8e86				; Find next word 
8e86 c9				ret 
8e87			 
8e87			input_prvw: 
8e87				; Find previous word 
8e87 c9				ret 
8e88			 
8e88			input_lenrem:   
8e88				; Calculate the length of string remaining from current cursor 
8e88				; position to end of buffer (exc null term) 
8e88				 
8e88 3a 4f ee			ld a, (input_cursor) 
8e8b 4f				ld c, a 
8e8c 3a 60 ee			ld a, (input_size) 
8e8f 91				sub c 
8e90 06 00			ld b, 0 
8e92 0d				dec c 
8e93 c9				ret	 
8e94			 
8e94			input_curptr: 
8e94				; calc address of the character under the cursor 
8e94				 
8e94 2a 61 ee			ld hl, (input_start) 
8e97 3a 4f ee			ld a, (input_cursor) 
8e9a cd ea 8c			call addatohl 
8e9d c9				ret 
8e9e			 
8e9e			input_inschr: 
8e9e				; Insert char at cursor position 
8e9e f5				push af   ; save char 
8e9f				;call input_lenrem    ; get bc length of remaining string 
8e9f			 
8e9f				 
8e9f cd 94 8e			call input_curptr 
8ea2			;	ld hl, (input_start) 
8ea2			;	ld a, (input_cursor) 
8ea2			;	call addatohl 
8ea2				;push hl   ; save to come back to 
8ea2			 
8ea2				; shift everything up one to end of buffer 
8ea2			 
8ea2				;push hl 
8ea2				;dec de 
8ea2				;inc de 
8ea2			;	ldir 
8ea2				 
8ea2				;pop hl 
8ea2			 
8ea2				; are we adding to the end of line? 
8ea2			 
8ea2 3a 4f ee			ld a, (input_cursor) 
8ea5 47				ld b, a 
8ea6 3a 54 ee			ld a, (input_len) 
8ea9 b8				cp b 
8eaa 20 09			jr nz, .insmid   ; no, insert in middle of text 
8eac			 
8eac				; tack on the end of the line 
8eac f1				pop af 
8ead 77				ld (hl), a   ; save new char 
8eae 23				inc hl 
8eaf 3e 00			ld a, 0 
8eb1 77				ld (hl), a 
8eb2 c3 5e 8e			jp input_right 
8eb5				 
8eb5			.insmid: 
8eb5				; hl has insertion point so move everything up one to allow for insertion 
8eb5				;call input_shiftright 
8eb5 f1				pop af 
8eb6			 
8eb6			.shufinsmid: 
8eb6 47				ld b, a     ; b contains new char, c prev char at this position  
8eb7 7e				ld a, (hl) 
8eb8			 
8eb8 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eba 28 07			jr z, .endinsmid 
8ebc 4f				ld c, a 
8ebd 78				ld a, b 
8ebe 77				ld (hl), a 
8ebf 23				inc hl 
8ec0 79				ld a, c 
8ec1 18 f3			jr .shufinsmid 
8ec3				 
8ec3			 
8ec3			 
8ec3			 
8ec3			.endinsmid: 
8ec3 78				ld a, b 
8ec4 77				ld (hl), a 
8ec5 23				inc hl 
8ec6 3e 00			ld a, 0 
8ec8 77				ld (hl), a 
8ec9			 
8ec9			 
8ec9			;	ld (hl), a   ; save new char 
8ec9			 
8ec9 c3 5e 8e			jp input_right 
8ecc			 
8ecc			;input_shiftright: 
8ecc			;	; shift text right at cursor, hl has shift start 
8ecc			;	push hl 
8ecc			;	push de 
8ecc			;	push bc 
8ecc			; 
8ecc			; 
8ecc			;	; move to end of string past zero term 
8ecc			;	ld hl,(input_start) 
8ecc			;	ld a, (input_len) 
8ecc			;	call addatohl 
8ecc			;	inc hl 
8ecc			;;	inc hl 
8ecc			;;	inc hl 
8ecc			;	ld a, 0 
8ecc			;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			;	 
8ecc			;;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			; 
8ecc			;	push hl 
8ecc			;	pop de 
8ecc			;	inc de 
8ecc			;	 
8ecc			; 
8ecc			;;	ld hl,(input_start) 
8ecc			;;	ld a, (input_cursor) 
8ecc			;;	call addatohl 
8ecc			; 
8ecc			; 
8ecc			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ecc			;	call input_lenrem    ; get bc length of remaining string 
8ecc			;	;ld a, (input_cursor) 
8ecc			;	;ld c, a 
8ecc			;	ld a, (input_len) 
8ecc			;	cp 2 
8ecc			;	jr z, .iskipzero	 
8ecc			;	;sub c 
8ecc			;	;inc a 
8ecc			;	;ld c, a 
8ecc			;	;ld b, 0 
8ecc			;	inc c 
8ecc			;	inc c 
8ecc			;	; move data 
8ecc			;	lddr 
8ecc			;.iskipzero: 
8ecc			; 
8ecc			;	pop bc 
8ecc			;	pop de 
8ecc			;	pop hl 
8ecc			;	ret	 
8ecc			 
8ecc			input_delchar: 
8ecc				; Delete char at cursor position 
8ecc cd 88 8e			call input_lenrem    ; get bc length of remaining string 
8ecf 2a 61 ee			ld hl, (input_start) 
8ed2 3a 4f ee			ld a, (input_cursor) 
8ed5 cd ea 8c			call addatohl 
8ed8			 
8ed8 e5				push hl 
8ed9 d1				pop de 
8eda 1b				dec de 
8edb			 
8edb			.dl:	 
8edb ed a0			ldi  
8edd 7e				ld a, (hl) 
8ede fe 00			cp 0 
8ee0 28 02			jr z, .dldone 
8ee2 18 f7			jr .dl 
8ee4			.dldone: 
8ee4 ed a0			ldi 
8ee6			 
8ee6 c3 57 8e			jp input_left 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			 
8ee9			 
8ee9			 
8ee9			if EDIT_V1 
8ee9			input_str: 
8ee9			 
8ee9				    	ld (input_at_pos),a      ; save display position to start 
8ee9					add c 
8ee9					ld (input_at_cursor),a	; save draw pos of cursor 
8ee9					ld (input_start), hl     ; save ptr to buffer 
8ee9					ld a, c 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl     ; save ptr to point under the cursor 
8ee9					ld a,d 
8ee9				        ld (input_size), a       ; save length of input area 
8ee9					ld a, c 
8ee9					ld (input_cursor),a      ; init cursor start position  
8ee9					ld a,e 
8ee9				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8ee9					 
8ee9					 
8ee9			 
8ee9			;		ld a,(input_ptr) 
8ee9			;		ld (input_under_cursor),a 	; save what is under the cursor 
8ee9			 
8ee9			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8ee9					; init cursor shape if not set by the cin routines 
8ee9					ld hl, cursor_shape 
8ee9			if BASE_KEV 
8ee9					ld a, 255 
8ee9			else 
8ee9					ld a, '#' 
8ee9			endif 
8ee9					ld (hl), a 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl), a 
8ee9			 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					ld a, 1 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'I' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9			.is1:		; main entry loop 
8ee9			 
8ee9			 
8ee9			 
8ee9					; pause 1ms 
8ee9			 
8ee9					ld a, 1 
8ee9					call aDelayInMS 
8ee9			 
8ee9					; dec flash counter 
8ee9					ld a, (input_cur_flash) 
8ee9					dec a 
8ee9					ld (input_cur_flash), a 
8ee9					cp 0 
8ee9					jr nz, .nochgstate 
8ee9			 
8ee9			 
8ee9					; change state 
8ee9					ld a,(input_cur_onoff) 
8ee9					neg 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			 
8ee9					; reset on change of state 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9			.nochgstate: 
8ee9					 
8ee9					 
8ee9			 
8ee9					; display cursor  
8ee9			 
8ee9			;		ld hl, (input_start) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			 
8ee9					; get char under cursor and replace with cursor 
8ee9			ld hl, (input_ptr) 
8ee9			;		ld a, (hl) 
8ee9			;		ld (input_under_cursor),a 
8ee9			;		ld a, '_' 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					; display string 
8ee9			 
8ee9					ld de, (input_start) 
8ee9					ld a, (input_at_pos) 
8ee9					call str_at_display 
8ee9			;	        call update_display 
8ee9			 
8ee9					; find place to put the cursor 
8ee9			;		add h 
8ee9			;		ld l, display_row_1 
8ee9			;		sub l 
8ee9			; (input_at_pos) 
8ee9					;ld c, a 
8ee9			;		ld a, (input_cursor) 
8ee9			;		ld l, (input_at_pos) 
8ee9			;		;ld b, h 
8ee9			;		add l 
8ee9			;		ld (input_at_cursor),a 
8ee9					;ld l,h 
8ee9			 
8ee9			;		ld h, 0 
8ee9			;		ld l,(input_at_pos) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8ee9			;		call subafromhl 
8ee9			;		ld a,l 
8ee9			;		ld (input_at_cursor), a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					ld a, (hardware_diag) 
8ee9					cp 0 
8ee9					jr z, .skip_input_diag 
8ee9			 
8ee9					ld a,(input_at_pos) 
8ee9					ld hl, LFSRSeed 
8ee9					call hexout 
8ee9					ld a, (input_cursor) 
8ee9					ld hl, LFSRSeed+2 
8ee9					call hexout 
8ee9					ld a,(input_at_cursor) 
8ee9					ld hl, LFSRSeed+4 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_onoff) 
8ee9					ld hl, LFSRSeed+6 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_flash) 
8ee9					ld hl, LFSRSeed+8 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_len) 
8ee9					ld hl, LFSRSeed+10 
8ee9					call hexout 
8ee9					ld hl, LFSRSeed+12 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9					ld a, display_row_4 
8ee9					ld de, LFSRSeed 
8ee9					call str_at_display 
8ee9					.skip_input_diag: 
8ee9				endif 
8ee9			 
8ee9					; decide on if we are showing the cursor this time round 
8ee9			 
8ee9					ld a, (input_cur_onoff) 
8ee9					cp 255 
8ee9					jr z, .skipcur 
8ee9			 
8ee9			 
8ee9					ld a,(input_at_cursor) 
8ee9					ld de, cursor_shape 
8ee9					call str_at_display 
8ee9			 
8ee9					; save length of current input string 
8ee9					ld hl, (input_start) 
8ee9					ld a, 0 
8ee9					call strlent 
8ee9					ld a,l 
8ee9					ld (input_len),a 
8ee9			 
8ee9			.skipcur: 
8ee9			 
8ee9				        call update_display 
8ee9					 
8ee9			 
8ee9			 
8ee9					; wait 
8ee9				 
8ee9					; TODO loop without wait to flash the cursor and char under cursor	 
8ee9					call cin    ; _wait 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 
8ee9			 
8ee9					; get ptr to char to input into 
8ee9			 
8ee9					ld c,a 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_cursor) 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl 
8ee9					ld a,c 
8ee9			 
8ee9					; replace char under cursor 
8ee9			 
8ee9			;		ld hl, (input_ptr) 
8ee9			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8ee9			;		ld (hl), a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'i' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					cp KEY_HOME 
8ee9					jr nz, .iske 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor),a 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					jp .is1 
8ee9					 
8ee9			.iske:		cp KEY_END 
8ee9					jr nz, .isknw 
8ee9					jp .is1 
8ee9			 
8ee9			.isknw:		cp KEY_NEXTWORD 
8ee9					jr nz, .iskpw 
8ee9			 
8ee9			.isknwm:	ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0 
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .isknwm 
8ee9			 
8ee9			.iskpw:		cp KEY_PREVWORD 
8ee9					jr nz, .iskl 
8ee9			.iskpwm:	 
8ee9					ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0  
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .iskpwm 
8ee9			 
8ee9			 
8ee9			.iskl:		cp KEY_LEFT 
8ee9					jr nz, .isk1 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk1:		cp KEY_RIGHT 
8ee9					jr nz, .isk2 
8ee9			 
8ee9					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8ee9					ld e,a 
8ee9					ld a, (input_cursor) 
8ee9					cp e 
8ee9					jp z, .is1		; at the end of string so dont go right 
8ee9			 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk2:		cp KEY_UP 
8ee9			 
8ee9					jr nz, .isk3 
8ee9			 
8ee9					; swap last command with the current on 
8ee9			 
8ee9					; move cursor to start of string 
8ee9					ld hl, (input_start) 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					 
8ee9					; swap input and last command buffers 
8ee9			 
8ee9					ld hl, os_cli_cmd 
8ee9					ld de, os_last_cmd 
8ee9					ld b, 255 
8ee9			.swap1:		ld a, (hl) 
8ee9					ld c,a 
8ee9					ld a, (de) 
8ee9					ld (hl), a 
8ee9					ld a,c 
8ee9					ld (de),a 
8ee9					inc hl 
8ee9					inc de 
8ee9					djnz .swap1 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk3:		cp KEY_BS 
8ee9					jr nz, .isk4 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					; hl is source 
8ee9					; de needs to be source - 1 
8ee9			 
8ee9			;		ld a, 0 
8ee9			;		dec hl 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					; shift all data 
8ee9			 
8ee9					push hl 
8ee9					inc hl 
8ee9					pop de 
8ee9					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8ee9					ld c,a 
8ee9					ld b,0 
8ee9					ldir  
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					; remove char 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld de,.iblank 
8ee9					call str_at_display 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk4:		cp KEY_CR 
8ee9					jr z, .endinput 
8ee9			 
8ee9					; else add the key press to the end 
8ee9			 
8ee9					ld c, a			; save key pressed 
8ee9			 
8ee9					ld a,(hl)		; get what is currently under char 
8ee9			 
8ee9					cp 0			; we are at the end of the string 
8ee9					jr nz, .onchar 
8ee9					 
8ee9					; add a char to the end of the string 
8ee9				 
8ee9					ld (hl),c 
8ee9					inc hl 
8ee9			;		ld a,' ' 
8ee9			;		ld (hl),a 
8ee9			;		inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					dec hl 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc a				; TODO check max string length and scroll  
8ee9					ld (input_cursor), a		; inc cursor pos 
8ee9							 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, '+' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					jp .is1 
8ee9					 
8ee9			 
8ee9			 
8ee9					; if on a char then insert 
8ee9			.onchar: 
8ee9			 
8ee9					; TODO over flow check: make sure insert does not blow out buffer 
8ee9			 
8ee9					; need to do some maths to use lddr 
8ee9			 
8ee9					push hl   ; save char pos 
8ee9					push bc 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_len) 
8ee9					call addatohl  		; end of string 
8ee9					inc hl 
8ee9					inc hl		; past zero term 
8ee9					push hl 
8ee9					inc hl 
8ee9					push hl  
8ee9			 
8ee9								; start and end of lddr set, now how much to move? 
8ee9			 
8ee9							 
8ee9					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8ee9					ld b,a 
8ee9					ld a,(input_len) 
8ee9					ld e,a 
8ee9					sub b 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9			 
8ee9					ld b,0 
8ee9					ld c,a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'i' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					pop de 
8ee9					pop hl 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'I' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					lddr 
8ee9				 
8ee9			 
8ee9			 
8ee9					; TODO have a key for insert/overwrite mode???? 
8ee9					pop bc 
8ee9					pop hl 
8ee9					ld (hl), c		; otherwise overwrite current char 
8ee9					 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.endinput:	; TODO look for end of string 
8ee9			 
8ee9					; add trailing space for end of token 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a,(input_len) 
8ee9					call addatohl 
8ee9					ld a, ' ' 
8ee9					ld (hl),a 
8ee9					; TODO eof of parse marker 
8ee9			 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					ret 
8ee9			 
8ee9			.iblank: db " ",0 
8ee9			 
8ee9			 
8ee9			input_str_prev:	ld (input_at_pos), a 
8ee9					ld (input_start), hl 
8ee9					ld a,1			; add cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					ld (input_ptr), hl 
8ee9					ld a,d 
8ee9					ld (input_size), a 
8ee9					ld a,0 
8ee9					ld (input_cursor),a 
8ee9			.instr1:	 
8ee9			 
8ee9					; TODO do block cursor 
8ee9					; TODO switch cursor depending on the modifer key 
8ee9			 
8ee9					; update cursor shape change on key hold 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl), a 
8ee9			 
8ee9					; display entered text 
8ee9					ld a,(input_at_pos) 
8ee9			            	CALL fLCD_Pos       ;Position cursor to location in A 
8ee9			            	LD   de, (input_start) 
8ee9			            	CALL fLCD_Str       ;Display string pointed to by DE 
8ee9			 
8ee9					call cin 
8ee9					cp 0 
8ee9					jr z, .instr1 
8ee9			 
8ee9					; proecess keyboard controls first 
8ee9			 
8ee9					ld hl,(input_ptr) 
8ee9			 
8ee9					cp KEY_CR	 ; pressing enter ends input 
8ee9					jr z, .instrcr 
8ee9			 
8ee9					cp KEY_BS 	; back space 
8ee9					jr nz, .instr2 
8ee9					; process back space 
8ee9			 
8ee9					; TODO stop back space if at start of string 
8ee9					dec hl 
8ee9					dec hl ; to over write cursor 
8ee9					ld a,(cursor_shape) 
8ee9					;ld a,0 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a," " 
8ee9					ld (hl),a 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9			 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr2:	cp KEY_LEFT    ; cursor left 
8ee9					jr nz, .instr3 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9				 
8ee9			.instr3:	cp KEY_RIGHT      ; cursor right 
8ee9					jr nz, .instr4 
8ee9					inc hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr4:	cp KEY_HOME    ; jump to start of line 
8ee9					jr nz, .instr5 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr5:	cp KEY_END     ; jump to end of line 
8ee9					jr nz, .instr6 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			.instr6:        cp KEY_UP      ; recall last command 
8ee9					jr nz, .instrnew 
8ee9			 
8ee9				ld hl, scratch 
8ee9				ld de, os_last_cmd 
8ee9				call strcpy 
8ee9					jr .instr1 
8ee9			 
8ee9			 
8ee9			.instrnew:	; no special key pressed to see if we have room to store it 
8ee9			 
8ee9					; TODO do string size test 
8ee9			 
8ee9					dec hl ; to over write cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9					jr .instr1 
8ee9			.instrcr:	dec hl		; remove cursor 
8ee9					ld a,' '	; TODO add a trailing space for safety 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					; if at end of line scroll up    
8ee9					; TODO detecting only end of line 4 for scroll up  
8ee9			 
8ee9					;ld   
8ee9			 
8ee9					ret 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			; strcpy hl = dest, de source 
8ee9			 
8ee9 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8eea b7			            OR   A              ;Null terminator? 
8eeb c8			            RET  Z              ;Yes, so finished 
8eec 1a					ld a,(de) 
8eed 77					ld (hl),a 
8eee 13			            INC  DE             ;Point to next character 
8eef 23					inc hl 
8ef0 18 f7		            JR   strcpy       ;Repeat 
8ef2 c9					ret 
8ef3			 
8ef3			 
8ef3			; TODO string_at  
8ef3			; pass string which starts with lcd offset address and then null term string 
8ef3			 
8ef3			; TODO string to dec 
8ef3			; TODO string to hex 
8ef3			; TODO byte to string hex 
8ef3			; TODO byte to string dec 
8ef3			 
8ef3			 
8ef3			 
8ef3			; from z80uartmonitor 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ef3			; pass hl for where to put the text 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3 c5			hexout:	PUSH BC 
8ef4 f5					PUSH AF 
8ef5 47					LD B, A 
8ef6					; Upper nybble 
8ef6 cb 3f				SRL A 
8ef8 cb 3f				SRL A 
8efa cb 3f				SRL A 
8efc cb 3f				SRL A 
8efe cd 0e 8f				CALL tohex 
8f01 77					ld (hl),a 
8f02 23					inc hl	 
8f03					 
8f03					; Lower nybble 
8f03 78					LD A, B 
8f04 e6 0f				AND 0FH 
8f06 cd 0e 8f				CALL tohex 
8f09 77					ld (hl),a 
8f0a 23					inc hl	 
8f0b					 
8f0b f1					POP AF 
8f0c c1					POP BC 
8f0d c9					RET 
8f0e					 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			tohex: 
8f0e e5					PUSH HL 
8f0f d5					PUSH DE 
8f10 16 00				LD D, 0 
8f12 5f					LD E, A 
8f13 21 1b 8f				LD HL, .DATA 
8f16 19					ADD HL, DE 
8f17 7e					LD A, (HL) 
8f18 d1					POP DE 
8f19 e1					POP HL 
8f1a c9					RET 
8f1b			 
8f1b			.DATA: 
8f1b 30					DEFB	30h	; 0 
8f1c 31					DEFB	31h	; 1 
8f1d 32					DEFB	32h	; 2 
8f1e 33					DEFB	33h	; 3 
8f1f 34					DEFB	34h	; 4 
8f20 35					DEFB	35h	; 5 
8f21 36					DEFB	36h	; 6 
8f22 37					DEFB	37h	; 7 
8f23 38					DEFB	38h	; 8 
8f24 39					DEFB	39h	; 9 
8f25 41					DEFB	41h	; A 
8f26 42					DEFB	42h	; B 
8f27 43					DEFB	43h	; C 
8f28 44					DEFB	44h	; D 
8f29 45					DEFB	45h	; E 
8f2a 46					DEFB	46h	; F 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f2b			;;    subtract $30, if result > 9 then subtract $7 more 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			atohex: 
8f2b d6 30				SUB $30 
8f2d fe 0a				CP 10 
8f2f f8					RET M		; If result negative it was 0-9 so we're done 
8f30 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f32 c9					RET		 
8f33			 
8f33			 
8f33			 
8f33			 
8f33			; Get 2 ASCII characters as hex byte from pointer in hl 
8f33			 
8f33			BYTERD: 
8f33 16 00			LD	D,00h		;Set up 
8f35 cd 3d 8f			CALL	HEXCON		;Get byte and convert to hex 
8f38 87				ADD	A,A		;First nibble so 
8f39 87				ADD	A,A		;multiply by 16 
8f3a 87				ADD	A,A		; 
8f3b 87				ADD	A,A		; 
8f3c 57				LD	D,A		;Save hi nibble in D 
8f3d			HEXCON: 
8f3d 7e				ld a, (hl)		;Get next chr 
8f3e 23				inc hl 
8f3f d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f41 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f43 38 02			JR	C,NALPHA	;If so miss next bit 
8f45 d6 07			SUB	007h		;Else convert alpha 
8f47			NALPHA: 
8f47 b2				OR	D		;Add hi nibble back 
8f48 c9				RET			; 
8f49			 
8f49			 
8f49			; 
8f49			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f49			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f49			; characters (0-9a-f) are accepted. 
8f49			; 
8f49			;get_word        push    af 
8f49			;                call    get_byte        ; Get the upper byte 
8f49			;                ld      h, a 
8f49			;                call    get_byte        ; Get the lower byte 
8f49			;                ld      l, a 
8f49			;                pop     af 
8f49			;                ret 
8f49			; 
8f49			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f49			; the routine get_nibble is used only valid characters are accepted - the  
8f49			; input routine only accepts characters 0-9a-f. 
8f49			; 
8f49 c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f4a 7e					ld a,(hl) 
8f4b 23					inc hl 
8f4c cd 71 8f		                call    nibble2val      ; Get upper nibble 
8f4f cb 07		                rlc     a 
8f51 cb 07		                rlc     a 
8f53 cb 07		                rlc     a 
8f55 cb 07		                rlc     a 
8f57 47			                ld      b, a            ; Save upper four bits 
8f58 7e					ld a,(hl) 
8f59 cd 71 8f		                call    nibble2val      ; Get lower nibble 
8f5c b0			                or      b               ; Combine both nibbles 
8f5d c1			                pop     bc              ; Restore B (and C) 
8f5e c9			                ret 
8f5f			; 
8f5f			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f5f			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f5f			; to the serial line interface. The lower 4 bits of A contain the value of  
8f5f			; that particular digit. 
8f5f			; 
8f5f			;get_nibble      ld a,(hl)           ; Read a character 
8f5f			;                call    to_upper        ; Convert to upper case 
8f5f			;                call    is_hex          ; Was it a hex digit? 
8f5f			;                jr      nc, get_nibble  ; No, get another character 
8f5f			 ;               call    nibble2val      ; Convert nibble to value 
8f5f			 ;               call    print_nibble 
8f5f			 ;               ret 
8f5f			; 
8f5f			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f5f			; A valid hexadecimal digit is denoted by a set C flag. 
8f5f			; 
8f5f			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f5f			;                ret     nc              ; Yes 
8f5f			;                cp      '0'             ; Less than '0'? 
8f5f			;                jr      nc, is_hex_1    ; No, continue 
8f5f			;                ccf                     ; Complement carry (i.e. clear it) 
8f5f			;                ret 
8f5f			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f5f			;                ret     c               ; Yes 
8f5f			;                cp      'A'             ; Less than 'A'? 
8f5f			;                jr      nc, is_hex_2    ; No, continue 
8f5f			;                ccf                     ; Yes - clear carry and return 
8f5f			;                ret 
8f5f			;is_hex_2        scf                     ; Set carry 
8f5f			;                ret 
8f5f			; 
8f5f			; Convert a single character contained in A to upper case: 
8f5f			; 
8f5f fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f61 d8			                ret     c 
8f62 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f64 d0			                ret     nc              ; Nothing to do, either 
8f65 e6 5f		                and     $5f             ; Convert to upper case 
8f67 c9			                ret 
8f68			 
8f68			 
8f68			to_lower: 
8f68			 
8f68			   ; if char is in [A-Z] make it lower case 
8f68			 
8f68			   ; enter : a = char 
8f68			   ; exit  : a = lower case char 
8f68			   ; uses  : af 
8f68			 
8f68 fe 41		   cp 'A' 
8f6a d8			   ret c 
8f6b			    
8f6b fe 5b		   cp 'Z'+1 
8f6d d0			   ret nc 
8f6e			    
8f6e f6 20		   or $20 
8f70 c9			   ret 
8f71			 
8f71			; 
8f71			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f71			; corresponding value in A. 
8f71			; 
8f71 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f73 38 02		                jr      c, nibble2val_1 ; Yes 
8f75 d6 07		                sub     7               ; Adjust for A-F 
8f77 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f79 e6 0f		                and     $f              ; Only return lower 4 bits 
8f7b c9			                ret 
8f7c			; 
8f7c			; Print_nibble prints a single hex nibble which is contained in the lower  
8f7c			; four bits of A: 
8f7c			; 
8f7c			;print_nibble    push    af              ; We won't destroy the contents of A 
8f7c			;                and     $f              ; Just in case... 
8f7c			;                add     a, '0'             ; If we have a digit we are done here. 
8f7c			;                cp      '9' + 1         ; Is the result > 9? 
8f7c			;                jr      c, print_nibble_1 
8f7c			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f7c			;print_nibble_1  call    putc            ; Print the nibble and 
8f7c			;                pop     af              ; restore the original value of A 
8f7c			;                ret 
8f7c			;; 
8f7c			;; Send a CR/LF pair: 
8f7c			; 
8f7c			;crlf            push    af 
8f7c			;                ld      a, cr 
8f7c			;                call    putc 
8f7c			;                ld      a, lf 
8f7c			;                call    putc 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_word prints the four hex digits of a word to the serial line. The  
8f7c			; word is expected to be in HL. 
8f7c			; 
8f7c			;print_word      push    hl 
8f7c			;                push    af 
8f7c			;                ld      a, h 
8f7c			;                call    print_byte 
8f7c			;                ld      a, l 
8f7c			;                call    print_byte 
8f7c			;                pop     af 
8f7c			;                pop     hl 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f7c			; The byte to be printed is expected to be in A. 
8f7c			; 
8f7c			;print_byte      push    af              ; Save the contents of the registers 
8f7c			;                push    bc 
8f7c			;                ld      b, a 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                call    print_nibble    ; Print high nibble 
8f7c			;                ld      a, b 
8f7c			;                call    print_nibble    ; Print low nibble 
8f7c			;                pop     bc              ; Restore original register contents 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			fourehexhl:  
8f7c 7e				ld a,(hl) 
8f7d cd 2b 8f			call atohex 
8f80 cb 3f				SRL A 
8f82 cb 3f				SRL A 
8f84 cb 3f				SRL A 
8f86 cb 3f				SRL A 
8f88 47				ld b, a 
8f89 23				inc hl 
8f8a 7e				ld a,(hl) 
8f8b 23				inc hl 
8f8c cd 2b 8f			call atohex 
8f8f 80				add b 
8f90 57				ld d,a 
8f91 7e				ld a,(hl) 
8f92 cd 2b 8f			call atohex 
8f95 cb 3f				SRL A 
8f97 cb 3f				SRL A 
8f99 cb 3f				SRL A 
8f9b cb 3f				SRL A 
8f9d 47				ld b, a 
8f9e 23				inc hl 
8f9f 7e				ld a,(hl) 
8fa0 23				inc hl 
8fa1 cd 2b 8f			call atohex 
8fa4 80				add b 
8fa5 5f				ld e, a 
8fa6 d5				push de 
8fa7 e1				pop hl 
8fa8 c9				ret 
8fa9			 
8fa9			; pass hl. returns z set if the byte at hl is a digit 
8fa9			;isdigithl:  
8fa9			;	push bc 
8fa9			;	ld a,(hl) 
8fa9			;	cp ':' 
8fa9			;	jr nc, .isdf 		; > 
8fa9			;	cp '0' 
8fa9			;	jr c, .isdf		; < 
8fa9			; 
8fa9			;	; TODO find a better way to set z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	cp b 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9			; 
8fa9			;.isdf:	; not digit so clear z 
8fa9			; 
8fa9			;	; TODO find a better way to unset z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	inc b 
8fa9			;	cp b 
8fa9			; 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9				 
8fa9				 
8fa9			 
8fa9			 
8fa9			; pass hl as the four byte address to load 
8fa9			 
8fa9			get_word_hl:  
8fa9 e5				push hl 
8faa cd 49 8f			call get_byte 
8fad				 
8fad 47				ld b, a 
8fae			 
8fae e1				pop hl 
8faf 23				inc hl 
8fb0 23				inc hl 
8fb1			 
8fb1			; TODO not able to handle a-f  
8fb1 7e				ld a,(hl) 
8fb2			;	;cp ':' 
8fb2			;	cp 'g' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp 'G' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp '0' 
8fb2			;	jr c, .single_byte_hl		; < 
8fb2			 
8fb2				;call isdigithl 
8fb2 fe 00			cp 0 
8fb4 28 06			jr z, .single_byte_hl 
8fb6			 
8fb6			.getwhln:   ; hex word so get next byte 
8fb6			 
8fb6 cd 49 8f			call get_byte 
8fb9 6f				ld l, a 
8fba 60				ld h,b 
8fbb c9				ret 
8fbc 68			.single_byte_hl:   ld l,b 
8fbd 26 00				ld h,0 
8fbf c9					ret 
8fc0			 
8fc0			 
8fc0			 
8fc0			 
8fc0 21 60 97			ld hl,asc+1 
8fc3			;	ld a, (hl) 
8fc3			;	call nibble2val 
8fc3 cd 49 8f			call get_byte 
8fc6			 
8fc6			;	call fourehexhl 
8fc6 32 ef e2			ld (scratch+52),a 
8fc9				 
8fc9 21 ed e2			ld hl,scratch+50 
8fcc 22 de e5			ld (os_cur_ptr),hl 
8fcf			 
8fcf c9				ret 
8fd0			 
8fd0			 
8fd0			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fd0			 
8fd0			; Decimal Unsigned Version 
8fd0			 
8fd0			;Number in a to decimal ASCII 
8fd0			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fd0			;Example: display a=56 as "056" 
8fd0			;input: a = number 
8fd0			;Output: a=0,value of a in the screen 
8fd0			;destroys af,bc (don't know about hl and de) 
8fd0			DispAToASCII: 
8fd0 0e 9c			ld	c,-100 
8fd2 cd dc 8f			call	.Na1 
8fd5 0e f6			ld	c,-10 
8fd7 cd dc 8f			call	.Na1 
8fda 0e ff			ld	c,-1 
8fdc 06 2f		.Na1:	ld	b,'0'-1 
8fde 04			.Na2:	inc	b 
8fdf 81				add	a,c 
8fe0 38 fc			jr	c,.Na2 
8fe2 91				sub	c		;works as add 100/10/1 
8fe3 f5				push af		;safer than ld c,a 
8fe4 78				ld	a,b		;char is in b 
8fe5			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fe5 f1				pop af		;safer than ld a,c 
8fe6 c9				ret 
8fe7			 
8fe7			; Decimal Signed Version 
8fe7			 
8fe7			; DispA 
8fe7			; -------------------------------------------------------------- 
8fe7			; Converts a signed integer value to a zero-terminated ASCII 
8fe7			; string representative of that value (using radix 10). 
8fe7			; -------------------------------------------------------------- 
8fe7			; INPUTS: 
8fe7			;     HL     Value to convert (two's complement integer). 
8fe7			;     DE     Base address of string destination. (pointer). 
8fe7			; -------------------------------------------------------------- 
8fe7			; OUTPUTS: 
8fe7			;     None 
8fe7			; -------------------------------------------------------------- 
8fe7			; REGISTERS/MEMORY DESTROYED 
8fe7			; AF HL 
8fe7			; -------------------------------------------------------------- 
8fe7			 
8fe7			;DispHLToASCII: 
8fe7			;   push    de 
8fe7			;   push    bc 
8fe7			; 
8fe7			;; Detect sign of HL. 
8fe7			;    bit    7, h 
8fe7			;    jr     z, ._DoConvert 
8fe7			; 
8fe7			;; HL is negative. Output '-' to string and negate HL. 
8fe7			;    ld     a, '-' 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			; 
8fe7			;; Negate HL (using two's complement) 
8fe7			;    xor    a 
8fe7			;    sub    l 
8fe7			;    ld     l, a 
8fe7			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fe7			;    sbc    a, h 
8fe7			;    ld     h, a 
8fe7			; 
8fe7			;; Convert HL to digit characters 
8fe7			;._DoConvert: 
8fe7			;    ld     b, 0     ; B will count character length of number 
8fe7			;-   ld     a, 10 
8fe7			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fe7			;    push   af 
8fe7			;    inc    b 
8fe7			;    ld     a, h 
8fe7			;    or     l 
8fe7			;    jr     nz, - 
8fe7			; 
8fe7			;; Retrieve digits from stack 
8fe7			;-   pop    af 
8fe7			;    or     $30 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			;    djnz   - 
8fe7			; 
8fe7			;; Terminate string with NULL 
8fe7			;    xor    a 
8fe7			;    ld     (de), a 
8fe7			; 
8fe7			;    pop    bc 
8fe7			;    pop    de 
8fe7			;    ret 
8fe7			 
8fe7			;Comments 
8fe7			; 
8fe7			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fe7			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fe7			;    Note that the output string will not be fixed-width. 
8fe7			; 
8fe7			;Example Usage 
8fe7			; 
8fe7			;    ld    hl, -1004 
8fe7			;    ld    de, OP1 
8fe7			;    call  DispA 
8fe7			;    ld    hl, OP1 
8fe7			;    syscall  PutS 
8fe7			 
8fe7			 
8fe7			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fe7			 
8fe7			 
8fe7			;Converts an ASCII string to an unsigned 16-bit integer 
8fe7			;Quits when it reaches a non-decimal digit 
8fe7			 
8fe7			string_to_uint16: 
8fe7			atoui_16: 
8fe7			;Input: 
8fe7			;     DE points to the string 
8fe7			;Outputs: 
8fe7			;     HL is the result 
8fe7			;     A is the 8-bit value of the number 
8fe7			;     DE points to the byte after the number 
8fe7			;Destroys: 
8fe7			;     BC 
8fe7			;       if the string is non-empty, BC is HL/10 
8fe7			;Size:  24 bytes 
8fe7			;Speed: 42+d(104+{0,9}) 
8fe7			;       d is the number of digits in the number 
8fe7			;       max is 640 cycles for a 5 digit number 
8fe7			;Assuming no leading zeros: 
8fe7			;1 digit:  146cc 
8fe7			;2 digit:  250cc 
8fe7			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fe7			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fe7			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fe7			;avg: 544.81158447265625cc (544+13297/16384) 
8fe7			;=============================================================== 
8fe7 21 00 00		  ld hl,0 
8fea			.u16a: 
8fea 1a			  ld a,(de) 
8feb d6 30		  sub 30h 
8fed fe 0a		  cp 10 
8fef d0			  ret nc 
8ff0 13			  inc de 
8ff1 44			  ld b,h 
8ff2 4d			  ld c,l 
8ff3 29			  add hl,hl 
8ff4 29			  add hl,hl 
8ff5 09			  add hl,bc 
8ff6 29			  add hl,hl 
8ff7 85			  add a,l 
8ff8 6f			  ld l,a 
8ff9 30 ef		  jr nc,.u16a 
8ffb 24			  inc h 
8ffc c3 ea 8f		  jp .u16a 
8fff			 
8fff			 
8fff			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fff			 
8fff			;written by Zeda 
8fff			;Converts a 16-bit unsigned integer to an ASCII string. 
8fff			 
8fff			uitoa_16: 
8fff			;Input: 
8fff			;   DE is the number to convert 
8fff			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8fff			;Output: 
8fff			;   HL points to the null-terminated ASCII string 
8fff			;      NOTE: This isn't necessarily the same as the input HL. 
8fff d5			  push de 
9000 c5			  push bc 
9001 f5			  push af 
9002 eb			  ex de,hl 
9003			 
9003 01 f0 d8		  ld bc,-10000 
9006 3e 2f		  ld a,'0'-1 
9008 3c			  inc a 
9009 09			  add hl,bc  
900a 38 fc		   jr c,$-2 
900c 12			  ld (de),a 
900d 13			  inc de 
900e			 
900e 01 e8 03		  ld bc,1000 
9011 3e 3a		  ld a,'9'+1 
9013 3d			  dec a  
9014 09			  add hl,bc  
9015 30 fc		   jr nc,$-2 
9017 12			  ld (de),a 
9018 13			  inc de 
9019			 
9019 01 9c ff		  ld bc,-100 
901c 3e 2f		  ld a,'0'-1 
901e 3c			  inc a  
901f 09			  add hl,bc  
9020 38 fc		   jr c,$-2 
9022 12			  ld (de),a 
9023 13			  inc de 
9024			 
9024 7d			  ld a,l 
9025 26 3a		  ld h,'9'+1 
9027 25			  dec h  
9028 c6 0a		  add a,10  
902a 30 fb		   jr nc,$-3 
902c c6 30		  add a,'0' 
902e eb			  ex de,hl 
902f 72			  ld (hl),d 
9030 23			  inc hl 
9031 77			  ld (hl),a 
9032 23			  inc hl 
9033 36 00		  ld (hl),0 
9035			 
9035			;Now strip the leading zeros 
9035 0e fa		  ld c,-6 
9037 09			  add hl,bc 
9038 3e 30		  ld a,'0' 
903a 23			  inc hl  
903b be			  cp (hl)  
903c 28 fc		  jr z,$-2 
903e			 
903e			;Make sure that the string is non-empty! 
903e 7e			  ld a,(hl) 
903f b7			  or a 
9040 20 01		  jr nz,.atoub 
9042 2b			  dec hl 
9043			.atoub: 
9043			 
9043 f1			  pop af 
9044 c1			  pop bc 
9045 d1			  pop de 
9046 c9			  ret 
9047			 
9047			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9047			 
9047			toUpper: 
9047			;A is the char. 
9047			;If A is a lowercase letter, this sets it to the matching uppercase 
9047			;18cc or 30cc or 41cc 
9047			;avg: 26.75cc 
9047 fe 61		  cp 'a' 
9049 d8			  ret c 
904a fe 7b		  cp 'z'+1 
904c d0			  ret nc 
904d d6 20		  sub 'a'-'A' 
904f c9			  ret 
9050			 
9050			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9050			 
9050			; String Length 
9050			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9050			 
9050			; Get the length of the null-terminated string starting at $8000 hl 
9050			;    LD     HL, $8000 
9050			 
9050			strlenz: 
9050			 
9050 af			    XOR    A               ; Zero is the value we are looking for. 
9051 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9052 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9053			                           ; 65, 536 bytes (the entire addressable memory space). 
9053 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9055			 
9055			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9055 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9056 6f			    LD     L, A             ; number of bytes 
9057 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9059 2b			    DEC    HL              ; Compensate for null. 
905a c9				ret 
905b			 
905b			; Get the length of the A terminated string starting at $8000 hl 
905b			;    LD     HL, $8000 
905b			 
905b			strlent: 
905b			 
905b			                  ; A is the value we are looking for. 
905b 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
905d 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
905f			                           ; 65, 536 bytes (the entire addressable memory space). 
905f ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9061			 
9061			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9061 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9063 2e 00		    LD     L, 0             ; number of bytes 
9065 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9067 2b			    DEC    HL              ; Compensate for null. 
9068 c9				ret 
9069			 
9069			 
9069			;Comparing Strings 
9069			 
9069			;IN    HL     Address of string1. 
9069			;      DE     Address of string2. 
9069			 
9069			; doc given but wrong??? 
9069			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9069			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9069			; tested 
9069			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9069			 
9069			strcmp_old: 
9069 e5			    PUSH   HL 
906a d5			    PUSH   DE 
906b			 
906b 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
906c be			    CP     (HL)            ; (want to minimize work). 
906d 38 01		    JR     C, Str1IsBigger 
906f 7e			    LD     A, (HL) 
9070			 
9070			Str1IsBigger: 
9070 4f			    LD     C, A             ; Put length in BC 
9071 06 00		    LD     B, 0 
9073 13			    INC    DE              ; Increment pointers to meat of string. 
9074 23			    INC    HL 
9075			 
9075			CmpLoop: 
9075 1a			    LD     A, (DE)          ; Compare bytes. 
9076 ed a1		    CPI 
9078 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
907a 13			    INC    DE              ; Update pointer. 
907b ea 75 90		    JP     PE, CmpLoop 
907e			 
907e d1			    POP    DE 
907f e1			    POP    HL 
9080 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9081 be			    CP     (HL) 
9082 c9			    RET 
9083			 
9083			NoMatch: 
9083 2b			    DEC    HL 
9084 be			    CP     (HL)            ; Compare again to affect carry. 
9085 d1			    POP    DE 
9086 e1			    POP    HL 
9087 c9			    RET 
9088			 
9088			;; test strmp 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr z, .z1 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z1: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr z, .z2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr c, .c1 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c1: 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr c, .c2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;	NEXTW 
9088			;.str1:   db "string1",0 
9088			;.str2:   db "string2",0 
9088			 
9088			; only care about direct match or not 
9088			; hl and de strings 
9088			; zero set if the same 
9088			 
9088			strcmp: 
9088 1a				ld a, (de) 
9089 be				cp (hl) 
908a 28 02			jr z, .ssame 
908c b7				or a 
908d c9				ret 
908e			 
908e			.ssame:  
908e fe 00			cp 0 
9090 c8				ret z 
9091			 
9091 23				inc hl 
9092 13				inc de 
9093 18 f3			jr strcmp 
9095				 
9095				 
9095			 
9095			;Copyright (c) 2014, Luke Maurits 
9095			;All rights reserved. 
9095			; 
9095			;Redistribution and use in source and binary forms, with or without 
9095			;modification, are permitted provided that the following conditions are met: 
9095			; 
9095			;* Redistributions of source code must retain the above copyright notice, this 
9095			;  list of conditions and the following disclaimer. 
9095			; 
9095			;* Redistributions in binary form must reproduce the above copyright notice, 
9095			;  this list of conditions and the following disclaimer in the documentation 
9095			;  and/or other materials provided with the distribution. 
9095			; 
9095			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9095			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9095			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9095			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9095			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9095			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9095			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9095			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9095			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9095			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9095			 
9095			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9095			 
9095			StrictStrCmp: 
9095				; Load next chars of each string 
9095 1a				ld a, (de) 
9096 47				ld b, a 
9097 7e				ld a, (hl) 
9098				; Compare 
9098 b8				cp b 
9099				; Return non-zero if chars don't match 
9099 c0				ret nz 
909a				; Check for end of both strings 
909a fe 00			cp "\0" 
909c				; Return if strings have ended 
909c c8				ret z 
909d				; Otherwise, advance to next chars 
909d 23				inc hl 
909e 13				inc de 
909f 18 f4			jr StrictStrCmp 
90a1			 
90a1			;end 
90a1			; eof 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
# End of file firmware_strings.asm
90a1			include "firmware_memory.asm"   ; malloc and free  
90a1			 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			.mallocsize: db "Wants malloc >256",0 
90a1			.mallocasize: db "MALLOC gives >256",0 
90a1			.malloczero: db "MALLOC gives zero",0 
90a1			 
90a1			malloc_guard_zerolen: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1				ld de, 0 
90a1			        call cmp16 
90a1				jr nz, .lowalloz 
90a1			 
90a1				push hl 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .malloczero 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1				call bp_on 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1			.lowalloz: 
90a1			 
90a1			 
90a1				pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_entry: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowalloc 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocsize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdone 
90a1			.lowalloc: 
90a1			 
90a1			 
90a1				pop hl 
90a1			.lowdone:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_exit: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowallocx 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocasize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdonex 
90a1			.lowallocx: 
90a1			 
90a1				pop hl 
90a1			.lowdonex:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			endif 
90a1			 
90a1			if MALLOC_2 
90a1			; Z80 Malloc and Free Functions 
90a1			 
90a1			; Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc: 
90a1				 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_entry 
90a1			endif 
90a1			 
90a1			 
90a1			 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "mal" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of size into A 
90a1			    or h               ; Check if size is zero 
90a1			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
90a1			 
90a1			    ; Allocate memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma1" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    call malloc_internal ; Call internal malloc function 
90a1			    pop af             ; Restore AF register 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret                ; Return 
90a1			 
90a1			; Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free: 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of pointer into A 
90a1			    or h               ; Check if pointer is NULL 
90a1			    jp z, free_exit    ; If pointer is NULL, exit 
90a1			 
90a1			    ; Free memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1			    call free_internal  ; Call internal free function 
90a1			    pop af             ; Restore AF register 
90a1			    ret                ; Return 
90a1			 
90a1			; Internal Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc_internal: 
90a1			    ld bc, 2           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to requested size 
90a1			    ex de, hl          ; Save total size in DE, and keep it in HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			 
90a1			    ; Search for free memory block 
90a1			    ld de, (heap_end)  ; Load end of heap into DE 
90a1			    ld bc, 0           ; Initialize counter 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			malloc_search_loop: 
90a1			    ; Check if current block is free 
90a1			    ld a, (hl)         ; Load current block's status (free or used) 
90a1			    cp 0               ; Compare with zero (free) 
90a1			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
90a1			 
90a1			    ; Check if current block is large enough 
90a1			    ld a, (hl+1)       ; Load high byte of block size 
90a1			    cp l               ; Compare with low byte of requested size 
90a1			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
90a1			 
90a1			    ld a, (hl+2)       ; Load low byte of block size 
90a1			    cp h               ; Compare with high byte of requested size 
90a1			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
90a1			 
90a1			    ; Mark block as used 
90a1			    ld (hl), 0xFF      ; Set status byte to indicate used block 
90a1			 
90a1			    ; Calculate remaining space in block 
90a1			    ld bc, 0           ; Clear BC 
90a1			    add hl, bc         ; Increment HL to point to start of data block 
90a1			    add hl, de         ; HL = HL + DE (total size) 
90a1			    ld bc, 1           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to start of data block 
90a1			 
90a1			    ; Save pointer to allocated block in HL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma5" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			malloc_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3           ; Size of management overhead 
90a1			    add hl, bc         ; Move to the next block 
90a1			    inc de             ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e            ; Load low byte of heap end address 
90a1			    cp (hl)            ; Compare with low byte of current address 
90a1			    jr nz, malloc_search_loop  ; If not equal, continue searching 
90a1			    ld a, d            ; Load high byte of heap end address 
90a1			    cp 0               ; Check if it's zero (end of memory) 
90a1			    jr nz, malloc_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, allocation failed 
90a1			    xor a              ; Set result to NULL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma6" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			malloc_exit: 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma7" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			; Internal Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free_internal: 
90a1			    ld de, (heap_start) ; Load start of heap into DE 
90a1			    ld bc, 0            ; Initialize counter 
90a1			 
90a1			free_search_loop: 
90a1			    ; Check if current block contains the pointer 
90a1			    ld a, l             ; Load low byte of pointer 
90a1			    cp (hl+1)           ; Compare with high byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			    ld a, h             ; Load high byte of pointer 
90a1			    cp (hl+2)           ; Compare with low byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			 
90a1			    ; Mark block as free 
90a1			    ld (hl), 0          ; Set status byte to indicate free block 
90a1			    ret                 ; Return 
90a1			 
90a1			free_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3            ; Size of management overhead 
90a1			    add hl, bc          ; Move to the next block 
90a1			    inc de              ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e             ; Load low byte of heap end address 
90a1			    cp (hl)             ; Compare with low byte of current address 
90a1			    jr nz, free_search_loop  ; If not equal, continue searching 
90a1			    ld a, d             ; Load high byte of heap end address 
90a1			    cp 0                ; Check if it's zero (end of memory) 
90a1			    jr nz, free_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, pointer is not found in heap 
90a1			    ret 
90a1			 
90a1			free_exit: 
90a1			    ret                 ; Return 
90a1			 
90a1			; Define heap start and end addresses 
90a1			;heap_start:    .dw 0xC000   ; Start of heap 
90a1			;heap_end:      .dw 0xE000   ; End of heap 
90a1			 
90a1			endif 
90a1			 
90a1			 
90a1			if MALLOC_1 
90a1			 
90a1			 
90a1			 
90a1			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
90a1			 
90a1			;moved to firmware.asm 
90a1			;heap_start        .equ  0x9000      ; Starting address of heap 
90a1			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
90a1			 
90a1			;      .org 0 
90a1			;      jp    main 
90a1			 
90a1			 
90a1			;      .org  0x100 
90a1			;main: 
90a1			;      ld    HL, 0x8100 
90a1			;      ld    SP, HL 
90a1			; 
90a1			;      call  heap_init 
90a1			; 
90a1			;      ; Make some allocations 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9004 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9014 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9024 
90a1			; 
90a1			;      ; Free some allocations 
90a1			;      ld    HL, 0x9014 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9004 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9024 
90a1			;      call  free 
90a1			; 
90a1			; 
90a1			;      halt 
90a1			 
90a1			 
90a1			;------------------------------------------------------------------------------ 
90a1			;     heap_init                                                               : 
90a1			;                                                                             : 
90a1			; Description                                                                 : 
90a1			;     Initialise the heap and make it ready for malloc and free operations.   : 
90a1			;                                                                             : 
90a1			;     The heap is maintained as a linked list, starting with an initial       : 
90a1			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
90a1			;     the first free block in the heap. Each block then points to the next    : 
90a1			;     free block within the heap, and the free list ends at the first block   : 
90a1			;     with a null pointer to the next free block.                             : 
90a1			;                                                                             : 
90a1			; Parameters                                                                  : 
90a1			;     Inputs are compile-time only. Two defines which specify the starting    : 
90a1			;     address of the heap and its size are required, along with a memory      : 
90a1			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
90a1			;     principally stores a pointer to the first free block in the heap.       : 
90a1			;                                                                             : 
90a1			; Returns                                                                     : 
90a1			;     Nothing                                                                 : 
90a1			;------------------------------------------------------------------------------ 
90a1			heap_init: 
90a1 e5			      push  HL 
90a2			 
90a2			      ; Initialise free list struct 
90a2 21 8e dd		      ld    HL, heap_start 
90a5 22 89 dd		      ld    (free_list), HL 
90a8 21 00 00		      ld    HL, 0 
90ab 22 8b dd		      ld    (free_list+2), HL 
90ae			 
90ae			      ; Insert first free block at bottom of heap, consumes entire heap 
90ae 21 92 e2		      ld    HL, heap_start+heap_size-4 
90b1 22 8e dd		      ld    (heap_start), HL        ; Next block (end of free list) 
90b4 21 04 05		      ld    HL, heap_size-4 
90b7 22 90 dd		      ld    (heap_start+2), HL      ; Block size 
90ba			 
90ba			      ; Insert end of free list block at top of heap - two null words will 
90ba			      ; terminate the free list 
90ba 21 00 00		      ld    HL, 0 
90bd 22 94 e2		      ld    (heap_start+heap_size-2), HL 
90c0 22 92 e2		      ld    (heap_start+heap_size-4), HL 
90c3			 
90c3 e1			      pop   HL 
90c4			 
90c4 c9			      ret 
90c5			 
90c5			 
90c5			;------------------------------------------------------------------------------ 
90c5			;     malloc                                                                  : 
90c5			;                                                                             : 
90c5			; Description                                                                 : 
90c5			;     Allocates the wanted space from the heap and returns the address of the : 
90c5			;     first useable byte of the allocation.                                   : 
90c5			;                                                                             : 
90c5			;     Allocations can happen in one of two ways:                              : 
90c5			;                                                                             : 
90c5			;     1. A free block may be found which is the exact size wanted. In this    : 
90c5			;        case the block is removed from the free list and retuedn to the      : 
90c5			;        caller.                                                              : 
90c5			;     2. A free block may be found which is larger than the size wanted. In   : 
90c5			;        this case, the larger block is split into two. The first portion of  : 
90c5			;        this block will become the requested space by the malloc call and    : 
90c5			;        is returned to the caller. The second portion becomes a new free     : 
90c5			;        block, and the free list is adjusted to maintain continuity via this : 
90c5			;        newly created block.                                                 : 
90c5			;                                                                             : 
90c5			;     malloc does not set any initial value in the allocated space, the       : 
90c5			;     caller is required to do this as required.                              : 
90c5			;                                                                             : 
90c5			;     This implementation of malloc uses the stack exclusively, and is        : 
90c5			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90c5			;     advisable to disable interrupts before calling malloc, and recommended  : 
90c5			;     to avoid the use of malloc inside ISRs in general.                      : 
90c5			;                                                                             : 
90c5			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90c5			;                                                                             : 
90c5			; Parameters                                                                  : 
90c5			;     HL  Number of bytes wanted                                              : 
90c5			;                                                                             : 
90c5			; Returns                                                                     : 
90c5			;     HL  Address of the first useable byte of the allocation                 : 
90c5			;                                                                             : 
90c5			; Flags                                                                       : 
90c5			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90c5			;                                                                             : 
90c5			; Stack frame                                                                 : 
90c5			;       |             |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     BC      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     DE      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     IX      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |  prev_free  |                                                       : 
90c5			;   +4  +-------------+                                                       : 
90c5			;       |  this_free  |                                                       : 
90c5			;   +2  +-------------+                                                       : 
90c5			;       |  next_free  |                                                       : 
90c5			;   +0  +-------------+                                                       : 
90c5			;       |             |                                                       : 
90c5			;                                                                             : 
90c5			;------------------------------------------------------------------------------ 
90c5			 
90c5			 
90c5			;malloc: 
90c5			; 
90c5			;	SAVESP ON 1 
90c5			; 
90c5			;	call malloc_code 
90c5			; 
90c5			;	CHECKSP ON 1 
90c5			;	ret 
90c5			 
90c5			 
90c5			malloc: 
90c5 c5			      push  BC 
90c6 d5			      push  DE 
90c7 dd e5		      push  IX 
90c9			if DEBUG_FORTH_MALLOC_HIGH 
90c9			call malloc_guard_entry 
90c9			endif 
90c9			 
90c9					if DEBUG_FORTH_MALLOC 
90c9						DMARK "mal" 
90c9						CALLMONITOR 
90c9					endif 
90c9 7c			      ld    A, H                    ; Exit if no space requested 
90ca b5			      or    L 
90cb ca 8a 91		      jp    Z, malloc_early_exit 
90ce			 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			; 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			 
90ce			 
90ce			 
90ce			 
90ce					if DEBUG_FORTH_MALLOC 
90ce						DMARK "maA" 
90ce						CALLMONITOR 
90ce					endif 
90ce			      ; Set up stack frame 
90ce eb			      ex    DE, HL 
90cf 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90d2 39			      add   HL, SP 
90d3 f9			      ld    SP, HL 
90d4 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90d8 dd 39		      add   IX, SP 
90da			 
90da			      ; Setup initial state 
90da 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90dd 19			      add   HL, DE 
90de			 
90de 44			      ld    B, H                    ; Move want to BC 
90df 4d			      ld    C, L 
90e0			 
90e0 21 89 dd		      ld    HL, free_list           ; Store prev_free ptr to stack 
90e3 dd 75 04		      ld    (IX+4), L 
90e6 dd 74 05		      ld    (IX+5), H 
90e9			 
90e9 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90ea 23			      inc   HL 
90eb 56			      ld    D, (HL) 
90ec dd 73 02		      ld    (IX+2), E 
90ef dd 72 03		      ld    (IX+3), D 
90f2 eb			      ex    DE, HL                  ; this_free ptr into HL 
90f3			 
90f3					if DEBUG_FORTH_MALLOC 
90f3						DMARK "maB" 
90f3						CALLMONITOR 
90f3					endif 
90f3			      ; Loop through free block list to find some space 
90f3			malloc_find_space: 
90f3 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90f7 b3			      or    E 
90f8 ca 84 91		      jp    Z, malloc_no_space 
90fb			 
90fb dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90fe dd 72 01		      ld    (IX+1), D 
9101			 
9101			      ; Does this block have enough space to make the allocation? 
9101 23			      inc   HL                      ; Load free block size into DE 
9102 5e			      ld    E, (HL) 
9103 23			      inc   HL 
9104 56			      ld    D, (HL) 
9105			 
9105 eb			      ex    DE, HL                  ; Check size of block against want 
9106 b7			      or    A                       ; Ensure carry flag clear 
9107 ed 42		      sbc   HL, BC 
9109 e5			      push  HL                      ; Store the result for later (new block size) 
910a			 
910a ca 59 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
910d 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
910f			 
910f			      ; this_free block is not big enough, setup ptrs to test next free block 
910f e1			      pop   HL                      ; Discard previous result 
9110			 
9110 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9113 dd 66 03		      ld    H, (IX+3) 
9116 dd 75 04		      ld    (IX+4), L 
9119 dd 74 05		      ld    (IX+5), H 
911c			 
911c dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
911f dd 66 01		      ld    H, (IX+1) 
9122 dd 75 02		      ld    (IX+2), L 
9125 dd 74 03		      ld    (IX+3), H 
9128			 
9128					if DEBUG_FORTH_MALLOC 
9128						DMARK "MA>" 
9128						CALLMONITOR 
9128					endif 
9128 18 c9		      jr    malloc_find_space 
912a			 
912a			      ; split a bigger block into two - requested size and remaining size 
912a			malloc_alloc_split: 
912a					if DEBUG_FORTH_MALLOC 
912a						DMARK "MAs" 
912a						CALLMONITOR 
912a					endif 
912a eb			      ex    DE, HL                  ; Calculate address of new free block 
912b 2b			      dec   HL 
912c 2b			      dec   HL 
912d 2b			      dec   HL 
912e 09			      add   HL, BC 
912f			 
912f			      ; Create a new block and point it at next_free 
912f dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9132 dd 56 01		      ld    D, (IX+1) 
9135			 
9135 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9136 23			      inc   HL 
9137 72			      ld    (HL), D 
9138			 
9138 d1			      pop   DE                      ; Store size of new block into new block 
9139 23			      inc   HL 
913a 73			      ld    (HL), E 
913b 23			      inc   HL 
913c 72			      ld    (HL), D 
913d			 
913d			      ; Update this_free ptr to point to new block 
913d 2b			      dec   HL 
913e 2b			      dec   HL 
913f 2b			      dec   HL 
9140			 
9140 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9143 dd 56 03		      ld    D, (IX+3) 
9146			 
9146 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9149 dd 74 03		      ld    (IX+3), H 
914c			 
914c			      ; Modify this_free block to be allocation 
914c eb			      ex    DE, HL 
914d af			      xor   A                       ; Null the next block ptr of allocated block 
914e 77			      ld    (HL), A 
914f 23			      inc   HL 
9150 77			      ld    (HL), A 
9151			 
9151 23			      inc   HL                      ; Store want size into allocated block 
9152 71			      ld    (HL), C 
9153 23			      inc   HL 
9154 70			      ld    (HL), B 
9155 23			      inc   HL 
9156 e5			      push  HL                      ; Address of allocation to return 
9157			 
9157 18 19		      jr    malloc_update_links 
9159			 
9159			malloc_alloc_fit: 
9159 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
915a			 
915a					if DEBUG_FORTH_MALLOC 
915a						DMARK "MAf" 
915a						CALLMONITOR 
915a					endif 
915a			      ; Modify this_free block to be allocation 
915a eb			      ex    DE, HL 
915b 2b			      dec   HL 
915c 2b			      dec   HL 
915d 2b			      dec   HL 
915e			 
915e af			      xor   A                       ; Null the next block ptr of allocated block 
915f 77			      ld    (HL), A 
9160 23			      inc   HL 
9161 77			      ld    (HL), A 
9162			 
9162 23			      inc   HL                      ; Store address of allocation to return 
9163 23			      inc   HL 
9164 23			      inc   HL 
9165 e5			      push  HL 
9166			 
9166			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9166 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9169 dd 66 01		      ld    H, (IX+1) 
916c			 
916c dd 75 02		      ld    (IX+2), L               ; HL to this_free 
916f dd 74 03		      ld    (IX+3), H 
9172			 
9172			 
9172			malloc_update_links: 
9172			      ; Update prev_free ptr to point to this_free 
9172 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9175 dd 66 05		      ld    H, (IX+5) 
9178			 
9178 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
917b dd 56 03		      ld    D, (IX+3) 
917e			 
917e 73			      ld    (HL), E                 ; this_free ptr into prev_free 
917f 23			      inc   HL 
9180 72			      ld    (HL), D 
9181			 
9181					if DEBUG_FORTH_MALLOC 
9181						DMARK "Mul" 
9181						CALLMONITOR 
9181					endif 
9181			      ; Clear the Z flag to indicate successful allocation 
9181 7a			      ld    A, D 
9182 b3			      or    E 
9183			 
9183 d1			      pop   DE                      ; Address of allocation 
9184					if DEBUG_FORTH_MALLOC 
9184						DMARK "MAu" 
9184						CALLMONITOR 
9184					endif 
9184			 
9184			malloc_no_space: 
9184 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9187 39			      add   HL, SP 
9188 f9			      ld    SP, HL 
9189			 
9189 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAN" 
918a						CALLMONITOR 
918a					endif 
918a			 
918a			malloc_early_exit: 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAx" 
918a						CALLMONITOR 
918a					endif 
918a dd e1		      pop   IX 
918c d1			      pop   DE 
918d c1			      pop   BC 
918e			 
918e			if DEBUG_FORTH_MALLOC_HIGH 
918e			call malloc_guard_exit 
918e			call malloc_guard_zerolen 
918e			endif 
918e c9			      ret 
918f			 
918f			 
918f			;------------------------------------------------------------------------------ 
918f			;     free                                                                    : 
918f			;                                                                             : 
918f			; Description                                                                 : 
918f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
918f			;     returned by malloc, otherwise the behaviour is undefined.               : 
918f			;                                                                             : 
918f			;     Where possible, directly adjacent free blocks will be merged together   : 
918f			;     into larger blocks to help ensure that the heap does not become         : 
918f			;     excessively fragmented.                                                 : 
918f			;                                                                             : 
918f			;     free does not clear or set any other value into the freed space, and    : 
918f			;     therefore its contents may be visible through subsequent malloc's. The  : 
918f			;     caller should clear the freed space as required.                        : 
918f			;                                                                             : 
918f			;     This implementation of free uses the stack exclusively, and is          : 
918f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
918f			;     advisable to disable interrupts before calling free, and recommended    : 
918f			;     to avoid the use of free inside ISRs in general.                        : 
918f			;                                                                             : 
918f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
918f			;                                                                             : 
918f			; Parameters                                                                  : 
918f			;     HL  Pointer to address of first byte of allocation to be freed          : 
918f			;                                                                             : 
918f			; Returns                                                                     : 
918f			;     Nothing                                                                 : 
918f			;                                                                             : 
918f			; Stack frame                                                                 : 
918f			;       |             |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     BC      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     DE      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     IX      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |  prev_free  |                                                       : 
918f			;   +2  +-------------+                                                       : 
918f			;       |  next_free  |                                                       : 
918f			;   +0  +-------------+                                                       : 
918f			;       |             |                                                       : 
918f			;                                                                             : 
918f			;------------------------------------------------------------------------------ 
918f			free: 
918f c5			      push  BC 
9190 d5			      push  DE 
9191 dd e5		      push  IX 
9193			 
9193 7c			      ld    A, H                    ; Exit if ptr is null 
9194 b5			      or    L 
9195 ca 59 92		      jp    Z, free_early_exit 
9198			 
9198			      ; Set up stack frame 
9198 eb			      ex    DE, HL 
9199 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
919c 39			      add   HL, SP 
919d f9			      ld    SP, HL 
919e dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91a2 dd 39		      add   IX, SP 
91a4			 
91a4			      ; The address in HL points to the start of the useable allocated space, 
91a4			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
91a4			      ; address of the block itself. 
91a4 eb			      ex    DE, HL 
91a5 11 fc ff		      ld    DE, -4 
91a8 19			      add   HL, DE 
91a9			 
91a9			      ; An allocated block must have a null next block pointer in it 
91a9 7e			      ld    A, (HL) 
91aa 23			      inc   HL 
91ab b6			      or    (HL) 
91ac c2 54 92		      jp    NZ, free_done 
91af			 
91af 2b			      dec   HL 
91b0			 
91b0 44			      ld    B, H                    ; Copy HL to BC 
91b1 4d			      ld    C, L 
91b2			 
91b2			      ; Loop through the free list to find the first block with an address 
91b2			      ; higher than the block being freed 
91b2 21 89 dd		      ld    HL, free_list 
91b5			 
91b5			free_find_higher_block: 
91b5 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91b6 23			      inc   HL 
91b7 56			      ld    D, (HL) 
91b8 2b			      dec   HL 
91b9			 
91b9 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91bc dd 72 01		      ld    (IX+1), D 
91bf dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91c2 dd 74 03		      ld    (IX+3), H 
91c5			 
91c5 78			      ld    A, B                    ; Check if DE is greater than BC 
91c6 ba			      cp    D                       ; Compare MSB first 
91c7 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91c9 30 04		      jr    NC, free_find_higher_block_skip 
91cb 79			      ld    A, C 
91cc bb			      cp    E                       ; Then compare LSB 
91cd 38 08		      jr    C, free_found_higher_block 
91cf			 
91cf			free_find_higher_block_skip: 
91cf 7a			      ld    A, D                    ; Reached the end of the free list? 
91d0 b3			      or    E 
91d1 ca 54 92		      jp    Z, free_done 
91d4			 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 18 de		      jr    free_find_higher_block 
91d7			 
91d7			free_found_higher_block: 
91d7			      ; Insert freed block between prev and next free blocks 
91d7 71			      ld    (HL), C                 ; Point prev free block to freed block 
91d8 23			      inc   HL 
91d9 70			      ld    (HL), B 
91da			 
91da 60			      ld    H, B                    ; Point freed block at next free block 
91db 69			      ld    L, C 
91dc 73			      ld    (HL), E 
91dd 23			      inc   HL 
91de 72			      ld    (HL), D 
91df			 
91df			      ; Check if the freed block is adjacent to the next free block 
91df 23			      inc   HL                      ; Load size of freed block into HL 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3 eb			      ex    DE, HL 
91e4			 
91e4 09			      add   HL, BC                  ; Add addr of freed block and its size 
91e5			 
91e5 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91e8 dd 56 01		      ld    D, (IX+1) 
91eb			 
91eb b7			      or    A                       ; Clear the carry flag 
91ec ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91ee 20 22		      jr    NZ, free_check_adjacent_to_prev 
91f0			 
91f0			      ; Freed block is adjacent to next, merge into one bigger block 
91f0 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91f1 5e			      ld    E, (HL) 
91f2 23			      inc   HL 
91f3 56			      ld    D, (HL) 
91f4 e5			      push  HL                      ; Save ptr to next block for later 
91f5			 
91f5 60			      ld    H, B                    ; Store ptr from next block into freed block 
91f6 69			      ld    L, C 
91f7 73			      ld    (HL), E 
91f8 23			      inc   HL 
91f9 72			      ld    (HL), D 
91fa			 
91fa e1			      pop   HL                      ; Restore ptr to next block 
91fb 23			      inc   HL                      ; Load size of next block into DE 
91fc 5e			      ld    E, (HL) 
91fd 23			      inc   HL 
91fe 56			      ld    D, (HL) 
91ff d5			      push  DE                      ; Save next block size for later 
9200			 
9200 60			      ld    H, B                    ; Load size of freed block into HL 
9201 69			      ld    L, C 
9202 23			      inc   HL 
9203 23			      inc   HL 
9204 5e			      ld    E, (HL) 
9205 23			      inc   HL 
9206 56			      ld    D, (HL) 
9207 eb			      ex    DE, HL 
9208			 
9208 d1			      pop   DE                      ; Restore size of next block 
9209 19			      add   HL, DE                  ; Add sizes of both blocks 
920a eb			      ex    DE, HL 
920b			 
920b 60			      ld    H, B                    ; Store new bigger size into freed block 
920c 69			      ld    L, C 
920d 23			      inc   HL 
920e 23			      inc   HL 
920f 73			      ld    (HL), E 
9210 23			      inc   HL 
9211 72			      ld    (HL), D 
9212			 
9212			free_check_adjacent_to_prev: 
9212			      ; Check if the freed block is adjacent to the prev free block 
9212 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9215 dd 66 03		      ld    H, (IX+3) 
9218			 
9218 23			      inc   HL                      ; Size of prev free block into DE 
9219 23			      inc   HL 
921a 5e			      ld    E, (HL) 
921b 23			      inc   HL 
921c 56			      ld    D, (HL) 
921d 2b			      dec   HL 
921e 2b			      dec   HL 
921f 2b			      dec   HL 
9220			 
9220 19			      add   HL, DE                  ; Add prev block addr and size 
9221			 
9221 b7			      or    A                       ; Clear the carry flag 
9222 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9224 20 2e		      jr    NZ, free_done 
9226			 
9226			      ; Freed block is adjacent to prev, merge into one bigger block 
9226 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9227 69			      ld    L, C 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b e5			      push  HL                      ; Save freed block ptr for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
922f dd 66 03		      ld    H, (IX+3) 
9232 73			      ld    (HL), E 
9233 23			      inc   HL 
9234 72			      ld    (HL), D 
9235			 
9235 e1			      pop   HL                      ; Restore freed block ptr 
9236 23			      inc   HL                      ; Load size of freed block into DE 
9237 5e			      ld    E, (HL) 
9238 23			      inc   HL 
9239 56			      ld    D, (HL) 
923a d5			      push  DE                      ; Save freed block size for later 
923b			 
923b dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
923e dd 66 03		      ld    H, (IX+3) 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 5e			      ld    E, (HL) 
9244 23			      inc   HL 
9245 56			      ld    D, (HL) 
9246			 
9246 e1			      pop   HL                      ; Add sizes of both blocks 
9247 19			      add   HL, DE 
9248 eb			      ex    DE, HL 
9249			 
9249 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
924c dd 66 03		      ld    H, (IX+3) 
924f 23			      inc   HL 
9250 23			      inc   HL 
9251 73			      ld    (HL), E 
9252 23			      inc   HL 
9253 72			      ld    (HL), D 
9254			 
9254			free_done: 
9254 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9257 39			      add   HL, SP 
9258 f9			      ld    SP, HL 
9259			 
9259			free_early_exit: 
9259 dd e1		      pop   IX 
925b d1			      pop   DE 
925c c1			      pop   BC 
925d			 
925d c9			      ret 
925e			 
925e			; moved to firmware.asm 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			;                  .dw   0 
925e			 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_3 
925e			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
925e			;heap_start        .equ  0x9000      ; Starting address of heap 
925e			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
925e			; 
925e			 ;     .org 0 
925e			  ;    jp    main 
925e			; 
925e			; 
925e			 ;     .org  0x100 
925e			;main: 
925e			 ;     ld    HL, 0x8100 
925e			  ;    ld    SP, HL 
925e			; 
925e			;      call  heap_init 
925e			 
925e			      ; Make some allocations 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9004 
925e			; 
925e			 ;     ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9014 
925e			 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9024 
925e			 
925e			      ; Free some allocations 
925e			;      ld    HL, 0x9014 
925e			;      call  free 
925e			 
925e			;      ld    HL, 0x9004 
925e			;      call  free 
925e			; 
925e			;      ld    HL, 0x9024 
925e			;      call  free 
925e			 
925e			 
925e			 ;     halt 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     heap_init                                                               : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Initialise the heap and make it ready for malloc and free operations.   : 
925e			;                                                                             : 
925e			;     The heap is maintained as a linked list, starting with an initial       : 
925e			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
925e			;     the first free block in the heap. Each block then points to the next    : 
925e			;     free block within the heap, and the free list ends at the first block   : 
925e			;     with a null pointer to the next free block.                             : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     Inputs are compile-time only. Two defines which specify the starting    : 
925e			;     address of the heap and its size are required, along with a memory      : 
925e			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
925e			;     principally stores a pointer to the first free block in the heap.       : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;------------------------------------------------------------------------------ 
925e			heap_init: 
925e			      push  HL 
925e			 
925e			      ; Initialise free list struct 
925e			      ld    HL, heap_start 
925e			      ld    (free_list), HL 
925e			      ld    HL, 0 
925e			      ld    (free_list+2), HL 
925e			 
925e			      ; Insert first free block at bottom of heap, consumes entire heap 
925e			      ld    HL, heap_start+heap_size-4 
925e			      ld    (heap_start), HL        ; Next block (end of free list) 
925e			      ld    HL, heap_size-4 
925e			      ld    (heap_start+2), HL      ; Block size 
925e			 
925e			      ; Insert end of free list block at top of heap - two null words will 
925e			      ; terminate the free list 
925e			      ld    HL, 0 
925e			      ld    (heap_start+heap_size-2), HL 
925e			      ld    (heap_start+heap_size-4), HL 
925e			 
925e			      pop   HL 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     malloc                                                                  : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Allocates the wanted space from the heap and returns the address of the : 
925e			;     first useable byte of the allocation.                                   : 
925e			;                                                                             : 
925e			;     Allocations can happen in one of two ways:                              : 
925e			;                                                                             : 
925e			;     1. A free block may be found which is the exact size wanted. In this    : 
925e			;        case the block is removed from the free list and retuedn to the      : 
925e			;        caller.                                                              : 
925e			;     2. A free block may be found which is larger than the size wanted. In   : 
925e			;        this case, the larger block is split into two. The first portion of  : 
925e			;        this block will become the requested space by the malloc call and    : 
925e			;        is returned to the caller. The second portion becomes a new free     : 
925e			;        block, and the free list is adjusted to maintain continuity via this : 
925e			;        newly created block.                                                 : 
925e			;                                                                             : 
925e			;     malloc does not set any initial value in the allocated space, the       : 
925e			;     caller is required to do this as required.                              : 
925e			;                                                                             : 
925e			;     This implementation of malloc uses the stack exclusively, and is        : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling malloc, and recommended  : 
925e			;     to avoid the use of malloc inside ISRs in general.                      : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Number of bytes wanted                                              : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     HL  Address of the first useable byte of the allocation                 : 
925e			;                                                                             : 
925e			; Flags                                                                       : 
925e			;     Z   Set if the allocation did not succeed, clear otherwise              : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +4  +-------------+                                                       : 
925e			;       |  this_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			malloc: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if no space requested 
925e			      or    L 
925e			      jp    Z, malloc_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; Setup initial state 
925e			      ld    HL, 4                   ; want must also include space used by block struct 
925e			      add   HL, DE 
925e			 
925e			      ld    B, H                    ; Move want to BC 
925e			      ld    C, L 
925e			 
925e			      ld    HL, free_list           ; Store prev_free ptr to stack 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    E, (HL)                 ; Store this_free ptr to stack 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ld    (IX+2), E 
925e			      ld    (IX+3), D 
925e			      ex    DE, HL                  ; this_free ptr into HL 
925e			 
925e			      ; Loop through free block list to find some space 
925e			malloc_find_space: 
925e			      ld    E, (HL)                 ; Load next_free ptr into DE 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ld    A, D                    ; Check for null next_free ptr - end of free list 
925e			      or    E 
925e			      jp    Z, malloc_no_space 
925e			 
925e			      ld    (IX+0), E               ; Store next_free ptr to stack 
925e			      ld    (IX+1), D 
925e			 
925e			      ; Does this block have enough space to make the allocation? 
925e			      inc   HL                      ; Load free block size into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ex    DE, HL                  ; Check size of block against want 
925e			      or    A                       ; Ensure carry flag clear 
925e			      sbc   HL, BC 
925e			      push  HL                      ; Store the result for later (new block size) 
925e			 
925e			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
925e			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
925e			 
925e			      ; this_free block is not big enough, setup ptrs to test next free block 
925e			      pop   HL                      ; Discard previous result 
925e			 
925e			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
925e			      ld    H, (IX+3) 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
925e			      ld    H, (IX+1) 
925e			      ld    (IX+2), L 
925e			      ld    (IX+3), H 
925e			 
925e			      jr    malloc_find_space 
925e			 
925e			      ; split a bigger block into two - requested size and remaining size 
925e			malloc_alloc_split: 
925e			      ex    DE, HL                  ; Calculate address of new free block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      add   HL, BC 
925e			 
925e			      ; Create a new block and point it at next_free 
925e			      ld    E, (IX+0)               ; Load next_free ptr into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      ld    (HL), E                 ; Store next_free ptr into new block 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   DE                      ; Store size of new block into new block 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Update this_free ptr to point to new block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
925e			      ld    (IX+3), H 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store want size into allocated block 
925e			      ld    (HL), C 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			      inc   HL 
925e			      push  HL                      ; Address of allocation to return 
925e			 
925e			      jr    malloc_update_links 
925e			 
925e			malloc_alloc_fit: 
925e			      pop   HL                      ; Dont need new block size, want is exact fit 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store address of allocation to return 
925e			      inc   HL 
925e			      inc   HL 
925e			      push  HL 
925e			 
925e			      ; Copy next_free ptr to this_free, remove allocated block from free list 
925e			      ld    L, (IX+0)               ; next_free to HL 
925e			      ld    H, (IX+1) 
925e			 
925e			      ld    (IX+2), L               ; HL to this_free 
925e			      ld    (IX+3), H 
925e			 
925e			 
925e			malloc_update_links: 
925e			      ; Update prev_free ptr to point to this_free 
925e			      ld    L, (IX+4)               ; prev_free ptr to HL 
925e			      ld    H, (IX+5) 
925e			 
925e			      ld    E, (IX+2)               ; this_free ptr to DE 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (HL), E                 ; this_free ptr into prev_free 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Clear the Z flag to indicate successful allocation 
925e			      ld    A, D 
925e			      or    E 
925e			 
925e			      pop   DE                      ; Address of allocation 
925e			 
925e			malloc_no_space: 
925e			      ld    HL, 6                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			      ex    DE, HL                  ; Alloc addr into HL for return 
925e			 
925e			malloc_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     free                                                                    : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Return the space pointed to by HL to the heap. HL must be an address as : 
925e			;     returned by malloc, otherwise the behaviour is undefined.               : 
925e			;                                                                             : 
925e			;     Where possible, directly adjacent free blocks will be merged together   : 
925e			;     into larger blocks to help ensure that the heap does not become         : 
925e			;     excessively fragmented.                                                 : 
925e			;                                                                             : 
925e			;     free does not clear or set any other value into the freed space, and    : 
925e			;     therefore its contents may be visible through subsequent malloc's. The  : 
925e			;     caller should clear the freed space as required.                        : 
925e			;                                                                             : 
925e			;     This implementation of free uses the stack exclusively, and is          : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling free, and recommended    : 
925e			;     to avoid the use of free inside ISRs in general.                        : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Pointer to address of first byte of allocation to be freed          : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			free: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if ptr is null 
925e			      or    L 
925e			      jp    Z, free_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; The address in HL points to the start of the useable allocated space, 
925e			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
925e			      ; address of the block itself. 
925e			      ex    DE, HL 
925e			      ld    DE, -4 
925e			      add   HL, DE 
925e			 
925e			      ; An allocated block must have a null next block pointer in it 
925e			      ld    A, (HL) 
925e			      inc   HL 
925e			      or    (HL) 
925e			      jp    NZ, free_done 
925e			 
925e			      dec   HL 
925e			 
925e			      ld    B, H                    ; Copy HL to BC 
925e			      ld    C, L 
925e			 
925e			      ; Loop through the free list to find the first block with an address 
925e			      ; higher than the block being freed 
925e			      ld    HL, free_list 
925e			 
925e			free_find_higher_block: 
925e			      ld    E, (HL)                 ; Load next ptr from free block 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			 
925e			      ld    (IX+0), E               ; Save ptr to next free block 
925e			      ld    (IX+1), D 
925e			      ld    (IX+2), L               ; Save ptr to prev free block 
925e			      ld    (IX+3), H 
925e			 
925e			      ld    A, B                    ; Check if DE is greater than BC 
925e			      cp    D                       ; Compare MSB first 
925e			      jr    Z, $+4                  ; MSB the same, compare LSB 
925e			      jr    NC, free_find_higher_block_skip 
925e			      ld    A, C 
925e			      cp    E                       ; Then compare LSB 
925e			      jr    C, free_found_higher_block 
925e			 
925e			free_find_higher_block_skip: 
925e			      ld    A, D                    ; Reached the end of the free list? 
925e			      or    E 
925e			      jp    Z, free_done 
925e			 
925e			      ex    DE, HL 
925e			 
925e			      jr    free_find_higher_block 
925e			 
925e			free_found_higher_block: 
925e			      ; Insert freed block between prev and next free blocks 
925e			      ld    (HL), C                 ; Point prev free block to freed block 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			 
925e			      ld    H, B                    ; Point freed block at next free block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Check if the freed block is adjacent to the next free block 
925e			      inc   HL                      ; Load size of freed block into HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      add   HL, BC                  ; Add addr of freed block and its size 
925e			 
925e			      ld    E, (IX+0)               ; Load addr of next free block into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_check_adjacent_to_prev 
925e			 
925e			      ; Freed block is adjacent to next, merge into one bigger block 
925e			      ex    DE, HL                  ; Load next ptr from next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save ptr to next block for later 
925e			 
925e			      ld    H, B                    ; Store ptr from next block into freed block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore ptr to next block 
925e			      inc   HL                      ; Load size of next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save next block size for later 
925e			 
925e			      ld    H, B                    ; Load size of freed block into HL 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      pop   DE                      ; Restore size of next block 
925e			      add   HL, DE                  ; Add sizes of both blocks 
925e			      ex    DE, HL 
925e			 
925e			      ld    H, B                    ; Store new bigger size into freed block 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_check_adjacent_to_prev: 
925e			      ; Check if the freed block is adjacent to the prev free block 
925e			      ld    L, (IX+2)               ; Prev free block ptr into HL 
925e			      ld    H, (IX+3) 
925e			 
925e			      inc   HL                      ; Size of prev free block into DE 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      add   HL, DE                  ; Add prev block addr and size 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_done 
925e			 
925e			      ; Freed block is adjacent to prev, merge into one bigger block 
925e			      ld    H, B                    ; Load next ptr from freed block into DE 
925e			      ld    L, C 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save freed block ptr for later 
925e			 
925e			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
925e			      ld    H, (IX+3) 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore freed block ptr 
925e			      inc   HL                      ; Load size of freed block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save freed block size for later 
925e			 
925e			      ld    L, (IX+2)               ; Load size of prev block into DE 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      pop   HL                      ; Add sizes of both blocks 
925e			      add   HL, DE 
925e			      ex    DE, HL 
925e			 
925e			      ld    L, (IX+2)               ; Store new bigger size into prev block 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_done: 
925e			      ld    HL, 4                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			free_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;      .org 0x8000 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			 ;                 .dw   0 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_4 
925e			 
925e			; My memory allocation code. Very very simple.... 
925e			; allocate space under 250 chars 
925e			 
925e			heap_init: 
925e				; init start of heap as zero 
925e				;  
925e			 
925e				ld hl, heap_start 
925e				ld a, 0 
925e				ld (hl), a      ; empty block 
925e				inc hl 
925e				ld a, 0 
925e				ld (hl), a      ; length of block 
925e				; write end of list 
925e				inc hl 
925e				ld a,(hl) 
925e				inc hl 
925e				ld a,(hl) 
925e				 
925e			 
925e				; init some malloc vars 
925e			 
925e				ld hl, 0 
925e				ld (free_list), hl       ; store last malloc location 
925e			 
925e				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
925e				ld a, 0 
925e				ld (hl), a 
925e			 
925e			 
925e				ld hl, heap_start 
925e				;  
925e				  
925e				ret 
925e			 
925e			 
925e			;    free block marker 
925e			;    requested size  
925e			;    pointer to next block 
925e			;    .... 
925e			;    next block marker 
925e			 
925e			 
925e			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
925e			; 
925e			 
925e			 
925e			malloc:  
925e				push de 
925e				push bc 
925e				push af 
925e			 
925e				; hl space required 
925e				 
925e				ld c, l    ; hold space   (TODO only a max of 255) 
925e			 
925e			;	inc c     ; TODO BUG need to fix memory leak on push str 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			 
925e			 
925e			 
925e				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
925e			 
925e				ld a, (free_list+3) 
925e				cp 0 
925e				jr z, .contheap 
925e			 
925e				ld hl, (free_list)     ; get last alloc 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mrs" 
925e						CALLMONITOR 
925e					endif 
925e				jr .startalloc 
925e			 
925e			.contheap: 
925e				ld hl, heap_start 
925e			 
925e			.startalloc: 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mym" 
925e						CALLMONITOR 
925e					endif 
925e			.findblock: 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmf" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e				ld a,(hl)  
925e				; if byte is zero then clear to use 
925e			 
925e				cp 0 
925e				jr z, .foundemptyblock 
925e			 
925e				; if byte is not clear 
925e				;     then byte is offset to next block 
925e			 
925e				inc hl 
925e				ld a, (hl) ; get size 
925e			.nextblock:	inc hl 
925e					ld e, (hl) 
925e					inc hl 
925e					ld d, (hl) 
925e					ex de, hl 
925e			;	inc hl  ; move past the store space 
925e			;	inc hl  ; move past zero index  
925e			 
925e				; TODO detect no more space 
925e			 
925e				push hl 
925e				ld de, heap_end 
925e				call cmp16 
925e				pop hl 
925e				jr nc, .nospace 
925e			 
925e				jr .findblock 
925e			 
925e			.nospace: ld hl, 0 
925e				jp .exit 
925e			 
925e			 
925e			.foundemptyblock:	 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mme" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; TODO has block enough space if reusing??? 
925e			 
925e				;  
925e			 
925e			; see if this block has been previously used 
925e				inc hl 
925e				ld a, (hl) 
925e				dec hl 
925e				cp 0 
925e				jr z, .newblock 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meR" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; no reusing previously allocated block 
925e			 
925e			; is it smaller than previously used? 
925e				 
925e				inc hl    ; move to size 
925e				ld a, c 
925e				sub (hl)        ; we want c < (hl) 
925e				dec hl    ; move back to marker 
925e			        jr z, .findblock 
925e			 
925e				; update with the new size which should be lower 
925e			 
925e			        ;inc  hl   ; negate next move. move back to size  
925e			 
925e			.newblock: 
925e				; need to be at marker here 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meN" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			 
925e				ld a, c 
925e			 
925e				ld (free_list+3), a	 ; flag resume from last malloc  
925e				ld (free_list), hl    ; save out last location 
925e			 
925e			 
925e				;inc a     ; space for length byte 
925e				ld (hl), a     ; save block in use marker 
925e			 
925e				inc hl   ; move to space marker 
925e				ld (hl), a    ; save new space 
925e			 
925e				inc hl   ; move to start of allocated area 
925e				 
925e			;	push hl     ; save where we are - 1  
925e			 
925e			;	inc hl  ; move past zero index  
925e				; skip space to set down new marker 
925e			 
925e				; provide some extra space for now 
925e			 
925e				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
925e				inc a 
925e				inc a 
925e			 
925e				push hl   ; save where we are in the node block 
925e			 
925e				call addatohl 
925e			 
925e				; write linked list point 
925e			 
925e				pop de     ; get our node position 
925e				ex de, hl 
925e			 
925e				ld (hl), e 
925e				inc hl 
925e				ld (hl), d 
925e			 
925e				inc hl 
925e			 
925e				; now at start of allocated data so save pointer 
925e			 
925e				push hl 
925e			 
925e				; jump to position of next node and setup empty header in DE 
925e			 
925e				ex de, hl 
925e			 
925e			;	inc hl ; move past end of block 
925e			 
925e				ld a, 0 
925e				ld (hl), a   ; empty marker 
925e				inc hl 
925e				ld (hl), a   ; size 
925e				inc hl  
925e				ld (hl), a   ; ptr 
925e				inc hl 
925e				ld (hl), a   ; ptr 
925e			 
925e			 
925e				pop hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmr" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			.exit: 
925e				pop af 
925e				pop bc 
925e				pop de  
925e				ret 
925e			 
925e			 
925e			 
925e			 
925e			free:  
925e				push hl 
925e				push af 
925e				; get address in hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "fre" 
925e						CALLMONITOR 
925e					endif 
925e				; data is at hl - move to block count 
925e				dec hl 
925e				dec hl    ; get past pointer 
925e				dec hl 
925e			 
925e				ld a, (hl)    ; need this for a validation check 
925e			 
925e				dec hl    ; move to block marker 
925e			 
925e				; now check that the block count and block marker are the same  
925e			        ; this checks that we are on a malloc node and not random memory 
925e			        ; OK a faint chance this could be a problem but rare - famous last words! 
925e			 
925e				ld c, a 
925e				ld a, (hl)    
925e			 
925e				cp c 
925e				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
925e			 
925e				; yes good chance we are on a malloc node 
925e			 
925e				ld a, 0      
925e				ld (hl), a   ; mark as free 
925e			 
925e				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
925e			 
925e			.freeignore:  
925e			 
925e				pop af 
925e				pop hl 
925e			 
925e				ret 
925e			 
925e			 
925e			 
925e			endif 
925e			 
925e			; eof 
# End of file firmware_memory.asm
925e			  
925e			; device C  
925e			; Now handled by SPI  
925e			;if SOUND_ENABLE  
925e			;	include "firmware_sound.asm"  
925e			;endif  
925e			  
925e			include "firmware_diags.asm"  
925e			; Hardware diags menu 
925e			 
925e			 
925e			config: 
925e			 
925e 3e 00			ld a, 0 
9260 21 84 92			ld hl, .configmn 
9263 cd ee 8a			call menu 
9266			 
9266 fe 00			cp 0 
9268 c8				ret z 
9269			 
9269			;	cp 1 
9269			;	call z, .savetostore 
9269			 
9269 fe 01			cp 1 
926b			if STARTUP_V1 
926b cc 9a 92			call z, .selautoload 
926e			endif 
926e			 
926e			if STARTUP_V2 
926e				call z, .enautoload 
926e			endif 
926e fe 02			cp 2 
9270 cc 90 92			call z, .disautoload 
9273			;	cp 3 
9273			;	call z, .selbank 
9273 fe 03			cp 3 
9275 cc b8 92			call z, .debug_tog 
9278 fe 04			cp 4 
927a cc 06 94			call z, .bpsgo 
927d fe 05			cp 5 
927f cc e1 92			call z, hardware_diags 
9282			if STARTUP_V2 
9282				cp 6 
9282				call z, create_startup 
9282			endif 
9282 18 da			jr config 
9284			 
9284			.configmn: 
9284			;	dw prom_c3 
9284 f4 95			dw prom_c2 
9286 09 96			dw prom_c2a 
9288			;	dw prom_c2b 
9288			;	dw prom_c4 
9288 28 96			dw prom_m4 
928a 43 96			dw prom_m4b 
928c 4b 96			dw prom_c1 
928e			if STARTUP_V2 
928e				dw prom_c9 
928e			endif 
928e 00 00			dw 0 
9290				 
9290			 
9290			if STARTUP_V2 
9290			.enautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 1 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290				ld hl, prom_notav 
9290				ld de, prom_empty 
9290				call info_panel 
9290				endif 
9290			 
9290			 
9290				ret 
9290			endif 
9290			 
9290			.disautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 0 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290 21 5a 96			ld hl, prom_notav 
9293 11 70 96			ld de, prom_empty 
9296 cd 4e 8a			call info_panel 
9299				endif 
9299			 
9299			 
9299 c9				ret 
929a			 
929a			if STARTUP_V1 
929a			 
929a			; Select auto start 
929a			 
929a			.selautoload: 
929a			 
929a				 
929a				if STORAGE_SE 
929a			 
929a					call config_dir 
929a				        ld hl, scratch 
929a					ld a, 0 
929a					call menu 
929a			 
929a					cp 0 
929a					ret z 
929a			 
929a					dec a 
929a			 
929a			 
929a					; locate menu option 
929a			 
929a					ld hl, scratch 
929a					call table_lookup 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALl" 
929a						CALLMONITOR 
929a					endif 
929a					; with the pointer to the menu it, the byte following the zero term is the file id 
929a			 
929a					ld a, 0 
929a					ld bc, 50   ; max of bytes to look at 
929a					cpir  
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALb" 
929a						CALLMONITOR 
929a					endif 
929a					;inc hl 
929a			 
929a					ld a, (hl)   ; file id 
929a					 
929a				        ; save bank and file ids 
929a			 
929a					push af 
929a			 
929a			; TODO need to save to block 0 on bank 1	 
929a			 
929a					call storage_get_block_0 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "AL0" 
929a						CALLMONITOR 
929a					endif 
929a					pop af 
929a			 
929a					ld (store_page+STORE_0_FILERUN),a 
929a					 
929a					; save bank id 
929a			 
929a					ld a,(spi_device) 
929a					ld (store_page+STORE_0_BANKRUN),a 
929a			 
929a					; enable auto run of store file 
929a			 
929a					ld a, 1 
929a					ld (store_page+STORE_0_AUTOFILE),a 
929a			 
929a					; save buffer 
929a			 
929a					ld hl, 0 
929a					ld de, store_page 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALw" 
929a						CALLMONITOR 
929a					endif 
929a				call storage_write_block	 ; save update 
929a			  
929a			 
929a			 
929a			 
929a					ld hl, scratch 
929a					call config_fdir 
929a			 
929a				else 
929a			 
929a 21 5a 96			ld hl, prom_notav 
929d 11 70 96			ld de, prom_empty 
92a0 cd 4e 8a			call info_panel 
92a3			 
92a3				endif 
92a3 c9				ret 
92a4			endif 
92a4			 
92a4			 
92a4			; Select storage bank 
92a4			 
92a4			.selbank: 
92a4			 
92a4			;	if STORAGE_SE 
92a4			;	else 
92a4			 
92a4 21 5a 96			ld hl, prom_notav 
92a7 11 70 96			ld de, prom_empty 
92aa cd 4e 8a			call info_panel 
92ad			;	endif 
92ad				 
92ad c9				ret 
92ae			 
92ae			if STORAGE_SE 
92ae			 
92ae			.config_ldir:   
92ae				; Load storage bank labels into menu array 
92ae			 
92ae				 
92ae			 
92ae			 
92ae				ret 
92ae			 
92ae			 
92ae			endif 
92ae			 
92ae			 
92ae			; Save user words to storage 
92ae			 
92ae			.savetostore: 
92ae			 
92ae			;	if STORAGE_SE 
92ae			; 
92ae			;		call config_dir 
92ae			;	        ld hl, scratch 
92ae			;		ld a, 0 
92ae			;		call menu 
92ae			;		 
92ae			;		ld hl, scratch 
92ae			;		call config_fdir 
92ae			; 
92ae			;	else 
92ae			 
92ae 21 5a 96			ld hl, prom_notav 
92b1 11 70 96			ld de, prom_empty 
92b4 cd 4e 8a			call info_panel 
92b7			 
92b7			;	endif 
92b7			 
92b7 c9				ret 
92b8			 
92b8			if STARTUP_V2 
92b8			 
92b8			create_startup: 
92b8			 
92b8				ld a, 0 
92b8				ld hl, .crstart 
92b8				call menu 
92b8			 
92b8				cp 0 
92b8				ret z 
92b8			 
92b8				cp 1 
92b8				call z, .genlsword 
92b8				cp 2 
92b8				call z, .genedword 
92b8			 
92b8				cp 3 
92b8				call z, .gendemword 
92b8			 
92b8				cp 4 
92b8				call z, .genutlword 
92b8				cp 5 
92b8				call z, .genspiword 
92b8				cp 6 
92b8				call z, .genkeyword 
92b8				cp 7 
92b8				call z, .gensoundword 
92b8				cp 7 
92b8				call z, .genhwword 
92b8				jr create_startup 
92b8			 
92b8			.genhwword: 
92b8				ld hl, crs_hw 
92b8				ld de, .hwworddef 
92b8				call .genfile 
92b8				ret 
92b8			.gensoundword: 
92b8				ld hl, crs_sound 
92b8				ld de, .soundworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genlsword: 
92b8				ld hl, crs_s1 
92b8				ld de, .lsworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genedword: 
92b8				ld de, .edworddef 
92b8				ld hl, crs_s2 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.gendemword: 
92b8				ld de, .demoworddef 
92b8				ld hl, crs_s3 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genutlword: 
92b8				ld hl, crs_s4 
92b8				ld de, .utilwordef 
92b8				call .genfile 
92b8				ret 
92b8			.genspiword: 
92b8				ld hl, crs_s5 
92b8				ld de, .spiworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genkeyword: 
92b8				ld hl, crs_s6 
92b8				ld de, .keyworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			; hl - points to file name 
92b8			; de - points to strings to add to file 
92b8			 
92b8			.genfile: 
92b8				push hl 
92b8				push de 
92b8			 
92b8				call clear_display 
92b8				ld a, display_row_1 
92b8				ld de, .genfiletxt 
92b8				call str_at_display 
92b8				call update_display 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8			 
92b8				push de 
92b8				call storage_create 
92b8				; id in hl 
92b8				pop de   ; table of strings to add 
92b8			 
92b8			.genloop: 
92b8			 
92b8				push hl ; save id for next time around 
92b8				push de ; save de for next time around 
92b8			 
92b8				ex de, hl 
92b8				call loadwordinhl 
92b8				ex de, hl 
92b8			 
92b8				; need hl to be the id 
92b8				; need de to be the string ptr 
92b8				 
92b8				call storage_append 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8				inc de 
92b8				inc de 
92b8			 
92b8				ld a,(de) 
92b8				cp 0 
92b8				jr nz, .genloop 
92b8				inc de 
92b8				ld a, (de) 
92b8				dec de 
92b8				cp 0 
92b8				jr nz, .genloop	 
92b8			 
92b8				ret 
92b8			 
92b8			.genfiletxt:  db "Creating file...",0 
92b8			 
92b8			.hwworddef: 
92b8				dw test5 
92b8				dw test6 
92b8				dw test7 
92b8				dw test8 
92b8				dw test9 
92b8				dw test10 
92b8				dw 0 
92b8			 
92b8			.soundworddef: 
92b8				dw sound1 
92b8				dw sound2 
92b8				dw sound3 
92b8				dw sound4 
92b8				dw sound5 
92b8				dw sound6 
92b8				dw sound7 
92b8				dw sound8 
92b8				dw sound9 
92b8				dw 0 
92b8			 
92b8			.utilwordef: 
92b8				dw strncpy 
92b8				dw type 
92b8				dw clrstack 
92b8				dw longread 
92b8				dw start1 
92b8				dw start2 
92b8			; duplicated 
92b8			;	dw start3b 
92b8			;	dw start3c 
92b8				dw list 
92b8				dw 0 
92b8			 
92b8			.lsworddef: 
92b8				dw start3b 
92b8				dw 0 
92b8			 
92b8			.edworddef: 
92b8				dw edit1 
92b8				dw edit2 
92b8				dw edit3 
92b8				dw 0 
92b8			 
92b8			.demoworddef: 
92b8				dw game1 
92b8				dw game1a 
92b8				dw game1b 
92b8				dw game1c 
92b8				dw game1d 
92b8				dw game1s 
92b8				dw game1t 
92b8				dw game1f 
92b8				dw game1z 
92b8				dw game1zz 
92b8				dw ssv2 
92b8				dw ssv3 
92b8				dw ssv4 
92b8				dw ssv5 
92b8				dw ssv1 
92b8				dw ssv1cpm	 
92b8			;	dw game2b 
92b8			;	dw game2bf 
92b8			;	dw game2mba 
92b8			;	dw game2mbas	 
92b8			;	dw game2mbht 
92b8			;	dw game2mbms 
92b8			;	dw game2mb 
92b8			;	dw game3w 
92b8			;	dw game3p 
92b8			;	dw game3sc 
92b8			;	dw game3vsi 
92b8			;	dw game3vs 
92b8				dw 0 
92b8			 
92b8			 
92b8			.spiworddef: 
92b8			 
92b8			    dw spi1 
92b8			    dw spi2 
92b8			    dw spi2b 
92b8			    dw spi3 
92b8			    dw spi4 
92b8			    dw spi5 
92b8			;    dw spi6 
92b8			;    dw spi7 
92b8			 
92b8			;    dw spi8 
92b8			;    dw spi9 
92b8			;    dw spi10 
92b8			    dw 0 
92b8			 
92b8			.keyworddef: 
92b8			 
92b8				dw keyup 
92b8				dw keydown 
92b8				dw keyleft 
92b8				dw keyright 
92b8				dw 	keyf1 
92b8				dw keyf2 
92b8				dw keyf3 
92b8				dw keyf4 
92b8				dw keyf5 
92b8				dw keyf6 
92b8				dw keyf7 
92b8				dw keyf8 
92b8				dw keyf9 
92b8				dw keyf10 
92b8				dw keyf11 
92b8				dw keyf12 
92b8				dw keytab 
92b8				dw keycr 
92b8				dw keyhome 
92b8				dw keyend 
92b8				dw keybs 
92b8				dw 0 
92b8			 
92b8			.crstart: 
92b8				dw crs_s1 
92b8				dw crs_s2 
92b8				dw crs_s3 
92b8				dw crs_s4 
92b8				dw crs_s5 
92b8				dw crs_s6 
92b8				dw crs_sound 
92b8				dw crs_hw 
92b8				dw 0 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			if STORAGE_SE 
92b8			 
92b8			config_fdir: 
92b8				; using the scratch dir go through and release the memory allocated for each string 
92b8				 
92b8				ld hl, scratch 
92b8			.cfdir:	ld e,(hl) 
92b8				inc hl 
92b8				ld d,(hl) 
92b8				inc hl 
92b8			 
92b8				ex de, hl 
92b8				call ishlzero 
92b8				ret z     ; return on null pointer 
92b8				call free 
92b8				ex de, hl 
92b8				jr .cfdir 
92b8			 
92b8			 
92b8				ret 
92b8			 
92b8			 
92b8			config_dir: 
92b8			 
92b8				; for the config menus that need to build a directory of storage call this routine 
92b8				; it will construct a menu in scratch to pass to menu 
92b8			 
92b8				; open storage device 
92b8			 
92b8				; execute DIR to build a list of files and their ids into scratch in menu format 
92b8				; once the menu has finished then will need to call config_fdir to release the strings 
92b8				 
92b8				; c = number items 
92b8			 
92b8				 
92b8				call storage_get_block_0 
92b8			 
92b8				ld hl, store_page     ; get current id count 
92b8				ld b, (hl) 
92b8				ld c, 0    ; count of files   
92b8			 
92b8			 
92b8				ld hl, scratch 
92b8				ld (store_tmp2), hl    ; location to poke strings 
92b8			 
92b8				; check for empty drive 
92b8			 
92b8				ld a, 0 
92b8				cp b 
92b8				jp z, .dirdone 
92b8			 
92b8				 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdc" 
92b8						CALLMONITOR 
92b8					endif 
92b8			 
92b8			 
92b8			.diritem:	 
92b8				push bc 
92b8				; for each of the current ids do a search for them and if found push to stack 
92b8			 
92b8					ld hl, STORE_BLOCK_PHY 
92b8					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92b8					ld e,b 
92b8			 
92b8					call storage_findnextid 
92b8			 
92b8			 
92b8					; if found hl will be non zero 
92b8			 
92b8					call ishlzero 
92b8					jr z, .dirnotfound 
92b8			 
92b8					; increase count 
92b8			 
92b8					pop bc	 
92b8					inc c 
92b8					push bc 
92b8					 
92b8			 
92b8					; get file header and push the file name 
92b8			 
92b8					ld de, store_page 
92b8					call storage_read_block 
92b8			 
92b8					; push file id to stack 
92b8				 
92b8					ld a, (store_page) 
92b8					ld h, 0 
92b8					ld l, a 
92b8			 
92b8					;call forth_push_numhl 
92b8					; TODO store id 
92b8			 
92b8					push hl 
92b8			 
92b8					; push extent count to stack  
92b8				 
92b8					ld hl, store_page+3 
92b8			 
92b8					; get file name length 
92b8			 
92b8					call strlenz   
92b8			 
92b8					inc hl   ; cover zero term 
92b8					inc hl  ; stick the id at the end of the area 
92b8			 
92b8					push hl 
92b8					pop bc    ; move length to bc 
92b8			 
92b8					call malloc 
92b8			 
92b8					; TODO save malloc area to scratch 
92b8			 
92b8					ex de, hl 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), e 
92b8					inc hl 
92b8					ld (hl), d 
92b8					inc hl 
92b8					ld (store_tmp2), hl 
92b8			 
92b8					 
92b8			 
92b8					;pop hl   ; get source 
92b8			;		ex de, hl    ; swap aronund	 
92b8			 
92b8					ld hl, store_page+3 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "CFd" 
92b8						CALLMONITOR 
92b8					endif 
92b8					ldir 
92b8			 
92b8					; de is past string, move back one and store id 
92b8					 
92b8					dec de 
92b8			 
92b8					; store file id 
92b8			 
92b8					pop hl 
92b8					ex de,hl 
92b8					ld (hl), e 
92b8			 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdi" 
92b8						CALLMONITOR 
92b8					endif 
92b8					 
92b8			.dirnotfound: 
92b8					pop bc     
92b8					djnz .diritem 
92b8				 
92b8			.dirdone:	 
92b8			 
92b8					ld a, 0 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), a 
92b8					inc hl 
92b8					ld (hl), a 
92b8					inc hl 
92b8					; push a count of the dir items found 
92b8			 
92b8			;		ld h, 0 
92b8			;		ld l, c 
92b8			 
92b8				ret 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			; Settings 
92b8			; Run  
92b8			 
92b8			 
92b8			 
92b8			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92b8			;;hd_menu2:   db "        2: Editor",0   
92b8			;hd_menu2:   db "        2: Editor       6: Menu",0   
92b8			;hd_menu3:   db "        3: Storage",0 
92b8			;hd_menu4:   db "0=quit  4: Debug",0 
92b8			;hd_don:     db "ON",0 
92b8			;hd_doff:     db "OFF",0 
92b8			; 
92b8			; 
92b8			; 
92b8			;hardware_diags_old:       
92b8			; 
92b8			;.diagmenu: 
92b8			;	call clear_display 
92b8			;	ld a, display_row_1 
92b8			;	ld de, hd_menu1 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_2 
92b8			;	ld de, hd_menu2 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_3 
92b8			;	ld de, hd_menu3 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a,  display_row_4 
92b8			;	ld de, hd_menu4 
92b8			;	call str_at_display 
92b8			; 
92b8			;	; display debug state 
92b8			; 
92b8			;	ld de, hd_don 
92b8			;	ld a, (os_view_disable) 
92b8			;	cp 0 
92b8			;	jr z, .distog 
92b8			;	ld de, hd_doff 
92b8			;.distog: ld a, display_row_4+17 
92b8			;	call str_at_display 
92b8			; 
92b8			;	call update_display 
92b8			; 
92b8			;	call cin_wait 
92b8			; 
92b8			; 
92b8			; 
92b8			;	cp '4' 
92b8			;	jr nz, .diagn1 
92b8			; 
92b8			;	; debug toggle 
92b8			; 
92b8			;	ld a, (os_view_disable) 
92b8			;	ld b, '*' 
92b8			;	cp 0 
92b8			;	jr z, .debtog 
92b8			;	ld b, 0 
92b8			;.debtog:	 
92b8			;	ld a,b 
92b8			;	ld (os_view_disable),a 
92b8			; 
92b8			;.diagn1: cp '0' 
92b8			;	 ret z 
92b8			; 
92b8			;;	cp '1' 
92b8			;;       jp z, matrix	 
92b8			;;   TODO keyboard matrix test 
92b8			; 
92b8			;	cp '2' 
92b8			;	jp z, .diagedit 
92b8			; 
92b8			;;	cp '6' 
92b8			;;	jp z, .menutest 
92b8			;;if ENABLE_BASIC 
92b8			;;	cp '6' 
92b8			;;	jp z, basic 
92b8			;;endif 
92b8			 ; 
92b8			;	jp .diagmenu 
92b8			; 
92b8			; 
92b8			;	ret 
92b8			 
92b8			 
92b8			.debug_tog: 
92b8 21 02 93			ld hl, .menudebug 
92bb				 
92bb			;	ld a, (os_view_disable) 
92bb			;	cp '*' 
92bb 3a 6f ee			ld a,(debug_vector) 
92be fe c9			cp $C9   ; RET 
92c0 20 04			jr nz,.tdon  
92c2 3e 01			ld a, 1 
92c4 18 02			jr .tog1 
92c6 3e 00		.tdon: ld a, 0 
92c8			 
92c8			.tog1: 
92c8 cd ee 8a			call menu 
92cb fe 00			cp 0 
92cd c8				ret z 
92ce fe 01			cp 1    ; disable debug 
92d0 28 04			jr z, .dtog0 
92d2 3e 2a			ld a, '*' 
92d4 18 05			jr .dtogset 
92d6			.dtog0:  
92d6				;ld a, 0 
92d6 cd f4 93			call bp_on 
92d9 18 dd			jr .debug_tog 
92db			.dtogset:  
92db				; ld (os_view_disable), a 
92db cd 00 94			call bp_off 
92de c3 b8 92			jp .debug_tog 
92e1			 
92e1			 
92e1			hardware_diags:       
92e1			 
92e1			.diagm: 
92e1 21 f4 92			ld hl, .menuitems 
92e4 3e 00			ld a, 0 
92e6 cd ee 8a			call menu 
92e9			 
92e9 fe 00		         cp 0 
92eb c8				 ret z 
92ec			 
92ec fe 02			cp 2 
92ee ca 4d 93			jp z, .diagedit 
92f1			 
92f1			;	cp '6' 
92f1			;	jp z, .menutest 
92f1			;if ENABLE_BASIC 
92f1			;	cp '6' 
92f1			;	jp z, basic 
92f1			;endif 
92f1			  
92f1 c3 e1 92			jp .diagm 
92f4			 
92f4				 
92f4 08 93		.menuitems:   	dw .m1 
92f6 13 93				dw .m2 
92f8 1a 93				dw .m3 
92fa 22 93				dw .m5 
92fc 28 93				dw .m5a 
92fe 31 93				dw .m5b 
9300 00 00				dw 0 
9302			 
9302			.menudebug: 
9302 3a 93				dw .m6 
9304 43 93				dw .m7 
9306 00 00				dw 0 
9308			 
9308 .. 00		.m1:   db "Key Matrix",0 
9313 .. 00		.m2:   db "Editor",0 
931a .. 00		.m3:   db "Storage",0 
9322 .. 00		.m5:   db "Sound",0 
9328 .. 00		.m5a:  db "RAM Test",0 
9331 .. 00		.m5b:  db "LCD Test",0 
933a			 
933a .. 00		.m6:   db "Debug ON",0 
9343 .. 00		.m7:   db "Debug OFF",0 
934d			 
934d			; debug editor 
934d			 
934d			.diagedit: 
934d			 
934d 21 bb e2			ld hl, scratch 
9350			;	ld bc, 250 
9350			;	ldir 
9350				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9350 3e 00			ld a, 0 
9352 77				ld (hl), a 
9353 23				inc hl 
9354 77				ld (hl), a 
9355 23				inc hl 
9356 77				ld (hl), a 
9357			 
9357 cd bd 8a		        call clear_display 
935a cd e0 8a			call update_display 
935d				;ld a, 1 
935d				;ld (hardware_diag), a 
935d			.diloop: 
935d 3e 00			ld a, display_row_1 
935f 0e 00			ld c, 0 
9361 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9363 1e 28			ld e, 40 
9365			 
9365 21 bb e2			ld hl, scratch	 
9368 cd 17 8d			call input_str 
936b			 
936b 3e 28			ld a, display_row_2 
936d 11 bb e2			ld de, scratch 
9370 cd d0 8a			call str_at_display 
9373 cd e0 8a			call update_display 
9376			 
9376 c3 5d 93			jp .diloop 
9379			 
9379			 
9379			; pass word in hl 
9379			; a has display location 
9379			display_word_at: 
9379 f5				push af 
937a e5				push hl 
937b 7c				ld a,h 
937c 21 c0 e5			ld hl, os_word_scratch 
937f cd f3 8e			call hexout 
9382 e1				pop hl 
9383 7d				ld a,l 
9384 21 c2 e5			ld hl, os_word_scratch+2 
9387 cd f3 8e			call hexout 
938a 21 c4 e5			ld hl, os_word_scratch+4 
938d 3e 00			ld a,0 
938f 77				ld (hl),a 
9390 11 c0 e5			ld de,os_word_scratch 
9393 f1				pop af 
9394 cd d0 8a				call str_at_display 
9397 c9				ret 
9398			 
9398			display_ptr_state: 
9398			 
9398				; to restore afterwards 
9398			 
9398 d5				push de 
9399 c5				push bc 
939a e5				push hl 
939b f5				push af 
939c			 
939c				; for use in here 
939c			 
939c			;	push bc 
939c			;	push de 
939c			;	push hl 
939c			;	push af 
939c			 
939c cd bd 8a			call clear_display 
939f			 
939f 11 77 95			ld de, .ptrstate 
93a2 3e 00			ld a, display_row_1 
93a4 cd d0 8a			call str_at_display 
93a7			 
93a7				; display debug step 
93a7			 
93a7			 
93a7 11 65 ee			ld de, debug_mark 
93aa 3e 26			ld a, display_row_1+display_cols-2 
93ac cd d0 8a			call str_at_display 
93af			 
93af				; display a 
93af 11 81 95			ld de, .ptrcliptr 
93b2 3e 28			ld a, display_row_2 
93b4 cd d0 8a			call str_at_display 
93b7			 
93b7 f1				pop af 
93b8 2a 3a ea			ld hl,(cli_ptr) 
93bb 3e 30			ld a, display_row_2+8 
93bd cd 79 93			call display_word_at 
93c0			 
93c0			 
93c0				; display hl 
93c0			 
93c0			 
93c0 11 89 95			ld de, .ptrclioptr 
93c3 3e 32			ld a, display_row_2+10 
93c5 cd d0 8a			call str_at_display 
93c8			; 
93c8			;	pop hl 
93c8 3e 35			ld a, display_row_2+13 
93ca 2a 38 ea			ld hl,(cli_origptr) 
93cd cd 79 93			call display_word_at 
93d0			; 
93d0			;	 
93d0			;	; display de 
93d0			 
93d0			;	ld de, .regstatede 
93d0			;	ld a, display_row_3 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop de 
93d0			;	ld h,d 
93d0			;	ld l, e 
93d0			;	ld a, display_row_3+3 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display bc 
93d0			 
93d0			;	ld de, .regstatebc 
93d0			;	ld a, display_row_3+10 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop bc 
93d0			;	ld h,b 
93d0			;	ld l, c 
93d0			;	ld a, display_row_3+13 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display dsp 
93d0			 
93d0			;	ld de, .regstatedsp 
93d0			;	ld a, display_row_4 
93d0			;	call str_at_display 
93d0			 
93d0				 
93d0			;	ld hl,(cli_data_sp) 
93d0			;	ld a, display_row_4+4 
93d0			;	call display_word_at 
93d0			 
93d0				; display rsp 
93d0			 
93d0 11 b8 95			ld de, .regstatersp 
93d3 3e 82			ld a, display_row_4+10 
93d5 cd d0 8a			call str_at_display 
93d8			 
93d8				 
93d8 2a ec e9			ld hl,(cli_ret_sp) 
93db 3e 86			ld a, display_row_4+14 
93dd cd 79 93			call display_word_at 
93e0			 
93e0 cd e0 8a			call update_display 
93e3			 
93e3 cd 00 8a			call delay1s 
93e6 cd 00 8a			call delay1s 
93e9 cd 00 8a			call delay1s 
93ec			 
93ec			 
93ec cd fd 99			call next_page_prompt 
93ef			 
93ef				; restore  
93ef			 
93ef f1				pop af 
93f0 e1				pop hl 
93f1 c1				pop bc 
93f2 d1				pop de 
93f3 c9				ret 
93f4			 
93f4			; Update the break point vector so that the user can hook a new routine 
93f4			 
93f4			bp_on: 
93f4 3e c3			ld a, $c3    ; JP 
93f6 32 6f ee			ld (debug_vector), a 
93f9 21 06 94			ld hl, break_point_state 
93fc 22 70 ee			ld (debug_vector+1), hl 
93ff c9				ret 
9400			 
9400			bp_off: 
9400 3e c9			ld a, $c9    ; RET 
9402 32 6f ee			ld (debug_vector), a 
9405 c9				ret 
9406			 
9406			 
9406			break_point_state: 
9406			;	push af 
9406			; 
9406			;	; see if disabled 
9406			; 
9406			;	ld a, (os_view_disable) 
9406			;	cp '*' 
9406			;	jr nz, .bpsgo 
9406			;	pop af 
9406			;	ret 
9406			 
9406			.bpsgo: 
9406			;	pop af 
9406 f5				push af 
9407 22 9d e2			ld (os_view_hl), hl 
940a ed 53 9b e2		ld (os_view_de), de 
940e ed 43 99 e2		ld (os_view_bc), bc 
9412 e5				push hl 
9413 6f				ld l, a 
9414 26 00			ld h, 0 
9416 22 9f e2			ld (os_view_af),hl 
9419			 
9419 21 ab ed				ld hl, display_fb0 
941c 22 c6 eb				ld (display_fb_active), hl 
941f e1				pop hl	 
9420			 
9420 3e 31			ld a, '1' 
9422 fe 2a		.bps1:  cp '*' 
9424 cc 00 94			call z, bp_off 
9427			;	jr nz, .bps1b 
9427			;	ld (os_view_disable),a 
9427 fe 31		.bps1b:  cp '1' 
9429 20 14			jr nz, .bps2 
942b			 
942b				; display reg 
942b			 
942b				 
942b			 
942b 3a 9f e2			ld a, (os_view_af) 
942e 2a 9d e2			ld hl, (os_view_hl) 
9431 ed 5b 9b e2		ld de, (os_view_de) 
9435 ed 4b 99 e2		ld bc, (os_view_bc) 
9439 cd d3 94			call display_reg_state 
943c c3 bf 94			jp .bpschk 
943f			 
943f fe 32		.bps2:  cp '2' 
9441 20 08			jr nz, .bps3 
9443				 
9443				; display hl 
9443 2a 9d e2			ld hl, (os_view_hl) 
9446 cd bd 95			call display_dump_at_hl 
9449			 
9449 18 74			jr .bpschk 
944b			 
944b fe 33		.bps3:  cp '3' 
944d 20 08			jr nz, .bps4 
944f			 
944f			        ; display de 
944f 2a 9b e2			ld hl, (os_view_de) 
9452 cd bd 95			call display_dump_at_hl 
9455			 
9455 18 68			jr .bpschk 
9457 fe 34		.bps4:  cp '4' 
9459 20 08			jr nz, .bps5 
945b			 
945b			        ; display bc 
945b 2a 99 e2			ld hl, (os_view_bc) 
945e cd bd 95			call display_dump_at_hl 
9461			 
9461 18 5c			jr .bpschk 
9463 fe 35		.bps5:  cp '5' 
9465 20 08		        jr nz, .bps7 
9467			 
9467				; display cur ptr 
9467 2a 3a ea			ld hl, (cli_ptr) 
946a cd bd 95			call display_dump_at_hl 
946d			 
946d 18 50			jr .bpschk 
946f fe 36		.bps7:  cp '6' 
9471 20 08			jr nz, .bps8b 
9473				 
9473				; display cur orig ptr 
9473 2a 38 ea			ld hl, (cli_origptr) 
9476 cd bd 95			call display_dump_at_hl 
9479 18 44			jr .bpschk 
947b fe 37		.bps8b:  cp '7' 
947d 20 08			jr nz, .bps9 
947f				 
947f				; display dsp 
947f 2a e8 e9			ld hl, (cli_data_sp) 
9482 cd bd 95			call display_dump_at_hl 
9485			 
9485 18 38			jr .bpschk 
9487 fe 39		.bps9:  cp '9' 
9489 20 05			jr nz, .bps8c 
948b				 
948b				; display SP 
948b			;	ld hl, sp 
948b cd bd 95			call display_dump_at_hl 
948e			 
948e 18 2f			jr .bpschk 
9490 fe 38		.bps8c:  cp '8' 
9492 20 08			jr nz, .bps8d 
9494				 
9494				; display rsp 
9494 2a ec e9			ld hl, (cli_ret_sp) 
9497 cd bd 95			call display_dump_at_hl 
949a			 
949a 18 23			jr .bpschk 
949c fe 23		.bps8d:  cp '#'     ; access monitor sub system 
949e 20 05			jr nz, .bps8 
94a0 cd b7 97			call monitor 
94a3			 
94a3 18 1a			jr .bpschk 
94a5 fe 30		.bps8:  cp '0' 
94a7 20 16			jr nz, .bpschk 
94a9			 
94a9 21 0a ed				ld hl, display_fb1 
94ac 22 c6 eb				ld (display_fb_active), hl 
94af cd e0 8a				call update_display 
94b2			 
94b2				;ld a, (os_view_af) 
94b2 2a 9d e2			ld hl, (os_view_hl) 
94b5 ed 5b 9b e2		ld de, (os_view_de) 
94b9 ed 4b 99 e2		ld bc, (os_view_bc) 
94bd f1				pop af 
94be c9				ret 
94bf			 
94bf			.bpschk:   
94bf cd 00 8a			call delay1s 
94c2 3e 9f		ld a,display_row_4 + display_cols - 1 
94c4 11 fb 99		        ld de, endprg 
94c7 cd d0 8a			call str_at_display 
94ca cd e0 8a			call update_display 
94cd cd 6a dd			call cin_wait 
94d0			 
94d0 c3 22 94			jp .bps1 
94d3			 
94d3			 
94d3			display_reg_state: 
94d3			 
94d3				; to restore afterwards 
94d3			 
94d3 d5				push de 
94d4 c5				push bc 
94d5 e5				push hl 
94d6 f5				push af 
94d7			 
94d7				; for use in here 
94d7			 
94d7 c5				push bc 
94d8 d5				push de 
94d9 e5				push hl 
94da f5				push af 
94db			 
94db cd bd 8a			call clear_display 
94de			 
94de 11 93 95			ld de, .regstate 
94e1 3e 00			ld a, display_row_1 
94e3 cd d0 8a			call str_at_display 
94e6			 
94e6				; display debug step 
94e6			 
94e6			 
94e6 11 65 ee			ld de, debug_mark 
94e9 3e 25			ld a, display_row_1+display_cols-3 
94eb cd d0 8a			call str_at_display 
94ee			 
94ee				; display a 
94ee 11 af 95			ld de, .regstatea 
94f1 3e 28			ld a, display_row_2 
94f3 cd d0 8a			call str_at_display 
94f6			 
94f6 e1				pop hl 
94f7			;	ld h,0 
94f7			;	ld l, a 
94f7 3e 2b			ld a, display_row_2+3 
94f9 cd 79 93			call display_word_at 
94fc			 
94fc			 
94fc				; display hl 
94fc			 
94fc			 
94fc 11 a3 95			ld de, .regstatehl 
94ff 3e 32			ld a, display_row_2+10 
9501 cd d0 8a			call str_at_display 
9504			 
9504 e1				pop hl 
9505 3e 35			ld a, display_row_2+13 
9507 cd 79 93			call display_word_at 
950a			 
950a				 
950a				; display de 
950a			 
950a 11 a7 95			ld de, .regstatede 
950d 3e 50			ld a, display_row_3 
950f cd d0 8a			call str_at_display 
9512			 
9512 e1				pop hl 
9513			;	ld h,d 
9513			;	ld l, e 
9513 3e 53			ld a, display_row_3+3 
9515 cd 79 93			call display_word_at 
9518			 
9518			 
9518				; display bc 
9518			 
9518 11 ab 95			ld de, .regstatebc 
951b 3e 5a			ld a, display_row_3+10 
951d cd d0 8a			call str_at_display 
9520			 
9520 e1				pop hl 
9521			;	ld h,b 
9521			;	ld l, c 
9521 3e 5d			ld a, display_row_3+13 
9523 cd 79 93			call display_word_at 
9526			 
9526			 
9526				; display dsp 
9526			 
9526 11 b3 95			ld de, .regstatedsp 
9529 3e 78			ld a, display_row_4 
952b cd d0 8a			call str_at_display 
952e			 
952e				 
952e 2a e8 e9			ld hl,(cli_data_sp) 
9531 3e 7c			ld a, display_row_4+4 
9533 cd 79 93			call display_word_at 
9536			 
9536				; display rsp 
9536			 
9536 11 b8 95			ld de, .regstatersp 
9539 3e 82			ld a, display_row_4+10 
953b cd d0 8a			call str_at_display 
953e			 
953e				 
953e 2a ec e9			ld hl,(cli_ret_sp) 
9541 3e 86			ld a, display_row_4+14 
9543 cd 79 93			call display_word_at 
9546			 
9546 cd e0 8a			call update_display 
9549			 
9549			;	call delay1s 
9549			;	call delay1s 
9549			;	call delay1s 
9549			 
9549			 
9549			;	call next_page_prompt 
9549			 
9549				; restore  
9549			 
9549 f1				pop af 
954a e1				pop hl 
954b c1				pop bc 
954c d1				pop de 
954d c9				ret 
954e			 
954e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9562 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9577 .. 00		.ptrstate:	db "Ptr State",0 
9581 .. 00		.ptrcliptr:     db "cli_ptr",0 
9589 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9593 .. 00		.regstate:	db "Reg State (1/0)",0 
95a3 .. 00		.regstatehl:	db "HL:",0 
95a7 .. 00		.regstatede:	db "DE:",0 
95ab .. 00		.regstatebc:	db "BC:",0 
95af .. 00		.regstatea:	db "A :",0 
95b3 .. 00		.regstatedsp:	db "DSP:",0 
95b8 .. 00		.regstatersp:	db "RSP:",0 
95bd			 
95bd			display_dump_at_hl: 
95bd e5				push hl 
95be d5				push de 
95bf c5				push bc 
95c0 f5				push af 
95c1			 
95c1 22 de e5			ld (os_cur_ptr),hl	 
95c4 cd bd 8a			call clear_display 
95c7 cd 05 99			call dumpcont 
95ca			;	call delay1s 
95ca			;	call next_page_prompt 
95ca			 
95ca			 
95ca f1				pop af 
95cb c1				pop bc 
95cc d1				pop de 
95cd e1				pop hl 
95ce c9				ret 
95cf			 
95cf			;if ENABLE_BASIC 
95cf			;	include "nascombasic.asm" 
95cf			;	basic: 
95cf			;	include "forth/FORTH.ASM" 
95cf			;endif 
95cf			 
95cf			; eof 
95cf			 
95cf			 
# End of file firmware_diags.asm
95cf			  
95cf			include "firmware_prompts.asm"  
95cf			; Prompts  
95cf			 
95cf			; boot messages 
95cf			 
95cf .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95e4 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95f4			 
95f4			 
95f4			; config menus 
95f4			 
95f4			;prom_c3: db "Add Dictionary To File",0 
95f4			 
95f4			if STARTUP_V1 
95f4 .. 00		prom_c2: db "Select Autoload File",0 
9609 .. 00		prom_c2a: db "Disable Autoload File", 0 
961f			endif 
961f			 
961f			if STARTUP_V2 
961f			prom_c2: db "Enable Autoload Files",0 
961f			prom_c2a: db "Disable Autoload Files", 0 
961f			 
961f			crs_s1: db "*ls-word", 0 
961f			crs_s2: db "*ed-word", 0 
961f			crs_s3: db "*Demo-Games", 0 
961f			crs_s4: db "*Utils", 0 
961f			crs_s5: db "*SPI-Util", 0 
961f			crs_s6: db "*Key-Constants", 0 
961f			crs_sound: db "*Sound-Util", 0 
961f			crs_hw: db "*Hello-World",0 
961f			 
961f			 
961f			 
961f			endif 
961f			;prom_c2b: db "Select Storage Bank",0 
961f .. 00		prom_c4: db "Settings",0 
9628 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9643 .. 00		prom_m4b:   db "Monitor",0 
964b .. 00		prom_c1: db "Hardware Diags",0 
965a			 
965a			 
965a			if STARTUP_V2 
965a			prom_c9: db "Create Startup Files",0 
965a			endif 
965a			 
965a .. 00		prom_notav:    db "Feature not available",0 
9670 .. 00		prom_empty:    db "",0 
9671			 
9671			; eof 
9671			 
# End of file firmware_prompts.asm
9671			  
9671			  
9671			; eof  
9671			  
# End of file firmware.asm
9671			 
9671			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9671			;if BASE_KEV  
9671			;baseram: equ 08000h 
9671			;endif 
9671			 
9671			;if BASE_SC114 
9671			;baseram:     equ    endofcode 
9671			;endif 
9671			 
9671			 
9671			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9671			 
9671			; start system 
9671			 
9671			coldstart: 
9671				; set sp 
9671				; di/ei 
9671			 
9671 f3				di 
9672 31 00 f0			ld sp, tos 
9675 cd b4 dc			call init_nmi 
9678			;	ei 
9678			 
9678				; init spinner 
9678 3e 00			ld a,0 
967a 32 c0 eb			ld (display_active), a 
967d			 
967d				; disable breakpoint by default 
967d			 
967d				;ld a,'*' 
967d			;	ld a,' ' 
967d			;	ld (os_view_disable),a 
967d			 
967d				; set break point vector as new break point on or off 
967d cd 00 94			call bp_off 
9680			 
9680				; init hardware 
9680			 
9680				; init keyboard and screen hardware 
9680			 
9680 cd 1f 80			call hardware_init 
9683			 
9683			 
9683 cd 00 8a			call delay1s 
9686 3e 58			ld a, display_row_3+8 
9688 11 03 80			ld de, buildtime 
968b cd d0 8a			call str_at_display 
968e cd e0 8a			call update_display 
9691			 
9691 cd 00 8a			call delay1s 
9694 cd 00 8a			call delay1s 
9697 cd 00 8a			call delay1s 
969a			 
969a				; detect if any keys are held down to enable breakpoints at start up 
969a			 
969a cd 70 dd			call cin  
969d fe 00			cp 0 
969f 28 03			jr z, .nokeys 
96a1			 
96a1				;call hardware_diags 
96a1 cd 5e 92			call config 
96a4			 
96a4			;	ld de, .bpen 
96a4			;	ld a, display_row_4 
96a4			;	call str_at_display 
96a4			;	call update_display 
96a4			; 
96a4			;	ld a,0 
96a4			;	ld (os_view_disable),a 
96a4			; 
96a4			;.bpwait: 
96a4			;	call cin 
96a4			;	cp 0 
96a4			;	jr z, .bpwait 
96a4			;	jr .nokeys 
96a4			; 
96a4			; 
96a4			;.bpen:  db "Break points enabled!",0 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			.nokeys: 
96a4			 
96a4			 
96a4				 
96a4			 
96a4			;jp  testkey 
96a4			 
96a4			;call storage_get_block_0 
96a4			; 
96a4			;ld hl, 0 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4				 
96a4			;ld hl, 10 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			;stop:	nop 
96a4			;	jp stop 
96a4			 
96a4			 
96a4			 
96a4			main: 
96a4 cd bd 8a			call clear_display 
96a7 cd e0 8a			call update_display 
96aa			 
96aa			 
96aa			 
96aa			;	call testlcd 
96aa			 
96aa			 
96aa			 
96aa cd 46 9e			call forth_init 
96ad			 
96ad			 
96ad			warmstart: 
96ad cd 1c 9e			call forth_warmstart 
96b0			 
96b0				; run startup word load 
96b0			        ; TODO prevent this running at warmstart after crash  
96b0			 
96b0				if STARTUP_ENABLE 
96b0			 
96b0					if STARTUP_V1 
96b0			 
96b0						if STORAGE_SE 
96b0							call forth_autoload 
96b0						endif 
96b0 cd 04 dc					call forth_startup 
96b3					endif 
96b3			 
96b3					if STARTUP_V2 
96b3			 
96b3						if STORAGE_SE 
96b3							call forth_autoload 
96b3						else 
96b3							call forth_startup 
96b3						endif 
96b3			 
96b3			 
96b3					endif 
96b3			 
96b3				endif 
96b3			 
96b3			warmstart_afterauto: 
96b3			 
96b3				; show free memory after boot 
96b3 11 52 97			ld de, freeram 
96b6 3e 00			ld a, display_row_1 
96b8 cd d0 8a			call str_at_display 
96bb			 
96bb				; get current heap start after loading any uwords 
96bb			 
96bb				;ld de, (os_last_new_uword) 
96bb				;ex de, hl 
96bb			 
96bb			; Or use heap_size word???? 
96bb				;ld hl, heap_end 
96bb				;ld hl, heap_size 
96bb				;ld de, topusermem 
96bb				;ld de, heap_start 
96bb ed 5b 89 dd			ld de, (free_list )      
96bf 21 96 e2				ld hl, heap_end 
96c2 ed 52			sbc hl, de 
96c4				;push hl 
96c4				;ld a,h	         	 
96c4				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96c4				;call hexout 
96c4			   	;pop hl 
96c4			; 
96c4			;	ld a,l 
96c4			;	ld hl, os_word_scratch+2 
96c4			;	call hexout 
96c4			;	ld hl, os_word_scratch+4 
96c4			;	ld a, 0 
96c4			;	ld (hl),a 
96c4 eb				ex de, hl 
96c5 21 c0 e5			ld hl, os_word_scratch 
96c8 cd ff 8f			call uitoa_16 
96cb			 
96cb			 
96cb 11 c0 e5			ld de, os_word_scratch 
96ce 3e 0d			ld a, display_row_1 + 13 
96d0 cd d0 8a			call str_at_display 
96d3 cd e0 8a			call update_display 
96d6			 
96d6			 
96d6				;call demo 
96d6			 
96d6			 
96d6				; init scratch input area for cli commands 
96d6			 
96d6 21 e2 e5			ld hl, os_cli_cmd 
96d9 3e 00			ld a,0 
96db 77				ld (hl),a 
96dc 23				inc hl 
96dd 77				ld (hl),a 
96de			 
96de 3e 00			ld a,0 
96e0 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96e3			 
96e3 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96e6 32 df e5			ld (os_cur_ptr+1),a	 
96e9			 
96e9 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96ec 32 c1 e5			ld (os_word_scratch+1),a	 
96ef				 
96ef			 
96ef				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96ef 21 e2 e5			ld hl, os_cli_cmd 
96f2			 
96f2 3e 00			ld a, 0		 ; init cli input 
96f4 77				ld (hl), a 
96f5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96f7			cli: 
96f7				; show cli prompt 
96f7				;push af 
96f7				;ld a, 0 
96f7				;ld de, prompt 
96f7				;call str_at_display 
96f7			 
96f7				;call update_display 
96f7				;pop af 
96f7				;inc a 
96f7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96f7			 
96f7			.lastrecall: 
96f7			 
96f7 0e 00			ld c, 0 
96f9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96fb 1e 28			ld e, 40 
96fd			 
96fd 21 e2 e5			ld hl, os_cli_cmd 
9700			 
9700				STACKFRAME OFF $fefe $9f9f 
9700				if DEBUG_STACK_IMB 
9700					if OFF 
9700						exx 
9700						ld de, $fefe 
9700						ld a, d 
9700						ld hl, curframe 
9700						call hexout 
9700						ld a, e 
9700						ld hl, curframe+2 
9700						call hexout 
9700						ld hl, $fefe 
9700						push hl 
9700						ld hl, $9f9f 
9700						push hl 
9700						exx 
9700					endif 
9700				endif 
9700			endm 
# End of macro STACKFRAME
9700			 
9700 cd 17 8d			call input_str 
9703			 
9703				STACKFRAMECHK OFF $fefe $9f9f 
9703				if DEBUG_STACK_IMB 
9703					if OFF 
9703						exx 
9703						ld hl, $9f9f 
9703						pop de   ; $9f9f 
9703						call cmp16 
9703						jr nz, .spnosame 
9703						ld hl, $fefe 
9703						pop de   ; $fefe 
9703						call cmp16 
9703						jr z, .spfrsame 
9703						.spnosame: call showsperror 
9703						.spfrsame: nop 
9703						exx 
9703					endif 
9703				endif 
9703			endm 
# End of macro STACKFRAMECHK
9703			 
9703			 
9703				; check to see if last line recall has been requested 
9703			 
9703			if EDIT_V2 
9703 fe 05			cp KEY_UP 
9705 20 0f			jr nz, .noexecline 
9707			 
9707 11 e2 e5			ld de, os_cli_cmd 
970a 21 e1 e6			ld hl, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712 3e 00			ld a, 0 
9714 18 e1			jr .lastrecall 
9716			endif 
9716			 
9716			.noexecline: 
9716				; no so exec the line		 
9716			 
9716				; copy input to last command 
9716			 
9716 21 e2 e5			ld hl, os_cli_cmd 
9719 11 e1 e6			ld de, os_last_cmd 
971c 01 ff 00			ld bc, 255 
971f ed b0			ldir 
9721			 
9721				; wipe current buffer 
9721			 
9721			;	ld a, 0 
9721			;	ld hl, os_cli_cmd 
9721			;	ld de, os_cli_cmd+1 
9721			;	ld bc, 254 
9721			;	ldir 
9721				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9721			;	call strcpy 
9721			;	ld a, 0 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			 
9721				; switch frame buffer to program  
9721			 
9721 21 0a ed				ld hl, display_fb1 
9724 22 c6 eb				ld (display_fb_active), hl 
9727			 
9727			;	nop 
9727				STACKFRAME ON $fbfe $8f9f 
9727				if DEBUG_STACK_IMB 
9727					if ON 
9727						exx 
9727						ld de, $fbfe 
9727						ld a, d 
9727						ld hl, curframe 
9727						call hexout 
9727						ld a, e 
9727						ld hl, curframe+2 
9727						call hexout 
9727						ld hl, $fbfe 
9727						push hl 
9727						ld hl, $8f9f 
9727						push hl 
9727						exx 
9727					endif 
9727				endif 
9727			endm 
# End of macro STACKFRAME
9727				; first time into the parser so pass over the current scratch pad 
9727 21 e2 e5			ld hl,os_cli_cmd 
972a				; tokenise the entered statement(s) in HL 
972a cd c4 9e			call forthparse 
972d			        ; exec forth statements in top of return stack 
972d cd 04 9f			call forthexec 
9730				;call forthexec_cleanup 
9730			;	call parsenext 
9730			 
9730				STACKFRAMECHK ON $fbfe $8f9f 
9730				if DEBUG_STACK_IMB 
9730					if ON 
9730						exx 
9730						ld hl, $8f9f 
9730						pop de   ; $8f9f 
9730						call cmp16 
9730						jr nz, .spnosame 
9730						ld hl, $fbfe 
9730						pop de   ; $fbfe 
9730						call cmp16 
9730						jr z, .spfrsame 
9730						.spnosame: call showsperror 
9730						.spfrsame: nop 
9730						exx 
9730					endif 
9730				endif 
9730			endm 
# End of macro STACKFRAMECHK
9730				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9730			 
9730 3e 78			ld a, display_row_4 
9732 11 63 97			ld de, endprog 
9735			 
9735 cd e0 8a			call update_display		 
9738			 
9738 cd fd 99			call next_page_prompt 
973b			 
973b				; switch frame buffer to cli 
973b			 
973b 21 ab ed				ld hl, display_fb0 
973e 22 c6 eb				ld (display_fb_active), hl 
9741			 
9741			 
9741 cd bd 8a		        call clear_display 
9744 cd e0 8a			call update_display		 
9747			 
9747 21 e2 e5			ld hl, os_cli_cmd 
974a			 
974a 3e 00			ld a, 0		 ; init cli input 
974c 77				ld (hl), a 
974d			 
974d				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
974d			 
974d				; now on last line 
974d			 
974d				; TODO scroll screen up 
974d			 
974d				; TODO instead just clear screen and place at top of screen 
974d			 
974d			;	ld a, 0 
974d			;	ld (f_cursor_ptr),a 
974d			 
974d				;call clear_display 
974d				;call update_display 
974d			 
974d				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974d 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974f c3 f7 96			jp cli 
9752			 
9752 .. 00		freeram: db "Free bytes: ",0 
975f ..			asc: db "1A2F" 
9763 .. 00		endprog: db "End prog...",0 
976f			 
976f			testenter2:   
976f 21 ed e2			ld hl,scratch+50 
9772 22 de e5			ld (os_cur_ptr),hl 
9775 c3 f7 96			jp cli 
9778			 
9778			testenter:  
9778			 
9778 21 5f 97			ld hl,asc 
977b			;	ld a,(hl) 
977b			;	call nibble2val 
977b cd 49 8f			call get_byte 
977e			 
977e			 
977e			;	ld a,(hl) 
977e			;	call atohex 
977e			 
977e			;	call fourehexhl 
977e 32 ed e2			ld (scratch+50),a 
9781			 
9781			 
9781			 
9781 21 61 97			ld hl,asc+2 
9784			;	ld a, (hl) 
9784			;	call nibble2val 
9784 cd 49 8f			call get_byte 
9787			 
9787			;	call fourehexhl 
9787 32 ef e2			ld (scratch+52),a 
978a				 
978a 21 ed e2			ld hl,scratch+50 
978d 22 de e5			ld (os_cur_ptr),hl 
9790 c3 f7 96			jp cli 
9793			 
9793			enter:	 
9793 3a bf e2			ld a,(scratch+4) 
9796 fe 00			cp 0 
9798 28 0c			jr z, .entercont 
979a				; no, not a null term line so has an address to work out.... 
979a			 
979a 21 bd e2			ld hl,scratch+2 
979d cd a9 8f			call get_word_hl 
97a0			 
97a0 22 de e5			ld (os_cur_ptr),hl	 
97a3 c3 f7 96			jp cli 
97a6			 
97a6			 
97a6			.entercont:  
97a6			 
97a6 21 bd e2			ld hl, scratch+2 
97a9 cd 49 8f			call get_byte 
97ac			 
97ac 2a de e5		   	ld hl,(os_cur_ptr) 
97af 77					ld (hl),a 
97b0 23					inc hl 
97b1 22 de e5				ld (os_cur_ptr),hl 
97b4				 
97b4			; get byte  
97b4			 
97b4			 
97b4 c3 f7 96			jp cli 
97b7			 
97b7			 
97b7			; basic monitor support 
97b7			 
97b7			monitor: 
97b7				;  
97b7 cd bd 8a			call clear_display 
97ba 3e 00			ld a, 0 
97bc 11 10 98			ld de, .monprompt 
97bf cd d0 8a			call str_at_display 
97c2 cd e0 8a			call update_display 
97c5			 
97c5				; get a monitor command 
97c5			 
97c5 0e 00			ld c, 0     ; entry at top left 
97c7 16 64			ld d, 100   ; max buffer size 
97c9 1e 0f			ld e, 15    ; input scroll area 
97cb 3e 00			ld a, 0     ; init string 
97cd 21 b9 e4			ld hl, os_input 
97d0 77				ld (hl), a 
97d1 23				inc hl 
97d2 77				ld (hl), a 
97d3 21 b9 e4			ld hl, os_input 
97d6 3e 01			ld a, 1     ; init string 
97d8 cd 17 8d			call input_str 
97db			 
97db cd bd 8a		        call clear_display 
97de cd e0 8a			call update_display		 
97e1			 
97e1 3a b9 e4			ld a, (os_input) 
97e4 cd 47 90			call toUpper 
97e7 fe 48		        cp 'H' 
97e9 ca 84 98		        jp z, .monhelp 
97ec fe 44			cp 'D'		; dump 
97ee ca b7 98			jp z, .mondump	 
97f1 fe 43			cp 'C'		; dump 
97f3 ca d1 98			jp z, .moncdump	 
97f6 fe 4d			cp 'M'		; dump 
97f8 ca 12 98			jp z, .moneditstart 
97fb fe 55			cp 'U'		; dump 
97fd ca 1e 98			jp z, .monedit	 
9800 fe 47			cp 'G'		; dump 
9802 ca ad 98			jp z, .monjump 
9805 fe 42			cp 'B'		; forth breakpoint 
9807 cc 06 94			call z, break_point_state 
980a fe 51			cp 'Q'		; dump 
980c c8				ret z	 
980d			 
980d			 
980d				; TODO "S" to access symbol by name and not need the address 
980d				; TODO "F" to find a string in memory 
980d			 
980d c3 b7 97			jp monitor 
9810			 
9810 .. 00		.monprompt: db ">", 0 
9812			 
9812			.moneditstart: 
9812				; get starting address 
9812			 
9812 21 bb e4			ld hl,os_input+2 
9815 cd a9 8f			call get_word_hl 
9818			 
9818 22 de e5			ld (os_cur_ptr),hl	 
981b			 
981b c3 b7 97			jp monitor 
981e			 
981e			.monedit: 
981e				; get byte to load 
981e			 
981e 21 bb e4			ld hl,os_input+2 
9821 cd 49 8f			call get_byte 
9824			 
9824				; get address to update 
9824 2a de e5			ld hl, (os_cur_ptr) 
9827			 
9827				; update byte 
9827			 
9827 77				ld (hl), a 
9828			 
9828				; move to next address and save it 
9828			 
9828 23				inc hl 
9829 22 de e5			ld (os_cur_ptr),hl	 
982c			 
982c c3 b7 97			jp monitor 
982f			 
982f			 
982f .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9843 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
985f .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
987d .. 00		.monhelptext4:  db "Q-Quit",0 
9884			        
9884			.monhelp: 
9884 3e 00			ld a, display_row_1 
9886 11 2f 98		        ld de, .monhelptext1 
9889			 
9889 cd d0 8a			call str_at_display 
988c 3e 28			ld a, display_row_2 
988e 11 43 98		        ld de, .monhelptext2 
9891					 
9891 cd d0 8a			call str_at_display 
9894 3e 50			ld a, display_row_3 
9896 11 5f 98		        ld de, .monhelptext3 
9899					 
9899 cd d0 8a			call str_at_display 
989c 3e 78			ld a, display_row_4 
989e 11 7d 98		        ld de, .monhelptext4 
98a1 cd d0 8a			call str_at_display 
98a4			 
98a4 cd e0 8a			call update_display		 
98a7			 
98a7 cd fd 99			call next_page_prompt 
98aa c3 b7 97			jp monitor 
98ad			 
98ad			.monjump:    
98ad 21 bb e4			ld hl,os_input+2 
98b0 cd a9 8f			call get_word_hl 
98b3			 
98b3 e9				jp (hl) 
98b4 c3 b7 97			jp monitor 
98b7			 
98b7			.mondump:    
98b7 21 bb e4			ld hl,os_input+2 
98ba cd a9 8f			call get_word_hl 
98bd			 
98bd 22 de e5			ld (os_cur_ptr),hl	 
98c0 cd 05 99			call dumpcont 
98c3 3e 78			ld a, display_row_4 
98c5 11 63 97			ld de, endprog 
98c8			 
98c8 cd e0 8a			call update_display		 
98cb			 
98cb cd fd 99			call next_page_prompt 
98ce c3 b7 97			jp monitor 
98d1			.moncdump: 
98d1 cd 05 99			call dumpcont 
98d4 3e 78			ld a, display_row_4 
98d6 11 63 97			ld de, endprog 
98d9			 
98d9 cd e0 8a			call update_display		 
98dc			 
98dc cd fd 99			call next_page_prompt 
98df c3 b7 97			jp monitor 
98e2			 
98e2			 
98e2			; TODO symbol access  
98e2			 
98e2			.symbols:     ;; A list of symbols that can be called up  
98e2 ab ed			dw display_fb0 
98e4 .. 00			db "fb0",0  
98e8 74 ea		     	dw store_page 
98ea .. 00			db "store_page",0 
98f5			 
98f5			 
98f5			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98f5			 
98f5 3a bc e2			ld a,(scratch+1) 
98f8 fe 00			cp 0 
98fa 28 09			jr z, dumpcont 
98fc			 
98fc				; no, not a null term line so has an address to work out.... 
98fc			 
98fc 21 bd e2			ld hl,scratch+2 
98ff cd a9 8f			call get_word_hl 
9902			 
9902 22 de e5			ld (os_cur_ptr),hl	 
9905			 
9905			 
9905			 
9905			dumpcont: 
9905			 
9905				; dump bytes at ptr 
9905			 
9905			 
9905 3e 00			ld a, display_row_1 
9907 2a c6 eb			ld hl, (display_fb_active) 
990a cd ea 8c			call addatohl 
990d cd 35 99			call .dumpbyterow 
9910			 
9910 3e 28			ld a, display_row_2 
9912 2a c6 eb			ld hl, (display_fb_active) 
9915 cd ea 8c			call addatohl 
9918 cd 35 99			call .dumpbyterow 
991b			 
991b			 
991b 3e 50			ld a, display_row_3 
991d 2a c6 eb			ld hl, (display_fb_active) 
9920 cd ea 8c			call addatohl 
9923 cd 35 99			call .dumpbyterow 
9926			 
9926 3e 78			ld a, display_row_4 
9928 2a c6 eb			ld hl, (display_fb_active) 
992b cd ea 8c			call addatohl 
992e cd 35 99			call .dumpbyterow 
9931			 
9931 cd e0 8a			call update_display 
9934			;		jp cli 
9934 c9				ret 
9935			 
9935			.dumpbyterow: 
9935			 
9935				;push af 
9935			 
9935 e5				push hl 
9936			 
9936				; calc where to poke the ascii 
9936			if display_cols == 20 
9936				ld a, 16 
9936			else 
9936 3e 1f			ld a, 31 
9938			endif 
9938			 
9938 cd ea 8c			call addatohl 
993b 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
993e			 
993e			 
993e			; display decoding address 
993e 2a de e5		   	ld hl,(os_cur_ptr) 
9941			 
9941 7c				ld a,h 
9942 e1				pop hl 
9943 e5				push hl 
9944			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9944 cd f3 8e			call hexout 
9947 2a de e5		   	ld hl,(os_cur_ptr) 
994a			 
994a 7d				ld a,l 
994b e1				pop hl 
994c 23				inc hl 
994d 23				inc hl 
994e e5				push hl 
994f			;	ld hl, os_word_scratch+2 
994f cd f3 8e			call hexout 
9952 e1				pop hl 
9953 23				inc hl 
9954 23				inc hl 
9955				;ld hl, os_word_scratch+4 
9955 3e 3a			ld a, ':' 
9957 77				ld (hl),a 
9958 23				inc hl 
9959				;ld a, 0 
9959				;ld (hl),a 
9959				;ld de, os_word_scratch 
9959				;pop af 
9959				;push af 
9959			;		ld a, display_row_2 
9959			;		call str_at_display 
9959			;		call update_display 
9959			 
9959			 
9959			;pop af 
9959			;	add 5 
9959			 
9959			if display_cols == 20 
9959				ld b, 4 
9959			else 
9959 06 08			ld b, 8 
995b			endif	 
995b			 
995b			.dumpbyte: 
995b c5				push bc 
995c e5				push hl 
995d			 
995d			 
995d 2a de e5		   	ld hl,(os_cur_ptr) 
9960 7e					ld a,(hl) 
9961			 
9961					; poke the ascii to display 
9961 2a c0 e5				ld hl,(os_word_scratch) 
9964 77					ld (hl),a 
9965 23					inc hl 
9966 22 c0 e5				ld (os_word_scratch),hl 
9969			 
9969					 
9969			 
9969			 
9969 e1					pop hl 
996a e5					push hl 
996b			 
996b cd f3 8e				call hexout 
996e			 
996e					 
996e 2a de e5		   	ld hl,(os_cur_ptr) 
9971 23				inc hl 
9972 22 de e5		   	ld (os_cur_ptr),hl 
9975			 
9975 e1					pop hl 
9976 23					inc hl 
9977 23					inc hl 
9978 23					inc hl 
9979			 
9979			 
9979			 
9979					;ld a,0 
9979					;ld (os_word_scratch+2),a 
9979					;pop af 
9979					;push af 
9979			 
9979					;ld de, os_word_scratch 
9979					;call str_at_display 
9979			;		call update_display 
9979			;		pop af 
9979 c1					pop bc 
997a c6 03				add 3 
997c 10 dd			djnz .dumpbyte 
997e			 
997e				 
997e			 
997e c9				ret 
997f			 
997f			jump:	 
997f			 
997f 21 bd e2			ld hl,scratch+2 
9982 cd a9 8f			call get_word_hl 
9985				;ld hl,(scratch+2) 
9985				;call fourehexhl 
9985			 
9985 22 de e5			ld (os_cur_ptr),hl	 
9988			 
9988 e9				jp (hl) 
9989			 
9989			 
9989			 
9989			; TODO implement a basic monitor mode to start with 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			; testing and demo code during development 
9989			 
9989			 
9989 .. 00		str1: db "Enter some text...",0 
999c .. 00		clear: db "                    ",0 
99b1			 
99b1			demo: 
99b1			 
99b1			 
99b1			 
99b1			;	call update_display 
99b1			 
99b1				; init scratch input area for testing 
99b1 21 bb e2			ld hl, scratch	 
99b4 3e 00			ld a,0 
99b6 77				ld (hl),a 
99b7			 
99b7			 
99b7 3e 28		            LD   A, display_row_2 
99b9			;            CALL fLCD_Pos       ;Position cursor to location in A 
99b9 11 89 99		            LD   DE, str1 
99bc cd d0 8a			call str_at_display 
99bf			 
99bf			;            CALL fLCD_Str       ;Display string pointed to by DE 
99bf			cloop:	 
99bf 3e 50		            LD   A, display_row_3 
99c1			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c1 11 9c 99		            LD   DE, clear 
99c4			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99c4 cd d0 8a				call str_at_display 
99c7 3e 78			ld a, display_row_4 
99c9 11 f9 99			ld de, prompt 
99cc			 
99cc cd d0 8a				call str_at_display 
99cf cd e0 8a			call update_display 
99d2			 
99d2 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99d4 16 0a			ld d, 10 
99d6 21 bb e2			ld hl, scratch	 
99d9 cd 17 8d			call input_str 
99dc			 
99dc			;	call clear_display 
99dc			;'	call update_display 
99dc			 
99dc 3e 00		            LD   A, display_row_1 
99de			;            CALL fLCD_Pos       ;Position cursor to location in A 
99de 11 9c 99		            LD   DE, clear 
99e1 cd d0 8a				call str_at_display 
99e4			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e4 3e 00		            LD   A, display_row_1 
99e6			;            CALL fLCD_Pos       ;Position cursor to location in A 
99e6 11 bb e2		            LD   DE, scratch 
99e9			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e9 cd d0 8a				call str_at_display 
99ec cd e0 8a			call update_display 
99ef			 
99ef 3e 00				ld a,0 
99f1 21 bb e2			ld hl, scratch 
99f4 77				ld (hl),a 
99f5			 
99f5 00				nop 
99f6 c3 bf 99			jp cloop 
99f9			 
99f9			 
99f9			 
99f9			; OS Prompt 
99f9			 
99f9 .. 00		prompt: db ">",0 
99fb .. 00		endprg: db "?",0 
99fd			 
99fd			 
99fd			; handy next page prompt 
99fd			next_page_prompt: 
99fd e5				push hl 
99fe d5				push de 
99ff f5				push af 
9a00 c5				push bc 
9a01			 
9a01 3e 9f			ld a,display_row_4 + display_cols - 1 
9a03 11 fb 99		        ld de, endprg 
9a06 cd d0 8a			call str_at_display 
9a09 cd e0 8a			call update_display 
9a0c cd 6a dd			call cin_wait 
9a0f c1				pop bc 
9a10 f1				pop af 
9a11 d1				pop de 
9a12 e1				pop hl 
9a13			 
9a13			 
9a13 c9				ret 
9a14			 
9a14			 
9a14			; forth parser 
9a14			 
9a14			; My forth kernel 
9a14			include "forth_kernel.asm" 
9a14			; 
9a14			; kernel to the forth OS 
9a14			 
9a14			DS_TYPE_STR: equ 1     ; string type 
9a14			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9a14			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9a14			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9a14			 
9a14			FORTH_PARSEV1: equ 0 
9a14			FORTH_PARSEV2: equ 0 
9a14			FORTH_PARSEV3: equ 0 
9a14			FORTH_PARSEV4: equ 0 
9a14			FORTH_PARSEV5: equ 1 
9a14			 
9a14			;if FORTH_PARSEV5 
9a14			;	FORTH_END_BUFFER: equ 0 
9a14			;else 
9a14			FORTH_END_BUFFER: equ 127 
9a14			;endif 
9a14			 
9a14			FORTH_TRUE: equ 1 
9a14			FORTH_FALSE: equ 0 
9a14			 
9a14			if FORTH_PARSEV4 
9a14			include "forth_stackops.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV5 
9a14			include "forth_stackopsv5.asm" 
9a14			 
9a14			; Stack operations for v5 parser on wards 
9a14			; * DATA stack 
9a14			; * LOOP stack 
9a14			; * RETURN stack 
9a14			 
9a14			 
9a14			 
9a14			FORTH_CHK_DSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_data_sp) 
9a14				ld de, cli_data_stack 
9a14				call cmp16 
9a14				jp c, fault_dsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			 
9a14			FORTH_CHK_RSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_ret_sp) 
9a14				ld de, cli_ret_stack 
9a14				call cmp16 
9a14				jp c, fault_rsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_CHK_LOOP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_loop_sp) 
9a14				ld de, cli_loop_stack 
9a14				call cmp16 
9a14				jp c, fault_loop_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTSTR: macro 
9a14				; TOSO might need more for checks when used 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_STR 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTNUM: macro 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_INUM 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			 
9a14			; increase data stack pointer and save hl to it 
9a14				 
9a14			FORTH_DSP_NEXT: macro 
9a14				call macro_forth_dsp_next 
9a14				endm 
9a14			 
9a14			 
9a14			macro_forth_dsp_next: 
9a14				if DEBUG_FORTH_STACK_GUARD 
9a14 cd dc d9				call check_stacks 
9a17				endif 
9a17 e5				push hl 
9a18 d5				push de 
9a19 eb				ex de,hl 
9a1a 2a e8 e9			ld hl,(cli_data_sp) 
9a1d 23				inc hl 
9a1e 23				inc hl 
9a1f			 
9a1f			; PARSEV5 
9a1f 23				inc hl 
9a20 22 e8 e9			ld (cli_data_sp),hl 
9a23 73				ld (hl), e 
9a24 23				inc hl 
9a25 72				ld (hl), d 
9a26 d1				pop de 
9a27 e1				pop hl 
9a28				if DEBUG_FORTH_STACK_GUARD 
9a28 cd dc d9				call check_stacks 
9a2b				endif 
9a2b c9				ret 
9a2c			 
9a2c			 
9a2c			; increase ret stack pointer and save hl to it 
9a2c				 
9a2c			FORTH_RSP_NEXT: macro 
9a2c				call macro_forth_rsp_next 
9a2c				endm 
9a2c			 
9a2c			macro_forth_rsp_next: 
9a2c				if DEBUG_FORTH_STACK_GUARD 
9a2c cd dc d9				call check_stacks 
9a2f				endif 
9a2f e5				push hl 
9a30 d5				push de 
9a31 eb				ex de,hl 
9a32 2a ec e9			ld hl,(cli_ret_sp) 
9a35 23				inc hl 
9a36 23				inc hl 
9a37 22 ec e9			ld (cli_ret_sp),hl 
9a3a 73				ld (hl), e 
9a3b 23				inc hl 
9a3c 72				ld (hl), d 
9a3d d1				pop de 
9a3e e1				pop hl 
9a3f				if DEBUG_FORTH_STACK_GUARD 
9a3f cd dc d9				call check_stacks 
9a42				endif 
9a42 c9				ret 
9a43			 
9a43			; get current ret stack pointer and save to hl  
9a43				 
9a43			FORTH_RSP_TOS: macro 
9a43				call macro_forth_rsp_tos 
9a43				endm 
9a43			 
9a43			macro_forth_rsp_tos: 
9a43				;push de 
9a43 2a ec e9			ld hl,(cli_ret_sp) 
9a46 cd 7e 9a			call loadhlptrtohl 
9a49				;ld e, (hl) 
9a49				;inc hl 
9a49				;ld d, (hl) 
9a49				;ex de, hl 
9a49					if DEBUG_FORTH_WORDS 
9a49			;			DMARK "RST" 
9a49						CALLMONITOR 
9a49 cd 6f ee			call debug_vector  
9a4c				endm  
# End of macro CALLMONITOR
9a4c					endif 
9a4c				;pop de 
9a4c c9				ret 
9a4d			 
9a4d			; pop ret stack pointer 
9a4d				 
9a4d			FORTH_RSP_POP: macro 
9a4d				call macro_forth_rsp_pop 
9a4d				endm 
9a4d			 
9a4d			 
9a4d			macro_forth_rsp_pop: 
9a4d				if DEBUG_FORTH_STACK_GUARD 
9a4d			;		DMARK "RPP" 
9a4d cd dc d9				call check_stacks 
9a50					FORTH_CHK_RSP_UNDER 
9a50 e5				push hl 
9a51 d5				push de 
9a52 2a ec e9			ld hl,(cli_ret_sp) 
9a55 11 a6 e9			ld de, cli_ret_stack 
9a58 cd 08 8d			call cmp16 
9a5b da f3 da			jp c, fault_rsp_under 
9a5e d1				pop de 
9a5f e1				pop hl 
9a60				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a60				endif 
9a60 e5				push hl 
9a61 2a ec e9			ld hl,(cli_ret_sp) 
9a64			 
9a64			 
9a64				if FORTH_ENABLE_FREE 
9a64			 
9a64					; get pointer 
9a64			 
9a64					push de 
9a64					push hl 
9a64			 
9a64					ld e, (hl) 
9a64					inc hl 
9a64					ld d, (hl) 
9a64			 
9a64					ex de, hl 
9a64					call free 
9a64			 
9a64					pop hl 
9a64					pop de 
9a64			 
9a64			 
9a64				endif 
9a64			 
9a64			 
9a64 2b				dec hl 
9a65 2b				dec hl 
9a66 22 ec e9			ld (cli_ret_sp), hl 
9a69				; do stack underflow checks 
9a69 e1				pop hl 
9a6a				if DEBUG_FORTH_STACK_GUARD 
9a6a cd dc d9				call check_stacks 
9a6d					FORTH_CHK_RSP_UNDER 
9a6d e5				push hl 
9a6e d5				push de 
9a6f 2a ec e9			ld hl,(cli_ret_sp) 
9a72 11 a6 e9			ld de, cli_ret_stack 
9a75 cd 08 8d			call cmp16 
9a78 da f3 da			jp c, fault_rsp_under 
9a7b d1				pop de 
9a7c e1				pop hl 
9a7d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a7d				endif 
9a7d c9				ret 
9a7e			 
9a7e			 
9a7e			 
9a7e			; routine to load word pointed to by hl into hl 
9a7e			 
9a7e			loadhlptrtohl: 
9a7e			 
9a7e d5				push de 
9a7f 5e				ld e, (hl) 
9a80 23				inc hl 
9a81 56				ld d, (hl) 
9a82 eb				ex de, hl 
9a83 d1				pop de 
9a84			 
9a84 c9				ret 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			; push a number held in HL onto the data stack 
9a85			; entry point for pushing a value when already in hl used in function above 
9a85			 
9a85			forth_push_numhl: 
9a85			 
9a85 e5				push hl    ; save value to push 
9a86			 
9a86			if DEBUG_FORTH_PUSH 
9a86				; see if disabled 
9a86			 
9a86			 
9a86 f5				push af 
9a87 3a 6f ee			ld a,(debug_vector) 
9a8a fe c9			cp $c9   ; ret 
9a8c			;	ld a, (os_view_disable) 
9a8c			;	cp '*' 
9a8c 28 34			jr z, .pskip2 
9a8e e5				push hl 
9a8f e5			push hl 
9a90 cd bd 8a			call clear_display 
9a93 e1			pop hl 
9a94 7c				ld a,h 
9a95 21 c0 e5			ld hl, os_word_scratch 
9a98 cd f3 8e			call hexout 
9a9b e1				pop hl 
9a9c 7d				ld a,l 
9a9d 21 c2 e5			ld hl, os_word_scratch+2 
9aa0 cd f3 8e			call hexout 
9aa3			 
9aa3 21 c4 e5			ld hl, os_word_scratch+4 
9aa6 3e 00			ld a,0 
9aa8 77				ld (hl),a 
9aa9 11 c0 e5			ld de,os_word_scratch 
9aac 3e 28				ld a, display_row_2 
9aae cd d0 8a				call str_at_display 
9ab1 11 ea cb			ld de, .push_num 
9ab4 3e 00			ld a, display_row_1 
9ab6			 
9ab6 cd d0 8a				call str_at_display 
9ab9			 
9ab9			 
9ab9 cd e0 8a			call update_display 
9abc cd 00 8a			call delay1s 
9abf cd 00 8a			call delay1s 
9ac2			.pskip2:  
9ac2			 
9ac2 f1				pop af 
9ac3			endif	 
9ac3			 
9ac3			 
9ac3				FORTH_DSP_NEXT 
9ac3 cd 14 9a			call macro_forth_dsp_next 
9ac6				endm 
# End of macro FORTH_DSP_NEXT
9ac6			 
9ac6 2a e8 e9			ld hl, (cli_data_sp) 
9ac9			 
9ac9				; save item type 
9ac9 3e 02			ld a,  DS_TYPE_INUM 
9acb 77				ld (hl), a 
9acc 23				inc hl 
9acd			 
9acd				; get word off stack 
9acd d1				pop de 
9ace 7b				ld a,e 
9acf 77				ld (hl), a 
9ad0 23				inc hl 
9ad1 7a				ld a,d 
9ad2 77				ld (hl), a 
9ad3			 
9ad3			if DEBUG_FORTH_PUSH 
9ad3 2b				dec hl 
9ad4 2b				dec hl 
9ad5 2b				dec hl 
9ad6						DMARK "PH5" 
9ad6 f5				push af  
9ad7 3a eb 9a			ld a, (.dmark)  
9ada 32 65 ee			ld (debug_mark),a  
9add 3a ec 9a			ld a, (.dmark+1)  
9ae0 32 66 ee			ld (debug_mark+1),a  
9ae3 3a ed 9a			ld a, (.dmark+2)  
9ae6 32 67 ee			ld (debug_mark+2),a  
9ae9 18 03			jr .pastdmark  
9aeb ..			.dmark: db "PH5"  
9aee f1			.pastdmark: pop af  
9aef			endm  
# End of macro DMARK
9aef				CALLMONITOR 
9aef cd 6f ee			call debug_vector  
9af2				endm  
# End of macro CALLMONITOR
9af2			endif	 
9af2			 
9af2 c9				ret 
9af3			 
9af3			 
9af3			; Push a string to stack pointed to by hl 
9af3			 
9af3			forth_push_str: 
9af3			 
9af3			if DEBUG_FORTH_PUSH 
9af3						DMARK "PSQ" 
9af3 f5				push af  
9af4 3a 08 9b			ld a, (.dmark)  
9af7 32 65 ee			ld (debug_mark),a  
9afa 3a 09 9b			ld a, (.dmark+1)  
9afd 32 66 ee			ld (debug_mark+1),a  
9b00 3a 0a 9b			ld a, (.dmark+2)  
9b03 32 67 ee			ld (debug_mark+2),a  
9b06 18 03			jr .pastdmark  
9b08 ..			.dmark: db "PSQ"  
9b0b f1			.pastdmark: pop af  
9b0c			endm  
# End of macro DMARK
9b0c				CALLMONITOR 
9b0c cd 6f ee			call debug_vector  
9b0f				endm  
# End of macro CALLMONITOR
9b0f			endif	 
9b0f			 
9b0f			 
9b0f			    
9b0f e5				push hl 
9b10 e5				push hl 
9b11			 
9b11			;	ld a, 0   ; find end of string 
9b11 cd 50 90			call strlenz 
9b14			if DEBUG_FORTH_PUSH 
9b14						DMARK "PQ2" 
9b14 f5				push af  
9b15 3a 29 9b			ld a, (.dmark)  
9b18 32 65 ee			ld (debug_mark),a  
9b1b 3a 2a 9b			ld a, (.dmark+1)  
9b1e 32 66 ee			ld (debug_mark+1),a  
9b21 3a 2b 9b			ld a, (.dmark+2)  
9b24 32 67 ee			ld (debug_mark+2),a  
9b27 18 03			jr .pastdmark  
9b29 ..			.dmark: db "PQ2"  
9b2c f1			.pastdmark: pop af  
9b2d			endm  
# End of macro DMARK
9b2d				CALLMONITOR 
9b2d cd 6f ee			call debug_vector  
9b30				endm  
# End of macro CALLMONITOR
9b30			endif	 
9b30 eb				ex de, hl 
9b31 e1				pop hl   ; get ptr to start of string 
9b32			if DEBUG_FORTH_PUSH 
9b32						DMARK "PQ3" 
9b32 f5				push af  
9b33 3a 47 9b			ld a, (.dmark)  
9b36 32 65 ee			ld (debug_mark),a  
9b39 3a 48 9b			ld a, (.dmark+1)  
9b3c 32 66 ee			ld (debug_mark+1),a  
9b3f 3a 49 9b			ld a, (.dmark+2)  
9b42 32 67 ee			ld (debug_mark+2),a  
9b45 18 03			jr .pastdmark  
9b47 ..			.dmark: db "PQ3"  
9b4a f1			.pastdmark: pop af  
9b4b			endm  
# End of macro DMARK
9b4b				CALLMONITOR 
9b4b cd 6f ee			call debug_vector  
9b4e				endm  
# End of macro CALLMONITOR
9b4e			endif	 
9b4e 19				add hl,de 
9b4f			if DEBUG_FORTH_PUSH 
9b4f						DMARK "PQE" 
9b4f f5				push af  
9b50 3a 64 9b			ld a, (.dmark)  
9b53 32 65 ee			ld (debug_mark),a  
9b56 3a 65 9b			ld a, (.dmark+1)  
9b59 32 66 ee			ld (debug_mark+1),a  
9b5c 3a 66 9b			ld a, (.dmark+2)  
9b5f 32 67 ee			ld (debug_mark+2),a  
9b62 18 03			jr .pastdmark  
9b64 ..			.dmark: db "PQE"  
9b67 f1			.pastdmark: pop af  
9b68			endm  
# End of macro DMARK
9b68				CALLMONITOR 
9b68 cd 6f ee			call debug_vector  
9b6b				endm  
# End of macro CALLMONITOR
9b6b			endif	 
9b6b			 
9b6b 2b				dec hl    ; see if there is an optional trailing double quote 
9b6c 7e				ld a,(hl) 
9b6d fe 22			cp '"' 
9b6f 20 03			jr nz, .strnoq 
9b71 3e 00			ld a, 0      ; get rid of double quote 
9b73 77				ld (hl), a 
9b74 23			.strnoq: inc hl 
9b75			 
9b75 3e 00			ld a, 0 
9b77 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b78			 
9b78 13				inc de ; add one for the type string 
9b79 13				inc de ; add one for null term??? 
9b7a			 
9b7a				; tos is get string pointer again 
9b7a				; de contains space to allocate 
9b7a				 
9b7a d5				push de 
9b7b			 
9b7b eb				ex de, hl 
9b7c			 
9b7c				;push af 
9b7c			 
9b7c			if DEBUG_FORTH_PUSH 
9b7c						DMARK "PHm" 
9b7c f5				push af  
9b7d 3a 91 9b			ld a, (.dmark)  
9b80 32 65 ee			ld (debug_mark),a  
9b83 3a 92 9b			ld a, (.dmark+1)  
9b86 32 66 ee			ld (debug_mark+1),a  
9b89 3a 93 9b			ld a, (.dmark+2)  
9b8c 32 67 ee			ld (debug_mark+2),a  
9b8f 18 03			jr .pastdmark  
9b91 ..			.dmark: db "PHm"  
9b94 f1			.pastdmark: pop af  
9b95			endm  
# End of macro DMARK
9b95				CALLMONITOR 
9b95 cd 6f ee			call debug_vector  
9b98				endm  
# End of macro CALLMONITOR
9b98			endif	 
9b98 cd c5 90			call malloc	; on ret hl now contains allocated memory 
9b9b				if DEBUG_FORTH_MALLOC_GUARD 
9b9b cc 42 cc				call z,malloc_error 
9b9e				endif 
9b9e			 
9b9e				 
9b9e c1				pop bc    ; get length 
9b9f d1				pop de   ;  get string start    
9ba0			 
9ba0				; hl has destination from malloc 
9ba0			 
9ba0 eb				ex de, hl    ; prep for ldir 
9ba1			 
9ba1 d5				push de   ; save malloc area for DSP later 
9ba2				;push hl   ; save malloc area for DSP later 
9ba2			 
9ba2			if DEBUG_FORTH_PUSH 
9ba2						DMARK "PHc" 
9ba2 f5				push af  
9ba3 3a b7 9b			ld a, (.dmark)  
9ba6 32 65 ee			ld (debug_mark),a  
9ba9 3a b8 9b			ld a, (.dmark+1)  
9bac 32 66 ee			ld (debug_mark+1),a  
9baf 3a b9 9b			ld a, (.dmark+2)  
9bb2 32 67 ee			ld (debug_mark+2),a  
9bb5 18 03			jr .pastdmark  
9bb7 ..			.dmark: db "PHc"  
9bba f1			.pastdmark: pop af  
9bbb			endm  
# End of macro DMARK
9bbb				CALLMONITOR 
9bbb cd 6f ee			call debug_vector  
9bbe				endm  
# End of macro CALLMONITOR
9bbe			endif	 
9bbe			 
9bbe			 
9bbe ed b0			ldir 
9bc0			 
9bc0			 
9bc0				; push malloc to data stack     macro?????  
9bc0			 
9bc0				FORTH_DSP_NEXT 
9bc0 cd 14 9a			call macro_forth_dsp_next 
9bc3				endm 
# End of macro FORTH_DSP_NEXT
9bc3			 
9bc3				; save value and type 
9bc3			 
9bc3 2a e8 e9			ld hl, (cli_data_sp) 
9bc6			 
9bc6				; save item type 
9bc6 3e 01			ld a,  DS_TYPE_STR 
9bc8 77				ld (hl), a 
9bc9 23				inc hl 
9bca			 
9bca				; get malloc word off stack 
9bca d1				pop de 
9bcb 73				ld (hl), e 
9bcc 23				inc hl 
9bcd 72				ld (hl), d 
9bce			 
9bce			 
9bce			 
9bce			if DEBUG_FORTH_PUSH 
9bce 2a e8 e9			ld hl, (cli_data_sp) 
9bd1						DMARK "PHS" 
9bd1 f5				push af  
9bd2 3a e6 9b			ld a, (.dmark)  
9bd5 32 65 ee			ld (debug_mark),a  
9bd8 3a e7 9b			ld a, (.dmark+1)  
9bdb 32 66 ee			ld (debug_mark+1),a  
9bde 3a e8 9b			ld a, (.dmark+2)  
9be1 32 67 ee			ld (debug_mark+2),a  
9be4 18 03			jr .pastdmark  
9be6 ..			.dmark: db "PHS"  
9be9 f1			.pastdmark: pop af  
9bea			endm  
# End of macro DMARK
9bea				CALLMONITOR 
9bea cd 6f ee			call debug_vector  
9bed				endm  
# End of macro CALLMONITOR
9bed			;	ex de,hl 
9bed			endif	 
9bed				; in case of spaces, skip the ptr past the copied string 
9bed				;pop af 
9bed				;ld (cli_origptr),hl 
9bed			 
9bed c9				ret 
9bee			 
9bee			 
9bee			 
9bee			; TODO ascii push input onto stack given hl to start of input 
9bee			 
9bee			; identify type 
9bee			; if starts with a " then a string 
9bee			; otherwise it is a number 
9bee			;  
9bee			; if a string 
9bee			;     scan for ending " to get length of string to malloc for + 1 
9bee			;     malloc 
9bee			;     put pointer to string on stack first byte flags as string 
9bee			; 
9bee			; else a number 
9bee			;    look for number format identifier 
9bee			;    $xx hex 
9bee			;    %xxxxx bin 
9bee			;    xxxxx decimal 
9bee			;    convert number to 16bit word.  
9bee			;    malloc word + 1 with flag to identiy as num 
9bee			;    put pointer to number on stack 
9bee			;   
9bee			;  
9bee			  
9bee			forth_apush: 
9bee				; kernel push 
9bee			 
9bee			if DEBUG_FORTH_PUSH 
9bee						DMARK "PSH" 
9bee f5				push af  
9bef 3a 03 9c			ld a, (.dmark)  
9bf2 32 65 ee			ld (debug_mark),a  
9bf5 3a 04 9c			ld a, (.dmark+1)  
9bf8 32 66 ee			ld (debug_mark+1),a  
9bfb 3a 05 9c			ld a, (.dmark+2)  
9bfe 32 67 ee			ld (debug_mark+2),a  
9c01 18 03			jr .pastdmark  
9c03 ..			.dmark: db "PSH"  
9c06 f1			.pastdmark: pop af  
9c07			endm  
# End of macro DMARK
9c07				CALLMONITOR 
9c07 cd 6f ee			call debug_vector  
9c0a				endm  
# End of macro CALLMONITOR
9c0a			endif	 
9c0a				; identify input type 
9c0a			 
9c0a 7e				ld a,(hl) 
9c0b			 
9c0b fe 23			cp '#' 
9c0d ca 47 9c			jp z, .fapdec 
9c10			 
9c10			 
9c10 fe 22			cp '"' 
9c12 28 0a			jr z, .fapstr 
9c14 fe 24			cp '$' 
9c16 ca 3e 9c			jp z, .faphex 
9c19 fe 25			cp '%' 
9c1b ca 26 9c			jp z, .fapbin 
9c1e			;	cp 'b' 
9c1e			;	jp z, .fabin 
9c1e				; else decimal 
9c1e			 
9c1e				; TODO do decimal conversion 
9c1e				; decimal is stored as a 16bit word 
9c1e			 
9c1e				; by default everything is a string if type is not detected 
9c1e			.fapstr: ; 
9c1e fe 22			cp '"' 
9c20 20 01			jr nz, .strnoqu 
9c22 23				inc hl 
9c23			.strnoqu: 
9c23 c3 f3 9a			jp forth_push_str 
9c26			 
9c26			 
9c26			 
9c26			.fapbin:    ; push a binary string.  
9c26 11 00 00			ld de, 0   ; hold a 16bit value 
9c29			 
9c29 23			.fapbinshift:	inc hl  
9c2a 7e				ld a,(hl) 
9c2b fe 00			cp 0     ; done scanning  
9c2d 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c2f			 
9c2f				; left shift de 
9c2f eb				ex de, hl	 
9c30 29				add hl, hl 
9c31			 
9c31				; is 1 
9c31 fe 31			cp '1' 
9c33 20 02			jr nz, .binzero 
9c35 cb 4d			bit 1, l 
9c37			.binzero: 
9c37 eb				ex de, hl	 ; save current de 
9c38 18 ef			jr .fapbinshift 
9c3a			 
9c3a			.fapbdone: 
9c3a eb				ex de, hl 
9c3b c3 85 9a			jp forth_push_numhl 
9c3e			 
9c3e			 
9c3e			.faphex:   ; hex is always stored as a 16bit word 
9c3e				; skip number prefix 
9c3e 23				inc hl 
9c3f				; turn ascii into number 
9c3f cd a9 8f			call get_word_hl	; ret 16bit word in hl 
9c42			 
9c42 c3 85 9a			jp forth_push_numhl 
9c45			 
9c45 00				 nop 
9c46			 
9c46			.fabin:   ; TODO bin conversion 
9c46			 
9c46			 
9c46 c9				ret 
9c47			.fapdec:	 
9c47				; string to dec conversion 
9c47 23				inc hl 
9c48 eb				ex de, hl 
9c49 cd e7 8f			call string_to_uint16 
9c4c c3 85 9a			jp forth_push_numhl 
9c4f c9				ret 
9c50				 
9c50			;atoui_16: 
9c50			 
9c50			; get either a string ptr or a 16bit word from the data stack 
9c50			 
9c50			FORTH_DSP: macro 
9c50				call macro_forth_dsp 
9c50				endm 
9c50			 
9c50			macro_forth_dsp: 
9c50				; data stack pointer points to current word on tos 
9c50			 
9c50 2a e8 e9			ld hl,(cli_data_sp) 
9c53			 
9c53				if DEBUG_FORTH_PUSH 
9c53						DMARK "DSP" 
9c53 f5				push af  
9c54 3a 68 9c			ld a, (.dmark)  
9c57 32 65 ee			ld (debug_mark),a  
9c5a 3a 69 9c			ld a, (.dmark+1)  
9c5d 32 66 ee			ld (debug_mark+1),a  
9c60 3a 6a 9c			ld a, (.dmark+2)  
9c63 32 67 ee			ld (debug_mark+2),a  
9c66 18 03			jr .pastdmark  
9c68 ..			.dmark: db "DSP"  
9c6b f1			.pastdmark: pop af  
9c6c			endm  
# End of macro DMARK
9c6c			 
9c6c cd 75 cc				call display_data_sp 
9c6f				;call break_point_state 
9c6f				;rst 030h 
9c6f				CALLMONITOR 
9c6f cd 6f ee			call debug_vector  
9c72				endm  
# End of macro CALLMONITOR
9c72				endif 
9c72			 
9c72 c9				ret 
9c73			 
9c73			; return hl to start of value on stack 
9c73			 
9c73			FORTH_DSP_VALUE: macro 
9c73				call macro_forth_dsp_value 
9c73				endm 
9c73			 
9c73			macro_forth_dsp_value: 
9c73			 
9c73				FORTH_DSP 
9c73 cd 50 9c			call macro_forth_dsp 
9c76				endm 
# End of macro FORTH_DSP
9c76			 
9c76 d5				push de 
9c77			 
9c77 23				inc hl ; skip type 
9c78			 
9c78 5e				ld e, (hl) 
9c79 23				inc hl 
9c7a 56				ld d, (hl) 
9c7b eb				ex de,hl  
9c7c			 
9c7c d1				pop de 
9c7d			 
9c7d c9				ret 
9c7e			 
9c7e			; return hl to start of value to second item on stack 
9c7e			 
9c7e			FORTH_DSP_VALUEM1: macro 
9c7e				call macro_forth_dsp_value_m1 
9c7e				endm 
9c7e			 
9c7e			macro_forth_dsp_value_m1: 
9c7e			 
9c7e				FORTH_DSP 
9c7e cd 50 9c			call macro_forth_dsp 
9c81				endm 
# End of macro FORTH_DSP
9c81			 
9c81 2b				dec hl 
9c82 2b				dec hl 
9c83			;	dec hl 
9c83			 
9c83 d5				push de 
9c84			 
9c84 5e				ld e, (hl) 
9c85 23				inc hl 
9c86 56				ld d, (hl) 
9c87 eb				ex de,hl  
9c88			 
9c88 d1				pop de 
9c89			 
9c89 c9				ret 
9c8a			 
9c8a				 
9c8a			 
9c8a			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c8a			 
9c8a			FORTH_DSP_POP: macro 
9c8a				call macro_forth_dsp_pop 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			; get the tos data type 
9c8a			 
9c8a			FORTH_DSP_TYPE:   macro 
9c8a			 
9c8a				;FORTH_DSP_VALUE 
9c8a				FORTH_DSP 
9c8a				 
9c8a				; hl points to value 
9c8a				; check type 
9c8a			 
9c8a				ld a,(hl) 
9c8a			 
9c8a				endm 
9c8a			 
9c8a			; load the tos value into hl 
9c8a			 
9c8a			 
9c8a			FORTH_DSP_VALUEHL:  macro 
9c8a				call macro_dsp_valuehl 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			 
9c8a			macro_dsp_valuehl: 
9c8a				FORTH_DSP_VALUE 
9c8a cd 73 9c			call macro_forth_dsp_value 
9c8d				endm 
# End of macro FORTH_DSP_VALUE
9c8d			 
9c8d				;FORTH_ERR_TOS_NOTNUM 
9c8d			 
9c8d				;inc hl   ; skip type id 
9c8d			 
9c8d			;	push de 
9c8d			; 
9c8d			;	ld e, (hl) 
9c8d			;	inc hl 
9c8d			;	ld d, (hl) 
9c8d			;	ex de,hl  
9c8d			 
9c8d			;	pop de 
9c8d			 
9c8d				if DEBUG_FORTH_PUSH 
9c8d						DMARK "DVL" 
9c8d f5				push af  
9c8e 3a a2 9c			ld a, (.dmark)  
9c91 32 65 ee			ld (debug_mark),a  
9c94 3a a3 9c			ld a, (.dmark+1)  
9c97 32 66 ee			ld (debug_mark+1),a  
9c9a 3a a4 9c			ld a, (.dmark+2)  
9c9d 32 67 ee			ld (debug_mark+2),a  
9ca0 18 03			jr .pastdmark  
9ca2 ..			.dmark: db "DVL"  
9ca5 f1			.pastdmark: pop af  
9ca6			endm  
# End of macro DMARK
9ca6				CALLMONITOR 
9ca6 cd 6f ee			call debug_vector  
9ca9				endm  
# End of macro CALLMONITOR
9ca9				endif 
9ca9 c9				ret 
9caa			 
9caa			forth_apushstrhl:      
9caa				; push of string requires use of cli_origptr 
9caa				; bodge use 
9caa			 
9caa				; get current cli_origptr, save, update with temp pointer  
9caa ed 5b 38 ea		ld de, (cli_origptr) 
9cae 22 38 ea			ld (cli_origptr), hl 
9cb1 d5				push de 
9cb2 cd ee 9b			call forth_apush 
9cb5 d1				pop de 
9cb6 ed 53 38 ea		ld (cli_origptr), de 
9cba c9			        ret	 
9cbb			 
9cbb			 
9cbb			; increase loop stack pointer and save hl to it 
9cbb				 
9cbb			FORTH_LOOP_NEXT: macro 
9cbb				call macro_forth_loop_next 
9cbb				;nop 
9cbb				endm 
9cbb			 
9cbb			macro_forth_loop_next: 
9cbb				if DEBUG_FORTH_STACK_GUARD 
9cbb cd dc d9				call check_stacks 
9cbe				endif 
9cbe e5				push hl 
9cbf d5				push de 
9cc0 eb				ex de,hl 
9cc1 2a ea e9			ld hl,(cli_loop_sp) 
9cc4 23				inc hl 
9cc5 23				inc hl 
9cc6					if DEBUG_FORTH_WORDS 
9cc6						DMARK "LNX" 
9cc6 f5				push af  
9cc7 3a db 9c			ld a, (.dmark)  
9cca 32 65 ee			ld (debug_mark),a  
9ccd 3a dc 9c			ld a, (.dmark+1)  
9cd0 32 66 ee			ld (debug_mark+1),a  
9cd3 3a dd 9c			ld a, (.dmark+2)  
9cd6 32 67 ee			ld (debug_mark+2),a  
9cd9 18 03			jr .pastdmark  
9cdb ..			.dmark: db "LNX"  
9cde f1			.pastdmark: pop af  
9cdf			endm  
# End of macro DMARK
9cdf						CALLMONITOR 
9cdf cd 6f ee			call debug_vector  
9ce2				endm  
# End of macro CALLMONITOR
9ce2					endif 
9ce2 22 ea e9			ld (cli_loop_sp),hl 
9ce5 73				ld (hl), e 
9ce6 23				inc hl 
9ce7 72				ld (hl), d 
9ce8 d1				pop de    ; been reversed so save a swap on restore 
9ce9 e1				pop hl 
9cea				if DEBUG_FORTH_STACK_GUARD 
9cea cd dc d9				call check_stacks 
9ced				endif 
9ced c9				ret 
9cee			 
9cee			; get current ret stack pointer and save to hl  
9cee				 
9cee			FORTH_LOOP_TOS: macro 
9cee				call macro_forth_loop_tos 
9cee				endm 
9cee			 
9cee			macro_forth_loop_tos: 
9cee d5				push de 
9cef 2a ea e9			ld hl,(cli_loop_sp) 
9cf2 5e				ld e, (hl) 
9cf3 23				inc hl 
9cf4 56				ld d, (hl) 
9cf5 eb				ex de, hl 
9cf6 d1				pop de 
9cf7 c9				ret 
9cf8			 
9cf8			; pop loop stack pointer 
9cf8				 
9cf8			FORTH_LOOP_POP: macro 
9cf8				call macro_forth_loop_pop 
9cf8				endm 
9cf8			 
9cf8			 
9cf8			macro_forth_loop_pop: 
9cf8				if DEBUG_FORTH_STACK_GUARD 
9cf8					DMARK "LPP" 
9cf8 f5				push af  
9cf9 3a 0d 9d			ld a, (.dmark)  
9cfc 32 65 ee			ld (debug_mark),a  
9cff 3a 0e 9d			ld a, (.dmark+1)  
9d02 32 66 ee			ld (debug_mark+1),a  
9d05 3a 0f 9d			ld a, (.dmark+2)  
9d08 32 67 ee			ld (debug_mark+2),a  
9d0b 18 03			jr .pastdmark  
9d0d ..			.dmark: db "LPP"  
9d10 f1			.pastdmark: pop af  
9d11			endm  
# End of macro DMARK
9d11 cd dc d9				call check_stacks 
9d14					FORTH_CHK_LOOP_UNDER 
9d14 e5				push hl 
9d15 d5				push de 
9d16 2a ea e9			ld hl,(cli_loop_sp) 
9d19 11 24 e9			ld de, cli_loop_stack 
9d1c cd 08 8d			call cmp16 
9d1f da f9 da			jp c, fault_loop_under 
9d22 d1				pop de 
9d23 e1				pop hl 
9d24				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d24				endif 
9d24 e5				push hl 
9d25 2a ea e9			ld hl,(cli_loop_sp) 
9d28 2b				dec hl 
9d29 2b				dec hl 
9d2a 22 ea e9			ld (cli_loop_sp), hl 
9d2d				; TODO do stack underflow checks 
9d2d e1				pop hl 
9d2e				if DEBUG_FORTH_STACK_GUARD 
9d2e cd dc d9				call check_stacks 
9d31					FORTH_CHK_LOOP_UNDER 
9d31 e5				push hl 
9d32 d5				push de 
9d33 2a ea e9			ld hl,(cli_loop_sp) 
9d36 11 24 e9			ld de, cli_loop_stack 
9d39 cd 08 8d			call cmp16 
9d3c da f9 da			jp c, fault_loop_under 
9d3f d1				pop de 
9d40 e1				pop hl 
9d41				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d41				endif 
9d41 c9				ret 
9d42			 
9d42			macro_forth_dsp_pop: 
9d42			 
9d42 e5				push hl 
9d43			 
9d43				; release malloc data 
9d43			 
9d43				if DEBUG_FORTH_STACK_GUARD 
9d43 cd dc d9				call check_stacks 
9d46					FORTH_CHK_DSP_UNDER 
9d46 e5				push hl 
9d47 d5				push de 
9d48 2a e8 e9			ld hl,(cli_data_sp) 
9d4b 11 22 e8			ld de, cli_data_stack 
9d4e cd 08 8d			call cmp16 
9d51 da ed da			jp c, fault_dsp_under 
9d54 d1				pop de 
9d55 e1				pop hl 
9d56				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d56				endif 
9d56				;ld hl,(cli_data_sp) 
9d56			if DEBUG_FORTH_DOT 
9d56				DMARK "DPP" 
9d56 f5				push af  
9d57 3a 6b 9d			ld a, (.dmark)  
9d5a 32 65 ee			ld (debug_mark),a  
9d5d 3a 6c 9d			ld a, (.dmark+1)  
9d60 32 66 ee			ld (debug_mark+1),a  
9d63 3a 6d 9d			ld a, (.dmark+2)  
9d66 32 67 ee			ld (debug_mark+2),a  
9d69 18 03			jr .pastdmark  
9d6b ..			.dmark: db "DPP"  
9d6e f1			.pastdmark: pop af  
9d6f			endm  
# End of macro DMARK
9d6f				CALLMONITOR 
9d6f cd 6f ee			call debug_vector  
9d72				endm  
# End of macro CALLMONITOR
9d72			endif	 
9d72			 
9d72			 
9d72			if FORTH_ENABLE_DSPPOPFREE 
9d72			 
9d72				FORTH_DSP 
9d72 cd 50 9c			call macro_forth_dsp 
9d75				endm 
# End of macro FORTH_DSP
9d75			 
9d75 7e				ld a, (hl) 
9d76 fe 01			cp DS_TYPE_STR 
9d78 20 23			jr nz, .skippopfree 
9d7a			 
9d7a				FORTH_DSP_VALUEHL 
9d7a cd 8a 9c			call macro_dsp_valuehl 
9d7d				endm 
# End of macro FORTH_DSP_VALUEHL
9d7d 00				nop 
9d7e			if DEBUG_FORTH_DOT 
9d7e				DMARK "DPf" 
9d7e f5				push af  
9d7f 3a 93 9d			ld a, (.dmark)  
9d82 32 65 ee			ld (debug_mark),a  
9d85 3a 94 9d			ld a, (.dmark+1)  
9d88 32 66 ee			ld (debug_mark+1),a  
9d8b 3a 95 9d			ld a, (.dmark+2)  
9d8e 32 67 ee			ld (debug_mark+2),a  
9d91 18 03			jr .pastdmark  
9d93 ..			.dmark: db "DPf"  
9d96 f1			.pastdmark: pop af  
9d97			endm  
# End of macro DMARK
9d97				CALLMONITOR 
9d97 cd 6f ee			call debug_vector  
9d9a				endm  
# End of macro CALLMONITOR
9d9a			endif	 
9d9a cd 8f 91			call free 
9d9d			.skippopfree: 
9d9d				 
9d9d			 
9d9d			endif 
9d9d			 
9d9d			if DEBUG_FORTH_DOT_KEY 
9d9d				DMARK "DP2" 
9d9d				CALLMONITOR 
9d9d			endif	 
9d9d			 
9d9d				; move pointer down 
9d9d			 
9d9d 2a e8 e9			ld hl,(cli_data_sp) 
9da0 2b				dec hl 
9da1 2b				dec hl 
9da2			; PARSEV5 
9da2 2b				dec hl 
9da3 22 e8 e9			ld (cli_data_sp), hl 
9da6			 
9da6				if DEBUG_FORTH_STACK_GUARD 
9da6 cd dc d9				call check_stacks 
9da9					FORTH_CHK_DSP_UNDER 
9da9 e5				push hl 
9daa d5				push de 
9dab 2a e8 e9			ld hl,(cli_data_sp) 
9dae 11 22 e8			ld de, cli_data_stack 
9db1 cd 08 8d			call cmp16 
9db4 da ed da			jp c, fault_dsp_under 
9db7 d1				pop de 
9db8 e1				pop hl 
9db9				endm 
# End of macro FORTH_CHK_DSP_UNDER
9db9				endif 
9db9			 
9db9 e1				pop hl 
9dba			 
9dba c9				ret 
9dbb			 
9dbb			getwordathl: 
9dbb				; hl points to an address 
9dbb				; load hl with the word at that address 
9dbb			 
9dbb d5				push de 
9dbc			 
9dbc 5e				ld e, (hl) 
9dbd 23				inc hl 
9dbe 56				ld d, (hl) 
9dbf eb				ex de, hl 
9dc0			 
9dc0 d1				pop de 
9dc1 c9				ret 
9dc2			 
9dc2			 
9dc2			; functions to manuplite stack points 
9dc2			 
9dc2			; copy point in hl to stack tmp storage slots 1-4 
9dc2			hltostack1: 
9dc2 11 b8 e2			ld de, os_stack_1  
9dc5 c3 f0 9d			jp hltostackmv 
9dc8			 
9dc8			hltostack2:  
9dc8 11 b5 e2			ld de, os_stack_2 
9dcb c3 f0 9d			jp hltostackmv 
9dce			 
9dce			hltostack3:  
9dce 11 b2 e2			ld de, os_stack_3 
9dd1 c3 f0 9d			jp hltostackmv 
9dd4			 
9dd4			hltostack4:  
9dd4 11 af e2			ld de, os_stack_4  
9dd7 c3 f0 9d			jp hltostackmv 
9dda			 
9dda			; copy to point in hl from stack tmp storage slots 1-4 
9dda			hlfromstack1: 
9dda 11 b8 e2			ld de, os_stack_1 
9ddd c3 ef 9d			jp hlfromsttackmv 
9de0			 
9de0			hlfromstack2:  
9de0 11 b5 e2			ld de, os_stack_2 
9de3 c3 ef 9d			jp hlfromsttackmv 
9de6			 
9de6			hlfromstack3:  
9de6 11 b2 e2			ld de, os_stack_3 
9de9 c3 ef 9d			jp hlfromsttackmv 
9dec			 
9dec			hlfromstack4:  
9dec 11 af e2			ld de, os_stack_4 
9def			 
9def			hlfromsttackmv: 
9def eb				ex de, hl 
9df0			 
9df0			hltostackmv: 
9df0			 
9df0				; do stack move 
9df0 c5				push bc 
9df1 01 03 00			ld bc, 3 
9df4 ed b0			ldir  
9df6 c1				pop bc	 
9df7 c9				ret 
9df8			 
9df8			; eof 
9df8			 
# End of file forth_stackopsv5.asm
9df8			endif 
9df8			 
9df8			loadwordinhl:	 
9df8			 
9df8 d5				push de 
9df9			 
9df9 5e				ld e, (hl) 
9dfa 23				inc hl 
9dfb 56				ld d, (hl) 
9dfc eb				ex de,hl  
9dfd			 
9dfd d1				pop de 
9dfe			 
9dfe c9				ret 
9dff			 
9dff			user_word_eol:  
9dff				; hl contains the pointer to where to create a linked list item from the end 
9dff				; of the user dict to continue on at the system word dict 
9dff				 
9dff				; poke the stub of the word list linked list to repoint to rom words 
9dff			 
9dff				; stub format 
9dff				; db   word id 
9dff				; dw    link to next word 
9dff			        ; db char length of token 
9dff				; db string + 0 term 
9dff				; db exec code....  
9dff			 
9dff 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e01 77				ld (hl), a		; word id 
9e02 23				inc hl 
9e03			 
9e03 11 ce 9f			ld de, sysdict 
9e06 73				ld (hl), e		; next word link ie system dict 
9e07 23				inc hl 
9e08 72				ld (hl), d		; next word link ie system dict 
9e09 23				inc hl	 
9e0a			 
9e0a			;	ld (hl), sysdict		; next word link ie system dict 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a 3e 02			ld a, 2			; word length is 0 
9e0c 77				ld (hl), a	 
9e0d 23				inc hl 
9e0e			 
9e0e 3e 7e			ld a, '~'			; word length is 0 
9e10 77				ld (hl), a	 
9e11 23				inc hl 
9e12 3e 00			ld a, 0			; save empty word 
9e14 77				ld (hl), a 
9e15			 
9e15 c9				ret 
9e16			 
9e16				 
9e16			 
9e16			forthexec_cleanup: 
9e16				FORTH_RSP_POP 
9e16 cd 4d 9a			call macro_forth_rsp_pop 
9e19				endm 
# End of macro FORTH_RSP_POP
9e19 c9				ret 
9e1a			 
9e1a			forth_call_hl: 
9e1a				; taking hl 
9e1a e5				push hl 
9e1b c9				ret 
9e1c			 
9e1c			; this is called to reset Forth system but keep existing uwords etc 
9e1c			 
9e1c			forth_warmstart: 
9e1c				; setup stack over/under flow checks 
9e1c				if DEBUG_FORTH_STACK_GUARD 
9e1c cd c2 d9				call chk_stk_init 
9e1f				endif 
9e1f			 
9e1f				; init stack pointers  - * these stacks go upwards *  
9e1f 21 a6 e9			ld hl, cli_ret_stack 
9e22 22 ec e9			ld (cli_ret_sp), hl	 
9e25				; set bottom of stack 
9e25 3e 00			ld a,0 
9e27 77				ld (hl),a 
9e28 23				inc hl 
9e29 77				ld (hl),a 
9e2a			 
9e2a 21 22 e8			ld hl, cli_data_stack 
9e2d 22 e8 e9			ld (cli_data_sp), hl	 
9e30				; set bottom of stack 
9e30 3e 00			ld a,0 
9e32 77				ld (hl),a 
9e33 23				inc hl 
9e34 77				ld (hl),a 
9e35			 
9e35 21 24 e9			ld hl, cli_loop_stack 
9e38 22 ea e9			ld (cli_loop_sp), hl	 
9e3b				; set bottom of stack 
9e3b 3e 00			ld a,0 
9e3d 77				ld (hl),a 
9e3e 23				inc hl 
9e3f 77				ld (hl),a 
9e40			 
9e40				; init extent of current open file 
9e40			 
9e40 3e 00			ld a, 0 
9e42 32 64 ea			ld (store_openext), a 
9e45			 
9e45 c9				ret 
9e46			 
9e46			 
9e46			 
9e46			; Cold Start - this is called to setup the whole Forth system 
9e46			 
9e46			forth_init: 
9e46			 
9e46				; setup stack over/under flow checks 
9e46			 
9e46			;	if DEBUG_FORTH_STACK_GUARD 
9e46			;		call chk_stk_init 
9e46			;	endif 
9e46			 
9e46				; enable auto display updates (slow.....) 
9e46			 
9e46 3e 01			ld a, 1 
9e48 32 36 ea			ld (cli_autodisplay), a 
9e4b			 
9e4b				; if storage is in use disable long reads for now 
9e4b 3e 00			ld a, 0 
9e4d 32 6f ea			ld (store_longread), a 
9e50			 
9e50			 
9e50				; show start up screen 
9e50			 
9e50 cd bd 8a			call clear_display 
9e53			 
9e53 3e 00			ld a,0 
9e55 32 58 ea			ld (f_cursor_ptr), a 
9e58			 
9e58				; set start of word list in start of ram - for use when creating user words 
9e58			 
9e58 21 7f dd			ld hl, baseram 
9e5b 22 b8 e5			ld (os_last_new_uword), hl 
9e5e cd ff 9d			call user_word_eol 
9e61				 
9e61			;		call display_data_sp 
9e61			;		call next_page_prompt 
9e61			 
9e61			 
9e61			 
9e61			 
9e61 c9				ret 
9e62			 
9e62 .. 00		.bootforth: db " Forth Kernel Init ",0 
9e76			 
9e76			; TODO push to stack 
9e76			 
9e76			;  
9e76			 
9e76			if FORTH_PARSEV2 
9e76			 
9e76			 
9e76				include "forth_parserv2.asm" 
9e76			 
9e76			endif 
9e76			 
9e76			 
9e76			; parse cli version 1 
9e76			 
9e76			if FORTH_PARSEV1 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv1.asm" 
9e76			endif 
9e76				 
9e76			if FORTH_PARSEV3 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv3.asm" 
9e76				include "forth_wordsv3.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV4 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv4.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV5 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv5.asm" 
9e76			 
9e76			 
9e76			; A better parser without using malloc and string copies all over the place.  
9e76			; Exec in situ should be faster 
9e76			 
9e76			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e76			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e76			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e76			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e76			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e76			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e76			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e76			 
9e76			; Core word preamble macro 
9e76			 
9e76			CWHEAD:   macro nxtword opcode lit len opflags 
9e76				db WORD_SYS_CORE+opcode             
9e76				; internal op code number 
9e76				dw nxtword            
9e76				; link to next dict word block 
9e76				db len + 1 
9e76				; literal length of dict word inc zero term 
9e76				db lit,0              
9e76				; literal dict word 
9e76			        ; TODO db opflags        
9e76				endm 
9e76			 
9e76			 
9e76			NEXTW: macro  
9e76				jp macro_next 
9e76				endm 
9e76			 
9e76			macro_next: 
9e76			if DEBUG_FORTH_PARSE_KEY 
9e76				DMARK "NXT" 
9e76				CALLMONITOR 
9e76			endif	 
9e76			;	inc hl  ; skip token null term  
9e76 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e7a ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e7e 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e81			if DEBUG_FORTH_PARSE_KEY 
9e81				DMARK "}AA" 
9e81				CALLMONITOR 
9e81			endif	 
9e81 c3 84 9f			jp execnext 
9e84				;jp exec1 
9e84			       
9e84			 
9e84			 
9e84			; Another go at the parser to compile  
9e84			 
9e84			 
9e84			; TODO rework parser to change all of the string words to byte tokens 
9e84			; TODO do a search for  
9e84			 
9e84			; TODO first run normal parser to zero term sections 
9e84			; TODO for each word do a token look up to get the op code 
9e84			; TODO need some means to flag to the exec that this is a byte code form    
9e84			 
9e84			 
9e84			forthcompile: 
9e84			 
9e84			; 
9e84			; line parse: 
9e84			;       parse raw input buffer 
9e84			;       tokenise the words 
9e84			;       malloc new copy (for looping etc) 
9e84			;       copy to malloc + current pc in line to start of string and add line term 
9e84			;       save on new rsp 
9e84			; 
9e84			 
9e84			; hl to point to the line to tokenise 
9e84			 
9e84			;	push hl 
9e84 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e87			 
9e87			;	ld a,0		; string term on input 
9e87			;	call strlent 
9e87			 
9e87			;	ld (os_tok_len), hl	 ; save string length 
9e87			 
9e87			;if DEBUG_FORTH_TOK 
9e87			;	ex de,hl		 
9e87			;endif 
9e87			 
9e87			;	pop hl 		; get back string pointer 
9e87			 
9e87			if DEBUG_FORTH_TOK 
9e87						DMARK "TOc" 
9e87				CALLMONITOR 
9e87			endif 
9e87 7e			.cptoken2:    ld a,(hl) 
9e88 23				inc hl 
9e89 fe 7f			cp FORTH_END_BUFFER 
9e8b 28 29			jr z, .cptokendone2 
9e8d fe 00			cp 0 
9e8f 28 25			jr z, .cptokendone2 
9e91 fe 22			cp '"' 
9e93 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e95 fe 20			cp ' ' 
9e97 20 ee			jr nz,  .cptoken2 
9e99			 
9e99			; TODO consume comments held between ( and ) 
9e99			 
9e99				; we have a space so change to zero term for dict match later 
9e99 2b				dec hl 
9e9a 3e 00			ld a,0 
9e9c 77				ld (hl), a 
9e9d 23				inc hl 
9e9e 18 e7			jr .cptoken2 
9ea0				 
9ea0			 
9ea0			.cptokenstr2: 
9ea0				; skip all white space until either eol (because forgot to term) or end double quote 
9ea0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ea0				;inc hl ; skip current double quote 
9ea0 7e				ld a,(hl) 
9ea1 23				inc hl 
9ea2 fe 22			cp '"' 
9ea4 28 e1			jr z, .cptoken2 
9ea6 fe 7f			cp FORTH_END_BUFFER 
9ea8 28 0c			jr z, .cptokendone2 
9eaa fe 00			cp 0 
9eac 28 08			jr z, .cptokendone2 
9eae fe 20			cp ' ' 
9eb0 28 02			jr z, .cptmp2 
9eb2 18 ec			jr .cptokenstr2 
9eb4			 
9eb4			.cptmp2:	; we have a space so change to zero term for dict match later 
9eb4				;dec hl 
9eb4				;ld a,"-"	; TODO remove this when working 
9eb4				;ld (hl), a 
9eb4				;inc hl 
9eb4 18 ea			jr .cptokenstr2 
9eb6			 
9eb6			.cptokendone2: 
9eb6				;inc hl 
9eb6 3e 7f			ld a, FORTH_END_BUFFER 
9eb8 77				ld (hl),a 
9eb9 23				inc hl 
9eba 3e 21			ld a, '!' 
9ebc 77				ld (hl),a 
9ebd			 
9ebd 2a bc e5			ld hl,(os_tok_ptr) 
9ec0			         
9ec0			if DEBUG_FORTH_TOK 
9ec0						DMARK "Tc1" 
9ec0				CALLMONITOR 
9ec0			endif 
9ec0			 
9ec0				; push exec string to top of return stack 
9ec0				FORTH_RSP_NEXT 
9ec0 cd 2c 9a			call macro_forth_rsp_next 
9ec3				endm 
# End of macro FORTH_RSP_NEXT
9ec3 c9				ret 
9ec4			 
9ec4			; Another go at the parser need to simplify the process 
9ec4			 
9ec4			forthparse: 
9ec4			 
9ec4			; 
9ec4			; line parse: 
9ec4			;       parse raw input buffer 
9ec4			;       tokenise the words 
9ec4			;       malloc new copy (for looping etc) 
9ec4			;       copy to malloc + current pc in line to start of string and add line term 
9ec4			;       save on new rsp 
9ec4			; 
9ec4			 
9ec4			; hl to point to the line to tokenise 
9ec4			 
9ec4			;	push hl 
9ec4 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ec7			 
9ec7			;	ld a,0		; string term on input 
9ec7			;	call strlent 
9ec7			 
9ec7			;	ld (os_tok_len), hl	 ; save string length 
9ec7			 
9ec7			;if DEBUG_FORTH_TOK 
9ec7			;	ex de,hl		 
9ec7			;endif 
9ec7			 
9ec7			;	pop hl 		; get back string pointer 
9ec7			 
9ec7			if DEBUG_FORTH_TOK 
9ec7						DMARK "TOK" 
9ec7				CALLMONITOR 
9ec7			endif 
9ec7 7e			.ptoken2:    ld a,(hl) 
9ec8 23				inc hl 
9ec9 fe 7f			cp FORTH_END_BUFFER 
9ecb 28 29			jr z, .ptokendone2 
9ecd fe 00			cp 0 
9ecf 28 25			jr z, .ptokendone2 
9ed1 fe 22			cp '"' 
9ed3 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9ed5 fe 20			cp ' ' 
9ed7 20 ee			jr nz,  .ptoken2 
9ed9			 
9ed9			; TODO consume comments held between ( and ) 
9ed9			 
9ed9				; we have a space so change to zero term for dict match later 
9ed9 2b				dec hl 
9eda 3e 00			ld a,0 
9edc 77				ld (hl), a 
9edd 23				inc hl 
9ede 18 e7			jr .ptoken2 
9ee0				 
9ee0			 
9ee0			.ptokenstr2: 
9ee0				; skip all white space until either eol (because forgot to term) or end double quote 
9ee0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ee0				;inc hl ; skip current double quote 
9ee0 7e				ld a,(hl) 
9ee1 23				inc hl 
9ee2 fe 22			cp '"' 
9ee4 28 e1			jr z, .ptoken2 
9ee6 fe 7f			cp FORTH_END_BUFFER 
9ee8 28 0c			jr z, .ptokendone2 
9eea fe 00			cp 0 
9eec 28 08			jr z, .ptokendone2 
9eee fe 20			cp ' ' 
9ef0 28 02			jr z, .ptmp2 
9ef2 18 ec			jr .ptokenstr2 
9ef4			 
9ef4			.ptmp2:	; we have a space so change to zero term for dict match later 
9ef4				;dec hl 
9ef4				;ld a,"-"	; TODO remove this when working 
9ef4				;ld (hl), a 
9ef4				;inc hl 
9ef4 18 ea			jr .ptokenstr2 
9ef6			 
9ef6			.ptokendone2: 
9ef6				;inc hl 
9ef6 3e 7f			ld a, FORTH_END_BUFFER 
9ef8 77				ld (hl),a 
9ef9 23				inc hl 
9efa 3e 21			ld a, '!' 
9efc 77				ld (hl),a 
9efd			 
9efd 2a bc e5			ld hl,(os_tok_ptr) 
9f00			         
9f00			if DEBUG_FORTH_TOK 
9f00						DMARK "TK1" 
9f00				CALLMONITOR 
9f00			endif 
9f00			 
9f00				; push exec string to top of return stack 
9f00				FORTH_RSP_NEXT 
9f00 cd 2c 9a			call macro_forth_rsp_next 
9f03				endm 
# End of macro FORTH_RSP_NEXT
9f03 c9				ret 
9f04			 
9f04			; 
9f04			;	; malloc size + buffer pointer + if is loop flag 
9f04			;	ld hl,(os_tok_len) 		 ; get string length 
9f04			; 
9f04			;	ld a,l 
9f04			; 
9f04			;	cp 0			; we dont want to use a null string 
9f04			;	ret z 
9f04			; 
9f04			;;	add 3    ; prefix malloc with buffer for current word ptr 
9f04			; 
9f04			;	add 5     ; TODO when certain not over writing memory remove 
9f04			; 
9f04			;		 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKE" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	ld l,a 
9f04			;	ld h,0 
9f04			;;	push hl   ; save required space for the copy later 
9f04			;	call malloc 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKM" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			;	if DEBUG_FORTH_MALLOC_GUARD 
9f04			;		push af 
9f04			;		call ishlzero 
9f04			;;		ld a, l 
9f04			;;		add h 
9f04			;;		cp 0 
9f04			;		pop af 
9f04			;		 
9f04			;		call z,malloc_error 
9f04			;	endif 
9f04			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9f04			; 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKR" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	FORTH_RSP_NEXT 
9f04			; 
9f04			;	;inc hl	 ; go past current buffer pointer 
9f04			;	;inc hl 
9f04			;	;inc hl   ; and past if loop flag 
9f04			;		; TODO Need to set flag  
9f04			; 
9f04			;	 
9f04			;	 
9f04			;	ex de,hl	; malloc is dest 
9f04			;	ld hl, (os_tok_len) 
9f04			;;	pop bc 
9f04			;	ld c, l                
9f04			;	ld b,0 
9f04			;	ld hl, (os_tok_ptr) 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKT" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	; do str cpy 
9f04			; 
9f04			;	ldir      ; copy byte in hl to de 
9f04			; 
9f04			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			; 
9f04			;			DMARK "TKY" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			;	;ld a,0 
9f04			;	;ld a,FORTH_END_BUFFER 
9f04			;	ex de, hl 
9f04			;	;dec hl			 ; go back over the space delim at the end of word 
9f04			;	;ld (hl),a 
9f04			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9f04			;	ld a,FORTH_END_BUFFER 
9f04			;	ld (hl),a 
9f04			;	inc hl 
9f04			;	ld a,FORTH_END_BUFFER 
9f04			;	ld (hl),a 
9f04			; 
9f04			;	; init the malloc area data 
9f04			;	; set pc for in current area 
9f04			;	;ld hl, (os_tok_malloc) 
9f04			;	;inc hl 
9f04			;	;inc hl 
9f04			;	;inc hl 
9f04			;	;ex de,hl 
9f04			;	;ld hl, (os_tok_malloc) 
9f04			;	;ld (hl),e 
9f04			;	;inc hl 
9f04			;	;ld (hl),d 
9f04			; 
9f04			; 
9f04			;	ld hl,(os_tok_malloc) 
9f04			;if DEBUG_FORTH_PARSE_KEY 
9f04			;			DMARK "TKU" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	ret 
9f04			 
9f04			forthexec: 
9f04			 
9f04			; line exec: 
9f04			; forth parser 
9f04			 
9f04			; 
9f04			;       get current exec line on rsp 
9f04			 
9f04				FORTH_RSP_TOS 
9f04 cd 43 9a			call macro_forth_rsp_tos 
9f07				endm 
# End of macro FORTH_RSP_TOS
9f07			 
9f07			;       restore current pc - hl points to malloc of data 
9f07			 
9f07				;ld e, (hl) 
9f07				;inc hl 
9f07				;ld d, (hl) 
9f07				;ex de,hl 
9f07			 
9f07			 
9f07			exec1: 
9f07 22 bc e5			ld (os_tok_ptr), hl 
9f0a			 
9f0a				; copy our PC to working vars  
9f0a 22 3a ea			ld (cli_ptr), hl 
9f0d 22 38 ea			ld (cli_origptr), hl 
9f10			 
9f10 7e				ld a,(hl) 
9f11 fe 7f			cp FORTH_END_BUFFER 
9f13 c8				ret z 
9f14			 
9f14				; skip any nulls 
9f14			 
9f14 fe 00			cp 0 
9f16 20 03			jr nz, .execword 
9f18 23				inc hl 
9f19 18 ec			jr exec1 
9f1b			 
9f1b			 
9f1b			.execword: 
9f1b			 
9f1b			 
9f1b			 
9f1b			if DEBUG_FORTH_PARSE_KEY 
9f1b						DMARK "KYQ" 
9f1b				CALLMONITOR 
9f1b			endif 
9f1b			;       while at start of word: 
9f1b			; get start of dict (in user area first) 
9f1b			 
9f1b 21 7f dd		ld hl, baseram 
9f1e			;ld hl, sysdict 
9f1e 22 3c ea		ld (cli_nextword),hl 
9f21			;           match word at pc 
9f21			;           exec word 
9f21			;           or push to dsp 
9f21			;           forward to next token 
9f21			;           if line term pop rsp and exit 
9f21			;        
9f21			 
9f21			if DEBUG_FORTH_PARSE_KEY 
9f21						DMARK "KYq" 
9f21				CALLMONITOR 
9f21			endif 
9f21			 
9f21			; 
9f21			; word comp 
9f21			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f21			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f21			;    move to start of word  
9f21			;    compare word to cli_token 
9f21			 
9f21			.execpnword:	; HL at start of a word in the dictionary to check 
9f21			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
9f21			;	ld (cli_ptr), hl 
9f21			 
9f21 2a 3c ea			ld hl,(cli_nextword) 
9f24			 
9f24 cd c7 9f			call forth_tok_next 
9f27			; tok next start here 
9f27			;	; TODO skip compiled symbol for now 
9f27			;	inc hl 
9f27			; 
9f27			;	; save pointer to next word 
9f27			; 
9f27			;	; hl now points to the address of the next word pointer  
9f27			;	ld e, (hl) 
9f27			;	inc hl 
9f27			;	ld d, (hl) 
9f27			;	inc l 
9f27			; 
9f27			;	ex de,hl 
9f27			;if DEBUG_FORTH_PARSE_NEXTWORD 
9f27			;	push bc 
9f27			;	ld bc, (cli_nextword) 
9f27			;			DMARK "NXW" 
9f27			;	CALLMONITOR 
9f27			;	pop bc 
9f27			;endif 
9f27			; tok next end here 
9f27 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f2a eb				ex de, hl 
9f2b			 
9f2b			 
9f2b				; save the pointer of the current token - 1 to check against 
9f2b				 
9f2b 22 40 ea			ld (cli_token), hl   
9f2e				; TODO maybe remove below save if no debug 
9f2e				; save token string ptr for any debug later 
9f2e 23				inc hl  
9f2f 22 42 ea			ld (cli_origtoken), hl 
9f32 2b				dec hl 
9f33				; save pointer to the start of the next dictionay word 
9f33 7e				ld a,(hl)   ; get string length 
9f34 47				ld b,a 
9f35			.execpnwordinc:  
9f35 23				inc hl 
9f36 10 fd			djnz .execpnwordinc 
9f38 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
9f3b			 
9f3b				; now check the word token against the string being parsed 
9f3b			 
9f3b 2a 40 ea			ld hl,(cli_token) 
9f3e 23				inc hl     ; skip string length (use zero term instead to end) 
9f3f 22 40 ea			ld (cli_token), hl 
9f42			 
9f42			if DEBUG_FORTH_PARSE_KEY 
9f42						DMARK "KY2" 
9f42			endif 
9f42			if DEBUG_FORTH_PARSE_EXEC 
9f42				; see if disabled 
9f42			 
9f42			;	ld a, (os_view_disable) 
9f42			;	cp '*' 
9f42				ld a, (debug_vector) 
9f42				cp $c9   ; RET  
9f42				jr z, .skip 
9f42			 
9f42				push hl 
9f42				push hl 
9f42				call clear_display 
9f42				ld de, .compword 
9f42				ld a, display_row_1 
9f42				call str_at_display 
9f42				pop de 
9f42				ld a, display_row_2 
9f42				call str_at_display 
9f42				ld hl,(cli_ptr) 
9f42				ld a,(hl) 
9f42			        ld hl, os_word_scratch 
9f42				ld (hl),a 
9f42				ld a,0 
9f42				inc hl 
9f42				ld (hl),a 	 
9f42				ld de, os_word_scratch 
9f42				ld a, display_row_2+10 
9f42				call str_at_display 
9f42				call update_display 
9f42				ld a, 100 
9f42				call aDelayInMS 
9f42				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f42				call delay250ms 
9f42				endif 
9f42				pop hl 
9f42			.skip:  
9f42			endif	 
9f42			.execpnchar:    ; compare char between token and string to parse 
9f42			 
9f42			if DEBUG_FORTH_PARSE_KEY 
9f42						DMARK "Ky3" 
9f42			endif 
9f42			if DEBUG_FORTH_PARSE_EXEC 
9f42				; see if disabled 
9f42			 
9f42			;	ld a, (os_view_disable) 
9f42			;	cp '*' 
9f42				ld a, (debug_vector) 
9f42				cp $C9  ; RET 
9f42				jr z, .skip2 
9f42			 
9f42			;	call clear_display 
9f42			ld hl,(cli_token) 
9f42			ld a,(hl) 
9f42			ld (os_word_scratch),a 
9f42				ld hl,(cli_ptr) 
9f42			ld a,(hl) 
9f42				ld (os_word_scratch+1),a 
9f42				ld a,0 
9f42				ld (os_word_scratch+2),a 
9f42				ld de,os_word_scratch 
9f42				ld a,display_row_4 
9f42				call str_at_display 
9f42				call update_display 
9f42			.skip2:  
9f42			endif 
9f42 2a 40 ea			ld hl,(cli_token) 
9f45 7e				ld a, (hl)	 ; char in word token 
9f46 23				inc hl 		; move to next char 
9f47 22 40 ea			ld (cli_token), hl ; and save it 
9f4a 47				ld b,a 
9f4b			 
9f4b 2a 3a ea			ld hl,(cli_ptr) ;	get the char from the string to parse 
9f4e 7e				ld a,(hl) 
9f4f 23				inc hl 
9f50 22 3a ea			ld (cli_ptr), hl		; move to next char 
9f53 cd 47 90			call toUpper 		; make sure the input string matches case 
9f56			 
9f56			if DEBUG_FORTH_PARSE 
9f56			endif 
9f56			 
9f56				; input stream end of token is a space so get rid of it 
9f56			 
9f56			;	cp ' ' 
9f56			;	jr nz, .pnskipspace 
9f56			; 
9f56			;	ld a, 0		; make same term as word token term 
9f56			; 
9f56			;.pnskipspace: 
9f56			 
9f56			if DEBUG_FORTH_PARSE_KEY 
9f56						DMARK "KY7" 
9f56			endif 
9f56 b8				cp b 
9f57 c2 6d 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9f5a				 
9f5a			;    if same 
9f5a			;       scan for string terms 0 for token and 32 for input 
9f5a			 
9f5a				 
9f5a			if DEBUG_FORTH_PARSE_KEY 
9f5a						DMARK "KY8" 
9f5a			endif 
9f5a			 
9f5a 80				add b			 
9f5b fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9f5d							; TODO need to make sure last word in zero term string is accounted for 
9f5d 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
9f5f			 
9f5f			 
9f5f				; at end of both strings so both are exact match 
9f5f			 
9f5f			;       skip ptr for next word 
9f5f			 
9f5f 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
9f62 23				inc hl			 ; at next char 
9f63 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
9f66 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f69				 
9f69				 
9f69			if DEBUG_FORTH_PARSE_KEY 
9f69						DMARK "KY3" 
9f69			endif 
9f69			 
9f69			 
9f69			 
9f69			;       exec code block 
9f69			if DEBUG_FORTH_JP 
9f69				call clear_display 
9f69				call update_display 
9f69				call delay1s 
9f69				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f69				ld a,h 
9f69				ld hl, os_word_scratch 
9f69				call hexout 
9f69				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f69				ld a,l 
9f69				ld hl, os_word_scratch+2 
9f69				call hexout 
9f69				ld hl, os_word_scratch+4 
9f69				ld a,0 
9f69				ld (hl),a 
9f69				ld de,os_word_scratch 
9f69				call str_at_display 
9f69					ld a, display_row_2 
9f69					call str_at_display 
9f69				ld de, (cli_origtoken) 
9f69				ld a, display_row_1+10 
9f69					call str_at_display 
9f69			 
9f69				ld a,display_row_1 
9f69				ld de, .foundword 
9f69				ld a, display_row_3 
9f69				call str_at_display 
9f69				call update_display 
9f69				call delay1s 
9f69				call delay1s 
9f69				call delay1s 
9f69			endif 
9f69			 
9f69			if DEBUG_FORTH_PARSE_KEY 
9f69						DMARK "KYj" 
9f69			endif 
9f69				; TODO save the word pointer in this exec 
9f69			 
9f69 2a 3e ea			ld hl,(cli_execword) 
9f6c e9				jp (hl) 
9f6d			 
9f6d			 
9f6d			;    if not same 
9f6d			;	scan for zero term 
9f6d			;	get ptr for next word 
9f6d			;	goto word comp 
9f6d			 
9f6d			.execpnskipword:	; get pointer to next word 
9f6d 2a 3c ea			ld hl,(cli_nextword) 
9f70			 
9f70 7e				ld a,(hl) 
9f71 fe 00			cp WORD_SYS_END 
9f73			;	cp 0 
9f73 28 09			jr z, .execendofdict			 ; at end of words 
9f75			 
9f75			if DEBUG_FORTH_PARSE_KEY 
9f75						DMARK "KY4" 
9f75			endif 
9f75			if DEBUG_FORTH_PARSE_EXEC 
9f75			 
9f75				; see if disabled 
9f75			 
9f75			;	ld a, (os_view_disable) 
9f75			;	cp '*' 
9f75				ld a,(debug_vector) 
9f75				cp $c9   ; RET 
9f75				jr z, .noskip 
9f75			 
9f75			 
9f75				ld de, .nowordfound 
9f75				ld a, display_row_3 
9f75				call str_at_display 
9f75				call update_display 
9f75				ld a, 100 
9f75				call aDelayInMS 
9f75				 
9f75				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f75					call delay250ms 
9f75				endif 
9f75			.noskip:  
9f75			 
9f75			endif	 
9f75			 
9f75 2a 38 ea			ld hl,(cli_origptr) 
9f78 22 3a ea			ld (cli_ptr),hl 
9f7b			 
9f7b			if DEBUG_FORTH_PARSE_KEY 
9f7b						DMARK "KY5" 
9f7b			endif 
9f7b c3 21 9f			jp .execpnword			; else go to next word 
9f7e			 
9f7e			.execendofdict:  
9f7e			 
9f7e			if DEBUG_FORTH_PARSE_KEY 
9f7e						DMARK "KYe" 
9f7e			endif 
9f7e			if DEBUG_FORTH_PARSE_EXEC 
9f7e				; see if disabled 
9f7e			 
9f7e			;	ld a, (os_view_disable) 
9f7e			;	cp '*' 
9f7e				ld a,(debug_vector) 
9f7e				cp $c9   ; ret 
9f7e				jr z, .ispskip 
9f7e			 
9f7e				call clear_display 
9f7e				call update_display 
9f7e				call delay1s 
9f7e				ld de, (cli_origptr) 
9f7e				ld a, display_row_1 
9f7e				call str_at_display 
9f7e				 
9f7e				ld de, .enddict 
9f7e				ld a, display_row_3 
9f7e				call str_at_display 
9f7e				call update_display 
9f7e				ld a, 100 
9f7e				call aDelayInMS 
9f7e				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f7e				call delay1s 
9f7e				call delay1s 
9f7e				call delay1s 
9f7e				endif 
9f7e			.ispskip:  
9f7e				 
9f7e			endif	 
9f7e			 
9f7e			 
9f7e			 
9f7e				; if the word is not a keyword then must be a literal so push it to stack 
9f7e			 
9f7e			; push token to stack to end of word 
9f7e			 
9f7e				STACKFRAME ON $1efe $2f9f 
9f7e				if DEBUG_STACK_IMB 
9f7e					if ON 
9f7e						exx 
9f7e						ld de, $1efe 
9f7e						ld a, d 
9f7e						ld hl, curframe 
9f7e						call hexout 
9f7e						ld a, e 
9f7e						ld hl, curframe+2 
9f7e						call hexout 
9f7e						ld hl, $1efe 
9f7e						push hl 
9f7e						ld hl, $2f9f 
9f7e						push hl 
9f7e						exx 
9f7e					endif 
9f7e				endif 
9f7e			endm 
# End of macro STACKFRAME
9f7e			 
9f7e 2a bc e5		ld hl,(os_tok_ptr) 
9f81 cd ee 9b		call forth_apush 
9f84			 
9f84				STACKFRAMECHK ON $1efe $2f9f 
9f84				if DEBUG_STACK_IMB 
9f84					if ON 
9f84						exx 
9f84						ld hl, $2f9f 
9f84						pop de   ; $2f9f 
9f84						call cmp16 
9f84						jr nz, .spnosame 
9f84						ld hl, $1efe 
9f84						pop de   ; $1efe 
9f84						call cmp16 
9f84						jr z, .spfrsame 
9f84						.spnosame: call showsperror 
9f84						.spfrsame: nop 
9f84						exx 
9f84					endif 
9f84				endif 
9f84			endm 
# End of macro STACKFRAMECHK
9f84			 
9f84			execnext: 
9f84			 
9f84			if DEBUG_FORTH_PARSE_KEY 
9f84						DMARK "KY>" 
9f84			endif 
9f84			; move past token to next word 
9f84			 
9f84 2a bc e5		ld hl, (os_tok_ptr) 
9f87 3e 00		ld a, 0 
9f89 01 ff 00		ld bc, 255     ; input buffer size 
9f8c ed b1		cpir 
9f8e			 
9f8e			if DEBUG_FORTH_PARSE_KEY 
9f8e						DMARK "KY!" 
9f8e				CALLMONITOR 
9f8e			endif	 
9f8e			; TODO this might place hl on the null, so will need to forward on??? 
9f8e			;inc hl   ; see if this gets onto the next item 
9f8e			 
9f8e			 
9f8e			; TODO pass a pointer to the buffer to push 
9f8e			; TODO call function to push 
9f8e			 
9f8e			; look for end of input 
9f8e			 
9f8e			;inc hl 
9f8e			;ld a,(hl) 
9f8e			;cp FORTH_END_BUFFER 
9f8e			;ret z 
9f8e			 
9f8e			 
9f8e c3 07 9f		jp exec1 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			findnexttok: 
9f91			 
9f91				; hl is pointer to move 
9f91				; de is the token to locate 
9f91			 
9f91					if DEBUG_FORTH 
9f91						DMARK "NTK" 
9f91						CALLMONITOR 
9f91					endif 
9f91 d5				push de 
9f92			 
9f92			.fnt1:	 
9f92				; find first char of token to locate 
9f92			 
9f92 1a				ld a, (de) 
9f93 4f				ld c,a 
9f94 7e				ld a,(hl) 
9f95 cd 47 90			call toUpper 
9f98					if DEBUG_FORTH 
9f98						DMARK "NT1" 
9f98						CALLMONITOR 
9f98					endif 
9f98 b9				cp c 
9f99			 
9f99 28 03			jr z, .fnt2cmpmorefirst	 
9f9b			 
9f9b				; first char not found move to next char 
9f9b			 
9f9b 23				inc hl 
9f9c 18 f4			jr .fnt1 
9f9e			 
9f9e			.fnt2cmpmorefirst:	 
9f9e				; first char of token found.  
9f9e			 
9f9e e5				push hl     ; save start of token just in case it is the right one 
9f9f d9				exx 
9fa0 e1				pop hl        ; save it to hl' 
9fa1 d9				exx 
9fa2			 
9fa2			 
9fa2			.fnt2cmpmore:	 
9fa2				; compare the rest 
9fa2				 
9fa2 23				inc hl 
9fa3 13				inc de 
9fa4				 
9fa4 1a				ld a, (de) 
9fa5 4f				ld c,a 
9fa6 7e				ld a,(hl) 
9fa7 cd 47 90			call toUpper 
9faa			 
9faa					if DEBUG_FORTH 
9faa						DMARK "NT2" 
9faa						CALLMONITOR 
9faa					endif 
9faa				; c has the token to find char 
9faa				; a has the mem to scan char 
9faa			 
9faa b9				cp c 
9fab 28 04			jr z,.fntmatch1 
9fad			 
9fad				; they are not the same 
9fad			 
9fad					if DEBUG_FORTH 
9fad						DMARK "NT3" 
9fad						CALLMONITOR 
9fad					endif 
9fad d1				pop de	; reset de token to look for 
9fae d5				push de 
9faf 18 e1			jr .fnt1 
9fb1				 
9fb1			.fntmatch1: 
9fb1			 
9fb1				; is the same char a null which means we might have a full hit? 
9fb1					if DEBUG_FORTH 
9fb1						DMARK "NT4" 
9fb1						CALLMONITOR 
9fb1					endif 
9fb1			 
9fb1 fe 00			cp 0 
9fb3 28 0b			jr z, .fntmatchyes 
9fb5			 
9fb5				; are we at the end of the token to find? 
9fb5			 
9fb5					if DEBUG_FORTH 
9fb5						DMARK "NT5" 
9fb5						CALLMONITOR 
9fb5					endif 
9fb5 3e 00			ld a, 0 
9fb7 b9				cp c 
9fb8			 
9fb8 c2 a2 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9fbb			 
9fbb					if DEBUG_FORTH 
9fbb						DMARK "NT6" 
9fbb						CALLMONITOR 
9fbb					endif 
9fbb				; token to find is exhusted but no match to stream 
9fbb			 
9fbb				; restore tok pointer and continue on 
9fbb d1				pop de 
9fbc d5				push de 
9fbd c3 92 9f			jp .fnt1 
9fc0			 
9fc0			 
9fc0			.fntmatchyes: 
9fc0			 
9fc0				; hl now contains the end of the found token 
9fc0			 
9fc0				; get rid of saved token pointer to find 
9fc0			 
9fc0 d1				pop de 
9fc1			 
9fc1					if DEBUG_FORTH 
9fc1						DMARK "NT9" 
9fc1						CALLMONITOR 
9fc1					endif 
9fc1			 
9fc1				; hl will be on the null term so forward on 
9fc1			 
9fc1				; get back the saved start of the token 
9fc1			 
9fc1 d9				exx 
9fc2 e5				push hl     ; save start of token just in case it is the right one 
9fc3 d9				exx 
9fc4 e1				pop hl        ; save it to hl 
9fc5			 
9fc5 c9				ret 
9fc6			 
9fc6			 
9fc6			; LIST needs to find a specific token   
9fc6			; FORGET needs to find a spefici token 
9fc6			 
9fc6			; SAVE needs to find all tokens by flag 
9fc6			; WORDS just needs to scan through all  by flag 
9fc6			; UWORDS needs to scan through all by flag 
9fc6			 
9fc6			 
9fc6			; given hl as pointer to start of dict look up string 
9fc6			; return hl as pointer to start of word block 
9fc6			; or 0 if not found 
9fc6			 
9fc6			forth_find_tok: 
9fc6 c9				ret 
9fc7			 
9fc7			; given hl as pointer to dict structure 
9fc7			; move to the next dict block structure 
9fc7			 
9fc7			forth_tok_next: 
9fc7				; hl now points to the address of the next word pointer  
9fc7				; TODO skip compiled symbol for now 
9fc7			;	push de 
9fc7 23				inc hl 
9fc8 5e				ld e, (hl) 
9fc9 23				inc hl 
9fca 56				ld d, (hl) 
9fcb 23				inc hl 
9fcc			 
9fcc eb				ex de,hl 
9fcd			if DEBUG_FORTH_PARSE_NEXTWORD 
9fcd				push bc 
9fcd				ld bc, (cli_nextword) 
9fcd						DMARK "NXW" 
9fcd				CALLMONITOR 
9fcd				pop bc 
9fcd			endif 
9fcd			;	pop de	 
9fcd c9				ret 
9fce			 
9fce			 
9fce			 
9fce			; eof 
# End of file forth_parserv5.asm
9fce				include "forth_wordsv4.asm" 
9fce			 
9fce			; the core word dictionary v4 
9fce			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9fce			 
9fce			; this is a linked list for each of the system words used 
9fce			; user defined words will follow the same format but will be in ram 
9fce			 
9fce			 
9fce			; 
9fce			; 
9fce			; define linked list: 
9fce			; 
9fce			; 1. compiled byte op code 
9fce			; 2. len of text word 
9fce			; 3. text word 
9fce			; 4. ptr to next dictionary word 
9fce			; 5. asm, calls etc for the word 
9fce			; 
9fce			;  if 1 == 0 then last word in dict  
9fce			;   
9fce			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9fce			;  
9fce			;  
9fce			; create basic standard set of words 
9fce			; 
9fce			;  
9fce			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9fce			; 2DUP 2DROP 2SWAP  
9fce			; @ C@ - get byte  
9fce			; ! C! - store byte 
9fce			; 0< true if less than zero 
9fce			; 0= true if zero 
9fce			; < >  
9fce			; = true if same 
9fce			; variables 
9fce			 
9fce			 
9fce			; Hardware specific words I may need 
9fce			; 
9fce			; IN OUT  
9fce			; calls to key util functions 
9fce			; calls to hardward abstraction stuff 
9fce			; easy control of frame buffers and lcd i/o 
9fce			; keyboard  
9fce			 
9fce			 
9fce			;DICT: macro 
9fce			; op_code, len, word, next 
9fce			;    word: 
9fce			;    db op_code 
9fce			;    ds word zero term 
9fce			;    dw next 
9fce			;    endm 
9fce			 
9fce			 
9fce			 
9fce			 
9fce			; op code 1 is a flag for user define words which are to be handled differently 
9fce			 
9fce			 
9fce			; 
9fce			; 
9fce			;    TODO on entry to a word this should be the expected environment 
9fce			;    hl - tos value if number then held, if string this is the ptr 
9fce			;    de -  
9fce			 
9fce			 
9fce			; opcode ranges 
9fce			; 0 - end of word dict 
9fce			; 255 - user define words 
9fce			 
9fce			sysdict: 
9fce			include "forth_opcodes.asm" 
9fce			; op codes for forth keywords 
9fce			; free to use code 0  
9fce				OPCODE_HEAP: equ  1 
9fce				OPCODE_EXEC: equ 2 
9fce				OPCODE_DUP: equ 3 
9fce				OPCODE_SWAP: equ 4 
9fce				OPCODE_COLN: equ 5 
9fce				OPCODE_SCOLN: equ 6 
9fce				OPCODE_DROP: equ 7 
9fce				OPCODE_DUP2: equ 8 
9fce				OPCODE_DROP2: equ 9 
9fce				OPCODE_SWAP2: equ 10 
9fce				OPCODE_AT: equ 11 
9fce				OPCODE_CAT: equ 12 
9fce				OPCODE_BANG: equ 13 
9fce				OPCODE_CBANG: equ 14 
9fce				OPCODE_SCALL: equ 15 
9fce				OPCODE_DEPTH: equ 16 
9fce				OPCODE_OVER: equ 17 
9fce				OPCODE_PAUSE: equ 18 
9fce				OPCODE_PAUSES: equ 19 
9fce				OPCODE_ROT: equ 20 
9fce			;free to reuse	OPCODE_WORDS: equ 21 
9fce			        OPCODE_NOT: equ 21 
9fce				OPCODE_UWORDS: equ 22 
9fce				OPCODE_BP: equ 23 
9fce				OPCODE_MONITOR: equ 24  
9fce				OPCODE_MALLOC: equ 25 
9fce				OPCODE_FREE: equ 26 
9fce				OPCODE_LIST: equ 27 
9fce				OPCODE_FORGET: equ 28 
9fce				OPCODE_NOP: equ 29 
9fce				OPCODE_COMO: equ 30 
9fce				OPCODE_COMC: equ 31 
9fce			;free to reuse	OPCODE_ENDCORE: equ 32 
9fce				OPCODE_AFTERSOUND: equ 33 
9fce				OPCODE_GP2: equ 34 
9fce				OPCODE_GP3: equ 35 
9fce				OPCODE_GP4: equ 36 
9fce				OPCODE_SIN: equ 37 
9fce				OPCODE_SOUT: equ 38 
9fce				OPCODE_SPIO: equ 39 
9fce				OPCODE_SPICEH: equ 40 
9fce				OPCODE_SPIOb: equ 41 
9fce				OPCODE_SPII: equ 42 
9fce				OPCODE_SESEL: equ 43 
9fce				OPCODE_CARTDEV: equ 44 
9fce			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9fce				OPCODE_FB: equ 46 
9fce				OPCODE_EMIT: equ 47 
9fce				OPCODE_DOTH: equ 48 
9fce				OPCODE_DOTF: equ 49 
9fce				OPCODE_DOT: equ 50 
9fce				OPCODE_CLS: equ 51 
9fce				OPCODE_DRAW: equ 52 
9fce				OPCODE_DUMP: equ 53 
9fce				OPCODE_CDUMP: equ 54 
9fce				OPCODE_DAT: equ 55 
9fce				OPCODE_HOME: equ 56 
9fce				OPCODE_SPACE: equ 57 
9fce				OPCODE_SPACES: equ 58 
9fce				OPCODE_SCROLL: equ 59 
9fce				OPCODE_ATQ: equ 60 
9fce				OPCODE_AUTODSP: equ 61 
9fce				OPCODE_MENU: equ 62 
9fce			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9fce				OPCODE_THEN: equ 64 
9fce				OPCODE_ELSE: equ 65 
9fce				OPCODE_DO: equ 66 
9fce				OPCODE_LOOP: equ 67 
9fce				OPCODE_I: equ 68 
9fce				OPCODE_DLOOP: equ 69  
9fce				OPCODE_REPEAT: equ 70  
9fce				OPCODE_UNTIL: equ 71 
9fce				OPCODE_ENDFLOW: equ 72 
9fce				OPCODE_WAITK: equ 73 
9fce				OPCODE_ACCEPT: equ 74 
9fce				OPCODE_EDIT: equ 75 
9fce			;free to reuse	OPCODE_ENDKEY: equ 76 
9fce				OPCODE_LZERO: equ 77 
9fce				OPCODE_TZERO: equ 78 
9fce				OPCODE_LESS: equ 79 
9fce				OPCODE_GT: equ 80 
9fce				OPCODE_EQUAL: equ 81  
9fce			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9fce				OPCODE_NEG: equ 83 
9fce				OPCODE_DIV: equ 84 
9fce				OPCODE_MUL: equ 85 
9fce				OPCODE_MIN: equ 86 
9fce				OPCODE_MAX: equ 87 
9fce				OPCODE_RND16: equ 88 
9fce				OPCODE_RND8: equ 89 
9fce				OPCODE_RND: equ 90 
9fce			;free to reuse	OPCODE_ENDMATHS: equ 91  
9fce				OPCODE_BYNAME: equ 92 
9fce				OPCODE_DIR: equ 93 
9fce				OPCODE_SAVE: equ 94 
9fce				OPCODE_LOAD: equ 95 
9fce				OPCODE_BSAVE: equ 96 
9fce				OPCODE_BLOAD: equ 97 
9fce				OPCODE_SEO: equ 98  
9fce				OPCODE_SEI: equ 99 
9fce				OPCODE_SFREE: equ 100 
9fce				OPCODE_SIZE: equ 101 
9fce				OPCODE_CREATE: equ 102 
9fce				OPCODE_APPEND: equ 103 
9fce				OPCODE_SDEL: equ 104 
9fce				OPCODE_OPEN: equ 105 
9fce				OPCODE_READ: equ 106 
9fce				OPCODE_EOF: equ 106 
9fce				OPCODE_FORMAT: equ 107 
9fce				OPCODE_LABEL: equ 108 
9fce				OPCODE_LABELS: equ 109 
9fce			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9fce				OPCODE_UPPER: equ 111 
9fce				OPCODE_LOWER: equ 112 
9fce				OPCODE_SUBSTR: equ 113 
9fce				OPCODE_LEFT: equ 114 
9fce				OPCODE_RIGHT: equ 115 
9fce				OPCODE_STR2NUM: equ 116 
9fce				OPCODE_NUM2STR: equ 117 
9fce				OPCODE_CONCAT: equ 118 
9fce				OPCODE_FIND: equ 119 
9fce				OPCODE_LEN: equ 120 
9fce				OPCODE_CHAR: equ 121 
9fce			; free to reuse	OPCODE_STRLEN: equ 122 
9fce			; free to reuse	OPCODE_ENDSTR: equ 123 
9fce				OPCODE_V0S: equ 124 
9fce				OPCODE_V0Q: equ 125 
9fce				OPCODE_V1S: equ 126 
9fce				OPCODE_V1Q: equ 127 
9fce				OPCODE_V2S: equ 128 
9fce				OPCODE_V2Q: equ 129 
9fce				OPCODE_V3S: equ 130 
9fce				OPCODE_V3Q: equ 131 
9fce			;free to reuse	OPCODE_END: equ 132 
9fce				OPCODE_ZDUP: equ 133 
9fce			 
9fce			; eof 
# End of file forth_opcodes.asm
9fce			 
9fce			include "forth_words_core.asm" 
9fce			 
9fce			; | ## Core Words 
9fce			 
9fce			;if MALLOC_4 
9fce			 
9fce			.HEAP: 
9fce			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9fce 15				db WORD_SYS_CORE+OPCODE_HEAP             
9fcf 0d a0			dw .EXEC            
9fd1 05				db 4 + 1 
9fd2 .. 00			db "HEAP",0              
9fd7				endm 
# End of macro CWHEAD
9fd7			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9fd7			; | | u1 - Current number of bytes in the heap 
9fd7			; | | u2 - Remaining bytes left on the heap 
9fd7			; | |  
9fd7			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9fd7			 
9fd7			 
9fd7				if DEBUG_FORTH_WORDS_KEY 
9fd7					DMARK "HEP" 
9fd7 f5				push af  
9fd8 3a ec 9f			ld a, (.dmark)  
9fdb 32 65 ee			ld (debug_mark),a  
9fde 3a ed 9f			ld a, (.dmark+1)  
9fe1 32 66 ee			ld (debug_mark+1),a  
9fe4 3a ee 9f			ld a, (.dmark+2)  
9fe7 32 67 ee			ld (debug_mark+2),a  
9fea 18 03			jr .pastdmark  
9fec ..			.dmark: db "HEP"  
9fef f1			.pastdmark: pop af  
9ff0			endm  
# End of macro DMARK
9ff0					CALLMONITOR 
9ff0 cd 6f ee			call debug_vector  
9ff3				endm  
# End of macro CALLMONITOR
9ff3				endif 
9ff3 2a 89 dd			ld hl, (free_list )      
9ff6 11 8e dd			ld de, heap_start 
9ff9			 
9ff9 ed 52			sbc hl, de  
9ffb			 
9ffb cd 85 9a			call forth_push_numhl 
9ffe			 
9ffe			 
9ffe ed 5b 89 dd		ld de, (free_list )      
a002 21 96 e2			ld hl, heap_end 
a005			 
a005 ed 52			sbc hl, de 
a007			 
a007 cd 85 9a			call forth_push_numhl 
a00a				 
a00a			 
a00a				 
a00a			 
a00a			 
a00a			 
a00a				NEXTW 
a00a c3 76 9e			jp macro_next 
a00d				endm 
# End of macro NEXTW
a00d			;endif 
a00d			 
a00d			.EXEC: 
a00d			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
a00d			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
a00d			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
a00d			;; > > 
a00d			;; > >   
a00d			;	STACKFRAME OFF $5efe $5f9f 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "EXE" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	FORTH_DSP_POP 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX1" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;;	ld e,(hl) 
a00d			;;	inc hl 
a00d			;;	ld d,(hl) 
a00d			;;	ex de,hl 
a00d			; 
a00d			;;		if DEBUG_FORTH_WORDS 
a00d			;;			DMARK "EX2" 
a00d			;;			CALLMONITOR 
a00d			;;		endif 
a00d			;	push hl 
a00d			; 
a00d			;	;ld a, 0 
a00d			;	;ld a, FORTH_END_BUFFER 
a00d			;	call strlenz 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include term 
a00d			;	inc hl   ; include term 
a00d			;	ld b,0 
a00d			;	ld c,l 
a00d			;	pop hl 
a00d			;	ld de, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir 
a00d			; 
a00d			; 
a00d			;	ld hl, execscratch 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXe" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	call forthexec 
a00d			;;	call forthexec_cleanup 
a00d			;;	call forthparse 
a00d			;;	call forthexec 
a00d			; 
a00d			;	STACKFRAMECHK OFF $5efe $5f9f 
a00d			; 
a00d			;	; an immediate word so no need to process any more words 
a00d			;	ret 
a00d			;	NEXTW 
a00d			 
a00d			; dead code - old version  
a00d			;	FORTH_RSP_NEXT 
a00d			 
a00d			;  
a00d			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
a00d			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
a00d			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
a00d			;	push hl 
a00d			;	push de 
a00d			;	push bc 
a00d			; 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "EXR" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			; 
a00d			; 
a00d			;	;v5 FORTH_DSP_VALUE 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	; TODO do string type checks 
a00d			; 
a00d			;;v5	inc hl   ; skip type 
a00d			; 
a00d			;	push hl  ; source code  
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX1" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ld a, 0 
a00d			;	call strlent 
a00d			; 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			; 
a00d			;	push hl    ; size 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX2" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	call malloc 
a00d			; 
a00d			;	ex de, hl    ; de now contains malloc area 
a00d			;	pop bc   	; get byte count 
a00d			;	pop hl      ; get string to copy 
a00d			; 
a00d			;	push de     ; save malloc for free later 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir       ; duplicate string 
a00d			; 
a00d			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
a00d			;	 
a00d			;	; TODO fix the parse would be better than this...  
a00d			;	ex de, hl 
a00d			;	dec hl 
a00d			;	ld a, 0 
a00d			;	ld (hl), a 
a00d			;	dec hl 
a00d			;	ld a, ' ' 
a00d			;	ld (hl), a 
a00d			;	dec hl 
a00d			;	ld (hl), a 
a00d			; 
a00d			;	dec hl 
a00d			;	ld (hl), a 
a00d			; 
a00d			; 
a00d			;	FORTH_DSP_POP  
a00d			; 
a00d			;	pop hl     
a00d			;	push hl    ; save malloc area 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX4" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	call forthexec 
a00d			;	 
a00d			;	pop hl 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX5" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			; 
a00d			;	if FORTH_ENABLE_FREE 
a00d			;	call free 
a00d			;	endif 
a00d			; 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX6" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			; 
a00d			;	pop bc 
a00d			;	pop de 
a00d			;	pop hl 
a00d			;;	FORTH_RSP_POP	  
a00d			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
a00d			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
a00d			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
a00d			; 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX7" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			;	NEXTW 
a00d			 
a00d			;.STKEXEC: 
a00d			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
a00d			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
a00d			; 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "STX" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	ld (store_tmp1), hl    ; count 
a00d			; 
a00d			;	FORTH_DSP_POP 
a00d			;.stkexec1: 
a00d			;	ld hl, (store_tmp1)   ; count 
a00d			;	ld a, 0 
a00d			;	cp l 
a00d			;	ret z 
a00d			; 
a00d			;	dec hl 
a00d			;	ld (store_tmp1), hl    ; count 
a00d			;	 
a00d			;	FORTH_DSP_VALUEHL 
a00d			;	push hl 
a00d			;	 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXp" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	FORTH_DSP_POP 
a00d			; 
a00d			;	call strlenz 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	ld b,0 
a00d			;	ld c,l 
a00d			;	pop hl 
a00d			;	ld de, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir 
a00d			; 
a00d			; 
a00d			;	ld hl, execscratch 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXP" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	ld hl, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXx" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	call forthexec 
a00d			; 
a00d			;	jp .stkexec1 
a00d			; 
a00d			;	ret 
a00d			 
a00d			 
a00d			.DUP: 
a00d			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
a00d 17				db WORD_SYS_CORE+OPCODE_DUP             
a00e 83 a0			dw .ZDUP            
a010 04				db 3 + 1 
a011 .. 00			db "DUP",0              
a015				endm 
# End of macro CWHEAD
a015			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | TOFIX 
a015			 
a015				if DEBUG_FORTH_WORDS_KEY 
a015					DMARK "DUP" 
a015 f5				push af  
a016 3a 2a a0			ld a, (.dmark)  
a019 32 65 ee			ld (debug_mark),a  
a01c 3a 2b a0			ld a, (.dmark+1)  
a01f 32 66 ee			ld (debug_mark+1),a  
a022 3a 2c a0			ld a, (.dmark+2)  
a025 32 67 ee			ld (debug_mark+2),a  
a028 18 03			jr .pastdmark  
a02a ..			.dmark: db "DUP"  
a02d f1			.pastdmark: pop af  
a02e			endm  
# End of macro DMARK
a02e					CALLMONITOR 
a02e cd 6f ee			call debug_vector  
a031				endm  
# End of macro CALLMONITOR
a031				endif 
a031			 
a031				FORTH_DSP 
a031 cd 50 9c			call macro_forth_dsp 
a034				endm 
# End of macro FORTH_DSP
a034			 
a034 7e				ld a, (HL) 
a035 fe 01			cp DS_TYPE_STR 
a037 20 25			jr nz, .dupinum 
a039			 
a039				; push another string 
a039			 
a039				FORTH_DSP_VALUEHL     		 
a039 cd 8a 9c			call macro_dsp_valuehl 
a03c				endm 
# End of macro FORTH_DSP_VALUEHL
a03c			 
a03c			if DEBUG_FORTH_WORDS 
a03c				DMARK "DUs" 
a03c f5				push af  
a03d 3a 51 a0			ld a, (.dmark)  
a040 32 65 ee			ld (debug_mark),a  
a043 3a 52 a0			ld a, (.dmark+1)  
a046 32 66 ee			ld (debug_mark+1),a  
a049 3a 53 a0			ld a, (.dmark+2)  
a04c 32 67 ee			ld (debug_mark+2),a  
a04f 18 03			jr .pastdmark  
a051 ..			.dmark: db "DUs"  
a054 f1			.pastdmark: pop af  
a055			endm  
# End of macro DMARK
a055				CALLMONITOR 
a055 cd 6f ee			call debug_vector  
a058				endm  
# End of macro CALLMONITOR
a058			endif 
a058 cd f3 9a			call forth_push_str 
a05b			 
a05b				NEXTW 
a05b c3 76 9e			jp macro_next 
a05e				endm 
# End of macro NEXTW
a05e			 
a05e			 
a05e			.dupinum: 
a05e				 
a05e			 
a05e			 
a05e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a05e cd 8a 9c			call macro_dsp_valuehl 
a061				endm 
# End of macro FORTH_DSP_VALUEHL
a061			 
a061			; TODO add floating point number detection 
a061			 
a061			if DEBUG_FORTH_WORDS 
a061				DMARK "DUi" 
a061 f5				push af  
a062 3a 76 a0			ld a, (.dmark)  
a065 32 65 ee			ld (debug_mark),a  
a068 3a 77 a0			ld a, (.dmark+1)  
a06b 32 66 ee			ld (debug_mark+1),a  
a06e 3a 78 a0			ld a, (.dmark+2)  
a071 32 67 ee			ld (debug_mark+2),a  
a074 18 03			jr .pastdmark  
a076 ..			.dmark: db "DUi"  
a079 f1			.pastdmark: pop af  
a07a			endm  
# End of macro DMARK
a07a				CALLMONITOR 
a07a cd 6f ee			call debug_vector  
a07d				endm  
# End of macro CALLMONITOR
a07d			endif 
a07d			 
a07d cd 85 9a			call forth_push_numhl 
a080				NEXTW 
a080 c3 76 9e			jp macro_next 
a083				endm 
# End of macro NEXTW
a083			.ZDUP: 
a083			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a083 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a084 bb a0			dw .SWAP            
a086 05				db 4 + 1 
a087 .. 00			db "?DUP",0              
a08c				endm 
# End of macro CWHEAD
a08c			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | TOFIX 
a08c			 
a08c				if DEBUG_FORTH_WORDS_KEY 
a08c					DMARK "qDU" 
a08c f5				push af  
a08d 3a a1 a0			ld a, (.dmark)  
a090 32 65 ee			ld (debug_mark),a  
a093 3a a2 a0			ld a, (.dmark+1)  
a096 32 66 ee			ld (debug_mark+1),a  
a099 3a a3 a0			ld a, (.dmark+2)  
a09c 32 67 ee			ld (debug_mark+2),a  
a09f 18 03			jr .pastdmark  
a0a1 ..			.dmark: db "qDU"  
a0a4 f1			.pastdmark: pop af  
a0a5			endm  
# End of macro DMARK
a0a5					CALLMONITOR 
a0a5 cd 6f ee			call debug_vector  
a0a8				endm  
# End of macro CALLMONITOR
a0a8				endif 
a0a8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a0a8 cd 8a 9c			call macro_dsp_valuehl 
a0ab				endm 
# End of macro FORTH_DSP_VALUEHL
a0ab			 
a0ab e5				push hl 
a0ac			 
a0ac				; is it a zero? 
a0ac			 
a0ac 3e 00			ld a, 0 
a0ae 84				add h 
a0af 85				add l 
a0b0			 
a0b0 e1				pop hl 
a0b1			 
a0b1 fe 00			cp 0 
a0b3 28 03			jr z, .dup2orig 
a0b5			 
a0b5			 
a0b5 cd 85 9a			call forth_push_numhl 
a0b8			 
a0b8			 
a0b8			; TODO add floating point number detection 
a0b8			 
a0b8			.dup2orig: 
a0b8			 
a0b8				NEXTW 
a0b8 c3 76 9e			jp macro_next 
a0bb				endm 
# End of macro NEXTW
a0bb			.SWAP: 
a0bb			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a0bb 18				db WORD_SYS_CORE+OPCODE_SWAP             
a0bc fa a0			dw .COLN            
a0be 05				db 4 + 1 
a0bf .. 00			db "SWAP",0              
a0c4				endm 
# End of macro CWHEAD
a0c4			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | TOFIX 
a0c4				if DEBUG_FORTH_WORDS_KEY 
a0c4					DMARK "SWP" 
a0c4 f5				push af  
a0c5 3a d9 a0			ld a, (.dmark)  
a0c8 32 65 ee			ld (debug_mark),a  
a0cb 3a da a0			ld a, (.dmark+1)  
a0ce 32 66 ee			ld (debug_mark+1),a  
a0d1 3a db a0			ld a, (.dmark+2)  
a0d4 32 67 ee			ld (debug_mark+2),a  
a0d7 18 03			jr .pastdmark  
a0d9 ..			.dmark: db "SWP"  
a0dc f1			.pastdmark: pop af  
a0dd			endm  
# End of macro DMARK
a0dd					CALLMONITOR 
a0dd cd 6f ee			call debug_vector  
a0e0				endm  
# End of macro CALLMONITOR
a0e0				endif 
a0e0			 
a0e0			; TODO Use os stack swap memory 
a0e0				FORTH_DSP_VALUEHL 
a0e0 cd 8a 9c			call macro_dsp_valuehl 
a0e3				endm 
# End of macro FORTH_DSP_VALUEHL
a0e3 e5				push hl     ; w2 
a0e4			 
a0e4				FORTH_DSP_POP 
a0e4 cd 42 9d			call macro_forth_dsp_pop 
a0e7				endm 
# End of macro FORTH_DSP_POP
a0e7			 
a0e7				FORTH_DSP_VALUEHL 
a0e7 cd 8a 9c			call macro_dsp_valuehl 
a0ea				endm 
# End of macro FORTH_DSP_VALUEHL
a0ea			 
a0ea				FORTH_DSP_POP 
a0ea cd 42 9d			call macro_forth_dsp_pop 
a0ed				endm 
# End of macro FORTH_DSP_POP
a0ed			 
a0ed d1				pop de     ; w2	, hl = w1 
a0ee			 
a0ee eb				ex de, hl 
a0ef d5				push de 
a0f0			 
a0f0 cd 85 9a			call forth_push_numhl 
a0f3			 
a0f3 e1				pop hl 
a0f4			 
a0f4 cd 85 9a			call forth_push_numhl 
a0f7				 
a0f7			 
a0f7				NEXTW 
a0f7 c3 76 9e			jp macro_next 
a0fa				endm 
# End of macro NEXTW
a0fa			.COLN: 
a0fa			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a0fa 19				db WORD_SYS_CORE+OPCODE_COLN             
a0fb 86 a2			dw .SCOLN            
a0fd 02				db 1 + 1 
a0fe .. 00			db ":",0              
a100				endm 
# End of macro CWHEAD
a100			; | : ( -- )         Create new word | DONE 
a100			 
a100				if DEBUG_FORTH_WORDS_KEY 
a100					DMARK "CLN" 
a100 f5				push af  
a101 3a 15 a1			ld a, (.dmark)  
a104 32 65 ee			ld (debug_mark),a  
a107 3a 16 a1			ld a, (.dmark+1)  
a10a 32 66 ee			ld (debug_mark+1),a  
a10d 3a 17 a1			ld a, (.dmark+2)  
a110 32 67 ee			ld (debug_mark+2),a  
a113 18 03			jr .pastdmark  
a115 ..			.dmark: db "CLN"  
a118 f1			.pastdmark: pop af  
a119			endm  
# End of macro DMARK
a119					CALLMONITOR 
a119 cd 6f ee			call debug_vector  
a11c				endm  
# End of macro CALLMONITOR
a11c				endif 
a11c			STACKFRAME OFF $8efe $989f 
a11c				if DEBUG_STACK_IMB 
a11c					if OFF 
a11c						exx 
a11c						ld de, $8efe 
a11c						ld a, d 
a11c						ld hl, curframe 
a11c						call hexout 
a11c						ld a, e 
a11c						ld hl, curframe+2 
a11c						call hexout 
a11c						ld hl, $8efe 
a11c						push hl 
a11c						ld hl, $989f 
a11c						push hl 
a11c						exx 
a11c					endif 
a11c				endif 
a11c			endm 
# End of macro STACKFRAME
a11c			; get parser buffer length  of new word 
a11c			 
a11c			 
a11c			 
a11c				; move tok past this to start of name defintition 
a11c				; TODO get word to define 
a11c				; TODO Move past word token 
a11c				; TODO get length of string up to the ';' 
a11c			 
a11c 2a bc e5		ld hl, (os_tok_ptr) 
a11f 23			inc hl 
a120 23			inc hl 
a121			 
a121 3e 3b		ld a, ';' 
a123 cd 5b 90		call strlent 
a126			 
a126 7d			ld a,l 
a127 32 ab e2		ld (os_new_parse_len), a 
a12a			 
a12a			 
a12a			if DEBUG_FORTH_UWORD 
a12a ed 5b bc e5	ld de, (os_tok_ptr) 
a12e					DMARK ":01" 
a12e f5				push af  
a12f 3a 43 a1			ld a, (.dmark)  
a132 32 65 ee			ld (debug_mark),a  
a135 3a 44 a1			ld a, (.dmark+1)  
a138 32 66 ee			ld (debug_mark+1),a  
a13b 3a 45 a1			ld a, (.dmark+2)  
a13e 32 67 ee			ld (debug_mark+2),a  
a141 18 03			jr .pastdmark  
a143 ..			.dmark: db ":01"  
a146 f1			.pastdmark: pop af  
a147			endm  
# End of macro DMARK
a147			CALLMONITOR 
a147 cd 6f ee			call debug_vector  
a14a				endm  
# End of macro CALLMONITOR
a14a			endif 
a14a			 
a14a			; 
a14a			;  new word memory layout: 
a14a			;  
a14a			;    : adg 6666 ;  
a14a			; 
a14a			;    db   1     ; user defined word  
a14a 23			inc hl    
a14b			;    dw   sysdict 
a14b 23			inc hl 
a14c 23			inc hl 
a14d			;    db <word len>+1 (for null) 
a14d 23			inc hl 
a14e			;    db .... <word> 
a14e			; 
a14e			 
a14e 23			inc hl    ; some extras for the word preamble before the above 
a14f 23			inc hl 
a150 23			inc hl 
a151 23			inc hl 
a152 23			inc hl 
a153 23			inc hl 
a154 23			inc hl  
a155 23			inc hl 
a156 23			inc hl 
a157 23			inc hl 
a158 23			inc hl 
a159 23			inc hl 
a15a 23			inc hl 
a15b 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a15c			;       exec word buffer 
a15c			;	<ptr word>   
a15c 23			inc hl 
a15d 23			inc hl 
a15e			;       <word list><null term> 7F final term 
a15e			 
a15e			 
a15e			if DEBUG_FORTH_UWORD 
a15e					DMARK ":02" 
a15e f5				push af  
a15f 3a 73 a1			ld a, (.dmark)  
a162 32 65 ee			ld (debug_mark),a  
a165 3a 74 a1			ld a, (.dmark+1)  
a168 32 66 ee			ld (debug_mark+1),a  
a16b 3a 75 a1			ld a, (.dmark+2)  
a16e 32 67 ee			ld (debug_mark+2),a  
a171 18 03			jr .pastdmark  
a173 ..			.dmark: db ":02"  
a176 f1			.pastdmark: pop af  
a177			endm  
# End of macro DMARK
a177			CALLMONITOR 
a177 cd 6f ee			call debug_vector  
a17a				endm  
# End of macro CALLMONITOR
a17a			endif 
a17a			 
a17a			 
a17a				; malloc the size 
a17a			 
a17a cd c5 90			call malloc 
a17d 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
a180			 
a180			;    db   1     ; user defined word  
a180 3e 01			ld a, WORD_SYS_UWORD  
a182 77				ld (hl), a 
a183			 
a183 23			inc hl    
a184			;    dw   sysdict 
a184 11 ce 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a187 73			ld (hl), e 
a188 23			inc hl 
a189 72			ld (hl), d 
a18a 23			inc hl 
a18b			 
a18b			 
a18b			;    Setup dict word 
a18b			 
a18b 23			inc hl 
a18c 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a18f			 
a18f			; 1. get length of dict word 
a18f			 
a18f			 
a18f 2a bc e5		ld hl, (os_tok_ptr) 
a192 23			inc hl 
a193 23			inc hl    ; position to start of dict word 
a194 3e 00		ld a, 0 
a196 cd 5b 90		call strlent 
a199			 
a199			 
a199 23			inc hl    ; to include null??? 
a19a			 
a19a			; write length of dict word 
a19a			 
a19a ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a19e 1b			dec de 
a19f eb			ex de, hl 
a1a0 73			ld (hl), e 
a1a1 eb			ex de, hl 
a1a2			 
a1a2			 
a1a2			 
a1a2			; copy  
a1a2 4d			ld c, l 
a1a3 06 00		ld b, 0 
a1a5 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a1a9 2a bc e5		ld hl, (os_tok_ptr) 
a1ac 23			inc hl 
a1ad 23			inc hl    ; position to start of dict word 
a1ae			 
a1ae			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a1ae			 
a1ae			; TODO need to convert word to upper case 
a1ae			 
a1ae			ucasetok:	 
a1ae 7e			ld a,(hl) 
a1af cd 47 90		call toUpper 
a1b2 77			ld (hl),a 
a1b3 ed a0		ldi 
a1b5 f2 ae a1		jp p, ucasetok 
a1b8			 
a1b8			 
a1b8			 
a1b8			; de now points to start of where the word body code should be placed 
a1b8 ed 53 a7 e2	ld (os_new_work_ptr), de 
a1bc			; hl now points to the words to throw at forthexec which needs to be copied 
a1bc 22 a5 e2		ld (os_new_src_ptr), hl 
a1bf			 
a1bf			; TODO add 'call to forthexec' 
a1bf			 
a1bf			if DEBUG_FORTH_UWORD 
a1bf c5			push bc 
a1c0 ed 4b ad e2	ld bc, (os_new_malloc) 
a1c4					DMARK ":0x" 
a1c4 f5				push af  
a1c5 3a d9 a1			ld a, (.dmark)  
a1c8 32 65 ee			ld (debug_mark),a  
a1cb 3a da a1			ld a, (.dmark+1)  
a1ce 32 66 ee			ld (debug_mark+1),a  
a1d1 3a db a1			ld a, (.dmark+2)  
a1d4 32 67 ee			ld (debug_mark+2),a  
a1d7 18 03			jr .pastdmark  
a1d9 ..			.dmark: db ":0x"  
a1dc f1			.pastdmark: pop af  
a1dd			endm  
# End of macro DMARK
a1dd			CALLMONITOR 
a1dd cd 6f ee			call debug_vector  
a1e0				endm  
# End of macro CALLMONITOR
a1e0 c1			pop bc 
a1e1			endif 
a1e1			 
a1e1			 
a1e1			; create word preamble which should be: 
a1e1			 
a1e1			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a1e1			 
a1e1			;    ld hl, <word code> 
a1e1			;    jp user_exec 
a1e1			;    <word code bytes> 
a1e1			 
a1e1			 
a1e1			;	inc de     ; TODO ??? or are we already past the word's null 
a1e1 eb			ex de, hl 
a1e2			 
a1e2 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a1e4			 
a1e4 23			inc hl 
a1e5 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a1e8 23			inc hl 
a1e9			 
a1e9 23			inc hl 
a1ea 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a1ec			 
a1ec 01 70 cb		ld bc, user_exec 
a1ef 23			inc hl 
a1f0 71			ld (hl), c     ; poke address of user_exec 
a1f1 23			inc hl 
a1f2 70			ld (hl), b     
a1f3			; 
a1f3			;	inc hl 
a1f3			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a1f3			; 
a1f3			; 
a1f3			;	ld bc, macro_forth_rsp_next 
a1f3			;	inc hl 
a1f3			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a1f3			;	inc hl 
a1f3			;	ld (hl), b     
a1f3			; 
a1f3			;	inc hl 
a1f3			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a1f3			; 
a1f3			; 
a1f3			;	inc hl 
a1f3			;	ld bc, forthexec 
a1f3			;	ld (hl), c     ; poke address of forthexec 
a1f3			;	inc hl 
a1f3			;	ld (hl), b      
a1f3			; 
a1f3			;	inc hl 
a1f3			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a1f3			; 
a1f3			;	ld bc, user_dict_next 
a1f3			;	inc hl 
a1f3			;	ld (hl), c     ; poke address of forthexec 
a1f3			;	inc hl 
a1f3			;	ld (hl), b      
a1f3			 
a1f3			; hl is now where we need to copy the word byte data to save this 
a1f3			 
a1f3 23			inc hl 
a1f4 22 a3 e2		ld (os_new_exec), hl 
a1f7			 
a1f7			; copy definition 
a1f7			 
a1f7 eb			ex de, hl 
a1f8			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a1f8			;	inc de    ; skip the PC for this parse 
a1f8 3a ab e2		ld a, (os_new_parse_len) 
a1fb 4f			ld c, a 
a1fc 06 00		ld b, 0 
a1fe ed b0		ldir		 ; copy defintion 
a200			 
a200			 
a200			; poke the address of where the new word bytes live for forthexec 
a200			 
a200 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a203			 
a203 ed 5b a3 e2	ld de, (os_new_exec)      
a207			 
a207 73			ld (hl), e 
a208 23			inc hl 
a209 72			ld (hl), d 
a20a			 
a20a				; TODO copy last user dict word next link to this word 
a20a				; TODO update last user dict word to point to this word 
a20a			; 
a20a			; hl f923 de 812a ; bc 811a 
a20a			 
a20a			if DEBUG_FORTH_UWORD 
a20a c5			push bc 
a20b ed 4b ad e2	ld bc, (os_new_malloc) 
a20f					DMARK ":0A" 
a20f f5				push af  
a210 3a 24 a2			ld a, (.dmark)  
a213 32 65 ee			ld (debug_mark),a  
a216 3a 25 a2			ld a, (.dmark+1)  
a219 32 66 ee			ld (debug_mark+1),a  
a21c 3a 26 a2			ld a, (.dmark+2)  
a21f 32 67 ee			ld (debug_mark+2),a  
a222 18 03			jr .pastdmark  
a224 ..			.dmark: db ":0A"  
a227 f1			.pastdmark: pop af  
a228			endm  
# End of macro DMARK
a228			CALLMONITOR 
a228 cd 6f ee			call debug_vector  
a22b				endm  
# End of macro CALLMONITOR
a22b c1			pop bc 
a22c			endif 
a22c			if DEBUG_FORTH_UWORD 
a22c c5			push bc 
a22d ed 4b ad e2	ld bc, (os_new_malloc) 
a231 03			inc bc 
a232 03			inc bc 
a233 03			inc bc 
a234 03			inc bc 
a235 03			inc bc 
a236 03			inc bc 
a237 03			inc bc 
a238 03			inc bc 
a239			 
a239					DMARK ":0B" 
a239 f5				push af  
a23a 3a 4e a2			ld a, (.dmark)  
a23d 32 65 ee			ld (debug_mark),a  
a240 3a 4f a2			ld a, (.dmark+1)  
a243 32 66 ee			ld (debug_mark+1),a  
a246 3a 50 a2			ld a, (.dmark+2)  
a249 32 67 ee			ld (debug_mark+2),a  
a24c 18 03			jr .pastdmark  
a24e ..			.dmark: db ":0B"  
a251 f1			.pastdmark: pop af  
a252			endm  
# End of macro DMARK
a252			CALLMONITOR 
a252 cd 6f ee			call debug_vector  
a255				endm  
# End of macro CALLMONITOR
a255 c1			pop bc 
a256			endif 
a256			 
a256			; update word dict linked list for new word 
a256			 
a256			 
a256 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a259 23			inc hl     ; move to next work linked list ptr 
a25a			 
a25a ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
a25e 73			ld (hl), e 
a25f 23			inc hl 
a260 72			ld (hl), d 
a261			 
a261			if DEBUG_FORTH_UWORD 
a261 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a265			endif 
a265			 
a265 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a269			 
a269			 
a269			if DEBUG_FORTH_UWORD 
a269					DMARK ":0+" 
a269 f5				push af  
a26a 3a 7e a2			ld a, (.dmark)  
a26d 32 65 ee			ld (debug_mark),a  
a270 3a 7f a2			ld a, (.dmark+1)  
a273 32 66 ee			ld (debug_mark+1),a  
a276 3a 80 a2			ld a, (.dmark+2)  
a279 32 67 ee			ld (debug_mark+2),a  
a27c 18 03			jr .pastdmark  
a27e ..			.dmark: db ":0+"  
a281 f1			.pastdmark: pop af  
a282			endm  
# End of macro DMARK
a282			CALLMONITOR 
a282 cd 6f ee			call debug_vector  
a285				endm  
# End of macro CALLMONITOR
a285			endif 
a285			 
a285			STACKFRAMECHK OFF $8efe $989f 
a285				if DEBUG_STACK_IMB 
a285					if OFF 
a285						exx 
a285						ld hl, $989f 
a285						pop de   ; $989f 
a285						call cmp16 
a285						jr nz, .spnosame 
a285						ld hl, $8efe 
a285						pop de   ; $8efe 
a285						call cmp16 
a285						jr z, .spfrsame 
a285						.spnosame: call showsperror 
a285						.spfrsame: nop 
a285						exx 
a285					endif 
a285				endif 
a285			endm 
# End of macro STACKFRAMECHK
a285			 
a285 c9			ret    ; dont process any remaining parser tokens as they form new word 
a286			 
a286			 
a286			 
a286			 
a286			;		NEXT 
a286			.SCOLN: 
a286			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a286 06			db OPCODE_SCOLN 
a287 d2 a2		dw .DROP 
a289 02			db 2 
a28a .. 00		db ";",0           
a28c			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a28c				if DEBUG_FORTH_WORDS_KEY 
a28c					DMARK "SCN" 
a28c f5				push af  
a28d 3a a1 a2			ld a, (.dmark)  
a290 32 65 ee			ld (debug_mark),a  
a293 3a a2 a2			ld a, (.dmark+1)  
a296 32 66 ee			ld (debug_mark+1),a  
a299 3a a3 a2			ld a, (.dmark+2)  
a29c 32 67 ee			ld (debug_mark+2),a  
a29f 18 03			jr .pastdmark  
a2a1 ..			.dmark: db "SCN"  
a2a4 f1			.pastdmark: pop af  
a2a5			endm  
# End of macro DMARK
a2a5					CALLMONITOR 
a2a5 cd 6f ee			call debug_vector  
a2a8				endm  
# End of macro CALLMONITOR
a2a8				endif 
a2a8				FORTH_RSP_TOS 
a2a8 cd 43 9a			call macro_forth_rsp_tos 
a2ab				endm 
# End of macro FORTH_RSP_TOS
a2ab e5				push hl 
a2ac				FORTH_RSP_POP 
a2ac cd 4d 9a			call macro_forth_rsp_pop 
a2af				endm 
# End of macro FORTH_RSP_POP
a2af e1				pop hl 
a2b0			;		ex de,hl 
a2b0 22 bc e5			ld (os_tok_ptr),hl 
a2b3			 
a2b3			if DEBUG_FORTH_UWORD 
a2b3					DMARK "SCL" 
a2b3 f5				push af  
a2b4 3a c8 a2			ld a, (.dmark)  
a2b7 32 65 ee			ld (debug_mark),a  
a2ba 3a c9 a2			ld a, (.dmark+1)  
a2bd 32 66 ee			ld (debug_mark+1),a  
a2c0 3a ca a2			ld a, (.dmark+2)  
a2c3 32 67 ee			ld (debug_mark+2),a  
a2c6 18 03			jr .pastdmark  
a2c8 ..			.dmark: db "SCL"  
a2cb f1			.pastdmark: pop af  
a2cc			endm  
# End of macro DMARK
a2cc			CALLMONITOR 
a2cc cd 6f ee			call debug_vector  
a2cf				endm  
# End of macro CALLMONITOR
a2cf			endif 
a2cf				NEXTW 
a2cf c3 76 9e			jp macro_next 
a2d2				endm 
# End of macro NEXTW
a2d2			 
a2d2			.DROP: 
a2d2			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a2d2 1b				db WORD_SYS_CORE+OPCODE_DROP             
a2d3 fd a2			dw .DUP2            
a2d5 05				db 4 + 1 
a2d6 .. 00			db "DROP",0              
a2db				endm 
# End of macro CWHEAD
a2db			; | DROP ( w -- )   drop the TOS item   | DONE 
a2db				if DEBUG_FORTH_WORDS_KEY 
a2db					DMARK "DRP" 
a2db f5				push af  
a2dc 3a f0 a2			ld a, (.dmark)  
a2df 32 65 ee			ld (debug_mark),a  
a2e2 3a f1 a2			ld a, (.dmark+1)  
a2e5 32 66 ee			ld (debug_mark+1),a  
a2e8 3a f2 a2			ld a, (.dmark+2)  
a2eb 32 67 ee			ld (debug_mark+2),a  
a2ee 18 03			jr .pastdmark  
a2f0 ..			.dmark: db "DRP"  
a2f3 f1			.pastdmark: pop af  
a2f4			endm  
# End of macro DMARK
a2f4					CALLMONITOR 
a2f4 cd 6f ee			call debug_vector  
a2f7				endm  
# End of macro CALLMONITOR
a2f7				endif 
a2f7				FORTH_DSP_POP 
a2f7 cd 42 9d			call macro_forth_dsp_pop 
a2fa				endm 
# End of macro FORTH_DSP_POP
a2fa				NEXTW 
a2fa c3 76 9e			jp macro_next 
a2fd				endm 
# End of macro NEXTW
a2fd			.DUP2: 
a2fd			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a2fd 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a2fe 42 a3			dw .DROP2            
a300 05				db 4 + 1 
a301 .. 00			db "2DUP",0              
a306				endm 
# End of macro CWHEAD
a306			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | TOFIX 
a306				if DEBUG_FORTH_WORDS_KEY 
a306					DMARK "2DU" 
a306 f5				push af  
a307 3a 1b a3			ld a, (.dmark)  
a30a 32 65 ee			ld (debug_mark),a  
a30d 3a 1c a3			ld a, (.dmark+1)  
a310 32 66 ee			ld (debug_mark+1),a  
a313 3a 1d a3			ld a, (.dmark+2)  
a316 32 67 ee			ld (debug_mark+2),a  
a319 18 03			jr .pastdmark  
a31b ..			.dmark: db "2DU"  
a31e f1			.pastdmark: pop af  
a31f			endm  
# End of macro DMARK
a31f					CALLMONITOR 
a31f cd 6f ee			call debug_vector  
a322				endm  
# End of macro CALLMONITOR
a322				endif 
a322				FORTH_DSP_VALUEHL 
a322 cd 8a 9c			call macro_dsp_valuehl 
a325				endm 
# End of macro FORTH_DSP_VALUEHL
a325 e5				push hl      ; 2 
a326			 
a326				FORTH_DSP_POP 
a326 cd 42 9d			call macro_forth_dsp_pop 
a329				endm 
# End of macro FORTH_DSP_POP
a329				 
a329				FORTH_DSP_VALUEHL 
a329 cd 8a 9c			call macro_dsp_valuehl 
a32c				endm 
# End of macro FORTH_DSP_VALUEHL
a32c			;		push hl      ; 1 
a32c			 
a32c				FORTH_DSP_POP 
a32c cd 42 9d			call macro_forth_dsp_pop 
a32f				endm 
# End of macro FORTH_DSP_POP
a32f			 
a32f			;		pop hl       ; 1 
a32f d1				pop de       ; 2 
a330			 
a330 cd 85 9a			call forth_push_numhl 
a333 eb				ex de, hl 
a334 cd 85 9a			call forth_push_numhl 
a337			 
a337				 
a337 eb				ex de, hl 
a338			 
a338 cd 85 9a			call forth_push_numhl 
a33b eb				ex de, hl 
a33c cd 85 9a			call forth_push_numhl 
a33f			 
a33f			 
a33f				NEXTW 
a33f c3 76 9e			jp macro_next 
a342				endm 
# End of macro NEXTW
a342			.DROP2: 
a342			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a342 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a343 71 a3			dw .SWAP2            
a345 06				db 5 + 1 
a346 .. 00			db "2DROP",0              
a34c				endm 
# End of macro CWHEAD
a34c			; | 2DROP ( w w -- )    Double drop | DONE 
a34c				if DEBUG_FORTH_WORDS_KEY 
a34c					DMARK "2DR" 
a34c f5				push af  
a34d 3a 61 a3			ld a, (.dmark)  
a350 32 65 ee			ld (debug_mark),a  
a353 3a 62 a3			ld a, (.dmark+1)  
a356 32 66 ee			ld (debug_mark+1),a  
a359 3a 63 a3			ld a, (.dmark+2)  
a35c 32 67 ee			ld (debug_mark+2),a  
a35f 18 03			jr .pastdmark  
a361 ..			.dmark: db "2DR"  
a364 f1			.pastdmark: pop af  
a365			endm  
# End of macro DMARK
a365					CALLMONITOR 
a365 cd 6f ee			call debug_vector  
a368				endm  
# End of macro CALLMONITOR
a368				endif 
a368				FORTH_DSP_POP 
a368 cd 42 9d			call macro_forth_dsp_pop 
a36b				endm 
# End of macro FORTH_DSP_POP
a36b				FORTH_DSP_POP 
a36b cd 42 9d			call macro_forth_dsp_pop 
a36e				endm 
# End of macro FORTH_DSP_POP
a36e				NEXTW 
a36e c3 76 9e			jp macro_next 
a371				endm 
# End of macro NEXTW
a371			.SWAP2: 
a371			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a371 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a372 9a a3			dw .AT            
a374 06				db 5 + 1 
a375 .. 00			db "2SWAP",0              
a37b				endm 
# End of macro CWHEAD
a37b			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TOFIX 
a37b				if DEBUG_FORTH_WORDS_KEY 
a37b					DMARK "2SW" 
a37b f5				push af  
a37c 3a 90 a3			ld a, (.dmark)  
a37f 32 65 ee			ld (debug_mark),a  
a382 3a 91 a3			ld a, (.dmark+1)  
a385 32 66 ee			ld (debug_mark+1),a  
a388 3a 92 a3			ld a, (.dmark+2)  
a38b 32 67 ee			ld (debug_mark+2),a  
a38e 18 03			jr .pastdmark  
a390 ..			.dmark: db "2SW"  
a393 f1			.pastdmark: pop af  
a394			endm  
# End of macro DMARK
a394					CALLMONITOR 
a394 cd 6f ee			call debug_vector  
a397				endm  
# End of macro CALLMONITOR
a397				endif 
a397			; TODO Use os stack swap memory 
a397				NEXTW 
a397 c3 76 9e			jp macro_next 
a39a				endm 
# End of macro NEXTW
a39a			.AT: 
a39a			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a39a 1f				db WORD_SYS_CORE+OPCODE_AT             
a39b cc a3			dw .CAT            
a39d 02				db 1 + 1 
a39e .. 00			db "@",0              
a3a0				endm 
# End of macro CWHEAD
a3a0			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a3a0			 
a3a0				if DEBUG_FORTH_WORDS_KEY 
a3a0					DMARK "AT." 
a3a0 f5				push af  
a3a1 3a b5 a3			ld a, (.dmark)  
a3a4 32 65 ee			ld (debug_mark),a  
a3a7 3a b6 a3			ld a, (.dmark+1)  
a3aa 32 66 ee			ld (debug_mark+1),a  
a3ad 3a b7 a3			ld a, (.dmark+2)  
a3b0 32 67 ee			ld (debug_mark+2),a  
a3b3 18 03			jr .pastdmark  
a3b5 ..			.dmark: db "AT."  
a3b8 f1			.pastdmark: pop af  
a3b9			endm  
# End of macro DMARK
a3b9					CALLMONITOR 
a3b9 cd 6f ee			call debug_vector  
a3bc				endm  
# End of macro CALLMONITOR
a3bc				endif 
a3bc			.getbyteat:	 
a3bc				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a3bc cd 8a 9c			call macro_dsp_valuehl 
a3bf				endm 
# End of macro FORTH_DSP_VALUEHL
a3bf				 
a3bf			;		push hl 
a3bf			 
a3bf				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a3bf cd 42 9d			call macro_forth_dsp_pop 
a3c2				endm 
# End of macro FORTH_DSP_POP
a3c2			 
a3c2			;		pop hl 
a3c2			 
a3c2 7e				ld a, (hl) 
a3c3			 
a3c3 6f				ld l, a 
a3c4 26 00			ld h, 0 
a3c6 cd 85 9a			call forth_push_numhl 
a3c9			 
a3c9				NEXTW 
a3c9 c3 76 9e			jp macro_next 
a3cc				endm 
# End of macro NEXTW
a3cc			.CAT: 
a3cc			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a3cc 20				db WORD_SYS_CORE+OPCODE_CAT             
a3cd f5 a3			dw .BANG            
a3cf 03				db 2 + 1 
a3d0 .. 00			db "C@",0              
a3d3				endm 
# End of macro CWHEAD
a3d3			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a3d3				if DEBUG_FORTH_WORDS_KEY 
a3d3					DMARK "CAA" 
a3d3 f5				push af  
a3d4 3a e8 a3			ld a, (.dmark)  
a3d7 32 65 ee			ld (debug_mark),a  
a3da 3a e9 a3			ld a, (.dmark+1)  
a3dd 32 66 ee			ld (debug_mark+1),a  
a3e0 3a ea a3			ld a, (.dmark+2)  
a3e3 32 67 ee			ld (debug_mark+2),a  
a3e6 18 03			jr .pastdmark  
a3e8 ..			.dmark: db "CAA"  
a3eb f1			.pastdmark: pop af  
a3ec			endm  
# End of macro DMARK
a3ec					CALLMONITOR 
a3ec cd 6f ee			call debug_vector  
a3ef				endm  
# End of macro CALLMONITOR
a3ef				endif 
a3ef c3 bc a3			jp .getbyteat 
a3f2				NEXTW 
a3f2 c3 76 9e			jp macro_next 
a3f5				endm 
# End of macro NEXTW
a3f5			.BANG: 
a3f5			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a3f5 21				db WORD_SYS_CORE+OPCODE_BANG             
a3f6 2b a4			dw .CBANG            
a3f8 02				db 1 + 1 
a3f9 .. 00			db "!",0              
a3fb				endm 
# End of macro CWHEAD
a3fb			; | ! ( x w -- ) Store x at address w      | DONE 
a3fb				if DEBUG_FORTH_WORDS_KEY 
a3fb					DMARK "BNG" 
a3fb f5				push af  
a3fc 3a 10 a4			ld a, (.dmark)  
a3ff 32 65 ee			ld (debug_mark),a  
a402 3a 11 a4			ld a, (.dmark+1)  
a405 32 66 ee			ld (debug_mark+1),a  
a408 3a 12 a4			ld a, (.dmark+2)  
a40b 32 67 ee			ld (debug_mark+2),a  
a40e 18 03			jr .pastdmark  
a410 ..			.dmark: db "BNG"  
a413 f1			.pastdmark: pop af  
a414			endm  
# End of macro DMARK
a414					CALLMONITOR 
a414 cd 6f ee			call debug_vector  
a417				endm  
# End of macro CALLMONITOR
a417				endif 
a417			 
a417			.storebyteat:		 
a417				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a417 cd 8a 9c			call macro_dsp_valuehl 
a41a				endm 
# End of macro FORTH_DSP_VALUEHL
a41a				 
a41a e5				push hl 
a41b			 
a41b				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a41b cd 42 9d			call macro_forth_dsp_pop 
a41e				endm 
# End of macro FORTH_DSP_POP
a41e			 
a41e				; get byte to poke 
a41e			 
a41e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a41e cd 8a 9c			call macro_dsp_valuehl 
a421				endm 
# End of macro FORTH_DSP_VALUEHL
a421 e5				push hl 
a422			 
a422			 
a422				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a422 cd 42 9d			call macro_forth_dsp_pop 
a425				endm 
# End of macro FORTH_DSP_POP
a425			 
a425			 
a425 d1				pop de 
a426 e1				pop hl 
a427			 
a427 73				ld (hl),e 
a428			 
a428			 
a428				NEXTW 
a428 c3 76 9e			jp macro_next 
a42b				endm 
# End of macro NEXTW
a42b			.CBANG: 
a42b			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a42b 22				db WORD_SYS_CORE+OPCODE_CBANG             
a42c 54 a4			dw .SCALL            
a42e 03				db 2 + 1 
a42f .. 00			db "C!",0              
a432				endm 
# End of macro CWHEAD
a432			; | C!  ( x w -- ) Store x at address w  | DONE 
a432				if DEBUG_FORTH_WORDS_KEY 
a432					DMARK "CBA" 
a432 f5				push af  
a433 3a 47 a4			ld a, (.dmark)  
a436 32 65 ee			ld (debug_mark),a  
a439 3a 48 a4			ld a, (.dmark+1)  
a43c 32 66 ee			ld (debug_mark+1),a  
a43f 3a 49 a4			ld a, (.dmark+2)  
a442 32 67 ee			ld (debug_mark+2),a  
a445 18 03			jr .pastdmark  
a447 ..			.dmark: db "CBA"  
a44a f1			.pastdmark: pop af  
a44b			endm  
# End of macro DMARK
a44b					CALLMONITOR 
a44b cd 6f ee			call debug_vector  
a44e				endm  
# End of macro CALLMONITOR
a44e				endif 
a44e c3 17 a4			jp .storebyteat 
a451				NEXTW 
a451 c3 76 9e			jp macro_next 
a454				endm 
# End of macro NEXTW
a454			.SCALL: 
a454			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a454 23				db WORD_SYS_CORE+OPCODE_SCALL             
a455 88 a4			dw .DEPTH            
a457 05				db 4 + 1 
a458 .. 00			db "CALL",0              
a45d				endm 
# End of macro CWHEAD
a45d			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a45d				if DEBUG_FORTH_WORDS_KEY 
a45d					DMARK "CLL" 
a45d f5				push af  
a45e 3a 72 a4			ld a, (.dmark)  
a461 32 65 ee			ld (debug_mark),a  
a464 3a 73 a4			ld a, (.dmark+1)  
a467 32 66 ee			ld (debug_mark+1),a  
a46a 3a 74 a4			ld a, (.dmark+2)  
a46d 32 67 ee			ld (debug_mark+2),a  
a470 18 03			jr .pastdmark  
a472 ..			.dmark: db "CLL"  
a475 f1			.pastdmark: pop af  
a476			endm  
# End of macro DMARK
a476					CALLMONITOR 
a476 cd 6f ee			call debug_vector  
a479				endm  
# End of macro CALLMONITOR
a479				endif 
a479			 
a479				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a479 cd 8a 9c			call macro_dsp_valuehl 
a47c				endm 
# End of macro FORTH_DSP_VALUEHL
a47c			 
a47c			;		push hl 
a47c			 
a47c				; destroy value TOS 
a47c			 
a47c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a47c cd 42 9d			call macro_forth_dsp_pop 
a47f				endm 
# End of macro FORTH_DSP_POP
a47f			 
a47f					 
a47f			;		pop hl 
a47f			 
a47f				; how to do a call with hl???? save SP? 
a47f cd 1a 9e			call forth_call_hl 
a482			 
a482			 
a482				; TODO push value back onto stack for another op etc 
a482			 
a482 cd 85 9a			call forth_push_numhl 
a485				NEXTW 
a485 c3 76 9e			jp macro_next 
a488				endm 
# End of macro NEXTW
a488			.DEPTH: 
a488			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a488 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a489 c5 a4			dw .OVER            
a48b 06				db 5 + 1 
a48c .. 00			db "DEPTH",0              
a492				endm 
# End of macro CWHEAD
a492			; | DEPTH ( -- u ) Push count of stack | DONE 
a492				; take current TOS and remove from base value div by two to get count 
a492				if DEBUG_FORTH_WORDS_KEY 
a492					DMARK "DEP" 
a492 f5				push af  
a493 3a a7 a4			ld a, (.dmark)  
a496 32 65 ee			ld (debug_mark),a  
a499 3a a8 a4			ld a, (.dmark+1)  
a49c 32 66 ee			ld (debug_mark+1),a  
a49f 3a a9 a4			ld a, (.dmark+2)  
a4a2 32 67 ee			ld (debug_mark+2),a  
a4a5 18 03			jr .pastdmark  
a4a7 ..			.dmark: db "DEP"  
a4aa f1			.pastdmark: pop af  
a4ab			endm  
# End of macro DMARK
a4ab					CALLMONITOR 
a4ab cd 6f ee			call debug_vector  
a4ae				endm  
# End of macro CALLMONITOR
a4ae				endif 
a4ae			 
a4ae			 
a4ae 2a e8 e9		ld hl, (cli_data_sp) 
a4b1 11 22 e8		ld de, cli_data_stack 
a4b4 ed 52		sbc hl,de 
a4b6			 
a4b6			; div by size of stack item 
a4b6			 
a4b6 5d			ld e,l 
a4b7 0e 03		ld c, 3 
a4b9 cd 7a 8c		call Div8 
a4bc			 
a4bc 6f			ld l,a 
a4bd 26 00		ld h,0 
a4bf			 
a4bf			;srl h 
a4bf			;rr l 
a4bf			 
a4bf cd 85 9a			call forth_push_numhl 
a4c2				NEXTW 
a4c2 c3 76 9e			jp macro_next 
a4c5				endm 
# End of macro NEXTW
a4c5			.OVER: 
a4c5			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a4c5 42				db WORD_SYS_CORE+46             
a4c6 0c a5			dw .PAUSE            
a4c8 05				db 4 + 1 
a4c9 .. 00			db "OVER",0              
a4ce				endm 
# End of macro CWHEAD
a4ce			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
a4ce				if DEBUG_FORTH_WORDS_KEY 
a4ce					DMARK "OVR" 
a4ce f5				push af  
a4cf 3a e3 a4			ld a, (.dmark)  
a4d2 32 65 ee			ld (debug_mark),a  
a4d5 3a e4 a4			ld a, (.dmark+1)  
a4d8 32 66 ee			ld (debug_mark+1),a  
a4db 3a e5 a4			ld a, (.dmark+2)  
a4de 32 67 ee			ld (debug_mark+2),a  
a4e1 18 03			jr .pastdmark  
a4e3 ..			.dmark: db "OVR"  
a4e6 f1			.pastdmark: pop af  
a4e7			endm  
# End of macro DMARK
a4e7					CALLMONITOR 
a4e7 cd 6f ee			call debug_vector  
a4ea				endm  
# End of macro CALLMONITOR
a4ea				endif 
a4ea			 
a4ea			; TODO Use os stack swap memory 
a4ea				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4ea cd 8a 9c			call macro_dsp_valuehl 
a4ed				endm 
# End of macro FORTH_DSP_VALUEHL
a4ed e5				push hl    ; n2 
a4ee				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4ee cd 42 9d			call macro_forth_dsp_pop 
a4f1				endm 
# End of macro FORTH_DSP_POP
a4f1			 
a4f1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4f1 cd 8a 9c			call macro_dsp_valuehl 
a4f4				endm 
# End of macro FORTH_DSP_VALUEHL
a4f4 e5				push hl    ; n1 
a4f5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4f5 cd 42 9d			call macro_forth_dsp_pop 
a4f8				endm 
# End of macro FORTH_DSP_POP
a4f8			 
a4f8 d1				pop de     ; n1 
a4f9 e1				pop hl     ; n2 
a4fa			 
a4fa d5				push de 
a4fb e5				push hl 
a4fc d5				push de 
a4fd			 
a4fd				; push back  
a4fd			 
a4fd e1				pop hl 
a4fe cd 85 9a			call forth_push_numhl 
a501 e1				pop hl 
a502 cd 85 9a			call forth_push_numhl 
a505 e1				pop hl 
a506 cd 85 9a			call forth_push_numhl 
a509				NEXTW 
a509 c3 76 9e			jp macro_next 
a50c				endm 
# End of macro NEXTW
a50c			 
a50c			.PAUSE: 
a50c			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a50c 43				db WORD_SYS_CORE+47             
a50d 41 a5			dw .PAUSES            
a50f 08				db 7 + 1 
a510 .. 00			db "PAUSEMS",0              
a518				endm 
# End of macro CWHEAD
a518			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a518				if DEBUG_FORTH_WORDS_KEY 
a518					DMARK "PMS" 
a518 f5				push af  
a519 3a 2d a5			ld a, (.dmark)  
a51c 32 65 ee			ld (debug_mark),a  
a51f 3a 2e a5			ld a, (.dmark+1)  
a522 32 66 ee			ld (debug_mark+1),a  
a525 3a 2f a5			ld a, (.dmark+2)  
a528 32 67 ee			ld (debug_mark+2),a  
a52b 18 03			jr .pastdmark  
a52d ..			.dmark: db "PMS"  
a530 f1			.pastdmark: pop af  
a531			endm  
# End of macro DMARK
a531					CALLMONITOR 
a531 cd 6f ee			call debug_vector  
a534				endm  
# End of macro CALLMONITOR
a534				endif 
a534				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a534 cd 8a 9c			call macro_dsp_valuehl 
a537				endm 
# End of macro FORTH_DSP_VALUEHL
a537			;		push hl    ; n2 
a537				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a537 cd 42 9d			call macro_forth_dsp_pop 
a53a				endm 
# End of macro FORTH_DSP_POP
a53a			;		pop hl 
a53a			 
a53a 7d				ld a, l 
a53b cd e5 89			call aDelayInMS 
a53e			       NEXTW 
a53e c3 76 9e			jp macro_next 
a541				endm 
# End of macro NEXTW
a541			.PAUSES:  
a541			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a541 44				db WORD_SYS_CORE+48             
a542 b0 a5			dw .ROT            
a544 06				db 5 + 1 
a545 .. 00			db "PAUSE",0              
a54b				endm 
# End of macro CWHEAD
a54b			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a54b				if DEBUG_FORTH_WORDS_KEY 
a54b					DMARK "PAU" 
a54b f5				push af  
a54c 3a 60 a5			ld a, (.dmark)  
a54f 32 65 ee			ld (debug_mark),a  
a552 3a 61 a5			ld a, (.dmark+1)  
a555 32 66 ee			ld (debug_mark+1),a  
a558 3a 62 a5			ld a, (.dmark+2)  
a55b 32 67 ee			ld (debug_mark+2),a  
a55e 18 03			jr .pastdmark  
a560 ..			.dmark: db "PAU"  
a563 f1			.pastdmark: pop af  
a564			endm  
# End of macro DMARK
a564					CALLMONITOR 
a564 cd 6f ee			call debug_vector  
a567				endm  
# End of macro CALLMONITOR
a567				endif 
a567				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a567 cd 8a 9c			call macro_dsp_valuehl 
a56a				endm 
# End of macro FORTH_DSP_VALUEHL
a56a			;		push hl    ; n2 
a56a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a56a cd 42 9d			call macro_forth_dsp_pop 
a56d				endm 
# End of macro FORTH_DSP_POP
a56d			;		pop hl 
a56d 45				ld b, l 
a56e				if DEBUG_FORTH_WORDS 
a56e					DMARK "PAU" 
a56e f5				push af  
a56f 3a 83 a5			ld a, (.dmark)  
a572 32 65 ee			ld (debug_mark),a  
a575 3a 84 a5			ld a, (.dmark+1)  
a578 32 66 ee			ld (debug_mark+1),a  
a57b 3a 85 a5			ld a, (.dmark+2)  
a57e 32 67 ee			ld (debug_mark+2),a  
a581 18 03			jr .pastdmark  
a583 ..			.dmark: db "PAU"  
a586 f1			.pastdmark: pop af  
a587			endm  
# End of macro DMARK
a587					CALLMONITOR 
a587 cd 6f ee			call debug_vector  
a58a				endm  
# End of macro CALLMONITOR
a58a				endif 
a58a c5			.pauses1:	push bc 
a58b cd 00 8a			call delay1s 
a58e c1				pop bc 
a58f				if DEBUG_FORTH_WORDS 
a58f					DMARK "PA1" 
a58f f5				push af  
a590 3a a4 a5			ld a, (.dmark)  
a593 32 65 ee			ld (debug_mark),a  
a596 3a a5 a5			ld a, (.dmark+1)  
a599 32 66 ee			ld (debug_mark+1),a  
a59c 3a a6 a5			ld a, (.dmark+2)  
a59f 32 67 ee			ld (debug_mark+2),a  
a5a2 18 03			jr .pastdmark  
a5a4 ..			.dmark: db "PA1"  
a5a7 f1			.pastdmark: pop af  
a5a8			endm  
# End of macro DMARK
a5a8					CALLMONITOR 
a5a8 cd 6f ee			call debug_vector  
a5ab				endm  
# End of macro CALLMONITOR
a5ab				endif 
a5ab 10 dd			djnz .pauses1 
a5ad			 
a5ad			       NEXTW 
a5ad c3 76 9e			jp macro_next 
a5b0				endm 
# End of macro NEXTW
a5b0			.ROT: 
a5b0			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a5b0 45				db WORD_SYS_CORE+49             
a5b1 fe a5			dw .UWORDS            
a5b3 04				db 3 + 1 
a5b4 .. 00			db "ROT",0              
a5b8				endm 
# End of macro CWHEAD
a5b8			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
a5b8				if DEBUG_FORTH_WORDS_KEY 
a5b8					DMARK "ROT" 
a5b8 f5				push af  
a5b9 3a cd a5			ld a, (.dmark)  
a5bc 32 65 ee			ld (debug_mark),a  
a5bf 3a ce a5			ld a, (.dmark+1)  
a5c2 32 66 ee			ld (debug_mark+1),a  
a5c5 3a cf a5			ld a, (.dmark+2)  
a5c8 32 67 ee			ld (debug_mark+2),a  
a5cb 18 03			jr .pastdmark  
a5cd ..			.dmark: db "ROT"  
a5d0 f1			.pastdmark: pop af  
a5d1			endm  
# End of macro DMARK
a5d1					CALLMONITOR 
a5d1 cd 6f ee			call debug_vector  
a5d4				endm  
# End of macro CALLMONITOR
a5d4				endif 
a5d4			 
a5d4			; TODO Use os stack swap memory 
a5d4				FORTH_DSP_VALUEHL 
a5d4 cd 8a 9c			call macro_dsp_valuehl 
a5d7				endm 
# End of macro FORTH_DSP_VALUEHL
a5d7 e5				push hl    ; u3  
a5d8			 
a5d8				FORTH_DSP_POP 
a5d8 cd 42 9d			call macro_forth_dsp_pop 
a5db				endm 
# End of macro FORTH_DSP_POP
a5db			 
a5db				FORTH_DSP_VALUEHL 
a5db cd 8a 9c			call macro_dsp_valuehl 
a5de				endm 
# End of macro FORTH_DSP_VALUEHL
a5de e5				push hl     ; u2 
a5df			 
a5df				FORTH_DSP_POP 
a5df cd 42 9d			call macro_forth_dsp_pop 
a5e2				endm 
# End of macro FORTH_DSP_POP
a5e2			 
a5e2				FORTH_DSP_VALUEHL 
a5e2 cd 8a 9c			call macro_dsp_valuehl 
a5e5				endm 
# End of macro FORTH_DSP_VALUEHL
a5e5 e5				push hl     ; u1 
a5e6			 
a5e6				FORTH_DSP_POP 
a5e6 cd 42 9d			call macro_forth_dsp_pop 
a5e9				endm 
# End of macro FORTH_DSP_POP
a5e9			 
a5e9 c1				pop bc      ; u1 
a5ea e1				pop hl      ; u2 
a5eb d1				pop de      ; u3 
a5ec			 
a5ec			 
a5ec c5				push bc 
a5ed d5				push de 
a5ee e5				push hl 
a5ef			 
a5ef			 
a5ef e1				pop hl 
a5f0 cd 85 9a			call forth_push_numhl 
a5f3			 
a5f3 e1				pop hl 
a5f4 cd 85 9a			call forth_push_numhl 
a5f7			 
a5f7 e1				pop hl 
a5f8 cd 85 9a			call forth_push_numhl 
a5fb				 
a5fb			 
a5fb			 
a5fb			 
a5fb			 
a5fb			 
a5fb			       NEXTW 
a5fb c3 76 9e			jp macro_next 
a5fe				endm 
# End of macro NEXTW
a5fe			 
a5fe			.UWORDS: 
a5fe			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a5fe 50				db WORD_SYS_CORE+60             
a5ff c0 a6			dw .BP            
a601 07				db 6 + 1 
a602 .. 00			db "UWORDS",0              
a609				endm 
# End of macro CWHEAD
a609			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a609			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a609			; | | Following the count are the individual words. 
a609			; | | 
a609			; | | e.g. UWORDS 
a609			; | | BOX DIRLIST 2 
a609			; | |  
a609			; | | Can be used to save the words to storage via: 
a609			; | | UWORDS $01 DO $01 APPEND LOOP 
a609			if DEBUG_FORTH_WORDS_KEY 
a609				DMARK "UWR" 
a609 f5				push af  
a60a 3a 1e a6			ld a, (.dmark)  
a60d 32 65 ee			ld (debug_mark),a  
a610 3a 1f a6			ld a, (.dmark+1)  
a613 32 66 ee			ld (debug_mark+1),a  
a616 3a 20 a6			ld a, (.dmark+2)  
a619 32 67 ee			ld (debug_mark+2),a  
a61c 18 03			jr .pastdmark  
a61e ..			.dmark: db "UWR"  
a621 f1			.pastdmark: pop af  
a622			endm  
# End of macro DMARK
a622				CALLMONITOR 
a622 cd 6f ee			call debug_vector  
a625				endm  
# End of macro CALLMONITOR
a625			endif 
a625 21 7f dd			ld hl, baseram 
a628				;ld hl, baseusermem 
a628 01 00 00			ld bc, 0    ; start a counter 
a62b			 
a62b			; skip dict stub 
a62b			 
a62b cd c7 9f			call forth_tok_next 
a62e			 
a62e			 
a62e			; while we have words to look for 
a62e			 
a62e 7e			.douscan:	ld a, (hl)      
a62f			if DEBUG_FORTH_WORDS 
a62f				DMARK "UWs" 
a62f f5				push af  
a630 3a 44 a6			ld a, (.dmark)  
a633 32 65 ee			ld (debug_mark),a  
a636 3a 45 a6			ld a, (.dmark+1)  
a639 32 66 ee			ld (debug_mark+1),a  
a63c 3a 46 a6			ld a, (.dmark+2)  
a63f 32 67 ee			ld (debug_mark+2),a  
a642 18 03			jr .pastdmark  
a644 ..			.dmark: db "UWs"  
a647 f1			.pastdmark: pop af  
a648			endm  
# End of macro DMARK
a648				CALLMONITOR 
a648 cd 6f ee			call debug_vector  
a64b				endm  
# End of macro CALLMONITOR
a64b			endif 
a64b fe 00			cp WORD_SYS_END 
a64d 28 4d			jr z, .udone 
a64f fe 01			cp WORD_SYS_UWORD 
a651 20 44			jr nz, .nuword 
a653			 
a653			if DEBUG_FORTH_WORDS 
a653				DMARK "UWu" 
a653 f5				push af  
a654 3a 68 a6			ld a, (.dmark)  
a657 32 65 ee			ld (debug_mark),a  
a65a 3a 69 a6			ld a, (.dmark+1)  
a65d 32 66 ee			ld (debug_mark+1),a  
a660 3a 6a a6			ld a, (.dmark+2)  
a663 32 67 ee			ld (debug_mark+2),a  
a666 18 03			jr .pastdmark  
a668 ..			.dmark: db "UWu"  
a66b f1			.pastdmark: pop af  
a66c			endm  
# End of macro DMARK
a66c				CALLMONITOR 
a66c cd 6f ee			call debug_vector  
a66f				endm  
# End of macro CALLMONITOR
a66f			endif 
a66f				; we have a uword so push its name to the stack 
a66f			 
a66f e5				push hl  ; save so we can move to next dict block 
a670			 
a670				; skip opcode 
a670 23				inc hl  
a671				; skip next ptr 
a671 23				inc hl  
a672 23				inc hl 
a673				; skip len 
a673 23				inc hl 
a674			if DEBUG_FORTH_WORDS 
a674				DMARK "UWt" 
a674 f5				push af  
a675 3a 89 a6			ld a, (.dmark)  
a678 32 65 ee			ld (debug_mark),a  
a67b 3a 8a a6			ld a, (.dmark+1)  
a67e 32 66 ee			ld (debug_mark+1),a  
a681 3a 8b a6			ld a, (.dmark+2)  
a684 32 67 ee			ld (debug_mark+2),a  
a687 18 03			jr .pastdmark  
a689 ..			.dmark: db "UWt"  
a68c f1			.pastdmark: pop af  
a68d			endm  
# End of macro DMARK
a68d				CALLMONITOR 
a68d cd 6f ee			call debug_vector  
a690				endm  
# End of macro CALLMONITOR
a690			endif 
a690 03				inc bc 
a691			 
a691 c5				push bc 
a692 cd f3 9a			call forth_push_str 
a695 c1				pop bc 
a696			 
a696 e1				pop hl 	 
a697			 
a697 cd c7 9f		.nuword:	call forth_tok_next 
a69a 18 92			jr .douscan  
a69c			 
a69c			.udone:		 ; push count of uwords found 
a69c c5				push bc 
a69d e1				pop hl 
a69e			 
a69e			if DEBUG_FORTH_WORDS 
a69e				DMARK "UWc" 
a69e f5				push af  
a69f 3a b3 a6			ld a, (.dmark)  
a6a2 32 65 ee			ld (debug_mark),a  
a6a5 3a b4 a6			ld a, (.dmark+1)  
a6a8 32 66 ee			ld (debug_mark+1),a  
a6ab 3a b5 a6			ld a, (.dmark+2)  
a6ae 32 67 ee			ld (debug_mark+2),a  
a6b1 18 03			jr .pastdmark  
a6b3 ..			.dmark: db "UWc"  
a6b6 f1			.pastdmark: pop af  
a6b7			endm  
# End of macro DMARK
a6b7				CALLMONITOR 
a6b7 cd 6f ee			call debug_vector  
a6ba				endm  
# End of macro CALLMONITOR
a6ba			endif 
a6ba cd 85 9a			call forth_push_numhl 
a6bd			 
a6bd			 
a6bd			       NEXTW 
a6bd c3 76 9e			jp macro_next 
a6c0				endm 
# End of macro NEXTW
a6c0			 
a6c0			.BP: 
a6c0			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a6c0 54				db WORD_SYS_CORE+64             
a6c1 fa a6			dw .MONITOR            
a6c3 03				db 2 + 1 
a6c4 .. 00			db "BP",0              
a6c7				endm 
# End of macro CWHEAD
a6c7			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a6c7			; | | $00 Will enable the break points within specific code paths 
a6c7			; | | $01 Will disable break points 
a6c7			; | |  
a6c7			; | | By default break points are off. Either the above can be used to enable them 
a6c7			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a6c7			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a6c7			; | | can disable break points. Exiting will then continue boot process. 
a6c7				; get byte count 
a6c7				if DEBUG_FORTH_WORDS_KEY 
a6c7					DMARK "BP." 
a6c7 f5				push af  
a6c8 3a dc a6			ld a, (.dmark)  
a6cb 32 65 ee			ld (debug_mark),a  
a6ce 3a dd a6			ld a, (.dmark+1)  
a6d1 32 66 ee			ld (debug_mark+1),a  
a6d4 3a de a6			ld a, (.dmark+2)  
a6d7 32 67 ee			ld (debug_mark+2),a  
a6da 18 03			jr .pastdmark  
a6dc ..			.dmark: db "BP."  
a6df f1			.pastdmark: pop af  
a6e0			endm  
# End of macro DMARK
a6e0					CALLMONITOR 
a6e0 cd 6f ee			call debug_vector  
a6e3				endm  
# End of macro CALLMONITOR
a6e3				endif 
a6e3			 
a6e3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a6e3 cd 8a 9c			call macro_dsp_valuehl 
a6e6				endm 
# End of macro FORTH_DSP_VALUEHL
a6e6			 
a6e6			;		push hl 
a6e6			 
a6e6				; destroy value TOS 
a6e6			 
a6e6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a6e6 cd 42 9d			call macro_forth_dsp_pop 
a6e9				endm 
# End of macro FORTH_DSP_POP
a6e9			 
a6e9			;		pop hl 
a6e9			 
a6e9 3e 00			ld a,0 
a6eb bd				cp l 
a6ec 28 06			jr z, .bpset 
a6ee			;		ld a, '*' 
a6ee cd 00 94			call bp_off 
a6f1				NEXTW 
a6f1 c3 76 9e			jp macro_next 
a6f4				endm 
# End of macro NEXTW
a6f4			 
a6f4			.bpset:	 
a6f4				;	ld (os_view_disable), a 
a6f4 cd f4 93			call bp_on 
a6f7			 
a6f7			 
a6f7				NEXTW 
a6f7 c3 76 9e			jp macro_next 
a6fa				endm 
# End of macro NEXTW
a6fa			 
a6fa			 
a6fa			.MONITOR: 
a6fa			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a6fa 55				db WORD_SYS_CORE+65             
a6fb 2b a7			dw .MALLOC            
a6fd 08				db 7 + 1 
a6fe .. 00			db "MONITOR",0              
a706				endm 
# End of macro CWHEAD
a706			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a706			; | | At start the current various registers will be displayed with contents. 
a706			; | | Top right corner will show the most recent debug marker seen. 
a706			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a706			; | | and the return stack pointer (RSP). 
a706			; | | Pressing: 
a706			; | |    1 - Initial screen 
a706			; | |    2 - Display a data dump of HL 
a706			; | |    3 - Display a data dump of DE 
a706			; | |    4 - Display a data dump of BC 
a706			; | |    5 - Display a data dump of HL 
a706			; | |    6 - Display a data dump of DSP 
a706			; | |    7 - Display a data dump of RSP 
a706			; | |    8 - Display a data dump of what is at DSP 
a706			; | |    9 - Display a data dump of what is at RSP 
a706			; | |    0 - Exit monitor and continue running. This will also enable break points 
a706			; | |    * - Disable break points 
a706			; | |    # - Enter traditional monitor mode 
a706			; | | 
a706			; | | Monitor Mode 
a706			; | | ------------ 
a706			; | | A prompt of '>' will be shown for various commands: 
a706			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a706			; | |    C - Continue display a data dump from the last set address 
a706			; | |    M xxxx - Set start of memory edit at address xx 
a706			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a706			; | |    G xxxx - Exec code at specific address 
a706			; | |    Q - Return to previous 
a706				if DEBUG_FORTH_WORDS_KEY 
a706					DMARK "MON" 
a706 f5				push af  
a707 3a 1b a7			ld a, (.dmark)  
a70a 32 65 ee			ld (debug_mark),a  
a70d 3a 1c a7			ld a, (.dmark+1)  
a710 32 66 ee			ld (debug_mark+1),a  
a713 3a 1d a7			ld a, (.dmark+2)  
a716 32 67 ee			ld (debug_mark+2),a  
a719 18 03			jr .pastdmark  
a71b ..			.dmark: db "MON"  
a71e f1			.pastdmark: pop af  
a71f			endm  
# End of macro DMARK
a71f					CALLMONITOR 
a71f cd 6f ee			call debug_vector  
a722				endm  
# End of macro CALLMONITOR
a722				endif 
a722			;		ld a, 0 
a722			;		ld (os_view_disable), a 
a722 cd f4 93			call bp_on 
a725			 
a725				CALLMONITOR 
a725 cd 6f ee			call debug_vector  
a728				endm  
# End of macro CALLMONITOR
a728			 
a728			;	call monitor 
a728			 
a728				NEXTW 
a728 c3 76 9e			jp macro_next 
a72b				endm 
# End of macro NEXTW
a72b			 
a72b			 
a72b			.MALLOC: 
a72b			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a72b 56				db WORD_SYS_CORE+66             
a72c 54 a7			dw .MALLOC2            
a72e 06				db 5 + 1 
a72f .. 00			db "ALLOT",0              
a735				endm 
# End of macro CWHEAD
a735			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a735				if DEBUG_FORTH_WORDS_KEY 
a735					DMARK "ALL" 
a735 f5				push af  
a736 3a 4a a7			ld a, (.dmark)  
a739 32 65 ee			ld (debug_mark),a  
a73c 3a 4b a7			ld a, (.dmark+1)  
a73f 32 66 ee			ld (debug_mark+1),a  
a742 3a 4c a7			ld a, (.dmark+2)  
a745 32 67 ee			ld (debug_mark+2),a  
a748 18 03			jr .pastdmark  
a74a ..			.dmark: db "ALL"  
a74d f1			.pastdmark: pop af  
a74e			endm  
# End of macro DMARK
a74e					CALLMONITOR 
a74e cd 6f ee			call debug_vector  
a751				endm  
# End of macro CALLMONITOR
a751				endif 
a751 c3 7b a7			jp .mallocc 
a754			.MALLOC2: 
a754			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a754 56				db WORD_SYS_CORE+66             
a755 92 a7			dw .FREE            
a757 07				db 6 + 1 
a758 .. 00			db "MALLOC",0              
a75f				endm 
# End of macro CWHEAD
a75f			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a75f				; get byte count 
a75f				if DEBUG_FORTH_WORDS_KEY 
a75f					DMARK "MAL" 
a75f f5				push af  
a760 3a 74 a7			ld a, (.dmark)  
a763 32 65 ee			ld (debug_mark),a  
a766 3a 75 a7			ld a, (.dmark+1)  
a769 32 66 ee			ld (debug_mark+1),a  
a76c 3a 76 a7			ld a, (.dmark+2)  
a76f 32 67 ee			ld (debug_mark+2),a  
a772 18 03			jr .pastdmark  
a774 ..			.dmark: db "MAL"  
a777 f1			.pastdmark: pop af  
a778			endm  
# End of macro DMARK
a778					CALLMONITOR 
a778 cd 6f ee			call debug_vector  
a77b				endm  
# End of macro CALLMONITOR
a77b				endif 
a77b			.mallocc: 
a77b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a77b cd 8a 9c			call macro_dsp_valuehl 
a77e				endm 
# End of macro FORTH_DSP_VALUEHL
a77e			 
a77e			;		push hl 
a77e			 
a77e				; destroy value TOS 
a77e			 
a77e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a77e cd 42 9d			call macro_forth_dsp_pop 
a781				endm 
# End of macro FORTH_DSP_POP
a781			 
a781			;		pop hl 
a781 cd c5 90			call malloc 
a784			if DEBUG_FORTH_MALLOC_GUARD 
a784 f5				push af 
a785 cd 13 8d			call ishlzero 
a788			;		ld a, l 
a788			;		add h 
a788			;		cp 0 
a788 f1				pop af 
a789				 
a789 cc 42 cc			call z,malloc_error 
a78c			endif 
a78c			 
a78c cd 85 9a			call forth_push_numhl 
a78f				NEXTW 
a78f c3 76 9e			jp macro_next 
a792				endm 
# End of macro NEXTW
a792			 
a792			.FREE: 
a792			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a792 57				db WORD_SYS_CORE+67             
a793 c3 a7			dw .LIST            
a795 05				db 4 + 1 
a796 .. 00			db "FREE",0              
a79b				endm 
# End of macro CWHEAD
a79b			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a79b				if DEBUG_FORTH_WORDS_KEY 
a79b					DMARK "FRE" 
a79b f5				push af  
a79c 3a b0 a7			ld a, (.dmark)  
a79f 32 65 ee			ld (debug_mark),a  
a7a2 3a b1 a7			ld a, (.dmark+1)  
a7a5 32 66 ee			ld (debug_mark+1),a  
a7a8 3a b2 a7			ld a, (.dmark+2)  
a7ab 32 67 ee			ld (debug_mark+2),a  
a7ae 18 03			jr .pastdmark  
a7b0 ..			.dmark: db "FRE"  
a7b3 f1			.pastdmark: pop af  
a7b4			endm  
# End of macro DMARK
a7b4					CALLMONITOR 
a7b4 cd 6f ee			call debug_vector  
a7b7				endm  
# End of macro CALLMONITOR
a7b7				endif 
a7b7				; get address 
a7b7			 
a7b7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a7b7 cd 8a 9c			call macro_dsp_valuehl 
a7ba				endm 
# End of macro FORTH_DSP_VALUEHL
a7ba			 
a7ba			;		push hl 
a7ba			 
a7ba				; destroy value TOS 
a7ba			 
a7ba				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a7ba cd 42 9d			call macro_forth_dsp_pop 
a7bd				endm 
# End of macro FORTH_DSP_POP
a7bd			 
a7bd			;		pop hl 
a7bd			if FORTH_ENABLE_MALLOCFREE 
a7bd cd 8f 91			call free 
a7c0			endif 
a7c0				NEXTW 
a7c0 c3 76 9e			jp macro_next 
a7c3				endm 
# End of macro NEXTW
a7c3			.LIST: 
a7c3			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a7c3 5c				db WORD_SYS_CORE+72             
a7c4 bf a9			dw .FORGET            
a7c6 05				db 4 + 1 
a7c7 .. 00			db "LIST",0              
a7cc				endm 
# End of macro CWHEAD
a7cc			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a7cc			; | | The quoted word must be in upper case. 
a7cc			if DEBUG_FORTH_WORDS_KEY 
a7cc				DMARK "LST" 
a7cc f5				push af  
a7cd 3a e1 a7			ld a, (.dmark)  
a7d0 32 65 ee			ld (debug_mark),a  
a7d3 3a e2 a7			ld a, (.dmark+1)  
a7d6 32 66 ee			ld (debug_mark+1),a  
a7d9 3a e3 a7			ld a, (.dmark+2)  
a7dc 32 67 ee			ld (debug_mark+2),a  
a7df 18 03			jr .pastdmark  
a7e1 ..			.dmark: db "LST"  
a7e4 f1			.pastdmark: pop af  
a7e5			endm  
# End of macro DMARK
a7e5				CALLMONITOR 
a7e5 cd 6f ee			call debug_vector  
a7e8				endm  
# End of macro CALLMONITOR
a7e8			endif 
a7e8			 
a7e8				FORTH_DSP_VALUEHL 
a7e8 cd 8a 9c			call macro_dsp_valuehl 
a7eb				endm 
# End of macro FORTH_DSP_VALUEHL
a7eb			 
a7eb e5				push hl 
a7ec				FORTH_DSP_POP 
a7ec cd 42 9d			call macro_forth_dsp_pop 
a7ef				endm 
# End of macro FORTH_DSP_POP
a7ef c1				pop bc 
a7f0			 
a7f0			; Start format of scratch string 
a7f0			 
a7f0 21 bb e2			ld hl, scratch 
a7f3			 
a7f3 3e 3a			ld a, ':' 
a7f5 77				ld (hl),a 
a7f6 23				inc hl 
a7f7 3e 20			ld a, ' ' 
a7f9 77				ld (hl), a 
a7fa			 
a7fa				; Get ptr to the word we need to look up 
a7fa			 
a7fa			;		FORTH_DSP_VALUEHL 
a7fa				;v5 FORTH_DSP_VALUE 
a7fa			; TODO type check 
a7fa			;		inc hl    ; Skip type check  
a7fa			;		push hl 
a7fa			;		ex de, hl    ; put into DE 
a7fa			 
a7fa			 
a7fa 21 7f dd			ld hl, baseram 
a7fd				;ld hl, baseusermem 
a7fd			 
a7fd e5			push hl   ; sacreifical push 
a7fe			 
a7fe			.ldouscanm: 
a7fe e1			pop hl 
a7ff			.ldouscan: 
a7ff			if DEBUG_FORTH_WORDS 
a7ff				DMARK "LSs" 
a7ff f5				push af  
a800 3a 14 a8			ld a, (.dmark)  
a803 32 65 ee			ld (debug_mark),a  
a806 3a 15 a8			ld a, (.dmark+1)  
a809 32 66 ee			ld (debug_mark+1),a  
a80c 3a 16 a8			ld a, (.dmark+2)  
a80f 32 67 ee			ld (debug_mark+2),a  
a812 18 03			jr .pastdmark  
a814 ..			.dmark: db "LSs"  
a817 f1			.pastdmark: pop af  
a818			endm  
# End of macro DMARK
a818				CALLMONITOR 
a818 cd 6f ee			call debug_vector  
a81b				endm  
# End of macro CALLMONITOR
a81b			endif 
a81b			; skip dict stub 
a81b cd c7 9f			call forth_tok_next 
a81e			 
a81e			 
a81e			; while we have words to look for 
a81e			 
a81e 7e			ld a, (hl)      
a81f			if DEBUG_FORTH_WORDS 
a81f				DMARK "LSk" 
a81f f5				push af  
a820 3a 34 a8			ld a, (.dmark)  
a823 32 65 ee			ld (debug_mark),a  
a826 3a 35 a8			ld a, (.dmark+1)  
a829 32 66 ee			ld (debug_mark+1),a  
a82c 3a 36 a8			ld a, (.dmark+2)  
a82f 32 67 ee			ld (debug_mark+2),a  
a832 18 03			jr .pastdmark  
a834 ..			.dmark: db "LSk"  
a837 f1			.pastdmark: pop af  
a838			endm  
# End of macro DMARK
a838				CALLMONITOR 
a838 cd 6f ee			call debug_vector  
a83b				endm  
# End of macro CALLMONITOR
a83b			endif 
a83b				;cp WORD_SYS_END 
a83b				;jp z, .lunotfound 
a83b			 
a83b					; if we hit non uwords then gone too far 
a83b fe 01				cp WORD_SYS_UWORD 
a83d c2 7b a9				jp nz, .lunotfound 
a840			 
a840				if DEBUG_FORTH_WORDS 
a840					DMARK "LSu" 
a840 f5				push af  
a841 3a 55 a8			ld a, (.dmark)  
a844 32 65 ee			ld (debug_mark),a  
a847 3a 56 a8			ld a, (.dmark+1)  
a84a 32 66 ee			ld (debug_mark+1),a  
a84d 3a 57 a8			ld a, (.dmark+2)  
a850 32 67 ee			ld (debug_mark+2),a  
a853 18 03			jr .pastdmark  
a855 ..			.dmark: db "LSu"  
a858 f1			.pastdmark: pop af  
a859			endm  
# End of macro DMARK
a859					CALLMONITOR 
a859 cd 6f ee			call debug_vector  
a85c				endm  
# End of macro CALLMONITOR
a85c				endif 
a85c			 
a85c					; found a uword but is it the one we want... 
a85c			 
a85c c5					push bc     ; uword to find is on bc 
a85d d1					pop de 
a85e			 
a85e e5					push hl  ; to save the ptr 
a85f			 
a85f					; skip opcode 
a85f 23					inc hl  
a860					; skip next ptr 
a860 23					inc hl  
a861 23					inc hl 
a862					; skip len 
a862 23					inc hl 
a863			 
a863				if DEBUG_FORTH_WORDS 
a863					DMARK "LSc" 
a863 f5				push af  
a864 3a 78 a8			ld a, (.dmark)  
a867 32 65 ee			ld (debug_mark),a  
a86a 3a 79 a8			ld a, (.dmark+1)  
a86d 32 66 ee			ld (debug_mark+1),a  
a870 3a 7a a8			ld a, (.dmark+2)  
a873 32 67 ee			ld (debug_mark+2),a  
a876 18 03			jr .pastdmark  
a878 ..			.dmark: db "LSc"  
a87b f1			.pastdmark: pop af  
a87c			endm  
# End of macro DMARK
a87c					CALLMONITOR 
a87c cd 6f ee			call debug_vector  
a87f				endm  
# End of macro CALLMONITOR
a87f				endif 
a87f			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a87f			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a87f			; Nope that has gone the other way. It needs to be exact not on first zero 
a87f			;		call strcmp 
a87f c5					push bc 
a880 cd 95 90				call StrictStrCmp 
a883 c1					pop bc 
a884 c2 fe a7				jp nz, .ldouscanm 
a887				 
a887			 
a887			 
a887					; we have a uword so push its name to the stack 
a887			 
a887			;	   	push hl  ; save so we can move to next dict block 
a887 e1			pop hl 
a888			 
a888				if DEBUG_FORTH_WORDS 
a888					DMARK "LSm" 
a888 f5				push af  
a889 3a 9d a8			ld a, (.dmark)  
a88c 32 65 ee			ld (debug_mark),a  
a88f 3a 9e a8			ld a, (.dmark+1)  
a892 32 66 ee			ld (debug_mark+1),a  
a895 3a 9f a8			ld a, (.dmark+2)  
a898 32 67 ee			ld (debug_mark+2),a  
a89b 18 03			jr .pastdmark  
a89d ..			.dmark: db "LSm"  
a8a0 f1			.pastdmark: pop af  
a8a1			endm  
# End of macro DMARK
a8a1					CALLMONITOR 
a8a1 cd 6f ee			call debug_vector  
a8a4				endm  
# End of macro CALLMONITOR
a8a4				endif 
a8a4			 
a8a4					; skip opcode 
a8a4 23					inc hl  
a8a5					; skip next ptr 
a8a5 23					inc hl  
a8a6 23					inc hl 
a8a7					; skip len 
a8a7 7e					ld a, (hl)   ; save length to add 
a8a8				if DEBUG_FORTH_WORDS 
a8a8					DMARK "LS2" 
a8a8 f5				push af  
a8a9 3a bd a8			ld a, (.dmark)  
a8ac 32 65 ee			ld (debug_mark),a  
a8af 3a be a8			ld a, (.dmark+1)  
a8b2 32 66 ee			ld (debug_mark+1),a  
a8b5 3a bf a8			ld a, (.dmark+2)  
a8b8 32 67 ee			ld (debug_mark+2),a  
a8bb 18 03			jr .pastdmark  
a8bd ..			.dmark: db "LS2"  
a8c0 f1			.pastdmark: pop af  
a8c1			endm  
# End of macro DMARK
a8c1					CALLMONITOR 
a8c1 cd 6f ee			call debug_vector  
a8c4				endm  
# End of macro CALLMONITOR
a8c4				endif 
a8c4			 
a8c4					; save this location 
a8c4				 
a8c4 e5					push hl 
a8c5			 
a8c5 23					inc hl 
a8c6 11 bd e2				ld de, scratch+2 
a8c9 4f					ld c, a 
a8ca 06 00				ld b, 0 
a8cc			 
a8cc				if DEBUG_FORTH_WORDS 
a8cc					DMARK "LSn" 
a8cc f5				push af  
a8cd 3a e1 a8			ld a, (.dmark)  
a8d0 32 65 ee			ld (debug_mark),a  
a8d3 3a e2 a8			ld a, (.dmark+1)  
a8d6 32 66 ee			ld (debug_mark+1),a  
a8d9 3a e3 a8			ld a, (.dmark+2)  
a8dc 32 67 ee			ld (debug_mark+2),a  
a8df 18 03			jr .pastdmark  
a8e1 ..			.dmark: db "LSn"  
a8e4 f1			.pastdmark: pop af  
a8e5			endm  
# End of macro DMARK
a8e5					CALLMONITOR 
a8e5 cd 6f ee			call debug_vector  
a8e8				endm  
# End of macro CALLMONITOR
a8e8				endif 
a8e8			 
a8e8					; copy uword name to scratch 
a8e8			 
a8e8			;		ldir 
a8e8			.licplw:	; copy uword name to scratch converting to lower case as we go 
a8e8 ed a0				ldi 
a8ea 1b					dec de 
a8eb 1a					ld a, (de) 
a8ec cd 68 8f				call to_lower 
a8ef 12					ld (de),a 
a8f0 13					inc de 
a8f1 3e 00				ld a, 0 
a8f3 b9					cp c 
a8f4 20 f2				jr nz, .licplw 
a8f6			 
a8f6			 
a8f6			 
a8f6 1b					dec de 
a8f7 3e 20				ld a, ' '    ; change null to space 
a8f9 12					ld (de), a 
a8fa			 
a8fa 13					inc de 
a8fb			 
a8fb d5					push de 
a8fc c1					pop bc     ; move scratch pointer to end of word name and save it 
a8fd			 
a8fd e1					pop hl 
a8fe 7e					ld a, (hl) 
a8ff					;inc hl 
a8ff					; skip word string 
a8ff cd ea 8c				call addatohl 
a902			 
a902 23					inc hl 
a903			 
a903				if DEBUG_FORTH_WORDS 
a903					DMARK "LS3" 
a903 f5				push af  
a904 3a 18 a9			ld a, (.dmark)  
a907 32 65 ee			ld (debug_mark),a  
a90a 3a 19 a9			ld a, (.dmark+1)  
a90d 32 66 ee			ld (debug_mark+1),a  
a910 3a 1a a9			ld a, (.dmark+2)  
a913 32 67 ee			ld (debug_mark+2),a  
a916 18 03			jr .pastdmark  
a918 ..			.dmark: db "LS3"  
a91b f1			.pastdmark: pop af  
a91c			endm  
# End of macro DMARK
a91c					CALLMONITOR 
a91c cd 6f ee			call debug_vector  
a91f				endm  
# End of macro CALLMONITOR
a91f				endif 
a91f					; should now be at the start of the machine code to setup the eval of the uword 
a91f					; now locate the ptr to the string defintion 
a91f			 
a91f					; skip ld hl, 
a91f					; then load the ptr 
a91f			; TODO use get from hl ptr 
a91f 23					inc hl 
a920 5e					ld e, (hl) 
a921 23					inc hl 
a922 56					ld d, (hl) 
a923 eb					ex de, hl 
a924			 
a924			 
a924				if DEBUG_FORTH_WORDS 
a924					DMARK "LSt" 
a924 f5				push af  
a925 3a 39 a9			ld a, (.dmark)  
a928 32 65 ee			ld (debug_mark),a  
a92b 3a 3a a9			ld a, (.dmark+1)  
a92e 32 66 ee			ld (debug_mark+1),a  
a931 3a 3b a9			ld a, (.dmark+2)  
a934 32 67 ee			ld (debug_mark+2),a  
a937 18 03			jr .pastdmark  
a939 ..			.dmark: db "LSt"  
a93c f1			.pastdmark: pop af  
a93d			endm  
# End of macro DMARK
a93d					CALLMONITOR 
a93d cd 6f ee			call debug_vector  
a940				endm  
# End of macro CALLMONITOR
a940				endif 
a940			 
a940			; cant push right now due to tokenised strings  
a940			 
a940			; get the destination of where to copy this definition to. 
a940			 
a940 c5					push bc 
a941 d1					pop de 
a942			 
a942 7e			.listl:         ld a,(hl) 
a943 fe 00				cp 0 
a945 28 09				jr z, .lreplsp     ; replace zero with space 
a947					;cp FORTH_END_BUFFER 
a947 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
a949 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
a94b				 
a94b					; just copy this char as is then 
a94b			 
a94b 12					ld (de), a 
a94c			 
a94c 23			.listnxt:	inc hl 
a94d 13					inc de 
a94e 18 f2				jr .listl 
a950			 
a950 3e 20		.lreplsp:	ld a,' ' 
a952 12					ld (de), a 
a953 18 f7				jr .listnxt 
a955			 
a955			; close up uword def 
a955			 
a955			.listdone: 
a955 12					ld (de), a 
a956 13					inc de 
a957 3e 00				ld a, 0 
a959 12					ld (de), a 
a95a			 
a95a			; now have def so clean up and push to stack 
a95a			 
a95a 21 bb e2				ld hl, scratch 
a95d				if DEBUG_FORTH_WORDS 
a95d					DMARK "Ltp" 
a95d f5				push af  
a95e 3a 72 a9			ld a, (.dmark)  
a961 32 65 ee			ld (debug_mark),a  
a964 3a 73 a9			ld a, (.dmark+1)  
a967 32 66 ee			ld (debug_mark+1),a  
a96a 3a 74 a9			ld a, (.dmark+2)  
a96d 32 67 ee			ld (debug_mark+2),a  
a970 18 03			jr .pastdmark  
a972 ..			.dmark: db "Ltp"  
a975 f1			.pastdmark: pop af  
a976			endm  
# End of macro DMARK
a976					CALLMONITOR 
a976 cd 6f ee			call debug_vector  
a979				endm  
# End of macro CALLMONITOR
a979				endif 
a979			 
a979 18 1f			jr .listpush 
a97b			 
a97b			;.lnuword:	pop hl 
a97b			;		call forth_tok_next 
a97b			;		jp .ldouscan  
a97b			 
a97b			.lunotfound:		  
a97b			 
a97b				if DEBUG_FORTH_WORDS 
a97b					DMARK "LSn" 
a97b f5				push af  
a97c 3a 90 a9			ld a, (.dmark)  
a97f 32 65 ee			ld (debug_mark),a  
a982 3a 91 a9			ld a, (.dmark+1)  
a985 32 66 ee			ld (debug_mark+1),a  
a988 3a 92 a9			ld a, (.dmark+2)  
a98b 32 67 ee			ld (debug_mark+2),a  
a98e 18 03			jr .pastdmark  
a990 ..			.dmark: db "LSn"  
a993 f1			.pastdmark: pop af  
a994			endm  
# End of macro DMARK
a994					CALLMONITOR 
a994 cd 6f ee			call debug_vector  
a997				endm  
# End of macro CALLMONITOR
a997				endif 
a997			 
a997					 
a997			;		FORTH_DSP_POP 
a997			;		ld hl, .luno 
a997			 
a997					NEXTW			 
a997 c3 76 9e			jp macro_next 
a99a				endm 
# End of macro NEXTW
a99a			 
a99a			.listpush: 
a99a				if DEBUG_FORTH_WORDS 
a99a					DMARK "LS>" 
a99a f5				push af  
a99b 3a af a9			ld a, (.dmark)  
a99e 32 65 ee			ld (debug_mark),a  
a9a1 3a b0 a9			ld a, (.dmark+1)  
a9a4 32 66 ee			ld (debug_mark+1),a  
a9a7 3a b1 a9			ld a, (.dmark+2)  
a9aa 32 67 ee			ld (debug_mark+2),a  
a9ad 18 03			jr .pastdmark  
a9af ..			.dmark: db "LS>"  
a9b2 f1			.pastdmark: pop af  
a9b3			endm  
# End of macro DMARK
a9b3					CALLMONITOR 
a9b3 cd 6f ee			call debug_vector  
a9b6				endm  
# End of macro CALLMONITOR
a9b6				endif 
a9b6 cd f3 9a				call forth_push_str 
a9b9			 
a9b9			 
a9b9			 
a9b9					NEXTW 
a9b9 c3 76 9e			jp macro_next 
a9bc				endm 
# End of macro NEXTW
a9bc			 
a9bc			;.luno:    db "Word not found",0 
a9bc			 
a9bc			 
a9bc			 
a9bc			 
a9bc			 
a9bc			;		push hl   ; save pointer to start of uword def string 
a9bc			; 
a9bc			;; look for FORTH_EOL_LINE 
a9bc			;		ld a, FORTH_END_BUFFER 
a9bc			;		call strlent 
a9bc			; 
a9bc			;		inc hl		 ; space for coln def 
a9bc			;		inc hl 
a9bc			;		inc hl          ; space for terms 
a9bc			;		inc hl 
a9bc			; 
a9bc			;		ld a, 20   ; TODO get actual length 
a9bc			;		call addatohl    ; include a random amount of room for the uword name 
a9bc			; 
a9bc			;		 
a9bc			;	if DEBUG_FORTH_WORDS 
a9bc			;		DMARK "Lt1" 
a9bc			;		CALLMONITOR 
a9bc			;	endif 
a9bc			;		 
a9bc			; 
a9bc			;; malloc space for the string because we cant change it 
a9bc			; 
a9bc			;		call malloc 
a9bc			;	if DEBUG_FORTH_MALLOC_GUARD 
a9bc			;		push af 
a9bc			;		call ishlzero 
a9bc			;		pop af 
a9bc			;		 
a9bc			;		call z,malloc_error 
a9bc			;	endif 
a9bc			; 
a9bc			;	if DEBUG_FORTH_WORDS 
a9bc			;		DMARK "Lt2" 
a9bc			;		CALLMONITOR 
a9bc			;	endif 
a9bc			;		pop de 
a9bc			;		push hl    ; push the malloc to release later 
a9bc			;		push hl   ;  push back a copy for the later stack push 
a9bc			;		 
a9bc			;; copy the string swapping out the zero terms for spaces 
a9bc			; 
a9bc			;		; de has our source 
a9bc			;		; hl has our dest 
a9bc			; 
a9bc			;; add the coln def 
a9bc			; 
a9bc			;		ld a, ':' 
a9bc			;		ld (hl), a 
a9bc			;		inc hl 
a9bc			;		ld a, ' ' 
a9bc			;		ld (hl), a 
a9bc			;		inc hl 
a9bc			; 
a9bc			;; add the uname word 
a9bc			;		push de   ; save our string for now 
a9bc			;		ex de, hl 
a9bc			; 
a9bc			;		FORTH_DSP_VALUE 
a9bc			;		;v5 FORTH_DSP_VALUE 
a9bc			; 
a9bc			;		inc hl   ; skip type but we know by now this is OK 
a9bc			; 
a9bc			;.luword:	ld a,(hl) 
a9bc			;		cp 0 
a9bc			;		jr z, .luword2 
a9bc			;		ld (de), a 
a9bc			;		inc de 
a9bc			;		inc hl 
a9bc			;		jr .luword 
a9bc			; 
a9bc			;.luword2:	ld a, ' ' 
a9bc			;		ld (de), a 
a9bc			;;		inc hl 
a9bc			;;		inc de 
a9bc			;;		ld (de), a 
a9bc			;;		inc hl 
a9bc			;		inc de 
a9bc			; 
a9bc			;		ex de, hl 
a9bc			;		pop de 
a9bc			;		 
a9bc			;		 
a9bc			; 
a9bc			;; detoken that string and copy it 
a9bc			; 
a9bc			;	if DEBUG_FORTH_WORDS 
a9bc			;		DMARK "Lt2" 
a9bc			;		CALLMONITOR 
a9bc			;	endif 
a9bc			;.ldetok:	ld a, (de) 
a9bc			;		cp FORTH_END_BUFFER 
a9bc			;		jr z, .ldetokend 
a9bc			;		; swap out any zero term for space 
a9bc			;		cp 0 
a9bc			;		jr nz, .ldetoknext 
a9bc			;		ld a, ' ' 
a9bc			; 
a9bc			;	if DEBUG_FORTH_WORDS 
a9bc			;		DMARK "LtS" 
a9bc			;		CALLMONITOR 
a9bc			;	endif 
a9bc			;.ldetoknext:	ld (hl), a 
a9bc			;		inc de 
a9bc			;		inc hl 
a9bc			;		jr .ldetok 
a9bc			; 
a9bc			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
a9bc			;		ld (hl), a  
a9bc			; 
a9bc			;; free that temp malloc 
a9bc			; 
a9bc			;		pop hl    
a9bc			; 
a9bc			;	if DEBUG_FORTH_WORDS 
a9bc			;		DMARK "Lt4" 
a9bc			;		CALLMONITOR 
a9bc			;	endif 
a9bc			;		call forth_apushstrhl 
a9bc			; 
a9bc			;		; get rid of temp malloc area 
a9bc			; 
a9bc			;		pop hl 
a9bc			;		call free 
a9bc			; 
a9bc			;		jr .ludone 
a9bc			; 
a9bc			;.lnuword:	pop hl 
a9bc			;		call forth_tok_next 
a9bc			;		jp .ldouscan  
a9bc			; 
a9bc			;.ludone:		 pop hl 
a9bc			; 
a9bc					NEXTW 
a9bc c3 76 9e			jp macro_next 
a9bf				endm 
# End of macro NEXTW
a9bf			 
a9bf			.FORGET: 
a9bf				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
a9bf 5d				db WORD_SYS_CORE+73             
a9c0 38 aa			dw .NOP            
a9c2 07				db 6 + 1 
a9c3 .. 00			db "FORGET",0              
a9ca				endm 
# End of macro CWHEAD
a9ca			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
a9ca			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
a9ca			; | |  
a9ca			; | | e.g. "MORE" forget 
a9ca					if DEBUG_FORTH_WORDS_KEY 
a9ca						DMARK "FRG" 
a9ca f5				push af  
a9cb 3a df a9			ld a, (.dmark)  
a9ce 32 65 ee			ld (debug_mark),a  
a9d1 3a e0 a9			ld a, (.dmark+1)  
a9d4 32 66 ee			ld (debug_mark+1),a  
a9d7 3a e1 a9			ld a, (.dmark+2)  
a9da 32 67 ee			ld (debug_mark+2),a  
a9dd 18 03			jr .pastdmark  
a9df ..			.dmark: db "FRG"  
a9e2 f1			.pastdmark: pop af  
a9e3			endm  
# End of macro DMARK
a9e3						CALLMONITOR 
a9e3 cd 6f ee			call debug_vector  
a9e6				endm  
# End of macro CALLMONITOR
a9e6					endif 
a9e6			 
a9e6				; find uword 
a9e6			        ; update start of word with "_" 
a9e6				; replace uword with deleted flag 
a9e6			 
a9e6			 
a9e6			;	if DEBUG_FORTH_WORDS 
a9e6			;		DMARK "FOG" 
a9e6			;		CALLMONITOR 
a9e6			;	endif 
a9e6			 
a9e6			 
a9e6					; Get ptr to the word we need to look up 
a9e6			 
a9e6					FORTH_DSP_VALUEHL 
a9e6 cd 8a 9c			call macro_dsp_valuehl 
a9e9				endm 
# End of macro FORTH_DSP_VALUEHL
a9e9					;v5 FORTH_DSP_VALUE 
a9e9				; TODO type check 
a9e9			;		inc hl    ; Skip type check  
a9e9 e5					push hl 
a9ea c1					pop bc 
a9eb			;		ex de, hl    ; put into DE 
a9eb			 
a9eb			 
a9eb 21 7f dd				ld hl, baseram 
a9ee					;ld hl, baseusermem 
a9ee			 
a9ee				; skip dict stub 
a9ee			;	call forth_tok_next 
a9ee e5			push hl   ; sacreifical push 
a9ef			 
a9ef			.fldouscanm: 
a9ef e1				pop hl 
a9f0			.fldouscan: 
a9f0			;	if DEBUG_FORTH_WORDS 
a9f0			;		DMARK "LSs" 
a9f0			;		CALLMONITOR 
a9f0			;	endif 
a9f0				; skip dict stub 
a9f0 cd c7 9f				call forth_tok_next 
a9f3			 
a9f3			 
a9f3			; while we have words to look for 
a9f3			 
a9f3 7e				ld a, (hl)      
a9f4			;	if DEBUG_FORTH_WORDS 
a9f4			;		DMARK "LSk" 
a9f4			;		CALLMONITOR 
a9f4			;	endif 
a9f4 fe 00				cp WORD_SYS_END 
a9f6 ca 32 aa				jp z, .flunotfound 
a9f9 fe 01				cp WORD_SYS_UWORD 
a9fb c2 f0 a9				jp nz, .fldouscan 
a9fe			 
a9fe			;	if DEBUG_FORTH_WORDS 
a9fe			;		DMARK "LSu" 
a9fe			;		CALLMONITOR 
a9fe			;	endif 
a9fe			 
a9fe					; found a uword but is it the one we want... 
a9fe			 
a9fe c5					push bc     ; uword to find is on bc 
a9ff d1					pop de 
aa00			 
aa00 e5					push hl  ; to save the ptr 
aa01			 
aa01					; skip opcode 
aa01 23					inc hl  
aa02					; skip next ptr 
aa02 23					inc hl  
aa03 23					inc hl 
aa04					; skip len 
aa04 23					inc hl 
aa05			 
aa05			;	if DEBUG_FORTH_WORDS 
aa05			;		DMARK "LSc" 
aa05			;		CALLMONITOR 
aa05			;	endif 
aa05 cd 88 90				call strcmp 
aa08 c2 ef a9				jp nz, .fldouscanm 
aa0b			; 
aa0b			; 
aa0b			;; while we have words to look for 
aa0b			; 
aa0b			;.fdouscan:	ld a, (hl)      
aa0b			;	if DEBUG_FORTH_WORDS 
aa0b			;		DMARK "LSs" 
aa0b			;		CALLMONITOR 
aa0b			;	endif 
aa0b			;		cp WORD_SYS_END 
aa0b			;		jp z, .fudone 
aa0b			;		cp WORD_SYS_UWORD 
aa0b			;		jp nz, .fnuword 
aa0b			; 
aa0b			;	if DEBUG_FORTH_WORDS 
aa0b			;		DMARK "FGu" 
aa0b			;		CALLMONITOR 
aa0b			;	endif 
aa0b			; 
aa0b			;		; found a uword but is it the one we want... 
aa0b			; 
aa0b			; 
aa0b			;	        pop de   ; get back the dsp name 
aa0b			;		push de 
aa0b			; 
aa0b			;		push hl  ; to save the ptr 
aa0b			; 
aa0b			;		; skip opcode 
aa0b			;		inc hl  
aa0b			;		; skip next ptr 
aa0b			;		inc hl  
aa0b			;		inc hl 
aa0b			;		; skip len 
aa0b			;		inc hl 
aa0b			; 
aa0b			;	if DEBUG_FORTH_WORDS 
aa0b			;		DMARK "FGc" 
aa0b			;		CALLMONITOR 
aa0b			;	endif 
aa0b			;		call strcmp 
aa0b			;		jp nz, .fnuword 
aa0b			 
aa0b			 
aa0b e1			pop hl 
aa0c			 
aa0c				 
aa0c				if DEBUG_FORTH_WORDS 
aa0c					DMARK "FGm" 
aa0c f5				push af  
aa0d 3a 21 aa			ld a, (.dmark)  
aa10 32 65 ee			ld (debug_mark),a  
aa13 3a 22 aa			ld a, (.dmark+1)  
aa16 32 66 ee			ld (debug_mark+1),a  
aa19 3a 23 aa			ld a, (.dmark+2)  
aa1c 32 67 ee			ld (debug_mark+2),a  
aa1f 18 03			jr .pastdmark  
aa21 ..			.dmark: db "FGm"  
aa24 f1			.pastdmark: pop af  
aa25			endm  
# End of macro DMARK
aa25					CALLMONITOR 
aa25 cd 6f ee			call debug_vector  
aa28				endm  
# End of macro CALLMONITOR
aa28				endif 
aa28			 
aa28			 
aa28			 
aa28					; we have a uword so push its name to the stack 
aa28			 
aa28			;	   	push hl  ; save so we can move to next dict block 
aa28			;pop hl 
aa28			 
aa28					; update opcode to deleted 
aa28 3e 03				ld a, WORD_SYS_DELETED 
aa2a 77					ld (hl), a 
aa2b			 
aa2b 23					inc hl  
aa2c					; skip next ptr 
aa2c 23					inc hl  
aa2d 23					inc hl 
aa2e					; skip len 
aa2e 23					inc hl 
aa2f			 
aa2f					; TODO change parser to skip deleted words but for now mark it out 
aa2f 3e 5f				ld a, "_" 
aa31 77					ld  (hl),a 
aa32			 
aa32			;		jr .fudone 
aa32			; 
aa32			;.fnuword:	pop hl 
aa32			;		call forth_tok_next 
aa32			;		jp .fdouscan  
aa32			 
aa32			.flunotfound:		  
aa32			 
aa32			 
aa32					 
aa32					FORTH_DSP_POP 
aa32 cd 42 9d			call macro_forth_dsp_pop 
aa35				endm 
# End of macro FORTH_DSP_POP
aa35			;		ld hl, .luno 
aa35			;.fudone:		 pop hl 
aa35					NEXTW 
aa35 c3 76 9e			jp macro_next 
aa38				endm 
# End of macro NEXTW
aa38			.NOP: 
aa38				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
aa38 61				db WORD_SYS_CORE+77             
aa39 5f aa			dw .COMO            
aa3b 04				db 3 + 1 
aa3c .. 00			db "NOP",0              
aa40				endm 
# End of macro CWHEAD
aa40			; | NOP (  --  ) Do nothing | DONE 
aa40					if DEBUG_FORTH_WORDS_KEY 
aa40						DMARK "NOP" 
aa40 f5				push af  
aa41 3a 55 aa			ld a, (.dmark)  
aa44 32 65 ee			ld (debug_mark),a  
aa47 3a 56 aa			ld a, (.dmark+1)  
aa4a 32 66 ee			ld (debug_mark+1),a  
aa4d 3a 57 aa			ld a, (.dmark+2)  
aa50 32 67 ee			ld (debug_mark+2),a  
aa53 18 03			jr .pastdmark  
aa55 ..			.dmark: db "NOP"  
aa58 f1			.pastdmark: pop af  
aa59			endm  
# End of macro DMARK
aa59						CALLMONITOR 
aa59 cd 6f ee			call debug_vector  
aa5c				endm  
# End of macro CALLMONITOR
aa5c					endif 
aa5c				       NEXTW 
aa5c c3 76 9e			jp macro_next 
aa5f				endm 
# End of macro NEXTW
aa5f			.COMO: 
aa5f				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
aa5f 6e				db WORD_SYS_CORE+90             
aa60 b1 aa			dw .COMC            
aa62 02				db 1 + 1 
aa63 .. 00			db "(",0              
aa65				endm 
# End of macro CWHEAD
aa65			; | ( ( -- )  Start of comment | DONE 
aa65			 
aa65			 
aa65 2a bc e5				ld hl, ( os_tok_ptr) 
aa68 11 ac aa			ld de, .closepar 
aa6b					 
aa6b					if DEBUG_FORTH_WORDS 
aa6b						DMARK ").." 
aa6b f5				push af  
aa6c 3a 80 aa			ld a, (.dmark)  
aa6f 32 65 ee			ld (debug_mark),a  
aa72 3a 81 aa			ld a, (.dmark+1)  
aa75 32 66 ee			ld (debug_mark+1),a  
aa78 3a 82 aa			ld a, (.dmark+2)  
aa7b 32 67 ee			ld (debug_mark+2),a  
aa7e 18 03			jr .pastdmark  
aa80 ..			.dmark: db ").."  
aa83 f1			.pastdmark: pop af  
aa84			endm  
# End of macro DMARK
aa84						CALLMONITOR 
aa84 cd 6f ee			call debug_vector  
aa87				endm  
# End of macro CALLMONITOR
aa87					endif 
aa87 cd 91 9f			call findnexttok  
aa8a			 
aa8a					if DEBUG_FORTH_WORDS 
aa8a						DMARK "IF5" 
aa8a f5				push af  
aa8b 3a 9f aa			ld a, (.dmark)  
aa8e 32 65 ee			ld (debug_mark),a  
aa91 3a a0 aa			ld a, (.dmark+1)  
aa94 32 66 ee			ld (debug_mark+1),a  
aa97 3a a1 aa			ld a, (.dmark+2)  
aa9a 32 67 ee			ld (debug_mark+2),a  
aa9d 18 03			jr .pastdmark  
aa9f ..			.dmark: db "IF5"  
aaa2 f1			.pastdmark: pop af  
aaa3			endm  
# End of macro DMARK
aaa3						CALLMONITOR 
aaa3 cd 6f ee			call debug_vector  
aaa6				endm  
# End of macro CALLMONITOR
aaa6					endif 
aaa6				; replace below with ) exec using tok_ptr 
aaa6 22 bc e5			ld (os_tok_ptr), hl 
aaa9 c3 07 9f			jp exec1 
aaac			 
aaac .. 00			.closepar:   db ")",0 
aaae			 
aaae				       NEXTW 
aaae c3 76 9e			jp macro_next 
aab1				endm 
# End of macro NEXTW
aab1			.COMC: 
aab1				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
aab1 6f				db WORD_SYS_CORE+91             
aab2 ba aa			dw .SCRATCH            
aab4 02				db 1 + 1 
aab5 .. 00			db ")",0              
aab7				endm 
# End of macro CWHEAD
aab7			; | ) ( -- )  End of comment |  DONE  
aab7				       NEXTW 
aab7 c3 76 9e			jp macro_next 
aaba				endm 
# End of macro NEXTW
aaba			 
aaba			.SCRATCH: 
aaba				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
aaba 6f				db WORD_SYS_CORE+91             
aabb f5 aa			dw .INC            
aabd 08				db 7 + 1 
aabe .. 00			db "SCRATCH",0              
aac6				endm 
# End of macro CWHEAD
aac6			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
aac6			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
aac6			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
aac6			; | |  
aac6			; | | e.g.    : score $00 scratch ; 
aac6			; | |  
aac6			; | | $00 score ! 
aac6			; | | $01 score +! 
aac6			; | |  
aac6			; | | e.g.   : varword $0a scratch ;  
aac6			; | | 
aac6			; | | $8000 varword ! 
aac6					if DEBUG_FORTH_WORDS_KEY 
aac6						DMARK "SCR" 
aac6 f5				push af  
aac7 3a db aa			ld a, (.dmark)  
aaca 32 65 ee			ld (debug_mark),a  
aacd 3a dc aa			ld a, (.dmark+1)  
aad0 32 66 ee			ld (debug_mark+1),a  
aad3 3a dd aa			ld a, (.dmark+2)  
aad6 32 67 ee			ld (debug_mark+2),a  
aad9 18 03			jr .pastdmark  
aadb ..			.dmark: db "SCR"  
aade f1			.pastdmark: pop af  
aadf			endm  
# End of macro DMARK
aadf						CALLMONITOR 
aadf cd 6f ee			call debug_vector  
aae2				endm  
# End of macro CALLMONITOR
aae2					endif 
aae2			 
aae2					FORTH_DSP_VALUEHL 
aae2 cd 8a 9c			call macro_dsp_valuehl 
aae5				endm 
# End of macro FORTH_DSP_VALUEHL
aae5				 
aae5					FORTH_DSP_POP 
aae5 cd 42 9d			call macro_forth_dsp_pop 
aae8				endm 
# End of macro FORTH_DSP_POP
aae8			 
aae8 7d					ld a, l 
aae9 21 e0 e7				ld hl, os_var_array 
aaec cd ea 8c				call addatohl 
aaef			 
aaef cd 85 9a				call forth_push_numhl 
aaf2			 
aaf2				       NEXTW 
aaf2 c3 76 9e			jp macro_next 
aaf5				endm 
# End of macro NEXTW
aaf5			 
aaf5			.INC: 
aaf5				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
aaf5 6f				db WORD_SYS_CORE+91             
aaf6 4b ab			dw .DEC            
aaf8 03				db 2 + 1 
aaf9 .. 00			db "+!",0              
aafc				endm 
# End of macro CWHEAD
aafc			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
aafc					if DEBUG_FORTH_WORDS_KEY 
aafc						DMARK "+s_" 
aafc f5				push af  
aafd 3a 11 ab			ld a, (.dmark)  
ab00 32 65 ee			ld (debug_mark),a  
ab03 3a 12 ab			ld a, (.dmark+1)  
ab06 32 66 ee			ld (debug_mark+1),a  
ab09 3a 13 ab			ld a, (.dmark+2)  
ab0c 32 67 ee			ld (debug_mark+2),a  
ab0f 18 03			jr .pastdmark  
ab11 ..			.dmark: db "+s_"  
ab14 f1			.pastdmark: pop af  
ab15			endm  
# End of macro DMARK
ab15						CALLMONITOR 
ab15 cd 6f ee			call debug_vector  
ab18				endm  
# End of macro CALLMONITOR
ab18					endif 
ab18			 
ab18					FORTH_DSP_VALUEHL 
ab18 cd 8a 9c			call macro_dsp_valuehl 
ab1b				endm 
# End of macro FORTH_DSP_VALUEHL
ab1b			 
ab1b e5					push hl   ; save address 
ab1c			 
ab1c					FORTH_DSP_POP 
ab1c cd 42 9d			call macro_forth_dsp_pop 
ab1f				endm 
# End of macro FORTH_DSP_POP
ab1f			 
ab1f					FORTH_DSP_VALUEHL 
ab1f cd 8a 9c			call macro_dsp_valuehl 
ab22				endm 
# End of macro FORTH_DSP_VALUEHL
ab22			 
ab22 e5					push hl 
ab23					FORTH_DSP_POP 
ab23 cd 42 9d			call macro_forth_dsp_pop 
ab26				endm 
# End of macro FORTH_DSP_POP
ab26 e1					pop hl 
ab27			 
ab27					; hl contains value to add to byte at a 
ab27				 
ab27 eb					ex de, hl 
ab28			 
ab28 e1					pop hl 
ab29			 
ab29					if DEBUG_FORTH_WORDS 
ab29						DMARK "INC" 
ab29 f5				push af  
ab2a 3a 3e ab			ld a, (.dmark)  
ab2d 32 65 ee			ld (debug_mark),a  
ab30 3a 3f ab			ld a, (.dmark+1)  
ab33 32 66 ee			ld (debug_mark+1),a  
ab36 3a 40 ab			ld a, (.dmark+2)  
ab39 32 67 ee			ld (debug_mark+2),a  
ab3c 18 03			jr .pastdmark  
ab3e ..			.dmark: db "INC"  
ab41 f1			.pastdmark: pop af  
ab42			endm  
# End of macro DMARK
ab42						CALLMONITOR 
ab42 cd 6f ee			call debug_vector  
ab45				endm  
# End of macro CALLMONITOR
ab45					endif 
ab45			 
ab45 7e					ld a,(hl) 
ab46 83					add e 
ab47 77					ld (hl),a 
ab48			 
ab48			 
ab48			 
ab48				       NEXTW 
ab48 c3 76 9e			jp macro_next 
ab4b				endm 
# End of macro NEXTW
ab4b			 
ab4b			.DEC: 
ab4b				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
ab4b 6f				db WORD_SYS_CORE+91             
ab4c 9f ab			dw .INC2            
ab4e 03				db 2 + 1 
ab4f .. 00			db "-!",0              
ab52				endm 
# End of macro CWHEAD
ab52			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
ab52					if DEBUG_FORTH_WORDS_KEY 
ab52						DMARK "-s_" 
ab52 f5				push af  
ab53 3a 67 ab			ld a, (.dmark)  
ab56 32 65 ee			ld (debug_mark),a  
ab59 3a 68 ab			ld a, (.dmark+1)  
ab5c 32 66 ee			ld (debug_mark+1),a  
ab5f 3a 69 ab			ld a, (.dmark+2)  
ab62 32 67 ee			ld (debug_mark+2),a  
ab65 18 03			jr .pastdmark  
ab67 ..			.dmark: db "-s_"  
ab6a f1			.pastdmark: pop af  
ab6b			endm  
# End of macro DMARK
ab6b						CALLMONITOR 
ab6b cd 6f ee			call debug_vector  
ab6e				endm  
# End of macro CALLMONITOR
ab6e					endif 
ab6e			 
ab6e					FORTH_DSP_VALUEHL 
ab6e cd 8a 9c			call macro_dsp_valuehl 
ab71				endm 
# End of macro FORTH_DSP_VALUEHL
ab71			 
ab71 e5					push hl   ; save address 
ab72			 
ab72					FORTH_DSP_POP 
ab72 cd 42 9d			call macro_forth_dsp_pop 
ab75				endm 
# End of macro FORTH_DSP_POP
ab75			 
ab75					FORTH_DSP_VALUEHL 
ab75 cd 8a 9c			call macro_dsp_valuehl 
ab78				endm 
# End of macro FORTH_DSP_VALUEHL
ab78			 
ab78					; hl contains value to add to byte at a 
ab78				 
ab78 eb					ex de, hl 
ab79			 
ab79 e1					pop hl 
ab7a			 
ab7a					if DEBUG_FORTH_WORDS 
ab7a						DMARK "DEC" 
ab7a f5				push af  
ab7b 3a 8f ab			ld a, (.dmark)  
ab7e 32 65 ee			ld (debug_mark),a  
ab81 3a 90 ab			ld a, (.dmark+1)  
ab84 32 66 ee			ld (debug_mark+1),a  
ab87 3a 91 ab			ld a, (.dmark+2)  
ab8a 32 67 ee			ld (debug_mark+2),a  
ab8d 18 03			jr .pastdmark  
ab8f ..			.dmark: db "DEC"  
ab92 f1			.pastdmark: pop af  
ab93			endm  
# End of macro DMARK
ab93						CALLMONITOR 
ab93 cd 6f ee			call debug_vector  
ab96				endm  
# End of macro CALLMONITOR
ab96					endif 
ab96			 
ab96 7e					ld a,(hl) 
ab97 93					sub e 
ab98 77					ld (hl),a 
ab99			 
ab99			 
ab99					FORTH_DSP_POP 
ab99 cd 42 9d			call macro_forth_dsp_pop 
ab9c				endm 
# End of macro FORTH_DSP_POP
ab9c			 
ab9c				       NEXTW 
ab9c c3 76 9e			jp macro_next 
ab9f				endm 
# End of macro NEXTW
ab9f			 
ab9f			.INC2: 
ab9f				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
ab9f 6f				db WORD_SYS_CORE+91             
aba0 4c ac			dw .DEC2            
aba2 04				db 3 + 1 
aba3 .. 00			db "+2!",0              
aba7				endm 
# End of macro CWHEAD
aba7			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
aba7			 
aba7					if DEBUG_FORTH_WORDS_KEY 
aba7						DMARK "+2s" 
aba7 f5				push af  
aba8 3a bc ab			ld a, (.dmark)  
abab 32 65 ee			ld (debug_mark),a  
abae 3a bd ab			ld a, (.dmark+1)  
abb1 32 66 ee			ld (debug_mark+1),a  
abb4 3a be ab			ld a, (.dmark+2)  
abb7 32 67 ee			ld (debug_mark+2),a  
abba 18 03			jr .pastdmark  
abbc ..			.dmark: db "+2s"  
abbf f1			.pastdmark: pop af  
abc0			endm  
# End of macro DMARK
abc0						CALLMONITOR 
abc0 cd 6f ee			call debug_vector  
abc3				endm  
# End of macro CALLMONITOR
abc3					endif 
abc3			 
abc3					; Address 
abc3			 
abc3					FORTH_DSP_VALUEHL 
abc3 cd 8a 9c			call macro_dsp_valuehl 
abc6				endm 
# End of macro FORTH_DSP_VALUEHL
abc6			 
abc6 e5					push hl    ; save address 
abc7			 
abc7					; load content into de 
abc7			 
abc7 5e					ld e,(hl) 
abc8 23					inc hl 
abc9 56					ld d, (hl) 
abca			 
abca					if DEBUG_FORTH_WORDS 
abca						DMARK "+2a" 
abca f5				push af  
abcb 3a df ab			ld a, (.dmark)  
abce 32 65 ee			ld (debug_mark),a  
abd1 3a e0 ab			ld a, (.dmark+1)  
abd4 32 66 ee			ld (debug_mark+1),a  
abd7 3a e1 ab			ld a, (.dmark+2)  
abda 32 67 ee			ld (debug_mark+2),a  
abdd 18 03			jr .pastdmark  
abdf ..			.dmark: db "+2a"  
abe2 f1			.pastdmark: pop af  
abe3			endm  
# End of macro DMARK
abe3						CALLMONITOR 
abe3 cd 6f ee			call debug_vector  
abe6				endm  
# End of macro CALLMONITOR
abe6					endif 
abe6			 
abe6					FORTH_DSP_POP 
abe6 cd 42 9d			call macro_forth_dsp_pop 
abe9				endm 
# End of macro FORTH_DSP_POP
abe9			 
abe9					; Get value to add 
abe9			 
abe9					FORTH_DSP_VALUE 
abe9 cd 73 9c			call macro_forth_dsp_value 
abec				endm 
# End of macro FORTH_DSP_VALUE
abec			 
abec					if DEBUG_FORTH_WORDS 
abec						DMARK "+2v" 
abec f5				push af  
abed 3a 01 ac			ld a, (.dmark)  
abf0 32 65 ee			ld (debug_mark),a  
abf3 3a 02 ac			ld a, (.dmark+1)  
abf6 32 66 ee			ld (debug_mark+1),a  
abf9 3a 03 ac			ld a, (.dmark+2)  
abfc 32 67 ee			ld (debug_mark+2),a  
abff 18 03			jr .pastdmark  
ac01 ..			.dmark: db "+2v"  
ac04 f1			.pastdmark: pop af  
ac05			endm  
# End of macro DMARK
ac05						CALLMONITOR 
ac05 cd 6f ee			call debug_vector  
ac08				endm  
# End of macro CALLMONITOR
ac08					endif 
ac08			 
ac08 19					add hl, de 
ac09			 
ac09					if DEBUG_FORTH_WORDS 
ac09						DMARK "+2+" 
ac09 f5				push af  
ac0a 3a 1e ac			ld a, (.dmark)  
ac0d 32 65 ee			ld (debug_mark),a  
ac10 3a 1f ac			ld a, (.dmark+1)  
ac13 32 66 ee			ld (debug_mark+1),a  
ac16 3a 20 ac			ld a, (.dmark+2)  
ac19 32 67 ee			ld (debug_mark+2),a  
ac1c 18 03			jr .pastdmark  
ac1e ..			.dmark: db "+2+"  
ac21 f1			.pastdmark: pop af  
ac22			endm  
# End of macro DMARK
ac22						CALLMONITOR 
ac22 cd 6f ee			call debug_vector  
ac25				endm  
# End of macro CALLMONITOR
ac25					endif 
ac25			 
ac25					; move result to de 
ac25			 
ac25 eb					ex de, hl 
ac26			 
ac26					; Address 
ac26			 
ac26 e1					pop hl 
ac27			 
ac27					; save it back 
ac27			 
ac27 73					ld (hl), e 
ac28 23					inc hl 
ac29 72					ld (hl), d 
ac2a			 
ac2a					if DEBUG_FORTH_WORDS 
ac2a						DMARK "+2e" 
ac2a f5				push af  
ac2b 3a 3f ac			ld a, (.dmark)  
ac2e 32 65 ee			ld (debug_mark),a  
ac31 3a 40 ac			ld a, (.dmark+1)  
ac34 32 66 ee			ld (debug_mark+1),a  
ac37 3a 41 ac			ld a, (.dmark+2)  
ac3a 32 67 ee			ld (debug_mark+2),a  
ac3d 18 03			jr .pastdmark  
ac3f ..			.dmark: db "+2e"  
ac42 f1			.pastdmark: pop af  
ac43			endm  
# End of macro DMARK
ac43						CALLMONITOR 
ac43 cd 6f ee			call debug_vector  
ac46				endm  
# End of macro CALLMONITOR
ac46					endif 
ac46			 
ac46			 
ac46			 
ac46					FORTH_DSP_POP 
ac46 cd 42 9d			call macro_forth_dsp_pop 
ac49				endm 
# End of macro FORTH_DSP_POP
ac49			 
ac49			 
ac49				       NEXTW 
ac49 c3 76 9e			jp macro_next 
ac4c				endm 
# End of macro NEXTW
ac4c			 
ac4c			.DEC2: 
ac4c				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
ac4c 6f				db WORD_SYS_CORE+91             
ac4d fb ac			dw .GET2            
ac4f 04				db 3 + 1 
ac50 .. 00			db "-2!",0              
ac54				endm 
# End of macro CWHEAD
ac54			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
ac54			 
ac54			 
ac54					if DEBUG_FORTH_WORDS_KEY 
ac54						DMARK "-2s" 
ac54 f5				push af  
ac55 3a 69 ac			ld a, (.dmark)  
ac58 32 65 ee			ld (debug_mark),a  
ac5b 3a 6a ac			ld a, (.dmark+1)  
ac5e 32 66 ee			ld (debug_mark+1),a  
ac61 3a 6b ac			ld a, (.dmark+2)  
ac64 32 67 ee			ld (debug_mark+2),a  
ac67 18 03			jr .pastdmark  
ac69 ..			.dmark: db "-2s"  
ac6c f1			.pastdmark: pop af  
ac6d			endm  
# End of macro DMARK
ac6d						CALLMONITOR 
ac6d cd 6f ee			call debug_vector  
ac70				endm  
# End of macro CALLMONITOR
ac70					endif 
ac70			 
ac70					; Address 
ac70			 
ac70					FORTH_DSP_VALUEHL 
ac70 cd 8a 9c			call macro_dsp_valuehl 
ac73				endm 
# End of macro FORTH_DSP_VALUEHL
ac73			 
ac73 e5					push hl    ; save address 
ac74			 
ac74					; load content into de 
ac74			 
ac74 5e					ld e,(hl) 
ac75 23					inc hl 
ac76 56					ld d, (hl) 
ac77			 
ac77					if DEBUG_FORTH_WORDS 
ac77						DMARK "-2a" 
ac77 f5				push af  
ac78 3a 8c ac			ld a, (.dmark)  
ac7b 32 65 ee			ld (debug_mark),a  
ac7e 3a 8d ac			ld a, (.dmark+1)  
ac81 32 66 ee			ld (debug_mark+1),a  
ac84 3a 8e ac			ld a, (.dmark+2)  
ac87 32 67 ee			ld (debug_mark+2),a  
ac8a 18 03			jr .pastdmark  
ac8c ..			.dmark: db "-2a"  
ac8f f1			.pastdmark: pop af  
ac90			endm  
# End of macro DMARK
ac90						CALLMONITOR 
ac90 cd 6f ee			call debug_vector  
ac93				endm  
# End of macro CALLMONITOR
ac93					endif 
ac93			 
ac93					FORTH_DSP_POP 
ac93 cd 42 9d			call macro_forth_dsp_pop 
ac96				endm 
# End of macro FORTH_DSP_POP
ac96			 
ac96					; Get value to remove 
ac96			 
ac96					FORTH_DSP_VALUE 
ac96 cd 73 9c			call macro_forth_dsp_value 
ac99				endm 
# End of macro FORTH_DSP_VALUE
ac99			 
ac99					if DEBUG_FORTH_WORDS 
ac99						DMARK "-2v" 
ac99 f5				push af  
ac9a 3a ae ac			ld a, (.dmark)  
ac9d 32 65 ee			ld (debug_mark),a  
aca0 3a af ac			ld a, (.dmark+1)  
aca3 32 66 ee			ld (debug_mark+1),a  
aca6 3a b0 ac			ld a, (.dmark+2)  
aca9 32 67 ee			ld (debug_mark+2),a  
acac 18 03			jr .pastdmark  
acae ..			.dmark: db "-2v"  
acb1 f1			.pastdmark: pop af  
acb2			endm  
# End of macro DMARK
acb2						CALLMONITOR 
acb2 cd 6f ee			call debug_vector  
acb5				endm  
# End of macro CALLMONITOR
acb5					endif 
acb5			 
acb5 eb					ex de, hl 
acb6 ed 52				sbc hl, de 
acb8			 
acb8					if DEBUG_FORTH_WORDS 
acb8						DMARK "-2d" 
acb8 f5				push af  
acb9 3a cd ac			ld a, (.dmark)  
acbc 32 65 ee			ld (debug_mark),a  
acbf 3a ce ac			ld a, (.dmark+1)  
acc2 32 66 ee			ld (debug_mark+1),a  
acc5 3a cf ac			ld a, (.dmark+2)  
acc8 32 67 ee			ld (debug_mark+2),a  
accb 18 03			jr .pastdmark  
accd ..			.dmark: db "-2d"  
acd0 f1			.pastdmark: pop af  
acd1			endm  
# End of macro DMARK
acd1						CALLMONITOR 
acd1 cd 6f ee			call debug_vector  
acd4				endm  
# End of macro CALLMONITOR
acd4					endif 
acd4			 
acd4					; move result to de 
acd4			 
acd4 eb					ex de, hl 
acd5			 
acd5					; Address 
acd5			 
acd5 e1					pop hl 
acd6			 
acd6					; save it back 
acd6			 
acd6 73					ld (hl), e 
acd7 23					inc hl 
acd8 72					ld (hl), d 
acd9			 
acd9					if DEBUG_FORTH_WORDS 
acd9						DMARK "-2e" 
acd9 f5				push af  
acda 3a ee ac			ld a, (.dmark)  
acdd 32 65 ee			ld (debug_mark),a  
ace0 3a ef ac			ld a, (.dmark+1)  
ace3 32 66 ee			ld (debug_mark+1),a  
ace6 3a f0 ac			ld a, (.dmark+2)  
ace9 32 67 ee			ld (debug_mark+2),a  
acec 18 03			jr .pastdmark  
acee ..			.dmark: db "-2e"  
acf1 f1			.pastdmark: pop af  
acf2			endm  
# End of macro DMARK
acf2						CALLMONITOR 
acf2 cd 6f ee			call debug_vector  
acf5				endm  
# End of macro CALLMONITOR
acf5					endif 
acf5			 
acf5			 
acf5					FORTH_DSP_POP 
acf5 cd 42 9d			call macro_forth_dsp_pop 
acf8				endm 
# End of macro FORTH_DSP_POP
acf8			 
acf8			 
acf8			 
acf8				       NEXTW 
acf8 c3 76 9e			jp macro_next 
acfb				endm 
# End of macro NEXTW
acfb			.GET2: 
acfb				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
acfb 6f				db WORD_SYS_CORE+91             
acfc 30 ad			dw .BANG2            
acfe 03				db 2 + 1 
acff .. 00			db "2@",0              
ad02				endm 
# End of macro CWHEAD
ad02			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ad02					if DEBUG_FORTH_WORDS_KEY 
ad02						DMARK "2A_" 
ad02 f5				push af  
ad03 3a 17 ad			ld a, (.dmark)  
ad06 32 65 ee			ld (debug_mark),a  
ad09 3a 18 ad			ld a, (.dmark+1)  
ad0c 32 66 ee			ld (debug_mark+1),a  
ad0f 3a 19 ad			ld a, (.dmark+2)  
ad12 32 67 ee			ld (debug_mark+2),a  
ad15 18 03			jr .pastdmark  
ad17 ..			.dmark: db "2A_"  
ad1a f1			.pastdmark: pop af  
ad1b			endm  
# End of macro DMARK
ad1b						CALLMONITOR 
ad1b cd 6f ee			call debug_vector  
ad1e				endm  
# End of macro CALLMONITOR
ad1e					endif 
ad1e			 
ad1e					FORTH_DSP_VALUEHL 
ad1e cd 8a 9c			call macro_dsp_valuehl 
ad21				endm 
# End of macro FORTH_DSP_VALUEHL
ad21			 
ad21 e5					push hl   ; save address 
ad22			 
ad22					FORTH_DSP_POP 
ad22 cd 42 9d			call macro_forth_dsp_pop 
ad25				endm 
# End of macro FORTH_DSP_POP
ad25			 
ad25 e1					pop hl 
ad26			 
ad26 5e					ld e, (hl) 
ad27 23					inc hl 
ad28 56					ld d, (hl) 
ad29			 
ad29 eb					ex de, hl 
ad2a			 
ad2a cd 85 9a				call forth_push_numhl 
ad2d			 
ad2d				       NEXTW 
ad2d c3 76 9e			jp macro_next 
ad30				endm 
# End of macro NEXTW
ad30			.BANG2: 
ad30				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
ad30 6f				db WORD_SYS_CORE+91             
ad31 68 ad			dw .CONFIG            
ad33 03				db 2 + 1 
ad34 .. 00			db "2!",0              
ad37				endm 
# End of macro CWHEAD
ad37			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
ad37					if DEBUG_FORTH_WORDS_KEY 
ad37						DMARK "2S_" 
ad37 f5				push af  
ad38 3a 4c ad			ld a, (.dmark)  
ad3b 32 65 ee			ld (debug_mark),a  
ad3e 3a 4d ad			ld a, (.dmark+1)  
ad41 32 66 ee			ld (debug_mark+1),a  
ad44 3a 4e ad			ld a, (.dmark+2)  
ad47 32 67 ee			ld (debug_mark+2),a  
ad4a 18 03			jr .pastdmark  
ad4c ..			.dmark: db "2S_"  
ad4f f1			.pastdmark: pop af  
ad50			endm  
# End of macro DMARK
ad50						CALLMONITOR 
ad50 cd 6f ee			call debug_vector  
ad53				endm  
# End of macro CALLMONITOR
ad53					endif 
ad53			 
ad53					FORTH_DSP_VALUEHL 
ad53 cd 8a 9c			call macro_dsp_valuehl 
ad56				endm 
# End of macro FORTH_DSP_VALUEHL
ad56			 
ad56 e5					push hl   ; save address 
ad57			 
ad57			 
ad57					FORTH_DSP_POP 
ad57 cd 42 9d			call macro_forth_dsp_pop 
ad5a				endm 
# End of macro FORTH_DSP_POP
ad5a			 
ad5a					 
ad5a					FORTH_DSP_VALUEHL 
ad5a cd 8a 9c			call macro_dsp_valuehl 
ad5d				endm 
# End of macro FORTH_DSP_VALUEHL
ad5d			 
ad5d					FORTH_DSP_POP 
ad5d cd 42 9d			call macro_forth_dsp_pop 
ad60				endm 
# End of macro FORTH_DSP_POP
ad60			 
ad60 eb					ex de, hl    ; value now in de 
ad61			 
ad61 e1					pop hl 
ad62			 
ad62 73					ld (hl), e 
ad63			 
ad63 23					inc hl 
ad64			 
ad64 72					ld (hl), d 
ad65			 
ad65			 
ad65				       NEXTW 
ad65 c3 76 9e			jp macro_next 
ad68				endm 
# End of macro NEXTW
ad68			.CONFIG: 
ad68				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
ad68 6f				db WORD_SYS_CORE+91             
ad69 79 ad			dw .ADTOS            
ad6b 07				db 6 + 1 
ad6c .. 00			db "CONFIG",0              
ad73				endm 
# End of macro CWHEAD
ad73			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
ad73			 
ad73 cd 5e 92				call config 
ad76					NEXTW 
ad76 c3 76 9e			jp macro_next 
ad79				endm 
# End of macro NEXTW
ad79			 
ad79			.ADTOS: 
ad79				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
ad79 6f				db WORD_SYS_CORE+91             
ad7a 8f ad			dw .SBTOS            
ad7c 03				db 2 + 1 
ad7d .. 00			db "1+",0              
ad80				endm 
# End of macro CWHEAD
ad80			; | 1+ ( u -- u )  Increment value on TOS | DONE 
ad80			 
ad80					FORTH_DSP_VALUEHL 
ad80 cd 8a 9c			call macro_dsp_valuehl 
ad83				endm 
# End of macro FORTH_DSP_VALUEHL
ad83 e5					push hl 
ad84			 
ad84					FORTH_DSP_POP 
ad84 cd 42 9d			call macro_forth_dsp_pop 
ad87				endm 
# End of macro FORTH_DSP_POP
ad87 e1					pop hl 
ad88			 
ad88 23					inc hl 
ad89 cd 85 9a				call forth_push_numhl 
ad8c					 
ad8c					NEXTW 
ad8c c3 76 9e			jp macro_next 
ad8f				endm 
# End of macro NEXTW
ad8f			.SBTOS: 
ad8f				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
ad8f 6f				db WORD_SYS_CORE+91             
ad90 a5 ad			dw .ADSTORE            
ad92 03				db 2 + 1 
ad93 .. 00			db "1-",0              
ad96				endm 
# End of macro CWHEAD
ad96			; | 1- ( u -- u )  Decrement value on TOS | DONE 
ad96			 
ad96					FORTH_DSP_VALUEHL 
ad96 cd 8a 9c			call macro_dsp_valuehl 
ad99				endm 
# End of macro FORTH_DSP_VALUEHL
ad99 e5					push hl 
ad9a			 
ad9a					FORTH_DSP_POP 
ad9a cd 42 9d			call macro_forth_dsp_pop 
ad9d				endm 
# End of macro FORTH_DSP_POP
ad9d e1					pop hl 
ad9e			 
ad9e 2b					dec hl 
ad9f cd 85 9a				call forth_push_numhl 
ada2					 
ada2					NEXTW 
ada2 c3 76 9e			jp macro_next 
ada5				endm 
# End of macro NEXTW
ada5			.ADSTORE: 
ada5				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
ada5 6f				db WORD_SYS_CORE+91             
ada6 bb ad			dw .ADWSTORE            
ada8 04				db 3 + 1 
ada9 .. 00			db "1+!",0              
adad				endm 
# End of macro CWHEAD
adad			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
adad			 
adad					FORTH_DSP_VALUEHL 
adad cd 8a 9c			call macro_dsp_valuehl 
adb0				endm 
# End of macro FORTH_DSP_VALUEHL
adb0 e5					push hl 
adb1			 
adb1					FORTH_DSP_POP 
adb1 cd 42 9d			call macro_forth_dsp_pop 
adb4				endm 
# End of macro FORTH_DSP_POP
adb4 e1					pop hl 
adb5			 
adb5 7e					ld a, (hl) 
adb6 3c					inc a 
adb7 77					ld (hl), a 
adb8					 
adb8					NEXTW 
adb8 c3 76 9e			jp macro_next 
adbb				endm 
# End of macro NEXTW
adbb			.ADWSTORE: 
adbb				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
adbb 6f				db WORD_SYS_CORE+91             
adbc d9 ad			dw .SBSTORE            
adbe 05				db 4 + 1 
adbf .. 00			db "1+2!",0              
adc4				endm 
# End of macro CWHEAD
adc4			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
adc4			 
adc4					FORTH_DSP_VALUEHL 
adc4 cd 8a 9c			call macro_dsp_valuehl 
adc7				endm 
# End of macro FORTH_DSP_VALUEHL
adc7 e5					push hl 
adc8			 
adc8					FORTH_DSP_POP 
adc8 cd 42 9d			call macro_forth_dsp_pop 
adcb				endm 
# End of macro FORTH_DSP_POP
adcb e1					pop hl 
adcc			 
adcc e5					push hl 
adcd			 
adcd cd f8 9d				call loadwordinhl 
add0 23					inc hl 
add1			 
add1 d1					pop de 
add2 eb					ex de, hl 
add3 73					ld (hl), e 
add4 23					inc hl 
add5 72					ld (hl), d 
add6					 
add6					NEXTW 
add6 c3 76 9e			jp macro_next 
add9				endm 
# End of macro NEXTW
add9			.SBSTORE: 
add9				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
add9 6f				db WORD_SYS_CORE+91             
adda ef ad			dw .SBWSTORE            
addc 04				db 3 + 1 
addd .. 00			db "1-!",0              
ade1				endm 
# End of macro CWHEAD
ade1			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
ade1			 
ade1					FORTH_DSP_VALUEHL 
ade1 cd 8a 9c			call macro_dsp_valuehl 
ade4				endm 
# End of macro FORTH_DSP_VALUEHL
ade4 e5					push hl 
ade5			 
ade5					FORTH_DSP_POP 
ade5 cd 42 9d			call macro_forth_dsp_pop 
ade8				endm 
# End of macro FORTH_DSP_POP
ade8 e1					pop hl 
ade9			 
ade9 7e					ld a, (hl) 
adea 3d					dec a 
adeb 77					ld (hl), a 
adec					 
adec					NEXTW 
adec c3 76 9e			jp macro_next 
adef				endm 
# End of macro NEXTW
adef			.SBWSTORE: 
adef				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
adef 6f				db WORD_SYS_CORE+91             
adf0 0d ae			dw .ENDCORE            
adf2 05				db 4 + 1 
adf3 .. 00			db "1-2!",0              
adf8				endm 
# End of macro CWHEAD
adf8			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
adf8			 
adf8					FORTH_DSP_VALUEHL 
adf8 cd 8a 9c			call macro_dsp_valuehl 
adfb				endm 
# End of macro FORTH_DSP_VALUEHL
adfb e5					push hl 
adfc			 
adfc					FORTH_DSP_POP 
adfc cd 42 9d			call macro_forth_dsp_pop 
adff				endm 
# End of macro FORTH_DSP_POP
adff e1					pop hl 
ae00			 
ae00 e5					push hl 
ae01			 
ae01 cd f8 9d				call loadwordinhl 
ae04 2b					dec hl 
ae05			 
ae05 d1					pop de 
ae06 eb					ex de, hl 
ae07 73					ld (hl), e 
ae08 23					inc hl 
ae09 72					ld (hl), d 
ae0a					 
ae0a					NEXTW 
ae0a c3 76 9e			jp macro_next 
ae0d				endm 
# End of macro NEXTW
ae0d			.ENDCORE: 
ae0d			 
ae0d			; eof 
ae0d			 
ae0d			 
# End of file forth_words_core.asm
ae0d			include "forth_words_flow.asm" 
ae0d			 
ae0d			; | ## Program Flow Words 
ae0d			 
ae0d			.IF: 
ae0d				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
ae0d 1e				db WORD_SYS_CORE+10             
ae0e 02 af			dw .THEN            
ae10 03				db 2 + 1 
ae11 .. 00			db "IF",0              
ae14				endm 
# End of macro CWHEAD
ae14			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
ae14			; 
ae14					if DEBUG_FORTH_WORDS_KEY 
ae14						DMARK "IF." 
ae14 f5				push af  
ae15 3a 29 ae			ld a, (.dmark)  
ae18 32 65 ee			ld (debug_mark),a  
ae1b 3a 2a ae			ld a, (.dmark+1)  
ae1e 32 66 ee			ld (debug_mark+1),a  
ae21 3a 2b ae			ld a, (.dmark+2)  
ae24 32 67 ee			ld (debug_mark+2),a  
ae27 18 03			jr .pastdmark  
ae29 ..			.dmark: db "IF."  
ae2c f1			.pastdmark: pop af  
ae2d			endm  
# End of macro DMARK
ae2d						CALLMONITOR 
ae2d cd 6f ee			call debug_vector  
ae30				endm  
# End of macro CALLMONITOR
ae30					endif 
ae30			; eval TOS 
ae30			 
ae30				FORTH_DSP_VALUEHL 
ae30 cd 8a 9c			call macro_dsp_valuehl 
ae33				endm 
# End of macro FORTH_DSP_VALUEHL
ae33			 
ae33			;	push hl 
ae33				FORTH_DSP_POP 
ae33 cd 42 9d			call macro_forth_dsp_pop 
ae36				endm 
# End of macro FORTH_DSP_POP
ae36			;	pop hl 
ae36			 
ae36					if DEBUG_FORTH_WORDS 
ae36						DMARK "IF1" 
ae36 f5				push af  
ae37 3a 4b ae			ld a, (.dmark)  
ae3a 32 65 ee			ld (debug_mark),a  
ae3d 3a 4c ae			ld a, (.dmark+1)  
ae40 32 66 ee			ld (debug_mark+1),a  
ae43 3a 4d ae			ld a, (.dmark+2)  
ae46 32 67 ee			ld (debug_mark+2),a  
ae49 18 03			jr .pastdmark  
ae4b ..			.dmark: db "IF1"  
ae4e f1			.pastdmark: pop af  
ae4f			endm  
# End of macro DMARK
ae4f						CALLMONITOR 
ae4f cd 6f ee			call debug_vector  
ae52				endm  
# End of macro CALLMONITOR
ae52					endif 
ae52 b7				or a        ; clear carry flag 
ae53 11 00 00			ld de, 0 
ae56 eb				ex de,hl 
ae57 ed 52			sbc hl, de 
ae59 c2 e3 ae			jp nz, .iftrue 
ae5c			 
ae5c					if DEBUG_FORTH_WORDS 
ae5c						DMARK "IF2" 
ae5c f5				push af  
ae5d 3a 71 ae			ld a, (.dmark)  
ae60 32 65 ee			ld (debug_mark),a  
ae63 3a 72 ae			ld a, (.dmark+1)  
ae66 32 66 ee			ld (debug_mark+1),a  
ae69 3a 73 ae			ld a, (.dmark+2)  
ae6c 32 67 ee			ld (debug_mark+2),a  
ae6f 18 03			jr .pastdmark  
ae71 ..			.dmark: db "IF2"  
ae74 f1			.pastdmark: pop af  
ae75			endm  
# End of macro DMARK
ae75						CALLMONITOR 
ae75 cd 6f ee			call debug_vector  
ae78				endm  
# End of macro CALLMONITOR
ae78					endif 
ae78			 
ae78			; if not true then skip to THEN 
ae78			 
ae78				; TODO get tok_ptr 
ae78				; TODO consume toks until we get to THEN 
ae78			 
ae78 2a bc e5			ld hl, (os_tok_ptr) 
ae7b					if DEBUG_FORTH_WORDS 
ae7b						DMARK "IF3" 
ae7b f5				push af  
ae7c 3a 90 ae			ld a, (.dmark)  
ae7f 32 65 ee			ld (debug_mark),a  
ae82 3a 91 ae			ld a, (.dmark+1)  
ae85 32 66 ee			ld (debug_mark+1),a  
ae88 3a 92 ae			ld a, (.dmark+2)  
ae8b 32 67 ee			ld (debug_mark+2),a  
ae8e 18 03			jr .pastdmark  
ae90 ..			.dmark: db "IF3"  
ae93 f1			.pastdmark: pop af  
ae94			endm  
# End of macro DMARK
ae94						CALLMONITOR 
ae94 cd 6f ee			call debug_vector  
ae97				endm  
# End of macro CALLMONITOR
ae97						 
ae97					endif 
ae97 11 de ae			ld de, .ifthen 
ae9a					if DEBUG_FORTH_WORDS 
ae9a						DMARK "IF4" 
ae9a f5				push af  
ae9b 3a af ae			ld a, (.dmark)  
ae9e 32 65 ee			ld (debug_mark),a  
aea1 3a b0 ae			ld a, (.dmark+1)  
aea4 32 66 ee			ld (debug_mark+1),a  
aea7 3a b1 ae			ld a, (.dmark+2)  
aeaa 32 67 ee			ld (debug_mark+2),a  
aead 18 03			jr .pastdmark  
aeaf ..			.dmark: db "IF4"  
aeb2 f1			.pastdmark: pop af  
aeb3			endm  
# End of macro DMARK
aeb3						CALLMONITOR 
aeb3 cd 6f ee			call debug_vector  
aeb6				endm  
# End of macro CALLMONITOR
aeb6					endif 
aeb6 cd 91 9f			call findnexttok  
aeb9			 
aeb9					if DEBUG_FORTH_WORDS 
aeb9						DMARK "IF5" 
aeb9 f5				push af  
aeba 3a ce ae			ld a, (.dmark)  
aebd 32 65 ee			ld (debug_mark),a  
aec0 3a cf ae			ld a, (.dmark+1)  
aec3 32 66 ee			ld (debug_mark+1),a  
aec6 3a d0 ae			ld a, (.dmark+2)  
aec9 32 67 ee			ld (debug_mark+2),a  
aecc 18 03			jr .pastdmark  
aece ..			.dmark: db "IF5"  
aed1 f1			.pastdmark: pop af  
aed2			endm  
# End of macro DMARK
aed2						CALLMONITOR 
aed2 cd 6f ee			call debug_vector  
aed5				endm  
# End of macro CALLMONITOR
aed5					endif 
aed5				; TODO replace below with ; exec using tok_ptr 
aed5 22 bc e5			ld (os_tok_ptr), hl 
aed8 c3 07 9f			jp exec1 
aedb				NEXTW 
aedb c3 76 9e			jp macro_next 
aede				endm 
# End of macro NEXTW
aede			 
aede .. 00		.ifthen:  db "THEN",0 
aee3			 
aee3			.iftrue:		 
aee3				; Exec next words normally 
aee3			 
aee3				; if true then exec following IF as normal 
aee3					if DEBUG_FORTH_WORDS 
aee3						DMARK "IFT" 
aee3 f5				push af  
aee4 3a f8 ae			ld a, (.dmark)  
aee7 32 65 ee			ld (debug_mark),a  
aeea 3a f9 ae			ld a, (.dmark+1)  
aeed 32 66 ee			ld (debug_mark+1),a  
aef0 3a fa ae			ld a, (.dmark+2)  
aef3 32 67 ee			ld (debug_mark+2),a  
aef6 18 03			jr .pastdmark  
aef8 ..			.dmark: db "IFT"  
aefb f1			.pastdmark: pop af  
aefc			endm  
# End of macro DMARK
aefc						CALLMONITOR 
aefc cd 6f ee			call debug_vector  
aeff				endm  
# End of macro CALLMONITOR
aeff					endif 
aeff			 
aeff					NEXTW 
aeff c3 76 9e			jp macro_next 
af02				endm 
# End of macro NEXTW
af02			.THEN: 
af02				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
af02 1f				db WORD_SYS_CORE+11             
af03 2a af			dw .ELSE            
af05 05				db 4 + 1 
af06 .. 00			db "THEN",0              
af0b				endm 
# End of macro CWHEAD
af0b			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
af0b					if DEBUG_FORTH_WORDS_KEY 
af0b						DMARK "THN" 
af0b f5				push af  
af0c 3a 20 af			ld a, (.dmark)  
af0f 32 65 ee			ld (debug_mark),a  
af12 3a 21 af			ld a, (.dmark+1)  
af15 32 66 ee			ld (debug_mark+1),a  
af18 3a 22 af			ld a, (.dmark+2)  
af1b 32 67 ee			ld (debug_mark+2),a  
af1e 18 03			jr .pastdmark  
af20 ..			.dmark: db "THN"  
af23 f1			.pastdmark: pop af  
af24			endm  
# End of macro DMARK
af24						CALLMONITOR 
af24 cd 6f ee			call debug_vector  
af27				endm  
# End of macro CALLMONITOR
af27					endif 
af27					NEXTW 
af27 c3 76 9e			jp macro_next 
af2a				endm 
# End of macro NEXTW
af2a			.ELSE: 
af2a				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
af2a 20				db WORD_SYS_CORE+12             
af2b 52 af			dw .DO            
af2d 03				db 2 + 1 
af2e .. 00			db "ELSE",0              
af33				endm 
# End of macro CWHEAD
af33			; | ELSE ( -- ) Not supported - does nothing | TODO 
af33			 
af33					if DEBUG_FORTH_WORDS_KEY 
af33						DMARK "ELS" 
af33 f5				push af  
af34 3a 48 af			ld a, (.dmark)  
af37 32 65 ee			ld (debug_mark),a  
af3a 3a 49 af			ld a, (.dmark+1)  
af3d 32 66 ee			ld (debug_mark+1),a  
af40 3a 4a af			ld a, (.dmark+2)  
af43 32 67 ee			ld (debug_mark+2),a  
af46 18 03			jr .pastdmark  
af48 ..			.dmark: db "ELS"  
af4b f1			.pastdmark: pop af  
af4c			endm  
# End of macro DMARK
af4c						CALLMONITOR 
af4c cd 6f ee			call debug_vector  
af4f				endm  
# End of macro CALLMONITOR
af4f					endif 
af4f			 
af4f			 
af4f					NEXTW 
af4f c3 76 9e			jp macro_next 
af52				endm 
# End of macro NEXTW
af52			.DO: 
af52				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
af52 21				db WORD_SYS_CORE+13             
af53 79 b0			dw .LOOP            
af55 03				db 2 + 1 
af56 .. 00			db "DO",0              
af59				endm 
# End of macro CWHEAD
af59			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
af59			 
af59					if DEBUG_FORTH_WORDS_KEY 
af59						DMARK "DO." 
af59 f5				push af  
af5a 3a 6e af			ld a, (.dmark)  
af5d 32 65 ee			ld (debug_mark),a  
af60 3a 6f af			ld a, (.dmark+1)  
af63 32 66 ee			ld (debug_mark+1),a  
af66 3a 70 af			ld a, (.dmark+2)  
af69 32 67 ee			ld (debug_mark+2),a  
af6c 18 03			jr .pastdmark  
af6e ..			.dmark: db "DO."  
af71 f1			.pastdmark: pop af  
af72			endm  
# End of macro DMARK
af72						CALLMONITOR 
af72 cd 6f ee			call debug_vector  
af75				endm  
# End of macro CALLMONITOR
af75					endif 
af75			;  push pc to rsp stack past the DO 
af75			 
af75 2a bc e5				ld hl, (os_tok_ptr) 
af78 23					inc hl   ; D 
af79 23					inc hl  ; O 
af7a 23					inc hl   ; null 
af7b					if DEBUG_FORTH_WORDS 
af7b						DMARK "DO2" 
af7b f5				push af  
af7c 3a 90 af			ld a, (.dmark)  
af7f 32 65 ee			ld (debug_mark),a  
af82 3a 91 af			ld a, (.dmark+1)  
af85 32 66 ee			ld (debug_mark+1),a  
af88 3a 92 af			ld a, (.dmark+2)  
af8b 32 67 ee			ld (debug_mark+2),a  
af8e 18 03			jr .pastdmark  
af90 ..			.dmark: db "DO2"  
af93 f1			.pastdmark: pop af  
af94			endm  
# End of macro DMARK
af94						CALLMONITOR 
af94 cd 6f ee			call debug_vector  
af97				endm  
# End of macro CALLMONITOR
af97					endif 
af97					FORTH_RSP_NEXT 
af97 cd 2c 9a			call macro_forth_rsp_next 
af9a				endm 
# End of macro FORTH_RSP_NEXT
af9a					if DEBUG_FORTH_WORDS 
af9a						DMARK "DO3" 
af9a f5				push af  
af9b 3a af af			ld a, (.dmark)  
af9e 32 65 ee			ld (debug_mark),a  
afa1 3a b0 af			ld a, (.dmark+1)  
afa4 32 66 ee			ld (debug_mark+1),a  
afa7 3a b1 af			ld a, (.dmark+2)  
afaa 32 67 ee			ld (debug_mark+2),a  
afad 18 03			jr .pastdmark  
afaf ..			.dmark: db "DO3"  
afb2 f1			.pastdmark: pop af  
afb3			endm  
# End of macro DMARK
afb3						CALLMONITOR 
afb3 cd 6f ee			call debug_vector  
afb6				endm  
# End of macro CALLMONITOR
afb6					endif 
afb6			 
afb6					;if DEBUG_FORTH_WORDS 
afb6				;		push hl 
afb6			;		endif  
afb6			 
afb6			; get counters from data stack 
afb6			 
afb6			 
afb6					FORTH_DSP_VALUEHL 
afb6 cd 8a 9c			call macro_dsp_valuehl 
afb9				endm 
# End of macro FORTH_DSP_VALUEHL
afb9 e5					push hl		 ; hl now has starting counter which needs to be tos 
afba			 
afba					if DEBUG_FORTH_WORDS 
afba						DMARK "DO4" 
afba f5				push af  
afbb 3a cf af			ld a, (.dmark)  
afbe 32 65 ee			ld (debug_mark),a  
afc1 3a d0 af			ld a, (.dmark+1)  
afc4 32 66 ee			ld (debug_mark+1),a  
afc7 3a d1 af			ld a, (.dmark+2)  
afca 32 67 ee			ld (debug_mark+2),a  
afcd 18 03			jr .pastdmark  
afcf ..			.dmark: db "DO4"  
afd2 f1			.pastdmark: pop af  
afd3			endm  
# End of macro DMARK
afd3						CALLMONITOR 
afd3 cd 6f ee			call debug_vector  
afd6				endm  
# End of macro CALLMONITOR
afd6					endif 
afd6					FORTH_DSP_POP 
afd6 cd 42 9d			call macro_forth_dsp_pop 
afd9				endm 
# End of macro FORTH_DSP_POP
afd9			 
afd9					if DEBUG_FORTH_WORDS 
afd9						DMARK "DO5" 
afd9 f5				push af  
afda 3a ee af			ld a, (.dmark)  
afdd 32 65 ee			ld (debug_mark),a  
afe0 3a ef af			ld a, (.dmark+1)  
afe3 32 66 ee			ld (debug_mark+1),a  
afe6 3a f0 af			ld a, (.dmark+2)  
afe9 32 67 ee			ld (debug_mark+2),a  
afec 18 03			jr .pastdmark  
afee ..			.dmark: db "DO5"  
aff1 f1			.pastdmark: pop af  
aff2			endm  
# End of macro DMARK
aff2						CALLMONITOR 
aff2 cd 6f ee			call debug_vector  
aff5				endm  
# End of macro CALLMONITOR
aff5					endif 
aff5			 
aff5					FORTH_DSP_VALUEHL 
aff5 cd 8a 9c			call macro_dsp_valuehl 
aff8				endm 
# End of macro FORTH_DSP_VALUEHL
aff8			;		push hl		 ; hl now has starting limit counter 
aff8			 
aff8					if DEBUG_FORTH_WORDS 
aff8						DMARK "DO6" 
aff8 f5				push af  
aff9 3a 0d b0			ld a, (.dmark)  
affc 32 65 ee			ld (debug_mark),a  
afff 3a 0e b0			ld a, (.dmark+1)  
b002 32 66 ee			ld (debug_mark+1),a  
b005 3a 0f b0			ld a, (.dmark+2)  
b008 32 67 ee			ld (debug_mark+2),a  
b00b 18 03			jr .pastdmark  
b00d ..			.dmark: db "DO6"  
b010 f1			.pastdmark: pop af  
b011			endm  
# End of macro DMARK
b011						CALLMONITOR 
b011 cd 6f ee			call debug_vector  
b014				endm  
# End of macro CALLMONITOR
b014					endif 
b014					FORTH_DSP_POP 
b014 cd 42 9d			call macro_forth_dsp_pop 
b017				endm 
# End of macro FORTH_DSP_POP
b017			 
b017			; put counters on the loop stack 
b017			 
b017			;		pop hl			 ; limit counter 
b017 d1					pop de			; start counter 
b018			 
b018					; push limit counter 
b018			 
b018					if DEBUG_FORTH_WORDS 
b018						DMARK "DO7" 
b018 f5				push af  
b019 3a 2d b0			ld a, (.dmark)  
b01c 32 65 ee			ld (debug_mark),a  
b01f 3a 2e b0			ld a, (.dmark+1)  
b022 32 66 ee			ld (debug_mark+1),a  
b025 3a 2f b0			ld a, (.dmark+2)  
b028 32 67 ee			ld (debug_mark+2),a  
b02b 18 03			jr .pastdmark  
b02d ..			.dmark: db "DO7"  
b030 f1			.pastdmark: pop af  
b031			endm  
# End of macro DMARK
b031						CALLMONITOR 
b031 cd 6f ee			call debug_vector  
b034				endm  
# End of macro CALLMONITOR
b034					endif 
b034					FORTH_LOOP_NEXT 
b034 cd bb 9c			call macro_forth_loop_next 
b037				endm 
# End of macro FORTH_LOOP_NEXT
b037			 
b037					; push start counter 
b037			 
b037 eb					ex de, hl 
b038					if DEBUG_FORTH_WORDS 
b038						DMARK "DO7" 
b038 f5				push af  
b039 3a 4d b0			ld a, (.dmark)  
b03c 32 65 ee			ld (debug_mark),a  
b03f 3a 4e b0			ld a, (.dmark+1)  
b042 32 66 ee			ld (debug_mark+1),a  
b045 3a 4f b0			ld a, (.dmark+2)  
b048 32 67 ee			ld (debug_mark+2),a  
b04b 18 03			jr .pastdmark  
b04d ..			.dmark: db "DO7"  
b050 f1			.pastdmark: pop af  
b051			endm  
# End of macro DMARK
b051						CALLMONITOR 
b051 cd 6f ee			call debug_vector  
b054				endm  
# End of macro CALLMONITOR
b054					endif 
b054					FORTH_LOOP_NEXT 
b054 cd bb 9c			call macro_forth_loop_next 
b057				endm 
# End of macro FORTH_LOOP_NEXT
b057			 
b057			 
b057					; init first round of I counter 
b057			 
b057 22 e0 e5				ld (os_current_i), hl 
b05a			 
b05a					if DEBUG_FORTH_WORDS 
b05a						DMARK "DO8" 
b05a f5				push af  
b05b 3a 6f b0			ld a, (.dmark)  
b05e 32 65 ee			ld (debug_mark),a  
b061 3a 70 b0			ld a, (.dmark+1)  
b064 32 66 ee			ld (debug_mark+1),a  
b067 3a 71 b0			ld a, (.dmark+2)  
b06a 32 67 ee			ld (debug_mark+2),a  
b06d 18 03			jr .pastdmark  
b06f ..			.dmark: db "DO8"  
b072 f1			.pastdmark: pop af  
b073			endm  
# End of macro DMARK
b073						CALLMONITOR 
b073 cd 6f ee			call debug_vector  
b076				endm  
# End of macro CALLMONITOR
b076					endif 
b076			 
b076					NEXTW 
b076 c3 76 9e			jp macro_next 
b079				endm 
# End of macro NEXTW
b079			.LOOP: 
b079				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b079 22				db WORD_SYS_CORE+14             
b07a 91 b1			dw .I            
b07c 05				db 4 + 1 
b07d .. 00			db "LOOP",0              
b082				endm 
# End of macro CWHEAD
b082			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b082			 
b082				; pop tos as current loop count to hl 
b082			 
b082				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b082			 
b082				FORTH_LOOP_TOS 
b082 cd ee 9c			call macro_forth_loop_tos 
b085				endm 
# End of macro FORTH_LOOP_TOS
b085 e5				push hl 
b086			 
b086					if DEBUG_FORTH_WORDS_KEY 
b086						DMARK "LOP" 
b086 f5				push af  
b087 3a 9b b0			ld a, (.dmark)  
b08a 32 65 ee			ld (debug_mark),a  
b08d 3a 9c b0			ld a, (.dmark+1)  
b090 32 66 ee			ld (debug_mark+1),a  
b093 3a 9d b0			ld a, (.dmark+2)  
b096 32 67 ee			ld (debug_mark+2),a  
b099 18 03			jr .pastdmark  
b09b ..			.dmark: db "LOP"  
b09e f1			.pastdmark: pop af  
b09f			endm  
# End of macro DMARK
b09f						CALLMONITOR 
b09f cd 6f ee			call debug_vector  
b0a2				endm  
# End of macro CALLMONITOR
b0a2					endif 
b0a2				; next item on the stack is the limit. get it 
b0a2			 
b0a2			 
b0a2				FORTH_LOOP_POP 
b0a2 cd f8 9c			call macro_forth_loop_pop 
b0a5				endm 
# End of macro FORTH_LOOP_POP
b0a5			 
b0a5				FORTH_LOOP_TOS 
b0a5 cd ee 9c			call macro_forth_loop_tos 
b0a8				endm 
# End of macro FORTH_LOOP_TOS
b0a8			 
b0a8 d1				pop de		 ; de = i, hl = limit 
b0a9			 
b0a9					if DEBUG_FORTH_WORDS 
b0a9						DMARK "LP1" 
b0a9 f5				push af  
b0aa 3a be b0			ld a, (.dmark)  
b0ad 32 65 ee			ld (debug_mark),a  
b0b0 3a bf b0			ld a, (.dmark+1)  
b0b3 32 66 ee			ld (debug_mark+1),a  
b0b6 3a c0 b0			ld a, (.dmark+2)  
b0b9 32 67 ee			ld (debug_mark+2),a  
b0bc 18 03			jr .pastdmark  
b0be ..			.dmark: db "LP1"  
b0c1 f1			.pastdmark: pop af  
b0c2			endm  
# End of macro DMARK
b0c2						CALLMONITOR 
b0c2 cd 6f ee			call debug_vector  
b0c5				endm  
# End of macro CALLMONITOR
b0c5					endif 
b0c5			 
b0c5				; go back to previous word 
b0c5			 
b0c5 d5				push de    ; save I for inc later 
b0c6			 
b0c6			 
b0c6				; get limit 
b0c6				;  is I at limit? 
b0c6			 
b0c6			 
b0c6					if DEBUG_FORTH_WORDS 
b0c6						DMARK "LP1" 
b0c6 f5				push af  
b0c7 3a db b0			ld a, (.dmark)  
b0ca 32 65 ee			ld (debug_mark),a  
b0cd 3a dc b0			ld a, (.dmark+1)  
b0d0 32 66 ee			ld (debug_mark+1),a  
b0d3 3a dd b0			ld a, (.dmark+2)  
b0d6 32 67 ee			ld (debug_mark+2),a  
b0d9 18 03			jr .pastdmark  
b0db ..			.dmark: db "LP1"  
b0de f1			.pastdmark: pop af  
b0df			endm  
# End of macro DMARK
b0df						CALLMONITOR 
b0df cd 6f ee			call debug_vector  
b0e2				endm  
# End of macro CALLMONITOR
b0e2					endif 
b0e2			 
b0e2 ed 52			sbc hl, de 
b0e4			 
b0e4			 
b0e4				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b0e4			 
b0e4 20 26				jr nz, .loopnotdone 
b0e6			 
b0e6 e1				pop hl   ; get rid of saved I 
b0e7				FORTH_LOOP_POP     ; get rid of limit 
b0e7 cd f8 9c			call macro_forth_loop_pop 
b0ea				endm 
# End of macro FORTH_LOOP_POP
b0ea			 
b0ea				FORTH_RSP_POP     ; get rid of DO ptr 
b0ea cd 4d 9a			call macro_forth_rsp_pop 
b0ed				endm 
# End of macro FORTH_RSP_POP
b0ed			 
b0ed			if DEBUG_FORTH_WORDS 
b0ed						DMARK "LP>" 
b0ed f5				push af  
b0ee 3a 02 b1			ld a, (.dmark)  
b0f1 32 65 ee			ld (debug_mark),a  
b0f4 3a 03 b1			ld a, (.dmark+1)  
b0f7 32 66 ee			ld (debug_mark+1),a  
b0fa 3a 04 b1			ld a, (.dmark+2)  
b0fd 32 67 ee			ld (debug_mark+2),a  
b100 18 03			jr .pastdmark  
b102 ..			.dmark: db "LP>"  
b105 f1			.pastdmark: pop af  
b106			endm  
# End of macro DMARK
b106				CALLMONITOR 
b106 cd 6f ee			call debug_vector  
b109				endm  
# End of macro CALLMONITOR
b109			endif 
b109			 
b109					NEXTW 
b109 c3 76 9e			jp macro_next 
b10c				endm 
# End of macro NEXTW
b10c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b10c			 
b10c			.loopnotdone: 
b10c			 
b10c e1				pop hl    ; get I 
b10d 23				inc hl 
b10e			 
b10e			   	; save new I 
b10e			 
b10e			 
b10e					; set I counter 
b10e			 
b10e 22 e0 e5				ld (os_current_i), hl 
b111			 
b111					if DEBUG_FORTH_WORDS 
b111						DMARK "LPN" 
b111 f5				push af  
b112 3a 26 b1			ld a, (.dmark)  
b115 32 65 ee			ld (debug_mark),a  
b118 3a 27 b1			ld a, (.dmark+1)  
b11b 32 66 ee			ld (debug_mark+1),a  
b11e 3a 28 b1			ld a, (.dmark+2)  
b121 32 67 ee			ld (debug_mark+2),a  
b124 18 03			jr .pastdmark  
b126 ..			.dmark: db "LPN"  
b129 f1			.pastdmark: pop af  
b12a			endm  
# End of macro DMARK
b12a					CALLMONITOR 
b12a cd 6f ee			call debug_vector  
b12d				endm  
# End of macro CALLMONITOR
b12d					endif 
b12d					 
b12d				FORTH_LOOP_NEXT 
b12d cd bb 9c			call macro_forth_loop_next 
b130				endm 
# End of macro FORTH_LOOP_NEXT
b130			 
b130			 
b130					if DEBUG_FORTH_WORDS 
b130 eb						ex de,hl 
b131					endif 
b131			 
b131			;	; get DO ptr 
b131			; 
b131					if DEBUG_FORTH_WORDS 
b131						DMARK "LP7" 
b131 f5				push af  
b132 3a 46 b1			ld a, (.dmark)  
b135 32 65 ee			ld (debug_mark),a  
b138 3a 47 b1			ld a, (.dmark+1)  
b13b 32 66 ee			ld (debug_mark+1),a  
b13e 3a 48 b1			ld a, (.dmark+2)  
b141 32 67 ee			ld (debug_mark+2),a  
b144 18 03			jr .pastdmark  
b146 ..			.dmark: db "LP7"  
b149 f1			.pastdmark: pop af  
b14a			endm  
# End of macro DMARK
b14a					CALLMONITOR 
b14a cd 6f ee			call debug_vector  
b14d				endm  
# End of macro CALLMONITOR
b14d					endif 
b14d				FORTH_RSP_TOS 
b14d cd 43 9a			call macro_forth_rsp_tos 
b150				endm 
# End of macro FORTH_RSP_TOS
b150			 
b150					if DEBUG_FORTH_WORDS 
b150						DMARK "LP8" 
b150 f5				push af  
b151 3a 65 b1			ld a, (.dmark)  
b154 32 65 ee			ld (debug_mark),a  
b157 3a 66 b1			ld a, (.dmark+1)  
b15a 32 66 ee			ld (debug_mark+1),a  
b15d 3a 67 b1			ld a, (.dmark+2)  
b160 32 67 ee			ld (debug_mark+2),a  
b163 18 03			jr .pastdmark  
b165 ..			.dmark: db "LP8"  
b168 f1			.pastdmark: pop af  
b169			endm  
# End of macro DMARK
b169					CALLMONITOR 
b169 cd 6f ee			call debug_vector  
b16c				endm  
# End of macro CALLMONITOR
b16c					endif 
b16c				;push hl 
b16c			 
b16c				; not going to DO any more 
b16c				; get rid of the RSP pointer as DO will add it back in 
b16c				;FORTH_RSP_POP 
b16c				;pop hl 
b16c			 
b16c				;ld hl,(cli_ret_sp) 
b16c				;ld e, (hl) 
b16c				;inc hl 
b16c				;ld d, (hl) 
b16c				;ex de,hl 
b16c 22 bc e5			ld (os_tok_ptr), hl 
b16f					if DEBUG_FORTH_WORDS 
b16f						DMARK "LP<" 
b16f f5				push af  
b170 3a 84 b1			ld a, (.dmark)  
b173 32 65 ee			ld (debug_mark),a  
b176 3a 85 b1			ld a, (.dmark+1)  
b179 32 66 ee			ld (debug_mark+1),a  
b17c 3a 86 b1			ld a, (.dmark+2)  
b17f 32 67 ee			ld (debug_mark+2),a  
b182 18 03			jr .pastdmark  
b184 ..			.dmark: db "LP<"  
b187 f1			.pastdmark: pop af  
b188			endm  
# End of macro DMARK
b188					CALLMONITOR 
b188 cd 6f ee			call debug_vector  
b18b				endm  
# End of macro CALLMONITOR
b18b				endif 
b18b c3 07 9f			jp exec1 
b18e			 
b18e					 
b18e			 
b18e			 
b18e					NEXTW 
b18e c3 76 9e			jp macro_next 
b191				endm 
# End of macro NEXTW
b191			.I:  
b191			 
b191				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b191 5e				db WORD_SYS_CORE+74             
b192 bc b1			dw .DLOOP            
b194 02				db 1 + 1 
b195 .. 00			db "I",0              
b197				endm 
# End of macro CWHEAD
b197			; | I ( -- ) Current loop counter | DONE 
b197					if DEBUG_FORTH_WORDS_KEY 
b197						DMARK "I.." 
b197 f5				push af  
b198 3a ac b1			ld a, (.dmark)  
b19b 32 65 ee			ld (debug_mark),a  
b19e 3a ad b1			ld a, (.dmark+1)  
b1a1 32 66 ee			ld (debug_mark+1),a  
b1a4 3a ae b1			ld a, (.dmark+2)  
b1a7 32 67 ee			ld (debug_mark+2),a  
b1aa 18 03			jr .pastdmark  
b1ac ..			.dmark: db "I.."  
b1af f1			.pastdmark: pop af  
b1b0			endm  
# End of macro DMARK
b1b0						CALLMONITOR 
b1b0 cd 6f ee			call debug_vector  
b1b3				endm  
# End of macro CALLMONITOR
b1b3					endif 
b1b3			 
b1b3 2a e0 e5				ld hl,(os_current_i) 
b1b6 cd 85 9a				call forth_push_numhl 
b1b9			 
b1b9					NEXTW 
b1b9 c3 76 9e			jp macro_next 
b1bc				endm 
# End of macro NEXTW
b1bc			.DLOOP: 
b1bc				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b1bc 5f				db WORD_SYS_CORE+75             
b1bd 9d b2			dw .REPEAT            
b1bf 06				db 5 + 1 
b1c0 .. 00			db "-LOOP",0              
b1c6				endm 
# End of macro CWHEAD
b1c6			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b1c6				; pop tos as current loop count to hl 
b1c6					if DEBUG_FORTH_WORDS_KEY 
b1c6						DMARK "-LP" 
b1c6 f5				push af  
b1c7 3a db b1			ld a, (.dmark)  
b1ca 32 65 ee			ld (debug_mark),a  
b1cd 3a dc b1			ld a, (.dmark+1)  
b1d0 32 66 ee			ld (debug_mark+1),a  
b1d3 3a dd b1			ld a, (.dmark+2)  
b1d6 32 67 ee			ld (debug_mark+2),a  
b1d9 18 03			jr .pastdmark  
b1db ..			.dmark: db "-LP"  
b1de f1			.pastdmark: pop af  
b1df			endm  
# End of macro DMARK
b1df						CALLMONITOR 
b1df cd 6f ee			call debug_vector  
b1e2				endm  
# End of macro CALLMONITOR
b1e2					endif 
b1e2			 
b1e2				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b1e2			 
b1e2				FORTH_LOOP_TOS 
b1e2 cd ee 9c			call macro_forth_loop_tos 
b1e5				endm 
# End of macro FORTH_LOOP_TOS
b1e5 e5				push hl 
b1e6			 
b1e6					if DEBUG_FORTH_WORDS 
b1e6						DMARK "-LP" 
b1e6 f5				push af  
b1e7 3a fb b1			ld a, (.dmark)  
b1ea 32 65 ee			ld (debug_mark),a  
b1ed 3a fc b1			ld a, (.dmark+1)  
b1f0 32 66 ee			ld (debug_mark+1),a  
b1f3 3a fd b1			ld a, (.dmark+2)  
b1f6 32 67 ee			ld (debug_mark+2),a  
b1f9 18 03			jr .pastdmark  
b1fb ..			.dmark: db "-LP"  
b1fe f1			.pastdmark: pop af  
b1ff			endm  
# End of macro DMARK
b1ff						CALLMONITOR 
b1ff cd 6f ee			call debug_vector  
b202				endm  
# End of macro CALLMONITOR
b202					endif 
b202				; next item on the stack is the limit. get it 
b202			 
b202			 
b202				FORTH_LOOP_POP 
b202 cd f8 9c			call macro_forth_loop_pop 
b205				endm 
# End of macro FORTH_LOOP_POP
b205			 
b205				FORTH_LOOP_TOS 
b205 cd ee 9c			call macro_forth_loop_tos 
b208				endm 
# End of macro FORTH_LOOP_TOS
b208			 
b208 d1				pop de		 ; de = i, hl = limit 
b209			 
b209					if DEBUG_FORTH_WORDS 
b209						DMARK "-L1" 
b209 f5				push af  
b20a 3a 1e b2			ld a, (.dmark)  
b20d 32 65 ee			ld (debug_mark),a  
b210 3a 1f b2			ld a, (.dmark+1)  
b213 32 66 ee			ld (debug_mark+1),a  
b216 3a 20 b2			ld a, (.dmark+2)  
b219 32 67 ee			ld (debug_mark+2),a  
b21c 18 03			jr .pastdmark  
b21e ..			.dmark: db "-L1"  
b221 f1			.pastdmark: pop af  
b222			endm  
# End of macro DMARK
b222						CALLMONITOR 
b222 cd 6f ee			call debug_vector  
b225				endm  
# End of macro CALLMONITOR
b225					endif 
b225			 
b225				; go back to previous word 
b225			 
b225 d5				push de    ; save I for inc later 
b226			 
b226			 
b226				; get limit 
b226				;  is I at limit? 
b226			 
b226			 
b226					if DEBUG_FORTH_WORDS 
b226						DMARK "-L1" 
b226 f5				push af  
b227 3a 3b b2			ld a, (.dmark)  
b22a 32 65 ee			ld (debug_mark),a  
b22d 3a 3c b2			ld a, (.dmark+1)  
b230 32 66 ee			ld (debug_mark+1),a  
b233 3a 3d b2			ld a, (.dmark+2)  
b236 32 67 ee			ld (debug_mark+2),a  
b239 18 03			jr .pastdmark  
b23b ..			.dmark: db "-L1"  
b23e f1			.pastdmark: pop af  
b23f			endm  
# End of macro DMARK
b23f						CALLMONITOR 
b23f cd 6f ee			call debug_vector  
b242				endm  
# End of macro CALLMONITOR
b242					endif 
b242			 
b242 ed 52			sbc hl, de 
b244			 
b244			 
b244				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b244			 
b244 20 26				jr nz, .mloopnotdone 
b246			 
b246 e1				pop hl   ; get rid of saved I 
b247				FORTH_LOOP_POP     ; get rid of limit 
b247 cd f8 9c			call macro_forth_loop_pop 
b24a				endm 
# End of macro FORTH_LOOP_POP
b24a			 
b24a				FORTH_RSP_POP     ; get rid of DO ptr 
b24a cd 4d 9a			call macro_forth_rsp_pop 
b24d				endm 
# End of macro FORTH_RSP_POP
b24d			 
b24d			if DEBUG_FORTH_WORDS 
b24d						DMARK "-L>" 
b24d f5				push af  
b24e 3a 62 b2			ld a, (.dmark)  
b251 32 65 ee			ld (debug_mark),a  
b254 3a 63 b2			ld a, (.dmark+1)  
b257 32 66 ee			ld (debug_mark+1),a  
b25a 3a 64 b2			ld a, (.dmark+2)  
b25d 32 67 ee			ld (debug_mark+2),a  
b260 18 03			jr .pastdmark  
b262 ..			.dmark: db "-L>"  
b265 f1			.pastdmark: pop af  
b266			endm  
# End of macro DMARK
b266				CALLMONITOR 
b266 cd 6f ee			call debug_vector  
b269				endm  
# End of macro CALLMONITOR
b269			endif 
b269			 
b269					NEXTW 
b269 c3 76 9e			jp macro_next 
b26c				endm 
# End of macro NEXTW
b26c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b26c			 
b26c			.mloopnotdone: 
b26c			 
b26c e1				pop hl    ; get I 
b26d 2b				dec hl 
b26e			 
b26e			   	; save new I 
b26e			 
b26e			 
b26e					; set I counter 
b26e			 
b26e 22 e0 e5				ld (os_current_i), hl 
b271			 
b271					 
b271				FORTH_LOOP_NEXT 
b271 cd bb 9c			call macro_forth_loop_next 
b274				endm 
# End of macro FORTH_LOOP_NEXT
b274			 
b274			 
b274					if DEBUG_FORTH_WORDS 
b274 eb						ex de,hl 
b275					endif 
b275			 
b275			;	; get DO ptr 
b275			; 
b275				FORTH_RSP_TOS 
b275 cd 43 9a			call macro_forth_rsp_tos 
b278				endm 
# End of macro FORTH_RSP_TOS
b278			 
b278				;push hl 
b278			 
b278				; not going to DO any more 
b278				; get rid of the RSP pointer as DO will add it back in 
b278				;FORTH_RSP_POP 
b278				;pop hl 
b278			 
b278			 
b278 22 bc e5			ld (os_tok_ptr), hl 
b27b					if DEBUG_FORTH_WORDS 
b27b						DMARK "-L<" 
b27b f5				push af  
b27c 3a 90 b2			ld a, (.dmark)  
b27f 32 65 ee			ld (debug_mark),a  
b282 3a 91 b2			ld a, (.dmark+1)  
b285 32 66 ee			ld (debug_mark+1),a  
b288 3a 92 b2			ld a, (.dmark+2)  
b28b 32 67 ee			ld (debug_mark+2),a  
b28e 18 03			jr .pastdmark  
b290 ..			.dmark: db "-L<"  
b293 f1			.pastdmark: pop af  
b294			endm  
# End of macro DMARK
b294					CALLMONITOR 
b294 cd 6f ee			call debug_vector  
b297				endm  
# End of macro CALLMONITOR
b297				endif 
b297 c3 07 9f			jp exec1 
b29a			 
b29a					 
b29a			 
b29a			 
b29a			 
b29a				NEXTW 
b29a c3 76 9e			jp macro_next 
b29d				endm 
# End of macro NEXTW
b29d			 
b29d			 
b29d			 
b29d			 
b29d			.REPEAT: 
b29d				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b29d 71				db WORD_SYS_CORE+93             
b29e f0 b2			dw .UNTIL            
b2a0 06				db 5 + 1 
b2a1 .. 00			db "REPEAT",0              
b2a8				endm 
# End of macro CWHEAD
b2a8			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b2a8			;  push pc to rsp stack past the REPEAT 
b2a8					if DEBUG_FORTH_WORDS_KEY 
b2a8						DMARK "REP" 
b2a8 f5				push af  
b2a9 3a bd b2			ld a, (.dmark)  
b2ac 32 65 ee			ld (debug_mark),a  
b2af 3a be b2			ld a, (.dmark+1)  
b2b2 32 66 ee			ld (debug_mark+1),a  
b2b5 3a bf b2			ld a, (.dmark+2)  
b2b8 32 67 ee			ld (debug_mark+2),a  
b2bb 18 03			jr .pastdmark  
b2bd ..			.dmark: db "REP"  
b2c0 f1			.pastdmark: pop af  
b2c1			endm  
# End of macro DMARK
b2c1						CALLMONITOR 
b2c1 cd 6f ee			call debug_vector  
b2c4				endm  
# End of macro CALLMONITOR
b2c4					endif 
b2c4			 
b2c4 2a bc e5				ld hl, (os_tok_ptr) 
b2c7 23					inc hl   ; R 
b2c8 23					inc hl  ; E 
b2c9 23					inc hl   ; P 
b2ca 23					inc hl   ; E 
b2cb 23					inc hl   ; A 
b2cc 23					inc hl   ; T 
b2cd 23					inc hl   ; zero 
b2ce					FORTH_RSP_NEXT 
b2ce cd 2c 9a			call macro_forth_rsp_next 
b2d1				endm 
# End of macro FORTH_RSP_NEXT
b2d1			 
b2d1			 
b2d1					if DEBUG_FORTH_WORDS 
b2d1						DMARK "REP" 
b2d1 f5				push af  
b2d2 3a e6 b2			ld a, (.dmark)  
b2d5 32 65 ee			ld (debug_mark),a  
b2d8 3a e7 b2			ld a, (.dmark+1)  
b2db 32 66 ee			ld (debug_mark+1),a  
b2de 3a e8 b2			ld a, (.dmark+2)  
b2e1 32 67 ee			ld (debug_mark+2),a  
b2e4 18 03			jr .pastdmark  
b2e6 ..			.dmark: db "REP"  
b2e9 f1			.pastdmark: pop af  
b2ea			endm  
# End of macro DMARK
b2ea						;pop bc    ; TODO BUG ?????? what is this for???? 
b2ea						CALLMONITOR 
b2ea cd 6f ee			call debug_vector  
b2ed				endm  
# End of macro CALLMONITOR
b2ed					endif 
b2ed			 
b2ed					NEXTW 
b2ed c3 76 9e			jp macro_next 
b2f0				endm 
# End of macro NEXTW
b2f0			;	       NEXTW 
b2f0			 
b2f0			.UNTIL: 
b2f0				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b2f0 72				db WORD_SYS_CORE+94             
b2f1 87 b3			dw .ENDFLOW            
b2f3 06				db 5 + 1 
b2f4 .. 00			db "UNTIL",0              
b2fa				endm 
# End of macro CWHEAD
b2fa			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b2fa			 
b2fa				; pop tos as check 
b2fa			 
b2fa				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b2fa			 
b2fa				FORTH_DSP_VALUEHL 
b2fa cd 8a 9c			call macro_dsp_valuehl 
b2fd				endm 
# End of macro FORTH_DSP_VALUEHL
b2fd			 
b2fd					if DEBUG_FORTH_WORDS_KEY 
b2fd						DMARK "UNT" 
b2fd f5				push af  
b2fe 3a 12 b3			ld a, (.dmark)  
b301 32 65 ee			ld (debug_mark),a  
b304 3a 13 b3			ld a, (.dmark+1)  
b307 32 66 ee			ld (debug_mark+1),a  
b30a 3a 14 b3			ld a, (.dmark+2)  
b30d 32 67 ee			ld (debug_mark+2),a  
b310 18 03			jr .pastdmark  
b312 ..			.dmark: db "UNT"  
b315 f1			.pastdmark: pop af  
b316			endm  
# End of macro DMARK
b316						CALLMONITOR 
b316 cd 6f ee			call debug_vector  
b319				endm  
# End of macro CALLMONITOR
b319					endif 
b319			 
b319			;	push hl 
b319				FORTH_DSP_POP 
b319 cd 42 9d			call macro_forth_dsp_pop 
b31c				endm 
# End of macro FORTH_DSP_POP
b31c			 
b31c			;	pop hl 
b31c			 
b31c				; test if true 
b31c			 
b31c cd 13 8d			call ishlzero 
b31f			;	ld a,l 
b31f			;	add h 
b31f			; 
b31f			;	cp 0 
b31f			 
b31f 20 3e			jr nz, .untilnotdone 
b321			 
b321					if DEBUG_FORTH_WORDS 
b321						DMARK "UNf" 
b321 f5				push af  
b322 3a 36 b3			ld a, (.dmark)  
b325 32 65 ee			ld (debug_mark),a  
b328 3a 37 b3			ld a, (.dmark+1)  
b32b 32 66 ee			ld (debug_mark+1),a  
b32e 3a 38 b3			ld a, (.dmark+2)  
b331 32 67 ee			ld (debug_mark+2),a  
b334 18 03			jr .pastdmark  
b336 ..			.dmark: db "UNf"  
b339 f1			.pastdmark: pop af  
b33a			endm  
# End of macro DMARK
b33a						CALLMONITOR 
b33a cd 6f ee			call debug_vector  
b33d				endm  
# End of macro CALLMONITOR
b33d					endif 
b33d			 
b33d			 
b33d			 
b33d				FORTH_RSP_POP     ; get rid of DO ptr 
b33d cd 4d 9a			call macro_forth_rsp_pop 
b340				endm 
# End of macro FORTH_RSP_POP
b340			 
b340			if DEBUG_FORTH_WORDS 
b340						DMARK "UN>" 
b340 f5				push af  
b341 3a 55 b3			ld a, (.dmark)  
b344 32 65 ee			ld (debug_mark),a  
b347 3a 56 b3			ld a, (.dmark+1)  
b34a 32 66 ee			ld (debug_mark+1),a  
b34d 3a 57 b3			ld a, (.dmark+2)  
b350 32 67 ee			ld (debug_mark+2),a  
b353 18 03			jr .pastdmark  
b355 ..			.dmark: db "UN>"  
b358 f1			.pastdmark: pop af  
b359			endm  
# End of macro DMARK
b359				CALLMONITOR 
b359 cd 6f ee			call debug_vector  
b35c				endm  
# End of macro CALLMONITOR
b35c			endif 
b35c			 
b35c					NEXTW 
b35c c3 76 9e			jp macro_next 
b35f				endm 
# End of macro NEXTW
b35f				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b35f			 
b35f			.untilnotdone: 
b35f			 
b35f			 
b35f			;	; get DO ptr 
b35f			; 
b35f				FORTH_RSP_TOS 
b35f cd 43 9a			call macro_forth_rsp_tos 
b362				endm 
# End of macro FORTH_RSP_TOS
b362			 
b362				;push hl 
b362			 
b362				; not going to DO any more 
b362				; get rid of the RSP pointer as DO will add it back in 
b362				;FORTH_RSP_POP 
b362				;pop hl 
b362			 
b362			 
b362 22 bc e5			ld (os_tok_ptr), hl 
b365					if DEBUG_FORTH_WORDS 
b365						DMARK "UN<" 
b365 f5				push af  
b366 3a 7a b3			ld a, (.dmark)  
b369 32 65 ee			ld (debug_mark),a  
b36c 3a 7b b3			ld a, (.dmark+1)  
b36f 32 66 ee			ld (debug_mark+1),a  
b372 3a 7c b3			ld a, (.dmark+2)  
b375 32 67 ee			ld (debug_mark+2),a  
b378 18 03			jr .pastdmark  
b37a ..			.dmark: db "UN<"  
b37d f1			.pastdmark: pop af  
b37e			endm  
# End of macro DMARK
b37e					CALLMONITOR 
b37e cd 6f ee			call debug_vector  
b381				endm  
# End of macro CALLMONITOR
b381				endif 
b381 c3 07 9f			jp exec1 
b384			 
b384					 
b384			 
b384			 
b384					NEXTW 
b384 c3 76 9e			jp macro_next 
b387				endm 
# End of macro NEXTW
b387			 
b387			 
b387			.ENDFLOW: 
b387			 
b387			; eof 
b387			 
# End of file forth_words_flow.asm
b387			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b387			include "forth_words_logic.asm" 
b387			 
b387			; | ## Logic Words 
b387			 
b387			.NOT: 
b387				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b387 2d				db WORD_SYS_CORE+25             
b388 cf b3			dw .IS            
b38a 04				db 3 + 1 
b38b .. 00			db "NOT",0              
b38f				endm 
# End of macro CWHEAD
b38f			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b38f					if DEBUG_FORTH_WORDS_KEY 
b38f						DMARK "NOT" 
b38f f5				push af  
b390 3a a4 b3			ld a, (.dmark)  
b393 32 65 ee			ld (debug_mark),a  
b396 3a a5 b3			ld a, (.dmark+1)  
b399 32 66 ee			ld (debug_mark+1),a  
b39c 3a a6 b3			ld a, (.dmark+2)  
b39f 32 67 ee			ld (debug_mark+2),a  
b3a2 18 03			jr .pastdmark  
b3a4 ..			.dmark: db "NOT"  
b3a7 f1			.pastdmark: pop af  
b3a8			endm  
# End of macro DMARK
b3a8						CALLMONITOR 
b3a8 cd 6f ee			call debug_vector  
b3ab				endm  
# End of macro CALLMONITOR
b3ab					endif 
b3ab					FORTH_DSP 
b3ab cd 50 9c			call macro_forth_dsp 
b3ae				endm 
# End of macro FORTH_DSP
b3ae 7e					ld a,(hl)	; get type of value on TOS 
b3af fe 02				cp DS_TYPE_INUM  
b3b1 28 03				jr z, .noti 
b3b3					NEXTW 
b3b3 c3 76 9e			jp macro_next 
b3b6				endm 
# End of macro NEXTW
b3b6			.noti:          FORTH_DSP_VALUEHL 
b3b6 cd 8a 9c			call macro_dsp_valuehl 
b3b9				endm 
# End of macro FORTH_DSP_VALUEHL
b3b9			;		push hl 
b3b9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b3b9 cd 42 9d			call macro_forth_dsp_pop 
b3bc				endm 
# End of macro FORTH_DSP_POP
b3bc			;		pop hl 
b3bc 3e 00				ld a,0 
b3be bd					cp l 
b3bf 28 04				jr z, .not2t 
b3c1 2e 00				ld l, 0 
b3c3 18 02				jr .notip 
b3c5			 
b3c5 2e ff		.not2t:		ld l, 255 
b3c7			 
b3c7 26 00		.notip:		ld h, 0	 
b3c9			 
b3c9 cd 85 9a				call forth_push_numhl 
b3cc					NEXTW 
b3cc c3 76 9e			jp macro_next 
b3cf				endm 
# End of macro NEXTW
b3cf			 
b3cf			.IS: 
b3cf				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b3cf 2d				db WORD_SYS_CORE+25             
b3d0 f5 b3			dw .LZERO            
b3d2 03				db 2 + 1 
b3d3 .. 00			db "IS",0              
b3d6				endm 
# End of macro CWHEAD
b3d6			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b3d6					if DEBUG_FORTH_WORDS_KEY 
b3d6						DMARK "IS." 
b3d6 f5				push af  
b3d7 3a eb b3			ld a, (.dmark)  
b3da 32 65 ee			ld (debug_mark),a  
b3dd 3a ec b3			ld a, (.dmark+1)  
b3e0 32 66 ee			ld (debug_mark+1),a  
b3e3 3a ed b3			ld a, (.dmark+2)  
b3e6 32 67 ee			ld (debug_mark+2),a  
b3e9 18 03			jr .pastdmark  
b3eb ..			.dmark: db "IS."  
b3ee f1			.pastdmark: pop af  
b3ef			endm  
# End of macro DMARK
b3ef						CALLMONITOR 
b3ef cd 6f ee			call debug_vector  
b3f2				endm  
# End of macro CALLMONITOR
b3f2					endif 
b3f2					NEXTW 
b3f2 c3 76 9e			jp macro_next 
b3f5				endm 
# End of macro NEXTW
b3f5			.LZERO: 
b3f5				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b3f5 2d				db WORD_SYS_CORE+25             
b3f6 ff b3			dw .TZERO            
b3f8 03				db 2 + 1 
b3f9 .. 00			db "0<",0              
b3fc				endm 
# End of macro CWHEAD
b3fc			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b3fc					NEXTW 
b3fc c3 76 9e			jp macro_next 
b3ff				endm 
# End of macro NEXTW
b3ff			.TZERO: 
b3ff				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b3ff 2e				db WORD_SYS_CORE+26             
b400 46 b4			dw .LESS            
b402 03				db 2 + 1 
b403 .. 00			db "0=",0              
b406				endm 
# End of macro CWHEAD
b406			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b406				; TODO add floating point number detection 
b406					;v5 FORTH_DSP_VALUE 
b406					if DEBUG_FORTH_WORDS_KEY 
b406						DMARK "0=." 
b406 f5				push af  
b407 3a 1b b4			ld a, (.dmark)  
b40a 32 65 ee			ld (debug_mark),a  
b40d 3a 1c b4			ld a, (.dmark+1)  
b410 32 66 ee			ld (debug_mark+1),a  
b413 3a 1d b4			ld a, (.dmark+2)  
b416 32 67 ee			ld (debug_mark+2),a  
b419 18 03			jr .pastdmark  
b41b ..			.dmark: db "0=."  
b41e f1			.pastdmark: pop af  
b41f			endm  
# End of macro DMARK
b41f						CALLMONITOR 
b41f cd 6f ee			call debug_vector  
b422				endm  
# End of macro CALLMONITOR
b422					endif 
b422					FORTH_DSP 
b422 cd 50 9c			call macro_forth_dsp 
b425				endm 
# End of macro FORTH_DSP
b425 7e					ld a,(hl)	; get type of value on TOS 
b426 fe 02				cp DS_TYPE_INUM  
b428 28 00				jr z, .tz_inum 
b42a			 
b42a				if FORTH_ENABLE_FLOATMATH 
b42a					jr .tz_done 
b42a			 
b42a				endif 
b42a					 
b42a			 
b42a			.tz_inum: 
b42a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b42a cd 8a 9c			call macro_dsp_valuehl 
b42d				endm 
# End of macro FORTH_DSP_VALUEHL
b42d			 
b42d			;		push hl 
b42d			 
b42d					; destroy value TOS 
b42d			 
b42d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b42d cd 42 9d			call macro_forth_dsp_pop 
b430				endm 
# End of macro FORTH_DSP_POP
b430			 
b430			;		pop hl 
b430			 
b430 3e 00				ld a,0 
b432			 
b432 bd					cp l 
b433 20 08				jr nz, .tz_notzero 
b435			 
b435 bc					cp h 
b436			 
b436 20 05				jr nz, .tz_notzero 
b438			 
b438			 
b438 21 01 00				ld hl, FORTH_TRUE 
b43b 18 03				jr .tz_done 
b43d			 
b43d 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b440			 
b440					; push value back onto stack for another op etc 
b440			 
b440			.tz_done: 
b440 cd 85 9a				call forth_push_numhl 
b443			 
b443					NEXTW 
b443 c3 76 9e			jp macro_next 
b446				endm 
# End of macro NEXTW
b446			.LESS: 
b446				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b446 2f				db WORD_SYS_CORE+27             
b447 af b4			dw .GT            
b449 02				db 1 + 1 
b44a .. 00			db "<",0              
b44c				endm 
# End of macro CWHEAD
b44c			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b44c				; TODO add floating point number detection 
b44c					if DEBUG_FORTH_WORDS_KEY 
b44c						DMARK "LES" 
b44c f5				push af  
b44d 3a 61 b4			ld a, (.dmark)  
b450 32 65 ee			ld (debug_mark),a  
b453 3a 62 b4			ld a, (.dmark+1)  
b456 32 66 ee			ld (debug_mark+1),a  
b459 3a 63 b4			ld a, (.dmark+2)  
b45c 32 67 ee			ld (debug_mark+2),a  
b45f 18 03			jr .pastdmark  
b461 ..			.dmark: db "LES"  
b464 f1			.pastdmark: pop af  
b465			endm  
# End of macro DMARK
b465						CALLMONITOR 
b465 cd 6f ee			call debug_vector  
b468				endm  
# End of macro CALLMONITOR
b468					endif 
b468					FORTH_DSP 
b468 cd 50 9c			call macro_forth_dsp 
b46b				endm 
# End of macro FORTH_DSP
b46b					;v5 FORTH_DSP_VALUE 
b46b 7e					ld a,(hl)	; get type of value on TOS 
b46c fe 02				cp DS_TYPE_INUM  
b46e 28 00				jr z, .less_inum 
b470			 
b470				if FORTH_ENABLE_FLOATMATH 
b470					jr .less_done 
b470			 
b470				endif 
b470					 
b470			 
b470			.less_inum: 
b470					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b470 cd 8a 9c			call macro_dsp_valuehl 
b473				endm 
# End of macro FORTH_DSP_VALUEHL
b473			 
b473 e5					push hl  ; u2 
b474			 
b474					; destroy value TOS 
b474			 
b474					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b474 cd 42 9d			call macro_forth_dsp_pop 
b477				endm 
# End of macro FORTH_DSP_POP
b477			 
b477			 
b477					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b477 cd 8a 9c			call macro_dsp_valuehl 
b47a				endm 
# End of macro FORTH_DSP_VALUEHL
b47a			 
b47a e5					push hl    ; u1 
b47b			 
b47b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b47b cd 42 9d			call macro_forth_dsp_pop 
b47e				endm 
# End of macro FORTH_DSP_POP
b47e			 
b47e			 
b47e b7			 or a      ;clear carry flag 
b47f 01 00 00		 ld bc, FORTH_FALSE 
b482 e1			  pop hl    ; u1 
b483 d1			  pop de    ; u2 
b484 ed 52		  sbc hl,de 
b486 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b488			 
b488 01 01 00		 ld bc, FORTH_TRUE 
b48b			.lscont:  
b48b c5					push bc 
b48c e1					pop hl 
b48d			 
b48d					if DEBUG_FORTH_WORDS 
b48d						DMARK "LT1" 
b48d f5				push af  
b48e 3a a2 b4			ld a, (.dmark)  
b491 32 65 ee			ld (debug_mark),a  
b494 3a a3 b4			ld a, (.dmark+1)  
b497 32 66 ee			ld (debug_mark+1),a  
b49a 3a a4 b4			ld a, (.dmark+2)  
b49d 32 67 ee			ld (debug_mark+2),a  
b4a0 18 03			jr .pastdmark  
b4a2 ..			.dmark: db "LT1"  
b4a5 f1			.pastdmark: pop af  
b4a6			endm  
# End of macro DMARK
b4a6						CALLMONITOR 
b4a6 cd 6f ee			call debug_vector  
b4a9				endm  
# End of macro CALLMONITOR
b4a9					endif 
b4a9 cd 85 9a				call forth_push_numhl 
b4ac			 
b4ac					NEXTW 
b4ac c3 76 9e			jp macro_next 
b4af				endm 
# End of macro NEXTW
b4af			.GT: 
b4af				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b4af 30				db WORD_SYS_CORE+28             
b4b0 18 b5			dw .EQUAL            
b4b2 02				db 1 + 1 
b4b3 .. 00			db ">",0              
b4b5				endm 
# End of macro CWHEAD
b4b5			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b4b5				; TODO add floating point number detection 
b4b5					if DEBUG_FORTH_WORDS_KEY 
b4b5						DMARK "GRT" 
b4b5 f5				push af  
b4b6 3a ca b4			ld a, (.dmark)  
b4b9 32 65 ee			ld (debug_mark),a  
b4bc 3a cb b4			ld a, (.dmark+1)  
b4bf 32 66 ee			ld (debug_mark+1),a  
b4c2 3a cc b4			ld a, (.dmark+2)  
b4c5 32 67 ee			ld (debug_mark+2),a  
b4c8 18 03			jr .pastdmark  
b4ca ..			.dmark: db "GRT"  
b4cd f1			.pastdmark: pop af  
b4ce			endm  
# End of macro DMARK
b4ce						CALLMONITOR 
b4ce cd 6f ee			call debug_vector  
b4d1				endm  
# End of macro CALLMONITOR
b4d1					endif 
b4d1					FORTH_DSP 
b4d1 cd 50 9c			call macro_forth_dsp 
b4d4				endm 
# End of macro FORTH_DSP
b4d4					;FORTH_DSP_VALUE 
b4d4 7e					ld a,(hl)	; get type of value on TOS 
b4d5 fe 02				cp DS_TYPE_INUM  
b4d7 28 00				jr z, .gt_inum 
b4d9			 
b4d9				if FORTH_ENABLE_FLOATMATH 
b4d9					jr .gt_done 
b4d9			 
b4d9				endif 
b4d9					 
b4d9			 
b4d9			.gt_inum: 
b4d9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4d9 cd 8a 9c			call macro_dsp_valuehl 
b4dc				endm 
# End of macro FORTH_DSP_VALUEHL
b4dc			 
b4dc e5					push hl  ; u2 
b4dd			 
b4dd					; destroy value TOS 
b4dd			 
b4dd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4dd cd 42 9d			call macro_forth_dsp_pop 
b4e0				endm 
# End of macro FORTH_DSP_POP
b4e0			 
b4e0			 
b4e0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4e0 cd 8a 9c			call macro_dsp_valuehl 
b4e3				endm 
# End of macro FORTH_DSP_VALUEHL
b4e3			 
b4e3 e5					push hl    ; u1 
b4e4			 
b4e4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4e4 cd 42 9d			call macro_forth_dsp_pop 
b4e7				endm 
# End of macro FORTH_DSP_POP
b4e7			 
b4e7			 
b4e7 b7			 or a      ;clear carry flag 
b4e8 01 00 00		 ld bc, FORTH_FALSE 
b4eb e1			  pop hl    ; u1 
b4ec d1			  pop de    ; u2 
b4ed ed 52		  sbc hl,de 
b4ef 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b4f1			 
b4f1 01 01 00		 ld bc, FORTH_TRUE 
b4f4			.gtcont:  
b4f4 c5					push bc 
b4f5 e1					pop hl 
b4f6			 
b4f6					if DEBUG_FORTH_WORDS 
b4f6						DMARK "GT1" 
b4f6 f5				push af  
b4f7 3a 0b b5			ld a, (.dmark)  
b4fa 32 65 ee			ld (debug_mark),a  
b4fd 3a 0c b5			ld a, (.dmark+1)  
b500 32 66 ee			ld (debug_mark+1),a  
b503 3a 0d b5			ld a, (.dmark+2)  
b506 32 67 ee			ld (debug_mark+2),a  
b509 18 03			jr .pastdmark  
b50b ..			.dmark: db "GT1"  
b50e f1			.pastdmark: pop af  
b50f			endm  
# End of macro DMARK
b50f						CALLMONITOR 
b50f cd 6f ee			call debug_vector  
b512				endm  
# End of macro CALLMONITOR
b512					endif 
b512 cd 85 9a				call forth_push_numhl 
b515			 
b515					NEXTW 
b515 c3 76 9e			jp macro_next 
b518				endm 
# End of macro NEXTW
b518			.EQUAL: 
b518				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b518 31				db WORD_SYS_CORE+29             
b519 83 b5			dw .ENDLOGIC            
b51b 02				db 1 + 1 
b51c .. 00			db "=",0              
b51e				endm 
# End of macro CWHEAD
b51e			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b51e				; TODO add floating point number detection 
b51e					if DEBUG_FORTH_WORDS_KEY 
b51e						DMARK "EQ." 
b51e f5				push af  
b51f 3a 33 b5			ld a, (.dmark)  
b522 32 65 ee			ld (debug_mark),a  
b525 3a 34 b5			ld a, (.dmark+1)  
b528 32 66 ee			ld (debug_mark+1),a  
b52b 3a 35 b5			ld a, (.dmark+2)  
b52e 32 67 ee			ld (debug_mark+2),a  
b531 18 03			jr .pastdmark  
b533 ..			.dmark: db "EQ."  
b536 f1			.pastdmark: pop af  
b537			endm  
# End of macro DMARK
b537						CALLMONITOR 
b537 cd 6f ee			call debug_vector  
b53a				endm  
# End of macro CALLMONITOR
b53a					endif 
b53a					FORTH_DSP 
b53a cd 50 9c			call macro_forth_dsp 
b53d				endm 
# End of macro FORTH_DSP
b53d					;v5 FORTH_DSP_VALUE 
b53d 7e					ld a,(hl)	; get type of value on TOS 
b53e fe 02				cp DS_TYPE_INUM  
b540 28 00				jr z, .eq_inum 
b542			 
b542				if FORTH_ENABLE_FLOATMATH 
b542					jr .eq_done 
b542			 
b542				endif 
b542					 
b542			 
b542			.eq_inum: 
b542					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b542 cd 8a 9c			call macro_dsp_valuehl 
b545				endm 
# End of macro FORTH_DSP_VALUEHL
b545			 
b545 e5					push hl 
b546			 
b546					; destroy value TOS 
b546			 
b546					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b546 cd 42 9d			call macro_forth_dsp_pop 
b549				endm 
# End of macro FORTH_DSP_POP
b549			 
b549			 
b549					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b549 cd 8a 9c			call macro_dsp_valuehl 
b54c				endm 
# End of macro FORTH_DSP_VALUEHL
b54c			 
b54c					; one value on hl get other one back 
b54c			 
b54c e5					push hl 
b54d			 
b54d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b54d cd 42 9d			call macro_forth_dsp_pop 
b550				endm 
# End of macro FORTH_DSP_POP
b550			 
b550 0e 00				ld c, FORTH_FALSE 
b552			 
b552 e1					pop hl 
b553 d1					pop de 
b554			 
b554 7b					ld a, e 
b555 bd					cp l 
b556			 
b556 20 06				jr nz, .eq_done 
b558			 
b558 7a					ld a, d 
b559 bc					cp h 
b55a			 
b55a 20 02				jr nz, .eq_done 
b55c			 
b55c 0e 01				ld c, FORTH_TRUE 
b55e					 
b55e			 
b55e			 
b55e			.eq_done: 
b55e			 
b55e					; TODO push value back onto stack for another op etc 
b55e			 
b55e 26 00				ld h, 0 
b560 69					ld l, c 
b561					if DEBUG_FORTH_WORDS 
b561						DMARK "EQ1" 
b561 f5				push af  
b562 3a 76 b5			ld a, (.dmark)  
b565 32 65 ee			ld (debug_mark),a  
b568 3a 77 b5			ld a, (.dmark+1)  
b56b 32 66 ee			ld (debug_mark+1),a  
b56e 3a 78 b5			ld a, (.dmark+2)  
b571 32 67 ee			ld (debug_mark+2),a  
b574 18 03			jr .pastdmark  
b576 ..			.dmark: db "EQ1"  
b579 f1			.pastdmark: pop af  
b57a			endm  
# End of macro DMARK
b57a						CALLMONITOR 
b57a cd 6f ee			call debug_vector  
b57d				endm  
# End of macro CALLMONITOR
b57d					endif 
b57d cd 85 9a				call forth_push_numhl 
b580			 
b580					NEXTW 
b580 c3 76 9e			jp macro_next 
b583				endm 
# End of macro NEXTW
b583			 
b583			 
b583			.ENDLOGIC: 
b583			; eof 
b583			 
b583			 
# End of file forth_words_logic.asm
b583			include "forth_words_maths.asm" 
b583			 
b583			; | ## Maths Words 
b583			 
b583			.PLUS:	 
b583				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b583 15				db WORD_SYS_CORE+1             
b584 e1 b5			dw .NEG            
b586 02				db 1 + 1 
b587 .. 00			db "+",0              
b589				endm 
# End of macro CWHEAD
b589			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b589					if DEBUG_FORTH_WORDS_KEY 
b589						DMARK "PLU" 
b589 f5				push af  
b58a 3a 9e b5			ld a, (.dmark)  
b58d 32 65 ee			ld (debug_mark),a  
b590 3a 9f b5			ld a, (.dmark+1)  
b593 32 66 ee			ld (debug_mark+1),a  
b596 3a a0 b5			ld a, (.dmark+2)  
b599 32 67 ee			ld (debug_mark+2),a  
b59c 18 03			jr .pastdmark  
b59e ..			.dmark: db "PLU"  
b5a1 f1			.pastdmark: pop af  
b5a2			endm  
# End of macro DMARK
b5a2						CALLMONITOR 
b5a2 cd 6f ee			call debug_vector  
b5a5				endm  
# End of macro CALLMONITOR
b5a5					endif 
b5a5					; add top two values and push back result 
b5a5			 
b5a5					;for v5 FORTH_DSP_VALUE 
b5a5					FORTH_DSP 
b5a5 cd 50 9c			call macro_forth_dsp 
b5a8				endm 
# End of macro FORTH_DSP
b5a8 7e					ld a,(hl)	; get type of value on TOS 
b5a9 fe 02				cp DS_TYPE_INUM  
b5ab 28 03				jr z, .dot_inum 
b5ad			 
b5ad					NEXTW 
b5ad c3 76 9e			jp macro_next 
b5b0				endm 
# End of macro NEXTW
b5b0			 
b5b0			; float maths 
b5b0			 
b5b0				if FORTH_ENABLE_FLOATMATH 
b5b0						inc hl      ; now at start of numeric as string 
b5b0			 
b5b0					if DEBUG_FORTH_MATHS 
b5b0						DMARK "ADD" 
b5b0				CALLMONITOR 
b5b0					endif 
b5b0			 
b5b0					;ld ix, hl 
b5b0					call CON 
b5b0			 
b5b0			 
b5b0					push hl 
b5b0					 
b5b0					 
b5b0			 
b5b0						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b5b0			 
b5b0					; get next number 
b5b0			 
b5b0						FORTH_DSP_VALUE 
b5b0			 
b5b0						inc hl      ; now at start of numeric as string 
b5b0			 
b5b0					;ld ix, hl 
b5b0					call CON 
b5b0			 
b5b0					push hl 
b5b0			 
b5b0			 
b5b0						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5b0			 
b5b0						; TODO do add 
b5b0			 
b5b0						call IADD 
b5b0			 
b5b0						; TODO get result back as ascii 
b5b0			 
b5b0						; TODO push result  
b5b0			 
b5b0			 
b5b0			 
b5b0						jr .dot_done 
b5b0				endif 
b5b0			 
b5b0			.dot_inum: 
b5b0			 
b5b0			 
b5b0					if DEBUG_FORTH_DOT 
b5b0						DMARK "+IT" 
b5b0 f5				push af  
b5b1 3a c5 b5			ld a, (.dmark)  
b5b4 32 65 ee			ld (debug_mark),a  
b5b7 3a c6 b5			ld a, (.dmark+1)  
b5ba 32 66 ee			ld (debug_mark+1),a  
b5bd 3a c7 b5			ld a, (.dmark+2)  
b5c0 32 67 ee			ld (debug_mark+2),a  
b5c3 18 03			jr .pastdmark  
b5c5 ..			.dmark: db "+IT"  
b5c8 f1			.pastdmark: pop af  
b5c9			endm  
# End of macro DMARK
b5c9				CALLMONITOR 
b5c9 cd 6f ee			call debug_vector  
b5cc				endm  
# End of macro CALLMONITOR
b5cc					endif 
b5cc			 
b5cc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5cc cd 8a 9c			call macro_dsp_valuehl 
b5cf				endm 
# End of macro FORTH_DSP_VALUEHL
b5cf			 
b5cf				; TODO add floating point number detection 
b5cf			 
b5cf e5					push hl 
b5d0			 
b5d0					; destroy value TOS 
b5d0			 
b5d0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5d0 cd 42 9d			call macro_forth_dsp_pop 
b5d3				endm 
# End of macro FORTH_DSP_POP
b5d3			 
b5d3			 
b5d3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5d3 cd 8a 9c			call macro_dsp_valuehl 
b5d6				endm 
# End of macro FORTH_DSP_VALUEHL
b5d6			 
b5d6					; one value on hl get other one back 
b5d6			 
b5d6 d1					pop de 
b5d7			 
b5d7					; do the add 
b5d7			 
b5d7 19					add hl,de 
b5d8			 
b5d8					; save it 
b5d8			 
b5d8			;		push hl	 
b5d8			 
b5d8					; 
b5d8			 
b5d8					; destroy value TOS 
b5d8			 
b5d8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5d8 cd 42 9d			call macro_forth_dsp_pop 
b5db				endm 
# End of macro FORTH_DSP_POP
b5db			 
b5db					; TODO push value back onto stack for another op etc 
b5db			 
b5db			;		pop hl 
b5db			 
b5db			.dot_done: 
b5db cd 85 9a				call forth_push_numhl 
b5de			 
b5de					NEXTW 
b5de c3 76 9e			jp macro_next 
b5e1				endm 
# End of macro NEXTW
b5e1			.NEG: 
b5e1			 
b5e1				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b5e1 17				db WORD_SYS_CORE+3             
b5e2 24 b6			dw .DIV            
b5e4 02				db 1 + 1 
b5e5 .. 00			db "-",0              
b5e7				endm 
# End of macro CWHEAD
b5e7			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b5e7					if DEBUG_FORTH_WORDS_KEY 
b5e7						DMARK "SUB" 
b5e7 f5				push af  
b5e8 3a fc b5			ld a, (.dmark)  
b5eb 32 65 ee			ld (debug_mark),a  
b5ee 3a fd b5			ld a, (.dmark+1)  
b5f1 32 66 ee			ld (debug_mark+1),a  
b5f4 3a fe b5			ld a, (.dmark+2)  
b5f7 32 67 ee			ld (debug_mark+2),a  
b5fa 18 03			jr .pastdmark  
b5fc ..			.dmark: db "SUB"  
b5ff f1			.pastdmark: pop af  
b600			endm  
# End of macro DMARK
b600						CALLMONITOR 
b600 cd 6f ee			call debug_vector  
b603				endm  
# End of macro CALLMONITOR
b603					endif 
b603			 
b603			 
b603				; TODO add floating point number detection 
b603					; v5 FORTH_DSP_VALUE 
b603					FORTH_DSP 
b603 cd 50 9c			call macro_forth_dsp 
b606				endm 
# End of macro FORTH_DSP
b606 7e					ld a,(hl)	; get type of value on TOS 
b607 fe 02				cp DS_TYPE_INUM  
b609 28 03				jr z, .neg_inum 
b60b			 
b60b					NEXTW 
b60b c3 76 9e			jp macro_next 
b60e				endm 
# End of macro NEXTW
b60e			 
b60e			; float maths 
b60e			 
b60e				if FORTH_ENABLE_FLOATMATH 
b60e					jr .neg_done 
b60e			 
b60e				endif 
b60e					 
b60e			 
b60e			.neg_inum: 
b60e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b60e cd 8a 9c			call macro_dsp_valuehl 
b611				endm 
# End of macro FORTH_DSP_VALUEHL
b611			 
b611 e5					push hl 
b612			 
b612					; destroy value TOS 
b612			 
b612					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b612 cd 42 9d			call macro_forth_dsp_pop 
b615				endm 
# End of macro FORTH_DSP_POP
b615			 
b615			 
b615					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b615 cd 8a 9c			call macro_dsp_valuehl 
b618				endm 
# End of macro FORTH_DSP_VALUEHL
b618			 
b618					; one value on hl get other one back 
b618			 
b618 d1					pop de 
b619			 
b619					; do the sub 
b619			;		ex de, hl 
b619			 
b619 ed 52				sbc hl,de 
b61b			 
b61b					; save it 
b61b			 
b61b			;		push hl	 
b61b			 
b61b					; 
b61b			 
b61b					; destroy value TOS 
b61b			 
b61b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b61b cd 42 9d			call macro_forth_dsp_pop 
b61e				endm 
# End of macro FORTH_DSP_POP
b61e			 
b61e					; TODO push value back onto stack for another op etc 
b61e			 
b61e			;		pop hl 
b61e			 
b61e cd 85 9a				call forth_push_numhl 
b621			.neg_done: 
b621			 
b621					NEXTW 
b621 c3 76 9e			jp macro_next 
b624				endm 
# End of macro NEXTW
b624			.DIV: 
b624				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b624 18				db WORD_SYS_CORE+4             
b625 71 b6			dw .MUL            
b627 02				db 1 + 1 
b628 .. 00			db "/",0              
b62a				endm 
# End of macro CWHEAD
b62a			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b62a					if DEBUG_FORTH_WORDS_KEY 
b62a						DMARK "DIV" 
b62a f5				push af  
b62b 3a 3f b6			ld a, (.dmark)  
b62e 32 65 ee			ld (debug_mark),a  
b631 3a 40 b6			ld a, (.dmark+1)  
b634 32 66 ee			ld (debug_mark+1),a  
b637 3a 41 b6			ld a, (.dmark+2)  
b63a 32 67 ee			ld (debug_mark+2),a  
b63d 18 03			jr .pastdmark  
b63f ..			.dmark: db "DIV"  
b642 f1			.pastdmark: pop af  
b643			endm  
# End of macro DMARK
b643						CALLMONITOR 
b643 cd 6f ee			call debug_vector  
b646				endm  
# End of macro CALLMONITOR
b646					endif 
b646				; TODO add floating point number detection 
b646					; v5 FORTH_DSP_VALUE 
b646					FORTH_DSP 
b646 cd 50 9c			call macro_forth_dsp 
b649				endm 
# End of macro FORTH_DSP
b649 7e					ld a,(hl)	; get type of value on TOS 
b64a fe 02				cp DS_TYPE_INUM  
b64c 28 03				jr z, .div_inum 
b64e			 
b64e				if FORTH_ENABLE_FLOATMATH 
b64e					jr .div_done 
b64e			 
b64e				endif 
b64e					NEXTW 
b64e c3 76 9e			jp macro_next 
b651				endm 
# End of macro NEXTW
b651			.div_inum: 
b651			 
b651					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b651 cd 8a 9c			call macro_dsp_valuehl 
b654				endm 
# End of macro FORTH_DSP_VALUEHL
b654			 
b654 e5					push hl    ; to go to bc 
b655			 
b655					; destroy value TOS 
b655			 
b655					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b655 cd 42 9d			call macro_forth_dsp_pop 
b658				endm 
# End of macro FORTH_DSP_POP
b658			 
b658			 
b658					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b658 cd 8a 9c			call macro_dsp_valuehl 
b65b				endm 
# End of macro FORTH_DSP_VALUEHL
b65b			 
b65b					; hl to go to de 
b65b			 
b65b e5					push hl 
b65c			 
b65c c1					pop bc 
b65d d1					pop de		 
b65e			 
b65e			 
b65e					if DEBUG_FORTH_MATHS 
b65e						DMARK "DIV" 
b65e				CALLMONITOR 
b65e					endif 
b65e					; one value on hl but move to a get other one back 
b65e			 
b65e			        
b65e cd 47 8c			call Div16 
b661			 
b661			;	push af	 
b661 e5				push hl 
b662 c5				push bc 
b663			 
b663					if DEBUG_FORTH_MATHS 
b663						DMARK "DI1" 
b663				CALLMONITOR 
b663					endif 
b663			 
b663					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b663 cd 42 9d			call macro_forth_dsp_pop 
b666				endm 
# End of macro FORTH_DSP_POP
b666			 
b666			 
b666			 
b666 e1					pop hl    ; result 
b667			 
b667 cd 85 9a				call forth_push_numhl 
b66a			 
b66a e1					pop hl    ; reminder 
b66b			;		ld h,0 
b66b			;		ld l,d 
b66b			 
b66b cd 85 9a				call forth_push_numhl 
b66e			.div_done: 
b66e					NEXTW 
b66e c3 76 9e			jp macro_next 
b671				endm 
# End of macro NEXTW
b671			.MUL: 
b671				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b671 19				db WORD_SYS_CORE+5             
b672 b6 b6			dw .MIN            
b674 02				db 1 + 1 
b675 .. 00			db "*",0              
b677				endm 
# End of macro CWHEAD
b677			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b677				; TODO add floating point number detection 
b677					if DEBUG_FORTH_WORDS_KEY 
b677						DMARK "MUL" 
b677 f5				push af  
b678 3a 8c b6			ld a, (.dmark)  
b67b 32 65 ee			ld (debug_mark),a  
b67e 3a 8d b6			ld a, (.dmark+1)  
b681 32 66 ee			ld (debug_mark+1),a  
b684 3a 8e b6			ld a, (.dmark+2)  
b687 32 67 ee			ld (debug_mark+2),a  
b68a 18 03			jr .pastdmark  
b68c ..			.dmark: db "MUL"  
b68f f1			.pastdmark: pop af  
b690			endm  
# End of macro DMARK
b690						CALLMONITOR 
b690 cd 6f ee			call debug_vector  
b693				endm  
# End of macro CALLMONITOR
b693					endif 
b693					FORTH_DSP 
b693 cd 50 9c			call macro_forth_dsp 
b696				endm 
# End of macro FORTH_DSP
b696					; v5 FORTH_DSP_VALUE 
b696 7e					ld a,(hl)	; get type of value on TOS 
b697 fe 02				cp DS_TYPE_INUM  
b699 28 03				jr z, .mul_inum 
b69b			 
b69b				if FORTH_ENABLE_FLOATMATH 
b69b					jr .mul_done 
b69b			 
b69b				endif 
b69b			 
b69b					NEXTW 
b69b c3 76 9e			jp macro_next 
b69e				endm 
# End of macro NEXTW
b69e			.mul_inum:	 
b69e			 
b69e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b69e cd 8a 9c			call macro_dsp_valuehl 
b6a1				endm 
# End of macro FORTH_DSP_VALUEHL
b6a1			 
b6a1 e5					push hl 
b6a2			 
b6a2					; destroy value TOS 
b6a2			 
b6a2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6a2 cd 42 9d			call macro_forth_dsp_pop 
b6a5				endm 
# End of macro FORTH_DSP_POP
b6a5			 
b6a5			 
b6a5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6a5 cd 8a 9c			call macro_dsp_valuehl 
b6a8				endm 
# End of macro FORTH_DSP_VALUEHL
b6a8			 
b6a8					; one value on hl but move to a get other one back 
b6a8			 
b6a8 7d					ld a, l 
b6a9			 
b6a9 d1					pop de 
b6aa			 
b6aa					; do the mull 
b6aa			;		ex de, hl 
b6aa			 
b6aa cd 6d 8c				call Mult16 
b6ad					; save it 
b6ad			 
b6ad			;		push hl	 
b6ad			 
b6ad					; 
b6ad			 
b6ad					; destroy value TOS 
b6ad			 
b6ad					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6ad cd 42 9d			call macro_forth_dsp_pop 
b6b0				endm 
# End of macro FORTH_DSP_POP
b6b0			 
b6b0					; TODO push value back onto stack for another op etc 
b6b0			 
b6b0			;		pop hl 
b6b0			 
b6b0 cd 85 9a				call forth_push_numhl 
b6b3			 
b6b3			.mul_done: 
b6b3					NEXTW 
b6b3 c3 76 9e			jp macro_next 
b6b6				endm 
# End of macro NEXTW
b6b6			 
b6b6			 
b6b6			 
b6b6			 
b6b6			.MIN: 
b6b6				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b6b6 49				db WORD_SYS_CORE+53             
b6b7 37 b7			dw .MAX            
b6b9 04				db 3 + 1 
b6ba .. 00			db "MIN",0              
b6be				endm 
# End of macro CWHEAD
b6be			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b6be					if DEBUG_FORTH_WORDS_KEY 
b6be						DMARK "MIN" 
b6be f5				push af  
b6bf 3a d3 b6			ld a, (.dmark)  
b6c2 32 65 ee			ld (debug_mark),a  
b6c5 3a d4 b6			ld a, (.dmark+1)  
b6c8 32 66 ee			ld (debug_mark+1),a  
b6cb 3a d5 b6			ld a, (.dmark+2)  
b6ce 32 67 ee			ld (debug_mark+2),a  
b6d1 18 03			jr .pastdmark  
b6d3 ..			.dmark: db "MIN"  
b6d6 f1			.pastdmark: pop af  
b6d7			endm  
# End of macro DMARK
b6d7						CALLMONITOR 
b6d7 cd 6f ee			call debug_vector  
b6da				endm  
# End of macro CALLMONITOR
b6da					endif 
b6da					; get u2 
b6da			 
b6da					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6da cd 8a 9c			call macro_dsp_valuehl 
b6dd				endm 
# End of macro FORTH_DSP_VALUEHL
b6dd			 
b6dd e5					push hl   ; u2 
b6de			 
b6de					; destroy value TOS 
b6de			 
b6de					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6de cd 42 9d			call macro_forth_dsp_pop 
b6e1				endm 
# End of macro FORTH_DSP_POP
b6e1			 
b6e1					; get u1 
b6e1			 
b6e1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6e1 cd 8a 9c			call macro_dsp_valuehl 
b6e4				endm 
# End of macro FORTH_DSP_VALUEHL
b6e4			 
b6e4 e5					push hl  ; u1 
b6e5			 
b6e5					; destroy value TOS 
b6e5			 
b6e5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6e5 cd 42 9d			call macro_forth_dsp_pop 
b6e8				endm 
# End of macro FORTH_DSP_POP
b6e8			 
b6e8 b7			 or a      ;clear carry flag 
b6e9 e1			  pop hl    ; u1 
b6ea d1			  pop de    ; u2 
b6eb e5				push hl   ; saved in case hl is lowest 
b6ec ed 52		  sbc hl,de 
b6ee 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b6f0			 
b6f0 e1				pop hl 
b6f1					if DEBUG_FORTH_WORDS 
b6f1						DMARK "MIN" 
b6f1 f5				push af  
b6f2 3a 06 b7			ld a, (.dmark)  
b6f5 32 65 ee			ld (debug_mark),a  
b6f8 3a 07 b7			ld a, (.dmark+1)  
b6fb 32 66 ee			ld (debug_mark+1),a  
b6fe 3a 08 b7			ld a, (.dmark+2)  
b701 32 67 ee			ld (debug_mark+2),a  
b704 18 03			jr .pastdmark  
b706 ..			.dmark: db "MIN"  
b709 f1			.pastdmark: pop af  
b70a			endm  
# End of macro DMARK
b70a						CALLMONITOR 
b70a cd 6f ee			call debug_vector  
b70d				endm  
# End of macro CALLMONITOR
b70d					endif 
b70d cd 85 9a				call forth_push_numhl 
b710			 
b710				       NEXTW 
b710 c3 76 9e			jp macro_next 
b713				endm 
# End of macro NEXTW
b713			 
b713			.mincont:  
b713 c1				pop bc   ; tidy up 
b714 eb				ex de , hl  
b715					if DEBUG_FORTH_WORDS 
b715						DMARK "MI1" 
b715 f5				push af  
b716 3a 2a b7			ld a, (.dmark)  
b719 32 65 ee			ld (debug_mark),a  
b71c 3a 2b b7			ld a, (.dmark+1)  
b71f 32 66 ee			ld (debug_mark+1),a  
b722 3a 2c b7			ld a, (.dmark+2)  
b725 32 67 ee			ld (debug_mark+2),a  
b728 18 03			jr .pastdmark  
b72a ..			.dmark: db "MI1"  
b72d f1			.pastdmark: pop af  
b72e			endm  
# End of macro DMARK
b72e						CALLMONITOR 
b72e cd 6f ee			call debug_vector  
b731				endm  
# End of macro CALLMONITOR
b731					endif 
b731 cd 85 9a				call forth_push_numhl 
b734			 
b734				       NEXTW 
b734 c3 76 9e			jp macro_next 
b737				endm 
# End of macro NEXTW
b737			.MAX: 
b737				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b737 4a				db WORD_SYS_CORE+54             
b738 b8 b7			dw .RND16            
b73a 04				db 3 + 1 
b73b .. 00			db "MAX",0              
b73f				endm 
# End of macro CWHEAD
b73f			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b73f					if DEBUG_FORTH_WORDS_KEY 
b73f						DMARK "MAX" 
b73f f5				push af  
b740 3a 54 b7			ld a, (.dmark)  
b743 32 65 ee			ld (debug_mark),a  
b746 3a 55 b7			ld a, (.dmark+1)  
b749 32 66 ee			ld (debug_mark+1),a  
b74c 3a 56 b7			ld a, (.dmark+2)  
b74f 32 67 ee			ld (debug_mark+2),a  
b752 18 03			jr .pastdmark  
b754 ..			.dmark: db "MAX"  
b757 f1			.pastdmark: pop af  
b758			endm  
# End of macro DMARK
b758						CALLMONITOR 
b758 cd 6f ee			call debug_vector  
b75b				endm  
# End of macro CALLMONITOR
b75b					endif 
b75b					; get u2 
b75b			 
b75b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b75b cd 8a 9c			call macro_dsp_valuehl 
b75e				endm 
# End of macro FORTH_DSP_VALUEHL
b75e			 
b75e e5					push hl   ; u2 
b75f			 
b75f					; destroy value TOS 
b75f			 
b75f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b75f cd 42 9d			call macro_forth_dsp_pop 
b762				endm 
# End of macro FORTH_DSP_POP
b762			 
b762					; get u1 
b762			 
b762					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b762 cd 8a 9c			call macro_dsp_valuehl 
b765				endm 
# End of macro FORTH_DSP_VALUEHL
b765			 
b765 e5					push hl  ; u1 
b766			 
b766					; destroy value TOS 
b766			 
b766					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b766 cd 42 9d			call macro_forth_dsp_pop 
b769				endm 
# End of macro FORTH_DSP_POP
b769			 
b769 b7			 or a      ;clear carry flag 
b76a e1			  pop hl    ; u1 
b76b d1			  pop de    ; u2 
b76c e5				push hl   ; saved in case hl is lowest 
b76d ed 52		  sbc hl,de 
b76f 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b771			 
b771 e1				pop hl 
b772					if DEBUG_FORTH_WORDS 
b772						DMARK "MAX" 
b772 f5				push af  
b773 3a 87 b7			ld a, (.dmark)  
b776 32 65 ee			ld (debug_mark),a  
b779 3a 88 b7			ld a, (.dmark+1)  
b77c 32 66 ee			ld (debug_mark+1),a  
b77f 3a 89 b7			ld a, (.dmark+2)  
b782 32 67 ee			ld (debug_mark+2),a  
b785 18 03			jr .pastdmark  
b787 ..			.dmark: db "MAX"  
b78a f1			.pastdmark: pop af  
b78b			endm  
# End of macro DMARK
b78b						CALLMONITOR 
b78b cd 6f ee			call debug_vector  
b78e				endm  
# End of macro CALLMONITOR
b78e					endif 
b78e cd 85 9a				call forth_push_numhl 
b791			 
b791				       NEXTW 
b791 c3 76 9e			jp macro_next 
b794				endm 
# End of macro NEXTW
b794			 
b794			.maxcont:  
b794 c1				pop bc   ; tidy up 
b795 eb				ex de , hl  
b796					if DEBUG_FORTH_WORDS 
b796						DMARK "MA1" 
b796 f5				push af  
b797 3a ab b7			ld a, (.dmark)  
b79a 32 65 ee			ld (debug_mark),a  
b79d 3a ac b7			ld a, (.dmark+1)  
b7a0 32 66 ee			ld (debug_mark+1),a  
b7a3 3a ad b7			ld a, (.dmark+2)  
b7a6 32 67 ee			ld (debug_mark+2),a  
b7a9 18 03			jr .pastdmark  
b7ab ..			.dmark: db "MA1"  
b7ae f1			.pastdmark: pop af  
b7af			endm  
# End of macro DMARK
b7af						CALLMONITOR 
b7af cd 6f ee			call debug_vector  
b7b2				endm  
# End of macro CALLMONITOR
b7b2					endif 
b7b2 cd 85 9a				call forth_push_numhl 
b7b5				       NEXTW 
b7b5 c3 76 9e			jp macro_next 
b7b8				endm 
# End of macro NEXTW
b7b8			 
b7b8			.RND16: 
b7b8				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b7b8 4e				db WORD_SYS_CORE+58             
b7b9 e7 b7			dw .RND8            
b7bb 06				db 5 + 1 
b7bc .. 00			db "RND16",0              
b7c2				endm 
# End of macro CWHEAD
b7c2			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b7c2					if DEBUG_FORTH_WORDS_KEY 
b7c2						DMARK "R16" 
b7c2 f5				push af  
b7c3 3a d7 b7			ld a, (.dmark)  
b7c6 32 65 ee			ld (debug_mark),a  
b7c9 3a d8 b7			ld a, (.dmark+1)  
b7cc 32 66 ee			ld (debug_mark+1),a  
b7cf 3a d9 b7			ld a, (.dmark+2)  
b7d2 32 67 ee			ld (debug_mark+2),a  
b7d5 18 03			jr .pastdmark  
b7d7 ..			.dmark: db "R16"  
b7da f1			.pastdmark: pop af  
b7db			endm  
# End of macro DMARK
b7db						CALLMONITOR 
b7db cd 6f ee			call debug_vector  
b7de				endm  
# End of macro CALLMONITOR
b7de					endif 
b7de cd 11 8c				call prng16  
b7e1 cd 85 9a				call forth_push_numhl 
b7e4				       NEXTW 
b7e4 c3 76 9e			jp macro_next 
b7e7				endm 
# End of macro NEXTW
b7e7			.RND8: 
b7e7				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b7e7 60				db WORD_SYS_CORE+76             
b7e8 1c b8			dw .RND            
b7ea 05				db 4 + 1 
b7eb .. 00			db "RND8",0              
b7f0				endm 
# End of macro CWHEAD
b7f0			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b7f0					if DEBUG_FORTH_WORDS_KEY 
b7f0						DMARK "RN8" 
b7f0 f5				push af  
b7f1 3a 05 b8			ld a, (.dmark)  
b7f4 32 65 ee			ld (debug_mark),a  
b7f7 3a 06 b8			ld a, (.dmark+1)  
b7fa 32 66 ee			ld (debug_mark+1),a  
b7fd 3a 07 b8			ld a, (.dmark+2)  
b800 32 67 ee			ld (debug_mark+2),a  
b803 18 03			jr .pastdmark  
b805 ..			.dmark: db "RN8"  
b808 f1			.pastdmark: pop af  
b809			endm  
# End of macro DMARK
b809						CALLMONITOR 
b809 cd 6f ee			call debug_vector  
b80c				endm  
# End of macro CALLMONITOR
b80c					endif 
b80c 2a a3 eb				ld hl,(xrandc) 
b80f 23					inc hl 
b810 cd 2b 8c				call xrnd 
b813 6f					ld l,a	 
b814 26 00				ld h,0 
b816 cd 85 9a				call forth_push_numhl 
b819				       NEXTW 
b819 c3 76 9e			jp macro_next 
b81c				endm 
# End of macro NEXTW
b81c			.RND: 
b81c				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b81c 60				db WORD_SYS_CORE+76             
b81d 22 b9			dw .ENDMATHS            
b81f 04				db 3 + 1 
b820 .. 00			db "RND",0              
b824				endm 
# End of macro CWHEAD
b824			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b824			 
b824					if DEBUG_FORTH_WORDS_KEY 
b824						DMARK "RND" 
b824 f5				push af  
b825 3a 39 b8			ld a, (.dmark)  
b828 32 65 ee			ld (debug_mark),a  
b82b 3a 3a b8			ld a, (.dmark+1)  
b82e 32 66 ee			ld (debug_mark+1),a  
b831 3a 3b b8			ld a, (.dmark+2)  
b834 32 67 ee			ld (debug_mark+2),a  
b837 18 03			jr .pastdmark  
b839 ..			.dmark: db "RND"  
b83c f1			.pastdmark: pop af  
b83d			endm  
# End of macro DMARK
b83d						CALLMONITOR 
b83d cd 6f ee			call debug_vector  
b840				endm  
# End of macro CALLMONITOR
b840					endif 
b840					 
b840					FORTH_DSP_VALUEHL    ; upper range 
b840 cd 8a 9c			call macro_dsp_valuehl 
b843				endm 
# End of macro FORTH_DSP_VALUEHL
b843			 
b843 22 a7 eb				ld (LFSRSeed), hl	 
b846			 
b846					if DEBUG_FORTH_WORDS 
b846						DMARK "RN1" 
b846 f5				push af  
b847 3a 5b b8			ld a, (.dmark)  
b84a 32 65 ee			ld (debug_mark),a  
b84d 3a 5c b8			ld a, (.dmark+1)  
b850 32 66 ee			ld (debug_mark+1),a  
b853 3a 5d b8			ld a, (.dmark+2)  
b856 32 67 ee			ld (debug_mark+2),a  
b859 18 03			jr .pastdmark  
b85b ..			.dmark: db "RN1"  
b85e f1			.pastdmark: pop af  
b85f			endm  
# End of macro DMARK
b85f						CALLMONITOR 
b85f cd 6f ee			call debug_vector  
b862				endm  
# End of macro CALLMONITOR
b862					endif 
b862					FORTH_DSP_POP 
b862 cd 42 9d			call macro_forth_dsp_pop 
b865				endm 
# End of macro FORTH_DSP_POP
b865			 
b865					FORTH_DSP_VALUEHL    ; low range 
b865 cd 8a 9c			call macro_dsp_valuehl 
b868				endm 
# End of macro FORTH_DSP_VALUEHL
b868			 
b868					if DEBUG_FORTH_WORDS 
b868						DMARK "RN2" 
b868 f5				push af  
b869 3a 7d b8			ld a, (.dmark)  
b86c 32 65 ee			ld (debug_mark),a  
b86f 3a 7e b8			ld a, (.dmark+1)  
b872 32 66 ee			ld (debug_mark+1),a  
b875 3a 7f b8			ld a, (.dmark+2)  
b878 32 67 ee			ld (debug_mark+2),a  
b87b 18 03			jr .pastdmark  
b87d ..			.dmark: db "RN2"  
b880 f1			.pastdmark: pop af  
b881			endm  
# End of macro DMARK
b881						CALLMONITOR 
b881 cd 6f ee			call debug_vector  
b884				endm  
# End of macro CALLMONITOR
b884					endif 
b884 22 a9 eb				ld (LFSRSeed+2), hl 
b887			 
b887					FORTH_DSP_POP 
b887 cd 42 9d			call macro_forth_dsp_pop 
b88a				endm 
# End of macro FORTH_DSP_POP
b88a			 
b88a e5					push hl 
b88b			 
b88b e1			.inrange:	pop hl 
b88c cd 11 8c				call prng16  
b88f					if DEBUG_FORTH_WORDS 
b88f						DMARK "RN3" 
b88f f5				push af  
b890 3a a4 b8			ld a, (.dmark)  
b893 32 65 ee			ld (debug_mark),a  
b896 3a a5 b8			ld a, (.dmark+1)  
b899 32 66 ee			ld (debug_mark+1),a  
b89c 3a a6 b8			ld a, (.dmark+2)  
b89f 32 67 ee			ld (debug_mark+2),a  
b8a2 18 03			jr .pastdmark  
b8a4 ..			.dmark: db "RN3"  
b8a7 f1			.pastdmark: pop af  
b8a8			endm  
# End of macro DMARK
b8a8						CALLMONITOR 
b8a8 cd 6f ee			call debug_vector  
b8ab				endm  
# End of macro CALLMONITOR
b8ab					endif 
b8ab					 
b8ab					; if the range is 8bit knock out the high byte 
b8ab			 
b8ab ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
b8af			 
b8af 3e 00				ld a, 0 
b8b1 ba					cp d  
b8b2 20 1e				jr nz, .hirange 
b8b4 26 00				ld h, 0   ; knock it down to 8bit 
b8b6			 
b8b6					if DEBUG_FORTH_WORDS 
b8b6						DMARK "RNk" 
b8b6 f5				push af  
b8b7 3a cb b8			ld a, (.dmark)  
b8ba 32 65 ee			ld (debug_mark),a  
b8bd 3a cc b8			ld a, (.dmark+1)  
b8c0 32 66 ee			ld (debug_mark+1),a  
b8c3 3a cd b8			ld a, (.dmark+2)  
b8c6 32 67 ee			ld (debug_mark+2),a  
b8c9 18 03			jr .pastdmark  
b8cb ..			.dmark: db "RNk"  
b8ce f1			.pastdmark: pop af  
b8cf			endm  
# End of macro DMARK
b8cf						CALLMONITOR 
b8cf cd 6f ee			call debug_vector  
b8d2				endm  
# End of macro CALLMONITOR
b8d2					endif 
b8d2			.hirange:   
b8d2 e5					push hl  
b8d3 b7					or a  
b8d4 ed 52		                sbc hl, de 
b8d6			 
b8d6					;call cmp16 
b8d6			 
b8d6 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b8d8 e1					pop hl 
b8d9 e5					push hl 
b8da			 
b8da					if DEBUG_FORTH_WORDS 
b8da						DMARK "RN4" 
b8da f5				push af  
b8db 3a ef b8			ld a, (.dmark)  
b8de 32 65 ee			ld (debug_mark),a  
b8e1 3a f0 b8			ld a, (.dmark+1)  
b8e4 32 66 ee			ld (debug_mark+1),a  
b8e7 3a f1 b8			ld a, (.dmark+2)  
b8ea 32 67 ee			ld (debug_mark+2),a  
b8ed 18 03			jr .pastdmark  
b8ef ..			.dmark: db "RN4"  
b8f2 f1			.pastdmark: pop af  
b8f3			endm  
# End of macro DMARK
b8f3						CALLMONITOR 
b8f3 cd 6f ee			call debug_vector  
b8f6				endm  
# End of macro CALLMONITOR
b8f6					endif 
b8f6 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
b8fa					;call cmp16 
b8fa				 
b8fa b7					or a  
b8fb ed 52		                sbc hl, de 
b8fd 38 8c				jr c, .inrange 
b8ff			 
b8ff e1					pop hl 
b900					 
b900					if DEBUG_FORTH_WORDS 
b900						DMARK "RNd" 
b900 f5				push af  
b901 3a 15 b9			ld a, (.dmark)  
b904 32 65 ee			ld (debug_mark),a  
b907 3a 16 b9			ld a, (.dmark+1)  
b90a 32 66 ee			ld (debug_mark+1),a  
b90d 3a 17 b9			ld a, (.dmark+2)  
b910 32 67 ee			ld (debug_mark+2),a  
b913 18 03			jr .pastdmark  
b915 ..			.dmark: db "RNd"  
b918 f1			.pastdmark: pop af  
b919			endm  
# End of macro DMARK
b919						CALLMONITOR 
b919 cd 6f ee			call debug_vector  
b91c				endm  
# End of macro CALLMONITOR
b91c					endif 
b91c			 
b91c			 
b91c cd 85 9a				call forth_push_numhl 
b91f				       NEXTW 
b91f c3 76 9e			jp macro_next 
b922				endm 
# End of macro NEXTW
b922			 
b922			.ENDMATHS: 
b922			 
b922			; eof 
b922			 
# End of file forth_words_maths.asm
b922			include "forth_words_display.asm" 
b922			 
b922			; | ## Display Words 
b922			 
b922			.ACT: 
b922			 
b922				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
b922 62				db WORD_SYS_CORE+78             
b923 6e b9			dw .INFO            
b925 07				db 6 + 1 
b926 .. 00			db "ACTIVE",0              
b92d				endm 
# End of macro CWHEAD
b92d			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
b92d			;  
b92d			; | | To display a pulsing activity indicator in a processing loop do this... 
b92d			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
b92d			 
b92d					if DEBUG_FORTH_WORDS_KEY 
b92d						DMARK "ACT" 
b92d f5				push af  
b92e 3a 42 b9			ld a, (.dmark)  
b931 32 65 ee			ld (debug_mark),a  
b934 3a 43 b9			ld a, (.dmark+1)  
b937 32 66 ee			ld (debug_mark+1),a  
b93a 3a 44 b9			ld a, (.dmark+2)  
b93d 32 67 ee			ld (debug_mark+2),a  
b940 18 03			jr .pastdmark  
b942 ..			.dmark: db "ACT"  
b945 f1			.pastdmark: pop af  
b946			endm  
# End of macro DMARK
b946						CALLMONITOR 
b946 cd 6f ee			call debug_vector  
b949				endm  
# End of macro CALLMONITOR
b949					endif 
b949 cd 14 8a				call active 
b94c					if DEBUG_FORTH_WORDS 
b94c						DMARK "ACp" 
b94c f5				push af  
b94d 3a 61 b9			ld a, (.dmark)  
b950 32 65 ee			ld (debug_mark),a  
b953 3a 62 b9			ld a, (.dmark+1)  
b956 32 66 ee			ld (debug_mark+1),a  
b959 3a 63 b9			ld a, (.dmark+2)  
b95c 32 67 ee			ld (debug_mark+2),a  
b95f 18 03			jr .pastdmark  
b961 ..			.dmark: db "ACp"  
b964 f1			.pastdmark: pop af  
b965			endm  
# End of macro DMARK
b965						CALLMONITOR 
b965 cd 6f ee			call debug_vector  
b968				endm  
# End of macro CALLMONITOR
b968					endif 
b968 cd f3 9a				call forth_push_str 
b96b			 
b96b					NEXTW 
b96b c3 76 9e			jp macro_next 
b96e				endm 
# End of macro NEXTW
b96e			.INFO: 
b96e			 
b96e				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
b96e 62				db WORD_SYS_CORE+78             
b96f 8b b9			dw .ATP            
b971 05				db 4 + 1 
b972 .. 00			db "INFO",0              
b977				endm 
# End of macro CWHEAD
b977			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
b977					FORTH_DSP_VALUEHL 
b977 cd 8a 9c			call macro_dsp_valuehl 
b97a				endm 
# End of macro FORTH_DSP_VALUEHL
b97a			 
b97a					FORTH_DSP_POP 
b97a cd 42 9d			call macro_forth_dsp_pop 
b97d				endm 
# End of macro FORTH_DSP_POP
b97d			 
b97d e5					push hl 
b97e			 
b97e					FORTH_DSP_VALUEHL 
b97e cd 8a 9c			call macro_dsp_valuehl 
b981				endm 
# End of macro FORTH_DSP_VALUEHL
b981			 
b981					FORTH_DSP_POP 
b981 cd 42 9d			call macro_forth_dsp_pop 
b984				endm 
# End of macro FORTH_DSP_POP
b984			 
b984 d1					pop de 
b985			 
b985 cd 4e 8a				call info_panel 
b988			 
b988			 
b988					NEXTW 
b988 c3 76 9e			jp macro_next 
b98b				endm 
# End of macro NEXTW
b98b			.ATP: 
b98b				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
b98b 62				db WORD_SYS_CORE+78             
b98c 02 ba			dw .FB            
b98e 04				db 3 + 1 
b98f .. 00			db "AT?",0              
b993				endm 
# End of macro CWHEAD
b993			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
b993					if DEBUG_FORTH_WORDS_KEY 
b993						DMARK "AT?" 
b993 f5				push af  
b994 3a a8 b9			ld a, (.dmark)  
b997 32 65 ee			ld (debug_mark),a  
b99a 3a a9 b9			ld a, (.dmark+1)  
b99d 32 66 ee			ld (debug_mark+1),a  
b9a0 3a aa b9			ld a, (.dmark+2)  
b9a3 32 67 ee			ld (debug_mark+2),a  
b9a6 18 03			jr .pastdmark  
b9a8 ..			.dmark: db "AT?"  
b9ab f1			.pastdmark: pop af  
b9ac			endm  
# End of macro DMARK
b9ac						CALLMONITOR 
b9ac cd 6f ee			call debug_vector  
b9af				endm  
# End of macro CALLMONITOR
b9af					endif 
b9af 3a 58 ea				ld a, (f_cursor_ptr) 
b9b2			 
b9b2			if DEBUG_FORTH_WORDS 
b9b2				DMARK "AT?" 
b9b2 f5				push af  
b9b3 3a c7 b9			ld a, (.dmark)  
b9b6 32 65 ee			ld (debug_mark),a  
b9b9 3a c8 b9			ld a, (.dmark+1)  
b9bc 32 66 ee			ld (debug_mark+1),a  
b9bf 3a c9 b9			ld a, (.dmark+2)  
b9c2 32 67 ee			ld (debug_mark+2),a  
b9c5 18 03			jr .pastdmark  
b9c7 ..			.dmark: db "AT?"  
b9ca f1			.pastdmark: pop af  
b9cb			endm  
# End of macro DMARK
b9cb				CALLMONITOR 
b9cb cd 6f ee			call debug_vector  
b9ce				endm  
# End of macro CALLMONITOR
b9ce			endif	 
b9ce					; count the number of rows 
b9ce			 
b9ce 06 00				ld b, 0 
b9d0 4f			.atpr:		ld c, a    ; save in case we go below zero 
b9d1 d6 28				sub display_cols 
b9d3 f2 d9 b9				jp p, .atprunder 
b9d6 04					inc b 
b9d7 18 f7				jr .atpr 
b9d9			.atprunder:	 
b9d9			if DEBUG_FORTH_WORDS 
b9d9				DMARK "A?2" 
b9d9 f5				push af  
b9da 3a ee b9			ld a, (.dmark)  
b9dd 32 65 ee			ld (debug_mark),a  
b9e0 3a ef b9			ld a, (.dmark+1)  
b9e3 32 66 ee			ld (debug_mark+1),a  
b9e6 3a f0 b9			ld a, (.dmark+2)  
b9e9 32 67 ee			ld (debug_mark+2),a  
b9ec 18 03			jr .pastdmark  
b9ee ..			.dmark: db "A?2"  
b9f1 f1			.pastdmark: pop af  
b9f2			endm  
# End of macro DMARK
b9f2				CALLMONITOR 
b9f2 cd 6f ee			call debug_vector  
b9f5				endm  
# End of macro CALLMONITOR
b9f5			endif	 
b9f5 26 00				ld h, 0 
b9f7 69					ld l, c 
b9f8 cd 85 9a				call forth_push_numhl 
b9fb 68					ld l, b  
b9fc cd 85 9a				call forth_push_numhl 
b9ff			 
b9ff			 
b9ff				NEXTW 
b9ff c3 76 9e			jp macro_next 
ba02				endm 
# End of macro NEXTW
ba02			 
ba02			.FB: 
ba02				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
ba02 1b				db WORD_SYS_CORE+7             
ba03 50 ba			dw .EMIT            
ba05 03				db 2 + 1 
ba06 .. 00			db "FB",0              
ba09				endm 
# End of macro CWHEAD
ba09			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
ba09			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
ba09			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
ba09			; | | If automatic display is off then updates will not be shown until DRAW is used. 
ba09					if DEBUG_FORTH_WORDS_KEY 
ba09						DMARK "FB." 
ba09 f5				push af  
ba0a 3a 1e ba			ld a, (.dmark)  
ba0d 32 65 ee			ld (debug_mark),a  
ba10 3a 1f ba			ld a, (.dmark+1)  
ba13 32 66 ee			ld (debug_mark+1),a  
ba16 3a 20 ba			ld a, (.dmark+2)  
ba19 32 67 ee			ld (debug_mark+2),a  
ba1c 18 03			jr .pastdmark  
ba1e ..			.dmark: db "FB."  
ba21 f1			.pastdmark: pop af  
ba22			endm  
# End of macro DMARK
ba22						CALLMONITOR 
ba22 cd 6f ee			call debug_vector  
ba25				endm  
# End of macro CALLMONITOR
ba25					endif 
ba25			 
ba25					FORTH_DSP_VALUEHL 
ba25 cd 8a 9c			call macro_dsp_valuehl 
ba28				endm 
# End of macro FORTH_DSP_VALUEHL
ba28			 
ba28 7d					ld a, l 
ba29 fe 01				cp 1 
ba2b 20 05				jr nz, .fbn1 
ba2d 21 0a ed				ld hl, display_fb1 
ba30 18 15				jr .fbset 
ba32 fe 02		.fbn1:		cp 2 
ba34 20 05				jr nz, .fbn2 
ba36 21 c8 eb				ld hl, display_fb2 
ba39 18 0c				jr .fbset 
ba3b fe 03		.fbn2:		cp 3 
ba3d 20 05				jr nz, .fbn3 
ba3f 21 69 ec				ld hl, display_fb3 
ba42 18 03				jr .fbset 
ba44			.fbn3:		 ; if invalid number select first 
ba44 21 0a ed				ld hl, display_fb1 
ba47 22 c6 eb		.fbset:		ld (display_fb_active), hl 
ba4a			 
ba4a					FORTH_DSP_POP 
ba4a cd 42 9d			call macro_forth_dsp_pop 
ba4d				endm 
# End of macro FORTH_DSP_POP
ba4d			 
ba4d					NEXTW 
ba4d c3 76 9e			jp macro_next 
ba50				endm 
# End of macro NEXTW
ba50			 
ba50			 
ba50			.EMIT: 
ba50				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
ba50 1b				db WORD_SYS_CORE+7             
ba51 a1 ba			dw .DOTH            
ba53 05				db 4 + 1 
ba54 .. 00			db "EMIT",0              
ba59				endm 
# End of macro CWHEAD
ba59			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
ba59					; get value off TOS and display it 
ba59			 
ba59					if DEBUG_FORTH_WORDS_KEY 
ba59						DMARK "EMT" 
ba59 f5				push af  
ba5a 3a 6e ba			ld a, (.dmark)  
ba5d 32 65 ee			ld (debug_mark),a  
ba60 3a 6f ba			ld a, (.dmark+1)  
ba63 32 66 ee			ld (debug_mark+1),a  
ba66 3a 70 ba			ld a, (.dmark+2)  
ba69 32 67 ee			ld (debug_mark+2),a  
ba6c 18 03			jr .pastdmark  
ba6e ..			.dmark: db "EMT"  
ba71 f1			.pastdmark: pop af  
ba72			endm  
# End of macro DMARK
ba72						CALLMONITOR 
ba72 cd 6f ee			call debug_vector  
ba75				endm  
# End of macro CALLMONITOR
ba75					endif 
ba75			 
ba75					FORTH_DSP_VALUEHL 
ba75 cd 8a 9c			call macro_dsp_valuehl 
ba78				endm 
# End of macro FORTH_DSP_VALUEHL
ba78			 
ba78 7d					ld a,l 
ba79			 
ba79					; TODO write to display 
ba79			 
ba79 32 b9 e4				ld (os_input), a 
ba7c 3e 00				ld a, 0 
ba7e 32 ba e4				ld (os_input+1), a 
ba81					 
ba81 3a 58 ea				ld a, (f_cursor_ptr) 
ba84 11 b9 e4				ld de, os_input 
ba87 cd d0 8a				call str_at_display 
ba8a			 
ba8a			 
ba8a 3a 36 ea				ld a,(cli_autodisplay) 
ba8d fe 00				cp 0 
ba8f 28 03				jr z, .enoupdate 
ba91 cd e0 8a						call update_display 
ba94					.enoupdate: 
ba94			 
ba94 3a 58 ea				ld a, (f_cursor_ptr) 
ba97 3c					inc a 
ba98 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
ba9b			 
ba9b			 
ba9b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ba9b cd 42 9d			call macro_forth_dsp_pop 
ba9e				endm 
# End of macro FORTH_DSP_POP
ba9e			  
ba9e			 
ba9e					NEXTW 
ba9e c3 76 9e			jp macro_next 
baa1				endm 
# End of macro NEXTW
baa1			.DOTH: 
baa1				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
baa1 1c				db WORD_SYS_CORE+8             
baa2 d1 ba			dw .DOTF            
baa4 03				db 2 + 1 
baa5 .. 00			db ".-",0              
baa8				endm 
# End of macro CWHEAD
baa8			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
baa8					; get value off TOS and display it 
baa8					if DEBUG_FORTH_WORDS_KEY 
baa8						DMARK "DTD" 
baa8 f5				push af  
baa9 3a bd ba			ld a, (.dmark)  
baac 32 65 ee			ld (debug_mark),a  
baaf 3a be ba			ld a, (.dmark+1)  
bab2 32 66 ee			ld (debug_mark+1),a  
bab5 3a bf ba			ld a, (.dmark+2)  
bab8 32 67 ee			ld (debug_mark+2),a  
babb 18 03			jr .pastdmark  
babd ..			.dmark: db "DTD"  
bac0 f1			.pastdmark: pop af  
bac1			endm  
# End of macro DMARK
bac1						CALLMONITOR 
bac1 cd 6f ee			call debug_vector  
bac4				endm  
# End of macro CALLMONITOR
bac4					endif 
bac4 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
bac6 3e 00			ld a, 0 
bac8 32 37 ea			ld (cli_mvdot), a 
bacb c3 28 bb			jp .dotgo 
bace				NEXTW 
bace c3 76 9e			jp macro_next 
bad1				endm 
# End of macro NEXTW
bad1			.DOTF: 
bad1				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
bad1 1c				db WORD_SYS_CORE+8             
bad2 ff ba			dw .DOT            
bad4 03				db 2 + 1 
bad5 .. 00			db ".>",0              
bad8				endm 
# End of macro CWHEAD
bad8			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
bad8					; get value off TOS and display it 
bad8			        ; TODO BUG adds extra spaces 
bad8			        ; TODO BUG handle numerics? 
bad8					if DEBUG_FORTH_WORDS_KEY 
bad8						DMARK "DTC" 
bad8 f5				push af  
bad9 3a ed ba			ld a, (.dmark)  
badc 32 65 ee			ld (debug_mark),a  
badf 3a ee ba			ld a, (.dmark+1)  
bae2 32 66 ee			ld (debug_mark+1),a  
bae5 3a ef ba			ld a, (.dmark+2)  
bae8 32 67 ee			ld (debug_mark+2),a  
baeb 18 03			jr .pastdmark  
baed ..			.dmark: db "DTC"  
baf0 f1			.pastdmark: pop af  
baf1			endm  
# End of macro DMARK
baf1						CALLMONITOR 
baf1 cd 6f ee			call debug_vector  
baf4				endm  
# End of macro CALLMONITOR
baf4					endif 
baf4 3e 01			ld a, 1 
baf6 32 37 ea			ld (cli_mvdot), a 
baf9 c3 28 bb			jp .dotgo 
bafc				NEXTW 
bafc c3 76 9e			jp macro_next 
baff				endm 
# End of macro NEXTW
baff			 
baff			.DOT: 
baff				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
baff 1c				db WORD_SYS_CORE+8             
bb00 db bc			dw .CLS            
bb02 02				db 1 + 1 
bb03 .. 00			db ".",0              
bb05				endm 
# End of macro CWHEAD
bb05			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
bb05					; get value off TOS and display it 
bb05			 
bb05					if DEBUG_FORTH_WORDS_KEY 
bb05						DMARK "DOT" 
bb05 f5				push af  
bb06 3a 1a bb			ld a, (.dmark)  
bb09 32 65 ee			ld (debug_mark),a  
bb0c 3a 1b bb			ld a, (.dmark+1)  
bb0f 32 66 ee			ld (debug_mark+1),a  
bb12 3a 1c bb			ld a, (.dmark+2)  
bb15 32 67 ee			ld (debug_mark+2),a  
bb18 18 03			jr .pastdmark  
bb1a ..			.dmark: db "DOT"  
bb1d f1			.pastdmark: pop af  
bb1e			endm  
# End of macro DMARK
bb1e						CALLMONITOR 
bb1e cd 6f ee			call debug_vector  
bb21				endm  
# End of macro CALLMONITOR
bb21					endif 
bb21 3e 00			ld a, 0 
bb23 32 37 ea			ld (cli_mvdot), a 
bb26 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bb28				 
bb28			 
bb28			.dotgo: 
bb28			 
bb28			; move up type to on stack for parserv5 
bb28					FORTH_DSP 
bb28 cd 50 9c			call macro_forth_dsp 
bb2b				endm 
# End of macro FORTH_DSP
bb2b				;FORTH_DSP_VALUE  
bb2b			 
bb2b			if DEBUG_FORTH_DOT 
bb2b				DMARK "DOT" 
bb2b f5				push af  
bb2c 3a 40 bb			ld a, (.dmark)  
bb2f 32 65 ee			ld (debug_mark),a  
bb32 3a 41 bb			ld a, (.dmark+1)  
bb35 32 66 ee			ld (debug_mark+1),a  
bb38 3a 42 bb			ld a, (.dmark+2)  
bb3b 32 67 ee			ld (debug_mark+2),a  
bb3e 18 03			jr .pastdmark  
bb40 ..			.dmark: db "DOT"  
bb43 f1			.pastdmark: pop af  
bb44			endm  
# End of macro DMARK
bb44				CALLMONITOR 
bb44 cd 6f ee			call debug_vector  
bb47				endm  
# End of macro CALLMONITOR
bb47			endif	 
bb47			;		.print: 
bb47			 
bb47 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bb48 23				inc hl   ; position to the actual value 
bb49 fe 01			cp DS_TYPE_STR 
bb4b 20 06			jr nz, .dotnum1  
bb4d			 
bb4d			; display string 
bb4d				FORTH_DSP_VALUE  
bb4d cd 73 9c			call macro_forth_dsp_value 
bb50				endm 
# End of macro FORTH_DSP_VALUE
bb50 eb				ex de,hl 
bb51 18 49			jr .dotwrite 
bb53			 
bb53			.dotnum1: 
bb53 fe 02			cp DS_TYPE_INUM 
bb55 20 44			jr nz, .dotflot 
bb57			 
bb57			 
bb57			; display number 
bb57			 
bb57			;	push hl 
bb57			;	call clear_display 
bb57			;	pop hl 
bb57			 
bb57 5e				ld e, (hl) 
bb58 23				inc hl 
bb59 56				ld d, (hl) 
bb5a 21 bb e2			ld hl, scratch 
bb5d			if DEBUG_FORTH_DOT 
bb5d				DMARK "DT1" 
bb5d f5				push af  
bb5e 3a 72 bb			ld a, (.dmark)  
bb61 32 65 ee			ld (debug_mark),a  
bb64 3a 73 bb			ld a, (.dmark+1)  
bb67 32 66 ee			ld (debug_mark+1),a  
bb6a 3a 74 bb			ld a, (.dmark+2)  
bb6d 32 67 ee			ld (debug_mark+2),a  
bb70 18 03			jr .pastdmark  
bb72 ..			.dmark: db "DT1"  
bb75 f1			.pastdmark: pop af  
bb76			endm  
# End of macro DMARK
bb76				CALLMONITOR 
bb76 cd 6f ee			call debug_vector  
bb79				endm  
# End of macro CALLMONITOR
bb79			endif	 
bb79			 
bb79 cd ff 8f			call uitoa_16 
bb7c eb				ex de,hl 
bb7d			 
bb7d			if DEBUG_FORTH_DOT 
bb7d				DMARK "DT2" 
bb7d f5				push af  
bb7e 3a 92 bb			ld a, (.dmark)  
bb81 32 65 ee			ld (debug_mark),a  
bb84 3a 93 bb			ld a, (.dmark+1)  
bb87 32 66 ee			ld (debug_mark+1),a  
bb8a 3a 94 bb			ld a, (.dmark+2)  
bb8d 32 67 ee			ld (debug_mark+2),a  
bb90 18 03			jr .pastdmark  
bb92 ..			.dmark: db "DT2"  
bb95 f1			.pastdmark: pop af  
bb96			endm  
# End of macro DMARK
bb96				CALLMONITOR 
bb96 cd 6f ee			call debug_vector  
bb99				endm  
# End of macro CALLMONITOR
bb99			endif	 
bb99			 
bb99			;	ld de, os_word_scratch 
bb99 18 01			jr .dotwrite 
bb9b			 
bb9b 00			.dotflot:   nop 
bb9c			; TODO print floating point number 
bb9c			 
bb9c			.dotwrite:		 
bb9c			 
bb9c					; if c is set then set all '-' to spaces 
bb9c					; need to also take into account .>  
bb9c			 
bb9c 3e 01				ld a, 1 
bb9e b9					cp c 
bb9f 20 67				jr nz, .nodashswap 
bba1			 
bba1					; DE has the string to write, working with HL 
bba1			 
bba1 06 ff				ld b, 255 
bba3 d5					push de 
bba4 e1					pop hl 
bba5			 
bba5			if DEBUG_FORTH_DOT 
bba5				DMARK "DT-" 
bba5 f5				push af  
bba6 3a ba bb			ld a, (.dmark)  
bba9 32 65 ee			ld (debug_mark),a  
bbac 3a bb bb			ld a, (.dmark+1)  
bbaf 32 66 ee			ld (debug_mark+1),a  
bbb2 3a bc bb			ld a, (.dmark+2)  
bbb5 32 67 ee			ld (debug_mark+2),a  
bbb8 18 03			jr .pastdmark  
bbba ..			.dmark: db "DT-"  
bbbd f1			.pastdmark: pop af  
bbbe			endm  
# End of macro DMARK
bbbe				CALLMONITOR 
bbbe cd 6f ee			call debug_vector  
bbc1				endm  
# End of macro CALLMONITOR
bbc1			endif	 
bbc1 7e			.dashscan:	ld a, (hl) 
bbc2 fe 00				cp 0 
bbc4 28 42				jr z, .nodashswap 
bbc6 fe 2d				cp '-' 
bbc8 20 03				jr nz, .dashskip 
bbca 3e 20				ld a, ' ' 
bbcc 77					ld (hl), a 
bbcd 23			.dashskip:	inc hl 
bbce			if DEBUG_FORTH_DOT 
bbce				DMARK "D-2" 
bbce f5				push af  
bbcf 3a e3 bb			ld a, (.dmark)  
bbd2 32 65 ee			ld (debug_mark),a  
bbd5 3a e4 bb			ld a, (.dmark+1)  
bbd8 32 66 ee			ld (debug_mark+1),a  
bbdb 3a e5 bb			ld a, (.dmark+2)  
bbde 32 67 ee			ld (debug_mark+2),a  
bbe1 18 03			jr .pastdmark  
bbe3 ..			.dmark: db "D-2"  
bbe6 f1			.pastdmark: pop af  
bbe7			endm  
# End of macro DMARK
bbe7				CALLMONITOR 
bbe7 cd 6f ee			call debug_vector  
bbea				endm  
# End of macro CALLMONITOR
bbea			endif	 
bbea 10 d5				djnz .dashscan 
bbec			 
bbec			if DEBUG_FORTH_DOT 
bbec				DMARK "D-1" 
bbec f5				push af  
bbed 3a 01 bc			ld a, (.dmark)  
bbf0 32 65 ee			ld (debug_mark),a  
bbf3 3a 02 bc			ld a, (.dmark+1)  
bbf6 32 66 ee			ld (debug_mark+1),a  
bbf9 3a 03 bc			ld a, (.dmark+2)  
bbfc 32 67 ee			ld (debug_mark+2),a  
bbff 18 03			jr .pastdmark  
bc01 ..			.dmark: db "D-1"  
bc04 f1			.pastdmark: pop af  
bc05			endm  
# End of macro DMARK
bc05				CALLMONITOR 
bc05 cd 6f ee			call debug_vector  
bc08				endm  
# End of macro CALLMONITOR
bc08			endif	 
bc08			 
bc08			.nodashswap: 
bc08			 
bc08			if DEBUG_FORTH_DOT 
bc08				DMARK "D-o" 
bc08 f5				push af  
bc09 3a 1d bc			ld a, (.dmark)  
bc0c 32 65 ee			ld (debug_mark),a  
bc0f 3a 1e bc			ld a, (.dmark+1)  
bc12 32 66 ee			ld (debug_mark+1),a  
bc15 3a 1f bc			ld a, (.dmark+2)  
bc18 32 67 ee			ld (debug_mark+2),a  
bc1b 18 03			jr .pastdmark  
bc1d ..			.dmark: db "D-o"  
bc20 f1			.pastdmark: pop af  
bc21			endm  
# End of macro DMARK
bc21				CALLMONITOR 
bc21 cd 6f ee			call debug_vector  
bc24				endm  
# End of macro CALLMONITOR
bc24			endif	 
bc24			 
bc24 d5					push de   ; save string start in case we need to advance print 
bc25			 
bc25 3a 58 ea				ld a, (f_cursor_ptr) 
bc28 cd d0 8a				call str_at_display 
bc2b 3a 36 ea				ld a,(cli_autodisplay) 
bc2e fe 00				cp 0 
bc30 28 03				jr z, .noupdate 
bc32 cd e0 8a						call update_display 
bc35					.noupdate: 
bc35			 
bc35			 
bc35					; see if we need to advance the print position 
bc35			 
bc35 e1					pop hl   ; get back string 
bc36			;		ex de,hl 
bc36			 
bc36 3a 37 ea				ld a, (cli_mvdot) 
bc39			if DEBUG_FORTH_DOT 
bc39			;		ld e,a 
bc39				DMARK "D>1" 
bc39 f5				push af  
bc3a 3a 4e bc			ld a, (.dmark)  
bc3d 32 65 ee			ld (debug_mark),a  
bc40 3a 4f bc			ld a, (.dmark+1)  
bc43 32 66 ee			ld (debug_mark+1),a  
bc46 3a 50 bc			ld a, (.dmark+2)  
bc49 32 67 ee			ld (debug_mark+2),a  
bc4c 18 03			jr .pastdmark  
bc4e ..			.dmark: db "D>1"  
bc51 f1			.pastdmark: pop af  
bc52			endm  
# End of macro DMARK
bc52				CALLMONITOR 
bc52 cd 6f ee			call debug_vector  
bc55				endm  
# End of macro CALLMONITOR
bc55			endif	 
bc55 fe 00				cp 0 
bc57 28 44				jr z, .noadv 
bc59					; yes, lets advance the print position 
bc59 3e 00				ld a, 0 
bc5b cd 5b 90				call strlent 
bc5e			if DEBUG_FORTH_DOT 
bc5e				DMARK "D-?" 
bc5e f5				push af  
bc5f 3a 73 bc			ld a, (.dmark)  
bc62 32 65 ee			ld (debug_mark),a  
bc65 3a 74 bc			ld a, (.dmark+1)  
bc68 32 66 ee			ld (debug_mark+1),a  
bc6b 3a 75 bc			ld a, (.dmark+2)  
bc6e 32 67 ee			ld (debug_mark+2),a  
bc71 18 03			jr .pastdmark  
bc73 ..			.dmark: db "D-?"  
bc76 f1			.pastdmark: pop af  
bc77			endm  
# End of macro DMARK
bc77				CALLMONITOR 
bc77 cd 6f ee			call debug_vector  
bc7a				endm  
# End of macro CALLMONITOR
bc7a			endif	 
bc7a 3a 58 ea				ld a, (f_cursor_ptr) 
bc7d 85					add a,l 
bc7e					;call addatohl 
bc7e					;ld a, l 
bc7e 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bc81			 
bc81			if DEBUG_FORTH_DOT 
bc81				DMARK "D->" 
bc81 f5				push af  
bc82 3a 96 bc			ld a, (.dmark)  
bc85 32 65 ee			ld (debug_mark),a  
bc88 3a 97 bc			ld a, (.dmark+1)  
bc8b 32 66 ee			ld (debug_mark+1),a  
bc8e 3a 98 bc			ld a, (.dmark+2)  
bc91 32 67 ee			ld (debug_mark+2),a  
bc94 18 03			jr .pastdmark  
bc96 ..			.dmark: db "D->"  
bc99 f1			.pastdmark: pop af  
bc9a			endm  
# End of macro DMARK
bc9a				CALLMONITOR 
bc9a cd 6f ee			call debug_vector  
bc9d				endm  
# End of macro CALLMONITOR
bc9d			endif	 
bc9d			 
bc9d			.noadv:	 
bc9d			 
bc9d					if DEBUG_FORTH_DOT_WAIT 
bc9d							call next_page_prompt 
bc9d					endif	 
bc9d			; TODO this pop off the stack causes a crash. i dont know why 
bc9d			 
bc9d			 
bc9d			if DEBUG_FORTH_DOT 
bc9d				DMARK "DTh" 
bc9d f5				push af  
bc9e 3a b2 bc			ld a, (.dmark)  
bca1 32 65 ee			ld (debug_mark),a  
bca4 3a b3 bc			ld a, (.dmark+1)  
bca7 32 66 ee			ld (debug_mark+1),a  
bcaa 3a b4 bc			ld a, (.dmark+2)  
bcad 32 67 ee			ld (debug_mark+2),a  
bcb0 18 03			jr .pastdmark  
bcb2 ..			.dmark: db "DTh"  
bcb5 f1			.pastdmark: pop af  
bcb6			endm  
# End of macro DMARK
bcb6				CALLMONITOR 
bcb6 cd 6f ee			call debug_vector  
bcb9				endm  
# End of macro CALLMONITOR
bcb9			endif	 
bcb9			 
bcb9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bcb9 cd 42 9d			call macro_forth_dsp_pop 
bcbc				endm 
# End of macro FORTH_DSP_POP
bcbc			 
bcbc			if DEBUG_FORTH_DOT 
bcbc				DMARK "DTi" 
bcbc f5				push af  
bcbd 3a d1 bc			ld a, (.dmark)  
bcc0 32 65 ee			ld (debug_mark),a  
bcc3 3a d2 bc			ld a, (.dmark+1)  
bcc6 32 66 ee			ld (debug_mark+1),a  
bcc9 3a d3 bc			ld a, (.dmark+2)  
bccc 32 67 ee			ld (debug_mark+2),a  
bccf 18 03			jr .pastdmark  
bcd1 ..			.dmark: db "DTi"  
bcd4 f1			.pastdmark: pop af  
bcd5			endm  
# End of macro DMARK
bcd5				CALLMONITOR 
bcd5 cd 6f ee			call debug_vector  
bcd8				endm  
# End of macro CALLMONITOR
bcd8			endif	 
bcd8			 
bcd8			 
bcd8					NEXTW 
bcd8 c3 76 9e			jp macro_next 
bcdb				endm 
# End of macro NEXTW
bcdb			 
bcdb			.CLS: 
bcdb				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bcdb 35				db WORD_SYS_CORE+33             
bcdc 08 bd			dw .DRAW            
bcde 04				db 3 + 1 
bcdf .. 00			db "CLS",0              
bce3				endm 
# End of macro CWHEAD
bce3			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
bce3					if DEBUG_FORTH_WORDS_KEY 
bce3						DMARK "CLS" 
bce3 f5				push af  
bce4 3a f8 bc			ld a, (.dmark)  
bce7 32 65 ee			ld (debug_mark),a  
bcea 3a f9 bc			ld a, (.dmark+1)  
bced 32 66 ee			ld (debug_mark+1),a  
bcf0 3a fa bc			ld a, (.dmark+2)  
bcf3 32 67 ee			ld (debug_mark+2),a  
bcf6 18 03			jr .pastdmark  
bcf8 ..			.dmark: db "CLS"  
bcfb f1			.pastdmark: pop af  
bcfc			endm  
# End of macro DMARK
bcfc						CALLMONITOR 
bcfc cd 6f ee			call debug_vector  
bcff				endm  
# End of macro CALLMONITOR
bcff					endif 
bcff cd bd 8a				call clear_display 
bd02 c3 16 be				jp .home		; and home cursor 
bd05					NEXTW 
bd05 c3 76 9e			jp macro_next 
bd08				endm 
# End of macro NEXTW
bd08			 
bd08			.DRAW: 
bd08				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
bd08 36				db WORD_SYS_CORE+34             
bd09 33 bd			dw .DUMP            
bd0b 05				db 4 + 1 
bd0c .. 00			db "DRAW",0              
bd11				endm 
# End of macro CWHEAD
bd11			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
bd11					if DEBUG_FORTH_WORDS_KEY 
bd11						DMARK "DRW" 
bd11 f5				push af  
bd12 3a 26 bd			ld a, (.dmark)  
bd15 32 65 ee			ld (debug_mark),a  
bd18 3a 27 bd			ld a, (.dmark+1)  
bd1b 32 66 ee			ld (debug_mark+1),a  
bd1e 3a 28 bd			ld a, (.dmark+2)  
bd21 32 67 ee			ld (debug_mark+2),a  
bd24 18 03			jr .pastdmark  
bd26 ..			.dmark: db "DRW"  
bd29 f1			.pastdmark: pop af  
bd2a			endm  
# End of macro DMARK
bd2a						CALLMONITOR 
bd2a cd 6f ee			call debug_vector  
bd2d				endm  
# End of macro CALLMONITOR
bd2d					endif 
bd2d cd e0 8a				call update_display 
bd30					NEXTW 
bd30 c3 76 9e			jp macro_next 
bd33				endm 
# End of macro NEXTW
bd33			 
bd33			.DUMP: 
bd33				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
bd33 37				db WORD_SYS_CORE+35             
bd34 6b bd			dw .CDUMP            
bd36 05				db 4 + 1 
bd37 .. 00			db "DUMP",0              
bd3c				endm 
# End of macro CWHEAD
bd3c			; | DUMP ( x -- ) With address x display dump   | DONE 
bd3c			; TODO pop address to use off of the stack 
bd3c					if DEBUG_FORTH_WORDS_KEY 
bd3c						DMARK "DUM" 
bd3c f5				push af  
bd3d 3a 51 bd			ld a, (.dmark)  
bd40 32 65 ee			ld (debug_mark),a  
bd43 3a 52 bd			ld a, (.dmark+1)  
bd46 32 66 ee			ld (debug_mark+1),a  
bd49 3a 53 bd			ld a, (.dmark+2)  
bd4c 32 67 ee			ld (debug_mark+2),a  
bd4f 18 03			jr .pastdmark  
bd51 ..			.dmark: db "DUM"  
bd54 f1			.pastdmark: pop af  
bd55			endm  
# End of macro DMARK
bd55						CALLMONITOR 
bd55 cd 6f ee			call debug_vector  
bd58				endm  
# End of macro CALLMONITOR
bd58					endif 
bd58 cd bd 8a				call clear_display 
bd5b			 
bd5b					; get address 
bd5b			 
bd5b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bd5b cd 8a 9c			call macro_dsp_valuehl 
bd5e				endm 
# End of macro FORTH_DSP_VALUEHL
bd5e				 
bd5e					; save it for cdump 
bd5e			 
bd5e 22 de e5				ld (os_cur_ptr),hl 
bd61			 
bd61					; destroy value TOS 
bd61			 
bd61					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd61 cd 42 9d			call macro_forth_dsp_pop 
bd64				endm 
# End of macro FORTH_DSP_POP
bd64			 
bd64 cd 05 99				call dumpcont	; skip old style of param parsing	 
bd67 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
bd68					NEXTW 
bd68 c3 76 9e			jp macro_next 
bd6b				endm 
# End of macro NEXTW
bd6b			.CDUMP: 
bd6b				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
bd6b 38				db WORD_SYS_CORE+36             
bd6c 9b bd			dw .DAT            
bd6e 06				db 5 + 1 
bd6f .. 00			db "CDUMP",0              
bd75				endm 
# End of macro CWHEAD
bd75			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
bd75					if DEBUG_FORTH_WORDS_KEY 
bd75						DMARK "CDP" 
bd75 f5				push af  
bd76 3a 8a bd			ld a, (.dmark)  
bd79 32 65 ee			ld (debug_mark),a  
bd7c 3a 8b bd			ld a, (.dmark+1)  
bd7f 32 66 ee			ld (debug_mark+1),a  
bd82 3a 8c bd			ld a, (.dmark+2)  
bd85 32 67 ee			ld (debug_mark+2),a  
bd88 18 03			jr .pastdmark  
bd8a ..			.dmark: db "CDP"  
bd8d f1			.pastdmark: pop af  
bd8e			endm  
# End of macro DMARK
bd8e						CALLMONITOR 
bd8e cd 6f ee			call debug_vector  
bd91				endm  
# End of macro CALLMONITOR
bd91					endif 
bd91 cd bd 8a				call clear_display 
bd94 cd 05 99				call dumpcont	 
bd97 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
bd98					NEXTW 
bd98 c3 76 9e			jp macro_next 
bd9b				endm 
# End of macro NEXTW
bd9b			 
bd9b			 
bd9b			 
bd9b			 
bd9b			.DAT: 
bd9b				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
bd9b 3d				db WORD_SYS_CORE+41             
bd9c f1 bd			dw .HOME            
bd9e 03				db 2 + 1 
bd9f .. 00			db "AT",0              
bda2				endm 
# End of macro CWHEAD
bda2			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
bda2					if DEBUG_FORTH_WORDS_KEY 
bda2						DMARK "AT." 
bda2 f5				push af  
bda3 3a b7 bd			ld a, (.dmark)  
bda6 32 65 ee			ld (debug_mark),a  
bda9 3a b8 bd			ld a, (.dmark+1)  
bdac 32 66 ee			ld (debug_mark+1),a  
bdaf 3a b9 bd			ld a, (.dmark+2)  
bdb2 32 67 ee			ld (debug_mark+2),a  
bdb5 18 03			jr .pastdmark  
bdb7 ..			.dmark: db "AT."  
bdba f1			.pastdmark: pop af  
bdbb			endm  
# End of macro DMARK
bdbb						CALLMONITOR 
bdbb cd 6f ee			call debug_vector  
bdbe				endm  
# End of macro CALLMONITOR
bdbe					endif 
bdbe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bdbe cd 8a 9c			call macro_dsp_valuehl 
bdc1				endm 
# End of macro FORTH_DSP_VALUEHL
bdc1			 
bdc1			 
bdc1					; TODO save cursor row 
bdc1 7d					ld a,l 
bdc2 fe 02				cp 2 
bdc4 20 04				jr nz, .crow3 
bdc6 3e 28				ld a, display_row_2 
bdc8 18 12				jr .ccol1 
bdca fe 03		.crow3:		cp 3 
bdcc 20 04				jr nz, .crow4 
bdce 3e 50				ld a, display_row_3 
bdd0 18 0a				jr .ccol1 
bdd2 fe 04		.crow4:		cp 4 
bdd4 20 04				jr nz, .crow1 
bdd6 3e 78				ld a, display_row_4 
bdd8 18 02				jr .ccol1 
bdda 3e 00		.crow1:		ld a,display_row_1 
bddc f5			.ccol1:		push af			; got row offset 
bddd 6f					ld l,a 
bdde 26 00				ld h,0 
bde0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bde0 cd 42 9d			call macro_forth_dsp_pop 
bde3				endm 
# End of macro FORTH_DSP_POP
bde3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bde3 cd 8a 9c			call macro_dsp_valuehl 
bde6				endm 
# End of macro FORTH_DSP_VALUEHL
bde6					; TODO save cursor col 
bde6 f1					pop af 
bde7 85					add l		; add col offset 
bde8 32 58 ea				ld (f_cursor_ptr), a 
bdeb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bdeb cd 42 9d			call macro_forth_dsp_pop 
bdee				endm 
# End of macro FORTH_DSP_POP
bdee			 
bdee					; calculate  
bdee			 
bdee					NEXTW 
bdee c3 76 9e			jp macro_next 
bdf1				endm 
# End of macro NEXTW
bdf1			 
bdf1			 
bdf1			.HOME: 
bdf1				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
bdf1 41				db WORD_SYS_CORE+45             
bdf2 1e be			dw .CR            
bdf4 05				db 4 + 1 
bdf5 .. 00			db "HOME",0              
bdfa				endm 
# End of macro CWHEAD
bdfa			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
bdfa					if DEBUG_FORTH_WORDS_KEY 
bdfa						DMARK "HOM" 
bdfa f5				push af  
bdfb 3a 0f be			ld a, (.dmark)  
bdfe 32 65 ee			ld (debug_mark),a  
be01 3a 10 be			ld a, (.dmark+1)  
be04 32 66 ee			ld (debug_mark+1),a  
be07 3a 11 be			ld a, (.dmark+2)  
be0a 32 67 ee			ld (debug_mark+2),a  
be0d 18 03			jr .pastdmark  
be0f ..			.dmark: db "HOM"  
be12 f1			.pastdmark: pop af  
be13			endm  
# End of macro DMARK
be13						CALLMONITOR 
be13 cd 6f ee			call debug_vector  
be16				endm  
# End of macro CALLMONITOR
be16					endif 
be16 3e 00		.home:		ld a, 0		; and home cursor 
be18 32 58 ea				ld (f_cursor_ptr), a 
be1b					NEXTW 
be1b c3 76 9e			jp macro_next 
be1e				endm 
# End of macro NEXTW
be1e			 
be1e			 
be1e			.CR: 
be1e				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
be1e 46				db WORD_SYS_CORE+50             
be1f 59 be			dw .SPACE            
be21 03				db 2 + 1 
be22 .. 00			db "CR",0              
be25				endm 
# End of macro CWHEAD
be25			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
be25					if DEBUG_FORTH_WORDS_KEY 
be25						DMARK "CR." 
be25 f5				push af  
be26 3a 3a be			ld a, (.dmark)  
be29 32 65 ee			ld (debug_mark),a  
be2c 3a 3b be			ld a, (.dmark+1)  
be2f 32 66 ee			ld (debug_mark+1),a  
be32 3a 3c be			ld a, (.dmark+2)  
be35 32 67 ee			ld (debug_mark+2),a  
be38 18 03			jr .pastdmark  
be3a ..			.dmark: db "CR."  
be3d f1			.pastdmark: pop af  
be3e			endm  
# End of macro DMARK
be3e						CALLMONITOR 
be3e cd 6f ee			call debug_vector  
be41				endm  
# End of macro CALLMONITOR
be41					endif 
be41 3e 0d				ld a, 13 
be43 32 bb e2				ld (scratch),a 
be46 3e 0a				ld a, 10 
be48 32 bc e2				ld (scratch+1),a 
be4b 3e 00				ld a, 0 
be4d 32 bd e2				ld (scratch+2),a 
be50 21 bb e2				ld hl, scratch 
be53 cd f3 9a				call forth_push_str 
be56					 
be56				       NEXTW 
be56 c3 76 9e			jp macro_next 
be59				endm 
# End of macro NEXTW
be59			.SPACE: 
be59				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
be59 46				db WORD_SYS_CORE+50             
be5a 8f be			dw .SPACES            
be5c 03				db 2 + 1 
be5d .. 00			db "BL",0              
be60				endm 
# End of macro CWHEAD
be60			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
be60					if DEBUG_FORTH_WORDS_KEY 
be60						DMARK "BL." 
be60 f5				push af  
be61 3a 75 be			ld a, (.dmark)  
be64 32 65 ee			ld (debug_mark),a  
be67 3a 76 be			ld a, (.dmark+1)  
be6a 32 66 ee			ld (debug_mark+1),a  
be6d 3a 77 be			ld a, (.dmark+2)  
be70 32 67 ee			ld (debug_mark+2),a  
be73 18 03			jr .pastdmark  
be75 ..			.dmark: db "BL."  
be78 f1			.pastdmark: pop af  
be79			endm  
# End of macro DMARK
be79						CALLMONITOR 
be79 cd 6f ee			call debug_vector  
be7c				endm  
# End of macro CALLMONITOR
be7c					endif 
be7c 3e 20				ld a, " " 
be7e 32 bb e2				ld (scratch),a 
be81 3e 00				ld a, 0 
be83 32 bc e2				ld (scratch+1),a 
be86 21 bb e2				ld hl, scratch 
be89 cd f3 9a				call forth_push_str 
be8c					 
be8c				       NEXTW 
be8c c3 76 9e			jp macro_next 
be8f				endm 
# End of macro NEXTW
be8f			 
be8f			;.blstr: db " ", 0 
be8f			 
be8f			.SPACES: 
be8f				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
be8f 47				db WORD_SYS_CORE+51             
be90 2a bf			dw .SCROLL            
be92 07				db 6 + 1 
be93 .. 00			db "SPACES",0              
be9a				endm 
# End of macro CWHEAD
be9a			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
be9a					if DEBUG_FORTH_WORDS_KEY 
be9a						DMARK "SPS" 
be9a f5				push af  
be9b 3a af be			ld a, (.dmark)  
be9e 32 65 ee			ld (debug_mark),a  
bea1 3a b0 be			ld a, (.dmark+1)  
bea4 32 66 ee			ld (debug_mark+1),a  
bea7 3a b1 be			ld a, (.dmark+2)  
beaa 32 67 ee			ld (debug_mark+2),a  
bead 18 03			jr .pastdmark  
beaf ..			.dmark: db "SPS"  
beb2 f1			.pastdmark: pop af  
beb3			endm  
# End of macro DMARK
beb3						CALLMONITOR 
beb3 cd 6f ee			call debug_vector  
beb6				endm  
# End of macro CALLMONITOR
beb6					endif 
beb6			 
beb6			 
beb6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
beb6 cd 8a 9c			call macro_dsp_valuehl 
beb9				endm 
# End of macro FORTH_DSP_VALUEHL
beb9			 
beb9 e5					push hl    ; u 
beba					if DEBUG_FORTH_WORDS 
beba						DMARK "SPA" 
beba f5				push af  
bebb 3a cf be			ld a, (.dmark)  
bebe 32 65 ee			ld (debug_mark),a  
bec1 3a d0 be			ld a, (.dmark+1)  
bec4 32 66 ee			ld (debug_mark+1),a  
bec7 3a d1 be			ld a, (.dmark+2)  
beca 32 67 ee			ld (debug_mark+2),a  
becd 18 03			jr .pastdmark  
becf ..			.dmark: db "SPA"  
bed2 f1			.pastdmark: pop af  
bed3			endm  
# End of macro DMARK
bed3						CALLMONITOR 
bed3 cd 6f ee			call debug_vector  
bed6				endm  
# End of macro CALLMONITOR
bed6					endif 
bed6			 
bed6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bed6 cd 42 9d			call macro_forth_dsp_pop 
bed9				endm 
# End of macro FORTH_DSP_POP
bed9 e1					pop hl 
beda 0e 00				ld c, 0 
bedc 45					ld b, l 
bedd 21 bb e2				ld hl, scratch  
bee0			 
bee0					if DEBUG_FORTH_WORDS 
bee0						DMARK "SP2" 
bee0 f5				push af  
bee1 3a f5 be			ld a, (.dmark)  
bee4 32 65 ee			ld (debug_mark),a  
bee7 3a f6 be			ld a, (.dmark+1)  
beea 32 66 ee			ld (debug_mark+1),a  
beed 3a f7 be			ld a, (.dmark+2)  
bef0 32 67 ee			ld (debug_mark+2),a  
bef3 18 03			jr .pastdmark  
bef5 ..			.dmark: db "SP2"  
bef8 f1			.pastdmark: pop af  
bef9			endm  
# End of macro DMARK
bef9						CALLMONITOR 
bef9 cd 6f ee			call debug_vector  
befc				endm  
# End of macro CALLMONITOR
befc					endif 
befc 3e 20				ld a, ' ' 
befe			.spaces1:	 
befe 77					ld (hl),a 
beff 23					inc hl 
bf00					 
bf00 10 fc				djnz .spaces1 
bf02 3e 00				ld a,0 
bf04 77					ld (hl),a 
bf05 21 bb e2				ld hl, scratch 
bf08					if DEBUG_FORTH_WORDS 
bf08						DMARK "SP3" 
bf08 f5				push af  
bf09 3a 1d bf			ld a, (.dmark)  
bf0c 32 65 ee			ld (debug_mark),a  
bf0f 3a 1e bf			ld a, (.dmark+1)  
bf12 32 66 ee			ld (debug_mark+1),a  
bf15 3a 1f bf			ld a, (.dmark+2)  
bf18 32 67 ee			ld (debug_mark+2),a  
bf1b 18 03			jr .pastdmark  
bf1d ..			.dmark: db "SP3"  
bf20 f1			.pastdmark: pop af  
bf21			endm  
# End of macro DMARK
bf21						CALLMONITOR 
bf21 cd 6f ee			call debug_vector  
bf24				endm  
# End of macro CALLMONITOR
bf24					endif 
bf24 cd f3 9a				call forth_push_str 
bf27			 
bf27				       NEXTW 
bf27 c3 76 9e			jp macro_next 
bf2a				endm 
# End of macro NEXTW
bf2a			 
bf2a			 
bf2a			 
bf2a			.SCROLL: 
bf2a				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
bf2a 53				db WORD_SYS_CORE+63             
bf2b 57 bf			dw .SCROLLD            
bf2d 07				db 6 + 1 
bf2e .. 00			db "SCROLL",0              
bf35				endm 
# End of macro CWHEAD
bf35			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
bf35					if DEBUG_FORTH_WORDS_KEY 
bf35						DMARK "SCR" 
bf35 f5				push af  
bf36 3a 4a bf			ld a, (.dmark)  
bf39 32 65 ee			ld (debug_mark),a  
bf3c 3a 4b bf			ld a, (.dmark+1)  
bf3f 32 66 ee			ld (debug_mark+1),a  
bf42 3a 4c bf			ld a, (.dmark+2)  
bf45 32 67 ee			ld (debug_mark+2),a  
bf48 18 03			jr .pastdmark  
bf4a ..			.dmark: db "SCR"  
bf4d f1			.pastdmark: pop af  
bf4e			endm  
# End of macro DMARK
bf4e						CALLMONITOR 
bf4e cd 6f ee			call debug_vector  
bf51				endm  
# End of macro CALLMONITOR
bf51					endif 
bf51			 
bf51 cd 7f 8a			call scroll_up 
bf54			;	call update_display 
bf54			 
bf54					NEXTW 
bf54 c3 76 9e			jp macro_next 
bf57				endm 
# End of macro NEXTW
bf57			 
bf57			 
bf57			 
bf57			;		; get dir 
bf57			; 
bf57			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf57			; 
bf57			;		push hl 
bf57			; 
bf57			;		; destroy value TOS 
bf57			; 
bf57			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf57			; 
bf57			;		; get count 
bf57			; 
bf57			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf57			; 
bf57			;		push hl 
bf57			; 
bf57			;		; destroy value TOS 
bf57			; 
bf57			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf57			; 
bf57			;		; one value on hl get other one back 
bf57			; 
bf57			;		pop bc    ; count 
bf57			; 
bf57			;		pop de   ; dir 
bf57			; 
bf57			; 
bf57			;		ld b, c 
bf57			; 
bf57			;.scrolldir:     push bc 
bf57			;		push de 
bf57			; 
bf57			;		ld a, 0 
bf57			;		cp e 
bf57			;		jr z, .scrollup  
bf57			;		call scroll_down 
bf57			;		jr .scrollnext 
bf57			;.scrollup:	call scroll_up 
bf57			; 
bf57			;		 
bf57			;.scrollnext: 
bf57			;		pop de 
bf57			;		pop bc 
bf57			;		djnz .scrolldir 
bf57			; 
bf57			; 
bf57			; 
bf57			; 
bf57			; 
bf57			;		NEXTW 
bf57			 
bf57			.SCROLLD: 
bf57				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
bf57 53				db WORD_SYS_CORE+63             
bf58 85 bf			dw .ATQ            
bf5a 08				db 7 + 1 
bf5b .. 00			db "SCROLLD",0              
bf63				endm 
# End of macro CWHEAD
bf63			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
bf63					if DEBUG_FORTH_WORDS_KEY 
bf63						DMARK "SCD" 
bf63 f5				push af  
bf64 3a 78 bf			ld a, (.dmark)  
bf67 32 65 ee			ld (debug_mark),a  
bf6a 3a 79 bf			ld a, (.dmark+1)  
bf6d 32 66 ee			ld (debug_mark+1),a  
bf70 3a 7a bf			ld a, (.dmark+2)  
bf73 32 67 ee			ld (debug_mark+2),a  
bf76 18 03			jr .pastdmark  
bf78 ..			.dmark: db "SCD"  
bf7b f1			.pastdmark: pop af  
bf7c			endm  
# End of macro DMARK
bf7c						CALLMONITOR 
bf7c cd 6f ee			call debug_vector  
bf7f				endm  
# End of macro CALLMONITOR
bf7f					endif 
bf7f			 
bf7f cd a3 8a			call scroll_down 
bf82			;	call update_display 
bf82			 
bf82					NEXTW 
bf82 c3 76 9e			jp macro_next 
bf85				endm 
# End of macro NEXTW
bf85			 
bf85			 
bf85			.ATQ: 
bf85				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
bf85 62				db WORD_SYS_CORE+78             
bf86 e3 bf			dw .AUTODSP            
bf88 04				db 3 + 1 
bf89 .. 00			db "AT@",0              
bf8d				endm 
# End of macro CWHEAD
bf8d			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
bf8d					if DEBUG_FORTH_WORDS_KEY 
bf8d						DMARK "ATA" 
bf8d f5				push af  
bf8e 3a a2 bf			ld a, (.dmark)  
bf91 32 65 ee			ld (debug_mark),a  
bf94 3a a3 bf			ld a, (.dmark+1)  
bf97 32 66 ee			ld (debug_mark+1),a  
bf9a 3a a4 bf			ld a, (.dmark+2)  
bf9d 32 67 ee			ld (debug_mark+2),a  
bfa0 18 03			jr .pastdmark  
bfa2 ..			.dmark: db "ATA"  
bfa5 f1			.pastdmark: pop af  
bfa6			endm  
# End of macro DMARK
bfa6						CALLMONITOR 
bfa6 cd 6f ee			call debug_vector  
bfa9				endm  
# End of macro CALLMONITOR
bfa9					endif 
bfa9			 
bfa9			 
bfa9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfa9 cd 8a 9c			call macro_dsp_valuehl 
bfac				endm 
# End of macro FORTH_DSP_VALUEHL
bfac			 
bfac					; TODO save cursor row 
bfac 7d					ld a,l 
bfad fe 02				cp 2 
bfaf 20 04				jr nz, .crow3aq 
bfb1 3e 28				ld a, display_row_2 
bfb3 18 12				jr .ccol1aq 
bfb5 fe 03		.crow3aq:		cp 3 
bfb7 20 04				jr nz, .crow4aq 
bfb9 3e 50				ld a, display_row_3 
bfbb 18 0a				jr .ccol1aq 
bfbd fe 04		.crow4aq:		cp 4 
bfbf 20 04				jr nz, .crow1aq 
bfc1 3e 78				ld a, display_row_4 
bfc3 18 02				jr .ccol1aq 
bfc5 3e 00		.crow1aq:		ld a,display_row_1 
bfc7 f5			.ccol1aq:		push af			; got row offset 
bfc8 6f					ld l,a 
bfc9 26 00				ld h,0 
bfcb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfcb cd 42 9d			call macro_forth_dsp_pop 
bfce				endm 
# End of macro FORTH_DSP_POP
bfce					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfce cd 8a 9c			call macro_dsp_valuehl 
bfd1				endm 
# End of macro FORTH_DSP_VALUEHL
bfd1					; TODO save cursor col 
bfd1 f1					pop af 
bfd2 85					add l		; add col offset 
bfd3			 
bfd3					; add current frame buffer address 
bfd3 2a c6 eb				ld hl, (display_fb_active) 
bfd6 cd ea 8c				call addatohl 
bfd9			 
bfd9			 
bfd9			 
bfd9			 
bfd9					; get char frame buffer location offset in hl 
bfd9			 
bfd9 7e					ld a,(hl) 
bfda 26 00				ld h, 0 
bfdc 6f					ld l, a 
bfdd			 
bfdd cd 85 9a				call forth_push_numhl 
bfe0			 
bfe0			 
bfe0					NEXTW 
bfe0 c3 76 9e			jp macro_next 
bfe3				endm 
# End of macro NEXTW
bfe3			 
bfe3			.AUTODSP: 
bfe3				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
bfe3 63				db WORD_SYS_CORE+79             
bfe4 f9 bf			dw .MENU            
bfe6 05				db 4 + 1 
bfe7 .. 00			db "ADSP",0              
bfec				endm 
# End of macro CWHEAD
bfec			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
bfec			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
bfec			 
bfec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfec cd 8a 9c			call macro_dsp_valuehl 
bfef				endm 
# End of macro FORTH_DSP_VALUEHL
bfef			 
bfef			;		push hl 
bfef			 
bfef					; destroy value TOS 
bfef			 
bfef					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfef cd 42 9d			call macro_forth_dsp_pop 
bff2				endm 
# End of macro FORTH_DSP_POP
bff2			 
bff2			;		pop hl 
bff2			 
bff2 7d					ld a,l 
bff3 32 36 ea				ld (cli_autodisplay), a 
bff6				       NEXTW 
bff6 c3 76 9e			jp macro_next 
bff9				endm 
# End of macro NEXTW
bff9			 
bff9			.MENU: 
bff9				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
bff9 70				db WORD_SYS_CORE+92             
bffa a2 c0			dw .ENDDISPLAY            
bffc 05				db 4 + 1 
bffd .. 00			db "MENU",0              
c002				endm 
# End of macro CWHEAD
c002			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
c002			 
c002			;		; get number of items on the stack 
c002			; 
c002				 
c002					FORTH_DSP_VALUEHL 
c002 cd 8a 9c			call macro_dsp_valuehl 
c005				endm 
# End of macro FORTH_DSP_VALUEHL
c005				 
c005					if DEBUG_FORTH_WORDS_KEY 
c005						DMARK "MNU" 
c005 f5				push af  
c006 3a 1a c0			ld a, (.dmark)  
c009 32 65 ee			ld (debug_mark),a  
c00c 3a 1b c0			ld a, (.dmark+1)  
c00f 32 66 ee			ld (debug_mark+1),a  
c012 3a 1c c0			ld a, (.dmark+2)  
c015 32 67 ee			ld (debug_mark+2),a  
c018 18 03			jr .pastdmark  
c01a ..			.dmark: db "MNU"  
c01d f1			.pastdmark: pop af  
c01e			endm  
# End of macro DMARK
c01e						CALLMONITOR 
c01e cd 6f ee			call debug_vector  
c021				endm  
# End of macro CALLMONITOR
c021					endif 
c021			 
c021 45					ld b, l	 
c022 05					dec b 
c023			 
c023					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c023 cd 42 9d			call macro_forth_dsp_pop 
c026				endm 
# End of macro FORTH_DSP_POP
c026			 
c026			 
c026					; go directly through the stack to pluck out the string pointers and build an array 
c026			 
c026			;		FORTH_DSP 
c026			 
c026					; hl contains top most stack item 
c026				 
c026 11 bb e2				ld de, scratch 
c029			 
c029			.mbuild: 
c029			 
c029					FORTH_DSP_VALUEHL 
c029 cd 8a 9c			call macro_dsp_valuehl 
c02c				endm 
# End of macro FORTH_DSP_VALUEHL
c02c			 
c02c					if DEBUG_FORTH_WORDS 
c02c						DMARK "MN3" 
c02c f5				push af  
c02d 3a 41 c0			ld a, (.dmark)  
c030 32 65 ee			ld (debug_mark),a  
c033 3a 42 c0			ld a, (.dmark+1)  
c036 32 66 ee			ld (debug_mark+1),a  
c039 3a 43 c0			ld a, (.dmark+2)  
c03c 32 67 ee			ld (debug_mark+2),a  
c03f 18 03			jr .pastdmark  
c041 ..			.dmark: db "MN3"  
c044 f1			.pastdmark: pop af  
c045			endm  
# End of macro DMARK
c045						CALLMONITOR 
c045 cd 6f ee			call debug_vector  
c048				endm  
# End of macro CALLMONITOR
c048					endif 
c048 eb					ex de, hl 
c049 73					ld (hl), e 
c04a 23					inc hl 
c04b 72					ld (hl), d 
c04c 23					inc hl 
c04d eb					ex de, hl 
c04e			 
c04e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c04e cd 42 9d			call macro_forth_dsp_pop 
c051				endm 
# End of macro FORTH_DSP_POP
c051			 
c051 10 d6				djnz .mbuild 
c053			 
c053					; done add term 
c053			 
c053 eb					ex de, hl 
c054 36 00				ld (hl), 0 
c056 23					inc hl 
c057 36 00				ld (hl), 0 
c059			 
c059				 
c059					 
c059 21 bb e2				ld hl, scratch 
c05c			 
c05c					if DEBUG_FORTH_WORDS 
c05c						DMARK "MNx" 
c05c f5				push af  
c05d 3a 71 c0			ld a, (.dmark)  
c060 32 65 ee			ld (debug_mark),a  
c063 3a 72 c0			ld a, (.dmark+1)  
c066 32 66 ee			ld (debug_mark+1),a  
c069 3a 73 c0			ld a, (.dmark+2)  
c06c 32 67 ee			ld (debug_mark+2),a  
c06f 18 03			jr .pastdmark  
c071 ..			.dmark: db "MNx"  
c074 f1			.pastdmark: pop af  
c075			endm  
# End of macro DMARK
c075						CALLMONITOR 
c075 cd 6f ee			call debug_vector  
c078				endm  
# End of macro CALLMONITOR
c078					endif 
c078			 
c078			 
c078			 
c078 3e 00				ld a, 0 
c07a cd ee 8a				call menu 
c07d			 
c07d			 
c07d 6f					ld l, a 
c07e 26 00				ld h, 0 
c080			 
c080					if DEBUG_FORTH_WORDS 
c080						DMARK "MNr" 
c080 f5				push af  
c081 3a 95 c0			ld a, (.dmark)  
c084 32 65 ee			ld (debug_mark),a  
c087 3a 96 c0			ld a, (.dmark+1)  
c08a 32 66 ee			ld (debug_mark+1),a  
c08d 3a 97 c0			ld a, (.dmark+2)  
c090 32 67 ee			ld (debug_mark+2),a  
c093 18 03			jr .pastdmark  
c095 ..			.dmark: db "MNr"  
c098 f1			.pastdmark: pop af  
c099			endm  
# End of macro DMARK
c099						CALLMONITOR 
c099 cd 6f ee			call debug_vector  
c09c				endm  
# End of macro CALLMONITOR
c09c					endif 
c09c			 
c09c cd 85 9a				call forth_push_numhl 
c09f			 
c09f			 
c09f			 
c09f			 
c09f				       NEXTW 
c09f c3 76 9e			jp macro_next 
c0a2				endm 
# End of macro NEXTW
c0a2			 
c0a2			 
c0a2			.ENDDISPLAY: 
c0a2			 
c0a2			; eof 
# End of file forth_words_display.asm
c0a2			include "forth_words_str.asm" 
c0a2			 
c0a2			; | ## String Words 
c0a2			 
c0a2			.PTR:   
c0a2			 
c0a2				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c0a2 48				db WORD_SYS_CORE+52             
c0a3 cf c0			dw .STYPE            
c0a5 04				db 3 + 1 
c0a6 .. 00			db "PTR",0              
c0aa				endm 
# End of macro CWHEAD
c0aa			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c0aa			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c0aa			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c0aa			 
c0aa					if DEBUG_FORTH_WORDS_KEY 
c0aa						DMARK "PTR" 
c0aa f5				push af  
c0ab 3a bf c0			ld a, (.dmark)  
c0ae 32 65 ee			ld (debug_mark),a  
c0b1 3a c0 c0			ld a, (.dmark+1)  
c0b4 32 66 ee			ld (debug_mark+1),a  
c0b7 3a c1 c0			ld a, (.dmark+2)  
c0ba 32 67 ee			ld (debug_mark+2),a  
c0bd 18 03			jr .pastdmark  
c0bf ..			.dmark: db "PTR"  
c0c2 f1			.pastdmark: pop af  
c0c3			endm  
# End of macro DMARK
c0c3						CALLMONITOR 
c0c3 cd 6f ee			call debug_vector  
c0c6				endm  
# End of macro CALLMONITOR
c0c6					endif 
c0c6					FORTH_DSP_VALUEHL 
c0c6 cd 8a 9c			call macro_dsp_valuehl 
c0c9				endm 
# End of macro FORTH_DSP_VALUEHL
c0c9 cd 85 9a				call forth_push_numhl 
c0cc			 
c0cc			 
c0cc					NEXTW 
c0cc c3 76 9e			jp macro_next 
c0cf				endm 
# End of macro NEXTW
c0cf			.STYPE: 
c0cf				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c0cf 48				db WORD_SYS_CORE+52             
c0d0 1e c1			dw .UPPER            
c0d2 06				db 5 + 1 
c0d3 .. 00			db "STYPE",0              
c0d9				endm 
# End of macro CWHEAD
c0d9			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c0d9					if DEBUG_FORTH_WORDS_KEY 
c0d9						DMARK "STY" 
c0d9 f5				push af  
c0da 3a ee c0			ld a, (.dmark)  
c0dd 32 65 ee			ld (debug_mark),a  
c0e0 3a ef c0			ld a, (.dmark+1)  
c0e3 32 66 ee			ld (debug_mark+1),a  
c0e6 3a f0 c0			ld a, (.dmark+2)  
c0e9 32 67 ee			ld (debug_mark+2),a  
c0ec 18 03			jr .pastdmark  
c0ee ..			.dmark: db "STY"  
c0f1 f1			.pastdmark: pop af  
c0f2			endm  
# End of macro DMARK
c0f2						CALLMONITOR 
c0f2 cd 6f ee			call debug_vector  
c0f5				endm  
# End of macro CALLMONITOR
c0f5					endif 
c0f5					FORTH_DSP 
c0f5 cd 50 9c			call macro_forth_dsp 
c0f8				endm 
# End of macro FORTH_DSP
c0f8					;v5 FORTH_DSP_VALUE 
c0f8			 
c0f8 7e					ld a, (hl) 
c0f9			 
c0f9 f5					push af 
c0fa			 
c0fa			; Dont destroy TOS		FORTH_DSP_POP 
c0fa			 
c0fa f1					pop af 
c0fb			 
c0fb fe 01				cp DS_TYPE_STR 
c0fd 28 09				jr z, .typestr 
c0ff			 
c0ff fe 02				cp DS_TYPE_INUM 
c101 28 0a				jr z, .typeinum 
c103			 
c103 21 1c c1				ld hl, .tna 
c106 18 0a				jr .tpush 
c108			 
c108 21 18 c1		.typestr:	ld hl, .tstr 
c10b 18 05				jr .tpush 
c10d 21 1a c1		.typeinum:	ld hl, .tinum 
c110 18 00				jr .tpush 
c112			 
c112			.tpush: 
c112			 
c112 cd f3 9a				call forth_push_str 
c115			 
c115					NEXTW 
c115 c3 76 9e			jp macro_next 
c118				endm 
# End of macro NEXTW
c118 .. 00		.tstr:	db "s",0 
c11a .. 00		.tinum:  db "i",0 
c11c .. 00		.tna:   db "?", 0 
c11e			 
c11e			 
c11e			.UPPER: 
c11e				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c11e 48				db WORD_SYS_CORE+52             
c11f 59 c1			dw .LOWER            
c121 06				db 5 + 1 
c122 .. 00			db "UPPER",0              
c128				endm 
# End of macro CWHEAD
c128			; | UPPER ( s -- s ) Upper case string s  | DONE 
c128					if DEBUG_FORTH_WORDS_KEY 
c128						DMARK "UPR" 
c128 f5				push af  
c129 3a 3d c1			ld a, (.dmark)  
c12c 32 65 ee			ld (debug_mark),a  
c12f 3a 3e c1			ld a, (.dmark+1)  
c132 32 66 ee			ld (debug_mark+1),a  
c135 3a 3f c1			ld a, (.dmark+2)  
c138 32 67 ee			ld (debug_mark+2),a  
c13b 18 03			jr .pastdmark  
c13d ..			.dmark: db "UPR"  
c140 f1			.pastdmark: pop af  
c141			endm  
# End of macro DMARK
c141						CALLMONITOR 
c141 cd 6f ee			call debug_vector  
c144				endm  
# End of macro CALLMONITOR
c144					endif 
c144			 
c144					FORTH_DSP 
c144 cd 50 9c			call macro_forth_dsp 
c147				endm 
# End of macro FORTH_DSP
c147					 
c147			; TODO check is string type 
c147			 
c147					FORTH_DSP_VALUEHL 
c147 cd 8a 9c			call macro_dsp_valuehl 
c14a				endm 
# End of macro FORTH_DSP_VALUEHL
c14a			; get pointer to string in hl 
c14a			 
c14a 7e			.toup:		ld a, (hl) 
c14b fe 00				cp 0 
c14d 28 07				jr z, .toupdone 
c14f			 
c14f cd 5f 8f				call to_upper 
c152			 
c152 77					ld (hl), a 
c153 23					inc hl 
c154 18 f4				jr .toup 
c156			 
c156					 
c156			 
c156			 
c156			; for each char convert to upper 
c156					 
c156			.toupdone: 
c156			 
c156			 
c156					NEXTW 
c156 c3 76 9e			jp macro_next 
c159				endm 
# End of macro NEXTW
c159			.LOWER: 
c159				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c159 48				db WORD_SYS_CORE+52             
c15a 94 c1			dw .TCASE            
c15c 06				db 5 + 1 
c15d .. 00			db "LOWER",0              
c163				endm 
# End of macro CWHEAD
c163			; | LOWER ( s -- s ) Lower case string s  | DONE 
c163					if DEBUG_FORTH_WORDS_KEY 
c163						DMARK "LWR" 
c163 f5				push af  
c164 3a 78 c1			ld a, (.dmark)  
c167 32 65 ee			ld (debug_mark),a  
c16a 3a 79 c1			ld a, (.dmark+1)  
c16d 32 66 ee			ld (debug_mark+1),a  
c170 3a 7a c1			ld a, (.dmark+2)  
c173 32 67 ee			ld (debug_mark+2),a  
c176 18 03			jr .pastdmark  
c178 ..			.dmark: db "LWR"  
c17b f1			.pastdmark: pop af  
c17c			endm  
# End of macro DMARK
c17c						CALLMONITOR 
c17c cd 6f ee			call debug_vector  
c17f				endm  
# End of macro CALLMONITOR
c17f					endif 
c17f			 
c17f					FORTH_DSP 
c17f cd 50 9c			call macro_forth_dsp 
c182				endm 
# End of macro FORTH_DSP
c182					 
c182			; TODO check is string type 
c182			 
c182					FORTH_DSP_VALUEHL 
c182 cd 8a 9c			call macro_dsp_valuehl 
c185				endm 
# End of macro FORTH_DSP_VALUEHL
c185			; get pointer to string in hl 
c185			 
c185 7e			.tolow:		ld a, (hl) 
c186 fe 00				cp 0 
c188 28 07				jr z, .tolowdone 
c18a			 
c18a cd 68 8f				call to_lower 
c18d			 
c18d 77					ld (hl), a 
c18e 23					inc hl 
c18f 18 f4				jr .tolow 
c191			 
c191					 
c191			 
c191			 
c191			; for each char convert to low 
c191					 
c191			.tolowdone: 
c191					NEXTW 
c191 c3 76 9e			jp macro_next 
c194				endm 
# End of macro NEXTW
c194			.TCASE: 
c194				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c194 48				db WORD_SYS_CORE+52             
c195 ca c2			dw .SUBSTR            
c197 06				db 5 + 1 
c198 .. 00			db "TCASE",0              
c19e				endm 
# End of macro CWHEAD
c19e			; | TCASE ( s -- s ) Title case string s  | DONE 
c19e					if DEBUG_FORTH_WORDS_KEY 
c19e						DMARK "TCS" 
c19e f5				push af  
c19f 3a b3 c1			ld a, (.dmark)  
c1a2 32 65 ee			ld (debug_mark),a  
c1a5 3a b4 c1			ld a, (.dmark+1)  
c1a8 32 66 ee			ld (debug_mark+1),a  
c1ab 3a b5 c1			ld a, (.dmark+2)  
c1ae 32 67 ee			ld (debug_mark+2),a  
c1b1 18 03			jr .pastdmark  
c1b3 ..			.dmark: db "TCS"  
c1b6 f1			.pastdmark: pop af  
c1b7			endm  
# End of macro DMARK
c1b7						CALLMONITOR 
c1b7 cd 6f ee			call debug_vector  
c1ba				endm  
# End of macro CALLMONITOR
c1ba					endif 
c1ba			 
c1ba					FORTH_DSP 
c1ba cd 50 9c			call macro_forth_dsp 
c1bd				endm 
# End of macro FORTH_DSP
c1bd					 
c1bd			; TODO check is string type 
c1bd			 
c1bd					FORTH_DSP_VALUEHL 
c1bd cd 8a 9c			call macro_dsp_valuehl 
c1c0				endm 
# End of macro FORTH_DSP_VALUEHL
c1c0			; get pointer to string in hl 
c1c0			 
c1c0					if DEBUG_FORTH_WORDS 
c1c0						DMARK "TC1" 
c1c0 f5				push af  
c1c1 3a d5 c1			ld a, (.dmark)  
c1c4 32 65 ee			ld (debug_mark),a  
c1c7 3a d6 c1			ld a, (.dmark+1)  
c1ca 32 66 ee			ld (debug_mark+1),a  
c1cd 3a d7 c1			ld a, (.dmark+2)  
c1d0 32 67 ee			ld (debug_mark+2),a  
c1d3 18 03			jr .pastdmark  
c1d5 ..			.dmark: db "TC1"  
c1d8 f1			.pastdmark: pop af  
c1d9			endm  
# End of macro DMARK
c1d9						CALLMONITOR 
c1d9 cd 6f ee			call debug_vector  
c1dc				endm  
# End of macro CALLMONITOR
c1dc					endif 
c1dc			 
c1dc					; first time in turn to upper case first char 
c1dc			 
c1dc 7e					ld a, (hl) 
c1dd c3 67 c2				jp .totsiptou 
c1e0			 
c1e0			 
c1e0 7e			.tot:		ld a, (hl) 
c1e1 fe 00				cp 0 
c1e3 ca ab c2				jp z, .totdone 
c1e6			 
c1e6					if DEBUG_FORTH_WORDS 
c1e6						DMARK "TC2" 
c1e6 f5				push af  
c1e7 3a fb c1			ld a, (.dmark)  
c1ea 32 65 ee			ld (debug_mark),a  
c1ed 3a fc c1			ld a, (.dmark+1)  
c1f0 32 66 ee			ld (debug_mark+1),a  
c1f3 3a fd c1			ld a, (.dmark+2)  
c1f6 32 67 ee			ld (debug_mark+2),a  
c1f9 18 03			jr .pastdmark  
c1fb ..			.dmark: db "TC2"  
c1fe f1			.pastdmark: pop af  
c1ff			endm  
# End of macro DMARK
c1ff						CALLMONITOR 
c1ff cd 6f ee			call debug_vector  
c202				endm  
# End of macro CALLMONITOR
c202					endif 
c202					; check to see if current char is a space 
c202			 
c202 fe 20				cp ' ' 
c204 28 21				jr z, .totsp 
c206 cd 68 8f				call to_lower 
c209					if DEBUG_FORTH_WORDS 
c209						DMARK "TC3" 
c209 f5				push af  
c20a 3a 1e c2			ld a, (.dmark)  
c20d 32 65 ee			ld (debug_mark),a  
c210 3a 1f c2			ld a, (.dmark+1)  
c213 32 66 ee			ld (debug_mark+1),a  
c216 3a 20 c2			ld a, (.dmark+2)  
c219 32 67 ee			ld (debug_mark+2),a  
c21c 18 03			jr .pastdmark  
c21e ..			.dmark: db "TC3"  
c221 f1			.pastdmark: pop af  
c222			endm  
# End of macro DMARK
c222						CALLMONITOR 
c222 cd 6f ee			call debug_vector  
c225				endm  
# End of macro CALLMONITOR
c225					endif 
c225 18 63				jr .totnxt 
c227			 
c227			.totsp:         ; on a space, find next char which should be upper 
c227			 
c227					if DEBUG_FORTH_WORDS 
c227						DMARK "TC4" 
c227 f5				push af  
c228 3a 3c c2			ld a, (.dmark)  
c22b 32 65 ee			ld (debug_mark),a  
c22e 3a 3d c2			ld a, (.dmark+1)  
c231 32 66 ee			ld (debug_mark+1),a  
c234 3a 3e c2			ld a, (.dmark+2)  
c237 32 67 ee			ld (debug_mark+2),a  
c23a 18 03			jr .pastdmark  
c23c ..			.dmark: db "TC4"  
c23f f1			.pastdmark: pop af  
c240			endm  
# End of macro DMARK
c240						CALLMONITOR 
c240 cd 6f ee			call debug_vector  
c243				endm  
# End of macro CALLMONITOR
c243					endif 
c243					;; 
c243			 
c243 fe 20				cp ' ' 
c245 20 20				jr nz, .totsiptou 
c247 23					inc hl 
c248 7e					ld a, (hl) 
c249					if DEBUG_FORTH_WORDS 
c249						DMARK "TC5" 
c249 f5				push af  
c24a 3a 5e c2			ld a, (.dmark)  
c24d 32 65 ee			ld (debug_mark),a  
c250 3a 5f c2			ld a, (.dmark+1)  
c253 32 66 ee			ld (debug_mark+1),a  
c256 3a 60 c2			ld a, (.dmark+2)  
c259 32 67 ee			ld (debug_mark+2),a  
c25c 18 03			jr .pastdmark  
c25e ..			.dmark: db "TC5"  
c261 f1			.pastdmark: pop af  
c262			endm  
# End of macro DMARK
c262						CALLMONITOR 
c262 cd 6f ee			call debug_vector  
c265				endm  
# End of macro CALLMONITOR
c265					endif 
c265 18 c0				jr .totsp 
c267 fe 00		.totsiptou:    cp 0 
c269 28 40				jr z, .totdone 
c26b					; not space and not zero term so upper case it 
c26b cd 5f 8f				call to_upper 
c26e			 
c26e					if DEBUG_FORTH_WORDS 
c26e						DMARK "TC6" 
c26e f5				push af  
c26f 3a 83 c2			ld a, (.dmark)  
c272 32 65 ee			ld (debug_mark),a  
c275 3a 84 c2			ld a, (.dmark+1)  
c278 32 66 ee			ld (debug_mark+1),a  
c27b 3a 85 c2			ld a, (.dmark+2)  
c27e 32 67 ee			ld (debug_mark+2),a  
c281 18 03			jr .pastdmark  
c283 ..			.dmark: db "TC6"  
c286 f1			.pastdmark: pop af  
c287			endm  
# End of macro DMARK
c287						CALLMONITOR 
c287 cd 6f ee			call debug_vector  
c28a				endm  
# End of macro CALLMONITOR
c28a					endif 
c28a			 
c28a			 
c28a			.totnxt: 
c28a			 
c28a 77					ld (hl), a 
c28b 23					inc hl 
c28c					if DEBUG_FORTH_WORDS 
c28c						DMARK "TC7" 
c28c f5				push af  
c28d 3a a1 c2			ld a, (.dmark)  
c290 32 65 ee			ld (debug_mark),a  
c293 3a a2 c2			ld a, (.dmark+1)  
c296 32 66 ee			ld (debug_mark+1),a  
c299 3a a3 c2			ld a, (.dmark+2)  
c29c 32 67 ee			ld (debug_mark+2),a  
c29f 18 03			jr .pastdmark  
c2a1 ..			.dmark: db "TC7"  
c2a4 f1			.pastdmark: pop af  
c2a5			endm  
# End of macro DMARK
c2a5						CALLMONITOR 
c2a5 cd 6f ee			call debug_vector  
c2a8				endm  
# End of macro CALLMONITOR
c2a8					endif 
c2a8 c3 e0 c1				jp .tot 
c2ab			 
c2ab					 
c2ab			 
c2ab			 
c2ab			; for each char convert to low 
c2ab					 
c2ab			.totdone: 
c2ab					if DEBUG_FORTH_WORDS 
c2ab						DMARK "TCd" 
c2ab f5				push af  
c2ac 3a c0 c2			ld a, (.dmark)  
c2af 32 65 ee			ld (debug_mark),a  
c2b2 3a c1 c2			ld a, (.dmark+1)  
c2b5 32 66 ee			ld (debug_mark+1),a  
c2b8 3a c2 c2			ld a, (.dmark+2)  
c2bb 32 67 ee			ld (debug_mark+2),a  
c2be 18 03			jr .pastdmark  
c2c0 ..			.dmark: db "TCd"  
c2c3 f1			.pastdmark: pop af  
c2c4			endm  
# End of macro DMARK
c2c4						CALLMONITOR 
c2c4 cd 6f ee			call debug_vector  
c2c7				endm  
# End of macro CALLMONITOR
c2c7					endif 
c2c7					NEXTW 
c2c7 c3 76 9e			jp macro_next 
c2ca				endm 
# End of macro NEXTW
c2ca			 
c2ca			.SUBSTR: 
c2ca				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c2ca 48				db WORD_SYS_CORE+52             
c2cb 28 c3			dw .LEFT            
c2cd 07				db 6 + 1 
c2ce .. 00			db "SUBSTR",0              
c2d5				endm 
# End of macro CWHEAD
c2d5			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c2d5			 
c2d5					if DEBUG_FORTH_WORDS_KEY 
c2d5						DMARK "SST" 
c2d5 f5				push af  
c2d6 3a ea c2			ld a, (.dmark)  
c2d9 32 65 ee			ld (debug_mark),a  
c2dc 3a eb c2			ld a, (.dmark+1)  
c2df 32 66 ee			ld (debug_mark+1),a  
c2e2 3a ec c2			ld a, (.dmark+2)  
c2e5 32 67 ee			ld (debug_mark+2),a  
c2e8 18 03			jr .pastdmark  
c2ea ..			.dmark: db "SST"  
c2ed f1			.pastdmark: pop af  
c2ee			endm  
# End of macro DMARK
c2ee						CALLMONITOR 
c2ee cd 6f ee			call debug_vector  
c2f1				endm  
# End of macro CALLMONITOR
c2f1					endif 
c2f1			; TODO check string type 
c2f1					FORTH_DSP_VALUEHL 
c2f1 cd 8a 9c			call macro_dsp_valuehl 
c2f4				endm 
# End of macro FORTH_DSP_VALUEHL
c2f4			 
c2f4 e5					push hl      ; string length 
c2f5			 
c2f5					FORTH_DSP_POP 
c2f5 cd 42 9d			call macro_forth_dsp_pop 
c2f8				endm 
# End of macro FORTH_DSP_POP
c2f8			 
c2f8					FORTH_DSP_VALUEHL 
c2f8 cd 8a 9c			call macro_dsp_valuehl 
c2fb				endm 
# End of macro FORTH_DSP_VALUEHL
c2fb			 
c2fb e5					push hl     ; start char 
c2fc			 
c2fc					FORTH_DSP_POP 
c2fc cd 42 9d			call macro_forth_dsp_pop 
c2ff				endm 
# End of macro FORTH_DSP_POP
c2ff			 
c2ff			 
c2ff					FORTH_DSP_VALUE 
c2ff cd 73 9c			call macro_forth_dsp_value 
c302				endm 
# End of macro FORTH_DSP_VALUE
c302			 
c302 d1					pop de    ; get start post offset 
c303			 
c303 19					add hl, de    ; starting offset 
c304			 
c304 c1					pop bc 
c305 c5					push bc      ; grab size of string 
c306			 
c306 e5					push hl    ; save string start  
c307			 
c307 26 00				ld h, 0 
c309 69					ld l, c 
c30a 23					inc hl 
c30b 23					inc hl 
c30c			 
c30c cd c5 90				call malloc 
c30f				if DEBUG_FORTH_MALLOC_GUARD 
c30f cc 42 cc				call z,malloc_error 
c312				endif 
c312			 
c312 eb					ex de, hl      ; save malloc area for string copy 
c313 e1					pop hl    ; get back source 
c314 c1					pop bc    ; get length of string back 
c315			 
c315 d5					push de    ; save malloc area for after we push 
c316 ed b0				ldir     ; copy substr 
c318			 
c318			 
c318 eb					ex de, hl 
c319 3e 00				ld a, 0 
c31b 77					ld (hl), a   ; term substr 
c31c			 
c31c					 
c31c e1					pop hl    ; get malloc so we can push it 
c31d e5					push hl   ; save so we can free it afterwards 
c31e			 
c31e cd f3 9a				call forth_push_str 
c321			 
c321 e1					pop hl 
c322 cd 8f 91				call free 
c325			 
c325					 
c325					 
c325			 
c325			 
c325					NEXTW 
c325 c3 76 9e			jp macro_next 
c328				endm 
# End of macro NEXTW
c328			 
c328			.LEFT: 
c328				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c328 48				db WORD_SYS_CORE+52             
c329 50 c3			dw .RIGHT            
c32b 05				db 4 + 1 
c32c .. 00			db "LEFT",0              
c331				endm 
# End of macro CWHEAD
c331			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c331					if DEBUG_FORTH_WORDS_KEY 
c331						DMARK "LEF" 
c331 f5				push af  
c332 3a 46 c3			ld a, (.dmark)  
c335 32 65 ee			ld (debug_mark),a  
c338 3a 47 c3			ld a, (.dmark+1)  
c33b 32 66 ee			ld (debug_mark+1),a  
c33e 3a 48 c3			ld a, (.dmark+2)  
c341 32 67 ee			ld (debug_mark+2),a  
c344 18 03			jr .pastdmark  
c346 ..			.dmark: db "LEF"  
c349 f1			.pastdmark: pop af  
c34a			endm  
# End of macro DMARK
c34a						CALLMONITOR 
c34a cd 6f ee			call debug_vector  
c34d				endm  
# End of macro CALLMONITOR
c34d					endif 
c34d			 
c34d					NEXTW 
c34d c3 76 9e			jp macro_next 
c350				endm 
# End of macro NEXTW
c350			.RIGHT: 
c350				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c350 48				db WORD_SYS_CORE+52             
c351 79 c3			dw .STR2NUM            
c353 06				db 5 + 1 
c354 .. 00			db "RIGHT",0              
c35a				endm 
# End of macro CWHEAD
c35a			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c35a					if DEBUG_FORTH_WORDS_KEY 
c35a						DMARK "RIG" 
c35a f5				push af  
c35b 3a 6f c3			ld a, (.dmark)  
c35e 32 65 ee			ld (debug_mark),a  
c361 3a 70 c3			ld a, (.dmark+1)  
c364 32 66 ee			ld (debug_mark+1),a  
c367 3a 71 c3			ld a, (.dmark+2)  
c36a 32 67 ee			ld (debug_mark+2),a  
c36d 18 03			jr .pastdmark  
c36f ..			.dmark: db "RIG"  
c372 f1			.pastdmark: pop af  
c373			endm  
# End of macro DMARK
c373						CALLMONITOR 
c373 cd 6f ee			call debug_vector  
c376				endm  
# End of macro CALLMONITOR
c376					endif 
c376			 
c376					NEXTW 
c376 c3 76 9e			jp macro_next 
c379				endm 
# End of macro NEXTW
c379			 
c379			 
c379			.STR2NUM: 
c379				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c379 48				db WORD_SYS_CORE+52             
c37a 05 c4			dw .NUM2STR            
c37c 08				db 7 + 1 
c37d .. 00			db "STR2NUM",0              
c385				endm 
# End of macro CWHEAD
c385			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c385			 
c385			 
c385			; TODO STR type check to do 
c385					if DEBUG_FORTH_WORDS_KEY 
c385						DMARK "S2N" 
c385 f5				push af  
c386 3a 9a c3			ld a, (.dmark)  
c389 32 65 ee			ld (debug_mark),a  
c38c 3a 9b c3			ld a, (.dmark+1)  
c38f 32 66 ee			ld (debug_mark+1),a  
c392 3a 9c c3			ld a, (.dmark+2)  
c395 32 67 ee			ld (debug_mark+2),a  
c398 18 03			jr .pastdmark  
c39a ..			.dmark: db "S2N"  
c39d f1			.pastdmark: pop af  
c39e			endm  
# End of macro DMARK
c39e						CALLMONITOR 
c39e cd 6f ee			call debug_vector  
c3a1				endm  
# End of macro CALLMONITOR
c3a1					endif 
c3a1			 
c3a1					;FORTH_DSP 
c3a1					FORTH_DSP_VALUE 
c3a1 cd 73 9c			call macro_forth_dsp_value 
c3a4				endm 
# End of macro FORTH_DSP_VALUE
c3a4					;inc hl 
c3a4			 
c3a4 eb					ex de, hl 
c3a5					if DEBUG_FORTH_WORDS 
c3a5						DMARK "S2a" 
c3a5 f5				push af  
c3a6 3a ba c3			ld a, (.dmark)  
c3a9 32 65 ee			ld (debug_mark),a  
c3ac 3a bb c3			ld a, (.dmark+1)  
c3af 32 66 ee			ld (debug_mark+1),a  
c3b2 3a bc c3			ld a, (.dmark+2)  
c3b5 32 67 ee			ld (debug_mark+2),a  
c3b8 18 03			jr .pastdmark  
c3ba ..			.dmark: db "S2a"  
c3bd f1			.pastdmark: pop af  
c3be			endm  
# End of macro DMARK
c3be						CALLMONITOR 
c3be cd 6f ee			call debug_vector  
c3c1				endm  
# End of macro CALLMONITOR
c3c1					endif 
c3c1 cd e7 8f				call string_to_uint16 
c3c4			 
c3c4					if DEBUG_FORTH_WORDS 
c3c4						DMARK "S2b" 
c3c4 f5				push af  
c3c5 3a d9 c3			ld a, (.dmark)  
c3c8 32 65 ee			ld (debug_mark),a  
c3cb 3a da c3			ld a, (.dmark+1)  
c3ce 32 66 ee			ld (debug_mark+1),a  
c3d1 3a db c3			ld a, (.dmark+2)  
c3d4 32 67 ee			ld (debug_mark+2),a  
c3d7 18 03			jr .pastdmark  
c3d9 ..			.dmark: db "S2b"  
c3dc f1			.pastdmark: pop af  
c3dd			endm  
# End of macro DMARK
c3dd						CALLMONITOR 
c3dd cd 6f ee			call debug_vector  
c3e0				endm  
# End of macro CALLMONITOR
c3e0					endif 
c3e0			;		push hl 
c3e0					FORTH_DSP_POP 
c3e0 cd 42 9d			call macro_forth_dsp_pop 
c3e3				endm 
# End of macro FORTH_DSP_POP
c3e3			;		pop hl 
c3e3					 
c3e3					if DEBUG_FORTH_WORDS 
c3e3						DMARK "S2b" 
c3e3 f5				push af  
c3e4 3a f8 c3			ld a, (.dmark)  
c3e7 32 65 ee			ld (debug_mark),a  
c3ea 3a f9 c3			ld a, (.dmark+1)  
c3ed 32 66 ee			ld (debug_mark+1),a  
c3f0 3a fa c3			ld a, (.dmark+2)  
c3f3 32 67 ee			ld (debug_mark+2),a  
c3f6 18 03			jr .pastdmark  
c3f8 ..			.dmark: db "S2b"  
c3fb f1			.pastdmark: pop af  
c3fc			endm  
# End of macro DMARK
c3fc						CALLMONITOR 
c3fc cd 6f ee			call debug_vector  
c3ff				endm  
# End of macro CALLMONITOR
c3ff					endif 
c3ff cd 85 9a				call forth_push_numhl	 
c402			 
c402				 
c402				       NEXTW 
c402 c3 76 9e			jp macro_next 
c405				endm 
# End of macro NEXTW
c405			.NUM2STR: 
c405				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c405 48				db WORD_SYS_CORE+52             
c406 14 c4			dw .CONCAT            
c408 08				db 7 + 1 
c409 .. 00			db "NUM2STR",0              
c411				endm 
# End of macro CWHEAD
c411			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
c411			 
c411			;		; malloc a string to target 
c411			;		ld hl, 10     ; TODO max string size should be fine 
c411			;		call malloc 
c411			;		push hl    ; save malloc location 
c411			; 
c411			; 
c411			;; TODO check int type 
c411			;		FORTH_DSP_VALUEHL 
c411			;		ld a, l 
c411			;		call DispAToASCII   
c411			;;TODO need to chage above call to dump into string 
c411			; 
c411			; 
c411			 
c411				       NEXTW 
c411 c3 76 9e			jp macro_next 
c414				endm 
# End of macro NEXTW
c414			 
c414			.CONCAT: 
c414				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c414 48				db WORD_SYS_CORE+52             
c415 c7 c4			dw .FIND            
c417 07				db 6 + 1 
c418 .. 00			db "CONCAT",0              
c41f				endm 
# End of macro CWHEAD
c41f			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c41f			 
c41f			; TODO check string type 
c41f			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c41f			 
c41f					if DEBUG_FORTH_WORDS_KEY 
c41f						DMARK "CON" 
c41f f5				push af  
c420 3a 34 c4			ld a, (.dmark)  
c423 32 65 ee			ld (debug_mark),a  
c426 3a 35 c4			ld a, (.dmark+1)  
c429 32 66 ee			ld (debug_mark+1),a  
c42c 3a 36 c4			ld a, (.dmark+2)  
c42f 32 67 ee			ld (debug_mark+2),a  
c432 18 03			jr .pastdmark  
c434 ..			.dmark: db "CON"  
c437 f1			.pastdmark: pop af  
c438			endm  
# End of macro DMARK
c438						CALLMONITOR 
c438 cd 6f ee			call debug_vector  
c43b				endm  
# End of macro CALLMONITOR
c43b					endif 
c43b			 
c43b			 
c43b					FORTH_DSP_VALUE 
c43b cd 73 9c			call macro_forth_dsp_value 
c43e				endm 
# End of macro FORTH_DSP_VALUE
c43e e5					push hl   ; s2 
c43f			 
c43f					FORTH_DSP_POP 
c43f cd 42 9d			call macro_forth_dsp_pop 
c442				endm 
# End of macro FORTH_DSP_POP
c442			 
c442					FORTH_DSP_VALUE 
c442 cd 73 9c			call macro_forth_dsp_value 
c445				endm 
# End of macro FORTH_DSP_VALUE
c445			 
c445 e5					push hl   ; s1 
c446			 
c446					FORTH_DSP_POP 
c446 cd 42 9d			call macro_forth_dsp_pop 
c449				endm 
# End of macro FORTH_DSP_POP
c449					 
c449			 
c449					; copy s1 
c449			 
c449				 
c449					; save ptr 
c449 e1					pop hl  
c44a e5					push hl 
c44b 3e 00				ld a, 0 
c44d cd 5b 90				call strlent 
c450					;inc hl    ; zer0 
c450 06 00				ld b, 0 
c452 4d					ld c, l 
c453 e1					pop hl		 
c454 11 bb e2				ld de, scratch	 
c457					if DEBUG_FORTH_WORDS 
c457						DMARK "CO1" 
c457 f5				push af  
c458 3a 6c c4			ld a, (.dmark)  
c45b 32 65 ee			ld (debug_mark),a  
c45e 3a 6d c4			ld a, (.dmark+1)  
c461 32 66 ee			ld (debug_mark+1),a  
c464 3a 6e c4			ld a, (.dmark+2)  
c467 32 67 ee			ld (debug_mark+2),a  
c46a 18 03			jr .pastdmark  
c46c ..			.dmark: db "CO1"  
c46f f1			.pastdmark: pop af  
c470			endm  
# End of macro DMARK
c470						CALLMONITOR 
c470 cd 6f ee			call debug_vector  
c473				endm  
# End of macro CALLMONITOR
c473					endif 
c473 ed b0				ldir 
c475			 
c475 e1					pop hl 
c476 e5					push hl 
c477 d5					push de 
c478			 
c478			 
c478 3e 00				ld a, 0 
c47a cd 5b 90				call strlent 
c47d 23					inc hl    ; zer0 
c47e 23					inc hl 
c47f 06 00				ld b, 0 
c481 4d					ld c, l 
c482 d1					pop de 
c483 e1					pop hl		 
c484					if DEBUG_FORTH_WORDS 
c484						DMARK "CO2" 
c484 f5				push af  
c485 3a 99 c4			ld a, (.dmark)  
c488 32 65 ee			ld (debug_mark),a  
c48b 3a 9a c4			ld a, (.dmark+1)  
c48e 32 66 ee			ld (debug_mark+1),a  
c491 3a 9b c4			ld a, (.dmark+2)  
c494 32 67 ee			ld (debug_mark+2),a  
c497 18 03			jr .pastdmark  
c499 ..			.dmark: db "CO2"  
c49c f1			.pastdmark: pop af  
c49d			endm  
# End of macro DMARK
c49d						CALLMONITOR 
c49d cd 6f ee			call debug_vector  
c4a0				endm  
# End of macro CALLMONITOR
c4a0					endif 
c4a0 ed b0				ldir 
c4a2			 
c4a2			 
c4a2			 
c4a2 21 bb e2				ld hl, scratch 
c4a5					if DEBUG_FORTH_WORDS 
c4a5						DMARK "CO5" 
c4a5 f5				push af  
c4a6 3a ba c4			ld a, (.dmark)  
c4a9 32 65 ee			ld (debug_mark),a  
c4ac 3a bb c4			ld a, (.dmark+1)  
c4af 32 66 ee			ld (debug_mark+1),a  
c4b2 3a bc c4			ld a, (.dmark+2)  
c4b5 32 67 ee			ld (debug_mark+2),a  
c4b8 18 03			jr .pastdmark  
c4ba ..			.dmark: db "CO5"  
c4bd f1			.pastdmark: pop af  
c4be			endm  
# End of macro DMARK
c4be						CALLMONITOR 
c4be cd 6f ee			call debug_vector  
c4c1				endm  
# End of macro CALLMONITOR
c4c1					endif 
c4c1			 
c4c1 cd f3 9a				call forth_push_str 
c4c4			 
c4c4			 
c4c4			 
c4c4			 
c4c4				       NEXTW 
c4c4 c3 76 9e			jp macro_next 
c4c7				endm 
# End of macro NEXTW
c4c7			 
c4c7			 
c4c7			.FIND: 
c4c7				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c4c7 4b				db WORD_SYS_CORE+55             
c4c8 85 c5			dw .LEN            
c4ca 05				db 4 + 1 
c4cb .. 00			db "FIND",0              
c4d0				endm 
# End of macro CWHEAD
c4d0			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c4d0			 
c4d0					if DEBUG_FORTH_WORDS_KEY 
c4d0						DMARK "FND" 
c4d0 f5				push af  
c4d1 3a e5 c4			ld a, (.dmark)  
c4d4 32 65 ee			ld (debug_mark),a  
c4d7 3a e6 c4			ld a, (.dmark+1)  
c4da 32 66 ee			ld (debug_mark+1),a  
c4dd 3a e7 c4			ld a, (.dmark+2)  
c4e0 32 67 ee			ld (debug_mark+2),a  
c4e3 18 03			jr .pastdmark  
c4e5 ..			.dmark: db "FND"  
c4e8 f1			.pastdmark: pop af  
c4e9			endm  
# End of macro DMARK
c4e9						CALLMONITOR 
c4e9 cd 6f ee			call debug_vector  
c4ec				endm  
# End of macro CALLMONITOR
c4ec					endif 
c4ec			 
c4ec			; TODO check string type 
c4ec					FORTH_DSP_VALUE 
c4ec cd 73 9c			call macro_forth_dsp_value 
c4ef				endm 
# End of macro FORTH_DSP_VALUE
c4ef			 
c4ef e5					push hl    
c4f0 7e					ld a,(hl)    ; char to find   
c4f1			; TODO change char to substr 
c4f1			 
c4f1 f5					push af 
c4f2					 
c4f2			 
c4f2			 
c4f2					if DEBUG_FORTH_WORDS 
c4f2						DMARK "FN1" 
c4f2 f5				push af  
c4f3 3a 07 c5			ld a, (.dmark)  
c4f6 32 65 ee			ld (debug_mark),a  
c4f9 3a 08 c5			ld a, (.dmark+1)  
c4fc 32 66 ee			ld (debug_mark+1),a  
c4ff 3a 09 c5			ld a, (.dmark+2)  
c502 32 67 ee			ld (debug_mark+2),a  
c505 18 03			jr .pastdmark  
c507 ..			.dmark: db "FN1"  
c50a f1			.pastdmark: pop af  
c50b			endm  
# End of macro DMARK
c50b						CALLMONITOR 
c50b cd 6f ee			call debug_vector  
c50e				endm  
# End of macro CALLMONITOR
c50e					endif 
c50e			 
c50e					FORTH_DSP_POP 
c50e cd 42 9d			call macro_forth_dsp_pop 
c511				endm 
# End of macro FORTH_DSP_POP
c511			 
c511					; string to search 
c511			 
c511					FORTH_DSP_VALUE 
c511 cd 73 9c			call macro_forth_dsp_value 
c514				endm 
# End of macro FORTH_DSP_VALUE
c514			 
c514 d1					pop de  ; d is char to find  
c515			 
c515					if DEBUG_FORTH_WORDS 
c515						DMARK "FN2" 
c515 f5				push af  
c516 3a 2a c5			ld a, (.dmark)  
c519 32 65 ee			ld (debug_mark),a  
c51c 3a 2b c5			ld a, (.dmark+1)  
c51f 32 66 ee			ld (debug_mark+1),a  
c522 3a 2c c5			ld a, (.dmark+2)  
c525 32 67 ee			ld (debug_mark+2),a  
c528 18 03			jr .pastdmark  
c52a ..			.dmark: db "FN2"  
c52d f1			.pastdmark: pop af  
c52e			endm  
# End of macro DMARK
c52e						CALLMONITOR 
c52e cd 6f ee			call debug_vector  
c531				endm  
# End of macro CALLMONITOR
c531					endif 
c531					 
c531 01 00 00				ld bc, 0 
c534 7e			.findchar:      ld a,(hl) 
c535 fe 00				cp 0   		 
c537 28 27				jr z, .finddone     
c539 ba					cp d 
c53a 28 20				jr z, .foundchar 
c53c 03					inc bc 
c53d 23					inc hl 
c53e					if DEBUG_FORTH_WORDS 
c53e						DMARK "FN3" 
c53e f5				push af  
c53f 3a 53 c5			ld a, (.dmark)  
c542 32 65 ee			ld (debug_mark),a  
c545 3a 54 c5			ld a, (.dmark+1)  
c548 32 66 ee			ld (debug_mark+1),a  
c54b 3a 55 c5			ld a, (.dmark+2)  
c54e 32 67 ee			ld (debug_mark+2),a  
c551 18 03			jr .pastdmark  
c553 ..			.dmark: db "FN3"  
c556 f1			.pastdmark: pop af  
c557			endm  
# End of macro DMARK
c557						CALLMONITOR 
c557 cd 6f ee			call debug_vector  
c55a				endm  
# End of macro CALLMONITOR
c55a					endif 
c55a 18 d8				jr .findchar 
c55c			 
c55c			 
c55c c5			.foundchar:	push bc 
c55d e1					pop hl 
c55e 18 03				jr .findexit 
c560			 
c560			 
c560							 
c560			 
c560			.finddone:     ; got to end of string with no find 
c560 21 00 00				ld hl, 0 
c563			.findexit: 
c563			 
c563					if DEBUG_FORTH_WORDS 
c563						DMARK "FNd" 
c563 f5				push af  
c564 3a 78 c5			ld a, (.dmark)  
c567 32 65 ee			ld (debug_mark),a  
c56a 3a 79 c5			ld a, (.dmark+1)  
c56d 32 66 ee			ld (debug_mark+1),a  
c570 3a 7a c5			ld a, (.dmark+2)  
c573 32 67 ee			ld (debug_mark+2),a  
c576 18 03			jr .pastdmark  
c578 ..			.dmark: db "FNd"  
c57b f1			.pastdmark: pop af  
c57c			endm  
# End of macro DMARK
c57c						CALLMONITOR 
c57c cd 6f ee			call debug_vector  
c57f				endm  
# End of macro CALLMONITOR
c57f					endif 
c57f cd 85 9a			call forth_push_numhl 
c582			 
c582				       NEXTW 
c582 c3 76 9e			jp macro_next 
c585				endm 
# End of macro NEXTW
c585			 
c585			.LEN: 
c585				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c585 4c				db WORD_SYS_CORE+56             
c586 ef c5			dw .ASC            
c588 06				db 5 + 1 
c589 .. 00			db "COUNT",0              
c58f				endm 
# End of macro CWHEAD
c58f			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c58f			 
c58f					if DEBUG_FORTH_WORDS_KEY 
c58f						DMARK "CNT" 
c58f f5				push af  
c590 3a a4 c5			ld a, (.dmark)  
c593 32 65 ee			ld (debug_mark),a  
c596 3a a5 c5			ld a, (.dmark+1)  
c599 32 66 ee			ld (debug_mark+1),a  
c59c 3a a6 c5			ld a, (.dmark+2)  
c59f 32 67 ee			ld (debug_mark+2),a  
c5a2 18 03			jr .pastdmark  
c5a4 ..			.dmark: db "CNT"  
c5a7 f1			.pastdmark: pop af  
c5a8			endm  
# End of macro DMARK
c5a8						CALLMONITOR 
c5a8 cd 6f ee			call debug_vector  
c5ab				endm  
# End of macro CALLMONITOR
c5ab					endif 
c5ab			; TODO check string type 
c5ab					FORTH_DSP_VALUE 
c5ab cd 73 9c			call macro_forth_dsp_value 
c5ae				endm 
# End of macro FORTH_DSP_VALUE
c5ae			 
c5ae			 
c5ae					if DEBUG_FORTH_WORDS 
c5ae						DMARK "CN?" 
c5ae f5				push af  
c5af 3a c3 c5			ld a, (.dmark)  
c5b2 32 65 ee			ld (debug_mark),a  
c5b5 3a c4 c5			ld a, (.dmark+1)  
c5b8 32 66 ee			ld (debug_mark+1),a  
c5bb 3a c5 c5			ld a, (.dmark+2)  
c5be 32 67 ee			ld (debug_mark+2),a  
c5c1 18 03			jr .pastdmark  
c5c3 ..			.dmark: db "CN?"  
c5c6 f1			.pastdmark: pop af  
c5c7			endm  
# End of macro DMARK
c5c7						CALLMONITOR 
c5c7 cd 6f ee			call debug_vector  
c5ca				endm  
# End of macro CALLMONITOR
c5ca					endif 
c5ca cd 50 90				call strlenz 
c5cd					if DEBUG_FORTH_WORDS 
c5cd						DMARK "CNl" 
c5cd f5				push af  
c5ce 3a e2 c5			ld a, (.dmark)  
c5d1 32 65 ee			ld (debug_mark),a  
c5d4 3a e3 c5			ld a, (.dmark+1)  
c5d7 32 66 ee			ld (debug_mark+1),a  
c5da 3a e4 c5			ld a, (.dmark+2)  
c5dd 32 67 ee			ld (debug_mark+2),a  
c5e0 18 03			jr .pastdmark  
c5e2 ..			.dmark: db "CNl"  
c5e5 f1			.pastdmark: pop af  
c5e6			endm  
# End of macro DMARK
c5e6						CALLMONITOR 
c5e6 cd 6f ee			call debug_vector  
c5e9				endm  
# End of macro CALLMONITOR
c5e9					endif 
c5e9			 
c5e9 cd 85 9a				call forth_push_numhl 
c5ec			 
c5ec			 
c5ec			 
c5ec				       NEXTW 
c5ec c3 76 9e			jp macro_next 
c5ef				endm 
# End of macro NEXTW
c5ef			.ASC: 
c5ef				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c5ef 4d				db WORD_SYS_CORE+57             
c5f0 5d c6			dw .CHR            
c5f2 04				db 3 + 1 
c5f3 .. 00			db "ASC",0              
c5f7				endm 
# End of macro CWHEAD
c5f7			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c5f7					if DEBUG_FORTH_WORDS_KEY 
c5f7						DMARK "ASC" 
c5f7 f5				push af  
c5f8 3a 0c c6			ld a, (.dmark)  
c5fb 32 65 ee			ld (debug_mark),a  
c5fe 3a 0d c6			ld a, (.dmark+1)  
c601 32 66 ee			ld (debug_mark+1),a  
c604 3a 0e c6			ld a, (.dmark+2)  
c607 32 67 ee			ld (debug_mark+2),a  
c60a 18 03			jr .pastdmark  
c60c ..			.dmark: db "ASC"  
c60f f1			.pastdmark: pop af  
c610			endm  
# End of macro DMARK
c610						CALLMONITOR 
c610 cd 6f ee			call debug_vector  
c613				endm  
# End of macro CALLMONITOR
c613					endif 
c613					FORTH_DSP_VALUE 
c613 cd 73 9c			call macro_forth_dsp_value 
c616				endm 
# End of macro FORTH_DSP_VALUE
c616					;v5 FORTH_DSP_VALUE 
c616			;		inc hl      ; now at start of numeric as string 
c616			 
c616 e5					push hl 
c617			 
c617					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c617 cd 42 9d			call macro_forth_dsp_pop 
c61a				endm 
# End of macro FORTH_DSP_POP
c61a			 
c61a e1					pop hl 
c61b			 
c61b					if DEBUG_FORTH_WORDS 
c61b						DMARK "AS1" 
c61b f5				push af  
c61c 3a 30 c6			ld a, (.dmark)  
c61f 32 65 ee			ld (debug_mark),a  
c622 3a 31 c6			ld a, (.dmark+1)  
c625 32 66 ee			ld (debug_mark+1),a  
c628 3a 32 c6			ld a, (.dmark+2)  
c62b 32 67 ee			ld (debug_mark+2),a  
c62e 18 03			jr .pastdmark  
c630 ..			.dmark: db "AS1"  
c633 f1			.pastdmark: pop af  
c634			endm  
# End of macro DMARK
c634						CALLMONITOR 
c634 cd 6f ee			call debug_vector  
c637				endm  
# End of macro CALLMONITOR
c637					endif 
c637					; push the content of a onto the stack as a value 
c637			 
c637 7e					ld a,(hl)   ; get char 
c638 26 00				ld h,0 
c63a 6f					ld l,a 
c63b					if DEBUG_FORTH_WORDS 
c63b						DMARK "AS2" 
c63b f5				push af  
c63c 3a 50 c6			ld a, (.dmark)  
c63f 32 65 ee			ld (debug_mark),a  
c642 3a 51 c6			ld a, (.dmark+1)  
c645 32 66 ee			ld (debug_mark+1),a  
c648 3a 52 c6			ld a, (.dmark+2)  
c64b 32 67 ee			ld (debug_mark+2),a  
c64e 18 03			jr .pastdmark  
c650 ..			.dmark: db "AS2"  
c653 f1			.pastdmark: pop af  
c654			endm  
# End of macro DMARK
c654						CALLMONITOR 
c654 cd 6f ee			call debug_vector  
c657				endm  
# End of macro CALLMONITOR
c657					endif 
c657 cd 85 9a				call forth_push_numhl 
c65a			 
c65a				       NEXTW 
c65a c3 76 9e			jp macro_next 
c65d				endm 
# End of macro NEXTW
c65d			 
c65d			.CHR: 
c65d				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c65d 4d				db WORD_SYS_CORE+57             
c65e 99 c6			dw .ENDSTR            
c660 04				db 3 + 1 
c661 .. 00			db "CHR",0              
c665				endm 
# End of macro CWHEAD
c665			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c665					if DEBUG_FORTH_WORDS_KEY 
c665						DMARK "CHR" 
c665 f5				push af  
c666 3a 7a c6			ld a, (.dmark)  
c669 32 65 ee			ld (debug_mark),a  
c66c 3a 7b c6			ld a, (.dmark+1)  
c66f 32 66 ee			ld (debug_mark+1),a  
c672 3a 7c c6			ld a, (.dmark+2)  
c675 32 67 ee			ld (debug_mark+2),a  
c678 18 03			jr .pastdmark  
c67a ..			.dmark: db "CHR"  
c67d f1			.pastdmark: pop af  
c67e			endm  
# End of macro DMARK
c67e						CALLMONITOR 
c67e cd 6f ee			call debug_vector  
c681				endm  
# End of macro CALLMONITOR
c681					endif 
c681					FORTH_DSP_VALUEHL 
c681 cd 8a 9c			call macro_dsp_valuehl 
c684				endm 
# End of macro FORTH_DSP_VALUEHL
c684			 
c684					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c684 cd 42 9d			call macro_forth_dsp_pop 
c687				endm 
# End of macro FORTH_DSP_POP
c687			 
c687					; save asci byte as a zero term string and push string 
c687			 
c687 7d					ld a,l 
c688 32 bb e2				ld (scratch), a 
c68b			 
c68b 3e 00				ld a, 0 
c68d 32 bc e2				ld (scratch+1), a 
c690			 
c690 21 bb e2				ld hl, scratch 
c693 cd f3 9a				call forth_push_str 
c696			 
c696			 
c696				       NEXTW 
c696 c3 76 9e			jp macro_next 
c699				endm 
# End of macro NEXTW
c699			 
c699			 
c699			 
c699			 
c699			.ENDSTR: 
c699			; eof 
c699			 
# End of file forth_words_str.asm
c699			include "forth_words_key.asm" 
c699			 
c699			; | ## Keyboard Words 
c699			 
c699			.KEY: 
c699				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
c699 3e				db WORD_SYS_CORE+42             
c69a c9 c6			dw .WAITK            
c69c 04				db 3 + 1 
c69d .. 00			db "KEY",0              
c6a1				endm 
# End of macro CWHEAD
c6a1			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
c6a1			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c6a1			; | | Can use something like this to process: 
c6a1			; | | > repeat active . key ?dup if emit then #1 until  
c6a1			 
c6a1					if DEBUG_FORTH_WORDS_KEY 
c6a1						DMARK "KEY" 
c6a1 f5				push af  
c6a2 3a b6 c6			ld a, (.dmark)  
c6a5 32 65 ee			ld (debug_mark),a  
c6a8 3a b7 c6			ld a, (.dmark+1)  
c6ab 32 66 ee			ld (debug_mark+1),a  
c6ae 3a b8 c6			ld a, (.dmark+2)  
c6b1 32 67 ee			ld (debug_mark+2),a  
c6b4 18 03			jr .pastdmark  
c6b6 ..			.dmark: db "KEY"  
c6b9 f1			.pastdmark: pop af  
c6ba			endm  
# End of macro DMARK
c6ba						CALLMONITOR 
c6ba cd 6f ee			call debug_vector  
c6bd				endm  
# End of macro CALLMONITOR
c6bd					endif 
c6bd			; TODO currently waits 
c6bd cd 70 dd				call cin 
c6c0					;call cin_wait 
c6c0 6f					ld l, a 
c6c1 26 00				ld h, 0 
c6c3 cd 85 9a				call forth_push_numhl 
c6c6					NEXTW 
c6c6 c3 76 9e			jp macro_next 
c6c9				endm 
# End of macro NEXTW
c6c9			.WAITK: 
c6c9				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c6c9 3f				db WORD_SYS_CORE+43             
c6ca fb c6			dw .ACCEPT            
c6cc 06				db 5 + 1 
c6cd .. 00			db "WAITK",0              
c6d3				endm 
# End of macro CWHEAD
c6d3			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c6d3					if DEBUG_FORTH_WORDS_KEY 
c6d3						DMARK "WAI" 
c6d3 f5				push af  
c6d4 3a e8 c6			ld a, (.dmark)  
c6d7 32 65 ee			ld (debug_mark),a  
c6da 3a e9 c6			ld a, (.dmark+1)  
c6dd 32 66 ee			ld (debug_mark+1),a  
c6e0 3a ea c6			ld a, (.dmark+2)  
c6e3 32 67 ee			ld (debug_mark+2),a  
c6e6 18 03			jr .pastdmark  
c6e8 ..			.dmark: db "WAI"  
c6eb f1			.pastdmark: pop af  
c6ec			endm  
# End of macro DMARK
c6ec						CALLMONITOR 
c6ec cd 6f ee			call debug_vector  
c6ef				endm  
# End of macro CALLMONITOR
c6ef					endif 
c6ef cd 6a dd				call cin_wait 
c6f2 6f					ld l, a 
c6f3 26 00				ld h, 0 
c6f5 cd 85 9a				call forth_push_numhl 
c6f8					NEXTW 
c6f8 c3 76 9e			jp macro_next 
c6fb				endm 
# End of macro NEXTW
c6fb			.ACCEPT: 
c6fb				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c6fb 40				db WORD_SYS_CORE+44             
c6fc 59 c7			dw .EDIT            
c6fe 07				db 6 + 1 
c6ff .. 00			db "ACCEPT",0              
c706				endm 
# End of macro CWHEAD
c706			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c706					; TODO crashes on push 
c706					if DEBUG_FORTH_WORDS_KEY 
c706						DMARK "ACC" 
c706 f5				push af  
c707 3a 1b c7			ld a, (.dmark)  
c70a 32 65 ee			ld (debug_mark),a  
c70d 3a 1c c7			ld a, (.dmark+1)  
c710 32 66 ee			ld (debug_mark+1),a  
c713 3a 1d c7			ld a, (.dmark+2)  
c716 32 67 ee			ld (debug_mark+2),a  
c719 18 03			jr .pastdmark  
c71b ..			.dmark: db "ACC"  
c71e f1			.pastdmark: pop af  
c71f			endm  
# End of macro DMARK
c71f						CALLMONITOR 
c71f cd 6f ee			call debug_vector  
c722				endm  
# End of macro CALLMONITOR
c722					endif 
c722 21 b9 e4				ld hl, os_input 
c725 3e 00				ld a, 0 
c727 77					ld (hl),a 
c728 3a 58 ea				ld a,(f_cursor_ptr) 
c72b 16 64				ld d, 100 
c72d 0e 00				ld c, 0 
c72f 1e 28				ld e, 40 
c731 cd 17 8d				call input_str 
c734					; TODO perhaps do a type check and wrap in quotes if not a number 
c734 21 b9 e4				ld hl, os_input 
c737					if DEBUG_FORTH_WORDS 
c737						DMARK "AC1" 
c737 f5				push af  
c738 3a 4c c7			ld a, (.dmark)  
c73b 32 65 ee			ld (debug_mark),a  
c73e 3a 4d c7			ld a, (.dmark+1)  
c741 32 66 ee			ld (debug_mark+1),a  
c744 3a 4e c7			ld a, (.dmark+2)  
c747 32 67 ee			ld (debug_mark+2),a  
c74a 18 03			jr .pastdmark  
c74c ..			.dmark: db "AC1"  
c74f f1			.pastdmark: pop af  
c750			endm  
# End of macro DMARK
c750						CALLMONITOR 
c750 cd 6f ee			call debug_vector  
c753				endm  
# End of macro CALLMONITOR
c753					endif 
c753 cd f3 9a				call forth_push_str 
c756					NEXTW 
c756 c3 76 9e			jp macro_next 
c759				endm 
# End of macro NEXTW
c759			 
c759			.EDIT: 
c759				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
c759 40				db WORD_SYS_CORE+44             
c75a fb c7			dw .DEDIT            
c75c 05				db 4 + 1 
c75d .. 00			db "EDIT",0              
c762				endm 
# End of macro CWHEAD
c762			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
c762			 
c762					; TODO does not copy from stack 
c762					if DEBUG_FORTH_WORDS_KEY 
c762						DMARK "EDT" 
c762 f5				push af  
c763 3a 77 c7			ld a, (.dmark)  
c766 32 65 ee			ld (debug_mark),a  
c769 3a 78 c7			ld a, (.dmark+1)  
c76c 32 66 ee			ld (debug_mark+1),a  
c76f 3a 79 c7			ld a, (.dmark+2)  
c772 32 67 ee			ld (debug_mark+2),a  
c775 18 03			jr .pastdmark  
c777 ..			.dmark: db "EDT"  
c77a f1			.pastdmark: pop af  
c77b			endm  
# End of macro DMARK
c77b						CALLMONITOR 
c77b cd 6f ee			call debug_vector  
c77e				endm  
# End of macro CALLMONITOR
c77e					endif 
c77e			 
c77e					;FORTH_DSP 
c77e					FORTH_DSP_VALUEHL 
c77e cd 8a 9c			call macro_dsp_valuehl 
c781				endm 
# End of macro FORTH_DSP_VALUEHL
c781			;		inc hl    ; TODO do type check 
c781			 
c781			;		call get_word_hl 
c781 e5					push hl 
c782					if DEBUG_FORTH_WORDS 
c782						DMARK "EDp" 
c782 f5				push af  
c783 3a 97 c7			ld a, (.dmark)  
c786 32 65 ee			ld (debug_mark),a  
c789 3a 98 c7			ld a, (.dmark+1)  
c78c 32 66 ee			ld (debug_mark+1),a  
c78f 3a 99 c7			ld a, (.dmark+2)  
c792 32 67 ee			ld (debug_mark+2),a  
c795 18 03			jr .pastdmark  
c797 ..			.dmark: db "EDp"  
c79a f1			.pastdmark: pop af  
c79b			endm  
# End of macro DMARK
c79b						CALLMONITOR 
c79b cd 6f ee			call debug_vector  
c79e				endm  
# End of macro CALLMONITOR
c79e					endif 
c79e				;	ld a, 0 
c79e cd 50 90				call strlenz 
c7a1 23					inc hl 
c7a2			 
c7a2 06 00				ld b, 0 
c7a4 4d					ld c, l 
c7a5			 
c7a5 e1					pop hl 
c7a6 11 b9 e4				ld de, os_input 
c7a9					if DEBUG_FORTH_WORDS_KEY 
c7a9						DMARK "EDc" 
c7a9 f5				push af  
c7aa 3a be c7			ld a, (.dmark)  
c7ad 32 65 ee			ld (debug_mark),a  
c7b0 3a bf c7			ld a, (.dmark+1)  
c7b3 32 66 ee			ld (debug_mark+1),a  
c7b6 3a c0 c7			ld a, (.dmark+2)  
c7b9 32 67 ee			ld (debug_mark+2),a  
c7bc 18 03			jr .pastdmark  
c7be ..			.dmark: db "EDc"  
c7c1 f1			.pastdmark: pop af  
c7c2			endm  
# End of macro DMARK
c7c2						CALLMONITOR 
c7c2 cd 6f ee			call debug_vector  
c7c5				endm  
# End of macro CALLMONITOR
c7c5					endif 
c7c5 ed b0				ldir 
c7c7			 
c7c7			 
c7c7 21 b9 e4				ld hl, os_input 
c7ca					;ld a, 0 
c7ca					;ld (hl),a 
c7ca 3a 58 ea				ld a,(f_cursor_ptr) 
c7cd 16 64				ld d, 100 
c7cf 0e 00				ld c, 0 
c7d1 1e 28				ld e, 40 
c7d3 cd 17 8d				call input_str 
c7d6					; TODO perhaps do a type check and wrap in quotes if not a number 
c7d6 21 b9 e4				ld hl, os_input 
c7d9					if DEBUG_FORTH_WORDS 
c7d9						DMARK "ED1" 
c7d9 f5				push af  
c7da 3a ee c7			ld a, (.dmark)  
c7dd 32 65 ee			ld (debug_mark),a  
c7e0 3a ef c7			ld a, (.dmark+1)  
c7e3 32 66 ee			ld (debug_mark+1),a  
c7e6 3a f0 c7			ld a, (.dmark+2)  
c7e9 32 67 ee			ld (debug_mark+2),a  
c7ec 18 03			jr .pastdmark  
c7ee ..			.dmark: db "ED1"  
c7f1 f1			.pastdmark: pop af  
c7f2			endm  
# End of macro DMARK
c7f2						CALLMONITOR 
c7f2 cd 6f ee			call debug_vector  
c7f5				endm  
# End of macro CALLMONITOR
c7f5					endif 
c7f5 cd f3 9a				call forth_push_str 
c7f8					NEXTW 
c7f8 c3 76 9e			jp macro_next 
c7fb				endm 
# End of macro NEXTW
c7fb			 
c7fb			.DEDIT: 
c7fb				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
c7fb 40				db WORD_SYS_CORE+44             
c7fc 5d c8			dw .ENDKEY            
c7fe 06				db 5 + 1 
c7ff .. 00			db "DEDIT",0              
c805				endm 
# End of macro CWHEAD
c805			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
c805			 
c805					; TODO does not copy from stack 
c805					if DEBUG_FORTH_WORDS_KEY 
c805						DMARK "DED" 
c805 f5				push af  
c806 3a 1a c8			ld a, (.dmark)  
c809 32 65 ee			ld (debug_mark),a  
c80c 3a 1b c8			ld a, (.dmark+1)  
c80f 32 66 ee			ld (debug_mark+1),a  
c812 3a 1c c8			ld a, (.dmark+2)  
c815 32 67 ee			ld (debug_mark+2),a  
c818 18 03			jr .pastdmark  
c81a ..			.dmark: db "DED"  
c81d f1			.pastdmark: pop af  
c81e			endm  
# End of macro DMARK
c81e						CALLMONITOR 
c81e cd 6f ee			call debug_vector  
c821				endm  
# End of macro CALLMONITOR
c821					endif 
c821			 
c821					;FORTH_DSP 
c821					FORTH_DSP_VALUEHL 
c821 cd 8a 9c			call macro_dsp_valuehl 
c824				endm 
# End of macro FORTH_DSP_VALUEHL
c824			;		inc hl    ; TODO do type check 
c824			 
c824			;		call get_word_hl 
c824 e5					push hl 
c825 e5					push hl 
c826					FORTH_DSP_POP 
c826 cd 42 9d			call macro_forth_dsp_pop 
c829				endm 
# End of macro FORTH_DSP_POP
c829 e1					pop hl 
c82a					if DEBUG_FORTH_WORDS 
c82a						DMARK "EDp" 
c82a f5				push af  
c82b 3a 3f c8			ld a, (.dmark)  
c82e 32 65 ee			ld (debug_mark),a  
c831 3a 40 c8			ld a, (.dmark+1)  
c834 32 66 ee			ld (debug_mark+1),a  
c837 3a 41 c8			ld a, (.dmark+2)  
c83a 32 67 ee			ld (debug_mark+2),a  
c83d 18 03			jr .pastdmark  
c83f ..			.dmark: db "EDp"  
c842 f1			.pastdmark: pop af  
c843			endm  
# End of macro DMARK
c843						CALLMONITOR 
c843 cd 6f ee			call debug_vector  
c846				endm  
# End of macro CALLMONITOR
c846					endif 
c846				;	ld a, 0 
c846 cd 50 90				call strlenz 
c849 23					inc hl 
c84a			 
c84a 06 00				ld b, 0 
c84c 4d					ld c, l 
c84d			 
c84d e1					pop hl 
c84e			 
c84e					;ld a, 0 
c84e					;ld (hl),a 
c84e 3a 58 ea				ld a,(f_cursor_ptr) 
c851 16 64				ld d, 100 
c853 0e 00				ld c, 0 
c855 1e 28				ld e, 40 
c857 cd 17 8d				call input_str 
c85a					; TODO perhaps do a type check and wrap in quotes if not a number 
c85a					NEXTW 
c85a c3 76 9e			jp macro_next 
c85d				endm 
# End of macro NEXTW
c85d			 
c85d			 
c85d			.ENDKEY: 
c85d			; eof 
c85d			 
# End of file forth_words_key.asm
c85d			include "forth_words_const.asm" 
c85d			 
c85d			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
c85d			 
c85d			 
c85d			.SPITIME: 
c85d				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
c85d 77				db WORD_SYS_CORE+99             
c85e 72 c8			dw .VA            
c860 08				db 7 + 1 
c861 .. 00			db "SPITIME",0              
c869				endm 
# End of macro CWHEAD
c869			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
c869			; 
c869			; | | If using BANK devices then leave as is. 
c869			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
c869			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
c869			 
c869 21 5e ea				ld hl, spi_clktime  
c86c cd 85 9a				call forth_push_numhl 
c86f			 
c86f					NEXTW 
c86f c3 76 9e			jp macro_next 
c872				endm 
# End of macro NEXTW
c872			 
c872			 
c872			.VA: 
c872				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
c872 77				db WORD_SYS_CORE+99             
c873 82 c8			dw .SYMBOL            
c875 03				db 2 + 1 
c876 .. 00			db "VA",0              
c879				endm 
# End of macro CWHEAD
c879			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
c879 21 22 ea				ld hl, cli_var_array 
c87c cd 85 9a				call forth_push_numhl 
c87f			 
c87f					NEXTW 
c87f c3 76 9e			jp macro_next 
c882				endm 
# End of macro NEXTW
c882			 
c882			.SYMBOL: 
c882				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
c882 77				db WORD_SYS_CORE+99             
c883 8c c9			dw .ENDCONST            
c885 07				db 6 + 1 
c886 .. 00			db "SYMBOL",0              
c88d				endm 
# End of macro CWHEAD
c88d			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
c88d			; | 
c88d			; | | The value is the number reference and the final address is pushed to stack 
c88d			 
c88d			; | | ``` 
c88d			; | | dw sym_table 
c88d			; | | dw nmi_vector 
c88d			; | | dw cli_autodisplay 
c88d			; | | dw cli_data_sp 
c88d			; | | dw cli_data_stack 
c88d			; | | dw cli_loop_sp 
c88d			; | | dw cli_loop_stack 
c88d			; | | dw cli_var_array 
c88d			; | | dw cursor_col 
c88d			; | | dw cursor_ptr 
c88d			; | | ; 10 
c88d			; | | dw cursor_row 
c88d			; | | dw debug_mark 
c88d			; | | dw display_fb0 
c88d			; | | dw display_fb1 
c88d			; | | dw display_fb2 
c88d			; | | dw display_fb3 
c88d			; | | dw display_fb_active 
c88d			; | | dw execscratch 
c88d			; | | dw f_cursor_ptr 
c88d			; | | dw hardware_word 
c88d			; | | ;20 
c88d			; | | dw input_at_cursor 
c88d			; | | dw input_at_pos 
c88d			; | | dw input_cur_flash 
c88d			; | | dw input_cur_onoff 
c88d			; | | dw input_cursor 
c88d			; | | dw input_display_size 
c88d			; | | dw input_len 
c88d			; | | dw input_ptr 
c88d			; | | dw input_size 
c88d			; | | dw input_start 
c88d			; | | ; 30 
c88d			; | | dw input_str 
c88d			; | | dw input_under_cursor 
c88d			; | | dw os_cli_cmd 
c88d			; | | dw os_cur_ptr 
c88d			; | | dw os_current_i 
c88d			; | | dw os_input 
c88d			; | | dw os_last_cmd 
c88d			; | | dw os_last_new_uword 
c88d			; | | dw debug_vector 
c88d			; | | dw os_view_hl 
c88d			; | | ;40 
c88d			; | | dw os_word_scratch 
c88d			; | | dw portbctl 
c88d			; | | dw portbdata 
c88d			; | | dw spi_cartdev 
c88d			; | | dw spi_cartdev2 
c88d			; | | dw spi_clktime 
c88d			; | | dw spi_device 
c88d			; | | dw spi_device_id 
c88d			; | | dw spi_portbyte 
c88d			; | | dw stackstore 
c88d			; | | ; 50 
c88d			; | | if STORAGE_SE 
c88d			; | | dw storage_actl 
c88d			; | | dw storage_adata 
c88d			; | | else 
c88d			; | | dw 0 
c88d			; | | dw 0 
c88d			; | | endif 
c88d			; | | dw storage_append 
c88d			; | | if STORAGE_SE 
c88d			; | | dw storage_bctl 
c88d			; | | else 
c88d			; | | dw 0 
c88d			; | | endif 
c88d			; | | dw store_bank_active 
c88d			; | | dw store_filecache 
c88d			; | | dw store_longread 
c88d			; | | dw store_openaddr 
c88d			; | | dw store_openext 
c88d			; | | dw store_openmaxext 
c88d			; | | ; 60 
c88d			; | | dw store_page 
c88d			; | | dw store_readbuf 
c88d			; | | dw store_readcont 
c88d			; | | dw store_readptr 
c88d			; | | dw store_tmpext 
c88d			; | | dw store_tmpid 
c88d			; | | dw store_tmppageid 
c88d			; | | dw malloc 
c88d			; | | dw free 
c88d			; | | dw cin 
c88d			; | | ; 70 
c88d			; | | dw cin_wait 
c88d			; | | dw forth_push_numhl 
c88d			; | | dw forth_push_str 
c88d			; | | ``` 
c88d			 
c88d					if DEBUG_FORTH_WORDS_KEY 
c88d						DMARK "SYM" 
c88d f5				push af  
c88e 3a a2 c8			ld a, (.dmark)  
c891 32 65 ee			ld (debug_mark),a  
c894 3a a3 c8			ld a, (.dmark+1)  
c897 32 66 ee			ld (debug_mark+1),a  
c89a 3a a4 c8			ld a, (.dmark+2)  
c89d 32 67 ee			ld (debug_mark+2),a  
c8a0 18 03			jr .pastdmark  
c8a2 ..			.dmark: db "SYM"  
c8a5 f1			.pastdmark: pop af  
c8a6			endm  
# End of macro DMARK
c8a6						CALLMONITOR 
c8a6 cd 6f ee			call debug_vector  
c8a9				endm  
# End of macro CALLMONITOR
c8a9					endif 
c8a9			 
c8a9					FORTH_DSP_VALUEHL 
c8a9 cd 8a 9c			call macro_dsp_valuehl 
c8ac				endm 
# End of macro FORTH_DSP_VALUEHL
c8ac			 
c8ac 7d					ld a, l     
c8ad			 
c8ad			 
c8ad					if DEBUG_FORTH_WORDS 
c8ad						DMARK "SY1" 
c8ad f5				push af  
c8ae 3a c2 c8			ld a, (.dmark)  
c8b1 32 65 ee			ld (debug_mark),a  
c8b4 3a c3 c8			ld a, (.dmark+1)  
c8b7 32 66 ee			ld (debug_mark+1),a  
c8ba 3a c4 c8			ld a, (.dmark+2)  
c8bd 32 67 ee			ld (debug_mark+2),a  
c8c0 18 03			jr .pastdmark  
c8c2 ..			.dmark: db "SY1"  
c8c5 f1			.pastdmark: pop af  
c8c6			endm  
# End of macro DMARK
c8c6						CALLMONITOR 
c8c6 cd 6f ee			call debug_vector  
c8c9				endm  
# End of macro CALLMONITOR
c8c9					endif 
c8c9					 
c8c9 f5					push af	 
c8ca					FORTH_DSP_POP 
c8ca cd 42 9d			call macro_forth_dsp_pop 
c8cd				endm 
# End of macro FORTH_DSP_POP
c8cd f1					pop af 
c8ce			 
c8ce cb 27				sla a  
c8d0				 
c8d0					 
c8d0					if DEBUG_FORTH_WORDS 
c8d0						DMARK "SY" 
c8d0 f5				push af  
c8d1 3a e5 c8			ld a, (.dmark)  
c8d4 32 65 ee			ld (debug_mark),a  
c8d7 3a e6 c8			ld a, (.dmark+1)  
c8da 32 66 ee			ld (debug_mark+1),a  
c8dd 3a e7 c8			ld a, (.dmark+2)  
c8e0 32 67 ee			ld (debug_mark+2),a  
c8e3 18 02			jr .pastdmark  
c8e5 ..			.dmark: db "SY"  
c8e7 f1			.pastdmark: pop af  
c8e8			endm  
# End of macro DMARK
c8e8						CALLMONITOR 
c8e8 cd 6f ee			call debug_vector  
c8eb				endm  
# End of macro CALLMONITOR
c8eb					endif 
c8eb			 
c8eb 21 fa c8				ld hl, sym_table 
c8ee cd ea 8c				call addatohl 
c8f1 cd f8 9d				call loadwordinhl 
c8f4 cd 85 9a				call forth_push_numhl 
c8f7			 
c8f7			 
c8f7				       NEXTW 
c8f7 c3 76 9e			jp macro_next 
c8fa				endm 
# End of macro NEXTW
c8fa			 
c8fa			sym_table: 
c8fa			 
c8fa			; 0 
c8fa fa c8		dw sym_table 
c8fc 72 ee		dw nmi_vector 
c8fe 36 ea		dw cli_autodisplay 
c900 e8 e9		dw cli_data_sp 
c902 22 e8		dw cli_data_stack 
c904 ea e9		dw cli_loop_sp 
c906 24 e9		dw cli_loop_stack 
c908 22 ea		dw cli_var_array 
c90a bf eb		dw cursor_col 
c90c bd eb		dw cursor_ptr 
c90e			; 10 
c90e be eb		dw cursor_row 
c910 65 ee		dw debug_mark 
c912 ab ed		dw display_fb0 
c914 0a ed		dw display_fb1 
c916 c8 eb		dw display_fb2 
c918 69 ec		dw display_fb3 
c91a c6 eb		dw display_fb_active 
c91c ba e3		dw execscratch 
c91e 58 ea		dw f_cursor_ptr 
c920 75 ee		dw hardware_word 
c922			;20 
c922 5c ee		dw input_at_cursor 
c924 5e ee		dw input_at_pos 
c926 5a ee		dw input_cur_flash 
c928 59 ee		dw input_cur_onoff 
c92a 4f ee		dw input_cursor 
c92c 5f ee		dw input_display_size 
c92e 54 ee		dw input_len 
c930 63 ee		dw input_ptr 
c932 60 ee		dw input_size 
c934 61 ee		dw input_start 
c936			; 30 
c936 17 8d		dw input_str 
c938 5d ee		dw input_under_cursor 
c93a e2 e5		dw os_cli_cmd 
c93c de e5		dw os_cur_ptr 
c93e e0 e5		dw os_current_i 
c940 b9 e4		dw os_input 
c942 e1 e6		dw os_last_cmd 
c944 b8 e5		dw os_last_new_uword 
c946 6f ee		dw debug_vector 
c948 9d e2		dw os_view_hl 
c94a			;40 
c94a c0 e5		dw os_word_scratch 
c94c c3 00		dw portbctl 
c94e c1 00		dw portbdata 
c950 5d ea		dw spi_cartdev 
c952 5c ea		dw spi_cartdev2 
c954 5e ea		dw spi_clktime 
c956 5a ea		dw spi_device 
c958 59 ea		dw spi_device_id 
c95a 5b ea		dw spi_portbyte 
c95c a1 eb		dw stackstore 
c95e			; 50 
c95e			if STORAGE_SE 
c95e			dw storage_actl 
c95e			dw storage_adata 
c95e			else 
c95e 00 00		dw 0 
c960 00 00		dw 0 
c962			endif 
c962 77 88		dw storage_append 
c964			if STORAGE_SE 
c964			dw storage_bctl 
c964			else 
c964 00 00		dw 0 
c966			endif 
c966 8d eb		dw store_bank_active 
c968 61 ea		dw store_filecache 
c96a 6f ea		dw store_longread 
c96c 65 ea		dw store_openaddr 
c96e 64 ea		dw store_openext 
c970 63 ea		dw store_openmaxext 
c972			; 60 
c972 74 ea		dw store_page 
c974 70 ea		dw store_readbuf 
c976 67 ea		dw store_readcont 
c978 72 ea		dw store_readptr 
c97a 67 ea		dw store_tmpext 
c97c 68 ea		dw store_tmpid 
c97e 5f ea		dw store_tmppageid 
c980 c5 90		dw malloc 
c982 8f 91		dw free 
c984 70 dd		dw cin 
c986			; 70 
c986 6a dd		dw cin_wait 
c988 85 9a		dw forth_push_numhl 
c98a f3 9a		dw forth_push_str 
c98c			 
c98c			 
c98c			.ENDCONST: 
c98c			 
c98c			; eof 
c98c			 
c98c			 
# End of file forth_words_const.asm
c98c			 
c98c			if STORAGE_SE 
c98c			   	include "forth_words_storage.asm" 
c98c			endif 
c98c				include "forth_words_device.asm" 
c98c			; Device related words 
c98c			 
c98c			; | ## Device Words 
c98c			 
c98c			;if SOUND_ENABLE 
c98c			;.NOTE: 
c98c			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
c98c			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
c98c			;		if DEBUG_FORTH_WORDS_KEY 
c98c			;			DMARK "NTE" 
c98c			;			CALLMONITOR 
c98c			;		endif 
c98c			; 
c98c			;	 
c98c			; 
c98c			;		NEXTW 
c98c			;.AFTERSOUND: 
c98c			;endif 
c98c			 
c98c			 
c98c			USE_GPIO: equ 0 
c98c			 
c98c			if USE_GPIO 
c98c			.GP1: 
c98c				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
c98c			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
c98c					NEXTW 
c98c			.GP2: 
c98c				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
c98c			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
c98c			 
c98c					NEXTW 
c98c			 
c98c			.GP3: 
c98c				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
c98c			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
c98c			 
c98c					NEXTW 
c98c			 
c98c			.GP4: 
c98c				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
c98c			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
c98c			 
c98c					NEXTW 
c98c			.SIN: 
c98c			 
c98c			 
c98c			endif 
c98c			 
c98c			 
c98c				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
c98c 33				db WORD_SYS_CORE+31             
c98d c1 c9			dw .SOUT            
c98f 03				db 2 + 1 
c990 .. 00			db "IN",0              
c993				endm 
# End of macro CWHEAD
c993			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
c993					if DEBUG_FORTH_WORDS_KEY 
c993						DMARK "IN." 
c993 f5				push af  
c994 3a a8 c9			ld a, (.dmark)  
c997 32 65 ee			ld (debug_mark),a  
c99a 3a a9 c9			ld a, (.dmark+1)  
c99d 32 66 ee			ld (debug_mark+1),a  
c9a0 3a aa c9			ld a, (.dmark+2)  
c9a3 32 67 ee			ld (debug_mark+2),a  
c9a6 18 03			jr .pastdmark  
c9a8 ..			.dmark: db "IN."  
c9ab f1			.pastdmark: pop af  
c9ac			endm  
# End of macro DMARK
c9ac						CALLMONITOR 
c9ac cd 6f ee			call debug_vector  
c9af				endm  
# End of macro CALLMONITOR
c9af					endif 
c9af					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9af cd 8a 9c			call macro_dsp_valuehl 
c9b2				endm 
# End of macro FORTH_DSP_VALUEHL
c9b2			 
c9b2 e5					push hl 
c9b3			 
c9b3					; destroy value TOS 
c9b3			 
c9b3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9b3 cd 42 9d			call macro_forth_dsp_pop 
c9b6				endm 
# End of macro FORTH_DSP_POP
c9b6			 
c9b6					; one value on hl get other one back 
c9b6			 
c9b6 c1					pop bc 
c9b7			 
c9b7					; do the sub 
c9b7			;		ex de, hl 
c9b7			 
c9b7 ed 68				in l,(c) 
c9b9			 
c9b9					; save it 
c9b9			 
c9b9 26 00				ld h,0 
c9bb			 
c9bb					; TODO push value back onto stack for another op etc 
c9bb			 
c9bb cd 85 9a				call forth_push_numhl 
c9be					NEXTW 
c9be c3 76 9e			jp macro_next 
c9c1				endm 
# End of macro NEXTW
c9c1			.SOUT: 
c9c1				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
c9c1 34				db WORD_SYS_CORE+32             
c9c2 14 ca			dw .SPIO            
c9c4 04				db 3 + 1 
c9c5 .. 00			db "OUT",0              
c9c9				endm 
# End of macro CWHEAD
c9c9			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
c9c9					if DEBUG_FORTH_WORDS_KEY 
c9c9						DMARK "OUT" 
c9c9 f5				push af  
c9ca 3a de c9			ld a, (.dmark)  
c9cd 32 65 ee			ld (debug_mark),a  
c9d0 3a df c9			ld a, (.dmark+1)  
c9d3 32 66 ee			ld (debug_mark+1),a  
c9d6 3a e0 c9			ld a, (.dmark+2)  
c9d9 32 67 ee			ld (debug_mark+2),a  
c9dc 18 03			jr .pastdmark  
c9de ..			.dmark: db "OUT"  
c9e1 f1			.pastdmark: pop af  
c9e2			endm  
# End of macro DMARK
c9e2						CALLMONITOR 
c9e2 cd 6f ee			call debug_vector  
c9e5				endm  
# End of macro CALLMONITOR
c9e5					endif 
c9e5			 
c9e5					; get port 
c9e5			 
c9e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9e5 cd 8a 9c			call macro_dsp_valuehl 
c9e8				endm 
# End of macro FORTH_DSP_VALUEHL
c9e8			 
c9e8 e5					push hl 
c9e9			 
c9e9					; destroy value TOS 
c9e9			 
c9e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9e9 cd 42 9d			call macro_forth_dsp_pop 
c9ec				endm 
# End of macro FORTH_DSP_POP
c9ec			 
c9ec					; get byte to send 
c9ec			 
c9ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9ec cd 8a 9c			call macro_dsp_valuehl 
c9ef				endm 
# End of macro FORTH_DSP_VALUEHL
c9ef			 
c9ef			;		push hl 
c9ef			 
c9ef					; destroy value TOS 
c9ef			 
c9ef					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9ef cd 42 9d			call macro_forth_dsp_pop 
c9f2				endm 
# End of macro FORTH_DSP_POP
c9f2			 
c9f2					; one value on hl get other one back 
c9f2			 
c9f2			;		pop hl 
c9f2			 
c9f2 c1					pop bc 
c9f3			 
c9f3					if DEBUG_FORTH_WORDS 
c9f3						DMARK "OUT" 
c9f3 f5				push af  
c9f4 3a 08 ca			ld a, (.dmark)  
c9f7 32 65 ee			ld (debug_mark),a  
c9fa 3a 09 ca			ld a, (.dmark+1)  
c9fd 32 66 ee			ld (debug_mark+1),a  
ca00 3a 0a ca			ld a, (.dmark+2)  
ca03 32 67 ee			ld (debug_mark+2),a  
ca06 18 03			jr .pastdmark  
ca08 ..			.dmark: db "OUT"  
ca0b f1			.pastdmark: pop af  
ca0c			endm  
# End of macro DMARK
ca0c						CALLMONITOR 
ca0c cd 6f ee			call debug_vector  
ca0f				endm  
# End of macro CALLMONITOR
ca0f					endif 
ca0f			 
ca0f ed 69				out (c), l 
ca11			 
ca11					NEXTW 
ca11 c3 76 9e			jp macro_next 
ca14				endm 
# End of macro NEXTW
ca14			 
ca14			 
ca14			.SPIO: 
ca14			 
ca14			if STORAGE_SE 
ca14				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
ca14			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
ca14			 
ca14					call spi_ce_low 
ca14			    NEXTW 
ca14			 
ca14			.SPICEH: 
ca14				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
ca14			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
ca14			 
ca14					call spi_ce_high 
ca14			    NEXTW 
ca14			 
ca14			 
ca14			.SPIOb: 
ca14			 
ca14				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
ca14			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
ca14			 
ca14					if DEBUG_FORTH_WORDS_KEY 
ca14						DMARK "SPo" 
ca14						CALLMONITOR 
ca14					endif 
ca14					; get port 
ca14			 
ca14			 
ca14					; get byte to send 
ca14			 
ca14					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca14			 
ca14			;		push hl    ; u1  
ca14			 
ca14					; destroy value TOS 
ca14			 
ca14					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca14			 
ca14					; one value on hl get other one back 
ca14			 
ca14			;		pop hl   ; u2 - addr 
ca14			 
ca14					; TODO Send SPI byte 
ca14			 
ca14			;		push hl 
ca14			;		call spi_ce_low 
ca14			;		pop hl 
ca14					ld a, l 
ca14					call spi_send_byte 
ca14			;		call spi_ce_high 
ca14			 
ca14					NEXTW 
ca14			 
ca14			.SPII: 
ca14				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
ca14			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
ca14					if DEBUG_FORTH_WORDS_KEY 
ca14						DMARK "SPi" 
ca14						CALLMONITOR 
ca14					endif 
ca14			 
ca14					; TODO Get SPI byte 
ca14			 
ca14					call spi_read_byte 
ca14			 
ca14					if DEBUG_FORTH_WORDS 
ca14						DMARK "Si2" 
ca14						CALLMONITOR 
ca14					endif 
ca14					ld h, 0 
ca14					ld l, a 
ca14					if DEBUG_FORTH_WORDS 
ca14						DMARK "Si3" 
ca14						CALLMONITOR 
ca14					endif 
ca14					call forth_push_numhl 
ca14			 
ca14					NEXTW 
ca14			 
ca14			 
ca14			 
ca14			.SESEL: 
ca14				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
ca14			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
ca14					if DEBUG_FORTH_WORDS_KEY 
ca14						DMARK "BNK" 
ca14						CALLMONITOR 
ca14					endif 
ca14			 
ca14					ld a, 255 
ca14					ld (spi_cartdev), a 
ca14			 
ca14					; get bank 
ca14			 
ca14					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca14			 
ca14			;		push hl 
ca14			 
ca14					; destroy value TOS 
ca14			 
ca14					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca14			 
ca14					; one value on hl get other one back 
ca14			 
ca14			;		pop hl 
ca14			 
ca14			 
ca14					ld c, SPI_CE_HIGH 
ca14					ld b, '0'    ; human readable bank number 
ca14			 
ca14					ld a, l 
ca14			 
ca14					if DEBUG_FORTH_WORDS 
ca14						DMARK "BNK" 
ca14						CALLMONITOR 
ca14					endif 
ca14			 
ca14					; active low 
ca14			 
ca14					cp 0 
ca14					jr z, .bset 
ca14					cp 1 
ca14					jr nz, .b2 
ca14					res 0, c 
ca14					ld b, '1'    ; human readable bank number 
ca14			.b2:		cp 2 
ca14					jr nz, .b3 
ca14					res 1, c 
ca14					ld b, '2'    ; human readable bank number 
ca14			.b3:		cp 3 
ca14					jr nz, .b4 
ca14					res 2, c 
ca14					ld b, '3'    ; human readable bank number 
ca14			.b4:		cp 4 
ca14					jr nz, .b5 
ca14					res 3, c 
ca14					ld b, '4'    ; human readable bank number 
ca14			.b5:		cp 5 
ca14					jr nz, .bset 
ca14					res 4, c 
ca14					ld b, '5'    ; human readable bank number 
ca14			 
ca14			.bset: 
ca14					ld a, c 
ca14					ld (spi_device),a 
ca14					ld a, b 
ca14					ld (spi_device_id),a 
ca14					if DEBUG_FORTH_WORDS 
ca14						DMARK "BN2" 
ca14						CALLMONITOR 
ca14					endif 
ca14			 
ca14					; set default SPI clk pulse time as disabled for BANK use 
ca14			 
ca14					ld a, 0 
ca14					ld (spi_clktime), a 
ca14			 
ca14					NEXTW 
ca14			 
ca14			.CARTDEV: 
ca14				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
ca14			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
ca14					if DEBUG_FORTH_WORDS_KEY 
ca14						DMARK "CDV" 
ca14						CALLMONITOR 
ca14					endif 
ca14			 
ca14					; disable se storage bank selection 
ca14			 
ca14					ld a, SPI_CE_HIGH		; ce high 
ca14					ld (spi_device), a 
ca14			 
ca14					; get bank 
ca14			 
ca14					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca14			 
ca14			;		push hl 
ca14			 
ca14					; destroy value TOS 
ca14			 
ca14					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca14			 
ca14					; one value on hl get other one back 
ca14			 
ca14			;		pop hl 
ca14			 
ca14					; active low 
ca14			 
ca14					ld c, 255 
ca14			 
ca14					ld a, l 
ca14					if DEBUG_FORTH_WORDS 
ca14						DMARK "CDV" 
ca14						CALLMONITOR 
ca14					endif 
ca14					cp 0 
ca14					jr z, .cset 
ca14					cp 1 
ca14					jr nz, .c2 
ca14					res 0, c 
ca14			.c2:		cp 2 
ca14					jr nz, .c3 
ca14					res 1, c 
ca14			.c3:		cp 3 
ca14					jr nz, .c4 
ca14					res 2, c 
ca14			.c4:		cp 4 
ca14					jr nz, .c5 
ca14					res 3, c 
ca14			.c5:		cp 5 
ca14					jr nz, .c6 
ca14					res 4, c 
ca14			.c6:		cp 6 
ca14					jr nz, .c7 
ca14					res 5, c 
ca14			.c7:		cp 7 
ca14					jr nz, .c8 
ca14					res 6, c 
ca14			.c8:		cp 8 
ca14					jr nz, .cset 
ca14					res 7, c 
ca14			.cset:		ld a, c 
ca14					ld (spi_cartdev),a 
ca14			 
ca14					if DEBUG_FORTH_WORDS 
ca14						DMARK "CD2" 
ca14						CALLMONITOR 
ca14					endif 
ca14			 
ca14					; set default SPI clk pulse time as 10ms for CARTDEV use 
ca14			 
ca14					ld a, $0a 
ca14					ld (spi_clktime), a 
ca14					NEXTW 
ca14			endif 
ca14			 
ca14			.ENDDEVICE: 
ca14			; eof 
ca14			 
# End of file forth_words_device.asm
ca14			 
ca14			; var handler 
ca14			 
ca14			 
ca14			.VARS: 
ca14				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
ca14 77				db WORD_SYS_CORE+99             
ca15 c5 ca			dw .V0            
ca17 04				db 3 + 1 
ca18 .. 00			db "VAR",0              
ca1c				endm 
# End of macro CWHEAD
ca1c			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
ca1c			;| 
ca1c			;| The variable name should consist of a single letter. e.g. "a" 
ca1c			;! If a full string is passed then only the first char is looked at 
ca1c			;| Any other char could exceed bounds checks!  
ca1c			 
ca1c					if DEBUG_FORTH_WORDS_KEY 
ca1c						DMARK "VAR" 
ca1c f5				push af  
ca1d 3a 31 ca			ld a, (.dmark)  
ca20 32 65 ee			ld (debug_mark),a  
ca23 3a 32 ca			ld a, (.dmark+1)  
ca26 32 66 ee			ld (debug_mark+1),a  
ca29 3a 33 ca			ld a, (.dmark+2)  
ca2c 32 67 ee			ld (debug_mark+2),a  
ca2f 18 03			jr .pastdmark  
ca31 ..			.dmark: db "VAR"  
ca34 f1			.pastdmark: pop af  
ca35			endm  
# End of macro DMARK
ca35						CALLMONITOR 
ca35 cd 6f ee			call debug_vector  
ca38				endm  
# End of macro CALLMONITOR
ca38					endif 
ca38			 
ca38					FORTH_DSP_VALUEHL 
ca38 cd 8a 9c			call macro_dsp_valuehl 
ca3b				endm 
# End of macro FORTH_DSP_VALUEHL
ca3b			 
ca3b 7e					ld a, (hl)    ; get first char on of the string 
ca3c			 
ca3c			 
ca3c					if DEBUG_FORTH_WORDS 
ca3c						DMARK "VR1" 
ca3c f5				push af  
ca3d 3a 51 ca			ld a, (.dmark)  
ca40 32 65 ee			ld (debug_mark),a  
ca43 3a 52 ca			ld a, (.dmark+1)  
ca46 32 66 ee			ld (debug_mark+1),a  
ca49 3a 53 ca			ld a, (.dmark+2)  
ca4c 32 67 ee			ld (debug_mark+2),a  
ca4f 18 03			jr .pastdmark  
ca51 ..			.dmark: db "VR1"  
ca54 f1			.pastdmark: pop af  
ca55			endm  
# End of macro DMARK
ca55						CALLMONITOR 
ca55 cd 6f ee			call debug_vector  
ca58				endm  
# End of macro CALLMONITOR
ca58					endif 
ca58					 
ca58 f5					push af	 
ca59					FORTH_DSP_POP 
ca59 cd 42 9d			call macro_forth_dsp_pop 
ca5c				endm 
# End of macro FORTH_DSP_POP
ca5c f1					pop af 
ca5d			 
ca5d					; convert to upper 
ca5d			 
ca5d cd 5f 8f				call to_upper 
ca60					if DEBUG_FORTH_WORDS 
ca60						DMARK "Vaa" 
ca60 f5				push af  
ca61 3a 75 ca			ld a, (.dmark)  
ca64 32 65 ee			ld (debug_mark),a  
ca67 3a 76 ca			ld a, (.dmark+1)  
ca6a 32 66 ee			ld (debug_mark+1),a  
ca6d 3a 77 ca			ld a, (.dmark+2)  
ca70 32 67 ee			ld (debug_mark+2),a  
ca73 18 03			jr .pastdmark  
ca75 ..			.dmark: db "Vaa"  
ca78 f1			.pastdmark: pop af  
ca79			endm  
# End of macro DMARK
ca79						CALLMONITOR 
ca79 cd 6f ee			call debug_vector  
ca7c				endm  
# End of macro CALLMONITOR
ca7c					endif 
ca7c 06 41				ld b, 'A' 
ca7e 90					sub b			; set offset 
ca7f					if DEBUG_FORTH_WORDS 
ca7f						DMARK "Vbb" 
ca7f f5				push af  
ca80 3a 94 ca			ld a, (.dmark)  
ca83 32 65 ee			ld (debug_mark),a  
ca86 3a 95 ca			ld a, (.dmark+1)  
ca89 32 66 ee			ld (debug_mark+1),a  
ca8c 3a 96 ca			ld a, (.dmark+2)  
ca8f 32 67 ee			ld (debug_mark+2),a  
ca92 18 03			jr .pastdmark  
ca94 ..			.dmark: db "Vbb"  
ca97 f1			.pastdmark: pop af  
ca98			endm  
# End of macro DMARK
ca98						CALLMONITOR 
ca98 cd 6f ee			call debug_vector  
ca9b				endm  
# End of macro CALLMONITOR
ca9b					endif 
ca9b cb 27				sla a  
ca9d				 
ca9d					 
ca9d					if DEBUG_FORTH_WORDS 
ca9d						DMARK "VR2" 
ca9d f5				push af  
ca9e 3a b2 ca			ld a, (.dmark)  
caa1 32 65 ee			ld (debug_mark),a  
caa4 3a b3 ca			ld a, (.dmark+1)  
caa7 32 66 ee			ld (debug_mark+1),a  
caaa 3a b4 ca			ld a, (.dmark+2)  
caad 32 67 ee			ld (debug_mark+2),a  
cab0 18 03			jr .pastdmark  
cab2 ..			.dmark: db "VR2"  
cab5 f1			.pastdmark: pop af  
cab6			endm  
# End of macro DMARK
cab6						CALLMONITOR 
cab6 cd 6f ee			call debug_vector  
cab9				endm  
# End of macro CALLMONITOR
cab9					endif 
cab9			 
cab9 21 ee e9				ld hl, cli_var_array2 
cabc cd ea 8c				call addatohl 
cabf cd 85 9a				call forth_push_numhl 
cac2			 
cac2			 
cac2				       NEXTW 
cac2 c3 76 9e			jp macro_next 
cac5				endm 
# End of macro NEXTW
cac5			.V0: 
cac5				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
cac5 78				db WORD_SYS_CORE+100             
cac6 dd ca			dw .V0Q            
cac8 04				db 3 + 1 
cac9 .. 00			db "V0!",0              
cacd				endm 
# End of macro CWHEAD
cacd			;| V0! ( u1 -- )  Store value to v0  | DONE 
cacd			 
cacd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cacd cd 8a 9c			call macro_dsp_valuehl 
cad0				endm 
# End of macro FORTH_DSP_VALUEHL
cad0			 
cad0 11 22 ea				ld de, cli_var_array 
cad3			 
cad3 eb					ex de, hl 
cad4 73					ld (hl), e 
cad5 23					inc hl 
cad6 72					ld (hl), d 
cad7			 
cad7					; destroy value TOS 
cad7			 
cad7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cad7 cd 42 9d			call macro_forth_dsp_pop 
cada				endm 
# End of macro FORTH_DSP_POP
cada			 
cada				       NEXTW 
cada c3 76 9e			jp macro_next 
cadd				endm 
# End of macro NEXTW
cadd			.V0Q: 
cadd				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cadd 79				db WORD_SYS_CORE+101             
cade ee ca			dw .V1S            
cae0 04				db 3 + 1 
cae1 .. 00			db "V0@",0              
cae5				endm 
# End of macro CWHEAD
cae5			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
cae5 2a 22 ea				ld hl, (cli_var_array) 
cae8 cd 85 9a				call forth_push_numhl 
caeb			 
caeb				       NEXTW 
caeb c3 76 9e			jp macro_next 
caee				endm 
# End of macro NEXTW
caee			.V1S: 
caee				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
caee 7a				db WORD_SYS_CORE+102             
caef 06 cb			dw .V1Q            
caf1 04				db 3 + 1 
caf2 .. 00			db "V1!",0              
caf6				endm 
# End of macro CWHEAD
caf6			;| V1! ( u1 -- )  Store value to v1 | DONE 
caf6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
caf6 cd 8a 9c			call macro_dsp_valuehl 
caf9				endm 
# End of macro FORTH_DSP_VALUEHL
caf9			 
caf9 11 24 ea				ld de, cli_var_array+2 
cafc				 
cafc eb					ex de, hl 
cafd 73					ld (hl), e 
cafe 23					inc hl 
caff 72					ld (hl), d 
cb00			 
cb00					; destroy value TOS 
cb00			 
cb00					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb00 cd 42 9d			call macro_forth_dsp_pop 
cb03				endm 
# End of macro FORTH_DSP_POP
cb03				       NEXTW 
cb03 c3 76 9e			jp macro_next 
cb06				endm 
# End of macro NEXTW
cb06			.V1Q: 
cb06				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
cb06 7b				db WORD_SYS_CORE+103             
cb07 17 cb			dw .V2S            
cb09 04				db 3 + 1 
cb0a .. 00			db "V1@",0              
cb0e				endm 
# End of macro CWHEAD
cb0e			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
cb0e 2a 24 ea				ld hl, (cli_var_array+2) 
cb11 cd 85 9a				call forth_push_numhl 
cb14				       NEXTW 
cb14 c3 76 9e			jp macro_next 
cb17				endm 
# End of macro NEXTW
cb17			.V2S: 
cb17				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
cb17 7c				db WORD_SYS_CORE+104             
cb18 2f cb			dw .V2Q            
cb1a 04				db 3 + 1 
cb1b .. 00			db "V2!",0              
cb1f				endm 
# End of macro CWHEAD
cb1f			;| V2! ( u1 -- )  Store value to v2 | DONE 
cb1f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb1f cd 8a 9c			call macro_dsp_valuehl 
cb22				endm 
# End of macro FORTH_DSP_VALUEHL
cb22			 
cb22 11 26 ea				ld de, cli_var_array+4 
cb25				 
cb25 eb					ex de, hl 
cb26 73					ld (hl), e 
cb27 23					inc hl 
cb28 72					ld (hl), d 
cb29			 
cb29					; destroy value TOS 
cb29			 
cb29					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb29 cd 42 9d			call macro_forth_dsp_pop 
cb2c				endm 
# End of macro FORTH_DSP_POP
cb2c				       NEXTW 
cb2c c3 76 9e			jp macro_next 
cb2f				endm 
# End of macro NEXTW
cb2f			.V2Q: 
cb2f				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cb2f 7d				db WORD_SYS_CORE+105             
cb30 40 cb			dw .V3S            
cb32 04				db 3 + 1 
cb33 .. 00			db "V2@",0              
cb37				endm 
# End of macro CWHEAD
cb37			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cb37 2a 26 ea				ld hl, (cli_var_array+4) 
cb3a cd 85 9a				call forth_push_numhl 
cb3d				       NEXTW 
cb3d c3 76 9e			jp macro_next 
cb40				endm 
# End of macro NEXTW
cb40			.V3S: 
cb40				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
cb40 7c				db WORD_SYS_CORE+104             
cb41 58 cb			dw .V3Q            
cb43 04				db 3 + 1 
cb44 .. 00			db "V3!",0              
cb48				endm 
# End of macro CWHEAD
cb48			;| V3! ( u1 -- )  Store value to v3 | DONE 
cb48					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb48 cd 8a 9c			call macro_dsp_valuehl 
cb4b				endm 
# End of macro FORTH_DSP_VALUEHL
cb4b			 
cb4b 11 28 ea				ld de, cli_var_array+6 
cb4e				 
cb4e eb					ex de, hl 
cb4f 73					ld (hl), e 
cb50 23					inc hl 
cb51 72					ld (hl), d 
cb52			 
cb52					; destroy value TOS 
cb52			 
cb52					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb52 cd 42 9d			call macro_forth_dsp_pop 
cb55				endm 
# End of macro FORTH_DSP_POP
cb55				       NEXTW 
cb55 c3 76 9e			jp macro_next 
cb58				endm 
# End of macro NEXTW
cb58			.V3Q: 
cb58				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
cb58 7d				db WORD_SYS_CORE+105             
cb59 69 cb			dw .END            
cb5b 04				db 3 + 1 
cb5c .. 00			db "V3@",0              
cb60				endm 
# End of macro CWHEAD
cb60			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
cb60 2a 28 ea				ld hl, (cli_var_array+6) 
cb63 cd 85 9a				call forth_push_numhl 
cb66				       NEXTW 
cb66 c3 76 9e			jp macro_next 
cb69				endm 
# End of macro NEXTW
cb69			 
cb69			 
cb69			 
cb69			 
cb69			 
cb69			; end of dict marker 
cb69			 
cb69 00			.END:    db WORD_SYS_END 
cb6a 00 00			dw 0 
cb6c 00				db 0 
cb6d			 
cb6d			; use to jp here for user dict words to save on macro expansion  
cb6d			 
cb6d			user_dict_next: 
cb6d				NEXTW 
cb6d c3 76 9e			jp macro_next 
cb70				endm 
# End of macro NEXTW
cb70			 
cb70			 
cb70			user_exec: 
cb70				;    ld hl, <word code> 
cb70				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
cb70				;    call forthexec 
cb70				;    jp user_dict_next   (NEXT) 
cb70			        ;    <word code bytes> 
cb70 eb				ex de, hl 
cb71 2a bc e5			ld hl,(os_tok_ptr) 
cb74				 
cb74				FORTH_RSP_NEXT 
cb74 cd 2c 9a			call macro_forth_rsp_next 
cb77				endm 
# End of macro FORTH_RSP_NEXT
cb77			 
cb77			if DEBUG_FORTH_UWORD 
cb77						DMARK "UEX" 
cb77 f5				push af  
cb78 3a 8c cb			ld a, (.dmark)  
cb7b 32 65 ee			ld (debug_mark),a  
cb7e 3a 8d cb			ld a, (.dmark+1)  
cb81 32 66 ee			ld (debug_mark+1),a  
cb84 3a 8e cb			ld a, (.dmark+2)  
cb87 32 67 ee			ld (debug_mark+2),a  
cb8a 18 03			jr .pastdmark  
cb8c ..			.dmark: db "UEX"  
cb8f f1			.pastdmark: pop af  
cb90			endm  
# End of macro DMARK
cb90				CALLMONITOR 
cb90 cd 6f ee			call debug_vector  
cb93				endm  
# End of macro CALLMONITOR
cb93			endif 
cb93			 
cb93			 
cb93			 
cb93 eb				ex de, hl 
cb94 22 bc e5			ld (os_tok_ptr), hl 
cb97				 
cb97				; Don't use next - Skips the first word in uword. 
cb97			 
cb97 c3 07 9f			jp exec1 
cb9a			;	NEXT 
cb9a			 
cb9a			 
cb9a			; eof 
# End of file forth_wordsv4.asm
cb9a			endif 
cb9a			;;;;;;;;;;;;;; Debug code 
cb9a			 
cb9a			 
cb9a			;if DEBUG_FORTH_PARSE 
cb9a .. 00		.nowordfound: db "No match",0 
cba3 .. 00		.compword:	db "Comparing word ",0 
cbb3 .. 00		.nextwordat:	db "Next word at",0 
cbc0 .. 00		.charmatch:	db "Char match",0 
cbcb			;endif 
cbcb			if DEBUG_FORTH_JP 
cbcb			.foundword:	db "Word match. Exec..",0 
cbcb			endif 
cbcb			;if DEBUG_FORTH_PUSH 
cbcb .. 00		.enddict:	db "Dict end. Push.",0 
cbdb .. 00		.push_str:	db "Pushing string",0 
cbea .. 00		.push_num:	db "Pushing number",0 
cbf9 .. 00		.data_sp:	db "SP:",0 
cbfd .. 00		.wordinhl:	db "Word in HL (2/0):",0 
cc0f .. 00		.wordinde:	db "Word in DE (3/0):",0 
cc21 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cc33			;endif 
cc33			;if DEBUG_FORTH_MALLOC 
cc33 .. 00		.push_malloc:	db "Malloc address",0 
cc42			;endif 
cc42			 
cc42			 
cc42			 
cc42			; display malloc address and current data stack pointer  
cc42			 
cc42			malloc_error: 
cc42 d5				push de 
cc43 f5				push af 
cc44 e5				push hl 
cc45 cd bd 8a			call clear_display 
cc48 11 68 cc			ld de, .mallocerr 
cc4b 3e 00			ld a,0 
cc4d			;	ld de,os_word_scratch 
cc4d cd d0 8a			call str_at_display 
cc50 3e 11			ld a, display_row_1+17 
cc52 11 65 ee			ld de, debug_mark 
cc55 cd d0 8a			call str_at_display 
cc58 cd e0 8a			call update_display 
cc5b				;call break_point_state 
cc5b cd 6a dd			call cin_wait 
cc5e			 
cc5e			;	ld a, ' ' 
cc5e			;	ld (os_view_disable), a 
cc5e cd f4 93			call bp_on 
cc61 e1				pop hl 
cc62 f1				pop af 
cc63 d1				pop de	 
cc64				CALLMONITOR 
cc64 cd 6f ee			call debug_vector  
cc67				endm  
# End of macro CALLMONITOR
cc67 c9				ret 
cc68			 
cc68 .. 00		.mallocerr: 	db "Malloc Error",0 
cc75			;if DEBUG_FORTH_PUSH 
cc75			display_data_sp: 
cc75 f5				push af 
cc76			 
cc76				; see if disabled 
cc76			 
cc76			 
cc76 3a 6f ee			ld a, (debug_vector) 
cc79 fe c9			cp $C9  ; RET 
cc7b				;ld a, (os_view_disable) 
cc7b				;cp '*' 
cc7b 28 67			jr z, .skipdsp 
cc7d			 
cc7d e5				push hl 
cc7e e5				push hl 
cc7f e5			push hl 
cc80 cd bd 8a			call clear_display 
cc83 e1			pop hl 
cc84 7c				ld a,h 
cc85 21 c0 e5			ld hl, os_word_scratch 
cc88 cd f3 8e			call hexout 
cc8b e1				pop hl 
cc8c 7d				ld a,l 
cc8d 21 c2 e5			ld hl, os_word_scratch+2 
cc90 cd f3 8e			call hexout 
cc93 21 c4 e5			ld hl, os_word_scratch+4 
cc96 3e 00			ld a,0 
cc98 77				ld (hl),a 
cc99 11 c0 e5			ld de,os_word_scratch 
cc9c 3e 28				ld a, display_row_2 
cc9e cd d0 8a				call str_at_display 
cca1 11 fd cb			ld de, .wordinhl 
cca4 3e 00			ld a, display_row_1 
cca6			 
cca6 cd d0 8a				call str_at_display 
cca9 11 65 ee			ld de, debug_mark 
ccac 3e 11			ld a, display_row_1+17 
ccae			 
ccae cd d0 8a				call str_at_display 
ccb1			 
ccb1				; display current data stack pointer 
ccb1 11 f9 cb			ld de,.data_sp 
ccb4 3e 30				ld a, display_row_2 + 8 
ccb6 cd d0 8a				call str_at_display 
ccb9			 
ccb9 2a e8 e9			ld hl,(cli_data_sp) 
ccbc e5				push hl 
ccbd 7c				ld a,h 
ccbe 21 c0 e5			ld hl, os_word_scratch 
ccc1 cd f3 8e			call hexout 
ccc4 e1				pop hl 
ccc5 7d				ld a,l 
ccc6 21 c2 e5			ld hl, os_word_scratch+2 
ccc9 cd f3 8e			call hexout 
cccc 21 c4 e5			ld hl, os_word_scratch+4 
cccf 3e 00			ld a,0 
ccd1 77				ld (hl),a 
ccd2 11 c0 e5			ld de,os_word_scratch 
ccd5 3e 33				ld a, display_row_2 + 11 
ccd7 cd d0 8a				call str_at_display 
ccda			 
ccda			 
ccda cd e0 8a			call update_display 
ccdd cd 00 8a			call delay1s 
cce0 cd 00 8a			call delay1s 
cce3 e1				pop hl 
cce4			.skipdsp: 
cce4 f1				pop af 
cce5 c9				ret 
cce6			 
cce6			display_data_malloc: 
cce6			 
cce6 f5				push af 
cce7 e5				push hl 
cce8 e5				push hl 
cce9 e5			push hl 
ccea cd bd 8a			call clear_display 
cced e1			pop hl 
ccee 7c				ld a,h 
ccef 21 c0 e5			ld hl, os_word_scratch 
ccf2 cd f3 8e			call hexout 
ccf5 e1				pop hl 
ccf6 7d				ld a,l 
ccf7 21 c2 e5			ld hl, os_word_scratch+2 
ccfa cd f3 8e			call hexout 
ccfd 21 c4 e5			ld hl, os_word_scratch+4 
cd00 3e 00			ld a,0 
cd02 77				ld (hl),a 
cd03 11 c0 e5			ld de,os_word_scratch 
cd06 3e 28				ld a, display_row_2 
cd08 cd d0 8a				call str_at_display 
cd0b 11 33 cc			ld de, .push_malloc 
cd0e 3e 00			ld a, display_row_1 
cd10			 
cd10 cd d0 8a				call str_at_display 
cd13			 
cd13				; display current data stack pointer 
cd13 11 f9 cb			ld de,.data_sp 
cd16 3e 30				ld a, display_row_2 + 8 
cd18 cd d0 8a				call str_at_display 
cd1b			 
cd1b 2a e8 e9			ld hl,(cli_data_sp) 
cd1e e5				push hl 
cd1f 7c				ld a,h 
cd20 21 c0 e5			ld hl, os_word_scratch 
cd23 cd f3 8e			call hexout 
cd26 e1				pop hl 
cd27 7d				ld a,l 
cd28 21 c2 e5			ld hl, os_word_scratch+2 
cd2b cd f3 8e			call hexout 
cd2e 21 c4 e5			ld hl, os_word_scratch+4 
cd31 3e 00			ld a,0 
cd33 77				ld (hl),a 
cd34 11 c0 e5			ld de,os_word_scratch 
cd37 3e 33				ld a, display_row_2 + 11 
cd39 cd d0 8a				call str_at_display 
cd3c			 
cd3c cd e0 8a			call update_display 
cd3f cd 00 8a			call delay1s 
cd42 cd 00 8a			call delay1s 
cd45 e1				pop hl 
cd46 f1				pop af 
cd47 c9				ret 
cd48			;endif 
cd48			 
cd48			include "forth_autostart.asm" 
cd48			; list of commands to perform at system start up 
cd48			 
cd48			startcmds: 
cd48			;	dw test11 
cd48			;	dw test12 
cd48			;	dw test13 
cd48			;	dw test14 
cd48			;	dw test15 
cd48			;	dw test16 
cd48			;	dw test17 
cd48			;	dw ifthtest1 
cd48			;	dw ifthtest2 
cd48			;	dw ifthtest3 
cd48			;	dw mmtest1 
cd48			;	dw mmtest2 
cd48			;	dw mmtest3 
cd48			;	dw mmtest4 
cd48			;	dw mmtest5 
cd48			;	dw mmtest6 
cd48			;	dw iftest1 
cd48			;	dw iftest2 
cd48			;	dw iftest3 
cd48			;	dw looptest1 
cd48			;	dw looptest2 
cd48			;	dw test1 
cd48			;	dw test2 
cd48			;	dw test3 
cd48			;	dw test4 
cd48			;	dw game2r 
cd48			;	dw game2b1 
cd48			;	dw game2b2 
cd48			 
cd48				; start up words that are actually useful 
cd48			 
cd48			;    dw spi1 
cd48			;    dw spi2 
cd48			;    dw spi3 
cd48			;    dw spi4 
cd48			;    dw spi5 
cd48			;    dw spi6 
cd48			;    dw spi7 
cd48			; 
cd48			;    dw spi8 
cd48			;    dw spi9 
cd48			;    dw spi10 
cd48			 
cd48			; file editor 
cd48			;	dw edit1 
cd48			;	dw edit2 
cd48			;	dw edit3 
cd48			 
cd48			;	dw longread 
cd48 68 d1			dw clrstack 
cd4a 9c d1			dw type 
cd4c			;	dw stest 
cd4c c1 d1			dw strncpy 
cd4e			;	dw list 
cd4e 22 d2			dw start1 
cd50 32 d2			dw start2 
cd52			;	dw start3 
cd52			;	dw start3b 
cd52			;	dw start3c 
cd52			 
cd52				; (unit) testing words 
cd52			 
cd52			;	dw mtesta 
cd52			;	dw mtestb 
cd52			;	dw mtestc 
cd52			;	dw mtestd 
cd52			;	dw mteste 
cd52			 
cd52				; demo/game words 
cd52			 
cd52			;        dw game3w 
cd52			;        dw game3p 
cd52			;        dw game3sc 
cd52			;        dw game3vsi 
cd52			;        dw game3vs 
cd52				 
cd52			;	dw game2b 
cd52			;	dw game2bf 
cd52			;	dw game2mba 
cd52			;	dw game2mbas 
cd52			;	dw game2mb 
cd52			 
cd52 4f d5			dw game1 
cd54 60 d5			dw game1a 
cd56 c2 d5			dw game1b 
cd58 f7 d5			dw game1c 
cd5a 2d d6			dw game1d 
cd5c 5e d6			dw game1s 
cd5e 72 d6			dw game1t 
cd60 87 d6			dw game1f 
cd62 bb d6			dw game1z 
cd64 ff d6			dw game1zz 
cd66			 
cd66 88 d3			dw test5 
cd68 c0 d3			dw test6 
cd6a f8 d3			dw test7 
cd6c 0c d4			dw test8 
cd6e 38 d4			dw test9 
cd70 4e d4			dw test10 
cd72				 
cd72 d6 d7		        dw ssv5 
cd74 ba d7		        dw ssv4 
cd76 9e d7		        dw ssv3 
cd78 68 d7		        dw ssv2 
cd7a ef d7		        dw ssv1 
cd7c 37 d8		        dw ssv1cpm 
cd7e			;	dw keyup 
cd7e			;	dw keydown 
cd7e			;	dw keyleft 
cd7e			;	dw keyright 
cd7e			;	dw 	keyf1 
cd7e			;	dw keyf2 
cd7e			;	dw keyf3 
cd7e			;	dw keyf4 
cd7e			;	dw keyf5 
cd7e			;	dw keyf6 
cd7e			;	dw keyf7 
cd7e			;	dw keyf8 
cd7e			;	dw keyf9 
cd7e			;	dw keyf10 
cd7e			;	dw keyf11 
cd7e			;	dw keyf12 
cd7e			;	dw keytab 
cd7e			;	dw keycr 
cd7e			;	dw keyhome 
cd7e			;	dw keyend 
cd7e			;	dw keybs 
cd7e 00 00			db 0, 0	 
cd80			 
cd80			 
cd80			; File Editor 
cd80			 
cd80			; ( id - ) use 'e' to edit the displayed line 
cd80 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
cda1 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cdd6			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cdd6 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
ce0e			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
ce0e			 
ce0e			; SPI Net support words 
ce0e			 
ce0e			; v0! = node to send to 
ce0e			; ( str count - ) 
ce0e .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
ce67			 
ce67			; spiputc ( char node - ) 
ce67 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
ce9b			; spiputc ( u node - ) 
ce9b .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
cec9			 
cec9			; spigetc ( - n ) 
cec9 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
cef2			 
cef2			; getnode ( - n ) 
cef2 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
cf1f			 
cf1f			; ( str node - )  
cf1f .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
cf85			; store string ( str i - ) 
cf85			 
cf85			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
cf85 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
cfda			 
cfda			; get string ( addr i -  )    TO FIX 
cfda			 
cfda .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
d032			 
d032			 
d032			; NETCHAT (TODO) 
d032			; Program to allow two nodes to chat with eachother 
d032			; 
d032			; v0 - target node 
d032			;  
d032			; accept input at 0,0 
d032			; if input is string send spitype to target node 
d032			; starting at row 2,0 , while spigetchr is not zero ->  
d032			; 
d032			; 
d032			; TODO add paging of get request 
d032			 
d032			; ( node - ) 
d032 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d051 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d0a9 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d121			 
d121			 
d121			; Long read of currently open file 
d121 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d168			 
d168			; clear stack  
d168			 
d168 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d19c			 
d19c			; type ( addr count - ) 
d19c .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d1c1			 
d1c1			; some direct memory words 
d1c1			; strncpy ( len t f -- t ) 
d1c1			 
d1c1 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d222			 
d222 .. 00		start1:     	db ": bpon $00 bp ;",0 
d232 .. 00		start2:     	db ": bpoff $01 bp ;",0 
d243 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d2be .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d31e			 
d31e			 
d31e			; a handy word to list items on the stack 
d31e			 
d31e .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d388			 
d388			 
d388			; test stack  
d388			; rnd8 stest 
d388			 
d388			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d388			 
d388			; random malloc and free cycles 
d388			 
d388			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d388			 
d388			; fixed malloc and free cycles 
d388			 
d388			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d388			 
d388			; fixed double string push and drop cycle  
d388			 
d388			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d388			 
d388			; consistent fixed string push and drop cycle  
d388			 
d388			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d388			 
d388			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d388			 
d388			;test1:		db ": aa 1 2 3 ;", 0 
d388			;test2:     	db "111 aa 888 999",0 
d388			;test3:     	db ": bb 77 ;",0 
d388			;test4:     	db "$02 $01 do i . loop bb",0 
d388			 
d388 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d3c0 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d3f8 .. 00		test7:     	db ": box hline vline ;",0 
d40c .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d438 .. 00		test9:     	db ": sw $01 adsp world ;",0 
d44e .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d473			;test11:     	db "hello create .",0 
d473			;test12:     	db "hello2 create .",0 
d473			 
d473			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d473			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d473			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d473			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d473			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d473			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d473			 
d473			;iftest1:     	db "$0001 IF cls .",0 
d473			;iftest2:     	db "$0000 IF cls .",0 
d473			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d473			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d473			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d473			 
d473			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d473			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d473			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d473			 
d473			 
d473 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d497 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d4c7 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d4ec .. 00		sound4: db ": cha $00 ; ",0 
d4f9 .. 00		sound5: db ": chb $20 ; ",0 
d506 .. 00		sound6: db ": chc $40 ; ",0 
d513 .. 00		sound7: db ": chd $60 ; ",0 
d520 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d538 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d54f			 
d54f			 
d54f			 
d54f			 
d54f			; a small guess the number game 
d54f			 
d54f .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d560 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d5c2			 
d5c2 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d5f7 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d62d .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d65e .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d672 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d687 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d6bb .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
d6ff			 
d6ff			; Using 'ga' save a high score across multiple runs using external storage 
d6ff			 
d6ff .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
d768			 
d768			 
d768			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
d768			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
d768			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
d768			 
d768			; simple screen saver to test code memory reuse to destruction 
d768			 
d768 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
d79e .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
d7ba .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
d7d6 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
d7ef .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
d837 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
d88e			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
d88e			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
d88e			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
d88e			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
d88e			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
d88e			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
d88e			 
d88e			 
d88e			 
d88e			; minesweeper/battleship finding game 
d88e			; draws a game board of random ship/mine positions 
d88e			; user enters coords to see if it hits on 
d88e			; game ends when all are hit 
d88e			; when hit or miss says how many may be in the area 
d88e			 
d88e			; setup the game board and then hide it 
d88e			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
d88e			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
d88e			;; prompt for where to target 
d88e			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
d88e			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
d88e			;; TODO see if the entered coords hits or misses pushes char hit of miss 
d88e			;game2mbht:      db ": mbckht nop ;",0 
d88e			;game2mbms:      db ": mbcms nop ;",0 
d88e			; TODO how many might be near by 
d88e			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
d88e			 
d88e			; Game 3 
d88e			 
d88e			; Vert scroller ski game - avoid the trees! 
d88e			 
d88e			; v0 score (ie turns) 
d88e			; v1 player pos 
d88e			; v2 left wall 
d88e			; v3 right wall 
d88e			 
d88e			; Draw side walls randomly 
d88e			 
d88e			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
d88e			 
d88e			; Draw player 
d88e			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
d88e			 
d88e			; TODO Get Key 
d88e			 
d88e			; TODO Move left right 
d88e			 
d88e			; scroll and move walls a bit 
d88e			 
d88e			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
d88e			 
d88e			; main game loop 
d88e			 
d88e			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
d88e			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
d88e			 
d88e			; key board defs 
d88e			 
d88e .. 00		keyup:       db ": keyup $05 ;",0 
d89c .. 00		keydown:       db ": keydown $0a ;",0 
d8ac .. 00		keyleft:       db ": keyleft $0b ;",0 
d8bc .. 00		keyright:       db ": keyright $0c ;",0 
d8cd .. 00		keyf1:       db ": keyf1 $10 ;",0 
d8db .. 00		keyf2:       db ": keyf2 $11 ;",0 
d8e9 .. 00		keyf3:       db ": keyf3 $12 ;",0 
d8f7 .. 00		keyf4:       db ": keyf4 $13 ;",0 
d905 .. 00		keyf5:       db ": keyf5 $14 ;",0 
d913 .. 00		keyf6:       db ": keyf6 $15 ;",0 
d921 .. 00		keyf7:       db ": keyf7 $16 ;",0 
d92f .. 00		keyf8:       db ": keyf8 $17 ;",0 
d93d .. 00		keyf9:       db ": keyf9 $18 ;",0 
d94b .. 00		keyf10:       db ": keyf10 $19 ;",0 
d95a .. 00		keyf11:       db ": keyf11 $1a ;",0 
d969 .. 00		keyf12:       db ": keyf12 $1b ;",0 
d978			 
d978 .. 00		keytab:       db ": keytab $09 ;",0 
d987 .. 00		keycr:       db ": keycr $0d ;",0 
d995 .. 00		keyhome:       db ": keyhome $0e ;",0 
d9a5 .. 00		keyend:       db ": keyend $0f ;",0 
d9b4 .. 00		keybs:       db ": keybs $08 ;",0 
d9c2			 
d9c2			   
d9c2			 
d9c2			 
d9c2			 
d9c2			; eof 
# End of file forth_autostart.asm
d9c2			 
d9c2			 
d9c2			 
d9c2			; stack over and underflow checks 
d9c2			 
d9c2			; init the words to detect the under/overflow 
d9c2			 
d9c2			chk_stk_init: 
d9c2				; a vague random number to check so we dont get any "lucky" hits 
d9c2 3e 2d			ld a, 45 
d9c4 6f				ld l, a 
d9c5 00				nop 
d9c6 3e 17			ld a, 23 
d9c8 67				ld h, a 
d9c9			 
d9c9 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
d9cc			 
d9cc			;	ld (chk_stund), hl	; stack points.... 
d9cc 22 00 ef			ld (chk_stovr), hl 
d9cf 22 e6 e9			ld (chk_ret_und), hl 
d9d2 22 a4 e9			ld (chk_ret_ovr), hl 
d9d5 22 22 e9			ld (chk_loop_ovr), hl 
d9d8 22 20 e8			ld (chk_data_ovr), hl 
d9db c9				ret 
d9dc				 
d9dc			check_stacks: 
d9dc				; check all stack words 
d9dc			 
d9dc e5				push hl 
d9dd d5				push de 
d9de			 
d9de			;	ld de,(chk_word) 
d9de			;	ld hl, (chk_stund)	; stack points.... 
d9de			;	if DEBUG_STK_FAULT 
d9de			;		DMARK "FAa" 
d9de			;		CALLMONITOR 
d9de			;	endif 
d9de			;	call cmp16 
d9de			;	jp z, .chk_faulta 
d9de			; 
d9de			;	ld de, sfaultsu 
d9de			;	jp .chk_fault 
d9de			 
d9de 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
d9e1 ed 5b 97 e2		ld de,(chk_word) 
d9e5				if DEBUG_STK_FAULT 
d9e5					DMARK "FAb" 
d9e5					CALLMONITOR 
d9e5				endif 
d9e5 cd 08 8d			call cmp16 
d9e8 28 06			jr z, .chk_fault1 
d9ea 11 8e da			ld de, sfaultso 
d9ed c3 3f da			jp .chk_fault 
d9f0			.chk_fault1:  
d9f0 2a e6 e9			ld hl, (chk_ret_und) 
d9f3 ed 5b 97 e2		ld de,(chk_word) 
d9f7				if DEBUG_STK_FAULT 
d9f7					DMARK "FAU" 
d9f7					CALLMONITOR 
d9f7				endif 
d9f7 cd 08 8d			call cmp16 
d9fa ca 03 da			jp z, .chk_fault2 
d9fd 11 9e da			ld de, sfaultru 
da00 c3 3f da			jp .chk_fault 
da03			.chk_fault2:  
da03 2a a4 e9			ld hl, (chk_ret_ovr) 
da06 ed 5b 97 e2		ld de,(chk_word) 
da0a				if DEBUG_STK_FAULT 
da0a					DMARK "FA1" 
da0a					CALLMONITOR 
da0a				endif 
da0a cd 08 8d			call cmp16 
da0d ca 16 da			jp z, .chk_fault3 
da10 11 ac da			ld de, sfaultro 
da13 c3 3f da			jp .chk_fault 
da16			.chk_fault3:  
da16 2a 22 e9			ld hl, (chk_loop_ovr) 
da19 ed 5b 97 e2		ld de,(chk_word) 
da1d				if DEBUG_STK_FAULT 
da1d					DMARK "FA2" 
da1d					CALLMONITOR 
da1d				endif 
da1d cd 08 8d			call cmp16 
da20 ca 29 da			jp z, .chk_fault4 
da23 11 c6 da			ld de, sfaultlo 
da26 c3 3f da			jp .chk_fault 
da29			.chk_fault4:  
da29 2a 20 e8			ld hl, (chk_data_ovr) 
da2c ed 5b 97 e2		ld de,(chk_word) 
da30				if DEBUG_STK_FAULT 
da30					DMARK "FA3" 
da30					CALLMONITOR 
da30				endif 
da30 cd 08 8d			call cmp16 
da33 ca 3c da			jp z, .chk_fault5 
da36 11 e0 da			ld de, sfaultdo 
da39 c3 3f da			jp .chk_fault 
da3c			 
da3c			 
da3c			.chk_fault5:  
da3c d1				pop de 
da3d e1				pop hl 
da3e			 
da3e c9				ret 
da3f			 
da3f cd bd 8a		.chk_fault: 	call clear_display 
da42 3e 28				ld a, display_row_2 
da44 cd d0 8a				call str_at_display 
da47 11 70 da				   ld de, .stackfault 
da4a 3e 00				ld a, display_row_1 
da4c cd d0 8a				call str_at_display 
da4f 11 65 ee				    ld de, debug_mark 
da52 3e 11				ld a, display_row_1+17 
da54 cd d0 8a				call str_at_display 
da57 cd e0 8a				call update_display 
da5a			 
da5a				; prompt before entering montior for investigating issue 
da5a			 
da5a 3e 78			ld a, display_row_4 
da5c 11 63 97			ld de, endprog 
da5f			 
da5f cd e0 8a			call update_display		 
da62			 
da62 cd fd 99			call next_page_prompt 
da65			 
da65 d1				pop de 
da66 e1				pop hl 
da67 cd b7 97				call monitor 
da6a cd 1c 9e				call forth_warmstart 
da6d c3 b3 96				jp warmstart_afterauto 
da70					;jp 0 
da70					;halt 
da70			 
da70			 
da70			 
da70 .. 00		.stackfault: 	db "Stack fault:",0 
da7d			 
da7d .. 00		sfaultsu: 	db	"Stack under flow",0 
da8e .. 00		sfaultso: 	db	"Stack over flow",0 
da9e .. 00		sfaultru:	db "RTS underflow",0 
daac .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
dac6 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
dae0 .. 00		sfaultdo:	db "DTS overflow", 0 
daed			 
daed			 
daed			fault_dsp_under: 
daed 11 ff da			ld de, .dsp_under 
daf0 c3 b5 db			jp .show_fault 
daf3			 
daf3			fault_rsp_under: 
daf3 11 0d db			ld de, .rsp_under 
daf6 c3 b5 db			jp .show_fault 
daf9			fault_loop_under: 
daf9 11 1b db			ld de, .loop_under 
dafc c3 b5 db			jp .show_fault 
daff			 
daff .. 00		.dsp_under: db "DSP Underflow",0 
db0d .. 00		.rsp_under: db "RSP Underflow",0 
db1b .. 00		.loop_under: db "LOOP Underflow",0 
db2a			 
db2a			 
db2a d5			type_faultn: 	push de 
db2b e5					push hl 
db2c cd bd 8a				call clear_display 
db2f 11 59 db				   ld de, .typefaultn 
db32 3e 00				ld a, display_row_1 
db34 cd d0 8a				call str_at_display 
db37 11 65 ee				    ld de, debug_mark 
db3a 3e 11				ld a, display_row_1+17 
db3c cd d0 8a				call str_at_display 
db3f cd e0 8a				call update_display 
db42			 
db42				; prompt before entering montior for investigating issue 
db42			 
db42 3e 78			ld a, display_row_4 
db44 11 63 97			ld de, endprog 
db47			 
db47 cd e0 8a			call update_display		 
db4a			 
db4a cd fd 99			call next_page_prompt 
db4d			 
db4d e5					push hl 
db4e d5					push de 
db4f cd b7 97				call monitor 
db52 cd 1c 9e				call forth_warmstart 
db55 c3 b3 96				jp warmstart_afterauto 
db58 76					halt 
db59			 
db59			 
db59 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
db70			 
db70 d5			type_faults: 	push de 
db71 e5					push hl 
db72 cd bd 8a				call clear_display 
db75 11 9e db				   ld de, .typefaults 
db78 3e 00				ld a, display_row_1 
db7a cd d0 8a				call str_at_display 
db7d 11 65 ee				    ld de, debug_mark 
db80 3e 11				ld a, display_row_1+17 
db82 cd d0 8a				call str_at_display 
db85 cd e0 8a				call update_display 
db88			 
db88				; prompt before entering montior for investigating issue 
db88			 
db88 3e 78			ld a, display_row_4 
db8a 11 63 97			ld de, endprog 
db8d			 
db8d cd e0 8a			call update_display		 
db90			 
db90 cd fd 99			call next_page_prompt 
db93			 
db93 e1					pop hl 
db94 d1					pop de 
db95 cd b7 97				call monitor 
db98 cd 1c 9e				call forth_warmstart 
db9b c3 b3 96				jp warmstart_afterauto 
db9e			 
db9e			 
db9e .. 00		.typefaults: db "STR Type Expected TOS!",0 
dbb5			 
dbb5			.show_fault: 	 
dbb5 d5					push de 
dbb6 cd bd 8a				call clear_display 
dbb9 d1					pop de 
dbba 3e 00				ld a, display_row_1 
dbbc cd d0 8a				call str_at_display 
dbbf 11 65 ee				    ld de, debug_mark 
dbc2 3e 11				ld a, display_row_1+17 
dbc4 cd d0 8a				call str_at_display 
dbc7 cd e0 8a				call update_display 
dbca			 
dbca				; prompt before entering montior for investigating issue 
dbca			 
dbca 3e 78			ld a, display_row_4 
dbcc 11 63 97			ld de, endprog 
dbcf			 
dbcf cd e0 8a			call update_display		 
dbd2			 
dbd2 cd fd 99			call next_page_prompt 
dbd5			 
dbd5 e1					pop hl 
dbd6 d1					pop de 
dbd7 cd b7 97				call monitor 
dbda			; do a dump to cli and not warmstart so we preserve all of the uwords.  
dbda			; TODO Make optional fault restart to cli or warm boot? 
dbda					;jp warmstart 
dbda c3 f7 96				jp cli 
dbdd 76					halt 
dbde			 
dbde			 
dbde			; handle the auto run of code from files in storage 
dbde			 
dbde			 
dbde			include "forth_startup.asm" 
dbde			; Which startup method to use? 
dbde			; 
dbde			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
dbde			; followed by loading of a list of scripts in eeprom 
dbde			 
dbde			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
dbde			; from eeprom 
dbde			 
dbde			; Select with define in main stubs 
dbde			 
dbde			if STARTUP_V1 
dbde				include "forth_startupv1.asm" 
dbde			; Startup script loading version 1 
dbde			 
dbde			; If SE storage is available first stage is to use the selected file 
dbde			; then go through the eeprom list 
dbde			 
dbde .. 00		sprompt1: db "Startup load...",0 
dbee .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
dc04			 
dc04			 
dc04			 
dc04			 
dc04			forth_startup: 
dc04 21 48 cd			ld hl, startcmds 
dc07 3e 00			ld a, 0 
dc09 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
dc0c			 
dc0c e5			.start1:	push hl 
dc0d cd bd 8a			call clear_display 
dc10 11 de db			ld de, sprompt1 
dc13 3e 00		        ld a, display_row_1 
dc15 cd d0 8a			call str_at_display 
dc18 11 ee db			ld de, sprompt2 
dc1b 3e 28		        ld a, display_row_2 
dc1d cd d0 8a			call str_at_display 
dc20 e1				pop hl 
dc21 e5				push hl 
dc22 5e				ld e,(hl) 
dc23 23				inc hl 
dc24 56				ld d,(hl) 
dc25 3e 50		        ld a, display_row_3 
dc27 cd d0 8a			call str_at_display 
dc2a cd e0 8a			call update_display 
dc2d			 
dc2d			 
dc2d 3a e1 e6			ld a, (os_last_cmd) 
dc30 fe 00			cp 0 
dc32 28 05			jr z, .startprompt 
dc34 cd f4 89			call delay250ms 
dc37 18 24			jr .startdo 
dc39				 
dc39				 
dc39			 
dc39			.startprompt: 
dc39			 
dc39 3e 9f			ld a,display_row_4 + display_cols - 1 
dc3b 11 fb 99		        ld de, endprg 
dc3e cd d0 8a			call str_at_display 
dc41 cd e0 8a			call update_display 
dc44 cd 00 8a			call delay1s 
dc47 cd 6a dd			call cin_wait 
dc4a						 
dc4a fe 2a			cp '*' 
dc4c 28 5e			jr z, .startupend1 
dc4e fe 23			cp '#' 
dc50 20 07			jr nz, .startno 
dc52 3e 01			ld a, 1 
dc54 32 e1 e6			ld (os_last_cmd),a 
dc57 18 04			jr .startdo 
dc59 fe 31		.startno:	cp '1' 
dc5b 28 3a			jr z,.startnxt  
dc5d			 
dc5d				; exec startup line 
dc5d			.startdo:	 
dc5d e1				pop hl 
dc5e e5				push hl 
dc5f				 
dc5f 5e				ld e,(hl) 
dc60 23				inc hl 
dc61 56				ld d,(hl) 
dc62 eb				ex de,hl 
dc63			 
dc63 e5				push hl 
dc64			 
dc64 3e 00			ld a, 0 
dc66				;ld a, FORTH_END_BUFFER 
dc66 cd 5b 90			call strlent 
dc69 23				inc hl   ; include zero term to copy 
dc6a 06 00			ld b,0 
dc6c 4d				ld c,l 
dc6d e1				pop hl 
dc6e 11 bb e2			ld de, scratch 
dc71 ed b0			ldir 
dc73			 
dc73			 
dc73 21 bb e2			ld hl, scratch 
dc76 cd c4 9e			call forthparse 
dc79 cd 04 9f			call forthexec 
dc7c cd 16 9e			call forthexec_cleanup 
dc7f			 
dc7f 3e 78			ld a, display_row_4 
dc81 11 63 97			ld de, endprog 
dc84			 
dc84 cd e0 8a			call update_display		 
dc87			 
dc87 3a e1 e6			ld a, (os_last_cmd) 
dc8a fe 00			cp 0 
dc8c 20 09			jr nz, .startnxt 
dc8e cd fd 99			call next_page_prompt 
dc91 cd bd 8a		        call clear_display 
dc94 cd e0 8a			call update_display		 
dc97			 
dc97				; move onto next startup line? 
dc97			.startnxt: 
dc97			 
dc97 cd f4 89			call delay250ms 
dc9a e1				pop hl 
dc9b			 
dc9b 23				inc hl 
dc9c 23				inc hl 
dc9d			 
dc9d e5				push hl 
dc9e 5e				ld e, (hl) 
dc9f 23				inc hl 
dca0 56				ld d, (hl) 
dca1 e1				pop hl 
dca2				; TODO replace 0 test 
dca2			 
dca2 eb				ex de, hl 
dca3 cd 13 8d			call ishlzero 
dca6			;	ld a,e 
dca6			;	add d 
dca6			;	cp 0    ; any left to do? 
dca6 eb				ex de, hl 
dca7 c2 0c dc			jp nz, .start1 
dcaa 18 01			jr .startupend 
dcac			 
dcac e1			.startupend1: pop hl 
dcad			.startupend: 
dcad			 
dcad cd bd 8a			call clear_display 
dcb0 cd e0 8a			call update_display 
dcb3 c9				ret 
dcb4			if STORAGE_SE 
dcb4			 
dcb4			sprompt3: db "Loading from start-up file?:",0 
dcb4			sprompt4: db "(Y=Any key/N=No)",0 
dcb4			 
dcb4			 
dcb4			forth_autoload: 
dcb4			 
dcb4				; load block 0 of store 1 
dcb4				 
dcb4				ld a, $fe      ; bit 0 clear 
dcb4				ld (spi_device), a 
dcb4			 
dcb4				call storage_get_block_0 
dcb4			 
dcb4				ld a, (store_page+STORE_0_AUTOFILE) 
dcb4			 
dcb4				cp 0 
dcb4				ret z     ; auto start not enabled 
dcb4			 
dcb4				call clear_display 
dcb4			 
dcb4				; set bank 
dcb4			 
dcb4					ld a, (store_page+STORE_0_BANKRUN) 
dcb4					ld (spi_device), a 
dcb4			 
dcb4				; get file id to load from and get the file name to display 
dcb4			 
dcb4					ld a, (store_page+STORE_0_FILERUN) 
dcb4			 
dcb4					ld l, 0 
dcb4					ld h, a 
dcb4					ld de, store_page 
dcb4			 
dcb4					if DEBUG_FORTH_WORDS 
dcb4						DMARK "ASp" 
dcb4						CALLMONITOR 
dcb4					endif 
dcb4					call storage_read 
dcb4			 
dcb4					if DEBUG_FORTH_WORDS 
dcb4						DMARK "ASr" 
dcb4						CALLMONITOR 
dcb4					endif 
dcb4			 
dcb4					call ishlzero 
dcb4					ret z             ; file not found 
dcb4			 
dcb4					ld a, display_row_2 + 10 
dcb4					ld de, store_page+3 
dcb4					call str_at_display 
dcb4				 
dcb4			; 
dcb4			 
dcb4				ld a, display_row_1+5 
dcb4				ld de, sprompt3 
dcb4				call str_at_display 
dcb4				ld a, display_row_3+15 
dcb4				ld de, sprompt4 
dcb4				call str_at_display 
dcb4			 
dcb4				call update_display 
dcb4			 
dcb4				call cin_wait 
dcb4				cp 'n' 
dcb4				ret z 
dcb4				cp 'N' 
dcb4				ret z 
dcb4			 
dcb4				call delay1s 
dcb4			 
dcb4				ld a, (store_page+2) 
dcb4				ld (store_openmaxext), a    ; save count of ext 
dcb4				ld a, 1  
dcb4				ld (store_openext), a    ; save count of ext 
dcb4			 
dcb4			.autof:  
dcb4				ld l , a 
dcb4				 
dcb4				ld a, (store_page) 
dcb4				ld h, a	 
dcb4				ld de, store_page 
dcb4					if DEBUG_FORTH_WORDS 
dcb4						DMARK "ASl" 
dcb4						CALLMONITOR 
dcb4					endif 
dcb4					call storage_read 
dcb4				call ishlzero 
dcb4				ret z 
dcb4			;	jr z, .autoend 
dcb4			 
dcb4					if DEBUG_FORTH_WORDS 
dcb4						DMARK "ASc" 
dcb4						CALLMONITOR 
dcb4					endif 
dcb4				ld de, store_page+2 
dcb4				ld a, display_row_4 
dcb4				call str_at_display 
dcb4			 
dcb4				call update_display 
dcb4				call delay250ms 
dcb4			 
dcb4			 
dcb4			 
dcb4				ld hl, store_page+2 
dcb4				call forthparse 
dcb4				call forthexec 
dcb4				call forthexec_cleanup 
dcb4			 
dcb4				 
dcb4				ld a, (store_openext) 
dcb4				inc a 
dcb4				ld (store_openext), a    ; save count of ext 
dcb4			 
dcb4				jr .autof 
dcb4			;.autofdone: 
dcb4			; 
dcb4			;		if DEBUG_FORTH_WORDS 
dcb4			;			DMARK "ASx" 
dcb4			;			CALLMONITOR 
dcb4			;		endif 
dcb4			;;	call clear_display 
dcb4			;	ret 
dcb4			 
dcb4			 
dcb4			 
dcb4			endif 
# End of file forth_startupv1.asm
dcb4			endif 
dcb4			if STARTUP_V2 
dcb4				include "forth_startupv2.asm" 
dcb4			endif 
dcb4			 
# End of file forth_startup.asm
dcb4			 
dcb4			; eof 
# End of file forth_kernel.asm
dcb4			;include "nascombasic.asm" 
dcb4			 
dcb4			 
dcb4			; find out where the code ends if loaded into RAM (for SC114) 
dcb4			;endofcode:  
dcb4			;	nop 
dcb4			 
dcb4			 
dcb4			; jump to nmi vector 
dcb4			 
dcb4			init_nmi: 
dcb4 3e c9			ld a, $c9   ; RET 
dcb6 32 72 ee			ld (nmi_vector), a 
dcb9 c9				ret 
dcba			nmi: 
dcba e5				push hl 
dcbb d5				push de 
dcbc c5				push bc 
dcbd f5				push af 
dcbe cd 72 ee			call nmi_vector 
dcc1 f5				push af 
dcc2 c5				push bc 
dcc3 d5				push de 
dcc4 e5				push hl 
dcc5 ed 4d			reti 
dcc7			 
dcc7			 
dcc7			; eof 
dcc7			 
# End of file main.asm
dcc7			;include "firmware_lcd_4x40.asm" 
dcc7			;;include "firmware_lcd_4x20.asm" 
dcc7			include "firmware_serial_display.asm" 
dcc7			 
dcc7			; Serial display interface for SC114 
dcc7			 
dcc7			 
dcc7			display_row_1: equ 0 
dcc7			display_row_2: equ display_row_1+display_cols 
dcc7			display_row_3: equ display_row_2 + display_cols 
dcc7			display_row_4: equ display_row_3 + display_cols 
dcc7			 
dcc7			kLCDWidth:  EQU display_cols             ;Width in characters 
dcc7			kLCD_Line1: EQU 0x00  
dcc7			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
dcc7			; E1 
dcc7			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
dcc7			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
dcc7			 
dcc7			lcd_init: 
dcc7				; no init as handled by the SCM bios 
dcc7 c9				ret 
dcc8			 
dcc8			 
dcc8			; low level functions for direct screen writes 
dcc8			 
dcc8			; output char at pos? 
dcc8			fLCD_Str: 
dcc8			        ;out (SC114_SIO_1_OUT),a 
dcc8 c5				push bc 
dcc9 0e 02			ld c, $02 
dccb f7				rst $30 
dccc c1				pop bc 
dccd c9				ret 
dcce			 
dcce			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
dcce			fLCD_Pos: 
dcce				; use ASCII escape to position 
dcce			        ;out (SC114_SIO_1_OUT),a 
dcce c5				push bc 
dccf 0e 02			ld c, $02 
dcd1 f7				rst $30 
dcd2 c1				pop bc 
dcd3			 
dcd3 c9				ret 
dcd4			 
dcd4			; output char at pos 
dcd4			fLCD_Data: 
dcd4			      ;  out (SC114_SIO_1_OUT),a 
dcd4 c5				push bc 
dcd5 0e 02			ld c, $02 
dcd7 f7				rst $30 
dcd8 c1				pop bc 
dcd9			 
dcd9 c9				ret 
dcda			 
dcda			; ascii cls  
dcda			 
dcda 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
dcde			 
dcde			; write the frame buffer given in hl to hardware  
dcde			write_display: 
dcde			 
dcde			API: equ 0 
dcde			 
dcde			if API 
dcde				push bc 
dcde				ld b, 4 
dcde			 
dcde			        ld (display_write_tmp), hl 	  
dcde			 
dcde				; clear and home cursor 
dcde			 
dcde				ld c, 6 
dcde				ld de, .cls 
dcde				rst $30 
dcde			 
dcde			 
dcde			.writeln: 
dcde			 
dcde				ld de, (display_write_tmp) 
dcde				ld c, 6 
dcde				rst $30 
dcde				ld c, 7 
dcde				rst $30 
dcde			 
dcde				ld hl, (display_write_tmp) 
dcde				ld de, display_cols 
dcde				add hl,de 
dcde				ld (display_write_tmp),hl 
dcde			 
dcde				djnz  .writeln 
dcde			 
dcde				pop bc 
dcde			 
dcde			 
dcde				ret 
dcde			endif 
dcde e5				push hl 
dcdf c5				push bc 
dce0 d5				push de 
dce1			 
dce1			;	ld c, 2 
dce1			;	;ld de, .cls 
dce1			;	ld a, 27 
dce1			;	rst $30 
dce1			;	ld c, 2 
dce1			;	;ld de, .cls 
dce1			;	ld a, '[' 
dce1			;	rst $30 
dce1			; 
dce1			;	ld c, 2 
dce1			;	;ld de, .cls 
dce1			;	ld a, 'H' 
dce1			;	rst $30 
dce1			; 
dce1			 
dce1 0e 02			ld c, 2 
dce3				;ld de, .cls 
dce3 3e 1b			ld a, 27 
dce5 f7				rst $30 
dce6			 
dce6			 
dce6 0e 02			ld c, 2 
dce8				;ld de, .cls 
dce8 3e 5b			ld a, '[' 
dcea f7				rst $30 
dceb 0e 02			ld c, 2 
dced				;ld de, .cls 
dced 3e 32			ld a, '2' 
dcef f7				rst $30 
dcf0 0e 02			ld c, 2 
dcf2				;ld de, .cls 
dcf2 3e 4a			ld a, 'J' 
dcf4 f7				rst $30 
dcf5 d1				pop de 
dcf6 c1				pop bc 
dcf7 e1				pop hl 
dcf8			 
dcf8			 
dcf8 22 c3 eb		        ld (display_write_tmp), hl 	  
dcfb 3e 00			ld a, kLCD_Line1 
dcfd			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dcfd 06 28			ld b, display_cols 
dcff ed 5b c3 eb		ld de, (display_write_tmp) 
dd03 cd 61 dd			call write_len_string 
dd06				 
dd06			 
dd06 e5			push hl 
dd07 d5			push de 
dd08 c5			push bc 
dd09 0e 07			ld c, 7 
dd0b f7				rst $30 
dd0c c1			pop bc 
dd0d d1			pop de 
dd0e e1			pop hl 
dd0f			 
dd0f				 
dd0f 2a c3 eb			ld hl, (display_write_tmp) 
dd12 11 28 00			ld de, display_cols 
dd15 19				add hl,de 
dd16 22 c3 eb			ld (display_write_tmp),hl 
dd19			 
dd19				 
dd19 3e 28			ld a, kLCD_Line2 
dd1b			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dd1b 06 28			ld b, display_cols 
dd1d ed 5b c3 eb		ld de, (display_write_tmp) 
dd21 cd 61 dd			call write_len_string 
dd24				 
dd24 2a c3 eb			ld hl, (display_write_tmp) 
dd27 11 28 00			ld de, display_cols 
dd2a 19				add hl,de 
dd2b 22 c3 eb			ld (display_write_tmp),hl 
dd2e			 
dd2e e5			push hl 
dd2f d5			push de 
dd30 c5			push bc 
dd31 0e 07			ld c, 7 
dd33 f7				rst $30 
dd34 c1			pop bc 
dd35 d1			pop de 
dd36 e1			pop hl 
dd37			 
dd37				 
dd37 3e 50			ld a, kLCD_Line3 
dd39			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
dd39 06 28			ld b, display_cols 
dd3b ed 5b c3 eb		ld de, (display_write_tmp) 
dd3f cd 61 dd			call write_len_string 
dd42				 
dd42 2a c3 eb			ld hl, (display_write_tmp) 
dd45 11 28 00			ld de, display_cols 
dd48 19				add hl,de 
dd49 22 c3 eb			ld (display_write_tmp),hl 
dd4c			 
dd4c e5			push hl 
dd4d d5			push de 
dd4e c5			push bc 
dd4f 0e 07			ld c, 7 
dd51 f7				rst $30 
dd52 c1			pop bc 
dd53 d1			pop de 
dd54 e1			pop hl 
dd55			 
dd55				 
dd55 3e 78			ld a, kLCD_Line4 
dd57			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
dd57 06 28			ld b, display_cols 
dd59 ed 5b c3 eb		ld de, (display_write_tmp) 
dd5d cd 61 dd			call write_len_string 
dd60 c9					ret 
dd61			 
dd61			 
dd61				; write out a fixed length string given in b from de 
dd61			 
dd61 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
dd62 cd d4 dc		            CALL fLCD_Data      ;Write character to display 
dd65 13				inc de 
dd66 10 f9			djnz write_len_string 
dd68 c9				ret 
dd69			 
dd69			 
dd69			; eof 
# End of file firmware_serial_display.asm
dd69			;include "firmware_key_5x10.asm" 
dd69			;;include "firmware_key_4x10.asm" 
dd69			include "firmware_key_serial.asm" 
dd69			; Serial keyboard interface for SC114 
dd69			 
dd69			key_init: 
dd69				; no init as handled by the SCM bios 
dd69 c9				ret 
dd6a			 
dd6a			 
dd6a			cin_wait: 
dd6a			;	ld a, 0 
dd6a			;	ret 
dd6a			 
dd6a				;in a,(SC114_SIO_1_IN) 
dd6a			        ; Use SCM API to get from whatever console device we are using 
dd6a c5				push bc 
dd6b 0e 01			ld c, $01 
dd6d f7				rst $30 
dd6e c1				pop bc 
dd6f c9				ret 
dd70			 
dd70			cin: 
dd70			 
dd70			 
dd70 c5				push bc 
dd71			 
dd71				; any key waiting to process? 
dd71 0e 03			ld c, $03 
dd73 f7				rst $30 
dd74 28 05			jr z, .cin_skip 
dd76			 
dd76				; yep, get it 
dd76			 
dd76 0e 01			ld c, $01 
dd78 f7				rst $30 
dd79 c1				pop bc 
dd7a c9				ret 
dd7b			.cin_skip: 
dd7b 3e 00			ld a, 0 
dd7d c1				pop bc 
dd7e c9				ret 
dd7f			 
dd7f			 
dd7f			 
dd7f			 
# End of file firmware_key_serial.asm
dd7f			endofcode:  
dd7f			baseram:  
dd7f 00				nop 
dd80			 
dd80			heap_start: equ baseram+15  ; Starting address of heap 
dd80			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
dd80			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
dd80			;VDU:  EQU     endofcode           ; BASIC Work space 
dd80			; eof 
dd80			 
# End of file os_mega_sc114.asm
dd80
