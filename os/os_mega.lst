# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 18 1d			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-08-06 12:30' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b			 
001b			 
001b			 
001b			;        nop  
001b			;        nop 
001b			;;	org 05h		; null out bdos call 
001b			; 
001b			;        nop  
001b			;        nop  
001b			;        nop 
001b			;;	org 08h 
001b			;;; 
001b			;;	jp cin		; rst 8 - char in 
001b			;;; 
001b			; 
001b			;        nop 
001b			;        nop 
001b			;        nop 
001b			;        nop 
001b			;        nop 
001b			;        nop 
001b			;        nop 
001b			;        nop 
001b			;	org 010h 
001b			;; 
001b			;	jp cout		; rest 010h  - char out 
001b			;; 
001b			;	org 01bh   
001b			; 
001b			;	;jp  		; rst 01bh   - write string to display 
001b			;	jp str_at_display 
001b			; 
001b			; 
001b			;	org 020h 
001b			; 
001b			;	; jp		 ; rst 020h - read char at screen location 
001b			; 
001b			;	org 028h 
001b			 
001b				; jp		 ; rst 028h  - storage i/o 
001b			 
001b			; 	org 030h 
001b			;	jp break_point_state 
001b			  
001b			; $30  
001b			; org 038h 
001b			; $38 
001b			 
001b			; TODO any more important entry points to add to jump table for easier coding use? 
001b			 
001b			if BASE_KEV = 1  
001b			 
001b				; need to be at $66 for nmi support 
001b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0021 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0027 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0033 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0039 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0045 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0051 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0057 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0063 00 ff			db 0,255 
0065 c3 94 76			jp nmi 
0068			endif 
0068			 
0068			include "firmware.asm" 
0068			  
0068			; main constants (used here and in firmware)  
0068			  
0068			; TODO have page 0 of storage as bios  
0068			  
0068			Device_A: equ 0h  
0068			Device_B: equ 040h          ; Sound  
0068			  
0068			if BASE_KEV  
0068			Device_C: equ 080h          ; Storage and ext cart devices  
0068			endif  
0068			  
0068			if BASE_SC114  
0068			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
0068			endif  
0068			  
0068			if BASE_CPM  
0068			; TODO fixup for CPM  
0068			Device_C: equ 080h          ; Storage and ext cart devices  
0068			endif  
0068			  
0068			Device_D: equ 0c0h             ; Keyboard and LCD  
0068			  
0068			; Odd specific debug points for testing hardware dev  
0068			  
0068			DEBUG_SOUND: equ 0       
0068			DEBUG_STK_FAULT: equ 0  
0068			DEBUG_INPUT: equ 0     ; Debug input entry code  
0068			DEBUG_KEYCINWAIT: equ 0  
0068			DEBUG_KEYCIN: equ 0  
0068			DEBUG_KEY: equ 0  
0068			DEBUG_KEY_MATRIX: equ 0  
0068			DEBUG_STORECF: equ 0  
0068			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.   
0068			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A  
0068			DEBUG_SPI: equ 0    ; low level spi tests  
0068			  
0068			; Enable many break points  
0068			  
0068			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6  
0068			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6  
0068			DEBUG_FORTH_PARSE_NEXTWORD: equ 0  
0068			DEBUG_FORTH_JP: equ 0    ; 4  
0068			DEBUG_FORTH_MALLOC: equ 0  
0068			DEBUG_FORTH_MALLOC_INT: equ 0  
0068			DEBUG_FORTH_DOT: equ 1  
0068			DEBUG_FORTH_DOT_WAIT: equ 0  
0068			DEBUG_FORTH_MATHS: equ 0  
0068			DEBUG_FORTH_TOK: equ 0    ; 4  
0068			DEBUG_FORTH_PARSE: equ 0    ; 3  
0068			DEBUG_FORTH: equ 0  ;2  
0068			DEBUG_FORTH_WORDS: equ 1   ; 1  
0068			DEBUG_FORTH_PUSH: equ 1   ; 1  
0068			DEBUG_FORTH_UWORD: equ 1   ; 1  
0068			  
0068			; Enable key point breakpoints  
0068			  
0068			DEBUG_FORTH_DOT_KEY: equ 0  
0068			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5  
0068			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1  
0068			  
0068			; Debug stack imbalances  
0068			  
0068			ON: equ 1  
0068			OFF: equ 0  
0068			  
0068			DEBUG_STACK_IMB: equ 0  
0068			STACK_IMB_STORE: equ 20  
0068			  
0068			; House keeping and protections  
0068			  
0068			DEBUG_FORTH_STACK_GUARD: equ 1  
0068			DEBUG_FORTH_MALLOC_GUARD: equ 1  
0068			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual!  
0068			FORTH_ENABLE_FREE: equ 0  
0068			FORTH_ENABLE_MALLOCFREE: equ 1  
0068			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away  
0068			FORTH_ENABLE_FLOATMATH: equ 0  
0068			  
0068			  
0068			CALLMONITOR: macro  
0068			;	call break_point_state  
0068			; now use the break point debug vector  
0068				call debug_vector  
0068				endm  
0068			  
0068			MALLOC_1: equ 1        ; from dk88   
0068			MALLOC_2: equ 0           ; broke  
0068			MALLOC_3: equ 0           ; really broke  
0068			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
0068			  
0068			if BASE_KEV   
0068			stacksize: equ 256  
0068			  
0068			STACK_RET_SIZE: equ 64  
0068			STACK_LOOP_SIZE: equ 128  
0068			STACK_DATA_SIZE: equ 512  
0068			endif  
0068			if BASE_SC114  
0068			;tos:	equ 0f000h  
0068			stacksize: equ 256  
0068			STACK_RET_SIZE: equ 64  
0068			STACK_LOOP_SIZE: equ 128  
0068			STACK_DATA_SIZE: equ 256  
0068			endif  
0068			  
0068			if BASE_CPM  
0068			;tos:	equ 0f000h  
0068			stacksize: equ 256  
0068			STACK_RET_SIZE: equ 64  
0068			STACK_LOOP_SIZE: equ 128  
0068			STACK_DATA_SIZE: equ 256  
0068			endif  
0068			  
0068			;if STORAGE_SE == 0  
0068			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
0068			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
0068			;endif  
0068			  
0068			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
0068			  
0068			STORE_0_AUTORUN: equ $20  
0068			  
0068			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
0068			  
0068			STORE_0_AUTOFILE: equ $21  
0068			STORE_0_BANKRUN: equ $23  
0068			STORE_0_FILERUN: equ $24  
0068			  
0068			; Block 0 offsets for settings  
0068			  
0068			; if set then skip prompt for start up and accept all  
0068			  
0068			STORE_0_QUICKSTART: equ $25  
0068			  
0068			; Blocks where directory table is held  
0068			  
0068			; Reducing the number of entries increases the max file size  
0068			  
0068			;STORE_DIR_START: equ 1  
0068			;STORE_DIR_END: equ 33  
0068			  
0068			; Blocks from where file data is stored  
0068			  
0068			;STORE_DATA_START: equ STORE_DIR_END + 1  
0068			  
0068			; Block indicators (<32 are data files)  
0068			  
0068			;STORE_BLOCK_CFG: equ $8f       ; config block  
0068			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
0068			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
0068			;STORE_BLOCK_FREE: equ $85       ; data block free  
0068			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
0068			  
0068			  
0068			  
0068			; Directory entry flags  
0068			  
0068			;STORE_DIR_FREE: equ 0  
0068			;STORE_DIR_FILE:  equ 1  
0068			  
0068			; Structure offsets to directory entries  
0068			;STORE_DE_FLAG: equ 0  
0068			;STORE_DE_MAXEXT: equ 1  
0068			;STORE_DE_FILENAME: equ 2  
0068			  
0068			; Structure offsets to block 0  
0068			  
0068			;STORE_BK0_ISFOR: equ 1  
0068			;STORE_BK0_LABEL: equ 3  
0068			  
0068			; memory allocation   
0068			  
0068			chk_stund: equ tos+2           ; underflow check word  
0068			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
0068			  
0068			; keyscan table needs rows x cols buffer  
0068			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
0068			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
0068			  
0068			keyscan_table_row1: equ chk_stovr -key_cols-1  
0068			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
0068			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
0068			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
0068			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
0068			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
0068			keyscan_scancol: equ keyscan_table-key_cols  
0068			;keyscan_table_len: equ key_rows*key_cols  
0068			;keybufptr: equ keyscan_table - 2  
0068			;keysymbol: equ keybufptr - 1  
0068			key_held: equ keyscan_scancol-1	; currently held  
0068			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
0068			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
0068			key_fa: equ key_repeat_ct -1 ;  
0068			key_fb: equ key_fa -1 ;  
0068			key_fc: equ key_fb -1 ;  
0068			key_fd: equ key_fc -1 ;  
0068			key_face_held: equ key_fd - 1   
0068			  
0068			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
0068			  
0068			hardware_config: equ key_face_held - 10  
0068			  
0068			; hardware config switches  
0068			; TODO add bitmasks on includes for hardware  
0068			; high byte for expansion ids  
0068			;     0000 0000  no card inserted  
0068			;     0000 0001  storage card inserted  
0068			;     0000 0010  spi sd card active  
0068			  
0068			;       
0068			; low byte:  
0068			;     0000 0001   4x4 keypad  
0068			;     0000 0010   full keyboard  
0068			;     0000 0011   spi/ext keyboard  
0068			;     0000 0100   20x4 lcd  
0068			;     0000 1000   40x4 lcd  
0068			;     0000 1100   spi/ext display  
0068			;     0001 0000   ide interface available  
0068			  
0068			hardware_word: equ hardware_config - 2  
0068			  
0068			; debug marker - optional display of debug point on the debug screens  
0068			  
0068			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
0068			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
0068			  
0068			debug_mark: equ debug_vector - 4  
0068			  
0068			; input_str vars  
0068			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
0068			input_start:  equ input_ptr - 2    ; ptr to the start of string   
0068			input_size: equ input_start -1  ; number of chars  
0068			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
0068			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
0068			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
0068			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
0068			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
0068			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
0068			input_len: equ input_cur_onoff - 5 ; length of current input  
0068			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
0068			  
0068			CUR_BLINK_RATE: equ 15  
0068			  
0068			key_actual_pressed: equ input_cursor - 1   
0068			key_symbol: equ key_actual_pressed - 1   
0068			key_shift: equ key_symbol - 1   
0068			  
0068			; Display allocation  
0068			  
0068			;display_rows: equ 4     ; move out to mini and mega files  
0068			;display_cols: equ 20  
0068			  
0068			display_fb_len: equ display_rows*display_cols  
0068			  
0068			; primary frame buffer     
0068			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
0068			; working frame buffers  
0068			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
0068			display_fb3: equ  display_fb1-display_fb_len - 1  
0068			display_fb2: equ  display_fb3-display_fb_len - 1  
0068			;  
0068			; pointer to active frame buffer  
0068			display_fb_active: equ display_fb2 - 2  
0068			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
0068			display_write_tmp: equ display_lcde1e2 - 2  
0068			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
0068			  
0068			;  
0068			  
0068			;; can load into de directory  
0068			cursor_col: equ display_active-1  
0068			cursor_row: equ cursor_col-1  
0068			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
0068			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
0068			  
0068			; maths vars  
0068			  
0068			LFSRSeed: equ cursor_shape -20   
0068			randData: equ LFSRSeed - 2  
0068			xrandc: equ randData - 2  
0068			stackstore: equ xrandc - 2  
0068			seed1: equ  stackstore -2   
0068			seed2: equ seed1 - 2  
0068			  
0068			; cf storage vars  
0068			  
0068			iErrorNum:  equ seed2-1         ;Error number  
0068			iErrorReg:  equ iErrorNum -1              ;Error register  
0068			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
0068			  
0068			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
0068			  
0068			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
0068			  
0068			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
0068			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
0068			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
0068			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
0068			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
0068			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
0068			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
0068			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
0068			store_tmpid: equ store_tmp3 - 1		; page temp id  
0068			store_tmpext: equ store_tmpid - 1		; file extent temp  
0068			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
0068			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
0068			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
0068			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
0068			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
0068			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
0068			;  
0068			; spi vars  
0068			  
0068			  
0068			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
0068			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
0068			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
0068			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
0068			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
0068			spi_device_id: equ spi_device - 1    ; human readable bank number  
0068			  
0068			;;;;; forth cli params  
0068			  
0068			; TODO use a different frame buffer for forth???  
0068			  
0068			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
0068			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
0068			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
0068			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
0068			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
0068			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
0068			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
0068			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
0068			  
0068			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
0068			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
0068			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
0068			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
0068			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
0068			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
0068			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
0068			  
0068			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
0068			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
0068			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
0068			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
0068			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
0068			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
0068			chk_data_ovr: equ cli_data_stack -2; overflow check word  
0068			  
0068			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
0068			  
0068			; os/forth token vars  
0068			  
0068			os_last_cmd: equ os_var_array-255  
0068			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
0068			os_current_i: equ os_cli_cmd-2  
0068			os_cur_ptr: equ os_current_i-2  
0068			os_word_scratch: equ os_cur_ptr-30  
0068			os_tok_len: equ os_word_scratch - 2  
0068			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
0068			os_tok_malloc: equ os_tok_ptr - 2  
0068			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
0068			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
0068			execscratch: equ os_input-255        ; exec cmd eval buffer  
0068			scratch: equ execscratch-255  
0068			  
0068			os_stack_1: equ scratch - 3       ; stack holding area 1  
0068			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
0068			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
0068			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
0068			  
0068			  
0068			; temp locations for new word processing to save on adding more   
0068			  
0068			os_new_malloc: equ os_stack_4-2  
0068			os_new_parse_len: equ os_new_malloc - 2  
0068			os_new_word_len: equ os_new_parse_len - 2  
0068			os_new_work_ptr: equ os_new_word_len - 2  
0068			os_new_src_ptr: equ os_new_work_ptr - 2  
0068			os_new_exec: equ os_new_src_ptr - 2  
0068			os_new_exec_ptr: equ os_new_exec - 2  
0068			  
0068			; resume memory alloocations....  
0068			  
0068			;os_view_disable: equ os_new_exec_ptr - 1  
0068			os_view_af: equ os_new_exec_ptr - 2  
0068			os_view_hl: equ os_view_af -2  
0068			os_view_de: equ os_view_hl - 2  
0068			os_view_bc: equ os_view_de - 2  
0068			  
0068			; stack checksum word  
0068			if DEBUG_STACK_IMB  
0068				curframe: equ  os_view_de - 5  
0068				store_sp: equ curframe - (STACK_IMB_STORE*4)  
0068				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
0068			else  
0068				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
0068			endif  
0068			  
0068			; with data stack could see memory filled with junk. need some memory management   
0068			; malloc and free entry points added  
0068			  
0068			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
0068			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
0068			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
0068			;heap_end: equ free_list-1  ; Starting address of heap  
0068			;heap_start: equ free_list - heap_size  ; Starting address of heap  
0068			  
0068			;heap_start: equ free_list - heap_size  ; Starting address of heap  
0068			heap_end: equ chk_word-1  ; Starting address of heap  
0068			  
0068			  
0068			;if BASE_KEV   
0068			;heap_start: equ 0800eh  ; Starting address of heap  
0068			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
0068			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
0068			;endif  
0068			  
0068			;if BASE_SC114  
0068			;heap_start: equ baseram+15  ; Starting address of heap  
0068			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
0068			;endif  
0068			  
0068			  
0068			;;;;  
0068			  
0068			  
0068			; change below to point to last memory alloc above  
0068			topusermem:  equ   heap_start  
0068			  
0068			;if BASE_KEV   
0068			;baseusermem: equ 08000h  
0068			;endif  
0068			  
0068			;if BASE_SC114  
0068			;;aseusermem:     equ    12  
0068			;baseusermem:     equ    prompt  
0068			;;baseusermem:     equ    endofcode  
0068			;endif  
0068			  
0068			  
0068			; **********************************************************************  
0068			; **  Constants  
0068			; **********************************************************************  
0068			  
0068			; Constants used by this code module  
0068			kDataReg:   EQU Device_D           ;PIO port A data register  
0068			kContReg:   EQU Device_D+2           ;PIO port A control register  
0068			  
0068			  
0068			portbdata:  equ Device_D+1    ; port b data  
0068			portbctl:   equ Device_D+3    ; port b control  
0068			  
0068			  
0068			;KEY_SHIFT:   equ 5  
0068			;KEY_SYMBOLSHIFT:  equ 6  
0068			  
0068			KEY_SHIFTLOCK: equ 4  
0068			  
0068			  
0068			KEY_UP: equ 5  
0068			KEY_NEXTWORD: equ 6  
0068			KEY_PREVWORD: equ 7  
0068			KEY_BS: equ 8  
0068			KEY_TAB:  equ 9  
0068			KEY_DOWN: equ 10  
0068			KEY_LEFT: equ 11  
0068			KEY_RIGHT: equ 12  
0068			KEY_CR:   equ 13  
0068			KEY_HOME: equ 14  
0068			KEY_END: equ 15  
0068			  
0068			KEY_F1: equ 16  
0068			KEY_F2: equ 17  
0068			KEY_F3: equ 18  
0068			KEY_F4: equ 19  
0068			  
0068			KEY_F5: equ 20  
0068			KEY_F6: equ 21  
0068			KEY_F7: equ 22  
0068			KEY_F8: equ 23  
0068			  
0068			KEY_F9: equ 24  
0068			KEY_F10: equ 25  
0068			KEY_F11: equ 26  
0068			KEY_F12: equ 27  
0068			  
0068			;if DEBUG_KEY  
0068			;	KEY_MATRIX_NO_PRESS: equ '.'  
0068			;	KEY_SHIFT:   equ '.'  
0068			;	KEY_SYMBOLSHIFT:  equ '.'  
0068			;else  
0068				KEY_SHIFT:   equ '~'  
0068				KEY_SYMBOLSHIFT:  equ '~'  
0068				KEY_MATRIX_NO_PRESS: equ '~'  
0068			;endi  
0068			  
0068			  
0068			  
0068			  
0068			; Macro to make adding debug marks easier  
0068			  
0068			DMARK: macro str  
0068				push af  
0068				ld a, (.dmark)  
0068				ld (debug_mark),a  
0068				ld a, (.dmark+1)  
0068				ld (debug_mark+1),a  
0068				ld a, (.dmark+2)  
0068				ld (debug_mark+2),a  
0068				jr .pastdmark  
0068			.dmark: db str  
0068			.pastdmark: pop af  
0068			  
0068			endm  
0068			  
0068			  
0068			; macro to detect for stack imbalances  
0068			  
0068			include "stackimbal.asm"  
0068			; Macro and code to detect stock imbalances 
0068			 
0068			SPPUSH: equ 0 
0068			 
0068			; Add a stack frame which can be checked before return 
0068			 
0068			STACKFRAME: macro onoff frame1 frame2 
0068			 
0068				if DEBUG_STACK_IMB 
0068					if onoff 
0068						; save current SP 
0068						exx 
0068			 
0068						ld de, frame1 
0068						ld a, d 
0068						ld hl, curframe 
0068						call hexout 
0068						ld a, e 
0068						ld hl, curframe+2 
0068						call hexout 
0068			  
0068						ld hl, frame1 
0068						push hl 
0068						ld hl, frame2 
0068						push hl 
0068						exx 
0068					endif 
0068					 
0068				endif 
0068			endm 
0068			 
0068			STACKFRAMECHK: macro onoff frame1 frame2 
0068			 
0068					 
0068				if DEBUG_STACK_IMB 
0068					if onoff 
0068						exx 
0068						; check stack frame SP 
0068			 
0068						ld hl, frame2 
0068						pop de   ; frame2 
0068			 
0068						call cmp16 
0068						jr nz, .spnosame 
0068						 
0068			 
0068						ld hl, frame1 
0068						pop de   ; frame1 
0068			 
0068						call cmp16 
0068						jr z, .spfrsame 
0068			 
0068						.spnosame: call showsperror 
0068			 
0068						.spfrsame: nop 
0068			 
0068						exx 
0068					endif 
0068					 
0068				endif 
0068			 
0068			 
0068			endm 
0068			 
0068			 
0068			; for a sub routine, wrap SP collection and comparisons 
0068			 
0068			; Usage: 
0068			; 
0068			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
0068			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
0068			 
0068			SAVESP: macro onoff storeword 
0068			 
0068				if DEBUG_STACK_IMB 
0068					if onoff 
0068						; save current SP 
0068			 
0068						ld (store_sp+(storeword*4)), sp 
0068			 
0068					endif 
0068					 
0068				endif 
0068			 
0068			endm 
0068			 
0068			CHECKSP: macro onoff storeword 
0068			 
0068				if DEBUG_STACK_IMB 
0068					if onoff 
0068			 
0068						; save SP after last save 
0068				 
0068						ld (store_sp+(storeword*4)+2), sp 
0068			 
0068						push hl 
0068						ld hl, store_sp+(storeword*4) 
0068						call check_stack_sp  
0068						pop hl 
0068			 
0068			 
0068					endif 
0068					 
0068				endif 
0068			 
0068			endm 
0068			 
0068			if DEBUG_STACK_IMB 
0068			 
0068			check_stack_sp: 
0068					push de 
0068			 
0068					ld e, (hl) 
0068					inc hl 
0068					ld d, (hl) 
0068					inc hl 
0068			 
0068					push de 
0068			 
0068			 
0068					ld e, (hl) 
0068					inc hl 
0068					ld d, (hl) 
0068					inc hl 
0068			 
0068					pop hl 
0068			 
0068			 
0068					; check to see if the same 
0068			 
0068					call cmp16 
0068					jr z, .spsame 
0068			 
0068					; not same 
0068			 
0068					call showsperror 
0068			.spsame: 
0068			 
0068					pop de 
0068			 
0068					ret 
0068			 
0068			.sperr:  db "Stack imbalance",0 
0068			 
0068			 
0068			showsperror: 
0068			 
0068			 
0068				push hl 
0068				push af 
0068				push de 
0068				call clear_display 
0068				ld de, .sperr 
0068				ld a,0 
0068			;	ld de,os_word_scratch 
0068				call str_at_display 
0068				ld a, display_row_1+17 
0068				ld de, debug_mark 
0068				call str_at_display 
0068				ld a, 0 
0068				ld (curframe+4),a 
0068				ld hl, curframe 
0068				ld de, os_word_scratch 
0068				ld a, display_row_4 
0068				call str_at_display 
0068				call update_display 
0068				;call break_point_state 
0068				call cin_wait 
0068			 
0068			;	ld a, ' ' 
0068			;	ld (os_view_disable), a 
0068				call bp_on 
0068				pop de	 
0068				pop af 
0068				pop hl 
0068				CALLMONITOR 
0068				ret 
0068			 
0068			endif 
0068			 
0068			 
0068			 
0068			; eof 
# End of file stackimbal.asm
0068			  
0068			;TODO macro to calc col and row offset into screen  
0068			  
0068			  
0068			  
0068			hardware_init:  
0068			  
0068				  
0068			  
0068					;ld a, 0  
0068					;ld (hardware_diag), a  
0068			  
0068					; clear all the buffers  
0068			  
0068 21 0d fd				ld hl, display_fb1  
006b 22 c9 fb				ld (display_fb_active), hl  
006e			  
006e cd 9b 0d				call clear_display  
0071			  
0071 21 cb fb				ld hl, display_fb2  
0074 22 c9 fb				ld (display_fb_active), hl  
0077			  
0077 cd 9b 0d				call clear_display  
007a			  
007a					; init primary frame buffer area  
007a 21 ae fd				ld hl, display_fb0  
007d 22 c9 fb				ld (display_fb_active), hl  
0080			  
0080 cd 9b 0d				call clear_display  
0083			  
0083			  
0083 cd a1 76				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
0086			  
0086 cd 38 79			call key_init  
0089 cd 47 02			call storage_init  
008c			  
008c				; setup malloc functions  
008c			  
008c				if MALLOC_1  
008c cd 72 14				call  heap_init  
008f				endif  
008f				if MALLOC_4  
008f					call  heap_init  
008f				endif  
008f			  
008f				; init sound hardware if present  
008f			  
008f				if SOUND_ENABLE  
008f					call sound_init  
008f				endif  
008f			  
008f				; lcd test sequence  
008f					  
008f cd be 0d			call update_display  
0092 cd de 0c			call delay1s  
0095 3e 2b			ld a,'+'  
0097 cd a0 0d			call fill_display  
009a cd be 0d			call update_display  
009d cd de 0c			call delay1s  
00a0 3e 2a			ld a,'*'  
00a2 cd a0 0d			call fill_display  
00a5 cd be 0d			call update_display  
00a8 cd de 0c			call delay1s  
00ab 3e 2d			ld a,'-'  
00ad cd a0 0d			call fill_display  
00b0 cd be 0d			call update_display  
00b3 cd de 0c			call delay1s  
00b6			  
00b6			; boot splash screen  
00b6			if display_cols == 20	  
00b6			        ld a, display_row_1    
00b6			else  
00b6 3e 0a		        ld a, display_row_1 +10   
00b8			endif  
00b8 11 10 1c			ld de, prom_bootmsg  
00bb cd ae 0d			call str_at_display  
00be cd be 0d			call update_display  
00c1			  
00c1			  
00c1 cd de 0c			call delay1s  
00c4 cd de 0c			call delay1s  
00c7			if display_cols == 20	  
00c7			            LD   A, display_row_3+2  
00c7			else  
00c7 3e 5c		            LD   A, display_row_3+12  
00c9			endif  
00c9 11 25 1c			ld de, prom_bootmsg1  
00cc cd ae 0d			call str_at_display  
00cf cd be 0d			call update_display  
00d2 cd de 0c			call delay1s  
00d5 cd de 0c			call delay1s  
00d8			  
00d8			;	ld a, display_row_4+3  
00d8			;	ld de, bootmsg2  
00d8			;	call str_at_display  
00d8			;	call update_display  
00d8			;	call delay1s  
00d8			;	call delay1s  
00d8			  
00d8			; debug mark setup  
00d8			  
00d8 3e 5f		ld a, '_'  
00da 32 68 fe		ld (debug_mark),a  
00dd 32 69 fe		ld (debug_mark+1),a  
00e0 32 6a fe		ld (debug_mark+2),a  
00e3 3e 00		ld a,0  
00e5 32 6b fe		ld (debug_mark+3),a  
00e8			  
00e8 c9					ret  
00e9			  
00e9			  
00e9			;bootmsg2:	db "Firmware v0.1",0  
00e9			  
00e9			; a 4x20 lcd  
00e9			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00e9			  
00e9			;if display_cols == 20  
00e9			;	include "firmware_lcd_4x20.asm"  
00e9			;endif  
00e9			  
00e9			;if display_cols == 40  
00e9			;	include "firmware_lcd_4x40.asm"  
00e9			;endif  
00e9			  
00e9			;  
00e9			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00e9			; TODO abstract the bit bang video out interface for dual display  
00e9			; TODO wire video out to tx pin on rc2014 bus  
00e9			  
00e9			; must supply cin, and cin_wait for low level hardware abstraction   
00e9			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00e9			; test scancode  
00e9			  
00e9			;;;;;  
00e9			;;;  
00e9			; Moved out to mini and maxi versions  
00e9			;  
00e9			; include "firmware_key_4x4.asm"  
00e9			; using existing 4 wire x 4 resistor array for input  
00e9			;include "firmware_key_4x10.asm"  
00e9			; need to mod the board for 5 rows due to resistor array  
00e9			;include "firmware_key_5x10.asm"  
00e9			  
00e9			; storage hardware interface  
00e9			  
00e9			; use microchip serial eeprom for storage  
00e9			  
00e9			  
00e9			if STORAGE_SE  
00e9				include "firmware_spi.asm"  
00e9			; my spi protocol (used by storage) 
00e9			 
00e9			; SPI pins 
00e9			 
00e9			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00e9			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00e9			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00e9			 
00e9			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00e9			; chip pin 4 gnd 
00e9			 
00e9			 
00e9			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00e9			SPI_CE1: equ 1      ;    port a1 pin 14  
00e9			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00e9			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00e9			SPI_CE4: equ 4      ; port a4     pin 10 
00e9			 
00e9			; active low AND masks 
00e9			 
00e9			;SPI_CE0_MASK: equ    255-1 
00e9			;SPI_CE1_MASK: equ   255-2 
00e9			;SPI_CE2_MASK: equ   255-4 
00e9			;SPI_CE3_MASK: equ   255-8 
00e9			;SPI_CE4_MASK: equ   255-16 
00e9			SPI_CE_HIGH:  equ 255 
00e9			 
00e9			 
00e9			 
00e9			;  Perform SCLK wait pulse 
00e9			 
00e9			spi_clk: 
00e9 f5				push af 
00ea 3a 61 fa			ld a, (spi_clktime) 
00ed fe 00			cp 0 
00ef 28 03			jr z, .scskip 
00f1 cd c3 0c			call aDelayInMS 
00f4			.scskip: 
00f4 f1				pop af 
00f5 c9				ret 
00f6			 
00f6			 
00f6			 
00f6			; TODO store port id for spi device ie dev c 
00f6			; TODO store pin for SO 
00f6			; TODO store pin for SI 
00f6			; TODO store pin for SCLK 
00f6			 
00f6			; 
00f6			 
00f6			; ensure that spi bus is in a stable state with default pins  
00f6			 
00f6			se_stable_spi:   
00f6			 
00f6				 ; set DI high, CE high , SCLK low 
00f6				;ld a, SPI_DI | SPI_CE0 
00f6 3e 07			ld a, SPI_DI  
00f8 cd 02 02			call spi_ce_high 
00fb d3 80			 out (storage_adata),a 
00fd 32 5e fa			ld (spi_portbyte),a 
0100			 
0100				if DEBUG_SPI 
0100					push hl 
0100					ld l, a 
0100					DMARK "SPI" 
0100					CALLMONITOR 
0100					pop hl 
0100				endif 
0100 c9				ret 
0101			 
0101			; byte to send in a 
0101			 
0101			spi_send_byte: 
0101				; save byte to send for bit mask shift out 
0101 4f			        ld c,a 
0102 3a 5e fa			ld a,(spi_portbyte) 
0105				  
0105				; clock out	each bit of the byte msb first 
0105			 
0105 06 08			ld b, 8 
0107			.ssb1: 
0107				; clear so bit  
0107 cb bf			res SPI_DI, a 
0109 cb 11			rl c 
010b				; if bit 7 is set then carry is set 
010b 30 02			jr nc, .ssb2 
010d cb ff			set SPI_DI,a 
010f			.ssb2:  ; output bit to ensure it is stable 
010f d3 80			out (storage_adata),a 
0111 00				nop 
0112				; clock bit high 
0112 cb ef			set SPI_SCLK,a 
0114 d3 80			out (storage_adata),a 
0116 00				nop 
0117 cd e9 00			call spi_clk 
011a				; then low 
011a cb af			res SPI_SCLK,a 
011c d3 80			out (storage_adata),a 
011e 00				nop 
011f cd e9 00			call spi_clk 
0122 10 e3			djnz .ssb1 
0124			 
0124 32 5e fa			ld (spi_portbyte),a 
0127 c9				ret 
0128			 
0128			; TODO low level get byte into A on spi 
0128			 
0128			spi_read_byte:  
0128			 
0128				; save byte to send for bit mask shift out 
0128 0e 00		    ld c,0 
012a 3a 5e fa			ld a,(spi_portbyte) 
012d				  
012d				; clock out	each bit of the byte msb first 
012d			 
012d			 
012d				; clock bit high 
012d cb ef			set SPI_SCLK,a 
012f d3 80			out (storage_adata),a 
0131 00				nop 
0132 cd e9 00			call spi_clk 
0135			 
0135			    ; read DO  
0135			 
0135 cb f9		    set 7,c 
0137 db 80			in a,(storage_adata) 
0139 cb 77		    bit SPI_DO,a 
013b 20 02		    jr nz, .b7 
013d cb b9		    res 7,c 
013f			.b7: 
013f				; then low 
013f cb af			res SPI_SCLK,a 
0141 d3 80			out (storage_adata),a 
0143 00				nop 
0144 cd e9 00			call spi_clk 
0147			     
0147			 
0147				; clock bit high 
0147 cb ef			set SPI_SCLK,a 
0149 d3 80			out (storage_adata),a 
014b 00				nop 
014c cd e9 00			call spi_clk 
014f			 
014f			    ; read DO  
014f			 
014f cb f1		    set 6,c 
0151 db 80			in a,(storage_adata) 
0153 cb 77		    bit SPI_DO,a 
0155 20 02		    jr nz, .b6 
0157 cb b1		    res 6,c 
0159			.b6: 
0159				; then low 
0159 cb af			res SPI_SCLK,a 
015b d3 80			out (storage_adata),a 
015d 00				nop 
015e cd e9 00			call spi_clk 
0161			 
0161				; clock bit high 
0161 cb ef			set SPI_SCLK,a 
0163 d3 80			out (storage_adata),a 
0165 00				nop 
0166 cd e9 00			call spi_clk 
0169			 
0169			 
0169			    ; read DO  
0169			 
0169 cb e9		    set 5,c 
016b db 80			in a,(storage_adata) 
016d cb 77		    bit SPI_DO,a 
016f 20 02		    jr nz, .b5 
0171 cb a9		    res 5,c 
0173			.b5: 
0173				; then low 
0173 cb af			res SPI_SCLK,a 
0175 d3 80			out (storage_adata),a 
0177 00				nop 
0178 cd e9 00			call spi_clk 
017b				; clock bit high 
017b cb ef			set SPI_SCLK,a 
017d d3 80			out (storage_adata),a 
017f 00				nop 
0180 cd e9 00			call spi_clk 
0183			 
0183			    ; read DO  
0183			 
0183 cb e1		    set 4,c 
0185 db 80			in a,(storage_adata) 
0187 cb 77		    bit SPI_DO,a 
0189 20 02		    jr nz, .b4 
018b cb a1		    res 4,c 
018d			.b4: 
018d				; then low 
018d cb af			res SPI_SCLK,a 
018f d3 80			out (storage_adata),a 
0191 00				nop 
0192 cd e9 00			call spi_clk 
0195				; clock bit high 
0195 cb ef			set SPI_SCLK,a 
0197 d3 80			out (storage_adata),a 
0199 00				nop 
019a cd e9 00			call spi_clk 
019d			 
019d			    ; read DO  
019d			 
019d cb d9		    set 3,c 
019f db 80			in a,(storage_adata) 
01a1 cb 77		    bit SPI_DO,a 
01a3 20 02		    jr nz, .b3 
01a5 cb 99		    res 3,c 
01a7			.b3: 
01a7				; then low 
01a7 cb af			res SPI_SCLK,a 
01a9 d3 80			out (storage_adata),a 
01ab 00				nop 
01ac cd e9 00			call spi_clk 
01af				; clock bit high 
01af cb ef			set SPI_SCLK,a 
01b1 d3 80			out (storage_adata),a 
01b3 00				nop 
01b4 cd e9 00			call spi_clk 
01b7			 
01b7			    ; read DO  
01b7			 
01b7 cb d1		    set 2,c 
01b9 db 80			in a,(storage_adata) 
01bb cb 77		    bit SPI_DO,a 
01bd 20 02		    jr nz, .b2 
01bf cb 91		    res 2,c 
01c1			.b2: 
01c1				; then low 
01c1 cb af			res SPI_SCLK,a 
01c3 d3 80			out (storage_adata),a 
01c5 00				nop 
01c6 cd e9 00			call spi_clk 
01c9				; clock bit high 
01c9 cb ef			set SPI_SCLK,a 
01cb d3 80			out (storage_adata),a 
01cd 00				nop 
01ce cd e9 00			call spi_clk 
01d1			 
01d1			    ; read DO  
01d1			 
01d1 cb c9		    set 1,c 
01d3 db 80			in a,(storage_adata) 
01d5 cb 77		    bit SPI_DO,a 
01d7 20 02		    jr nz, .b1 
01d9 cb 89		    res 1,c 
01db			.b1: 
01db				; then low 
01db cb af			res SPI_SCLK,a 
01dd d3 80			out (storage_adata),a 
01df 00				nop 
01e0 cd e9 00			call spi_clk 
01e3				; clock bit high 
01e3 cb ef			set SPI_SCLK,a 
01e5 d3 80			out (storage_adata),a 
01e7 00				nop 
01e8 cd e9 00			call spi_clk 
01eb			 
01eb			    ; read DO  
01eb			 
01eb cb c1		    set 0,c 
01ed db 80			in a,(storage_adata) 
01ef cb 77		    bit SPI_DO,a 
01f1 20 02		    jr nz, .b0 
01f3 cb 81		    res 0,c 
01f5			.b0: 
01f5				; then low 
01f5 cb af			res SPI_SCLK,a 
01f7 d3 80			out (storage_adata),a 
01f9 00				nop 
01fa cd e9 00			call spi_clk 
01fd			 
01fd			 
01fd 32 5e fa			ld (spi_portbyte),a 
0200			 
0200			    ; return byte 
0200 79			    ld a,c 
0201			 
0201			 
0201 c9				ret 
0202			 
0202			 
0202			 
0202			spi_ce_high: 
0202			 
0202				if DEBUG_SPI_HARD_CE0 
0202			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0202					ret 
0202			 
0202				endif 
0202			 
0202			 
0202 f5				push af 
0203			 
0203				; send direct ce to port b 
0203 3e ff			ld a, 255 
0205 d3 81			out (storage_bdata), a 
0207			 
0207 f1				pop af 
0208			 
0208				; for port a that shares with spi lines AND the mask 
0208			  
0208				if DEBUG_SPI 
0208					push hl 
0208					ld h, a 
0208				endif 
0208			;	ld c, SPI_CE_HIGH 
0208			;	and c 
0208 cb c7			set SPI_CE0, a 
020a cb cf			set SPI_CE1, a 
020c cb d7			set SPI_CE2, a 
020e cb df			set SPI_CE3, a 
0210 cb e7			set SPI_CE4, a 
0212			 
0212				if DEBUG_SPI 
0212					ld l, a 
0212					DMARK "CEh" 
0212					CALLMONITOR 
0212					pop hl 
0212				endif 
0212 c9				ret 
0213			 
0213			 
0213			spi_ce_low: 
0213			 
0213				if DEBUG_SPI_HARD_CE0 
0213			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0213					ret 
0213			 
0213				endif 
0213			 
0213 c5				push bc 
0214 f5				push af 
0215			 
0215				; send direct ce to port b 
0215 3a 60 fa			ld a, (spi_cartdev) 
0218 d3 81			out (storage_bdata), a 
021a			 
021a			 
021a			 
021a				; for port a that shares with spi lines AND the mask 
021a			 
021a 3a 5d fa			ld a, (spi_device)  
021d 4f				ld c, a 
021e			 
021e f1				pop af 
021f			 
021f				; detect CEx 
021f			 
021f				if DEBUG_SPI 
021f					push hl 
021f					ld h, a 
021f				endif 
021f			 
021f cb 41			bit SPI_CE0, c 
0221 20 04			jr nz, .cel1 
0223 cb 87			res SPI_CE0, a 
0225 18 1e			jr .celn 
0227			.cel1: 
0227 cb 49			bit SPI_CE1, c 
0229 20 04			jr nz, .cel2 
022b cb 8f			res SPI_CE1, a 
022d 18 16			jr .celn 
022f			.cel2: 
022f cb 51			bit SPI_CE2, c 
0231 20 04			jr nz, .cel3 
0233 cb 97			res SPI_CE2, a 
0235 18 0e			jr .celn 
0237			.cel3: 
0237 cb 59			bit SPI_CE3, c 
0239 20 04			jr nz, .cel4 
023b cb 9f			res SPI_CE3, a 
023d 18 06			jr .celn 
023f			.cel4: 
023f cb 61			bit SPI_CE4, c 
0241 20 02			jr nz, .celn 
0243 cb a7			res SPI_CE4, a 
0245			.celn: 
0245			 
0245			 
0245			 
0245			;	add c 
0245			 
0245				if DEBUG_SPI 
0245					ld l, a 
0245					DMARK "CEl" 
0245					CALLMONITOR 
0245					pop hl 
0245				endif 
0245 c1				pop bc 
0246 c9				ret 
0247			 
0247			 
0247			 
0247			; eof 
0247			 
0247			 
0247			 
0247			 
0247			 
# End of file firmware_spi.asm
0247				include "firmware_seeprom.asm"  
0247			; 
0247			; persisent storage interface via microchip serial eeprom 
0247			 
0247			; port a pio 2 
0247			; pa 7 - si 
0247			; pa 6 - sclk  
0247			; pa 5 - so 
0247			; pa 4 - cs 
0247			; pa 3 - cs 
0247			; pa 2 - cs 
0247			; pa 1 - cs 
0247			; pa 0 - cs 
0247			; 
0247			; TODO get block 
0247			; TODO save block 
0247			; TODO load file 
0247			; TODO save file 
0247			; TODO get dir  
0247			 
0247			;  
0247			storage_adata: equ Device_C    ; device c port a - onboard storage 
0247			storage_actl: equ Device_C+2     ; device c port a 
0247			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0247			storage_bctl: equ Device_C+3     ; device c port b 
0247			 
0247			 
0247			; TODO move these to hardware driver file 
0247			 
0247			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0247			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0247			; storage bank file system format 
0247			; 
0247			; first page of bank: 
0247			; 	addr 0 - status check 
0247			;       addr 1 - write protect flag 
0247			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0247			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0247			;         TODO see if scanning whole of for available next file id is fast enough 
0247			;	addr 4 > zero term string of bank label 
0247			; 
0247			;        
0247			;  
0247			; first page of any file: 
0247			;      byte 0 - file id  
0247			;      byte 1-17 - fixed file name  
0247			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0247			; 
0247			; other pages of any file: 
0247			;      byte 0 - file id 
0247			;      byte 1> - file data 
0247			; 
0247			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0247			;  
0247			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0247			 
0247			 
0247			;storage_so_bit: 5 
0247			;storage_si_bit: 7 
0247			;storage_sclk_bit: 6 
0247			  
0247			 
0247			; init storage pio 
0247			 
0247			storage_init: 
0247			 
0247			 
0247					; set default SPI clk pulse time as disabled 
0247			 
0247 3e 00				ld a, 0 
0249 32 61 fa				ld (spi_clktime), a 
024c			 
024c					; init hardware 
024c			 
024c 3e cf		            LD   A, 11001111b 
024e d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
0250 3e 00		            LD   A, 00000000b 
0252 cb f7			set SPI_DO,a 
0254			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
0254 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0256			 
0256 3e cf		            LD   A, 11001111b 
0258 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
025a 3e 00		            LD   A, 00000000b 
025c d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
025e			 
025e				; set all external spi devices off  
025e 3e ff			ld a, 255 
0260 32 5d fa			ld (spi_device), a 
0263 32 60 fa			ld (spi_cartdev), a 
0266			 
0266					; ensure the spi bus is in a default stable state 
0266 cd f6 00				call se_stable_spi 
0269			 
0269			; TODO scan spi bus and gather which storage banks are present 
0269			 
0269			; populate store_bank_active  
0269			; for each ce line activate and attempt to write first byte of bank and read back 
0269			; if zero is returned then bank is empty 
0269			;   
0269			; 
0269			 
0269					; init file extent cache to save on slow reads 
0269			 
0269			;	ld hl, store_filecache 
0269			;	ld de, 0 
0269			;	ld hl,(de)	 
0269			 
0269			 
0269 c9			    ret 
026a			 
026a			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
026a			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
026a			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
026a			 
026a			; INSTRUCTION SET 
026a			; READ 0000 0011 Read data from memory array beginning at selected address 
026a			; WRITE 0000 0010 Write data to memory array beginning at selected address 
026a			; WREN 0000 0110 Set the write enable latch (enable write operations) 
026a			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
026a			; RDSR 0000 0101 Read STATUS register 
026a			; WRSR 0000 0001 Write STATUS register 
026a			; PE 0100 0010 Page Erase – erase one page in memory array 
026a			; SE 1101 1000 Sector Erase – erase one sector in memory array 
026a			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
026a			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
026a			 
026a			; TODO send byte steam for page without setting the address for every single byte 
026a			; TODO read byte  
026a			 
026a			; byte in a 
026a			; address in hl  
026a			se_writebyte: 
026a			        
026a			    ;   ld c, a 
026a f5			        push af 
026b e5			        push hl 
026c			 
026c			    ; initi write mode 
026c			    ; 
026c			    ;CS low 
026c			 
026c 3a 5e fa		       ld a,(spi_portbyte) 
026f cd 13 02			call spi_ce_low 
0272			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0272 d3 80		       out (storage_adata),a 
0274 32 5e fa		       ld (spi_portbyte), a 
0277			 
0277			    ;clock out wren instruction 
0277			 
0277 3e 06		    ld a, store_wren_ins 
0279 cd 01 01		    call spi_send_byte  
027c			 
027c			    ;cs high to enable write latch 
027c			 
027c 3a 5e fa		       ld a,(spi_portbyte) 
027f cd 02 02			call spi_ce_high 
0282			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0282 d3 80		       out (storage_adata),a 
0284 32 5e fa		       ld (spi_portbyte), a 
0287			 
0287 00				nop 
0288			    ; 
0288			    ; intial write data 
0288			    ; 
0288			    ; cs low 
0288			     
0288 3a 5e fa		       ld a,(spi_portbyte) 
028b cd 13 02			call spi_ce_low 
028e			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
028e d3 80		       out (storage_adata),a 
0290 32 5e fa		       ld (spi_portbyte), a 
0293			 
0293			    ; clock out write instruction 
0293			     
0293 3e 02		    ld a, store_write_ins  
0295 cd 01 01		    call spi_send_byte  
0298			 
0298			    ; clock out address (depending on address size) 
0298			     
0298 e1			    pop hl 
0299 7c			    ld a,h    ; address out msb first 
029a cd 01 01		    call spi_send_byte  
029d 7d			    ld a,l 
029e cd 01 01		    call spi_send_byte  
02a1			 
02a1			    ; clock out byte(s) for page 
02a1			 
02a1 f1			    pop af 
02a2 cd 01 01		    call spi_send_byte  
02a5			 
02a5			    ; end write with ce high 
02a5 3a 5e fa		       ld a,(spi_portbyte) 
02a8			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02a8 cd 02 02			call spi_ce_high 
02ab d3 80		       out (storage_adata),a 
02ad 32 5e fa		       ld (spi_portbyte), a 
02b0			 
02b0				; pause for internal write cycle 
02b0 3e 0a			ld a, 10 
02b2 cd c3 0c			call aDelayInMS 
02b5 c9			    ret 
02b6			 
02b6			; buffer to write in de 
02b6			; address in hl  
02b6			se_writepage: 
02b6			        
02b6			    ;   ld c, a 
02b6 d5				push de 
02b7 e5			        push hl 
02b8			 
02b8			    ; initi write mode 
02b8			    ; 
02b8			    ;CS low 
02b8			 
02b8 3a 5e fa		       ld a,(spi_portbyte) 
02bb cd 13 02			call spi_ce_low 
02be			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02be d3 80		       out (storage_adata),a 
02c0 32 5e fa		       ld (spi_portbyte), a 
02c3			 
02c3			    ;clock out wren instruction 
02c3			 
02c3 3e 06		    ld a, store_wren_ins 
02c5 cd 01 01		    call spi_send_byte  
02c8			 
02c8			    ;cs high to enable write latch 
02c8			 
02c8 3a 5e fa		       ld a,(spi_portbyte) 
02cb cd 02 02			call spi_ce_high 
02ce			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02ce d3 80		       out (storage_adata),a 
02d0 32 5e fa		       ld (spi_portbyte), a 
02d3			 
02d3 00				nop 
02d4			    ; 
02d4			    ; intial write data 
02d4			    ; 
02d4			    ; cs low 
02d4			     
02d4 3a 5e fa		       ld a,(spi_portbyte) 
02d7			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02d7 cd 13 02			call spi_ce_low 
02da d3 80		       out (storage_adata),a 
02dc 32 5e fa		       ld (spi_portbyte), a 
02df			 
02df			    ; clock out write instruction 
02df			     
02df 3e 02		    ld a, store_write_ins  
02e1 cd 01 01		    call spi_send_byte  
02e4			 
02e4			    ; clock out address (depending on address size) 
02e4			     
02e4 e1			    pop hl 
02e5 7c			    ld a,h    ; address out msb first 
02e6 cd 01 01		    call spi_send_byte  
02e9 7d			    ld a,l 
02ea cd 01 01		    call spi_send_byte  
02ed			 
02ed			    ; clock out byte(s) for page 
02ed			 
02ed e1				pop hl 
02ee 06 40			ld b, STORE_BLOCK_PHY 
02f0			.bytewrite: 
02f0			 
02f0 7e				ld a,(hl) 
02f1 e5			    push hl 
02f2 c5				push bc 
02f3 cd 01 01		    call spi_send_byte  
02f6 c1				pop bc 
02f7 e1				pop hl 
02f8			 
02f8			    ; end write with ce high 
02f8 3a 5e fa		       ld a,(spi_portbyte) 
02fb cd 02 02			call spi_ce_high 
02fe			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02fe d3 80		       out (storage_adata),a 
0300 32 5e fa		       ld (spi_portbyte), a 
0303			 
0303 23				inc hl 
0304 10 ea			djnz .bytewrite 
0306			 
0306				; pause for internal write cycle 
0306 3e 64			ld a, 100 
0308 cd c3 0c			call aDelayInMS 
030b c9			    ret 
030c			; returns byte in a 
030c			; address in hl  
030c			se_readbyte: 
030c d5				push de 
030d c5				push bc 
030e			 
030e			    ;   ld c, a 
030e e5			        push hl 
030f			 
030f			    ; initi write mode 
030f			    ; 
030f			    ;CS low 
030f			 
030f 3a 5e fa		       ld a,(spi_portbyte) 
0312 cd 13 02			call spi_ce_low 
0315			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0315 d3 80		       out (storage_adata),a 
0317 32 5e fa		       ld (spi_portbyte), a 
031a			 
031a			    ;clock out wren instruction 
031a			 
031a 3e 03		    ld a, store_read_ins 
031c cd 01 01		    call spi_send_byte  
031f			 
031f			 
031f			    ; clock out address (depending on address size) 
031f			     
031f e1			    pop hl 
0320 7c			    ld a,h    ; address out msb first 
0321 cd 01 01		    call spi_send_byte  
0324 7d			    ld a,l 
0325 cd 01 01		    call spi_send_byte  
0328			 
0328			    ; clock in byte(s) for page 
0328			 
0328 cd 28 01		    call spi_read_byte  
032b f5				push af 
032c			 
032c			    ; end write with ce high 
032c 3a 5e fa		       ld a,(spi_portbyte) 
032f			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
032f cd 02 02			call spi_ce_high 
0332 d3 80		       out (storage_adata),a 
0334 32 5e fa		       ld (spi_portbyte), a 
0337			 
0337 f1				pop af 
0338			 
0338 c1				pop bc 
0339 d1				pop de 
033a			 
033a c9			    ret 
033b			 
033b			if DEBUG_STORESE 
033b			 
033b			storageput:  
033b			 
033b			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
033b			 
033b 21 c0 f1			ld hl,scratch+2 
033e cd 86 13			call get_word_hl 
0341			 
0341				; stuff it here for the moment as it will be overwritten later anyway 
0341			 
0341 22 e1 f4			ld (os_cur_ptr),hl	 
0344			 
0344			 
0344			; get pointer to start of string 
0344			 
0344 21 c5 f1			ld hl, scratch+7 
0347			 
0347			; loop writing char of string to eeprom 
0347			 
0347 7e			.writestr:	ld a,(hl) 
0348 fe 00				cp 0 
034a 28 12				jr z, .wsdone		; done writing 
034c e5					push hl 
034d 2a e1 f4				ld hl,(os_cur_ptr) 
0350 cd 6a 02				call se_writebyte 
0353			 
0353 2a e1 f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0356 23					inc hl 
0357 22 e1 f4				ld (os_cur_ptr),hl 
035a			 
035a					; restore string pointer and get next char 
035a			 
035a e1					pop hl 
035b 23					inc hl 
035c 18 e9				jr .writestr 
035e			 
035e			 
035e			 
035e			.wsdone: 
035e			 
035e			 
035e			; when done load first page into a buffer  
035e			 
035e 21 00 80				ld hl,08000h		; start in ram 
0361 22 e1 f4				ld (os_cur_ptr),hl 
0364 21 00 00				ld hl, 0		 ; start of page 
0367 22 e6 f1				ld (scratch+40),hl	; hang on to it 
036a			 
036a 06 80				ld b, 128		; actually get more then one page 
036c c5			.wsload:	push bc 
036d 2a e6 f1				ld hl,(scratch+40) 
0370 e5					push hl 
0371 cd 0c 03				call se_readbyte 
0374			 
0374					; a now as the byte 
0374			 
0374 2a e1 f4				ld hl,(os_cur_ptr) 
0377 77					ld (hl),a 
0378					; inc next buffer area 
0378 23					inc hl 
0379 22 e1 f4				ld (os_cur_ptr),hl 
037c			 
037c					; get eeprom position, inc and save for next round 
037c e1					pop hl		 
037d 23					inc hl 
037e 22 e6 f1				ld (scratch+40),hl 
0381 c1					pop bc 
0382 10 e8				djnz .wsload 
0384			 
0384			; set 'd' pointer to start of buffer 
0384			 
0384 21 00 80				ld hl,08000h 
0387 22 e1 f4				ld (os_cur_ptr),hl 
038a			 
038a			 
038a c9			ret 
038b			 
038b			 
038b c9			storageread: ret 
038c			 
038c			 
038c			 
038c			 
038c			 
038c			 
038c			endif 
038c			 
038c			 
038c			 
# End of file firmware_seeprom.asm
038c			else  
038c			   ; create some stubs for the labels  
038c			se_readbyte: ret  
038c			se_writebyte: ret  
038c			storage_init: ret  
038c			  
038c			endif  
038c			  
038c			; use cf card for storage - throwing timeout errors. Hardware or software?????  
038c			;include "firmware_cf.asm"  
038c			  
038c			; load up high level storage hardward abstractions  
038c			include "firmware_storage.asm"  
038c			 
038c			; persisent storage hardware abstraction layer  
038c			 
038c			 
038c			 
038c			; Block 0 on storage is a config state 
038c			 
038c			 
038c			 
038c			; TODO add read phy block and write phy block functions 
038c			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
038c			 
038c			; Abstraction layer  
038c			 
038c			; Logocial block size is same size as physical size - using tape concept 
038c			 
038c			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
038c			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
038c			 
038c			 
038c			 
038c			; Filesystem layout (Logical layout) 
038c			; 
038c			; Block 0 - Bank config  
038c			; 
038c			;      Byte - 0 file id counter 
038c			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
038c			;      Byte - 3-20 zero terminated bank label 
038c			; 
038c			; Block 1 > File storage 
038c			; 
038c			;      Byte 0 file id    - block 0 file details 
038c			;      Byte 1 block id - block 0 is file  
038c			;            Byte 2-15 - File name 
038c			; 
038c			;       - to end of block data 
038c			; 
038c			 
038c			; Get ID for the file named in pointer held HL 
038c			; Returns ID in HL = 255 if no file found 
038c			 
038c			storage_getid: 
038c			 
038c 22 70 fa			ld (store_tmp1), hl 
038f			 
038f				if DEBUG_STORESE 
038f					DMARK "SGI" 
038f f5				push af  
0390 3a a4 03			ld a, (.dmark)  
0393 32 68 fe			ld (debug_mark),a  
0396 3a a5 03			ld a, (.dmark+1)  
0399 32 69 fe			ld (debug_mark+1),a  
039c 3a a6 03			ld a, (.dmark+2)  
039f 32 6a fe			ld (debug_mark+2),a  
03a2 18 03			jr .pastdmark  
03a4 ..			.dmark: db "SGI"  
03a7 f1			.pastdmark: pop af  
03a8			endm  
# End of macro DMARK
03a8					CALLMONITOR 
03a8 cd 6c fe			call debug_vector  
03ab				endm  
# End of macro CALLMONITOR
03ab				endif 
03ab				; get block 0 and set counter for number of files to scan 
03ab			 
03ab cd 16 05			call storage_get_block_0 
03ae			 
03ae 3a 77 fa			ld a, (store_page) 
03b1 47				ld b, a 
03b2			 
03b2				; get extent 0 of each file id 
03b2			 
03b2				if DEBUG_STORESE 
03b2					DMARK "SGc" 
03b2 f5				push af  
03b3 3a c7 03			ld a, (.dmark)  
03b6 32 68 fe			ld (debug_mark),a  
03b9 3a c8 03			ld a, (.dmark+1)  
03bc 32 69 fe			ld (debug_mark+1),a  
03bf 3a c9 03			ld a, (.dmark+2)  
03c2 32 6a fe			ld (debug_mark+2),a  
03c5 18 03			jr .pastdmark  
03c7 ..			.dmark: db "SGc"  
03ca f1			.pastdmark: pop af  
03cb			endm  
# End of macro DMARK
03cb					CALLMONITOR 
03cb cd 6c fe			call debug_vector  
03ce				endm  
# End of macro CALLMONITOR
03ce				endif 
03ce 60			.getloop:	ld h, b 
03cf 2e 00				ld l, 0 
03d1 c5					push bc 
03d2			 
03d2 11 77 fa				ld de, store_page 
03d5				if DEBUG_STORESE 
03d5					DMARK "SGr" 
03d5 f5				push af  
03d6 3a ea 03			ld a, (.dmark)  
03d9 32 68 fe			ld (debug_mark),a  
03dc 3a eb 03			ld a, (.dmark+1)  
03df 32 69 fe			ld (debug_mark+1),a  
03e2 3a ec 03			ld a, (.dmark+2)  
03e5 32 6a fe			ld (debug_mark+2),a  
03e8 18 03			jr .pastdmark  
03ea ..			.dmark: db "SGr"  
03ed f1			.pastdmark: pop af  
03ee			endm  
# End of macro DMARK
03ee					CALLMONITOR 
03ee cd 6c fe			call debug_vector  
03f1				endm  
# End of macro CALLMONITOR
03f1				endif 
03f1 cd be 09				call storage_read 
03f4 cd f8 0f				call ishlzero 
03f7 28 2d				jr z, .gap 
03f9					 
03f9					; have a file name read. Is it one we want. 
03f9			 
03f9 2a 70 fa				ld hl, (store_tmp1) 
03fc 11 7a fa				ld de, store_page+3   ; file name 
03ff			 
03ff				if DEBUG_STORESE 
03ff					DMARK "SGc" 
03ff f5				push af  
0400 3a 14 04			ld a, (.dmark)  
0403 32 68 fe			ld (debug_mark),a  
0406 3a 15 04			ld a, (.dmark+1)  
0409 32 69 fe			ld (debug_mark+1),a  
040c 3a 16 04			ld a, (.dmark+2)  
040f 32 6a fe			ld (debug_mark+2),a  
0412 18 03			jr .pastdmark  
0414 ..			.dmark: db "SGc"  
0417 f1			.pastdmark: pop af  
0418			endm  
# End of macro DMARK
0418					CALLMONITOR 
0418 cd 6c fe			call debug_vector  
041b				endm  
# End of macro CALLMONITOR
041b				endif 
041b cd 65 14				call strcmp 
041e 20 06				jr nz, .gap   ; not this one 
0420			 
0420 c1				        pop bc 
0421			 
0421 26 00				ld h, 0 
0423 68					ld l, b 
0424 18 22				jr .getdone 
0426						 
0426			 
0426			 
0426			 
0426			.gap: 
0426				if DEBUG_STORESE 
0426					DMARK "SGg" 
0426 f5				push af  
0427 3a 3b 04			ld a, (.dmark)  
042a 32 68 fe			ld (debug_mark),a  
042d 3a 3c 04			ld a, (.dmark+1)  
0430 32 69 fe			ld (debug_mark+1),a  
0433 3a 3d 04			ld a, (.dmark+2)  
0436 32 6a fe			ld (debug_mark+2),a  
0439 18 03			jr .pastdmark  
043b ..			.dmark: db "SGg"  
043e f1			.pastdmark: pop af  
043f			endm  
# End of macro DMARK
043f					CALLMONITOR 
043f cd 6c fe			call debug_vector  
0442				endm  
# End of macro CALLMONITOR
0442				endif 
0442			 
0442 c1					pop bc 
0443 10 89				djnz .getloop 
0445 21 ff 00				ld hl, 255 
0448			.getdone: 
0448			 
0448				if DEBUG_STORESE 
0448					DMARK "SGe" 
0448 f5				push af  
0449 3a 5d 04			ld a, (.dmark)  
044c 32 68 fe			ld (debug_mark),a  
044f 3a 5e 04			ld a, (.dmark+1)  
0452 32 69 fe			ld (debug_mark+1),a  
0455 3a 5f 04			ld a, (.dmark+2)  
0458 32 6a fe			ld (debug_mark+2),a  
045b 18 03			jr .pastdmark  
045d ..			.dmark: db "SGe"  
0460 f1			.pastdmark: pop af  
0461			endm  
# End of macro DMARK
0461					CALLMONITOR 
0461 cd 6c fe			call debug_vector  
0464				endm  
# End of macro CALLMONITOR
0464				endif 
0464			 
0464 c9				ret 
0465			 
0465			 
0465			 
0465			 
0465			 
0465			 
0465			 
0465			 
0465			; Read Block 
0465			; ---------- 
0465			; 
0465			; With current bank 
0465			;  
0465			; Get block number to read 
0465			; Load physical blocks starting at start block into buffer 
0465			 
0465			; de points to buffer to use 
0465			; hl holds logical block number  
0465			 
0465			storage_read_block: 
0465			 
0465				; TODO bank selection 
0465			 
0465				; for each of the physical blocks read it into the buffer 
0465 06 40			ld b, STORE_BLOCK_PHY 
0467			 
0467				if DEBUG_STORESE 
0467 d5					push de 
0468				endif 
0468				 
0468			.rl1:    
0468			 
0468				; read physical block at hl into de 
0468			        ; increment hl and de to next read position on exit 
0468			 
0468 e5				push hl 
0469 d5				push de	 
046a c5				push bc 
046b			;	if DEBUG_STORESE 
046b			;		push af 
046b			;		ld a, 'R' 
046b			;		ld (debug_mark),a 
046b			;		pop af 
046b			;		CALLMONITOR 
046b			;	endif 
046b cd 0c 03			call se_readbyte 
046e			;	if DEBUG_STORESE 
046e			;		ld a,(spi_portbyte) 
046e			;		ld l, a 
046e			;		push af 
046e			;		ld a, '1' 
046e			;		ld (debug_mark),a 
046e			;		pop af 
046e			;		CALLMONITOR 
046e			;	endif 
046e c1				pop bc 
046f d1				pop de 
0470 e1				pop hl 
0471 12				ld (de),a 
0472 23				inc hl 
0473 13				inc de 
0474			 
0474			;	if DEBUG_STORESE 
0474			;		push af 
0474			;		ld a, 'r' 
0474			;		ld (debug_mark),a 
0474			;		pop af 
0474			;		CALLMONITOR 
0474			;	endif 
0474			 
0474 10 f2			djnz .rl1 
0476			 
0476				if DEBUG_STORESE 
0476					DMARK "SRB" 
0476 f5				push af  
0477 3a 8b 04			ld a, (.dmark)  
047a 32 68 fe			ld (debug_mark),a  
047d 3a 8c 04			ld a, (.dmark+1)  
0480 32 69 fe			ld (debug_mark+1),a  
0483 3a 8d 04			ld a, (.dmark+2)  
0486 32 6a fe			ld (debug_mark+2),a  
0489 18 03			jr .pastdmark  
048b ..			.dmark: db "SRB"  
048e f1			.pastdmark: pop af  
048f			endm  
# End of macro DMARK
048f d1					pop de 
0490			; 
0490			;		push af 
0490			;		ld a, 'R' 
0490			;		ld (debug_mark),a 
0490			;		pop af 
0490					CALLMONITOR 
0490 cd 6c fe			call debug_vector  
0493				endm  
# End of macro CALLMONITOR
0493				endif 
0493 c9				ret	 
0494				 
0494			 
0494			; File Size 
0494			; --------- 
0494			; 
0494			;   hl file id 
0494			; 
0494			;  returns in hl the number of blocks 
0494			 
0494			storage_file_size: 
0494 5d				ld e, l 
0495 16 00			ld d, 0 
0497 21 40 00			ld hl, STORE_BLOCK_PHY 
049a					if DEBUG_FORTH_WORDS 
049a						DMARK "SIZ" 
049a f5				push af  
049b 3a af 04			ld a, (.dmark)  
049e 32 68 fe			ld (debug_mark),a  
04a1 3a b0 04			ld a, (.dmark+1)  
04a4 32 69 fe			ld (debug_mark+1),a  
04a7 3a b1 04			ld a, (.dmark+2)  
04aa 32 6a fe			ld (debug_mark+2),a  
04ad 18 03			jr .pastdmark  
04af ..			.dmark: db "SIZ"  
04b2 f1			.pastdmark: pop af  
04b3			endm  
# End of macro DMARK
04b3						CALLMONITOR 
04b3 cd 6c fe			call debug_vector  
04b6				endm  
# End of macro CALLMONITOR
04b6					endif 
04b6 cd 98 07			call storage_findnextid 
04b9			 
04b9 cd f8 0f			call ishlzero 
04bc			;	ld a, l 
04bc			;	add h 
04bc			;	cp 0 
04bc c8				ret z			; block not found so EOF 
04bd			 
04bd 11 77 fa			ld de, store_page 
04c0 cd 65 04			call storage_read_block 
04c3			 
04c3 3a 79 fa			ld a, (store_page+2)	 ; get extent count 
04c6 6f				ld l, a 
04c7 26 00			ld h, 0 
04c9 c9			 	ret 
04ca			 
04ca			 
04ca			; Write Block 
04ca			; ----------- 
04ca			; 
04ca			; With current bank 
04ca			;  
04ca			; Get block number to write 
04ca			; Write physical blocks starting at start block from buffer 
04ca			  
04ca			storage_write_block: 
04ca				; TODO bank selection 
04ca			 
04ca				; for each of the physical blocks read it into the buffer 
04ca 06 40			ld b, STORE_BLOCK_PHY 
04cc			 
04cc				if DEBUG_STORESE 
04cc					DMARK "SWB" 
04cc f5				push af  
04cd 3a e1 04			ld a, (.dmark)  
04d0 32 68 fe			ld (debug_mark),a  
04d3 3a e2 04			ld a, (.dmark+1)  
04d6 32 69 fe			ld (debug_mark+1),a  
04d9 3a e3 04			ld a, (.dmark+2)  
04dc 32 6a fe			ld (debug_mark+2),a  
04df 18 03			jr .pastdmark  
04e1 ..			.dmark: db "SWB"  
04e4 f1			.pastdmark: pop af  
04e5			endm  
# End of macro DMARK
04e5			 
04e5					;push af 
04e5					;ld a, 'W' 
04e5					;ld (debug_mark),a 
04e5					;pop af 
04e5					CALLMONITOR 
04e5 cd 6c fe			call debug_vector  
04e8				endm  
# End of macro CALLMONITOR
04e8				endif 
04e8			 
04e8			; might not be working 
04e8			;	call se_writepage 
04e8			 
04e8			;	ret 
04e8			; 
04e8			 
04e8			 
04e8			 
04e8			.wl1:    
04e8			 
04e8				; read physical block at hl into de 
04e8			        ; increment hl and de to next read position on exit 
04e8			 
04e8 e5				push hl 
04e9 d5				push de	 
04ea c5				push bc 
04eb 1a				ld a,(de) 
04ec				;if DEBUG_STORESE 
04ec			;		push af 
04ec			;		ld a, 'W' 
04ec			;		ld (debug_mark),a 
04ec			;		pop af 
04ec			;		CALLMONITOR 
04ec			;	endif 
04ec cd 6a 02			call se_writebyte 
04ef			;	call delay250ms 
04ef 00				nop 
04f0 00				nop 
04f1 00				nop 
04f2			;	if DEBUG_STORESE 
04f2			;		push af 
04f2			;		ld a, 'w' 
04f2			;		ld (debug_mark),a 
04f2			;		pop af 
04f2			;		CALLMONITOR 
04f2			;	endif 
04f2 c1				pop bc 
04f3 d1				pop de 
04f4 e1				pop hl 
04f5 23				inc hl 
04f6 13				inc de 
04f7			 
04f7			 
04f7 10 ef			djnz .wl1 
04f9			 
04f9				if DEBUG_STORESE 
04f9					DMARK "SW2" 
04f9 f5				push af  
04fa 3a 0e 05			ld a, (.dmark)  
04fd 32 68 fe			ld (debug_mark),a  
0500 3a 0f 05			ld a, (.dmark+1)  
0503 32 69 fe			ld (debug_mark+1),a  
0506 3a 10 05			ld a, (.dmark+2)  
0509 32 6a fe			ld (debug_mark+2),a  
050c 18 03			jr .pastdmark  
050e ..			.dmark: db "SW2"  
0511 f1			.pastdmark: pop af  
0512			endm  
# End of macro DMARK
0512			 
0512					;push af 
0512					;ld a, 'W' 
0512					;ld (debug_mark),a 
0512					;pop af 
0512					CALLMONITOR 
0512 cd 6c fe			call debug_vector  
0515				endm  
# End of macro CALLMONITOR
0515				endif 
0515 c9				ret	 
0516			 
0516			; Init bank 
0516			; --------- 
0516			; 
0516			; With current bank 
0516			; 
0516			; Setup block 0 config 
0516			;     Set 0 file id counter 
0516			;     Set formatted byte pattern 
0516			;     Zero out bank label 
0516			;      
0516			; For every logical block write 0-1 byte as null 
0516			 
0516			storage_get_block_0: 
0516			 
0516				; TODO check presence 
0516			 
0516				; get block 0 config 
0516			 
0516 21 00 00			ld hl, 0 
0519 11 77 fa			ld de, store_page 
051c cd 65 04			call storage_read_block 
051f			 
051f				if DEBUG_STORESE 
051f					DMARK "SB0" 
051f f5				push af  
0520 3a 34 05			ld a, (.dmark)  
0523 32 68 fe			ld (debug_mark),a  
0526 3a 35 05			ld a, (.dmark+1)  
0529 32 69 fe			ld (debug_mark+1),a  
052c 3a 36 05			ld a, (.dmark+2)  
052f 32 6a fe			ld (debug_mark+2),a  
0532 18 03			jr .pastdmark  
0534 ..			.dmark: db "SB0"  
0537 f1			.pastdmark: pop af  
0538			endm  
# End of macro DMARK
0538 11 77 fa				ld de, store_page 
053b			;		push af 
053b			;		ld a, 'i' 
053b			;		ld (debug_mark),a 
053b			;		pop af 
053b					CALLMONITOR 
053b cd 6c fe			call debug_vector  
053e				endm  
# End of macro CALLMONITOR
053e				endif 
053e			 
053e				; is this area formatted? 
053e			 
053e			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
053e 2a 78 fa			ld hl, (store_page+1) 
0541 3e 80			ld a,0x80 
0543 bd				cp l 
0544 20 22			jr nz, .ininotformatted 
0546				; do a double check 
0546 3e 27			ld a, 0x27 
0548 bc				cp h 
0549 20 1d			jr nz, .ininotformatted 
054b			 
054b				; formatted then 
054b			 
054b				if DEBUG_STORESE 
054b					DMARK "SB1" 
054b f5				push af  
054c 3a 60 05			ld a, (.dmark)  
054f 32 68 fe			ld (debug_mark),a  
0552 3a 61 05			ld a, (.dmark+1)  
0555 32 69 fe			ld (debug_mark+1),a  
0558 3a 62 05			ld a, (.dmark+2)  
055b 32 6a fe			ld (debug_mark+2),a  
055e 18 03			jr .pastdmark  
0560 ..			.dmark: db "SB1"  
0563 f1			.pastdmark: pop af  
0564			endm  
# End of macro DMARK
0564					;push af 
0564					;ld a, 'I' 
0564					;ld (debug_mark),a 
0564					;pop af 
0564					CALLMONITOR 
0564 cd 6c fe			call debug_vector  
0567				endm  
# End of macro CALLMONITOR
0567				endif 
0567 c9				ret 
0568			 
0568			.ininotformatted: 
0568				; bank not formatted so poke various bits to make sure 
0568			 
0568				if DEBUG_STORESE 
0568					DMARK "SB2" 
0568 f5				push af  
0569 3a 7d 05			ld a, (.dmark)  
056c 32 68 fe			ld (debug_mark),a  
056f 3a 7e 05			ld a, (.dmark+1)  
0572 32 69 fe			ld (debug_mark+1),a  
0575 3a 7f 05			ld a, (.dmark+2)  
0578 32 6a fe			ld (debug_mark+2),a  
057b 18 03			jr .pastdmark  
057d ..			.dmark: db "SB2"  
0580 f1			.pastdmark: pop af  
0581			endm  
# End of macro DMARK
0581					;push af 
0581					;ld a, 'f' 
0581					;ld (debug_mark),a 
0581					;pop af 
0581					CALLMONITOR 
0581 cd 6c fe			call debug_vector  
0584				endm  
# End of macro CALLMONITOR
0584				endif 
0584			 
0584 cd a1 0c			call storage_clear_page 
0587			 
0587 21 77 fa			ld hl, store_page 
058a 3e 00			ld a, 0 
058c				 
058c 77				ld (hl),a   ; reset file counter 
058d			 
058d 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0590 22 78 fa		 	ld (store_page+1), hl	 
0593			 
0593				; set default label 
0593			 
0593 21 2f 06			ld hl, .defaultbanklabl 
0596 11 7a fa		 	ld de, store_page+3 
0599 01 0f 00			ld bc, 15 
059c ed b0			ldir 
059e			 
059e				; Append the current bank id 
059e 21 83 fa			ld hl, store_page+3+9 
05a1 3a 5c fa			ld a, (spi_device_id) 
05a4 77				ld (hl), a 
05a5			 
05a5				; save default page 0 
05a5			 
05a5 21 00 00			ld hl, 0 
05a8 11 77 fa			ld de, store_page 
05ab				if DEBUG_STORESE 
05ab					DMARK "SB3" 
05ab f5				push af  
05ac 3a c0 05			ld a, (.dmark)  
05af 32 68 fe			ld (debug_mark),a  
05b2 3a c1 05			ld a, (.dmark+1)  
05b5 32 69 fe			ld (debug_mark+1),a  
05b8 3a c2 05			ld a, (.dmark+2)  
05bb 32 6a fe			ld (debug_mark+2),a  
05be 18 03			jr .pastdmark  
05c0 ..			.dmark: db "SB3"  
05c3 f1			.pastdmark: pop af  
05c4			endm  
# End of macro DMARK
05c4			;		push af 
05c4			;		ld a, 'F' 
05c4			;		ld (debug_mark),a 
05c4			;		pop af 
05c4					CALLMONITOR 
05c4 cd 6c fe			call debug_vector  
05c7				endm  
# End of macro CALLMONITOR
05c7				endif 
05c7 cd ca 04			call storage_write_block 
05ca				if DEBUG_STORESE 
05ca					DMARK "SB4" 
05ca f5				push af  
05cb 3a df 05			ld a, (.dmark)  
05ce 32 68 fe			ld (debug_mark),a  
05d1 3a e0 05			ld a, (.dmark+1)  
05d4 32 69 fe			ld (debug_mark+1),a  
05d7 3a e1 05			ld a, (.dmark+2)  
05da 32 6a fe			ld (debug_mark+2),a  
05dd 18 03			jr .pastdmark  
05df ..			.dmark: db "SB4"  
05e2 f1			.pastdmark: pop af  
05e3			endm  
# End of macro DMARK
05e3			;		push af 
05e3			;		ld a, '>' 
05e3			;		ld (debug_mark),a 
05e3			;		pop af 
05e3					CALLMONITOR 
05e3 cd 6c fe			call debug_vector  
05e6				endm  
# End of macro CALLMONITOR
05e6				endif 
05e6			 
05e6 00				nop 
05e7 00				nop 
05e8 00				nop 
05e9			 
05e9				; now set 0 in every page to mark as a free block 
05e9			 
05e9 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05eb 21 40 00			ld hl, STORE_BLOCK_PHY 
05ee			 
05ee 3e 00		.setmark1:   	ld a,0 
05f0 e5					push hl 
05f1 c5					push bc 
05f2 cd 6a 02				call se_writebyte 
05f5 3e 0a			ld a, 10 
05f7 cd c3 0c			call aDelayInMS 
05fa 23				inc hl 
05fb cd 6a 02				call se_writebyte 
05fe 3e 0a			ld a, 10 
0600 cd c3 0c			call aDelayInMS 
0603 2b				dec hl 
0604 c1					pop bc 
0605 e1					pop hl 
0606 3e 40				ld a, STORE_BLOCK_PHY 
0608 cd cf 0f				call addatohl 
060b 10 e1				djnz .setmark1 
060d			 
060d 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
060f 3e 00		.setmark2:   	ld a,0 
0611 e5					push hl 
0612 c5					push bc 
0613 cd 6a 02				call se_writebyte 
0616 3e 0a			ld a, 10 
0618 cd c3 0c			call aDelayInMS 
061b 23				inc hl 
061c cd 6a 02				call se_writebyte 
061f 3e 0a			ld a, 10 
0621 cd c3 0c			call aDelayInMS 
0624 2b				dec hl 
0625 c1					pop bc 
0626 e1					pop hl 
0627 3e 40				ld a, STORE_BLOCK_PHY 
0629 cd cf 0f				call addatohl 
062c 10 e1				djnz .setmark2 
062e			 
062e					 
062e			 
062e			 
062e c9				ret 
062f			 
062f			 
062f			 
062f			 
062f .. 00		.defaultbanklabl:   db "BankLabel_",0 
063a			 
063a			 
063a			 
063a			; Label Bank 
063a			; ---------- 
063a			; 
063a			; With current bank 
063a			; Read block 0 
063a			; Set label 
063a			; Write block 0 
063a			 
063a			; label str pointer in hl 
063a			 
063a			storage_label:     
063a			 
063a				if DEBUG_STORESE 
063a					DMARK "LBL" 
063a f5				push af  
063b 3a 4f 06			ld a, (.dmark)  
063e 32 68 fe			ld (debug_mark),a  
0641 3a 50 06			ld a, (.dmark+1)  
0644 32 69 fe			ld (debug_mark+1),a  
0647 3a 51 06			ld a, (.dmark+2)  
064a 32 6a fe			ld (debug_mark+2),a  
064d 18 03			jr .pastdmark  
064f ..			.dmark: db "LBL"  
0652 f1			.pastdmark: pop af  
0653			endm  
# End of macro DMARK
0653					CALLMONITOR 
0653 cd 6c fe			call debug_vector  
0656				endm  
# End of macro CALLMONITOR
0656				endif 
0656			 
0656 e5				push hl 
0657			 
0657 cd 16 05			call storage_get_block_0 
065a			 
065a				; set default label 
065a			 
065a e1				pop hl 
065b			 
065b 11 7a fa		 	ld de, store_page+3 
065e 01 0f 00			ld bc, 15 
0661				if DEBUG_STORESE 
0661					DMARK "LB3" 
0661 f5				push af  
0662 3a 76 06			ld a, (.dmark)  
0665 32 68 fe			ld (debug_mark),a  
0668 3a 77 06			ld a, (.dmark+1)  
066b 32 69 fe			ld (debug_mark+1),a  
066e 3a 78 06			ld a, (.dmark+2)  
0671 32 6a fe			ld (debug_mark+2),a  
0674 18 03			jr .pastdmark  
0676 ..			.dmark: db "LB3"  
0679 f1			.pastdmark: pop af  
067a			endm  
# End of macro DMARK
067a					CALLMONITOR 
067a cd 6c fe			call debug_vector  
067d				endm  
# End of macro CALLMONITOR
067d				endif 
067d ed b0			ldir 
067f				; save default page 0 
067f			 
067f 21 00 00			ld hl, 0 
0682 11 77 fa			ld de, store_page 
0685				if DEBUG_STORESE 
0685					DMARK "LBW" 
0685 f5				push af  
0686 3a 9a 06			ld a, (.dmark)  
0689 32 68 fe			ld (debug_mark),a  
068c 3a 9b 06			ld a, (.dmark+1)  
068f 32 69 fe			ld (debug_mark+1),a  
0692 3a 9c 06			ld a, (.dmark+2)  
0695 32 6a fe			ld (debug_mark+2),a  
0698 18 03			jr .pastdmark  
069a ..			.dmark: db "LBW"  
069d f1			.pastdmark: pop af  
069e			endm  
# End of macro DMARK
069e					CALLMONITOR 
069e cd 6c fe			call debug_vector  
06a1				endm  
# End of macro CALLMONITOR
06a1				endif 
06a1 cd ca 04			call storage_write_block 
06a4			 
06a4 c9				ret 
06a5			 
06a5			 
06a5			 
06a5			; Read Block 0 - Config 
06a5			; --------------------- 
06a5			; 
06a5			; With current bank 
06a5			; Call presence test 
06a5			;    If not present format/init bank  
06a5			; Read block 0  
06a5			;  
06a5			 
06a5			 
06a5			; Dir 
06a5			; --- 
06a5			; 
06a5			; With current bank 
06a5			; Load Block 0 Config 
06a5			; Get max file id number 
06a5			; For each logical block 
06a5			;    Read block read byte 2 
06a5			;      if first block of file 
06a5			;         Display file name 
06a5			;         Display type flags for file 
06a5			;        
06a5			 
06a5			; moving to words as this requires stack control 
06a5			 
06a5			 
06a5			; Delete File 
06a5			; ----------- 
06a5			; 
06a5			; With current bank 
06a5			; 
06a5			; Load Block 0 Config 
06a5			; Get max file id number 
06a5			; For each logical block 
06a5			;    Read block file id 
06a5			;      If first block of file and dont have file id 
06a5			;         if file to delete 
06a5			;         Save file id 
06a5			;         Null file id 
06a5			;         Write this block back 
06a5			;      If file id is one saved 
06a5			;         Null file id 
06a5			;         Write this block back 
06a5			 
06a5			 
06a5			.se_done: 
06a5 e1				pop hl 
06a6 c9				ret 
06a7			 
06a7			storage_erase: 
06a7			 
06a7				; hl contains the file id 
06a7			 
06a7 5d				ld e, l 
06a8 16 00			ld d, 0 
06aa 21 40 00			ld hl, STORE_BLOCK_PHY 
06ad					if DEBUG_FORTH_WORDS 
06ad						DMARK "ERA" 
06ad f5				push af  
06ae 3a c2 06			ld a, (.dmark)  
06b1 32 68 fe			ld (debug_mark),a  
06b4 3a c3 06			ld a, (.dmark+1)  
06b7 32 69 fe			ld (debug_mark+1),a  
06ba 3a c4 06			ld a, (.dmark+2)  
06bd 32 6a fe			ld (debug_mark+2),a  
06c0 18 03			jr .pastdmark  
06c2 ..			.dmark: db "ERA"  
06c5 f1			.pastdmark: pop af  
06c6			endm  
# End of macro DMARK
06c6						CALLMONITOR 
06c6 cd 6c fe			call debug_vector  
06c9				endm  
# End of macro CALLMONITOR
06c9					endif 
06c9 cd 98 07			call storage_findnextid 
06cc cd f8 0f			call ishlzero 
06cf c8				ret z 
06d0			 
06d0 e5				push hl 
06d1			 
06d1				; TODO check file not found 
06d1			 
06d1 11 77 fa			ld de, store_page 
06d4 cd 65 04			call storage_read_block 
06d7			 
06d7 cd f8 0f			call ishlzero 
06da ca a5 06			jp z,.se_done 
06dd			 
06dd					if DEBUG_FORTH_WORDS 
06dd						DMARK "ER1" 
06dd f5				push af  
06de 3a f2 06			ld a, (.dmark)  
06e1 32 68 fe			ld (debug_mark),a  
06e4 3a f3 06			ld a, (.dmark+1)  
06e7 32 69 fe			ld (debug_mark+1),a  
06ea 3a f4 06			ld a, (.dmark+2)  
06ed 32 6a fe			ld (debug_mark+2),a  
06f0 18 03			jr .pastdmark  
06f2 ..			.dmark: db "ER1"  
06f5 f1			.pastdmark: pop af  
06f6			endm  
# End of macro DMARK
06f6						CALLMONITOR 
06f6 cd 6c fe			call debug_vector  
06f9				endm  
# End of macro CALLMONITOR
06f9					endif 
06f9 3a 77 fa			ld a, (store_page)	; get file id 
06fc 32 6b fa			ld (store_tmpid), a 
06ff			 
06ff 3a 79 fa			ld a, (store_page+2)    ; get count of extends 
0702 32 6a fa			ld (store_tmpext), a 
0705			 
0705				; wipe file header 
0705			 
0705 e1				pop hl 
0706 3e 00			ld a, 0 
0708 32 77 fa			ld (store_page), a 
070b 32 78 fa			ld (store_page+1),a 
070e 11 77 fa			ld de, store_page 
0711					if DEBUG_FORTH_WORDS 
0711						DMARK "ER2" 
0711 f5				push af  
0712 3a 26 07			ld a, (.dmark)  
0715 32 68 fe			ld (debug_mark),a  
0718 3a 27 07			ld a, (.dmark+1)  
071b 32 69 fe			ld (debug_mark+1),a  
071e 3a 28 07			ld a, (.dmark+2)  
0721 32 6a fe			ld (debug_mark+2),a  
0724 18 03			jr .pastdmark  
0726 ..			.dmark: db "ER2"  
0729 f1			.pastdmark: pop af  
072a			endm  
# End of macro DMARK
072a						CALLMONITOR 
072a cd 6c fe			call debug_vector  
072d				endm  
# End of macro CALLMONITOR
072d					endif 
072d cd ca 04			call storage_write_block 
0730			 
0730			 
0730				; wipe file extents 
0730			 
0730 3a 6a fa			ld a, (store_tmpext) 
0733 47				ld b, a 
0734			 
0734			.eraext:	  
0734 c5				push bc 
0735			 
0735 21 40 00			ld hl, STORE_BLOCK_PHY 
0738 3a 6b fa			ld a,(store_tmpid) 
073b 5f				ld e, a 
073c 50				ld d, b	 
073d					if DEBUG_FORTH_WORDS 
073d						DMARK "ER3" 
073d f5				push af  
073e 3a 52 07			ld a, (.dmark)  
0741 32 68 fe			ld (debug_mark),a  
0744 3a 53 07			ld a, (.dmark+1)  
0747 32 69 fe			ld (debug_mark+1),a  
074a 3a 54 07			ld a, (.dmark+2)  
074d 32 6a fe			ld (debug_mark+2),a  
0750 18 03			jr .pastdmark  
0752 ..			.dmark: db "ER3"  
0755 f1			.pastdmark: pop af  
0756			endm  
# End of macro DMARK
0756						CALLMONITOR 
0756 cd 6c fe			call debug_vector  
0759				endm  
# End of macro CALLMONITOR
0759					endif 
0759 cd 98 07			call storage_findnextid 
075c cd f8 0f			call ishlzero 
075f ca a5 06			jp z,.se_done 
0762			 
0762 e5				push hl 
0763 11 77 fa			ld de, store_page 
0766 cd 65 04			call storage_read_block 
0769			 
0769				; free block	 
0769			 
0769 3e 00			ld a, 0 
076b 32 77 fa			ld (store_page), a 
076e 32 78 fa			ld (store_page+1),a 
0771 11 77 fa			ld de, store_page 
0774 e1				pop hl 
0775					if DEBUG_FORTH_WORDS 
0775						DMARK "ER4" 
0775 f5				push af  
0776 3a 8a 07			ld a, (.dmark)  
0779 32 68 fe			ld (debug_mark),a  
077c 3a 8b 07			ld a, (.dmark+1)  
077f 32 69 fe			ld (debug_mark+1),a  
0782 3a 8c 07			ld a, (.dmark+2)  
0785 32 6a fe			ld (debug_mark+2),a  
0788 18 03			jr .pastdmark  
078a ..			.dmark: db "ER4"  
078d f1			.pastdmark: pop af  
078e			endm  
# End of macro DMARK
078e						CALLMONITOR 
078e cd 6c fe			call debug_vector  
0791				endm  
# End of macro CALLMONITOR
0791					endif 
0791 cd ca 04			call storage_write_block 
0794			 
0794 c1				pop bc 
0795 10 9d			djnz .eraext 
0797			 
0797 c9				ret 
0798			 
0798			 
0798			; Find Free Block 
0798			; --------------- 
0798			; 
0798			; With current bank 
0798			;  
0798			; From given starting logical block 
0798			;    Read block  
0798			;    If no file id 
0798			;         Return block id 
0798			 
0798			 
0798			; hl starting page number 
0798			; hl contains free page number or zero if no pages free 
0798			; e contains the file id to locate 
0798			; d contains the block number 
0798			 
0798			; TODO change to find file id and use zero for free block 
0798			 
0798			storage_findnextid: 
0798			 
0798				; now locate first 0 page to mark as a free block 
0798			 
0798 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
079a			;	ld hl, STORE_BLOCK_PHY 
079a			 
079a					if DEBUG_FORTH_WORDS 
079a					DMARK "FNI" 
079a f5				push af  
079b 3a af 07			ld a, (.dmark)  
079e 32 68 fe			ld (debug_mark),a  
07a1 3a b0 07			ld a, (.dmark+1)  
07a4 32 69 fe			ld (debug_mark+1),a  
07a7 3a b1 07			ld a, (.dmark+2)  
07aa 32 6a fe			ld (debug_mark+2),a  
07ad 18 03			jr .pastdmark  
07af ..			.dmark: db "FNI"  
07b2 f1			.pastdmark: pop af  
07b3			endm  
# End of macro DMARK
07b3						CALLMONITOR 
07b3 cd 6c fe			call debug_vector  
07b6				endm  
# End of macro CALLMONITOR
07b6					endif 
07b6			.ff1:   	 
07b6 e5					push hl 
07b7 c5					push bc 
07b8 d5					push de 
07b9 cd 0c 03				call se_readbyte 
07bc 5f					ld e,a 
07bd 23					inc hl 
07be cd 0c 03				call se_readbyte 
07c1 57					ld d, a 
07c2 e1					pop hl 
07c3 e5					push hl 
07c4 cd ed 0f				call cmp16 
07c7 28 49				jr z, .fffound 
07c9			 
07c9 d1					pop de 
07ca c1					pop bc 
07cb e1					pop hl 
07cc			 
07cc					; is found? 
07cc					;cp e 
07cc					;ret z 
07cc			 
07cc 3e 40				ld a, STORE_BLOCK_PHY 
07ce cd cf 0f				call addatohl 
07d1 10 e3				djnz .ff1 
07d3			 
07d3 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07d5			.ff2:   	 
07d5			 
07d5 e5					push hl 
07d6 c5					push bc 
07d7 d5					push de 
07d8 cd 0c 03				call se_readbyte 
07db 5f					ld e,a 
07dc 23					inc hl 
07dd cd 0c 03				call se_readbyte 
07e0 57					ld d, a 
07e1			 
07e1 e1					pop hl 
07e2 e5					push hl 
07e3 cd ed 0f				call cmp16 
07e6 28 2a				jr z, .fffound 
07e8			 
07e8 d1					pop de 
07e9 c1					pop bc 
07ea e1					pop hl 
07eb					; is found? 
07eb					;cp e 
07eb					;ret z 
07eb			 
07eb 3e 40				ld a, STORE_BLOCK_PHY 
07ed cd cf 0f				call addatohl 
07f0 10 e3				djnz .ff2 
07f2			 
07f2			 
07f2					if DEBUG_FORTH_WORDS 
07f2					DMARK "FN-" 
07f2 f5				push af  
07f3 3a 07 08			ld a, (.dmark)  
07f6 32 68 fe			ld (debug_mark),a  
07f9 3a 08 08			ld a, (.dmark+1)  
07fc 32 69 fe			ld (debug_mark+1),a  
07ff 3a 09 08			ld a, (.dmark+2)  
0802 32 6a fe			ld (debug_mark+2),a  
0805 18 03			jr .pastdmark  
0807 ..			.dmark: db "FN-"  
080a f1			.pastdmark: pop af  
080b			endm  
# End of macro DMARK
080b					;	push af 
080b					;	ld a, 'n' 
080b					;	ld (debug_mark),a 
080b					;	pop af 
080b						CALLMONITOR 
080b cd 6c fe			call debug_vector  
080e				endm  
# End of macro CALLMONITOR
080e					endif 
080e				; no free marks! 
080e 21 00 00				ld hl, 0 
0811 c9				ret 
0812			.fffound: 
0812				 
0812			 
0812 d1					pop de 
0813 c1					pop bc 
0814 e1					pop hl 
0815					if DEBUG_FORTH_WORDS 
0815					DMARK "FNF" 
0815 f5				push af  
0816 3a 2a 08			ld a, (.dmark)  
0819 32 68 fe			ld (debug_mark),a  
081c 3a 2b 08			ld a, (.dmark+1)  
081f 32 69 fe			ld (debug_mark+1),a  
0822 3a 2c 08			ld a, (.dmark+2)  
0825 32 6a fe			ld (debug_mark+2),a  
0828 18 03			jr .pastdmark  
082a ..			.dmark: db "FNF"  
082d f1			.pastdmark: pop af  
082e			endm  
# End of macro DMARK
082e					;	push af 
082e					;	ld a, 'n' 
082e					;	ld (debug_mark),a 
082e					;	pop af 
082e						CALLMONITOR 
082e cd 6c fe			call debug_vector  
0831				endm  
# End of macro CALLMONITOR
0831					endif 
0831 c9				ret 
0832			 
0832			 
0832			 
0832			; Free Space 
0832			; ---------- 
0832			; 
0832			; With current bank 
0832			; 
0832			; Set block count to zero 
0832			; Starting with first logical block 
0832			;      Find free block  
0832			;      If block id given, increment block count 
0832			; 
0832			;  
0832			 
0832			 
0832			; hl contains count of free blocks 
0832			 
0832			storage_freeblocks: 
0832			 
0832				; now locate first 0 page to mark as a free block 
0832			 
0832 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0834 21 40 00			ld hl, STORE_BLOCK_PHY 
0837 11 00 00			ld de, 0 
083a			 
083a			.fb1:   	 
083a e5					push hl 
083b c5					push bc 
083c d5					push de 
083d cd 0c 03				call se_readbyte 
0840 d1					pop de 
0841 c1					pop bc 
0842 e1					pop hl 
0843			 
0843					; is free? 
0843 fe 00				cp 0 
0845 20 01				jr nz, .ff1cont 
0847 13					inc de 
0848			 
0848			.ff1cont: 
0848			 
0848			 
0848 3e 40				ld a, STORE_BLOCK_PHY 
084a cd cf 0f				call addatohl 
084d 10 eb				djnz .fb1 
084f			 
084f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0851			.fb2:   	 
0851 e5					push hl 
0852 c5					push bc 
0853 d5					push de 
0854 cd 0c 03				call se_readbyte 
0857 d1					pop de 
0858 c1					pop bc 
0859 e1					pop hl 
085a			 
085a					; is free? 
085a fe 00				cp 0 
085c 20 01				jr nz, .ff2cont 
085e 13					inc de 
085f			 
085f			.ff2cont: 
085f			 
085f 3e 40				ld a, STORE_BLOCK_PHY 
0861 cd cf 0f				call addatohl 
0864 10 eb				djnz .fb2 
0866			 
0866 eb				ex de, hl 
0867 c9				ret 
0868			 
0868			; Get File ID 
0868			; ----------- 
0868			; 
0868			; With current bank 
0868			;  
0868			; Load Block 0 Config 
0868			; Get max file id number 
0868			; For each logical block 
0868			;    Read block file id 
0868			;      If first block of file and dont have file id 
0868			;         if file get id and exit 
0868			 
0868			 
0868			 
0868			 
0868			; Create File 
0868			; ----------- 
0868			; 
0868			; With current bank  
0868			; Load Block 0 Config 
0868			; Get max file id number 
0868			; Increment file id number 
0868			; Save Config 
0868			; Find free block 
0868			; Set buffer with file name and file id 
0868			; Write buffer to free block  
0868			 
0868			 
0868			; hl point to file name 
0868			; hl returns file id 
0868			 
0868			; file format: 
0868			; byte 0 - file id 
0868			; byte 1 - extent number 
0868			; byte 2-> data 
0868			 
0868			; format for extent number 0: 
0868			; 
0868			; byte 0 - file id 
0868			; byte 1 - extent 0 
0868			; byte 2 - extent count 
0868			; byte 3 -> file name and meta data 
0868			 
0868			 
0868			storage_create: 
0868				if DEBUG_STORESE 
0868					DMARK "SCR" 
0868 f5				push af  
0869 3a 7d 08			ld a, (.dmark)  
086c 32 68 fe			ld (debug_mark),a  
086f 3a 7e 08			ld a, (.dmark+1)  
0872 32 69 fe			ld (debug_mark+1),a  
0875 3a 7f 08			ld a, (.dmark+2)  
0878 32 6a fe			ld (debug_mark+2),a  
087b 18 03			jr .pastdmark  
087d ..			.dmark: db "SCR"  
0880 f1			.pastdmark: pop af  
0881			endm  
# End of macro DMARK
0881					CALLMONITOR 
0881 cd 6c fe			call debug_vector  
0884				endm  
# End of macro CALLMONITOR
0884				endif 
0884			 
0884 e5				push hl		; save file name pointer 
0885			 
0885 cd 16 05			call storage_get_block_0 
0888			 
0888 3a 77 fa			ld a,(store_page)	; get current file id 
088b 3c				inc a 
088c 32 77 fa			ld (store_page),a 
088f				 
088f 32 6b fa			ld (store_tmpid),a			; save id 
0892			 
0892 21 00 00			ld hl, 0 
0895 11 77 fa			ld de, store_page 
0898				if DEBUG_STORESE 
0898					DMARK "SCw" 
0898 f5				push af  
0899 3a ad 08			ld a, (.dmark)  
089c 32 68 fe			ld (debug_mark),a  
089f 3a ae 08			ld a, (.dmark+1)  
08a2 32 69 fe			ld (debug_mark+1),a  
08a5 3a af 08			ld a, (.dmark+2)  
08a8 32 6a fe			ld (debug_mark+2),a  
08ab 18 03			jr .pastdmark  
08ad ..			.dmark: db "SCw"  
08b0 f1			.pastdmark: pop af  
08b1			endm  
# End of macro DMARK
08b1					CALLMONITOR 
08b1 cd 6c fe			call debug_vector  
08b4				endm  
# End of macro CALLMONITOR
08b4				endif 
08b4 cd ca 04			call storage_write_block	 ; save update 
08b7			 
08b7				if DEBUG_STORESE 
08b7 11 77 fa				ld de, store_page 
08ba					DMARK "SCC" 
08ba f5				push af  
08bb 3a cf 08			ld a, (.dmark)  
08be 32 68 fe			ld (debug_mark),a  
08c1 3a d0 08			ld a, (.dmark+1)  
08c4 32 69 fe			ld (debug_mark+1),a  
08c7 3a d1 08			ld a, (.dmark+2)  
08ca 32 6a fe			ld (debug_mark+2),a  
08cd 18 03			jr .pastdmark  
08cf ..			.dmark: db "SCC"  
08d2 f1			.pastdmark: pop af  
08d3			endm  
# End of macro DMARK
08d3					CALLMONITOR 
08d3 cd 6c fe			call debug_vector  
08d6				endm  
# End of macro CALLMONITOR
08d6				endif 
08d6				;  
08d6				 
08d6 21 40 00			ld hl, STORE_BLOCK_PHY 
08d9 11 00 00			ld de, 0 
08dc cd 98 07			call storage_findnextid 
08df			 
08df 22 62 fa			ld (store_tmppageid), hl    ; save page to use  
08e2			 
08e2				; TODO detect 0 = no spare blocks 
08e2			 
08e2				; hl now contains the free page to use for the file header page 
08e2			 
08e2				if DEBUG_STORESE 
08e2				DMARK "SCF" 
08e2 f5				push af  
08e3 3a f7 08			ld a, (.dmark)  
08e6 32 68 fe			ld (debug_mark),a  
08e9 3a f8 08			ld a, (.dmark+1)  
08ec 32 69 fe			ld (debug_mark+1),a  
08ef 3a f9 08			ld a, (.dmark+2)  
08f2 32 6a fe			ld (debug_mark+2),a  
08f5 18 03			jr .pastdmark  
08f7 ..			.dmark: db "SCF"  
08fa f1			.pastdmark: pop af  
08fb			endm  
# End of macro DMARK
08fb					CALLMONITOR 
08fb cd 6c fe			call debug_vector  
08fe				endm  
# End of macro CALLMONITOR
08fe				endif 
08fe			 
08fe 22 62 fa			ld (store_tmppageid), hl 
0901				 
0901 3a 6b fa			ld a,(store_tmpid)    ; get file id 
0904			;	ld a, (store_filecache)			; save to cache 
0904			 
0904 32 77 fa			ld (store_page),a    ; set page id 
0907 3e 00			ld a, 0			 ; extent 0 is file header 
0909 32 78 fa			ld (store_page+1), a   ; set file extent 
090c			 
090c 32 79 fa			ld (store_page+2), a   ; extent count for the file 
090f			 
090f			;	inc hl 		; init block 0 of file 
090f			;	inc hl   		; skip file and extent id 
090f			 ;       ld a, 0 
090f			;	ld (hl),a 
090f			;	ld a, (store_filecache+1)  	; save to cache 
090f			 
090f			;	inc hl    ; file name 
090f				 
090f				 
090f 11 7a fa			ld de, store_page+3    ; get buffer for term string to use as file name 
0912				if DEBUG_STORESE 
0912					DMARK "SCc" 
0912 f5				push af  
0913 3a 27 09			ld a, (.dmark)  
0916 32 68 fe			ld (debug_mark),a  
0919 3a 28 09			ld a, (.dmark+1)  
091c 32 69 fe			ld (debug_mark+1),a  
091f 3a 29 09			ld a, (.dmark+2)  
0922 32 6a fe			ld (debug_mark+2),a  
0925 18 03			jr .pastdmark  
0927 ..			.dmark: db "SCc"  
092a f1			.pastdmark: pop af  
092b			endm  
# End of macro DMARK
092b					CALLMONITOR 
092b cd 6c fe			call debug_vector  
092e				endm  
# End of macro CALLMONITOR
092e				endif 
092e e1				pop hl    ; get zero term string 
092f e5				push hl 
0930 3e 00			ld a, 0 
0932 cd 38 14			call strlent 
0935 23				inc hl   ; cover zero term 
0936 06 00			ld b,0 
0938 4d				ld c,l 
0939 e1				pop hl 
093a				;ex de, hl 
093a				if DEBUG_STORESE 
093a					DMARK "SCa" 
093a f5				push af  
093b 3a 4f 09			ld a, (.dmark)  
093e 32 68 fe			ld (debug_mark),a  
0941 3a 50 09			ld a, (.dmark+1)  
0944 32 69 fe			ld (debug_mark+1),a  
0947 3a 51 09			ld a, (.dmark+2)  
094a 32 6a fe			ld (debug_mark+2),a  
094d 18 03			jr .pastdmark  
094f ..			.dmark: db "SCa"  
0952 f1			.pastdmark: pop af  
0953			endm  
# End of macro DMARK
0953					;push af 
0953					;ld a, 'a' 
0953					;ld (debug_mark),a 
0953					;pop af 
0953					CALLMONITOR 
0953 cd 6c fe			call debug_vector  
0956				endm  
# End of macro CALLMONITOR
0956				endif 
0956 ed b0			ldir    ; copy zero term string 
0958				if DEBUG_STORESE 
0958					DMARK "SCA" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 68 fe			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 69 fe			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 6a fe			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SCA"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6c fe			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974			 
0974				; write file header page 
0974			 
0974 2a 62 fa			ld hl,(store_tmppageid) 
0977 11 77 fa			ld de, store_page 
097a				if DEBUG_STORESE 
097a					DMARK "SCb" 
097a f5				push af  
097b 3a 8f 09			ld a, (.dmark)  
097e 32 68 fe			ld (debug_mark),a  
0981 3a 90 09			ld a, (.dmark+1)  
0984 32 69 fe			ld (debug_mark+1),a  
0987 3a 91 09			ld a, (.dmark+2)  
098a 32 6a fe			ld (debug_mark+2),a  
098d 18 03			jr .pastdmark  
098f ..			.dmark: db "SCb"  
0992 f1			.pastdmark: pop af  
0993			endm  
# End of macro DMARK
0993					;push af 
0993					;ld a, 'b' 
0993					;ld (debug_mark),a 
0993					;pop af 
0993					CALLMONITOR 
0993 cd 6c fe			call debug_vector  
0996				endm  
# End of macro CALLMONITOR
0996				endif 
0996 cd ca 04			call storage_write_block 
0999			 
0999 3a 6b fa			ld a, (store_tmpid) 
099c 6f				ld l, a 
099d 26 00			ld h,0 
099f				if DEBUG_STORESE 
099f					DMARK "SCz" 
099f f5				push af  
09a0 3a b4 09			ld a, (.dmark)  
09a3 32 68 fe			ld (debug_mark),a  
09a6 3a b5 09			ld a, (.dmark+1)  
09a9 32 69 fe			ld (debug_mark+1),a  
09ac 3a b6 09			ld a, (.dmark+2)  
09af 32 6a fe			ld (debug_mark+2),a  
09b2 18 03			jr .pastdmark  
09b4 ..			.dmark: db "SCz"  
09b7 f1			.pastdmark: pop af  
09b8			endm  
# End of macro DMARK
09b8					CALLMONITOR 
09b8 cd 6c fe			call debug_vector  
09bb				endm  
# End of macro CALLMONITOR
09bb				endif 
09bb c9				ret 
09bc				 
09bc			 
09bc			 
09bc			; 
09bc			; Read File 
09bc			; 
09bc			; h - file id to locate 
09bc			; l - extent to locate 
09bc			; de - pointer to string to read into 
09bc			; 
09bc			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09bc			 
09bc			.sr_fail: 
09bc d1				pop de 
09bd c9				ret 
09be			 
09be			storage_read: 
09be			 
09be			 
09be d5				push de 
09bf			 
09bf			; TODO BUG the above push is it popped before the RET Z? 
09bf			 
09bf			; TODO how to handle multiple part blocks 
09bf			 
09bf				; locate file extent to read 
09bf			 
09bf 5c				ld e, h 
09c0 55				ld d, l 
09c1			 
09c1			.srext: 
09c1 22 75 fa			ld (store_readptr), hl     ; save the current extent to load 
09c4 ed 53 73 fa		ld (store_readbuf), de     ; save the current buffer to load in to 
09c8			 
09c8 21 40 00			ld hl, STORE_BLOCK_PHY 
09cb				if DEBUG_STORESE 
09cb					DMARK "sre" 
09cb f5				push af  
09cc 3a e0 09			ld a, (.dmark)  
09cf 32 68 fe			ld (debug_mark),a  
09d2 3a e1 09			ld a, (.dmark+1)  
09d5 32 69 fe			ld (debug_mark+1),a  
09d8 3a e2 09			ld a, (.dmark+2)  
09db 32 6a fe			ld (debug_mark+2),a  
09de 18 03			jr .pastdmark  
09e0 ..			.dmark: db "sre"  
09e3 f1			.pastdmark: pop af  
09e4			endm  
# End of macro DMARK
09e4					CALLMONITOR 
09e4 cd 6c fe			call debug_vector  
09e7				endm  
# End of macro CALLMONITOR
09e7				endif 
09e7 cd 98 07			call storage_findnextid 
09ea			 
09ea				if DEBUG_STORESE 
09ea					DMARK "srf" 
09ea f5				push af  
09eb 3a ff 09			ld a, (.dmark)  
09ee 32 68 fe			ld (debug_mark),a  
09f1 3a 00 0a			ld a, (.dmark+1)  
09f4 32 69 fe			ld (debug_mark+1),a  
09f7 3a 01 0a			ld a, (.dmark+2)  
09fa 32 6a fe			ld (debug_mark+2),a  
09fd 18 03			jr .pastdmark  
09ff ..			.dmark: db "srf"  
0a02 f1			.pastdmark: pop af  
0a03			endm  
# End of macro DMARK
0a03					CALLMONITOR 
0a03 cd 6c fe			call debug_vector  
0a06				endm  
# End of macro CALLMONITOR
0a06				endif 
0a06 cd f8 0f			call ishlzero 
0a09			;	ld a, l 
0a09			;	add h 
0a09			;	cp 0 
0a09 28 b1			jr z,.sr_fail			; block not found so EOF 
0a0b			 
0a0b				; save current address for use by higher level words etc 
0a0b			 
0a0b 22 68 fa			ld (store_openaddr),hl 
0a0e			 
0a0e			 
0a0e				; hl contains page number to load 
0a0e d1				pop de   ; get storage 
0a0f ed 53 73 fa		ld (store_readbuf), de     ; current buffer to load in to 
0a13 d5				push de 
0a14				if DEBUG_STORESE 
0a14					DMARK "srg" 
0a14 f5				push af  
0a15 3a 29 0a			ld a, (.dmark)  
0a18 32 68 fe			ld (debug_mark),a  
0a1b 3a 2a 0a			ld a, (.dmark+1)  
0a1e 32 69 fe			ld (debug_mark+1),a  
0a21 3a 2b 0a			ld a, (.dmark+2)  
0a24 32 6a fe			ld (debug_mark+2),a  
0a27 18 03			jr .pastdmark  
0a29 ..			.dmark: db "srg"  
0a2c f1			.pastdmark: pop af  
0a2d			endm  
# End of macro DMARK
0a2d					CALLMONITOR 
0a2d cd 6c fe			call debug_vector  
0a30				endm  
# End of macro CALLMONITOR
0a30				endif 
0a30 cd 65 04			call storage_read_block 
0a33			 
0a33				; if this a continuation read??? 
0a33			 
0a33 2a 73 fa			ld hl, (store_readbuf)     ; current buffer to load in to 
0a36			 
0a36 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a38 cd cf 0f			call addatohl 
0a3b 7e				ld a,(hl) 
0a3c fe 00			cp 0 
0a3e 28 02			jr z, .markiscont 
0a40 3e ff			ld a, 255 
0a42			 
0a42			.markiscont: 
0a42 32 6a fa			ld (store_readcont), a 
0a45			 
0a45				if DEBUG_STORESE 
0a45					DMARK "srC" 
0a45 f5				push af  
0a46 3a 5a 0a			ld a, (.dmark)  
0a49 32 68 fe			ld (debug_mark),a  
0a4c 3a 5b 0a			ld a, (.dmark+1)  
0a4f 32 69 fe			ld (debug_mark+1),a  
0a52 3a 5c 0a			ld a, (.dmark+2)  
0a55 32 6a fe			ld (debug_mark+2),a  
0a58 18 03			jr .pastdmark  
0a5a ..			.dmark: db "srC"  
0a5d f1			.pastdmark: pop af  
0a5e			endm  
# End of macro DMARK
0a5e					CALLMONITOR 
0a5e cd 6c fe			call debug_vector  
0a61				endm  
# End of macro CALLMONITOR
0a61				endif 
0a61				; only short reads enabled 
0a61			 
0a61 3a 72 fa			ld a, (store_longread) 
0a64 fe 00			cp 0 
0a66 ca 33 0b			jp z, .readdone 
0a69			 
0a69			; TODO if block has no zeros then need to read next block  
0a69			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a69			; check last byte of physical block. 
0a69			; if not zero then the next block needs to be loaded 
0a69			 
0a69			 
0a69 2a 73 fa			ld hl, (store_readbuf)     ; current buffer to load in to 
0a6c			 
0a6c 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a6e cd cf 0f			call addatohl 
0a71				;dec hl 
0a71 7e				ld a,(hl) 
0a72				if DEBUG_STORESE 
0a72					DMARK "sr?" 
0a72 f5				push af  
0a73 3a 87 0a			ld a, (.dmark)  
0a76 32 68 fe			ld (debug_mark),a  
0a79 3a 88 0a			ld a, (.dmark+1)  
0a7c 32 69 fe			ld (debug_mark+1),a  
0a7f 3a 89 0a			ld a, (.dmark+2)  
0a82 32 6a fe			ld (debug_mark+2),a  
0a85 18 03			jr .pastdmark  
0a87 ..			.dmark: db "sr?"  
0a8a f1			.pastdmark: pop af  
0a8b			endm  
# End of macro DMARK
0a8b					CALLMONITOR 
0a8b cd 6c fe			call debug_vector  
0a8e				endm  
# End of macro CALLMONITOR
0a8e				endif 
0a8e fe 00			cp 0 
0a90 ca 33 0b			jp z, .readdone 
0a93			 
0a93				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0a93			 
0a93 23				inc hl 
0a94			 
0a94 22 73 fa			ld (store_readbuf), hl     ; save the current buffer to load in to 
0a97			 
0a97 ed 5b 75 fa		ld de, (store_readptr)     ; save the current extent to load 
0a9b			 
0a9b eb				ex de, hl 
0a9c			 
0a9c				; next ext 
0a9c			 
0a9c 23				inc hl 
0a9d 22 75 fa			ld  (store_readptr), hl     ; save the current extent to load 
0aa0			 
0aa0				if DEBUG_STORESE 
0aa0					DMARK "sF2" 
0aa0 f5				push af  
0aa1 3a b5 0a			ld a, (.dmark)  
0aa4 32 68 fe			ld (debug_mark),a  
0aa7 3a b6 0a			ld a, (.dmark+1)  
0aaa 32 69 fe			ld (debug_mark+1),a  
0aad 3a b7 0a			ld a, (.dmark+2)  
0ab0 32 6a fe			ld (debug_mark+2),a  
0ab3 18 03			jr .pastdmark  
0ab5 ..			.dmark: db "sF2"  
0ab8 f1			.pastdmark: pop af  
0ab9			endm  
# End of macro DMARK
0ab9					CALLMONITOR 
0ab9 cd 6c fe			call debug_vector  
0abc				endm  
# End of macro CALLMONITOR
0abc				endif 
0abc			 
0abc				; get and load block 
0abc			 
0abc cd 98 07			call storage_findnextid 
0abf			 
0abf				if DEBUG_STORESE 
0abf					DMARK "sf2" 
0abf f5				push af  
0ac0 3a d4 0a			ld a, (.dmark)  
0ac3 32 68 fe			ld (debug_mark),a  
0ac6 3a d5 0a			ld a, (.dmark+1)  
0ac9 32 69 fe			ld (debug_mark+1),a  
0acc 3a d6 0a			ld a, (.dmark+2)  
0acf 32 6a fe			ld (debug_mark+2),a  
0ad2 18 03			jr .pastdmark  
0ad4 ..			.dmark: db "sf2"  
0ad7 f1			.pastdmark: pop af  
0ad8			endm  
# End of macro DMARK
0ad8					CALLMONITOR 
0ad8 cd 6c fe			call debug_vector  
0adb				endm  
# End of macro CALLMONITOR
0adb				endif 
0adb cd f8 0f			call ishlzero 
0ade			;	ld a, l 
0ade			;	add h 
0ade			;	cp 0 
0ade ca bc 09			jp z,.sr_fail			; block not found so EOF 
0ae1				 
0ae1				; save current address for use by higher level words etc 
0ae1			 
0ae1 22 68 fa			ld (store_openaddr),hl 
0ae4			 
0ae4 cd 65 04			call storage_read_block 
0ae7			 
0ae7				; on a continuation block, we now have the file id and ext in the middle of the block 
0ae7				; we need to pull everything back  
0ae7			 
0ae7 ed 5b 73 fa		ld de, (store_readbuf)     ; current buffer to nudge into 
0aeb 2a 73 fa			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0aee 23				inc hl 
0aef 23				inc hl     ; skip id and ext 
0af0 01 40 00			ld bc, STORE_BLOCK_PHY 
0af3				if DEBUG_STORESE 
0af3					DMARK "SR<" 
0af3 f5				push af  
0af4 3a 08 0b			ld a, (.dmark)  
0af7 32 68 fe			ld (debug_mark),a  
0afa 3a 09 0b			ld a, (.dmark+1)  
0afd 32 69 fe			ld (debug_mark+1),a  
0b00 3a 0a 0b			ld a, (.dmark+2)  
0b03 32 6a fe			ld (debug_mark+2),a  
0b06 18 03			jr .pastdmark  
0b08 ..			.dmark: db "SR<"  
0b0b f1			.pastdmark: pop af  
0b0c			endm  
# End of macro DMARK
0b0c					CALLMONITOR 
0b0c cd 6c fe			call debug_vector  
0b0f				endm  
# End of macro CALLMONITOR
0b0f				endif 
0b0f ed b0			ldir     ; copy data 
0b11			 
0b11				; move the pointer back and pretend we have a full buffer for next recheck 
0b11			 
0b11 1b				dec de 
0b12 1b				dec de 
0b13			 
0b13			; TODO do pop below now short circuit loop????? 
0b13 c1				pop bc     ; get rid of spare de on stack 
0b14				if DEBUG_STORESE 
0b14					DMARK "SR>" 
0b14 f5				push af  
0b15 3a 29 0b			ld a, (.dmark)  
0b18 32 68 fe			ld (debug_mark),a  
0b1b 3a 2a 0b			ld a, (.dmark+1)  
0b1e 32 69 fe			ld (debug_mark+1),a  
0b21 3a 2b 0b			ld a, (.dmark+2)  
0b24 32 6a fe			ld (debug_mark+2),a  
0b27 18 03			jr .pastdmark  
0b29 ..			.dmark: db "SR>"  
0b2c f1			.pastdmark: pop af  
0b2d			endm  
# End of macro DMARK
0b2d					CALLMONITOR 
0b2d cd 6c fe			call debug_vector  
0b30				endm  
# End of macro CALLMONITOR
0b30				endif 
0b30 c3 c1 09			jp .srext 
0b33			 
0b33			 
0b33			 
0b33			 
0b33			 
0b33			.readdone:		 
0b33 e1				pop hl 		 ; return start of data to show as not EOF 
0b34 23				inc hl   ; past file id 
0b35 23				inc hl   ; past ext 
0b36				if DEBUG_STORESE 
0b36					DMARK "SRe" 
0b36 f5				push af  
0b37 3a 4b 0b			ld a, (.dmark)  
0b3a 32 68 fe			ld (debug_mark),a  
0b3d 3a 4c 0b			ld a, (.dmark+1)  
0b40 32 69 fe			ld (debug_mark+1),a  
0b43 3a 4d 0b			ld a, (.dmark+2)  
0b46 32 6a fe			ld (debug_mark+2),a  
0b49 18 03			jr .pastdmark  
0b4b ..			.dmark: db "SRe"  
0b4e f1			.pastdmark: pop af  
0b4f			endm  
# End of macro DMARK
0b4f					CALLMONITOR 
0b4f cd 6c fe			call debug_vector  
0b52				endm  
# End of macro CALLMONITOR
0b52				endif 
0b52 c9					ret 
0b53			 
0b53			 
0b53			 
0b53			; 
0b53			; Append File 
0b53			; 
0b53			; hl - file id to locate 
0b53			; de - pointer to (multi block) string to write 
0b53			 
0b53			.sa_notfound: 
0b53 d1				pop de 
0b54 c9				ret 
0b55			 
0b55			 
0b55			storage_append: 
0b55				; hl -  file id to append to 
0b55				; de - string to append 
0b55			 
0b55 d5				push de 
0b56				 
0b56				if DEBUG_STORESE 
0b56					DMARK "AP1" 
0b56 f5				push af  
0b57 3a 6b 0b			ld a, (.dmark)  
0b5a 32 68 fe			ld (debug_mark),a  
0b5d 3a 6c 0b			ld a, (.dmark+1)  
0b60 32 69 fe			ld (debug_mark+1),a  
0b63 3a 6d 0b			ld a, (.dmark+2)  
0b66 32 6a fe			ld (debug_mark+2),a  
0b69 18 03			jr .pastdmark  
0b6b ..			.dmark: db "AP1"  
0b6e f1			.pastdmark: pop af  
0b6f			endm  
# End of macro DMARK
0b6f					CALLMONITOR 
0b6f cd 6c fe			call debug_vector  
0b72				endm  
# End of macro CALLMONITOR
0b72				endif 
0b72			 
0b72 7d				ld a, l 
0b73 32 6b fa			ld (store_tmpid), a 
0b76			 
0b76				; get file header  
0b76			 
0b76 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b78 3a 6b fa			ld a, (store_tmpid) 
0b7b 5f				ld e, a 
0b7c			 
0b7c 21 40 00				ld hl, STORE_BLOCK_PHY 
0b7f cd 98 07				call storage_findnextid 
0b82			 
0b82 cd f8 0f			call ishlzero 
0b85 28 cc			jr z, .sa_notfound 
0b87			 
0b87 22 62 fa			ld (store_tmppageid), hl 
0b8a			 
0b8a				; TODO handle file id not found 
0b8a			 
0b8a				if DEBUG_STORESE 
0b8a					DMARK "AP2" 
0b8a f5				push af  
0b8b 3a 9f 0b			ld a, (.dmark)  
0b8e 32 68 fe			ld (debug_mark),a  
0b91 3a a0 0b			ld a, (.dmark+1)  
0b94 32 69 fe			ld (debug_mark+1),a  
0b97 3a a1 0b			ld a, (.dmark+2)  
0b9a 32 6a fe			ld (debug_mark+2),a  
0b9d 18 03			jr .pastdmark  
0b9f ..			.dmark: db "AP2"  
0ba2 f1			.pastdmark: pop af  
0ba3			endm  
# End of macro DMARK
0ba3					CALLMONITOR 
0ba3 cd 6c fe			call debug_vector  
0ba6				endm  
# End of macro CALLMONITOR
0ba6				endif 
0ba6			 
0ba6				; update file extent count 
0ba6			 
0ba6 11 77 fa			ld de, store_page 
0ba9			 
0ba9 cd 65 04			call storage_read_block 
0bac			 
0bac				if DEBUG_STORESE 
0bac					DMARK "AP3" 
0bac f5				push af  
0bad 3a c1 0b			ld a, (.dmark)  
0bb0 32 68 fe			ld (debug_mark),a  
0bb3 3a c2 0b			ld a, (.dmark+1)  
0bb6 32 69 fe			ld (debug_mark+1),a  
0bb9 3a c3 0b			ld a, (.dmark+2)  
0bbc 32 6a fe			ld (debug_mark+2),a  
0bbf 18 03			jr .pastdmark  
0bc1 ..			.dmark: db "AP3"  
0bc4 f1			.pastdmark: pop af  
0bc5			endm  
# End of macro DMARK
0bc5					CALLMONITOR 
0bc5 cd 6c fe			call debug_vector  
0bc8				endm  
# End of macro CALLMONITOR
0bc8				endif 
0bc8			;	ld (store_tmppageid), hl 
0bc8			 
0bc8 3a 79 fa			ld a, (store_page+2) 
0bcb 3c				inc a 
0bcc 32 79 fa			ld (store_page+2), a 
0bcf 32 6a fa			ld (store_tmpext), a 
0bd2				 
0bd2				if DEBUG_STORESE 
0bd2					DMARK "AP3" 
0bd2 f5				push af  
0bd3 3a e7 0b			ld a, (.dmark)  
0bd6 32 68 fe			ld (debug_mark),a  
0bd9 3a e8 0b			ld a, (.dmark+1)  
0bdc 32 69 fe			ld (debug_mark+1),a  
0bdf 3a e9 0b			ld a, (.dmark+2)  
0be2 32 6a fe			ld (debug_mark+2),a  
0be5 18 03			jr .pastdmark  
0be7 ..			.dmark: db "AP3"  
0bea f1			.pastdmark: pop af  
0beb			endm  
# End of macro DMARK
0beb					CALLMONITOR 
0beb cd 6c fe			call debug_vector  
0bee				endm  
# End of macro CALLMONITOR
0bee				endif 
0bee 2a 62 fa			ld hl, (store_tmppageid) 
0bf1 11 77 fa			ld de, store_page 
0bf4 cd ca 04			call storage_write_block 
0bf7			 
0bf7				; find free block 
0bf7			 
0bf7 11 00 00			ld de, 0			 ; file extent to locate 
0bfa			 
0bfa 21 40 00				ld hl, STORE_BLOCK_PHY 
0bfd cd 98 07				call storage_findnextid 
0c00 cd f8 0f			call ishlzero 
0c03 ca 53 0b			jp z, .sa_notfound 
0c06			 
0c06					; TODO handle no space left 
0c06					 
0c06 22 62 fa				ld (store_tmppageid), hl 
0c09			 
0c09				if DEBUG_STORESE 
0c09					DMARK "AP4" 
0c09 f5				push af  
0c0a 3a 1e 0c			ld a, (.dmark)  
0c0d 32 68 fe			ld (debug_mark),a  
0c10 3a 1f 0c			ld a, (.dmark+1)  
0c13 32 69 fe			ld (debug_mark+1),a  
0c16 3a 20 0c			ld a, (.dmark+2)  
0c19 32 6a fe			ld (debug_mark+2),a  
0c1c 18 03			jr .pastdmark  
0c1e ..			.dmark: db "AP4"  
0c21 f1			.pastdmark: pop af  
0c22			endm  
# End of macro DMARK
0c22					CALLMONITOR 
0c22 cd 6c fe			call debug_vector  
0c25				endm  
# End of macro CALLMONITOR
0c25				endif 
0c25					; init the buffer with zeros so we can id if the buffer is full or not 
0c25			 
0c25 e5					push hl 
0c26 c5					push bc 
0c27			 
0c27 21 77 fa				ld hl, store_page 
0c2a 06 40				ld b, STORE_BLOCK_PHY 
0c2c 3e 00				ld a, 0 
0c2e 77			.zeroblock:	ld (hl), a 
0c2f 23					inc hl 
0c30 10 fc				djnz .zeroblock 
0c32			 
0c32 c1					pop bc 
0c33 e1					pop hl 
0c34			 
0c34					; construct block 
0c34			 
0c34 3a 6b fa				ld a, (store_tmpid) 
0c37 32 77 fa				ld (store_page), a   ; file id 
0c3a 3a 6a fa				ld a, (store_tmpext)   ; extent for this block 
0c3d 32 78 fa				ld (store_page+1), a 
0c40			 
0c40 e1					pop hl    ; get string to write 
0c41 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c43 11 79 fa				ld de, store_page+2 
0c46			 
0c46				if DEBUG_STORESE 
0c46					DMARK "AP5" 
0c46 f5				push af  
0c47 3a 5b 0c			ld a, (.dmark)  
0c4a 32 68 fe			ld (debug_mark),a  
0c4d 3a 5c 0c			ld a, (.dmark+1)  
0c50 32 69 fe			ld (debug_mark+1),a  
0c53 3a 5d 0c			ld a, (.dmark+2)  
0c56 32 6a fe			ld (debug_mark+2),a  
0c59 18 03			jr .pastdmark  
0c5b ..			.dmark: db "AP5"  
0c5e f1			.pastdmark: pop af  
0c5f			endm  
# End of macro DMARK
0c5f					CALLMONITOR 
0c5f cd 6c fe			call debug_vector  
0c62				endm  
# End of macro CALLMONITOR
0c62				endif 
0c62			 
0c62			 
0c62			 
0c62					; fill buffer with data until end of string or full block 
0c62			 
0c62 7e			.appd:		ld a, (hl) 
0c63 12					ld (de), a 
0c64 fe 00				cp 0 
0c66 28 04				jr z, .appdone 
0c68 23					inc hl 
0c69 13					inc de 
0c6a 10 f6				djnz .appd 
0c6c			 
0c6c e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c6d f5					push af   		; save last byte dumped 
0c6e			 
0c6e			 
0c6e 2a 62 fa			ld hl, (store_tmppageid) 
0c71 11 77 fa			ld de, store_page 
0c74				if DEBUG_STORESE 
0c74					DMARK "AP6" 
0c74 f5				push af  
0c75 3a 89 0c			ld a, (.dmark)  
0c78 32 68 fe			ld (debug_mark),a  
0c7b 3a 8a 0c			ld a, (.dmark+1)  
0c7e 32 69 fe			ld (debug_mark+1),a  
0c81 3a 8b 0c			ld a, (.dmark+2)  
0c84 32 6a fe			ld (debug_mark+2),a  
0c87 18 03			jr .pastdmark  
0c89 ..			.dmark: db "AP6"  
0c8c f1			.pastdmark: pop af  
0c8d			endm  
# End of macro DMARK
0c8d					CALLMONITOR 
0c8d cd 6c fe			call debug_vector  
0c90				endm  
# End of macro CALLMONITOR
0c90				endif 
0c90 cd ca 04				call storage_write_block 
0c93			 
0c93			 
0c93				; was that a full block of data written? 
0c93				; any more to write out? 
0c93			 
0c93				; if yes then set vars and jump to start of function again 
0c93			 
0c93 f1					pop af 
0c94 d1					pop de 
0c95			 
0c95 fe 00				cp 0		 ; no, string was fully written 
0c97 c8					ret z 
0c98			 
0c98					; setup vars for next cycle 
0c98			 
0c98 3a 6b fa				ld a, (store_tmpid) 
0c9b 6f					ld l, a 
0c9c 26 00				ld h, 0 
0c9e			 
0c9e c3 55 0b			 	jp storage_append	 ; yes, need to write out some more 
0ca1			 
0ca1			 
0ca1			 
0ca1			 
0ca1			 
0ca1			 
0ca1			 
0ca1			if DEBUG_STORECF 
0ca1			storageput:	 
0ca1					ret 
0ca1			storageread: 
0ca1					ld hl, store_page 
0ca1					ld b, 200 
0ca1					ld a,0 
0ca1			.src:		ld (hl),a 
0ca1					inc hl 
0ca1					djnz .src 
0ca1					 
0ca1			 
0ca1					ld de, 0 
0ca1					ld bc, 1 
0ca1					ld hl, store_page 
0ca1					call cfRead 
0ca1			 
0ca1				call cfGetError 
0ca1				ld hl,scratch 
0ca1				call hexout 
0ca1				ld hl, scratch+2 
0ca1				ld a, 0 
0ca1				ld (hl),a 
0ca1				ld de, scratch 
0ca1				ld a,display_row_1 
0ca1				call str_at_display 
0ca1				call update_display 
0ca1			 
0ca1					ld hl, store_page 
0ca1					ld (os_cur_ptr),hl 
0ca1			 
0ca1					ret 
0ca1			endif 
0ca1			 
0ca1			 
0ca1			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ca1			 
0ca1			storage_clear_page: 
0ca1 e5				push hl 
0ca2 d5				push de 
0ca3 c5				push bc 
0ca4 21 77 fa			ld hl, store_page 
0ca7 3e 00			ld a, 0 
0ca9 77				ld (hl), a 
0caa			 
0caa 11 78 fa			ld de, store_page+1 
0cad 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0cb0			 
0cb0 ed b0			ldir 
0cb2				 
0cb2 c1				pop bc 
0cb3 d1				pop de 
0cb4 e1				pop hl 
0cb5 c9				ret 
0cb6			 
0cb6			; eof 
# End of file firmware_storage.asm
0cb6			  
0cb6			; support routines for above hardware abstraction layer  
0cb6			  
0cb6			include "firmware_general.asm"        ; general support functions  
0cb6			 
0cb6			; word look up 
0cb6			 
0cb6			; in 
0cb6			; a is the index 
0cb6			; hl is pointer start of array 
0cb6			; 
0cb6			; returns 
0cb6			; hl to the word 
0cb6			; 
0cb6			 
0cb6			table_lookup:  
0cb6 d5					push de 
0cb7 eb					ex de, hl 
0cb8			 
0cb8 6f					ld l, a 
0cb9 26 00				ld h, 0 
0cbb 29					add hl, hl 
0cbc 19					add hl, de 
0cbd 7e					ld a, (hl) 
0cbe 23					inc hl 
0cbf 66					ld h,(hl) 
0cc0 6f					ld l, a 
0cc1			 
0cc1 d1					pop de 
0cc2 c9					ret 
0cc3			 
0cc3			; Delay loops 
0cc3			 
0cc3			 
0cc3			 
0cc3			aDelayInMS: 
0cc3 c5				push bc 
0cc4 47				ld b,a 
0cc5			msdelay: 
0cc5 c5				push bc 
0cc6				 
0cc6			 
0cc6 01 41 00			ld bc,041h 
0cc9 cd e1 0c			call delayloop 
0ccc c1				pop bc 
0ccd 05				dec b 
0cce 20 f5			jr nz,msdelay 
0cd0			 
0cd0			;if CPU_CLOCK_8MHZ 
0cd0			;msdelay8: 
0cd0			;	push bc 
0cd0			;	 
0cd0			; 
0cd0			;	ld bc,041h 
0cd0			;	call delayloop 
0cd0			;	pop bc 
0cd0			;	dec b 
0cd0			;	jr nz,msdelay8 
0cd0			;endif 
0cd0			 
0cd0			 
0cd0 c1				pop bc 
0cd1 c9				ret 
0cd2			 
0cd2			 
0cd2			delay250ms: 
0cd2				;push de 
0cd2 01 00 40			ld bc, 04000h 
0cd5 c3 e1 0c			jp delayloop 
0cd8			delay500ms: 
0cd8				;push de 
0cd8 01 00 80			ld bc, 08000h 
0cdb c3 e1 0c			jp delayloop 
0cde			delay1s: 
0cde				;push bc 
0cde			   ; Clobbers A, d and e 
0cde 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0ce1			delayloop: 
0ce1 c5			    push bc 
0ce2			 
0ce2			if BASE_CPM 
0ce2				ld bc, CPM_DELAY_TUNE 
0ce2			.cpmloop: 
0ce2				push bc 
0ce2			 
0ce2			endif 
0ce2			 
0ce2			 
0ce2			 
0ce2			delayloopi: 
0ce2			;	push bc 
0ce2			;.dl: 
0ce2 cb 47		    bit     0,a    	; 8 
0ce4 cb 47		    bit     0,a    	; 8 
0ce6 cb 47		    bit     0,a    	; 8 
0ce8 e6 ff		    and     255  	; 7 
0cea 0b			    dec     bc      	; 6 
0ceb 79			    ld      a,c     	; 4 
0cec b0			    or      b     	; 4 
0ced c2 e2 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cf0			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cf0				;pop de 
0cf0			;pop bc 
0cf0			 
0cf0			if BASE_CPM 
0cf0				pop bc 
0cf0				 
0cf0			    dec     bc      	; 6 
0cf0			    ld      a,c     	; 4 
0cf0			    or      b     	; 4 
0cf0			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cf0				 
0cf0			 
0cf0			endif 
0cf0			;if CPU_CLOCK_8MHZ 
0cf0			;    pop bc 
0cf0			;    push bc 
0cf0			;.dl8: 
0cf0			;    bit     0,a    	; 8 
0cf0			;    bit     0,a    	; 8 
0cf0			;    bit     0,a    	; 8 
0cf0			;    and     255  	; 7 
0cf0			;    dec     bc      	; 6 
0cf0			;    ld      a,c     	; 4 
0cf0			;    or      b     	; 4 
0cf0			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cf0			;endif 
0cf0			 
0cf0			;if CPU_CLOCK_10MHZ 
0cf0			;    pop bc 
0cf0			;    push bc 
0cf0			;.dl8: 
0cf0			;    bit     0,a    	; 8 
0cf0			;    bit     0,a    	; 8 
0cf0			;    bit     0,a    	; 8 
0cf0			;    and     255  	; 7 
0cf0			;    dec     bc      	; 6 
0cf0			;    ld      a,c     	; 4 
0cf0			;    or      b     	; 4 
0cf0			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cf0			;endif 
0cf0 c1			    pop bc 
0cf1			 
0cf1 c9				ret 
0cf2			 
0cf2			 
0cf2			 
0cf2			; eof 
# End of file firmware_general.asm
0cf2			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0cf2			; display routines that use the physical hardware abstraction layer 
0cf2			 
0cf2			 
0cf2			; Display an activity indicator 
0cf2			; Each call returns the new char pointed to in hl 
0cf2			 
0cf2			active: 
0cf2 3a c3 fb			ld a, (display_active) 
0cf5 fe 06			cp 6 
0cf7			 
0cf7 20 02			jr nz, .sne 
0cf9				; gone past the last one reset sequence 
0cf9 3e ff			ld a, 255 
0cfb			 
0cfb			.sne:   
0cfb				; get the next char in seq 
0cfb 3c				inc a 
0cfc 32 c3 fb			ld (display_active), a 
0cff			 
0cff				; look up the string in the table 
0cff 21 16 0d			ld hl, actseq 
0d02 cb 27			sla a 
0d04 cd cf 0f			call addatohl 
0d07 cd 34 24			call loadwordinhl 
0d0a			 
0d0a				; forth will write the to string when pushing so move from rom to ram 
0d0a			 
0d0a 11 c4 fb			ld de, display_active+1 
0d0d 01 02 00			ld bc, 2 
0d10 ed b0			ldir 
0d12			 
0d12 21 c4 fb			ld hl, display_active+1 
0d15 c9				ret 
0d16				 
0d16				 
0d16			 
0d16			 
0d16			;db "|/-\|-\" 
0d16			 
0d16			actseq: 
0d16			 
0d16 24 0d		dw spin0 
0d18 26 0d		dw spin1 
0d1a 28 0d		dw spin2 
0d1c 2a 0d		dw spin3 
0d1e 28 0d		dw spin2 
0d20 26 0d		dw spin1 
0d22 24 0d		dw spin0 
0d24			 
0d24 .. 00		spin0: db " ", 0 
0d26 .. 00		spin1: db "-", 0 
0d28 .. 00		spin2: db "+", 0 
0d2a .. 00		spin3: db "#", 0 
0d2c			 
0d2c			 
0d2c			; information window 
0d2c			 
0d2c			; pass hl with 1st string to display 
0d2c			; pass de with 2nd string to display 
0d2c			 
0d2c			info_panel: 
0d2c e5				push hl 
0d2d			 
0d2d 2a c9 fb			ld hl, (display_fb_active) 
0d30 e5				push hl    ; future de destination 
0d31 21 ae fd				ld hl, display_fb0 
0d34 22 c9 fb				ld (display_fb_active), hl 
0d37			 
0d37			;	call clear_display 
0d37			 
0d37				if BASE_CPM 
0d37				ld a, '.' 
0d37				else 
0d37 3e a5			ld a, 165 
0d39				endif 
0d39 cd a0 0d			call fill_display 
0d3c			 
0d3c			 
0d3c 3e 55			ld a, display_row_3 + 5 
0d3e cd ae 0d			call str_at_display 
0d41			 
0d41 e1				pop hl 
0d42 d1				pop de 
0d43			 
0d43 e5				push hl 
0d44			 
0d44			 
0d44 3e 2d			ld a, display_row_2 + 5 
0d46 cd ae 0d			call str_at_display 
0d49			 
0d49			 
0d49 cd be 0d			call update_display 
0d4c cd 7d 20			call next_page_prompt 
0d4f cd 9b 0d			call clear_display 
0d52			 
0d52				 
0d52 21 0d fd				ld hl, display_fb1 
0d55 22 c9 fb				ld (display_fb_active), hl 
0d58 cd be 0d			call update_display 
0d5b			 
0d5b e1				pop hl 
0d5c			 
0d5c c9				ret 
0d5d			 
0d5d			 
0d5d			 
0d5d			 
0d5d			; TODO windowing? 
0d5d			 
0d5d			; TODO scroll line up 
0d5d			 
0d5d			scroll_up: 
0d5d			 
0d5d e5				push hl 
0d5e d5				push de 
0d5f c5				push bc 
0d60			 
0d60				; get frame buffer  
0d60			 
0d60 2a c9 fb			ld hl, (display_fb_active) 
0d63 e5				push hl    ; future de destination 
0d64			 
0d64 11 28 00			ld  de, display_cols 
0d67 19				add hl, de 
0d68			 
0d68 d1				pop de 
0d69			 
0d69				;ex de, hl 
0d69 01 9f 00			ld bc, display_fb_len -1  
0d6c			;if DEBUG_FORTH_WORDS 
0d6c			;	DMARK "SCL" 
0d6c			;	CALLMONITOR 
0d6c			;endif	 
0d6c ed b0			ldir 
0d6e			 
0d6e				; wipe bottom row 
0d6e			 
0d6e			 
0d6e 2a c9 fb			ld hl, (display_fb_active) 
0d71 11 a0 00			ld de, display_cols*display_rows 
0d74 19				add hl, de 
0d75 06 28			ld b, display_cols 
0d77 3e 20			ld a, ' ' 
0d79			.scwipe: 
0d79 77				ld (hl), a 
0d7a 2b				dec hl 
0d7b 10 fc			djnz .scwipe 
0d7d			 
0d7d				;pop hl 
0d7d			 
0d7d c1				pop bc 
0d7e d1				pop de 
0d7f e1				pop hl 
0d80			 
0d80 c9				ret 
0d81			 
0d81			 
0d81			;scroll_upo: 
0d81			;	ld de, display_row_1 
0d81			 ;	ld hl, display_row_2 
0d81			;	ld bc, display_cols 
0d81			;	ldir 
0d81			;	ld de, display_row_2 
0d81			 ;	ld hl, display_row_3 
0d81			;	ld bc, display_cols 
0d81			;	ldir 
0d81			;	ld de, display_row_3 
0d81			 ;	ld hl, display_row_4 
0d81			;	ld bc, display_cols 
0d81			;	ldir 
0d81			 
0d81			; TODO clear row 4 
0d81			 
0d81			;	ret 
0d81			 
0d81				 
0d81			scroll_down: 
0d81			 
0d81 e5				push hl 
0d82 d5				push de 
0d83 c5				push bc 
0d84			 
0d84				; get frame buffer  
0d84			 
0d84 2a c9 fb			ld hl, (display_fb_active) 
0d87			 
0d87 11 9f 00			ld de, display_fb_len - 1 
0d8a 19				add hl, de 
0d8b			 
0d8b e5			push hl    ; future de destination 
0d8c			 
0d8c 11 28 00			ld  de, display_cols 
0d8f ed 52			sbc hl, de 
0d91			 
0d91			 
0d91 d1				pop de 
0d92			 
0d92			;	ex de, hl 
0d92 01 9f 00			ld bc, display_fb_len -1  
0d95			 
0d95			 
0d95				 
0d95			 
0d95 ed b0			ldir 
0d97			 
0d97				; wipe bottom row 
0d97			 
0d97			 
0d97			;	ld hl, (display_fb_active) 
0d97			;;	ld de, display_cols*display_rows 
0d97			;;	add hl, de 
0d97			;	ld b, display_cols 
0d97			;	ld a, ' ' 
0d97			;.scwiped: 
0d97			;	ld (hl), a 
0d97			;	dec hl 
0d97			;	djnz .scwiped 
0d97			 
0d97				;pop hl 
0d97			 
0d97 c1				pop bc 
0d98 d1				pop de 
0d99 e1				pop hl 
0d9a			 
0d9a c9				ret 
0d9b			;scroll_down: 
0d9b			;	ld de, display_row_4 
0d9b			;	ld hl, display_row_3 
0d9b			;	ld bc, display_cols 
0d9b			;	ldir 
0d9b			;	ld de, display_row_3 
0d9b			; 	ld hl, display_row_2 
0d9b			;	ld bc, display_cols 
0d9b			;	ldir 
0d9b			;	ld de, display_row_2 
0d9b			;	ld hl, display_row_1 
0d9b			;	ld bc, display_cols 
0d9b			;	ldir 
0d9b			;;; TODO clear row 1 
0d9b			;	ret 
0d9b			 
0d9b			 
0d9b			 
0d9b			 
0d9b			 
0d9b			; clear active frame buffer 
0d9b			 
0d9b			clear_display: 
0d9b 3e 20			ld a, ' ' 
0d9d c3 a0 0d			jp fill_display 
0da0			 
0da0			; fill active frame buffer with a char in A 
0da0			 
0da0			fill_display: 
0da0 06 a0			ld b,display_fb_len 
0da2 2a c9 fb			ld hl, (display_fb_active) 
0da5 77			.fd1:	ld (hl),a 
0da6 23				inc hl 
0da7 10 fc			djnz .fd1 
0da9 23				inc hl 
0daa 3e 00			ld a,0 
0dac 77				ld (hl),a 
0dad			 
0dad			 
0dad c9				ret 
0dae			; Write string (DE) at pos (A) to active frame buffer 
0dae			 
0dae 2a c9 fb		str_at_display:    ld hl,(display_fb_active) 
0db1 06 00					ld b,0 
0db3 4f					ld c,a 
0db4 09					add hl,bc 
0db5 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0db6 b7			            OR   A              ;Null terminator? 
0db7 c8			            RET  Z              ;Yes, so finished 
0db8 77					ld (hl),a 
0db9 23				inc hl 
0dba 13			            INC  DE             ;Point to next character 
0dbb 18 f8		            JR   .sad1     ;Repeat 
0dbd c9					ret 
0dbe			 
0dbe			; using current frame buffer write to physical display 
0dbe			 
0dbe			update_display: 
0dbe e5				push hl 
0dbf 2a c9 fb			ld hl, (display_fb_active) 
0dc2 cd cd 76			call write_display 
0dc5 e1				pop hl 
0dc6 c9				ret 
0dc7			 
0dc7			; TODO scrolling 
0dc7			 
0dc7			 
0dc7			; move cursor right one char 
0dc7			cursor_right: 
0dc7			 
0dc7				; TODO shift right 
0dc7				; TODO if beyond max col 
0dc7				; TODO       cursor_next_line 
0dc7			 
0dc7 c9				ret 
0dc8			 
0dc8			 
0dc8			cursor_next_line: 
0dc8				; TODO first char 
0dc8				; TODO line down 
0dc8				; TODO if past last row 
0dc8				; TODO    scroll up 
0dc8			 
0dc8 c9				ret 
0dc9			 
0dc9			cursor_left: 
0dc9				; TODO shift left 
0dc9				; TODO if beyond left  
0dc9				; TODO     cursor prev line 
0dc9				 
0dc9 c9				ret 
0dca			 
0dca			cursor_prev_line: 
0dca				; TODO last char 
0dca				; TODO line up 
0dca				; TODO if past first row 
0dca				; TODO   scroll down 
0dca			 
0dca c9				ret 
0dcb			 
0dcb			 
0dcb			cout: 
0dcb				; A - char 
0dcb c9				ret 
0dcc			 
0dcc			 
0dcc			; Display a menu and allow item selection (optional toggle items) 
0dcc			; 
0dcc			; format: 
0dcc			; hl pointer to word array with zero term for items 
0dcc			; e.g.    db item1 
0dcc			;         db .... 
0dcc			;         db 0 
0dcc			; 
0dcc			; a = starting menu item  
0dcc			; 
0dcc			; de = pointer item toggle array   (todo) 
0dcc			; 
0dcc			; returns item selected in a 1-... 
0dcc			; returns 0 if back button pressed 
0dcc			; 
0dcc			; NOTE: Uses system frame buffer to display 
0dcc			; 
0dcc			; LEFT, Q = go back 
0dcc			; RIGHT, SPACE, CR = select 
0dcc			; UP, A - Up 
0dcc			; DOWN, Z - Down 
0dcc			 
0dcc			 
0dcc			 
0dcc			 
0dcc			 
0dcc			menu: 
0dcc			 
0dcc					; keep array pointer 
0dcc			 
0dcc 22 70 fa				ld (store_tmp1), hl 
0dcf 32 6e fa				ld (store_tmp2), a 
0dd2			 
0dd2					; check for key bounce 
0dd2			 
0dd2			if BASE_KEV 
0dd2			 
0dd2 cd 18 7a		.mbounce:	call cin 
0dd5 fe 00				cp 0 
0dd7 20 f9				jr nz, .mbounce 
0dd9			endif 
0dd9					; for ease use ex 
0dd9			 
0dd9					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0dd9 21 ae fd				ld hl, display_fb0 
0ddc 22 c9 fb				ld (display_fb_active), hl 
0ddf			 
0ddf cd 9b 0d		.mloop:		call clear_display 
0de2 cd be 0d				call update_display 
0de5			 
0de5					; draw selection id '>' at 1 
0de5			 
0de5					; init start of list display 
0de5			 
0de5 3e 05				ld a, 5 
0de7 32 6c fa				ld (store_tmp3), a   ; display row count 
0dea 3a 6e fa				ld a,( store_tmp2) 
0ded 32 6f fa				ld (store_tmp2+1), a   ; display item count 
0df0			 
0df0					 
0df0			.mitem:	 
0df0			 
0df0			 
0df0 3a 6f fa				ld a,(store_tmp2+1) 
0df3 6f					ld l, a 
0df4 26 00				ld h, 0 
0df6 29					add hl, hl 
0df7 ed 5b 70 fa			ld de, (store_tmp1) 
0dfb 19					add hl, de 
0dfc 7e					ld a, (hl) 
0dfd 23					inc hl 
0dfe 66					ld h,(hl) 
0dff 6f					ld l, a 
0e00			 
0e00 cd f8 0f				call ishlzero 
0e03 28 1a				jr z, .mdone 
0e05			 
0e05 eb					ex de, hl 
0e06 3a 6c fa				ld a, (store_tmp3) 
0e09 cd ae 0d				call str_at_display 
0e0c					 
0e0c			 
0e0c					; next item 
0e0c 3a 6f fa				ld a, (store_tmp2+1) 
0e0f 3c					inc a 
0e10 32 6f fa				ld (store_tmp2+1), a   ; display item count 
0e13			 
0e13			 		; next row 
0e13			 
0e13 3a 6c fa				ld a, (store_tmp3) 
0e16 c6 28				add display_cols 
0e18 32 6c fa				ld (store_tmp3), a 
0e1b			 
0e1b					; at end of screen? 
0e1b			 
0e1b fe 10				cp display_rows*4 
0e1d 20 d1				jr nz, .mitem 
0e1f			 
0e1f			 
0e1f			.mdone: 
0e1f cd f8 0f				call ishlzero 
0e22 28 08				jr z, .nodn 
0e24			 
0e24 3e 78				ld a, display_row_4 
0e26 11 a5 0e				ld de, .mdown 
0e29 cd ae 0d				call str_at_display 
0e2c			 
0e2c					; draw options to fill the screens with active item on line 1 
0e2c					; if current option is 2 or more then display ^ in top 
0e2c			 
0e2c 3a 6e fa		.nodn:		ld a, (store_tmp2) 
0e2f fe 00				cp 0 
0e31 28 08				jr z, .noup 
0e33			 
0e33 3e 00				ld a, 0 
0e35 11 a3 0e				ld de, .mup 
0e38 cd ae 0d				call str_at_display 
0e3b			 
0e3b 3e 02		.noup:		ld a, 2 
0e3d 11 a1 0e				ld de, .msel 
0e40 cd ae 0d				call str_at_display 
0e43			 
0e43					; if current option + 1 is not null then display V in bottom 
0e43					; get key 
0e43 cd be 0d				call update_display 
0e46			 
0e46			 
0e46					; handle key 
0e46			 
0e46 cd 07 7a				call cin_wait 
0e49			 
0e49 fe 05				cp KEY_UP 
0e4b 28 2b				jr z, .mgoup 
0e4d fe 61				cp 'a' 
0e4f 28 27				jr z, .mgoup 
0e51 fe 0a				cp KEY_DOWN 
0e53 28 32				jr z, .mgod 
0e55 fe 7a				cp 'z' 
0e57 28 2e				jr z, .mgod 
0e59 fe 20				cp ' ' 
0e5b 28 34				jr z, .goend 
0e5d fe 0c				cp KEY_RIGHT 
0e5f 28 30				jr z, .goend 
0e61 fe 0d				cp KEY_CR 
0e63 28 2c				jr z, .goend 
0e65 fe 71				cp 'q' 
0e67 28 0b				jr z, .goback 
0e69			 
0e69 fe 0b				cp KEY_LEFT 
0e6b 28 07				jr z, .goback 
0e6d fe 08				cp KEY_BS 
0e6f 28 03				jr z, .goback 
0e71 c3 df 0d				jp .mloop 
0e74			 
0e74			.goback: 
0e74 3e 00			ld a, 0 
0e76 18 1d			jr .goend2 
0e78			 
0e78				; move up one 
0e78			.mgoup: 
0e78 3a 6e fa				ld a, (store_tmp2) 
0e7b fe 00				cp 0 
0e7d ca df 0d				jp z, .mloop 
0e80 3d					dec a 
0e81 32 6e fa				ld (store_tmp2), a 
0e84 c3 df 0d				jp .mloop 
0e87			 
0e87				; move down one 
0e87			.mgod: 
0e87 3a 6e fa				ld a, (store_tmp2) 
0e8a 3c					inc a 
0e8b 32 6e fa				ld (store_tmp2), a 
0e8e c3 df 0d				jp .mloop 
0e91			 
0e91			 
0e91			.goend: 
0e91					; get selected item number 
0e91			 
0e91 3a 6e fa				ld a, (store_tmp2) 
0e94 3c					inc a 
0e95			 
0e95			.goend2: 
0e95 f5					push af 
0e96			 
0e96					; restore active fb 
0e96					; TODO BUG assumes fb1 
0e96			 
0e96 21 0d fd				ld hl, display_fb1 
0e99 22 c9 fb				ld (display_fb_active), hl 
0e9c			 
0e9c					; restore main regs 
0e9c			 
0e9c			 
0e9c cd be 0d				call update_display 
0e9f			 
0e9f f1					pop af 
0ea0			 
0ea0 c9				ret 
0ea1			 
0ea1 .. 00		.msel:   db ">",0 
0ea3 .. 00		.mup:   db "^",0 
0ea5 .. 00		.mdown:   db "v",0 
0ea7			 
0ea7			 
0ea7			; eof 
0ea7			 
# End of file firmware_display.asm
0ea7			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ea7			; random number generators 
0ea7			 
0ea7			 
0ea7			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ea7			 
0ea7			 
0ea7			;-----> Generate a random number 
0ea7			; output a=answer 0<=a<=255 
0ea7			; all registers are preserved except: af 
0ea7			random: 
0ea7 e5			        push    hl 
0ea8 d5			        push    de 
0ea9 2a a8 fb		        ld      hl,(randData) 
0eac ed 5f		        ld      a,r 
0eae 57			        ld      d,a 
0eaf 5e			        ld      e,(hl) 
0eb0 19			        add     hl,de 
0eb1 85			        add     a,l 
0eb2 ac			        xor     h 
0eb3 22 a8 fb		        ld      (randData),hl 
0eb6 d1			        pop     de 
0eb7 e1			        pop     hl 
0eb8 c9			        ret 
0eb9			 
0eb9			 
0eb9			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0eb9			 
0eb9			 
0eb9			 
0eb9			;------LFSR------ 
0eb9			;James Montelongo 
0eb9			;optimized by Spencer Putt 
0eb9			;out: 
0eb9			; a = 8 bit random number 
0eb9			RandLFSR: 
0eb9 21 ae fb		        ld hl,LFSRSeed+4 
0ebc 5e			        ld e,(hl) 
0ebd 23			        inc hl 
0ebe 56			        ld d,(hl) 
0ebf 23			        inc hl 
0ec0 4e			        ld c,(hl) 
0ec1 23			        inc hl 
0ec2 7e			        ld a,(hl) 
0ec3 47			        ld b,a 
0ec4 cb 13		        rl e  
0ec6 cb 12			rl d 
0ec8 cb 11		        rl c  
0eca 17				rla 
0ecb cb 13		        rl e  
0ecd cb 12			rl d 
0ecf cb 11		        rl c  
0ed1 17				rla 
0ed2 cb 13		        rl e  
0ed4 cb 12			rl d 
0ed6 cb 11		        rl c  
0ed8 17				rla 
0ed9 67			        ld h,a 
0eda cb 13		        rl e  
0edc cb 12			rl d 
0ede cb 11		        rl c  
0ee0 17				rla 
0ee1 a8			        xor b 
0ee2 cb 13		        rl e  
0ee4 cb 12			rl d 
0ee6 ac			        xor h 
0ee7 a9			        xor c 
0ee8 aa			        xor d 
0ee9 21 b0 fb		        ld hl,LFSRSeed+6 
0eec 11 b1 fb		        ld de,LFSRSeed+7 
0eef 01 07 00		        ld bc,7 
0ef2 ed b8		        lddr 
0ef4 12			        ld (de),a 
0ef5 c9			        ret 
0ef6			 
0ef6			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0ef6			 
0ef6			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0ef6			 
0ef6			 
0ef6			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0ef6			 
0ef6			prng16: 
0ef6			;Inputs: 
0ef6			;   (seed1) contains a 16-bit seed value 
0ef6			;   (seed2) contains a NON-ZERO 16-bit seed value 
0ef6			;Outputs: 
0ef6			;   HL is the result 
0ef6			;   BC is the result of the LCG, so not that great of quality 
0ef6			;   DE is preserved 
0ef6			;Destroys: 
0ef6			;   AF 
0ef6			;cycle: 4,294,901,760 (almost 4.3 billion) 
0ef6			;160cc 
0ef6			;26 bytes 
0ef6 2a a2 fb		    ld hl,(seed1) 
0ef9 44			    ld b,h 
0efa 4d			    ld c,l 
0efb 29			    add hl,hl 
0efc 29			    add hl,hl 
0efd 2c			    inc l 
0efe 09			    add hl,bc 
0eff 22 a2 fb		    ld (seed1),hl 
0f02 2a a0 fb		    ld hl,(seed2) 
0f05 29			    add hl,hl 
0f06 9f			    sbc a,a 
0f07 e6 2d		    and %00101101 
0f09 ad			    xor l 
0f0a 6f			    ld l,a 
0f0b 22 a0 fb		    ld (seed2),hl 
0f0e 09			    add hl,bc 
0f0f c9			    ret 
0f10			 
0f10			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0f10			 
0f10			rand32: 
0f10			;Inputs: 
0f10			;   (seed1_0) holds the lower 16 bits of the first seed 
0f10			;   (seed1_1) holds the upper 16 bits of the first seed 
0f10			;   (seed2_0) holds the lower 16 bits of the second seed 
0f10			;   (seed2_1) holds the upper 16 bits of the second seed 
0f10			;   **NOTE: seed2 must be non-zero 
0f10			;Outputs: 
0f10			;   HL is the result 
0f10			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0f10			;Destroys: 
0f10			;   AF 
0f10			;Tested and passes all CAcert tests 
0f10			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0f10			;it has a period of 18,446,744,069,414,584,320 
0f10			;roughly 18.4 quintillion. 
0f10			;LFSR taps: 0,2,6,7  = 11000101 
0f10			;291cc 
0f10			;seed1_0=$+1 
0f10			;    ld hl,12345 
0f10			;seed1_1=$+1 
0f10			;    ld de,6789 
0f10			;    ld b,h 
0f10			;    ld c,l 
0f10			;    add hl,hl \ rl e \ rl d 
0f10			;    add hl,hl \ rl e \ rl d 
0f10			;    inc l 
0f10			;    add hl,bc 
0f10			;    ld (seed1_0),hl 
0f10			;    ld hl,(seed1_1) 
0f10			;    adc hl,de 
0f10			;    ld (seed1_1),hl 
0f10			;    ex de,hl 
0f10			;seed2_0=$+1 
0f10			;    ld hl,9876 
0f10			;seed2_1=$+1 
0f10			;    ld bc,54321 
0f10			;    add hl,hl \ rl c \ rl b 
0f10			;    ld (seed2_1),bc 
0f10			;    sbc a,a 
0f10			;    and %11000101 
0f10			;    xor l 
0f10			;    ld l,a 
0f10			;    ld (seed2_0),hl 
0f10			;    ex de,hl 
0f10			;    add hl,bc 
0f10			;    ret 
0f10			; 
0f10			 
0f10			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0f10			; 20 bytes, 86 cycles (excluding ret) 
0f10			 
0f10			; returns   hl = pseudorandom number 
0f10			; corrupts   a 
0f10			 
0f10			; generates 16-bit pseudorandom numbers with a period of 65535 
0f10			; using the xorshift method: 
0f10			 
0f10			; hl ^= hl << 7 
0f10			; hl ^= hl >> 9 
0f10			; hl ^= hl << 8 
0f10			 
0f10			; some alternative shift triplets which also perform well are: 
0f10			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0f10			 
0f10			;  org 32768 
0f10			 
0f10			xrnd: 
0f10 2a a6 fb		  ld hl,(xrandc)       ; seed must not be 0 
0f13 3e 00		  ld a,0 
0f15 bd			  cp l 
0f16 20 02		  jr nz, .xrnd1 
0f18 2e 01		  ld l, 1 
0f1a			.xrnd1: 
0f1a			 
0f1a 7c			  ld a,h 
0f1b 1f			  rra 
0f1c 7d			  ld a,l 
0f1d 1f			  rra 
0f1e ac			  xor h 
0f1f 67			  ld h,a 
0f20 7d			  ld a,l 
0f21 1f			  rra 
0f22 7c			  ld a,h 
0f23 1f			  rra 
0f24 ad			  xor l 
0f25 6f			  ld l,a 
0f26 ac			  xor h 
0f27 67			  ld h,a 
0f28			 
0f28 22 a6 fb		  ld (xrandc),hl 
0f2b			 
0f2b c9			  ret 
0f2c			;  
0f2c			 
0f2c			 
0f2c			;;;; int maths 
0f2c			 
0f2c			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f2c			; Divide 16-bit values (with 16-bit result) 
0f2c			; In: Divide BC by divider DE 
0f2c			; Out: BC = result, HL = rest 
0f2c			; 
0f2c			Div16: 
0f2c 21 00 00		    ld hl,0 
0f2f 78			    ld a,b 
0f30 06 08		    ld b,8 
0f32			Div16_Loop1: 
0f32 17			    rla 
0f33 ed 6a		    adc hl,hl 
0f35 ed 52		    sbc hl,de 
0f37 30 01		    jr nc,Div16_NoAdd1 
0f39 19			    add hl,de 
0f3a			Div16_NoAdd1: 
0f3a 10 f6		    djnz Div16_Loop1 
0f3c 17			    rla 
0f3d 2f			    cpl 
0f3e 47			    ld b,a 
0f3f 79			    ld a,c 
0f40 48			    ld c,b 
0f41 06 08		    ld b,8 
0f43			Div16_Loop2: 
0f43 17			    rla 
0f44 ed 6a		    adc hl,hl 
0f46 ed 52		    sbc hl,de 
0f48 30 01		    jr nc,Div16_NoAdd2 
0f4a 19			    add hl,de 
0f4b			Div16_NoAdd2: 
0f4b 10 f6		    djnz Div16_Loop2 
0f4d 17			    rla 
0f4e 2f			    cpl 
0f4f 41			    ld b,c 
0f50 4f			    ld c,a 
0f51 c9			ret 
0f52			 
0f52			 
0f52			;http://z80-heaven.wikidot.com/math 
0f52			; 
0f52			;Inputs: 
0f52			;     DE and A are factors 
0f52			;Outputs: 
0f52			;     A is not changed 
0f52			;     B is 0 
0f52			;     C is not changed 
0f52			;     DE is not changed 
0f52			;     HL is the product 
0f52			;Time: 
0f52			;     342+6x 
0f52			; 
0f52			Mult16: 
0f52			 
0f52 06 08		     ld b,8          ;7           7 
0f54 21 00 00		     ld hl,0         ;10         10 
0f57 29			       add hl,hl     ;11*8       88 
0f58 07			       rlca          ;4*8        32 
0f59 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f5b 19			         add hl,de   ;--         -- 
0f5c 10 f9		       djnz $-5      ;13*7+8     99 
0f5e c9			ret 
0f5f			 
0f5f			; 
0f5f			; Square root of 16-bit value 
0f5f			; In:  HL = value 
0f5f			; Out:  D = result (rounded down) 
0f5f			; 
0f5f			;Sqr16: 
0f5f			;    ld de,#0040 
0f5f			;    ld a,l 
0f5f			;    ld l,h 
0f5f			;    ld h,d 
0f5f			;    or a 
0f5f			;    ld b,8 
0f5f			;Sqr16_Loop: 
0f5f			;    sbc hl,de 
0f5f			;    jr nc,Sqr16_Skip 
0f5f			;    add hl,de 
0f5f			;Sqr16_Skip: 
0f5f			;    ccf 
0f5f			;    rl d 
0f5f			;    add a,a 
0f5f			;    adc hl,hl 
0f5f			;    add a,a 
0f5f			;    adc hl,hl 
0f5f			;    djnz Sqr16_Loop 
0f5f			;    ret 
0f5f			; 
0f5f			; 
0f5f			; Divide 8-bit values 
0f5f			; In: Divide E by divider C 
0f5f			; Out: A = result, B = rest 
0f5f			; 
0f5f			Div8: 
0f5f af			    xor a 
0f60 06 08		    ld b,8 
0f62			Div8_Loop: 
0f62 cb 13		    rl e 
0f64 17			    rla 
0f65 91			    sub c 
0f66 30 01		    jr nc,Div8_NoAdd 
0f68 81			    add a,c 
0f69			Div8_NoAdd: 
0f69 10 f7		    djnz Div8_Loop 
0f6b 47			    ld b,a 
0f6c 7b			    ld a,e 
0f6d 17			    rla 
0f6e 2f			    cpl 
0f6f c9			    ret 
0f70			 
0f70			; 
0f70			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f70			; In: Multiply A with DE 
0f70			; Out: HL = result 
0f70			; 
0f70			Mult12U: 
0f70 2e 00		    ld l,0 
0f72 87			    add a,a 
0f73 30 01		    jr nc,Mult12U_NoAdd0 
0f75 19			    add hl,de 
0f76			Mult12U_NoAdd0: 
0f76 29			    add hl,hl 
0f77 87			    add a,a 
0f78 30 01		    jr nc,Mult12U_NoAdd1 
0f7a 19			    add hl,de 
0f7b			Mult12U_NoAdd1: 
0f7b 29			    add hl,hl 
0f7c 87			    add a,a 
0f7d 30 01		    jr nc,Mult12U_NoAdd2 
0f7f 19			    add hl,de 
0f80			Mult12U_NoAdd2: 
0f80 29			    add hl,hl 
0f81 87			    add a,a 
0f82 30 01		    jr nc,Mult12U_NoAdd3 
0f84 19			    add hl,de 
0f85			Mult12U_NoAdd3: 
0f85 29			    add hl,hl 
0f86 87			    add a,a 
0f87 30 01		    jr nc,Mult12U_NoAdd4 
0f89 19			    add hl,de 
0f8a			Mult12U_NoAdd4: 
0f8a 29			    add hl,hl 
0f8b 87			    add a,a 
0f8c 30 01		    jr nc,Mult12U_NoAdd5 
0f8e 19			    add hl,de 
0f8f			Mult12U_NoAdd5: 
0f8f 29			    add hl,hl 
0f90 87			    add a,a 
0f91 30 01		    jr nc,Mult12U_NoAdd6 
0f93 19			    add hl,de 
0f94			Mult12U_NoAdd6: 
0f94 29			    add hl,hl 
0f95 87			    add a,a 
0f96 d0			    ret nc 
0f97 19			    add hl,de 
0f98 c9			    ret 
0f99			 
0f99			; 
0f99			; Multiply 8-bit value with a 16-bit value (right rotating) 
0f99			; In: Multiply A with DE 
0f99			;      Put lowest value in A for most efficient calculation 
0f99			; Out: HL = result 
0f99			; 
0f99			Mult12R: 
0f99 21 00 00		    ld hl,0 
0f9c			Mult12R_Loop: 
0f9c cb 3f		    srl a 
0f9e 30 01		    jr nc,Mult12R_NoAdd 
0fa0 19			    add hl,de 
0fa1			Mult12R_NoAdd: 
0fa1 cb 23		    sla e 
0fa3 cb 12		    rl d 
0fa5 b7			    or a 
0fa6 c2 9c 0f		    jp nz,Mult12R_Loop 
0fa9 c9			    ret 
0faa			 
0faa			; 
0faa			; Multiply 16-bit values (with 32-bit result) 
0faa			; In: Multiply BC with DE 
0faa			; Out: BCHL = result 
0faa			; 
0faa			Mult32: 
0faa 79			    ld a,c 
0fab 48			    ld c,b 
0fac 21 00 00		    ld hl,0 
0faf 06 10		    ld b,16 
0fb1			Mult32_Loop: 
0fb1 29			    add hl,hl 
0fb2 17			    rla 
0fb3 cb 11		    rl c 
0fb5 30 07		    jr nc,Mult32_NoAdd 
0fb7 19			    add hl,de 
0fb8 ce 00		    adc a,0 
0fba d2 be 0f		    jp nc,Mult32_NoAdd 
0fbd 0c			    inc c 
0fbe			Mult32_NoAdd: 
0fbe 10 f1		    djnz Mult32_Loop 
0fc0 41			    ld b,c 
0fc1 4f			    ld c,a 
0fc2 c9			    ret 
0fc3			 
0fc3			 
0fc3			 
0fc3			; 
0fc3			; Multiply 8-bit values 
0fc3			; In:  Multiply H with E 
0fc3			; Out: HL = result 
0fc3			; 
0fc3			Mult8: 
0fc3 16 00		    ld d,0 
0fc5 6a			    ld l,d 
0fc6 06 08		    ld b,8 
0fc8			Mult8_Loop: 
0fc8 29			    add hl,hl 
0fc9 30 01		    jr nc,Mult8_NoAdd 
0fcb 19			    add hl,de 
0fcc			Mult8_NoAdd: 
0fcc 10 fa		    djnz Mult8_Loop 
0fce c9			    ret 
0fcf			 
0fcf			 
0fcf			 
0fcf			 
0fcf			 
0fcf			 
0fcf			 
0fcf			 
0fcf			;;http://z80-heaven.wikidot.com/math 
0fcf			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fcf			; 
0fcf			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fcf			;     ld a,16        ;7 
0fcf			;     ld hl,0        ;10 
0fcf			;     jp $+5         ;10 
0fcf			;.DivLoop: 
0fcf			;       add hl,bc    ;-- 
0fcf			;       dec a        ;64 
0fcf			;       jr z,.DivLoopEnd        ;86 
0fcf			; 
0fcf			;       sla e        ;128 
0fcf			;       rl d         ;128 
0fcf			;       adc hl,hl    ;240 
0fcf			;       sbc hl,bc    ;240 
0fcf			;       jr nc,.DivLoop ;23|21 
0fcf			;       inc e        ;-- 
0fcf			;       jp .DivLoop+1 
0fcf			; 
0fcf			;.DivLoopEnd: 
0fcf			 
0fcf			;HL_Div_C: 
0fcf			;Inputs: 
0fcf			;     HL is the numerator 
0fcf			;     C is the denominator 
0fcf			;Outputs: 
0fcf			;     A is the remainder 
0fcf			;     B is 0 
0fcf			;     C is not changed 
0fcf			;     DE is not changed 
0fcf			;     HL is the quotient 
0fcf			; 
0fcf			;       ld b,16 
0fcf			;       xor a 
0fcf			;         add hl,hl 
0fcf			;         rla 
0fcf			;         cp c 
0fcf			;         jr c,$+4 
0fcf			;           inc l 
0fcf			;           sub c 
0fcf			;         djnz $-7 
0fcf			 
0fcf			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fcf			 
0fcf			addatohl: 
0fcf 85			    add   a, l    ; A = A+L 
0fd0 6f			    ld    l, a    ; L = A+L 
0fd1 8c			    adc   a, h    ; A = A+L+H+carry 
0fd2 95			    sub   l       ; A = H+carry 
0fd3 67			    ld    h, a    ; H = H+carry 
0fd4 c9			ret 
0fd5			 
0fd5			addatode: 
0fd5 83			    add   a, e    ; A = A+L 
0fd6 5f			    ld    e, a    ; L = A+L 
0fd7 8a			    adc   a, d    ; A = A+L+H+carry 
0fd8 93			    sub   e       ; A = H+carry 
0fd9 57			    ld    d, a    ; H = H+carry 
0fda c9			ret 
0fdb			 
0fdb			 
0fdb			addatobc: 
0fdb 81			    add   a, c    ; A = A+L 
0fdc 4f			    ld    c, a    ; L = A+L 
0fdd 88			    adc   a, b    ; A = A+L+H+carry 
0fde 91			    sub   c       ; A = H+carry 
0fdf 47			    ld    b, a    ; H = H+carry 
0fe0 c9			ret 
0fe1			 
0fe1			subafromhl: 
0fe1			   ; If A=0 do nothing 
0fe1			    ; Otherwise flip A's sign. Since 
0fe1			    ; the upper byte becomes -1, also 
0fe1			    ; substract 1 from H. 
0fe1 ed 44		    neg 
0fe3 ca ec 0f		    jp    z, Skip 
0fe6 25			    dec   h 
0fe7			     
0fe7			    ; Now add the low byte as usual 
0fe7			    ; Two's complement takes care of 
0fe7			    ; ensuring the result is correct 
0fe7 85			    add   a, l 
0fe8 6f			    ld    l, a 
0fe9 8c			    adc   a, h 
0fea 95			    sub   l 
0feb 67			    ld    h, a 
0fec			Skip: 
0fec c9				ret 
0fed			 
0fed			 
0fed			; compare hl and de 
0fed			; returns:  
0fed			; if hl = de, z=1, s=0, c0=0 
0fed			; if hl > de, z=0, s=0, c=0 
0fed			; if hl < de, z=0, s=1, c=1 
0fed			cmp16:	 
0fed b7				or a 
0fee ed 52			sbc hl,de 
0ff0 e0				ret po 
0ff1 7c				ld a,h 
0ff2 1f				rra 
0ff3 ee 40			xor 01000000B 
0ff5 37				scf 
0ff6 8f				adc a,a 
0ff7 c9				ret 
0ff8			 
0ff8			 
0ff8			; test if hl contains zero   - A is destroyed 
0ff8			 
0ff8			ishlzero:    
0ff8 b7				or a     ; reset flags 
0ff9 7c				ld a, h 
0ffa b5				or l        	 
0ffb			 
0ffb c9				ret 
0ffc			 
0ffc			 
0ffc			 
0ffc			 
0ffc			if FORTH_ENABLE_FLOATMATH 
0ffc			;include "float/bbcmath.z80" 
0ffc			include "float/lpfpcalc.asm" 
0ffc			endif 
0ffc			 
0ffc			 
0ffc			; eof 
0ffc			 
# End of file firmware_maths.asm
0ffc			include "firmware_strings.asm"   ; string handling  
0ffc			 
0ffc			 
0ffc			; TODO string len 
0ffc			; input text string, end on cr with zero term 
0ffc			; a offset into frame buffer to start prompt 
0ffc			; d is max length 
0ffc			; e is display size TODO 
0ffc			; c is current cursor position 
0ffc			; hl is ptr to where string will be stored 
0ffc			 
0ffc			 
0ffc			; TODO check limit of buffer for new inserts 
0ffc			; TODO check insert does not push beyond buffer 
0ffc			; TODO scroll in a limited display area 
0ffc			; TODO scroll whole screen on page wrap 
0ffc			 
0ffc			 
0ffc			; TODO handle KEY_PREVWORD 
0ffc			; TODO handle KEY_NEXTWORD 
0ffc			; TODO handle KEY_HOME 
0ffc			; TODO handle KEY_END 
0ffc			; TODO use LCD cursor? 
0ffc			 
0ffc 32 61 fe		input_str:    	ld (input_at_pos),a      ; save display position to start 
0fff 81					add c 
1000 32 5f fe				ld (input_at_cursor),a	; save draw pos of cursor 
1003 22 64 fe				ld (input_start), hl     ; save ptr to buffer 
1006 79					ld a, c 
1007 cd cf 0f				call addatohl 
100a 22 66 fe				ld (input_ptr), hl     ; save ptr to point under the cursor 
100d 7a					ld a,d 
100e 32 63 fe			        ld (input_size), a       ; save length of input area 
1011 79					ld a, c 
1012 32 52 fe				ld (input_cursor),a      ; init cursor start position  
1015 7b					ld a,e 
1016 32 62 fe			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
1019					 
1019					 
1019			 
1019			;		ld a,(input_ptr) 
1019			;		ld (input_under_cursor),a 	; save what is under the cursor 
1019			 
1019			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
1019					; init cursor shape if not set by the cin routines 
1019 21 be fb				ld hl, cursor_shape 
101c 3e ff				ld a, 255 
101e 77					ld (hl), a 
101f 23					inc hl 
1020 3e 00				ld a, 0 
1022 77					ld (hl), a 
1023			 
1023 3e 0f				ld a, CUR_BLINK_RATE 
1025 32 5d fe				ld (input_cur_flash), a 
1028 3e 01				ld a, 1 
102a 32 5c fe				ld (input_cur_onoff),a 
102d			 
102d			;	if DEBUG_INPUT 
102d			;		push af 
102d			;		ld a, 'I' 
102d			;		ld (debug_mark),a 
102d			;		pop af 
102d			;		CALLMONITOR 
102d			;	endif 
102d			.is1:		; main entry loop 
102d			 
102d			 
102d			 
102d					; pause 1ms 
102d			 
102d 3e 01				ld a, 1 
102f cd c3 0c				call aDelayInMS 
1032			 
1032					; dec flash counter 
1032 3a 5d fe				ld a, (input_cur_flash) 
1035 3d					dec a 
1036 32 5d fe				ld (input_cur_flash), a 
1039 fe 00				cp 0 
103b 20 0d				jr nz, .nochgstate 
103d			 
103d			 
103d					; change state 
103d 3a 5c fe				ld a,(input_cur_onoff) 
1040 ed 44				neg 
1042 32 5c fe				ld (input_cur_onoff),a 
1045			 
1045			 
1045					; reset on change of state 
1045 3e 0f				ld a, CUR_BLINK_RATE 
1047 32 5d fe				ld (input_cur_flash), a 
104a			 
104a			.nochgstate: 
104a					 
104a					 
104a			 
104a					; display cursor  
104a			 
104a			;		ld hl, (input_start) 
104a			;		ld a, (input_cursor) 
104a			;		call addatohl 
104a			 
104a					; get char under cursor and replace with cursor 
104a 2a 66 fe		ld hl, (input_ptr) 
104d			;		ld a, (hl) 
104d			;		ld (input_under_cursor),a 
104d			;		ld a, '_' 
104d			;		ld (hl), a 
104d			 
104d					; display string 
104d			 
104d ed 5b 64 fe			ld de, (input_start) 
1051 3a 61 fe				ld a, (input_at_pos) 
1054 cd ae 0d				call str_at_display 
1057			;	        call update_display 
1057			 
1057					; find place to put the cursor 
1057			;		add h 
1057			;		ld l, display_row_1 
1057			;		sub l 
1057			; (input_at_pos) 
1057					;ld c, a 
1057			;		ld a, (input_cursor) 
1057			;		ld l, (input_at_pos) 
1057			;		;ld b, h 
1057			;		add l 
1057			;		ld (input_at_cursor),a 
1057					;ld l,h 
1057			 
1057			;		ld h, 0 
1057			;		ld l,(input_at_pos) 
1057			;		ld a, (input_cursor) 
1057			;		call addatohl 
1057			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
1057			;		call subafromhl 
1057			;		ld a,l 
1057			;		ld (input_at_cursor), a 
1057			 
1057				if DEBUG_INPUT 
1057					ld a, (hardware_diag) 
1057					cp 0 
1057					jr z, .skip_input_diag 
1057			 
1057					ld a,(input_at_pos) 
1057					ld hl, LFSRSeed 
1057					call hexout 
1057					ld a, (input_cursor) 
1057					ld hl, LFSRSeed+2 
1057					call hexout 
1057					ld a,(input_at_cursor) 
1057					ld hl, LFSRSeed+4 
1057					call hexout 
1057			 
1057					ld a,(input_cur_onoff) 
1057					ld hl, LFSRSeed+6 
1057					call hexout 
1057			 
1057					ld a,(input_cur_flash) 
1057					ld hl, LFSRSeed+8 
1057					call hexout 
1057			 
1057					ld a,(input_len) 
1057					ld hl, LFSRSeed+10 
1057					call hexout 
1057					ld hl, LFSRSeed+12 
1057					ld a, 0 
1057					ld (hl),a 
1057					ld a, display_row_4 
1057					ld de, LFSRSeed 
1057					call str_at_display 
1057					.skip_input_diag: 
1057				endif 
1057			 
1057					; decide on if we are showing the cursor this time round 
1057			 
1057 3a 5c fe				ld a, (input_cur_onoff) 
105a fe ff				cp 255 
105c 28 13				jr z, .skipcur 
105e			 
105e			 
105e 3a 5f fe				ld a,(input_at_cursor) 
1061 11 be fb				ld de, cursor_shape 
1064 cd ae 0d				call str_at_display 
1067			 
1067					; save length of current input string 
1067 2a 64 fe				ld hl, (input_start) 
106a cd 2d 14				call strlenz 
106d 7d					ld a,l 
106e 32 57 fe				ld (input_len),a 
1071			 
1071			.skipcur: 
1071			 
1071 cd be 0d			        call update_display 
1074					 
1074			 
1074			 
1074					; wait 
1074				 
1074					; TODO loop without wait to flash the cursor and char under cursor	 
1074 cd 18 7a				call cin    ; _wait 
1077			 
1077 fe 00				cp 0 
1079 ca 2d 10				jp z, .is1 
107c			 
107c					; get ptr to char to input into 
107c			 
107c 4f					ld c,a 
107d 2a 64 fe				ld hl, (input_start) 
1080 3a 52 fe				ld a, (input_cursor) 
1083 cd cf 0f				call addatohl 
1086 22 66 fe				ld (input_ptr), hl 
1089 79					ld a,c 
108a			 
108a					; replace char under cursor 
108a			 
108a			;		ld hl, (input_ptr) 
108a			;		ld a, (input_under_cursor) 	; get what is under the cursor 
108a			;		ld (hl), a 
108a			 
108a			;	if DEBUG_INPUT 
108a			;		push af 
108a			;		ld a, 'i' 
108a			;		ld (debug_mark),a 
108a			;		pop af 
108a			;		CALLMONITOR 
108a			;	endif 
108a fe 0e				cp KEY_HOME 
108c 20 0e				jr nz, .iske 
108e			 
108e 3a 61 fe				ld a, (input_at_pos) 
1091 32 5f fe				ld (input_at_cursor),a 
1094 3e 00				ld a, 0 
1096 32 52 fe				ld (input_cursor), a 
1099 c3 2d 10				jp .is1 
109c					 
109c fe 0f		.iske:		cp KEY_END 
109e 20 03				jr nz, .isknw 
10a0 c3 2d 10				jp .is1 
10a3			 
10a3 fe 06		.isknw:		cp KEY_NEXTWORD 
10a5 20 1b				jr nz, .iskpw 
10a7			 
10a7 2a 66 fe		.isknwm:	ld hl, (input_ptr) 
10aa 7e					ld a,(hl)	 
10ab fe 00				cp 0 
10ad ca 2d 10				jp z, .is1    ; end of string 
10b0 fe 20				cp ' ' 
10b2 ca 2d 10				jp z, .is1    ; end of word 
10b5 23					inc hl 
10b6 22 66 fe				ld (input_ptr), hl 
10b9 3a 5f fe				ld a, (input_at_cursor) 
10bc 3c					inc a 
10bd 32 5f fe				ld (input_at_cursor), a 
10c0 18 e5				jr .isknwm 
10c2			 
10c2 fe 07		.iskpw:		cp KEY_PREVWORD 
10c4 20 1b				jr nz, .iskl 
10c6			.iskpwm:	 
10c6 2a 66 fe				ld hl, (input_ptr) 
10c9 7e					ld a,(hl)	 
10ca fe 00				cp 0  
10cc ca 2d 10				jp z, .is1    ; end of string 
10cf fe 20				cp ' ' 
10d1 ca 2d 10				jp z, .is1    ; end of word 
10d4 2b					dec hl 
10d5 22 66 fe				ld (input_ptr), hl 
10d8 3a 5f fe				ld a, (input_at_cursor) 
10db 3d					dec a 
10dc 32 5f fe				ld (input_at_cursor), a 
10df 18 e5				jr .iskpwm 
10e1			 
10e1			 
10e1 fe 0b		.iskl:		cp KEY_LEFT 
10e3 20 27				jr nz, .isk1 
10e5			 
10e5 3a 52 fe				ld a, (input_cursor) 
10e8			 
10e8 fe 00				cp 0 
10ea ca 2d 10				jp z, .is1 		; at start of line to ignore  
10ed			 
10ed 3d					dec  a 		; TODO check underflow 
10ee 32 52 fe				ld (input_cursor), a 
10f1			 
10f1 2a 66 fe				ld hl, (input_ptr) 
10f4 2b					dec hl 
10f5 22 66 fe				ld (input_ptr), hl 
10f8					 
10f8 3a 5f fe				ld a, (input_at_cursor) 
10fb 3d					dec a 
10fc 32 5f fe				ld (input_at_cursor), a 
10ff			 
10ff 3e 01				ld a, 1		; show cursor moving 
1101 32 5c fe				ld (input_cur_onoff),a 
1104 3e 0f				ld a, CUR_BLINK_RATE 
1106 32 5d fe				ld (input_cur_flash), a 
1109			 
1109 c3 2d 10				jp .is1 
110c			 
110c fe 0c		.isk1:		cp KEY_RIGHT 
110e 20 2a				jr nz, .isk2 
1110			 
1110 3a 57 fe				ld a,(input_len)		; TODO BUG why cant i load e direct? 
1113 5f					ld e,a 
1114 3a 52 fe				ld a, (input_cursor) 
1117 bb					cp e 
1118 ca 2d 10				jp z, .is1		; at the end of string so dont go right 
111b			 
111b 3c					inc  a 		; TODO check overflow 
111c 32 52 fe				ld (input_cursor), a 
111f			 
111f 3a 5f fe				ld a, (input_at_cursor) 
1122 3c					inc a 
1123 32 5f fe				ld (input_at_cursor), a 
1126			 
1126 2a 66 fe				ld hl, (input_ptr) 
1129 23					inc hl 
112a 22 66 fe				ld (input_ptr), hl 
112d			 
112d 3e 01				ld a, 1		; show cursor moving 
112f 32 5c fe				ld (input_cur_onoff),a 
1132 3e 0f				ld a, CUR_BLINK_RATE 
1134 32 5d fe				ld (input_cur_flash), a 
1137			 
1137 c3 2d 10				jp .is1 
113a			 
113a fe 05		.isk2:		cp KEY_UP 
113c			 
113c 20 26				jr nz, .isk3 
113e			 
113e					; swap last command with the current on 
113e			 
113e					; move cursor to start of string 
113e 2a 64 fe				ld hl, (input_start) 
1141 22 66 fe				ld (input_ptr), hl 
1144			 
1144 3a 61 fe				ld a, (input_at_pos) 
1147 32 5f fe				ld (input_at_cursor), a 
114a			 
114a 3e 00				ld a, 0 
114c 32 52 fe				ld (input_cursor), a 
114f					 
114f					; swap input and last command buffers 
114f			 
114f 21 e5 f4				ld hl, os_cli_cmd 
1152 11 e4 f5				ld de, os_last_cmd 
1155 06 ff				ld b, 255 
1157 7e			.swap1:		ld a, (hl) 
1158 4f					ld c,a 
1159 1a					ld a, (de) 
115a 77					ld (hl), a 
115b 79					ld a,c 
115c 12					ld (de),a 
115d 23					inc hl 
115e 13					inc de 
115f 10 f6				djnz .swap1 
1161			 
1161			 
1161			 
1161			 
1161			 
1161 c3 2d 10				jp .is1 
1164			 
1164 fe 08		.isk3:		cp KEY_BS 
1166 20 3c				jr nz, .isk4 
1168			 
1168 3a 52 fe				ld a, (input_cursor) 
116b			 
116b fe 00				cp 0 
116d ca 2d 10				jp z, .is1 		; at start of line to ignore  
1170			 
1170 3d					dec  a 		; TODO check underflow 
1171 32 52 fe				ld (input_cursor), a 
1174			 
1174					; hl is source 
1174					; de needs to be source - 1 
1174			 
1174			;		ld a, 0 
1174			;		dec hl 
1174			;		ld (hl), a 
1174			 
1174 2a 66 fe				ld hl, (input_ptr) 
1177 2b					dec hl 
1178 22 66 fe				ld (input_ptr), hl 
117b			 
117b					; shift all data 
117b			 
117b e5					push hl 
117c 23					inc hl 
117d d1					pop de 
117e 3a 57 fe				ld a, (input_len)		; TODO BUG WAS ld c, (input... 
1181 4f					ld c,a 
1182 06 00				ld b,0 
1184 ed b0				ldir  
1186			 
1186			 
1186			 
1186			 
1186 3a 5f fe				ld a, (input_at_cursor) 
1189 3d					dec a 
118a 32 5f fe				ld (input_at_cursor), a 
118d			 
118d			 
118d 3e 01				ld a, 1		; show cursor moving 
118f 32 5c fe				ld (input_cur_onoff),a 
1192 3e 0f				ld a, CUR_BLINK_RATE 
1194 32 5d fe				ld (input_cur_flash), a 
1197			 
1197					; remove char 
1197 3a 5f fe				ld a, (input_at_cursor) 
119a 3c					inc a 
119b 11 25 12				ld de,.iblank 
119e cd ae 0d				call str_at_display 
11a1			 
11a1 c3 2d 10				jp .is1 
11a4			 
11a4 fe 0d		.isk4:		cp KEY_CR 
11a6 28 6c				jr z, .endinput 
11a8			 
11a8					; else add the key press to the end 
11a8			 
11a8 4f					ld c, a			; save key pressed 
11a9			 
11a9 7e					ld a,(hl)		; get what is currently under char 
11aa			 
11aa fe 00				cp 0			; we are at the end of the string 
11ac 20 2f				jr nz, .onchar 
11ae					 
11ae					; add a char to the end of the string 
11ae				 
11ae 71					ld (hl),c 
11af 23					inc hl 
11b0			;		ld a,' ' 
11b0			;		ld (hl),a 
11b0			;		inc hl 
11b0 3e 00				ld a,0 
11b2 77					ld (hl),a 
11b3 2b					dec hl 
11b4			 
11b4 3a 52 fe				ld a, (input_cursor) 
11b7 3c					inc a				; TODO check max string length and scroll  
11b8 32 52 fe				ld (input_cursor), a		; inc cursor pos 
11bb							 
11bb 3a 5f fe				ld a, (input_at_cursor) 
11be 3c					inc a 
11bf 32 5f fe				ld (input_at_cursor), a 
11c2			 
11c2 2a 66 fe				ld hl, (input_ptr) 
11c5 23					inc hl 
11c6 22 66 fe				ld (input_ptr), hl 
11c9			 
11c9 2a 66 fe				ld hl, (input_ptr) 
11cc 23					inc hl 
11cd 22 66 fe				ld (input_ptr), hl 
11d0			;	if DEBUG_INPUT 
11d0			;		push af 
11d0			;		ld a, '+' 
11d0			;		ld (debug_mark),a 
11d0			;		pop af 
11d0			;		CALLMONITOR 
11d0			;	endif 
11d0 3e 01				ld a, 1		; show cursor moving 
11d2 32 5c fe				ld (input_cur_onoff),a 
11d5 3e 0f				ld a, CUR_BLINK_RATE 
11d7 32 5d fe				ld (input_cur_flash), a 
11da c3 2d 10				jp .is1 
11dd					 
11dd			 
11dd			 
11dd					; if on a char then insert 
11dd			.onchar: 
11dd			 
11dd					; TODO over flow check: make sure insert does not blow out buffer 
11dd			 
11dd					; need to do some maths to use lddr 
11dd			 
11dd e5					push hl   ; save char pos 
11de c5					push bc 
11df			 
11df 2a 64 fe				ld hl, (input_start) 
11e2 3a 57 fe				ld a, (input_len) 
11e5 cd cf 0f				call addatohl  		; end of string 
11e8 23					inc hl 
11e9 23					inc hl		; past zero term 
11ea e5					push hl 
11eb 23					inc hl 
11ec e5					push hl  
11ed			 
11ed								; start and end of lddr set, now how much to move? 
11ed			 
11ed							 
11ed 3a 52 fe				ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
11f0 47					ld b,a 
11f1 3a 57 fe				ld a,(input_len) 
11f4 5f					ld e,a 
11f5 90					sub b 
11f6 3c					inc a		;?? 
11f7 3c					inc a		;?? 
11f8 3c					inc a		;?? 
11f9			 
11f9 06 00				ld b,0 
11fb 4f					ld c,a 
11fc			 
11fc				if DEBUG_INPUT 
11fc					push af 
11fc					ld a, 'i' 
11fc					ld (debug_mark),a 
11fc					pop af 
11fc			;		CALLMONITOR 
11fc				endif 
11fc d1					pop de 
11fd e1					pop hl 
11fe				if DEBUG_INPUT 
11fe					push af 
11fe					ld a, 'I' 
11fe					ld (debug_mark),a 
11fe					pop af 
11fe			;		CALLMONITOR 
11fe				endif 
11fe ed b8				lddr 
1200				 
1200			 
1200			 
1200					; TODO have a key for insert/overwrite mode???? 
1200 c1					pop bc 
1201 e1					pop hl 
1202 71					ld (hl), c		; otherwise overwrite current char 
1203					 
1203			 
1203			 
1203			 
1203 3a 52 fe				ld a, (input_cursor) 
1206 3c					inc  a 		; TODO check overflow 
1207 32 52 fe				ld (input_cursor), a 
120a			 
120a 3a 5f fe				ld a, (input_at_cursor) 
120d 3c					inc a 
120e 32 5f fe				ld (input_at_cursor), a 
1211			 
1211 c3 2d 10				jp .is1 
1214			 
1214			.endinput:	; TODO look for end of string 
1214			 
1214					; add trailing space for end of token 
1214			 
1214 2a 64 fe				ld hl, (input_start) 
1217 3a 57 fe				ld a,(input_len) 
121a cd cf 0f				call addatohl 
121d 3e 20				ld a, ' ' 
121f 77					ld (hl),a 
1220					; TODO eof of parse marker 
1220			 
1220 23					inc hl 
1221 3e 00				ld a, 0 
1223 77					ld (hl),a 
1224			 
1224			 
1224 c9					ret 
1225			 
1225 .. 00		.iblank: db " ",0 
1227			 
1227			 
1227 32 61 fe		input_str_prev:	ld (input_at_pos), a 
122a 22 64 fe				ld (input_start), hl 
122d 3e 01				ld a,1			; add cursor 
122f 77					ld (hl),a 
1230 23					inc hl 
1231 3e 00				ld a,0 
1233 77					ld (hl),a 
1234 22 66 fe				ld (input_ptr), hl 
1237 7a					ld a,d 
1238 32 63 fe				ld (input_size), a 
123b 3e 00				ld a,0 
123d 32 52 fe				ld (input_cursor),a 
1240			.instr1:	 
1240			 
1240					; TODO do block cursor 
1240					; TODO switch cursor depending on the modifer key 
1240			 
1240					; update cursor shape change on key hold 
1240			 
1240 2a 66 fe				ld hl, (input_ptr) 
1243 2b					dec hl 
1244 3a be fb				ld a,(cursor_shape) 
1247 77					ld (hl), a 
1248			 
1248					; display entered text 
1248 3a 61 fe				ld a,(input_at_pos) 
124b cd dc 77		            	CALL fLCD_Pos       ;Position cursor to location in A 
124e ed 5b 64 fe	            	LD   de, (input_start) 
1252 cd fe 77		            	CALL fLCD_Str       ;Display string pointed to by DE 
1255			 
1255 cd 18 7a				call cin 
1258 fe 00				cp 0 
125a 28 e4				jr z, .instr1 
125c			 
125c					; proecess keyboard controls first 
125c			 
125c 2a 66 fe				ld hl,(input_ptr) 
125f			 
125f fe 0d				cp KEY_CR	 ; pressing enter ends input 
1261 28 5a				jr z, .instrcr 
1263			 
1263 fe 08				cp KEY_BS 	; back space 
1265 20 0f				jr nz, .instr2 
1267					; process back space 
1267			 
1267					; TODO stop back space if at start of string 
1267 2b					dec hl 
1268 2b					dec hl ; to over write cursor 
1269 3a be fb				ld a,(cursor_shape) 
126c					;ld a,0 
126c 77					ld (hl),a 
126d 23					inc hl 
126e 3e 20				ld a," " 
1270 77					ld (hl),a 
1271 22 66 fe				ld (input_ptr),hl 
1274					 
1274			 
1274 18 ca				jr .instr1 
1276			 
1276 fe 0b		.instr2:	cp KEY_LEFT    ; cursor left 
1278 20 06				jr nz, .instr3 
127a 2b					dec hl 
127b 22 66 fe				ld (input_ptr),hl 
127e 18 c0				jr .instr1 
1280				 
1280 fe 0c		.instr3:	cp KEY_RIGHT ; cursor right 
1282 20 06				jr nz, .instr4 
1284 23					inc hl 
1285 22 66 fe				ld (input_ptr),hl 
1288 18 b6				jr .instr1 
128a			 
128a fe 0e		.instr4:	cp KEY_HOME    ; jump to start of line 
128c 20 06				jr nz, .instr5 
128e 2b					dec hl 
128f 22 66 fe				ld (input_ptr),hl 
1292 18 ac				jr .instr1 
1294			 
1294 fe 0f		.instr5:	cp KEY_END     ; jump to end of line 
1296 20 06				jr nz, .instr6 
1298 2b					dec hl 
1299 22 66 fe				ld (input_ptr),hl 
129c 18 a2				jr .instr1 
129e fe 05		.instr6:        cp KEY_UP      ; recall last command 
12a0 20 0b				jr nz, .instrnew 
12a2			 
12a2 21 be f1			ld hl, scratch 
12a5 11 e4 f5			ld de, os_last_cmd 
12a8 cd c6 12			call strcpy 
12ab 18 93				jr .instr1 
12ad			 
12ad			 
12ad			.instrnew:	; no special key pressed to see if we have room to store it 
12ad			 
12ad					; TODO do string size test 
12ad			 
12ad 2b					dec hl ; to over write cursor 
12ae 77					ld (hl),a 
12af 23					inc hl 
12b0 3a be fb				ld a,(cursor_shape) 
12b3 77					ld (hl),a 
12b4 23					inc hl 
12b5 3e 00				ld a,0 
12b7 77					ld (hl),a 
12b8			 
12b8 22 66 fe				ld (input_ptr),hl 
12bb					 
12bb 18 83				jr .instr1 
12bd 2b			.instrcr:	dec hl		; remove cursor 
12be 3e 20				ld a,' '	; TODO add a trailing space for safety 
12c0 77					ld (hl),a 
12c1 23					inc hl 
12c2 3e 00				ld a,0 
12c4 77					ld (hl),a 
12c5			 
12c5			 
12c5					; if at end of line scroll up    
12c5					; TODO detecting only end of line 4 for scroll up  
12c5			 
12c5					;ld   
12c5			 
12c5 c9					ret 
12c6			 
12c6			 
12c6			; strcpy hl = dest, de source 
12c6			 
12c6 1a			strcpy:   LD   A, (DE)        ;Get character from string 
12c7 b7			            OR   A              ;Null terminator? 
12c8 c8			            RET  Z              ;Yes, so finished 
12c9 1a					ld a,(de) 
12ca 77					ld (hl),a 
12cb 13			            INC  DE             ;Point to next character 
12cc 23					inc hl 
12cd 18 f7		            JR   strcpy       ;Repeat 
12cf c9					ret 
12d0			 
12d0			 
12d0			; TODO string_at  
12d0			; pass string which starts with lcd offset address and then null term string 
12d0			 
12d0			; TODO string to dec 
12d0			; TODO string to hex 
12d0			; TODO byte to string hex 
12d0			; TODO byte to string dec 
12d0			 
12d0			 
12d0			 
12d0			; from z80uartmonitor 
12d0			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
12d0			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
12d0			; pass hl for where to put the text 
12d0			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
12d0 c5			hexout:	PUSH BC 
12d1 f5					PUSH AF 
12d2 47					LD B, A 
12d3					; Upper nybble 
12d3 cb 3f				SRL A 
12d5 cb 3f				SRL A 
12d7 cb 3f				SRL A 
12d9 cb 3f				SRL A 
12db cd eb 12				CALL tohex 
12de 77					ld (hl),a 
12df 23					inc hl	 
12e0					 
12e0					; Lower nybble 
12e0 78					LD A, B 
12e1 e6 0f				AND 0FH 
12e3 cd eb 12				CALL tohex 
12e6 77					ld (hl),a 
12e7 23					inc hl	 
12e8					 
12e8 f1					POP AF 
12e9 c1					POP BC 
12ea c9					RET 
12eb					 
12eb			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
12eb			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
12eb			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
12eb			tohex: 
12eb e5					PUSH HL 
12ec d5					PUSH DE 
12ed 16 00				LD D, 0 
12ef 5f					LD E, A 
12f0 21 f8 12				LD HL, .DATA 
12f3 19					ADD HL, DE 
12f4 7e					LD A, (HL) 
12f5 d1					POP DE 
12f6 e1					POP HL 
12f7 c9					RET 
12f8			 
12f8			.DATA: 
12f8 30					DEFB	30h	; 0 
12f9 31					DEFB	31h	; 1 
12fa 32					DEFB	32h	; 2 
12fb 33					DEFB	33h	; 3 
12fc 34					DEFB	34h	; 4 
12fd 35					DEFB	35h	; 5 
12fe 36					DEFB	36h	; 6 
12ff 37					DEFB	37h	; 7 
1300 38					DEFB	38h	; 8 
1301 39					DEFB	39h	; 9 
1302 41					DEFB	41h	; A 
1303 42					DEFB	42h	; B 
1304 43					DEFB	43h	; C 
1305 44					DEFB	44h	; D 
1306 45					DEFB	45h	; E 
1307 46					DEFB	46h	; F 
1308			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1308			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1308			;;    subtract $30, if result > 9 then subtract $7 more 
1308			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1308			atohex: 
1308 d6 30				SUB $30 
130a fe 0a				CP 10 
130c f8					RET M		; If result negative it was 0-9 so we're done 
130d d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
130f c9					RET		 
1310			 
1310			 
1310			 
1310			 
1310			; Get 2 ASCII characters as hex byte from pointer in hl 
1310			 
1310			BYTERD: 
1310 16 00			LD	D,00h		;Set up 
1312 cd 1a 13			CALL	HEXCON		;Get byte and convert to hex 
1315 87				ADD	A,A		;First nibble so 
1316 87				ADD	A,A		;multiply by 16 
1317 87				ADD	A,A		; 
1318 87				ADD	A,A		; 
1319 57				LD	D,A		;Save hi nibble in D 
131a			HEXCON: 
131a 7e				ld a, (hl)		;Get next chr 
131b 23				inc hl 
131c d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
131e fe 0a			CP	00Ah		;Is it 0-9 ? 
1320 38 02			JR	C,NALPHA	;If so miss next bit 
1322 d6 07			SUB	007h		;Else convert alpha 
1324			NALPHA: 
1324 b2				OR	D		;Add hi nibble back 
1325 c9				RET			; 
1326			 
1326			 
1326			; 
1326			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1326			; Since the routines get_byte and therefore get_nibble are called, only valid 
1326			; characters (0-9a-f) are accepted. 
1326			; 
1326			;get_word        push    af 
1326			;                call    get_byte        ; Get the upper byte 
1326			;                ld      h, a 
1326			;                call    get_byte        ; Get the lower byte 
1326			;                ld      l, a 
1326			;                pop     af 
1326			;                ret 
1326			; 
1326			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1326			; the routine get_nibble is used only valid characters are accepted - the  
1326			; input routine only accepts characters 0-9a-f. 
1326			; 
1326 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1327 7e					ld a,(hl) 
1328 23					inc hl 
1329 cd 4e 13		                call    nibble2val      ; Get upper nibble 
132c cb 07		                rlc     a 
132e cb 07		                rlc     a 
1330 cb 07		                rlc     a 
1332 cb 07		                rlc     a 
1334 47			                ld      b, a            ; Save upper four bits 
1335 7e					ld a,(hl) 
1336 cd 4e 13		                call    nibble2val      ; Get lower nibble 
1339 b0			                or      b               ; Combine both nibbles 
133a c1			                pop     bc              ; Restore B (and C) 
133b c9			                ret 
133c			; 
133c			; Get a hexadecimal digit from the serial line. This routine blocks until 
133c			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
133c			; to the serial line interface. The lower 4 bits of A contain the value of  
133c			; that particular digit. 
133c			; 
133c			;get_nibble      ld a,(hl)           ; Read a character 
133c			;                call    to_upper        ; Convert to upper case 
133c			;                call    is_hex          ; Was it a hex digit? 
133c			;                jr      nc, get_nibble  ; No, get another character 
133c			 ;               call    nibble2val      ; Convert nibble to value 
133c			 ;               call    print_nibble 
133c			 ;               ret 
133c			; 
133c			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
133c			; A valid hexadecimal digit is denoted by a set C flag. 
133c			; 
133c			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
133c			;                ret     nc              ; Yes 
133c			;                cp      '0'             ; Less than '0'? 
133c			;                jr      nc, is_hex_1    ; No, continue 
133c			;                ccf                     ; Complement carry (i.e. clear it) 
133c			;                ret 
133c			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
133c			;                ret     c               ; Yes 
133c			;                cp      'A'             ; Less than 'A'? 
133c			;                jr      nc, is_hex_2    ; No, continue 
133c			;                ccf                     ; Yes - clear carry and return 
133c			;                ret 
133c			;is_hex_2        scf                     ; Set carry 
133c			;                ret 
133c			; 
133c			; Convert a single character contained in A to upper case: 
133c			; 
133c fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
133e d8			                ret     c 
133f fe 7b		                cp      'z' + 1         ; > 'z'? 
1341 d0			                ret     nc              ; Nothing to do, either 
1342 e6 5f		                and     $5f             ; Convert to upper case 
1344 c9			                ret 
1345			 
1345			 
1345			to_lower: 
1345			 
1345			   ; if char is in [A-Z] make it lower case 
1345			 
1345			   ; enter : a = char 
1345			   ; exit  : a = lower case char 
1345			   ; uses  : af 
1345			 
1345 fe 41		   cp 'A' 
1347 d8			   ret c 
1348			    
1348 fe 5b		   cp 'Z'+1 
134a d0			   ret nc 
134b			    
134b f6 20		   or $20 
134d c9			   ret 
134e			 
134e			; 
134e			; Expects a hexadecimal digit (upper case!) in A and returns the 
134e			; corresponding value in A. 
134e			; 
134e fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1350 38 02		                jr      c, nibble2val_1 ; Yes 
1352 d6 07		                sub     7               ; Adjust for A-F 
1354 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1356 e6 0f		                and     $f              ; Only return lower 4 bits 
1358 c9			                ret 
1359			; 
1359			; Print_nibble prints a single hex nibble which is contained in the lower  
1359			; four bits of A: 
1359			; 
1359			;print_nibble    push    af              ; We won't destroy the contents of A 
1359			;                and     $f              ; Just in case... 
1359			;                add     a, '0'             ; If we have a digit we are done here. 
1359			;                cp      '9' + 1         ; Is the result > 9? 
1359			;                jr      c, print_nibble_1 
1359			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1359			;print_nibble_1  call    putc            ; Print the nibble and 
1359			;                pop     af              ; restore the original value of A 
1359			;                ret 
1359			;; 
1359			;; Send a CR/LF pair: 
1359			; 
1359			;crlf            push    af 
1359			;                ld      a, cr 
1359			;                call    putc 
1359			;                ld      a, lf 
1359			;                call    putc 
1359			;                pop     af 
1359			;                ret 
1359			; 
1359			; Print_word prints the four hex digits of a word to the serial line. The  
1359			; word is expected to be in HL. 
1359			; 
1359			;print_word      push    hl 
1359			;                push    af 
1359			;                ld      a, h 
1359			;                call    print_byte 
1359			;                ld      a, l 
1359			;                call    print_byte 
1359			;                pop     af 
1359			;                pop     hl 
1359			;                ret 
1359			; 
1359			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1359			; The byte to be printed is expected to be in A. 
1359			; 
1359			;print_byte      push    af              ; Save the contents of the registers 
1359			;                push    bc 
1359			;                ld      b, a 
1359			;                rrca 
1359			;                rrca 
1359			;                rrca 
1359			;                rrca 
1359			;                call    print_nibble    ; Print high nibble 
1359			;                ld      a, b 
1359			;                call    print_nibble    ; Print low nibble 
1359			;                pop     bc              ; Restore original register contents 
1359			;                pop     af 
1359			;                ret 
1359			 
1359			 
1359			 
1359			 
1359			 
1359			fourehexhl:  
1359 7e				ld a,(hl) 
135a cd 08 13			call atohex 
135d cb 3f				SRL A 
135f cb 3f				SRL A 
1361 cb 3f				SRL A 
1363 cb 3f				SRL A 
1365 47				ld b, a 
1366 23				inc hl 
1367 7e				ld a,(hl) 
1368 23				inc hl 
1369 cd 08 13			call atohex 
136c 80				add b 
136d 57				ld d,a 
136e 7e				ld a,(hl) 
136f cd 08 13			call atohex 
1372 cb 3f				SRL A 
1374 cb 3f				SRL A 
1376 cb 3f				SRL A 
1378 cb 3f				SRL A 
137a 47				ld b, a 
137b 23				inc hl 
137c 7e				ld a,(hl) 
137d 23				inc hl 
137e cd 08 13			call atohex 
1381 80				add b 
1382 5f				ld e, a 
1383 d5				push de 
1384 e1				pop hl 
1385 c9				ret 
1386			 
1386			; pass hl. returns z set if the byte at hl is a digit 
1386			;isdigithl:  
1386			;	push bc 
1386			;	ld a,(hl) 
1386			;	cp ':' 
1386			;	jr nc, .isdf 		; > 
1386			;	cp '0' 
1386			;	jr c, .isdf		; < 
1386			; 
1386			;	; TODO find a better way to set z 
1386			; 
1386			;	ld b,a 
1386			;	cp b 
1386			;	pop bc 
1386			;	ret 
1386			; 
1386			;.isdf:	; not digit so clear z 
1386			; 
1386			;	; TODO find a better way to unset z 
1386			; 
1386			;	ld b,a 
1386			;	inc b 
1386			;	cp b 
1386			; 
1386			;	pop bc 
1386			;	ret 
1386				 
1386				 
1386			 
1386			 
1386			; pass hl as the four byte address to load 
1386			 
1386			get_word_hl:  
1386 e5				push hl 
1387 cd 26 13			call get_byte 
138a				 
138a 47				ld b, a 
138b			 
138b e1				pop hl 
138c 23				inc hl 
138d 23				inc hl 
138e			 
138e			; TODO not able to handle a-f  
138e 7e				ld a,(hl) 
138f			;	;cp ':' 
138f			;	cp 'g' 
138f			;	jr nc, .single_byte_hl 		; > 
138f			;	cp 'G' 
138f			;	jr nc, .single_byte_hl 		; > 
138f			;	cp '0' 
138f			;	jr c, .single_byte_hl		; < 
138f			 
138f				;call isdigithl 
138f fe 00			cp 0 
1391 28 06			jr z, .single_byte_hl 
1393			 
1393			.getwhln:   ; hex word so get next byte 
1393			 
1393 cd 26 13			call get_byte 
1396 6f				ld l, a 
1397 60				ld h,b 
1398 c9				ret 
1399 68			.single_byte_hl:   ld l,b 
139a 26 00				ld h,0 
139c c9					ret 
139d			 
139d			 
139d			 
139d			 
139d 21 f4 1d			ld hl,asc+1 
13a0			;	ld a, (hl) 
13a0			;	call nibble2val 
13a0 cd 26 13			call get_byte 
13a3			 
13a3			;	call fourehexhl 
13a3 32 f2 f1			ld (scratch+52),a 
13a6				 
13a6 21 f0 f1			ld hl,scratch+50 
13a9 22 e1 f4			ld (os_cur_ptr),hl 
13ac			 
13ac c9				ret 
13ad			 
13ad			 
13ad			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
13ad			 
13ad			; Decimal Unsigned Version 
13ad			 
13ad			;Number in a to decimal ASCII 
13ad			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
13ad			;Example: display a=56 as "056" 
13ad			;input: a = number 
13ad			;Output: a=0,value of a in the screen 
13ad			;destroys af,bc (don't know about hl and de) 
13ad			DispAToASCII: 
13ad 0e 9c			ld	c,-100 
13af cd b9 13			call	.Na1 
13b2 0e f6			ld	c,-10 
13b4 cd b9 13			call	.Na1 
13b7 0e ff			ld	c,-1 
13b9 06 2f		.Na1:	ld	b,'0'-1 
13bb 04			.Na2:	inc	b 
13bc 81				add	a,c 
13bd 38 fc			jr	c,.Na2 
13bf 91				sub	c		;works as add 100/10/1 
13c0 f5				push af		;safer than ld c,a 
13c1 78				ld	a,b		;char is in b 
13c2			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
13c2 f1				pop af		;safer than ld a,c 
13c3 c9				ret 
13c4			 
13c4			; Decimal Signed Version 
13c4			 
13c4			; DispA 
13c4			; -------------------------------------------------------------- 
13c4			; Converts a signed integer value to a zero-terminated ASCII 
13c4			; string representative of that value (using radix 10). 
13c4			; -------------------------------------------------------------- 
13c4			; INPUTS: 
13c4			;     HL     Value to convert (two's complement integer). 
13c4			;     DE     Base address of string destination. (pointer). 
13c4			; -------------------------------------------------------------- 
13c4			; OUTPUTS: 
13c4			;     None 
13c4			; -------------------------------------------------------------- 
13c4			; REGISTERS/MEMORY DESTROYED 
13c4			; AF HL 
13c4			; -------------------------------------------------------------- 
13c4			 
13c4			;DispHLToASCII: 
13c4			;   push    de 
13c4			;   push    bc 
13c4			; 
13c4			;; Detect sign of HL. 
13c4			;    bit    7, h 
13c4			;    jr     z, ._DoConvert 
13c4			; 
13c4			;; HL is negative. Output '-' to string and negate HL. 
13c4			;    ld     a, '-' 
13c4			;    ld     (de), a 
13c4			;    inc    de 
13c4			; 
13c4			;; Negate HL (using two's complement) 
13c4			;    xor    a 
13c4			;    sub    l 
13c4			;    ld     l, a 
13c4			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
13c4			;    sbc    a, h 
13c4			;    ld     h, a 
13c4			; 
13c4			;; Convert HL to digit characters 
13c4			;._DoConvert: 
13c4			;    ld     b, 0     ; B will count character length of number 
13c4			;-   ld     a, 10 
13c4			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
13c4			;    push   af 
13c4			;    inc    b 
13c4			;    ld     a, h 
13c4			;    or     l 
13c4			;    jr     nz, - 
13c4			; 
13c4			;; Retrieve digits from stack 
13c4			;-   pop    af 
13c4			;    or     $30 
13c4			;    ld     (de), a 
13c4			;    inc    de 
13c4			;    djnz   - 
13c4			; 
13c4			;; Terminate string with NULL 
13c4			;    xor    a 
13c4			;    ld     (de), a 
13c4			; 
13c4			;    pop    bc 
13c4			;    pop    de 
13c4			;    ret 
13c4			 
13c4			;Comments 
13c4			; 
13c4			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
13c4			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
13c4			;    Note that the output string will not be fixed-width. 
13c4			; 
13c4			;Example Usage 
13c4			; 
13c4			;    ld    hl, -1004 
13c4			;    ld    de, OP1 
13c4			;    call  DispA 
13c4			;    ld    hl, OP1 
13c4			;    syscall  PutS 
13c4			 
13c4			 
13c4			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
13c4			 
13c4			 
13c4			;Converts an ASCII string to an unsigned 16-bit integer 
13c4			;Quits when it reaches a non-decimal digit 
13c4			 
13c4			string_to_uint16: 
13c4			atoui_16: 
13c4			;Input: 
13c4			;     DE points to the string 
13c4			;Outputs: 
13c4			;     HL is the result 
13c4			;     A is the 8-bit value of the number 
13c4			;     DE points to the byte after the number 
13c4			;Destroys: 
13c4			;     BC 
13c4			;       if the string is non-empty, BC is HL/10 
13c4			;Size:  24 bytes 
13c4			;Speed: 42+d(104+{0,9}) 
13c4			;       d is the number of digits in the number 
13c4			;       max is 640 cycles for a 5 digit number 
13c4			;Assuming no leading zeros: 
13c4			;1 digit:  146cc 
13c4			;2 digit:  250cc 
13c4			;3 digit:  354cc or 363cc (avg: 354.126cc) 
13c4			;4 digit:  458cc or 467cc (avg: 458.27cc) 
13c4			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
13c4			;avg: 544.81158447265625cc (544+13297/16384) 
13c4			;=============================================================== 
13c4 21 00 00		  ld hl,0 
13c7			.u16a: 
13c7 1a			  ld a,(de) 
13c8 d6 30		  sub 30h 
13ca fe 0a		  cp 10 
13cc d0			  ret nc 
13cd 13			  inc de 
13ce 44			  ld b,h 
13cf 4d			  ld c,l 
13d0 29			  add hl,hl 
13d1 29			  add hl,hl 
13d2 09			  add hl,bc 
13d3 29			  add hl,hl 
13d4 85			  add a,l 
13d5 6f			  ld l,a 
13d6 30 ef		  jr nc,.u16a 
13d8 24			  inc h 
13d9 c3 c7 13		  jp .u16a 
13dc			 
13dc			 
13dc			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
13dc			 
13dc			;written by Zeda 
13dc			;Converts a 16-bit unsigned integer to an ASCII string. 
13dc			 
13dc			uitoa_16: 
13dc			;Input: 
13dc			;   DE is the number to convert 
13dc			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
13dc			;Output: 
13dc			;   HL points to the null-terminated ASCII string 
13dc			;      NOTE: This isn't necessarily the same as the input HL. 
13dc d5			  push de 
13dd c5			  push bc 
13de f5			  push af 
13df eb			  ex de,hl 
13e0			 
13e0 01 f0 d8		  ld bc,-10000 
13e3 3e 2f		  ld a,'0'-1 
13e5 3c			  inc a 
13e6 09			  add hl,bc  
13e7 38 fc		   jr c,$-2 
13e9 12			  ld (de),a 
13ea 13			  inc de 
13eb			 
13eb 01 e8 03		  ld bc,1000 
13ee 3e 3a		  ld a,'9'+1 
13f0 3d			  dec a  
13f1 09			  add hl,bc  
13f2 30 fc		   jr nc,$-2 
13f4 12			  ld (de),a 
13f5 13			  inc de 
13f6			 
13f6 01 9c ff		  ld bc,-100 
13f9 3e 2f		  ld a,'0'-1 
13fb 3c			  inc a  
13fc 09			  add hl,bc  
13fd 38 fc		   jr c,$-2 
13ff 12			  ld (de),a 
1400 13			  inc de 
1401			 
1401 7d			  ld a,l 
1402 26 3a		  ld h,'9'+1 
1404 25			  dec h  
1405 c6 0a		  add a,10  
1407 30 fb		   jr nc,$-3 
1409 c6 30		  add a,'0' 
140b eb			  ex de,hl 
140c 72			  ld (hl),d 
140d 23			  inc hl 
140e 77			  ld (hl),a 
140f 23			  inc hl 
1410 36 00		  ld (hl),0 
1412			 
1412			;Now strip the leading zeros 
1412 0e fa		  ld c,-6 
1414 09			  add hl,bc 
1415 3e 30		  ld a,'0' 
1417 23			  inc hl  
1418 be			  cp (hl)  
1419 28 fc		  jr z,$-2 
141b			 
141b			;Make sure that the string is non-empty! 
141b 7e			  ld a,(hl) 
141c b7			  or a 
141d 20 01		  jr nz,.atoub 
141f 2b			  dec hl 
1420			.atoub: 
1420			 
1420 f1			  pop af 
1421 c1			  pop bc 
1422 d1			  pop de 
1423 c9			  ret 
1424			 
1424			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1424			 
1424			toUpper: 
1424			;A is the char. 
1424			;If A is a lowercase letter, this sets it to the matching uppercase 
1424			;18cc or 30cc or 41cc 
1424			;avg: 26.75cc 
1424 fe 61		  cp 'a' 
1426 d8			  ret c 
1427 fe 7b		  cp 'z'+1 
1429 d0			  ret nc 
142a d6 20		  sub 'a'-'A' 
142c c9			  ret 
142d			 
142d			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
142d			 
142d			; String Length 
142d			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
142d			 
142d			; Get the length of the null-terminated string starting at $8000 hl 
142d			;    LD     HL, $8000 
142d			 
142d			strlenz: 
142d			 
142d af			    XOR    A               ; Zero is the value we are looking for. 
142e 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
142f 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1430			                           ; 65, 536 bytes (the entire addressable memory space). 
1430 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1432			 
1432			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1432 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1433 6f			    LD     L, A             ; number of bytes 
1434 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1436 2b			    DEC    HL              ; Compensate for null. 
1437 c9				ret 
1438			 
1438			; Get the length of the A terminated string starting at $8000 hl 
1438			;    LD     HL, $8000 
1438			 
1438			strlent: 
1438			 
1438			                  ; A is the value we are looking for. 
1438 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
143a 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
143c			                           ; 65, 536 bytes (the entire addressable memory space). 
143c ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
143e			 
143e			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
143e 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1440 2e 00		    LD     L, 0             ; number of bytes 
1442 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1444 2b			    DEC    HL              ; Compensate for null. 
1445 c9				ret 
1446			 
1446			 
1446			;Comparing Strings 
1446			 
1446			;IN    HL     Address of string1. 
1446			;      DE     Address of string2. 
1446			 
1446			; doc given but wrong??? 
1446			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1446			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1446			; tested 
1446			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1446			 
1446			strcmp_old: 
1446 e5			    PUSH   HL 
1447 d5			    PUSH   DE 
1448			 
1448 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1449 be			    CP     (HL)            ; (want to minimize work). 
144a 38 01		    JR     C, Str1IsBigger 
144c 7e			    LD     A, (HL) 
144d			 
144d			Str1IsBigger: 
144d 4f			    LD     C, A             ; Put length in BC 
144e 06 00		    LD     B, 0 
1450 13			    INC    DE              ; Increment pointers to meat of string. 
1451 23			    INC    HL 
1452			 
1452			CmpLoop: 
1452 1a			    LD     A, (DE)          ; Compare bytes. 
1453 ed a1		    CPI 
1455 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1457 13			    INC    DE              ; Update pointer. 
1458 ea 52 14		    JP     PE, CmpLoop 
145b			 
145b d1			    POP    DE 
145c e1			    POP    HL 
145d 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
145e be			    CP     (HL) 
145f c9			    RET 
1460			 
1460			NoMatch: 
1460 2b			    DEC    HL 
1461 be			    CP     (HL)            ; Compare again to affect carry. 
1462 d1			    POP    DE 
1463 e1			    POP    HL 
1464 c9			    RET 
1465			 
1465			;; test strmp 
1465			; 
1465			;ld de, .str1 
1465			;ld hl, .str2 
1465			;call strcmp 
1465			;jr z, .z1 
1465			;;this 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "NZ1" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			;.z1: 
1465			; 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "ZZ1" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			; 
1465			;ld de, .str1 
1465			;ld hl, .str1 
1465			;call strcmp 
1465			;jr z, .z2 
1465			;;this 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "NZ2" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			;.z2: 
1465			; 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "ZZ2" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			; 
1465			;ld de, .str1 
1465			;ld hl, .str2 
1465			;call strcmp 
1465			;jr c, .c1 
1465			; 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "Nc1" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			;.c1: 
1465			;;this 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "cc1" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			; 
1465			;ld de, .str1 
1465			;ld hl, .str1 
1465			;call strcmp 
1465			;jr c, .c2 
1465			;;this 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "Nc2" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			;.c2: 
1465			; 
1465			;	if DEBUG_FORTH_WORDS 
1465			;		DMARK "cc2" 
1465			;		CALLMONITOR 
1465			;	endif 
1465			;	NEXTW 
1465			;.str1:   db "string1",0 
1465			;.str2:   db "string2",0 
1465			 
1465			; only care about direct match or not 
1465			; hl and de strings 
1465			; zero set if the same 
1465			 
1465			strcmp: 
1465 1a				ld a, (de) 
1466 be				cp (hl) 
1467 28 02			jr z, .ssame 
1469 b7				or a 
146a c9				ret 
146b			 
146b			.ssame:  
146b fe 00			cp 0 
146d c8				ret z 
146e			 
146e 23				inc hl 
146f 13				inc de 
1470 18 f3			jr strcmp 
1472				 
1472				 
1472			 
1472			 
1472			 
1472			 
1472			; eof 
1472			 
1472			 
1472			 
1472			 
1472			 
1472			 
# End of file firmware_strings.asm
1472			include "firmware_memory.asm"   ; malloc and free  
1472			 
1472			if DEBUG_FORTH_MALLOC_HIGH 
1472			.mallocsize: db "Wants malloc >256",0 
1472			.mallocasize: db "MALLOC gives >256",0 
1472			.malloczero: db "MALLOC gives zero",0 
1472			 
1472			malloc_guard_zerolen: 
1472				push hl 
1472				push de 
1472				push af 
1472			 
1472				ld de, 0 
1472			        call cmp16 
1472				jr nz, .lowalloz 
1472			 
1472				push hl 
1472				push de 
1472					ld hl, display_fb0 
1472					ld (display_fb_active), hl 
1472				call clear_display 
1472				ld a, 0 
1472				ld de, .malloczero 
1472				call str_at_display 
1472				call update_display 
1472				call delay1s 
1472				call delay1s 
1472				call bp_on 
1472			;	ld a, 0 
1472			;	ld (os_view_disable), a 
1472			 
1472				pop de 
1472				pop hl 
1472			 
1472				 
1472			 
1472				CALLMONITOR 
1472			.lowalloz: 
1472			 
1472			 
1472				pop af 
1472				pop de 
1472				pop hl 
1472			ret 
1472			 
1472			malloc_guard_entry: 
1472				push hl 
1472				push de 
1472				push af 
1472			 
1472			 	or a      ;clear carry flag 
1472				push hl 
1472				ld de, 255 
1472				sbc hl, de 
1472				jr c, .lowalloc 
1472			 
1472				push de 
1472					ld hl, display_fb0 
1472					ld (display_fb_active), hl 
1472				call clear_display 
1472				ld a, 0 
1472				ld de, .mallocsize 
1472				call str_at_display 
1472				call update_display 
1472				call delay1s 
1472				call delay1s 
1472			;	ld a, 0 
1472			;	ld (os_view_disable), a 
1472				call bp_on 
1472			 
1472				pop de 
1472				pop hl 
1472			 
1472				 
1472			 
1472				CALLMONITOR 
1472				jr .lowdone 
1472			.lowalloc: 
1472			 
1472			 
1472				pop hl 
1472			.lowdone:	pop af 
1472				pop de 
1472				pop hl 
1472			ret 
1472			 
1472			malloc_guard_exit: 
1472				push hl 
1472				push de 
1472				push af 
1472			 
1472			 	or a      ;clear carry flag 
1472				push hl 
1472				ld de, 255 
1472				sbc hl, de 
1472				jr c, .lowallocx 
1472			 
1472				push de 
1472					ld hl, display_fb0 
1472					ld (display_fb_active), hl 
1472				call clear_display 
1472				ld a, 0 
1472				ld de, .mallocasize 
1472				call str_at_display 
1472				call update_display 
1472				call delay1s 
1472				call delay1s 
1472			;	ld a, 0 
1472			;	ld (os_view_disable), a 
1472				call bp_on 
1472				pop de 
1472				pop hl 
1472			 
1472				CALLMONITOR 
1472				jr .lowdonex 
1472			.lowallocx: 
1472			 
1472				pop hl 
1472			.lowdonex:	pop af 
1472				pop de 
1472				pop hl 
1472			ret 
1472			endif 
1472			 
1472			if MALLOC_2 
1472			; Z80 Malloc and Free Functions 
1472			 
1472			; Malloc Function: 
1472			; Input: 
1472			;   HL: Size of block to allocate 
1472			; Output: 
1472			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1472			 
1472			malloc: 
1472				 
1472			if DEBUG_FORTH_MALLOC_HIGH 
1472			call malloc_guard_entry 
1472			endif 
1472			 
1472			 
1472			 
1472			 
1472					if DEBUG_FORTH_MALLOC 
1472						DMARK "mal" 
1472						CALLMONITOR 
1472					endif 
1472			    push af            ; Save AF register 
1472			    ld a, l            ; Load low byte of size into A 
1472			    or h               ; Check if size is zero 
1472			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1472			 
1472			    ; Allocate memory 
1472			    ld hl, (heap_start) ; Load start of heap into HL 
1472					if DEBUG_FORTH_MALLOC 
1472						DMARK "ma1" 
1472						CALLMONITOR 
1472					endif 
1472			    call malloc_internal ; Call internal malloc function 
1472			    pop af             ; Restore AF register 
1472			if DEBUG_FORTH_MALLOC_HIGH 
1472			call malloc_guard_exit 
1472			call malloc_guard_zerolen 
1472			endif 
1472			    ret                ; Return 
1472			 
1472			; Free Function: 
1472			; Input: 
1472			;   HL: Pointer to memory block to free 
1472			; Output: 
1472			;   None 
1472			 
1472			free: 
1472			    push af            ; Save AF register 
1472			    ld a, l            ; Load low byte of pointer into A 
1472			    or h               ; Check if pointer is NULL 
1472			    jp z, free_exit    ; If pointer is NULL, exit 
1472			 
1472			    ; Free memory 
1472			    ld hl, (heap_start) ; Load start of heap into HL 
1472			    call free_internal  ; Call internal free function 
1472			    pop af             ; Restore AF register 
1472			    ret                ; Return 
1472			 
1472			; Internal Malloc Function: 
1472			; Input: 
1472			;   HL: Size of block to allocate 
1472			; Output: 
1472			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1472			 
1472			malloc_internal: 
1472			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1472			    add hl, bc         ; Add management overhead to requested size 
1472			    ex de, hl          ; Save total size in DE, and keep it in HL 
1472					if DEBUG_FORTH_MALLOC 
1472						DMARK "ma2" 
1472						CALLMONITOR 
1472					endif 
1472			 
1472			    ; Search for free memory block 
1472			    ld de, (heap_end)  ; Load end of heap into DE 
1472			    ld bc, 0           ; Initialize counter 
1472			 
1472					if DEBUG_FORTH_MALLOC 
1472						DMARK "ma2" 
1472						CALLMONITOR 
1472					endif 
1472			malloc_search_loop: 
1472			    ; Check if current block is free 
1472			    ld a, (hl)         ; Load current block's status (free or used) 
1472			    cp 0               ; Compare with zero (free) 
1472			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1472			 
1472			    ; Check if current block is large enough 
1472			    ld a, (hl+1)       ; Load high byte of block size 
1472			    cp l               ; Compare with low byte of requested size 
1472			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1472			 
1472			    ld a, (hl+2)       ; Load low byte of block size 
1472			    cp h               ; Compare with high byte of requested size 
1472			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1472			 
1472			    ; Mark block as used 
1472			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1472			 
1472			    ; Calculate remaining space in block 
1472			    ld bc, 0           ; Clear BC 
1472			    add hl, bc         ; Increment HL to point to start of data block 
1472			    add hl, de         ; HL = HL + DE (total size) 
1472			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1472			    add hl, bc         ; Add management overhead to start of data block 
1472			 
1472			    ; Save pointer to allocated block in HL 
1472			if DEBUG_FORTH_MALLOC_HIGH 
1472						DMARK "ma5" 
1472			call malloc_guard_exit 
1472			call malloc_guard_zerolen 
1472			endif 
1472			    ret 
1472			 
1472			malloc_skip_block_check: 
1472			    ; Move to the next block 
1472			    ld bc, 3           ; Size of management overhead 
1472			    add hl, bc         ; Move to the next block 
1472			    inc de             ; Increment counter 
1472			 
1472			    ; Check if we have reached the end of heap 
1472			    ld a, e            ; Load low byte of heap end address 
1472			    cp (hl)            ; Compare with low byte of current address 
1472			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1472			    ld a, d            ; Load high byte of heap end address 
1472			    cp 0               ; Check if it's zero (end of memory) 
1472			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1472			 
1472			    ; If we reached here, allocation failed 
1472			    xor a              ; Set result to NULL 
1472			if DEBUG_FORTH_MALLOC_HIGH 
1472						DMARK "ma6" 
1472			call malloc_guard_exit 
1472			call malloc_guard_zerolen 
1472			endif 
1472			    ret 
1472			malloc_exit: 
1472			if DEBUG_FORTH_MALLOC_HIGH 
1472						DMARK "ma7" 
1472			call malloc_guard_exit 
1472			call malloc_guard_zerolen 
1472			endif 
1472			    ret 
1472			 
1472			; Internal Free Function: 
1472			; Input: 
1472			;   HL: Pointer to memory block to free 
1472			; Output: 
1472			;   None 
1472			 
1472			free_internal: 
1472			    ld de, (heap_start) ; Load start of heap into DE 
1472			    ld bc, 0            ; Initialize counter 
1472			 
1472			free_search_loop: 
1472			    ; Check if current block contains the pointer 
1472			    ld a, l             ; Load low byte of pointer 
1472			    cp (hl+1)           ; Compare with high byte of current block's address 
1472			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1472			    ld a, h             ; Load high byte of pointer 
1472			    cp (hl+2)           ; Compare with low byte of current block's address 
1472			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1472			 
1472			    ; Mark block as free 
1472			    ld (hl), 0          ; Set status byte to indicate free block 
1472			    ret                 ; Return 
1472			 
1472			free_skip_block_check: 
1472			    ; Move to the next block 
1472			    ld bc, 3            ; Size of management overhead 
1472			    add hl, bc          ; Move to the next block 
1472			    inc de              ; Increment counter 
1472			 
1472			    ; Check if we have reached the end of heap 
1472			    ld a, e             ; Load low byte of heap end address 
1472			    cp (hl)             ; Compare with low byte of current address 
1472			    jr nz, free_search_loop  ; If not equal, continue searching 
1472			    ld a, d             ; Load high byte of heap end address 
1472			    cp 0                ; Check if it's zero (end of memory) 
1472			    jr nz, free_search_loop  ; If not zero, continue searching 
1472			 
1472			    ; If we reached here, pointer is not found in heap 
1472			    ret 
1472			 
1472			free_exit: 
1472			    ret                 ; Return 
1472			 
1472			; Define heap start and end addresses 
1472			;heap_start:    .dw 0xC000   ; Start of heap 
1472			;heap_end:      .dw 0xE000   ; End of heap 
1472			 
1472			endif 
1472			 
1472			 
1472			if MALLOC_1 
1472			 
1472			 
1472			 
1472			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1472			 
1472			;moved to firmware.asm 
1472			;heap_start        .equ  0x9000      ; Starting address of heap 
1472			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1472			 
1472			;      .org 0 
1472			;      jp    main 
1472			 
1472			 
1472			;      .org  0x100 
1472			;main: 
1472			;      ld    HL, 0x8100 
1472			;      ld    SP, HL 
1472			; 
1472			;      call  heap_init 
1472			; 
1472			;      ; Make some allocations 
1472			;      ld    HL, 12 
1472			;      call  malloc            ; Allocates 0x9004 
1472			; 
1472			;      ld    HL, 12 
1472			;      call  malloc            ; Allocates 0x9014 
1472			; 
1472			;      ld    HL, 12 
1472			;      call  malloc            ; Allocates 0x9024 
1472			; 
1472			;      ; Free some allocations 
1472			;      ld    HL, 0x9014 
1472			;      call  free 
1472			; 
1472			;      ld    HL, 0x9004 
1472			;      call  free 
1472			; 
1472			;      ld    HL, 0x9024 
1472			;      call  free 
1472			; 
1472			; 
1472			;      halt 
1472			 
1472			 
1472			;------------------------------------------------------------------------------ 
1472			;     heap_init                                                               : 
1472			;                                                                             : 
1472			; Description                                                                 : 
1472			;     Initialise the heap and make it ready for malloc and free operations.   : 
1472			;                                                                             : 
1472			;     The heap is maintained as a linked list, starting with an initial       : 
1472			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1472			;     the first free block in the heap. Each block then points to the next    : 
1472			;     free block within the heap, and the free list ends at the first block   : 
1472			;     with a null pointer to the next free block.                             : 
1472			;                                                                             : 
1472			; Parameters                                                                  : 
1472			;     Inputs are compile-time only. Two defines which specify the starting    : 
1472			;     address of the heap and its size are required, along with a memory      : 
1472			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1472			;     principally stores a pointer to the first free block in the heap.       : 
1472			;                                                                             : 
1472			; Returns                                                                     : 
1472			;     Nothing                                                                 : 
1472			;------------------------------------------------------------------------------ 
1472			heap_init: 
1472 e5			      push  HL 
1473			 
1473			      ; Initialise free list struct 
1473 21 0e 80		      ld    HL, heap_start 
1476 22 0a 80		      ld    (free_list), HL 
1479 21 00 00		      ld    HL, 0 
147c 22 0c 80		      ld    (free_list+2), HL 
147f			 
147f			      ; Insert first free block at bottom of heap, consumes entire heap 
147f 21 95 f1		      ld    HL, heap_start+heap_size-4 
1482 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
1485 21 87 71		      ld    HL, heap_size-4 
1488 22 10 80		      ld    (heap_start+2), HL      ; Block size 
148b			 
148b			      ; Insert end of free list block at top of heap - two null words will 
148b			      ; terminate the free list 
148b 21 00 00		      ld    HL, 0 
148e 22 97 f1		      ld    (heap_start+heap_size-2), HL 
1491 22 95 f1		      ld    (heap_start+heap_size-4), HL 
1494			 
1494 e1			      pop   HL 
1495			 
1495 c9			      ret 
1496			 
1496			 
1496			;------------------------------------------------------------------------------ 
1496			;     malloc                                                                  : 
1496			;                                                                             : 
1496			; Description                                                                 : 
1496			;     Allocates the wanted space from the heap and returns the address of the : 
1496			;     first useable byte of the allocation.                                   : 
1496			;                                                                             : 
1496			;     Allocations can happen in one of two ways:                              : 
1496			;                                                                             : 
1496			;     1. A free block may be found which is the exact size wanted. In this    : 
1496			;        case the block is removed from the free list and retuedn to the      : 
1496			;        caller.                                                              : 
1496			;     2. A free block may be found which is larger than the size wanted. In   : 
1496			;        this case, the larger block is split into two. The first portion of  : 
1496			;        this block will become the requested space by the malloc call and    : 
1496			;        is returned to the caller. The second portion becomes a new free     : 
1496			;        block, and the free list is adjusted to maintain continuity via this : 
1496			;        newly created block.                                                 : 
1496			;                                                                             : 
1496			;     malloc does not set any initial value in the allocated space, the       : 
1496			;     caller is required to do this as required.                              : 
1496			;                                                                             : 
1496			;     This implementation of malloc uses the stack exclusively, and is        : 
1496			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1496			;     advisable to disable interrupts before calling malloc, and recommended  : 
1496			;     to avoid the use of malloc inside ISRs in general.                      : 
1496			;                                                                             : 
1496			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1496			;                                                                             : 
1496			; Parameters                                                                  : 
1496			;     HL  Number of bytes wanted                                              : 
1496			;                                                                             : 
1496			; Returns                                                                     : 
1496			;     HL  Address of the first useable byte of the allocation                 : 
1496			;                                                                             : 
1496			; Flags                                                                       : 
1496			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1496			;                                                                             : 
1496			; Stack frame                                                                 : 
1496			;       |             |                                                       : 
1496			;       +-------------+                                                       : 
1496			;       |     BC      |                                                       : 
1496			;       +-------------+                                                       : 
1496			;       |     DE      |                                                       : 
1496			;       +-------------+                                                       : 
1496			;       |     IX      |                                                       : 
1496			;       +-------------+                                                       : 
1496			;       |  prev_free  |                                                       : 
1496			;   +4  +-------------+                                                       : 
1496			;       |  this_free  |                                                       : 
1496			;   +2  +-------------+                                                       : 
1496			;       |  next_free  |                                                       : 
1496			;   +0  +-------------+                                                       : 
1496			;       |             |                                                       : 
1496			;                                                                             : 
1496			;------------------------------------------------------------------------------ 
1496			 
1496			 
1496			;malloc: 
1496			; 
1496			;	SAVESP ON 1 
1496			; 
1496			;	call malloc_code 
1496			; 
1496			;	CHECKSP ON 1 
1496			;	ret 
1496			 
1496			 
1496			malloc: 
1496 c5			      push  BC 
1497 d5			      push  DE 
1498 dd e5		      push  IX 
149a			if DEBUG_FORTH_MALLOC_HIGH 
149a			call malloc_guard_entry 
149a			endif 
149a			 
149a					if DEBUG_FORTH_MALLOC 
149a						DMARK "mal" 
149a						CALLMONITOR 
149a					endif 
149a 7c			      ld    A, H                    ; Exit if no space requested 
149b b5			      or    L 
149c ca 5b 15		      jp    Z, malloc_early_exit 
149f			 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			; 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			;inc hl 
149f			 
149f			 
149f			 
149f			 
149f					if DEBUG_FORTH_MALLOC 
149f						DMARK "maA" 
149f						CALLMONITOR 
149f					endif 
149f			      ; Set up stack frame 
149f eb			      ex    DE, HL 
14a0 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
14a3 39			      add   HL, SP 
14a4 f9			      ld    SP, HL 
14a5 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
14a9 dd 39		      add   IX, SP 
14ab			 
14ab			      ; Setup initial state 
14ab 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
14ae 19			      add   HL, DE 
14af			 
14af 44			      ld    B, H                    ; Move want to BC 
14b0 4d			      ld    C, L 
14b1			 
14b1 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
14b4 dd 75 04		      ld    (IX+4), L 
14b7 dd 74 05		      ld    (IX+5), H 
14ba			 
14ba 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
14bb 23			      inc   HL 
14bc 56			      ld    D, (HL) 
14bd dd 73 02		      ld    (IX+2), E 
14c0 dd 72 03		      ld    (IX+3), D 
14c3 eb			      ex    DE, HL                  ; this_free ptr into HL 
14c4			 
14c4					if DEBUG_FORTH_MALLOC 
14c4						DMARK "maB" 
14c4						CALLMONITOR 
14c4					endif 
14c4			      ; Loop through free block list to find some space 
14c4			malloc_find_space: 
14c4 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
14c5 23			      inc   HL 
14c6 56			      ld    D, (HL) 
14c7			 
14c7 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
14c8 b3			      or    E 
14c9 ca 55 15		      jp    Z, malloc_no_space 
14cc			 
14cc dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
14cf dd 72 01		      ld    (IX+1), D 
14d2			 
14d2			      ; Does this block have enough space to make the allocation? 
14d2 23			      inc   HL                      ; Load free block size into DE 
14d3 5e			      ld    E, (HL) 
14d4 23			      inc   HL 
14d5 56			      ld    D, (HL) 
14d6			 
14d6 eb			      ex    DE, HL                  ; Check size of block against want 
14d7 b7			      or    A                       ; Ensure carry flag clear 
14d8 ed 42		      sbc   HL, BC 
14da e5			      push  HL                      ; Store the result for later (new block size) 
14db			 
14db ca 2a 15		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
14de 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
14e0			 
14e0			      ; this_free block is not big enough, setup ptrs to test next free block 
14e0 e1			      pop   HL                      ; Discard previous result 
14e1			 
14e1 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
14e4 dd 66 03		      ld    H, (IX+3) 
14e7 dd 75 04		      ld    (IX+4), L 
14ea dd 74 05		      ld    (IX+5), H 
14ed			 
14ed dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
14f0 dd 66 01		      ld    H, (IX+1) 
14f3 dd 75 02		      ld    (IX+2), L 
14f6 dd 74 03		      ld    (IX+3), H 
14f9			 
14f9					if DEBUG_FORTH_MALLOC 
14f9						DMARK "MA>" 
14f9						CALLMONITOR 
14f9					endif 
14f9 18 c9		      jr    malloc_find_space 
14fb			 
14fb			      ; split a bigger block into two - requested size and remaining size 
14fb			malloc_alloc_split: 
14fb					if DEBUG_FORTH_MALLOC 
14fb						DMARK "MAs" 
14fb						CALLMONITOR 
14fb					endif 
14fb eb			      ex    DE, HL                  ; Calculate address of new free block 
14fc 2b			      dec   HL 
14fd 2b			      dec   HL 
14fe 2b			      dec   HL 
14ff 09			      add   HL, BC 
1500			 
1500			      ; Create a new block and point it at next_free 
1500 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
1503 dd 56 01		      ld    D, (IX+1) 
1506			 
1506 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1507 23			      inc   HL 
1508 72			      ld    (HL), D 
1509			 
1509 d1			      pop   DE                      ; Store size of new block into new block 
150a 23			      inc   HL 
150b 73			      ld    (HL), E 
150c 23			      inc   HL 
150d 72			      ld    (HL), D 
150e			 
150e			      ; Update this_free ptr to point to new block 
150e 2b			      dec   HL 
150f 2b			      dec   HL 
1510 2b			      dec   HL 
1511			 
1511 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1514 dd 56 03		      ld    D, (IX+3) 
1517			 
1517 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
151a dd 74 03		      ld    (IX+3), H 
151d			 
151d			      ; Modify this_free block to be allocation 
151d eb			      ex    DE, HL 
151e af			      xor   A                       ; Null the next block ptr of allocated block 
151f 77			      ld    (HL), A 
1520 23			      inc   HL 
1521 77			      ld    (HL), A 
1522			 
1522 23			      inc   HL                      ; Store want size into allocated block 
1523 71			      ld    (HL), C 
1524 23			      inc   HL 
1525 70			      ld    (HL), B 
1526 23			      inc   HL 
1527 e5			      push  HL                      ; Address of allocation to return 
1528			 
1528 18 19		      jr    malloc_update_links 
152a			 
152a			malloc_alloc_fit: 
152a e1			      pop   HL                      ; Dont need new block size, want is exact fit 
152b			 
152b					if DEBUG_FORTH_MALLOC 
152b						DMARK "MAf" 
152b						CALLMONITOR 
152b					endif 
152b			      ; Modify this_free block to be allocation 
152b eb			      ex    DE, HL 
152c 2b			      dec   HL 
152d 2b			      dec   HL 
152e 2b			      dec   HL 
152f			 
152f af			      xor   A                       ; Null the next block ptr of allocated block 
1530 77			      ld    (HL), A 
1531 23			      inc   HL 
1532 77			      ld    (HL), A 
1533			 
1533 23			      inc   HL                      ; Store address of allocation to return 
1534 23			      inc   HL 
1535 23			      inc   HL 
1536 e5			      push  HL 
1537			 
1537			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1537 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
153a dd 66 01		      ld    H, (IX+1) 
153d			 
153d dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1540 dd 74 03		      ld    (IX+3), H 
1543			 
1543			 
1543			malloc_update_links: 
1543			      ; Update prev_free ptr to point to this_free 
1543 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1546 dd 66 05		      ld    H, (IX+5) 
1549			 
1549 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
154c dd 56 03		      ld    D, (IX+3) 
154f			 
154f 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1550 23			      inc   HL 
1551 72			      ld    (HL), D 
1552			 
1552					if DEBUG_FORTH_MALLOC 
1552						DMARK "Mul" 
1552						CALLMONITOR 
1552					endif 
1552			      ; Clear the Z flag to indicate successful allocation 
1552 7a			      ld    A, D 
1553 b3			      or    E 
1554			 
1554 d1			      pop   DE                      ; Address of allocation 
1555					if DEBUG_FORTH_MALLOC 
1555						DMARK "MAu" 
1555						CALLMONITOR 
1555					endif 
1555			 
1555			malloc_no_space: 
1555 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1558 39			      add   HL, SP 
1559 f9			      ld    SP, HL 
155a			 
155a eb			      ex    DE, HL                  ; Alloc addr into HL for return 
155b					if DEBUG_FORTH_MALLOC 
155b						DMARK "MAN" 
155b						CALLMONITOR 
155b					endif 
155b			 
155b			malloc_early_exit: 
155b					if DEBUG_FORTH_MALLOC 
155b						DMARK "MAx" 
155b						CALLMONITOR 
155b					endif 
155b dd e1		      pop   IX 
155d d1			      pop   DE 
155e c1			      pop   BC 
155f			 
155f			if DEBUG_FORTH_MALLOC_HIGH 
155f			call malloc_guard_exit 
155f			call malloc_guard_zerolen 
155f			endif 
155f c9			      ret 
1560			 
1560			 
1560			;------------------------------------------------------------------------------ 
1560			;     free                                                                    : 
1560			;                                                                             : 
1560			; Description                                                                 : 
1560			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1560			;     returned by malloc, otherwise the behaviour is undefined.               : 
1560			;                                                                             : 
1560			;     Where possible, directly adjacent free blocks will be merged together   : 
1560			;     into larger blocks to help ensure that the heap does not become         : 
1560			;     excessively fragmented.                                                 : 
1560			;                                                                             : 
1560			;     free does not clear or set any other value into the freed space, and    : 
1560			;     therefore its contents may be visible through subsequent malloc's. The  : 
1560			;     caller should clear the freed space as required.                        : 
1560			;                                                                             : 
1560			;     This implementation of free uses the stack exclusively, and is          : 
1560			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1560			;     advisable to disable interrupts before calling free, and recommended    : 
1560			;     to avoid the use of free inside ISRs in general.                        : 
1560			;                                                                             : 
1560			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1560			;                                                                             : 
1560			; Parameters                                                                  : 
1560			;     HL  Pointer to address of first byte of allocation to be freed          : 
1560			;                                                                             : 
1560			; Returns                                                                     : 
1560			;     Nothing                                                                 : 
1560			;                                                                             : 
1560			; Stack frame                                                                 : 
1560			;       |             |                                                       : 
1560			;       +-------------+                                                       : 
1560			;       |     BC      |                                                       : 
1560			;       +-------------+                                                       : 
1560			;       |     DE      |                                                       : 
1560			;       +-------------+                                                       : 
1560			;       |     IX      |                                                       : 
1560			;       +-------------+                                                       : 
1560			;       |  prev_free  |                                                       : 
1560			;   +2  +-------------+                                                       : 
1560			;       |  next_free  |                                                       : 
1560			;   +0  +-------------+                                                       : 
1560			;       |             |                                                       : 
1560			;                                                                             : 
1560			;------------------------------------------------------------------------------ 
1560			free: 
1560 c5			      push  BC 
1561 d5			      push  DE 
1562 dd e5		      push  IX 
1564			 
1564 7c			      ld    A, H                    ; Exit if ptr is null 
1565 b5			      or    L 
1566 ca 2a 16		      jp    Z, free_early_exit 
1569			 
1569			      ; Set up stack frame 
1569 eb			      ex    DE, HL 
156a 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
156d 39			      add   HL, SP 
156e f9			      ld    SP, HL 
156f dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1573 dd 39		      add   IX, SP 
1575			 
1575			      ; The address in HL points to the start of the useable allocated space, 
1575			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1575			      ; address of the block itself. 
1575 eb			      ex    DE, HL 
1576 11 fc ff		      ld    DE, -4 
1579 19			      add   HL, DE 
157a			 
157a			      ; An allocated block must have a null next block pointer in it 
157a 7e			      ld    A, (HL) 
157b 23			      inc   HL 
157c b6			      or    (HL) 
157d c2 25 16		      jp    NZ, free_done 
1580			 
1580 2b			      dec   HL 
1581			 
1581 44			      ld    B, H                    ; Copy HL to BC 
1582 4d			      ld    C, L 
1583			 
1583			      ; Loop through the free list to find the first block with an address 
1583			      ; higher than the block being freed 
1583 21 0a 80		      ld    HL, free_list 
1586			 
1586			free_find_higher_block: 
1586 5e			      ld    E, (HL)                 ; Load next ptr from free block 
1587 23			      inc   HL 
1588 56			      ld    D, (HL) 
1589 2b			      dec   HL 
158a			 
158a dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
158d dd 72 01		      ld    (IX+1), D 
1590 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
1593 dd 74 03		      ld    (IX+3), H 
1596			 
1596 78			      ld    A, B                    ; Check if DE is greater than BC 
1597 ba			      cp    D                       ; Compare MSB first 
1598 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
159a 30 04		      jr    NC, free_find_higher_block_skip 
159c 79			      ld    A, C 
159d bb			      cp    E                       ; Then compare LSB 
159e 38 08		      jr    C, free_found_higher_block 
15a0			 
15a0			free_find_higher_block_skip: 
15a0 7a			      ld    A, D                    ; Reached the end of the free list? 
15a1 b3			      or    E 
15a2 ca 25 16		      jp    Z, free_done 
15a5			 
15a5 eb			      ex    DE, HL 
15a6			 
15a6 18 de		      jr    free_find_higher_block 
15a8			 
15a8			free_found_higher_block: 
15a8			      ; Insert freed block between prev and next free blocks 
15a8 71			      ld    (HL), C                 ; Point prev free block to freed block 
15a9 23			      inc   HL 
15aa 70			      ld    (HL), B 
15ab			 
15ab 60			      ld    H, B                    ; Point freed block at next free block 
15ac 69			      ld    L, C 
15ad 73			      ld    (HL), E 
15ae 23			      inc   HL 
15af 72			      ld    (HL), D 
15b0			 
15b0			      ; Check if the freed block is adjacent to the next free block 
15b0 23			      inc   HL                      ; Load size of freed block into HL 
15b1 5e			      ld    E, (HL) 
15b2 23			      inc   HL 
15b3 56			      ld    D, (HL) 
15b4 eb			      ex    DE, HL 
15b5			 
15b5 09			      add   HL, BC                  ; Add addr of freed block and its size 
15b6			 
15b6 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
15b9 dd 56 01		      ld    D, (IX+1) 
15bc			 
15bc b7			      or    A                       ; Clear the carry flag 
15bd ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
15bf 20 22		      jr    NZ, free_check_adjacent_to_prev 
15c1			 
15c1			      ; Freed block is adjacent to next, merge into one bigger block 
15c1 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
15c2 5e			      ld    E, (HL) 
15c3 23			      inc   HL 
15c4 56			      ld    D, (HL) 
15c5 e5			      push  HL                      ; Save ptr to next block for later 
15c6			 
15c6 60			      ld    H, B                    ; Store ptr from next block into freed block 
15c7 69			      ld    L, C 
15c8 73			      ld    (HL), E 
15c9 23			      inc   HL 
15ca 72			      ld    (HL), D 
15cb			 
15cb e1			      pop   HL                      ; Restore ptr to next block 
15cc 23			      inc   HL                      ; Load size of next block into DE 
15cd 5e			      ld    E, (HL) 
15ce 23			      inc   HL 
15cf 56			      ld    D, (HL) 
15d0 d5			      push  DE                      ; Save next block size for later 
15d1			 
15d1 60			      ld    H, B                    ; Load size of freed block into HL 
15d2 69			      ld    L, C 
15d3 23			      inc   HL 
15d4 23			      inc   HL 
15d5 5e			      ld    E, (HL) 
15d6 23			      inc   HL 
15d7 56			      ld    D, (HL) 
15d8 eb			      ex    DE, HL 
15d9			 
15d9 d1			      pop   DE                      ; Restore size of next block 
15da 19			      add   HL, DE                  ; Add sizes of both blocks 
15db eb			      ex    DE, HL 
15dc			 
15dc 60			      ld    H, B                    ; Store new bigger size into freed block 
15dd 69			      ld    L, C 
15de 23			      inc   HL 
15df 23			      inc   HL 
15e0 73			      ld    (HL), E 
15e1 23			      inc   HL 
15e2 72			      ld    (HL), D 
15e3			 
15e3			free_check_adjacent_to_prev: 
15e3			      ; Check if the freed block is adjacent to the prev free block 
15e3 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
15e6 dd 66 03		      ld    H, (IX+3) 
15e9			 
15e9 23			      inc   HL                      ; Size of prev free block into DE 
15ea 23			      inc   HL 
15eb 5e			      ld    E, (HL) 
15ec 23			      inc   HL 
15ed 56			      ld    D, (HL) 
15ee 2b			      dec   HL 
15ef 2b			      dec   HL 
15f0 2b			      dec   HL 
15f1			 
15f1 19			      add   HL, DE                  ; Add prev block addr and size 
15f2			 
15f2 b7			      or    A                       ; Clear the carry flag 
15f3 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
15f5 20 2e		      jr    NZ, free_done 
15f7			 
15f7			      ; Freed block is adjacent to prev, merge into one bigger block 
15f7 60			      ld    H, B                    ; Load next ptr from freed block into DE 
15f8 69			      ld    L, C 
15f9 5e			      ld    E, (HL) 
15fa 23			      inc   HL 
15fb 56			      ld    D, (HL) 
15fc e5			      push  HL                      ; Save freed block ptr for later 
15fd			 
15fd dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1600 dd 66 03		      ld    H, (IX+3) 
1603 73			      ld    (HL), E 
1604 23			      inc   HL 
1605 72			      ld    (HL), D 
1606			 
1606 e1			      pop   HL                      ; Restore freed block ptr 
1607 23			      inc   HL                      ; Load size of freed block into DE 
1608 5e			      ld    E, (HL) 
1609 23			      inc   HL 
160a 56			      ld    D, (HL) 
160b d5			      push  DE                      ; Save freed block size for later 
160c			 
160c dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
160f dd 66 03		      ld    H, (IX+3) 
1612 23			      inc   HL 
1613 23			      inc   HL 
1614 5e			      ld    E, (HL) 
1615 23			      inc   HL 
1616 56			      ld    D, (HL) 
1617			 
1617 e1			      pop   HL                      ; Add sizes of both blocks 
1618 19			      add   HL, DE 
1619 eb			      ex    DE, HL 
161a			 
161a dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
161d dd 66 03		      ld    H, (IX+3) 
1620 23			      inc   HL 
1621 23			      inc   HL 
1622 73			      ld    (HL), E 
1623 23			      inc   HL 
1624 72			      ld    (HL), D 
1625			 
1625			free_done: 
1625 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1628 39			      add   HL, SP 
1629 f9			      ld    SP, HL 
162a			 
162a			free_early_exit: 
162a dd e1		      pop   IX 
162c d1			      pop   DE 
162d c1			      pop   BC 
162e			 
162e c9			      ret 
162f			 
162f			; moved to firmware.asm 
162f			; 
162f			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
162f			;                  .dw   0 
162f			 
162f			 
162f			endif 
162f			 
162f			 
162f			if MALLOC_3 
162f			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
162f			;heap_start        .equ  0x9000      ; Starting address of heap 
162f			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
162f			; 
162f			 ;     .org 0 
162f			  ;    jp    main 
162f			; 
162f			; 
162f			 ;     .org  0x100 
162f			;main: 
162f			 ;     ld    HL, 0x8100 
162f			  ;    ld    SP, HL 
162f			; 
162f			;      call  heap_init 
162f			 
162f			      ; Make some allocations 
162f			;      ld    HL, 12 
162f			;      call  malloc            ; Allocates 0x9004 
162f			; 
162f			 ;     ld    HL, 12 
162f			;      call  malloc            ; Allocates 0x9014 
162f			 
162f			;      ld    HL, 12 
162f			;      call  malloc            ; Allocates 0x9024 
162f			 
162f			      ; Free some allocations 
162f			;      ld    HL, 0x9014 
162f			;      call  free 
162f			 
162f			;      ld    HL, 0x9004 
162f			;      call  free 
162f			; 
162f			;      ld    HL, 0x9024 
162f			;      call  free 
162f			 
162f			 
162f			 ;     halt 
162f			 
162f			 
162f			;------------------------------------------------------------------------------ 
162f			;     heap_init                                                               : 
162f			;                                                                             : 
162f			; Description                                                                 : 
162f			;     Initialise the heap and make it ready for malloc and free operations.   : 
162f			;                                                                             : 
162f			;     The heap is maintained as a linked list, starting with an initial       : 
162f			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
162f			;     the first free block in the heap. Each block then points to the next    : 
162f			;     free block within the heap, and the free list ends at the first block   : 
162f			;     with a null pointer to the next free block.                             : 
162f			;                                                                             : 
162f			; Parameters                                                                  : 
162f			;     Inputs are compile-time only. Two defines which specify the starting    : 
162f			;     address of the heap and its size are required, along with a memory      : 
162f			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
162f			;     principally stores a pointer to the first free block in the heap.       : 
162f			;                                                                             : 
162f			; Returns                                                                     : 
162f			;     Nothing                                                                 : 
162f			;------------------------------------------------------------------------------ 
162f			heap_init: 
162f			      push  HL 
162f			 
162f			      ; Initialise free list struct 
162f			      ld    HL, heap_start 
162f			      ld    (free_list), HL 
162f			      ld    HL, 0 
162f			      ld    (free_list+2), HL 
162f			 
162f			      ; Insert first free block at bottom of heap, consumes entire heap 
162f			      ld    HL, heap_start+heap_size-4 
162f			      ld    (heap_start), HL        ; Next block (end of free list) 
162f			      ld    HL, heap_size-4 
162f			      ld    (heap_start+2), HL      ; Block size 
162f			 
162f			      ; Insert end of free list block at top of heap - two null words will 
162f			      ; terminate the free list 
162f			      ld    HL, 0 
162f			      ld    (heap_start+heap_size-2), HL 
162f			      ld    (heap_start+heap_size-4), HL 
162f			 
162f			      pop   HL 
162f			 
162f			      ret 
162f			 
162f			 
162f			;------------------------------------------------------------------------------ 
162f			;     malloc                                                                  : 
162f			;                                                                             : 
162f			; Description                                                                 : 
162f			;     Allocates the wanted space from the heap and returns the address of the : 
162f			;     first useable byte of the allocation.                                   : 
162f			;                                                                             : 
162f			;     Allocations can happen in one of two ways:                              : 
162f			;                                                                             : 
162f			;     1. A free block may be found which is the exact size wanted. In this    : 
162f			;        case the block is removed from the free list and retuedn to the      : 
162f			;        caller.                                                              : 
162f			;     2. A free block may be found which is larger than the size wanted. In   : 
162f			;        this case, the larger block is split into two. The first portion of  : 
162f			;        this block will become the requested space by the malloc call and    : 
162f			;        is returned to the caller. The second portion becomes a new free     : 
162f			;        block, and the free list is adjusted to maintain continuity via this : 
162f			;        newly created block.                                                 : 
162f			;                                                                             : 
162f			;     malloc does not set any initial value in the allocated space, the       : 
162f			;     caller is required to do this as required.                              : 
162f			;                                                                             : 
162f			;     This implementation of malloc uses the stack exclusively, and is        : 
162f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
162f			;     advisable to disable interrupts before calling malloc, and recommended  : 
162f			;     to avoid the use of malloc inside ISRs in general.                      : 
162f			;                                                                             : 
162f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
162f			;                                                                             : 
162f			; Parameters                                                                  : 
162f			;     HL  Number of bytes wanted                                              : 
162f			;                                                                             : 
162f			; Returns                                                                     : 
162f			;     HL  Address of the first useable byte of the allocation                 : 
162f			;                                                                             : 
162f			; Flags                                                                       : 
162f			;     Z   Set if the allocation did not succeed, clear otherwise              : 
162f			;                                                                             : 
162f			; Stack frame                                                                 : 
162f			;       |             |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |     BC      |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |     DE      |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |     IX      |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |  prev_free  |                                                       : 
162f			;   +4  +-------------+                                                       : 
162f			;       |  this_free  |                                                       : 
162f			;   +2  +-------------+                                                       : 
162f			;       |  next_free  |                                                       : 
162f			;   +0  +-------------+                                                       : 
162f			;       |             |                                                       : 
162f			;                                                                             : 
162f			;------------------------------------------------------------------------------ 
162f			malloc: 
162f			      push  BC 
162f			      push  DE 
162f			      push  IX 
162f			 
162f			      ld    A, H                    ; Exit if no space requested 
162f			      or    L 
162f			      jp    Z, malloc_early_exit 
162f			 
162f			      ; Set up stack frame 
162f			      ex    DE, HL 
162f			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
162f			      add   HL, SP 
162f			      ld    SP, HL 
162f			      ld    IX, 0                   ; Use IX as a frame pointer 
162f			      add   IX, SP 
162f			 
162f			      ; Setup initial state 
162f			      ld    HL, 4                   ; want must also include space used by block struct 
162f			      add   HL, DE 
162f			 
162f			      ld    B, H                    ; Move want to BC 
162f			      ld    C, L 
162f			 
162f			      ld    HL, free_list           ; Store prev_free ptr to stack 
162f			      ld    (IX+4), L 
162f			      ld    (IX+5), H 
162f			 
162f			      ld    E, (HL)                 ; Store this_free ptr to stack 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      ld    (IX+2), E 
162f			      ld    (IX+3), D 
162f			      ex    DE, HL                  ; this_free ptr into HL 
162f			 
162f			      ; Loop through free block list to find some space 
162f			malloc_find_space: 
162f			      ld    E, (HL)                 ; Load next_free ptr into DE 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			 
162f			      ld    A, D                    ; Check for null next_free ptr - end of free list 
162f			      or    E 
162f			      jp    Z, malloc_no_space 
162f			 
162f			      ld    (IX+0), E               ; Store next_free ptr to stack 
162f			      ld    (IX+1), D 
162f			 
162f			      ; Does this block have enough space to make the allocation? 
162f			      inc   HL                      ; Load free block size into DE 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			 
162f			      ex    DE, HL                  ; Check size of block against want 
162f			      or    A                       ; Ensure carry flag clear 
162f			      sbc   HL, BC 
162f			      push  HL                      ; Store the result for later (new block size) 
162f			 
162f			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
162f			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
162f			 
162f			      ; this_free block is not big enough, setup ptrs to test next free block 
162f			      pop   HL                      ; Discard previous result 
162f			 
162f			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
162f			      ld    H, (IX+3) 
162f			      ld    (IX+4), L 
162f			      ld    (IX+5), H 
162f			 
162f			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
162f			      ld    H, (IX+1) 
162f			      ld    (IX+2), L 
162f			      ld    (IX+3), H 
162f			 
162f			      jr    malloc_find_space 
162f			 
162f			      ; split a bigger block into two - requested size and remaining size 
162f			malloc_alloc_split: 
162f			      ex    DE, HL                  ; Calculate address of new free block 
162f			      dec   HL 
162f			      dec   HL 
162f			      dec   HL 
162f			      add   HL, BC 
162f			 
162f			      ; Create a new block and point it at next_free 
162f			      ld    E, (IX+0)               ; Load next_free ptr into DE 
162f			      ld    D, (IX+1) 
162f			 
162f			      ld    (HL), E                 ; Store next_free ptr into new block 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			      pop   DE                      ; Store size of new block into new block 
162f			      inc   HL 
162f			      ld    (HL), E 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			      ; Update this_free ptr to point to new block 
162f			      dec   HL 
162f			      dec   HL 
162f			      dec   HL 
162f			 
162f			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
162f			      ld    D, (IX+3) 
162f			 
162f			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
162f			      ld    (IX+3), H 
162f			 
162f			      ; Modify this_free block to be allocation 
162f			      ex    DE, HL 
162f			      xor   A                       ; Null the next block ptr of allocated block 
162f			      ld    (HL), A 
162f			      inc   HL 
162f			      ld    (HL), A 
162f			 
162f			      inc   HL                      ; Store want size into allocated block 
162f			      ld    (HL), C 
162f			      inc   HL 
162f			      ld    (HL), B 
162f			      inc   HL 
162f			      push  HL                      ; Address of allocation to return 
162f			 
162f			      jr    malloc_update_links 
162f			 
162f			malloc_alloc_fit: 
162f			      pop   HL                      ; Dont need new block size, want is exact fit 
162f			 
162f			      ; Modify this_free block to be allocation 
162f			      ex    DE, HL 
162f			      dec   HL 
162f			      dec   HL 
162f			      dec   HL 
162f			 
162f			      xor   A                       ; Null the next block ptr of allocated block 
162f			      ld    (HL), A 
162f			      inc   HL 
162f			      ld    (HL), A 
162f			 
162f			      inc   HL                      ; Store address of allocation to return 
162f			      inc   HL 
162f			      inc   HL 
162f			      push  HL 
162f			 
162f			      ; Copy next_free ptr to this_free, remove allocated block from free list 
162f			      ld    L, (IX+0)               ; next_free to HL 
162f			      ld    H, (IX+1) 
162f			 
162f			      ld    (IX+2), L               ; HL to this_free 
162f			      ld    (IX+3), H 
162f			 
162f			 
162f			malloc_update_links: 
162f			      ; Update prev_free ptr to point to this_free 
162f			      ld    L, (IX+4)               ; prev_free ptr to HL 
162f			      ld    H, (IX+5) 
162f			 
162f			      ld    E, (IX+2)               ; this_free ptr to DE 
162f			      ld    D, (IX+3) 
162f			 
162f			      ld    (HL), E                 ; this_free ptr into prev_free 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			      ; Clear the Z flag to indicate successful allocation 
162f			      ld    A, D 
162f			      or    E 
162f			 
162f			      pop   DE                      ; Address of allocation 
162f			 
162f			malloc_no_space: 
162f			      ld    HL, 6                   ; Clean up stack frame 
162f			      add   HL, SP 
162f			      ld    SP, HL 
162f			 
162f			      ex    DE, HL                  ; Alloc addr into HL for return 
162f			 
162f			malloc_early_exit: 
162f			      pop   IX 
162f			      pop   DE 
162f			      pop   BC 
162f			 
162f			      ret 
162f			 
162f			 
162f			;------------------------------------------------------------------------------ 
162f			;     free                                                                    : 
162f			;                                                                             : 
162f			; Description                                                                 : 
162f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
162f			;     returned by malloc, otherwise the behaviour is undefined.               : 
162f			;                                                                             : 
162f			;     Where possible, directly adjacent free blocks will be merged together   : 
162f			;     into larger blocks to help ensure that the heap does not become         : 
162f			;     excessively fragmented.                                                 : 
162f			;                                                                             : 
162f			;     free does not clear or set any other value into the freed space, and    : 
162f			;     therefore its contents may be visible through subsequent malloc's. The  : 
162f			;     caller should clear the freed space as required.                        : 
162f			;                                                                             : 
162f			;     This implementation of free uses the stack exclusively, and is          : 
162f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
162f			;     advisable to disable interrupts before calling free, and recommended    : 
162f			;     to avoid the use of free inside ISRs in general.                        : 
162f			;                                                                             : 
162f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
162f			;                                                                             : 
162f			; Parameters                                                                  : 
162f			;     HL  Pointer to address of first byte of allocation to be freed          : 
162f			;                                                                             : 
162f			; Returns                                                                     : 
162f			;     Nothing                                                                 : 
162f			;                                                                             : 
162f			; Stack frame                                                                 : 
162f			;       |             |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |     BC      |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |     DE      |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |     IX      |                                                       : 
162f			;       +-------------+                                                       : 
162f			;       |  prev_free  |                                                       : 
162f			;   +2  +-------------+                                                       : 
162f			;       |  next_free  |                                                       : 
162f			;   +0  +-------------+                                                       : 
162f			;       |             |                                                       : 
162f			;                                                                             : 
162f			;------------------------------------------------------------------------------ 
162f			free: 
162f			      push  BC 
162f			      push  DE 
162f			      push  IX 
162f			 
162f			      ld    A, H                    ; Exit if ptr is null 
162f			      or    L 
162f			      jp    Z, free_early_exit 
162f			 
162f			      ; Set up stack frame 
162f			      ex    DE, HL 
162f			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
162f			      add   HL, SP 
162f			      ld    SP, HL 
162f			      ld    IX, 0                   ; Use IX as a frame pointer 
162f			      add   IX, SP 
162f			 
162f			      ; The address in HL points to the start of the useable allocated space, 
162f			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
162f			      ; address of the block itself. 
162f			      ex    DE, HL 
162f			      ld    DE, -4 
162f			      add   HL, DE 
162f			 
162f			      ; An allocated block must have a null next block pointer in it 
162f			      ld    A, (HL) 
162f			      inc   HL 
162f			      or    (HL) 
162f			      jp    NZ, free_done 
162f			 
162f			      dec   HL 
162f			 
162f			      ld    B, H                    ; Copy HL to BC 
162f			      ld    C, L 
162f			 
162f			      ; Loop through the free list to find the first block with an address 
162f			      ; higher than the block being freed 
162f			      ld    HL, free_list 
162f			 
162f			free_find_higher_block: 
162f			      ld    E, (HL)                 ; Load next ptr from free block 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      dec   HL 
162f			 
162f			      ld    (IX+0), E               ; Save ptr to next free block 
162f			      ld    (IX+1), D 
162f			      ld    (IX+2), L               ; Save ptr to prev free block 
162f			      ld    (IX+3), H 
162f			 
162f			      ld    A, B                    ; Check if DE is greater than BC 
162f			      cp    D                       ; Compare MSB first 
162f			      jr    Z, $+4                  ; MSB the same, compare LSB 
162f			      jr    NC, free_find_higher_block_skip 
162f			      ld    A, C 
162f			      cp    E                       ; Then compare LSB 
162f			      jr    C, free_found_higher_block 
162f			 
162f			free_find_higher_block_skip: 
162f			      ld    A, D                    ; Reached the end of the free list? 
162f			      or    E 
162f			      jp    Z, free_done 
162f			 
162f			      ex    DE, HL 
162f			 
162f			      jr    free_find_higher_block 
162f			 
162f			free_found_higher_block: 
162f			      ; Insert freed block between prev and next free blocks 
162f			      ld    (HL), C                 ; Point prev free block to freed block 
162f			      inc   HL 
162f			      ld    (HL), B 
162f			 
162f			      ld    H, B                    ; Point freed block at next free block 
162f			      ld    L, C 
162f			      ld    (HL), E 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			      ; Check if the freed block is adjacent to the next free block 
162f			      inc   HL                      ; Load size of freed block into HL 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      ex    DE, HL 
162f			 
162f			      add   HL, BC                  ; Add addr of freed block and its size 
162f			 
162f			      ld    E, (IX+0)               ; Load addr of next free block into DE 
162f			      ld    D, (IX+1) 
162f			 
162f			      or    A                       ; Clear the carry flag 
162f			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
162f			      jr    NZ, free_check_adjacent_to_prev 
162f			 
162f			      ; Freed block is adjacent to next, merge into one bigger block 
162f			      ex    DE, HL                  ; Load next ptr from next block into DE 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      push  HL                      ; Save ptr to next block for later 
162f			 
162f			      ld    H, B                    ; Store ptr from next block into freed block 
162f			      ld    L, C 
162f			      ld    (HL), E 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			      pop   HL                      ; Restore ptr to next block 
162f			      inc   HL                      ; Load size of next block into DE 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      push  DE                      ; Save next block size for later 
162f			 
162f			      ld    H, B                    ; Load size of freed block into HL 
162f			      ld    L, C 
162f			      inc   HL 
162f			      inc   HL 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      ex    DE, HL 
162f			 
162f			      pop   DE                      ; Restore size of next block 
162f			      add   HL, DE                  ; Add sizes of both blocks 
162f			      ex    DE, HL 
162f			 
162f			      ld    H, B                    ; Store new bigger size into freed block 
162f			      ld    L, C 
162f			      inc   HL 
162f			      inc   HL 
162f			      ld    (HL), E 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			free_check_adjacent_to_prev: 
162f			      ; Check if the freed block is adjacent to the prev free block 
162f			      ld    L, (IX+2)               ; Prev free block ptr into HL 
162f			      ld    H, (IX+3) 
162f			 
162f			      inc   HL                      ; Size of prev free block into DE 
162f			      inc   HL 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      dec   HL 
162f			      dec   HL 
162f			      dec   HL 
162f			 
162f			      add   HL, DE                  ; Add prev block addr and size 
162f			 
162f			      or    A                       ; Clear the carry flag 
162f			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
162f			      jr    NZ, free_done 
162f			 
162f			      ; Freed block is adjacent to prev, merge into one bigger block 
162f			      ld    H, B                    ; Load next ptr from freed block into DE 
162f			      ld    L, C 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      push  HL                      ; Save freed block ptr for later 
162f			 
162f			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
162f			      ld    H, (IX+3) 
162f			      ld    (HL), E 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			      pop   HL                      ; Restore freed block ptr 
162f			      inc   HL                      ; Load size of freed block into DE 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			      push  DE                      ; Save freed block size for later 
162f			 
162f			      ld    L, (IX+2)               ; Load size of prev block into DE 
162f			      ld    H, (IX+3) 
162f			      inc   HL 
162f			      inc   HL 
162f			      ld    E, (HL) 
162f			      inc   HL 
162f			      ld    D, (HL) 
162f			 
162f			      pop   HL                      ; Add sizes of both blocks 
162f			      add   HL, DE 
162f			      ex    DE, HL 
162f			 
162f			      ld    L, (IX+2)               ; Store new bigger size into prev block 
162f			      ld    H, (IX+3) 
162f			      inc   HL 
162f			      inc   HL 
162f			      ld    (HL), E 
162f			      inc   HL 
162f			      ld    (HL), D 
162f			 
162f			free_done: 
162f			      ld    HL, 4                   ; Clean up stack frame 
162f			      add   HL, SP 
162f			      ld    SP, HL 
162f			 
162f			free_early_exit: 
162f			      pop   IX 
162f			      pop   DE 
162f			      pop   BC 
162f			 
162f			      ret 
162f			 
162f			 
162f			;      .org 0x8000 
162f			; 
162f			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
162f			 ;                 .dw   0 
162f			 
162f			endif 
162f			 
162f			 
162f			if MALLOC_4 
162f			 
162f			; My memory allocation code. Very very simple.... 
162f			; allocate space under 250 chars 
162f			 
162f			heap_init: 
162f				; init start of heap as zero 
162f				;  
162f			 
162f				ld hl, heap_start 
162f				ld a, 0 
162f				ld (hl), a      ; empty block 
162f				inc hl 
162f				ld a, 0 
162f				ld (hl), a      ; length of block 
162f				; write end of list 
162f				inc hl 
162f				ld a,(hl) 
162f				inc hl 
162f				ld a,(hl) 
162f				 
162f			 
162f				; init some malloc vars 
162f			 
162f				ld hl, 0 
162f				ld (free_list), hl       ; store last malloc location 
162f			 
162f				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
162f				ld a, 0 
162f				ld (hl), a 
162f			 
162f			 
162f				ld hl, heap_start 
162f				;  
162f				  
162f				ret 
162f			 
162f			 
162f			;    free block marker 
162f			;    requested size  
162f			;    pointer to next block 
162f			;    .... 
162f			;    next block marker 
162f			 
162f			 
162f			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
162f			; 
162f			 
162f			 
162f			malloc:  
162f				push de 
162f				push bc 
162f				push af 
162f			 
162f				; hl space required 
162f				 
162f				ld c, l    ; hold space   (TODO only a max of 255) 
162f			 
162f			;	inc c     ; TODO BUG need to fix memory leak on push str 
162f			;	inc c 
162f			;	inc c 
162f			;	inc c 
162f			;	inc c 
162f			;	inc c 
162f			;	inc c 
162f			 
162f			 
162f			 
162f				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
162f			 
162f				ld a, (free_list+3) 
162f				cp 0 
162f				jr z, .contheap 
162f			 
162f				ld hl, (free_list)     ; get last alloc 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "mrs" 
162f						CALLMONITOR 
162f					endif 
162f				jr .startalloc 
162f			 
162f			.contheap: 
162f				ld hl, heap_start 
162f			 
162f			.startalloc: 
162f			 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "mym" 
162f						CALLMONITOR 
162f					endif 
162f			.findblock: 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "mmf" 
162f						CALLMONITOR 
162f					endif 
162f			 
162f				ld a,(hl)  
162f				; if byte is zero then clear to use 
162f			 
162f				cp 0 
162f				jr z, .foundemptyblock 
162f			 
162f				; if byte is not clear 
162f				;     then byte is offset to next block 
162f			 
162f				inc hl 
162f				ld a, (hl) ; get size 
162f			.nextblock:	inc hl 
162f					ld e, (hl) 
162f					inc hl 
162f					ld d, (hl) 
162f					ex de, hl 
162f			;	inc hl  ; move past the store space 
162f			;	inc hl  ; move past zero index  
162f			 
162f				; TODO detect no more space 
162f			 
162f				push hl 
162f				ld de, heap_end 
162f				call cmp16 
162f				pop hl 
162f				jr nc, .nospace 
162f			 
162f				jr .findblock 
162f			 
162f			.nospace: ld hl, 0 
162f				jp .exit 
162f			 
162f			 
162f			.foundemptyblock:	 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "mme" 
162f						CALLMONITOR 
162f					endif 
162f			 
162f			; TODO has block enough space if reusing??? 
162f			 
162f				;  
162f			 
162f			; see if this block has been previously used 
162f				inc hl 
162f				ld a, (hl) 
162f				dec hl 
162f				cp 0 
162f				jr z, .newblock 
162f			 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "meR" 
162f						CALLMONITOR 
162f					endif 
162f			 
162f			; no reusing previously allocated block 
162f			 
162f			; is it smaller than previously used? 
162f				 
162f				inc hl    ; move to size 
162f				ld a, c 
162f				sub (hl)        ; we want c < (hl) 
162f				dec hl    ; move back to marker 
162f			        jr z, .findblock 
162f			 
162f				; update with the new size which should be lower 
162f			 
162f			        ;inc  hl   ; negate next move. move back to size  
162f			 
162f			.newblock: 
162f				; need to be at marker here 
162f			 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "meN" 
162f						CALLMONITOR 
162f					endif 
162f			 
162f			 
162f				ld a, c 
162f			 
162f				ld (free_list+3), a	 ; flag resume from last malloc  
162f				ld (free_list), hl    ; save out last location 
162f			 
162f			 
162f				;inc a     ; space for length byte 
162f				ld (hl), a     ; save block in use marker 
162f			 
162f				inc hl   ; move to space marker 
162f				ld (hl), a    ; save new space 
162f			 
162f				inc hl   ; move to start of allocated area 
162f				 
162f			;	push hl     ; save where we are - 1  
162f			 
162f			;	inc hl  ; move past zero index  
162f				; skip space to set down new marker 
162f			 
162f				; provide some extra space for now 
162f			 
162f				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
162f				inc a 
162f				inc a 
162f			 
162f				push hl   ; save where we are in the node block 
162f			 
162f				call addatohl 
162f			 
162f				; write linked list point 
162f			 
162f				pop de     ; get our node position 
162f				ex de, hl 
162f			 
162f				ld (hl), e 
162f				inc hl 
162f				ld (hl), d 
162f			 
162f				inc hl 
162f			 
162f				; now at start of allocated data so save pointer 
162f			 
162f				push hl 
162f			 
162f				; jump to position of next node and setup empty header in DE 
162f			 
162f				ex de, hl 
162f			 
162f			;	inc hl ; move past end of block 
162f			 
162f				ld a, 0 
162f				ld (hl), a   ; empty marker 
162f				inc hl 
162f				ld (hl), a   ; size 
162f				inc hl  
162f				ld (hl), a   ; ptr 
162f				inc hl 
162f				ld (hl), a   ; ptr 
162f			 
162f			 
162f				pop hl 
162f			 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "mmr" 
162f						CALLMONITOR 
162f					endif 
162f			 
162f			.exit: 
162f				pop af 
162f				pop bc 
162f				pop de  
162f				ret 
162f			 
162f			 
162f			 
162f			 
162f			free:  
162f				push hl 
162f				push af 
162f				; get address in hl 
162f			 
162f					if DEBUG_FORTH_MALLOC_INT 
162f						DMARK "fre" 
162f						CALLMONITOR 
162f					endif 
162f				; data is at hl - move to block count 
162f				dec hl 
162f				dec hl    ; get past pointer 
162f				dec hl 
162f			 
162f				ld a, (hl)    ; need this for a validation check 
162f			 
162f				dec hl    ; move to block marker 
162f			 
162f				; now check that the block count and block marker are the same  
162f			        ; this checks that we are on a malloc node and not random memory 
162f			        ; OK a faint chance this could be a problem but rare - famous last words! 
162f			 
162f				ld c, a 
162f				ld a, (hl)    
162f			 
162f				cp c 
162f				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
162f			 
162f				; yes good chance we are on a malloc node 
162f			 
162f				ld a, 0      
162f				ld (hl), a   ; mark as free 
162f			 
162f				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
162f			 
162f			.freeignore:  
162f			 
162f				pop af 
162f				pop hl 
162f			 
162f				ret 
162f			 
162f			 
162f			 
162f			endif 
162f			 
162f			; eof 
# End of file firmware_memory.asm
162f			  
162f			; device C  
162f			; Now handled by SPI  
162f			;if SOUND_ENABLE  
162f			;	include "firmware_sound.asm"  
162f			;endif  
162f			  
162f			include "firmware_diags.asm"  
162f			; Hardware diags menu 
162f			 
162f			 
162f			config: 
162f			 
162f 3e 00			ld a, 0 
1631 21 5a 16			ld hl, .configmn 
1634 cd cc 0d			call menu 
1637			 
1637 fe 00			cp 0 
1639 c8				ret z 
163a			 
163a			;	cp 1 
163a			;	call z, .savetostore 
163a			 
163a fe 01			cp 1 
163c			if STARTUP_V1 
163c				call z, .selautoload 
163c			endif 
163c			 
163c			if STARTUP_V2 
163c cc 68 16			call z, .enautoload 
163f			endif 
163f fe 02			cp 2 
1641 cc 7f 16			call z, .disautoload 
1644			;	cp 3 
1644			;	call z, .selbank 
1644 fe 03			cp 3 
1646 cc f9 18			call z, .debug_tog 
1649 fe 04			cp 4 
164b cc 47 1a			call z, .bpsgo 
164e fe 05			cp 5 
1650 cc 22 19			call z, hardware_diags 
1653			if STARTUP_V2 
1653 fe 06			cp 6 
1655 cc ab 16			call z, create_startup 
1658			endif 
1658 18 d5			jr config 
165a			 
165a			.configmn: 
165a			;	dw prom_c3 
165a 35 1c			dw prom_c2 
165c 4b 1c			dw prom_c2a 
165e			;	dw prom_c2b 
165e			;	dw prom_c4 
165e ba 1c			dw prom_m4 
1660 d5 1c			dw prom_m4b 
1662 dd 1c			dw prom_c1 
1664			if STARTUP_V2 
1664 ec 1c			dw prom_c9 
1666			endif 
1666 00 00			dw 0 
1668				 
1668			 
1668			if STARTUP_V2 
1668			.enautoload: 
1668				if STORAGE_SE 
1668 3e fe			ld a, $fe      ; bit 0 clear 
166a 32 5d fa			ld (spi_device), a 
166d			 
166d cd 16 05			call storage_get_block_0 
1670			 
1670 3e 01			ld a, 1 
1672 32 98 fa			ld (store_page+STORE_0_AUTOFILE), a 
1675			 
1675 21 00 00				ld hl, 0 
1678 11 77 fa				ld de, store_page 
167b cd ca 04			call storage_write_block	 ; save update 
167e				else 
167e			 
167e				ld hl, prom_notav 
167e				ld de, prom_empty 
167e				call info_panel 
167e				endif 
167e			 
167e			 
167e c9				ret 
167f			endif 
167f			 
167f			.disautoload: 
167f				if STORAGE_SE 
167f 3e fe			ld a, $fe      ; bit 0 clear 
1681 32 5d fa			ld (spi_device), a 
1684			 
1684 cd 16 05			call storage_get_block_0 
1687			 
1687 3e 00			ld a, 0 
1689 32 98 fa			ld (store_page+STORE_0_AUTOFILE), a 
168c			 
168c 21 00 00				ld hl, 0 
168f 11 77 fa				ld de, store_page 
1692 cd ca 04			call storage_write_block	 ; save update 
1695				else 
1695			 
1695				ld hl, prom_notav 
1695				ld de, prom_empty 
1695				call info_panel 
1695				endif 
1695			 
1695			 
1695 c9				ret 
1696			 
1696			if STARTUP_V1 
1696			 
1696			; Select auto start 
1696			 
1696			.selautoload: 
1696			 
1696				 
1696				if STORAGE_SE 
1696			 
1696					call config_dir 
1696				        ld hl, scratch 
1696					ld a, 0 
1696					call menu 
1696			 
1696					cp 0 
1696					ret z 
1696			 
1696					dec a 
1696			 
1696			 
1696					; locate menu option 
1696			 
1696					ld hl, scratch 
1696					call table_lookup 
1696			 
1696					if DEBUG_FORTH_WORDS 
1696						DMARK "ALl" 
1696						CALLMONITOR 
1696					endif 
1696					; with the pointer to the menu it, the byte following the zero term is the file id 
1696			 
1696					ld a, 0 
1696					ld bc, 50   ; max of bytes to look at 
1696					cpir  
1696			 
1696					if DEBUG_FORTH_WORDS 
1696						DMARK "ALb" 
1696						CALLMONITOR 
1696					endif 
1696					;inc hl 
1696			 
1696					ld a, (hl)   ; file id 
1696					 
1696				        ; save bank and file ids 
1696			 
1696					push af 
1696			 
1696			; TODO need to save to block 0 on bank 1	 
1696			 
1696					call storage_get_block_0 
1696			 
1696					if DEBUG_FORTH_WORDS 
1696						DMARK "AL0" 
1696						CALLMONITOR 
1696					endif 
1696					pop af 
1696			 
1696					ld (store_page+STORE_0_FILERUN),a 
1696					 
1696					; save bank id 
1696			 
1696					ld a,(spi_device) 
1696					ld (store_page+STORE_0_BANKRUN),a 
1696			 
1696					; enable auto run of store file 
1696			 
1696					ld a, 1 
1696					ld (store_page+STORE_0_AUTOFILE),a 
1696			 
1696					; save buffer 
1696			 
1696					ld hl, 0 
1696					ld de, store_page 
1696					if DEBUG_FORTH_WORDS 
1696						DMARK "ALw" 
1696						CALLMONITOR 
1696					endif 
1696				call storage_write_block	 ; save update 
1696			  
1696			 
1696			 
1696			 
1696					ld hl, scratch 
1696					call config_fdir 
1696			 
1696				else 
1696			 
1696				ld hl, prom_notav 
1696				ld de, prom_empty 
1696				call info_panel 
1696			 
1696				endif 
1696				ret 
1696			endif 
1696			 
1696			 
1696			; Select storage bank 
1696			 
1696			.selbank: 
1696			 
1696			;	if STORAGE_SE 
1696			;	else 
1696			 
1696 21 01 1d			ld hl, prom_notav 
1699 11 17 1d			ld de, prom_empty 
169c cd 2c 0d			call info_panel 
169f			;	endif 
169f				 
169f c9				ret 
16a0			 
16a0			if STORAGE_SE 
16a0			 
16a0			.config_ldir:   
16a0				; Load storage bank labels into menu array 
16a0			 
16a0				 
16a0			 
16a0			 
16a0 c9				ret 
16a1			 
16a1			 
16a1			endif 
16a1			 
16a1			 
16a1			; Save user words to storage 
16a1			 
16a1			.savetostore: 
16a1			 
16a1			;	if STORAGE_SE 
16a1			; 
16a1			;		call config_dir 
16a1			;	        ld hl, scratch 
16a1			;		ld a, 0 
16a1			;		call menu 
16a1			;		 
16a1			;		ld hl, scratch 
16a1			;		call config_fdir 
16a1			; 
16a1			;	else 
16a1			 
16a1 21 01 1d			ld hl, prom_notav 
16a4 11 17 1d			ld de, prom_empty 
16a7 cd 2c 0d			call info_panel 
16aa			 
16aa			;	endif 
16aa			 
16aa c9				ret 
16ab			 
16ab			if STARTUP_V2 
16ab			 
16ab			create_startup: 
16ab			 
16ab 3e 00			ld a, 0 
16ad 21 20 18			ld hl, .crstart 
16b0 cd cc 0d			call menu 
16b3			 
16b3 fe 00			cp 0 
16b5 c8				ret z 
16b6			 
16b6 fe 01			cp 1 
16b8 cc e5 16			call z, .genlsword 
16bb fe 02			cp 2 
16bd cc ef 16			call z, .genedword 
16c0			 
16c0 fe 03			cp 3 
16c2 cc f9 16			call z, .gendemword 
16c5			 
16c5 fe 04			cp 4 
16c7 cc 03 17			call z, .genutlword 
16ca fe 05			cp 5 
16cc cc 0d 17			call z, .genspiword 
16cf fe 06			cp 6 
16d1 cc 17 17			call z, .genkeyword 
16d4 fe 07			cp 7 
16d6 cc db 16			call z, .gensoundword 
16d9 18 d0			jr create_startup 
16db			 
16db			.gensoundword: 
16db 21 a5 1c			ld hl, crs_sound 
16de 11 64 17			ld de, .soundworddef 
16e1 cd 21 17			call .genfile 
16e4 c9				ret 
16e5			.genlsword: 
16e5 21 62 1c			ld hl, crs_s1 
16e8 11 8c 17			ld de, .lsworddef 
16eb cd 21 17			call .genfile 
16ee c9				ret 
16ef			 
16ef			.genedword: 
16ef 11 90 17			ld de, .edworddef 
16f2 21 6b 1c			ld hl, crs_s2 
16f5 cd 21 17			call .genfile 
16f8 c9				ret 
16f9			 
16f9			.gendemword: 
16f9 11 98 17			ld de, .demoworddef 
16fc 21 74 1c			ld hl, crs_s3 
16ff cd 21 17			call .genfile 
1702 c9				ret 
1703			 
1703			.genutlword: 
1703 21 83 1c			ld hl, crs_s4 
1706 11 78 17			ld de, .utilwordef 
1709 cd 21 17			call .genfile 
170c c9				ret 
170d			.genspiword: 
170d 21 8a 1c			ld hl, crs_s5 
1710 11 de 17			ld de, .spiworddef 
1713 cd 21 17			call .genfile 
1716 c9				ret 
1717			.genkeyword: 
1717 21 96 1c			ld hl, crs_s6 
171a 11 f4 17			ld de, .keyworddef 
171d cd 21 17			call .genfile 
1720 c9				ret 
1721			 
1721			; hl - points to file name 
1721			; de - points to strings to add to file 
1721			 
1721			.genfile: 
1721 e5				push hl 
1722 d5				push de 
1723			 
1723 cd 9b 0d			call clear_display 
1726 3e 00			ld a, display_row_1 
1728 11 53 17			ld de, .genfiletxt 
172b cd ae 0d			call str_at_display 
172e cd be 0d			call update_display 
1731			 
1731 d1				pop de 
1732 e1				pop hl 
1733			 
1733			 
1733 d5				push de 
1734 cd 68 08			call storage_create 
1737				; id in hl 
1737 d1				pop de   ; table of strings to add 
1738			 
1738			.genloop: 
1738			 
1738 e5				push hl ; save id for next time around 
1739 d5				push de ; save de for next time around 
173a			 
173a eb				ex de, hl 
173b cd 34 24			call loadwordinhl 
173e eb				ex de, hl 
173f			 
173f				; need hl to be the id 
173f				; need de to be the string ptr 
173f				 
173f cd 55 0b			call storage_append 
1742			 
1742 d1				pop de 
1743 e1				pop hl 
1744			 
1744 13				inc de 
1745 13				inc de 
1746			 
1746 1a				ld a,(de) 
1747 fe 00			cp 0 
1749 20 ed			jr nz, .genloop 
174b 13				inc de 
174c 1a				ld a, (de) 
174d 1b				dec de 
174e fe 00			cp 0 
1750 20 e6			jr nz, .genloop	 
1752			 
1752 c9				ret 
1753			 
1753 .. 00		.genfiletxt:  db "Creating file...",0 
1764			 
1764			.soundworddef: 
1764 56 6a			dw sound1 
1766 7a 6a			dw sound2 
1768 aa 6a			dw sound3 
176a cf 6a			dw sound4 
176c dc 6a			dw sound5 
176e e9 6a			dw sound6 
1770 f6 6a			dw sound7 
1772 03 6b			dw sound8 
1774 1b 6b			dw sound9 
1776 00 00			dw 0 
1778			 
1778			.utilwordef: 
1778 a7 63			dw strncpy 
177a 82 63			dw type 
177c 4e 63			dw clrstack 
177e 07 63			dw longread 
1780 08 64			dw start1 
1782 18 64			dw start2 
1784 29 64			dw start3b 
1786 a4 64			dw start3c 
1788 04 65			dw list 
178a 00 00			dw 0 
178c			 
178c			.lsworddef: 
178c 29 64			dw start3b 
178e 00 00			dw 0 
1790			 
1790			.edworddef: 
1790 90 5f			dw edit1 
1792 b1 5f			dw edit2 
1794 e6 5f			dw edit3 
1796 00 00			dw 0 
1798			 
1798			.demoworddef: 
1798 4c 69			dw test5 
179a 84 69			dw test6 
179c bc 69			dw test7 
179e d0 69			dw test8 
17a0 fc 69			dw test9 
17a2 12 6a			dw test10 
17a4 32 6b			dw game1 
17a6 43 6b			dw game1a 
17a8 a5 6b			dw game1b 
17aa da 6b			dw game1c 
17ac 10 6c			dw game1d 
17ae 41 6c			dw game1s 
17b0 55 6c			dw game1t 
17b2 6a 6c			dw game1f 
17b4 9e 6c			dw game1z 
17b6 e2 6c			dw game1zz 
17b8 4b 6d			dw ssv2 
17ba 81 6d			dw ssv3 
17bc 9d 6d			dw ssv4 
17be b9 6d			dw ssv5 
17c0 d2 6d			dw ssv1 
17c2 1a 6e			dw ssv1cpm	 
17c4 71 6e			dw game2b 
17c6 df 6e			dw game2bf 
17c8 29 6f			dw game2mba 
17ca bf 6f			dw game2mbas	 
17cc e4 6f			dw game2mbht 
17ce f3 6f			dw game2mbms 
17d0 01 70			dw game2mb 
17d2 7e 70			dw game3w 
17d4 ac 70			dw game3p 
17d6 ca 70			dw game3sc 
17d8 fb 70			dw game3vsi 
17da 27 71			dw game3vs 
17dc 00 00			dw 0 
17de			 
17de			 
17de			.spiworddef: 
17de			 
17de 1e 60		    dw spi1 
17e0 77 60		    dw spi2 
17e2 05 61		    dw spi3 
17e4 ad 60		    dw spi4 
17e6 d8 60		    dw spi5 
17e8 6b 61		    dw spi6 
17ea c0 61		    dw spi7 
17ec			 
17ec 18 62		    dw spi8 
17ee 37 62		    dw spi9 
17f0 8f 62		    dw spi10 
17f2 00 00		    dw 0 
17f4			 
17f4			.keyworddef: 
17f4			 
17f4 66 71			dw keyup 
17f6 74 71			dw keydown 
17f8 84 71			dw keyleft 
17fa 94 71			dw keyright 
17fc a5 71			dw 	keyf1 
17fe b3 71			dw keyf2 
1800 c1 71			dw keyf3 
1802 cf 71			dw keyf4 
1804 dd 71			dw keyf5 
1806 eb 71			dw keyf6 
1808 f9 71			dw keyf7 
180a 07 72			dw keyf8 
180c 15 72			dw keyf9 
180e 23 72			dw keyf10 
1810 32 72			dw keyf11 
1812 41 72			dw keyf12 
1814 50 72			dw keytab 
1816 5f 72			dw keycr 
1818 6d 72			dw keyhome 
181a 7d 72			dw keyend 
181c 8c 72			dw keybs 
181e 00 00			dw 0 
1820			 
1820			.crstart: 
1820 62 1c			dw crs_s1 
1822 6b 1c			dw crs_s2 
1824 74 1c			dw crs_s3 
1826 83 1c			dw crs_s4 
1828 8a 1c			dw crs_s5 
182a 96 1c			dw crs_s6 
182c a5 1c			dw crs_sound 
182e 00 00			dw 0 
1830			 
1830			endif 
1830			 
1830			 
1830			if STORAGE_SE 
1830			 
1830			config_fdir: 
1830				; using the scratch dir go through and release the memory allocated for each string 
1830				 
1830 21 be f1			ld hl, scratch 
1833 5e			.cfdir:	ld e,(hl) 
1834 23				inc hl 
1835 56				ld d,(hl) 
1836 23				inc hl 
1837			 
1837 eb				ex de, hl 
1838 cd f8 0f			call ishlzero 
183b c8				ret z     ; return on null pointer 
183c cd 60 15			call free 
183f eb				ex de, hl 
1840 18 f1			jr .cfdir 
1842			 
1842			 
1842 c9				ret 
1843			 
1843			 
1843			config_dir: 
1843			 
1843				; for the config menus that need to build a directory of storage call this routine 
1843				; it will construct a menu in scratch to pass to menu 
1843			 
1843				; open storage device 
1843			 
1843				; execute DIR to build a list of files and their ids into scratch in menu format 
1843				; once the menu has finished then will need to call config_fdir to release the strings 
1843				 
1843				; c = number items 
1843			 
1843				 
1843 cd 16 05			call storage_get_block_0 
1846			 
1846 21 77 fa			ld hl, store_page     ; get current id count 
1849 46				ld b, (hl) 
184a 0e 00			ld c, 0    ; count of files   
184c			 
184c			 
184c 21 be f1			ld hl, scratch 
184f 22 6e fa			ld (store_tmp2), hl    ; location to poke strings 
1852			 
1852				; check for empty drive 
1852			 
1852 3e 00			ld a, 0 
1854 b8				cp b 
1855 ca ef 18			jp z, .dirdone 
1858			 
1858				 
1858					if DEBUG_FORTH_WORDS 
1858						DMARK "Cdc" 
1858 f5				push af  
1859 3a 6d 18			ld a, (.dmark)  
185c 32 68 fe			ld (debug_mark),a  
185f 3a 6e 18			ld a, (.dmark+1)  
1862 32 69 fe			ld (debug_mark+1),a  
1865 3a 6f 18			ld a, (.dmark+2)  
1868 32 6a fe			ld (debug_mark+2),a  
186b 18 03			jr .pastdmark  
186d ..			.dmark: db "Cdc"  
1870 f1			.pastdmark: pop af  
1871			endm  
# End of macro DMARK
1871						CALLMONITOR 
1871 cd 6c fe			call debug_vector  
1874				endm  
# End of macro CALLMONITOR
1874					endif 
1874			 
1874			 
1874			.diritem:	 
1874 c5				push bc 
1875				; for each of the current ids do a search for them and if found push to stack 
1875			 
1875 21 40 00				ld hl, STORE_BLOCK_PHY 
1878 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
187a 58					ld e,b 
187b			 
187b cd 98 07				call storage_findnextid 
187e			 
187e			 
187e					; if found hl will be non zero 
187e			 
187e cd f8 0f				call ishlzero 
1881 28 69				jr z, .dirnotfound 
1883			 
1883					; increase count 
1883			 
1883 c1					pop bc	 
1884 0c					inc c 
1885 c5					push bc 
1886					 
1886			 
1886					; get file header and push the file name 
1886			 
1886 11 77 fa				ld de, store_page 
1889 cd 65 04				call storage_read_block 
188c			 
188c					; push file id to stack 
188c				 
188c 3a 77 fa				ld a, (store_page) 
188f 26 00				ld h, 0 
1891 6f					ld l, a 
1892			 
1892					;call forth_push_numhl 
1892					; TODO store id 
1892			 
1892 e5					push hl 
1893			 
1893					; push extent count to stack  
1893				 
1893 21 7a fa				ld hl, store_page+3 
1896			 
1896					; get file name length 
1896			 
1896 cd 2d 14				call strlenz   
1899			 
1899 23					inc hl   ; cover zero term 
189a 23					inc hl  ; stick the id at the end of the area 
189b			 
189b e5					push hl 
189c c1					pop bc    ; move length to bc 
189d			 
189d cd 96 14				call malloc 
18a0			 
18a0					; TODO save malloc area to scratch 
18a0			 
18a0 eb					ex de, hl 
18a1 2a 6e fa				ld hl, (store_tmp2) 
18a4 73					ld (hl), e 
18a5 23					inc hl 
18a6 72					ld (hl), d 
18a7 23					inc hl 
18a8 22 6e fa				ld (store_tmp2), hl 
18ab			 
18ab					 
18ab			 
18ab					;pop hl   ; get source 
18ab			;		ex de, hl    ; swap aronund	 
18ab			 
18ab 21 7a fa				ld hl, store_page+3 
18ae					if DEBUG_FORTH_WORDS 
18ae						DMARK "CFd" 
18ae f5				push af  
18af 3a c3 18			ld a, (.dmark)  
18b2 32 68 fe			ld (debug_mark),a  
18b5 3a c4 18			ld a, (.dmark+1)  
18b8 32 69 fe			ld (debug_mark+1),a  
18bb 3a c5 18			ld a, (.dmark+2)  
18be 32 6a fe			ld (debug_mark+2),a  
18c1 18 03			jr .pastdmark  
18c3 ..			.dmark: db "CFd"  
18c6 f1			.pastdmark: pop af  
18c7			endm  
# End of macro DMARK
18c7						CALLMONITOR 
18c7 cd 6c fe			call debug_vector  
18ca				endm  
# End of macro CALLMONITOR
18ca					endif 
18ca ed b0				ldir 
18cc			 
18cc					; de is past string, move back one and store id 
18cc					 
18cc 1b					dec de 
18cd			 
18cd					; store file id 
18cd			 
18cd e1					pop hl 
18ce eb					ex de,hl 
18cf 73					ld (hl), e 
18d0			 
18d0					if DEBUG_FORTH_WORDS 
18d0						DMARK "Cdi" 
18d0 f5				push af  
18d1 3a e5 18			ld a, (.dmark)  
18d4 32 68 fe			ld (debug_mark),a  
18d7 3a e6 18			ld a, (.dmark+1)  
18da 32 69 fe			ld (debug_mark+1),a  
18dd 3a e7 18			ld a, (.dmark+2)  
18e0 32 6a fe			ld (debug_mark+2),a  
18e3 18 03			jr .pastdmark  
18e5 ..			.dmark: db "Cdi"  
18e8 f1			.pastdmark: pop af  
18e9			endm  
# End of macro DMARK
18e9						CALLMONITOR 
18e9 cd 6c fe			call debug_vector  
18ec				endm  
# End of macro CALLMONITOR
18ec					endif 
18ec					 
18ec			.dirnotfound: 
18ec c1					pop bc     
18ed 10 85				djnz .diritem 
18ef				 
18ef			.dirdone:	 
18ef			 
18ef 3e 00				ld a, 0 
18f1 2a 6e fa				ld hl, (store_tmp2) 
18f4 77					ld (hl), a 
18f5 23					inc hl 
18f6 77					ld (hl), a 
18f7 23					inc hl 
18f8					; push a count of the dir items found 
18f8			 
18f8			;		ld h, 0 
18f8			;		ld l, c 
18f8			 
18f8 c9				ret 
18f9			 
18f9			endif 
18f9			 
18f9			 
18f9			; Settings 
18f9			; Run  
18f9			 
18f9			 
18f9			 
18f9			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
18f9			;;hd_menu2:   db "        2: Editor",0   
18f9			;hd_menu2:   db "        2: Editor       6: Menu",0   
18f9			;hd_menu3:   db "        3: Storage",0 
18f9			;hd_menu4:   db "0=quit  4: Debug",0 
18f9			;hd_don:     db "ON",0 
18f9			;hd_doff:     db "OFF",0 
18f9			; 
18f9			; 
18f9			; 
18f9			;hardware_diags_old:       
18f9			; 
18f9			;.diagmenu: 
18f9			;	call clear_display 
18f9			;	ld a, display_row_1 
18f9			;	ld de, hd_menu1 
18f9			;	call str_at_display 
18f9			; 
18f9			;	ld a, display_row_2 
18f9			;	ld de, hd_menu2 
18f9			;	call str_at_display 
18f9			; 
18f9			;	ld a, display_row_3 
18f9			;	ld de, hd_menu3 
18f9			;	call str_at_display 
18f9			; 
18f9			;	ld a,  display_row_4 
18f9			;	ld de, hd_menu4 
18f9			;	call str_at_display 
18f9			; 
18f9			;	; display debug state 
18f9			; 
18f9			;	ld de, hd_don 
18f9			;	ld a, (os_view_disable) 
18f9			;	cp 0 
18f9			;	jr z, .distog 
18f9			;	ld de, hd_doff 
18f9			;.distog: ld a, display_row_4+17 
18f9			;	call str_at_display 
18f9			; 
18f9			;	call update_display 
18f9			; 
18f9			;	call cin_wait 
18f9			; 
18f9			; 
18f9			; 
18f9			;	cp '4' 
18f9			;	jr nz, .diagn1 
18f9			; 
18f9			;	; debug toggle 
18f9			; 
18f9			;	ld a, (os_view_disable) 
18f9			;	ld b, '*' 
18f9			;	cp 0 
18f9			;	jr z, .debtog 
18f9			;	ld b, 0 
18f9			;.debtog:	 
18f9			;	ld a,b 
18f9			;	ld (os_view_disable),a 
18f9			; 
18f9			;.diagn1: cp '0' 
18f9			;	 ret z 
18f9			; 
18f9			;;	cp '1' 
18f9			;;       jp z, matrix	 
18f9			;;   TODO keyboard matrix test 
18f9			; 
18f9			;	cp '2' 
18f9			;	jp z, .diagedit 
18f9			; 
18f9			;;	cp '6' 
18f9			;;	jp z, .menutest 
18f9			;;if ENABLE_BASIC 
18f9			;;	cp '6' 
18f9			;;	jp z, basic 
18f9			;;endif 
18f9			 ; 
18f9			;	jp .diagmenu 
18f9			; 
18f9			; 
18f9			;	ret 
18f9			 
18f9			 
18f9			.debug_tog: 
18f9 21 43 19			ld hl, .menudebug 
18fc				 
18fc			;	ld a, (os_view_disable) 
18fc			;	cp '*' 
18fc 3a 6c fe			ld a,(debug_vector) 
18ff fe c9			cp $C9   ; RET 
1901 20 04			jr nz,.tdon  
1903 3e 01			ld a, 1 
1905 18 02			jr .tog1 
1907 3e 00		.tdon: ld a, 0 
1909			 
1909			.tog1: 
1909 cd cc 0d			call menu 
190c fe 00			cp 0 
190e c8				ret z 
190f fe 01			cp 1    ; disable debug 
1911 28 04			jr z, .dtog0 
1913 3e 2a			ld a, '*' 
1915 18 05			jr .dtogset 
1917			.dtog0:  
1917				;ld a, 0 
1917 cd 35 1a			call bp_on 
191a 18 dd			jr .debug_tog 
191c			.dtogset:  
191c				; ld (os_view_disable), a 
191c cd 41 1a			call bp_off 
191f c3 f9 18			jp .debug_tog 
1922			 
1922			 
1922			hardware_diags:       
1922			 
1922			.diagm: 
1922 21 35 19			ld hl, .menuitems 
1925 3e 00			ld a, 0 
1927 cd cc 0d			call menu 
192a			 
192a fe 00		         cp 0 
192c c8				 ret z 
192d			 
192d fe 02			cp 2 
192f ca 8e 19			jp z, .diagedit 
1932			 
1932			;	cp '6' 
1932			;	jp z, .menutest 
1932			;if ENABLE_BASIC 
1932			;	cp '6' 
1932			;	jp z, basic 
1932			;endif 
1932			  
1932 c3 22 19			jp .diagm 
1935			 
1935				 
1935 49 19		.menuitems:   	dw .m1 
1937 54 19				dw .m2 
1939 5b 19				dw .m3 
193b 63 19				dw .m5 
193d 69 19				dw .m5a 
193f 72 19				dw .m5b 
1941 00 00				dw 0 
1943			 
1943			.menudebug: 
1943 7b 19				dw .m6 
1945 84 19				dw .m7 
1947 00 00				dw 0 
1949			 
1949 .. 00		.m1:   db "Key Matrix",0 
1954 .. 00		.m2:   db "Editor",0 
195b .. 00		.m3:   db "Storage",0 
1963 .. 00		.m5:   db "Sound",0 
1969 .. 00		.m5a:  db "RAM Test",0 
1972 .. 00		.m5b:  db "LCD Test",0 
197b			 
197b .. 00		.m6:   db "Debug ON",0 
1984 .. 00		.m7:   db "Debug OFF",0 
198e			 
198e			; debug editor 
198e			 
198e			.diagedit: 
198e			 
198e 21 be f1			ld hl, scratch 
1991			;	ld bc, 250 
1991			;	ldir 
1991				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1991 3e 00			ld a, 0 
1993 77				ld (hl), a 
1994 23				inc hl 
1995 77				ld (hl), a 
1996 23				inc hl 
1997 77				ld (hl), a 
1998			 
1998 cd 9b 0d		        call clear_display 
199b cd be 0d			call update_display 
199e				;ld a, 1 
199e				;ld (hardware_diag), a 
199e			.diloop: 
199e 3e 00			ld a, display_row_1 
19a0 0e 00			ld c, 0 
19a2 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
19a4 1e 28			ld e, 40 
19a6			 
19a6 21 be f1			ld hl, scratch	 
19a9 cd fc 0f			call input_str 
19ac			 
19ac 3e 28			ld a, display_row_2 
19ae 11 be f1			ld de, scratch 
19b1 cd ae 0d			call str_at_display 
19b4 cd be 0d			call update_display 
19b7			 
19b7 c3 9e 19			jp .diloop 
19ba			 
19ba			 
19ba			; pass word in hl 
19ba			; a has display location 
19ba			display_word_at: 
19ba f5				push af 
19bb e5				push hl 
19bc 7c				ld a,h 
19bd 21 c3 f4			ld hl, os_word_scratch 
19c0 cd d0 12			call hexout 
19c3 e1				pop hl 
19c4 7d				ld a,l 
19c5 21 c5 f4			ld hl, os_word_scratch+2 
19c8 cd d0 12			call hexout 
19cb 21 c7 f4			ld hl, os_word_scratch+4 
19ce 3e 00			ld a,0 
19d0 77				ld (hl),a 
19d1 11 c3 f4			ld de,os_word_scratch 
19d4 f1				pop af 
19d5 cd ae 0d				call str_at_display 
19d8 c9				ret 
19d9			 
19d9			display_ptr_state: 
19d9			 
19d9				; to restore afterwards 
19d9			 
19d9 d5				push de 
19da c5				push bc 
19db e5				push hl 
19dc f5				push af 
19dd			 
19dd				; for use in here 
19dd			 
19dd			;	push bc 
19dd			;	push de 
19dd			;	push hl 
19dd			;	push af 
19dd			 
19dd cd 9b 0d			call clear_display 
19e0			 
19e0 11 b8 1b			ld de, .ptrstate 
19e3 3e 00			ld a, display_row_1 
19e5 cd ae 0d			call str_at_display 
19e8			 
19e8				; display debug step 
19e8			 
19e8			 
19e8 11 68 fe			ld de, debug_mark 
19eb 3e 26			ld a, display_row_1+display_cols-2 
19ed cd ae 0d			call str_at_display 
19f0			 
19f0				; display a 
19f0 11 c2 1b			ld de, .ptrcliptr 
19f3 3e 28			ld a, display_row_2 
19f5 cd ae 0d			call str_at_display 
19f8			 
19f8 f1				pop af 
19f9 2a 3d fa			ld hl,(cli_ptr) 
19fc 3e 30			ld a, display_row_2+8 
19fe cd ba 19			call display_word_at 
1a01			 
1a01			 
1a01				; display hl 
1a01			 
1a01			 
1a01 11 ca 1b			ld de, .ptrclioptr 
1a04 3e 32			ld a, display_row_2+10 
1a06 cd ae 0d			call str_at_display 
1a09			; 
1a09			;	pop hl 
1a09 3e 35			ld a, display_row_2+13 
1a0b 2a 3b fa			ld hl,(cli_origptr) 
1a0e cd ba 19			call display_word_at 
1a11			; 
1a11			;	 
1a11			;	; display de 
1a11			 
1a11			;	ld de, .regstatede 
1a11			;	ld a, display_row_3 
1a11			;	call str_at_display 
1a11			 
1a11			;	pop de 
1a11			;	ld h,d 
1a11			;	ld l, e 
1a11			;	ld a, display_row_3+3 
1a11			;	call display_word_at 
1a11			 
1a11			 
1a11				; display bc 
1a11			 
1a11			;	ld de, .regstatebc 
1a11			;	ld a, display_row_3+10 
1a11			;	call str_at_display 
1a11			 
1a11			;	pop bc 
1a11			;	ld h,b 
1a11			;	ld l, c 
1a11			;	ld a, display_row_3+13 
1a11			;	call display_word_at 
1a11			 
1a11			 
1a11				; display dsp 
1a11			 
1a11			;	ld de, .regstatedsp 
1a11			;	ld a, display_row_4 
1a11			;	call str_at_display 
1a11			 
1a11				 
1a11			;	ld hl,(cli_data_sp) 
1a11			;	ld a, display_row_4+4 
1a11			;	call display_word_at 
1a11			 
1a11				; display rsp 
1a11			 
1a11 11 f9 1b			ld de, .regstatersp 
1a14 3e 82			ld a, display_row_4+10 
1a16 cd ae 0d			call str_at_display 
1a19			 
1a19				 
1a19 2a ef f9			ld hl,(cli_ret_sp) 
1a1c 3e 86			ld a, display_row_4+14 
1a1e cd ba 19			call display_word_at 
1a21			 
1a21 cd be 0d			call update_display 
1a24			 
1a24 cd de 0c			call delay1s 
1a27 cd de 0c			call delay1s 
1a2a cd de 0c			call delay1s 
1a2d			 
1a2d			 
1a2d cd 7d 20			call next_page_prompt 
1a30			 
1a30				; restore  
1a30			 
1a30 f1				pop af 
1a31 e1				pop hl 
1a32 c1				pop bc 
1a33 d1				pop de 
1a34 c9				ret 
1a35			 
1a35			; Update the break point vector so that the user can hook a new routine 
1a35			 
1a35			bp_on: 
1a35 3e c3			ld a, $c3    ; JP 
1a37 32 6c fe			ld (debug_vector), a 
1a3a 21 47 1a			ld hl, break_point_state 
1a3d 22 6d fe			ld (debug_vector+1), hl 
1a40 c9				ret 
1a41			 
1a41			bp_off: 
1a41 3e c9			ld a, $c9    ; RET 
1a43 32 6c fe			ld (debug_vector), a 
1a46 c9				ret 
1a47			 
1a47			 
1a47			break_point_state: 
1a47			;	push af 
1a47			; 
1a47			;	; see if disabled 
1a47			; 
1a47			;	ld a, (os_view_disable) 
1a47			;	cp '*' 
1a47			;	jr nz, .bpsgo 
1a47			;	pop af 
1a47			;	ret 
1a47			 
1a47			.bpsgo: 
1a47			;	pop af 
1a47 f5				push af 
1a48 22 a0 f1			ld (os_view_hl), hl 
1a4b ed 53 9e f1		ld (os_view_de), de 
1a4f ed 43 9c f1		ld (os_view_bc), bc 
1a53 e5				push hl 
1a54 6f				ld l, a 
1a55 26 00			ld h, 0 
1a57 22 a2 f1			ld (os_view_af),hl 
1a5a			 
1a5a 21 ae fd				ld hl, display_fb0 
1a5d 22 c9 fb				ld (display_fb_active), hl 
1a60 e1				pop hl	 
1a61			 
1a61 3e 31			ld a, '1' 
1a63 fe 2a		.bps1:  cp '*' 
1a65 cc 41 1a			call z, bp_off 
1a68			;	jr nz, .bps1b 
1a68			;	ld (os_view_disable),a 
1a68 fe 31		.bps1b:  cp '1' 
1a6a 20 14			jr nz, .bps2 
1a6c			 
1a6c				; display reg 
1a6c			 
1a6c				 
1a6c			 
1a6c 3a a2 f1			ld a, (os_view_af) 
1a6f 2a a0 f1			ld hl, (os_view_hl) 
1a72 ed 5b 9e f1		ld de, (os_view_de) 
1a76 ed 4b 9c f1		ld bc, (os_view_bc) 
1a7a cd 14 1b			call display_reg_state 
1a7d c3 00 1b			jp .bpschk 
1a80			 
1a80 fe 32		.bps2:  cp '2' 
1a82 20 08			jr nz, .bps3 
1a84				 
1a84				; display hl 
1a84 2a a0 f1			ld hl, (os_view_hl) 
1a87 cd fe 1b			call display_dump_at_hl 
1a8a			 
1a8a 18 74			jr .bpschk 
1a8c			 
1a8c fe 33		.bps3:  cp '3' 
1a8e 20 08			jr nz, .bps4 
1a90			 
1a90			        ; display de 
1a90 2a 9e f1			ld hl, (os_view_de) 
1a93 cd fe 1b			call display_dump_at_hl 
1a96			 
1a96 18 68			jr .bpschk 
1a98 fe 34		.bps4:  cp '4' 
1a9a 20 08			jr nz, .bps5 
1a9c			 
1a9c			        ; display bc 
1a9c 2a 9c f1			ld hl, (os_view_bc) 
1a9f cd fe 1b			call display_dump_at_hl 
1aa2			 
1aa2 18 5c			jr .bpschk 
1aa4 fe 35		.bps5:  cp '5' 
1aa6 20 08		        jr nz, .bps7 
1aa8			 
1aa8				; display cur ptr 
1aa8 2a 3d fa			ld hl, (cli_ptr) 
1aab cd fe 1b			call display_dump_at_hl 
1aae			 
1aae 18 50			jr .bpschk 
1ab0 fe 36		.bps7:  cp '6' 
1ab2 20 08			jr nz, .bps8b 
1ab4				 
1ab4				; display cur orig ptr 
1ab4 2a 3b fa			ld hl, (cli_origptr) 
1ab7 cd fe 1b			call display_dump_at_hl 
1aba 18 44			jr .bpschk 
1abc fe 37		.bps8b:  cp '7' 
1abe 20 08			jr nz, .bps9 
1ac0				 
1ac0				; display dsp 
1ac0 2a eb f9			ld hl, (cli_data_sp) 
1ac3 cd fe 1b			call display_dump_at_hl 
1ac6			 
1ac6 18 38			jr .bpschk 
1ac8 fe 39		.bps9:  cp '9' 
1aca 20 05			jr nz, .bps8c 
1acc				 
1acc				; display SP 
1acc			;	ld hl, sp 
1acc cd fe 1b			call display_dump_at_hl 
1acf			 
1acf 18 2f			jr .bpschk 
1ad1 fe 38		.bps8c:  cp '8' 
1ad3 20 08			jr nz, .bps8d 
1ad5				 
1ad5				; display rsp 
1ad5 2a ef f9			ld hl, (cli_ret_sp) 
1ad8 cd fe 1b			call display_dump_at_hl 
1adb			 
1adb 18 23			jr .bpschk 
1add fe 23		.bps8d:  cp '#'     ; access monitor sub system 
1adf 20 05			jr nz, .bps8 
1ae1 cd 4b 1e			call monitor 
1ae4			 
1ae4 18 1a			jr .bpschk 
1ae6 fe 30		.bps8:  cp '0' 
1ae8 20 16			jr nz, .bpschk 
1aea			 
1aea 21 0d fd				ld hl, display_fb1 
1aed 22 c9 fb				ld (display_fb_active), hl 
1af0 cd be 0d				call update_display 
1af3			 
1af3				;ld a, (os_view_af) 
1af3 2a a0 f1			ld hl, (os_view_hl) 
1af6 ed 5b 9e f1		ld de, (os_view_de) 
1afa ed 4b 9c f1		ld bc, (os_view_bc) 
1afe f1				pop af 
1aff c9				ret 
1b00			 
1b00			.bpschk:   
1b00 cd de 0c			call delay1s 
1b03 3e 9f		ld a,display_row_4 + display_cols - 1 
1b05 11 7b 20		        ld de, endprg 
1b08 cd ae 0d			call str_at_display 
1b0b cd be 0d			call update_display 
1b0e cd 07 7a			call cin_wait 
1b11			 
1b11 c3 63 1a			jp .bps1 
1b14			 
1b14			 
1b14			display_reg_state: 
1b14			 
1b14				; to restore afterwards 
1b14			 
1b14 d5				push de 
1b15 c5				push bc 
1b16 e5				push hl 
1b17 f5				push af 
1b18			 
1b18				; for use in here 
1b18			 
1b18 c5				push bc 
1b19 d5				push de 
1b1a e5				push hl 
1b1b f5				push af 
1b1c			 
1b1c cd 9b 0d			call clear_display 
1b1f			 
1b1f 11 d4 1b			ld de, .regstate 
1b22 3e 00			ld a, display_row_1 
1b24 cd ae 0d			call str_at_display 
1b27			 
1b27				; display debug step 
1b27			 
1b27			 
1b27 11 68 fe			ld de, debug_mark 
1b2a 3e 25			ld a, display_row_1+display_cols-3 
1b2c cd ae 0d			call str_at_display 
1b2f			 
1b2f				; display a 
1b2f 11 f0 1b			ld de, .regstatea 
1b32 3e 28			ld a, display_row_2 
1b34 cd ae 0d			call str_at_display 
1b37			 
1b37 e1				pop hl 
1b38			;	ld h,0 
1b38			;	ld l, a 
1b38 3e 2b			ld a, display_row_2+3 
1b3a cd ba 19			call display_word_at 
1b3d			 
1b3d			 
1b3d				; display hl 
1b3d			 
1b3d			 
1b3d 11 e4 1b			ld de, .regstatehl 
1b40 3e 32			ld a, display_row_2+10 
1b42 cd ae 0d			call str_at_display 
1b45			 
1b45 e1				pop hl 
1b46 3e 35			ld a, display_row_2+13 
1b48 cd ba 19			call display_word_at 
1b4b			 
1b4b				 
1b4b				; display de 
1b4b			 
1b4b 11 e8 1b			ld de, .regstatede 
1b4e 3e 50			ld a, display_row_3 
1b50 cd ae 0d			call str_at_display 
1b53			 
1b53 e1				pop hl 
1b54			;	ld h,d 
1b54			;	ld l, e 
1b54 3e 53			ld a, display_row_3+3 
1b56 cd ba 19			call display_word_at 
1b59			 
1b59			 
1b59				; display bc 
1b59			 
1b59 11 ec 1b			ld de, .regstatebc 
1b5c 3e 5a			ld a, display_row_3+10 
1b5e cd ae 0d			call str_at_display 
1b61			 
1b61 e1				pop hl 
1b62			;	ld h,b 
1b62			;	ld l, c 
1b62 3e 5d			ld a, display_row_3+13 
1b64 cd ba 19			call display_word_at 
1b67			 
1b67			 
1b67				; display dsp 
1b67			 
1b67 11 f4 1b			ld de, .regstatedsp 
1b6a 3e 78			ld a, display_row_4 
1b6c cd ae 0d			call str_at_display 
1b6f			 
1b6f				 
1b6f 2a eb f9			ld hl,(cli_data_sp) 
1b72 3e 7c			ld a, display_row_4+4 
1b74 cd ba 19			call display_word_at 
1b77			 
1b77				; display rsp 
1b77			 
1b77 11 f9 1b			ld de, .regstatersp 
1b7a 3e 82			ld a, display_row_4+10 
1b7c cd ae 0d			call str_at_display 
1b7f			 
1b7f				 
1b7f 2a ef f9			ld hl,(cli_ret_sp) 
1b82 3e 86			ld a, display_row_4+14 
1b84 cd ba 19			call display_word_at 
1b87			 
1b87 cd be 0d			call update_display 
1b8a			 
1b8a			;	call delay1s 
1b8a			;	call delay1s 
1b8a			;	call delay1s 
1b8a			 
1b8a			 
1b8a			;	call next_page_prompt 
1b8a			 
1b8a				; restore  
1b8a			 
1b8a f1				pop af 
1b8b e1				pop hl 
1b8c c1				pop bc 
1b8d d1				pop de 
1b8e c9				ret 
1b8f			 
1b8f .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1ba3 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1bb8 .. 00		.ptrstate:	db "Ptr State",0 
1bc2 .. 00		.ptrcliptr:     db "cli_ptr",0 
1bca .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1bd4 .. 00		.regstate:	db "Reg State (1/0)",0 
1be4 .. 00		.regstatehl:	db "HL:",0 
1be8 .. 00		.regstatede:	db "DE:",0 
1bec .. 00		.regstatebc:	db "BC:",0 
1bf0 .. 00		.regstatea:	db "A :",0 
1bf4 .. 00		.regstatedsp:	db "DSP:",0 
1bf9 .. 00		.regstatersp:	db "RSP:",0 
1bfe			 
1bfe			display_dump_at_hl: 
1bfe e5				push hl 
1bff d5				push de 
1c00 c5				push bc 
1c01 f5				push af 
1c02			 
1c02 22 e1 f4			ld (os_cur_ptr),hl	 
1c05 cd 9b 0d			call clear_display 
1c08 cd 85 1f			call dumpcont 
1c0b			;	call delay1s 
1c0b			;	call next_page_prompt 
1c0b			 
1c0b			 
1c0b f1				pop af 
1c0c c1				pop bc 
1c0d d1				pop de 
1c0e e1				pop hl 
1c0f c9				ret 
1c10			 
1c10			;if ENABLE_BASIC 
1c10			;	include "nascombasic.asm" 
1c10			;	basic: 
1c10			;	include "forth/FORTH.ASM" 
1c10			;endif 
1c10			 
1c10			; eof 
1c10			 
1c10			 
# End of file firmware_diags.asm
1c10			  
1c10			include "firmware_prompts.asm"  
1c10			; Prompts  
1c10			 
1c10			; boot messages 
1c10			 
1c10 .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1c25 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1c35			 
1c35			 
1c35			; config menus 
1c35			 
1c35			;prom_c3: db "Add Dictionary To File",0 
1c35			 
1c35			if STARTUP_V1 
1c35			prom_c2: db "Select Autoload File",0 
1c35			prom_c2a: db "Disable Autoload File", 0 
1c35			endif 
1c35			 
1c35			if STARTUP_V2 
1c35 .. 00		prom_c2: db "Enable Autoload Files",0 
1c4b .. 00		prom_c2a: db "Disable Autoload Files", 0 
1c62			 
1c62 .. 00		crs_s1: db "*ls-word", 0 
1c6b .. 00		crs_s2: db "*ed-word", 0 
1c74 .. 00		crs_s3: db "*Demo-Programs", 0 
1c83 .. 00		crs_s4: db "*Utils", 0 
1c8a .. 00		crs_s5: db "*SPI-Addons", 0 
1c96 .. 00		crs_s6: db "*Key-constants", 0 
1ca5 .. 00		crs_sound: db "*Sound-Util", 0 
1cb1			 
1cb1			 
1cb1			 
1cb1			endif 
1cb1			;prom_c2b: db "Select Storage Bank",0 
1cb1 .. 00		prom_c4: db "Settings",0 
1cba .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1cd5 .. 00		prom_m4b:   db "Monitor",0 
1cdd .. 00		prom_c1: db "Hardware Diags",0 
1cec			 
1cec			 
1cec			if STARTUP_V2 
1cec .. 00		prom_c9: db "Create Startup Files",0 
1d01			endif 
1d01			 
1d01 .. 00		prom_notav:    db "Feature not available",0 
1d17 .. 00		prom_empty:    db "",0 
1d18			 
1d18			; eof 
1d18			 
# End of file firmware_prompts.asm
1d18			  
1d18			  
1d18			; eof  
1d18			  
# End of file firmware.asm
1d18			 
1d18			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1d18			;if BASE_KEV  
1d18			;baseram: equ 08000h 
1d18			;endif 
1d18			 
1d18			;if BASE_SC114 
1d18			;baseram:     equ    endofcode 
1d18			;endif 
1d18			 
1d18			 
1d18			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1d18			 
1d18			; start system 
1d18			 
1d18			coldstart: 
1d18				; set sp 
1d18				; di/ei 
1d18			 
1d18 f3				di 
1d19 31 fd ff			ld sp, tos 
1d1c cd 8e 76			call init_nmi 
1d1f			;	ei 
1d1f			 
1d1f				; init spinner 
1d1f 3e 00			ld a,0 
1d21 32 c3 fb			ld (display_active), a 
1d24			 
1d24				; disable breakpoint by default 
1d24			 
1d24				;ld a,'*' 
1d24			;	ld a,' ' 
1d24			;	ld (os_view_disable),a 
1d24			 
1d24				; set break point vector as new break point on or off 
1d24 cd 41 1a			call bp_off 
1d27			 
1d27				; init hardware 
1d27			 
1d27				; init keyboard and screen hardware 
1d27			 
1d27 cd 68 00			call hardware_init 
1d2a			 
1d2a			 
1d2a cd de 0c			call delay1s 
1d2d 3e 58			ld a, display_row_3+8 
1d2f 11 03 00			ld de, buildtime 
1d32 cd ae 0d			call str_at_display 
1d35 cd be 0d			call update_display 
1d38			 
1d38 cd de 0c			call delay1s 
1d3b cd de 0c			call delay1s 
1d3e cd de 0c			call delay1s 
1d41			 
1d41				; detect if any keys are held down to enable breakpoints at start up 
1d41			 
1d41 cd 18 7a			call cin  
1d44 fe 00			cp 0 
1d46 28 03			jr z, .nokeys 
1d48			 
1d48				;call hardware_diags 
1d48 cd 2f 16			call config 
1d4b			 
1d4b			;	ld de, .bpen 
1d4b			;	ld a, display_row_4 
1d4b			;	call str_at_display 
1d4b			;	call update_display 
1d4b			; 
1d4b			;	ld a,0 
1d4b			;	ld (os_view_disable),a 
1d4b			; 
1d4b			;.bpwait: 
1d4b			;	call cin 
1d4b			;	cp 0 
1d4b			;	jr z, .bpwait 
1d4b			;	jr .nokeys 
1d4b			; 
1d4b			; 
1d4b			;.bpen:  db "Break points enabled!",0 
1d4b			 
1d4b			 
1d4b			 
1d4b			 
1d4b			 
1d4b			 
1d4b			.nokeys: 
1d4b			 
1d4b			 
1d4b				 
1d4b			 
1d4b			;jp  testkey 
1d4b			 
1d4b			;call storage_get_block_0 
1d4b			; 
1d4b			;ld hl, 0 
1d4b			;ld de, store_page 
1d4b			;call storage_read_block 
1d4b			 
1d4b				 
1d4b			;ld hl, 10 
1d4b			;ld de, store_page 
1d4b			;call storage_read_block 
1d4b			 
1d4b			 
1d4b			 
1d4b			 
1d4b			 
1d4b			;stop:	nop 
1d4b			;	jp stop 
1d4b			 
1d4b			 
1d4b			 
1d4b			main: 
1d4b cd 9b 0d			call clear_display 
1d4e cd be 0d			call update_display 
1d51			 
1d51			 
1d51			 
1d51			;	call testlcd 
1d51			 
1d51			 
1d51			 
1d51 cd 82 24			call forth_init 
1d54			 
1d54			 
1d54			warmstart: 
1d54 cd 58 24			call forth_warmstart 
1d57			 
1d57				; run startup word load 
1d57			        ; TODO prevent this running at warmstart after crash  
1d57			 
1d57				if STARTUP_ENABLE 
1d57			 
1d57					if STARTUP_V1 
1d57			 
1d57						if STORAGE_SE 
1d57							call forth_autoload 
1d57						endif 
1d57						call forth_startup 
1d57					endif 
1d57			 
1d57					if STARTUP_V2 
1d57			 
1d57						if STORAGE_SE 
1d57 cd bc 74						call forth_autoload 
1d5a						else 
1d5a							call forth_startup 
1d5a						endif 
1d5a			 
1d5a			 
1d5a					endif 
1d5a			 
1d5a				endif 
1d5a			 
1d5a				; show free memory after boot 
1d5a 11 e6 1d			ld de, freeram 
1d5d 3e 00			ld a, display_row_1 
1d5f cd ae 0d			call str_at_display 
1d62			 
1d62				; get current heap start after loading any uwords 
1d62			 
1d62				;ld de, (os_last_new_uword) 
1d62				;ex de, hl 
1d62			 
1d62			; Or use heap_size word???? 
1d62				;ld hl, heap_end 
1d62				;ld hl, heap_size 
1d62				;ld de, topusermem 
1d62				;ld de, heap_start 
1d62 ed 5b 0a 80			ld de, (free_list )      
1d66 21 99 f1				ld hl, heap_end 
1d69 ed 52			sbc hl, de 
1d6b				;push hl 
1d6b				;ld a,h	         	 
1d6b				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1d6b				;call hexout 
1d6b			   	;pop hl 
1d6b			; 
1d6b			;	ld a,l 
1d6b			;	ld hl, os_word_scratch+2 
1d6b			;	call hexout 
1d6b			;	ld hl, os_word_scratch+4 
1d6b			;	ld a, 0 
1d6b			;	ld (hl),a 
1d6b eb				ex de, hl 
1d6c 21 c3 f4			ld hl, os_word_scratch 
1d6f cd dc 13			call uitoa_16 
1d72			 
1d72			 
1d72 11 c3 f4			ld de, os_word_scratch 
1d75 3e 0d			ld a, display_row_1 + 13 
1d77 cd ae 0d			call str_at_display 
1d7a cd be 0d			call update_display 
1d7d			 
1d7d			 
1d7d				;call demo 
1d7d			 
1d7d			 
1d7d				; init scratch input area for cli commands 
1d7d			 
1d7d 21 e5 f4			ld hl, os_cli_cmd 
1d80 3e 00			ld a,0 
1d82 77				ld (hl),a 
1d83 23				inc hl 
1d84 77				ld (hl),a 
1d85			 
1d85 3e 00			ld a,0 
1d87 32 e4 f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1d8a			 
1d8a 32 e1 f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1d8d 32 e2 f4			ld (os_cur_ptr+1),a	 
1d90			 
1d90 32 c3 f4			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1d93 32 c4 f4			ld (os_word_scratch+1),a	 
1d96				 
1d96			 
1d96				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d96 21 e5 f4			ld hl, os_cli_cmd 
1d99			 
1d99 3e 00			ld a, 0		 ; init cli input 
1d9b 77				ld (hl), a 
1d9c 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d9e			cli: 
1d9e				; show cli prompt 
1d9e				;push af 
1d9e				;ld a, 0 
1d9e				;ld de, prompt 
1d9e				;call str_at_display 
1d9e			 
1d9e				;call update_display 
1d9e				;pop af 
1d9e				;inc a 
1d9e				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1d9e 0e 00			ld c, 0 
1da0 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1da2 1e 28			ld e, 40 
1da4			 
1da4 21 e5 f4			ld hl, os_cli_cmd 
1da7			 
1da7				STACKFRAME OFF $fefe $9f9f 
1da7				if DEBUG_STACK_IMB 
1da7					if OFF 
1da7						exx 
1da7						ld de, $fefe 
1da7						ld a, d 
1da7						ld hl, curframe 
1da7						call hexout 
1da7						ld a, e 
1da7						ld hl, curframe+2 
1da7						call hexout 
1da7						ld hl, $fefe 
1da7						push hl 
1da7						ld hl, $9f9f 
1da7						push hl 
1da7						exx 
1da7					endif 
1da7				endif 
1da7			endm 
# End of macro STACKFRAME
1da7			 
1da7 cd fc 0f			call input_str 
1daa			 
1daa				STACKFRAMECHK OFF $fefe $9f9f 
1daa				if DEBUG_STACK_IMB 
1daa					if OFF 
1daa						exx 
1daa						ld hl, $9f9f 
1daa						pop de   ; $9f9f 
1daa						call cmp16 
1daa						jr nz, .spnosame 
1daa						ld hl, $fefe 
1daa						pop de   ; $fefe 
1daa						call cmp16 
1daa						jr z, .spfrsame 
1daa						.spnosame: call showsperror 
1daa						.spfrsame: nop 
1daa						exx 
1daa					endif 
1daa				endif 
1daa			endm 
# End of macro STACKFRAMECHK
1daa			 
1daa				; copy input to last command 
1daa			 
1daa 21 e5 f4			ld hl, os_cli_cmd 
1dad 11 e4 f5			ld de, os_last_cmd 
1db0 01 ff 00			ld bc, 255 
1db3 ed b0			ldir 
1db5			 
1db5				; wipe current buffer 
1db5			 
1db5			;	ld a, 0 
1db5			;	ld hl, os_cli_cmd 
1db5			;	ld de, os_cli_cmd+1 
1db5			;	ld bc, 254 
1db5			;	ldir 
1db5				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1db5			;	call strcpy 
1db5			;	ld a, 0 
1db5			;	ld (hl), a 
1db5			;	inc hl 
1db5			;	ld (hl), a 
1db5			;	inc hl 
1db5			;	ld (hl), a 
1db5			 
1db5				; switch frame buffer to program  
1db5			 
1db5 21 0d fd				ld hl, display_fb1 
1db8 22 c9 fb				ld (display_fb_active), hl 
1dbb			 
1dbb			;	nop 
1dbb				STACKFRAME ON $fbfe $8f9f 
1dbb				if DEBUG_STACK_IMB 
1dbb					if ON 
1dbb						exx 
1dbb						ld de, $fbfe 
1dbb						ld a, d 
1dbb						ld hl, curframe 
1dbb						call hexout 
1dbb						ld a, e 
1dbb						ld hl, curframe+2 
1dbb						call hexout 
1dbb						ld hl, $fbfe 
1dbb						push hl 
1dbb						ld hl, $8f9f 
1dbb						push hl 
1dbb						exx 
1dbb					endif 
1dbb				endif 
1dbb			endm 
# End of macro STACKFRAME
1dbb				; first time into the parser so pass over the current scratch pad 
1dbb 21 e5 f4			ld hl,os_cli_cmd 
1dbe				; tokenise the entered statement(s) in HL 
1dbe cd 00 25			call forthparse 
1dc1			        ; exec forth statements in top of return stack 
1dc1 cd 40 25			call forthexec 
1dc4				;call forthexec_cleanup 
1dc4			;	call parsenext 
1dc4			 
1dc4				STACKFRAMECHK ON $fbfe $8f9f 
1dc4				if DEBUG_STACK_IMB 
1dc4					if ON 
1dc4						exx 
1dc4						ld hl, $8f9f 
1dc4						pop de   ; $8f9f 
1dc4						call cmp16 
1dc4						jr nz, .spnosame 
1dc4						ld hl, $fbfe 
1dc4						pop de   ; $fbfe 
1dc4						call cmp16 
1dc4						jr z, .spfrsame 
1dc4						.spnosame: call showsperror 
1dc4						.spfrsame: nop 
1dc4						exx 
1dc4					endif 
1dc4				endif 
1dc4			endm 
# End of macro STACKFRAMECHK
1dc4				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1dc4			 
1dc4 3e 78			ld a, display_row_4 
1dc6 11 f7 1d			ld de, endprog 
1dc9			 
1dc9 cd be 0d			call update_display		 
1dcc			 
1dcc cd 7d 20			call next_page_prompt 
1dcf			 
1dcf				; switch frame buffer to cli 
1dcf			 
1dcf 21 ae fd				ld hl, display_fb0 
1dd2 22 c9 fb				ld (display_fb_active), hl 
1dd5			 
1dd5			 
1dd5 cd 9b 0d		        call clear_display 
1dd8 cd be 0d			call update_display		 
1ddb			 
1ddb 21 e5 f4			ld hl, os_cli_cmd 
1dde			 
1dde 3e 00			ld a, 0		 ; init cli input 
1de0 77				ld (hl), a 
1de1			 
1de1				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1de1			 
1de1				; now on last line 
1de1			 
1de1				; TODO scroll screen up 
1de1			 
1de1				; TODO instead just clear screen and place at top of screen 
1de1			 
1de1			;	ld a, 0 
1de1			;	ld (f_cursor_ptr),a 
1de1			 
1de1				;call clear_display 
1de1				;call update_display 
1de1			 
1de1				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1de1 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1de3 c3 9e 1d			jp cli 
1de6			 
1de6 .. 00		freeram: db "Free bytes: ",0 
1df3 ..			asc: db "1A2F" 
1df7 .. 00		endprog: db "End prog...",0 
1e03			 
1e03			testenter2:   
1e03 21 f0 f1			ld hl,scratch+50 
1e06 22 e1 f4			ld (os_cur_ptr),hl 
1e09 c3 9e 1d			jp cli 
1e0c			 
1e0c			testenter:  
1e0c			 
1e0c 21 f3 1d			ld hl,asc 
1e0f			;	ld a,(hl) 
1e0f			;	call nibble2val 
1e0f cd 26 13			call get_byte 
1e12			 
1e12			 
1e12			;	ld a,(hl) 
1e12			;	call atohex 
1e12			 
1e12			;	call fourehexhl 
1e12 32 f0 f1			ld (scratch+50),a 
1e15			 
1e15			 
1e15			 
1e15 21 f5 1d			ld hl,asc+2 
1e18			;	ld a, (hl) 
1e18			;	call nibble2val 
1e18 cd 26 13			call get_byte 
1e1b			 
1e1b			;	call fourehexhl 
1e1b 32 f2 f1			ld (scratch+52),a 
1e1e				 
1e1e 21 f0 f1			ld hl,scratch+50 
1e21 22 e1 f4			ld (os_cur_ptr),hl 
1e24 c3 9e 1d			jp cli 
1e27			 
1e27			enter:	 
1e27 3a c2 f1			ld a,(scratch+4) 
1e2a fe 00			cp 0 
1e2c 28 0c			jr z, .entercont 
1e2e				; no, not a null term line so has an address to work out.... 
1e2e			 
1e2e 21 c0 f1			ld hl,scratch+2 
1e31 cd 86 13			call get_word_hl 
1e34			 
1e34 22 e1 f4			ld (os_cur_ptr),hl	 
1e37 c3 9e 1d			jp cli 
1e3a			 
1e3a			 
1e3a			.entercont:  
1e3a			 
1e3a 21 c0 f1			ld hl, scratch+2 
1e3d cd 26 13			call get_byte 
1e40			 
1e40 2a e1 f4		   	ld hl,(os_cur_ptr) 
1e43 77					ld (hl),a 
1e44 23					inc hl 
1e45 22 e1 f4				ld (os_cur_ptr),hl 
1e48				 
1e48			; get byte  
1e48			 
1e48			 
1e48 c3 9e 1d			jp cli 
1e4b			 
1e4b			 
1e4b			; basic monitor support 
1e4b			 
1e4b			monitor: 
1e4b				;  
1e4b cd 9b 0d			call clear_display 
1e4e 3e 00			ld a, 0 
1e50 11 9f 1e			ld de, .monprompt 
1e53 cd ae 0d			call str_at_display 
1e56 cd be 0d			call update_display 
1e59			 
1e59				; get a monitor command 
1e59			 
1e59 0e 00			ld c, 0     ; entry at top left 
1e5b 16 64			ld d, 100   ; max buffer size 
1e5d 1e 0f			ld e, 15    ; input scroll area 
1e5f 3e 00			ld a, 0     ; init string 
1e61 21 bc f3			ld hl, os_input 
1e64 77				ld (hl), a 
1e65 23				inc hl 
1e66 77				ld (hl), a 
1e67 21 bc f3			ld hl, os_input 
1e6a 3e 01			ld a, 1     ; init string 
1e6c cd fc 0f			call input_str 
1e6f			 
1e6f cd 9b 0d		        call clear_display 
1e72 cd be 0d			call update_display		 
1e75			 
1e75 3a bc f3			ld a, (os_input) 
1e78 cd 24 14			call toUpper 
1e7b fe 48		        cp 'H' 
1e7d ca 04 1f		        jp z, .monhelp 
1e80 fe 44			cp 'D'		; dump 
1e82 ca 37 1f			jp z, .mondump	 
1e85 fe 43			cp 'C'		; dump 
1e87 ca 51 1f			jp z, .moncdump	 
1e8a fe 4d			cp 'M'		; dump 
1e8c ca a1 1e			jp z, .moneditstart 
1e8f fe 55			cp 'U'		; dump 
1e91 ca ad 1e			jp z, .monedit	 
1e94 fe 47			cp 'G'		; dump 
1e96 ca 2d 1f			jp z, .monjump 
1e99 fe 51			cp 'Q'		; dump 
1e9b c8				ret z	 
1e9c			 
1e9c			 
1e9c				; TODO "S" to access symbol by name and not need the address 
1e9c				; TODO "F" to find a string in memory 
1e9c			 
1e9c c3 4b 1e			jp monitor 
1e9f			 
1e9f .. 00		.monprompt: db ">", 0 
1ea1			 
1ea1			.moneditstart: 
1ea1				; get starting address 
1ea1			 
1ea1 21 be f3			ld hl,os_input+2 
1ea4 cd 86 13			call get_word_hl 
1ea7			 
1ea7 22 e1 f4			ld (os_cur_ptr),hl	 
1eaa			 
1eaa c3 4b 1e			jp monitor 
1ead			 
1ead			.monedit: 
1ead				; get byte to load 
1ead			 
1ead 21 be f3			ld hl,os_input+2 
1eb0 cd 26 13			call get_byte 
1eb3			 
1eb3				; get address to update 
1eb3 2a e1 f4			ld hl, (os_cur_ptr) 
1eb6			 
1eb6				; update byte 
1eb6			 
1eb6 77				ld (hl), a 
1eb7			 
1eb7				; move to next address and save it 
1eb7			 
1eb7 23				inc hl 
1eb8 22 e1 f4			ld (os_cur_ptr),hl	 
1ebb			 
1ebb c3 4b 1e			jp monitor 
1ebe			 
1ebe			 
1ebe .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1ed2 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1eee .. 00		.monhelptext3:  db "G-Call address",0 
1efd .. 00		.monhelptext4:  db "Q-Quit",0 
1f04			        
1f04			.monhelp: 
1f04 3e 00			ld a, display_row_1 
1f06 11 be 1e		        ld de, .monhelptext1 
1f09			 
1f09 cd ae 0d			call str_at_display 
1f0c 3e 28			ld a, display_row_2 
1f0e 11 d2 1e		        ld de, .monhelptext2 
1f11					 
1f11 cd ae 0d			call str_at_display 
1f14 3e 50			ld a, display_row_3 
1f16 11 ee 1e		        ld de, .monhelptext3 
1f19					 
1f19 cd ae 0d			call str_at_display 
1f1c 3e 78			ld a, display_row_4 
1f1e 11 fd 1e		        ld de, .monhelptext4 
1f21 cd ae 0d			call str_at_display 
1f24			 
1f24 cd be 0d			call update_display		 
1f27			 
1f27 cd 7d 20			call next_page_prompt 
1f2a c3 4b 1e			jp monitor 
1f2d			 
1f2d			.monjump:    
1f2d 21 be f3			ld hl,os_input+2 
1f30 cd 86 13			call get_word_hl 
1f33			 
1f33 e9				jp (hl) 
1f34 c3 4b 1e			jp monitor 
1f37			 
1f37			.mondump:    
1f37 21 be f3			ld hl,os_input+2 
1f3a cd 86 13			call get_word_hl 
1f3d			 
1f3d 22 e1 f4			ld (os_cur_ptr),hl	 
1f40 cd 85 1f			call dumpcont 
1f43 3e 78			ld a, display_row_4 
1f45 11 f7 1d			ld de, endprog 
1f48			 
1f48 cd be 0d			call update_display		 
1f4b			 
1f4b cd 7d 20			call next_page_prompt 
1f4e c3 4b 1e			jp monitor 
1f51			.moncdump: 
1f51 cd 85 1f			call dumpcont 
1f54 3e 78			ld a, display_row_4 
1f56 11 f7 1d			ld de, endprog 
1f59			 
1f59 cd be 0d			call update_display		 
1f5c			 
1f5c cd 7d 20			call next_page_prompt 
1f5f c3 4b 1e			jp monitor 
1f62			 
1f62			 
1f62			; TODO symbol access  
1f62			 
1f62			.symbols:     ;; A list of symbols that can be called up  
1f62 ae fd			dw display_fb0 
1f64 .. 00			db "fb0",0  
1f68 77 fa		     	dw store_page 
1f6a .. 00			db "store_page",0 
1f75			 
1f75			 
1f75			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1f75			 
1f75 3a bf f1			ld a,(scratch+1) 
1f78 fe 00			cp 0 
1f7a 28 09			jr z, dumpcont 
1f7c			 
1f7c				; no, not a null term line so has an address to work out.... 
1f7c			 
1f7c 21 c0 f1			ld hl,scratch+2 
1f7f cd 86 13			call get_word_hl 
1f82			 
1f82 22 e1 f4			ld (os_cur_ptr),hl	 
1f85			 
1f85			 
1f85			 
1f85			dumpcont: 
1f85			 
1f85				; dump bytes at ptr 
1f85			 
1f85			 
1f85 3e 00			ld a, display_row_1 
1f87 2a c9 fb			ld hl, (display_fb_active) 
1f8a cd cf 0f			call addatohl 
1f8d cd b5 1f			call .dumpbyterow 
1f90			 
1f90 3e 28			ld a, display_row_2 
1f92 2a c9 fb			ld hl, (display_fb_active) 
1f95 cd cf 0f			call addatohl 
1f98 cd b5 1f			call .dumpbyterow 
1f9b			 
1f9b			 
1f9b 3e 50			ld a, display_row_3 
1f9d 2a c9 fb			ld hl, (display_fb_active) 
1fa0 cd cf 0f			call addatohl 
1fa3 cd b5 1f			call .dumpbyterow 
1fa6			 
1fa6 3e 78			ld a, display_row_4 
1fa8 2a c9 fb			ld hl, (display_fb_active) 
1fab cd cf 0f			call addatohl 
1fae cd b5 1f			call .dumpbyterow 
1fb1			 
1fb1 cd be 0d			call update_display 
1fb4			;		jp cli 
1fb4 c9				ret 
1fb5			 
1fb5			.dumpbyterow: 
1fb5			 
1fb5				;push af 
1fb5			 
1fb5 e5				push hl 
1fb6			 
1fb6				; calc where to poke the ascii 
1fb6			if display_cols == 20 
1fb6				ld a, 16 
1fb6			else 
1fb6 3e 1f			ld a, 31 
1fb8			endif 
1fb8			 
1fb8 cd cf 0f			call addatohl 
1fbb 22 c3 f4			ld (os_word_scratch),hl  		; save pos for later 
1fbe			 
1fbe			 
1fbe			; display decoding address 
1fbe 2a e1 f4		   	ld hl,(os_cur_ptr) 
1fc1			 
1fc1 7c				ld a,h 
1fc2 e1				pop hl 
1fc3 e5				push hl 
1fc4			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1fc4 cd d0 12			call hexout 
1fc7 2a e1 f4		   	ld hl,(os_cur_ptr) 
1fca			 
1fca 7d				ld a,l 
1fcb e1				pop hl 
1fcc 23				inc hl 
1fcd 23				inc hl 
1fce e5				push hl 
1fcf			;	ld hl, os_word_scratch+2 
1fcf cd d0 12			call hexout 
1fd2 e1				pop hl 
1fd3 23				inc hl 
1fd4 23				inc hl 
1fd5				;ld hl, os_word_scratch+4 
1fd5 3e 3a			ld a, ':' 
1fd7 77				ld (hl),a 
1fd8 23				inc hl 
1fd9				;ld a, 0 
1fd9				;ld (hl),a 
1fd9				;ld de, os_word_scratch 
1fd9				;pop af 
1fd9				;push af 
1fd9			;		ld a, display_row_2 
1fd9			;		call str_at_display 
1fd9			;		call update_display 
1fd9			 
1fd9			 
1fd9			;pop af 
1fd9			;	add 5 
1fd9			 
1fd9			if display_cols == 20 
1fd9				ld b, 4 
1fd9			else 
1fd9 06 08			ld b, 8 
1fdb			endif	 
1fdb			 
1fdb			.dumpbyte: 
1fdb c5				push bc 
1fdc e5				push hl 
1fdd			 
1fdd			 
1fdd 2a e1 f4		   	ld hl,(os_cur_ptr) 
1fe0 7e					ld a,(hl) 
1fe1			 
1fe1					; poke the ascii to display 
1fe1 2a c3 f4				ld hl,(os_word_scratch) 
1fe4 77					ld (hl),a 
1fe5 23					inc hl 
1fe6 22 c3 f4				ld (os_word_scratch),hl 
1fe9			 
1fe9					 
1fe9			 
1fe9			 
1fe9 e1					pop hl 
1fea e5					push hl 
1feb			 
1feb cd d0 12				call hexout 
1fee			 
1fee					 
1fee 2a e1 f4		   	ld hl,(os_cur_ptr) 
1ff1 23				inc hl 
1ff2 22 e1 f4		   	ld (os_cur_ptr),hl 
1ff5			 
1ff5 e1					pop hl 
1ff6 23					inc hl 
1ff7 23					inc hl 
1ff8 23					inc hl 
1ff9			 
1ff9			 
1ff9			 
1ff9					;ld a,0 
1ff9					;ld (os_word_scratch+2),a 
1ff9					;pop af 
1ff9					;push af 
1ff9			 
1ff9					;ld de, os_word_scratch 
1ff9					;call str_at_display 
1ff9			;		call update_display 
1ff9			;		pop af 
1ff9 c1					pop bc 
1ffa c6 03				add 3 
1ffc 10 dd			djnz .dumpbyte 
1ffe			 
1ffe				 
1ffe			 
1ffe c9				ret 
1fff			 
1fff			jump:	 
1fff			 
1fff 21 c0 f1			ld hl,scratch+2 
2002 cd 86 13			call get_word_hl 
2005				;ld hl,(scratch+2) 
2005				;call fourehexhl 
2005			 
2005 22 e1 f4			ld (os_cur_ptr),hl	 
2008			 
2008 e9				jp (hl) 
2009			 
2009			 
2009			 
2009			; TODO implement a basic monitor mode to start with 
2009			 
2009			 
2009			 
2009			 
2009			 
2009			 
2009			 
2009			 
2009			 
2009			; testing and demo code during development 
2009			 
2009			 
2009 .. 00		str1: db "Enter some text...",0 
201c .. 00		clear: db "                    ",0 
2031			 
2031			demo: 
2031			 
2031			 
2031			 
2031			;	call update_display 
2031			 
2031				; init scratch input area for testing 
2031 21 be f1			ld hl, scratch	 
2034 3e 00			ld a,0 
2036 77				ld (hl),a 
2037			 
2037			 
2037 3e 28		            LD   A, display_row_2 
2039			;            CALL fLCD_Pos       ;Position cursor to location in A 
2039 11 09 20		            LD   DE, str1 
203c cd ae 0d			call str_at_display 
203f			 
203f			;            CALL fLCD_Str       ;Display string pointed to by DE 
203f			cloop:	 
203f 3e 50		            LD   A, display_row_3 
2041			;            CALL fLCD_Pos       ;Position cursor to location in A 
2041 11 1c 20		            LD   DE, clear 
2044			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
2044 cd ae 0d				call str_at_display 
2047 3e 78			ld a, display_row_4 
2049 11 79 20			ld de, prompt 
204c			 
204c cd ae 0d				call str_at_display 
204f cd be 0d			call update_display 
2052			 
2052 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
2054 16 0a			ld d, 10 
2056 21 be f1			ld hl, scratch	 
2059 cd fc 0f			call input_str 
205c			 
205c			;	call clear_display 
205c			;'	call update_display 
205c			 
205c 3e 00		            LD   A, display_row_1 
205e			;            CALL fLCD_Pos       ;Position cursor to location in A 
205e 11 1c 20		            LD   DE, clear 
2061 cd ae 0d				call str_at_display 
2064			;            CALL fLCD_Str       ;Display string pointed to by DE 
2064 3e 00		            LD   A, display_row_1 
2066			;            CALL fLCD_Pos       ;Position cursor to location in A 
2066 11 be f1		            LD   DE, scratch 
2069			;            CALL fLCD_Str       ;Display string pointed to by DE 
2069 cd ae 0d				call str_at_display 
206c cd be 0d			call update_display 
206f			 
206f 3e 00				ld a,0 
2071 21 be f1			ld hl, scratch 
2074 77				ld (hl),a 
2075			 
2075 00				nop 
2076 c3 3f 20			jp cloop 
2079			 
2079			 
2079			 
2079			; OS Prompt 
2079			 
2079 .. 00		prompt: db ">",0 
207b .. 00		endprg: db "?",0 
207d			 
207d			 
207d			; handy next page prompt 
207d			next_page_prompt: 
207d e5				push hl 
207e d5				push de 
207f f5				push af 
2080 c5				push bc 
2081			 
2081 3e 9f			ld a,display_row_4 + display_cols - 1 
2083 11 7b 20		        ld de, endprg 
2086 cd ae 0d			call str_at_display 
2089 cd be 0d			call update_display 
208c cd 07 7a			call cin_wait 
208f c1				pop bc 
2090 f1				pop af 
2091 d1				pop de 
2092 e1				pop hl 
2093			 
2093			 
2093 c9				ret 
2094			 
2094			 
2094			; forth parser 
2094			 
2094			; My forth kernel 
2094			include "forth_kernel.asm" 
2094			; 
2094			; kernel to the forth OS 
2094			 
2094			DS_TYPE_STR: equ 1     ; string type 
2094			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
2094			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
2094			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
2094			 
2094			FORTH_PARSEV1: equ 0 
2094			FORTH_PARSEV2: equ 0 
2094			FORTH_PARSEV3: equ 0 
2094			FORTH_PARSEV4: equ 0 
2094			FORTH_PARSEV5: equ 1 
2094			 
2094			;if FORTH_PARSEV5 
2094			;	FORTH_END_BUFFER: equ 0 
2094			;else 
2094			FORTH_END_BUFFER: equ 127 
2094			;endif 
2094			 
2094			FORTH_TRUE: equ 1 
2094			FORTH_FALSE: equ 0 
2094			 
2094			if FORTH_PARSEV4 
2094			include "forth_stackops.asm" 
2094			endif 
2094			 
2094			if FORTH_PARSEV5 
2094			include "forth_stackopsv5.asm" 
2094			 
2094			; Stack operations for v5 parser on wards 
2094			; * DATA stack 
2094			; * LOOP stack 
2094			; * RETURN stack 
2094			 
2094			 
2094			 
2094			FORTH_CHK_DSP_UNDER: macro 
2094				push hl 
2094				push de 
2094				ld hl,(cli_data_sp) 
2094				ld de, cli_data_stack 
2094				call cmp16 
2094				jp c, fault_dsp_under 
2094				pop de 
2094				pop hl 
2094				endm 
2094			 
2094			 
2094			FORTH_CHK_RSP_UNDER: macro 
2094				push hl 
2094				push de 
2094				ld hl,(cli_ret_sp) 
2094				ld de, cli_ret_stack 
2094				call cmp16 
2094				jp c, fault_rsp_under 
2094				pop de 
2094				pop hl 
2094				endm 
2094			 
2094			FORTH_CHK_LOOP_UNDER: macro 
2094				push hl 
2094				push de 
2094				ld hl,(cli_loop_sp) 
2094				ld de, cli_loop_stack 
2094				call cmp16 
2094				jp c, fault_loop_under 
2094				pop de 
2094				pop hl 
2094				endm 
2094			 
2094			FORTH_ERR_TOS_NOTSTR: macro 
2094				; TOSO might need more for checks when used 
2094				push af 
2094				ld a,(hl) 
2094				cp DS_TYPE_STR 
2094				jp nz, type_faultn   
2094				pop af 
2094				endm 
2094			 
2094			FORTH_ERR_TOS_NOTNUM: macro 
2094				push af 
2094				ld a,(hl) 
2094				cp DS_TYPE_INUM 
2094				jp nz, type_faultn   
2094				pop af 
2094				endm 
2094			 
2094			 
2094			; increase data stack pointer and save hl to it 
2094				 
2094			FORTH_DSP_NEXT: macro 
2094				call macro_forth_dsp_next 
2094				endm 
2094			 
2094			 
2094			macro_forth_dsp_next: 
2094				if DEBUG_FORTH_STACK_GUARD 
2094 cd b4 72				call check_stacks 
2097				endif 
2097 e5				push hl 
2098 d5				push de 
2099 eb				ex de,hl 
209a 2a eb f9			ld hl,(cli_data_sp) 
209d 23				inc hl 
209e 23				inc hl 
209f			 
209f			; PARSEV5 
209f 23				inc hl 
20a0 22 eb f9			ld (cli_data_sp),hl 
20a3 73				ld (hl), e 
20a4 23				inc hl 
20a5 72				ld (hl), d 
20a6 d1				pop de 
20a7 e1				pop hl 
20a8				if DEBUG_FORTH_STACK_GUARD 
20a8 cd b4 72				call check_stacks 
20ab				endif 
20ab c9				ret 
20ac			 
20ac			 
20ac			; increase ret stack pointer and save hl to it 
20ac				 
20ac			FORTH_RSP_NEXT: macro 
20ac				call macro_forth_rsp_next 
20ac				endm 
20ac			 
20ac			macro_forth_rsp_next: 
20ac				if DEBUG_FORTH_STACK_GUARD 
20ac cd b4 72				call check_stacks 
20af				endif 
20af e5				push hl 
20b0 d5				push de 
20b1 eb				ex de,hl 
20b2 2a ef f9			ld hl,(cli_ret_sp) 
20b5 23				inc hl 
20b6 23				inc hl 
20b7 22 ef f9			ld (cli_ret_sp),hl 
20ba 73				ld (hl), e 
20bb 23				inc hl 
20bc 72				ld (hl), d 
20bd d1				pop de 
20be e1				pop hl 
20bf				if DEBUG_FORTH_STACK_GUARD 
20bf cd b4 72				call check_stacks 
20c2				endif 
20c2 c9				ret 
20c3			 
20c3			; get current ret stack pointer and save to hl  
20c3				 
20c3			FORTH_RSP_TOS: macro 
20c3				call macro_forth_rsp_tos 
20c3				endm 
20c3			 
20c3			macro_forth_rsp_tos: 
20c3				;push de 
20c3 2a ef f9			ld hl,(cli_ret_sp) 
20c6 cd fe 20			call loadhlptrtohl 
20c9				;ld e, (hl) 
20c9				;inc hl 
20c9				;ld d, (hl) 
20c9				;ex de, hl 
20c9					if DEBUG_FORTH_WORDS 
20c9			;			DMARK "RST" 
20c9						CALLMONITOR 
20c9 cd 6c fe			call debug_vector  
20cc				endm  
# End of macro CALLMONITOR
20cc					endif 
20cc				;pop de 
20cc c9				ret 
20cd			 
20cd			; pop ret stack pointer 
20cd				 
20cd			FORTH_RSP_POP: macro 
20cd				call macro_forth_rsp_pop 
20cd				endm 
20cd			 
20cd			 
20cd			macro_forth_rsp_pop: 
20cd				if DEBUG_FORTH_STACK_GUARD 
20cd			;		DMARK "RPP" 
20cd cd b4 72				call check_stacks 
20d0					FORTH_CHK_RSP_UNDER 
20d0 e5				push hl 
20d1 d5				push de 
20d2 2a ef f9			ld hl,(cli_ret_sp) 
20d5 11 a9 f9			ld de, cli_ret_stack 
20d8 cd ed 0f			call cmp16 
20db da c8 73			jp c, fault_rsp_under 
20de d1				pop de 
20df e1				pop hl 
20e0				endm 
# End of macro FORTH_CHK_RSP_UNDER
20e0				endif 
20e0 e5				push hl 
20e1 2a ef f9			ld hl,(cli_ret_sp) 
20e4			 
20e4			 
20e4				if FORTH_ENABLE_FREE 
20e4			 
20e4					; get pointer 
20e4			 
20e4					push de 
20e4					push hl 
20e4			 
20e4					ld e, (hl) 
20e4					inc hl 
20e4					ld d, (hl) 
20e4			 
20e4					ex de, hl 
20e4					call free 
20e4			 
20e4					pop hl 
20e4					pop de 
20e4			 
20e4			 
20e4				endif 
20e4			 
20e4			 
20e4 2b				dec hl 
20e5 2b				dec hl 
20e6 22 ef f9			ld (cli_ret_sp), hl 
20e9				; do stack underflow checks 
20e9 e1				pop hl 
20ea				if DEBUG_FORTH_STACK_GUARD 
20ea cd b4 72				call check_stacks 
20ed					FORTH_CHK_RSP_UNDER 
20ed e5				push hl 
20ee d5				push de 
20ef 2a ef f9			ld hl,(cli_ret_sp) 
20f2 11 a9 f9			ld de, cli_ret_stack 
20f5 cd ed 0f			call cmp16 
20f8 da c8 73			jp c, fault_rsp_under 
20fb d1				pop de 
20fc e1				pop hl 
20fd				endm 
# End of macro FORTH_CHK_RSP_UNDER
20fd				endif 
20fd c9				ret 
20fe			 
20fe			 
20fe			 
20fe			; routine to load word pointed to by hl into hl 
20fe			 
20fe			loadhlptrtohl: 
20fe			 
20fe d5				push de 
20ff 5e				ld e, (hl) 
2100 23				inc hl 
2101 56				ld d, (hl) 
2102 eb				ex de, hl 
2103 d1				pop de 
2104			 
2104 c9				ret 
2105			 
2105			 
2105			 
2105			 
2105			 
2105			; push a number held in HL onto the data stack 
2105			; entry point for pushing a value when already in hl used in function above 
2105			 
2105			forth_push_numhl: 
2105			 
2105 e5				push hl    ; save value to push 
2106			 
2106			if DEBUG_FORTH_PUSH 
2106				; see if disabled 
2106			 
2106			 
2106 f5				push af 
2107 3a 6c fe			ld a,(debug_vector) 
210a fe c9			cp $c9   ; ret 
210c			;	ld a, (os_view_disable) 
210c			;	cp '*' 
210c 28 34			jr z, .pskip2 
210e e5				push hl 
210f e5			push hl 
2110 cd 9b 0d			call clear_display 
2113 e1			pop hl 
2114 7c				ld a,h 
2115 21 c3 f4			ld hl, os_word_scratch 
2118 cd d0 12			call hexout 
211b e1				pop hl 
211c 7d				ld a,l 
211d 21 c5 f4			ld hl, os_word_scratch+2 
2120 cd d0 12			call hexout 
2123			 
2123 21 c7 f4			ld hl, os_word_scratch+4 
2126 3e 00			ld a,0 
2128 77				ld (hl),a 
2129 11 c3 f4			ld de,os_word_scratch 
212c 3e 28				ld a, display_row_2 
212e cd ae 0d				call str_at_display 
2131 11 f0 5d			ld de, .push_num 
2134 3e 00			ld a, display_row_1 
2136			 
2136 cd ae 0d				call str_at_display 
2139			 
2139			 
2139 cd be 0d			call update_display 
213c cd de 0c			call delay1s 
213f cd de 0c			call delay1s 
2142			.pskip2:  
2142			 
2142 f1				pop af 
2143			endif	 
2143			 
2143			 
2143				FORTH_DSP_NEXT 
2143 cd 94 20			call macro_forth_dsp_next 
2146				endm 
# End of macro FORTH_DSP_NEXT
2146			 
2146 2a eb f9			ld hl, (cli_data_sp) 
2149			 
2149				; save item type 
2149 3e 02			ld a,  DS_TYPE_INUM 
214b 77				ld (hl), a 
214c 23				inc hl 
214d			 
214d				; get word off stack 
214d d1				pop de 
214e 7b				ld a,e 
214f 77				ld (hl), a 
2150 23				inc hl 
2151 7a				ld a,d 
2152 77				ld (hl), a 
2153			 
2153			if DEBUG_FORTH_PUSH 
2153 2b				dec hl 
2154 2b				dec hl 
2155 2b				dec hl 
2156						DMARK "PH5" 
2156 f5				push af  
2157 3a 6b 21			ld a, (.dmark)  
215a 32 68 fe			ld (debug_mark),a  
215d 3a 6c 21			ld a, (.dmark+1)  
2160 32 69 fe			ld (debug_mark+1),a  
2163 3a 6d 21			ld a, (.dmark+2)  
2166 32 6a fe			ld (debug_mark+2),a  
2169 18 03			jr .pastdmark  
216b ..			.dmark: db "PH5"  
216e f1			.pastdmark: pop af  
216f			endm  
# End of macro DMARK
216f				CALLMONITOR 
216f cd 6c fe			call debug_vector  
2172				endm  
# End of macro CALLMONITOR
2172			endif	 
2172			 
2172 c9				ret 
2173			 
2173			 
2173			; Push a string to stack pointed to by hl 
2173			 
2173			forth_push_str: 
2173			 
2173			if DEBUG_FORTH_PUSH 
2173						DMARK "PSQ" 
2173 f5				push af  
2174 3a 88 21			ld a, (.dmark)  
2177 32 68 fe			ld (debug_mark),a  
217a 3a 89 21			ld a, (.dmark+1)  
217d 32 69 fe			ld (debug_mark+1),a  
2180 3a 8a 21			ld a, (.dmark+2)  
2183 32 6a fe			ld (debug_mark+2),a  
2186 18 03			jr .pastdmark  
2188 ..			.dmark: db "PSQ"  
218b f1			.pastdmark: pop af  
218c			endm  
# End of macro DMARK
218c				CALLMONITOR 
218c cd 6c fe			call debug_vector  
218f				endm  
# End of macro CALLMONITOR
218f			endif	 
218f			    
218f e5				push hl 
2190 e5				push hl 
2191			 
2191			;	ld a, 0   ; find end of string 
2191 cd 2d 14			call strlenz 
2194			if DEBUG_FORTH_PUSH 
2194						DMARK "PQ2" 
2194 f5				push af  
2195 3a a9 21			ld a, (.dmark)  
2198 32 68 fe			ld (debug_mark),a  
219b 3a aa 21			ld a, (.dmark+1)  
219e 32 69 fe			ld (debug_mark+1),a  
21a1 3a ab 21			ld a, (.dmark+2)  
21a4 32 6a fe			ld (debug_mark+2),a  
21a7 18 03			jr .pastdmark  
21a9 ..			.dmark: db "PQ2"  
21ac f1			.pastdmark: pop af  
21ad			endm  
# End of macro DMARK
21ad				CALLMONITOR 
21ad cd 6c fe			call debug_vector  
21b0				endm  
# End of macro CALLMONITOR
21b0			endif	 
21b0 eb				ex de, hl 
21b1 e1				pop hl   ; get ptr to start of string 
21b2			if DEBUG_FORTH_PUSH 
21b2						DMARK "PQ3" 
21b2 f5				push af  
21b3 3a c7 21			ld a, (.dmark)  
21b6 32 68 fe			ld (debug_mark),a  
21b9 3a c8 21			ld a, (.dmark+1)  
21bc 32 69 fe			ld (debug_mark+1),a  
21bf 3a c9 21			ld a, (.dmark+2)  
21c2 32 6a fe			ld (debug_mark+2),a  
21c5 18 03			jr .pastdmark  
21c7 ..			.dmark: db "PQ3"  
21ca f1			.pastdmark: pop af  
21cb			endm  
# End of macro DMARK
21cb				CALLMONITOR 
21cb cd 6c fe			call debug_vector  
21ce				endm  
# End of macro CALLMONITOR
21ce			endif	 
21ce 19				add hl,de 
21cf			if DEBUG_FORTH_PUSH 
21cf						DMARK "PQE" 
21cf f5				push af  
21d0 3a e4 21			ld a, (.dmark)  
21d3 32 68 fe			ld (debug_mark),a  
21d6 3a e5 21			ld a, (.dmark+1)  
21d9 32 69 fe			ld (debug_mark+1),a  
21dc 3a e6 21			ld a, (.dmark+2)  
21df 32 6a fe			ld (debug_mark+2),a  
21e2 18 03			jr .pastdmark  
21e4 ..			.dmark: db "PQE"  
21e7 f1			.pastdmark: pop af  
21e8			endm  
# End of macro DMARK
21e8				CALLMONITOR 
21e8 cd 6c fe			call debug_vector  
21eb				endm  
# End of macro CALLMONITOR
21eb			endif	 
21eb			 
21eb 2b				dec hl    ; see if there is an optional trailing double quote 
21ec 7e				ld a,(hl) 
21ed fe 22			cp '"' 
21ef 20 03			jr nz, .strnoq 
21f1 3e 00			ld a, 0      ; get rid of double quote 
21f3 77				ld (hl), a 
21f4 23			.strnoq: inc hl 
21f5			 
21f5 3e 00			ld a, 0 
21f7 77				ld (hl), a     ; add null term and get rid of trailing double quote 
21f8			 
21f8 13				inc de ; add one for the type string 
21f9 13				inc de ; add one for null term??? 
21fa			 
21fa				; tos is get string pointer again 
21fa				; de contains space to allocate 
21fa				 
21fa d5				push de 
21fb			 
21fb eb				ex de, hl 
21fc			 
21fc				;push af 
21fc			 
21fc			if DEBUG_FORTH_PUSH 
21fc						DMARK "PHm" 
21fc f5				push af  
21fd 3a 11 22			ld a, (.dmark)  
2200 32 68 fe			ld (debug_mark),a  
2203 3a 12 22			ld a, (.dmark+1)  
2206 32 69 fe			ld (debug_mark+1),a  
2209 3a 13 22			ld a, (.dmark+2)  
220c 32 6a fe			ld (debug_mark+2),a  
220f 18 03			jr .pastdmark  
2211 ..			.dmark: db "PHm"  
2214 f1			.pastdmark: pop af  
2215			endm  
# End of macro DMARK
2215				CALLMONITOR 
2215 cd 6c fe			call debug_vector  
2218				endm  
# End of macro CALLMONITOR
2218			endif	 
2218 cd 96 14			call malloc	; on ret hl now contains allocated memory 
221b				if DEBUG_FORTH_MALLOC_GUARD 
221b cc 48 5e				call z,malloc_error 
221e				endif 
221e			 
221e				 
221e c1				pop bc    ; get length 
221f d1				pop de   ;  get string start    
2220			 
2220				; hl has destination from malloc 
2220			 
2220 eb				ex de, hl    ; prep for ldir 
2221			 
2221 d5				push de   ; save malloc area for DSP later 
2222				;push hl   ; save malloc area for DSP later 
2222			 
2222			if DEBUG_FORTH_PUSH 
2222						DMARK "PHc" 
2222 f5				push af  
2223 3a 37 22			ld a, (.dmark)  
2226 32 68 fe			ld (debug_mark),a  
2229 3a 38 22			ld a, (.dmark+1)  
222c 32 69 fe			ld (debug_mark+1),a  
222f 3a 39 22			ld a, (.dmark+2)  
2232 32 6a fe			ld (debug_mark+2),a  
2235 18 03			jr .pastdmark  
2237 ..			.dmark: db "PHc"  
223a f1			.pastdmark: pop af  
223b			endm  
# End of macro DMARK
223b				CALLMONITOR 
223b cd 6c fe			call debug_vector  
223e				endm  
# End of macro CALLMONITOR
223e			endif	 
223e			 
223e			 
223e ed b0			ldir 
2240			 
2240			 
2240				; push malloc to data stack     macro?????  
2240			 
2240				FORTH_DSP_NEXT 
2240 cd 94 20			call macro_forth_dsp_next 
2243				endm 
# End of macro FORTH_DSP_NEXT
2243			 
2243				; save value and type 
2243			 
2243 2a eb f9			ld hl, (cli_data_sp) 
2246			 
2246				; save item type 
2246 3e 01			ld a,  DS_TYPE_STR 
2248 77				ld (hl), a 
2249 23				inc hl 
224a			 
224a				; get malloc word off stack 
224a d1				pop de 
224b 73				ld (hl), e 
224c 23				inc hl 
224d 72				ld (hl), d 
224e			 
224e			 
224e			 
224e			if DEBUG_FORTH_PUSH 
224e 2a eb f9			ld hl, (cli_data_sp) 
2251						DMARK "PHS" 
2251 f5				push af  
2252 3a 66 22			ld a, (.dmark)  
2255 32 68 fe			ld (debug_mark),a  
2258 3a 67 22			ld a, (.dmark+1)  
225b 32 69 fe			ld (debug_mark+1),a  
225e 3a 68 22			ld a, (.dmark+2)  
2261 32 6a fe			ld (debug_mark+2),a  
2264 18 03			jr .pastdmark  
2266 ..			.dmark: db "PHS"  
2269 f1			.pastdmark: pop af  
226a			endm  
# End of macro DMARK
226a				CALLMONITOR 
226a cd 6c fe			call debug_vector  
226d				endm  
# End of macro CALLMONITOR
226d			;	ex de,hl 
226d			endif	 
226d				; in case of spaces, skip the ptr past the copied string 
226d				;pop af 
226d				;ld (cli_origptr),hl 
226d			 
226d c9				ret 
226e			 
226e			 
226e			 
226e			; TODO ascii push input onto stack given hl to start of input 
226e			 
226e			; identify type 
226e			; if starts with a " then a string 
226e			; otherwise it is a number 
226e			;  
226e			; if a string 
226e			;     scan for ending " to get length of string to malloc for + 1 
226e			;     malloc 
226e			;     put pointer to string on stack first byte flags as string 
226e			; 
226e			; else a number 
226e			;    look for number format identifier 
226e			;    $xx hex 
226e			;    %xxxxx bin 
226e			;    xxxxx decimal 
226e			;    convert number to 16bit word.  
226e			;    malloc word + 1 with flag to identiy as num 
226e			;    put pointer to number on stack 
226e			;   
226e			;  
226e			  
226e			forth_apush: 
226e				; kernel push 
226e			 
226e			if DEBUG_FORTH_PUSH 
226e						DMARK "PSH" 
226e f5				push af  
226f 3a 83 22			ld a, (.dmark)  
2272 32 68 fe			ld (debug_mark),a  
2275 3a 84 22			ld a, (.dmark+1)  
2278 32 69 fe			ld (debug_mark+1),a  
227b 3a 85 22			ld a, (.dmark+2)  
227e 32 6a fe			ld (debug_mark+2),a  
2281 18 03			jr .pastdmark  
2283 ..			.dmark: db "PSH"  
2286 f1			.pastdmark: pop af  
2287			endm  
# End of macro DMARK
2287				CALLMONITOR 
2287 cd 6c fe			call debug_vector  
228a				endm  
# End of macro CALLMONITOR
228a			endif	 
228a				; identify input type 
228a			 
228a 7e				ld a,(hl) 
228b fe 22			cp '"' 
228d 28 0a			jr z, .fapstr 
228f fe 24			cp '$' 
2291 ca b9 22			jp z, .faphex 
2294 fe 25			cp '%' 
2296 ca a1 22			jp z, .fapbin 
2299			;	cp 'b' 
2299			;	jp z, .fabin 
2299				; else decimal 
2299			 
2299				; TODO do decimal conversion 
2299				; decimal is stored as a 16bit word 
2299			 
2299				; by default everything is a string if type is not detected 
2299			.fapstr: ; 
2299 fe 22			cp '"' 
229b 20 01			jr nz, .strnoqu 
229d 23				inc hl 
229e			.strnoqu: 
229e c3 73 21			jp forth_push_str 
22a1			 
22a1			 
22a1			 
22a1			.fapbin:    ; push a binary string.  
22a1 11 00 00			ld de, 0   ; hold a 16bit value 
22a4			 
22a4 23			.fapbinshift:	inc hl  
22a5 7e				ld a,(hl) 
22a6 fe 00			cp 0     ; done scanning  
22a8 28 0b			jr z, .fapbdone  	; got it in HL so push  
22aa			 
22aa				; left shift de 
22aa eb				ex de, hl	 
22ab 29				add hl, hl 
22ac			 
22ac				; is 1 
22ac fe 31			cp '1' 
22ae 20 02			jr nz, .binzero 
22b0 cb 4d			bit 1, l 
22b2			.binzero: 
22b2 eb				ex de, hl	 ; save current de 
22b3 18 ef			jr .fapbinshift 
22b5			 
22b5			.fapbdone: 
22b5 eb				ex de, hl 
22b6 c3 05 21			jp forth_push_numhl 
22b9			 
22b9			 
22b9			.faphex:   ; hex is always stored as a 16bit word 
22b9				; skip number prefix 
22b9 23				inc hl 
22ba				; turn ascii into number 
22ba cd 86 13			call get_word_hl	; ret 16bit word in hl 
22bd			 
22bd c3 05 21			jp forth_push_numhl 
22c0			 
22c0 00				 nop 
22c1			 
22c1			.fabin:   ; TODO bin conversion 
22c1			 
22c1			 
22c1 c9				ret 
22c2			 
22c2			 
22c2			; get either a string ptr or a 16bit word from the data stack 
22c2			 
22c2			FORTH_DSP: macro 
22c2				call macro_forth_dsp 
22c2				endm 
22c2			 
22c2			macro_forth_dsp: 
22c2				; data stack pointer points to current word on tos 
22c2			 
22c2 2a eb f9			ld hl,(cli_data_sp) 
22c5			 
22c5				if DEBUG_FORTH_PUSH 
22c5						DMARK "DSP" 
22c5 f5				push af  
22c6 3a da 22			ld a, (.dmark)  
22c9 32 68 fe			ld (debug_mark),a  
22cc 3a db 22			ld a, (.dmark+1)  
22cf 32 69 fe			ld (debug_mark+1),a  
22d2 3a dc 22			ld a, (.dmark+2)  
22d5 32 6a fe			ld (debug_mark+2),a  
22d8 18 03			jr .pastdmark  
22da ..			.dmark: db "DSP"  
22dd f1			.pastdmark: pop af  
22de			endm  
# End of macro DMARK
22de			 
22de cd 7b 5e				call display_data_sp 
22e1				;call break_point_state 
22e1				;rst 030h 
22e1				CALLMONITOR 
22e1 cd 6c fe			call debug_vector  
22e4				endm  
# End of macro CALLMONITOR
22e4				endif 
22e4			 
22e4 c9				ret 
22e5			 
22e5			; return hl to start of value on stack 
22e5			 
22e5			FORTH_DSP_VALUE: macro 
22e5				call macro_forth_dsp_value 
22e5				endm 
22e5			 
22e5			macro_forth_dsp_value: 
22e5			 
22e5				FORTH_DSP 
22e5 cd c2 22			call macro_forth_dsp 
22e8				endm 
# End of macro FORTH_DSP
22e8			 
22e8 d5				push de 
22e9			 
22e9 23				inc hl ; skip type 
22ea			 
22ea 5e				ld e, (hl) 
22eb 23				inc hl 
22ec 56				ld d, (hl) 
22ed eb				ex de,hl  
22ee			 
22ee d1				pop de 
22ef			 
22ef c9				ret 
22f0			 
22f0			; return hl to start of value to second item on stack 
22f0			 
22f0			FORTH_DSP_VALUEM1: macro 
22f0				call macro_forth_dsp_value_m1 
22f0				endm 
22f0			 
22f0			macro_forth_dsp_value_m1: 
22f0			 
22f0				FORTH_DSP 
22f0 cd c2 22			call macro_forth_dsp 
22f3				endm 
# End of macro FORTH_DSP
22f3			 
22f3 2b				dec hl 
22f4 2b				dec hl 
22f5			;	dec hl 
22f5			 
22f5 d5				push de 
22f6			 
22f6 5e				ld e, (hl) 
22f7 23				inc hl 
22f8 56				ld d, (hl) 
22f9 eb				ex de,hl  
22fa			 
22fa d1				pop de 
22fb			 
22fb c9				ret 
22fc			 
22fc				 
22fc			 
22fc			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
22fc			 
22fc			FORTH_DSP_POP: macro 
22fc				call macro_forth_dsp_pop 
22fc				endm 
22fc			 
22fc			 
22fc			; get the tos data type 
22fc			 
22fc			FORTH_DSP_TYPE:   macro 
22fc			 
22fc				;FORTH_DSP_VALUE 
22fc				FORTH_DSP 
22fc				 
22fc				; hl points to value 
22fc				; check type 
22fc			 
22fc				ld a,(hl) 
22fc			 
22fc				endm 
22fc			 
22fc			; load the tos value into hl 
22fc			 
22fc			 
22fc			FORTH_DSP_VALUEHL:  macro 
22fc				call macro_dsp_valuehl 
22fc				endm 
22fc			 
22fc			 
22fc			 
22fc			macro_dsp_valuehl: 
22fc				FORTH_DSP_VALUE 
22fc cd e5 22			call macro_forth_dsp_value 
22ff				endm 
# End of macro FORTH_DSP_VALUE
22ff			 
22ff				;FORTH_ERR_TOS_NOTNUM 
22ff			 
22ff				;inc hl   ; skip type id 
22ff			 
22ff			;	push de 
22ff			; 
22ff			;	ld e, (hl) 
22ff			;	inc hl 
22ff			;	ld d, (hl) 
22ff			;	ex de,hl  
22ff			 
22ff			;	pop de 
22ff			 
22ff				if DEBUG_FORTH_PUSH 
22ff						DMARK "DVL" 
22ff f5				push af  
2300 3a 14 23			ld a, (.dmark)  
2303 32 68 fe			ld (debug_mark),a  
2306 3a 15 23			ld a, (.dmark+1)  
2309 32 69 fe			ld (debug_mark+1),a  
230c 3a 16 23			ld a, (.dmark+2)  
230f 32 6a fe			ld (debug_mark+2),a  
2312 18 03			jr .pastdmark  
2314 ..			.dmark: db "DVL"  
2317 f1			.pastdmark: pop af  
2318			endm  
# End of macro DMARK
2318				CALLMONITOR 
2318 cd 6c fe			call debug_vector  
231b				endm  
# End of macro CALLMONITOR
231b				endif 
231b c9				ret 
231c			 
231c			forth_apushstrhl:      
231c				; push of string requires use of cli_origptr 
231c				; bodge use 
231c			 
231c				; get current cli_origptr, save, update with temp pointer  
231c ed 5b 3b fa		ld de, (cli_origptr) 
2320 22 3b fa			ld (cli_origptr), hl 
2323 d5				push de 
2324 cd 6e 22			call forth_apush 
2327 d1				pop de 
2328 ed 53 3b fa		ld (cli_origptr), de 
232c c9			        ret	 
232d			 
232d			 
232d			; increase loop stack pointer and save hl to it 
232d				 
232d			FORTH_LOOP_NEXT: macro 
232d				call macro_forth_loop_next 
232d				;nop 
232d				endm 
232d			 
232d			macro_forth_loop_next: 
232d				if DEBUG_FORTH_STACK_GUARD 
232d cd b4 72				call check_stacks 
2330				endif 
2330 e5				push hl 
2331 d5				push de 
2332 eb				ex de,hl 
2333 2a ed f9			ld hl,(cli_loop_sp) 
2336 23				inc hl 
2337 23				inc hl 
2338					if DEBUG_FORTH_WORDS 
2338						DMARK "LNX" 
2338 f5				push af  
2339 3a 4d 23			ld a, (.dmark)  
233c 32 68 fe			ld (debug_mark),a  
233f 3a 4e 23			ld a, (.dmark+1)  
2342 32 69 fe			ld (debug_mark+1),a  
2345 3a 4f 23			ld a, (.dmark+2)  
2348 32 6a fe			ld (debug_mark+2),a  
234b 18 03			jr .pastdmark  
234d ..			.dmark: db "LNX"  
2350 f1			.pastdmark: pop af  
2351			endm  
# End of macro DMARK
2351						CALLMONITOR 
2351 cd 6c fe			call debug_vector  
2354				endm  
# End of macro CALLMONITOR
2354					endif 
2354 22 ed f9			ld (cli_loop_sp),hl 
2357 73				ld (hl), e 
2358 23				inc hl 
2359 72				ld (hl), d 
235a d1				pop de    ; been reversed so save a swap on restore 
235b e1				pop hl 
235c				if DEBUG_FORTH_STACK_GUARD 
235c cd b4 72				call check_stacks 
235f				endif 
235f c9				ret 
2360			 
2360			; get current ret stack pointer and save to hl  
2360				 
2360			FORTH_LOOP_TOS: macro 
2360				call macro_forth_loop_tos 
2360				endm 
2360			 
2360			macro_forth_loop_tos: 
2360 d5				push de 
2361 2a ed f9			ld hl,(cli_loop_sp) 
2364 5e				ld e, (hl) 
2365 23				inc hl 
2366 56				ld d, (hl) 
2367 eb				ex de, hl 
2368 d1				pop de 
2369 c9				ret 
236a			 
236a			; pop loop stack pointer 
236a				 
236a			FORTH_LOOP_POP: macro 
236a				call macro_forth_loop_pop 
236a				endm 
236a			 
236a			 
236a			macro_forth_loop_pop: 
236a				if DEBUG_FORTH_STACK_GUARD 
236a					DMARK "LPP" 
236a f5				push af  
236b 3a 7f 23			ld a, (.dmark)  
236e 32 68 fe			ld (debug_mark),a  
2371 3a 80 23			ld a, (.dmark+1)  
2374 32 69 fe			ld (debug_mark+1),a  
2377 3a 81 23			ld a, (.dmark+2)  
237a 32 6a fe			ld (debug_mark+2),a  
237d 18 03			jr .pastdmark  
237f ..			.dmark: db "LPP"  
2382 f1			.pastdmark: pop af  
2383			endm  
# End of macro DMARK
2383 cd b4 72				call check_stacks 
2386					FORTH_CHK_LOOP_UNDER 
2386 e5				push hl 
2387 d5				push de 
2388 2a ed f9			ld hl,(cli_loop_sp) 
238b 11 27 f9			ld de, cli_loop_stack 
238e cd ed 0f			call cmp16 
2391 da ce 73			jp c, fault_loop_under 
2394 d1				pop de 
2395 e1				pop hl 
2396				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2396				endif 
2396 e5				push hl 
2397 2a ed f9			ld hl,(cli_loop_sp) 
239a 2b				dec hl 
239b 2b				dec hl 
239c 22 ed f9			ld (cli_loop_sp), hl 
239f				; TODO do stack underflow checks 
239f e1				pop hl 
23a0				if DEBUG_FORTH_STACK_GUARD 
23a0 cd b4 72				call check_stacks 
23a3					FORTH_CHK_LOOP_UNDER 
23a3 e5				push hl 
23a4 d5				push de 
23a5 2a ed f9			ld hl,(cli_loop_sp) 
23a8 11 27 f9			ld de, cli_loop_stack 
23ab cd ed 0f			call cmp16 
23ae da ce 73			jp c, fault_loop_under 
23b1 d1				pop de 
23b2 e1				pop hl 
23b3				endm 
# End of macro FORTH_CHK_LOOP_UNDER
23b3				endif 
23b3 c9				ret 
23b4			 
23b4			macro_forth_dsp_pop: 
23b4			 
23b4 e5				push hl 
23b5			 
23b5				; release malloc data 
23b5			 
23b5				if DEBUG_FORTH_STACK_GUARD 
23b5 cd b4 72				call check_stacks 
23b8					FORTH_CHK_DSP_UNDER 
23b8 e5				push hl 
23b9 d5				push de 
23ba 2a eb f9			ld hl,(cli_data_sp) 
23bd 11 25 f7			ld de, cli_data_stack 
23c0 cd ed 0f			call cmp16 
23c3 da c2 73			jp c, fault_dsp_under 
23c6 d1				pop de 
23c7 e1				pop hl 
23c8				endm 
# End of macro FORTH_CHK_DSP_UNDER
23c8				endif 
23c8				;ld hl,(cli_data_sp) 
23c8			if DEBUG_FORTH_DOT 
23c8				DMARK "DPP" 
23c8 f5				push af  
23c9 3a dd 23			ld a, (.dmark)  
23cc 32 68 fe			ld (debug_mark),a  
23cf 3a de 23			ld a, (.dmark+1)  
23d2 32 69 fe			ld (debug_mark+1),a  
23d5 3a df 23			ld a, (.dmark+2)  
23d8 32 6a fe			ld (debug_mark+2),a  
23db 18 03			jr .pastdmark  
23dd ..			.dmark: db "DPP"  
23e0 f1			.pastdmark: pop af  
23e1			endm  
# End of macro DMARK
23e1				CALLMONITOR 
23e1 cd 6c fe			call debug_vector  
23e4				endm  
# End of macro CALLMONITOR
23e4			endif	 
23e4			 
23e4			 
23e4			if FORTH_ENABLE_DSPPOPFREE 
23e4			 
23e4				FORTH_DSP 
23e4 cd c2 22			call macro_forth_dsp 
23e7				endm 
# End of macro FORTH_DSP
23e7			 
23e7 7e				ld a, (hl) 
23e8 fe 01			cp DS_TYPE_STR 
23ea 20 23			jr nz, .skippopfree 
23ec			 
23ec				FORTH_DSP_VALUEHL 
23ec cd fc 22			call macro_dsp_valuehl 
23ef				endm 
# End of macro FORTH_DSP_VALUEHL
23ef 00				nop 
23f0			if DEBUG_FORTH_DOT 
23f0				DMARK "DPf" 
23f0 f5				push af  
23f1 3a 05 24			ld a, (.dmark)  
23f4 32 68 fe			ld (debug_mark),a  
23f7 3a 06 24			ld a, (.dmark+1)  
23fa 32 69 fe			ld (debug_mark+1),a  
23fd 3a 07 24			ld a, (.dmark+2)  
2400 32 6a fe			ld (debug_mark+2),a  
2403 18 03			jr .pastdmark  
2405 ..			.dmark: db "DPf"  
2408 f1			.pastdmark: pop af  
2409			endm  
# End of macro DMARK
2409				CALLMONITOR 
2409 cd 6c fe			call debug_vector  
240c				endm  
# End of macro CALLMONITOR
240c			endif	 
240c cd 60 15			call free 
240f			.skippopfree: 
240f				 
240f			 
240f			endif 
240f			 
240f			if DEBUG_FORTH_DOT_KEY 
240f				DMARK "DP2" 
240f				CALLMONITOR 
240f			endif	 
240f			 
240f				; move pointer down 
240f			 
240f 2a eb f9			ld hl,(cli_data_sp) 
2412 2b				dec hl 
2413 2b				dec hl 
2414			; PARSEV5 
2414 2b				dec hl 
2415 22 eb f9			ld (cli_data_sp), hl 
2418			 
2418				if DEBUG_FORTH_STACK_GUARD 
2418 cd b4 72				call check_stacks 
241b					FORTH_CHK_DSP_UNDER 
241b e5				push hl 
241c d5				push de 
241d 2a eb f9			ld hl,(cli_data_sp) 
2420 11 25 f7			ld de, cli_data_stack 
2423 cd ed 0f			call cmp16 
2426 da c2 73			jp c, fault_dsp_under 
2429 d1				pop de 
242a e1				pop hl 
242b				endm 
# End of macro FORTH_CHK_DSP_UNDER
242b				endif 
242b			 
242b e1				pop hl 
242c			 
242c c9				ret 
242d			 
242d			getwordathl: 
242d				; hl points to an address 
242d				; load hl with the word at that address 
242d			 
242d d5				push de 
242e			 
242e 5e				ld e, (hl) 
242f 23				inc hl 
2430 56				ld d, (hl) 
2431 eb				ex de, hl 
2432			 
2432 d1				pop de 
2433 c9				ret 
2434			 
2434			 
2434			 
2434			 
2434			 
2434			; eof 
2434			 
# End of file forth_stackopsv5.asm
2434			endif 
2434			 
2434			loadwordinhl:	 
2434			 
2434 d5				push de 
2435			 
2435 5e				ld e, (hl) 
2436 23				inc hl 
2437 56				ld d, (hl) 
2438 eb				ex de,hl  
2439			 
2439 d1				pop de 
243a			 
243a c9				ret 
243b			 
243b			user_word_eol:  
243b				; hl contains the pointer to where to create a linked list item from the end 
243b				; of the user dict to continue on at the system word dict 
243b				 
243b				; poke the stub of the word list linked list to repoint to rom words 
243b			 
243b				; stub format 
243b				; db   word id 
243b				; dw    link to next word 
243b			        ; db char length of token 
243b				; db string + 0 term 
243b				; db exec code....  
243b			 
243b 3e 00			ld a, WORD_SYS_ROOT     ; root word 
243d 77				ld (hl), a		; word id 
243e 23				inc hl 
243f			 
243f 11 0a 26			ld de, sysdict 
2442 73				ld (hl), e		; next word link ie system dict 
2443 23				inc hl 
2444 72				ld (hl), d		; next word link ie system dict 
2445 23				inc hl	 
2446			 
2446			;	ld (hl), sysdict		; next word link ie system dict 
2446			;	inc hl 
2446			;	inc hl 
2446			 
2446			;	inc hl 
2446			;	inc hl 
2446			 
2446 3e 02			ld a, 2			; word length is 0 
2448 77				ld (hl), a	 
2449 23				inc hl 
244a			 
244a 3e 7e			ld a, '~'			; word length is 0 
244c 77				ld (hl), a	 
244d 23				inc hl 
244e 3e 00			ld a, 0			; save empty word 
2450 77				ld (hl), a 
2451			 
2451 c9				ret 
2452			 
2452				 
2452			 
2452			forthexec_cleanup: 
2452				FORTH_RSP_POP 
2452 cd cd 20			call macro_forth_rsp_pop 
2455				endm 
# End of macro FORTH_RSP_POP
2455 c9				ret 
2456			 
2456			forth_call_hl: 
2456				; taking hl 
2456 e5				push hl 
2457 c9				ret 
2458			 
2458			; this is called to reset Forth system but keep existing uwords etc 
2458			 
2458			forth_warmstart: 
2458				; setup stack over/under flow checks 
2458				if DEBUG_FORTH_STACK_GUARD 
2458 cd 9a 72				call chk_stk_init 
245b				endif 
245b			 
245b				; init stack pointers  - * these stacks go upwards *  
245b 21 a9 f9			ld hl, cli_ret_stack 
245e 22 ef f9			ld (cli_ret_sp), hl	 
2461				; set bottom of stack 
2461 3e 00			ld a,0 
2463 77				ld (hl),a 
2464 23				inc hl 
2465 77				ld (hl),a 
2466			 
2466 21 25 f7			ld hl, cli_data_stack 
2469 22 eb f9			ld (cli_data_sp), hl	 
246c				; set bottom of stack 
246c 3e 00			ld a,0 
246e 77				ld (hl),a 
246f 23				inc hl 
2470 77				ld (hl),a 
2471			 
2471 21 27 f9			ld hl, cli_loop_stack 
2474 22 ed f9			ld (cli_loop_sp), hl	 
2477				; set bottom of stack 
2477 3e 00			ld a,0 
2479 77				ld (hl),a 
247a 23				inc hl 
247b 77				ld (hl),a 
247c			 
247c				; init extent of current open file 
247c			 
247c 3e 00			ld a, 0 
247e 32 67 fa			ld (store_openext), a 
2481			 
2481 c9				ret 
2482			 
2482			 
2482			 
2482			; Cold Start - this is called to setup the whole Forth system 
2482			 
2482			forth_init: 
2482			 
2482				; setup stack over/under flow checks 
2482			 
2482			;	if DEBUG_FORTH_STACK_GUARD 
2482			;		call chk_stk_init 
2482			;	endif 
2482			 
2482				; enable auto display updates (slow.....) 
2482			 
2482 3e 01			ld a, 1 
2484 32 39 fa			ld (cli_autodisplay), a 
2487			 
2487				; if storage is in use disable long reads for now 
2487 3e 00			ld a, 0 
2489 32 72 fa			ld (store_longread), a 
248c			 
248c			 
248c				; show start up screen 
248c			 
248c cd 9b 0d			call clear_display 
248f			 
248f 3e 00			ld a,0 
2491 32 5b fa			ld (f_cursor_ptr), a 
2494			 
2494				; set start of word list in start of ram - for use when creating user words 
2494			 
2494 21 00 80			ld hl, baseram 
2497 22 bb f4			ld (os_last_new_uword), hl 
249a cd 3b 24			call user_word_eol 
249d				 
249d			;		call display_data_sp 
249d			;		call next_page_prompt 
249d			 
249d			 
249d			 
249d			 
249d c9				ret 
249e			 
249e .. 00		.bootforth: db " Forth Kernel Init ",0 
24b2			 
24b2			; TODO push to stack 
24b2			 
24b2			;  
24b2			 
24b2			if FORTH_PARSEV2 
24b2			 
24b2			 
24b2				include "forth_parserv2.asm" 
24b2			 
24b2			endif 
24b2			 
24b2			 
24b2			; parse cli version 1 
24b2			 
24b2			if FORTH_PARSEV1 
24b2			 
24b2			 
24b2			 
24b2			      include "forth_parserv1.asm" 
24b2			endif 
24b2				 
24b2			if FORTH_PARSEV3 
24b2			 
24b2			 
24b2			 
24b2			      include "forth_parserv3.asm" 
24b2				include "forth_wordsv3.asm" 
24b2			endif 
24b2			 
24b2			if FORTH_PARSEV4 
24b2			 
24b2			 
24b2			 
24b2			      include "forth_parserv4.asm" 
24b2				include "forth_wordsv4.asm" 
24b2			endif 
24b2			 
24b2			if FORTH_PARSEV5 
24b2			 
24b2			 
24b2			 
24b2			      include "forth_parserv5.asm" 
24b2			 
24b2			 
24b2			; A better parser without using malloc and string copies all over the place.  
24b2			; Exec in situ should be faster 
24b2			 
24b2			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
24b2			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
24b2			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
24b2			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
24b2			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
24b2			WORD_SYS_END: equ 0   ; Opcode for all user words 
24b2			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
24b2			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
24b2			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
24b2			 
24b2			; Core word preamble macro 
24b2			 
24b2			CWHEAD:   macro nxtword opcode lit len opflags 
24b2				db WORD_SYS_CORE+opcode             
24b2				; internal op code number 
24b2				dw nxtword            
24b2				; link to next dict word block 
24b2				db len + 1 
24b2				; literal length of dict word inc zero term 
24b2				db lit,0              
24b2				; literal dict word 
24b2			        ; TODO db opflags        
24b2				endm 
24b2			 
24b2			 
24b2			NEXTW: macro  
24b2				jp macro_next 
24b2				endm 
24b2			 
24b2			macro_next: 
24b2			if DEBUG_FORTH_PARSE_KEY 
24b2				DMARK "NXT" 
24b2				CALLMONITOR 
24b2			endif	 
24b2			;	inc hl  ; skip token null term  
24b2 ed 4b 3d fa		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
24b6 ed 5b 3b fa		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
24ba 2a bf f4			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
24bd			if DEBUG_FORTH_PARSE_KEY 
24bd				DMARK "}AA" 
24bd				CALLMONITOR 
24bd			endif	 
24bd c3 c0 25			jp execnext 
24c0				;jp exec1 
24c0			       
24c0			 
24c0			 
24c0			; Another go at the parser to compile  
24c0			 
24c0			 
24c0			; TODO rework parser to change all of the string words to byte tokens 
24c0			; TODO do a search for  
24c0			 
24c0			; TODO first run normal parser to zero term sections 
24c0			; TODO for each word do a token look up to get the op code 
24c0			; TODO need some means to flag to the exec that this is a byte code form    
24c0			 
24c0			 
24c0			forthcompile: 
24c0			 
24c0			; 
24c0			; line parse: 
24c0			;       parse raw input buffer 
24c0			;       tokenise the words 
24c0			;       malloc new copy (for looping etc) 
24c0			;       copy to malloc + current pc in line to start of string and add line term 
24c0			;       save on new rsp 
24c0			; 
24c0			 
24c0			; hl to point to the line to tokenise 
24c0			 
24c0			;	push hl 
24c0 22 bf f4			ld (os_tok_ptr), hl  ; save ptr to string 
24c3			 
24c3			;	ld a,0		; string term on input 
24c3			;	call strlent 
24c3			 
24c3			;	ld (os_tok_len), hl	 ; save string length 
24c3			 
24c3			;if DEBUG_FORTH_TOK 
24c3			;	ex de,hl		 
24c3			;endif 
24c3			 
24c3			;	pop hl 		; get back string pointer 
24c3			 
24c3			if DEBUG_FORTH_TOK 
24c3						DMARK "TOc" 
24c3				CALLMONITOR 
24c3			endif 
24c3 7e			.cptoken2:    ld a,(hl) 
24c4 23				inc hl 
24c5 fe 7f			cp FORTH_END_BUFFER 
24c7 28 29			jr z, .cptokendone2 
24c9 fe 00			cp 0 
24cb 28 25			jr z, .cptokendone2 
24cd fe 22			cp '"' 
24cf 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
24d1 fe 20			cp ' ' 
24d3 20 ee			jr nz,  .cptoken2 
24d5			 
24d5			; TODO consume comments held between ( and ) 
24d5			 
24d5				; we have a space so change to zero term for dict match later 
24d5 2b				dec hl 
24d6 3e 00			ld a,0 
24d8 77				ld (hl), a 
24d9 23				inc hl 
24da 18 e7			jr .cptoken2 
24dc				 
24dc			 
24dc			.cptokenstr2: 
24dc				; skip all white space until either eol (because forgot to term) or end double quote 
24dc			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
24dc				;inc hl ; skip current double quote 
24dc 7e				ld a,(hl) 
24dd 23				inc hl 
24de fe 22			cp '"' 
24e0 28 e1			jr z, .cptoken2 
24e2 fe 7f			cp FORTH_END_BUFFER 
24e4 28 0c			jr z, .cptokendone2 
24e6 fe 00			cp 0 
24e8 28 08			jr z, .cptokendone2 
24ea fe 20			cp ' ' 
24ec 28 02			jr z, .cptmp2 
24ee 18 ec			jr .cptokenstr2 
24f0			 
24f0			.cptmp2:	; we have a space so change to zero term for dict match later 
24f0				;dec hl 
24f0				;ld a,"-"	; TODO remove this when working 
24f0				;ld (hl), a 
24f0				;inc hl 
24f0 18 ea			jr .cptokenstr2 
24f2			 
24f2			.cptokendone2: 
24f2				;inc hl 
24f2 3e 7f			ld a, FORTH_END_BUFFER 
24f4 77				ld (hl),a 
24f5 23				inc hl 
24f6 3e 21			ld a, '!' 
24f8 77				ld (hl),a 
24f9			 
24f9 2a bf f4			ld hl,(os_tok_ptr) 
24fc			         
24fc			if DEBUG_FORTH_TOK 
24fc						DMARK "Tc1" 
24fc				CALLMONITOR 
24fc			endif 
24fc			 
24fc				; push exec string to top of return stack 
24fc				FORTH_RSP_NEXT 
24fc cd ac 20			call macro_forth_rsp_next 
24ff				endm 
# End of macro FORTH_RSP_NEXT
24ff c9				ret 
2500			 
2500			; Another go at the parser need to simplify the process 
2500			 
2500			forthparse: 
2500			 
2500			; 
2500			; line parse: 
2500			;       parse raw input buffer 
2500			;       tokenise the words 
2500			;       malloc new copy (for looping etc) 
2500			;       copy to malloc + current pc in line to start of string and add line term 
2500			;       save on new rsp 
2500			; 
2500			 
2500			; hl to point to the line to tokenise 
2500			 
2500			;	push hl 
2500 22 bf f4			ld (os_tok_ptr), hl  ; save ptr to string 
2503			 
2503			;	ld a,0		; string term on input 
2503			;	call strlent 
2503			 
2503			;	ld (os_tok_len), hl	 ; save string length 
2503			 
2503			;if DEBUG_FORTH_TOK 
2503			;	ex de,hl		 
2503			;endif 
2503			 
2503			;	pop hl 		; get back string pointer 
2503			 
2503			if DEBUG_FORTH_TOK 
2503						DMARK "TOK" 
2503				CALLMONITOR 
2503			endif 
2503 7e			.ptoken2:    ld a,(hl) 
2504 23				inc hl 
2505 fe 7f			cp FORTH_END_BUFFER 
2507 28 29			jr z, .ptokendone2 
2509 fe 00			cp 0 
250b 28 25			jr z, .ptokendone2 
250d fe 22			cp '"' 
250f 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2511 fe 20			cp ' ' 
2513 20 ee			jr nz,  .ptoken2 
2515			 
2515			; TODO consume comments held between ( and ) 
2515			 
2515				; we have a space so change to zero term for dict match later 
2515 2b				dec hl 
2516 3e 00			ld a,0 
2518 77				ld (hl), a 
2519 23				inc hl 
251a 18 e7			jr .ptoken2 
251c				 
251c			 
251c			.ptokenstr2: 
251c				; skip all white space until either eol (because forgot to term) or end double quote 
251c			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
251c				;inc hl ; skip current double quote 
251c 7e				ld a,(hl) 
251d 23				inc hl 
251e fe 22			cp '"' 
2520 28 e1			jr z, .ptoken2 
2522 fe 7f			cp FORTH_END_BUFFER 
2524 28 0c			jr z, .ptokendone2 
2526 fe 00			cp 0 
2528 28 08			jr z, .ptokendone2 
252a fe 20			cp ' ' 
252c 28 02			jr z, .ptmp2 
252e 18 ec			jr .ptokenstr2 
2530			 
2530			.ptmp2:	; we have a space so change to zero term for dict match later 
2530				;dec hl 
2530				;ld a,"-"	; TODO remove this when working 
2530				;ld (hl), a 
2530				;inc hl 
2530 18 ea			jr .ptokenstr2 
2532			 
2532			.ptokendone2: 
2532				;inc hl 
2532 3e 7f			ld a, FORTH_END_BUFFER 
2534 77				ld (hl),a 
2535 23				inc hl 
2536 3e 21			ld a, '!' 
2538 77				ld (hl),a 
2539			 
2539 2a bf f4			ld hl,(os_tok_ptr) 
253c			         
253c			if DEBUG_FORTH_TOK 
253c						DMARK "TK1" 
253c				CALLMONITOR 
253c			endif 
253c			 
253c				; push exec string to top of return stack 
253c				FORTH_RSP_NEXT 
253c cd ac 20			call macro_forth_rsp_next 
253f				endm 
# End of macro FORTH_RSP_NEXT
253f c9				ret 
2540			 
2540			; 
2540			;	; malloc size + buffer pointer + if is loop flag 
2540			;	ld hl,(os_tok_len) 		 ; get string length 
2540			; 
2540			;	ld a,l 
2540			; 
2540			;	cp 0			; we dont want to use a null string 
2540			;	ret z 
2540			; 
2540			;;	add 3    ; prefix malloc with buffer for current word ptr 
2540			; 
2540			;	add 5     ; TODO when certain not over writing memory remove 
2540			; 
2540			;		 
2540			; 
2540			;if DEBUG_FORTH_TOK 
2540			;			DMARK "TKE" 
2540			;	CALLMONITOR 
2540			;endif 
2540			; 
2540			;	ld l,a 
2540			;	ld h,0 
2540			;;	push hl   ; save required space for the copy later 
2540			;	call malloc 
2540			;if DEBUG_FORTH_TOK 
2540			;			DMARK "TKM" 
2540			;	CALLMONITOR 
2540			;endif 
2540			;	if DEBUG_FORTH_MALLOC_GUARD 
2540			;		push af 
2540			;		call ishlzero 
2540			;;		ld a, l 
2540			;;		add h 
2540			;;		cp 0 
2540			;		pop af 
2540			;		 
2540			;		call z,malloc_error 
2540			;	endif 
2540			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2540			; 
2540			; 
2540			;if DEBUG_FORTH_TOK 
2540			;			DMARK "TKR" 
2540			;	CALLMONITOR 
2540			;endif 
2540			; 
2540			;	FORTH_RSP_NEXT 
2540			; 
2540			;	;inc hl	 ; go past current buffer pointer 
2540			;	;inc hl 
2540			;	;inc hl   ; and past if loop flag 
2540			;		; TODO Need to set flag  
2540			; 
2540			;	 
2540			;	 
2540			;	ex de,hl	; malloc is dest 
2540			;	ld hl, (os_tok_len) 
2540			;;	pop bc 
2540			;	ld c, l                
2540			;	ld b,0 
2540			;	ld hl, (os_tok_ptr) 
2540			; 
2540			;if DEBUG_FORTH_TOK 
2540			;			DMARK "TKT" 
2540			;	CALLMONITOR 
2540			;endif 
2540			; 
2540			;	; do str cpy 
2540			; 
2540			;	ldir      ; copy byte in hl to de 
2540			; 
2540			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2540			; 
2540			;if DEBUG_FORTH_TOK 
2540			; 
2540			;			DMARK "TKY" 
2540			;	CALLMONITOR 
2540			;endif 
2540			;	;ld a,0 
2540			;	;ld a,FORTH_END_BUFFER 
2540			;	ex de, hl 
2540			;	;dec hl			 ; go back over the space delim at the end of word 
2540			;	;ld (hl),a 
2540			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2540			;	ld a,FORTH_END_BUFFER 
2540			;	ld (hl),a 
2540			;	inc hl 
2540			;	ld a,FORTH_END_BUFFER 
2540			;	ld (hl),a 
2540			; 
2540			;	; init the malloc area data 
2540			;	; set pc for in current area 
2540			;	;ld hl, (os_tok_malloc) 
2540			;	;inc hl 
2540			;	;inc hl 
2540			;	;inc hl 
2540			;	;ex de,hl 
2540			;	;ld hl, (os_tok_malloc) 
2540			;	;ld (hl),e 
2540			;	;inc hl 
2540			;	;ld (hl),d 
2540			; 
2540			; 
2540			;	ld hl,(os_tok_malloc) 
2540			;if DEBUG_FORTH_PARSE_KEY 
2540			;			DMARK "TKU" 
2540			;	CALLMONITOR 
2540			;endif 
2540			; 
2540			;	ret 
2540			 
2540			forthexec: 
2540			 
2540			; line exec: 
2540			; forth parser 
2540			 
2540			; 
2540			;       get current exec line on rsp 
2540			 
2540				FORTH_RSP_TOS 
2540 cd c3 20			call macro_forth_rsp_tos 
2543				endm 
# End of macro FORTH_RSP_TOS
2543			 
2543			;       restore current pc - hl points to malloc of data 
2543			 
2543				;ld e, (hl) 
2543				;inc hl 
2543				;ld d, (hl) 
2543				;ex de,hl 
2543			 
2543			 
2543			exec1: 
2543 22 bf f4			ld (os_tok_ptr), hl 
2546			 
2546				; copy our PC to working vars  
2546 22 3d fa			ld (cli_ptr), hl 
2549 22 3b fa			ld (cli_origptr), hl 
254c			 
254c 7e				ld a,(hl) 
254d fe 7f			cp FORTH_END_BUFFER 
254f c8				ret z 
2550			 
2550				; skip any nulls 
2550			 
2550 fe 00			cp 0 
2552 20 03			jr nz, .execword 
2554 23				inc hl 
2555 18 ec			jr exec1 
2557			 
2557			 
2557			.execword: 
2557			 
2557			 
2557			 
2557			if DEBUG_FORTH_PARSE_KEY 
2557						DMARK "KYQ" 
2557				CALLMONITOR 
2557			endif 
2557			;       while at start of word: 
2557			; get start of dict (in user area first) 
2557			 
2557 21 00 80		ld hl, baseram 
255a			;ld hl, sysdict 
255a 22 3f fa		ld (cli_nextword),hl 
255d			;           match word at pc 
255d			;           exec word 
255d			;           or push to dsp 
255d			;           forward to next token 
255d			;           if line term pop rsp and exit 
255d			;        
255d			 
255d			if DEBUG_FORTH_PARSE_KEY 
255d						DMARK "KYq" 
255d				CALLMONITOR 
255d			endif 
255d			 
255d			; 
255d			; word comp 
255d			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
255d			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
255d			;    move to start of word  
255d			;    compare word to cli_token 
255d			 
255d			.execpnword:	; HL at start of a word in the dictionary to check 
255d			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
255d			;	ld (cli_ptr), hl 
255d			 
255d 2a 3f fa			ld hl,(cli_nextword) 
2560			 
2560 cd 03 26			call forth_tok_next 
2563			; tok next start here 
2563			;	; TODO skip compiled symbol for now 
2563			;	inc hl 
2563			; 
2563			;	; save pointer to next word 
2563			; 
2563			;	; hl now points to the address of the next word pointer  
2563			;	ld e, (hl) 
2563			;	inc hl 
2563			;	ld d, (hl) 
2563			;	inc l 
2563			; 
2563			;	ex de,hl 
2563			;if DEBUG_FORTH_PARSE_NEXTWORD 
2563			;	push bc 
2563			;	ld bc, (cli_nextword) 
2563			;			DMARK "NXW" 
2563			;	CALLMONITOR 
2563			;	pop bc 
2563			;endif 
2563			; tok next end here 
2563 22 3f fa			ld (cli_nextword), hl     ; save for next check if no match on this word 
2566 eb				ex de, hl 
2567			 
2567			 
2567				; save the pointer of the current token - 1 to check against 
2567				 
2567 22 43 fa			ld (cli_token), hl   
256a				; TODO maybe remove below save if no debug 
256a				; save token string ptr for any debug later 
256a 23				inc hl  
256b 22 45 fa			ld (cli_origtoken), hl 
256e 2b				dec hl 
256f				; save pointer to the start of the next dictionay word 
256f 7e				ld a,(hl)   ; get string length 
2570 47				ld b,a 
2571			.execpnwordinc:  
2571 23				inc hl 
2572 10 fd			djnz .execpnwordinc 
2574 22 41 fa			ld (cli_execword), hl      ; save start of this words code 
2577			 
2577				; now check the word token against the string being parsed 
2577			 
2577 2a 43 fa			ld hl,(cli_token) 
257a 23				inc hl     ; skip string length (use zero term instead to end) 
257b 22 43 fa			ld (cli_token), hl 
257e			 
257e			if DEBUG_FORTH_PARSE_KEY 
257e						DMARK "KY2" 
257e			endif 
257e			if DEBUG_FORTH_PARSE_EXEC 
257e				; see if disabled 
257e			 
257e			;	ld a, (os_view_disable) 
257e			;	cp '*' 
257e				ld a, (debug_vector) 
257e				cp $c9   ; RET  
257e				jr z, .skip 
257e			 
257e				push hl 
257e				push hl 
257e				call clear_display 
257e				ld de, .compword 
257e				ld a, display_row_1 
257e				call str_at_display 
257e				pop de 
257e				ld a, display_row_2 
257e				call str_at_display 
257e				ld hl,(cli_ptr) 
257e				ld a,(hl) 
257e			        ld hl, os_word_scratch 
257e				ld (hl),a 
257e				ld a,0 
257e				inc hl 
257e				ld (hl),a 	 
257e				ld de, os_word_scratch 
257e				ld a, display_row_2+10 
257e				call str_at_display 
257e				call update_display 
257e				ld a, 100 
257e				call aDelayInMS 
257e				if DEBUG_FORTH_PARSE_EXEC_SLOW 
257e				call delay250ms 
257e				endif 
257e				pop hl 
257e			.skip:  
257e			endif	 
257e			.execpnchar:    ; compare char between token and string to parse 
257e			 
257e			if DEBUG_FORTH_PARSE_KEY 
257e						DMARK "Ky3" 
257e			endif 
257e			if DEBUG_FORTH_PARSE_EXEC 
257e				; see if disabled 
257e			 
257e			;	ld a, (os_view_disable) 
257e			;	cp '*' 
257e				ld a, (debug_vector) 
257e				cp $C9  ; RET 
257e				jr z, .skip2 
257e			 
257e			;	call clear_display 
257e			ld hl,(cli_token) 
257e			ld a,(hl) 
257e			ld (os_word_scratch),a 
257e				ld hl,(cli_ptr) 
257e			ld a,(hl) 
257e				ld (os_word_scratch+1),a 
257e				ld a,0 
257e				ld (os_word_scratch+2),a 
257e				ld de,os_word_scratch 
257e				ld a,display_row_4 
257e				call str_at_display 
257e				call update_display 
257e			.skip2:  
257e			endif 
257e 2a 43 fa			ld hl,(cli_token) 
2581 7e				ld a, (hl)	 ; char in word token 
2582 23				inc hl 		; move to next char 
2583 22 43 fa			ld (cli_token), hl ; and save it 
2586 47				ld b,a 
2587			 
2587 2a 3d fa			ld hl,(cli_ptr) ;	get the char from the string to parse 
258a 7e				ld a,(hl) 
258b 23				inc hl 
258c 22 3d fa			ld (cli_ptr), hl		; move to next char 
258f cd 24 14			call toUpper 		; make sure the input string matches case 
2592			 
2592			if DEBUG_FORTH_PARSE 
2592			endif 
2592			 
2592				; input stream end of token is a space so get rid of it 
2592			 
2592			;	cp ' ' 
2592			;	jr nz, .pnskipspace 
2592			; 
2592			;	ld a, 0		; make same term as word token term 
2592			; 
2592			;.pnskipspace: 
2592			 
2592			if DEBUG_FORTH_PARSE_KEY 
2592						DMARK "KY7" 
2592			endif 
2592 b8				cp b 
2593 c2 a9 25			jp nz, .execpnskipword	 ; no match so move to next word 
2596				 
2596			;    if same 
2596			;       scan for string terms 0 for token and 32 for input 
2596			 
2596				 
2596			if DEBUG_FORTH_PARSE_KEY 
2596						DMARK "KY8" 
2596			endif 
2596			 
2596 80				add b			 
2597 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2599							; TODO need to make sure last word in zero term string is accounted for 
2599 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
259b			 
259b			 
259b				; at end of both strings so both are exact match 
259b			 
259b			;       skip ptr for next word 
259b			 
259b 2a 3d fa			ld hl,(cli_ptr) 	; at input string term 
259e 23				inc hl			 ; at next char 
259f 22 3d fa			ld (cli_ptr), hl     ; save for next round of the parser 
25a2 22 3b fa			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
25a5				 
25a5				 
25a5			if DEBUG_FORTH_PARSE_KEY 
25a5						DMARK "KY3" 
25a5			endif 
25a5			 
25a5			 
25a5			 
25a5			;       exec code block 
25a5			if DEBUG_FORTH_JP 
25a5				call clear_display 
25a5				call update_display 
25a5				call delay1s 
25a5				ld hl, (cli_execword)     ; save for next check if no match on this word 
25a5				ld a,h 
25a5				ld hl, os_word_scratch 
25a5				call hexout 
25a5				ld hl, (cli_execword)     ; save for next check if no match on this word 
25a5				ld a,l 
25a5				ld hl, os_word_scratch+2 
25a5				call hexout 
25a5				ld hl, os_word_scratch+4 
25a5				ld a,0 
25a5				ld (hl),a 
25a5				ld de,os_word_scratch 
25a5				call str_at_display 
25a5					ld a, display_row_2 
25a5					call str_at_display 
25a5				ld de, (cli_origtoken) 
25a5				ld a, display_row_1+10 
25a5					call str_at_display 
25a5			 
25a5				ld a,display_row_1 
25a5				ld de, .foundword 
25a5				ld a, display_row_3 
25a5				call str_at_display 
25a5				call update_display 
25a5				call delay1s 
25a5				call delay1s 
25a5				call delay1s 
25a5			endif 
25a5			 
25a5			if DEBUG_FORTH_PARSE_KEY 
25a5						DMARK "KYj" 
25a5			endif 
25a5				; TODO save the word pointer in this exec 
25a5			 
25a5 2a 41 fa			ld hl,(cli_execword) 
25a8 e9				jp (hl) 
25a9			 
25a9			 
25a9			;    if not same 
25a9			;	scan for zero term 
25a9			;	get ptr for next word 
25a9			;	goto word comp 
25a9			 
25a9			.execpnskipword:	; get pointer to next word 
25a9 2a 3f fa			ld hl,(cli_nextword) 
25ac			 
25ac 7e				ld a,(hl) 
25ad fe 00			cp WORD_SYS_END 
25af			;	cp 0 
25af 28 09			jr z, .execendofdict			 ; at end of words 
25b1			 
25b1			if DEBUG_FORTH_PARSE_KEY 
25b1						DMARK "KY4" 
25b1			endif 
25b1			if DEBUG_FORTH_PARSE_EXEC 
25b1			 
25b1				; see if disabled 
25b1			 
25b1			;	ld a, (os_view_disable) 
25b1			;	cp '*' 
25b1				ld a,(debug_vector) 
25b1				cp $c9   ; RET 
25b1				jr z, .noskip 
25b1			 
25b1			 
25b1				ld de, .nowordfound 
25b1				ld a, display_row_3 
25b1				call str_at_display 
25b1				call update_display 
25b1				ld a, 100 
25b1				call aDelayInMS 
25b1				 
25b1				if DEBUG_FORTH_PARSE_EXEC_SLOW 
25b1					call delay250ms 
25b1				endif 
25b1			.noskip:  
25b1			 
25b1			endif	 
25b1			 
25b1 2a 3b fa			ld hl,(cli_origptr) 
25b4 22 3d fa			ld (cli_ptr),hl 
25b7			 
25b7			if DEBUG_FORTH_PARSE_KEY 
25b7						DMARK "KY5" 
25b7			endif 
25b7 c3 5d 25			jp .execpnword			; else go to next word 
25ba			 
25ba			.execendofdict:  
25ba			 
25ba			if DEBUG_FORTH_PARSE_KEY 
25ba						DMARK "KYe" 
25ba			endif 
25ba			if DEBUG_FORTH_PARSE_EXEC 
25ba				; see if disabled 
25ba			 
25ba			;	ld a, (os_view_disable) 
25ba			;	cp '*' 
25ba				ld a,(debug_vector) 
25ba				cp $c9   ; ret 
25ba				jr z, .ispskip 
25ba			 
25ba				call clear_display 
25ba				call update_display 
25ba				call delay1s 
25ba				ld de, (cli_origptr) 
25ba				ld a, display_row_1 
25ba				call str_at_display 
25ba				 
25ba				ld de, .enddict 
25ba				ld a, display_row_3 
25ba				call str_at_display 
25ba				call update_display 
25ba				ld a, 100 
25ba				call aDelayInMS 
25ba				if DEBUG_FORTH_PARSE_EXEC_SLOW 
25ba				call delay1s 
25ba				call delay1s 
25ba				call delay1s 
25ba				endif 
25ba			.ispskip:  
25ba				 
25ba			endif	 
25ba			 
25ba			 
25ba			 
25ba				; if the word is not a keyword then must be a literal so push it to stack 
25ba			 
25ba			; push token to stack to end of word 
25ba			 
25ba				STACKFRAME ON $1efe $2f9f 
25ba				if DEBUG_STACK_IMB 
25ba					if ON 
25ba						exx 
25ba						ld de, $1efe 
25ba						ld a, d 
25ba						ld hl, curframe 
25ba						call hexout 
25ba						ld a, e 
25ba						ld hl, curframe+2 
25ba						call hexout 
25ba						ld hl, $1efe 
25ba						push hl 
25ba						ld hl, $2f9f 
25ba						push hl 
25ba						exx 
25ba					endif 
25ba				endif 
25ba			endm 
# End of macro STACKFRAME
25ba			 
25ba 2a bf f4		ld hl,(os_tok_ptr) 
25bd cd 6e 22		call forth_apush 
25c0			 
25c0				STACKFRAMECHK ON $1efe $2f9f 
25c0				if DEBUG_STACK_IMB 
25c0					if ON 
25c0						exx 
25c0						ld hl, $2f9f 
25c0						pop de   ; $2f9f 
25c0						call cmp16 
25c0						jr nz, .spnosame 
25c0						ld hl, $1efe 
25c0						pop de   ; $1efe 
25c0						call cmp16 
25c0						jr z, .spfrsame 
25c0						.spnosame: call showsperror 
25c0						.spfrsame: nop 
25c0						exx 
25c0					endif 
25c0				endif 
25c0			endm 
# End of macro STACKFRAMECHK
25c0			 
25c0			execnext: 
25c0			 
25c0			if DEBUG_FORTH_PARSE_KEY 
25c0						DMARK "KY>" 
25c0			endif 
25c0			; move past token to next word 
25c0			 
25c0 2a bf f4		ld hl, (os_tok_ptr) 
25c3 3e 00		ld a, 0 
25c5 01 ff 00		ld bc, 255     ; input buffer size 
25c8 ed b1		cpir 
25ca			 
25ca			if DEBUG_FORTH_PARSE_KEY 
25ca						DMARK "KY!" 
25ca				CALLMONITOR 
25ca			endif	 
25ca			; TODO this might place hl on the null, so will need to forward on??? 
25ca			;inc hl   ; see if this gets onto the next item 
25ca			 
25ca			 
25ca			; TODO pass a pointer to the buffer to push 
25ca			; TODO call function to push 
25ca			 
25ca			; look for end of input 
25ca			 
25ca			;inc hl 
25ca			;ld a,(hl) 
25ca			;cp FORTH_END_BUFFER 
25ca			;ret z 
25ca			 
25ca			 
25ca c3 43 25		jp exec1 
25cd			 
25cd			 
25cd			 
25cd			 
25cd			 
25cd			 
25cd			 
25cd			 
25cd			 
25cd			findnexttok: 
25cd			 
25cd				; hl is pointer to move 
25cd				; de is the token to locate 
25cd			 
25cd					if DEBUG_FORTH 
25cd						DMARK "NTK" 
25cd						CALLMONITOR 
25cd					endif 
25cd d5				push de 
25ce			 
25ce			.fnt1:	 
25ce				; find first char of token to locate 
25ce			 
25ce 1a				ld a, (de) 
25cf 4f				ld c,a 
25d0 7e				ld a,(hl) 
25d1 cd 24 14			call toUpper 
25d4					if DEBUG_FORTH 
25d4						DMARK "NT1" 
25d4						CALLMONITOR 
25d4					endif 
25d4 b9				cp c 
25d5			 
25d5 28 03			jr z, .fnt2cmpmorefirst	 
25d7			 
25d7				; first char not found move to next char 
25d7			 
25d7 23				inc hl 
25d8 18 f4			jr .fnt1 
25da			 
25da			.fnt2cmpmorefirst:	 
25da				; first char of token found.  
25da			 
25da e5				push hl     ; save start of token just in case it is the right one 
25db d9				exx 
25dc e1				pop hl        ; save it to hl' 
25dd d9				exx 
25de			 
25de			 
25de			.fnt2cmpmore:	 
25de				; compare the rest 
25de				 
25de 23				inc hl 
25df 13				inc de 
25e0				 
25e0 1a				ld a, (de) 
25e1 4f				ld c,a 
25e2 7e				ld a,(hl) 
25e3 cd 24 14			call toUpper 
25e6			 
25e6					if DEBUG_FORTH 
25e6						DMARK "NT2" 
25e6						CALLMONITOR 
25e6					endif 
25e6				; c has the token to find char 
25e6				; a has the mem to scan char 
25e6			 
25e6 b9				cp c 
25e7 28 04			jr z,.fntmatch1 
25e9			 
25e9				; they are not the same 
25e9			 
25e9					if DEBUG_FORTH 
25e9						DMARK "NT3" 
25e9						CALLMONITOR 
25e9					endif 
25e9 d1				pop de	; reset de token to look for 
25ea d5				push de 
25eb 18 e1			jr .fnt1 
25ed				 
25ed			.fntmatch1: 
25ed			 
25ed				; is the same char a null which means we might have a full hit? 
25ed					if DEBUG_FORTH 
25ed						DMARK "NT4" 
25ed						CALLMONITOR 
25ed					endif 
25ed			 
25ed fe 00			cp 0 
25ef 28 0b			jr z, .fntmatchyes 
25f1			 
25f1				; are we at the end of the token to find? 
25f1			 
25f1					if DEBUG_FORTH 
25f1						DMARK "NT5" 
25f1						CALLMONITOR 
25f1					endif 
25f1 3e 00			ld a, 0 
25f3 b9				cp c 
25f4			 
25f4 c2 de 25			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
25f7			 
25f7					if DEBUG_FORTH 
25f7						DMARK "NT6" 
25f7						CALLMONITOR 
25f7					endif 
25f7				; token to find is exhusted but no match to stream 
25f7			 
25f7				; restore tok pointer and continue on 
25f7 d1				pop de 
25f8 d5				push de 
25f9 c3 ce 25			jp .fnt1 
25fc			 
25fc			 
25fc			.fntmatchyes: 
25fc			 
25fc				; hl now contains the end of the found token 
25fc			 
25fc				; get rid of saved token pointer to find 
25fc			 
25fc d1				pop de 
25fd			 
25fd					if DEBUG_FORTH 
25fd						DMARK "NT9" 
25fd						CALLMONITOR 
25fd					endif 
25fd			 
25fd				; hl will be on the null term so forward on 
25fd			 
25fd				; get back the saved start of the token 
25fd			 
25fd d9				exx 
25fe e5				push hl     ; save start of token just in case it is the right one 
25ff d9				exx 
2600 e1				pop hl        ; save it to hl 
2601			 
2601 c9				ret 
2602			 
2602			 
2602			; LIST needs to find a specific token   
2602			; FORGET needs to find a spefici token 
2602			 
2602			; SAVE needs to find all tokens by flag 
2602			; WORDS just needs to scan through all  by flag 
2602			; UWORDS needs to scan through all by flag 
2602			 
2602			 
2602			; given hl as pointer to start of dict look up string 
2602			; return hl as pointer to start of word block 
2602			; or 0 if not found 
2602			 
2602			forth_find_tok: 
2602 c9				ret 
2603			 
2603			; given hl as pointer to dict structure 
2603			; move to the next dict block structure 
2603			 
2603			forth_tok_next: 
2603				; hl now points to the address of the next word pointer  
2603				; TODO skip compiled symbol for now 
2603			;	push de 
2603 23				inc hl 
2604 5e				ld e, (hl) 
2605 23				inc hl 
2606 56				ld d, (hl) 
2607 23				inc hl 
2608			 
2608 eb				ex de,hl 
2609			if DEBUG_FORTH_PARSE_NEXTWORD 
2609				push bc 
2609				ld bc, (cli_nextword) 
2609						DMARK "NXW" 
2609				CALLMONITOR 
2609				pop bc 
2609			endif 
2609			;	pop de	 
2609 c9				ret 
260a			 
260a			 
260a			 
260a			; eof 
# End of file forth_parserv5.asm
260a				include "forth_wordsv4.asm" 
260a			 
260a			; the core word dictionary v4 
260a			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
260a			 
260a			; this is a linked list for each of the system words used 
260a			; user defined words will follow the same format but will be in ram 
260a			 
260a			 
260a			; 
260a			; 
260a			; define linked list: 
260a			; 
260a			; 1. compiled byte op code 
260a			; 2. len of text word 
260a			; 3. text word 
260a			; 4. ptr to next dictionary word 
260a			; 5. asm, calls etc for the word 
260a			; 
260a			;  if 1 == 0 then last word in dict  
260a			;   
260a			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
260a			;  
260a			;  
260a			; create basic standard set of words 
260a			; 
260a			;  
260a			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
260a			; 2DUP 2DROP 2SWAP  
260a			; @ C@ - get byte  
260a			; ! C! - store byte 
260a			; 0< true if less than zero 
260a			; 0= true if zero 
260a			; < >  
260a			; = true if same 
260a			; variables 
260a			 
260a			 
260a			; Hardware specific words I may need 
260a			; 
260a			; IN OUT  
260a			; calls to key util functions 
260a			; calls to hardward abstraction stuff 
260a			; easy control of frame buffers and lcd i/o 
260a			; keyboard  
260a			 
260a			 
260a			;DICT: macro 
260a			; op_code, len, word, next 
260a			;    word: 
260a			;    db op_code 
260a			;    ds word zero term 
260a			;    dw next 
260a			;    endm 
260a			 
260a			 
260a			 
260a			 
260a			; op code 1 is a flag for user define words which are to be handled differently 
260a			 
260a			 
260a			; 
260a			; 
260a			;    TODO on entry to a word this should be the expected environment 
260a			;    hl - tos value if number then held, if string this is the ptr 
260a			;    de -  
260a			 
260a			 
260a			; opcode ranges 
260a			; 0 - end of word dict 
260a			; 255 - user define words 
260a			 
260a			sysdict: 
260a			include "forth_opcodes.asm" 
260a			; op codes for forth keywords 
260a			; free to use code 0  
260a				OPCODE_HEAP: equ  1 
260a				OPCODE_EXEC: equ 2 
260a				OPCODE_DUP: equ 3 
260a				OPCODE_SWAP: equ 4 
260a				OPCODE_COLN: equ 5 
260a				OPCODE_SCOLN: equ 6 
260a				OPCODE_DROP: equ 7 
260a				OPCODE_DUP2: equ 8 
260a				OPCODE_DROP2: equ 9 
260a				OPCODE_SWAP2: equ 10 
260a				OPCODE_AT: equ 11 
260a				OPCODE_CAT: equ 12 
260a				OPCODE_BANG: equ 13 
260a				OPCODE_CBANG: equ 14 
260a				OPCODE_SCALL: equ 15 
260a				OPCODE_DEPTH: equ 16 
260a				OPCODE_OVER: equ 17 
260a				OPCODE_PAUSE: equ 18 
260a				OPCODE_PAUSES: equ 19 
260a				OPCODE_ROT: equ 20 
260a			;free to reuse	OPCODE_WORDS: equ 21 
260a			        OPCODE_NOT: equ 21 
260a				OPCODE_UWORDS: equ 22 
260a				OPCODE_BP: equ 23 
260a				OPCODE_MONITOR: equ 24  
260a				OPCODE_MALLOC: equ 25 
260a				OPCODE_FREE: equ 26 
260a				OPCODE_LIST: equ 27 
260a				OPCODE_FORGET: equ 28 
260a				OPCODE_NOP: equ 29 
260a				OPCODE_COMO: equ 30 
260a				OPCODE_COMC: equ 31 
260a			;free to reuse	OPCODE_ENDCORE: equ 32 
260a				OPCODE_AFTERSOUND: equ 33 
260a				OPCODE_GP2: equ 34 
260a				OPCODE_GP3: equ 35 
260a				OPCODE_GP4: equ 36 
260a				OPCODE_SIN: equ 37 
260a				OPCODE_SOUT: equ 38 
260a				OPCODE_SPIO: equ 39 
260a				OPCODE_SPICEH: equ 40 
260a				OPCODE_SPIOb: equ 41 
260a				OPCODE_SPII: equ 42 
260a				OPCODE_SESEL: equ 43 
260a				OPCODE_CARTDEV: equ 44 
260a			; free to reuse	OPCODE_ENDDEVICE: equ 45 
260a				OPCODE_FB: equ 46 
260a				OPCODE_EMIT: equ 47 
260a				OPCODE_DOTH: equ 48 
260a				OPCODE_DOTF: equ 49 
260a				OPCODE_DOT: equ 50 
260a				OPCODE_CLS: equ 51 
260a				OPCODE_DRAW: equ 52 
260a				OPCODE_DUMP: equ 53 
260a				OPCODE_CDUMP: equ 54 
260a				OPCODE_DAT: equ 55 
260a				OPCODE_HOME: equ 56 
260a				OPCODE_SPACE: equ 57 
260a				OPCODE_SPACES: equ 58 
260a				OPCODE_SCROLL: equ 59 
260a				OPCODE_ATQ: equ 60 
260a				OPCODE_AUTODSP: equ 61 
260a				OPCODE_MENU: equ 62 
260a			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
260a				OPCODE_THEN: equ 64 
260a				OPCODE_ELSE: equ 65 
260a				OPCODE_DO: equ 66 
260a				OPCODE_LOOP: equ 67 
260a				OPCODE_I: equ 68 
260a				OPCODE_DLOOP: equ 69  
260a				OPCODE_REPEAT: equ 70  
260a				OPCODE_UNTIL: equ 71 
260a				OPCODE_ENDFLOW: equ 72 
260a				OPCODE_WAITK: equ 73 
260a				OPCODE_ACCEPT: equ 74 
260a				OPCODE_EDIT: equ 75 
260a			;free to reuse	OPCODE_ENDKEY: equ 76 
260a				OPCODE_LZERO: equ 77 
260a				OPCODE_TZERO: equ 78 
260a				OPCODE_LESS: equ 79 
260a				OPCODE_GT: equ 80 
260a				OPCODE_EQUAL: equ 81  
260a			;free to reuse	OPCODE_ENDLOGIC: equ 82 
260a				OPCODE_NEG: equ 83 
260a				OPCODE_DIV: equ 84 
260a				OPCODE_MUL: equ 85 
260a				OPCODE_MIN: equ 86 
260a				OPCODE_MAX: equ 87 
260a				OPCODE_RND16: equ 88 
260a				OPCODE_RND8: equ 89 
260a				OPCODE_RND: equ 90 
260a			;free to reuse	OPCODE_ENDMATHS: equ 91  
260a				OPCODE_BYNAME: equ 92 
260a				OPCODE_DIR: equ 93 
260a				OPCODE_SAVE: equ 94 
260a				OPCODE_LOAD: equ 95 
260a				OPCODE_BSAVE: equ 96 
260a				OPCODE_BLOAD: equ 97 
260a				OPCODE_SEO: equ 98  
260a				OPCODE_SEI: equ 99 
260a				OPCODE_SFREE: equ 100 
260a				OPCODE_SIZE: equ 101 
260a				OPCODE_CREATE: equ 102 
260a				OPCODE_APPEND: equ 103 
260a				OPCODE_SDEL: equ 104 
260a				OPCODE_OPEN: equ 105 
260a				OPCODE_READ: equ 106 
260a				OPCODE_EOF: equ 106 
260a				OPCODE_FORMAT: equ 107 
260a				OPCODE_LABEL: equ 108 
260a				OPCODE_LABELS: equ 109 
260a			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
260a				OPCODE_UPPER: equ 111 
260a				OPCODE_LOWER: equ 112 
260a				OPCODE_SUBSTR: equ 113 
260a				OPCODE_LEFT: equ 114 
260a				OPCODE_RIGHT: equ 115 
260a				OPCODE_STR2NUM: equ 116 
260a				OPCODE_NUM2STR: equ 117 
260a				OPCODE_CONCAT: equ 118 
260a				OPCODE_FIND: equ 119 
260a				OPCODE_LEN: equ 120 
260a				OPCODE_CHAR: equ 121 
260a			; free to reuse	OPCODE_STRLEN: equ 122 
260a			; free to reuse	OPCODE_ENDSTR: equ 123 
260a				OPCODE_V0S: equ 124 
260a				OPCODE_V0Q: equ 125 
260a				OPCODE_V1S: equ 126 
260a				OPCODE_V1Q: equ 127 
260a				OPCODE_V2S: equ 128 
260a				OPCODE_V2Q: equ 129 
260a				OPCODE_V3S: equ 130 
260a				OPCODE_V3Q: equ 131 
260a			;free to reuse	OPCODE_END: equ 132 
260a				OPCODE_ZDUP: equ 133 
260a			 
260a			; eof 
# End of file forth_opcodes.asm
260a			 
260a			include "forth_words_core.asm" 
260a			 
260a			; | ## Core Words 
260a			 
260a			;if MALLOC_4 
260a			 
260a			.HEAP: 
260a			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
260a 15				db WORD_SYS_CORE+OPCODE_HEAP             
260b 49 26			dw .EXEC            
260d 05				db 4 + 1 
260e .. 00			db "HEAP",0              
2613				endm 
# End of macro CWHEAD
2613			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2613			; | | u1 - Current number of bytes in the heap 
2613			; | | u2 - Remaining bytes left on the heap 
2613			; | |  
2613			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2613			 
2613			 
2613				if DEBUG_FORTH_WORDS_KEY 
2613					DMARK "HEP" 
2613 f5				push af  
2614 3a 28 26			ld a, (.dmark)  
2617 32 68 fe			ld (debug_mark),a  
261a 3a 29 26			ld a, (.dmark+1)  
261d 32 69 fe			ld (debug_mark+1),a  
2620 3a 2a 26			ld a, (.dmark+2)  
2623 32 6a fe			ld (debug_mark+2),a  
2626 18 03			jr .pastdmark  
2628 ..			.dmark: db "HEP"  
262b f1			.pastdmark: pop af  
262c			endm  
# End of macro DMARK
262c					CALLMONITOR 
262c cd 6c fe			call debug_vector  
262f				endm  
# End of macro CALLMONITOR
262f				endif 
262f 2a 0a 80			ld hl, (free_list )      
2632 11 0e 80			ld de, heap_start 
2635			 
2635 ed 52			sbc hl, de  
2637			 
2637 cd 05 21			call forth_push_numhl 
263a			 
263a			 
263a ed 5b 0a 80		ld de, (free_list )      
263e 21 99 f1			ld hl, heap_end 
2641			 
2641 ed 52			sbc hl, de 
2643			 
2643 cd 05 21			call forth_push_numhl 
2646				 
2646			 
2646				 
2646			 
2646			 
2646			 
2646				NEXTW 
2646 c3 b2 24			jp macro_next 
2649				endm 
# End of macro NEXTW
2649			;endif 
2649			 
2649			.EXEC: 
2649			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2649			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2649			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2649			;; > > 
2649			;; > >   
2649			;	STACKFRAME OFF $5efe $5f9f 
2649			; 
2649			;		if DEBUG_FORTH_WORDS_KEY 
2649			;			DMARK "EXE" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			; 
2649			;	FORTH_DSP_VALUEHL 
2649			; 
2649			;	FORTH_DSP_POP 
2649			; 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX1" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;;	ld e,(hl) 
2649			;;	inc hl 
2649			;;	ld d,(hl) 
2649			;;	ex de,hl 
2649			; 
2649			;;		if DEBUG_FORTH_WORDS 
2649			;;			DMARK "EX2" 
2649			;;			CALLMONITOR 
2649			;;		endif 
2649			;	push hl 
2649			; 
2649			;	;ld a, 0 
2649			;	;ld a, FORTH_END_BUFFER 
2649			;	call strlenz 
2649			;	inc hl   ; include zero term to copy 
2649			;	inc hl   ; include term 
2649			;	inc hl   ; include term 
2649			;	ld b,0 
2649			;	ld c,l 
2649			;	pop hl 
2649			;	ld de, execscratch 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX3" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	ldir 
2649			; 
2649			; 
2649			;	ld hl, execscratch 
2649			; 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EXe" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			; 
2649			;	call forthparse 
2649			;	call forthexec 
2649			;;	call forthexec_cleanup 
2649			;;	call forthparse 
2649			;;	call forthexec 
2649			; 
2649			;	STACKFRAMECHK OFF $5efe $5f9f 
2649			; 
2649			;	; an immediate word so no need to process any more words 
2649			;	ret 
2649			;	NEXTW 
2649			 
2649			; dead code - old version  
2649			;	FORTH_RSP_NEXT 
2649			 
2649			;  
2649			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2649			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2649			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2649			;	push hl 
2649			;	push de 
2649			;	push bc 
2649			; 
2649			; 
2649			;		if DEBUG_FORTH_WORDS_KEY 
2649			;			DMARK "EXR" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			; 
2649			; 
2649			; 
2649			;	;v5 FORTH_DSP_VALUE 
2649			;	FORTH_DSP_VALUEHL 
2649			; 
2649			;	; TODO do string type checks 
2649			; 
2649			;;v5	inc hl   ; skip type 
2649			; 
2649			;	push hl  ; source code  
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX1" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	ld a, 0 
2649			;	call strlent 
2649			; 
2649			;	inc hl 
2649			;	inc hl 
2649			;	inc hl 
2649			;	inc hl 
2649			; 
2649			;	push hl    ; size 
2649			; 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX2" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	call malloc 
2649			; 
2649			;	ex de, hl    ; de now contains malloc area 
2649			;	pop bc   	; get byte count 
2649			;	pop hl      ; get string to copy 
2649			; 
2649			;	push de     ; save malloc for free later 
2649			; 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX3" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	ldir       ; duplicate string 
2649			; 
2649			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2649			;	 
2649			;	; TODO fix the parse would be better than this...  
2649			;	ex de, hl 
2649			;	dec hl 
2649			;	ld a, 0 
2649			;	ld (hl), a 
2649			;	dec hl 
2649			;	ld a, ' ' 
2649			;	ld (hl), a 
2649			;	dec hl 
2649			;	ld (hl), a 
2649			; 
2649			;	dec hl 
2649			;	ld (hl), a 
2649			; 
2649			; 
2649			;	FORTH_DSP_POP  
2649			; 
2649			;	pop hl     
2649			;	push hl    ; save malloc area 
2649			; 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX4" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			; 
2649			;	call forthparse 
2649			;	call forthexec 
2649			;	 
2649			;	pop hl 
2649			;	if DEBUG_FORTH_WORDS 
2649			;		DMARK "EX5" 
2649			;		CALLMONITOR 
2649			;	endif 
2649			; 
2649			;	if FORTH_ENABLE_FREE 
2649			;	call free 
2649			;	endif 
2649			; 
2649			;	if DEBUG_FORTH_WORDS 
2649			;		DMARK "EX6" 
2649			;		CALLMONITOR 
2649			;	endif 
2649			; 
2649			;	pop bc 
2649			;	pop de 
2649			;	pop hl 
2649			;;	FORTH_RSP_POP	  
2649			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2649			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2649			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2649			; 
2649			;	if DEBUG_FORTH_WORDS 
2649			;		DMARK "EX7" 
2649			;		CALLMONITOR 
2649			;	endif 
2649			;	NEXTW 
2649			 
2649			;.STKEXEC: 
2649			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2649			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2649			; 
2649			; 
2649			;		if DEBUG_FORTH_WORDS_KEY 
2649			;			DMARK "STX" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			; 
2649			;	FORTH_DSP_VALUEHL 
2649			; 
2649			;	ld (store_tmp1), hl    ; count 
2649			; 
2649			;	FORTH_DSP_POP 
2649			;.stkexec1: 
2649			;	ld hl, (store_tmp1)   ; count 
2649			;	ld a, 0 
2649			;	cp l 
2649			;	ret z 
2649			; 
2649			;	dec hl 
2649			;	ld (store_tmp1), hl    ; count 
2649			;	 
2649			;	FORTH_DSP_VALUEHL 
2649			;	push hl 
2649			;	 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EXp" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	FORTH_DSP_POP 
2649			; 
2649			;	call strlenz 
2649			;	inc hl   ; include zero term to copy 
2649			;	inc hl   ; include zero term to copy 
2649			;	inc hl   ; include zero term to copy 
2649			;	ld b,0 
2649			;	ld c,l 
2649			;	pop hl 
2649			;	ld de, execscratch 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EX3" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	ldir 
2649			; 
2649			; 
2649			;	ld hl, execscratch 
2649			; 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EXP" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			; 
2649			;	call forthparse 
2649			;	ld hl, execscratch 
2649			;		if DEBUG_FORTH_WORDS 
2649			;			DMARK "EXx" 
2649			;			CALLMONITOR 
2649			;		endif 
2649			;	call forthexec 
2649			; 
2649			;	jp .stkexec1 
2649			; 
2649			;	ret 
2649			 
2649			 
2649			.DUP: 
2649			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2649 17				db WORD_SYS_CORE+OPCODE_DUP             
264a bf 26			dw .ZDUP            
264c 04				db 3 + 1 
264d .. 00			db "DUP",0              
2651				endm 
# End of macro CWHEAD
2651			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
2651			 
2651				if DEBUG_FORTH_WORDS_KEY 
2651					DMARK "DUP" 
2651 f5				push af  
2652 3a 66 26			ld a, (.dmark)  
2655 32 68 fe			ld (debug_mark),a  
2658 3a 67 26			ld a, (.dmark+1)  
265b 32 69 fe			ld (debug_mark+1),a  
265e 3a 68 26			ld a, (.dmark+2)  
2661 32 6a fe			ld (debug_mark+2),a  
2664 18 03			jr .pastdmark  
2666 ..			.dmark: db "DUP"  
2669 f1			.pastdmark: pop af  
266a			endm  
# End of macro DMARK
266a					CALLMONITOR 
266a cd 6c fe			call debug_vector  
266d				endm  
# End of macro CALLMONITOR
266d				endif 
266d			 
266d				FORTH_DSP 
266d cd c2 22			call macro_forth_dsp 
2670				endm 
# End of macro FORTH_DSP
2670			 
2670 7e				ld a, (HL) 
2671 fe 01			cp DS_TYPE_STR 
2673 20 25			jr nz, .dupinum 
2675			 
2675				; push another string 
2675			 
2675				FORTH_DSP_VALUEHL     		 
2675 cd fc 22			call macro_dsp_valuehl 
2678				endm 
# End of macro FORTH_DSP_VALUEHL
2678			 
2678			if DEBUG_FORTH_WORDS 
2678				DMARK "DUs" 
2678 f5				push af  
2679 3a 8d 26			ld a, (.dmark)  
267c 32 68 fe			ld (debug_mark),a  
267f 3a 8e 26			ld a, (.dmark+1)  
2682 32 69 fe			ld (debug_mark+1),a  
2685 3a 8f 26			ld a, (.dmark+2)  
2688 32 6a fe			ld (debug_mark+2),a  
268b 18 03			jr .pastdmark  
268d ..			.dmark: db "DUs"  
2690 f1			.pastdmark: pop af  
2691			endm  
# End of macro DMARK
2691				CALLMONITOR 
2691 cd 6c fe			call debug_vector  
2694				endm  
# End of macro CALLMONITOR
2694			endif 
2694 cd 73 21			call forth_push_str 
2697			 
2697				NEXTW 
2697 c3 b2 24			jp macro_next 
269a				endm 
# End of macro NEXTW
269a			 
269a			 
269a			.dupinum: 
269a				 
269a			 
269a			 
269a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
269a cd fc 22			call macro_dsp_valuehl 
269d				endm 
# End of macro FORTH_DSP_VALUEHL
269d			 
269d			; TODO add floating point number detection 
269d			 
269d			if DEBUG_FORTH_WORDS 
269d				DMARK "DUi" 
269d f5				push af  
269e 3a b2 26			ld a, (.dmark)  
26a1 32 68 fe			ld (debug_mark),a  
26a4 3a b3 26			ld a, (.dmark+1)  
26a7 32 69 fe			ld (debug_mark+1),a  
26aa 3a b4 26			ld a, (.dmark+2)  
26ad 32 6a fe			ld (debug_mark+2),a  
26b0 18 03			jr .pastdmark  
26b2 ..			.dmark: db "DUi"  
26b5 f1			.pastdmark: pop af  
26b6			endm  
# End of macro DMARK
26b6				CALLMONITOR 
26b6 cd 6c fe			call debug_vector  
26b9				endm  
# End of macro CALLMONITOR
26b9			endif 
26b9			 
26b9 cd 05 21			call forth_push_numhl 
26bc				NEXTW 
26bc c3 b2 24			jp macro_next 
26bf				endm 
# End of macro NEXTW
26bf			.ZDUP: 
26bf			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
26bf 99				db WORD_SYS_CORE+OPCODE_ZDUP             
26c0 f7 26			dw .SWAP            
26c2 05				db 4 + 1 
26c3 .. 00			db "?DUP",0              
26c8				endm 
# End of macro CWHEAD
26c8			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | DONE 
26c8			 
26c8				if DEBUG_FORTH_WORDS_KEY 
26c8					DMARK "qDU" 
26c8 f5				push af  
26c9 3a dd 26			ld a, (.dmark)  
26cc 32 68 fe			ld (debug_mark),a  
26cf 3a de 26			ld a, (.dmark+1)  
26d2 32 69 fe			ld (debug_mark+1),a  
26d5 3a df 26			ld a, (.dmark+2)  
26d8 32 6a fe			ld (debug_mark+2),a  
26db 18 03			jr .pastdmark  
26dd ..			.dmark: db "qDU"  
26e0 f1			.pastdmark: pop af  
26e1			endm  
# End of macro DMARK
26e1					CALLMONITOR 
26e1 cd 6c fe			call debug_vector  
26e4				endm  
# End of macro CALLMONITOR
26e4				endif 
26e4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26e4 cd fc 22			call macro_dsp_valuehl 
26e7				endm 
# End of macro FORTH_DSP_VALUEHL
26e7			 
26e7 e5				push hl 
26e8			 
26e8				; is it a zero? 
26e8			 
26e8 3e 00			ld a, 0 
26ea 84				add h 
26eb 85				add l 
26ec			 
26ec e1				pop hl 
26ed			 
26ed fe 00			cp 0 
26ef 28 03			jr z, .dup2orig 
26f1			 
26f1			 
26f1 cd 05 21			call forth_push_numhl 
26f4			 
26f4			 
26f4			; TODO add floating point number detection 
26f4			 
26f4			.dup2orig: 
26f4			 
26f4				NEXTW 
26f4 c3 b2 24			jp macro_next 
26f7				endm 
# End of macro NEXTW
26f7			.SWAP: 
26f7			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
26f7 18				db WORD_SYS_CORE+OPCODE_SWAP             
26f8 36 27			dw .COLN            
26fa 05				db 4 + 1 
26fb .. 00			db "SWAP",0              
2700				endm 
# End of macro CWHEAD
2700			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2700				if DEBUG_FORTH_WORDS_KEY 
2700					DMARK "SWP" 
2700 f5				push af  
2701 3a 15 27			ld a, (.dmark)  
2704 32 68 fe			ld (debug_mark),a  
2707 3a 16 27			ld a, (.dmark+1)  
270a 32 69 fe			ld (debug_mark+1),a  
270d 3a 17 27			ld a, (.dmark+2)  
2710 32 6a fe			ld (debug_mark+2),a  
2713 18 03			jr .pastdmark  
2715 ..			.dmark: db "SWP"  
2718 f1			.pastdmark: pop af  
2719			endm  
# End of macro DMARK
2719					CALLMONITOR 
2719 cd 6c fe			call debug_vector  
271c				endm  
# End of macro CALLMONITOR
271c				endif 
271c			 
271c			; TODO Use os stack swap memory 
271c				FORTH_DSP_VALUEHL 
271c cd fc 22			call macro_dsp_valuehl 
271f				endm 
# End of macro FORTH_DSP_VALUEHL
271f e5				push hl     ; w2 
2720			 
2720				FORTH_DSP_POP 
2720 cd b4 23			call macro_forth_dsp_pop 
2723				endm 
# End of macro FORTH_DSP_POP
2723			 
2723				FORTH_DSP_VALUEHL 
2723 cd fc 22			call macro_dsp_valuehl 
2726				endm 
# End of macro FORTH_DSP_VALUEHL
2726			 
2726				FORTH_DSP_POP 
2726 cd b4 23			call macro_forth_dsp_pop 
2729				endm 
# End of macro FORTH_DSP_POP
2729			 
2729 d1				pop de     ; w2	, hl = w1 
272a			 
272a eb				ex de, hl 
272b d5				push de 
272c			 
272c cd 05 21			call forth_push_numhl 
272f			 
272f e1				pop hl 
2730			 
2730 cd 05 21			call forth_push_numhl 
2733				 
2733			 
2733				NEXTW 
2733 c3 b2 24			jp macro_next 
2736				endm 
# End of macro NEXTW
2736			.COLN: 
2736			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2736 19				db WORD_SYS_CORE+OPCODE_COLN             
2737 c2 28			dw .SCOLN            
2739 02				db 1 + 1 
273a .. 00			db ":",0              
273c				endm 
# End of macro CWHEAD
273c			; | : ( -- )         Create new word | DONE 
273c			 
273c				if DEBUG_FORTH_WORDS_KEY 
273c					DMARK "CLN" 
273c f5				push af  
273d 3a 51 27			ld a, (.dmark)  
2740 32 68 fe			ld (debug_mark),a  
2743 3a 52 27			ld a, (.dmark+1)  
2746 32 69 fe			ld (debug_mark+1),a  
2749 3a 53 27			ld a, (.dmark+2)  
274c 32 6a fe			ld (debug_mark+2),a  
274f 18 03			jr .pastdmark  
2751 ..			.dmark: db "CLN"  
2754 f1			.pastdmark: pop af  
2755			endm  
# End of macro DMARK
2755					CALLMONITOR 
2755 cd 6c fe			call debug_vector  
2758				endm  
# End of macro CALLMONITOR
2758				endif 
2758			STACKFRAME OFF $8efe $989f 
2758				if DEBUG_STACK_IMB 
2758					if OFF 
2758						exx 
2758						ld de, $8efe 
2758						ld a, d 
2758						ld hl, curframe 
2758						call hexout 
2758						ld a, e 
2758						ld hl, curframe+2 
2758						call hexout 
2758						ld hl, $8efe 
2758						push hl 
2758						ld hl, $989f 
2758						push hl 
2758						exx 
2758					endif 
2758				endif 
2758			endm 
# End of macro STACKFRAME
2758			; get parser buffer length  of new word 
2758			 
2758			 
2758			 
2758				; move tok past this to start of name defintition 
2758				; TODO get word to define 
2758				; TODO Move past word token 
2758				; TODO get length of string up to the ';' 
2758			 
2758 2a bf f4		ld hl, (os_tok_ptr) 
275b 23			inc hl 
275c 23			inc hl 
275d			 
275d 3e 3b		ld a, ';' 
275f cd 38 14		call strlent 
2762			 
2762 7d			ld a,l 
2763 32 ae f1		ld (os_new_parse_len), a 
2766			 
2766			 
2766			if DEBUG_FORTH_UWORD 
2766 ed 5b bf f4	ld de, (os_tok_ptr) 
276a					DMARK ":01" 
276a f5				push af  
276b 3a 7f 27			ld a, (.dmark)  
276e 32 68 fe			ld (debug_mark),a  
2771 3a 80 27			ld a, (.dmark+1)  
2774 32 69 fe			ld (debug_mark+1),a  
2777 3a 81 27			ld a, (.dmark+2)  
277a 32 6a fe			ld (debug_mark+2),a  
277d 18 03			jr .pastdmark  
277f ..			.dmark: db ":01"  
2782 f1			.pastdmark: pop af  
2783			endm  
# End of macro DMARK
2783			CALLMONITOR 
2783 cd 6c fe			call debug_vector  
2786				endm  
# End of macro CALLMONITOR
2786			endif 
2786			 
2786			; 
2786			;  new word memory layout: 
2786			;  
2786			;    : adg 6666 ;  
2786			; 
2786			;    db   1     ; user defined word  
2786 23			inc hl    
2787			;    dw   sysdict 
2787 23			inc hl 
2788 23			inc hl 
2789			;    db <word len>+1 (for null) 
2789 23			inc hl 
278a			;    db .... <word> 
278a			; 
278a			 
278a 23			inc hl    ; some extras for the word preamble before the above 
278b 23			inc hl 
278c 23			inc hl 
278d 23			inc hl 
278e 23			inc hl 
278f 23			inc hl 
2790 23			inc hl  
2791 23			inc hl 
2792 23			inc hl 
2793 23			inc hl 
2794 23			inc hl 
2795 23			inc hl 
2796 23			inc hl 
2797 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2798			;       exec word buffer 
2798			;	<ptr word>   
2798 23			inc hl 
2799 23			inc hl 
279a			;       <word list><null term> 7F final term 
279a			 
279a			 
279a			if DEBUG_FORTH_UWORD 
279a					DMARK ":02" 
279a f5				push af  
279b 3a af 27			ld a, (.dmark)  
279e 32 68 fe			ld (debug_mark),a  
27a1 3a b0 27			ld a, (.dmark+1)  
27a4 32 69 fe			ld (debug_mark+1),a  
27a7 3a b1 27			ld a, (.dmark+2)  
27aa 32 6a fe			ld (debug_mark+2),a  
27ad 18 03			jr .pastdmark  
27af ..			.dmark: db ":02"  
27b2 f1			.pastdmark: pop af  
27b3			endm  
# End of macro DMARK
27b3			CALLMONITOR 
27b3 cd 6c fe			call debug_vector  
27b6				endm  
# End of macro CALLMONITOR
27b6			endif 
27b6			 
27b6			 
27b6				; malloc the size 
27b6			 
27b6 cd 96 14			call malloc 
27b9 22 b0 f1			ld (os_new_malloc), hl     ; save malloc start 
27bc			 
27bc			;    db   1     ; user defined word  
27bc 3e 01			ld a, WORD_SYS_UWORD  
27be 77				ld (hl), a 
27bf			 
27bf 23			inc hl    
27c0			;    dw   sysdict 
27c0 11 0a 26		ld de, sysdict       ; continue on with the scan to the system dict 
27c3 73			ld (hl), e 
27c4 23			inc hl 
27c5 72			ld (hl), d 
27c6 23			inc hl 
27c7			 
27c7			 
27c7			;    Setup dict word 
27c7			 
27c7 23			inc hl 
27c8 22 aa f1		ld (os_new_work_ptr), hl     ; save start of dict word  
27cb			 
27cb			; 1. get length of dict word 
27cb			 
27cb			 
27cb 2a bf f4		ld hl, (os_tok_ptr) 
27ce 23			inc hl 
27cf 23			inc hl    ; position to start of dict word 
27d0 3e 00		ld a, 0 
27d2 cd 38 14		call strlent 
27d5			 
27d5			 
27d5 23			inc hl    ; to include null??? 
27d6			 
27d6			; write length of dict word 
27d6			 
27d6 ed 5b aa f1	ld de, (os_new_work_ptr)   ; get dest for copy of word 
27da 1b			dec de 
27db eb			ex de, hl 
27dc 73			ld (hl), e 
27dd eb			ex de, hl 
27de			 
27de			 
27de			 
27de			; copy  
27de 4d			ld c, l 
27df 06 00		ld b, 0 
27e1 ed 5b aa f1	ld de, (os_new_work_ptr)   ; get dest for copy of word 
27e5 2a bf f4		ld hl, (os_tok_ptr) 
27e8 23			inc hl 
27e9 23			inc hl    ; position to start of dict word 
27ea			 
27ea			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
27ea			 
27ea			; TODO need to convert word to upper case 
27ea			 
27ea			ucasetok:	 
27ea 7e			ld a,(hl) 
27eb cd 24 14		call toUpper 
27ee 77			ld (hl),a 
27ef ed a0		ldi 
27f1 f2 ea 27		jp p, ucasetok 
27f4			 
27f4			 
27f4			 
27f4			; de now points to start of where the word body code should be placed 
27f4 ed 53 aa f1	ld (os_new_work_ptr), de 
27f8			; hl now points to the words to throw at forthexec which needs to be copied 
27f8 22 a8 f1		ld (os_new_src_ptr), hl 
27fb			 
27fb			; TODO add 'call to forthexec' 
27fb			 
27fb			if DEBUG_FORTH_UWORD 
27fb c5			push bc 
27fc ed 4b b0 f1	ld bc, (os_new_malloc) 
2800					DMARK ":0x" 
2800 f5				push af  
2801 3a 15 28			ld a, (.dmark)  
2804 32 68 fe			ld (debug_mark),a  
2807 3a 16 28			ld a, (.dmark+1)  
280a 32 69 fe			ld (debug_mark+1),a  
280d 3a 17 28			ld a, (.dmark+2)  
2810 32 6a fe			ld (debug_mark+2),a  
2813 18 03			jr .pastdmark  
2815 ..			.dmark: db ":0x"  
2818 f1			.pastdmark: pop af  
2819			endm  
# End of macro DMARK
2819			CALLMONITOR 
2819 cd 6c fe			call debug_vector  
281c				endm  
# End of macro CALLMONITOR
281c c1			pop bc 
281d			endif 
281d			 
281d			 
281d			; create word preamble which should be: 
281d			 
281d			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
281d			 
281d			;    ld hl, <word code> 
281d			;    jp user_exec 
281d			;    <word code bytes> 
281d			 
281d			 
281d			;	inc de     ; TODO ??? or are we already past the word's null 
281d eb			ex de, hl 
281e			 
281e 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
2820			 
2820 23			inc hl 
2821 22 a4 f1		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
2824 23			inc hl 
2825			 
2825 23			inc hl 
2826 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
2828			 
2828 01 76 5d		ld bc, user_exec 
282b 23			inc hl 
282c 71			ld (hl), c     ; poke address of user_exec 
282d 23			inc hl 
282e 70			ld (hl), b     
282f			; 
282f			;	inc hl 
282f			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
282f			; 
282f			; 
282f			;	ld bc, macro_forth_rsp_next 
282f			;	inc hl 
282f			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
282f			;	inc hl 
282f			;	ld (hl), b     
282f			; 
282f			;	inc hl 
282f			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
282f			; 
282f			; 
282f			;	inc hl 
282f			;	ld bc, forthexec 
282f			;	ld (hl), c     ; poke address of forthexec 
282f			;	inc hl 
282f			;	ld (hl), b      
282f			; 
282f			;	inc hl 
282f			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
282f			; 
282f			;	ld bc, user_dict_next 
282f			;	inc hl 
282f			;	ld (hl), c     ; poke address of forthexec 
282f			;	inc hl 
282f			;	ld (hl), b      
282f			 
282f			; hl is now where we need to copy the word byte data to save this 
282f			 
282f 23			inc hl 
2830 22 a6 f1		ld (os_new_exec), hl 
2833			 
2833			; copy definition 
2833			 
2833 eb			ex de, hl 
2834			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
2834			;	inc de    ; skip the PC for this parse 
2834 3a ae f1		ld a, (os_new_parse_len) 
2837 4f			ld c, a 
2838 06 00		ld b, 0 
283a ed b0		ldir		 ; copy defintion 
283c			 
283c			 
283c			; poke the address of where the new word bytes live for forthexec 
283c			 
283c 2a a4 f1		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
283f			 
283f ed 5b a6 f1	ld de, (os_new_exec)      
2843			 
2843 73			ld (hl), e 
2844 23			inc hl 
2845 72			ld (hl), d 
2846			 
2846				; TODO copy last user dict word next link to this word 
2846				; TODO update last user dict word to point to this word 
2846			; 
2846			; hl f923 de 812a ; bc 811a 
2846			 
2846			if DEBUG_FORTH_UWORD 
2846 c5			push bc 
2847 ed 4b b0 f1	ld bc, (os_new_malloc) 
284b					DMARK ":0A" 
284b f5				push af  
284c 3a 60 28			ld a, (.dmark)  
284f 32 68 fe			ld (debug_mark),a  
2852 3a 61 28			ld a, (.dmark+1)  
2855 32 69 fe			ld (debug_mark+1),a  
2858 3a 62 28			ld a, (.dmark+2)  
285b 32 6a fe			ld (debug_mark+2),a  
285e 18 03			jr .pastdmark  
2860 ..			.dmark: db ":0A"  
2863 f1			.pastdmark: pop af  
2864			endm  
# End of macro DMARK
2864			CALLMONITOR 
2864 cd 6c fe			call debug_vector  
2867				endm  
# End of macro CALLMONITOR
2867 c1			pop bc 
2868			endif 
2868			if DEBUG_FORTH_UWORD 
2868 c5			push bc 
2869 ed 4b b0 f1	ld bc, (os_new_malloc) 
286d 03			inc bc 
286e 03			inc bc 
286f 03			inc bc 
2870 03			inc bc 
2871 03			inc bc 
2872 03			inc bc 
2873 03			inc bc 
2874 03			inc bc 
2875			 
2875					DMARK ":0B" 
2875 f5				push af  
2876 3a 8a 28			ld a, (.dmark)  
2879 32 68 fe			ld (debug_mark),a  
287c 3a 8b 28			ld a, (.dmark+1)  
287f 32 69 fe			ld (debug_mark+1),a  
2882 3a 8c 28			ld a, (.dmark+2)  
2885 32 6a fe			ld (debug_mark+2),a  
2888 18 03			jr .pastdmark  
288a ..			.dmark: db ":0B"  
288d f1			.pastdmark: pop af  
288e			endm  
# End of macro DMARK
288e			CALLMONITOR 
288e cd 6c fe			call debug_vector  
2891				endm  
# End of macro CALLMONITOR
2891 c1			pop bc 
2892			endif 
2892			 
2892			; update word dict linked list for new word 
2892			 
2892			 
2892 2a bb f4		ld hl, (os_last_new_uword)		; get the start of the last added uword 
2895 23			inc hl     ; move to next work linked list ptr 
2896			 
2896 ed 5b b0 f1	ld de, (os_new_malloc)		 ; new next word 
289a 73			ld (hl), e 
289b 23			inc hl 
289c 72			ld (hl), d 
289d			 
289d			if DEBUG_FORTH_UWORD 
289d ed 4b bb f4	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
28a1			endif 
28a1			 
28a1 ed 53 bb f4	ld (os_last_new_uword), de      ; update last new uword ptr 
28a5			 
28a5			 
28a5			if DEBUG_FORTH_UWORD 
28a5					DMARK ":0+" 
28a5 f5				push af  
28a6 3a ba 28			ld a, (.dmark)  
28a9 32 68 fe			ld (debug_mark),a  
28ac 3a bb 28			ld a, (.dmark+1)  
28af 32 69 fe			ld (debug_mark+1),a  
28b2 3a bc 28			ld a, (.dmark+2)  
28b5 32 6a fe			ld (debug_mark+2),a  
28b8 18 03			jr .pastdmark  
28ba ..			.dmark: db ":0+"  
28bd f1			.pastdmark: pop af  
28be			endm  
# End of macro DMARK
28be			CALLMONITOR 
28be cd 6c fe			call debug_vector  
28c1				endm  
# End of macro CALLMONITOR
28c1			endif 
28c1			 
28c1			STACKFRAMECHK OFF $8efe $989f 
28c1				if DEBUG_STACK_IMB 
28c1					if OFF 
28c1						exx 
28c1						ld hl, $989f 
28c1						pop de   ; $989f 
28c1						call cmp16 
28c1						jr nz, .spnosame 
28c1						ld hl, $8efe 
28c1						pop de   ; $8efe 
28c1						call cmp16 
28c1						jr z, .spfrsame 
28c1						.spnosame: call showsperror 
28c1						.spfrsame: nop 
28c1						exx 
28c1					endif 
28c1				endif 
28c1			endm 
# End of macro STACKFRAMECHK
28c1			 
28c1 c9			ret    ; dont process any remaining parser tokens as they form new word 
28c2			 
28c2			 
28c2			 
28c2			 
28c2			;		NEXT 
28c2			.SCOLN: 
28c2			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
28c2 06			db OPCODE_SCOLN 
28c3 0e 29		dw .DROP 
28c5 02			db 2 
28c6 .. 00		db ";",0           
28c8			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
28c8				if DEBUG_FORTH_WORDS_KEY 
28c8					DMARK "SCN" 
28c8 f5				push af  
28c9 3a dd 28			ld a, (.dmark)  
28cc 32 68 fe			ld (debug_mark),a  
28cf 3a de 28			ld a, (.dmark+1)  
28d2 32 69 fe			ld (debug_mark+1),a  
28d5 3a df 28			ld a, (.dmark+2)  
28d8 32 6a fe			ld (debug_mark+2),a  
28db 18 03			jr .pastdmark  
28dd ..			.dmark: db "SCN"  
28e0 f1			.pastdmark: pop af  
28e1			endm  
# End of macro DMARK
28e1					CALLMONITOR 
28e1 cd 6c fe			call debug_vector  
28e4				endm  
# End of macro CALLMONITOR
28e4				endif 
28e4				FORTH_RSP_TOS 
28e4 cd c3 20			call macro_forth_rsp_tos 
28e7				endm 
# End of macro FORTH_RSP_TOS
28e7 e5				push hl 
28e8				FORTH_RSP_POP 
28e8 cd cd 20			call macro_forth_rsp_pop 
28eb				endm 
# End of macro FORTH_RSP_POP
28eb e1				pop hl 
28ec			;		ex de,hl 
28ec 22 bf f4			ld (os_tok_ptr),hl 
28ef			 
28ef			if DEBUG_FORTH_UWORD 
28ef					DMARK "SCL" 
28ef f5				push af  
28f0 3a 04 29			ld a, (.dmark)  
28f3 32 68 fe			ld (debug_mark),a  
28f6 3a 05 29			ld a, (.dmark+1)  
28f9 32 69 fe			ld (debug_mark+1),a  
28fc 3a 06 29			ld a, (.dmark+2)  
28ff 32 6a fe			ld (debug_mark+2),a  
2902 18 03			jr .pastdmark  
2904 ..			.dmark: db "SCL"  
2907 f1			.pastdmark: pop af  
2908			endm  
# End of macro DMARK
2908			CALLMONITOR 
2908 cd 6c fe			call debug_vector  
290b				endm  
# End of macro CALLMONITOR
290b			endif 
290b				NEXTW 
290b c3 b2 24			jp macro_next 
290e				endm 
# End of macro NEXTW
290e			 
290e			.DROP: 
290e			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
290e 1b				db WORD_SYS_CORE+OPCODE_DROP             
290f 39 29			dw .DUP2            
2911 05				db 4 + 1 
2912 .. 00			db "DROP",0              
2917				endm 
# End of macro CWHEAD
2917			; | DROP ( w -- )   drop the TOS item   | DONE 
2917				if DEBUG_FORTH_WORDS_KEY 
2917					DMARK "DRP" 
2917 f5				push af  
2918 3a 2c 29			ld a, (.dmark)  
291b 32 68 fe			ld (debug_mark),a  
291e 3a 2d 29			ld a, (.dmark+1)  
2921 32 69 fe			ld (debug_mark+1),a  
2924 3a 2e 29			ld a, (.dmark+2)  
2927 32 6a fe			ld (debug_mark+2),a  
292a 18 03			jr .pastdmark  
292c ..			.dmark: db "DRP"  
292f f1			.pastdmark: pop af  
2930			endm  
# End of macro DMARK
2930					CALLMONITOR 
2930 cd 6c fe			call debug_vector  
2933				endm  
# End of macro CALLMONITOR
2933				endif 
2933				FORTH_DSP_POP 
2933 cd b4 23			call macro_forth_dsp_pop 
2936				endm 
# End of macro FORTH_DSP_POP
2936				NEXTW 
2936 c3 b2 24			jp macro_next 
2939				endm 
# End of macro NEXTW
2939			.DUP2: 
2939			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2939 1c				db WORD_SYS_CORE+OPCODE_DUP2             
293a 7e 29			dw .DROP2            
293c 05				db 4 + 1 
293d .. 00			db "2DUP",0              
2942				endm 
# End of macro CWHEAD
2942			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | DONE 
2942				if DEBUG_FORTH_WORDS_KEY 
2942					DMARK "2DU" 
2942 f5				push af  
2943 3a 57 29			ld a, (.dmark)  
2946 32 68 fe			ld (debug_mark),a  
2949 3a 58 29			ld a, (.dmark+1)  
294c 32 69 fe			ld (debug_mark+1),a  
294f 3a 59 29			ld a, (.dmark+2)  
2952 32 6a fe			ld (debug_mark+2),a  
2955 18 03			jr .pastdmark  
2957 ..			.dmark: db "2DU"  
295a f1			.pastdmark: pop af  
295b			endm  
# End of macro DMARK
295b					CALLMONITOR 
295b cd 6c fe			call debug_vector  
295e				endm  
# End of macro CALLMONITOR
295e				endif 
295e				FORTH_DSP_VALUEHL 
295e cd fc 22			call macro_dsp_valuehl 
2961				endm 
# End of macro FORTH_DSP_VALUEHL
2961 e5				push hl      ; 2 
2962			 
2962				FORTH_DSP_POP 
2962 cd b4 23			call macro_forth_dsp_pop 
2965				endm 
# End of macro FORTH_DSP_POP
2965				 
2965				FORTH_DSP_VALUEHL 
2965 cd fc 22			call macro_dsp_valuehl 
2968				endm 
# End of macro FORTH_DSP_VALUEHL
2968			;		push hl      ; 1 
2968			 
2968				FORTH_DSP_POP 
2968 cd b4 23			call macro_forth_dsp_pop 
296b				endm 
# End of macro FORTH_DSP_POP
296b			 
296b			;		pop hl       ; 1 
296b d1				pop de       ; 2 
296c			 
296c cd 05 21			call forth_push_numhl 
296f eb				ex de, hl 
2970 cd 05 21			call forth_push_numhl 
2973			 
2973				 
2973 eb				ex de, hl 
2974			 
2974 cd 05 21			call forth_push_numhl 
2977 eb				ex de, hl 
2978 cd 05 21			call forth_push_numhl 
297b			 
297b			 
297b				NEXTW 
297b c3 b2 24			jp macro_next 
297e				endm 
# End of macro NEXTW
297e			.DROP2: 
297e			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
297e 1d				db WORD_SYS_CORE+OPCODE_DROP2             
297f ad 29			dw .SWAP2            
2981 06				db 5 + 1 
2982 .. 00			db "2DROP",0              
2988				endm 
# End of macro CWHEAD
2988			; | 2DROP ( w w -- )    Double drop | DONE 
2988				if DEBUG_FORTH_WORDS_KEY 
2988					DMARK "2DR" 
2988 f5				push af  
2989 3a 9d 29			ld a, (.dmark)  
298c 32 68 fe			ld (debug_mark),a  
298f 3a 9e 29			ld a, (.dmark+1)  
2992 32 69 fe			ld (debug_mark+1),a  
2995 3a 9f 29			ld a, (.dmark+2)  
2998 32 6a fe			ld (debug_mark+2),a  
299b 18 03			jr .pastdmark  
299d ..			.dmark: db "2DR"  
29a0 f1			.pastdmark: pop af  
29a1			endm  
# End of macro DMARK
29a1					CALLMONITOR 
29a1 cd 6c fe			call debug_vector  
29a4				endm  
# End of macro CALLMONITOR
29a4				endif 
29a4				FORTH_DSP_POP 
29a4 cd b4 23			call macro_forth_dsp_pop 
29a7				endm 
# End of macro FORTH_DSP_POP
29a7				FORTH_DSP_POP 
29a7 cd b4 23			call macro_forth_dsp_pop 
29aa				endm 
# End of macro FORTH_DSP_POP
29aa				NEXTW 
29aa c3 b2 24			jp macro_next 
29ad				endm 
# End of macro NEXTW
29ad			.SWAP2: 
29ad			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
29ad 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
29ae d6 29			dw .AT            
29b0 06				db 5 + 1 
29b1 .. 00			db "2SWAP",0              
29b7				endm 
# End of macro CWHEAD
29b7			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
29b7				if DEBUG_FORTH_WORDS_KEY 
29b7					DMARK "2SW" 
29b7 f5				push af  
29b8 3a cc 29			ld a, (.dmark)  
29bb 32 68 fe			ld (debug_mark),a  
29be 3a cd 29			ld a, (.dmark+1)  
29c1 32 69 fe			ld (debug_mark+1),a  
29c4 3a ce 29			ld a, (.dmark+2)  
29c7 32 6a fe			ld (debug_mark+2),a  
29ca 18 03			jr .pastdmark  
29cc ..			.dmark: db "2SW"  
29cf f1			.pastdmark: pop af  
29d0			endm  
# End of macro DMARK
29d0					CALLMONITOR 
29d0 cd 6c fe			call debug_vector  
29d3				endm  
# End of macro CALLMONITOR
29d3				endif 
29d3			; TODO Use os stack swap memory 
29d3				NEXTW 
29d3 c3 b2 24			jp macro_next 
29d6				endm 
# End of macro NEXTW
29d6			.AT: 
29d6			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
29d6 1f				db WORD_SYS_CORE+OPCODE_AT             
29d7 08 2a			dw .CAT            
29d9 02				db 1 + 1 
29da .. 00			db "@",0              
29dc				endm 
# End of macro CWHEAD
29dc			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
29dc			 
29dc				if DEBUG_FORTH_WORDS_KEY 
29dc					DMARK "AT." 
29dc f5				push af  
29dd 3a f1 29			ld a, (.dmark)  
29e0 32 68 fe			ld (debug_mark),a  
29e3 3a f2 29			ld a, (.dmark+1)  
29e6 32 69 fe			ld (debug_mark+1),a  
29e9 3a f3 29			ld a, (.dmark+2)  
29ec 32 6a fe			ld (debug_mark+2),a  
29ef 18 03			jr .pastdmark  
29f1 ..			.dmark: db "AT."  
29f4 f1			.pastdmark: pop af  
29f5			endm  
# End of macro DMARK
29f5					CALLMONITOR 
29f5 cd 6c fe			call debug_vector  
29f8				endm  
# End of macro CALLMONITOR
29f8				endif 
29f8			.getbyteat:	 
29f8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29f8 cd fc 22			call macro_dsp_valuehl 
29fb				endm 
# End of macro FORTH_DSP_VALUEHL
29fb				 
29fb			;		push hl 
29fb			 
29fb				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29fb cd b4 23			call macro_forth_dsp_pop 
29fe				endm 
# End of macro FORTH_DSP_POP
29fe			 
29fe			;		pop hl 
29fe			 
29fe 7e				ld a, (hl) 
29ff			 
29ff 6f				ld l, a 
2a00 26 00			ld h, 0 
2a02 cd 05 21			call forth_push_numhl 
2a05			 
2a05				NEXTW 
2a05 c3 b2 24			jp macro_next 
2a08				endm 
# End of macro NEXTW
2a08			.CAT: 
2a08			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2a08 20				db WORD_SYS_CORE+OPCODE_CAT             
2a09 31 2a			dw .BANG            
2a0b 03				db 2 + 1 
2a0c .. 00			db "C@",0              
2a0f				endm 
# End of macro CWHEAD
2a0f			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2a0f				if DEBUG_FORTH_WORDS_KEY 
2a0f					DMARK "CAA" 
2a0f f5				push af  
2a10 3a 24 2a			ld a, (.dmark)  
2a13 32 68 fe			ld (debug_mark),a  
2a16 3a 25 2a			ld a, (.dmark+1)  
2a19 32 69 fe			ld (debug_mark+1),a  
2a1c 3a 26 2a			ld a, (.dmark+2)  
2a1f 32 6a fe			ld (debug_mark+2),a  
2a22 18 03			jr .pastdmark  
2a24 ..			.dmark: db "CAA"  
2a27 f1			.pastdmark: pop af  
2a28			endm  
# End of macro DMARK
2a28					CALLMONITOR 
2a28 cd 6c fe			call debug_vector  
2a2b				endm  
# End of macro CALLMONITOR
2a2b				endif 
2a2b c3 f8 29			jp .getbyteat 
2a2e				NEXTW 
2a2e c3 b2 24			jp macro_next 
2a31				endm 
# End of macro NEXTW
2a31			.BANG: 
2a31			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2a31 21				db WORD_SYS_CORE+OPCODE_BANG             
2a32 67 2a			dw .CBANG            
2a34 02				db 1 + 1 
2a35 .. 00			db "!",0              
2a37				endm 
# End of macro CWHEAD
2a37			; | ! ( x w -- ) Store x at address w      | DONE 
2a37				if DEBUG_FORTH_WORDS_KEY 
2a37					DMARK "BNG" 
2a37 f5				push af  
2a38 3a 4c 2a			ld a, (.dmark)  
2a3b 32 68 fe			ld (debug_mark),a  
2a3e 3a 4d 2a			ld a, (.dmark+1)  
2a41 32 69 fe			ld (debug_mark+1),a  
2a44 3a 4e 2a			ld a, (.dmark+2)  
2a47 32 6a fe			ld (debug_mark+2),a  
2a4a 18 03			jr .pastdmark  
2a4c ..			.dmark: db "BNG"  
2a4f f1			.pastdmark: pop af  
2a50			endm  
# End of macro DMARK
2a50					CALLMONITOR 
2a50 cd 6c fe			call debug_vector  
2a53				endm  
# End of macro CALLMONITOR
2a53				endif 
2a53			 
2a53			.storebyteat:		 
2a53				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a53 cd fc 22			call macro_dsp_valuehl 
2a56				endm 
# End of macro FORTH_DSP_VALUEHL
2a56				 
2a56 e5				push hl 
2a57			 
2a57				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a57 cd b4 23			call macro_forth_dsp_pop 
2a5a				endm 
# End of macro FORTH_DSP_POP
2a5a			 
2a5a				; get byte to poke 
2a5a			 
2a5a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a5a cd fc 22			call macro_dsp_valuehl 
2a5d				endm 
# End of macro FORTH_DSP_VALUEHL
2a5d e5				push hl 
2a5e			 
2a5e			 
2a5e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a5e cd b4 23			call macro_forth_dsp_pop 
2a61				endm 
# End of macro FORTH_DSP_POP
2a61			 
2a61			 
2a61 d1				pop de 
2a62 e1				pop hl 
2a63			 
2a63 73				ld (hl),e 
2a64			 
2a64			 
2a64				NEXTW 
2a64 c3 b2 24			jp macro_next 
2a67				endm 
# End of macro NEXTW
2a67			.CBANG: 
2a67			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2a67 22				db WORD_SYS_CORE+OPCODE_CBANG             
2a68 90 2a			dw .SCALL            
2a6a 03				db 2 + 1 
2a6b .. 00			db "C!",0              
2a6e				endm 
# End of macro CWHEAD
2a6e			; | C!  ( x w -- ) Store x at address w  | DONE 
2a6e				if DEBUG_FORTH_WORDS_KEY 
2a6e					DMARK "CBA" 
2a6e f5				push af  
2a6f 3a 83 2a			ld a, (.dmark)  
2a72 32 68 fe			ld (debug_mark),a  
2a75 3a 84 2a			ld a, (.dmark+1)  
2a78 32 69 fe			ld (debug_mark+1),a  
2a7b 3a 85 2a			ld a, (.dmark+2)  
2a7e 32 6a fe			ld (debug_mark+2),a  
2a81 18 03			jr .pastdmark  
2a83 ..			.dmark: db "CBA"  
2a86 f1			.pastdmark: pop af  
2a87			endm  
# End of macro DMARK
2a87					CALLMONITOR 
2a87 cd 6c fe			call debug_vector  
2a8a				endm  
# End of macro CALLMONITOR
2a8a				endif 
2a8a c3 53 2a			jp .storebyteat 
2a8d				NEXTW 
2a8d c3 b2 24			jp macro_next 
2a90				endm 
# End of macro NEXTW
2a90			.SCALL: 
2a90			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2a90 23				db WORD_SYS_CORE+OPCODE_SCALL             
2a91 c4 2a			dw .DEPTH            
2a93 05				db 4 + 1 
2a94 .. 00			db "CALL",0              
2a99				endm 
# End of macro CWHEAD
2a99			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2a99				if DEBUG_FORTH_WORDS_KEY 
2a99					DMARK "CLL" 
2a99 f5				push af  
2a9a 3a ae 2a			ld a, (.dmark)  
2a9d 32 68 fe			ld (debug_mark),a  
2aa0 3a af 2a			ld a, (.dmark+1)  
2aa3 32 69 fe			ld (debug_mark+1),a  
2aa6 3a b0 2a			ld a, (.dmark+2)  
2aa9 32 6a fe			ld (debug_mark+2),a  
2aac 18 03			jr .pastdmark  
2aae ..			.dmark: db "CLL"  
2ab1 f1			.pastdmark: pop af  
2ab2			endm  
# End of macro DMARK
2ab2					CALLMONITOR 
2ab2 cd 6c fe			call debug_vector  
2ab5				endm  
# End of macro CALLMONITOR
2ab5				endif 
2ab5			 
2ab5				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2ab5 cd fc 22			call macro_dsp_valuehl 
2ab8				endm 
# End of macro FORTH_DSP_VALUEHL
2ab8			 
2ab8			;		push hl 
2ab8			 
2ab8				; destroy value TOS 
2ab8			 
2ab8				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2ab8 cd b4 23			call macro_forth_dsp_pop 
2abb				endm 
# End of macro FORTH_DSP_POP
2abb			 
2abb					 
2abb			;		pop hl 
2abb			 
2abb				; how to do a call with hl???? save SP? 
2abb cd 56 24			call forth_call_hl 
2abe			 
2abe			 
2abe				; TODO push value back onto stack for another op etc 
2abe			 
2abe cd 05 21			call forth_push_numhl 
2ac1				NEXTW 
2ac1 c3 b2 24			jp macro_next 
2ac4				endm 
# End of macro NEXTW
2ac4			.DEPTH: 
2ac4			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2ac4 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2ac5 01 2b			dw .OVER            
2ac7 06				db 5 + 1 
2ac8 .. 00			db "DEPTH",0              
2ace				endm 
# End of macro CWHEAD
2ace			; | DEPTH ( -- u ) Push count of stack | DONE 
2ace				; take current TOS and remove from base value div by two to get count 
2ace				if DEBUG_FORTH_WORDS_KEY 
2ace					DMARK "DEP" 
2ace f5				push af  
2acf 3a e3 2a			ld a, (.dmark)  
2ad2 32 68 fe			ld (debug_mark),a  
2ad5 3a e4 2a			ld a, (.dmark+1)  
2ad8 32 69 fe			ld (debug_mark+1),a  
2adb 3a e5 2a			ld a, (.dmark+2)  
2ade 32 6a fe			ld (debug_mark+2),a  
2ae1 18 03			jr .pastdmark  
2ae3 ..			.dmark: db "DEP"  
2ae6 f1			.pastdmark: pop af  
2ae7			endm  
# End of macro DMARK
2ae7					CALLMONITOR 
2ae7 cd 6c fe			call debug_vector  
2aea				endm  
# End of macro CALLMONITOR
2aea				endif 
2aea			 
2aea			 
2aea 2a eb f9		ld hl, (cli_data_sp) 
2aed 11 25 f7		ld de, cli_data_stack 
2af0 ed 52		sbc hl,de 
2af2			 
2af2			; div by size of stack item 
2af2			 
2af2 5d			ld e,l 
2af3 0e 03		ld c, 3 
2af5 cd 5f 0f		call Div8 
2af8			 
2af8 6f			ld l,a 
2af9 26 00		ld h,0 
2afb			 
2afb			;srl h 
2afb			;rr l 
2afb			 
2afb cd 05 21			call forth_push_numhl 
2afe				NEXTW 
2afe c3 b2 24			jp macro_next 
2b01				endm 
# End of macro NEXTW
2b01			.OVER: 
2b01			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2b01 42				db WORD_SYS_CORE+46             
2b02 48 2b			dw .PAUSE            
2b04 05				db 4 + 1 
2b05 .. 00			db "OVER",0              
2b0a				endm 
# End of macro CWHEAD
2b0a			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
2b0a				if DEBUG_FORTH_WORDS_KEY 
2b0a					DMARK "OVR" 
2b0a f5				push af  
2b0b 3a 1f 2b			ld a, (.dmark)  
2b0e 32 68 fe			ld (debug_mark),a  
2b11 3a 20 2b			ld a, (.dmark+1)  
2b14 32 69 fe			ld (debug_mark+1),a  
2b17 3a 21 2b			ld a, (.dmark+2)  
2b1a 32 6a fe			ld (debug_mark+2),a  
2b1d 18 03			jr .pastdmark  
2b1f ..			.dmark: db "OVR"  
2b22 f1			.pastdmark: pop af  
2b23			endm  
# End of macro DMARK
2b23					CALLMONITOR 
2b23 cd 6c fe			call debug_vector  
2b26				endm  
# End of macro CALLMONITOR
2b26				endif 
2b26			 
2b26			; TODO Use os stack swap memory 
2b26				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b26 cd fc 22			call macro_dsp_valuehl 
2b29				endm 
# End of macro FORTH_DSP_VALUEHL
2b29 e5				push hl    ; n2 
2b2a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b2a cd b4 23			call macro_forth_dsp_pop 
2b2d				endm 
# End of macro FORTH_DSP_POP
2b2d			 
2b2d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b2d cd fc 22			call macro_dsp_valuehl 
2b30				endm 
# End of macro FORTH_DSP_VALUEHL
2b30 e5				push hl    ; n1 
2b31				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b31 cd b4 23			call macro_forth_dsp_pop 
2b34				endm 
# End of macro FORTH_DSP_POP
2b34			 
2b34 d1				pop de     ; n1 
2b35 e1				pop hl     ; n2 
2b36			 
2b36 d5				push de 
2b37 e5				push hl 
2b38 d5				push de 
2b39			 
2b39				; push back  
2b39			 
2b39 e1				pop hl 
2b3a cd 05 21			call forth_push_numhl 
2b3d e1				pop hl 
2b3e cd 05 21			call forth_push_numhl 
2b41 e1				pop hl 
2b42 cd 05 21			call forth_push_numhl 
2b45				NEXTW 
2b45 c3 b2 24			jp macro_next 
2b48				endm 
# End of macro NEXTW
2b48			 
2b48			.PAUSE: 
2b48			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2b48 43				db WORD_SYS_CORE+47             
2b49 7d 2b			dw .PAUSES            
2b4b 08				db 7 + 1 
2b4c .. 00			db "PAUSEMS",0              
2b54				endm 
# End of macro CWHEAD
2b54			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2b54				if DEBUG_FORTH_WORDS_KEY 
2b54					DMARK "PMS" 
2b54 f5				push af  
2b55 3a 69 2b			ld a, (.dmark)  
2b58 32 68 fe			ld (debug_mark),a  
2b5b 3a 6a 2b			ld a, (.dmark+1)  
2b5e 32 69 fe			ld (debug_mark+1),a  
2b61 3a 6b 2b			ld a, (.dmark+2)  
2b64 32 6a fe			ld (debug_mark+2),a  
2b67 18 03			jr .pastdmark  
2b69 ..			.dmark: db "PMS"  
2b6c f1			.pastdmark: pop af  
2b6d			endm  
# End of macro DMARK
2b6d					CALLMONITOR 
2b6d cd 6c fe			call debug_vector  
2b70				endm  
# End of macro CALLMONITOR
2b70				endif 
2b70				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b70 cd fc 22			call macro_dsp_valuehl 
2b73				endm 
# End of macro FORTH_DSP_VALUEHL
2b73			;		push hl    ; n2 
2b73				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b73 cd b4 23			call macro_forth_dsp_pop 
2b76				endm 
# End of macro FORTH_DSP_POP
2b76			;		pop hl 
2b76			 
2b76 7d				ld a, l 
2b77 cd c3 0c			call aDelayInMS 
2b7a			       NEXTW 
2b7a c3 b2 24			jp macro_next 
2b7d				endm 
# End of macro NEXTW
2b7d			.PAUSES:  
2b7d			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2b7d 44				db WORD_SYS_CORE+48             
2b7e ec 2b			dw .ROT            
2b80 06				db 5 + 1 
2b81 .. 00			db "PAUSE",0              
2b87				endm 
# End of macro CWHEAD
2b87			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2b87				if DEBUG_FORTH_WORDS_KEY 
2b87					DMARK "PAU" 
2b87 f5				push af  
2b88 3a 9c 2b			ld a, (.dmark)  
2b8b 32 68 fe			ld (debug_mark),a  
2b8e 3a 9d 2b			ld a, (.dmark+1)  
2b91 32 69 fe			ld (debug_mark+1),a  
2b94 3a 9e 2b			ld a, (.dmark+2)  
2b97 32 6a fe			ld (debug_mark+2),a  
2b9a 18 03			jr .pastdmark  
2b9c ..			.dmark: db "PAU"  
2b9f f1			.pastdmark: pop af  
2ba0			endm  
# End of macro DMARK
2ba0					CALLMONITOR 
2ba0 cd 6c fe			call debug_vector  
2ba3				endm  
# End of macro CALLMONITOR
2ba3				endif 
2ba3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2ba3 cd fc 22			call macro_dsp_valuehl 
2ba6				endm 
# End of macro FORTH_DSP_VALUEHL
2ba6			;		push hl    ; n2 
2ba6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2ba6 cd b4 23			call macro_forth_dsp_pop 
2ba9				endm 
# End of macro FORTH_DSP_POP
2ba9			;		pop hl 
2ba9 45				ld b, l 
2baa				if DEBUG_FORTH_WORDS 
2baa					DMARK "PAU" 
2baa f5				push af  
2bab 3a bf 2b			ld a, (.dmark)  
2bae 32 68 fe			ld (debug_mark),a  
2bb1 3a c0 2b			ld a, (.dmark+1)  
2bb4 32 69 fe			ld (debug_mark+1),a  
2bb7 3a c1 2b			ld a, (.dmark+2)  
2bba 32 6a fe			ld (debug_mark+2),a  
2bbd 18 03			jr .pastdmark  
2bbf ..			.dmark: db "PAU"  
2bc2 f1			.pastdmark: pop af  
2bc3			endm  
# End of macro DMARK
2bc3					CALLMONITOR 
2bc3 cd 6c fe			call debug_vector  
2bc6				endm  
# End of macro CALLMONITOR
2bc6				endif 
2bc6 c5			.pauses1:	push bc 
2bc7 cd de 0c			call delay1s 
2bca c1				pop bc 
2bcb				if DEBUG_FORTH_WORDS 
2bcb					DMARK "PA1" 
2bcb f5				push af  
2bcc 3a e0 2b			ld a, (.dmark)  
2bcf 32 68 fe			ld (debug_mark),a  
2bd2 3a e1 2b			ld a, (.dmark+1)  
2bd5 32 69 fe			ld (debug_mark+1),a  
2bd8 3a e2 2b			ld a, (.dmark+2)  
2bdb 32 6a fe			ld (debug_mark+2),a  
2bde 18 03			jr .pastdmark  
2be0 ..			.dmark: db "PA1"  
2be3 f1			.pastdmark: pop af  
2be4			endm  
# End of macro DMARK
2be4					CALLMONITOR 
2be4 cd 6c fe			call debug_vector  
2be7				endm  
# End of macro CALLMONITOR
2be7				endif 
2be7 10 dd			djnz .pauses1 
2be9			 
2be9			       NEXTW 
2be9 c3 b2 24			jp macro_next 
2bec				endm 
# End of macro NEXTW
2bec			.ROT: 
2bec			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2bec 45				db WORD_SYS_CORE+49             
2bed 3a 2c			dw .UWORDS            
2bef 04				db 3 + 1 
2bf0 .. 00			db "ROT",0              
2bf4				endm 
# End of macro CWHEAD
2bf4			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
2bf4				if DEBUG_FORTH_WORDS_KEY 
2bf4					DMARK "ROT" 
2bf4 f5				push af  
2bf5 3a 09 2c			ld a, (.dmark)  
2bf8 32 68 fe			ld (debug_mark),a  
2bfb 3a 0a 2c			ld a, (.dmark+1)  
2bfe 32 69 fe			ld (debug_mark+1),a  
2c01 3a 0b 2c			ld a, (.dmark+2)  
2c04 32 6a fe			ld (debug_mark+2),a  
2c07 18 03			jr .pastdmark  
2c09 ..			.dmark: db "ROT"  
2c0c f1			.pastdmark: pop af  
2c0d			endm  
# End of macro DMARK
2c0d					CALLMONITOR 
2c0d cd 6c fe			call debug_vector  
2c10				endm  
# End of macro CALLMONITOR
2c10				endif 
2c10			 
2c10			; TODO Use os stack swap memory 
2c10				FORTH_DSP_VALUEHL 
2c10 cd fc 22			call macro_dsp_valuehl 
2c13				endm 
# End of macro FORTH_DSP_VALUEHL
2c13 e5				push hl    ; u3  
2c14			 
2c14				FORTH_DSP_POP 
2c14 cd b4 23			call macro_forth_dsp_pop 
2c17				endm 
# End of macro FORTH_DSP_POP
2c17			 
2c17				FORTH_DSP_VALUEHL 
2c17 cd fc 22			call macro_dsp_valuehl 
2c1a				endm 
# End of macro FORTH_DSP_VALUEHL
2c1a e5				push hl     ; u2 
2c1b			 
2c1b				FORTH_DSP_POP 
2c1b cd b4 23			call macro_forth_dsp_pop 
2c1e				endm 
# End of macro FORTH_DSP_POP
2c1e			 
2c1e				FORTH_DSP_VALUEHL 
2c1e cd fc 22			call macro_dsp_valuehl 
2c21				endm 
# End of macro FORTH_DSP_VALUEHL
2c21 e5				push hl     ; u1 
2c22			 
2c22				FORTH_DSP_POP 
2c22 cd b4 23			call macro_forth_dsp_pop 
2c25				endm 
# End of macro FORTH_DSP_POP
2c25			 
2c25 c1				pop bc      ; u1 
2c26 e1				pop hl      ; u2 
2c27 d1				pop de      ; u3 
2c28			 
2c28			 
2c28 c5				push bc 
2c29 d5				push de 
2c2a e5				push hl 
2c2b			 
2c2b			 
2c2b e1				pop hl 
2c2c cd 05 21			call forth_push_numhl 
2c2f			 
2c2f e1				pop hl 
2c30 cd 05 21			call forth_push_numhl 
2c33			 
2c33 e1				pop hl 
2c34 cd 05 21			call forth_push_numhl 
2c37				 
2c37			 
2c37			 
2c37			 
2c37			 
2c37			 
2c37			       NEXTW 
2c37 c3 b2 24			jp macro_next 
2c3a				endm 
# End of macro NEXTW
2c3a			 
2c3a			.UWORDS: 
2c3a			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2c3a 50				db WORD_SYS_CORE+60             
2c3b fc 2c			dw .BP            
2c3d 07				db 6 + 1 
2c3e .. 00			db "UWORDS",0              
2c45				endm 
# End of macro CWHEAD
2c45			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2c45			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2c45			; | | Following the count are the individual words. 
2c45			; | | 
2c45			; | | e.g. UWORDS 
2c45			; | | BOX DIRLIST 2 
2c45			; | |  
2c45			; | | Can be used to save the words to storage via: 
2c45			; | | UWORDS $01 DO $01 APPEND LOOP 
2c45			if DEBUG_FORTH_WORDS_KEY 
2c45				DMARK "UWR" 
2c45 f5				push af  
2c46 3a 5a 2c			ld a, (.dmark)  
2c49 32 68 fe			ld (debug_mark),a  
2c4c 3a 5b 2c			ld a, (.dmark+1)  
2c4f 32 69 fe			ld (debug_mark+1),a  
2c52 3a 5c 2c			ld a, (.dmark+2)  
2c55 32 6a fe			ld (debug_mark+2),a  
2c58 18 03			jr .pastdmark  
2c5a ..			.dmark: db "UWR"  
2c5d f1			.pastdmark: pop af  
2c5e			endm  
# End of macro DMARK
2c5e				CALLMONITOR 
2c5e cd 6c fe			call debug_vector  
2c61				endm  
# End of macro CALLMONITOR
2c61			endif 
2c61 21 00 80			ld hl, baseram 
2c64				;ld hl, baseusermem 
2c64 01 00 00			ld bc, 0    ; start a counter 
2c67			 
2c67			; skip dict stub 
2c67			 
2c67 cd 03 26			call forth_tok_next 
2c6a			 
2c6a			 
2c6a			; while we have words to look for 
2c6a			 
2c6a 7e			.douscan:	ld a, (hl)      
2c6b			if DEBUG_FORTH_WORDS 
2c6b				DMARK "UWs" 
2c6b f5				push af  
2c6c 3a 80 2c			ld a, (.dmark)  
2c6f 32 68 fe			ld (debug_mark),a  
2c72 3a 81 2c			ld a, (.dmark+1)  
2c75 32 69 fe			ld (debug_mark+1),a  
2c78 3a 82 2c			ld a, (.dmark+2)  
2c7b 32 6a fe			ld (debug_mark+2),a  
2c7e 18 03			jr .pastdmark  
2c80 ..			.dmark: db "UWs"  
2c83 f1			.pastdmark: pop af  
2c84			endm  
# End of macro DMARK
2c84				CALLMONITOR 
2c84 cd 6c fe			call debug_vector  
2c87				endm  
# End of macro CALLMONITOR
2c87			endif 
2c87 fe 00			cp WORD_SYS_END 
2c89 28 4d			jr z, .udone 
2c8b fe 01			cp WORD_SYS_UWORD 
2c8d 20 44			jr nz, .nuword 
2c8f			 
2c8f			if DEBUG_FORTH_WORDS 
2c8f				DMARK "UWu" 
2c8f f5				push af  
2c90 3a a4 2c			ld a, (.dmark)  
2c93 32 68 fe			ld (debug_mark),a  
2c96 3a a5 2c			ld a, (.dmark+1)  
2c99 32 69 fe			ld (debug_mark+1),a  
2c9c 3a a6 2c			ld a, (.dmark+2)  
2c9f 32 6a fe			ld (debug_mark+2),a  
2ca2 18 03			jr .pastdmark  
2ca4 ..			.dmark: db "UWu"  
2ca7 f1			.pastdmark: pop af  
2ca8			endm  
# End of macro DMARK
2ca8				CALLMONITOR 
2ca8 cd 6c fe			call debug_vector  
2cab				endm  
# End of macro CALLMONITOR
2cab			endif 
2cab				; we have a uword so push its name to the stack 
2cab			 
2cab e5				push hl  ; save so we can move to next dict block 
2cac			 
2cac				; skip opcode 
2cac 23				inc hl  
2cad				; skip next ptr 
2cad 23				inc hl  
2cae 23				inc hl 
2caf				; skip len 
2caf 23				inc hl 
2cb0			if DEBUG_FORTH_WORDS 
2cb0				DMARK "UWt" 
2cb0 f5				push af  
2cb1 3a c5 2c			ld a, (.dmark)  
2cb4 32 68 fe			ld (debug_mark),a  
2cb7 3a c6 2c			ld a, (.dmark+1)  
2cba 32 69 fe			ld (debug_mark+1),a  
2cbd 3a c7 2c			ld a, (.dmark+2)  
2cc0 32 6a fe			ld (debug_mark+2),a  
2cc3 18 03			jr .pastdmark  
2cc5 ..			.dmark: db "UWt"  
2cc8 f1			.pastdmark: pop af  
2cc9			endm  
# End of macro DMARK
2cc9				CALLMONITOR 
2cc9 cd 6c fe			call debug_vector  
2ccc				endm  
# End of macro CALLMONITOR
2ccc			endif 
2ccc 03				inc bc 
2ccd			 
2ccd c5				push bc 
2cce cd 73 21			call forth_push_str 
2cd1 c1				pop bc 
2cd2			 
2cd2 e1				pop hl 	 
2cd3			 
2cd3 cd 03 26		.nuword:	call forth_tok_next 
2cd6 18 92			jr .douscan  
2cd8			 
2cd8			.udone:		 ; push count of uwords found 
2cd8 c5				push bc 
2cd9 e1				pop hl 
2cda			 
2cda			if DEBUG_FORTH_WORDS 
2cda				DMARK "UWc" 
2cda f5				push af  
2cdb 3a ef 2c			ld a, (.dmark)  
2cde 32 68 fe			ld (debug_mark),a  
2ce1 3a f0 2c			ld a, (.dmark+1)  
2ce4 32 69 fe			ld (debug_mark+1),a  
2ce7 3a f1 2c			ld a, (.dmark+2)  
2cea 32 6a fe			ld (debug_mark+2),a  
2ced 18 03			jr .pastdmark  
2cef ..			.dmark: db "UWc"  
2cf2 f1			.pastdmark: pop af  
2cf3			endm  
# End of macro DMARK
2cf3				CALLMONITOR 
2cf3 cd 6c fe			call debug_vector  
2cf6				endm  
# End of macro CALLMONITOR
2cf6			endif 
2cf6 cd 05 21			call forth_push_numhl 
2cf9			 
2cf9			 
2cf9			       NEXTW 
2cf9 c3 b2 24			jp macro_next 
2cfc				endm 
# End of macro NEXTW
2cfc			 
2cfc			.BP: 
2cfc			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2cfc 54				db WORD_SYS_CORE+64             
2cfd 36 2d			dw .MONITOR            
2cff 03				db 2 + 1 
2d00 .. 00			db "BP",0              
2d03				endm 
# End of macro CWHEAD
2d03			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2d03			; | | $00 Will enable the break points within specific code paths 
2d03			; | | $01 Will disable break points 
2d03			; | |  
2d03			; | | By default break points are off. Either the above can be used to enable them 
2d03			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2d03			; | | and on release of the pressed key a message will be disaplayed to notify 
2d03			; | | that break points are enabled. Pressing any key will then continue boot process. 
2d03				; get byte count 
2d03				if DEBUG_FORTH_WORDS_KEY 
2d03					DMARK "BP." 
2d03 f5				push af  
2d04 3a 18 2d			ld a, (.dmark)  
2d07 32 68 fe			ld (debug_mark),a  
2d0a 3a 19 2d			ld a, (.dmark+1)  
2d0d 32 69 fe			ld (debug_mark+1),a  
2d10 3a 1a 2d			ld a, (.dmark+2)  
2d13 32 6a fe			ld (debug_mark+2),a  
2d16 18 03			jr .pastdmark  
2d18 ..			.dmark: db "BP."  
2d1b f1			.pastdmark: pop af  
2d1c			endm  
# End of macro DMARK
2d1c					CALLMONITOR 
2d1c cd 6c fe			call debug_vector  
2d1f				endm  
# End of macro CALLMONITOR
2d1f				endif 
2d1f			 
2d1f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2d1f cd fc 22			call macro_dsp_valuehl 
2d22				endm 
# End of macro FORTH_DSP_VALUEHL
2d22			 
2d22			;		push hl 
2d22			 
2d22				; destroy value TOS 
2d22			 
2d22				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2d22 cd b4 23			call macro_forth_dsp_pop 
2d25				endm 
# End of macro FORTH_DSP_POP
2d25			 
2d25			;		pop hl 
2d25			 
2d25 3e 00			ld a,0 
2d27 bd				cp l 
2d28 28 06			jr z, .bpset 
2d2a			;		ld a, '*' 
2d2a cd 41 1a			call bp_off 
2d2d				NEXTW 
2d2d c3 b2 24			jp macro_next 
2d30				endm 
# End of macro NEXTW
2d30			 
2d30			.bpset:	 
2d30				;	ld (os_view_disable), a 
2d30 cd 35 1a			call bp_on 
2d33			 
2d33			 
2d33				NEXTW 
2d33 c3 b2 24			jp macro_next 
2d36				endm 
# End of macro NEXTW
2d36			 
2d36			 
2d36			.MONITOR: 
2d36			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2d36 55				db WORD_SYS_CORE+65             
2d37 67 2d			dw .MALLOC            
2d39 08				db 7 + 1 
2d3a .. 00			db "MONITOR",0              
2d42				endm 
# End of macro CWHEAD
2d42			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2d42			; | | At start the current various registers will be displayed with contents. 
2d42			; | | Top right corner will show the most recent debug marker seen. 
2d42			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2d42			; | | and the return stack pointer (RSP). 
2d42			; | | Pressing: 
2d42			; | |    1 - Initial screen 
2d42			; | |    2 - Display a data dump of HL 
2d42			; | |    3 - Display a data dump of DE 
2d42			; | |    4 - Display a data dump of BC 
2d42			; | |    5 - Display a data dump of HL 
2d42			; | |    6 - Display a data dump of DSP 
2d42			; | |    7 - Display a data dump of RSP 
2d42			; | |    8 - Display a data dump of what is at DSP 
2d42			; | |    9 - Display a data dump of what is at RSP 
2d42			; | |    0 - Exit monitor and continue running. This will also enable break points 
2d42			; | |    * - Disable break points 
2d42			; | |    # - Enter traditional monitor mode 
2d42			; | | 
2d42			; | | Monitor Mode 
2d42			; | | ------------ 
2d42			; | | A prompt of '>' will be shown for various commands: 
2d42			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2d42			; | |    C - Continue display a data dump from the last set address 
2d42			; | |    M xxxx - Set start of memory edit at address xx 
2d42			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2d42			; | |    Q - Return to previous 
2d42				if DEBUG_FORTH_WORDS_KEY 
2d42					DMARK "MON" 
2d42 f5				push af  
2d43 3a 57 2d			ld a, (.dmark)  
2d46 32 68 fe			ld (debug_mark),a  
2d49 3a 58 2d			ld a, (.dmark+1)  
2d4c 32 69 fe			ld (debug_mark+1),a  
2d4f 3a 59 2d			ld a, (.dmark+2)  
2d52 32 6a fe			ld (debug_mark+2),a  
2d55 18 03			jr .pastdmark  
2d57 ..			.dmark: db "MON"  
2d5a f1			.pastdmark: pop af  
2d5b			endm  
# End of macro DMARK
2d5b					CALLMONITOR 
2d5b cd 6c fe			call debug_vector  
2d5e				endm  
# End of macro CALLMONITOR
2d5e				endif 
2d5e			;		ld a, 0 
2d5e			;		ld (os_view_disable), a 
2d5e cd 35 1a			call bp_on 
2d61			 
2d61				CALLMONITOR 
2d61 cd 6c fe			call debug_vector  
2d64				endm  
# End of macro CALLMONITOR
2d64			 
2d64			;	call monitor 
2d64			 
2d64				NEXTW 
2d64 c3 b2 24			jp macro_next 
2d67				endm 
# End of macro NEXTW
2d67			 
2d67			 
2d67			.MALLOC: 
2d67			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2d67 56				db WORD_SYS_CORE+66             
2d68 90 2d			dw .MALLOC2            
2d6a 06				db 5 + 1 
2d6b .. 00			db "ALLOT",0              
2d71				endm 
# End of macro CWHEAD
2d71			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2d71				if DEBUG_FORTH_WORDS_KEY 
2d71					DMARK "ALL" 
2d71 f5				push af  
2d72 3a 86 2d			ld a, (.dmark)  
2d75 32 68 fe			ld (debug_mark),a  
2d78 3a 87 2d			ld a, (.dmark+1)  
2d7b 32 69 fe			ld (debug_mark+1),a  
2d7e 3a 88 2d			ld a, (.dmark+2)  
2d81 32 6a fe			ld (debug_mark+2),a  
2d84 18 03			jr .pastdmark  
2d86 ..			.dmark: db "ALL"  
2d89 f1			.pastdmark: pop af  
2d8a			endm  
# End of macro DMARK
2d8a					CALLMONITOR 
2d8a cd 6c fe			call debug_vector  
2d8d				endm  
# End of macro CALLMONITOR
2d8d				endif 
2d8d c3 b7 2d			jp .mallocc 
2d90			.MALLOC2: 
2d90			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2d90 56				db WORD_SYS_CORE+66             
2d91 ce 2d			dw .FREE            
2d93 07				db 6 + 1 
2d94 .. 00			db "MALLOC",0              
2d9b				endm 
# End of macro CWHEAD
2d9b			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2d9b				; get byte count 
2d9b				if DEBUG_FORTH_WORDS_KEY 
2d9b					DMARK "MAL" 
2d9b f5				push af  
2d9c 3a b0 2d			ld a, (.dmark)  
2d9f 32 68 fe			ld (debug_mark),a  
2da2 3a b1 2d			ld a, (.dmark+1)  
2da5 32 69 fe			ld (debug_mark+1),a  
2da8 3a b2 2d			ld a, (.dmark+2)  
2dab 32 6a fe			ld (debug_mark+2),a  
2dae 18 03			jr .pastdmark  
2db0 ..			.dmark: db "MAL"  
2db3 f1			.pastdmark: pop af  
2db4			endm  
# End of macro DMARK
2db4					CALLMONITOR 
2db4 cd 6c fe			call debug_vector  
2db7				endm  
# End of macro CALLMONITOR
2db7				endif 
2db7			.mallocc: 
2db7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2db7 cd fc 22			call macro_dsp_valuehl 
2dba				endm 
# End of macro FORTH_DSP_VALUEHL
2dba			 
2dba			;		push hl 
2dba			 
2dba				; destroy value TOS 
2dba			 
2dba				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2dba cd b4 23			call macro_forth_dsp_pop 
2dbd				endm 
# End of macro FORTH_DSP_POP
2dbd			 
2dbd			;		pop hl 
2dbd cd 96 14			call malloc 
2dc0			if DEBUG_FORTH_MALLOC_GUARD 
2dc0 f5				push af 
2dc1 cd f8 0f			call ishlzero 
2dc4			;		ld a, l 
2dc4			;		add h 
2dc4			;		cp 0 
2dc4 f1				pop af 
2dc5				 
2dc5 cc 48 5e			call z,malloc_error 
2dc8			endif 
2dc8			 
2dc8 cd 05 21			call forth_push_numhl 
2dcb				NEXTW 
2dcb c3 b2 24			jp macro_next 
2dce				endm 
# End of macro NEXTW
2dce			 
2dce			.FREE: 
2dce			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2dce 57				db WORD_SYS_CORE+67             
2dcf ff 2d			dw .LIST            
2dd1 05				db 4 + 1 
2dd2 .. 00			db "FREE",0              
2dd7				endm 
# End of macro CWHEAD
2dd7			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2dd7				if DEBUG_FORTH_WORDS_KEY 
2dd7					DMARK "FRE" 
2dd7 f5				push af  
2dd8 3a ec 2d			ld a, (.dmark)  
2ddb 32 68 fe			ld (debug_mark),a  
2dde 3a ed 2d			ld a, (.dmark+1)  
2de1 32 69 fe			ld (debug_mark+1),a  
2de4 3a ee 2d			ld a, (.dmark+2)  
2de7 32 6a fe			ld (debug_mark+2),a  
2dea 18 03			jr .pastdmark  
2dec ..			.dmark: db "FRE"  
2def f1			.pastdmark: pop af  
2df0			endm  
# End of macro DMARK
2df0					CALLMONITOR 
2df0 cd 6c fe			call debug_vector  
2df3				endm  
# End of macro CALLMONITOR
2df3				endif 
2df3				; get address 
2df3			 
2df3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2df3 cd fc 22			call macro_dsp_valuehl 
2df6				endm 
# End of macro FORTH_DSP_VALUEHL
2df6			 
2df6			;		push hl 
2df6			 
2df6				; destroy value TOS 
2df6			 
2df6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2df6 cd b4 23			call macro_forth_dsp_pop 
2df9				endm 
# End of macro FORTH_DSP_POP
2df9			 
2df9			;		pop hl 
2df9			if FORTH_ENABLE_MALLOCFREE 
2df9 cd 60 15			call free 
2dfc			endif 
2dfc				NEXTW 
2dfc c3 b2 24			jp macro_next 
2dff				endm 
# End of macro NEXTW
2dff			.LIST: 
2dff			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2dff 5c				db WORD_SYS_CORE+72             
2e00 ed 2f			dw .FORGET            
2e02 05				db 4 + 1 
2e03 .. 00			db "LIST",0              
2e08				endm 
# End of macro CWHEAD
2e08			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2e08			; | | The quoted word must be in upper case. 
2e08			if DEBUG_FORTH_WORDS_KEY 
2e08				DMARK "LST" 
2e08 f5				push af  
2e09 3a 1d 2e			ld a, (.dmark)  
2e0c 32 68 fe			ld (debug_mark),a  
2e0f 3a 1e 2e			ld a, (.dmark+1)  
2e12 32 69 fe			ld (debug_mark+1),a  
2e15 3a 1f 2e			ld a, (.dmark+2)  
2e18 32 6a fe			ld (debug_mark+2),a  
2e1b 18 03			jr .pastdmark  
2e1d ..			.dmark: db "LST"  
2e20 f1			.pastdmark: pop af  
2e21			endm  
# End of macro DMARK
2e21				CALLMONITOR 
2e21 cd 6c fe			call debug_vector  
2e24				endm  
# End of macro CALLMONITOR
2e24			endif 
2e24			 
2e24				FORTH_DSP_VALUEHL 
2e24 cd fc 22			call macro_dsp_valuehl 
2e27				endm 
# End of macro FORTH_DSP_VALUEHL
2e27			 
2e27 e5				push hl 
2e28				FORTH_DSP_POP 
2e28 cd b4 23			call macro_forth_dsp_pop 
2e2b				endm 
# End of macro FORTH_DSP_POP
2e2b c1				pop bc 
2e2c			 
2e2c			; Start format of scratch string 
2e2c			 
2e2c 21 be f1			ld hl, scratch 
2e2f			 
2e2f 3e 3a			ld a, ':' 
2e31 77				ld (hl),a 
2e32 23				inc hl 
2e33 3e 20			ld a, ' ' 
2e35 77				ld (hl), a 
2e36			 
2e36				; Get ptr to the word we need to look up 
2e36			 
2e36			;		FORTH_DSP_VALUEHL 
2e36				;v5 FORTH_DSP_VALUE 
2e36			; TODO type check 
2e36			;		inc hl    ; Skip type check  
2e36			;		push hl 
2e36			;		ex de, hl    ; put into DE 
2e36			 
2e36			 
2e36 21 00 80			ld hl, baseram 
2e39				;ld hl, baseusermem 
2e39			 
2e39 e5			push hl   ; sacreifical push 
2e3a			 
2e3a			.ldouscanm: 
2e3a e1			pop hl 
2e3b			.ldouscan: 
2e3b			if DEBUG_FORTH_WORDS 
2e3b				DMARK "LSs" 
2e3b f5				push af  
2e3c 3a 50 2e			ld a, (.dmark)  
2e3f 32 68 fe			ld (debug_mark),a  
2e42 3a 51 2e			ld a, (.dmark+1)  
2e45 32 69 fe			ld (debug_mark+1),a  
2e48 3a 52 2e			ld a, (.dmark+2)  
2e4b 32 6a fe			ld (debug_mark+2),a  
2e4e 18 03			jr .pastdmark  
2e50 ..			.dmark: db "LSs"  
2e53 f1			.pastdmark: pop af  
2e54			endm  
# End of macro DMARK
2e54				CALLMONITOR 
2e54 cd 6c fe			call debug_vector  
2e57				endm  
# End of macro CALLMONITOR
2e57			endif 
2e57			; skip dict stub 
2e57 cd 03 26			call forth_tok_next 
2e5a			 
2e5a			 
2e5a			; while we have words to look for 
2e5a			 
2e5a 7e			ld a, (hl)      
2e5b			if DEBUG_FORTH_WORDS 
2e5b				DMARK "LSk" 
2e5b f5				push af  
2e5c 3a 70 2e			ld a, (.dmark)  
2e5f 32 68 fe			ld (debug_mark),a  
2e62 3a 71 2e			ld a, (.dmark+1)  
2e65 32 69 fe			ld (debug_mark+1),a  
2e68 3a 72 2e			ld a, (.dmark+2)  
2e6b 32 6a fe			ld (debug_mark+2),a  
2e6e 18 03			jr .pastdmark  
2e70 ..			.dmark: db "LSk"  
2e73 f1			.pastdmark: pop af  
2e74			endm  
# End of macro DMARK
2e74				CALLMONITOR 
2e74 cd 6c fe			call debug_vector  
2e77				endm  
# End of macro CALLMONITOR
2e77			endif 
2e77				;cp WORD_SYS_END 
2e77				;jp z, .lunotfound 
2e77			 
2e77					; if we hit non uwords then gone too far 
2e77 fe 01				cp WORD_SYS_UWORD 
2e79 c2 a9 2f				jp nz, .lunotfound 
2e7c			 
2e7c				if DEBUG_FORTH_WORDS 
2e7c					DMARK "LSu" 
2e7c f5				push af  
2e7d 3a 91 2e			ld a, (.dmark)  
2e80 32 68 fe			ld (debug_mark),a  
2e83 3a 92 2e			ld a, (.dmark+1)  
2e86 32 69 fe			ld (debug_mark+1),a  
2e89 3a 93 2e			ld a, (.dmark+2)  
2e8c 32 6a fe			ld (debug_mark+2),a  
2e8f 18 03			jr .pastdmark  
2e91 ..			.dmark: db "LSu"  
2e94 f1			.pastdmark: pop af  
2e95			endm  
# End of macro DMARK
2e95					CALLMONITOR 
2e95 cd 6c fe			call debug_vector  
2e98				endm  
# End of macro CALLMONITOR
2e98				endif 
2e98			 
2e98					; found a uword but is it the one we want... 
2e98			 
2e98 c5					push bc     ; uword to find is on bc 
2e99 d1					pop de 
2e9a			 
2e9a e5					push hl  ; to save the ptr 
2e9b			 
2e9b					; skip opcode 
2e9b 23					inc hl  
2e9c					; skip next ptr 
2e9c 23					inc hl  
2e9d 23					inc hl 
2e9e					; skip len 
2e9e 23					inc hl 
2e9f			 
2e9f				if DEBUG_FORTH_WORDS 
2e9f					DMARK "LSc" 
2e9f f5				push af  
2ea0 3a b4 2e			ld a, (.dmark)  
2ea3 32 68 fe			ld (debug_mark),a  
2ea6 3a b5 2e			ld a, (.dmark+1)  
2ea9 32 69 fe			ld (debug_mark+1),a  
2eac 3a b6 2e			ld a, (.dmark+2)  
2eaf 32 6a fe			ld (debug_mark+2),a  
2eb2 18 03			jr .pastdmark  
2eb4 ..			.dmark: db "LSc"  
2eb7 f1			.pastdmark: pop af  
2eb8			endm  
# End of macro DMARK
2eb8					CALLMONITOR 
2eb8 cd 6c fe			call debug_vector  
2ebb				endm  
# End of macro CALLMONITOR
2ebb				endif 
2ebb cd 65 14				call strcmp 
2ebe c2 3a 2e				jp nz, .ldouscanm 
2ec1				 
2ec1			 
2ec1			 
2ec1					; we have a uword so push its name to the stack 
2ec1			 
2ec1			;	   	push hl  ; save so we can move to next dict block 
2ec1 e1			pop hl 
2ec2			 
2ec2				if DEBUG_FORTH_WORDS 
2ec2					DMARK "LSm" 
2ec2 f5				push af  
2ec3 3a d7 2e			ld a, (.dmark)  
2ec6 32 68 fe			ld (debug_mark),a  
2ec9 3a d8 2e			ld a, (.dmark+1)  
2ecc 32 69 fe			ld (debug_mark+1),a  
2ecf 3a d9 2e			ld a, (.dmark+2)  
2ed2 32 6a fe			ld (debug_mark+2),a  
2ed5 18 03			jr .pastdmark  
2ed7 ..			.dmark: db "LSm"  
2eda f1			.pastdmark: pop af  
2edb			endm  
# End of macro DMARK
2edb					CALLMONITOR 
2edb cd 6c fe			call debug_vector  
2ede				endm  
# End of macro CALLMONITOR
2ede				endif 
2ede			 
2ede					; skip opcode 
2ede 23					inc hl  
2edf					; skip next ptr 
2edf 23					inc hl  
2ee0 23					inc hl 
2ee1					; skip len 
2ee1 7e					ld a, (hl)   ; save length to add 
2ee2				if DEBUG_FORTH_WORDS 
2ee2					DMARK "LS2" 
2ee2 f5				push af  
2ee3 3a f7 2e			ld a, (.dmark)  
2ee6 32 68 fe			ld (debug_mark),a  
2ee9 3a f8 2e			ld a, (.dmark+1)  
2eec 32 69 fe			ld (debug_mark+1),a  
2eef 3a f9 2e			ld a, (.dmark+2)  
2ef2 32 6a fe			ld (debug_mark+2),a  
2ef5 18 03			jr .pastdmark  
2ef7 ..			.dmark: db "LS2"  
2efa f1			.pastdmark: pop af  
2efb			endm  
# End of macro DMARK
2efb					CALLMONITOR 
2efb cd 6c fe			call debug_vector  
2efe				endm  
# End of macro CALLMONITOR
2efe				endif 
2efe			 
2efe					; save this location 
2efe				 
2efe e5					push hl 
2eff			 
2eff 23					inc hl 
2f00 11 c0 f1				ld de, scratch+2 
2f03 4f					ld c, a 
2f04 06 00				ld b, 0 
2f06			 
2f06				if DEBUG_FORTH_WORDS 
2f06					DMARK "LSn" 
2f06 f5				push af  
2f07 3a 1b 2f			ld a, (.dmark)  
2f0a 32 68 fe			ld (debug_mark),a  
2f0d 3a 1c 2f			ld a, (.dmark+1)  
2f10 32 69 fe			ld (debug_mark+1),a  
2f13 3a 1d 2f			ld a, (.dmark+2)  
2f16 32 6a fe			ld (debug_mark+2),a  
2f19 18 03			jr .pastdmark  
2f1b ..			.dmark: db "LSn"  
2f1e f1			.pastdmark: pop af  
2f1f			endm  
# End of macro DMARK
2f1f					CALLMONITOR 
2f1f cd 6c fe			call debug_vector  
2f22				endm  
# End of macro CALLMONITOR
2f22				endif 
2f22			 
2f22					; copy uword name to scratch 
2f22			 
2f22 ed b0				ldir 
2f24			 
2f24 1b					dec de 
2f25 3e 20				ld a, ' '    ; change null to space 
2f27 12					ld (de), a 
2f28			 
2f28 13					inc de 
2f29			 
2f29 d5					push de 
2f2a c1					pop bc     ; move scratch pointer to end of word name and save it 
2f2b			 
2f2b e1					pop hl 
2f2c 7e					ld a, (hl) 
2f2d					;inc hl 
2f2d					; skip word string 
2f2d cd cf 0f				call addatohl 
2f30			 
2f30 23					inc hl 
2f31			 
2f31				if DEBUG_FORTH_WORDS 
2f31					DMARK "LS3" 
2f31 f5				push af  
2f32 3a 46 2f			ld a, (.dmark)  
2f35 32 68 fe			ld (debug_mark),a  
2f38 3a 47 2f			ld a, (.dmark+1)  
2f3b 32 69 fe			ld (debug_mark+1),a  
2f3e 3a 48 2f			ld a, (.dmark+2)  
2f41 32 6a fe			ld (debug_mark+2),a  
2f44 18 03			jr .pastdmark  
2f46 ..			.dmark: db "LS3"  
2f49 f1			.pastdmark: pop af  
2f4a			endm  
# End of macro DMARK
2f4a					CALLMONITOR 
2f4a cd 6c fe			call debug_vector  
2f4d				endm  
# End of macro CALLMONITOR
2f4d				endif 
2f4d					; should now be at the start of the machine code to setup the eval of the uword 
2f4d					; now locate the ptr to the string defintion 
2f4d			 
2f4d					; skip ld hl, 
2f4d					; then load the ptr 
2f4d			; TODO use get from hl ptr 
2f4d 23					inc hl 
2f4e 5e					ld e, (hl) 
2f4f 23					inc hl 
2f50 56					ld d, (hl) 
2f51 eb					ex de, hl 
2f52			 
2f52			 
2f52				if DEBUG_FORTH_WORDS 
2f52					DMARK "LSt" 
2f52 f5				push af  
2f53 3a 67 2f			ld a, (.dmark)  
2f56 32 68 fe			ld (debug_mark),a  
2f59 3a 68 2f			ld a, (.dmark+1)  
2f5c 32 69 fe			ld (debug_mark+1),a  
2f5f 3a 69 2f			ld a, (.dmark+2)  
2f62 32 6a fe			ld (debug_mark+2),a  
2f65 18 03			jr .pastdmark  
2f67 ..			.dmark: db "LSt"  
2f6a f1			.pastdmark: pop af  
2f6b			endm  
# End of macro DMARK
2f6b					CALLMONITOR 
2f6b cd 6c fe			call debug_vector  
2f6e				endm  
# End of macro CALLMONITOR
2f6e				endif 
2f6e			 
2f6e			; cant push right now due to tokenised strings  
2f6e			 
2f6e			; get the destination of where to copy this definition to. 
2f6e			 
2f6e c5					push bc 
2f6f d1					pop de 
2f70			 
2f70 7e			.listl:         ld a,(hl) 
2f71 fe 00				cp 0 
2f73 28 09				jr z, .lreplsp     ; replace zero with space 
2f75					;cp FORTH_END_BUFFER 
2f75 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2f77 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2f79				 
2f79					; just copy this char as is then 
2f79			 
2f79 12					ld (de), a 
2f7a			 
2f7a 23			.listnxt:	inc hl 
2f7b 13					inc de 
2f7c 18 f2				jr .listl 
2f7e			 
2f7e 3e 20		.lreplsp:	ld a,' ' 
2f80 12					ld (de), a 
2f81 18 f7				jr .listnxt 
2f83			 
2f83			; close up uword def 
2f83			 
2f83			.listdone: 
2f83 12					ld (de), a 
2f84 13					inc de 
2f85 3e 00				ld a, 0 
2f87 12					ld (de), a 
2f88			 
2f88			; now have def so clean up and push to stack 
2f88			 
2f88 21 be f1				ld hl, scratch 
2f8b				if DEBUG_FORTH_WORDS 
2f8b					DMARK "Ltp" 
2f8b f5				push af  
2f8c 3a a0 2f			ld a, (.dmark)  
2f8f 32 68 fe			ld (debug_mark),a  
2f92 3a a1 2f			ld a, (.dmark+1)  
2f95 32 69 fe			ld (debug_mark+1),a  
2f98 3a a2 2f			ld a, (.dmark+2)  
2f9b 32 6a fe			ld (debug_mark+2),a  
2f9e 18 03			jr .pastdmark  
2fa0 ..			.dmark: db "Ltp"  
2fa3 f1			.pastdmark: pop af  
2fa4			endm  
# End of macro DMARK
2fa4					CALLMONITOR 
2fa4 cd 6c fe			call debug_vector  
2fa7				endm  
# End of macro CALLMONITOR
2fa7				endif 
2fa7			 
2fa7 18 1f			jr .listpush 
2fa9			 
2fa9			;.lnuword:	pop hl 
2fa9			;		call forth_tok_next 
2fa9			;		jp .ldouscan  
2fa9			 
2fa9			.lunotfound:		  
2fa9			 
2fa9				if DEBUG_FORTH_WORDS 
2fa9					DMARK "LSn" 
2fa9 f5				push af  
2faa 3a be 2f			ld a, (.dmark)  
2fad 32 68 fe			ld (debug_mark),a  
2fb0 3a bf 2f			ld a, (.dmark+1)  
2fb3 32 69 fe			ld (debug_mark+1),a  
2fb6 3a c0 2f			ld a, (.dmark+2)  
2fb9 32 6a fe			ld (debug_mark+2),a  
2fbc 18 03			jr .pastdmark  
2fbe ..			.dmark: db "LSn"  
2fc1 f1			.pastdmark: pop af  
2fc2			endm  
# End of macro DMARK
2fc2					CALLMONITOR 
2fc2 cd 6c fe			call debug_vector  
2fc5				endm  
# End of macro CALLMONITOR
2fc5				endif 
2fc5			 
2fc5					 
2fc5			;		FORTH_DSP_POP 
2fc5			;		ld hl, .luno 
2fc5			 
2fc5					NEXTW			 
2fc5 c3 b2 24			jp macro_next 
2fc8				endm 
# End of macro NEXTW
2fc8			 
2fc8			.listpush: 
2fc8				if DEBUG_FORTH_WORDS 
2fc8					DMARK "LS>" 
2fc8 f5				push af  
2fc9 3a dd 2f			ld a, (.dmark)  
2fcc 32 68 fe			ld (debug_mark),a  
2fcf 3a de 2f			ld a, (.dmark+1)  
2fd2 32 69 fe			ld (debug_mark+1),a  
2fd5 3a df 2f			ld a, (.dmark+2)  
2fd8 32 6a fe			ld (debug_mark+2),a  
2fdb 18 03			jr .pastdmark  
2fdd ..			.dmark: db "LS>"  
2fe0 f1			.pastdmark: pop af  
2fe1			endm  
# End of macro DMARK
2fe1					CALLMONITOR 
2fe1 cd 6c fe			call debug_vector  
2fe4				endm  
# End of macro CALLMONITOR
2fe4				endif 
2fe4 cd 73 21				call forth_push_str 
2fe7			 
2fe7			 
2fe7			 
2fe7					NEXTW 
2fe7 c3 b2 24			jp macro_next 
2fea				endm 
# End of macro NEXTW
2fea			 
2fea			;.luno:    db "Word not found",0 
2fea			 
2fea			 
2fea			 
2fea			 
2fea			 
2fea			;		push hl   ; save pointer to start of uword def string 
2fea			; 
2fea			;; look for FORTH_EOL_LINE 
2fea			;		ld a, FORTH_END_BUFFER 
2fea			;		call strlent 
2fea			; 
2fea			;		inc hl		 ; space for coln def 
2fea			;		inc hl 
2fea			;		inc hl          ; space for terms 
2fea			;		inc hl 
2fea			; 
2fea			;		ld a, 20   ; TODO get actual length 
2fea			;		call addatohl    ; include a random amount of room for the uword name 
2fea			; 
2fea			;		 
2fea			;	if DEBUG_FORTH_WORDS 
2fea			;		DMARK "Lt1" 
2fea			;		CALLMONITOR 
2fea			;	endif 
2fea			;		 
2fea			; 
2fea			;; malloc space for the string because we cant change it 
2fea			; 
2fea			;		call malloc 
2fea			;	if DEBUG_FORTH_MALLOC_GUARD 
2fea			;		push af 
2fea			;		call ishlzero 
2fea			;		pop af 
2fea			;		 
2fea			;		call z,malloc_error 
2fea			;	endif 
2fea			; 
2fea			;	if DEBUG_FORTH_WORDS 
2fea			;		DMARK "Lt2" 
2fea			;		CALLMONITOR 
2fea			;	endif 
2fea			;		pop de 
2fea			;		push hl    ; push the malloc to release later 
2fea			;		push hl   ;  push back a copy for the later stack push 
2fea			;		 
2fea			;; copy the string swapping out the zero terms for spaces 
2fea			; 
2fea			;		; de has our source 
2fea			;		; hl has our dest 
2fea			; 
2fea			;; add the coln def 
2fea			; 
2fea			;		ld a, ':' 
2fea			;		ld (hl), a 
2fea			;		inc hl 
2fea			;		ld a, ' ' 
2fea			;		ld (hl), a 
2fea			;		inc hl 
2fea			; 
2fea			;; add the uname word 
2fea			;		push de   ; save our string for now 
2fea			;		ex de, hl 
2fea			; 
2fea			;		FORTH_DSP_VALUE 
2fea			;		;v5 FORTH_DSP_VALUE 
2fea			; 
2fea			;		inc hl   ; skip type but we know by now this is OK 
2fea			; 
2fea			;.luword:	ld a,(hl) 
2fea			;		cp 0 
2fea			;		jr z, .luword2 
2fea			;		ld (de), a 
2fea			;		inc de 
2fea			;		inc hl 
2fea			;		jr .luword 
2fea			; 
2fea			;.luword2:	ld a, ' ' 
2fea			;		ld (de), a 
2fea			;;		inc hl 
2fea			;;		inc de 
2fea			;;		ld (de), a 
2fea			;;		inc hl 
2fea			;		inc de 
2fea			; 
2fea			;		ex de, hl 
2fea			;		pop de 
2fea			;		 
2fea			;		 
2fea			; 
2fea			;; detoken that string and copy it 
2fea			; 
2fea			;	if DEBUG_FORTH_WORDS 
2fea			;		DMARK "Lt2" 
2fea			;		CALLMONITOR 
2fea			;	endif 
2fea			;.ldetok:	ld a, (de) 
2fea			;		cp FORTH_END_BUFFER 
2fea			;		jr z, .ldetokend 
2fea			;		; swap out any zero term for space 
2fea			;		cp 0 
2fea			;		jr nz, .ldetoknext 
2fea			;		ld a, ' ' 
2fea			; 
2fea			;	if DEBUG_FORTH_WORDS 
2fea			;		DMARK "LtS" 
2fea			;		CALLMONITOR 
2fea			;	endif 
2fea			;.ldetoknext:	ld (hl), a 
2fea			;		inc de 
2fea			;		inc hl 
2fea			;		jr .ldetok 
2fea			; 
2fea			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2fea			;		ld (hl), a  
2fea			; 
2fea			;; free that temp malloc 
2fea			; 
2fea			;		pop hl    
2fea			; 
2fea			;	if DEBUG_FORTH_WORDS 
2fea			;		DMARK "Lt4" 
2fea			;		CALLMONITOR 
2fea			;	endif 
2fea			;		call forth_apushstrhl 
2fea			; 
2fea			;		; get rid of temp malloc area 
2fea			; 
2fea			;		pop hl 
2fea			;		call free 
2fea			; 
2fea			;		jr .ludone 
2fea			; 
2fea			;.lnuword:	pop hl 
2fea			;		call forth_tok_next 
2fea			;		jp .ldouscan  
2fea			; 
2fea			;.ludone:		 pop hl 
2fea			; 
2fea					NEXTW 
2fea c3 b2 24			jp macro_next 
2fed				endm 
# End of macro NEXTW
2fed			 
2fed			.FORGET: 
2fed				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2fed 5d				db WORD_SYS_CORE+73             
2fee 66 30			dw .NOP            
2ff0 07				db 6 + 1 
2ff1 .. 00			db "FORGET",0              
2ff8				endm 
# End of macro CWHEAD
2ff8			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2ff8			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quote uword name must be in caps. 
2ff8			; | |  
2ff8			; | | e.g. "MORE" forget 
2ff8					if DEBUG_FORTH_WORDS_KEY 
2ff8						DMARK "FRG" 
2ff8 f5				push af  
2ff9 3a 0d 30			ld a, (.dmark)  
2ffc 32 68 fe			ld (debug_mark),a  
2fff 3a 0e 30			ld a, (.dmark+1)  
3002 32 69 fe			ld (debug_mark+1),a  
3005 3a 0f 30			ld a, (.dmark+2)  
3008 32 6a fe			ld (debug_mark+2),a  
300b 18 03			jr .pastdmark  
300d ..			.dmark: db "FRG"  
3010 f1			.pastdmark: pop af  
3011			endm  
# End of macro DMARK
3011						CALLMONITOR 
3011 cd 6c fe			call debug_vector  
3014				endm  
# End of macro CALLMONITOR
3014					endif 
3014			 
3014				; find uword 
3014			        ; update start of word with "_" 
3014				; replace uword with deleted flag 
3014			 
3014			 
3014			;	if DEBUG_FORTH_WORDS 
3014			;		DMARK "FOG" 
3014			;		CALLMONITOR 
3014			;	endif 
3014			 
3014			 
3014					; Get ptr to the word we need to look up 
3014			 
3014					FORTH_DSP_VALUEHL 
3014 cd fc 22			call macro_dsp_valuehl 
3017				endm 
# End of macro FORTH_DSP_VALUEHL
3017					;v5 FORTH_DSP_VALUE 
3017				; TODO type check 
3017			;		inc hl    ; Skip type check  
3017 e5					push hl 
3018 c1					pop bc 
3019			;		ex de, hl    ; put into DE 
3019			 
3019			 
3019 21 00 80				ld hl, baseram 
301c					;ld hl, baseusermem 
301c			 
301c				; skip dict stub 
301c			;	call forth_tok_next 
301c e5			push hl   ; sacreifical push 
301d			 
301d			.fldouscanm: 
301d e1				pop hl 
301e			.fldouscan: 
301e			;	if DEBUG_FORTH_WORDS 
301e			;		DMARK "LSs" 
301e			;		CALLMONITOR 
301e			;	endif 
301e				; skip dict stub 
301e cd 03 26				call forth_tok_next 
3021			 
3021			 
3021			; while we have words to look for 
3021			 
3021 7e				ld a, (hl)      
3022			;	if DEBUG_FORTH_WORDS 
3022			;		DMARK "LSk" 
3022			;		CALLMONITOR 
3022			;	endif 
3022 fe 00				cp WORD_SYS_END 
3024 ca 60 30				jp z, .flunotfound 
3027 fe 01				cp WORD_SYS_UWORD 
3029 c2 1e 30				jp nz, .fldouscan 
302c			 
302c			;	if DEBUG_FORTH_WORDS 
302c			;		DMARK "LSu" 
302c			;		CALLMONITOR 
302c			;	endif 
302c			 
302c					; found a uword but is it the one we want... 
302c			 
302c c5					push bc     ; uword to find is on bc 
302d d1					pop de 
302e			 
302e e5					push hl  ; to save the ptr 
302f			 
302f					; skip opcode 
302f 23					inc hl  
3030					; skip next ptr 
3030 23					inc hl  
3031 23					inc hl 
3032					; skip len 
3032 23					inc hl 
3033			 
3033			;	if DEBUG_FORTH_WORDS 
3033			;		DMARK "LSc" 
3033			;		CALLMONITOR 
3033			;	endif 
3033 cd 65 14				call strcmp 
3036 c2 1d 30				jp nz, .fldouscanm 
3039			; 
3039			; 
3039			;; while we have words to look for 
3039			; 
3039			;.fdouscan:	ld a, (hl)      
3039			;	if DEBUG_FORTH_WORDS 
3039			;		DMARK "LSs" 
3039			;		CALLMONITOR 
3039			;	endif 
3039			;		cp WORD_SYS_END 
3039			;		jp z, .fudone 
3039			;		cp WORD_SYS_UWORD 
3039			;		jp nz, .fnuword 
3039			; 
3039			;	if DEBUG_FORTH_WORDS 
3039			;		DMARK "FGu" 
3039			;		CALLMONITOR 
3039			;	endif 
3039			; 
3039			;		; found a uword but is it the one we want... 
3039			; 
3039			; 
3039			;	        pop de   ; get back the dsp name 
3039			;		push de 
3039			; 
3039			;		push hl  ; to save the ptr 
3039			; 
3039			;		; skip opcode 
3039			;		inc hl  
3039			;		; skip next ptr 
3039			;		inc hl  
3039			;		inc hl 
3039			;		; skip len 
3039			;		inc hl 
3039			; 
3039			;	if DEBUG_FORTH_WORDS 
3039			;		DMARK "FGc" 
3039			;		CALLMONITOR 
3039			;	endif 
3039			;		call strcmp 
3039			;		jp nz, .fnuword 
3039			 
3039			 
3039 e1			pop hl 
303a			 
303a				 
303a				if DEBUG_FORTH_WORDS 
303a					DMARK "FGm" 
303a f5				push af  
303b 3a 4f 30			ld a, (.dmark)  
303e 32 68 fe			ld (debug_mark),a  
3041 3a 50 30			ld a, (.dmark+1)  
3044 32 69 fe			ld (debug_mark+1),a  
3047 3a 51 30			ld a, (.dmark+2)  
304a 32 6a fe			ld (debug_mark+2),a  
304d 18 03			jr .pastdmark  
304f ..			.dmark: db "FGm"  
3052 f1			.pastdmark: pop af  
3053			endm  
# End of macro DMARK
3053					CALLMONITOR 
3053 cd 6c fe			call debug_vector  
3056				endm  
# End of macro CALLMONITOR
3056				endif 
3056			 
3056			 
3056			 
3056					; we have a uword so push its name to the stack 
3056			 
3056			;	   	push hl  ; save so we can move to next dict block 
3056			;pop hl 
3056			 
3056					; update opcode to deleted 
3056 3e 03				ld a, WORD_SYS_DELETED 
3058 77					ld (hl), a 
3059			 
3059 23					inc hl  
305a					; skip next ptr 
305a 23					inc hl  
305b 23					inc hl 
305c					; skip len 
305c 23					inc hl 
305d			 
305d					; TODO change parser to skip deleted words but for now mark it out 
305d 3e 5f				ld a, "_" 
305f 77					ld  (hl),a 
3060			 
3060			;		jr .fudone 
3060			; 
3060			;.fnuword:	pop hl 
3060			;		call forth_tok_next 
3060			;		jp .fdouscan  
3060			 
3060			.flunotfound:		  
3060			 
3060			 
3060					 
3060					FORTH_DSP_POP 
3060 cd b4 23			call macro_forth_dsp_pop 
3063				endm 
# End of macro FORTH_DSP_POP
3063			;		ld hl, .luno 
3063			;.fudone:		 pop hl 
3063					NEXTW 
3063 c3 b2 24			jp macro_next 
3066				endm 
# End of macro NEXTW
3066			.NOP: 
3066				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
3066 61				db WORD_SYS_CORE+77             
3067 8d 30			dw .COMO            
3069 04				db 3 + 1 
306a .. 00			db "NOP",0              
306e				endm 
# End of macro CWHEAD
306e			; | NOP (  --  ) Do nothing | DONE 
306e					if DEBUG_FORTH_WORDS_KEY 
306e						DMARK "NOP" 
306e f5				push af  
306f 3a 83 30			ld a, (.dmark)  
3072 32 68 fe			ld (debug_mark),a  
3075 3a 84 30			ld a, (.dmark+1)  
3078 32 69 fe			ld (debug_mark+1),a  
307b 3a 85 30			ld a, (.dmark+2)  
307e 32 6a fe			ld (debug_mark+2),a  
3081 18 03			jr .pastdmark  
3083 ..			.dmark: db "NOP"  
3086 f1			.pastdmark: pop af  
3087			endm  
# End of macro DMARK
3087						CALLMONITOR 
3087 cd 6c fe			call debug_vector  
308a				endm  
# End of macro CALLMONITOR
308a					endif 
308a				       NEXTW 
308a c3 b2 24			jp macro_next 
308d				endm 
# End of macro NEXTW
308d			.COMO: 
308d				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
308d 6e				db WORD_SYS_CORE+90             
308e df 30			dw .COMC            
3090 02				db 1 + 1 
3091 .. 00			db "(",0              
3093				endm 
# End of macro CWHEAD
3093			; | ( ( -- )  Start of comment | DONE 
3093			 
3093			 
3093 2a bf f4				ld hl, ( os_tok_ptr) 
3096 11 da 30			ld de, .closepar 
3099					 
3099					if DEBUG_FORTH_WORDS 
3099						DMARK ").." 
3099 f5				push af  
309a 3a ae 30			ld a, (.dmark)  
309d 32 68 fe			ld (debug_mark),a  
30a0 3a af 30			ld a, (.dmark+1)  
30a3 32 69 fe			ld (debug_mark+1),a  
30a6 3a b0 30			ld a, (.dmark+2)  
30a9 32 6a fe			ld (debug_mark+2),a  
30ac 18 03			jr .pastdmark  
30ae ..			.dmark: db ").."  
30b1 f1			.pastdmark: pop af  
30b2			endm  
# End of macro DMARK
30b2						CALLMONITOR 
30b2 cd 6c fe			call debug_vector  
30b5				endm  
# End of macro CALLMONITOR
30b5					endif 
30b5 cd cd 25			call findnexttok  
30b8			 
30b8					if DEBUG_FORTH_WORDS 
30b8						DMARK "IF5" 
30b8 f5				push af  
30b9 3a cd 30			ld a, (.dmark)  
30bc 32 68 fe			ld (debug_mark),a  
30bf 3a ce 30			ld a, (.dmark+1)  
30c2 32 69 fe			ld (debug_mark+1),a  
30c5 3a cf 30			ld a, (.dmark+2)  
30c8 32 6a fe			ld (debug_mark+2),a  
30cb 18 03			jr .pastdmark  
30cd ..			.dmark: db "IF5"  
30d0 f1			.pastdmark: pop af  
30d1			endm  
# End of macro DMARK
30d1						CALLMONITOR 
30d1 cd 6c fe			call debug_vector  
30d4				endm  
# End of macro CALLMONITOR
30d4					endif 
30d4				; replace below with ) exec using tok_ptr 
30d4 22 bf f4			ld (os_tok_ptr), hl 
30d7 c3 43 25			jp exec1 
30da			 
30da .. 00			.closepar:   db ")",0 
30dc			 
30dc				       NEXTW 
30dc c3 b2 24			jp macro_next 
30df				endm 
# End of macro NEXTW
30df			.COMC: 
30df				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
30df 6f				db WORD_SYS_CORE+91             
30e0 e8 30			dw .SCRATCH            
30e2 02				db 1 + 1 
30e3 .. 00			db ")",0              
30e5				endm 
# End of macro CWHEAD
30e5			; | ) ( -- )  End of comment |  DONE  
30e5				       NEXTW 
30e5 c3 b2 24			jp macro_next 
30e8				endm 
# End of macro NEXTW
30e8			 
30e8			.SCRATCH: 
30e8				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
30e8 6f				db WORD_SYS_CORE+91             
30e9 23 31			dw .INC            
30eb 08				db 7 + 1 
30ec .. 00			db "SCRATCH",0              
30f4				endm 
# End of macro CWHEAD
30f4			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
30f4			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
30f4			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
30f4			; | |  
30f4			; | | e.g.    : score $00 scratch ; 
30f4			; | |  
30f4			; | | $00 score ! 
30f4			; | | $01 score +! 
30f4			; | |  
30f4			; | | e.g.   : varword $0a scratch ;  
30f4			; | | 
30f4			; | | $8000 varword ! 
30f4					if DEBUG_FORTH_WORDS_KEY 
30f4						DMARK "SCR" 
30f4 f5				push af  
30f5 3a 09 31			ld a, (.dmark)  
30f8 32 68 fe			ld (debug_mark),a  
30fb 3a 0a 31			ld a, (.dmark+1)  
30fe 32 69 fe			ld (debug_mark+1),a  
3101 3a 0b 31			ld a, (.dmark+2)  
3104 32 6a fe			ld (debug_mark+2),a  
3107 18 03			jr .pastdmark  
3109 ..			.dmark: db "SCR"  
310c f1			.pastdmark: pop af  
310d			endm  
# End of macro DMARK
310d						CALLMONITOR 
310d cd 6c fe			call debug_vector  
3110				endm  
# End of macro CALLMONITOR
3110					endif 
3110			 
3110					FORTH_DSP_VALUEHL 
3110 cd fc 22			call macro_dsp_valuehl 
3113				endm 
# End of macro FORTH_DSP_VALUEHL
3113				 
3113					FORTH_DSP_POP 
3113 cd b4 23			call macro_forth_dsp_pop 
3116				endm 
# End of macro FORTH_DSP_POP
3116			 
3116 7d					ld a, l 
3117 21 e3 f6				ld hl, os_var_array 
311a cd cf 0f				call addatohl 
311d			 
311d cd 05 21				call forth_push_numhl 
3120			 
3120				       NEXTW 
3120 c3 b2 24			jp macro_next 
3123				endm 
# End of macro NEXTW
3123			 
3123			.INC: 
3123				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
3123 6f				db WORD_SYS_CORE+91             
3124 79 31			dw .DEC            
3126 03				db 2 + 1 
3127 .. 00			db "+!",0              
312a				endm 
# End of macro CWHEAD
312a			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
312a					if DEBUG_FORTH_WORDS_KEY 
312a						DMARK "+s_" 
312a f5				push af  
312b 3a 3f 31			ld a, (.dmark)  
312e 32 68 fe			ld (debug_mark),a  
3131 3a 40 31			ld a, (.dmark+1)  
3134 32 69 fe			ld (debug_mark+1),a  
3137 3a 41 31			ld a, (.dmark+2)  
313a 32 6a fe			ld (debug_mark+2),a  
313d 18 03			jr .pastdmark  
313f ..			.dmark: db "+s_"  
3142 f1			.pastdmark: pop af  
3143			endm  
# End of macro DMARK
3143						CALLMONITOR 
3143 cd 6c fe			call debug_vector  
3146				endm  
# End of macro CALLMONITOR
3146					endif 
3146			 
3146					FORTH_DSP_VALUEHL 
3146 cd fc 22			call macro_dsp_valuehl 
3149				endm 
# End of macro FORTH_DSP_VALUEHL
3149			 
3149 e5					push hl   ; save address 
314a			 
314a					FORTH_DSP_POP 
314a cd b4 23			call macro_forth_dsp_pop 
314d				endm 
# End of macro FORTH_DSP_POP
314d			 
314d					FORTH_DSP_VALUEHL 
314d cd fc 22			call macro_dsp_valuehl 
3150				endm 
# End of macro FORTH_DSP_VALUEHL
3150			 
3150 e5					push hl 
3151					FORTH_DSP_POP 
3151 cd b4 23			call macro_forth_dsp_pop 
3154				endm 
# End of macro FORTH_DSP_POP
3154 e1					pop hl 
3155			 
3155					; hl contains value to add to byte at a 
3155				 
3155 eb					ex de, hl 
3156			 
3156 e1					pop hl 
3157			 
3157					if DEBUG_FORTH_WORDS 
3157						DMARK "INC" 
3157 f5				push af  
3158 3a 6c 31			ld a, (.dmark)  
315b 32 68 fe			ld (debug_mark),a  
315e 3a 6d 31			ld a, (.dmark+1)  
3161 32 69 fe			ld (debug_mark+1),a  
3164 3a 6e 31			ld a, (.dmark+2)  
3167 32 6a fe			ld (debug_mark+2),a  
316a 18 03			jr .pastdmark  
316c ..			.dmark: db "INC"  
316f f1			.pastdmark: pop af  
3170			endm  
# End of macro DMARK
3170						CALLMONITOR 
3170 cd 6c fe			call debug_vector  
3173				endm  
# End of macro CALLMONITOR
3173					endif 
3173			 
3173 7e					ld a,(hl) 
3174 83					add e 
3175 77					ld (hl),a 
3176			 
3176			 
3176			 
3176				       NEXTW 
3176 c3 b2 24			jp macro_next 
3179				endm 
# End of macro NEXTW
3179			 
3179			.DEC: 
3179				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
3179 6f				db WORD_SYS_CORE+91             
317a cd 31			dw .INC2            
317c 03				db 2 + 1 
317d .. 00			db "-!",0              
3180				endm 
# End of macro CWHEAD
3180			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
3180					if DEBUG_FORTH_WORDS_KEY 
3180						DMARK "-s_" 
3180 f5				push af  
3181 3a 95 31			ld a, (.dmark)  
3184 32 68 fe			ld (debug_mark),a  
3187 3a 96 31			ld a, (.dmark+1)  
318a 32 69 fe			ld (debug_mark+1),a  
318d 3a 97 31			ld a, (.dmark+2)  
3190 32 6a fe			ld (debug_mark+2),a  
3193 18 03			jr .pastdmark  
3195 ..			.dmark: db "-s_"  
3198 f1			.pastdmark: pop af  
3199			endm  
# End of macro DMARK
3199						CALLMONITOR 
3199 cd 6c fe			call debug_vector  
319c				endm  
# End of macro CALLMONITOR
319c					endif 
319c			 
319c					FORTH_DSP_VALUEHL 
319c cd fc 22			call macro_dsp_valuehl 
319f				endm 
# End of macro FORTH_DSP_VALUEHL
319f			 
319f e5					push hl   ; save address 
31a0			 
31a0					FORTH_DSP_POP 
31a0 cd b4 23			call macro_forth_dsp_pop 
31a3				endm 
# End of macro FORTH_DSP_POP
31a3			 
31a3					FORTH_DSP_VALUEHL 
31a3 cd fc 22			call macro_dsp_valuehl 
31a6				endm 
# End of macro FORTH_DSP_VALUEHL
31a6			 
31a6					; hl contains value to add to byte at a 
31a6				 
31a6 eb					ex de, hl 
31a7			 
31a7 e1					pop hl 
31a8			 
31a8					if DEBUG_FORTH_WORDS 
31a8						DMARK "DEC" 
31a8 f5				push af  
31a9 3a bd 31			ld a, (.dmark)  
31ac 32 68 fe			ld (debug_mark),a  
31af 3a be 31			ld a, (.dmark+1)  
31b2 32 69 fe			ld (debug_mark+1),a  
31b5 3a bf 31			ld a, (.dmark+2)  
31b8 32 6a fe			ld (debug_mark+2),a  
31bb 18 03			jr .pastdmark  
31bd ..			.dmark: db "DEC"  
31c0 f1			.pastdmark: pop af  
31c1			endm  
# End of macro DMARK
31c1						CALLMONITOR 
31c1 cd 6c fe			call debug_vector  
31c4				endm  
# End of macro CALLMONITOR
31c4					endif 
31c4			 
31c4 7e					ld a,(hl) 
31c5 93					sub e 
31c6 77					ld (hl),a 
31c7			 
31c7			 
31c7					FORTH_DSP_POP 
31c7 cd b4 23			call macro_forth_dsp_pop 
31ca				endm 
# End of macro FORTH_DSP_POP
31ca			 
31ca				       NEXTW 
31ca c3 b2 24			jp macro_next 
31cd				endm 
# End of macro NEXTW
31cd			 
31cd			.INC2: 
31cd				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
31cd 6f				db WORD_SYS_CORE+91             
31ce 7a 32			dw .DEC2            
31d0 04				db 3 + 1 
31d1 .. 00			db "+2!",0              
31d5				endm 
# End of macro CWHEAD
31d5			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
31d5			 
31d5					if DEBUG_FORTH_WORDS_KEY 
31d5						DMARK "+2s" 
31d5 f5				push af  
31d6 3a ea 31			ld a, (.dmark)  
31d9 32 68 fe			ld (debug_mark),a  
31dc 3a eb 31			ld a, (.dmark+1)  
31df 32 69 fe			ld (debug_mark+1),a  
31e2 3a ec 31			ld a, (.dmark+2)  
31e5 32 6a fe			ld (debug_mark+2),a  
31e8 18 03			jr .pastdmark  
31ea ..			.dmark: db "+2s"  
31ed f1			.pastdmark: pop af  
31ee			endm  
# End of macro DMARK
31ee						CALLMONITOR 
31ee cd 6c fe			call debug_vector  
31f1				endm  
# End of macro CALLMONITOR
31f1					endif 
31f1			 
31f1					; Address 
31f1			 
31f1					FORTH_DSP_VALUEHL 
31f1 cd fc 22			call macro_dsp_valuehl 
31f4				endm 
# End of macro FORTH_DSP_VALUEHL
31f4			 
31f4 e5					push hl    ; save address 
31f5			 
31f5					; load content into de 
31f5			 
31f5 5e					ld e,(hl) 
31f6 23					inc hl 
31f7 56					ld d, (hl) 
31f8			 
31f8					if DEBUG_FORTH_WORDS 
31f8						DMARK "+2a" 
31f8 f5				push af  
31f9 3a 0d 32			ld a, (.dmark)  
31fc 32 68 fe			ld (debug_mark),a  
31ff 3a 0e 32			ld a, (.dmark+1)  
3202 32 69 fe			ld (debug_mark+1),a  
3205 3a 0f 32			ld a, (.dmark+2)  
3208 32 6a fe			ld (debug_mark+2),a  
320b 18 03			jr .pastdmark  
320d ..			.dmark: db "+2a"  
3210 f1			.pastdmark: pop af  
3211			endm  
# End of macro DMARK
3211						CALLMONITOR 
3211 cd 6c fe			call debug_vector  
3214				endm  
# End of macro CALLMONITOR
3214					endif 
3214			 
3214					FORTH_DSP_POP 
3214 cd b4 23			call macro_forth_dsp_pop 
3217				endm 
# End of macro FORTH_DSP_POP
3217			 
3217					; Get value to add 
3217			 
3217					FORTH_DSP_VALUE 
3217 cd e5 22			call macro_forth_dsp_value 
321a				endm 
# End of macro FORTH_DSP_VALUE
321a			 
321a					if DEBUG_FORTH_WORDS 
321a						DMARK "+2v" 
321a f5				push af  
321b 3a 2f 32			ld a, (.dmark)  
321e 32 68 fe			ld (debug_mark),a  
3221 3a 30 32			ld a, (.dmark+1)  
3224 32 69 fe			ld (debug_mark+1),a  
3227 3a 31 32			ld a, (.dmark+2)  
322a 32 6a fe			ld (debug_mark+2),a  
322d 18 03			jr .pastdmark  
322f ..			.dmark: db "+2v"  
3232 f1			.pastdmark: pop af  
3233			endm  
# End of macro DMARK
3233						CALLMONITOR 
3233 cd 6c fe			call debug_vector  
3236				endm  
# End of macro CALLMONITOR
3236					endif 
3236			 
3236 19					add hl, de 
3237			 
3237					if DEBUG_FORTH_WORDS 
3237						DMARK "+2+" 
3237 f5				push af  
3238 3a 4c 32			ld a, (.dmark)  
323b 32 68 fe			ld (debug_mark),a  
323e 3a 4d 32			ld a, (.dmark+1)  
3241 32 69 fe			ld (debug_mark+1),a  
3244 3a 4e 32			ld a, (.dmark+2)  
3247 32 6a fe			ld (debug_mark+2),a  
324a 18 03			jr .pastdmark  
324c ..			.dmark: db "+2+"  
324f f1			.pastdmark: pop af  
3250			endm  
# End of macro DMARK
3250						CALLMONITOR 
3250 cd 6c fe			call debug_vector  
3253				endm  
# End of macro CALLMONITOR
3253					endif 
3253			 
3253					; move result to de 
3253			 
3253 eb					ex de, hl 
3254			 
3254					; Address 
3254			 
3254 e1					pop hl 
3255			 
3255					; save it back 
3255			 
3255 73					ld (hl), e 
3256 23					inc hl 
3257 72					ld (hl), d 
3258			 
3258					if DEBUG_FORTH_WORDS 
3258						DMARK "+2e" 
3258 f5				push af  
3259 3a 6d 32			ld a, (.dmark)  
325c 32 68 fe			ld (debug_mark),a  
325f 3a 6e 32			ld a, (.dmark+1)  
3262 32 69 fe			ld (debug_mark+1),a  
3265 3a 6f 32			ld a, (.dmark+2)  
3268 32 6a fe			ld (debug_mark+2),a  
326b 18 03			jr .pastdmark  
326d ..			.dmark: db "+2e"  
3270 f1			.pastdmark: pop af  
3271			endm  
# End of macro DMARK
3271						CALLMONITOR 
3271 cd 6c fe			call debug_vector  
3274				endm  
# End of macro CALLMONITOR
3274					endif 
3274			 
3274			 
3274			 
3274					FORTH_DSP_POP 
3274 cd b4 23			call macro_forth_dsp_pop 
3277				endm 
# End of macro FORTH_DSP_POP
3277			 
3277			 
3277				       NEXTW 
3277 c3 b2 24			jp macro_next 
327a				endm 
# End of macro NEXTW
327a			 
327a			.DEC2: 
327a				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
327a 6f				db WORD_SYS_CORE+91             
327b 29 33			dw .GET2            
327d 04				db 3 + 1 
327e .. 00			db "-2!",0              
3282				endm 
# End of macro CWHEAD
3282			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
3282			 
3282			 
3282					if DEBUG_FORTH_WORDS_KEY 
3282						DMARK "-2s" 
3282 f5				push af  
3283 3a 97 32			ld a, (.dmark)  
3286 32 68 fe			ld (debug_mark),a  
3289 3a 98 32			ld a, (.dmark+1)  
328c 32 69 fe			ld (debug_mark+1),a  
328f 3a 99 32			ld a, (.dmark+2)  
3292 32 6a fe			ld (debug_mark+2),a  
3295 18 03			jr .pastdmark  
3297 ..			.dmark: db "-2s"  
329a f1			.pastdmark: pop af  
329b			endm  
# End of macro DMARK
329b						CALLMONITOR 
329b cd 6c fe			call debug_vector  
329e				endm  
# End of macro CALLMONITOR
329e					endif 
329e			 
329e					; Address 
329e			 
329e					FORTH_DSP_VALUEHL 
329e cd fc 22			call macro_dsp_valuehl 
32a1				endm 
# End of macro FORTH_DSP_VALUEHL
32a1			 
32a1 e5					push hl    ; save address 
32a2			 
32a2					; load content into de 
32a2			 
32a2 5e					ld e,(hl) 
32a3 23					inc hl 
32a4 56					ld d, (hl) 
32a5			 
32a5					if DEBUG_FORTH_WORDS 
32a5						DMARK "-2a" 
32a5 f5				push af  
32a6 3a ba 32			ld a, (.dmark)  
32a9 32 68 fe			ld (debug_mark),a  
32ac 3a bb 32			ld a, (.dmark+1)  
32af 32 69 fe			ld (debug_mark+1),a  
32b2 3a bc 32			ld a, (.dmark+2)  
32b5 32 6a fe			ld (debug_mark+2),a  
32b8 18 03			jr .pastdmark  
32ba ..			.dmark: db "-2a"  
32bd f1			.pastdmark: pop af  
32be			endm  
# End of macro DMARK
32be						CALLMONITOR 
32be cd 6c fe			call debug_vector  
32c1				endm  
# End of macro CALLMONITOR
32c1					endif 
32c1			 
32c1					FORTH_DSP_POP 
32c1 cd b4 23			call macro_forth_dsp_pop 
32c4				endm 
# End of macro FORTH_DSP_POP
32c4			 
32c4					; Get value to remove 
32c4			 
32c4					FORTH_DSP_VALUE 
32c4 cd e5 22			call macro_forth_dsp_value 
32c7				endm 
# End of macro FORTH_DSP_VALUE
32c7			 
32c7					if DEBUG_FORTH_WORDS 
32c7						DMARK "-2v" 
32c7 f5				push af  
32c8 3a dc 32			ld a, (.dmark)  
32cb 32 68 fe			ld (debug_mark),a  
32ce 3a dd 32			ld a, (.dmark+1)  
32d1 32 69 fe			ld (debug_mark+1),a  
32d4 3a de 32			ld a, (.dmark+2)  
32d7 32 6a fe			ld (debug_mark+2),a  
32da 18 03			jr .pastdmark  
32dc ..			.dmark: db "-2v"  
32df f1			.pastdmark: pop af  
32e0			endm  
# End of macro DMARK
32e0						CALLMONITOR 
32e0 cd 6c fe			call debug_vector  
32e3				endm  
# End of macro CALLMONITOR
32e3					endif 
32e3			 
32e3 eb					ex de, hl 
32e4 ed 52				sbc hl, de 
32e6			 
32e6					if DEBUG_FORTH_WORDS 
32e6						DMARK "-2d" 
32e6 f5				push af  
32e7 3a fb 32			ld a, (.dmark)  
32ea 32 68 fe			ld (debug_mark),a  
32ed 3a fc 32			ld a, (.dmark+1)  
32f0 32 69 fe			ld (debug_mark+1),a  
32f3 3a fd 32			ld a, (.dmark+2)  
32f6 32 6a fe			ld (debug_mark+2),a  
32f9 18 03			jr .pastdmark  
32fb ..			.dmark: db "-2d"  
32fe f1			.pastdmark: pop af  
32ff			endm  
# End of macro DMARK
32ff						CALLMONITOR 
32ff cd 6c fe			call debug_vector  
3302				endm  
# End of macro CALLMONITOR
3302					endif 
3302			 
3302					; move result to de 
3302			 
3302 eb					ex de, hl 
3303			 
3303					; Address 
3303			 
3303 e1					pop hl 
3304			 
3304					; save it back 
3304			 
3304 73					ld (hl), e 
3305 23					inc hl 
3306 72					ld (hl), d 
3307			 
3307					if DEBUG_FORTH_WORDS 
3307						DMARK "-2e" 
3307 f5				push af  
3308 3a 1c 33			ld a, (.dmark)  
330b 32 68 fe			ld (debug_mark),a  
330e 3a 1d 33			ld a, (.dmark+1)  
3311 32 69 fe			ld (debug_mark+1),a  
3314 3a 1e 33			ld a, (.dmark+2)  
3317 32 6a fe			ld (debug_mark+2),a  
331a 18 03			jr .pastdmark  
331c ..			.dmark: db "-2e"  
331f f1			.pastdmark: pop af  
3320			endm  
# End of macro DMARK
3320						CALLMONITOR 
3320 cd 6c fe			call debug_vector  
3323				endm  
# End of macro CALLMONITOR
3323					endif 
3323			 
3323			 
3323					FORTH_DSP_POP 
3323 cd b4 23			call macro_forth_dsp_pop 
3326				endm 
# End of macro FORTH_DSP_POP
3326			 
3326			 
3326			 
3326				       NEXTW 
3326 c3 b2 24			jp macro_next 
3329				endm 
# End of macro NEXTW
3329			.GET2: 
3329				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
3329 6f				db WORD_SYS_CORE+91             
332a 5e 33			dw .BANG2            
332c 03				db 2 + 1 
332d .. 00			db "2@",0              
3330				endm 
# End of macro CWHEAD
3330			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
3330					if DEBUG_FORTH_WORDS_KEY 
3330						DMARK "2A_" 
3330 f5				push af  
3331 3a 45 33			ld a, (.dmark)  
3334 32 68 fe			ld (debug_mark),a  
3337 3a 46 33			ld a, (.dmark+1)  
333a 32 69 fe			ld (debug_mark+1),a  
333d 3a 47 33			ld a, (.dmark+2)  
3340 32 6a fe			ld (debug_mark+2),a  
3343 18 03			jr .pastdmark  
3345 ..			.dmark: db "2A_"  
3348 f1			.pastdmark: pop af  
3349			endm  
# End of macro DMARK
3349						CALLMONITOR 
3349 cd 6c fe			call debug_vector  
334c				endm  
# End of macro CALLMONITOR
334c					endif 
334c			 
334c					FORTH_DSP_VALUEHL 
334c cd fc 22			call macro_dsp_valuehl 
334f				endm 
# End of macro FORTH_DSP_VALUEHL
334f			 
334f e5					push hl   ; save address 
3350			 
3350					FORTH_DSP_POP 
3350 cd b4 23			call macro_forth_dsp_pop 
3353				endm 
# End of macro FORTH_DSP_POP
3353			 
3353 e1					pop hl 
3354			 
3354 5e					ld e, (hl) 
3355 23					inc hl 
3356 56					ld d, (hl) 
3357			 
3357 eb					ex de, hl 
3358			 
3358 cd 05 21				call forth_push_numhl 
335b			 
335b				       NEXTW 
335b c3 b2 24			jp macro_next 
335e				endm 
# End of macro NEXTW
335e			.BANG2: 
335e				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
335e 6f				db WORD_SYS_CORE+91             
335f 96 33			dw .CONFIG            
3361 03				db 2 + 1 
3362 .. 00			db "2!",0              
3365				endm 
# End of macro CWHEAD
3365			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
3365					if DEBUG_FORTH_WORDS_KEY 
3365						DMARK "2S_" 
3365 f5				push af  
3366 3a 7a 33			ld a, (.dmark)  
3369 32 68 fe			ld (debug_mark),a  
336c 3a 7b 33			ld a, (.dmark+1)  
336f 32 69 fe			ld (debug_mark+1),a  
3372 3a 7c 33			ld a, (.dmark+2)  
3375 32 6a fe			ld (debug_mark+2),a  
3378 18 03			jr .pastdmark  
337a ..			.dmark: db "2S_"  
337d f1			.pastdmark: pop af  
337e			endm  
# End of macro DMARK
337e						CALLMONITOR 
337e cd 6c fe			call debug_vector  
3381				endm  
# End of macro CALLMONITOR
3381					endif 
3381			 
3381					FORTH_DSP_VALUEHL 
3381 cd fc 22			call macro_dsp_valuehl 
3384				endm 
# End of macro FORTH_DSP_VALUEHL
3384			 
3384 e5					push hl   ; save address 
3385			 
3385			 
3385					FORTH_DSP_POP 
3385 cd b4 23			call macro_forth_dsp_pop 
3388				endm 
# End of macro FORTH_DSP_POP
3388			 
3388					 
3388					FORTH_DSP_VALUEHL 
3388 cd fc 22			call macro_dsp_valuehl 
338b				endm 
# End of macro FORTH_DSP_VALUEHL
338b			 
338b					FORTH_DSP_POP 
338b cd b4 23			call macro_forth_dsp_pop 
338e				endm 
# End of macro FORTH_DSP_POP
338e			 
338e eb					ex de, hl    ; value now in de 
338f			 
338f e1					pop hl 
3390			 
3390 73					ld (hl), e 
3391			 
3391 23					inc hl 
3392			 
3392 72					ld (hl), d 
3393			 
3393			 
3393				       NEXTW 
3393 c3 b2 24			jp macro_next 
3396				endm 
# End of macro NEXTW
3396			.CONFIG: 
3396				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
3396 6f				db WORD_SYS_CORE+91             
3397 a7 33			dw .ADTOS            
3399 07				db 6 + 1 
339a .. 00			db "CONFIG",0              
33a1				endm 
# End of macro CWHEAD
33a1			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
33a1			 
33a1 cd 2f 16				call config 
33a4					NEXTW 
33a4 c3 b2 24			jp macro_next 
33a7				endm 
# End of macro NEXTW
33a7			 
33a7			.ADTOS: 
33a7				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
33a7 6f				db WORD_SYS_CORE+91             
33a8 bd 33			dw .SBTOS            
33aa 03				db 2 + 1 
33ab .. 00			db "1+",0              
33ae				endm 
# End of macro CWHEAD
33ae			; | 1+ ( u -- u )  Increment value on TOS | DONE 
33ae			 
33ae					FORTH_DSP_VALUEHL 
33ae cd fc 22			call macro_dsp_valuehl 
33b1				endm 
# End of macro FORTH_DSP_VALUEHL
33b1 e5					push hl 
33b2			 
33b2					FORTH_DSP_POP 
33b2 cd b4 23			call macro_forth_dsp_pop 
33b5				endm 
# End of macro FORTH_DSP_POP
33b5 e1					pop hl 
33b6			 
33b6 23					inc hl 
33b7 cd 05 21				call forth_push_numhl 
33ba					 
33ba					NEXTW 
33ba c3 b2 24			jp macro_next 
33bd				endm 
# End of macro NEXTW
33bd			.SBTOS: 
33bd				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
33bd 6f				db WORD_SYS_CORE+91             
33be d3 33			dw .ADSTORE            
33c0 03				db 2 + 1 
33c1 .. 00			db "1-",0              
33c4				endm 
# End of macro CWHEAD
33c4			; | 1- ( u -- u )  Decrement value on TOS | DONE 
33c4			 
33c4					FORTH_DSP_VALUEHL 
33c4 cd fc 22			call macro_dsp_valuehl 
33c7				endm 
# End of macro FORTH_DSP_VALUEHL
33c7 e5					push hl 
33c8			 
33c8					FORTH_DSP_POP 
33c8 cd b4 23			call macro_forth_dsp_pop 
33cb				endm 
# End of macro FORTH_DSP_POP
33cb e1					pop hl 
33cc			 
33cc 2b					dec hl 
33cd cd 05 21				call forth_push_numhl 
33d0					 
33d0					NEXTW 
33d0 c3 b2 24			jp macro_next 
33d3				endm 
# End of macro NEXTW
33d3			.ADSTORE: 
33d3				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
33d3 6f				db WORD_SYS_CORE+91             
33d4 e9 33			dw .ADWSTORE            
33d6 04				db 3 + 1 
33d7 .. 00			db "1+!",0              
33db				endm 
# End of macro CWHEAD
33db			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
33db			 
33db					FORTH_DSP_VALUEHL 
33db cd fc 22			call macro_dsp_valuehl 
33de				endm 
# End of macro FORTH_DSP_VALUEHL
33de e5					push hl 
33df			 
33df					FORTH_DSP_POP 
33df cd b4 23			call macro_forth_dsp_pop 
33e2				endm 
# End of macro FORTH_DSP_POP
33e2 e1					pop hl 
33e3			 
33e3 7e					ld a, (hl) 
33e4 3c					inc a 
33e5 77					ld (hl), a 
33e6					 
33e6					NEXTW 
33e6 c3 b2 24			jp macro_next 
33e9				endm 
# End of macro NEXTW
33e9			.ADWSTORE: 
33e9				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
33e9 6f				db WORD_SYS_CORE+91             
33ea 07 34			dw .SBSTORE            
33ec 05				db 4 + 1 
33ed .. 00			db "1+2!",0              
33f2				endm 
# End of macro CWHEAD
33f2			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
33f2			 
33f2					FORTH_DSP_VALUEHL 
33f2 cd fc 22			call macro_dsp_valuehl 
33f5				endm 
# End of macro FORTH_DSP_VALUEHL
33f5 e5					push hl 
33f6			 
33f6					FORTH_DSP_POP 
33f6 cd b4 23			call macro_forth_dsp_pop 
33f9				endm 
# End of macro FORTH_DSP_POP
33f9 e1					pop hl 
33fa			 
33fa e5					push hl 
33fb			 
33fb cd 34 24				call loadwordinhl 
33fe 23					inc hl 
33ff			 
33ff d1					pop de 
3400 eb					ex de, hl 
3401 73					ld (hl), e 
3402 23					inc hl 
3403 72					ld (hl), d 
3404					 
3404					NEXTW 
3404 c3 b2 24			jp macro_next 
3407				endm 
# End of macro NEXTW
3407			.SBSTORE: 
3407				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
3407 6f				db WORD_SYS_CORE+91             
3408 1d 34			dw .SBWSTORE            
340a 04				db 3 + 1 
340b .. 00			db "1-!",0              
340f				endm 
# End of macro CWHEAD
340f			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
340f			 
340f					FORTH_DSP_VALUEHL 
340f cd fc 22			call macro_dsp_valuehl 
3412				endm 
# End of macro FORTH_DSP_VALUEHL
3412 e5					push hl 
3413			 
3413					FORTH_DSP_POP 
3413 cd b4 23			call macro_forth_dsp_pop 
3416				endm 
# End of macro FORTH_DSP_POP
3416 e1					pop hl 
3417			 
3417 7e					ld a, (hl) 
3418 3d					dec a 
3419 77					ld (hl), a 
341a					 
341a					NEXTW 
341a c3 b2 24			jp macro_next 
341d				endm 
# End of macro NEXTW
341d			.SBWSTORE: 
341d				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
341d 6f				db WORD_SYS_CORE+91             
341e 3b 34			dw .ENDCORE            
3420 05				db 4 + 1 
3421 .. 00			db "1-2!",0              
3426				endm 
# End of macro CWHEAD
3426			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
3426			 
3426					FORTH_DSP_VALUEHL 
3426 cd fc 22			call macro_dsp_valuehl 
3429				endm 
# End of macro FORTH_DSP_VALUEHL
3429 e5					push hl 
342a			 
342a					FORTH_DSP_POP 
342a cd b4 23			call macro_forth_dsp_pop 
342d				endm 
# End of macro FORTH_DSP_POP
342d e1					pop hl 
342e			 
342e e5					push hl 
342f			 
342f cd 34 24				call loadwordinhl 
3432 2b					dec hl 
3433			 
3433 d1					pop de 
3434 eb					ex de, hl 
3435 73					ld (hl), e 
3436 23					inc hl 
3437 72					ld (hl), d 
3438					 
3438					NEXTW 
3438 c3 b2 24			jp macro_next 
343b				endm 
# End of macro NEXTW
343b			.ENDCORE: 
343b			 
343b			; eof 
343b			 
343b			 
# End of file forth_words_core.asm
343b			include "forth_words_flow.asm" 
343b			 
343b			; | ## Program Flow Words 
343b			 
343b			.IF: 
343b				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
343b 1e				db WORD_SYS_CORE+10             
343c 30 35			dw .THEN            
343e 03				db 2 + 1 
343f .. 00			db "IF",0              
3442				endm 
# End of macro CWHEAD
3442			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
3442			; 
3442					if DEBUG_FORTH_WORDS_KEY 
3442						DMARK "IF." 
3442 f5				push af  
3443 3a 57 34			ld a, (.dmark)  
3446 32 68 fe			ld (debug_mark),a  
3449 3a 58 34			ld a, (.dmark+1)  
344c 32 69 fe			ld (debug_mark+1),a  
344f 3a 59 34			ld a, (.dmark+2)  
3452 32 6a fe			ld (debug_mark+2),a  
3455 18 03			jr .pastdmark  
3457 ..			.dmark: db "IF."  
345a f1			.pastdmark: pop af  
345b			endm  
# End of macro DMARK
345b						CALLMONITOR 
345b cd 6c fe			call debug_vector  
345e				endm  
# End of macro CALLMONITOR
345e					endif 
345e			; eval TOS 
345e			 
345e				FORTH_DSP_VALUEHL 
345e cd fc 22			call macro_dsp_valuehl 
3461				endm 
# End of macro FORTH_DSP_VALUEHL
3461			 
3461			;	push hl 
3461				FORTH_DSP_POP 
3461 cd b4 23			call macro_forth_dsp_pop 
3464				endm 
# End of macro FORTH_DSP_POP
3464			;	pop hl 
3464			 
3464					if DEBUG_FORTH_WORDS 
3464						DMARK "IF1" 
3464 f5				push af  
3465 3a 79 34			ld a, (.dmark)  
3468 32 68 fe			ld (debug_mark),a  
346b 3a 7a 34			ld a, (.dmark+1)  
346e 32 69 fe			ld (debug_mark+1),a  
3471 3a 7b 34			ld a, (.dmark+2)  
3474 32 6a fe			ld (debug_mark+2),a  
3477 18 03			jr .pastdmark  
3479 ..			.dmark: db "IF1"  
347c f1			.pastdmark: pop af  
347d			endm  
# End of macro DMARK
347d						CALLMONITOR 
347d cd 6c fe			call debug_vector  
3480				endm  
# End of macro CALLMONITOR
3480					endif 
3480 b7				or a        ; clear carry flag 
3481 11 00 00			ld de, 0 
3484 eb				ex de,hl 
3485 ed 52			sbc hl, de 
3487 c2 11 35			jp nz, .iftrue 
348a			 
348a					if DEBUG_FORTH_WORDS 
348a						DMARK "IF2" 
348a f5				push af  
348b 3a 9f 34			ld a, (.dmark)  
348e 32 68 fe			ld (debug_mark),a  
3491 3a a0 34			ld a, (.dmark+1)  
3494 32 69 fe			ld (debug_mark+1),a  
3497 3a a1 34			ld a, (.dmark+2)  
349a 32 6a fe			ld (debug_mark+2),a  
349d 18 03			jr .pastdmark  
349f ..			.dmark: db "IF2"  
34a2 f1			.pastdmark: pop af  
34a3			endm  
# End of macro DMARK
34a3						CALLMONITOR 
34a3 cd 6c fe			call debug_vector  
34a6				endm  
# End of macro CALLMONITOR
34a6					endif 
34a6			 
34a6			; if not true then skip to THEN 
34a6			 
34a6				; TODO get tok_ptr 
34a6				; TODO consume toks until we get to THEN 
34a6			 
34a6 2a bf f4			ld hl, (os_tok_ptr) 
34a9					if DEBUG_FORTH_WORDS 
34a9						DMARK "IF3" 
34a9 f5				push af  
34aa 3a be 34			ld a, (.dmark)  
34ad 32 68 fe			ld (debug_mark),a  
34b0 3a bf 34			ld a, (.dmark+1)  
34b3 32 69 fe			ld (debug_mark+1),a  
34b6 3a c0 34			ld a, (.dmark+2)  
34b9 32 6a fe			ld (debug_mark+2),a  
34bc 18 03			jr .pastdmark  
34be ..			.dmark: db "IF3"  
34c1 f1			.pastdmark: pop af  
34c2			endm  
# End of macro DMARK
34c2						CALLMONITOR 
34c2 cd 6c fe			call debug_vector  
34c5				endm  
# End of macro CALLMONITOR
34c5						 
34c5					endif 
34c5 11 0c 35			ld de, .ifthen 
34c8					if DEBUG_FORTH_WORDS 
34c8						DMARK "IF4" 
34c8 f5				push af  
34c9 3a dd 34			ld a, (.dmark)  
34cc 32 68 fe			ld (debug_mark),a  
34cf 3a de 34			ld a, (.dmark+1)  
34d2 32 69 fe			ld (debug_mark+1),a  
34d5 3a df 34			ld a, (.dmark+2)  
34d8 32 6a fe			ld (debug_mark+2),a  
34db 18 03			jr .pastdmark  
34dd ..			.dmark: db "IF4"  
34e0 f1			.pastdmark: pop af  
34e1			endm  
# End of macro DMARK
34e1						CALLMONITOR 
34e1 cd 6c fe			call debug_vector  
34e4				endm  
# End of macro CALLMONITOR
34e4					endif 
34e4 cd cd 25			call findnexttok  
34e7			 
34e7					if DEBUG_FORTH_WORDS 
34e7						DMARK "IF5" 
34e7 f5				push af  
34e8 3a fc 34			ld a, (.dmark)  
34eb 32 68 fe			ld (debug_mark),a  
34ee 3a fd 34			ld a, (.dmark+1)  
34f1 32 69 fe			ld (debug_mark+1),a  
34f4 3a fe 34			ld a, (.dmark+2)  
34f7 32 6a fe			ld (debug_mark+2),a  
34fa 18 03			jr .pastdmark  
34fc ..			.dmark: db "IF5"  
34ff f1			.pastdmark: pop af  
3500			endm  
# End of macro DMARK
3500						CALLMONITOR 
3500 cd 6c fe			call debug_vector  
3503				endm  
# End of macro CALLMONITOR
3503					endif 
3503				; TODO replace below with ; exec using tok_ptr 
3503 22 bf f4			ld (os_tok_ptr), hl 
3506 c3 43 25			jp exec1 
3509				NEXTW 
3509 c3 b2 24			jp macro_next 
350c				endm 
# End of macro NEXTW
350c			 
350c .. 00		.ifthen:  db "THEN",0 
3511			 
3511			.iftrue:		 
3511				; Exec next words normally 
3511			 
3511				; if true then exec following IF as normal 
3511					if DEBUG_FORTH_WORDS 
3511						DMARK "IFT" 
3511 f5				push af  
3512 3a 26 35			ld a, (.dmark)  
3515 32 68 fe			ld (debug_mark),a  
3518 3a 27 35			ld a, (.dmark+1)  
351b 32 69 fe			ld (debug_mark+1),a  
351e 3a 28 35			ld a, (.dmark+2)  
3521 32 6a fe			ld (debug_mark+2),a  
3524 18 03			jr .pastdmark  
3526 ..			.dmark: db "IFT"  
3529 f1			.pastdmark: pop af  
352a			endm  
# End of macro DMARK
352a						CALLMONITOR 
352a cd 6c fe			call debug_vector  
352d				endm  
# End of macro CALLMONITOR
352d					endif 
352d			 
352d					NEXTW 
352d c3 b2 24			jp macro_next 
3530				endm 
# End of macro NEXTW
3530			.THEN: 
3530				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
3530 1f				db WORD_SYS_CORE+11             
3531 58 35			dw .ELSE            
3533 05				db 4 + 1 
3534 .. 00			db "THEN",0              
3539				endm 
# End of macro CWHEAD
3539			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3539					if DEBUG_FORTH_WORDS_KEY 
3539						DMARK "THN" 
3539 f5				push af  
353a 3a 4e 35			ld a, (.dmark)  
353d 32 68 fe			ld (debug_mark),a  
3540 3a 4f 35			ld a, (.dmark+1)  
3543 32 69 fe			ld (debug_mark+1),a  
3546 3a 50 35			ld a, (.dmark+2)  
3549 32 6a fe			ld (debug_mark+2),a  
354c 18 03			jr .pastdmark  
354e ..			.dmark: db "THN"  
3551 f1			.pastdmark: pop af  
3552			endm  
# End of macro DMARK
3552						CALLMONITOR 
3552 cd 6c fe			call debug_vector  
3555				endm  
# End of macro CALLMONITOR
3555					endif 
3555					NEXTW 
3555 c3 b2 24			jp macro_next 
3558				endm 
# End of macro NEXTW
3558			.ELSE: 
3558				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3558 20				db WORD_SYS_CORE+12             
3559 80 35			dw .DO            
355b 03				db 2 + 1 
355c .. 00			db "ELSE",0              
3561				endm 
# End of macro CWHEAD
3561			; | ELSE ( -- ) Not supported - does nothing | TODO 
3561			 
3561					if DEBUG_FORTH_WORDS_KEY 
3561						DMARK "ELS" 
3561 f5				push af  
3562 3a 76 35			ld a, (.dmark)  
3565 32 68 fe			ld (debug_mark),a  
3568 3a 77 35			ld a, (.dmark+1)  
356b 32 69 fe			ld (debug_mark+1),a  
356e 3a 78 35			ld a, (.dmark+2)  
3571 32 6a fe			ld (debug_mark+2),a  
3574 18 03			jr .pastdmark  
3576 ..			.dmark: db "ELS"  
3579 f1			.pastdmark: pop af  
357a			endm  
# End of macro DMARK
357a						CALLMONITOR 
357a cd 6c fe			call debug_vector  
357d				endm  
# End of macro CALLMONITOR
357d					endif 
357d			 
357d			 
357d					NEXTW 
357d c3 b2 24			jp macro_next 
3580				endm 
# End of macro NEXTW
3580			.DO: 
3580				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
3580 21				db WORD_SYS_CORE+13             
3581 a7 36			dw .LOOP            
3583 03				db 2 + 1 
3584 .. 00			db "DO",0              
3587				endm 
# End of macro CWHEAD
3587			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3587			 
3587					if DEBUG_FORTH_WORDS_KEY 
3587						DMARK "DO." 
3587 f5				push af  
3588 3a 9c 35			ld a, (.dmark)  
358b 32 68 fe			ld (debug_mark),a  
358e 3a 9d 35			ld a, (.dmark+1)  
3591 32 69 fe			ld (debug_mark+1),a  
3594 3a 9e 35			ld a, (.dmark+2)  
3597 32 6a fe			ld (debug_mark+2),a  
359a 18 03			jr .pastdmark  
359c ..			.dmark: db "DO."  
359f f1			.pastdmark: pop af  
35a0			endm  
# End of macro DMARK
35a0						CALLMONITOR 
35a0 cd 6c fe			call debug_vector  
35a3				endm  
# End of macro CALLMONITOR
35a3					endif 
35a3			;  push pc to rsp stack past the DO 
35a3			 
35a3 2a bf f4				ld hl, (os_tok_ptr) 
35a6 23					inc hl   ; D 
35a7 23					inc hl  ; O 
35a8 23					inc hl   ; null 
35a9					if DEBUG_FORTH_WORDS 
35a9						DMARK "DO2" 
35a9 f5				push af  
35aa 3a be 35			ld a, (.dmark)  
35ad 32 68 fe			ld (debug_mark),a  
35b0 3a bf 35			ld a, (.dmark+1)  
35b3 32 69 fe			ld (debug_mark+1),a  
35b6 3a c0 35			ld a, (.dmark+2)  
35b9 32 6a fe			ld (debug_mark+2),a  
35bc 18 03			jr .pastdmark  
35be ..			.dmark: db "DO2"  
35c1 f1			.pastdmark: pop af  
35c2			endm  
# End of macro DMARK
35c2						CALLMONITOR 
35c2 cd 6c fe			call debug_vector  
35c5				endm  
# End of macro CALLMONITOR
35c5					endif 
35c5					FORTH_RSP_NEXT 
35c5 cd ac 20			call macro_forth_rsp_next 
35c8				endm 
# End of macro FORTH_RSP_NEXT
35c8					if DEBUG_FORTH_WORDS 
35c8						DMARK "DO3" 
35c8 f5				push af  
35c9 3a dd 35			ld a, (.dmark)  
35cc 32 68 fe			ld (debug_mark),a  
35cf 3a de 35			ld a, (.dmark+1)  
35d2 32 69 fe			ld (debug_mark+1),a  
35d5 3a df 35			ld a, (.dmark+2)  
35d8 32 6a fe			ld (debug_mark+2),a  
35db 18 03			jr .pastdmark  
35dd ..			.dmark: db "DO3"  
35e0 f1			.pastdmark: pop af  
35e1			endm  
# End of macro DMARK
35e1						CALLMONITOR 
35e1 cd 6c fe			call debug_vector  
35e4				endm  
# End of macro CALLMONITOR
35e4					endif 
35e4			 
35e4					;if DEBUG_FORTH_WORDS 
35e4				;		push hl 
35e4			;		endif  
35e4			 
35e4			; get counters from data stack 
35e4			 
35e4			 
35e4					FORTH_DSP_VALUEHL 
35e4 cd fc 22			call macro_dsp_valuehl 
35e7				endm 
# End of macro FORTH_DSP_VALUEHL
35e7 e5					push hl		 ; hl now has starting counter which needs to be tos 
35e8			 
35e8					if DEBUG_FORTH_WORDS 
35e8						DMARK "DO4" 
35e8 f5				push af  
35e9 3a fd 35			ld a, (.dmark)  
35ec 32 68 fe			ld (debug_mark),a  
35ef 3a fe 35			ld a, (.dmark+1)  
35f2 32 69 fe			ld (debug_mark+1),a  
35f5 3a ff 35			ld a, (.dmark+2)  
35f8 32 6a fe			ld (debug_mark+2),a  
35fb 18 03			jr .pastdmark  
35fd ..			.dmark: db "DO4"  
3600 f1			.pastdmark: pop af  
3601			endm  
# End of macro DMARK
3601						CALLMONITOR 
3601 cd 6c fe			call debug_vector  
3604				endm  
# End of macro CALLMONITOR
3604					endif 
3604					FORTH_DSP_POP 
3604 cd b4 23			call macro_forth_dsp_pop 
3607				endm 
# End of macro FORTH_DSP_POP
3607			 
3607					if DEBUG_FORTH_WORDS 
3607						DMARK "DO5" 
3607 f5				push af  
3608 3a 1c 36			ld a, (.dmark)  
360b 32 68 fe			ld (debug_mark),a  
360e 3a 1d 36			ld a, (.dmark+1)  
3611 32 69 fe			ld (debug_mark+1),a  
3614 3a 1e 36			ld a, (.dmark+2)  
3617 32 6a fe			ld (debug_mark+2),a  
361a 18 03			jr .pastdmark  
361c ..			.dmark: db "DO5"  
361f f1			.pastdmark: pop af  
3620			endm  
# End of macro DMARK
3620						CALLMONITOR 
3620 cd 6c fe			call debug_vector  
3623				endm  
# End of macro CALLMONITOR
3623					endif 
3623			 
3623					FORTH_DSP_VALUEHL 
3623 cd fc 22			call macro_dsp_valuehl 
3626				endm 
# End of macro FORTH_DSP_VALUEHL
3626			;		push hl		 ; hl now has starting limit counter 
3626			 
3626					if DEBUG_FORTH_WORDS 
3626						DMARK "DO6" 
3626 f5				push af  
3627 3a 3b 36			ld a, (.dmark)  
362a 32 68 fe			ld (debug_mark),a  
362d 3a 3c 36			ld a, (.dmark+1)  
3630 32 69 fe			ld (debug_mark+1),a  
3633 3a 3d 36			ld a, (.dmark+2)  
3636 32 6a fe			ld (debug_mark+2),a  
3639 18 03			jr .pastdmark  
363b ..			.dmark: db "DO6"  
363e f1			.pastdmark: pop af  
363f			endm  
# End of macro DMARK
363f						CALLMONITOR 
363f cd 6c fe			call debug_vector  
3642				endm  
# End of macro CALLMONITOR
3642					endif 
3642					FORTH_DSP_POP 
3642 cd b4 23			call macro_forth_dsp_pop 
3645				endm 
# End of macro FORTH_DSP_POP
3645			 
3645			; put counters on the loop stack 
3645			 
3645			;		pop hl			 ; limit counter 
3645 d1					pop de			; start counter 
3646			 
3646					; push limit counter 
3646			 
3646					if DEBUG_FORTH_WORDS 
3646						DMARK "DO7" 
3646 f5				push af  
3647 3a 5b 36			ld a, (.dmark)  
364a 32 68 fe			ld (debug_mark),a  
364d 3a 5c 36			ld a, (.dmark+1)  
3650 32 69 fe			ld (debug_mark+1),a  
3653 3a 5d 36			ld a, (.dmark+2)  
3656 32 6a fe			ld (debug_mark+2),a  
3659 18 03			jr .pastdmark  
365b ..			.dmark: db "DO7"  
365e f1			.pastdmark: pop af  
365f			endm  
# End of macro DMARK
365f						CALLMONITOR 
365f cd 6c fe			call debug_vector  
3662				endm  
# End of macro CALLMONITOR
3662					endif 
3662					FORTH_LOOP_NEXT 
3662 cd 2d 23			call macro_forth_loop_next 
3665				endm 
# End of macro FORTH_LOOP_NEXT
3665			 
3665					; push start counter 
3665			 
3665 eb					ex de, hl 
3666					if DEBUG_FORTH_WORDS 
3666						DMARK "DO7" 
3666 f5				push af  
3667 3a 7b 36			ld a, (.dmark)  
366a 32 68 fe			ld (debug_mark),a  
366d 3a 7c 36			ld a, (.dmark+1)  
3670 32 69 fe			ld (debug_mark+1),a  
3673 3a 7d 36			ld a, (.dmark+2)  
3676 32 6a fe			ld (debug_mark+2),a  
3679 18 03			jr .pastdmark  
367b ..			.dmark: db "DO7"  
367e f1			.pastdmark: pop af  
367f			endm  
# End of macro DMARK
367f						CALLMONITOR 
367f cd 6c fe			call debug_vector  
3682				endm  
# End of macro CALLMONITOR
3682					endif 
3682					FORTH_LOOP_NEXT 
3682 cd 2d 23			call macro_forth_loop_next 
3685				endm 
# End of macro FORTH_LOOP_NEXT
3685			 
3685			 
3685					; init first round of I counter 
3685			 
3685 22 e3 f4				ld (os_current_i), hl 
3688			 
3688					if DEBUG_FORTH_WORDS 
3688						DMARK "DO8" 
3688 f5				push af  
3689 3a 9d 36			ld a, (.dmark)  
368c 32 68 fe			ld (debug_mark),a  
368f 3a 9e 36			ld a, (.dmark+1)  
3692 32 69 fe			ld (debug_mark+1),a  
3695 3a 9f 36			ld a, (.dmark+2)  
3698 32 6a fe			ld (debug_mark+2),a  
369b 18 03			jr .pastdmark  
369d ..			.dmark: db "DO8"  
36a0 f1			.pastdmark: pop af  
36a1			endm  
# End of macro DMARK
36a1						CALLMONITOR 
36a1 cd 6c fe			call debug_vector  
36a4				endm  
# End of macro CALLMONITOR
36a4					endif 
36a4			 
36a4					NEXTW 
36a4 c3 b2 24			jp macro_next 
36a7				endm 
# End of macro NEXTW
36a7			.LOOP: 
36a7				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
36a7 22				db WORD_SYS_CORE+14             
36a8 bf 37			dw .I            
36aa 05				db 4 + 1 
36ab .. 00			db "LOOP",0              
36b0				endm 
# End of macro CWHEAD
36b0			; | LOOP ( -- ) Increment and test loop counter  | DONE 
36b0			 
36b0				; pop tos as current loop count to hl 
36b0			 
36b0				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
36b0			 
36b0				FORTH_LOOP_TOS 
36b0 cd 60 23			call macro_forth_loop_tos 
36b3				endm 
# End of macro FORTH_LOOP_TOS
36b3 e5				push hl 
36b4			 
36b4					if DEBUG_FORTH_WORDS_KEY 
36b4						DMARK "LOP" 
36b4 f5				push af  
36b5 3a c9 36			ld a, (.dmark)  
36b8 32 68 fe			ld (debug_mark),a  
36bb 3a ca 36			ld a, (.dmark+1)  
36be 32 69 fe			ld (debug_mark+1),a  
36c1 3a cb 36			ld a, (.dmark+2)  
36c4 32 6a fe			ld (debug_mark+2),a  
36c7 18 03			jr .pastdmark  
36c9 ..			.dmark: db "LOP"  
36cc f1			.pastdmark: pop af  
36cd			endm  
# End of macro DMARK
36cd						CALLMONITOR 
36cd cd 6c fe			call debug_vector  
36d0				endm  
# End of macro CALLMONITOR
36d0					endif 
36d0				; next item on the stack is the limit. get it 
36d0			 
36d0			 
36d0				FORTH_LOOP_POP 
36d0 cd 6a 23			call macro_forth_loop_pop 
36d3				endm 
# End of macro FORTH_LOOP_POP
36d3			 
36d3				FORTH_LOOP_TOS 
36d3 cd 60 23			call macro_forth_loop_tos 
36d6				endm 
# End of macro FORTH_LOOP_TOS
36d6			 
36d6 d1				pop de		 ; de = i, hl = limit 
36d7			 
36d7					if DEBUG_FORTH_WORDS 
36d7						DMARK "LP1" 
36d7 f5				push af  
36d8 3a ec 36			ld a, (.dmark)  
36db 32 68 fe			ld (debug_mark),a  
36de 3a ed 36			ld a, (.dmark+1)  
36e1 32 69 fe			ld (debug_mark+1),a  
36e4 3a ee 36			ld a, (.dmark+2)  
36e7 32 6a fe			ld (debug_mark+2),a  
36ea 18 03			jr .pastdmark  
36ec ..			.dmark: db "LP1"  
36ef f1			.pastdmark: pop af  
36f0			endm  
# End of macro DMARK
36f0						CALLMONITOR 
36f0 cd 6c fe			call debug_vector  
36f3				endm  
# End of macro CALLMONITOR
36f3					endif 
36f3			 
36f3				; go back to previous word 
36f3			 
36f3 d5				push de    ; save I for inc later 
36f4			 
36f4			 
36f4				; get limit 
36f4				;  is I at limit? 
36f4			 
36f4			 
36f4					if DEBUG_FORTH_WORDS 
36f4						DMARK "LP1" 
36f4 f5				push af  
36f5 3a 09 37			ld a, (.dmark)  
36f8 32 68 fe			ld (debug_mark),a  
36fb 3a 0a 37			ld a, (.dmark+1)  
36fe 32 69 fe			ld (debug_mark+1),a  
3701 3a 0b 37			ld a, (.dmark+2)  
3704 32 6a fe			ld (debug_mark+2),a  
3707 18 03			jr .pastdmark  
3709 ..			.dmark: db "LP1"  
370c f1			.pastdmark: pop af  
370d			endm  
# End of macro DMARK
370d						CALLMONITOR 
370d cd 6c fe			call debug_vector  
3710				endm  
# End of macro CALLMONITOR
3710					endif 
3710			 
3710 ed 52			sbc hl, de 
3712			 
3712			 
3712				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3712			 
3712 20 26				jr nz, .loopnotdone 
3714			 
3714 e1				pop hl   ; get rid of saved I 
3715				FORTH_LOOP_POP     ; get rid of limit 
3715 cd 6a 23			call macro_forth_loop_pop 
3718				endm 
# End of macro FORTH_LOOP_POP
3718			 
3718				FORTH_RSP_POP     ; get rid of DO ptr 
3718 cd cd 20			call macro_forth_rsp_pop 
371b				endm 
# End of macro FORTH_RSP_POP
371b			 
371b			if DEBUG_FORTH_WORDS 
371b						DMARK "LP>" 
371b f5				push af  
371c 3a 30 37			ld a, (.dmark)  
371f 32 68 fe			ld (debug_mark),a  
3722 3a 31 37			ld a, (.dmark+1)  
3725 32 69 fe			ld (debug_mark+1),a  
3728 3a 32 37			ld a, (.dmark+2)  
372b 32 6a fe			ld (debug_mark+2),a  
372e 18 03			jr .pastdmark  
3730 ..			.dmark: db "LP>"  
3733 f1			.pastdmark: pop af  
3734			endm  
# End of macro DMARK
3734				CALLMONITOR 
3734 cd 6c fe			call debug_vector  
3737				endm  
# End of macro CALLMONITOR
3737			endif 
3737			 
3737					NEXTW 
3737 c3 b2 24			jp macro_next 
373a				endm 
# End of macro NEXTW
373a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
373a			 
373a			.loopnotdone: 
373a			 
373a e1				pop hl    ; get I 
373b 23				inc hl 
373c			 
373c			   	; save new I 
373c			 
373c			 
373c					; set I counter 
373c			 
373c 22 e3 f4				ld (os_current_i), hl 
373f			 
373f					if DEBUG_FORTH_WORDS 
373f						DMARK "LPN" 
373f f5				push af  
3740 3a 54 37			ld a, (.dmark)  
3743 32 68 fe			ld (debug_mark),a  
3746 3a 55 37			ld a, (.dmark+1)  
3749 32 69 fe			ld (debug_mark+1),a  
374c 3a 56 37			ld a, (.dmark+2)  
374f 32 6a fe			ld (debug_mark+2),a  
3752 18 03			jr .pastdmark  
3754 ..			.dmark: db "LPN"  
3757 f1			.pastdmark: pop af  
3758			endm  
# End of macro DMARK
3758					CALLMONITOR 
3758 cd 6c fe			call debug_vector  
375b				endm  
# End of macro CALLMONITOR
375b					endif 
375b					 
375b				FORTH_LOOP_NEXT 
375b cd 2d 23			call macro_forth_loop_next 
375e				endm 
# End of macro FORTH_LOOP_NEXT
375e			 
375e			 
375e					if DEBUG_FORTH_WORDS 
375e eb						ex de,hl 
375f					endif 
375f			 
375f			;	; get DO ptr 
375f			; 
375f					if DEBUG_FORTH_WORDS 
375f						DMARK "LP7" 
375f f5				push af  
3760 3a 74 37			ld a, (.dmark)  
3763 32 68 fe			ld (debug_mark),a  
3766 3a 75 37			ld a, (.dmark+1)  
3769 32 69 fe			ld (debug_mark+1),a  
376c 3a 76 37			ld a, (.dmark+2)  
376f 32 6a fe			ld (debug_mark+2),a  
3772 18 03			jr .pastdmark  
3774 ..			.dmark: db "LP7"  
3777 f1			.pastdmark: pop af  
3778			endm  
# End of macro DMARK
3778					CALLMONITOR 
3778 cd 6c fe			call debug_vector  
377b				endm  
# End of macro CALLMONITOR
377b					endif 
377b				FORTH_RSP_TOS 
377b cd c3 20			call macro_forth_rsp_tos 
377e				endm 
# End of macro FORTH_RSP_TOS
377e			 
377e					if DEBUG_FORTH_WORDS 
377e						DMARK "LP8" 
377e f5				push af  
377f 3a 93 37			ld a, (.dmark)  
3782 32 68 fe			ld (debug_mark),a  
3785 3a 94 37			ld a, (.dmark+1)  
3788 32 69 fe			ld (debug_mark+1),a  
378b 3a 95 37			ld a, (.dmark+2)  
378e 32 6a fe			ld (debug_mark+2),a  
3791 18 03			jr .pastdmark  
3793 ..			.dmark: db "LP8"  
3796 f1			.pastdmark: pop af  
3797			endm  
# End of macro DMARK
3797					CALLMONITOR 
3797 cd 6c fe			call debug_vector  
379a				endm  
# End of macro CALLMONITOR
379a					endif 
379a				;push hl 
379a			 
379a				; not going to DO any more 
379a				; get rid of the RSP pointer as DO will add it back in 
379a				;FORTH_RSP_POP 
379a				;pop hl 
379a			 
379a				;ld hl,(cli_ret_sp) 
379a				;ld e, (hl) 
379a				;inc hl 
379a				;ld d, (hl) 
379a				;ex de,hl 
379a 22 bf f4			ld (os_tok_ptr), hl 
379d					if DEBUG_FORTH_WORDS 
379d						DMARK "LP<" 
379d f5				push af  
379e 3a b2 37			ld a, (.dmark)  
37a1 32 68 fe			ld (debug_mark),a  
37a4 3a b3 37			ld a, (.dmark+1)  
37a7 32 69 fe			ld (debug_mark+1),a  
37aa 3a b4 37			ld a, (.dmark+2)  
37ad 32 6a fe			ld (debug_mark+2),a  
37b0 18 03			jr .pastdmark  
37b2 ..			.dmark: db "LP<"  
37b5 f1			.pastdmark: pop af  
37b6			endm  
# End of macro DMARK
37b6					CALLMONITOR 
37b6 cd 6c fe			call debug_vector  
37b9				endm  
# End of macro CALLMONITOR
37b9				endif 
37b9 c3 43 25			jp exec1 
37bc			 
37bc					 
37bc			 
37bc			 
37bc					NEXTW 
37bc c3 b2 24			jp macro_next 
37bf				endm 
# End of macro NEXTW
37bf			.I:  
37bf			 
37bf				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
37bf 5e				db WORD_SYS_CORE+74             
37c0 ea 37			dw .DLOOP            
37c2 02				db 1 + 1 
37c3 .. 00			db "I",0              
37c5				endm 
# End of macro CWHEAD
37c5			; | I ( -- ) Current loop counter | DONE 
37c5					if DEBUG_FORTH_WORDS_KEY 
37c5						DMARK "I.." 
37c5 f5				push af  
37c6 3a da 37			ld a, (.dmark)  
37c9 32 68 fe			ld (debug_mark),a  
37cc 3a db 37			ld a, (.dmark+1)  
37cf 32 69 fe			ld (debug_mark+1),a  
37d2 3a dc 37			ld a, (.dmark+2)  
37d5 32 6a fe			ld (debug_mark+2),a  
37d8 18 03			jr .pastdmark  
37da ..			.dmark: db "I.."  
37dd f1			.pastdmark: pop af  
37de			endm  
# End of macro DMARK
37de						CALLMONITOR 
37de cd 6c fe			call debug_vector  
37e1				endm  
# End of macro CALLMONITOR
37e1					endif 
37e1			 
37e1 2a e3 f4				ld hl,(os_current_i) 
37e4 cd 05 21				call forth_push_numhl 
37e7			 
37e7					NEXTW 
37e7 c3 b2 24			jp macro_next 
37ea				endm 
# End of macro NEXTW
37ea			.DLOOP: 
37ea				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
37ea 5f				db WORD_SYS_CORE+75             
37eb cb 38			dw .REPEAT            
37ed 06				db 5 + 1 
37ee .. 00			db "-LOOP",0              
37f4				endm 
# End of macro CWHEAD
37f4			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
37f4				; pop tos as current loop count to hl 
37f4					if DEBUG_FORTH_WORDS_KEY 
37f4						DMARK "-LP" 
37f4 f5				push af  
37f5 3a 09 38			ld a, (.dmark)  
37f8 32 68 fe			ld (debug_mark),a  
37fb 3a 0a 38			ld a, (.dmark+1)  
37fe 32 69 fe			ld (debug_mark+1),a  
3801 3a 0b 38			ld a, (.dmark+2)  
3804 32 6a fe			ld (debug_mark+2),a  
3807 18 03			jr .pastdmark  
3809 ..			.dmark: db "-LP"  
380c f1			.pastdmark: pop af  
380d			endm  
# End of macro DMARK
380d						CALLMONITOR 
380d cd 6c fe			call debug_vector  
3810				endm  
# End of macro CALLMONITOR
3810					endif 
3810			 
3810				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3810			 
3810				FORTH_LOOP_TOS 
3810 cd 60 23			call macro_forth_loop_tos 
3813				endm 
# End of macro FORTH_LOOP_TOS
3813 e5				push hl 
3814			 
3814					if DEBUG_FORTH_WORDS 
3814						DMARK "-LP" 
3814 f5				push af  
3815 3a 29 38			ld a, (.dmark)  
3818 32 68 fe			ld (debug_mark),a  
381b 3a 2a 38			ld a, (.dmark+1)  
381e 32 69 fe			ld (debug_mark+1),a  
3821 3a 2b 38			ld a, (.dmark+2)  
3824 32 6a fe			ld (debug_mark+2),a  
3827 18 03			jr .pastdmark  
3829 ..			.dmark: db "-LP"  
382c f1			.pastdmark: pop af  
382d			endm  
# End of macro DMARK
382d						CALLMONITOR 
382d cd 6c fe			call debug_vector  
3830				endm  
# End of macro CALLMONITOR
3830					endif 
3830				; next item on the stack is the limit. get it 
3830			 
3830			 
3830				FORTH_LOOP_POP 
3830 cd 6a 23			call macro_forth_loop_pop 
3833				endm 
# End of macro FORTH_LOOP_POP
3833			 
3833				FORTH_LOOP_TOS 
3833 cd 60 23			call macro_forth_loop_tos 
3836				endm 
# End of macro FORTH_LOOP_TOS
3836			 
3836 d1				pop de		 ; de = i, hl = limit 
3837			 
3837					if DEBUG_FORTH_WORDS 
3837						DMARK "-L1" 
3837 f5				push af  
3838 3a 4c 38			ld a, (.dmark)  
383b 32 68 fe			ld (debug_mark),a  
383e 3a 4d 38			ld a, (.dmark+1)  
3841 32 69 fe			ld (debug_mark+1),a  
3844 3a 4e 38			ld a, (.dmark+2)  
3847 32 6a fe			ld (debug_mark+2),a  
384a 18 03			jr .pastdmark  
384c ..			.dmark: db "-L1"  
384f f1			.pastdmark: pop af  
3850			endm  
# End of macro DMARK
3850						CALLMONITOR 
3850 cd 6c fe			call debug_vector  
3853				endm  
# End of macro CALLMONITOR
3853					endif 
3853			 
3853				; go back to previous word 
3853			 
3853 d5				push de    ; save I for inc later 
3854			 
3854			 
3854				; get limit 
3854				;  is I at limit? 
3854			 
3854			 
3854					if DEBUG_FORTH_WORDS 
3854						DMARK "-L1" 
3854 f5				push af  
3855 3a 69 38			ld a, (.dmark)  
3858 32 68 fe			ld (debug_mark),a  
385b 3a 6a 38			ld a, (.dmark+1)  
385e 32 69 fe			ld (debug_mark+1),a  
3861 3a 6b 38			ld a, (.dmark+2)  
3864 32 6a fe			ld (debug_mark+2),a  
3867 18 03			jr .pastdmark  
3869 ..			.dmark: db "-L1"  
386c f1			.pastdmark: pop af  
386d			endm  
# End of macro DMARK
386d						CALLMONITOR 
386d cd 6c fe			call debug_vector  
3870				endm  
# End of macro CALLMONITOR
3870					endif 
3870			 
3870 ed 52			sbc hl, de 
3872			 
3872			 
3872				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3872			 
3872 20 26				jr nz, .mloopnotdone 
3874			 
3874 e1				pop hl   ; get rid of saved I 
3875				FORTH_LOOP_POP     ; get rid of limit 
3875 cd 6a 23			call macro_forth_loop_pop 
3878				endm 
# End of macro FORTH_LOOP_POP
3878			 
3878				FORTH_RSP_POP     ; get rid of DO ptr 
3878 cd cd 20			call macro_forth_rsp_pop 
387b				endm 
# End of macro FORTH_RSP_POP
387b			 
387b			if DEBUG_FORTH_WORDS 
387b						DMARK "-L>" 
387b f5				push af  
387c 3a 90 38			ld a, (.dmark)  
387f 32 68 fe			ld (debug_mark),a  
3882 3a 91 38			ld a, (.dmark+1)  
3885 32 69 fe			ld (debug_mark+1),a  
3888 3a 92 38			ld a, (.dmark+2)  
388b 32 6a fe			ld (debug_mark+2),a  
388e 18 03			jr .pastdmark  
3890 ..			.dmark: db "-L>"  
3893 f1			.pastdmark: pop af  
3894			endm  
# End of macro DMARK
3894				CALLMONITOR 
3894 cd 6c fe			call debug_vector  
3897				endm  
# End of macro CALLMONITOR
3897			endif 
3897			 
3897					NEXTW 
3897 c3 b2 24			jp macro_next 
389a				endm 
# End of macro NEXTW
389a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
389a			 
389a			.mloopnotdone: 
389a			 
389a e1				pop hl    ; get I 
389b 2b				dec hl 
389c			 
389c			   	; save new I 
389c			 
389c			 
389c					; set I counter 
389c			 
389c 22 e3 f4				ld (os_current_i), hl 
389f			 
389f					 
389f				FORTH_LOOP_NEXT 
389f cd 2d 23			call macro_forth_loop_next 
38a2				endm 
# End of macro FORTH_LOOP_NEXT
38a2			 
38a2			 
38a2					if DEBUG_FORTH_WORDS 
38a2 eb						ex de,hl 
38a3					endif 
38a3			 
38a3			;	; get DO ptr 
38a3			; 
38a3				FORTH_RSP_TOS 
38a3 cd c3 20			call macro_forth_rsp_tos 
38a6				endm 
# End of macro FORTH_RSP_TOS
38a6			 
38a6				;push hl 
38a6			 
38a6				; not going to DO any more 
38a6				; get rid of the RSP pointer as DO will add it back in 
38a6				;FORTH_RSP_POP 
38a6				;pop hl 
38a6			 
38a6			 
38a6 22 bf f4			ld (os_tok_ptr), hl 
38a9					if DEBUG_FORTH_WORDS 
38a9						DMARK "-L<" 
38a9 f5				push af  
38aa 3a be 38			ld a, (.dmark)  
38ad 32 68 fe			ld (debug_mark),a  
38b0 3a bf 38			ld a, (.dmark+1)  
38b3 32 69 fe			ld (debug_mark+1),a  
38b6 3a c0 38			ld a, (.dmark+2)  
38b9 32 6a fe			ld (debug_mark+2),a  
38bc 18 03			jr .pastdmark  
38be ..			.dmark: db "-L<"  
38c1 f1			.pastdmark: pop af  
38c2			endm  
# End of macro DMARK
38c2					CALLMONITOR 
38c2 cd 6c fe			call debug_vector  
38c5				endm  
# End of macro CALLMONITOR
38c5				endif 
38c5 c3 43 25			jp exec1 
38c8			 
38c8					 
38c8			 
38c8			 
38c8			 
38c8				NEXTW 
38c8 c3 b2 24			jp macro_next 
38cb				endm 
# End of macro NEXTW
38cb			 
38cb			 
38cb			 
38cb			 
38cb			.REPEAT: 
38cb				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
38cb 71				db WORD_SYS_CORE+93             
38cc 1e 39			dw .UNTIL            
38ce 06				db 5 + 1 
38cf .. 00			db "REPEAT",0              
38d6				endm 
# End of macro CWHEAD
38d6			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
38d6			;  push pc to rsp stack past the REPEAT 
38d6					if DEBUG_FORTH_WORDS_KEY 
38d6						DMARK "REP" 
38d6 f5				push af  
38d7 3a eb 38			ld a, (.dmark)  
38da 32 68 fe			ld (debug_mark),a  
38dd 3a ec 38			ld a, (.dmark+1)  
38e0 32 69 fe			ld (debug_mark+1),a  
38e3 3a ed 38			ld a, (.dmark+2)  
38e6 32 6a fe			ld (debug_mark+2),a  
38e9 18 03			jr .pastdmark  
38eb ..			.dmark: db "REP"  
38ee f1			.pastdmark: pop af  
38ef			endm  
# End of macro DMARK
38ef						CALLMONITOR 
38ef cd 6c fe			call debug_vector  
38f2				endm  
# End of macro CALLMONITOR
38f2					endif 
38f2			 
38f2 2a bf f4				ld hl, (os_tok_ptr) 
38f5 23					inc hl   ; R 
38f6 23					inc hl  ; E 
38f7 23					inc hl   ; P 
38f8 23					inc hl   ; E 
38f9 23					inc hl   ; A 
38fa 23					inc hl   ; T 
38fb 23					inc hl   ; zero 
38fc					FORTH_RSP_NEXT 
38fc cd ac 20			call macro_forth_rsp_next 
38ff				endm 
# End of macro FORTH_RSP_NEXT
38ff			 
38ff			 
38ff					if DEBUG_FORTH_WORDS 
38ff						DMARK "REP" 
38ff f5				push af  
3900 3a 14 39			ld a, (.dmark)  
3903 32 68 fe			ld (debug_mark),a  
3906 3a 15 39			ld a, (.dmark+1)  
3909 32 69 fe			ld (debug_mark+1),a  
390c 3a 16 39			ld a, (.dmark+2)  
390f 32 6a fe			ld (debug_mark+2),a  
3912 18 03			jr .pastdmark  
3914 ..			.dmark: db "REP"  
3917 f1			.pastdmark: pop af  
3918			endm  
# End of macro DMARK
3918						;pop bc    ; TODO BUG ?????? what is this for???? 
3918						CALLMONITOR 
3918 cd 6c fe			call debug_vector  
391b				endm  
# End of macro CALLMONITOR
391b					endif 
391b			 
391b					NEXTW 
391b c3 b2 24			jp macro_next 
391e				endm 
# End of macro NEXTW
391e			;	       NEXTW 
391e			 
391e			.UNTIL: 
391e				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
391e 72				db WORD_SYS_CORE+94             
391f b5 39			dw .ENDFLOW            
3921 06				db 5 + 1 
3922 .. 00			db "UNTIL",0              
3928				endm 
# End of macro CWHEAD
3928			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3928			 
3928				; pop tos as check 
3928			 
3928				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3928			 
3928				FORTH_DSP_VALUEHL 
3928 cd fc 22			call macro_dsp_valuehl 
392b				endm 
# End of macro FORTH_DSP_VALUEHL
392b			 
392b					if DEBUG_FORTH_WORDS_KEY 
392b						DMARK "UNT" 
392b f5				push af  
392c 3a 40 39			ld a, (.dmark)  
392f 32 68 fe			ld (debug_mark),a  
3932 3a 41 39			ld a, (.dmark+1)  
3935 32 69 fe			ld (debug_mark+1),a  
3938 3a 42 39			ld a, (.dmark+2)  
393b 32 6a fe			ld (debug_mark+2),a  
393e 18 03			jr .pastdmark  
3940 ..			.dmark: db "UNT"  
3943 f1			.pastdmark: pop af  
3944			endm  
# End of macro DMARK
3944						CALLMONITOR 
3944 cd 6c fe			call debug_vector  
3947				endm  
# End of macro CALLMONITOR
3947					endif 
3947			 
3947			;	push hl 
3947				FORTH_DSP_POP 
3947 cd b4 23			call macro_forth_dsp_pop 
394a				endm 
# End of macro FORTH_DSP_POP
394a			 
394a			;	pop hl 
394a			 
394a				; test if true 
394a			 
394a cd f8 0f			call ishlzero 
394d			;	ld a,l 
394d			;	add h 
394d			; 
394d			;	cp 0 
394d			 
394d 20 3e			jr nz, .untilnotdone 
394f			 
394f					if DEBUG_FORTH_WORDS 
394f						DMARK "UNf" 
394f f5				push af  
3950 3a 64 39			ld a, (.dmark)  
3953 32 68 fe			ld (debug_mark),a  
3956 3a 65 39			ld a, (.dmark+1)  
3959 32 69 fe			ld (debug_mark+1),a  
395c 3a 66 39			ld a, (.dmark+2)  
395f 32 6a fe			ld (debug_mark+2),a  
3962 18 03			jr .pastdmark  
3964 ..			.dmark: db "UNf"  
3967 f1			.pastdmark: pop af  
3968			endm  
# End of macro DMARK
3968						CALLMONITOR 
3968 cd 6c fe			call debug_vector  
396b				endm  
# End of macro CALLMONITOR
396b					endif 
396b			 
396b			 
396b			 
396b				FORTH_RSP_POP     ; get rid of DO ptr 
396b cd cd 20			call macro_forth_rsp_pop 
396e				endm 
# End of macro FORTH_RSP_POP
396e			 
396e			if DEBUG_FORTH_WORDS 
396e						DMARK "UN>" 
396e f5				push af  
396f 3a 83 39			ld a, (.dmark)  
3972 32 68 fe			ld (debug_mark),a  
3975 3a 84 39			ld a, (.dmark+1)  
3978 32 69 fe			ld (debug_mark+1),a  
397b 3a 85 39			ld a, (.dmark+2)  
397e 32 6a fe			ld (debug_mark+2),a  
3981 18 03			jr .pastdmark  
3983 ..			.dmark: db "UN>"  
3986 f1			.pastdmark: pop af  
3987			endm  
# End of macro DMARK
3987				CALLMONITOR 
3987 cd 6c fe			call debug_vector  
398a				endm  
# End of macro CALLMONITOR
398a			endif 
398a			 
398a					NEXTW 
398a c3 b2 24			jp macro_next 
398d				endm 
# End of macro NEXTW
398d				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
398d			 
398d			.untilnotdone: 
398d			 
398d			 
398d			;	; get DO ptr 
398d			; 
398d				FORTH_RSP_TOS 
398d cd c3 20			call macro_forth_rsp_tos 
3990				endm 
# End of macro FORTH_RSP_TOS
3990			 
3990				;push hl 
3990			 
3990				; not going to DO any more 
3990				; get rid of the RSP pointer as DO will add it back in 
3990				;FORTH_RSP_POP 
3990				;pop hl 
3990			 
3990			 
3990 22 bf f4			ld (os_tok_ptr), hl 
3993					if DEBUG_FORTH_WORDS 
3993						DMARK "UN<" 
3993 f5				push af  
3994 3a a8 39			ld a, (.dmark)  
3997 32 68 fe			ld (debug_mark),a  
399a 3a a9 39			ld a, (.dmark+1)  
399d 32 69 fe			ld (debug_mark+1),a  
39a0 3a aa 39			ld a, (.dmark+2)  
39a3 32 6a fe			ld (debug_mark+2),a  
39a6 18 03			jr .pastdmark  
39a8 ..			.dmark: db "UN<"  
39ab f1			.pastdmark: pop af  
39ac			endm  
# End of macro DMARK
39ac					CALLMONITOR 
39ac cd 6c fe			call debug_vector  
39af				endm  
# End of macro CALLMONITOR
39af				endif 
39af c3 43 25			jp exec1 
39b2			 
39b2					 
39b2			 
39b2			 
39b2					NEXTW 
39b2 c3 b2 24			jp macro_next 
39b5				endm 
# End of macro NEXTW
39b5			 
39b5			 
39b5			.ENDFLOW: 
39b5			 
39b5			; eof 
39b5			 
# End of file forth_words_flow.asm
39b5			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
39b5			include "forth_words_logic.asm" 
39b5			 
39b5			; | ## Logic Words 
39b5			 
39b5			.NOT: 
39b5				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
39b5 2d				db WORD_SYS_CORE+25             
39b6 fd 39			dw .IS            
39b8 04				db 3 + 1 
39b9 .. 00			db "NOT",0              
39bd				endm 
# End of macro CWHEAD
39bd			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
39bd					if DEBUG_FORTH_WORDS_KEY 
39bd						DMARK "NOT" 
39bd f5				push af  
39be 3a d2 39			ld a, (.dmark)  
39c1 32 68 fe			ld (debug_mark),a  
39c4 3a d3 39			ld a, (.dmark+1)  
39c7 32 69 fe			ld (debug_mark+1),a  
39ca 3a d4 39			ld a, (.dmark+2)  
39cd 32 6a fe			ld (debug_mark+2),a  
39d0 18 03			jr .pastdmark  
39d2 ..			.dmark: db "NOT"  
39d5 f1			.pastdmark: pop af  
39d6			endm  
# End of macro DMARK
39d6						CALLMONITOR 
39d6 cd 6c fe			call debug_vector  
39d9				endm  
# End of macro CALLMONITOR
39d9					endif 
39d9					FORTH_DSP 
39d9 cd c2 22			call macro_forth_dsp 
39dc				endm 
# End of macro FORTH_DSP
39dc 7e					ld a,(hl)	; get type of value on TOS 
39dd fe 02				cp DS_TYPE_INUM  
39df 28 03				jr z, .noti 
39e1					NEXTW 
39e1 c3 b2 24			jp macro_next 
39e4				endm 
# End of macro NEXTW
39e4			.noti:          FORTH_DSP_VALUEHL 
39e4 cd fc 22			call macro_dsp_valuehl 
39e7				endm 
# End of macro FORTH_DSP_VALUEHL
39e7			;		push hl 
39e7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39e7 cd b4 23			call macro_forth_dsp_pop 
39ea				endm 
# End of macro FORTH_DSP_POP
39ea			;		pop hl 
39ea 3e 00				ld a,0 
39ec bd					cp l 
39ed 28 04				jr z, .not2t 
39ef 2e 00				ld l, 0 
39f1 18 02				jr .notip 
39f3			 
39f3 2e ff		.not2t:		ld l, 255 
39f5			 
39f5 26 00		.notip:		ld h, 0	 
39f7			 
39f7 cd 05 21				call forth_push_numhl 
39fa					NEXTW 
39fa c3 b2 24			jp macro_next 
39fd				endm 
# End of macro NEXTW
39fd			 
39fd			.IS: 
39fd				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
39fd 2d				db WORD_SYS_CORE+25             
39fe 23 3a			dw .LZERO            
3a00 03				db 2 + 1 
3a01 .. 00			db "IS",0              
3a04				endm 
# End of macro CWHEAD
3a04			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
3a04					if DEBUG_FORTH_WORDS_KEY 
3a04						DMARK "IS." 
3a04 f5				push af  
3a05 3a 19 3a			ld a, (.dmark)  
3a08 32 68 fe			ld (debug_mark),a  
3a0b 3a 1a 3a			ld a, (.dmark+1)  
3a0e 32 69 fe			ld (debug_mark+1),a  
3a11 3a 1b 3a			ld a, (.dmark+2)  
3a14 32 6a fe			ld (debug_mark+2),a  
3a17 18 03			jr .pastdmark  
3a19 ..			.dmark: db "IS."  
3a1c f1			.pastdmark: pop af  
3a1d			endm  
# End of macro DMARK
3a1d						CALLMONITOR 
3a1d cd 6c fe			call debug_vector  
3a20				endm  
# End of macro CALLMONITOR
3a20					endif 
3a20					NEXTW 
3a20 c3 b2 24			jp macro_next 
3a23				endm 
# End of macro NEXTW
3a23			.LZERO: 
3a23				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3a23 2d				db WORD_SYS_CORE+25             
3a24 2d 3a			dw .TZERO            
3a26 03				db 2 + 1 
3a27 .. 00			db "0<",0              
3a2a				endm 
# End of macro CWHEAD
3a2a			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3a2a					NEXTW 
3a2a c3 b2 24			jp macro_next 
3a2d				endm 
# End of macro NEXTW
3a2d			.TZERO: 
3a2d				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3a2d 2e				db WORD_SYS_CORE+26             
3a2e 74 3a			dw .LESS            
3a30 03				db 2 + 1 
3a31 .. 00			db "0=",0              
3a34				endm 
# End of macro CWHEAD
3a34			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3a34				; TODO add floating point number detection 
3a34					;v5 FORTH_DSP_VALUE 
3a34					if DEBUG_FORTH_WORDS_KEY 
3a34						DMARK "0=." 
3a34 f5				push af  
3a35 3a 49 3a			ld a, (.dmark)  
3a38 32 68 fe			ld (debug_mark),a  
3a3b 3a 4a 3a			ld a, (.dmark+1)  
3a3e 32 69 fe			ld (debug_mark+1),a  
3a41 3a 4b 3a			ld a, (.dmark+2)  
3a44 32 6a fe			ld (debug_mark+2),a  
3a47 18 03			jr .pastdmark  
3a49 ..			.dmark: db "0=."  
3a4c f1			.pastdmark: pop af  
3a4d			endm  
# End of macro DMARK
3a4d						CALLMONITOR 
3a4d cd 6c fe			call debug_vector  
3a50				endm  
# End of macro CALLMONITOR
3a50					endif 
3a50					FORTH_DSP 
3a50 cd c2 22			call macro_forth_dsp 
3a53				endm 
# End of macro FORTH_DSP
3a53 7e					ld a,(hl)	; get type of value on TOS 
3a54 fe 02				cp DS_TYPE_INUM  
3a56 28 00				jr z, .tz_inum 
3a58			 
3a58				if FORTH_ENABLE_FLOATMATH 
3a58					jr .tz_done 
3a58			 
3a58				endif 
3a58					 
3a58			 
3a58			.tz_inum: 
3a58					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a58 cd fc 22			call macro_dsp_valuehl 
3a5b				endm 
# End of macro FORTH_DSP_VALUEHL
3a5b			 
3a5b			;		push hl 
3a5b			 
3a5b					; destroy value TOS 
3a5b			 
3a5b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a5b cd b4 23			call macro_forth_dsp_pop 
3a5e				endm 
# End of macro FORTH_DSP_POP
3a5e			 
3a5e			;		pop hl 
3a5e			 
3a5e 3e 00				ld a,0 
3a60			 
3a60 bd					cp l 
3a61 20 08				jr nz, .tz_notzero 
3a63			 
3a63 bc					cp h 
3a64			 
3a64 20 05				jr nz, .tz_notzero 
3a66			 
3a66			 
3a66 21 01 00				ld hl, FORTH_TRUE 
3a69 18 03				jr .tz_done 
3a6b			 
3a6b 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3a6e			 
3a6e					; push value back onto stack for another op etc 
3a6e			 
3a6e			.tz_done: 
3a6e cd 05 21				call forth_push_numhl 
3a71			 
3a71					NEXTW 
3a71 c3 b2 24			jp macro_next 
3a74				endm 
# End of macro NEXTW
3a74			.LESS: 
3a74				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3a74 2f				db WORD_SYS_CORE+27             
3a75 dd 3a			dw .GT            
3a77 02				db 1 + 1 
3a78 .. 00			db "<",0              
3a7a				endm 
# End of macro CWHEAD
3a7a			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3a7a				; TODO add floating point number detection 
3a7a					if DEBUG_FORTH_WORDS_KEY 
3a7a						DMARK "LES" 
3a7a f5				push af  
3a7b 3a 8f 3a			ld a, (.dmark)  
3a7e 32 68 fe			ld (debug_mark),a  
3a81 3a 90 3a			ld a, (.dmark+1)  
3a84 32 69 fe			ld (debug_mark+1),a  
3a87 3a 91 3a			ld a, (.dmark+2)  
3a8a 32 6a fe			ld (debug_mark+2),a  
3a8d 18 03			jr .pastdmark  
3a8f ..			.dmark: db "LES"  
3a92 f1			.pastdmark: pop af  
3a93			endm  
# End of macro DMARK
3a93						CALLMONITOR 
3a93 cd 6c fe			call debug_vector  
3a96				endm  
# End of macro CALLMONITOR
3a96					endif 
3a96					FORTH_DSP 
3a96 cd c2 22			call macro_forth_dsp 
3a99				endm 
# End of macro FORTH_DSP
3a99					;v5 FORTH_DSP_VALUE 
3a99 7e					ld a,(hl)	; get type of value on TOS 
3a9a fe 02				cp DS_TYPE_INUM  
3a9c 28 00				jr z, .less_inum 
3a9e			 
3a9e				if FORTH_ENABLE_FLOATMATH 
3a9e					jr .less_done 
3a9e			 
3a9e				endif 
3a9e					 
3a9e			 
3a9e			.less_inum: 
3a9e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a9e cd fc 22			call macro_dsp_valuehl 
3aa1				endm 
# End of macro FORTH_DSP_VALUEHL
3aa1			 
3aa1 e5					push hl  ; u2 
3aa2			 
3aa2					; destroy value TOS 
3aa2			 
3aa2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3aa2 cd b4 23			call macro_forth_dsp_pop 
3aa5				endm 
# End of macro FORTH_DSP_POP
3aa5			 
3aa5			 
3aa5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3aa5 cd fc 22			call macro_dsp_valuehl 
3aa8				endm 
# End of macro FORTH_DSP_VALUEHL
3aa8			 
3aa8 e5					push hl    ; u1 
3aa9			 
3aa9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3aa9 cd b4 23			call macro_forth_dsp_pop 
3aac				endm 
# End of macro FORTH_DSP_POP
3aac			 
3aac			 
3aac b7			 or a      ;clear carry flag 
3aad 01 00 00		 ld bc, FORTH_FALSE 
3ab0 e1			  pop hl    ; u1 
3ab1 d1			  pop de    ; u2 
3ab2 ed 52		  sbc hl,de 
3ab4 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3ab6			 
3ab6 01 01 00		 ld bc, FORTH_TRUE 
3ab9			.lscont:  
3ab9 c5					push bc 
3aba e1					pop hl 
3abb			 
3abb					if DEBUG_FORTH_WORDS 
3abb						DMARK "LT1" 
3abb f5				push af  
3abc 3a d0 3a			ld a, (.dmark)  
3abf 32 68 fe			ld (debug_mark),a  
3ac2 3a d1 3a			ld a, (.dmark+1)  
3ac5 32 69 fe			ld (debug_mark+1),a  
3ac8 3a d2 3a			ld a, (.dmark+2)  
3acb 32 6a fe			ld (debug_mark+2),a  
3ace 18 03			jr .pastdmark  
3ad0 ..			.dmark: db "LT1"  
3ad3 f1			.pastdmark: pop af  
3ad4			endm  
# End of macro DMARK
3ad4						CALLMONITOR 
3ad4 cd 6c fe			call debug_vector  
3ad7				endm  
# End of macro CALLMONITOR
3ad7					endif 
3ad7 cd 05 21				call forth_push_numhl 
3ada			 
3ada					NEXTW 
3ada c3 b2 24			jp macro_next 
3add				endm 
# End of macro NEXTW
3add			.GT: 
3add				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3add 30				db WORD_SYS_CORE+28             
3ade 46 3b			dw .EQUAL            
3ae0 02				db 1 + 1 
3ae1 .. 00			db ">",0              
3ae3				endm 
# End of macro CWHEAD
3ae3			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3ae3				; TODO add floating point number detection 
3ae3					if DEBUG_FORTH_WORDS_KEY 
3ae3						DMARK "GRT" 
3ae3 f5				push af  
3ae4 3a f8 3a			ld a, (.dmark)  
3ae7 32 68 fe			ld (debug_mark),a  
3aea 3a f9 3a			ld a, (.dmark+1)  
3aed 32 69 fe			ld (debug_mark+1),a  
3af0 3a fa 3a			ld a, (.dmark+2)  
3af3 32 6a fe			ld (debug_mark+2),a  
3af6 18 03			jr .pastdmark  
3af8 ..			.dmark: db "GRT"  
3afb f1			.pastdmark: pop af  
3afc			endm  
# End of macro DMARK
3afc						CALLMONITOR 
3afc cd 6c fe			call debug_vector  
3aff				endm  
# End of macro CALLMONITOR
3aff					endif 
3aff					FORTH_DSP 
3aff cd c2 22			call macro_forth_dsp 
3b02				endm 
# End of macro FORTH_DSP
3b02					;FORTH_DSP_VALUE 
3b02 7e					ld a,(hl)	; get type of value on TOS 
3b03 fe 02				cp DS_TYPE_INUM  
3b05 28 00				jr z, .gt_inum 
3b07			 
3b07				if FORTH_ENABLE_FLOATMATH 
3b07					jr .gt_done 
3b07			 
3b07				endif 
3b07					 
3b07			 
3b07			.gt_inum: 
3b07					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b07 cd fc 22			call macro_dsp_valuehl 
3b0a				endm 
# End of macro FORTH_DSP_VALUEHL
3b0a			 
3b0a e5					push hl  ; u2 
3b0b			 
3b0b					; destroy value TOS 
3b0b			 
3b0b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b0b cd b4 23			call macro_forth_dsp_pop 
3b0e				endm 
# End of macro FORTH_DSP_POP
3b0e			 
3b0e			 
3b0e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b0e cd fc 22			call macro_dsp_valuehl 
3b11				endm 
# End of macro FORTH_DSP_VALUEHL
3b11			 
3b11 e5					push hl    ; u1 
3b12			 
3b12					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b12 cd b4 23			call macro_forth_dsp_pop 
3b15				endm 
# End of macro FORTH_DSP_POP
3b15			 
3b15			 
3b15 b7			 or a      ;clear carry flag 
3b16 01 00 00		 ld bc, FORTH_FALSE 
3b19 e1			  pop hl    ; u1 
3b1a d1			  pop de    ; u2 
3b1b ed 52		  sbc hl,de 
3b1d 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3b1f			 
3b1f 01 01 00		 ld bc, FORTH_TRUE 
3b22			.gtcont:  
3b22 c5					push bc 
3b23 e1					pop hl 
3b24			 
3b24					if DEBUG_FORTH_WORDS 
3b24						DMARK "GT1" 
3b24 f5				push af  
3b25 3a 39 3b			ld a, (.dmark)  
3b28 32 68 fe			ld (debug_mark),a  
3b2b 3a 3a 3b			ld a, (.dmark+1)  
3b2e 32 69 fe			ld (debug_mark+1),a  
3b31 3a 3b 3b			ld a, (.dmark+2)  
3b34 32 6a fe			ld (debug_mark+2),a  
3b37 18 03			jr .pastdmark  
3b39 ..			.dmark: db "GT1"  
3b3c f1			.pastdmark: pop af  
3b3d			endm  
# End of macro DMARK
3b3d						CALLMONITOR 
3b3d cd 6c fe			call debug_vector  
3b40				endm  
# End of macro CALLMONITOR
3b40					endif 
3b40 cd 05 21				call forth_push_numhl 
3b43			 
3b43					NEXTW 
3b43 c3 b2 24			jp macro_next 
3b46				endm 
# End of macro NEXTW
3b46			.EQUAL: 
3b46				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3b46 31				db WORD_SYS_CORE+29             
3b47 b1 3b			dw .ENDLOGIC            
3b49 02				db 1 + 1 
3b4a .. 00			db "=",0              
3b4c				endm 
# End of macro CWHEAD
3b4c			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3b4c				; TODO add floating point number detection 
3b4c					if DEBUG_FORTH_WORDS_KEY 
3b4c						DMARK "EQ." 
3b4c f5				push af  
3b4d 3a 61 3b			ld a, (.dmark)  
3b50 32 68 fe			ld (debug_mark),a  
3b53 3a 62 3b			ld a, (.dmark+1)  
3b56 32 69 fe			ld (debug_mark+1),a  
3b59 3a 63 3b			ld a, (.dmark+2)  
3b5c 32 6a fe			ld (debug_mark+2),a  
3b5f 18 03			jr .pastdmark  
3b61 ..			.dmark: db "EQ."  
3b64 f1			.pastdmark: pop af  
3b65			endm  
# End of macro DMARK
3b65						CALLMONITOR 
3b65 cd 6c fe			call debug_vector  
3b68				endm  
# End of macro CALLMONITOR
3b68					endif 
3b68					FORTH_DSP 
3b68 cd c2 22			call macro_forth_dsp 
3b6b				endm 
# End of macro FORTH_DSP
3b6b					;v5 FORTH_DSP_VALUE 
3b6b 7e					ld a,(hl)	; get type of value on TOS 
3b6c fe 02				cp DS_TYPE_INUM  
3b6e 28 00				jr z, .eq_inum 
3b70			 
3b70				if FORTH_ENABLE_FLOATMATH 
3b70					jr .eq_done 
3b70			 
3b70				endif 
3b70					 
3b70			 
3b70			.eq_inum: 
3b70					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b70 cd fc 22			call macro_dsp_valuehl 
3b73				endm 
# End of macro FORTH_DSP_VALUEHL
3b73			 
3b73 e5					push hl 
3b74			 
3b74					; destroy value TOS 
3b74			 
3b74					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b74 cd b4 23			call macro_forth_dsp_pop 
3b77				endm 
# End of macro FORTH_DSP_POP
3b77			 
3b77			 
3b77					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b77 cd fc 22			call macro_dsp_valuehl 
3b7a				endm 
# End of macro FORTH_DSP_VALUEHL
3b7a			 
3b7a					; one value on hl get other one back 
3b7a			 
3b7a e5					push hl 
3b7b			 
3b7b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b7b cd b4 23			call macro_forth_dsp_pop 
3b7e				endm 
# End of macro FORTH_DSP_POP
3b7e			 
3b7e 0e 00				ld c, FORTH_FALSE 
3b80			 
3b80 e1					pop hl 
3b81 d1					pop de 
3b82			 
3b82 7b					ld a, e 
3b83 bd					cp l 
3b84			 
3b84 20 06				jr nz, .eq_done 
3b86			 
3b86 7a					ld a, d 
3b87 bc					cp h 
3b88			 
3b88 20 02				jr nz, .eq_done 
3b8a			 
3b8a 0e 01				ld c, FORTH_TRUE 
3b8c					 
3b8c			 
3b8c			 
3b8c			.eq_done: 
3b8c			 
3b8c					; TODO push value back onto stack for another op etc 
3b8c			 
3b8c 26 00				ld h, 0 
3b8e 69					ld l, c 
3b8f					if DEBUG_FORTH_WORDS 
3b8f						DMARK "EQ1" 
3b8f f5				push af  
3b90 3a a4 3b			ld a, (.dmark)  
3b93 32 68 fe			ld (debug_mark),a  
3b96 3a a5 3b			ld a, (.dmark+1)  
3b99 32 69 fe			ld (debug_mark+1),a  
3b9c 3a a6 3b			ld a, (.dmark+2)  
3b9f 32 6a fe			ld (debug_mark+2),a  
3ba2 18 03			jr .pastdmark  
3ba4 ..			.dmark: db "EQ1"  
3ba7 f1			.pastdmark: pop af  
3ba8			endm  
# End of macro DMARK
3ba8						CALLMONITOR 
3ba8 cd 6c fe			call debug_vector  
3bab				endm  
# End of macro CALLMONITOR
3bab					endif 
3bab cd 05 21				call forth_push_numhl 
3bae			 
3bae					NEXTW 
3bae c3 b2 24			jp macro_next 
3bb1				endm 
# End of macro NEXTW
3bb1			 
3bb1			 
3bb1			.ENDLOGIC: 
3bb1			; eof 
3bb1			 
3bb1			 
# End of file forth_words_logic.asm
3bb1			include "forth_words_maths.asm" 
3bb1			 
3bb1			; | ## Maths Words 
3bb1			 
3bb1			.PLUS:	 
3bb1				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3bb1 15				db WORD_SYS_CORE+1             
3bb2 0f 3c			dw .NEG            
3bb4 02				db 1 + 1 
3bb5 .. 00			db "+",0              
3bb7				endm 
# End of macro CWHEAD
3bb7			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3bb7					if DEBUG_FORTH_WORDS_KEY 
3bb7						DMARK "PLU" 
3bb7 f5				push af  
3bb8 3a cc 3b			ld a, (.dmark)  
3bbb 32 68 fe			ld (debug_mark),a  
3bbe 3a cd 3b			ld a, (.dmark+1)  
3bc1 32 69 fe			ld (debug_mark+1),a  
3bc4 3a ce 3b			ld a, (.dmark+2)  
3bc7 32 6a fe			ld (debug_mark+2),a  
3bca 18 03			jr .pastdmark  
3bcc ..			.dmark: db "PLU"  
3bcf f1			.pastdmark: pop af  
3bd0			endm  
# End of macro DMARK
3bd0						CALLMONITOR 
3bd0 cd 6c fe			call debug_vector  
3bd3				endm  
# End of macro CALLMONITOR
3bd3					endif 
3bd3					; add top two values and push back result 
3bd3			 
3bd3					;for v5 FORTH_DSP_VALUE 
3bd3					FORTH_DSP 
3bd3 cd c2 22			call macro_forth_dsp 
3bd6				endm 
# End of macro FORTH_DSP
3bd6 7e					ld a,(hl)	; get type of value on TOS 
3bd7 fe 02				cp DS_TYPE_INUM  
3bd9 28 03				jr z, .dot_inum 
3bdb			 
3bdb					NEXTW 
3bdb c3 b2 24			jp macro_next 
3bde				endm 
# End of macro NEXTW
3bde			 
3bde			; float maths 
3bde			 
3bde				if FORTH_ENABLE_FLOATMATH 
3bde						inc hl      ; now at start of numeric as string 
3bde			 
3bde					if DEBUG_FORTH_MATHS 
3bde						DMARK "ADD" 
3bde				CALLMONITOR 
3bde					endif 
3bde			 
3bde					;ld ix, hl 
3bde					call CON 
3bde			 
3bde			 
3bde					push hl 
3bde					 
3bde					 
3bde			 
3bde						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3bde			 
3bde					; get next number 
3bde			 
3bde						FORTH_DSP_VALUE 
3bde			 
3bde						inc hl      ; now at start of numeric as string 
3bde			 
3bde					;ld ix, hl 
3bde					call CON 
3bde			 
3bde					push hl 
3bde			 
3bde			 
3bde						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bde			 
3bde						; TODO do add 
3bde			 
3bde						call IADD 
3bde			 
3bde						; TODO get result back as ascii 
3bde			 
3bde						; TODO push result  
3bde			 
3bde			 
3bde			 
3bde						jr .dot_done 
3bde				endif 
3bde			 
3bde			.dot_inum: 
3bde			 
3bde			 
3bde					if DEBUG_FORTH_DOT 
3bde						DMARK "+IT" 
3bde f5				push af  
3bdf 3a f3 3b			ld a, (.dmark)  
3be2 32 68 fe			ld (debug_mark),a  
3be5 3a f4 3b			ld a, (.dmark+1)  
3be8 32 69 fe			ld (debug_mark+1),a  
3beb 3a f5 3b			ld a, (.dmark+2)  
3bee 32 6a fe			ld (debug_mark+2),a  
3bf1 18 03			jr .pastdmark  
3bf3 ..			.dmark: db "+IT"  
3bf6 f1			.pastdmark: pop af  
3bf7			endm  
# End of macro DMARK
3bf7				CALLMONITOR 
3bf7 cd 6c fe			call debug_vector  
3bfa				endm  
# End of macro CALLMONITOR
3bfa					endif 
3bfa			 
3bfa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bfa cd fc 22			call macro_dsp_valuehl 
3bfd				endm 
# End of macro FORTH_DSP_VALUEHL
3bfd			 
3bfd				; TODO add floating point number detection 
3bfd			 
3bfd e5					push hl 
3bfe			 
3bfe					; destroy value TOS 
3bfe			 
3bfe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bfe cd b4 23			call macro_forth_dsp_pop 
3c01				endm 
# End of macro FORTH_DSP_POP
3c01			 
3c01			 
3c01					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c01 cd fc 22			call macro_dsp_valuehl 
3c04				endm 
# End of macro FORTH_DSP_VALUEHL
3c04			 
3c04					; one value on hl get other one back 
3c04			 
3c04 d1					pop de 
3c05			 
3c05					; do the add 
3c05			 
3c05 19					add hl,de 
3c06			 
3c06					; save it 
3c06			 
3c06			;		push hl	 
3c06			 
3c06					; 
3c06			 
3c06					; destroy value TOS 
3c06			 
3c06					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c06 cd b4 23			call macro_forth_dsp_pop 
3c09				endm 
# End of macro FORTH_DSP_POP
3c09			 
3c09					; TODO push value back onto stack for another op etc 
3c09			 
3c09			;		pop hl 
3c09			 
3c09			.dot_done: 
3c09 cd 05 21				call forth_push_numhl 
3c0c			 
3c0c					NEXTW 
3c0c c3 b2 24			jp macro_next 
3c0f				endm 
# End of macro NEXTW
3c0f			.NEG: 
3c0f			 
3c0f				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3c0f 17				db WORD_SYS_CORE+3             
3c10 52 3c			dw .DIV            
3c12 02				db 1 + 1 
3c13 .. 00			db "-",0              
3c15				endm 
# End of macro CWHEAD
3c15			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3c15					if DEBUG_FORTH_WORDS_KEY 
3c15						DMARK "SUB" 
3c15 f5				push af  
3c16 3a 2a 3c			ld a, (.dmark)  
3c19 32 68 fe			ld (debug_mark),a  
3c1c 3a 2b 3c			ld a, (.dmark+1)  
3c1f 32 69 fe			ld (debug_mark+1),a  
3c22 3a 2c 3c			ld a, (.dmark+2)  
3c25 32 6a fe			ld (debug_mark+2),a  
3c28 18 03			jr .pastdmark  
3c2a ..			.dmark: db "SUB"  
3c2d f1			.pastdmark: pop af  
3c2e			endm  
# End of macro DMARK
3c2e						CALLMONITOR 
3c2e cd 6c fe			call debug_vector  
3c31				endm  
# End of macro CALLMONITOR
3c31					endif 
3c31			 
3c31			 
3c31				; TODO add floating point number detection 
3c31					; v5 FORTH_DSP_VALUE 
3c31					FORTH_DSP 
3c31 cd c2 22			call macro_forth_dsp 
3c34				endm 
# End of macro FORTH_DSP
3c34 7e					ld a,(hl)	; get type of value on TOS 
3c35 fe 02				cp DS_TYPE_INUM  
3c37 28 03				jr z, .neg_inum 
3c39			 
3c39					NEXTW 
3c39 c3 b2 24			jp macro_next 
3c3c				endm 
# End of macro NEXTW
3c3c			 
3c3c			; float maths 
3c3c			 
3c3c				if FORTH_ENABLE_FLOATMATH 
3c3c					jr .neg_done 
3c3c			 
3c3c				endif 
3c3c					 
3c3c			 
3c3c			.neg_inum: 
3c3c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c3c cd fc 22			call macro_dsp_valuehl 
3c3f				endm 
# End of macro FORTH_DSP_VALUEHL
3c3f			 
3c3f e5					push hl 
3c40			 
3c40					; destroy value TOS 
3c40			 
3c40					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c40 cd b4 23			call macro_forth_dsp_pop 
3c43				endm 
# End of macro FORTH_DSP_POP
3c43			 
3c43			 
3c43					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c43 cd fc 22			call macro_dsp_valuehl 
3c46				endm 
# End of macro FORTH_DSP_VALUEHL
3c46			 
3c46					; one value on hl get other one back 
3c46			 
3c46 d1					pop de 
3c47			 
3c47					; do the sub 
3c47			;		ex de, hl 
3c47			 
3c47 ed 52				sbc hl,de 
3c49			 
3c49					; save it 
3c49			 
3c49			;		push hl	 
3c49			 
3c49					; 
3c49			 
3c49					; destroy value TOS 
3c49			 
3c49					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c49 cd b4 23			call macro_forth_dsp_pop 
3c4c				endm 
# End of macro FORTH_DSP_POP
3c4c			 
3c4c					; TODO push value back onto stack for another op etc 
3c4c			 
3c4c			;		pop hl 
3c4c			 
3c4c cd 05 21				call forth_push_numhl 
3c4f			.neg_done: 
3c4f			 
3c4f					NEXTW 
3c4f c3 b2 24			jp macro_next 
3c52				endm 
# End of macro NEXTW
3c52			.DIV: 
3c52				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3c52 18				db WORD_SYS_CORE+4             
3c53 9f 3c			dw .MUL            
3c55 02				db 1 + 1 
3c56 .. 00			db "/",0              
3c58				endm 
# End of macro CWHEAD
3c58			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3c58					if DEBUG_FORTH_WORDS_KEY 
3c58						DMARK "DIV" 
3c58 f5				push af  
3c59 3a 6d 3c			ld a, (.dmark)  
3c5c 32 68 fe			ld (debug_mark),a  
3c5f 3a 6e 3c			ld a, (.dmark+1)  
3c62 32 69 fe			ld (debug_mark+1),a  
3c65 3a 6f 3c			ld a, (.dmark+2)  
3c68 32 6a fe			ld (debug_mark+2),a  
3c6b 18 03			jr .pastdmark  
3c6d ..			.dmark: db "DIV"  
3c70 f1			.pastdmark: pop af  
3c71			endm  
# End of macro DMARK
3c71						CALLMONITOR 
3c71 cd 6c fe			call debug_vector  
3c74				endm  
# End of macro CALLMONITOR
3c74					endif 
3c74				; TODO add floating point number detection 
3c74					; v5 FORTH_DSP_VALUE 
3c74					FORTH_DSP 
3c74 cd c2 22			call macro_forth_dsp 
3c77				endm 
# End of macro FORTH_DSP
3c77 7e					ld a,(hl)	; get type of value on TOS 
3c78 fe 02				cp DS_TYPE_INUM  
3c7a 28 03				jr z, .div_inum 
3c7c			 
3c7c				if FORTH_ENABLE_FLOATMATH 
3c7c					jr .div_done 
3c7c			 
3c7c				endif 
3c7c					NEXTW 
3c7c c3 b2 24			jp macro_next 
3c7f				endm 
# End of macro NEXTW
3c7f			.div_inum: 
3c7f			 
3c7f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c7f cd fc 22			call macro_dsp_valuehl 
3c82				endm 
# End of macro FORTH_DSP_VALUEHL
3c82			 
3c82 e5					push hl    ; to go to bc 
3c83			 
3c83					; destroy value TOS 
3c83			 
3c83					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c83 cd b4 23			call macro_forth_dsp_pop 
3c86				endm 
# End of macro FORTH_DSP_POP
3c86			 
3c86			 
3c86					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c86 cd fc 22			call macro_dsp_valuehl 
3c89				endm 
# End of macro FORTH_DSP_VALUEHL
3c89			 
3c89					; hl to go to de 
3c89			 
3c89 e5					push hl 
3c8a			 
3c8a c1					pop bc 
3c8b d1					pop de		 
3c8c			 
3c8c			 
3c8c					if DEBUG_FORTH_MATHS 
3c8c						DMARK "DIV" 
3c8c				CALLMONITOR 
3c8c					endif 
3c8c					; one value on hl but move to a get other one back 
3c8c			 
3c8c			        
3c8c cd 2c 0f			call Div16 
3c8f			 
3c8f			;	push af	 
3c8f e5				push hl 
3c90 c5				push bc 
3c91			 
3c91					if DEBUG_FORTH_MATHS 
3c91						DMARK "DI1" 
3c91				CALLMONITOR 
3c91					endif 
3c91			 
3c91					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c91 cd b4 23			call macro_forth_dsp_pop 
3c94				endm 
# End of macro FORTH_DSP_POP
3c94			 
3c94			 
3c94			 
3c94 e1					pop hl    ; result 
3c95			 
3c95 cd 05 21				call forth_push_numhl 
3c98			 
3c98 e1					pop hl    ; reminder 
3c99			;		ld h,0 
3c99			;		ld l,d 
3c99			 
3c99 cd 05 21				call forth_push_numhl 
3c9c			.div_done: 
3c9c					NEXTW 
3c9c c3 b2 24			jp macro_next 
3c9f				endm 
# End of macro NEXTW
3c9f			.MUL: 
3c9f				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3c9f 19				db WORD_SYS_CORE+5             
3ca0 e4 3c			dw .MIN            
3ca2 02				db 1 + 1 
3ca3 .. 00			db "*",0              
3ca5				endm 
# End of macro CWHEAD
3ca5			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3ca5				; TODO add floating point number detection 
3ca5					if DEBUG_FORTH_WORDS_KEY 
3ca5						DMARK "MUL" 
3ca5 f5				push af  
3ca6 3a ba 3c			ld a, (.dmark)  
3ca9 32 68 fe			ld (debug_mark),a  
3cac 3a bb 3c			ld a, (.dmark+1)  
3caf 32 69 fe			ld (debug_mark+1),a  
3cb2 3a bc 3c			ld a, (.dmark+2)  
3cb5 32 6a fe			ld (debug_mark+2),a  
3cb8 18 03			jr .pastdmark  
3cba ..			.dmark: db "MUL"  
3cbd f1			.pastdmark: pop af  
3cbe			endm  
# End of macro DMARK
3cbe						CALLMONITOR 
3cbe cd 6c fe			call debug_vector  
3cc1				endm  
# End of macro CALLMONITOR
3cc1					endif 
3cc1					FORTH_DSP 
3cc1 cd c2 22			call macro_forth_dsp 
3cc4				endm 
# End of macro FORTH_DSP
3cc4					; v5 FORTH_DSP_VALUE 
3cc4 7e					ld a,(hl)	; get type of value on TOS 
3cc5 fe 02				cp DS_TYPE_INUM  
3cc7 28 03				jr z, .mul_inum 
3cc9			 
3cc9				if FORTH_ENABLE_FLOATMATH 
3cc9					jr .mul_done 
3cc9			 
3cc9				endif 
3cc9			 
3cc9					NEXTW 
3cc9 c3 b2 24			jp macro_next 
3ccc				endm 
# End of macro NEXTW
3ccc			.mul_inum:	 
3ccc			 
3ccc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ccc cd fc 22			call macro_dsp_valuehl 
3ccf				endm 
# End of macro FORTH_DSP_VALUEHL
3ccf			 
3ccf e5					push hl 
3cd0			 
3cd0					; destroy value TOS 
3cd0			 
3cd0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cd0 cd b4 23			call macro_forth_dsp_pop 
3cd3				endm 
# End of macro FORTH_DSP_POP
3cd3			 
3cd3			 
3cd3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cd3 cd fc 22			call macro_dsp_valuehl 
3cd6				endm 
# End of macro FORTH_DSP_VALUEHL
3cd6			 
3cd6					; one value on hl but move to a get other one back 
3cd6			 
3cd6 7d					ld a, l 
3cd7			 
3cd7 d1					pop de 
3cd8			 
3cd8					; do the mull 
3cd8			;		ex de, hl 
3cd8			 
3cd8 cd 52 0f				call Mult16 
3cdb					; save it 
3cdb			 
3cdb			;		push hl	 
3cdb			 
3cdb					; 
3cdb			 
3cdb					; destroy value TOS 
3cdb			 
3cdb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cdb cd b4 23			call macro_forth_dsp_pop 
3cde				endm 
# End of macro FORTH_DSP_POP
3cde			 
3cde					; TODO push value back onto stack for another op etc 
3cde			 
3cde			;		pop hl 
3cde			 
3cde cd 05 21				call forth_push_numhl 
3ce1			 
3ce1			.mul_done: 
3ce1					NEXTW 
3ce1 c3 b2 24			jp macro_next 
3ce4				endm 
# End of macro NEXTW
3ce4			 
3ce4			 
3ce4			 
3ce4			 
3ce4			.MIN: 
3ce4				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3ce4 49				db WORD_SYS_CORE+53             
3ce5 65 3d			dw .MAX            
3ce7 04				db 3 + 1 
3ce8 .. 00			db "MIN",0              
3cec				endm 
# End of macro CWHEAD
3cec			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3cec					if DEBUG_FORTH_WORDS_KEY 
3cec						DMARK "MIN" 
3cec f5				push af  
3ced 3a 01 3d			ld a, (.dmark)  
3cf0 32 68 fe			ld (debug_mark),a  
3cf3 3a 02 3d			ld a, (.dmark+1)  
3cf6 32 69 fe			ld (debug_mark+1),a  
3cf9 3a 03 3d			ld a, (.dmark+2)  
3cfc 32 6a fe			ld (debug_mark+2),a  
3cff 18 03			jr .pastdmark  
3d01 ..			.dmark: db "MIN"  
3d04 f1			.pastdmark: pop af  
3d05			endm  
# End of macro DMARK
3d05						CALLMONITOR 
3d05 cd 6c fe			call debug_vector  
3d08				endm  
# End of macro CALLMONITOR
3d08					endif 
3d08					; get u2 
3d08			 
3d08					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d08 cd fc 22			call macro_dsp_valuehl 
3d0b				endm 
# End of macro FORTH_DSP_VALUEHL
3d0b			 
3d0b e5					push hl   ; u2 
3d0c			 
3d0c					; destroy value TOS 
3d0c			 
3d0c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d0c cd b4 23			call macro_forth_dsp_pop 
3d0f				endm 
# End of macro FORTH_DSP_POP
3d0f			 
3d0f					; get u1 
3d0f			 
3d0f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d0f cd fc 22			call macro_dsp_valuehl 
3d12				endm 
# End of macro FORTH_DSP_VALUEHL
3d12			 
3d12 e5					push hl  ; u1 
3d13			 
3d13					; destroy value TOS 
3d13			 
3d13					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d13 cd b4 23			call macro_forth_dsp_pop 
3d16				endm 
# End of macro FORTH_DSP_POP
3d16			 
3d16 b7			 or a      ;clear carry flag 
3d17 e1			  pop hl    ; u1 
3d18 d1			  pop de    ; u2 
3d19 e5				push hl   ; saved in case hl is lowest 
3d1a ed 52		  sbc hl,de 
3d1c 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3d1e			 
3d1e e1				pop hl 
3d1f					if DEBUG_FORTH_WORDS 
3d1f						DMARK "MIN" 
3d1f f5				push af  
3d20 3a 34 3d			ld a, (.dmark)  
3d23 32 68 fe			ld (debug_mark),a  
3d26 3a 35 3d			ld a, (.dmark+1)  
3d29 32 69 fe			ld (debug_mark+1),a  
3d2c 3a 36 3d			ld a, (.dmark+2)  
3d2f 32 6a fe			ld (debug_mark+2),a  
3d32 18 03			jr .pastdmark  
3d34 ..			.dmark: db "MIN"  
3d37 f1			.pastdmark: pop af  
3d38			endm  
# End of macro DMARK
3d38						CALLMONITOR 
3d38 cd 6c fe			call debug_vector  
3d3b				endm  
# End of macro CALLMONITOR
3d3b					endif 
3d3b cd 05 21				call forth_push_numhl 
3d3e			 
3d3e				       NEXTW 
3d3e c3 b2 24			jp macro_next 
3d41				endm 
# End of macro NEXTW
3d41			 
3d41			.mincont:  
3d41 c1				pop bc   ; tidy up 
3d42 eb				ex de , hl  
3d43					if DEBUG_FORTH_WORDS 
3d43						DMARK "MI1" 
3d43 f5				push af  
3d44 3a 58 3d			ld a, (.dmark)  
3d47 32 68 fe			ld (debug_mark),a  
3d4a 3a 59 3d			ld a, (.dmark+1)  
3d4d 32 69 fe			ld (debug_mark+1),a  
3d50 3a 5a 3d			ld a, (.dmark+2)  
3d53 32 6a fe			ld (debug_mark+2),a  
3d56 18 03			jr .pastdmark  
3d58 ..			.dmark: db "MI1"  
3d5b f1			.pastdmark: pop af  
3d5c			endm  
# End of macro DMARK
3d5c						CALLMONITOR 
3d5c cd 6c fe			call debug_vector  
3d5f				endm  
# End of macro CALLMONITOR
3d5f					endif 
3d5f cd 05 21				call forth_push_numhl 
3d62			 
3d62				       NEXTW 
3d62 c3 b2 24			jp macro_next 
3d65				endm 
# End of macro NEXTW
3d65			.MAX: 
3d65				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3d65 4a				db WORD_SYS_CORE+54             
3d66 e6 3d			dw .RND16            
3d68 04				db 3 + 1 
3d69 .. 00			db "MAX",0              
3d6d				endm 
# End of macro CWHEAD
3d6d			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3d6d					if DEBUG_FORTH_WORDS_KEY 
3d6d						DMARK "MAX" 
3d6d f5				push af  
3d6e 3a 82 3d			ld a, (.dmark)  
3d71 32 68 fe			ld (debug_mark),a  
3d74 3a 83 3d			ld a, (.dmark+1)  
3d77 32 69 fe			ld (debug_mark+1),a  
3d7a 3a 84 3d			ld a, (.dmark+2)  
3d7d 32 6a fe			ld (debug_mark+2),a  
3d80 18 03			jr .pastdmark  
3d82 ..			.dmark: db "MAX"  
3d85 f1			.pastdmark: pop af  
3d86			endm  
# End of macro DMARK
3d86						CALLMONITOR 
3d86 cd 6c fe			call debug_vector  
3d89				endm  
# End of macro CALLMONITOR
3d89					endif 
3d89					; get u2 
3d89			 
3d89					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d89 cd fc 22			call macro_dsp_valuehl 
3d8c				endm 
# End of macro FORTH_DSP_VALUEHL
3d8c			 
3d8c e5					push hl   ; u2 
3d8d			 
3d8d					; destroy value TOS 
3d8d			 
3d8d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d8d cd b4 23			call macro_forth_dsp_pop 
3d90				endm 
# End of macro FORTH_DSP_POP
3d90			 
3d90					; get u1 
3d90			 
3d90					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d90 cd fc 22			call macro_dsp_valuehl 
3d93				endm 
# End of macro FORTH_DSP_VALUEHL
3d93			 
3d93 e5					push hl  ; u1 
3d94			 
3d94					; destroy value TOS 
3d94			 
3d94					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d94 cd b4 23			call macro_forth_dsp_pop 
3d97				endm 
# End of macro FORTH_DSP_POP
3d97			 
3d97 b7			 or a      ;clear carry flag 
3d98 e1			  pop hl    ; u1 
3d99 d1			  pop de    ; u2 
3d9a e5				push hl   ; saved in case hl is lowest 
3d9b ed 52		  sbc hl,de 
3d9d 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3d9f			 
3d9f e1				pop hl 
3da0					if DEBUG_FORTH_WORDS 
3da0						DMARK "MAX" 
3da0 f5				push af  
3da1 3a b5 3d			ld a, (.dmark)  
3da4 32 68 fe			ld (debug_mark),a  
3da7 3a b6 3d			ld a, (.dmark+1)  
3daa 32 69 fe			ld (debug_mark+1),a  
3dad 3a b7 3d			ld a, (.dmark+2)  
3db0 32 6a fe			ld (debug_mark+2),a  
3db3 18 03			jr .pastdmark  
3db5 ..			.dmark: db "MAX"  
3db8 f1			.pastdmark: pop af  
3db9			endm  
# End of macro DMARK
3db9						CALLMONITOR 
3db9 cd 6c fe			call debug_vector  
3dbc				endm  
# End of macro CALLMONITOR
3dbc					endif 
3dbc cd 05 21				call forth_push_numhl 
3dbf			 
3dbf				       NEXTW 
3dbf c3 b2 24			jp macro_next 
3dc2				endm 
# End of macro NEXTW
3dc2			 
3dc2			.maxcont:  
3dc2 c1				pop bc   ; tidy up 
3dc3 eb				ex de , hl  
3dc4					if DEBUG_FORTH_WORDS 
3dc4						DMARK "MA1" 
3dc4 f5				push af  
3dc5 3a d9 3d			ld a, (.dmark)  
3dc8 32 68 fe			ld (debug_mark),a  
3dcb 3a da 3d			ld a, (.dmark+1)  
3dce 32 69 fe			ld (debug_mark+1),a  
3dd1 3a db 3d			ld a, (.dmark+2)  
3dd4 32 6a fe			ld (debug_mark+2),a  
3dd7 18 03			jr .pastdmark  
3dd9 ..			.dmark: db "MA1"  
3ddc f1			.pastdmark: pop af  
3ddd			endm  
# End of macro DMARK
3ddd						CALLMONITOR 
3ddd cd 6c fe			call debug_vector  
3de0				endm  
# End of macro CALLMONITOR
3de0					endif 
3de0 cd 05 21				call forth_push_numhl 
3de3				       NEXTW 
3de3 c3 b2 24			jp macro_next 
3de6				endm 
# End of macro NEXTW
3de6			 
3de6			.RND16: 
3de6				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3de6 4e				db WORD_SYS_CORE+58             
3de7 15 3e			dw .RND8            
3de9 06				db 5 + 1 
3dea .. 00			db "RND16",0              
3df0				endm 
# End of macro CWHEAD
3df0			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3df0					if DEBUG_FORTH_WORDS_KEY 
3df0						DMARK "R16" 
3df0 f5				push af  
3df1 3a 05 3e			ld a, (.dmark)  
3df4 32 68 fe			ld (debug_mark),a  
3df7 3a 06 3e			ld a, (.dmark+1)  
3dfa 32 69 fe			ld (debug_mark+1),a  
3dfd 3a 07 3e			ld a, (.dmark+2)  
3e00 32 6a fe			ld (debug_mark+2),a  
3e03 18 03			jr .pastdmark  
3e05 ..			.dmark: db "R16"  
3e08 f1			.pastdmark: pop af  
3e09			endm  
# End of macro DMARK
3e09						CALLMONITOR 
3e09 cd 6c fe			call debug_vector  
3e0c				endm  
# End of macro CALLMONITOR
3e0c					endif 
3e0c cd f6 0e				call prng16  
3e0f cd 05 21				call forth_push_numhl 
3e12				       NEXTW 
3e12 c3 b2 24			jp macro_next 
3e15				endm 
# End of macro NEXTW
3e15			.RND8: 
3e15				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3e15 60				db WORD_SYS_CORE+76             
3e16 4a 3e			dw .RND            
3e18 05				db 4 + 1 
3e19 .. 00			db "RND8",0              
3e1e				endm 
# End of macro CWHEAD
3e1e			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3e1e					if DEBUG_FORTH_WORDS_KEY 
3e1e						DMARK "RN8" 
3e1e f5				push af  
3e1f 3a 33 3e			ld a, (.dmark)  
3e22 32 68 fe			ld (debug_mark),a  
3e25 3a 34 3e			ld a, (.dmark+1)  
3e28 32 69 fe			ld (debug_mark+1),a  
3e2b 3a 35 3e			ld a, (.dmark+2)  
3e2e 32 6a fe			ld (debug_mark+2),a  
3e31 18 03			jr .pastdmark  
3e33 ..			.dmark: db "RN8"  
3e36 f1			.pastdmark: pop af  
3e37			endm  
# End of macro DMARK
3e37						CALLMONITOR 
3e37 cd 6c fe			call debug_vector  
3e3a				endm  
# End of macro CALLMONITOR
3e3a					endif 
3e3a 2a a6 fb				ld hl,(xrandc) 
3e3d 23					inc hl 
3e3e cd 10 0f				call xrnd 
3e41 6f					ld l,a	 
3e42 26 00				ld h,0 
3e44 cd 05 21				call forth_push_numhl 
3e47				       NEXTW 
3e47 c3 b2 24			jp macro_next 
3e4a				endm 
# End of macro NEXTW
3e4a			.RND: 
3e4a				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3e4a 60				db WORD_SYS_CORE+76             
3e4b 50 3f			dw .ENDMATHS            
3e4d 04				db 3 + 1 
3e4e .. 00			db "RND",0              
3e52				endm 
# End of macro CWHEAD
3e52			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3e52			 
3e52					if DEBUG_FORTH_WORDS_KEY 
3e52						DMARK "RND" 
3e52 f5				push af  
3e53 3a 67 3e			ld a, (.dmark)  
3e56 32 68 fe			ld (debug_mark),a  
3e59 3a 68 3e			ld a, (.dmark+1)  
3e5c 32 69 fe			ld (debug_mark+1),a  
3e5f 3a 69 3e			ld a, (.dmark+2)  
3e62 32 6a fe			ld (debug_mark+2),a  
3e65 18 03			jr .pastdmark  
3e67 ..			.dmark: db "RND"  
3e6a f1			.pastdmark: pop af  
3e6b			endm  
# End of macro DMARK
3e6b						CALLMONITOR 
3e6b cd 6c fe			call debug_vector  
3e6e				endm  
# End of macro CALLMONITOR
3e6e					endif 
3e6e					 
3e6e					FORTH_DSP_VALUEHL    ; upper range 
3e6e cd fc 22			call macro_dsp_valuehl 
3e71				endm 
# End of macro FORTH_DSP_VALUEHL
3e71			 
3e71 22 aa fb				ld (LFSRSeed), hl	 
3e74			 
3e74					if DEBUG_FORTH_WORDS 
3e74						DMARK "RN1" 
3e74 f5				push af  
3e75 3a 89 3e			ld a, (.dmark)  
3e78 32 68 fe			ld (debug_mark),a  
3e7b 3a 8a 3e			ld a, (.dmark+1)  
3e7e 32 69 fe			ld (debug_mark+1),a  
3e81 3a 8b 3e			ld a, (.dmark+2)  
3e84 32 6a fe			ld (debug_mark+2),a  
3e87 18 03			jr .pastdmark  
3e89 ..			.dmark: db "RN1"  
3e8c f1			.pastdmark: pop af  
3e8d			endm  
# End of macro DMARK
3e8d						CALLMONITOR 
3e8d cd 6c fe			call debug_vector  
3e90				endm  
# End of macro CALLMONITOR
3e90					endif 
3e90					FORTH_DSP_POP 
3e90 cd b4 23			call macro_forth_dsp_pop 
3e93				endm 
# End of macro FORTH_DSP_POP
3e93			 
3e93					FORTH_DSP_VALUEHL    ; low range 
3e93 cd fc 22			call macro_dsp_valuehl 
3e96				endm 
# End of macro FORTH_DSP_VALUEHL
3e96			 
3e96					if DEBUG_FORTH_WORDS 
3e96						DMARK "RN2" 
3e96 f5				push af  
3e97 3a ab 3e			ld a, (.dmark)  
3e9a 32 68 fe			ld (debug_mark),a  
3e9d 3a ac 3e			ld a, (.dmark+1)  
3ea0 32 69 fe			ld (debug_mark+1),a  
3ea3 3a ad 3e			ld a, (.dmark+2)  
3ea6 32 6a fe			ld (debug_mark+2),a  
3ea9 18 03			jr .pastdmark  
3eab ..			.dmark: db "RN2"  
3eae f1			.pastdmark: pop af  
3eaf			endm  
# End of macro DMARK
3eaf						CALLMONITOR 
3eaf cd 6c fe			call debug_vector  
3eb2				endm  
# End of macro CALLMONITOR
3eb2					endif 
3eb2 22 ac fb				ld (LFSRSeed+2), hl 
3eb5			 
3eb5					FORTH_DSP_POP 
3eb5 cd b4 23			call macro_forth_dsp_pop 
3eb8				endm 
# End of macro FORTH_DSP_POP
3eb8			 
3eb8 e5					push hl 
3eb9			 
3eb9 e1			.inrange:	pop hl 
3eba cd f6 0e				call prng16  
3ebd					if DEBUG_FORTH_WORDS 
3ebd						DMARK "RN3" 
3ebd f5				push af  
3ebe 3a d2 3e			ld a, (.dmark)  
3ec1 32 68 fe			ld (debug_mark),a  
3ec4 3a d3 3e			ld a, (.dmark+1)  
3ec7 32 69 fe			ld (debug_mark+1),a  
3eca 3a d4 3e			ld a, (.dmark+2)  
3ecd 32 6a fe			ld (debug_mark+2),a  
3ed0 18 03			jr .pastdmark  
3ed2 ..			.dmark: db "RN3"  
3ed5 f1			.pastdmark: pop af  
3ed6			endm  
# End of macro DMARK
3ed6						CALLMONITOR 
3ed6 cd 6c fe			call debug_vector  
3ed9				endm  
# End of macro CALLMONITOR
3ed9					endif 
3ed9					 
3ed9					; if the range is 8bit knock out the high byte 
3ed9			 
3ed9 ed 5b aa fb			ld de, (LFSRSeed)     ; check high level 
3edd			 
3edd 3e 00				ld a, 0 
3edf ba					cp d  
3ee0 20 1e				jr nz, .hirange 
3ee2 26 00				ld h, 0   ; knock it down to 8bit 
3ee4			 
3ee4					if DEBUG_FORTH_WORDS 
3ee4						DMARK "RNk" 
3ee4 f5				push af  
3ee5 3a f9 3e			ld a, (.dmark)  
3ee8 32 68 fe			ld (debug_mark),a  
3eeb 3a fa 3e			ld a, (.dmark+1)  
3eee 32 69 fe			ld (debug_mark+1),a  
3ef1 3a fb 3e			ld a, (.dmark+2)  
3ef4 32 6a fe			ld (debug_mark+2),a  
3ef7 18 03			jr .pastdmark  
3ef9 ..			.dmark: db "RNk"  
3efc f1			.pastdmark: pop af  
3efd			endm  
# End of macro DMARK
3efd						CALLMONITOR 
3efd cd 6c fe			call debug_vector  
3f00				endm  
# End of macro CALLMONITOR
3f00					endif 
3f00			.hirange:   
3f00 e5					push hl  
3f01 b7					or a  
3f02 ed 52		                sbc hl, de 
3f04			 
3f04					;call cmp16 
3f04			 
3f04 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3f06 e1					pop hl 
3f07 e5					push hl 
3f08			 
3f08					if DEBUG_FORTH_WORDS 
3f08						DMARK "RN4" 
3f08 f5				push af  
3f09 3a 1d 3f			ld a, (.dmark)  
3f0c 32 68 fe			ld (debug_mark),a  
3f0f 3a 1e 3f			ld a, (.dmark+1)  
3f12 32 69 fe			ld (debug_mark+1),a  
3f15 3a 1f 3f			ld a, (.dmark+2)  
3f18 32 6a fe			ld (debug_mark+2),a  
3f1b 18 03			jr .pastdmark  
3f1d ..			.dmark: db "RN4"  
3f20 f1			.pastdmark: pop af  
3f21			endm  
# End of macro DMARK
3f21						CALLMONITOR 
3f21 cd 6c fe			call debug_vector  
3f24				endm  
# End of macro CALLMONITOR
3f24					endif 
3f24 ed 5b ac fb			ld de, (LFSRSeed+2)   ; check low range 
3f28					;call cmp16 
3f28				 
3f28 b7					or a  
3f29 ed 52		                sbc hl, de 
3f2b 38 8c				jr c, .inrange 
3f2d			 
3f2d e1					pop hl 
3f2e					 
3f2e					if DEBUG_FORTH_WORDS 
3f2e						DMARK "RNd" 
3f2e f5				push af  
3f2f 3a 43 3f			ld a, (.dmark)  
3f32 32 68 fe			ld (debug_mark),a  
3f35 3a 44 3f			ld a, (.dmark+1)  
3f38 32 69 fe			ld (debug_mark+1),a  
3f3b 3a 45 3f			ld a, (.dmark+2)  
3f3e 32 6a fe			ld (debug_mark+2),a  
3f41 18 03			jr .pastdmark  
3f43 ..			.dmark: db "RNd"  
3f46 f1			.pastdmark: pop af  
3f47			endm  
# End of macro DMARK
3f47						CALLMONITOR 
3f47 cd 6c fe			call debug_vector  
3f4a				endm  
# End of macro CALLMONITOR
3f4a					endif 
3f4a			 
3f4a			 
3f4a cd 05 21				call forth_push_numhl 
3f4d				       NEXTW 
3f4d c3 b2 24			jp macro_next 
3f50				endm 
# End of macro NEXTW
3f50			 
3f50			.ENDMATHS: 
3f50			 
3f50			; eof 
3f50			 
# End of file forth_words_maths.asm
3f50			include "forth_words_display.asm" 
3f50			 
3f50			; | ## Display Words 
3f50			 
3f50			.ACT: 
3f50			 
3f50				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3f50 62				db WORD_SYS_CORE+78             
3f51 9c 3f			dw .INFO            
3f53 07				db 6 + 1 
3f54 .. 00			db "ACTIVE",0              
3f5b				endm 
# End of macro CWHEAD
3f5b			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3f5b			;  
3f5b			; | | e.g. $ff $00 do active . $01 pause loop 
3f5b			 
3f5b					if DEBUG_FORTH_WORDS_KEY 
3f5b						DMARK "ACT" 
3f5b f5				push af  
3f5c 3a 70 3f			ld a, (.dmark)  
3f5f 32 68 fe			ld (debug_mark),a  
3f62 3a 71 3f			ld a, (.dmark+1)  
3f65 32 69 fe			ld (debug_mark+1),a  
3f68 3a 72 3f			ld a, (.dmark+2)  
3f6b 32 6a fe			ld (debug_mark+2),a  
3f6e 18 03			jr .pastdmark  
3f70 ..			.dmark: db "ACT"  
3f73 f1			.pastdmark: pop af  
3f74			endm  
# End of macro DMARK
3f74						CALLMONITOR 
3f74 cd 6c fe			call debug_vector  
3f77				endm  
# End of macro CALLMONITOR
3f77					endif 
3f77 cd f2 0c				call active 
3f7a					if DEBUG_FORTH_WORDS 
3f7a						DMARK "ACp" 
3f7a f5				push af  
3f7b 3a 8f 3f			ld a, (.dmark)  
3f7e 32 68 fe			ld (debug_mark),a  
3f81 3a 90 3f			ld a, (.dmark+1)  
3f84 32 69 fe			ld (debug_mark+1),a  
3f87 3a 91 3f			ld a, (.dmark+2)  
3f8a 32 6a fe			ld (debug_mark+2),a  
3f8d 18 03			jr .pastdmark  
3f8f ..			.dmark: db "ACp"  
3f92 f1			.pastdmark: pop af  
3f93			endm  
# End of macro DMARK
3f93						CALLMONITOR 
3f93 cd 6c fe			call debug_vector  
3f96				endm  
# End of macro CALLMONITOR
3f96					endif 
3f96 cd 73 21				call forth_push_str 
3f99			 
3f99					NEXTW 
3f99 c3 b2 24			jp macro_next 
3f9c				endm 
# End of macro NEXTW
3f9c			.INFO: 
3f9c			 
3f9c				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3f9c 62				db WORD_SYS_CORE+78             
3f9d b9 3f			dw .ATP            
3f9f 05				db 4 + 1 
3fa0 .. 00			db "INFO",0              
3fa5				endm 
# End of macro CWHEAD
3fa5			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3fa5					FORTH_DSP_VALUEHL 
3fa5 cd fc 22			call macro_dsp_valuehl 
3fa8				endm 
# End of macro FORTH_DSP_VALUEHL
3fa8			 
3fa8					FORTH_DSP_POP 
3fa8 cd b4 23			call macro_forth_dsp_pop 
3fab				endm 
# End of macro FORTH_DSP_POP
3fab			 
3fab e5					push hl 
3fac			 
3fac					FORTH_DSP_VALUEHL 
3fac cd fc 22			call macro_dsp_valuehl 
3faf				endm 
# End of macro FORTH_DSP_VALUEHL
3faf			 
3faf					FORTH_DSP_POP 
3faf cd b4 23			call macro_forth_dsp_pop 
3fb2				endm 
# End of macro FORTH_DSP_POP
3fb2			 
3fb2 d1					pop de 
3fb3			 
3fb3 cd 2c 0d				call info_panel 
3fb6			 
3fb6			 
3fb6					NEXTW 
3fb6 c3 b2 24			jp macro_next 
3fb9				endm 
# End of macro NEXTW
3fb9			.ATP: 
3fb9				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3fb9 62				db WORD_SYS_CORE+78             
3fba 30 40			dw .FB            
3fbc 04				db 3 + 1 
3fbd .. 00			db "AT?",0              
3fc1				endm 
# End of macro CWHEAD
3fc1			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3fc1					if DEBUG_FORTH_WORDS_KEY 
3fc1						DMARK "AT?" 
3fc1 f5				push af  
3fc2 3a d6 3f			ld a, (.dmark)  
3fc5 32 68 fe			ld (debug_mark),a  
3fc8 3a d7 3f			ld a, (.dmark+1)  
3fcb 32 69 fe			ld (debug_mark+1),a  
3fce 3a d8 3f			ld a, (.dmark+2)  
3fd1 32 6a fe			ld (debug_mark+2),a  
3fd4 18 03			jr .pastdmark  
3fd6 ..			.dmark: db "AT?"  
3fd9 f1			.pastdmark: pop af  
3fda			endm  
# End of macro DMARK
3fda						CALLMONITOR 
3fda cd 6c fe			call debug_vector  
3fdd				endm  
# End of macro CALLMONITOR
3fdd					endif 
3fdd 3a 5b fa				ld a, (f_cursor_ptr) 
3fe0			 
3fe0			if DEBUG_FORTH_WORDS 
3fe0				DMARK "AT?" 
3fe0 f5				push af  
3fe1 3a f5 3f			ld a, (.dmark)  
3fe4 32 68 fe			ld (debug_mark),a  
3fe7 3a f6 3f			ld a, (.dmark+1)  
3fea 32 69 fe			ld (debug_mark+1),a  
3fed 3a f7 3f			ld a, (.dmark+2)  
3ff0 32 6a fe			ld (debug_mark+2),a  
3ff3 18 03			jr .pastdmark  
3ff5 ..			.dmark: db "AT?"  
3ff8 f1			.pastdmark: pop af  
3ff9			endm  
# End of macro DMARK
3ff9				CALLMONITOR 
3ff9 cd 6c fe			call debug_vector  
3ffc				endm  
# End of macro CALLMONITOR
3ffc			endif	 
3ffc					; count the number of rows 
3ffc			 
3ffc 06 00				ld b, 0 
3ffe 4f			.atpr:		ld c, a    ; save in case we go below zero 
3fff d6 28				sub display_cols 
4001 f2 07 40				jp p, .atprunder 
4004 04					inc b 
4005 18 f7				jr .atpr 
4007			.atprunder:	 
4007			if DEBUG_FORTH_WORDS 
4007				DMARK "A?2" 
4007 f5				push af  
4008 3a 1c 40			ld a, (.dmark)  
400b 32 68 fe			ld (debug_mark),a  
400e 3a 1d 40			ld a, (.dmark+1)  
4011 32 69 fe			ld (debug_mark+1),a  
4014 3a 1e 40			ld a, (.dmark+2)  
4017 32 6a fe			ld (debug_mark+2),a  
401a 18 03			jr .pastdmark  
401c ..			.dmark: db "A?2"  
401f f1			.pastdmark: pop af  
4020			endm  
# End of macro DMARK
4020				CALLMONITOR 
4020 cd 6c fe			call debug_vector  
4023				endm  
# End of macro CALLMONITOR
4023			endif	 
4023 26 00				ld h, 0 
4025 69					ld l, c 
4026 cd 05 21				call forth_push_numhl 
4029 68					ld l, b  
402a cd 05 21				call forth_push_numhl 
402d			 
402d			 
402d				NEXTW 
402d c3 b2 24			jp macro_next 
4030				endm 
# End of macro NEXTW
4030			 
4030			.FB: 
4030				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
4030 1b				db WORD_SYS_CORE+7             
4031 7e 40			dw .EMIT            
4033 03				db 2 + 1 
4034 .. 00			db "FB",0              
4037				endm 
# End of macro CWHEAD
4037			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
4037			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
4037			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
4037			; | | If automatic display is off then updates will not be shown until DRAW is used. 
4037					if DEBUG_FORTH_WORDS_KEY 
4037						DMARK "FB." 
4037 f5				push af  
4038 3a 4c 40			ld a, (.dmark)  
403b 32 68 fe			ld (debug_mark),a  
403e 3a 4d 40			ld a, (.dmark+1)  
4041 32 69 fe			ld (debug_mark+1),a  
4044 3a 4e 40			ld a, (.dmark+2)  
4047 32 6a fe			ld (debug_mark+2),a  
404a 18 03			jr .pastdmark  
404c ..			.dmark: db "FB."  
404f f1			.pastdmark: pop af  
4050			endm  
# End of macro DMARK
4050						CALLMONITOR 
4050 cd 6c fe			call debug_vector  
4053				endm  
# End of macro CALLMONITOR
4053					endif 
4053			 
4053					FORTH_DSP_VALUEHL 
4053 cd fc 22			call macro_dsp_valuehl 
4056				endm 
# End of macro FORTH_DSP_VALUEHL
4056			 
4056 7d					ld a, l 
4057 fe 01				cp 1 
4059 20 05				jr nz, .fbn1 
405b 21 0d fd				ld hl, display_fb1 
405e 18 15				jr .fbset 
4060 fe 02		.fbn1:		cp 2 
4062 20 05				jr nz, .fbn2 
4064 21 cb fb				ld hl, display_fb2 
4067 18 0c				jr .fbset 
4069 fe 03		.fbn2:		cp 3 
406b 20 05				jr nz, .fbn3 
406d 21 6c fc				ld hl, display_fb3 
4070 18 03				jr .fbset 
4072			.fbn3:		 ; if invalid number select first 
4072 21 0d fd				ld hl, display_fb1 
4075 22 c9 fb		.fbset:		ld (display_fb_active), hl 
4078			 
4078					FORTH_DSP_POP 
4078 cd b4 23			call macro_forth_dsp_pop 
407b				endm 
# End of macro FORTH_DSP_POP
407b			 
407b					NEXTW 
407b c3 b2 24			jp macro_next 
407e				endm 
# End of macro NEXTW
407e			 
407e			 
407e			.EMIT: 
407e				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
407e 1b				db WORD_SYS_CORE+7             
407f cf 40			dw .DOTH            
4081 05				db 4 + 1 
4082 .. 00			db "EMIT",0              
4087				endm 
# End of macro CWHEAD
4087			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
4087					; get value off TOS and display it 
4087			 
4087					if DEBUG_FORTH_WORDS_KEY 
4087						DMARK "EMT" 
4087 f5				push af  
4088 3a 9c 40			ld a, (.dmark)  
408b 32 68 fe			ld (debug_mark),a  
408e 3a 9d 40			ld a, (.dmark+1)  
4091 32 69 fe			ld (debug_mark+1),a  
4094 3a 9e 40			ld a, (.dmark+2)  
4097 32 6a fe			ld (debug_mark+2),a  
409a 18 03			jr .pastdmark  
409c ..			.dmark: db "EMT"  
409f f1			.pastdmark: pop af  
40a0			endm  
# End of macro DMARK
40a0						CALLMONITOR 
40a0 cd 6c fe			call debug_vector  
40a3				endm  
# End of macro CALLMONITOR
40a3					endif 
40a3			 
40a3					FORTH_DSP_VALUEHL 
40a3 cd fc 22			call macro_dsp_valuehl 
40a6				endm 
# End of macro FORTH_DSP_VALUEHL
40a6			 
40a6 7d					ld a,l 
40a7			 
40a7					; TODO write to display 
40a7			 
40a7 32 bc f3				ld (os_input), a 
40aa 3e 00				ld a, 0 
40ac 32 bd f3				ld (os_input+1), a 
40af					 
40af 3a 5b fa				ld a, (f_cursor_ptr) 
40b2 11 bc f3				ld de, os_input 
40b5 cd ae 0d				call str_at_display 
40b8			 
40b8			 
40b8 3a 39 fa				ld a,(cli_autodisplay) 
40bb fe 00				cp 0 
40bd 28 03				jr z, .enoupdate 
40bf cd be 0d						call update_display 
40c2					.enoupdate: 
40c2			 
40c2 3a 5b fa				ld a, (f_cursor_ptr) 
40c5 3c					inc a 
40c6 32 5b fa				ld (f_cursor_ptr), a   ; save new pos 
40c9			 
40c9			 
40c9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40c9 cd b4 23			call macro_forth_dsp_pop 
40cc				endm 
# End of macro FORTH_DSP_POP
40cc			  
40cc			 
40cc					NEXTW 
40cc c3 b2 24			jp macro_next 
40cf				endm 
# End of macro NEXTW
40cf			.DOTH: 
40cf				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
40cf 1c				db WORD_SYS_CORE+8             
40d0 ff 40			dw .DOTF            
40d2 03				db 2 + 1 
40d3 .. 00			db ".-",0              
40d6				endm 
# End of macro CWHEAD
40d6			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
40d6					; get value off TOS and display it 
40d6					if DEBUG_FORTH_WORDS_KEY 
40d6						DMARK "DTD" 
40d6 f5				push af  
40d7 3a eb 40			ld a, (.dmark)  
40da 32 68 fe			ld (debug_mark),a  
40dd 3a ec 40			ld a, (.dmark+1)  
40e0 32 69 fe			ld (debug_mark+1),a  
40e3 3a ed 40			ld a, (.dmark+2)  
40e6 32 6a fe			ld (debug_mark+2),a  
40e9 18 03			jr .pastdmark  
40eb ..			.dmark: db "DTD"  
40ee f1			.pastdmark: pop af  
40ef			endm  
# End of macro DMARK
40ef						CALLMONITOR 
40ef cd 6c fe			call debug_vector  
40f2				endm  
# End of macro CALLMONITOR
40f2					endif 
40f2 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
40f4 3e 00			ld a, 0 
40f6 32 3a fa			ld (cli_mvdot), a 
40f9 c3 56 41			jp .dotgo 
40fc				NEXTW 
40fc c3 b2 24			jp macro_next 
40ff				endm 
# End of macro NEXTW
40ff			.DOTF: 
40ff				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
40ff 1c				db WORD_SYS_CORE+8             
4100 2d 41			dw .DOT            
4102 03				db 2 + 1 
4103 .. 00			db ".>",0              
4106				endm 
# End of macro CWHEAD
4106			        ; | .> ( u -- ) Display TOS and move the next display point with display  | WIP 
4106					; get value off TOS and display it 
4106			        ; TODO BUG adds extra spaces 
4106			        ; TODO BUG handle numerics? 
4106					if DEBUG_FORTH_WORDS_KEY 
4106						DMARK "DTC" 
4106 f5				push af  
4107 3a 1b 41			ld a, (.dmark)  
410a 32 68 fe			ld (debug_mark),a  
410d 3a 1c 41			ld a, (.dmark+1)  
4110 32 69 fe			ld (debug_mark+1),a  
4113 3a 1d 41			ld a, (.dmark+2)  
4116 32 6a fe			ld (debug_mark+2),a  
4119 18 03			jr .pastdmark  
411b ..			.dmark: db "DTC"  
411e f1			.pastdmark: pop af  
411f			endm  
# End of macro DMARK
411f						CALLMONITOR 
411f cd 6c fe			call debug_vector  
4122				endm  
# End of macro CALLMONITOR
4122					endif 
4122 3e 01			ld a, 1 
4124 32 3a fa			ld (cli_mvdot), a 
4127 c3 56 41			jp .dotgo 
412a				NEXTW 
412a c3 b2 24			jp macro_next 
412d				endm 
# End of macro NEXTW
412d			 
412d			.DOT: 
412d				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
412d 1c				db WORD_SYS_CORE+8             
412e 09 43			dw .CLS            
4130 02				db 1 + 1 
4131 .. 00			db ".",0              
4133				endm 
# End of macro CWHEAD
4133			        ; | . ( u -- ) Display TOS | DONE 
4133					; get value off TOS and display it 
4133			 
4133					if DEBUG_FORTH_WORDS_KEY 
4133						DMARK "DOT" 
4133 f5				push af  
4134 3a 48 41			ld a, (.dmark)  
4137 32 68 fe			ld (debug_mark),a  
413a 3a 49 41			ld a, (.dmark+1)  
413d 32 69 fe			ld (debug_mark+1),a  
4140 3a 4a 41			ld a, (.dmark+2)  
4143 32 6a fe			ld (debug_mark+2),a  
4146 18 03			jr .pastdmark  
4148 ..			.dmark: db "DOT"  
414b f1			.pastdmark: pop af  
414c			endm  
# End of macro DMARK
414c						CALLMONITOR 
414c cd 6c fe			call debug_vector  
414f				endm  
# End of macro CALLMONITOR
414f					endif 
414f 3e 00			ld a, 0 
4151 32 3a fa			ld (cli_mvdot), a 
4154 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
4156				 
4156			 
4156			.dotgo: 
4156			 
4156			; move up type to on stack for parserv5 
4156					FORTH_DSP 
4156 cd c2 22			call macro_forth_dsp 
4159				endm 
# End of macro FORTH_DSP
4159				;FORTH_DSP_VALUE  
4159			 
4159			if DEBUG_FORTH_DOT 
4159				DMARK "DOT" 
4159 f5				push af  
415a 3a 6e 41			ld a, (.dmark)  
415d 32 68 fe			ld (debug_mark),a  
4160 3a 6f 41			ld a, (.dmark+1)  
4163 32 69 fe			ld (debug_mark+1),a  
4166 3a 70 41			ld a, (.dmark+2)  
4169 32 6a fe			ld (debug_mark+2),a  
416c 18 03			jr .pastdmark  
416e ..			.dmark: db "DOT"  
4171 f1			.pastdmark: pop af  
4172			endm  
# End of macro DMARK
4172				CALLMONITOR 
4172 cd 6c fe			call debug_vector  
4175				endm  
# End of macro CALLMONITOR
4175			endif	 
4175			;		.print: 
4175			 
4175 7e				ld a,(hl)  ; work out what type of value is on the TOS 
4176 23				inc hl   ; position to the actual value 
4177 fe 01			cp DS_TYPE_STR 
4179 20 06			jr nz, .dotnum1  
417b			 
417b			; display string 
417b				FORTH_DSP_VALUE  
417b cd e5 22			call macro_forth_dsp_value 
417e				endm 
# End of macro FORTH_DSP_VALUE
417e eb				ex de,hl 
417f 18 49			jr .dotwrite 
4181			 
4181			.dotnum1: 
4181 fe 02			cp DS_TYPE_INUM 
4183 20 44			jr nz, .dotflot 
4185			 
4185			 
4185			; display number 
4185			 
4185			;	push hl 
4185			;	call clear_display 
4185			;	pop hl 
4185			 
4185 5e				ld e, (hl) 
4186 23				inc hl 
4187 56				ld d, (hl) 
4188 21 be f1			ld hl, scratch 
418b			if DEBUG_FORTH_DOT 
418b				DMARK "DT1" 
418b f5				push af  
418c 3a a0 41			ld a, (.dmark)  
418f 32 68 fe			ld (debug_mark),a  
4192 3a a1 41			ld a, (.dmark+1)  
4195 32 69 fe			ld (debug_mark+1),a  
4198 3a a2 41			ld a, (.dmark+2)  
419b 32 6a fe			ld (debug_mark+2),a  
419e 18 03			jr .pastdmark  
41a0 ..			.dmark: db "DT1"  
41a3 f1			.pastdmark: pop af  
41a4			endm  
# End of macro DMARK
41a4				CALLMONITOR 
41a4 cd 6c fe			call debug_vector  
41a7				endm  
# End of macro CALLMONITOR
41a7			endif	 
41a7			 
41a7 cd dc 13			call uitoa_16 
41aa eb				ex de,hl 
41ab			 
41ab			if DEBUG_FORTH_DOT 
41ab				DMARK "DT2" 
41ab f5				push af  
41ac 3a c0 41			ld a, (.dmark)  
41af 32 68 fe			ld (debug_mark),a  
41b2 3a c1 41			ld a, (.dmark+1)  
41b5 32 69 fe			ld (debug_mark+1),a  
41b8 3a c2 41			ld a, (.dmark+2)  
41bb 32 6a fe			ld (debug_mark+2),a  
41be 18 03			jr .pastdmark  
41c0 ..			.dmark: db "DT2"  
41c3 f1			.pastdmark: pop af  
41c4			endm  
# End of macro DMARK
41c4				CALLMONITOR 
41c4 cd 6c fe			call debug_vector  
41c7				endm  
# End of macro CALLMONITOR
41c7			endif	 
41c7			 
41c7			;	ld de, os_word_scratch 
41c7 18 01			jr .dotwrite 
41c9			 
41c9 00			.dotflot:   nop 
41ca			; TODO print floating point number 
41ca			 
41ca			.dotwrite:		 
41ca			 
41ca					; if c is set then set all '-' to spaces 
41ca					; need to also take into account .>  
41ca			 
41ca 3e 01				ld a, 1 
41cc b9					cp c 
41cd 20 67				jr nz, .nodashswap 
41cf			 
41cf					; DE has the string to write, working with HL 
41cf			 
41cf 06 ff				ld b, 255 
41d1 d5					push de 
41d2 e1					pop hl 
41d3			 
41d3			if DEBUG_FORTH_DOT 
41d3				DMARK "DT-" 
41d3 f5				push af  
41d4 3a e8 41			ld a, (.dmark)  
41d7 32 68 fe			ld (debug_mark),a  
41da 3a e9 41			ld a, (.dmark+1)  
41dd 32 69 fe			ld (debug_mark+1),a  
41e0 3a ea 41			ld a, (.dmark+2)  
41e3 32 6a fe			ld (debug_mark+2),a  
41e6 18 03			jr .pastdmark  
41e8 ..			.dmark: db "DT-"  
41eb f1			.pastdmark: pop af  
41ec			endm  
# End of macro DMARK
41ec				CALLMONITOR 
41ec cd 6c fe			call debug_vector  
41ef				endm  
# End of macro CALLMONITOR
41ef			endif	 
41ef 7e			.dashscan:	ld a, (hl) 
41f0 fe 00				cp 0 
41f2 28 42				jr z, .nodashswap 
41f4 fe 2d				cp '-' 
41f6 20 03				jr nz, .dashskip 
41f8 3e 20				ld a, ' ' 
41fa 77					ld (hl), a 
41fb 23			.dashskip:	inc hl 
41fc			if DEBUG_FORTH_DOT 
41fc				DMARK "D-2" 
41fc f5				push af  
41fd 3a 11 42			ld a, (.dmark)  
4200 32 68 fe			ld (debug_mark),a  
4203 3a 12 42			ld a, (.dmark+1)  
4206 32 69 fe			ld (debug_mark+1),a  
4209 3a 13 42			ld a, (.dmark+2)  
420c 32 6a fe			ld (debug_mark+2),a  
420f 18 03			jr .pastdmark  
4211 ..			.dmark: db "D-2"  
4214 f1			.pastdmark: pop af  
4215			endm  
# End of macro DMARK
4215				CALLMONITOR 
4215 cd 6c fe			call debug_vector  
4218				endm  
# End of macro CALLMONITOR
4218			endif	 
4218 10 d5				djnz .dashscan 
421a			 
421a			if DEBUG_FORTH_DOT 
421a				DMARK "D-1" 
421a f5				push af  
421b 3a 2f 42			ld a, (.dmark)  
421e 32 68 fe			ld (debug_mark),a  
4221 3a 30 42			ld a, (.dmark+1)  
4224 32 69 fe			ld (debug_mark+1),a  
4227 3a 31 42			ld a, (.dmark+2)  
422a 32 6a fe			ld (debug_mark+2),a  
422d 18 03			jr .pastdmark  
422f ..			.dmark: db "D-1"  
4232 f1			.pastdmark: pop af  
4233			endm  
# End of macro DMARK
4233				CALLMONITOR 
4233 cd 6c fe			call debug_vector  
4236				endm  
# End of macro CALLMONITOR
4236			endif	 
4236			 
4236			.nodashswap: 
4236			 
4236			if DEBUG_FORTH_DOT 
4236				DMARK "D-o" 
4236 f5				push af  
4237 3a 4b 42			ld a, (.dmark)  
423a 32 68 fe			ld (debug_mark),a  
423d 3a 4c 42			ld a, (.dmark+1)  
4240 32 69 fe			ld (debug_mark+1),a  
4243 3a 4d 42			ld a, (.dmark+2)  
4246 32 6a fe			ld (debug_mark+2),a  
4249 18 03			jr .pastdmark  
424b ..			.dmark: db "D-o"  
424e f1			.pastdmark: pop af  
424f			endm  
# End of macro DMARK
424f				CALLMONITOR 
424f cd 6c fe			call debug_vector  
4252				endm  
# End of macro CALLMONITOR
4252			endif	 
4252			 
4252 d5					push de   ; save string start in case we need to advance print 
4253			 
4253 3a 5b fa				ld a, (f_cursor_ptr) 
4256 cd ae 0d				call str_at_display 
4259 3a 39 fa				ld a,(cli_autodisplay) 
425c fe 00				cp 0 
425e 28 03				jr z, .noupdate 
4260 cd be 0d						call update_display 
4263					.noupdate: 
4263			 
4263			 
4263					; see if we need to advance the print position 
4263			 
4263 e1					pop hl   ; get back string 
4264			;		ex de,hl 
4264			 
4264 3a 3a fa				ld a, (cli_mvdot) 
4267			if DEBUG_FORTH_DOT 
4267			;		ld e,a 
4267				DMARK "D>1" 
4267 f5				push af  
4268 3a 7c 42			ld a, (.dmark)  
426b 32 68 fe			ld (debug_mark),a  
426e 3a 7d 42			ld a, (.dmark+1)  
4271 32 69 fe			ld (debug_mark+1),a  
4274 3a 7e 42			ld a, (.dmark+2)  
4277 32 6a fe			ld (debug_mark+2),a  
427a 18 03			jr .pastdmark  
427c ..			.dmark: db "D>1"  
427f f1			.pastdmark: pop af  
4280			endm  
# End of macro DMARK
4280				CALLMONITOR 
4280 cd 6c fe			call debug_vector  
4283				endm  
# End of macro CALLMONITOR
4283			endif	 
4283 fe 00				cp 0 
4285 28 44				jr z, .noadv 
4287					; yes, lets advance the print position 
4287 3e 00				ld a, 0 
4289 cd 38 14				call strlent 
428c			if DEBUG_FORTH_DOT 
428c				DMARK "D-?" 
428c f5				push af  
428d 3a a1 42			ld a, (.dmark)  
4290 32 68 fe			ld (debug_mark),a  
4293 3a a2 42			ld a, (.dmark+1)  
4296 32 69 fe			ld (debug_mark+1),a  
4299 3a a3 42			ld a, (.dmark+2)  
429c 32 6a fe			ld (debug_mark+2),a  
429f 18 03			jr .pastdmark  
42a1 ..			.dmark: db "D-?"  
42a4 f1			.pastdmark: pop af  
42a5			endm  
# End of macro DMARK
42a5				CALLMONITOR 
42a5 cd 6c fe			call debug_vector  
42a8				endm  
# End of macro CALLMONITOR
42a8			endif	 
42a8 3a 5b fa				ld a, (f_cursor_ptr) 
42ab 85					add a,l 
42ac					;call addatohl 
42ac					;ld a, l 
42ac 32 5b fa				ld (f_cursor_ptr), a   ; save new pos 
42af			 
42af			if DEBUG_FORTH_DOT 
42af				DMARK "D->" 
42af f5				push af  
42b0 3a c4 42			ld a, (.dmark)  
42b3 32 68 fe			ld (debug_mark),a  
42b6 3a c5 42			ld a, (.dmark+1)  
42b9 32 69 fe			ld (debug_mark+1),a  
42bc 3a c6 42			ld a, (.dmark+2)  
42bf 32 6a fe			ld (debug_mark+2),a  
42c2 18 03			jr .pastdmark  
42c4 ..			.dmark: db "D->"  
42c7 f1			.pastdmark: pop af  
42c8			endm  
# End of macro DMARK
42c8				CALLMONITOR 
42c8 cd 6c fe			call debug_vector  
42cb				endm  
# End of macro CALLMONITOR
42cb			endif	 
42cb			 
42cb			.noadv:	 
42cb			 
42cb					if DEBUG_FORTH_DOT_WAIT 
42cb							call next_page_prompt 
42cb					endif	 
42cb			; TODO this pop off the stack causes a crash. i dont know why 
42cb			 
42cb			 
42cb			if DEBUG_FORTH_DOT 
42cb				DMARK "DTh" 
42cb f5				push af  
42cc 3a e0 42			ld a, (.dmark)  
42cf 32 68 fe			ld (debug_mark),a  
42d2 3a e1 42			ld a, (.dmark+1)  
42d5 32 69 fe			ld (debug_mark+1),a  
42d8 3a e2 42			ld a, (.dmark+2)  
42db 32 6a fe			ld (debug_mark+2),a  
42de 18 03			jr .pastdmark  
42e0 ..			.dmark: db "DTh"  
42e3 f1			.pastdmark: pop af  
42e4			endm  
# End of macro DMARK
42e4				CALLMONITOR 
42e4 cd 6c fe			call debug_vector  
42e7				endm  
# End of macro CALLMONITOR
42e7			endif	 
42e7			 
42e7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42e7 cd b4 23			call macro_forth_dsp_pop 
42ea				endm 
# End of macro FORTH_DSP_POP
42ea			 
42ea			if DEBUG_FORTH_DOT 
42ea				DMARK "DTi" 
42ea f5				push af  
42eb 3a ff 42			ld a, (.dmark)  
42ee 32 68 fe			ld (debug_mark),a  
42f1 3a 00 43			ld a, (.dmark+1)  
42f4 32 69 fe			ld (debug_mark+1),a  
42f7 3a 01 43			ld a, (.dmark+2)  
42fa 32 6a fe			ld (debug_mark+2),a  
42fd 18 03			jr .pastdmark  
42ff ..			.dmark: db "DTi"  
4302 f1			.pastdmark: pop af  
4303			endm  
# End of macro DMARK
4303				CALLMONITOR 
4303 cd 6c fe			call debug_vector  
4306				endm  
# End of macro CALLMONITOR
4306			endif	 
4306			 
4306			 
4306					NEXTW 
4306 c3 b2 24			jp macro_next 
4309				endm 
# End of macro NEXTW
4309			 
4309			.CLS: 
4309				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
4309 35				db WORD_SYS_CORE+33             
430a 36 43			dw .DRAW            
430c 04				db 3 + 1 
430d .. 00			db "CLS",0              
4311				endm 
# End of macro CWHEAD
4311			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
4311					if DEBUG_FORTH_WORDS_KEY 
4311						DMARK "CLS" 
4311 f5				push af  
4312 3a 26 43			ld a, (.dmark)  
4315 32 68 fe			ld (debug_mark),a  
4318 3a 27 43			ld a, (.dmark+1)  
431b 32 69 fe			ld (debug_mark+1),a  
431e 3a 28 43			ld a, (.dmark+2)  
4321 32 6a fe			ld (debug_mark+2),a  
4324 18 03			jr .pastdmark  
4326 ..			.dmark: db "CLS"  
4329 f1			.pastdmark: pop af  
432a			endm  
# End of macro DMARK
432a						CALLMONITOR 
432a cd 6c fe			call debug_vector  
432d				endm  
# End of macro CALLMONITOR
432d					endif 
432d cd 9b 0d				call clear_display 
4330 c3 44 44				jp .home		; and home cursor 
4333					NEXTW 
4333 c3 b2 24			jp macro_next 
4336				endm 
# End of macro NEXTW
4336			 
4336			.DRAW: 
4336				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
4336 36				db WORD_SYS_CORE+34             
4337 61 43			dw .DUMP            
4339 05				db 4 + 1 
433a .. 00			db "DRAW",0              
433f				endm 
# End of macro CWHEAD
433f			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
433f					if DEBUG_FORTH_WORDS_KEY 
433f						DMARK "DRW" 
433f f5				push af  
4340 3a 54 43			ld a, (.dmark)  
4343 32 68 fe			ld (debug_mark),a  
4346 3a 55 43			ld a, (.dmark+1)  
4349 32 69 fe			ld (debug_mark+1),a  
434c 3a 56 43			ld a, (.dmark+2)  
434f 32 6a fe			ld (debug_mark+2),a  
4352 18 03			jr .pastdmark  
4354 ..			.dmark: db "DRW"  
4357 f1			.pastdmark: pop af  
4358			endm  
# End of macro DMARK
4358						CALLMONITOR 
4358 cd 6c fe			call debug_vector  
435b				endm  
# End of macro CALLMONITOR
435b					endif 
435b cd be 0d				call update_display 
435e					NEXTW 
435e c3 b2 24			jp macro_next 
4361				endm 
# End of macro NEXTW
4361			 
4361			.DUMP: 
4361				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
4361 37				db WORD_SYS_CORE+35             
4362 99 43			dw .CDUMP            
4364 05				db 4 + 1 
4365 .. 00			db "DUMP",0              
436a				endm 
# End of macro CWHEAD
436a			; | DUMP ( x -- ) With address x display dump   | DONE 
436a			; TODO pop address to use off of the stack 
436a					if DEBUG_FORTH_WORDS_KEY 
436a						DMARK "DUM" 
436a f5				push af  
436b 3a 7f 43			ld a, (.dmark)  
436e 32 68 fe			ld (debug_mark),a  
4371 3a 80 43			ld a, (.dmark+1)  
4374 32 69 fe			ld (debug_mark+1),a  
4377 3a 81 43			ld a, (.dmark+2)  
437a 32 6a fe			ld (debug_mark+2),a  
437d 18 03			jr .pastdmark  
437f ..			.dmark: db "DUM"  
4382 f1			.pastdmark: pop af  
4383			endm  
# End of macro DMARK
4383						CALLMONITOR 
4383 cd 6c fe			call debug_vector  
4386				endm  
# End of macro CALLMONITOR
4386					endif 
4386 cd 9b 0d				call clear_display 
4389			 
4389					; get address 
4389			 
4389					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4389 cd fc 22			call macro_dsp_valuehl 
438c				endm 
# End of macro FORTH_DSP_VALUEHL
438c				 
438c					; save it for cdump 
438c			 
438c 22 e1 f4				ld (os_cur_ptr),hl 
438f			 
438f					; destroy value TOS 
438f			 
438f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
438f cd b4 23			call macro_forth_dsp_pop 
4392				endm 
# End of macro FORTH_DSP_POP
4392			 
4392 cd 85 1f				call dumpcont	; skip old style of param parsing	 
4395 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
4396					NEXTW 
4396 c3 b2 24			jp macro_next 
4399				endm 
# End of macro NEXTW
4399			.CDUMP: 
4399				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
4399 38				db WORD_SYS_CORE+36             
439a c9 43			dw .DAT            
439c 06				db 5 + 1 
439d .. 00			db "CDUMP",0              
43a3				endm 
# End of macro CWHEAD
43a3			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
43a3					if DEBUG_FORTH_WORDS_KEY 
43a3						DMARK "CDP" 
43a3 f5				push af  
43a4 3a b8 43			ld a, (.dmark)  
43a7 32 68 fe			ld (debug_mark),a  
43aa 3a b9 43			ld a, (.dmark+1)  
43ad 32 69 fe			ld (debug_mark+1),a  
43b0 3a ba 43			ld a, (.dmark+2)  
43b3 32 6a fe			ld (debug_mark+2),a  
43b6 18 03			jr .pastdmark  
43b8 ..			.dmark: db "CDP"  
43bb f1			.pastdmark: pop af  
43bc			endm  
# End of macro DMARK
43bc						CALLMONITOR 
43bc cd 6c fe			call debug_vector  
43bf				endm  
# End of macro CALLMONITOR
43bf					endif 
43bf cd 9b 0d				call clear_display 
43c2 cd 85 1f				call dumpcont	 
43c5 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
43c6					NEXTW 
43c6 c3 b2 24			jp macro_next 
43c9				endm 
# End of macro NEXTW
43c9			 
43c9			 
43c9			 
43c9			 
43c9			.DAT: 
43c9				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
43c9 3d				db WORD_SYS_CORE+41             
43ca 1f 44			dw .HOME            
43cc 03				db 2 + 1 
43cd .. 00			db "AT",0              
43d0				endm 
# End of macro CWHEAD
43d0			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
43d0					if DEBUG_FORTH_WORDS_KEY 
43d0						DMARK "AT." 
43d0 f5				push af  
43d1 3a e5 43			ld a, (.dmark)  
43d4 32 68 fe			ld (debug_mark),a  
43d7 3a e6 43			ld a, (.dmark+1)  
43da 32 69 fe			ld (debug_mark+1),a  
43dd 3a e7 43			ld a, (.dmark+2)  
43e0 32 6a fe			ld (debug_mark+2),a  
43e3 18 03			jr .pastdmark  
43e5 ..			.dmark: db "AT."  
43e8 f1			.pastdmark: pop af  
43e9			endm  
# End of macro DMARK
43e9						CALLMONITOR 
43e9 cd 6c fe			call debug_vector  
43ec				endm  
# End of macro CALLMONITOR
43ec					endif 
43ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
43ec cd fc 22			call macro_dsp_valuehl 
43ef				endm 
# End of macro FORTH_DSP_VALUEHL
43ef			 
43ef			 
43ef					; TODO save cursor row 
43ef 7d					ld a,l 
43f0 fe 02				cp 2 
43f2 20 04				jr nz, .crow3 
43f4 3e 28				ld a, display_row_2 
43f6 18 12				jr .ccol1 
43f8 fe 03		.crow3:		cp 3 
43fa 20 04				jr nz, .crow4 
43fc 3e 50				ld a, display_row_3 
43fe 18 0a				jr .ccol1 
4400 fe 04		.crow4:		cp 4 
4402 20 04				jr nz, .crow1 
4404 3e 78				ld a, display_row_4 
4406 18 02				jr .ccol1 
4408 3e 00		.crow1:		ld a,display_row_1 
440a f5			.ccol1:		push af			; got row offset 
440b 6f					ld l,a 
440c 26 00				ld h,0 
440e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
440e cd b4 23			call macro_forth_dsp_pop 
4411				endm 
# End of macro FORTH_DSP_POP
4411					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4411 cd fc 22			call macro_dsp_valuehl 
4414				endm 
# End of macro FORTH_DSP_VALUEHL
4414					; TODO save cursor col 
4414 f1					pop af 
4415 85					add l		; add col offset 
4416 32 5b fa				ld (f_cursor_ptr), a 
4419					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4419 cd b4 23			call macro_forth_dsp_pop 
441c				endm 
# End of macro FORTH_DSP_POP
441c			 
441c					; calculate  
441c			 
441c					NEXTW 
441c c3 b2 24			jp macro_next 
441f				endm 
# End of macro NEXTW
441f			 
441f			 
441f			.HOME: 
441f				CWHEAD .SPACE 45 "HOME" 4 WORD_FLAG_CODE 
441f 41				db WORD_SYS_CORE+45             
4420 4c 44			dw .SPACE            
4422 05				db 4 + 1 
4423 .. 00			db "HOME",0              
4428				endm 
# End of macro CWHEAD
4428			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
4428					if DEBUG_FORTH_WORDS_KEY 
4428						DMARK "HOM" 
4428 f5				push af  
4429 3a 3d 44			ld a, (.dmark)  
442c 32 68 fe			ld (debug_mark),a  
442f 3a 3e 44			ld a, (.dmark+1)  
4432 32 69 fe			ld (debug_mark+1),a  
4435 3a 3f 44			ld a, (.dmark+2)  
4438 32 6a fe			ld (debug_mark+2),a  
443b 18 03			jr .pastdmark  
443d ..			.dmark: db "HOM"  
4440 f1			.pastdmark: pop af  
4441			endm  
# End of macro DMARK
4441						CALLMONITOR 
4441 cd 6c fe			call debug_vector  
4444				endm  
# End of macro CALLMONITOR
4444					endif 
4444 3e 00		.home:		ld a, 0		; and home cursor 
4446 32 5b fa				ld (f_cursor_ptr), a 
4449					NEXTW 
4449 c3 b2 24			jp macro_next 
444c				endm 
# End of macro NEXTW
444c			 
444c			 
444c			.SPACE: 
444c				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
444c 46				db WORD_SYS_CORE+50             
444d 82 44			dw .SPACES            
444f 03				db 2 + 1 
4450 .. 00			db "BL",0              
4453				endm 
# End of macro CWHEAD
4453			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
4453					if DEBUG_FORTH_WORDS_KEY 
4453						DMARK "BL." 
4453 f5				push af  
4454 3a 68 44			ld a, (.dmark)  
4457 32 68 fe			ld (debug_mark),a  
445a 3a 69 44			ld a, (.dmark+1)  
445d 32 69 fe			ld (debug_mark+1),a  
4460 3a 6a 44			ld a, (.dmark+2)  
4463 32 6a fe			ld (debug_mark+2),a  
4466 18 03			jr .pastdmark  
4468 ..			.dmark: db "BL."  
446b f1			.pastdmark: pop af  
446c			endm  
# End of macro DMARK
446c						CALLMONITOR 
446c cd 6c fe			call debug_vector  
446f				endm  
# End of macro CALLMONITOR
446f					endif 
446f 3e 20				ld a, " " 
4471 32 be f1				ld (scratch),a 
4474 3e 00				ld a, 0 
4476 32 bf f1				ld (scratch+1),a 
4479 21 be f1				ld hl, scratch 
447c cd 73 21				call forth_push_str 
447f					 
447f				       NEXTW 
447f c3 b2 24			jp macro_next 
4482				endm 
# End of macro NEXTW
4482			 
4482			;.blstr: db " ", 0 
4482			 
4482			.SPACES: 
4482				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
4482 47				db WORD_SYS_CORE+51             
4483 1d 45			dw .SCROLL            
4485 07				db 6 + 1 
4486 .. 00			db "SPACES",0              
448d				endm 
# End of macro CWHEAD
448d			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
448d					if DEBUG_FORTH_WORDS_KEY 
448d						DMARK "SPS" 
448d f5				push af  
448e 3a a2 44			ld a, (.dmark)  
4491 32 68 fe			ld (debug_mark),a  
4494 3a a3 44			ld a, (.dmark+1)  
4497 32 69 fe			ld (debug_mark+1),a  
449a 3a a4 44			ld a, (.dmark+2)  
449d 32 6a fe			ld (debug_mark+2),a  
44a0 18 03			jr .pastdmark  
44a2 ..			.dmark: db "SPS"  
44a5 f1			.pastdmark: pop af  
44a6			endm  
# End of macro DMARK
44a6						CALLMONITOR 
44a6 cd 6c fe			call debug_vector  
44a9				endm  
# End of macro CALLMONITOR
44a9					endif 
44a9			 
44a9			 
44a9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
44a9 cd fc 22			call macro_dsp_valuehl 
44ac				endm 
# End of macro FORTH_DSP_VALUEHL
44ac			 
44ac e5					push hl    ; u 
44ad					if DEBUG_FORTH_WORDS 
44ad						DMARK "SPA" 
44ad f5				push af  
44ae 3a c2 44			ld a, (.dmark)  
44b1 32 68 fe			ld (debug_mark),a  
44b4 3a c3 44			ld a, (.dmark+1)  
44b7 32 69 fe			ld (debug_mark+1),a  
44ba 3a c4 44			ld a, (.dmark+2)  
44bd 32 6a fe			ld (debug_mark+2),a  
44c0 18 03			jr .pastdmark  
44c2 ..			.dmark: db "SPA"  
44c5 f1			.pastdmark: pop af  
44c6			endm  
# End of macro DMARK
44c6						CALLMONITOR 
44c6 cd 6c fe			call debug_vector  
44c9				endm  
# End of macro CALLMONITOR
44c9					endif 
44c9			 
44c9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44c9 cd b4 23			call macro_forth_dsp_pop 
44cc				endm 
# End of macro FORTH_DSP_POP
44cc e1					pop hl 
44cd 0e 00				ld c, 0 
44cf 45					ld b, l 
44d0 21 be f1				ld hl, scratch  
44d3			 
44d3					if DEBUG_FORTH_WORDS 
44d3						DMARK "SP2" 
44d3 f5				push af  
44d4 3a e8 44			ld a, (.dmark)  
44d7 32 68 fe			ld (debug_mark),a  
44da 3a e9 44			ld a, (.dmark+1)  
44dd 32 69 fe			ld (debug_mark+1),a  
44e0 3a ea 44			ld a, (.dmark+2)  
44e3 32 6a fe			ld (debug_mark+2),a  
44e6 18 03			jr .pastdmark  
44e8 ..			.dmark: db "SP2"  
44eb f1			.pastdmark: pop af  
44ec			endm  
# End of macro DMARK
44ec						CALLMONITOR 
44ec cd 6c fe			call debug_vector  
44ef				endm  
# End of macro CALLMONITOR
44ef					endif 
44ef 3e 20				ld a, ' ' 
44f1			.spaces1:	 
44f1 77					ld (hl),a 
44f2 23					inc hl 
44f3					 
44f3 10 fc				djnz .spaces1 
44f5 3e 00				ld a,0 
44f7 77					ld (hl),a 
44f8 21 be f1				ld hl, scratch 
44fb					if DEBUG_FORTH_WORDS 
44fb						DMARK "SP3" 
44fb f5				push af  
44fc 3a 10 45			ld a, (.dmark)  
44ff 32 68 fe			ld (debug_mark),a  
4502 3a 11 45			ld a, (.dmark+1)  
4505 32 69 fe			ld (debug_mark+1),a  
4508 3a 12 45			ld a, (.dmark+2)  
450b 32 6a fe			ld (debug_mark+2),a  
450e 18 03			jr .pastdmark  
4510 ..			.dmark: db "SP3"  
4513 f1			.pastdmark: pop af  
4514			endm  
# End of macro DMARK
4514						CALLMONITOR 
4514 cd 6c fe			call debug_vector  
4517				endm  
# End of macro CALLMONITOR
4517					endif 
4517 cd 73 21				call forth_push_str 
451a			 
451a				       NEXTW 
451a c3 b2 24			jp macro_next 
451d				endm 
# End of macro NEXTW
451d			 
451d			 
451d			 
451d			.SCROLL: 
451d				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
451d 53				db WORD_SYS_CORE+63             
451e 4a 45			dw .SCROLLD            
4520 07				db 6 + 1 
4521 .. 00			db "SCROLL",0              
4528				endm 
# End of macro CWHEAD
4528			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
4528					if DEBUG_FORTH_WORDS_KEY 
4528						DMARK "SCR" 
4528 f5				push af  
4529 3a 3d 45			ld a, (.dmark)  
452c 32 68 fe			ld (debug_mark),a  
452f 3a 3e 45			ld a, (.dmark+1)  
4532 32 69 fe			ld (debug_mark+1),a  
4535 3a 3f 45			ld a, (.dmark+2)  
4538 32 6a fe			ld (debug_mark+2),a  
453b 18 03			jr .pastdmark  
453d ..			.dmark: db "SCR"  
4540 f1			.pastdmark: pop af  
4541			endm  
# End of macro DMARK
4541						CALLMONITOR 
4541 cd 6c fe			call debug_vector  
4544				endm  
# End of macro CALLMONITOR
4544					endif 
4544			 
4544 cd 5d 0d			call scroll_up 
4547			;	call update_display 
4547			 
4547					NEXTW 
4547 c3 b2 24			jp macro_next 
454a				endm 
# End of macro NEXTW
454a			 
454a			 
454a			 
454a			;		; get dir 
454a			; 
454a			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
454a			; 
454a			;		push hl 
454a			; 
454a			;		; destroy value TOS 
454a			; 
454a			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
454a			; 
454a			;		; get count 
454a			; 
454a			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
454a			; 
454a			;		push hl 
454a			; 
454a			;		; destroy value TOS 
454a			; 
454a			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
454a			; 
454a			;		; one value on hl get other one back 
454a			; 
454a			;		pop bc    ; count 
454a			; 
454a			;		pop de   ; dir 
454a			; 
454a			; 
454a			;		ld b, c 
454a			; 
454a			;.scrolldir:     push bc 
454a			;		push de 
454a			; 
454a			;		ld a, 0 
454a			;		cp e 
454a			;		jr z, .scrollup  
454a			;		call scroll_down 
454a			;		jr .scrollnext 
454a			;.scrollup:	call scroll_up 
454a			; 
454a			;		 
454a			;.scrollnext: 
454a			;		pop de 
454a			;		pop bc 
454a			;		djnz .scrolldir 
454a			; 
454a			; 
454a			; 
454a			; 
454a			; 
454a			;		NEXTW 
454a			 
454a			.SCROLLD: 
454a				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
454a 53				db WORD_SYS_CORE+63             
454b 78 45			dw .ATQ            
454d 08				db 7 + 1 
454e .. 00			db "SCROLLD",0              
4556				endm 
# End of macro CWHEAD
4556			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
4556					if DEBUG_FORTH_WORDS_KEY 
4556						DMARK "SCD" 
4556 f5				push af  
4557 3a 6b 45			ld a, (.dmark)  
455a 32 68 fe			ld (debug_mark),a  
455d 3a 6c 45			ld a, (.dmark+1)  
4560 32 69 fe			ld (debug_mark+1),a  
4563 3a 6d 45			ld a, (.dmark+2)  
4566 32 6a fe			ld (debug_mark+2),a  
4569 18 03			jr .pastdmark  
456b ..			.dmark: db "SCD"  
456e f1			.pastdmark: pop af  
456f			endm  
# End of macro DMARK
456f						CALLMONITOR 
456f cd 6c fe			call debug_vector  
4572				endm  
# End of macro CALLMONITOR
4572					endif 
4572			 
4572 cd 81 0d			call scroll_down 
4575			;	call update_display 
4575			 
4575					NEXTW 
4575 c3 b2 24			jp macro_next 
4578				endm 
# End of macro NEXTW
4578			 
4578			 
4578			.ATQ: 
4578				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4578 62				db WORD_SYS_CORE+78             
4579 d6 45			dw .AUTODSP            
457b 04				db 3 + 1 
457c .. 00			db "AT@",0              
4580				endm 
# End of macro CWHEAD
4580			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
4580					if DEBUG_FORTH_WORDS_KEY 
4580						DMARK "ATA" 
4580 f5				push af  
4581 3a 95 45			ld a, (.dmark)  
4584 32 68 fe			ld (debug_mark),a  
4587 3a 96 45			ld a, (.dmark+1)  
458a 32 69 fe			ld (debug_mark+1),a  
458d 3a 97 45			ld a, (.dmark+2)  
4590 32 6a fe			ld (debug_mark+2),a  
4593 18 03			jr .pastdmark  
4595 ..			.dmark: db "ATA"  
4598 f1			.pastdmark: pop af  
4599			endm  
# End of macro DMARK
4599						CALLMONITOR 
4599 cd 6c fe			call debug_vector  
459c				endm  
# End of macro CALLMONITOR
459c					endif 
459c			 
459c			 
459c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
459c cd fc 22			call macro_dsp_valuehl 
459f				endm 
# End of macro FORTH_DSP_VALUEHL
459f			 
459f					; TODO save cursor row 
459f 7d					ld a,l 
45a0 fe 02				cp 2 
45a2 20 04				jr nz, .crow3aq 
45a4 3e 28				ld a, display_row_2 
45a6 18 12				jr .ccol1aq 
45a8 fe 03		.crow3aq:		cp 3 
45aa 20 04				jr nz, .crow4aq 
45ac 3e 50				ld a, display_row_3 
45ae 18 0a				jr .ccol1aq 
45b0 fe 04		.crow4aq:		cp 4 
45b2 20 04				jr nz, .crow1aq 
45b4 3e 78				ld a, display_row_4 
45b6 18 02				jr .ccol1aq 
45b8 3e 00		.crow1aq:		ld a,display_row_1 
45ba f5			.ccol1aq:		push af			; got row offset 
45bb 6f					ld l,a 
45bc 26 00				ld h,0 
45be					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45be cd b4 23			call macro_forth_dsp_pop 
45c1				endm 
# End of macro FORTH_DSP_POP
45c1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45c1 cd fc 22			call macro_dsp_valuehl 
45c4				endm 
# End of macro FORTH_DSP_VALUEHL
45c4					; TODO save cursor col 
45c4 f1					pop af 
45c5 85					add l		; add col offset 
45c6			 
45c6					; add current frame buffer address 
45c6 2a c9 fb				ld hl, (display_fb_active) 
45c9 cd cf 0f				call addatohl 
45cc			 
45cc			 
45cc			 
45cc			 
45cc					; get char frame buffer location offset in hl 
45cc			 
45cc 7e					ld a,(hl) 
45cd 26 00				ld h, 0 
45cf 6f					ld l, a 
45d0			 
45d0 cd 05 21				call forth_push_numhl 
45d3			 
45d3			 
45d3					NEXTW 
45d3 c3 b2 24			jp macro_next 
45d6				endm 
# End of macro NEXTW
45d6			 
45d6			.AUTODSP: 
45d6				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
45d6 63				db WORD_SYS_CORE+79             
45d7 ec 45			dw .MENU            
45d9 05				db 4 + 1 
45da .. 00			db "ADSP",0              
45df				endm 
# End of macro CWHEAD
45df			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
45df			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
45df			 
45df					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45df cd fc 22			call macro_dsp_valuehl 
45e2				endm 
# End of macro FORTH_DSP_VALUEHL
45e2			 
45e2			;		push hl 
45e2			 
45e2					; destroy value TOS 
45e2			 
45e2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45e2 cd b4 23			call macro_forth_dsp_pop 
45e5				endm 
# End of macro FORTH_DSP_POP
45e5			 
45e5			;		pop hl 
45e5			 
45e5 7d					ld a,l 
45e6 32 39 fa				ld (cli_autodisplay), a 
45e9				       NEXTW 
45e9 c3 b2 24			jp macro_next 
45ec				endm 
# End of macro NEXTW
45ec			 
45ec			.MENU: 
45ec				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
45ec 70				db WORD_SYS_CORE+92             
45ed 95 46			dw .ENDDISPLAY            
45ef 05				db 4 + 1 
45f0 .. 00			db "MENU",0              
45f5				endm 
# End of macro CWHEAD
45f5			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | TODO 
45f5			 
45f5			;		; get number of items on the stack 
45f5			; 
45f5				 
45f5					FORTH_DSP_VALUEHL 
45f5 cd fc 22			call macro_dsp_valuehl 
45f8				endm 
# End of macro FORTH_DSP_VALUEHL
45f8				 
45f8					if DEBUG_FORTH_WORDS_KEY 
45f8						DMARK "MNU" 
45f8 f5				push af  
45f9 3a 0d 46			ld a, (.dmark)  
45fc 32 68 fe			ld (debug_mark),a  
45ff 3a 0e 46			ld a, (.dmark+1)  
4602 32 69 fe			ld (debug_mark+1),a  
4605 3a 0f 46			ld a, (.dmark+2)  
4608 32 6a fe			ld (debug_mark+2),a  
460b 18 03			jr .pastdmark  
460d ..			.dmark: db "MNU"  
4610 f1			.pastdmark: pop af  
4611			endm  
# End of macro DMARK
4611						CALLMONITOR 
4611 cd 6c fe			call debug_vector  
4614				endm  
# End of macro CALLMONITOR
4614					endif 
4614			 
4614 45					ld b, l	 
4615 05					dec b 
4616			 
4616					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4616 cd b4 23			call macro_forth_dsp_pop 
4619				endm 
# End of macro FORTH_DSP_POP
4619			 
4619			 
4619					; go directly through the stack to pluck out the string pointers and build an array 
4619			 
4619			;		FORTH_DSP 
4619			 
4619					; hl contains top most stack item 
4619				 
4619 11 be f1				ld de, scratch 
461c			 
461c			.mbuild: 
461c			 
461c					FORTH_DSP_VALUEHL 
461c cd fc 22			call macro_dsp_valuehl 
461f				endm 
# End of macro FORTH_DSP_VALUEHL
461f			 
461f					if DEBUG_FORTH_WORDS 
461f						DMARK "MN3" 
461f f5				push af  
4620 3a 34 46			ld a, (.dmark)  
4623 32 68 fe			ld (debug_mark),a  
4626 3a 35 46			ld a, (.dmark+1)  
4629 32 69 fe			ld (debug_mark+1),a  
462c 3a 36 46			ld a, (.dmark+2)  
462f 32 6a fe			ld (debug_mark+2),a  
4632 18 03			jr .pastdmark  
4634 ..			.dmark: db "MN3"  
4637 f1			.pastdmark: pop af  
4638			endm  
# End of macro DMARK
4638						CALLMONITOR 
4638 cd 6c fe			call debug_vector  
463b				endm  
# End of macro CALLMONITOR
463b					endif 
463b eb					ex de, hl 
463c 73					ld (hl), e 
463d 23					inc hl 
463e 72					ld (hl), d 
463f 23					inc hl 
4640 eb					ex de, hl 
4641			 
4641					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4641 cd b4 23			call macro_forth_dsp_pop 
4644				endm 
# End of macro FORTH_DSP_POP
4644			 
4644 10 d6				djnz .mbuild 
4646			 
4646					; done add term 
4646			 
4646 eb					ex de, hl 
4647 36 00				ld (hl), 0 
4649 23					inc hl 
464a 36 00				ld (hl), 0 
464c			 
464c				 
464c					 
464c 21 be f1				ld hl, scratch 
464f			 
464f					if DEBUG_FORTH_WORDS 
464f						DMARK "MNx" 
464f f5				push af  
4650 3a 64 46			ld a, (.dmark)  
4653 32 68 fe			ld (debug_mark),a  
4656 3a 65 46			ld a, (.dmark+1)  
4659 32 69 fe			ld (debug_mark+1),a  
465c 3a 66 46			ld a, (.dmark+2)  
465f 32 6a fe			ld (debug_mark+2),a  
4662 18 03			jr .pastdmark  
4664 ..			.dmark: db "MNx"  
4667 f1			.pastdmark: pop af  
4668			endm  
# End of macro DMARK
4668						CALLMONITOR 
4668 cd 6c fe			call debug_vector  
466b				endm  
# End of macro CALLMONITOR
466b					endif 
466b			 
466b			 
466b			 
466b 3e 00				ld a, 0 
466d cd cc 0d				call menu 
4670			 
4670			 
4670 6f					ld l, a 
4671 26 00				ld h, 0 
4673			 
4673					if DEBUG_FORTH_WORDS 
4673						DMARK "MNr" 
4673 f5				push af  
4674 3a 88 46			ld a, (.dmark)  
4677 32 68 fe			ld (debug_mark),a  
467a 3a 89 46			ld a, (.dmark+1)  
467d 32 69 fe			ld (debug_mark+1),a  
4680 3a 8a 46			ld a, (.dmark+2)  
4683 32 6a fe			ld (debug_mark+2),a  
4686 18 03			jr .pastdmark  
4688 ..			.dmark: db "MNr"  
468b f1			.pastdmark: pop af  
468c			endm  
# End of macro DMARK
468c						CALLMONITOR 
468c cd 6c fe			call debug_vector  
468f				endm  
# End of macro CALLMONITOR
468f					endif 
468f			 
468f cd 05 21				call forth_push_numhl 
4692			 
4692			 
4692			 
4692			 
4692				       NEXTW 
4692 c3 b2 24			jp macro_next 
4695				endm 
# End of macro NEXTW
4695			 
4695			 
4695			.ENDDISPLAY: 
4695			 
4695			; eof 
# End of file forth_words_display.asm
4695			include "forth_words_str.asm" 
4695			 
4695			; | ## String Words 
4695			 
4695			.PTR:   
4695			 
4695				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
4695 48				db WORD_SYS_CORE+52             
4696 c2 46			dw .STYPE            
4698 04				db 3 + 1 
4699 .. 00			db "PTR",0              
469d				endm 
# End of macro CWHEAD
469d			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
469d			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
469d			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
469d			 
469d					if DEBUG_FORTH_WORDS_KEY 
469d						DMARK "PTR" 
469d f5				push af  
469e 3a b2 46			ld a, (.dmark)  
46a1 32 68 fe			ld (debug_mark),a  
46a4 3a b3 46			ld a, (.dmark+1)  
46a7 32 69 fe			ld (debug_mark+1),a  
46aa 3a b4 46			ld a, (.dmark+2)  
46ad 32 6a fe			ld (debug_mark+2),a  
46b0 18 03			jr .pastdmark  
46b2 ..			.dmark: db "PTR"  
46b5 f1			.pastdmark: pop af  
46b6			endm  
# End of macro DMARK
46b6						CALLMONITOR 
46b6 cd 6c fe			call debug_vector  
46b9				endm  
# End of macro CALLMONITOR
46b9					endif 
46b9					FORTH_DSP_VALUEHL 
46b9 cd fc 22			call macro_dsp_valuehl 
46bc				endm 
# End of macro FORTH_DSP_VALUEHL
46bc cd 05 21				call forth_push_numhl 
46bf			 
46bf			 
46bf					NEXTW 
46bf c3 b2 24			jp macro_next 
46c2				endm 
# End of macro NEXTW
46c2			.STYPE: 
46c2				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
46c2 48				db WORD_SYS_CORE+52             
46c3 11 47			dw .UPPER            
46c5 06				db 5 + 1 
46c6 .. 00			db "STYPE",0              
46cc				endm 
# End of macro CWHEAD
46cc			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
46cc					if DEBUG_FORTH_WORDS_KEY 
46cc						DMARK "STY" 
46cc f5				push af  
46cd 3a e1 46			ld a, (.dmark)  
46d0 32 68 fe			ld (debug_mark),a  
46d3 3a e2 46			ld a, (.dmark+1)  
46d6 32 69 fe			ld (debug_mark+1),a  
46d9 3a e3 46			ld a, (.dmark+2)  
46dc 32 6a fe			ld (debug_mark+2),a  
46df 18 03			jr .pastdmark  
46e1 ..			.dmark: db "STY"  
46e4 f1			.pastdmark: pop af  
46e5			endm  
# End of macro DMARK
46e5						CALLMONITOR 
46e5 cd 6c fe			call debug_vector  
46e8				endm  
# End of macro CALLMONITOR
46e8					endif 
46e8					FORTH_DSP 
46e8 cd c2 22			call macro_forth_dsp 
46eb				endm 
# End of macro FORTH_DSP
46eb					;v5 FORTH_DSP_VALUE 
46eb			 
46eb 7e					ld a, (hl) 
46ec			 
46ec f5					push af 
46ed			 
46ed			; Dont destroy TOS		FORTH_DSP_POP 
46ed			 
46ed f1					pop af 
46ee			 
46ee fe 01				cp DS_TYPE_STR 
46f0 28 09				jr z, .typestr 
46f2			 
46f2 fe 02				cp DS_TYPE_INUM 
46f4 28 0a				jr z, .typeinum 
46f6			 
46f6 21 0f 47				ld hl, .tna 
46f9 18 0a				jr .tpush 
46fb			 
46fb 21 0b 47		.typestr:	ld hl, .tstr 
46fe 18 05				jr .tpush 
4700 21 0d 47		.typeinum:	ld hl, .tinum 
4703 18 00				jr .tpush 
4705			 
4705			.tpush: 
4705			 
4705 cd 73 21				call forth_push_str 
4708			 
4708					NEXTW 
4708 c3 b2 24			jp macro_next 
470b				endm 
# End of macro NEXTW
470b .. 00		.tstr:	db "s",0 
470d .. 00		.tinum:  db "i",0 
470f .. 00		.tna:   db "?", 0 
4711			 
4711			 
4711			.UPPER: 
4711				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4711 48				db WORD_SYS_CORE+52             
4712 4c 47			dw .LOWER            
4714 06				db 5 + 1 
4715 .. 00			db "UPPER",0              
471b				endm 
# End of macro CWHEAD
471b			; | UPPER ( s -- s ) Upper case string s  | DONE 
471b					if DEBUG_FORTH_WORDS_KEY 
471b						DMARK "UPR" 
471b f5				push af  
471c 3a 30 47			ld a, (.dmark)  
471f 32 68 fe			ld (debug_mark),a  
4722 3a 31 47			ld a, (.dmark+1)  
4725 32 69 fe			ld (debug_mark+1),a  
4728 3a 32 47			ld a, (.dmark+2)  
472b 32 6a fe			ld (debug_mark+2),a  
472e 18 03			jr .pastdmark  
4730 ..			.dmark: db "UPR"  
4733 f1			.pastdmark: pop af  
4734			endm  
# End of macro DMARK
4734						CALLMONITOR 
4734 cd 6c fe			call debug_vector  
4737				endm  
# End of macro CALLMONITOR
4737					endif 
4737			 
4737					FORTH_DSP 
4737 cd c2 22			call macro_forth_dsp 
473a				endm 
# End of macro FORTH_DSP
473a					 
473a			; TODO check is string type 
473a			 
473a					FORTH_DSP_VALUEHL 
473a cd fc 22			call macro_dsp_valuehl 
473d				endm 
# End of macro FORTH_DSP_VALUEHL
473d			; get pointer to string in hl 
473d			 
473d 7e			.toup:		ld a, (hl) 
473e fe 00				cp 0 
4740 28 07				jr z, .toupdone 
4742			 
4742 cd 3c 13				call to_upper 
4745			 
4745 77					ld (hl), a 
4746 23					inc hl 
4747 18 f4				jr .toup 
4749			 
4749					 
4749			 
4749			 
4749			; for each char convert to upper 
4749					 
4749			.toupdone: 
4749			 
4749			 
4749					NEXTW 
4749 c3 b2 24			jp macro_next 
474c				endm 
# End of macro NEXTW
474c			.LOWER: 
474c				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
474c 48				db WORD_SYS_CORE+52             
474d 87 47			dw .TCASE            
474f 06				db 5 + 1 
4750 .. 00			db "LOWER",0              
4756				endm 
# End of macro CWHEAD
4756			; | LOWER ( s -- s ) Lower case string s  | DONE 
4756					if DEBUG_FORTH_WORDS_KEY 
4756						DMARK "LWR" 
4756 f5				push af  
4757 3a 6b 47			ld a, (.dmark)  
475a 32 68 fe			ld (debug_mark),a  
475d 3a 6c 47			ld a, (.dmark+1)  
4760 32 69 fe			ld (debug_mark+1),a  
4763 3a 6d 47			ld a, (.dmark+2)  
4766 32 6a fe			ld (debug_mark+2),a  
4769 18 03			jr .pastdmark  
476b ..			.dmark: db "LWR"  
476e f1			.pastdmark: pop af  
476f			endm  
# End of macro DMARK
476f						CALLMONITOR 
476f cd 6c fe			call debug_vector  
4772				endm  
# End of macro CALLMONITOR
4772					endif 
4772			 
4772					FORTH_DSP 
4772 cd c2 22			call macro_forth_dsp 
4775				endm 
# End of macro FORTH_DSP
4775					 
4775			; TODO check is string type 
4775			 
4775					FORTH_DSP_VALUEHL 
4775 cd fc 22			call macro_dsp_valuehl 
4778				endm 
# End of macro FORTH_DSP_VALUEHL
4778			; get pointer to string in hl 
4778			 
4778 7e			.tolow:		ld a, (hl) 
4779 fe 00				cp 0 
477b 28 07				jr z, .tolowdone 
477d			 
477d cd 45 13				call to_lower 
4780			 
4780 77					ld (hl), a 
4781 23					inc hl 
4782 18 f4				jr .tolow 
4784			 
4784					 
4784			 
4784			 
4784			; for each char convert to low 
4784					 
4784			.tolowdone: 
4784					NEXTW 
4784 c3 b2 24			jp macro_next 
4787				endm 
# End of macro NEXTW
4787			.TCASE: 
4787				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4787 48				db WORD_SYS_CORE+52             
4788 bd 48			dw .SUBSTR            
478a 06				db 5 + 1 
478b .. 00			db "TCASE",0              
4791				endm 
# End of macro CWHEAD
4791			; | TCASE ( s -- s ) Title case string s  | DONE 
4791					if DEBUG_FORTH_WORDS_KEY 
4791						DMARK "TCS" 
4791 f5				push af  
4792 3a a6 47			ld a, (.dmark)  
4795 32 68 fe			ld (debug_mark),a  
4798 3a a7 47			ld a, (.dmark+1)  
479b 32 69 fe			ld (debug_mark+1),a  
479e 3a a8 47			ld a, (.dmark+2)  
47a1 32 6a fe			ld (debug_mark+2),a  
47a4 18 03			jr .pastdmark  
47a6 ..			.dmark: db "TCS"  
47a9 f1			.pastdmark: pop af  
47aa			endm  
# End of macro DMARK
47aa						CALLMONITOR 
47aa cd 6c fe			call debug_vector  
47ad				endm  
# End of macro CALLMONITOR
47ad					endif 
47ad			 
47ad					FORTH_DSP 
47ad cd c2 22			call macro_forth_dsp 
47b0				endm 
# End of macro FORTH_DSP
47b0					 
47b0			; TODO check is string type 
47b0			 
47b0					FORTH_DSP_VALUEHL 
47b0 cd fc 22			call macro_dsp_valuehl 
47b3				endm 
# End of macro FORTH_DSP_VALUEHL
47b3			; get pointer to string in hl 
47b3			 
47b3					if DEBUG_FORTH_WORDS 
47b3						DMARK "TC1" 
47b3 f5				push af  
47b4 3a c8 47			ld a, (.dmark)  
47b7 32 68 fe			ld (debug_mark),a  
47ba 3a c9 47			ld a, (.dmark+1)  
47bd 32 69 fe			ld (debug_mark+1),a  
47c0 3a ca 47			ld a, (.dmark+2)  
47c3 32 6a fe			ld (debug_mark+2),a  
47c6 18 03			jr .pastdmark  
47c8 ..			.dmark: db "TC1"  
47cb f1			.pastdmark: pop af  
47cc			endm  
# End of macro DMARK
47cc						CALLMONITOR 
47cc cd 6c fe			call debug_vector  
47cf				endm  
# End of macro CALLMONITOR
47cf					endif 
47cf			 
47cf					; first time in turn to upper case first char 
47cf			 
47cf 7e					ld a, (hl) 
47d0 c3 5a 48				jp .totsiptou 
47d3			 
47d3			 
47d3 7e			.tot:		ld a, (hl) 
47d4 fe 00				cp 0 
47d6 ca 9e 48				jp z, .totdone 
47d9			 
47d9					if DEBUG_FORTH_WORDS 
47d9						DMARK "TC2" 
47d9 f5				push af  
47da 3a ee 47			ld a, (.dmark)  
47dd 32 68 fe			ld (debug_mark),a  
47e0 3a ef 47			ld a, (.dmark+1)  
47e3 32 69 fe			ld (debug_mark+1),a  
47e6 3a f0 47			ld a, (.dmark+2)  
47e9 32 6a fe			ld (debug_mark+2),a  
47ec 18 03			jr .pastdmark  
47ee ..			.dmark: db "TC2"  
47f1 f1			.pastdmark: pop af  
47f2			endm  
# End of macro DMARK
47f2						CALLMONITOR 
47f2 cd 6c fe			call debug_vector  
47f5				endm  
# End of macro CALLMONITOR
47f5					endif 
47f5					; check to see if current char is a space 
47f5			 
47f5 fe 20				cp ' ' 
47f7 28 21				jr z, .totsp 
47f9 cd 45 13				call to_lower 
47fc					if DEBUG_FORTH_WORDS 
47fc						DMARK "TC3" 
47fc f5				push af  
47fd 3a 11 48			ld a, (.dmark)  
4800 32 68 fe			ld (debug_mark),a  
4803 3a 12 48			ld a, (.dmark+1)  
4806 32 69 fe			ld (debug_mark+1),a  
4809 3a 13 48			ld a, (.dmark+2)  
480c 32 6a fe			ld (debug_mark+2),a  
480f 18 03			jr .pastdmark  
4811 ..			.dmark: db "TC3"  
4814 f1			.pastdmark: pop af  
4815			endm  
# End of macro DMARK
4815						CALLMONITOR 
4815 cd 6c fe			call debug_vector  
4818				endm  
# End of macro CALLMONITOR
4818					endif 
4818 18 63				jr .totnxt 
481a			 
481a			.totsp:         ; on a space, find next char which should be upper 
481a			 
481a					if DEBUG_FORTH_WORDS 
481a						DMARK "TC4" 
481a f5				push af  
481b 3a 2f 48			ld a, (.dmark)  
481e 32 68 fe			ld (debug_mark),a  
4821 3a 30 48			ld a, (.dmark+1)  
4824 32 69 fe			ld (debug_mark+1),a  
4827 3a 31 48			ld a, (.dmark+2)  
482a 32 6a fe			ld (debug_mark+2),a  
482d 18 03			jr .pastdmark  
482f ..			.dmark: db "TC4"  
4832 f1			.pastdmark: pop af  
4833			endm  
# End of macro DMARK
4833						CALLMONITOR 
4833 cd 6c fe			call debug_vector  
4836				endm  
# End of macro CALLMONITOR
4836					endif 
4836					;; 
4836			 
4836 fe 20				cp ' ' 
4838 20 20				jr nz, .totsiptou 
483a 23					inc hl 
483b 7e					ld a, (hl) 
483c					if DEBUG_FORTH_WORDS 
483c						DMARK "TC5" 
483c f5				push af  
483d 3a 51 48			ld a, (.dmark)  
4840 32 68 fe			ld (debug_mark),a  
4843 3a 52 48			ld a, (.dmark+1)  
4846 32 69 fe			ld (debug_mark+1),a  
4849 3a 53 48			ld a, (.dmark+2)  
484c 32 6a fe			ld (debug_mark+2),a  
484f 18 03			jr .pastdmark  
4851 ..			.dmark: db "TC5"  
4854 f1			.pastdmark: pop af  
4855			endm  
# End of macro DMARK
4855						CALLMONITOR 
4855 cd 6c fe			call debug_vector  
4858				endm  
# End of macro CALLMONITOR
4858					endif 
4858 18 c0				jr .totsp 
485a fe 00		.totsiptou:    cp 0 
485c 28 40				jr z, .totdone 
485e					; not space and not zero term so upper case it 
485e cd 3c 13				call to_upper 
4861			 
4861					if DEBUG_FORTH_WORDS 
4861						DMARK "TC6" 
4861 f5				push af  
4862 3a 76 48			ld a, (.dmark)  
4865 32 68 fe			ld (debug_mark),a  
4868 3a 77 48			ld a, (.dmark+1)  
486b 32 69 fe			ld (debug_mark+1),a  
486e 3a 78 48			ld a, (.dmark+2)  
4871 32 6a fe			ld (debug_mark+2),a  
4874 18 03			jr .pastdmark  
4876 ..			.dmark: db "TC6"  
4879 f1			.pastdmark: pop af  
487a			endm  
# End of macro DMARK
487a						CALLMONITOR 
487a cd 6c fe			call debug_vector  
487d				endm  
# End of macro CALLMONITOR
487d					endif 
487d			 
487d			 
487d			.totnxt: 
487d			 
487d 77					ld (hl), a 
487e 23					inc hl 
487f					if DEBUG_FORTH_WORDS 
487f						DMARK "TC7" 
487f f5				push af  
4880 3a 94 48			ld a, (.dmark)  
4883 32 68 fe			ld (debug_mark),a  
4886 3a 95 48			ld a, (.dmark+1)  
4889 32 69 fe			ld (debug_mark+1),a  
488c 3a 96 48			ld a, (.dmark+2)  
488f 32 6a fe			ld (debug_mark+2),a  
4892 18 03			jr .pastdmark  
4894 ..			.dmark: db "TC7"  
4897 f1			.pastdmark: pop af  
4898			endm  
# End of macro DMARK
4898						CALLMONITOR 
4898 cd 6c fe			call debug_vector  
489b				endm  
# End of macro CALLMONITOR
489b					endif 
489b c3 d3 47				jp .tot 
489e			 
489e					 
489e			 
489e			 
489e			; for each char convert to low 
489e					 
489e			.totdone: 
489e					if DEBUG_FORTH_WORDS 
489e						DMARK "TCd" 
489e f5				push af  
489f 3a b3 48			ld a, (.dmark)  
48a2 32 68 fe			ld (debug_mark),a  
48a5 3a b4 48			ld a, (.dmark+1)  
48a8 32 69 fe			ld (debug_mark+1),a  
48ab 3a b5 48			ld a, (.dmark+2)  
48ae 32 6a fe			ld (debug_mark+2),a  
48b1 18 03			jr .pastdmark  
48b3 ..			.dmark: db "TCd"  
48b6 f1			.pastdmark: pop af  
48b7			endm  
# End of macro DMARK
48b7						CALLMONITOR 
48b7 cd 6c fe			call debug_vector  
48ba				endm  
# End of macro CALLMONITOR
48ba					endif 
48ba					NEXTW 
48ba c3 b2 24			jp macro_next 
48bd				endm 
# End of macro NEXTW
48bd			 
48bd			.SUBSTR: 
48bd				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
48bd 48				db WORD_SYS_CORE+52             
48be 1b 49			dw .LEFT            
48c0 07				db 6 + 1 
48c1 .. 00			db "SUBSTR",0              
48c8				endm 
# End of macro CWHEAD
48c8			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
48c8			 
48c8					if DEBUG_FORTH_WORDS_KEY 
48c8						DMARK "SST" 
48c8 f5				push af  
48c9 3a dd 48			ld a, (.dmark)  
48cc 32 68 fe			ld (debug_mark),a  
48cf 3a de 48			ld a, (.dmark+1)  
48d2 32 69 fe			ld (debug_mark+1),a  
48d5 3a df 48			ld a, (.dmark+2)  
48d8 32 6a fe			ld (debug_mark+2),a  
48db 18 03			jr .pastdmark  
48dd ..			.dmark: db "SST"  
48e0 f1			.pastdmark: pop af  
48e1			endm  
# End of macro DMARK
48e1						CALLMONITOR 
48e1 cd 6c fe			call debug_vector  
48e4				endm  
# End of macro CALLMONITOR
48e4					endif 
48e4			; TODO check string type 
48e4					FORTH_DSP_VALUEHL 
48e4 cd fc 22			call macro_dsp_valuehl 
48e7				endm 
# End of macro FORTH_DSP_VALUEHL
48e7			 
48e7 e5					push hl      ; string length 
48e8			 
48e8					FORTH_DSP_POP 
48e8 cd b4 23			call macro_forth_dsp_pop 
48eb				endm 
# End of macro FORTH_DSP_POP
48eb			 
48eb					FORTH_DSP_VALUEHL 
48eb cd fc 22			call macro_dsp_valuehl 
48ee				endm 
# End of macro FORTH_DSP_VALUEHL
48ee			 
48ee e5					push hl     ; start char 
48ef			 
48ef					FORTH_DSP_POP 
48ef cd b4 23			call macro_forth_dsp_pop 
48f2				endm 
# End of macro FORTH_DSP_POP
48f2			 
48f2			 
48f2					FORTH_DSP_VALUE 
48f2 cd e5 22			call macro_forth_dsp_value 
48f5				endm 
# End of macro FORTH_DSP_VALUE
48f5			 
48f5 d1					pop de    ; get start post offset 
48f6			 
48f6 19					add hl, de    ; starting offset 
48f7			 
48f7 c1					pop bc 
48f8 c5					push bc      ; grab size of string 
48f9			 
48f9 e5					push hl    ; save string start  
48fa			 
48fa 26 00				ld h, 0 
48fc 69					ld l, c 
48fd 23					inc hl 
48fe 23					inc hl 
48ff			 
48ff cd 96 14				call malloc 
4902				if DEBUG_FORTH_MALLOC_GUARD 
4902 cc 48 5e				call z,malloc_error 
4905				endif 
4905			 
4905 eb					ex de, hl      ; save malloc area for string copy 
4906 e1					pop hl    ; get back source 
4907 c1					pop bc    ; get length of string back 
4908			 
4908 d5					push de    ; save malloc area for after we push 
4909 ed b0				ldir     ; copy substr 
490b			 
490b			 
490b eb					ex de, hl 
490c 3e 00				ld a, 0 
490e 77					ld (hl), a   ; term substr 
490f			 
490f					 
490f e1					pop hl    ; get malloc so we can push it 
4910 e5					push hl   ; save so we can free it afterwards 
4911			 
4911 cd 73 21				call forth_push_str 
4914			 
4914 e1					pop hl 
4915 cd 60 15				call free 
4918			 
4918					 
4918					 
4918			 
4918			 
4918					NEXTW 
4918 c3 b2 24			jp macro_next 
491b				endm 
# End of macro NEXTW
491b			 
491b			.LEFT: 
491b				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
491b 48				db WORD_SYS_CORE+52             
491c 43 49			dw .RIGHT            
491e 05				db 4 + 1 
491f .. 00			db "LEFT",0              
4924				endm 
# End of macro CWHEAD
4924			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
4924					if DEBUG_FORTH_WORDS_KEY 
4924						DMARK "LEF" 
4924 f5				push af  
4925 3a 39 49			ld a, (.dmark)  
4928 32 68 fe			ld (debug_mark),a  
492b 3a 3a 49			ld a, (.dmark+1)  
492e 32 69 fe			ld (debug_mark+1),a  
4931 3a 3b 49			ld a, (.dmark+2)  
4934 32 6a fe			ld (debug_mark+2),a  
4937 18 03			jr .pastdmark  
4939 ..			.dmark: db "LEF"  
493c f1			.pastdmark: pop af  
493d			endm  
# End of macro DMARK
493d						CALLMONITOR 
493d cd 6c fe			call debug_vector  
4940				endm  
# End of macro CALLMONITOR
4940					endif 
4940			 
4940					NEXTW 
4940 c3 b2 24			jp macro_next 
4943				endm 
# End of macro NEXTW
4943			.RIGHT: 
4943				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4943 48				db WORD_SYS_CORE+52             
4944 6c 49			dw .STR2NUM            
4946 06				db 5 + 1 
4947 .. 00			db "RIGHT",0              
494d				endm 
# End of macro CWHEAD
494d			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
494d					if DEBUG_FORTH_WORDS_KEY 
494d						DMARK "RIG" 
494d f5				push af  
494e 3a 62 49			ld a, (.dmark)  
4951 32 68 fe			ld (debug_mark),a  
4954 3a 63 49			ld a, (.dmark+1)  
4957 32 69 fe			ld (debug_mark+1),a  
495a 3a 64 49			ld a, (.dmark+2)  
495d 32 6a fe			ld (debug_mark+2),a  
4960 18 03			jr .pastdmark  
4962 ..			.dmark: db "RIG"  
4965 f1			.pastdmark: pop af  
4966			endm  
# End of macro DMARK
4966						CALLMONITOR 
4966 cd 6c fe			call debug_vector  
4969				endm  
# End of macro CALLMONITOR
4969					endif 
4969			 
4969					NEXTW 
4969 c3 b2 24			jp macro_next 
496c				endm 
# End of macro NEXTW
496c			 
496c			 
496c			.STR2NUM: 
496c				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
496c 48				db WORD_SYS_CORE+52             
496d f8 49			dw .NUM2STR            
496f 08				db 7 + 1 
4970 .. 00			db "STR2NUM",0              
4978				endm 
# End of macro CWHEAD
4978			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4978			 
4978			 
4978			; TODO STR type check to do 
4978					if DEBUG_FORTH_WORDS_KEY 
4978						DMARK "S2N" 
4978 f5				push af  
4979 3a 8d 49			ld a, (.dmark)  
497c 32 68 fe			ld (debug_mark),a  
497f 3a 8e 49			ld a, (.dmark+1)  
4982 32 69 fe			ld (debug_mark+1),a  
4985 3a 8f 49			ld a, (.dmark+2)  
4988 32 6a fe			ld (debug_mark+2),a  
498b 18 03			jr .pastdmark  
498d ..			.dmark: db "S2N"  
4990 f1			.pastdmark: pop af  
4991			endm  
# End of macro DMARK
4991						CALLMONITOR 
4991 cd 6c fe			call debug_vector  
4994				endm  
# End of macro CALLMONITOR
4994					endif 
4994			 
4994					;FORTH_DSP 
4994					FORTH_DSP_VALUE 
4994 cd e5 22			call macro_forth_dsp_value 
4997				endm 
# End of macro FORTH_DSP_VALUE
4997					;inc hl 
4997			 
4997 eb					ex de, hl 
4998					if DEBUG_FORTH_WORDS 
4998						DMARK "S2a" 
4998 f5				push af  
4999 3a ad 49			ld a, (.dmark)  
499c 32 68 fe			ld (debug_mark),a  
499f 3a ae 49			ld a, (.dmark+1)  
49a2 32 69 fe			ld (debug_mark+1),a  
49a5 3a af 49			ld a, (.dmark+2)  
49a8 32 6a fe			ld (debug_mark+2),a  
49ab 18 03			jr .pastdmark  
49ad ..			.dmark: db "S2a"  
49b0 f1			.pastdmark: pop af  
49b1			endm  
# End of macro DMARK
49b1						CALLMONITOR 
49b1 cd 6c fe			call debug_vector  
49b4				endm  
# End of macro CALLMONITOR
49b4					endif 
49b4 cd c4 13				call string_to_uint16 
49b7			 
49b7					if DEBUG_FORTH_WORDS 
49b7						DMARK "S2b" 
49b7 f5				push af  
49b8 3a cc 49			ld a, (.dmark)  
49bb 32 68 fe			ld (debug_mark),a  
49be 3a cd 49			ld a, (.dmark+1)  
49c1 32 69 fe			ld (debug_mark+1),a  
49c4 3a ce 49			ld a, (.dmark+2)  
49c7 32 6a fe			ld (debug_mark+2),a  
49ca 18 03			jr .pastdmark  
49cc ..			.dmark: db "S2b"  
49cf f1			.pastdmark: pop af  
49d0			endm  
# End of macro DMARK
49d0						CALLMONITOR 
49d0 cd 6c fe			call debug_vector  
49d3				endm  
# End of macro CALLMONITOR
49d3					endif 
49d3			;		push hl 
49d3					FORTH_DSP_POP 
49d3 cd b4 23			call macro_forth_dsp_pop 
49d6				endm 
# End of macro FORTH_DSP_POP
49d6			;		pop hl 
49d6					 
49d6					if DEBUG_FORTH_WORDS 
49d6						DMARK "S2b" 
49d6 f5				push af  
49d7 3a eb 49			ld a, (.dmark)  
49da 32 68 fe			ld (debug_mark),a  
49dd 3a ec 49			ld a, (.dmark+1)  
49e0 32 69 fe			ld (debug_mark+1),a  
49e3 3a ed 49			ld a, (.dmark+2)  
49e6 32 6a fe			ld (debug_mark+2),a  
49e9 18 03			jr .pastdmark  
49eb ..			.dmark: db "S2b"  
49ee f1			.pastdmark: pop af  
49ef			endm  
# End of macro DMARK
49ef						CALLMONITOR 
49ef cd 6c fe			call debug_vector  
49f2				endm  
# End of macro CALLMONITOR
49f2					endif 
49f2 cd 05 21				call forth_push_numhl	 
49f5			 
49f5				 
49f5				       NEXTW 
49f5 c3 b2 24			jp macro_next 
49f8				endm 
# End of macro NEXTW
49f8			.NUM2STR: 
49f8				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
49f8 48				db WORD_SYS_CORE+52             
49f9 07 4a			dw .CONCAT            
49fb 08				db 7 + 1 
49fc .. 00			db "NUM2STR",0              
4a04				endm 
# End of macro CWHEAD
4a04			; | NUM2STR ( n -- s ) Convert a number on TOS to string | NOT DOING 
4a04			 
4a04			;		; malloc a string to target 
4a04			;		ld hl, 10     ; TODO max string size should be fine 
4a04			;		call malloc 
4a04			;		push hl    ; save malloc location 
4a04			; 
4a04			; 
4a04			;; TODO check int type 
4a04			;		FORTH_DSP_VALUEHL 
4a04			;		ld a, l 
4a04			;		call DispAToASCII   
4a04			;;TODO need to chage above call to dump into string 
4a04			; 
4a04			; 
4a04			 
4a04				       NEXTW 
4a04 c3 b2 24			jp macro_next 
4a07				endm 
# End of macro NEXTW
4a07			 
4a07			.CONCAT: 
4a07				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4a07 48				db WORD_SYS_CORE+52             
4a08 ba 4a			dw .FIND            
4a0a 07				db 6 + 1 
4a0b .. 00			db "CONCAT",0              
4a12				endm 
# End of macro CWHEAD
4a12			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4a12			 
4a12			; TODO check string type 
4a12			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4a12			 
4a12					if DEBUG_FORTH_WORDS_KEY 
4a12						DMARK "CON" 
4a12 f5				push af  
4a13 3a 27 4a			ld a, (.dmark)  
4a16 32 68 fe			ld (debug_mark),a  
4a19 3a 28 4a			ld a, (.dmark+1)  
4a1c 32 69 fe			ld (debug_mark+1),a  
4a1f 3a 29 4a			ld a, (.dmark+2)  
4a22 32 6a fe			ld (debug_mark+2),a  
4a25 18 03			jr .pastdmark  
4a27 ..			.dmark: db "CON"  
4a2a f1			.pastdmark: pop af  
4a2b			endm  
# End of macro DMARK
4a2b						CALLMONITOR 
4a2b cd 6c fe			call debug_vector  
4a2e				endm  
# End of macro CALLMONITOR
4a2e					endif 
4a2e			 
4a2e			 
4a2e					FORTH_DSP_VALUE 
4a2e cd e5 22			call macro_forth_dsp_value 
4a31				endm 
# End of macro FORTH_DSP_VALUE
4a31 e5					push hl   ; s2 
4a32			 
4a32					FORTH_DSP_POP 
4a32 cd b4 23			call macro_forth_dsp_pop 
4a35				endm 
# End of macro FORTH_DSP_POP
4a35			 
4a35					FORTH_DSP_VALUE 
4a35 cd e5 22			call macro_forth_dsp_value 
4a38				endm 
# End of macro FORTH_DSP_VALUE
4a38			 
4a38 e5					push hl   ; s1 
4a39			 
4a39					FORTH_DSP_POP 
4a39 cd b4 23			call macro_forth_dsp_pop 
4a3c				endm 
# End of macro FORTH_DSP_POP
4a3c					 
4a3c			 
4a3c					; copy s1 
4a3c			 
4a3c				 
4a3c					; save ptr 
4a3c e1					pop hl  
4a3d e5					push hl 
4a3e 3e 00				ld a, 0 
4a40 cd 38 14				call strlent 
4a43					;inc hl    ; zer0 
4a43 06 00				ld b, 0 
4a45 4d					ld c, l 
4a46 e1					pop hl		 
4a47 11 be f1				ld de, scratch	 
4a4a					if DEBUG_FORTH_WORDS 
4a4a						DMARK "CO1" 
4a4a f5				push af  
4a4b 3a 5f 4a			ld a, (.dmark)  
4a4e 32 68 fe			ld (debug_mark),a  
4a51 3a 60 4a			ld a, (.dmark+1)  
4a54 32 69 fe			ld (debug_mark+1),a  
4a57 3a 61 4a			ld a, (.dmark+2)  
4a5a 32 6a fe			ld (debug_mark+2),a  
4a5d 18 03			jr .pastdmark  
4a5f ..			.dmark: db "CO1"  
4a62 f1			.pastdmark: pop af  
4a63			endm  
# End of macro DMARK
4a63						CALLMONITOR 
4a63 cd 6c fe			call debug_vector  
4a66				endm  
# End of macro CALLMONITOR
4a66					endif 
4a66 ed b0				ldir 
4a68			 
4a68 e1					pop hl 
4a69 e5					push hl 
4a6a d5					push de 
4a6b			 
4a6b			 
4a6b 3e 00				ld a, 0 
4a6d cd 38 14				call strlent 
4a70 23					inc hl    ; zer0 
4a71 23					inc hl 
4a72 06 00				ld b, 0 
4a74 4d					ld c, l 
4a75 d1					pop de 
4a76 e1					pop hl		 
4a77					if DEBUG_FORTH_WORDS 
4a77						DMARK "CO2" 
4a77 f5				push af  
4a78 3a 8c 4a			ld a, (.dmark)  
4a7b 32 68 fe			ld (debug_mark),a  
4a7e 3a 8d 4a			ld a, (.dmark+1)  
4a81 32 69 fe			ld (debug_mark+1),a  
4a84 3a 8e 4a			ld a, (.dmark+2)  
4a87 32 6a fe			ld (debug_mark+2),a  
4a8a 18 03			jr .pastdmark  
4a8c ..			.dmark: db "CO2"  
4a8f f1			.pastdmark: pop af  
4a90			endm  
# End of macro DMARK
4a90						CALLMONITOR 
4a90 cd 6c fe			call debug_vector  
4a93				endm  
# End of macro CALLMONITOR
4a93					endif 
4a93 ed b0				ldir 
4a95			 
4a95			 
4a95			 
4a95 21 be f1				ld hl, scratch 
4a98					if DEBUG_FORTH_WORDS 
4a98						DMARK "CO5" 
4a98 f5				push af  
4a99 3a ad 4a			ld a, (.dmark)  
4a9c 32 68 fe			ld (debug_mark),a  
4a9f 3a ae 4a			ld a, (.dmark+1)  
4aa2 32 69 fe			ld (debug_mark+1),a  
4aa5 3a af 4a			ld a, (.dmark+2)  
4aa8 32 6a fe			ld (debug_mark+2),a  
4aab 18 03			jr .pastdmark  
4aad ..			.dmark: db "CO5"  
4ab0 f1			.pastdmark: pop af  
4ab1			endm  
# End of macro DMARK
4ab1						CALLMONITOR 
4ab1 cd 6c fe			call debug_vector  
4ab4				endm  
# End of macro CALLMONITOR
4ab4					endif 
4ab4			 
4ab4 cd 73 21				call forth_push_str 
4ab7			 
4ab7			 
4ab7			 
4ab7			 
4ab7				       NEXTW 
4ab7 c3 b2 24			jp macro_next 
4aba				endm 
# End of macro NEXTW
4aba			 
4aba			 
4aba			.FIND: 
4aba				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4aba 4b				db WORD_SYS_CORE+55             
4abb 78 4b			dw .LEN            
4abd 05				db 4 + 1 
4abe .. 00			db "FIND",0              
4ac3				endm 
# End of macro CWHEAD
4ac3			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4ac3			 
4ac3					if DEBUG_FORTH_WORDS_KEY 
4ac3						DMARK "FND" 
4ac3 f5				push af  
4ac4 3a d8 4a			ld a, (.dmark)  
4ac7 32 68 fe			ld (debug_mark),a  
4aca 3a d9 4a			ld a, (.dmark+1)  
4acd 32 69 fe			ld (debug_mark+1),a  
4ad0 3a da 4a			ld a, (.dmark+2)  
4ad3 32 6a fe			ld (debug_mark+2),a  
4ad6 18 03			jr .pastdmark  
4ad8 ..			.dmark: db "FND"  
4adb f1			.pastdmark: pop af  
4adc			endm  
# End of macro DMARK
4adc						CALLMONITOR 
4adc cd 6c fe			call debug_vector  
4adf				endm  
# End of macro CALLMONITOR
4adf					endif 
4adf			 
4adf			; TODO check string type 
4adf					FORTH_DSP_VALUE 
4adf cd e5 22			call macro_forth_dsp_value 
4ae2				endm 
# End of macro FORTH_DSP_VALUE
4ae2			 
4ae2 e5					push hl    
4ae3 7e					ld a,(hl)    ; char to find   
4ae4			; TODO change char to substr 
4ae4			 
4ae4 f5					push af 
4ae5					 
4ae5			 
4ae5			 
4ae5					if DEBUG_FORTH_WORDS 
4ae5						DMARK "FN1" 
4ae5 f5				push af  
4ae6 3a fa 4a			ld a, (.dmark)  
4ae9 32 68 fe			ld (debug_mark),a  
4aec 3a fb 4a			ld a, (.dmark+1)  
4aef 32 69 fe			ld (debug_mark+1),a  
4af2 3a fc 4a			ld a, (.dmark+2)  
4af5 32 6a fe			ld (debug_mark+2),a  
4af8 18 03			jr .pastdmark  
4afa ..			.dmark: db "FN1"  
4afd f1			.pastdmark: pop af  
4afe			endm  
# End of macro DMARK
4afe						CALLMONITOR 
4afe cd 6c fe			call debug_vector  
4b01				endm  
# End of macro CALLMONITOR
4b01					endif 
4b01			 
4b01					FORTH_DSP_POP 
4b01 cd b4 23			call macro_forth_dsp_pop 
4b04				endm 
# End of macro FORTH_DSP_POP
4b04			 
4b04					; string to search 
4b04			 
4b04					FORTH_DSP_VALUE 
4b04 cd e5 22			call macro_forth_dsp_value 
4b07				endm 
# End of macro FORTH_DSP_VALUE
4b07			 
4b07 d1					pop de  ; d is char to find  
4b08			 
4b08					if DEBUG_FORTH_WORDS 
4b08						DMARK "FN2" 
4b08 f5				push af  
4b09 3a 1d 4b			ld a, (.dmark)  
4b0c 32 68 fe			ld (debug_mark),a  
4b0f 3a 1e 4b			ld a, (.dmark+1)  
4b12 32 69 fe			ld (debug_mark+1),a  
4b15 3a 1f 4b			ld a, (.dmark+2)  
4b18 32 6a fe			ld (debug_mark+2),a  
4b1b 18 03			jr .pastdmark  
4b1d ..			.dmark: db "FN2"  
4b20 f1			.pastdmark: pop af  
4b21			endm  
# End of macro DMARK
4b21						CALLMONITOR 
4b21 cd 6c fe			call debug_vector  
4b24				endm  
# End of macro CALLMONITOR
4b24					endif 
4b24					 
4b24 01 00 00				ld bc, 0 
4b27 7e			.findchar:      ld a,(hl) 
4b28 fe 00				cp 0   		 
4b2a 28 27				jr z, .finddone     
4b2c ba					cp d 
4b2d 28 20				jr z, .foundchar 
4b2f 03					inc bc 
4b30 23					inc hl 
4b31					if DEBUG_FORTH_WORDS 
4b31						DMARK "FN3" 
4b31 f5				push af  
4b32 3a 46 4b			ld a, (.dmark)  
4b35 32 68 fe			ld (debug_mark),a  
4b38 3a 47 4b			ld a, (.dmark+1)  
4b3b 32 69 fe			ld (debug_mark+1),a  
4b3e 3a 48 4b			ld a, (.dmark+2)  
4b41 32 6a fe			ld (debug_mark+2),a  
4b44 18 03			jr .pastdmark  
4b46 ..			.dmark: db "FN3"  
4b49 f1			.pastdmark: pop af  
4b4a			endm  
# End of macro DMARK
4b4a						CALLMONITOR 
4b4a cd 6c fe			call debug_vector  
4b4d				endm  
# End of macro CALLMONITOR
4b4d					endif 
4b4d 18 d8				jr .findchar 
4b4f			 
4b4f			 
4b4f c5			.foundchar:	push bc 
4b50 e1					pop hl 
4b51 18 03				jr .findexit 
4b53			 
4b53			 
4b53							 
4b53			 
4b53			.finddone:     ; got to end of string with no find 
4b53 21 00 00				ld hl, 0 
4b56			.findexit: 
4b56			 
4b56					if DEBUG_FORTH_WORDS 
4b56						DMARK "FNd" 
4b56 f5				push af  
4b57 3a 6b 4b			ld a, (.dmark)  
4b5a 32 68 fe			ld (debug_mark),a  
4b5d 3a 6c 4b			ld a, (.dmark+1)  
4b60 32 69 fe			ld (debug_mark+1),a  
4b63 3a 6d 4b			ld a, (.dmark+2)  
4b66 32 6a fe			ld (debug_mark+2),a  
4b69 18 03			jr .pastdmark  
4b6b ..			.dmark: db "FNd"  
4b6e f1			.pastdmark: pop af  
4b6f			endm  
# End of macro DMARK
4b6f						CALLMONITOR 
4b6f cd 6c fe			call debug_vector  
4b72				endm  
# End of macro CALLMONITOR
4b72					endif 
4b72 cd 05 21			call forth_push_numhl 
4b75			 
4b75				       NEXTW 
4b75 c3 b2 24			jp macro_next 
4b78				endm 
# End of macro NEXTW
4b78			 
4b78			.LEN: 
4b78				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4b78 4c				db WORD_SYS_CORE+56             
4b79 e2 4b			dw .ASC            
4b7b 06				db 5 + 1 
4b7c .. 00			db "COUNT",0              
4b82				endm 
# End of macro CWHEAD
4b82			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4b82			 
4b82					if DEBUG_FORTH_WORDS_KEY 
4b82						DMARK "CNT" 
4b82 f5				push af  
4b83 3a 97 4b			ld a, (.dmark)  
4b86 32 68 fe			ld (debug_mark),a  
4b89 3a 98 4b			ld a, (.dmark+1)  
4b8c 32 69 fe			ld (debug_mark+1),a  
4b8f 3a 99 4b			ld a, (.dmark+2)  
4b92 32 6a fe			ld (debug_mark+2),a  
4b95 18 03			jr .pastdmark  
4b97 ..			.dmark: db "CNT"  
4b9a f1			.pastdmark: pop af  
4b9b			endm  
# End of macro DMARK
4b9b						CALLMONITOR 
4b9b cd 6c fe			call debug_vector  
4b9e				endm  
# End of macro CALLMONITOR
4b9e					endif 
4b9e			; TODO check string type 
4b9e					FORTH_DSP_VALUE 
4b9e cd e5 22			call macro_forth_dsp_value 
4ba1				endm 
# End of macro FORTH_DSP_VALUE
4ba1			 
4ba1			 
4ba1					if DEBUG_FORTH_WORDS 
4ba1						DMARK "CN?" 
4ba1 f5				push af  
4ba2 3a b6 4b			ld a, (.dmark)  
4ba5 32 68 fe			ld (debug_mark),a  
4ba8 3a b7 4b			ld a, (.dmark+1)  
4bab 32 69 fe			ld (debug_mark+1),a  
4bae 3a b8 4b			ld a, (.dmark+2)  
4bb1 32 6a fe			ld (debug_mark+2),a  
4bb4 18 03			jr .pastdmark  
4bb6 ..			.dmark: db "CN?"  
4bb9 f1			.pastdmark: pop af  
4bba			endm  
# End of macro DMARK
4bba						CALLMONITOR 
4bba cd 6c fe			call debug_vector  
4bbd				endm  
# End of macro CALLMONITOR
4bbd					endif 
4bbd cd 2d 14				call strlenz 
4bc0					if DEBUG_FORTH_WORDS 
4bc0						DMARK "CNl" 
4bc0 f5				push af  
4bc1 3a d5 4b			ld a, (.dmark)  
4bc4 32 68 fe			ld (debug_mark),a  
4bc7 3a d6 4b			ld a, (.dmark+1)  
4bca 32 69 fe			ld (debug_mark+1),a  
4bcd 3a d7 4b			ld a, (.dmark+2)  
4bd0 32 6a fe			ld (debug_mark+2),a  
4bd3 18 03			jr .pastdmark  
4bd5 ..			.dmark: db "CNl"  
4bd8 f1			.pastdmark: pop af  
4bd9			endm  
# End of macro DMARK
4bd9						CALLMONITOR 
4bd9 cd 6c fe			call debug_vector  
4bdc				endm  
# End of macro CALLMONITOR
4bdc					endif 
4bdc			 
4bdc cd 05 21				call forth_push_numhl 
4bdf			 
4bdf			 
4bdf			 
4bdf				       NEXTW 
4bdf c3 b2 24			jp macro_next 
4be2				endm 
# End of macro NEXTW
4be2			.ASC: 
4be2				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4be2 4d				db WORD_SYS_CORE+57             
4be3 50 4c			dw .CHR            
4be5 04				db 3 + 1 
4be6 .. 00			db "ASC",0              
4bea				endm 
# End of macro CWHEAD
4bea			; | ASC ( u -- n ) Get the ascii value of the first character of the string on the stack | DONE 
4bea					if DEBUG_FORTH_WORDS_KEY 
4bea						DMARK "ASC" 
4bea f5				push af  
4beb 3a ff 4b			ld a, (.dmark)  
4bee 32 68 fe			ld (debug_mark),a  
4bf1 3a 00 4c			ld a, (.dmark+1)  
4bf4 32 69 fe			ld (debug_mark+1),a  
4bf7 3a 01 4c			ld a, (.dmark+2)  
4bfa 32 6a fe			ld (debug_mark+2),a  
4bfd 18 03			jr .pastdmark  
4bff ..			.dmark: db "ASC"  
4c02 f1			.pastdmark: pop af  
4c03			endm  
# End of macro DMARK
4c03						CALLMONITOR 
4c03 cd 6c fe			call debug_vector  
4c06				endm  
# End of macro CALLMONITOR
4c06					endif 
4c06					FORTH_DSP_VALUE 
4c06 cd e5 22			call macro_forth_dsp_value 
4c09				endm 
# End of macro FORTH_DSP_VALUE
4c09					;v5 FORTH_DSP_VALUE 
4c09			;		inc hl      ; now at start of numeric as string 
4c09			 
4c09 e5					push hl 
4c0a			 
4c0a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c0a cd b4 23			call macro_forth_dsp_pop 
4c0d				endm 
# End of macro FORTH_DSP_POP
4c0d			 
4c0d e1					pop hl 
4c0e			 
4c0e					if DEBUG_FORTH_WORDS 
4c0e						DMARK "AS1" 
4c0e f5				push af  
4c0f 3a 23 4c			ld a, (.dmark)  
4c12 32 68 fe			ld (debug_mark),a  
4c15 3a 24 4c			ld a, (.dmark+1)  
4c18 32 69 fe			ld (debug_mark+1),a  
4c1b 3a 25 4c			ld a, (.dmark+2)  
4c1e 32 6a fe			ld (debug_mark+2),a  
4c21 18 03			jr .pastdmark  
4c23 ..			.dmark: db "AS1"  
4c26 f1			.pastdmark: pop af  
4c27			endm  
# End of macro DMARK
4c27						CALLMONITOR 
4c27 cd 6c fe			call debug_vector  
4c2a				endm  
# End of macro CALLMONITOR
4c2a					endif 
4c2a					; push the content of a onto the stack as a value 
4c2a			 
4c2a 7e					ld a,(hl)   ; get char 
4c2b 26 00				ld h,0 
4c2d 6f					ld l,a 
4c2e					if DEBUG_FORTH_WORDS 
4c2e						DMARK "AS2" 
4c2e f5				push af  
4c2f 3a 43 4c			ld a, (.dmark)  
4c32 32 68 fe			ld (debug_mark),a  
4c35 3a 44 4c			ld a, (.dmark+1)  
4c38 32 69 fe			ld (debug_mark+1),a  
4c3b 3a 45 4c			ld a, (.dmark+2)  
4c3e 32 6a fe			ld (debug_mark+2),a  
4c41 18 03			jr .pastdmark  
4c43 ..			.dmark: db "AS2"  
4c46 f1			.pastdmark: pop af  
4c47			endm  
# End of macro DMARK
4c47						CALLMONITOR 
4c47 cd 6c fe			call debug_vector  
4c4a				endm  
# End of macro CALLMONITOR
4c4a					endif 
4c4a cd 05 21				call forth_push_numhl 
4c4d			 
4c4d				       NEXTW 
4c4d c3 b2 24			jp macro_next 
4c50				endm 
# End of macro NEXTW
4c50			 
4c50			.CHR: 
4c50				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4c50 4d				db WORD_SYS_CORE+57             
4c51 8c 4c			dw .ENDSTR            
4c53 04				db 3 + 1 
4c54 .. 00			db "CHR",0              
4c58				endm 
# End of macro CWHEAD
4c58			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4c58					if DEBUG_FORTH_WORDS_KEY 
4c58						DMARK "CHR" 
4c58 f5				push af  
4c59 3a 6d 4c			ld a, (.dmark)  
4c5c 32 68 fe			ld (debug_mark),a  
4c5f 3a 6e 4c			ld a, (.dmark+1)  
4c62 32 69 fe			ld (debug_mark+1),a  
4c65 3a 6f 4c			ld a, (.dmark+2)  
4c68 32 6a fe			ld (debug_mark+2),a  
4c6b 18 03			jr .pastdmark  
4c6d ..			.dmark: db "CHR"  
4c70 f1			.pastdmark: pop af  
4c71			endm  
# End of macro DMARK
4c71						CALLMONITOR 
4c71 cd 6c fe			call debug_vector  
4c74				endm  
# End of macro CALLMONITOR
4c74					endif 
4c74					FORTH_DSP_VALUEHL 
4c74 cd fc 22			call macro_dsp_valuehl 
4c77				endm 
# End of macro FORTH_DSP_VALUEHL
4c77			 
4c77					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c77 cd b4 23			call macro_forth_dsp_pop 
4c7a				endm 
# End of macro FORTH_DSP_POP
4c7a			 
4c7a					; save asci byte as a zero term string and push string 
4c7a			 
4c7a 7d					ld a,l 
4c7b 32 be f1				ld (scratch), a 
4c7e			 
4c7e 3e 00				ld a, 0 
4c80 32 bf f1				ld (scratch+1), a 
4c83			 
4c83 21 be f1				ld hl, scratch 
4c86 cd 73 21				call forth_push_str 
4c89			 
4c89			 
4c89				       NEXTW 
4c89 c3 b2 24			jp macro_next 
4c8c				endm 
# End of macro NEXTW
4c8c			 
4c8c			 
4c8c			 
4c8c			 
4c8c			.ENDSTR: 
4c8c			; eof 
4c8c			 
# End of file forth_words_str.asm
4c8c			include "forth_words_key.asm" 
4c8c			 
4c8c			; | ## Keyboard Words 
4c8c			 
4c8c			.KEY: 
4c8c				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
4c8c 3e				db WORD_SYS_CORE+42             
4c8d bc 4c			dw .WAITK            
4c8f 04				db 3 + 1 
4c90 .. 00			db "KEY",0              
4c94				endm 
# End of macro CWHEAD
4c94			; | KEY ( -- w f ) Scan for keypress but do not wait true if next item on stack is key press | TODO 
4c94			 
4c94					if DEBUG_FORTH_WORDS_KEY 
4c94						DMARK "KEY" 
4c94 f5				push af  
4c95 3a a9 4c			ld a, (.dmark)  
4c98 32 68 fe			ld (debug_mark),a  
4c9b 3a aa 4c			ld a, (.dmark+1)  
4c9e 32 69 fe			ld (debug_mark+1),a  
4ca1 3a ab 4c			ld a, (.dmark+2)  
4ca4 32 6a fe			ld (debug_mark+2),a  
4ca7 18 03			jr .pastdmark  
4ca9 ..			.dmark: db "KEY"  
4cac f1			.pastdmark: pop af  
4cad			endm  
# End of macro DMARK
4cad						CALLMONITOR 
4cad cd 6c fe			call debug_vector  
4cb0				endm  
# End of macro CALLMONITOR
4cb0					endif 
4cb0			; TODO currently waits 
4cb0 cd 18 7a				call cin 
4cb3					;call cin_wait 
4cb3 6f					ld l, a 
4cb4 26 00				ld h, 0 
4cb6 cd 05 21				call forth_push_numhl 
4cb9					NEXTW 
4cb9 c3 b2 24			jp macro_next 
4cbc				endm 
# End of macro NEXTW
4cbc			.WAITK: 
4cbc				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4cbc 3f				db WORD_SYS_CORE+43             
4cbd ee 4c			dw .ACCEPT            
4cbf 06				db 5 + 1 
4cc0 .. 00			db "WAITK",0              
4cc6				endm 
# End of macro CWHEAD
4cc6			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4cc6					if DEBUG_FORTH_WORDS_KEY 
4cc6						DMARK "WAI" 
4cc6 f5				push af  
4cc7 3a db 4c			ld a, (.dmark)  
4cca 32 68 fe			ld (debug_mark),a  
4ccd 3a dc 4c			ld a, (.dmark+1)  
4cd0 32 69 fe			ld (debug_mark+1),a  
4cd3 3a dd 4c			ld a, (.dmark+2)  
4cd6 32 6a fe			ld (debug_mark+2),a  
4cd9 18 03			jr .pastdmark  
4cdb ..			.dmark: db "WAI"  
4cde f1			.pastdmark: pop af  
4cdf			endm  
# End of macro DMARK
4cdf						CALLMONITOR 
4cdf cd 6c fe			call debug_vector  
4ce2				endm  
# End of macro CALLMONITOR
4ce2					endif 
4ce2 cd 07 7a				call cin_wait 
4ce5 6f					ld l, a 
4ce6 26 00				ld h, 0 
4ce8 cd 05 21				call forth_push_numhl 
4ceb					NEXTW 
4ceb c3 b2 24			jp macro_next 
4cee				endm 
# End of macro NEXTW
4cee			.ACCEPT: 
4cee				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4cee 40				db WORD_SYS_CORE+44             
4cef 4c 4d			dw .EDIT            
4cf1 07				db 6 + 1 
4cf2 .. 00			db "ACCEPT",0              
4cf9				endm 
# End of macro CWHEAD
4cf9			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4cf9					; TODO crashes on push 
4cf9					if DEBUG_FORTH_WORDS_KEY 
4cf9						DMARK "ACC" 
4cf9 f5				push af  
4cfa 3a 0e 4d			ld a, (.dmark)  
4cfd 32 68 fe			ld (debug_mark),a  
4d00 3a 0f 4d			ld a, (.dmark+1)  
4d03 32 69 fe			ld (debug_mark+1),a  
4d06 3a 10 4d			ld a, (.dmark+2)  
4d09 32 6a fe			ld (debug_mark+2),a  
4d0c 18 03			jr .pastdmark  
4d0e ..			.dmark: db "ACC"  
4d11 f1			.pastdmark: pop af  
4d12			endm  
# End of macro DMARK
4d12						CALLMONITOR 
4d12 cd 6c fe			call debug_vector  
4d15				endm  
# End of macro CALLMONITOR
4d15					endif 
4d15 21 bc f3				ld hl, os_input 
4d18 3e 00				ld a, 0 
4d1a 77					ld (hl),a 
4d1b 3a 5b fa				ld a,(f_cursor_ptr) 
4d1e 16 64				ld d, 100 
4d20 0e 00				ld c, 0 
4d22 1e 28				ld e, 40 
4d24 cd fc 0f				call input_str 
4d27					; TODO perhaps do a type check and wrap in quotes if not a number 
4d27 21 bc f3				ld hl, os_input 
4d2a					if DEBUG_FORTH_WORDS 
4d2a						DMARK "AC1" 
4d2a f5				push af  
4d2b 3a 3f 4d			ld a, (.dmark)  
4d2e 32 68 fe			ld (debug_mark),a  
4d31 3a 40 4d			ld a, (.dmark+1)  
4d34 32 69 fe			ld (debug_mark+1),a  
4d37 3a 41 4d			ld a, (.dmark+2)  
4d3a 32 6a fe			ld (debug_mark+2),a  
4d3d 18 03			jr .pastdmark  
4d3f ..			.dmark: db "AC1"  
4d42 f1			.pastdmark: pop af  
4d43			endm  
# End of macro DMARK
4d43						CALLMONITOR 
4d43 cd 6c fe			call debug_vector  
4d46				endm  
# End of macro CALLMONITOR
4d46					endif 
4d46 cd 73 21				call forth_push_str 
4d49					NEXTW 
4d49 c3 b2 24			jp macro_next 
4d4c				endm 
# End of macro NEXTW
4d4c			 
4d4c			.EDIT: 
4d4c				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4d4c 40				db WORD_SYS_CORE+44             
4d4d ee 4d			dw .DEDIT            
4d4f 05				db 4 + 1 
4d50 .. 00			db "EDIT",0              
4d55				endm 
# End of macro CWHEAD
4d55			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4d55			 
4d55					; TODO does not copy from stack 
4d55					if DEBUG_FORTH_WORDS_KEY 
4d55						DMARK "EDT" 
4d55 f5				push af  
4d56 3a 6a 4d			ld a, (.dmark)  
4d59 32 68 fe			ld (debug_mark),a  
4d5c 3a 6b 4d			ld a, (.dmark+1)  
4d5f 32 69 fe			ld (debug_mark+1),a  
4d62 3a 6c 4d			ld a, (.dmark+2)  
4d65 32 6a fe			ld (debug_mark+2),a  
4d68 18 03			jr .pastdmark  
4d6a ..			.dmark: db "EDT"  
4d6d f1			.pastdmark: pop af  
4d6e			endm  
# End of macro DMARK
4d6e						CALLMONITOR 
4d6e cd 6c fe			call debug_vector  
4d71				endm  
# End of macro CALLMONITOR
4d71					endif 
4d71			 
4d71					;FORTH_DSP 
4d71					FORTH_DSP_VALUEHL 
4d71 cd fc 22			call macro_dsp_valuehl 
4d74				endm 
# End of macro FORTH_DSP_VALUEHL
4d74			;		inc hl    ; TODO do type check 
4d74			 
4d74			;		call get_word_hl 
4d74 e5					push hl 
4d75					if DEBUG_FORTH_WORDS 
4d75						DMARK "EDp" 
4d75 f5				push af  
4d76 3a 8a 4d			ld a, (.dmark)  
4d79 32 68 fe			ld (debug_mark),a  
4d7c 3a 8b 4d			ld a, (.dmark+1)  
4d7f 32 69 fe			ld (debug_mark+1),a  
4d82 3a 8c 4d			ld a, (.dmark+2)  
4d85 32 6a fe			ld (debug_mark+2),a  
4d88 18 03			jr .pastdmark  
4d8a ..			.dmark: db "EDp"  
4d8d f1			.pastdmark: pop af  
4d8e			endm  
# End of macro DMARK
4d8e						CALLMONITOR 
4d8e cd 6c fe			call debug_vector  
4d91				endm  
# End of macro CALLMONITOR
4d91					endif 
4d91				;	ld a, 0 
4d91 cd 2d 14				call strlenz 
4d94 23					inc hl 
4d95			 
4d95 06 00				ld b, 0 
4d97 4d					ld c, l 
4d98			 
4d98 e1					pop hl 
4d99 11 bc f3				ld de, os_input 
4d9c					if DEBUG_FORTH_WORDS_KEY 
4d9c						DMARK "EDc" 
4d9c f5				push af  
4d9d 3a b1 4d			ld a, (.dmark)  
4da0 32 68 fe			ld (debug_mark),a  
4da3 3a b2 4d			ld a, (.dmark+1)  
4da6 32 69 fe			ld (debug_mark+1),a  
4da9 3a b3 4d			ld a, (.dmark+2)  
4dac 32 6a fe			ld (debug_mark+2),a  
4daf 18 03			jr .pastdmark  
4db1 ..			.dmark: db "EDc"  
4db4 f1			.pastdmark: pop af  
4db5			endm  
# End of macro DMARK
4db5						CALLMONITOR 
4db5 cd 6c fe			call debug_vector  
4db8				endm  
# End of macro CALLMONITOR
4db8					endif 
4db8 ed b0				ldir 
4dba			 
4dba			 
4dba 21 bc f3				ld hl, os_input 
4dbd					;ld a, 0 
4dbd					;ld (hl),a 
4dbd 3a 5b fa				ld a,(f_cursor_ptr) 
4dc0 16 64				ld d, 100 
4dc2 0e 00				ld c, 0 
4dc4 1e 28				ld e, 40 
4dc6 cd fc 0f				call input_str 
4dc9					; TODO perhaps do a type check and wrap in quotes if not a number 
4dc9 21 bc f3				ld hl, os_input 
4dcc					if DEBUG_FORTH_WORDS 
4dcc						DMARK "ED1" 
4dcc f5				push af  
4dcd 3a e1 4d			ld a, (.dmark)  
4dd0 32 68 fe			ld (debug_mark),a  
4dd3 3a e2 4d			ld a, (.dmark+1)  
4dd6 32 69 fe			ld (debug_mark+1),a  
4dd9 3a e3 4d			ld a, (.dmark+2)  
4ddc 32 6a fe			ld (debug_mark+2),a  
4ddf 18 03			jr .pastdmark  
4de1 ..			.dmark: db "ED1"  
4de4 f1			.pastdmark: pop af  
4de5			endm  
# End of macro DMARK
4de5						CALLMONITOR 
4de5 cd 6c fe			call debug_vector  
4de8				endm  
# End of macro CALLMONITOR
4de8					endif 
4de8 cd 73 21				call forth_push_str 
4deb					NEXTW 
4deb c3 b2 24			jp macro_next 
4dee				endm 
# End of macro NEXTW
4dee			 
4dee			.DEDIT: 
4dee				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4dee 40				db WORD_SYS_CORE+44             
4def 50 4e			dw .ENDKEY            
4df1 06				db 5 + 1 
4df2 .. 00			db "DEDIT",0              
4df8				endm 
# End of macro CWHEAD
4df8			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
4df8			 
4df8					; TODO does not copy from stack 
4df8					if DEBUG_FORTH_WORDS_KEY 
4df8						DMARK "DED" 
4df8 f5				push af  
4df9 3a 0d 4e			ld a, (.dmark)  
4dfc 32 68 fe			ld (debug_mark),a  
4dff 3a 0e 4e			ld a, (.dmark+1)  
4e02 32 69 fe			ld (debug_mark+1),a  
4e05 3a 0f 4e			ld a, (.dmark+2)  
4e08 32 6a fe			ld (debug_mark+2),a  
4e0b 18 03			jr .pastdmark  
4e0d ..			.dmark: db "DED"  
4e10 f1			.pastdmark: pop af  
4e11			endm  
# End of macro DMARK
4e11						CALLMONITOR 
4e11 cd 6c fe			call debug_vector  
4e14				endm  
# End of macro CALLMONITOR
4e14					endif 
4e14			 
4e14					;FORTH_DSP 
4e14					FORTH_DSP_VALUEHL 
4e14 cd fc 22			call macro_dsp_valuehl 
4e17				endm 
# End of macro FORTH_DSP_VALUEHL
4e17			;		inc hl    ; TODO do type check 
4e17			 
4e17			;		call get_word_hl 
4e17 e5					push hl 
4e18 e5					push hl 
4e19					FORTH_DSP_POP 
4e19 cd b4 23			call macro_forth_dsp_pop 
4e1c				endm 
# End of macro FORTH_DSP_POP
4e1c e1					pop hl 
4e1d					if DEBUG_FORTH_WORDS 
4e1d						DMARK "EDp" 
4e1d f5				push af  
4e1e 3a 32 4e			ld a, (.dmark)  
4e21 32 68 fe			ld (debug_mark),a  
4e24 3a 33 4e			ld a, (.dmark+1)  
4e27 32 69 fe			ld (debug_mark+1),a  
4e2a 3a 34 4e			ld a, (.dmark+2)  
4e2d 32 6a fe			ld (debug_mark+2),a  
4e30 18 03			jr .pastdmark  
4e32 ..			.dmark: db "EDp"  
4e35 f1			.pastdmark: pop af  
4e36			endm  
# End of macro DMARK
4e36						CALLMONITOR 
4e36 cd 6c fe			call debug_vector  
4e39				endm  
# End of macro CALLMONITOR
4e39					endif 
4e39				;	ld a, 0 
4e39 cd 2d 14				call strlenz 
4e3c 23					inc hl 
4e3d			 
4e3d 06 00				ld b, 0 
4e3f 4d					ld c, l 
4e40			 
4e40 e1					pop hl 
4e41			 
4e41					;ld a, 0 
4e41					;ld (hl),a 
4e41 3a 5b fa				ld a,(f_cursor_ptr) 
4e44 16 64				ld d, 100 
4e46 0e 00				ld c, 0 
4e48 1e 28				ld e, 40 
4e4a cd fc 0f				call input_str 
4e4d					; TODO perhaps do a type check and wrap in quotes if not a number 
4e4d					NEXTW 
4e4d c3 b2 24			jp macro_next 
4e50				endm 
# End of macro NEXTW
4e50			 
4e50			 
4e50			.ENDKEY: 
4e50			; eof 
4e50			 
# End of file forth_words_key.asm
4e50			include "forth_words_const.asm" 
4e50			 
4e50			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4e50			 
4e50			 
4e50			.SPITIME: 
4e50				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4e50 77				db WORD_SYS_CORE+99             
4e51 65 4e			dw .VA            
4e53 08				db 7 + 1 
4e54 .. 00			db "SPITIME",0              
4e5c				endm 
# End of macro CWHEAD
4e5c			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack 
4e5c			; 
4e5c			; | If using BANK devices then leave as is. 
4e5c			; | Only really useful for the CARTDEV where other devices may be too far or slow. In particular 
4e5c			; | the multiplexing of the PicoSPINet device which might not be running fast enough for all of the nodes 
4e5c			 
4e5c 21 61 fa				ld hl, spi_clktime  
4e5f cd 05 21				call forth_push_numhl 
4e62			 
4e62					NEXTW 
4e62 c3 b2 24			jp macro_next 
4e65				endm 
# End of macro NEXTW
4e65			 
4e65			 
4e65			.VA: 
4e65				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4e65 77				db WORD_SYS_CORE+99             
4e66 75 4e			dw .SYMBOL            
4e68 03				db 2 + 1 
4e69 .. 00			db "VA",0              
4e6c				endm 
# End of macro CWHEAD
4e6c			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 
4e6c 21 25 fa				ld hl, cli_var_array 
4e6f cd 05 21				call forth_push_numhl 
4e72			 
4e72					NEXTW 
4e72 c3 b2 24			jp macro_next 
4e75				endm 
# End of macro NEXTW
4e75			 
4e75			.SYMBOL: 
4e75				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4e75 77				db WORD_SYS_CORE+99             
4e76 7f 4f			dw .ENDCONST            
4e78 07				db 6 + 1 
4e79 .. 00			db "SYMBOL",0              
4e80				endm 
# End of macro CWHEAD
4e80			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4e80			; | 
4e80			; | The value is the number reference and the final address is pushed to stack 
4e80			 
4e80			; | dw sym_table 
4e80			; | dw nmi_vector 
4e80			; | dw cli_autodisplay 
4e80			; | dw cli_data_sp 
4e80			; | dw cli_data_stack 
4e80			; | dw cli_loop_sp 
4e80			; | dw cli_loop_stack 
4e80			; | dw cli_var_array 
4e80			; | dw cursor_col 
4e80			; | dw cursor_ptr 
4e80			; | ; 10 
4e80			; | dw cursor_row 
4e80			; | dw debug_mark 
4e80			; | dw display_fb0 
4e80			; | dw display_fb1 
4e80			; | dw display_fb2 
4e80			; | dw display_fb3 
4e80			; | dw display_fb_active 
4e80			; | dw execscratch 
4e80			; | dw f_cursor_ptr 
4e80			; | dw hardware_word 
4e80			; | ;20 
4e80			; | dw input_at_cursor 
4e80			; | dw input_at_pos 
4e80			; | dw input_cur_flash 
4e80			; | dw input_cur_onoff 
4e80			; | dw input_cursor 
4e80			; | dw input_display_size 
4e80			; | dw input_len 
4e80			; | dw input_ptr 
4e80			; | dw input_size 
4e80			; | dw input_start 
4e80			; | ; 30 
4e80			; | dw input_str 
4e80			; | dw input_under_cursor 
4e80			; | dw os_cli_cmd 
4e80			; | dw os_cur_ptr 
4e80			; | dw os_current_i 
4e80			; | dw os_input 
4e80			; | dw os_last_cmd 
4e80			; | dw os_last_new_uword 
4e80			; | dw debug_vector 
4e80			; | dw os_view_hl 
4e80			; | ;40 
4e80			; | dw os_word_scratch 
4e80			; | dw portbctl 
4e80			; | dw portbdata 
4e80			; | dw spi_cartdev 
4e80			; | dw spi_cartdev2 
4e80			; | dw spi_clktime 
4e80			; | dw spi_device 
4e80			; | dw spi_device_id 
4e80			; | dw spi_portbyte 
4e80			; | dw stackstore 
4e80			; | ; 50 
4e80			; | if STORAGE_SE 
4e80			; | dw storage_actl 
4e80			; | dw storage_adata 
4e80			; | else 
4e80			; | dw 0 
4e80			; | dw 0 
4e80			; | endif 
4e80			; | dw storage_append 
4e80			; | if STORAGE_SE 
4e80			; | dw storage_bctl 
4e80			; | else 
4e80			; | dw 0 
4e80			; | endif 
4e80			; | dw store_bank_active 
4e80			; | dw store_filecache 
4e80			; | dw store_longread 
4e80			; | dw store_openaddr 
4e80			; | dw store_openext 
4e80			; | dw store_openmaxext 
4e80			; | ; 60 
4e80			; | dw store_page 
4e80			; | dw store_readbuf 
4e80			; | dw store_readcont 
4e80			; | dw store_readptr 
4e80			; | dw store_tmpext 
4e80			; | dw store_tmpid 
4e80			; | dw store_tmppageid 
4e80			; | dw malloc 
4e80			; | dw free 
4e80			; | dw cin 
4e80			; | ; 70 
4e80			; | dw cin_wait 
4e80			; | dw forth_push_numhl 
4e80			; | dw forth_push_str 
4e80			 
4e80					if DEBUG_FORTH_WORDS_KEY 
4e80						DMARK "SYM" 
4e80 f5				push af  
4e81 3a 95 4e			ld a, (.dmark)  
4e84 32 68 fe			ld (debug_mark),a  
4e87 3a 96 4e			ld a, (.dmark+1)  
4e8a 32 69 fe			ld (debug_mark+1),a  
4e8d 3a 97 4e			ld a, (.dmark+2)  
4e90 32 6a fe			ld (debug_mark+2),a  
4e93 18 03			jr .pastdmark  
4e95 ..			.dmark: db "SYM"  
4e98 f1			.pastdmark: pop af  
4e99			endm  
# End of macro DMARK
4e99						CALLMONITOR 
4e99 cd 6c fe			call debug_vector  
4e9c				endm  
# End of macro CALLMONITOR
4e9c					endif 
4e9c			 
4e9c					FORTH_DSP_VALUEHL 
4e9c cd fc 22			call macro_dsp_valuehl 
4e9f				endm 
# End of macro FORTH_DSP_VALUEHL
4e9f			 
4e9f 7d					ld a, l     
4ea0			 
4ea0			 
4ea0					if DEBUG_FORTH_WORDS 
4ea0						DMARK "SY1" 
4ea0 f5				push af  
4ea1 3a b5 4e			ld a, (.dmark)  
4ea4 32 68 fe			ld (debug_mark),a  
4ea7 3a b6 4e			ld a, (.dmark+1)  
4eaa 32 69 fe			ld (debug_mark+1),a  
4ead 3a b7 4e			ld a, (.dmark+2)  
4eb0 32 6a fe			ld (debug_mark+2),a  
4eb3 18 03			jr .pastdmark  
4eb5 ..			.dmark: db "SY1"  
4eb8 f1			.pastdmark: pop af  
4eb9			endm  
# End of macro DMARK
4eb9						CALLMONITOR 
4eb9 cd 6c fe			call debug_vector  
4ebc				endm  
# End of macro CALLMONITOR
4ebc					endif 
4ebc					 
4ebc f5					push af	 
4ebd					FORTH_DSP_POP 
4ebd cd b4 23			call macro_forth_dsp_pop 
4ec0				endm 
# End of macro FORTH_DSP_POP
4ec0 f1					pop af 
4ec1			 
4ec1 cb 27				sla a  
4ec3				 
4ec3					 
4ec3					if DEBUG_FORTH_WORDS 
4ec3						DMARK "SY" 
4ec3 f5				push af  
4ec4 3a d8 4e			ld a, (.dmark)  
4ec7 32 68 fe			ld (debug_mark),a  
4eca 3a d9 4e			ld a, (.dmark+1)  
4ecd 32 69 fe			ld (debug_mark+1),a  
4ed0 3a da 4e			ld a, (.dmark+2)  
4ed3 32 6a fe			ld (debug_mark+2),a  
4ed6 18 02			jr .pastdmark  
4ed8 ..			.dmark: db "SY"  
4eda f1			.pastdmark: pop af  
4edb			endm  
# End of macro DMARK
4edb						CALLMONITOR 
4edb cd 6c fe			call debug_vector  
4ede				endm  
# End of macro CALLMONITOR
4ede					endif 
4ede			 
4ede 21 ed 4e				ld hl, sym_table 
4ee1 cd cf 0f				call addatohl 
4ee4 cd 34 24				call loadwordinhl 
4ee7 cd 05 21				call forth_push_numhl 
4eea			 
4eea			 
4eea				       NEXTW 
4eea c3 b2 24			jp macro_next 
4eed				endm 
# End of macro NEXTW
4eed			 
4eed			sym_table: 
4eed			 
4eed			; 0 
4eed ed 4e		dw sym_table 
4eef 6f fe		dw nmi_vector 
4ef1 39 fa		dw cli_autodisplay 
4ef3 eb f9		dw cli_data_sp 
4ef5 25 f7		dw cli_data_stack 
4ef7 ed f9		dw cli_loop_sp 
4ef9 27 f9		dw cli_loop_stack 
4efb 25 fa		dw cli_var_array 
4efd c2 fb		dw cursor_col 
4eff c0 fb		dw cursor_ptr 
4f01			; 10 
4f01 c1 fb		dw cursor_row 
4f03 68 fe		dw debug_mark 
4f05 ae fd		dw display_fb0 
4f07 0d fd		dw display_fb1 
4f09 cb fb		dw display_fb2 
4f0b 6c fc		dw display_fb3 
4f0d c9 fb		dw display_fb_active 
4f0f bd f2		dw execscratch 
4f11 5b fa		dw f_cursor_ptr 
4f13 72 fe		dw hardware_word 
4f15			;20 
4f15 5f fe		dw input_at_cursor 
4f17 61 fe		dw input_at_pos 
4f19 5d fe		dw input_cur_flash 
4f1b 5c fe		dw input_cur_onoff 
4f1d 52 fe		dw input_cursor 
4f1f 62 fe		dw input_display_size 
4f21 57 fe		dw input_len 
4f23 66 fe		dw input_ptr 
4f25 63 fe		dw input_size 
4f27 64 fe		dw input_start 
4f29			; 30 
4f29 fc 0f		dw input_str 
4f2b 60 fe		dw input_under_cursor 
4f2d e5 f4		dw os_cli_cmd 
4f2f e1 f4		dw os_cur_ptr 
4f31 e3 f4		dw os_current_i 
4f33 bc f3		dw os_input 
4f35 e4 f5		dw os_last_cmd 
4f37 bb f4		dw os_last_new_uword 
4f39 6c fe		dw debug_vector 
4f3b a0 f1		dw os_view_hl 
4f3d			;40 
4f3d c3 f4		dw os_word_scratch 
4f3f c3 00		dw portbctl 
4f41 c1 00		dw portbdata 
4f43 60 fa		dw spi_cartdev 
4f45 5f fa		dw spi_cartdev2 
4f47 61 fa		dw spi_clktime 
4f49 5d fa		dw spi_device 
4f4b 5c fa		dw spi_device_id 
4f4d 5e fa		dw spi_portbyte 
4f4f a4 fb		dw stackstore 
4f51			; 50 
4f51			if STORAGE_SE 
4f51 82 00		dw storage_actl 
4f53 80 00		dw storage_adata 
4f55			else 
4f55			dw 0 
4f55			dw 0 
4f55			endif 
4f55 55 0b		dw storage_append 
4f57			if STORAGE_SE 
4f57 83 00		dw storage_bctl 
4f59			else 
4f59			dw 0 
4f59			endif 
4f59 90 fb		dw store_bank_active 
4f5b 64 fa		dw store_filecache 
4f5d 72 fa		dw store_longread 
4f5f 68 fa		dw store_openaddr 
4f61 67 fa		dw store_openext 
4f63 66 fa		dw store_openmaxext 
4f65			; 60 
4f65 77 fa		dw store_page 
4f67 73 fa		dw store_readbuf 
4f69 6a fa		dw store_readcont 
4f6b 75 fa		dw store_readptr 
4f6d 6a fa		dw store_tmpext 
4f6f 6b fa		dw store_tmpid 
4f71 62 fa		dw store_tmppageid 
4f73 96 14		dw malloc 
4f75 60 15		dw free 
4f77 18 7a		dw cin 
4f79			; 70 
4f79 07 7a		dw cin_wait 
4f7b 05 21		dw forth_push_numhl 
4f7d 73 21		dw forth_push_str 
4f7f			 
4f7f			 
4f7f			.ENDCONST: 
4f7f			 
4f7f			; eof 
4f7f			 
4f7f			 
# End of file forth_words_const.asm
4f7f			 
4f7f			if STORAGE_SE 
4f7f			   	include "forth_words_storage.asm" 
4f7f			 
4f7f			; | ## Fixed Storage Words 
4f7f			 
4f7f			.RENAME: 
4f7f			  
4f7f				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
4f7f 3a				db WORD_SYS_CORE+38             
4f80 75 50			dw .RECORD            
4f82 07				db 6 + 1 
4f83 .. 00			db "RENAME",0              
4f8a				endm 
# End of macro CWHEAD
4f8a			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
4f8a			; | | Compatible with PicoSPINet  
4f8a					if DEBUG_FORTH_WORDS_KEY 
4f8a						DMARK "REN" 
4f8a f5				push af  
4f8b 3a 9f 4f			ld a, (.dmark)  
4f8e 32 68 fe			ld (debug_mark),a  
4f91 3a a0 4f			ld a, (.dmark+1)  
4f94 32 69 fe			ld (debug_mark+1),a  
4f97 3a a1 4f			ld a, (.dmark+2)  
4f9a 32 6a fe			ld (debug_mark+2),a  
4f9d 18 03			jr .pastdmark  
4f9f ..			.dmark: db "REN"  
4fa2 f1			.pastdmark: pop af  
4fa3			endm  
# End of macro DMARK
4fa3						CALLMONITOR 
4fa3 cd 6c fe			call debug_vector  
4fa6				endm  
# End of macro CALLMONITOR
4fa6					endif 
4fa6			 
4fa6			 
4fa6					; preserve some internal vars used by other file handing routines 
4fa6			 
4fa6 2a 68 fa				ld hl, (store_openaddr) 
4fa9 e5					push hl 
4faa 3a 6a fa				ld a, (store_readcont) 
4fad f5					push af 
4fae			 
4fae					FORTH_DSP_VALUEHL 
4fae cd fc 22			call macro_dsp_valuehl 
4fb1				endm 
# End of macro FORTH_DSP_VALUEHL
4fb1			 
4fb1					; move ext and id around for the file header 
4fb1			 
4fb1 65					ld h, l 
4fb2 2e 00				ld l, 0 
4fb4			 
4fb4 e5					push hl    ; id 
4fb5			 
4fb5					FORTH_DSP_POP 
4fb5 cd b4 23			call macro_forth_dsp_pop 
4fb8				endm 
# End of macro FORTH_DSP_POP
4fb8			 
4fb8					; Locate the file header 
4fb8			 
4fb8 e1					pop hl 
4fb9 e5					push hl 
4fba 11 77 fa				ld de, store_page      ; get block zero of file 
4fbd					if DEBUG_FORTH_WORDS 
4fbd						DMARK "REr" 
4fbd f5				push af  
4fbe 3a d2 4f			ld a, (.dmark)  
4fc1 32 68 fe			ld (debug_mark),a  
4fc4 3a d3 4f			ld a, (.dmark+1)  
4fc7 32 69 fe			ld (debug_mark+1),a  
4fca 3a d4 4f			ld a, (.dmark+2)  
4fcd 32 6a fe			ld (debug_mark+2),a  
4fd0 18 03			jr .pastdmark  
4fd2 ..			.dmark: db "REr"  
4fd5 f1			.pastdmark: pop af  
4fd6			endm  
# End of macro DMARK
4fd6						CALLMONITOR 
4fd6 cd 6c fe			call debug_vector  
4fd9				endm  
# End of macro CALLMONITOR
4fd9					endif 
4fd9 cd be 09				call storage_read 
4fdc			 
4fdc cd f8 0f			call ishlzero 
4fdf 20 05			jr nz, .rnfound 
4fe1			 
4fe1				; file does not exist so indicate with 255 extents in use 
4fe1			 
4fe1 3e ff			ld a, 255 
4fe3 e1				pop hl ; clear dup hl 
4fe4 18 7b			jr .skiprneof 
4fe6			 
4fe6			 
4fe6			.rnfound: 
4fe6					; file found so rename 
4fe6			 
4fe6					FORTH_DSP_VALUEHL 
4fe6 cd fc 22			call macro_dsp_valuehl 
4fe9				endm 
# End of macro FORTH_DSP_VALUEHL
4fe9			 
4fe9 e5				push hl 
4fea 3e 00			ld a, 0 
4fec cd 38 14			call strlent 
4fef 23				inc hl   ; cover zero term 
4ff0 06 00			ld b,0 
4ff2 4d				ld c,l 
4ff3 e1				pop hl 
4ff4 11 7a fa				ld de, store_page + 3 
4ff7 ed b0				ldir 
4ff9			 
4ff9 11 77 fa				ld de, store_page 
4ffc					if DEBUG_FORTH_WORDS 
4ffc						DMARK "RER" 
4ffc f5				push af  
4ffd 3a 11 50			ld a, (.dmark)  
5000 32 68 fe			ld (debug_mark),a  
5003 3a 12 50			ld a, (.dmark+1)  
5006 32 69 fe			ld (debug_mark+1),a  
5009 3a 13 50			ld a, (.dmark+2)  
500c 32 6a fe			ld (debug_mark+2),a  
500f 18 03			jr .pastdmark  
5011 ..			.dmark: db "RER"  
5014 f1			.pastdmark: pop af  
5015			endm  
# End of macro DMARK
5015						CALLMONITOR 
5015 cd 6c fe			call debug_vector  
5018				endm  
# End of macro CALLMONITOR
5018					endif 
5018			 
5018 e1					pop hl    ; get orig file id and mangle it for find id 
5019 55					ld d, l 
501a 5c					ld e, h 
501b			 
501b 21 00 00				ld hl, 0 
501e					if DEBUG_FORTH_WORDS 
501e						DMARK "REf" 
501e f5				push af  
501f 3a 33 50			ld a, (.dmark)  
5022 32 68 fe			ld (debug_mark),a  
5025 3a 34 50			ld a, (.dmark+1)  
5028 32 69 fe			ld (debug_mark+1),a  
502b 3a 35 50			ld a, (.dmark+2)  
502e 32 6a fe			ld (debug_mark+2),a  
5031 18 03			jr .pastdmark  
5033 ..			.dmark: db "REf"  
5036 f1			.pastdmark: pop af  
5037			endm  
# End of macro DMARK
5037						CALLMONITOR 
5037 cd 6c fe			call debug_vector  
503a				endm  
# End of macro CALLMONITOR
503a					endif 
503a cd 98 07				call storage_findnextid 
503d 11 77 fa				ld de, store_page 
5040					if DEBUG_FORTH_WORDS 
5040						DMARK "REw" 
5040 f5				push af  
5041 3a 55 50			ld a, (.dmark)  
5044 32 68 fe			ld (debug_mark),a  
5047 3a 56 50			ld a, (.dmark+1)  
504a 32 69 fe			ld (debug_mark+1),a  
504d 3a 57 50			ld a, (.dmark+2)  
5050 32 6a fe			ld (debug_mark+2),a  
5053 18 03			jr .pastdmark  
5055 ..			.dmark: db "REw"  
5058 f1			.pastdmark: pop af  
5059			endm  
# End of macro DMARK
5059						CALLMONITOR 
5059 cd 6c fe			call debug_vector  
505c				endm  
# End of macro CALLMONITOR
505c					endif 
505c cd ca 04				call storage_write_block 
505f			 
505f 3e 00				ld a, 0 
5061			.skiprneof: 
5061					; drop file name 
5061					FORTH_DSP_POP 
5061 cd b4 23			call macro_forth_dsp_pop 
5064				endm 
# End of macro FORTH_DSP_POP
5064			 
5064 6f					ld l, a 
5065 26 00				ld h, 0 
5067 cd 05 21				call forth_push_numhl 
506a			 
506a			 
506a f1					pop af 
506b 32 6a fa				ld (store_readcont),a 
506e e1					pop hl 
506f 22 68 fa				ld (store_openaddr), hl 
5072						 
5072				NEXTW 
5072 c3 b2 24			jp macro_next 
5075				endm 
# End of macro NEXTW
5075			.RECORD: 
5075			  
5075				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
5075 3a				db WORD_SYS_CORE+38             
5076 19 51			dw .BREAD            
5078 07				db 6 + 1 
5079 .. 00			db "RECORD",0              
5080				endm 
# End of macro CWHEAD
5080			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
5080			; | | Compatible with PicoSPINet  
5080			 
5080					if DEBUG_FORTH_WORDS_KEY 
5080						DMARK "REC" 
5080 f5				push af  
5081 3a 95 50			ld a, (.dmark)  
5084 32 68 fe			ld (debug_mark),a  
5087 3a 96 50			ld a, (.dmark+1)  
508a 32 69 fe			ld (debug_mark+1),a  
508d 3a 97 50			ld a, (.dmark+2)  
5090 32 6a fe			ld (debug_mark+2),a  
5093 18 03			jr .pastdmark  
5095 ..			.dmark: db "REC"  
5098 f1			.pastdmark: pop af  
5099			endm  
# End of macro DMARK
5099						CALLMONITOR 
5099 cd 6c fe			call debug_vector  
509c				endm  
# End of macro CALLMONITOR
509c					endif 
509c			 
509c					FORTH_DSP_VALUEHL 
509c cd fc 22			call macro_dsp_valuehl 
509f				endm 
# End of macro FORTH_DSP_VALUEHL
509f			 
509f e5					push hl    ; id 
50a0			 
50a0					FORTH_DSP_POP 
50a0 cd b4 23			call macro_forth_dsp_pop 
50a3				endm 
# End of macro FORTH_DSP_POP
50a3			 
50a3					FORTH_DSP_VALUEHL 
50a3 cd fc 22			call macro_dsp_valuehl 
50a6				endm 
# End of macro FORTH_DSP_VALUEHL
50a6			 
50a6					FORTH_DSP_POP 
50a6 cd b4 23			call macro_forth_dsp_pop 
50a9				endm 
# End of macro FORTH_DSP_POP
50a9			 
50a9 d1					pop de     ; get file id 
50aa			 
50aa					; e = file id 
50aa					; l = file extent 
50aa			 
50aa			 
50aa					; construct request to access file extent 
50aa			 
50aa			;		ld a, e 
50aa 63					ld h, e 
50ab					 
50ab					 
50ab					 
50ab			 
50ab					; e has id 
50ab			 
50ab 11 77 fa			ld de, store_page 
50ae					if DEBUG_FORTH_WORDS 
50ae						DMARK "REr" 
50ae f5				push af  
50af 3a c3 50			ld a, (.dmark)  
50b2 32 68 fe			ld (debug_mark),a  
50b5 3a c4 50			ld a, (.dmark+1)  
50b8 32 69 fe			ld (debug_mark+1),a  
50bb 3a c5 50			ld a, (.dmark+2)  
50be 32 6a fe			ld (debug_mark+2),a  
50c1 18 03			jr .pastdmark  
50c3 ..			.dmark: db "REr"  
50c6 f1			.pastdmark: pop af  
50c7			endm  
# End of macro DMARK
50c7						CALLMONITOR 
50c7 cd 6c fe			call debug_vector  
50ca				endm  
# End of macro CALLMONITOR
50ca					endif 
50ca cd be 09				call storage_read 
50cd cd f8 0f			call ishlzero 
50d0 28 22			jr z, .recnotfound 
50d2			 
50d2			 
50d2					if DEBUG_FORTH_WORDS 
50d2						DMARK "REe" 
50d2 f5				push af  
50d3 3a e7 50			ld a, (.dmark)  
50d6 32 68 fe			ld (debug_mark),a  
50d9 3a e8 50			ld a, (.dmark+1)  
50dc 32 69 fe			ld (debug_mark+1),a  
50df 3a e9 50			ld a, (.dmark+2)  
50e2 32 6a fe			ld (debug_mark+2),a  
50e5 18 03			jr .pastdmark  
50e7 ..			.dmark: db "REe"  
50ea f1			.pastdmark: pop af  
50eb			endm  
# End of macro DMARK
50eb						CALLMONITOR 
50eb cd 6c fe			call debug_vector  
50ee				endm  
# End of macro CALLMONITOR
50ee					endif 
50ee cd 73 21			call forth_push_str 
50f1			 
50f1					NEXTW 
50f1 c3 b2 24			jp macro_next 
50f4				endm 
# End of macro NEXTW
50f4			 
50f4			.recnotfound: 
50f4					if DEBUG_FORTH_WORDS 
50f4						DMARK "REf" 
50f4 f5				push af  
50f5 3a 09 51			ld a, (.dmark)  
50f8 32 68 fe			ld (debug_mark),a  
50fb 3a 0a 51			ld a, (.dmark+1)  
50fe 32 69 fe			ld (debug_mark+1),a  
5101 3a 0b 51			ld a, (.dmark+2)  
5104 32 6a fe			ld (debug_mark+2),a  
5107 18 03			jr .pastdmark  
5109 ..			.dmark: db "REf"  
510c f1			.pastdmark: pop af  
510d			endm  
# End of macro DMARK
510d						CALLMONITOR 
510d cd 6c fe			call debug_vector  
5110				endm  
# End of macro CALLMONITOR
5110					endif 
5110 21 ff 00			ld hl, 255 
5113 cd 05 21			call forth_push_numhl 
5116				NEXTW 
5116 c3 b2 24			jp macro_next 
5119				endm 
# End of macro NEXTW
5119			 
5119			 
5119			.BREAD: 
5119			  
5119				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
5119 3a				db WORD_SYS_CORE+38             
511a 9c 51			dw .BWRITE            
511c 06				db 5 + 1 
511d .. 00			db "BREAD",0              
5123				endm 
# End of macro CWHEAD
5123			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
5123			; | | Compatible with PicoSPINet  
5123				 
5123					if DEBUG_FORTH_WORDS_KEY 
5123						DMARK "BRD" 
5123 f5				push af  
5124 3a 38 51			ld a, (.dmark)  
5127 32 68 fe			ld (debug_mark),a  
512a 3a 39 51			ld a, (.dmark+1)  
512d 32 69 fe			ld (debug_mark+1),a  
5130 3a 3a 51			ld a, (.dmark+2)  
5133 32 6a fe			ld (debug_mark+2),a  
5136 18 03			jr .pastdmark  
5138 ..			.dmark: db "BRD"  
513b f1			.pastdmark: pop af  
513c			endm  
# End of macro DMARK
513c						CALLMONITOR 
513c cd 6c fe			call debug_vector  
513f				endm  
# End of macro CALLMONITOR
513f					endif 
513f			 
513f				FORTH_DSP_VALUEHL 
513f cd fc 22			call macro_dsp_valuehl 
5142				endm 
# End of macro FORTH_DSP_VALUEHL
5142			 
5142				FORTH_DSP_POP 
5142 cd b4 23			call macro_forth_dsp_pop 
5145				endm 
# End of macro FORTH_DSP_POP
5145			 
5145				; calc block address 
5145			 
5145 eb				ex de, hl 
5146 3e 40			ld a, STORE_BLOCK_PHY 
5148 cd 52 0f			call Mult16 
514b			 
514b			 
514b 11 77 fa			ld de, store_page 
514e			 
514e					if DEBUG_FORTH_WORDS 
514e						DMARK "BR1" 
514e f5				push af  
514f 3a 63 51			ld a, (.dmark)  
5152 32 68 fe			ld (debug_mark),a  
5155 3a 64 51			ld a, (.dmark+1)  
5158 32 69 fe			ld (debug_mark+1),a  
515b 3a 65 51			ld a, (.dmark+2)  
515e 32 6a fe			ld (debug_mark+2),a  
5161 18 03			jr .pastdmark  
5163 ..			.dmark: db "BR1"  
5166 f1			.pastdmark: pop af  
5167			endm  
# End of macro DMARK
5167						CALLMONITOR 
5167 cd 6c fe			call debug_vector  
516a				endm  
# End of macro CALLMONITOR
516a					endif 
516a			 
516a cd 65 04			call storage_read_block 
516d			 
516d cd f8 0f			call ishlzero 
5170 20 05			jr nz, .brfound 
5172			 
5172 cd 05 21			call forth_push_numhl 
5175 18 22			jr .brdone 
5177			 
5177			 
5177			.brfound: 
5177 21 79 fa		        ld hl, store_page+2 
517a			 
517a					if DEBUG_FORTH_WORDS 
517a						DMARK "BR2" 
517a f5				push af  
517b 3a 8f 51			ld a, (.dmark)  
517e 32 68 fe			ld (debug_mark),a  
5181 3a 90 51			ld a, (.dmark+1)  
5184 32 69 fe			ld (debug_mark+1),a  
5187 3a 91 51			ld a, (.dmark+2)  
518a 32 6a fe			ld (debug_mark+2),a  
518d 18 03			jr .pastdmark  
518f ..			.dmark: db "BR2"  
5192 f1			.pastdmark: pop af  
5193			endm  
# End of macro DMARK
5193						CALLMONITOR 
5193 cd 6c fe			call debug_vector  
5196				endm  
# End of macro CALLMONITOR
5196					endif 
5196			 
5196 cd 73 21			call forth_push_str 
5199			 
5199			 
5199			.brdone: 
5199			 
5199					NEXTW 
5199 c3 b2 24			jp macro_next 
519c				endm 
# End of macro NEXTW
519c			.BWRITE: 
519c				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
519c 3a				db WORD_SYS_CORE+38             
519d 31 52			dw .BUPD            
519f 07				db 6 + 1 
51a0 .. 00			db "BWRITE",0              
51a7				endm 
# End of macro CWHEAD
51a7			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
51a7			; | | Compatible with PicoSPINet  
51a7			 
51a7					if DEBUG_FORTH_WORDS_KEY 
51a7						DMARK "BWR" 
51a7 f5				push af  
51a8 3a bc 51			ld a, (.dmark)  
51ab 32 68 fe			ld (debug_mark),a  
51ae 3a bd 51			ld a, (.dmark+1)  
51b1 32 69 fe			ld (debug_mark+1),a  
51b4 3a be 51			ld a, (.dmark+2)  
51b7 32 6a fe			ld (debug_mark+2),a  
51ba 18 03			jr .pastdmark  
51bc ..			.dmark: db "BWR"  
51bf f1			.pastdmark: pop af  
51c0			endm  
# End of macro DMARK
51c0						CALLMONITOR 
51c0 cd 6c fe			call debug_vector  
51c3				endm  
# End of macro CALLMONITOR
51c3					endif 
51c3			 
51c3				FORTH_DSP_VALUEHL 
51c3 cd fc 22			call macro_dsp_valuehl 
51c6				endm 
# End of macro FORTH_DSP_VALUEHL
51c6			 
51c6				; calc block address 
51c6			 
51c6 eb				ex de, hl 
51c7 3e 40			ld a, STORE_BLOCK_PHY 
51c9 cd 52 0f			call Mult16 
51cc			 
51cc e5				push hl         ; address 
51cd			 
51cd				FORTH_DSP_POP 
51cd cd b4 23			call macro_forth_dsp_pop 
51d0				endm 
# End of macro FORTH_DSP_POP
51d0			 
51d0				FORTH_DSP_VALUEHL 
51d0 cd fc 22			call macro_dsp_valuehl 
51d3				endm 
# End of macro FORTH_DSP_VALUEHL
51d3			 
51d3				FORTH_DSP_POP 
51d3 cd b4 23			call macro_forth_dsp_pop 
51d6				endm 
# End of macro FORTH_DSP_POP
51d6			 
51d6 cd a1 0c			call storage_clear_page 
51d9			 
51d9				; copy string to store page 
51d9			 
51d9 e5				push hl     ; save string address 
51da			 
51da 3e 00			ld a, 0 
51dc cd 38 14			call strlent 
51df			 
51df 23				inc hl 
51e0			 
51e0 4d				ld c, l 
51e1 06 00			ld b, 0 
51e3			 
51e3 e1				pop hl 
51e4 11 79 fa			ld de, store_page + 2 
51e7					if DEBUG_FORTH_WORDS 
51e7						DMARK "BW1" 
51e7 f5				push af  
51e8 3a fc 51			ld a, (.dmark)  
51eb 32 68 fe			ld (debug_mark),a  
51ee 3a fd 51			ld a, (.dmark+1)  
51f1 32 69 fe			ld (debug_mark+1),a  
51f4 3a fe 51			ld a, (.dmark+2)  
51f7 32 6a fe			ld (debug_mark+2),a  
51fa 18 03			jr .pastdmark  
51fc ..			.dmark: db "BW1"  
51ff f1			.pastdmark: pop af  
5200			endm  
# End of macro DMARK
5200						CALLMONITOR 
5200 cd 6c fe			call debug_vector  
5203				endm  
# End of macro CALLMONITOR
5203					endif 
5203 ed b0			ldir 
5205			 
5205			 
5205				; poke the start of the block with flags to prevent high level file ops hitting the block 
5205			 
5205 21 ff ff			ld hl, $ffff 
5208			 
5208 22 77 fa			ld (store_page), hl	 
520b				 
520b e1				pop hl    ; get address 
520c 11 77 fa			ld de, store_page 
520f			 
520f					if DEBUG_FORTH_WORDS 
520f						DMARK "BW2" 
520f f5				push af  
5210 3a 24 52			ld a, (.dmark)  
5213 32 68 fe			ld (debug_mark),a  
5216 3a 25 52			ld a, (.dmark+1)  
5219 32 69 fe			ld (debug_mark+1),a  
521c 3a 26 52			ld a, (.dmark+2)  
521f 32 6a fe			ld (debug_mark+2),a  
5222 18 03			jr .pastdmark  
5224 ..			.dmark: db "BW2"  
5227 f1			.pastdmark: pop af  
5228			endm  
# End of macro DMARK
5228						CALLMONITOR 
5228 cd 6c fe			call debug_vector  
522b				endm  
# End of macro CALLMONITOR
522b					endif 
522b			 
522b cd ca 04			call storage_write_block 
522e			 
522e					NEXTW 
522e c3 b2 24			jp macro_next 
5231				endm 
# End of macro NEXTW
5231			 
5231			.BUPD: 
5231				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
5231 3a				db WORD_SYS_CORE+38             
5232 87 52			dw .BYID            
5234 05				db 4 + 1 
5235 .. 00			db "BUPD",0              
523a				endm 
# End of macro CWHEAD
523a			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
523a			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
523a			; | | or completely different file system structure. 
523a			; | | Compatible with PicoSPINet  
523a			 
523a					if DEBUG_FORTH_WORDS_KEY 
523a						DMARK "BUD" 
523a f5				push af  
523b 3a 4f 52			ld a, (.dmark)  
523e 32 68 fe			ld (debug_mark),a  
5241 3a 50 52			ld a, (.dmark+1)  
5244 32 69 fe			ld (debug_mark+1),a  
5247 3a 51 52			ld a, (.dmark+2)  
524a 32 6a fe			ld (debug_mark+2),a  
524d 18 03			jr .pastdmark  
524f ..			.dmark: db "BUD"  
5252 f1			.pastdmark: pop af  
5253			endm  
# End of macro DMARK
5253						CALLMONITOR 
5253 cd 6c fe			call debug_vector  
5256				endm  
# End of macro CALLMONITOR
5256					endif 
5256			 
5256				FORTH_DSP_VALUEHL 
5256 cd fc 22			call macro_dsp_valuehl 
5259				endm 
# End of macro FORTH_DSP_VALUEHL
5259			 
5259				; calc block address 
5259			 
5259 eb				ex de, hl 
525a 3e 40			ld a, STORE_BLOCK_PHY 
525c cd 52 0f			call Mult16 
525f			 
525f				FORTH_DSP_POP 
525f cd b4 23			call macro_forth_dsp_pop 
5262				endm 
# End of macro FORTH_DSP_POP
5262			 
5262			 
5262 11 77 fa			ld de, store_page 
5265			 
5265					if DEBUG_FORTH_WORDS 
5265						DMARK "BUe" 
5265 f5				push af  
5266 3a 7a 52			ld a, (.dmark)  
5269 32 68 fe			ld (debug_mark),a  
526c 3a 7b 52			ld a, (.dmark+1)  
526f 32 69 fe			ld (debug_mark+1),a  
5272 3a 7c 52			ld a, (.dmark+2)  
5275 32 6a fe			ld (debug_mark+2),a  
5278 18 03			jr .pastdmark  
527a ..			.dmark: db "BUe"  
527d f1			.pastdmark: pop af  
527e			endm  
# End of macro DMARK
527e						CALLMONITOR 
527e cd 6c fe			call debug_vector  
5281				endm  
# End of macro CALLMONITOR
5281					endif 
5281			 
5281 cd ca 04			call storage_write_block 
5284			 
5284					NEXTW 
5284 c3 b2 24			jp macro_next 
5287				endm 
# End of macro NEXTW
5287			 
5287			.BYID: 
5287			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
5287			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
5287			; 
5287			;		 
5287			;		if DEBUG_FORTH_WORDS_KEY 
5287			;			DMARK "BYID" 
5287			;			CALLMONITOR 
5287			;		endif 
5287			; 
5287			;		; get direct address 
5287			; 
5287			;		FORTH_DSP_VALUEHL 
5287			; 
5287			;		FORTH_DSP_POP 
5287			; 
5287			;	; calc block address 
5287			; 
5287			;	ex de, hl 
5287			;	ld a, STORE_BLOCK_PHY 
5287			;	call Mult16 
5287			;	;	do BREAD with number as param 
5287			;	; push the file name	 
5287			;	ld de, store_page 
5287			;	call storage_read_block 
5287			 ;       ld hl, store_page+2 
5287			; 
5287			; 
5287			;		NEXTW 
5287			;.BYNAME: 
5287				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
5287 3a				db WORD_SYS_CORE+38             
5288 a0 52			dw .DIR            
528a 06				db 5 + 1 
528b .. 00			db "GETID",0              
5291				endm 
# End of macro CWHEAD
5291			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
5291			; | | Compatible with PicoSPINet  
5291			 
5291					; get pointer to file name to seek 
5291			 
5291					FORTH_DSP_VALUEHL 
5291 cd fc 22			call macro_dsp_valuehl 
5294				endm 
# End of macro FORTH_DSP_VALUEHL
5294			 
5294			 
5294 cd 8c 03				call storage_getid  
5297			 
5297					FORTH_DSP_POP 
5297 cd b4 23			call macro_forth_dsp_pop 
529a				endm 
# End of macro FORTH_DSP_POP
529a			 
529a cd 05 21				call forth_push_numhl 
529d			 
529d					NEXTW 
529d c3 b2 24			jp macro_next 
52a0				endm 
# End of macro NEXTW
52a0			; 
52a0			.DIR: 
52a0				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
52a0 3a				db WORD_SYS_CORE+38             
52a1 a4 53			dw .SAVE            
52a3 04				db 3 + 1 
52a4 .. 00			db "DIR",0              
52a8				endm 
# End of macro CWHEAD
52a8			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
52a8			; | | Compatible with PicoSPINet  
52a8			 
52a8					if DEBUG_FORTH_WORDS_KEY 
52a8						DMARK "DIR" 
52a8 f5				push af  
52a9 3a bd 52			ld a, (.dmark)  
52ac 32 68 fe			ld (debug_mark),a  
52af 3a be 52			ld a, (.dmark+1)  
52b2 32 69 fe			ld (debug_mark+1),a  
52b5 3a bf 52			ld a, (.dmark+2)  
52b8 32 6a fe			ld (debug_mark+2),a  
52bb 18 03			jr .pastdmark  
52bd ..			.dmark: db "DIR"  
52c0 f1			.pastdmark: pop af  
52c1			endm  
# End of macro DMARK
52c1						CALLMONITOR 
52c1 cd 6c fe			call debug_vector  
52c4				endm  
# End of macro CALLMONITOR
52c4					endif 
52c4 cd 16 05			call storage_get_block_0 
52c7			 
52c7 21 77 fa			ld hl, store_page     ; get current id count 
52ca 46				ld b, (hl) 
52cb 0e 00			ld c, 0    ; count of files   
52cd					if DEBUG_FORTH_WORDS 
52cd						DMARK "DI1" 
52cd f5				push af  
52ce 3a e2 52			ld a, (.dmark)  
52d1 32 68 fe			ld (debug_mark),a  
52d4 3a e3 52			ld a, (.dmark+1)  
52d7 32 69 fe			ld (debug_mark+1),a  
52da 3a e4 52			ld a, (.dmark+2)  
52dd 32 6a fe			ld (debug_mark+2),a  
52e0 18 03			jr .pastdmark  
52e2 ..			.dmark: db "DI1"  
52e5 f1			.pastdmark: pop af  
52e6			endm  
# End of macro DMARK
52e6						CALLMONITOR 
52e6 cd 6c fe			call debug_vector  
52e9				endm  
# End of macro CALLMONITOR
52e9					endif 
52e9			 
52e9				; check for empty drive 
52e9			 
52e9 3e 00			ld a, 0 
52eb b8				cp b 
52ec ca 5a 53			jp z, .dirdone 
52ef			 
52ef				; for each of the current ids do a search for them and if found push to stack 
52ef			 
52ef c5			.diritem:	push bc 
52f0 21 40 00				ld hl, STORE_BLOCK_PHY 
52f3 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
52f5 58					ld e,b 
52f6			 
52f6			;		if DEBUG_FORTH_WORDS 
52f6			;			DMARK "DI2" 
52f6			;			CALLMONITOR 
52f6			;		endif 
52f6			 
52f6 cd 98 07				call storage_findnextid 
52f9			 
52f9			;		if DEBUG_FORTH_WORDS 
52f9			;			DMARK "DI3" 
52f9			;			CALLMONITOR 
52f9			;		endif 
52f9			 
52f9					; if found hl will be non zero 
52f9			 
52f9 cd f8 0f				call ishlzero 
52fc			;		ld a, l 
52fc			;		add h 
52fc			; 
52fc			;		cp 0 
52fc 28 59				jr z, .dirnotfound 
52fe			 
52fe					; increase count 
52fe			 
52fe c1					pop bc	 
52ff 0c					inc c 
5300 c5					push bc 
5301					 
5301			 
5301					; get file header and push the file name 
5301			 
5301 11 77 fa				ld de, store_page 
5304 cd 65 04				call storage_read_block 
5307			 
5307					; push file id to stack 
5307				 
5307 3a 77 fa				ld a, (store_page) 
530a 26 00				ld h, 0 
530c 6f					ld l, a 
530d cd 05 21				call forth_push_numhl 
5310			 
5310					; push extent count to stack  
5310				 
5310 3a 79 fa				ld a, (store_page+2) 
5313 26 00				ld h, 0 
5315 6f					ld l, a 
5316 cd 05 21				call forth_push_numhl 
5319			 
5319					; push file name 
5319			 
5319 21 7a fa				ld hl, store_page+3 
531c					if DEBUG_FORTH_WORDS 
531c						DMARK "DI5" 
531c f5				push af  
531d 3a 31 53			ld a, (.dmark)  
5320 32 68 fe			ld (debug_mark),a  
5323 3a 32 53			ld a, (.dmark+1)  
5326 32 69 fe			ld (debug_mark+1),a  
5329 3a 33 53			ld a, (.dmark+2)  
532c 32 6a fe			ld (debug_mark+2),a  
532f 18 03			jr .pastdmark  
5331 ..			.dmark: db "DI5"  
5334 f1			.pastdmark: pop af  
5335			endm  
# End of macro DMARK
5335						CALLMONITOR 
5335 cd 6c fe			call debug_vector  
5338				endm  
# End of macro CALLMONITOR
5338					endif 
5338 cd 73 21				call forth_push_str 
533b					if DEBUG_FORTH_WORDS 
533b						DMARK "DI6" 
533b f5				push af  
533c 3a 50 53			ld a, (.dmark)  
533f 32 68 fe			ld (debug_mark),a  
5342 3a 51 53			ld a, (.dmark+1)  
5345 32 69 fe			ld (debug_mark+1),a  
5348 3a 52 53			ld a, (.dmark+2)  
534b 32 6a fe			ld (debug_mark+2),a  
534e 18 03			jr .pastdmark  
5350 ..			.dmark: db "DI6"  
5353 f1			.pastdmark: pop af  
5354			endm  
# End of macro DMARK
5354						CALLMONITOR 
5354 cd 6c fe			call debug_vector  
5357				endm  
# End of macro CALLMONITOR
5357					endif 
5357			.dirnotfound: 
5357 c1					pop bc     
5358 10 95				djnz .diritem 
535a				 
535a			.dirdone:	 
535a					if DEBUG_FORTH_WORDS 
535a						DMARK "DI7" 
535a f5				push af  
535b 3a 6f 53			ld a, (.dmark)  
535e 32 68 fe			ld (debug_mark),a  
5361 3a 70 53			ld a, (.dmark+1)  
5364 32 69 fe			ld (debug_mark+1),a  
5367 3a 71 53			ld a, (.dmark+2)  
536a 32 6a fe			ld (debug_mark+2),a  
536d 18 03			jr .pastdmark  
536f ..			.dmark: db "DI7"  
5372 f1			.pastdmark: pop af  
5373			endm  
# End of macro DMARK
5373						CALLMONITOR 
5373 cd 6c fe			call debug_vector  
5376				endm  
# End of macro CALLMONITOR
5376					endif 
5376			 
5376					; push a count of the dir items found 
5376			 
5376 26 00				ld h, 0 
5378 69					ld l, c 
5379 cd 05 21				call forth_push_numhl 
537c			 
537c					; push the bank label 
537c			 
537c cd 16 05				call storage_get_block_0 
537f			 
537f				 
537f 21 7a fa		 		ld hl, store_page+3 
5382			 
5382					if DEBUG_FORTH_WORDS 
5382						DMARK "DI8" 
5382 f5				push af  
5383 3a 97 53			ld a, (.dmark)  
5386 32 68 fe			ld (debug_mark),a  
5389 3a 98 53			ld a, (.dmark+1)  
538c 32 69 fe			ld (debug_mark+1),a  
538f 3a 99 53			ld a, (.dmark+2)  
5392 32 6a fe			ld (debug_mark+2),a  
5395 18 03			jr .pastdmark  
5397 ..			.dmark: db "DI8"  
539a f1			.pastdmark: pop af  
539b			endm  
# End of macro DMARK
539b						CALLMONITOR 
539b cd 6c fe			call debug_vector  
539e				endm  
# End of macro CALLMONITOR
539e					endif 
539e cd 73 21				call forth_push_str 
53a1			 
53a1			 
53a1				 
53a1					NEXTW 
53a1 c3 b2 24			jp macro_next 
53a4				endm 
# End of macro NEXTW
53a4			.SAVE: 
53a4			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
53a4			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
53a4			;		NEXTW 
53a4			;.LOAD: 
53a4			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
53a4			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
53a4			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
53a4			;; > > The LOAD command can not be used in any user words or compound lines. 
53a4			; 
53a4			;		; store_openext use it. If zero it is EOF 
53a4			; 
53a4			;		; read block from current stream id 
53a4			;		; if the block does not contain zero term keep reading blocks until zero found 
53a4			;		; push the block to stack 
53a4			;		; save the block id to stream 
53a4			; 
53a4			; 
53a4			;		FORTH_DSP_VALUEHL 
53a4			; 
53a4			;;		push hl 
53a4			; 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LOA" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;		FORTH_DSP_POP 
53a4			; 
53a4			;;		pop hl 
53a4			; 
53a4			;		ld h, l 
53a4			;		ld l, 0 
53a4			; 
53a4			;		push hl     ; stack holds current file id and extent to work with 
53a4			; 
53a4			; 
53a4			;		ld de, store_page      ; get block zero of file 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LO0" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;		call storage_read 
53a4			; 
53a4			;		ld a, (store_page+2)    ; max extents for this file 
53a4			;		ld  (store_openmaxext),a   ; get our limit 
53a4			; 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LOE" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			; 
53a4			;; TODO dont know why max extents are not present 
53a4			;;		cp 0 
53a4			;;		jp z, .loadeof     ; dont read past eof 
53a4			; 
53a4			;;		ld a, 1   ; start from the head of the file 
53a4			; 
53a4			;.loadline:	pop hl 
53a4			;		inc hl 
53a4			;		ld  a, (store_openmaxext)   ; get our limit 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LOx" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;		inc a 
53a4			;		cp l 
53a4			;		jp z, .loadeof 
53a4			;		push hl    ; save current extent 
53a4			; 
53a4			;		ld de, store_page 
53a4			; 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LO1" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;		call storage_read 
53a4			; 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LO2" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;	call ishlzero 
53a4			;	ld a, l 
53a4			;	add h 
53a4			;	cp 0 
53a4			;	jr z, .loadeof 
53a4			; 
53a4			;	; not eof so hl should point to data to exec 
53a4			; 
53a4			;	; will need to add the FORTH_END_BUFFER flag 
53a4			 ; 
53a4			;	ld hl, store_page+2 
53a4			;	ld bc, 255 
53a4			;	ld a, 0 
53a4			;	cpir 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LOt" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;	dec hl 
53a4			;	ld a, ' ' 
53a4			;	ld (hl), a 
53a4			;	inc hl 
53a4			;	ld (hl), a 
53a4			;	inc hl 
53a4			;	ld (hl), a 
53a4			;	inc hl 
53a4			;	ld a, FORTH_END_BUFFER 
53a4			;	ld (hl), a 
53a4			; 
53a4			;	; TODO handle more than a single block read 
53a4			; 
53a4			; 
53a4			;	ld hl, store_page+2 
53a4			; 
53a4			;	ld (os_tok_ptr), hl 
53a4			; 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LO3" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			; 
53a4			;	call forthparse 
53a4			;	call forthexec 
53a4			;	call forthexec_cleanup 
53a4			; 
53a4			;	; go to next extent 
53a4			; 
53a4			;	; get next block  or mark as eof 
53a4			;	jp .loadline 
53a4			; 
53a4			; 
53a4			; 
53a4			;	       NEXTW 
53a4			;.loadeof:	ld a, 0 
53a4			;		ld (store_openext), a 
53a4			; 
53a4			;	if DEBUG_STORESE 
53a4			;		DMARK "LOF" 
53a4			;		CALLMONITOR 
53a4			;	endif 
53a4			;		ret 
53a4			;		;NEXTW 
53a4			;.BSAVE:   
53a4			; 
53a4			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
53a4			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
53a4			;		NEXTW 
53a4			;.BLOAD: 
53a4			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
53a4			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
53a4			;		NEXTW 
53a4			;;;; counter gap 
53a4			 
53a4			 
53a4			.SEO: 
53a4				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
53a4 64				db WORD_SYS_CORE+80             
53a5 c3 53			dw .SEI            
53a7 04				db 3 + 1 
53a8 .. 00			db "SEO",0              
53ac				endm 
# End of macro CWHEAD
53ac			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
53ac			 
53ac					; get port 
53ac			 
53ac					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
53ac cd fc 22			call macro_dsp_valuehl 
53af				endm 
# End of macro FORTH_DSP_VALUEHL
53af			 
53af e5					push hl    ; u2 - byte 
53b0			 
53b0					; destroy value TOS 
53b0			 
53b0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
53b0 cd b4 23			call macro_forth_dsp_pop 
53b3				endm 
# End of macro FORTH_DSP_POP
53b3			 
53b3					; get byte to send 
53b3			 
53b3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
53b3 cd fc 22			call macro_dsp_valuehl 
53b6				endm 
# End of macro FORTH_DSP_VALUEHL
53b6			 
53b6 e5					push hl    ; u1 - addr 
53b7			 
53b7					; destroy value TOS 
53b7			 
53b7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
53b7 cd b4 23			call macro_forth_dsp_pop 
53ba				endm 
# End of macro FORTH_DSP_POP
53ba			 
53ba					; one value on hl get other one back 
53ba			 
53ba d1					pop de   ; u1 - byte 
53bb			 
53bb e1					pop hl   ; u2 - addr 
53bc			 
53bc					; TODO Send SPI byte 
53bc			 
53bc			 
53bc 7b					ld a, e 
53bd cd 6a 02				call se_writebyte 
53c0			 
53c0					 
53c0			 
53c0					NEXTW 
53c0 c3 b2 24			jp macro_next 
53c3				endm 
# End of macro NEXTW
53c3			 
53c3			.SEI: 
53c3				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
53c3 65				db WORD_SYS_CORE+81             
53c4 dd 53			dw .SFREE            
53c6 04				db 3 + 1 
53c7 .. 00			db "SEI",0              
53cb				endm 
# End of macro CWHEAD
53cb			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
53cb			 
53cb					; get port 
53cb			 
53cb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
53cb cd fc 22			call macro_dsp_valuehl 
53ce				endm 
# End of macro FORTH_DSP_VALUEHL
53ce			 
53ce			;		push hl 
53ce			 
53ce					; destroy value TOS 
53ce			 
53ce					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
53ce cd b4 23			call macro_forth_dsp_pop 
53d1				endm 
# End of macro FORTH_DSP_POP
53d1			 
53d1					; one value on hl get other one back 
53d1			 
53d1			;		pop hl 
53d1			 
53d1			 
53d1					; TODO Get SPI byte 
53d1			 
53d1 cd 0c 03				call se_readbyte 
53d4			 
53d4 26 00				ld h, 0 
53d6 6f					ld l, a 
53d7 cd 05 21				call forth_push_numhl 
53da			 
53da					NEXTW 
53da c3 b2 24			jp macro_next 
53dd				endm 
# End of macro NEXTW
53dd			 
53dd			.SFREE: 
53dd				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
53dd 67				db WORD_SYS_CORE+83             
53de 0c 54			dw .SIZE            
53e0 06				db 5 + 1 
53e1 .. 00			db "FFREE",0              
53e7				endm 
# End of macro CWHEAD
53e7			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
53e7			; | | Compatible with PicoSPINet  
53e7					if DEBUG_FORTH_WORDS_KEY 
53e7						DMARK "FFR" 
53e7 f5				push af  
53e8 3a fc 53			ld a, (.dmark)  
53eb 32 68 fe			ld (debug_mark),a  
53ee 3a fd 53			ld a, (.dmark+1)  
53f1 32 69 fe			ld (debug_mark+1),a  
53f4 3a fe 53			ld a, (.dmark+2)  
53f7 32 6a fe			ld (debug_mark+2),a  
53fa 18 03			jr .pastdmark  
53fc ..			.dmark: db "FFR"  
53ff f1			.pastdmark: pop af  
5400			endm  
# End of macro DMARK
5400						CALLMONITOR 
5400 cd 6c fe			call debug_vector  
5403				endm  
# End of macro CALLMONITOR
5403					endif 
5403			 
5403 cd 32 08				call storage_freeblocks 
5406			 
5406 cd 05 21				call forth_push_numhl 
5409			 
5409				       NEXTW 
5409 c3 b2 24			jp macro_next 
540c				endm 
# End of macro NEXTW
540c			.SIZE: 
540c				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
540c 67				db WORD_SYS_CORE+83             
540d 40 54			dw .CREATE            
540f 05				db 4 + 1 
5410 .. 00			db "SIZE",0              
5415				endm 
# End of macro CWHEAD
5415			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
5415			; | | Compatible with PicoSPINet  
5415					if DEBUG_FORTH_WORDS_KEY 
5415						DMARK "SIZ" 
5415 f5				push af  
5416 3a 2a 54			ld a, (.dmark)  
5419 32 68 fe			ld (debug_mark),a  
541c 3a 2b 54			ld a, (.dmark+1)  
541f 32 69 fe			ld (debug_mark+1),a  
5422 3a 2c 54			ld a, (.dmark+2)  
5425 32 6a fe			ld (debug_mark+2),a  
5428 18 03			jr .pastdmark  
542a ..			.dmark: db "SIZ"  
542d f1			.pastdmark: pop af  
542e			endm  
# End of macro DMARK
542e						CALLMONITOR 
542e cd 6c fe			call debug_vector  
5431				endm  
# End of macro CALLMONITOR
5431					endif 
5431			 
5431					FORTH_DSP_VALUEHL 
5431 cd fc 22			call macro_dsp_valuehl 
5434				endm 
# End of macro FORTH_DSP_VALUEHL
5434			;		push hl 
5434					FORTH_DSP_POP 
5434 cd b4 23			call macro_forth_dsp_pop 
5437				endm 
# End of macro FORTH_DSP_POP
5437			;		pop hl 
5437 cd 94 04				call storage_file_size 
543a			 
543a cd 05 21				call forth_push_numhl 
543d			  
543d			 
543d				       NEXTW 
543d c3 b2 24			jp macro_next 
5440				endm 
# End of macro NEXTW
5440			 
5440			.CREATE: 
5440				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
5440 68				db WORD_SYS_CORE+84             
5441 ae 54			dw .APPEND            
5443 07				db 6 + 1 
5444 .. 00			db "CREATE",0              
544b				endm 
# End of macro CWHEAD
544b			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
544b			; | | e.g.  
544b			; | | TestProgram CREATE 
544b			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
544b			; | |  
544b			; | | Max file IDs are 255. 
544b			; | |  
544b			; | | Compatible with PicoSPINet  
544b					 
544b					if DEBUG_FORTH_WORDS_KEY 
544b						DMARK "CRT" 
544b f5				push af  
544c 3a 60 54			ld a, (.dmark)  
544f 32 68 fe			ld (debug_mark),a  
5452 3a 61 54			ld a, (.dmark+1)  
5455 32 69 fe			ld (debug_mark+1),a  
5458 3a 62 54			ld a, (.dmark+2)  
545b 32 6a fe			ld (debug_mark+2),a  
545e 18 03			jr .pastdmark  
5460 ..			.dmark: db "CRT"  
5463 f1			.pastdmark: pop af  
5464			endm  
# End of macro DMARK
5464						CALLMONITOR 
5464 cd 6c fe			call debug_vector  
5467				endm  
# End of macro CALLMONITOR
5467					endif 
5467			;		call storage_get_block_0 
5467			 
5467					; TODO pop hl 
5467			 
5467					;v5 FORTH_DSP_VALUE 
5467					FORTH_DSP_VALUE 
5467 cd e5 22			call macro_forth_dsp_value 
546a				endm 
# End of macro FORTH_DSP_VALUE
546a			 
546a				if DEBUG_STORESE 
546a					DMARK "CR1" 
546a f5				push af  
546b 3a 7f 54			ld a, (.dmark)  
546e 32 68 fe			ld (debug_mark),a  
5471 3a 80 54			ld a, (.dmark+1)  
5474 32 69 fe			ld (debug_mark+1),a  
5477 3a 81 54			ld a, (.dmark+2)  
547a 32 6a fe			ld (debug_mark+2),a  
547d 18 03			jr .pastdmark  
547f ..			.dmark: db "CR1"  
5482 f1			.pastdmark: pop af  
5483			endm  
# End of macro DMARK
5483					CALLMONITOR 
5483 cd 6c fe			call debug_vector  
5486				endm  
# End of macro CALLMONITOR
5486				endif 
5486			;		push hl 
5486			;		FORTH_DSP_POP 
5486			;		pop hl 
5486			 
5486			;		inc hl   ; move past the type marker 
5486			 
5486 cd 68 08				call storage_create 
5489			 
5489				if DEBUG_STORESE 
5489					DMARK "CT1" 
5489 f5				push af  
548a 3a 9e 54			ld a, (.dmark)  
548d 32 68 fe			ld (debug_mark),a  
5490 3a 9f 54			ld a, (.dmark+1)  
5493 32 69 fe			ld (debug_mark+1),a  
5496 3a a0 54			ld a, (.dmark+2)  
5499 32 6a fe			ld (debug_mark+2),a  
549c 18 03			jr .pastdmark  
549e ..			.dmark: db "CT1"  
54a1 f1			.pastdmark: pop af  
54a2			endm  
# End of macro DMARK
54a2					CALLMONITOR 
54a2 cd 6c fe			call debug_vector  
54a5				endm  
# End of macro CALLMONITOR
54a5				endif 
54a5			;		push hl 
54a5					FORTH_DSP_POP 
54a5 cd b4 23			call macro_forth_dsp_pop 
54a8				endm 
# End of macro FORTH_DSP_POP
54a8			;		pop hl 
54a8					; push file id to stack 
54a8 cd 05 21				call forth_push_numhl 
54ab			 
54ab			 
54ab			 
54ab				       NEXTW 
54ab c3 b2 24			jp macro_next 
54ae				endm 
# End of macro NEXTW
54ae			 
54ae			.APPEND: 
54ae				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
54ae 69				db WORD_SYS_CORE+85             
54af 3f 55			dw .SDEL            
54b1 07				db 6 + 1 
54b2 .. 00			db "APPEND",0              
54b9				endm 
# End of macro CWHEAD
54b9			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
54b9			; | | e.g. 
54b9			; | | Test CREATE      -> $01 
54b9			; | | "A string to add to file" $01 APPEND 
54b9			; | |  
54b9			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
54b9			; | | Compatible with PicoSPINet  
54b9					if DEBUG_FORTH_WORDS_KEY 
54b9						DMARK "APP" 
54b9 f5				push af  
54ba 3a ce 54			ld a, (.dmark)  
54bd 32 68 fe			ld (debug_mark),a  
54c0 3a cf 54			ld a, (.dmark+1)  
54c3 32 69 fe			ld (debug_mark+1),a  
54c6 3a d0 54			ld a, (.dmark+2)  
54c9 32 6a fe			ld (debug_mark+2),a  
54cc 18 03			jr .pastdmark  
54ce ..			.dmark: db "APP"  
54d1 f1			.pastdmark: pop af  
54d2			endm  
# End of macro DMARK
54d2						CALLMONITOR 
54d2 cd 6c fe			call debug_vector  
54d5				endm  
# End of macro CALLMONITOR
54d5					endif 
54d5			 
54d5					FORTH_DSP_VALUEHL 
54d5 cd fc 22			call macro_dsp_valuehl 
54d8				endm 
# End of macro FORTH_DSP_VALUEHL
54d8 e5					push hl 	; save file id 
54d9			 
54d9				if DEBUG_STORESE 
54d9					DMARK "AP1" 
54d9 f5				push af  
54da 3a ee 54			ld a, (.dmark)  
54dd 32 68 fe			ld (debug_mark),a  
54e0 3a ef 54			ld a, (.dmark+1)  
54e3 32 69 fe			ld (debug_mark+1),a  
54e6 3a f0 54			ld a, (.dmark+2)  
54e9 32 6a fe			ld (debug_mark+2),a  
54ec 18 03			jr .pastdmark  
54ee ..			.dmark: db "AP1"  
54f1 f1			.pastdmark: pop af  
54f2			endm  
# End of macro DMARK
54f2					CALLMONITOR 
54f2 cd 6c fe			call debug_vector  
54f5				endm  
# End of macro CALLMONITOR
54f5				endif 
54f5					FORTH_DSP_POP 
54f5 cd b4 23			call macro_forth_dsp_pop 
54f8				endm 
# End of macro FORTH_DSP_POP
54f8			 
54f8					FORTH_DSP_VALUEHL 
54f8 cd fc 22			call macro_dsp_valuehl 
54fb				endm 
# End of macro FORTH_DSP_VALUEHL
54fb					;v5 FORTH_DSP_VALUE 
54fb e5					push hl 	; save ptr to string to save 
54fc			 
54fc				if DEBUG_STORESE 
54fc					DMARK "AP1" 
54fc f5				push af  
54fd 3a 11 55			ld a, (.dmark)  
5500 32 68 fe			ld (debug_mark),a  
5503 3a 12 55			ld a, (.dmark+1)  
5506 32 69 fe			ld (debug_mark+1),a  
5509 3a 13 55			ld a, (.dmark+2)  
550c 32 6a fe			ld (debug_mark+2),a  
550f 18 03			jr .pastdmark  
5511 ..			.dmark: db "AP1"  
5514 f1			.pastdmark: pop af  
5515			endm  
# End of macro DMARK
5515					CALLMONITOR 
5515 cd 6c fe			call debug_vector  
5518				endm  
# End of macro CALLMONITOR
5518				endif 
5518					FORTH_DSP_POP 
5518 cd b4 23			call macro_forth_dsp_pop 
551b				endm 
# End of macro FORTH_DSP_POP
551b			 
551b d1					pop de 
551c e1					pop hl 
551d				if DEBUG_STORESE 
551d					DMARK "AP2" 
551d f5				push af  
551e 3a 32 55			ld a, (.dmark)  
5521 32 68 fe			ld (debug_mark),a  
5524 3a 33 55			ld a, (.dmark+1)  
5527 32 69 fe			ld (debug_mark+1),a  
552a 3a 34 55			ld a, (.dmark+2)  
552d 32 6a fe			ld (debug_mark+2),a  
5530 18 03			jr .pastdmark  
5532 ..			.dmark: db "AP2"  
5535 f1			.pastdmark: pop af  
5536			endm  
# End of macro DMARK
5536					CALLMONITOR 
5536 cd 6c fe			call debug_vector  
5539				endm  
# End of macro CALLMONITOR
5539				endif 
5539					;inc de ; skip var type indicator 
5539			 
5539					; TODO how to append numerics???? 
5539			 
5539 cd 55 0b				call storage_append		 
553c			 
553c				       NEXTW 
553c c3 b2 24			jp macro_next 
553f				endm 
# End of macro NEXTW
553f			.SDEL: 
553f				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
553f 6a				db WORD_SYS_CORE+86             
5540 8b 55			dw .OPEN            
5542 05				db 4 + 1 
5543 .. 00			db "ERA",0              
5547				endm 
# End of macro CWHEAD
5547			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
5547			; | | Compatible with PicoSPINet  
5547					FORTH_DSP_VALUEHL 
5547 cd fc 22			call macro_dsp_valuehl 
554a				endm 
# End of macro FORTH_DSP_VALUEHL
554a			;		push hl 	; save file id 
554a			 
554a					if DEBUG_FORTH_WORDS_KEY 
554a						DMARK "ERA" 
554a f5				push af  
554b 3a 5f 55			ld a, (.dmark)  
554e 32 68 fe			ld (debug_mark),a  
5551 3a 60 55			ld a, (.dmark+1)  
5554 32 69 fe			ld (debug_mark+1),a  
5557 3a 61 55			ld a, (.dmark+2)  
555a 32 6a fe			ld (debug_mark+2),a  
555d 18 03			jr .pastdmark  
555f ..			.dmark: db "ERA"  
5562 f1			.pastdmark: pop af  
5563			endm  
# End of macro DMARK
5563						CALLMONITOR 
5563 cd 6c fe			call debug_vector  
5566				endm  
# End of macro CALLMONITOR
5566					endif 
5566				if DEBUG_STORESE 
5566					DMARK "ER1" 
5566 f5				push af  
5567 3a 7b 55			ld a, (.dmark)  
556a 32 68 fe			ld (debug_mark),a  
556d 3a 7c 55			ld a, (.dmark+1)  
5570 32 69 fe			ld (debug_mark+1),a  
5573 3a 7d 55			ld a, (.dmark+2)  
5576 32 6a fe			ld (debug_mark+2),a  
5579 18 03			jr .pastdmark  
557b ..			.dmark: db "ER1"  
557e f1			.pastdmark: pop af  
557f			endm  
# End of macro DMARK
557f					CALLMONITOR 
557f cd 6c fe			call debug_vector  
5582				endm  
# End of macro CALLMONITOR
5582				endif 
5582					FORTH_DSP_POP 
5582 cd b4 23			call macro_forth_dsp_pop 
5585				endm 
# End of macro FORTH_DSP_POP
5585			 
5585			;		pop hl 
5585			 
5585 cd a7 06				call storage_erase 
5588				       NEXTW 
5588 c3 b2 24			jp macro_next 
558b				endm 
# End of macro NEXTW
558b			 
558b			.OPEN: 
558b				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
558b 6b				db WORD_SYS_CORE+87             
558c 1f 56			dw .READ            
558e 05				db 4 + 1 
558f .. 00			db "OPEN",0              
5594				endm 
# End of macro CWHEAD
5594			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
5594			; | | e.g. 
5594			; | | $01 OPEN $01 DO $01 READ . LOOP 
5594			; | | 
5594			; | | Will return with 255 blocks if the file does not exist 
5594			; | | Compatible with PicoSPINet  
5594			 
5594					if DEBUG_FORTH_WORDS_KEY 
5594						DMARK "OPN" 
5594 f5				push af  
5595 3a a9 55			ld a, (.dmark)  
5598 32 68 fe			ld (debug_mark),a  
559b 3a aa 55			ld a, (.dmark+1)  
559e 32 69 fe			ld (debug_mark+1),a  
55a1 3a ab 55			ld a, (.dmark+2)  
55a4 32 6a fe			ld (debug_mark+2),a  
55a7 18 03			jr .pastdmark  
55a9 ..			.dmark: db "OPN"  
55ac f1			.pastdmark: pop af  
55ad			endm  
# End of macro DMARK
55ad						CALLMONITOR 
55ad cd 6c fe			call debug_vector  
55b0				endm  
# End of macro CALLMONITOR
55b0					endif 
55b0					; TODO handle multiple file opens 
55b0			 
55b0 3e 01			       	ld a, 1 
55b2 32 67 fa				ld (store_openext), a 
55b5			 
55b5					; get max extents for this file 
55b5				 
55b5								 
55b5					FORTH_DSP_VALUEHL 
55b5 cd fc 22			call macro_dsp_valuehl 
55b8				endm 
# End of macro FORTH_DSP_VALUEHL
55b8			 
55b8 65					ld h, l 
55b9 2e 00				ld l, 0 
55bb			 
55bb					; store file id 
55bb			 
55bb 7c					ld a, h 
55bc 32 64 fa				ld (store_filecache), a 
55bf			 
55bf				if DEBUG_STORESE 
55bf					DMARK "OPN" 
55bf f5				push af  
55c0 3a d4 55			ld a, (.dmark)  
55c3 32 68 fe			ld (debug_mark),a  
55c6 3a d5 55			ld a, (.dmark+1)  
55c9 32 69 fe			ld (debug_mark+1),a  
55cc 3a d6 55			ld a, (.dmark+2)  
55cf 32 6a fe			ld (debug_mark+2),a  
55d2 18 03			jr .pastdmark  
55d4 ..			.dmark: db "OPN"  
55d7 f1			.pastdmark: pop af  
55d8			endm  
# End of macro DMARK
55d8					CALLMONITOR 
55d8 cd 6c fe			call debug_vector  
55db				endm  
# End of macro CALLMONITOR
55db				endif 
55db			;		push hl 
55db					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
55db cd b4 23			call macro_forth_dsp_pop 
55de				endm 
# End of macro FORTH_DSP_POP
55de			;		pop hl 
55de						 
55de 11 77 fa				ld de, store_page      ; get block zero of file 
55e1 cd be 09				call storage_read 
55e4 cd f8 0f			call ishlzero 
55e7 20 04			jr nz, .opfound 
55e9			 
55e9				; file does not exist so indicate with 255 extents in use 
55e9			 
55e9 3e ff			ld a, 255 
55eb 18 29			jr .skipopeneof 
55ed			 
55ed			 
55ed			.opfound: 
55ed			 
55ed			 
55ed 3a 79 fa				ld a, (store_page+2)    ; max extents for this file 
55f0 32 66 fa				ld  (store_openmaxext), a   ; get our limit and push 
55f3					 
55f3				if DEBUG_STORESE 
55f3					DMARK "OPx" 
55f3 f5				push af  
55f4 3a 08 56			ld a, (.dmark)  
55f7 32 68 fe			ld (debug_mark),a  
55fa 3a 09 56			ld a, (.dmark+1)  
55fd 32 69 fe			ld (debug_mark+1),a  
5600 3a 0a 56			ld a, (.dmark+2)  
5603 32 6a fe			ld (debug_mark+2),a  
5606 18 03			jr .pastdmark  
5608 ..			.dmark: db "OPx"  
560b f1			.pastdmark: pop af  
560c			endm  
# End of macro DMARK
560c					CALLMONITOR 
560c cd 6c fe			call debug_vector  
560f				endm  
# End of macro CALLMONITOR
560f				endif 
560f fe 00				cp 0 
5611 20 03				jr nz, .skipopeneof 
5613					; have opened an empty file 
5613					 
5613 32 67 fa				ld (store_openext), a 
5616			 
5616			.skipopeneof: 
5616			 
5616 6f					ld l, a 
5617 26 00				ld h, 0 
5619 cd 05 21				call forth_push_numhl 
561c			 
561c			 
561c				       NEXTW 
561c c3 b2 24			jp macro_next 
561f				endm 
# End of macro NEXTW
561f			.READ: 
561f				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
561f 6c				db WORD_SYS_CORE+88             
5620 49 57			dw .EOF            
5622 05				db 4 + 1 
5623 .. 00			db "READ",0              
5628				endm 
# End of macro CWHEAD
5628			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
5628			; | | e.g. 
5628			; | | $01 OPEN $01 DO READ . LOOP 
5628			; | | 
5628			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
5628			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
5628			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
5628			; | | two bytes contain the file id and extent. 
5628			; | |  
5628			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
5628			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
5628			; | | Compatible with PicoSPINet  
5628			 
5628					if DEBUG_FORTH_WORDS_KEY 
5628						DMARK "REA" 
5628 f5				push af  
5629 3a 3d 56			ld a, (.dmark)  
562c 32 68 fe			ld (debug_mark),a  
562f 3a 3e 56			ld a, (.dmark+1)  
5632 32 69 fe			ld (debug_mark+1),a  
5635 3a 3f 56			ld a, (.dmark+2)  
5638 32 6a fe			ld (debug_mark+2),a  
563b 18 03			jr .pastdmark  
563d ..			.dmark: db "REA"  
5640 f1			.pastdmark: pop af  
5641			endm  
# End of macro DMARK
5641						CALLMONITOR 
5641 cd 6c fe			call debug_vector  
5644				endm  
# End of macro CALLMONITOR
5644					endif 
5644					; store_openext use it. If zero it is EOF 
5644			 
5644					; read block from current stream id 
5644					; if the block does not contain zero term keep reading blocks until zero found 
5644					; push the block to stack 
5644					; save the block id to stream 
5644			 
5644			 
5644 cd 76 57				call .testeof 
5647 3e 01				ld a, 1 
5649 bd					cp l 
564a ca 25 57				jp z, .ateof 
564d			 
564d			 
564d			;		FORTH_DSP_VALUEHL 
564d			 
564d			;		push hl 
564d			 
564d			;	if DEBUG_STORESE 
564d			;		DMARK "REA" 
564d			;		CALLMONITOR 
564d			;	endif 
564d			;		FORTH_DSP_POP 
564d			 
564d			;		pop hl 
564d				 
564d 3a 64 fa				ld a, (store_filecache) 
5650 67					ld h,a 
5651			 
5651 3a 67 fa				ld a, (store_openext) 
5654 6f					ld l, a 
5655					 
5655 fe 00				cp 0 
5657 ca 25 57				jp z, .ateof     ; dont read past eof 
565a			 
565a cd a1 0c				call storage_clear_page 
565d			 
565d 11 77 fa				ld de, store_page 
5660				if DEBUG_STORESE 
5660					DMARK "RE1" 
5660 f5				push af  
5661 3a 75 56			ld a, (.dmark)  
5664 32 68 fe			ld (debug_mark),a  
5667 3a 76 56			ld a, (.dmark+1)  
566a 32 69 fe			ld (debug_mark+1),a  
566d 3a 77 56			ld a, (.dmark+2)  
5670 32 6a fe			ld (debug_mark+2),a  
5673 18 03			jr .pastdmark  
5675 ..			.dmark: db "RE1"  
5678 f1			.pastdmark: pop af  
5679			endm  
# End of macro DMARK
5679					CALLMONITOR 
5679 cd 6c fe			call debug_vector  
567c				endm  
# End of macro CALLMONITOR
567c				endif 
567c cd be 09				call storage_read 
567f			 
567f				if DEBUG_STORESE 
567f					DMARK "RE2" 
567f f5				push af  
5680 3a 94 56			ld a, (.dmark)  
5683 32 68 fe			ld (debug_mark),a  
5686 3a 95 56			ld a, (.dmark+1)  
5689 32 69 fe			ld (debug_mark+1),a  
568c 3a 96 56			ld a, (.dmark+2)  
568f 32 6a fe			ld (debug_mark+2),a  
5692 18 03			jr .pastdmark  
5694 ..			.dmark: db "RE2"  
5697 f1			.pastdmark: pop af  
5698			endm  
# End of macro DMARK
5698					CALLMONITOR 
5698 cd 6c fe			call debug_vector  
569b				endm  
# End of macro CALLMONITOR
569b				endif 
569b cd f8 0f			call ishlzero 
569e			;	ld a, l 
569e			;	add h 
569e			;	cp 0 
569e ca 25 57			jp z, .readeof 
56a1			 
56a1				; not eof so hl should point to data to push to stack 
56a1			 
56a1				if DEBUG_STORESE 
56a1					DMARK "RE3" 
56a1 f5				push af  
56a2 3a b6 56			ld a, (.dmark)  
56a5 32 68 fe			ld (debug_mark),a  
56a8 3a b7 56			ld a, (.dmark+1)  
56ab 32 69 fe			ld (debug_mark+1),a  
56ae 3a b8 56			ld a, (.dmark+2)  
56b1 32 6a fe			ld (debug_mark+2),a  
56b4 18 03			jr .pastdmark  
56b6 ..			.dmark: db "RE3"  
56b9 f1			.pastdmark: pop af  
56ba			endm  
# End of macro DMARK
56ba					CALLMONITOR 
56ba cd 6c fe			call debug_vector  
56bd				endm  
# End of macro CALLMONITOR
56bd				endif 
56bd cd 73 21			call forth_push_str 
56c0			 
56c0				if DEBUG_STORESE 
56c0					DMARK "RE4" 
56c0 f5				push af  
56c1 3a d5 56			ld a, (.dmark)  
56c4 32 68 fe			ld (debug_mark),a  
56c7 3a d6 56			ld a, (.dmark+1)  
56ca 32 69 fe			ld (debug_mark+1),a  
56cd 3a d7 56			ld a, (.dmark+2)  
56d0 32 6a fe			ld (debug_mark+2),a  
56d3 18 03			jr .pastdmark  
56d5 ..			.dmark: db "RE4"  
56d8 f1			.pastdmark: pop af  
56d9			endm  
# End of macro DMARK
56d9					CALLMONITOR 
56d9 cd 6c fe			call debug_vector  
56dc				endm  
# End of macro CALLMONITOR
56dc				endif 
56dc				; get next block  or mark as eof 
56dc			 
56dc 3a 66 fa			ld a, (store_openmaxext)   ; get our limit 
56df 4f				ld c, a	 
56e0 3a 67 fa			ld a, (store_openext) 
56e3			 
56e3				if DEBUG_STORESE 
56e3					DMARK "RE5" 
56e3 f5				push af  
56e4 3a f8 56			ld a, (.dmark)  
56e7 32 68 fe			ld (debug_mark),a  
56ea 3a f9 56			ld a, (.dmark+1)  
56ed 32 69 fe			ld (debug_mark+1),a  
56f0 3a fa 56			ld a, (.dmark+2)  
56f3 32 6a fe			ld (debug_mark+2),a  
56f6 18 03			jr .pastdmark  
56f8 ..			.dmark: db "RE5"  
56fb f1			.pastdmark: pop af  
56fc			endm  
# End of macro DMARK
56fc					CALLMONITOR 
56fc cd 6c fe			call debug_vector  
56ff				endm  
# End of macro CALLMONITOR
56ff				endif 
56ff b9				cp c 
5700 28 23			jr z, .readeof     ; at last extent 
5702			 
5702 3c					inc a 
5703 32 67 fa				ld (store_openext), a 
5706			 
5706				if DEBUG_STORESE 
5706					DMARK "RE6" 
5706 f5				push af  
5707 3a 1b 57			ld a, (.dmark)  
570a 32 68 fe			ld (debug_mark),a  
570d 3a 1c 57			ld a, (.dmark+1)  
5710 32 69 fe			ld (debug_mark+1),a  
5713 3a 1d 57			ld a, (.dmark+2)  
5716 32 6a fe			ld (debug_mark+2),a  
5719 18 03			jr .pastdmark  
571b ..			.dmark: db "RE6"  
571e f1			.pastdmark: pop af  
571f			endm  
# End of macro DMARK
571f					CALLMONITOR 
571f cd 6c fe			call debug_vector  
5722				endm  
# End of macro CALLMONITOR
5722				endif 
5722			 
5722			 
5722				       NEXTW 
5722 c3 b2 24			jp macro_next 
5725				endm 
# End of macro NEXTW
5725			.ateof: 
5725				;	ld hl, .showeof 
5725				;	call forth_push_str 
5725 3e 00		.readeof:	ld a, 0 
5727 32 67 fa				ld (store_openext), a 
572a			 
572a					 
572a				if DEBUG_STORESE 
572a					DMARK "REF" 
572a f5				push af  
572b 3a 3f 57			ld a, (.dmark)  
572e 32 68 fe			ld (debug_mark),a  
5731 3a 40 57			ld a, (.dmark+1)  
5734 32 69 fe			ld (debug_mark+1),a  
5737 3a 41 57			ld a, (.dmark+2)  
573a 32 6a fe			ld (debug_mark+2),a  
573d 18 03			jr .pastdmark  
573f ..			.dmark: db "REF"  
5742 f1			.pastdmark: pop af  
5743			endm  
# End of macro DMARK
5743					CALLMONITOR 
5743 cd 6c fe			call debug_vector  
5746				endm  
# End of macro CALLMONITOR
5746				endif 
5746				       NEXTW 
5746 c3 b2 24			jp macro_next 
5749				endm 
# End of macro NEXTW
5749			 
5749			;.showeof:   db "eof", 0 
5749			 
5749			 
5749			.EOF: 
5749				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
5749 6d				db WORD_SYS_CORE+89             
574a 8b 57			dw .FORMAT            
574c 04				db 3 + 1 
574d .. 00			db "EOF",0              
5751				endm 
# End of macro CWHEAD
5751			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
5751			; | | e.g. 
5751			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
5751			; | | Compatible with PicoSPINet  
5751					; TODO if current block id for stream is zero then push true else false 
5751			 
5751					if DEBUG_FORTH_WORDS_KEY 
5751						DMARK "EOF" 
5751 f5				push af  
5752 3a 66 57			ld a, (.dmark)  
5755 32 68 fe			ld (debug_mark),a  
5758 3a 67 57			ld a, (.dmark+1)  
575b 32 69 fe			ld (debug_mark+1),a  
575e 3a 68 57			ld a, (.dmark+2)  
5761 32 6a fe			ld (debug_mark+2),a  
5764 18 03			jr .pastdmark  
5766 ..			.dmark: db "EOF"  
5769 f1			.pastdmark: pop af  
576a			endm  
# End of macro DMARK
576a						CALLMONITOR 
576a cd 6c fe			call debug_vector  
576d				endm  
# End of macro CALLMONITOR
576d					endif 
576d			 
576d					; TODO handlue multiple file streams 
576d			 
576d			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
576d cd 76 57				call .testeof 
5770 cd 05 21				call forth_push_numhl 
5773			 
5773			 
5773				       NEXTW 
5773 c3 b2 24			jp macro_next 
5776				endm 
# End of macro NEXTW
5776			 
5776			.testeof: 
5776 2e 01				ld l, 1 
5778 3a 66 fa				ld a, (store_openmaxext) 
577b fe 00				cp 0 
577d 28 09				jr  z, .eofdone   ; empty file 
577f 3a 67 fa				ld a, (store_openext) 
5782 fe 00				cp 0 
5784 28 02				jr  z, .eofdone 
5786 2e 00				ld l, 0 
5788 26 00		.eofdone:	ld h, 0 
578a c9					ret 
578b			 
578b			 
578b			 
578b			 
578b			.FORMAT: 
578b				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
578b 6d				db WORD_SYS_CORE+89             
578c dc 57			dw .LABEL            
578e 07				db 6 + 1 
578f .. 00			db "FORMAT",0              
5796				endm 
# End of macro CWHEAD
5796			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
5796			; | | Compatible with PicoSPINet  
5796					; TODO if current block id for stream is zero then push true else false 
5796				 
5796				if DEBUG_STORESE 
5796					DMARK "FOR" 
5796 f5				push af  
5797 3a ab 57			ld a, (.dmark)  
579a 32 68 fe			ld (debug_mark),a  
579d 3a ac 57			ld a, (.dmark+1)  
57a0 32 69 fe			ld (debug_mark+1),a  
57a3 3a ad 57			ld a, (.dmark+2)  
57a6 32 6a fe			ld (debug_mark+2),a  
57a9 18 03			jr .pastdmark  
57ab ..			.dmark: db "FOR"  
57ae f1			.pastdmark: pop af  
57af			endm  
# End of macro DMARK
57af					CALLMONITOR 
57af cd 6c fe			call debug_vector  
57b2				endm  
# End of macro CALLMONITOR
57b2				endif 
57b2					; Wipes the bank check flags to cause a reformat on next block 0 read 
57b2			 
57b2 21 01 00				ld hl, 1 
57b5 3e 00				ld a, 0 
57b7 cd 6a 02				call se_writebyte 
57ba			 
57ba				if DEBUG_STORESE 
57ba					DMARK "FO0" 
57ba f5				push af  
57bb 3a cf 57			ld a, (.dmark)  
57be 32 68 fe			ld (debug_mark),a  
57c1 3a d0 57			ld a, (.dmark+1)  
57c4 32 69 fe			ld (debug_mark+1),a  
57c7 3a d1 57			ld a, (.dmark+2)  
57ca 32 6a fe			ld (debug_mark+2),a  
57cd 18 03			jr .pastdmark  
57cf ..			.dmark: db "FO0"  
57d2 f1			.pastdmark: pop af  
57d3			endm  
# End of macro DMARK
57d3					CALLMONITOR 
57d3 cd 6c fe			call debug_vector  
57d6				endm  
# End of macro CALLMONITOR
57d6				endif 
57d6					; force bank init 
57d6			 
57d6 cd 16 05				call storage_get_block_0 
57d9					 
57d9				       NEXTW 
57d9 c3 b2 24			jp macro_next 
57dc				endm 
# End of macro NEXTW
57dc			.LABEL: 
57dc				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
57dc 6d				db WORD_SYS_CORE+89             
57dd 2a 58			dw .STOREPAGE            
57df 06				db 5 + 1 
57e0 .. 00			db "LABEL",0              
57e6				endm 
# End of macro CWHEAD
57e6			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
57e6			; | | Compatible with PicoSPINet  
57e6					; TODO test to see if bank is selected 
57e6				 
57e6					if DEBUG_FORTH_WORDS_KEY 
57e6						DMARK "LBL" 
57e6 f5				push af  
57e7 3a fb 57			ld a, (.dmark)  
57ea 32 68 fe			ld (debug_mark),a  
57ed 3a fc 57			ld a, (.dmark+1)  
57f0 32 69 fe			ld (debug_mark+1),a  
57f3 3a fd 57			ld a, (.dmark+2)  
57f6 32 6a fe			ld (debug_mark+2),a  
57f9 18 03			jr .pastdmark  
57fb ..			.dmark: db "LBL"  
57fe f1			.pastdmark: pop af  
57ff			endm  
# End of macro DMARK
57ff						CALLMONITOR 
57ff cd 6c fe			call debug_vector  
5802				endm  
# End of macro CALLMONITOR
5802					endif 
5802			;	if DEBUG_STORESE 
5802			;		DMARK "LBL" 
5802			;		CALLMONITOR 
5802			;	endif 
5802					FORTH_DSP_VALUEHL 
5802 cd fc 22			call macro_dsp_valuehl 
5805				endm 
# End of macro FORTH_DSP_VALUEHL
5805					;v5FORTH_DSP_VALUE 
5805					 
5805			;		push hl 
5805					FORTH_DSP_POP 
5805 cd b4 23			call macro_forth_dsp_pop 
5808				endm 
# End of macro FORTH_DSP_POP
5808			;		pop hl 
5808			 
5808			;v5		inc hl   ; move past the type marker 
5808			 
5808				if DEBUG_STORESE 
5808					DMARK "LBl" 
5808 f5				push af  
5809 3a 1d 58			ld a, (.dmark)  
580c 32 68 fe			ld (debug_mark),a  
580f 3a 1e 58			ld a, (.dmark+1)  
5812 32 69 fe			ld (debug_mark+1),a  
5815 3a 1f 58			ld a, (.dmark+2)  
5818 32 6a fe			ld (debug_mark+2),a  
581b 18 03			jr .pastdmark  
581d ..			.dmark: db "LBl"  
5820 f1			.pastdmark: pop af  
5821			endm  
# End of macro DMARK
5821					CALLMONITOR 
5821 cd 6c fe			call debug_vector  
5824				endm  
# End of macro CALLMONITOR
5824				endif 
5824 cd 3a 06				call storage_label 
5827			 
5827				       NEXTW 
5827 c3 b2 24			jp macro_next 
582a				endm 
# End of macro NEXTW
582a			.STOREPAGE: 
582a				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
582a 6d				db WORD_SYS_CORE+89             
582b 5d 58			dw .LABELS            
582d 0a				db 9 + 1 
582e .. 00			db "STOREPAGE",0              
5838				endm 
# End of macro CWHEAD
5838			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
5838			; | | Compatible with PicoSPINet  
5838					; TODO test to see if bank is selected 
5838				 
5838					if DEBUG_FORTH_WORDS_KEY 
5838						DMARK "STP" 
5838 f5				push af  
5839 3a 4d 58			ld a, (.dmark)  
583c 32 68 fe			ld (debug_mark),a  
583f 3a 4e 58			ld a, (.dmark+1)  
5842 32 69 fe			ld (debug_mark+1),a  
5845 3a 4f 58			ld a, (.dmark+2)  
5848 32 6a fe			ld (debug_mark+2),a  
584b 18 03			jr .pastdmark  
584d ..			.dmark: db "STP"  
5850 f1			.pastdmark: pop af  
5851			endm  
# End of macro DMARK
5851						CALLMONITOR 
5851 cd 6c fe			call debug_vector  
5854				endm  
# End of macro CALLMONITOR
5854					endif 
5854			;	if DEBUG_STORESE 
5854			;		DMARK "STP" 
5854			;		CALLMONITOR 
5854			;	endif 
5854			 
5854 21 77 fa			ld hl, store_page 
5857 cd 05 21			call forth_push_numhl 
585a			 
585a			 
585a				       NEXTW 
585a c3 b2 24			jp macro_next 
585d				endm 
# End of macro NEXTW
585d			.LABELS: 
585d				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
585d 6d				db WORD_SYS_CORE+89             
585e e7 58			dw .SCONST1            
5860 07				db 6 + 1 
5861 .. 00			db "LABELS",0              
5868				endm 
# End of macro CWHEAD
5868			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | TO TEST 
5868			; | | *NOT* Compatible with PicoSPINet  
5868					;  
5868			 
5868					; save the current device selected to restore afterwards 
5868				 
5868 3a 5d fa				ld a, (spi_device) 
586b f5					push af 
586c			 
586c			 
586c					; run through each of the banks 
586c			 
586c 21 01 00				ld hl, 1 
586f cd 05 21				call forth_push_numhl 
5872 3e ff				ld a, SPI_CE_HIGH 
5874 cb 87				res SPI_CE0, a 
5876 32 5d fa				ld (spi_device), a 
5879 cd 16 05				call storage_get_block_0 
587c 21 7a fa				ld hl, store_page+3 
587f cd 73 21				call forth_push_str 
5882			 
5882					 
5882 21 02 00				ld hl, 2 
5885 cd 05 21				call forth_push_numhl 
5888 3e ff				ld a, SPI_CE_HIGH 
588a cb 8f				res SPI_CE1, a 
588c 32 5d fa				ld (spi_device), a 
588f cd 16 05				call storage_get_block_0 
5892 21 7a fa				ld hl, store_page+3 
5895 cd 73 21				call forth_push_str 
5898			 
5898					 
5898 21 03 00				ld hl, 3 
589b cd 05 21				call forth_push_numhl 
589e 3e ff				ld a, SPI_CE_HIGH 
58a0 cb 97				res SPI_CE2, a 
58a2 32 5d fa				ld (spi_device), a 
58a5 cd 16 05				call storage_get_block_0 
58a8 21 7a fa				ld hl, store_page+3 
58ab cd 73 21				call forth_push_str 
58ae			 
58ae			 
58ae 21 04 00				ld hl, 4 
58b1 cd 05 21				call forth_push_numhl 
58b4 3e ff				ld a, SPI_CE_HIGH 
58b6 cb 9f				res SPI_CE3, a 
58b8 32 5d fa				ld (spi_device), a 
58bb cd 16 05				call storage_get_block_0 
58be 21 7a fa				ld hl, store_page+3 
58c1 cd 73 21				call forth_push_str 
58c4			 
58c4					 
58c4			 
58c4 21 05 00				ld hl, 5 
58c7 cd 05 21				call forth_push_numhl 
58ca 3e ff				ld a, SPI_CE_HIGH 
58cc cb a7				res SPI_CE4, a 
58ce 32 5d fa				ld (spi_device), a 
58d1 cd 16 05				call storage_get_block_0 
58d4 21 7a fa				ld hl, store_page+3 
58d7 cd 73 21				call forth_push_str 
58da			 
58da					 
58da					; push fixed count of storage devices (on board) for now 
58da			 
58da 21 05 00				ld hl, 5 
58dd cd 05 21				call forth_push_numhl 
58e0			 
58e0					; restore selected device  
58e0				 
58e0 f1					pop af 
58e1 32 5d fa				ld (spi_device), a 
58e4			 
58e4				       NEXTW 
58e4 c3 b2 24			jp macro_next 
58e7				endm 
# End of macro NEXTW
58e7			 
58e7			.SCONST1: 
58e7				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
58e7 6d				db WORD_SYS_CORE+89             
58e8 fe 58			dw .SCONST2            
58ea 07				db 6 + 1 
58eb .. 00			db "FILEID",0              
58f2				endm 
# End of macro CWHEAD
58f2			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
58f2			; | | Compatible with PicoSPINet  
58f2 3a 64 fa				ld a, (store_filecache) 
58f5 26 00				ld h, 0 
58f7 6f					ld l, a 
58f8 cd 05 21				call forth_push_numhl 
58fb					NEXTW 
58fb c3 b2 24			jp macro_next 
58fe				endm 
# End of macro NEXTW
58fe			.SCONST2: 
58fe				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
58fe 6d				db WORD_SYS_CORE+89             
58ff 16 59			dw .SCONST3            
5901 08				db 7 + 1 
5902 .. 00			db "FILEEXT",0              
590a				endm 
# End of macro CWHEAD
590a			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
590a			; | | Compatible with PicoSPINet  
590a 3a 67 fa				ld a, (store_openext) 
590d 26 00				ld h, 0 
590f 6f					ld l, a 
5910 cd 05 21				call forth_push_numhl 
5913					NEXTW 
5913 c3 b2 24			jp macro_next 
5916				endm 
# End of macro NEXTW
5916			.SCONST3: 
5916				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
5916 6d				db WORD_SYS_CORE+89             
5917 2e 59			dw .SCONST4            
5919 08				db 7 + 1 
591a .. 00			db "FILEMAX",0              
5922				endm 
# End of macro CWHEAD
5922			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5922			; | | Compatible with PicoSPINet  
5922 3a 66 fa				ld a, (store_openmaxext) 
5925 26 00				ld h, 0 
5927 6f					ld l, a 
5928 cd 05 21				call forth_push_numhl 
592b					NEXTW 
592b c3 b2 24			jp macro_next 
592e				endm 
# End of macro NEXTW
592e			.SCONST4: 
592e				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
592e 6d				db WORD_SYS_CORE+89             
592f 44 59			dw .SCONST5            
5931 09				db 8 + 1 
5932 .. 00			db "FILEADDR",0              
593b				endm 
# End of macro CWHEAD
593b			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currenlty open file to stack | DONE 
593b			; | | Compatible with PicoSPINet  
593b 2a 68 fa				ld hl, (store_openaddr) 
593e cd 05 21				call forth_push_numhl 
5941					NEXTW 
5941 c3 b2 24			jp macro_next 
5944				endm 
# End of macro NEXTW
5944			.SCONST5: 
5944				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
5944 6d				db WORD_SYS_CORE+89             
5945 65 59			dw .SCONST6            
5947 09				db 8 + 1 
5948 .. 00			db "FILEPAGE",0              
5951				endm 
# End of macro CWHEAD
5951			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
5951			; | | Compatible with PicoSPINet  
5951 2a 68 fa				ld hl, (store_openaddr) 
5954 e5					push hl 
5955 c1					pop bc 
5956 16 00				ld d, 0 
5958 1e 40				ld e, STORE_BLOCK_PHY 
595a cd 2c 0f				call Div16 
595d c5					push bc 
595e e1					pop hl 
595f cd 05 21				call forth_push_numhl 
5962					NEXTW 
5962 c3 b2 24			jp macro_next 
5965				endm 
# End of macro NEXTW
5965			.SCONST6: 
5965				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
5965 6d				db WORD_SYS_CORE+89             
5966 7e 59			dw .ENDSTORAGE            
5968 09				db 8 + 1 
5969 .. 00			db "READCONT",0              
5972				endm 
# End of macro CWHEAD
5972			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
5972			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
5972			; | | a further read should, if applicable, be CONCAT to the previous read. 
5972			; | | Compatible with PicoSPINet  
5972 3a 6a fa				ld a, (store_readcont) 
5975 26 00				ld h, 0 
5977 6f					ld l, a 
5978 cd 05 21				call forth_push_numhl 
597b					NEXTW 
597b c3 b2 24			jp macro_next 
597e				endm 
# End of macro NEXTW
597e			.ENDSTORAGE: 
597e			; eof 
# End of file forth_words_storage.asm
597e			endif 
597e				include "forth_words_device.asm" 
597e			; Device related words 
597e			 
597e			; | ## Device Words 
597e			 
597e			;if SOUND_ENABLE 
597e			;.NOTE: 
597e			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
597e			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds | TODO 
597e			;		if DEBUG_FORTH_WORDS_KEY 
597e			;			DMARK "NTE" 
597e			;			CALLMONITOR 
597e			;		endif 
597e			; 
597e			;	 
597e			; 
597e			;		NEXTW 
597e			;.AFTERSOUND: 
597e			;endif 
597e			 
597e			 
597e			USE_GPIO: equ 0 
597e			 
597e			if USE_GPIO 
597e			.GP1: 
597e				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
597e			; | IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result  |  
597e					NEXTW 
597e			.GP2: 
597e				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
597e			; | IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2  |  
597e			 
597e					NEXTW 
597e			 
597e			.GP3: 
597e				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
597e			; | IOBYTE ( u1 --  )    Perform a GPIO write of byte u1  |  
597e			 
597e					NEXTW 
597e			 
597e			.GP4: 
597e				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
597e			; | IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin  |  
597e			 
597e					NEXTW 
597e			.SIN: 
597e			 
597e			 
597e			endif 
597e			 
597e			 
597e				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
597e 33				db WORD_SYS_CORE+31             
597f b3 59			dw .SOUT            
5981 03				db 2 + 1 
5982 .. 00			db "IN",0              
5985				endm 
# End of macro CWHEAD
5985			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
5985					if DEBUG_FORTH_WORDS_KEY 
5985						DMARK "IN." 
5985 f5				push af  
5986 3a 9a 59			ld a, (.dmark)  
5989 32 68 fe			ld (debug_mark),a  
598c 3a 9b 59			ld a, (.dmark+1)  
598f 32 69 fe			ld (debug_mark+1),a  
5992 3a 9c 59			ld a, (.dmark+2)  
5995 32 6a fe			ld (debug_mark+2),a  
5998 18 03			jr .pastdmark  
599a ..			.dmark: db "IN."  
599d f1			.pastdmark: pop af  
599e			endm  
# End of macro DMARK
599e						CALLMONITOR 
599e cd 6c fe			call debug_vector  
59a1				endm  
# End of macro CALLMONITOR
59a1					endif 
59a1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
59a1 cd fc 22			call macro_dsp_valuehl 
59a4				endm 
# End of macro FORTH_DSP_VALUEHL
59a4			 
59a4 e5					push hl 
59a5			 
59a5					; destroy value TOS 
59a5			 
59a5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59a5 cd b4 23			call macro_forth_dsp_pop 
59a8				endm 
# End of macro FORTH_DSP_POP
59a8			 
59a8					; one value on hl get other one back 
59a8			 
59a8 c1					pop bc 
59a9			 
59a9					; do the sub 
59a9			;		ex de, hl 
59a9			 
59a9 ed 68				in l,(c) 
59ab			 
59ab					; save it 
59ab			 
59ab 26 00				ld h,0 
59ad			 
59ad					; TODO push value back onto stack for another op etc 
59ad			 
59ad cd 05 21				call forth_push_numhl 
59b0					NEXTW 
59b0 c3 b2 24			jp macro_next 
59b3				endm 
# End of macro NEXTW
59b3			.SOUT: 
59b3				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
59b3 34				db WORD_SYS_CORE+32             
59b4 06 5a			dw .SPIO            
59b6 04				db 3 + 1 
59b7 .. 00			db "OUT",0              
59bb				endm 
# End of macro CWHEAD
59bb			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
59bb					if DEBUG_FORTH_WORDS_KEY 
59bb						DMARK "OUT" 
59bb f5				push af  
59bc 3a d0 59			ld a, (.dmark)  
59bf 32 68 fe			ld (debug_mark),a  
59c2 3a d1 59			ld a, (.dmark+1)  
59c5 32 69 fe			ld (debug_mark+1),a  
59c8 3a d2 59			ld a, (.dmark+2)  
59cb 32 6a fe			ld (debug_mark+2),a  
59ce 18 03			jr .pastdmark  
59d0 ..			.dmark: db "OUT"  
59d3 f1			.pastdmark: pop af  
59d4			endm  
# End of macro DMARK
59d4						CALLMONITOR 
59d4 cd 6c fe			call debug_vector  
59d7				endm  
# End of macro CALLMONITOR
59d7					endif 
59d7			 
59d7					; get port 
59d7			 
59d7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
59d7 cd fc 22			call macro_dsp_valuehl 
59da				endm 
# End of macro FORTH_DSP_VALUEHL
59da			 
59da e5					push hl 
59db			 
59db					; destroy value TOS 
59db			 
59db					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59db cd b4 23			call macro_forth_dsp_pop 
59de				endm 
# End of macro FORTH_DSP_POP
59de			 
59de					; get byte to send 
59de			 
59de					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
59de cd fc 22			call macro_dsp_valuehl 
59e1				endm 
# End of macro FORTH_DSP_VALUEHL
59e1			 
59e1			;		push hl 
59e1			 
59e1					; destroy value TOS 
59e1			 
59e1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59e1 cd b4 23			call macro_forth_dsp_pop 
59e4				endm 
# End of macro FORTH_DSP_POP
59e4			 
59e4					; one value on hl get other one back 
59e4			 
59e4			;		pop hl 
59e4			 
59e4 c1					pop bc 
59e5			 
59e5					if DEBUG_FORTH_WORDS 
59e5						DMARK "OUT" 
59e5 f5				push af  
59e6 3a fa 59			ld a, (.dmark)  
59e9 32 68 fe			ld (debug_mark),a  
59ec 3a fb 59			ld a, (.dmark+1)  
59ef 32 69 fe			ld (debug_mark+1),a  
59f2 3a fc 59			ld a, (.dmark+2)  
59f5 32 6a fe			ld (debug_mark+2),a  
59f8 18 03			jr .pastdmark  
59fa ..			.dmark: db "OUT"  
59fd f1			.pastdmark: pop af  
59fe			endm  
# End of macro DMARK
59fe						CALLMONITOR 
59fe cd 6c fe			call debug_vector  
5a01				endm  
# End of macro CALLMONITOR
5a01					endif 
5a01			 
5a01 ed 69				out (c), l 
5a03			 
5a03					NEXTW 
5a03 c3 b2 24			jp macro_next 
5a06				endm 
# End of macro NEXTW
5a06			 
5a06			 
5a06			.SPIO: 
5a06			 
5a06			if STORAGE_SE 
5a06				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
5a06 51				db WORD_SYS_CORE+61             
5a07 17 5a			dw .SPICEH            
5a09 07				db 6 + 1 
5a0a .. 00			db "SPICEL",0              
5a11				endm 
# End of macro CWHEAD
5a11			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5a11			 
5a11 cd 13 02				call spi_ce_low 
5a14			    NEXTW 
5a14 c3 b2 24			jp macro_next 
5a17				endm 
# End of macro NEXTW
5a17			 
5a17			.SPICEH: 
5a17				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
5a17 51				db WORD_SYS_CORE+61             
5a18 28 5a			dw .SPIOb            
5a1a 07				db 6 + 1 
5a1b .. 00			db "SPICEH",0              
5a22				endm 
# End of macro CWHEAD
5a22			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
5a22			 
5a22 cd 02 02				call spi_ce_high 
5a25			    NEXTW 
5a25 c3 b2 24			jp macro_next 
5a28				endm 
# End of macro NEXTW
5a28			 
5a28			 
5a28			.SPIOb: 
5a28			 
5a28				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
5a28 51				db WORD_SYS_CORE+61             
5a29 5a 5a			dw .SPII            
5a2b 05				db 4 + 1 
5a2c .. 00			db "SPIO",0              
5a31				endm 
# End of macro CWHEAD
5a31			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
5a31			 
5a31					if DEBUG_FORTH_WORDS_KEY 
5a31						DMARK "SPo" 
5a31 f5				push af  
5a32 3a 46 5a			ld a, (.dmark)  
5a35 32 68 fe			ld (debug_mark),a  
5a38 3a 47 5a			ld a, (.dmark+1)  
5a3b 32 69 fe			ld (debug_mark+1),a  
5a3e 3a 48 5a			ld a, (.dmark+2)  
5a41 32 6a fe			ld (debug_mark+2),a  
5a44 18 03			jr .pastdmark  
5a46 ..			.dmark: db "SPo"  
5a49 f1			.pastdmark: pop af  
5a4a			endm  
# End of macro DMARK
5a4a						CALLMONITOR 
5a4a cd 6c fe			call debug_vector  
5a4d				endm  
# End of macro CALLMONITOR
5a4d					endif 
5a4d					; get port 
5a4d			 
5a4d			 
5a4d					; get byte to send 
5a4d			 
5a4d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5a4d cd fc 22			call macro_dsp_valuehl 
5a50				endm 
# End of macro FORTH_DSP_VALUEHL
5a50			 
5a50			;		push hl    ; u1  
5a50			 
5a50					; destroy value TOS 
5a50			 
5a50					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5a50 cd b4 23			call macro_forth_dsp_pop 
5a53				endm 
# End of macro FORTH_DSP_POP
5a53			 
5a53					; one value on hl get other one back 
5a53			 
5a53			;		pop hl   ; u2 - addr 
5a53			 
5a53					; TODO Send SPI byte 
5a53			 
5a53			;		push hl 
5a53			;		call spi_ce_low 
5a53			;		pop hl 
5a53 7d					ld a, l 
5a54 cd 01 01				call spi_send_byte 
5a57			;		call spi_ce_high 
5a57			 
5a57					NEXTW 
5a57 c3 b2 24			jp macro_next 
5a5a				endm 
# End of macro NEXTW
5a5a			 
5a5a			.SPII: 
5a5a				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
5a5a 52				db WORD_SYS_CORE+62             
5a5b c3 5a			dw .SESEL            
5a5d 06				db 5 + 1 
5a5e .. 00			db "SPII",0              
5a63				endm 
# End of macro CWHEAD
5a63			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
5a63					if DEBUG_FORTH_WORDS_KEY 
5a63						DMARK "SPi" 
5a63 f5				push af  
5a64 3a 78 5a			ld a, (.dmark)  
5a67 32 68 fe			ld (debug_mark),a  
5a6a 3a 79 5a			ld a, (.dmark+1)  
5a6d 32 69 fe			ld (debug_mark+1),a  
5a70 3a 7a 5a			ld a, (.dmark+2)  
5a73 32 6a fe			ld (debug_mark+2),a  
5a76 18 03			jr .pastdmark  
5a78 ..			.dmark: db "SPi"  
5a7b f1			.pastdmark: pop af  
5a7c			endm  
# End of macro DMARK
5a7c						CALLMONITOR 
5a7c cd 6c fe			call debug_vector  
5a7f				endm  
# End of macro CALLMONITOR
5a7f					endif 
5a7f			 
5a7f					; TODO Get SPI byte 
5a7f			 
5a7f cd 28 01				call spi_read_byte 
5a82			 
5a82					if DEBUG_FORTH_WORDS 
5a82						DMARK "Si2" 
5a82 f5				push af  
5a83 3a 97 5a			ld a, (.dmark)  
5a86 32 68 fe			ld (debug_mark),a  
5a89 3a 98 5a			ld a, (.dmark+1)  
5a8c 32 69 fe			ld (debug_mark+1),a  
5a8f 3a 99 5a			ld a, (.dmark+2)  
5a92 32 6a fe			ld (debug_mark+2),a  
5a95 18 03			jr .pastdmark  
5a97 ..			.dmark: db "Si2"  
5a9a f1			.pastdmark: pop af  
5a9b			endm  
# End of macro DMARK
5a9b						CALLMONITOR 
5a9b cd 6c fe			call debug_vector  
5a9e				endm  
# End of macro CALLMONITOR
5a9e					endif 
5a9e 26 00				ld h, 0 
5aa0 6f					ld l, a 
5aa1					if DEBUG_FORTH_WORDS 
5aa1						DMARK "Si3" 
5aa1 f5				push af  
5aa2 3a b6 5a			ld a, (.dmark)  
5aa5 32 68 fe			ld (debug_mark),a  
5aa8 3a b7 5a			ld a, (.dmark+1)  
5aab 32 69 fe			ld (debug_mark+1),a  
5aae 3a b8 5a			ld a, (.dmark+2)  
5ab1 32 6a fe			ld (debug_mark+2),a  
5ab4 18 03			jr .pastdmark  
5ab6 ..			.dmark: db "Si3"  
5ab9 f1			.pastdmark: pop af  
5aba			endm  
# End of macro DMARK
5aba						CALLMONITOR 
5aba cd 6c fe			call debug_vector  
5abd				endm  
# End of macro CALLMONITOR
5abd					endif 
5abd cd 05 21				call forth_push_numhl 
5ac0			 
5ac0					NEXTW 
5ac0 c3 b2 24			jp macro_next 
5ac3				endm 
# End of macro NEXTW
5ac3			 
5ac3			 
5ac3			 
5ac3			.SESEL: 
5ac3				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
5ac3 66				db WORD_SYS_CORE+82             
5ac4 6c 5b			dw .CARTDEV            
5ac6 05				db 4 + 1 
5ac7 .. 00			db "BANK",0              
5acc				endm 
# End of macro CWHEAD
5acc			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
5acc					if DEBUG_FORTH_WORDS_KEY 
5acc						DMARK "BNK" 
5acc f5				push af  
5acd 3a e1 5a			ld a, (.dmark)  
5ad0 32 68 fe			ld (debug_mark),a  
5ad3 3a e2 5a			ld a, (.dmark+1)  
5ad6 32 69 fe			ld (debug_mark+1),a  
5ad9 3a e3 5a			ld a, (.dmark+2)  
5adc 32 6a fe			ld (debug_mark+2),a  
5adf 18 03			jr .pastdmark  
5ae1 ..			.dmark: db "BNK"  
5ae4 f1			.pastdmark: pop af  
5ae5			endm  
# End of macro DMARK
5ae5						CALLMONITOR 
5ae5 cd 6c fe			call debug_vector  
5ae8				endm  
# End of macro CALLMONITOR
5ae8					endif 
5ae8			 
5ae8 3e ff				ld a, 255 
5aea 32 60 fa				ld (spi_cartdev), a 
5aed			 
5aed					; get bank 
5aed			 
5aed					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5aed cd fc 22			call macro_dsp_valuehl 
5af0				endm 
# End of macro FORTH_DSP_VALUEHL
5af0			 
5af0			;		push hl 
5af0			 
5af0					; destroy value TOS 
5af0			 
5af0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5af0 cd b4 23			call macro_forth_dsp_pop 
5af3				endm 
# End of macro FORTH_DSP_POP
5af3			 
5af3					; one value on hl get other one back 
5af3			 
5af3			;		pop hl 
5af3			 
5af3			 
5af3 0e ff				ld c, SPI_CE_HIGH 
5af5 06 30				ld b, '0'    ; human readable bank number 
5af7			 
5af7 7d					ld a, l 
5af8			 
5af8					if DEBUG_FORTH_WORDS 
5af8						DMARK "BNK" 
5af8 f5				push af  
5af9 3a 0d 5b			ld a, (.dmark)  
5afc 32 68 fe			ld (debug_mark),a  
5aff 3a 0e 5b			ld a, (.dmark+1)  
5b02 32 69 fe			ld (debug_mark+1),a  
5b05 3a 0f 5b			ld a, (.dmark+2)  
5b08 32 6a fe			ld (debug_mark+2),a  
5b0b 18 03			jr .pastdmark  
5b0d ..			.dmark: db "BNK"  
5b10 f1			.pastdmark: pop af  
5b11			endm  
# End of macro DMARK
5b11						CALLMONITOR 
5b11 cd 6c fe			call debug_vector  
5b14				endm  
# End of macro CALLMONITOR
5b14					endif 
5b14			 
5b14					; active low 
5b14			 
5b14 fe 00				cp 0 
5b16 28 28				jr z, .bset 
5b18 fe 01				cp 1 
5b1a 20 04				jr nz, .b2 
5b1c cb 81				res 0, c 
5b1e 06 31				ld b, '1'    ; human readable bank number 
5b20 fe 02		.b2:		cp 2 
5b22 20 04				jr nz, .b3 
5b24 cb 89				res 1, c 
5b26 06 32				ld b, '2'    ; human readable bank number 
5b28 fe 03		.b3:		cp 3 
5b2a 20 04				jr nz, .b4 
5b2c cb 91				res 2, c 
5b2e 06 33				ld b, '3'    ; human readable bank number 
5b30 fe 04		.b4:		cp 4 
5b32 20 04				jr nz, .b5 
5b34 cb 99				res 3, c 
5b36 06 34				ld b, '4'    ; human readable bank number 
5b38 fe 05		.b5:		cp 5 
5b3a 20 04				jr nz, .bset 
5b3c cb a1				res 4, c 
5b3e 06 35				ld b, '5'    ; human readable bank number 
5b40			 
5b40			.bset: 
5b40 79					ld a, c 
5b41 32 5d fa				ld (spi_device),a 
5b44 78					ld a, b 
5b45 32 5c fa				ld (spi_device_id),a 
5b48					if DEBUG_FORTH_WORDS 
5b48						DMARK "BN2" 
5b48 f5				push af  
5b49 3a 5d 5b			ld a, (.dmark)  
5b4c 32 68 fe			ld (debug_mark),a  
5b4f 3a 5e 5b			ld a, (.dmark+1)  
5b52 32 69 fe			ld (debug_mark+1),a  
5b55 3a 5f 5b			ld a, (.dmark+2)  
5b58 32 6a fe			ld (debug_mark+2),a  
5b5b 18 03			jr .pastdmark  
5b5d ..			.dmark: db "BN2"  
5b60 f1			.pastdmark: pop af  
5b61			endm  
# End of macro DMARK
5b61						CALLMONITOR 
5b61 cd 6c fe			call debug_vector  
5b64				endm  
# End of macro CALLMONITOR
5b64					endif 
5b64			 
5b64					; set default SPI clk pulse time as disabled for BANK use 
5b64			 
5b64 3e 00				ld a, 0 
5b66 32 61 fa				ld (spi_clktime), a 
5b69			 
5b69					NEXTW 
5b69 c3 b2 24			jp macro_next 
5b6c				endm 
# End of macro NEXTW
5b6c			 
5b6c			.CARTDEV: 
5b6c				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5b6c 66				db WORD_SYS_CORE+82             
5b6d 1a 5c			dw .ENDDEVICE            
5b6f 08				db 7 + 1 
5b70 .. 00			db "CARTDEV",0              
5b78				endm 
# End of macro CWHEAD
5b78			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
5b78					if DEBUG_FORTH_WORDS_KEY 
5b78						DMARK "CDV" 
5b78 f5				push af  
5b79 3a 8d 5b			ld a, (.dmark)  
5b7c 32 68 fe			ld (debug_mark),a  
5b7f 3a 8e 5b			ld a, (.dmark+1)  
5b82 32 69 fe			ld (debug_mark+1),a  
5b85 3a 8f 5b			ld a, (.dmark+2)  
5b88 32 6a fe			ld (debug_mark+2),a  
5b8b 18 03			jr .pastdmark  
5b8d ..			.dmark: db "CDV"  
5b90 f1			.pastdmark: pop af  
5b91			endm  
# End of macro DMARK
5b91						CALLMONITOR 
5b91 cd 6c fe			call debug_vector  
5b94				endm  
# End of macro CALLMONITOR
5b94					endif 
5b94			 
5b94					; disable se storage bank selection 
5b94			 
5b94 3e ff				ld a, SPI_CE_HIGH		; ce high 
5b96 32 5d fa				ld (spi_device), a 
5b99			 
5b99					; get bank 
5b99			 
5b99					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5b99 cd fc 22			call macro_dsp_valuehl 
5b9c				endm 
# End of macro FORTH_DSP_VALUEHL
5b9c			 
5b9c			;		push hl 
5b9c			 
5b9c					; destroy value TOS 
5b9c			 
5b9c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5b9c cd b4 23			call macro_forth_dsp_pop 
5b9f				endm 
# End of macro FORTH_DSP_POP
5b9f			 
5b9f					; one value on hl get other one back 
5b9f			 
5b9f			;		pop hl 
5b9f			 
5b9f					; active low 
5b9f			 
5b9f 0e ff				ld c, 255 
5ba1			 
5ba1 7d					ld a, l 
5ba2					if DEBUG_FORTH_WORDS 
5ba2						DMARK "CDV" 
5ba2 f5				push af  
5ba3 3a b7 5b			ld a, (.dmark)  
5ba6 32 68 fe			ld (debug_mark),a  
5ba9 3a b8 5b			ld a, (.dmark+1)  
5bac 32 69 fe			ld (debug_mark+1),a  
5baf 3a b9 5b			ld a, (.dmark+2)  
5bb2 32 6a fe			ld (debug_mark+2),a  
5bb5 18 03			jr .pastdmark  
5bb7 ..			.dmark: db "CDV"  
5bba f1			.pastdmark: pop af  
5bbb			endm  
# End of macro DMARK
5bbb						CALLMONITOR 
5bbb cd 6c fe			call debug_vector  
5bbe				endm  
# End of macro CALLMONITOR
5bbe					endif 
5bbe fe 00				cp 0 
5bc0 28 30				jr z, .cset 
5bc2 fe 01				cp 1 
5bc4 20 02				jr nz, .c2 
5bc6 cb 81				res 0, c 
5bc8 fe 02		.c2:		cp 2 
5bca 20 02				jr nz, .c3 
5bcc cb 89				res 1, c 
5bce fe 03		.c3:		cp 3 
5bd0 20 02				jr nz, .c4 
5bd2 cb 91				res 2, c 
5bd4 fe 04		.c4:		cp 4 
5bd6 20 02				jr nz, .c5 
5bd8 cb 99				res 3, c 
5bda fe 05		.c5:		cp 5 
5bdc 20 02				jr nz, .c6 
5bde cb a1				res 4, c 
5be0 fe 06		.c6:		cp 6 
5be2 20 02				jr nz, .c7 
5be4 cb a9				res 5, c 
5be6 fe 07		.c7:		cp 7 
5be8 20 02				jr nz, .c8 
5bea cb b1				res 6, c 
5bec fe 08		.c8:		cp 8 
5bee 20 02				jr nz, .cset 
5bf0 cb b9				res 7, c 
5bf2 79			.cset:		ld a, c 
5bf3 32 60 fa				ld (spi_cartdev),a 
5bf6			 
5bf6					if DEBUG_FORTH_WORDS 
5bf6						DMARK "CD2" 
5bf6 f5				push af  
5bf7 3a 0b 5c			ld a, (.dmark)  
5bfa 32 68 fe			ld (debug_mark),a  
5bfd 3a 0c 5c			ld a, (.dmark+1)  
5c00 32 69 fe			ld (debug_mark+1),a  
5c03 3a 0d 5c			ld a, (.dmark+2)  
5c06 32 6a fe			ld (debug_mark+2),a  
5c09 18 03			jr .pastdmark  
5c0b ..			.dmark: db "CD2"  
5c0e f1			.pastdmark: pop af  
5c0f			endm  
# End of macro DMARK
5c0f						CALLMONITOR 
5c0f cd 6c fe			call debug_vector  
5c12				endm  
# End of macro CALLMONITOR
5c12					endif 
5c12			 
5c12					; set default SPI clk pulse time as 10ms for CARTDEV use 
5c12			 
5c12 3e 0a				ld a, $0a 
5c14 32 61 fa				ld (spi_clktime), a 
5c17					NEXTW 
5c17 c3 b2 24			jp macro_next 
5c1a				endm 
# End of macro NEXTW
5c1a			endif 
5c1a			 
5c1a			.ENDDEVICE: 
5c1a			; eof 
5c1a			 
# End of file forth_words_device.asm
5c1a			 
5c1a			; var handler 
5c1a			 
5c1a			 
5c1a			.VARS: 
5c1a				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
5c1a 77				db WORD_SYS_CORE+99             
5c1b cb 5c			dw .V0            
5c1d 04				db 3 + 1 
5c1e .. 00			db "VAR",0              
5c22				endm 
# End of macro CWHEAD
5c22			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
5c22			;| 
5c22			;| The variable name should consist of a single letter. e.g. "a" 
5c22			;! If a full string is passed then only the first char is looked at 
5c22			;| Any other char could exceed bounds checks!  
5c22			 
5c22					if DEBUG_FORTH_WORDS_KEY 
5c22						DMARK "VAR" 
5c22 f5				push af  
5c23 3a 37 5c			ld a, (.dmark)  
5c26 32 68 fe			ld (debug_mark),a  
5c29 3a 38 5c			ld a, (.dmark+1)  
5c2c 32 69 fe			ld (debug_mark+1),a  
5c2f 3a 39 5c			ld a, (.dmark+2)  
5c32 32 6a fe			ld (debug_mark+2),a  
5c35 18 03			jr .pastdmark  
5c37 ..			.dmark: db "VAR"  
5c3a f1			.pastdmark: pop af  
5c3b			endm  
# End of macro DMARK
5c3b						CALLMONITOR 
5c3b cd 6c fe			call debug_vector  
5c3e				endm  
# End of macro CALLMONITOR
5c3e					endif 
5c3e			 
5c3e					FORTH_DSP_VALUEHL 
5c3e cd fc 22			call macro_dsp_valuehl 
5c41				endm 
# End of macro FORTH_DSP_VALUEHL
5c41			 
5c41 7e					ld a, (hl)    ; get first char on of the string 
5c42			 
5c42			 
5c42					if DEBUG_FORTH_WORDS 
5c42						DMARK "VR1" 
5c42 f5				push af  
5c43 3a 57 5c			ld a, (.dmark)  
5c46 32 68 fe			ld (debug_mark),a  
5c49 3a 58 5c			ld a, (.dmark+1)  
5c4c 32 69 fe			ld (debug_mark+1),a  
5c4f 3a 59 5c			ld a, (.dmark+2)  
5c52 32 6a fe			ld (debug_mark+2),a  
5c55 18 03			jr .pastdmark  
5c57 ..			.dmark: db "VR1"  
5c5a f1			.pastdmark: pop af  
5c5b			endm  
# End of macro DMARK
5c5b						CALLMONITOR 
5c5b cd 6c fe			call debug_vector  
5c5e				endm  
# End of macro CALLMONITOR
5c5e					endif 
5c5e					 
5c5e f5					push af	 
5c5f					FORTH_DSP_POP 
5c5f cd b4 23			call macro_forth_dsp_pop 
5c62				endm 
# End of macro FORTH_DSP_POP
5c62 f1					pop af 
5c63			 
5c63					; convert to upper 
5c63			 
5c63 cd 3c 13				call to_upper 
5c66					if DEBUG_FORTH_WORDS 
5c66						DMARK "Vaa" 
5c66 f5				push af  
5c67 3a 7b 5c			ld a, (.dmark)  
5c6a 32 68 fe			ld (debug_mark),a  
5c6d 3a 7c 5c			ld a, (.dmark+1)  
5c70 32 69 fe			ld (debug_mark+1),a  
5c73 3a 7d 5c			ld a, (.dmark+2)  
5c76 32 6a fe			ld (debug_mark+2),a  
5c79 18 03			jr .pastdmark  
5c7b ..			.dmark: db "Vaa"  
5c7e f1			.pastdmark: pop af  
5c7f			endm  
# End of macro DMARK
5c7f						CALLMONITOR 
5c7f cd 6c fe			call debug_vector  
5c82				endm  
# End of macro CALLMONITOR
5c82					endif 
5c82 06 41				ld b, 'A' 
5c84 90					sub b			; set offset 
5c85					if DEBUG_FORTH_WORDS 
5c85						DMARK "Vbb" 
5c85 f5				push af  
5c86 3a 9a 5c			ld a, (.dmark)  
5c89 32 68 fe			ld (debug_mark),a  
5c8c 3a 9b 5c			ld a, (.dmark+1)  
5c8f 32 69 fe			ld (debug_mark+1),a  
5c92 3a 9c 5c			ld a, (.dmark+2)  
5c95 32 6a fe			ld (debug_mark+2),a  
5c98 18 03			jr .pastdmark  
5c9a ..			.dmark: db "Vbb"  
5c9d f1			.pastdmark: pop af  
5c9e			endm  
# End of macro DMARK
5c9e						CALLMONITOR 
5c9e cd 6c fe			call debug_vector  
5ca1				endm  
# End of macro CALLMONITOR
5ca1					endif 
5ca1 cb 27				sla a  
5ca3				 
5ca3					 
5ca3					if DEBUG_FORTH_WORDS 
5ca3						DMARK "VR2" 
5ca3 f5				push af  
5ca4 3a b8 5c			ld a, (.dmark)  
5ca7 32 68 fe			ld (debug_mark),a  
5caa 3a b9 5c			ld a, (.dmark+1)  
5cad 32 69 fe			ld (debug_mark+1),a  
5cb0 3a ba 5c			ld a, (.dmark+2)  
5cb3 32 6a fe			ld (debug_mark+2),a  
5cb6 18 03			jr .pastdmark  
5cb8 ..			.dmark: db "VR2"  
5cbb f1			.pastdmark: pop af  
5cbc			endm  
# End of macro DMARK
5cbc						CALLMONITOR 
5cbc cd 6c fe			call debug_vector  
5cbf				endm  
# End of macro CALLMONITOR
5cbf					endif 
5cbf			 
5cbf 21 f1 f9				ld hl, cli_var_array2 
5cc2 cd cf 0f				call addatohl 
5cc5 cd 05 21				call forth_push_numhl 
5cc8			 
5cc8			 
5cc8				       NEXTW 
5cc8 c3 b2 24			jp macro_next 
5ccb				endm 
# End of macro NEXTW
5ccb			.V0: 
5ccb				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
5ccb 78				db WORD_SYS_CORE+100             
5ccc e3 5c			dw .V0Q            
5cce 04				db 3 + 1 
5ccf .. 00			db "V0!",0              
5cd3				endm 
# End of macro CWHEAD
5cd3			;| V0! ( u1 -- )  Store value to v0  | DONE 
5cd3			 
5cd3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5cd3 cd fc 22			call macro_dsp_valuehl 
5cd6				endm 
# End of macro FORTH_DSP_VALUEHL
5cd6			 
5cd6 11 25 fa				ld de, cli_var_array 
5cd9			 
5cd9 eb					ex de, hl 
5cda 73					ld (hl), e 
5cdb 23					inc hl 
5cdc 72					ld (hl), d 
5cdd			 
5cdd					; destroy value TOS 
5cdd			 
5cdd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5cdd cd b4 23			call macro_forth_dsp_pop 
5ce0				endm 
# End of macro FORTH_DSP_POP
5ce0			 
5ce0				       NEXTW 
5ce0 c3 b2 24			jp macro_next 
5ce3				endm 
# End of macro NEXTW
5ce3			.V0Q: 
5ce3				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
5ce3 79				db WORD_SYS_CORE+101             
5ce4 f4 5c			dw .V1S            
5ce6 04				db 3 + 1 
5ce7 .. 00			db "V0@",0              
5ceb				endm 
# End of macro CWHEAD
5ceb			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5ceb 2a 25 fa				ld hl, (cli_var_array) 
5cee cd 05 21				call forth_push_numhl 
5cf1			 
5cf1				       NEXTW 
5cf1 c3 b2 24			jp macro_next 
5cf4				endm 
# End of macro NEXTW
5cf4			.V1S: 
5cf4				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
5cf4 7a				db WORD_SYS_CORE+102             
5cf5 0c 5d			dw .V1Q            
5cf7 04				db 3 + 1 
5cf8 .. 00			db "V1!",0              
5cfc				endm 
# End of macro CWHEAD
5cfc			;| V1! ( u1 -- )  Store value to v1 | DONE 
5cfc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5cfc cd fc 22			call macro_dsp_valuehl 
5cff				endm 
# End of macro FORTH_DSP_VALUEHL
5cff			 
5cff 11 27 fa				ld de, cli_var_array+2 
5d02				 
5d02 eb					ex de, hl 
5d03 73					ld (hl), e 
5d04 23					inc hl 
5d05 72					ld (hl), d 
5d06			 
5d06					; destroy value TOS 
5d06			 
5d06					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d06 cd b4 23			call macro_forth_dsp_pop 
5d09				endm 
# End of macro FORTH_DSP_POP
5d09				       NEXTW 
5d09 c3 b2 24			jp macro_next 
5d0c				endm 
# End of macro NEXTW
5d0c			.V1Q: 
5d0c				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5d0c 7b				db WORD_SYS_CORE+103             
5d0d 1d 5d			dw .V2S            
5d0f 04				db 3 + 1 
5d10 .. 00			db "V1@",0              
5d14				endm 
# End of macro CWHEAD
5d14			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5d14 2a 27 fa				ld hl, (cli_var_array+2) 
5d17 cd 05 21				call forth_push_numhl 
5d1a				       NEXTW 
5d1a c3 b2 24			jp macro_next 
5d1d				endm 
# End of macro NEXTW
5d1d			.V2S: 
5d1d				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
5d1d 7c				db WORD_SYS_CORE+104             
5d1e 35 5d			dw .V2Q            
5d20 04				db 3 + 1 
5d21 .. 00			db "V2!",0              
5d25				endm 
# End of macro CWHEAD
5d25			;| V2! ( u1 -- )  Store value to v2 | DONE 
5d25					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d25 cd fc 22			call macro_dsp_valuehl 
5d28				endm 
# End of macro FORTH_DSP_VALUEHL
5d28			 
5d28 11 29 fa				ld de, cli_var_array+4 
5d2b				 
5d2b eb					ex de, hl 
5d2c 73					ld (hl), e 
5d2d 23					inc hl 
5d2e 72					ld (hl), d 
5d2f			 
5d2f					; destroy value TOS 
5d2f			 
5d2f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d2f cd b4 23			call macro_forth_dsp_pop 
5d32				endm 
# End of macro FORTH_DSP_POP
5d32				       NEXTW 
5d32 c3 b2 24			jp macro_next 
5d35				endm 
# End of macro NEXTW
5d35			.V2Q: 
5d35				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5d35 7d				db WORD_SYS_CORE+105             
5d36 46 5d			dw .V3S            
5d38 04				db 3 + 1 
5d39 .. 00			db "V2@",0              
5d3d				endm 
# End of macro CWHEAD
5d3d			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
5d3d 2a 29 fa				ld hl, (cli_var_array+4) 
5d40 cd 05 21				call forth_push_numhl 
5d43				       NEXTW 
5d43 c3 b2 24			jp macro_next 
5d46				endm 
# End of macro NEXTW
5d46			.V3S: 
5d46				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5d46 7c				db WORD_SYS_CORE+104             
5d47 5e 5d			dw .V3Q            
5d49 04				db 3 + 1 
5d4a .. 00			db "V3!",0              
5d4e				endm 
# End of macro CWHEAD
5d4e			;| V3! ( u1 -- )  Store value to v3 | DONE 
5d4e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d4e cd fc 22			call macro_dsp_valuehl 
5d51				endm 
# End of macro FORTH_DSP_VALUEHL
5d51			 
5d51 11 2b fa				ld de, cli_var_array+6 
5d54				 
5d54 eb					ex de, hl 
5d55 73					ld (hl), e 
5d56 23					inc hl 
5d57 72					ld (hl), d 
5d58			 
5d58					; destroy value TOS 
5d58			 
5d58					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d58 cd b4 23			call macro_forth_dsp_pop 
5d5b				endm 
# End of macro FORTH_DSP_POP
5d5b				       NEXTW 
5d5b c3 b2 24			jp macro_next 
5d5e				endm 
# End of macro NEXTW
5d5e			.V3Q: 
5d5e				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
5d5e 7d				db WORD_SYS_CORE+105             
5d5f 6f 5d			dw .END            
5d61 04				db 3 + 1 
5d62 .. 00			db "V3@",0              
5d66				endm 
# End of macro CWHEAD
5d66			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5d66 2a 2b fa				ld hl, (cli_var_array+6) 
5d69 cd 05 21				call forth_push_numhl 
5d6c				       NEXTW 
5d6c c3 b2 24			jp macro_next 
5d6f				endm 
# End of macro NEXTW
5d6f			 
5d6f			 
5d6f			 
5d6f			 
5d6f			 
5d6f			; end of dict marker 
5d6f			 
5d6f 00			.END:    db WORD_SYS_END 
5d70 00 00			dw 0 
5d72 00				db 0 
5d73			 
5d73			; use to jp here for user dict words to save on macro expansion  
5d73			 
5d73			user_dict_next: 
5d73				NEXTW 
5d73 c3 b2 24			jp macro_next 
5d76				endm 
# End of macro NEXTW
5d76			 
5d76			 
5d76			user_exec: 
5d76				;    ld hl, <word code> 
5d76				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
5d76				;    call forthexec 
5d76				;    jp user_dict_next   (NEXT) 
5d76			        ;    <word code bytes> 
5d76 eb				ex de, hl 
5d77 2a bf f4			ld hl,(os_tok_ptr) 
5d7a				 
5d7a				FORTH_RSP_NEXT 
5d7a cd ac 20			call macro_forth_rsp_next 
5d7d				endm 
# End of macro FORTH_RSP_NEXT
5d7d			 
5d7d			if DEBUG_FORTH_UWORD 
5d7d						DMARK "UEX" 
5d7d f5				push af  
5d7e 3a 92 5d			ld a, (.dmark)  
5d81 32 68 fe			ld (debug_mark),a  
5d84 3a 93 5d			ld a, (.dmark+1)  
5d87 32 69 fe			ld (debug_mark+1),a  
5d8a 3a 94 5d			ld a, (.dmark+2)  
5d8d 32 6a fe			ld (debug_mark+2),a  
5d90 18 03			jr .pastdmark  
5d92 ..			.dmark: db "UEX"  
5d95 f1			.pastdmark: pop af  
5d96			endm  
# End of macro DMARK
5d96				CALLMONITOR 
5d96 cd 6c fe			call debug_vector  
5d99				endm  
# End of macro CALLMONITOR
5d99			endif 
5d99			 
5d99			 
5d99			 
5d99 eb				ex de, hl 
5d9a 22 bf f4			ld (os_tok_ptr), hl 
5d9d				 
5d9d				; Don't use next - Skips the first word in uword. 
5d9d			 
5d9d c3 43 25			jp exec1 
5da0			;	NEXT 
5da0			 
5da0			 
5da0			; eof 
# End of file forth_wordsv4.asm
5da0			endif 
5da0			;;;;;;;;;;;;;; Debug code 
5da0			 
5da0			 
5da0			;if DEBUG_FORTH_PARSE 
5da0 .. 00		.nowordfound: db "No match",0 
5da9 .. 00		.compword:	db "Comparing word ",0 
5db9 .. 00		.nextwordat:	db "Next word at",0 
5dc6 .. 00		.charmatch:	db "Char match",0 
5dd1			;endif 
5dd1			if DEBUG_FORTH_JP 
5dd1			.foundword:	db "Word match. Exec..",0 
5dd1			endif 
5dd1			;if DEBUG_FORTH_PUSH 
5dd1 .. 00		.enddict:	db "Dict end. Push.",0 
5de1 .. 00		.push_str:	db "Pushing string",0 
5df0 .. 00		.push_num:	db "Pushing number",0 
5dff .. 00		.data_sp:	db "SP:",0 
5e03 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5e15 .. 00		.wordinde:	db "Word in DE (3/0):",0 
5e27 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5e39			;endif 
5e39			;if DEBUG_FORTH_MALLOC 
5e39 .. 00		.push_malloc:	db "Malloc address",0 
5e48			;endif 
5e48			 
5e48			 
5e48			 
5e48			; display malloc address and current data stack pointer  
5e48			 
5e48			malloc_error: 
5e48 d5				push de 
5e49 f5				push af 
5e4a e5				push hl 
5e4b cd 9b 0d			call clear_display 
5e4e 11 6e 5e			ld de, .mallocerr 
5e51 3e 00			ld a,0 
5e53			;	ld de,os_word_scratch 
5e53 cd ae 0d			call str_at_display 
5e56 3e 11			ld a, display_row_1+17 
5e58 11 68 fe			ld de, debug_mark 
5e5b cd ae 0d			call str_at_display 
5e5e cd be 0d			call update_display 
5e61				;call break_point_state 
5e61 cd 07 7a			call cin_wait 
5e64			 
5e64			;	ld a, ' ' 
5e64			;	ld (os_view_disable), a 
5e64 cd 35 1a			call bp_on 
5e67 e1				pop hl 
5e68 f1				pop af 
5e69 d1				pop de	 
5e6a				CALLMONITOR 
5e6a cd 6c fe			call debug_vector  
5e6d				endm  
# End of macro CALLMONITOR
5e6d c9				ret 
5e6e			 
5e6e .. 00		.mallocerr: 	db "Malloc Error",0 
5e7b			;if DEBUG_FORTH_PUSH 
5e7b			display_data_sp: 
5e7b f5				push af 
5e7c			 
5e7c				; see if disabled 
5e7c			 
5e7c			 
5e7c 3a 6c fe			ld a, (debug_vector) 
5e7f fe c9			cp $C9  ; RET 
5e81				;ld a, (os_view_disable) 
5e81				;cp '*' 
5e81 28 67			jr z, .skipdsp 
5e83			 
5e83 e5				push hl 
5e84 e5				push hl 
5e85 e5			push hl 
5e86 cd 9b 0d			call clear_display 
5e89 e1			pop hl 
5e8a 7c				ld a,h 
5e8b 21 c3 f4			ld hl, os_word_scratch 
5e8e cd d0 12			call hexout 
5e91 e1				pop hl 
5e92 7d				ld a,l 
5e93 21 c5 f4			ld hl, os_word_scratch+2 
5e96 cd d0 12			call hexout 
5e99 21 c7 f4			ld hl, os_word_scratch+4 
5e9c 3e 00			ld a,0 
5e9e 77				ld (hl),a 
5e9f 11 c3 f4			ld de,os_word_scratch 
5ea2 3e 28				ld a, display_row_2 
5ea4 cd ae 0d				call str_at_display 
5ea7 11 03 5e			ld de, .wordinhl 
5eaa 3e 00			ld a, display_row_1 
5eac			 
5eac cd ae 0d				call str_at_display 
5eaf 11 68 fe			ld de, debug_mark 
5eb2 3e 11			ld a, display_row_1+17 
5eb4			 
5eb4 cd ae 0d				call str_at_display 
5eb7			 
5eb7				; display current data stack pointer 
5eb7 11 ff 5d			ld de,.data_sp 
5eba 3e 30				ld a, display_row_2 + 8 
5ebc cd ae 0d				call str_at_display 
5ebf			 
5ebf 2a eb f9			ld hl,(cli_data_sp) 
5ec2 e5				push hl 
5ec3 7c				ld a,h 
5ec4 21 c3 f4			ld hl, os_word_scratch 
5ec7 cd d0 12			call hexout 
5eca e1				pop hl 
5ecb 7d				ld a,l 
5ecc 21 c5 f4			ld hl, os_word_scratch+2 
5ecf cd d0 12			call hexout 
5ed2 21 c7 f4			ld hl, os_word_scratch+4 
5ed5 3e 00			ld a,0 
5ed7 77				ld (hl),a 
5ed8 11 c3 f4			ld de,os_word_scratch 
5edb 3e 33				ld a, display_row_2 + 11 
5edd cd ae 0d				call str_at_display 
5ee0			 
5ee0			 
5ee0 cd be 0d			call update_display 
5ee3 cd de 0c			call delay1s 
5ee6 cd de 0c			call delay1s 
5ee9 e1				pop hl 
5eea			.skipdsp: 
5eea f1				pop af 
5eeb c9				ret 
5eec			 
5eec			display_data_malloc: 
5eec			 
5eec f5				push af 
5eed e5				push hl 
5eee e5				push hl 
5eef e5			push hl 
5ef0 cd 9b 0d			call clear_display 
5ef3 e1			pop hl 
5ef4 7c				ld a,h 
5ef5 21 c3 f4			ld hl, os_word_scratch 
5ef8 cd d0 12			call hexout 
5efb e1				pop hl 
5efc 7d				ld a,l 
5efd 21 c5 f4			ld hl, os_word_scratch+2 
5f00 cd d0 12			call hexout 
5f03 21 c7 f4			ld hl, os_word_scratch+4 
5f06 3e 00			ld a,0 
5f08 77				ld (hl),a 
5f09 11 c3 f4			ld de,os_word_scratch 
5f0c 3e 28				ld a, display_row_2 
5f0e cd ae 0d				call str_at_display 
5f11 11 39 5e			ld de, .push_malloc 
5f14 3e 00			ld a, display_row_1 
5f16			 
5f16 cd ae 0d				call str_at_display 
5f19			 
5f19				; display current data stack pointer 
5f19 11 ff 5d			ld de,.data_sp 
5f1c 3e 30				ld a, display_row_2 + 8 
5f1e cd ae 0d				call str_at_display 
5f21			 
5f21 2a eb f9			ld hl,(cli_data_sp) 
5f24 e5				push hl 
5f25 7c				ld a,h 
5f26 21 c3 f4			ld hl, os_word_scratch 
5f29 cd d0 12			call hexout 
5f2c e1				pop hl 
5f2d 7d				ld a,l 
5f2e 21 c5 f4			ld hl, os_word_scratch+2 
5f31 cd d0 12			call hexout 
5f34 21 c7 f4			ld hl, os_word_scratch+4 
5f37 3e 00			ld a,0 
5f39 77				ld (hl),a 
5f3a 11 c3 f4			ld de,os_word_scratch 
5f3d 3e 33				ld a, display_row_2 + 11 
5f3f cd ae 0d				call str_at_display 
5f42			 
5f42 cd be 0d			call update_display 
5f45 cd de 0c			call delay1s 
5f48 cd de 0c			call delay1s 
5f4b e1				pop hl 
5f4c f1				pop af 
5f4d c9				ret 
5f4e			;endif 
5f4e			 
5f4e			include "forth_autostart.asm" 
5f4e			; list of commands to perform at system start up 
5f4e			 
5f4e			startcmds: 
5f4e			;	dw test11 
5f4e			;	dw test12 
5f4e			;	dw test13 
5f4e			;	dw test14 
5f4e			;	dw test15 
5f4e			;	dw test16 
5f4e			;	dw test17 
5f4e			;	dw ifthtest1 
5f4e			;	dw ifthtest2 
5f4e			;	dw ifthtest3 
5f4e			;	dw mmtest1 
5f4e			;	dw mmtest2 
5f4e			;	dw mmtest3 
5f4e			;	dw mmtest4 
5f4e			;	dw mmtest5 
5f4e			;	dw mmtest6 
5f4e			;	dw iftest1 
5f4e			;	dw iftest2 
5f4e			;	dw iftest3 
5f4e			;	dw looptest1 
5f4e			;	dw looptest2 
5f4e			;	dw test1 
5f4e			;	dw test2 
5f4e			;	dw test3 
5f4e			;	dw test4 
5f4e			;	dw game2r 
5f4e			;	dw game2b1 
5f4e			;	dw game2b2 
5f4e			 
5f4e				; start up words that are actually useful 
5f4e			 
5f4e			;    dw spi1 
5f4e			;    dw spi2 
5f4e			;    dw spi3 
5f4e			;    dw spi4 
5f4e			;    dw spi5 
5f4e			;    dw spi6 
5f4e			;    dw spi7 
5f4e			; 
5f4e			;    dw spi8 
5f4e			;    dw spi9 
5f4e			;    dw spi10 
5f4e			 
5f4e			; file editor 
5f4e			;	dw edit1 
5f4e			;	dw edit2 
5f4e			;	dw edit3 
5f4e			 
5f4e			;	dw longread 
5f4e 4e 63			dw clrstack 
5f50 82 63			dw type 
5f52			;	dw stest 
5f52 a7 63			dw strncpy 
5f54			;	dw list 
5f54 08 64			dw start1 
5f56 18 64			dw start2 
5f58			;	dw start3 
5f58			;	dw start3b 
5f58			;	dw start3c 
5f58			 
5f58				; (unit) testing words 
5f58			 
5f58			;	dw mtesta 
5f58			;	dw mtestb 
5f58			;	dw mtestc 
5f58			;	dw mtestd 
5f58			;	dw mteste 
5f58			 
5f58				; demo/game words 
5f58			 
5f58			;        dw game3w 
5f58			;        dw game3p 
5f58			;        dw game3sc 
5f58			;        dw game3vsi 
5f58			;        dw game3vs 
5f58				 
5f58 71 6e			dw game2b 
5f5a df 6e			dw game2bf 
5f5c 29 6f			dw game2mba 
5f5e bf 6f			dw game2mbas 
5f60 01 70			dw game2mb 
5f62			 
5f62 32 6b			dw game1 
5f64 43 6b			dw game1a 
5f66 a5 6b			dw game1b 
5f68 da 6b			dw game1c 
5f6a 10 6c			dw game1d 
5f6c 41 6c			dw game1s 
5f6e 55 6c			dw game1t 
5f70 6a 6c			dw game1f 
5f72 9e 6c			dw game1z 
5f74 e2 6c			dw game1zz 
5f76			 
5f76 4c 69			dw test5 
5f78 84 69			dw test6 
5f7a bc 69			dw test7 
5f7c d0 69			dw test8 
5f7e fc 69			dw test9 
5f80 12 6a			dw test10 
5f82				 
5f82 b9 6d		        dw ssv5 
5f84 9d 6d		        dw ssv4 
5f86 81 6d		        dw ssv3 
5f88 4b 6d		        dw ssv2 
5f8a d2 6d		        dw ssv1 
5f8c 1a 6e		        dw ssv1cpm 
5f8e			;	dw keyup 
5f8e			;	dw keydown 
5f8e			;	dw keyleft 
5f8e			;	dw keyright 
5f8e			;	dw 	keyf1 
5f8e			;	dw keyf2 
5f8e			;	dw keyf3 
5f8e			;	dw keyf4 
5f8e			;	dw keyf5 
5f8e			;	dw keyf6 
5f8e			;	dw keyf7 
5f8e			;	dw keyf8 
5f8e			;	dw keyf9 
5f8e			;	dw keyf10 
5f8e			;	dw keyf11 
5f8e			;	dw keyf12 
5f8e			;	dw keytab 
5f8e			;	dw keycr 
5f8e			;	dw keyhome 
5f8e			;	dw keyend 
5f8e			;	dw keybs 
5f8e 00 00			db 0, 0	 
5f90			 
5f90			 
5f90			; File Editor 
5f90			 
5f90			; ( id - ) use 'e' to edit the displayed line 
5f90 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
5fb1 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5fe6			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5fe6 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
601e			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
601e			 
601e			; SPI Net support words 
601e			 
601e			; v0! = node to send to 
601e			; ( str count - ) 
601e .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
6077			 
6077			; spiputchr ( char node - ) 
6077 .. 00		spi2:       db ": spiputchr spicel $10 spio spio ptr @ spio spiceh ; ",0 
60ad			 
60ad			; spigetchr ( - n ) 
60ad .. 00		spi4:       db ": spigetchr spicel $11 spio spii spiceh ; ", 0 
60d8			 
60d8			; getnode ( - n ) 
60d8 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
6105			 
6105			; ( str node - )  
6105 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
616b			; store string ( str i - ) 
616b			 
616b			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
616b .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
61c0			 
61c0			; get string ( addr i -  )    TO FIX 
61c0			 
61c0 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
6218			 
6218			 
6218			; NETCHAT (TODO) 
6218			; Program to allow two nodes to chat with eachother 
6218			; 
6218			; v0 - target node 
6218			;  
6218			; accept input at 0,0 
6218			; if input is string send spitype to target node 
6218			; starting at row 2,0 , while spigetchr is not zero ->  
6218			; 
6218			; 
6218			; TODO add paging of get request 
6218			 
6218			; ( node - ) 
6218 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
6237 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
628f .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
6307			 
6307			 
6307			; Long read of currently open file 
6307 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
634e			 
634e			; clear stack  
634e			 
634e .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
6382			 
6382			; type ( addr count - ) 
6382 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
63a7			 
63a7			; some direct memory words 
63a7			; strncpy ( len t f -- t ) 
63a7			 
63a7 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
6408			 
6408 .. 00		start1:     	db ": bpon $00 bp ;",0 
6418 .. 00		start2:     	db ": bpoff $01 bp ;",0 
6429 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
64a4 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
6504			 
6504			 
6504			; a handy word to list items on the stack 
6504			 
6504 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
656e			 
656e			 
656e			; test stack  
656e			; rnd8 stest 
656e			 
656e .. 00		stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
65e5			 
65e5			; random malloc and free cycles 
65e5			 
65e5 .. 00		mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
669a			 
669a			; fixed malloc and free cycles 
669a			 
669a .. 00		mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
673d			 
673d			; fixed double string push and drop cycle  
673d			 
673d .. 00		mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
67f2			 
67f2			; consistent fixed string push and drop cycle  
67f2			 
67f2 .. 00		mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6896			 
6896 .. 00		mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
694c			 
694c			;test1:		db ": aa 1 2 3 ;", 0 
694c			;test2:     	db "111 aa 888 999",0 
694c			;test3:     	db ": bb 77 ;",0 
694c			;test4:     	db "$02 $01 do i . loop bb",0 
694c			 
694c .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
6984 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
69bc .. 00		test7:     	db ": box hline vline ;",0 
69d0 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
69fc .. 00		test9:     	db ": sw $01 adsp world ;",0 
6a12 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
6a37 .. 00		test11:     	db "hello create .",0 
6a46 .. 00		test12:     	db "hello2 create .",0 
6a56			 
6a56			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
6a56			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
6a56			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
6a56			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
6a56			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
6a56			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
6a56			 
6a56			;iftest1:     	db "$0001 IF cls .",0 
6a56			;iftest2:     	db "$0000 IF cls .",0 
6a56			;iftest3:     	db "$0002 $0003 - IF cls .",0 
6a56			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
6a56			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
6a56			 
6a56			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6a56			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6a56			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6a56			 
6a56			 
6a56 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
6a7a .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
6aaa .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
6acf .. 00		sound4: db ": cha $00 ; ",0 
6adc .. 00		sound5: db ": chb $20 ; ",0 
6ae9 .. 00		sound6: db ": chc $40 ; ",0 
6af6 .. 00		sound7: db ": chd $60 ; ",0 
6b03 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
6b1b .. 00		sound9: db ": cvol $90 + + note ; ", 0 
6b32			 
6b32			 
6b32			 
6b32			 
6b32			; a small guess the number game 
6b32			 
6b32 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
6b43 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
6ba5			 
6ba5 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
6bda .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
6c10 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
6c41 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
6c55 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
6c6a .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
6c9e .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
6ce2			 
6ce2			; Using 'ga' save a high score across multiple runs using external storage 
6ce2			 
6ce2 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
6d4b			 
6d4b			 
6d4b			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
6d4b			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
6d4b			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
6d4b			 
6d4b			; simple screen saver to test code memory reuse to destruction 
6d4b			 
6d4b .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
6d81 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
6d9d .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
6db9 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
6dd2 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
6e1a .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
6e71			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
6e71			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
6e71			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
6e71			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
6e71			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
6e71			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
6e71			 
6e71			 
6e71			 
6e71			; minesweeper/battleship finding game 
6e71			; draws a game board of random ship/mine positions 
6e71			; user enters coords to see if it hits on 
6e71			; game ends when all are hit 
6e71			; when hit or miss says how many may be in the area 
6e71			 
6e71			; setup the game board and then hide it 
6e71 .. 00		game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
6edf .. 00		game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
6f29			; prompt for where to target 
6f29 .. 00		game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
6fbf .. 00		game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
6fe4			; TODO see if the entered coords hits or misses pushes char hit of miss 
6fe4 .. 00		game2mbht:      db ": mbckht nop ;",0 
6ff3 .. 00		game2mbms:      db ": mbcms nop ;",0 
7001			; TODO how many might be near by 
7001 .. 00		game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
707e			 
707e			; Game 3 
707e			 
707e			; Vert scroller ski game - avoid the trees! 
707e			 
707e			; v0 score (ie turns) 
707e			; v1 player pos 
707e			; v2 left wall 
707e			; v3 right wall 
707e			 
707e			; Draw side walls randomly 
707e			 
707e .. 00		game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
70ac			 
70ac			; Draw player 
70ac .. 00		game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
70ca			 
70ca			; TODO Get Key 
70ca			 
70ca			; TODO Move left right 
70ca			 
70ca			; scroll and move walls a bit 
70ca			 
70ca .. 00		game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
70fb			 
70fb			; main game loop 
70fb			 
70fb .. 00		game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
7127 .. 00		game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
7166			 
7166			; key board defs 
7166			 
7166 .. 00		keyup:       db ": keyup $05 ;",0 
7174 .. 00		keydown:       db ": keydown $0a ;",0 
7184 .. 00		keyleft:       db ": keyleft $0b ;",0 
7194 .. 00		keyright:       db ": keyright $0c ;",0 
71a5 .. 00		keyf1:       db ": keyf1 $10 ;",0 
71b3 .. 00		keyf2:       db ": keyf2 $11 ;",0 
71c1 .. 00		keyf3:       db ": keyf3 $12 ;",0 
71cf .. 00		keyf4:       db ": keyf4 $13 ;",0 
71dd .. 00		keyf5:       db ": keyf5 $14 ;",0 
71eb .. 00		keyf6:       db ": keyf6 $15 ;",0 
71f9 .. 00		keyf7:       db ": keyf7 $16 ;",0 
7207 .. 00		keyf8:       db ": keyf8 $17 ;",0 
7215 .. 00		keyf9:       db ": keyf9 $18 ;",0 
7223 .. 00		keyf10:       db ": keyf10 $19 ;",0 
7232 .. 00		keyf11:       db ": keyf11 $1a ;",0 
7241 .. 00		keyf12:       db ": keyf12 $1b ;",0 
7250			 
7250 .. 00		keytab:       db ": keytab $09 ;",0 
725f .. 00		keycr:       db ": keycr $0d ;",0 
726d .. 00		keyhome:       db ": keyhome $0e ;",0 
727d .. 00		keyend:       db ": keyend $0f ;",0 
728c .. 00		keybs:       db ": keybs $08 ;",0 
729a			 
729a			   
729a			 
729a			 
729a			 
729a			; eof 
# End of file forth_autostart.asm
729a			 
729a			 
729a			 
729a			; stack over and underflow checks 
729a			 
729a			; init the words to detect the under/overflow 
729a			 
729a			chk_stk_init: 
729a				; a vague random number to check so we dont get any "lucky" hits 
729a 3e 2d			ld a, 45 
729c 6f				ld l, a 
729d 00				nop 
729e 3e 17			ld a, 23 
72a0 67				ld h, a 
72a1			 
72a1 22 9a f1			ld (chk_word), hl     ; the word we need to check against 
72a4			 
72a4			;	ld (chk_stund), hl	; stack points.... 
72a4 22 fd fe			ld (chk_stovr), hl 
72a7 22 e9 f9			ld (chk_ret_und), hl 
72aa 22 a7 f9			ld (chk_ret_ovr), hl 
72ad 22 25 f9			ld (chk_loop_ovr), hl 
72b0 22 23 f7			ld (chk_data_ovr), hl 
72b3 c9				ret 
72b4				 
72b4			check_stacks: 
72b4				; check all stack words 
72b4			 
72b4 e5				push hl 
72b5 d5				push de 
72b6			 
72b6			;	ld de,(chk_word) 
72b6			;	ld hl, (chk_stund)	; stack points.... 
72b6			;	if DEBUG_STK_FAULT 
72b6			;		DMARK "FAa" 
72b6			;		CALLMONITOR 
72b6			;	endif 
72b6			;	call cmp16 
72b6			;	jp z, .chk_faulta 
72b6			; 
72b6			;	ld de, sfaultsu 
72b6			;	jp .chk_fault 
72b6			 
72b6 2a fd fe		.chk_faulta: ld hl, (chk_stovr) 
72b9 ed 5b 9a f1		ld de,(chk_word) 
72bd				if DEBUG_STK_FAULT 
72bd					DMARK "FAb" 
72bd					CALLMONITOR 
72bd				endif 
72bd cd ed 0f			call cmp16 
72c0 28 06			jr z, .chk_fault1 
72c2 11 63 73			ld de, sfaultso 
72c5 c3 17 73			jp .chk_fault 
72c8			.chk_fault1:  
72c8 2a e9 f9			ld hl, (chk_ret_und) 
72cb ed 5b 9a f1		ld de,(chk_word) 
72cf				if DEBUG_STK_FAULT 
72cf					DMARK "FAU" 
72cf					CALLMONITOR 
72cf				endif 
72cf cd ed 0f			call cmp16 
72d2 ca db 72			jp z, .chk_fault2 
72d5 11 73 73			ld de, sfaultru 
72d8 c3 17 73			jp .chk_fault 
72db			.chk_fault2:  
72db 2a a7 f9			ld hl, (chk_ret_ovr) 
72de ed 5b 9a f1		ld de,(chk_word) 
72e2				if DEBUG_STK_FAULT 
72e2					DMARK "FA1" 
72e2					CALLMONITOR 
72e2				endif 
72e2 cd ed 0f			call cmp16 
72e5 ca ee 72			jp z, .chk_fault3 
72e8 11 81 73			ld de, sfaultro 
72eb c3 17 73			jp .chk_fault 
72ee			.chk_fault3:  
72ee 2a 25 f9			ld hl, (chk_loop_ovr) 
72f1 ed 5b 9a f1		ld de,(chk_word) 
72f5				if DEBUG_STK_FAULT 
72f5					DMARK "FA2" 
72f5					CALLMONITOR 
72f5				endif 
72f5 cd ed 0f			call cmp16 
72f8 ca 01 73			jp z, .chk_fault4 
72fb 11 9b 73			ld de, sfaultlo 
72fe c3 17 73			jp .chk_fault 
7301			.chk_fault4:  
7301 2a 23 f7			ld hl, (chk_data_ovr) 
7304 ed 5b 9a f1		ld de,(chk_word) 
7308				if DEBUG_STK_FAULT 
7308					DMARK "FA3" 
7308					CALLMONITOR 
7308				endif 
7308 cd ed 0f			call cmp16 
730b ca 14 73			jp z, .chk_fault5 
730e 11 b5 73			ld de, sfaultdo 
7311 c3 17 73			jp .chk_fault 
7314			 
7314			 
7314			.chk_fault5:  
7314 d1				pop de 
7315 e1				pop hl 
7316			 
7316 c9				ret 
7317			 
7317 cd 9b 0d		.chk_fault: 	call clear_display 
731a 3e 28				ld a, display_row_2 
731c cd ae 0d				call str_at_display 
731f 11 45 73				   ld de, .stackfault 
7322 3e 00				ld a, display_row_1 
7324 cd ae 0d				call str_at_display 
7327 11 68 fe				    ld de, debug_mark 
732a 3e 11				ld a, display_row_1+17 
732c cd ae 0d				call str_at_display 
732f cd be 0d				call update_display 
7332			 
7332				; prompt before entering montior for investigating issue 
7332			 
7332 3e 78			ld a, display_row_4 
7334 11 f7 1d			ld de, endprog 
7337			 
7337 cd be 0d			call update_display		 
733a			 
733a cd 7d 20			call next_page_prompt 
733d			 
733d d1				pop de 
733e e1				pop hl 
733f cd 4b 1e				call monitor 
7342 c3 54 1d				jp warmstart 
7345					;jp 0 
7345					;halt 
7345			 
7345			 
7345			 
7345 .. 00		.stackfault: 	db "Stack fault:",0 
7352			 
7352 .. 00		sfaultsu: 	db	"Stack under flow",0 
7363 .. 00		sfaultso: 	db	"Stack over flow",0 
7373 .. 00		sfaultru:	db "RTS underflow",0 
7381 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
739b .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
73b5 .. 00		sfaultdo:	db "DTS overflow", 0 
73c2			 
73c2			 
73c2			fault_dsp_under: 
73c2 11 d4 73			ld de, .dsp_under 
73c5 c3 84 74			jp .show_fault 
73c8			 
73c8			fault_rsp_under: 
73c8 11 e2 73			ld de, .rsp_under 
73cb c3 84 74			jp .show_fault 
73ce			fault_loop_under: 
73ce 11 f0 73			ld de, .loop_under 
73d1 c3 84 74			jp .show_fault 
73d4			 
73d4 .. 00		.dsp_under: db "DSP Underflow",0 
73e2 .. 00		.rsp_under: db "RSP Underflow",0 
73f0 .. 00		.loop_under: db "LOOP Underflow",0 
73ff			 
73ff			 
73ff d5			type_faultn: 	push de 
7400 e5					push hl 
7401 cd 9b 0d				call clear_display 
7404 11 2b 74				   ld de, .typefaultn 
7407 3e 00				ld a, display_row_1 
7409 cd ae 0d				call str_at_display 
740c 11 68 fe				    ld de, debug_mark 
740f 3e 11				ld a, display_row_1+17 
7411 cd ae 0d				call str_at_display 
7414 cd be 0d				call update_display 
7417			 
7417				; prompt before entering montior for investigating issue 
7417			 
7417 3e 78			ld a, display_row_4 
7419 11 f7 1d			ld de, endprog 
741c			 
741c cd be 0d			call update_display		 
741f			 
741f cd 7d 20			call next_page_prompt 
7422			 
7422 e5					push hl 
7423 d5					push de 
7424 cd 4b 1e				call monitor 
7427 c3 54 1d				jp warmstart 
742a 76					halt 
742b			 
742b			 
742b .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
7442			 
7442 d5			type_faults: 	push de 
7443 e5					push hl 
7444 cd 9b 0d				call clear_display 
7447 11 6d 74				   ld de, .typefaults 
744a 3e 00				ld a, display_row_1 
744c cd ae 0d				call str_at_display 
744f 11 68 fe				    ld de, debug_mark 
7452 3e 11				ld a, display_row_1+17 
7454 cd ae 0d				call str_at_display 
7457 cd be 0d				call update_display 
745a			 
745a				; prompt before entering montior for investigating issue 
745a			 
745a 3e 78			ld a, display_row_4 
745c 11 f7 1d			ld de, endprog 
745f			 
745f cd be 0d			call update_display		 
7462			 
7462 cd 7d 20			call next_page_prompt 
7465			 
7465 e1					pop hl 
7466 d1					pop de 
7467 cd 4b 1e				call monitor 
746a c3 54 1d				jp warmstart 
746d			 
746d			 
746d .. 00		.typefaults: db "STR Type Expected TOS!",0 
7484			 
7484			.show_fault: 	 
7484 d5					push de 
7485 cd 9b 0d				call clear_display 
7488 d1					pop de 
7489 3e 00				ld a, display_row_1 
748b cd ae 0d				call str_at_display 
748e 11 68 fe				    ld de, debug_mark 
7491 3e 11				ld a, display_row_1+17 
7493 cd ae 0d				call str_at_display 
7496 cd be 0d				call update_display 
7499			 
7499				; prompt before entering montior for investigating issue 
7499			 
7499 3e 78			ld a, display_row_4 
749b 11 f7 1d			ld de, endprog 
749e			 
749e cd be 0d			call update_display		 
74a1			 
74a1 cd 7d 20			call next_page_prompt 
74a4			 
74a4 e1					pop hl 
74a5 d1					pop de 
74a6 cd 4b 1e				call monitor 
74a9			; do a dump to cli and not warmstart so we preserve all of the uwords.  
74a9			; TODO Make optional fault restart to cli or warm boot? 
74a9					;jp warmstart 
74a9 c3 9e 1d				jp cli 
74ac 76					halt 
74ad			 
74ad			; handle the auto run of code from files in storage 
74ad			 
74ad			 
74ad			include "forth_startup.asm" 
74ad			; Which startup method to use? 
74ad			; 
74ad			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
74ad			; followed by loading of a list of scripts in eeprom 
74ad			 
74ad			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
74ad			; from eeprom 
74ad			 
74ad			; Select with define in main stubs 
74ad			 
74ad			if STARTUP_V1 
74ad				include "forth_startupv1.asm" 
74ad			endif 
74ad			if STARTUP_V2 
74ad				include "forth_startupv2.asm" 
74ad			; Version 2 of the startup  
74ad			;  
74ad			; Auto load any files in bank 1 that start with a '*' 
74ad			; If no se storage then revert to using eprom 
74ad			 
74ad			 
74ad			if STORAGE_SE = 0 
74ad			 
74ad			sprompt1: db "Startup load...",0 
74ad			sprompt2: db "Run? 1=No *=End #=All",0 
74ad			 
74ad			 
74ad			 
74ad			 
74ad			forth_startup: 
74ad				ld hl, startcmds 
74ad				ld a, 0 
74ad				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
74ad			 
74ad			.start1:	push hl 
74ad				call clear_display 
74ad				ld de, sprompt1 
74ad			        ld a, display_row_1 
74ad				call str_at_display 
74ad				ld de, sprompt2 
74ad			        ld a, display_row_2 
74ad				call str_at_display 
74ad				pop hl 
74ad				push hl 
74ad				ld e,(hl) 
74ad				inc hl 
74ad				ld d,(hl) 
74ad			        ld a, display_row_3 
74ad				call str_at_display 
74ad				call update_display 
74ad			 
74ad			 
74ad				ld a, (os_last_cmd) 
74ad				cp 0 
74ad				jr z, .startprompt 
74ad				call delay250ms 
74ad				jr .startdo 
74ad				 
74ad				 
74ad			 
74ad			.startprompt: 
74ad			 
74ad				ld a,display_row_4 + display_cols - 1 
74ad			        ld de, endprg 
74ad				call str_at_display 
74ad				call update_display 
74ad				call delay1s 
74ad				call cin_wait 
74ad						 
74ad				cp '*' 
74ad				jr z, .startupend1 
74ad				cp '#' 
74ad				jr nz, .startno 
74ad				ld a, 1 
74ad				ld (os_last_cmd),a 
74ad				jr .startdo 
74ad			.startno:	cp '1' 
74ad				jr z,.startnxt  
74ad			 
74ad				; exec startup line 
74ad			.startdo:	 
74ad				pop hl 
74ad				push hl 
74ad				 
74ad				ld e,(hl) 
74ad				inc hl 
74ad				ld d,(hl) 
74ad				ex de,hl 
74ad			 
74ad				push hl 
74ad			 
74ad				ld a, 0 
74ad				;ld a, FORTH_END_BUFFER 
74ad				call strlent 
74ad				inc hl   ; include zero term to copy 
74ad				ld b,0 
74ad				ld c,l 
74ad				pop hl 
74ad				ld de, scratch 
74ad				ldir 
74ad			 
74ad			 
74ad				ld hl, scratch 
74ad				call forthparse 
74ad				call forthexec 
74ad				call forthexec_cleanup 
74ad			 
74ad				ld a, display_row_4 
74ad				ld de, endprog 
74ad			 
74ad				call update_display		 
74ad			 
74ad				ld a, (os_last_cmd) 
74ad				cp 0 
74ad				jr nz, .startnxt 
74ad				call next_page_prompt 
74ad			        call clear_display 
74ad				call update_display		 
74ad			 
74ad				; move onto next startup line? 
74ad			.startnxt: 
74ad			 
74ad				call delay250ms 
74ad				pop hl 
74ad			 
74ad				inc hl 
74ad				inc hl 
74ad			 
74ad				push hl 
74ad				ld e, (hl) 
74ad				inc hl 
74ad				ld d, (hl) 
74ad				pop hl 
74ad				; TODO replace 0 test 
74ad			 
74ad				ex de, hl 
74ad				call ishlzero 
74ad			;	ld a,e 
74ad			;	add d 
74ad			;	cp 0    ; any left to do? 
74ad				ex de, hl 
74ad				jp nz, .start1 
74ad				jr .startupend 
74ad			 
74ad			.startupend1: pop hl 
74ad			.startupend: 
74ad			 
74ad				call clear_display 
74ad				call update_display 
74ad				ret 
74ad			endif 
74ad			 
74ad			 
74ad			if STORAGE_SE 
74ad			 
74ad			;sprompt3: db "Loading from start-up file:",0 
74ad .. 00		sprompt3: db "  Searching...",0 
74bc			;sprompt4: db "(Any key to stop)",0 
74bc			 
74bc			 
74bc			forth_autoload: 
74bc			 
74bc				; load block 0 of store 1 
74bc				 
74bc 3e fe			ld a, $fe      ; bit 0 clear 
74be 32 5d fa			ld (spi_device), a 
74c1			 
74c1 cd 16 05			call storage_get_block_0 
74c4			 
74c4 3a 98 fa			ld a, (store_page+STORE_0_AUTOFILE) 
74c7			 
74c7 fe 00			cp 0 
74c9 c8				ret z     ; auto start not enabled 
74ca			 
74ca cd 9b 0d			call clear_display 
74cd			 
74cd				; set bank 
74cd			 
74cd 3a 9a fa				ld a, (store_page+STORE_0_BANKRUN) 
74d0 32 5d fa				ld (spi_device), a 
74d3			 
74d3			 
74d3				; generate a directory of bank 1 and search for flagged files 
74d3			 
74d3					if DEBUG_FORTH_WORDS_KEY 
74d3						DMARK "DIR" 
74d3 f5				push af  
74d4 3a e8 74			ld a, (.dmark)  
74d7 32 68 fe			ld (debug_mark),a  
74da 3a e9 74			ld a, (.dmark+1)  
74dd 32 69 fe			ld (debug_mark+1),a  
74e0 3a ea 74			ld a, (.dmark+2)  
74e3 32 6a fe			ld (debug_mark+2),a  
74e6 18 03			jr .pastdmark  
74e8 ..			.dmark: db "DIR"  
74eb f1			.pastdmark: pop af  
74ec			endm  
# End of macro DMARK
74ec						CALLMONITOR 
74ec cd 6c fe			call debug_vector  
74ef				endm  
# End of macro CALLMONITOR
74ef					endif 
74ef			 
74ef cd 16 05			call storage_get_block_0 
74f2			 
74f2 21 77 fa			ld hl, store_page     ; get current id count 
74f5 46				ld b, (hl) 
74f6 0e 00			ld c, 0    ; count of files   
74f8					if DEBUG_FORTH_WORDS 
74f8						DMARK "DI1" 
74f8 f5				push af  
74f9 3a 0d 75			ld a, (.dmark)  
74fc 32 68 fe			ld (debug_mark),a  
74ff 3a 0e 75			ld a, (.dmark+1)  
7502 32 69 fe			ld (debug_mark+1),a  
7505 3a 0f 75			ld a, (.dmark+2)  
7508 32 6a fe			ld (debug_mark+2),a  
750b 18 03			jr .pastdmark  
750d ..			.dmark: db "DI1"  
7510 f1			.pastdmark: pop af  
7511			endm  
# End of macro DMARK
7511						CALLMONITOR 
7511 cd 6c fe			call debug_vector  
7514				endm  
# End of macro CALLMONITOR
7514					endif 
7514			 
7514				; check for empty drive 
7514			 
7514 3e 00			ld a, 0 
7516 b8				cp b 
7517 ca 64 75			jp z, .dirdone 
751a			 
751a				; for each of the current ids do a search for them and if found push to stack 
751a			 
751a c5			.diritem:	push bc 
751b 21 40 00				ld hl, STORE_BLOCK_PHY 
751e 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
7520 58					ld e,b 
7521			 
7521 d5					push de 
7522 e5					push hl 
7523 cd 9b 0d			call clear_display 
7526 3e 32			ld a, display_row_2 + 10 
7528 11 ad 74			ld de, sprompt3 
752b cd ae 0d			call str_at_display 
752e cd f2 0c			call active 
7531 eb				ex de, hl 
7532 3e 2f			ld a, display_row_2 + 7 
7534 cd ae 0d			call str_at_display 
7537 cd be 0d			call update_display 
753a e1				pop hl 
753b d1				pop de 
753c			 
753c			;		if DEBUG_FORTH_WORDS 
753c			;			DMARK "DI2" 
753c			;			CALLMONITOR 
753c			;		endif 
753c			 
753c cd 98 07				call storage_findnextid 
753f			 
753f			;		if DEBUG_FORTH_WORDS 
753f			;			DMARK "DI3" 
753f			;			CALLMONITOR 
753f			;		endif 
753f			 
753f					; if found hl will be non zero 
753f			 
753f cd f8 0f				call ishlzero 
7542			;		ld a, l 
7542			;		add h 
7542			; 
7542			;		cp 0 
7542 28 1d				jr z, .dirnotfound 
7544			 
7544					; increase count 
7544			 
7544 c1					pop bc	 
7545 0c					inc c 
7546 c5					push bc 
7547					 
7547			 
7547					; get file header and push the file name 
7547			 
7547 11 77 fa				ld de, store_page 
754a cd 65 04				call storage_read_block 
754d			 
754d					; push file id to stack 
754d				 
754d			 
754d					; is this a file we want to run? 
754d			 
754d 21 7a fa				ld hl, store_page+3 
7550 7e					ld a,(hl) 
7551 fe 2a				cp '*' 
7553 20 0c				jr nz,  .dirnotfound 
7555					 
7555			 
7555			 
7555 3a 77 fa				ld a, (store_page) 
7558 d5					push de 
7559 e5					push hl 
755a c5					push bc 
755b cd 87 75				call .autorunf 
755e c1					pop bc 
755f e1					pop hl 
7560 d1					pop de 
7561			 
7561			 
7561			 
7561				; save this extent 
7561			 
7561					; push file name 
7561			;display file name to run 
7561			 
7561			;		ld hl, store_page+3 
7561			;		if DEBUG_FORTH_WORDS 
7561			;			DMARK "DI5" 
7561			;			CALLMONITOR 
7561			;		endif 
7561			; 
7561			;		 
7561			; 
7561			;		call forth_push_str 
7561			;		if DEBUG_FORTH_WORDS 
7561			;			DMARK "DI6" 
7561			;			CALLMONITOR 
7561			;		endif 
7561			.dirnotfound: 
7561 c1					pop bc     
7562 10 b6				djnz .diritem 
7564				 
7564			.dirdone:	 
7564					if DEBUG_FORTH_WORDS 
7564						DMARK "DI7" 
7564 f5				push af  
7565 3a 79 75			ld a, (.dmark)  
7568 32 68 fe			ld (debug_mark),a  
756b 3a 7a 75			ld a, (.dmark+1)  
756e 32 69 fe			ld (debug_mark+1),a  
7571 3a 7b 75			ld a, (.dmark+2)  
7574 32 6a fe			ld (debug_mark+2),a  
7577 18 03			jr .pastdmark  
7579 ..			.dmark: db "DI7"  
757c f1			.pastdmark: pop af  
757d			endm  
# End of macro DMARK
757d						CALLMONITOR 
757d cd 6c fe			call debug_vector  
7580				endm  
# End of macro CALLMONITOR
7580					endif 
7580			 
7580 cd 9b 0d				call clear_display 
7583 cd be 0d				call update_display 
7586			 
7586 c9					ret 
7587			 
7587			 
7587			 
7587			 
7587			 
7587			.autorunf: 
7587			 
7587			 
7587				; get file id to load from and get the file name to display 
7587			 
7587			;		ld a, (store_page+STORE_0_FILERUN) 
7587			 
7587 2e 00				ld l, 0 
7589 67					ld h, a 
758a 11 77 fa				ld de, store_page 
758d			 
758d					if DEBUG_FORTH_WORDS 
758d						DMARK "ASp" 
758d f5				push af  
758e 3a a2 75			ld a, (.dmark)  
7591 32 68 fe			ld (debug_mark),a  
7594 3a a3 75			ld a, (.dmark+1)  
7597 32 69 fe			ld (debug_mark+1),a  
759a 3a a4 75			ld a, (.dmark+2)  
759d 32 6a fe			ld (debug_mark+2),a  
75a0 18 03			jr .pastdmark  
75a2 ..			.dmark: db "ASp"  
75a5 f1			.pastdmark: pop af  
75a6			endm  
# End of macro DMARK
75a6						CALLMONITOR 
75a6 cd 6c fe			call debug_vector  
75a9				endm  
# End of macro CALLMONITOR
75a9					endif 
75a9 cd be 09				call storage_read 
75ac			 
75ac					if DEBUG_FORTH_WORDS 
75ac						DMARK "ASr" 
75ac f5				push af  
75ad 3a c1 75			ld a, (.dmark)  
75b0 32 68 fe			ld (debug_mark),a  
75b3 3a c2 75			ld a, (.dmark+1)  
75b6 32 69 fe			ld (debug_mark+1),a  
75b9 3a c3 75			ld a, (.dmark+2)  
75bc 32 6a fe			ld (debug_mark+2),a  
75bf 18 03			jr .pastdmark  
75c1 ..			.dmark: db "ASr"  
75c4 f1			.pastdmark: pop af  
75c5			endm  
# End of macro DMARK
75c5						CALLMONITOR 
75c5 cd 6c fe			call debug_vector  
75c8				endm  
# End of macro CALLMONITOR
75c8					endif 
75c8			 
75c8 cd f8 0f				call ishlzero 
75cb c8					ret z             ; file not found 
75cc			 
75cc					; display file name we are loading 
75cc			 
75cc cd 9b 0d				call clear_display 
75cf			 
75cf 3e 32				ld a, display_row_2 + 10 
75d1 11 7a fa				ld de, store_page+3 
75d4 cd ae 0d				call str_at_display 
75d7				 
75d7			; 
75d7			 
75d7			;	ld a, display_row_1+5 
75d7			;	ld de, sprompt3 
75d7			;	call str_at_display 
75d7			;	ld a, display_row_2+7 
75d7			;	call active 
75d7			;	ex de, hl 
75d7			;;	ld de, sprompt4 
75d7			;	call str_at_display 
75d7			; 
75d7 cd be 0d			call update_display 
75da			 
75da			;	call cin_wait 
75da			;	cp 'n' 
75da			;	ret z 
75da			;	cp 'N' 
75da			;	ret z 
75da			 
75da			;	call delay1s 
75da			 
75da 3a 79 fa			ld a, (store_page+2) 
75dd 32 66 fa			ld (store_openmaxext), a    ; save count of ext 
75e0 3e 01			ld a, 1  
75e2 32 67 fa			ld (store_openext), a    ; save count of ext 
75e5			 
75e5			.autof: 
75e5				; begin to read a line from file 
75e5			 
75e5 21 e5 f4			ld hl, os_cli_cmd 
75e8 22 e3 f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
75eb			  
75eb			.readext: 
75eb 3a 67 fa			ld a, (store_openext) 
75ee 6f				ld l , a 
75ef				 
75ef 3a 77 fa			ld a, (store_page) 
75f2 67				ld h, a	 
75f3 11 77 fa			ld de, store_page 
75f6					if DEBUG_FORTH_WORDS 
75f6						DMARK "ASl" 
75f6 f5				push af  
75f7 3a 0b 76			ld a, (.dmark)  
75fa 32 68 fe			ld (debug_mark),a  
75fd 3a 0c 76			ld a, (.dmark+1)  
7600 32 69 fe			ld (debug_mark+1),a  
7603 3a 0d 76			ld a, (.dmark+2)  
7606 32 6a fe			ld (debug_mark+2),a  
7609 18 03			jr .pastdmark  
760b ..			.dmark: db "ASl"  
760e f1			.pastdmark: pop af  
760f			endm  
# End of macro DMARK
760f						CALLMONITOR 
760f cd 6c fe			call debug_vector  
7612				endm  
# End of macro CALLMONITOR
7612					endif 
7612 cd be 09				call storage_read 
7615 cd f8 0f			call ishlzero 
7618 c8				ret z 
7619			 
7619			; TODO copy to exec buffer 
7619			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
7619			 
7619				; copy the record buffer to the cli buffer 
7619			 
7619 ed 5b e3 f6		ld de, (os_var_array) 
761d 21 79 fa			ld hl, store_page+2 
7620			;	ex de, hl 
7620 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
7623 ed b0			ldir 
7625 ed 53 e3 f6		ld (os_var_array), de 
7629				 
7629 3a 67 fa			ld a, (store_openext) 
762c 3c				inc a 
762d 32 67 fa			ld (store_openext), a    ; save count of ext 
7630			 
7630			 
7630			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
7630				 
7630 3a 6a fa			ld a, (store_readcont) 
7633 fe 00			cp 0 
7635 20 b4			jr nz, .readext 
7637			 
7637			;	jr z, .autoend 
7637			 
7637					if DEBUG_FORTH_WORDS 
7637						DMARK "ASc" 
7637 f5				push af  
7638 3a 4c 76			ld a, (.dmark)  
763b 32 68 fe			ld (debug_mark),a  
763e 3a 4d 76			ld a, (.dmark+1)  
7641 32 69 fe			ld (debug_mark+1),a  
7644 3a 4e 76			ld a, (.dmark+2)  
7647 32 6a fe			ld (debug_mark+2),a  
764a 18 03			jr .pastdmark  
764c ..			.dmark: db "ASc"  
764f f1			.pastdmark: pop af  
7650			endm  
# End of macro DMARK
7650						CALLMONITOR 
7650 cd 6c fe			call debug_vector  
7653				endm  
# End of macro CALLMONITOR
7653					endif 
7653 e5				push hl	 
7654 d5				push de 
7655 cd f2 0c			call active 
7658 eb				ex de, hl 
7659 3e 2f			ld a, display_row_2 + 7 
765b cd ae 0d			call str_at_display 
765e			 
765e cd be 0d			call update_display 
7661 d1				pop de  
7662 e1				pop hl 
7663			;	call delay250ms 
7663			 
7663			 
7663			 
7663			 
7663			.autoexec: 
7663			 
7663			 
7663 21 e5 f4			ld hl, os_cli_cmd 
7666					if DEBUG_FORTH_WORDS 
7666						DMARK "ASx" 
7666 f5				push af  
7667 3a 7b 76			ld a, (.dmark)  
766a 32 68 fe			ld (debug_mark),a  
766d 3a 7c 76			ld a, (.dmark+1)  
7670 32 69 fe			ld (debug_mark+1),a  
7673 3a 7d 76			ld a, (.dmark+2)  
7676 32 6a fe			ld (debug_mark+2),a  
7679 18 03			jr .pastdmark  
767b ..			.dmark: db "ASx"  
767e f1			.pastdmark: pop af  
767f			endm  
# End of macro DMARK
767f						CALLMONITOR 
767f cd 6c fe			call debug_vector  
7682				endm  
# End of macro CALLMONITOR
7682					endif 
7682 cd 00 25			call forthparse 
7685 cd 40 25			call forthexec 
7688 cd 52 24			call forthexec_cleanup 
768b			 
768b			 
768b			 
768b c3 e5 75			jp .autof 
768e			;.autofdone: 
768e			; 
768e			;		if DEBUG_FORTH_WORDS 
768e			;			DMARK "ASx" 
768e			;			CALLMONITOR 
768e			;		endif 
768e			;;	call clear_display 
768e			;	ret 
768e			 
768e			 
768e			 
768e			endif 
# End of file forth_startupv2.asm
768e			endif 
768e			 
# End of file forth_startup.asm
768e			 
768e			; eof 
# End of file forth_kernel.asm
768e			;include "nascombasic.asm" 
768e			 
768e			 
768e			; find out where the code ends if loaded into RAM (for SC114) 
768e			;endofcode:  
768e			;	nop 
768e			 
768e			 
768e			; jump to nmi vector 
768e			 
768e			init_nmi: 
768e 3e c9			ld a, $c9   ; RET 
7690 32 6f fe			ld (nmi_vector), a 
7693 c9				ret 
7694			nmi: 
7694 e5				push hl 
7695 d5				push de 
7696 c5				push bc 
7697 f5				push af 
7698 cd 6f fe			call nmi_vector 
769b f5				push af 
769c c5				push bc 
769d d5				push de 
769e e5				push hl 
769f ed 4d			reti 
76a1			 
76a1			 
76a1			; eof 
76a1			 
# End of file main.asm
76a1			include "firmware_lcd_4x40.asm" 
76a1			; **********************************************************************  
76a1			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
76a1			; **********************************************************************  
76a1			;  
76a1			; **  Written as a Small Computer Monitor App  
76a1			; **  www.scc.me.uk  
76a1			;  
76a1			; History  
76a1			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
76a1			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
76a1			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
76a1			;  
76a1			; **********************************************************************  
76a1			;  
76a1			; This program is an example of one of the methods of interfacing an   
76a1			; alphanumeric LCD module.   
76a1			;  
76a1			; In this example the display is connected to either a Z80 PIO or a   
76a1			; simple 8-bit output port.   
76a1			;  
76a1			; This interfacing method uses 4-bit data mode and uses time delays  
76a1			; rather than polling the display's ready status. As a result the   
76a1			; interface only requires 6 simple output lines:  
76a1			;   Output bit 0 = not used  
76a1			;   Output bit 1 = not used  
76a1			;   Output bit 2 = RS         High = data, Low = instruction  
76a1			;   Output bit 3 = E          Active high  
76a1			;   Output bit 4 = DB4  
76a1			;   Output bit 5 = DB5  
76a1			;   Output bit 6 = DB6  
76a1			;   Output bit 7 = DB7  
76a1			; Display's R/W is connected to 0v so it is always in write mode  
76a1			;  
76a1			; This set up should work with any system supporting the RC2014 bus  
76a1			  
76a1			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
76a1			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
76a1			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
76a1			;  
76a1			; **********************************************************************  
76a1			  
76a1			; Additonal for 4x40. E1 and E2 instead of just E   
76a1			; TODO swipe vidout signal on port a to activate E2  
76a1			  
76a1			; **********************************************************************  
76a1			; **  Constants  
76a1			; **********************************************************************  
76a1			; LCD constants required by LCD support module  
76a1			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
76a1			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
76a1			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
76a1			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
76a1			; TODO Decide which E is being set  
76a1			kLCDWidth:  EQU display_cols             ;Width in characters  
76a1			  
76a1			; **********************************************************************  
76a1			; **  Code library usage  
76a1			; **********************************************************************  
76a1			  
76a1			; send character to current cursor position  
76a1			; wraps and/or scrolls screen automatically  
76a1			  
76a1			  
76a1			  
76a1			lcd_init:  
76a1			  
76a1			; SCMonAPI functions used  
76a1			  
76a1			; Alphanumeric LCD functions used  
76a1			; no need to specify specific functions for this module  
76a1			  
76a1 3e cf		            LD   A, 11001111b  
76a3 d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
76a5 3e 00		            LD   A, 00000000b  
76a7 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
76a9			  
76a9			; Initialise alphanumeric LCD module  
76a9 3e 00				ld a, 0  
76ab 32 c8 fb				ld (display_lcde1e2), a  
76ae cd 2f 77		            CALL fLCD_Init      ;Initialise LCD module  
76b1 3e 01				ld a, 1  
76b3 32 c8 fb				ld (display_lcde1e2), a  
76b6 cd 2f 77		            CALL fLCD_Init      ;Initialise LCD module  
76b9			  
76b9 c9				ret  
76ba			  
76ba			;  
76ba			;;  
76ba			; lcd functions  
76ba			;  
76ba			;  
76ba			  
76ba			; what is at cursor position   
76ba			  
76ba			;get_cursor:	ld de, (cursor_row)   ;  row + col  
76ba			;		call curptr  
76ba			;		ret  
76ba			  
76ba			  
76ba			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
76ba			  
76ba			curptr:  
76ba c5				push bc  
76bb 21 ae fd			ld hl, display_fb0  
76be			cpr:	  
76be				; loop for cursor whole row  
76be 0e 28			ld c, display_cols  
76c0 23			cpr1:	inc hl  
76c1 0d				dec c  
76c2 20 fc			jr nz, cpr1  
76c4 05				dec b  
76c5 20 f7			jr nz, cpr  
76c7			  
76c7				; add col	  
76c7			  
76c7 23			cpr2:	inc hl  
76c8 1d				dec e  
76c9 20 fc			jr nz, cpr2  
76cb			  
76cb c1				pop bc  
76cc c9				ret  
76cd				  
76cd			  
76cd			  
76cd			  
76cd			  
76cd			; write the frame buffer given in hl to hardware   
76cd 22 c6 fb		write_display: ld (display_write_tmp), hl 	   
76d0 3e 00			ld a, kLCD_Line1  
76d2 cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
76d5 06 28			ld b, display_cols  
76d7 ed 5b c6 fb		ld de, (display_write_tmp)  
76db cd 27 77			call write_len_string  
76de				  
76de				  
76de 2a c6 fb			ld hl, (display_write_tmp)  
76e1 11 28 00			ld de, display_cols  
76e4 19				add hl,de  
76e5 22 c6 fb			ld (display_write_tmp),hl  
76e8			  
76e8				  
76e8 3e 28			ld a, kLCD_Line2  
76ea cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
76ed 06 28			ld b, display_cols  
76ef ed 5b c6 fb		ld de, (display_write_tmp)  
76f3 cd 27 77			call write_len_string  
76f6				  
76f6 2a c6 fb			ld hl, (display_write_tmp)  
76f9 11 28 00			ld de, display_cols  
76fc 19				add hl,de  
76fd 22 c6 fb			ld (display_write_tmp),hl  
7700			  
7700				  
7700 3e 50			ld a, kLCD_Line3  
7702 cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7705 06 28			ld b, display_cols  
7707 ed 5b c6 fb		ld de, (display_write_tmp)  
770b cd 27 77			call write_len_string  
770e				  
770e 2a c6 fb			ld hl, (display_write_tmp)  
7711 11 28 00			ld de, display_cols  
7714 19				add hl,de  
7715 22 c6 fb			ld (display_write_tmp),hl  
7718			  
7718				  
7718 3e 78			ld a, kLCD_Line4  
771a cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
771d 06 28			ld b, display_cols  
771f ed 5b c6 fb		ld de, (display_write_tmp)  
7723 cd 27 77			call write_len_string  
7726 c9					ret  
7727				  
7727				; write out a fixed length string given in b from de  
7727			  
7727 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
7728 cd 94 77		            CALL fLCD_Data      ;Write character to display  
772b 13				inc de  
772c 10 f9			djnz write_len_string  
772e c9				ret  
772f			  
772f			; Some other things to do  
772f			;            LD   A, kLCD_Clear ;Display clear  
772f			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
772f			;            LD   A, kLCD_Under ;Display on with underscore cursor  
772f			;            LD   A, kLCD_On     ;Display on with no cursor  
772f			;            ;LD   A, kLCD_Off   ;Display off  
772f			;            CALL fLCD_Inst      ;Send instruction to display  
772f			;  
772f			;  
772f			;            halt  
772f			;  
772f			;  
772f			;MsgHello:   DB  "Hello World!",0  
772f			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
772f			  
772f			; Custom characters 5 pixels wide by 8 pixels high  
772f			; Up to 8 custom characters can be defined  
772f			;BitMaps:      
772f			;; Character 0x00 = Battery icon  
772f			;            DB  01110b  
772f			;            DB  11011b  
772f			;            DB  10001b  
772f			;            DB  10001b  
772f			;            DB  11111b  
772f			;            DB  11111b  
772f			;            DB  11111b  
772f			;            DB  11111b  
772f			;; Character 0x01 = Bluetooth icon  
772f			;            DB  01100b  
772f			;            DB  01010b  
772f			;            DB  11100b  
772f			;            DB  01000b  
772f			;            DB  11100b  
772f			;            DB  01010b  
772f			;            DB  01100b  
772f			;            DB  00000b  
772f			;  
772f			  
772f			  
772f			; **********************************************************************  
772f			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
772f			; **********************************************************************  
772f			;  
772f			; **  Written as a Small Computer Monitor App   
772f			; **  Version 0.1 SCC 2018-05-16  
772f			; **  www.scc.me.uk  
772f			;  
772f			; **********************************************************************  
772f			;  
772f			; This module provides support for alphanumeric LCD modules using with  
772f			; *  HD44780 (or compatible) controller  
772f			; *  5 x 7 pixel fonts  
772f			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
772f			; *  Interface via six digital outputs to the display (see below)  
772f			;  
772f			; LCD module pinout:  
772f			;   1  Vss   0v supply  
772f			;   2  Vdd   5v supply  
772f			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
772f			;   4  RS    High = data, Low = instruction  
772f			;   5  R/W   High = Read, Low = Write  
772f			;   6  E     Enable signal (active high)  
772f			;   7  DB0   Data bit 0  
772f			;   8  DB1   Data bit 1  
772f			;   9  DB2   Data bit 2  
772f			;  10  DB3   Data bit 3  
772f			;  11  DB4   Data bit 4  
772f			;  12  DB5   Data bit 5  
772f			;  13  DB6   Data bit 6  
772f			;  14  DB7   Data bit 7  
772f			;  15  A     Backlight anode (+)  
772f			;  16  K     Backlight cathode (-)  
772f			;  
772f			; This interfacing method uses 4-bit data mode and uses time delays  
772f			; rather than polling the display's ready status. As a result the   
772f			; interface only requires 6 simple output lines:  
772f			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
772f			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
772f			;   LCD DB4 = Microcomputer output port bit 4  
772f			;   LCD DB5 = Microcomputer output port bit 5  
772f			;   LCD DB6 = Microcomputer output port bit 6  
772f			;   LCD DB7 = Microcomputer output port bit 7  
772f			; Display's R/W is connected to 0v so it is always in write mode  
772f			; All 6 connections must be on the same port address <kLCDPrt>  
772f			; This method also allows a decent length of cable from micro to LCD  
772f			;  
772f			; **********************************************************************  
772f			;  
772f			; To include the code for any given function provided by this module,   
772f			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
772f			; the parent source file.  
772f			; For example:  #REQUIRES   uHexPrefix  
772f			;  
772f			; Also #INCLUDE this file at some point after the #REQUIRES statements  
772f			; in the parent source file.  
772f			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
772f			;  
772f			; These are the function names provided by this module:  
772f			; fLCD_Init                     ;Initialise LCD  
772f			; fLCD_Inst                     ;Send instruction to LCD  
772f			; fLCD_Data                     ;Send data byte to LCD  
772f			; fLCD_Pos                      ;Position cursor  
772f			; fLCD_Str                      ;Display string  
772f			; fLCD_Def                      ;Define custom character  
772f			;  
772f			; **********************************************************************  
772f			;  
772f			; Requires SCMonAPI.asm to also be included in the project  
772f			;  
772f			  
772f			  
772f			; **********************************************************************  
772f			; **  Constants  
772f			; **********************************************************************  
772f			  
772f			; Constants that must be defined externally  
772f			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
772f			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
772f			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
772f			;kLCDWidth: EQU 20             ;Width in characters  
772f			  
772f			; general line offsets in any frame buffer  
772f			  
772f			  
772f			display_row_1: equ 0  
772f			display_row_2: equ display_row_1+display_cols  
772f			display_row_3: equ display_row_2 + display_cols  
772f			display_row_4: equ display_row_3 + display_cols  
772f			;display_row_4_eol:   
772f			  
772f			  
772f			; Cursor position values for the start of each line  
772f			  
772f			; E  
772f			kLCD_Line1: EQU 0x00   
772f			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
772f			; E1  
772f			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
772f			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
772f			  
772f			; Instructions to send as A register to fLCD_Inst  
772f			kLCD_Clear: EQU 00000001b     ;LCD clear  
772f			kLCD_Off:   EQU 00001000b     ;LCD off  
772f			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
772f			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
772f			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
772f			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
772f			  
772f			; Constants used by this code module  
772f			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
772f			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
772f			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
772f			  
772f			  
772f			  
772f			; **********************************************************************  
772f			; **  LCD support functions  
772f			; **********************************************************************  
772f			  
772f			; Initialise alphanumeric LCD module  
772f			; LCD control register codes:  
772f			;   DL   0 = 4-bit mode        1 = 8-bit mode  
772f			;   N    0 = 1-line mode       1 = 2-line mode  
772f			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
772f			;   D    0 = Display off       1 = Display on  
772f			;   C    0 = Cursor off        1 = Cursor on  
772f			;   B    0 = Blinking off      1 = Blinking on  
772f			;   ID   0 = Decrement mode    1 = Increment mode  
772f			;   SH   0 = Entire shift off  1 = Entire shift on  
772f 3e 28		fLCD_Init:  LD   A, 40  
7731 cd 56 78		            CALL LCDDelay       ;Delay 40ms after power up  
7734			; For reliable reset set 8-bit mode - 3 times  
7734 cd 26 78		            CALL WrFn8bit       ;Function = 8-bit mode  
7737 cd 26 78		            CALL WrFn8bit       ;Function = 8-bit mode  
773a cd 26 78		            CALL WrFn8bit       ;Function = 8-bit mode  
773d			; Set 4-bit mode  
773d cd 22 78		            CALL WrFn4bit       ;Function = 4-bit mode  
7740 cd 54 78		            CALL LCDDelay1      ;Delay 37 us or more  
7743			; Function set  
7743 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
7745 cd 58 77		            CALL fLCD_Inst      ;2 line, display on  
7748			; Display On/Off control  
7748 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
774a cd 58 77		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
774d			; Display Clear  
774d 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
774f cd 58 77		            CALL fLCD_Inst      ;Clear display  
7752			; Entry mode  
7752 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
7754 cd 58 77		            CALL fLCD_Inst      ;Increment mode, shift off  
7757			; Display module now initialised  
7757 c9			            RET  
7758			; ok to here  
7758			  
7758			; Write instruction to LCD  
7758			;   On entry: A = Instruction byte to be written  
7758			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7758 f5			fLCD_Inst:  PUSH AF  
7759 f5			            PUSH AF  
775a cd 6c 77		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
775d f1			            POP  AF  
775e 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
775f 17			            RLA  
7760 17			            RLA  
7761 17			            RLA  
7762 cd 6c 77		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
7765 3e 02		            LD   A, 2  
7767 cd 56 78		            CALL LCDDelay       ;Delay 2 ms to complete   
776a f1			            POP  AF  
776b c9			            RET  
776c			Wr4bits:   
776c f5					push af  
776d 3a c8 fb				ld a, (display_lcde1e2)  
7770 fe 00				cp 0     ; e  
7772 20 10				jr nz, .wea2	  
7774 f1					pop af  
7775 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7777 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7779 cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
777b cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
777d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
777f cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
7781 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7783 c9			            RET  
7784 f1			.wea2:		pop af  
7785 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7787 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7789 cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
778b cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
778d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
778f cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
7791 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7793 c9			            RET  
7794			  
7794			  
7794			; Write data to LCD  
7794			;   On entry: A = Data byte to be written  
7794			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7794 f5			fLCD_Data:  PUSH AF  
7795 f5			            PUSH AF  
7796 cd a8 77		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
7799 f1			            POP  AF  
779a 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
779b 17			            RLA  
779c 17			            RLA  
779d 17			            RLA  
779e cd a8 77		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
77a1 3e 96		            LD   A, 150  
77a3 3d			Wait:      DEC  A              ;Wait a while to allow data   
77a4 20 fd		            JR   NZ, Wait      ;  write to complete  
77a6 f1			            POP  AF  
77a7 c9			            RET  
77a8			Wr4bitsa:     
77a8 f5					push af  
77a9 3a c8 fb				ld a, (display_lcde1e2)  
77ac fe 00				cp 0     ; e1  
77ae 20 16				jr nz, .we2	  
77b0 f1					pop af  
77b1 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
77b3 cb d7		            SET  kLCDBitRS, A  
77b5 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
77b7 cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
77b9 cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
77bb d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
77bd cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
77bf d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
77c1 cb 97		            RES  kLCDBitRS, A  
77c3 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
77c5 c9			            RET  
77c6 f1			.we2:		pop af  
77c7 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
77c9 cb d7		            SET  kLCDBitRS, A  
77cb d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
77cd cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
77cf cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
77d1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
77d3 cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
77d5 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
77d7 cb 97		            RES  kLCDBitRS, A  
77d9 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
77db c9			            RET  
77dc			  
77dc			  
77dc			; Position cursor to specified location  
77dc			;   On entry: A = Cursor position  
77dc			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
77dc f5			fLCD_Pos:   PUSH AF  
77dd					; at this point set the E1 or E2 flag depending on position  
77dd			  
77dd c5					push bc  
77de			;		push af  
77de 06 00				ld b, 0  
77e0 4f					ld c, a  
77e1 3e 4f				ld a, kLCD_Line3-1  
77e3 b7			 		or a      ;clear carry flag  
77e4 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
77e5 38 04				jr c, .pe1  
77e7			  
77e7					; E selection  
77e7 cb 80				res 0, b         ; bit 0 unset e  
77e9			;		pop af    ; before line 3 so recover orig pos  
77e9			;		ld c, a    ; save for poking back  
77e9 18 06				jr .peset	          
77eb			.pe1:          	; E2 selection  
77eb cb c0				set 0, b         ; bit 0 set e1  
77ed 79					ld a, c  
77ee de 4f				sbc a, kLCD_Line3-1  
77f0 4f					ld c, a	         ; save caculated offset  
77f1			;		pop af     ; bin this original value now we have calculated form  
77f1			  
77f1			.peset:		; set bit  
77f1 78					ld a, b  
77f2 32 c8 fb				ld (display_lcde1e2), a 	  
77f5 79					ld a, c  
77f6 c1					pop bc  
77f7			  
77f7 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
77f9 cd 58 77		            CALL fLCD_Inst      ;Write instruction to LCD  
77fc f1			            POP  AF  
77fd c9			            RET  
77fe			  
77fe			  
77fe			; Output text string to LCD  
77fe			;   On entry: DE = Pointer to null terminated text string  
77fe			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
77fe 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
77ff b7			            OR   A              ;Null terminator?  
7800 c8			            RET  Z              ;Yes, so finished  
7801 cd 94 77		            CALL fLCD_Data      ;Write character to display  
7804 13			            INC  DE             ;Point to next character  
7805 18 f7		            JR   fLCD_Str       ;Repeat  
7807 c9					ret  
7808			  
7808			; Define custom character  
7808			;   On entry: A = Character number (0 to 7)  
7808			;             DE = Pointer to character bitmap data  
7808			;   On exit:  A = Next character number  
7808			;             DE = Next location following bitmap  
7808			;             BC HL IX IY I AF' BC' DE' HL' preserved  
7808			; Character is   
7808 c5			fLCD_Def:   PUSH BC  
7809 f5			            PUSH AF  
780a 07			            RLCA                ;Calculate location  
780b 07			            RLCA                ;  for bitmap data  
780c 07			            RLCA                ;  = 8 x CharacterNumber  
780d f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
780f cd 58 77		            CALL fLCD_Inst      ;Write instruction to LCD  
7812 06 00		            LD   B, 0  
7814 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
7815 cd 94 77		            CALL fLCD_Data      ;Write byte to display  
7818 13			            INC  DE             ;Point to next byte  
7819 04			            INC  B              ;Count bytes  
781a cb 58		            BIT  3, B           ;Finish all 8 bytes?  
781c 28 f6		            JR   Z, Loop       ;No, so repeat  
781e f1			            POP  AF  
781f 3c			            INC  A              ;Increment character number  
7820 c1			            POP  BC  
7821 c9			            RET  
7822			  
7822			  
7822			; **********************************************************************  
7822			; **  Private functions  
7822			; **********************************************************************  
7822			  
7822			; Write function to LCD  
7822			;   On entry: A = Function byte to be written  
7822			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7822 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
7824 18 02		            JR   WrFunc  
7826 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
7828 f5			WrFunc:     PUSH AF  
7829 f5					push af  
782a 3a c8 fb				ld a, (display_lcde1e2)  
782d fe 00				cp 0     ; e1  
782f 20 0f				jr nz, .wfea2	  
7831 f1					pop af  
7832 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7834 cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
7836 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
7838 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
783a cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
783c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
783e 18 0d			jr .wfskip  
7840 f1			.wfea2:		pop af  
7841 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7843 cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
7845 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
7847 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
7849 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
784b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
784d 3e 05		.wfskip:            LD  A, 5  
784f cd 56 78		            CALL LCDDelay       ;Delay 5 ms to complete  
7852 f1			            POP  AF  
7853 c9			            RET  
7854			  
7854			  
7854			; Delay in milliseconds  
7854			;   On entry: A = Number of milliseconds delay  
7854			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7854 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
7856 d5			LCDDelay:   PUSH DE  
7857 5f			            LD   E, A           ;Delay by 'A' ms  
7858 16 00		            LD   D, 0  
785a cd c3 0c		            CALL aDelayInMS  
785d d1			            POP  DE  
785e c9			            RET  
785f			  
785f			  
785f			testlcd:  
785f 3e 00			ld a, kLCD_Line1  
7861 cd dc 77			call fLCD_Pos  
7864 06 28			ld b, 40  
7866 11 94 78			ld de, .ttext1  
7869 cd 27 77			call write_len_string  
786c			  
786c 3e 28			ld a, kLCD_Line2  
786e cd dc 77			call fLCD_Pos  
7871 06 28			ld b, 40  
7873 11 bd 78			ld de, .ttext2  
7876 cd 27 77			call write_len_string  
7879 3e 50			ld a, kLCD_Line3  
787b cd dc 77			call fLCD_Pos  
787e 06 28			ld b, 40  
7880 11 e6 78			ld de, .ttext3  
7883 cd 27 77			call write_len_string  
7886 3e 78			ld a, kLCD_Line4  
7888 cd dc 77			call fLCD_Pos  
788b 06 28			ld b, 40  
788d 11 0f 79			ld de, .ttext4  
7890 cd 27 77			call write_len_string  
7893			  
7893 76				halt  
7894			  
7894			  
7894 .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
78bd .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
78e6 .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
790f .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
7938			   
7938			  
7938			  
7938			; eof  
7938			  
# End of file firmware_lcd_4x40.asm
7938			;include "firmware_lcd_4x20.asm" 
7938			include "firmware_key_5x10.asm" 
7938			; 5 x 10 decade counter scanner  
7938			  
7938			  
7938			; TODO do cursor shape change for shift keys  
7938			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
7938			  
7938			  
7938			; bit mask for each scan column and row for teing the matrix  
7938			  
7938			  
7938			key_init:  
7938			  
7938			; SCMonAPI functions used  
7938			  
7938			; Alphanumeric LCD functions used  
7938			; no need to specify specific functions for this module  
7938			  
7938			  
7938 3e cf		            LD   A, 11001111b  
793a d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
793c			;            LD   A, 00000000b  
793c 3e 1f		            LD   A, 00011111b  
793e d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
7940			  
7940			  
7940				; TODO Configure cursor shapes  
7940			  
7940				; Load cursor shapes   
7940 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
7942 11 52 79		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
7945 06 02		            LD   B, 2           ;Number of characters to define  
7947 cd 08 78		.DefLoop:   CALL fLCD_Def       ;Define custom character  
794a 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
794c			  
794c 3e 01				ld a, 1  
794e 32 be fb			ld (cursor_shape),a  
7951 c9				ret  
7952			  
7952			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
7952			; Up to 8 custom characters can be defined  
7952			.cursor_shapes:      
7952			;; Character 0x00 = Normal  
7952 1f			            DB  11111b  
7953 1f			            DB  11111b  
7954 1f			            DB  11111b  
7955 1f			            DB  11111b  
7956 1f			            DB  11111b  
7957 1f			            DB  11111b  
7958 1f			            DB  11111b  
7959 1f			            DB  11111b  
795a			;; Character 0x01 = Modifier  
795a 1f			            DB  11111b  
795b 1b			            DB  11011b  
795c 1b			            DB  11011b  
795d 1b			            DB  11011b  
795e 1b			            DB  11011b  
795f 1f			            DB  11111b  
7960 1b			            DB  11011b  
7961 1f			            DB  11111b  
7962			  
7962			  
7962			  
7962			  
7962			; Display custom character 0  
7962			;            LD   A, kLCD_Line1+14  
7962			;            CALL fLCD_Pos       ;Position cursor to location in A  
7962			;            LD   A, 0  
7962			;            CALL fLCD_Data      ;Write character in A at cursor  
7962			  
7962			; Display custom character 1  
7962			;            LD   A, kLCD_Line2+14  
7962			;            CALL fLCD_Pos      ;Position cursor to location in A  
7962			;            LD   A, 1  
7962			;            CALL fLCD_Data     ;Write character in A at cursor  
7962			  
7962			; keyboard scanning   
7962			  
7962			; character in from keyboard  
7962			  
7962			; mapping for the pcb layout  
7962			  
7962			.matrix_to_char:  
7962 .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
796d .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
7978 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
7983 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
798e .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
7999			.matrix_to_shift:  
7999			  
7999 .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
79a4 .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
79af 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
79ba 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
79c5 .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
79d0			  
79d0			.matrix_to_symbolshift:  
79d0			  
79d0 fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
79db .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
79e6 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
79f1			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
79f1 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
79fc .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
7a07			  
7a07			  
7a07			  
7a07			; mapping for a simple straight through breadboard layout  
7a07			  
7a07			;.matrix_to_char:  
7a07			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7a07			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
7a07			;		db "asdfghjkl",KEY_CR,0  
7a07			;		db "qwertyuiop",0  
7a07			;		 db "1234567890",0  
7a07			;.matrix_to_shift:  
7a07			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
7a07			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
7a07			;		db "ASDFGHJKL",KEY_CR,0  
7a07			;		db "QWERTYUIOP",0  
7a07			;		 db "!",'"',"#$%^&*()",0  
7a07			;.matrix_to_symbolshift:  
7a07			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7a07			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
7a07			;		db "_?*fghjk=",KEY_CR,0  
7a07			;		db "-/+*[]{}@#",0  
7a07			;		 db "1234567890",0  
7a07			  
7a07			;.matrix_to_char: db "D#0*C987B654A321"  
7a07			  
7a07			  
7a07				  
7a07			  
7a07			; add cin and cin_wait  
7a07			  
7a07 cd 18 7a		cin_wait: 	call cin  
7a0a						if DEBUG_KEYCINWAIT  
7a0a							push af  
7a0a							  
7a0a							ld hl,key_repeat_ct  
7a0a							ld (hl),a  
7a0a							inc hl  
7a0a							call hexout  
7a0a							ld hl,key_repeat_ct+3  
7a0a							ld a,0  
7a0a							ld (hl),a  
7a0a			  
7a0a							    LD   A, kLCD_Line1+11  
7a0a							    CALL fLCD_Pos       ;Position cursor to location in A  
7a0a							    LD   DE, key_repeat_ct  
7a0a							    ;LD   DE, MsgHello  
7a0a							    CALL fLCD_Str       ;Display string pointed to by DE  
7a0a			  
7a0a			  
7a0a			  
7a0a							pop af  
7a0a						endif  
7a0a fe 00			cp 0  
7a0c 28 f9			jr z, cin_wait   ; block until key press  
7a0e			  
7a0e							if DEBUG_KEYCINWAIT  
7a0e								push af  
7a0e			  
7a0e								ld a, 'A'	  
7a0e								ld hl,key_repeat_ct  
7a0e								ld (hl),a  
7a0e								inc hl  
7a0e								ld a,0  
7a0e								ld (hl),a  
7a0e			  
7a0e								    LD   A, kLCD_Line2+11  
7a0e								    CALL fLCD_Pos       ;Position cursor to location in A  
7a0e								    LD   DE, key_repeat_ct  
7a0e								    ;LD   DE, MsgHello  
7a0e								    CALL fLCD_Str       ;Display string pointed to by DE  
7a0e			  
7a0e							call delay500ms  
7a0e			  
7a0e								pop af  
7a0e							endif  
7a0e f5				push af   ; save key pressed  
7a0f			  
7a0f			.cin_wait1:	  
7a0f							if DEBUG_KEYCINWAIT  
7a0f								push af  
7a0f			  
7a0f								ld a, 'b'	  
7a0f								ld hl,key_repeat_ct  
7a0f								ld (hl),a  
7a0f								inc hl  
7a0f								ld a,0  
7a0f								ld (hl),a  
7a0f			  
7a0f								    LD   A, kLCD_Line2+11  
7a0f								    CALL fLCD_Pos       ;Position cursor to location in A  
7a0f								    LD   DE, key_repeat_ct  
7a0f								    ;LD   DE, MsgHello  
7a0f								    CALL fLCD_Str       ;Display string pointed to by DE  
7a0f			  
7a0f			  
7a0f							call delay500ms  
7a0f			  
7a0f								pop af  
7a0f							endif  
7a0f			  
7a0f cd 18 7a		call cin  
7a12 fe 00			cp 0  
7a14 20 f9			jr nz, .cin_wait1  	; wait for key release  
7a16			if DEBUG_KEYCINWAIT  
7a16				push af  
7a16			  
7a16				ld a, '3'	  
7a16				ld hl,key_repeat_ct  
7a16				ld (hl),a  
7a16				inc hl  
7a16				ld a,0  
7a16				ld (hl),a  
7a16			  
7a16			            LD   A, kLCD_Line2+11  
7a16			            CALL fLCD_Pos       ;Position cursor to location in A  
7a16			            LD   DE, key_repeat_ct  
7a16			            ;LD   DE, MsgHello  
7a16			            CALL fLCD_Str       ;Display string pointed to by DE  
7a16			  
7a16			  
7a16			call delay500ms  
7a16			  
7a16				pop af  
7a16			endif  
7a16			  
7a16 f1				pop af   ; get key  
7a17 c9				ret  
7a18			  
7a18			  
7a18 cd 2c 7a		cin: 	call .mtoc  
7a1b			  
7a1b			if DEBUG_KEYCIN  
7a1b				push af  
7a1b				  
7a1b				ld hl,key_repeat_ct  
7a1b				ld (hl),a  
7a1b				inc hl  
7a1b				call hexout  
7a1b				ld hl,key_repeat_ct+3  
7a1b				ld a,0  
7a1b				ld (hl),a  
7a1b			  
7a1b			            LD   A, kLCD_Line3+15  
7a1b			            CALL fLCD_Pos       ;Position cursor to location in A  
7a1b			            LD   DE, key_repeat_ct  
7a1b			            ;LD   DE, MsgHello  
7a1b			            CALL fLCD_Str       ;Display string pointed to by DE  
7a1b			  
7a1b			  
7a1b			call delay500ms  
7a1b			  
7a1b				pop af  
7a1b			endif  
7a1b			  
7a1b			  
7a1b				; no key held  
7a1b fe 00			cp 0  
7a1d c8				ret z  
7a1e			  
7a1e			if DEBUG_KEYCIN  
7a1e				push af  
7a1e			  
7a1e				ld a, '1'	  
7a1e				ld hl,key_repeat_ct  
7a1e				ld (hl),a  
7a1e				inc hl  
7a1e				ld a,0  
7a1e				ld (hl),a  
7a1e			  
7a1e			            LD   A, kLCD_Line4+15  
7a1e			            CALL fLCD_Pos       ;Position cursor to location in A  
7a1e			            LD   DE, key_repeat_ct  
7a1e			            ;LD   DE, MsgHello  
7a1e			            CALL fLCD_Str       ;Display string pointed to by DE  
7a1e			  
7a1e			  
7a1e			call delay500ms  
7a1e			  
7a1e				pop af  
7a1e			endif  
7a1e			  
7a1e				; stop key bounce  
7a1e			  
7a1e 32 88 fe			ld (key_held),a		 ; save it  
7a21 47				ld b, a  
7a22			  
7a22 c5			.cina1:	push bc  
7a23			if DEBUG_KEYCIN  
7a23				push af  
7a23			  
7a23				ld hl,key_repeat_ct  
7a23				inc hl  
7a23				call hexout  
7a23				ld hl,key_repeat_ct+3  
7a23				ld a,0  
7a23				ld (hl),a  
7a23				ld hl,key_repeat_ct  
7a23				ld a, '2'	  
7a23				ld (hl),a  
7a23			  
7a23			            LD   A, kLCD_Line4+15  
7a23			            CALL fLCD_Pos       ;Position cursor to location in A  
7a23			            LD   DE, key_repeat_ct  
7a23			            ;LD   DE, MsgHello  
7a23			            CALL fLCD_Str       ;Display string pointed to by DE  
7a23			  
7a23				pop af  
7a23			endif  
7a23 cd 2c 7a			call .mtoc  
7a26 c1				pop bc  
7a27 b8				cp b  
7a28 28 f8			jr z, .cina1  
7a2a 78				ld a,b		  
7a2b			if DEBUG_KEYCIN  
7a2b				push af  
7a2b			  
7a2b				ld hl,key_repeat_ct  
7a2b				inc hl  
7a2b				call hexout  
7a2b				ld hl,key_repeat_ct+3  
7a2b				ld a,0  
7a2b				ld (hl),a  
7a2b				ld hl,key_repeat_ct  
7a2b				ld a, '3'	  
7a2b				ld (hl),a  
7a2b			  
7a2b			            LD   A, kLCD_Line4+15  
7a2b			            CALL fLCD_Pos       ;Position cursor to location in A  
7a2b			            LD   DE, key_repeat_ct  
7a2b			            ;LD   DE, MsgHello  
7a2b			            CALL fLCD_Str       ;Display string pointed to by DE  
7a2b			  
7a2b				pop af  
7a2b			endif  
7a2b c9				ret  
7a2c			  
7a2c			; detect keyboard modifier key press and apply new overlay to the face key held  
7a2c			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
7a2c			  
7a2c			;.cin_map_modifier:   
7a2c			;	ld a, (hl)  
7a2c			;	and 255  
7a2c			;	ret NZ		; modifier key not flagged  
7a2c			;  
7a2c			;	; get key face  
7a2c			;  
7a2c			;	ld b,(key_face_held)  
7a2c			;  
7a2c			;	ld b, key_cols * key_rows  
7a2c			;  
7a2c			;	push de  
7a2c			;	pop hl  
7a2c			;  
7a2c			;.mmod1: ld a,(hl)   ; get map test  
7a2c			;	cp b  
7a2c			;	jr z, .mmod2  
7a2c			;  
7a2c			;  
7a2c			;  
7a2c			;.mmod2: inc hl    ;   
7a2c			;  
7a2c			;	  
7a2c			;  
7a2c			;	  
7a2c			;  
7a2c			;	ld hl,key_actual_pressed  
7a2c			;	ld (hl),a,  
7a2c			;	ret  
7a2c			  
7a2c			; map matrix key held to char on face of key  
7a2c			  
7a2c			.mtoc:  
7a2c			  
7a2c			; test decade counter strobes  
7a2c			  
7a2c			;.decadetest1:  
7a2c			  
7a2c			; reset counter  
7a2c			;ld a, 128  
7a2c			;out (portbdata),a  
7a2c			  
7a2c			  
7a2c			;ld b, 5  
7a2c			;.dec1:  
7a2c			;ld a, 0  
7a2c			;out (portbdata),a  
7a2c			;call delay1s  
7a2c			  
7a2c			;ld a, 32  
7a2c			;out (portbdata),a  
7a2c			;call delay1s  
7a2c			;call delay1s  
7a2c			;call delay1s  
7a2c			;  
7a2c			;ld a, 64+32  
7a2c			;out (portbdata),a  
7a2c			;call delay1s  
7a2c			;;djnz .dec1  
7a2c			;  
7a2c			;jp .decadetest1  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c			  
7a2c				; scan keyboard matrix and generate raw scan map  
7a2c cd bf 7a			call matrix  
7a2f			  
7a2f				; reuse c bit 0 left modifer button - ie shift  
7a2f			        ; reuse c bit 1 for right modifer button - ie symbol shift  
7a2f				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
7a2f			  
7a2f 0e 00			ld c, 0  
7a31			  
7a31				; TODO set flags for modifer key presses   
7a31				; TODO do a search for modifer key...  
7a31			  
7a31				;ld hl,keyscan_table_row4  
7a31 21 e7 fe			ld hl,keyscan_table_row2  
7a34			  
7a34 7e				ld a, (hl)  
7a35 fe 23			cp '#'  
7a37 20 07			jr nz, .nextmodcheck  
7a39 cb c1			set 0, c  
7a3b 21 99 79			ld hl, .matrix_to_shift  
7a3e 18 21			jr .dokeymap  
7a40				; TODO for now igonre  
7a40			.nextmodcheck:  
7a40 21 dc fe			ld hl,keyscan_table_row3  
7a43			  
7a43 7e				ld a, (hl)  
7a44 fe 23			cp '#'  
7a46 20 07			jr nz, .nextmodcheck2  
7a48 cb c9			set 1, c   
7a4a 21 d0 79			ld hl, .matrix_to_symbolshift  
7a4d 18 12			jr .dokeymap  
7a4f			.nextmodcheck2:  
7a4f 21 f0 fe			ld hl,keyscan_table_row2+9    ; right shift  
7a52			  
7a52 7e				ld a, (hl)  
7a53 fe 23			cp '#'  
7a55 20 07			jr nz, .donemodcheck  
7a57 cb c9			set 1, c   
7a59 21 99 79			ld hl, .matrix_to_shift  
7a5c 18 03			jr .dokeymap  
7a5e			  
7a5e				; no modifer found so just map to normal keys  
7a5e				; get mtoc map matrix to respective keys  
7a5e			;	ld hl, .matrix_to_char  
7a5e			;	ld hl, .matrix_to_char  
7a5e			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
7a5e			;	ld a, KEY_SHIFT  
7a5e			;	call findchar  
7a5e			;  
7a5e			;	; got offset to key modifer in b  
7a5e			;  
7a5e			;	ld hl,keyscan_table_row5  
7a5e			;  
7a5e			;	ld a,b  
7a5e			;	call addatohl  
7a5e			;	ld a,(hl)  
7a5e			;  
7a5e			;	cp '#'  
7a5e			;	jr nz, .nextmodcheck  
7a5e			;	set 0, c  
7a5e			;	ld hl, .matrix_to_char  
7a5e			;	jr .dokeymap  
7a5e			;	; TODO for now igonre  
7a5e			;.nextmodcheck:  
7a5e			;	ld hl, .matrix_to_symbolshift  
7a5e			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
7a5e			;	ld a, KEY_SYMBOLSHIFT  
7a5e			;	call findchar  
7a5e			;  
7a5e			;  
7a5e			;	; got offset to key modifer in b  
7a5e			;  
7a5e			;	ld hl,keyscan_table_row5  
7a5e			;  
7a5e			;	ld a,b  
7a5e			;	call addatohl  
7a5e			;	ld a,(hl)  
7a5e			;  
7a5e			;	cp '#'  
7a5e			;	jr nz, .donemodcheck  
7a5e			;	set 1, c   
7a5e			;	ld hl, .matrix_to_symbolshift  
7a5e			;	jr .dokeymap  
7a5e			  
7a5e			  
7a5e			  
7a5e			.donemodcheck:  
7a5e				; no modifer found so just map to normal keys  
7a5e				; get mtoc map matrix to respective keys  
7a5e 21 62 79			ld hl, .matrix_to_char  
7a61			  
7a61			.dokeymap:  
7a61				;ld (key_fa), c   
7a61 cd 7a 7a			call .mapkeys  
7a64			  
7a64			  
7a64			if DEBUG_KEY  
7a64			  
7a64			; Display text on first line  
7a64			            LD   A, kLCD_Line1  
7a64			            CALL fLCD_Pos       ;Position cursor to location in A  
7a64			            LD   DE, keyscan_table_row1  
7a64			            ;LD   DE, MsgHello  
7a64			            CALL fLCD_Str       ;Display string pointed to by DE  
7a64			  
7a64			; Display text on second line  
7a64			            LD   A, kLCD_Line2  
7a64			            CALL fLCD_Pos       ;Position cursor to location in A  
7a64			            LD   DE, keyscan_table_row2  
7a64			            CALL fLCD_Str       ;Display string pointed to by DE  
7a64			            LD   A, kLCD_Line3  
7a64			            CALL fLCD_Pos       ;Position cursor to location in A  
7a64			            LD   DE, keyscan_table_row3  
7a64			            CALL fLCD_Str       ;Display string pointed to by DE  
7a64			            LD   A, kLCD_Line4  
7a64			            CALL fLCD_Pos       ;Position cursor to location in A  
7a64			            LD   DE, keyscan_table_row4  
7a64			            CALL fLCD_Str       ;Display string pointed to by DE  
7a64			            LD   A, kLCD_Line1+10  
7a64			            CALL fLCD_Pos       ;Position cursor to location in A  
7a64			            LD   DE, keyscan_table_row5  
7a64			            CALL fLCD_Str       ;Display string pointed to by DE  
7a64			  
7a64				;call delay250ms  
7a64			endif  
7a64			;	jp testkey  
7a64			  
7a64			; get first char reported  
7a64			  
7a64 21 c6 fe			ld hl,keyscan_table_row5  
7a67			  
7a67				;ld b, 46   ; 30 keys to remap + 8 nulls   
7a67 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
7a69			.findkey:  
7a69 7e				ld a,(hl)  
7a6a fe 00			cp 0  
7a6c 28 04			jr z, .nextkey  
7a6e fe 7e			cp KEY_MATRIX_NO_PRESS  
7a70 20 06			jr nz, .foundkey  
7a72			.nextkey:  
7a72 23				inc hl  
7a73 10 f4			djnz .findkey  
7a75 3e 00			ld a,0  
7a77 c9				ret  
7a78			.foundkey:  
7a78 7e				ld a,(hl)  
7a79 c9				ret  
7a7a				  
7a7a			  
7a7a			; convert the raw key map given hl for destination key  
7a7a			.mapkeys:  
7a7a 11 c6 fe			ld de,keyscan_table_row5  
7a7d			  
7a7d 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
7a7f			.remap:  
7a7f 1a				ld a,(de)  
7a80 fe 23			cp '#'  
7a82 20 02			jr nz, .remapnext  
7a84				;CALLMONITOR  
7a84 7e				ld a,(hl)  
7a85 12				ld (de),a  
7a86			  
7a86			  
7a86			  
7a86			.remapnext:  
7a86 23				inc hl  
7a87 13				inc de  
7a88 10 f5			djnz .remap  
7a8a				  
7a8a c9				ret  
7a8b			  
7a8b			  
7a8b			  
7a8b			.mtocold2:  
7a8b			  
7a8b			;	; flag if key D is held down and remove from reporting  
7a8b			;	ld bc, .key_map_fd    
7a8b			;	ld hl, keyscan_table  
7a8b			;	ld de, key_fd  
7a8b			;	call .key_shift_hold  
7a8b			;	cp 255  
7a8b			;	jr z, .cinmap  
7a8b			;	; flag if key C is held down and remove from reporting  
7a8b			;	ld bc, .key_map_fc    
7a8b			;	ld hl, keyscan_table+key_cols  
7a8b			;	ld de, key_fc  
7a8b			;	call .key_shift_hold  
7a8b			;	cp 255  
7a8b			;	jr z, .cinmap  
7a8b			;	; flag if key B is held down and remove from reporting  
7a8b			;	ld bc, .key_map_fb    
7a8b			;	ld hl, keyscan_table+(key_cols*2)  
7a8b			;	ld de, key_fb  
7a8b			;	call .key_shift_hold  
7a8b			;	cp 255  
7a8b			;	jr z, .cinmap  
7a8b			;	; flag if key A is held down and remove from reporting  
7a8b			;	ld bc, .key_map_fa    
7a8b			;	ld hl, keyscan_table+(key_cols*3)  
7a8b			;	ld de, key_fa  
7a8b			;	call .key_shift_hold  
7a8b			;	cp 255  
7a8b			;	jr z, .cinmap  
7a8b			  
7a8b 11 62 79			ld de, .matrix_to_char  
7a8e			  
7a8e			  
7a8e			.cinmap1:   
7a8e				if DEBUG_KEY  
7a8e			            LD   A, kLCD_Line4  
7a8e			            CALL fLCD_Pos       ;Position cursor to location in A  
7a8e					push de  
7a8e			            LD   DE, keyscan_table  
7a8e			            CALL fLCD_Str       ;Display string pointed to by DE  
7a8e					pop de  
7a8e				endif  
7a8e			  
7a8e				; scan key matrix table for any held key  
7a8e			  
7a8e				; de holds either the default matrix or one selected above  
7a8e			  
7a8e 21 93 fe			ld hl, keyscan_table  
7a91 06 32			ld b,key_cols*key_rows  
7a93			  
7a93 7e			.cin11:	ld a,(hl)  
7a94 fe 23			cp '#'  
7a96 28 08			jr z, .cinhit1  
7a98 23				inc hl  
7a99 13				inc de  
7a9a 05				dec b  
7a9b 20 f6			jr nz, .cin11  
7a9d				; no key found held  
7a9d 3e 00			ld a,0  
7a9f c9				ret  
7aa0 d5			.cinhit1: push de  
7aa1 e1				pop hl  
7aa2 7e				ld a,(hl)  
7aa3 c9				ret  
7aa4			  
7aa4			; flag a control key is held   
7aa4			; hl is key pin, de is flag indicator  
7aa4			  
7aa4			.key_shift_hold1:  
7aa4 c5				push bc  
7aa5 3e 01			ld a, 1  
7aa7 32 be fb			ld (cursor_shape),a  
7aaa 06 00			ld b, 0  
7aac 7e				ld a, (hl)  
7aad fe 2e			cp '.'  
7aaf 28 0a			jr z, .key_shift11  
7ab1 06 ff			ld b, 255  
7ab3 3e 2b			ld a, '+'    ; hide key from later scans  
7ab5 77				ld (hl),a  
7ab6 3e 02			ld a, 2  
7ab8 32 be fb			ld (cursor_shape),a  
7abb			.key_shift11:  
7abb				; write flag indicator  
7abb 78				ld a,b  
7abc 12				ld (de),a  
7abd			  
7abd d1				pop de    ; de now holds the key map ptr  
7abe c9				ret  
7abf			  
7abf				  
7abf			  
7abf			; scans keyboard matrix and flags key press in memory array	  
7abf				  
7abf			matrix:  
7abf				;call matrix  
7abf				; TODO optimise the code....  
7abf			  
7abf			  
7abf			;ld hl, keyscan_table_row1  
7abf			;ld de, keyscan_table_row1+1  
7abf			;ld bc,46  
7abf			;ld a,KEY_MATRIX_NO_PRESS  
7abf			;ldir  
7abf			  
7abf			  
7abf			  
7abf			; reset counter  
7abf 3e 80		ld a, 128  
7ac1 d3 c1		out (portbdata),a  
7ac3			  
7ac3 06 0a		ld b, 10  
7ac5 0e 00		ld c, 0       ; current clock toggle  
7ac7			  
7ac7			.colscan:  
7ac7			  
7ac7			; set current column  
7ac7			; disable clock enable and set clock low  
7ac7			  
7ac7			;ld a, 0  
7ac7			;out (portbdata),a  
7ac7			  
7ac7			; For each column scan for switches  
7ac7			  
7ac7 c5			push bc  
7ac8 21 89 fe		ld hl, keyscan_scancol  
7acb cd d4 7b		call .rowscan  
7ace c1			pop bc  
7acf			  
7acf			  
7acf			; get back current column  
7acf			  
7acf			; translate the row scan  
7acf			  
7acf			;   
7acf			; row 1  
7acf			  
7acf 78			ld a,b  
7ad0			  
7ad0 21 fc fe		LD   hl, keyscan_table_row1+10  
7ad3			  
7ad3 cd e1 0f		call subafromhl  
7ad6			;call addatohl  
7ad6			  
7ad6 11 89 fe		ld de, keyscan_scancol  
7ad9			  
7ad9 1a			ld a,(de)  
7ada 77			ld (hl),a  
7adb			  
7adb			  
7adb			  
7adb			  
7adb			; row 2  
7adb			  
7adb 78			ld a,b  
7adc			  
7adc 21 f1 fe		LD   hl, keyscan_table_row2+10  
7adf			  
7adf			;call addatohl  
7adf cd e1 0f		call subafromhl  
7ae2			  
7ae2			  
7ae2 11 8a fe		ld de, keyscan_scancol+1  
7ae5			  
7ae5 1a			ld a,(de)  
7ae6 77			ld (hl),a  
7ae7			  
7ae7			  
7ae7			; row 3  
7ae7			  
7ae7 78			ld a,b  
7ae8			  
7ae8 21 e6 fe		LD   hl, keyscan_table_row3+10  
7aeb			  
7aeb			;call addatohl  
7aeb cd e1 0f		call subafromhl  
7aee			  
7aee 11 8b fe		ld de, keyscan_scancol+2  
7af1			  
7af1 1a			ld a,(de)  
7af2 77			ld (hl),a  
7af3			  
7af3			  
7af3			  
7af3			; row 4  
7af3			  
7af3 78			ld a,b  
7af4			  
7af4 21 db fe		LD   hl, keyscan_table_row4+10  
7af7			  
7af7			;call addatohl  
7af7 cd e1 0f		call subafromhl  
7afa			  
7afa 11 8c fe		ld de, keyscan_scancol+3  
7afd			  
7afd 1a			ld a,(de)  
7afe 77			ld (hl),a  
7aff			  
7aff			; row 5  
7aff			  
7aff 78			ld a,b  
7b00			  
7b00 21 d0 fe		LD   hl, keyscan_table_row5+10  
7b03			  
7b03			;call addatohl  
7b03 cd e1 0f		call subafromhl  
7b06			  
7b06 11 8d fe		ld de, keyscan_scancol+4  
7b09			  
7b09 1a			ld a,(de)  
7b0a 77			ld (hl),a  
7b0b			  
7b0b			; handshake next column  
7b0b			  
7b0b			  
7b0b 3e 40		ld a, 64  
7b0d d3 c1		out (portbdata),a  
7b0f			  
7b0f 3e 00		ld a, 0  
7b11 d3 c1		out (portbdata),a  
7b13			  
7b13			; toggle clk and move to next column  
7b13			;ld a, 64  
7b13			;cp c  
7b13			;  
7b13			;jr z, .coltoglow  
7b13			;ld c, a  
7b13			;jr .coltog  
7b13			;.coltoglow:  
7b13			;ld c, 0  
7b13			;.coltog:  
7b13			;ld a, c  
7b13			;out (portbdata),a  
7b13			  
7b13 10 b2		djnz .colscan  
7b15			  
7b15 3e 0a		ld a,10  
7b17 21 f2 fe		LD   hl, keyscan_table_row1  
7b1a cd cf 0f		call addatohl  
7b1d 3e 00		ld a, 0  
7b1f 77			ld (hl), a  
7b20			  
7b20			  
7b20 3e 0a		ld a,10  
7b22 21 e7 fe		LD   hl, keyscan_table_row2  
7b25 cd cf 0f		call addatohl  
7b28 3e 00		ld a, 0  
7b2a 77			ld (hl), a  
7b2b			  
7b2b 3e 0a		ld a,10  
7b2d 21 dc fe		LD   hl, keyscan_table_row3  
7b30 cd cf 0f		call addatohl  
7b33 3e 00		ld a, 0  
7b35 77			ld (hl), a  
7b36			  
7b36 3e 0a		ld a,10  
7b38 21 d1 fe		LD   hl, keyscan_table_row4  
7b3b cd cf 0f		call addatohl  
7b3e 3e 00		ld a, 0  
7b40 77			ld (hl), a  
7b41			  
7b41 3e 0a		ld a,10  
7b43 21 c6 fe		LD   hl, keyscan_table_row5  
7b46 cd cf 0f		call addatohl  
7b49 3e 00		ld a, 0  
7b4b 77			ld (hl), a  
7b4c			  
7b4c			if DEBUG_KEY_MATRIX  
7b4c			  
7b4c			; Display text on first line  
7b4c			            LD   A, kLCD_Line1  
7b4c			            CALL fLCD_Pos       ;Position cursor to location in A  
7b4c			            LD   DE, keyscan_table_row1  
7b4c			            ;LD   DE, MsgHello  
7b4c			            CALL fLCD_Str       ;Display string pointed to by DE  
7b4c			  
7b4c			; Display text on second line  
7b4c			            LD   A, kLCD_Line2  
7b4c			            CALL fLCD_Pos       ;Position cursor to location in A  
7b4c			            LD   DE, keyscan_table_row2  
7b4c			            CALL fLCD_Str       ;Display string pointed to by DE  
7b4c			            LD   A, kLCD_Line3  
7b4c			            CALL fLCD_Pos       ;Position cursor to location in A  
7b4c			            LD   DE, keyscan_table_row3  
7b4c			            CALL fLCD_Str       ;Display string pointed to by DE  
7b4c			            LD   A, kLCD_Line4  
7b4c			            CALL fLCD_Pos       ;Position cursor to location in A  
7b4c			            LD   DE, keyscan_table_row4  
7b4c			            CALL fLCD_Str       ;Display string pointed to by DE  
7b4c			            LD   A, kLCD_Line4+10  
7b4c			            CALL fLCD_Pos       ;Position cursor to location in A  
7b4c			            LD   DE, keyscan_table_row5  
7b4c			            CALL fLCD_Str       ;Display string pointed to by DE  
7b4c			  
7b4c			;call delay250ms  
7b4c				jp matrix  
7b4c			endif  
7b4c c9			ret  
7b4d			  
7b4d			; using decade counter....  
7b4d			  
7b4d			  
7b4d			; TODO reset decade counter to start of scan  
7b4d			  
7b4d			; reset 15  
7b4d			; clock 14  
7b4d			; ce 13  
7b4d			  
7b4d			; 1 - q5  
7b4d			; 2 - q1  
7b4d			; 3 - q0  
7b4d			; 4 - q2  
7b4d			; 5 - q6  
7b4d			; 6 - q7  
7b4d			; 7 - q3  
7b4d			; 8 - vss  
7b4d			; 9 - q8  
7b4d			; 10 - q4  
7b4d			; 11 - q9  
7b4d			; 12 - cout  
7b4d			; 16 - vdd  
7b4d			  
7b4d			; clock      ce       reset     output  
7b4d			; 0          x        0         n  
7b4d			; x          1        0         n  
7b4d			; x          x        1         q0  
7b4d			; rising     0        0         n+1  
7b4d			; falling    x        0         n  
7b4d			; x          rising   0         n  
7b4d			; 1          falling  0         x+1  
7b4d			;  
7b4d			; x = dont care, if n < 5 carry = 1 otherwise 0  
7b4d			  
7b4d			;   
7b4d			; reset   
7b4d			; 13=0, 14=0, 15=1 .. 15=0  
7b4d			;  
7b4d			; handshake line  
7b4d			; 14=1.... read line 14=0  
7b4d			  
7b4d			  
7b4d			  
7b4d			  
7b4d			  
7b4d			; TODO hand shake clock for next column scan  
7b4d			; TODO detect each row  
7b4d			  
7b4d			  
7b4d			  
7b4d			  
7b4d			; reset 128  
7b4d			; clock 64  
7b4d			; ce 32  
7b4d			  
7b4d			  
7b4d			.cyclestart:  
7b4d			  
7b4d			; reset counter  
7b4d 3e 80		ld a, 128  
7b4f d3 c1		out (portbdata),a  
7b51			  
7b51			; loop leds  
7b51 06 0a		ld b,10  
7b53			  
7b53			.cycle1:  
7b53 c5			push bc  
7b54 3e 00		ld a, 0  
7b56 d3 c1		out (portbdata),a  
7b58 cd d2 0c		call delay250ms  
7b5b			  
7b5b 3e 40		ld a, 64  
7b5d d3 c1		out (portbdata),a  
7b5f cd d2 0c		call delay250ms  
7b62			  
7b62 3e 00		ld a, 0  
7b64 d3 c1		out (portbdata),a  
7b66 cd d2 0c		call delay250ms  
7b69			  
7b69 c1			pop bc  
7b6a 10 e7		djnz .cycle1  
7b6c			  
7b6c			  
7b6c 18 df		jr .cyclestart  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			; map matrix key held to char on face of key  
7b6e			  
7b6e			;.mtocold:  
7b6e			;  
7b6e			;  
7b6e			;; reset counter  
7b6e			;ld a, 128  
7b6e			;out (portbdata),a  
7b6e			;  
7b6e			;  
7b6e			;; scan keyboard row 1  
7b6e			;ld a, 0  
7b6e			;out (portbdata),a  
7b6e			;;ld a, 64  
7b6e			;;out (portbdata),a  
7b6e			;  
7b6e			;  
7b6e			;	ld a, 128  
7b6e			;	ld hl, keyscan_table  
7b6e			;	call .rowscan  
7b6e			;  
7b6e			;;ld a, 0  
7b6e			;;out (portbdata),a  
7b6e			;ld a, 64  
7b6e			;out (portbdata),a  
7b6e			;  
7b6e			;	ld a, 64  
7b6e			;	ld hl, keyscan_table+key_cols  
7b6e			;	call .rowscan  
7b6e			;  
7b6e			;ld a, 0  
7b6e			;out (portbdata),a  
7b6e			;;ld a, 64  
7b6e			;;out (portbdata),a  
7b6e			;	ld a, 32  
7b6e			;	ld hl, keyscan_table+(key_cols*2)  
7b6e			;	call .rowscan  
7b6e			;  
7b6e			;  
7b6e			;;ld a, 0  
7b6e			;;out (portbdata),a  
7b6e			;ld a, 64  
7b6e			;out (portbdata),a  
7b6e			;  
7b6e			;	ld a, 16  
7b6e			;	ld hl, keyscan_table+(key_cols*3)  
7b6e			;	call .rowscan  
7b6e			;  
7b6e			;  
7b6e			;	; flag if key D is held down and remove from reporting  
7b6e			;	ld bc, .key_map_fd    
7b6e			;	ld hl, keyscan_table  
7b6e			;	ld de, key_fd  
7b6e			;	call .key_shift_hold  
7b6e			;	cp 255  
7b6e			;	jr z, .cinmap  
7b6e			;	; flag if key C is held down and remove from reporting  
7b6e			;	ld bc, .key_map_fc    
7b6e			;	ld hl, keyscan_table+key_cols  
7b6e			;	ld de, key_fc  
7b6e			;	call .key_shift_hold  
7b6e			;	cp 255  
7b6e			;	jr z, .cinmap  
7b6e			;	; flag if key B is held down and remove from reporting  
7b6e			;	ld bc, .key_map_fb    
7b6e			;	ld hl, keyscan_table+(key_cols*2)  
7b6e			;	ld de, key_fb  
7b6e			;	call .key_shift_hold  
7b6e			;	cp 255  
7b6e			;	jr z, .cinmap  
7b6e			;	; flag if key A is held down and remove from reporting  
7b6e			;	ld bc, .key_map_fa    
7b6e			;	ld hl, keyscan_table+(key_cols*3)  
7b6e			;	ld de, key_fa  
7b6e			;	call .key_shift_hold  
7b6e			;	cp 255  
7b6e			;	jr z, .cinmap  
7b6e			;  
7b6e			;	ld de, .matrix_to_char  
7b6e			;  
7b6e			;  
7b6e			;.cinmap:   
7b6e			;	if DEBUG_KEY  
7b6e			;            LD   A, kLCD_Line4  
7b6e			;            CALL fLCD_Pos       ;Position cursor to location in A  
7b6e			;		push de  
7b6e			;            LD   DE, keyscan_table  
7b6e			;            CALL fLCD_Str       ;Display string pointed to by DE  
7b6e			;		pop de  
7b6e			;	endif  
7b6e			  
7b6e				; scan key matrix table for any held key  
7b6e			  
7b6e				; de holds either the default matrix or one selected above  
7b6e			  
7b6e			;	ld hl, keyscan_table  
7b6e			;	ld b,key_cols*key_rows  
7b6e			;  
7b6e			;.cin1:	ld a,(hl)  
7b6e			;	cp '#'  
7b6e			;	jr z, .cinhit  
7b6e			;	inc hl  
7b6e			;	inc de  
7b6e			;	dec b  
7b6e			;	jr nz, .cin1  
7b6e			;	; no key found held  
7b6e			;	ld a,0  
7b6e			;	ret  
7b6e			;.cinhit: push de  
7b6e			;	pop hl  
7b6e			;	ld a,(hl)  
7b6e			;	ret  
7b6e			  
7b6e			; flag a control key is held   
7b6e			; hl is key pin, de is flag indicator  
7b6e			  
7b6e			;.key_shift_hold:  
7b6e			;	push bc  
7b6e			;	ld a, 1  
7b6e			;	ld (cursor_shape),a  
7b6e			;	ld b, 0  
7b6e			;	ld a, (hl)  
7b6e			;	cp '.'  
7b6e			;	jr z, .key_shift1  
7b6e			;	ld b, 255  
7b6e			;	ld a, '+'    ; hide key from later scans  
7b6e			;	ld (hl),a  
7b6e			;	ld a, 2  
7b6e			;	ld (cursor_shape),a  
7b6e			;.key_shift1:  
7b6e			;	; write flag indicator  
7b6e			;	ld a,b  
7b6e			;	ld (de),a  
7b6e			;  
7b6e			;	pop de    ; de now holds the key map ptr  
7b6e			;	ret  
7b6e			  
7b6e				  
7b6e				  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			;	push hl  
7b6e			;	push de  
7b6e			;	push bc  
7b6e			;	call keyscan  
7b6e			;	; map key matrix to ascii value of key face  
7b6e			;  
7b6e			;	ld hl, key_face_map  
7b6e			;	ld de, keyscan_table  
7b6e			;  
7b6e			;	; get how many keys to look at  
7b6e			;	ld b, keyscan_table_len  
7b6e			;	  
7b6e			;  
7b6e			;	; at this stage fall out on first key hit  
7b6e			;	; TODO handle multiple key press  
7b6e			;  
7b6e			;map1:	ld a,(hl)  
7b6e			;	cp '#'  
7b6e			;	jr z, keyhit  
7b6e			;	inc hl  
7b6e			;	inc de  
7b6e			;	dec b  
7b6e			;	jr nz, map1  
7b6e			;nohit:	ld a, 0  
7b6e			;	jr keydone  
7b6e			;keyhit: push de  
7b6e			;	pop hl  
7b6e			;	ld a,(hl)  
7b6e			;keydone:  
7b6e			;	push bc  
7b6e			;	push de  
7b6e			; 	push hl  
7b6e			;	ret   
7b6e			;  
7b6e			  
7b6e			  
7b6e			  
7b6e			  
7b6e			; scan physical key matrix  
7b6e			  
7b6e			  
7b6e			;keyscan:  
7b6e			;  
7b6e			;; for each key_row use keyscanr bit mask for out  
7b6e			;; then read in for keyscanc bitmask  
7b6e			;; save result of row scan to keyscantable  
7b6e			;  
7b6e			;; scan keyboard row 1  
7b6e			;  
7b6e			;	ld b, key_rows  
7b6e			;	ld hl, key_scanr  
7b6e			;	ld de, keyscan_table  
7b6e			;  
7b6e			;rowloop:  
7b6e			;  
7b6e			;	ld a,(hl)		; out bit mask to energise keyboard row  
7b6e			;	call rowscan  
7b6e			;	inc hl  
7b6e			;	dec b  
7b6e			;	jr nz, rowloop  
7b6e			;  
7b6e			;	ret  
7b6e			;  
7b6e			;  
7b6e			;; pass a out bitmask, b row number  
7b6e			;arowscan:   
7b6e			;	push bc  
7b6e			;  
7b6e			;	ld d, b  
7b6e			;  
7b6e			;	; calculate buffer location for this row  
7b6e			;  
7b6e			;	ld hl, keyscan_table	  
7b6e			;kbufr:  ld e, key_cols  
7b6e			;kbufc:	inc hl  
7b6e			;	dec e  
7b6e			;	jr nz, kbufc  
7b6e			;	dec d  
7b6e			;	jr nz, kbufr  
7b6e			;  
7b6e			;	; energise row and read columns  
7b6e			;  
7b6e			;	out (portbdata),a  
7b6e			;	in a,(portbdata)  
7b6e			;	ld c,a  
7b6e			;  
7b6e			;  
7b6e			;	; save buffer loc  
7b6e			;  
7b6e			;	ld (keybufptr), hl  
7b6e			;  
7b6e			;	ld hl, key_scanc  
7b6e			;	ld d, key_cols  
7b6e			;  
7b6e			;	; for each column check each bit mask  
7b6e			;  
7b6e			;colloop:  
7b6e			;	  
7b6e			;  
7b6e			;	; reset flags for the row   
7b6e			;  
7b6e			;	ld b,'.'  
7b6e			;	and (hl)  
7b6e			;	jr z, maskskip  
7b6e			;	ld b,'#'  
7b6e			;maskskip:  
7b6e			;	; save  key state  
7b6e			;	push hl  
7b6e			;	ld hl, (keybufptr)  
7b6e			;	ld (hl), b  
7b6e			;	inc hl  
7b6e			;	ld (keybufptr), hl  
7b6e			;  
7b6e			;	; move to next bit mask  
7b6e			;	pop hl  
7b6e			;	inc hl  
7b6e			;  
7b6e			;	dec d  
7b6e			;	jr nz, colloop  
7b6e			;  
7b6e			;	ret  
7b6e			;  
7b6e			;  
7b6e			;;  
7b6e			; lcd functions  
7b6e			;  
7b6e			;  
7b6e			  
7b6e			;if DEBUG_KEY_MATRIX  
7b6e			  
7b6e			; test function to display hardware view of matrix state  
7b6e			  
7b6e			matrixold:  
7b6e			  
7b6e			  
7b6e			  
7b6e			; reset counter  
7b6e 3e 80		ld a, 128  
7b70 d3 c1		out (portbdata),a  
7b72			; scan keyboard row 1  
7b72 3e 00		ld a, 0  
7b74 d3 c1		out (portbdata),a  
7b76			;ld a, 64  
7b76			;out (portbdata),a  
7b76 3e 80			ld a, 128  
7b78 21 f2 fe			ld hl, keyscan_table_row1  
7b7b cd d4 7b			call .rowscan  
7b7e			  
7b7e			;ld a, 0  
7b7e			;out (portbdata),a  
7b7e 3e 40		ld a, 64  
7b80 d3 c1		out (portbdata),a  
7b82 3e 40			ld a, 64  
7b84 21 e7 fe			ld hl, keyscan_table_row2  
7b87 cd d4 7b			call .rowscan  
7b8a			  
7b8a 3e 00		ld a, 0  
7b8c d3 c1		out (portbdata),a  
7b8e			;ld a, 64  
7b8e			;out (portbdata),a  
7b8e 3e 20			ld a, 32  
7b90 21 dc fe			ld hl, keyscan_table_row3  
7b93 cd d4 7b			call .rowscan  
7b96			  
7b96			;ld a, 0  
7b96			;out (portbdata),a  
7b96 3e 40		ld a, 64  
7b98 d3 c1		out (portbdata),a  
7b9a 3e 10			ld a, 16  
7b9c 21 d1 fe			ld hl, keyscan_table_row4  
7b9f cd d4 7b			call .rowscan  
7ba2			  
7ba2			; Display text on first line  
7ba2 3e 00		            LD   A, kLCD_Line1  
7ba4 cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7ba7 11 f2 fe		            LD   DE, keyscan_table_row1  
7baa			            ;LD   DE, MsgHello  
7baa cd fe 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7bad			  
7bad			; Display text on second line  
7bad 3e 28		            LD   A, kLCD_Line2  
7baf cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7bb2 11 e7 fe		            LD   DE, keyscan_table_row2  
7bb5 cd fe 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7bb8 3e 50		            LD   A, kLCD_Line3  
7bba cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7bbd 11 dc fe		            LD   DE, keyscan_table_row3  
7bc0 cd fe 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7bc3 3e 78		            LD   A, kLCD_Line4  
7bc5 cd dc 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7bc8 11 d1 fe		            LD   DE, keyscan_table_row4  
7bcb cd fe 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7bce			  
7bce cd d2 0c			call delay250ms  
7bd1 c3 bf 7a			jp matrix  
7bd4			  
7bd4			; pass de as row display flags  
7bd4			.rowscan:   
7bd4			;	out (portbdata),a  
7bd4 db c1			in a,(portbdata)  
7bd6 4f				ld c,a  
7bd7				; reset flags for the row   
7bd7 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7bd9 e6 01			and 1  
7bdb 28 02			jr z, .p1on  
7bdd 06 23			ld b,'#'  
7bdf			.p1on:  
7bdf 70				ld (hl), b  
7be0 23				inc hl  
7be1			  
7be1 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7be3 79				ld a,c  
7be4 e6 02			and 2  
7be6			;	bit 0,a  
7be6 28 02			jr z, .p2on  
7be8 06 23			ld b,'#'  
7bea			.p2on:  
7bea 70				ld (hl), b  
7beb 23				inc hl  
7bec			;  
7bec 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7bee 79				ld a,c  
7bef e6 04			and 4  
7bf1			;;	bit 0,a  
7bf1 28 02			jr z, .p3on  
7bf3 06 23			ld b,'#'  
7bf5			.p3on:  
7bf5 70				ld (hl), b  
7bf6 23				inc hl  
7bf7			;;  
7bf7 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7bf9			;;	bit 0,a  
7bf9 79				ld a,c  
7bfa e6 08			and 8  
7bfc 28 02			jr z, .p4on  
7bfe 06 23			ld b,'#'  
7c00			.p4on:  
7c00 70				ld (hl), b  
7c01 23				inc hl  
7c02			  
7c02 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7c04			;;	bit 0,a  
7c04 79				ld a,c  
7c05 e6 10			and 16  
7c07 28 02			jr z, .p5on  
7c09 06 23			ld b,'#'  
7c0b			.p5on:  
7c0b 70				ld (hl), b  
7c0c 23				inc hl  
7c0d			; zero term  
7c0d 06 00			ld b,0  
7c0f 70				ld (hl), b  
7c10			  
7c10 c9			.rscandone: ret  
7c11			  
7c11			;addatohl:  
7c11			;  
7c11			 ;add   a, l    ; A = A+L  
7c11			  ;  ld    l, a    ; L = A+L  
7c11			   ; adc   a, h    ; A = A+L+H+carry  
7c11			   ; sub   l       ; A = H+carry  
7c11			   ; ld    h, a    ; H = H+carry  
7c11			  
7c11			;ret  
7c11			; eof  
# End of file firmware_key_5x10.asm
7c11			;include "firmware_key_4x10.asm" 
7c11			 
7c11			heap_size:    equ heap_end - heap_start 
7c11			;eof 
# End of file os_mega.asm
7c11
