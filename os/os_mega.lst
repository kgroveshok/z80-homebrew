# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 5d 1b			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-09-09 19:06' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
001f			 
001f			 
001f			 
001f			;        nop  
001f			;        nop 
001f			;;	org 05h		; null out bdos call 
001f			; 
001f			;        nop  
001f			;        nop  
001f			;        nop 
001f			;;	org 08h 
001f			;;; 
001f			;;	jp cin		; rst 8 - char in 
001f			;;; 
001f			; 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;	org 010h 
001f			;; 
001f			;	jp cout		; rest 010h  - char out 
001f			;; 
001f			;	org 01bh   
001f			; 
001f			;	;jp  		; rst 01bh   - write string to display 
001f			;	jp str_at_display 
001f			; 
001f			; 
001f			;	org 020h 
001f			; 
001f			;	; jp		 ; rst 020h - read char at screen location 
001f			; 
001f			;	org 028h 
001f			 
001f				; jp		 ; rst 028h  - storage i/o 
001f			 
001f			; 	org 030h 
001f			;	jp break_point_state 
001f			  
001f			; $30  
001f			; org 038h 
001f			; $38 
001f			 
001f			; TODO any more important entry points to add to jump table for easier coding use? 
001f			 
001f			if BASE_KEV = 1  
001f			 
001f				; need to be at $66 for nmi support 
001f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0025 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0031 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0037 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0043 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0049 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0055 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0061 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0067 00 ff			db 0,255 
0069 c3 f4 75			jp nmi 
006c			endif 
006c			 
006c			include "firmware.asm" 
006c			  
006c			; main constants (used here and in firmware)  
006c			  
006c			; TODO have page 0 of storage as bios  
006c			  
006c			Device_A: equ 0h  
006c			Device_B: equ 040h          ; Sound  
006c			  
006c			if BASE_KEV  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_SC114  
006c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			; TODO fixup for CPM  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			Device_D: equ 0c0h             ; Keyboard and LCD  
006c			  
006c			; Odd specific debug points for testing hardware dev  
006c			  
006c			;if DEBUG_LEVEL0  
006c			;	include "debug_level0.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL1  
006c			;	include "debug_level1.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL2  
006c			;	include "debug_level2.asm"  
006c			;endif  
006c			  
006c			  
006c			CALLMONITOR: macro  
006c			;	call break_point_state  
006c			; now use the break point debug vector  
006c				call debug_vector  
006c				endm  
006c			  
006c			MALLOC_1: equ 1        ; from dk88   
006c			MALLOC_2: equ 0           ; broke  
006c			MALLOC_3: equ 0           ; really broke  
006c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
006c			  
006c			if BASE_KEV   
006c			;stacksize: equ 256  
006c			; each stack entry is three bytes (type + word)  
006c			stacksize: equ 3*150  
006c			  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 512  
006c			endif  
006c			if BASE_SC114  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			;if STORAGE_SE == 0  
006c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
006c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
006c			;endif  
006c			  
006c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
006c			  
006c			STORE_0_AUTORUN: equ $20  
006c			  
006c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
006c			  
006c			STORE_0_AUTOFILE: equ $21  
006c			STORE_0_BANKRUN: equ $23  
006c			STORE_0_FILERUN: equ $24  
006c			  
006c			; Block 0 offsets for settings  
006c			  
006c			; if set then skip prompt for start up and accept all  
006c			  
006c			STORE_0_QUICKSTART: equ $25  
006c			  
006c			; Blocks where directory table is held  
006c			  
006c			; Reducing the number of entries increases the max file size  
006c			  
006c			;STORE_DIR_START: equ 1  
006c			;STORE_DIR_END: equ 33  
006c			  
006c			; Blocks from where file data is stored  
006c			  
006c			;STORE_DATA_START: equ STORE_DIR_END + 1  
006c			  
006c			; Block indicators (<32 are data files)  
006c			  
006c			;STORE_BLOCK_CFG: equ $8f       ; config block  
006c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
006c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
006c			;STORE_BLOCK_FREE: equ $85       ; data block free  
006c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
006c			  
006c			  
006c			  
006c			; Directory entry flags  
006c			  
006c			;STORE_DIR_FREE: equ 0  
006c			;STORE_DIR_FILE:  equ 1  
006c			  
006c			; Structure offsets to directory entries  
006c			;STORE_DE_FLAG: equ 0  
006c			;STORE_DE_MAXEXT: equ 1  
006c			;STORE_DE_FILENAME: equ 2  
006c			  
006c			; Structure offsets to block 0  
006c			  
006c			;STORE_BK0_ISFOR: equ 1  
006c			;STORE_BK0_LABEL: equ 3  
006c			  
006c			; memory allocation   
006c			  
006c			chk_stund: equ tos+2           ; underflow check word  
006c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
006c			  
006c			; keyscan table needs rows x cols buffer  
006c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
006c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
006c			  
006c			keyscan_table_row1: equ chk_stovr -key_cols-1  
006c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
006c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
006c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
006c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
006c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
006c			keyscan_scancol: equ keyscan_table-key_cols  
006c			;keyscan_table_len: equ key_rows*key_cols  
006c			;keybufptr: equ keyscan_table - 2  
006c			;keysymbol: equ keybufptr - 1  
006c			key_held: equ keyscan_scancol-1	; currently held  
006c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
006c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
006c			key_fa: equ key_repeat_ct -1 ;  
006c			key_fb: equ key_fa -1 ;  
006c			key_fc: equ key_fb -1 ;  
006c			key_fd: equ key_fc -1 ;  
006c			key_face_held: equ key_fd - 1   
006c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
006c			  
006c			hardware_config: equ key_face_held - 10  
006c			  
006c			; hardware config switches  
006c			; TODO add bitmasks on includes for hardware  
006c			; high byte for expansion ids  
006c			;     0000 0000  no card inserted  
006c			;     0000 0001  storage card inserted  
006c			;     0000 0010  spi sd card active  
006c			  
006c			;       
006c			; low byte:  
006c			;     0000 0001   4x4 keypad  
006c			;     0000 0010   full keyboard  
006c			;     0000 0011   spi/ext keyboard  
006c			;     0000 0100   20x4 lcd  
006c			;     0000 1000   40x4 lcd  
006c			;     0000 1100   spi/ext display  
006c			;     0001 0000   ide interface available  
006c			  
006c			hardware_word: equ hardware_config - 2  
006c			  
006c			; debug marker - optional display of debug point on the debug screens  
006c			  
006c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
006c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
006c			parse_vector:  equ debug_vector - 3 ; vector to the parser vector  
006c			  
006c			debug_umark: equ parse_vector - 6  ; current user mark  
006c			debug_mark: equ debug_umark - 4    ; internal word debug points  
006c			  
006c			; input_str vars  
006c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
006c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
006c			input_size: equ input_start -1  ; number of chars  
006c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
006c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
006c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
006c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
006c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
006c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
006c			input_len: equ input_cur_onoff - 5 ; length of current input  
006c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
006c			  
006c			; cursor blink rate  
006c			CUR_BLINK_RATE: equ $09  
006c			;CUR_BLINK_RATE: equ 15  
006c			  
006c			key_actual_pressed: equ input_cursor - 1   
006c			key_symbol: equ key_actual_pressed - 1   
006c			key_shift: equ key_symbol - 1   
006c			  
006c			; Display allocation  
006c			  
006c			;display_rows: equ 4     ; move out to mini and mega files  
006c			;display_cols: equ 20  
006c			  
006c			display_fb_len: equ display_rows*display_cols  
006c			  
006c			; primary frame buffer     
006c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
006c			; working frame buffers  
006c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
006c			display_fb3: equ  display_fb1-display_fb_len - 1  
006c			display_fb2: equ  display_fb3-display_fb_len - 1  
006c			;  
006c			; pointer to active frame buffer  
006c			display_fb_active: equ display_fb2 - 2  
006c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
006c			display_write_tmp: equ display_lcde1e2 - 2  
006c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
006c			  
006c			;  
006c			  
006c			;; can load into de directory  
006c			cursor_col: equ display_active-1  
006c			cursor_row: equ cursor_col-1  
006c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
006c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
006c			  
006c			; maths vars  
006c			  
006c			LFSRSeed: equ cursor_shape -20   
006c			randData: equ LFSRSeed - 2  
006c			xrandc: equ randData - 2  
006c			stackstore: equ xrandc - 2  
006c			seed1: equ  stackstore -2   
006c			seed2: equ seed1 - 2  
006c			  
006c			; cf storage vars  
006c			  
006c			iErrorNum:  equ seed2-1         ;Error number  
006c			iErrorReg:  equ iErrorNum -1              ;Error register  
006c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
006c			  
006c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
006c			  
006c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
006c			  
006c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
006c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
006c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
006c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
006c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
006c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
006c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
006c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
006c			store_tmpid: equ store_tmp3 - 1		; page temp id  
006c			store_tmpext: equ store_tmpid - 1		; file extent temp  
006c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
006c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
006c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
006c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
006c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
006c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
006c			;  
006c			; spi vars  
006c			  
006c			  
006c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
006c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
006c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
006c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
006c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
006c			spi_device_id: equ spi_device - 1    ; human readable bank number  
006c			  
006c			;;;;; forth cli params  
006c			  
006c			; TODO use a different frame buffer for forth???  
006c			  
006c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
006c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
006c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
006c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
006c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
006c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
006c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
006c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
006c			  
006c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
006c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
006c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
006c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
006c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
006c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
006c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
006c			  
006c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
006c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
006c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
006c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
006c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
006c			  
006c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
006c			  
006c			; os/forth token vars  
006c			  
006c			os_last_cmd: equ os_var_array-255  
006c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
006c			os_current_i: equ os_cli_cmd-2  
006c			os_cur_ptr: equ os_current_i-2  
006c			os_word_scratch: equ os_cur_ptr-30  
006c			os_tok_len: equ os_word_scratch - 2  
006c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
006c			os_tok_malloc: equ os_tok_ptr - 2  
006c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
006c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
006c			execscratch: equ os_input-255        ; exec cmd eval buffer  
006c			scratch: equ execscratch-255  
006c			  
006c			os_stack_1: equ scratch - 3       ; stack holding area 1  
006c			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
006c			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
006c			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
006c			  
006c			  
006c			; temp locations for new word processing to save on adding more   
006c			  
006c			os_new_malloc: equ os_stack_4-2  
006c			os_new_parse_len: equ os_new_malloc - 2  
006c			os_new_word_len: equ os_new_parse_len - 2  
006c			os_new_work_ptr: equ os_new_word_len - 2  
006c			os_new_src_ptr: equ os_new_work_ptr - 2  
006c			os_new_exec: equ os_new_src_ptr - 2  
006c			os_new_exec_ptr: equ os_new_exec - 2  
006c			  
006c			; resume memory alloocations....  
006c			  
006c			;os_view_disable: equ os_new_exec_ptr - 1  
006c			os_view_af: equ os_new_exec_ptr - 2  
006c			os_view_hl: equ os_view_af -2  
006c			os_view_de: equ os_view_hl - 2  
006c			os_view_bc: equ os_view_de - 2  
006c			  
006c			; stack checksum word  
006c			if DEBUG_STACK_IMB  
006c				curframe: equ  os_view_de - 5  
006c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
006c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			else  
006c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			endif  
006c			  
006c			; with data stack could see memory filled with junk. need some memory management   
006c			; malloc and free entry points added  
006c			  
006c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
006c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			;heap_end: equ free_list-1  ; Starting address of heap  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			heap_end: equ chk_word-1  ; Starting address of heap  
006c			  
006c			  
006c			;if BASE_KEV   
006c			;heap_start: equ 0800eh  ; Starting address of heap  
006c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;heap_start: equ baseram+15  ; Starting address of heap  
006c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;endif  
006c			  
006c			  
006c			;;;;  
006c			  
006c			  
006c			; change below to point to last memory alloc above  
006c			topusermem:  equ   heap_start  
006c			  
006c			;if BASE_KEV   
006c			;baseusermem: equ 08000h  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;;aseusermem:     equ    12  
006c			;baseusermem:     equ    prompt  
006c			;;baseusermem:     equ    endofcode  
006c			;endif  
006c			  
006c			  
006c			; **********************************************************************  
006c			; **  Constants  
006c			; **********************************************************************  
006c			  
006c			; Constants used by this code module  
006c			kDataReg:   EQU Device_D           ;PIO port A data register  
006c			kContReg:   EQU Device_D+2           ;PIO port A control register  
006c			  
006c			  
006c			portbdata:  equ Device_D+1    ; port b data  
006c			portbctl:   equ Device_D+3    ; port b control  
006c			  
006c			  
006c			;KEY_SHIFT:   equ 5  
006c			;KEY_SYMBOLSHIFT:  equ 6  
006c			  
006c			KEY_SHIFTLOCK: equ 4  
006c			  
006c			  
006c			KEY_UP: equ 5  
006c			KEY_NEXTWORD: equ 6  
006c			KEY_PREVWORD: equ 7  
006c			KEY_BS: equ 8  
006c			KEY_TAB:  equ 9  
006c			KEY_DOWN: equ 10  
006c			KEY_LEFT: equ 11  
006c			KEY_RIGHT: equ 12  
006c			KEY_CR:   equ 13  
006c			KEY_HOME: equ 14  
006c			KEY_END: equ 15  
006c			  
006c			KEY_F1: equ 16  
006c			KEY_F2: equ 17  
006c			KEY_F3: equ 18  
006c			KEY_F4: equ 19  
006c			  
006c			KEY_F5: equ 20  
006c			KEY_F6: equ 21  
006c			KEY_F7: equ 22  
006c			KEY_F8: equ 23  
006c			  
006c			KEY_F9: equ 24  
006c			KEY_F10: equ 25  
006c			KEY_F11: equ 26  
006c			KEY_F12: equ 27  
006c			  
006c			;if DEBUG_KEY  
006c			;	KEY_MATRIX_NO_PRESS: equ '.'  
006c			;	KEY_SHIFT:   equ '.'  
006c			;	KEY_SYMBOLSHIFT:  equ '.'  
006c			;else  
006c				KEY_SHIFT:   equ '~'  
006c				KEY_SYMBOLSHIFT:  equ '~'  
006c				KEY_MATRIX_NO_PRESS: equ '~'  
006c			;endi  
006c			  
006c			  
006c			  
006c			  
006c			; Macro to make adding debug marks easier  
006c			  
006c			DMARK: macro str  
006c				push af  
006c				ld a, (.dmark)  
006c				ld (debug_mark),a  
006c				ld a, (.dmark+1)  
006c				ld (debug_mark+1),a  
006c				ld a, (.dmark+2)  
006c				ld (debug_mark+2),a  
006c				jr .pastdmark  
006c			.dmark: db str  
006c			.pastdmark: pop af  
006c			  
006c			endm  
006c			  
006c			  
006c			; macro to detect for stack imbalances  
006c			  
006c			include "stackimbal.asm"  
006c			; Macro and code to detect stock imbalances 
006c			 
006c			SPPUSH: equ 0 
006c			 
006c			; Add a stack frame which can be checked before return 
006c			 
006c			STACKFRAME: macro onoff frame1 frame2 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c						exx 
006c			 
006c						ld de, frame1 
006c						ld a, d 
006c						ld hl, curframe 
006c						call hexout 
006c						ld a, e 
006c						ld hl, curframe+2 
006c						call hexout 
006c			  
006c						ld hl, frame1 
006c						push hl 
006c						ld hl, frame2 
006c						push hl 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			endm 
006c			 
006c			STACKFRAMECHK: macro onoff frame1 frame2 
006c			 
006c					 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						exx 
006c						; check stack frame SP 
006c			 
006c						ld hl, frame2 
006c						pop de   ; frame2 
006c			 
006c						call cmp16 
006c						jr nz, .spnosame 
006c						 
006c			 
006c						ld hl, frame1 
006c						pop de   ; frame1 
006c			 
006c						call cmp16 
006c						jr z, .spfrsame 
006c			 
006c						.spnosame: call showsperror 
006c			 
006c						.spfrsame: nop 
006c			 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			 
006c			 
006c			endm 
006c			 
006c			 
006c			; for a sub routine, wrap SP collection and comparisons 
006c			 
006c			; Usage: 
006c			; 
006c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
006c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
006c			 
006c			SAVESP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c			 
006c						ld (store_sp+(storeword*4)), sp 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			CHECKSP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c			 
006c						; save SP after last save 
006c				 
006c						ld (store_sp+(storeword*4)+2), sp 
006c			 
006c						push hl 
006c						ld hl, store_sp+(storeword*4) 
006c						call check_stack_sp  
006c						pop hl 
006c			 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			if DEBUG_STACK_IMB 
006c			 
006c			check_stack_sp: 
006c					push de 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					push de 
006c			 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					pop hl 
006c			 
006c			 
006c					; check to see if the same 
006c			 
006c					call cmp16 
006c					jr z, .spsame 
006c			 
006c					; not same 
006c			 
006c					call showsperror 
006c			.spsame: 
006c			 
006c					pop de 
006c			 
006c					ret 
006c			 
006c			.sperr:  db "Stack imbalance",0 
006c			 
006c			 
006c			showsperror: 
006c			 
006c			 
006c				push hl 
006c				push af 
006c				push de 
006c				call clear_display 
006c				ld de, .sperr 
006c				ld a,0 
006c			;	ld de,os_word_scratch 
006c				call str_at_display 
006c				ld a, display_row_1+17 
006c				ld de, debug_mark 
006c				call str_at_display 
006c				ld a, 0 
006c				ld (curframe+4),a 
006c				ld hl, curframe 
006c				ld de, os_word_scratch 
006c				ld a, display_row_4 
006c				call str_at_display 
006c				call update_display 
006c				;call break_point_state 
006c				call cin_wait 
006c			 
006c			;	ld a, ' ' 
006c			;	ld (os_view_disable), a 
006c				call bp_on 
006c				pop de	 
006c				pop af 
006c				pop hl 
006c				CALLMONITOR 
006c				ret 
006c			 
006c			endif 
006c			 
006c			 
006c			 
006c			; eof 
# End of file stackimbal.asm
006c			  
006c			;TODO macro to calc col and row offset into screen  
006c			  
006c			  
006c			  
006c			hardware_init:  
006c			  
006c				  
006c			  
006c					;ld a, 0  
006c					;ld (hardware_diag), a  
006c			  
006c					; clear all the buffers  
006c			  
006c 21 42 fc				ld hl, display_fb1  
006f 22 fe fa				ld (display_fb_active), hl  
0072			  
0072 cd 7c 0d				call clear_display  
0075			  
0075 21 00 fb				ld hl, display_fb2  
0078 22 fe fa				ld (display_fb_active), hl  
007b			  
007b cd 7c 0d				call clear_display  
007e			  
007e					; init primary frame buffer area  
007e 21 e3 fc				ld hl, display_fb0  
0081 22 fe fa				ld (display_fb_active), hl  
0084			  
0084 cd 7c 0d				call clear_display  
0087			  
0087			  
0087 cd 01 76				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
008a			  
008a cd 98 78			call key_init  
008d cd 42 02			call storage_init  
0090			  
0090				; setup malloc functions  
0090			  
0090				if MALLOC_1  
0090 cd 54 13				call  heap_init  
0093				endif  
0093				if MALLOC_4  
0093					call  heap_init  
0093				endif  
0093			  
0093				; init sound hardware if present  
0093			  
0093				if SOUND_ENABLE  
0093					call sound_init  
0093				endif  
0093			  
0093				; lcd test sequence  
0093					  
0093 cd 9e 0d			call update_display  
0096 cd c0 0c			call delay1s  
0099 3e 2b			ld a,'+'  
009b cd 81 0d			call fill_display  
009e cd 9e 0d			call update_display  
00a1 cd c0 0c			call delay1s  
00a4 3e 2a			ld a,'*'  
00a6 cd 81 0d			call fill_display  
00a9 cd 9e 0d			call update_display  
00ac cd c0 0c			call delay1s  
00af 3e 2d			ld a,'-'  
00b1 cd 81 0d			call fill_display  
00b4 cd 9e 0d			call update_display  
00b7 cd c0 0c			call delay1s  
00ba			  
00ba			; boot splash screen  
00ba			if display_cols == 20	  
00ba			        ld a, display_row_1    
00ba			else  
00ba 3e 0a		        ld a, display_row_1 +10   
00bc			endif  
00bc 11 5c 1a			ld de, prom_bootmsg  
00bf cd 8e 0d			call str_at_display  
00c2 cd 9e 0d			call update_display  
00c5			  
00c5			  
00c5 cd c0 0c			call delay1s  
00c8 cd c0 0c			call delay1s  
00cb			if display_cols == 20	  
00cb			            LD   A, display_row_3+2  
00cb			else  
00cb 3e 5c		            LD   A, display_row_3+12  
00cd			endif  
00cd 11 71 1a			ld de, prom_bootmsg1  
00d0 cd 8e 0d			call str_at_display  
00d3			; display debug level  
00d3 3e 78		            LD   A, display_row_4  
00d5 11 1b 00			ld de, debuglevel  
00d8 cd 8e 0d			call str_at_display  
00db			  
00db cd 9e 0d			call update_display  
00de cd c0 0c			call delay1s  
00e1 cd c0 0c			call delay1s  
00e4			  
00e4			;	ld a, display_row_4+3  
00e4			;	ld de, bootmsg2  
00e4			;	call str_at_display  
00e4			;	call update_display  
00e4			;	call delay1s  
00e4			;	call delay1s  
00e4			  
00e4			; debug mark setup  
00e4			  
00e4 3e 5f		ld a, '_'  
00e6 32 9d fd		ld (debug_mark),a  
00e9 32 9e fd		ld (debug_mark+1),a  
00ec 32 9f fd		ld (debug_mark+2),a  
00ef 3e 00		ld a,0  
00f1 32 a0 fd		ld (debug_mark+3),a  
00f4 32 a1 fd		ld (debug_umark),a  
00f7			  
00f7 c9					ret  
00f8			  
00f8			  
00f8			;bootmsg2:	db "Firmware v0.1",0  
00f8			  
00f8			; a 4x20 lcd  
00f8			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00f8			  
00f8			;if display_cols == 20  
00f8			;	include "firmware_lcd_4x20.asm"  
00f8			;endif  
00f8			  
00f8			;if display_cols == 40  
00f8			;	include "firmware_lcd_4x40.asm"  
00f8			;endif  
00f8			  
00f8			;  
00f8			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00f8			; TODO abstract the bit bang video out interface for dual display  
00f8			; TODO wire video out to tx pin on rc2014 bus  
00f8			  
00f8			; must supply cin, and cin_wait for low level hardware abstraction   
00f8			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00f8			; test scancode  
00f8			  
00f8			;;;;;  
00f8			;;;  
00f8			; Moved out to mini and maxi versions  
00f8			;  
00f8			; include "firmware_key_4x4.asm"  
00f8			; using existing 4 wire x 4 resistor array for input  
00f8			;include "firmware_key_4x10.asm"  
00f8			; need to mod the board for 5 rows due to resistor array  
00f8			;include "firmware_key_5x10.asm"  
00f8			  
00f8			; storage hardware interface  
00f8			  
00f8			; use microchip serial eeprom for storage  
00f8			  
00f8			  
00f8			if STORAGE_SE  
00f8				include "firmware_spi.asm"  
00f8			; my spi protocol (used by storage) 
00f8			 
00f8			; SPI pins 
00f8			 
00f8			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00f8			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00f8			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00f8			 
00f8			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00f8			; chip pin 4 gnd 
00f8			 
00f8			 
00f8			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00f8			SPI_CE1: equ 1      ;    port a1 pin 14  
00f8			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00f8			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00f8			SPI_CE4: equ 4      ; port a4     pin 10 
00f8			 
00f8			; active low AND masks 
00f8			 
00f8			;SPI_CE0_MASK: equ    255-1 
00f8			;SPI_CE1_MASK: equ   255-2 
00f8			;SPI_CE2_MASK: equ   255-4 
00f8			;SPI_CE3_MASK: equ   255-8 
00f8			;SPI_CE4_MASK: equ   255-16 
00f8			SPI_CE_HIGH:  equ 255 
00f8			 
00f8			 
00f8			 
00f8			;  Perform SCLK wait pulse 
00f8			 
00f8			spi_clk: 
00f8 f5				push af 
00f9 3a 96 f9			ld a, (spi_clktime) 
00fc			;	cp 0 
00fc b7				or a 
00fd 28 03			jr z, .scskip 
00ff cd a5 0c			call aDelayInMS 
0102			.scskip: 
0102 f1				pop af 
0103 c9				ret 
0104			 
0104			 
0104			 
0104			; TODO store port id for spi device ie dev c 
0104			; TODO store pin for SO 
0104			; TODO store pin for SI 
0104			; TODO store pin for SCLK 
0104			 
0104			; 
0104			 
0104			; ensure that spi bus is in a stable state with default pins  
0104			 
0104			se_stable_spi:   
0104			 
0104				 ; set DI high, CE high , SCLK low 
0104				;ld a, SPI_DI | SPI_CE0 
0104 3e 07			ld a, SPI_DI  
0106 cd fd 01			call spi_ce_high 
0109 d3 80			 out (storage_adata),a 
010b 32 93 f9			ld (spi_portbyte),a 
010e			 
010e				if DEBUG_SPI 
010e					push hl 
010e					ld l, a 
010e					DMARK "SPI" 
010e					CALLMONITOR 
010e					pop hl 
010e				endif 
010e c9				ret 
010f			 
010f			; byte to send in a 
010f			 
010f			spi_send_byte: 
010f				; save byte to send for bit mask shift out 
010f 4f			        ld c,a 
0110 3a 93 f9			ld a,(spi_portbyte) 
0113				  
0113				; clock out	each bit of the byte msb first 
0113			 
0113 06 08			ld b, 8 
0115			.ssb1: 
0115				; clear so bit  
0115 cb bf			res SPI_DI, a 
0117 cb 11			rl c 
0119				; if bit 7 is set then carry is set 
0119 30 02			jr nc, .ssb2 
011b cb ff			set SPI_DI,a 
011d			.ssb2:  ; output bit to ensure it is stable 
011d d3 80			out (storage_adata),a 
011f			;	nop 
011f				; clock bit high 
011f cb ef			set SPI_SCLK,a 
0121 d3 80			out (storage_adata),a 
0123			;	nop 
0123 cd f8 00			call spi_clk 
0126				; then low 
0126 cb af			res SPI_SCLK,a 
0128 d3 80			out (storage_adata),a 
012a			;	nop 
012a cd f8 00			call spi_clk 
012d 10 e6			djnz .ssb1 
012f			 
012f 32 93 f9			ld (spi_portbyte),a 
0132 c9				ret 
0133			 
0133			; TODO low level get byte into A on spi 
0133			 
0133			spi_read_byte:  
0133			 
0133				; save byte to send for bit mask shift out 
0133 0e 00		    ld c,0 
0135 3a 93 f9			ld a,(spi_portbyte) 
0138				  
0138				; clock out	each bit of the byte msb first 
0138			 
0138			 
0138				; clock bit high 
0138 cb ef			set SPI_SCLK,a 
013a d3 80			out (storage_adata),a 
013c			;	nop 
013c cd f8 00			call spi_clk 
013f			 
013f			    ; read DO  
013f			 
013f cb f9		    set 7,c 
0141 db 80			in a,(storage_adata) 
0143 cb 77		    bit SPI_DO,a 
0145 20 02		    jr nz, .b7 
0147 cb b9		    res 7,c 
0149			.b7: 
0149				; then low 
0149 cb af			res SPI_SCLK,a 
014b d3 80			out (storage_adata),a 
014d			;	nop 
014d cd f8 00			call spi_clk 
0150			     
0150			 
0150				; clock bit high 
0150 cb ef			set SPI_SCLK,a 
0152 d3 80			out (storage_adata),a 
0154			;	nop 
0154 cd f8 00			call spi_clk 
0157			 
0157			    ; read DO  
0157			 
0157 cb f1		    set 6,c 
0159 db 80			in a,(storage_adata) 
015b cb 77		    bit SPI_DO,a 
015d 20 02		    jr nz, .b6 
015f cb b1		    res 6,c 
0161			.b6: 
0161				; then low 
0161 cb af			res SPI_SCLK,a 
0163 d3 80			out (storage_adata),a 
0165			;	nop 
0165 cd f8 00			call spi_clk 
0168			 
0168				; clock bit high 
0168 cb ef			set SPI_SCLK,a 
016a d3 80			out (storage_adata),a 
016c			;	nop 
016c cd f8 00			call spi_clk 
016f			 
016f			 
016f			    ; read DO  
016f			 
016f cb e9		    set 5,c 
0171 db 80			in a,(storage_adata) 
0173 cb 77		    bit SPI_DO,a 
0175 20 02		    jr nz, .b5 
0177 cb a9		    res 5,c 
0179			.b5: 
0179				; then low 
0179 cb af			res SPI_SCLK,a 
017b d3 80			out (storage_adata),a 
017d			;	nop 
017d cd f8 00			call spi_clk 
0180				; clock bit high 
0180 cb ef			set SPI_SCLK,a 
0182 d3 80			out (storage_adata),a 
0184			;	nop 
0184 cd f8 00			call spi_clk 
0187			 
0187			    ; read DO  
0187			 
0187 cb e1		    set 4,c 
0189 db 80			in a,(storage_adata) 
018b cb 77		    bit SPI_DO,a 
018d 20 02		    jr nz, .b4 
018f cb a1		    res 4,c 
0191			.b4: 
0191				; then low 
0191 cb af			res SPI_SCLK,a 
0193 d3 80			out (storage_adata),a 
0195			;	nop 
0195 cd f8 00			call spi_clk 
0198				; clock bit high 
0198 cb ef			set SPI_SCLK,a 
019a d3 80			out (storage_adata),a 
019c			;	nop 
019c cd f8 00			call spi_clk 
019f			 
019f			    ; read DO  
019f			 
019f cb d9		    set 3,c 
01a1 db 80			in a,(storage_adata) 
01a3 cb 77		    bit SPI_DO,a 
01a5 20 02		    jr nz, .b3 
01a7 cb 99		    res 3,c 
01a9			.b3: 
01a9				; then low 
01a9 cb af			res SPI_SCLK,a 
01ab d3 80			out (storage_adata),a 
01ad			;	nop 
01ad cd f8 00			call spi_clk 
01b0				; clock bit high 
01b0 cb ef			set SPI_SCLK,a 
01b2 d3 80			out (storage_adata),a 
01b4			;	nop 
01b4 cd f8 00			call spi_clk 
01b7			 
01b7			    ; read DO  
01b7			 
01b7 cb d1		    set 2,c 
01b9 db 80			in a,(storage_adata) 
01bb cb 77		    bit SPI_DO,a 
01bd 20 02		    jr nz, .b2 
01bf cb 91		    res 2,c 
01c1			.b2: 
01c1				; then low 
01c1 cb af			res SPI_SCLK,a 
01c3 d3 80			out (storage_adata),a 
01c5			;	nop 
01c5 cd f8 00			call spi_clk 
01c8				; clock bit high 
01c8 cb ef			set SPI_SCLK,a 
01ca d3 80			out (storage_adata),a 
01cc			;	nop 
01cc cd f8 00			call spi_clk 
01cf			 
01cf			    ; read DO  
01cf			 
01cf cb c9		    set 1,c 
01d1 db 80			in a,(storage_adata) 
01d3 cb 77		    bit SPI_DO,a 
01d5 20 02		    jr nz, .b1 
01d7 cb 89		    res 1,c 
01d9			.b1: 
01d9				; then low 
01d9 cb af			res SPI_SCLK,a 
01db d3 80			out (storage_adata),a 
01dd			;	nop 
01dd cd f8 00			call spi_clk 
01e0				; clock bit high 
01e0 cb ef			set SPI_SCLK,a 
01e2 d3 80			out (storage_adata),a 
01e4			;	nop 
01e4 cd f8 00			call spi_clk 
01e7			 
01e7			    ; read DO  
01e7			 
01e7 cb c1		    set 0,c 
01e9 db 80			in a,(storage_adata) 
01eb cb 77		    bit SPI_DO,a 
01ed 20 02		    jr nz, .b0 
01ef cb 81		    res 0,c 
01f1			.b0: 
01f1				; then low 
01f1 cb af			res SPI_SCLK,a 
01f3 d3 80			out (storage_adata),a 
01f5			;	nop 
01f5 cd f8 00			call spi_clk 
01f8			 
01f8			 
01f8 32 93 f9			ld (spi_portbyte),a 
01fb			 
01fb			    ; return byte 
01fb 79			    ld a,c 
01fc			 
01fc			 
01fc c9				ret 
01fd			 
01fd			 
01fd			 
01fd			spi_ce_high: 
01fd			 
01fd				if DEBUG_SPI_HARD_CE0 
01fd			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
01fd					ret 
01fd			 
01fd				endif 
01fd			 
01fd			 
01fd f5				push af 
01fe			 
01fe				; send direct ce to port b 
01fe 3e ff			ld a, 255 
0200 d3 81			out (storage_bdata), a 
0202			 
0202 f1				pop af 
0203			 
0203				; for port a that shares with spi lines AND the mask 
0203			  
0203				if DEBUG_SPI 
0203					push hl 
0203					ld h, a 
0203				endif 
0203			;	ld c, SPI_CE_HIGH 
0203			;	and c 
0203 cb c7			set SPI_CE0, a 
0205 cb cf			set SPI_CE1, a 
0207 cb d7			set SPI_CE2, a 
0209 cb df			set SPI_CE3, a 
020b cb e7			set SPI_CE4, a 
020d			 
020d				if DEBUG_SPI 
020d					ld l, a 
020d					DMARK "CEh" 
020d					CALLMONITOR 
020d					pop hl 
020d				endif 
020d c9				ret 
020e			 
020e			 
020e			spi_ce_low: 
020e			 
020e				if DEBUG_SPI_HARD_CE0 
020e			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
020e					ret 
020e			 
020e				endif 
020e			 
020e c5				push bc 
020f f5				push af 
0210			 
0210				; send direct ce to port b 
0210 3a 95 f9			ld a, (spi_cartdev) 
0213 d3 81			out (storage_bdata), a 
0215			 
0215			 
0215			 
0215				; for port a that shares with spi lines AND the mask 
0215			 
0215 3a 92 f9			ld a, (spi_device)  
0218 4f				ld c, a 
0219			 
0219 f1				pop af 
021a			 
021a				; detect CEx 
021a			 
021a				if DEBUG_SPI 
021a					push hl 
021a					ld h, a 
021a				endif 
021a			 
021a cb 41			bit SPI_CE0, c 
021c 20 04			jr nz, .cel1 
021e cb 87			res SPI_CE0, a 
0220 18 1e			jr .celn 
0222			.cel1: 
0222 cb 49			bit SPI_CE1, c 
0224 20 04			jr nz, .cel2 
0226 cb 8f			res SPI_CE1, a 
0228 18 16			jr .celn 
022a			.cel2: 
022a cb 51			bit SPI_CE2, c 
022c 20 04			jr nz, .cel3 
022e cb 97			res SPI_CE2, a 
0230 18 0e			jr .celn 
0232			.cel3: 
0232 cb 59			bit SPI_CE3, c 
0234 20 04			jr nz, .cel4 
0236 cb 9f			res SPI_CE3, a 
0238 18 06			jr .celn 
023a			.cel4: 
023a cb 61			bit SPI_CE4, c 
023c 20 02			jr nz, .celn 
023e cb a7			res SPI_CE4, a 
0240			.celn: 
0240			 
0240			 
0240			 
0240			;	add c 
0240			 
0240				if DEBUG_SPI 
0240					ld l, a 
0240					DMARK "CEl" 
0240					CALLMONITOR 
0240					pop hl 
0240				endif 
0240 c1				pop bc 
0241 c9				ret 
0242			 
0242			 
0242			 
0242			; eof 
0242			 
0242			 
0242			 
0242			 
0242			 
# End of file firmware_spi.asm
0242				include "firmware_seeprom.asm"  
0242			; 
0242			; persisent storage interface via microchip serial eeprom 
0242			 
0242			; port a pio 2 
0242			; pa 7 - si 
0242			; pa 6 - sclk  
0242			; pa 5 - so 
0242			; pa 4 - cs 
0242			; pa 3 - cs 
0242			; pa 2 - cs 
0242			; pa 1 - cs 
0242			; pa 0 - cs 
0242			; 
0242			; TODO get block 
0242			; TODO save block 
0242			; TODO load file 
0242			; TODO save file 
0242			; TODO get dir  
0242			 
0242			;  
0242			storage_adata: equ Device_C    ; device c port a - onboard storage 
0242			storage_actl: equ Device_C+2     ; device c port a 
0242			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0242			storage_bctl: equ Device_C+3     ; device c port b 
0242			 
0242			 
0242			; TODO move these to hardware driver file 
0242			 
0242			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0242			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0242			; storage bank file system format 
0242			; 
0242			; first page of bank: 
0242			; 	addr 0 - status check 
0242			;       addr 1 - write protect flag 
0242			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0242			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0242			;         TODO see if scanning whole of for available next file id is fast enough 
0242			;	addr 4 > zero term string of bank label 
0242			; 
0242			;        
0242			;  
0242			; first page of any file: 
0242			;      byte 0 - file id  
0242			;      byte 1-17 - fixed file name  
0242			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0242			; 
0242			; other pages of any file: 
0242			;      byte 0 - file id 
0242			;      byte 1> - file data 
0242			; 
0242			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0242			;  
0242			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0242			 
0242			 
0242			;storage_so_bit: 5 
0242			;storage_si_bit: 7 
0242			;storage_sclk_bit: 6 
0242			  
0242			 
0242			; init storage pio 
0242			 
0242			storage_init: 
0242			 
0242			 
0242					; set default SPI clk pulse time as disabled 
0242			 
0242 3e 00				ld a, 0 
0244 32 96 f9				ld (spi_clktime), a 
0247			 
0247					; init hardware 
0247			 
0247 3e cf		            LD   A, 11001111b 
0249 d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
024b 3e 00		            LD   A, 00000000b 
024d cb f7			set SPI_DO,a 
024f			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
024f d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0251			 
0251 3e cf		            LD   A, 11001111b 
0253 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
0255 3e 00		            LD   A, 00000000b 
0257 d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
0259			 
0259				; set all external spi devices off  
0259 3e ff			ld a, 255 
025b 32 92 f9			ld (spi_device), a 
025e 32 95 f9			ld (spi_cartdev), a 
0261			 
0261					; ensure the spi bus is in a default stable state 
0261 cd 04 01				call se_stable_spi 
0264			 
0264			; TODO scan spi bus and gather which storage banks are present 
0264			 
0264			; populate store_bank_active  
0264			; for each ce line activate and attempt to write first byte of bank and read back 
0264			; if zero is returned then bank is empty 
0264			;   
0264			; 
0264			 
0264					; init file extent cache to save on slow reads 
0264			 
0264			;	ld hl, store_filecache 
0264			;	ld de, 0 
0264			;	ld hl,(de)	 
0264			 
0264			 
0264 c9			    ret 
0265			 
0265			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
0265			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
0265			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
0265			 
0265			; INSTRUCTION SET 
0265			; READ 0000 0011 Read data from memory array beginning at selected address 
0265			; WRITE 0000 0010 Write data to memory array beginning at selected address 
0265			; WREN 0000 0110 Set the write enable latch (enable write operations) 
0265			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
0265			; RDSR 0000 0101 Read STATUS register 
0265			; WRSR 0000 0001 Write STATUS register 
0265			; PE 0100 0010 Page Erase – erase one page in memory array 
0265			; SE 1101 1000 Sector Erase – erase one sector in memory array 
0265			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
0265			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
0265			 
0265			; TODO send byte steam for page without setting the address for every single byte 
0265			; TODO read byte  
0265			 
0265			; byte in a 
0265			; address in hl  
0265			se_writebyte: 
0265			        
0265			    ;   ld c, a 
0265 f5			        push af 
0266 e5			        push hl 
0267			 
0267			    ; initi write mode 
0267			    ; 
0267			    ;CS low 
0267			 
0267 3a 93 f9		       ld a,(spi_portbyte) 
026a cd 0e 02			call spi_ce_low 
026d			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
026d d3 80		       out (storage_adata),a 
026f 32 93 f9		       ld (spi_portbyte), a 
0272			 
0272			    ;clock out wren instruction 
0272			 
0272 3e 06		    ld a, store_wren_ins 
0274 cd 0f 01		    call spi_send_byte  
0277			 
0277			    ;cs high to enable write latch 
0277			 
0277 3a 93 f9		       ld a,(spi_portbyte) 
027a cd fd 01			call spi_ce_high 
027d			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
027d d3 80		       out (storage_adata),a 
027f 32 93 f9		       ld (spi_portbyte), a 
0282			 
0282			;	nop 
0282			    ; 
0282			    ; intial write data 
0282			    ; 
0282			    ; cs low 
0282			     
0282			;       ld a,(spi_portbyte) 
0282 cd 0e 02			call spi_ce_low 
0285			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0285 d3 80		       out (storage_adata),a 
0287 32 93 f9		       ld (spi_portbyte), a 
028a			 
028a			    ; clock out write instruction 
028a			     
028a 3e 02		    ld a, store_write_ins  
028c cd 0f 01		    call spi_send_byte  
028f			 
028f			    ; clock out address (depending on address size) 
028f			     
028f e1			    pop hl 
0290 7c			    ld a,h    ; address out msb first 
0291 cd 0f 01		    call spi_send_byte  
0294 7d			    ld a,l 
0295 cd 0f 01		    call spi_send_byte  
0298			 
0298			    ; clock out byte(s) for page 
0298			 
0298 f1			    pop af 
0299 cd 0f 01		    call spi_send_byte  
029c			 
029c			    ; end write with ce high 
029c 3a 93 f9		       ld a,(spi_portbyte) 
029f			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
029f cd fd 01			call spi_ce_high 
02a2 d3 80		       out (storage_adata),a 
02a4 32 93 f9		       ld (spi_portbyte), a 
02a7			 
02a7				; pause for internal write cycle 
02a7 3e 0a			ld a, 10 
02a9 cd a5 0c			call aDelayInMS 
02ac c9			    ret 
02ad			 
02ad			; buffer to write in de 
02ad			; address in hl  
02ad			se_writepage: 
02ad			        
02ad			    ;   ld c, a 
02ad d5				push de 
02ae e5			        push hl 
02af			 
02af			    ; initi write mode 
02af			    ; 
02af			    ;CS low 
02af			 
02af 3a 93 f9		       ld a,(spi_portbyte) 
02b2 cd 0e 02			call spi_ce_low 
02b5			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02b5 d3 80		       out (storage_adata),a 
02b7 32 93 f9		       ld (spi_portbyte), a 
02ba			 
02ba			    ;clock out wren instruction 
02ba			 
02ba 3e 06		    ld a, store_wren_ins 
02bc cd 0f 01		    call spi_send_byte  
02bf			 
02bf			    ;cs high to enable write latch 
02bf			 
02bf 3a 93 f9		       ld a,(spi_portbyte) 
02c2 cd fd 01			call spi_ce_high 
02c5			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02c5 d3 80		       out (storage_adata),a 
02c7 32 93 f9		       ld (spi_portbyte), a 
02ca			 
02ca			;	nop 
02ca			    ; 
02ca			    ; intial write data 
02ca			    ; 
02ca			    ; cs low 
02ca			     
02ca			;       ld a,(spi_portbyte) 
02ca			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02ca cd 0e 02			call spi_ce_low 
02cd d3 80		       out (storage_adata),a 
02cf 32 93 f9		       ld (spi_portbyte), a 
02d2			 
02d2			    ; clock out write instruction 
02d2			     
02d2 3e 02		    ld a, store_write_ins  
02d4 cd 0f 01		    call spi_send_byte  
02d7			 
02d7			    ; clock out address (depending on address size) 
02d7			     
02d7 e1			    pop hl 
02d8 7c			    ld a,h    ; address out msb first 
02d9 cd 0f 01		    call spi_send_byte  
02dc 7d			    ld a,l 
02dd cd 0f 01		    call spi_send_byte  
02e0			 
02e0			    ; clock out byte(s) for page 
02e0			 
02e0 e1				pop hl 
02e1 06 40			ld b, STORE_BLOCK_PHY 
02e3			.bytewrite: 
02e3			 
02e3 7e				ld a,(hl) 
02e4 e5			    push hl 
02e5 c5				push bc 
02e6 cd 0f 01		    call spi_send_byte  
02e9 c1				pop bc 
02ea e1				pop hl 
02eb			 
02eb			    ; end write with ce high 
02eb 3a 93 f9		       ld a,(spi_portbyte) 
02ee cd fd 01			call spi_ce_high 
02f1			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02f1 d3 80		       out (storage_adata),a 
02f3 32 93 f9		       ld (spi_portbyte), a 
02f6			 
02f6 23				inc hl 
02f7 10 ea			djnz .bytewrite 
02f9			 
02f9				; pause for internal write cycle 
02f9 3e 64			ld a, 100 
02fb cd a5 0c			call aDelayInMS 
02fe c9			    ret 
02ff			; returns byte in a 
02ff			; address in hl  
02ff			se_readbyte: 
02ff d5				push de 
0300 c5				push bc 
0301			 
0301			    ;   ld c, a 
0301 e5			        push hl 
0302			 
0302			    ; initi write mode 
0302			    ; 
0302			    ;CS low 
0302			 
0302 3a 93 f9		       ld a,(spi_portbyte) 
0305 cd 0e 02			call spi_ce_low 
0308			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0308 d3 80		       out (storage_adata),a 
030a 32 93 f9		       ld (spi_portbyte), a 
030d			 
030d			    ;clock out wren instruction 
030d			 
030d 3e 03		    ld a, store_read_ins 
030f cd 0f 01		    call spi_send_byte  
0312			 
0312			 
0312			    ; clock out address (depending on address size) 
0312			     
0312 e1			    pop hl 
0313 7c			    ld a,h    ; address out msb first 
0314 cd 0f 01		    call spi_send_byte  
0317 7d			    ld a,l 
0318 cd 0f 01		    call spi_send_byte  
031b			 
031b			    ; clock in byte(s) for page 
031b			 
031b cd 33 01		    call spi_read_byte  
031e f5				push af 
031f			 
031f			    ; end write with ce high 
031f 3a 93 f9		       ld a,(spi_portbyte) 
0322			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
0322 cd fd 01			call spi_ce_high 
0325 d3 80		       out (storage_adata),a 
0327 32 93 f9		       ld (spi_portbyte), a 
032a			 
032a f1				pop af 
032b			 
032b c1				pop bc 
032c d1				pop de 
032d			 
032d c9			    ret 
032e			 
032e			if DEBUG_STORESE 
032e			 
032e			storageput:  
032e			 
032e			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
032e			 
032e 21 f5 f0			ld hl,scratch+2 
0331 cd 5e 12			call get_word_hl 
0334			 
0334				; stuff it here for the moment as it will be overwritten later anyway 
0334			 
0334 22 16 f4			ld (os_cur_ptr),hl	 
0337			 
0337			 
0337			; get pointer to start of string 
0337			 
0337 21 fa f0			ld hl, scratch+7 
033a			 
033a			; loop writing char of string to eeprom 
033a			 
033a 7e			.writestr:	ld a,(hl) 
033b			;		cp 0 
033b b7					or a 
033c 28 12				jr z, .wsdone		; done writing 
033e e5					push hl 
033f 2a 16 f4				ld hl,(os_cur_ptr) 
0342 cd 65 02				call se_writebyte 
0345			 
0345 2a 16 f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0348 23					inc hl 
0349 22 16 f4				ld (os_cur_ptr),hl 
034c			 
034c					; restore string pointer and get next char 
034c			 
034c e1					pop hl 
034d 23					inc hl 
034e 18 ea				jr .writestr 
0350			 
0350			 
0350			 
0350			.wsdone: 
0350			 
0350			 
0350			; when done load first page into a buffer  
0350			 
0350 21 00 80				ld hl,08000h		; start in ram 
0353 22 16 f4				ld (os_cur_ptr),hl 
0356 21 00 00				ld hl, 0		 ; start of page 
0359 22 1b f1				ld (scratch+40),hl	; hang on to it 
035c			 
035c 06 80				ld b, 128		; actually get more then one page 
035e c5			.wsload:	push bc 
035f 2a 1b f1				ld hl,(scratch+40) 
0362 e5					push hl 
0363 cd ff 02				call se_readbyte 
0366			 
0366					; a now as the byte 
0366			 
0366 2a 16 f4				ld hl,(os_cur_ptr) 
0369 77					ld (hl),a 
036a					; inc next buffer area 
036a 23					inc hl 
036b 22 16 f4				ld (os_cur_ptr),hl 
036e			 
036e					; get eeprom position, inc and save for next round 
036e e1					pop hl		 
036f 23					inc hl 
0370 22 1b f1				ld (scratch+40),hl 
0373 c1					pop bc 
0374 10 e8				djnz .wsload 
0376			 
0376			; set 'd' pointer to start of buffer 
0376			 
0376 21 00 80				ld hl,08000h 
0379 22 16 f4				ld (os_cur_ptr),hl 
037c			 
037c			 
037c c9			ret 
037d			 
037d			 
037d c9			storageread: ret 
037e			 
037e			 
037e			 
037e			 
037e			 
037e			 
037e			endif 
037e			 
037e			 
037e			 
# End of file firmware_seeprom.asm
037e			else  
037e			   ; create some stubs for the labels  
037e			se_readbyte: ret  
037e			se_writebyte: ret  
037e			storage_init: ret  
037e			  
037e			endif  
037e			  
037e			; use cf card for storage - throwing timeout errors. Hardware or software?????  
037e			;include "firmware_cf.asm"  
037e			  
037e			; load up high level storage hardward abstractions  
037e			include "firmware_storage.asm"  
037e			 
037e			; persisent storage hardware abstraction layer  
037e			 
037e			 
037e			 
037e			; Block 0 on storage is a config state 
037e			 
037e			 
037e			 
037e			; TODO add read phy block and write phy block functions 
037e			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
037e			 
037e			; Abstraction layer  
037e			 
037e			; Logocial block size is same size as physical size - using tape concept 
037e			 
037e			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
037e			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
037e			 
037e			 
037e			 
037e			; Filesystem layout (Logical layout) 
037e			; 
037e			; Block 0 - Bank config  
037e			; 
037e			;      Byte - 0 file id counter 
037e			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
037e			;      Byte - 3-20 zero terminated bank label 
037e			; 
037e			; Block 1 > File storage 
037e			; 
037e			;      Byte 0 file id    - block 0 file details 
037e			;      Byte 1 block id - block 0 is file  
037e			;            Byte 2-15 - File name 
037e			; 
037e			;       - to end of block data 
037e			; 
037e			 
037e			; Get ID for the file named in pointer held HL 
037e			; Returns ID in HL = 255 if no file found 
037e			 
037e			storage_getid: 
037e			 
037e 22 a5 f9			ld (store_tmp1), hl 
0381			 
0381				if DEBUG_STORESE 
0381					DMARK "SGI" 
0381 f5				push af  
0382 3a 96 03			ld a, (.dmark)  
0385 32 9d fd			ld (debug_mark),a  
0388 3a 97 03			ld a, (.dmark+1)  
038b 32 9e fd			ld (debug_mark+1),a  
038e 3a 98 03			ld a, (.dmark+2)  
0391 32 9f fd			ld (debug_mark+2),a  
0394 18 03			jr .pastdmark  
0396 ..			.dmark: db "SGI"  
0399 f1			.pastdmark: pop af  
039a			endm  
# End of macro DMARK
039a					CALLMONITOR 
039a cd aa fd			call debug_vector  
039d				endm  
# End of macro CALLMONITOR
039d				endif 
039d				; get block 0 and set counter for number of files to scan 
039d			 
039d cd 05 05			call storage_get_block_0 
03a0			 
03a0 3a ac f9			ld a, (store_page) 
03a3 47				ld b, a 
03a4			 
03a4				; get extent 0 of each file id 
03a4			 
03a4				if DEBUG_STORESE 
03a4					DMARK "SGc" 
03a4 f5				push af  
03a5 3a b9 03			ld a, (.dmark)  
03a8 32 9d fd			ld (debug_mark),a  
03ab 3a ba 03			ld a, (.dmark+1)  
03ae 32 9e fd			ld (debug_mark+1),a  
03b1 3a bb 03			ld a, (.dmark+2)  
03b4 32 9f fd			ld (debug_mark+2),a  
03b7 18 03			jr .pastdmark  
03b9 ..			.dmark: db "SGc"  
03bc f1			.pastdmark: pop af  
03bd			endm  
# End of macro DMARK
03bd					CALLMONITOR 
03bd cd aa fd			call debug_vector  
03c0				endm  
# End of macro CALLMONITOR
03c0				endif 
03c0 60			.getloop:	ld h, b 
03c1 2e 00				ld l, 0 
03c3 c5					push bc 
03c4			 
03c4 11 ac f9				ld de, store_page 
03c7				if DEBUG_STORESE 
03c7					DMARK "SGr" 
03c7 f5				push af  
03c8 3a dc 03			ld a, (.dmark)  
03cb 32 9d fd			ld (debug_mark),a  
03ce 3a dd 03			ld a, (.dmark+1)  
03d1 32 9e fd			ld (debug_mark+1),a  
03d4 3a de 03			ld a, (.dmark+2)  
03d7 32 9f fd			ld (debug_mark+2),a  
03da 18 03			jr .pastdmark  
03dc ..			.dmark: db "SGr"  
03df f1			.pastdmark: pop af  
03e0			endm  
# End of macro DMARK
03e0					CALLMONITOR 
03e0 cd aa fd			call debug_vector  
03e3				endm  
# End of macro CALLMONITOR
03e3				endif 
03e3 cd a7 09				call storage_read 
03e6 cd d5 0f				call ishlzero 
03e9 28 2d				jr z, .gap 
03eb					 
03eb					; have a file name read. Is it one we want. 
03eb			 
03eb 2a a5 f9				ld hl, (store_tmp1) 
03ee 11 af f9				ld de, store_page+3   ; file name 
03f1			 
03f1				if DEBUG_STORESE 
03f1					DMARK "SGc" 
03f1 f5				push af  
03f2 3a 06 04			ld a, (.dmark)  
03f5 32 9d fd			ld (debug_mark),a  
03f8 3a 07 04			ld a, (.dmark+1)  
03fb 32 9e fd			ld (debug_mark+1),a  
03fe 3a 08 04			ld a, (.dmark+2)  
0401 32 9f fd			ld (debug_mark+2),a  
0404 18 03			jr .pastdmark  
0406 ..			.dmark: db "SGc"  
0409 f1			.pastdmark: pop af  
040a			endm  
# End of macro DMARK
040a					CALLMONITOR 
040a cd aa fd			call debug_vector  
040d				endm  
# End of macro CALLMONITOR
040d				endif 
040d cd 3c 13				call strcmp 
0410 20 06				jr nz, .gap   ; not this one 
0412			 
0412 c1				        pop bc 
0413			 
0413 26 00				ld h, 0 
0415 68					ld l, b 
0416 18 22				jr .getdone 
0418						 
0418			 
0418			 
0418			 
0418			.gap: 
0418				if DEBUG_STORESE 
0418					DMARK "SGg" 
0418 f5				push af  
0419 3a 2d 04			ld a, (.dmark)  
041c 32 9d fd			ld (debug_mark),a  
041f 3a 2e 04			ld a, (.dmark+1)  
0422 32 9e fd			ld (debug_mark+1),a  
0425 3a 2f 04			ld a, (.dmark+2)  
0428 32 9f fd			ld (debug_mark+2),a  
042b 18 03			jr .pastdmark  
042d ..			.dmark: db "SGg"  
0430 f1			.pastdmark: pop af  
0431			endm  
# End of macro DMARK
0431					CALLMONITOR 
0431 cd aa fd			call debug_vector  
0434				endm  
# End of macro CALLMONITOR
0434				endif 
0434			 
0434 c1					pop bc 
0435 10 89				djnz .getloop 
0437 21 ff 00				ld hl, 255 
043a			.getdone: 
043a			 
043a				if DEBUG_STORESE 
043a					DMARK "SGe" 
043a f5				push af  
043b 3a 4f 04			ld a, (.dmark)  
043e 32 9d fd			ld (debug_mark),a  
0441 3a 50 04			ld a, (.dmark+1)  
0444 32 9e fd			ld (debug_mark+1),a  
0447 3a 51 04			ld a, (.dmark+2)  
044a 32 9f fd			ld (debug_mark+2),a  
044d 18 03			jr .pastdmark  
044f ..			.dmark: db "SGe"  
0452 f1			.pastdmark: pop af  
0453			endm  
# End of macro DMARK
0453					CALLMONITOR 
0453 cd aa fd			call debug_vector  
0456				endm  
# End of macro CALLMONITOR
0456				endif 
0456			 
0456 c9				ret 
0457			 
0457			 
0457			 
0457			 
0457			 
0457			 
0457			 
0457			 
0457			; Read Block 
0457			; ---------- 
0457			; 
0457			; With current bank 
0457			;  
0457			; Get block number to read 
0457			; Load physical blocks starting at start block into buffer 
0457			 
0457			; de points to buffer to use 
0457			; hl holds logical block number  
0457			 
0457			storage_read_block: 
0457			 
0457				; TODO bank selection 
0457			 
0457				; for each of the physical blocks read it into the buffer 
0457 06 40			ld b, STORE_BLOCK_PHY 
0459			 
0459				if DEBUG_STORESE 
0459 d5					push de 
045a				endif 
045a				 
045a			.rl1:    
045a			 
045a				; read physical block at hl into de 
045a			        ; increment hl and de to next read position on exit 
045a			 
045a e5				push hl 
045b d5				push de	 
045c c5				push bc 
045d			;	if DEBUG_STORESE 
045d			;		push af 
045d			;		ld a, 'R' 
045d			;		ld (debug_mark),a 
045d			;		pop af 
045d			;		CALLMONITOR 
045d			;	endif 
045d cd ff 02			call se_readbyte 
0460			;	if DEBUG_STORESE 
0460			;		ld a,(spi_portbyte) 
0460			;		ld l, a 
0460			;		push af 
0460			;		ld a, '1' 
0460			;		ld (debug_mark),a 
0460			;		pop af 
0460			;		CALLMONITOR 
0460			;	endif 
0460 c1				pop bc 
0461 d1				pop de 
0462 e1				pop hl 
0463 12				ld (de),a 
0464 23				inc hl 
0465 13				inc de 
0466			 
0466			;	if DEBUG_STORESE 
0466			;		push af 
0466			;		ld a, 'r' 
0466			;		ld (debug_mark),a 
0466			;		pop af 
0466			;		CALLMONITOR 
0466			;	endif 
0466			 
0466 10 f2			djnz .rl1 
0468			 
0468				if DEBUG_STORESE 
0468					DMARK "SRB" 
0468 f5				push af  
0469 3a 7d 04			ld a, (.dmark)  
046c 32 9d fd			ld (debug_mark),a  
046f 3a 7e 04			ld a, (.dmark+1)  
0472 32 9e fd			ld (debug_mark+1),a  
0475 3a 7f 04			ld a, (.dmark+2)  
0478 32 9f fd			ld (debug_mark+2),a  
047b 18 03			jr .pastdmark  
047d ..			.dmark: db "SRB"  
0480 f1			.pastdmark: pop af  
0481			endm  
# End of macro DMARK
0481 d1					pop de 
0482			; 
0482			;		push af 
0482			;		ld a, 'R' 
0482			;		ld (debug_mark),a 
0482			;		pop af 
0482					CALLMONITOR 
0482 cd aa fd			call debug_vector  
0485				endm  
# End of macro CALLMONITOR
0485				endif 
0485 c9				ret	 
0486				 
0486			 
0486			; File Size 
0486			; --------- 
0486			; 
0486			;   hl file id 
0486			; 
0486			;  returns in hl the number of blocks 
0486			 
0486			storage_file_size: 
0486 5d				ld e, l 
0487 16 00			ld d, 0 
0489 21 40 00			ld hl, STORE_BLOCK_PHY 
048c					if DEBUG_FORTH_WORDS 
048c						DMARK "SIZ" 
048c f5				push af  
048d 3a a1 04			ld a, (.dmark)  
0490 32 9d fd			ld (debug_mark),a  
0493 3a a2 04			ld a, (.dmark+1)  
0496 32 9e fd			ld (debug_mark+1),a  
0499 3a a3 04			ld a, (.dmark+2)  
049c 32 9f fd			ld (debug_mark+2),a  
049f 18 03			jr .pastdmark  
04a1 ..			.dmark: db "SIZ"  
04a4 f1			.pastdmark: pop af  
04a5			endm  
# End of macro DMARK
04a5						CALLMONITOR 
04a5 cd aa fd			call debug_vector  
04a8				endm  
# End of macro CALLMONITOR
04a8					endif 
04a8 cd 83 07			call storage_findnextid 
04ab			 
04ab cd d5 0f			call ishlzero 
04ae			;	ld a, l 
04ae			;	add h 
04ae			;	cp 0 
04ae c8				ret z			; block not found so EOF 
04af			 
04af 11 ac f9			ld de, store_page 
04b2 cd 57 04			call storage_read_block 
04b5			 
04b5 3a ae f9			ld a, (store_page+2)	 ; get extent count 
04b8 6f				ld l, a 
04b9 26 00			ld h, 0 
04bb c9			 	ret 
04bc			 
04bc			 
04bc			; Write Block 
04bc			; ----------- 
04bc			; 
04bc			; With current bank 
04bc			;  
04bc			; Get block number to write 
04bc			; Write physical blocks starting at start block from buffer 
04bc			  
04bc			storage_write_block: 
04bc				; TODO bank selection 
04bc			 
04bc				; for each of the physical blocks read it into the buffer 
04bc 06 40			ld b, STORE_BLOCK_PHY 
04be			 
04be				if DEBUG_STORESE 
04be					DMARK "SWB" 
04be f5				push af  
04bf 3a d3 04			ld a, (.dmark)  
04c2 32 9d fd			ld (debug_mark),a  
04c5 3a d4 04			ld a, (.dmark+1)  
04c8 32 9e fd			ld (debug_mark+1),a  
04cb 3a d5 04			ld a, (.dmark+2)  
04ce 32 9f fd			ld (debug_mark+2),a  
04d1 18 03			jr .pastdmark  
04d3 ..			.dmark: db "SWB"  
04d6 f1			.pastdmark: pop af  
04d7			endm  
# End of macro DMARK
04d7			 
04d7					;push af 
04d7					;ld a, 'W' 
04d7					;ld (debug_mark),a 
04d7					;pop af 
04d7					CALLMONITOR 
04d7 cd aa fd			call debug_vector  
04da				endm  
# End of macro CALLMONITOR
04da				endif 
04da			 
04da			; might not be working 
04da			;	call se_writepage 
04da			 
04da			;	ret 
04da			; 
04da			 
04da			 
04da			 
04da			.wl1:    
04da			 
04da				; read physical block at hl into de 
04da			        ; increment hl and de to next read position on exit 
04da			 
04da e5				push hl 
04db d5				push de	 
04dc c5				push bc 
04dd 1a				ld a,(de) 
04de				;if DEBUG_STORESE 
04de			;		push af 
04de			;		ld a, 'W' 
04de			;		ld (debug_mark),a 
04de			;		pop af 
04de			;		CALLMONITOR 
04de			;	endif 
04de cd 65 02			call se_writebyte 
04e1			;	call delay250ms 
04e1			;	nop 
04e1			;	nop 
04e1			;	nop 
04e1			;	if DEBUG_STORESE 
04e1			;		push af 
04e1			;		ld a, 'w' 
04e1			;		ld (debug_mark),a 
04e1			;		pop af 
04e1			;		CALLMONITOR 
04e1			;	endif 
04e1 c1				pop bc 
04e2 d1				pop de 
04e3 e1				pop hl 
04e4 23				inc hl 
04e5 13				inc de 
04e6			 
04e6			 
04e6 10 f2			djnz .wl1 
04e8			 
04e8				if DEBUG_STORESE 
04e8					DMARK "SW2" 
04e8 f5				push af  
04e9 3a fd 04			ld a, (.dmark)  
04ec 32 9d fd			ld (debug_mark),a  
04ef 3a fe 04			ld a, (.dmark+1)  
04f2 32 9e fd			ld (debug_mark+1),a  
04f5 3a ff 04			ld a, (.dmark+2)  
04f8 32 9f fd			ld (debug_mark+2),a  
04fb 18 03			jr .pastdmark  
04fd ..			.dmark: db "SW2"  
0500 f1			.pastdmark: pop af  
0501			endm  
# End of macro DMARK
0501			 
0501					;push af 
0501					;ld a, 'W' 
0501					;ld (debug_mark),a 
0501					;pop af 
0501					CALLMONITOR 
0501 cd aa fd			call debug_vector  
0504				endm  
# End of macro CALLMONITOR
0504				endif 
0504 c9				ret	 
0505			 
0505			; Init bank 
0505			; --------- 
0505			; 
0505			; With current bank 
0505			; 
0505			; Setup block 0 config 
0505			;     Set 0 file id counter 
0505			;     Set formatted byte pattern 
0505			;     Zero out bank label 
0505			;      
0505			; For every logical block write 0-1 byte as null 
0505			 
0505			storage_get_block_0: 
0505			 
0505				; TODO check presence 
0505			 
0505				; get block 0 config 
0505			 
0505 21 00 00			ld hl, 0 
0508 11 ac f9			ld de, store_page 
050b cd 57 04			call storage_read_block 
050e			 
050e				if DEBUG_STORESE 
050e					DMARK "SB0" 
050e f5				push af  
050f 3a 23 05			ld a, (.dmark)  
0512 32 9d fd			ld (debug_mark),a  
0515 3a 24 05			ld a, (.dmark+1)  
0518 32 9e fd			ld (debug_mark+1),a  
051b 3a 25 05			ld a, (.dmark+2)  
051e 32 9f fd			ld (debug_mark+2),a  
0521 18 03			jr .pastdmark  
0523 ..			.dmark: db "SB0"  
0526 f1			.pastdmark: pop af  
0527			endm  
# End of macro DMARK
0527 11 ac f9				ld de, store_page 
052a			;		push af 
052a			;		ld a, 'i' 
052a			;		ld (debug_mark),a 
052a			;		pop af 
052a					CALLMONITOR 
052a cd aa fd			call debug_vector  
052d				endm  
# End of macro CALLMONITOR
052d				endif 
052d			 
052d				; is this area formatted? 
052d			 
052d			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
052d 2a ad f9			ld hl, (store_page+1) 
0530 3e 80			ld a,0x80 
0532 bd				cp l 
0533 20 22			jr nz, .ininotformatted 
0535				; do a double check 
0535 3e 27			ld a, 0x27 
0537 bc				cp h 
0538 20 1d			jr nz, .ininotformatted 
053a			 
053a				; formatted then 
053a			 
053a				if DEBUG_STORESE 
053a					DMARK "SB1" 
053a f5				push af  
053b 3a 4f 05			ld a, (.dmark)  
053e 32 9d fd			ld (debug_mark),a  
0541 3a 50 05			ld a, (.dmark+1)  
0544 32 9e fd			ld (debug_mark+1),a  
0547 3a 51 05			ld a, (.dmark+2)  
054a 32 9f fd			ld (debug_mark+2),a  
054d 18 03			jr .pastdmark  
054f ..			.dmark: db "SB1"  
0552 f1			.pastdmark: pop af  
0553			endm  
# End of macro DMARK
0553					;push af 
0553					;ld a, 'I' 
0553					;ld (debug_mark),a 
0553					;pop af 
0553					CALLMONITOR 
0553 cd aa fd			call debug_vector  
0556				endm  
# End of macro CALLMONITOR
0556				endif 
0556 c9				ret 
0557			 
0557			.ininotformatted: 
0557				; bank not formatted so poke various bits to make sure 
0557			 
0557				if DEBUG_STORESE 
0557					DMARK "SB2" 
0557 f5				push af  
0558 3a 6c 05			ld a, (.dmark)  
055b 32 9d fd			ld (debug_mark),a  
055e 3a 6d 05			ld a, (.dmark+1)  
0561 32 9e fd			ld (debug_mark+1),a  
0564 3a 6e 05			ld a, (.dmark+2)  
0567 32 9f fd			ld (debug_mark+2),a  
056a 18 03			jr .pastdmark  
056c ..			.dmark: db "SB2"  
056f f1			.pastdmark: pop af  
0570			endm  
# End of macro DMARK
0570					;push af 
0570					;ld a, 'f' 
0570					;ld (debug_mark),a 
0570					;pop af 
0570					CALLMONITOR 
0570 cd aa fd			call debug_vector  
0573				endm  
# End of macro CALLMONITOR
0573				endif 
0573			 
0573 cd 84 0c			call storage_clear_page 
0576			 
0576 21 ac f9			ld hl, store_page 
0579			;	ld a, 0 
0579				 
0579 36 00			ld (hl),0   ; reset file counter 
057b			 
057b 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
057e 22 ad f9		 	ld (store_page+1), hl	 
0581			 
0581				; set default label 
0581			 
0581 21 1a 06			ld hl, .defaultbanklabl 
0584 11 af f9		 	ld de, store_page+3 
0587 01 0f 00			ld bc, 15 
058a ed b0			ldir 
058c			 
058c				; Append the current bank id 
058c 21 b8 f9			ld hl, store_page+3+9 
058f 3a 91 f9			ld a, (spi_device_id) 
0592 77				ld (hl), a 
0593			 
0593				; save default page 0 
0593			 
0593 21 00 00			ld hl, 0 
0596 11 ac f9			ld de, store_page 
0599				if DEBUG_STORESE 
0599					DMARK "SB3" 
0599 f5				push af  
059a 3a ae 05			ld a, (.dmark)  
059d 32 9d fd			ld (debug_mark),a  
05a0 3a af 05			ld a, (.dmark+1)  
05a3 32 9e fd			ld (debug_mark+1),a  
05a6 3a b0 05			ld a, (.dmark+2)  
05a9 32 9f fd			ld (debug_mark+2),a  
05ac 18 03			jr .pastdmark  
05ae ..			.dmark: db "SB3"  
05b1 f1			.pastdmark: pop af  
05b2			endm  
# End of macro DMARK
05b2			;		push af 
05b2			;		ld a, 'F' 
05b2			;		ld (debug_mark),a 
05b2			;		pop af 
05b2					CALLMONITOR 
05b2 cd aa fd			call debug_vector  
05b5				endm  
# End of macro CALLMONITOR
05b5				endif 
05b5 cd bc 04			call storage_write_block 
05b8				if DEBUG_STORESE 
05b8					DMARK "SB4" 
05b8 f5				push af  
05b9 3a cd 05			ld a, (.dmark)  
05bc 32 9d fd			ld (debug_mark),a  
05bf 3a ce 05			ld a, (.dmark+1)  
05c2 32 9e fd			ld (debug_mark+1),a  
05c5 3a cf 05			ld a, (.dmark+2)  
05c8 32 9f fd			ld (debug_mark+2),a  
05cb 18 03			jr .pastdmark  
05cd ..			.dmark: db "SB4"  
05d0 f1			.pastdmark: pop af  
05d1			endm  
# End of macro DMARK
05d1			;		push af 
05d1			;		ld a, '>' 
05d1			;		ld (debug_mark),a 
05d1			;		pop af 
05d1					CALLMONITOR 
05d1 cd aa fd			call debug_vector  
05d4				endm  
# End of macro CALLMONITOR
05d4				endif 
05d4			 
05d4			;	nop 
05d4			;	nop 
05d4			;	nop 
05d4			 
05d4				; now set 0 in every page to mark as a free block 
05d4			 
05d4 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05d6 21 40 00			ld hl, STORE_BLOCK_PHY 
05d9			 
05d9 3e 00		.setmark1:   	ld a,0 
05db e5					push hl 
05dc c5					push bc 
05dd cd 65 02				call se_writebyte 
05e0 3e 0a			ld a, 10 
05e2 cd a5 0c			call aDelayInMS 
05e5 23				inc hl 
05e6 cd 65 02				call se_writebyte 
05e9 3e 0a			ld a, 10 
05eb cd a5 0c			call aDelayInMS 
05ee 2b				dec hl 
05ef c1					pop bc 
05f0 e1					pop hl 
05f1 3e 40				ld a, STORE_BLOCK_PHY 
05f3 cd ac 0f				call addatohl 
05f6 10 e1				djnz .setmark1 
05f8			 
05f8 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05fa 3e 00		.setmark2:   	ld a,0 
05fc e5					push hl 
05fd c5					push bc 
05fe cd 65 02				call se_writebyte 
0601 3e 0a			ld a, 10 
0603 cd a5 0c			call aDelayInMS 
0606 23				inc hl 
0607 cd 65 02				call se_writebyte 
060a 3e 0a			ld a, 10 
060c cd a5 0c			call aDelayInMS 
060f 2b				dec hl 
0610 c1					pop bc 
0611 e1					pop hl 
0612 3e 40				ld a, STORE_BLOCK_PHY 
0614 cd ac 0f				call addatohl 
0617 10 e1				djnz .setmark2 
0619			 
0619					 
0619			 
0619			 
0619 c9				ret 
061a			 
061a			 
061a			 
061a			 
061a .. 00		.defaultbanklabl:   db "BankLabel_",0 
0625			 
0625			 
0625			 
0625			; Label Bank 
0625			; ---------- 
0625			; 
0625			; With current bank 
0625			; Read block 0 
0625			; Set label 
0625			; Write block 0 
0625			 
0625			; label str pointer in hl 
0625			 
0625			storage_label:     
0625			 
0625				if DEBUG_STORESE 
0625					DMARK "LBL" 
0625 f5				push af  
0626 3a 3a 06			ld a, (.dmark)  
0629 32 9d fd			ld (debug_mark),a  
062c 3a 3b 06			ld a, (.dmark+1)  
062f 32 9e fd			ld (debug_mark+1),a  
0632 3a 3c 06			ld a, (.dmark+2)  
0635 32 9f fd			ld (debug_mark+2),a  
0638 18 03			jr .pastdmark  
063a ..			.dmark: db "LBL"  
063d f1			.pastdmark: pop af  
063e			endm  
# End of macro DMARK
063e					CALLMONITOR 
063e cd aa fd			call debug_vector  
0641				endm  
# End of macro CALLMONITOR
0641				endif 
0641			 
0641 e5				push hl 
0642			 
0642 cd 05 05			call storage_get_block_0 
0645			 
0645				; set default label 
0645			 
0645 e1				pop hl 
0646			 
0646 11 af f9		 	ld de, store_page+3 
0649 01 0f 00			ld bc, 15 
064c				if DEBUG_STORESE 
064c					DMARK "LB3" 
064c f5				push af  
064d 3a 61 06			ld a, (.dmark)  
0650 32 9d fd			ld (debug_mark),a  
0653 3a 62 06			ld a, (.dmark+1)  
0656 32 9e fd			ld (debug_mark+1),a  
0659 3a 63 06			ld a, (.dmark+2)  
065c 32 9f fd			ld (debug_mark+2),a  
065f 18 03			jr .pastdmark  
0661 ..			.dmark: db "LB3"  
0664 f1			.pastdmark: pop af  
0665			endm  
# End of macro DMARK
0665					CALLMONITOR 
0665 cd aa fd			call debug_vector  
0668				endm  
# End of macro CALLMONITOR
0668				endif 
0668 ed b0			ldir 
066a				; save default page 0 
066a			 
066a 21 00 00			ld hl, 0 
066d 11 ac f9			ld de, store_page 
0670				if DEBUG_STORESE 
0670					DMARK "LBW" 
0670 f5				push af  
0671 3a 85 06			ld a, (.dmark)  
0674 32 9d fd			ld (debug_mark),a  
0677 3a 86 06			ld a, (.dmark+1)  
067a 32 9e fd			ld (debug_mark+1),a  
067d 3a 87 06			ld a, (.dmark+2)  
0680 32 9f fd			ld (debug_mark+2),a  
0683 18 03			jr .pastdmark  
0685 ..			.dmark: db "LBW"  
0688 f1			.pastdmark: pop af  
0689			endm  
# End of macro DMARK
0689					CALLMONITOR 
0689 cd aa fd			call debug_vector  
068c				endm  
# End of macro CALLMONITOR
068c				endif 
068c cd bc 04			call storage_write_block 
068f			 
068f c9				ret 
0690			 
0690			 
0690			 
0690			; Read Block 0 - Config 
0690			; --------------------- 
0690			; 
0690			; With current bank 
0690			; Call presence test 
0690			;    If not present format/init bank  
0690			; Read block 0  
0690			;  
0690			 
0690			 
0690			; Dir 
0690			; --- 
0690			; 
0690			; With current bank 
0690			; Load Block 0 Config 
0690			; Get max file id number 
0690			; For each logical block 
0690			;    Read block read byte 2 
0690			;      if first block of file 
0690			;         Display file name 
0690			;         Display type flags for file 
0690			;        
0690			 
0690			; moving to words as this requires stack control 
0690			 
0690			 
0690			; Delete File 
0690			; ----------- 
0690			; 
0690			; With current bank 
0690			; 
0690			; Load Block 0 Config 
0690			; Get max file id number 
0690			; For each logical block 
0690			;    Read block file id 
0690			;      If first block of file and dont have file id 
0690			;         if file to delete 
0690			;         Save file id 
0690			;         Null file id 
0690			;         Write this block back 
0690			;      If file id is one saved 
0690			;         Null file id 
0690			;         Write this block back 
0690			 
0690			 
0690			.se_done: 
0690 e1				pop hl 
0691 c9				ret 
0692			 
0692			storage_erase: 
0692			 
0692				; hl contains the file id 
0692			 
0692 5d				ld e, l 
0693 16 00			ld d, 0 
0695 21 40 00			ld hl, STORE_BLOCK_PHY 
0698					if DEBUG_FORTH_WORDS 
0698						DMARK "ERA" 
0698 f5				push af  
0699 3a ad 06			ld a, (.dmark)  
069c 32 9d fd			ld (debug_mark),a  
069f 3a ae 06			ld a, (.dmark+1)  
06a2 32 9e fd			ld (debug_mark+1),a  
06a5 3a af 06			ld a, (.dmark+2)  
06a8 32 9f fd			ld (debug_mark+2),a  
06ab 18 03			jr .pastdmark  
06ad ..			.dmark: db "ERA"  
06b0 f1			.pastdmark: pop af  
06b1			endm  
# End of macro DMARK
06b1						CALLMONITOR 
06b1 cd aa fd			call debug_vector  
06b4				endm  
# End of macro CALLMONITOR
06b4					endif 
06b4 cd 83 07			call storage_findnextid 
06b7 cd d5 0f			call ishlzero 
06ba c8				ret z 
06bb			 
06bb e5				push hl 
06bc			 
06bc				; TODO check file not found 
06bc			 
06bc 11 ac f9			ld de, store_page 
06bf cd 57 04			call storage_read_block 
06c2			 
06c2 cd d5 0f			call ishlzero 
06c5 ca 90 06			jp z,.se_done 
06c8			 
06c8					if DEBUG_FORTH_WORDS 
06c8						DMARK "ER1" 
06c8 f5				push af  
06c9 3a dd 06			ld a, (.dmark)  
06cc 32 9d fd			ld (debug_mark),a  
06cf 3a de 06			ld a, (.dmark+1)  
06d2 32 9e fd			ld (debug_mark+1),a  
06d5 3a df 06			ld a, (.dmark+2)  
06d8 32 9f fd			ld (debug_mark+2),a  
06db 18 03			jr .pastdmark  
06dd ..			.dmark: db "ER1"  
06e0 f1			.pastdmark: pop af  
06e1			endm  
# End of macro DMARK
06e1						CALLMONITOR 
06e1 cd aa fd			call debug_vector  
06e4				endm  
# End of macro CALLMONITOR
06e4					endif 
06e4 3a ac f9			ld a, (store_page)	; get file id 
06e7 32 a0 f9			ld (store_tmpid), a 
06ea			 
06ea 3a ae f9			ld a, (store_page+2)    ; get count of extends 
06ed 32 9f f9			ld (store_tmpext), a 
06f0			 
06f0				; wipe file header 
06f0			 
06f0 e1				pop hl 
06f1 3e 00			ld a, 0 
06f3 32 ac f9			ld (store_page), a 
06f6 32 ad f9			ld (store_page+1),a 
06f9 11 ac f9			ld de, store_page 
06fc					if DEBUG_FORTH_WORDS 
06fc						DMARK "ER2" 
06fc f5				push af  
06fd 3a 11 07			ld a, (.dmark)  
0700 32 9d fd			ld (debug_mark),a  
0703 3a 12 07			ld a, (.dmark+1)  
0706 32 9e fd			ld (debug_mark+1),a  
0709 3a 13 07			ld a, (.dmark+2)  
070c 32 9f fd			ld (debug_mark+2),a  
070f 18 03			jr .pastdmark  
0711 ..			.dmark: db "ER2"  
0714 f1			.pastdmark: pop af  
0715			endm  
# End of macro DMARK
0715						CALLMONITOR 
0715 cd aa fd			call debug_vector  
0718				endm  
# End of macro CALLMONITOR
0718					endif 
0718 cd bc 04			call storage_write_block 
071b			 
071b			 
071b				; wipe file extents 
071b			 
071b 3a 9f f9			ld a, (store_tmpext) 
071e 47				ld b, a 
071f			 
071f			.eraext:	  
071f c5				push bc 
0720			 
0720 21 40 00			ld hl, STORE_BLOCK_PHY 
0723 3a a0 f9			ld a,(store_tmpid) 
0726 5f				ld e, a 
0727 50				ld d, b	 
0728					if DEBUG_FORTH_WORDS 
0728						DMARK "ER3" 
0728 f5				push af  
0729 3a 3d 07			ld a, (.dmark)  
072c 32 9d fd			ld (debug_mark),a  
072f 3a 3e 07			ld a, (.dmark+1)  
0732 32 9e fd			ld (debug_mark+1),a  
0735 3a 3f 07			ld a, (.dmark+2)  
0738 32 9f fd			ld (debug_mark+2),a  
073b 18 03			jr .pastdmark  
073d ..			.dmark: db "ER3"  
0740 f1			.pastdmark: pop af  
0741			endm  
# End of macro DMARK
0741						CALLMONITOR 
0741 cd aa fd			call debug_vector  
0744				endm  
# End of macro CALLMONITOR
0744					endif 
0744 cd 83 07			call storage_findnextid 
0747 cd d5 0f			call ishlzero 
074a ca 90 06			jp z,.se_done 
074d			 
074d e5				push hl 
074e 11 ac f9			ld de, store_page 
0751 cd 57 04			call storage_read_block 
0754			 
0754				; free block	 
0754			 
0754 3e 00			ld a, 0 
0756 32 ac f9			ld (store_page), a 
0759 32 ad f9			ld (store_page+1),a 
075c 11 ac f9			ld de, store_page 
075f e1				pop hl 
0760					if DEBUG_FORTH_WORDS 
0760						DMARK "ER4" 
0760 f5				push af  
0761 3a 75 07			ld a, (.dmark)  
0764 32 9d fd			ld (debug_mark),a  
0767 3a 76 07			ld a, (.dmark+1)  
076a 32 9e fd			ld (debug_mark+1),a  
076d 3a 77 07			ld a, (.dmark+2)  
0770 32 9f fd			ld (debug_mark+2),a  
0773 18 03			jr .pastdmark  
0775 ..			.dmark: db "ER4"  
0778 f1			.pastdmark: pop af  
0779			endm  
# End of macro DMARK
0779						CALLMONITOR 
0779 cd aa fd			call debug_vector  
077c				endm  
# End of macro CALLMONITOR
077c					endif 
077c cd bc 04			call storage_write_block 
077f			 
077f c1				pop bc 
0780 10 9d			djnz .eraext 
0782			 
0782 c9				ret 
0783			 
0783			 
0783			; Find Free Block 
0783			; --------------- 
0783			; 
0783			; With current bank 
0783			;  
0783			; From given starting logical block 
0783			;    Read block  
0783			;    If no file id 
0783			;         Return block id 
0783			 
0783			 
0783			; hl starting page number 
0783			; hl contains free page number or zero if no pages free 
0783			; e contains the file id to locate 
0783			; d contains the block number 
0783			 
0783			; TODO change to find file id and use zero for free block 
0783			 
0783			storage_findnextid: 
0783			 
0783				; now locate first 0 page to mark as a free block 
0783			 
0783 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0785			;	ld hl, STORE_BLOCK_PHY 
0785			 
0785					if DEBUG_FORTH_WORDS 
0785					DMARK "FNI" 
0785 f5				push af  
0786 3a 9a 07			ld a, (.dmark)  
0789 32 9d fd			ld (debug_mark),a  
078c 3a 9b 07			ld a, (.dmark+1)  
078f 32 9e fd			ld (debug_mark+1),a  
0792 3a 9c 07			ld a, (.dmark+2)  
0795 32 9f fd			ld (debug_mark+2),a  
0798 18 03			jr .pastdmark  
079a ..			.dmark: db "FNI"  
079d f1			.pastdmark: pop af  
079e			endm  
# End of macro DMARK
079e						CALLMONITOR 
079e cd aa fd			call debug_vector  
07a1				endm  
# End of macro CALLMONITOR
07a1					endif 
07a1			.ff1:   	 
07a1 e5					push hl 
07a2 c5					push bc 
07a3 d5					push de 
07a4 cd ff 02				call se_readbyte 
07a7 5f					ld e,a 
07a8 23					inc hl 
07a9 cd ff 02				call se_readbyte 
07ac 57					ld d, a 
07ad e1					pop hl 
07ae e5					push hl 
07af cd ca 0f				call cmp16 
07b2 28 49				jr z, .fffound 
07b4			 
07b4 d1					pop de 
07b5 c1					pop bc 
07b6 e1					pop hl 
07b7			 
07b7					; is found? 
07b7					;cp e 
07b7					;ret z 
07b7			 
07b7 3e 40				ld a, STORE_BLOCK_PHY 
07b9 cd ac 0f				call addatohl 
07bc 10 e3				djnz .ff1 
07be			 
07be 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07c0			.ff2:   	 
07c0			 
07c0 e5					push hl 
07c1 c5					push bc 
07c2 d5					push de 
07c3 cd ff 02				call se_readbyte 
07c6 5f					ld e,a 
07c7 23					inc hl 
07c8 cd ff 02				call se_readbyte 
07cb 57					ld d, a 
07cc			 
07cc e1					pop hl 
07cd e5					push hl 
07ce cd ca 0f				call cmp16 
07d1 28 2a				jr z, .fffound 
07d3			 
07d3 d1					pop de 
07d4 c1					pop bc 
07d5 e1					pop hl 
07d6					; is found? 
07d6					;cp e 
07d6					;ret z 
07d6			 
07d6 3e 40				ld a, STORE_BLOCK_PHY 
07d8 cd ac 0f				call addatohl 
07db 10 e3				djnz .ff2 
07dd			 
07dd			 
07dd					if DEBUG_FORTH_WORDS 
07dd					DMARK "FN-" 
07dd f5				push af  
07de 3a f2 07			ld a, (.dmark)  
07e1 32 9d fd			ld (debug_mark),a  
07e4 3a f3 07			ld a, (.dmark+1)  
07e7 32 9e fd			ld (debug_mark+1),a  
07ea 3a f4 07			ld a, (.dmark+2)  
07ed 32 9f fd			ld (debug_mark+2),a  
07f0 18 03			jr .pastdmark  
07f2 ..			.dmark: db "FN-"  
07f5 f1			.pastdmark: pop af  
07f6			endm  
# End of macro DMARK
07f6					;	push af 
07f6					;	ld a, 'n' 
07f6					;	ld (debug_mark),a 
07f6					;	pop af 
07f6						CALLMONITOR 
07f6 cd aa fd			call debug_vector  
07f9				endm  
# End of macro CALLMONITOR
07f9					endif 
07f9				; no free marks! 
07f9 21 00 00				ld hl, 0 
07fc c9				ret 
07fd			.fffound: 
07fd				 
07fd			 
07fd d1					pop de 
07fe c1					pop bc 
07ff e1					pop hl 
0800					if DEBUG_FORTH_WORDS 
0800					DMARK "FNF" 
0800 f5				push af  
0801 3a 15 08			ld a, (.dmark)  
0804 32 9d fd			ld (debug_mark),a  
0807 3a 16 08			ld a, (.dmark+1)  
080a 32 9e fd			ld (debug_mark+1),a  
080d 3a 17 08			ld a, (.dmark+2)  
0810 32 9f fd			ld (debug_mark+2),a  
0813 18 03			jr .pastdmark  
0815 ..			.dmark: db "FNF"  
0818 f1			.pastdmark: pop af  
0819			endm  
# End of macro DMARK
0819					;	push af 
0819					;	ld a, 'n' 
0819					;	ld (debug_mark),a 
0819					;	pop af 
0819						CALLMONITOR 
0819 cd aa fd			call debug_vector  
081c				endm  
# End of macro CALLMONITOR
081c					endif 
081c c9				ret 
081d			 
081d			 
081d			 
081d			; Free Space 
081d			; ---------- 
081d			; 
081d			; With current bank 
081d			; 
081d			; Set block count to zero 
081d			; Starting with first logical block 
081d			;      Find free block  
081d			;      If block id given, increment block count 
081d			; 
081d			;  
081d			 
081d			 
081d			; hl contains count of free blocks 
081d			 
081d			storage_freeblocks: 
081d			 
081d				; now locate first 0 page to mark as a free block 
081d			 
081d 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
081f 21 40 00			ld hl, STORE_BLOCK_PHY 
0822 11 00 00			ld de, 0 
0825			 
0825			.fb1:   	 
0825 e5					push hl 
0826 c5					push bc 
0827 d5					push de 
0828 cd ff 02				call se_readbyte 
082b d1					pop de 
082c c1					pop bc 
082d e1					pop hl 
082e			 
082e					; is free? 
082e			;		cp 0 
082e b7					or a 
082f 20 01				jr nz, .ff1cont 
0831 13					inc de 
0832			 
0832			.ff1cont: 
0832			 
0832			 
0832 3e 40				ld a, STORE_BLOCK_PHY 
0834 cd ac 0f				call addatohl 
0837 10 ec				djnz .fb1 
0839			 
0839 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
083b			.fb2:   	 
083b e5					push hl 
083c c5					push bc 
083d d5					push de 
083e cd ff 02				call se_readbyte 
0841 d1					pop de 
0842 c1					pop bc 
0843 e1					pop hl 
0844			 
0844					; is free? 
0844			;		cp 0 
0844 b7					or a 
0845 20 01				jr nz, .ff2cont 
0847 13					inc de 
0848			 
0848			.ff2cont: 
0848			 
0848 3e 40				ld a, STORE_BLOCK_PHY 
084a cd ac 0f				call addatohl 
084d 10 ec				djnz .fb2 
084f			 
084f eb				ex de, hl 
0850 c9				ret 
0851			 
0851			; Get File ID 
0851			; ----------- 
0851			; 
0851			; With current bank 
0851			;  
0851			; Load Block 0 Config 
0851			; Get max file id number 
0851			; For each logical block 
0851			;    Read block file id 
0851			;      If first block of file and dont have file id 
0851			;         if file get id and exit 
0851			 
0851			 
0851			 
0851			 
0851			; Create File 
0851			; ----------- 
0851			; 
0851			; With current bank  
0851			; Load Block 0 Config 
0851			; Get max file id number 
0851			; Increment file id number 
0851			; Save Config 
0851			; Find free block 
0851			; Set buffer with file name and file id 
0851			; Write buffer to free block  
0851			 
0851			 
0851			; hl point to file name 
0851			; hl returns file id 
0851			 
0851			; file format: 
0851			; byte 0 - file id 
0851			; byte 1 - extent number 
0851			; byte 2-> data 
0851			 
0851			; format for extent number 0: 
0851			; 
0851			; byte 0 - file id 
0851			; byte 1 - extent 0 
0851			; byte 2 - extent count 
0851			; byte 3 -> file name and meta data 
0851			 
0851			 
0851			storage_create: 
0851				if DEBUG_STORESE 
0851					DMARK "SCR" 
0851 f5				push af  
0852 3a 66 08			ld a, (.dmark)  
0855 32 9d fd			ld (debug_mark),a  
0858 3a 67 08			ld a, (.dmark+1)  
085b 32 9e fd			ld (debug_mark+1),a  
085e 3a 68 08			ld a, (.dmark+2)  
0861 32 9f fd			ld (debug_mark+2),a  
0864 18 03			jr .pastdmark  
0866 ..			.dmark: db "SCR"  
0869 f1			.pastdmark: pop af  
086a			endm  
# End of macro DMARK
086a					CALLMONITOR 
086a cd aa fd			call debug_vector  
086d				endm  
# End of macro CALLMONITOR
086d				endif 
086d			 
086d e5				push hl		; save file name pointer 
086e			 
086e cd 05 05			call storage_get_block_0 
0871			 
0871 3a ac f9			ld a,(store_page)	; get current file id 
0874 3c				inc a 
0875 32 ac f9			ld (store_page),a 
0878				 
0878 32 a0 f9			ld (store_tmpid),a			; save id 
087b			 
087b 21 00 00			ld hl, 0 
087e 11 ac f9			ld de, store_page 
0881				if DEBUG_STORESE 
0881					DMARK "SCw" 
0881 f5				push af  
0882 3a 96 08			ld a, (.dmark)  
0885 32 9d fd			ld (debug_mark),a  
0888 3a 97 08			ld a, (.dmark+1)  
088b 32 9e fd			ld (debug_mark+1),a  
088e 3a 98 08			ld a, (.dmark+2)  
0891 32 9f fd			ld (debug_mark+2),a  
0894 18 03			jr .pastdmark  
0896 ..			.dmark: db "SCw"  
0899 f1			.pastdmark: pop af  
089a			endm  
# End of macro DMARK
089a					CALLMONITOR 
089a cd aa fd			call debug_vector  
089d				endm  
# End of macro CALLMONITOR
089d				endif 
089d cd bc 04			call storage_write_block	 ; save update 
08a0			 
08a0				if DEBUG_STORESE 
08a0 11 ac f9				ld de, store_page 
08a3					DMARK "SCC" 
08a3 f5				push af  
08a4 3a b8 08			ld a, (.dmark)  
08a7 32 9d fd			ld (debug_mark),a  
08aa 3a b9 08			ld a, (.dmark+1)  
08ad 32 9e fd			ld (debug_mark+1),a  
08b0 3a ba 08			ld a, (.dmark+2)  
08b3 32 9f fd			ld (debug_mark+2),a  
08b6 18 03			jr .pastdmark  
08b8 ..			.dmark: db "SCC"  
08bb f1			.pastdmark: pop af  
08bc			endm  
# End of macro DMARK
08bc					CALLMONITOR 
08bc cd aa fd			call debug_vector  
08bf				endm  
# End of macro CALLMONITOR
08bf				endif 
08bf				;  
08bf				 
08bf 21 40 00			ld hl, STORE_BLOCK_PHY 
08c2 11 00 00			ld de, 0 
08c5 cd 83 07			call storage_findnextid 
08c8			 
08c8 22 97 f9			ld (store_tmppageid), hl    ; save page to use  
08cb			 
08cb				; TODO detect 0 = no spare blocks 
08cb			 
08cb				; hl now contains the free page to use for the file header page 
08cb			 
08cb				if DEBUG_STORESE 
08cb				DMARK "SCF" 
08cb f5				push af  
08cc 3a e0 08			ld a, (.dmark)  
08cf 32 9d fd			ld (debug_mark),a  
08d2 3a e1 08			ld a, (.dmark+1)  
08d5 32 9e fd			ld (debug_mark+1),a  
08d8 3a e2 08			ld a, (.dmark+2)  
08db 32 9f fd			ld (debug_mark+2),a  
08de 18 03			jr .pastdmark  
08e0 ..			.dmark: db "SCF"  
08e3 f1			.pastdmark: pop af  
08e4			endm  
# End of macro DMARK
08e4					CALLMONITOR 
08e4 cd aa fd			call debug_vector  
08e7				endm  
# End of macro CALLMONITOR
08e7				endif 
08e7			 
08e7 22 97 f9			ld (store_tmppageid), hl 
08ea				 
08ea 3a a0 f9			ld a,(store_tmpid)    ; get file id 
08ed			;	ld a, (store_filecache)			; save to cache 
08ed			 
08ed 32 ac f9			ld (store_page),a    ; set page id 
08f0 3e 00			ld a, 0			 ; extent 0 is file header 
08f2 32 ad f9			ld (store_page+1), a   ; set file extent 
08f5			 
08f5 32 ae f9			ld (store_page+2), a   ; extent count for the file 
08f8			 
08f8			;	inc hl 		; init block 0 of file 
08f8			;	inc hl   		; skip file and extent id 
08f8			 ;       ld a, 0 
08f8			;	ld (hl),a 
08f8			;	ld a, (store_filecache+1)  	; save to cache 
08f8			 
08f8			;	inc hl    ; file name 
08f8				 
08f8				 
08f8 11 af f9			ld de, store_page+3    ; get buffer for term string to use as file name 
08fb				if DEBUG_STORESE 
08fb					DMARK "SCc" 
08fb f5				push af  
08fc 3a 10 09			ld a, (.dmark)  
08ff 32 9d fd			ld (debug_mark),a  
0902 3a 11 09			ld a, (.dmark+1)  
0905 32 9e fd			ld (debug_mark+1),a  
0908 3a 12 09			ld a, (.dmark+2)  
090b 32 9f fd			ld (debug_mark+2),a  
090e 18 03			jr .pastdmark  
0910 ..			.dmark: db "SCc"  
0913 f1			.pastdmark: pop af  
0914			endm  
# End of macro DMARK
0914					CALLMONITOR 
0914 cd aa fd			call debug_vector  
0917				endm  
# End of macro CALLMONITOR
0917				endif 
0917 e1				pop hl    ; get zero term string 
0918 e5				push hl 
0919 3e 00			ld a, 0 
091b cd 0f 13			call strlent 
091e 23				inc hl   ; cover zero term 
091f 06 00			ld b,0 
0921 4d				ld c,l 
0922 e1				pop hl 
0923				;ex de, hl 
0923				if DEBUG_STORESE 
0923					DMARK "SCa" 
0923 f5				push af  
0924 3a 38 09			ld a, (.dmark)  
0927 32 9d fd			ld (debug_mark),a  
092a 3a 39 09			ld a, (.dmark+1)  
092d 32 9e fd			ld (debug_mark+1),a  
0930 3a 3a 09			ld a, (.dmark+2)  
0933 32 9f fd			ld (debug_mark+2),a  
0936 18 03			jr .pastdmark  
0938 ..			.dmark: db "SCa"  
093b f1			.pastdmark: pop af  
093c			endm  
# End of macro DMARK
093c					;push af 
093c					;ld a, 'a' 
093c					;ld (debug_mark),a 
093c					;pop af 
093c					CALLMONITOR 
093c cd aa fd			call debug_vector  
093f				endm  
# End of macro CALLMONITOR
093f				endif 
093f ed b0			ldir    ; copy zero term string 
0941				if DEBUG_STORESE 
0941					DMARK "SCA" 
0941 f5				push af  
0942 3a 56 09			ld a, (.dmark)  
0945 32 9d fd			ld (debug_mark),a  
0948 3a 57 09			ld a, (.dmark+1)  
094b 32 9e fd			ld (debug_mark+1),a  
094e 3a 58 09			ld a, (.dmark+2)  
0951 32 9f fd			ld (debug_mark+2),a  
0954 18 03			jr .pastdmark  
0956 ..			.dmark: db "SCA"  
0959 f1			.pastdmark: pop af  
095a			endm  
# End of macro DMARK
095a					CALLMONITOR 
095a cd aa fd			call debug_vector  
095d				endm  
# End of macro CALLMONITOR
095d				endif 
095d			 
095d				; write file header page 
095d			 
095d 2a 97 f9			ld hl,(store_tmppageid) 
0960 11 ac f9			ld de, store_page 
0963				if DEBUG_STORESE 
0963					DMARK "SCb" 
0963 f5				push af  
0964 3a 78 09			ld a, (.dmark)  
0967 32 9d fd			ld (debug_mark),a  
096a 3a 79 09			ld a, (.dmark+1)  
096d 32 9e fd			ld (debug_mark+1),a  
0970 3a 7a 09			ld a, (.dmark+2)  
0973 32 9f fd			ld (debug_mark+2),a  
0976 18 03			jr .pastdmark  
0978 ..			.dmark: db "SCb"  
097b f1			.pastdmark: pop af  
097c			endm  
# End of macro DMARK
097c					;push af 
097c					;ld a, 'b' 
097c					;ld (debug_mark),a 
097c					;pop af 
097c					CALLMONITOR 
097c cd aa fd			call debug_vector  
097f				endm  
# End of macro CALLMONITOR
097f				endif 
097f cd bc 04			call storage_write_block 
0982			 
0982 3a a0 f9			ld a, (store_tmpid) 
0985 6f				ld l, a 
0986 26 00			ld h,0 
0988				if DEBUG_STORESE 
0988					DMARK "SCz" 
0988 f5				push af  
0989 3a 9d 09			ld a, (.dmark)  
098c 32 9d fd			ld (debug_mark),a  
098f 3a 9e 09			ld a, (.dmark+1)  
0992 32 9e fd			ld (debug_mark+1),a  
0995 3a 9f 09			ld a, (.dmark+2)  
0998 32 9f fd			ld (debug_mark+2),a  
099b 18 03			jr .pastdmark  
099d ..			.dmark: db "SCz"  
09a0 f1			.pastdmark: pop af  
09a1			endm  
# End of macro DMARK
09a1					CALLMONITOR 
09a1 cd aa fd			call debug_vector  
09a4				endm  
# End of macro CALLMONITOR
09a4				endif 
09a4 c9				ret 
09a5				 
09a5			 
09a5			 
09a5			; 
09a5			; Read File 
09a5			; 
09a5			; h - file id to locate 
09a5			; l - extent to locate 
09a5			; de - pointer to string to read into 
09a5			; 
09a5			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09a5			 
09a5			.sr_fail: 
09a5 d1				pop de 
09a6 c9				ret 
09a7			 
09a7			storage_read: 
09a7			 
09a7			 
09a7 d5				push de 
09a8			 
09a8			; TODO BUG the above push is it popped before the RET Z? 
09a8			 
09a8			; TODO how to handle multiple part blocks 
09a8			 
09a8				; locate file extent to read 
09a8			 
09a8 5c				ld e, h 
09a9 55				ld d, l 
09aa			 
09aa			.srext: 
09aa 22 aa f9			ld (store_readptr), hl     ; save the current extent to load 
09ad ed 53 a8 f9		ld (store_readbuf), de     ; save the current buffer to load in to 
09b1			 
09b1 21 40 00			ld hl, STORE_BLOCK_PHY 
09b4				if DEBUG_STORESE 
09b4					DMARK "sre" 
09b4 f5				push af  
09b5 3a c9 09			ld a, (.dmark)  
09b8 32 9d fd			ld (debug_mark),a  
09bb 3a ca 09			ld a, (.dmark+1)  
09be 32 9e fd			ld (debug_mark+1),a  
09c1 3a cb 09			ld a, (.dmark+2)  
09c4 32 9f fd			ld (debug_mark+2),a  
09c7 18 03			jr .pastdmark  
09c9 ..			.dmark: db "sre"  
09cc f1			.pastdmark: pop af  
09cd			endm  
# End of macro DMARK
09cd					CALLMONITOR 
09cd cd aa fd			call debug_vector  
09d0				endm  
# End of macro CALLMONITOR
09d0				endif 
09d0 cd 83 07			call storage_findnextid 
09d3			 
09d3				if DEBUG_STORESE 
09d3					DMARK "srf" 
09d3 f5				push af  
09d4 3a e8 09			ld a, (.dmark)  
09d7 32 9d fd			ld (debug_mark),a  
09da 3a e9 09			ld a, (.dmark+1)  
09dd 32 9e fd			ld (debug_mark+1),a  
09e0 3a ea 09			ld a, (.dmark+2)  
09e3 32 9f fd			ld (debug_mark+2),a  
09e6 18 03			jr .pastdmark  
09e8 ..			.dmark: db "srf"  
09eb f1			.pastdmark: pop af  
09ec			endm  
# End of macro DMARK
09ec					CALLMONITOR 
09ec cd aa fd			call debug_vector  
09ef				endm  
# End of macro CALLMONITOR
09ef				endif 
09ef cd d5 0f			call ishlzero 
09f2			;	ld a, l 
09f2			;	add h 
09f2			;	cp 0 
09f2 28 b1			jr z,.sr_fail			; block not found so EOF 
09f4			 
09f4				; save current address for use by higher level words etc 
09f4			 
09f4 22 9d f9			ld (store_openaddr),hl 
09f7			 
09f7			 
09f7				; hl contains page number to load 
09f7 d1				pop de   ; get storage 
09f8 ed 53 a8 f9		ld (store_readbuf), de     ; current buffer to load in to 
09fc d5				push de 
09fd				if DEBUG_STORESE 
09fd					DMARK "srg" 
09fd f5				push af  
09fe 3a 12 0a			ld a, (.dmark)  
0a01 32 9d fd			ld (debug_mark),a  
0a04 3a 13 0a			ld a, (.dmark+1)  
0a07 32 9e fd			ld (debug_mark+1),a  
0a0a 3a 14 0a			ld a, (.dmark+2)  
0a0d 32 9f fd			ld (debug_mark+2),a  
0a10 18 03			jr .pastdmark  
0a12 ..			.dmark: db "srg"  
0a15 f1			.pastdmark: pop af  
0a16			endm  
# End of macro DMARK
0a16					CALLMONITOR 
0a16 cd aa fd			call debug_vector  
0a19				endm  
# End of macro CALLMONITOR
0a19				endif 
0a19 cd 57 04			call storage_read_block 
0a1c			 
0a1c				; if this a continuation read??? 
0a1c			 
0a1c 2a a8 f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a1f			 
0a1f 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a21 cd ac 0f			call addatohl 
0a24 7e				ld a,(hl) 
0a25			;	cp 0 
0a25 b7				or a 
0a26 28 02			jr z, .markiscont 
0a28 3e ff			ld a, 255 
0a2a			 
0a2a			.markiscont: 
0a2a 32 9f f9			ld (store_readcont), a 
0a2d			 
0a2d				if DEBUG_STORESE 
0a2d					DMARK "srC" 
0a2d f5				push af  
0a2e 3a 42 0a			ld a, (.dmark)  
0a31 32 9d fd			ld (debug_mark),a  
0a34 3a 43 0a			ld a, (.dmark+1)  
0a37 32 9e fd			ld (debug_mark+1),a  
0a3a 3a 44 0a			ld a, (.dmark+2)  
0a3d 32 9f fd			ld (debug_mark+2),a  
0a40 18 03			jr .pastdmark  
0a42 ..			.dmark: db "srC"  
0a45 f1			.pastdmark: pop af  
0a46			endm  
# End of macro DMARK
0a46					CALLMONITOR 
0a46 cd aa fd			call debug_vector  
0a49				endm  
# End of macro CALLMONITOR
0a49				endif 
0a49				; only short reads enabled 
0a49			 
0a49 3a a7 f9			ld a, (store_longread) 
0a4c			;	cp 0 
0a4c b7				or a 
0a4d ca 19 0b			jp z, .readdone 
0a50			 
0a50			; TODO if block has no zeros then need to read next block  
0a50			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a50			; check last byte of physical block. 
0a50			; if not zero then the next block needs to be loaded 
0a50			 
0a50			 
0a50 2a a8 f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a53			 
0a53 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a55 cd ac 0f			call addatohl 
0a58				;dec hl 
0a58 7e				ld a,(hl) 
0a59				if DEBUG_STORESE 
0a59					DMARK "sr?" 
0a59 f5				push af  
0a5a 3a 6e 0a			ld a, (.dmark)  
0a5d 32 9d fd			ld (debug_mark),a  
0a60 3a 6f 0a			ld a, (.dmark+1)  
0a63 32 9e fd			ld (debug_mark+1),a  
0a66 3a 70 0a			ld a, (.dmark+2)  
0a69 32 9f fd			ld (debug_mark+2),a  
0a6c 18 03			jr .pastdmark  
0a6e ..			.dmark: db "sr?"  
0a71 f1			.pastdmark: pop af  
0a72			endm  
# End of macro DMARK
0a72					CALLMONITOR 
0a72 cd aa fd			call debug_vector  
0a75				endm  
# End of macro CALLMONITOR
0a75				endif 
0a75			;	cp 0 
0a75 b7				or a 
0a76 ca 19 0b			jp z, .readdone 
0a79			 
0a79				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0a79			 
0a79 23				inc hl 
0a7a			 
0a7a 22 a8 f9			ld (store_readbuf), hl     ; save the current buffer to load in to 
0a7d			 
0a7d ed 5b aa f9		ld de, (store_readptr)     ; save the current extent to load 
0a81			 
0a81 eb				ex de, hl 
0a82			 
0a82				; next ext 
0a82			 
0a82 23				inc hl 
0a83 22 aa f9			ld  (store_readptr), hl     ; save the current extent to load 
0a86			 
0a86				if DEBUG_STORESE 
0a86					DMARK "sF2" 
0a86 f5				push af  
0a87 3a 9b 0a			ld a, (.dmark)  
0a8a 32 9d fd			ld (debug_mark),a  
0a8d 3a 9c 0a			ld a, (.dmark+1)  
0a90 32 9e fd			ld (debug_mark+1),a  
0a93 3a 9d 0a			ld a, (.dmark+2)  
0a96 32 9f fd			ld (debug_mark+2),a  
0a99 18 03			jr .pastdmark  
0a9b ..			.dmark: db "sF2"  
0a9e f1			.pastdmark: pop af  
0a9f			endm  
# End of macro DMARK
0a9f					CALLMONITOR 
0a9f cd aa fd			call debug_vector  
0aa2				endm  
# End of macro CALLMONITOR
0aa2				endif 
0aa2			 
0aa2				; get and load block 
0aa2			 
0aa2 cd 83 07			call storage_findnextid 
0aa5			 
0aa5				if DEBUG_STORESE 
0aa5					DMARK "sf2" 
0aa5 f5				push af  
0aa6 3a ba 0a			ld a, (.dmark)  
0aa9 32 9d fd			ld (debug_mark),a  
0aac 3a bb 0a			ld a, (.dmark+1)  
0aaf 32 9e fd			ld (debug_mark+1),a  
0ab2 3a bc 0a			ld a, (.dmark+2)  
0ab5 32 9f fd			ld (debug_mark+2),a  
0ab8 18 03			jr .pastdmark  
0aba ..			.dmark: db "sf2"  
0abd f1			.pastdmark: pop af  
0abe			endm  
# End of macro DMARK
0abe					CALLMONITOR 
0abe cd aa fd			call debug_vector  
0ac1				endm  
# End of macro CALLMONITOR
0ac1				endif 
0ac1 cd d5 0f			call ishlzero 
0ac4			;	ld a, l 
0ac4			;	add h 
0ac4			;	cp 0 
0ac4 ca a5 09			jp z,.sr_fail			; block not found so EOF 
0ac7				 
0ac7				; save current address for use by higher level words etc 
0ac7			 
0ac7 22 9d f9			ld (store_openaddr),hl 
0aca			 
0aca cd 57 04			call storage_read_block 
0acd			 
0acd				; on a continuation block, we now have the file id and ext in the middle of the block 
0acd				; we need to pull everything back  
0acd			 
0acd ed 5b a8 f9		ld de, (store_readbuf)     ; current buffer to nudge into 
0ad1 2a a8 f9			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0ad4 23				inc hl 
0ad5 23				inc hl     ; skip id and ext 
0ad6 01 40 00			ld bc, STORE_BLOCK_PHY 
0ad9				if DEBUG_STORESE 
0ad9					DMARK "SR<" 
0ad9 f5				push af  
0ada 3a ee 0a			ld a, (.dmark)  
0add 32 9d fd			ld (debug_mark),a  
0ae0 3a ef 0a			ld a, (.dmark+1)  
0ae3 32 9e fd			ld (debug_mark+1),a  
0ae6 3a f0 0a			ld a, (.dmark+2)  
0ae9 32 9f fd			ld (debug_mark+2),a  
0aec 18 03			jr .pastdmark  
0aee ..			.dmark: db "SR<"  
0af1 f1			.pastdmark: pop af  
0af2			endm  
# End of macro DMARK
0af2					CALLMONITOR 
0af2 cd aa fd			call debug_vector  
0af5				endm  
# End of macro CALLMONITOR
0af5				endif 
0af5 ed b0			ldir     ; copy data 
0af7			 
0af7				; move the pointer back and pretend we have a full buffer for next recheck 
0af7			 
0af7 1b				dec de 
0af8 1b				dec de 
0af9			 
0af9			; TODO do pop below now short circuit loop????? 
0af9 c1				pop bc     ; get rid of spare de on stack 
0afa				if DEBUG_STORESE 
0afa					DMARK "SR>" 
0afa f5				push af  
0afb 3a 0f 0b			ld a, (.dmark)  
0afe 32 9d fd			ld (debug_mark),a  
0b01 3a 10 0b			ld a, (.dmark+1)  
0b04 32 9e fd			ld (debug_mark+1),a  
0b07 3a 11 0b			ld a, (.dmark+2)  
0b0a 32 9f fd			ld (debug_mark+2),a  
0b0d 18 03			jr .pastdmark  
0b0f ..			.dmark: db "SR>"  
0b12 f1			.pastdmark: pop af  
0b13			endm  
# End of macro DMARK
0b13					CALLMONITOR 
0b13 cd aa fd			call debug_vector  
0b16				endm  
# End of macro CALLMONITOR
0b16				endif 
0b16 c3 aa 09			jp .srext 
0b19			 
0b19			 
0b19			 
0b19			 
0b19			 
0b19			.readdone:		 
0b19 e1				pop hl 		 ; return start of data to show as not EOF 
0b1a 23				inc hl   ; past file id 
0b1b 23				inc hl   ; past ext 
0b1c				if DEBUG_STORESE 
0b1c					DMARK "SRe" 
0b1c f5				push af  
0b1d 3a 31 0b			ld a, (.dmark)  
0b20 32 9d fd			ld (debug_mark),a  
0b23 3a 32 0b			ld a, (.dmark+1)  
0b26 32 9e fd			ld (debug_mark+1),a  
0b29 3a 33 0b			ld a, (.dmark+2)  
0b2c 32 9f fd			ld (debug_mark+2),a  
0b2f 18 03			jr .pastdmark  
0b31 ..			.dmark: db "SRe"  
0b34 f1			.pastdmark: pop af  
0b35			endm  
# End of macro DMARK
0b35					CALLMONITOR 
0b35 cd aa fd			call debug_vector  
0b38				endm  
# End of macro CALLMONITOR
0b38				endif 
0b38 c9					ret 
0b39			 
0b39			 
0b39			 
0b39			; 
0b39			; Append File 
0b39			; 
0b39			; hl - file id to locate 
0b39			; de - pointer to (multi block) string to write 
0b39			 
0b39			.sa_notfound: 
0b39 d1				pop de 
0b3a c9				ret 
0b3b			 
0b3b			 
0b3b			storage_append: 
0b3b				; hl -  file id to append to 
0b3b				; de - string to append 
0b3b			 
0b3b d5				push de 
0b3c				 
0b3c				if DEBUG_STORESE 
0b3c					DMARK "AP1" 
0b3c f5				push af  
0b3d 3a 51 0b			ld a, (.dmark)  
0b40 32 9d fd			ld (debug_mark),a  
0b43 3a 52 0b			ld a, (.dmark+1)  
0b46 32 9e fd			ld (debug_mark+1),a  
0b49 3a 53 0b			ld a, (.dmark+2)  
0b4c 32 9f fd			ld (debug_mark+2),a  
0b4f 18 03			jr .pastdmark  
0b51 ..			.dmark: db "AP1"  
0b54 f1			.pastdmark: pop af  
0b55			endm  
# End of macro DMARK
0b55					CALLMONITOR 
0b55 cd aa fd			call debug_vector  
0b58				endm  
# End of macro CALLMONITOR
0b58				endif 
0b58			 
0b58 7d				ld a, l 
0b59 32 a0 f9			ld (store_tmpid), a 
0b5c			 
0b5c				; get file header  
0b5c			 
0b5c 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b5e 3a a0 f9			ld a, (store_tmpid) 
0b61 5f				ld e, a 
0b62			 
0b62 21 40 00				ld hl, STORE_BLOCK_PHY 
0b65 cd 83 07				call storage_findnextid 
0b68			 
0b68 cd d5 0f			call ishlzero 
0b6b 28 cc			jr z, .sa_notfound 
0b6d			 
0b6d 22 97 f9			ld (store_tmppageid), hl 
0b70			 
0b70				; TODO handle file id not found 
0b70			 
0b70				if DEBUG_STORESE 
0b70					DMARK "AP2" 
0b70 f5				push af  
0b71 3a 85 0b			ld a, (.dmark)  
0b74 32 9d fd			ld (debug_mark),a  
0b77 3a 86 0b			ld a, (.dmark+1)  
0b7a 32 9e fd			ld (debug_mark+1),a  
0b7d 3a 87 0b			ld a, (.dmark+2)  
0b80 32 9f fd			ld (debug_mark+2),a  
0b83 18 03			jr .pastdmark  
0b85 ..			.dmark: db "AP2"  
0b88 f1			.pastdmark: pop af  
0b89			endm  
# End of macro DMARK
0b89					CALLMONITOR 
0b89 cd aa fd			call debug_vector  
0b8c				endm  
# End of macro CALLMONITOR
0b8c				endif 
0b8c			 
0b8c				; update file extent count 
0b8c			 
0b8c 11 ac f9			ld de, store_page 
0b8f			 
0b8f cd 57 04			call storage_read_block 
0b92			 
0b92				if DEBUG_STORESE 
0b92					DMARK "AP3" 
0b92 f5				push af  
0b93 3a a7 0b			ld a, (.dmark)  
0b96 32 9d fd			ld (debug_mark),a  
0b99 3a a8 0b			ld a, (.dmark+1)  
0b9c 32 9e fd			ld (debug_mark+1),a  
0b9f 3a a9 0b			ld a, (.dmark+2)  
0ba2 32 9f fd			ld (debug_mark+2),a  
0ba5 18 03			jr .pastdmark  
0ba7 ..			.dmark: db "AP3"  
0baa f1			.pastdmark: pop af  
0bab			endm  
# End of macro DMARK
0bab					CALLMONITOR 
0bab cd aa fd			call debug_vector  
0bae				endm  
# End of macro CALLMONITOR
0bae				endif 
0bae			;	ld (store_tmppageid), hl 
0bae			 
0bae 3a ae f9			ld a, (store_page+2) 
0bb1 3c				inc a 
0bb2 32 ae f9			ld (store_page+2), a 
0bb5 32 9f f9			ld (store_tmpext), a 
0bb8				 
0bb8				if DEBUG_STORESE 
0bb8					DMARK "AP3" 
0bb8 f5				push af  
0bb9 3a cd 0b			ld a, (.dmark)  
0bbc 32 9d fd			ld (debug_mark),a  
0bbf 3a ce 0b			ld a, (.dmark+1)  
0bc2 32 9e fd			ld (debug_mark+1),a  
0bc5 3a cf 0b			ld a, (.dmark+2)  
0bc8 32 9f fd			ld (debug_mark+2),a  
0bcb 18 03			jr .pastdmark  
0bcd ..			.dmark: db "AP3"  
0bd0 f1			.pastdmark: pop af  
0bd1			endm  
# End of macro DMARK
0bd1					CALLMONITOR 
0bd1 cd aa fd			call debug_vector  
0bd4				endm  
# End of macro CALLMONITOR
0bd4				endif 
0bd4 2a 97 f9			ld hl, (store_tmppageid) 
0bd7 11 ac f9			ld de, store_page 
0bda cd bc 04			call storage_write_block 
0bdd			 
0bdd				; find free block 
0bdd			 
0bdd 11 00 00			ld de, 0			 ; file extent to locate 
0be0			 
0be0 21 40 00				ld hl, STORE_BLOCK_PHY 
0be3 cd 83 07				call storage_findnextid 
0be6 cd d5 0f			call ishlzero 
0be9 ca 39 0b			jp z, .sa_notfound 
0bec			 
0bec					; TODO handle no space left 
0bec					 
0bec 22 97 f9				ld (store_tmppageid), hl 
0bef			 
0bef				if DEBUG_STORESE 
0bef					DMARK "AP4" 
0bef f5				push af  
0bf0 3a 04 0c			ld a, (.dmark)  
0bf3 32 9d fd			ld (debug_mark),a  
0bf6 3a 05 0c			ld a, (.dmark+1)  
0bf9 32 9e fd			ld (debug_mark+1),a  
0bfc 3a 06 0c			ld a, (.dmark+2)  
0bff 32 9f fd			ld (debug_mark+2),a  
0c02 18 03			jr .pastdmark  
0c04 ..			.dmark: db "AP4"  
0c07 f1			.pastdmark: pop af  
0c08			endm  
# End of macro DMARK
0c08					CALLMONITOR 
0c08 cd aa fd			call debug_vector  
0c0b				endm  
# End of macro CALLMONITOR
0c0b				endif 
0c0b					; init the buffer with zeros so we can id if the buffer is full or not 
0c0b			 
0c0b e5					push hl 
0c0c c5					push bc 
0c0d			 
0c0d 21 ac f9				ld hl, store_page 
0c10 06 40				ld b, STORE_BLOCK_PHY 
0c12			;		ld a, 0 
0c12 36 00		.zeroblock:	ld (hl), 0 
0c14 23					inc hl 
0c15 10 fb				djnz .zeroblock 
0c17			 
0c17 c1					pop bc 
0c18 e1					pop hl 
0c19			 
0c19					; construct block 
0c19			 
0c19 3a a0 f9				ld a, (store_tmpid) 
0c1c 32 ac f9				ld (store_page), a   ; file id 
0c1f 3a 9f f9				ld a, (store_tmpext)   ; extent for this block 
0c22 32 ad f9				ld (store_page+1), a 
0c25			 
0c25 e1					pop hl    ; get string to write 
0c26 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c28 11 ae f9				ld de, store_page+2 
0c2b			 
0c2b				if DEBUG_STORESE 
0c2b					DMARK "AP5" 
0c2b f5				push af  
0c2c 3a 40 0c			ld a, (.dmark)  
0c2f 32 9d fd			ld (debug_mark),a  
0c32 3a 41 0c			ld a, (.dmark+1)  
0c35 32 9e fd			ld (debug_mark+1),a  
0c38 3a 42 0c			ld a, (.dmark+2)  
0c3b 32 9f fd			ld (debug_mark+2),a  
0c3e 18 03			jr .pastdmark  
0c40 ..			.dmark: db "AP5"  
0c43 f1			.pastdmark: pop af  
0c44			endm  
# End of macro DMARK
0c44					CALLMONITOR 
0c44 cd aa fd			call debug_vector  
0c47				endm  
# End of macro CALLMONITOR
0c47				endif 
0c47			 
0c47			 
0c47			 
0c47					; fill buffer with data until end of string or full block 
0c47			 
0c47 7e			.appd:		ld a, (hl) 
0c48 12					ld (de), a 
0c49			;		cp 0 
0c49 b7					or a 
0c4a 28 04				jr z, .appdone 
0c4c 23					inc hl 
0c4d 13					inc de 
0c4e 10 f7				djnz .appd 
0c50			 
0c50 e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c51 f5					push af   		; save last byte dumped 
0c52			 
0c52			 
0c52 2a 97 f9			ld hl, (store_tmppageid) 
0c55 11 ac f9			ld de, store_page 
0c58				if DEBUG_STORESE 
0c58					DMARK "AP6" 
0c58 f5				push af  
0c59 3a 6d 0c			ld a, (.dmark)  
0c5c 32 9d fd			ld (debug_mark),a  
0c5f 3a 6e 0c			ld a, (.dmark+1)  
0c62 32 9e fd			ld (debug_mark+1),a  
0c65 3a 6f 0c			ld a, (.dmark+2)  
0c68 32 9f fd			ld (debug_mark+2),a  
0c6b 18 03			jr .pastdmark  
0c6d ..			.dmark: db "AP6"  
0c70 f1			.pastdmark: pop af  
0c71			endm  
# End of macro DMARK
0c71					CALLMONITOR 
0c71 cd aa fd			call debug_vector  
0c74				endm  
# End of macro CALLMONITOR
0c74				endif 
0c74 cd bc 04				call storage_write_block 
0c77			 
0c77			 
0c77				; was that a full block of data written? 
0c77				; any more to write out? 
0c77			 
0c77				; if yes then set vars and jump to start of function again 
0c77			 
0c77 f1					pop af 
0c78 d1					pop de 
0c79			 
0c79					;cp 0		 ; no, string was fully written 
0c79 b7					or a 
0c7a c8					ret z 
0c7b			 
0c7b					; setup vars for next cycle 
0c7b			 
0c7b 3a a0 f9				ld a, (store_tmpid) 
0c7e 6f					ld l, a 
0c7f 26 00				ld h, 0 
0c81			 
0c81 c3 3b 0b			 	jp storage_append	 ; yes, need to write out some more 
0c84			 
0c84			 
0c84			 
0c84			 
0c84			 
0c84			 
0c84			 
0c84			if DEBUG_STORECF 
0c84			storageput:	 
0c84					ret 
0c84			storageread: 
0c84					ld hl, store_page 
0c84					ld b, 200 
0c84			;		ld a,0 
0c84			.src:		ld (hl),0 
0c84					inc hl 
0c84					djnz .src 
0c84					 
0c84			 
0c84					ld de, 0 
0c84					ld bc, 1 
0c84					ld hl, store_page 
0c84					call cfRead 
0c84			 
0c84				call cfGetError 
0c84				ld hl,scratch 
0c84				call hexout 
0c84				ld hl, scratch+2 
0c84			;	ld a, 0 
0c84				ld (hl),0 
0c84				ld de, scratch 
0c84				ld a,display_row_1 
0c84				call str_at_display 
0c84				call update_display 
0c84			 
0c84					ld hl, store_page 
0c84					ld (os_cur_ptr),hl 
0c84			 
0c84					ret 
0c84			endif 
0c84			 
0c84			 
0c84			; Clear out the main buffer store (used to remove junk before writing a new block) 
0c84			 
0c84			storage_clear_page: 
0c84 e5				push hl 
0c85 d5				push de 
0c86 c5				push bc 
0c87 21 ac f9			ld hl, store_page 
0c8a			;	ld a, 0 
0c8a 36 00			ld (hl), 0 
0c8c			 
0c8c 11 ad f9			ld de, store_page+1 
0c8f 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0c92			 
0c92 ed b0			ldir 
0c94				 
0c94 c1				pop bc 
0c95 d1				pop de 
0c96 e1				pop hl 
0c97 c9				ret 
0c98			 
0c98			; eof 
# End of file firmware_storage.asm
0c98			  
0c98			; support routines for above hardware abstraction layer  
0c98			  
0c98			include "firmware_general.asm"        ; general support functions  
0c98			 
0c98			; word look up 
0c98			 
0c98			; in 
0c98			; a is the index 
0c98			; hl is pointer start of array 
0c98			; 
0c98			; returns 
0c98			; hl to the word 
0c98			; 
0c98			 
0c98			table_lookup:  
0c98 d5					push de 
0c99 eb					ex de, hl 
0c9a			 
0c9a 6f					ld l, a 
0c9b 26 00				ld h, 0 
0c9d 29					add hl, hl 
0c9e 19					add hl, de 
0c9f 7e					ld a, (hl) 
0ca0 23					inc hl 
0ca1 66					ld h,(hl) 
0ca2 6f					ld l, a 
0ca3			 
0ca3 d1					pop de 
0ca4 c9					ret 
0ca5			 
0ca5			; Delay loops 
0ca5			 
0ca5			 
0ca5			 
0ca5			aDelayInMS: 
0ca5 c5				push bc 
0ca6 47				ld b,a 
0ca7			msdelay: 
0ca7 c5				push bc 
0ca8				 
0ca8			 
0ca8 01 41 00			ld bc,041h 
0cab cd c3 0c			call delayloop 
0cae c1				pop bc 
0caf 05				dec b 
0cb0 20 f5			jr nz,msdelay 
0cb2			 
0cb2			;if CPU_CLOCK_8MHZ 
0cb2			;msdelay8: 
0cb2			;	push bc 
0cb2			;	 
0cb2			; 
0cb2			;	ld bc,041h 
0cb2			;	call delayloop 
0cb2			;	pop bc 
0cb2			;	dec b 
0cb2			;	jr nz,msdelay8 
0cb2			;endif 
0cb2			 
0cb2			 
0cb2 c1				pop bc 
0cb3 c9				ret 
0cb4			 
0cb4			 
0cb4			delay250ms: 
0cb4				;push de 
0cb4 01 00 40			ld bc, 04000h 
0cb7 c3 c3 0c			jp delayloop 
0cba			delay500ms: 
0cba				;push de 
0cba 01 00 80			ld bc, 08000h 
0cbd c3 c3 0c			jp delayloop 
0cc0			delay1s: 
0cc0				;push bc 
0cc0			   ; Clobbers A, d and e 
0cc0 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0cc3			delayloop: 
0cc3 c5			    push bc 
0cc4			 
0cc4			if BASE_CPM 
0cc4				ld bc, CPM_DELAY_TUNE 
0cc4			.cpmloop: 
0cc4				push bc 
0cc4			 
0cc4			endif 
0cc4			 
0cc4			 
0cc4			 
0cc4			delayloopi: 
0cc4			;	push bc 
0cc4			;.dl: 
0cc4 cb 47		    bit     0,a    	; 8 
0cc6 cb 47		    bit     0,a    	; 8 
0cc8 cb 47		    bit     0,a    	; 8 
0cca e6 ff		    and     255  	; 7 
0ccc 0b			    dec     bc      	; 6 
0ccd 79			    ld      a,c     	; 4 
0cce b0			    or      b     	; 4 
0ccf c2 c4 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cd2			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cd2				;pop de 
0cd2			;pop bc 
0cd2			 
0cd2			if BASE_CPM 
0cd2				pop bc 
0cd2				 
0cd2			    dec     bc      	; 6 
0cd2			    ld      a,c     	; 4 
0cd2			    or      b     	; 4 
0cd2			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cd2				 
0cd2			 
0cd2			endif 
0cd2			;if CPU_CLOCK_8MHZ 
0cd2			;    pop bc 
0cd2			;    push bc 
0cd2			;.dl8: 
0cd2			;    bit     0,a    	; 8 
0cd2			;    bit     0,a    	; 8 
0cd2			;    bit     0,a    	; 8 
0cd2			;    and     255  	; 7 
0cd2			;    dec     bc      	; 6 
0cd2			;    ld      a,c     	; 4 
0cd2			;    or      b     	; 4 
0cd2			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cd2			;endif 
0cd2			 
0cd2			;if CPU_CLOCK_10MHZ 
0cd2			;    pop bc 
0cd2			;    push bc 
0cd2			;.dl8: 
0cd2			;    bit     0,a    	; 8 
0cd2			;    bit     0,a    	; 8 
0cd2			;    bit     0,a    	; 8 
0cd2			;    and     255  	; 7 
0cd2			;    dec     bc      	; 6 
0cd2			;    ld      a,c     	; 4 
0cd2			;    or      b     	; 4 
0cd2			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cd2			;endif 
0cd2 c1			    pop bc 
0cd3			 
0cd3 c9				ret 
0cd4			 
0cd4			 
0cd4			 
0cd4			; eof 
# End of file firmware_general.asm
0cd4			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0cd4			; display routines that use the physical hardware abstraction layer 
0cd4			 
0cd4			 
0cd4			; Display an activity indicator 
0cd4			; Each call returns the new char pointed to in hl 
0cd4			 
0cd4			active: 
0cd4 3a f8 fa			ld a, (display_active) 
0cd7 fe 06			cp 6 
0cd9			 
0cd9 20 02			jr nz, .sne 
0cdb				; gone past the last one reset sequence 
0cdb 3e ff			ld a, 255 
0cdd			 
0cdd			.sne:   
0cdd				; get the next char in seq 
0cdd 3c				inc a 
0cde 32 f8 fa			ld (display_active), a 
0ce1			 
0ce1				; look up the string in the table 
0ce1 21 f8 0c			ld hl, actseq 
0ce4 cb 27			sla a 
0ce6 cd ac 0f			call addatohl 
0ce9 cd d9 22			call loadwordinhl 
0cec			 
0cec				; forth will write the to string when pushing so move from rom to ram 
0cec			 
0cec 11 f9 fa			ld de, display_active+1 
0cef 01 02 00			ld bc, 2 
0cf2 ed b0			ldir 
0cf4			 
0cf4 21 f9 fa			ld hl, display_active+1 
0cf7 c9				ret 
0cf8				 
0cf8				 
0cf8			 
0cf8			 
0cf8			;db "|/-\|-\" 
0cf8			 
0cf8			actseq: 
0cf8			 
0cf8 06 0d		dw spin0 
0cfa 08 0d		dw spin1 
0cfc 0a 0d		dw spin2 
0cfe 0c 0d		dw spin3 
0d00 0a 0d		dw spin2 
0d02 08 0d		dw spin1 
0d04 06 0d		dw spin0 
0d06			 
0d06 .. 00		spin0: db " ", 0 
0d08 .. 00		spin1: db "-", 0 
0d0a .. 00		spin2: db "+", 0 
0d0c .. 00		spin3: db "#", 0 
0d0e			 
0d0e			 
0d0e			; information window 
0d0e			 
0d0e			; pass hl with 1st string to display 
0d0e			; pass de with 2nd string to display 
0d0e			 
0d0e			info_panel: 
0d0e e5				push hl 
0d0f			 
0d0f 2a fe fa			ld hl, (display_fb_active) 
0d12 e5				push hl    ; future de destination 
0d13 21 e3 fc				ld hl, display_fb0 
0d16 22 fe fa				ld (display_fb_active), hl 
0d19			 
0d19			;	call clear_display 
0d19			 
0d19				if BASE_CPM 
0d19				ld a, '.' 
0d19				else 
0d19 3e a5			ld a, 165 
0d1b				endif 
0d1b cd 81 0d			call fill_display 
0d1e			 
0d1e			 
0d1e 3e 55			ld a, display_row_3 + 5 
0d20 cd 8e 0d			call str_at_display 
0d23			 
0d23 e1				pop hl 
0d24 d1				pop de 
0d25			 
0d25 e5				push hl 
0d26			 
0d26			 
0d26 3e 2d			ld a, display_row_2 + 5 
0d28 cd 8e 0d			call str_at_display 
0d2b			 
0d2b			 
0d2b cd 9e 0d			call update_display 
0d2e cd e8 1e			call next_page_prompt 
0d31 cd 7c 0d			call clear_display 
0d34			 
0d34				 
0d34 21 42 fc				ld hl, display_fb1 
0d37 22 fe fa				ld (display_fb_active), hl 
0d3a cd 9e 0d			call update_display 
0d3d			 
0d3d e1				pop hl 
0d3e			 
0d3e c9				ret 
0d3f			 
0d3f			 
0d3f			 
0d3f			 
0d3f			; TODO windowing? 
0d3f			 
0d3f			; TODO scroll line up 
0d3f			 
0d3f			scroll_up: 
0d3f			 
0d3f e5				push hl 
0d40 d5				push de 
0d41 c5				push bc 
0d42			 
0d42				; get frame buffer  
0d42			 
0d42 2a fe fa			ld hl, (display_fb_active) 
0d45 e5				push hl    ; future de destination 
0d46			 
0d46 11 28 00			ld  de, display_cols 
0d49 19				add hl, de 
0d4a			 
0d4a d1				pop de 
0d4b			 
0d4b				;ex de, hl 
0d4b 01 9f 00			ld bc, display_fb_len -1  
0d4e			;if DEBUG_FORTH_WORDS 
0d4e			;	DMARK "SCL" 
0d4e			;	CALLMONITOR 
0d4e			;endif	 
0d4e ed b0			ldir 
0d50			 
0d50				; wipe bottom row 
0d50			 
0d50			 
0d50 2a fe fa			ld hl, (display_fb_active) 
0d53 11 a0 00			ld de, display_cols*display_rows 
0d56 19				add hl, de 
0d57 06 28			ld b, display_cols 
0d59			;	ld a, ' ' 
0d59			.scwipe: 
0d59 36 20			ld (hl), ' ' 
0d5b 2b				dec hl 
0d5c 10 fb			djnz .scwipe 
0d5e			 
0d5e				;pop hl 
0d5e			 
0d5e c1				pop bc 
0d5f d1				pop de 
0d60 e1				pop hl 
0d61			 
0d61 c9				ret 
0d62			 
0d62			 
0d62			;scroll_upo: 
0d62			;	ld de, display_row_1 
0d62			 ;	ld hl, display_row_2 
0d62			;	ld bc, display_cols 
0d62			;	ldir 
0d62			;	ld de, display_row_2 
0d62			 ;	ld hl, display_row_3 
0d62			;	ld bc, display_cols 
0d62			;	ldir 
0d62			;	ld de, display_row_3 
0d62			 ;	ld hl, display_row_4 
0d62			;	ld bc, display_cols 
0d62			;	ldir 
0d62			 
0d62			; TODO clear row 4 
0d62			 
0d62			;	ret 
0d62			 
0d62				 
0d62			scroll_down: 
0d62			 
0d62 e5				push hl 
0d63 d5				push de 
0d64 c5				push bc 
0d65			 
0d65				; get frame buffer  
0d65			 
0d65 2a fe fa			ld hl, (display_fb_active) 
0d68			 
0d68 11 9f 00			ld de, display_fb_len - 1 
0d6b 19				add hl, de 
0d6c			 
0d6c e5			push hl    ; future de destination 
0d6d			 
0d6d 11 28 00			ld  de, display_cols 
0d70 ed 52			sbc hl, de 
0d72			 
0d72			 
0d72 d1				pop de 
0d73			 
0d73			;	ex de, hl 
0d73 01 9f 00			ld bc, display_fb_len -1  
0d76			 
0d76			 
0d76				 
0d76			 
0d76 ed b0			ldir 
0d78			 
0d78				; wipe bottom row 
0d78			 
0d78			 
0d78			;	ld hl, (display_fb_active) 
0d78			;;	ld de, display_cols*display_rows 
0d78			;;	add hl, de 
0d78			;	ld b, display_cols 
0d78			;	ld a, ' ' 
0d78			;.scwiped: 
0d78			;	ld (hl), a 
0d78			;	dec hl 
0d78			;	djnz .scwiped 
0d78			 
0d78				;pop hl 
0d78			 
0d78 c1				pop bc 
0d79 d1				pop de 
0d7a e1				pop hl 
0d7b			 
0d7b c9				ret 
0d7c			;scroll_down: 
0d7c			;	ld de, display_row_4 
0d7c			;	ld hl, display_row_3 
0d7c			;	ld bc, display_cols 
0d7c			;	ldir 
0d7c			;	ld de, display_row_3 
0d7c			; 	ld hl, display_row_2 
0d7c			;	ld bc, display_cols 
0d7c			;	ldir 
0d7c			;	ld de, display_row_2 
0d7c			;	ld hl, display_row_1 
0d7c			;	ld bc, display_cols 
0d7c			;	ldir 
0d7c			;;; TODO clear row 1 
0d7c			;	ret 
0d7c			 
0d7c			 
0d7c			 
0d7c			 
0d7c			 
0d7c			; clear active frame buffer 
0d7c			 
0d7c			clear_display: 
0d7c 3e 20			ld a, ' ' 
0d7e c3 81 0d			jp fill_display 
0d81			 
0d81			; fill active frame buffer with a char in A 
0d81			 
0d81			fill_display: 
0d81 06 a0			ld b,display_fb_len 
0d83 2a fe fa			ld hl, (display_fb_active) 
0d86 77			.fd1:	ld (hl),a 
0d87 23				inc hl 
0d88 10 fc			djnz .fd1 
0d8a 23				inc hl 
0d8b			;	ld a,0 
0d8b 36 00			ld (hl),0 
0d8d			 
0d8d			 
0d8d c9				ret 
0d8e			; Write string (DE) at pos (A) to active frame buffer 
0d8e			 
0d8e 2a fe fa		str_at_display:    ld hl,(display_fb_active) 
0d91 06 00					ld b,0 
0d93 4f					ld c,a 
0d94 09					add hl,bc 
0d95 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0d96 b7			            OR   A              ;Null terminator? 
0d97 c8			            RET  Z              ;Yes, so finished 
0d98 77					ld (hl),a 
0d99 23				inc hl 
0d9a 13			            INC  DE             ;Point to next character 
0d9b 18 f8		            JR   .sad1     ;Repeat 
0d9d c9					ret 
0d9e			 
0d9e			; using current frame buffer write to physical display 
0d9e			 
0d9e			update_display: 
0d9e e5				push hl 
0d9f 2a fe fa			ld hl, (display_fb_active) 
0da2 cd 2d 76			call write_display 
0da5 e1				pop hl 
0da6 c9				ret 
0da7			 
0da7			; TODO scrolling 
0da7			 
0da7			 
0da7			; move cursor right one char 
0da7			cursor_right: 
0da7			 
0da7				; TODO shift right 
0da7				; TODO if beyond max col 
0da7				; TODO       cursor_next_line 
0da7			 
0da7 c9				ret 
0da8			 
0da8			 
0da8			cursor_next_line: 
0da8				; TODO first char 
0da8				; TODO line down 
0da8				; TODO if past last row 
0da8				; TODO    scroll up 
0da8			 
0da8 c9				ret 
0da9			 
0da9			cursor_left: 
0da9				; TODO shift left 
0da9				; TODO if beyond left  
0da9				; TODO     cursor prev line 
0da9				 
0da9 c9				ret 
0daa			 
0daa			cursor_prev_line: 
0daa				; TODO last char 
0daa				; TODO line up 
0daa				; TODO if past first row 
0daa				; TODO   scroll down 
0daa			 
0daa c9				ret 
0dab			 
0dab			 
0dab			cout: 
0dab				; A - char 
0dab c9				ret 
0dac			 
0dac			 
0dac			; Display a menu and allow item selection (optional toggle items) 
0dac			; 
0dac			; format: 
0dac			; hl pointer to word array with zero term for items 
0dac			; e.g.    db item1 
0dac			;         db .... 
0dac			;         db 0 
0dac			; 
0dac			; a = starting menu item  
0dac			; 
0dac			; de = pointer item toggle array   (todo) 
0dac			; 
0dac			; returns item selected in a 1-... 
0dac			; returns 0 if back button pressed 
0dac			; 
0dac			; NOTE: Uses system frame buffer to display 
0dac			; 
0dac			; LEFT, Q = go back 
0dac			; RIGHT, SPACE, CR = select 
0dac			; UP, A - Up 
0dac			; DOWN, Z - Down 
0dac			 
0dac			 
0dac			 
0dac			 
0dac			 
0dac			menu: 
0dac			 
0dac					; keep array pointer 
0dac			 
0dac 22 a5 f9				ld (store_tmp1), hl 
0daf 32 a3 f9				ld (store_tmp2), a 
0db2			 
0db2					; check for key bounce 
0db2			 
0db2			if BASE_KEV 
0db2			 
0db2 cd 76 79		.mbounce:	call cin 
0db5			;		cp 0 
0db5 b7					or a 
0db6 20 fa				jr nz, .mbounce 
0db8			endif 
0db8					; for ease use ex 
0db8			 
0db8					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0db8 21 e3 fc				ld hl, display_fb0 
0dbb 22 fe fa				ld (display_fb_active), hl 
0dbe			 
0dbe cd 7c 0d		.mloop:		call clear_display 
0dc1 cd 9e 0d				call update_display 
0dc4			 
0dc4					; draw selection id '>' at 1 
0dc4			 
0dc4					; init start of list display 
0dc4			 
0dc4 3e 05				ld a, 5 
0dc6 32 a1 f9				ld (store_tmp3), a   ; display row count 
0dc9 3a a3 f9				ld a,( store_tmp2) 
0dcc 32 a4 f9				ld (store_tmp2+1), a   ; display item count 
0dcf			 
0dcf					 
0dcf			.mitem:	 
0dcf			 
0dcf			 
0dcf 3a a4 f9				ld a,(store_tmp2+1) 
0dd2 6f					ld l, a 
0dd3 26 00				ld h, 0 
0dd5 29					add hl, hl 
0dd6 ed 5b a5 f9			ld de, (store_tmp1) 
0dda 19					add hl, de 
0ddb 7e					ld a, (hl) 
0ddc 23					inc hl 
0ddd 66					ld h,(hl) 
0dde 6f					ld l, a 
0ddf			 
0ddf cd d5 0f				call ishlzero 
0de2 28 1a				jr z, .mdone 
0de4			 
0de4 eb					ex de, hl 
0de5 3a a1 f9				ld a, (store_tmp3) 
0de8 cd 8e 0d				call str_at_display 
0deb					 
0deb			 
0deb					; next item 
0deb 3a a4 f9				ld a, (store_tmp2+1) 
0dee 3c					inc a 
0def 32 a4 f9				ld (store_tmp2+1), a   ; display item count 
0df2			 
0df2			 		; next row 
0df2			 
0df2 3a a1 f9				ld a, (store_tmp3) 
0df5 c6 28				add display_cols 
0df7 32 a1 f9				ld (store_tmp3), a 
0dfa			 
0dfa					; at end of screen? 
0dfa			 
0dfa fe 10				cp display_rows*4 
0dfc 20 d1				jr nz, .mitem 
0dfe			 
0dfe			 
0dfe			.mdone: 
0dfe cd d5 0f				call ishlzero 
0e01 28 08				jr z, .nodn 
0e03			 
0e03 3e 78				ld a, display_row_4 
0e05 11 82 0e				ld de, .mdown 
0e08 cd 8e 0d				call str_at_display 
0e0b			 
0e0b					; draw options to fill the screens with active item on line 1 
0e0b					; if current option is 2 or more then display ^ in top 
0e0b			 
0e0b 3a a3 f9		.nodn:		ld a, (store_tmp2) 
0e0e			;		cp 0 
0e0e b7					or a 
0e0f 28 08				jr z, .noup 
0e11			 
0e11 3e 00				ld a, 0 
0e13 11 80 0e				ld de, .mup 
0e16 cd 8e 0d				call str_at_display 
0e19			 
0e19 3e 02		.noup:		ld a, 2 
0e1b 11 7e 0e				ld de, .msel 
0e1e cd 8e 0d				call str_at_display 
0e21			 
0e21					; if current option + 1 is not null then display V in bottom 
0e21					; get key 
0e21 cd 9e 0d				call update_display 
0e24			 
0e24			 
0e24					; handle key 
0e24			 
0e24 cd 67 79				call cin_wait 
0e27			 
0e27 fe 05				cp KEY_UP 
0e29 28 2b				jr z, .mgoup 
0e2b fe 61				cp 'a' 
0e2d 28 27				jr z, .mgoup 
0e2f fe 0a				cp KEY_DOWN 
0e31 28 31				jr z, .mgod 
0e33 fe 7a				cp 'z' 
0e35 28 2d				jr z, .mgod 
0e37 fe 20				cp ' ' 
0e39 28 33				jr z, .goend 
0e3b fe 0c				cp KEY_RIGHT 
0e3d 28 2f				jr z, .goend 
0e3f fe 0d				cp KEY_CR 
0e41 28 2b				jr z, .goend 
0e43 fe 71				cp 'q' 
0e45 28 0b				jr z, .goback 
0e47			 
0e47 fe 0b				cp KEY_LEFT 
0e49 28 07				jr z, .goback 
0e4b fe 08				cp KEY_BS 
0e4d 28 03				jr z, .goback 
0e4f c3 be 0d				jp .mloop 
0e52			 
0e52			.goback: 
0e52 3e 00			ld a, 0 
0e54 18 1c			jr .goend2 
0e56			 
0e56				; move up one 
0e56			.mgoup: 
0e56 3a a3 f9				ld a, (store_tmp2) 
0e59			;		cp 0 
0e59 b7					or a 
0e5a ca be 0d				jp z, .mloop 
0e5d 3d					dec a 
0e5e 32 a3 f9				ld (store_tmp2), a 
0e61 c3 be 0d				jp .mloop 
0e64			 
0e64				; move down one 
0e64			.mgod: 
0e64 3a a3 f9				ld a, (store_tmp2) 
0e67 3c					inc a 
0e68 32 a3 f9				ld (store_tmp2), a 
0e6b c3 be 0d				jp .mloop 
0e6e			 
0e6e			 
0e6e			.goend: 
0e6e					; get selected item number 
0e6e			 
0e6e 3a a3 f9				ld a, (store_tmp2) 
0e71 3c					inc a 
0e72			 
0e72			.goend2: 
0e72 f5					push af 
0e73			 
0e73					; restore active fb 
0e73					; TODO BUG assumes fb1 
0e73			 
0e73 21 42 fc				ld hl, display_fb1 
0e76 22 fe fa				ld (display_fb_active), hl 
0e79			 
0e79					; restore main regs 
0e79			 
0e79			 
0e79 cd 9e 0d				call update_display 
0e7c			 
0e7c f1					pop af 
0e7d			 
0e7d c9				ret 
0e7e			 
0e7e .. 00		.msel:   db ">",0 
0e80 .. 00		.mup:   db "^",0 
0e82 .. 00		.mdown:   db "v",0 
0e84			 
0e84			 
0e84			; eof 
0e84			 
# End of file firmware_display.asm
0e84			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0e84			; random number generators 
0e84			 
0e84			 
0e84			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0e84			 
0e84			 
0e84			;-----> Generate a random number 
0e84			; output a=answer 0<=a<=255 
0e84			; all registers are preserved except: af 
0e84			random: 
0e84 e5			        push    hl 
0e85 d5			        push    de 
0e86 2a dd fa		        ld      hl,(randData) 
0e89 ed 5f		        ld      a,r 
0e8b 57			        ld      d,a 
0e8c 5e			        ld      e,(hl) 
0e8d 19			        add     hl,de 
0e8e 85			        add     a,l 
0e8f ac			        xor     h 
0e90 22 dd fa		        ld      (randData),hl 
0e93 d1			        pop     de 
0e94 e1			        pop     hl 
0e95 c9			        ret 
0e96			 
0e96			 
0e96			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0e96			 
0e96			 
0e96			 
0e96			;------LFSR------ 
0e96			;James Montelongo 
0e96			;optimized by Spencer Putt 
0e96			;out: 
0e96			; a = 8 bit random number 
0e96			RandLFSR: 
0e96 21 e3 fa		        ld hl,LFSRSeed+4 
0e99 5e			        ld e,(hl) 
0e9a 23			        inc hl 
0e9b 56			        ld d,(hl) 
0e9c 23			        inc hl 
0e9d 4e			        ld c,(hl) 
0e9e 23			        inc hl 
0e9f 7e			        ld a,(hl) 
0ea0 47			        ld b,a 
0ea1 cb 13		        rl e  
0ea3 cb 12			rl d 
0ea5 cb 11		        rl c  
0ea7 17				rla 
0ea8 cb 13		        rl e  
0eaa cb 12			rl d 
0eac cb 11		        rl c  
0eae 17				rla 
0eaf cb 13		        rl e  
0eb1 cb 12			rl d 
0eb3 cb 11		        rl c  
0eb5 17				rla 
0eb6 67			        ld h,a 
0eb7 cb 13		        rl e  
0eb9 cb 12			rl d 
0ebb cb 11		        rl c  
0ebd 17				rla 
0ebe a8			        xor b 
0ebf cb 13		        rl e  
0ec1 cb 12			rl d 
0ec3 ac			        xor h 
0ec4 a9			        xor c 
0ec5 aa			        xor d 
0ec6 21 e5 fa		        ld hl,LFSRSeed+6 
0ec9 11 e6 fa		        ld de,LFSRSeed+7 
0ecc 01 07 00		        ld bc,7 
0ecf ed b8		        lddr 
0ed1 12			        ld (de),a 
0ed2 c9			        ret 
0ed3			 
0ed3			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0ed3			 
0ed3			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0ed3			 
0ed3			 
0ed3			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0ed3			 
0ed3			prng16: 
0ed3			;Inputs: 
0ed3			;   (seed1) contains a 16-bit seed value 
0ed3			;   (seed2) contains a NON-ZERO 16-bit seed value 
0ed3			;Outputs: 
0ed3			;   HL is the result 
0ed3			;   BC is the result of the LCG, so not that great of quality 
0ed3			;   DE is preserved 
0ed3			;Destroys: 
0ed3			;   AF 
0ed3			;cycle: 4,294,901,760 (almost 4.3 billion) 
0ed3			;160cc 
0ed3			;26 bytes 
0ed3 2a d7 fa		    ld hl,(seed1) 
0ed6 44			    ld b,h 
0ed7 4d			    ld c,l 
0ed8 29			    add hl,hl 
0ed9 29			    add hl,hl 
0eda 2c			    inc l 
0edb 09			    add hl,bc 
0edc 22 d7 fa		    ld (seed1),hl 
0edf 2a d5 fa		    ld hl,(seed2) 
0ee2 29			    add hl,hl 
0ee3 9f			    sbc a,a 
0ee4 e6 2d		    and %00101101 
0ee6 ad			    xor l 
0ee7 6f			    ld l,a 
0ee8 22 d5 fa		    ld (seed2),hl 
0eeb 09			    add hl,bc 
0eec c9			    ret 
0eed			 
0eed			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0eed			 
0eed			rand32: 
0eed			;Inputs: 
0eed			;   (seed1_0) holds the lower 16 bits of the first seed 
0eed			;   (seed1_1) holds the upper 16 bits of the first seed 
0eed			;   (seed2_0) holds the lower 16 bits of the second seed 
0eed			;   (seed2_1) holds the upper 16 bits of the second seed 
0eed			;   **NOTE: seed2 must be non-zero 
0eed			;Outputs: 
0eed			;   HL is the result 
0eed			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0eed			;Destroys: 
0eed			;   AF 
0eed			;Tested and passes all CAcert tests 
0eed			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0eed			;it has a period of 18,446,744,069,414,584,320 
0eed			;roughly 18.4 quintillion. 
0eed			;LFSR taps: 0,2,6,7  = 11000101 
0eed			;291cc 
0eed			;seed1_0=$+1 
0eed			;    ld hl,12345 
0eed			;seed1_1=$+1 
0eed			;    ld de,6789 
0eed			;    ld b,h 
0eed			;    ld c,l 
0eed			;    add hl,hl \ rl e \ rl d 
0eed			;    add hl,hl \ rl e \ rl d 
0eed			;    inc l 
0eed			;    add hl,bc 
0eed			;    ld (seed1_0),hl 
0eed			;    ld hl,(seed1_1) 
0eed			;    adc hl,de 
0eed			;    ld (seed1_1),hl 
0eed			;    ex de,hl 
0eed			;seed2_0=$+1 
0eed			;    ld hl,9876 
0eed			;seed2_1=$+1 
0eed			;    ld bc,54321 
0eed			;    add hl,hl \ rl c \ rl b 
0eed			;    ld (seed2_1),bc 
0eed			;    sbc a,a 
0eed			;    and %11000101 
0eed			;    xor l 
0eed			;    ld l,a 
0eed			;    ld (seed2_0),hl 
0eed			;    ex de,hl 
0eed			;    add hl,bc 
0eed			;    ret 
0eed			; 
0eed			 
0eed			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0eed			; 20 bytes, 86 cycles (excluding ret) 
0eed			 
0eed			; returns   hl = pseudorandom number 
0eed			; corrupts   a 
0eed			 
0eed			; generates 16-bit pseudorandom numbers with a period of 65535 
0eed			; using the xorshift method: 
0eed			 
0eed			; hl ^= hl << 7 
0eed			; hl ^= hl >> 9 
0eed			; hl ^= hl << 8 
0eed			 
0eed			; some alternative shift triplets which also perform well are: 
0eed			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0eed			 
0eed			;  org 32768 
0eed			 
0eed			xrnd: 
0eed 2a db fa		  ld hl,(xrandc)       ; seed must not be 0 
0ef0 3e 00		  ld a,0 
0ef2 bd			  cp l 
0ef3 20 02		  jr nz, .xrnd1 
0ef5 2e 01		  ld l, 1 
0ef7			.xrnd1: 
0ef7			 
0ef7 7c			  ld a,h 
0ef8 1f			  rra 
0ef9 7d			  ld a,l 
0efa 1f			  rra 
0efb ac			  xor h 
0efc 67			  ld h,a 
0efd 7d			  ld a,l 
0efe 1f			  rra 
0eff 7c			  ld a,h 
0f00 1f			  rra 
0f01 ad			  xor l 
0f02 6f			  ld l,a 
0f03 ac			  xor h 
0f04 67			  ld h,a 
0f05			 
0f05 22 db fa		  ld (xrandc),hl 
0f08			 
0f08 c9			  ret 
0f09			;  
0f09			 
0f09			 
0f09			;;;; int maths 
0f09			 
0f09			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f09			; Divide 16-bit values (with 16-bit result) 
0f09			; In: Divide BC by divider DE 
0f09			; Out: BC = result, HL = rest 
0f09			; 
0f09			Div16: 
0f09 21 00 00		    ld hl,0 
0f0c 78			    ld a,b 
0f0d 06 08		    ld b,8 
0f0f			Div16_Loop1: 
0f0f 17			    rla 
0f10 ed 6a		    adc hl,hl 
0f12 ed 52		    sbc hl,de 
0f14 30 01		    jr nc,Div16_NoAdd1 
0f16 19			    add hl,de 
0f17			Div16_NoAdd1: 
0f17 10 f6		    djnz Div16_Loop1 
0f19 17			    rla 
0f1a 2f			    cpl 
0f1b 47			    ld b,a 
0f1c 79			    ld a,c 
0f1d 48			    ld c,b 
0f1e 06 08		    ld b,8 
0f20			Div16_Loop2: 
0f20 17			    rla 
0f21 ed 6a		    adc hl,hl 
0f23 ed 52		    sbc hl,de 
0f25 30 01		    jr nc,Div16_NoAdd2 
0f27 19			    add hl,de 
0f28			Div16_NoAdd2: 
0f28 10 f6		    djnz Div16_Loop2 
0f2a 17			    rla 
0f2b 2f			    cpl 
0f2c 41			    ld b,c 
0f2d 4f			    ld c,a 
0f2e c9			ret 
0f2f			 
0f2f			 
0f2f			;http://z80-heaven.wikidot.com/math 
0f2f			; 
0f2f			;Inputs: 
0f2f			;     DE and A are factors 
0f2f			;Outputs: 
0f2f			;     A is not changed 
0f2f			;     B is 0 
0f2f			;     C is not changed 
0f2f			;     DE is not changed 
0f2f			;     HL is the product 
0f2f			;Time: 
0f2f			;     342+6x 
0f2f			; 
0f2f			Mult16: 
0f2f			 
0f2f 06 08		     ld b,8          ;7           7 
0f31 21 00 00		     ld hl,0         ;10         10 
0f34 29			       add hl,hl     ;11*8       88 
0f35 07			       rlca          ;4*8        32 
0f36 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f38 19			         add hl,de   ;--         -- 
0f39 10 f9		       djnz $-5      ;13*7+8     99 
0f3b c9			ret 
0f3c			 
0f3c			; 
0f3c			; Square root of 16-bit value 
0f3c			; In:  HL = value 
0f3c			; Out:  D = result (rounded down) 
0f3c			; 
0f3c			;Sqr16: 
0f3c			;    ld de,#0040 
0f3c			;    ld a,l 
0f3c			;    ld l,h 
0f3c			;    ld h,d 
0f3c			;    or a 
0f3c			;    ld b,8 
0f3c			;Sqr16_Loop: 
0f3c			;    sbc hl,de 
0f3c			;    jr nc,Sqr16_Skip 
0f3c			;    add hl,de 
0f3c			;Sqr16_Skip: 
0f3c			;    ccf 
0f3c			;    rl d 
0f3c			;    add a,a 
0f3c			;    adc hl,hl 
0f3c			;    add a,a 
0f3c			;    adc hl,hl 
0f3c			;    djnz Sqr16_Loop 
0f3c			;    ret 
0f3c			; 
0f3c			; 
0f3c			; Divide 8-bit values 
0f3c			; In: Divide E by divider C 
0f3c			; Out: A = result, B = rest 
0f3c			; 
0f3c			Div8: 
0f3c af			    xor a 
0f3d 06 08		    ld b,8 
0f3f			Div8_Loop: 
0f3f cb 13		    rl e 
0f41 17			    rla 
0f42 91			    sub c 
0f43 30 01		    jr nc,Div8_NoAdd 
0f45 81			    add a,c 
0f46			Div8_NoAdd: 
0f46 10 f7		    djnz Div8_Loop 
0f48 47			    ld b,a 
0f49 7b			    ld a,e 
0f4a 17			    rla 
0f4b 2f			    cpl 
0f4c c9			    ret 
0f4d			 
0f4d			; 
0f4d			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f4d			; In: Multiply A with DE 
0f4d			; Out: HL = result 
0f4d			; 
0f4d			Mult12U: 
0f4d 2e 00		    ld l,0 
0f4f 87			    add a,a 
0f50 30 01		    jr nc,Mult12U_NoAdd0 
0f52 19			    add hl,de 
0f53			Mult12U_NoAdd0: 
0f53 29			    add hl,hl 
0f54 87			    add a,a 
0f55 30 01		    jr nc,Mult12U_NoAdd1 
0f57 19			    add hl,de 
0f58			Mult12U_NoAdd1: 
0f58 29			    add hl,hl 
0f59 87			    add a,a 
0f5a 30 01		    jr nc,Mult12U_NoAdd2 
0f5c 19			    add hl,de 
0f5d			Mult12U_NoAdd2: 
0f5d 29			    add hl,hl 
0f5e 87			    add a,a 
0f5f 30 01		    jr nc,Mult12U_NoAdd3 
0f61 19			    add hl,de 
0f62			Mult12U_NoAdd3: 
0f62 29			    add hl,hl 
0f63 87			    add a,a 
0f64 30 01		    jr nc,Mult12U_NoAdd4 
0f66 19			    add hl,de 
0f67			Mult12U_NoAdd4: 
0f67 29			    add hl,hl 
0f68 87			    add a,a 
0f69 30 01		    jr nc,Mult12U_NoAdd5 
0f6b 19			    add hl,de 
0f6c			Mult12U_NoAdd5: 
0f6c 29			    add hl,hl 
0f6d 87			    add a,a 
0f6e 30 01		    jr nc,Mult12U_NoAdd6 
0f70 19			    add hl,de 
0f71			Mult12U_NoAdd6: 
0f71 29			    add hl,hl 
0f72 87			    add a,a 
0f73 d0			    ret nc 
0f74 19			    add hl,de 
0f75 c9			    ret 
0f76			 
0f76			; 
0f76			; Multiply 8-bit value with a 16-bit value (right rotating) 
0f76			; In: Multiply A with DE 
0f76			;      Put lowest value in A for most efficient calculation 
0f76			; Out: HL = result 
0f76			; 
0f76			Mult12R: 
0f76 21 00 00		    ld hl,0 
0f79			Mult12R_Loop: 
0f79 cb 3f		    srl a 
0f7b 30 01		    jr nc,Mult12R_NoAdd 
0f7d 19			    add hl,de 
0f7e			Mult12R_NoAdd: 
0f7e cb 23		    sla e 
0f80 cb 12		    rl d 
0f82 b7			    or a 
0f83 c2 79 0f		    jp nz,Mult12R_Loop 
0f86 c9			    ret 
0f87			 
0f87			; 
0f87			; Multiply 16-bit values (with 32-bit result) 
0f87			; In: Multiply BC with DE 
0f87			; Out: BCHL = result 
0f87			; 
0f87			Mult32: 
0f87 79			    ld a,c 
0f88 48			    ld c,b 
0f89 21 00 00		    ld hl,0 
0f8c 06 10		    ld b,16 
0f8e			Mult32_Loop: 
0f8e 29			    add hl,hl 
0f8f 17			    rla 
0f90 cb 11		    rl c 
0f92 30 07		    jr nc,Mult32_NoAdd 
0f94 19			    add hl,de 
0f95 ce 00		    adc a,0 
0f97 d2 9b 0f		    jp nc,Mult32_NoAdd 
0f9a 0c			    inc c 
0f9b			Mult32_NoAdd: 
0f9b 10 f1		    djnz Mult32_Loop 
0f9d 41			    ld b,c 
0f9e 4f			    ld c,a 
0f9f c9			    ret 
0fa0			 
0fa0			 
0fa0			 
0fa0			; 
0fa0			; Multiply 8-bit values 
0fa0			; In:  Multiply H with E 
0fa0			; Out: HL = result 
0fa0			; 
0fa0			Mult8: 
0fa0 16 00		    ld d,0 
0fa2 6a			    ld l,d 
0fa3 06 08		    ld b,8 
0fa5			Mult8_Loop: 
0fa5 29			    add hl,hl 
0fa6 30 01		    jr nc,Mult8_NoAdd 
0fa8 19			    add hl,de 
0fa9			Mult8_NoAdd: 
0fa9 10 fa		    djnz Mult8_Loop 
0fab c9			    ret 
0fac			 
0fac			 
0fac			 
0fac			 
0fac			 
0fac			 
0fac			 
0fac			 
0fac			;;http://z80-heaven.wikidot.com/math 
0fac			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fac			; 
0fac			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fac			;     ld a,16        ;7 
0fac			;     ld hl,0        ;10 
0fac			;     jp $+5         ;10 
0fac			;.DivLoop: 
0fac			;       add hl,bc    ;-- 
0fac			;       dec a        ;64 
0fac			;       jr z,.DivLoopEnd        ;86 
0fac			; 
0fac			;       sla e        ;128 
0fac			;       rl d         ;128 
0fac			;       adc hl,hl    ;240 
0fac			;       sbc hl,bc    ;240 
0fac			;       jr nc,.DivLoop ;23|21 
0fac			;       inc e        ;-- 
0fac			;       jp .DivLoop+1 
0fac			; 
0fac			;.DivLoopEnd: 
0fac			 
0fac			;HL_Div_C: 
0fac			;Inputs: 
0fac			;     HL is the numerator 
0fac			;     C is the denominator 
0fac			;Outputs: 
0fac			;     A is the remainder 
0fac			;     B is 0 
0fac			;     C is not changed 
0fac			;     DE is not changed 
0fac			;     HL is the quotient 
0fac			; 
0fac			;       ld b,16 
0fac			;       xor a 
0fac			;         add hl,hl 
0fac			;         rla 
0fac			;         cp c 
0fac			;         jr c,$+4 
0fac			;           inc l 
0fac			;           sub c 
0fac			;         djnz $-7 
0fac			 
0fac			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fac			 
0fac			addatohl: 
0fac 85			    add   a, l    ; A = A+L 
0fad 6f			    ld    l, a    ; L = A+L 
0fae 8c			    adc   a, h    ; A = A+L+H+carry 
0faf 95			    sub   l       ; A = H+carry 
0fb0 67			    ld    h, a    ; H = H+carry 
0fb1 c9			ret 
0fb2			 
0fb2			addatode: 
0fb2 83			    add   a, e    ; A = A+L 
0fb3 5f			    ld    e, a    ; L = A+L 
0fb4 8a			    adc   a, d    ; A = A+L+H+carry 
0fb5 93			    sub   e       ; A = H+carry 
0fb6 57			    ld    d, a    ; H = H+carry 
0fb7 c9			ret 
0fb8			 
0fb8			 
0fb8			addatobc: 
0fb8 81			    add   a, c    ; A = A+L 
0fb9 4f			    ld    c, a    ; L = A+L 
0fba 88			    adc   a, b    ; A = A+L+H+carry 
0fbb 91			    sub   c       ; A = H+carry 
0fbc 47			    ld    b, a    ; H = H+carry 
0fbd c9			ret 
0fbe			 
0fbe			subafromhl: 
0fbe			   ; If A=0 do nothing 
0fbe			    ; Otherwise flip A's sign. Since 
0fbe			    ; the upper byte becomes -1, also 
0fbe			    ; substract 1 from H. 
0fbe ed 44		    neg 
0fc0 ca c9 0f		    jp    z, Skip 
0fc3 25			    dec   h 
0fc4			     
0fc4			    ; Now add the low byte as usual 
0fc4			    ; Two's complement takes care of 
0fc4			    ; ensuring the result is correct 
0fc4 85			    add   a, l 
0fc5 6f			    ld    l, a 
0fc6 8c			    adc   a, h 
0fc7 95			    sub   l 
0fc8 67			    ld    h, a 
0fc9			Skip: 
0fc9 c9				ret 
0fca			 
0fca			 
0fca			; compare hl and de 
0fca			; returns:  
0fca			; if hl = de, z=1, s=0, c0=0 
0fca			; if hl > de, z=0, s=0, c=0 
0fca			; if hl < de, z=0, s=1, c=1 
0fca			cmp16:	 
0fca b7				or a 
0fcb ed 52			sbc hl,de 
0fcd e0				ret po 
0fce 7c				ld a,h 
0fcf 1f				rra 
0fd0 ee 40			xor 01000000B 
0fd2 37				scf 
0fd3 8f				adc a,a 
0fd4 c9				ret 
0fd5			 
0fd5			 
0fd5			; test if hl contains zero   - A is destroyed 
0fd5			 
0fd5			ishlzero:    
0fd5 b7				or a     ; reset flags 
0fd6 7c				ld a, h 
0fd7 b5				or l        	 
0fd8			 
0fd8 c9				ret 
0fd9			 
0fd9			 
0fd9			 
0fd9			 
0fd9			if FORTH_ENABLE_FLOATMATH 
0fd9			;include "float/bbcmath.z80" 
0fd9			include "float/lpfpcalc.asm" 
0fd9			endif 
0fd9			 
0fd9			 
0fd9			; eof 
0fd9			 
# End of file firmware_maths.asm
0fd9			include "firmware_strings.asm"   ; string handling  
0fd9			 
0fd9			 
0fd9			; TODO string len 
0fd9			; input text string, end on cr with zero term 
0fd9			; a offset into frame buffer to start prompt 
0fd9			; d is max length 
0fd9			; e is display size TODO 
0fd9			; c is current cursor position 
0fd9			; hl is ptr to where string will be stored and edited directly 
0fd9			 
0fd9			 
0fd9			; TODO check limit of buffer for new inserts 
0fd9			; TODO check insert does not push beyond buffer 
0fd9			; TODO scroll in a limited display area 
0fd9			; TODO scroll whole screen on page wrap 
0fd9			 
0fd9			 
0fd9			; TODO use LCD cursor? 
0fd9			 
0fd9			EDIT_V1: equ 0 
0fd9			EDIT_V2: equ 1 
0fd9			 
0fd9			 
0fd9			 
0fd9			if EDIT_V2 
0fd9			input_str: 
0fd9			 
0fd9 32 96 fd			    	ld (input_at_pos),a      ; save display position to start 
0fdc			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0fdc 22 99 fd				ld (input_start), hl     ; save ptr to buffer 
0fdf			;		ld a, c 
0fdf			;		call addatohl 
0fdf			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0fdf 7a					ld a,d 
0fe0 32 98 fd			        ld (input_size), a       ; save length of input area 
0fe3 79					ld a, c 
0fe4 32 87 fd				ld (input_cursor),a      ; init cursor start position relative to start of string 
0fe7 7b					ld a,e 
0fe8 32 97 fd			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0feb			 
0feb			 
0feb					; add a trailing space to make screen refresh nicer 
0feb			 
0feb					;ld hl, (input_start) 
0feb					;push hl 
0feb					;ld a, 0 
0feb					;call strlent 
0feb					;ld a, l 
0feb					;pop hl 
0feb					;call addatohl 
0feb					;dec hl 
0feb					;ld a, ' ' 
0feb					;ld (hl), a 
0feb					;inc hl 
0feb					;ld (hl), a 
0feb					;inc hl 
0feb					;ld a, 0 
0feb					;ld (hl), a 
0feb			 
0feb			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0feb					; init cursor shape if not set by the cin routines 
0feb 21 f3 fa				ld hl, cursor_shape 
0fee			if BASE_KEV 
0fee			;		ld a, 255 
0fee 36 ff				ld (hl), 255 
0ff0			else 
0ff0					;ld a, '#' 
0ff0					ld (hl), '#' 
0ff0			endif 
0ff0 23					inc hl 
0ff1			;		ld a, 0 
0ff1 36 00				ld (hl), 0 
0ff3			 
0ff3 3e 09				ld a, CUR_BLINK_RATE 
0ff5 32 92 fd				ld (input_cur_flash), a 
0ff8 3e 01				ld a, 1 
0ffa 32 91 fd				ld (input_cur_onoff),a 
0ffd			.inmain:	 
0ffd			 
0ffd cd 1e 11				call input_disp_ref 
1000			 
1000					; save current length of string 
1000			 
1000 2a 99 fd				ld hl, (input_start) 
1003 3e 00				ld a, 0 
1005 cd 0f 13				call strlent 
1008 7d					ld a,l 
1009 32 8c fd				ld (input_len), a 
100c			 
100c					;call input_disp_oncur 
100c			 
100c					; display current state of input buffer 
100c			 
100c					; clean any backspace chars 
100c			 
100c 3e 20				ld a, " " 
100e 32 f3 f0				ld (scratch),a 
1011 3e 00				ld a, 0 
1013 32 f4 f0				ld (scratch+1),a 
1016 3a 96 fd				ld a,(input_at_pos) 
1019 85					add l 
101a 11 f3 f0				ld de, scratch 
101d cd 8e 0d				call str_at_display 
1020			 
1020					; pause 1ms 
1020			 
1020 3e 01				ld a, 1 
1022 cd a5 0c				call aDelayInMS 
1025			 
1025			; display cursor if visible on this cycle 
1025			 
1025					; dec flash counter 
1025 3a 92 fd				ld a, (input_cur_flash) 
1028 3d					dec a 
1029 32 92 fd				ld (input_cur_flash), a 
102c			;		cp 0 
102c b7					or a 
102d 20 0d				jr nz, .inochgstate 
102f			 
102f			 
102f					; reset on change of state 
102f 3e 09				ld a, CUR_BLINK_RATE 
1031 32 92 fd				ld (input_cur_flash), a 
1034			 
1034					; change state 
1034 3a 91 fd				ld a,(input_cur_onoff) 
1037 ed 44				neg 
1039 32 91 fd				ld (input_cur_onoff),a 
103c			 
103c			 
103c			 
103c			 
103c					; TODO is cursor visible? 
103c					; TODO if so then over write the char at curspos pos with the cursor shape 
103c			 
103c								 
103c			 
103c			.inochgstate: 
103c 3a 91 fd				ld a,(input_cur_onoff) 
103f fe ff				cp 255 
1041 28 0e				jr z, .skipcursor 
1043 3a 96 fd				ld a, (input_at_pos) 
1046 47					ld b, a 
1047 3a 87 fd				ld a, (input_cursor) 
104a 80					add b 
104b 11 f3 fa				ld de, cursor_shape 
104e					 
104e cd 8e 0d				call str_at_display 
1051			 
1051			.skipcursor: 
1051				if DEBUG_INPUTV2 
1051			 
1051					ld a,(input_at_pos) 
1051					ld hl, LFSRSeed 
1051					call hexout 
1051					ld a, (input_cursor) 
1051					ld hl, LFSRSeed+2 
1051					call hexout 
1051					ld a,(input_size) 
1051					ld hl, LFSRSeed+4 
1051					call hexout 
1051			 
1051					ld a,(input_cur_onoff) 
1051					ld hl, LFSRSeed+6 
1051					call hexout 
1051			 
1051					ld a,(input_cur_flash) 
1051					ld hl, LFSRSeed+8 
1051					call hexout 
1051			 
1051					ld a,(input_len) 
1051					ld hl, LFSRSeed+10 
1051					call hexout 
1051					ld hl, LFSRSeed+12 
1051			;		ld a, 0 
1051					ld (hl),0 
1051					ld a, display_row_4 
1051					ld de, LFSRSeed 
1051					call str_at_display 
1051				endif 
1051 cd 9e 0d				call update_display 
1054			 
1054					; TODO keyboard processing 
1054			 
1054			if BASE_CPM 
1054					call cin_wait 
1054			else 
1054 cd 76 79				call cin    ; _wait 
1057			endif 
1057			;		cp 0 
1057 b7					or a 
1058 ca fd 0f				jp z, .inmain 
105b			 
105b fe 0b				cp KEY_LEFT    ; cursor left 
105d ca 10 11				jp z, input_left 
1060				 
1060 fe 0c				cp KEY_RIGHT      ; cursor right 
1062 ca 17 11				jp z, input_right 
1065			 
1065 fe 0d				cp KEY_CR 
1067 c8					ret z 
1068			 
1068 fe 08				cp KEY_BS 
106a ca 82 11				jp z, input_delchar 
106d			 
106d fe 06				cp KEY_NEXTWORD 
106f ca 96 10				jp z, input_nxtword 
1072			 
1072 fe 07				cp KEY_PREVWORD 
1074 ca bb 10				jp z, input_prvword 
1077			 
1077 fe 0e				cp KEY_HOME    ; jump to start of line 
1079 20 08				jr nz, .ikh 
107b 3e 00				ld a, 0 
107d 32 87 fd				ld (input_cursor), a 
1080 ca fd 0f				jp z, .inmain 
1083			.ikh: 
1083			 
1083 fe 0f				cp KEY_END     ; jump to end of line 
1085 20 09				jr nz, .ike 
1087 3a 8c fd				ld a, (input_len) 
108a 32 87 fd				ld (input_cursor),a 
108d ca fd 0f				jp z, .inmain 
1090			.ike: 
1090 fe 05			        cp KEY_UP      ; recall last command 
1092 c8					ret z 
1093			;jr nz, .irec 
1093			; TODO next word 
1093			; TODO prev word 
1093			;  
1093			; 
1093			;	ld hl, scratch 
1093			;	ld de, os_last_cmd 
1093			;	call strcpy 
1093			;		jp  .inmain 
1093			.irec: 
1093			;		jr .instr1 
1093			 
1093			 
1093			 
1093					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
1093			 
1093			; TODO return if any special keys are given 
1093			;		ld l, a 
1093			;		ld a, 28 ; KEY_F12   ; 27 
1093			;		sub l 
1093			;		ret m 
1093			;		ld a, l 
1093					; if no special key then insert as a char 
1093			 
1093 c3 57 11				jp input_inschr 
1096			 
1096				 
1096			input_nxtword: 
1096				; jump to start next word after the cursor 
1096			 
1096			.insknwn:	 
1096 cd 4d 11				call input_curptr	 
1099 7e					ld a,(hl)	 
109a			;		cp 0 
109a b7					or a 
109b ca fd 0f				jp z, .inmain    ; end of string 
109e			 
109e			; if we are on a word, then move off of it 
109e			 
109e fe 20				cp ' ' 
10a0 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
10a2 21 87 fd				ld hl, input_cursor 
10a5 34					inc (hl) 
10a6 18 ee				jr .insknwn 
10a8			 
10a8			.inspace: 
10a8			 
10a8 cd 4d 11				call input_curptr	 
10ab 7e					ld a,(hl)	 
10ac			;		cp 0 
10ac b7					or a 
10ad ca fd 0f				jp z, .inmain    ; end of string 
10b0			 
10b0			; if we are on a word, then move off of it 
10b0			 
10b0 fe 20				cp ' ' 
10b2 c2 fd 0f				jp nz, .inmain     ; we are on non space so at next word 
10b5 21 87 fd				ld hl, input_cursor 
10b8 34					inc (hl) 
10b9 18 ed				jr .inspace 
10bb			 
10bb			 
10bb			 
10bb			 
10bb			input_prvword: 
10bb				; jump to the start of previous word before the cursor 
10bb			 
10bb			; where are we to start with currently? 
10bb			 
10bb cd 4d 11				call input_curptr	 
10be 7e					ld a, (hl) 
10bf fe 20				cp ' ' 
10c1 28 1c				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
10c3			 
10c3			 
10c3			 
10c3			.inskpwn:	 
10c3 3a 87 fd				ld a,(input_cursor) 
10c6			;		cp 0 
10c6 b7					or a 
10c7 ca fd 0f				jp z, .inmain    ; start of string 
10ca			 
10ca			;if we are on a word, then move off of it 
10ca			 
10ca cd 4d 11				call input_curptr	 
10cd 7e					ld a, (hl) 
10ce fe 20				cp ' ' 
10d0 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
10d2					;jp z, .inmain    ; start of string 
10d2 21 87 fd				ld hl, input_cursor 
10d5 35					dec (hl) 
10d6 18 eb				jr .inskpwn 
10d8			.iwstart: 
10d8 21 87 fd				ld hl, input_cursor 
10db 34					inc (hl) 
10dc c3 fd 0f				jp .inmain 
10df					 
10df			 
10df			.inspacep: 
10df			 
10df					;jp .inmain    ; start of string 
10df			 
10df			 
10df			 
10df 3a 87 fd				ld a,(input_cursor) 
10e2			;		cp 0 
10e2 b7					or a 
10e3 ca fd 0f				jp z, .inmain    ; start of string 
10e6			 
10e6			; if we are on a word, then move off of it 
10e6			 
10e6 cd 4d 11				call input_curptr	 
10e9 7e					ld a, (hl) 
10ea fe 20				cp ' ' 
10ec c2 f5 10				jp nz, .incharp     ; we are on non space so at end of prev word 
10ef 21 87 fd				ld hl, input_cursor 
10f2 35					dec (hl) 
10f3 18 ea				jr .inspacep 
10f5			 
10f5			 
10f5			.incharp:	 
10f5					; eat the word to get to the start 
10f5 3a 87 fd				ld a,(input_cursor) 
10f8			;		cp 0 
10f8 b7					or a 
10f9 ca fd 0f				jp z, .inmain    ; start of string 
10fc			 
10fc			; if we are on a word, then move off of it 
10fc			 
10fc cd 4d 11				call input_curptr	 
10ff 7e					ld a, (hl) 
1100 fe 20				cp ' ' 
1102 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
1104 21 87 fd				ld hl, input_cursor 
1107 35					dec (hl) 
1108 18 eb				jr .incharp 
110a			.ipwordst: 
110a					; at space before the prev word so reposition over it 
110a 21 87 fd				ld hl, input_cursor 
110d 34					inc (hl) 
110e 18 b3				jr .inskpwn 
1110					 
1110			 
1110			 
1110			input_left: 
1110				; move cursor left 
1110 21 87 fd			ld hl, input_cursor 
1113 35				dec (hl) 
1114			;	cp 0 
1114			;	jp z, .inmain    ; ignore left as at the start of the string 
1114 c3 fd 0f			jp .inmain 
1117			 
1117			input_right: 
1117				; move cursor right 
1117				 
1117				;ld a, (input_size) 
1117				;ld b, a 
1117 21 87 fd			ld hl, input_cursor 
111a 34				inc (hl) 
111b				;dec b 
111b				;cp 0 
111b				;jp z, .inmain   ; ignore as at end of the string buffer 
111b				;ld a, b 
111b				;inc a 
111b				;ld (input_cursor), a 
111b c3 fd 0f			jp .inmain 
111e			 
111e			 
111e			 
111e			input_disp_ref: 
111e				; display the text from start of buffer (ie full refresh) 
111e 3a 96 fd			ld a, (input_at_pos) 
1121 2a 99 fd			ld hl,(input_start) 
1124 eb				ex de, hl 
1125 cd 8e 0d			call str_at_display  
1128 c9				ret 
1129			input_disp_oncur: 
1129				; display the text from cursor position to end of buffer 
1129				; TODO position start of string at cursor position on screen 
1129				; TODO draw from that point on 
1129 3a 87 fd			ld a, (input_cursor) 
112c 47				ld b, a 
112d 3a 96 fd			ld a, (input_at_pos) 
1130 80				add b 
1131 48				ld c, b     ; save a 
1132 78				ld a, b     ; inc string start for cursor 
1133 2a 99 fd			ld hl,(input_start) 
1136 cd ac 0f			call addatohl 
1139 eb				ex de, hl 
113a 79				ld a, c 
113b cd 8e 0d			call str_at_display  
113e c9				ret 
113f			 
113f			input_nxtw: 
113f				; Find next word 
113f c9				ret 
1140			 
1140			input_prvw: 
1140				; Find previous word 
1140 c9				ret 
1141			 
1141			input_lenrem:   
1141				; Calculate the length of string remaining from current cursor 
1141				; position to end of buffer (exc null term) 
1141				 
1141 3a 87 fd			ld a, (input_cursor) 
1144 4f				ld c, a 
1145 3a 98 fd			ld a, (input_size) 
1148 91				sub c 
1149 06 00			ld b, 0 
114b 0d				dec c 
114c c9				ret	 
114d			 
114d			input_curptr: 
114d				; calc address of the character under the cursor 
114d				 
114d 2a 99 fd			ld hl, (input_start) 
1150 3a 87 fd			ld a, (input_cursor) 
1153 cd ac 0f			call addatohl 
1156 c9				ret 
1157			 
1157			input_inschr: 
1157				; Insert char at cursor position 
1157 f5				push af   ; save char 
1158				;call input_lenrem    ; get bc length of remaining string 
1158			 
1158				 
1158 cd 4d 11			call input_curptr 
115b			;	ld hl, (input_start) 
115b			;	ld a, (input_cursor) 
115b			;	call addatohl 
115b				;push hl   ; save to come back to 
115b			 
115b				; shift everything up one to end of buffer 
115b			 
115b				;push hl 
115b				;dec de 
115b				;inc de 
115b			;	ldir 
115b				 
115b				;pop hl 
115b			 
115b				; are we adding to the end of line? 
115b			 
115b 3a 87 fd			ld a, (input_cursor) 
115e 47				ld b, a 
115f 3a 8c fd			ld a, (input_len) 
1162 b8				cp b 
1163 20 08			jr nz, .insmid   ; no, insert in middle of text 
1165			 
1165				; tack on the end of the line 
1165 f1				pop af 
1166 77				ld (hl), a   ; save new char 
1167 23				inc hl 
1168			;	ld a, 0 
1168 36 00			ld (hl), 0 
116a c3 17 11			jp input_right 
116d				 
116d			.insmid: 
116d				; hl has insertion point so move everything up one to allow for insertion 
116d				;call input_shiftright 
116d f1				pop af 
116e			 
116e			.shufinsmid: 
116e 47				ld b, a     ; b contains new char, c prev char at this position  
116f 7e				ld a, (hl) 
1170			 
1170			;	cp 0    ; at end of string need to then dump new char and add term 
1170 b7				or a 
1171 28 07			jr z, .endinsmid 
1173 4f				ld c, a 
1174 78				ld a, b 
1175 77				ld (hl), a 
1176 23				inc hl 
1177 79				ld a, c 
1178 18 f4			jr .shufinsmid 
117a				 
117a			 
117a			 
117a			 
117a			.endinsmid: 
117a 78				ld a, b 
117b 77				ld (hl), a 
117c 23				inc hl 
117d			;	ld a, 0 
117d 36 00			ld (hl), 0 
117f			 
117f			 
117f			;	ld (hl), a   ; save new char 
117f			 
117f c3 17 11			jp input_right 
1182			 
1182			;input_shiftright: 
1182			;	; shift text right at cursor, hl has shift start 
1182			;	push hl 
1182			;	push de 
1182			;	push bc 
1182			; 
1182			; 
1182			;	; move to end of string past zero term 
1182			;	ld hl,(input_start) 
1182			;	ld a, (input_len) 
1182			;	call addatohl 
1182			;	inc hl 
1182			;;	inc hl 
1182			;;	inc hl 
1182			;	ld a, 0 
1182			;	ld (hl), a 
1182			;;	dec hl 
1182			;	 
1182			;;	ld (hl), a 
1182			;;	dec hl 
1182			; 
1182			;	push hl 
1182			;	pop de 
1182			;	inc de 
1182			;	 
1182			; 
1182			;;	ld hl,(input_start) 
1182			;;	ld a, (input_cursor) 
1182			;;	call addatohl 
1182			; 
1182			; 
1182			;	; calc how many bytes from cursor pos to end of string we need to shift 
1182			;	call input_lenrem    ; get bc length of remaining string 
1182			;	;ld a, (input_cursor) 
1182			;	;ld c, a 
1182			;	ld a, (input_len) 
1182			;	cp 2 
1182			;	jr z, .iskipzero	 
1182			;	;sub c 
1182			;	;inc a 
1182			;	;ld c, a 
1182			;	;ld b, 0 
1182			;	inc c 
1182			;	inc c 
1182			;	; move data 
1182			;	lddr 
1182			;.iskipzero: 
1182			; 
1182			;	pop bc 
1182			;	pop de 
1182			;	pop hl 
1182			;	ret	 
1182			 
1182			input_delchar: 
1182				; Delete char at cursor position 
1182 cd 41 11			call input_lenrem    ; get bc length of remaining string 
1185 2a 99 fd			ld hl, (input_start) 
1188 3a 87 fd			ld a, (input_cursor) 
118b cd ac 0f			call addatohl 
118e			 
118e e5				push hl 
118f d1				pop de 
1190 1b				dec de 
1191			 
1191			.dl:	 
1191 ed a0			ldi  
1193 7e				ld a, (hl) 
1194			;	cp 0 
1194 b7				or a 
1195 28 02			jr z, .dldone 
1197 18 f8			jr .dl 
1199			.dldone: 
1199 ed a0			ldi 
119b			 
119b c3 10 11			jp input_left 
119e			 
119e			 
119e			endif 
119e			 
119e			 
119e			 
119e			if EDIT_V1 
119e			input_str: 
119e			 
119e				    	ld (input_at_pos),a      ; save display position to start 
119e					add c 
119e					ld (input_at_cursor),a	; save draw pos of cursor 
119e					ld (input_start), hl     ; save ptr to buffer 
119e					ld a, c 
119e					call addatohl 
119e					ld (input_ptr), hl     ; save ptr to point under the cursor 
119e					ld a,d 
119e				        ld (input_size), a       ; save length of input area 
119e					ld a, c 
119e					ld (input_cursor),a      ; init cursor start position  
119e					ld a,e 
119e				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
119e					 
119e					 
119e			 
119e			;		ld a,(input_ptr) 
119e			;		ld (input_under_cursor),a 	; save what is under the cursor 
119e			 
119e			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
119e					; init cursor shape if not set by the cin routines 
119e					ld hl, cursor_shape 
119e			if BASE_KEV 
119e					ld a, 255 
119e			else 
119e					ld a, '#' 
119e			endif 
119e					ld (hl), a 
119e					inc hl 
119e					ld a, 0 
119e					ld (hl), a 
119e			 
119e					ld a, CUR_BLINK_RATE 
119e					ld (input_cur_flash), a 
119e					ld a, 1 
119e					ld (input_cur_onoff),a 
119e			 
119e			;	if DEBUG_INPUT 
119e			;		push af 
119e			;		ld a, 'I' 
119e			;		ld (debug_mark),a 
119e			;		pop af 
119e			;		CALLMONITOR 
119e			;	endif 
119e			.is1:		; main entry loop 
119e			 
119e			 
119e			 
119e					; pause 1ms 
119e			 
119e					ld a, 1 
119e					call aDelayInMS 
119e			 
119e					; dec flash counter 
119e					ld a, (input_cur_flash) 
119e					dec a 
119e					ld (input_cur_flash), a 
119e			;		cp 0 
119e					or a 
119e					jr nz, .nochgstate 
119e			 
119e			 
119e					; change state 
119e					ld a,(input_cur_onoff) 
119e					neg 
119e					ld (input_cur_onoff),a 
119e			 
119e			 
119e					; reset on change of state 
119e					ld a, CUR_BLINK_RATE 
119e					ld (input_cur_flash), a 
119e			 
119e			.nochgstate: 
119e					 
119e					 
119e			 
119e					; display cursor  
119e			 
119e			;		ld hl, (input_start) 
119e			;		ld a, (input_cursor) 
119e			;		call addatohl 
119e			 
119e					; get char under cursor and replace with cursor 
119e			ld hl, (input_ptr) 
119e			;		ld a, (hl) 
119e			;		ld (input_under_cursor),a 
119e			;		ld a, '_' 
119e			;		ld (hl), a 
119e			 
119e					; display string 
119e			 
119e					ld de, (input_start) 
119e					ld a, (input_at_pos) 
119e					call str_at_display 
119e			;	        call update_display 
119e			 
119e					; find place to put the cursor 
119e			;		add h 
119e			;		ld l, display_row_1 
119e			;		sub l 
119e			; (input_at_pos) 
119e					;ld c, a 
119e			;		ld a, (input_cursor) 
119e			;		ld l, (input_at_pos) 
119e			;		;ld b, h 
119e			;		add l 
119e			;		ld (input_at_cursor),a 
119e					;ld l,h 
119e			 
119e			;		ld h, 0 
119e			;		ld l,(input_at_pos) 
119e			;		ld a, (input_cursor) 
119e			;		call addatohl 
119e			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
119e			;		call subafromhl 
119e			;		ld a,l 
119e			;		ld (input_at_cursor), a 
119e			 
119e				if DEBUG_INPUT 
119e					ld a, (hardware_diag) 
119e			;		cp 0 
119e					or a 
119e					jr z, .skip_input_diag 
119e			 
119e					ld a,(input_at_pos) 
119e					ld hl, LFSRSeed 
119e					call hexout 
119e					ld a, (input_cursor) 
119e					ld hl, LFSRSeed+2 
119e					call hexout 
119e					ld a,(input_at_cursor) 
119e					ld hl, LFSRSeed+4 
119e					call hexout 
119e			 
119e					ld a,(input_cur_onoff) 
119e					ld hl, LFSRSeed+6 
119e					call hexout 
119e			 
119e					ld a,(input_cur_flash) 
119e					ld hl, LFSRSeed+8 
119e					call hexout 
119e			 
119e					ld a,(input_len) 
119e					ld hl, LFSRSeed+10 
119e					call hexout 
119e					ld hl, LFSRSeed+12 
119e					ld a, 0 
119e					ld (hl),a 
119e					ld a, display_row_4 
119e					ld de, LFSRSeed 
119e					call str_at_display 
119e					.skip_input_diag: 
119e				endif 
119e			 
119e					; decide on if we are showing the cursor this time round 
119e			 
119e					ld a, (input_cur_onoff) 
119e					cp 255 
119e					jr z, .skipcur 
119e			 
119e			 
119e					ld a,(input_at_cursor) 
119e					ld de, cursor_shape 
119e					call str_at_display 
119e			 
119e					; save length of current input string 
119e					ld hl, (input_start) 
119e					ld a, 0 
119e					call strlent 
119e					ld a,l 
119e					ld (input_len),a 
119e			 
119e			.skipcur: 
119e			 
119e				        call update_display 
119e					 
119e			 
119e			 
119e					; wait 
119e				 
119e					; TODO loop without wait to flash the cursor and char under cursor	 
119e					call cin    ; _wait 
119e			 
119e			;		cp 0 
119e					or a 
119e					jp z, .is1 
119e			 
119e					; get ptr to char to input into 
119e			 
119e					ld c,a 
119e					ld hl, (input_start) 
119e					ld a, (input_cursor) 
119e					call addatohl 
119e					ld (input_ptr), hl 
119e					ld a,c 
119e			 
119e					; replace char under cursor 
119e			 
119e			;		ld hl, (input_ptr) 
119e			;		ld a, (input_under_cursor) 	; get what is under the cursor 
119e			;		ld (hl), a 
119e			 
119e			;	if DEBUG_INPUT 
119e			;		push af 
119e			;		ld a, 'i' 
119e			;		ld (debug_mark),a 
119e			;		pop af 
119e			;		CALLMONITOR 
119e			;	endif 
119e					cp KEY_HOME 
119e					jr nz, .iske 
119e			 
119e					ld a, (input_at_pos) 
119e					ld (input_at_cursor),a 
119e					ld a, 0 
119e					ld (input_cursor), a 
119e					jp .is1 
119e					 
119e			.iske:		cp KEY_END 
119e					jr nz, .isknw 
119e					jp .is1 
119e			 
119e			.isknw:		cp KEY_NEXTWORD 
119e					jr nz, .iskpw 
119e			 
119e			.isknwm:	ld hl, (input_ptr) 
119e					ld a,(hl)	 
119e			;		cp 0 
119e					or a 
119e					jp z, .is1    ; end of string 
119e					cp ' ' 
119e					jp z, .is1    ; end of word 
119e					inc hl 
119e					ld (input_ptr), hl 
119e					ld a, (input_at_cursor) 
119e					inc a 
119e					ld (input_at_cursor), a 
119e					jr .isknwm 
119e			 
119e			.iskpw:		cp KEY_PREVWORD 
119e					jr nz, .iskl 
119e			.iskpwm:	 
119e					ld hl, (input_ptr) 
119e					ld a,(hl)	 
119e			;		cp 0  
119e					or a 
119e					jp z, .is1    ; end of string 
119e					cp ' ' 
119e					jp z, .is1    ; end of word 
119e					dec hl 
119e					ld (input_ptr), hl 
119e					ld a, (input_at_cursor) 
119e					dec a 
119e					ld (input_at_cursor), a 
119e					jr .iskpwm 
119e			 
119e			 
119e			.iskl:		cp KEY_LEFT 
119e					jr nz, .isk1 
119e			 
119e					ld a, (input_cursor) 
119e			 
119e			;		cp 0 
119e					or a 
119e					jp z, .is1 		; at start of line to ignore  
119e			 
119e					dec  a 		; TODO check underflow 
119e					ld (input_cursor), a 
119e			 
119e					ld hl, (input_ptr) 
119e					dec hl 
119e					ld (input_ptr), hl 
119e					 
119e					ld a, (input_at_cursor) 
119e					dec a 
119e					ld (input_at_cursor), a 
119e			 
119e					ld a, 1		; show cursor moving 
119e					ld (input_cur_onoff),a 
119e					ld a, CUR_BLINK_RATE 
119e					ld (input_cur_flash), a 
119e			 
119e					jp .is1 
119e			 
119e			.isk1:		cp KEY_RIGHT 
119e					jr nz, .isk2 
119e			 
119e					ld a,(input_len)		; TODO BUG why cant i load e direct? 
119e					ld e,a 
119e					ld a, (input_cursor) 
119e					cp e 
119e					jp z, .is1		; at the end of string so dont go right 
119e			 
119e					inc  a 		; TODO check overflow 
119e					ld (input_cursor), a 
119e			 
119e					ld a, (input_at_cursor) 
119e					inc a 
119e					ld (input_at_cursor), a 
119e			 
119e					ld hl, (input_ptr) 
119e					inc hl 
119e					ld (input_ptr), hl 
119e			 
119e					ld a, 1		; show cursor moving 
119e					ld (input_cur_onoff),a 
119e					ld a, CUR_BLINK_RATE 
119e					ld (input_cur_flash), a 
119e			 
119e					jp .is1 
119e			 
119e			.isk2:		cp KEY_UP 
119e			 
119e					jr nz, .isk3 
119e			 
119e					; swap last command with the current on 
119e			 
119e					; move cursor to start of string 
119e					ld hl, (input_start) 
119e					ld (input_ptr), hl 
119e			 
119e					ld a, (input_at_pos) 
119e					ld (input_at_cursor), a 
119e			 
119e					ld a, 0 
119e					ld (input_cursor), a 
119e					 
119e					; swap input and last command buffers 
119e			 
119e					ld hl, os_cli_cmd 
119e					ld de, os_last_cmd 
119e					ld b, 255 
119e			.swap1:		ld a, (hl) 
119e					ld c,a 
119e					ld a, (de) 
119e					ld (hl), a 
119e					ld a,c 
119e					ld (de),a 
119e					inc hl 
119e					inc de 
119e					djnz .swap1 
119e			 
119e			 
119e			 
119e			 
119e			 
119e					jp .is1 
119e			 
119e			.isk3:		cp KEY_BS 
119e					jr nz, .isk4 
119e			 
119e					ld a, (input_cursor) 
119e			 
119e			;		cp 0 
119e					or a 
119e					jp z, .is1 		; at start of line to ignore  
119e			 
119e					dec  a 		; TODO check underflow 
119e					ld (input_cursor), a 
119e			 
119e					; hl is source 
119e					; de needs to be source - 1 
119e			 
119e			;		ld a, 0 
119e			;		dec hl 
119e			;		ld (hl), a 
119e			 
119e					ld hl, (input_ptr) 
119e					dec hl 
119e					ld (input_ptr), hl 
119e			 
119e					; shift all data 
119e			 
119e					push hl 
119e					inc hl 
119e					pop de 
119e					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
119e					ld c,a 
119e					ld b,0 
119e					ldir  
119e			 
119e			 
119e			 
119e			 
119e					ld a, (input_at_cursor) 
119e					dec a 
119e					ld (input_at_cursor), a 
119e			 
119e			 
119e					ld a, 1		; show cursor moving 
119e					ld (input_cur_onoff),a 
119e					ld a, CUR_BLINK_RATE 
119e					ld (input_cur_flash), a 
119e			 
119e					; remove char 
119e					ld a, (input_at_cursor) 
119e					inc a 
119e					ld de,.iblank 
119e					call str_at_display 
119e			 
119e					jp .is1 
119e			 
119e			.isk4:		cp KEY_CR 
119e					jr z, .endinput 
119e			 
119e					; else add the key press to the end 
119e			 
119e					ld c, a			; save key pressed 
119e			 
119e					ld a,(hl)		; get what is currently under char 
119e			 
119e			;		cp 0			; we are at the end of the string 
119e					or a 
119e					jr nz, .onchar 
119e					 
119e					; add a char to the end of the string 
119e				 
119e					ld (hl),c 
119e					inc hl 
119e			;		ld a,' ' 
119e			;		ld (hl),a 
119e			;		inc hl 
119e					ld a,0 
119e					ld (hl),a 
119e					dec hl 
119e			 
119e					ld a, (input_cursor) 
119e					inc a				; TODO check max string length and scroll  
119e					ld (input_cursor), a		; inc cursor pos 
119e							 
119e					ld a, (input_at_cursor) 
119e					inc a 
119e					ld (input_at_cursor), a 
119e			 
119e					ld hl, (input_ptr) 
119e					inc hl 
119e					ld (input_ptr), hl 
119e			 
119e					ld hl, (input_ptr) 
119e					inc hl 
119e					ld (input_ptr), hl 
119e			;	if DEBUG_INPUT 
119e			;		push af 
119e			;		ld a, '+' 
119e			;		ld (debug_mark),a 
119e			;		pop af 
119e			;		CALLMONITOR 
119e			;	endif 
119e					ld a, 1		; show cursor moving 
119e					ld (input_cur_onoff),a 
119e					ld a, CUR_BLINK_RATE 
119e					ld (input_cur_flash), a 
119e					jp .is1 
119e					 
119e			 
119e			 
119e					; if on a char then insert 
119e			.onchar: 
119e			 
119e					; TODO over flow check: make sure insert does not blow out buffer 
119e			 
119e					; need to do some maths to use lddr 
119e			 
119e					push hl   ; save char pos 
119e					push bc 
119e			 
119e					ld hl, (input_start) 
119e					ld a, (input_len) 
119e					call addatohl  		; end of string 
119e					inc hl 
119e					inc hl		; past zero term 
119e					push hl 
119e					inc hl 
119e					push hl  
119e			 
119e								; start and end of lddr set, now how much to move? 
119e			 
119e							 
119e					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
119e					ld b,a 
119e					ld a,(input_len) 
119e					ld e,a 
119e					sub b 
119e					inc a		;?? 
119e					inc a		;?? 
119e					inc a		;?? 
119e			 
119e					ld b,0 
119e					ld c,a 
119e			 
119e				if DEBUG_INPUT 
119e					push af 
119e					ld a, 'i' 
119e					ld (debug_mark),a 
119e					pop af 
119e			;		CALLMONITOR 
119e				endif 
119e					pop de 
119e					pop hl 
119e				if DEBUG_INPUT 
119e					push af 
119e					ld a, 'I' 
119e					ld (debug_mark),a 
119e					pop af 
119e			;		CALLMONITOR 
119e				endif 
119e					lddr 
119e				 
119e			 
119e			 
119e					; TODO have a key for insert/overwrite mode???? 
119e					pop bc 
119e					pop hl 
119e					ld (hl), c		; otherwise overwrite current char 
119e					 
119e			 
119e			 
119e			 
119e					ld a, (input_cursor) 
119e					inc  a 		; TODO check overflow 
119e					ld (input_cursor), a 
119e			 
119e					ld a, (input_at_cursor) 
119e					inc a 
119e					ld (input_at_cursor), a 
119e			 
119e					jp .is1 
119e			 
119e			.endinput:	; TODO look for end of string 
119e			 
119e					; add trailing space for end of token 
119e			 
119e					ld hl, (input_start) 
119e					ld a,(input_len) 
119e					call addatohl 
119e					ld a, ' ' 
119e					ld (hl),a 
119e					; TODO eof of parse marker 
119e			 
119e					inc hl 
119e					ld a, 0 
119e					ld (hl),a 
119e			 
119e			 
119e					ret 
119e			 
119e			.iblank: db " ",0 
119e			 
119e			 
119e			input_str_prev:	ld (input_at_pos), a 
119e					ld (input_start), hl 
119e					ld a,1			; add cursor 
119e					ld (hl),a 
119e					inc hl 
119e					ld a,0 
119e					ld (hl),a 
119e					ld (input_ptr), hl 
119e					ld a,d 
119e					ld (input_size), a 
119e					ld a,0 
119e					ld (input_cursor),a 
119e			.instr1:	 
119e			 
119e					; TODO do block cursor 
119e					; TODO switch cursor depending on the modifer key 
119e			 
119e					; update cursor shape change on key hold 
119e			 
119e					ld hl, (input_ptr) 
119e					dec hl 
119e					ld a,(cursor_shape) 
119e					ld (hl), a 
119e			 
119e					; display entered text 
119e					ld a,(input_at_pos) 
119e			            	CALL fLCD_Pos       ;Position cursor to location in A 
119e			            	LD   de, (input_start) 
119e			            	CALL fLCD_Str       ;Display string pointed to by DE 
119e			 
119e					call cin 
119e			;		cp 0 
119e					or a 
119e					jr z, .instr1 
119e			 
119e					; proecess keyboard controls first 
119e			 
119e					ld hl,(input_ptr) 
119e			 
119e					cp KEY_CR	 ; pressing enter ends input 
119e					jr z, .instrcr 
119e			 
119e					cp KEY_BS 	; back space 
119e					jr nz, .instr2 
119e					; process back space 
119e			 
119e					; TODO stop back space if at start of string 
119e					dec hl 
119e					dec hl ; to over write cursor 
119e					ld a,(cursor_shape) 
119e					;ld a,0 
119e					ld (hl),a 
119e					inc hl 
119e					ld a," " 
119e					ld (hl),a 
119e					ld (input_ptr),hl 
119e					 
119e			 
119e					jr .instr1 
119e			 
119e			.instr2:	cp KEY_LEFT    ; cursor left 
119e					jr nz, .instr3 
119e					dec hl 
119e					ld (input_ptr),hl 
119e					jr .instr1 
119e				 
119e			.instr3:	cp KEY_RIGHT      ; cursor right 
119e					jr nz, .instr4 
119e					inc hl 
119e					ld (input_ptr),hl 
119e					jr .instr1 
119e			 
119e			.instr4:	cp KEY_HOME    ; jump to start of line 
119e					jr nz, .instr5 
119e					dec hl 
119e					ld (input_ptr),hl 
119e					jr .instr1 
119e			 
119e			.instr5:	cp KEY_END     ; jump to end of line 
119e					jr nz, .instr6 
119e					dec hl 
119e					ld (input_ptr),hl 
119e					jr .instr1 
119e			.instr6:        cp KEY_UP      ; recall last command 
119e					jr nz, .instrnew 
119e			 
119e				ld hl, scratch 
119e				ld de, os_last_cmd 
119e				call strcpy 
119e					jr .instr1 
119e			 
119e			 
119e			.instrnew:	; no special key pressed to see if we have room to store it 
119e			 
119e					; TODO do string size test 
119e			 
119e					dec hl ; to over write cursor 
119e					ld (hl),a 
119e					inc hl 
119e					ld a,(cursor_shape) 
119e					ld (hl),a 
119e					inc hl 
119e					ld a,0 
119e					ld (hl),a 
119e			 
119e					ld (input_ptr),hl 
119e					 
119e					jr .instr1 
119e			.instrcr:	dec hl		; remove cursor 
119e					ld a,' '	; TODO add a trailing space for safety 
119e					ld (hl),a 
119e					inc hl 
119e					ld a,0 
119e					ld (hl),a 
119e			 
119e			 
119e					; if at end of line scroll up    
119e					; TODO detecting only end of line 4 for scroll up  
119e			 
119e					;ld   
119e			 
119e					ret 
119e			 
119e			 
119e			endif 
119e			; strcpy hl = dest, de source 
119e			 
119e 1a			strcpy:   LD   A, (DE)        ;Get character from string 
119f b7			            OR   A              ;Null terminator? 
11a0 c8			            RET  Z              ;Yes, so finished 
11a1 1a					ld a,(de) 
11a2 77					ld (hl),a 
11a3 13			            INC  DE             ;Point to next character 
11a4 23					inc hl 
11a5 18 f7		            JR   strcpy       ;Repeat 
11a7 c9					ret 
11a8			 
11a8			 
11a8			; TODO string_at  
11a8			; pass string which starts with lcd offset address and then null term string 
11a8			 
11a8			; TODO string to dec 
11a8			; TODO string to hex 
11a8			; TODO byte to string hex 
11a8			; TODO byte to string dec 
11a8			 
11a8			 
11a8			 
11a8			; from z80uartmonitor 
11a8			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11a8			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
11a8			; pass hl for where to put the text 
11a8			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11a8 c5			hexout:	PUSH BC 
11a9 f5					PUSH AF 
11aa 47					LD B, A 
11ab					; Upper nybble 
11ab cb 3f				SRL A 
11ad cb 3f				SRL A 
11af cb 3f				SRL A 
11b1 cb 3f				SRL A 
11b3 cd c3 11				CALL tohex 
11b6 77					ld (hl),a 
11b7 23					inc hl	 
11b8					 
11b8					; Lower nybble 
11b8 78					LD A, B 
11b9 e6 0f				AND 0FH 
11bb cd c3 11				CALL tohex 
11be 77					ld (hl),a 
11bf 23					inc hl	 
11c0					 
11c0 f1					POP AF 
11c1 c1					POP BC 
11c2 c9					RET 
11c3					 
11c3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11c3			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
11c3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11c3			tohex: 
11c3 e5					PUSH HL 
11c4 d5					PUSH DE 
11c5 16 00				LD D, 0 
11c7 5f					LD E, A 
11c8 21 d0 11				LD HL, .DATA 
11cb 19					ADD HL, DE 
11cc 7e					LD A, (HL) 
11cd d1					POP DE 
11ce e1					POP HL 
11cf c9					RET 
11d0			 
11d0			.DATA: 
11d0 30					DEFB	30h	; 0 
11d1 31					DEFB	31h	; 1 
11d2 32					DEFB	32h	; 2 
11d3 33					DEFB	33h	; 3 
11d4 34					DEFB	34h	; 4 
11d5 35					DEFB	35h	; 5 
11d6 36					DEFB	36h	; 6 
11d7 37					DEFB	37h	; 7 
11d8 38					DEFB	38h	; 8 
11d9 39					DEFB	39h	; 9 
11da 41					DEFB	41h	; A 
11db 42					DEFB	42h	; B 
11dc 43					DEFB	43h	; C 
11dd 44					DEFB	44h	; D 
11de 45					DEFB	45h	; E 
11df 46					DEFB	46h	; F 
11e0			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
11e0			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
11e0			;;    subtract $30, if result > 9 then subtract $7 more 
11e0			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
11e0			atohex: 
11e0 d6 30				SUB $30 
11e2 fe 0a				CP 10 
11e4 f8					RET M		; If result negative it was 0-9 so we're done 
11e5 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
11e7 c9					RET		 
11e8			 
11e8			 
11e8			 
11e8			 
11e8			; Get 2 ASCII characters as hex byte from pointer in hl 
11e8			 
11e8			BYTERD: 
11e8 16 00			LD	D,00h		;Set up 
11ea cd f2 11			CALL	HEXCON		;Get byte and convert to hex 
11ed 87				ADD	A,A		;First nibble so 
11ee 87				ADD	A,A		;multiply by 16 
11ef 87				ADD	A,A		; 
11f0 87				ADD	A,A		; 
11f1 57				LD	D,A		;Save hi nibble in D 
11f2			HEXCON: 
11f2 7e				ld a, (hl)		;Get next chr 
11f3 23				inc hl 
11f4 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
11f6 fe 0a			CP	00Ah		;Is it 0-9 ? 
11f8 38 02			JR	C,NALPHA	;If so miss next bit 
11fa d6 07			SUB	007h		;Else convert alpha 
11fc			NALPHA: 
11fc b2				OR	D		;Add hi nibble back 
11fd c9				RET			; 
11fe			 
11fe			 
11fe			; 
11fe			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
11fe			; Since the routines get_byte and therefore get_nibble are called, only valid 
11fe			; characters (0-9a-f) are accepted. 
11fe			; 
11fe			;get_word        push    af 
11fe			;                call    get_byte        ; Get the upper byte 
11fe			;                ld      h, a 
11fe			;                call    get_byte        ; Get the lower byte 
11fe			;                ld      l, a 
11fe			;                pop     af 
11fe			;                ret 
11fe			; 
11fe			; Get a byte in hexadecimal notation. The result is returned in A. Since 
11fe			; the routine get_nibble is used only valid characters are accepted - the  
11fe			; input routine only accepts characters 0-9a-f. 
11fe			; 
11fe c5			get_byte:        push    bc              ; Save contents of B (and C) 
11ff 7e					ld a,(hl) 
1200 23					inc hl 
1201 cd 26 12		                call    nibble2val      ; Get upper nibble 
1204 cb 07		                rlc     a 
1206 cb 07		                rlc     a 
1208 cb 07		                rlc     a 
120a cb 07		                rlc     a 
120c 47			                ld      b, a            ; Save upper four bits 
120d 7e					ld a,(hl) 
120e cd 26 12		                call    nibble2val      ; Get lower nibble 
1211 b0			                or      b               ; Combine both nibbles 
1212 c1			                pop     bc              ; Restore B (and C) 
1213 c9			                ret 
1214			; 
1214			; Get a hexadecimal digit from the serial line. This routine blocks until 
1214			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1214			; to the serial line interface. The lower 4 bits of A contain the value of  
1214			; that particular digit. 
1214			; 
1214			;get_nibble      ld a,(hl)           ; Read a character 
1214			;                call    to_upper        ; Convert to upper case 
1214			;                call    is_hex          ; Was it a hex digit? 
1214			;                jr      nc, get_nibble  ; No, get another character 
1214			 ;               call    nibble2val      ; Convert nibble to value 
1214			 ;               call    print_nibble 
1214			 ;               ret 
1214			; 
1214			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1214			; A valid hexadecimal digit is denoted by a set C flag. 
1214			; 
1214			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1214			;                ret     nc              ; Yes 
1214			;                cp      '0'             ; Less than '0'? 
1214			;                jr      nc, is_hex_1    ; No, continue 
1214			;                ccf                     ; Complement carry (i.e. clear it) 
1214			;                ret 
1214			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1214			;                ret     c               ; Yes 
1214			;                cp      'A'             ; Less than 'A'? 
1214			;                jr      nc, is_hex_2    ; No, continue 
1214			;                ccf                     ; Yes - clear carry and return 
1214			;                ret 
1214			;is_hex_2        scf                     ; Set carry 
1214			;                ret 
1214			; 
1214			; Convert a single character contained in A to upper case: 
1214			; 
1214 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1216 d8			                ret     c 
1217 fe 7b		                cp      'z' + 1         ; > 'z'? 
1219 d0			                ret     nc              ; Nothing to do, either 
121a e6 5f		                and     $5f             ; Convert to upper case 
121c c9			                ret 
121d			 
121d			 
121d			to_lower: 
121d			 
121d			   ; if char is in [A-Z] make it lower case 
121d			 
121d			   ; enter : a = char 
121d			   ; exit  : a = lower case char 
121d			   ; uses  : af 
121d			 
121d fe 41		   cp 'A' 
121f d8			   ret c 
1220			    
1220 fe 5b		   cp 'Z'+1 
1222 d0			   ret nc 
1223			    
1223 f6 20		   or $20 
1225 c9			   ret 
1226			 
1226			; 
1226			; Expects a hexadecimal digit (upper case!) in A and returns the 
1226			; corresponding value in A. 
1226			; 
1226 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1228 38 02		                jr      c, nibble2val_1 ; Yes 
122a d6 07		                sub     7               ; Adjust for A-F 
122c d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
122e e6 0f		                and     $f              ; Only return lower 4 bits 
1230 c9			                ret 
1231			; 
1231			; Print_nibble prints a single hex nibble which is contained in the lower  
1231			; four bits of A: 
1231			; 
1231			;print_nibble    push    af              ; We won't destroy the contents of A 
1231			;                and     $f              ; Just in case... 
1231			;                add     a, '0'             ; If we have a digit we are done here. 
1231			;                cp      '9' + 1         ; Is the result > 9? 
1231			;                jr      c, print_nibble_1 
1231			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1231			;print_nibble_1  call    putc            ; Print the nibble and 
1231			;                pop     af              ; restore the original value of A 
1231			;                ret 
1231			;; 
1231			;; Send a CR/LF pair: 
1231			; 
1231			;crlf            push    af 
1231			;                ld      a, cr 
1231			;                call    putc 
1231			;                ld      a, lf 
1231			;                call    putc 
1231			;                pop     af 
1231			;                ret 
1231			; 
1231			; Print_word prints the four hex digits of a word to the serial line. The  
1231			; word is expected to be in HL. 
1231			; 
1231			;print_word      push    hl 
1231			;                push    af 
1231			;                ld      a, h 
1231			;                call    print_byte 
1231			;                ld      a, l 
1231			;                call    print_byte 
1231			;                pop     af 
1231			;                pop     hl 
1231			;                ret 
1231			; 
1231			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1231			; The byte to be printed is expected to be in A. 
1231			; 
1231			;print_byte      push    af              ; Save the contents of the registers 
1231			;                push    bc 
1231			;                ld      b, a 
1231			;                rrca 
1231			;                rrca 
1231			;                rrca 
1231			;                rrca 
1231			;                call    print_nibble    ; Print high nibble 
1231			;                ld      a, b 
1231			;                call    print_nibble    ; Print low nibble 
1231			;                pop     bc              ; Restore original register contents 
1231			;                pop     af 
1231			;                ret 
1231			 
1231			 
1231			 
1231			 
1231			 
1231			fourehexhl:  
1231 7e				ld a,(hl) 
1232 cd e0 11			call atohex 
1235 cb 3f				SRL A 
1237 cb 3f				SRL A 
1239 cb 3f				SRL A 
123b cb 3f				SRL A 
123d 47				ld b, a 
123e 23				inc hl 
123f 7e				ld a,(hl) 
1240 23				inc hl 
1241 cd e0 11			call atohex 
1244 80				add b 
1245 57				ld d,a 
1246 7e				ld a,(hl) 
1247 cd e0 11			call atohex 
124a cb 3f				SRL A 
124c cb 3f				SRL A 
124e cb 3f				SRL A 
1250 cb 3f				SRL A 
1252 47				ld b, a 
1253 23				inc hl 
1254 7e				ld a,(hl) 
1255 23				inc hl 
1256 cd e0 11			call atohex 
1259 80				add b 
125a 5f				ld e, a 
125b d5				push de 
125c e1				pop hl 
125d c9				ret 
125e			 
125e			; pass hl. returns z set if the byte at hl is a digit 
125e			;isdigithl:  
125e			;	push bc 
125e			;	ld a,(hl) 
125e			;	cp ':' 
125e			;	jr nc, .isdf 		; > 
125e			;	cp '0' 
125e			;	jr c, .isdf		; < 
125e			; 
125e			;	; TODO find a better way to set z 
125e			; 
125e			;	ld b,a 
125e			;	cp b 
125e			;	pop bc 
125e			;	ret 
125e			; 
125e			;.isdf:	; not digit so clear z 
125e			; 
125e			;	; TODO find a better way to unset z 
125e			; 
125e			;	ld b,a 
125e			;	inc b 
125e			;	cp b 
125e			; 
125e			;	pop bc 
125e			;	ret 
125e				 
125e				 
125e			 
125e			 
125e			; pass hl as the four byte address to load 
125e			 
125e			get_word_hl:  
125e e5				push hl 
125f cd fe 11			call get_byte 
1262				 
1262 47				ld b, a 
1263			 
1263 e1				pop hl 
1264 23				inc hl 
1265 23				inc hl 
1266			 
1266			; TODO not able to handle a-f  
1266 7e				ld a,(hl) 
1267			;	;cp ':' 
1267			;	cp 'g' 
1267			;	jr nc, .single_byte_hl 		; > 
1267			;	cp 'G' 
1267			;	jr nc, .single_byte_hl 		; > 
1267			;	cp '0' 
1267			;	jr c, .single_byte_hl		; < 
1267			 
1267				;call isdigithl 
1267			;	cp 0 
1267 b7				or a 
1268 28 06			jr z, .single_byte_hl 
126a			 
126a			.getwhln:   ; hex word so get next byte 
126a			 
126a cd fe 11			call get_byte 
126d 6f				ld l, a 
126e 60				ld h,b 
126f c9				ret 
1270 68			.single_byte_hl:   ld l,b 
1271 26 00				ld h,0 
1273 c9					ret 
1274			 
1274			 
1274			 
1274			 
1274 21 4f 1c			ld hl,asc+1 
1277			;	ld a, (hl) 
1277			;	call nibble2val 
1277 cd fe 11			call get_byte 
127a			 
127a			;	call fourehexhl 
127a 32 27 f1			ld (scratch+52),a 
127d				 
127d 21 25 f1			ld hl,scratch+50 
1280 22 16 f4			ld (os_cur_ptr),hl 
1283			 
1283 c9				ret 
1284			 
1284			 
1284			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
1284			 
1284			; Decimal Unsigned Version 
1284			 
1284			;Number in a to decimal ASCII 
1284			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
1284			;Example: display a=56 as "056" 
1284			;input: a = number 
1284			;Output: a=0,value of a in the screen 
1284			;destroys af,bc (don't know about hl and de) 
1284			DispAToASCII: 
1284 0e 9c			ld	c,-100 
1286 cd 90 12			call	.Na1 
1289 0e f6			ld	c,-10 
128b cd 90 12			call	.Na1 
128e 0e ff			ld	c,-1 
1290 06 2f		.Na1:	ld	b,'0'-1 
1292 04			.Na2:	inc	b 
1293 81				add	a,c 
1294 38 fc			jr	c,.Na2 
1296 91				sub	c		;works as add 100/10/1 
1297 f5				push af		;safer than ld c,a 
1298 78				ld	a,b		;char is in b 
1299			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
1299 f1				pop af		;safer than ld a,c 
129a c9				ret 
129b			 
129b			; Decimal Signed Version 
129b			 
129b			; DispA 
129b			; -------------------------------------------------------------- 
129b			; Converts a signed integer value to a zero-terminated ASCII 
129b			; string representative of that value (using radix 10). 
129b			; -------------------------------------------------------------- 
129b			; INPUTS: 
129b			;     HL     Value to convert (two's complement integer). 
129b			;     DE     Base address of string destination. (pointer). 
129b			; -------------------------------------------------------------- 
129b			; OUTPUTS: 
129b			;     None 
129b			; -------------------------------------------------------------- 
129b			; REGISTERS/MEMORY DESTROYED 
129b			; AF HL 
129b			; -------------------------------------------------------------- 
129b			 
129b			;DispHLToASCII: 
129b			;   push    de 
129b			;   push    bc 
129b			; 
129b			;; Detect sign of HL. 
129b			;    bit    7, h 
129b			;    jr     z, ._DoConvert 
129b			; 
129b			;; HL is negative. Output '-' to string and negate HL. 
129b			;    ld     a, '-' 
129b			;    ld     (de), a 
129b			;    inc    de 
129b			; 
129b			;; Negate HL (using two's complement) 
129b			;    xor    a 
129b			;    sub    l 
129b			;    ld     l, a 
129b			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
129b			;    sbc    a, h 
129b			;    ld     h, a 
129b			; 
129b			;; Convert HL to digit characters 
129b			;._DoConvert: 
129b			;    ld     b, 0     ; B will count character length of number 
129b			;-   ld     a, 10 
129b			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
129b			;    push   af 
129b			;    inc    b 
129b			;    ld     a, h 
129b			;    or     l 
129b			;    jr     nz, - 
129b			; 
129b			;; Retrieve digits from stack 
129b			;-   pop    af 
129b			;    or     $30 
129b			;    ld     (de), a 
129b			;    inc    de 
129b			;    djnz   - 
129b			; 
129b			;; Terminate string with NULL 
129b			;    xor    a 
129b			;    ld     (de), a 
129b			; 
129b			;    pop    bc 
129b			;    pop    de 
129b			;    ret 
129b			 
129b			;Comments 
129b			; 
129b			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
129b			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
129b			;    Note that the output string will not be fixed-width. 
129b			; 
129b			;Example Usage 
129b			; 
129b			;    ld    hl, -1004 
129b			;    ld    de, OP1 
129b			;    call  DispA 
129b			;    ld    hl, OP1 
129b			;    syscall  PutS 
129b			 
129b			 
129b			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
129b			 
129b			 
129b			;Converts an ASCII string to an unsigned 16-bit integer 
129b			;Quits when it reaches a non-decimal digit 
129b			 
129b			string_to_uint16: 
129b			atoui_16: 
129b			;Input: 
129b			;     DE points to the string 
129b			;Outputs: 
129b			;     HL is the result 
129b			;     A is the 8-bit value of the number 
129b			;     DE points to the byte after the number 
129b			;Destroys: 
129b			;     BC 
129b			;       if the string is non-empty, BC is HL/10 
129b			;Size:  24 bytes 
129b			;Speed: 42+d(104+{0,9}) 
129b			;       d is the number of digits in the number 
129b			;       max is 640 cycles for a 5 digit number 
129b			;Assuming no leading zeros: 
129b			;1 digit:  146cc 
129b			;2 digit:  250cc 
129b			;3 digit:  354cc or 363cc (avg: 354.126cc) 
129b			;4 digit:  458cc or 467cc (avg: 458.27cc) 
129b			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
129b			;avg: 544.81158447265625cc (544+13297/16384) 
129b			;=============================================================== 
129b 21 00 00		  ld hl,0 
129e			.u16a: 
129e 1a			  ld a,(de) 
129f d6 30		  sub 30h 
12a1 fe 0a		  cp 10 
12a3 d0			  ret nc 
12a4 13			  inc de 
12a5 44			  ld b,h 
12a6 4d			  ld c,l 
12a7 29			  add hl,hl 
12a8 29			  add hl,hl 
12a9 09			  add hl,bc 
12aa 29			  add hl,hl 
12ab 85			  add a,l 
12ac 6f			  ld l,a 
12ad 30 ef		  jr nc,.u16a 
12af 24			  inc h 
12b0 c3 9e 12		  jp .u16a 
12b3			 
12b3			 
12b3			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12b3			 
12b3			;written by Zeda 
12b3			;Converts a 16-bit unsigned integer to an ASCII string. 
12b3			 
12b3			uitoa_16: 
12b3			;Input: 
12b3			;   DE is the number to convert 
12b3			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
12b3			;Output: 
12b3			;   HL points to the null-terminated ASCII string 
12b3			;      NOTE: This isn't necessarily the same as the input HL. 
12b3 d5			  push de 
12b4 c5			  push bc 
12b5 f5			  push af 
12b6 eb			  ex de,hl 
12b7			 
12b7 01 f0 d8		  ld bc,-10000 
12ba 3e 2f		  ld a,'0'-1 
12bc 3c			  inc a 
12bd 09			  add hl,bc  
12be 38 fc		   jr c,$-2 
12c0 12			  ld (de),a 
12c1 13			  inc de 
12c2			 
12c2 01 e8 03		  ld bc,1000 
12c5 3e 3a		  ld a,'9'+1 
12c7 3d			  dec a  
12c8 09			  add hl,bc  
12c9 30 fc		   jr nc,$-2 
12cb 12			  ld (de),a 
12cc 13			  inc de 
12cd			 
12cd 01 9c ff		  ld bc,-100 
12d0 3e 2f		  ld a,'0'-1 
12d2 3c			  inc a  
12d3 09			  add hl,bc  
12d4 38 fc		   jr c,$-2 
12d6 12			  ld (de),a 
12d7 13			  inc de 
12d8			 
12d8 7d			  ld a,l 
12d9 26 3a		  ld h,'9'+1 
12db 25			  dec h  
12dc c6 0a		  add a,10  
12de 30 fb		   jr nc,$-3 
12e0 c6 30		  add a,'0' 
12e2 eb			  ex de,hl 
12e3 72			  ld (hl),d 
12e4 23			  inc hl 
12e5 77			  ld (hl),a 
12e6 23			  inc hl 
12e7 36 00		  ld (hl),0 
12e9			 
12e9			;Now strip the leading zeros 
12e9 0e fa		  ld c,-6 
12eb 09			  add hl,bc 
12ec 3e 30		  ld a,'0' 
12ee 23			  inc hl  
12ef be			  cp (hl)  
12f0 28 fc		  jr z,$-2 
12f2			 
12f2			;Make sure that the string is non-empty! 
12f2 7e			  ld a,(hl) 
12f3 b7			  or a 
12f4 20 01		  jr nz,.atoub 
12f6 2b			  dec hl 
12f7			.atoub: 
12f7			 
12f7 f1			  pop af 
12f8 c1			  pop bc 
12f9 d1			  pop de 
12fa c9			  ret 
12fb			 
12fb			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
12fb			 
12fb			toUpper: 
12fb			;A is the char. 
12fb			;If A is a lowercase letter, this sets it to the matching uppercase 
12fb			;18cc or 30cc or 41cc 
12fb			;avg: 26.75cc 
12fb fe 61		  cp 'a' 
12fd d8			  ret c 
12fe fe 7b		  cp 'z'+1 
1300 d0			  ret nc 
1301 d6 20		  sub 'a'-'A' 
1303 c9			  ret 
1304			 
1304			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1304			 
1304			; String Length 
1304			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1304			 
1304			; Get the length of the null-terminated string starting at $8000 hl 
1304			;    LD     HL, $8000 
1304			 
1304			strlenz: 
1304			 
1304 af			    XOR    A               ; Zero is the value we are looking for. 
1305 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1306 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1307			                           ; 65, 536 bytes (the entire addressable memory space). 
1307 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1309			 
1309			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1309 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
130a 6f			    LD     L, A             ; number of bytes 
130b ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
130d 2b			    DEC    HL              ; Compensate for null. 
130e c9				ret 
130f			 
130f			; Get the length of the A terminated string starting at $8000 hl 
130f			;    LD     HL, $8000 
130f			 
130f			strlent: 
130f			 
130f			                  ; A is the value we are looking for. 
130f 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1311 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1313			                           ; 65, 536 bytes (the entire addressable memory space). 
1313 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1315			 
1315			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1315 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1317 2e 00		    LD     L, 0             ; number of bytes 
1319 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
131b 2b			    DEC    HL              ; Compensate for null. 
131c c9				ret 
131d			 
131d			 
131d			;Comparing Strings 
131d			 
131d			;IN    HL     Address of string1. 
131d			;      DE     Address of string2. 
131d			 
131d			; doc given but wrong??? 
131d			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
131d			;      carry  Set if string1 > string2, reset if string1 <= string2. 
131d			; tested 
131d			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
131d			 
131d			strcmp_old: 
131d e5			    PUSH   HL 
131e d5			    PUSH   DE 
131f			 
131f 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1320 be			    CP     (HL)            ; (want to minimize work). 
1321 38 01		    JR     C, Str1IsBigger 
1323 7e			    LD     A, (HL) 
1324			 
1324			Str1IsBigger: 
1324 4f			    LD     C, A             ; Put length in BC 
1325 06 00		    LD     B, 0 
1327 13			    INC    DE              ; Increment pointers to meat of string. 
1328 23			    INC    HL 
1329			 
1329			CmpLoop: 
1329 1a			    LD     A, (DE)          ; Compare bytes. 
132a ed a1		    CPI 
132c 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
132e 13			    INC    DE              ; Update pointer. 
132f ea 29 13		    JP     PE, CmpLoop 
1332			 
1332 d1			    POP    DE 
1333 e1			    POP    HL 
1334 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1335 be			    CP     (HL) 
1336 c9			    RET 
1337			 
1337			NoMatch: 
1337 2b			    DEC    HL 
1338 be			    CP     (HL)            ; Compare again to affect carry. 
1339 d1			    POP    DE 
133a e1			    POP    HL 
133b c9			    RET 
133c			 
133c			;; test strmp 
133c			; 
133c			;ld de, .str1 
133c			;ld hl, .str2 
133c			;call strcmp 
133c			;jr z, .z1 
133c			;;this 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "NZ1" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			;.z1: 
133c			; 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "ZZ1" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			; 
133c			;ld de, .str1 
133c			;ld hl, .str1 
133c			;call strcmp 
133c			;jr z, .z2 
133c			;;this 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "NZ2" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			;.z2: 
133c			; 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "ZZ2" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			; 
133c			;ld de, .str1 
133c			;ld hl, .str2 
133c			;call strcmp 
133c			;jr c, .c1 
133c			; 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "Nc1" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			;.c1: 
133c			;;this 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "cc1" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			; 
133c			;ld de, .str1 
133c			;ld hl, .str1 
133c			;call strcmp 
133c			;jr c, .c2 
133c			;;this 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "Nc2" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			;.c2: 
133c			; 
133c			;	if DEBUG_FORTH_WORDS 
133c			;		DMARK "cc2" 
133c			;		CALLMONITOR 
133c			;	endif 
133c			;	NEXTW 
133c			;.str1:   db "string1",0 
133c			;.str2:   db "string2",0 
133c			 
133c			; only care about direct match or not 
133c			; hl and de strings 
133c			; zero set if the same 
133c			 
133c			strcmp: 
133c 1a				ld a, (de) 
133d be				cp (hl) 
133e 28 02			jr z, .ssame 
1340 b7				or a 
1341 c9				ret 
1342			 
1342			.ssame:  
1342			;	cp 0 
1342 b7				or a 
1343 c8				ret z 
1344			 
1344 23				inc hl 
1345 13				inc de 
1346 18 f4			jr strcmp 
1348				 
1348				 
1348			 
1348			;Copyright (c) 2014, Luke Maurits 
1348			;All rights reserved. 
1348			; 
1348			;Redistribution and use in source and binary forms, with or without 
1348			;modification, are permitted provided that the following conditions are met: 
1348			; 
1348			;* Redistributions of source code must retain the above copyright notice, this 
1348			;  list of conditions and the following disclaimer. 
1348			; 
1348			;* Redistributions in binary form must reproduce the above copyright notice, 
1348			;  this list of conditions and the following disclaimer in the documentation 
1348			;  and/or other materials provided with the distribution. 
1348			; 
1348			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
1348			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
1348			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
1348			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
1348			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
1348			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
1348			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
1348			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
1348			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
1348			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
1348			 
1348			; https://github.com/lmaurits/lm512/blob/master/string.z80 
1348			 
1348			StrictStrCmp: 
1348				; Load next chars of each string 
1348 1a				ld a, (de) 
1349 47				ld b, a 
134a 7e				ld a, (hl) 
134b				; Compare 
134b b8				cp b 
134c				; Return non-zero if chars don't match 
134c c0				ret nz 
134d				; Check for end of both strings 
134d fe 00			cp "\0" 
134f				; Return if strings have ended 
134f c8				ret z 
1350				; Otherwise, advance to next chars 
1350 23				inc hl 
1351 13				inc de 
1352 18 f4			jr StrictStrCmp 
1354			 
1354			;end 
1354			; eof 
1354			 
1354			 
1354			 
1354			 
1354			 
1354			 
# End of file firmware_strings.asm
1354			include "firmware_memory.asm"   ; malloc and free  
1354			 
1354			if DEBUG_FORTH_MALLOC_HIGH 
1354			.mallocsize: db "Wants malloc >256",0 
1354			.mallocasize: db "MALLOC gives >256",0 
1354			.malloczero: db "MALLOC gives zero",0 
1354			 
1354			malloc_guard_zerolen: 
1354				push hl 
1354				push de 
1354				push af 
1354			 
1354				ld de, 0 
1354			        call cmp16 
1354				jr nz, .lowalloz 
1354			 
1354				push hl 
1354				push de 
1354					ld hl, display_fb0 
1354					ld (display_fb_active), hl 
1354				call clear_display 
1354				ld a, 0 
1354				ld de, .malloczero 
1354				call str_at_display 
1354				call update_display 
1354				call delay1s 
1354				call delay1s 
1354				call bp_on 
1354			;	ld a, 0 
1354			;	ld (os_view_disable), a 
1354			 
1354				pop de 
1354				pop hl 
1354			 
1354				 
1354			 
1354				CALLMONITOR 
1354			.lowalloz: 
1354			 
1354			 
1354				pop af 
1354				pop de 
1354				pop hl 
1354			ret 
1354			 
1354			malloc_guard_entry: 
1354				push hl 
1354				push de 
1354				push af 
1354			 
1354			 	or a      ;clear carry flag 
1354				push hl 
1354				ld de, 255 
1354				sbc hl, de 
1354				jr c, .lowalloc 
1354			 
1354				push de 
1354					ld hl, display_fb0 
1354					ld (display_fb_active), hl 
1354				call clear_display 
1354				ld a, 0 
1354				ld de, .mallocsize 
1354				call str_at_display 
1354				call update_display 
1354				call delay1s 
1354				call delay1s 
1354			;	ld a, 0 
1354			;	ld (os_view_disable), a 
1354				call bp_on 
1354			 
1354				pop de 
1354				pop hl 
1354			 
1354				 
1354			 
1354				CALLMONITOR 
1354				jr .lowdone 
1354			.lowalloc: 
1354			 
1354			 
1354				pop hl 
1354			.lowdone:	pop af 
1354				pop de 
1354				pop hl 
1354			ret 
1354			 
1354			malloc_guard_exit: 
1354				push hl 
1354				push de 
1354				push af 
1354			 
1354			 	or a      ;clear carry flag 
1354				push hl 
1354				ld de, 255 
1354				sbc hl, de 
1354				jr c, .lowallocx 
1354			 
1354				push de 
1354					ld hl, display_fb0 
1354					ld (display_fb_active), hl 
1354				call clear_display 
1354				ld a, 0 
1354				ld de, .mallocasize 
1354				call str_at_display 
1354				call update_display 
1354				call delay1s 
1354				call delay1s 
1354			;	ld a, 0 
1354			;	ld (os_view_disable), a 
1354				call bp_on 
1354				pop de 
1354				pop hl 
1354			 
1354				CALLMONITOR 
1354				jr .lowdonex 
1354			.lowallocx: 
1354			 
1354				pop hl 
1354			.lowdonex:	pop af 
1354				pop de 
1354				pop hl 
1354			ret 
1354			endif 
1354			 
1354			if MALLOC_2 
1354			; Z80 Malloc and Free Functions 
1354			 
1354			; Malloc Function: 
1354			; Input: 
1354			;   HL: Size of block to allocate 
1354			; Output: 
1354			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1354			 
1354			malloc: 
1354				 
1354			if DEBUG_FORTH_MALLOC_HIGH 
1354			call malloc_guard_entry 
1354			endif 
1354			 
1354			 
1354			 
1354			 
1354					if DEBUG_FORTH_MALLOC 
1354						DMARK "mal" 
1354						CALLMONITOR 
1354					endif 
1354			    push af            ; Save AF register 
1354			    ld a, l            ; Load low byte of size into A 
1354			    or h               ; Check if size is zero 
1354			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1354			 
1354			    ; Allocate memory 
1354			    ld hl, (heap_start) ; Load start of heap into HL 
1354					if DEBUG_FORTH_MALLOC 
1354						DMARK "ma1" 
1354						CALLMONITOR 
1354					endif 
1354			    call malloc_internal ; Call internal malloc function 
1354			    pop af             ; Restore AF register 
1354			if DEBUG_FORTH_MALLOC_HIGH 
1354			call malloc_guard_exit 
1354			call malloc_guard_zerolen 
1354			endif 
1354			    ret                ; Return 
1354			 
1354			; Free Function: 
1354			; Input: 
1354			;   HL: Pointer to memory block to free 
1354			; Output: 
1354			;   None 
1354			 
1354			free: 
1354			    push af            ; Save AF register 
1354			    ld a, l            ; Load low byte of pointer into A 
1354			    or h               ; Check if pointer is NULL 
1354			    jp z, free_exit    ; If pointer is NULL, exit 
1354			 
1354			    ; Free memory 
1354			    ld hl, (heap_start) ; Load start of heap into HL 
1354			    call free_internal  ; Call internal free function 
1354			    pop af             ; Restore AF register 
1354			    ret                ; Return 
1354			 
1354			; Internal Malloc Function: 
1354			; Input: 
1354			;   HL: Size of block to allocate 
1354			; Output: 
1354			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1354			 
1354			malloc_internal: 
1354			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1354			    add hl, bc         ; Add management overhead to requested size 
1354			    ex de, hl          ; Save total size in DE, and keep it in HL 
1354					if DEBUG_FORTH_MALLOC 
1354						DMARK "ma2" 
1354						CALLMONITOR 
1354					endif 
1354			 
1354			    ; Search for free memory block 
1354			    ld de, (heap_end)  ; Load end of heap into DE 
1354			    ld bc, 0           ; Initialize counter 
1354			 
1354					if DEBUG_FORTH_MALLOC 
1354						DMARK "ma2" 
1354						CALLMONITOR 
1354					endif 
1354			malloc_search_loop: 
1354			    ; Check if current block is free 
1354			    ld a, (hl)         ; Load current block's status (free or used) 
1354			;    cp 0               ; Compare with zero (free) 
1354				or a 
1354			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1354			 
1354			    ; Check if current block is large enough 
1354			    ld a, (hl+1)       ; Load high byte of block size 
1354			    cp l               ; Compare with low byte of requested size 
1354			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1354			 
1354			    ld a, (hl+2)       ; Load low byte of block size 
1354			    cp h               ; Compare with high byte of requested size 
1354			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1354			 
1354			    ; Mark block as used 
1354			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1354			 
1354			    ; Calculate remaining space in block 
1354			    ld bc, 0           ; Clear BC 
1354			    add hl, bc         ; Increment HL to point to start of data block 
1354			    add hl, de         ; HL = HL + DE (total size) 
1354			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1354			    add hl, bc         ; Add management overhead to start of data block 
1354			 
1354			    ; Save pointer to allocated block in HL 
1354			if DEBUG_FORTH_MALLOC_HIGH 
1354						DMARK "ma5" 
1354			call malloc_guard_exit 
1354			call malloc_guard_zerolen 
1354			endif 
1354			    ret 
1354			 
1354			malloc_skip_block_check: 
1354			    ; Move to the next block 
1354			    ld bc, 3           ; Size of management overhead 
1354			    add hl, bc         ; Move to the next block 
1354			    inc de             ; Increment counter 
1354			 
1354			    ; Check if we have reached the end of heap 
1354			    ld a, e            ; Load low byte of heap end address 
1354			    cp (hl)            ; Compare with low byte of current address 
1354			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1354			    ld a, d            ; Load high byte of heap end address 
1354			;    cp 0               ; Check if it's zero (end of memory) 
1354				or a 
1354			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1354			 
1354			    ; If we reached here, allocation failed 
1354			    xor a              ; Set result to NULL 
1354			if DEBUG_FORTH_MALLOC_HIGH 
1354						DMARK "ma6" 
1354			call malloc_guard_exit 
1354			call malloc_guard_zerolen 
1354			endif 
1354			    ret 
1354			malloc_exit: 
1354			if DEBUG_FORTH_MALLOC_HIGH 
1354						DMARK "ma7" 
1354			call malloc_guard_exit 
1354			call malloc_guard_zerolen 
1354			endif 
1354			    ret 
1354			 
1354			; Internal Free Function: 
1354			; Input: 
1354			;   HL: Pointer to memory block to free 
1354			; Output: 
1354			;   None 
1354			 
1354			free_internal: 
1354			    ld de, (heap_start) ; Load start of heap into DE 
1354			    ld bc, 0            ; Initialize counter 
1354			 
1354			free_search_loop: 
1354			    ; Check if current block contains the pointer 
1354			    ld a, l             ; Load low byte of pointer 
1354			    cp (hl+1)           ; Compare with high byte of current block's address 
1354			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1354			    ld a, h             ; Load high byte of pointer 
1354			    cp (hl+2)           ; Compare with low byte of current block's address 
1354			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1354			 
1354			    ; Mark block as free 
1354			    ld (hl), 0          ; Set status byte to indicate free block 
1354			    ret                 ; Return 
1354			 
1354			free_skip_block_check: 
1354			    ; Move to the next block 
1354			    ld bc, 3            ; Size of management overhead 
1354			    add hl, bc          ; Move to the next block 
1354			    inc de              ; Increment counter 
1354			 
1354			    ; Check if we have reached the end of heap 
1354			    ld a, e             ; Load low byte of heap end address 
1354			    cp (hl)             ; Compare with low byte of current address 
1354			    jr nz, free_search_loop  ; If not equal, continue searching 
1354			    ld a, d             ; Load high byte of heap end address 
1354			;    cp 0                ; Check if it's zero (end of memory) 
1354				or a 
1354			    jr nz, free_search_loop  ; If not zero, continue searching 
1354			 
1354			    ; If we reached here, pointer is not found in heap 
1354			    ret 
1354			 
1354			free_exit: 
1354			    ret                 ; Return 
1354			 
1354			; Define heap start and end addresses 
1354			;heap_start:    .dw 0xC000   ; Start of heap 
1354			;heap_end:      .dw 0xE000   ; End of heap 
1354			 
1354			endif 
1354			 
1354			 
1354			if MALLOC_1 
1354			 
1354			 
1354			 
1354			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1354			 
1354			;moved to firmware.asm 
1354			;heap_start        .equ  0x9000      ; Starting address of heap 
1354			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1354			 
1354			;      .org 0 
1354			;      jp    main 
1354			 
1354			 
1354			;      .org  0x100 
1354			;main: 
1354			;      ld    HL, 0x8100 
1354			;      ld    SP, HL 
1354			; 
1354			;      call  heap_init 
1354			; 
1354			;      ; Make some allocations 
1354			;      ld    HL, 12 
1354			;      call  malloc            ; Allocates 0x9004 
1354			; 
1354			;      ld    HL, 12 
1354			;      call  malloc            ; Allocates 0x9014 
1354			; 
1354			;      ld    HL, 12 
1354			;      call  malloc            ; Allocates 0x9024 
1354			; 
1354			;      ; Free some allocations 
1354			;      ld    HL, 0x9014 
1354			;      call  free 
1354			; 
1354			;      ld    HL, 0x9004 
1354			;      call  free 
1354			; 
1354			;      ld    HL, 0x9024 
1354			;      call  free 
1354			; 
1354			; 
1354			;      halt 
1354			 
1354			 
1354			;------------------------------------------------------------------------------ 
1354			;     heap_init                                                               : 
1354			;                                                                             : 
1354			; Description                                                                 : 
1354			;     Initialise the heap and make it ready for malloc and free operations.   : 
1354			;                                                                             : 
1354			;     The heap is maintained as a linked list, starting with an initial       : 
1354			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1354			;     the first free block in the heap. Each block then points to the next    : 
1354			;     free block within the heap, and the free list ends at the first block   : 
1354			;     with a null pointer to the next free block.                             : 
1354			;                                                                             : 
1354			; Parameters                                                                  : 
1354			;     Inputs are compile-time only. Two defines which specify the starting    : 
1354			;     address of the heap and its size are required, along with a memory      : 
1354			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1354			;     principally stores a pointer to the first free block in the heap.       : 
1354			;                                                                             : 
1354			; Returns                                                                     : 
1354			;     Nothing                                                                 : 
1354			;------------------------------------------------------------------------------ 
1354			heap_init: 
1354 e5			      push  HL 
1355			 
1355			      ; Initialise free list struct 
1355 21 0e 80		      ld    HL, heap_start 
1358 22 0a 80		      ld    (free_list), HL 
135b 21 00 00		      ld    HL, 0 
135e 22 0c 80		      ld    (free_list+2), HL 
1361			 
1361			      ; Insert first free block at bottom of heap, consumes entire heap 
1361 21 ca f0		      ld    HL, heap_start+heap_size-4 
1364 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
1367 21 bc 70		      ld    HL, heap_size-4 
136a 22 10 80		      ld    (heap_start+2), HL      ; Block size 
136d			 
136d			      ; Insert end of free list block at top of heap - two null words will 
136d			      ; terminate the free list 
136d 21 00 00		      ld    HL, 0 
1370 22 cc f0		      ld    (heap_start+heap_size-2), HL 
1373 22 ca f0		      ld    (heap_start+heap_size-4), HL 
1376			 
1376 e1			      pop   HL 
1377			 
1377 c9			      ret 
1378			 
1378			 
1378			;------------------------------------------------------------------------------ 
1378			;     malloc                                                                  : 
1378			;                                                                             : 
1378			; Description                                                                 : 
1378			;     Allocates the wanted space from the heap and returns the address of the : 
1378			;     first useable byte of the allocation.                                   : 
1378			;                                                                             : 
1378			;     Allocations can happen in one of two ways:                              : 
1378			;                                                                             : 
1378			;     1. A free block may be found which is the exact size wanted. In this    : 
1378			;        case the block is removed from the free list and retuedn to the      : 
1378			;        caller.                                                              : 
1378			;     2. A free block may be found which is larger than the size wanted. In   : 
1378			;        this case, the larger block is split into two. The first portion of  : 
1378			;        this block will become the requested space by the malloc call and    : 
1378			;        is returned to the caller. The second portion becomes a new free     : 
1378			;        block, and the free list is adjusted to maintain continuity via this : 
1378			;        newly created block.                                                 : 
1378			;                                                                             : 
1378			;     malloc does not set any initial value in the allocated space, the       : 
1378			;     caller is required to do this as required.                              : 
1378			;                                                                             : 
1378			;     This implementation of malloc uses the stack exclusively, and is        : 
1378			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1378			;     advisable to disable interrupts before calling malloc, and recommended  : 
1378			;     to avoid the use of malloc inside ISRs in general.                      : 
1378			;                                                                             : 
1378			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1378			;                                                                             : 
1378			; Parameters                                                                  : 
1378			;     HL  Number of bytes wanted                                              : 
1378			;                                                                             : 
1378			; Returns                                                                     : 
1378			;     HL  Address of the first useable byte of the allocation                 : 
1378			;                                                                             : 
1378			; Flags                                                                       : 
1378			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1378			;                                                                             : 
1378			; Stack frame                                                                 : 
1378			;       |             |                                                       : 
1378			;       +-------------+                                                       : 
1378			;       |     BC      |                                                       : 
1378			;       +-------------+                                                       : 
1378			;       |     DE      |                                                       : 
1378			;       +-------------+                                                       : 
1378			;       |     IX      |                                                       : 
1378			;       +-------------+                                                       : 
1378			;       |  prev_free  |                                                       : 
1378			;   +4  +-------------+                                                       : 
1378			;       |  this_free  |                                                       : 
1378			;   +2  +-------------+                                                       : 
1378			;       |  next_free  |                                                       : 
1378			;   +0  +-------------+                                                       : 
1378			;       |             |                                                       : 
1378			;                                                                             : 
1378			;------------------------------------------------------------------------------ 
1378			 
1378			 
1378			;malloc: 
1378			; 
1378			;	SAVESP ON 1 
1378			; 
1378			;	call malloc_code 
1378			; 
1378			;	CHECKSP ON 1 
1378			;	ret 
1378			 
1378			 
1378			malloc: 
1378 c5			      push  BC 
1379 d5			      push  DE 
137a dd e5		      push  IX 
137c			if DEBUG_FORTH_MALLOC_HIGH 
137c			call malloc_guard_entry 
137c			endif 
137c			 
137c					if DEBUG_FORTH_MALLOC 
137c						DMARK "mal" 
137c						CALLMONITOR 
137c					endif 
137c 7c			      ld    A, H                    ; Exit if no space requested 
137d b5			      or    L 
137e ca 3d 14		      jp    Z, malloc_early_exit 
1381			 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			; 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			;inc hl 
1381			 
1381			 
1381			 
1381			 
1381					if DEBUG_FORTH_MALLOC 
1381						DMARK "maA" 
1381						CALLMONITOR 
1381					endif 
1381			      ; Set up stack frame 
1381 eb			      ex    DE, HL 
1382 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1385 39			      add   HL, SP 
1386 f9			      ld    SP, HL 
1387 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
138b dd 39		      add   IX, SP 
138d			 
138d			      ; Setup initial state 
138d 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
1390 19			      add   HL, DE 
1391			 
1391 44			      ld    B, H                    ; Move want to BC 
1392 4d			      ld    C, L 
1393			 
1393 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
1396 dd 75 04		      ld    (IX+4), L 
1399 dd 74 05		      ld    (IX+5), H 
139c			 
139c 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
139d 23			      inc   HL 
139e 56			      ld    D, (HL) 
139f dd 73 02		      ld    (IX+2), E 
13a2 dd 72 03		      ld    (IX+3), D 
13a5 eb			      ex    DE, HL                  ; this_free ptr into HL 
13a6			 
13a6					if DEBUG_FORTH_MALLOC 
13a6						DMARK "maB" 
13a6						CALLMONITOR 
13a6					endif 
13a6			      ; Loop through free block list to find some space 
13a6			malloc_find_space: 
13a6 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
13a7 23			      inc   HL 
13a8 56			      ld    D, (HL) 
13a9			 
13a9 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
13aa b3			      or    E 
13ab ca 37 14		      jp    Z, malloc_no_space 
13ae			 
13ae dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
13b1 dd 72 01		      ld    (IX+1), D 
13b4			 
13b4			      ; Does this block have enough space to make the allocation? 
13b4 23			      inc   HL                      ; Load free block size into DE 
13b5 5e			      ld    E, (HL) 
13b6 23			      inc   HL 
13b7 56			      ld    D, (HL) 
13b8			 
13b8 eb			      ex    DE, HL                  ; Check size of block against want 
13b9 b7			      or    A                       ; Ensure carry flag clear 
13ba ed 42		      sbc   HL, BC 
13bc e5			      push  HL                      ; Store the result for later (new block size) 
13bd			 
13bd ca 0c 14		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
13c0 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
13c2			 
13c2			      ; this_free block is not big enough, setup ptrs to test next free block 
13c2 e1			      pop   HL                      ; Discard previous result 
13c3			 
13c3 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
13c6 dd 66 03		      ld    H, (IX+3) 
13c9 dd 75 04		      ld    (IX+4), L 
13cc dd 74 05		      ld    (IX+5), H 
13cf			 
13cf dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
13d2 dd 66 01		      ld    H, (IX+1) 
13d5 dd 75 02		      ld    (IX+2), L 
13d8 dd 74 03		      ld    (IX+3), H 
13db			 
13db					if DEBUG_FORTH_MALLOC 
13db						DMARK "MA>" 
13db						CALLMONITOR 
13db					endif 
13db 18 c9		      jr    malloc_find_space 
13dd			 
13dd			      ; split a bigger block into two - requested size and remaining size 
13dd			malloc_alloc_split: 
13dd					if DEBUG_FORTH_MALLOC 
13dd						DMARK "MAs" 
13dd						CALLMONITOR 
13dd					endif 
13dd eb			      ex    DE, HL                  ; Calculate address of new free block 
13de 2b			      dec   HL 
13df 2b			      dec   HL 
13e0 2b			      dec   HL 
13e1 09			      add   HL, BC 
13e2			 
13e2			      ; Create a new block and point it at next_free 
13e2 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
13e5 dd 56 01		      ld    D, (IX+1) 
13e8			 
13e8 73			      ld    (HL), E                 ; Store next_free ptr into new block 
13e9 23			      inc   HL 
13ea 72			      ld    (HL), D 
13eb			 
13eb d1			      pop   DE                      ; Store size of new block into new block 
13ec 23			      inc   HL 
13ed 73			      ld    (HL), E 
13ee 23			      inc   HL 
13ef 72			      ld    (HL), D 
13f0			 
13f0			      ; Update this_free ptr to point to new block 
13f0 2b			      dec   HL 
13f1 2b			      dec   HL 
13f2 2b			      dec   HL 
13f3			 
13f3 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
13f6 dd 56 03		      ld    D, (IX+3) 
13f9			 
13f9 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
13fc dd 74 03		      ld    (IX+3), H 
13ff			 
13ff			      ; Modify this_free block to be allocation 
13ff eb			      ex    DE, HL 
1400 af			      xor   A                       ; Null the next block ptr of allocated block 
1401 77			      ld    (HL), A 
1402 23			      inc   HL 
1403 77			      ld    (HL), A 
1404			 
1404 23			      inc   HL                      ; Store want size into allocated block 
1405 71			      ld    (HL), C 
1406 23			      inc   HL 
1407 70			      ld    (HL), B 
1408 23			      inc   HL 
1409 e5			      push  HL                      ; Address of allocation to return 
140a			 
140a 18 19		      jr    malloc_update_links 
140c			 
140c			malloc_alloc_fit: 
140c e1			      pop   HL                      ; Dont need new block size, want is exact fit 
140d			 
140d					if DEBUG_FORTH_MALLOC 
140d						DMARK "MAf" 
140d						CALLMONITOR 
140d					endif 
140d			      ; Modify this_free block to be allocation 
140d eb			      ex    DE, HL 
140e 2b			      dec   HL 
140f 2b			      dec   HL 
1410 2b			      dec   HL 
1411			 
1411 af			      xor   A                       ; Null the next block ptr of allocated block 
1412 77			      ld    (HL), A 
1413 23			      inc   HL 
1414 77			      ld    (HL), A 
1415			 
1415 23			      inc   HL                      ; Store address of allocation to return 
1416 23			      inc   HL 
1417 23			      inc   HL 
1418 e5			      push  HL 
1419			 
1419			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1419 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
141c dd 66 01		      ld    H, (IX+1) 
141f			 
141f dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1422 dd 74 03		      ld    (IX+3), H 
1425			 
1425			 
1425			malloc_update_links: 
1425			      ; Update prev_free ptr to point to this_free 
1425 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1428 dd 66 05		      ld    H, (IX+5) 
142b			 
142b dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
142e dd 56 03		      ld    D, (IX+3) 
1431			 
1431 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1432 23			      inc   HL 
1433 72			      ld    (HL), D 
1434			 
1434					if DEBUG_FORTH_MALLOC 
1434						DMARK "Mul" 
1434						CALLMONITOR 
1434					endif 
1434			      ; Clear the Z flag to indicate successful allocation 
1434 7a			      ld    A, D 
1435 b3			      or    E 
1436			 
1436 d1			      pop   DE                      ; Address of allocation 
1437					if DEBUG_FORTH_MALLOC 
1437						DMARK "MAu" 
1437						CALLMONITOR 
1437					endif 
1437			 
1437			malloc_no_space: 
1437 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
143a 39			      add   HL, SP 
143b f9			      ld    SP, HL 
143c			 
143c eb			      ex    DE, HL                  ; Alloc addr into HL for return 
143d					if DEBUG_FORTH_MALLOC 
143d						DMARK "MAN" 
143d						CALLMONITOR 
143d					endif 
143d			 
143d			malloc_early_exit: 
143d					if DEBUG_FORTH_MALLOC 
143d						DMARK "MAx" 
143d						CALLMONITOR 
143d					endif 
143d dd e1		      pop   IX 
143f d1			      pop   DE 
1440 c1			      pop   BC 
1441			 
1441			if DEBUG_FORTH_MALLOC_HIGH 
1441			call malloc_guard_exit 
1441			call malloc_guard_zerolen 
1441			endif 
1441 c9			      ret 
1442			 
1442			 
1442			;------------------------------------------------------------------------------ 
1442			;     free                                                                    : 
1442			;                                                                             : 
1442			; Description                                                                 : 
1442			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1442			;     returned by malloc, otherwise the behaviour is undefined.               : 
1442			;                                                                             : 
1442			;     Where possible, directly adjacent free blocks will be merged together   : 
1442			;     into larger blocks to help ensure that the heap does not become         : 
1442			;     excessively fragmented.                                                 : 
1442			;                                                                             : 
1442			;     free does not clear or set any other value into the freed space, and    : 
1442			;     therefore its contents may be visible through subsequent malloc's. The  : 
1442			;     caller should clear the freed space as required.                        : 
1442			;                                                                             : 
1442			;     This implementation of free uses the stack exclusively, and is          : 
1442			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1442			;     advisable to disable interrupts before calling free, and recommended    : 
1442			;     to avoid the use of free inside ISRs in general.                        : 
1442			;                                                                             : 
1442			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1442			;                                                                             : 
1442			; Parameters                                                                  : 
1442			;     HL  Pointer to address of first byte of allocation to be freed          : 
1442			;                                                                             : 
1442			; Returns                                                                     : 
1442			;     Nothing                                                                 : 
1442			;                                                                             : 
1442			; Stack frame                                                                 : 
1442			;       |             |                                                       : 
1442			;       +-------------+                                                       : 
1442			;       |     BC      |                                                       : 
1442			;       +-------------+                                                       : 
1442			;       |     DE      |                                                       : 
1442			;       +-------------+                                                       : 
1442			;       |     IX      |                                                       : 
1442			;       +-------------+                                                       : 
1442			;       |  prev_free  |                                                       : 
1442			;   +2  +-------------+                                                       : 
1442			;       |  next_free  |                                                       : 
1442			;   +0  +-------------+                                                       : 
1442			;       |             |                                                       : 
1442			;                                                                             : 
1442			;------------------------------------------------------------------------------ 
1442			free: 
1442 c5			      push  BC 
1443 d5			      push  DE 
1444 dd e5		      push  IX 
1446			 
1446 7c			      ld    A, H                    ; Exit if ptr is null 
1447 b5			      or    L 
1448 ca 0c 15		      jp    Z, free_early_exit 
144b			 
144b			      ; Set up stack frame 
144b eb			      ex    DE, HL 
144c 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
144f 39			      add   HL, SP 
1450 f9			      ld    SP, HL 
1451 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1455 dd 39		      add   IX, SP 
1457			 
1457			      ; The address in HL points to the start of the useable allocated space, 
1457			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1457			      ; address of the block itself. 
1457 eb			      ex    DE, HL 
1458 11 fc ff		      ld    DE, -4 
145b 19			      add   HL, DE 
145c			 
145c			      ; An allocated block must have a null next block pointer in it 
145c 7e			      ld    A, (HL) 
145d 23			      inc   HL 
145e b6			      or    (HL) 
145f c2 07 15		      jp    NZ, free_done 
1462			 
1462 2b			      dec   HL 
1463			 
1463 44			      ld    B, H                    ; Copy HL to BC 
1464 4d			      ld    C, L 
1465			 
1465			      ; Loop through the free list to find the first block with an address 
1465			      ; higher than the block being freed 
1465 21 0a 80		      ld    HL, free_list 
1468			 
1468			free_find_higher_block: 
1468 5e			      ld    E, (HL)                 ; Load next ptr from free block 
1469 23			      inc   HL 
146a 56			      ld    D, (HL) 
146b 2b			      dec   HL 
146c			 
146c dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
146f dd 72 01		      ld    (IX+1), D 
1472 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
1475 dd 74 03		      ld    (IX+3), H 
1478			 
1478 78			      ld    A, B                    ; Check if DE is greater than BC 
1479 ba			      cp    D                       ; Compare MSB first 
147a 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
147c 30 04		      jr    NC, free_find_higher_block_skip 
147e 79			      ld    A, C 
147f bb			      cp    E                       ; Then compare LSB 
1480 38 08		      jr    C, free_found_higher_block 
1482			 
1482			free_find_higher_block_skip: 
1482 7a			      ld    A, D                    ; Reached the end of the free list? 
1483 b3			      or    E 
1484 ca 07 15		      jp    Z, free_done 
1487			 
1487 eb			      ex    DE, HL 
1488			 
1488 18 de		      jr    free_find_higher_block 
148a			 
148a			free_found_higher_block: 
148a			      ; Insert freed block between prev and next free blocks 
148a 71			      ld    (HL), C                 ; Point prev free block to freed block 
148b 23			      inc   HL 
148c 70			      ld    (HL), B 
148d			 
148d 60			      ld    H, B                    ; Point freed block at next free block 
148e 69			      ld    L, C 
148f 73			      ld    (HL), E 
1490 23			      inc   HL 
1491 72			      ld    (HL), D 
1492			 
1492			      ; Check if the freed block is adjacent to the next free block 
1492 23			      inc   HL                      ; Load size of freed block into HL 
1493 5e			      ld    E, (HL) 
1494 23			      inc   HL 
1495 56			      ld    D, (HL) 
1496 eb			      ex    DE, HL 
1497			 
1497 09			      add   HL, BC                  ; Add addr of freed block and its size 
1498			 
1498 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
149b dd 56 01		      ld    D, (IX+1) 
149e			 
149e b7			      or    A                       ; Clear the carry flag 
149f ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
14a1 20 22		      jr    NZ, free_check_adjacent_to_prev 
14a3			 
14a3			      ; Freed block is adjacent to next, merge into one bigger block 
14a3 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
14a4 5e			      ld    E, (HL) 
14a5 23			      inc   HL 
14a6 56			      ld    D, (HL) 
14a7 e5			      push  HL                      ; Save ptr to next block for later 
14a8			 
14a8 60			      ld    H, B                    ; Store ptr from next block into freed block 
14a9 69			      ld    L, C 
14aa 73			      ld    (HL), E 
14ab 23			      inc   HL 
14ac 72			      ld    (HL), D 
14ad			 
14ad e1			      pop   HL                      ; Restore ptr to next block 
14ae 23			      inc   HL                      ; Load size of next block into DE 
14af 5e			      ld    E, (HL) 
14b0 23			      inc   HL 
14b1 56			      ld    D, (HL) 
14b2 d5			      push  DE                      ; Save next block size for later 
14b3			 
14b3 60			      ld    H, B                    ; Load size of freed block into HL 
14b4 69			      ld    L, C 
14b5 23			      inc   HL 
14b6 23			      inc   HL 
14b7 5e			      ld    E, (HL) 
14b8 23			      inc   HL 
14b9 56			      ld    D, (HL) 
14ba eb			      ex    DE, HL 
14bb			 
14bb d1			      pop   DE                      ; Restore size of next block 
14bc 19			      add   HL, DE                  ; Add sizes of both blocks 
14bd eb			      ex    DE, HL 
14be			 
14be 60			      ld    H, B                    ; Store new bigger size into freed block 
14bf 69			      ld    L, C 
14c0 23			      inc   HL 
14c1 23			      inc   HL 
14c2 73			      ld    (HL), E 
14c3 23			      inc   HL 
14c4 72			      ld    (HL), D 
14c5			 
14c5			free_check_adjacent_to_prev: 
14c5			      ; Check if the freed block is adjacent to the prev free block 
14c5 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
14c8 dd 66 03		      ld    H, (IX+3) 
14cb			 
14cb 23			      inc   HL                      ; Size of prev free block into DE 
14cc 23			      inc   HL 
14cd 5e			      ld    E, (HL) 
14ce 23			      inc   HL 
14cf 56			      ld    D, (HL) 
14d0 2b			      dec   HL 
14d1 2b			      dec   HL 
14d2 2b			      dec   HL 
14d3			 
14d3 19			      add   HL, DE                  ; Add prev block addr and size 
14d4			 
14d4 b7			      or    A                       ; Clear the carry flag 
14d5 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
14d7 20 2e		      jr    NZ, free_done 
14d9			 
14d9			      ; Freed block is adjacent to prev, merge into one bigger block 
14d9 60			      ld    H, B                    ; Load next ptr from freed block into DE 
14da 69			      ld    L, C 
14db 5e			      ld    E, (HL) 
14dc 23			      inc   HL 
14dd 56			      ld    D, (HL) 
14de e5			      push  HL                      ; Save freed block ptr for later 
14df			 
14df dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
14e2 dd 66 03		      ld    H, (IX+3) 
14e5 73			      ld    (HL), E 
14e6 23			      inc   HL 
14e7 72			      ld    (HL), D 
14e8			 
14e8 e1			      pop   HL                      ; Restore freed block ptr 
14e9 23			      inc   HL                      ; Load size of freed block into DE 
14ea 5e			      ld    E, (HL) 
14eb 23			      inc   HL 
14ec 56			      ld    D, (HL) 
14ed d5			      push  DE                      ; Save freed block size for later 
14ee			 
14ee dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
14f1 dd 66 03		      ld    H, (IX+3) 
14f4 23			      inc   HL 
14f5 23			      inc   HL 
14f6 5e			      ld    E, (HL) 
14f7 23			      inc   HL 
14f8 56			      ld    D, (HL) 
14f9			 
14f9 e1			      pop   HL                      ; Add sizes of both blocks 
14fa 19			      add   HL, DE 
14fb eb			      ex    DE, HL 
14fc			 
14fc dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
14ff dd 66 03		      ld    H, (IX+3) 
1502 23			      inc   HL 
1503 23			      inc   HL 
1504 73			      ld    (HL), E 
1505 23			      inc   HL 
1506 72			      ld    (HL), D 
1507			 
1507			free_done: 
1507 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
150a 39			      add   HL, SP 
150b f9			      ld    SP, HL 
150c			 
150c			free_early_exit: 
150c dd e1		      pop   IX 
150e d1			      pop   DE 
150f c1			      pop   BC 
1510			 
1510 c9			      ret 
1511			 
1511			; moved to firmware.asm 
1511			; 
1511			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1511			;                  .dw   0 
1511			 
1511			 
1511			endif 
1511			 
1511			 
1511			if MALLOC_3 
1511			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1511			;heap_start        .equ  0x9000      ; Starting address of heap 
1511			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1511			; 
1511			 ;     .org 0 
1511			  ;    jp    main 
1511			; 
1511			; 
1511			 ;     .org  0x100 
1511			;main: 
1511			 ;     ld    HL, 0x8100 
1511			  ;    ld    SP, HL 
1511			; 
1511			;      call  heap_init 
1511			 
1511			      ; Make some allocations 
1511			;      ld    HL, 12 
1511			;      call  malloc            ; Allocates 0x9004 
1511			; 
1511			 ;     ld    HL, 12 
1511			;      call  malloc            ; Allocates 0x9014 
1511			 
1511			;      ld    HL, 12 
1511			;      call  malloc            ; Allocates 0x9024 
1511			 
1511			      ; Free some allocations 
1511			;      ld    HL, 0x9014 
1511			;      call  free 
1511			 
1511			;      ld    HL, 0x9004 
1511			;      call  free 
1511			; 
1511			;      ld    HL, 0x9024 
1511			;      call  free 
1511			 
1511			 
1511			 ;     halt 
1511			 
1511			 
1511			;------------------------------------------------------------------------------ 
1511			;     heap_init                                                               : 
1511			;                                                                             : 
1511			; Description                                                                 : 
1511			;     Initialise the heap and make it ready for malloc and free operations.   : 
1511			;                                                                             : 
1511			;     The heap is maintained as a linked list, starting with an initial       : 
1511			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1511			;     the first free block in the heap. Each block then points to the next    : 
1511			;     free block within the heap, and the free list ends at the first block   : 
1511			;     with a null pointer to the next free block.                             : 
1511			;                                                                             : 
1511			; Parameters                                                                  : 
1511			;     Inputs are compile-time only. Two defines which specify the starting    : 
1511			;     address of the heap and its size are required, along with a memory      : 
1511			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1511			;     principally stores a pointer to the first free block in the heap.       : 
1511			;                                                                             : 
1511			; Returns                                                                     : 
1511			;     Nothing                                                                 : 
1511			;------------------------------------------------------------------------------ 
1511			heap_init: 
1511			      push  HL 
1511			 
1511			      ; Initialise free list struct 
1511			      ld    HL, heap_start 
1511			      ld    (free_list), HL 
1511			      ld    HL, 0 
1511			      ld    (free_list+2), HL 
1511			 
1511			      ; Insert first free block at bottom of heap, consumes entire heap 
1511			      ld    HL, heap_start+heap_size-4 
1511			      ld    (heap_start), HL        ; Next block (end of free list) 
1511			      ld    HL, heap_size-4 
1511			      ld    (heap_start+2), HL      ; Block size 
1511			 
1511			      ; Insert end of free list block at top of heap - two null words will 
1511			      ; terminate the free list 
1511			      ld    HL, 0 
1511			      ld    (heap_start+heap_size-2), HL 
1511			      ld    (heap_start+heap_size-4), HL 
1511			 
1511			      pop   HL 
1511			 
1511			      ret 
1511			 
1511			 
1511			;------------------------------------------------------------------------------ 
1511			;     malloc                                                                  : 
1511			;                                                                             : 
1511			; Description                                                                 : 
1511			;     Allocates the wanted space from the heap and returns the address of the : 
1511			;     first useable byte of the allocation.                                   : 
1511			;                                                                             : 
1511			;     Allocations can happen in one of two ways:                              : 
1511			;                                                                             : 
1511			;     1. A free block may be found which is the exact size wanted. In this    : 
1511			;        case the block is removed from the free list and retuedn to the      : 
1511			;        caller.                                                              : 
1511			;     2. A free block may be found which is larger than the size wanted. In   : 
1511			;        this case, the larger block is split into two. The first portion of  : 
1511			;        this block will become the requested space by the malloc call and    : 
1511			;        is returned to the caller. The second portion becomes a new free     : 
1511			;        block, and the free list is adjusted to maintain continuity via this : 
1511			;        newly created block.                                                 : 
1511			;                                                                             : 
1511			;     malloc does not set any initial value in the allocated space, the       : 
1511			;     caller is required to do this as required.                              : 
1511			;                                                                             : 
1511			;     This implementation of malloc uses the stack exclusively, and is        : 
1511			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1511			;     advisable to disable interrupts before calling malloc, and recommended  : 
1511			;     to avoid the use of malloc inside ISRs in general.                      : 
1511			;                                                                             : 
1511			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1511			;                                                                             : 
1511			; Parameters                                                                  : 
1511			;     HL  Number of bytes wanted                                              : 
1511			;                                                                             : 
1511			; Returns                                                                     : 
1511			;     HL  Address of the first useable byte of the allocation                 : 
1511			;                                                                             : 
1511			; Flags                                                                       : 
1511			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1511			;                                                                             : 
1511			; Stack frame                                                                 : 
1511			;       |             |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |     BC      |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |     DE      |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |     IX      |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |  prev_free  |                                                       : 
1511			;   +4  +-------------+                                                       : 
1511			;       |  this_free  |                                                       : 
1511			;   +2  +-------------+                                                       : 
1511			;       |  next_free  |                                                       : 
1511			;   +0  +-------------+                                                       : 
1511			;       |             |                                                       : 
1511			;                                                                             : 
1511			;------------------------------------------------------------------------------ 
1511			malloc: 
1511			      push  BC 
1511			      push  DE 
1511			      push  IX 
1511			 
1511			      ld    A, H                    ; Exit if no space requested 
1511			      or    L 
1511			      jp    Z, malloc_early_exit 
1511			 
1511			      ; Set up stack frame 
1511			      ex    DE, HL 
1511			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1511			      add   HL, SP 
1511			      ld    SP, HL 
1511			      ld    IX, 0                   ; Use IX as a frame pointer 
1511			      add   IX, SP 
1511			 
1511			      ; Setup initial state 
1511			      ld    HL, 4                   ; want must also include space used by block struct 
1511			      add   HL, DE 
1511			 
1511			      ld    B, H                    ; Move want to BC 
1511			      ld    C, L 
1511			 
1511			      ld    HL, free_list           ; Store prev_free ptr to stack 
1511			      ld    (IX+4), L 
1511			      ld    (IX+5), H 
1511			 
1511			      ld    E, (HL)                 ; Store this_free ptr to stack 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      ld    (IX+2), E 
1511			      ld    (IX+3), D 
1511			      ex    DE, HL                  ; this_free ptr into HL 
1511			 
1511			      ; Loop through free block list to find some space 
1511			malloc_find_space: 
1511			      ld    E, (HL)                 ; Load next_free ptr into DE 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			 
1511			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1511			      or    E 
1511			      jp    Z, malloc_no_space 
1511			 
1511			      ld    (IX+0), E               ; Store next_free ptr to stack 
1511			      ld    (IX+1), D 
1511			 
1511			      ; Does this block have enough space to make the allocation? 
1511			      inc   HL                      ; Load free block size into DE 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			 
1511			      ex    DE, HL                  ; Check size of block against want 
1511			      or    A                       ; Ensure carry flag clear 
1511			      sbc   HL, BC 
1511			      push  HL                      ; Store the result for later (new block size) 
1511			 
1511			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1511			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1511			 
1511			      ; this_free block is not big enough, setup ptrs to test next free block 
1511			      pop   HL                      ; Discard previous result 
1511			 
1511			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1511			      ld    H, (IX+3) 
1511			      ld    (IX+4), L 
1511			      ld    (IX+5), H 
1511			 
1511			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1511			      ld    H, (IX+1) 
1511			      ld    (IX+2), L 
1511			      ld    (IX+3), H 
1511			 
1511			      jr    malloc_find_space 
1511			 
1511			      ; split a bigger block into two - requested size and remaining size 
1511			malloc_alloc_split: 
1511			      ex    DE, HL                  ; Calculate address of new free block 
1511			      dec   HL 
1511			      dec   HL 
1511			      dec   HL 
1511			      add   HL, BC 
1511			 
1511			      ; Create a new block and point it at next_free 
1511			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1511			      ld    D, (IX+1) 
1511			 
1511			      ld    (HL), E                 ; Store next_free ptr into new block 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			      pop   DE                      ; Store size of new block into new block 
1511			      inc   HL 
1511			      ld    (HL), E 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			      ; Update this_free ptr to point to new block 
1511			      dec   HL 
1511			      dec   HL 
1511			      dec   HL 
1511			 
1511			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1511			      ld    D, (IX+3) 
1511			 
1511			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1511			      ld    (IX+3), H 
1511			 
1511			      ; Modify this_free block to be allocation 
1511			      ex    DE, HL 
1511			      xor   A                       ; Null the next block ptr of allocated block 
1511			      ld    (HL), A 
1511			      inc   HL 
1511			      ld    (HL), A 
1511			 
1511			      inc   HL                      ; Store want size into allocated block 
1511			      ld    (HL), C 
1511			      inc   HL 
1511			      ld    (HL), B 
1511			      inc   HL 
1511			      push  HL                      ; Address of allocation to return 
1511			 
1511			      jr    malloc_update_links 
1511			 
1511			malloc_alloc_fit: 
1511			      pop   HL                      ; Dont need new block size, want is exact fit 
1511			 
1511			      ; Modify this_free block to be allocation 
1511			      ex    DE, HL 
1511			      dec   HL 
1511			      dec   HL 
1511			      dec   HL 
1511			 
1511			      xor   A                       ; Null the next block ptr of allocated block 
1511			      ld    (HL), A 
1511			      inc   HL 
1511			      ld    (HL), A 
1511			 
1511			      inc   HL                      ; Store address of allocation to return 
1511			      inc   HL 
1511			      inc   HL 
1511			      push  HL 
1511			 
1511			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1511			      ld    L, (IX+0)               ; next_free to HL 
1511			      ld    H, (IX+1) 
1511			 
1511			      ld    (IX+2), L               ; HL to this_free 
1511			      ld    (IX+3), H 
1511			 
1511			 
1511			malloc_update_links: 
1511			      ; Update prev_free ptr to point to this_free 
1511			      ld    L, (IX+4)               ; prev_free ptr to HL 
1511			      ld    H, (IX+5) 
1511			 
1511			      ld    E, (IX+2)               ; this_free ptr to DE 
1511			      ld    D, (IX+3) 
1511			 
1511			      ld    (HL), E                 ; this_free ptr into prev_free 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			      ; Clear the Z flag to indicate successful allocation 
1511			      ld    A, D 
1511			      or    E 
1511			 
1511			      pop   DE                      ; Address of allocation 
1511			 
1511			malloc_no_space: 
1511			      ld    HL, 6                   ; Clean up stack frame 
1511			      add   HL, SP 
1511			      ld    SP, HL 
1511			 
1511			      ex    DE, HL                  ; Alloc addr into HL for return 
1511			 
1511			malloc_early_exit: 
1511			      pop   IX 
1511			      pop   DE 
1511			      pop   BC 
1511			 
1511			      ret 
1511			 
1511			 
1511			;------------------------------------------------------------------------------ 
1511			;     free                                                                    : 
1511			;                                                                             : 
1511			; Description                                                                 : 
1511			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1511			;     returned by malloc, otherwise the behaviour is undefined.               : 
1511			;                                                                             : 
1511			;     Where possible, directly adjacent free blocks will be merged together   : 
1511			;     into larger blocks to help ensure that the heap does not become         : 
1511			;     excessively fragmented.                                                 : 
1511			;                                                                             : 
1511			;     free does not clear or set any other value into the freed space, and    : 
1511			;     therefore its contents may be visible through subsequent malloc's. The  : 
1511			;     caller should clear the freed space as required.                        : 
1511			;                                                                             : 
1511			;     This implementation of free uses the stack exclusively, and is          : 
1511			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1511			;     advisable to disable interrupts before calling free, and recommended    : 
1511			;     to avoid the use of free inside ISRs in general.                        : 
1511			;                                                                             : 
1511			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1511			;                                                                             : 
1511			; Parameters                                                                  : 
1511			;     HL  Pointer to address of first byte of allocation to be freed          : 
1511			;                                                                             : 
1511			; Returns                                                                     : 
1511			;     Nothing                                                                 : 
1511			;                                                                             : 
1511			; Stack frame                                                                 : 
1511			;       |             |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |     BC      |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |     DE      |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |     IX      |                                                       : 
1511			;       +-------------+                                                       : 
1511			;       |  prev_free  |                                                       : 
1511			;   +2  +-------------+                                                       : 
1511			;       |  next_free  |                                                       : 
1511			;   +0  +-------------+                                                       : 
1511			;       |             |                                                       : 
1511			;                                                                             : 
1511			;------------------------------------------------------------------------------ 
1511			free: 
1511			      push  BC 
1511			      push  DE 
1511			      push  IX 
1511			 
1511			      ld    A, H                    ; Exit if ptr is null 
1511			      or    L 
1511			      jp    Z, free_early_exit 
1511			 
1511			      ; Set up stack frame 
1511			      ex    DE, HL 
1511			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1511			      add   HL, SP 
1511			      ld    SP, HL 
1511			      ld    IX, 0                   ; Use IX as a frame pointer 
1511			      add   IX, SP 
1511			 
1511			      ; The address in HL points to the start of the useable allocated space, 
1511			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1511			      ; address of the block itself. 
1511			      ex    DE, HL 
1511			      ld    DE, -4 
1511			      add   HL, DE 
1511			 
1511			      ; An allocated block must have a null next block pointer in it 
1511			      ld    A, (HL) 
1511			      inc   HL 
1511			      or    (HL) 
1511			      jp    NZ, free_done 
1511			 
1511			      dec   HL 
1511			 
1511			      ld    B, H                    ; Copy HL to BC 
1511			      ld    C, L 
1511			 
1511			      ; Loop through the free list to find the first block with an address 
1511			      ; higher than the block being freed 
1511			      ld    HL, free_list 
1511			 
1511			free_find_higher_block: 
1511			      ld    E, (HL)                 ; Load next ptr from free block 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      dec   HL 
1511			 
1511			      ld    (IX+0), E               ; Save ptr to next free block 
1511			      ld    (IX+1), D 
1511			      ld    (IX+2), L               ; Save ptr to prev free block 
1511			      ld    (IX+3), H 
1511			 
1511			      ld    A, B                    ; Check if DE is greater than BC 
1511			      cp    D                       ; Compare MSB first 
1511			      jr    Z, $+4                  ; MSB the same, compare LSB 
1511			      jr    NC, free_find_higher_block_skip 
1511			      ld    A, C 
1511			      cp    E                       ; Then compare LSB 
1511			      jr    C, free_found_higher_block 
1511			 
1511			free_find_higher_block_skip: 
1511			      ld    A, D                    ; Reached the end of the free list? 
1511			      or    E 
1511			      jp    Z, free_done 
1511			 
1511			      ex    DE, HL 
1511			 
1511			      jr    free_find_higher_block 
1511			 
1511			free_found_higher_block: 
1511			      ; Insert freed block between prev and next free blocks 
1511			      ld    (HL), C                 ; Point prev free block to freed block 
1511			      inc   HL 
1511			      ld    (HL), B 
1511			 
1511			      ld    H, B                    ; Point freed block at next free block 
1511			      ld    L, C 
1511			      ld    (HL), E 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			      ; Check if the freed block is adjacent to the next free block 
1511			      inc   HL                      ; Load size of freed block into HL 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      ex    DE, HL 
1511			 
1511			      add   HL, BC                  ; Add addr of freed block and its size 
1511			 
1511			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1511			      ld    D, (IX+1) 
1511			 
1511			      or    A                       ; Clear the carry flag 
1511			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1511			      jr    NZ, free_check_adjacent_to_prev 
1511			 
1511			      ; Freed block is adjacent to next, merge into one bigger block 
1511			      ex    DE, HL                  ; Load next ptr from next block into DE 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      push  HL                      ; Save ptr to next block for later 
1511			 
1511			      ld    H, B                    ; Store ptr from next block into freed block 
1511			      ld    L, C 
1511			      ld    (HL), E 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			      pop   HL                      ; Restore ptr to next block 
1511			      inc   HL                      ; Load size of next block into DE 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      push  DE                      ; Save next block size for later 
1511			 
1511			      ld    H, B                    ; Load size of freed block into HL 
1511			      ld    L, C 
1511			      inc   HL 
1511			      inc   HL 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      ex    DE, HL 
1511			 
1511			      pop   DE                      ; Restore size of next block 
1511			      add   HL, DE                  ; Add sizes of both blocks 
1511			      ex    DE, HL 
1511			 
1511			      ld    H, B                    ; Store new bigger size into freed block 
1511			      ld    L, C 
1511			      inc   HL 
1511			      inc   HL 
1511			      ld    (HL), E 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			free_check_adjacent_to_prev: 
1511			      ; Check if the freed block is adjacent to the prev free block 
1511			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1511			      ld    H, (IX+3) 
1511			 
1511			      inc   HL                      ; Size of prev free block into DE 
1511			      inc   HL 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      dec   HL 
1511			      dec   HL 
1511			      dec   HL 
1511			 
1511			      add   HL, DE                  ; Add prev block addr and size 
1511			 
1511			      or    A                       ; Clear the carry flag 
1511			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1511			      jr    NZ, free_done 
1511			 
1511			      ; Freed block is adjacent to prev, merge into one bigger block 
1511			      ld    H, B                    ; Load next ptr from freed block into DE 
1511			      ld    L, C 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      push  HL                      ; Save freed block ptr for later 
1511			 
1511			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1511			      ld    H, (IX+3) 
1511			      ld    (HL), E 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			      pop   HL                      ; Restore freed block ptr 
1511			      inc   HL                      ; Load size of freed block into DE 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			      push  DE                      ; Save freed block size for later 
1511			 
1511			      ld    L, (IX+2)               ; Load size of prev block into DE 
1511			      ld    H, (IX+3) 
1511			      inc   HL 
1511			      inc   HL 
1511			      ld    E, (HL) 
1511			      inc   HL 
1511			      ld    D, (HL) 
1511			 
1511			      pop   HL                      ; Add sizes of both blocks 
1511			      add   HL, DE 
1511			      ex    DE, HL 
1511			 
1511			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1511			      ld    H, (IX+3) 
1511			      inc   HL 
1511			      inc   HL 
1511			      ld    (HL), E 
1511			      inc   HL 
1511			      ld    (HL), D 
1511			 
1511			free_done: 
1511			      ld    HL, 4                   ; Clean up stack frame 
1511			      add   HL, SP 
1511			      ld    SP, HL 
1511			 
1511			free_early_exit: 
1511			      pop   IX 
1511			      pop   DE 
1511			      pop   BC 
1511			 
1511			      ret 
1511			 
1511			 
1511			;      .org 0x8000 
1511			; 
1511			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1511			 ;                 .dw   0 
1511			 
1511			endif 
1511			 
1511			 
1511			if MALLOC_4 
1511			 
1511			; My memory allocation code. Very very simple.... 
1511			; allocate space under 250 chars 
1511			 
1511			heap_init: 
1511				; init start of heap as zero 
1511				;  
1511			 
1511				ld hl, heap_start 
1511			;	ld a, 0 
1511				ld (hl), 0      ; empty block 
1511				inc hl 
1511			;	ld a, 0 
1511				ld (hl), 0      ; length of block 
1511				; write end of list 
1511				inc hl 
1511				ld a,(hl) 
1511				inc hl 
1511				ld a,(hl) 
1511				 
1511			 
1511				; init some malloc vars 
1511			 
1511				ld hl, 0 
1511				ld (free_list), hl       ; store last malloc location 
1511			 
1511				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1511			;	ld a, 0 
1511				ld (hl), 0 
1511			 
1511			 
1511				ld hl, heap_start 
1511				;  
1511				  
1511				ret 
1511			 
1511			 
1511			;    free block marker 
1511			;    requested size  
1511			;    pointer to next block 
1511			;    .... 
1511			;    next block marker 
1511			 
1511			 
1511			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1511			; 
1511			 
1511			 
1511			malloc:  
1511				push de 
1511				push bc 
1511				push af 
1511			 
1511				; hl space required 
1511				 
1511				ld c, l    ; hold space   (TODO only a max of 255) 
1511			 
1511			;	inc c     ; TODO BUG need to fix memory leak on push str 
1511			;	inc c 
1511			;	inc c 
1511			;	inc c 
1511			;	inc c 
1511			;	inc c 
1511			;	inc c 
1511			 
1511			 
1511			 
1511				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1511			 
1511				ld a, (free_list+3) 
1511			;	cp 0 
1511				or a 
1511				jr z, .contheap 
1511			 
1511				ld hl, (free_list)     ; get last alloc 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "mrs" 
1511						CALLMONITOR 
1511					endif 
1511				jr .startalloc 
1511			 
1511			.contheap: 
1511				ld hl, heap_start 
1511			 
1511			.startalloc: 
1511			 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "mym" 
1511						CALLMONITOR 
1511					endif 
1511			.findblock: 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "mmf" 
1511						CALLMONITOR 
1511					endif 
1511			 
1511				ld a,(hl)  
1511				; if byte is zero then clear to use 
1511			 
1511			;	cp 0 
1511				or a 
1511				jr z, .foundemptyblock 
1511			 
1511				; if byte is not clear 
1511				;     then byte is offset to next block 
1511			 
1511				inc hl 
1511				ld a, (hl) ; get size 
1511			.nextblock:	inc hl 
1511					ld e, (hl) 
1511					inc hl 
1511					ld d, (hl) 
1511					ex de, hl 
1511			;	inc hl  ; move past the store space 
1511			;	inc hl  ; move past zero index  
1511			 
1511				; TODO detect no more space 
1511			 
1511				push hl 
1511				ld de, heap_end 
1511				call cmp16 
1511				pop hl 
1511				jr nc, .nospace 
1511			 
1511				jr .findblock 
1511			 
1511			.nospace: ld hl, 0 
1511				jp .exit 
1511			 
1511			 
1511			.foundemptyblock:	 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "mme" 
1511						CALLMONITOR 
1511					endif 
1511			 
1511			; TODO has block enough space if reusing??? 
1511			 
1511				;  
1511			 
1511			; see if this block has been previously used 
1511				inc hl 
1511				ld a, (hl) 
1511				dec hl 
1511			;	cp 0 
1511				or a 
1511				jr z, .newblock 
1511			 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "meR" 
1511						CALLMONITOR 
1511					endif 
1511			 
1511			; no reusing previously allocated block 
1511			 
1511			; is it smaller than previously used? 
1511				 
1511				inc hl    ; move to size 
1511				ld a, c 
1511				sub (hl)        ; we want c < (hl) 
1511				dec hl    ; move back to marker 
1511			        jr z, .findblock 
1511			 
1511				; update with the new size which should be lower 
1511			 
1511			        ;inc  hl   ; negate next move. move back to size  
1511			 
1511			.newblock: 
1511				; need to be at marker here 
1511			 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "meN" 
1511						CALLMONITOR 
1511					endif 
1511			 
1511			 
1511				ld a, c 
1511			 
1511				ld (free_list+3), a	 ; flag resume from last malloc  
1511				ld (free_list), hl    ; save out last location 
1511			 
1511			 
1511				;inc a     ; space for length byte 
1511				ld (hl), a     ; save block in use marker 
1511			 
1511				inc hl   ; move to space marker 
1511				ld (hl), a    ; save new space 
1511			 
1511				inc hl   ; move to start of allocated area 
1511				 
1511			;	push hl     ; save where we are - 1  
1511			 
1511			;	inc hl  ; move past zero index  
1511				; skip space to set down new marker 
1511			 
1511				; provide some extra space for now 
1511			 
1511				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1511				inc a 
1511				inc a 
1511			 
1511				push hl   ; save where we are in the node block 
1511			 
1511				call addatohl 
1511			 
1511				; write linked list point 
1511			 
1511				pop de     ; get our node position 
1511				ex de, hl 
1511			 
1511				ld (hl), e 
1511				inc hl 
1511				ld (hl), d 
1511			 
1511				inc hl 
1511			 
1511				; now at start of allocated data so save pointer 
1511			 
1511				push hl 
1511			 
1511				; jump to position of next node and setup empty header in DE 
1511			 
1511				ex de, hl 
1511			 
1511			;	inc hl ; move past end of block 
1511			 
1511			;	ld a, 0 
1511				ld (hl), 0   ; empty marker 
1511				inc hl 
1511				ld (hl), 0   ; size 
1511				inc hl  
1511				ld (hl), 0   ; ptr 
1511				inc hl 
1511				ld (hl), 0   ; ptr 
1511			 
1511			 
1511				pop hl 
1511			 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "mmr" 
1511						CALLMONITOR 
1511					endif 
1511			 
1511			.exit: 
1511				pop af 
1511				pop bc 
1511				pop de  
1511				ret 
1511			 
1511			 
1511			 
1511			 
1511			free:  
1511				push hl 
1511				push af 
1511				; get address in hl 
1511			 
1511					if DEBUG_FORTH_MALLOC_INT 
1511						DMARK "fre" 
1511						CALLMONITOR 
1511					endif 
1511				; data is at hl - move to block count 
1511				dec hl 
1511				dec hl    ; get past pointer 
1511				dec hl 
1511			 
1511				ld a, (hl)    ; need this for a validation check 
1511			 
1511				dec hl    ; move to block marker 
1511			 
1511				; now check that the block count and block marker are the same  
1511			        ; this checks that we are on a malloc node and not random memory 
1511			        ; OK a faint chance this could be a problem but rare - famous last words! 
1511			 
1511				ld c, a 
1511				ld a, (hl)    
1511			 
1511				cp c 
1511				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1511			 
1511				; yes good chance we are on a malloc node 
1511			 
1511			;	ld a, 0      
1511				ld (hl), 0   ; mark as free 
1511			 
1511				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1511			 
1511			.freeignore:  
1511			 
1511				pop af 
1511				pop hl 
1511			 
1511				ret 
1511			 
1511			 
1511			 
1511			endif 
1511			 
1511			; eof 
# End of file firmware_memory.asm
1511			  
1511			; device C  
1511			; Now handled by SPI  
1511			;if SOUND_ENABLE  
1511			;	include "firmware_sound.asm"  
1511			;endif  
1511			  
1511			include "firmware_diags.asm"  
1511			; Hardware diags menu 
1511			 
1511			 
1511			config: 
1511			 
1511 3e 00			ld a, 0 
1513 21 37 15			ld hl, .configmn 
1516 cd ac 0d			call menu 
1519			 
1519 fe 00			cp 0 
151b c8				ret z 
151c			 
151c			;	cp 1 
151c			;	call z, .savetostore 
151c			 
151c fe 01			cp 1 
151e			if STARTUP_V1 
151e				call z, .selautoload 
151e			endif 
151e			 
151e			if STARTUP_V2 
151e cc 43 15			call z, .enautoload 
1521			endif 
1521 fe 02			cp 2 
1523 cc 5a 15			call z, .disautoload 
1526			;	cp 3 
1526			;	call z, .selbank 
1526 fe 03			cp 3 
1528 cc c5 17			call z, .debug_tog 
152b fe 04			cp 4 
152d cc 93 18			call z, .bpsgo 
1530			;	cp 5 
1530			;	call z, hardware_diags 
1530			if STARTUP_V2 
1530 fe 05			cp 5 
1532 cc 86 15			call z, create_startup 
1535			endif 
1535 18 da			jr config 
1537			 
1537			.configmn: 
1537			;	dw prom_c3 
1537 81 1a			dw prom_c2 
1539 97 1a			dw prom_c2a 
153b			;	dw prom_c2b 
153b			;	dw prom_c4 
153b 0e 1b			dw prom_m4 
153d 29 1b			dw prom_m4b 
153f			;	dw prom_c1 
153f			if STARTUP_V2 
153f 31 1b			dw prom_c9 
1541			endif 
1541 00 00			dw 0 
1543				 
1543			 
1543			if STARTUP_V2 
1543			.enautoload: 
1543				if STORAGE_SE 
1543 3e fe			ld a, $fe      ; bit 0 clear 
1545 32 92 f9			ld (spi_device), a 
1548			 
1548 cd 05 05			call storage_get_block_0 
154b			 
154b 3e 01			ld a, 1 
154d 32 cd f9			ld (store_page+STORE_0_AUTOFILE), a 
1550			 
1550 21 00 00				ld hl, 0 
1553 11 ac f9				ld de, store_page 
1556 cd bc 04			call storage_write_block	 ; save update 
1559				else 
1559			 
1559				ld hl, prom_notav 
1559				ld de, prom_empty 
1559				call info_panel 
1559				endif 
1559			 
1559			 
1559 c9				ret 
155a			endif 
155a			 
155a			.disautoload: 
155a				if STORAGE_SE 
155a 3e fe			ld a, $fe      ; bit 0 clear 
155c 32 92 f9			ld (spi_device), a 
155f			 
155f cd 05 05			call storage_get_block_0 
1562			 
1562 3e 00			ld a, 0 
1564 32 cd f9			ld (store_page+STORE_0_AUTOFILE), a 
1567			 
1567 21 00 00				ld hl, 0 
156a 11 ac f9				ld de, store_page 
156d cd bc 04			call storage_write_block	 ; save update 
1570				else 
1570			 
1570				ld hl, prom_notav 
1570				ld de, prom_empty 
1570				call info_panel 
1570				endif 
1570			 
1570			 
1570 c9				ret 
1571			 
1571			if STARTUP_V1 
1571			 
1571			; Select auto start 
1571			 
1571			.selautoload: 
1571			 
1571				 
1571				if STORAGE_SE 
1571			 
1571					call config_dir 
1571				        ld hl, scratch 
1571					ld a, 0 
1571					call menu 
1571			 
1571					cp 0 
1571					ret z 
1571			 
1571					dec a 
1571			 
1571			 
1571					; locate menu option 
1571			 
1571					ld hl, scratch 
1571					call table_lookup 
1571			 
1571					if DEBUG_FORTH_WORDS 
1571						DMARK "ALl" 
1571						CALLMONITOR 
1571					endif 
1571					; with the pointer to the menu it, the byte following the zero term is the file id 
1571			 
1571					ld a, 0 
1571					ld bc, 50   ; max of bytes to look at 
1571					cpir  
1571			 
1571					if DEBUG_FORTH_WORDS 
1571						DMARK "ALb" 
1571						CALLMONITOR 
1571					endif 
1571					;inc hl 
1571			 
1571					ld a, (hl)   ; file id 
1571					 
1571				        ; save bank and file ids 
1571			 
1571					push af 
1571			 
1571			; TODO need to save to block 0 on bank 1	 
1571			 
1571					call storage_get_block_0 
1571			 
1571					if DEBUG_FORTH_WORDS 
1571						DMARK "AL0" 
1571						CALLMONITOR 
1571					endif 
1571					pop af 
1571			 
1571					ld (store_page+STORE_0_FILERUN),a 
1571					 
1571					; save bank id 
1571			 
1571					ld a,(spi_device) 
1571					ld (store_page+STORE_0_BANKRUN),a 
1571			 
1571					; enable auto run of store file 
1571			 
1571					ld a, 1 
1571					ld (store_page+STORE_0_AUTOFILE),a 
1571			 
1571					; save buffer 
1571			 
1571					ld hl, 0 
1571					ld de, store_page 
1571					if DEBUG_FORTH_WORDS 
1571						DMARK "ALw" 
1571						CALLMONITOR 
1571					endif 
1571				call storage_write_block	 ; save update 
1571			  
1571			 
1571			 
1571			 
1571					ld hl, scratch 
1571					call config_fdir 
1571			 
1571				else 
1571			 
1571				ld hl, prom_notav 
1571				ld de, prom_empty 
1571				call info_panel 
1571			 
1571				endif 
1571				ret 
1571			endif 
1571			 
1571			 
1571			; Select storage bank 
1571			 
1571			.selbank: 
1571			 
1571			;	if STORAGE_SE 
1571			;	else 
1571			 
1571 21 46 1b			ld hl, prom_notav 
1574 11 5c 1b			ld de, prom_empty 
1577 cd 0e 0d			call info_panel 
157a			;	endif 
157a				 
157a c9				ret 
157b			 
157b			if STORAGE_SE 
157b			 
157b			.config_ldir:   
157b				; Load storage bank labels into menu array 
157b			 
157b				 
157b			 
157b			 
157b c9				ret 
157c			 
157c			 
157c			endif 
157c			 
157c			 
157c			; Save user words to storage 
157c			 
157c			.savetostore: 
157c			 
157c			;	if STORAGE_SE 
157c			; 
157c			;		call config_dir 
157c			;	        ld hl, scratch 
157c			;		ld a, 0 
157c			;		call menu 
157c			;		 
157c			;		ld hl, scratch 
157c			;		call config_fdir 
157c			; 
157c			;	else 
157c			 
157c 21 46 1b			ld hl, prom_notav 
157f 11 5c 1b			ld de, prom_empty 
1582 cd 0e 0d			call info_panel 
1585			 
1585			;	endif 
1585			 
1585 c9				ret 
1586			 
1586			if STARTUP_V2 
1586			 
1586			create_startup: 
1586			 
1586 3e 00			ld a, 0 
1588 21 ea 16			ld hl, .crstart 
158b cd ac 0d			call menu 
158e			 
158e fe 00			cp 0 
1590 c8				ret z 
1591			 
1591 fe 01			cp 1 
1593 cc cf 15			call z, .genlsword 
1596 fe 02			cp 2 
1598 cc d9 15			call z, .genedword 
159b			 
159b fe 03			cp 3 
159d cc e3 15			call z, .gendemword 
15a0			 
15a0 fe 04			cp 4 
15a2 cc ed 15			call z, .genutlword 
15a5 fe 05			cp 5 
15a7 cc f7 15			call z, .genspiword 
15aa fe 06			cp 6 
15ac cc 01 16			call z, .genkeyword 
15af fe 07			cp 7 
15b1 cc c5 15			call z, .gensoundword 
15b4 fe 08			cp 8 
15b6 cc bb 15			call z, .genhwword 
15b9 18 cb			jr create_startup 
15bb			 
15bb			.genhwword: 
15bb 21 f8 1a			ld hl, crs_hw 
15be 11 4e 16			ld de, .hwworddef 
15c1 cd 0b 16			call .genfile 
15c4 c9				ret 
15c5			.gensoundword: 
15c5 21 ec 1a			ld hl, crs_sound 
15c8 11 5c 16			ld de, .soundworddef 
15cb cd 0b 16			call .genfile 
15ce c9				ret 
15cf			.genlsword: 
15cf 21 ae 1a			ld hl, crs_s1 
15d2 11 82 16			ld de, .lsworddef 
15d5 cd 0b 16			call .genfile 
15d8 c9				ret 
15d9			 
15d9			.genedword: 
15d9 11 86 16			ld de, .edworddef 
15dc 21 b7 1a			ld hl, crs_s2 
15df cd 0b 16			call .genfile 
15e2 c9				ret 
15e3			 
15e3			.gendemword: 
15e3 11 8e 16			ld de, .demoworddef 
15e6 21 c0 1a			ld hl, crs_s3 
15e9 cd 0b 16			call .genfile 
15ec c9				ret 
15ed			 
15ed			.genutlword: 
15ed 21 cc 1a			ld hl, crs_s4 
15f0 11 70 16			ld de, .utilwordef 
15f3 cd 0b 16			call .genfile 
15f6 c9				ret 
15f7			.genspiword: 
15f7 21 d3 1a			ld hl, crs_s5 
15fa 11 b0 16			ld de, .spiworddef 
15fd cd 0b 16			call .genfile 
1600 c9				ret 
1601			.genkeyword: 
1601 21 dd 1a			ld hl, crs_s6 
1604 11 be 16			ld de, .keyworddef 
1607 cd 0b 16			call .genfile 
160a c9				ret 
160b			 
160b			; hl - points to file name 
160b			; de - points to strings to add to file 
160b			 
160b			.genfile: 
160b e5				push hl 
160c d5				push de 
160d			 
160d cd 7c 0d			call clear_display 
1610 3e 00			ld a, display_row_1 
1612 11 3d 16			ld de, .genfiletxt 
1615 cd 8e 0d			call str_at_display 
1618 cd 9e 0d			call update_display 
161b			 
161b d1				pop de 
161c e1				pop hl 
161d			 
161d			 
161d d5				push de 
161e cd 51 08			call storage_create 
1621				; id in hl 
1621 d1				pop de   ; table of strings to add 
1622			 
1622			.genloop: 
1622			 
1622 e5				push hl ; save id for next time around 
1623 d5				push de ; save de for next time around 
1624			 
1624 eb				ex de, hl 
1625 cd d9 22			call loadwordinhl 
1628 eb				ex de, hl 
1629			 
1629				; need hl to be the id 
1629				; need de to be the string ptr 
1629				 
1629 cd 3b 0b			call storage_append 
162c			 
162c d1				pop de 
162d e1				pop hl 
162e			 
162e 13				inc de 
162f 13				inc de 
1630			 
1630 1a				ld a,(de) 
1631 fe 00			cp 0 
1633 20 ed			jr nz, .genloop 
1635 13				inc de 
1636 1a				ld a, (de) 
1637 1b				dec de 
1638 fe 00			cp 0 
163a 20 e6			jr nz, .genloop	 
163c			 
163c c9				ret 
163d			 
163d .. 00		.genfiletxt:  db "Creating file...",0 
164e			 
164e			.hwworddef: 
164e b9 6b			dw test5 
1650 f1 6b			dw test6 
1652 29 6c			dw test7 
1654 3d 6c			dw test8 
1656 69 6c			dw test9 
1658 7f 6c			dw test10 
165a 00 00			dw 0 
165c			 
165c			.soundworddef: 
165c a4 6c			dw sound1 
165e c8 6c			dw sound2 
1660 f8 6c			dw sound3 
1662 1d 6d			dw sound4 
1664 2a 6d			dw sound5 
1666 37 6d			dw sound6 
1668 44 6d			dw sound7 
166a 51 6d			dw sound8 
166c 69 6d			dw sound9 
166e 00 00			dw 0 
1670			 
1670			.utilwordef: 
1670 df 69			dw strncpy 
1672 ba 69			dw type 
1674 3c 6b			dw tuck 
1676 86 69			dw clrstack 
1678 3f 69			dw longread 
167a 40 6a			dw start1 
167c 50 6a			dw start2 
167e			; duplicated 
167e			;	dw start3b 
167e			;	dw start3c 
167e 4f 6b			dw list 
1680 00 00			dw 0 
1682			 
1682			.lsworddef: 
1682 61 6a			dw start3b 
1684 00 00			dw 0 
1686			 
1686			.edworddef: 
1686 9e 65			dw edit1 
1688 bf 65			dw edit2 
168a f4 65			dw edit3 
168c 00 00			dw 0 
168e			 
168e			.demoworddef: 
168e 80 6d			dw game1 
1690 91 6d			dw game1a 
1692 f3 6d			dw game1b 
1694 28 6e			dw game1c 
1696 5e 6e			dw game1d 
1698 8f 6e			dw game1s 
169a a3 6e			dw game1t 
169c b8 6e			dw game1f 
169e ec 6e			dw game1z 
16a0 30 6f			dw game1zz 
16a2 99 6f			dw ssv2 
16a4 cf 6f			dw ssv3 
16a6 eb 6f			dw ssv4 
16a8 07 70			dw ssv5 
16aa 20 70			dw ssv1 
16ac 68 70			dw ssv1cpm	 
16ae			;	dw game2b 
16ae			;	dw game2bf 
16ae			;	dw game2mba 
16ae			;	dw game2mbas	 
16ae			;	dw game2mbht 
16ae			;	dw game2mbms 
16ae			;	dw game2mb 
16ae			;	dw game3w 
16ae			;	dw game3p 
16ae			;	dw game3sc 
16ae			;	dw game3vsi 
16ae			;	dw game3vs 
16ae 00 00			dw 0 
16b0			 
16b0			 
16b0			.spiworddef: 
16b0			 
16b0 2c 66		    dw spi1 
16b2 85 66		    dw spi2 
16b4 b9 66		    dw spi2b 
16b6 3d 67		    dw spi3 
16b8 e7 66		    dw spi4 
16ba 10 67		    dw spi5 
16bc			;    dw spi6 
16bc			;    dw spi7 
16bc			 
16bc			;    dw spi8 
16bc			;    dw spi9 
16bc			;    dw spi10 
16bc 00 00		    dw 0 
16be			 
16be			.keyworddef: 
16be			 
16be bf 70			dw keyup 
16c0 cd 70			dw keydown 
16c2 dd 70			dw keyleft 
16c4 ed 70			dw keyright 
16c6 fe 70			dw 	keyf1 
16c8 0c 71			dw keyf2 
16ca 1a 71			dw keyf3 
16cc 28 71			dw keyf4 
16ce 36 71			dw keyf5 
16d0 44 71			dw keyf6 
16d2 52 71			dw keyf7 
16d4 60 71			dw keyf8 
16d6 6e 71			dw keyf9 
16d8 7c 71			dw keyf10 
16da 8b 71			dw keyf11 
16dc 9a 71			dw keyf12 
16de a9 71			dw keytab 
16e0 b8 71			dw keycr 
16e2 c6 71			dw keyhome 
16e4 d6 71			dw keyend 
16e6 e5 71			dw keybs 
16e8 00 00			dw 0 
16ea			 
16ea			.crstart: 
16ea ae 1a			dw crs_s1 
16ec b7 1a			dw crs_s2 
16ee c0 1a			dw crs_s3 
16f0 cc 1a			dw crs_s4 
16f2 d3 1a			dw crs_s5 
16f4 dd 1a			dw crs_s6 
16f6 ec 1a			dw crs_sound 
16f8 f8 1a			dw crs_hw 
16fa 00 00			dw 0 
16fc			 
16fc			endif 
16fc			 
16fc			 
16fc			if STORAGE_SE 
16fc			 
16fc			config_fdir: 
16fc				; using the scratch dir go through and release the memory allocated for each string 
16fc				 
16fc 21 f3 f0			ld hl, scratch 
16ff 5e			.cfdir:	ld e,(hl) 
1700 23				inc hl 
1701 56				ld d,(hl) 
1702 23				inc hl 
1703			 
1703 eb				ex de, hl 
1704 cd d5 0f			call ishlzero 
1707 c8				ret z     ; return on null pointer 
1708 cd 42 14			call free 
170b eb				ex de, hl 
170c 18 f1			jr .cfdir 
170e			 
170e			 
170e c9				ret 
170f			 
170f			 
170f			config_dir: 
170f			 
170f				; for the config menus that need to build a directory of storage call this routine 
170f				; it will construct a menu in scratch to pass to menu 
170f			 
170f				; open storage device 
170f			 
170f				; execute DIR to build a list of files and their ids into scratch in menu format 
170f				; once the menu has finished then will need to call config_fdir to release the strings 
170f				 
170f				; c = number items 
170f			 
170f				 
170f cd 05 05			call storage_get_block_0 
1712			 
1712 21 ac f9			ld hl, store_page     ; get current id count 
1715 46				ld b, (hl) 
1716 0e 00			ld c, 0    ; count of files   
1718			 
1718			 
1718 21 f3 f0			ld hl, scratch 
171b 22 a3 f9			ld (store_tmp2), hl    ; location to poke strings 
171e			 
171e				; check for empty drive 
171e			 
171e 3e 00			ld a, 0 
1720 b8				cp b 
1721 ca bb 17			jp z, .dirdone 
1724			 
1724				 
1724					if DEBUG_FORTH_WORDS 
1724						DMARK "Cdc" 
1724 f5				push af  
1725 3a 39 17			ld a, (.dmark)  
1728 32 9d fd			ld (debug_mark),a  
172b 3a 3a 17			ld a, (.dmark+1)  
172e 32 9e fd			ld (debug_mark+1),a  
1731 3a 3b 17			ld a, (.dmark+2)  
1734 32 9f fd			ld (debug_mark+2),a  
1737 18 03			jr .pastdmark  
1739 ..			.dmark: db "Cdc"  
173c f1			.pastdmark: pop af  
173d			endm  
# End of macro DMARK
173d						CALLMONITOR 
173d cd aa fd			call debug_vector  
1740				endm  
# End of macro CALLMONITOR
1740					endif 
1740			 
1740			 
1740			.diritem:	 
1740 c5				push bc 
1741				; for each of the current ids do a search for them and if found push to stack 
1741			 
1741 21 40 00				ld hl, STORE_BLOCK_PHY 
1744 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
1746 58					ld e,b 
1747			 
1747 cd 83 07				call storage_findnextid 
174a			 
174a			 
174a					; if found hl will be non zero 
174a			 
174a cd d5 0f				call ishlzero 
174d 28 69				jr z, .dirnotfound 
174f			 
174f					; increase count 
174f			 
174f c1					pop bc	 
1750 0c					inc c 
1751 c5					push bc 
1752					 
1752			 
1752					; get file header and push the file name 
1752			 
1752 11 ac f9				ld de, store_page 
1755 cd 57 04				call storage_read_block 
1758			 
1758					; push file id to stack 
1758				 
1758 3a ac f9				ld a, (store_page) 
175b 26 00				ld h, 0 
175d 6f					ld l, a 
175e			 
175e					;call forth_push_numhl 
175e					; TODO store id 
175e			 
175e e5					push hl 
175f			 
175f					; push extent count to stack  
175f				 
175f 21 af f9				ld hl, store_page+3 
1762			 
1762					; get file name length 
1762			 
1762 cd 04 13				call strlenz   
1765			 
1765 23					inc hl   ; cover zero term 
1766 23					inc hl  ; stick the id at the end of the area 
1767			 
1767 e5					push hl 
1768 c1					pop bc    ; move length to bc 
1769			 
1769 cd 78 13				call malloc 
176c			 
176c					; TODO save malloc area to scratch 
176c			 
176c eb					ex de, hl 
176d 2a a3 f9				ld hl, (store_tmp2) 
1770 73					ld (hl), e 
1771 23					inc hl 
1772 72					ld (hl), d 
1773 23					inc hl 
1774 22 a3 f9				ld (store_tmp2), hl 
1777			 
1777					 
1777			 
1777					;pop hl   ; get source 
1777			;		ex de, hl    ; swap aronund	 
1777			 
1777 21 af f9				ld hl, store_page+3 
177a					if DEBUG_FORTH_WORDS 
177a						DMARK "CFd" 
177a f5				push af  
177b 3a 8f 17			ld a, (.dmark)  
177e 32 9d fd			ld (debug_mark),a  
1781 3a 90 17			ld a, (.dmark+1)  
1784 32 9e fd			ld (debug_mark+1),a  
1787 3a 91 17			ld a, (.dmark+2)  
178a 32 9f fd			ld (debug_mark+2),a  
178d 18 03			jr .pastdmark  
178f ..			.dmark: db "CFd"  
1792 f1			.pastdmark: pop af  
1793			endm  
# End of macro DMARK
1793						CALLMONITOR 
1793 cd aa fd			call debug_vector  
1796				endm  
# End of macro CALLMONITOR
1796					endif 
1796 ed b0				ldir 
1798			 
1798					; de is past string, move back one and store id 
1798					 
1798 1b					dec de 
1799			 
1799					; store file id 
1799			 
1799 e1					pop hl 
179a eb					ex de,hl 
179b 73					ld (hl), e 
179c			 
179c					if DEBUG_FORTH_WORDS 
179c						DMARK "Cdi" 
179c f5				push af  
179d 3a b1 17			ld a, (.dmark)  
17a0 32 9d fd			ld (debug_mark),a  
17a3 3a b2 17			ld a, (.dmark+1)  
17a6 32 9e fd			ld (debug_mark+1),a  
17a9 3a b3 17			ld a, (.dmark+2)  
17ac 32 9f fd			ld (debug_mark+2),a  
17af 18 03			jr .pastdmark  
17b1 ..			.dmark: db "Cdi"  
17b4 f1			.pastdmark: pop af  
17b5			endm  
# End of macro DMARK
17b5						CALLMONITOR 
17b5 cd aa fd			call debug_vector  
17b8				endm  
# End of macro CALLMONITOR
17b8					endif 
17b8					 
17b8			.dirnotfound: 
17b8 c1					pop bc     
17b9 10 85				djnz .diritem 
17bb				 
17bb			.dirdone:	 
17bb			 
17bb			;		ld a, 0 
17bb 2a a3 f9				ld hl, (store_tmp2) 
17be 36 00				ld (hl), 0 
17c0 23					inc hl 
17c1 36 00				ld (hl), 0 
17c3 23					inc hl 
17c4					; push a count of the dir items found 
17c4			 
17c4			;		ld h, 0 
17c4			;		ld l, c 
17c4			 
17c4 c9				ret 
17c5			 
17c5			endif 
17c5			 
17c5			 
17c5			; Settings 
17c5			; Run  
17c5			 
17c5			 
17c5			 
17c5			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
17c5			;;hd_menu2:   db "        2: Editor",0   
17c5			;hd_menu2:   db "        2: Editor       6: Menu",0   
17c5			;hd_menu3:   db "        3: Storage",0 
17c5			;hd_menu4:   db "0=quit  4: Debug",0 
17c5			;hd_don:     db "ON",0 
17c5			;hd_doff:     db "OFF",0 
17c5			; 
17c5			; 
17c5			; 
17c5			;hardware_diags_old:       
17c5			; 
17c5			;.diagmenu: 
17c5			;	call clear_display 
17c5			;	ld a, display_row_1 
17c5			;	ld de, hd_menu1 
17c5			;	call str_at_display 
17c5			; 
17c5			;	ld a, display_row_2 
17c5			;	ld de, hd_menu2 
17c5			;	call str_at_display 
17c5			; 
17c5			;	ld a, display_row_3 
17c5			;	ld de, hd_menu3 
17c5			;	call str_at_display 
17c5			; 
17c5			;	ld a,  display_row_4 
17c5			;	ld de, hd_menu4 
17c5			;	call str_at_display 
17c5			; 
17c5			;	; display debug state 
17c5			; 
17c5			;	ld de, hd_don 
17c5			;	ld a, (os_view_disable) 
17c5			;	cp 0 
17c5			;	jr z, .distog 
17c5			;	ld de, hd_doff 
17c5			;.distog: ld a, display_row_4+17 
17c5			;	call str_at_display 
17c5			; 
17c5			;	call update_display 
17c5			; 
17c5			;	call cin_wait 
17c5			; 
17c5			; 
17c5			; 
17c5			;	cp '4' 
17c5			;	jr nz, .diagn1 
17c5			; 
17c5			;	; debug toggle 
17c5			; 
17c5			;	ld a, (os_view_disable) 
17c5			;	ld b, '*' 
17c5			;	cp 0 
17c5			;	jr z, .debtog 
17c5			;	ld b, 0 
17c5			;.debtog:	 
17c5			;	ld a,b 
17c5			;	ld (os_view_disable),a 
17c5			; 
17c5			;.diagn1: cp '0' 
17c5			;	 ret z 
17c5			; 
17c5			;;	cp '1' 
17c5			;;       jp z, matrix	 
17c5			;;   TODO keyboard matrix test 
17c5			; 
17c5			;	cp '2' 
17c5			;	jp z, .diagedit 
17c5			; 
17c5			;;	cp '6' 
17c5			;;	jp z, .menutest 
17c5			;;if ENABLE_BASIC 
17c5			;;	cp '6' 
17c5			;;	jp z, basic 
17c5			;;endif 
17c5			 ; 
17c5			;	jp .diagmenu 
17c5			; 
17c5			; 
17c5			;	ret 
17c5			 
17c5			 
17c5			.debug_tog: 
17c5 21 ee 17			ld hl, .menudebug 
17c8				 
17c8			;	ld a, (os_view_disable) 
17c8			;	cp '*' 
17c8 3a aa fd			ld a,(debug_vector) 
17cb fe c9			cp $C9   ; RET 
17cd 20 04			jr nz,.tdon  
17cf 3e 01			ld a, 1 
17d1 18 02			jr .tog1 
17d3 3e 00		.tdon: ld a, 0 
17d5			 
17d5			.tog1: 
17d5 cd ac 0d			call menu 
17d8 fe 00			cp 0 
17da c8				ret z 
17db fe 01			cp 1    ; disable debug 
17dd 28 04			jr z, .dtog0 
17df 3e 2a			ld a, '*' 
17e1 18 05			jr .dtogset 
17e3			.dtog0:  
17e3				;ld a, 0 
17e3 cd 81 18			call bp_on 
17e6 18 dd			jr .debug_tog 
17e8			.dtogset:  
17e8				; ld (os_view_disable), a 
17e8 cd 8d 18			call bp_off 
17eb c3 c5 17			jp .debug_tog 
17ee			 
17ee			 
17ee			.menudebug: 
17ee f4 17				dw .m6 
17f0 fd 17				dw .m7 
17f2 00 00				dw 0 
17f4 .. 00		.m6:   db "Debug ON",0 
17fd .. 00		.m7:   db "Debug OFF",0 
1807			;hardware_diags:       
1807			 
1807			ENABLE_HDIAGS: equ 0 
1807			 
1807			if ENABLE_HDIAGS 
1807			.diagm: 
1807				ld hl, .menuitems 
1807				ld a, 0 
1807				call menu 
1807			 
1807			         cp 0 
1807				 ret z 
1807			 
1807				cp 2 
1807				jp z, .diagedit 
1807			 
1807			;	cp '6' 
1807			;	jp z, .menutest 
1807			;if ENABLE_BASIC 
1807			;	cp '6' 
1807			;	jp z, basic 
1807			;endif 
1807			  
1807				jp .diagm 
1807			 
1807				 
1807			.menuitems:   	dw .m1 
1807					dw .m2 
1807					dw .m3 
1807					dw .m5 
1807					dw .m5a 
1807					dw .m5b 
1807					dw 0 
1807			 
1807			 
1807			.m1:   db "Key Matrix",0 
1807			.m2:   db "Editor",0 
1807			.m3:   db "Storage",0 
1807			.m5:   db "Sound",0 
1807			.m5a:  db "RAM Test",0 
1807			.m5b:  db "LCD Test",0 
1807			 
1807			 
1807			; debug editor 
1807			 
1807			.diagedit: 
1807			 
1807				ld hl, scratch 
1807			;	ld bc, 250 
1807			;	ldir 
1807				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1807			;	ld a, 0 
1807				ld (hl), 0 
1807				inc hl 
1807				ld (hl), 0 
1807				inc hl 
1807				ld (hl), 0 
1807			 
1807			        call clear_display 
1807				call update_display 
1807				;ld a, 1 
1807				;ld (hardware_diag), a 
1807			.diloop: 
1807				ld a, display_row_1 
1807				ld c, 0 
1807				ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1807				ld e, 40 
1807			 
1807				ld hl, scratch	 
1807				call input_str 
1807			 
1807				ld a, display_row_2 
1807				ld de, scratch 
1807				call str_at_display 
1807				call update_display 
1807			 
1807				jp .diloop 
1807			endif 
1807			 
1807			; pass word in hl 
1807			; a has display location 
1807			display_word_at: 
1807 f5				push af 
1808 e5				push hl 
1809 7c				ld a,h 
180a 21 f8 f3			ld hl, os_word_scratch 
180d cd a8 11			call hexout 
1810 e1				pop hl 
1811 7d				ld a,l 
1812 21 fa f3			ld hl, os_word_scratch+2 
1815 cd a8 11			call hexout 
1818 21 fc f3			ld hl, os_word_scratch+4 
181b			;	ld a,0 
181b 36 00			ld (hl),0 
181d 11 f8 f3			ld de,os_word_scratch 
1820 f1				pop af 
1821 cd 8e 0d				call str_at_display 
1824 c9				ret 
1825			 
1825			display_ptr_state: 
1825			 
1825				; to restore afterwards 
1825			 
1825 d5				push de 
1826 c5				push bc 
1827 e5				push hl 
1828 f5				push af 
1829			 
1829				; for use in here 
1829			 
1829			;	push bc 
1829			;	push de 
1829			;	push hl 
1829			;	push af 
1829			 
1829 cd 7c 0d			call clear_display 
182c			 
182c 11 04 1a			ld de, .ptrstate 
182f 3e 00			ld a, display_row_1 
1831 cd 8e 0d			call str_at_display 
1834			 
1834				; display debug step 
1834			 
1834			 
1834 11 9d fd			ld de, debug_mark 
1837 3e 26			ld a, display_row_1+display_cols-2 
1839 cd 8e 0d			call str_at_display 
183c			 
183c				; display a 
183c 11 0e 1a			ld de, .ptrcliptr 
183f 3e 28			ld a, display_row_2 
1841 cd 8e 0d			call str_at_display 
1844			 
1844 f1				pop af 
1845 2a 72 f9			ld hl,(cli_ptr) 
1848 3e 30			ld a, display_row_2+8 
184a cd 07 18			call display_word_at 
184d			 
184d			 
184d				; display hl 
184d			 
184d			 
184d 11 16 1a			ld de, .ptrclioptr 
1850 3e 32			ld a, display_row_2+10 
1852 cd 8e 0d			call str_at_display 
1855			; 
1855			;	pop hl 
1855 3e 35			ld a, display_row_2+13 
1857 2a 70 f9			ld hl,(cli_origptr) 
185a cd 07 18			call display_word_at 
185d			; 
185d			;	 
185d			;	; display de 
185d			 
185d			;	ld de, .regstatede 
185d			;	ld a, display_row_3 
185d			;	call str_at_display 
185d			 
185d			;	pop de 
185d			;	ld h,d 
185d			;	ld l, e 
185d			;	ld a, display_row_3+3 
185d			;	call display_word_at 
185d			 
185d			 
185d				; display bc 
185d			 
185d			;	ld de, .regstatebc 
185d			;	ld a, display_row_3+10 
185d			;	call str_at_display 
185d			 
185d			;	pop bc 
185d			;	ld h,b 
185d			;	ld l, c 
185d			;	ld a, display_row_3+13 
185d			;	call display_word_at 
185d			 
185d			 
185d				; display dsp 
185d			 
185d			;	ld de, .regstatedsp 
185d			;	ld a, display_row_4 
185d			;	call str_at_display 
185d			 
185d				 
185d			;	ld hl,(cli_data_sp) 
185d			;	ld a, display_row_4+4 
185d			;	call display_word_at 
185d			 
185d				; display rsp 
185d			 
185d 11 45 1a			ld de, .regstatersp 
1860 3e 82			ld a, display_row_4+10 
1862 cd 8e 0d			call str_at_display 
1865			 
1865				 
1865 2a 24 f9			ld hl,(cli_ret_sp) 
1868 3e 86			ld a, display_row_4+14 
186a cd 07 18			call display_word_at 
186d			 
186d cd 9e 0d			call update_display 
1870			 
1870 cd c0 0c			call delay1s 
1873 cd c0 0c			call delay1s 
1876 cd c0 0c			call delay1s 
1879			 
1879			 
1879 cd e8 1e			call next_page_prompt 
187c			 
187c				; restore  
187c			 
187c f1				pop af 
187d e1				pop hl 
187e c1				pop bc 
187f d1				pop de 
1880 c9				ret 
1881			 
1881			; Update the break point vector so that the user can hook a new routine 
1881			 
1881			bp_on: 
1881 3e c3			ld a, $c3    ; JP 
1883 32 aa fd			ld (debug_vector), a 
1886 21 93 18			ld hl, break_point_state 
1889 22 ab fd			ld (debug_vector+1), hl 
188c c9				ret 
188d			 
188d			bp_off: 
188d 3e c9			ld a, $c9    ; RET 
188f 32 aa fd			ld (debug_vector), a 
1892 c9				ret 
1893			 
1893			 
1893			break_point_state: 
1893			;	push af 
1893			; 
1893			;	; see if disabled 
1893			; 
1893			;	ld a, (os_view_disable) 
1893			;	cp '*' 
1893			;	jr nz, .bpsgo 
1893			;	pop af 
1893			;	ret 
1893			 
1893			.bpsgo: 
1893			;	pop af 
1893 f5				push af 
1894 22 d5 f0			ld (os_view_hl), hl 
1897 ed 53 d3 f0		ld (os_view_de), de 
189b ed 43 d1 f0		ld (os_view_bc), bc 
189f e5				push hl 
18a0 6f				ld l, a 
18a1 26 00			ld h, 0 
18a3 22 d7 f0			ld (os_view_af),hl 
18a6			 
18a6 21 e3 fc				ld hl, display_fb0 
18a9 22 fe fa				ld (display_fb_active), hl 
18ac e1				pop hl	 
18ad			 
18ad 3e 31			ld a, '1' 
18af fe 2a		.bps1:  cp '*' 
18b1 cc 8d 18			call z, bp_off 
18b4			;	jr nz, .bps1b 
18b4			;	ld (os_view_disable),a 
18b4 fe 31		.bps1b:  cp '1' 
18b6 20 14			jr nz, .bps2 
18b8			 
18b8				; display reg 
18b8			 
18b8				 
18b8			 
18b8 3a d7 f0			ld a, (os_view_af) 
18bb 2a d5 f0			ld hl, (os_view_hl) 
18be ed 5b d3 f0		ld de, (os_view_de) 
18c2 ed 4b d1 f0		ld bc, (os_view_bc) 
18c6 cd 60 19			call display_reg_state 
18c9 c3 4c 19			jp .bpschk 
18cc			 
18cc fe 32		.bps2:  cp '2' 
18ce 20 08			jr nz, .bps3 
18d0				 
18d0				; display hl 
18d0 2a d5 f0			ld hl, (os_view_hl) 
18d3 cd 4a 1a			call display_dump_at_hl 
18d6			 
18d6 18 74			jr .bpschk 
18d8			 
18d8 fe 33		.bps3:  cp '3' 
18da 20 08			jr nz, .bps4 
18dc			 
18dc			        ; display de 
18dc 2a d3 f0			ld hl, (os_view_de) 
18df cd 4a 1a			call display_dump_at_hl 
18e2			 
18e2 18 68			jr .bpschk 
18e4 fe 34		.bps4:  cp '4' 
18e6 20 08			jr nz, .bps5 
18e8			 
18e8			        ; display bc 
18e8 2a d1 f0			ld hl, (os_view_bc) 
18eb cd 4a 1a			call display_dump_at_hl 
18ee			 
18ee 18 5c			jr .bpschk 
18f0 fe 35		.bps5:  cp '5' 
18f2 20 08		        jr nz, .bps7 
18f4			 
18f4				; display cur ptr 
18f4 2a 72 f9			ld hl, (cli_ptr) 
18f7 cd 4a 1a			call display_dump_at_hl 
18fa			 
18fa 18 50			jr .bpschk 
18fc fe 36		.bps7:  cp '6' 
18fe 20 08			jr nz, .bps8b 
1900				 
1900				; display cur orig ptr 
1900 2a 70 f9			ld hl, (cli_origptr) 
1903 cd 4a 1a			call display_dump_at_hl 
1906 18 44			jr .bpschk 
1908 fe 37		.bps8b:  cp '7' 
190a 20 08			jr nz, .bps9 
190c				 
190c				; display dsp 
190c 2a 20 f9			ld hl, (cli_data_sp) 
190f cd 4a 1a			call display_dump_at_hl 
1912			 
1912 18 38			jr .bpschk 
1914 fe 39		.bps9:  cp '9' 
1916 20 05			jr nz, .bps8c 
1918				 
1918				; display SP 
1918			;	ld hl, sp 
1918 cd 4a 1a			call display_dump_at_hl 
191b			 
191b 18 2f			jr .bpschk 
191d fe 38		.bps8c:  cp '8' 
191f 20 08			jr nz, .bps8d 
1921				 
1921				; display rsp 
1921 2a 24 f9			ld hl, (cli_ret_sp) 
1924 cd 4a 1a			call display_dump_at_hl 
1927			 
1927 18 23			jr .bpschk 
1929 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
192b 20 05			jr nz, .bps8 
192d cd a6 1c			call monitor 
1930			 
1930 18 1a			jr .bpschk 
1932 fe 30		.bps8:  cp '0' 
1934 20 16			jr nz, .bpschk 
1936			 
1936 21 42 fc				ld hl, display_fb1 
1939 22 fe fa				ld (display_fb_active), hl 
193c cd 9e 0d				call update_display 
193f			 
193f				;ld a, (os_view_af) 
193f 2a d5 f0			ld hl, (os_view_hl) 
1942 ed 5b d3 f0		ld de, (os_view_de) 
1946 ed 4b d1 f0		ld bc, (os_view_bc) 
194a f1				pop af 
194b c9				ret 
194c			 
194c			.bpschk:   
194c cd c0 0c			call delay1s 
194f 3e 9f		ld a,display_row_4 + display_cols - 1 
1951 11 e6 1e		        ld de, endprg 
1954 cd 8e 0d			call str_at_display 
1957 cd 9e 0d			call update_display 
195a cd 67 79			call cin_wait 
195d			 
195d c3 af 18			jp .bps1 
1960			 
1960			 
1960			display_reg_state: 
1960			 
1960				; to restore afterwards 
1960			 
1960 d5				push de 
1961 c5				push bc 
1962 e5				push hl 
1963 f5				push af 
1964			 
1964				; for use in here 
1964			 
1964 c5				push bc 
1965 d5				push de 
1966 e5				push hl 
1967 f5				push af 
1968			 
1968 cd 7c 0d			call clear_display 
196b			 
196b 11 20 1a			ld de, .regstate 
196e 3e 00			ld a, display_row_1 
1970 cd 8e 0d			call str_at_display 
1973			 
1973				; display debug step 
1973			 
1973			 
1973 11 9d fd			ld de, debug_mark 
1976 3e 25			ld a, display_row_1+display_cols-3 
1978 cd 8e 0d			call str_at_display 
197b			 
197b				; display a 
197b 11 3c 1a			ld de, .regstatea 
197e 3e 28			ld a, display_row_2 
1980 cd 8e 0d			call str_at_display 
1983			 
1983 e1				pop hl 
1984			;	ld h,0 
1984			;	ld l, a 
1984 3e 2b			ld a, display_row_2+3 
1986 cd 07 18			call display_word_at 
1989			 
1989			 
1989				; display hl 
1989			 
1989			 
1989 11 30 1a			ld de, .regstatehl 
198c 3e 32			ld a, display_row_2+10 
198e cd 8e 0d			call str_at_display 
1991			 
1991 e1				pop hl 
1992 3e 35			ld a, display_row_2+13 
1994 cd 07 18			call display_word_at 
1997			 
1997				 
1997				; display de 
1997			 
1997 11 34 1a			ld de, .regstatede 
199a 3e 50			ld a, display_row_3 
199c cd 8e 0d			call str_at_display 
199f			 
199f e1				pop hl 
19a0			;	ld h,d 
19a0			;	ld l, e 
19a0 3e 53			ld a, display_row_3+3 
19a2 cd 07 18			call display_word_at 
19a5			 
19a5			 
19a5				; display bc 
19a5			 
19a5 11 38 1a			ld de, .regstatebc 
19a8 3e 5a			ld a, display_row_3+10 
19aa cd 8e 0d			call str_at_display 
19ad			 
19ad e1				pop hl 
19ae			;	ld h,b 
19ae			;	ld l, c 
19ae 3e 5d			ld a, display_row_3+13 
19b0 cd 07 18			call display_word_at 
19b3			 
19b3			 
19b3				; display dsp 
19b3			 
19b3 11 40 1a			ld de, .regstatedsp 
19b6 3e 78			ld a, display_row_4 
19b8 cd 8e 0d			call str_at_display 
19bb			 
19bb				 
19bb 2a 20 f9			ld hl,(cli_data_sp) 
19be 3e 7c			ld a, display_row_4+4 
19c0 cd 07 18			call display_word_at 
19c3			 
19c3				; display rsp 
19c3			 
19c3 11 45 1a			ld de, .regstatersp 
19c6 3e 82			ld a, display_row_4+10 
19c8 cd 8e 0d			call str_at_display 
19cb			 
19cb				 
19cb 2a 24 f9			ld hl,(cli_ret_sp) 
19ce 3e 86			ld a, display_row_4+14 
19d0 cd 07 18			call display_word_at 
19d3			 
19d3 cd 9e 0d			call update_display 
19d6			 
19d6			;	call delay1s 
19d6			;	call delay1s 
19d6			;	call delay1s 
19d6			 
19d6			 
19d6			;	call next_page_prompt 
19d6			 
19d6				; restore  
19d6			 
19d6 f1				pop af 
19d7 e1				pop hl 
19d8 c1				pop bc 
19d9 d1				pop de 
19da c9				ret 
19db			 
19db .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
19ef .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1a04 .. 00		.ptrstate:	db "Ptr State",0 
1a0e .. 00		.ptrcliptr:     db "cli_ptr",0 
1a16 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1a20 .. 00		.regstate:	db "Reg State (1/0)",0 
1a30 .. 00		.regstatehl:	db "HL:",0 
1a34 .. 00		.regstatede:	db "DE:",0 
1a38 .. 00		.regstatebc:	db "BC:",0 
1a3c .. 00		.regstatea:	db "A :",0 
1a40 .. 00		.regstatedsp:	db "DSP:",0 
1a45 .. 00		.regstatersp:	db "RSP:",0 
1a4a			 
1a4a			display_dump_at_hl: 
1a4a e5				push hl 
1a4b d5				push de 
1a4c c5				push bc 
1a4d f5				push af 
1a4e			 
1a4e 22 16 f4			ld (os_cur_ptr),hl	 
1a51 cd 7c 0d			call clear_display 
1a54 cd f4 1d			call dumpcont 
1a57			;	call delay1s 
1a57			;	call next_page_prompt 
1a57			 
1a57			 
1a57 f1				pop af 
1a58 c1				pop bc 
1a59 d1				pop de 
1a5a e1				pop hl 
1a5b c9				ret 
1a5c			 
1a5c			;if ENABLE_BASIC 
1a5c			;	include "nascombasic.asm" 
1a5c			;	basic: 
1a5c			;	include "forth/FORTH.ASM" 
1a5c			;endif 
1a5c			 
1a5c			; eof 
1a5c			 
1a5c			 
# End of file firmware_diags.asm
1a5c			  
1a5c			include "firmware_prompts.asm"  
1a5c			; Prompts  
1a5c			 
1a5c			; boot messages 
1a5c			 
1a5c .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1a71 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1a81			 
1a81			 
1a81			; config menus 
1a81			 
1a81			;prom_c3: db "Add Dictionary To File",0 
1a81			 
1a81			if STARTUP_V1 
1a81			prom_c2: db "Select Autoload File",0 
1a81			prom_c2a: db "Disable Autoload File", 0 
1a81			endif 
1a81			 
1a81			if STARTUP_V2 
1a81 .. 00		prom_c2: db "Enable Autoload Files",0 
1a97 .. 00		prom_c2a: db "Disable Autoload Files", 0 
1aae			 
1aae .. 00		crs_s1: db "*ls-word", 0 
1ab7 .. 00		crs_s2: db "*ed-word", 0 
1ac0 .. 00		crs_s3: db "*Demo-Games", 0 
1acc .. 00		crs_s4: db "*Utils", 0 
1ad3 .. 00		crs_s5: db "*SPI-Util", 0 
1add .. 00		crs_s6: db "*Key-Constants", 0 
1aec .. 00		crs_sound: db "*Sound-Util", 0 
1af8 .. 00		crs_hw: db "*Hello-World",0 
1b05			 
1b05			 
1b05			 
1b05			endif 
1b05			;prom_c2b: db "Select Storage Bank",0 
1b05 .. 00		prom_c4: db "Settings",0 
1b0e .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1b29 .. 00		prom_m4b:   db "Monitor",0 
1b31			;prom_c1: db "Hardware Diags",0 
1b31			 
1b31			 
1b31			if STARTUP_V2 
1b31 .. 00		prom_c9: db "Create Startup Files",0 
1b46			endif 
1b46			 
1b46 .. 00		prom_notav:    db "Feature not available",0 
1b5c .. 00		prom_empty:    db "",0 
1b5d			 
1b5d			; eof 
1b5d			 
# End of file firmware_prompts.asm
1b5d			  
1b5d			; eof  
1b5d			  
# End of file firmware.asm
1b5d			 
1b5d			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1b5d			;if BASE_KEV  
1b5d			;baseram: equ 08000h 
1b5d			;endif 
1b5d			 
1b5d			;if BASE_SC114 
1b5d			;baseram:     equ    endofcode 
1b5d			;endif 
1b5d			 
1b5d			 
1b5d			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1b5d			 
1b5d			; start system 
1b5d			 
1b5d			coldstart: 
1b5d				; set sp 
1b5d				; di/ei 
1b5d			 
1b5d f3				di 
1b5e 31 fd ff			ld sp, tos 
1b61 cd ee 75			call init_nmi 
1b64			;	ei 
1b64			 
1b64				; init spinner 
1b64 3e 00			ld a,0 
1b66 32 f8 fa			ld (display_active), a 
1b69			 
1b69				; disable breakpoint by default 
1b69			 
1b69				;ld a,'*' 
1b69			;	ld a,' ' 
1b69			;	ld (os_view_disable),a 
1b69			 
1b69				; set break point vector as new break point on or off 
1b69 cd 8d 18			call bp_off 
1b6c			 
1b6c			 
1b6c				; default the parse vector to just a RET 
1b6c 3e c9			ld a, $c9 
1b6e 32 a7 fd			ld (parse_vector), a 
1b71			 
1b71				; init hardware 
1b71			 
1b71				; init keyboard and screen hardware 
1b71			 
1b71 cd 6c 00			call hardware_init 
1b74			 
1b74			 
1b74 cd c0 0c			call delay1s 
1b77 3e 58			ld a, display_row_3+8 
1b79 11 03 00			ld de, buildtime 
1b7c cd 8e 0d			call str_at_display 
1b7f cd 9e 0d			call update_display 
1b82			 
1b82 cd c0 0c			call delay1s 
1b85 cd c0 0c			call delay1s 
1b88 cd c0 0c			call delay1s 
1b8b			 
1b8b				; detect if any keys are held down to enable breakpoints at start up 
1b8b			 
1b8b cd 76 79			call cin  
1b8e fe 00			cp 0 
1b90 28 03			jr z, .nokeys 
1b92			 
1b92				;call hardware_diags 
1b92 cd 11 15			call config 
1b95			 
1b95			;	ld de, .bpen 
1b95			;	ld a, display_row_4 
1b95			;	call str_at_display 
1b95			;	call update_display 
1b95			; 
1b95			;	ld a,0 
1b95			;	ld (os_view_disable),a 
1b95			; 
1b95			;.bpwait: 
1b95			;	call cin 
1b95			;	cp 0 
1b95			;	jr z, .bpwait 
1b95			;	jr .nokeys 
1b95			; 
1b95			; 
1b95			;.bpen:  db "Break points enabled!",0 
1b95			 
1b95			 
1b95			 
1b95			 
1b95			 
1b95			 
1b95			.nokeys: 
1b95			 
1b95			 
1b95				 
1b95			 
1b95			;jp  testkey 
1b95			 
1b95			;call storage_get_block_0 
1b95			; 
1b95			;ld hl, 0 
1b95			;ld de, store_page 
1b95			;call storage_read_block 
1b95			 
1b95				 
1b95			;ld hl, 10 
1b95			;ld de, store_page 
1b95			;call storage_read_block 
1b95			 
1b95			 
1b95			 
1b95			 
1b95			 
1b95			;stop:	nop 
1b95			;	jp stop 
1b95			 
1b95			 
1b95			 
1b95			main: 
1b95 cd 7c 0d			call clear_display 
1b98 cd 9e 0d			call update_display 
1b9b			 
1b9b			 
1b9b			 
1b9b			;	call testlcd 
1b9b			 
1b9b			 
1b9b			 
1b9b cd 23 23			call forth_init 
1b9e			 
1b9e			 
1b9e			warmstart: 
1b9e cd f9 22			call forth_warmstart 
1ba1			 
1ba1				; run startup word load 
1ba1			        ; TODO prevent this running at warmstart after crash  
1ba1			 
1ba1				if STARTUP_ENABLE 
1ba1			 
1ba1					if STARTUP_V1 
1ba1			 
1ba1						if STORAGE_SE 
1ba1							call forth_autoload 
1ba1						endif 
1ba1						call forth_startup 
1ba1					endif 
1ba1			 
1ba1					if STARTUP_V2 
1ba1			 
1ba1						if STORAGE_SE 
1ba1 cd 1e 74						call forth_autoload 
1ba4						else 
1ba4							call forth_startup 
1ba4						endif 
1ba4			 
1ba4			 
1ba4					endif 
1ba4			 
1ba4				endif 
1ba4			 
1ba4			warmstart_afterauto: 
1ba4			 
1ba4				; show free memory after boot 
1ba4 11 41 1c			ld de, freeram 
1ba7 3e 00			ld a, display_row_1 
1ba9 cd 8e 0d			call str_at_display 
1bac			 
1bac				; get current heap start after loading any uwords 
1bac			 
1bac				;ld de, (os_last_new_uword) 
1bac				;ex de, hl 
1bac			 
1bac			; Or use heap_size word???? 
1bac				;ld hl, heap_end 
1bac				;ld hl, heap_size 
1bac				;ld de, topusermem 
1bac				;ld de, heap_start 
1bac ed 5b 0a 80			ld de, (free_list )      
1bb0 21 ce f0				ld hl, heap_end 
1bb3 ed 52			sbc hl, de 
1bb5				;push hl 
1bb5				;ld a,h	         	 
1bb5				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1bb5				;call hexout 
1bb5			   	;pop hl 
1bb5			; 
1bb5			;	ld a,l 
1bb5			;	ld hl, os_word_scratch+2 
1bb5			;	call hexout 
1bb5			;	ld hl, os_word_scratch+4 
1bb5			;	ld a, 0 
1bb5			;	ld (hl),a 
1bb5 eb				ex de, hl 
1bb6 21 f8 f3			ld hl, os_word_scratch 
1bb9 cd b3 12			call uitoa_16 
1bbc			 
1bbc			 
1bbc 11 f8 f3			ld de, os_word_scratch 
1bbf 3e 0d			ld a, display_row_1 + 13 
1bc1 cd 8e 0d			call str_at_display 
1bc4 cd 9e 0d			call update_display 
1bc7			 
1bc7			 
1bc7				;call demo 
1bc7			 
1bc7			 
1bc7				; init scratch input area for cli commands 
1bc7			 
1bc7 21 1a f4			ld hl, os_cli_cmd 
1bca			;	ld a,0 
1bca 36 00			ld (hl),0 
1bcc 23				inc hl 
1bcd 36 00			ld (hl),0 
1bcf			 
1bcf 3e 00			ld a,0 
1bd1 32 19 f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1bd4			 
1bd4 32 16 f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1bd7 32 17 f4			ld (os_cur_ptr+1),a	 
1bda			 
1bda 32 f8 f3			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1bdd 32 f9 f3			ld (os_word_scratch+1),a	 
1be0				 
1be0			 
1be0				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1be0 21 1a f4			ld hl, os_cli_cmd 
1be3			 
1be3			;	ld a, 0		 ; init cli input 
1be3 36 00			ld (hl), 0 
1be5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1be7			cli: 
1be7				; show cli prompt 
1be7				;push af 
1be7				;ld a, 0 
1be7				;ld de, prompt 
1be7				;call str_at_display 
1be7			 
1be7				;call update_display 
1be7				;pop af 
1be7				;inc a 
1be7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1be7			 
1be7			.lastrecall: 
1be7			 
1be7 0e 00			ld c, 0 
1be9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1beb 1e 28			ld e, 40 
1bed			 
1bed 21 1a f4			ld hl, os_cli_cmd 
1bf0			 
1bf0				STACKFRAME OFF $fefe $9f9f 
1bf0				if DEBUG_STACK_IMB 
1bf0					if OFF 
1bf0						exx 
1bf0						ld de, $fefe 
1bf0						ld a, d 
1bf0						ld hl, curframe 
1bf0						call hexout 
1bf0						ld a, e 
1bf0						ld hl, curframe+2 
1bf0						call hexout 
1bf0						ld hl, $fefe 
1bf0						push hl 
1bf0						ld hl, $9f9f 
1bf0						push hl 
1bf0						exx 
1bf0					endif 
1bf0				endif 
1bf0			endm 
# End of macro STACKFRAME
1bf0			 
1bf0 cd d9 0f			call input_str 
1bf3			 
1bf3				STACKFRAMECHK OFF $fefe $9f9f 
1bf3				if DEBUG_STACK_IMB 
1bf3					if OFF 
1bf3						exx 
1bf3						ld hl, $9f9f 
1bf3						pop de   ; $9f9f 
1bf3						call cmp16 
1bf3						jr nz, .spnosame 
1bf3						ld hl, $fefe 
1bf3						pop de   ; $fefe 
1bf3						call cmp16 
1bf3						jr z, .spfrsame 
1bf3						.spnosame: call showsperror 
1bf3						.spfrsame: nop 
1bf3						exx 
1bf3					endif 
1bf3				endif 
1bf3			endm 
# End of macro STACKFRAMECHK
1bf3			 
1bf3			 
1bf3				; check to see if last line recall has been requested 
1bf3			 
1bf3			if EDIT_V2 
1bf3 fe 05			cp KEY_UP 
1bf5 20 0f			jr nz, .noexecline 
1bf7			 
1bf7 11 1a f4			ld de, os_cli_cmd 
1bfa 21 19 f5			ld hl, os_last_cmd 
1bfd 01 ff 00			ld bc, 255 
1c00 ed b0			ldir 
1c02 3e 00			ld a, 0 
1c04 18 e1			jr .lastrecall 
1c06			endif 
1c06			 
1c06			.noexecline: 
1c06				; no so exec the line		 
1c06			 
1c06				; copy input to last command 
1c06			 
1c06 21 1a f4			ld hl, os_cli_cmd 
1c09 11 19 f5			ld de, os_last_cmd 
1c0c 01 ff 00			ld bc, 255 
1c0f ed b0			ldir 
1c11			 
1c11				; wipe current buffer 
1c11			 
1c11			;	ld a, 0 
1c11			;	ld hl, os_cli_cmd 
1c11			;	ld de, os_cli_cmd+1 
1c11			;	ld bc, 254 
1c11			;	ldir 
1c11				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1c11			;	call strcpy 
1c11			;	ld a, 0 
1c11			;	ld (hl), a 
1c11			;	inc hl 
1c11			;	ld (hl), a 
1c11			;	inc hl 
1c11			;	ld (hl), a 
1c11			 
1c11				; switch frame buffer to program  
1c11			 
1c11 21 42 fc				ld hl, display_fb1 
1c14 22 fe fa				ld (display_fb_active), hl 
1c17			 
1c17			;	nop 
1c17				STACKFRAME ON $fbfe $8f9f 
1c17				if DEBUG_STACK_IMB 
1c17					if ON 
1c17						exx 
1c17						ld de, $fbfe 
1c17						ld a, d 
1c17						ld hl, curframe 
1c17						call hexout 
1c17						ld a, e 
1c17						ld hl, curframe+2 
1c17						call hexout 
1c17						ld hl, $fbfe 
1c17						push hl 
1c17						ld hl, $8f9f 
1c17						push hl 
1c17						exx 
1c17					endif 
1c17				endif 
1c17			endm 
# End of macro STACKFRAME
1c17				; first time into the parser so pass over the current scratch pad 
1c17 21 1a f4			ld hl,os_cli_cmd 
1c1a				; tokenise the entered statement(s) in HL 
1c1a cd 99 23			call forthparse 
1c1d			        ; exec forth statements in top of return stack 
1c1d cd d1 23			call forthexec 
1c20				;call forthexec_cleanup 
1c20			;	call parsenext 
1c20			 
1c20				STACKFRAMECHK ON $fbfe $8f9f 
1c20				if DEBUG_STACK_IMB 
1c20					if ON 
1c20						exx 
1c20						ld hl, $8f9f 
1c20						pop de   ; $8f9f 
1c20						call cmp16 
1c20						jr nz, .spnosame 
1c20						ld hl, $fbfe 
1c20						pop de   ; $fbfe 
1c20						call cmp16 
1c20						jr z, .spfrsame 
1c20						.spnosame: call showsperror 
1c20						.spfrsame: nop 
1c20						exx 
1c20					endif 
1c20				endif 
1c20			endm 
# End of macro STACKFRAMECHK
1c20				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1c20			 
1c20 3e 78			ld a, display_row_4 
1c22 11 52 1c			ld de, endprog 
1c25			 
1c25 cd 9e 0d			call update_display		 
1c28			 
1c28 cd e8 1e			call next_page_prompt 
1c2b			 
1c2b				; switch frame buffer to cli 
1c2b			 
1c2b 21 e3 fc				ld hl, display_fb0 
1c2e 22 fe fa				ld (display_fb_active), hl 
1c31			 
1c31			 
1c31 cd 7c 0d		        call clear_display 
1c34 cd 9e 0d			call update_display		 
1c37			 
1c37 21 1a f4			ld hl, os_cli_cmd 
1c3a			 
1c3a			;	ld a, 0		 ; init cli input 
1c3a 36 00			ld (hl), 0 
1c3c			 
1c3c				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1c3c			 
1c3c				; now on last line 
1c3c			 
1c3c				; TODO scroll screen up 
1c3c			 
1c3c				; TODO instead just clear screen and place at top of screen 
1c3c			 
1c3c			;	ld a, 0 
1c3c			;	ld (f_cursor_ptr),a 
1c3c			 
1c3c				;call clear_display 
1c3c				;call update_display 
1c3c			 
1c3c				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1c3c 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1c3e c3 e7 1b			jp cli 
1c41			 
1c41 .. 00		freeram: db "Free bytes: ",0 
1c4e ..			asc: db "1A2F" 
1c52 .. 00		endprog: db "End prog...",0 
1c5e			 
1c5e			testenter2:   
1c5e 21 25 f1			ld hl,scratch+50 
1c61 22 16 f4			ld (os_cur_ptr),hl 
1c64 c3 e7 1b			jp cli 
1c67			 
1c67			testenter:  
1c67			 
1c67 21 4e 1c			ld hl,asc 
1c6a			;	ld a,(hl) 
1c6a			;	call nibble2val 
1c6a cd fe 11			call get_byte 
1c6d			 
1c6d			 
1c6d			;	ld a,(hl) 
1c6d			;	call atohex 
1c6d			 
1c6d			;	call fourehexhl 
1c6d 32 25 f1			ld (scratch+50),a 
1c70			 
1c70			 
1c70			 
1c70 21 50 1c			ld hl,asc+2 
1c73			;	ld a, (hl) 
1c73			;	call nibble2val 
1c73 cd fe 11			call get_byte 
1c76			 
1c76			;	call fourehexhl 
1c76 32 27 f1			ld (scratch+52),a 
1c79				 
1c79 21 25 f1			ld hl,scratch+50 
1c7c 22 16 f4			ld (os_cur_ptr),hl 
1c7f c3 e7 1b			jp cli 
1c82			 
1c82			enter:	 
1c82 3a f7 f0			ld a,(scratch+4) 
1c85 fe 00			cp 0 
1c87 28 0c			jr z, .entercont 
1c89				; no, not a null term line so has an address to work out.... 
1c89			 
1c89 21 f5 f0			ld hl,scratch+2 
1c8c cd 5e 12			call get_word_hl 
1c8f			 
1c8f 22 16 f4			ld (os_cur_ptr),hl	 
1c92 c3 e7 1b			jp cli 
1c95			 
1c95			 
1c95			.entercont:  
1c95			 
1c95 21 f5 f0			ld hl, scratch+2 
1c98 cd fe 11			call get_byte 
1c9b			 
1c9b 2a 16 f4		   	ld hl,(os_cur_ptr) 
1c9e 77					ld (hl),a 
1c9f 23					inc hl 
1ca0 22 16 f4				ld (os_cur_ptr),hl 
1ca3				 
1ca3			; get byte  
1ca3			 
1ca3			 
1ca3 c3 e7 1b			jp cli 
1ca6			 
1ca6			 
1ca6			; basic monitor support 
1ca6			 
1ca6			monitor: 
1ca6				;  
1ca6 cd 7c 0d			call clear_display 
1ca9 3e 00			ld a, 0 
1cab 11 ff 1c			ld de, .monprompt 
1cae cd 8e 0d			call str_at_display 
1cb1 cd 9e 0d			call update_display 
1cb4			 
1cb4				; get a monitor command 
1cb4			 
1cb4 0e 00			ld c, 0     ; entry at top left 
1cb6 16 64			ld d, 100   ; max buffer size 
1cb8 1e 0f			ld e, 15    ; input scroll area 
1cba			;	ld a, 0     ; init string 
1cba 21 f1 f2			ld hl, os_input 
1cbd 36 00			ld (hl), 0 
1cbf 23				inc hl 
1cc0 36 00			ld (hl), 0 
1cc2 21 f1 f2			ld hl, os_input 
1cc5 3e 01			ld a, 1     ; init string 
1cc7 cd d9 0f			call input_str 
1cca			 
1cca cd 7c 0d		        call clear_display 
1ccd cd 9e 0d			call update_display		 
1cd0			 
1cd0 3a f1 f2			ld a, (os_input) 
1cd3 cd fb 12			call toUpper 
1cd6 fe 48		        cp 'H' 
1cd8 ca 73 1d		        jp z, .monhelp 
1cdb fe 44			cp 'D'		; dump 
1cdd ca a6 1d			jp z, .mondump	 
1ce0 fe 43			cp 'C'		; dump 
1ce2 ca c0 1d			jp z, .moncdump	 
1ce5 fe 4d			cp 'M'		; dump 
1ce7 ca 01 1d			jp z, .moneditstart 
1cea fe 55			cp 'U'		; dump 
1cec ca 0d 1d			jp z, .monedit	 
1cef fe 47			cp 'G'		; dump 
1cf1 ca 9c 1d			jp z, .monjump 
1cf4 fe 42			cp 'B'		; forth breakpoint 
1cf6 cc 93 18			call z, break_point_state 
1cf9 fe 51			cp 'Q'		; dump 
1cfb c8				ret z	 
1cfc			 
1cfc			 
1cfc				; TODO "S" to access symbol by name and not need the address 
1cfc				; TODO "F" to find a string in memory 
1cfc			 
1cfc c3 a6 1c			jp monitor 
1cff			 
1cff .. 00		.monprompt: db ">", 0 
1d01			 
1d01			.moneditstart: 
1d01				; get starting address 
1d01			 
1d01 21 f3 f2			ld hl,os_input+2 
1d04 cd 5e 12			call get_word_hl 
1d07			 
1d07 22 16 f4			ld (os_cur_ptr),hl	 
1d0a			 
1d0a c3 a6 1c			jp monitor 
1d0d			 
1d0d			.monedit: 
1d0d				; get byte to load 
1d0d			 
1d0d 21 f3 f2			ld hl,os_input+2 
1d10 cd fe 11			call get_byte 
1d13			 
1d13				; get address to update 
1d13 2a 16 f4			ld hl, (os_cur_ptr) 
1d16			 
1d16				; update byte 
1d16			 
1d16 77				ld (hl), a 
1d17			 
1d17				; move to next address and save it 
1d17			 
1d17 23				inc hl 
1d18 22 16 f4			ld (os_cur_ptr),hl	 
1d1b			 
1d1b c3 a6 1c			jp monitor 
1d1e			 
1d1e			 
1d1e .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1d32 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1d4e .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1d6c .. 00		.monhelptext4:  db "Q-Quit",0 
1d73			        
1d73			.monhelp: 
1d73 3e 00			ld a, display_row_1 
1d75 11 1e 1d		        ld de, .monhelptext1 
1d78			 
1d78 cd 8e 0d			call str_at_display 
1d7b 3e 28			ld a, display_row_2 
1d7d 11 32 1d		        ld de, .monhelptext2 
1d80					 
1d80 cd 8e 0d			call str_at_display 
1d83 3e 50			ld a, display_row_3 
1d85 11 4e 1d		        ld de, .monhelptext3 
1d88					 
1d88 cd 8e 0d			call str_at_display 
1d8b 3e 78			ld a, display_row_4 
1d8d 11 6c 1d		        ld de, .monhelptext4 
1d90 cd 8e 0d			call str_at_display 
1d93			 
1d93 cd 9e 0d			call update_display		 
1d96			 
1d96 cd e8 1e			call next_page_prompt 
1d99 c3 a6 1c			jp monitor 
1d9c			 
1d9c			.monjump:    
1d9c 21 f3 f2			ld hl,os_input+2 
1d9f cd 5e 12			call get_word_hl 
1da2			 
1da2 e9				jp (hl) 
1da3 c3 a6 1c			jp monitor 
1da6			 
1da6			.mondump:    
1da6 21 f3 f2			ld hl,os_input+2 
1da9 cd 5e 12			call get_word_hl 
1dac			 
1dac 22 16 f4			ld (os_cur_ptr),hl	 
1daf cd f4 1d			call dumpcont 
1db2 3e 78			ld a, display_row_4 
1db4 11 52 1c			ld de, endprog 
1db7			 
1db7 cd 9e 0d			call update_display		 
1dba			 
1dba cd e8 1e			call next_page_prompt 
1dbd c3 a6 1c			jp monitor 
1dc0			.moncdump: 
1dc0 cd f4 1d			call dumpcont 
1dc3 3e 78			ld a, display_row_4 
1dc5 11 52 1c			ld de, endprog 
1dc8			 
1dc8 cd 9e 0d			call update_display		 
1dcb			 
1dcb cd e8 1e			call next_page_prompt 
1dce c3 a6 1c			jp monitor 
1dd1			 
1dd1			 
1dd1			; TODO symbol access  
1dd1			 
1dd1			.symbols:     ;; A list of symbols that can be called up  
1dd1 e3 fc			dw display_fb0 
1dd3 .. 00			db "fb0",0  
1dd7 ac f9		     	dw store_page 
1dd9 .. 00			db "store_page",0 
1de4			 
1de4			 
1de4			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1de4			 
1de4 3a f4 f0			ld a,(scratch+1) 
1de7 fe 00			cp 0 
1de9 28 09			jr z, dumpcont 
1deb			 
1deb				; no, not a null term line so has an address to work out.... 
1deb			 
1deb 21 f5 f0			ld hl,scratch+2 
1dee cd 5e 12			call get_word_hl 
1df1			 
1df1 22 16 f4			ld (os_cur_ptr),hl	 
1df4			 
1df4			 
1df4			 
1df4			dumpcont: 
1df4			 
1df4				; dump bytes at ptr 
1df4			 
1df4			 
1df4 3e 00			ld a, display_row_1 
1df6 2a fe fa			ld hl, (display_fb_active) 
1df9 cd ac 0f			call addatohl 
1dfc cd 24 1e			call .dumpbyterow 
1dff			 
1dff 3e 28			ld a, display_row_2 
1e01 2a fe fa			ld hl, (display_fb_active) 
1e04 cd ac 0f			call addatohl 
1e07 cd 24 1e			call .dumpbyterow 
1e0a			 
1e0a			 
1e0a 3e 50			ld a, display_row_3 
1e0c 2a fe fa			ld hl, (display_fb_active) 
1e0f cd ac 0f			call addatohl 
1e12 cd 24 1e			call .dumpbyterow 
1e15			 
1e15 3e 78			ld a, display_row_4 
1e17 2a fe fa			ld hl, (display_fb_active) 
1e1a cd ac 0f			call addatohl 
1e1d cd 24 1e			call .dumpbyterow 
1e20			 
1e20 cd 9e 0d			call update_display 
1e23			;		jp cli 
1e23 c9				ret 
1e24			 
1e24			.dumpbyterow: 
1e24			 
1e24				;push af 
1e24			 
1e24 e5				push hl 
1e25			 
1e25				; calc where to poke the ascii 
1e25			if display_cols == 20 
1e25				ld a, 16 
1e25			else 
1e25 3e 1f			ld a, 31 
1e27			endif 
1e27			 
1e27 cd ac 0f			call addatohl 
1e2a 22 f8 f3			ld (os_word_scratch),hl  		; save pos for later 
1e2d			 
1e2d			 
1e2d			; display decoding address 
1e2d 2a 16 f4		   	ld hl,(os_cur_ptr) 
1e30			 
1e30 7c				ld a,h 
1e31 e1				pop hl 
1e32 e5				push hl 
1e33			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1e33 cd a8 11			call hexout 
1e36 2a 16 f4		   	ld hl,(os_cur_ptr) 
1e39			 
1e39 7d				ld a,l 
1e3a e1				pop hl 
1e3b 23				inc hl 
1e3c 23				inc hl 
1e3d e5				push hl 
1e3e			;	ld hl, os_word_scratch+2 
1e3e cd a8 11			call hexout 
1e41 e1				pop hl 
1e42 23				inc hl 
1e43 23				inc hl 
1e44				;ld hl, os_word_scratch+4 
1e44			;	ld a, ':' 
1e44 36 3a			ld (hl),':' 
1e46 23				inc hl 
1e47				;ld a, 0 
1e47				;ld (hl),a 
1e47				;ld de, os_word_scratch 
1e47				;pop af 
1e47				;push af 
1e47			;		ld a, display_row_2 
1e47			;		call str_at_display 
1e47			;		call update_display 
1e47			 
1e47			 
1e47			;pop af 
1e47			;	add 5 
1e47			 
1e47			if display_cols == 20 
1e47				ld b, 4 
1e47			else 
1e47 06 08			ld b, 8 
1e49			endif	 
1e49			 
1e49			.dumpbyte: 
1e49 c5				push bc 
1e4a e5				push hl 
1e4b			 
1e4b			 
1e4b 2a 16 f4		   	ld hl,(os_cur_ptr) 
1e4e 7e					ld a,(hl) 
1e4f			 
1e4f					; poke the ascii to display 
1e4f 2a f8 f3				ld hl,(os_word_scratch) 
1e52 77					ld (hl),a 
1e53 23					inc hl 
1e54 22 f8 f3				ld (os_word_scratch),hl 
1e57			 
1e57					 
1e57			 
1e57			 
1e57 e1					pop hl 
1e58 e5					push hl 
1e59			 
1e59 cd a8 11				call hexout 
1e5c			 
1e5c					 
1e5c 2a 16 f4		   	ld hl,(os_cur_ptr) 
1e5f 23				inc hl 
1e60 22 16 f4		   	ld (os_cur_ptr),hl 
1e63			 
1e63 e1					pop hl 
1e64 23					inc hl 
1e65 23					inc hl 
1e66 23					inc hl 
1e67			 
1e67			 
1e67			 
1e67					;ld a,0 
1e67					;ld (os_word_scratch+2),a 
1e67					;pop af 
1e67					;push af 
1e67			 
1e67					;ld de, os_word_scratch 
1e67					;call str_at_display 
1e67			;		call update_display 
1e67			;		pop af 
1e67 c1					pop bc 
1e68 c6 03				add 3 
1e6a 10 dd			djnz .dumpbyte 
1e6c			 
1e6c				 
1e6c			 
1e6c c9				ret 
1e6d			 
1e6d			jump:	 
1e6d			 
1e6d 21 f5 f0			ld hl,scratch+2 
1e70 cd 5e 12			call get_word_hl 
1e73				;ld hl,(scratch+2) 
1e73				;call fourehexhl 
1e73			 
1e73 22 16 f4			ld (os_cur_ptr),hl	 
1e76			 
1e76 e9				jp (hl) 
1e77			 
1e77			 
1e77			 
1e77			; TODO implement a basic monitor mode to start with 
1e77			 
1e77			 
1e77			 
1e77			 
1e77			 
1e77			 
1e77			 
1e77			 
1e77			 
1e77			; testing and demo code during development 
1e77			 
1e77			 
1e77 .. 00		str1: db "Enter some text...",0 
1e8a .. 00		clear: db "                    ",0 
1e9f			 
1e9f			demo: 
1e9f			 
1e9f			 
1e9f			 
1e9f			;	call update_display 
1e9f			 
1e9f				; init scratch input area for testing 
1e9f 21 f3 f0			ld hl, scratch	 
1ea2			;	ld a,0 
1ea2 36 00			ld (hl),0 
1ea4			 
1ea4			 
1ea4 3e 28		            LD   A, display_row_2 
1ea6			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ea6 11 77 1e		            LD   DE, str1 
1ea9 cd 8e 0d			call str_at_display 
1eac			 
1eac			;            CALL fLCD_Str       ;Display string pointed to by DE 
1eac			cloop:	 
1eac 3e 50		            LD   A, display_row_3 
1eae			;            CALL fLCD_Pos       ;Position cursor to location in A 
1eae 11 8a 1e		            LD   DE, clear 
1eb1			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1eb1 cd 8e 0d				call str_at_display 
1eb4 3e 78			ld a, display_row_4 
1eb6 11 e4 1e			ld de, prompt 
1eb9			 
1eb9 cd 8e 0d				call str_at_display 
1ebc cd 9e 0d			call update_display 
1ebf			 
1ebf 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1ec1 16 0a			ld d, 10 
1ec3 21 f3 f0			ld hl, scratch	 
1ec6 cd d9 0f			call input_str 
1ec9			 
1ec9			;	call clear_display 
1ec9			;'	call update_display 
1ec9			 
1ec9 3e 00		            LD   A, display_row_1 
1ecb			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ecb 11 8a 1e		            LD   DE, clear 
1ece cd 8e 0d				call str_at_display 
1ed1			;            CALL fLCD_Str       ;Display string pointed to by DE 
1ed1 3e 00		            LD   A, display_row_1 
1ed3			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ed3 11 f3 f0		            LD   DE, scratch 
1ed6			;            CALL fLCD_Str       ;Display string pointed to by DE 
1ed6 cd 8e 0d				call str_at_display 
1ed9 cd 9e 0d			call update_display 
1edc			 
1edc			;		ld a,0 
1edc 21 f3 f0			ld hl, scratch 
1edf 36 00			ld (hl),0 
1ee1			 
1ee1			;	nop 
1ee1 c3 ac 1e			jp cloop 
1ee4			 
1ee4			 
1ee4			 
1ee4			; OS Prompt 
1ee4			 
1ee4 .. 00		prompt: db ">",0 
1ee6 .. 00		endprg: db "?",0 
1ee8			 
1ee8			 
1ee8			; handy next page prompt 
1ee8			next_page_prompt: 
1ee8 e5				push hl 
1ee9 d5				push de 
1eea f5				push af 
1eeb c5				push bc 
1eec			 
1eec 3e 9f			ld a,display_row_4 + display_cols - 1 
1eee 11 e6 1e		        ld de, endprg 
1ef1 cd 8e 0d			call str_at_display 
1ef4 cd 9e 0d			call update_display 
1ef7 cd 67 79			call cin_wait 
1efa c1				pop bc 
1efb f1				pop af 
1efc d1				pop de 
1efd e1				pop hl 
1efe			 
1efe			 
1efe c9				ret 
1eff			 
1eff			 
1eff			; forth parser 
1eff			 
1eff			; My forth kernel 
1eff			include "forth_kernel.asm" 
1eff			; 
1eff			; kernel to the forth OS 
1eff			 
1eff			DS_TYPE_STR: equ 1     ; string type 
1eff			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1eff			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1eff			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1eff			 
1eff			FORTH_PARSEV1: equ 0 
1eff			FORTH_PARSEV2: equ 0 
1eff			FORTH_PARSEV3: equ 0 
1eff			FORTH_PARSEV4: equ 0 
1eff			FORTH_PARSEV5: equ 0 
1eff			FORTH_PARSEV6: equ 1 
1eff			 
1eff			;if FORTH_PARSEV5 
1eff			;	FORTH_END_BUFFER: equ 0 
1eff			;else 
1eff			FORTH_END_BUFFER: equ 127 
1eff			;endif 
1eff			 
1eff			FORTH_TRUE: equ 1 
1eff			FORTH_FALSE: equ 0 
1eff			 
1eff			if FORTH_PARSEV4 
1eff			include "forth_stackops.asm" 
1eff			endif 
1eff			 
1eff			if FORTH_PARSEV5 
1eff			include "forth_stackopsv5.asm" 
1eff			endif 
1eff			 
1eff			if FORTH_PARSEV6 
1eff			include "forth_stackopsv5.asm" 
1eff			 
1eff			; Stack operations for v5 parser on wards 
1eff			; * DATA stack 
1eff			; * LOOP stack 
1eff			; * RETURN stack 
1eff			 
1eff			 
1eff			 
1eff			FORTH_CHK_DSP_UNDER: macro 
1eff				push hl 
1eff				push de 
1eff				ld hl,(cli_data_sp) 
1eff				ld de, cli_data_stack 
1eff				call cmp16 
1eff				jp c, fault_dsp_under 
1eff				pop de 
1eff				pop hl 
1eff				endm 
1eff			 
1eff			 
1eff			FORTH_CHK_RSP_UNDER: macro 
1eff				push hl 
1eff				push de 
1eff				ld hl,(cli_ret_sp) 
1eff				ld de, cli_ret_stack 
1eff				call cmp16 
1eff				jp c, fault_rsp_under 
1eff				pop de 
1eff				pop hl 
1eff				endm 
1eff			 
1eff			FORTH_CHK_LOOP_UNDER: macro 
1eff				push hl 
1eff				push de 
1eff				ld hl,(cli_loop_sp) 
1eff				ld de, cli_loop_stack 
1eff				call cmp16 
1eff				jp c, fault_loop_under 
1eff				pop de 
1eff				pop hl 
1eff				endm 
1eff			 
1eff			FORTH_ERR_TOS_NOTSTR: macro 
1eff				; TOSO might need more for checks when used 
1eff				push af 
1eff				ld a,(hl) 
1eff				cp DS_TYPE_STR 
1eff				jp nz, type_faultn   
1eff				pop af 
1eff				endm 
1eff			 
1eff			FORTH_ERR_TOS_NOTNUM: macro 
1eff				push af 
1eff				ld a,(hl) 
1eff				cp DS_TYPE_INUM 
1eff				jp nz, type_faultn   
1eff				pop af 
1eff				endm 
1eff			 
1eff			 
1eff			; increase data stack pointer and save hl to it 
1eff				 
1eff			FORTH_DSP_NEXT: macro 
1eff				call macro_forth_dsp_next 
1eff				endm 
1eff			 
1eff			 
1eff			macro_forth_dsp_next: 
1eff				if DEBUG_FORTH_STACK_GUARD 
1eff cd 0d 72				call check_stacks 
1f02				endif 
1f02 e5				push hl 
1f03 d5				push de 
1f04 eb				ex de,hl 
1f05 2a 20 f9			ld hl,(cli_data_sp) 
1f08 23				inc hl 
1f09 23				inc hl 
1f0a			 
1f0a			; PARSEV5 
1f0a 23				inc hl 
1f0b 22 20 f9			ld (cli_data_sp),hl 
1f0e 73				ld (hl), e 
1f0f 23				inc hl 
1f10 72				ld (hl), d 
1f11 d1				pop de 
1f12 e1				pop hl 
1f13				if DEBUG_FORTH_STACK_GUARD 
1f13 cd 0d 72				call check_stacks 
1f16				endif 
1f16 c9				ret 
1f17			 
1f17			 
1f17			; increase ret stack pointer and save hl to it 
1f17				 
1f17			FORTH_RSP_NEXT: macro 
1f17				call macro_forth_rsp_next 
1f17				endm 
1f17			 
1f17			macro_forth_rsp_next: 
1f17				if DEBUG_FORTH_STACK_GUARD 
1f17 cd 0d 72				call check_stacks 
1f1a				endif 
1f1a e5				push hl 
1f1b d5				push de 
1f1c eb				ex de,hl 
1f1d 2a 24 f9			ld hl,(cli_ret_sp) 
1f20 23				inc hl 
1f21 23				inc hl 
1f22 22 24 f9			ld (cli_ret_sp),hl 
1f25 73				ld (hl), e 
1f26 23				inc hl 
1f27 72				ld (hl), d 
1f28 d1				pop de 
1f29 e1				pop hl 
1f2a				if DEBUG_FORTH_STACK_GUARD 
1f2a cd 0d 72				call check_stacks 
1f2d				endif 
1f2d c9				ret 
1f2e			 
1f2e			; get current ret stack pointer and save to hl  
1f2e				 
1f2e			FORTH_RSP_TOS: macro 
1f2e				call macro_forth_rsp_tos 
1f2e				endm 
1f2e			 
1f2e			macro_forth_rsp_tos: 
1f2e				;push de 
1f2e 2a 24 f9			ld hl,(cli_ret_sp) 
1f31 cd 69 1f			call loadhlptrtohl 
1f34				;ld e, (hl) 
1f34				;inc hl 
1f34				;ld d, (hl) 
1f34				;ex de, hl 
1f34					if DEBUG_FORTH_WORDS 
1f34			;			DMARK "RST" 
1f34						CALLMONITOR 
1f34 cd aa fd			call debug_vector  
1f37				endm  
# End of macro CALLMONITOR
1f37					endif 
1f37				;pop de 
1f37 c9				ret 
1f38			 
1f38			; pop ret stack pointer 
1f38				 
1f38			FORTH_RSP_POP: macro 
1f38				call macro_forth_rsp_pop 
1f38				endm 
1f38			 
1f38			 
1f38			macro_forth_rsp_pop: 
1f38				if DEBUG_FORTH_STACK_GUARD 
1f38			;		DMARK "RPP" 
1f38 cd 0d 72				call check_stacks 
1f3b					FORTH_CHK_RSP_UNDER 
1f3b e5				push hl 
1f3c d5				push de 
1f3d 2a 24 f9			ld hl,(cli_ret_sp) 
1f40 11 de f8			ld de, cli_ret_stack 
1f43 cd ca 0f			call cmp16 
1f46 da 24 73			jp c, fault_rsp_under 
1f49 d1				pop de 
1f4a e1				pop hl 
1f4b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1f4b				endif 
1f4b e5				push hl 
1f4c 2a 24 f9			ld hl,(cli_ret_sp) 
1f4f			 
1f4f			 
1f4f				if FORTH_ENABLE_FREE 
1f4f			 
1f4f					; get pointer 
1f4f			 
1f4f					push de 
1f4f					push hl 
1f4f			 
1f4f					ld e, (hl) 
1f4f					inc hl 
1f4f					ld d, (hl) 
1f4f			 
1f4f					ex de, hl 
1f4f					call free 
1f4f			 
1f4f					pop hl 
1f4f					pop de 
1f4f			 
1f4f			 
1f4f				endif 
1f4f			 
1f4f			 
1f4f 2b				dec hl 
1f50 2b				dec hl 
1f51 22 24 f9			ld (cli_ret_sp), hl 
1f54				; do stack underflow checks 
1f54 e1				pop hl 
1f55				if DEBUG_FORTH_STACK_GUARD 
1f55 cd 0d 72				call check_stacks 
1f58					FORTH_CHK_RSP_UNDER 
1f58 e5				push hl 
1f59 d5				push de 
1f5a 2a 24 f9			ld hl,(cli_ret_sp) 
1f5d 11 de f8			ld de, cli_ret_stack 
1f60 cd ca 0f			call cmp16 
1f63 da 24 73			jp c, fault_rsp_under 
1f66 d1				pop de 
1f67 e1				pop hl 
1f68				endm 
# End of macro FORTH_CHK_RSP_UNDER
1f68				endif 
1f68 c9				ret 
1f69			 
1f69			 
1f69			 
1f69			; routine to load word pointed to by hl into hl 
1f69			 
1f69			loadhlptrtohl: 
1f69			 
1f69 d5				push de 
1f6a 5e				ld e, (hl) 
1f6b 23				inc hl 
1f6c 56				ld d, (hl) 
1f6d eb				ex de, hl 
1f6e d1				pop de 
1f6f			 
1f6f c9				ret 
1f70			 
1f70			 
1f70			 
1f70			 
1f70			 
1f70			; push a number held in HL onto the data stack 
1f70			; entry point for pushing a value when already in hl used in function above 
1f70			 
1f70			forth_push_numhl: 
1f70			 
1f70 e5				push hl    ; save value to push 
1f71			 
1f71			if DEBUG_FORTH_PUSH 
1f71				; see if disabled 
1f71			 
1f71			 
1f71 f5				push af 
1f72 3a aa fd			ld a,(debug_vector) 
1f75 fe c9			cp $c9   ; ret 
1f77			;	ld a, (os_view_disable) 
1f77			;	cp '*' 
1f77 28 33			jr z, .pskip2 
1f79 e5				push hl 
1f7a e5			push hl 
1f7b cd 7c 0d			call clear_display 
1f7e e1			pop hl 
1f7f 7c				ld a,h 
1f80 21 f8 f3			ld hl, os_word_scratch 
1f83 cd a8 11			call hexout 
1f86 e1				pop hl 
1f87 7d				ld a,l 
1f88 21 fa f3			ld hl, os_word_scratch+2 
1f8b cd a8 11			call hexout 
1f8e			 
1f8e 21 fc f3			ld hl, os_word_scratch+4 
1f91			;	ld a,0 
1f91 36 00			ld (hl),0 
1f93 11 f8 f3			ld de,os_word_scratch 
1f96 3e 28				ld a, display_row_2 
1f98 cd 8e 0d				call str_at_display 
1f9b 11 0a 64			ld de, .push_num 
1f9e 3e 00			ld a, display_row_1 
1fa0			 
1fa0 cd 8e 0d				call str_at_display 
1fa3			 
1fa3			 
1fa3 cd 9e 0d			call update_display 
1fa6 cd c0 0c			call delay1s 
1fa9 cd c0 0c			call delay1s 
1fac			.pskip2:  
1fac			 
1fac f1				pop af 
1fad			endif	 
1fad			 
1fad			 
1fad				FORTH_DSP_NEXT 
1fad cd ff 1e			call macro_forth_dsp_next 
1fb0				endm 
# End of macro FORTH_DSP_NEXT
1fb0			 
1fb0 2a 20 f9			ld hl, (cli_data_sp) 
1fb3			 
1fb3				; save item type 
1fb3			;	ld a,  DS_TYPE_INUM 
1fb3 36 02			ld (hl), DS_TYPE_INUM 
1fb5 23				inc hl 
1fb6			 
1fb6				; get word off stack 
1fb6 d1				pop de 
1fb7				;ld a,e 
1fb7 73				ld (hl), e 
1fb8 23				inc hl 
1fb9			;	ld a,d 
1fb9 72				ld (hl), d 
1fba			 
1fba			if DEBUG_FORTH_PUSH 
1fba 2b				dec hl 
1fbb 2b				dec hl 
1fbc 2b				dec hl 
1fbd						DMARK "PH5" 
1fbd f5				push af  
1fbe 3a d2 1f			ld a, (.dmark)  
1fc1 32 9d fd			ld (debug_mark),a  
1fc4 3a d3 1f			ld a, (.dmark+1)  
1fc7 32 9e fd			ld (debug_mark+1),a  
1fca 3a d4 1f			ld a, (.dmark+2)  
1fcd 32 9f fd			ld (debug_mark+2),a  
1fd0 18 03			jr .pastdmark  
1fd2 ..			.dmark: db "PH5"  
1fd5 f1			.pastdmark: pop af  
1fd6			endm  
# End of macro DMARK
1fd6				CALLMONITOR 
1fd6 cd aa fd			call debug_vector  
1fd9				endm  
# End of macro CALLMONITOR
1fd9			endif	 
1fd9			 
1fd9 c9				ret 
1fda			 
1fda			 
1fda			; Push a string to stack pointed to by hl 
1fda			 
1fda			forth_push_str: 
1fda			 
1fda			if DEBUG_FORTH_PUSH 
1fda						DMARK "PSQ" 
1fda f5				push af  
1fdb 3a ef 1f			ld a, (.dmark)  
1fde 32 9d fd			ld (debug_mark),a  
1fe1 3a f0 1f			ld a, (.dmark+1)  
1fe4 32 9e fd			ld (debug_mark+1),a  
1fe7 3a f1 1f			ld a, (.dmark+2)  
1fea 32 9f fd			ld (debug_mark+2),a  
1fed 18 03			jr .pastdmark  
1fef ..			.dmark: db "PSQ"  
1ff2 f1			.pastdmark: pop af  
1ff3			endm  
# End of macro DMARK
1ff3				CALLMONITOR 
1ff3 cd aa fd			call debug_vector  
1ff6				endm  
# End of macro CALLMONITOR
1ff6			endif	 
1ff6			 
1ff6			 
1ff6			    
1ff6 e5				push hl 
1ff7 e5				push hl 
1ff8			 
1ff8			;	ld a, 0   ; find end of string 
1ff8 cd 04 13			call strlenz 
1ffb			if DEBUG_FORTH_PUSH 
1ffb						DMARK "PQ2" 
1ffb f5				push af  
1ffc 3a 10 20			ld a, (.dmark)  
1fff 32 9d fd			ld (debug_mark),a  
2002 3a 11 20			ld a, (.dmark+1)  
2005 32 9e fd			ld (debug_mark+1),a  
2008 3a 12 20			ld a, (.dmark+2)  
200b 32 9f fd			ld (debug_mark+2),a  
200e 18 03			jr .pastdmark  
2010 ..			.dmark: db "PQ2"  
2013 f1			.pastdmark: pop af  
2014			endm  
# End of macro DMARK
2014				CALLMONITOR 
2014 cd aa fd			call debug_vector  
2017				endm  
# End of macro CALLMONITOR
2017			endif	 
2017 eb				ex de, hl 
2018 e1				pop hl   ; get ptr to start of string 
2019			if DEBUG_FORTH_PUSH 
2019						DMARK "PQ3" 
2019 f5				push af  
201a 3a 2e 20			ld a, (.dmark)  
201d 32 9d fd			ld (debug_mark),a  
2020 3a 2f 20			ld a, (.dmark+1)  
2023 32 9e fd			ld (debug_mark+1),a  
2026 3a 30 20			ld a, (.dmark+2)  
2029 32 9f fd			ld (debug_mark+2),a  
202c 18 03			jr .pastdmark  
202e ..			.dmark: db "PQ3"  
2031 f1			.pastdmark: pop af  
2032			endm  
# End of macro DMARK
2032				CALLMONITOR 
2032 cd aa fd			call debug_vector  
2035				endm  
# End of macro CALLMONITOR
2035			endif	 
2035 19				add hl,de 
2036			if DEBUG_FORTH_PUSH 
2036						DMARK "PQE" 
2036 f5				push af  
2037 3a 4b 20			ld a, (.dmark)  
203a 32 9d fd			ld (debug_mark),a  
203d 3a 4c 20			ld a, (.dmark+1)  
2040 32 9e fd			ld (debug_mark+1),a  
2043 3a 4d 20			ld a, (.dmark+2)  
2046 32 9f fd			ld (debug_mark+2),a  
2049 18 03			jr .pastdmark  
204b ..			.dmark: db "PQE"  
204e f1			.pastdmark: pop af  
204f			endm  
# End of macro DMARK
204f				CALLMONITOR 
204f cd aa fd			call debug_vector  
2052				endm  
# End of macro CALLMONITOR
2052			endif	 
2052			 
2052 2b				dec hl    ; see if there is an optional trailing double quote 
2053 7e				ld a,(hl) 
2054 fe 22			cp '"' 
2056 20 02			jr nz, .strnoq 
2058			;	ld a, 0      ; get rid of double quote 
2058 36 00			ld (hl), 0 
205a 23			.strnoq: inc hl 
205b			 
205b			;	ld a, 0 
205b 36 00			ld (hl), 0     ; add null term and get rid of trailing double quote 
205d			 
205d 13				inc de ; add one for the type string 
205e 13				inc de ; add one for null term??? 
205f			 
205f				; tos is get string pointer again 
205f				; de contains space to allocate 
205f				 
205f d5				push de 
2060			 
2060 eb				ex de, hl 
2061			 
2061				;push af 
2061			 
2061			if DEBUG_FORTH_PUSH 
2061						DMARK "PHm" 
2061 f5				push af  
2062 3a 76 20			ld a, (.dmark)  
2065 32 9d fd			ld (debug_mark),a  
2068 3a 77 20			ld a, (.dmark+1)  
206b 32 9e fd			ld (debug_mark+1),a  
206e 3a 78 20			ld a, (.dmark+2)  
2071 32 9f fd			ld (debug_mark+2),a  
2074 18 03			jr .pastdmark  
2076 ..			.dmark: db "PHm"  
2079 f1			.pastdmark: pop af  
207a			endm  
# End of macro DMARK
207a				CALLMONITOR 
207a cd aa fd			call debug_vector  
207d				endm  
# End of macro CALLMONITOR
207d			endif	 
207d cd 78 13			call malloc	; on ret hl now contains allocated memory 
2080				if DEBUG_FORTH_MALLOC_GUARD 
2080 cc 62 64				call z,malloc_error 
2083				endif 
2083			 
2083				 
2083 c1				pop bc    ; get length 
2084 d1				pop de   ;  get string start    
2085			 
2085				; hl has destination from malloc 
2085			 
2085 eb				ex de, hl    ; prep for ldir 
2086			 
2086 d5				push de   ; save malloc area for DSP later 
2087				;push hl   ; save malloc area for DSP later 
2087			 
2087			if DEBUG_FORTH_PUSH 
2087						DMARK "PHc" 
2087 f5				push af  
2088 3a 9c 20			ld a, (.dmark)  
208b 32 9d fd			ld (debug_mark),a  
208e 3a 9d 20			ld a, (.dmark+1)  
2091 32 9e fd			ld (debug_mark+1),a  
2094 3a 9e 20			ld a, (.dmark+2)  
2097 32 9f fd			ld (debug_mark+2),a  
209a 18 03			jr .pastdmark  
209c ..			.dmark: db "PHc"  
209f f1			.pastdmark: pop af  
20a0			endm  
# End of macro DMARK
20a0				CALLMONITOR 
20a0 cd aa fd			call debug_vector  
20a3				endm  
# End of macro CALLMONITOR
20a3			endif	 
20a3			 
20a3			 
20a3 ed b0			ldir 
20a5			 
20a5			 
20a5				; push malloc to data stack     macro?????  
20a5			 
20a5				FORTH_DSP_NEXT 
20a5 cd ff 1e			call macro_forth_dsp_next 
20a8				endm 
# End of macro FORTH_DSP_NEXT
20a8			 
20a8				; save value and type 
20a8			 
20a8 2a 20 f9			ld hl, (cli_data_sp) 
20ab			 
20ab				; save item type 
20ab			;	ld a,  DS_TYPE_STR 
20ab 36 01			ld (hl), DS_TYPE_STR 
20ad 23				inc hl 
20ae			 
20ae				; get malloc word off stack 
20ae d1				pop de 
20af 73				ld (hl), e 
20b0 23				inc hl 
20b1 72				ld (hl), d 
20b2			 
20b2			 
20b2			 
20b2			if DEBUG_FORTH_PUSH 
20b2 2a 20 f9			ld hl, (cli_data_sp) 
20b5						DMARK "PHS" 
20b5 f5				push af  
20b6 3a ca 20			ld a, (.dmark)  
20b9 32 9d fd			ld (debug_mark),a  
20bc 3a cb 20			ld a, (.dmark+1)  
20bf 32 9e fd			ld (debug_mark+1),a  
20c2 3a cc 20			ld a, (.dmark+2)  
20c5 32 9f fd			ld (debug_mark+2),a  
20c8 18 03			jr .pastdmark  
20ca ..			.dmark: db "PHS"  
20cd f1			.pastdmark: pop af  
20ce			endm  
# End of macro DMARK
20ce				CALLMONITOR 
20ce cd aa fd			call debug_vector  
20d1				endm  
# End of macro CALLMONITOR
20d1			;	ex de,hl 
20d1			endif	 
20d1				; in case of spaces, skip the ptr past the copied string 
20d1				;pop af 
20d1				;ld (cli_origptr),hl 
20d1			 
20d1 c9				ret 
20d2			 
20d2			 
20d2			 
20d2			; TODO ascii push input onto stack given hl to start of input 
20d2			 
20d2			; identify type 
20d2			; if starts with a " then a string 
20d2			; otherwise it is a number 
20d2			;  
20d2			; if a string 
20d2			;     scan for ending " to get length of string to malloc for + 1 
20d2			;     malloc 
20d2			;     put pointer to string on stack first byte flags as string 
20d2			; 
20d2			; else a number 
20d2			;    look for number format identifier 
20d2			;    $xx hex 
20d2			;    %xxxxx bin 
20d2			;    xxxxx decimal 
20d2			;    convert number to 16bit word.  
20d2			;    malloc word + 1 with flag to identiy as num 
20d2			;    put pointer to number on stack 
20d2			;   
20d2			;  
20d2			  
20d2			forth_apush: 
20d2				; kernel push 
20d2			 
20d2			if DEBUG_FORTH_PUSH 
20d2						DMARK "PSH" 
20d2 f5				push af  
20d3 3a e7 20			ld a, (.dmark)  
20d6 32 9d fd			ld (debug_mark),a  
20d9 3a e8 20			ld a, (.dmark+1)  
20dc 32 9e fd			ld (debug_mark+1),a  
20df 3a e9 20			ld a, (.dmark+2)  
20e2 32 9f fd			ld (debug_mark+2),a  
20e5 18 03			jr .pastdmark  
20e7 ..			.dmark: db "PSH"  
20ea f1			.pastdmark: pop af  
20eb			endm  
# End of macro DMARK
20eb				CALLMONITOR 
20eb cd aa fd			call debug_vector  
20ee				endm  
# End of macro CALLMONITOR
20ee			endif	 
20ee				; identify input type 
20ee			 
20ee 7e				ld a,(hl) 
20ef			 
20ef fe 23			cp '#' 
20f1 ca 29 21			jp z, .fapdec 
20f4			 
20f4			 
20f4 fe 22			cp '"' 
20f6 28 0a			jr z, .fapstr 
20f8 fe 24			cp '$' 
20fa ca 21 21			jp z, .faphex 
20fd fe 25			cp '%' 
20ff ca 0a 21			jp z, .fapbin 
2102			;	cp 'b' 
2102			;	jp z, .fabin 
2102				; else decimal 
2102			 
2102				; TODO do decimal conversion 
2102				; decimal is stored as a 16bit word 
2102			 
2102				; by default everything is a string if type is not detected 
2102			.fapstr: ; 
2102 fe 22			cp '"' 
2104 20 01			jr nz, .strnoqu 
2106 23				inc hl 
2107			.strnoqu: 
2107 c3 da 1f			jp forth_push_str 
210a			 
210a			 
210a			 
210a			.fapbin:    ; push a binary string.  
210a 11 00 00			ld de, 0   ; hold a 16bit value 
210d			 
210d 23			.fapbinshift:	inc hl  
210e 7e				ld a,(hl) 
210f			;	cp 0     ; done scanning  
210f b7				or a 
2110 28 0b			jr z, .fapbdone  	; got it in HL so push  
2112			 
2112				; left shift de 
2112 eb				ex de, hl	 
2113 29				add hl, hl 
2114			 
2114				; is 1 
2114 fe 31			cp '1' 
2116 20 02			jr nz, .binzero 
2118 cb 4d			bit 1, l 
211a			.binzero: 
211a eb				ex de, hl	 ; save current de 
211b 18 f0			jr .fapbinshift 
211d			 
211d			.fapbdone: 
211d eb				ex de, hl 
211e c3 70 1f			jp forth_push_numhl 
2121			 
2121			 
2121			.faphex:   ; hex is always stored as a 16bit word 
2121				; skip number prefix 
2121 23				inc hl 
2122				; turn ascii into number 
2122 cd 5e 12			call get_word_hl	; ret 16bit word in hl 
2125			 
2125 c3 70 1f			jp forth_push_numhl 
2128			 
2128			;	 nop 
2128			 
2128			.fabin:   ; TODO bin conversion 
2128			 
2128			 
2128 c9				ret 
2129			.fapdec:	 
2129				; string to dec conversion 
2129 23				inc hl 
212a eb				ex de, hl 
212b cd 9b 12			call string_to_uint16 
212e c3 70 1f			jp forth_push_numhl 
2131 c9				ret 
2132				 
2132			;atoui_16: 
2132			 
2132			; get either a string ptr or a 16bit word from the data stack 
2132			 
2132			FORTH_DSP: macro 
2132				call macro_forth_dsp 
2132				endm 
2132			 
2132			macro_forth_dsp: 
2132				; data stack pointer points to current word on tos 
2132			 
2132 2a 20 f9			ld hl,(cli_data_sp) 
2135			 
2135				if DEBUG_FORTH_PUSH 
2135						DMARK "DSP" 
2135 f5				push af  
2136 3a 4a 21			ld a, (.dmark)  
2139 32 9d fd			ld (debug_mark),a  
213c 3a 4b 21			ld a, (.dmark+1)  
213f 32 9e fd			ld (debug_mark+1),a  
2142 3a 4c 21			ld a, (.dmark+2)  
2145 32 9f fd			ld (debug_mark+2),a  
2148 18 03			jr .pastdmark  
214a ..			.dmark: db "DSP"  
214d f1			.pastdmark: pop af  
214e			endm  
# End of macro DMARK
214e			 
214e cd 95 64				call display_data_sp 
2151				;call break_point_state 
2151				;rst 030h 
2151				CALLMONITOR 
2151 cd aa fd			call debug_vector  
2154				endm  
# End of macro CALLMONITOR
2154				endif 
2154			 
2154 c9				ret 
2155			 
2155			; return hl to start of value on stack 
2155			 
2155			FORTH_DSP_VALUE: macro 
2155				call macro_forth_dsp_value 
2155				endm 
2155			 
2155			macro_forth_dsp_value: 
2155			 
2155				FORTH_DSP 
2155 cd 32 21			call macro_forth_dsp 
2158				endm 
# End of macro FORTH_DSP
2158			 
2158 d5				push de 
2159			 
2159 23				inc hl ; skip type 
215a			 
215a 5e				ld e, (hl) 
215b 23				inc hl 
215c 56				ld d, (hl) 
215d eb				ex de,hl  
215e			 
215e d1				pop de 
215f			 
215f c9				ret 
2160			 
2160			; return hl to start of value to second item on stack 
2160			 
2160			FORTH_DSP_VALUEM1: macro 
2160				call macro_forth_dsp_value_m1 
2160				endm 
2160			 
2160			macro_forth_dsp_value_m1: 
2160			 
2160				FORTH_DSP 
2160 cd 32 21			call macro_forth_dsp 
2163				endm 
# End of macro FORTH_DSP
2163			 
2163 2b				dec hl 
2164 2b				dec hl 
2165			;	dec hl 
2165			 
2165 d5				push de 
2166			 
2166 5e				ld e, (hl) 
2167 23				inc hl 
2168 56				ld d, (hl) 
2169 eb				ex de,hl  
216a			 
216a d1				pop de 
216b			 
216b c9				ret 
216c			 
216c				 
216c			 
216c			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
216c			 
216c			FORTH_DSP_POP: macro 
216c				call macro_forth_dsp_pop 
216c				endm 
216c			 
216c			 
216c			; get the tos data type 
216c			 
216c			FORTH_DSP_TYPE:   macro 
216c			 
216c				;FORTH_DSP_VALUE 
216c				FORTH_DSP 
216c				 
216c				; hl points to value 
216c				; check type 
216c			 
216c				ld a,(hl) 
216c			 
216c				endm 
216c			 
216c			; load the tos value into hl 
216c			 
216c			 
216c			FORTH_DSP_VALUEHL:  macro 
216c				call macro_dsp_valuehl 
216c				endm 
216c			 
216c			 
216c			 
216c			macro_dsp_valuehl: 
216c				FORTH_DSP_VALUE 
216c cd 55 21			call macro_forth_dsp_value 
216f				endm 
# End of macro FORTH_DSP_VALUE
216f			 
216f				;FORTH_ERR_TOS_NOTNUM 
216f			 
216f				;inc hl   ; skip type id 
216f			 
216f			;	push de 
216f			; 
216f			;	ld e, (hl) 
216f			;	inc hl 
216f			;	ld d, (hl) 
216f			;	ex de,hl  
216f			 
216f			;	pop de 
216f			 
216f				if DEBUG_FORTH_PUSH 
216f						DMARK "DVL" 
216f f5				push af  
2170 3a 84 21			ld a, (.dmark)  
2173 32 9d fd			ld (debug_mark),a  
2176 3a 85 21			ld a, (.dmark+1)  
2179 32 9e fd			ld (debug_mark+1),a  
217c 3a 86 21			ld a, (.dmark+2)  
217f 32 9f fd			ld (debug_mark+2),a  
2182 18 03			jr .pastdmark  
2184 ..			.dmark: db "DVL"  
2187 f1			.pastdmark: pop af  
2188			endm  
# End of macro DMARK
2188				CALLMONITOR 
2188 cd aa fd			call debug_vector  
218b				endm  
# End of macro CALLMONITOR
218b				endif 
218b c9				ret 
218c			 
218c			forth_apushstrhl:      
218c				; push of string requires use of cli_origptr 
218c				; bodge use 
218c			 
218c				; get current cli_origptr, save, update with temp pointer  
218c ed 5b 70 f9		ld de, (cli_origptr) 
2190 22 70 f9			ld (cli_origptr), hl 
2193 d5				push de 
2194 cd d2 20			call forth_apush 
2197 d1				pop de 
2198 ed 53 70 f9		ld (cli_origptr), de 
219c c9			        ret	 
219d			 
219d			 
219d			; increase loop stack pointer and save hl to it 
219d				 
219d			FORTH_LOOP_NEXT: macro 
219d				call macro_forth_loop_next 
219d				;nop 
219d				endm 
219d			 
219d			macro_forth_loop_next: 
219d				if DEBUG_FORTH_STACK_GUARD 
219d cd 0d 72				call check_stacks 
21a0				endif 
21a0 e5				push hl 
21a1 d5				push de 
21a2 eb				ex de,hl 
21a3 2a 22 f9			ld hl,(cli_loop_sp) 
21a6 23				inc hl 
21a7 23				inc hl 
21a8					if DEBUG_FORTH_WORDS 
21a8						DMARK "LNX" 
21a8 f5				push af  
21a9 3a bd 21			ld a, (.dmark)  
21ac 32 9d fd			ld (debug_mark),a  
21af 3a be 21			ld a, (.dmark+1)  
21b2 32 9e fd			ld (debug_mark+1),a  
21b5 3a bf 21			ld a, (.dmark+2)  
21b8 32 9f fd			ld (debug_mark+2),a  
21bb 18 03			jr .pastdmark  
21bd ..			.dmark: db "LNX"  
21c0 f1			.pastdmark: pop af  
21c1			endm  
# End of macro DMARK
21c1						CALLMONITOR 
21c1 cd aa fd			call debug_vector  
21c4				endm  
# End of macro CALLMONITOR
21c4					endif 
21c4 22 22 f9			ld (cli_loop_sp),hl 
21c7 73				ld (hl), e 
21c8 23				inc hl 
21c9 72				ld (hl), d 
21ca d1				pop de    ; been reversed so save a swap on restore 
21cb e1				pop hl 
21cc				if DEBUG_FORTH_STACK_GUARD 
21cc cd 0d 72				call check_stacks 
21cf				endif 
21cf c9				ret 
21d0			 
21d0			; get current ret stack pointer and save to hl  
21d0				 
21d0			FORTH_LOOP_TOS: macro 
21d0				call macro_forth_loop_tos 
21d0				endm 
21d0			 
21d0			macro_forth_loop_tos: 
21d0 d5				push de 
21d1 2a 22 f9			ld hl,(cli_loop_sp) 
21d4 5e				ld e, (hl) 
21d5 23				inc hl 
21d6 56				ld d, (hl) 
21d7 eb				ex de, hl 
21d8 d1				pop de 
21d9 c9				ret 
21da			 
21da			; pop loop stack pointer 
21da				 
21da			FORTH_LOOP_POP: macro 
21da				call macro_forth_loop_pop 
21da				endm 
21da			 
21da			 
21da			macro_forth_loop_pop: 
21da				if DEBUG_FORTH_STACK_GUARD 
21da					DMARK "LPP" 
21da f5				push af  
21db 3a ef 21			ld a, (.dmark)  
21de 32 9d fd			ld (debug_mark),a  
21e1 3a f0 21			ld a, (.dmark+1)  
21e4 32 9e fd			ld (debug_mark+1),a  
21e7 3a f1 21			ld a, (.dmark+2)  
21ea 32 9f fd			ld (debug_mark+2),a  
21ed 18 03			jr .pastdmark  
21ef ..			.dmark: db "LPP"  
21f2 f1			.pastdmark: pop af  
21f3			endm  
# End of macro DMARK
21f3 cd 0d 72				call check_stacks 
21f6					FORTH_CHK_LOOP_UNDER 
21f6 e5				push hl 
21f7 d5				push de 
21f8 2a 22 f9			ld hl,(cli_loop_sp) 
21fb 11 5c f8			ld de, cli_loop_stack 
21fe cd ca 0f			call cmp16 
2201 da 2a 73			jp c, fault_loop_under 
2204 d1				pop de 
2205 e1				pop hl 
2206				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2206				endif 
2206 e5				push hl 
2207 2a 22 f9			ld hl,(cli_loop_sp) 
220a 2b				dec hl 
220b 2b				dec hl 
220c 22 22 f9			ld (cli_loop_sp), hl 
220f				; TODO do stack underflow checks 
220f e1				pop hl 
2210				if DEBUG_FORTH_STACK_GUARD 
2210 cd 0d 72				call check_stacks 
2213					FORTH_CHK_LOOP_UNDER 
2213 e5				push hl 
2214 d5				push de 
2215 2a 22 f9			ld hl,(cli_loop_sp) 
2218 11 5c f8			ld de, cli_loop_stack 
221b cd ca 0f			call cmp16 
221e da 2a 73			jp c, fault_loop_under 
2221 d1				pop de 
2222 e1				pop hl 
2223				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2223				endif 
2223 c9				ret 
2224			 
2224			macro_forth_dsp_pop: 
2224			 
2224 e5				push hl 
2225			 
2225				; release malloc data 
2225			 
2225				if DEBUG_FORTH_STACK_GUARD 
2225 cd 0d 72				call check_stacks 
2228					FORTH_CHK_DSP_UNDER 
2228 e5				push hl 
2229 d5				push de 
222a 2a 20 f9			ld hl,(cli_data_sp) 
222d 11 5a f6			ld de, cli_data_stack 
2230 cd ca 0f			call cmp16 
2233 da 1e 73			jp c, fault_dsp_under 
2236 d1				pop de 
2237 e1				pop hl 
2238				endm 
# End of macro FORTH_CHK_DSP_UNDER
2238				endif 
2238				;ld hl,(cli_data_sp) 
2238			if DEBUG_FORTH_DOT 
2238				DMARK "DPP" 
2238 f5				push af  
2239 3a 4d 22			ld a, (.dmark)  
223c 32 9d fd			ld (debug_mark),a  
223f 3a 4e 22			ld a, (.dmark+1)  
2242 32 9e fd			ld (debug_mark+1),a  
2245 3a 4f 22			ld a, (.dmark+2)  
2248 32 9f fd			ld (debug_mark+2),a  
224b 18 03			jr .pastdmark  
224d ..			.dmark: db "DPP"  
2250 f1			.pastdmark: pop af  
2251			endm  
# End of macro DMARK
2251				CALLMONITOR 
2251 cd aa fd			call debug_vector  
2254				endm  
# End of macro CALLMONITOR
2254			endif	 
2254			 
2254			 
2254			if FORTH_ENABLE_DSPPOPFREE 
2254			 
2254				FORTH_DSP 
2254 cd 32 21			call macro_forth_dsp 
2257				endm 
# End of macro FORTH_DSP
2257			 
2257 7e				ld a, (hl) 
2258 fe 01			cp DS_TYPE_STR 
225a 20 22			jr nz, .skippopfree 
225c			 
225c				FORTH_DSP_VALUEHL 
225c cd 6c 21			call macro_dsp_valuehl 
225f				endm 
# End of macro FORTH_DSP_VALUEHL
225f			;	nop 
225f			if DEBUG_FORTH_DOT 
225f				DMARK "DPf" 
225f f5				push af  
2260 3a 74 22			ld a, (.dmark)  
2263 32 9d fd			ld (debug_mark),a  
2266 3a 75 22			ld a, (.dmark+1)  
2269 32 9e fd			ld (debug_mark+1),a  
226c 3a 76 22			ld a, (.dmark+2)  
226f 32 9f fd			ld (debug_mark+2),a  
2272 18 03			jr .pastdmark  
2274 ..			.dmark: db "DPf"  
2277 f1			.pastdmark: pop af  
2278			endm  
# End of macro DMARK
2278				CALLMONITOR 
2278 cd aa fd			call debug_vector  
227b				endm  
# End of macro CALLMONITOR
227b			endif	 
227b cd 42 14			call free 
227e			.skippopfree: 
227e				 
227e			 
227e			endif 
227e			 
227e			if DEBUG_FORTH_DOT_KEY 
227e				DMARK "DP2" 
227e				CALLMONITOR 
227e			endif	 
227e			 
227e				; move pointer down 
227e			 
227e 2a 20 f9			ld hl,(cli_data_sp) 
2281 2b				dec hl 
2282 2b				dec hl 
2283			; PARSEV5 
2283 2b				dec hl 
2284 22 20 f9			ld (cli_data_sp), hl 
2287			 
2287				if DEBUG_FORTH_STACK_GUARD 
2287 cd 0d 72				call check_stacks 
228a					FORTH_CHK_DSP_UNDER 
228a e5				push hl 
228b d5				push de 
228c 2a 20 f9			ld hl,(cli_data_sp) 
228f 11 5a f6			ld de, cli_data_stack 
2292 cd ca 0f			call cmp16 
2295 da 1e 73			jp c, fault_dsp_under 
2298 d1				pop de 
2299 e1				pop hl 
229a				endm 
# End of macro FORTH_CHK_DSP_UNDER
229a				endif 
229a			 
229a e1				pop hl 
229b			 
229b c9				ret 
229c			 
229c			getwordathl: 
229c				; hl points to an address 
229c				; load hl with the word at that address 
229c			 
229c d5				push de 
229d			 
229d 5e				ld e, (hl) 
229e 23				inc hl 
229f 56				ld d, (hl) 
22a0 eb				ex de, hl 
22a1			 
22a1 d1				pop de 
22a2 c9				ret 
22a3			 
22a3			 
22a3			; functions to manuplite stack pointers 
22a3			 
22a3			; generate fragment to set hl to be pointer to a stack item 
22a3			 
22a3			FORTH_DSP_PTR: macro  x 
22a3				ld hl,(cli_data_sp) 
22a3				ld de, x * 3 
22a3				sbc hl, de 
22a3				endm 
22a3			 
22a3			 
22a3			 
22a3			; copy point in hl to stack tmp storage slots 1-4 
22a3			hltostack1: 
22a3 11 f0 f0			ld de, os_stack_1  
22a6 c3 d1 22			jp hltostackmv 
22a9			 
22a9			hltostack2:  
22a9 11 ed f0			ld de, os_stack_2 
22ac c3 d1 22			jp hltostackmv 
22af			 
22af			hltostack3:  
22af 11 ea f0			ld de, os_stack_3 
22b2 c3 d1 22			jp hltostackmv 
22b5			 
22b5			hltostack4:  
22b5 11 e7 f0			ld de, os_stack_4  
22b8 c3 d1 22			jp hltostackmv 
22bb			 
22bb			; copy to point in hl from stack tmp storage slots 1-4 
22bb			hlfromstack1: 
22bb 11 f0 f0			ld de, os_stack_1 
22be c3 d0 22			jp hlfromsttackmv 
22c1			 
22c1			hlfromstack2:  
22c1 11 ed f0			ld de, os_stack_2 
22c4 c3 d0 22			jp hlfromsttackmv 
22c7			 
22c7			hlfromstack3:  
22c7 11 ea f0			ld de, os_stack_3 
22ca c3 d0 22			jp hlfromsttackmv 
22cd			 
22cd			hlfromstack4:  
22cd 11 e7 f0			ld de, os_stack_4 
22d0			 
22d0			hlfromsttackmv: 
22d0 eb				ex de, hl 
22d1			 
22d1			hltostackmv: 
22d1			 
22d1				; do stack move 
22d1 c5				push bc 
22d2 01 03 00			ld bc, 3 
22d5 ed b0			ldir  
22d7 c1				pop bc	 
22d8 c9				ret 
22d9			 
22d9			; eof 
22d9			 
# End of file forth_stackopsv5.asm
22d9			endif 
22d9			loadwordinhl:	 
22d9			 
22d9 d5				push de 
22da			 
22da 5e				ld e, (hl) 
22db 23				inc hl 
22dc 56				ld d, (hl) 
22dd eb				ex de,hl  
22de			 
22de d1				pop de 
22df			 
22df c9				ret 
22e0			 
22e0			user_word_eol:  
22e0				; hl contains the pointer to where to create a linked list item from the end 
22e0				; of the user dict to continue on at the system word dict 
22e0				 
22e0				; poke the stub of the word list linked list to repoint to rom words 
22e0			 
22e0				; stub format 
22e0				; db   word id 
22e0				; dw    link to next word 
22e0			        ; db char length of token 
22e0				; db string + 0 term 
22e0				; db exec code....  
22e0			 
22e0			;	ld a, WORD_SYS_ROOT     ; root word 
22e0 36 00			ld (hl), WORD_SYS_ROOT		; word id 
22e2 23				inc hl 
22e3			 
22e3 11 8c 24			ld de, sysdict 
22e6 73				ld (hl), e		; next word link ie system dict 
22e7 23				inc hl 
22e8 72				ld (hl), d		; next word link ie system dict 
22e9 23				inc hl	 
22ea			 
22ea			;	ld (hl), sysdict		; next word link ie system dict 
22ea			;	inc hl 
22ea			;	inc hl 
22ea			 
22ea			;	inc hl 
22ea			;	inc hl 
22ea			 
22ea			;	ld a, 2			; word length is 0 
22ea 36 02			ld (hl), 2 
22ec 23				inc hl 
22ed			 
22ed			;	ld a, '~'			; word length is 0 
22ed 36 7e			ld (hl), '~' 
22ef 23				inc hl 
22f0			;	ld a, 0			; save empty word 
22f0 36 00			ld (hl), 0 
22f2			 
22f2 c9				ret 
22f3			 
22f3				 
22f3			 
22f3			forthexec_cleanup: 
22f3				FORTH_RSP_POP 
22f3 cd 38 1f			call macro_forth_rsp_pop 
22f6				endm 
# End of macro FORTH_RSP_POP
22f6 c9				ret 
22f7			 
22f7			forth_call_hl: 
22f7				; taking hl 
22f7 e5				push hl 
22f8 c9				ret 
22f9			 
22f9			; this is called to reset Forth system but keep existing uwords etc 
22f9			 
22f9			forth_warmstart: 
22f9				; setup stack over/under flow checks 
22f9				if DEBUG_FORTH_STACK_GUARD 
22f9 cd f3 71				call chk_stk_init 
22fc				endif 
22fc			 
22fc				; init stack pointers  - * these stacks go upwards *  
22fc 21 de f8			ld hl, cli_ret_stack 
22ff 22 24 f9			ld (cli_ret_sp), hl	 
2302				; set bottom of stack 
2302			;	ld a,0 
2302 36 00			ld (hl),0 
2304 23				inc hl 
2305 36 00			ld (hl),0 
2307			 
2307 21 5a f6			ld hl, cli_data_stack 
230a 22 20 f9			ld (cli_data_sp), hl	 
230d				; set bottom of stack 
230d			;	ld a,0 
230d 36 00			ld (hl),0 
230f 23				inc hl 
2310 36 00			ld (hl),0 
2312			 
2312 21 5c f8			ld hl, cli_loop_stack 
2315 22 22 f9			ld (cli_loop_sp), hl	 
2318				; set bottom of stack 
2318			;	ld a,0 
2318 36 00			ld (hl),0 
231a 23				inc hl 
231b 36 00			ld (hl),0 
231d			 
231d				; init extent of current open file 
231d			 
231d 3e 00			ld a, 0 
231f 32 9c f9			ld (store_openext), a 
2322			 
2322 c9				ret 
2323			 
2323			 
2323			 
2323			; Cold Start - this is called to setup the whole Forth system 
2323			 
2323			forth_init: 
2323			 
2323				; setup stack over/under flow checks 
2323			 
2323			;	if DEBUG_FORTH_STACK_GUARD 
2323			;		call chk_stk_init 
2323			;	endif 
2323			 
2323				; enable auto display updates (slow.....) 
2323			 
2323 3e 01			ld a, 1 
2325 32 6e f9			ld (cli_autodisplay), a 
2328			 
2328				; if storage is in use disable long reads for now 
2328 3e 00			ld a, 0 
232a 32 a7 f9			ld (store_longread), a 
232d			 
232d			 
232d				; show start up screen 
232d			 
232d cd 7c 0d			call clear_display 
2330			 
2330 3e 00			ld a,0 
2332 32 90 f9			ld (f_cursor_ptr), a 
2335			 
2335				; set start of word list in start of ram - for use when creating user words 
2335			 
2335 21 00 80			ld hl, baseram 
2338 22 f0 f3			ld (os_last_new_uword), hl 
233b cd e0 22			call user_word_eol 
233e				 
233e			;		call display_data_sp 
233e			;		call next_page_prompt 
233e			 
233e			 
233e			 
233e			 
233e c9				ret 
233f			 
233f .. 00		.bootforth: db " Forth Kernel Init ",0 
2353			 
2353			; TODO push to stack 
2353			 
2353			;  
2353			 
2353			if FORTH_PARSEV2 
2353			 
2353			 
2353				include "forth_parserv2.asm" 
2353			 
2353			endif 
2353			 
2353			 
2353			; parse cli version 1 
2353			 
2353			if FORTH_PARSEV1 
2353			 
2353			 
2353			 
2353			      include "forth_parserv1.asm" 
2353			endif 
2353				 
2353			if FORTH_PARSEV3 
2353			      include "forth_parserv3.asm" 
2353				include "forth_wordsv3.asm" 
2353			endif 
2353			 
2353			if FORTH_PARSEV4 
2353			      include "forth_parserv4.asm" 
2353				include "forth_wordsv4.asm" 
2353			endif 
2353			 
2353			if FORTH_PARSEV5 
2353			      include "forth_parserv5.asm" 
2353				include "forth_wordsv4.asm" 
2353			endif 
2353			 
2353			if FORTH_PARSEV6 
2353			      include "forth_parserv6.asm" 
2353			 
2353			 
2353			; A better parser without using malloc and string copies all over the place.  
2353			; Exec in situ should be faster 
2353			 
2353			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
2353			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
2353			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
2353			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
2353			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
2353			WORD_SYS_END: equ 0   ; Opcode for all user words 
2353			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
2353			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
2353			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
2353			 
2353			; Core word preamble macro 
2353			 
2353			CWHEAD:   macro nxtword opcode lit len opflags 
2353				db WORD_SYS_CORE+opcode             
2353				; internal op code number 
2353				dw nxtword            
2353				; link to next dict word block 
2353				db len + 1 
2353				; literal length of dict word inc zero term 
2353				db lit,0              
2353				; literal dict word 
2353			        ; TODO db opflags        
2353				endm 
2353			 
2353			 
2353			NEXTW: macro  
2353				call parse_vector 
2353				jp macro_next 
2353				endm 
2353			 
2353			macro_next: 
2353			if DEBUG_FORTH_PARSE_EXEC 
2353				DMARK "NXT" 
2353				CALLMONITOR 
2353			endif	 
2353			;	inc hl  ; skip token null term  
2353 ed 4b 72 f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2357 ed 5b 70 f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
235b 2a f4 f3			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
235e			if DEBUG_FORTH_PARSE_EXEC 
235e				DMARK "}AA" 
235e				CALLMONITOR 
235e			endif	 
235e c3 43 24			jp execnext 
2361				;jp exec1 
2361			       
2361			 
2361			 
2361			; Another go at the parser to compile  
2361			 
2361			 
2361			; TODO rework parser to change all of the string words to byte tokens 
2361			; TODO do a search for  
2361			 
2361			; TODO first run normal parser to zero term sections 
2361			; TODO for each word do a token look up to get the op code 
2361			; TODO need some means to flag to the exec that this is a byte code form    
2361			 
2361			 
2361			forthcompile: 
2361			 
2361			; 
2361			; line parse: 
2361			;       parse raw input buffer 
2361			;       tokenise the words 
2361			;       malloc new copy (for looping etc) 
2361			;       copy to malloc + current pc in line to start of string and add line term 
2361			;       save on new rsp 
2361			; 
2361			 
2361			; hl to point to the line to tokenise 
2361			 
2361			;	push hl 
2361 22 f4 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2364			 
2364			;	ld a,0		; string term on input 
2364			;	call strlent 
2364			 
2364			;	ld (os_tok_len), hl	 ; save string length 
2364			 
2364			;if DEBUG_FORTH_TOK 
2364			;	ex de,hl		 
2364			;endif 
2364			 
2364			;	pop hl 		; get back string pointer 
2364			 
2364			if DEBUG_FORTH_TOK 
2364						DMARK "TOc" 
2364				CALLMONITOR 
2364			endif 
2364 7e			.cptoken2:    ld a,(hl) 
2365 23				inc hl 
2366 fe 7f			cp FORTH_END_BUFFER 
2368 28 26			jr z, .cptokendone2 
236a			;	cp 0 
236a b7				or a 
236b 28 23			jr z, .cptokendone2 
236d fe 22			cp '"' 
236f 28 0a			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2371 fe 20			cp ' ' 
2373 20 ef			jr nz,  .cptoken2 
2375			 
2375			; TODO consume comments held between ( and ) 
2375			 
2375				; we have a space so change to zero term for dict match later 
2375 2b				dec hl 
2376			;	ld a,0 
2376 36 00			ld (hl), 0 
2378 23				inc hl 
2379 18 e9			jr .cptoken2 
237b				 
237b			 
237b			.cptokenstr2: 
237b				; skip all white space until either eol (because forgot to term) or end double quote 
237b			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
237b				;inc hl ; skip current double quote 
237b 7e				ld a,(hl) 
237c 23				inc hl 
237d fe 22			cp '"' 
237f 28 e3			jr z, .cptoken2 
2381 fe 7f			cp FORTH_END_BUFFER 
2383 28 0b			jr z, .cptokendone2 
2385			;	cp 0 
2385 b7				or a 
2386 28 08			jr z, .cptokendone2 
2388 fe 20			cp ' ' 
238a 28 02			jr z, .cptmp2 
238c 18 ed			jr .cptokenstr2 
238e			 
238e			.cptmp2:	; we have a space so change to zero term for dict match later 
238e				;dec hl 
238e				;ld a,"-"	; TODO remove this when working 
238e				;ld (hl), a 
238e				;inc hl 
238e 18 eb			jr .cptokenstr2 
2390			 
2390			.cptokendone2: 
2390				;inc hl 
2390			;	ld a, FORTH_END_BUFFER 
2390 36 7f			ld (hl),FORTH_END_BUFFER 
2392			;	inc hl 
2392			;	ld a, '!' 
2392			;	ld (hl),a 
2392			 
2392 2a f4 f3			ld hl,(os_tok_ptr) 
2395			         
2395			if DEBUG_FORTH_TOK 
2395						DMARK "Tc1" 
2395				CALLMONITOR 
2395			endif 
2395			 
2395				; push exec string to top of return stack 
2395				FORTH_RSP_NEXT 
2395 cd 17 1f			call macro_forth_rsp_next 
2398				endm 
# End of macro FORTH_RSP_NEXT
2398 c9				ret 
2399			 
2399			; Another go at the parser need to simplify the process 
2399			 
2399			forthparse: 
2399			 
2399			; 
2399			; line parse: 
2399			;       parse raw input buffer 
2399			;       tokenise the words 
2399			;       malloc new copy (for looping etc) 
2399			;       copy to malloc + current pc in line to start of string and add line term 
2399			;       save on new rsp 
2399			; 
2399			 
2399			; hl to point to the line to tokenise 
2399			 
2399			;	push hl 
2399 22 f4 f3			ld (os_tok_ptr), hl  ; save ptr to string 
239c			 
239c			;	ld a,0		; string term on input 
239c			;	call strlent 
239c			 
239c			;	ld (os_tok_len), hl	 ; save string length 
239c			 
239c			;if DEBUG_FORTH_TOK 
239c			;	ex de,hl		 
239c			;endif 
239c			 
239c			;	pop hl 		; get back string pointer 
239c			 
239c			if DEBUG_FORTH_TOK 
239c						DMARK "TOK" 
239c				CALLMONITOR 
239c			endif 
239c 7e			.ptoken2:    ld a,(hl) 
239d 23				inc hl 
239e fe 7f			cp FORTH_END_BUFFER 
23a0 28 26			jr z, .ptokendone2 
23a2			;	cp 0 
23a2 b7				or a 
23a3 28 23			jr z, .ptokendone2 
23a5 fe 22			cp '"' 
23a7 28 0a			jr z, .ptokenstr2     ; will want to skip until end of string delim 
23a9 fe 20			cp ' ' 
23ab 20 ef			jr nz,  .ptoken2 
23ad			 
23ad			; TODO consume comments held between ( and ) 
23ad			 
23ad				; we have a space so change to zero term for dict match later 
23ad 2b				dec hl 
23ae			;	ld a,0 
23ae 36 00			ld (hl), 0 
23b0 23				inc hl 
23b1 18 e9			jr .ptoken2 
23b3				 
23b3			 
23b3			.ptokenstr2: 
23b3				; skip all white space until either eol (because forgot to term) or end double quote 
23b3			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
23b3				;inc hl ; skip current double quote 
23b3 7e				ld a,(hl) 
23b4 23				inc hl 
23b5 fe 22			cp '"' 
23b7 28 e3			jr z, .ptoken2 
23b9 fe 7f			cp FORTH_END_BUFFER 
23bb 28 0b			jr z, .ptokendone2 
23bd			;	cp 0 
23bd b7				or a 
23be 28 08			jr z, .ptokendone2 
23c0 fe 20			cp ' ' 
23c2 28 02			jr z, .ptmp2 
23c4 18 ed			jr .ptokenstr2 
23c6			 
23c6			.ptmp2:	; we have a space so change to zero term for dict match later 
23c6				;dec hl 
23c6				;ld a,"-"	; TODO remove this when working 
23c6				;ld (hl), a 
23c6				;inc hl 
23c6 18 eb			jr .ptokenstr2 
23c8			 
23c8			.ptokendone2: 
23c8				;inc hl 
23c8			;	ld a, FORTH_END_BUFFER 
23c8 36 7f			ld (hl),FORTH_END_BUFFER 
23ca			;	inc hl 
23ca			;	ld a, '!' 
23ca			;	ld (hl),a 
23ca			 
23ca 2a f4 f3			ld hl,(os_tok_ptr) 
23cd			         
23cd			if DEBUG_FORTH_TOK 
23cd						DMARK "TK1" 
23cd				CALLMONITOR 
23cd			endif 
23cd			 
23cd				; push exec string to top of return stack 
23cd				FORTH_RSP_NEXT 
23cd cd 17 1f			call macro_forth_rsp_next 
23d0				endm 
# End of macro FORTH_RSP_NEXT
23d0 c9				ret 
23d1			 
23d1			; 
23d1			;	; malloc size + buffer pointer + if is loop flag 
23d1			;	ld hl,(os_tok_len) 		 ; get string length 
23d1			; 
23d1			;	ld a,l 
23d1			; 
23d1			;	cp 0			; we dont want to use a null string 
23d1			;	ret z 
23d1			; 
23d1			;;	add 3    ; prefix malloc with buffer for current word ptr 
23d1			; 
23d1			;	add 5     ; TODO when certain not over writing memory remove 
23d1			; 
23d1			;		 
23d1			; 
23d1			;if DEBUG_FORTH_TOK 
23d1			;			DMARK "TKE" 
23d1			;	CALLMONITOR 
23d1			;endif 
23d1			; 
23d1			;	ld l,a 
23d1			;	ld h,0 
23d1			;;	push hl   ; save required space for the copy later 
23d1			;	call malloc 
23d1			;if DEBUG_FORTH_TOK 
23d1			;			DMARK "TKM" 
23d1			;	CALLMONITOR 
23d1			;endif 
23d1			;	if DEBUG_FORTH_MALLOC_GUARD 
23d1			;		push af 
23d1			;		call ishlzero 
23d1			;;		ld a, l 
23d1			;;		add h 
23d1			;;		cp 0 
23d1			;		pop af 
23d1			;		 
23d1			;		call z,malloc_error 
23d1			;	endif 
23d1			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
23d1			; 
23d1			; 
23d1			;if DEBUG_FORTH_TOK 
23d1			;			DMARK "TKR" 
23d1			;	CALLMONITOR 
23d1			;endif 
23d1			; 
23d1			;	FORTH_RSP_NEXT 
23d1			; 
23d1			;	;inc hl	 ; go past current buffer pointer 
23d1			;	;inc hl 
23d1			;	;inc hl   ; and past if loop flag 
23d1			;		; TODO Need to set flag  
23d1			; 
23d1			;	 
23d1			;	 
23d1			;	ex de,hl	; malloc is dest 
23d1			;	ld hl, (os_tok_len) 
23d1			;;	pop bc 
23d1			;	ld c, l                
23d1			;	ld b,0 
23d1			;	ld hl, (os_tok_ptr) 
23d1			; 
23d1			;if DEBUG_FORTH_TOK 
23d1			;			DMARK "TKT" 
23d1			;	CALLMONITOR 
23d1			;endif 
23d1			; 
23d1			;	; do str cpy 
23d1			; 
23d1			;	ldir      ; copy byte in hl to de 
23d1			; 
23d1			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
23d1			; 
23d1			;if DEBUG_FORTH_TOK 
23d1			; 
23d1			;			DMARK "TKY" 
23d1			;	CALLMONITOR 
23d1			;endif 
23d1			;	;ld a,0 
23d1			;	;ld a,FORTH_END_BUFFER 
23d1			;	ex de, hl 
23d1			;	;dec hl			 ; go back over the space delim at the end of word 
23d1			;	;ld (hl),a 
23d1			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
23d1			;	ld a,FORTH_END_BUFFER 
23d1			;	ld (hl),a 
23d1			;	inc hl 
23d1			;	ld a,FORTH_END_BUFFER 
23d1			;	ld (hl),a 
23d1			; 
23d1			;	; init the malloc area data 
23d1			;	; set pc for in current area 
23d1			;	;ld hl, (os_tok_malloc) 
23d1			;	;inc hl 
23d1			;	;inc hl 
23d1			;	;inc hl 
23d1			;	;ex de,hl 
23d1			;	;ld hl, (os_tok_malloc) 
23d1			;	;ld (hl),e 
23d1			;	;inc hl 
23d1			;	;ld (hl),d 
23d1			; 
23d1			; 
23d1			;	ld hl,(os_tok_malloc) 
23d1			;if DEBUG_FORTH_PARSE_KEY 
23d1			;			DMARK "TKU" 
23d1			;	CALLMONITOR 
23d1			;endif 
23d1			; 
23d1			;	ret 
23d1			 
23d1			forthexec: 
23d1			 
23d1			; line exec: 
23d1			; forth parser 
23d1			 
23d1			; 
23d1			;       get current exec line on rsp 
23d1			 
23d1				FORTH_RSP_TOS 
23d1 cd 2e 1f			call macro_forth_rsp_tos 
23d4				endm 
# End of macro FORTH_RSP_TOS
23d4			 
23d4			;       restore current pc - hl points to malloc of data 
23d4			 
23d4				;ld e, (hl) 
23d4				;inc hl 
23d4				;ld d, (hl) 
23d4				;ex de,hl 
23d4			 
23d4			 
23d4			exec1: 
23d4 22 f4 f3			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
23d7			 
23d7				; copy our PC to working vars  
23d7 22 72 f9			ld (cli_ptr), hl                    ; here 
23da 22 70 f9			ld (cli_origptr), hl                ; here 
23dd			 
23dd 7e				ld a,(hl)                           ; here make hl be the ram ptr 
23de fe 7f			cp FORTH_END_BUFFER 
23e0 c8				ret z 
23e1			 
23e1				; skip any nulls 
23e1			 
23e1			;	cp 0 
23e1 b7				or a 
23e2 20 03			jr nz, .execword 
23e4 23				inc hl 
23e5 18 ed			jr exec1 
23e7			 
23e7			 
23e7			.execword: 
23e7			 
23e7			 
23e7			 
23e7			if DEBUG_FORTH_PARSE_EXEC 
23e7						DMARK "KYQ" 
23e7				CALLMONITOR 
23e7			endif 
23e7			;       while at start of word: 
23e7			; get start of dict (in user area first) 
23e7			 
23e7 21 00 80		ld hl, baseram 
23ea			;ld hl, sysdict 
23ea 22 74 f9		ld (cli_nextword),hl                            ; here do we need to do this? 
23ed			;           match word at pc 
23ed			;           exec word 
23ed			;           or push to dsp 
23ed			;           forward to next token 
23ed			;           if line term pop rsp and exit 
23ed			;        
23ed			 
23ed			if DEBUG_FORTH_PARSE_EXEC 
23ed						DMARK "KYq" 
23ed				CALLMONITOR 
23ed			endif 
23ed			 
23ed			; 
23ed			; word comp 
23ed			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
23ed			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
23ed			;    move to start of word  
23ed			;    compare word to cli_token 
23ed			 
23ed			.execpnword:	; HL at start of a word in the dictionary to check 
23ed			 
23ed 2a 74 f9			ld hl,(cli_nextword)                  ; here remove the need to store???? 
23f0			 
23f0 cd 85 24			call forth_tok_next 
23f3			; tok next end here 
23f3 22 74 f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
23f6 eb				ex de, hl 
23f7			 
23f7			 
23f7				; save the pointer of the current token - 1 to check against 
23f7				 
23f7 22 78 f9			ld (cli_token), hl   
23fa				; TODO maybe remove below save if no debug 
23fa				; save token string ptr for any debug later 
23fa 23				inc hl  
23fb 22 7a f9			ld (cli_origtoken), hl 
23fe 2b				dec hl 
23ff				; save pointer to the start of the next dictionay word 
23ff 7e				ld a,(hl)   ; get string length 
2400 47				ld b,a 
2401			.execpnwordinc:  
2401 23				inc hl 
2402 10 fd			djnz .execpnwordinc 
2404 22 76 f9			ld (cli_execword), hl      ; save start of this words code 
2407			 
2407				; now check the word token against the string being parsed 
2407			 
2407 2a 78 f9			ld hl,(cli_token) 
240a 23				inc hl     ; skip string length (use zero term instead to end) 
240b				;ld (cli_token), hl 
240b			 
240b			.execpnchar:    ; compare char between token and string to parse 
240b			 
240b			 
240b				;ld hl, (cli_token)     ; the dict word  
240b ed 5b 72 f9		ld de, (cli_ptr)     ; cli to parse 
240f			 
240f			 
240f			.execpncharl:    ; compare char between token and string to parse (loop) 
240f			 
240f 1a				ld a,(de) 
2410 cd fb 12			call toUpper 		; make sure the input string matches case 
2413 be				cp (hl) 
2414			 
2414 c2 2c 24			jp nz, .execpnskipword	 ; no match so move to next word 
2417				 
2417			;    if same 
2417			;       scan for string terms 0 for token and 32 for input 
2417 46				ld b,(hl) 
2418 80				add b			 
2419 23				inc hl 
241a 13				inc de 
241b b7				or a 
241c			;	cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
241c							; TODO need to make sure last word in zero term string is accounted for 
241c 20 f1			jr nz, .execpncharl 		 ; not at end of strings yet 
241e			 
241e			 
241e				; at end of both strings so both are exact match 
241e			 
241e			;       skip ptr for next word 
241e			 
241e 2a 72 f9			ld hl,(cli_ptr) 	; at input string term 
2421 23				inc hl			 ; at next char 
2422 22 72 f9			ld (cli_ptr), hl     ; save for next round of the parser 
2425 22 70 f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2428				 
2428				 
2428			 
2428			 
2428			 
2428			;       exec code block 
2428			if DEBUG_FORTH_JP 
2428				call clear_display 
2428				call update_display 
2428				call delay1s 
2428				ld hl, (cli_execword)     ; save for next check if no match on this word 
2428				ld a,h 
2428				ld hl, os_word_scratch 
2428				call hexout 
2428				ld hl, (cli_execword)     ; save for next check if no match on this word 
2428				ld a,l 
2428				ld hl, os_word_scratch+2 
2428				call hexout 
2428				ld hl, os_word_scratch+4 
2428			;	ld a,0 
2428				ld (hl),0 
2428				ld de,os_word_scratch 
2428				call str_at_display 
2428					ld a, display_row_2 
2428					call str_at_display 
2428				ld de, (cli_origtoken) 
2428				ld a, display_row_1+10 
2428					call str_at_display 
2428			 
2428				ld a,display_row_1 
2428				ld de, .foundword 
2428				ld a, display_row_3 
2428				call str_at_display 
2428				call update_display 
2428				call delay1s 
2428				call delay1s 
2428				call delay1s 
2428			endif 
2428			 
2428			if DEBUG_FORTH_PARSE_EXEC 
2428						DMARK "KYj" 
2428			endif 
2428				; TODO save the word pointer in this exec 
2428			 
2428 2a 76 f9			ld hl,(cli_execword) 
242b e9				jp (hl) 
242c			 
242c			 
242c			;    if not same 
242c			;	scan for zero term 
242c			;	get ptr for next word 
242c			;	goto word comp 
242c			 
242c			.execpnskipword:	; get pointer to next word 
242c 2a 74 f9			ld hl,(cli_nextword) 
242f			 
242f 7e				ld a,(hl) 
2430 fe 00			cp WORD_SYS_END 
2432			;	cp 0 
2432 28 09			jr z, .execendofdict			 ; at end of words 
2434			 
2434			if DEBUG_FORTH_PARSE_EXEC 
2434						DMARK "KY4" 
2434			endif 
2434			if DEBUG_FORTH_PARSE_EXEC 
2434			 
2434				; see if disabled 
2434			 
2434			;	ld a, (os_view_disable) 
2434			;	cp '*' 
2434				ld a,(debug_vector) 
2434				cp $c9   ; RET 
2434				jr z, .noskip 
2434			 
2434			 
2434				ld de, .nowordfound 
2434				ld a, display_row_3 
2434				call str_at_display 
2434				call update_display 
2434				ld a, 100 
2434				call aDelayInMS 
2434				 
2434				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2434					call delay250ms 
2434				endif 
2434			.noskip:  
2434			 
2434			endif	 
2434			 
2434 2a 70 f9			ld hl,(cli_origptr) 
2437 22 72 f9			ld (cli_ptr),hl 
243a			 
243a			if DEBUG_FORTH_PARSE_EXEC 
243a						DMARK "KY5" 
243a			endif 
243a c3 ed 23			jp .execpnword			; else go to next word 
243d			 
243d			.execendofdict:  
243d			 
243d			if DEBUG_FORTH_PARSE_EXEC 
243d						DMARK "KYe" 
243d			endif 
243d			if DEBUG_FORTH_PARSE_EXEC 
243d				; see if disabled 
243d			 
243d			;	ld a, (os_view_disable) 
243d			;	cp '*' 
243d				ld a,(debug_vector) 
243d				cp $c9   ; ret 
243d				jr z, .ispskip 
243d			 
243d				call clear_display 
243d				call update_display 
243d				call delay1s 
243d				ld de, (cli_origptr) 
243d				ld a, display_row_1 
243d				call str_at_display 
243d				 
243d				ld de, .enddict 
243d				ld a, display_row_3 
243d				call str_at_display 
243d				call update_display 
243d				ld a, 100 
243d				call aDelayInMS 
243d				if DEBUG_FORTH_PARSE_EXEC_SLOW 
243d				call delay1s 
243d				call delay1s 
243d				call delay1s 
243d				endif 
243d			.ispskip:  
243d				 
243d			endif	 
243d			 
243d			 
243d			 
243d				; if the word is not a keyword then must be a literal so push it to stack 
243d			 
243d			; push token to stack to end of word 
243d			 
243d				STACKFRAME ON $1efe $2f9f 
243d				if DEBUG_STACK_IMB 
243d					if ON 
243d						exx 
243d						ld de, $1efe 
243d						ld a, d 
243d						ld hl, curframe 
243d						call hexout 
243d						ld a, e 
243d						ld hl, curframe+2 
243d						call hexout 
243d						ld hl, $1efe 
243d						push hl 
243d						ld hl, $2f9f 
243d						push hl 
243d						exx 
243d					endif 
243d				endif 
243d			endm 
# End of macro STACKFRAME
243d			 
243d 2a f4 f3		ld hl,(os_tok_ptr) 
2440 cd d2 20		call forth_apush 
2443			 
2443				STACKFRAMECHK ON $1efe $2f9f 
2443				if DEBUG_STACK_IMB 
2443					if ON 
2443						exx 
2443						ld hl, $2f9f 
2443						pop de   ; $2f9f 
2443						call cmp16 
2443						jr nz, .spnosame 
2443						ld hl, $1efe 
2443						pop de   ; $1efe 
2443						call cmp16 
2443						jr z, .spfrsame 
2443						.spnosame: call showsperror 
2443						.spfrsame: nop 
2443						exx 
2443					endif 
2443				endif 
2443			endm 
# End of macro STACKFRAMECHK
2443			 
2443			execnext: 
2443			 
2443			if DEBUG_FORTH_PARSE_EXEC 
2443						DMARK "KY>" 
2443			endif 
2443			; move past token to next word 
2443			 
2443 2a f4 f3		ld hl, (os_tok_ptr) 
2446 3e 00		ld a, 0 
2448 01 ff 00		ld bc, 255     ; input buffer size 
244b ed b1		cpir 
244d			 
244d			if DEBUG_FORTH_PARSE_EXEC 
244d						DMARK "KY!" 
244d				CALLMONITOR 
244d			endif	 
244d			; TODO this might place hl on the null, so will need to forward on??? 
244d			;inc hl   ; see if this gets onto the next item 
244d			 
244d			 
244d			; TODO pass a pointer to the buffer to push 
244d			; TODO call function to push 
244d			 
244d			; look for end of input 
244d			 
244d			;inc hl 
244d			;ld a,(hl) 
244d			;cp FORTH_END_BUFFER 
244d			;ret z 
244d			 
244d			 
244d c3 d4 23		jp exec1 
2450			 
2450			 
2450			 
2450			 
2450			 
2450			 
2450			 
2450			 
2450			 
2450			findnexttok: 
2450			 
2450				; hl is pointer to move 
2450				; de is the token to locate 
2450			 
2450					if DEBUG_FORTH 
2450						DMARK "NTK" 
2450						CALLMONITOR 
2450					endif 
2450 d5				push de 
2451			 
2451			.fnt1:	 
2451				; find first char of token to locate 
2451			 
2451 1a				ld a, (de) 
2452 4f				ld c,a 
2453 7e				ld a,(hl) 
2454 cd fb 12			call toUpper 
2457					if DEBUG_FORTH 
2457						DMARK "NT1" 
2457						CALLMONITOR 
2457					endif 
2457 b9				cp c 
2458			 
2458 28 03			jr z, .fnt2cmpmorefirst	 
245a			 
245a				; first char not found move to next char 
245a			 
245a 23				inc hl 
245b 18 f4			jr .fnt1 
245d			 
245d			.fnt2cmpmorefirst:	 
245d				; first char of token found.  
245d			 
245d e5				push hl     ; save start of token just in case it is the right one 
245e d9				exx 
245f e1				pop hl        ; save it to hl' 
2460 d9				exx 
2461			 
2461			 
2461			.fnt2cmpmore:	 
2461				; compare the rest 
2461				 
2461 23				inc hl 
2462 13				inc de 
2463				 
2463 1a				ld a, (de) 
2464 4f				ld c,a 
2465 7e				ld a,(hl) 
2466 cd fb 12			call toUpper 
2469			 
2469					if DEBUG_FORTH 
2469						DMARK "NT2" 
2469						CALLMONITOR 
2469					endif 
2469				; c has the token to find char 
2469				; a has the mem to scan char 
2469			 
2469 b9				cp c 
246a 28 04			jr z,.fntmatch1 
246c			 
246c				; they are not the same 
246c			 
246c					if DEBUG_FORTH 
246c						DMARK "NT3" 
246c						CALLMONITOR 
246c					endif 
246c d1				pop de	; reset de token to look for 
246d d5				push de 
246e 18 e1			jr .fnt1 
2470				 
2470			.fntmatch1: 
2470			 
2470				; is the same char a null which means we might have a full hit? 
2470					if DEBUG_FORTH 
2470						DMARK "NT4" 
2470						CALLMONITOR 
2470					endif 
2470			 
2470			;	cp 0 
2470 b7				or a 
2471 28 0b			jr z, .fntmatchyes 
2473			 
2473				; are we at the end of the token to find? 
2473			 
2473					if DEBUG_FORTH 
2473						DMARK "NT5" 
2473						CALLMONITOR 
2473					endif 
2473 3e 00			ld a, 0 
2475 b9				cp c 
2476			 
2476 c2 61 24			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
2479			 
2479					if DEBUG_FORTH 
2479						DMARK "NT6" 
2479						CALLMONITOR 
2479					endif 
2479				; token to find is exhusted but no match to stream 
2479			 
2479				; restore tok pointer and continue on 
2479 d1				pop de 
247a d5				push de 
247b c3 51 24			jp .fnt1 
247e			 
247e			 
247e			.fntmatchyes: 
247e			 
247e				; hl now contains the end of the found token 
247e			 
247e				; get rid of saved token pointer to find 
247e			 
247e d1				pop de 
247f			 
247f					if DEBUG_FORTH 
247f						DMARK "NT9" 
247f						CALLMONITOR 
247f					endif 
247f			 
247f				; hl will be on the null term so forward on 
247f			 
247f				; get back the saved start of the token 
247f			 
247f d9				exx 
2480 e5				push hl     ; save start of token just in case it is the right one 
2481 d9				exx 
2482 e1				pop hl        ; save it to hl 
2483			 
2483 c9				ret 
2484			 
2484			 
2484			; LIST needs to find a specific token   
2484			; FORGET needs to find a spefici token 
2484			 
2484			; SAVE needs to find all tokens by flag 
2484			; WORDS just needs to scan through all  by flag 
2484			; UWORDS needs to scan through all by flag 
2484			 
2484			 
2484			; given hl as pointer to start of dict look up string 
2484			; return hl as pointer to start of word block 
2484			; or 0 if not found 
2484			 
2484			forth_find_tok: 
2484 c9				ret 
2485			 
2485			; given hl as pointer to dict structure 
2485			; move to the next dict block structure 
2485			 
2485			forth_tok_next: 
2485				; hl now points to the address of the next word pointer  
2485				; TODO skip compiled symbol for now 
2485			;	push de 
2485 23				inc hl 
2486 5e				ld e, (hl) 
2487 23				inc hl 
2488 56				ld d, (hl) 
2489 23				inc hl 
248a			 
248a eb				ex de,hl 
248b			if DEBUG_FORTH_PARSE_NEXTWORD 
248b				push bc 
248b				ld bc, (cli_nextword) 
248b						DMARK "NXW" 
248b				CALLMONITOR 
248b				pop bc 
248b			endif 
248b			;	pop de	 
248b c9				ret 
248c			 
248c			 
248c			 
248c			; eof 
# End of file forth_parserv6.asm
248c				include "forth_wordsv4.asm" 
248c			 
248c			; the core word dictionary v4 
248c			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
248c			 
248c			; this is a linked list for each of the system words used 
248c			; user defined words will follow the same format but will be in ram 
248c			 
248c			 
248c			; 
248c			; 
248c			; define linked list: 
248c			; 
248c			; 1. compiled byte op code 
248c			; 2. len of text word 
248c			; 3. text word 
248c			; 4. ptr to next dictionary word 
248c			; 5. asm, calls etc for the word 
248c			; 
248c			;  if 1 == 0 then last word in dict  
248c			;   
248c			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
248c			;  
248c			;  
248c			; create basic standard set of words 
248c			; 
248c			;  
248c			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
248c			; 2DUP 2DROP 2SWAP  
248c			; @ C@ - get byte  
248c			; ! C! - store byte 
248c			; 0< true if less than zero 
248c			; 0= true if zero 
248c			; < >  
248c			; = true if same 
248c			; variables 
248c			 
248c			 
248c			; Hardware specific words I may need 
248c			; 
248c			; IN OUT  
248c			; calls to key util functions 
248c			; calls to hardward abstraction stuff 
248c			; easy control of frame buffers and lcd i/o 
248c			; keyboard  
248c			 
248c			 
248c			;DICT: macro 
248c			; op_code, len, word, next 
248c			;    word: 
248c			;    db op_code 
248c			;    ds word zero term 
248c			;    dw next 
248c			;    endm 
248c			 
248c			 
248c			 
248c			 
248c			; op code 1 is a flag for user define words which are to be handled differently 
248c			 
248c			 
248c			; 
248c			; 
248c			;    TODO on entry to a word this should be the expected environment 
248c			;    hl - tos value if number then held, if string this is the ptr 
248c			;    de -  
248c			 
248c			 
248c			; opcode ranges 
248c			; 0 - end of word dict 
248c			; 255 - user define words 
248c			 
248c			sysdict: 
248c			include "forth_opcodes.asm" 
248c			; op codes for forth keywords 
248c			 
248c			; Changing use of opcodes to flag is the word exists in compiled form or not.  
248c			; This provides a means to compile uwords if required for higher performance 
248c			; by avoiding the use of the keyword parser and just jumping directly to the code 
248c			; Actually there is already a flag for if the code exists as binary thinking about it... 
248c			 
248c			 
248c			 
248c			 
248c			 
248c			; free to use code 0  
248c				OPCODE_HEAP: equ  1 
248c				OPCODE_EXEC: equ 2 
248c				OPCODE_DUP: equ 3 
248c				OPCODE_SWAP: equ 4 
248c				OPCODE_COLN: equ 5 
248c				OPCODE_SCOLN: equ 6 
248c				OPCODE_DROP: equ 7 
248c				OPCODE_DUP2: equ 8 
248c				OPCODE_DROP2: equ 9 
248c				OPCODE_SWAP2: equ 10 
248c				OPCODE_AT: equ 11 
248c				OPCODE_CAT: equ 12 
248c				OPCODE_BANG: equ 13 
248c				OPCODE_CBANG: equ 14 
248c				OPCODE_SCALL: equ 15 
248c				OPCODE_DEPTH: equ 16 
248c				OPCODE_OVER: equ 17 
248c				OPCODE_PAUSE: equ 18 
248c				OPCODE_PAUSES: equ 19 
248c				OPCODE_ROT: equ 20 
248c			;free to reuse	OPCODE_WORDS: equ 21 
248c			        OPCODE_NOT: equ 21 
248c				OPCODE_UWORDS: equ 22 
248c				OPCODE_BP: equ 23 
248c				OPCODE_MONITOR: equ 24  
248c				OPCODE_MALLOC: equ 25 
248c				OPCODE_FREE: equ 26 
248c				OPCODE_LIST: equ 27 
248c				OPCODE_FORGET: equ 28 
248c				OPCODE_NOP: equ 29 
248c				OPCODE_COMO: equ 30 
248c				OPCODE_COMC: equ 31 
248c			;free to reuse	OPCODE_ENDCORE: equ 32 
248c				OPCODE_AFTERSOUND: equ 33 
248c				OPCODE_GP2: equ 34 
248c				OPCODE_GP3: equ 35 
248c				OPCODE_GP4: equ 36 
248c				OPCODE_SIN: equ 37 
248c				OPCODE_SOUT: equ 38 
248c				OPCODE_SPIO: equ 39 
248c				OPCODE_SPICEH: equ 40 
248c				OPCODE_SPIOb: equ 41 
248c				OPCODE_SPII: equ 42 
248c				OPCODE_SESEL: equ 43 
248c				OPCODE_CARTDEV: equ 44 
248c			; free to reuse	OPCODE_ENDDEVICE: equ 45 
248c				OPCODE_FB: equ 46 
248c				OPCODE_EMIT: equ 47 
248c				OPCODE_DOTH: equ 48 
248c				OPCODE_DOTF: equ 49 
248c				OPCODE_DOT: equ 50 
248c				OPCODE_CLS: equ 51 
248c				OPCODE_DRAW: equ 52 
248c				OPCODE_DUMP: equ 53 
248c				OPCODE_CDUMP: equ 54 
248c				OPCODE_DAT: equ 55 
248c				OPCODE_HOME: equ 56 
248c				OPCODE_SPACE: equ 57 
248c				OPCODE_SPACES: equ 58 
248c				OPCODE_SCROLL: equ 59 
248c				OPCODE_ATQ: equ 60 
248c				OPCODE_AUTODSP: equ 61 
248c				OPCODE_MENU: equ 62 
248c			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
248c				OPCODE_THEN: equ 64 
248c				OPCODE_ELSE: equ 65 
248c				OPCODE_DO: equ 66 
248c				OPCODE_LOOP: equ 67 
248c				OPCODE_I: equ 68 
248c				OPCODE_DLOOP: equ 69  
248c				OPCODE_REPEAT: equ 70  
248c				OPCODE_UNTIL: equ 71 
248c				OPCODE_ENDFLOW: equ 72 
248c				OPCODE_WAITK: equ 73 
248c				OPCODE_ACCEPT: equ 74 
248c				OPCODE_EDIT: equ 75 
248c			;free to reuse	OPCODE_ENDKEY: equ 76 
248c				OPCODE_LZERO: equ 77 
248c				OPCODE_TZERO: equ 78 
248c				OPCODE_LESS: equ 79 
248c				OPCODE_GT: equ 80 
248c				OPCODE_EQUAL: equ 81  
248c			;free to reuse	OPCODE_ENDLOGIC: equ 82 
248c				OPCODE_NEG: equ 83 
248c				OPCODE_DIV: equ 84 
248c				OPCODE_MUL: equ 85 
248c				OPCODE_MIN: equ 86 
248c				OPCODE_MAX: equ 87 
248c				OPCODE_RND16: equ 88 
248c				OPCODE_RND8: equ 89 
248c				OPCODE_RND: equ 90 
248c			;free to reuse	OPCODE_ENDMATHS: equ 91  
248c				OPCODE_BYNAME: equ 92 
248c				OPCODE_DIR: equ 93 
248c				OPCODE_SAVE: equ 94 
248c				OPCODE_LOAD: equ 95 
248c				OPCODE_BSAVE: equ 96 
248c				OPCODE_BLOAD: equ 97 
248c				OPCODE_SEO: equ 98  
248c				OPCODE_SEI: equ 99 
248c				OPCODE_SFREE: equ 100 
248c				OPCODE_SIZE: equ 101 
248c				OPCODE_CREATE: equ 102 
248c				OPCODE_APPEND: equ 103 
248c				OPCODE_SDEL: equ 104 
248c				OPCODE_OPEN: equ 105 
248c				OPCODE_READ: equ 106 
248c				OPCODE_EOF: equ 106 
248c				OPCODE_FORMAT: equ 107 
248c				OPCODE_LABEL: equ 108 
248c				OPCODE_LABELS: equ 109 
248c			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
248c				OPCODE_UPPER: equ 111 
248c				OPCODE_LOWER: equ 112 
248c				OPCODE_SUBSTR: equ 113 
248c				OPCODE_LEFT: equ 114 
248c				OPCODE_RIGHT: equ 115 
248c				OPCODE_STR2NUM: equ 116 
248c				OPCODE_NUM2STR: equ 117 
248c				OPCODE_CONCAT: equ 118 
248c				OPCODE_FIND: equ 119 
248c				OPCODE_LEN: equ 120 
248c				OPCODE_CHAR: equ 121 
248c			; free to reuse	OPCODE_STRLEN: equ 122 
248c			; free to reuse	OPCODE_ENDSTR: equ 123 
248c				OPCODE_V0S: equ 124 
248c				OPCODE_V0Q: equ 125 
248c				OPCODE_V1S: equ 126 
248c				OPCODE_V1Q: equ 127 
248c				OPCODE_V2S: equ 128 
248c				OPCODE_V2Q: equ 129 
248c				OPCODE_V3S: equ 130 
248c				OPCODE_V3Q: equ 131 
248c			;free to reuse	OPCODE_END: equ 132 
248c				OPCODE_ZDUP: equ 133 
248c			 
248c			; eof 
# End of file forth_opcodes.asm
248c			 
248c			include "forth_words_core.asm" 
248c			 
248c			; | ## Core Words 
248c			 
248c			;if MALLOC_4 
248c			 
248c			.HEAP: 
248c			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
248c 15				db WORD_SYS_CORE+OPCODE_HEAP             
248d ce 24			dw .EXEC            
248f 05				db 4 + 1 
2490 .. 00			db "HEAP",0              
2495				endm 
# End of macro CWHEAD
2495			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2495			; | | u1 - Current number of bytes in the heap 
2495			; | | u2 - Remaining bytes left on the heap 
2495			; | |  
2495			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2495			 
2495			 
2495				if DEBUG_FORTH_WORDS_KEY 
2495					DMARK "HEP" 
2495 f5				push af  
2496 3a aa 24			ld a, (.dmark)  
2499 32 9d fd			ld (debug_mark),a  
249c 3a ab 24			ld a, (.dmark+1)  
249f 32 9e fd			ld (debug_mark+1),a  
24a2 3a ac 24			ld a, (.dmark+2)  
24a5 32 9f fd			ld (debug_mark+2),a  
24a8 18 03			jr .pastdmark  
24aa ..			.dmark: db "HEP"  
24ad f1			.pastdmark: pop af  
24ae			endm  
# End of macro DMARK
24ae					CALLMONITOR 
24ae cd aa fd			call debug_vector  
24b1				endm  
# End of macro CALLMONITOR
24b1				endif 
24b1 2a 0a 80			ld hl, (free_list )      
24b4 11 0e 80			ld de, heap_start 
24b7			 
24b7 ed 52			sbc hl, de  
24b9			 
24b9 cd 70 1f			call forth_push_numhl 
24bc			 
24bc			 
24bc ed 5b 0a 80		ld de, (free_list )      
24c0 21 ce f0			ld hl, heap_end 
24c3			 
24c3 ed 52			sbc hl, de 
24c5			 
24c5 cd 70 1f			call forth_push_numhl 
24c8				 
24c8			 
24c8				 
24c8			 
24c8			 
24c8			 
24c8				NEXTW 
24c8 cd a7 fd			call parse_vector 
24cb c3 53 23			jp macro_next 
24ce				endm 
# End of macro NEXTW
24ce			;endif 
24ce			 
24ce			.EXEC: 
24ce			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
24ce			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
24ce			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
24ce			;; > > 
24ce			;; > >   
24ce			;	STACKFRAME OFF $5efe $5f9f 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS_KEY 
24ce			;			DMARK "EXE" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			; 
24ce			;	FORTH_DSP_VALUEHL 
24ce			; 
24ce			;	FORTH_DSP_POP 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX1" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;;	ld e,(hl) 
24ce			;;	inc hl 
24ce			;;	ld d,(hl) 
24ce			;;	ex de,hl 
24ce			; 
24ce			;;		if DEBUG_FORTH_WORDS 
24ce			;;			DMARK "EX2" 
24ce			;;			CALLMONITOR 
24ce			;;		endif 
24ce			;	push hl 
24ce			; 
24ce			;	;ld a, 0 
24ce			;	;ld a, FORTH_END_BUFFER 
24ce			;	call strlenz 
24ce			;	inc hl   ; include zero term to copy 
24ce			;	inc hl   ; include term 
24ce			;	inc hl   ; include term 
24ce			;	ld b,0 
24ce			;	ld c,l 
24ce			;	pop hl 
24ce			;	ld de, execscratch 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX3" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	ldir 
24ce			; 
24ce			; 
24ce			;	ld hl, execscratch 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EXe" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			; 
24ce			;	call forthparse 
24ce			;	call forthexec 
24ce			;;	call forthexec_cleanup 
24ce			;;	call forthparse 
24ce			;;	call forthexec 
24ce			; 
24ce			;	STACKFRAMECHK OFF $5efe $5f9f 
24ce			; 
24ce			;	; an immediate word so no need to process any more words 
24ce			;	ret 
24ce			;	NEXTW 
24ce			 
24ce			; dead code - old version  
24ce			;	FORTH_RSP_NEXT 
24ce			 
24ce			;  
24ce			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
24ce			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
24ce			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
24ce			;	push hl 
24ce			;	push de 
24ce			;	push bc 
24ce			; 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS_KEY 
24ce			;			DMARK "EXR" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			; 
24ce			; 
24ce			; 
24ce			;	;v5 FORTH_DSP_VALUE 
24ce			;	FORTH_DSP_VALUEHL 
24ce			; 
24ce			;	; TODO do string type checks 
24ce			; 
24ce			;;v5	inc hl   ; skip type 
24ce			; 
24ce			;	push hl  ; source code  
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX1" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	ld a, 0 
24ce			;	call strlent 
24ce			; 
24ce			;	inc hl 
24ce			;	inc hl 
24ce			;	inc hl 
24ce			;	inc hl 
24ce			; 
24ce			;	push hl    ; size 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX2" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	call malloc 
24ce			; 
24ce			;	ex de, hl    ; de now contains malloc area 
24ce			;	pop bc   	; get byte count 
24ce			;	pop hl      ; get string to copy 
24ce			; 
24ce			;	push de     ; save malloc for free later 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX3" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	ldir       ; duplicate string 
24ce			; 
24ce			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
24ce			;	 
24ce			;	; TODO fix the parse would be better than this...  
24ce			;	ex de, hl 
24ce			;	dec hl 
24ce			;	ld a, 0 
24ce			;	ld (hl), a 
24ce			;	dec hl 
24ce			;	ld a, ' ' 
24ce			;	ld (hl), a 
24ce			;	dec hl 
24ce			;	ld (hl), a 
24ce			; 
24ce			;	dec hl 
24ce			;	ld (hl), a 
24ce			; 
24ce			; 
24ce			;	FORTH_DSP_POP  
24ce			; 
24ce			;	pop hl     
24ce			;	push hl    ; save malloc area 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX4" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			; 
24ce			;	call forthparse 
24ce			;	call forthexec 
24ce			;	 
24ce			;	pop hl 
24ce			;	if DEBUG_FORTH_WORDS 
24ce			;		DMARK "EX5" 
24ce			;		CALLMONITOR 
24ce			;	endif 
24ce			; 
24ce			;	if FORTH_ENABLE_FREE 
24ce			;	call free 
24ce			;	endif 
24ce			; 
24ce			;	if DEBUG_FORTH_WORDS 
24ce			;		DMARK "EX6" 
24ce			;		CALLMONITOR 
24ce			;	endif 
24ce			; 
24ce			;	pop bc 
24ce			;	pop de 
24ce			;	pop hl 
24ce			;;	FORTH_RSP_POP	  
24ce			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
24ce			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
24ce			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
24ce			; 
24ce			;	if DEBUG_FORTH_WORDS 
24ce			;		DMARK "EX7" 
24ce			;		CALLMONITOR 
24ce			;	endif 
24ce			;	NEXTW 
24ce			 
24ce			;.STKEXEC: 
24ce			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
24ce			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
24ce			; 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS_KEY 
24ce			;			DMARK "STX" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			; 
24ce			;	FORTH_DSP_VALUEHL 
24ce			; 
24ce			;	ld (store_tmp1), hl    ; count 
24ce			; 
24ce			;	FORTH_DSP_POP 
24ce			;.stkexec1: 
24ce			;	ld hl, (store_tmp1)   ; count 
24ce			;	ld a, 0 
24ce			;	cp l 
24ce			;	ret z 
24ce			; 
24ce			;	dec hl 
24ce			;	ld (store_tmp1), hl    ; count 
24ce			;	 
24ce			;	FORTH_DSP_VALUEHL 
24ce			;	push hl 
24ce			;	 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EXp" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	FORTH_DSP_POP 
24ce			; 
24ce			;	call strlenz 
24ce			;	inc hl   ; include zero term to copy 
24ce			;	inc hl   ; include zero term to copy 
24ce			;	inc hl   ; include zero term to copy 
24ce			;	ld b,0 
24ce			;	ld c,l 
24ce			;	pop hl 
24ce			;	ld de, execscratch 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EX3" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	ldir 
24ce			; 
24ce			; 
24ce			;	ld hl, execscratch 
24ce			; 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EXP" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			; 
24ce			;	call forthparse 
24ce			;	ld hl, execscratch 
24ce			;		if DEBUG_FORTH_WORDS 
24ce			;			DMARK "EXx" 
24ce			;			CALLMONITOR 
24ce			;		endif 
24ce			;	call forthexec 
24ce			; 
24ce			;	jp .stkexec1 
24ce			; 
24ce			;	ret 
24ce			 
24ce			 
24ce			.DUP: 
24ce			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
24ce 17				db WORD_SYS_CORE+OPCODE_DUP             
24cf 4a 25			dw .ZDUP            
24d1 04				db 3 + 1 
24d2 .. 00			db "DUP",0              
24d6				endm 
# End of macro CWHEAD
24d6			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
24d6			; | | >[!NOTE] 
24d6			; | | > If the duplicated item is a string it is safely duplicated 
24d6			 
24d6				if DEBUG_FORTH_WORDS_KEY 
24d6					DMARK "DUP" 
24d6 f5				push af  
24d7 3a eb 24			ld a, (.dmark)  
24da 32 9d fd			ld (debug_mark),a  
24dd 3a ec 24			ld a, (.dmark+1)  
24e0 32 9e fd			ld (debug_mark+1),a  
24e3 3a ed 24			ld a, (.dmark+2)  
24e6 32 9f fd			ld (debug_mark+2),a  
24e9 18 03			jr .pastdmark  
24eb ..			.dmark: db "DUP"  
24ee f1			.pastdmark: pop af  
24ef			endm  
# End of macro DMARK
24ef					CALLMONITOR 
24ef cd aa fd			call debug_vector  
24f2				endm  
# End of macro CALLMONITOR
24f2				endif 
24f2			 
24f2				FORTH_DSP 
24f2 cd 32 21			call macro_forth_dsp 
24f5				endm 
# End of macro FORTH_DSP
24f5			 
24f5 7e				ld a, (HL) 
24f6 fe 01			cp DS_TYPE_STR 
24f8 20 28			jr nz, .dupinum 
24fa			 
24fa				; push another string 
24fa			 
24fa				FORTH_DSP_VALUEHL     		 
24fa cd 6c 21			call macro_dsp_valuehl 
24fd				endm 
# End of macro FORTH_DSP_VALUEHL
24fd			 
24fd			if DEBUG_FORTH_WORDS 
24fd				DMARK "DUs" 
24fd f5				push af  
24fe 3a 12 25			ld a, (.dmark)  
2501 32 9d fd			ld (debug_mark),a  
2504 3a 13 25			ld a, (.dmark+1)  
2507 32 9e fd			ld (debug_mark+1),a  
250a 3a 14 25			ld a, (.dmark+2)  
250d 32 9f fd			ld (debug_mark+2),a  
2510 18 03			jr .pastdmark  
2512 ..			.dmark: db "DUs"  
2515 f1			.pastdmark: pop af  
2516			endm  
# End of macro DMARK
2516				CALLMONITOR 
2516 cd aa fd			call debug_vector  
2519				endm  
# End of macro CALLMONITOR
2519			endif 
2519 cd da 1f			call forth_push_str 
251c			 
251c				NEXTW 
251c cd a7 fd			call parse_vector 
251f c3 53 23			jp macro_next 
2522				endm 
# End of macro NEXTW
2522			 
2522			 
2522			.dupinum: 
2522				 
2522			 
2522			 
2522				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2522 cd 6c 21			call macro_dsp_valuehl 
2525				endm 
# End of macro FORTH_DSP_VALUEHL
2525			 
2525			; TODO add floating point number detection 
2525			 
2525			if DEBUG_FORTH_WORDS 
2525				DMARK "DUi" 
2525 f5				push af  
2526 3a 3a 25			ld a, (.dmark)  
2529 32 9d fd			ld (debug_mark),a  
252c 3a 3b 25			ld a, (.dmark+1)  
252f 32 9e fd			ld (debug_mark+1),a  
2532 3a 3c 25			ld a, (.dmark+2)  
2535 32 9f fd			ld (debug_mark+2),a  
2538 18 03			jr .pastdmark  
253a ..			.dmark: db "DUi"  
253d f1			.pastdmark: pop af  
253e			endm  
# End of macro DMARK
253e				CALLMONITOR 
253e cd aa fd			call debug_vector  
2541				endm  
# End of macro CALLMONITOR
2541			endif 
2541			 
2541 cd 70 1f			call forth_push_numhl 
2544				NEXTW 
2544 cd a7 fd			call parse_vector 
2547 c3 53 23			jp macro_next 
254a				endm 
# End of macro NEXTW
254a			.ZDUP: 
254a			CWHEAD .DMRK OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
254a 99				db WORD_SYS_CORE+OPCODE_ZDUP             
254b 84 25			dw .DMRK            
254d 05				db 4 + 1 
254e .. 00			db "?DUP",0              
2553				endm 
# End of macro CWHEAD
2553			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
2553			; | | >[!NOTE] 
2553			; | | > If the duplicated item is a string it is not safely duplicated and remain as pointer to the origin 
2553			 
2553				if DEBUG_FORTH_WORDS_KEY 
2553					DMARK "qDU" 
2553 f5				push af  
2554 3a 68 25			ld a, (.dmark)  
2557 32 9d fd			ld (debug_mark),a  
255a 3a 69 25			ld a, (.dmark+1)  
255d 32 9e fd			ld (debug_mark+1),a  
2560 3a 6a 25			ld a, (.dmark+2)  
2563 32 9f fd			ld (debug_mark+2),a  
2566 18 03			jr .pastdmark  
2568 ..			.dmark: db "qDU"  
256b f1			.pastdmark: pop af  
256c			endm  
# End of macro DMARK
256c					CALLMONITOR 
256c cd aa fd			call debug_vector  
256f				endm  
# End of macro CALLMONITOR
256f				endif 
256f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
256f cd 6c 21			call macro_dsp_valuehl 
2572				endm 
# End of macro FORTH_DSP_VALUEHL
2572			 
2572 e5				push hl 
2573			 
2573				; is it a zero? 
2573			 
2573 3e 00			ld a, 0 
2575 84				add h 
2576 85				add l 
2577			 
2577 e1				pop hl 
2578			 
2578			;	cp 0 
2578 b7				or a 
2579 28 03			jr z, .dup2orig 
257b			 
257b			 
257b cd 70 1f			call forth_push_numhl 
257e			 
257e			 
257e			; TODO add floating point number detection 
257e			 
257e			.dup2orig: 
257e			 
257e				NEXTW 
257e cd a7 fd			call parse_vector 
2581 c3 53 23			jp macro_next 
2584				endm 
# End of macro NEXTW
2584			.DMRK: 
2584			CWHEAD .LSHIFT OPCODE_ZDUP "DMARK" 5 WORD_FLAG_CODE 
2584 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2585 c4 25			dw .LSHIFT            
2587 06				db 5 + 1 
2588 .. 00			db "DMARK",0              
258e				endm 
# End of macro CWHEAD
258e			; | DMARK ( s --  )  Set the debug marker id to first three chars of s | DONE 
258e			; | | Most useful for tracing your code for errors as you can set various markers to display when MONITOR is called 
258e				if DEBUG_FORTH_WORDS_KEY 
258e					DMARK "DMK" 
258e f5				push af  
258f 3a a3 25			ld a, (.dmark)  
2592 32 9d fd			ld (debug_mark),a  
2595 3a a4 25			ld a, (.dmark+1)  
2598 32 9e fd			ld (debug_mark+1),a  
259b 3a a5 25			ld a, (.dmark+2)  
259e 32 9f fd			ld (debug_mark+2),a  
25a1 18 03			jr .pastdmark  
25a3 ..			.dmark: db "DMK"  
25a6 f1			.pastdmark: pop af  
25a7			endm  
# End of macro DMARK
25a7					CALLMONITOR 
25a7 cd aa fd			call debug_vector  
25aa				endm  
# End of macro CALLMONITOR
25aa				endif 
25aa				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25aa cd 6c 21			call macro_dsp_valuehl 
25ad				endm 
# End of macro FORTH_DSP_VALUEHL
25ad			 
25ad 7e				ld a, (hl) 
25ae 32 9d fd			ld (debug_mark),a 
25b1 23				inc hl 
25b2 7e				ld a, (hl) 
25b3 32 9e fd			ld (debug_mark+1),a 
25b6 23				inc hl 
25b7 7e				ld a, (hl) 
25b8 32 9f fd			ld (debug_mark+2),a 
25bb			 
25bb			 
25bb				FORTH_DSP_POP 
25bb cd 24 22			call macro_forth_dsp_pop 
25be				endm 
# End of macro FORTH_DSP_POP
25be				NEXTW 
25be cd a7 fd			call parse_vector 
25c1 c3 53 23			jp macro_next 
25c4				endm 
# End of macro NEXTW
25c4			.LSHIFT: 
25c4			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
25c4 99				db WORD_SYS_CORE+OPCODE_ZDUP             
25c5 fb 25			dw .RSHIFT            
25c7 07				db 6 + 1 
25c8 .. 00			db "LSHIFT",0              
25cf				endm 
# End of macro CWHEAD
25cf			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
25cf				if DEBUG_FORTH_WORDS_KEY 
25cf					DMARK "LSH" 
25cf f5				push af  
25d0 3a e4 25			ld a, (.dmark)  
25d3 32 9d fd			ld (debug_mark),a  
25d6 3a e5 25			ld a, (.dmark+1)  
25d9 32 9e fd			ld (debug_mark+1),a  
25dc 3a e6 25			ld a, (.dmark+2)  
25df 32 9f fd			ld (debug_mark+2),a  
25e2 18 03			jr .pastdmark  
25e4 ..			.dmark: db "LSH"  
25e7 f1			.pastdmark: pop af  
25e8			endm  
# End of macro DMARK
25e8					CALLMONITOR 
25e8 cd aa fd			call debug_vector  
25eb				endm  
# End of macro CALLMONITOR
25eb				endif 
25eb				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25eb cd 6c 21			call macro_dsp_valuehl 
25ee				endm 
# End of macro FORTH_DSP_VALUEHL
25ee				FORTH_DSP_POP 
25ee cd 24 22			call macro_forth_dsp_pop 
25f1				endm 
# End of macro FORTH_DSP_POP
25f1			 
25f1 29				add hl, hl 
25f2 cd 70 1f			call forth_push_numhl 
25f5				NEXTW 
25f5 cd a7 fd			call parse_vector 
25f8 c3 53 23			jp macro_next 
25fb				endm 
# End of macro NEXTW
25fb			.RSHIFT: 
25fb			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
25fb 99				db WORD_SYS_CORE+OPCODE_ZDUP             
25fc 35 26			dw .SWAP            
25fe 07				db 6 + 1 
25ff .. 00			db "RSHIFT",0              
2606				endm 
# End of macro CWHEAD
2606			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
2606				if DEBUG_FORTH_WORDS_KEY 
2606					DMARK "RSH" 
2606 f5				push af  
2607 3a 1b 26			ld a, (.dmark)  
260a 32 9d fd			ld (debug_mark),a  
260d 3a 1c 26			ld a, (.dmark+1)  
2610 32 9e fd			ld (debug_mark+1),a  
2613 3a 1d 26			ld a, (.dmark+2)  
2616 32 9f fd			ld (debug_mark+2),a  
2619 18 03			jr .pastdmark  
261b ..			.dmark: db "RSH"  
261e f1			.pastdmark: pop af  
261f			endm  
# End of macro DMARK
261f					CALLMONITOR 
261f cd aa fd			call debug_vector  
2622				endm  
# End of macro CALLMONITOR
2622				endif 
2622				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2622 cd 6c 21			call macro_dsp_valuehl 
2625				endm 
# End of macro FORTH_DSP_VALUEHL
2625				FORTH_DSP_POP 
2625 cd 24 22			call macro_forth_dsp_pop 
2628				endm 
# End of macro FORTH_DSP_POP
2628 cb 3c			srl h 
262a cb 1d			rr l 
262c cd 70 1f			call forth_push_numhl 
262f				NEXTW 
262f cd a7 fd			call parse_vector 
2632 c3 53 23			jp macro_next 
2635				endm 
# End of macro NEXTW
2635			.SWAP: 
2635			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
2635 18				db WORD_SYS_CORE+OPCODE_SWAP             
2636 8c 26			dw .COLN            
2638 05				db 4 + 1 
2639 .. 00			db "SWAP",0              
263e				endm 
# End of macro CWHEAD
263e			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
263e				if DEBUG_FORTH_WORDS_KEY 
263e					DMARK "SWP" 
263e f5				push af  
263f 3a 53 26			ld a, (.dmark)  
2642 32 9d fd			ld (debug_mark),a  
2645 3a 54 26			ld a, (.dmark+1)  
2648 32 9e fd			ld (debug_mark+1),a  
264b 3a 55 26			ld a, (.dmark+2)  
264e 32 9f fd			ld (debug_mark+2),a  
2651 18 03			jr .pastdmark  
2653 ..			.dmark: db "SWP"  
2656 f1			.pastdmark: pop af  
2657			endm  
# End of macro DMARK
2657					CALLMONITOR 
2657 cd aa fd			call debug_vector  
265a				endm  
# End of macro CALLMONITOR
265a				endif 
265a			 
265a			; DONE Use os stack swap memory 
265a			 
265a				FORTH_DSP_PTR 0     ; TOS 
265a 2a 20 f9			ld hl,(cli_data_sp) 
265d 11 00 00			ld de, 0 * 3 
2660 ed 52			sbc hl, de 
2662				endm 
# End of macro FORTH_DSP_PTR
2662 cd a3 22			call hltostack1 
2665			  
2665				FORTH_DSP_PTR 1     ; TOS 
2665 2a 20 f9			ld hl,(cli_data_sp) 
2668 11 03 00			ld de, 1 * 3 
266b ed 52			sbc hl, de 
266d				endm 
# End of macro FORTH_DSP_PTR
266d cd a9 22			call hltostack2 
2670			 
2670				FORTH_DSP_PTR 0     ; TOS 
2670 2a 20 f9			ld hl,(cli_data_sp) 
2673 11 00 00			ld de, 0 * 3 
2676 ed 52			sbc hl, de 
2678				endm 
# End of macro FORTH_DSP_PTR
2678 cd c1 22			call hlfromstack2 
267b			 
267b				FORTH_DSP_PTR 1     ; TOS 
267b 2a 20 f9			ld hl,(cli_data_sp) 
267e 11 03 00			ld de, 1 * 3 
2681 ed 52			sbc hl, de 
2683				endm 
# End of macro FORTH_DSP_PTR
2683 cd bb 22			call hlfromstack1 
2686			;	FORTH_DSP_VALUEHL 
2686			;	push hl     ; w2 
2686			; 
2686			;	FORTH_DSP_POP 
2686			; 
2686			;	FORTH_DSP_VALUEHL 
2686			; 
2686			;	FORTH_DSP_POP 
2686			; 
2686			;	pop de     ; w2	, hl = w1 
2686			; 
2686			;	ex de, hl 
2686			;	push de 
2686			; 
2686			;	call forth_push_numhl 
2686			; 
2686			;	pop hl 
2686			; 
2686			;	call forth_push_numhl 
2686				 
2686			 
2686				NEXTW 
2686 cd a7 fd			call parse_vector 
2689 c3 53 23			jp macro_next 
268c				endm 
# End of macro NEXTW
268c			.COLN: 
268c			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
268c 19				db WORD_SYS_CORE+OPCODE_COLN             
268d 17 28			dw .SCOLN            
268f 02				db 1 + 1 
2690 .. 00			db ":",0              
2692				endm 
# End of macro CWHEAD
2692			; | : ( -- )         Create new word | DONE 
2692			 
2692				if DEBUG_FORTH_WORDS_KEY 
2692					DMARK "CLN" 
2692 f5				push af  
2693 3a a7 26			ld a, (.dmark)  
2696 32 9d fd			ld (debug_mark),a  
2699 3a a8 26			ld a, (.dmark+1)  
269c 32 9e fd			ld (debug_mark+1),a  
269f 3a a9 26			ld a, (.dmark+2)  
26a2 32 9f fd			ld (debug_mark+2),a  
26a5 18 03			jr .pastdmark  
26a7 ..			.dmark: db "CLN"  
26aa f1			.pastdmark: pop af  
26ab			endm  
# End of macro DMARK
26ab					CALLMONITOR 
26ab cd aa fd			call debug_vector  
26ae				endm  
# End of macro CALLMONITOR
26ae				endif 
26ae			STACKFRAME OFF $8efe $989f 
26ae				if DEBUG_STACK_IMB 
26ae					if OFF 
26ae						exx 
26ae						ld de, $8efe 
26ae						ld a, d 
26ae						ld hl, curframe 
26ae						call hexout 
26ae						ld a, e 
26ae						ld hl, curframe+2 
26ae						call hexout 
26ae						ld hl, $8efe 
26ae						push hl 
26ae						ld hl, $989f 
26ae						push hl 
26ae						exx 
26ae					endif 
26ae				endif 
26ae			endm 
# End of macro STACKFRAME
26ae			; get parser buffer length  of new word 
26ae			 
26ae			 
26ae			 
26ae				; move tok past this to start of name defintition 
26ae				; TODO get word to define 
26ae				; TODO Move past word token 
26ae				; TODO get length of string up to the ';' 
26ae			 
26ae 2a f4 f3		ld hl, (os_tok_ptr) 
26b1 23			inc hl 
26b2 23			inc hl 
26b3			 
26b3 3e 3b		ld a, ';' 
26b5 cd 0f 13		call strlent 
26b8			 
26b8 7d			ld a,l 
26b9 32 e3 f0		ld (os_new_parse_len), a 
26bc			 
26bc			 
26bc			if DEBUG_FORTH_UWORD 
26bc ed 5b f4 f3	ld de, (os_tok_ptr) 
26c0					DMARK ":01" 
26c0 f5				push af  
26c1 3a d5 26			ld a, (.dmark)  
26c4 32 9d fd			ld (debug_mark),a  
26c7 3a d6 26			ld a, (.dmark+1)  
26ca 32 9e fd			ld (debug_mark+1),a  
26cd 3a d7 26			ld a, (.dmark+2)  
26d0 32 9f fd			ld (debug_mark+2),a  
26d3 18 03			jr .pastdmark  
26d5 ..			.dmark: db ":01"  
26d8 f1			.pastdmark: pop af  
26d9			endm  
# End of macro DMARK
26d9			CALLMONITOR 
26d9 cd aa fd			call debug_vector  
26dc				endm  
# End of macro CALLMONITOR
26dc			endif 
26dc			 
26dc			; 
26dc			;  new word memory layout: 
26dc			;  
26dc			;    : adg 6666 ;  
26dc			; 
26dc			;    db   1     ; user defined word  
26dc 23			inc hl    
26dd			;    dw   sysdict 
26dd 23			inc hl 
26de 23			inc hl 
26df			;    db <word len>+1 (for null) 
26df 23			inc hl 
26e0			;    db .... <word> 
26e0			; 
26e0			 
26e0 23			inc hl    ; some extras for the word preamble before the above 
26e1 23			inc hl 
26e2 23			inc hl 
26e3 23			inc hl 
26e4 23			inc hl 
26e5 23			inc hl 
26e6 23			inc hl  
26e7 23			inc hl 
26e8 23			inc hl 
26e9 23			inc hl 
26ea 23			inc hl 
26eb 23			inc hl 
26ec 23			inc hl 
26ed 23			inc hl     ; TODO how many do we really need?     maybe only 6 
26ee			;       exec word buffer 
26ee			;	<ptr word>   
26ee 23			inc hl 
26ef 23			inc hl 
26f0			;       <word list><null term> 7F final term 
26f0			 
26f0			 
26f0			if DEBUG_FORTH_UWORD 
26f0					DMARK ":02" 
26f0 f5				push af  
26f1 3a 05 27			ld a, (.dmark)  
26f4 32 9d fd			ld (debug_mark),a  
26f7 3a 06 27			ld a, (.dmark+1)  
26fa 32 9e fd			ld (debug_mark+1),a  
26fd 3a 07 27			ld a, (.dmark+2)  
2700 32 9f fd			ld (debug_mark+2),a  
2703 18 03			jr .pastdmark  
2705 ..			.dmark: db ":02"  
2708 f1			.pastdmark: pop af  
2709			endm  
# End of macro DMARK
2709			CALLMONITOR 
2709 cd aa fd			call debug_vector  
270c				endm  
# End of macro CALLMONITOR
270c			endif 
270c			 
270c			 
270c				; malloc the size 
270c			 
270c cd 78 13			call malloc 
270f 22 e5 f0			ld (os_new_malloc), hl     ; save malloc start 
2712			 
2712			;    db   1     ; user defined word  
2712			;	ld a, WORD_SYS_UWORD  
2712 36 01			ld (hl), WORD_SYS_UWORD 
2714			 
2714 23			inc hl    
2715			;    dw   sysdict 
2715 11 8c 24		ld de, sysdict       ; continue on with the scan to the system dict 
2718 73			ld (hl), e 
2719 23			inc hl 
271a 72			ld (hl), d 
271b 23			inc hl 
271c			 
271c			 
271c			;    Setup dict word 
271c			 
271c 23			inc hl 
271d 22 df f0		ld (os_new_work_ptr), hl     ; save start of dict word  
2720			 
2720			; 1. get length of dict word 
2720			 
2720			 
2720 2a f4 f3		ld hl, (os_tok_ptr) 
2723 23			inc hl 
2724 23			inc hl    ; position to start of dict word 
2725 3e 00		ld a, 0 
2727 cd 0f 13		call strlent 
272a			 
272a			 
272a 23			inc hl    ; to include null??? 
272b			 
272b			; write length of dict word 
272b			 
272b ed 5b df f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
272f 1b			dec de 
2730 eb			ex de, hl 
2731 73			ld (hl), e 
2732 eb			ex de, hl 
2733			 
2733			 
2733			 
2733			; copy  
2733 4d			ld c, l 
2734 06 00		ld b, 0 
2736 ed 5b df f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
273a 2a f4 f3		ld hl, (os_tok_ptr) 
273d 23			inc hl 
273e 23			inc hl    ; position to start of dict word 
273f			 
273f			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
273f			 
273f			; TODO need to convert word to upper case 
273f			 
273f			ucasetok:	 
273f 7e			ld a,(hl) 
2740 cd fb 12		call toUpper 
2743 77			ld (hl),a 
2744 ed a0		ldi 
2746 f2 3f 27		jp p, ucasetok 
2749			 
2749			 
2749			 
2749			; de now points to start of where the word body code should be placed 
2749 ed 53 df f0	ld (os_new_work_ptr), de 
274d			; hl now points to the words to throw at forthexec which needs to be copied 
274d 22 dd f0		ld (os_new_src_ptr), hl 
2750			 
2750			; TODO add 'call to forthexec' 
2750			 
2750			if DEBUG_FORTH_UWORD 
2750 c5			push bc 
2751 ed 4b e5 f0	ld bc, (os_new_malloc) 
2755					DMARK ":0x" 
2755 f5				push af  
2756 3a 6a 27			ld a, (.dmark)  
2759 32 9d fd			ld (debug_mark),a  
275c 3a 6b 27			ld a, (.dmark+1)  
275f 32 9e fd			ld (debug_mark+1),a  
2762 3a 6c 27			ld a, (.dmark+2)  
2765 32 9f fd			ld (debug_mark+2),a  
2768 18 03			jr .pastdmark  
276a ..			.dmark: db ":0x"  
276d f1			.pastdmark: pop af  
276e			endm  
# End of macro DMARK
276e			CALLMONITOR 
276e cd aa fd			call debug_vector  
2771				endm  
# End of macro CALLMONITOR
2771 c1			pop bc 
2772			endif 
2772			 
2772			 
2772			; create word preamble which should be: 
2772			 
2772			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2772			 
2772			;    ld hl, <word code> 
2772			;    jp user_exec 
2772			;    <word code bytes> 
2772			 
2772			 
2772			;	inc de     ; TODO ??? or are we already past the word's null 
2772 eb			ex de, hl 
2773			 
2773 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
2775			 
2775 23			inc hl 
2776 22 d9 f0		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
2779 23			inc hl 
277a			 
277a 23			inc hl 
277b 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
277d			 
277d 01 90 63		ld bc, user_exec 
2780 23			inc hl 
2781 71			ld (hl), c     ; poke address of user_exec 
2782 23			inc hl 
2783 70			ld (hl), b     
2784			; 
2784			;	inc hl 
2784			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2784			; 
2784			; 
2784			;	ld bc, macro_forth_rsp_next 
2784			;	inc hl 
2784			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
2784			;	inc hl 
2784			;	ld (hl), b     
2784			; 
2784			;	inc hl 
2784			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2784			; 
2784			; 
2784			;	inc hl 
2784			;	ld bc, forthexec 
2784			;	ld (hl), c     ; poke address of forthexec 
2784			;	inc hl 
2784			;	ld (hl), b      
2784			; 
2784			;	inc hl 
2784			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
2784			; 
2784			;	ld bc, user_dict_next 
2784			;	inc hl 
2784			;	ld (hl), c     ; poke address of forthexec 
2784			;	inc hl 
2784			;	ld (hl), b      
2784			 
2784			; hl is now where we need to copy the word byte data to save this 
2784			 
2784 23			inc hl 
2785 22 db f0		ld (os_new_exec), hl 
2788			 
2788			; copy definition 
2788			 
2788 eb			ex de, hl 
2789			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
2789			;	inc de    ; skip the PC for this parse 
2789 3a e3 f0		ld a, (os_new_parse_len) 
278c 4f			ld c, a 
278d 06 00		ld b, 0 
278f ed b0		ldir		 ; copy defintion 
2791			 
2791			 
2791			; poke the address of where the new word bytes live for forthexec 
2791			 
2791 2a d9 f0		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
2794			 
2794 ed 5b db f0	ld de, (os_new_exec)      
2798			 
2798 73			ld (hl), e 
2799 23			inc hl 
279a 72			ld (hl), d 
279b			 
279b				; TODO copy last user dict word next link to this word 
279b				; TODO update last user dict word to point to this word 
279b			; 
279b			; hl f923 de 812a ; bc 811a 
279b			 
279b			if DEBUG_FORTH_UWORD 
279b c5			push bc 
279c ed 4b e5 f0	ld bc, (os_new_malloc) 
27a0					DMARK ":0A" 
27a0 f5				push af  
27a1 3a b5 27			ld a, (.dmark)  
27a4 32 9d fd			ld (debug_mark),a  
27a7 3a b6 27			ld a, (.dmark+1)  
27aa 32 9e fd			ld (debug_mark+1),a  
27ad 3a b7 27			ld a, (.dmark+2)  
27b0 32 9f fd			ld (debug_mark+2),a  
27b3 18 03			jr .pastdmark  
27b5 ..			.dmark: db ":0A"  
27b8 f1			.pastdmark: pop af  
27b9			endm  
# End of macro DMARK
27b9			CALLMONITOR 
27b9 cd aa fd			call debug_vector  
27bc				endm  
# End of macro CALLMONITOR
27bc c1			pop bc 
27bd			endif 
27bd			if DEBUG_FORTH_UWORD 
27bd c5			push bc 
27be ed 4b e5 f0	ld bc, (os_new_malloc) 
27c2 03			inc bc 
27c3 03			inc bc 
27c4 03			inc bc 
27c5 03			inc bc 
27c6 03			inc bc 
27c7 03			inc bc 
27c8 03			inc bc 
27c9 03			inc bc 
27ca			 
27ca					DMARK ":0B" 
27ca f5				push af  
27cb 3a df 27			ld a, (.dmark)  
27ce 32 9d fd			ld (debug_mark),a  
27d1 3a e0 27			ld a, (.dmark+1)  
27d4 32 9e fd			ld (debug_mark+1),a  
27d7 3a e1 27			ld a, (.dmark+2)  
27da 32 9f fd			ld (debug_mark+2),a  
27dd 18 03			jr .pastdmark  
27df ..			.dmark: db ":0B"  
27e2 f1			.pastdmark: pop af  
27e3			endm  
# End of macro DMARK
27e3			CALLMONITOR 
27e3 cd aa fd			call debug_vector  
27e6				endm  
# End of macro CALLMONITOR
27e6 c1			pop bc 
27e7			endif 
27e7			 
27e7			; update word dict linked list for new word 
27e7			 
27e7			 
27e7 2a f0 f3		ld hl, (os_last_new_uword)		; get the start of the last added uword 
27ea 23			inc hl     ; move to next work linked list ptr 
27eb			 
27eb ed 5b e5 f0	ld de, (os_new_malloc)		 ; new next word 
27ef 73			ld (hl), e 
27f0 23			inc hl 
27f1 72			ld (hl), d 
27f2			 
27f2			if DEBUG_FORTH_UWORD 
27f2 ed 4b f0 f3	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
27f6			endif 
27f6			 
27f6 ed 53 f0 f3	ld (os_last_new_uword), de      ; update last new uword ptr 
27fa			 
27fa			 
27fa			if DEBUG_FORTH_UWORD 
27fa					DMARK ":0+" 
27fa f5				push af  
27fb 3a 0f 28			ld a, (.dmark)  
27fe 32 9d fd			ld (debug_mark),a  
2801 3a 10 28			ld a, (.dmark+1)  
2804 32 9e fd			ld (debug_mark+1),a  
2807 3a 11 28			ld a, (.dmark+2)  
280a 32 9f fd			ld (debug_mark+2),a  
280d 18 03			jr .pastdmark  
280f ..			.dmark: db ":0+"  
2812 f1			.pastdmark: pop af  
2813			endm  
# End of macro DMARK
2813			CALLMONITOR 
2813 cd aa fd			call debug_vector  
2816				endm  
# End of macro CALLMONITOR
2816			endif 
2816			 
2816			STACKFRAMECHK OFF $8efe $989f 
2816				if DEBUG_STACK_IMB 
2816					if OFF 
2816						exx 
2816						ld hl, $989f 
2816						pop de   ; $989f 
2816						call cmp16 
2816						jr nz, .spnosame 
2816						ld hl, $8efe 
2816						pop de   ; $8efe 
2816						call cmp16 
2816						jr z, .spfrsame 
2816						.spnosame: call showsperror 
2816						.spfrsame: nop 
2816						exx 
2816					endif 
2816				endif 
2816			endm 
# End of macro STACKFRAMECHK
2816			 
2816 c9			ret    ; dont process any remaining parser tokens as they form new word 
2817			 
2817			 
2817			 
2817			 
2817			;		NEXT 
2817			.SCOLN: 
2817			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
2817 06			db OPCODE_SCOLN 
2818 66 28		dw .DROP 
281a 02			db 2 
281b .. 00		db ";",0           
281d			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
281d				if DEBUG_FORTH_WORDS_KEY 
281d					DMARK "SCN" 
281d f5				push af  
281e 3a 32 28			ld a, (.dmark)  
2821 32 9d fd			ld (debug_mark),a  
2824 3a 33 28			ld a, (.dmark+1)  
2827 32 9e fd			ld (debug_mark+1),a  
282a 3a 34 28			ld a, (.dmark+2)  
282d 32 9f fd			ld (debug_mark+2),a  
2830 18 03			jr .pastdmark  
2832 ..			.dmark: db "SCN"  
2835 f1			.pastdmark: pop af  
2836			endm  
# End of macro DMARK
2836					CALLMONITOR 
2836 cd aa fd			call debug_vector  
2839				endm  
# End of macro CALLMONITOR
2839				endif 
2839				FORTH_RSP_TOS 
2839 cd 2e 1f			call macro_forth_rsp_tos 
283c				endm 
# End of macro FORTH_RSP_TOS
283c e5				push hl 
283d				FORTH_RSP_POP 
283d cd 38 1f			call macro_forth_rsp_pop 
2840				endm 
# End of macro FORTH_RSP_POP
2840 e1				pop hl 
2841			;		ex de,hl 
2841 22 f4 f3			ld (os_tok_ptr),hl 
2844			 
2844			if DEBUG_FORTH_UWORD 
2844					DMARK "SCL" 
2844 f5				push af  
2845 3a 59 28			ld a, (.dmark)  
2848 32 9d fd			ld (debug_mark),a  
284b 3a 5a 28			ld a, (.dmark+1)  
284e 32 9e fd			ld (debug_mark+1),a  
2851 3a 5b 28			ld a, (.dmark+2)  
2854 32 9f fd			ld (debug_mark+2),a  
2857 18 03			jr .pastdmark  
2859 ..			.dmark: db "SCL"  
285c f1			.pastdmark: pop af  
285d			endm  
# End of macro DMARK
285d			CALLMONITOR 
285d cd aa fd			call debug_vector  
2860				endm  
# End of macro CALLMONITOR
2860			endif 
2860				NEXTW 
2860 cd a7 fd			call parse_vector 
2863 c3 53 23			jp macro_next 
2866				endm 
# End of macro NEXTW
2866			 
2866			.DROP: 
2866			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2866 1b				db WORD_SYS_CORE+OPCODE_DROP             
2867 94 28			dw .DUP2            
2869 05				db 4 + 1 
286a .. 00			db "DROP",0              
286f				endm 
# End of macro CWHEAD
286f			; | DROP ( w -- )   drop the TOS item   | DONE 
286f				if DEBUG_FORTH_WORDS_KEY 
286f					DMARK "DRP" 
286f f5				push af  
2870 3a 84 28			ld a, (.dmark)  
2873 32 9d fd			ld (debug_mark),a  
2876 3a 85 28			ld a, (.dmark+1)  
2879 32 9e fd			ld (debug_mark+1),a  
287c 3a 86 28			ld a, (.dmark+2)  
287f 32 9f fd			ld (debug_mark+2),a  
2882 18 03			jr .pastdmark  
2884 ..			.dmark: db "DRP"  
2887 f1			.pastdmark: pop af  
2888			endm  
# End of macro DMARK
2888					CALLMONITOR 
2888 cd aa fd			call debug_vector  
288b				endm  
# End of macro CALLMONITOR
288b				endif 
288b				FORTH_DSP_POP 
288b cd 24 22			call macro_forth_dsp_pop 
288e				endm 
# End of macro FORTH_DSP_POP
288e				NEXTW 
288e cd a7 fd			call parse_vector 
2891 c3 53 23			jp macro_next 
2894				endm 
# End of macro NEXTW
2894			.DUP2: 
2894			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2894 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2895 dc 28			dw .DROP2            
2897 05				db 4 + 1 
2898 .. 00			db "2DUP",0              
289d				endm 
# End of macro CWHEAD
289d			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
289d			; | | >[!NOTE] 
289d			; | | > If the duplicated items are string pointers, string are not safely duplicated and remain as pointers to the origin 
289d				if DEBUG_FORTH_WORDS_KEY 
289d					DMARK "2DU" 
289d f5				push af  
289e 3a b2 28			ld a, (.dmark)  
28a1 32 9d fd			ld (debug_mark),a  
28a4 3a b3 28			ld a, (.dmark+1)  
28a7 32 9e fd			ld (debug_mark+1),a  
28aa 3a b4 28			ld a, (.dmark+2)  
28ad 32 9f fd			ld (debug_mark+2),a  
28b0 18 03			jr .pastdmark  
28b2 ..			.dmark: db "2DU"  
28b5 f1			.pastdmark: pop af  
28b6			endm  
# End of macro DMARK
28b6					CALLMONITOR 
28b6 cd aa fd			call debug_vector  
28b9				endm  
# End of macro CALLMONITOR
28b9				endif 
28b9				FORTH_DSP_VALUEHL 
28b9 cd 6c 21			call macro_dsp_valuehl 
28bc				endm 
# End of macro FORTH_DSP_VALUEHL
28bc e5				push hl      ; 2 
28bd			 
28bd				FORTH_DSP_POP 
28bd cd 24 22			call macro_forth_dsp_pop 
28c0				endm 
# End of macro FORTH_DSP_POP
28c0				 
28c0				FORTH_DSP_VALUEHL 
28c0 cd 6c 21			call macro_dsp_valuehl 
28c3				endm 
# End of macro FORTH_DSP_VALUEHL
28c3			;		push hl      ; 1 
28c3			 
28c3				FORTH_DSP_POP 
28c3 cd 24 22			call macro_forth_dsp_pop 
28c6				endm 
# End of macro FORTH_DSP_POP
28c6			 
28c6			;		pop hl       ; 1 
28c6 d1				pop de       ; 2 
28c7			 
28c7 cd 70 1f			call forth_push_numhl 
28ca eb				ex de, hl 
28cb cd 70 1f			call forth_push_numhl 
28ce			 
28ce				 
28ce eb				ex de, hl 
28cf			 
28cf cd 70 1f			call forth_push_numhl 
28d2 eb				ex de, hl 
28d3 cd 70 1f			call forth_push_numhl 
28d6			 
28d6			 
28d6				NEXTW 
28d6 cd a7 fd			call parse_vector 
28d9 c3 53 23			jp macro_next 
28dc				endm 
# End of macro NEXTW
28dc			.DROP2: 
28dc			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
28dc 1d				db WORD_SYS_CORE+OPCODE_DROP2             
28dd 0e 29			dw .PICK            
28df 06				db 5 + 1 
28e0 .. 00			db "2DROP",0              
28e6				endm 
# End of macro CWHEAD
28e6			; | 2DROP ( w w -- )    Double drop | DONE 
28e6				if DEBUG_FORTH_WORDS_KEY 
28e6					DMARK "2DR" 
28e6 f5				push af  
28e7 3a fb 28			ld a, (.dmark)  
28ea 32 9d fd			ld (debug_mark),a  
28ed 3a fc 28			ld a, (.dmark+1)  
28f0 32 9e fd			ld (debug_mark+1),a  
28f3 3a fd 28			ld a, (.dmark+2)  
28f6 32 9f fd			ld (debug_mark+2),a  
28f9 18 03			jr .pastdmark  
28fb ..			.dmark: db "2DR"  
28fe f1			.pastdmark: pop af  
28ff			endm  
# End of macro DMARK
28ff					CALLMONITOR 
28ff cd aa fd			call debug_vector  
2902				endm  
# End of macro CALLMONITOR
2902				endif 
2902				FORTH_DSP_POP 
2902 cd 24 22			call macro_forth_dsp_pop 
2905				endm 
# End of macro FORTH_DSP_POP
2905				FORTH_DSP_POP 
2905 cd 24 22			call macro_forth_dsp_pop 
2908				endm 
# End of macro FORTH_DSP_POP
2908				NEXTW 
2908 cd a7 fd			call parse_vector 
290b c3 53 23			jp macro_next 
290e				endm 
# End of macro NEXTW
290e			.PICK: 
290e			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
290e 77				db WORD_SYS_CORE+99             
290f ab 29			dw .SWAP2            
2911 05				db 4 + 1 
2912 .. 00			db "PICK",0              
2917				endm 
# End of macro CWHEAD
2917			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | DONE 
2917			; | | >[!NOTE] 
2917			; | | > If the chosen item is a string the pointer is pushed to TOS. The string is not safely duplicated. 
2917				if DEBUG_FORTH_WORDS_KEY 
2917					DMARK "PIK" 
2917 f5				push af  
2918 3a 2c 29			ld a, (.dmark)  
291b 32 9d fd			ld (debug_mark),a  
291e 3a 2d 29			ld a, (.dmark+1)  
2921 32 9e fd			ld (debug_mark+1),a  
2924 3a 2e 29			ld a, (.dmark+2)  
2927 32 9f fd			ld (debug_mark+2),a  
292a 18 03			jr .pastdmark  
292c ..			.dmark: db "PIK"  
292f f1			.pastdmark: pop af  
2930			endm  
# End of macro DMARK
2930					CALLMONITOR 
2930 cd aa fd			call debug_vector  
2933				endm  
# End of macro CALLMONITOR
2933				endif 
2933			 
2933				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2933 cd 6c 21			call macro_dsp_valuehl 
2936				endm 
# End of macro FORTH_DSP_VALUEHL
2936				 
2936				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2936 cd 24 22			call macro_forth_dsp_pop 
2939				endm 
# End of macro FORTH_DSP_POP
2939			 
2939				; init from TOS 
2939 e5				push hl 
293a				FORTH_DSP 
293a cd 32 21			call macro_forth_dsp 
293d				endm 
# End of macro FORTH_DSP
293d			;	ld hl, cli_data_sp 
293d				if DEBUG_FORTH_WORDS 
293d					DMARK "PK1" 
293d f5				push af  
293e 3a 52 29			ld a, (.dmark)  
2941 32 9d fd			ld (debug_mark),a  
2944 3a 53 29			ld a, (.dmark+1)  
2947 32 9e fd			ld (debug_mark+1),a  
294a 3a 54 29			ld a, (.dmark+2)  
294d 32 9f fd			ld (debug_mark+2),a  
2950 18 03			jr .pastdmark  
2952 ..			.dmark: db "PK1"  
2955 f1			.pastdmark: pop af  
2956			endm  
# End of macro DMARK
2956					CALLMONITOR 
2956 cd aa fd			call debug_vector  
2959				endm  
# End of macro CALLMONITOR
2959				endif 
2959 c1				pop bc 
295a 41				ld b,c 
295b 3e 00			ld a, 0 
295d b8				cp b 
295e 28 21			jr z, .pdone	 
2960			.pkl: 
2960 2b				dec hl 
2961 2b				dec hl 
2962 2b				dec hl 
2963			 
2963				if DEBUG_FORTH_WORDS 
2963					DMARK "PKl" 
2963 f5				push af  
2964 3a 78 29			ld a, (.dmark)  
2967 32 9d fd			ld (debug_mark),a  
296a 3a 79 29			ld a, (.dmark+1)  
296d 32 9e fd			ld (debug_mark+1),a  
2970 3a 7a 29			ld a, (.dmark+2)  
2973 32 9f fd			ld (debug_mark+2),a  
2976 18 03			jr .pastdmark  
2978 ..			.dmark: db "PKl"  
297b f1			.pastdmark: pop af  
297c			endm  
# End of macro DMARK
297c					CALLMONITOR 
297c cd aa fd			call debug_vector  
297f				endm  
# End of macro CALLMONITOR
297f				endif 
297f 10 df			djnz .pkl 
2981			.pdone: 
2981				 
2981				; TODO do type check with correct push 
2981			 
2981 23				inc hl 
2982				;call loadwordinhl 
2982 5e				ld e, (hl) 
2983 23				inc hl 
2984 56				ld d, (hl) 
2985 eb				ex de,hl 
2986				if DEBUG_FORTH_WORDS 
2986					DMARK "PKp" 
2986 f5				push af  
2987 3a 9b 29			ld a, (.dmark)  
298a 32 9d fd			ld (debug_mark),a  
298d 3a 9c 29			ld a, (.dmark+1)  
2990 32 9e fd			ld (debug_mark+1),a  
2993 3a 9d 29			ld a, (.dmark+2)  
2996 32 9f fd			ld (debug_mark+2),a  
2999 18 03			jr .pastdmark  
299b ..			.dmark: db "PKp"  
299e f1			.pastdmark: pop af  
299f			endm  
# End of macro DMARK
299f					CALLMONITOR 
299f cd aa fd			call debug_vector  
29a2				endm  
# End of macro CALLMONITOR
29a2				endif 
29a2 cd 70 1f			call forth_push_numhl 
29a5			 
29a5				NEXTW 
29a5 cd a7 fd			call parse_vector 
29a8 c3 53 23			jp macro_next 
29ab				endm 
# End of macro NEXTW
29ab			.SWAP2: 
29ab			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
29ab 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
29ac 2f 2a			dw .AT            
29ae 06				db 5 + 1 
29af .. 00			db "2SWAP",0              
29b5				endm 
# End of macro CWHEAD
29b5			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | DONE 
29b5				if DEBUG_FORTH_WORDS_KEY 
29b5					DMARK "2SW" 
29b5 f5				push af  
29b6 3a ca 29			ld a, (.dmark)  
29b9 32 9d fd			ld (debug_mark),a  
29bc 3a cb 29			ld a, (.dmark+1)  
29bf 32 9e fd			ld (debug_mark+1),a  
29c2 3a cc 29			ld a, (.dmark+2)  
29c5 32 9f fd			ld (debug_mark+2),a  
29c8 18 03			jr .pastdmark  
29ca ..			.dmark: db "2SW"  
29cd f1			.pastdmark: pop af  
29ce			endm  
# End of macro DMARK
29ce					CALLMONITOR 
29ce cd aa fd			call debug_vector  
29d1				endm  
# End of macro CALLMONITOR
29d1				endif 
29d1			; TODO Use os stack swap memory 
29d1			 
29d1				FORTH_DSP_PTR 0     ; TOS    w4 
29d1 2a 20 f9			ld hl,(cli_data_sp) 
29d4 11 00 00			ld de, 0 * 3 
29d7 ed 52			sbc hl, de 
29d9				endm 
# End of macro FORTH_DSP_PTR
29d9 cd a3 22			call hltostack1 
29dc			  
29dc				FORTH_DSP_PTR 1     ; TOS    w3 
29dc 2a 20 f9			ld hl,(cli_data_sp) 
29df 11 03 00			ld de, 1 * 3 
29e2 ed 52			sbc hl, de 
29e4				endm 
# End of macro FORTH_DSP_PTR
29e4 cd a9 22			call hltostack2 
29e7			 
29e7			 
29e7			 
29e7				FORTH_DSP_PTR 2     ; TOS    w2 
29e7 2a 20 f9			ld hl,(cli_data_sp) 
29ea 11 06 00			ld de, 2 * 3 
29ed ed 52			sbc hl, de 
29ef				endm 
# End of macro FORTH_DSP_PTR
29ef cd af 22			call hltostack3 
29f2			 
29f2				FORTH_DSP_PTR 3     ; TOS   w1 
29f2 2a 20 f9			ld hl,(cli_data_sp) 
29f5 11 09 00			ld de, 3 * 3 
29f8 ed 52			sbc hl, de 
29fa				endm 
# End of macro FORTH_DSP_PTR
29fa cd b5 22			call hltostack4 
29fd			 
29fd			 
29fd			 
29fd			 
29fd				FORTH_DSP_PTR 0     ; TOS 
29fd 2a 20 f9			ld hl,(cli_data_sp) 
2a00 11 00 00			ld de, 0 * 3 
2a03 ed 52			sbc hl, de 
2a05				endm 
# End of macro FORTH_DSP_PTR
2a05 cd c7 22			call hlfromstack3 
2a08			 
2a08				FORTH_DSP_PTR 1     ; TOS 
2a08 2a 20 f9			ld hl,(cli_data_sp) 
2a0b 11 03 00			ld de, 1 * 3 
2a0e ed 52			sbc hl, de 
2a10				endm 
# End of macro FORTH_DSP_PTR
2a10 cd cd 22			call hlfromstack4 
2a13			 
2a13			 
2a13			 
2a13				FORTH_DSP_PTR 2     ; TOS 
2a13 2a 20 f9			ld hl,(cli_data_sp) 
2a16 11 06 00			ld de, 2 * 3 
2a19 ed 52			sbc hl, de 
2a1b				endm 
# End of macro FORTH_DSP_PTR
2a1b cd bb 22			call hlfromstack1 
2a1e			 
2a1e				FORTH_DSP_PTR 3     ; TOS 
2a1e 2a 20 f9			ld hl,(cli_data_sp) 
2a21 11 09 00			ld de, 3 * 3 
2a24 ed 52			sbc hl, de 
2a26				endm 
# End of macro FORTH_DSP_PTR
2a26 cd c1 22			call hlfromstack2 
2a29			 
2a29				NEXTW 
2a29 cd a7 fd			call parse_vector 
2a2c c3 53 23			jp macro_next 
2a2f				endm 
# End of macro NEXTW
2a2f			.AT: 
2a2f			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
2a2f 1f				db WORD_SYS_CORE+OPCODE_AT             
2a30 64 2a			dw .CAT            
2a32 02				db 1 + 1 
2a33 .. 00			db "@",0              
2a35				endm 
# End of macro CWHEAD
2a35			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2a35			 
2a35				if DEBUG_FORTH_WORDS_KEY 
2a35					DMARK "AT." 
2a35 f5				push af  
2a36 3a 4a 2a			ld a, (.dmark)  
2a39 32 9d fd			ld (debug_mark),a  
2a3c 3a 4b 2a			ld a, (.dmark+1)  
2a3f 32 9e fd			ld (debug_mark+1),a  
2a42 3a 4c 2a			ld a, (.dmark+2)  
2a45 32 9f fd			ld (debug_mark+2),a  
2a48 18 03			jr .pastdmark  
2a4a ..			.dmark: db "AT."  
2a4d f1			.pastdmark: pop af  
2a4e			endm  
# End of macro DMARK
2a4e					CALLMONITOR 
2a4e cd aa fd			call debug_vector  
2a51				endm  
# End of macro CALLMONITOR
2a51				endif 
2a51			.getbyteat:	 
2a51				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a51 cd 6c 21			call macro_dsp_valuehl 
2a54				endm 
# End of macro FORTH_DSP_VALUEHL
2a54				 
2a54			;		push hl 
2a54			 
2a54				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a54 cd 24 22			call macro_forth_dsp_pop 
2a57				endm 
# End of macro FORTH_DSP_POP
2a57			 
2a57			;		pop hl 
2a57			 
2a57 7e				ld a, (hl) 
2a58			 
2a58 6f				ld l, a 
2a59 26 00			ld h, 0 
2a5b cd 70 1f			call forth_push_numhl 
2a5e			 
2a5e				NEXTW 
2a5e cd a7 fd			call parse_vector 
2a61 c3 53 23			jp macro_next 
2a64				endm 
# End of macro NEXTW
2a64			.CAT: 
2a64			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2a64 20				db WORD_SYS_CORE+OPCODE_CAT             
2a65 90 2a			dw .BANG            
2a67 03				db 2 + 1 
2a68 .. 00			db "C@",0              
2a6b				endm 
# End of macro CWHEAD
2a6b			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2a6b				if DEBUG_FORTH_WORDS_KEY 
2a6b					DMARK "CAA" 
2a6b f5				push af  
2a6c 3a 80 2a			ld a, (.dmark)  
2a6f 32 9d fd			ld (debug_mark),a  
2a72 3a 81 2a			ld a, (.dmark+1)  
2a75 32 9e fd			ld (debug_mark+1),a  
2a78 3a 82 2a			ld a, (.dmark+2)  
2a7b 32 9f fd			ld (debug_mark+2),a  
2a7e 18 03			jr .pastdmark  
2a80 ..			.dmark: db "CAA"  
2a83 f1			.pastdmark: pop af  
2a84			endm  
# End of macro DMARK
2a84					CALLMONITOR 
2a84 cd aa fd			call debug_vector  
2a87				endm  
# End of macro CALLMONITOR
2a87				endif 
2a87 c3 51 2a			jp .getbyteat 
2a8a				NEXTW 
2a8a cd a7 fd			call parse_vector 
2a8d c3 53 23			jp macro_next 
2a90				endm 
# End of macro NEXTW
2a90			.BANG: 
2a90			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2a90 21				db WORD_SYS_CORE+OPCODE_BANG             
2a91 c9 2a			dw .CBANG            
2a93 02				db 1 + 1 
2a94 .. 00			db "!",0              
2a96				endm 
# End of macro CWHEAD
2a96			; | ! ( x w -- ) Store x at address w      | DONE 
2a96				if DEBUG_FORTH_WORDS_KEY 
2a96					DMARK "BNG" 
2a96 f5				push af  
2a97 3a ab 2a			ld a, (.dmark)  
2a9a 32 9d fd			ld (debug_mark),a  
2a9d 3a ac 2a			ld a, (.dmark+1)  
2aa0 32 9e fd			ld (debug_mark+1),a  
2aa3 3a ad 2a			ld a, (.dmark+2)  
2aa6 32 9f fd			ld (debug_mark+2),a  
2aa9 18 03			jr .pastdmark  
2aab ..			.dmark: db "BNG"  
2aae f1			.pastdmark: pop af  
2aaf			endm  
# End of macro DMARK
2aaf					CALLMONITOR 
2aaf cd aa fd			call debug_vector  
2ab2				endm  
# End of macro CALLMONITOR
2ab2				endif 
2ab2			 
2ab2			.storebyteat:		 
2ab2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2ab2 cd 6c 21			call macro_dsp_valuehl 
2ab5				endm 
# End of macro FORTH_DSP_VALUEHL
2ab5				 
2ab5 e5				push hl 
2ab6			 
2ab6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2ab6 cd 24 22			call macro_forth_dsp_pop 
2ab9				endm 
# End of macro FORTH_DSP_POP
2ab9			 
2ab9				; get byte to poke 
2ab9			 
2ab9				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2ab9 cd 6c 21			call macro_dsp_valuehl 
2abc				endm 
# End of macro FORTH_DSP_VALUEHL
2abc e5				push hl 
2abd			 
2abd			 
2abd				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2abd cd 24 22			call macro_forth_dsp_pop 
2ac0				endm 
# End of macro FORTH_DSP_POP
2ac0			 
2ac0			 
2ac0 d1				pop de 
2ac1 e1				pop hl 
2ac2			 
2ac2 73				ld (hl),e 
2ac3			 
2ac3			 
2ac3				NEXTW 
2ac3 cd a7 fd			call parse_vector 
2ac6 c3 53 23			jp macro_next 
2ac9				endm 
# End of macro NEXTW
2ac9			.CBANG: 
2ac9			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2ac9 22				db WORD_SYS_CORE+OPCODE_CBANG             
2aca f5 2a			dw .SCALL            
2acc 03				db 2 + 1 
2acd .. 00			db "C!",0              
2ad0				endm 
# End of macro CWHEAD
2ad0			; | C!  ( x w -- ) Store x at address w  | DONE 
2ad0				if DEBUG_FORTH_WORDS_KEY 
2ad0					DMARK "CBA" 
2ad0 f5				push af  
2ad1 3a e5 2a			ld a, (.dmark)  
2ad4 32 9d fd			ld (debug_mark),a  
2ad7 3a e6 2a			ld a, (.dmark+1)  
2ada 32 9e fd			ld (debug_mark+1),a  
2add 3a e7 2a			ld a, (.dmark+2)  
2ae0 32 9f fd			ld (debug_mark+2),a  
2ae3 18 03			jr .pastdmark  
2ae5 ..			.dmark: db "CBA"  
2ae8 f1			.pastdmark: pop af  
2ae9			endm  
# End of macro DMARK
2ae9					CALLMONITOR 
2ae9 cd aa fd			call debug_vector  
2aec				endm  
# End of macro CALLMONITOR
2aec				endif 
2aec c3 b2 2a			jp .storebyteat 
2aef				NEXTW 
2aef cd a7 fd			call parse_vector 
2af2 c3 53 23			jp macro_next 
2af5				endm 
# End of macro NEXTW
2af5			.SCALL: 
2af5			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2af5 23				db WORD_SYS_CORE+OPCODE_SCALL             
2af6 2c 2b			dw .DEPTH            
2af8 05				db 4 + 1 
2af9 .. 00			db "CALL",0              
2afe				endm 
# End of macro CWHEAD
2afe			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2afe				if DEBUG_FORTH_WORDS_KEY 
2afe					DMARK "CLL" 
2afe f5				push af  
2aff 3a 13 2b			ld a, (.dmark)  
2b02 32 9d fd			ld (debug_mark),a  
2b05 3a 14 2b			ld a, (.dmark+1)  
2b08 32 9e fd			ld (debug_mark+1),a  
2b0b 3a 15 2b			ld a, (.dmark+2)  
2b0e 32 9f fd			ld (debug_mark+2),a  
2b11 18 03			jr .pastdmark  
2b13 ..			.dmark: db "CLL"  
2b16 f1			.pastdmark: pop af  
2b17			endm  
# End of macro DMARK
2b17					CALLMONITOR 
2b17 cd aa fd			call debug_vector  
2b1a				endm  
# End of macro CALLMONITOR
2b1a				endif 
2b1a			 
2b1a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b1a cd 6c 21			call macro_dsp_valuehl 
2b1d				endm 
# End of macro FORTH_DSP_VALUEHL
2b1d			 
2b1d			;		push hl 
2b1d			 
2b1d				; destroy value TOS 
2b1d			 
2b1d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b1d cd 24 22			call macro_forth_dsp_pop 
2b20				endm 
# End of macro FORTH_DSP_POP
2b20			 
2b20					 
2b20			;		pop hl 
2b20			 
2b20				; how to do a call with hl???? save SP? 
2b20 cd f7 22			call forth_call_hl 
2b23			 
2b23			 
2b23				; TODO push value back onto stack for another op etc 
2b23			 
2b23 cd 70 1f			call forth_push_numhl 
2b26				NEXTW 
2b26 cd a7 fd			call parse_vector 
2b29 c3 53 23			jp macro_next 
2b2c				endm 
# End of macro NEXTW
2b2c			.DEPTH: 
2b2c			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2b2c 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2b2d 6c 2b			dw .OVER            
2b2f 06				db 5 + 1 
2b30 .. 00			db "DEPTH",0              
2b36				endm 
# End of macro CWHEAD
2b36			; | DEPTH ( -- u ) Push count of stack | DONE 
2b36				; take current TOS and remove from base value div by two to get count 
2b36				if DEBUG_FORTH_WORDS_KEY 
2b36					DMARK "DEP" 
2b36 f5				push af  
2b37 3a 4b 2b			ld a, (.dmark)  
2b3a 32 9d fd			ld (debug_mark),a  
2b3d 3a 4c 2b			ld a, (.dmark+1)  
2b40 32 9e fd			ld (debug_mark+1),a  
2b43 3a 4d 2b			ld a, (.dmark+2)  
2b46 32 9f fd			ld (debug_mark+2),a  
2b49 18 03			jr .pastdmark  
2b4b ..			.dmark: db "DEP"  
2b4e f1			.pastdmark: pop af  
2b4f			endm  
# End of macro DMARK
2b4f					CALLMONITOR 
2b4f cd aa fd			call debug_vector  
2b52				endm  
# End of macro CALLMONITOR
2b52				endif 
2b52			 
2b52			 
2b52 2a 20 f9		ld hl, (cli_data_sp) 
2b55 11 5a f6		ld de, cli_data_stack 
2b58 ed 52		sbc hl,de 
2b5a			 
2b5a			; div by size of stack item 
2b5a			 
2b5a 5d			ld e,l 
2b5b 0e 03		ld c, 3 
2b5d cd 3c 0f		call Div8 
2b60			 
2b60 6f			ld l,a 
2b61 26 00		ld h,0 
2b63			 
2b63			;srl h 
2b63			;rr l 
2b63			 
2b63 cd 70 1f			call forth_push_numhl 
2b66				NEXTW 
2b66 cd a7 fd			call parse_vector 
2b69 c3 53 23			jp macro_next 
2b6c				endm 
# End of macro NEXTW
2b6c			.OVER: 
2b6c			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2b6c 42				db WORD_SYS_CORE+46             
2b6d bc 2b			dw .PAUSE            
2b6f 05				db 4 + 1 
2b70 .. 00			db "OVER",0              
2b75				endm 
# End of macro CWHEAD
2b75			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
2b75			; | | >[!NOTE] 
2b75			; | | > If the copied item is a string it is properly duplicated allowing for a safe release after use.  
2b75				if DEBUG_FORTH_WORDS_KEY 
2b75					DMARK "OVR" 
2b75 f5				push af  
2b76 3a 8a 2b			ld a, (.dmark)  
2b79 32 9d fd			ld (debug_mark),a  
2b7c 3a 8b 2b			ld a, (.dmark+1)  
2b7f 32 9e fd			ld (debug_mark+1),a  
2b82 3a 8c 2b			ld a, (.dmark+2)  
2b85 32 9f fd			ld (debug_mark+2),a  
2b88 18 03			jr .pastdmark  
2b8a ..			.dmark: db "OVR"  
2b8d f1			.pastdmark: pop af  
2b8e			endm  
# End of macro DMARK
2b8e					CALLMONITOR 
2b8e cd aa fd			call debug_vector  
2b91				endm  
# End of macro CALLMONITOR
2b91				endif 
2b91			 
2b91			; TODO Use os stack swap memory 
2b91			 
2b91				; work out what type we are looking at 
2b91			 
2b91				FORTH_DSP_PTR 1 
2b91 2a 20 f9			ld hl,(cli_data_sp) 
2b94 11 03 00			ld de, 1 * 3 
2b97 ed 52			sbc hl, de 
2b99				endm 
# End of macro FORTH_DSP_PTR
2b99			 
2b99 7e				ld a, (hl) 
2b9a				 
2b9a f5				push af 
2b9b				; whatever the type lets get the pointer or word 
2b9b 23				inc hl 
2b9c			;; 
2b9c			 
2b9c				; type check now to decide on how to push  
2b9c			 
2b9c cd d9 22			call loadwordinhl 
2b9f f1				pop af 
2ba0 fe 01			cp DS_TYPE_STR 
2ba2 28 09			jr z, .ovstr 
2ba4			 
2ba4				; we have a numeric so load the word and push 
2ba4			;	ld e, (hl) 
2ba4			;	inc hl 
2ba4			;	ld d, (hl) 
2ba4			;	ex de, hl 
2ba4 cd 70 1f			call forth_push_numhl 
2ba7				NEXTW 
2ba7 cd a7 fd			call parse_vector 
2baa c3 53 23			jp macro_next 
2bad				endm 
# End of macro NEXTW
2bad			 
2bad			.ovstr: 
2bad				; ok, a string so get the pointer and push as a string 
2bad			 
2bad			;	call loadwordinhl 
2bad cd da 1f			call forth_push_str 
2bb0				NEXTW 
2bb0 cd a7 fd			call parse_vector 
2bb3 c3 53 23			jp macro_next 
2bb6				endm 
# End of macro NEXTW
2bb6			 
2bb6			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2bb6			;	push hl    ; n2 
2bb6			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2bb6			; 
2bb6			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2bb6			;	push hl    ; n1 
2bb6			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2bb6			; 
2bb6			;	pop de     ; n1 
2bb6			;	pop hl     ; n2 
2bb6			; 
2bb6			;	push de 
2bb6			;	push hl 
2bb6			;	push de 
2bb6			 
2bb6				; push back  
2bb6			 
2bb6			;	pop hl 
2bb6			;	call forth_push_numhl 
2bb6			;	pop hl 
2bb6			;	call forth_push_numhl 
2bb6			;	pop hl 
2bb6			;	call forth_push_numhl 
2bb6				NEXTW 
2bb6 cd a7 fd			call parse_vector 
2bb9 c3 53 23			jp macro_next 
2bbc				endm 
# End of macro NEXTW
2bbc			 
2bbc			.PAUSE: 
2bbc			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2bbc 43				db WORD_SYS_CORE+47             
2bbd f4 2b			dw .PAUSES            
2bbf 08				db 7 + 1 
2bc0 .. 00			db "PAUSEMS",0              
2bc8				endm 
# End of macro CWHEAD
2bc8			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2bc8				if DEBUG_FORTH_WORDS_KEY 
2bc8					DMARK "PMS" 
2bc8 f5				push af  
2bc9 3a dd 2b			ld a, (.dmark)  
2bcc 32 9d fd			ld (debug_mark),a  
2bcf 3a de 2b			ld a, (.dmark+1)  
2bd2 32 9e fd			ld (debug_mark+1),a  
2bd5 3a df 2b			ld a, (.dmark+2)  
2bd8 32 9f fd			ld (debug_mark+2),a  
2bdb 18 03			jr .pastdmark  
2bdd ..			.dmark: db "PMS"  
2be0 f1			.pastdmark: pop af  
2be1			endm  
# End of macro DMARK
2be1					CALLMONITOR 
2be1 cd aa fd			call debug_vector  
2be4				endm  
# End of macro CALLMONITOR
2be4				endif 
2be4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2be4 cd 6c 21			call macro_dsp_valuehl 
2be7				endm 
# End of macro FORTH_DSP_VALUEHL
2be7			;		push hl    ; n2 
2be7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2be7 cd 24 22			call macro_forth_dsp_pop 
2bea				endm 
# End of macro FORTH_DSP_POP
2bea			;		pop hl 
2bea			 
2bea 7d				ld a, l 
2beb cd a5 0c			call aDelayInMS 
2bee			       NEXTW 
2bee cd a7 fd			call parse_vector 
2bf1 c3 53 23			jp macro_next 
2bf4				endm 
# End of macro NEXTW
2bf4			.PAUSES:  
2bf4			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2bf4 44				db WORD_SYS_CORE+48             
2bf5 66 2c			dw .ROT            
2bf7 06				db 5 + 1 
2bf8 .. 00			db "PAUSE",0              
2bfe				endm 
# End of macro CWHEAD
2bfe			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2bfe				if DEBUG_FORTH_WORDS_KEY 
2bfe					DMARK "PAU" 
2bfe f5				push af  
2bff 3a 13 2c			ld a, (.dmark)  
2c02 32 9d fd			ld (debug_mark),a  
2c05 3a 14 2c			ld a, (.dmark+1)  
2c08 32 9e fd			ld (debug_mark+1),a  
2c0b 3a 15 2c			ld a, (.dmark+2)  
2c0e 32 9f fd			ld (debug_mark+2),a  
2c11 18 03			jr .pastdmark  
2c13 ..			.dmark: db "PAU"  
2c16 f1			.pastdmark: pop af  
2c17			endm  
# End of macro DMARK
2c17					CALLMONITOR 
2c17 cd aa fd			call debug_vector  
2c1a				endm  
# End of macro CALLMONITOR
2c1a				endif 
2c1a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2c1a cd 6c 21			call macro_dsp_valuehl 
2c1d				endm 
# End of macro FORTH_DSP_VALUEHL
2c1d			;		push hl    ; n2 
2c1d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2c1d cd 24 22			call macro_forth_dsp_pop 
2c20				endm 
# End of macro FORTH_DSP_POP
2c20			;		pop hl 
2c20 45				ld b, l 
2c21				if DEBUG_FORTH_WORDS 
2c21					DMARK "PAU" 
2c21 f5				push af  
2c22 3a 36 2c			ld a, (.dmark)  
2c25 32 9d fd			ld (debug_mark),a  
2c28 3a 37 2c			ld a, (.dmark+1)  
2c2b 32 9e fd			ld (debug_mark+1),a  
2c2e 3a 38 2c			ld a, (.dmark+2)  
2c31 32 9f fd			ld (debug_mark+2),a  
2c34 18 03			jr .pastdmark  
2c36 ..			.dmark: db "PAU"  
2c39 f1			.pastdmark: pop af  
2c3a			endm  
# End of macro DMARK
2c3a					CALLMONITOR 
2c3a cd aa fd			call debug_vector  
2c3d				endm  
# End of macro CALLMONITOR
2c3d				endif 
2c3d c5			.pauses1:	push bc 
2c3e cd c0 0c			call delay1s 
2c41 c1				pop bc 
2c42				if DEBUG_FORTH_WORDS 
2c42					DMARK "PA1" 
2c42 f5				push af  
2c43 3a 57 2c			ld a, (.dmark)  
2c46 32 9d fd			ld (debug_mark),a  
2c49 3a 58 2c			ld a, (.dmark+1)  
2c4c 32 9e fd			ld (debug_mark+1),a  
2c4f 3a 59 2c			ld a, (.dmark+2)  
2c52 32 9f fd			ld (debug_mark+2),a  
2c55 18 03			jr .pastdmark  
2c57 ..			.dmark: db "PA1"  
2c5a f1			.pastdmark: pop af  
2c5b			endm  
# End of macro DMARK
2c5b					CALLMONITOR 
2c5b cd aa fd			call debug_vector  
2c5e				endm  
# End of macro CALLMONITOR
2c5e				endif 
2c5e 10 dd			djnz .pauses1 
2c60			 
2c60			       NEXTW 
2c60 cd a7 fd			call parse_vector 
2c63 c3 53 23			jp macro_next 
2c66				endm 
# End of macro NEXTW
2c66			.ROT: 
2c66			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2c66 45				db WORD_SYS_CORE+49             
2c67 d2 2c			dw .UWORDS            
2c69 04				db 3 + 1 
2c6a .. 00			db "ROT",0              
2c6e				endm 
# End of macro CWHEAD
2c6e			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
2c6e				if DEBUG_FORTH_WORDS_KEY 
2c6e					DMARK "ROT" 
2c6e f5				push af  
2c6f 3a 83 2c			ld a, (.dmark)  
2c72 32 9d fd			ld (debug_mark),a  
2c75 3a 84 2c			ld a, (.dmark+1)  
2c78 32 9e fd			ld (debug_mark+1),a  
2c7b 3a 85 2c			ld a, (.dmark+2)  
2c7e 32 9f fd			ld (debug_mark+2),a  
2c81 18 03			jr .pastdmark  
2c83 ..			.dmark: db "ROT"  
2c86 f1			.pastdmark: pop af  
2c87			endm  
# End of macro DMARK
2c87					CALLMONITOR 
2c87 cd aa fd			call debug_vector  
2c8a				endm  
# End of macro CALLMONITOR
2c8a				endif 
2c8a			 
2c8a			; DONE Use os stack swap memory 
2c8a			 
2c8a				FORTH_DSP_PTR 0     ; u3 
2c8a 2a 20 f9			ld hl,(cli_data_sp) 
2c8d 11 00 00			ld de, 0 * 3 
2c90 ed 52			sbc hl, de 
2c92				endm 
# End of macro FORTH_DSP_PTR
2c92 cd a3 22			call hltostack1     
2c95			  
2c95				FORTH_DSP_PTR 1     ; u2 
2c95 2a 20 f9			ld hl,(cli_data_sp) 
2c98 11 03 00			ld de, 1 * 3 
2c9b ed 52			sbc hl, de 
2c9d				endm 
# End of macro FORTH_DSP_PTR
2c9d cd a9 22			call hltostack2      
2ca0			 
2ca0				FORTH_DSP_PTR 2     ; u1 
2ca0 2a 20 f9			ld hl,(cli_data_sp) 
2ca3 11 06 00			ld de, 2 * 3 
2ca6 ed 52			sbc hl, de 
2ca8				endm 
# End of macro FORTH_DSP_PTR
2ca8 cd af 22			call hltostack3 
2cab			 
2cab			 
2cab				FORTH_DSP_PTR 0     ;  
2cab 2a 20 f9			ld hl,(cli_data_sp) 
2cae 11 00 00			ld de, 0 * 3 
2cb1 ed 52			sbc hl, de 
2cb3				endm 
# End of macro FORTH_DSP_PTR
2cb3 cd c7 22			call hlfromstack3 
2cb6			 
2cb6				FORTH_DSP_PTR 1     ; TOS 
2cb6 2a 20 f9			ld hl,(cli_data_sp) 
2cb9 11 03 00			ld de, 1 * 3 
2cbc ed 52			sbc hl, de 
2cbe				endm 
# End of macro FORTH_DSP_PTR
2cbe cd bb 22			call hlfromstack1 
2cc1			 
2cc1				FORTH_DSP_PTR 2     ; TOS 
2cc1 2a 20 f9			ld hl,(cli_data_sp) 
2cc4 11 06 00			ld de, 2 * 3 
2cc7 ed 52			sbc hl, de 
2cc9				endm 
# End of macro FORTH_DSP_PTR
2cc9 cd c1 22			call hlfromstack2 
2ccc			 
2ccc			 
2ccc			;	FORTH_DSP_VALUEHL 
2ccc			;	push hl    ; u3  
2ccc			; 
2ccc			;	FORTH_DSP_POP 
2ccc			; 
2ccc			;	FORTH_DSP_VALUEHL 
2ccc			;	push hl     ; u2 
2ccc			; 
2ccc			;	FORTH_DSP_POP 
2ccc			; 
2ccc			;	FORTH_DSP_VALUEHL 
2ccc			;	push hl     ; u1 
2ccc			; 
2ccc			;	FORTH_DSP_POP 
2ccc			; 
2ccc			;	pop bc      ; u1 
2ccc			;	pop hl      ; u2 
2ccc			;	pop de      ; u3 
2ccc			; 
2ccc			; 
2ccc			;	push bc 
2ccc			;	push de 
2ccc			;	push hl 
2ccc			; 
2ccc			; 
2ccc			;	pop hl 
2ccc			;	call forth_push_numhl 
2ccc			; 
2ccc			;	pop hl 
2ccc			;	call forth_push_numhl 
2ccc			; 
2ccc			;	pop hl 
2ccc			;	call forth_push_numhl 
2ccc				 
2ccc			 
2ccc			 
2ccc			 
2ccc			 
2ccc			 
2ccc			       NEXTW 
2ccc cd a7 fd			call parse_vector 
2ccf c3 53 23			jp macro_next 
2cd2				endm 
# End of macro NEXTW
2cd2			 
2cd2			.UWORDS: 
2cd2			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2cd2 50				db WORD_SYS_CORE+60             
2cd3 97 2d			dw .BP            
2cd5 07				db 6 + 1 
2cd6 .. 00			db "UWORDS",0              
2cdd				endm 
# End of macro CWHEAD
2cdd			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2cdd			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2cdd			; | | Following the count are the individual words. 
2cdd			; | | 
2cdd			; | | e.g. UWORDS 
2cdd			; | | BOX DIRLIST 2 
2cdd			; | |  
2cdd			; | | Can be used to save the words to storage via: 
2cdd			; | | UWORDS $01 DO $01 APPEND LOOP 
2cdd			if DEBUG_FORTH_WORDS_KEY 
2cdd				DMARK "UWR" 
2cdd f5				push af  
2cde 3a f2 2c			ld a, (.dmark)  
2ce1 32 9d fd			ld (debug_mark),a  
2ce4 3a f3 2c			ld a, (.dmark+1)  
2ce7 32 9e fd			ld (debug_mark+1),a  
2cea 3a f4 2c			ld a, (.dmark+2)  
2ced 32 9f fd			ld (debug_mark+2),a  
2cf0 18 03			jr .pastdmark  
2cf2 ..			.dmark: db "UWR"  
2cf5 f1			.pastdmark: pop af  
2cf6			endm  
# End of macro DMARK
2cf6				CALLMONITOR 
2cf6 cd aa fd			call debug_vector  
2cf9				endm  
# End of macro CALLMONITOR
2cf9			endif 
2cf9 21 00 80			ld hl, baseram 
2cfc				;ld hl, baseusermem 
2cfc 01 00 00			ld bc, 0    ; start a counter 
2cff			 
2cff			; skip dict stub 
2cff			 
2cff cd 85 24			call forth_tok_next 
2d02			 
2d02			 
2d02			; while we have words to look for 
2d02			 
2d02 7e			.douscan:	ld a, (hl)      
2d03			if DEBUG_FORTH_WORDS 
2d03				DMARK "UWs" 
2d03 f5				push af  
2d04 3a 18 2d			ld a, (.dmark)  
2d07 32 9d fd			ld (debug_mark),a  
2d0a 3a 19 2d			ld a, (.dmark+1)  
2d0d 32 9e fd			ld (debug_mark+1),a  
2d10 3a 1a 2d			ld a, (.dmark+2)  
2d13 32 9f fd			ld (debug_mark+2),a  
2d16 18 03			jr .pastdmark  
2d18 ..			.dmark: db "UWs"  
2d1b f1			.pastdmark: pop af  
2d1c			endm  
# End of macro DMARK
2d1c				CALLMONITOR 
2d1c cd aa fd			call debug_vector  
2d1f				endm  
# End of macro CALLMONITOR
2d1f			endif 
2d1f fe 00			cp WORD_SYS_END 
2d21 28 4d			jr z, .udone 
2d23 fe 01			cp WORD_SYS_UWORD 
2d25 20 44			jr nz, .nuword 
2d27			 
2d27			if DEBUG_FORTH_WORDS 
2d27				DMARK "UWu" 
2d27 f5				push af  
2d28 3a 3c 2d			ld a, (.dmark)  
2d2b 32 9d fd			ld (debug_mark),a  
2d2e 3a 3d 2d			ld a, (.dmark+1)  
2d31 32 9e fd			ld (debug_mark+1),a  
2d34 3a 3e 2d			ld a, (.dmark+2)  
2d37 32 9f fd			ld (debug_mark+2),a  
2d3a 18 03			jr .pastdmark  
2d3c ..			.dmark: db "UWu"  
2d3f f1			.pastdmark: pop af  
2d40			endm  
# End of macro DMARK
2d40				CALLMONITOR 
2d40 cd aa fd			call debug_vector  
2d43				endm  
# End of macro CALLMONITOR
2d43			endif 
2d43				; we have a uword so push its name to the stack 
2d43			 
2d43 e5				push hl  ; save so we can move to next dict block 
2d44			 
2d44				; skip opcode 
2d44 23				inc hl  
2d45				; skip next ptr 
2d45 23				inc hl  
2d46 23				inc hl 
2d47				; skip len 
2d47 23				inc hl 
2d48			if DEBUG_FORTH_WORDS 
2d48				DMARK "UWt" 
2d48 f5				push af  
2d49 3a 5d 2d			ld a, (.dmark)  
2d4c 32 9d fd			ld (debug_mark),a  
2d4f 3a 5e 2d			ld a, (.dmark+1)  
2d52 32 9e fd			ld (debug_mark+1),a  
2d55 3a 5f 2d			ld a, (.dmark+2)  
2d58 32 9f fd			ld (debug_mark+2),a  
2d5b 18 03			jr .pastdmark  
2d5d ..			.dmark: db "UWt"  
2d60 f1			.pastdmark: pop af  
2d61			endm  
# End of macro DMARK
2d61				CALLMONITOR 
2d61 cd aa fd			call debug_vector  
2d64				endm  
# End of macro CALLMONITOR
2d64			endif 
2d64 03				inc bc 
2d65			 
2d65 c5				push bc 
2d66 cd da 1f			call forth_push_str 
2d69 c1				pop bc 
2d6a			 
2d6a e1				pop hl 	 
2d6b			 
2d6b cd 85 24		.nuword:	call forth_tok_next 
2d6e 18 92			jr .douscan  
2d70			 
2d70			.udone:		 ; push count of uwords found 
2d70 c5				push bc 
2d71 e1				pop hl 
2d72			 
2d72			if DEBUG_FORTH_WORDS 
2d72				DMARK "UWc" 
2d72 f5				push af  
2d73 3a 87 2d			ld a, (.dmark)  
2d76 32 9d fd			ld (debug_mark),a  
2d79 3a 88 2d			ld a, (.dmark+1)  
2d7c 32 9e fd			ld (debug_mark+1),a  
2d7f 3a 89 2d			ld a, (.dmark+2)  
2d82 32 9f fd			ld (debug_mark+2),a  
2d85 18 03			jr .pastdmark  
2d87 ..			.dmark: db "UWc"  
2d8a f1			.pastdmark: pop af  
2d8b			endm  
# End of macro DMARK
2d8b				CALLMONITOR 
2d8b cd aa fd			call debug_vector  
2d8e				endm  
# End of macro CALLMONITOR
2d8e			endif 
2d8e cd 70 1f			call forth_push_numhl 
2d91			 
2d91			 
2d91			       NEXTW 
2d91 cd a7 fd			call parse_vector 
2d94 c3 53 23			jp macro_next 
2d97				endm 
# End of macro NEXTW
2d97			 
2d97			.BP: 
2d97			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2d97 54				db WORD_SYS_CORE+64             
2d98 d7 2d			dw .MONITOR            
2d9a 03				db 2 + 1 
2d9b .. 00			db "BP",0              
2d9e				endm 
# End of macro CWHEAD
2d9e			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2d9e			; | | $00 Will enable the break points within specific code paths 
2d9e			; | | $01 Will disable break points 
2d9e			; | |  
2d9e			; | | By default break points are off. Either the above can be used to enable them 
2d9e			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2d9e			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2d9e			; | | can disable break points. Exiting will then continue boot process. 
2d9e				; get byte count 
2d9e				if DEBUG_FORTH_WORDS_KEY 
2d9e					DMARK "BP." 
2d9e f5				push af  
2d9f 3a b3 2d			ld a, (.dmark)  
2da2 32 9d fd			ld (debug_mark),a  
2da5 3a b4 2d			ld a, (.dmark+1)  
2da8 32 9e fd			ld (debug_mark+1),a  
2dab 3a b5 2d			ld a, (.dmark+2)  
2dae 32 9f fd			ld (debug_mark+2),a  
2db1 18 03			jr .pastdmark  
2db3 ..			.dmark: db "BP."  
2db6 f1			.pastdmark: pop af  
2db7			endm  
# End of macro DMARK
2db7					CALLMONITOR 
2db7 cd aa fd			call debug_vector  
2dba				endm  
# End of macro CALLMONITOR
2dba				endif 
2dba			 
2dba				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2dba cd 6c 21			call macro_dsp_valuehl 
2dbd				endm 
# End of macro FORTH_DSP_VALUEHL
2dbd			 
2dbd			;		push hl 
2dbd			 
2dbd				; destroy value TOS 
2dbd			 
2dbd				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2dbd cd 24 22			call macro_forth_dsp_pop 
2dc0				endm 
# End of macro FORTH_DSP_POP
2dc0			 
2dc0			;		pop hl 
2dc0			 
2dc0 3e 00			ld a,0 
2dc2 bd				cp l 
2dc3 28 09			jr z, .bpset 
2dc5			;		ld a, '*' 
2dc5 cd 8d 18			call bp_off 
2dc8				NEXTW 
2dc8 cd a7 fd			call parse_vector 
2dcb c3 53 23			jp macro_next 
2dce				endm 
# End of macro NEXTW
2dce			 
2dce			.bpset:	 
2dce				;	ld (os_view_disable), a 
2dce cd 81 18			call bp_on 
2dd1			 
2dd1			 
2dd1				NEXTW 
2dd1 cd a7 fd			call parse_vector 
2dd4 c3 53 23			jp macro_next 
2dd7				endm 
# End of macro NEXTW
2dd7			 
2dd7			 
2dd7			.MONITOR: 
2dd7			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2dd7 55				db WORD_SYS_CORE+65             
2dd8 0b 2e			dw .MALLOC            
2dda 08				db 7 + 1 
2ddb .. 00			db "MONITOR",0              
2de3				endm 
# End of macro CWHEAD
2de3			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2de3			; | | At start the current various registers will be displayed with contents. 
2de3			; | | Top right corner will show the most recent debug marker seen. 
2de3			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2de3			; | | and the return stack pointer (RSP). 
2de3			; | | Pressing: 
2de3			; | |  
2de3			; | |    1 - Initial screen 
2de3			; | |  
2de3			; | |    2 - Display a data dump of HL 
2de3			; | |  
2de3			; | |    3 - Display a data dump of DE 
2de3			; | |  
2de3			; | |    4 - Display a data dump of BC 
2de3			; | |  
2de3			; | |    5 - Display a data dump of HL 
2de3			; | |  
2de3			; | |    6 - Display a data dump of DSP 
2de3			; | |  
2de3			; | |    7 - Display a data dump of RSP 
2de3			; | |  
2de3			; | |    8 - Display a data dump of what is at DSP 
2de3			; | |  
2de3			; | |    9 - Display a data dump of what is at RSP 
2de3			; | |  
2de3			; | |    0 - Exit monitor and continue running. This will also enable break points 
2de3			; | |  
2de3			; | |    * - Disable break points 
2de3			; | |  
2de3			; | |    # - Enter traditional monitor mode 
2de3			; | |  
2de3			; | | 
2de3			; | | Monitor Mode 
2de3			; | | ------------ 
2de3			; | | A prompt of '>' will be shown for various commands: 
2de3			; | |  
2de3			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2de3			; | |  
2de3			; | |    C - Continue display a data dump from the last set address 
2de3			; | |  
2de3			; | |    M xxxx - Set start of memory edit at address xx 
2de3			; | |  
2de3			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2de3			; | |  
2de3			; | |    G xxxx - Exec code at specific address 
2de3			; | |  
2de3			; | |    Q - Return to previous 
2de3				if DEBUG_FORTH_WORDS_KEY 
2de3					DMARK "MON" 
2de3 f5				push af  
2de4 3a f8 2d			ld a, (.dmark)  
2de7 32 9d fd			ld (debug_mark),a  
2dea 3a f9 2d			ld a, (.dmark+1)  
2ded 32 9e fd			ld (debug_mark+1),a  
2df0 3a fa 2d			ld a, (.dmark+2)  
2df3 32 9f fd			ld (debug_mark+2),a  
2df6 18 03			jr .pastdmark  
2df8 ..			.dmark: db "MON"  
2dfb f1			.pastdmark: pop af  
2dfc			endm  
# End of macro DMARK
2dfc					CALLMONITOR 
2dfc cd aa fd			call debug_vector  
2dff				endm  
# End of macro CALLMONITOR
2dff				endif 
2dff			;		ld a, 0 
2dff			;		ld (os_view_disable), a 
2dff cd 81 18			call bp_on 
2e02			 
2e02				CALLMONITOR 
2e02 cd aa fd			call debug_vector  
2e05				endm  
# End of macro CALLMONITOR
2e05			 
2e05			;	call monitor 
2e05			 
2e05				NEXTW 
2e05 cd a7 fd			call parse_vector 
2e08 c3 53 23			jp macro_next 
2e0b				endm 
# End of macro NEXTW
2e0b			 
2e0b			 
2e0b			.MALLOC: 
2e0b			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2e0b 56				db WORD_SYS_CORE+66             
2e0c 34 2e			dw .MALLOC2            
2e0e 06				db 5 + 1 
2e0f .. 00			db "ALLOT",0              
2e15				endm 
# End of macro CWHEAD
2e15			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2e15				if DEBUG_FORTH_WORDS_KEY 
2e15					DMARK "ALL" 
2e15 f5				push af  
2e16 3a 2a 2e			ld a, (.dmark)  
2e19 32 9d fd			ld (debug_mark),a  
2e1c 3a 2b 2e			ld a, (.dmark+1)  
2e1f 32 9e fd			ld (debug_mark+1),a  
2e22 3a 2c 2e			ld a, (.dmark+2)  
2e25 32 9f fd			ld (debug_mark+2),a  
2e28 18 03			jr .pastdmark  
2e2a ..			.dmark: db "ALL"  
2e2d f1			.pastdmark: pop af  
2e2e			endm  
# End of macro DMARK
2e2e					CALLMONITOR 
2e2e cd aa fd			call debug_vector  
2e31				endm  
# End of macro CALLMONITOR
2e31				endif 
2e31 c3 5b 2e			jp .mallocc 
2e34			.MALLOC2: 
2e34			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2e34 56				db WORD_SYS_CORE+66             
2e35 75 2e			dw .FREE            
2e37 07				db 6 + 1 
2e38 .. 00			db "MALLOC",0              
2e3f				endm 
# End of macro CWHEAD
2e3f			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2e3f				; get byte count 
2e3f				if DEBUG_FORTH_WORDS_KEY 
2e3f					DMARK "MAL" 
2e3f f5				push af  
2e40 3a 54 2e			ld a, (.dmark)  
2e43 32 9d fd			ld (debug_mark),a  
2e46 3a 55 2e			ld a, (.dmark+1)  
2e49 32 9e fd			ld (debug_mark+1),a  
2e4c 3a 56 2e			ld a, (.dmark+2)  
2e4f 32 9f fd			ld (debug_mark+2),a  
2e52 18 03			jr .pastdmark  
2e54 ..			.dmark: db "MAL"  
2e57 f1			.pastdmark: pop af  
2e58			endm  
# End of macro DMARK
2e58					CALLMONITOR 
2e58 cd aa fd			call debug_vector  
2e5b				endm  
# End of macro CALLMONITOR
2e5b				endif 
2e5b			.mallocc: 
2e5b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2e5b cd 6c 21			call macro_dsp_valuehl 
2e5e				endm 
# End of macro FORTH_DSP_VALUEHL
2e5e			 
2e5e			;		push hl 
2e5e			 
2e5e				; destroy value TOS 
2e5e			 
2e5e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2e5e cd 24 22			call macro_forth_dsp_pop 
2e61				endm 
# End of macro FORTH_DSP_POP
2e61			 
2e61			;		pop hl 
2e61 cd 78 13			call malloc 
2e64			if DEBUG_FORTH_MALLOC_GUARD 
2e64 f5				push af 
2e65 cd d5 0f			call ishlzero 
2e68			;		ld a, l 
2e68			;		add h 
2e68			;		cp 0 
2e68 f1				pop af 
2e69				 
2e69 cc 62 64			call z,malloc_error 
2e6c			endif 
2e6c			 
2e6c cd 70 1f			call forth_push_numhl 
2e6f				NEXTW 
2e6f cd a7 fd			call parse_vector 
2e72 c3 53 23			jp macro_next 
2e75				endm 
# End of macro NEXTW
2e75			 
2e75			.FREE: 
2e75			CWHEAD .UPTR 67 "FREE" 4 WORD_FLAG_CODE 
2e75 57				db WORD_SYS_CORE+67             
2e76 a9 2e			dw .UPTR            
2e78 05				db 4 + 1 
2e79 .. 00			db "FREE",0              
2e7e				endm 
# End of macro CWHEAD
2e7e			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2e7e				if DEBUG_FORTH_WORDS_KEY 
2e7e					DMARK "FRE" 
2e7e f5				push af  
2e7f 3a 93 2e			ld a, (.dmark)  
2e82 32 9d fd			ld (debug_mark),a  
2e85 3a 94 2e			ld a, (.dmark+1)  
2e88 32 9e fd			ld (debug_mark+1),a  
2e8b 3a 95 2e			ld a, (.dmark+2)  
2e8e 32 9f fd			ld (debug_mark+2),a  
2e91 18 03			jr .pastdmark  
2e93 ..			.dmark: db "FRE"  
2e96 f1			.pastdmark: pop af  
2e97			endm  
# End of macro DMARK
2e97					CALLMONITOR 
2e97 cd aa fd			call debug_vector  
2e9a				endm  
# End of macro CALLMONITOR
2e9a				endif 
2e9a				; get address 
2e9a			 
2e9a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2e9a cd 6c 21			call macro_dsp_valuehl 
2e9d				endm 
# End of macro FORTH_DSP_VALUEHL
2e9d			 
2e9d			;		push hl 
2e9d			 
2e9d				; destroy value TOS 
2e9d			 
2e9d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2e9d cd 24 22			call macro_forth_dsp_pop 
2ea0				endm 
# End of macro FORTH_DSP_POP
2ea0			 
2ea0			;		pop hl 
2ea0			if FORTH_ENABLE_MALLOCFREE 
2ea0 cd 42 14			call free 
2ea3			endif 
2ea3				NEXTW 
2ea3 cd a7 fd			call parse_vector 
2ea6 c3 53 23			jp macro_next 
2ea9				endm 
# End of macro NEXTW
2ea9			.UPTR: 
2ea9			CWHEAD .LIST 67 "UPTR" 4 WORD_FLAG_CODE 
2ea9 57				db WORD_SYS_CORE+67             
2eaa af 2f			dw .LIST            
2eac 05				db 4 + 1 
2ead .. 00			db "UPTR",0              
2eb2				endm 
# End of macro CWHEAD
2eb2			; | UPTR ( s -- u ) Push the address of the exec code for the quoted used word s  | TODO 
2eb2				if DEBUG_FORTH_WORDS_KEY 
2eb2					DMARK "UPT" 
2eb2 f5				push af  
2eb3 3a c7 2e			ld a, (.dmark)  
2eb6 32 9d fd			ld (debug_mark),a  
2eb9 3a c8 2e			ld a, (.dmark+1)  
2ebc 32 9e fd			ld (debug_mark+1),a  
2ebf 3a c9 2e			ld a, (.dmark+2)  
2ec2 32 9f fd			ld (debug_mark+2),a  
2ec5 18 03			jr .pastdmark  
2ec7 ..			.dmark: db "UPT"  
2eca f1			.pastdmark: pop af  
2ecb			endm  
# End of macro DMARK
2ecb					CALLMONITOR 
2ecb cd aa fd			call debug_vector  
2ece				endm  
# End of macro CALLMONITOR
2ece				endif 
2ece				FORTH_DSP_VALUEHL 
2ece cd 6c 21			call macro_dsp_valuehl 
2ed1				endm 
# End of macro FORTH_DSP_VALUEHL
2ed1			 
2ed1 e5				push hl 
2ed2				FORTH_DSP_POP 
2ed2 cd 24 22			call macro_forth_dsp_pop 
2ed5				endm 
# End of macro FORTH_DSP_POP
2ed5 c1				pop bc 
2ed6			 
2ed6			 
2ed6				; Get ptr to the word we need to look up 
2ed6			 
2ed6			;		FORTH_DSP_VALUEHL 
2ed6				;v5 FORTH_DSP_VALUE 
2ed6			; TODO type check 
2ed6			;		inc hl    ; Skip type check  
2ed6			;		push hl 
2ed6			;		ex de, hl    ; put into DE 
2ed6			 
2ed6			 
2ed6 21 00 80			ld hl, baseram 
2ed9				;ld hl, baseusermem 
2ed9			 
2ed9 e5			push hl   ; sacreifical push 
2eda			 
2eda			.uldouscanm: 
2eda e1			pop hl 
2edb			.uldouscan: 
2edb			if DEBUG_FORTH_WORDS 
2edb				DMARK "LSs" 
2edb f5				push af  
2edc 3a f0 2e			ld a, (.dmark)  
2edf 32 9d fd			ld (debug_mark),a  
2ee2 3a f1 2e			ld a, (.dmark+1)  
2ee5 32 9e fd			ld (debug_mark+1),a  
2ee8 3a f2 2e			ld a, (.dmark+2)  
2eeb 32 9f fd			ld (debug_mark+2),a  
2eee 18 03			jr .pastdmark  
2ef0 ..			.dmark: db "LSs"  
2ef3 f1			.pastdmark: pop af  
2ef4			endm  
# End of macro DMARK
2ef4				CALLMONITOR 
2ef4 cd aa fd			call debug_vector  
2ef7				endm  
# End of macro CALLMONITOR
2ef7			endif 
2ef7			; skip dict stub 
2ef7 cd 85 24			call forth_tok_next 
2efa			 
2efa			 
2efa			; while we have words to look for 
2efa			 
2efa 7e			ld a, (hl)      
2efb			if DEBUG_FORTH_WORDS 
2efb				DMARK "LSk" 
2efb f5				push af  
2efc 3a 10 2f			ld a, (.dmark)  
2eff 32 9d fd			ld (debug_mark),a  
2f02 3a 11 2f			ld a, (.dmark+1)  
2f05 32 9e fd			ld (debug_mark+1),a  
2f08 3a 12 2f			ld a, (.dmark+2)  
2f0b 32 9f fd			ld (debug_mark+2),a  
2f0e 18 03			jr .pastdmark  
2f10 ..			.dmark: db "LSk"  
2f13 f1			.pastdmark: pop af  
2f14			endm  
# End of macro DMARK
2f14				CALLMONITOR 
2f14 cd aa fd			call debug_vector  
2f17				endm  
# End of macro CALLMONITOR
2f17			endif 
2f17				;cp WORD_SYS_END 
2f17				;jp z, .lunotfound 
2f17			 
2f17					; if we hit non uwords then gone too far 
2f17 fe 01				cp WORD_SYS_UWORD 
2f19 c2 a6 2f				jp nz, .ulunotfound 
2f1c			 
2f1c				if DEBUG_FORTH_WORDS 
2f1c					DMARK "LSu" 
2f1c f5				push af  
2f1d 3a 31 2f			ld a, (.dmark)  
2f20 32 9d fd			ld (debug_mark),a  
2f23 3a 32 2f			ld a, (.dmark+1)  
2f26 32 9e fd			ld (debug_mark+1),a  
2f29 3a 33 2f			ld a, (.dmark+2)  
2f2c 32 9f fd			ld (debug_mark+2),a  
2f2f 18 03			jr .pastdmark  
2f31 ..			.dmark: db "LSu"  
2f34 f1			.pastdmark: pop af  
2f35			endm  
# End of macro DMARK
2f35					CALLMONITOR 
2f35 cd aa fd			call debug_vector  
2f38				endm  
# End of macro CALLMONITOR
2f38				endif 
2f38			 
2f38					; found a uword but is it the one we want... 
2f38			 
2f38 c5					push bc     ; uword to find is on bc 
2f39 d1					pop de 
2f3a			 
2f3a e5					push hl  ; to save the ptr 
2f3b			 
2f3b					; skip opcode 
2f3b 23					inc hl  
2f3c					; skip next ptr 
2f3c 23					inc hl  
2f3d 23					inc hl 
2f3e					; skip len 
2f3e 23					inc hl 
2f3f			 
2f3f				if DEBUG_FORTH_WORDS 
2f3f					DMARK "LSc" 
2f3f f5				push af  
2f40 3a 54 2f			ld a, (.dmark)  
2f43 32 9d fd			ld (debug_mark),a  
2f46 3a 55 2f			ld a, (.dmark+1)  
2f49 32 9e fd			ld (debug_mark+1),a  
2f4c 3a 56 2f			ld a, (.dmark+2)  
2f4f 32 9f fd			ld (debug_mark+2),a  
2f52 18 03			jr .pastdmark  
2f54 ..			.dmark: db "LSc"  
2f57 f1			.pastdmark: pop af  
2f58			endm  
# End of macro DMARK
2f58					CALLMONITOR 
2f58 cd aa fd			call debug_vector  
2f5b				endm  
# End of macro CALLMONITOR
2f5b				endif 
2f5b			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2f5b			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2f5b			; Nope that has gone the other way. It needs to be exact not on first zero 
2f5b			;		call strcmp 
2f5b c5					push bc 
2f5c cd 48 13				call StrictStrCmp 
2f5f c1					pop bc 
2f60 c2 da 2e				jp nz, .uldouscanm 
2f63				 
2f63			 
2f63			 
2f63					; we have a uword so push its name to the stack 
2f63			 
2f63			;	   	push hl  ; save so we can move to next dict block 
2f63 e1			pop hl 
2f64			 
2f64				if DEBUG_FORTH_WORDS 
2f64					DMARK "LSm" 
2f64 f5				push af  
2f65 3a 79 2f			ld a, (.dmark)  
2f68 32 9d fd			ld (debug_mark),a  
2f6b 3a 7a 2f			ld a, (.dmark+1)  
2f6e 32 9e fd			ld (debug_mark+1),a  
2f71 3a 7b 2f			ld a, (.dmark+2)  
2f74 32 9f fd			ld (debug_mark+2),a  
2f77 18 03			jr .pastdmark  
2f79 ..			.dmark: db "LSm"  
2f7c f1			.pastdmark: pop af  
2f7d			endm  
# End of macro DMARK
2f7d					CALLMONITOR 
2f7d cd aa fd			call debug_vector  
2f80				endm  
# End of macro CALLMONITOR
2f80				endif 
2f80			 
2f80					; skip opcode 
2f80 23					inc hl  
2f81					; skip next ptr 
2f81 23					inc hl  
2f82 23					inc hl 
2f83					; skip len 
2f83 7e					ld a, (hl)   ; save length to add 
2f84				if DEBUG_FORTH_WORDS 
2f84					DMARK "LS2" 
2f84 f5				push af  
2f85 3a 99 2f			ld a, (.dmark)  
2f88 32 9d fd			ld (debug_mark),a  
2f8b 3a 9a 2f			ld a, (.dmark+1)  
2f8e 32 9e fd			ld (debug_mark+1),a  
2f91 3a 9b 2f			ld a, (.dmark+2)  
2f94 32 9f fd			ld (debug_mark+2),a  
2f97 18 03			jr .pastdmark  
2f99 ..			.dmark: db "LS2"  
2f9c f1			.pastdmark: pop af  
2f9d			endm  
# End of macro DMARK
2f9d					CALLMONITOR 
2f9d cd aa fd			call debug_vector  
2fa0				endm  
# End of macro CALLMONITOR
2fa0				endif 
2fa0			 
2fa0				; skip zero term and other uword defs to position right at the exec code 
2fa0 06 04			ld b, 4 
2fa2 80				add a,b 
2fa3			 
2fa3 cd ac 0f			call addatohl 
2fa6					; save this location 
2fa6				 
2fa6			.ulunotfound: 
2fa6 cd 70 1f			call forth_push_numhl 
2fa9						 
2fa9				NEXTW 
2fa9 cd a7 fd			call parse_vector 
2fac c3 53 23			jp macro_next 
2faf				endm 
# End of macro NEXTW
2faf			.LIST: 
2faf			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2faf 5c				db WORD_SYS_CORE+72             
2fb0 b1 31			dw .FORGET            
2fb2 05				db 4 + 1 
2fb3 .. 00			db "LIST",0              
2fb8				endm 
# End of macro CWHEAD
2fb8			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2fb8			; | | The quoted word must be in upper case. 
2fb8			if DEBUG_FORTH_WORDS_KEY 
2fb8				DMARK "LST" 
2fb8 f5				push af  
2fb9 3a cd 2f			ld a, (.dmark)  
2fbc 32 9d fd			ld (debug_mark),a  
2fbf 3a ce 2f			ld a, (.dmark+1)  
2fc2 32 9e fd			ld (debug_mark+1),a  
2fc5 3a cf 2f			ld a, (.dmark+2)  
2fc8 32 9f fd			ld (debug_mark+2),a  
2fcb 18 03			jr .pastdmark  
2fcd ..			.dmark: db "LST"  
2fd0 f1			.pastdmark: pop af  
2fd1			endm  
# End of macro DMARK
2fd1				CALLMONITOR 
2fd1 cd aa fd			call debug_vector  
2fd4				endm  
# End of macro CALLMONITOR
2fd4			endif 
2fd4			 
2fd4				FORTH_DSP_VALUEHL 
2fd4 cd 6c 21			call macro_dsp_valuehl 
2fd7				endm 
# End of macro FORTH_DSP_VALUEHL
2fd7			 
2fd7 e5				push hl 
2fd8				FORTH_DSP_POP 
2fd8 cd 24 22			call macro_forth_dsp_pop 
2fdb				endm 
# End of macro FORTH_DSP_POP
2fdb c1				pop bc 
2fdc			 
2fdc			; Start format of scratch string 
2fdc			 
2fdc 21 f3 f0			ld hl, scratch 
2fdf			 
2fdf			;	ld a, ':' 
2fdf 36 3a			ld (hl),':' 
2fe1 23				inc hl 
2fe2			;	ld a, ' ' 
2fe2 36 20			ld (hl), ' ' 
2fe4			 
2fe4				; Get ptr to the word we need to look up 
2fe4			 
2fe4			;		FORTH_DSP_VALUEHL 
2fe4				;v5 FORTH_DSP_VALUE 
2fe4			; TODO type check 
2fe4			;		inc hl    ; Skip type check  
2fe4			;		push hl 
2fe4			;		ex de, hl    ; put into DE 
2fe4			 
2fe4			 
2fe4 21 00 80			ld hl, baseram 
2fe7				;ld hl, baseusermem 
2fe7			 
2fe7 e5			push hl   ; sacreifical push 
2fe8			 
2fe8			.ldouscanm: 
2fe8 e1			pop hl 
2fe9			.ldouscan: 
2fe9			if DEBUG_FORTH_WORDS 
2fe9				DMARK "LSs" 
2fe9 f5				push af  
2fea 3a fe 2f			ld a, (.dmark)  
2fed 32 9d fd			ld (debug_mark),a  
2ff0 3a ff 2f			ld a, (.dmark+1)  
2ff3 32 9e fd			ld (debug_mark+1),a  
2ff6 3a 00 30			ld a, (.dmark+2)  
2ff9 32 9f fd			ld (debug_mark+2),a  
2ffc 18 03			jr .pastdmark  
2ffe ..			.dmark: db "LSs"  
3001 f1			.pastdmark: pop af  
3002			endm  
# End of macro DMARK
3002				CALLMONITOR 
3002 cd aa fd			call debug_vector  
3005				endm  
# End of macro CALLMONITOR
3005			endif 
3005			; skip dict stub 
3005 cd 85 24			call forth_tok_next 
3008			 
3008			 
3008			; while we have words to look for 
3008			 
3008 7e			ld a, (hl)      
3009			if DEBUG_FORTH_WORDS 
3009				DMARK "LSk" 
3009 f5				push af  
300a 3a 1e 30			ld a, (.dmark)  
300d 32 9d fd			ld (debug_mark),a  
3010 3a 1f 30			ld a, (.dmark+1)  
3013 32 9e fd			ld (debug_mark+1),a  
3016 3a 20 30			ld a, (.dmark+2)  
3019 32 9f fd			ld (debug_mark+2),a  
301c 18 03			jr .pastdmark  
301e ..			.dmark: db "LSk"  
3021 f1			.pastdmark: pop af  
3022			endm  
# End of macro DMARK
3022				CALLMONITOR 
3022 cd aa fd			call debug_vector  
3025				endm  
# End of macro CALLMONITOR
3025			endif 
3025				;cp WORD_SYS_END 
3025				;jp z, .lunotfound 
3025			 
3025					; if we hit non uwords then gone too far 
3025 fe 01				cp WORD_SYS_UWORD 
3027 c2 64 31				jp nz, .lunotfound 
302a			 
302a				if DEBUG_FORTH_WORDS 
302a					DMARK "LSu" 
302a f5				push af  
302b 3a 3f 30			ld a, (.dmark)  
302e 32 9d fd			ld (debug_mark),a  
3031 3a 40 30			ld a, (.dmark+1)  
3034 32 9e fd			ld (debug_mark+1),a  
3037 3a 41 30			ld a, (.dmark+2)  
303a 32 9f fd			ld (debug_mark+2),a  
303d 18 03			jr .pastdmark  
303f ..			.dmark: db "LSu"  
3042 f1			.pastdmark: pop af  
3043			endm  
# End of macro DMARK
3043					CALLMONITOR 
3043 cd aa fd			call debug_vector  
3046				endm  
# End of macro CALLMONITOR
3046				endif 
3046			 
3046					; found a uword but is it the one we want... 
3046			 
3046 c5					push bc     ; uword to find is on bc 
3047 d1					pop de 
3048			 
3048 e5					push hl  ; to save the ptr 
3049			 
3049					; skip opcode 
3049 23					inc hl  
304a					; skip next ptr 
304a 23					inc hl  
304b 23					inc hl 
304c					; skip len 
304c 23					inc hl 
304d			 
304d				if DEBUG_FORTH_WORDS 
304d					DMARK "LSc" 
304d f5				push af  
304e 3a 62 30			ld a, (.dmark)  
3051 32 9d fd			ld (debug_mark),a  
3054 3a 63 30			ld a, (.dmark+1)  
3057 32 9e fd			ld (debug_mark+1),a  
305a 3a 64 30			ld a, (.dmark+2)  
305d 32 9f fd			ld (debug_mark+2),a  
3060 18 03			jr .pastdmark  
3062 ..			.dmark: db "LSc"  
3065 f1			.pastdmark: pop af  
3066			endm  
# End of macro DMARK
3066					CALLMONITOR 
3066 cd aa fd			call debug_vector  
3069				endm  
# End of macro CALLMONITOR
3069				endif 
3069			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
3069			; ie. If WOO is defined first and then WO. Couldnt list WO. 
3069			; Nope that has gone the other way. It needs to be exact not on first zero 
3069			;		call strcmp 
3069 c5					push bc 
306a cd 48 13				call StrictStrCmp 
306d c1					pop bc 
306e c2 e8 2f				jp nz, .ldouscanm 
3071				 
3071			 
3071			 
3071					; we have a uword so push its name to the stack 
3071			 
3071			;	   	push hl  ; save so we can move to next dict block 
3071 e1			pop hl 
3072			 
3072				if DEBUG_FORTH_WORDS 
3072					DMARK "LSm" 
3072 f5				push af  
3073 3a 87 30			ld a, (.dmark)  
3076 32 9d fd			ld (debug_mark),a  
3079 3a 88 30			ld a, (.dmark+1)  
307c 32 9e fd			ld (debug_mark+1),a  
307f 3a 89 30			ld a, (.dmark+2)  
3082 32 9f fd			ld (debug_mark+2),a  
3085 18 03			jr .pastdmark  
3087 ..			.dmark: db "LSm"  
308a f1			.pastdmark: pop af  
308b			endm  
# End of macro DMARK
308b					CALLMONITOR 
308b cd aa fd			call debug_vector  
308e				endm  
# End of macro CALLMONITOR
308e				endif 
308e			 
308e					; skip opcode 
308e 23					inc hl  
308f					; skip next ptr 
308f 23					inc hl  
3090 23					inc hl 
3091					; skip len 
3091 7e					ld a, (hl)   ; save length to add 
3092				if DEBUG_FORTH_WORDS 
3092					DMARK "LS2" 
3092 f5				push af  
3093 3a a7 30			ld a, (.dmark)  
3096 32 9d fd			ld (debug_mark),a  
3099 3a a8 30			ld a, (.dmark+1)  
309c 32 9e fd			ld (debug_mark+1),a  
309f 3a a9 30			ld a, (.dmark+2)  
30a2 32 9f fd			ld (debug_mark+2),a  
30a5 18 03			jr .pastdmark  
30a7 ..			.dmark: db "LS2"  
30aa f1			.pastdmark: pop af  
30ab			endm  
# End of macro DMARK
30ab					CALLMONITOR 
30ab cd aa fd			call debug_vector  
30ae				endm  
# End of macro CALLMONITOR
30ae				endif 
30ae			 
30ae					; save this location 
30ae				 
30ae e5					push hl 
30af			 
30af 23					inc hl 
30b0 11 f5 f0				ld de, scratch+2 
30b3 4f					ld c, a 
30b4 06 00				ld b, 0 
30b6			 
30b6				if DEBUG_FORTH_WORDS 
30b6					DMARK "LSn" 
30b6 f5				push af  
30b7 3a cb 30			ld a, (.dmark)  
30ba 32 9d fd			ld (debug_mark),a  
30bd 3a cc 30			ld a, (.dmark+1)  
30c0 32 9e fd			ld (debug_mark+1),a  
30c3 3a cd 30			ld a, (.dmark+2)  
30c6 32 9f fd			ld (debug_mark+2),a  
30c9 18 03			jr .pastdmark  
30cb ..			.dmark: db "LSn"  
30ce f1			.pastdmark: pop af  
30cf			endm  
# End of macro DMARK
30cf					CALLMONITOR 
30cf cd aa fd			call debug_vector  
30d2				endm  
# End of macro CALLMONITOR
30d2				endif 
30d2			 
30d2					; copy uword name to scratch 
30d2			 
30d2			;		ldir 
30d2			.licplw:	; copy uword name to scratch converting to lower case as we go 
30d2 ed a0				ldi 
30d4 1b					dec de 
30d5 1a					ld a, (de) 
30d6 cd 1d 12				call to_lower 
30d9 12					ld (de),a 
30da 13					inc de 
30db 3e 00				ld a, 0 
30dd b9					cp c 
30de 20 f2				jr nz, .licplw 
30e0			 
30e0			 
30e0			 
30e0 1b					dec de 
30e1 3e 20				ld a, ' '    ; change null to space 
30e3 12					ld (de), a 
30e4			 
30e4 13					inc de 
30e5			 
30e5 d5					push de 
30e6 c1					pop bc     ; move scratch pointer to end of word name and save it 
30e7			 
30e7 e1					pop hl 
30e8 7e					ld a, (hl) 
30e9					;inc hl 
30e9					; skip word string 
30e9 cd ac 0f				call addatohl 
30ec			 
30ec 23					inc hl 
30ed			 
30ed				if DEBUG_FORTH_WORDS 
30ed					DMARK "LS3" 
30ed f5				push af  
30ee 3a 02 31			ld a, (.dmark)  
30f1 32 9d fd			ld (debug_mark),a  
30f4 3a 03 31			ld a, (.dmark+1)  
30f7 32 9e fd			ld (debug_mark+1),a  
30fa 3a 04 31			ld a, (.dmark+2)  
30fd 32 9f fd			ld (debug_mark+2),a  
3100 18 03			jr .pastdmark  
3102 ..			.dmark: db "LS3"  
3105 f1			.pastdmark: pop af  
3106			endm  
# End of macro DMARK
3106					CALLMONITOR 
3106 cd aa fd			call debug_vector  
3109				endm  
# End of macro CALLMONITOR
3109				endif 
3109					; should now be at the start of the machine code to setup the eval of the uword 
3109					; now locate the ptr to the string defintion 
3109			 
3109					; skip ld hl, 
3109					; then load the ptr 
3109			; TODO use get from hl ptr 
3109 23					inc hl 
310a 5e					ld e, (hl) 
310b 23					inc hl 
310c 56					ld d, (hl) 
310d eb					ex de, hl 
310e			 
310e			 
310e				if DEBUG_FORTH_WORDS 
310e					DMARK "LSt" 
310e f5				push af  
310f 3a 23 31			ld a, (.dmark)  
3112 32 9d fd			ld (debug_mark),a  
3115 3a 24 31			ld a, (.dmark+1)  
3118 32 9e fd			ld (debug_mark+1),a  
311b 3a 25 31			ld a, (.dmark+2)  
311e 32 9f fd			ld (debug_mark+2),a  
3121 18 03			jr .pastdmark  
3123 ..			.dmark: db "LSt"  
3126 f1			.pastdmark: pop af  
3127			endm  
# End of macro DMARK
3127					CALLMONITOR 
3127 cd aa fd			call debug_vector  
312a				endm  
# End of macro CALLMONITOR
312a				endif 
312a			 
312a			; cant push right now due to tokenised strings  
312a			 
312a			; get the destination of where to copy this definition to. 
312a			 
312a c5					push bc 
312b d1					pop de 
312c			 
312c 7e			.listl:         ld a,(hl) 
312d			;		cp 0 
312d b7					or a 
312e 28 09				jr z, .lreplsp     ; replace zero with space 
3130					;cp FORTH_END_BUFFER 
3130 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
3132 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
3134				 
3134					; just copy this char as is then 
3134			 
3134 12					ld (de), a 
3135			 
3135 23			.listnxt:	inc hl 
3136 13					inc de 
3137 18 f3				jr .listl 
3139			 
3139 3e 20		.lreplsp:	ld a,' ' 
313b 12					ld (de), a 
313c 18 f7				jr .listnxt 
313e			 
313e			; close up uword def 
313e			 
313e			.listdone: 
313e 12					ld (de), a 
313f 13					inc de 
3140 3e 00				ld a, 0 
3142 12					ld (de), a 
3143			 
3143			; now have def so clean up and push to stack 
3143			 
3143 21 f3 f0				ld hl, scratch 
3146				if DEBUG_FORTH_WORDS 
3146					DMARK "Ltp" 
3146 f5				push af  
3147 3a 5b 31			ld a, (.dmark)  
314a 32 9d fd			ld (debug_mark),a  
314d 3a 5c 31			ld a, (.dmark+1)  
3150 32 9e fd			ld (debug_mark+1),a  
3153 3a 5d 31			ld a, (.dmark+2)  
3156 32 9f fd			ld (debug_mark+2),a  
3159 18 03			jr .pastdmark  
315b ..			.dmark: db "Ltp"  
315e f1			.pastdmark: pop af  
315f			endm  
# End of macro DMARK
315f					CALLMONITOR 
315f cd aa fd			call debug_vector  
3162				endm  
# End of macro CALLMONITOR
3162				endif 
3162			 
3162 18 22			jr .listpush 
3164			 
3164			;.lnuword:	pop hl 
3164			;		call forth_tok_next 
3164			;		jp .ldouscan  
3164			 
3164			.lunotfound:		  
3164			 
3164				if DEBUG_FORTH_WORDS 
3164					DMARK "LSn" 
3164 f5				push af  
3165 3a 79 31			ld a, (.dmark)  
3168 32 9d fd			ld (debug_mark),a  
316b 3a 7a 31			ld a, (.dmark+1)  
316e 32 9e fd			ld (debug_mark+1),a  
3171 3a 7b 31			ld a, (.dmark+2)  
3174 32 9f fd			ld (debug_mark+2),a  
3177 18 03			jr .pastdmark  
3179 ..			.dmark: db "LSn"  
317c f1			.pastdmark: pop af  
317d			endm  
# End of macro DMARK
317d					CALLMONITOR 
317d cd aa fd			call debug_vector  
3180				endm  
# End of macro CALLMONITOR
3180				endif 
3180			 
3180					 
3180			;		FORTH_DSP_POP 
3180			;		ld hl, .luno 
3180			 
3180					NEXTW			 
3180 cd a7 fd			call parse_vector 
3183 c3 53 23			jp macro_next 
3186				endm 
# End of macro NEXTW
3186			 
3186			.listpush: 
3186				if DEBUG_FORTH_WORDS 
3186					DMARK "LS>" 
3186 f5				push af  
3187 3a 9b 31			ld a, (.dmark)  
318a 32 9d fd			ld (debug_mark),a  
318d 3a 9c 31			ld a, (.dmark+1)  
3190 32 9e fd			ld (debug_mark+1),a  
3193 3a 9d 31			ld a, (.dmark+2)  
3196 32 9f fd			ld (debug_mark+2),a  
3199 18 03			jr .pastdmark  
319b ..			.dmark: db "LS>"  
319e f1			.pastdmark: pop af  
319f			endm  
# End of macro DMARK
319f					CALLMONITOR 
319f cd aa fd			call debug_vector  
31a2				endm  
# End of macro CALLMONITOR
31a2				endif 
31a2 cd da 1f				call forth_push_str 
31a5			 
31a5			 
31a5			 
31a5					NEXTW 
31a5 cd a7 fd			call parse_vector 
31a8 c3 53 23			jp macro_next 
31ab				endm 
# End of macro NEXTW
31ab			 
31ab			;.luno:    db "Word not found",0 
31ab			 
31ab			 
31ab			 
31ab			 
31ab			 
31ab			;		push hl   ; save pointer to start of uword def string 
31ab			; 
31ab			;; look for FORTH_EOL_LINE 
31ab			;		ld a, FORTH_END_BUFFER 
31ab			;		call strlent 
31ab			; 
31ab			;		inc hl		 ; space for coln def 
31ab			;		inc hl 
31ab			;		inc hl          ; space for terms 
31ab			;		inc hl 
31ab			; 
31ab			;		ld a, 20   ; TODO get actual length 
31ab			;		call addatohl    ; include a random amount of room for the uword name 
31ab			; 
31ab			;		 
31ab			;	if DEBUG_FORTH_WORDS 
31ab			;		DMARK "Lt1" 
31ab			;		CALLMONITOR 
31ab			;	endif 
31ab			;		 
31ab			; 
31ab			;; malloc space for the string because we cant change it 
31ab			; 
31ab			;		call malloc 
31ab			;	if DEBUG_FORTH_MALLOC_GUARD 
31ab			;		push af 
31ab			;		call ishlzero 
31ab			;		pop af 
31ab			;		 
31ab			;		call z,malloc_error 
31ab			;	endif 
31ab			; 
31ab			;	if DEBUG_FORTH_WORDS 
31ab			;		DMARK "Lt2" 
31ab			;		CALLMONITOR 
31ab			;	endif 
31ab			;		pop de 
31ab			;		push hl    ; push the malloc to release later 
31ab			;		push hl   ;  push back a copy for the later stack push 
31ab			;		 
31ab			;; copy the string swapping out the zero terms for spaces 
31ab			; 
31ab			;		; de has our source 
31ab			;		; hl has our dest 
31ab			; 
31ab			;; add the coln def 
31ab			; 
31ab			;		ld a, ':' 
31ab			;		ld (hl), a 
31ab			;		inc hl 
31ab			;		ld a, ' ' 
31ab			;		ld (hl), a 
31ab			;		inc hl 
31ab			; 
31ab			;; add the uname word 
31ab			;		push de   ; save our string for now 
31ab			;		ex de, hl 
31ab			; 
31ab			;		FORTH_DSP_VALUE 
31ab			;		;v5 FORTH_DSP_VALUE 
31ab			; 
31ab			;		inc hl   ; skip type but we know by now this is OK 
31ab			; 
31ab			;.luword:	ld a,(hl) 
31ab			;		cp 0 
31ab			;		jr z, .luword2 
31ab			;		ld (de), a 
31ab			;		inc de 
31ab			;		inc hl 
31ab			;		jr .luword 
31ab			; 
31ab			;.luword2:	ld a, ' ' 
31ab			;		ld (de), a 
31ab			;;		inc hl 
31ab			;;		inc de 
31ab			;;		ld (de), a 
31ab			;;		inc hl 
31ab			;		inc de 
31ab			; 
31ab			;		ex de, hl 
31ab			;		pop de 
31ab			;		 
31ab			;		 
31ab			; 
31ab			;; detoken that string and copy it 
31ab			; 
31ab			;	if DEBUG_FORTH_WORDS 
31ab			;		DMARK "Lt2" 
31ab			;		CALLMONITOR 
31ab			;	endif 
31ab			;.ldetok:	ld a, (de) 
31ab			;		cp FORTH_END_BUFFER 
31ab			;		jr z, .ldetokend 
31ab			;		; swap out any zero term for space 
31ab			;		cp 0 
31ab			;		jr nz, .ldetoknext 
31ab			;		ld a, ' ' 
31ab			; 
31ab			;	if DEBUG_FORTH_WORDS 
31ab			;		DMARK "LtS" 
31ab			;		CALLMONITOR 
31ab			;	endif 
31ab			;.ldetoknext:	ld (hl), a 
31ab			;		inc de 
31ab			;		inc hl 
31ab			;		jr .ldetok 
31ab			; 
31ab			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
31ab			;		ld (hl), a  
31ab			; 
31ab			;; free that temp malloc 
31ab			; 
31ab			;		pop hl    
31ab			; 
31ab			;	if DEBUG_FORTH_WORDS 
31ab			;		DMARK "Lt4" 
31ab			;		CALLMONITOR 
31ab			;	endif 
31ab			;		call forth_apushstrhl 
31ab			; 
31ab			;		; get rid of temp malloc area 
31ab			; 
31ab			;		pop hl 
31ab			;		call free 
31ab			; 
31ab			;		jr .ludone 
31ab			; 
31ab			;.lnuword:	pop hl 
31ab			;		call forth_tok_next 
31ab			;		jp .ldouscan  
31ab			; 
31ab			;.ludone:		 pop hl 
31ab			; 
31ab					NEXTW 
31ab cd a7 fd			call parse_vector 
31ae c3 53 23			jp macro_next 
31b1				endm 
# End of macro NEXTW
31b1			 
31b1			.FORGET: 
31b1				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
31b1 5d				db WORD_SYS_CORE+73             
31b2 2c 32			dw .NOP            
31b4 07				db 6 + 1 
31b5 .. 00			db "FORGET",0              
31bc				endm 
# End of macro CWHEAD
31bc			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
31bc			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
31bc			; | |  
31bc			; | | e.g. "MORE" forget 
31bc					if DEBUG_FORTH_WORDS_KEY 
31bc						DMARK "FRG" 
31bc f5				push af  
31bd 3a d1 31			ld a, (.dmark)  
31c0 32 9d fd			ld (debug_mark),a  
31c3 3a d2 31			ld a, (.dmark+1)  
31c6 32 9e fd			ld (debug_mark+1),a  
31c9 3a d3 31			ld a, (.dmark+2)  
31cc 32 9f fd			ld (debug_mark+2),a  
31cf 18 03			jr .pastdmark  
31d1 ..			.dmark: db "FRG"  
31d4 f1			.pastdmark: pop af  
31d5			endm  
# End of macro DMARK
31d5						CALLMONITOR 
31d5 cd aa fd			call debug_vector  
31d8				endm  
# End of macro CALLMONITOR
31d8					endif 
31d8			 
31d8				; find uword 
31d8			        ; update start of word with "_" 
31d8				; replace uword with deleted flag 
31d8			 
31d8			 
31d8			;	if DEBUG_FORTH_WORDS 
31d8			;		DMARK "FOG" 
31d8			;		CALLMONITOR 
31d8			;	endif 
31d8			 
31d8			 
31d8					; Get ptr to the word we need to look up 
31d8			 
31d8					FORTH_DSP_VALUEHL 
31d8 cd 6c 21			call macro_dsp_valuehl 
31db				endm 
# End of macro FORTH_DSP_VALUEHL
31db					;v5 FORTH_DSP_VALUE 
31db				; TODO type check 
31db			;		inc hl    ; Skip type check  
31db e5					push hl 
31dc c1					pop bc 
31dd			;		ex de, hl    ; put into DE 
31dd			 
31dd			 
31dd 21 00 80				ld hl, baseram 
31e0					;ld hl, baseusermem 
31e0			 
31e0				; skip dict stub 
31e0			;	call forth_tok_next 
31e0 e5			push hl   ; sacreifical push 
31e1			 
31e1			.fldouscanm: 
31e1 e1				pop hl 
31e2			.fldouscan: 
31e2			;	if DEBUG_FORTH_WORDS 
31e2			;		DMARK "LSs" 
31e2			;		CALLMONITOR 
31e2			;	endif 
31e2				; skip dict stub 
31e2 cd 85 24				call forth_tok_next 
31e5			 
31e5			 
31e5			; while we have words to look for 
31e5			 
31e5 7e				ld a, (hl)      
31e6			;	if DEBUG_FORTH_WORDS 
31e6			;		DMARK "LSk" 
31e6			;		CALLMONITOR 
31e6			;	endif 
31e6 fe 00				cp WORD_SYS_END 
31e8 ca 23 32				jp z, .flunotfound 
31eb fe 01				cp WORD_SYS_UWORD 
31ed c2 e2 31				jp nz, .fldouscan 
31f0			 
31f0			;	if DEBUG_FORTH_WORDS 
31f0			;		DMARK "LSu" 
31f0			;		CALLMONITOR 
31f0			;	endif 
31f0			 
31f0					; found a uword but is it the one we want... 
31f0			 
31f0 c5					push bc     ; uword to find is on bc 
31f1 d1					pop de 
31f2			 
31f2 e5					push hl  ; to save the ptr 
31f3			 
31f3					; skip opcode 
31f3 23					inc hl  
31f4					; skip next ptr 
31f4 23					inc hl  
31f5 23					inc hl 
31f6					; skip len 
31f6 23					inc hl 
31f7			 
31f7			;	if DEBUG_FORTH_WORDS 
31f7			;		DMARK "LSc" 
31f7			;		CALLMONITOR 
31f7			;	endif 
31f7 cd 3c 13				call strcmp 
31fa c2 e1 31				jp nz, .fldouscanm 
31fd			; 
31fd			; 
31fd			;; while we have words to look for 
31fd			; 
31fd			;.fdouscan:	ld a, (hl)      
31fd			;	if DEBUG_FORTH_WORDS 
31fd			;		DMARK "LSs" 
31fd			;		CALLMONITOR 
31fd			;	endif 
31fd			;		cp WORD_SYS_END 
31fd			;		jp z, .fudone 
31fd			;		cp WORD_SYS_UWORD 
31fd			;		jp nz, .fnuword 
31fd			; 
31fd			;	if DEBUG_FORTH_WORDS 
31fd			;		DMARK "FGu" 
31fd			;		CALLMONITOR 
31fd			;	endif 
31fd			; 
31fd			;		; found a uword but is it the one we want... 
31fd			; 
31fd			; 
31fd			;	        pop de   ; get back the dsp name 
31fd			;		push de 
31fd			; 
31fd			;		push hl  ; to save the ptr 
31fd			; 
31fd			;		; skip opcode 
31fd			;		inc hl  
31fd			;		; skip next ptr 
31fd			;		inc hl  
31fd			;		inc hl 
31fd			;		; skip len 
31fd			;		inc hl 
31fd			; 
31fd			;	if DEBUG_FORTH_WORDS 
31fd			;		DMARK "FGc" 
31fd			;		CALLMONITOR 
31fd			;	endif 
31fd			;		call strcmp 
31fd			;		jp nz, .fnuword 
31fd			 
31fd			 
31fd e1			pop hl 
31fe			 
31fe				 
31fe				if DEBUG_FORTH_WORDS 
31fe					DMARK "FGm" 
31fe f5				push af  
31ff 3a 13 32			ld a, (.dmark)  
3202 32 9d fd			ld (debug_mark),a  
3205 3a 14 32			ld a, (.dmark+1)  
3208 32 9e fd			ld (debug_mark+1),a  
320b 3a 15 32			ld a, (.dmark+2)  
320e 32 9f fd			ld (debug_mark+2),a  
3211 18 03			jr .pastdmark  
3213 ..			.dmark: db "FGm"  
3216 f1			.pastdmark: pop af  
3217			endm  
# End of macro DMARK
3217					CALLMONITOR 
3217 cd aa fd			call debug_vector  
321a				endm  
# End of macro CALLMONITOR
321a				endif 
321a			 
321a			 
321a			 
321a					; we have a uword so push its name to the stack 
321a			 
321a			;	   	push hl  ; save so we can move to next dict block 
321a			;pop hl 
321a			 
321a					; update opcode to deleted 
321a			;		ld a, WORD_SYS_DELETED 
321a 36 03				ld (hl), WORD_SYS_DELETED 
321c			 
321c 23					inc hl  
321d					; skip next ptr 
321d 23					inc hl  
321e 23					inc hl 
321f					; skip len 
321f 23					inc hl 
3220			 
3220					; TODO change parser to skip deleted words but for now mark it out 
3220 3e 5f				ld a, "_" 
3222 77					ld  (hl),a 
3223			 
3223			;		jr .fudone 
3223			; 
3223			;.fnuword:	pop hl 
3223			;		call forth_tok_next 
3223			;		jp .fdouscan  
3223			 
3223			.flunotfound:		  
3223			 
3223			 
3223					 
3223					FORTH_DSP_POP 
3223 cd 24 22			call macro_forth_dsp_pop 
3226				endm 
# End of macro FORTH_DSP_POP
3226			;		ld hl, .luno 
3226			;.fudone:		 pop hl 
3226					NEXTW 
3226 cd a7 fd			call parse_vector 
3229 c3 53 23			jp macro_next 
322c				endm 
# End of macro NEXTW
322c			.NOP: 
322c				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
322c 61				db WORD_SYS_CORE+77             
322d 56 32			dw .COMO            
322f 04				db 3 + 1 
3230 .. 00			db "NOP",0              
3234				endm 
# End of macro CWHEAD
3234			; | NOP (  --  ) Do nothing | DONE 
3234					if DEBUG_FORTH_WORDS_KEY 
3234						DMARK "NOP" 
3234 f5				push af  
3235 3a 49 32			ld a, (.dmark)  
3238 32 9d fd			ld (debug_mark),a  
323b 3a 4a 32			ld a, (.dmark+1)  
323e 32 9e fd			ld (debug_mark+1),a  
3241 3a 4b 32			ld a, (.dmark+2)  
3244 32 9f fd			ld (debug_mark+2),a  
3247 18 03			jr .pastdmark  
3249 ..			.dmark: db "NOP"  
324c f1			.pastdmark: pop af  
324d			endm  
# End of macro DMARK
324d						CALLMONITOR 
324d cd aa fd			call debug_vector  
3250				endm  
# End of macro CALLMONITOR
3250					endif 
3250				       NEXTW 
3250 cd a7 fd			call parse_vector 
3253 c3 53 23			jp macro_next 
3256				endm 
# End of macro NEXTW
3256			.COMO: 
3256				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
3256 6e				db WORD_SYS_CORE+90             
3257 ab 32			dw .COMC            
3259 02				db 1 + 1 
325a .. 00			db "(",0              
325c				endm 
# End of macro CWHEAD
325c			; | ( ( -- )  Start of comment | DONE 
325c			 
325c			 
325c 2a f4 f3				ld hl, ( os_tok_ptr) 
325f 11 a3 32			ld de, .closepar 
3262					 
3262					if DEBUG_FORTH_WORDS 
3262						DMARK ").." 
3262 f5				push af  
3263 3a 77 32			ld a, (.dmark)  
3266 32 9d fd			ld (debug_mark),a  
3269 3a 78 32			ld a, (.dmark+1)  
326c 32 9e fd			ld (debug_mark+1),a  
326f 3a 79 32			ld a, (.dmark+2)  
3272 32 9f fd			ld (debug_mark+2),a  
3275 18 03			jr .pastdmark  
3277 ..			.dmark: db ").."  
327a f1			.pastdmark: pop af  
327b			endm  
# End of macro DMARK
327b						CALLMONITOR 
327b cd aa fd			call debug_vector  
327e				endm  
# End of macro CALLMONITOR
327e					endif 
327e cd 50 24			call findnexttok  
3281			 
3281					if DEBUG_FORTH_WORDS 
3281						DMARK "IF5" 
3281 f5				push af  
3282 3a 96 32			ld a, (.dmark)  
3285 32 9d fd			ld (debug_mark),a  
3288 3a 97 32			ld a, (.dmark+1)  
328b 32 9e fd			ld (debug_mark+1),a  
328e 3a 98 32			ld a, (.dmark+2)  
3291 32 9f fd			ld (debug_mark+2),a  
3294 18 03			jr .pastdmark  
3296 ..			.dmark: db "IF5"  
3299 f1			.pastdmark: pop af  
329a			endm  
# End of macro DMARK
329a						CALLMONITOR 
329a cd aa fd			call debug_vector  
329d				endm  
# End of macro CALLMONITOR
329d					endif 
329d				; replace below with ) exec using tok_ptr 
329d 22 f4 f3			ld (os_tok_ptr), hl 
32a0 c3 d4 23			jp exec1 
32a3			 
32a3 .. 00			.closepar:   db ")",0 
32a5			 
32a5				       NEXTW 
32a5 cd a7 fd			call parse_vector 
32a8 c3 53 23			jp macro_next 
32ab				endm 
# End of macro NEXTW
32ab			.COMC: 
32ab				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
32ab 6f				db WORD_SYS_CORE+91             
32ac b7 32			dw .SCRATCH            
32ae 02				db 1 + 1 
32af .. 00			db ")",0              
32b1				endm 
# End of macro CWHEAD
32b1			; | ) ( -- )  End of comment |  DONE  
32b1				       NEXTW 
32b1 cd a7 fd			call parse_vector 
32b4 c3 53 23			jp macro_next 
32b7				endm 
# End of macro NEXTW
32b7			 
32b7			.SCRATCH: 
32b7				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
32b7 6f				db WORD_SYS_CORE+91             
32b8 f5 32			dw .INC            
32ba 08				db 7 + 1 
32bb .. 00			db "SCRATCH",0              
32c3				endm 
# End of macro CWHEAD
32c3			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
32c3			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
32c3			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
32c3			; | |  
32c3			; | | e.g.    : score $00 scratch ; 
32c3			; | |  
32c3			; | | $00 score ! 
32c3			; | | $01 score +! 
32c3			; | |  
32c3			; | | e.g.   : varword $0a scratch ;  
32c3			; | | 
32c3			; | | $8000 varword ! 
32c3					if DEBUG_FORTH_WORDS_KEY 
32c3						DMARK "SCR" 
32c3 f5				push af  
32c4 3a d8 32			ld a, (.dmark)  
32c7 32 9d fd			ld (debug_mark),a  
32ca 3a d9 32			ld a, (.dmark+1)  
32cd 32 9e fd			ld (debug_mark+1),a  
32d0 3a da 32			ld a, (.dmark+2)  
32d3 32 9f fd			ld (debug_mark+2),a  
32d6 18 03			jr .pastdmark  
32d8 ..			.dmark: db "SCR"  
32db f1			.pastdmark: pop af  
32dc			endm  
# End of macro DMARK
32dc						CALLMONITOR 
32dc cd aa fd			call debug_vector  
32df				endm  
# End of macro CALLMONITOR
32df					endif 
32df			 
32df					FORTH_DSP_VALUEHL 
32df cd 6c 21			call macro_dsp_valuehl 
32e2				endm 
# End of macro FORTH_DSP_VALUEHL
32e2				 
32e2					FORTH_DSP_POP 
32e2 cd 24 22			call macro_forth_dsp_pop 
32e5				endm 
# End of macro FORTH_DSP_POP
32e5			 
32e5 7d					ld a, l 
32e6 21 18 f6				ld hl, os_var_array 
32e9 cd ac 0f				call addatohl 
32ec			 
32ec cd 70 1f				call forth_push_numhl 
32ef			 
32ef				       NEXTW 
32ef cd a7 fd			call parse_vector 
32f2 c3 53 23			jp macro_next 
32f5				endm 
# End of macro NEXTW
32f5			 
32f5			.INC: 
32f5				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
32f5 6f				db WORD_SYS_CORE+91             
32f6 4e 33			dw .DEC            
32f8 03				db 2 + 1 
32f9 .. 00			db "+!",0              
32fc				endm 
# End of macro CWHEAD
32fc			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
32fc					if DEBUG_FORTH_WORDS_KEY 
32fc						DMARK "+s_" 
32fc f5				push af  
32fd 3a 11 33			ld a, (.dmark)  
3300 32 9d fd			ld (debug_mark),a  
3303 3a 12 33			ld a, (.dmark+1)  
3306 32 9e fd			ld (debug_mark+1),a  
3309 3a 13 33			ld a, (.dmark+2)  
330c 32 9f fd			ld (debug_mark+2),a  
330f 18 03			jr .pastdmark  
3311 ..			.dmark: db "+s_"  
3314 f1			.pastdmark: pop af  
3315			endm  
# End of macro DMARK
3315						CALLMONITOR 
3315 cd aa fd			call debug_vector  
3318				endm  
# End of macro CALLMONITOR
3318					endif 
3318			 
3318					FORTH_DSP_VALUEHL 
3318 cd 6c 21			call macro_dsp_valuehl 
331b				endm 
# End of macro FORTH_DSP_VALUEHL
331b			 
331b e5					push hl   ; save address 
331c			 
331c					FORTH_DSP_POP 
331c cd 24 22			call macro_forth_dsp_pop 
331f				endm 
# End of macro FORTH_DSP_POP
331f			 
331f					FORTH_DSP_VALUEHL 
331f cd 6c 21			call macro_dsp_valuehl 
3322				endm 
# End of macro FORTH_DSP_VALUEHL
3322			 
3322 e5					push hl 
3323					FORTH_DSP_POP 
3323 cd 24 22			call macro_forth_dsp_pop 
3326				endm 
# End of macro FORTH_DSP_POP
3326 e1					pop hl 
3327			 
3327					; hl contains value to add to byte at a 
3327				 
3327 eb					ex de, hl 
3328			 
3328 e1					pop hl 
3329			 
3329					if DEBUG_FORTH_WORDS 
3329						DMARK "INC" 
3329 f5				push af  
332a 3a 3e 33			ld a, (.dmark)  
332d 32 9d fd			ld (debug_mark),a  
3330 3a 3f 33			ld a, (.dmark+1)  
3333 32 9e fd			ld (debug_mark+1),a  
3336 3a 40 33			ld a, (.dmark+2)  
3339 32 9f fd			ld (debug_mark+2),a  
333c 18 03			jr .pastdmark  
333e ..			.dmark: db "INC"  
3341 f1			.pastdmark: pop af  
3342			endm  
# End of macro DMARK
3342						CALLMONITOR 
3342 cd aa fd			call debug_vector  
3345				endm  
# End of macro CALLMONITOR
3345					endif 
3345			 
3345 7e					ld a,(hl) 
3346 83					add e 
3347 77					ld (hl),a 
3348			 
3348			 
3348			 
3348				       NEXTW 
3348 cd a7 fd			call parse_vector 
334b c3 53 23			jp macro_next 
334e				endm 
# End of macro NEXTW
334e			 
334e			.DEC: 
334e				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
334e 6f				db WORD_SYS_CORE+91             
334f a5 33			dw .INC2            
3351 03				db 2 + 1 
3352 .. 00			db "-!",0              
3355				endm 
# End of macro CWHEAD
3355			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
3355					if DEBUG_FORTH_WORDS_KEY 
3355						DMARK "-s_" 
3355 f5				push af  
3356 3a 6a 33			ld a, (.dmark)  
3359 32 9d fd			ld (debug_mark),a  
335c 3a 6b 33			ld a, (.dmark+1)  
335f 32 9e fd			ld (debug_mark+1),a  
3362 3a 6c 33			ld a, (.dmark+2)  
3365 32 9f fd			ld (debug_mark+2),a  
3368 18 03			jr .pastdmark  
336a ..			.dmark: db "-s_"  
336d f1			.pastdmark: pop af  
336e			endm  
# End of macro DMARK
336e						CALLMONITOR 
336e cd aa fd			call debug_vector  
3371				endm  
# End of macro CALLMONITOR
3371					endif 
3371			 
3371					FORTH_DSP_VALUEHL 
3371 cd 6c 21			call macro_dsp_valuehl 
3374				endm 
# End of macro FORTH_DSP_VALUEHL
3374			 
3374 e5					push hl   ; save address 
3375			 
3375					FORTH_DSP_POP 
3375 cd 24 22			call macro_forth_dsp_pop 
3378				endm 
# End of macro FORTH_DSP_POP
3378			 
3378					FORTH_DSP_VALUEHL 
3378 cd 6c 21			call macro_dsp_valuehl 
337b				endm 
# End of macro FORTH_DSP_VALUEHL
337b			 
337b					; hl contains value to add to byte at a 
337b				 
337b eb					ex de, hl 
337c			 
337c e1					pop hl 
337d			 
337d					if DEBUG_FORTH_WORDS 
337d						DMARK "DEC" 
337d f5				push af  
337e 3a 92 33			ld a, (.dmark)  
3381 32 9d fd			ld (debug_mark),a  
3384 3a 93 33			ld a, (.dmark+1)  
3387 32 9e fd			ld (debug_mark+1),a  
338a 3a 94 33			ld a, (.dmark+2)  
338d 32 9f fd			ld (debug_mark+2),a  
3390 18 03			jr .pastdmark  
3392 ..			.dmark: db "DEC"  
3395 f1			.pastdmark: pop af  
3396			endm  
# End of macro DMARK
3396						CALLMONITOR 
3396 cd aa fd			call debug_vector  
3399				endm  
# End of macro CALLMONITOR
3399					endif 
3399			 
3399 7e					ld a,(hl) 
339a 93					sub e 
339b 77					ld (hl),a 
339c			 
339c			 
339c					FORTH_DSP_POP 
339c cd 24 22			call macro_forth_dsp_pop 
339f				endm 
# End of macro FORTH_DSP_POP
339f			 
339f				       NEXTW 
339f cd a7 fd			call parse_vector 
33a2 c3 53 23			jp macro_next 
33a5				endm 
# End of macro NEXTW
33a5			 
33a5			.INC2: 
33a5				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
33a5 6f				db WORD_SYS_CORE+91             
33a6 55 34			dw .DEC2            
33a8 04				db 3 + 1 
33a9 .. 00			db "+2!",0              
33ad				endm 
# End of macro CWHEAD
33ad			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
33ad			 
33ad					if DEBUG_FORTH_WORDS_KEY 
33ad						DMARK "+2s" 
33ad f5				push af  
33ae 3a c2 33			ld a, (.dmark)  
33b1 32 9d fd			ld (debug_mark),a  
33b4 3a c3 33			ld a, (.dmark+1)  
33b7 32 9e fd			ld (debug_mark+1),a  
33ba 3a c4 33			ld a, (.dmark+2)  
33bd 32 9f fd			ld (debug_mark+2),a  
33c0 18 03			jr .pastdmark  
33c2 ..			.dmark: db "+2s"  
33c5 f1			.pastdmark: pop af  
33c6			endm  
# End of macro DMARK
33c6						CALLMONITOR 
33c6 cd aa fd			call debug_vector  
33c9				endm  
# End of macro CALLMONITOR
33c9					endif 
33c9			 
33c9					; Address 
33c9			 
33c9					FORTH_DSP_VALUEHL 
33c9 cd 6c 21			call macro_dsp_valuehl 
33cc				endm 
# End of macro FORTH_DSP_VALUEHL
33cc			 
33cc e5					push hl    ; save address 
33cd			 
33cd					; load content into de 
33cd			 
33cd 5e					ld e,(hl) 
33ce 23					inc hl 
33cf 56					ld d, (hl) 
33d0			 
33d0					if DEBUG_FORTH_WORDS 
33d0						DMARK "+2a" 
33d0 f5				push af  
33d1 3a e5 33			ld a, (.dmark)  
33d4 32 9d fd			ld (debug_mark),a  
33d7 3a e6 33			ld a, (.dmark+1)  
33da 32 9e fd			ld (debug_mark+1),a  
33dd 3a e7 33			ld a, (.dmark+2)  
33e0 32 9f fd			ld (debug_mark+2),a  
33e3 18 03			jr .pastdmark  
33e5 ..			.dmark: db "+2a"  
33e8 f1			.pastdmark: pop af  
33e9			endm  
# End of macro DMARK
33e9						CALLMONITOR 
33e9 cd aa fd			call debug_vector  
33ec				endm  
# End of macro CALLMONITOR
33ec					endif 
33ec			 
33ec					FORTH_DSP_POP 
33ec cd 24 22			call macro_forth_dsp_pop 
33ef				endm 
# End of macro FORTH_DSP_POP
33ef			 
33ef					; Get value to add 
33ef			 
33ef					FORTH_DSP_VALUE 
33ef cd 55 21			call macro_forth_dsp_value 
33f2				endm 
# End of macro FORTH_DSP_VALUE
33f2			 
33f2					if DEBUG_FORTH_WORDS 
33f2						DMARK "+2v" 
33f2 f5				push af  
33f3 3a 07 34			ld a, (.dmark)  
33f6 32 9d fd			ld (debug_mark),a  
33f9 3a 08 34			ld a, (.dmark+1)  
33fc 32 9e fd			ld (debug_mark+1),a  
33ff 3a 09 34			ld a, (.dmark+2)  
3402 32 9f fd			ld (debug_mark+2),a  
3405 18 03			jr .pastdmark  
3407 ..			.dmark: db "+2v"  
340a f1			.pastdmark: pop af  
340b			endm  
# End of macro DMARK
340b						CALLMONITOR 
340b cd aa fd			call debug_vector  
340e				endm  
# End of macro CALLMONITOR
340e					endif 
340e			 
340e 19					add hl, de 
340f			 
340f					if DEBUG_FORTH_WORDS 
340f						DMARK "+2+" 
340f f5				push af  
3410 3a 24 34			ld a, (.dmark)  
3413 32 9d fd			ld (debug_mark),a  
3416 3a 25 34			ld a, (.dmark+1)  
3419 32 9e fd			ld (debug_mark+1),a  
341c 3a 26 34			ld a, (.dmark+2)  
341f 32 9f fd			ld (debug_mark+2),a  
3422 18 03			jr .pastdmark  
3424 ..			.dmark: db "+2+"  
3427 f1			.pastdmark: pop af  
3428			endm  
# End of macro DMARK
3428						CALLMONITOR 
3428 cd aa fd			call debug_vector  
342b				endm  
# End of macro CALLMONITOR
342b					endif 
342b			 
342b					; move result to de 
342b			 
342b eb					ex de, hl 
342c			 
342c					; Address 
342c			 
342c e1					pop hl 
342d			 
342d					; save it back 
342d			 
342d 73					ld (hl), e 
342e 23					inc hl 
342f 72					ld (hl), d 
3430			 
3430					if DEBUG_FORTH_WORDS 
3430						DMARK "+2e" 
3430 f5				push af  
3431 3a 45 34			ld a, (.dmark)  
3434 32 9d fd			ld (debug_mark),a  
3437 3a 46 34			ld a, (.dmark+1)  
343a 32 9e fd			ld (debug_mark+1),a  
343d 3a 47 34			ld a, (.dmark+2)  
3440 32 9f fd			ld (debug_mark+2),a  
3443 18 03			jr .pastdmark  
3445 ..			.dmark: db "+2e"  
3448 f1			.pastdmark: pop af  
3449			endm  
# End of macro DMARK
3449						CALLMONITOR 
3449 cd aa fd			call debug_vector  
344c				endm  
# End of macro CALLMONITOR
344c					endif 
344c			 
344c			 
344c			 
344c					FORTH_DSP_POP 
344c cd 24 22			call macro_forth_dsp_pop 
344f				endm 
# End of macro FORTH_DSP_POP
344f			 
344f			 
344f				       NEXTW 
344f cd a7 fd			call parse_vector 
3452 c3 53 23			jp macro_next 
3455				endm 
# End of macro NEXTW
3455			 
3455			.DEC2: 
3455				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
3455 6f				db WORD_SYS_CORE+91             
3456 07 35			dw .GET2            
3458 04				db 3 + 1 
3459 .. 00			db "-2!",0              
345d				endm 
# End of macro CWHEAD
345d			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
345d			 
345d			 
345d					if DEBUG_FORTH_WORDS_KEY 
345d						DMARK "-2s" 
345d f5				push af  
345e 3a 72 34			ld a, (.dmark)  
3461 32 9d fd			ld (debug_mark),a  
3464 3a 73 34			ld a, (.dmark+1)  
3467 32 9e fd			ld (debug_mark+1),a  
346a 3a 74 34			ld a, (.dmark+2)  
346d 32 9f fd			ld (debug_mark+2),a  
3470 18 03			jr .pastdmark  
3472 ..			.dmark: db "-2s"  
3475 f1			.pastdmark: pop af  
3476			endm  
# End of macro DMARK
3476						CALLMONITOR 
3476 cd aa fd			call debug_vector  
3479				endm  
# End of macro CALLMONITOR
3479					endif 
3479			 
3479					; Address 
3479			 
3479					FORTH_DSP_VALUEHL 
3479 cd 6c 21			call macro_dsp_valuehl 
347c				endm 
# End of macro FORTH_DSP_VALUEHL
347c			 
347c e5					push hl    ; save address 
347d			 
347d					; load content into de 
347d			 
347d 5e					ld e,(hl) 
347e 23					inc hl 
347f 56					ld d, (hl) 
3480			 
3480					if DEBUG_FORTH_WORDS 
3480						DMARK "-2a" 
3480 f5				push af  
3481 3a 95 34			ld a, (.dmark)  
3484 32 9d fd			ld (debug_mark),a  
3487 3a 96 34			ld a, (.dmark+1)  
348a 32 9e fd			ld (debug_mark+1),a  
348d 3a 97 34			ld a, (.dmark+2)  
3490 32 9f fd			ld (debug_mark+2),a  
3493 18 03			jr .pastdmark  
3495 ..			.dmark: db "-2a"  
3498 f1			.pastdmark: pop af  
3499			endm  
# End of macro DMARK
3499						CALLMONITOR 
3499 cd aa fd			call debug_vector  
349c				endm  
# End of macro CALLMONITOR
349c					endif 
349c			 
349c					FORTH_DSP_POP 
349c cd 24 22			call macro_forth_dsp_pop 
349f				endm 
# End of macro FORTH_DSP_POP
349f			 
349f					; Get value to remove 
349f			 
349f					FORTH_DSP_VALUE 
349f cd 55 21			call macro_forth_dsp_value 
34a2				endm 
# End of macro FORTH_DSP_VALUE
34a2			 
34a2					if DEBUG_FORTH_WORDS 
34a2						DMARK "-2v" 
34a2 f5				push af  
34a3 3a b7 34			ld a, (.dmark)  
34a6 32 9d fd			ld (debug_mark),a  
34a9 3a b8 34			ld a, (.dmark+1)  
34ac 32 9e fd			ld (debug_mark+1),a  
34af 3a b9 34			ld a, (.dmark+2)  
34b2 32 9f fd			ld (debug_mark+2),a  
34b5 18 03			jr .pastdmark  
34b7 ..			.dmark: db "-2v"  
34ba f1			.pastdmark: pop af  
34bb			endm  
# End of macro DMARK
34bb						CALLMONITOR 
34bb cd aa fd			call debug_vector  
34be				endm  
# End of macro CALLMONITOR
34be					endif 
34be			 
34be eb					ex de, hl 
34bf ed 52				sbc hl, de 
34c1			 
34c1					if DEBUG_FORTH_WORDS 
34c1						DMARK "-2d" 
34c1 f5				push af  
34c2 3a d6 34			ld a, (.dmark)  
34c5 32 9d fd			ld (debug_mark),a  
34c8 3a d7 34			ld a, (.dmark+1)  
34cb 32 9e fd			ld (debug_mark+1),a  
34ce 3a d8 34			ld a, (.dmark+2)  
34d1 32 9f fd			ld (debug_mark+2),a  
34d4 18 03			jr .pastdmark  
34d6 ..			.dmark: db "-2d"  
34d9 f1			.pastdmark: pop af  
34da			endm  
# End of macro DMARK
34da						CALLMONITOR 
34da cd aa fd			call debug_vector  
34dd				endm  
# End of macro CALLMONITOR
34dd					endif 
34dd			 
34dd					; move result to de 
34dd			 
34dd eb					ex de, hl 
34de			 
34de					; Address 
34de			 
34de e1					pop hl 
34df			 
34df					; save it back 
34df			 
34df 73					ld (hl), e 
34e0 23					inc hl 
34e1 72					ld (hl), d 
34e2			 
34e2					if DEBUG_FORTH_WORDS 
34e2						DMARK "-2e" 
34e2 f5				push af  
34e3 3a f7 34			ld a, (.dmark)  
34e6 32 9d fd			ld (debug_mark),a  
34e9 3a f8 34			ld a, (.dmark+1)  
34ec 32 9e fd			ld (debug_mark+1),a  
34ef 3a f9 34			ld a, (.dmark+2)  
34f2 32 9f fd			ld (debug_mark+2),a  
34f5 18 03			jr .pastdmark  
34f7 ..			.dmark: db "-2e"  
34fa f1			.pastdmark: pop af  
34fb			endm  
# End of macro DMARK
34fb						CALLMONITOR 
34fb cd aa fd			call debug_vector  
34fe				endm  
# End of macro CALLMONITOR
34fe					endif 
34fe			 
34fe			 
34fe					FORTH_DSP_POP 
34fe cd 24 22			call macro_forth_dsp_pop 
3501				endm 
# End of macro FORTH_DSP_POP
3501			 
3501			 
3501			 
3501				       NEXTW 
3501 cd a7 fd			call parse_vector 
3504 c3 53 23			jp macro_next 
3507				endm 
# End of macro NEXTW
3507			.GET2: 
3507				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
3507 6f				db WORD_SYS_CORE+91             
3508 3f 35			dw .BANG2            
350a 03				db 2 + 1 
350b .. 00			db "2@",0              
350e				endm 
# End of macro CWHEAD
350e			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
350e					if DEBUG_FORTH_WORDS_KEY 
350e						DMARK "2A_" 
350e f5				push af  
350f 3a 23 35			ld a, (.dmark)  
3512 32 9d fd			ld (debug_mark),a  
3515 3a 24 35			ld a, (.dmark+1)  
3518 32 9e fd			ld (debug_mark+1),a  
351b 3a 25 35			ld a, (.dmark+2)  
351e 32 9f fd			ld (debug_mark+2),a  
3521 18 03			jr .pastdmark  
3523 ..			.dmark: db "2A_"  
3526 f1			.pastdmark: pop af  
3527			endm  
# End of macro DMARK
3527						CALLMONITOR 
3527 cd aa fd			call debug_vector  
352a				endm  
# End of macro CALLMONITOR
352a					endif 
352a			 
352a					FORTH_DSP_VALUEHL 
352a cd 6c 21			call macro_dsp_valuehl 
352d				endm 
# End of macro FORTH_DSP_VALUEHL
352d			 
352d e5					push hl   ; save address 
352e			 
352e					FORTH_DSP_POP 
352e cd 24 22			call macro_forth_dsp_pop 
3531				endm 
# End of macro FORTH_DSP_POP
3531			 
3531 e1					pop hl 
3532			 
3532 5e					ld e, (hl) 
3533 23					inc hl 
3534 56					ld d, (hl) 
3535			 
3535 eb					ex de, hl 
3536			 
3536 cd 70 1f				call forth_push_numhl 
3539			 
3539				       NEXTW 
3539 cd a7 fd			call parse_vector 
353c c3 53 23			jp macro_next 
353f				endm 
# End of macro NEXTW
353f			.BANG2: 
353f				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
353f 6f				db WORD_SYS_CORE+91             
3540 7a 35			dw .CONFIG            
3542 03				db 2 + 1 
3543 .. 00			db "2!",0              
3546				endm 
# End of macro CWHEAD
3546			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
3546					if DEBUG_FORTH_WORDS_KEY 
3546						DMARK "2S_" 
3546 f5				push af  
3547 3a 5b 35			ld a, (.dmark)  
354a 32 9d fd			ld (debug_mark),a  
354d 3a 5c 35			ld a, (.dmark+1)  
3550 32 9e fd			ld (debug_mark+1),a  
3553 3a 5d 35			ld a, (.dmark+2)  
3556 32 9f fd			ld (debug_mark+2),a  
3559 18 03			jr .pastdmark  
355b ..			.dmark: db "2S_"  
355e f1			.pastdmark: pop af  
355f			endm  
# End of macro DMARK
355f						CALLMONITOR 
355f cd aa fd			call debug_vector  
3562				endm  
# End of macro CALLMONITOR
3562					endif 
3562			 
3562					FORTH_DSP_VALUEHL 
3562 cd 6c 21			call macro_dsp_valuehl 
3565				endm 
# End of macro FORTH_DSP_VALUEHL
3565			 
3565 e5					push hl   ; save address 
3566			 
3566			 
3566					FORTH_DSP_POP 
3566 cd 24 22			call macro_forth_dsp_pop 
3569				endm 
# End of macro FORTH_DSP_POP
3569			 
3569					 
3569					FORTH_DSP_VALUEHL 
3569 cd 6c 21			call macro_dsp_valuehl 
356c				endm 
# End of macro FORTH_DSP_VALUEHL
356c			 
356c					FORTH_DSP_POP 
356c cd 24 22			call macro_forth_dsp_pop 
356f				endm 
# End of macro FORTH_DSP_POP
356f			 
356f eb					ex de, hl    ; value now in de 
3570			 
3570 e1					pop hl 
3571			 
3571 73					ld (hl), e 
3572			 
3572 23					inc hl 
3573			 
3573 72					ld (hl), d 
3574			 
3574			 
3574				       NEXTW 
3574 cd a7 fd			call parse_vector 
3577 c3 53 23			jp macro_next 
357a				endm 
# End of macro NEXTW
357a			.CONFIG: 
357a				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
357a 6f				db WORD_SYS_CORE+91             
357b 8e 35			dw .ADTOS            
357d 07				db 6 + 1 
357e .. 00			db "CONFIG",0              
3585				endm 
# End of macro CWHEAD
3585			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
3585			 
3585 cd 11 15				call config 
3588					NEXTW 
3588 cd a7 fd			call parse_vector 
358b c3 53 23			jp macro_next 
358e				endm 
# End of macro NEXTW
358e			 
358e			.ADTOS: 
358e				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
358e 6f				db WORD_SYS_CORE+91             
358f a7 35			dw .SBTOS            
3591 03				db 2 + 1 
3592 .. 00			db "1+",0              
3595				endm 
# End of macro CWHEAD
3595			; | 1+ ( u -- u )  Increment value on TOS | DONE 
3595			 
3595					FORTH_DSP_VALUEHL 
3595 cd 6c 21			call macro_dsp_valuehl 
3598				endm 
# End of macro FORTH_DSP_VALUEHL
3598 e5					push hl 
3599			 
3599					FORTH_DSP_POP 
3599 cd 24 22			call macro_forth_dsp_pop 
359c				endm 
# End of macro FORTH_DSP_POP
359c e1					pop hl 
359d			 
359d 23					inc hl 
359e cd 70 1f				call forth_push_numhl 
35a1					 
35a1					NEXTW 
35a1 cd a7 fd			call parse_vector 
35a4 c3 53 23			jp macro_next 
35a7				endm 
# End of macro NEXTW
35a7			.SBTOS: 
35a7				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
35a7 6f				db WORD_SYS_CORE+91             
35a8 c0 35			dw .ADSTORE            
35aa 03				db 2 + 1 
35ab .. 00			db "1-",0              
35ae				endm 
# End of macro CWHEAD
35ae			; | 1- ( u -- u )  Decrement value on TOS | DONE 
35ae			 
35ae					FORTH_DSP_VALUEHL 
35ae cd 6c 21			call macro_dsp_valuehl 
35b1				endm 
# End of macro FORTH_DSP_VALUEHL
35b1 e5					push hl 
35b2			 
35b2					FORTH_DSP_POP 
35b2 cd 24 22			call macro_forth_dsp_pop 
35b5				endm 
# End of macro FORTH_DSP_POP
35b5 e1					pop hl 
35b6			 
35b6 2b					dec hl 
35b7 cd 70 1f				call forth_push_numhl 
35ba					 
35ba					NEXTW 
35ba cd a7 fd			call parse_vector 
35bd c3 53 23			jp macro_next 
35c0				endm 
# End of macro NEXTW
35c0			.ADSTORE: 
35c0				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
35c0 6f				db WORD_SYS_CORE+91             
35c1 d9 35			dw .ADWSTORE            
35c3 04				db 3 + 1 
35c4 .. 00			db "1+!",0              
35c8				endm 
# End of macro CWHEAD
35c8			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
35c8			 
35c8					FORTH_DSP_VALUEHL 
35c8 cd 6c 21			call macro_dsp_valuehl 
35cb				endm 
# End of macro FORTH_DSP_VALUEHL
35cb e5					push hl 
35cc			 
35cc					FORTH_DSP_POP 
35cc cd 24 22			call macro_forth_dsp_pop 
35cf				endm 
# End of macro FORTH_DSP_POP
35cf e1					pop hl 
35d0			 
35d0 7e					ld a, (hl) 
35d1 3c					inc a 
35d2 77					ld (hl), a 
35d3					 
35d3					NEXTW 
35d3 cd a7 fd			call parse_vector 
35d6 c3 53 23			jp macro_next 
35d9				endm 
# End of macro NEXTW
35d9			.ADWSTORE: 
35d9				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
35d9 6f				db WORD_SYS_CORE+91             
35da fa 35			dw .SBSTORE            
35dc 05				db 4 + 1 
35dd .. 00			db "1+2!",0              
35e2				endm 
# End of macro CWHEAD
35e2			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
35e2			 
35e2					FORTH_DSP_VALUEHL 
35e2 cd 6c 21			call macro_dsp_valuehl 
35e5				endm 
# End of macro FORTH_DSP_VALUEHL
35e5 e5					push hl 
35e6			 
35e6					FORTH_DSP_POP 
35e6 cd 24 22			call macro_forth_dsp_pop 
35e9				endm 
# End of macro FORTH_DSP_POP
35e9 e1					pop hl 
35ea			 
35ea e5					push hl 
35eb			 
35eb cd d9 22				call loadwordinhl 
35ee 23					inc hl 
35ef			 
35ef d1					pop de 
35f0 eb					ex de, hl 
35f1 73					ld (hl), e 
35f2 23					inc hl 
35f3 72					ld (hl), d 
35f4					 
35f4					NEXTW 
35f4 cd a7 fd			call parse_vector 
35f7 c3 53 23			jp macro_next 
35fa				endm 
# End of macro NEXTW
35fa			.SBSTORE: 
35fa				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
35fa 6f				db WORD_SYS_CORE+91             
35fb 13 36			dw .SBWSTORE            
35fd 04				db 3 + 1 
35fe .. 00			db "1-!",0              
3602				endm 
# End of macro CWHEAD
3602			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
3602			 
3602					FORTH_DSP_VALUEHL 
3602 cd 6c 21			call macro_dsp_valuehl 
3605				endm 
# End of macro FORTH_DSP_VALUEHL
3605 e5					push hl 
3606			 
3606					FORTH_DSP_POP 
3606 cd 24 22			call macro_forth_dsp_pop 
3609				endm 
# End of macro FORTH_DSP_POP
3609 e1					pop hl 
360a			 
360a 7e					ld a, (hl) 
360b 3d					dec a 
360c 77					ld (hl), a 
360d					 
360d					NEXTW 
360d cd a7 fd			call parse_vector 
3610 c3 53 23			jp macro_next 
3613				endm 
# End of macro NEXTW
3613			.SBWSTORE: 
3613				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
3613 6f				db WORD_SYS_CORE+91             
3614 34 36			dw .ENDCORE            
3616 05				db 4 + 1 
3617 .. 00			db "1-2!",0              
361c				endm 
# End of macro CWHEAD
361c			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
361c			 
361c					FORTH_DSP_VALUEHL 
361c cd 6c 21			call macro_dsp_valuehl 
361f				endm 
# End of macro FORTH_DSP_VALUEHL
361f e5					push hl 
3620			 
3620					FORTH_DSP_POP 
3620 cd 24 22			call macro_forth_dsp_pop 
3623				endm 
# End of macro FORTH_DSP_POP
3623 e1					pop hl 
3624			 
3624 e5					push hl 
3625			 
3625 cd d9 22				call loadwordinhl 
3628 2b					dec hl 
3629			 
3629 d1					pop de 
362a eb					ex de, hl 
362b 73					ld (hl), e 
362c 23					inc hl 
362d 72					ld (hl), d 
362e					 
362e					NEXTW 
362e cd a7 fd			call parse_vector 
3631 c3 53 23			jp macro_next 
3634				endm 
# End of macro NEXTW
3634			.ENDCORE: 
3634			 
3634			; eof 
3634			 
3634			 
# End of file forth_words_core.asm
3634			include "forth_words_flow.asm" 
3634			 
3634			; | ## Program Flow Words 
3634			 
3634			.IF: 
3634				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
3634 1e				db WORD_SYS_CORE+10             
3635 2f 37			dw .THEN            
3637 03				db 2 + 1 
3638 .. 00			db "IF",0              
363b				endm 
# End of macro CWHEAD
363b			; | IF ( w -- f ) If TOS is true exec code following up to THEN  | DONE 
363b			; | | Note: currently not supporting ELSE or nested IF 
363b			; 
363b					if DEBUG_FORTH_WORDS_KEY 
363b						DMARK "IF." 
363b f5				push af  
363c 3a 50 36			ld a, (.dmark)  
363f 32 9d fd			ld (debug_mark),a  
3642 3a 51 36			ld a, (.dmark+1)  
3645 32 9e fd			ld (debug_mark+1),a  
3648 3a 52 36			ld a, (.dmark+2)  
364b 32 9f fd			ld (debug_mark+2),a  
364e 18 03			jr .pastdmark  
3650 ..			.dmark: db "IF."  
3653 f1			.pastdmark: pop af  
3654			endm  
# End of macro DMARK
3654						CALLMONITOR 
3654 cd aa fd			call debug_vector  
3657				endm  
# End of macro CALLMONITOR
3657					endif 
3657			; eval TOS 
3657			 
3657				FORTH_DSP_VALUEHL 
3657 cd 6c 21			call macro_dsp_valuehl 
365a				endm 
# End of macro FORTH_DSP_VALUEHL
365a			 
365a			;	push hl 
365a				FORTH_DSP_POP 
365a cd 24 22			call macro_forth_dsp_pop 
365d				endm 
# End of macro FORTH_DSP_POP
365d			;	pop hl 
365d			 
365d					if DEBUG_FORTH_WORDS 
365d						DMARK "IF1" 
365d f5				push af  
365e 3a 72 36			ld a, (.dmark)  
3661 32 9d fd			ld (debug_mark),a  
3664 3a 73 36			ld a, (.dmark+1)  
3667 32 9e fd			ld (debug_mark+1),a  
366a 3a 74 36			ld a, (.dmark+2)  
366d 32 9f fd			ld (debug_mark+2),a  
3670 18 03			jr .pastdmark  
3672 ..			.dmark: db "IF1"  
3675 f1			.pastdmark: pop af  
3676			endm  
# End of macro DMARK
3676						CALLMONITOR 
3676 cd aa fd			call debug_vector  
3679				endm  
# End of macro CALLMONITOR
3679					endif 
3679 b7				or a        ; clear carry flag 
367a 11 00 00			ld de, 0 
367d eb				ex de,hl 
367e ed 52			sbc hl, de 
3680 c2 0d 37			jp nz, .iftrue 
3683			 
3683					if DEBUG_FORTH_WORDS 
3683						DMARK "IF2" 
3683 f5				push af  
3684 3a 98 36			ld a, (.dmark)  
3687 32 9d fd			ld (debug_mark),a  
368a 3a 99 36			ld a, (.dmark+1)  
368d 32 9e fd			ld (debug_mark+1),a  
3690 3a 9a 36			ld a, (.dmark+2)  
3693 32 9f fd			ld (debug_mark+2),a  
3696 18 03			jr .pastdmark  
3698 ..			.dmark: db "IF2"  
369b f1			.pastdmark: pop af  
369c			endm  
# End of macro DMARK
369c						CALLMONITOR 
369c cd aa fd			call debug_vector  
369f				endm  
# End of macro CALLMONITOR
369f					endif 
369f			 
369f			; if not true then skip to THEN 
369f			 
369f				; TODO get tok_ptr 
369f				; TODO consume toks until we get to THEN 
369f			 
369f 2a f4 f3			ld hl, (os_tok_ptr) 
36a2					if DEBUG_FORTH_WORDS 
36a2						DMARK "IF3" 
36a2 f5				push af  
36a3 3a b7 36			ld a, (.dmark)  
36a6 32 9d fd			ld (debug_mark),a  
36a9 3a b8 36			ld a, (.dmark+1)  
36ac 32 9e fd			ld (debug_mark+1),a  
36af 3a b9 36			ld a, (.dmark+2)  
36b2 32 9f fd			ld (debug_mark+2),a  
36b5 18 03			jr .pastdmark  
36b7 ..			.dmark: db "IF3"  
36ba f1			.pastdmark: pop af  
36bb			endm  
# End of macro DMARK
36bb						CALLMONITOR 
36bb cd aa fd			call debug_vector  
36be				endm  
# End of macro CALLMONITOR
36be						 
36be					endif 
36be 11 08 37			ld de, .ifthen 
36c1					if DEBUG_FORTH_WORDS 
36c1						DMARK "IF4" 
36c1 f5				push af  
36c2 3a d6 36			ld a, (.dmark)  
36c5 32 9d fd			ld (debug_mark),a  
36c8 3a d7 36			ld a, (.dmark+1)  
36cb 32 9e fd			ld (debug_mark+1),a  
36ce 3a d8 36			ld a, (.dmark+2)  
36d1 32 9f fd			ld (debug_mark+2),a  
36d4 18 03			jr .pastdmark  
36d6 ..			.dmark: db "IF4"  
36d9 f1			.pastdmark: pop af  
36da			endm  
# End of macro DMARK
36da						CALLMONITOR 
36da cd aa fd			call debug_vector  
36dd				endm  
# End of macro CALLMONITOR
36dd					endif 
36dd cd 50 24			call findnexttok  
36e0			 
36e0					if DEBUG_FORTH_WORDS 
36e0						DMARK "IF5" 
36e0 f5				push af  
36e1 3a f5 36			ld a, (.dmark)  
36e4 32 9d fd			ld (debug_mark),a  
36e7 3a f6 36			ld a, (.dmark+1)  
36ea 32 9e fd			ld (debug_mark+1),a  
36ed 3a f7 36			ld a, (.dmark+2)  
36f0 32 9f fd			ld (debug_mark+2),a  
36f3 18 03			jr .pastdmark  
36f5 ..			.dmark: db "IF5"  
36f8 f1			.pastdmark: pop af  
36f9			endm  
# End of macro DMARK
36f9						CALLMONITOR 
36f9 cd aa fd			call debug_vector  
36fc				endm  
# End of macro CALLMONITOR
36fc					endif 
36fc				; TODO replace below with ; exec using tok_ptr 
36fc 22 f4 f3			ld (os_tok_ptr), hl 
36ff c3 d4 23			jp exec1 
3702				NEXTW 
3702 cd a7 fd			call parse_vector 
3705 c3 53 23			jp macro_next 
3708				endm 
# End of macro NEXTW
3708			 
3708 .. 00		.ifthen:  db "THEN",0 
370d			 
370d			.iftrue:		 
370d				; Exec next words normally 
370d			 
370d				; if true then exec following IF as normal 
370d					if DEBUG_FORTH_WORDS 
370d						DMARK "IFT" 
370d f5				push af  
370e 3a 22 37			ld a, (.dmark)  
3711 32 9d fd			ld (debug_mark),a  
3714 3a 23 37			ld a, (.dmark+1)  
3717 32 9e fd			ld (debug_mark+1),a  
371a 3a 24 37			ld a, (.dmark+2)  
371d 32 9f fd			ld (debug_mark+2),a  
3720 18 03			jr .pastdmark  
3722 ..			.dmark: db "IFT"  
3725 f1			.pastdmark: pop af  
3726			endm  
# End of macro DMARK
3726						CALLMONITOR 
3726 cd aa fd			call debug_vector  
3729				endm  
# End of macro CALLMONITOR
3729					endif 
3729			 
3729					NEXTW 
3729 cd a7 fd			call parse_vector 
372c c3 53 23			jp macro_next 
372f				endm 
# End of macro NEXTW
372f			.THEN: 
372f				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
372f 1f				db WORD_SYS_CORE+11             
3730 5a 37			dw .ELSE            
3732 05				db 4 + 1 
3733 .. 00			db "THEN",0              
3738				endm 
# End of macro CWHEAD
3738			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3738					if DEBUG_FORTH_WORDS_KEY 
3738						DMARK "THN" 
3738 f5				push af  
3739 3a 4d 37			ld a, (.dmark)  
373c 32 9d fd			ld (debug_mark),a  
373f 3a 4e 37			ld a, (.dmark+1)  
3742 32 9e fd			ld (debug_mark+1),a  
3745 3a 4f 37			ld a, (.dmark+2)  
3748 32 9f fd			ld (debug_mark+2),a  
374b 18 03			jr .pastdmark  
374d ..			.dmark: db "THN"  
3750 f1			.pastdmark: pop af  
3751			endm  
# End of macro DMARK
3751						CALLMONITOR 
3751 cd aa fd			call debug_vector  
3754				endm  
# End of macro CALLMONITOR
3754					endif 
3754					NEXTW 
3754 cd a7 fd			call parse_vector 
3757 c3 53 23			jp macro_next 
375a				endm 
# End of macro NEXTW
375a			.ELSE: 
375a				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
375a 20				db WORD_SYS_CORE+12             
375b 85 37			dw .DO            
375d 03				db 2 + 1 
375e .. 00			db "ELSE",0              
3763				endm 
# End of macro CWHEAD
3763			; | ELSE ( -- ) Not supported - does nothing | TODO 
3763			 
3763					if DEBUG_FORTH_WORDS_KEY 
3763						DMARK "ELS" 
3763 f5				push af  
3764 3a 78 37			ld a, (.dmark)  
3767 32 9d fd			ld (debug_mark),a  
376a 3a 79 37			ld a, (.dmark+1)  
376d 32 9e fd			ld (debug_mark+1),a  
3770 3a 7a 37			ld a, (.dmark+2)  
3773 32 9f fd			ld (debug_mark+2),a  
3776 18 03			jr .pastdmark  
3778 ..			.dmark: db "ELS"  
377b f1			.pastdmark: pop af  
377c			endm  
# End of macro DMARK
377c						CALLMONITOR 
377c cd aa fd			call debug_vector  
377f				endm  
# End of macro CALLMONITOR
377f					endif 
377f			 
377f			 
377f					NEXTW 
377f cd a7 fd			call parse_vector 
3782 c3 53 23			jp macro_next 
3785				endm 
# End of macro NEXTW
3785			.DO: 
3785				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
3785 21				db WORD_SYS_CORE+13             
3786 af 38			dw .LOOP            
3788 03				db 2 + 1 
3789 .. 00			db "DO",0              
378c				endm 
# End of macro CWHEAD
378c			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
378c			 
378c					if DEBUG_FORTH_WORDS_KEY 
378c						DMARK "DO." 
378c f5				push af  
378d 3a a1 37			ld a, (.dmark)  
3790 32 9d fd			ld (debug_mark),a  
3793 3a a2 37			ld a, (.dmark+1)  
3796 32 9e fd			ld (debug_mark+1),a  
3799 3a a3 37			ld a, (.dmark+2)  
379c 32 9f fd			ld (debug_mark+2),a  
379f 18 03			jr .pastdmark  
37a1 ..			.dmark: db "DO."  
37a4 f1			.pastdmark: pop af  
37a5			endm  
# End of macro DMARK
37a5						CALLMONITOR 
37a5 cd aa fd			call debug_vector  
37a8				endm  
# End of macro CALLMONITOR
37a8					endif 
37a8			;  push pc to rsp stack past the DO 
37a8			 
37a8 2a f4 f3				ld hl, (os_tok_ptr) 
37ab 23					inc hl   ; D 
37ac 23					inc hl  ; O 
37ad 23					inc hl   ; null 
37ae					if DEBUG_FORTH_WORDS 
37ae						DMARK "DO2" 
37ae f5				push af  
37af 3a c3 37			ld a, (.dmark)  
37b2 32 9d fd			ld (debug_mark),a  
37b5 3a c4 37			ld a, (.dmark+1)  
37b8 32 9e fd			ld (debug_mark+1),a  
37bb 3a c5 37			ld a, (.dmark+2)  
37be 32 9f fd			ld (debug_mark+2),a  
37c1 18 03			jr .pastdmark  
37c3 ..			.dmark: db "DO2"  
37c6 f1			.pastdmark: pop af  
37c7			endm  
# End of macro DMARK
37c7						CALLMONITOR 
37c7 cd aa fd			call debug_vector  
37ca				endm  
# End of macro CALLMONITOR
37ca					endif 
37ca					FORTH_RSP_NEXT 
37ca cd 17 1f			call macro_forth_rsp_next 
37cd				endm 
# End of macro FORTH_RSP_NEXT
37cd					if DEBUG_FORTH_WORDS 
37cd						DMARK "DO3" 
37cd f5				push af  
37ce 3a e2 37			ld a, (.dmark)  
37d1 32 9d fd			ld (debug_mark),a  
37d4 3a e3 37			ld a, (.dmark+1)  
37d7 32 9e fd			ld (debug_mark+1),a  
37da 3a e4 37			ld a, (.dmark+2)  
37dd 32 9f fd			ld (debug_mark+2),a  
37e0 18 03			jr .pastdmark  
37e2 ..			.dmark: db "DO3"  
37e5 f1			.pastdmark: pop af  
37e6			endm  
# End of macro DMARK
37e6						CALLMONITOR 
37e6 cd aa fd			call debug_vector  
37e9				endm  
# End of macro CALLMONITOR
37e9					endif 
37e9			 
37e9					;if DEBUG_FORTH_WORDS 
37e9				;		push hl 
37e9			;		endif  
37e9			 
37e9			; get counters from data stack 
37e9			 
37e9			 
37e9					FORTH_DSP_VALUEHL 
37e9 cd 6c 21			call macro_dsp_valuehl 
37ec				endm 
# End of macro FORTH_DSP_VALUEHL
37ec e5					push hl		 ; hl now has starting counter which needs to be tos 
37ed			 
37ed					if DEBUG_FORTH_WORDS 
37ed						DMARK "DO4" 
37ed f5				push af  
37ee 3a 02 38			ld a, (.dmark)  
37f1 32 9d fd			ld (debug_mark),a  
37f4 3a 03 38			ld a, (.dmark+1)  
37f7 32 9e fd			ld (debug_mark+1),a  
37fa 3a 04 38			ld a, (.dmark+2)  
37fd 32 9f fd			ld (debug_mark+2),a  
3800 18 03			jr .pastdmark  
3802 ..			.dmark: db "DO4"  
3805 f1			.pastdmark: pop af  
3806			endm  
# End of macro DMARK
3806						CALLMONITOR 
3806 cd aa fd			call debug_vector  
3809				endm  
# End of macro CALLMONITOR
3809					endif 
3809					FORTH_DSP_POP 
3809 cd 24 22			call macro_forth_dsp_pop 
380c				endm 
# End of macro FORTH_DSP_POP
380c			 
380c					if DEBUG_FORTH_WORDS 
380c						DMARK "DO5" 
380c f5				push af  
380d 3a 21 38			ld a, (.dmark)  
3810 32 9d fd			ld (debug_mark),a  
3813 3a 22 38			ld a, (.dmark+1)  
3816 32 9e fd			ld (debug_mark+1),a  
3819 3a 23 38			ld a, (.dmark+2)  
381c 32 9f fd			ld (debug_mark+2),a  
381f 18 03			jr .pastdmark  
3821 ..			.dmark: db "DO5"  
3824 f1			.pastdmark: pop af  
3825			endm  
# End of macro DMARK
3825						CALLMONITOR 
3825 cd aa fd			call debug_vector  
3828				endm  
# End of macro CALLMONITOR
3828					endif 
3828			 
3828					FORTH_DSP_VALUEHL 
3828 cd 6c 21			call macro_dsp_valuehl 
382b				endm 
# End of macro FORTH_DSP_VALUEHL
382b			;		push hl		 ; hl now has starting limit counter 
382b			 
382b					if DEBUG_FORTH_WORDS 
382b						DMARK "DO6" 
382b f5				push af  
382c 3a 40 38			ld a, (.dmark)  
382f 32 9d fd			ld (debug_mark),a  
3832 3a 41 38			ld a, (.dmark+1)  
3835 32 9e fd			ld (debug_mark+1),a  
3838 3a 42 38			ld a, (.dmark+2)  
383b 32 9f fd			ld (debug_mark+2),a  
383e 18 03			jr .pastdmark  
3840 ..			.dmark: db "DO6"  
3843 f1			.pastdmark: pop af  
3844			endm  
# End of macro DMARK
3844						CALLMONITOR 
3844 cd aa fd			call debug_vector  
3847				endm  
# End of macro CALLMONITOR
3847					endif 
3847					FORTH_DSP_POP 
3847 cd 24 22			call macro_forth_dsp_pop 
384a				endm 
# End of macro FORTH_DSP_POP
384a			 
384a			; put counters on the loop stack 
384a			 
384a			;		pop hl			 ; limit counter 
384a d1					pop de			; start counter 
384b			 
384b					; push limit counter 
384b			 
384b					if DEBUG_FORTH_WORDS 
384b						DMARK "DO7" 
384b f5				push af  
384c 3a 60 38			ld a, (.dmark)  
384f 32 9d fd			ld (debug_mark),a  
3852 3a 61 38			ld a, (.dmark+1)  
3855 32 9e fd			ld (debug_mark+1),a  
3858 3a 62 38			ld a, (.dmark+2)  
385b 32 9f fd			ld (debug_mark+2),a  
385e 18 03			jr .pastdmark  
3860 ..			.dmark: db "DO7"  
3863 f1			.pastdmark: pop af  
3864			endm  
# End of macro DMARK
3864						CALLMONITOR 
3864 cd aa fd			call debug_vector  
3867				endm  
# End of macro CALLMONITOR
3867					endif 
3867					FORTH_LOOP_NEXT 
3867 cd 9d 21			call macro_forth_loop_next 
386a				endm 
# End of macro FORTH_LOOP_NEXT
386a			 
386a					; push start counter 
386a			 
386a eb					ex de, hl 
386b					if DEBUG_FORTH_WORDS 
386b						DMARK "DO7" 
386b f5				push af  
386c 3a 80 38			ld a, (.dmark)  
386f 32 9d fd			ld (debug_mark),a  
3872 3a 81 38			ld a, (.dmark+1)  
3875 32 9e fd			ld (debug_mark+1),a  
3878 3a 82 38			ld a, (.dmark+2)  
387b 32 9f fd			ld (debug_mark+2),a  
387e 18 03			jr .pastdmark  
3880 ..			.dmark: db "DO7"  
3883 f1			.pastdmark: pop af  
3884			endm  
# End of macro DMARK
3884						CALLMONITOR 
3884 cd aa fd			call debug_vector  
3887				endm  
# End of macro CALLMONITOR
3887					endif 
3887					FORTH_LOOP_NEXT 
3887 cd 9d 21			call macro_forth_loop_next 
388a				endm 
# End of macro FORTH_LOOP_NEXT
388a			 
388a			 
388a					; init first round of I counter 
388a			 
388a 22 18 f4				ld (os_current_i), hl 
388d			 
388d					if DEBUG_FORTH_WORDS 
388d						DMARK "DO8" 
388d f5				push af  
388e 3a a2 38			ld a, (.dmark)  
3891 32 9d fd			ld (debug_mark),a  
3894 3a a3 38			ld a, (.dmark+1)  
3897 32 9e fd			ld (debug_mark+1),a  
389a 3a a4 38			ld a, (.dmark+2)  
389d 32 9f fd			ld (debug_mark+2),a  
38a0 18 03			jr .pastdmark  
38a2 ..			.dmark: db "DO8"  
38a5 f1			.pastdmark: pop af  
38a6			endm  
# End of macro DMARK
38a6						CALLMONITOR 
38a6 cd aa fd			call debug_vector  
38a9				endm  
# End of macro CALLMONITOR
38a9					endif 
38a9			 
38a9					NEXTW 
38a9 cd a7 fd			call parse_vector 
38ac c3 53 23			jp macro_next 
38af				endm 
# End of macro NEXTW
38af			.LOOP: 
38af				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
38af 22				db WORD_SYS_CORE+14             
38b0 cd 39			dw .I            
38b2 05				db 4 + 1 
38b3 .. 00			db "LOOP",0              
38b8				endm 
# End of macro CWHEAD
38b8			; | LOOP ( -- ) Increment and test loop counter  | DONE 
38b8			 
38b8				; pop tos as current loop count to hl 
38b8			 
38b8				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
38b8			 
38b8				FORTH_LOOP_TOS 
38b8 cd d0 21			call macro_forth_loop_tos 
38bb				endm 
# End of macro FORTH_LOOP_TOS
38bb e5				push hl 
38bc			 
38bc					if DEBUG_FORTH_WORDS_KEY 
38bc						DMARK "LOP" 
38bc f5				push af  
38bd 3a d1 38			ld a, (.dmark)  
38c0 32 9d fd			ld (debug_mark),a  
38c3 3a d2 38			ld a, (.dmark+1)  
38c6 32 9e fd			ld (debug_mark+1),a  
38c9 3a d3 38			ld a, (.dmark+2)  
38cc 32 9f fd			ld (debug_mark+2),a  
38cf 18 03			jr .pastdmark  
38d1 ..			.dmark: db "LOP"  
38d4 f1			.pastdmark: pop af  
38d5			endm  
# End of macro DMARK
38d5						CALLMONITOR 
38d5 cd aa fd			call debug_vector  
38d8				endm  
# End of macro CALLMONITOR
38d8					endif 
38d8				; next item on the stack is the limit. get it 
38d8			 
38d8			 
38d8				FORTH_LOOP_POP 
38d8 cd da 21			call macro_forth_loop_pop 
38db				endm 
# End of macro FORTH_LOOP_POP
38db			 
38db				FORTH_LOOP_TOS 
38db cd d0 21			call macro_forth_loop_tos 
38de				endm 
# End of macro FORTH_LOOP_TOS
38de			 
38de d1				pop de		 ; de = i, hl = limit 
38df			 
38df					if DEBUG_FORTH_WORDS 
38df						DMARK "LP1" 
38df f5				push af  
38e0 3a f4 38			ld a, (.dmark)  
38e3 32 9d fd			ld (debug_mark),a  
38e6 3a f5 38			ld a, (.dmark+1)  
38e9 32 9e fd			ld (debug_mark+1),a  
38ec 3a f6 38			ld a, (.dmark+2)  
38ef 32 9f fd			ld (debug_mark+2),a  
38f2 18 03			jr .pastdmark  
38f4 ..			.dmark: db "LP1"  
38f7 f1			.pastdmark: pop af  
38f8			endm  
# End of macro DMARK
38f8						CALLMONITOR 
38f8 cd aa fd			call debug_vector  
38fb				endm  
# End of macro CALLMONITOR
38fb					endif 
38fb			 
38fb				; go back to previous word 
38fb			 
38fb d5				push de    ; save I for inc later 
38fc			 
38fc			 
38fc				; get limit 
38fc				;  is I at limit? 
38fc			 
38fc			 
38fc					if DEBUG_FORTH_WORDS 
38fc						DMARK "LP1" 
38fc f5				push af  
38fd 3a 11 39			ld a, (.dmark)  
3900 32 9d fd			ld (debug_mark),a  
3903 3a 12 39			ld a, (.dmark+1)  
3906 32 9e fd			ld (debug_mark+1),a  
3909 3a 13 39			ld a, (.dmark+2)  
390c 32 9f fd			ld (debug_mark+2),a  
390f 18 03			jr .pastdmark  
3911 ..			.dmark: db "LP1"  
3914 f1			.pastdmark: pop af  
3915			endm  
# End of macro DMARK
3915						CALLMONITOR 
3915 cd aa fd			call debug_vector  
3918				endm  
# End of macro CALLMONITOR
3918					endif 
3918			 
3918 ed 52			sbc hl, de 
391a			 
391a			 
391a				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
391a			 
391a 20 29				jr nz, .loopnotdone 
391c			 
391c e1				pop hl   ; get rid of saved I 
391d				FORTH_LOOP_POP     ; get rid of limit 
391d cd da 21			call macro_forth_loop_pop 
3920				endm 
# End of macro FORTH_LOOP_POP
3920			 
3920				FORTH_RSP_POP     ; get rid of DO ptr 
3920 cd 38 1f			call macro_forth_rsp_pop 
3923				endm 
# End of macro FORTH_RSP_POP
3923			 
3923			if DEBUG_FORTH_WORDS 
3923						DMARK "LP>" 
3923 f5				push af  
3924 3a 38 39			ld a, (.dmark)  
3927 32 9d fd			ld (debug_mark),a  
392a 3a 39 39			ld a, (.dmark+1)  
392d 32 9e fd			ld (debug_mark+1),a  
3930 3a 3a 39			ld a, (.dmark+2)  
3933 32 9f fd			ld (debug_mark+2),a  
3936 18 03			jr .pastdmark  
3938 ..			.dmark: db "LP>"  
393b f1			.pastdmark: pop af  
393c			endm  
# End of macro DMARK
393c				CALLMONITOR 
393c cd aa fd			call debug_vector  
393f				endm  
# End of macro CALLMONITOR
393f			endif 
393f			 
393f					NEXTW 
393f cd a7 fd			call parse_vector 
3942 c3 53 23			jp macro_next 
3945				endm 
# End of macro NEXTW
3945				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3945			 
3945			.loopnotdone: 
3945			 
3945 e1				pop hl    ; get I 
3946 23				inc hl 
3947			 
3947			   	; save new I 
3947			 
3947			 
3947					; set I counter 
3947			 
3947 22 18 f4				ld (os_current_i), hl 
394a			 
394a					if DEBUG_FORTH_WORDS 
394a						DMARK "LPN" 
394a f5				push af  
394b 3a 5f 39			ld a, (.dmark)  
394e 32 9d fd			ld (debug_mark),a  
3951 3a 60 39			ld a, (.dmark+1)  
3954 32 9e fd			ld (debug_mark+1),a  
3957 3a 61 39			ld a, (.dmark+2)  
395a 32 9f fd			ld (debug_mark+2),a  
395d 18 03			jr .pastdmark  
395f ..			.dmark: db "LPN"  
3962 f1			.pastdmark: pop af  
3963			endm  
# End of macro DMARK
3963					CALLMONITOR 
3963 cd aa fd			call debug_vector  
3966				endm  
# End of macro CALLMONITOR
3966					endif 
3966					 
3966				FORTH_LOOP_NEXT 
3966 cd 9d 21			call macro_forth_loop_next 
3969				endm 
# End of macro FORTH_LOOP_NEXT
3969			 
3969			 
3969					if DEBUG_FORTH_WORDS 
3969 eb						ex de,hl 
396a					endif 
396a			 
396a			;	; get DO ptr 
396a			; 
396a					if DEBUG_FORTH_WORDS 
396a						DMARK "LP7" 
396a f5				push af  
396b 3a 7f 39			ld a, (.dmark)  
396e 32 9d fd			ld (debug_mark),a  
3971 3a 80 39			ld a, (.dmark+1)  
3974 32 9e fd			ld (debug_mark+1),a  
3977 3a 81 39			ld a, (.dmark+2)  
397a 32 9f fd			ld (debug_mark+2),a  
397d 18 03			jr .pastdmark  
397f ..			.dmark: db "LP7"  
3982 f1			.pastdmark: pop af  
3983			endm  
# End of macro DMARK
3983					CALLMONITOR 
3983 cd aa fd			call debug_vector  
3986				endm  
# End of macro CALLMONITOR
3986					endif 
3986				FORTH_RSP_TOS 
3986 cd 2e 1f			call macro_forth_rsp_tos 
3989				endm 
# End of macro FORTH_RSP_TOS
3989			 
3989					if DEBUG_FORTH_WORDS 
3989						DMARK "LP8" 
3989 f5				push af  
398a 3a 9e 39			ld a, (.dmark)  
398d 32 9d fd			ld (debug_mark),a  
3990 3a 9f 39			ld a, (.dmark+1)  
3993 32 9e fd			ld (debug_mark+1),a  
3996 3a a0 39			ld a, (.dmark+2)  
3999 32 9f fd			ld (debug_mark+2),a  
399c 18 03			jr .pastdmark  
399e ..			.dmark: db "LP8"  
39a1 f1			.pastdmark: pop af  
39a2			endm  
# End of macro DMARK
39a2					CALLMONITOR 
39a2 cd aa fd			call debug_vector  
39a5				endm  
# End of macro CALLMONITOR
39a5					endif 
39a5				;push hl 
39a5			 
39a5				; not going to DO any more 
39a5				; get rid of the RSP pointer as DO will add it back in 
39a5				;FORTH_RSP_POP 
39a5				;pop hl 
39a5			 
39a5				;ld hl,(cli_ret_sp) 
39a5				;ld e, (hl) 
39a5				;inc hl 
39a5				;ld d, (hl) 
39a5				;ex de,hl 
39a5 22 f4 f3			ld (os_tok_ptr), hl 
39a8					if DEBUG_FORTH_WORDS 
39a8						DMARK "LP<" 
39a8 f5				push af  
39a9 3a bd 39			ld a, (.dmark)  
39ac 32 9d fd			ld (debug_mark),a  
39af 3a be 39			ld a, (.dmark+1)  
39b2 32 9e fd			ld (debug_mark+1),a  
39b5 3a bf 39			ld a, (.dmark+2)  
39b8 32 9f fd			ld (debug_mark+2),a  
39bb 18 03			jr .pastdmark  
39bd ..			.dmark: db "LP<"  
39c0 f1			.pastdmark: pop af  
39c1			endm  
# End of macro DMARK
39c1					CALLMONITOR 
39c1 cd aa fd			call debug_vector  
39c4				endm  
# End of macro CALLMONITOR
39c4				endif 
39c4 c3 d4 23			jp exec1 
39c7			 
39c7					 
39c7			 
39c7			 
39c7					NEXTW 
39c7 cd a7 fd			call parse_vector 
39ca c3 53 23			jp macro_next 
39cd				endm 
# End of macro NEXTW
39cd			.I:  
39cd			 
39cd				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
39cd 5e				db WORD_SYS_CORE+74             
39ce fb 39			dw .DLOOP            
39d0 02				db 1 + 1 
39d1 .. 00			db "I",0              
39d3				endm 
# End of macro CWHEAD
39d3			; | I ( -- ) Current loop counter | DONE 
39d3					if DEBUG_FORTH_WORDS_KEY 
39d3						DMARK "I.." 
39d3 f5				push af  
39d4 3a e8 39			ld a, (.dmark)  
39d7 32 9d fd			ld (debug_mark),a  
39da 3a e9 39			ld a, (.dmark+1)  
39dd 32 9e fd			ld (debug_mark+1),a  
39e0 3a ea 39			ld a, (.dmark+2)  
39e3 32 9f fd			ld (debug_mark+2),a  
39e6 18 03			jr .pastdmark  
39e8 ..			.dmark: db "I.."  
39eb f1			.pastdmark: pop af  
39ec			endm  
# End of macro DMARK
39ec						CALLMONITOR 
39ec cd aa fd			call debug_vector  
39ef				endm  
# End of macro CALLMONITOR
39ef					endif 
39ef			 
39ef 2a 18 f4				ld hl,(os_current_i) 
39f2 cd 70 1f				call forth_push_numhl 
39f5			 
39f5					NEXTW 
39f5 cd a7 fd			call parse_vector 
39f8 c3 53 23			jp macro_next 
39fb				endm 
# End of macro NEXTW
39fb			.DLOOP: 
39fb				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
39fb 5f				db WORD_SYS_CORE+75             
39fc e2 3a			dw .REPEAT            
39fe 06				db 5 + 1 
39ff .. 00			db "-LOOP",0              
3a05				endm 
# End of macro CWHEAD
3a05			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
3a05				; pop tos as current loop count to hl 
3a05					if DEBUG_FORTH_WORDS_KEY 
3a05						DMARK "-LP" 
3a05 f5				push af  
3a06 3a 1a 3a			ld a, (.dmark)  
3a09 32 9d fd			ld (debug_mark),a  
3a0c 3a 1b 3a			ld a, (.dmark+1)  
3a0f 32 9e fd			ld (debug_mark+1),a  
3a12 3a 1c 3a			ld a, (.dmark+2)  
3a15 32 9f fd			ld (debug_mark+2),a  
3a18 18 03			jr .pastdmark  
3a1a ..			.dmark: db "-LP"  
3a1d f1			.pastdmark: pop af  
3a1e			endm  
# End of macro DMARK
3a1e						CALLMONITOR 
3a1e cd aa fd			call debug_vector  
3a21				endm  
# End of macro CALLMONITOR
3a21					endif 
3a21			 
3a21				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3a21			 
3a21				FORTH_LOOP_TOS 
3a21 cd d0 21			call macro_forth_loop_tos 
3a24				endm 
# End of macro FORTH_LOOP_TOS
3a24 e5				push hl 
3a25			 
3a25					if DEBUG_FORTH_WORDS 
3a25						DMARK "-LP" 
3a25 f5				push af  
3a26 3a 3a 3a			ld a, (.dmark)  
3a29 32 9d fd			ld (debug_mark),a  
3a2c 3a 3b 3a			ld a, (.dmark+1)  
3a2f 32 9e fd			ld (debug_mark+1),a  
3a32 3a 3c 3a			ld a, (.dmark+2)  
3a35 32 9f fd			ld (debug_mark+2),a  
3a38 18 03			jr .pastdmark  
3a3a ..			.dmark: db "-LP"  
3a3d f1			.pastdmark: pop af  
3a3e			endm  
# End of macro DMARK
3a3e						CALLMONITOR 
3a3e cd aa fd			call debug_vector  
3a41				endm  
# End of macro CALLMONITOR
3a41					endif 
3a41				; next item on the stack is the limit. get it 
3a41			 
3a41			 
3a41				FORTH_LOOP_POP 
3a41 cd da 21			call macro_forth_loop_pop 
3a44				endm 
# End of macro FORTH_LOOP_POP
3a44			 
3a44				FORTH_LOOP_TOS 
3a44 cd d0 21			call macro_forth_loop_tos 
3a47				endm 
# End of macro FORTH_LOOP_TOS
3a47			 
3a47 d1				pop de		 ; de = i, hl = limit 
3a48			 
3a48					if DEBUG_FORTH_WORDS 
3a48						DMARK "-L1" 
3a48 f5				push af  
3a49 3a 5d 3a			ld a, (.dmark)  
3a4c 32 9d fd			ld (debug_mark),a  
3a4f 3a 5e 3a			ld a, (.dmark+1)  
3a52 32 9e fd			ld (debug_mark+1),a  
3a55 3a 5f 3a			ld a, (.dmark+2)  
3a58 32 9f fd			ld (debug_mark+2),a  
3a5b 18 03			jr .pastdmark  
3a5d ..			.dmark: db "-L1"  
3a60 f1			.pastdmark: pop af  
3a61			endm  
# End of macro DMARK
3a61						CALLMONITOR 
3a61 cd aa fd			call debug_vector  
3a64				endm  
# End of macro CALLMONITOR
3a64					endif 
3a64			 
3a64				; go back to previous word 
3a64			 
3a64 d5				push de    ; save I for inc later 
3a65			 
3a65			 
3a65				; get limit 
3a65				;  is I at limit? 
3a65			 
3a65			 
3a65					if DEBUG_FORTH_WORDS 
3a65						DMARK "-L1" 
3a65 f5				push af  
3a66 3a 7a 3a			ld a, (.dmark)  
3a69 32 9d fd			ld (debug_mark),a  
3a6c 3a 7b 3a			ld a, (.dmark+1)  
3a6f 32 9e fd			ld (debug_mark+1),a  
3a72 3a 7c 3a			ld a, (.dmark+2)  
3a75 32 9f fd			ld (debug_mark+2),a  
3a78 18 03			jr .pastdmark  
3a7a ..			.dmark: db "-L1"  
3a7d f1			.pastdmark: pop af  
3a7e			endm  
# End of macro DMARK
3a7e						CALLMONITOR 
3a7e cd aa fd			call debug_vector  
3a81				endm  
# End of macro CALLMONITOR
3a81					endif 
3a81			 
3a81 ed 52			sbc hl, de 
3a83			 
3a83			 
3a83				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3a83			 
3a83 20 29				jr nz, .mloopnotdone 
3a85			 
3a85 e1				pop hl   ; get rid of saved I 
3a86				FORTH_LOOP_POP     ; get rid of limit 
3a86 cd da 21			call macro_forth_loop_pop 
3a89				endm 
# End of macro FORTH_LOOP_POP
3a89			 
3a89				FORTH_RSP_POP     ; get rid of DO ptr 
3a89 cd 38 1f			call macro_forth_rsp_pop 
3a8c				endm 
# End of macro FORTH_RSP_POP
3a8c			 
3a8c			if DEBUG_FORTH_WORDS 
3a8c						DMARK "-L>" 
3a8c f5				push af  
3a8d 3a a1 3a			ld a, (.dmark)  
3a90 32 9d fd			ld (debug_mark),a  
3a93 3a a2 3a			ld a, (.dmark+1)  
3a96 32 9e fd			ld (debug_mark+1),a  
3a99 3a a3 3a			ld a, (.dmark+2)  
3a9c 32 9f fd			ld (debug_mark+2),a  
3a9f 18 03			jr .pastdmark  
3aa1 ..			.dmark: db "-L>"  
3aa4 f1			.pastdmark: pop af  
3aa5			endm  
# End of macro DMARK
3aa5				CALLMONITOR 
3aa5 cd aa fd			call debug_vector  
3aa8				endm  
# End of macro CALLMONITOR
3aa8			endif 
3aa8			 
3aa8					NEXTW 
3aa8 cd a7 fd			call parse_vector 
3aab c3 53 23			jp macro_next 
3aae				endm 
# End of macro NEXTW
3aae				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3aae			 
3aae			.mloopnotdone: 
3aae			 
3aae e1				pop hl    ; get I 
3aaf 2b				dec hl 
3ab0			 
3ab0			   	; save new I 
3ab0			 
3ab0			 
3ab0					; set I counter 
3ab0			 
3ab0 22 18 f4				ld (os_current_i), hl 
3ab3			 
3ab3					 
3ab3				FORTH_LOOP_NEXT 
3ab3 cd 9d 21			call macro_forth_loop_next 
3ab6				endm 
# End of macro FORTH_LOOP_NEXT
3ab6			 
3ab6			 
3ab6					if DEBUG_FORTH_WORDS 
3ab6 eb						ex de,hl 
3ab7					endif 
3ab7			 
3ab7			;	; get DO ptr 
3ab7			; 
3ab7				FORTH_RSP_TOS 
3ab7 cd 2e 1f			call macro_forth_rsp_tos 
3aba				endm 
# End of macro FORTH_RSP_TOS
3aba			 
3aba				;push hl 
3aba			 
3aba				; not going to DO any more 
3aba				; get rid of the RSP pointer as DO will add it back in 
3aba				;FORTH_RSP_POP 
3aba				;pop hl 
3aba			 
3aba			 
3aba 22 f4 f3			ld (os_tok_ptr), hl 
3abd					if DEBUG_FORTH_WORDS 
3abd						DMARK "-L<" 
3abd f5				push af  
3abe 3a d2 3a			ld a, (.dmark)  
3ac1 32 9d fd			ld (debug_mark),a  
3ac4 3a d3 3a			ld a, (.dmark+1)  
3ac7 32 9e fd			ld (debug_mark+1),a  
3aca 3a d4 3a			ld a, (.dmark+2)  
3acd 32 9f fd			ld (debug_mark+2),a  
3ad0 18 03			jr .pastdmark  
3ad2 ..			.dmark: db "-L<"  
3ad5 f1			.pastdmark: pop af  
3ad6			endm  
# End of macro DMARK
3ad6					CALLMONITOR 
3ad6 cd aa fd			call debug_vector  
3ad9				endm  
# End of macro CALLMONITOR
3ad9				endif 
3ad9 c3 d4 23			jp exec1 
3adc			 
3adc					 
3adc			 
3adc			 
3adc			 
3adc				NEXTW 
3adc cd a7 fd			call parse_vector 
3adf c3 53 23			jp macro_next 
3ae2				endm 
# End of macro NEXTW
3ae2			 
3ae2			 
3ae2			 
3ae2			 
3ae2			.REPEAT: 
3ae2				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3ae2 71				db WORD_SYS_CORE+93             
3ae3 38 3b			dw .UNTIL            
3ae5 06				db 5 + 1 
3ae6 .. 00			db "REPEAT",0              
3aed				endm 
# End of macro CWHEAD
3aed			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3aed			;  push pc to rsp stack past the REPEAT 
3aed					if DEBUG_FORTH_WORDS_KEY 
3aed						DMARK "REP" 
3aed f5				push af  
3aee 3a 02 3b			ld a, (.dmark)  
3af1 32 9d fd			ld (debug_mark),a  
3af4 3a 03 3b			ld a, (.dmark+1)  
3af7 32 9e fd			ld (debug_mark+1),a  
3afa 3a 04 3b			ld a, (.dmark+2)  
3afd 32 9f fd			ld (debug_mark+2),a  
3b00 18 03			jr .pastdmark  
3b02 ..			.dmark: db "REP"  
3b05 f1			.pastdmark: pop af  
3b06			endm  
# End of macro DMARK
3b06						CALLMONITOR 
3b06 cd aa fd			call debug_vector  
3b09				endm  
# End of macro CALLMONITOR
3b09					endif 
3b09			 
3b09 2a f4 f3				ld hl, (os_tok_ptr) 
3b0c 23					inc hl   ; R 
3b0d 23					inc hl  ; E 
3b0e 23					inc hl   ; P 
3b0f 23					inc hl   ; E 
3b10 23					inc hl   ; A 
3b11 23					inc hl   ; T 
3b12 23					inc hl   ; zero 
3b13					FORTH_RSP_NEXT 
3b13 cd 17 1f			call macro_forth_rsp_next 
3b16				endm 
# End of macro FORTH_RSP_NEXT
3b16			 
3b16			 
3b16					if DEBUG_FORTH_WORDS 
3b16						DMARK "REP" 
3b16 f5				push af  
3b17 3a 2b 3b			ld a, (.dmark)  
3b1a 32 9d fd			ld (debug_mark),a  
3b1d 3a 2c 3b			ld a, (.dmark+1)  
3b20 32 9e fd			ld (debug_mark+1),a  
3b23 3a 2d 3b			ld a, (.dmark+2)  
3b26 32 9f fd			ld (debug_mark+2),a  
3b29 18 03			jr .pastdmark  
3b2b ..			.dmark: db "REP"  
3b2e f1			.pastdmark: pop af  
3b2f			endm  
# End of macro DMARK
3b2f						;pop bc    ; TODO BUG ?????? what is this for???? 
3b2f						CALLMONITOR 
3b2f cd aa fd			call debug_vector  
3b32				endm  
# End of macro CALLMONITOR
3b32					endif 
3b32			 
3b32					NEXTW 
3b32 cd a7 fd			call parse_vector 
3b35 c3 53 23			jp macro_next 
3b38				endm 
# End of macro NEXTW
3b38			;	       NEXTW 
3b38			 
3b38			.UNTIL: 
3b38				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3b38 72				db WORD_SYS_CORE+94             
3b39 d5 3b			dw .ENDFLOW            
3b3b 06				db 5 + 1 
3b3c .. 00			db "UNTIL",0              
3b42				endm 
# End of macro CWHEAD
3b42			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3b42			 
3b42				; pop tos as check 
3b42			 
3b42				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3b42			 
3b42				FORTH_DSP_VALUEHL 
3b42 cd 6c 21			call macro_dsp_valuehl 
3b45				endm 
# End of macro FORTH_DSP_VALUEHL
3b45			 
3b45					if DEBUG_FORTH_WORDS_KEY 
3b45						DMARK "UNT" 
3b45 f5				push af  
3b46 3a 5a 3b			ld a, (.dmark)  
3b49 32 9d fd			ld (debug_mark),a  
3b4c 3a 5b 3b			ld a, (.dmark+1)  
3b4f 32 9e fd			ld (debug_mark+1),a  
3b52 3a 5c 3b			ld a, (.dmark+2)  
3b55 32 9f fd			ld (debug_mark+2),a  
3b58 18 03			jr .pastdmark  
3b5a ..			.dmark: db "UNT"  
3b5d f1			.pastdmark: pop af  
3b5e			endm  
# End of macro DMARK
3b5e						CALLMONITOR 
3b5e cd aa fd			call debug_vector  
3b61				endm  
# End of macro CALLMONITOR
3b61					endif 
3b61			 
3b61			;	push hl 
3b61				FORTH_DSP_POP 
3b61 cd 24 22			call macro_forth_dsp_pop 
3b64				endm 
# End of macro FORTH_DSP_POP
3b64			 
3b64			;	pop hl 
3b64			 
3b64				; test if true 
3b64			 
3b64 cd d5 0f			call ishlzero 
3b67			;	ld a,l 
3b67			;	add h 
3b67			; 
3b67			;	cp 0 
3b67			 
3b67 20 41			jr nz, .untilnotdone 
3b69			 
3b69					if DEBUG_FORTH_WORDS 
3b69						DMARK "UNf" 
3b69 f5				push af  
3b6a 3a 7e 3b			ld a, (.dmark)  
3b6d 32 9d fd			ld (debug_mark),a  
3b70 3a 7f 3b			ld a, (.dmark+1)  
3b73 32 9e fd			ld (debug_mark+1),a  
3b76 3a 80 3b			ld a, (.dmark+2)  
3b79 32 9f fd			ld (debug_mark+2),a  
3b7c 18 03			jr .pastdmark  
3b7e ..			.dmark: db "UNf"  
3b81 f1			.pastdmark: pop af  
3b82			endm  
# End of macro DMARK
3b82						CALLMONITOR 
3b82 cd aa fd			call debug_vector  
3b85				endm  
# End of macro CALLMONITOR
3b85					endif 
3b85			 
3b85			 
3b85			 
3b85				FORTH_RSP_POP     ; get rid of DO ptr 
3b85 cd 38 1f			call macro_forth_rsp_pop 
3b88				endm 
# End of macro FORTH_RSP_POP
3b88			 
3b88			if DEBUG_FORTH_WORDS 
3b88						DMARK "UN>" 
3b88 f5				push af  
3b89 3a 9d 3b			ld a, (.dmark)  
3b8c 32 9d fd			ld (debug_mark),a  
3b8f 3a 9e 3b			ld a, (.dmark+1)  
3b92 32 9e fd			ld (debug_mark+1),a  
3b95 3a 9f 3b			ld a, (.dmark+2)  
3b98 32 9f fd			ld (debug_mark+2),a  
3b9b 18 03			jr .pastdmark  
3b9d ..			.dmark: db "UN>"  
3ba0 f1			.pastdmark: pop af  
3ba1			endm  
# End of macro DMARK
3ba1				CALLMONITOR 
3ba1 cd aa fd			call debug_vector  
3ba4				endm  
# End of macro CALLMONITOR
3ba4			endif 
3ba4			 
3ba4					NEXTW 
3ba4 cd a7 fd			call parse_vector 
3ba7 c3 53 23			jp macro_next 
3baa				endm 
# End of macro NEXTW
3baa				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3baa			 
3baa			.untilnotdone: 
3baa			 
3baa			 
3baa			;	; get DO ptr 
3baa			; 
3baa				FORTH_RSP_TOS 
3baa cd 2e 1f			call macro_forth_rsp_tos 
3bad				endm 
# End of macro FORTH_RSP_TOS
3bad			 
3bad				;push hl 
3bad			 
3bad				; not going to DO any more 
3bad				; get rid of the RSP pointer as DO will add it back in 
3bad				;FORTH_RSP_POP 
3bad				;pop hl 
3bad			 
3bad			 
3bad 22 f4 f3			ld (os_tok_ptr), hl 
3bb0					if DEBUG_FORTH_WORDS 
3bb0						DMARK "UN<" 
3bb0 f5				push af  
3bb1 3a c5 3b			ld a, (.dmark)  
3bb4 32 9d fd			ld (debug_mark),a  
3bb7 3a c6 3b			ld a, (.dmark+1)  
3bba 32 9e fd			ld (debug_mark+1),a  
3bbd 3a c7 3b			ld a, (.dmark+2)  
3bc0 32 9f fd			ld (debug_mark+2),a  
3bc3 18 03			jr .pastdmark  
3bc5 ..			.dmark: db "UN<"  
3bc8 f1			.pastdmark: pop af  
3bc9			endm  
# End of macro DMARK
3bc9					CALLMONITOR 
3bc9 cd aa fd			call debug_vector  
3bcc				endm  
# End of macro CALLMONITOR
3bcc				endif 
3bcc c3 d4 23			jp exec1 
3bcf			 
3bcf					 
3bcf			 
3bcf			 
3bcf					NEXTW 
3bcf cd a7 fd			call parse_vector 
3bd2 c3 53 23			jp macro_next 
3bd5				endm 
# End of macro NEXTW
3bd5			 
3bd5			 
3bd5			.ENDFLOW: 
3bd5			 
3bd5			; eof 
3bd5			 
# End of file forth_words_flow.asm
3bd5			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3bd5			include "forth_words_logic.asm" 
3bd5			 
3bd5			; | ## Logic Words 
3bd5			 
3bd5			.NOT: 
3bd5				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3bd5 2d				db WORD_SYS_CORE+25             
3bd6 23 3c			dw .IS            
3bd8 04				db 3 + 1 
3bd9 .. 00			db "NOT",0              
3bdd				endm 
# End of macro CWHEAD
3bdd			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
3bdd					if DEBUG_FORTH_WORDS_KEY 
3bdd						DMARK "NOT" 
3bdd f5				push af  
3bde 3a f2 3b			ld a, (.dmark)  
3be1 32 9d fd			ld (debug_mark),a  
3be4 3a f3 3b			ld a, (.dmark+1)  
3be7 32 9e fd			ld (debug_mark+1),a  
3bea 3a f4 3b			ld a, (.dmark+2)  
3bed 32 9f fd			ld (debug_mark+2),a  
3bf0 18 03			jr .pastdmark  
3bf2 ..			.dmark: db "NOT"  
3bf5 f1			.pastdmark: pop af  
3bf6			endm  
# End of macro DMARK
3bf6						CALLMONITOR 
3bf6 cd aa fd			call debug_vector  
3bf9				endm  
# End of macro CALLMONITOR
3bf9					endif 
3bf9					FORTH_DSP 
3bf9 cd 32 21			call macro_forth_dsp 
3bfc				endm 
# End of macro FORTH_DSP
3bfc 7e					ld a,(hl)	; get type of value on TOS 
3bfd fe 02				cp DS_TYPE_INUM  
3bff 28 06				jr z, .noti 
3c01					NEXTW 
3c01 cd a7 fd			call parse_vector 
3c04 c3 53 23			jp macro_next 
3c07				endm 
# End of macro NEXTW
3c07			.noti:          FORTH_DSP_VALUEHL 
3c07 cd 6c 21			call macro_dsp_valuehl 
3c0a				endm 
# End of macro FORTH_DSP_VALUEHL
3c0a			;		push hl 
3c0a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c0a cd 24 22			call macro_forth_dsp_pop 
3c0d				endm 
# End of macro FORTH_DSP_POP
3c0d			;		pop hl 
3c0d 3e 00				ld a,0 
3c0f bd					cp l 
3c10 28 04				jr z, .not2t 
3c12 2e 00				ld l, 0 
3c14 18 02				jr .notip 
3c16			 
3c16 2e ff		.not2t:		ld l, 255 
3c18			 
3c18 26 00		.notip:		ld h, 0	 
3c1a			 
3c1a cd 70 1f				call forth_push_numhl 
3c1d					NEXTW 
3c1d cd a7 fd			call parse_vector 
3c20 c3 53 23			jp macro_next 
3c23				endm 
# End of macro NEXTW
3c23			 
3c23			.IS: 
3c23				CWHEAD .LZERO 25 "COMPARE" 7 WORD_FLAG_CODE 
3c23 2d				db WORD_SYS_CORE+25             
3c24 67 3c			dw .LZERO            
3c26 08				db 7 + 1 
3c27 .. 00			db "COMPARE",0              
3c2f				endm 
# End of macro CWHEAD
3c2f			; | COMPARE ( s1 s2  -- f ) Push true if string s1 is the same as s2 | DONE 
3c2f					if DEBUG_FORTH_WORDS_KEY 
3c2f						DMARK "CMP" 
3c2f f5				push af  
3c30 3a 44 3c			ld a, (.dmark)  
3c33 32 9d fd			ld (debug_mark),a  
3c36 3a 45 3c			ld a, (.dmark+1)  
3c39 32 9e fd			ld (debug_mark+1),a  
3c3c 3a 46 3c			ld a, (.dmark+2)  
3c3f 32 9f fd			ld (debug_mark+2),a  
3c42 18 03			jr .pastdmark  
3c44 ..			.dmark: db "CMP"  
3c47 f1			.pastdmark: pop af  
3c48			endm  
# End of macro DMARK
3c48						CALLMONITOR 
3c48 cd aa fd			call debug_vector  
3c4b				endm  
# End of macro CALLMONITOR
3c4b					endif 
3c4b			 
3c4b					FORTH_DSP_VALUEHL 
3c4b cd 6c 21			call macro_dsp_valuehl 
3c4e				endm 
# End of macro FORTH_DSP_VALUEHL
3c4e			 
3c4e e5					push hl 
3c4f			 
3c4f					FORTH_DSP_VALUEM1 
3c4f cd 60 21			call macro_forth_dsp_value_m1 
3c52				endm 
# End of macro FORTH_DSP_VALUEM1
3c52			 
3c52 d1					pop de 
3c53			 
3c53					; got pointers to both. Now check. 
3c53			 
3c53 cd 3c 13				call strcmp 
3c56				 
3c56 26 00				ld h, 0 
3c58 2e 00				ld l, 0 
3c5a 20 02				jr nz, .compnsame 
3c5c 2e 01				ld l, 1	 
3c5e			.compnsame: 
3c5e cd 70 1f				call forth_push_numhl 
3c61			 
3c61					NEXTW 
3c61 cd a7 fd			call parse_vector 
3c64 c3 53 23			jp macro_next 
3c67				endm 
# End of macro NEXTW
3c67			.LZERO: 
3c67				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3c67 2d				db WORD_SYS_CORE+25             
3c68 74 3c			dw .TZERO            
3c6a 03				db 2 + 1 
3c6b .. 00			db "0<",0              
3c6e				endm 
# End of macro CWHEAD
3c6e			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3c6e					NEXTW 
3c6e cd a7 fd			call parse_vector 
3c71 c3 53 23			jp macro_next 
3c74				endm 
# End of macro NEXTW
3c74			.TZERO: 
3c74				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3c74 2e				db WORD_SYS_CORE+26             
3c75 be 3c			dw .LESS            
3c77 03				db 2 + 1 
3c78 .. 00			db "0=",0              
3c7b				endm 
# End of macro CWHEAD
3c7b			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3c7b				; TODO add floating point number detection 
3c7b					;v5 FORTH_DSP_VALUE 
3c7b					if DEBUG_FORTH_WORDS_KEY 
3c7b						DMARK "0=." 
3c7b f5				push af  
3c7c 3a 90 3c			ld a, (.dmark)  
3c7f 32 9d fd			ld (debug_mark),a  
3c82 3a 91 3c			ld a, (.dmark+1)  
3c85 32 9e fd			ld (debug_mark+1),a  
3c88 3a 92 3c			ld a, (.dmark+2)  
3c8b 32 9f fd			ld (debug_mark+2),a  
3c8e 18 03			jr .pastdmark  
3c90 ..			.dmark: db "0=."  
3c93 f1			.pastdmark: pop af  
3c94			endm  
# End of macro DMARK
3c94						CALLMONITOR 
3c94 cd aa fd			call debug_vector  
3c97				endm  
# End of macro CALLMONITOR
3c97					endif 
3c97					FORTH_DSP 
3c97 cd 32 21			call macro_forth_dsp 
3c9a				endm 
# End of macro FORTH_DSP
3c9a 7e					ld a,(hl)	; get type of value on TOS 
3c9b fe 02				cp DS_TYPE_INUM  
3c9d 28 00				jr z, .tz_inum 
3c9f			 
3c9f				if FORTH_ENABLE_FLOATMATH 
3c9f					jr .tz_done 
3c9f			 
3c9f				endif 
3c9f					 
3c9f			 
3c9f			.tz_inum: 
3c9f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c9f cd 6c 21			call macro_dsp_valuehl 
3ca2				endm 
# End of macro FORTH_DSP_VALUEHL
3ca2			 
3ca2			;		push hl 
3ca2			 
3ca2					; destroy value TOS 
3ca2			 
3ca2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ca2 cd 24 22			call macro_forth_dsp_pop 
3ca5				endm 
# End of macro FORTH_DSP_POP
3ca5			 
3ca5			;		pop hl 
3ca5			 
3ca5 3e 00				ld a,0 
3ca7			 
3ca7 bd					cp l 
3ca8 20 08				jr nz, .tz_notzero 
3caa			 
3caa bc					cp h 
3cab			 
3cab 20 05				jr nz, .tz_notzero 
3cad			 
3cad			 
3cad 21 01 00				ld hl, FORTH_TRUE 
3cb0 18 03				jr .tz_done 
3cb2			 
3cb2 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3cb5			 
3cb5					; push value back onto stack for another op etc 
3cb5			 
3cb5			.tz_done: 
3cb5 cd 70 1f				call forth_push_numhl 
3cb8			 
3cb8					NEXTW 
3cb8 cd a7 fd			call parse_vector 
3cbb c3 53 23			jp macro_next 
3cbe				endm 
# End of macro NEXTW
3cbe			.LESS: 
3cbe				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3cbe 2f				db WORD_SYS_CORE+27             
3cbf 2a 3d			dw .GT            
3cc1 02				db 1 + 1 
3cc2 .. 00			db "<",0              
3cc4				endm 
# End of macro CWHEAD
3cc4			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3cc4				; TODO add floating point number detection 
3cc4					if DEBUG_FORTH_WORDS_KEY 
3cc4						DMARK "LES" 
3cc4 f5				push af  
3cc5 3a d9 3c			ld a, (.dmark)  
3cc8 32 9d fd			ld (debug_mark),a  
3ccb 3a da 3c			ld a, (.dmark+1)  
3cce 32 9e fd			ld (debug_mark+1),a  
3cd1 3a db 3c			ld a, (.dmark+2)  
3cd4 32 9f fd			ld (debug_mark+2),a  
3cd7 18 03			jr .pastdmark  
3cd9 ..			.dmark: db "LES"  
3cdc f1			.pastdmark: pop af  
3cdd			endm  
# End of macro DMARK
3cdd						CALLMONITOR 
3cdd cd aa fd			call debug_vector  
3ce0				endm  
# End of macro CALLMONITOR
3ce0					endif 
3ce0					FORTH_DSP 
3ce0 cd 32 21			call macro_forth_dsp 
3ce3				endm 
# End of macro FORTH_DSP
3ce3					;v5 FORTH_DSP_VALUE 
3ce3 7e					ld a,(hl)	; get type of value on TOS 
3ce4 fe 02				cp DS_TYPE_INUM  
3ce6 28 00				jr z, .less_inum 
3ce8			 
3ce8				if FORTH_ENABLE_FLOATMATH 
3ce8					jr .less_done 
3ce8			 
3ce8				endif 
3ce8					 
3ce8			 
3ce8			.less_inum: 
3ce8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ce8 cd 6c 21			call macro_dsp_valuehl 
3ceb				endm 
# End of macro FORTH_DSP_VALUEHL
3ceb			 
3ceb e5					push hl  ; u2 
3cec			 
3cec					; destroy value TOS 
3cec			 
3cec					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cec cd 24 22			call macro_forth_dsp_pop 
3cef				endm 
# End of macro FORTH_DSP_POP
3cef			 
3cef			 
3cef					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cef cd 6c 21			call macro_dsp_valuehl 
3cf2				endm 
# End of macro FORTH_DSP_VALUEHL
3cf2			 
3cf2 e5					push hl    ; u1 
3cf3			 
3cf3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cf3 cd 24 22			call macro_forth_dsp_pop 
3cf6				endm 
# End of macro FORTH_DSP_POP
3cf6			 
3cf6			 
3cf6 b7			 or a      ;clear carry flag 
3cf7 01 00 00		 ld bc, FORTH_FALSE 
3cfa e1			  pop hl    ; u1 
3cfb d1			  pop de    ; u2 
3cfc ed 52		  sbc hl,de 
3cfe 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3d00			 
3d00 01 01 00		 ld bc, FORTH_TRUE 
3d03			.lscont:  
3d03 c5					push bc 
3d04 e1					pop hl 
3d05			 
3d05					if DEBUG_FORTH_WORDS 
3d05						DMARK "LT1" 
3d05 f5				push af  
3d06 3a 1a 3d			ld a, (.dmark)  
3d09 32 9d fd			ld (debug_mark),a  
3d0c 3a 1b 3d			ld a, (.dmark+1)  
3d0f 32 9e fd			ld (debug_mark+1),a  
3d12 3a 1c 3d			ld a, (.dmark+2)  
3d15 32 9f fd			ld (debug_mark+2),a  
3d18 18 03			jr .pastdmark  
3d1a ..			.dmark: db "LT1"  
3d1d f1			.pastdmark: pop af  
3d1e			endm  
# End of macro DMARK
3d1e						CALLMONITOR 
3d1e cd aa fd			call debug_vector  
3d21				endm  
# End of macro CALLMONITOR
3d21					endif 
3d21 cd 70 1f				call forth_push_numhl 
3d24			 
3d24					NEXTW 
3d24 cd a7 fd			call parse_vector 
3d27 c3 53 23			jp macro_next 
3d2a				endm 
# End of macro NEXTW
3d2a			.GT: 
3d2a				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3d2a 30				db WORD_SYS_CORE+28             
3d2b 96 3d			dw .EQUAL            
3d2d 02				db 1 + 1 
3d2e .. 00			db ">",0              
3d30				endm 
# End of macro CWHEAD
3d30			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3d30				; TODO add floating point number detection 
3d30					if DEBUG_FORTH_WORDS_KEY 
3d30						DMARK "GRT" 
3d30 f5				push af  
3d31 3a 45 3d			ld a, (.dmark)  
3d34 32 9d fd			ld (debug_mark),a  
3d37 3a 46 3d			ld a, (.dmark+1)  
3d3a 32 9e fd			ld (debug_mark+1),a  
3d3d 3a 47 3d			ld a, (.dmark+2)  
3d40 32 9f fd			ld (debug_mark+2),a  
3d43 18 03			jr .pastdmark  
3d45 ..			.dmark: db "GRT"  
3d48 f1			.pastdmark: pop af  
3d49			endm  
# End of macro DMARK
3d49						CALLMONITOR 
3d49 cd aa fd			call debug_vector  
3d4c				endm  
# End of macro CALLMONITOR
3d4c					endif 
3d4c					FORTH_DSP 
3d4c cd 32 21			call macro_forth_dsp 
3d4f				endm 
# End of macro FORTH_DSP
3d4f					;FORTH_DSP_VALUE 
3d4f 7e					ld a,(hl)	; get type of value on TOS 
3d50 fe 02				cp DS_TYPE_INUM  
3d52 28 00				jr z, .gt_inum 
3d54			 
3d54				if FORTH_ENABLE_FLOATMATH 
3d54					jr .gt_done 
3d54			 
3d54				endif 
3d54					 
3d54			 
3d54			.gt_inum: 
3d54					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d54 cd 6c 21			call macro_dsp_valuehl 
3d57				endm 
# End of macro FORTH_DSP_VALUEHL
3d57			 
3d57 e5					push hl  ; u2 
3d58			 
3d58					; destroy value TOS 
3d58			 
3d58					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d58 cd 24 22			call macro_forth_dsp_pop 
3d5b				endm 
# End of macro FORTH_DSP_POP
3d5b			 
3d5b			 
3d5b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d5b cd 6c 21			call macro_dsp_valuehl 
3d5e				endm 
# End of macro FORTH_DSP_VALUEHL
3d5e			 
3d5e e5					push hl    ; u1 
3d5f			 
3d5f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d5f cd 24 22			call macro_forth_dsp_pop 
3d62				endm 
# End of macro FORTH_DSP_POP
3d62			 
3d62			 
3d62 b7			 or a      ;clear carry flag 
3d63 01 00 00		 ld bc, FORTH_FALSE 
3d66 e1			  pop hl    ; u1 
3d67 d1			  pop de    ; u2 
3d68 ed 52		  sbc hl,de 
3d6a 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3d6c			 
3d6c 01 01 00		 ld bc, FORTH_TRUE 
3d6f			.gtcont:  
3d6f c5					push bc 
3d70 e1					pop hl 
3d71			 
3d71					if DEBUG_FORTH_WORDS 
3d71						DMARK "GT1" 
3d71 f5				push af  
3d72 3a 86 3d			ld a, (.dmark)  
3d75 32 9d fd			ld (debug_mark),a  
3d78 3a 87 3d			ld a, (.dmark+1)  
3d7b 32 9e fd			ld (debug_mark+1),a  
3d7e 3a 88 3d			ld a, (.dmark+2)  
3d81 32 9f fd			ld (debug_mark+2),a  
3d84 18 03			jr .pastdmark  
3d86 ..			.dmark: db "GT1"  
3d89 f1			.pastdmark: pop af  
3d8a			endm  
# End of macro DMARK
3d8a						CALLMONITOR 
3d8a cd aa fd			call debug_vector  
3d8d				endm  
# End of macro CALLMONITOR
3d8d					endif 
3d8d cd 70 1f				call forth_push_numhl 
3d90			 
3d90					NEXTW 
3d90 cd a7 fd			call parse_vector 
3d93 c3 53 23			jp macro_next 
3d96				endm 
# End of macro NEXTW
3d96			.EQUAL: 
3d96				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3d96 31				db WORD_SYS_CORE+29             
3d97 04 3e			dw .ENDLOGIC            
3d99 02				db 1 + 1 
3d9a .. 00			db "=",0              
3d9c				endm 
# End of macro CWHEAD
3d9c			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3d9c				; TODO add floating point number detection 
3d9c					if DEBUG_FORTH_WORDS_KEY 
3d9c						DMARK "EQ." 
3d9c f5				push af  
3d9d 3a b1 3d			ld a, (.dmark)  
3da0 32 9d fd			ld (debug_mark),a  
3da3 3a b2 3d			ld a, (.dmark+1)  
3da6 32 9e fd			ld (debug_mark+1),a  
3da9 3a b3 3d			ld a, (.dmark+2)  
3dac 32 9f fd			ld (debug_mark+2),a  
3daf 18 03			jr .pastdmark  
3db1 ..			.dmark: db "EQ."  
3db4 f1			.pastdmark: pop af  
3db5			endm  
# End of macro DMARK
3db5						CALLMONITOR 
3db5 cd aa fd			call debug_vector  
3db8				endm  
# End of macro CALLMONITOR
3db8					endif 
3db8					FORTH_DSP 
3db8 cd 32 21			call macro_forth_dsp 
3dbb				endm 
# End of macro FORTH_DSP
3dbb					;v5 FORTH_DSP_VALUE 
3dbb 7e					ld a,(hl)	; get type of value on TOS 
3dbc fe 02				cp DS_TYPE_INUM  
3dbe 28 00				jr z, .eq_inum 
3dc0			 
3dc0				if FORTH_ENABLE_FLOATMATH 
3dc0					jr .eq_done 
3dc0			 
3dc0				endif 
3dc0					 
3dc0			 
3dc0			.eq_inum: 
3dc0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3dc0 cd 6c 21			call macro_dsp_valuehl 
3dc3				endm 
# End of macro FORTH_DSP_VALUEHL
3dc3			 
3dc3 e5					push hl 
3dc4			 
3dc4					; destroy value TOS 
3dc4			 
3dc4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3dc4 cd 24 22			call macro_forth_dsp_pop 
3dc7				endm 
# End of macro FORTH_DSP_POP
3dc7			 
3dc7			 
3dc7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3dc7 cd 6c 21			call macro_dsp_valuehl 
3dca				endm 
# End of macro FORTH_DSP_VALUEHL
3dca			 
3dca					; one value on hl get other one back 
3dca			 
3dca e5					push hl 
3dcb			 
3dcb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3dcb cd 24 22			call macro_forth_dsp_pop 
3dce				endm 
# End of macro FORTH_DSP_POP
3dce			 
3dce 0e 00				ld c, FORTH_FALSE 
3dd0			 
3dd0 e1					pop hl 
3dd1 d1					pop de 
3dd2			 
3dd2 7b					ld a, e 
3dd3 bd					cp l 
3dd4			 
3dd4 20 06				jr nz, .eq_done 
3dd6			 
3dd6 7a					ld a, d 
3dd7 bc					cp h 
3dd8			 
3dd8 20 02				jr nz, .eq_done 
3dda			 
3dda 0e 01				ld c, FORTH_TRUE 
3ddc					 
3ddc			 
3ddc			 
3ddc			.eq_done: 
3ddc			 
3ddc					; TODO push value back onto stack for another op etc 
3ddc			 
3ddc 26 00				ld h, 0 
3dde 69					ld l, c 
3ddf					if DEBUG_FORTH_WORDS 
3ddf						DMARK "EQ1" 
3ddf f5				push af  
3de0 3a f4 3d			ld a, (.dmark)  
3de3 32 9d fd			ld (debug_mark),a  
3de6 3a f5 3d			ld a, (.dmark+1)  
3de9 32 9e fd			ld (debug_mark+1),a  
3dec 3a f6 3d			ld a, (.dmark+2)  
3def 32 9f fd			ld (debug_mark+2),a  
3df2 18 03			jr .pastdmark  
3df4 ..			.dmark: db "EQ1"  
3df7 f1			.pastdmark: pop af  
3df8			endm  
# End of macro DMARK
3df8						CALLMONITOR 
3df8 cd aa fd			call debug_vector  
3dfb				endm  
# End of macro CALLMONITOR
3dfb					endif 
3dfb cd 70 1f				call forth_push_numhl 
3dfe			 
3dfe					NEXTW 
3dfe cd a7 fd			call parse_vector 
3e01 c3 53 23			jp macro_next 
3e04				endm 
# End of macro NEXTW
3e04			 
3e04			 
3e04			.ENDLOGIC: 
3e04			; eof 
3e04			 
3e04			 
# End of file forth_words_logic.asm
3e04			include "forth_words_maths.asm" 
3e04			 
3e04			; | ## Maths Words 
3e04			 
3e04			.PLUS:	 
3e04				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3e04 15				db WORD_SYS_CORE+1             
3e05 68 3e			dw .NEG            
3e07 02				db 1 + 1 
3e08 .. 00			db "+",0              
3e0a				endm 
# End of macro CWHEAD
3e0a			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3e0a					if DEBUG_FORTH_WORDS_KEY 
3e0a						DMARK "PLU" 
3e0a f5				push af  
3e0b 3a 1f 3e			ld a, (.dmark)  
3e0e 32 9d fd			ld (debug_mark),a  
3e11 3a 20 3e			ld a, (.dmark+1)  
3e14 32 9e fd			ld (debug_mark+1),a  
3e17 3a 21 3e			ld a, (.dmark+2)  
3e1a 32 9f fd			ld (debug_mark+2),a  
3e1d 18 03			jr .pastdmark  
3e1f ..			.dmark: db "PLU"  
3e22 f1			.pastdmark: pop af  
3e23			endm  
# End of macro DMARK
3e23						CALLMONITOR 
3e23 cd aa fd			call debug_vector  
3e26				endm  
# End of macro CALLMONITOR
3e26					endif 
3e26					; add top two values and push back result 
3e26			 
3e26					;for v5 FORTH_DSP_VALUE 
3e26					FORTH_DSP 
3e26 cd 32 21			call macro_forth_dsp 
3e29				endm 
# End of macro FORTH_DSP
3e29 7e					ld a,(hl)	; get type of value on TOS 
3e2a fe 02				cp DS_TYPE_INUM  
3e2c 28 06				jr z, .dot_inum 
3e2e			 
3e2e					NEXTW 
3e2e cd a7 fd			call parse_vector 
3e31 c3 53 23			jp macro_next 
3e34				endm 
# End of macro NEXTW
3e34			 
3e34			; float maths 
3e34			 
3e34				if FORTH_ENABLE_FLOATMATH 
3e34						inc hl      ; now at start of numeric as string 
3e34			 
3e34					if DEBUG_FORTH_MATHS 
3e34						DMARK "ADD" 
3e34				CALLMONITOR 
3e34					endif 
3e34			 
3e34					;ld ix, hl 
3e34					call CON 
3e34			 
3e34			 
3e34					push hl 
3e34					 
3e34					 
3e34			 
3e34						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3e34			 
3e34					; get next number 
3e34			 
3e34						FORTH_DSP_VALUE 
3e34			 
3e34						inc hl      ; now at start of numeric as string 
3e34			 
3e34					;ld ix, hl 
3e34					call CON 
3e34			 
3e34					push hl 
3e34			 
3e34			 
3e34						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e34			 
3e34						; TODO do add 
3e34			 
3e34						call IADD 
3e34			 
3e34						; TODO get result back as ascii 
3e34			 
3e34						; TODO push result  
3e34			 
3e34			 
3e34			 
3e34						jr .dot_done 
3e34				endif 
3e34			 
3e34			.dot_inum: 
3e34			 
3e34			 
3e34					if DEBUG_FORTH_DOT 
3e34						DMARK "+IT" 
3e34 f5				push af  
3e35 3a 49 3e			ld a, (.dmark)  
3e38 32 9d fd			ld (debug_mark),a  
3e3b 3a 4a 3e			ld a, (.dmark+1)  
3e3e 32 9e fd			ld (debug_mark+1),a  
3e41 3a 4b 3e			ld a, (.dmark+2)  
3e44 32 9f fd			ld (debug_mark+2),a  
3e47 18 03			jr .pastdmark  
3e49 ..			.dmark: db "+IT"  
3e4c f1			.pastdmark: pop af  
3e4d			endm  
# End of macro DMARK
3e4d				CALLMONITOR 
3e4d cd aa fd			call debug_vector  
3e50				endm  
# End of macro CALLMONITOR
3e50					endif 
3e50			 
3e50					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e50 cd 6c 21			call macro_dsp_valuehl 
3e53				endm 
# End of macro FORTH_DSP_VALUEHL
3e53			 
3e53				; TODO add floating point number detection 
3e53			 
3e53 e5					push hl 
3e54			 
3e54					; destroy value TOS 
3e54			 
3e54					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e54 cd 24 22			call macro_forth_dsp_pop 
3e57				endm 
# End of macro FORTH_DSP_POP
3e57			 
3e57			 
3e57					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e57 cd 6c 21			call macro_dsp_valuehl 
3e5a				endm 
# End of macro FORTH_DSP_VALUEHL
3e5a			 
3e5a					; one value on hl get other one back 
3e5a			 
3e5a d1					pop de 
3e5b			 
3e5b					; do the add 
3e5b			 
3e5b 19					add hl,de 
3e5c			 
3e5c					; save it 
3e5c			 
3e5c			;		push hl	 
3e5c			 
3e5c					; 
3e5c			 
3e5c					; destroy value TOS 
3e5c			 
3e5c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e5c cd 24 22			call macro_forth_dsp_pop 
3e5f				endm 
# End of macro FORTH_DSP_POP
3e5f			 
3e5f					; TODO push value back onto stack for another op etc 
3e5f			 
3e5f			;		pop hl 
3e5f			 
3e5f			.dot_done: 
3e5f cd 70 1f				call forth_push_numhl 
3e62			 
3e62					NEXTW 
3e62 cd a7 fd			call parse_vector 
3e65 c3 53 23			jp macro_next 
3e68				endm 
# End of macro NEXTW
3e68			.NEG: 
3e68			 
3e68				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3e68 17				db WORD_SYS_CORE+3             
3e69 b1 3e			dw .DIV            
3e6b 02				db 1 + 1 
3e6c .. 00			db "-",0              
3e6e				endm 
# End of macro CWHEAD
3e6e			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3e6e					if DEBUG_FORTH_WORDS_KEY 
3e6e						DMARK "SUB" 
3e6e f5				push af  
3e6f 3a 83 3e			ld a, (.dmark)  
3e72 32 9d fd			ld (debug_mark),a  
3e75 3a 84 3e			ld a, (.dmark+1)  
3e78 32 9e fd			ld (debug_mark+1),a  
3e7b 3a 85 3e			ld a, (.dmark+2)  
3e7e 32 9f fd			ld (debug_mark+2),a  
3e81 18 03			jr .pastdmark  
3e83 ..			.dmark: db "SUB"  
3e86 f1			.pastdmark: pop af  
3e87			endm  
# End of macro DMARK
3e87						CALLMONITOR 
3e87 cd aa fd			call debug_vector  
3e8a				endm  
# End of macro CALLMONITOR
3e8a					endif 
3e8a			 
3e8a			 
3e8a				; TODO add floating point number detection 
3e8a					; v5 FORTH_DSP_VALUE 
3e8a					FORTH_DSP 
3e8a cd 32 21			call macro_forth_dsp 
3e8d				endm 
# End of macro FORTH_DSP
3e8d 7e					ld a,(hl)	; get type of value on TOS 
3e8e fe 02				cp DS_TYPE_INUM  
3e90 28 06				jr z, .neg_inum 
3e92			 
3e92					NEXTW 
3e92 cd a7 fd			call parse_vector 
3e95 c3 53 23			jp macro_next 
3e98				endm 
# End of macro NEXTW
3e98			 
3e98			; float maths 
3e98			 
3e98				if FORTH_ENABLE_FLOATMATH 
3e98					jr .neg_done 
3e98			 
3e98				endif 
3e98					 
3e98			 
3e98			.neg_inum: 
3e98					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e98 cd 6c 21			call macro_dsp_valuehl 
3e9b				endm 
# End of macro FORTH_DSP_VALUEHL
3e9b			 
3e9b e5					push hl 
3e9c			 
3e9c					; destroy value TOS 
3e9c			 
3e9c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e9c cd 24 22			call macro_forth_dsp_pop 
3e9f				endm 
# End of macro FORTH_DSP_POP
3e9f			 
3e9f			 
3e9f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e9f cd 6c 21			call macro_dsp_valuehl 
3ea2				endm 
# End of macro FORTH_DSP_VALUEHL
3ea2			 
3ea2					; one value on hl get other one back 
3ea2			 
3ea2 d1					pop de 
3ea3			 
3ea3					; do the sub 
3ea3			;		ex de, hl 
3ea3			 
3ea3 ed 52				sbc hl,de 
3ea5			 
3ea5					; save it 
3ea5			 
3ea5			;		push hl	 
3ea5			 
3ea5					; 
3ea5			 
3ea5					; destroy value TOS 
3ea5			 
3ea5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ea5 cd 24 22			call macro_forth_dsp_pop 
3ea8				endm 
# End of macro FORTH_DSP_POP
3ea8			 
3ea8					; TODO push value back onto stack for another op etc 
3ea8			 
3ea8			;		pop hl 
3ea8			 
3ea8 cd 70 1f				call forth_push_numhl 
3eab			.neg_done: 
3eab			 
3eab					NEXTW 
3eab cd a7 fd			call parse_vector 
3eae c3 53 23			jp macro_next 
3eb1				endm 
# End of macro NEXTW
3eb1			.DIV: 
3eb1				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3eb1 18				db WORD_SYS_CORE+4             
3eb2 04 3f			dw .MUL            
3eb4 02				db 1 + 1 
3eb5 .. 00			db "/",0              
3eb7				endm 
# End of macro CWHEAD
3eb7			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3eb7					if DEBUG_FORTH_WORDS_KEY 
3eb7						DMARK "DIV" 
3eb7 f5				push af  
3eb8 3a cc 3e			ld a, (.dmark)  
3ebb 32 9d fd			ld (debug_mark),a  
3ebe 3a cd 3e			ld a, (.dmark+1)  
3ec1 32 9e fd			ld (debug_mark+1),a  
3ec4 3a ce 3e			ld a, (.dmark+2)  
3ec7 32 9f fd			ld (debug_mark+2),a  
3eca 18 03			jr .pastdmark  
3ecc ..			.dmark: db "DIV"  
3ecf f1			.pastdmark: pop af  
3ed0			endm  
# End of macro DMARK
3ed0						CALLMONITOR 
3ed0 cd aa fd			call debug_vector  
3ed3				endm  
# End of macro CALLMONITOR
3ed3					endif 
3ed3				; TODO add floating point number detection 
3ed3					; v5 FORTH_DSP_VALUE 
3ed3					FORTH_DSP 
3ed3 cd 32 21			call macro_forth_dsp 
3ed6				endm 
# End of macro FORTH_DSP
3ed6 7e					ld a,(hl)	; get type of value on TOS 
3ed7 fe 02				cp DS_TYPE_INUM  
3ed9 28 06				jr z, .div_inum 
3edb			 
3edb				if FORTH_ENABLE_FLOATMATH 
3edb					jr .div_done 
3edb			 
3edb				endif 
3edb					NEXTW 
3edb cd a7 fd			call parse_vector 
3ede c3 53 23			jp macro_next 
3ee1				endm 
# End of macro NEXTW
3ee1			.div_inum: 
3ee1			 
3ee1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ee1 cd 6c 21			call macro_dsp_valuehl 
3ee4				endm 
# End of macro FORTH_DSP_VALUEHL
3ee4			 
3ee4 e5					push hl    ; to go to bc 
3ee5			 
3ee5					; destroy value TOS 
3ee5			 
3ee5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ee5 cd 24 22			call macro_forth_dsp_pop 
3ee8				endm 
# End of macro FORTH_DSP_POP
3ee8			 
3ee8			 
3ee8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ee8 cd 6c 21			call macro_dsp_valuehl 
3eeb				endm 
# End of macro FORTH_DSP_VALUEHL
3eeb			 
3eeb					; hl to go to de 
3eeb			 
3eeb e5					push hl 
3eec			 
3eec c1					pop bc 
3eed d1					pop de		 
3eee			 
3eee			 
3eee					if DEBUG_FORTH_MATHS 
3eee						DMARK "DIV" 
3eee				CALLMONITOR 
3eee					endif 
3eee					; one value on hl but move to a get other one back 
3eee			 
3eee			        
3eee cd 09 0f			call Div16 
3ef1			 
3ef1			;	push af	 
3ef1 e5				push hl 
3ef2 c5				push bc 
3ef3			 
3ef3					if DEBUG_FORTH_MATHS 
3ef3						DMARK "DI1" 
3ef3				CALLMONITOR 
3ef3					endif 
3ef3			 
3ef3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ef3 cd 24 22			call macro_forth_dsp_pop 
3ef6				endm 
# End of macro FORTH_DSP_POP
3ef6			 
3ef6			 
3ef6			 
3ef6 e1					pop hl    ; result 
3ef7			 
3ef7 cd 70 1f				call forth_push_numhl 
3efa			 
3efa e1					pop hl    ; reminder 
3efb			;		ld h,0 
3efb			;		ld l,d 
3efb			 
3efb cd 70 1f				call forth_push_numhl 
3efe			.div_done: 
3efe					NEXTW 
3efe cd a7 fd			call parse_vector 
3f01 c3 53 23			jp macro_next 
3f04				endm 
# End of macro NEXTW
3f04			.MUL: 
3f04				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3f04 19				db WORD_SYS_CORE+5             
3f05 4f 3f			dw .MIN            
3f07 02				db 1 + 1 
3f08 .. 00			db "*",0              
3f0a				endm 
# End of macro CWHEAD
3f0a			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3f0a				; TODO add floating point number detection 
3f0a					if DEBUG_FORTH_WORDS_KEY 
3f0a						DMARK "MUL" 
3f0a f5				push af  
3f0b 3a 1f 3f			ld a, (.dmark)  
3f0e 32 9d fd			ld (debug_mark),a  
3f11 3a 20 3f			ld a, (.dmark+1)  
3f14 32 9e fd			ld (debug_mark+1),a  
3f17 3a 21 3f			ld a, (.dmark+2)  
3f1a 32 9f fd			ld (debug_mark+2),a  
3f1d 18 03			jr .pastdmark  
3f1f ..			.dmark: db "MUL"  
3f22 f1			.pastdmark: pop af  
3f23			endm  
# End of macro DMARK
3f23						CALLMONITOR 
3f23 cd aa fd			call debug_vector  
3f26				endm  
# End of macro CALLMONITOR
3f26					endif 
3f26					FORTH_DSP 
3f26 cd 32 21			call macro_forth_dsp 
3f29				endm 
# End of macro FORTH_DSP
3f29					; v5 FORTH_DSP_VALUE 
3f29 7e					ld a,(hl)	; get type of value on TOS 
3f2a fe 02				cp DS_TYPE_INUM  
3f2c 28 06				jr z, .mul_inum 
3f2e			 
3f2e				if FORTH_ENABLE_FLOATMATH 
3f2e					jr .mul_done 
3f2e			 
3f2e				endif 
3f2e			 
3f2e					NEXTW 
3f2e cd a7 fd			call parse_vector 
3f31 c3 53 23			jp macro_next 
3f34				endm 
# End of macro NEXTW
3f34			.mul_inum:	 
3f34			 
3f34					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f34 cd 6c 21			call macro_dsp_valuehl 
3f37				endm 
# End of macro FORTH_DSP_VALUEHL
3f37			 
3f37 e5					push hl 
3f38			 
3f38					; destroy value TOS 
3f38			 
3f38					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f38 cd 24 22			call macro_forth_dsp_pop 
3f3b				endm 
# End of macro FORTH_DSP_POP
3f3b			 
3f3b			 
3f3b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f3b cd 6c 21			call macro_dsp_valuehl 
3f3e				endm 
# End of macro FORTH_DSP_VALUEHL
3f3e			 
3f3e					; one value on hl but move to a get other one back 
3f3e			 
3f3e 7d					ld a, l 
3f3f			 
3f3f d1					pop de 
3f40			 
3f40					; do the mull 
3f40			;		ex de, hl 
3f40			 
3f40 cd 2f 0f				call Mult16 
3f43					; save it 
3f43			 
3f43			;		push hl	 
3f43			 
3f43					; 
3f43			 
3f43					; destroy value TOS 
3f43			 
3f43					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f43 cd 24 22			call macro_forth_dsp_pop 
3f46				endm 
# End of macro FORTH_DSP_POP
3f46			 
3f46					; TODO push value back onto stack for another op etc 
3f46			 
3f46			;		pop hl 
3f46			 
3f46 cd 70 1f				call forth_push_numhl 
3f49			 
3f49			.mul_done: 
3f49					NEXTW 
3f49 cd a7 fd			call parse_vector 
3f4c c3 53 23			jp macro_next 
3f4f				endm 
# End of macro NEXTW
3f4f			 
3f4f			 
3f4f			 
3f4f			 
3f4f			.MIN: 
3f4f				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3f4f 49				db WORD_SYS_CORE+53             
3f50 d6 3f			dw .MAX            
3f52 04				db 3 + 1 
3f53 .. 00			db "MIN",0              
3f57				endm 
# End of macro CWHEAD
3f57			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3f57					if DEBUG_FORTH_WORDS_KEY 
3f57						DMARK "MIN" 
3f57 f5				push af  
3f58 3a 6c 3f			ld a, (.dmark)  
3f5b 32 9d fd			ld (debug_mark),a  
3f5e 3a 6d 3f			ld a, (.dmark+1)  
3f61 32 9e fd			ld (debug_mark+1),a  
3f64 3a 6e 3f			ld a, (.dmark+2)  
3f67 32 9f fd			ld (debug_mark+2),a  
3f6a 18 03			jr .pastdmark  
3f6c ..			.dmark: db "MIN"  
3f6f f1			.pastdmark: pop af  
3f70			endm  
# End of macro DMARK
3f70						CALLMONITOR 
3f70 cd aa fd			call debug_vector  
3f73				endm  
# End of macro CALLMONITOR
3f73					endif 
3f73					; get u2 
3f73			 
3f73					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f73 cd 6c 21			call macro_dsp_valuehl 
3f76				endm 
# End of macro FORTH_DSP_VALUEHL
3f76			 
3f76 e5					push hl   ; u2 
3f77			 
3f77					; destroy value TOS 
3f77			 
3f77					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f77 cd 24 22			call macro_forth_dsp_pop 
3f7a				endm 
# End of macro FORTH_DSP_POP
3f7a			 
3f7a					; get u1 
3f7a			 
3f7a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f7a cd 6c 21			call macro_dsp_valuehl 
3f7d				endm 
# End of macro FORTH_DSP_VALUEHL
3f7d			 
3f7d e5					push hl  ; u1 
3f7e			 
3f7e					; destroy value TOS 
3f7e			 
3f7e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f7e cd 24 22			call macro_forth_dsp_pop 
3f81				endm 
# End of macro FORTH_DSP_POP
3f81			 
3f81 b7			 or a      ;clear carry flag 
3f82 e1			  pop hl    ; u1 
3f83 d1			  pop de    ; u2 
3f84 e5				push hl   ; saved in case hl is lowest 
3f85 ed 52		  sbc hl,de 
3f87 30 26		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3f89			 
3f89 e1				pop hl 
3f8a					if DEBUG_FORTH_WORDS 
3f8a						DMARK "MIN" 
3f8a f5				push af  
3f8b 3a 9f 3f			ld a, (.dmark)  
3f8e 32 9d fd			ld (debug_mark),a  
3f91 3a a0 3f			ld a, (.dmark+1)  
3f94 32 9e fd			ld (debug_mark+1),a  
3f97 3a a1 3f			ld a, (.dmark+2)  
3f9a 32 9f fd			ld (debug_mark+2),a  
3f9d 18 03			jr .pastdmark  
3f9f ..			.dmark: db "MIN"  
3fa2 f1			.pastdmark: pop af  
3fa3			endm  
# End of macro DMARK
3fa3						CALLMONITOR 
3fa3 cd aa fd			call debug_vector  
3fa6				endm  
# End of macro CALLMONITOR
3fa6					endif 
3fa6 cd 70 1f				call forth_push_numhl 
3fa9			 
3fa9				       NEXTW 
3fa9 cd a7 fd			call parse_vector 
3fac c3 53 23			jp macro_next 
3faf				endm 
# End of macro NEXTW
3faf			 
3faf			.mincont:  
3faf c1				pop bc   ; tidy up 
3fb0 eb				ex de , hl  
3fb1					if DEBUG_FORTH_WORDS 
3fb1						DMARK "MI1" 
3fb1 f5				push af  
3fb2 3a c6 3f			ld a, (.dmark)  
3fb5 32 9d fd			ld (debug_mark),a  
3fb8 3a c7 3f			ld a, (.dmark+1)  
3fbb 32 9e fd			ld (debug_mark+1),a  
3fbe 3a c8 3f			ld a, (.dmark+2)  
3fc1 32 9f fd			ld (debug_mark+2),a  
3fc4 18 03			jr .pastdmark  
3fc6 ..			.dmark: db "MI1"  
3fc9 f1			.pastdmark: pop af  
3fca			endm  
# End of macro DMARK
3fca						CALLMONITOR 
3fca cd aa fd			call debug_vector  
3fcd				endm  
# End of macro CALLMONITOR
3fcd					endif 
3fcd cd 70 1f				call forth_push_numhl 
3fd0			 
3fd0				       NEXTW 
3fd0 cd a7 fd			call parse_vector 
3fd3 c3 53 23			jp macro_next 
3fd6				endm 
# End of macro NEXTW
3fd6			.MAX: 
3fd6				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3fd6 4a				db WORD_SYS_CORE+54             
3fd7 5d 40			dw .RND16            
3fd9 04				db 3 + 1 
3fda .. 00			db "MAX",0              
3fde				endm 
# End of macro CWHEAD
3fde			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3fde					if DEBUG_FORTH_WORDS_KEY 
3fde						DMARK "MAX" 
3fde f5				push af  
3fdf 3a f3 3f			ld a, (.dmark)  
3fe2 32 9d fd			ld (debug_mark),a  
3fe5 3a f4 3f			ld a, (.dmark+1)  
3fe8 32 9e fd			ld (debug_mark+1),a  
3feb 3a f5 3f			ld a, (.dmark+2)  
3fee 32 9f fd			ld (debug_mark+2),a  
3ff1 18 03			jr .pastdmark  
3ff3 ..			.dmark: db "MAX"  
3ff6 f1			.pastdmark: pop af  
3ff7			endm  
# End of macro DMARK
3ff7						CALLMONITOR 
3ff7 cd aa fd			call debug_vector  
3ffa				endm  
# End of macro CALLMONITOR
3ffa					endif 
3ffa					; get u2 
3ffa			 
3ffa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ffa cd 6c 21			call macro_dsp_valuehl 
3ffd				endm 
# End of macro FORTH_DSP_VALUEHL
3ffd			 
3ffd e5					push hl   ; u2 
3ffe			 
3ffe					; destroy value TOS 
3ffe			 
3ffe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ffe cd 24 22			call macro_forth_dsp_pop 
4001				endm 
# End of macro FORTH_DSP_POP
4001			 
4001					; get u1 
4001			 
4001					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4001 cd 6c 21			call macro_dsp_valuehl 
4004				endm 
# End of macro FORTH_DSP_VALUEHL
4004			 
4004 e5					push hl  ; u1 
4005			 
4005					; destroy value TOS 
4005			 
4005					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4005 cd 24 22			call macro_forth_dsp_pop 
4008				endm 
# End of macro FORTH_DSP_POP
4008			 
4008 b7			 or a      ;clear carry flag 
4009 e1			  pop hl    ; u1 
400a d1			  pop de    ; u2 
400b e5				push hl   ; saved in case hl is lowest 
400c ed 52		  sbc hl,de 
400e 38 26		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
4010			 
4010 e1				pop hl 
4011					if DEBUG_FORTH_WORDS 
4011						DMARK "MAX" 
4011 f5				push af  
4012 3a 26 40			ld a, (.dmark)  
4015 32 9d fd			ld (debug_mark),a  
4018 3a 27 40			ld a, (.dmark+1)  
401b 32 9e fd			ld (debug_mark+1),a  
401e 3a 28 40			ld a, (.dmark+2)  
4021 32 9f fd			ld (debug_mark+2),a  
4024 18 03			jr .pastdmark  
4026 ..			.dmark: db "MAX"  
4029 f1			.pastdmark: pop af  
402a			endm  
# End of macro DMARK
402a						CALLMONITOR 
402a cd aa fd			call debug_vector  
402d				endm  
# End of macro CALLMONITOR
402d					endif 
402d cd 70 1f				call forth_push_numhl 
4030			 
4030				       NEXTW 
4030 cd a7 fd			call parse_vector 
4033 c3 53 23			jp macro_next 
4036				endm 
# End of macro NEXTW
4036			 
4036			.maxcont:  
4036 c1				pop bc   ; tidy up 
4037 eb				ex de , hl  
4038					if DEBUG_FORTH_WORDS 
4038						DMARK "MA1" 
4038 f5				push af  
4039 3a 4d 40			ld a, (.dmark)  
403c 32 9d fd			ld (debug_mark),a  
403f 3a 4e 40			ld a, (.dmark+1)  
4042 32 9e fd			ld (debug_mark+1),a  
4045 3a 4f 40			ld a, (.dmark+2)  
4048 32 9f fd			ld (debug_mark+2),a  
404b 18 03			jr .pastdmark  
404d ..			.dmark: db "MA1"  
4050 f1			.pastdmark: pop af  
4051			endm  
# End of macro DMARK
4051						CALLMONITOR 
4051 cd aa fd			call debug_vector  
4054				endm  
# End of macro CALLMONITOR
4054					endif 
4054 cd 70 1f				call forth_push_numhl 
4057				       NEXTW 
4057 cd a7 fd			call parse_vector 
405a c3 53 23			jp macro_next 
405d				endm 
# End of macro NEXTW
405d			 
405d			.RND16: 
405d				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
405d 4e				db WORD_SYS_CORE+58             
405e 8f 40			dw .RND8            
4060 06				db 5 + 1 
4061 .. 00			db "RND16",0              
4067				endm 
# End of macro CWHEAD
4067			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
4067					if DEBUG_FORTH_WORDS_KEY 
4067						DMARK "R16" 
4067 f5				push af  
4068 3a 7c 40			ld a, (.dmark)  
406b 32 9d fd			ld (debug_mark),a  
406e 3a 7d 40			ld a, (.dmark+1)  
4071 32 9e fd			ld (debug_mark+1),a  
4074 3a 7e 40			ld a, (.dmark+2)  
4077 32 9f fd			ld (debug_mark+2),a  
407a 18 03			jr .pastdmark  
407c ..			.dmark: db "R16"  
407f f1			.pastdmark: pop af  
4080			endm  
# End of macro DMARK
4080						CALLMONITOR 
4080 cd aa fd			call debug_vector  
4083				endm  
# End of macro CALLMONITOR
4083					endif 
4083 cd d3 0e				call prng16  
4086 cd 70 1f				call forth_push_numhl 
4089				       NEXTW 
4089 cd a7 fd			call parse_vector 
408c c3 53 23			jp macro_next 
408f				endm 
# End of macro NEXTW
408f			.RND8: 
408f				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
408f 60				db WORD_SYS_CORE+76             
4090 c7 40			dw .RND            
4092 05				db 4 + 1 
4093 .. 00			db "RND8",0              
4098				endm 
# End of macro CWHEAD
4098			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
4098					if DEBUG_FORTH_WORDS_KEY 
4098						DMARK "RN8" 
4098 f5				push af  
4099 3a ad 40			ld a, (.dmark)  
409c 32 9d fd			ld (debug_mark),a  
409f 3a ae 40			ld a, (.dmark+1)  
40a2 32 9e fd			ld (debug_mark+1),a  
40a5 3a af 40			ld a, (.dmark+2)  
40a8 32 9f fd			ld (debug_mark+2),a  
40ab 18 03			jr .pastdmark  
40ad ..			.dmark: db "RN8"  
40b0 f1			.pastdmark: pop af  
40b1			endm  
# End of macro DMARK
40b1						CALLMONITOR 
40b1 cd aa fd			call debug_vector  
40b4				endm  
# End of macro CALLMONITOR
40b4					endif 
40b4 2a db fa				ld hl,(xrandc) 
40b7 23					inc hl 
40b8 cd ed 0e				call xrnd 
40bb 6f					ld l,a	 
40bc 26 00				ld h,0 
40be cd 70 1f				call forth_push_numhl 
40c1				       NEXTW 
40c1 cd a7 fd			call parse_vector 
40c4 c3 53 23			jp macro_next 
40c7				endm 
# End of macro NEXTW
40c7			.RND: 
40c7				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
40c7 60				db WORD_SYS_CORE+76             
40c8 d0 41			dw .ENDMATHS            
40ca 04				db 3 + 1 
40cb .. 00			db "RND",0              
40cf				endm 
# End of macro CWHEAD
40cf			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
40cf			 
40cf					if DEBUG_FORTH_WORDS_KEY 
40cf						DMARK "RND" 
40cf f5				push af  
40d0 3a e4 40			ld a, (.dmark)  
40d3 32 9d fd			ld (debug_mark),a  
40d6 3a e5 40			ld a, (.dmark+1)  
40d9 32 9e fd			ld (debug_mark+1),a  
40dc 3a e6 40			ld a, (.dmark+2)  
40df 32 9f fd			ld (debug_mark+2),a  
40e2 18 03			jr .pastdmark  
40e4 ..			.dmark: db "RND"  
40e7 f1			.pastdmark: pop af  
40e8			endm  
# End of macro DMARK
40e8						CALLMONITOR 
40e8 cd aa fd			call debug_vector  
40eb				endm  
# End of macro CALLMONITOR
40eb					endif 
40eb					 
40eb					FORTH_DSP_VALUEHL    ; upper range 
40eb cd 6c 21			call macro_dsp_valuehl 
40ee				endm 
# End of macro FORTH_DSP_VALUEHL
40ee			 
40ee 22 df fa				ld (LFSRSeed), hl	 
40f1			 
40f1					if DEBUG_FORTH_WORDS 
40f1						DMARK "RN1" 
40f1 f5				push af  
40f2 3a 06 41			ld a, (.dmark)  
40f5 32 9d fd			ld (debug_mark),a  
40f8 3a 07 41			ld a, (.dmark+1)  
40fb 32 9e fd			ld (debug_mark+1),a  
40fe 3a 08 41			ld a, (.dmark+2)  
4101 32 9f fd			ld (debug_mark+2),a  
4104 18 03			jr .pastdmark  
4106 ..			.dmark: db "RN1"  
4109 f1			.pastdmark: pop af  
410a			endm  
# End of macro DMARK
410a						CALLMONITOR 
410a cd aa fd			call debug_vector  
410d				endm  
# End of macro CALLMONITOR
410d					endif 
410d					FORTH_DSP_POP 
410d cd 24 22			call macro_forth_dsp_pop 
4110				endm 
# End of macro FORTH_DSP_POP
4110			 
4110					FORTH_DSP_VALUEHL    ; low range 
4110 cd 6c 21			call macro_dsp_valuehl 
4113				endm 
# End of macro FORTH_DSP_VALUEHL
4113			 
4113					if DEBUG_FORTH_WORDS 
4113						DMARK "RN2" 
4113 f5				push af  
4114 3a 28 41			ld a, (.dmark)  
4117 32 9d fd			ld (debug_mark),a  
411a 3a 29 41			ld a, (.dmark+1)  
411d 32 9e fd			ld (debug_mark+1),a  
4120 3a 2a 41			ld a, (.dmark+2)  
4123 32 9f fd			ld (debug_mark+2),a  
4126 18 03			jr .pastdmark  
4128 ..			.dmark: db "RN2"  
412b f1			.pastdmark: pop af  
412c			endm  
# End of macro DMARK
412c						CALLMONITOR 
412c cd aa fd			call debug_vector  
412f				endm  
# End of macro CALLMONITOR
412f					endif 
412f 22 e1 fa				ld (LFSRSeed+2), hl 
4132			 
4132					FORTH_DSP_POP 
4132 cd 24 22			call macro_forth_dsp_pop 
4135				endm 
# End of macro FORTH_DSP_POP
4135			 
4135 e5					push hl 
4136			 
4136 e1			.inrange:	pop hl 
4137 cd d3 0e				call prng16  
413a					if DEBUG_FORTH_WORDS 
413a						DMARK "RN3" 
413a f5				push af  
413b 3a 4f 41			ld a, (.dmark)  
413e 32 9d fd			ld (debug_mark),a  
4141 3a 50 41			ld a, (.dmark+1)  
4144 32 9e fd			ld (debug_mark+1),a  
4147 3a 51 41			ld a, (.dmark+2)  
414a 32 9f fd			ld (debug_mark+2),a  
414d 18 03			jr .pastdmark  
414f ..			.dmark: db "RN3"  
4152 f1			.pastdmark: pop af  
4153			endm  
# End of macro DMARK
4153						CALLMONITOR 
4153 cd aa fd			call debug_vector  
4156				endm  
# End of macro CALLMONITOR
4156					endif 
4156					 
4156					; if the range is 8bit knock out the high byte 
4156			 
4156 ed 5b df fa			ld de, (LFSRSeed)     ; check high level 
415a			 
415a 3e 00				ld a, 0 
415c ba					cp d  
415d 20 1e				jr nz, .hirange 
415f 26 00				ld h, 0   ; knock it down to 8bit 
4161			 
4161					if DEBUG_FORTH_WORDS 
4161						DMARK "RNk" 
4161 f5				push af  
4162 3a 76 41			ld a, (.dmark)  
4165 32 9d fd			ld (debug_mark),a  
4168 3a 77 41			ld a, (.dmark+1)  
416b 32 9e fd			ld (debug_mark+1),a  
416e 3a 78 41			ld a, (.dmark+2)  
4171 32 9f fd			ld (debug_mark+2),a  
4174 18 03			jr .pastdmark  
4176 ..			.dmark: db "RNk"  
4179 f1			.pastdmark: pop af  
417a			endm  
# End of macro DMARK
417a						CALLMONITOR 
417a cd aa fd			call debug_vector  
417d				endm  
# End of macro CALLMONITOR
417d					endif 
417d			.hirange:   
417d e5					push hl  
417e b7					or a  
417f ed 52		                sbc hl, de 
4181			 
4181					;call cmp16 
4181			 
4181 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
4183 e1					pop hl 
4184 e5					push hl 
4185			 
4185					if DEBUG_FORTH_WORDS 
4185						DMARK "RN4" 
4185 f5				push af  
4186 3a 9a 41			ld a, (.dmark)  
4189 32 9d fd			ld (debug_mark),a  
418c 3a 9b 41			ld a, (.dmark+1)  
418f 32 9e fd			ld (debug_mark+1),a  
4192 3a 9c 41			ld a, (.dmark+2)  
4195 32 9f fd			ld (debug_mark+2),a  
4198 18 03			jr .pastdmark  
419a ..			.dmark: db "RN4"  
419d f1			.pastdmark: pop af  
419e			endm  
# End of macro DMARK
419e						CALLMONITOR 
419e cd aa fd			call debug_vector  
41a1				endm  
# End of macro CALLMONITOR
41a1					endif 
41a1 ed 5b e1 fa			ld de, (LFSRSeed+2)   ; check low range 
41a5					;call cmp16 
41a5				 
41a5 b7					or a  
41a6 ed 52		                sbc hl, de 
41a8 38 8c				jr c, .inrange 
41aa			 
41aa e1					pop hl 
41ab					 
41ab					if DEBUG_FORTH_WORDS 
41ab						DMARK "RNd" 
41ab f5				push af  
41ac 3a c0 41			ld a, (.dmark)  
41af 32 9d fd			ld (debug_mark),a  
41b2 3a c1 41			ld a, (.dmark+1)  
41b5 32 9e fd			ld (debug_mark+1),a  
41b8 3a c2 41			ld a, (.dmark+2)  
41bb 32 9f fd			ld (debug_mark+2),a  
41be 18 03			jr .pastdmark  
41c0 ..			.dmark: db "RNd"  
41c3 f1			.pastdmark: pop af  
41c4			endm  
# End of macro DMARK
41c4						CALLMONITOR 
41c4 cd aa fd			call debug_vector  
41c7				endm  
# End of macro CALLMONITOR
41c7					endif 
41c7			 
41c7			 
41c7 cd 70 1f				call forth_push_numhl 
41ca				       NEXTW 
41ca cd a7 fd			call parse_vector 
41cd c3 53 23			jp macro_next 
41d0				endm 
# End of macro NEXTW
41d0			 
41d0			.ENDMATHS: 
41d0			 
41d0			; eof 
41d0			 
# End of file forth_words_maths.asm
41d0			include "forth_words_display.asm" 
41d0			 
41d0			; | ## Display Words 
41d0			 
41d0			.ACT: 
41d0			 
41d0				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
41d0 62				db WORD_SYS_CORE+78             
41d1 1f 42			dw .INFO            
41d3 07				db 6 + 1 
41d4 .. 00			db "ACTIVE",0              
41db				endm 
# End of macro CWHEAD
41db			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
41db			;  
41db			; | | To display a pulsing activity indicator in a processing loop do this... 
41db			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
41db			 
41db					if DEBUG_FORTH_WORDS_KEY 
41db						DMARK "ACT" 
41db f5				push af  
41dc 3a f0 41			ld a, (.dmark)  
41df 32 9d fd			ld (debug_mark),a  
41e2 3a f1 41			ld a, (.dmark+1)  
41e5 32 9e fd			ld (debug_mark+1),a  
41e8 3a f2 41			ld a, (.dmark+2)  
41eb 32 9f fd			ld (debug_mark+2),a  
41ee 18 03			jr .pastdmark  
41f0 ..			.dmark: db "ACT"  
41f3 f1			.pastdmark: pop af  
41f4			endm  
# End of macro DMARK
41f4						CALLMONITOR 
41f4 cd aa fd			call debug_vector  
41f7				endm  
# End of macro CALLMONITOR
41f7					endif 
41f7 cd d4 0c				call active 
41fa					if DEBUG_FORTH_WORDS 
41fa						DMARK "ACp" 
41fa f5				push af  
41fb 3a 0f 42			ld a, (.dmark)  
41fe 32 9d fd			ld (debug_mark),a  
4201 3a 10 42			ld a, (.dmark+1)  
4204 32 9e fd			ld (debug_mark+1),a  
4207 3a 11 42			ld a, (.dmark+2)  
420a 32 9f fd			ld (debug_mark+2),a  
420d 18 03			jr .pastdmark  
420f ..			.dmark: db "ACp"  
4212 f1			.pastdmark: pop af  
4213			endm  
# End of macro DMARK
4213						CALLMONITOR 
4213 cd aa fd			call debug_vector  
4216				endm  
# End of macro CALLMONITOR
4216					endif 
4216 cd da 1f				call forth_push_str 
4219			 
4219					NEXTW 
4219 cd a7 fd			call parse_vector 
421c c3 53 23			jp macro_next 
421f				endm 
# End of macro NEXTW
421f			.INFO: 
421f			 
421f				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
421f 62				db WORD_SYS_CORE+78             
4220 3f 42			dw .ATP            
4222 05				db 4 + 1 
4223 .. 00			db "INFO",0              
4228				endm 
# End of macro CWHEAD
4228			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
4228					FORTH_DSP_VALUEHL 
4228 cd 6c 21			call macro_dsp_valuehl 
422b				endm 
# End of macro FORTH_DSP_VALUEHL
422b			 
422b					FORTH_DSP_POP 
422b cd 24 22			call macro_forth_dsp_pop 
422e				endm 
# End of macro FORTH_DSP_POP
422e			 
422e e5					push hl 
422f			 
422f					FORTH_DSP_VALUEHL 
422f cd 6c 21			call macro_dsp_valuehl 
4232				endm 
# End of macro FORTH_DSP_VALUEHL
4232			 
4232					FORTH_DSP_POP 
4232 cd 24 22			call macro_forth_dsp_pop 
4235				endm 
# End of macro FORTH_DSP_POP
4235			 
4235 d1					pop de 
4236			 
4236 cd 0e 0d				call info_panel 
4239			 
4239			 
4239					NEXTW 
4239 cd a7 fd			call parse_vector 
423c c3 53 23			jp macro_next 
423f				endm 
# End of macro NEXTW
423f			.ATP: 
423f				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
423f 62				db WORD_SYS_CORE+78             
4240 b9 42			dw .FB            
4242 04				db 3 + 1 
4243 .. 00			db "AT?",0              
4247				endm 
# End of macro CWHEAD
4247			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
4247					if DEBUG_FORTH_WORDS_KEY 
4247						DMARK "AT?" 
4247 f5				push af  
4248 3a 5c 42			ld a, (.dmark)  
424b 32 9d fd			ld (debug_mark),a  
424e 3a 5d 42			ld a, (.dmark+1)  
4251 32 9e fd			ld (debug_mark+1),a  
4254 3a 5e 42			ld a, (.dmark+2)  
4257 32 9f fd			ld (debug_mark+2),a  
425a 18 03			jr .pastdmark  
425c ..			.dmark: db "AT?"  
425f f1			.pastdmark: pop af  
4260			endm  
# End of macro DMARK
4260						CALLMONITOR 
4260 cd aa fd			call debug_vector  
4263				endm  
# End of macro CALLMONITOR
4263					endif 
4263 3a 90 f9				ld a, (f_cursor_ptr) 
4266			 
4266			if DEBUG_FORTH_WORDS 
4266				DMARK "AT?" 
4266 f5				push af  
4267 3a 7b 42			ld a, (.dmark)  
426a 32 9d fd			ld (debug_mark),a  
426d 3a 7c 42			ld a, (.dmark+1)  
4270 32 9e fd			ld (debug_mark+1),a  
4273 3a 7d 42			ld a, (.dmark+2)  
4276 32 9f fd			ld (debug_mark+2),a  
4279 18 03			jr .pastdmark  
427b ..			.dmark: db "AT?"  
427e f1			.pastdmark: pop af  
427f			endm  
# End of macro DMARK
427f				CALLMONITOR 
427f cd aa fd			call debug_vector  
4282				endm  
# End of macro CALLMONITOR
4282			endif	 
4282					; count the number of rows 
4282			 
4282 06 00				ld b, 0 
4284 4f			.atpr:		ld c, a    ; save in case we go below zero 
4285 d6 28				sub display_cols 
4287 f2 8d 42				jp p, .atprunder 
428a 04					inc b 
428b 18 f7				jr .atpr 
428d			.atprunder:	 
428d			if DEBUG_FORTH_WORDS 
428d				DMARK "A?2" 
428d f5				push af  
428e 3a a2 42			ld a, (.dmark)  
4291 32 9d fd			ld (debug_mark),a  
4294 3a a3 42			ld a, (.dmark+1)  
4297 32 9e fd			ld (debug_mark+1),a  
429a 3a a4 42			ld a, (.dmark+2)  
429d 32 9f fd			ld (debug_mark+2),a  
42a0 18 03			jr .pastdmark  
42a2 ..			.dmark: db "A?2"  
42a5 f1			.pastdmark: pop af  
42a6			endm  
# End of macro DMARK
42a6				CALLMONITOR 
42a6 cd aa fd			call debug_vector  
42a9				endm  
# End of macro CALLMONITOR
42a9			endif	 
42a9 26 00				ld h, 0 
42ab 69					ld l, c 
42ac cd 70 1f				call forth_push_numhl 
42af 68					ld l, b  
42b0 cd 70 1f				call forth_push_numhl 
42b3			 
42b3			 
42b3				NEXTW 
42b3 cd a7 fd			call parse_vector 
42b6 c3 53 23			jp macro_next 
42b9				endm 
# End of macro NEXTW
42b9			 
42b9			.FB: 
42b9				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
42b9 1b				db WORD_SYS_CORE+7             
42ba 0a 43			dw .EMIT            
42bc 03				db 2 + 1 
42bd .. 00			db "FB",0              
42c0				endm 
# End of macro CWHEAD
42c0			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
42c0			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
42c0			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
42c0			; | | If automatic display is off then updates will not be shown until DRAW is used. 
42c0					if DEBUG_FORTH_WORDS_KEY 
42c0						DMARK "FB." 
42c0 f5				push af  
42c1 3a d5 42			ld a, (.dmark)  
42c4 32 9d fd			ld (debug_mark),a  
42c7 3a d6 42			ld a, (.dmark+1)  
42ca 32 9e fd			ld (debug_mark+1),a  
42cd 3a d7 42			ld a, (.dmark+2)  
42d0 32 9f fd			ld (debug_mark+2),a  
42d3 18 03			jr .pastdmark  
42d5 ..			.dmark: db "FB."  
42d8 f1			.pastdmark: pop af  
42d9			endm  
# End of macro DMARK
42d9						CALLMONITOR 
42d9 cd aa fd			call debug_vector  
42dc				endm  
# End of macro CALLMONITOR
42dc					endif 
42dc			 
42dc					FORTH_DSP_VALUEHL 
42dc cd 6c 21			call macro_dsp_valuehl 
42df				endm 
# End of macro FORTH_DSP_VALUEHL
42df			 
42df 7d					ld a, l 
42e0 fe 01				cp 1 
42e2 20 05				jr nz, .fbn1 
42e4 21 42 fc				ld hl, display_fb1 
42e7 18 15				jr .fbset 
42e9 fe 02		.fbn1:		cp 2 
42eb 20 05				jr nz, .fbn2 
42ed 21 00 fb				ld hl, display_fb2 
42f0 18 0c				jr .fbset 
42f2 fe 03		.fbn2:		cp 3 
42f4 20 05				jr nz, .fbn3 
42f6 21 a1 fb				ld hl, display_fb3 
42f9 18 03				jr .fbset 
42fb			.fbn3:		 ; if invalid number select first 
42fb 21 42 fc				ld hl, display_fb1 
42fe 22 fe fa		.fbset:		ld (display_fb_active), hl 
4301			 
4301					FORTH_DSP_POP 
4301 cd 24 22			call macro_forth_dsp_pop 
4304				endm 
# End of macro FORTH_DSP_POP
4304			 
4304					NEXTW 
4304 cd a7 fd			call parse_vector 
4307 c3 53 23			jp macro_next 
430a				endm 
# End of macro NEXTW
430a			 
430a			 
430a			.EMIT: 
430a				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
430a 1b				db WORD_SYS_CORE+7             
430b 5d 43			dw .DOTH            
430d 05				db 4 + 1 
430e .. 00			db "EMIT",0              
4313				endm 
# End of macro CWHEAD
4313			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
4313					; get value off TOS and display it 
4313			 
4313					if DEBUG_FORTH_WORDS_KEY 
4313						DMARK "EMT" 
4313 f5				push af  
4314 3a 28 43			ld a, (.dmark)  
4317 32 9d fd			ld (debug_mark),a  
431a 3a 29 43			ld a, (.dmark+1)  
431d 32 9e fd			ld (debug_mark+1),a  
4320 3a 2a 43			ld a, (.dmark+2)  
4323 32 9f fd			ld (debug_mark+2),a  
4326 18 03			jr .pastdmark  
4328 ..			.dmark: db "EMT"  
432b f1			.pastdmark: pop af  
432c			endm  
# End of macro DMARK
432c						CALLMONITOR 
432c cd aa fd			call debug_vector  
432f				endm  
# End of macro CALLMONITOR
432f					endif 
432f			 
432f					FORTH_DSP_VALUEHL 
432f cd 6c 21			call macro_dsp_valuehl 
4332				endm 
# End of macro FORTH_DSP_VALUEHL
4332			 
4332 7d					ld a,l 
4333			 
4333					; TODO write to display 
4333			 
4333 32 f1 f2				ld (os_input), a 
4336 3e 00				ld a, 0 
4338 32 f2 f2				ld (os_input+1), a 
433b					 
433b 3a 90 f9				ld a, (f_cursor_ptr) 
433e 11 f1 f2				ld de, os_input 
4341 cd 8e 0d				call str_at_display 
4344			 
4344			 
4344 3a 6e f9				ld a,(cli_autodisplay) 
4347			;		cp 0 
4347 b7					or a 
4348 28 03				jr z, .enoupdate 
434a cd 9e 0d						call update_display 
434d					.enoupdate: 
434d			 
434d 3a 90 f9				ld a, (f_cursor_ptr) 
4350 3c					inc a 
4351 32 90 f9				ld (f_cursor_ptr), a   ; save new pos 
4354			 
4354			 
4354					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4354 cd 24 22			call macro_forth_dsp_pop 
4357				endm 
# End of macro FORTH_DSP_POP
4357			  
4357			 
4357					NEXTW 
4357 cd a7 fd			call parse_vector 
435a c3 53 23			jp macro_next 
435d				endm 
# End of macro NEXTW
435d			.DOTH: 
435d				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
435d 1c				db WORD_SYS_CORE+8             
435e 90 43			dw .DOTF            
4360 03				db 2 + 1 
4361 .. 00			db ".-",0              
4364				endm 
# End of macro CWHEAD
4364			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
4364					; get value off TOS and display it 
4364					if DEBUG_FORTH_WORDS_KEY 
4364						DMARK "DTD" 
4364 f5				push af  
4365 3a 79 43			ld a, (.dmark)  
4368 32 9d fd			ld (debug_mark),a  
436b 3a 7a 43			ld a, (.dmark+1)  
436e 32 9e fd			ld (debug_mark+1),a  
4371 3a 7b 43			ld a, (.dmark+2)  
4374 32 9f fd			ld (debug_mark+2),a  
4377 18 03			jr .pastdmark  
4379 ..			.dmark: db "DTD"  
437c f1			.pastdmark: pop af  
437d			endm  
# End of macro DMARK
437d						CALLMONITOR 
437d cd aa fd			call debug_vector  
4380				endm  
# End of macro CALLMONITOR
4380					endif 
4380 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
4382 3e 00			ld a, 0 
4384 32 6f f9			ld (cli_mvdot), a 
4387 c3 ea 43			jp .dotgo 
438a				NEXTW 
438a cd a7 fd			call parse_vector 
438d c3 53 23			jp macro_next 
4390				endm 
# End of macro NEXTW
4390			.DOTF: 
4390				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
4390 1c				db WORD_SYS_CORE+8             
4391 c1 43			dw .DOT            
4393 03				db 2 + 1 
4394 .. 00			db ".>",0              
4397				endm 
# End of macro CWHEAD
4397			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
4397					; get value off TOS and display it 
4397			        ; TODO BUG adds extra spaces 
4397			        ; TODO BUG handle numerics? 
4397					if DEBUG_FORTH_WORDS_KEY 
4397						DMARK "DTC" 
4397 f5				push af  
4398 3a ac 43			ld a, (.dmark)  
439b 32 9d fd			ld (debug_mark),a  
439e 3a ad 43			ld a, (.dmark+1)  
43a1 32 9e fd			ld (debug_mark+1),a  
43a4 3a ae 43			ld a, (.dmark+2)  
43a7 32 9f fd			ld (debug_mark+2),a  
43aa 18 03			jr .pastdmark  
43ac ..			.dmark: db "DTC"  
43af f1			.pastdmark: pop af  
43b0			endm  
# End of macro DMARK
43b0						CALLMONITOR 
43b0 cd aa fd			call debug_vector  
43b3				endm  
# End of macro CALLMONITOR
43b3					endif 
43b3 3e 01			ld a, 1 
43b5 32 6f f9			ld (cli_mvdot), a 
43b8 c3 ea 43			jp .dotgo 
43bb				NEXTW 
43bb cd a7 fd			call parse_vector 
43be c3 53 23			jp macro_next 
43c1				endm 
# End of macro NEXTW
43c1			 
43c1			.DOT: 
43c1				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
43c1 1c				db WORD_SYS_CORE+8             
43c2 9c 45			dw .CLS            
43c4 02				db 1 + 1 
43c5 .. 00			db ".",0              
43c7				endm 
# End of macro CWHEAD
43c7			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
43c7					; get value off TOS and display it 
43c7			 
43c7					if DEBUG_FORTH_WORDS_KEY 
43c7						DMARK "DOT" 
43c7 f5				push af  
43c8 3a dc 43			ld a, (.dmark)  
43cb 32 9d fd			ld (debug_mark),a  
43ce 3a dd 43			ld a, (.dmark+1)  
43d1 32 9e fd			ld (debug_mark+1),a  
43d4 3a de 43			ld a, (.dmark+2)  
43d7 32 9f fd			ld (debug_mark+2),a  
43da 18 03			jr .pastdmark  
43dc ..			.dmark: db "DOT"  
43df f1			.pastdmark: pop af  
43e0			endm  
# End of macro DMARK
43e0						CALLMONITOR 
43e0 cd aa fd			call debug_vector  
43e3				endm  
# End of macro CALLMONITOR
43e3					endif 
43e3 3e 00			ld a, 0 
43e5 32 6f f9			ld (cli_mvdot), a 
43e8 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
43ea				 
43ea			 
43ea			.dotgo: 
43ea			 
43ea			; move up type to on stack for parserv5 
43ea					FORTH_DSP 
43ea cd 32 21			call macro_forth_dsp 
43ed				endm 
# End of macro FORTH_DSP
43ed				;FORTH_DSP_VALUE  
43ed			 
43ed			if DEBUG_FORTH_DOT 
43ed				DMARK "DOT" 
43ed f5				push af  
43ee 3a 02 44			ld a, (.dmark)  
43f1 32 9d fd			ld (debug_mark),a  
43f4 3a 03 44			ld a, (.dmark+1)  
43f7 32 9e fd			ld (debug_mark+1),a  
43fa 3a 04 44			ld a, (.dmark+2)  
43fd 32 9f fd			ld (debug_mark+2),a  
4400 18 03			jr .pastdmark  
4402 ..			.dmark: db "DOT"  
4405 f1			.pastdmark: pop af  
4406			endm  
# End of macro DMARK
4406				CALLMONITOR 
4406 cd aa fd			call debug_vector  
4409				endm  
# End of macro CALLMONITOR
4409			endif	 
4409			;		.print: 
4409			 
4409 7e				ld a,(hl)  ; work out what type of value is on the TOS 
440a 23				inc hl   ; position to the actual value 
440b fe 01			cp DS_TYPE_STR 
440d 20 06			jr nz, .dotnum1  
440f			 
440f			; display string 
440f				FORTH_DSP_VALUE  
440f cd 55 21			call macro_forth_dsp_value 
4412				endm 
# End of macro FORTH_DSP_VALUE
4412 eb				ex de,hl 
4413 18 49			jr .dotwrite 
4415			 
4415			.dotnum1: 
4415 fe 02			cp DS_TYPE_INUM 
4417 20 44			jr nz, .dotflot 
4419			 
4419			 
4419			; display number 
4419			 
4419			;	push hl 
4419			;	call clear_display 
4419			;	pop hl 
4419			 
4419 5e				ld e, (hl) 
441a 23				inc hl 
441b 56				ld d, (hl) 
441c 21 f3 f0			ld hl, scratch 
441f			if DEBUG_FORTH_DOT 
441f				DMARK "DT1" 
441f f5				push af  
4420 3a 34 44			ld a, (.dmark)  
4423 32 9d fd			ld (debug_mark),a  
4426 3a 35 44			ld a, (.dmark+1)  
4429 32 9e fd			ld (debug_mark+1),a  
442c 3a 36 44			ld a, (.dmark+2)  
442f 32 9f fd			ld (debug_mark+2),a  
4432 18 03			jr .pastdmark  
4434 ..			.dmark: db "DT1"  
4437 f1			.pastdmark: pop af  
4438			endm  
# End of macro DMARK
4438				CALLMONITOR 
4438 cd aa fd			call debug_vector  
443b				endm  
# End of macro CALLMONITOR
443b			endif	 
443b			 
443b cd b3 12			call uitoa_16 
443e eb				ex de,hl 
443f			 
443f			if DEBUG_FORTH_DOT 
443f				DMARK "DT2" 
443f f5				push af  
4440 3a 54 44			ld a, (.dmark)  
4443 32 9d fd			ld (debug_mark),a  
4446 3a 55 44			ld a, (.dmark+1)  
4449 32 9e fd			ld (debug_mark+1),a  
444c 3a 56 44			ld a, (.dmark+2)  
444f 32 9f fd			ld (debug_mark+2),a  
4452 18 03			jr .pastdmark  
4454 ..			.dmark: db "DT2"  
4457 f1			.pastdmark: pop af  
4458			endm  
# End of macro DMARK
4458				CALLMONITOR 
4458 cd aa fd			call debug_vector  
445b				endm  
# End of macro CALLMONITOR
445b			endif	 
445b			 
445b			;	ld de, os_word_scratch 
445b 18 01			jr .dotwrite 
445d			 
445d 00			.dotflot:   nop 
445e			; TODO print floating point number 
445e			 
445e			.dotwrite:		 
445e			 
445e					; if c is set then set all '-' to spaces 
445e					; need to also take into account .>  
445e			 
445e 3e 01				ld a, 1 
4460 b9					cp c 
4461 20 65				jr nz, .nodashswap 
4463			 
4463					; DE has the string to write, working with HL 
4463			 
4463 06 ff				ld b, 255 
4465 d5					push de 
4466 e1					pop hl 
4467			 
4467			if DEBUG_FORTH_DOT 
4467				DMARK "DT-" 
4467 f5				push af  
4468 3a 7c 44			ld a, (.dmark)  
446b 32 9d fd			ld (debug_mark),a  
446e 3a 7d 44			ld a, (.dmark+1)  
4471 32 9e fd			ld (debug_mark+1),a  
4474 3a 7e 44			ld a, (.dmark+2)  
4477 32 9f fd			ld (debug_mark+2),a  
447a 18 03			jr .pastdmark  
447c ..			.dmark: db "DT-"  
447f f1			.pastdmark: pop af  
4480			endm  
# End of macro DMARK
4480				CALLMONITOR 
4480 cd aa fd			call debug_vector  
4483				endm  
# End of macro CALLMONITOR
4483			endif	 
4483 7e			.dashscan:	ld a, (hl) 
4484			;		cp 0 
4484 b7					or a 
4485 28 41				jr z, .nodashswap 
4487 fe 2d				cp '-' 
4489 20 02				jr nz, .dashskip 
448b			;		ld a, ' ' 
448b 36 20				ld (hl), ' ' 
448d 23			.dashskip:	inc hl 
448e			if DEBUG_FORTH_DOT 
448e				DMARK "D-2" 
448e f5				push af  
448f 3a a3 44			ld a, (.dmark)  
4492 32 9d fd			ld (debug_mark),a  
4495 3a a4 44			ld a, (.dmark+1)  
4498 32 9e fd			ld (debug_mark+1),a  
449b 3a a5 44			ld a, (.dmark+2)  
449e 32 9f fd			ld (debug_mark+2),a  
44a1 18 03			jr .pastdmark  
44a3 ..			.dmark: db "D-2"  
44a6 f1			.pastdmark: pop af  
44a7			endm  
# End of macro DMARK
44a7				CALLMONITOR 
44a7 cd aa fd			call debug_vector  
44aa				endm  
# End of macro CALLMONITOR
44aa			endif	 
44aa 10 d7				djnz .dashscan 
44ac			 
44ac			if DEBUG_FORTH_DOT 
44ac				DMARK "D-1" 
44ac f5				push af  
44ad 3a c1 44			ld a, (.dmark)  
44b0 32 9d fd			ld (debug_mark),a  
44b3 3a c2 44			ld a, (.dmark+1)  
44b6 32 9e fd			ld (debug_mark+1),a  
44b9 3a c3 44			ld a, (.dmark+2)  
44bc 32 9f fd			ld (debug_mark+2),a  
44bf 18 03			jr .pastdmark  
44c1 ..			.dmark: db "D-1"  
44c4 f1			.pastdmark: pop af  
44c5			endm  
# End of macro DMARK
44c5				CALLMONITOR 
44c5 cd aa fd			call debug_vector  
44c8				endm  
# End of macro CALLMONITOR
44c8			endif	 
44c8			 
44c8			.nodashswap: 
44c8			 
44c8			if DEBUG_FORTH_DOT 
44c8				DMARK "D-o" 
44c8 f5				push af  
44c9 3a dd 44			ld a, (.dmark)  
44cc 32 9d fd			ld (debug_mark),a  
44cf 3a de 44			ld a, (.dmark+1)  
44d2 32 9e fd			ld (debug_mark+1),a  
44d5 3a df 44			ld a, (.dmark+2)  
44d8 32 9f fd			ld (debug_mark+2),a  
44db 18 03			jr .pastdmark  
44dd ..			.dmark: db "D-o"  
44e0 f1			.pastdmark: pop af  
44e1			endm  
# End of macro DMARK
44e1				CALLMONITOR 
44e1 cd aa fd			call debug_vector  
44e4				endm  
# End of macro CALLMONITOR
44e4			endif	 
44e4			 
44e4 d5					push de   ; save string start in case we need to advance print 
44e5			 
44e5 3a 90 f9				ld a, (f_cursor_ptr) 
44e8 cd 8e 0d				call str_at_display 
44eb 3a 6e f9				ld a,(cli_autodisplay) 
44ee			;		cp 0 
44ee b7					or a 
44ef 28 03				jr z, .noupdate 
44f1 cd 9e 0d						call update_display 
44f4					.noupdate: 
44f4			 
44f4			 
44f4					; see if we need to advance the print position 
44f4			 
44f4 e1					pop hl   ; get back string 
44f5			;		ex de,hl 
44f5			 
44f5 3a 6f f9				ld a, (cli_mvdot) 
44f8			if DEBUG_FORTH_DOT 
44f8			;		ld e,a 
44f8				DMARK "D>1" 
44f8 f5				push af  
44f9 3a 0d 45			ld a, (.dmark)  
44fc 32 9d fd			ld (debug_mark),a  
44ff 3a 0e 45			ld a, (.dmark+1)  
4502 32 9e fd			ld (debug_mark+1),a  
4505 3a 0f 45			ld a, (.dmark+2)  
4508 32 9f fd			ld (debug_mark+2),a  
450b 18 03			jr .pastdmark  
450d ..			.dmark: db "D>1"  
4510 f1			.pastdmark: pop af  
4511			endm  
# End of macro DMARK
4511				CALLMONITOR 
4511 cd aa fd			call debug_vector  
4514				endm  
# End of macro CALLMONITOR
4514			endif	 
4514			;		cp 0 
4514 b7					or a 
4515 28 44				jr z, .noadv 
4517					; yes, lets advance the print position 
4517 3e 00				ld a, 0 
4519 cd 0f 13				call strlent 
451c			if DEBUG_FORTH_DOT 
451c				DMARK "D-?" 
451c f5				push af  
451d 3a 31 45			ld a, (.dmark)  
4520 32 9d fd			ld (debug_mark),a  
4523 3a 32 45			ld a, (.dmark+1)  
4526 32 9e fd			ld (debug_mark+1),a  
4529 3a 33 45			ld a, (.dmark+2)  
452c 32 9f fd			ld (debug_mark+2),a  
452f 18 03			jr .pastdmark  
4531 ..			.dmark: db "D-?"  
4534 f1			.pastdmark: pop af  
4535			endm  
# End of macro DMARK
4535				CALLMONITOR 
4535 cd aa fd			call debug_vector  
4538				endm  
# End of macro CALLMONITOR
4538			endif	 
4538 3a 90 f9				ld a, (f_cursor_ptr) 
453b 85					add a,l 
453c					;call addatohl 
453c					;ld a, l 
453c 32 90 f9				ld (f_cursor_ptr), a   ; save new pos 
453f			 
453f			if DEBUG_FORTH_DOT 
453f				DMARK "D->" 
453f f5				push af  
4540 3a 54 45			ld a, (.dmark)  
4543 32 9d fd			ld (debug_mark),a  
4546 3a 55 45			ld a, (.dmark+1)  
4549 32 9e fd			ld (debug_mark+1),a  
454c 3a 56 45			ld a, (.dmark+2)  
454f 32 9f fd			ld (debug_mark+2),a  
4552 18 03			jr .pastdmark  
4554 ..			.dmark: db "D->"  
4557 f1			.pastdmark: pop af  
4558			endm  
# End of macro DMARK
4558				CALLMONITOR 
4558 cd aa fd			call debug_vector  
455b				endm  
# End of macro CALLMONITOR
455b			endif	 
455b			 
455b			.noadv:	 
455b			 
455b					if DEBUG_FORTH_DOT_WAIT 
455b							call next_page_prompt 
455b					endif	 
455b			; TODO this pop off the stack causes a crash. i dont know why 
455b			 
455b			 
455b			if DEBUG_FORTH_DOT 
455b				DMARK "DTh" 
455b f5				push af  
455c 3a 70 45			ld a, (.dmark)  
455f 32 9d fd			ld (debug_mark),a  
4562 3a 71 45			ld a, (.dmark+1)  
4565 32 9e fd			ld (debug_mark+1),a  
4568 3a 72 45			ld a, (.dmark+2)  
456b 32 9f fd			ld (debug_mark+2),a  
456e 18 03			jr .pastdmark  
4570 ..			.dmark: db "DTh"  
4573 f1			.pastdmark: pop af  
4574			endm  
# End of macro DMARK
4574				CALLMONITOR 
4574 cd aa fd			call debug_vector  
4577				endm  
# End of macro CALLMONITOR
4577			endif	 
4577			 
4577					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4577 cd 24 22			call macro_forth_dsp_pop 
457a				endm 
# End of macro FORTH_DSP_POP
457a			 
457a			if DEBUG_FORTH_DOT 
457a				DMARK "DTi" 
457a f5				push af  
457b 3a 8f 45			ld a, (.dmark)  
457e 32 9d fd			ld (debug_mark),a  
4581 3a 90 45			ld a, (.dmark+1)  
4584 32 9e fd			ld (debug_mark+1),a  
4587 3a 91 45			ld a, (.dmark+2)  
458a 32 9f fd			ld (debug_mark+2),a  
458d 18 03			jr .pastdmark  
458f ..			.dmark: db "DTi"  
4592 f1			.pastdmark: pop af  
4593			endm  
# End of macro DMARK
4593				CALLMONITOR 
4593 cd aa fd			call debug_vector  
4596				endm  
# End of macro CALLMONITOR
4596			endif	 
4596			 
4596			 
4596					NEXTW 
4596 cd a7 fd			call parse_vector 
4599 c3 53 23			jp macro_next 
459c				endm 
# End of macro NEXTW
459c			 
459c			.CLS: 
459c				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
459c 35				db WORD_SYS_CORE+33             
459d cc 45			dw .DRAW            
459f 04				db 3 + 1 
45a0 .. 00			db "CLS",0              
45a4				endm 
# End of macro CWHEAD
45a4			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
45a4					if DEBUG_FORTH_WORDS_KEY 
45a4						DMARK "CLS" 
45a4 f5				push af  
45a5 3a b9 45			ld a, (.dmark)  
45a8 32 9d fd			ld (debug_mark),a  
45ab 3a ba 45			ld a, (.dmark+1)  
45ae 32 9e fd			ld (debug_mark+1),a  
45b1 3a bb 45			ld a, (.dmark+2)  
45b4 32 9f fd			ld (debug_mark+2),a  
45b7 18 03			jr .pastdmark  
45b9 ..			.dmark: db "CLS"  
45bc f1			.pastdmark: pop af  
45bd			endm  
# End of macro DMARK
45bd						CALLMONITOR 
45bd cd aa fd			call debug_vector  
45c0				endm  
# End of macro CALLMONITOR
45c0					endif 
45c0 cd 7c 0d				call clear_display 
45c3 c3 e6 46				jp .home		; and home cursor 
45c6					NEXTW 
45c6 cd a7 fd			call parse_vector 
45c9 c3 53 23			jp macro_next 
45cc				endm 
# End of macro NEXTW
45cc			 
45cc			.DRAW: 
45cc				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
45cc 36				db WORD_SYS_CORE+34             
45cd fa 45			dw .DUMP            
45cf 05				db 4 + 1 
45d0 .. 00			db "DRAW",0              
45d5				endm 
# End of macro CWHEAD
45d5			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
45d5					if DEBUG_FORTH_WORDS_KEY 
45d5						DMARK "DRW" 
45d5 f5				push af  
45d6 3a ea 45			ld a, (.dmark)  
45d9 32 9d fd			ld (debug_mark),a  
45dc 3a eb 45			ld a, (.dmark+1)  
45df 32 9e fd			ld (debug_mark+1),a  
45e2 3a ec 45			ld a, (.dmark+2)  
45e5 32 9f fd			ld (debug_mark+2),a  
45e8 18 03			jr .pastdmark  
45ea ..			.dmark: db "DRW"  
45ed f1			.pastdmark: pop af  
45ee			endm  
# End of macro DMARK
45ee						CALLMONITOR 
45ee cd aa fd			call debug_vector  
45f1				endm  
# End of macro CALLMONITOR
45f1					endif 
45f1 cd 9e 0d				call update_display 
45f4					NEXTW 
45f4 cd a7 fd			call parse_vector 
45f7 c3 53 23			jp macro_next 
45fa				endm 
# End of macro NEXTW
45fa			 
45fa			.DUMP: 
45fa				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
45fa 37				db WORD_SYS_CORE+35             
45fb 35 46			dw .CDUMP            
45fd 05				db 4 + 1 
45fe .. 00			db "DUMP",0              
4603				endm 
# End of macro CWHEAD
4603			; | DUMP ( x -- ) With address x display dump   | DONE 
4603			; TODO pop address to use off of the stack 
4603					if DEBUG_FORTH_WORDS_KEY 
4603						DMARK "DUM" 
4603 f5				push af  
4604 3a 18 46			ld a, (.dmark)  
4607 32 9d fd			ld (debug_mark),a  
460a 3a 19 46			ld a, (.dmark+1)  
460d 32 9e fd			ld (debug_mark+1),a  
4610 3a 1a 46			ld a, (.dmark+2)  
4613 32 9f fd			ld (debug_mark+2),a  
4616 18 03			jr .pastdmark  
4618 ..			.dmark: db "DUM"  
461b f1			.pastdmark: pop af  
461c			endm  
# End of macro DMARK
461c						CALLMONITOR 
461c cd aa fd			call debug_vector  
461f				endm  
# End of macro CALLMONITOR
461f					endif 
461f cd 7c 0d				call clear_display 
4622			 
4622					; get address 
4622			 
4622					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4622 cd 6c 21			call macro_dsp_valuehl 
4625				endm 
# End of macro FORTH_DSP_VALUEHL
4625				 
4625					; save it for cdump 
4625			 
4625 22 16 f4				ld (os_cur_ptr),hl 
4628			 
4628					; destroy value TOS 
4628			 
4628					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4628 cd 24 22			call macro_forth_dsp_pop 
462b				endm 
# End of macro FORTH_DSP_POP
462b			 
462b cd f4 1d				call dumpcont	; skip old style of param parsing	 
462e c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
462f					NEXTW 
462f cd a7 fd			call parse_vector 
4632 c3 53 23			jp macro_next 
4635				endm 
# End of macro NEXTW
4635			.CDUMP: 
4635				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
4635 38				db WORD_SYS_CORE+36             
4636 68 46			dw .DAT            
4638 06				db 5 + 1 
4639 .. 00			db "CDUMP",0              
463f				endm 
# End of macro CWHEAD
463f			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
463f					if DEBUG_FORTH_WORDS_KEY 
463f						DMARK "CDP" 
463f f5				push af  
4640 3a 54 46			ld a, (.dmark)  
4643 32 9d fd			ld (debug_mark),a  
4646 3a 55 46			ld a, (.dmark+1)  
4649 32 9e fd			ld (debug_mark+1),a  
464c 3a 56 46			ld a, (.dmark+2)  
464f 32 9f fd			ld (debug_mark+2),a  
4652 18 03			jr .pastdmark  
4654 ..			.dmark: db "CDP"  
4657 f1			.pastdmark: pop af  
4658			endm  
# End of macro DMARK
4658						CALLMONITOR 
4658 cd aa fd			call debug_vector  
465b				endm  
# End of macro CALLMONITOR
465b					endif 
465b cd 7c 0d				call clear_display 
465e cd f4 1d				call dumpcont	 
4661 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
4662					NEXTW 
4662 cd a7 fd			call parse_vector 
4665 c3 53 23			jp macro_next 
4668				endm 
# End of macro NEXTW
4668			 
4668			 
4668			 
4668			 
4668			.DAT: 
4668				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
4668 3d				db WORD_SYS_CORE+41             
4669 c1 46			dw .HOME            
466b 03				db 2 + 1 
466c .. 00			db "AT",0              
466f				endm 
# End of macro CWHEAD
466f			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
466f					if DEBUG_FORTH_WORDS_KEY 
466f						DMARK "AT." 
466f f5				push af  
4670 3a 84 46			ld a, (.dmark)  
4673 32 9d fd			ld (debug_mark),a  
4676 3a 85 46			ld a, (.dmark+1)  
4679 32 9e fd			ld (debug_mark+1),a  
467c 3a 86 46			ld a, (.dmark+2)  
467f 32 9f fd			ld (debug_mark+2),a  
4682 18 03			jr .pastdmark  
4684 ..			.dmark: db "AT."  
4687 f1			.pastdmark: pop af  
4688			endm  
# End of macro DMARK
4688						CALLMONITOR 
4688 cd aa fd			call debug_vector  
468b				endm  
# End of macro CALLMONITOR
468b					endif 
468b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
468b cd 6c 21			call macro_dsp_valuehl 
468e				endm 
# End of macro FORTH_DSP_VALUEHL
468e			 
468e			 
468e					; TODO save cursor row 
468e 7d					ld a,l 
468f fe 02				cp 2 
4691 20 04				jr nz, .crow3 
4693 3e 28				ld a, display_row_2 
4695 18 12				jr .ccol1 
4697 fe 03		.crow3:		cp 3 
4699 20 04				jr nz, .crow4 
469b 3e 50				ld a, display_row_3 
469d 18 0a				jr .ccol1 
469f fe 04		.crow4:		cp 4 
46a1 20 04				jr nz, .crow1 
46a3 3e 78				ld a, display_row_4 
46a5 18 02				jr .ccol1 
46a7 3e 00		.crow1:		ld a,display_row_1 
46a9 f5			.ccol1:		push af			; got row offset 
46aa 6f					ld l,a 
46ab 26 00				ld h,0 
46ad					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
46ad cd 24 22			call macro_forth_dsp_pop 
46b0				endm 
# End of macro FORTH_DSP_POP
46b0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
46b0 cd 6c 21			call macro_dsp_valuehl 
46b3				endm 
# End of macro FORTH_DSP_VALUEHL
46b3					; TODO save cursor col 
46b3 f1					pop af 
46b4 85					add l		; add col offset 
46b5 32 90 f9				ld (f_cursor_ptr), a 
46b8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
46b8 cd 24 22			call macro_forth_dsp_pop 
46bb				endm 
# End of macro FORTH_DSP_POP
46bb			 
46bb					; calculate  
46bb			 
46bb					NEXTW 
46bb cd a7 fd			call parse_vector 
46be c3 53 23			jp macro_next 
46c1				endm 
# End of macro NEXTW
46c1			 
46c1			 
46c1			.HOME: 
46c1				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
46c1 41				db WORD_SYS_CORE+45             
46c2 f1 46			dw .CR            
46c4 05				db 4 + 1 
46c5 .. 00			db "HOME",0              
46ca				endm 
# End of macro CWHEAD
46ca			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
46ca					if DEBUG_FORTH_WORDS_KEY 
46ca						DMARK "HOM" 
46ca f5				push af  
46cb 3a df 46			ld a, (.dmark)  
46ce 32 9d fd			ld (debug_mark),a  
46d1 3a e0 46			ld a, (.dmark+1)  
46d4 32 9e fd			ld (debug_mark+1),a  
46d7 3a e1 46			ld a, (.dmark+2)  
46da 32 9f fd			ld (debug_mark+2),a  
46dd 18 03			jr .pastdmark  
46df ..			.dmark: db "HOM"  
46e2 f1			.pastdmark: pop af  
46e3			endm  
# End of macro DMARK
46e3						CALLMONITOR 
46e3 cd aa fd			call debug_vector  
46e6				endm  
# End of macro CALLMONITOR
46e6					endif 
46e6 3e 00		.home:		ld a, 0		; and home cursor 
46e8 32 90 f9				ld (f_cursor_ptr), a 
46eb					NEXTW 
46eb cd a7 fd			call parse_vector 
46ee c3 53 23			jp macro_next 
46f1				endm 
# End of macro NEXTW
46f1			 
46f1			 
46f1			.CR: 
46f1				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
46f1 46				db WORD_SYS_CORE+50             
46f2 2f 47			dw .SPACE            
46f4 03				db 2 + 1 
46f5 .. 00			db "CR",0              
46f8				endm 
# End of macro CWHEAD
46f8			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
46f8					if DEBUG_FORTH_WORDS_KEY 
46f8						DMARK "CR." 
46f8 f5				push af  
46f9 3a 0d 47			ld a, (.dmark)  
46fc 32 9d fd			ld (debug_mark),a  
46ff 3a 0e 47			ld a, (.dmark+1)  
4702 32 9e fd			ld (debug_mark+1),a  
4705 3a 0f 47			ld a, (.dmark+2)  
4708 32 9f fd			ld (debug_mark+2),a  
470b 18 03			jr .pastdmark  
470d ..			.dmark: db "CR."  
4710 f1			.pastdmark: pop af  
4711			endm  
# End of macro DMARK
4711						CALLMONITOR 
4711 cd aa fd			call debug_vector  
4714				endm  
# End of macro CALLMONITOR
4714					endif 
4714 3e 0d				ld a, 13 
4716 32 f3 f0				ld (scratch),a 
4719 3e 0a				ld a, 10 
471b 32 f4 f0				ld (scratch+1),a 
471e 3e 00				ld a, 0 
4720 32 f5 f0				ld (scratch+2),a 
4723 21 f3 f0				ld hl, scratch 
4726 cd da 1f				call forth_push_str 
4729					 
4729				       NEXTW 
4729 cd a7 fd			call parse_vector 
472c c3 53 23			jp macro_next 
472f				endm 
# End of macro NEXTW
472f			.SPACE: 
472f				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
472f 46				db WORD_SYS_CORE+50             
4730 68 47			dw .SPACES            
4732 03				db 2 + 1 
4733 .. 00			db "BL",0              
4736				endm 
# End of macro CWHEAD
4736			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
4736					if DEBUG_FORTH_WORDS_KEY 
4736						DMARK "BL." 
4736 f5				push af  
4737 3a 4b 47			ld a, (.dmark)  
473a 32 9d fd			ld (debug_mark),a  
473d 3a 4c 47			ld a, (.dmark+1)  
4740 32 9e fd			ld (debug_mark+1),a  
4743 3a 4d 47			ld a, (.dmark+2)  
4746 32 9f fd			ld (debug_mark+2),a  
4749 18 03			jr .pastdmark  
474b ..			.dmark: db "BL."  
474e f1			.pastdmark: pop af  
474f			endm  
# End of macro DMARK
474f						CALLMONITOR 
474f cd aa fd			call debug_vector  
4752				endm  
# End of macro CALLMONITOR
4752					endif 
4752 3e 20				ld a, " " 
4754 32 f3 f0				ld (scratch),a 
4757 3e 00				ld a, 0 
4759 32 f4 f0				ld (scratch+1),a 
475c 21 f3 f0				ld hl, scratch 
475f cd da 1f				call forth_push_str 
4762					 
4762				       NEXTW 
4762 cd a7 fd			call parse_vector 
4765 c3 53 23			jp macro_next 
4768				endm 
# End of macro NEXTW
4768			 
4768			;.blstr: db " ", 0 
4768			 
4768			.SPACES: 
4768				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
4768 47				db WORD_SYS_CORE+51             
4769 04 48			dw .SCROLL            
476b 07				db 6 + 1 
476c .. 00			db "SPACES",0              
4773				endm 
# End of macro CWHEAD
4773			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
4773					if DEBUG_FORTH_WORDS_KEY 
4773						DMARK "SPS" 
4773 f5				push af  
4774 3a 88 47			ld a, (.dmark)  
4777 32 9d fd			ld (debug_mark),a  
477a 3a 89 47			ld a, (.dmark+1)  
477d 32 9e fd			ld (debug_mark+1),a  
4780 3a 8a 47			ld a, (.dmark+2)  
4783 32 9f fd			ld (debug_mark+2),a  
4786 18 03			jr .pastdmark  
4788 ..			.dmark: db "SPS"  
478b f1			.pastdmark: pop af  
478c			endm  
# End of macro DMARK
478c						CALLMONITOR 
478c cd aa fd			call debug_vector  
478f				endm  
# End of macro CALLMONITOR
478f					endif 
478f			 
478f			 
478f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
478f cd 6c 21			call macro_dsp_valuehl 
4792				endm 
# End of macro FORTH_DSP_VALUEHL
4792			 
4792 e5					push hl    ; u 
4793					if DEBUG_FORTH_WORDS 
4793						DMARK "SPA" 
4793 f5				push af  
4794 3a a8 47			ld a, (.dmark)  
4797 32 9d fd			ld (debug_mark),a  
479a 3a a9 47			ld a, (.dmark+1)  
479d 32 9e fd			ld (debug_mark+1),a  
47a0 3a aa 47			ld a, (.dmark+2)  
47a3 32 9f fd			ld (debug_mark+2),a  
47a6 18 03			jr .pastdmark  
47a8 ..			.dmark: db "SPA"  
47ab f1			.pastdmark: pop af  
47ac			endm  
# End of macro DMARK
47ac						CALLMONITOR 
47ac cd aa fd			call debug_vector  
47af				endm  
# End of macro CALLMONITOR
47af					endif 
47af			 
47af					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
47af cd 24 22			call macro_forth_dsp_pop 
47b2				endm 
# End of macro FORTH_DSP_POP
47b2 e1					pop hl 
47b3 0e 00				ld c, 0 
47b5 45					ld b, l 
47b6 21 f3 f0				ld hl, scratch  
47b9			 
47b9					if DEBUG_FORTH_WORDS 
47b9						DMARK "SP2" 
47b9 f5				push af  
47ba 3a ce 47			ld a, (.dmark)  
47bd 32 9d fd			ld (debug_mark),a  
47c0 3a cf 47			ld a, (.dmark+1)  
47c3 32 9e fd			ld (debug_mark+1),a  
47c6 3a d0 47			ld a, (.dmark+2)  
47c9 32 9f fd			ld (debug_mark+2),a  
47cc 18 03			jr .pastdmark  
47ce ..			.dmark: db "SP2"  
47d1 f1			.pastdmark: pop af  
47d2			endm  
# End of macro DMARK
47d2						CALLMONITOR 
47d2 cd aa fd			call debug_vector  
47d5				endm  
# End of macro CALLMONITOR
47d5					endif 
47d5			;		ld a, ' ' 
47d5			.spaces1:	 
47d5 36 20				ld (hl),' ' 
47d7 23					inc hl 
47d8					 
47d8 10 fb				djnz .spaces1 
47da			;		ld a,0 
47da 36 00				ld (hl),0 
47dc 21 f3 f0				ld hl, scratch 
47df					if DEBUG_FORTH_WORDS 
47df						DMARK "SP3" 
47df f5				push af  
47e0 3a f4 47			ld a, (.dmark)  
47e3 32 9d fd			ld (debug_mark),a  
47e6 3a f5 47			ld a, (.dmark+1)  
47e9 32 9e fd			ld (debug_mark+1),a  
47ec 3a f6 47			ld a, (.dmark+2)  
47ef 32 9f fd			ld (debug_mark+2),a  
47f2 18 03			jr .pastdmark  
47f4 ..			.dmark: db "SP3"  
47f7 f1			.pastdmark: pop af  
47f8			endm  
# End of macro DMARK
47f8						CALLMONITOR 
47f8 cd aa fd			call debug_vector  
47fb				endm  
# End of macro CALLMONITOR
47fb					endif 
47fb cd da 1f				call forth_push_str 
47fe			 
47fe				       NEXTW 
47fe cd a7 fd			call parse_vector 
4801 c3 53 23			jp macro_next 
4804				endm 
# End of macro NEXTW
4804			 
4804			 
4804			 
4804			.SCROLL: 
4804				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4804 53				db WORD_SYS_CORE+63             
4805 34 48			dw .SCROLLD            
4807 07				db 6 + 1 
4808 .. 00			db "SCROLL",0              
480f				endm 
# End of macro CWHEAD
480f			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
480f					if DEBUG_FORTH_WORDS_KEY 
480f						DMARK "SCR" 
480f f5				push af  
4810 3a 24 48			ld a, (.dmark)  
4813 32 9d fd			ld (debug_mark),a  
4816 3a 25 48			ld a, (.dmark+1)  
4819 32 9e fd			ld (debug_mark+1),a  
481c 3a 26 48			ld a, (.dmark+2)  
481f 32 9f fd			ld (debug_mark+2),a  
4822 18 03			jr .pastdmark  
4824 ..			.dmark: db "SCR"  
4827 f1			.pastdmark: pop af  
4828			endm  
# End of macro DMARK
4828						CALLMONITOR 
4828 cd aa fd			call debug_vector  
482b				endm  
# End of macro CALLMONITOR
482b					endif 
482b			 
482b cd 3f 0d			call scroll_up 
482e			;	call update_display 
482e			 
482e					NEXTW 
482e cd a7 fd			call parse_vector 
4831 c3 53 23			jp macro_next 
4834				endm 
# End of macro NEXTW
4834			 
4834			 
4834			 
4834			;		; get dir 
4834			; 
4834			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4834			; 
4834			;		push hl 
4834			; 
4834			;		; destroy value TOS 
4834			; 
4834			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4834			; 
4834			;		; get count 
4834			; 
4834			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4834			; 
4834			;		push hl 
4834			; 
4834			;		; destroy value TOS 
4834			; 
4834			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4834			; 
4834			;		; one value on hl get other one back 
4834			; 
4834			;		pop bc    ; count 
4834			; 
4834			;		pop de   ; dir 
4834			; 
4834			; 
4834			;		ld b, c 
4834			; 
4834			;.scrolldir:     push bc 
4834			;		push de 
4834			; 
4834			;		ld a, 0 
4834			;		cp e 
4834			;		jr z, .scrollup  
4834			;		call scroll_down 
4834			;		jr .scrollnext 
4834			;.scrollup:	call scroll_up 
4834			; 
4834			;		 
4834			;.scrollnext: 
4834			;		pop de 
4834			;		pop bc 
4834			;		djnz .scrolldir 
4834			; 
4834			; 
4834			; 
4834			; 
4834			; 
4834			;		NEXTW 
4834			 
4834			.SCROLLD: 
4834				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4834 53				db WORD_SYS_CORE+63             
4835 65 48			dw .ATQ            
4837 08				db 7 + 1 
4838 .. 00			db "SCROLLD",0              
4840				endm 
# End of macro CWHEAD
4840			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
4840					if DEBUG_FORTH_WORDS_KEY 
4840						DMARK "SCD" 
4840 f5				push af  
4841 3a 55 48			ld a, (.dmark)  
4844 32 9d fd			ld (debug_mark),a  
4847 3a 56 48			ld a, (.dmark+1)  
484a 32 9e fd			ld (debug_mark+1),a  
484d 3a 57 48			ld a, (.dmark+2)  
4850 32 9f fd			ld (debug_mark+2),a  
4853 18 03			jr .pastdmark  
4855 ..			.dmark: db "SCD"  
4858 f1			.pastdmark: pop af  
4859			endm  
# End of macro DMARK
4859						CALLMONITOR 
4859 cd aa fd			call debug_vector  
485c				endm  
# End of macro CALLMONITOR
485c					endif 
485c			 
485c cd 62 0d			call scroll_down 
485f			;	call update_display 
485f			 
485f					NEXTW 
485f cd a7 fd			call parse_vector 
4862 c3 53 23			jp macro_next 
4865				endm 
# End of macro NEXTW
4865			 
4865			 
4865			.ATQ: 
4865				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4865 62				db WORD_SYS_CORE+78             
4866 c6 48			dw .AUTODSP            
4868 04				db 3 + 1 
4869 .. 00			db "AT@",0              
486d				endm 
# End of macro CWHEAD
486d			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
486d					if DEBUG_FORTH_WORDS_KEY 
486d						DMARK "ATA" 
486d f5				push af  
486e 3a 82 48			ld a, (.dmark)  
4871 32 9d fd			ld (debug_mark),a  
4874 3a 83 48			ld a, (.dmark+1)  
4877 32 9e fd			ld (debug_mark+1),a  
487a 3a 84 48			ld a, (.dmark+2)  
487d 32 9f fd			ld (debug_mark+2),a  
4880 18 03			jr .pastdmark  
4882 ..			.dmark: db "ATA"  
4885 f1			.pastdmark: pop af  
4886			endm  
# End of macro DMARK
4886						CALLMONITOR 
4886 cd aa fd			call debug_vector  
4889				endm  
# End of macro CALLMONITOR
4889					endif 
4889			 
4889			 
4889					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4889 cd 6c 21			call macro_dsp_valuehl 
488c				endm 
# End of macro FORTH_DSP_VALUEHL
488c			 
488c					; TODO save cursor row 
488c 7d					ld a,l 
488d fe 02				cp 2 
488f 20 04				jr nz, .crow3aq 
4891 3e 28				ld a, display_row_2 
4893 18 12				jr .ccol1aq 
4895 fe 03		.crow3aq:		cp 3 
4897 20 04				jr nz, .crow4aq 
4899 3e 50				ld a, display_row_3 
489b 18 0a				jr .ccol1aq 
489d fe 04		.crow4aq:		cp 4 
489f 20 04				jr nz, .crow1aq 
48a1 3e 78				ld a, display_row_4 
48a3 18 02				jr .ccol1aq 
48a5 3e 00		.crow1aq:		ld a,display_row_1 
48a7 f5			.ccol1aq:		push af			; got row offset 
48a8 6f					ld l,a 
48a9 26 00				ld h,0 
48ab					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
48ab cd 24 22			call macro_forth_dsp_pop 
48ae				endm 
# End of macro FORTH_DSP_POP
48ae					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
48ae cd 6c 21			call macro_dsp_valuehl 
48b1				endm 
# End of macro FORTH_DSP_VALUEHL
48b1					; TODO save cursor col 
48b1 f1					pop af 
48b2 85					add l		; add col offset 
48b3			 
48b3					; add current frame buffer address 
48b3 2a fe fa				ld hl, (display_fb_active) 
48b6 cd ac 0f				call addatohl 
48b9			 
48b9			 
48b9			 
48b9			 
48b9					; get char frame buffer location offset in hl 
48b9			 
48b9 7e					ld a,(hl) 
48ba 26 00				ld h, 0 
48bc 6f					ld l, a 
48bd			 
48bd cd 70 1f				call forth_push_numhl 
48c0			 
48c0			 
48c0					NEXTW 
48c0 cd a7 fd			call parse_vector 
48c3 c3 53 23			jp macro_next 
48c6				endm 
# End of macro NEXTW
48c6			 
48c6			.AUTODSP: 
48c6				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
48c6 63				db WORD_SYS_CORE+79             
48c7 df 48			dw .MENU            
48c9 05				db 4 + 1 
48ca .. 00			db "ADSP",0              
48cf				endm 
# End of macro CWHEAD
48cf			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
48cf			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
48cf			 
48cf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
48cf cd 6c 21			call macro_dsp_valuehl 
48d2				endm 
# End of macro FORTH_DSP_VALUEHL
48d2			 
48d2			;		push hl 
48d2			 
48d2					; destroy value TOS 
48d2			 
48d2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
48d2 cd 24 22			call macro_forth_dsp_pop 
48d5				endm 
# End of macro FORTH_DSP_POP
48d5			 
48d5			;		pop hl 
48d5			 
48d5 7d					ld a,l 
48d6 32 6e f9				ld (cli_autodisplay), a 
48d9				       NEXTW 
48d9 cd a7 fd			call parse_vector 
48dc c3 53 23			jp macro_next 
48df				endm 
# End of macro NEXTW
48df			 
48df			.MENU: 
48df				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
48df 70				db WORD_SYS_CORE+92             
48e0 8b 49			dw .ENDDISPLAY            
48e2 05				db 4 + 1 
48e3 .. 00			db "MENU",0              
48e8				endm 
# End of macro CWHEAD
48e8			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
48e8			 
48e8			;		; get number of items on the stack 
48e8			; 
48e8				 
48e8					FORTH_DSP_VALUEHL 
48e8 cd 6c 21			call macro_dsp_valuehl 
48eb				endm 
# End of macro FORTH_DSP_VALUEHL
48eb				 
48eb					if DEBUG_FORTH_WORDS_KEY 
48eb						DMARK "MNU" 
48eb f5				push af  
48ec 3a 00 49			ld a, (.dmark)  
48ef 32 9d fd			ld (debug_mark),a  
48f2 3a 01 49			ld a, (.dmark+1)  
48f5 32 9e fd			ld (debug_mark+1),a  
48f8 3a 02 49			ld a, (.dmark+2)  
48fb 32 9f fd			ld (debug_mark+2),a  
48fe 18 03			jr .pastdmark  
4900 ..			.dmark: db "MNU"  
4903 f1			.pastdmark: pop af  
4904			endm  
# End of macro DMARK
4904						CALLMONITOR 
4904 cd aa fd			call debug_vector  
4907				endm  
# End of macro CALLMONITOR
4907					endif 
4907			 
4907 45					ld b, l	 
4908 05					dec b 
4909			 
4909					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4909 cd 24 22			call macro_forth_dsp_pop 
490c				endm 
# End of macro FORTH_DSP_POP
490c			 
490c			 
490c					; go directly through the stack to pluck out the string pointers and build an array 
490c			 
490c			;		FORTH_DSP 
490c			 
490c					; hl contains top most stack item 
490c				 
490c 11 f3 f0				ld de, scratch 
490f			 
490f			.mbuild: 
490f			 
490f					FORTH_DSP_VALUEHL 
490f cd 6c 21			call macro_dsp_valuehl 
4912				endm 
# End of macro FORTH_DSP_VALUEHL
4912			 
4912					if DEBUG_FORTH_WORDS 
4912						DMARK "MN3" 
4912 f5				push af  
4913 3a 27 49			ld a, (.dmark)  
4916 32 9d fd			ld (debug_mark),a  
4919 3a 28 49			ld a, (.dmark+1)  
491c 32 9e fd			ld (debug_mark+1),a  
491f 3a 29 49			ld a, (.dmark+2)  
4922 32 9f fd			ld (debug_mark+2),a  
4925 18 03			jr .pastdmark  
4927 ..			.dmark: db "MN3"  
492a f1			.pastdmark: pop af  
492b			endm  
# End of macro DMARK
492b						CALLMONITOR 
492b cd aa fd			call debug_vector  
492e				endm  
# End of macro CALLMONITOR
492e					endif 
492e eb					ex de, hl 
492f 73					ld (hl), e 
4930 23					inc hl 
4931 72					ld (hl), d 
4932 23					inc hl 
4933 eb					ex de, hl 
4934			 
4934					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4934 cd 24 22			call macro_forth_dsp_pop 
4937				endm 
# End of macro FORTH_DSP_POP
4937			 
4937 10 d6				djnz .mbuild 
4939			 
4939					; done add term 
4939			 
4939 eb					ex de, hl 
493a 36 00				ld (hl), 0 
493c 23					inc hl 
493d 36 00				ld (hl), 0 
493f			 
493f				 
493f					 
493f 21 f3 f0				ld hl, scratch 
4942			 
4942					if DEBUG_FORTH_WORDS 
4942						DMARK "MNx" 
4942 f5				push af  
4943 3a 57 49			ld a, (.dmark)  
4946 32 9d fd			ld (debug_mark),a  
4949 3a 58 49			ld a, (.dmark+1)  
494c 32 9e fd			ld (debug_mark+1),a  
494f 3a 59 49			ld a, (.dmark+2)  
4952 32 9f fd			ld (debug_mark+2),a  
4955 18 03			jr .pastdmark  
4957 ..			.dmark: db "MNx"  
495a f1			.pastdmark: pop af  
495b			endm  
# End of macro DMARK
495b						CALLMONITOR 
495b cd aa fd			call debug_vector  
495e				endm  
# End of macro CALLMONITOR
495e					endif 
495e			 
495e			 
495e			 
495e 3e 00				ld a, 0 
4960 cd ac 0d				call menu 
4963			 
4963			 
4963 6f					ld l, a 
4964 26 00				ld h, 0 
4966			 
4966					if DEBUG_FORTH_WORDS 
4966						DMARK "MNr" 
4966 f5				push af  
4967 3a 7b 49			ld a, (.dmark)  
496a 32 9d fd			ld (debug_mark),a  
496d 3a 7c 49			ld a, (.dmark+1)  
4970 32 9e fd			ld (debug_mark+1),a  
4973 3a 7d 49			ld a, (.dmark+2)  
4976 32 9f fd			ld (debug_mark+2),a  
4979 18 03			jr .pastdmark  
497b ..			.dmark: db "MNr"  
497e f1			.pastdmark: pop af  
497f			endm  
# End of macro DMARK
497f						CALLMONITOR 
497f cd aa fd			call debug_vector  
4982				endm  
# End of macro CALLMONITOR
4982					endif 
4982			 
4982 cd 70 1f				call forth_push_numhl 
4985			 
4985			 
4985			 
4985			 
4985				       NEXTW 
4985 cd a7 fd			call parse_vector 
4988 c3 53 23			jp macro_next 
498b				endm 
# End of macro NEXTW
498b			 
498b			 
498b			.ENDDISPLAY: 
498b			 
498b			; eof 
# End of file forth_words_display.asm
498b			include "forth_words_str.asm" 
498b			 
498b			; | ## String Words 
498b			 
498b			.SPLIT:   
498b			 
498b				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
498b 48				db WORD_SYS_CORE+52             
498c 82 4a			dw .PTR            
498e 06				db 5 + 1 
498f .. 00			db "SPLIT",0              
4995				endm 
# End of macro CWHEAD
4995			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
4995					if DEBUG_FORTH_WORDS_KEY 
4995						DMARK "SPT" 
4995 f5				push af  
4996 3a aa 49			ld a, (.dmark)  
4999 32 9d fd			ld (debug_mark),a  
499c 3a ab 49			ld a, (.dmark+1)  
499f 32 9e fd			ld (debug_mark+1),a  
49a2 3a ac 49			ld a, (.dmark+2)  
49a5 32 9f fd			ld (debug_mark+2),a  
49a8 18 03			jr .pastdmark  
49aa ..			.dmark: db "SPT"  
49ad f1			.pastdmark: pop af  
49ae			endm  
# End of macro DMARK
49ae						CALLMONITOR 
49ae cd aa fd			call debug_vector  
49b1				endm  
# End of macro CALLMONITOR
49b1					endif 
49b1			 
49b1					; get delim 
49b1					FORTH_DSP_VALUEHL 
49b1 cd 6c 21			call macro_dsp_valuehl 
49b4				endm 
# End of macro FORTH_DSP_VALUEHL
49b4			 
49b4					FORTH_DSP_POP 
49b4 cd 24 22			call macro_forth_dsp_pop 
49b7				endm 
# End of macro FORTH_DSP_POP
49b7					 
49b7			 
49b7 45					ld b, l    ; move delim to b 
49b8 0e 01				ld c, 1   ; count of poritions 
49ba			 
49ba c5					push bc 
49bb			 
49bb					if DEBUG_FORTH_WORDS 
49bb						DMARK "SPa" 
49bb f5				push af  
49bc 3a d0 49			ld a, (.dmark)  
49bf 32 9d fd			ld (debug_mark),a  
49c2 3a d1 49			ld a, (.dmark+1)  
49c5 32 9e fd			ld (debug_mark+1),a  
49c8 3a d2 49			ld a, (.dmark+2)  
49cb 32 9f fd			ld (debug_mark+2),a  
49ce 18 03			jr .pastdmark  
49d0 ..			.dmark: db "SPa"  
49d3 f1			.pastdmark: pop af  
49d4			endm  
# End of macro DMARK
49d4						CALLMONITOR 
49d4 cd aa fd			call debug_vector  
49d7				endm  
# End of macro CALLMONITOR
49d7					endif 
49d7					; get pointer to string to chop up 
49d7					FORTH_DSP_VALUEHL 
49d7 cd 6c 21			call macro_dsp_valuehl 
49da				endm 
# End of macro FORTH_DSP_VALUEHL
49da			 
49da			;		push hl 
49da 11 f3 f0				ld de, scratch 
49dd			.spllop: 
49dd c1					pop bc 
49de c5					push bc 
49df			;		pop hl 
49df					if DEBUG_FORTH_WORDS 
49df						DMARK "SPl" 
49df f5				push af  
49e0 3a f4 49			ld a, (.dmark)  
49e3 32 9d fd			ld (debug_mark),a  
49e6 3a f5 49			ld a, (.dmark+1)  
49e9 32 9e fd			ld (debug_mark+1),a  
49ec 3a f6 49			ld a, (.dmark+2)  
49ef 32 9f fd			ld (debug_mark+2),a  
49f2 18 03			jr .pastdmark  
49f4 ..			.dmark: db "SPl"  
49f7 f1			.pastdmark: pop af  
49f8			endm  
# End of macro DMARK
49f8						CALLMONITOR 
49f8 cd aa fd			call debug_vector  
49fb				endm  
# End of macro CALLMONITOR
49fb					endif 
49fb 7e					ld a, (hl) 
49fc b8					cp b 
49fd 28 07				jr z, .splnxt 
49ff			;		cp 0 
49ff b7					or a 
4a00 28 34				jr z, .splend 
4a02 ed a0				ldi 
4a04 18 d7				jr .spllop 
4a06			 
4a06					; hit dlim 
4a06			 
4a06			.splnxt: 
4a06					if DEBUG_FORTH_WORDS 
4a06						DMARK "SPx" 
4a06 f5				push af  
4a07 3a 1b 4a			ld a, (.dmark)  
4a0a 32 9d fd			ld (debug_mark),a  
4a0d 3a 1c 4a			ld a, (.dmark+1)  
4a10 32 9e fd			ld (debug_mark+1),a  
4a13 3a 1d 4a			ld a, (.dmark+2)  
4a16 32 9f fd			ld (debug_mark+2),a  
4a19 18 03			jr .pastdmark  
4a1b ..			.dmark: db "SPx"  
4a1e f1			.pastdmark: pop af  
4a1f			endm  
# End of macro DMARK
4a1f						CALLMONITOR 
4a1f cd aa fd			call debug_vector  
4a22				endm  
# End of macro CALLMONITOR
4a22					endif 
4a22 3e 00				ld a, 0 
4a24 12					ld (de), a 
4a25					;ex de, hl 
4a25 e5					push hl 
4a26 21 f3 f0				ld hl, scratch 
4a29 cd da 1f				call forth_push_str 
4a2c e1					pop hl 
4a2d					;ex de, hl 
4a2d 23					inc hl 
4a2e c1					pop bc 
4a2f 0c					inc c 
4a30 c5					push bc 
4a31 11 f3 f0				ld de, scratch 
4a34 18 a7				jr .spllop 
4a36			 
4a36			.splend:		 
4a36					if DEBUG_FORTH_WORDS 
4a36						DMARK "SPe" 
4a36 f5				push af  
4a37 3a 4b 4a			ld a, (.dmark)  
4a3a 32 9d fd			ld (debug_mark),a  
4a3d 3a 4c 4a			ld a, (.dmark+1)  
4a40 32 9e fd			ld (debug_mark+1),a  
4a43 3a 4d 4a			ld a, (.dmark+2)  
4a46 32 9f fd			ld (debug_mark+2),a  
4a49 18 03			jr .pastdmark  
4a4b ..			.dmark: db "SPe"  
4a4e f1			.pastdmark: pop af  
4a4f			endm  
# End of macro DMARK
4a4f						CALLMONITOR 
4a4f cd aa fd			call debug_vector  
4a52				endm  
# End of macro CALLMONITOR
4a52					endif 
4a52 12					ld (de), a 
4a53 eb					ex de, hl 
4a54			;		push hl 
4a54 21 f3 f0				ld hl, scratch 
4a57 cd da 1f				call forth_push_str 
4a5a					 
4a5a					if DEBUG_FORTH_WORDS 
4a5a						DMARK "SPc" 
4a5a f5				push af  
4a5b 3a 6f 4a			ld a, (.dmark)  
4a5e 32 9d fd			ld (debug_mark),a  
4a61 3a 70 4a			ld a, (.dmark+1)  
4a64 32 9e fd			ld (debug_mark+1),a  
4a67 3a 71 4a			ld a, (.dmark+2)  
4a6a 32 9f fd			ld (debug_mark+2),a  
4a6d 18 03			jr .pastdmark  
4a6f ..			.dmark: db "SPc"  
4a72 f1			.pastdmark: pop af  
4a73			endm  
# End of macro DMARK
4a73						CALLMONITOR 
4a73 cd aa fd			call debug_vector  
4a76				endm  
# End of macro CALLMONITOR
4a76					endif 
4a76			 
4a76 e1					pop hl    ; get counter from bc which has been push 
4a77 26 00				ld h, 0 
4a79			;		ld l, c 
4a79 cd 70 1f				call forth_push_numhl 
4a7c			 
4a7c			 
4a7c				NEXTW 
4a7c cd a7 fd			call parse_vector 
4a7f c3 53 23			jp macro_next 
4a82				endm 
# End of macro NEXTW
4a82			.PTR:   
4a82			 
4a82				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
4a82 48				db WORD_SYS_CORE+52             
4a83 b2 4a			dw .STYPE            
4a85 04				db 3 + 1 
4a86 .. 00			db "PTR",0              
4a8a				endm 
# End of macro CWHEAD
4a8a			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4a8a			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4a8a			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4a8a			 
4a8a					if DEBUG_FORTH_WORDS_KEY 
4a8a						DMARK "PTR" 
4a8a f5				push af  
4a8b 3a 9f 4a			ld a, (.dmark)  
4a8e 32 9d fd			ld (debug_mark),a  
4a91 3a a0 4a			ld a, (.dmark+1)  
4a94 32 9e fd			ld (debug_mark+1),a  
4a97 3a a1 4a			ld a, (.dmark+2)  
4a9a 32 9f fd			ld (debug_mark+2),a  
4a9d 18 03			jr .pastdmark  
4a9f ..			.dmark: db "PTR"  
4aa2 f1			.pastdmark: pop af  
4aa3			endm  
# End of macro DMARK
4aa3						CALLMONITOR 
4aa3 cd aa fd			call debug_vector  
4aa6				endm  
# End of macro CALLMONITOR
4aa6					endif 
4aa6					FORTH_DSP_VALUEHL 
4aa6 cd 6c 21			call macro_dsp_valuehl 
4aa9				endm 
# End of macro FORTH_DSP_VALUEHL
4aa9 cd 70 1f				call forth_push_numhl 
4aac			 
4aac			 
4aac					NEXTW 
4aac cd a7 fd			call parse_vector 
4aaf c3 53 23			jp macro_next 
4ab2				endm 
# End of macro NEXTW
4ab2			.STYPE: 
4ab2				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
4ab2 48				db WORD_SYS_CORE+52             
4ab3 04 4b			dw .UPPER            
4ab5 06				db 5 + 1 
4ab6 .. 00			db "STYPE",0              
4abc				endm 
# End of macro CWHEAD
4abc			; | STYPE ( u -- u type ) Push type of value on TOS  | DONE 
4abc			; | | 's' string or 'i' integer 
4abc					if DEBUG_FORTH_WORDS_KEY 
4abc						DMARK "STY" 
4abc f5				push af  
4abd 3a d1 4a			ld a, (.dmark)  
4ac0 32 9d fd			ld (debug_mark),a  
4ac3 3a d2 4a			ld a, (.dmark+1)  
4ac6 32 9e fd			ld (debug_mark+1),a  
4ac9 3a d3 4a			ld a, (.dmark+2)  
4acc 32 9f fd			ld (debug_mark+2),a  
4acf 18 03			jr .pastdmark  
4ad1 ..			.dmark: db "STY"  
4ad4 f1			.pastdmark: pop af  
4ad5			endm  
# End of macro DMARK
4ad5						CALLMONITOR 
4ad5 cd aa fd			call debug_vector  
4ad8				endm  
# End of macro CALLMONITOR
4ad8					endif 
4ad8					FORTH_DSP 
4ad8 cd 32 21			call macro_forth_dsp 
4adb				endm 
# End of macro FORTH_DSP
4adb					;v5 FORTH_DSP_VALUE 
4adb			 
4adb 7e					ld a, (hl) 
4adc			 
4adc f5					push af 
4add			 
4add			; Dont destroy TOS		FORTH_DSP_POP 
4add			 
4add f1					pop af 
4ade			 
4ade fe 01				cp DS_TYPE_STR 
4ae0 28 09				jr z, .typestr 
4ae2			 
4ae2 fe 02				cp DS_TYPE_INUM 
4ae4 28 0a				jr z, .typeinum 
4ae6			 
4ae6 21 02 4b				ld hl, .tna 
4ae9 18 0a				jr .tpush 
4aeb			 
4aeb 21 fe 4a		.typestr:	ld hl, .tstr 
4aee 18 05				jr .tpush 
4af0 21 00 4b		.typeinum:	ld hl, .tinum 
4af3 18 00				jr .tpush 
4af5			 
4af5			.tpush: 
4af5			 
4af5 cd da 1f				call forth_push_str 
4af8			 
4af8					NEXTW 
4af8 cd a7 fd			call parse_vector 
4afb c3 53 23			jp macro_next 
4afe				endm 
# End of macro NEXTW
4afe .. 00		.tstr:	db "s",0 
4b00 .. 00		.tinum:  db "i",0 
4b02 .. 00		.tna:   db "?", 0 
4b04			 
4b04			 
4b04			.UPPER: 
4b04				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4b04 48				db WORD_SYS_CORE+52             
4b05 41 4b			dw .LOWER            
4b07 06				db 5 + 1 
4b08 .. 00			db "UPPER",0              
4b0e				endm 
# End of macro CWHEAD
4b0e			; | UPPER ( s -- s ) Upper case string s  | DONE 
4b0e					if DEBUG_FORTH_WORDS_KEY 
4b0e						DMARK "UPR" 
4b0e f5				push af  
4b0f 3a 23 4b			ld a, (.dmark)  
4b12 32 9d fd			ld (debug_mark),a  
4b15 3a 24 4b			ld a, (.dmark+1)  
4b18 32 9e fd			ld (debug_mark+1),a  
4b1b 3a 25 4b			ld a, (.dmark+2)  
4b1e 32 9f fd			ld (debug_mark+2),a  
4b21 18 03			jr .pastdmark  
4b23 ..			.dmark: db "UPR"  
4b26 f1			.pastdmark: pop af  
4b27			endm  
# End of macro DMARK
4b27						CALLMONITOR 
4b27 cd aa fd			call debug_vector  
4b2a				endm  
# End of macro CALLMONITOR
4b2a					endif 
4b2a			 
4b2a					FORTH_DSP 
4b2a cd 32 21			call macro_forth_dsp 
4b2d				endm 
# End of macro FORTH_DSP
4b2d					 
4b2d			; TODO check is string type 
4b2d			 
4b2d					FORTH_DSP_VALUEHL 
4b2d cd 6c 21			call macro_dsp_valuehl 
4b30				endm 
# End of macro FORTH_DSP_VALUEHL
4b30			; get pointer to string in hl 
4b30			 
4b30 7e			.toup:		ld a, (hl) 
4b31			;		cp 0 
4b31 b7					or a 
4b32 28 07				jr z, .toupdone 
4b34			 
4b34 cd 14 12				call to_upper 
4b37			 
4b37 77					ld (hl), a 
4b38 23					inc hl 
4b39 18 f5				jr .toup 
4b3b			 
4b3b					 
4b3b			 
4b3b			 
4b3b			; for each char convert to upper 
4b3b					 
4b3b			.toupdone: 
4b3b			 
4b3b			 
4b3b					NEXTW 
4b3b cd a7 fd			call parse_vector 
4b3e c3 53 23			jp macro_next 
4b41				endm 
# End of macro NEXTW
4b41			.LOWER: 
4b41				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
4b41 48				db WORD_SYS_CORE+52             
4b42 7e 4b			dw .TCASE            
4b44 06				db 5 + 1 
4b45 .. 00			db "LOWER",0              
4b4b				endm 
# End of macro CWHEAD
4b4b			; | LOWER ( s -- s ) Lower case string s  | DONE 
4b4b					if DEBUG_FORTH_WORDS_KEY 
4b4b						DMARK "LWR" 
4b4b f5				push af  
4b4c 3a 60 4b			ld a, (.dmark)  
4b4f 32 9d fd			ld (debug_mark),a  
4b52 3a 61 4b			ld a, (.dmark+1)  
4b55 32 9e fd			ld (debug_mark+1),a  
4b58 3a 62 4b			ld a, (.dmark+2)  
4b5b 32 9f fd			ld (debug_mark+2),a  
4b5e 18 03			jr .pastdmark  
4b60 ..			.dmark: db "LWR"  
4b63 f1			.pastdmark: pop af  
4b64			endm  
# End of macro DMARK
4b64						CALLMONITOR 
4b64 cd aa fd			call debug_vector  
4b67				endm  
# End of macro CALLMONITOR
4b67					endif 
4b67			 
4b67					FORTH_DSP 
4b67 cd 32 21			call macro_forth_dsp 
4b6a				endm 
# End of macro FORTH_DSP
4b6a					 
4b6a			; TODO check is string type 
4b6a			 
4b6a					FORTH_DSP_VALUEHL 
4b6a cd 6c 21			call macro_dsp_valuehl 
4b6d				endm 
# End of macro FORTH_DSP_VALUEHL
4b6d			; get pointer to string in hl 
4b6d			 
4b6d 7e			.tolow:		ld a, (hl) 
4b6e			;		cp 0 
4b6e b7					or a 
4b6f 28 07				jr z, .tolowdone 
4b71			 
4b71 cd 1d 12				call to_lower 
4b74			 
4b74 77					ld (hl), a 
4b75 23					inc hl 
4b76 18 f5				jr .tolow 
4b78			 
4b78					 
4b78			 
4b78			 
4b78			; for each char convert to low 
4b78					 
4b78			.tolowdone: 
4b78					NEXTW 
4b78 cd a7 fd			call parse_vector 
4b7b c3 53 23			jp macro_next 
4b7e				endm 
# End of macro NEXTW
4b7e			.TCASE: 
4b7e				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4b7e 48				db WORD_SYS_CORE+52             
4b7f b5 4c			dw .SUBSTR            
4b81 06				db 5 + 1 
4b82 .. 00			db "TCASE",0              
4b88				endm 
# End of macro CWHEAD
4b88			; | TCASE ( s -- s ) Title case string s  | DONE 
4b88					if DEBUG_FORTH_WORDS_KEY 
4b88						DMARK "TCS" 
4b88 f5				push af  
4b89 3a 9d 4b			ld a, (.dmark)  
4b8c 32 9d fd			ld (debug_mark),a  
4b8f 3a 9e 4b			ld a, (.dmark+1)  
4b92 32 9e fd			ld (debug_mark+1),a  
4b95 3a 9f 4b			ld a, (.dmark+2)  
4b98 32 9f fd			ld (debug_mark+2),a  
4b9b 18 03			jr .pastdmark  
4b9d ..			.dmark: db "TCS"  
4ba0 f1			.pastdmark: pop af  
4ba1			endm  
# End of macro DMARK
4ba1						CALLMONITOR 
4ba1 cd aa fd			call debug_vector  
4ba4				endm  
# End of macro CALLMONITOR
4ba4					endif 
4ba4			 
4ba4					FORTH_DSP 
4ba4 cd 32 21			call macro_forth_dsp 
4ba7				endm 
# End of macro FORTH_DSP
4ba7					 
4ba7			; TODO check is string type 
4ba7			 
4ba7					FORTH_DSP_VALUEHL 
4ba7 cd 6c 21			call macro_dsp_valuehl 
4baa				endm 
# End of macro FORTH_DSP_VALUEHL
4baa			; get pointer to string in hl 
4baa			 
4baa					if DEBUG_FORTH_WORDS 
4baa						DMARK "TC1" 
4baa f5				push af  
4bab 3a bf 4b			ld a, (.dmark)  
4bae 32 9d fd			ld (debug_mark),a  
4bb1 3a c0 4b			ld a, (.dmark+1)  
4bb4 32 9e fd			ld (debug_mark+1),a  
4bb7 3a c1 4b			ld a, (.dmark+2)  
4bba 32 9f fd			ld (debug_mark+2),a  
4bbd 18 03			jr .pastdmark  
4bbf ..			.dmark: db "TC1"  
4bc2 f1			.pastdmark: pop af  
4bc3			endm  
# End of macro DMARK
4bc3						CALLMONITOR 
4bc3 cd aa fd			call debug_vector  
4bc6				endm  
# End of macro CALLMONITOR
4bc6					endif 
4bc6			 
4bc6					; first time in turn to upper case first char 
4bc6			 
4bc6 7e					ld a, (hl) 
4bc7 c3 50 4c				jp .totsiptou 
4bca			 
4bca			 
4bca 7e			.tot:		ld a, (hl) 
4bcb			;		cp 0 
4bcb b7					or a 
4bcc ca 93 4c				jp z, .totdone 
4bcf			 
4bcf					if DEBUG_FORTH_WORDS 
4bcf						DMARK "TC2" 
4bcf f5				push af  
4bd0 3a e4 4b			ld a, (.dmark)  
4bd3 32 9d fd			ld (debug_mark),a  
4bd6 3a e5 4b			ld a, (.dmark+1)  
4bd9 32 9e fd			ld (debug_mark+1),a  
4bdc 3a e6 4b			ld a, (.dmark+2)  
4bdf 32 9f fd			ld (debug_mark+2),a  
4be2 18 03			jr .pastdmark  
4be4 ..			.dmark: db "TC2"  
4be7 f1			.pastdmark: pop af  
4be8			endm  
# End of macro DMARK
4be8						CALLMONITOR 
4be8 cd aa fd			call debug_vector  
4beb				endm  
# End of macro CALLMONITOR
4beb					endif 
4beb					; check to see if current char is a space 
4beb			 
4beb fe 20				cp ' ' 
4bed 28 21				jr z, .totsp 
4bef cd 1d 12				call to_lower 
4bf2					if DEBUG_FORTH_WORDS 
4bf2						DMARK "TC3" 
4bf2 f5				push af  
4bf3 3a 07 4c			ld a, (.dmark)  
4bf6 32 9d fd			ld (debug_mark),a  
4bf9 3a 08 4c			ld a, (.dmark+1)  
4bfc 32 9e fd			ld (debug_mark+1),a  
4bff 3a 09 4c			ld a, (.dmark+2)  
4c02 32 9f fd			ld (debug_mark+2),a  
4c05 18 03			jr .pastdmark  
4c07 ..			.dmark: db "TC3"  
4c0a f1			.pastdmark: pop af  
4c0b			endm  
# End of macro DMARK
4c0b						CALLMONITOR 
4c0b cd aa fd			call debug_vector  
4c0e				endm  
# End of macro CALLMONITOR
4c0e					endif 
4c0e 18 62				jr .totnxt 
4c10			 
4c10			.totsp:         ; on a space, find next char which should be upper 
4c10			 
4c10					if DEBUG_FORTH_WORDS 
4c10						DMARK "TC4" 
4c10 f5				push af  
4c11 3a 25 4c			ld a, (.dmark)  
4c14 32 9d fd			ld (debug_mark),a  
4c17 3a 26 4c			ld a, (.dmark+1)  
4c1a 32 9e fd			ld (debug_mark+1),a  
4c1d 3a 27 4c			ld a, (.dmark+2)  
4c20 32 9f fd			ld (debug_mark+2),a  
4c23 18 03			jr .pastdmark  
4c25 ..			.dmark: db "TC4"  
4c28 f1			.pastdmark: pop af  
4c29			endm  
# End of macro DMARK
4c29						CALLMONITOR 
4c29 cd aa fd			call debug_vector  
4c2c				endm  
# End of macro CALLMONITOR
4c2c					endif 
4c2c					;; 
4c2c			 
4c2c fe 20				cp ' ' 
4c2e 20 20				jr nz, .totsiptou 
4c30 23					inc hl 
4c31 7e					ld a, (hl) 
4c32					if DEBUG_FORTH_WORDS 
4c32						DMARK "TC5" 
4c32 f5				push af  
4c33 3a 47 4c			ld a, (.dmark)  
4c36 32 9d fd			ld (debug_mark),a  
4c39 3a 48 4c			ld a, (.dmark+1)  
4c3c 32 9e fd			ld (debug_mark+1),a  
4c3f 3a 49 4c			ld a, (.dmark+2)  
4c42 32 9f fd			ld (debug_mark+2),a  
4c45 18 03			jr .pastdmark  
4c47 ..			.dmark: db "TC5"  
4c4a f1			.pastdmark: pop af  
4c4b			endm  
# End of macro DMARK
4c4b						CALLMONITOR 
4c4b cd aa fd			call debug_vector  
4c4e				endm  
# End of macro CALLMONITOR
4c4e					endif 
4c4e 18 c0				jr .totsp 
4c50			.totsiptou:     
4c50					;cp 0 
4c50 b7					or a 
4c51 28 40				jr z, .totdone 
4c53					; not space and not zero term so upper case it 
4c53 cd 14 12				call to_upper 
4c56			 
4c56					if DEBUG_FORTH_WORDS 
4c56						DMARK "TC6" 
4c56 f5				push af  
4c57 3a 6b 4c			ld a, (.dmark)  
4c5a 32 9d fd			ld (debug_mark),a  
4c5d 3a 6c 4c			ld a, (.dmark+1)  
4c60 32 9e fd			ld (debug_mark+1),a  
4c63 3a 6d 4c			ld a, (.dmark+2)  
4c66 32 9f fd			ld (debug_mark+2),a  
4c69 18 03			jr .pastdmark  
4c6b ..			.dmark: db "TC6"  
4c6e f1			.pastdmark: pop af  
4c6f			endm  
# End of macro DMARK
4c6f						CALLMONITOR 
4c6f cd aa fd			call debug_vector  
4c72				endm  
# End of macro CALLMONITOR
4c72					endif 
4c72			 
4c72			 
4c72			.totnxt: 
4c72			 
4c72 77					ld (hl), a 
4c73 23					inc hl 
4c74					if DEBUG_FORTH_WORDS 
4c74						DMARK "TC7" 
4c74 f5				push af  
4c75 3a 89 4c			ld a, (.dmark)  
4c78 32 9d fd			ld (debug_mark),a  
4c7b 3a 8a 4c			ld a, (.dmark+1)  
4c7e 32 9e fd			ld (debug_mark+1),a  
4c81 3a 8b 4c			ld a, (.dmark+2)  
4c84 32 9f fd			ld (debug_mark+2),a  
4c87 18 03			jr .pastdmark  
4c89 ..			.dmark: db "TC7"  
4c8c f1			.pastdmark: pop af  
4c8d			endm  
# End of macro DMARK
4c8d						CALLMONITOR 
4c8d cd aa fd			call debug_vector  
4c90				endm  
# End of macro CALLMONITOR
4c90					endif 
4c90 c3 ca 4b				jp .tot 
4c93			 
4c93					 
4c93			 
4c93			 
4c93			; for each char convert to low 
4c93					 
4c93			.totdone: 
4c93					if DEBUG_FORTH_WORDS 
4c93						DMARK "TCd" 
4c93 f5				push af  
4c94 3a a8 4c			ld a, (.dmark)  
4c97 32 9d fd			ld (debug_mark),a  
4c9a 3a a9 4c			ld a, (.dmark+1)  
4c9d 32 9e fd			ld (debug_mark+1),a  
4ca0 3a aa 4c			ld a, (.dmark+2)  
4ca3 32 9f fd			ld (debug_mark+2),a  
4ca6 18 03			jr .pastdmark  
4ca8 ..			.dmark: db "TCd"  
4cab f1			.pastdmark: pop af  
4cac			endm  
# End of macro DMARK
4cac						CALLMONITOR 
4cac cd aa fd			call debug_vector  
4caf				endm  
# End of macro CALLMONITOR
4caf					endif 
4caf					NEXTW 
4caf cd a7 fd			call parse_vector 
4cb2 c3 53 23			jp macro_next 
4cb5				endm 
# End of macro NEXTW
4cb5			 
4cb5			.SUBSTR: 
4cb5				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4cb5 48				db WORD_SYS_CORE+52             
4cb6 15 4d			dw .LEFT            
4cb8 07				db 6 + 1 
4cb9 .. 00			db "SUBSTR",0              
4cc0				endm 
# End of macro CWHEAD
4cc0			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
4cc0			 
4cc0					if DEBUG_FORTH_WORDS_KEY 
4cc0						DMARK "SST" 
4cc0 f5				push af  
4cc1 3a d5 4c			ld a, (.dmark)  
4cc4 32 9d fd			ld (debug_mark),a  
4cc7 3a d6 4c			ld a, (.dmark+1)  
4cca 32 9e fd			ld (debug_mark+1),a  
4ccd 3a d7 4c			ld a, (.dmark+2)  
4cd0 32 9f fd			ld (debug_mark+2),a  
4cd3 18 03			jr .pastdmark  
4cd5 ..			.dmark: db "SST"  
4cd8 f1			.pastdmark: pop af  
4cd9			endm  
# End of macro DMARK
4cd9						CALLMONITOR 
4cd9 cd aa fd			call debug_vector  
4cdc				endm  
# End of macro CALLMONITOR
4cdc					endif 
4cdc			; TODO check string type 
4cdc					FORTH_DSP_VALUEHL 
4cdc cd 6c 21			call macro_dsp_valuehl 
4cdf				endm 
# End of macro FORTH_DSP_VALUEHL
4cdf			 
4cdf e5					push hl      ; string length 
4ce0			 
4ce0					FORTH_DSP_POP 
4ce0 cd 24 22			call macro_forth_dsp_pop 
4ce3				endm 
# End of macro FORTH_DSP_POP
4ce3			 
4ce3					FORTH_DSP_VALUEHL 
4ce3 cd 6c 21			call macro_dsp_valuehl 
4ce6				endm 
# End of macro FORTH_DSP_VALUEHL
4ce6			 
4ce6 e5					push hl     ; start char 
4ce7			 
4ce7					FORTH_DSP_POP 
4ce7 cd 24 22			call macro_forth_dsp_pop 
4cea				endm 
# End of macro FORTH_DSP_POP
4cea			 
4cea			 
4cea					FORTH_DSP_VALUE 
4cea cd 55 21			call macro_forth_dsp_value 
4ced				endm 
# End of macro FORTH_DSP_VALUE
4ced			 
4ced d1					pop de    ; get start post offset 
4cee			 
4cee 19					add hl, de    ; starting offset 
4cef			 
4cef c1					pop bc 
4cf0 c5					push bc      ; grab size of string 
4cf1			 
4cf1 e5					push hl    ; save string start  
4cf2			 
4cf2 26 00				ld h, 0 
4cf4 69					ld l, c 
4cf5 23					inc hl 
4cf6 23					inc hl 
4cf7			 
4cf7 cd 78 13				call malloc 
4cfa				if DEBUG_FORTH_MALLOC_GUARD 
4cfa cc 62 64				call z,malloc_error 
4cfd				endif 
4cfd			 
4cfd eb					ex de, hl      ; save malloc area for string copy 
4cfe e1					pop hl    ; get back source 
4cff c1					pop bc    ; get length of string back 
4d00			 
4d00 d5					push de    ; save malloc area for after we push 
4d01 ed b0				ldir     ; copy substr 
4d03			 
4d03			 
4d03 eb					ex de, hl 
4d04			;		ld a, 0 
4d04 36 00				ld (hl), 0   ; term substr 
4d06			 
4d06					 
4d06 e1					pop hl    ; get malloc so we can push it 
4d07 e5					push hl   ; save so we can free it afterwards 
4d08			 
4d08 cd da 1f				call forth_push_str 
4d0b			 
4d0b e1					pop hl 
4d0c cd 42 14				call free 
4d0f			 
4d0f					 
4d0f					 
4d0f			 
4d0f			 
4d0f					NEXTW 
4d0f cd a7 fd			call parse_vector 
4d12 c3 53 23			jp macro_next 
4d15				endm 
# End of macro NEXTW
4d15			 
4d15			.LEFT: 
4d15				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4d15 48				db WORD_SYS_CORE+52             
4d16 59 4d			dw .RIGHT            
4d18 05				db 4 + 1 
4d19 .. 00			db "LEFT",0              
4d1e				endm 
# End of macro CWHEAD
4d1e			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | DONE 
4d1e					if DEBUG_FORTH_WORDS_KEY 
4d1e						DMARK "LEF" 
4d1e f5				push af  
4d1f 3a 33 4d			ld a, (.dmark)  
4d22 32 9d fd			ld (debug_mark),a  
4d25 3a 34 4d			ld a, (.dmark+1)  
4d28 32 9e fd			ld (debug_mark+1),a  
4d2b 3a 35 4d			ld a, (.dmark+2)  
4d2e 32 9f fd			ld (debug_mark+2),a  
4d31 18 03			jr .pastdmark  
4d33 ..			.dmark: db "LEF"  
4d36 f1			.pastdmark: pop af  
4d37			endm  
# End of macro DMARK
4d37						CALLMONITOR 
4d37 cd aa fd			call debug_vector  
4d3a				endm  
# End of macro CALLMONITOR
4d3a					endif 
4d3a			 
4d3a					 
4d3a			; TODO check string type 
4d3a					FORTH_DSP_VALUEHL 
4d3a cd 6c 21			call macro_dsp_valuehl 
4d3d				endm 
# End of macro FORTH_DSP_VALUEHL
4d3d			 
4d3d e5					push hl      ; string length 
4d3e			 
4d3e					FORTH_DSP_POP 
4d3e cd 24 22			call macro_forth_dsp_pop 
4d41				endm 
# End of macro FORTH_DSP_POP
4d41			 
4d41					FORTH_DSP_VALUEHL 
4d41 cd 6c 21			call macro_dsp_valuehl 
4d44				endm 
# End of macro FORTH_DSP_VALUEHL
4d44			 
4d44 c1					pop bc 
4d45			 
4d45 11 f3 f0				ld de, scratch 
4d48 ed b0				ldir 
4d4a 3e 00				ld a, 0 
4d4c 12					ld (de), a 
4d4d					 
4d4d 21 f3 f0				ld hl, scratch 
4d50 cd da 1f				call forth_push_str 
4d53			 
4d53					NEXTW 
4d53 cd a7 fd			call parse_vector 
4d56 c3 53 23			jp macro_next 
4d59				endm 
# End of macro NEXTW
4d59			.RIGHT: 
4d59				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4d59 48				db WORD_SYS_CORE+52             
4d5a 1a 4e			dw .STR2NUM            
4d5c 06				db 5 + 1 
4d5d .. 00			db "RIGHT",0              
4d63				endm 
# End of macro CWHEAD
4d63			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | DONE 
4d63					if DEBUG_FORTH_WORDS_KEY 
4d63						DMARK "RIG" 
4d63 f5				push af  
4d64 3a 78 4d			ld a, (.dmark)  
4d67 32 9d fd			ld (debug_mark),a  
4d6a 3a 79 4d			ld a, (.dmark+1)  
4d6d 32 9e fd			ld (debug_mark+1),a  
4d70 3a 7a 4d			ld a, (.dmark+2)  
4d73 32 9f fd			ld (debug_mark+2),a  
4d76 18 03			jr .pastdmark  
4d78 ..			.dmark: db "RIG"  
4d7b f1			.pastdmark: pop af  
4d7c			endm  
# End of macro DMARK
4d7c						CALLMONITOR 
4d7c cd aa fd			call debug_vector  
4d7f				endm  
# End of macro CALLMONITOR
4d7f					endif 
4d7f			 
4d7f			; TODO check string type 
4d7f					FORTH_DSP_VALUEHL 
4d7f cd 6c 21			call macro_dsp_valuehl 
4d82				endm 
# End of macro FORTH_DSP_VALUEHL
4d82			 
4d82 e5					push hl      ; string length 
4d83			 
4d83					FORTH_DSP_POP 
4d83 cd 24 22			call macro_forth_dsp_pop 
4d86				endm 
# End of macro FORTH_DSP_POP
4d86			 
4d86					FORTH_DSP_VALUEHL 
4d86 cd 6c 21			call macro_dsp_valuehl 
4d89				endm 
# End of macro FORTH_DSP_VALUEHL
4d89			 
4d89					if DEBUG_FORTH_WORDS 
4d89						DMARK "RI1" 
4d89 f5				push af  
4d8a 3a 9e 4d			ld a, (.dmark)  
4d8d 32 9d fd			ld (debug_mark),a  
4d90 3a 9f 4d			ld a, (.dmark+1)  
4d93 32 9e fd			ld (debug_mark+1),a  
4d96 3a a0 4d			ld a, (.dmark+2)  
4d99 32 9f fd			ld (debug_mark+2),a  
4d9c 18 03			jr .pastdmark  
4d9e ..			.dmark: db "RI1"  
4da1 f1			.pastdmark: pop af  
4da2			endm  
# End of macro DMARK
4da2						CALLMONITOR 
4da2 cd aa fd			call debug_vector  
4da5				endm  
# End of macro CALLMONITOR
4da5					endif 
4da5					; from the pointer to string get to the end of string 
4da5			 
4da5 01 ff 00				ld bc, 255 
4da8 3e 00				ld a, 0 
4daa ed b1				cpir 
4dac 2b					dec hl 
4dad			 
4dad					;  
4dad			 
4dad					if DEBUG_FORTH_WORDS 
4dad						DMARK "RI2" 
4dad f5				push af  
4dae 3a c2 4d			ld a, (.dmark)  
4db1 32 9d fd			ld (debug_mark),a  
4db4 3a c3 4d			ld a, (.dmark+1)  
4db7 32 9e fd			ld (debug_mark+1),a  
4dba 3a c4 4d			ld a, (.dmark+2)  
4dbd 32 9f fd			ld (debug_mark+2),a  
4dc0 18 03			jr .pastdmark  
4dc2 ..			.dmark: db "RI2"  
4dc5 f1			.pastdmark: pop af  
4dc6			endm  
# End of macro DMARK
4dc6						CALLMONITOR 
4dc6 cd aa fd			call debug_vector  
4dc9				endm  
# End of macro CALLMONITOR
4dc9					endif 
4dc9			 
4dc9 c1					pop bc    ;  length of string to copy 
4dca			 
4dca 79					ld a, c 
4dcb eb					ex de, hl 
4dcc 21 f3 f0				ld hl, scratch  
4dcf cd ac 0f				call addatohl 
4dd2			 
4dd2 eb					ex de, hl 
4dd3			 
4dd3					if DEBUG_FORTH_WORDS 
4dd3						DMARK "RI3" 
4dd3 f5				push af  
4dd4 3a e8 4d			ld a, (.dmark)  
4dd7 32 9d fd			ld (debug_mark),a  
4dda 3a e9 4d			ld a, (.dmark+1)  
4ddd 32 9e fd			ld (debug_mark+1),a  
4de0 3a ea 4d			ld a, (.dmark+2)  
4de3 32 9f fd			ld (debug_mark+2),a  
4de6 18 03			jr .pastdmark  
4de8 ..			.dmark: db "RI3"  
4deb f1			.pastdmark: pop af  
4dec			endm  
# End of macro DMARK
4dec						CALLMONITOR 
4dec cd aa fd			call debug_vector  
4def				endm  
# End of macro CALLMONITOR
4def					endif 
4def			 
4def 03					inc bc 
4df0 ed b8				lddr 
4df2					 
4df2 21 f3 f0				ld hl, scratch 
4df5					if DEBUG_FORTH_WORDS 
4df5						DMARK "RI4" 
4df5 f5				push af  
4df6 3a 0a 4e			ld a, (.dmark)  
4df9 32 9d fd			ld (debug_mark),a  
4dfc 3a 0b 4e			ld a, (.dmark+1)  
4dff 32 9e fd			ld (debug_mark+1),a  
4e02 3a 0c 4e			ld a, (.dmark+2)  
4e05 32 9f fd			ld (debug_mark+2),a  
4e08 18 03			jr .pastdmark  
4e0a ..			.dmark: db "RI4"  
4e0d f1			.pastdmark: pop af  
4e0e			endm  
# End of macro DMARK
4e0e						CALLMONITOR 
4e0e cd aa fd			call debug_vector  
4e11				endm  
# End of macro CALLMONITOR
4e11					endif 
4e11 cd da 1f				call forth_push_str 
4e14			 
4e14			 
4e14					NEXTW 
4e14 cd a7 fd			call parse_vector 
4e17 c3 53 23			jp macro_next 
4e1a				endm 
# End of macro NEXTW
4e1a			 
4e1a			 
4e1a			.STR2NUM: 
4e1a				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4e1a 48				db WORD_SYS_CORE+52             
4e1b a9 4e			dw .NUM2STR            
4e1d 08				db 7 + 1 
4e1e .. 00			db "STR2NUM",0              
4e26				endm 
# End of macro CWHEAD
4e26			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4e26			 
4e26			 
4e26			; TODO STR type check to do 
4e26					if DEBUG_FORTH_WORDS_KEY 
4e26						DMARK "S2N" 
4e26 f5				push af  
4e27 3a 3b 4e			ld a, (.dmark)  
4e2a 32 9d fd			ld (debug_mark),a  
4e2d 3a 3c 4e			ld a, (.dmark+1)  
4e30 32 9e fd			ld (debug_mark+1),a  
4e33 3a 3d 4e			ld a, (.dmark+2)  
4e36 32 9f fd			ld (debug_mark+2),a  
4e39 18 03			jr .pastdmark  
4e3b ..			.dmark: db "S2N"  
4e3e f1			.pastdmark: pop af  
4e3f			endm  
# End of macro DMARK
4e3f						CALLMONITOR 
4e3f cd aa fd			call debug_vector  
4e42				endm  
# End of macro CALLMONITOR
4e42					endif 
4e42			 
4e42					;FORTH_DSP 
4e42					FORTH_DSP_VALUE 
4e42 cd 55 21			call macro_forth_dsp_value 
4e45				endm 
# End of macro FORTH_DSP_VALUE
4e45					;inc hl 
4e45			 
4e45 eb					ex de, hl 
4e46					if DEBUG_FORTH_WORDS 
4e46						DMARK "S2a" 
4e46 f5				push af  
4e47 3a 5b 4e			ld a, (.dmark)  
4e4a 32 9d fd			ld (debug_mark),a  
4e4d 3a 5c 4e			ld a, (.dmark+1)  
4e50 32 9e fd			ld (debug_mark+1),a  
4e53 3a 5d 4e			ld a, (.dmark+2)  
4e56 32 9f fd			ld (debug_mark+2),a  
4e59 18 03			jr .pastdmark  
4e5b ..			.dmark: db "S2a"  
4e5e f1			.pastdmark: pop af  
4e5f			endm  
# End of macro DMARK
4e5f						CALLMONITOR 
4e5f cd aa fd			call debug_vector  
4e62				endm  
# End of macro CALLMONITOR
4e62					endif 
4e62 cd 9b 12				call string_to_uint16 
4e65			 
4e65					if DEBUG_FORTH_WORDS 
4e65						DMARK "S2b" 
4e65 f5				push af  
4e66 3a 7a 4e			ld a, (.dmark)  
4e69 32 9d fd			ld (debug_mark),a  
4e6c 3a 7b 4e			ld a, (.dmark+1)  
4e6f 32 9e fd			ld (debug_mark+1),a  
4e72 3a 7c 4e			ld a, (.dmark+2)  
4e75 32 9f fd			ld (debug_mark+2),a  
4e78 18 03			jr .pastdmark  
4e7a ..			.dmark: db "S2b"  
4e7d f1			.pastdmark: pop af  
4e7e			endm  
# End of macro DMARK
4e7e						CALLMONITOR 
4e7e cd aa fd			call debug_vector  
4e81				endm  
# End of macro CALLMONITOR
4e81					endif 
4e81			;		push hl 
4e81					FORTH_DSP_POP 
4e81 cd 24 22			call macro_forth_dsp_pop 
4e84				endm 
# End of macro FORTH_DSP_POP
4e84			;		pop hl 
4e84					 
4e84					if DEBUG_FORTH_WORDS 
4e84						DMARK "S2b" 
4e84 f5				push af  
4e85 3a 99 4e			ld a, (.dmark)  
4e88 32 9d fd			ld (debug_mark),a  
4e8b 3a 9a 4e			ld a, (.dmark+1)  
4e8e 32 9e fd			ld (debug_mark+1),a  
4e91 3a 9b 4e			ld a, (.dmark+2)  
4e94 32 9f fd			ld (debug_mark+2),a  
4e97 18 03			jr .pastdmark  
4e99 ..			.dmark: db "S2b"  
4e9c f1			.pastdmark: pop af  
4e9d			endm  
# End of macro DMARK
4e9d						CALLMONITOR 
4e9d cd aa fd			call debug_vector  
4ea0				endm  
# End of macro CALLMONITOR
4ea0					endif 
4ea0 cd 70 1f				call forth_push_numhl	 
4ea3			 
4ea3				 
4ea3				       NEXTW 
4ea3 cd a7 fd			call parse_vector 
4ea6 c3 53 23			jp macro_next 
4ea9				endm 
# End of macro NEXTW
4ea9			.NUM2STR: 
4ea9				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4ea9 48				db WORD_SYS_CORE+52             
4eaa 3e 4f			dw .CONCAT            
4eac 08				db 7 + 1 
4ead .. 00			db "NUM2STR",0              
4eb5				endm 
# End of macro CWHEAD
4eb5			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
4eb5			 
4eb5			;		; malloc a string to target 
4eb5			;		ld hl, 10     ; TODO max string size should be fine 
4eb5			;		call malloc 
4eb5			;		push hl    ; save malloc location 
4eb5			; 
4eb5			; 
4eb5			;; TODO check int type 
4eb5					if DEBUG_FORTH_WORDS_KEY 
4eb5						DMARK "N2S" 
4eb5 f5				push af  
4eb6 3a ca 4e			ld a, (.dmark)  
4eb9 32 9d fd			ld (debug_mark),a  
4ebc 3a cb 4e			ld a, (.dmark+1)  
4ebf 32 9e fd			ld (debug_mark+1),a  
4ec2 3a cc 4e			ld a, (.dmark+2)  
4ec5 32 9f fd			ld (debug_mark+2),a  
4ec8 18 03			jr .pastdmark  
4eca ..			.dmark: db "N2S"  
4ecd f1			.pastdmark: pop af  
4ece			endm  
# End of macro DMARK
4ece						CALLMONITOR 
4ece cd aa fd			call debug_vector  
4ed1				endm  
# End of macro CALLMONITOR
4ed1					endif 
4ed1			 
4ed1					FORTH_DSP_VALUEHL 
4ed1 cd 6c 21			call macro_dsp_valuehl 
4ed4				endm 
# End of macro FORTH_DSP_VALUEHL
4ed4			 
4ed4					if DEBUG_FORTH_WORDS 
4ed4						DMARK "NS1" 
4ed4 f5				push af  
4ed5 3a e9 4e			ld a, (.dmark)  
4ed8 32 9d fd			ld (debug_mark),a  
4edb 3a ea 4e			ld a, (.dmark+1)  
4ede 32 9e fd			ld (debug_mark+1),a  
4ee1 3a eb 4e			ld a, (.dmark+2)  
4ee4 32 9f fd			ld (debug_mark+2),a  
4ee7 18 03			jr .pastdmark  
4ee9 ..			.dmark: db "NS1"  
4eec f1			.pastdmark: pop af  
4eed			endm  
# End of macro DMARK
4eed						CALLMONITOR 
4eed cd aa fd			call debug_vector  
4ef0				endm  
# End of macro CALLMONITOR
4ef0					endif 
4ef0					FORTH_DSP_POP 
4ef0 cd 24 22			call macro_forth_dsp_pop 
4ef3				endm 
# End of macro FORTH_DSP_POP
4ef3			 
4ef3 eb					ex de, hl 
4ef4 21 f3 f0				ld hl, scratch 
4ef7					if DEBUG_FORTH_WORDS 
4ef7						DMARK "NS2" 
4ef7 f5				push af  
4ef8 3a 0c 4f			ld a, (.dmark)  
4efb 32 9d fd			ld (debug_mark),a  
4efe 3a 0d 4f			ld a, (.dmark+1)  
4f01 32 9e fd			ld (debug_mark+1),a  
4f04 3a 0e 4f			ld a, (.dmark+2)  
4f07 32 9f fd			ld (debug_mark+2),a  
4f0a 18 03			jr .pastdmark  
4f0c ..			.dmark: db "NS2"  
4f0f f1			.pastdmark: pop af  
4f10			endm  
# End of macro DMARK
4f10						CALLMONITOR 
4f10 cd aa fd			call debug_vector  
4f13				endm  
# End of macro CALLMONITOR
4f13					endif 
4f13 cd b3 12				call uitoa_16 
4f16 21 f3 f0				ld hl, scratch 
4f19					if DEBUG_FORTH_WORDS 
4f19						DMARK "NS3" 
4f19 f5				push af  
4f1a 3a 2e 4f			ld a, (.dmark)  
4f1d 32 9d fd			ld (debug_mark),a  
4f20 3a 2f 4f			ld a, (.dmark+1)  
4f23 32 9e fd			ld (debug_mark+1),a  
4f26 3a 30 4f			ld a, (.dmark+2)  
4f29 32 9f fd			ld (debug_mark+2),a  
4f2c 18 03			jr .pastdmark  
4f2e ..			.dmark: db "NS3"  
4f31 f1			.pastdmark: pop af  
4f32			endm  
# End of macro DMARK
4f32						CALLMONITOR 
4f32 cd aa fd			call debug_vector  
4f35				endm  
# End of macro CALLMONITOR
4f35					endif 
4f35 cd da 1f				call forth_push_str 
4f38			;		ld a, l 
4f38			;		call DispAToASCII   
4f38			;;TODO need to chage above call to dump into string 
4f38			; 
4f38			; 
4f38			 
4f38				       NEXTW 
4f38 cd a7 fd			call parse_vector 
4f3b c3 53 23			jp macro_next 
4f3e				endm 
# End of macro NEXTW
4f3e			 
4f3e			.CONCAT: 
4f3e				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4f3e 48				db WORD_SYS_CORE+52             
4f3f f4 4f			dw .FIND            
4f41 07				db 6 + 1 
4f42 .. 00			db "CONCAT",0              
4f49				endm 
# End of macro CWHEAD
4f49			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4f49			 
4f49			; TODO check string type 
4f49			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4f49			 
4f49					if DEBUG_FORTH_WORDS_KEY 
4f49						DMARK "CON" 
4f49 f5				push af  
4f4a 3a 5e 4f			ld a, (.dmark)  
4f4d 32 9d fd			ld (debug_mark),a  
4f50 3a 5f 4f			ld a, (.dmark+1)  
4f53 32 9e fd			ld (debug_mark+1),a  
4f56 3a 60 4f			ld a, (.dmark+2)  
4f59 32 9f fd			ld (debug_mark+2),a  
4f5c 18 03			jr .pastdmark  
4f5e ..			.dmark: db "CON"  
4f61 f1			.pastdmark: pop af  
4f62			endm  
# End of macro DMARK
4f62						CALLMONITOR 
4f62 cd aa fd			call debug_vector  
4f65				endm  
# End of macro CALLMONITOR
4f65					endif 
4f65			 
4f65			 
4f65					FORTH_DSP_VALUE 
4f65 cd 55 21			call macro_forth_dsp_value 
4f68				endm 
# End of macro FORTH_DSP_VALUE
4f68 e5					push hl   ; s2 
4f69			 
4f69					FORTH_DSP_POP 
4f69 cd 24 22			call macro_forth_dsp_pop 
4f6c				endm 
# End of macro FORTH_DSP_POP
4f6c			 
4f6c					FORTH_DSP_VALUE 
4f6c cd 55 21			call macro_forth_dsp_value 
4f6f				endm 
# End of macro FORTH_DSP_VALUE
4f6f			 
4f6f e5					push hl   ; s1 
4f70			 
4f70					FORTH_DSP_POP 
4f70 cd 24 22			call macro_forth_dsp_pop 
4f73				endm 
# End of macro FORTH_DSP_POP
4f73					 
4f73			 
4f73					; copy s1 
4f73			 
4f73				 
4f73					; save ptr 
4f73 e1					pop hl  
4f74 e5					push hl 
4f75 3e 00				ld a, 0 
4f77 cd 0f 13				call strlent 
4f7a					;inc hl    ; zer0 
4f7a 06 00				ld b, 0 
4f7c 4d					ld c, l 
4f7d e1					pop hl		 
4f7e 11 f3 f0				ld de, scratch	 
4f81					if DEBUG_FORTH_WORDS 
4f81						DMARK "CO1" 
4f81 f5				push af  
4f82 3a 96 4f			ld a, (.dmark)  
4f85 32 9d fd			ld (debug_mark),a  
4f88 3a 97 4f			ld a, (.dmark+1)  
4f8b 32 9e fd			ld (debug_mark+1),a  
4f8e 3a 98 4f			ld a, (.dmark+2)  
4f91 32 9f fd			ld (debug_mark+2),a  
4f94 18 03			jr .pastdmark  
4f96 ..			.dmark: db "CO1"  
4f99 f1			.pastdmark: pop af  
4f9a			endm  
# End of macro DMARK
4f9a						CALLMONITOR 
4f9a cd aa fd			call debug_vector  
4f9d				endm  
# End of macro CALLMONITOR
4f9d					endif 
4f9d ed b0				ldir 
4f9f			 
4f9f e1					pop hl 
4fa0 e5					push hl 
4fa1 d5					push de 
4fa2			 
4fa2			 
4fa2 3e 00				ld a, 0 
4fa4 cd 0f 13				call strlent 
4fa7 23					inc hl    ; zer0 
4fa8 23					inc hl 
4fa9 06 00				ld b, 0 
4fab 4d					ld c, l 
4fac d1					pop de 
4fad e1					pop hl		 
4fae					if DEBUG_FORTH_WORDS 
4fae						DMARK "CO2" 
4fae f5				push af  
4faf 3a c3 4f			ld a, (.dmark)  
4fb2 32 9d fd			ld (debug_mark),a  
4fb5 3a c4 4f			ld a, (.dmark+1)  
4fb8 32 9e fd			ld (debug_mark+1),a  
4fbb 3a c5 4f			ld a, (.dmark+2)  
4fbe 32 9f fd			ld (debug_mark+2),a  
4fc1 18 03			jr .pastdmark  
4fc3 ..			.dmark: db "CO2"  
4fc6 f1			.pastdmark: pop af  
4fc7			endm  
# End of macro DMARK
4fc7						CALLMONITOR 
4fc7 cd aa fd			call debug_vector  
4fca				endm  
# End of macro CALLMONITOR
4fca					endif 
4fca ed b0				ldir 
4fcc			 
4fcc			 
4fcc			 
4fcc 21 f3 f0				ld hl, scratch 
4fcf					if DEBUG_FORTH_WORDS 
4fcf						DMARK "CO5" 
4fcf f5				push af  
4fd0 3a e4 4f			ld a, (.dmark)  
4fd3 32 9d fd			ld (debug_mark),a  
4fd6 3a e5 4f			ld a, (.dmark+1)  
4fd9 32 9e fd			ld (debug_mark+1),a  
4fdc 3a e6 4f			ld a, (.dmark+2)  
4fdf 32 9f fd			ld (debug_mark+2),a  
4fe2 18 03			jr .pastdmark  
4fe4 ..			.dmark: db "CO5"  
4fe7 f1			.pastdmark: pop af  
4fe8			endm  
# End of macro DMARK
4fe8						CALLMONITOR 
4fe8 cd aa fd			call debug_vector  
4feb				endm  
# End of macro CALLMONITOR
4feb					endif 
4feb			 
4feb cd da 1f				call forth_push_str 
4fee			 
4fee			 
4fee			 
4fee			 
4fee				       NEXTW 
4fee cd a7 fd			call parse_vector 
4ff1 c3 53 23			jp macro_next 
4ff4				endm 
# End of macro NEXTW
4ff4			 
4ff4			 
4ff4			.FIND: 
4ff4				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4ff4 4b				db WORD_SYS_CORE+55             
4ff5 b4 50			dw .LEN            
4ff7 05				db 4 + 1 
4ff8 .. 00			db "FIND",0              
4ffd				endm 
# End of macro CWHEAD
4ffd			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4ffd			 
4ffd					if DEBUG_FORTH_WORDS_KEY 
4ffd						DMARK "FND" 
4ffd f5				push af  
4ffe 3a 12 50			ld a, (.dmark)  
5001 32 9d fd			ld (debug_mark),a  
5004 3a 13 50			ld a, (.dmark+1)  
5007 32 9e fd			ld (debug_mark+1),a  
500a 3a 14 50			ld a, (.dmark+2)  
500d 32 9f fd			ld (debug_mark+2),a  
5010 18 03			jr .pastdmark  
5012 ..			.dmark: db "FND"  
5015 f1			.pastdmark: pop af  
5016			endm  
# End of macro DMARK
5016						CALLMONITOR 
5016 cd aa fd			call debug_vector  
5019				endm  
# End of macro CALLMONITOR
5019					endif 
5019			 
5019			; TODO check string type 
5019					FORTH_DSP_VALUE 
5019 cd 55 21			call macro_forth_dsp_value 
501c				endm 
# End of macro FORTH_DSP_VALUE
501c			 
501c e5					push hl    
501d 7e					ld a,(hl)    ; char to find   
501e			; TODO change char to substr 
501e			 
501e f5					push af 
501f					 
501f			 
501f			 
501f					if DEBUG_FORTH_WORDS 
501f						DMARK "FN1" 
501f f5				push af  
5020 3a 34 50			ld a, (.dmark)  
5023 32 9d fd			ld (debug_mark),a  
5026 3a 35 50			ld a, (.dmark+1)  
5029 32 9e fd			ld (debug_mark+1),a  
502c 3a 36 50			ld a, (.dmark+2)  
502f 32 9f fd			ld (debug_mark+2),a  
5032 18 03			jr .pastdmark  
5034 ..			.dmark: db "FN1"  
5037 f1			.pastdmark: pop af  
5038			endm  
# End of macro DMARK
5038						CALLMONITOR 
5038 cd aa fd			call debug_vector  
503b				endm  
# End of macro CALLMONITOR
503b					endif 
503b			 
503b					FORTH_DSP_POP 
503b cd 24 22			call macro_forth_dsp_pop 
503e				endm 
# End of macro FORTH_DSP_POP
503e			 
503e					; string to search 
503e			 
503e					FORTH_DSP_VALUE 
503e cd 55 21			call macro_forth_dsp_value 
5041				endm 
# End of macro FORTH_DSP_VALUE
5041			 
5041 d1					pop de  ; d is char to find  
5042			 
5042					if DEBUG_FORTH_WORDS 
5042						DMARK "FN2" 
5042 f5				push af  
5043 3a 57 50			ld a, (.dmark)  
5046 32 9d fd			ld (debug_mark),a  
5049 3a 58 50			ld a, (.dmark+1)  
504c 32 9e fd			ld (debug_mark+1),a  
504f 3a 59 50			ld a, (.dmark+2)  
5052 32 9f fd			ld (debug_mark+2),a  
5055 18 03			jr .pastdmark  
5057 ..			.dmark: db "FN2"  
505a f1			.pastdmark: pop af  
505b			endm  
# End of macro DMARK
505b						CALLMONITOR 
505b cd aa fd			call debug_vector  
505e				endm  
# End of macro CALLMONITOR
505e					endif 
505e					 
505e 01 00 00				ld bc, 0 
5061 7e			.findchar:      ld a,(hl) 
5062			;		cp 0   		 
5062 b7					or a 
5063 28 27				jr z, .finddone     
5065 ba					cp d 
5066 28 20				jr z, .foundchar 
5068 03					inc bc 
5069 23					inc hl 
506a					if DEBUG_FORTH_WORDS 
506a						DMARK "FN3" 
506a f5				push af  
506b 3a 7f 50			ld a, (.dmark)  
506e 32 9d fd			ld (debug_mark),a  
5071 3a 80 50			ld a, (.dmark+1)  
5074 32 9e fd			ld (debug_mark+1),a  
5077 3a 81 50			ld a, (.dmark+2)  
507a 32 9f fd			ld (debug_mark+2),a  
507d 18 03			jr .pastdmark  
507f ..			.dmark: db "FN3"  
5082 f1			.pastdmark: pop af  
5083			endm  
# End of macro DMARK
5083						CALLMONITOR 
5083 cd aa fd			call debug_vector  
5086				endm  
# End of macro CALLMONITOR
5086					endif 
5086 18 d9				jr .findchar 
5088			 
5088			 
5088 c5			.foundchar:	push bc 
5089 e1					pop hl 
508a 18 03				jr .findexit 
508c			 
508c			 
508c							 
508c			 
508c			.finddone:     ; got to end of string with no find 
508c 21 00 00				ld hl, 0 
508f			.findexit: 
508f			 
508f					if DEBUG_FORTH_WORDS 
508f						DMARK "FNd" 
508f f5				push af  
5090 3a a4 50			ld a, (.dmark)  
5093 32 9d fd			ld (debug_mark),a  
5096 3a a5 50			ld a, (.dmark+1)  
5099 32 9e fd			ld (debug_mark+1),a  
509c 3a a6 50			ld a, (.dmark+2)  
509f 32 9f fd			ld (debug_mark+2),a  
50a2 18 03			jr .pastdmark  
50a4 ..			.dmark: db "FNd"  
50a7 f1			.pastdmark: pop af  
50a8			endm  
# End of macro DMARK
50a8						CALLMONITOR 
50a8 cd aa fd			call debug_vector  
50ab				endm  
# End of macro CALLMONITOR
50ab					endif 
50ab cd 70 1f			call forth_push_numhl 
50ae			 
50ae				       NEXTW 
50ae cd a7 fd			call parse_vector 
50b1 c3 53 23			jp macro_next 
50b4				endm 
# End of macro NEXTW
50b4			 
50b4			.LEN: 
50b4				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
50b4 4c				db WORD_SYS_CORE+56             
50b5 21 51			dw .ASC            
50b7 06				db 5 + 1 
50b8 .. 00			db "COUNT",0              
50be				endm 
# End of macro CWHEAD
50be			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
50be			 
50be					if DEBUG_FORTH_WORDS_KEY 
50be						DMARK "CNT" 
50be f5				push af  
50bf 3a d3 50			ld a, (.dmark)  
50c2 32 9d fd			ld (debug_mark),a  
50c5 3a d4 50			ld a, (.dmark+1)  
50c8 32 9e fd			ld (debug_mark+1),a  
50cb 3a d5 50			ld a, (.dmark+2)  
50ce 32 9f fd			ld (debug_mark+2),a  
50d1 18 03			jr .pastdmark  
50d3 ..			.dmark: db "CNT"  
50d6 f1			.pastdmark: pop af  
50d7			endm  
# End of macro DMARK
50d7						CALLMONITOR 
50d7 cd aa fd			call debug_vector  
50da				endm  
# End of macro CALLMONITOR
50da					endif 
50da			; TODO check string type 
50da					FORTH_DSP_VALUE 
50da cd 55 21			call macro_forth_dsp_value 
50dd				endm 
# End of macro FORTH_DSP_VALUE
50dd			 
50dd			 
50dd					if DEBUG_FORTH_WORDS 
50dd						DMARK "CN?" 
50dd f5				push af  
50de 3a f2 50			ld a, (.dmark)  
50e1 32 9d fd			ld (debug_mark),a  
50e4 3a f3 50			ld a, (.dmark+1)  
50e7 32 9e fd			ld (debug_mark+1),a  
50ea 3a f4 50			ld a, (.dmark+2)  
50ed 32 9f fd			ld (debug_mark+2),a  
50f0 18 03			jr .pastdmark  
50f2 ..			.dmark: db "CN?"  
50f5 f1			.pastdmark: pop af  
50f6			endm  
# End of macro DMARK
50f6						CALLMONITOR 
50f6 cd aa fd			call debug_vector  
50f9				endm  
# End of macro CALLMONITOR
50f9					endif 
50f9 cd 04 13				call strlenz 
50fc					if DEBUG_FORTH_WORDS 
50fc						DMARK "CNl" 
50fc f5				push af  
50fd 3a 11 51			ld a, (.dmark)  
5100 32 9d fd			ld (debug_mark),a  
5103 3a 12 51			ld a, (.dmark+1)  
5106 32 9e fd			ld (debug_mark+1),a  
5109 3a 13 51			ld a, (.dmark+2)  
510c 32 9f fd			ld (debug_mark+2),a  
510f 18 03			jr .pastdmark  
5111 ..			.dmark: db "CNl"  
5114 f1			.pastdmark: pop af  
5115			endm  
# End of macro DMARK
5115						CALLMONITOR 
5115 cd aa fd			call debug_vector  
5118				endm  
# End of macro CALLMONITOR
5118					endif 
5118			 
5118 cd 70 1f				call forth_push_numhl 
511b			 
511b			 
511b			 
511b				       NEXTW 
511b cd a7 fd			call parse_vector 
511e c3 53 23			jp macro_next 
5121				endm 
# End of macro NEXTW
5121			.ASC: 
5121				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
5121 4d				db WORD_SYS_CORE+57             
5122 92 51			dw .CHR            
5124 04				db 3 + 1 
5125 .. 00			db "ASC",0              
5129				endm 
# End of macro CWHEAD
5129			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
5129					if DEBUG_FORTH_WORDS_KEY 
5129						DMARK "ASC" 
5129 f5				push af  
512a 3a 3e 51			ld a, (.dmark)  
512d 32 9d fd			ld (debug_mark),a  
5130 3a 3f 51			ld a, (.dmark+1)  
5133 32 9e fd			ld (debug_mark+1),a  
5136 3a 40 51			ld a, (.dmark+2)  
5139 32 9f fd			ld (debug_mark+2),a  
513c 18 03			jr .pastdmark  
513e ..			.dmark: db "ASC"  
5141 f1			.pastdmark: pop af  
5142			endm  
# End of macro DMARK
5142						CALLMONITOR 
5142 cd aa fd			call debug_vector  
5145				endm  
# End of macro CALLMONITOR
5145					endif 
5145					FORTH_DSP_VALUE 
5145 cd 55 21			call macro_forth_dsp_value 
5148				endm 
# End of macro FORTH_DSP_VALUE
5148					;v5 FORTH_DSP_VALUE 
5148			;		inc hl      ; now at start of numeric as string 
5148			 
5148 e5					push hl 
5149			 
5149					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5149 cd 24 22			call macro_forth_dsp_pop 
514c				endm 
# End of macro FORTH_DSP_POP
514c			 
514c e1					pop hl 
514d			 
514d					if DEBUG_FORTH_WORDS 
514d						DMARK "AS1" 
514d f5				push af  
514e 3a 62 51			ld a, (.dmark)  
5151 32 9d fd			ld (debug_mark),a  
5154 3a 63 51			ld a, (.dmark+1)  
5157 32 9e fd			ld (debug_mark+1),a  
515a 3a 64 51			ld a, (.dmark+2)  
515d 32 9f fd			ld (debug_mark+2),a  
5160 18 03			jr .pastdmark  
5162 ..			.dmark: db "AS1"  
5165 f1			.pastdmark: pop af  
5166			endm  
# End of macro DMARK
5166						CALLMONITOR 
5166 cd aa fd			call debug_vector  
5169				endm  
# End of macro CALLMONITOR
5169					endif 
5169					; push the content of a onto the stack as a value 
5169			 
5169 7e					ld a,(hl)   ; get char 
516a 26 00				ld h,0 
516c 6f					ld l,a 
516d					if DEBUG_FORTH_WORDS 
516d						DMARK "AS2" 
516d f5				push af  
516e 3a 82 51			ld a, (.dmark)  
5171 32 9d fd			ld (debug_mark),a  
5174 3a 83 51			ld a, (.dmark+1)  
5177 32 9e fd			ld (debug_mark+1),a  
517a 3a 84 51			ld a, (.dmark+2)  
517d 32 9f fd			ld (debug_mark+2),a  
5180 18 03			jr .pastdmark  
5182 ..			.dmark: db "AS2"  
5185 f1			.pastdmark: pop af  
5186			endm  
# End of macro DMARK
5186						CALLMONITOR 
5186 cd aa fd			call debug_vector  
5189				endm  
# End of macro CALLMONITOR
5189					endif 
5189 cd 70 1f				call forth_push_numhl 
518c			 
518c				       NEXTW 
518c cd a7 fd			call parse_vector 
518f c3 53 23			jp macro_next 
5192				endm 
# End of macro NEXTW
5192			 
5192			.CHR: 
5192				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
5192 4d				db WORD_SYS_CORE+57             
5193 d1 51			dw .ENDSTR            
5195 04				db 3 + 1 
5196 .. 00			db "CHR",0              
519a				endm 
# End of macro CWHEAD
519a			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
519a					if DEBUG_FORTH_WORDS_KEY 
519a						DMARK "CHR" 
519a f5				push af  
519b 3a af 51			ld a, (.dmark)  
519e 32 9d fd			ld (debug_mark),a  
51a1 3a b0 51			ld a, (.dmark+1)  
51a4 32 9e fd			ld (debug_mark+1),a  
51a7 3a b1 51			ld a, (.dmark+2)  
51aa 32 9f fd			ld (debug_mark+2),a  
51ad 18 03			jr .pastdmark  
51af ..			.dmark: db "CHR"  
51b2 f1			.pastdmark: pop af  
51b3			endm  
# End of macro DMARK
51b3						CALLMONITOR 
51b3 cd aa fd			call debug_vector  
51b6				endm  
# End of macro CALLMONITOR
51b6					endif 
51b6					FORTH_DSP_VALUEHL 
51b6 cd 6c 21			call macro_dsp_valuehl 
51b9				endm 
# End of macro FORTH_DSP_VALUEHL
51b9			 
51b9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
51b9 cd 24 22			call macro_forth_dsp_pop 
51bc				endm 
# End of macro FORTH_DSP_POP
51bc			 
51bc					; save asci byte as a zero term string and push string 
51bc			 
51bc 7d					ld a,l 
51bd 32 f3 f0				ld (scratch), a 
51c0			 
51c0 3e 00				ld a, 0 
51c2 32 f4 f0				ld (scratch+1), a 
51c5			 
51c5 21 f3 f0				ld hl, scratch 
51c8 cd da 1f				call forth_push_str 
51cb			 
51cb			 
51cb				       NEXTW 
51cb cd a7 fd			call parse_vector 
51ce c3 53 23			jp macro_next 
51d1				endm 
# End of macro NEXTW
51d1			 
51d1			 
51d1			 
51d1			 
51d1			.ENDSTR: 
51d1			; eof 
51d1			 
# End of file forth_words_str.asm
51d1			include "forth_words_key.asm" 
51d1			 
51d1			; | ## Keyboard Words 
51d1			 
51d1			.KEY: 
51d1				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
51d1 3e				db WORD_SYS_CORE+42             
51d2 04 52			dw .KEYDB            
51d4 04				db 3 + 1 
51d5 .. 00			db "KEY",0              
51d9				endm 
# End of macro CWHEAD
51d9			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
51d9			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
51d9			; | | Can use something like this to process: 
51d9			; | | > repeat active . key ?dup if emit then #1 until  
51d9			 
51d9					if DEBUG_FORTH_WORDS_KEY 
51d9						DMARK "KEY" 
51d9 f5				push af  
51da 3a ee 51			ld a, (.dmark)  
51dd 32 9d fd			ld (debug_mark),a  
51e0 3a ef 51			ld a, (.dmark+1)  
51e3 32 9e fd			ld (debug_mark+1),a  
51e6 3a f0 51			ld a, (.dmark+2)  
51e9 32 9f fd			ld (debug_mark+2),a  
51ec 18 03			jr .pastdmark  
51ee ..			.dmark: db "KEY"  
51f1 f1			.pastdmark: pop af  
51f2			endm  
# End of macro DMARK
51f2						CALLMONITOR 
51f2 cd aa fd			call debug_vector  
51f5				endm  
# End of macro CALLMONITOR
51f5					endif 
51f5			; TODO currently waits 
51f5 cd 89 79				call cinndb 
51f8					;call cin_wait 
51f8 6f					ld l, a 
51f9 26 00				ld h, 0 
51fb cd 70 1f				call forth_push_numhl 
51fe					NEXTW 
51fe cd a7 fd			call parse_vector 
5201 c3 53 23			jp macro_next 
5204				endm 
# End of macro NEXTW
5204			.KEYDB: 
5204				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
5204 3e				db WORD_SYS_CORE+42             
5205 39 52			dw .WAITK            
5207 06				db 5 + 1 
5208 .. 00			db "KEYDB",0              
520e				endm 
# End of macro CWHEAD
520e			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
520e			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
520e			; | | Can use something like this to process: 
520e			; | | > repeat active . key ?dup if emit then #1 until  
520e			 
520e					if DEBUG_FORTH_WORDS_KEY 
520e						DMARK "KEB" 
520e f5				push af  
520f 3a 23 52			ld a, (.dmark)  
5212 32 9d fd			ld (debug_mark),a  
5215 3a 24 52			ld a, (.dmark+1)  
5218 32 9e fd			ld (debug_mark+1),a  
521b 3a 25 52			ld a, (.dmark+2)  
521e 32 9f fd			ld (debug_mark+2),a  
5221 18 03			jr .pastdmark  
5223 ..			.dmark: db "KEB"  
5226 f1			.pastdmark: pop af  
5227			endm  
# End of macro DMARK
5227						CALLMONITOR 
5227 cd aa fd			call debug_vector  
522a				endm  
# End of macro CALLMONITOR
522a					endif 
522a			; TODO currently waits 
522a cd 76 79				call cin 
522d					;call cin_wait 
522d 6f					ld l, a 
522e 26 00				ld h, 0 
5230 cd 70 1f				call forth_push_numhl 
5233					NEXTW 
5233 cd a7 fd			call parse_vector 
5236 c3 53 23			jp macro_next 
5239				endm 
# End of macro NEXTW
5239			.WAITK: 
5239				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
5239 3f				db WORD_SYS_CORE+43             
523a 6e 52			dw .ACCEPT            
523c 06				db 5 + 1 
523d .. 00			db "WAITK",0              
5243				endm 
# End of macro CWHEAD
5243			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
5243					if DEBUG_FORTH_WORDS_KEY 
5243						DMARK "WAI" 
5243 f5				push af  
5244 3a 58 52			ld a, (.dmark)  
5247 32 9d fd			ld (debug_mark),a  
524a 3a 59 52			ld a, (.dmark+1)  
524d 32 9e fd			ld (debug_mark+1),a  
5250 3a 5a 52			ld a, (.dmark+2)  
5253 32 9f fd			ld (debug_mark+2),a  
5256 18 03			jr .pastdmark  
5258 ..			.dmark: db "WAI"  
525b f1			.pastdmark: pop af  
525c			endm  
# End of macro DMARK
525c						CALLMONITOR 
525c cd aa fd			call debug_vector  
525f				endm  
# End of macro CALLMONITOR
525f					endif 
525f cd 67 79				call cin_wait 
5262 6f					ld l, a 
5263 26 00				ld h, 0 
5265 cd 70 1f				call forth_push_numhl 
5268					NEXTW 
5268 cd a7 fd			call parse_vector 
526b c3 53 23			jp macro_next 
526e				endm 
# End of macro NEXTW
526e			.ACCEPT: 
526e				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
526e 40				db WORD_SYS_CORE+44             
526f ce 52			dw .EDIT            
5271 07				db 6 + 1 
5272 .. 00			db "ACCEPT",0              
5279				endm 
# End of macro CWHEAD
5279			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
5279					; TODO crashes on push 
5279					if DEBUG_FORTH_WORDS_KEY 
5279						DMARK "ACC" 
5279 f5				push af  
527a 3a 8e 52			ld a, (.dmark)  
527d 32 9d fd			ld (debug_mark),a  
5280 3a 8f 52			ld a, (.dmark+1)  
5283 32 9e fd			ld (debug_mark+1),a  
5286 3a 90 52			ld a, (.dmark+2)  
5289 32 9f fd			ld (debug_mark+2),a  
528c 18 03			jr .pastdmark  
528e ..			.dmark: db "ACC"  
5291 f1			.pastdmark: pop af  
5292			endm  
# End of macro DMARK
5292						CALLMONITOR 
5292 cd aa fd			call debug_vector  
5295				endm  
# End of macro CALLMONITOR
5295					endif 
5295 21 f1 f2				ld hl, os_input 
5298			;		ld a, 0 
5298 36 00				ld (hl),0 
529a 3a 90 f9				ld a,(f_cursor_ptr) 
529d 16 64				ld d, 100 
529f 0e 00				ld c, 0 
52a1 1e 28				ld e, 40 
52a3 cd d9 0f				call input_str 
52a6					; TODO perhaps do a type check and wrap in quotes if not a number 
52a6 21 f1 f2				ld hl, os_input 
52a9					if DEBUG_FORTH_WORDS 
52a9						DMARK "AC1" 
52a9 f5				push af  
52aa 3a be 52			ld a, (.dmark)  
52ad 32 9d fd			ld (debug_mark),a  
52b0 3a bf 52			ld a, (.dmark+1)  
52b3 32 9e fd			ld (debug_mark+1),a  
52b6 3a c0 52			ld a, (.dmark+2)  
52b9 32 9f fd			ld (debug_mark+2),a  
52bc 18 03			jr .pastdmark  
52be ..			.dmark: db "AC1"  
52c1 f1			.pastdmark: pop af  
52c2			endm  
# End of macro DMARK
52c2						CALLMONITOR 
52c2 cd aa fd			call debug_vector  
52c5				endm  
# End of macro CALLMONITOR
52c5					endif 
52c5 cd da 1f				call forth_push_str 
52c8					NEXTW 
52c8 cd a7 fd			call parse_vector 
52cb c3 53 23			jp macro_next 
52ce				endm 
# End of macro NEXTW
52ce			 
52ce			.EDIT: 
52ce				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
52ce 40				db WORD_SYS_CORE+44             
52cf 73 53			dw .DEDIT            
52d1 05				db 4 + 1 
52d2 .. 00			db "EDIT",0              
52d7				endm 
# End of macro CWHEAD
52d7			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
52d7			 
52d7					; TODO does not copy from stack 
52d7					if DEBUG_FORTH_WORDS_KEY 
52d7						DMARK "EDT" 
52d7 f5				push af  
52d8 3a ec 52			ld a, (.dmark)  
52db 32 9d fd			ld (debug_mark),a  
52de 3a ed 52			ld a, (.dmark+1)  
52e1 32 9e fd			ld (debug_mark+1),a  
52e4 3a ee 52			ld a, (.dmark+2)  
52e7 32 9f fd			ld (debug_mark+2),a  
52ea 18 03			jr .pastdmark  
52ec ..			.dmark: db "EDT"  
52ef f1			.pastdmark: pop af  
52f0			endm  
# End of macro DMARK
52f0						CALLMONITOR 
52f0 cd aa fd			call debug_vector  
52f3				endm  
# End of macro CALLMONITOR
52f3					endif 
52f3			 
52f3					;FORTH_DSP 
52f3					FORTH_DSP_VALUEHL 
52f3 cd 6c 21			call macro_dsp_valuehl 
52f6				endm 
# End of macro FORTH_DSP_VALUEHL
52f6			;		inc hl    ; TODO do type check 
52f6			 
52f6			;		call get_word_hl 
52f6 e5					push hl 
52f7					if DEBUG_FORTH_WORDS 
52f7						DMARK "EDp" 
52f7 f5				push af  
52f8 3a 0c 53			ld a, (.dmark)  
52fb 32 9d fd			ld (debug_mark),a  
52fe 3a 0d 53			ld a, (.dmark+1)  
5301 32 9e fd			ld (debug_mark+1),a  
5304 3a 0e 53			ld a, (.dmark+2)  
5307 32 9f fd			ld (debug_mark+2),a  
530a 18 03			jr .pastdmark  
530c ..			.dmark: db "EDp"  
530f f1			.pastdmark: pop af  
5310			endm  
# End of macro DMARK
5310						CALLMONITOR 
5310 cd aa fd			call debug_vector  
5313				endm  
# End of macro CALLMONITOR
5313					endif 
5313				;	ld a, 0 
5313 cd 04 13				call strlenz 
5316 23					inc hl 
5317			 
5317 06 00				ld b, 0 
5319 4d					ld c, l 
531a			 
531a e1					pop hl 
531b 11 f1 f2				ld de, os_input 
531e					if DEBUG_FORTH_WORDS_KEY 
531e						DMARK "EDc" 
531e f5				push af  
531f 3a 33 53			ld a, (.dmark)  
5322 32 9d fd			ld (debug_mark),a  
5325 3a 34 53			ld a, (.dmark+1)  
5328 32 9e fd			ld (debug_mark+1),a  
532b 3a 35 53			ld a, (.dmark+2)  
532e 32 9f fd			ld (debug_mark+2),a  
5331 18 03			jr .pastdmark  
5333 ..			.dmark: db "EDc"  
5336 f1			.pastdmark: pop af  
5337			endm  
# End of macro DMARK
5337						CALLMONITOR 
5337 cd aa fd			call debug_vector  
533a				endm  
# End of macro CALLMONITOR
533a					endif 
533a ed b0				ldir 
533c			 
533c			 
533c 21 f1 f2				ld hl, os_input 
533f					;ld a, 0 
533f					;ld (hl),a 
533f 3a 90 f9				ld a,(f_cursor_ptr) 
5342 16 64				ld d, 100 
5344 0e 00				ld c, 0 
5346 1e 28				ld e, 40 
5348 cd d9 0f				call input_str 
534b					; TODO perhaps do a type check and wrap in quotes if not a number 
534b 21 f1 f2				ld hl, os_input 
534e					if DEBUG_FORTH_WORDS 
534e						DMARK "ED1" 
534e f5				push af  
534f 3a 63 53			ld a, (.dmark)  
5352 32 9d fd			ld (debug_mark),a  
5355 3a 64 53			ld a, (.dmark+1)  
5358 32 9e fd			ld (debug_mark+1),a  
535b 3a 65 53			ld a, (.dmark+2)  
535e 32 9f fd			ld (debug_mark+2),a  
5361 18 03			jr .pastdmark  
5363 ..			.dmark: db "ED1"  
5366 f1			.pastdmark: pop af  
5367			endm  
# End of macro DMARK
5367						CALLMONITOR 
5367 cd aa fd			call debug_vector  
536a				endm  
# End of macro CALLMONITOR
536a					endif 
536a cd da 1f				call forth_push_str 
536d					NEXTW 
536d cd a7 fd			call parse_vector 
5370 c3 53 23			jp macro_next 
5373				endm 
# End of macro NEXTW
5373			 
5373			.DEDIT: 
5373				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
5373 40				db WORD_SYS_CORE+44             
5374 d8 53			dw .ENDKEY            
5376 06				db 5 + 1 
5377 .. 00			db "DEDIT",0              
537d				endm 
# End of macro CWHEAD
537d			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
537d			 
537d					; TODO does not copy from stack 
537d					if DEBUG_FORTH_WORDS_KEY 
537d						DMARK "DED" 
537d f5				push af  
537e 3a 92 53			ld a, (.dmark)  
5381 32 9d fd			ld (debug_mark),a  
5384 3a 93 53			ld a, (.dmark+1)  
5387 32 9e fd			ld (debug_mark+1),a  
538a 3a 94 53			ld a, (.dmark+2)  
538d 32 9f fd			ld (debug_mark+2),a  
5390 18 03			jr .pastdmark  
5392 ..			.dmark: db "DED"  
5395 f1			.pastdmark: pop af  
5396			endm  
# End of macro DMARK
5396						CALLMONITOR 
5396 cd aa fd			call debug_vector  
5399				endm  
# End of macro CALLMONITOR
5399					endif 
5399			 
5399					;FORTH_DSP 
5399					FORTH_DSP_VALUEHL 
5399 cd 6c 21			call macro_dsp_valuehl 
539c				endm 
# End of macro FORTH_DSP_VALUEHL
539c			;		inc hl    ; TODO do type check 
539c			 
539c			;		call get_word_hl 
539c e5					push hl 
539d e5					push hl 
539e					FORTH_DSP_POP 
539e cd 24 22			call macro_forth_dsp_pop 
53a1				endm 
# End of macro FORTH_DSP_POP
53a1 e1					pop hl 
53a2					if DEBUG_FORTH_WORDS 
53a2						DMARK "EDp" 
53a2 f5				push af  
53a3 3a b7 53			ld a, (.dmark)  
53a6 32 9d fd			ld (debug_mark),a  
53a9 3a b8 53			ld a, (.dmark+1)  
53ac 32 9e fd			ld (debug_mark+1),a  
53af 3a b9 53			ld a, (.dmark+2)  
53b2 32 9f fd			ld (debug_mark+2),a  
53b5 18 03			jr .pastdmark  
53b7 ..			.dmark: db "EDp"  
53ba f1			.pastdmark: pop af  
53bb			endm  
# End of macro DMARK
53bb						CALLMONITOR 
53bb cd aa fd			call debug_vector  
53be				endm  
# End of macro CALLMONITOR
53be					endif 
53be				;	ld a, 0 
53be cd 04 13				call strlenz 
53c1 23					inc hl 
53c2			 
53c2 06 00				ld b, 0 
53c4 4d					ld c, l 
53c5			 
53c5 e1					pop hl 
53c6			 
53c6					;ld a, 0 
53c6					;ld (hl),a 
53c6 3a 90 f9				ld a,(f_cursor_ptr) 
53c9 16 64				ld d, 100 
53cb 0e 00				ld c, 0 
53cd 1e 28				ld e, 40 
53cf cd d9 0f				call input_str 
53d2					; TODO perhaps do a type check and wrap in quotes if not a number 
53d2					NEXTW 
53d2 cd a7 fd			call parse_vector 
53d5 c3 53 23			jp macro_next 
53d8				endm 
# End of macro NEXTW
53d8			 
53d8			 
53d8			.ENDKEY: 
53d8			; eof 
53d8			 
# End of file forth_words_key.asm
53d8			include "forth_words_const.asm" 
53d8			 
53d8			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
53d8			 
53d8			 
53d8			.SPITIME: 
53d8				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
53d8 77				db WORD_SYS_CORE+99             
53d9 f0 53			dw .VA            
53db 08				db 7 + 1 
53dc .. 00			db "SPITIME",0              
53e4				endm 
# End of macro CWHEAD
53e4			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
53e4			; 
53e4			; | | If using BANK devices then leave as is. 
53e4			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
53e4			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
53e4			 
53e4 21 96 f9				ld hl, spi_clktime  
53e7 cd 70 1f				call forth_push_numhl 
53ea			 
53ea					NEXTW 
53ea cd a7 fd			call parse_vector 
53ed c3 53 23			jp macro_next 
53f0				endm 
# End of macro NEXTW
53f0			 
53f0			 
53f0			.VA: 
53f0				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
53f0 77				db WORD_SYS_CORE+99             
53f1 03 54			dw .SYMBOL            
53f3 03				db 2 + 1 
53f4 .. 00			db "VA",0              
53f7				endm 
# End of macro CWHEAD
53f7			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
53f7 21 5a f9				ld hl, cli_var_array 
53fa cd 70 1f				call forth_push_numhl 
53fd			 
53fd					NEXTW 
53fd cd a7 fd			call parse_vector 
5400 c3 53 23			jp macro_next 
5403				endm 
# End of macro NEXTW
5403			 
5403			.SYMBOL: 
5403				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
5403 77				db WORD_SYS_CORE+99             
5404 12 55			dw .ENDCONST            
5406 07				db 6 + 1 
5407 .. 00			db "SYMBOL",0              
540e				endm 
# End of macro CWHEAD
540e			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
540e			; | 
540e			; | | The value is the number reference and the final address is pushed to stack 
540e			 
540e			; | | ``` 
540e			; | | dw sym_table 
540e			; | | dw nmi_vector 
540e			; | | dw cli_autodisplay 
540e			; | | dw cli_data_sp 
540e			; | | dw cli_data_stack 
540e			; | | dw cli_loop_sp 
540e			; | | dw cli_loop_stack 
540e			; | | dw cli_var_array 
540e			; | | dw cursor_col 
540e			; | | dw cursor_ptr 
540e			; | | ; 10 
540e			; | | dw cursor_row 
540e			; | | dw debug_mark 
540e			; | | dw display_fb0 
540e			; | | dw display_fb1 
540e			; | | dw display_fb2 
540e			; | | dw display_fb3 
540e			; | | dw display_fb_active 
540e			; | | dw execscratch 
540e			; | | dw f_cursor_ptr 
540e			; | | dw hardware_word 
540e			; | | ;20 
540e			; | | dw input_at_cursor 
540e			; | | dw input_at_pos 
540e			; | | dw input_cur_flash 
540e			; | | dw input_cur_onoff 
540e			; | | dw input_cursor 
540e			; | | dw input_display_size 
540e			; | | dw input_len 
540e			; | | dw input_ptr 
540e			; | | dw input_size 
540e			; | | dw input_start 
540e			; | | ; 30 
540e			; | | dw input_str 
540e			; | | dw input_under_cursor 
540e			; | | dw os_cli_cmd 
540e			; | | dw os_cur_ptr 
540e			; | | dw os_current_i 
540e			; | | dw os_input 
540e			; | | dw os_last_cmd 
540e			; | | dw os_last_new_uword 
540e			; | | dw debug_vector 
540e			; | | dw os_view_hl 
540e			; | | ;40 
540e			; | | dw os_word_scratch 
540e			; | | dw portbctl 
540e			; | | dw portbdata 
540e			; | | dw spi_cartdev 
540e			; | | dw spi_cartdev2 
540e			; | | dw spi_clktime 
540e			; | | dw spi_device 
540e			; | | dw spi_device_id 
540e			; | | dw spi_portbyte 
540e			; | | dw stackstore 
540e			; | | ; 50 
540e			; | | if STORAGE_SE 
540e			; | | dw storage_actl 
540e			; | | dw storage_adata 
540e			; | | else 
540e			; | | dw 0 
540e			; | | dw 0 
540e			; | | endif 
540e			; | | dw storage_append 
540e			; | | if STORAGE_SE 
540e			; | | dw storage_bctl 
540e			; | | else 
540e			; | | dw 0 
540e			; | | endif 
540e			; | | dw store_bank_active 
540e			; | | dw store_filecache 
540e			; | | dw store_longread 
540e			; | | dw store_openaddr 
540e			; | | dw store_openext 
540e			; | | dw store_openmaxext 
540e			; | | ; 60 
540e			; | | dw store_page 
540e			; | | dw store_readbuf 
540e			; | | dw store_readcont 
540e			; | | dw store_readptr 
540e			; | | dw store_tmpext 
540e			; | | dw store_tmpid 
540e			; | | dw store_tmppageid 
540e			; | | dw malloc 
540e			; | | dw free 
540e			; | | dw cin 
540e			; | | ; 70 
540e			; | | dw cin_wait 
540e			; | | dw forth_push_numhl 
540e			; | | dw forth_push_str 
540e			; | | dw parse_vector 
540e			; | | ``` 
540e			 
540e					if DEBUG_FORTH_WORDS_KEY 
540e						DMARK "SYM" 
540e f5				push af  
540f 3a 23 54			ld a, (.dmark)  
5412 32 9d fd			ld (debug_mark),a  
5415 3a 24 54			ld a, (.dmark+1)  
5418 32 9e fd			ld (debug_mark+1),a  
541b 3a 25 54			ld a, (.dmark+2)  
541e 32 9f fd			ld (debug_mark+2),a  
5421 18 03			jr .pastdmark  
5423 ..			.dmark: db "SYM"  
5426 f1			.pastdmark: pop af  
5427			endm  
# End of macro DMARK
5427						CALLMONITOR 
5427 cd aa fd			call debug_vector  
542a				endm  
# End of macro CALLMONITOR
542a					endif 
542a			 
542a					FORTH_DSP_VALUEHL 
542a cd 6c 21			call macro_dsp_valuehl 
542d				endm 
# End of macro FORTH_DSP_VALUEHL
542d			 
542d 7d					ld a, l     
542e			 
542e			 
542e					if DEBUG_FORTH_WORDS 
542e						DMARK "SY1" 
542e f5				push af  
542f 3a 43 54			ld a, (.dmark)  
5432 32 9d fd			ld (debug_mark),a  
5435 3a 44 54			ld a, (.dmark+1)  
5438 32 9e fd			ld (debug_mark+1),a  
543b 3a 45 54			ld a, (.dmark+2)  
543e 32 9f fd			ld (debug_mark+2),a  
5441 18 03			jr .pastdmark  
5443 ..			.dmark: db "SY1"  
5446 f1			.pastdmark: pop af  
5447			endm  
# End of macro DMARK
5447						CALLMONITOR 
5447 cd aa fd			call debug_vector  
544a				endm  
# End of macro CALLMONITOR
544a					endif 
544a					 
544a f5					push af	 
544b					FORTH_DSP_POP 
544b cd 24 22			call macro_forth_dsp_pop 
544e				endm 
# End of macro FORTH_DSP_POP
544e f1					pop af 
544f			 
544f cb 27				sla a  
5451				 
5451					 
5451					if DEBUG_FORTH_WORDS 
5451						DMARK "SY" 
5451 f5				push af  
5452 3a 66 54			ld a, (.dmark)  
5455 32 9d fd			ld (debug_mark),a  
5458 3a 67 54			ld a, (.dmark+1)  
545b 32 9e fd			ld (debug_mark+1),a  
545e 3a 68 54			ld a, (.dmark+2)  
5461 32 9f fd			ld (debug_mark+2),a  
5464 18 02			jr .pastdmark  
5466 ..			.dmark: db "SY"  
5468 f1			.pastdmark: pop af  
5469			endm  
# End of macro DMARK
5469						CALLMONITOR 
5469 cd aa fd			call debug_vector  
546c				endm  
# End of macro CALLMONITOR
546c					endif 
546c			 
546c 21 7e 54				ld hl, sym_table 
546f cd ac 0f				call addatohl 
5472 cd d9 22				call loadwordinhl 
5475 cd 70 1f				call forth_push_numhl 
5478			 
5478			 
5478				       NEXTW 
5478 cd a7 fd			call parse_vector 
547b c3 53 23			jp macro_next 
547e				endm 
# End of macro NEXTW
547e			 
547e			sym_table: 
547e			 
547e			; 0 
547e 7e 54		dw sym_table 
5480 ad fd		dw nmi_vector 
5482 6e f9		dw cli_autodisplay 
5484 20 f9		dw cli_data_sp 
5486 5a f6		dw cli_data_stack 
5488 22 f9		dw cli_loop_sp 
548a 5c f8		dw cli_loop_stack 
548c 5a f9		dw cli_var_array 
548e f7 fa		dw cursor_col 
5490 f5 fa		dw cursor_ptr 
5492			; 10 
5492 f6 fa		dw cursor_row 
5494 9d fd		dw debug_mark 
5496 e3 fc		dw display_fb0 
5498 42 fc		dw display_fb1 
549a 00 fb		dw display_fb2 
549c a1 fb		dw display_fb3 
549e fe fa		dw display_fb_active 
54a0 f2 f1		dw execscratch 
54a2 90 f9		dw f_cursor_ptr 
54a4 b0 fd		dw hardware_word 
54a6			;20 
54a6 94 fd		dw input_at_cursor 
54a8 96 fd		dw input_at_pos 
54aa 92 fd		dw input_cur_flash 
54ac 91 fd		dw input_cur_onoff 
54ae 87 fd		dw input_cursor 
54b0 97 fd		dw input_display_size 
54b2 8c fd		dw input_len 
54b4 9b fd		dw input_ptr 
54b6 98 fd		dw input_size 
54b8 99 fd		dw input_start 
54ba			; 30 
54ba d9 0f		dw input_str 
54bc 95 fd		dw input_under_cursor 
54be 1a f4		dw os_cli_cmd 
54c0 16 f4		dw os_cur_ptr 
54c2 18 f4		dw os_current_i 
54c4 f1 f2		dw os_input 
54c6 19 f5		dw os_last_cmd 
54c8 f0 f3		dw os_last_new_uword 
54ca aa fd		dw debug_vector 
54cc d5 f0		dw os_view_hl 
54ce			;40 
54ce f8 f3		dw os_word_scratch 
54d0 c3 00		dw portbctl 
54d2 c1 00		dw portbdata 
54d4 95 f9		dw spi_cartdev 
54d6 94 f9		dw spi_cartdev2 
54d8 96 f9		dw spi_clktime 
54da 92 f9		dw spi_device 
54dc 91 f9		dw spi_device_id 
54de 93 f9		dw spi_portbyte 
54e0 d9 fa		dw stackstore 
54e2			; 50 
54e2			if STORAGE_SE 
54e2 82 00		dw storage_actl 
54e4 80 00		dw storage_adata 
54e6			else 
54e6			dw 0 
54e6			dw 0 
54e6			endif 
54e6 3b 0b		dw storage_append 
54e8			if STORAGE_SE 
54e8 83 00		dw storage_bctl 
54ea			else 
54ea			dw 0 
54ea			endif 
54ea c5 fa		dw store_bank_active 
54ec 99 f9		dw store_filecache 
54ee a7 f9		dw store_longread 
54f0 9d f9		dw store_openaddr 
54f2 9c f9		dw store_openext 
54f4 9b f9		dw store_openmaxext 
54f6			; 60 
54f6 ac f9		dw store_page 
54f8 a8 f9		dw store_readbuf 
54fa 9f f9		dw store_readcont 
54fc aa f9		dw store_readptr 
54fe 9f f9		dw store_tmpext 
5500 a0 f9		dw store_tmpid 
5502 97 f9		dw store_tmppageid 
5504 78 13		dw malloc 
5506 42 14		dw free 
5508 76 79		dw cin 
550a			; 70 
550a 67 79		dw cin_wait 
550c 70 1f		dw forth_push_numhl 
550e da 1f		dw forth_push_str 
5510 a7 fd		dw parse_vector 
5512			 
5512			.ENDCONST: 
5512			 
5512			; eof 
5512			 
5512			 
# End of file forth_words_const.asm
5512			 
5512			if STORAGE_SE 
5512			   	include "forth_words_storage.asm" 
5512			 
5512			; | ## Fixed Storage Words 
5512			 
5512			.RENAME: 
5512			  
5512				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
5512 3a				db WORD_SYS_CORE+38             
5513 0b 56			dw .RECORD            
5515 07				db 6 + 1 
5516 .. 00			db "RENAME",0              
551d				endm 
# End of macro CWHEAD
551d			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
551d			; | | > [!NOTE] 
551d			; | | > Compatible with PicoSPINet  
551d					if DEBUG_FORTH_WORDS_KEY 
551d						DMARK "REN" 
551d f5				push af  
551e 3a 32 55			ld a, (.dmark)  
5521 32 9d fd			ld (debug_mark),a  
5524 3a 33 55			ld a, (.dmark+1)  
5527 32 9e fd			ld (debug_mark+1),a  
552a 3a 34 55			ld a, (.dmark+2)  
552d 32 9f fd			ld (debug_mark+2),a  
5530 18 03			jr .pastdmark  
5532 ..			.dmark: db "REN"  
5535 f1			.pastdmark: pop af  
5536			endm  
# End of macro DMARK
5536						CALLMONITOR 
5536 cd aa fd			call debug_vector  
5539				endm  
# End of macro CALLMONITOR
5539					endif 
5539			 
5539			 
5539					; preserve some internal vars used by other file handing routines 
5539			 
5539 2a 9d f9				ld hl, (store_openaddr) 
553c e5					push hl 
553d 3a 9f f9				ld a, (store_readcont) 
5540 f5					push af 
5541			 
5541					FORTH_DSP_VALUEHL 
5541 cd 6c 21			call macro_dsp_valuehl 
5544				endm 
# End of macro FORTH_DSP_VALUEHL
5544			 
5544					; move ext and id around for the file header 
5544			 
5544 65					ld h, l 
5545 2e 00				ld l, 0 
5547			 
5547 e5					push hl    ; id 
5548			 
5548					FORTH_DSP_POP 
5548 cd 24 22			call macro_forth_dsp_pop 
554b				endm 
# End of macro FORTH_DSP_POP
554b			 
554b					; Locate the file header 
554b			 
554b e1					pop hl 
554c e5					push hl 
554d 11 ac f9				ld de, store_page      ; get block zero of file 
5550					if DEBUG_FORTH_WORDS 
5550						DMARK "REr" 
5550 f5				push af  
5551 3a 65 55			ld a, (.dmark)  
5554 32 9d fd			ld (debug_mark),a  
5557 3a 66 55			ld a, (.dmark+1)  
555a 32 9e fd			ld (debug_mark+1),a  
555d 3a 67 55			ld a, (.dmark+2)  
5560 32 9f fd			ld (debug_mark+2),a  
5563 18 03			jr .pastdmark  
5565 ..			.dmark: db "REr"  
5568 f1			.pastdmark: pop af  
5569			endm  
# End of macro DMARK
5569						CALLMONITOR 
5569 cd aa fd			call debug_vector  
556c				endm  
# End of macro CALLMONITOR
556c					endif 
556c cd a7 09				call storage_read 
556f			 
556f cd d5 0f			call ishlzero 
5572 20 05			jr nz, .rnfound 
5574			 
5574				; file does not exist so indicate with 255 extents in use 
5574			 
5574 3e ff			ld a, 255 
5576 e1				pop hl ; clear dup hl 
5577 18 7b			jr .skiprneof 
5579			 
5579			 
5579			.rnfound: 
5579					; file found so rename 
5579			 
5579					FORTH_DSP_VALUEHL 
5579 cd 6c 21			call macro_dsp_valuehl 
557c				endm 
# End of macro FORTH_DSP_VALUEHL
557c			 
557c e5				push hl 
557d 3e 00			ld a, 0 
557f cd 0f 13			call strlent 
5582 23				inc hl   ; cover zero term 
5583 06 00			ld b,0 
5585 4d				ld c,l 
5586 e1				pop hl 
5587 11 af f9				ld de, store_page + 3 
558a ed b0				ldir 
558c			 
558c 11 ac f9				ld de, store_page 
558f					if DEBUG_FORTH_WORDS 
558f						DMARK "RER" 
558f f5				push af  
5590 3a a4 55			ld a, (.dmark)  
5593 32 9d fd			ld (debug_mark),a  
5596 3a a5 55			ld a, (.dmark+1)  
5599 32 9e fd			ld (debug_mark+1),a  
559c 3a a6 55			ld a, (.dmark+2)  
559f 32 9f fd			ld (debug_mark+2),a  
55a2 18 03			jr .pastdmark  
55a4 ..			.dmark: db "RER"  
55a7 f1			.pastdmark: pop af  
55a8			endm  
# End of macro DMARK
55a8						CALLMONITOR 
55a8 cd aa fd			call debug_vector  
55ab				endm  
# End of macro CALLMONITOR
55ab					endif 
55ab			 
55ab e1					pop hl    ; get orig file id and mangle it for find id 
55ac 55					ld d, l 
55ad 5c					ld e, h 
55ae			 
55ae 21 00 00				ld hl, 0 
55b1					if DEBUG_FORTH_WORDS 
55b1						DMARK "REf" 
55b1 f5				push af  
55b2 3a c6 55			ld a, (.dmark)  
55b5 32 9d fd			ld (debug_mark),a  
55b8 3a c7 55			ld a, (.dmark+1)  
55bb 32 9e fd			ld (debug_mark+1),a  
55be 3a c8 55			ld a, (.dmark+2)  
55c1 32 9f fd			ld (debug_mark+2),a  
55c4 18 03			jr .pastdmark  
55c6 ..			.dmark: db "REf"  
55c9 f1			.pastdmark: pop af  
55ca			endm  
# End of macro DMARK
55ca						CALLMONITOR 
55ca cd aa fd			call debug_vector  
55cd				endm  
# End of macro CALLMONITOR
55cd					endif 
55cd cd 83 07				call storage_findnextid 
55d0 11 ac f9				ld de, store_page 
55d3					if DEBUG_FORTH_WORDS 
55d3						DMARK "REw" 
55d3 f5				push af  
55d4 3a e8 55			ld a, (.dmark)  
55d7 32 9d fd			ld (debug_mark),a  
55da 3a e9 55			ld a, (.dmark+1)  
55dd 32 9e fd			ld (debug_mark+1),a  
55e0 3a ea 55			ld a, (.dmark+2)  
55e3 32 9f fd			ld (debug_mark+2),a  
55e6 18 03			jr .pastdmark  
55e8 ..			.dmark: db "REw"  
55eb f1			.pastdmark: pop af  
55ec			endm  
# End of macro DMARK
55ec						CALLMONITOR 
55ec cd aa fd			call debug_vector  
55ef				endm  
# End of macro CALLMONITOR
55ef					endif 
55ef cd bc 04				call storage_write_block 
55f2			 
55f2 3e 00				ld a, 0 
55f4			.skiprneof: 
55f4					; drop file name 
55f4					FORTH_DSP_POP 
55f4 cd 24 22			call macro_forth_dsp_pop 
55f7				endm 
# End of macro FORTH_DSP_POP
55f7			 
55f7 6f					ld l, a 
55f8 26 00				ld h, 0 
55fa cd 70 1f				call forth_push_numhl 
55fd			 
55fd			 
55fd f1					pop af 
55fe 32 9f f9				ld (store_readcont),a 
5601 e1					pop hl 
5602 22 9d f9				ld (store_openaddr), hl 
5605						 
5605				NEXTW 
5605 cd a7 fd			call parse_vector 
5608 c3 53 23			jp macro_next 
560b				endm 
# End of macro NEXTW
560b			.RECORD: 
560b			  
560b				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
560b 3a				db WORD_SYS_CORE+38             
560c b5 56			dw .BREAD            
560e 07				db 6 + 1 
560f .. 00			db "RECORD",0              
5616				endm 
# End of macro CWHEAD
5616			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
5616			; | | > [!NOTE] 
5616			; | | > Compatible with PicoSPINet  
5616			 
5616					if DEBUG_FORTH_WORDS_KEY 
5616						DMARK "REC" 
5616 f5				push af  
5617 3a 2b 56			ld a, (.dmark)  
561a 32 9d fd			ld (debug_mark),a  
561d 3a 2c 56			ld a, (.dmark+1)  
5620 32 9e fd			ld (debug_mark+1),a  
5623 3a 2d 56			ld a, (.dmark+2)  
5626 32 9f fd			ld (debug_mark+2),a  
5629 18 03			jr .pastdmark  
562b ..			.dmark: db "REC"  
562e f1			.pastdmark: pop af  
562f			endm  
# End of macro DMARK
562f						CALLMONITOR 
562f cd aa fd			call debug_vector  
5632				endm  
# End of macro CALLMONITOR
5632					endif 
5632			 
5632					FORTH_DSP_VALUEHL 
5632 cd 6c 21			call macro_dsp_valuehl 
5635				endm 
# End of macro FORTH_DSP_VALUEHL
5635			 
5635 e5					push hl    ; id 
5636			 
5636					FORTH_DSP_POP 
5636 cd 24 22			call macro_forth_dsp_pop 
5639				endm 
# End of macro FORTH_DSP_POP
5639			 
5639					FORTH_DSP_VALUEHL 
5639 cd 6c 21			call macro_dsp_valuehl 
563c				endm 
# End of macro FORTH_DSP_VALUEHL
563c			 
563c					FORTH_DSP_POP 
563c cd 24 22			call macro_forth_dsp_pop 
563f				endm 
# End of macro FORTH_DSP_POP
563f			 
563f d1					pop de     ; get file id 
5640			 
5640					; e = file id 
5640					; l = file extent 
5640			 
5640			 
5640					; construct request to access file extent 
5640			 
5640			;		ld a, e 
5640 63					ld h, e 
5641					 
5641					 
5641					 
5641			 
5641					; e has id 
5641			 
5641 11 ac f9			ld de, store_page 
5644					if DEBUG_FORTH_WORDS 
5644						DMARK "REr" 
5644 f5				push af  
5645 3a 59 56			ld a, (.dmark)  
5648 32 9d fd			ld (debug_mark),a  
564b 3a 5a 56			ld a, (.dmark+1)  
564e 32 9e fd			ld (debug_mark+1),a  
5651 3a 5b 56			ld a, (.dmark+2)  
5654 32 9f fd			ld (debug_mark+2),a  
5657 18 03			jr .pastdmark  
5659 ..			.dmark: db "REr"  
565c f1			.pastdmark: pop af  
565d			endm  
# End of macro DMARK
565d						CALLMONITOR 
565d cd aa fd			call debug_vector  
5660				endm  
# End of macro CALLMONITOR
5660					endif 
5660 cd a7 09				call storage_read 
5663 cd d5 0f			call ishlzero 
5666 28 25			jr z, .recnotfound 
5668			 
5668			 
5668					if DEBUG_FORTH_WORDS 
5668						DMARK "REe" 
5668 f5				push af  
5669 3a 7d 56			ld a, (.dmark)  
566c 32 9d fd			ld (debug_mark),a  
566f 3a 7e 56			ld a, (.dmark+1)  
5672 32 9e fd			ld (debug_mark+1),a  
5675 3a 7f 56			ld a, (.dmark+2)  
5678 32 9f fd			ld (debug_mark+2),a  
567b 18 03			jr .pastdmark  
567d ..			.dmark: db "REe"  
5680 f1			.pastdmark: pop af  
5681			endm  
# End of macro DMARK
5681						CALLMONITOR 
5681 cd aa fd			call debug_vector  
5684				endm  
# End of macro CALLMONITOR
5684					endif 
5684 cd da 1f			call forth_push_str 
5687			 
5687					NEXTW 
5687 cd a7 fd			call parse_vector 
568a c3 53 23			jp macro_next 
568d				endm 
# End of macro NEXTW
568d			 
568d			.recnotfound: 
568d					if DEBUG_FORTH_WORDS 
568d						DMARK "REf" 
568d f5				push af  
568e 3a a2 56			ld a, (.dmark)  
5691 32 9d fd			ld (debug_mark),a  
5694 3a a3 56			ld a, (.dmark+1)  
5697 32 9e fd			ld (debug_mark+1),a  
569a 3a a4 56			ld a, (.dmark+2)  
569d 32 9f fd			ld (debug_mark+2),a  
56a0 18 03			jr .pastdmark  
56a2 ..			.dmark: db "REf"  
56a5 f1			.pastdmark: pop af  
56a6			endm  
# End of macro DMARK
56a6						CALLMONITOR 
56a6 cd aa fd			call debug_vector  
56a9				endm  
# End of macro CALLMONITOR
56a9					endif 
56a9 21 ff 00			ld hl, 255 
56ac cd 70 1f			call forth_push_numhl 
56af				NEXTW 
56af cd a7 fd			call parse_vector 
56b2 c3 53 23			jp macro_next 
56b5				endm 
# End of macro NEXTW
56b5			 
56b5			 
56b5			.BREAD: 
56b5			  
56b5				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
56b5 3a				db WORD_SYS_CORE+38             
56b6 3b 57			dw .BWRITE            
56b8 06				db 5 + 1 
56b9 .. 00			db "BREAD",0              
56bf				endm 
# End of macro CWHEAD
56bf			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
56bf			; | | > [!NOTE] 
56bf			; | | > Compatible with PicoSPINet  
56bf				 
56bf					if DEBUG_FORTH_WORDS_KEY 
56bf						DMARK "BRD" 
56bf f5				push af  
56c0 3a d4 56			ld a, (.dmark)  
56c3 32 9d fd			ld (debug_mark),a  
56c6 3a d5 56			ld a, (.dmark+1)  
56c9 32 9e fd			ld (debug_mark+1),a  
56cc 3a d6 56			ld a, (.dmark+2)  
56cf 32 9f fd			ld (debug_mark+2),a  
56d2 18 03			jr .pastdmark  
56d4 ..			.dmark: db "BRD"  
56d7 f1			.pastdmark: pop af  
56d8			endm  
# End of macro DMARK
56d8						CALLMONITOR 
56d8 cd aa fd			call debug_vector  
56db				endm  
# End of macro CALLMONITOR
56db					endif 
56db			 
56db				FORTH_DSP_VALUEHL 
56db cd 6c 21			call macro_dsp_valuehl 
56de				endm 
# End of macro FORTH_DSP_VALUEHL
56de			 
56de				FORTH_DSP_POP 
56de cd 24 22			call macro_forth_dsp_pop 
56e1				endm 
# End of macro FORTH_DSP_POP
56e1			 
56e1				; calc block address 
56e1			 
56e1 eb				ex de, hl 
56e2 3e 40			ld a, STORE_BLOCK_PHY 
56e4 cd 2f 0f			call Mult16 
56e7			 
56e7			 
56e7 11 ac f9			ld de, store_page 
56ea			 
56ea					if DEBUG_FORTH_WORDS 
56ea						DMARK "BR1" 
56ea f5				push af  
56eb 3a ff 56			ld a, (.dmark)  
56ee 32 9d fd			ld (debug_mark),a  
56f1 3a 00 57			ld a, (.dmark+1)  
56f4 32 9e fd			ld (debug_mark+1),a  
56f7 3a 01 57			ld a, (.dmark+2)  
56fa 32 9f fd			ld (debug_mark+2),a  
56fd 18 03			jr .pastdmark  
56ff ..			.dmark: db "BR1"  
5702 f1			.pastdmark: pop af  
5703			endm  
# End of macro DMARK
5703						CALLMONITOR 
5703 cd aa fd			call debug_vector  
5706				endm  
# End of macro CALLMONITOR
5706					endif 
5706			 
5706 cd 57 04			call storage_read_block 
5709			 
5709 cd d5 0f			call ishlzero 
570c 20 05			jr nz, .brfound 
570e			 
570e cd 70 1f			call forth_push_numhl 
5711 18 22			jr .brdone 
5713			 
5713			 
5713			.brfound: 
5713 21 ae f9		        ld hl, store_page+2 
5716			 
5716					if DEBUG_FORTH_WORDS 
5716						DMARK "BR2" 
5716 f5				push af  
5717 3a 2b 57			ld a, (.dmark)  
571a 32 9d fd			ld (debug_mark),a  
571d 3a 2c 57			ld a, (.dmark+1)  
5720 32 9e fd			ld (debug_mark+1),a  
5723 3a 2d 57			ld a, (.dmark+2)  
5726 32 9f fd			ld (debug_mark+2),a  
5729 18 03			jr .pastdmark  
572b ..			.dmark: db "BR2"  
572e f1			.pastdmark: pop af  
572f			endm  
# End of macro DMARK
572f						CALLMONITOR 
572f cd aa fd			call debug_vector  
5732				endm  
# End of macro CALLMONITOR
5732					endif 
5732			 
5732 cd da 1f			call forth_push_str 
5735			 
5735			 
5735			.brdone: 
5735			 
5735					NEXTW 
5735 cd a7 fd			call parse_vector 
5738 c3 53 23			jp macro_next 
573b				endm 
# End of macro NEXTW
573b			.BWRITE: 
573b				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
573b 3a				db WORD_SYS_CORE+38             
573c d3 57			dw .BUPD            
573e 07				db 6 + 1 
573f .. 00			db "BWRITE",0              
5746				endm 
# End of macro CWHEAD
5746			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
5746			; | | > [!NOTE] 
5746			; | | > Compatible with PicoSPINet  
5746			 
5746					if DEBUG_FORTH_WORDS_KEY 
5746						DMARK "BWR" 
5746 f5				push af  
5747 3a 5b 57			ld a, (.dmark)  
574a 32 9d fd			ld (debug_mark),a  
574d 3a 5c 57			ld a, (.dmark+1)  
5750 32 9e fd			ld (debug_mark+1),a  
5753 3a 5d 57			ld a, (.dmark+2)  
5756 32 9f fd			ld (debug_mark+2),a  
5759 18 03			jr .pastdmark  
575b ..			.dmark: db "BWR"  
575e f1			.pastdmark: pop af  
575f			endm  
# End of macro DMARK
575f						CALLMONITOR 
575f cd aa fd			call debug_vector  
5762				endm  
# End of macro CALLMONITOR
5762					endif 
5762			 
5762				FORTH_DSP_VALUEHL 
5762 cd 6c 21			call macro_dsp_valuehl 
5765				endm 
# End of macro FORTH_DSP_VALUEHL
5765			 
5765				; calc block address 
5765			 
5765 eb				ex de, hl 
5766 3e 40			ld a, STORE_BLOCK_PHY 
5768 cd 2f 0f			call Mult16 
576b			 
576b e5				push hl         ; address 
576c			 
576c				FORTH_DSP_POP 
576c cd 24 22			call macro_forth_dsp_pop 
576f				endm 
# End of macro FORTH_DSP_POP
576f			 
576f				FORTH_DSP_VALUEHL 
576f cd 6c 21			call macro_dsp_valuehl 
5772				endm 
# End of macro FORTH_DSP_VALUEHL
5772			 
5772				FORTH_DSP_POP 
5772 cd 24 22			call macro_forth_dsp_pop 
5775				endm 
# End of macro FORTH_DSP_POP
5775			 
5775 cd 84 0c			call storage_clear_page 
5778			 
5778				; copy string to store page 
5778			 
5778 e5				push hl     ; save string address 
5779			 
5779 3e 00			ld a, 0 
577b cd 0f 13			call strlent 
577e			 
577e 23				inc hl 
577f			 
577f 4d				ld c, l 
5780 06 00			ld b, 0 
5782			 
5782 e1				pop hl 
5783 11 ae f9			ld de, store_page + 2 
5786					if DEBUG_FORTH_WORDS 
5786						DMARK "BW1" 
5786 f5				push af  
5787 3a 9b 57			ld a, (.dmark)  
578a 32 9d fd			ld (debug_mark),a  
578d 3a 9c 57			ld a, (.dmark+1)  
5790 32 9e fd			ld (debug_mark+1),a  
5793 3a 9d 57			ld a, (.dmark+2)  
5796 32 9f fd			ld (debug_mark+2),a  
5799 18 03			jr .pastdmark  
579b ..			.dmark: db "BW1"  
579e f1			.pastdmark: pop af  
579f			endm  
# End of macro DMARK
579f						CALLMONITOR 
579f cd aa fd			call debug_vector  
57a2				endm  
# End of macro CALLMONITOR
57a2					endif 
57a2 ed b0			ldir 
57a4			 
57a4			 
57a4				; poke the start of the block with flags to prevent high level file ops hitting the block 
57a4			 
57a4 21 ff ff			ld hl, $ffff 
57a7			 
57a7 22 ac f9			ld (store_page), hl	 
57aa				 
57aa e1				pop hl    ; get address 
57ab 11 ac f9			ld de, store_page 
57ae			 
57ae					if DEBUG_FORTH_WORDS 
57ae						DMARK "BW2" 
57ae f5				push af  
57af 3a c3 57			ld a, (.dmark)  
57b2 32 9d fd			ld (debug_mark),a  
57b5 3a c4 57			ld a, (.dmark+1)  
57b8 32 9e fd			ld (debug_mark+1),a  
57bb 3a c5 57			ld a, (.dmark+2)  
57be 32 9f fd			ld (debug_mark+2),a  
57c1 18 03			jr .pastdmark  
57c3 ..			.dmark: db "BW2"  
57c6 f1			.pastdmark: pop af  
57c7			endm  
# End of macro DMARK
57c7						CALLMONITOR 
57c7 cd aa fd			call debug_vector  
57ca				endm  
# End of macro CALLMONITOR
57ca					endif 
57ca			 
57ca cd bc 04			call storage_write_block 
57cd			 
57cd					NEXTW 
57cd cd a7 fd			call parse_vector 
57d0 c3 53 23			jp macro_next 
57d3				endm 
# End of macro NEXTW
57d3			 
57d3			.BUPD: 
57d3				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
57d3 3a				db WORD_SYS_CORE+38             
57d4 2c 58			dw .BYID            
57d6 05				db 4 + 1 
57d7 .. 00			db "BUPD",0              
57dc				endm 
# End of macro CWHEAD
57dc			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
57dc			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
57dc			; | | or completely different file system structure. 
57dc			; | | > [!NOTE] 
57dc			; | | > Compatible with PicoSPINet  
57dc			 
57dc					if DEBUG_FORTH_WORDS_KEY 
57dc						DMARK "BUD" 
57dc f5				push af  
57dd 3a f1 57			ld a, (.dmark)  
57e0 32 9d fd			ld (debug_mark),a  
57e3 3a f2 57			ld a, (.dmark+1)  
57e6 32 9e fd			ld (debug_mark+1),a  
57e9 3a f3 57			ld a, (.dmark+2)  
57ec 32 9f fd			ld (debug_mark+2),a  
57ef 18 03			jr .pastdmark  
57f1 ..			.dmark: db "BUD"  
57f4 f1			.pastdmark: pop af  
57f5			endm  
# End of macro DMARK
57f5						CALLMONITOR 
57f5 cd aa fd			call debug_vector  
57f8				endm  
# End of macro CALLMONITOR
57f8					endif 
57f8			 
57f8				FORTH_DSP_VALUEHL 
57f8 cd 6c 21			call macro_dsp_valuehl 
57fb				endm 
# End of macro FORTH_DSP_VALUEHL
57fb			 
57fb				; calc block address 
57fb			 
57fb eb				ex de, hl 
57fc 3e 40			ld a, STORE_BLOCK_PHY 
57fe cd 2f 0f			call Mult16 
5801			 
5801				FORTH_DSP_POP 
5801 cd 24 22			call macro_forth_dsp_pop 
5804				endm 
# End of macro FORTH_DSP_POP
5804			 
5804			 
5804 11 ac f9			ld de, store_page 
5807			 
5807					if DEBUG_FORTH_WORDS 
5807						DMARK "BUe" 
5807 f5				push af  
5808 3a 1c 58			ld a, (.dmark)  
580b 32 9d fd			ld (debug_mark),a  
580e 3a 1d 58			ld a, (.dmark+1)  
5811 32 9e fd			ld (debug_mark+1),a  
5814 3a 1e 58			ld a, (.dmark+2)  
5817 32 9f fd			ld (debug_mark+2),a  
581a 18 03			jr .pastdmark  
581c ..			.dmark: db "BUe"  
581f f1			.pastdmark: pop af  
5820			endm  
# End of macro DMARK
5820						CALLMONITOR 
5820 cd aa fd			call debug_vector  
5823				endm  
# End of macro CALLMONITOR
5823					endif 
5823			 
5823 cd bc 04			call storage_write_block 
5826			 
5826					NEXTW 
5826 cd a7 fd			call parse_vector 
5829 c3 53 23			jp macro_next 
582c				endm 
# End of macro NEXTW
582c			 
582c			.BYID: 
582c			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
582c			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
582c			; 
582c			;		 
582c			;		if DEBUG_FORTH_WORDS_KEY 
582c			;			DMARK "BYID" 
582c			;			CALLMONITOR 
582c			;		endif 
582c			; 
582c			;		; get direct address 
582c			; 
582c			;		FORTH_DSP_VALUEHL 
582c			; 
582c			;		FORTH_DSP_POP 
582c			; 
582c			;	; calc block address 
582c			; 
582c			;	ex de, hl 
582c			;	ld a, STORE_BLOCK_PHY 
582c			;	call Mult16 
582c			;	;	do BREAD with number as param 
582c			;	; push the file name	 
582c			;	ld de, store_page 
582c			;	call storage_read_block 
582c			 ;       ld hl, store_page+2 
582c			; 
582c			; 
582c			;		NEXTW 
582c			;.BYNAME: 
582c				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
582c 3a				db WORD_SYS_CORE+38             
582d 48 58			dw .DIR            
582f 06				db 5 + 1 
5830 .. 00			db "GETID",0              
5836				endm 
# End of macro CWHEAD
5836			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
5836			; | | > [!NOTE] 
5836			; | | > Compatible with PicoSPINet  
5836			 
5836					; get pointer to file name to seek 
5836			 
5836					FORTH_DSP_VALUEHL 
5836 cd 6c 21			call macro_dsp_valuehl 
5839				endm 
# End of macro FORTH_DSP_VALUEHL
5839			 
5839			 
5839 cd 7e 03				call storage_getid  
583c			 
583c					FORTH_DSP_POP 
583c cd 24 22			call macro_forth_dsp_pop 
583f				endm 
# End of macro FORTH_DSP_POP
583f			 
583f cd 70 1f				call forth_push_numhl 
5842			 
5842					NEXTW 
5842 cd a7 fd			call parse_vector 
5845 c3 53 23			jp macro_next 
5848				endm 
# End of macro NEXTW
5848			; 
5848			.DIR: 
5848				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
5848 3a				db WORD_SYS_CORE+38             
5849 4f 59			dw .SAVE            
584b 04				db 3 + 1 
584c .. 00			db "DIR",0              
5850				endm 
# End of macro CWHEAD
5850			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
5850			; | | > [!NOTE] 
5850			; | | > Compatible with PicoSPINet  
5850			 
5850					if DEBUG_FORTH_WORDS_KEY 
5850						DMARK "DIR" 
5850 f5				push af  
5851 3a 65 58			ld a, (.dmark)  
5854 32 9d fd			ld (debug_mark),a  
5857 3a 66 58			ld a, (.dmark+1)  
585a 32 9e fd			ld (debug_mark+1),a  
585d 3a 67 58			ld a, (.dmark+2)  
5860 32 9f fd			ld (debug_mark+2),a  
5863 18 03			jr .pastdmark  
5865 ..			.dmark: db "DIR"  
5868 f1			.pastdmark: pop af  
5869			endm  
# End of macro DMARK
5869						CALLMONITOR 
5869 cd aa fd			call debug_vector  
586c				endm  
# End of macro CALLMONITOR
586c					endif 
586c cd 05 05			call storage_get_block_0 
586f			 
586f 21 ac f9			ld hl, store_page     ; get current id count 
5872 46				ld b, (hl) 
5873 0e 00			ld c, 0    ; count of files   
5875					if DEBUG_FORTH_WORDS 
5875						DMARK "DI1" 
5875 f5				push af  
5876 3a 8a 58			ld a, (.dmark)  
5879 32 9d fd			ld (debug_mark),a  
587c 3a 8b 58			ld a, (.dmark+1)  
587f 32 9e fd			ld (debug_mark+1),a  
5882 3a 8c 58			ld a, (.dmark+2)  
5885 32 9f fd			ld (debug_mark+2),a  
5888 18 03			jr .pastdmark  
588a ..			.dmark: db "DI1"  
588d f1			.pastdmark: pop af  
588e			endm  
# End of macro DMARK
588e						CALLMONITOR 
588e cd aa fd			call debug_vector  
5891				endm  
# End of macro CALLMONITOR
5891					endif 
5891			 
5891				; check for empty drive 
5891			 
5891 3e 00			ld a, 0 
5893 b8				cp b 
5894 ca 02 59			jp z, .dirdone 
5897			 
5897				; for each of the current ids do a search for them and if found push to stack 
5897			 
5897 c5			.diritem:	push bc 
5898 21 40 00				ld hl, STORE_BLOCK_PHY 
589b 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
589d 58					ld e,b 
589e			 
589e			;		if DEBUG_FORTH_WORDS 
589e			;			DMARK "DI2" 
589e			;			CALLMONITOR 
589e			;		endif 
589e			 
589e cd 83 07				call storage_findnextid 
58a1			 
58a1			;		if DEBUG_FORTH_WORDS 
58a1			;			DMARK "DI3" 
58a1			;			CALLMONITOR 
58a1			;		endif 
58a1			 
58a1					; if found hl will be non zero 
58a1			 
58a1 cd d5 0f				call ishlzero 
58a4			;		ld a, l 
58a4			;		add h 
58a4			; 
58a4			;		cp 0 
58a4 28 59				jr z, .dirnotfound 
58a6			 
58a6					; increase count 
58a6			 
58a6 c1					pop bc	 
58a7 0c					inc c 
58a8 c5					push bc 
58a9					 
58a9			 
58a9					; get file header and push the file name 
58a9			 
58a9 11 ac f9				ld de, store_page 
58ac cd 57 04				call storage_read_block 
58af			 
58af					; push file id to stack 
58af				 
58af 3a ac f9				ld a, (store_page) 
58b2 26 00				ld h, 0 
58b4 6f					ld l, a 
58b5 cd 70 1f				call forth_push_numhl 
58b8			 
58b8					; push extent count to stack  
58b8				 
58b8 3a ae f9				ld a, (store_page+2) 
58bb 26 00				ld h, 0 
58bd 6f					ld l, a 
58be cd 70 1f				call forth_push_numhl 
58c1			 
58c1					; push file name 
58c1			 
58c1 21 af f9				ld hl, store_page+3 
58c4					if DEBUG_FORTH_WORDS 
58c4						DMARK "DI5" 
58c4 f5				push af  
58c5 3a d9 58			ld a, (.dmark)  
58c8 32 9d fd			ld (debug_mark),a  
58cb 3a da 58			ld a, (.dmark+1)  
58ce 32 9e fd			ld (debug_mark+1),a  
58d1 3a db 58			ld a, (.dmark+2)  
58d4 32 9f fd			ld (debug_mark+2),a  
58d7 18 03			jr .pastdmark  
58d9 ..			.dmark: db "DI5"  
58dc f1			.pastdmark: pop af  
58dd			endm  
# End of macro DMARK
58dd						CALLMONITOR 
58dd cd aa fd			call debug_vector  
58e0				endm  
# End of macro CALLMONITOR
58e0					endif 
58e0 cd da 1f				call forth_push_str 
58e3					if DEBUG_FORTH_WORDS 
58e3						DMARK "DI6" 
58e3 f5				push af  
58e4 3a f8 58			ld a, (.dmark)  
58e7 32 9d fd			ld (debug_mark),a  
58ea 3a f9 58			ld a, (.dmark+1)  
58ed 32 9e fd			ld (debug_mark+1),a  
58f0 3a fa 58			ld a, (.dmark+2)  
58f3 32 9f fd			ld (debug_mark+2),a  
58f6 18 03			jr .pastdmark  
58f8 ..			.dmark: db "DI6"  
58fb f1			.pastdmark: pop af  
58fc			endm  
# End of macro DMARK
58fc						CALLMONITOR 
58fc cd aa fd			call debug_vector  
58ff				endm  
# End of macro CALLMONITOR
58ff					endif 
58ff			.dirnotfound: 
58ff c1					pop bc     
5900 10 95				djnz .diritem 
5902				 
5902			.dirdone:	 
5902					if DEBUG_FORTH_WORDS 
5902						DMARK "DI7" 
5902 f5				push af  
5903 3a 17 59			ld a, (.dmark)  
5906 32 9d fd			ld (debug_mark),a  
5909 3a 18 59			ld a, (.dmark+1)  
590c 32 9e fd			ld (debug_mark+1),a  
590f 3a 19 59			ld a, (.dmark+2)  
5912 32 9f fd			ld (debug_mark+2),a  
5915 18 03			jr .pastdmark  
5917 ..			.dmark: db "DI7"  
591a f1			.pastdmark: pop af  
591b			endm  
# End of macro DMARK
591b						CALLMONITOR 
591b cd aa fd			call debug_vector  
591e				endm  
# End of macro CALLMONITOR
591e					endif 
591e			 
591e					; push a count of the dir items found 
591e			 
591e 26 00				ld h, 0 
5920 69					ld l, c 
5921 cd 70 1f				call forth_push_numhl 
5924			 
5924					; push the bank label 
5924			 
5924 cd 05 05				call storage_get_block_0 
5927			 
5927				 
5927 21 af f9		 		ld hl, store_page+3 
592a			 
592a					if DEBUG_FORTH_WORDS 
592a						DMARK "DI8" 
592a f5				push af  
592b 3a 3f 59			ld a, (.dmark)  
592e 32 9d fd			ld (debug_mark),a  
5931 3a 40 59			ld a, (.dmark+1)  
5934 32 9e fd			ld (debug_mark+1),a  
5937 3a 41 59			ld a, (.dmark+2)  
593a 32 9f fd			ld (debug_mark+2),a  
593d 18 03			jr .pastdmark  
593f ..			.dmark: db "DI8"  
5942 f1			.pastdmark: pop af  
5943			endm  
# End of macro DMARK
5943						CALLMONITOR 
5943 cd aa fd			call debug_vector  
5946				endm  
# End of macro CALLMONITOR
5946					endif 
5946 cd da 1f				call forth_push_str 
5949			 
5949			 
5949				 
5949					NEXTW 
5949 cd a7 fd			call parse_vector 
594c c3 53 23			jp macro_next 
594f				endm 
# End of macro NEXTW
594f			.SAVE: 
594f			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
594f			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
594f			;		NEXTW 
594f			;.LOAD: 
594f			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
594f			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
594f			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
594f			;; > > The LOAD command can not be used in any user words or compound lines. 
594f			; 
594f			;		; store_openext use it. If zero it is EOF 
594f			; 
594f			;		; read block from current stream id 
594f			;		; if the block does not contain zero term keep reading blocks until zero found 
594f			;		; push the block to stack 
594f			;		; save the block id to stream 
594f			; 
594f			; 
594f			;		FORTH_DSP_VALUEHL 
594f			; 
594f			;;		push hl 
594f			; 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LOA" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;		FORTH_DSP_POP 
594f			; 
594f			;;		pop hl 
594f			; 
594f			;		ld h, l 
594f			;		ld l, 0 
594f			; 
594f			;		push hl     ; stack holds current file id and extent to work with 
594f			; 
594f			; 
594f			;		ld de, store_page      ; get block zero of file 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LO0" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;		call storage_read 
594f			; 
594f			;		ld a, (store_page+2)    ; max extents for this file 
594f			;		ld  (store_openmaxext),a   ; get our limit 
594f			; 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LOE" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			; 
594f			;; TODO dont know why max extents are not present 
594f			;;		cp 0 
594f			;;		jp z, .loadeof     ; dont read past eof 
594f			; 
594f			;;		ld a, 1   ; start from the head of the file 
594f			; 
594f			;.loadline:	pop hl 
594f			;		inc hl 
594f			;		ld  a, (store_openmaxext)   ; get our limit 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LOx" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;		inc a 
594f			;		cp l 
594f			;		jp z, .loadeof 
594f			;		push hl    ; save current extent 
594f			; 
594f			;		ld de, store_page 
594f			; 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LO1" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;		call storage_read 
594f			; 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LO2" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;	call ishlzero 
594f			;	ld a, l 
594f			;	add h 
594f			;	cp 0 
594f			;	jr z, .loadeof 
594f			; 
594f			;	; not eof so hl should point to data to exec 
594f			; 
594f			;	; will need to add the FORTH_END_BUFFER flag 
594f			 ; 
594f			;	ld hl, store_page+2 
594f			;	ld bc, 255 
594f			;	ld a, 0 
594f			;	cpir 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LOt" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;	dec hl 
594f			;	ld a, ' ' 
594f			;	ld (hl), a 
594f			;	inc hl 
594f			;	ld (hl), a 
594f			;	inc hl 
594f			;	ld (hl), a 
594f			;	inc hl 
594f			;	ld a, FORTH_END_BUFFER 
594f			;	ld (hl), a 
594f			; 
594f			;	; TODO handle more than a single block read 
594f			; 
594f			; 
594f			;	ld hl, store_page+2 
594f			; 
594f			;	ld (os_tok_ptr), hl 
594f			; 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LO3" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			; 
594f			;	call forthparse 
594f			;	call forthexec 
594f			;	call forthexec_cleanup 
594f			; 
594f			;	; go to next extent 
594f			; 
594f			;	; get next block  or mark as eof 
594f			;	jp .loadline 
594f			; 
594f			; 
594f			; 
594f			;	       NEXTW 
594f			;.loadeof:	ld a, 0 
594f			;		ld (store_openext), a 
594f			; 
594f			;	if DEBUG_STORESE 
594f			;		DMARK "LOF" 
594f			;		CALLMONITOR 
594f			;	endif 
594f			;		ret 
594f			;		;NEXTW 
594f			;.BSAVE:   
594f			; 
594f			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
594f			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
594f			;		NEXTW 
594f			;.BLOAD: 
594f			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
594f			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
594f			;		NEXTW 
594f			;;;; counter gap 
594f			 
594f			 
594f			.SEO: 
594f				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
594f 64				db WORD_SYS_CORE+80             
5950 71 59			dw .SEI            
5952 04				db 3 + 1 
5953 .. 00			db "SEO",0              
5957				endm 
# End of macro CWHEAD
5957			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
5957			 
5957					; get port 
5957			 
5957					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5957 cd 6c 21			call macro_dsp_valuehl 
595a				endm 
# End of macro FORTH_DSP_VALUEHL
595a			 
595a e5					push hl    ; u2 - byte 
595b			 
595b					; destroy value TOS 
595b			 
595b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
595b cd 24 22			call macro_forth_dsp_pop 
595e				endm 
# End of macro FORTH_DSP_POP
595e			 
595e					; get byte to send 
595e			 
595e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
595e cd 6c 21			call macro_dsp_valuehl 
5961				endm 
# End of macro FORTH_DSP_VALUEHL
5961			 
5961 e5					push hl    ; u1 - addr 
5962			 
5962					; destroy value TOS 
5962			 
5962					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5962 cd 24 22			call macro_forth_dsp_pop 
5965				endm 
# End of macro FORTH_DSP_POP
5965			 
5965					; one value on hl get other one back 
5965			 
5965 d1					pop de   ; u1 - byte 
5966			 
5966 e1					pop hl   ; u2 - addr 
5967			 
5967					; TODO Send SPI byte 
5967			 
5967			 
5967 7b					ld a, e 
5968 cd 65 02				call se_writebyte 
596b			 
596b					 
596b			 
596b					NEXTW 
596b cd a7 fd			call parse_vector 
596e c3 53 23			jp macro_next 
5971				endm 
# End of macro NEXTW
5971			 
5971			.SEI: 
5971				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
5971 65				db WORD_SYS_CORE+81             
5972 8e 59			dw .SFREE            
5974 04				db 3 + 1 
5975 .. 00			db "SEI",0              
5979				endm 
# End of macro CWHEAD
5979			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
5979			 
5979					; get port 
5979			 
5979					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5979 cd 6c 21			call macro_dsp_valuehl 
597c				endm 
# End of macro FORTH_DSP_VALUEHL
597c			 
597c			;		push hl 
597c			 
597c					; destroy value TOS 
597c			 
597c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
597c cd 24 22			call macro_forth_dsp_pop 
597f				endm 
# End of macro FORTH_DSP_POP
597f			 
597f					; one value on hl get other one back 
597f			 
597f			;		pop hl 
597f			 
597f			 
597f					; TODO Get SPI byte 
597f			 
597f cd ff 02				call se_readbyte 
5982			 
5982 26 00				ld h, 0 
5984 6f					ld l, a 
5985 cd 70 1f				call forth_push_numhl 
5988			 
5988					NEXTW 
5988 cd a7 fd			call parse_vector 
598b c3 53 23			jp macro_next 
598e				endm 
# End of macro NEXTW
598e			 
598e			.SFREE: 
598e				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
598e 67				db WORD_SYS_CORE+83             
598f c0 59			dw .SIZE            
5991 06				db 5 + 1 
5992 .. 00			db "FFREE",0              
5998				endm 
# End of macro CWHEAD
5998			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
5998			; | | > [!NOTE] 
5998			; | | > Compatible with PicoSPINet  
5998					if DEBUG_FORTH_WORDS_KEY 
5998						DMARK "FFR" 
5998 f5				push af  
5999 3a ad 59			ld a, (.dmark)  
599c 32 9d fd			ld (debug_mark),a  
599f 3a ae 59			ld a, (.dmark+1)  
59a2 32 9e fd			ld (debug_mark+1),a  
59a5 3a af 59			ld a, (.dmark+2)  
59a8 32 9f fd			ld (debug_mark+2),a  
59ab 18 03			jr .pastdmark  
59ad ..			.dmark: db "FFR"  
59b0 f1			.pastdmark: pop af  
59b1			endm  
# End of macro DMARK
59b1						CALLMONITOR 
59b1 cd aa fd			call debug_vector  
59b4				endm  
# End of macro CALLMONITOR
59b4					endif 
59b4			 
59b4 cd 1d 08				call storage_freeblocks 
59b7			 
59b7 cd 70 1f				call forth_push_numhl 
59ba			 
59ba				       NEXTW 
59ba cd a7 fd			call parse_vector 
59bd c3 53 23			jp macro_next 
59c0				endm 
# End of macro NEXTW
59c0			.SIZE: 
59c0				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
59c0 67				db WORD_SYS_CORE+83             
59c1 f7 59			dw .CREATE            
59c3 05				db 4 + 1 
59c4 .. 00			db "SIZE",0              
59c9				endm 
# End of macro CWHEAD
59c9			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
59c9			; | | > [!NOTE] 
59c9			; | | > Compatible with PicoSPINet  
59c9					if DEBUG_FORTH_WORDS_KEY 
59c9						DMARK "SIZ" 
59c9 f5				push af  
59ca 3a de 59			ld a, (.dmark)  
59cd 32 9d fd			ld (debug_mark),a  
59d0 3a df 59			ld a, (.dmark+1)  
59d3 32 9e fd			ld (debug_mark+1),a  
59d6 3a e0 59			ld a, (.dmark+2)  
59d9 32 9f fd			ld (debug_mark+2),a  
59dc 18 03			jr .pastdmark  
59de ..			.dmark: db "SIZ"  
59e1 f1			.pastdmark: pop af  
59e2			endm  
# End of macro DMARK
59e2						CALLMONITOR 
59e2 cd aa fd			call debug_vector  
59e5				endm  
# End of macro CALLMONITOR
59e5					endif 
59e5			 
59e5					FORTH_DSP_VALUEHL 
59e5 cd 6c 21			call macro_dsp_valuehl 
59e8				endm 
# End of macro FORTH_DSP_VALUEHL
59e8			;		push hl 
59e8					FORTH_DSP_POP 
59e8 cd 24 22			call macro_forth_dsp_pop 
59eb				endm 
# End of macro FORTH_DSP_POP
59eb			;		pop hl 
59eb cd 86 04				call storage_file_size 
59ee			 
59ee cd 70 1f				call forth_push_numhl 
59f1			  
59f1			 
59f1				       NEXTW 
59f1 cd a7 fd			call parse_vector 
59f4 c3 53 23			jp macro_next 
59f7				endm 
# End of macro NEXTW
59f7			 
59f7			.CREATE: 
59f7				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
59f7 68				db WORD_SYS_CORE+84             
59f8 68 5a			dw .APPEND            
59fa 07				db 6 + 1 
59fb .. 00			db "CREATE",0              
5a02				endm 
# End of macro CWHEAD
5a02			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
5a02			; | | e.g.  
5a02			; | | TestProgram CREATE 
5a02			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
5a02			; | |  
5a02			; | | Max file IDs are 255. 
5a02			; | |  
5a02			; | | > [!NOTE] 
5a02			; | | > Compatible with PicoSPINet  
5a02					 
5a02					if DEBUG_FORTH_WORDS_KEY 
5a02						DMARK "CRT" 
5a02 f5				push af  
5a03 3a 17 5a			ld a, (.dmark)  
5a06 32 9d fd			ld (debug_mark),a  
5a09 3a 18 5a			ld a, (.dmark+1)  
5a0c 32 9e fd			ld (debug_mark+1),a  
5a0f 3a 19 5a			ld a, (.dmark+2)  
5a12 32 9f fd			ld (debug_mark+2),a  
5a15 18 03			jr .pastdmark  
5a17 ..			.dmark: db "CRT"  
5a1a f1			.pastdmark: pop af  
5a1b			endm  
# End of macro DMARK
5a1b						CALLMONITOR 
5a1b cd aa fd			call debug_vector  
5a1e				endm  
# End of macro CALLMONITOR
5a1e					endif 
5a1e			;		call storage_get_block_0 
5a1e			 
5a1e					; TODO pop hl 
5a1e			 
5a1e					;v5 FORTH_DSP_VALUE 
5a1e					FORTH_DSP_VALUE 
5a1e cd 55 21			call macro_forth_dsp_value 
5a21				endm 
# End of macro FORTH_DSP_VALUE
5a21			 
5a21				if DEBUG_STORESE 
5a21					DMARK "CR1" 
5a21 f5				push af  
5a22 3a 36 5a			ld a, (.dmark)  
5a25 32 9d fd			ld (debug_mark),a  
5a28 3a 37 5a			ld a, (.dmark+1)  
5a2b 32 9e fd			ld (debug_mark+1),a  
5a2e 3a 38 5a			ld a, (.dmark+2)  
5a31 32 9f fd			ld (debug_mark+2),a  
5a34 18 03			jr .pastdmark  
5a36 ..			.dmark: db "CR1"  
5a39 f1			.pastdmark: pop af  
5a3a			endm  
# End of macro DMARK
5a3a					CALLMONITOR 
5a3a cd aa fd			call debug_vector  
5a3d				endm  
# End of macro CALLMONITOR
5a3d				endif 
5a3d			;		push hl 
5a3d			;		FORTH_DSP_POP 
5a3d			;		pop hl 
5a3d			 
5a3d			;		inc hl   ; move past the type marker 
5a3d			 
5a3d cd 51 08				call storage_create 
5a40			 
5a40				if DEBUG_STORESE 
5a40					DMARK "CT1" 
5a40 f5				push af  
5a41 3a 55 5a			ld a, (.dmark)  
5a44 32 9d fd			ld (debug_mark),a  
5a47 3a 56 5a			ld a, (.dmark+1)  
5a4a 32 9e fd			ld (debug_mark+1),a  
5a4d 3a 57 5a			ld a, (.dmark+2)  
5a50 32 9f fd			ld (debug_mark+2),a  
5a53 18 03			jr .pastdmark  
5a55 ..			.dmark: db "CT1"  
5a58 f1			.pastdmark: pop af  
5a59			endm  
# End of macro DMARK
5a59					CALLMONITOR 
5a59 cd aa fd			call debug_vector  
5a5c				endm  
# End of macro CALLMONITOR
5a5c				endif 
5a5c			;		push hl 
5a5c					FORTH_DSP_POP 
5a5c cd 24 22			call macro_forth_dsp_pop 
5a5f				endm 
# End of macro FORTH_DSP_POP
5a5f			;		pop hl 
5a5f					; push file id to stack 
5a5f cd 70 1f				call forth_push_numhl 
5a62			 
5a62			 
5a62			 
5a62				       NEXTW 
5a62 cd a7 fd			call parse_vector 
5a65 c3 53 23			jp macro_next 
5a68				endm 
# End of macro NEXTW
5a68			 
5a68			.APPEND: 
5a68				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
5a68 69				db WORD_SYS_CORE+85             
5a69 fc 5a			dw .SDEL            
5a6b 07				db 6 + 1 
5a6c .. 00			db "APPEND",0              
5a73				endm 
# End of macro CWHEAD
5a73			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
5a73			; | | e.g. 
5a73			; | | Test CREATE      -> $01 
5a73			; | | "A string to add to file" $01 APPEND 
5a73			; | |  
5a73			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
5a73			; | | > [!NOTE] 
5a73			; | | > Compatible with PicoSPINet  
5a73					if DEBUG_FORTH_WORDS_KEY 
5a73						DMARK "APP" 
5a73 f5				push af  
5a74 3a 88 5a			ld a, (.dmark)  
5a77 32 9d fd			ld (debug_mark),a  
5a7a 3a 89 5a			ld a, (.dmark+1)  
5a7d 32 9e fd			ld (debug_mark+1),a  
5a80 3a 8a 5a			ld a, (.dmark+2)  
5a83 32 9f fd			ld (debug_mark+2),a  
5a86 18 03			jr .pastdmark  
5a88 ..			.dmark: db "APP"  
5a8b f1			.pastdmark: pop af  
5a8c			endm  
# End of macro DMARK
5a8c						CALLMONITOR 
5a8c cd aa fd			call debug_vector  
5a8f				endm  
# End of macro CALLMONITOR
5a8f					endif 
5a8f			 
5a8f					FORTH_DSP_VALUEHL 
5a8f cd 6c 21			call macro_dsp_valuehl 
5a92				endm 
# End of macro FORTH_DSP_VALUEHL
5a92 e5					push hl 	; save file id 
5a93			 
5a93				if DEBUG_STORESE 
5a93					DMARK "AP1" 
5a93 f5				push af  
5a94 3a a8 5a			ld a, (.dmark)  
5a97 32 9d fd			ld (debug_mark),a  
5a9a 3a a9 5a			ld a, (.dmark+1)  
5a9d 32 9e fd			ld (debug_mark+1),a  
5aa0 3a aa 5a			ld a, (.dmark+2)  
5aa3 32 9f fd			ld (debug_mark+2),a  
5aa6 18 03			jr .pastdmark  
5aa8 ..			.dmark: db "AP1"  
5aab f1			.pastdmark: pop af  
5aac			endm  
# End of macro DMARK
5aac					CALLMONITOR 
5aac cd aa fd			call debug_vector  
5aaf				endm  
# End of macro CALLMONITOR
5aaf				endif 
5aaf					FORTH_DSP_POP 
5aaf cd 24 22			call macro_forth_dsp_pop 
5ab2				endm 
# End of macro FORTH_DSP_POP
5ab2			 
5ab2					FORTH_DSP_VALUEHL 
5ab2 cd 6c 21			call macro_dsp_valuehl 
5ab5				endm 
# End of macro FORTH_DSP_VALUEHL
5ab5					;v5 FORTH_DSP_VALUE 
5ab5 e5					push hl 	; save ptr to string to save 
5ab6			 
5ab6				if DEBUG_STORESE 
5ab6					DMARK "AP1" 
5ab6 f5				push af  
5ab7 3a cb 5a			ld a, (.dmark)  
5aba 32 9d fd			ld (debug_mark),a  
5abd 3a cc 5a			ld a, (.dmark+1)  
5ac0 32 9e fd			ld (debug_mark+1),a  
5ac3 3a cd 5a			ld a, (.dmark+2)  
5ac6 32 9f fd			ld (debug_mark+2),a  
5ac9 18 03			jr .pastdmark  
5acb ..			.dmark: db "AP1"  
5ace f1			.pastdmark: pop af  
5acf			endm  
# End of macro DMARK
5acf					CALLMONITOR 
5acf cd aa fd			call debug_vector  
5ad2				endm  
# End of macro CALLMONITOR
5ad2				endif 
5ad2					FORTH_DSP_POP 
5ad2 cd 24 22			call macro_forth_dsp_pop 
5ad5				endm 
# End of macro FORTH_DSP_POP
5ad5			 
5ad5 d1					pop de 
5ad6 e1					pop hl 
5ad7				if DEBUG_STORESE 
5ad7					DMARK "AP2" 
5ad7 f5				push af  
5ad8 3a ec 5a			ld a, (.dmark)  
5adb 32 9d fd			ld (debug_mark),a  
5ade 3a ed 5a			ld a, (.dmark+1)  
5ae1 32 9e fd			ld (debug_mark+1),a  
5ae4 3a ee 5a			ld a, (.dmark+2)  
5ae7 32 9f fd			ld (debug_mark+2),a  
5aea 18 03			jr .pastdmark  
5aec ..			.dmark: db "AP2"  
5aef f1			.pastdmark: pop af  
5af0			endm  
# End of macro DMARK
5af0					CALLMONITOR 
5af0 cd aa fd			call debug_vector  
5af3				endm  
# End of macro CALLMONITOR
5af3				endif 
5af3					;inc de ; skip var type indicator 
5af3			 
5af3					; TODO how to append numerics???? 
5af3			 
5af3 cd 3b 0b				call storage_append		 
5af6			 
5af6				       NEXTW 
5af6 cd a7 fd			call parse_vector 
5af9 c3 53 23			jp macro_next 
5afc				endm 
# End of macro NEXTW
5afc			.SDEL: 
5afc				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
5afc 6a				db WORD_SYS_CORE+86             
5afd 4b 5b			dw .OPEN            
5aff 05				db 4 + 1 
5b00 .. 00			db "ERA",0              
5b04				endm 
# End of macro CWHEAD
5b04			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
5b04			; | | > [!NOTE] 
5b04			; | | > Compatible with PicoSPINet  
5b04					FORTH_DSP_VALUEHL 
5b04 cd 6c 21			call macro_dsp_valuehl 
5b07				endm 
# End of macro FORTH_DSP_VALUEHL
5b07			;		push hl 	; save file id 
5b07			 
5b07					if DEBUG_FORTH_WORDS_KEY 
5b07						DMARK "ERA" 
5b07 f5				push af  
5b08 3a 1c 5b			ld a, (.dmark)  
5b0b 32 9d fd			ld (debug_mark),a  
5b0e 3a 1d 5b			ld a, (.dmark+1)  
5b11 32 9e fd			ld (debug_mark+1),a  
5b14 3a 1e 5b			ld a, (.dmark+2)  
5b17 32 9f fd			ld (debug_mark+2),a  
5b1a 18 03			jr .pastdmark  
5b1c ..			.dmark: db "ERA"  
5b1f f1			.pastdmark: pop af  
5b20			endm  
# End of macro DMARK
5b20						CALLMONITOR 
5b20 cd aa fd			call debug_vector  
5b23				endm  
# End of macro CALLMONITOR
5b23					endif 
5b23				if DEBUG_STORESE 
5b23					DMARK "ER1" 
5b23 f5				push af  
5b24 3a 38 5b			ld a, (.dmark)  
5b27 32 9d fd			ld (debug_mark),a  
5b2a 3a 39 5b			ld a, (.dmark+1)  
5b2d 32 9e fd			ld (debug_mark+1),a  
5b30 3a 3a 5b			ld a, (.dmark+2)  
5b33 32 9f fd			ld (debug_mark+2),a  
5b36 18 03			jr .pastdmark  
5b38 ..			.dmark: db "ER1"  
5b3b f1			.pastdmark: pop af  
5b3c			endm  
# End of macro DMARK
5b3c					CALLMONITOR 
5b3c cd aa fd			call debug_vector  
5b3f				endm  
# End of macro CALLMONITOR
5b3f				endif 
5b3f					FORTH_DSP_POP 
5b3f cd 24 22			call macro_forth_dsp_pop 
5b42				endm 
# End of macro FORTH_DSP_POP
5b42			 
5b42			;		pop hl 
5b42			 
5b42 cd 92 06				call storage_erase 
5b45				       NEXTW 
5b45 cd a7 fd			call parse_vector 
5b48 c3 53 23			jp macro_next 
5b4b				endm 
# End of macro NEXTW
5b4b			 
5b4b			.OPEN: 
5b4b				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
5b4b 6b				db WORD_SYS_CORE+87             
5b4c e1 5b			dw .READ            
5b4e 05				db 4 + 1 
5b4f .. 00			db "OPEN",0              
5b54				endm 
# End of macro CWHEAD
5b54			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
5b54			; | | e.g. 
5b54			; | | $01 OPEN $01 DO $01 READ . LOOP 
5b54			; | | 
5b54			; | | Will return with 255 blocks if the file does not exist 
5b54			; | | > [!NOTE] 
5b54			; | | > Compatible with PicoSPINet  
5b54			 
5b54					if DEBUG_FORTH_WORDS_KEY 
5b54						DMARK "OPN" 
5b54 f5				push af  
5b55 3a 69 5b			ld a, (.dmark)  
5b58 32 9d fd			ld (debug_mark),a  
5b5b 3a 6a 5b			ld a, (.dmark+1)  
5b5e 32 9e fd			ld (debug_mark+1),a  
5b61 3a 6b 5b			ld a, (.dmark+2)  
5b64 32 9f fd			ld (debug_mark+2),a  
5b67 18 03			jr .pastdmark  
5b69 ..			.dmark: db "OPN"  
5b6c f1			.pastdmark: pop af  
5b6d			endm  
# End of macro DMARK
5b6d						CALLMONITOR 
5b6d cd aa fd			call debug_vector  
5b70				endm  
# End of macro CALLMONITOR
5b70					endif 
5b70					; TODO handle multiple file opens 
5b70			 
5b70 3e 01			       	ld a, 1 
5b72 32 9c f9				ld (store_openext), a 
5b75			 
5b75					; get max extents for this file 
5b75				 
5b75								 
5b75					FORTH_DSP_VALUEHL 
5b75 cd 6c 21			call macro_dsp_valuehl 
5b78				endm 
# End of macro FORTH_DSP_VALUEHL
5b78			 
5b78 65					ld h, l 
5b79 2e 00				ld l, 0 
5b7b			 
5b7b					; store file id 
5b7b			 
5b7b 7c					ld a, h 
5b7c 32 99 f9				ld (store_filecache), a 
5b7f			 
5b7f				if DEBUG_STORESE 
5b7f					DMARK "OPN" 
5b7f f5				push af  
5b80 3a 94 5b			ld a, (.dmark)  
5b83 32 9d fd			ld (debug_mark),a  
5b86 3a 95 5b			ld a, (.dmark+1)  
5b89 32 9e fd			ld (debug_mark+1),a  
5b8c 3a 96 5b			ld a, (.dmark+2)  
5b8f 32 9f fd			ld (debug_mark+2),a  
5b92 18 03			jr .pastdmark  
5b94 ..			.dmark: db "OPN"  
5b97 f1			.pastdmark: pop af  
5b98			endm  
# End of macro DMARK
5b98					CALLMONITOR 
5b98 cd aa fd			call debug_vector  
5b9b				endm  
# End of macro CALLMONITOR
5b9b				endif 
5b9b			;		push hl 
5b9b					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
5b9b cd 24 22			call macro_forth_dsp_pop 
5b9e				endm 
# End of macro FORTH_DSP_POP
5b9e			;		pop hl 
5b9e						 
5b9e 11 ac f9				ld de, store_page      ; get block zero of file 
5ba1 cd a7 09				call storage_read 
5ba4 cd d5 0f			call ishlzero 
5ba7 20 04			jr nz, .opfound 
5ba9			 
5ba9				; file does not exist so indicate with 255 extents in use 
5ba9			 
5ba9 3e ff			ld a, 255 
5bab 18 28			jr .skipopeneof 
5bad			 
5bad			 
5bad			.opfound: 
5bad			 
5bad			 
5bad 3a ae f9				ld a, (store_page+2)    ; max extents for this file 
5bb0 32 9b f9				ld  (store_openmaxext), a   ; get our limit and push 
5bb3					 
5bb3				if DEBUG_STORESE 
5bb3					DMARK "OPx" 
5bb3 f5				push af  
5bb4 3a c8 5b			ld a, (.dmark)  
5bb7 32 9d fd			ld (debug_mark),a  
5bba 3a c9 5b			ld a, (.dmark+1)  
5bbd 32 9e fd			ld (debug_mark+1),a  
5bc0 3a ca 5b			ld a, (.dmark+2)  
5bc3 32 9f fd			ld (debug_mark+2),a  
5bc6 18 03			jr .pastdmark  
5bc8 ..			.dmark: db "OPx"  
5bcb f1			.pastdmark: pop af  
5bcc			endm  
# End of macro DMARK
5bcc					CALLMONITOR 
5bcc cd aa fd			call debug_vector  
5bcf				endm  
# End of macro CALLMONITOR
5bcf				endif 
5bcf			;		cp 0 
5bcf b7					or a 
5bd0 20 03				jr nz, .skipopeneof 
5bd2					; have opened an empty file 
5bd2					 
5bd2 32 9c f9				ld (store_openext), a 
5bd5			 
5bd5			.skipopeneof: 
5bd5			 
5bd5 6f					ld l, a 
5bd6 26 00				ld h, 0 
5bd8 cd 70 1f				call forth_push_numhl 
5bdb			 
5bdb			 
5bdb				       NEXTW 
5bdb cd a7 fd			call parse_vector 
5bde c3 53 23			jp macro_next 
5be1				endm 
# End of macro NEXTW
5be1			.READ: 
5be1				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
5be1 6c				db WORD_SYS_CORE+88             
5be2 10 5d			dw .EOF            
5be4 05				db 4 + 1 
5be5 .. 00			db "READ",0              
5bea				endm 
# End of macro CWHEAD
5bea			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
5bea			; | | e.g. 
5bea			; | | $01 OPEN $01 DO READ . LOOP 
5bea			; | | 
5bea			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
5bea			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
5bea			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
5bea			; | | two bytes contain the file id and extent. 
5bea			; | |  
5bea			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
5bea			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
5bea			; | | > [!NOTE] 
5bea			; | | > Compatible with PicoSPINet  
5bea			 
5bea					if DEBUG_FORTH_WORDS_KEY 
5bea						DMARK "REA" 
5bea f5				push af  
5beb 3a ff 5b			ld a, (.dmark)  
5bee 32 9d fd			ld (debug_mark),a  
5bf1 3a 00 5c			ld a, (.dmark+1)  
5bf4 32 9e fd			ld (debug_mark+1),a  
5bf7 3a 01 5c			ld a, (.dmark+2)  
5bfa 32 9f fd			ld (debug_mark+2),a  
5bfd 18 03			jr .pastdmark  
5bff ..			.dmark: db "REA"  
5c02 f1			.pastdmark: pop af  
5c03			endm  
# End of macro DMARK
5c03						CALLMONITOR 
5c03 cd aa fd			call debug_vector  
5c06				endm  
# End of macro CALLMONITOR
5c06					endif 
5c06					; store_openext use it. If zero it is EOF 
5c06			 
5c06					; read block from current stream id 
5c06					; if the block does not contain zero term keep reading blocks until zero found 
5c06					; push the block to stack 
5c06					; save the block id to stream 
5c06			 
5c06			 
5c06 cd 40 5d				call .testeof 
5c09 3e 01				ld a, 1 
5c0b bd					cp l 
5c0c ca e9 5c				jp z, .ateof 
5c0f			 
5c0f			 
5c0f			;		FORTH_DSP_VALUEHL 
5c0f			 
5c0f			;		push hl 
5c0f			 
5c0f			;	if DEBUG_STORESE 
5c0f			;		DMARK "REA" 
5c0f			;		CALLMONITOR 
5c0f			;	endif 
5c0f			;		FORTH_DSP_POP 
5c0f			 
5c0f			;		pop hl 
5c0f				 
5c0f 3a 99 f9				ld a, (store_filecache) 
5c12 67					ld h,a 
5c13			 
5c13 3a 9c f9				ld a, (store_openext) 
5c16 6f					ld l, a 
5c17					 
5c17			;		cp 0 
5c17 b7					or a 
5c18 ca e9 5c				jp z, .ateof     ; dont read past eof 
5c1b			 
5c1b cd 84 0c				call storage_clear_page 
5c1e			 
5c1e 11 ac f9				ld de, store_page 
5c21				if DEBUG_STORESE 
5c21					DMARK "RE1" 
5c21 f5				push af  
5c22 3a 36 5c			ld a, (.dmark)  
5c25 32 9d fd			ld (debug_mark),a  
5c28 3a 37 5c			ld a, (.dmark+1)  
5c2b 32 9e fd			ld (debug_mark+1),a  
5c2e 3a 38 5c			ld a, (.dmark+2)  
5c31 32 9f fd			ld (debug_mark+2),a  
5c34 18 03			jr .pastdmark  
5c36 ..			.dmark: db "RE1"  
5c39 f1			.pastdmark: pop af  
5c3a			endm  
# End of macro DMARK
5c3a					CALLMONITOR 
5c3a cd aa fd			call debug_vector  
5c3d				endm  
# End of macro CALLMONITOR
5c3d				endif 
5c3d cd a7 09				call storage_read 
5c40			 
5c40				if DEBUG_STORESE 
5c40					DMARK "RE2" 
5c40 f5				push af  
5c41 3a 55 5c			ld a, (.dmark)  
5c44 32 9d fd			ld (debug_mark),a  
5c47 3a 56 5c			ld a, (.dmark+1)  
5c4a 32 9e fd			ld (debug_mark+1),a  
5c4d 3a 57 5c			ld a, (.dmark+2)  
5c50 32 9f fd			ld (debug_mark+2),a  
5c53 18 03			jr .pastdmark  
5c55 ..			.dmark: db "RE2"  
5c58 f1			.pastdmark: pop af  
5c59			endm  
# End of macro DMARK
5c59					CALLMONITOR 
5c59 cd aa fd			call debug_vector  
5c5c				endm  
# End of macro CALLMONITOR
5c5c				endif 
5c5c cd d5 0f			call ishlzero 
5c5f			;	ld a, l 
5c5f			;	add h 
5c5f			;	cp 0 
5c5f ca e9 5c			jp z, .readeof 
5c62			 
5c62				; not eof so hl should point to data to push to stack 
5c62			 
5c62				if DEBUG_STORESE 
5c62					DMARK "RE3" 
5c62 f5				push af  
5c63 3a 77 5c			ld a, (.dmark)  
5c66 32 9d fd			ld (debug_mark),a  
5c69 3a 78 5c			ld a, (.dmark+1)  
5c6c 32 9e fd			ld (debug_mark+1),a  
5c6f 3a 79 5c			ld a, (.dmark+2)  
5c72 32 9f fd			ld (debug_mark+2),a  
5c75 18 03			jr .pastdmark  
5c77 ..			.dmark: db "RE3"  
5c7a f1			.pastdmark: pop af  
5c7b			endm  
# End of macro DMARK
5c7b					CALLMONITOR 
5c7b cd aa fd			call debug_vector  
5c7e				endm  
# End of macro CALLMONITOR
5c7e				endif 
5c7e cd da 1f			call forth_push_str 
5c81			 
5c81				if DEBUG_STORESE 
5c81					DMARK "RE4" 
5c81 f5				push af  
5c82 3a 96 5c			ld a, (.dmark)  
5c85 32 9d fd			ld (debug_mark),a  
5c88 3a 97 5c			ld a, (.dmark+1)  
5c8b 32 9e fd			ld (debug_mark+1),a  
5c8e 3a 98 5c			ld a, (.dmark+2)  
5c91 32 9f fd			ld (debug_mark+2),a  
5c94 18 03			jr .pastdmark  
5c96 ..			.dmark: db "RE4"  
5c99 f1			.pastdmark: pop af  
5c9a			endm  
# End of macro DMARK
5c9a					CALLMONITOR 
5c9a cd aa fd			call debug_vector  
5c9d				endm  
# End of macro CALLMONITOR
5c9d				endif 
5c9d				; get next block  or mark as eof 
5c9d			 
5c9d 3a 9b f9			ld a, (store_openmaxext)   ; get our limit 
5ca0 4f				ld c, a	 
5ca1 3a 9c f9			ld a, (store_openext) 
5ca4			 
5ca4				if DEBUG_STORESE 
5ca4					DMARK "RE5" 
5ca4 f5				push af  
5ca5 3a b9 5c			ld a, (.dmark)  
5ca8 32 9d fd			ld (debug_mark),a  
5cab 3a ba 5c			ld a, (.dmark+1)  
5cae 32 9e fd			ld (debug_mark+1),a  
5cb1 3a bb 5c			ld a, (.dmark+2)  
5cb4 32 9f fd			ld (debug_mark+2),a  
5cb7 18 03			jr .pastdmark  
5cb9 ..			.dmark: db "RE5"  
5cbc f1			.pastdmark: pop af  
5cbd			endm  
# End of macro DMARK
5cbd					CALLMONITOR 
5cbd cd aa fd			call debug_vector  
5cc0				endm  
# End of macro CALLMONITOR
5cc0				endif 
5cc0 b9				cp c 
5cc1 28 26			jr z, .readeof     ; at last extent 
5cc3			 
5cc3 3c					inc a 
5cc4 32 9c f9				ld (store_openext), a 
5cc7			 
5cc7				if DEBUG_STORESE 
5cc7					DMARK "RE6" 
5cc7 f5				push af  
5cc8 3a dc 5c			ld a, (.dmark)  
5ccb 32 9d fd			ld (debug_mark),a  
5cce 3a dd 5c			ld a, (.dmark+1)  
5cd1 32 9e fd			ld (debug_mark+1),a  
5cd4 3a de 5c			ld a, (.dmark+2)  
5cd7 32 9f fd			ld (debug_mark+2),a  
5cda 18 03			jr .pastdmark  
5cdc ..			.dmark: db "RE6"  
5cdf f1			.pastdmark: pop af  
5ce0			endm  
# End of macro DMARK
5ce0					CALLMONITOR 
5ce0 cd aa fd			call debug_vector  
5ce3				endm  
# End of macro CALLMONITOR
5ce3				endif 
5ce3			 
5ce3			 
5ce3				       NEXTW 
5ce3 cd a7 fd			call parse_vector 
5ce6 c3 53 23			jp macro_next 
5ce9				endm 
# End of macro NEXTW
5ce9			.ateof: 
5ce9				;	ld hl, .showeof 
5ce9				;	call forth_push_str 
5ce9 3e 00		.readeof:	ld a, 0 
5ceb 32 9c f9				ld (store_openext), a 
5cee			 
5cee					 
5cee				if DEBUG_STORESE 
5cee					DMARK "REF" 
5cee f5				push af  
5cef 3a 03 5d			ld a, (.dmark)  
5cf2 32 9d fd			ld (debug_mark),a  
5cf5 3a 04 5d			ld a, (.dmark+1)  
5cf8 32 9e fd			ld (debug_mark+1),a  
5cfb 3a 05 5d			ld a, (.dmark+2)  
5cfe 32 9f fd			ld (debug_mark+2),a  
5d01 18 03			jr .pastdmark  
5d03 ..			.dmark: db "REF"  
5d06 f1			.pastdmark: pop af  
5d07			endm  
# End of macro DMARK
5d07					CALLMONITOR 
5d07 cd aa fd			call debug_vector  
5d0a				endm  
# End of macro CALLMONITOR
5d0a				endif 
5d0a				       NEXTW 
5d0a cd a7 fd			call parse_vector 
5d0d c3 53 23			jp macro_next 
5d10				endm 
# End of macro NEXTW
5d10			 
5d10			;.showeof:   db "eof", 0 
5d10			 
5d10			 
5d10			.EOF: 
5d10				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
5d10 6d				db WORD_SYS_CORE+89             
5d11 53 5d			dw .FORMAT            
5d13 04				db 3 + 1 
5d14 .. 00			db "EOF",0              
5d18				endm 
# End of macro CWHEAD
5d18			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
5d18			; | | e.g. 
5d18			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
5d18			; | | > [!NOTE] 
5d18			; | | > Compatible with PicoSPINet  
5d18					; TODO if current block id for stream is zero then push true else false 
5d18			 
5d18					if DEBUG_FORTH_WORDS_KEY 
5d18						DMARK "EOF" 
5d18 f5				push af  
5d19 3a 2d 5d			ld a, (.dmark)  
5d1c 32 9d fd			ld (debug_mark),a  
5d1f 3a 2e 5d			ld a, (.dmark+1)  
5d22 32 9e fd			ld (debug_mark+1),a  
5d25 3a 2f 5d			ld a, (.dmark+2)  
5d28 32 9f fd			ld (debug_mark+2),a  
5d2b 18 03			jr .pastdmark  
5d2d ..			.dmark: db "EOF"  
5d30 f1			.pastdmark: pop af  
5d31			endm  
# End of macro DMARK
5d31						CALLMONITOR 
5d31 cd aa fd			call debug_vector  
5d34				endm  
# End of macro CALLMONITOR
5d34					endif 
5d34			 
5d34					; TODO handlue multiple file streams 
5d34			 
5d34			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
5d34 cd 40 5d				call .testeof 
5d37 cd 70 1f				call forth_push_numhl 
5d3a			 
5d3a			 
5d3a				       NEXTW 
5d3a cd a7 fd			call parse_vector 
5d3d c3 53 23			jp macro_next 
5d40				endm 
# End of macro NEXTW
5d40			 
5d40			.testeof: 
5d40 2e 01				ld l, 1 
5d42 3a 9b f9				ld a, (store_openmaxext) 
5d45			;		cp 0 
5d45 b7					or a 
5d46 28 08				jr  z, .eofdone   ; empty file 
5d48 3a 9c f9				ld a, (store_openext) 
5d4b			;		cp 0 
5d4b b7					or a 
5d4c 28 02				jr  z, .eofdone 
5d4e 2e 00				ld l, 0 
5d50 26 00		.eofdone:	ld h, 0 
5d52 c9					ret 
5d53			 
5d53			 
5d53			 
5d53			 
5d53			.FORMAT: 
5d53				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
5d53 6d				db WORD_SYS_CORE+89             
5d54 a7 5d			dw .LABEL            
5d56 07				db 6 + 1 
5d57 .. 00			db "FORMAT",0              
5d5e				endm 
# End of macro CWHEAD
5d5e			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
5d5e			; | | > [!NOTE] 
5d5e			; | | > Compatible with PicoSPINet  
5d5e					; TODO if current block id for stream is zero then push true else false 
5d5e				 
5d5e				if DEBUG_STORESE 
5d5e					DMARK "FOR" 
5d5e f5				push af  
5d5f 3a 73 5d			ld a, (.dmark)  
5d62 32 9d fd			ld (debug_mark),a  
5d65 3a 74 5d			ld a, (.dmark+1)  
5d68 32 9e fd			ld (debug_mark+1),a  
5d6b 3a 75 5d			ld a, (.dmark+2)  
5d6e 32 9f fd			ld (debug_mark+2),a  
5d71 18 03			jr .pastdmark  
5d73 ..			.dmark: db "FOR"  
5d76 f1			.pastdmark: pop af  
5d77			endm  
# End of macro DMARK
5d77					CALLMONITOR 
5d77 cd aa fd			call debug_vector  
5d7a				endm  
# End of macro CALLMONITOR
5d7a				endif 
5d7a					; Wipes the bank check flags to cause a reformat on next block 0 read 
5d7a			 
5d7a 21 01 00				ld hl, 1 
5d7d 3e 00				ld a, 0 
5d7f cd 65 02				call se_writebyte 
5d82			 
5d82				if DEBUG_STORESE 
5d82					DMARK "FO0" 
5d82 f5				push af  
5d83 3a 97 5d			ld a, (.dmark)  
5d86 32 9d fd			ld (debug_mark),a  
5d89 3a 98 5d			ld a, (.dmark+1)  
5d8c 32 9e fd			ld (debug_mark+1),a  
5d8f 3a 99 5d			ld a, (.dmark+2)  
5d92 32 9f fd			ld (debug_mark+2),a  
5d95 18 03			jr .pastdmark  
5d97 ..			.dmark: db "FO0"  
5d9a f1			.pastdmark: pop af  
5d9b			endm  
# End of macro DMARK
5d9b					CALLMONITOR 
5d9b cd aa fd			call debug_vector  
5d9e				endm  
# End of macro CALLMONITOR
5d9e				endif 
5d9e					; force bank init 
5d9e			 
5d9e cd 05 05				call storage_get_block_0 
5da1					 
5da1				       NEXTW 
5da1 cd a7 fd			call parse_vector 
5da4 c3 53 23			jp macro_next 
5da7				endm 
# End of macro NEXTW
5da7			.LABEL: 
5da7				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
5da7 6d				db WORD_SYS_CORE+89             
5da8 f8 5d			dw .STOREPAGE            
5daa 06				db 5 + 1 
5dab .. 00			db "LABEL",0              
5db1				endm 
# End of macro CWHEAD
5db1			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
5db1			; | | > [!NOTE] 
5db1			; | | > Compatible with PicoSPINet  
5db1					; TODO test to see if bank is selected 
5db1				 
5db1					if DEBUG_FORTH_WORDS_KEY 
5db1						DMARK "LBL" 
5db1 f5				push af  
5db2 3a c6 5d			ld a, (.dmark)  
5db5 32 9d fd			ld (debug_mark),a  
5db8 3a c7 5d			ld a, (.dmark+1)  
5dbb 32 9e fd			ld (debug_mark+1),a  
5dbe 3a c8 5d			ld a, (.dmark+2)  
5dc1 32 9f fd			ld (debug_mark+2),a  
5dc4 18 03			jr .pastdmark  
5dc6 ..			.dmark: db "LBL"  
5dc9 f1			.pastdmark: pop af  
5dca			endm  
# End of macro DMARK
5dca						CALLMONITOR 
5dca cd aa fd			call debug_vector  
5dcd				endm  
# End of macro CALLMONITOR
5dcd					endif 
5dcd			;	if DEBUG_STORESE 
5dcd			;		DMARK "LBL" 
5dcd			;		CALLMONITOR 
5dcd			;	endif 
5dcd					FORTH_DSP_VALUEHL 
5dcd cd 6c 21			call macro_dsp_valuehl 
5dd0				endm 
# End of macro FORTH_DSP_VALUEHL
5dd0					;v5FORTH_DSP_VALUE 
5dd0					 
5dd0			;		push hl 
5dd0					FORTH_DSP_POP 
5dd0 cd 24 22			call macro_forth_dsp_pop 
5dd3				endm 
# End of macro FORTH_DSP_POP
5dd3			;		pop hl 
5dd3			 
5dd3			;v5		inc hl   ; move past the type marker 
5dd3			 
5dd3				if DEBUG_STORESE 
5dd3					DMARK "LBl" 
5dd3 f5				push af  
5dd4 3a e8 5d			ld a, (.dmark)  
5dd7 32 9d fd			ld (debug_mark),a  
5dda 3a e9 5d			ld a, (.dmark+1)  
5ddd 32 9e fd			ld (debug_mark+1),a  
5de0 3a ea 5d			ld a, (.dmark+2)  
5de3 32 9f fd			ld (debug_mark+2),a  
5de6 18 03			jr .pastdmark  
5de8 ..			.dmark: db "LBl"  
5deb f1			.pastdmark: pop af  
5dec			endm  
# End of macro DMARK
5dec					CALLMONITOR 
5dec cd aa fd			call debug_vector  
5def				endm  
# End of macro CALLMONITOR
5def				endif 
5def cd 25 06				call storage_label 
5df2			 
5df2				       NEXTW 
5df2 cd a7 fd			call parse_vector 
5df5 c3 53 23			jp macro_next 
5df8				endm 
# End of macro NEXTW
5df8			.STOREPAGE: 
5df8				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
5df8 6d				db WORD_SYS_CORE+89             
5df9 2e 5e			dw .LABELS            
5dfb 0a				db 9 + 1 
5dfc .. 00			db "STOREPAGE",0              
5e06				endm 
# End of macro CWHEAD
5e06			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
5e06			; | | > [!NOTE] 
5e06			; | | > Compatible with PicoSPINet  
5e06					; TODO test to see if bank is selected 
5e06				 
5e06					if DEBUG_FORTH_WORDS_KEY 
5e06						DMARK "STP" 
5e06 f5				push af  
5e07 3a 1b 5e			ld a, (.dmark)  
5e0a 32 9d fd			ld (debug_mark),a  
5e0d 3a 1c 5e			ld a, (.dmark+1)  
5e10 32 9e fd			ld (debug_mark+1),a  
5e13 3a 1d 5e			ld a, (.dmark+2)  
5e16 32 9f fd			ld (debug_mark+2),a  
5e19 18 03			jr .pastdmark  
5e1b ..			.dmark: db "STP"  
5e1e f1			.pastdmark: pop af  
5e1f			endm  
# End of macro DMARK
5e1f						CALLMONITOR 
5e1f cd aa fd			call debug_vector  
5e22				endm  
# End of macro CALLMONITOR
5e22					endif 
5e22			;	if DEBUG_STORESE 
5e22			;		DMARK "STP" 
5e22			;		CALLMONITOR 
5e22			;	endif 
5e22			 
5e22 21 ac f9			ld hl, store_page 
5e25 cd 70 1f			call forth_push_numhl 
5e28			 
5e28			 
5e28				       NEXTW 
5e28 cd a7 fd			call parse_vector 
5e2b c3 53 23			jp macro_next 
5e2e				endm 
# End of macro NEXTW
5e2e			.LABELS: 
5e2e				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
5e2e 6d				db WORD_SYS_CORE+89             
5e2f bb 5e			dw .SCONST1            
5e31 07				db 6 + 1 
5e32 .. 00			db "LABELS",0              
5e39				endm 
# End of macro CWHEAD
5e39			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | DONE 
5e39			; | | > [!CAUTION] 
5e39			; | | > *NOT* Compatible with PicoSPINet  
5e39					;  
5e39			 
5e39					; save the current device selected to restore afterwards 
5e39				 
5e39 3a 92 f9				ld a, (spi_device) 
5e3c f5					push af 
5e3d			 
5e3d			 
5e3d					; run through each of the banks 
5e3d			 
5e3d 21 01 00				ld hl, 1 
5e40 cd 70 1f				call forth_push_numhl 
5e43 3e ff				ld a, SPI_CE_HIGH 
5e45 cb 87				res SPI_CE0, a 
5e47 32 92 f9				ld (spi_device), a 
5e4a cd 05 05				call storage_get_block_0 
5e4d 21 af f9				ld hl, store_page+3 
5e50 cd da 1f				call forth_push_str 
5e53			 
5e53					 
5e53 21 02 00				ld hl, 2 
5e56 cd 70 1f				call forth_push_numhl 
5e59 3e ff				ld a, SPI_CE_HIGH 
5e5b cb 8f				res SPI_CE1, a 
5e5d 32 92 f9				ld (spi_device), a 
5e60 cd 05 05				call storage_get_block_0 
5e63 21 af f9				ld hl, store_page+3 
5e66 cd da 1f				call forth_push_str 
5e69			 
5e69					 
5e69 21 03 00				ld hl, 3 
5e6c cd 70 1f				call forth_push_numhl 
5e6f 3e ff				ld a, SPI_CE_HIGH 
5e71 cb 97				res SPI_CE2, a 
5e73 32 92 f9				ld (spi_device), a 
5e76 cd 05 05				call storage_get_block_0 
5e79 21 af f9				ld hl, store_page+3 
5e7c cd da 1f				call forth_push_str 
5e7f			 
5e7f			 
5e7f 21 04 00				ld hl, 4 
5e82 cd 70 1f				call forth_push_numhl 
5e85 3e ff				ld a, SPI_CE_HIGH 
5e87 cb 9f				res SPI_CE3, a 
5e89 32 92 f9				ld (spi_device), a 
5e8c cd 05 05				call storage_get_block_0 
5e8f 21 af f9				ld hl, store_page+3 
5e92 cd da 1f				call forth_push_str 
5e95			 
5e95					 
5e95			 
5e95 21 05 00				ld hl, 5 
5e98 cd 70 1f				call forth_push_numhl 
5e9b 3e ff				ld a, SPI_CE_HIGH 
5e9d cb a7				res SPI_CE4, a 
5e9f 32 92 f9				ld (spi_device), a 
5ea2 cd 05 05				call storage_get_block_0 
5ea5 21 af f9				ld hl, store_page+3 
5ea8 cd da 1f				call forth_push_str 
5eab			 
5eab					 
5eab					; push fixed count of storage devices (on board) for now 
5eab			 
5eab 21 05 00				ld hl, 5 
5eae cd 70 1f				call forth_push_numhl 
5eb1			 
5eb1					; restore selected device  
5eb1				 
5eb1 f1					pop af 
5eb2 32 92 f9				ld (spi_device), a 
5eb5			 
5eb5				       NEXTW 
5eb5 cd a7 fd			call parse_vector 
5eb8 c3 53 23			jp macro_next 
5ebb				endm 
# End of macro NEXTW
5ebb			 
5ebb			.SCONST1: 
5ebb				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
5ebb 6d				db WORD_SYS_CORE+89             
5ebc d5 5e			dw .SCONST2            
5ebe 07				db 6 + 1 
5ebf .. 00			db "FILEID",0              
5ec6				endm 
# End of macro CWHEAD
5ec6			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
5ec6			; | | > [!NOTE] 
5ec6			; | | > Compatible with PicoSPINet  
5ec6 3a 99 f9				ld a, (store_filecache) 
5ec9 26 00				ld h, 0 
5ecb 6f					ld l, a 
5ecc cd 70 1f				call forth_push_numhl 
5ecf					NEXTW 
5ecf cd a7 fd			call parse_vector 
5ed2 c3 53 23			jp macro_next 
5ed5				endm 
# End of macro NEXTW
5ed5			.SCONST2: 
5ed5				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
5ed5 6d				db WORD_SYS_CORE+89             
5ed6 f0 5e			dw .SCONST3            
5ed8 08				db 7 + 1 
5ed9 .. 00			db "FILEEXT",0              
5ee1				endm 
# End of macro CWHEAD
5ee1			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
5ee1			; | | > [!NOTE] 
5ee1			; | | > Compatible with PicoSPINet  
5ee1 3a 9c f9				ld a, (store_openext) 
5ee4 26 00				ld h, 0 
5ee6 6f					ld l, a 
5ee7 cd 70 1f				call forth_push_numhl 
5eea					NEXTW 
5eea cd a7 fd			call parse_vector 
5eed c3 53 23			jp macro_next 
5ef0				endm 
# End of macro NEXTW
5ef0			.SCONST3: 
5ef0				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
5ef0 6d				db WORD_SYS_CORE+89             
5ef1 0b 5f			dw .SCONST4            
5ef3 08				db 7 + 1 
5ef4 .. 00			db "FILEMAX",0              
5efc				endm 
# End of macro CWHEAD
5efc			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5efc			; | | > [!NOTE] 
5efc			; | | > Compatible with PicoSPINet  
5efc 3a 9b f9				ld a, (store_openmaxext) 
5eff 26 00				ld h, 0 
5f01 6f					ld l, a 
5f02 cd 70 1f				call forth_push_numhl 
5f05					NEXTW 
5f05 cd a7 fd			call parse_vector 
5f08 c3 53 23			jp macro_next 
5f0b				endm 
# End of macro NEXTW
5f0b			.SCONST4: 
5f0b				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
5f0b 6d				db WORD_SYS_CORE+89             
5f0c 24 5f			dw .SCONST5            
5f0e 09				db 8 + 1 
5f0f .. 00			db "FILEADDR",0              
5f18				endm 
# End of macro CWHEAD
5f18			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currently open file to stack | DONE 
5f18			; | | > [!NOTE] 
5f18			; | | > Compatible with PicoSPINet  
5f18 2a 9d f9				ld hl, (store_openaddr) 
5f1b cd 70 1f				call forth_push_numhl 
5f1e					NEXTW 
5f1e cd a7 fd			call parse_vector 
5f21 c3 53 23			jp macro_next 
5f24				endm 
# End of macro NEXTW
5f24			.SCONST5: 
5f24				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
5f24 6d				db WORD_SYS_CORE+89             
5f25 48 5f			dw .SCONST6            
5f27 09				db 8 + 1 
5f28 .. 00			db "FILEPAGE",0              
5f31				endm 
# End of macro CWHEAD
5f31			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
5f31			; | | > [!NOTE] 
5f31			; | | > Compatible with PicoSPINet  
5f31 2a 9d f9				ld hl, (store_openaddr) 
5f34 e5					push hl 
5f35 c1					pop bc 
5f36 16 00				ld d, 0 
5f38 1e 40				ld e, STORE_BLOCK_PHY 
5f3a cd 09 0f				call Div16 
5f3d c5					push bc 
5f3e e1					pop hl 
5f3f cd 70 1f				call forth_push_numhl 
5f42					NEXTW 
5f42 cd a7 fd			call parse_vector 
5f45 c3 53 23			jp macro_next 
5f48				endm 
# End of macro NEXTW
5f48			.SCONST6: 
5f48				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
5f48 6d				db WORD_SYS_CORE+89             
5f49 64 5f			dw .ENDSTORAGE            
5f4b 09				db 8 + 1 
5f4c .. 00			db "READCONT",0              
5f55				endm 
# End of macro CWHEAD
5f55			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
5f55			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
5f55			; | | a further read should, if applicable, be CONCAT to the previous read. 
5f55			; | | > [!NOTE] 
5f55			; | | > Compatible with PicoSPINet  
5f55 3a 9f f9				ld a, (store_readcont) 
5f58 26 00				ld h, 0 
5f5a 6f					ld l, a 
5f5b cd 70 1f				call forth_push_numhl 
5f5e					NEXTW 
5f5e cd a7 fd			call parse_vector 
5f61 c3 53 23			jp macro_next 
5f64				endm 
# End of macro NEXTW
5f64			.ENDSTORAGE: 
5f64			; eof 
# End of file forth_words_storage.asm
5f64			endif 
5f64				include "forth_words_device.asm" 
5f64			; Device related words 
5f64			 
5f64			; | ## Device Words 
5f64			 
5f64			;if SOUND_ENABLE 
5f64			;.NOTE: 
5f64			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
5f64			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
5f64			;		if DEBUG_FORTH_WORDS_KEY 
5f64			;			DMARK "NTE" 
5f64			;			CALLMONITOR 
5f64			;		endif 
5f64			; 
5f64			;	 
5f64			; 
5f64			;		NEXTW 
5f64			;.AFTERSOUND: 
5f64			;endif 
5f64			 
5f64			 
5f64			USE_GPIO: equ 0 
5f64			 
5f64			if USE_GPIO 
5f64			.GP1: 
5f64				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
5f64			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
5f64					NEXTW 
5f64			.GP2: 
5f64				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
5f64			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
5f64			 
5f64					NEXTW 
5f64			 
5f64			.GP3: 
5f64				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
5f64			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
5f64			 
5f64					NEXTW 
5f64			 
5f64			.GP4: 
5f64				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
5f64			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
5f64			 
5f64					NEXTW 
5f64			.SIN: 
5f64			 
5f64			 
5f64			endif 
5f64			 
5f64			 
5f64				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
5f64 33				db WORD_SYS_CORE+31             
5f65 9c 5f			dw .SOUT            
5f67 03				db 2 + 1 
5f68 .. 00			db "IN",0              
5f6b				endm 
# End of macro CWHEAD
5f6b			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
5f6b					if DEBUG_FORTH_WORDS_KEY 
5f6b						DMARK "IN." 
5f6b f5				push af  
5f6c 3a 80 5f			ld a, (.dmark)  
5f6f 32 9d fd			ld (debug_mark),a  
5f72 3a 81 5f			ld a, (.dmark+1)  
5f75 32 9e fd			ld (debug_mark+1),a  
5f78 3a 82 5f			ld a, (.dmark+2)  
5f7b 32 9f fd			ld (debug_mark+2),a  
5f7e 18 03			jr .pastdmark  
5f80 ..			.dmark: db "IN."  
5f83 f1			.pastdmark: pop af  
5f84			endm  
# End of macro DMARK
5f84						CALLMONITOR 
5f84 cd aa fd			call debug_vector  
5f87				endm  
# End of macro CALLMONITOR
5f87					endif 
5f87					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f87 cd 6c 21			call macro_dsp_valuehl 
5f8a				endm 
# End of macro FORTH_DSP_VALUEHL
5f8a			 
5f8a e5					push hl 
5f8b			 
5f8b					; destroy value TOS 
5f8b			 
5f8b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f8b cd 24 22			call macro_forth_dsp_pop 
5f8e				endm 
# End of macro FORTH_DSP_POP
5f8e			 
5f8e					; one value on hl get other one back 
5f8e			 
5f8e c1					pop bc 
5f8f			 
5f8f					; do the sub 
5f8f			;		ex de, hl 
5f8f			 
5f8f ed 68				in l,(c) 
5f91			 
5f91					; save it 
5f91			 
5f91 26 00				ld h,0 
5f93			 
5f93					; TODO push value back onto stack for another op etc 
5f93			 
5f93 cd 70 1f				call forth_push_numhl 
5f96					NEXTW 
5f96 cd a7 fd			call parse_vector 
5f99 c3 53 23			jp macro_next 
5f9c				endm 
# End of macro NEXTW
5f9c			.SOUT: 
5f9c				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
5f9c 34				db WORD_SYS_CORE+32             
5f9d f2 5f			dw .SPIO            
5f9f 04				db 3 + 1 
5fa0 .. 00			db "OUT",0              
5fa4				endm 
# End of macro CWHEAD
5fa4			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
5fa4					if DEBUG_FORTH_WORDS_KEY 
5fa4						DMARK "OUT" 
5fa4 f5				push af  
5fa5 3a b9 5f			ld a, (.dmark)  
5fa8 32 9d fd			ld (debug_mark),a  
5fab 3a ba 5f			ld a, (.dmark+1)  
5fae 32 9e fd			ld (debug_mark+1),a  
5fb1 3a bb 5f			ld a, (.dmark+2)  
5fb4 32 9f fd			ld (debug_mark+2),a  
5fb7 18 03			jr .pastdmark  
5fb9 ..			.dmark: db "OUT"  
5fbc f1			.pastdmark: pop af  
5fbd			endm  
# End of macro DMARK
5fbd						CALLMONITOR 
5fbd cd aa fd			call debug_vector  
5fc0				endm  
# End of macro CALLMONITOR
5fc0					endif 
5fc0			 
5fc0					; get port 
5fc0			 
5fc0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5fc0 cd 6c 21			call macro_dsp_valuehl 
5fc3				endm 
# End of macro FORTH_DSP_VALUEHL
5fc3			 
5fc3 e5					push hl 
5fc4			 
5fc4					; destroy value TOS 
5fc4			 
5fc4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5fc4 cd 24 22			call macro_forth_dsp_pop 
5fc7				endm 
# End of macro FORTH_DSP_POP
5fc7			 
5fc7					; get byte to send 
5fc7			 
5fc7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5fc7 cd 6c 21			call macro_dsp_valuehl 
5fca				endm 
# End of macro FORTH_DSP_VALUEHL
5fca			 
5fca			;		push hl 
5fca			 
5fca					; destroy value TOS 
5fca			 
5fca					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5fca cd 24 22			call macro_forth_dsp_pop 
5fcd				endm 
# End of macro FORTH_DSP_POP
5fcd			 
5fcd					; one value on hl get other one back 
5fcd			 
5fcd			;		pop hl 
5fcd			 
5fcd c1					pop bc 
5fce			 
5fce					if DEBUG_FORTH_WORDS 
5fce						DMARK "OUT" 
5fce f5				push af  
5fcf 3a e3 5f			ld a, (.dmark)  
5fd2 32 9d fd			ld (debug_mark),a  
5fd5 3a e4 5f			ld a, (.dmark+1)  
5fd8 32 9e fd			ld (debug_mark+1),a  
5fdb 3a e5 5f			ld a, (.dmark+2)  
5fde 32 9f fd			ld (debug_mark+2),a  
5fe1 18 03			jr .pastdmark  
5fe3 ..			.dmark: db "OUT"  
5fe6 f1			.pastdmark: pop af  
5fe7			endm  
# End of macro DMARK
5fe7						CALLMONITOR 
5fe7 cd aa fd			call debug_vector  
5fea				endm  
# End of macro CALLMONITOR
5fea					endif 
5fea			 
5fea ed 69				out (c), l 
5fec			 
5fec					NEXTW 
5fec cd a7 fd			call parse_vector 
5fef c3 53 23			jp macro_next 
5ff2				endm 
# End of macro NEXTW
5ff2			 
5ff2			 
5ff2			.SPIO: 
5ff2			 
5ff2			if STORAGE_SE 
5ff2				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
5ff2 51				db WORD_SYS_CORE+61             
5ff3 06 60			dw .SPICEH            
5ff5 07				db 6 + 1 
5ff6 .. 00			db "SPICEL",0              
5ffd				endm 
# End of macro CWHEAD
5ffd			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5ffd			 
5ffd cd 0e 02				call spi_ce_low 
6000			    NEXTW 
6000 cd a7 fd			call parse_vector 
6003 c3 53 23			jp macro_next 
6006				endm 
# End of macro NEXTW
6006			 
6006			.SPICEH: 
6006				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
6006 51				db WORD_SYS_CORE+61             
6007 1a 60			dw .SPIOb            
6009 07				db 6 + 1 
600a .. 00			db "SPICEH",0              
6011				endm 
# End of macro CWHEAD
6011			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
6011			 
6011 cd fd 01				call spi_ce_high 
6014			    NEXTW 
6014 cd a7 fd			call parse_vector 
6017 c3 53 23			jp macro_next 
601a				endm 
# End of macro NEXTW
601a			 
601a			 
601a			.SPIOb: 
601a			 
601a				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
601a 51				db WORD_SYS_CORE+61             
601b 4f 60			dw .SPII            
601d 05				db 4 + 1 
601e .. 00			db "SPIO",0              
6023				endm 
# End of macro CWHEAD
6023			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
6023			 
6023					if DEBUG_FORTH_WORDS_KEY 
6023						DMARK "SPo" 
6023 f5				push af  
6024 3a 38 60			ld a, (.dmark)  
6027 32 9d fd			ld (debug_mark),a  
602a 3a 39 60			ld a, (.dmark+1)  
602d 32 9e fd			ld (debug_mark+1),a  
6030 3a 3a 60			ld a, (.dmark+2)  
6033 32 9f fd			ld (debug_mark+2),a  
6036 18 03			jr .pastdmark  
6038 ..			.dmark: db "SPo"  
603b f1			.pastdmark: pop af  
603c			endm  
# End of macro DMARK
603c						CALLMONITOR 
603c cd aa fd			call debug_vector  
603f				endm  
# End of macro CALLMONITOR
603f					endif 
603f					; get port 
603f			 
603f			 
603f					; get byte to send 
603f			 
603f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
603f cd 6c 21			call macro_dsp_valuehl 
6042				endm 
# End of macro FORTH_DSP_VALUEHL
6042			 
6042			;		push hl    ; u1  
6042			 
6042					; destroy value TOS 
6042			 
6042					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
6042 cd 24 22			call macro_forth_dsp_pop 
6045				endm 
# End of macro FORTH_DSP_POP
6045			 
6045					; one value on hl get other one back 
6045			 
6045			;		pop hl   ; u2 - addr 
6045			 
6045					; TODO Send SPI byte 
6045			 
6045			;		push hl 
6045			;		call spi_ce_low 
6045			;		pop hl 
6045 7d					ld a, l 
6046 cd 0f 01				call spi_send_byte 
6049			;		call spi_ce_high 
6049			 
6049					NEXTW 
6049 cd a7 fd			call parse_vector 
604c c3 53 23			jp macro_next 
604f				endm 
# End of macro NEXTW
604f			 
604f			.SPII: 
604f				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
604f 52				db WORD_SYS_CORE+62             
6050 bb 60			dw .SESEL            
6052 06				db 5 + 1 
6053 .. 00			db "SPII",0              
6058				endm 
# End of macro CWHEAD
6058			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
6058					if DEBUG_FORTH_WORDS_KEY 
6058						DMARK "SPi" 
6058 f5				push af  
6059 3a 6d 60			ld a, (.dmark)  
605c 32 9d fd			ld (debug_mark),a  
605f 3a 6e 60			ld a, (.dmark+1)  
6062 32 9e fd			ld (debug_mark+1),a  
6065 3a 6f 60			ld a, (.dmark+2)  
6068 32 9f fd			ld (debug_mark+2),a  
606b 18 03			jr .pastdmark  
606d ..			.dmark: db "SPi"  
6070 f1			.pastdmark: pop af  
6071			endm  
# End of macro DMARK
6071						CALLMONITOR 
6071 cd aa fd			call debug_vector  
6074				endm  
# End of macro CALLMONITOR
6074					endif 
6074			 
6074					; TODO Get SPI byte 
6074			 
6074 cd 33 01				call spi_read_byte 
6077			 
6077					if DEBUG_FORTH_WORDS 
6077						DMARK "Si2" 
6077 f5				push af  
6078 3a 8c 60			ld a, (.dmark)  
607b 32 9d fd			ld (debug_mark),a  
607e 3a 8d 60			ld a, (.dmark+1)  
6081 32 9e fd			ld (debug_mark+1),a  
6084 3a 8e 60			ld a, (.dmark+2)  
6087 32 9f fd			ld (debug_mark+2),a  
608a 18 03			jr .pastdmark  
608c ..			.dmark: db "Si2"  
608f f1			.pastdmark: pop af  
6090			endm  
# End of macro DMARK
6090						CALLMONITOR 
6090 cd aa fd			call debug_vector  
6093				endm  
# End of macro CALLMONITOR
6093					endif 
6093 26 00				ld h, 0 
6095 6f					ld l, a 
6096					if DEBUG_FORTH_WORDS 
6096						DMARK "Si3" 
6096 f5				push af  
6097 3a ab 60			ld a, (.dmark)  
609a 32 9d fd			ld (debug_mark),a  
609d 3a ac 60			ld a, (.dmark+1)  
60a0 32 9e fd			ld (debug_mark+1),a  
60a3 3a ad 60			ld a, (.dmark+2)  
60a6 32 9f fd			ld (debug_mark+2),a  
60a9 18 03			jr .pastdmark  
60ab ..			.dmark: db "Si3"  
60ae f1			.pastdmark: pop af  
60af			endm  
# End of macro DMARK
60af						CALLMONITOR 
60af cd aa fd			call debug_vector  
60b2				endm  
# End of macro CALLMONITOR
60b2					endif 
60b2 cd 70 1f				call forth_push_numhl 
60b5			 
60b5					NEXTW 
60b5 cd a7 fd			call parse_vector 
60b8 c3 53 23			jp macro_next 
60bb				endm 
# End of macro NEXTW
60bb			 
60bb			 
60bb			 
60bb			.SESEL: 
60bb				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
60bb 66				db WORD_SYS_CORE+82             
60bc 66 61			dw .CARTDEV            
60be 05				db 4 + 1 
60bf .. 00			db "BANK",0              
60c4				endm 
# End of macro CWHEAD
60c4			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV).  | DONE 
60c4			; | | Set to zero to disable storage. 
60c4					if DEBUG_FORTH_WORDS_KEY 
60c4						DMARK "BNK" 
60c4 f5				push af  
60c5 3a d9 60			ld a, (.dmark)  
60c8 32 9d fd			ld (debug_mark),a  
60cb 3a da 60			ld a, (.dmark+1)  
60ce 32 9e fd			ld (debug_mark+1),a  
60d1 3a db 60			ld a, (.dmark+2)  
60d4 32 9f fd			ld (debug_mark+2),a  
60d7 18 03			jr .pastdmark  
60d9 ..			.dmark: db "BNK"  
60dc f1			.pastdmark: pop af  
60dd			endm  
# End of macro DMARK
60dd						CALLMONITOR 
60dd cd aa fd			call debug_vector  
60e0				endm  
# End of macro CALLMONITOR
60e0					endif 
60e0			 
60e0 3e ff				ld a, 255 
60e2 32 95 f9				ld (spi_cartdev), a 
60e5			 
60e5					; get bank 
60e5			 
60e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
60e5 cd 6c 21			call macro_dsp_valuehl 
60e8				endm 
# End of macro FORTH_DSP_VALUEHL
60e8			 
60e8			;		push hl 
60e8			 
60e8					; destroy value TOS 
60e8			 
60e8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
60e8 cd 24 22			call macro_forth_dsp_pop 
60eb				endm 
# End of macro FORTH_DSP_POP
60eb			 
60eb					; one value on hl get other one back 
60eb			 
60eb			;		pop hl 
60eb			 
60eb			 
60eb 0e ff				ld c, SPI_CE_HIGH 
60ed 06 30				ld b, '0'    ; human readable bank number 
60ef			 
60ef 7d					ld a, l 
60f0			 
60f0					if DEBUG_FORTH_WORDS 
60f0						DMARK "BNK" 
60f0 f5				push af  
60f1 3a 05 61			ld a, (.dmark)  
60f4 32 9d fd			ld (debug_mark),a  
60f7 3a 06 61			ld a, (.dmark+1)  
60fa 32 9e fd			ld (debug_mark+1),a  
60fd 3a 07 61			ld a, (.dmark+2)  
6100 32 9f fd			ld (debug_mark+2),a  
6103 18 03			jr .pastdmark  
6105 ..			.dmark: db "BNK"  
6108 f1			.pastdmark: pop af  
6109			endm  
# End of macro DMARK
6109						CALLMONITOR 
6109 cd aa fd			call debug_vector  
610c				endm  
# End of macro CALLMONITOR
610c					endif 
610c			 
610c					; active low 
610c			 
610c			;		cp 0 
610c b7					or a 
610d 28 28				jr z, .bset 
610f fe 01				cp 1 
6111 20 04				jr nz, .b2 
6113 cb 81				res 0, c 
6115 06 31				ld b, '1'    ; human readable bank number 
6117 fe 02		.b2:		cp 2 
6119 20 04				jr nz, .b3 
611b cb 89				res 1, c 
611d 06 32				ld b, '2'    ; human readable bank number 
611f fe 03		.b3:		cp 3 
6121 20 04				jr nz, .b4 
6123 cb 91				res 2, c 
6125 06 33				ld b, '3'    ; human readable bank number 
6127 fe 04		.b4:		cp 4 
6129 20 04				jr nz, .b5 
612b cb 99				res 3, c 
612d 06 34				ld b, '4'    ; human readable bank number 
612f fe 05		.b5:		cp 5 
6131 20 04				jr nz, .bset 
6133 cb a1				res 4, c 
6135 06 35				ld b, '5'    ; human readable bank number 
6137			 
6137			.bset: 
6137 79					ld a, c 
6138 32 92 f9				ld (spi_device),a 
613b 78					ld a, b 
613c 32 91 f9				ld (spi_device_id),a 
613f					if DEBUG_FORTH_WORDS 
613f						DMARK "BN2" 
613f f5				push af  
6140 3a 54 61			ld a, (.dmark)  
6143 32 9d fd			ld (debug_mark),a  
6146 3a 55 61			ld a, (.dmark+1)  
6149 32 9e fd			ld (debug_mark+1),a  
614c 3a 56 61			ld a, (.dmark+2)  
614f 32 9f fd			ld (debug_mark+2),a  
6152 18 03			jr .pastdmark  
6154 ..			.dmark: db "BN2"  
6157 f1			.pastdmark: pop af  
6158			endm  
# End of macro DMARK
6158						CALLMONITOR 
6158 cd aa fd			call debug_vector  
615b				endm  
# End of macro CALLMONITOR
615b					endif 
615b			 
615b					; set default SPI clk pulse time as disabled for BANK use 
615b			 
615b 3e 00				ld a, 0 
615d 32 96 f9				ld (spi_clktime), a 
6160			 
6160					NEXTW 
6160 cd a7 fd			call parse_vector 
6163 c3 53 23			jp macro_next 
6166				endm 
# End of macro NEXTW
6166			 
6166			.CARTDEV: 
6166				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
6166 66				db WORD_SYS_CORE+82             
6167 16 62			dw .ENDDEVICE            
6169 08				db 7 + 1 
616a .. 00			db "CARTDEV",0              
6172				endm 
# End of macro CWHEAD
6172			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). | DONE 
6172			; | | Set to zero to disable devices. 
6172					if DEBUG_FORTH_WORDS_KEY 
6172						DMARK "CDV" 
6172 f5				push af  
6173 3a 87 61			ld a, (.dmark)  
6176 32 9d fd			ld (debug_mark),a  
6179 3a 88 61			ld a, (.dmark+1)  
617c 32 9e fd			ld (debug_mark+1),a  
617f 3a 89 61			ld a, (.dmark+2)  
6182 32 9f fd			ld (debug_mark+2),a  
6185 18 03			jr .pastdmark  
6187 ..			.dmark: db "CDV"  
618a f1			.pastdmark: pop af  
618b			endm  
# End of macro DMARK
618b						CALLMONITOR 
618b cd aa fd			call debug_vector  
618e				endm  
# End of macro CALLMONITOR
618e					endif 
618e			 
618e					; disable se storage bank selection 
618e			 
618e 3e ff				ld a, SPI_CE_HIGH		; ce high 
6190 32 92 f9				ld (spi_device), a 
6193			 
6193					; get bank 
6193			 
6193					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
6193 cd 6c 21			call macro_dsp_valuehl 
6196				endm 
# End of macro FORTH_DSP_VALUEHL
6196			 
6196			;		push hl 
6196			 
6196					; destroy value TOS 
6196			 
6196					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
6196 cd 24 22			call macro_forth_dsp_pop 
6199				endm 
# End of macro FORTH_DSP_POP
6199			 
6199					; one value on hl get other one back 
6199			 
6199			;		pop hl 
6199			 
6199					; active low 
6199			 
6199 0e ff				ld c, 255 
619b			 
619b 7d					ld a, l 
619c					if DEBUG_FORTH_WORDS 
619c						DMARK "CDV" 
619c f5				push af  
619d 3a b1 61			ld a, (.dmark)  
61a0 32 9d fd			ld (debug_mark),a  
61a3 3a b2 61			ld a, (.dmark+1)  
61a6 32 9e fd			ld (debug_mark+1),a  
61a9 3a b3 61			ld a, (.dmark+2)  
61ac 32 9f fd			ld (debug_mark+2),a  
61af 18 03			jr .pastdmark  
61b1 ..			.dmark: db "CDV"  
61b4 f1			.pastdmark: pop af  
61b5			endm  
# End of macro DMARK
61b5						CALLMONITOR 
61b5 cd aa fd			call debug_vector  
61b8				endm  
# End of macro CALLMONITOR
61b8					endif 
61b8			;		cp 0 
61b8 b7					or a 
61b9 28 30				jr z, .cset 
61bb fe 01				cp 1 
61bd 20 02				jr nz, .c2 
61bf cb 81				res 0, c 
61c1 fe 02		.c2:		cp 2 
61c3 20 02				jr nz, .c3 
61c5 cb 89				res 1, c 
61c7 fe 03		.c3:		cp 3 
61c9 20 02				jr nz, .c4 
61cb cb 91				res 2, c 
61cd fe 04		.c4:		cp 4 
61cf 20 02				jr nz, .c5 
61d1 cb 99				res 3, c 
61d3 fe 05		.c5:		cp 5 
61d5 20 02				jr nz, .c6 
61d7 cb a1				res 4, c 
61d9 fe 06		.c6:		cp 6 
61db 20 02				jr nz, .c7 
61dd cb a9				res 5, c 
61df fe 07		.c7:		cp 7 
61e1 20 02				jr nz, .c8 
61e3 cb b1				res 6, c 
61e5 fe 08		.c8:		cp 8 
61e7 20 02				jr nz, .cset 
61e9 cb b9				res 7, c 
61eb 79			.cset:		ld a, c 
61ec 32 95 f9				ld (spi_cartdev),a 
61ef			 
61ef					if DEBUG_FORTH_WORDS 
61ef						DMARK "CD2" 
61ef f5				push af  
61f0 3a 04 62			ld a, (.dmark)  
61f3 32 9d fd			ld (debug_mark),a  
61f6 3a 05 62			ld a, (.dmark+1)  
61f9 32 9e fd			ld (debug_mark+1),a  
61fc 3a 06 62			ld a, (.dmark+2)  
61ff 32 9f fd			ld (debug_mark+2),a  
6202 18 03			jr .pastdmark  
6204 ..			.dmark: db "CD2"  
6207 f1			.pastdmark: pop af  
6208			endm  
# End of macro DMARK
6208						CALLMONITOR 
6208 cd aa fd			call debug_vector  
620b				endm  
# End of macro CALLMONITOR
620b					endif 
620b			 
620b					; set default SPI clk pulse time as 10ms for CARTDEV use 
620b			 
620b 3e 0a				ld a, $0a 
620d 32 96 f9				ld (spi_clktime), a 
6210					NEXTW 
6210 cd a7 fd			call parse_vector 
6213 c3 53 23			jp macro_next 
6216				endm 
# End of macro NEXTW
6216			endif 
6216			 
6216			.ENDDEVICE: 
6216			; eof 
6216			 
# End of file forth_words_device.asm
6216			 
6216			; var handler 
6216			 
6216			 
6216			.VARS: 
6216				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
6216 77				db WORD_SYS_CORE+99             
6217 ca 62			dw .V0            
6219 04				db 3 + 1 
621a .. 00			db "VAR",0              
621e				endm 
# End of macro CWHEAD
621e			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
621e			;| 
621e			;| The variable name should consist of a single letter. e.g. "a" 
621e			;! If a full string is passed then only the first char is looked at 
621e			;| Any other char could exceed bounds checks!  
621e			 
621e					if DEBUG_FORTH_WORDS_KEY 
621e						DMARK "VAR" 
621e f5				push af  
621f 3a 33 62			ld a, (.dmark)  
6222 32 9d fd			ld (debug_mark),a  
6225 3a 34 62			ld a, (.dmark+1)  
6228 32 9e fd			ld (debug_mark+1),a  
622b 3a 35 62			ld a, (.dmark+2)  
622e 32 9f fd			ld (debug_mark+2),a  
6231 18 03			jr .pastdmark  
6233 ..			.dmark: db "VAR"  
6236 f1			.pastdmark: pop af  
6237			endm  
# End of macro DMARK
6237						CALLMONITOR 
6237 cd aa fd			call debug_vector  
623a				endm  
# End of macro CALLMONITOR
623a					endif 
623a			 
623a					FORTH_DSP_VALUEHL 
623a cd 6c 21			call macro_dsp_valuehl 
623d				endm 
# End of macro FORTH_DSP_VALUEHL
623d			 
623d 7e					ld a, (hl)    ; get first char on of the string 
623e			 
623e			 
623e					if DEBUG_FORTH_WORDS 
623e						DMARK "VR1" 
623e f5				push af  
623f 3a 53 62			ld a, (.dmark)  
6242 32 9d fd			ld (debug_mark),a  
6245 3a 54 62			ld a, (.dmark+1)  
6248 32 9e fd			ld (debug_mark+1),a  
624b 3a 55 62			ld a, (.dmark+2)  
624e 32 9f fd			ld (debug_mark+2),a  
6251 18 03			jr .pastdmark  
6253 ..			.dmark: db "VR1"  
6256 f1			.pastdmark: pop af  
6257			endm  
# End of macro DMARK
6257						CALLMONITOR 
6257 cd aa fd			call debug_vector  
625a				endm  
# End of macro CALLMONITOR
625a					endif 
625a					 
625a f5					push af	 
625b					FORTH_DSP_POP 
625b cd 24 22			call macro_forth_dsp_pop 
625e				endm 
# End of macro FORTH_DSP_POP
625e f1					pop af 
625f			 
625f					; convert to upper 
625f			 
625f cd 14 12				call to_upper 
6262					if DEBUG_FORTH_WORDS 
6262						DMARK "Vaa" 
6262 f5				push af  
6263 3a 77 62			ld a, (.dmark)  
6266 32 9d fd			ld (debug_mark),a  
6269 3a 78 62			ld a, (.dmark+1)  
626c 32 9e fd			ld (debug_mark+1),a  
626f 3a 79 62			ld a, (.dmark+2)  
6272 32 9f fd			ld (debug_mark+2),a  
6275 18 03			jr .pastdmark  
6277 ..			.dmark: db "Vaa"  
627a f1			.pastdmark: pop af  
627b			endm  
# End of macro DMARK
627b						CALLMONITOR 
627b cd aa fd			call debug_vector  
627e				endm  
# End of macro CALLMONITOR
627e					endif 
627e 06 41				ld b, 'A' 
6280 90					sub b			; set offset 
6281					if DEBUG_FORTH_WORDS 
6281						DMARK "Vbb" 
6281 f5				push af  
6282 3a 96 62			ld a, (.dmark)  
6285 32 9d fd			ld (debug_mark),a  
6288 3a 97 62			ld a, (.dmark+1)  
628b 32 9e fd			ld (debug_mark+1),a  
628e 3a 98 62			ld a, (.dmark+2)  
6291 32 9f fd			ld (debug_mark+2),a  
6294 18 03			jr .pastdmark  
6296 ..			.dmark: db "Vbb"  
6299 f1			.pastdmark: pop af  
629a			endm  
# End of macro DMARK
629a						CALLMONITOR 
629a cd aa fd			call debug_vector  
629d				endm  
# End of macro CALLMONITOR
629d					endif 
629d cb 27				sla a  
629f				 
629f					 
629f					if DEBUG_FORTH_WORDS 
629f						DMARK "VR2" 
629f f5				push af  
62a0 3a b4 62			ld a, (.dmark)  
62a3 32 9d fd			ld (debug_mark),a  
62a6 3a b5 62			ld a, (.dmark+1)  
62a9 32 9e fd			ld (debug_mark+1),a  
62ac 3a b6 62			ld a, (.dmark+2)  
62af 32 9f fd			ld (debug_mark+2),a  
62b2 18 03			jr .pastdmark  
62b4 ..			.dmark: db "VR2"  
62b7 f1			.pastdmark: pop af  
62b8			endm  
# End of macro DMARK
62b8						CALLMONITOR 
62b8 cd aa fd			call debug_vector  
62bb				endm  
# End of macro CALLMONITOR
62bb					endif 
62bb			 
62bb 21 26 f9				ld hl, cli_var_array2 
62be cd ac 0f				call addatohl 
62c1 cd 70 1f				call forth_push_numhl 
62c4			 
62c4			 
62c4				       NEXTW 
62c4 cd a7 fd			call parse_vector 
62c7 c3 53 23			jp macro_next 
62ca				endm 
# End of macro NEXTW
62ca			.V0: 
62ca				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
62ca 78				db WORD_SYS_CORE+100             
62cb e5 62			dw .V0Q            
62cd 04				db 3 + 1 
62ce .. 00			db "V0!",0              
62d2				endm 
# End of macro CWHEAD
62d2			;| V0! ( u1 -- )  Store value to v0  | DONE 
62d2			 
62d2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
62d2 cd 6c 21			call macro_dsp_valuehl 
62d5				endm 
# End of macro FORTH_DSP_VALUEHL
62d5			 
62d5 11 5a f9				ld de, cli_var_array 
62d8			 
62d8 eb					ex de, hl 
62d9 73					ld (hl), e 
62da 23					inc hl 
62db 72					ld (hl), d 
62dc			 
62dc					; destroy value TOS 
62dc			 
62dc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
62dc cd 24 22			call macro_forth_dsp_pop 
62df				endm 
# End of macro FORTH_DSP_POP
62df			 
62df				       NEXTW 
62df cd a7 fd			call parse_vector 
62e2 c3 53 23			jp macro_next 
62e5				endm 
# End of macro NEXTW
62e5			.V0Q: 
62e5				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
62e5 79				db WORD_SYS_CORE+101             
62e6 f9 62			dw .V1S            
62e8 04				db 3 + 1 
62e9 .. 00			db "V0@",0              
62ed				endm 
# End of macro CWHEAD
62ed			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
62ed 2a 5a f9				ld hl, (cli_var_array) 
62f0 cd 70 1f				call forth_push_numhl 
62f3			 
62f3				       NEXTW 
62f3 cd a7 fd			call parse_vector 
62f6 c3 53 23			jp macro_next 
62f9				endm 
# End of macro NEXTW
62f9			.V1S: 
62f9				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
62f9 7a				db WORD_SYS_CORE+102             
62fa 14 63			dw .V1Q            
62fc 04				db 3 + 1 
62fd .. 00			db "V1!",0              
6301				endm 
# End of macro CWHEAD
6301			;| V1! ( u1 -- )  Store value to v1 | DONE 
6301					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
6301 cd 6c 21			call macro_dsp_valuehl 
6304				endm 
# End of macro FORTH_DSP_VALUEHL
6304			 
6304 11 5c f9				ld de, cli_var_array+2 
6307				 
6307 eb					ex de, hl 
6308 73					ld (hl), e 
6309 23					inc hl 
630a 72					ld (hl), d 
630b			 
630b					; destroy value TOS 
630b			 
630b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
630b cd 24 22			call macro_forth_dsp_pop 
630e				endm 
# End of macro FORTH_DSP_POP
630e				       NEXTW 
630e cd a7 fd			call parse_vector 
6311 c3 53 23			jp macro_next 
6314				endm 
# End of macro NEXTW
6314			.V1Q: 
6314				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
6314 7b				db WORD_SYS_CORE+103             
6315 28 63			dw .V2S            
6317 04				db 3 + 1 
6318 .. 00			db "V1@",0              
631c				endm 
# End of macro CWHEAD
631c			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
631c 2a 5c f9				ld hl, (cli_var_array+2) 
631f cd 70 1f				call forth_push_numhl 
6322				       NEXTW 
6322 cd a7 fd			call parse_vector 
6325 c3 53 23			jp macro_next 
6328				endm 
# End of macro NEXTW
6328			.V2S: 
6328				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
6328 7c				db WORD_SYS_CORE+104             
6329 43 63			dw .V2Q            
632b 04				db 3 + 1 
632c .. 00			db "V2!",0              
6330				endm 
# End of macro CWHEAD
6330			;| V2! ( u1 -- )  Store value to v2 | DONE 
6330					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
6330 cd 6c 21			call macro_dsp_valuehl 
6333				endm 
# End of macro FORTH_DSP_VALUEHL
6333			 
6333 11 5e f9				ld de, cli_var_array+4 
6336				 
6336 eb					ex de, hl 
6337 73					ld (hl), e 
6338 23					inc hl 
6339 72					ld (hl), d 
633a			 
633a					; destroy value TOS 
633a			 
633a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
633a cd 24 22			call macro_forth_dsp_pop 
633d				endm 
# End of macro FORTH_DSP_POP
633d				       NEXTW 
633d cd a7 fd			call parse_vector 
6340 c3 53 23			jp macro_next 
6343				endm 
# End of macro NEXTW
6343			.V2Q: 
6343				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
6343 7d				db WORD_SYS_CORE+105             
6344 57 63			dw .V3S            
6346 04				db 3 + 1 
6347 .. 00			db "V2@",0              
634b				endm 
# End of macro CWHEAD
634b			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
634b 2a 5e f9				ld hl, (cli_var_array+4) 
634e cd 70 1f				call forth_push_numhl 
6351				       NEXTW 
6351 cd a7 fd			call parse_vector 
6354 c3 53 23			jp macro_next 
6357				endm 
# End of macro NEXTW
6357			.V3S: 
6357				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
6357 7c				db WORD_SYS_CORE+104             
6358 72 63			dw .V3Q            
635a 04				db 3 + 1 
635b .. 00			db "V3!",0              
635f				endm 
# End of macro CWHEAD
635f			;| V3! ( u1 -- )  Store value to v3 | DONE 
635f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
635f cd 6c 21			call macro_dsp_valuehl 
6362				endm 
# End of macro FORTH_DSP_VALUEHL
6362			 
6362 11 60 f9				ld de, cli_var_array+6 
6365				 
6365 eb					ex de, hl 
6366 73					ld (hl), e 
6367 23					inc hl 
6368 72					ld (hl), d 
6369			 
6369					; destroy value TOS 
6369			 
6369					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
6369 cd 24 22			call macro_forth_dsp_pop 
636c				endm 
# End of macro FORTH_DSP_POP
636c				       NEXTW 
636c cd a7 fd			call parse_vector 
636f c3 53 23			jp macro_next 
6372				endm 
# End of macro NEXTW
6372			.V3Q: 
6372				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
6372 7d				db WORD_SYS_CORE+105             
6373 86 63			dw .END            
6375 04				db 3 + 1 
6376 .. 00			db "V3@",0              
637a				endm 
# End of macro CWHEAD
637a			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
637a 2a 60 f9				ld hl, (cli_var_array+6) 
637d cd 70 1f				call forth_push_numhl 
6380				       NEXTW 
6380 cd a7 fd			call parse_vector 
6383 c3 53 23			jp macro_next 
6386				endm 
# End of macro NEXTW
6386			 
6386			 
6386			 
6386			 
6386			 
6386			; end of dict marker 
6386			 
6386 00			.END:    db WORD_SYS_END 
6387 00 00			dw 0 
6389 00				db 0 
638a			 
638a			; use to jp here for user dict words to save on macro expansion  
638a			 
638a			user_dict_next: 
638a				NEXTW 
638a cd a7 fd			call parse_vector 
638d c3 53 23			jp macro_next 
6390				endm 
# End of macro NEXTW
6390			 
6390			 
6390			user_exec: 
6390				;    ld hl, <word code> 
6390				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
6390				;    call forthexec 
6390				;    jp user_dict_next   (NEXT) 
6390			        ;    <word code bytes> 
6390 eb				ex de, hl 
6391 2a f4 f3			ld hl,(os_tok_ptr) 
6394				 
6394				FORTH_RSP_NEXT 
6394 cd 17 1f			call macro_forth_rsp_next 
6397				endm 
# End of macro FORTH_RSP_NEXT
6397			 
6397			if DEBUG_FORTH_UWORD 
6397						DMARK "UEX" 
6397 f5				push af  
6398 3a ac 63			ld a, (.dmark)  
639b 32 9d fd			ld (debug_mark),a  
639e 3a ad 63			ld a, (.dmark+1)  
63a1 32 9e fd			ld (debug_mark+1),a  
63a4 3a ae 63			ld a, (.dmark+2)  
63a7 32 9f fd			ld (debug_mark+2),a  
63aa 18 03			jr .pastdmark  
63ac ..			.dmark: db "UEX"  
63af f1			.pastdmark: pop af  
63b0			endm  
# End of macro DMARK
63b0				CALLMONITOR 
63b0 cd aa fd			call debug_vector  
63b3				endm  
# End of macro CALLMONITOR
63b3			endif 
63b3			 
63b3			 
63b3			 
63b3 eb				ex de, hl 
63b4 22 f4 f3			ld (os_tok_ptr), hl 
63b7				 
63b7				; Don't use next - Skips the first word in uword. 
63b7			 
63b7 c3 d4 23			jp exec1 
63ba			;	NEXT 
63ba			 
63ba			 
63ba			; eof 
# End of file forth_wordsv4.asm
63ba			endif 
63ba			;;;;;;;;;;;;;; Debug code 
63ba			 
63ba			 
63ba			;if DEBUG_FORTH_PARSE 
63ba .. 00		.nowordfound: db "No match",0 
63c3 .. 00		.compword:	db "Comparing word ",0 
63d3 .. 00		.nextwordat:	db "Next word at",0 
63e0 .. 00		.charmatch:	db "Char match",0 
63eb			;endif 
63eb			if DEBUG_FORTH_JP 
63eb			.foundword:	db "Word match. Exec..",0 
63eb			endif 
63eb			;if DEBUG_FORTH_PUSH 
63eb .. 00		.enddict:	db "Dict end. Push.",0 
63fb .. 00		.push_str:	db "Pushing string",0 
640a .. 00		.push_num:	db "Pushing number",0 
6419 .. 00		.data_sp:	db "SP:",0 
641d .. 00		.wordinhl:	db "Word in HL (2/0):",0 
642f .. 00		.wordinde:	db "Word in DE (3/0):",0 
6441 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
6453			;endif 
6453			;if DEBUG_FORTH_MALLOC 
6453 .. 00		.push_malloc:	db "Malloc address",0 
6462			;endif 
6462			 
6462			 
6462			 
6462			; display malloc address and current data stack pointer  
6462			 
6462			malloc_error: 
6462 d5				push de 
6463 f5				push af 
6464 e5				push hl 
6465 cd 7c 0d			call clear_display 
6468 11 88 64			ld de, .mallocerr 
646b 3e 00			ld a,0 
646d			;	ld de,os_word_scratch 
646d cd 8e 0d			call str_at_display 
6470 3e 11			ld a, display_row_1+17 
6472 11 9d fd			ld de, debug_mark 
6475 cd 8e 0d			call str_at_display 
6478 cd 9e 0d			call update_display 
647b				;call break_point_state 
647b cd 67 79			call cin_wait 
647e			 
647e			;	ld a, ' ' 
647e			;	ld (os_view_disable), a 
647e cd 81 18			call bp_on 
6481 e1				pop hl 
6482 f1				pop af 
6483 d1				pop de	 
6484				CALLMONITOR 
6484 cd aa fd			call debug_vector  
6487				endm  
# End of macro CALLMONITOR
6487 c9				ret 
6488			 
6488 .. 00		.mallocerr: 	db "Malloc Error",0 
6495			;if DEBUG_FORTH_PUSH 
6495			display_data_sp: 
6495 f5				push af 
6496			 
6496				; see if disabled 
6496			 
6496			 
6496 3a aa fd			ld a, (debug_vector) 
6499 fe c9			cp $C9  ; RET 
649b				;ld a, (os_view_disable) 
649b				;cp '*' 
649b 28 65			jr z, .skipdsp 
649d			 
649d e5				push hl 
649e e5				push hl 
649f e5			push hl 
64a0 cd 7c 0d			call clear_display 
64a3 e1			pop hl 
64a4 7c				ld a,h 
64a5 21 f8 f3			ld hl, os_word_scratch 
64a8 cd a8 11			call hexout 
64ab e1				pop hl 
64ac 7d				ld a,l 
64ad 21 fa f3			ld hl, os_word_scratch+2 
64b0 cd a8 11			call hexout 
64b3 21 fc f3			ld hl, os_word_scratch+4 
64b6			;	ld a,0 
64b6 36 00			ld (hl),0 
64b8 11 f8 f3			ld de,os_word_scratch 
64bb 3e 28				ld a, display_row_2 
64bd cd 8e 0d				call str_at_display 
64c0 11 1d 64			ld de, .wordinhl 
64c3 3e 00			ld a, display_row_1 
64c5			 
64c5 cd 8e 0d				call str_at_display 
64c8 11 9d fd			ld de, debug_mark 
64cb 3e 11			ld a, display_row_1+17 
64cd			 
64cd cd 8e 0d				call str_at_display 
64d0			 
64d0				; display current data stack pointer 
64d0 11 19 64			ld de,.data_sp 
64d3 3e 30				ld a, display_row_2 + 8 
64d5 cd 8e 0d				call str_at_display 
64d8			 
64d8 2a 20 f9			ld hl,(cli_data_sp) 
64db e5				push hl 
64dc 7c				ld a,h 
64dd 21 f8 f3			ld hl, os_word_scratch 
64e0 cd a8 11			call hexout 
64e3 e1				pop hl 
64e4 7d				ld a,l 
64e5 21 fa f3			ld hl, os_word_scratch+2 
64e8 cd a8 11			call hexout 
64eb 21 fc f3			ld hl, os_word_scratch+4 
64ee			;	ld a,0 
64ee 36 00			ld (hl),0 
64f0 11 f8 f3			ld de,os_word_scratch 
64f3 3e 33				ld a, display_row_2 + 11 
64f5 cd 8e 0d				call str_at_display 
64f8			 
64f8			 
64f8 cd 9e 0d			call update_display 
64fb cd c0 0c			call delay1s 
64fe cd c0 0c			call delay1s 
6501 e1				pop hl 
6502			.skipdsp: 
6502 f1				pop af 
6503 c9				ret 
6504			 
6504			display_data_malloc: 
6504			 
6504 f5				push af 
6505 e5				push hl 
6506 e5				push hl 
6507 e5			push hl 
6508 cd 7c 0d			call clear_display 
650b e1			pop hl 
650c 7c				ld a,h 
650d 21 f8 f3			ld hl, os_word_scratch 
6510 cd a8 11			call hexout 
6513 e1				pop hl 
6514 7d				ld a,l 
6515 21 fa f3			ld hl, os_word_scratch+2 
6518 cd a8 11			call hexout 
651b 21 fc f3			ld hl, os_word_scratch+4 
651e			;	ld a,0 
651e 36 00			ld (hl),0 
6520 11 f8 f3			ld de,os_word_scratch 
6523 3e 28				ld a, display_row_2 
6525 cd 8e 0d				call str_at_display 
6528 11 53 64			ld de, .push_malloc 
652b 3e 00			ld a, display_row_1 
652d			 
652d cd 8e 0d				call str_at_display 
6530			 
6530				; display current data stack pointer 
6530 11 19 64			ld de,.data_sp 
6533 3e 30				ld a, display_row_2 + 8 
6535 cd 8e 0d				call str_at_display 
6538			 
6538 2a 20 f9			ld hl,(cli_data_sp) 
653b e5				push hl 
653c 7c				ld a,h 
653d 21 f8 f3			ld hl, os_word_scratch 
6540 cd a8 11			call hexout 
6543 e1				pop hl 
6544 7d				ld a,l 
6545 21 fa f3			ld hl, os_word_scratch+2 
6548 cd a8 11			call hexout 
654b 21 fc f3			ld hl, os_word_scratch+4 
654e			;	ld a,0 
654e 36 00			ld (hl),0 
6550 11 f8 f3			ld de,os_word_scratch 
6553 3e 33				ld a, display_row_2 + 11 
6555 cd 8e 0d				call str_at_display 
6558			 
6558 cd 9e 0d			call update_display 
655b cd c0 0c			call delay1s 
655e cd c0 0c			call delay1s 
6561 e1				pop hl 
6562 f1				pop af 
6563 c9				ret 
6564			;endif 
6564			 
6564			include "forth_autostart.asm" 
6564			; list of commands to perform at system start up 
6564			 
6564			startcmds: 
6564			;	dw test11 
6564			;	dw test12 
6564			;	dw test13 
6564			;	dw test14 
6564			;	dw test15 
6564			;	dw test16 
6564			;	dw test17 
6564			;	dw ifthtest1 
6564			;	dw ifthtest2 
6564			;	dw ifthtest3 
6564			;	dw mmtest1 
6564			;	dw mmtest2 
6564			;	dw mmtest3 
6564			;	dw mmtest4 
6564			;	dw mmtest5 
6564			;	dw mmtest6 
6564			;	dw iftest1 
6564			;	dw iftest2 
6564			;	dw iftest3 
6564			;	dw looptest1 
6564			;	dw looptest2 
6564			;	dw test1 
6564			;	dw test2 
6564			;	dw test3 
6564			;	dw test4 
6564			;	dw game2r 
6564			;	dw game2b1 
6564			;	dw game2b2 
6564			 
6564				; start up words that are actually useful 
6564			 
6564			;    dw spi1 
6564			;    dw spi2 
6564			;    dw spi3 
6564			;    dw spi4 
6564			;    dw spi5 
6564			;    dw spi6 
6564			;    dw spi7 
6564			; 
6564			;    dw spi8 
6564			;    dw spi9 
6564			;    dw spi10 
6564			 
6564			; file editor 
6564			;	dw edit1 
6564			;	dw edit2 
6564			;	dw edit3 
6564			 
6564			;	dw longread 
6564 86 69			dw clrstack 
6566 ba 69			dw type 
6568			;	dw stest 
6568 df 69			dw strncpy 
656a 4f 6b			dw list 
656c 40 6a			dw start1 
656e 50 6a			dw start2 
6570			;	dw start3 
6570			;	dw start3b 
6570			;	dw start3c 
6570			 
6570				; (unit) testing words 
6570			 
6570			;	dw mtesta 
6570			;	dw mtestb 
6570			;	dw mtestc 
6570			;	dw mtestd 
6570			;	dw mteste 
6570			 
6570				; demo/game words 
6570			 
6570			;        dw game3w 
6570			;        dw game3p 
6570			;        dw game3sc 
6570			;        dw game3vsi 
6570			;        dw game3vs 
6570				 
6570			;	dw game2b 
6570			;	dw game2bf 
6570			;	dw game2mba 
6570			;	dw game2mbas 
6570			;	dw game2mb 
6570			 
6570 80 6d			dw game1 
6572 91 6d			dw game1a 
6574 f3 6d			dw game1b 
6576 28 6e			dw game1c 
6578 5e 6e			dw game1d 
657a 8f 6e			dw game1s 
657c a3 6e			dw game1t 
657e b8 6e			dw game1f 
6580 ec 6e			dw game1z 
6582 30 6f			dw game1zz 
6584			 
6584 b9 6b			dw test5 
6586 f1 6b			dw test6 
6588 29 6c			dw test7 
658a 3d 6c			dw test8 
658c 69 6c			dw test9 
658e 7f 6c			dw test10 
6590				 
6590 07 70		        dw ssv5 
6592 eb 6f		        dw ssv4 
6594 cf 6f		        dw ssv3 
6596 99 6f		        dw ssv2 
6598 20 70		        dw ssv1 
659a 68 70		        dw ssv1cpm 
659c			;	dw keyup 
659c			;	dw keydown 
659c			;	dw keyleft 
659c			;	dw keyright 
659c			;	dw 	keyf1 
659c			;	dw keyf2 
659c			;	dw keyf3 
659c			;	dw keyf4 
659c			;	dw keyf5 
659c			;	dw keyf6 
659c			;	dw keyf7 
659c			;	dw keyf8 
659c			;	dw keyf9 
659c			;	dw keyf10 
659c			;	dw keyf11 
659c			;	dw keyf12 
659c			;	dw keytab 
659c			;	dw keycr 
659c			;	dw keyhome 
659c			;	dw keyend 
659c			;	dw keybs 
659c 00 00			db 0, 0	 
659e			 
659e			 
659e			; File Editor 
659e			 
659e			; ( id - ) use 'e' to edit the displayed line 
659e .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
65bf .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
65f4			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
65f4 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
662c			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
662c			 
662c			; SPI Net support words 
662c			 
662c			; v0! = node to send to 
662c			; ( str count - ) 
662c .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
6685			 
6685			; spiputc ( char node - ) 
6685 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
66b9			; spiputc ( u node - ) 
66b9 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
66e7			 
66e7			; spigetc ( - n ) 
66e7 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
6710			 
6710			; getnode ( - n ) 
6710 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
673d			 
673d			; ( str node - )  
673d .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
67a3			; store string ( str i - ) 
67a3			 
67a3			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
67a3 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
67f8			 
67f8			; get string ( addr i -  )    TO FIX 
67f8			 
67f8 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
6850			 
6850			 
6850			; NETCHAT (TODO) 
6850			; Program to allow two nodes to chat with eachother 
6850			; 
6850			; v0 - target node 
6850			;  
6850			; accept input at 0,0 
6850			; if input is string send spitype to target node 
6850			; starting at row 2,0 , while spigetchr is not zero ->  
6850			; 
6850			; 
6850			; TODO add paging of get request 
6850			 
6850			; ( node - ) 
6850 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
686f .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
68c7 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
693f			 
693f			 
693f			; Long read of currently open file 
693f .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
6986			 
6986			; clear stack  
6986			 
6986 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
69ba			 
69ba			; type ( addr count - ) 
69ba .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
69df			 
69df			; some direct memory words 
69df			; strncpy ( len t f -- t ) 
69df			 
69df .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
6a40			 
6a40 .. 00		start1:     	db ": bpon $00 bp ;",0 
6a50 .. 00		start2:     	db ": bpoff $01 bp ;",0 
6a61 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
6adc .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
6b3c			 
6b3c .. 00		tuck:         db ": tuck swap over ;", 0 
6b4f			 
6b4f			; a handy word to list items on the stack 
6b4f			 
6b4f .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
6bb9			 
6bb9			 
6bb9			; test stack  
6bb9			; rnd8 stest 
6bb9			 
6bb9			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
6bb9			 
6bb9			; random malloc and free cycles 
6bb9			 
6bb9			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
6bb9			 
6bb9			; fixed malloc and free cycles 
6bb9			 
6bb9			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
6bb9			 
6bb9			; fixed double string push and drop cycle  
6bb9			 
6bb9			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
6bb9			 
6bb9			; consistent fixed string push and drop cycle  
6bb9			 
6bb9			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6bb9			 
6bb9			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6bb9			 
6bb9			;test1:		db ": aa 1 2 3 ;", 0 
6bb9			;test2:     	db "111 aa 888 999",0 
6bb9			;test3:     	db ": bb 77 ;",0 
6bb9			;test4:     	db "$02 $01 do i . loop bb",0 
6bb9			 
6bb9 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
6bf1 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
6c29 .. 00		test7:     	db ": box hline vline ;",0 
6c3d .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
6c69 .. 00		test9:     	db ": sw $01 adsp world ;",0 
6c7f .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
6ca4			;test11:     	db "hello create .",0 
6ca4			;test12:     	db "hello2 create .",0 
6ca4			 
6ca4			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
6ca4			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
6ca4			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
6ca4			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
6ca4			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
6ca4			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
6ca4			 
6ca4			;iftest1:     	db "$0001 IF cls .",0 
6ca4			;iftest2:     	db "$0000 IF cls .",0 
6ca4			;iftest3:     	db "$0002 $0003 - IF cls .",0 
6ca4			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
6ca4			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
6ca4			 
6ca4			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6ca4			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6ca4			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6ca4			 
6ca4			 
6ca4 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
6cc8 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
6cf8 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
6d1d .. 00		sound4: db ": cha $00 ; ",0 
6d2a .. 00		sound5: db ": chb $20 ; ",0 
6d37 .. 00		sound6: db ": chc $40 ; ",0 
6d44 .. 00		sound7: db ": chd $60 ; ",0 
6d51 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
6d69 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
6d80			 
6d80			 
6d80			 
6d80			 
6d80			; a small guess the number game 
6d80			 
6d80 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
6d91 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
6df3			 
6df3 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
6e28 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
6e5e .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
6e8f .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
6ea3 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
6eb8 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
6eec .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
6f30			 
6f30			; Using 'ga' save a high score across multiple runs using external storage 
6f30			 
6f30 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
6f99			 
6f99			 
6f99			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
6f99			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
6f99			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
6f99			 
6f99			; simple screen saver to test code memory reuse to destruction 
6f99			 
6f99 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
6fcf .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
6feb .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
7007 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
7020 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
7068 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
70bf			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
70bf			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
70bf			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
70bf			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
70bf			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
70bf			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
70bf			 
70bf			 
70bf			 
70bf			; minesweeper/battleship finding game 
70bf			; draws a game board of random ship/mine positions 
70bf			; user enters coords to see if it hits on 
70bf			; game ends when all are hit 
70bf			; when hit or miss says how many may be in the area 
70bf			 
70bf			; setup the game board and then hide it 
70bf			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
70bf			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
70bf			;; prompt for where to target 
70bf			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
70bf			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
70bf			;; TODO see if the entered coords hits or misses pushes char hit of miss 
70bf			;game2mbht:      db ": mbckht nop ;",0 
70bf			;game2mbms:      db ": mbcms nop ;",0 
70bf			; TODO how many might be near by 
70bf			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
70bf			 
70bf			; Game 3 
70bf			 
70bf			; Vert scroller ski game - avoid the trees! 
70bf			 
70bf			; v0 score (ie turns) 
70bf			; v1 player pos 
70bf			; v2 left wall 
70bf			; v3 right wall 
70bf			 
70bf			; Draw side walls randomly 
70bf			 
70bf			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
70bf			 
70bf			; Draw player 
70bf			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
70bf			 
70bf			; TODO Get Key 
70bf			 
70bf			; TODO Move left right 
70bf			 
70bf			; scroll and move walls a bit 
70bf			 
70bf			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
70bf			 
70bf			; main game loop 
70bf			 
70bf			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
70bf			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
70bf			 
70bf			; key board defs 
70bf			 
70bf .. 00		keyup:       db ": keyup $05 ;",0 
70cd .. 00		keydown:       db ": keydown $0a ;",0 
70dd .. 00		keyleft:       db ": keyleft $0b ;",0 
70ed .. 00		keyright:       db ": keyright $0c ;",0 
70fe .. 00		keyf1:       db ": keyf1 $10 ;",0 
710c .. 00		keyf2:       db ": keyf2 $11 ;",0 
711a .. 00		keyf3:       db ": keyf3 $12 ;",0 
7128 .. 00		keyf4:       db ": keyf4 $13 ;",0 
7136 .. 00		keyf5:       db ": keyf5 $14 ;",0 
7144 .. 00		keyf6:       db ": keyf6 $15 ;",0 
7152 .. 00		keyf7:       db ": keyf7 $16 ;",0 
7160 .. 00		keyf8:       db ": keyf8 $17 ;",0 
716e .. 00		keyf9:       db ": keyf9 $18 ;",0 
717c .. 00		keyf10:       db ": keyf10 $19 ;",0 
718b .. 00		keyf11:       db ": keyf11 $1a ;",0 
719a .. 00		keyf12:       db ": keyf12 $1b ;",0 
71a9			 
71a9 .. 00		keytab:       db ": keytab $09 ;",0 
71b8 .. 00		keycr:       db ": keycr $0d ;",0 
71c6 .. 00		keyhome:       db ": keyhome $0e ;",0 
71d6 .. 00		keyend:       db ": keyend $0f ;",0 
71e5 .. 00		keybs:       db ": keybs $08 ;",0 
71f3			 
71f3			   
71f3			 
71f3			 
71f3			 
71f3			; eof 
# End of file forth_autostart.asm
71f3			 
71f3			 
71f3			 
71f3			; stack over and underflow checks 
71f3			 
71f3			; init the words to detect the under/overflow 
71f3			 
71f3			chk_stk_init: 
71f3				; a vague random number to check so we dont get any "lucky" hits 
71f3 3e 2d			ld a, 45 
71f5 6f				ld l, a 
71f6 00				nop 
71f7 3e 17			ld a, 23 
71f9 67				ld h, a 
71fa			 
71fa 22 cf f0			ld (chk_word), hl     ; the word we need to check against 
71fd			 
71fd			;	ld (chk_stund), hl	; stack points.... 
71fd 22 3b fe			ld (chk_stovr), hl 
7200 22 1e f9			ld (chk_ret_und), hl 
7203 22 dc f8			ld (chk_ret_ovr), hl 
7206 22 5a f8			ld (chk_loop_ovr), hl 
7209 22 58 f6			ld (chk_data_ovr), hl 
720c c9				ret 
720d				 
720d			check_stacks: 
720d				; check all stack words 
720d			 
720d e5				push hl 
720e d5				push de 
720f			 
720f			;	ld de,(chk_word) 
720f			;	ld hl, (chk_stund)	; stack points.... 
720f			;	if DEBUG_STK_FAULT 
720f			;		DMARK "FAa" 
720f			;		CALLMONITOR 
720f			;	endif 
720f			;	call cmp16 
720f			;	jp z, .chk_faulta 
720f			; 
720f			;	ld de, sfaultsu 
720f			;	jp .chk_fault 
720f			 
720f 2a 3b fe		.chk_faulta: ld hl, (chk_stovr) 
7212 ed 5b cf f0		ld de,(chk_word) 
7216				if DEBUG_STK_FAULT 
7216					DMARK "FAb" 
7216					CALLMONITOR 
7216				endif 
7216 cd ca 0f			call cmp16 
7219 28 06			jr z, .chk_fault1 
721b 11 bf 72			ld de, sfaultso 
721e c3 70 72			jp .chk_fault 
7221			.chk_fault1:  
7221 2a 1e f9			ld hl, (chk_ret_und) 
7224 ed 5b cf f0		ld de,(chk_word) 
7228				if DEBUG_STK_FAULT 
7228					DMARK "FAU" 
7228					CALLMONITOR 
7228				endif 
7228 cd ca 0f			call cmp16 
722b ca 34 72			jp z, .chk_fault2 
722e 11 cf 72			ld de, sfaultru 
7231 c3 70 72			jp .chk_fault 
7234			.chk_fault2:  
7234 2a dc f8			ld hl, (chk_ret_ovr) 
7237 ed 5b cf f0		ld de,(chk_word) 
723b				if DEBUG_STK_FAULT 
723b					DMARK "FA1" 
723b					CALLMONITOR 
723b				endif 
723b cd ca 0f			call cmp16 
723e ca 47 72			jp z, .chk_fault3 
7241 11 dd 72			ld de, sfaultro 
7244 c3 70 72			jp .chk_fault 
7247			.chk_fault3:  
7247 2a 5a f8			ld hl, (chk_loop_ovr) 
724a ed 5b cf f0		ld de,(chk_word) 
724e				if DEBUG_STK_FAULT 
724e					DMARK "FA2" 
724e					CALLMONITOR 
724e				endif 
724e cd ca 0f			call cmp16 
7251 ca 5a 72			jp z, .chk_fault4 
7254 11 f7 72			ld de, sfaultlo 
7257 c3 70 72			jp .chk_fault 
725a			.chk_fault4:  
725a 2a 58 f6			ld hl, (chk_data_ovr) 
725d ed 5b cf f0		ld de,(chk_word) 
7261				if DEBUG_STK_FAULT 
7261					DMARK "FA3" 
7261					CALLMONITOR 
7261				endif 
7261 cd ca 0f			call cmp16 
7264 ca 6d 72			jp z, .chk_fault5 
7267 11 11 73			ld de, sfaultdo 
726a c3 70 72			jp .chk_fault 
726d			 
726d			 
726d			.chk_fault5:  
726d d1				pop de 
726e e1				pop hl 
726f			 
726f c9				ret 
7270			 
7270 cd 7c 0d		.chk_fault: 	call clear_display 
7273 3e 28				ld a, display_row_2 
7275 cd 8e 0d				call str_at_display 
7278 11 a1 72				   ld de, .stackfault 
727b 3e 00				ld a, display_row_1 
727d cd 8e 0d				call str_at_display 
7280 11 9d fd				    ld de, debug_mark 
7283 3e 11				ld a, display_row_1+17 
7285 cd 8e 0d				call str_at_display 
7288 cd 9e 0d				call update_display 
728b			 
728b				; prompt before entering montior for investigating issue 
728b			 
728b 3e 78			ld a, display_row_4 
728d 11 52 1c			ld de, endprog 
7290			 
7290 cd 9e 0d			call update_display		 
7293			 
7293 cd e8 1e			call next_page_prompt 
7296			 
7296 d1				pop de 
7297 e1				pop hl 
7298 cd a6 1c				call monitor 
729b cd f9 22				call forth_warmstart 
729e c3 a4 1b				jp warmstart_afterauto 
72a1					;jp 0 
72a1					;halt 
72a1			 
72a1			 
72a1			 
72a1 .. 00		.stackfault: 	db "Stack fault:",0 
72ae			 
72ae .. 00		sfaultsu: 	db	"Stack under flow",0 
72bf .. 00		sfaultso: 	db	"Stack over flow",0 
72cf .. 00		sfaultru:	db "RTS underflow",0 
72dd .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
72f7 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
7311 .. 00		sfaultdo:	db "DTS overflow", 0 
731e			 
731e			 
731e			fault_dsp_under: 
731e 11 30 73			ld de, .dsp_under 
7321 c3 e6 73			jp .show_fault 
7324			 
7324			fault_rsp_under: 
7324 11 3e 73			ld de, .rsp_under 
7327 c3 e6 73			jp .show_fault 
732a			fault_loop_under: 
732a 11 4c 73			ld de, .loop_under 
732d c3 e6 73			jp .show_fault 
7330			 
7330 .. 00		.dsp_under: db "DSP Underflow",0 
733e .. 00		.rsp_under: db "RSP Underflow",0 
734c .. 00		.loop_under: db "LOOP Underflow",0 
735b			 
735b			 
735b d5			type_faultn: 	push de 
735c e5					push hl 
735d cd 7c 0d				call clear_display 
7360 11 8a 73				   ld de, .typefaultn 
7363 3e 00				ld a, display_row_1 
7365 cd 8e 0d				call str_at_display 
7368 11 9d fd				    ld de, debug_mark 
736b 3e 11				ld a, display_row_1+17 
736d cd 8e 0d				call str_at_display 
7370 cd 9e 0d				call update_display 
7373			 
7373				; prompt before entering montior for investigating issue 
7373			 
7373 3e 78			ld a, display_row_4 
7375 11 52 1c			ld de, endprog 
7378			 
7378 cd 9e 0d			call update_display		 
737b			 
737b cd e8 1e			call next_page_prompt 
737e			 
737e e5					push hl 
737f d5					push de 
7380 cd a6 1c				call monitor 
7383 cd f9 22				call forth_warmstart 
7386 c3 a4 1b				jp warmstart_afterauto 
7389 76					halt 
738a			 
738a			 
738a .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
73a1			 
73a1 d5			type_faults: 	push de 
73a2 e5					push hl 
73a3 cd 7c 0d				call clear_display 
73a6 11 cf 73				   ld de, .typefaults 
73a9 3e 00				ld a, display_row_1 
73ab cd 8e 0d				call str_at_display 
73ae 11 9d fd				    ld de, debug_mark 
73b1 3e 11				ld a, display_row_1+17 
73b3 cd 8e 0d				call str_at_display 
73b6 cd 9e 0d				call update_display 
73b9			 
73b9				; prompt before entering montior for investigating issue 
73b9			 
73b9 3e 78			ld a, display_row_4 
73bb 11 52 1c			ld de, endprog 
73be			 
73be cd 9e 0d			call update_display		 
73c1			 
73c1 cd e8 1e			call next_page_prompt 
73c4			 
73c4 e1					pop hl 
73c5 d1					pop de 
73c6 cd a6 1c				call monitor 
73c9 cd f9 22				call forth_warmstart 
73cc c3 a4 1b				jp warmstart_afterauto 
73cf			 
73cf			 
73cf .. 00		.typefaults: db "STR Type Expected TOS!",0 
73e6			 
73e6			.show_fault: 	 
73e6 d5					push de 
73e7 cd 7c 0d				call clear_display 
73ea d1					pop de 
73eb 3e 00				ld a, display_row_1 
73ed cd 8e 0d				call str_at_display 
73f0 11 9d fd				    ld de, debug_mark 
73f3 3e 11				ld a, display_row_1+17 
73f5 cd 8e 0d				call str_at_display 
73f8 cd 9e 0d				call update_display 
73fb			 
73fb				; prompt before entering montior for investigating issue 
73fb			 
73fb 3e 78			ld a, display_row_4 
73fd 11 52 1c			ld de, endprog 
7400			 
7400 cd 9e 0d			call update_display		 
7403			 
7403 cd e8 1e			call next_page_prompt 
7406			 
7406 e1					pop hl 
7407 d1					pop de 
7408 cd a6 1c				call monitor 
740b			; do a dump to cli and not warmstart so we preserve all of the uwords.  
740b			; TODO Make optional fault restart to cli or warm boot? 
740b					;jp warmstart 
740b c3 e7 1b				jp cli 
740e 76					halt 
740f			 
740f			 
740f			; handle the auto run of code from files in storage 
740f			 
740f			 
740f			include "forth_startup.asm" 
740f			; Which startup method to use? 
740f			; 
740f			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
740f			; followed by loading of a list of scripts in eeprom 
740f			 
740f			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
740f			; from eeprom 
740f			 
740f			; Select with define in main stubs 
740f			 
740f			if STARTUP_V1 
740f				include "forth_startupv1.asm" 
740f			endif 
740f			if STARTUP_V2 
740f				include "forth_startupv2.asm" 
740f			; Version 2 of the startup  
740f			;  
740f			; Auto load any files in bank 1 that start with a '*' 
740f			; If no se storage then revert to using eprom 
740f			 
740f			 
740f			if STORAGE_SE = 0 
740f			 
740f			sprompt1: db "Startup load...",0 
740f			sprompt2: db "Run? 1=No *=End #=All",0 
740f			 
740f			 
740f			 
740f			 
740f			forth_startup: 
740f				ld hl, startcmds 
740f				ld a, 0 
740f				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
740f			 
740f			.start1:	push hl 
740f				call clear_display 
740f				ld de, sprompt1 
740f			        ld a, display_row_1 
740f				call str_at_display 
740f				ld de, sprompt2 
740f			        ld a, display_row_2 
740f				call str_at_display 
740f				pop hl 
740f				push hl 
740f				ld e,(hl) 
740f				inc hl 
740f				ld d,(hl) 
740f			        ld a, display_row_3 
740f				call str_at_display 
740f				call update_display 
740f			 
740f			 
740f				ld a, (os_last_cmd) 
740f			;	cp 0 
740f				or a 
740f				jr z, .startprompt 
740f				call delay250ms 
740f				jr .startdo 
740f				 
740f				 
740f			 
740f			.startprompt: 
740f			 
740f				ld a,display_row_4 + display_cols - 1 
740f			        ld de, endprg 
740f				call str_at_display 
740f				call update_display 
740f				call delay1s 
740f				call cin_wait 
740f						 
740f				cp '*' 
740f				jr z, .startupend1 
740f				cp '#' 
740f				jr nz, .startno 
740f				ld a, 1 
740f				ld (os_last_cmd),a 
740f				jr .startdo 
740f			.startno:	cp '1' 
740f				jr z,.startnxt  
740f			 
740f				; exec startup line 
740f			.startdo:	 
740f				pop hl 
740f				push hl 
740f				 
740f				ld e,(hl) 
740f				inc hl 
740f				ld d,(hl) 
740f				ex de,hl 
740f			 
740f				push hl 
740f			 
740f				ld a, 0 
740f				;ld a, FORTH_END_BUFFER 
740f				call strlent 
740f				inc hl   ; include zero term to copy 
740f				ld b,0 
740f				ld c,l 
740f				pop hl 
740f				ld de, scratch 
740f				ldir 
740f			 
740f			 
740f				ld hl, scratch 
740f				call forthparse 
740f				call forthexec 
740f				call forthexec_cleanup 
740f			 
740f				ld a, display_row_4 
740f				ld de, endprog 
740f			 
740f				call update_display		 
740f			 
740f				ld a, (os_last_cmd) 
740f			;	cp 0 
740f				or a 
740f				jr nz, .startnxt 
740f				call next_page_prompt 
740f			        call clear_display 
740f				call update_display		 
740f			 
740f				; move onto next startup line? 
740f			.startnxt: 
740f			 
740f				call delay250ms 
740f				pop hl 
740f			 
740f				inc hl 
740f				inc hl 
740f			 
740f				push hl 
740f				ld e, (hl) 
740f				inc hl 
740f				ld d, (hl) 
740f				pop hl 
740f				; TODO replace 0 test 
740f			 
740f				ex de, hl 
740f				call ishlzero 
740f			;	ld a,e 
740f			;	add d 
740f			;	cp 0    ; any left to do? 
740f				ex de, hl 
740f				jp nz, .start1 
740f				jr .startupend 
740f			 
740f			.startupend1: pop hl 
740f			.startupend: 
740f			 
740f				call clear_display 
740f				call update_display 
740f				ret 
740f			endif 
740f			 
740f			 
740f			if STORAGE_SE 
740f			 
740f			;sprompt3: db "Loading from start-up file:",0 
740f .. 00		sprompt3: db "  Searching...",0 
741e			;sprompt4: db "(Any key to stop)",0 
741e			 
741e			 
741e			forth_autoload: 
741e			 
741e				; load block 0 of store 1 
741e				 
741e 3e fe			ld a, $fe      ; bit 0 clear 
7420 32 92 f9			ld (spi_device), a 
7423			 
7423 cd 05 05			call storage_get_block_0 
7426			 
7426 3a cd f9			ld a, (store_page+STORE_0_AUTOFILE) 
7429			 
7429			;	cp 0 
7429 b7				or a 
742a c8				ret z     ; auto start not enabled 
742b			 
742b cd 7c 0d			call clear_display 
742e			 
742e				; set bank 
742e			 
742e 3a cf f9				ld a, (store_page+STORE_0_BANKRUN) 
7431 32 92 f9				ld (spi_device), a 
7434			 
7434			 
7434				; generate a directory of bank 1 and search for flagged files 
7434			 
7434					if DEBUG_FORTH_WORDS_KEY 
7434						DMARK "DIR" 
7434 f5				push af  
7435 3a 49 74			ld a, (.dmark)  
7438 32 9d fd			ld (debug_mark),a  
743b 3a 4a 74			ld a, (.dmark+1)  
743e 32 9e fd			ld (debug_mark+1),a  
7441 3a 4b 74			ld a, (.dmark+2)  
7444 32 9f fd			ld (debug_mark+2),a  
7447 18 03			jr .pastdmark  
7449 ..			.dmark: db "DIR"  
744c f1			.pastdmark: pop af  
744d			endm  
# End of macro DMARK
744d						CALLMONITOR 
744d cd aa fd			call debug_vector  
7450				endm  
# End of macro CALLMONITOR
7450					endif 
7450			 
7450 cd 05 05			call storage_get_block_0 
7453			 
7453 21 ac f9			ld hl, store_page     ; get current id count 
7456 46				ld b, (hl) 
7457 0e 00			ld c, 0    ; count of files   
7459					if DEBUG_FORTH_WORDS 
7459						DMARK "DI1" 
7459 f5				push af  
745a 3a 6e 74			ld a, (.dmark)  
745d 32 9d fd			ld (debug_mark),a  
7460 3a 6f 74			ld a, (.dmark+1)  
7463 32 9e fd			ld (debug_mark+1),a  
7466 3a 70 74			ld a, (.dmark+2)  
7469 32 9f fd			ld (debug_mark+2),a  
746c 18 03			jr .pastdmark  
746e ..			.dmark: db "DI1"  
7471 f1			.pastdmark: pop af  
7472			endm  
# End of macro DMARK
7472						CALLMONITOR 
7472 cd aa fd			call debug_vector  
7475				endm  
# End of macro CALLMONITOR
7475					endif 
7475			 
7475				; check for empty drive 
7475			 
7475 3e 00			ld a, 0 
7477 b8				cp b 
7478 ca c5 74			jp z, .dirdone 
747b			 
747b				; for each of the current ids do a search for them and if found push to stack 
747b			 
747b c5			.diritem:	push bc 
747c 21 40 00				ld hl, STORE_BLOCK_PHY 
747f 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
7481 58					ld e,b 
7482			 
7482 d5					push de 
7483 e5					push hl 
7484 cd 7c 0d			call clear_display 
7487 3e 32			ld a, display_row_2 + 10 
7489 11 0f 74			ld de, sprompt3 
748c cd 8e 0d			call str_at_display 
748f cd d4 0c			call active 
7492 eb				ex de, hl 
7493 3e 2f			ld a, display_row_2 + 7 
7495 cd 8e 0d			call str_at_display 
7498 cd 9e 0d			call update_display 
749b e1				pop hl 
749c d1				pop de 
749d			 
749d			;		if DEBUG_FORTH_WORDS 
749d			;			DMARK "DI2" 
749d			;			CALLMONITOR 
749d			;		endif 
749d			 
749d cd 83 07				call storage_findnextid 
74a0			 
74a0			;		if DEBUG_FORTH_WORDS 
74a0			;			DMARK "DI3" 
74a0			;			CALLMONITOR 
74a0			;		endif 
74a0			 
74a0					; if found hl will be non zero 
74a0			 
74a0 cd d5 0f				call ishlzero 
74a3			;		ld a, l 
74a3			;		add h 
74a3			; 
74a3			;		cp 0 
74a3 28 1d				jr z, .dirnotfound 
74a5			 
74a5					; increase count 
74a5			 
74a5 c1					pop bc	 
74a6 0c					inc c 
74a7 c5					push bc 
74a8					 
74a8			 
74a8					; get file header and push the file name 
74a8			 
74a8 11 ac f9				ld de, store_page 
74ab cd 57 04				call storage_read_block 
74ae			 
74ae					; push file id to stack 
74ae				 
74ae			 
74ae					; is this a file we want to run? 
74ae			 
74ae 21 af f9				ld hl, store_page+3 
74b1 7e					ld a,(hl) 
74b2 fe 2a				cp '*' 
74b4 20 0c				jr nz,  .dirnotfound 
74b6					 
74b6			 
74b6			 
74b6 3a ac f9				ld a, (store_page) 
74b9 d5					push de 
74ba e5					push hl 
74bb c5					push bc 
74bc cd e8 74				call .autorunf 
74bf c1					pop bc 
74c0 e1					pop hl 
74c1 d1					pop de 
74c2			 
74c2			 
74c2			 
74c2				; save this extent 
74c2			 
74c2					; push file name 
74c2			;display file name to run 
74c2			 
74c2			;		ld hl, store_page+3 
74c2			;		if DEBUG_FORTH_WORDS 
74c2			;			DMARK "DI5" 
74c2			;			CALLMONITOR 
74c2			;		endif 
74c2			; 
74c2			;		 
74c2			; 
74c2			;		call forth_push_str 
74c2			;		if DEBUG_FORTH_WORDS 
74c2			;			DMARK "DI6" 
74c2			;			CALLMONITOR 
74c2			;		endif 
74c2			.dirnotfound: 
74c2 c1					pop bc     
74c3 10 b6				djnz .diritem 
74c5				 
74c5			.dirdone:	 
74c5					if DEBUG_FORTH_WORDS 
74c5						DMARK "DI7" 
74c5 f5				push af  
74c6 3a da 74			ld a, (.dmark)  
74c9 32 9d fd			ld (debug_mark),a  
74cc 3a db 74			ld a, (.dmark+1)  
74cf 32 9e fd			ld (debug_mark+1),a  
74d2 3a dc 74			ld a, (.dmark+2)  
74d5 32 9f fd			ld (debug_mark+2),a  
74d8 18 03			jr .pastdmark  
74da ..			.dmark: db "DI7"  
74dd f1			.pastdmark: pop af  
74de			endm  
# End of macro DMARK
74de						CALLMONITOR 
74de cd aa fd			call debug_vector  
74e1				endm  
# End of macro CALLMONITOR
74e1					endif 
74e1			 
74e1 cd 7c 0d				call clear_display 
74e4 cd 9e 0d				call update_display 
74e7			 
74e7 c9					ret 
74e8			 
74e8			 
74e8			 
74e8			 
74e8			 
74e8			.autorunf: 
74e8			 
74e8			 
74e8				; get file id to load from and get the file name to display 
74e8			 
74e8			;		ld a, (store_page+STORE_0_FILERUN) 
74e8			 
74e8 2e 00				ld l, 0 
74ea 67					ld h, a 
74eb 11 ac f9				ld de, store_page 
74ee			 
74ee					if DEBUG_FORTH_WORDS 
74ee						DMARK "ASp" 
74ee f5				push af  
74ef 3a 03 75			ld a, (.dmark)  
74f2 32 9d fd			ld (debug_mark),a  
74f5 3a 04 75			ld a, (.dmark+1)  
74f8 32 9e fd			ld (debug_mark+1),a  
74fb 3a 05 75			ld a, (.dmark+2)  
74fe 32 9f fd			ld (debug_mark+2),a  
7501 18 03			jr .pastdmark  
7503 ..			.dmark: db "ASp"  
7506 f1			.pastdmark: pop af  
7507			endm  
# End of macro DMARK
7507						CALLMONITOR 
7507 cd aa fd			call debug_vector  
750a				endm  
# End of macro CALLMONITOR
750a					endif 
750a cd a7 09				call storage_read 
750d			 
750d					if DEBUG_FORTH_WORDS 
750d						DMARK "ASr" 
750d f5				push af  
750e 3a 22 75			ld a, (.dmark)  
7511 32 9d fd			ld (debug_mark),a  
7514 3a 23 75			ld a, (.dmark+1)  
7517 32 9e fd			ld (debug_mark+1),a  
751a 3a 24 75			ld a, (.dmark+2)  
751d 32 9f fd			ld (debug_mark+2),a  
7520 18 03			jr .pastdmark  
7522 ..			.dmark: db "ASr"  
7525 f1			.pastdmark: pop af  
7526			endm  
# End of macro DMARK
7526						CALLMONITOR 
7526 cd aa fd			call debug_vector  
7529				endm  
# End of macro CALLMONITOR
7529					endif 
7529			 
7529 cd d5 0f				call ishlzero 
752c c8					ret z             ; file not found 
752d			 
752d					; display file name we are loading 
752d			 
752d cd 7c 0d				call clear_display 
7530			 
7530 3e 32				ld a, display_row_2 + 10 
7532 11 af f9				ld de, store_page+3 
7535 cd 8e 0d				call str_at_display 
7538				 
7538			; 
7538			 
7538			;	ld a, display_row_1+5 
7538			;	ld de, sprompt3 
7538			;	call str_at_display 
7538			;	ld a, display_row_2+7 
7538			;	call active 
7538			;	ex de, hl 
7538			;;	ld de, sprompt4 
7538			;	call str_at_display 
7538			; 
7538 cd 9e 0d			call update_display 
753b			 
753b			;	call cin_wait 
753b			;	cp 'n' 
753b			;	ret z 
753b			;	cp 'N' 
753b			;	ret z 
753b			 
753b			;	call delay1s 
753b			 
753b 3a ae f9			ld a, (store_page+2) 
753e 32 9b f9			ld (store_openmaxext), a    ; save count of ext 
7541 3e 01			ld a, 1  
7543 32 9c f9			ld (store_openext), a    ; save count of ext 
7546			 
7546			.autof: 
7546				; begin to read a line from file 
7546			 
7546 21 1a f4			ld hl, os_cli_cmd 
7549 22 18 f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
754c			  
754c			.readext: 
754c 3a 9c f9			ld a, (store_openext) 
754f 6f				ld l , a 
7550				 
7550 3a ac f9			ld a, (store_page) 
7553 67				ld h, a	 
7554 11 ac f9			ld de, store_page 
7557					if DEBUG_FORTH_WORDS 
7557						DMARK "ASl" 
7557 f5				push af  
7558 3a 6c 75			ld a, (.dmark)  
755b 32 9d fd			ld (debug_mark),a  
755e 3a 6d 75			ld a, (.dmark+1)  
7561 32 9e fd			ld (debug_mark+1),a  
7564 3a 6e 75			ld a, (.dmark+2)  
7567 32 9f fd			ld (debug_mark+2),a  
756a 18 03			jr .pastdmark  
756c ..			.dmark: db "ASl"  
756f f1			.pastdmark: pop af  
7570			endm  
# End of macro DMARK
7570						CALLMONITOR 
7570 cd aa fd			call debug_vector  
7573				endm  
# End of macro CALLMONITOR
7573					endif 
7573 cd a7 09				call storage_read 
7576 cd d5 0f			call ishlzero 
7579 c8				ret z 
757a			 
757a			; TODO copy to exec buffer 
757a			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
757a			 
757a				; copy the record buffer to the cli buffer 
757a			 
757a ed 5b 18 f6		ld de, (os_var_array) 
757e 21 ae f9			ld hl, store_page+2 
7581			;	ex de, hl 
7581 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
7584 ed b0			ldir 
7586 ed 53 18 f6		ld (os_var_array), de 
758a				 
758a 3a 9c f9			ld a, (store_openext) 
758d 3c				inc a 
758e 32 9c f9			ld (store_openext), a    ; save count of ext 
7591			 
7591			 
7591			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
7591				 
7591 3a 9f f9			ld a, (store_readcont) 
7594			;	cp 0 
7594 b7				or a 
7595 20 b5			jr nz, .readext 
7597			 
7597			;	jr z, .autoend 
7597			 
7597					if DEBUG_FORTH_WORDS 
7597						DMARK "ASc" 
7597 f5				push af  
7598 3a ac 75			ld a, (.dmark)  
759b 32 9d fd			ld (debug_mark),a  
759e 3a ad 75			ld a, (.dmark+1)  
75a1 32 9e fd			ld (debug_mark+1),a  
75a4 3a ae 75			ld a, (.dmark+2)  
75a7 32 9f fd			ld (debug_mark+2),a  
75aa 18 03			jr .pastdmark  
75ac ..			.dmark: db "ASc"  
75af f1			.pastdmark: pop af  
75b0			endm  
# End of macro DMARK
75b0						CALLMONITOR 
75b0 cd aa fd			call debug_vector  
75b3				endm  
# End of macro CALLMONITOR
75b3					endif 
75b3 e5				push hl	 
75b4 d5				push de 
75b5 cd d4 0c			call active 
75b8 eb				ex de, hl 
75b9 3e 2f			ld a, display_row_2 + 7 
75bb cd 8e 0d			call str_at_display 
75be			 
75be cd 9e 0d			call update_display 
75c1 d1				pop de  
75c2 e1				pop hl 
75c3			;	call delay250ms 
75c3			 
75c3			 
75c3			 
75c3			 
75c3			.autoexec: 
75c3			 
75c3			 
75c3 21 1a f4			ld hl, os_cli_cmd 
75c6					if DEBUG_FORTH_WORDS 
75c6						DMARK "ASx" 
75c6 f5				push af  
75c7 3a db 75			ld a, (.dmark)  
75ca 32 9d fd			ld (debug_mark),a  
75cd 3a dc 75			ld a, (.dmark+1)  
75d0 32 9e fd			ld (debug_mark+1),a  
75d3 3a dd 75			ld a, (.dmark+2)  
75d6 32 9f fd			ld (debug_mark+2),a  
75d9 18 03			jr .pastdmark  
75db ..			.dmark: db "ASx"  
75de f1			.pastdmark: pop af  
75df			endm  
# End of macro DMARK
75df						CALLMONITOR 
75df cd aa fd			call debug_vector  
75e2				endm  
# End of macro CALLMONITOR
75e2					endif 
75e2 cd 99 23			call forthparse 
75e5 cd d1 23			call forthexec 
75e8 cd f3 22			call forthexec_cleanup 
75eb			 
75eb			 
75eb			 
75eb c3 46 75			jp .autof 
75ee			;.autofdone: 
75ee			; 
75ee			;		if DEBUG_FORTH_WORDS 
75ee			;			DMARK "ASx" 
75ee			;			CALLMONITOR 
75ee			;		endif 
75ee			;;	call clear_display 
75ee			;	ret 
75ee			 
75ee			 
75ee			 
75ee			endif 
# End of file forth_startupv2.asm
75ee			endif 
75ee			 
# End of file forth_startup.asm
75ee			 
75ee			; eof 
# End of file forth_kernel.asm
75ee			;include "nascombasic.asm" 
75ee			 
75ee			 
75ee			; find out where the code ends if loaded into RAM (for SC114) 
75ee			;endofcode:  
75ee			;	nop 
75ee			 
75ee			 
75ee			; jump to nmi vector 
75ee			 
75ee			init_nmi: 
75ee 3e c9			ld a, $c9   ; RET 
75f0 32 ad fd			ld (nmi_vector), a 
75f3 c9				ret 
75f4			nmi: 
75f4 e5				push hl 
75f5 d5				push de 
75f6 c5				push bc 
75f7 f5				push af 
75f8 cd ad fd			call nmi_vector 
75fb f5				push af 
75fc c5				push bc 
75fd d5				push de 
75fe e5				push hl 
75ff ed 4d			reti 
7601			 
7601			 
7601			; eof 
7601			 
# End of file main.asm
7601			include "firmware_lcd_4x40.asm" 
7601			; **********************************************************************  
7601			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
7601			; **********************************************************************  
7601			;  
7601			; **  Written as a Small Computer Monitor App  
7601			; **  www.scc.me.uk  
7601			;  
7601			; History  
7601			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
7601			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
7601			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
7601			;  
7601			; **********************************************************************  
7601			;  
7601			; This program is an example of one of the methods of interfacing an   
7601			; alphanumeric LCD module.   
7601			;  
7601			; In this example the display is connected to either a Z80 PIO or a   
7601			; simple 8-bit output port.   
7601			;  
7601			; This interfacing method uses 4-bit data mode and uses time delays  
7601			; rather than polling the display's ready status. As a result the   
7601			; interface only requires 6 simple output lines:  
7601			;   Output bit 0 = not used  
7601			;   Output bit 1 = not used  
7601			;   Output bit 2 = RS         High = data, Low = instruction  
7601			;   Output bit 3 = E          Active high  
7601			;   Output bit 4 = DB4  
7601			;   Output bit 5 = DB5  
7601			;   Output bit 6 = DB6  
7601			;   Output bit 7 = DB7  
7601			; Display's R/W is connected to 0v so it is always in write mode  
7601			;  
7601			; This set up should work with any system supporting the RC2014 bus  
7601			  
7601			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
7601			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
7601			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
7601			;  
7601			; **********************************************************************  
7601			  
7601			; Additonal for 4x40. E1 and E2 instead of just E   
7601			; TODO swipe vidout signal on port a to activate E2  
7601			  
7601			; **********************************************************************  
7601			; **  Constants  
7601			; **********************************************************************  
7601			; LCD constants required by LCD support module  
7601			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
7601			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
7601			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
7601			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
7601			; TODO Decide which E is being set  
7601			kLCDWidth:  EQU display_cols             ;Width in characters  
7601			  
7601			; **********************************************************************  
7601			; **  Code library usage  
7601			; **********************************************************************  
7601			  
7601			; send character to current cursor position  
7601			; wraps and/or scrolls screen automatically  
7601			  
7601			  
7601			  
7601			lcd_init:  
7601			  
7601			; SCMonAPI functions used  
7601			  
7601			; Alphanumeric LCD functions used  
7601			; no need to specify specific functions for this module  
7601			  
7601 3e cf		            LD   A, 11001111b  
7603 d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
7605 3e 00		            LD   A, 00000000b  
7607 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
7609			  
7609			; Initialise alphanumeric LCD module  
7609 3e 00				ld a, 0  
760b 32 fd fa				ld (display_lcde1e2), a  
760e cd 8f 76		            CALL fLCD_Init      ;Initialise LCD module  
7611 3e 01				ld a, 1  
7613 32 fd fa				ld (display_lcde1e2), a  
7616 cd 8f 76		            CALL fLCD_Init      ;Initialise LCD module  
7619			  
7619 c9				ret  
761a			  
761a			;  
761a			;;  
761a			; lcd functions  
761a			;  
761a			;  
761a			  
761a			; what is at cursor position   
761a			  
761a			;get_cursor:	ld de, (cursor_row)   ;  row + col  
761a			;		call curptr  
761a			;		ret  
761a			  
761a			  
761a			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
761a			  
761a			curptr:  
761a c5				push bc  
761b 21 e3 fc			ld hl, display_fb0  
761e			cpr:	  
761e				; loop for cursor whole row  
761e 0e 28			ld c, display_cols  
7620 23			cpr1:	inc hl  
7621 0d				dec c  
7622 20 fc			jr nz, cpr1  
7624 05				dec b  
7625 20 f7			jr nz, cpr  
7627			  
7627				; add col	  
7627			  
7627 23			cpr2:	inc hl  
7628 1d				dec e  
7629 20 fc			jr nz, cpr2  
762b			  
762b c1				pop bc  
762c c9				ret  
762d				  
762d			  
762d			  
762d			  
762d			  
762d			; write the frame buffer given in hl to hardware   
762d 22 fb fa		write_display: ld (display_write_tmp), hl 	   
7630 3e 00			ld a, kLCD_Line1  
7632 cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7635 06 28			ld b, display_cols  
7637 ed 5b fb fa		ld de, (display_write_tmp)  
763b cd 87 76			call write_len_string  
763e				  
763e				  
763e 2a fb fa			ld hl, (display_write_tmp)  
7641 11 28 00			ld de, display_cols  
7644 19				add hl,de  
7645 22 fb fa			ld (display_write_tmp),hl  
7648			  
7648				  
7648 3e 28			ld a, kLCD_Line2  
764a cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
764d 06 28			ld b, display_cols  
764f ed 5b fb fa		ld de, (display_write_tmp)  
7653 cd 87 76			call write_len_string  
7656				  
7656 2a fb fa			ld hl, (display_write_tmp)  
7659 11 28 00			ld de, display_cols  
765c 19				add hl,de  
765d 22 fb fa			ld (display_write_tmp),hl  
7660			  
7660				  
7660 3e 50			ld a, kLCD_Line3  
7662 cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7665 06 28			ld b, display_cols  
7667 ed 5b fb fa		ld de, (display_write_tmp)  
766b cd 87 76			call write_len_string  
766e				  
766e 2a fb fa			ld hl, (display_write_tmp)  
7671 11 28 00			ld de, display_cols  
7674 19				add hl,de  
7675 22 fb fa			ld (display_write_tmp),hl  
7678			  
7678				  
7678 3e 78			ld a, kLCD_Line4  
767a cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
767d 06 28			ld b, display_cols  
767f ed 5b fb fa		ld de, (display_write_tmp)  
7683 cd 87 76			call write_len_string  
7686 c9					ret  
7687				  
7687				; write out a fixed length string given in b from de  
7687			  
7687 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
7688 cd f4 76		            CALL fLCD_Data      ;Write character to display  
768b 13				inc de  
768c 10 f9			djnz write_len_string  
768e c9				ret  
768f			  
768f			; Some other things to do  
768f			;            LD   A, kLCD_Clear ;Display clear  
768f			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
768f			;            LD   A, kLCD_Under ;Display on with underscore cursor  
768f			;            LD   A, kLCD_On     ;Display on with no cursor  
768f			;            ;LD   A, kLCD_Off   ;Display off  
768f			;            CALL fLCD_Inst      ;Send instruction to display  
768f			;  
768f			;  
768f			;            halt  
768f			;  
768f			;  
768f			;MsgHello:   DB  "Hello World!",0  
768f			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
768f			  
768f			; Custom characters 5 pixels wide by 8 pixels high  
768f			; Up to 8 custom characters can be defined  
768f			;BitMaps:      
768f			;; Character 0x00 = Battery icon  
768f			;            DB  01110b  
768f			;            DB  11011b  
768f			;            DB  10001b  
768f			;            DB  10001b  
768f			;            DB  11111b  
768f			;            DB  11111b  
768f			;            DB  11111b  
768f			;            DB  11111b  
768f			;; Character 0x01 = Bluetooth icon  
768f			;            DB  01100b  
768f			;            DB  01010b  
768f			;            DB  11100b  
768f			;            DB  01000b  
768f			;            DB  11100b  
768f			;            DB  01010b  
768f			;            DB  01100b  
768f			;            DB  00000b  
768f			;  
768f			  
768f			  
768f			; **********************************************************************  
768f			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
768f			; **********************************************************************  
768f			;  
768f			; **  Written as a Small Computer Monitor App   
768f			; **  Version 0.1 SCC 2018-05-16  
768f			; **  www.scc.me.uk  
768f			;  
768f			; **********************************************************************  
768f			;  
768f			; This module provides support for alphanumeric LCD modules using with  
768f			; *  HD44780 (or compatible) controller  
768f			; *  5 x 7 pixel fonts  
768f			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
768f			; *  Interface via six digital outputs to the display (see below)  
768f			;  
768f			; LCD module pinout:  
768f			;   1  Vss   0v supply  
768f			;   2  Vdd   5v supply  
768f			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
768f			;   4  RS    High = data, Low = instruction  
768f			;   5  R/W   High = Read, Low = Write  
768f			;   6  E     Enable signal (active high)  
768f			;   7  DB0   Data bit 0  
768f			;   8  DB1   Data bit 1  
768f			;   9  DB2   Data bit 2  
768f			;  10  DB3   Data bit 3  
768f			;  11  DB4   Data bit 4  
768f			;  12  DB5   Data bit 5  
768f			;  13  DB6   Data bit 6  
768f			;  14  DB7   Data bit 7  
768f			;  15  A     Backlight anode (+)  
768f			;  16  K     Backlight cathode (-)  
768f			;  
768f			; This interfacing method uses 4-bit data mode and uses time delays  
768f			; rather than polling the display's ready status. As a result the   
768f			; interface only requires 6 simple output lines:  
768f			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
768f			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
768f			;   LCD DB4 = Microcomputer output port bit 4  
768f			;   LCD DB5 = Microcomputer output port bit 5  
768f			;   LCD DB6 = Microcomputer output port bit 6  
768f			;   LCD DB7 = Microcomputer output port bit 7  
768f			; Display's R/W is connected to 0v so it is always in write mode  
768f			; All 6 connections must be on the same port address <kLCDPrt>  
768f			; This method also allows a decent length of cable from micro to LCD  
768f			;  
768f			; **********************************************************************  
768f			;  
768f			; To include the code for any given function provided by this module,   
768f			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
768f			; the parent source file.  
768f			; For example:  #REQUIRES   uHexPrefix  
768f			;  
768f			; Also #INCLUDE this file at some point after the #REQUIRES statements  
768f			; in the parent source file.  
768f			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
768f			;  
768f			; These are the function names provided by this module:  
768f			; fLCD_Init                     ;Initialise LCD  
768f			; fLCD_Inst                     ;Send instruction to LCD  
768f			; fLCD_Data                     ;Send data byte to LCD  
768f			; fLCD_Pos                      ;Position cursor  
768f			; fLCD_Str                      ;Display string  
768f			; fLCD_Def                      ;Define custom character  
768f			;  
768f			; **********************************************************************  
768f			;  
768f			; Requires SCMonAPI.asm to also be included in the project  
768f			;  
768f			  
768f			  
768f			; **********************************************************************  
768f			; **  Constants  
768f			; **********************************************************************  
768f			  
768f			; Constants that must be defined externally  
768f			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
768f			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
768f			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
768f			;kLCDWidth: EQU 20             ;Width in characters  
768f			  
768f			; general line offsets in any frame buffer  
768f			  
768f			  
768f			display_row_1: equ 0  
768f			display_row_2: equ display_row_1+display_cols  
768f			display_row_3: equ display_row_2 + display_cols  
768f			display_row_4: equ display_row_3 + display_cols  
768f			;display_row_4_eol:   
768f			  
768f			  
768f			; Cursor position values for the start of each line  
768f			  
768f			; E  
768f			kLCD_Line1: EQU 0x00   
768f			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
768f			; E1  
768f			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
768f			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
768f			  
768f			; Instructions to send as A register to fLCD_Inst  
768f			kLCD_Clear: EQU 00000001b     ;LCD clear  
768f			kLCD_Off:   EQU 00001000b     ;LCD off  
768f			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
768f			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
768f			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
768f			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
768f			  
768f			; Constants used by this code module  
768f			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
768f			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
768f			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
768f			  
768f			  
768f			  
768f			; **********************************************************************  
768f			; **  LCD support functions  
768f			; **********************************************************************  
768f			  
768f			; Initialise alphanumeric LCD module  
768f			; LCD control register codes:  
768f			;   DL   0 = 4-bit mode        1 = 8-bit mode  
768f			;   N    0 = 1-line mode       1 = 2-line mode  
768f			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
768f			;   D    0 = Display off       1 = Display on  
768f			;   C    0 = Cursor off        1 = Cursor on  
768f			;   B    0 = Blinking off      1 = Blinking on  
768f			;   ID   0 = Decrement mode    1 = Increment mode  
768f			;   SH   0 = Entire shift off  1 = Entire shift on  
768f 3e 28		fLCD_Init:  LD   A, 40  
7691 cd b6 77		            CALL LCDDelay       ;Delay 40ms after power up  
7694			; For reliable reset set 8-bit mode - 3 times  
7694 cd 86 77		            CALL WrFn8bit       ;Function = 8-bit mode  
7697 cd 86 77		            CALL WrFn8bit       ;Function = 8-bit mode  
769a cd 86 77		            CALL WrFn8bit       ;Function = 8-bit mode  
769d			; Set 4-bit mode  
769d cd 82 77		            CALL WrFn4bit       ;Function = 4-bit mode  
76a0 cd b4 77		            CALL LCDDelay1      ;Delay 37 us or more  
76a3			; Function set  
76a3 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
76a5 cd b8 76		            CALL fLCD_Inst      ;2 line, display on  
76a8			; Display On/Off control  
76a8 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
76aa cd b8 76		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
76ad			; Display Clear  
76ad 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
76af cd b8 76		            CALL fLCD_Inst      ;Clear display  
76b2			; Entry mode  
76b2 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
76b4 cd b8 76		            CALL fLCD_Inst      ;Increment mode, shift off  
76b7			; Display module now initialised  
76b7 c9			            RET  
76b8			; ok to here  
76b8			  
76b8			; Write instruction to LCD  
76b8			;   On entry: A = Instruction byte to be written  
76b8			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
76b8 f5			fLCD_Inst:  PUSH AF  
76b9 f5			            PUSH AF  
76ba cd cc 76		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
76bd f1			            POP  AF  
76be 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
76bf 17			            RLA  
76c0 17			            RLA  
76c1 17			            RLA  
76c2 cd cc 76		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
76c5 3e 02		            LD   A, 2  
76c7 cd b6 77		            CALL LCDDelay       ;Delay 2 ms to complete   
76ca f1			            POP  AF  
76cb c9			            RET  
76cc			Wr4bits:   
76cc f5					push af  
76cd 3a fd fa				ld a, (display_lcde1e2)  
76d0 fe 00				cp 0     ; e  
76d2 20 10				jr nz, .wea2	  
76d4 f1					pop af  
76d5 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
76d7 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
76d9 cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
76db cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
76dd d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
76df cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
76e1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
76e3 c9			            RET  
76e4 f1			.wea2:		pop af  
76e5 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
76e7 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
76e9 cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
76eb cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
76ed d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
76ef cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
76f1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
76f3 c9			            RET  
76f4			  
76f4			  
76f4			; Write data to LCD  
76f4			;   On entry: A = Data byte to be written  
76f4			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
76f4 f5			fLCD_Data:  PUSH AF  
76f5 f5			            PUSH AF  
76f6 cd 08 77		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
76f9 f1			            POP  AF  
76fa 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
76fb 17			            RLA  
76fc 17			            RLA  
76fd 17			            RLA  
76fe cd 08 77		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
7701 3e 96		            LD   A, 150  
7703 3d			Wait:      DEC  A              ;Wait a while to allow data   
7704 20 fd		            JR   NZ, Wait      ;  write to complete  
7706 f1			            POP  AF  
7707 c9			            RET  
7708			Wr4bitsa:     
7708 f5					push af  
7709 3a fd fa				ld a, (display_lcde1e2)  
770c fe 00				cp 0     ; e1  
770e 20 16				jr nz, .we2	  
7710 f1					pop af  
7711 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7713 cb d7		            SET  kLCDBitRS, A  
7715 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7717 cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
7719 cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
771b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
771d cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
771f d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7721 cb 97		            RES  kLCDBitRS, A  
7723 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7725 c9			            RET  
7726 f1			.we2:		pop af  
7727 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7729 cb d7		            SET  kLCDBitRS, A  
772b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
772d cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
772f cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
7731 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
7733 cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
7735 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7737 cb 97		            RES  kLCDBitRS, A  
7739 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
773b c9			            RET  
773c			  
773c			  
773c			; Position cursor to specified location  
773c			;   On entry: A = Cursor position  
773c			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
773c f5			fLCD_Pos:   PUSH AF  
773d					; at this point set the E1 or E2 flag depending on position  
773d			  
773d c5					push bc  
773e			;		push af  
773e 06 00				ld b, 0  
7740 4f					ld c, a  
7741 3e 4f				ld a, kLCD_Line3-1  
7743 b7			 		or a      ;clear carry flag  
7744 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
7745 38 04				jr c, .pe1  
7747			  
7747					; E selection  
7747 cb 80				res 0, b         ; bit 0 unset e  
7749			;		pop af    ; before line 3 so recover orig pos  
7749			;		ld c, a    ; save for poking back  
7749 18 06				jr .peset	          
774b			.pe1:          	; E2 selection  
774b cb c0				set 0, b         ; bit 0 set e1  
774d 79					ld a, c  
774e de 4f				sbc a, kLCD_Line3-1  
7750 4f					ld c, a	         ; save caculated offset  
7751			;		pop af     ; bin this original value now we have calculated form  
7751			  
7751			.peset:		; set bit  
7751 78					ld a, b  
7752 32 fd fa				ld (display_lcde1e2), a 	  
7755 79					ld a, c  
7756 c1					pop bc  
7757			  
7757 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
7759 cd b8 76		            CALL fLCD_Inst      ;Write instruction to LCD  
775c f1			            POP  AF  
775d c9			            RET  
775e			  
775e			  
775e			; Output text string to LCD  
775e			;   On entry: DE = Pointer to null terminated text string  
775e			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
775e 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
775f b7			            OR   A              ;Null terminator?  
7760 c8			            RET  Z              ;Yes, so finished  
7761 cd f4 76		            CALL fLCD_Data      ;Write character to display  
7764 13			            INC  DE             ;Point to next character  
7765 18 f7		            JR   fLCD_Str       ;Repeat  
7767 c9					ret  
7768			  
7768			; Define custom character  
7768			;   On entry: A = Character number (0 to 7)  
7768			;             DE = Pointer to character bitmap data  
7768			;   On exit:  A = Next character number  
7768			;             DE = Next location following bitmap  
7768			;             BC HL IX IY I AF' BC' DE' HL' preserved  
7768			; Character is   
7768 c5			fLCD_Def:   PUSH BC  
7769 f5			            PUSH AF  
776a 07			            RLCA                ;Calculate location  
776b 07			            RLCA                ;  for bitmap data  
776c 07			            RLCA                ;  = 8 x CharacterNumber  
776d f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
776f cd b8 76		            CALL fLCD_Inst      ;Write instruction to LCD  
7772 06 00		            LD   B, 0  
7774 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
7775 cd f4 76		            CALL fLCD_Data      ;Write byte to display  
7778 13			            INC  DE             ;Point to next byte  
7779 04			            INC  B              ;Count bytes  
777a cb 58		            BIT  3, B           ;Finish all 8 bytes?  
777c 28 f6		            JR   Z, Loop       ;No, so repeat  
777e f1			            POP  AF  
777f 3c			            INC  A              ;Increment character number  
7780 c1			            POP  BC  
7781 c9			            RET  
7782			  
7782			  
7782			; **********************************************************************  
7782			; **  Private functions  
7782			; **********************************************************************  
7782			  
7782			; Write function to LCD  
7782			;   On entry: A = Function byte to be written  
7782			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7782 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
7784 18 02		            JR   WrFunc  
7786 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
7788 f5			WrFunc:     PUSH AF  
7789 f5					push af  
778a 3a fd fa				ld a, (display_lcde1e2)  
778d fe 00				cp 0     ; e1  
778f 20 0f				jr nz, .wfea2	  
7791 f1					pop af  
7792 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7794 cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
7796 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
7798 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
779a cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
779c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
779e 18 0d			jr .wfskip  
77a0 f1			.wfea2:		pop af  
77a1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
77a3 cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
77a5 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
77a7 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
77a9 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
77ab d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
77ad 3e 05		.wfskip:            LD  A, 5  
77af cd b6 77		            CALL LCDDelay       ;Delay 5 ms to complete  
77b2 f1			            POP  AF  
77b3 c9			            RET  
77b4			  
77b4			  
77b4			; Delay in milliseconds  
77b4			;   On entry: A = Number of milliseconds delay  
77b4			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
77b4 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
77b6 d5			LCDDelay:   PUSH DE  
77b7 5f			            LD   E, A           ;Delay by 'A' ms  
77b8 16 00		            LD   D, 0  
77ba cd a5 0c		            CALL aDelayInMS  
77bd d1			            POP  DE  
77be c9			            RET  
77bf			  
77bf			  
77bf			testlcd:  
77bf 3e 00			ld a, kLCD_Line1  
77c1 cd 3c 77			call fLCD_Pos  
77c4 06 28			ld b, 40  
77c6 11 f4 77			ld de, .ttext1  
77c9 cd 87 76			call write_len_string  
77cc			  
77cc 3e 28			ld a, kLCD_Line2  
77ce cd 3c 77			call fLCD_Pos  
77d1 06 28			ld b, 40  
77d3 11 1d 78			ld de, .ttext2  
77d6 cd 87 76			call write_len_string  
77d9 3e 50			ld a, kLCD_Line3  
77db cd 3c 77			call fLCD_Pos  
77de 06 28			ld b, 40  
77e0 11 46 78			ld de, .ttext3  
77e3 cd 87 76			call write_len_string  
77e6 3e 78			ld a, kLCD_Line4  
77e8 cd 3c 77			call fLCD_Pos  
77eb 06 28			ld b, 40  
77ed 11 6f 78			ld de, .ttext4  
77f0 cd 87 76			call write_len_string  
77f3			  
77f3 76				halt  
77f4			  
77f4			  
77f4 .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
781d .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
7846 .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
786f .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
7898			   
7898			  
7898			  
7898			; eof  
7898			  
# End of file firmware_lcd_4x40.asm
7898			;include "firmware_lcd_4x20.asm" 
7898			include "firmware_key_5x10.asm" 
7898			; 5 x 10 decade counter scanner  
7898			  
7898			  
7898			; TODO do cursor shape change for shift keys  
7898			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
7898			  
7898			  
7898			; bit mask for each scan column and row for teing the matrix  
7898			  
7898			  
7898			key_init:  
7898			  
7898			; SCMonAPI functions used  
7898			  
7898			; Alphanumeric LCD functions used  
7898			; no need to specify specific functions for this module  
7898			  
7898			  
7898 3e cf		            LD   A, 11001111b  
789a d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
789c			;            LD   A, 00000000b  
789c 3e 1f		            LD   A, 00011111b  
789e d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
78a0			  
78a0			  
78a0				; TODO Configure cursor shapes  
78a0			  
78a0				; Load cursor shapes   
78a0 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
78a2 11 b2 78		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
78a5 06 02		            LD   B, 2           ;Number of characters to define  
78a7 cd 68 77		.DefLoop:   CALL fLCD_Def       ;Define custom character  
78aa 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
78ac			  
78ac 3e 01				ld a, 1  
78ae 32 f3 fa			ld (cursor_shape),a  
78b1 c9				ret  
78b2			  
78b2			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
78b2			; Up to 8 custom characters can be defined  
78b2			.cursor_shapes:      
78b2			;; Character 0x00 = Normal  
78b2 1f			            DB  11111b  
78b3 1f			            DB  11111b  
78b4 1f			            DB  11111b  
78b5 1f			            DB  11111b  
78b6 1f			            DB  11111b  
78b7 1f			            DB  11111b  
78b8 1f			            DB  11111b  
78b9 1f			            DB  11111b  
78ba			;; Character 0x01 = Modifier  
78ba 1f			            DB  11111b  
78bb 1b			            DB  11011b  
78bc 1b			            DB  11011b  
78bd 1b			            DB  11011b  
78be 1b			            DB  11011b  
78bf 1f			            DB  11111b  
78c0 1b			            DB  11011b  
78c1 1f			            DB  11111b  
78c2			  
78c2			  
78c2			  
78c2			  
78c2			; Display custom character 0  
78c2			;            LD   A, kLCD_Line1+14  
78c2			;            CALL fLCD_Pos       ;Position cursor to location in A  
78c2			;            LD   A, 0  
78c2			;            CALL fLCD_Data      ;Write character in A at cursor  
78c2			  
78c2			; Display custom character 1  
78c2			;            LD   A, kLCD_Line2+14  
78c2			;            CALL fLCD_Pos      ;Position cursor to location in A  
78c2			;            LD   A, 1  
78c2			;            CALL fLCD_Data     ;Write character in A at cursor  
78c2			  
78c2			; keyboard scanning   
78c2			  
78c2			; character in from keyboard  
78c2			  
78c2			; mapping for the pcb layout  
78c2			  
78c2			.matrix_to_char:  
78c2 .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
78cd .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
78d8 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
78e3 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
78ee .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
78f9			.matrix_to_shift:  
78f9			  
78f9 .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
7904 .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
790f 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
791a 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
7925 .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
7930			  
7930			.matrix_to_symbolshift:  
7930			  
7930 fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
793b .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
7946 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
7951			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
7951 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
795c .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
7967			  
7967			  
7967			  
7967			; mapping for a simple straight through breadboard layout  
7967			  
7967			;.matrix_to_char:  
7967			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7967			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
7967			;		db "asdfghjkl",KEY_CR,0  
7967			;		db "qwertyuiop",0  
7967			;		 db "1234567890",0  
7967			;.matrix_to_shift:  
7967			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
7967			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
7967			;		db "ASDFGHJKL",KEY_CR,0  
7967			;		db "QWERTYUIOP",0  
7967			;		 db "!",'"',"#$%^&*()",0  
7967			;.matrix_to_symbolshift:  
7967			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7967			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
7967			;		db "_?*fghjk=",KEY_CR,0  
7967			;		db "-/+*[]{}@#",0  
7967			;		 db "1234567890",0  
7967			  
7967			;.matrix_to_char: db "D#0*C987B654A321"  
7967			  
7967			  
7967				  
7967			  
7967			; add cin and cin_wait  
7967			  
7967 cd 76 79		cin_wait: 	call cin  
796a						if DEBUG_KEYCINWAIT  
796a							push af  
796a							  
796a							ld hl,key_repeat_ct  
796a							ld (hl),a  
796a							inc hl  
796a							call hexout  
796a							ld hl,key_repeat_ct+3  
796a			;				ld a,0  
796a							ld (hl),0  
796a			  
796a							    LD   A, kLCD_Line1+11  
796a							    CALL fLCD_Pos       ;Position cursor to location in A  
796a							    LD   DE, key_repeat_ct  
796a							    ;LD   DE, MsgHello  
796a							    CALL fLCD_Str       ;Display string pointed to by DE  
796a			  
796a			  
796a			  
796a							pop af  
796a						endif  
796a			;	cp 0  
796a b7				or a  
796b 28 fa			jr z, cin_wait   ; block until key press  
796d			  
796d							if DEBUG_KEYCINWAIT  
796d								push af  
796d			  
796d			;					ld a, 'A'	  
796d								ld hl,key_repeat_ct  
796d								ld (hl),'A'  
796d								inc hl  
796d			;					ld a,0  
796d								ld (hl),0  
796d			  
796d								    LD   A, kLCD_Line2+11  
796d								    CALL fLCD_Pos       ;Position cursor to location in A  
796d								    LD   DE, key_repeat_ct  
796d								    ;LD   DE, MsgHello  
796d								    CALL fLCD_Str       ;Display string pointed to by DE  
796d			  
796d							call delay500ms  
796d			  
796d								pop af  
796d							endif  
796d f5				push af   ; save key pressed  
796e			  
796e			.cin_wait1:	  
796e							if DEBUG_KEYCINWAIT  
796e								push af  
796e			  
796e			;					ld a, 'b'	  
796e								ld hl,key_repeat_ct  
796e								ld (hl),'b'  
796e								inc hl  
796e			;					ld a,0  
796e								ld (hl),0  
796e			  
796e								    LD   A, kLCD_Line2+11  
796e								    CALL fLCD_Pos       ;Position cursor to location in A  
796e								    LD   DE, key_repeat_ct  
796e								    ;LD   DE, MsgHello  
796e								    CALL fLCD_Str       ;Display string pointed to by DE  
796e			  
796e			  
796e							call delay500ms  
796e			  
796e								pop af  
796e							endif  
796e			  
796e cd 76 79		call cin  
7971			;	cp 0  
7971 b7				or a  
7972 20 fa			jr nz, .cin_wait1  	; wait for key release  
7974			if DEBUG_KEYCINWAIT  
7974				push af  
7974			  
7974			;	ld a, '3'	  
7974				ld hl,key_repeat_ct  
7974				ld (hl),'3'  
7974				inc hl  
7974			;	ld a,0  
7974				ld (hl),0  
7974			  
7974			            LD   A, kLCD_Line2+11  
7974			            CALL fLCD_Pos       ;Position cursor to location in A  
7974			            LD   DE, key_repeat_ct  
7974			            ;LD   DE, MsgHello  
7974			            CALL fLCD_Str       ;Display string pointed to by DE  
7974			  
7974			  
7974			call delay500ms  
7974			  
7974				pop af  
7974			endif  
7974			  
7974 f1				pop af   ; get key  
7975 c9				ret  
7976			  
7976			  
7976			; cin - key non-blocking except for keybounce release  
7976			  
7976 cd 92 79		cin: 	call .mtoc  
7979			  
7979			if DEBUG_KEYCIN  
7979				push af  
7979				  
7979				ld hl,key_repeat_ct  
7979				ld (hl),a  
7979				inc hl  
7979				call hexout  
7979				ld hl,key_repeat_ct+3  
7979			;	ld a,0  
7979				ld (hl),0  
7979			  
7979			            LD   A, kLCD_Line3+15  
7979			            CALL fLCD_Pos       ;Position cursor to location in A  
7979			            LD   DE, key_repeat_ct  
7979			            ;LD   DE, MsgHello  
7979			            CALL fLCD_Str       ;Display string pointed to by DE  
7979			  
7979			  
7979			call delay500ms  
7979			  
7979				pop af  
7979			endif  
7979			  
7979			  
7979				; no key held  
7979			;	cp 0  
7979 b7				or a  
797a c8				ret z  
797b			  
797b			if DEBUG_KEYCIN  
797b				push af  
797b			  
797b			;	ld a, '1'	  
797b				ld hl,key_repeat_ct  
797b				ld (hl),'1'  
797b				inc hl  
797b			;	ld a,0  
797b				ld (hl),0  
797b			  
797b			            LD   A, kLCD_Line4+15  
797b			            CALL fLCD_Pos       ;Position cursor to location in A  
797b			            LD   DE, key_repeat_ct  
797b			            ;LD   DE, MsgHello  
797b			            CALL fLCD_Str       ;Display string pointed to by DE  
797b			  
797b			  
797b			call delay500ms  
797b			  
797b				pop af  
797b			endif  
797b			  
797b				; stop key bounce  
797b			  
797b 32 c6 fd			ld (key_held),a		 ; save it  
797e 47				ld b, a  
797f			  
797f c5			.cina1:	push bc  
7980			if DEBUG_KEYCIN  
7980				push af  
7980			  
7980				ld hl,key_repeat_ct  
7980				inc hl  
7980				call hexout  
7980				ld hl,key_repeat_ct+3  
7980			;	ld a,0  
7980				ld (hl),0  
7980				ld hl,key_repeat_ct  
7980			;	ld a, '2'	  
7980				ld (hl),'2'  
7980			  
7980			            LD   A, kLCD_Line4+15  
7980			            CALL fLCD_Pos       ;Position cursor to location in A  
7980			            LD   DE, key_repeat_ct  
7980			            ;LD   DE, MsgHello  
7980			            CALL fLCD_Str       ;Display string pointed to by DE  
7980			  
7980				pop af  
7980			endif  
7980 cd 92 79			call .mtoc  
7983 c1				pop bc  
7984 b8				cp b  
7985 28 f8			jr z, .cina1  
7987 78				ld a,b		  
7988			if DEBUG_KEYCIN  
7988				push af  
7988			  
7988				ld hl,key_repeat_ct  
7988				inc hl  
7988				call hexout  
7988				ld hl,key_repeat_ct+3  
7988			;	ld a,0  
7988				ld (hl),0  
7988				ld hl,key_repeat_ct  
7988			;	ld a, '3'	  
7988				ld (hl),'3'  
7988			  
7988			            LD   A, kLCD_Line4+15  
7988			            CALL fLCD_Pos       ;Position cursor to location in A  
7988			            LD   DE, key_repeat_ct  
7988			            ;LD   DE, MsgHello  
7988			            CALL fLCD_Str       ;Display string pointed to by DE  
7988			  
7988				pop af  
7988			endif  
7988 c9				ret  
7989			  
7989			; cinndb - key non-blocking without keybounce release  
7989			  
7989 cd 92 79		cinndb: 	call .mtoc  
798c			  
798c			if DEBUG_KEYCIN  
798c				push af  
798c				  
798c				ld hl,key_repeat_ct  
798c				ld (hl),a  
798c				inc hl  
798c				call hexout  
798c				ld hl,key_repeat_ct+3  
798c			;	ld a,0  
798c				ld (hl),0  
798c			  
798c			            LD   A, kLCD_Line3+15  
798c			            CALL fLCD_Pos       ;Position cursor to location in A  
798c			            LD   DE, key_repeat_ct  
798c			            ;LD   DE, MsgHello  
798c			            CALL fLCD_Str       ;Display string pointed to by DE  
798c			  
798c			  
798c			call delay500ms  
798c			  
798c				pop af  
798c			endif  
798c			  
798c			  
798c				; no key held  
798c			;	cp 0  
798c b7				or a  
798d c8				ret z  
798e			  
798e			if DEBUG_KEYCIN  
798e				push af  
798e			  
798e			;	ld a, '1'	  
798e				ld hl,key_repeat_ct  
798e				ld (hl),'1'  
798e				inc hl  
798e			;	ld a,0  
798e				ld (hl),0  
798e			  
798e			            LD   A, kLCD_Line4+15  
798e			            CALL fLCD_Pos       ;Position cursor to location in A  
798e			            LD   DE, key_repeat_ct  
798e			            ;LD   DE, MsgHello  
798e			            CALL fLCD_Str       ;Display string pointed to by DE  
798e			  
798e			  
798e			call delay500ms  
798e			  
798e				pop af  
798e			endif  
798e			  
798e 32 c6 fd			ld (key_held),a		 ; save it  
7991			  
7991			if DEBUG_KEYCIN  
7991				push af  
7991			  
7991				ld hl,key_repeat_ct  
7991				inc hl  
7991				call hexout  
7991				ld hl,key_repeat_ct+3  
7991			;	ld a,0  
7991				ld (hl),0  
7991				ld hl,key_repeat_ct  
7991			;	ld a, '3'	  
7991				ld (hl),'3'  
7991			  
7991			            LD   A, kLCD_Line4+15  
7991			            CALL fLCD_Pos       ;Position cursor to location in A  
7991			            LD   DE, key_repeat_ct  
7991			            ;LD   DE, MsgHello  
7991			            CALL fLCD_Str       ;Display string pointed to by DE  
7991			  
7991				pop af  
7991			endif  
7991 c9				ret  
7992			; detect keyboard modifier key press and apply new overlay to the face key held  
7992			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
7992			  
7992			;.cin_map_modifier:   
7992			;	ld a, (hl)  
7992			;	and 255  
7992			;	ret NZ		; modifier key not flagged  
7992			;  
7992			;	; get key face  
7992			;  
7992			;	ld b,(key_face_held)  
7992			;  
7992			;	ld b, key_cols * key_rows  
7992			;  
7992			;	push de  
7992			;	pop hl  
7992			;  
7992			;.mmod1: ld a,(hl)   ; get map test  
7992			;	cp b  
7992			;	jr z, .mmod2  
7992			;  
7992			;  
7992			;  
7992			;.mmod2: inc hl    ;   
7992			;  
7992			;	  
7992			;  
7992			;	  
7992			;  
7992			;	ld hl,key_actual_pressed  
7992			;	ld (hl),a,  
7992			;	ret  
7992			  
7992			; map matrix key held to char on face of key  
7992			  
7992			.mtoc:  
7992			  
7992			; test decade counter strobes  
7992			  
7992			;.decadetest1:  
7992			  
7992			; reset counter  
7992			;ld a, 128  
7992			;out (portbdata),a  
7992			  
7992			  
7992			;ld b, 5  
7992			;.dec1:  
7992			;ld a, 0  
7992			;out (portbdata),a  
7992			;call delay1s  
7992			  
7992			;ld a, 32  
7992			;out (portbdata),a  
7992			;call delay1s  
7992			;call delay1s  
7992			;call delay1s  
7992			;  
7992			;ld a, 64+32  
7992			;out (portbdata),a  
7992			;call delay1s  
7992			;;djnz .dec1  
7992			;  
7992			;jp .decadetest1  
7992			  
7992			  
7992			  
7992			  
7992			  
7992			  
7992			  
7992			  
7992			  
7992			  
7992				; scan keyboard matrix and generate raw scan map  
7992 cd 23 7a			call matrix  
7995			  
7995				; reuse c bit 0 left modifer button - ie shift  
7995			        ; reuse c bit 1 for right modifer button - ie symbol shift  
7995				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
7995			  
7995 0e 00			ld c, 0  
7997			  
7997				; TODO set flags for modifer key presses   
7997				; TODO do a search for modifer key...  
7997			  
7997				;ld hl,keyscan_table_row4  
7997 21 25 fe			ld hl,keyscan_table_row2  
799a			  
799a 7e				ld a, (hl)  
799b fe 23			cp '#'  
799d 20 07			jr nz, .nextmodcheck  
799f cb c1			set 0, c  
79a1 21 f9 78			ld hl, .matrix_to_shift  
79a4 18 21			jr .dokeymap  
79a6				; TODO for now igonre  
79a6			.nextmodcheck:  
79a6 21 1a fe			ld hl,keyscan_table_row3  
79a9			  
79a9 7e				ld a, (hl)  
79aa fe 23			cp '#'  
79ac 20 07			jr nz, .nextmodcheck2  
79ae cb c9			set 1, c   
79b0 21 30 79			ld hl, .matrix_to_symbolshift  
79b3 18 12			jr .dokeymap  
79b5			.nextmodcheck2:  
79b5 21 2e fe			ld hl,keyscan_table_row2+9    ; right shift  
79b8			  
79b8 7e				ld a, (hl)  
79b9 fe 23			cp '#'  
79bb 20 07			jr nz, .donemodcheck  
79bd cb c9			set 1, c   
79bf 21 f9 78			ld hl, .matrix_to_shift  
79c2 18 03			jr .dokeymap  
79c4			  
79c4				; no modifer found so just map to normal keys  
79c4				; get mtoc map matrix to respective keys  
79c4			;	ld hl, .matrix_to_char  
79c4			;	ld hl, .matrix_to_char  
79c4			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
79c4			;	ld a, KEY_SHIFT  
79c4			;	call findchar  
79c4			;  
79c4			;	; got offset to key modifer in b  
79c4			;  
79c4			;	ld hl,keyscan_table_row5  
79c4			;  
79c4			;	ld a,b  
79c4			;	call addatohl  
79c4			;	ld a,(hl)  
79c4			;  
79c4			;	cp '#'  
79c4			;	jr nz, .nextmodcheck  
79c4			;	set 0, c  
79c4			;	ld hl, .matrix_to_char  
79c4			;	jr .dokeymap  
79c4			;	; TODO for now igonre  
79c4			;.nextmodcheck:  
79c4			;	ld hl, .matrix_to_symbolshift  
79c4			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
79c4			;	ld a, KEY_SYMBOLSHIFT  
79c4			;	call findchar  
79c4			;  
79c4			;  
79c4			;	; got offset to key modifer in b  
79c4			;  
79c4			;	ld hl,keyscan_table_row5  
79c4			;  
79c4			;	ld a,b  
79c4			;	call addatohl  
79c4			;	ld a,(hl)  
79c4			;  
79c4			;	cp '#'  
79c4			;	jr nz, .donemodcheck  
79c4			;	set 1, c   
79c4			;	ld hl, .matrix_to_symbolshift  
79c4			;	jr .dokeymap  
79c4			  
79c4			  
79c4			  
79c4			.donemodcheck:  
79c4				; no modifer found so just map to normal keys  
79c4				; get mtoc map matrix to respective keys  
79c4 21 c2 78			ld hl, .matrix_to_char  
79c7			  
79c7			.dokeymap:  
79c7				;ld (key_fa), c   
79c7 cd df 79			call .mapkeys  
79ca			  
79ca			  
79ca			if DEBUG_KEY  
79ca			  
79ca			; Display text on first line  
79ca			            LD   A, kLCD_Line1  
79ca			            CALL fLCD_Pos       ;Position cursor to location in A  
79ca			            LD   DE, keyscan_table_row1  
79ca			            ;LD   DE, MsgHello  
79ca			            CALL fLCD_Str       ;Display string pointed to by DE  
79ca			  
79ca			; Display text on second line  
79ca			            LD   A, kLCD_Line2  
79ca			            CALL fLCD_Pos       ;Position cursor to location in A  
79ca			            LD   DE, keyscan_table_row2  
79ca			            CALL fLCD_Str       ;Display string pointed to by DE  
79ca			            LD   A, kLCD_Line3  
79ca			            CALL fLCD_Pos       ;Position cursor to location in A  
79ca			            LD   DE, keyscan_table_row3  
79ca			            CALL fLCD_Str       ;Display string pointed to by DE  
79ca			            LD   A, kLCD_Line4  
79ca			            CALL fLCD_Pos       ;Position cursor to location in A  
79ca			            LD   DE, keyscan_table_row4  
79ca			            CALL fLCD_Str       ;Display string pointed to by DE  
79ca			            LD   A, kLCD_Line1+10  
79ca			            CALL fLCD_Pos       ;Position cursor to location in A  
79ca			            LD   DE, keyscan_table_row5  
79ca			            CALL fLCD_Str       ;Display string pointed to by DE  
79ca			  
79ca				;call delay250ms  
79ca			endif  
79ca			;	jp testkey  
79ca			  
79ca			; get first char reported  
79ca			  
79ca 21 04 fe			ld hl,keyscan_table_row5  
79cd			  
79cd				;ld b, 46   ; 30 keys to remap + 8 nulls   
79cd 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
79cf			.findkey:  
79cf 7e				ld a,(hl)  
79d0			;	cp 0  
79d0 b7				or a  
79d1 28 04			jr z, .nextkey  
79d3 fe 7e			cp KEY_MATRIX_NO_PRESS  
79d5 20 06			jr nz, .foundkey  
79d7			.nextkey:  
79d7 23				inc hl  
79d8 10 f5			djnz .findkey  
79da 3e 00			ld a,0  
79dc c9				ret  
79dd			.foundkey:  
79dd 7e				ld a,(hl)  
79de c9				ret  
79df				  
79df			  
79df			; convert the raw key map given hl for destination key  
79df			.mapkeys:  
79df 11 04 fe			ld de,keyscan_table_row5  
79e2			  
79e2 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
79e4			.remap:  
79e4 1a				ld a,(de)  
79e5 fe 23			cp '#'  
79e7 20 02			jr nz, .remapnext  
79e9				;CALLMONITOR  
79e9 7e				ld a,(hl)  
79ea 12				ld (de),a  
79eb			  
79eb			  
79eb			  
79eb			.remapnext:  
79eb 23				inc hl  
79ec 13				inc de  
79ed 10 f5			djnz .remap  
79ef				  
79ef c9				ret  
79f0			  
79f0			  
79f0			  
79f0			.mtocold2:  
79f0			  
79f0			;	; flag if key D is held down and remove from reporting  
79f0			;	ld bc, .key_map_fd    
79f0			;	ld hl, keyscan_table  
79f0			;	ld de, key_fd  
79f0			;	call .key_shift_hold  
79f0			;	cp 255  
79f0			;	jr z, .cinmap  
79f0			;	; flag if key C is held down and remove from reporting  
79f0			;	ld bc, .key_map_fc    
79f0			;	ld hl, keyscan_table+key_cols  
79f0			;	ld de, key_fc  
79f0			;	call .key_shift_hold  
79f0			;	cp 255  
79f0			;	jr z, .cinmap  
79f0			;	; flag if key B is held down and remove from reporting  
79f0			;	ld bc, .key_map_fb    
79f0			;	ld hl, keyscan_table+(key_cols*2)  
79f0			;	ld de, key_fb  
79f0			;	call .key_shift_hold  
79f0			;	cp 255  
79f0			;	jr z, .cinmap  
79f0			;	; flag if key A is held down and remove from reporting  
79f0			;	ld bc, .key_map_fa    
79f0			;	ld hl, keyscan_table+(key_cols*3)  
79f0			;	ld de, key_fa  
79f0			;	call .key_shift_hold  
79f0			;	cp 255  
79f0			;	jr z, .cinmap  
79f0			  
79f0 11 c2 78			ld de, .matrix_to_char  
79f3			  
79f3			  
79f3			.cinmap1:   
79f3				if DEBUG_KEY  
79f3			            LD   A, kLCD_Line4  
79f3			            CALL fLCD_Pos       ;Position cursor to location in A  
79f3					push de  
79f3			            LD   DE, keyscan_table  
79f3			            CALL fLCD_Str       ;Display string pointed to by DE  
79f3					pop de  
79f3				endif  
79f3			  
79f3				; scan key matrix table for any held key  
79f3			  
79f3				; de holds either the default matrix or one selected above  
79f3			  
79f3 21 d1 fd			ld hl, keyscan_table  
79f6 06 32			ld b,key_cols*key_rows  
79f8			  
79f8 7e			.cin11:	ld a,(hl)  
79f9 fe 23			cp '#'  
79fb 28 08			jr z, .cinhit1  
79fd 23				inc hl  
79fe 13				inc de  
79ff 05				dec b  
7a00 20 f6			jr nz, .cin11  
7a02				; no key found held  
7a02 3e 00			ld a,0  
7a04 c9				ret  
7a05 d5			.cinhit1: push de  
7a06 e1				pop hl  
7a07 7e				ld a,(hl)  
7a08 c9				ret  
7a09			  
7a09			; flag a control key is held   
7a09			; hl is key pin, de is flag indicator  
7a09			  
7a09			.key_shift_hold1:  
7a09 c5				push bc  
7a0a 3e 01			ld a, 1  
7a0c 32 f3 fa			ld (cursor_shape),a  
7a0f 06 00			ld b, 0  
7a11 7e				ld a, (hl)  
7a12 fe 2e			cp '.'  
7a14 28 09			jr z, .key_shift11  
7a16 06 ff			ld b, 255  
7a18			;	ld a, '+'    ; hide key from later scans  
7a18 36 2b			ld (hl),'+'  
7a1a 3e 02			ld a, 2  
7a1c 32 f3 fa			ld (cursor_shape), a  
7a1f			.key_shift11:  
7a1f				; write flag indicator  
7a1f 78				ld a,b  
7a20 12				ld (de),a  
7a21			  
7a21 d1				pop de    ; de now holds the key map ptr  
7a22 c9				ret  
7a23			  
7a23				  
7a23			  
7a23			; scans keyboard matrix and flags key press in memory array	  
7a23				  
7a23			matrix:  
7a23				;call matrix  
7a23				; TODO optimise the code....  
7a23			  
7a23			  
7a23			;ld hl, keyscan_table_row1  
7a23			;ld de, keyscan_table_row1+1  
7a23			;ld bc,46  
7a23			;ld a,KEY_MATRIX_NO_PRESS  
7a23			;ldir  
7a23			  
7a23			  
7a23			  
7a23			; reset counter  
7a23 3e 80		ld a, 128  
7a25 d3 c1		out (portbdata),a  
7a27			  
7a27 06 0a		ld b, 10  
7a29 0e 00		ld c, 0       ; current clock toggle  
7a2b			  
7a2b			.colscan:  
7a2b			  
7a2b			; set current column  
7a2b			; disable clock enable and set clock low  
7a2b			  
7a2b			;ld a, 0  
7a2b			;out (portbdata),a  
7a2b			  
7a2b			; For each column scan for switches  
7a2b			  
7a2b c5			push bc  
7a2c 21 c7 fd		ld hl, keyscan_scancol  
7a2f cd 33 7b		call .rowscan  
7a32 c1			pop bc  
7a33			  
7a33			  
7a33			; get back current column  
7a33			  
7a33			; translate the row scan  
7a33			  
7a33			;   
7a33			; row 1  
7a33			  
7a33 78			ld a,b  
7a34			  
7a34 21 3a fe		LD   hl, keyscan_table_row1+10  
7a37			  
7a37 cd be 0f		call subafromhl  
7a3a			;call addatohl  
7a3a			  
7a3a 11 c7 fd		ld de, keyscan_scancol  
7a3d			  
7a3d 1a			ld a,(de)  
7a3e 77			ld (hl),a  
7a3f			  
7a3f			  
7a3f			  
7a3f			  
7a3f			; row 2  
7a3f			  
7a3f 78			ld a,b  
7a40			  
7a40 21 2f fe		LD   hl, keyscan_table_row2+10  
7a43			  
7a43			;call addatohl  
7a43 cd be 0f		call subafromhl  
7a46			  
7a46			  
7a46 11 c8 fd		ld de, keyscan_scancol+1  
7a49			  
7a49 1a			ld a,(de)  
7a4a 77			ld (hl),a  
7a4b			  
7a4b			  
7a4b			; row 3  
7a4b			  
7a4b 78			ld a,b  
7a4c			  
7a4c 21 24 fe		LD   hl, keyscan_table_row3+10  
7a4f			  
7a4f			;call addatohl  
7a4f cd be 0f		call subafromhl  
7a52			  
7a52 11 c9 fd		ld de, keyscan_scancol+2  
7a55			  
7a55 1a			ld a,(de)  
7a56 77			ld (hl),a  
7a57			  
7a57			  
7a57			  
7a57			; row 4  
7a57			  
7a57 78			ld a,b  
7a58			  
7a58 21 19 fe		LD   hl, keyscan_table_row4+10  
7a5b			  
7a5b			;call addatohl  
7a5b cd be 0f		call subafromhl  
7a5e			  
7a5e 11 ca fd		ld de, keyscan_scancol+3  
7a61			  
7a61 1a			ld a,(de)  
7a62 77			ld (hl),a  
7a63			  
7a63			; row 5  
7a63			  
7a63 78			ld a,b  
7a64			  
7a64 21 0e fe		LD   hl, keyscan_table_row5+10  
7a67			  
7a67			;call addatohl  
7a67 cd be 0f		call subafromhl  
7a6a			  
7a6a 11 cb fd		ld de, keyscan_scancol+4  
7a6d			  
7a6d 1a			ld a,(de)  
7a6e 77			ld (hl),a  
7a6f			  
7a6f			; handshake next column  
7a6f			  
7a6f			  
7a6f 3e 40		ld a, 64  
7a71 d3 c1		out (portbdata),a  
7a73			  
7a73 3e 00		ld a, 0  
7a75 d3 c1		out (portbdata),a  
7a77			  
7a77			; toggle clk and move to next column  
7a77			;ld a, 64  
7a77			;cp c  
7a77			;  
7a77			;jr z, .coltoglow  
7a77			;ld c, a  
7a77			;jr .coltog  
7a77			;.coltoglow:  
7a77			;ld c, 0  
7a77			;.coltog:  
7a77			;ld a, c  
7a77			;out (portbdata),a  
7a77			  
7a77 10 b2		djnz .colscan  
7a79			  
7a79 3e 0a		ld a,10  
7a7b 21 30 fe		LD   hl, keyscan_table_row1  
7a7e cd ac 0f		call addatohl  
7a81			;ld a, 0  
7a81 36 00		ld (hl), 0  
7a83			  
7a83			  
7a83 3e 0a		ld a,10  
7a85 21 25 fe		LD   hl, keyscan_table_row2  
7a88 cd ac 0f		call addatohl  
7a8b			;ld a, 0  
7a8b 36 00		ld (hl), 0  
7a8d			  
7a8d 3e 0a		ld a,10  
7a8f 21 1a fe		LD   hl, keyscan_table_row3  
7a92 cd ac 0f		call addatohl  
7a95			;ld a, 0  
7a95 36 00		ld (hl), 0  
7a97			  
7a97 3e 0a		ld a,10  
7a99 21 0f fe		LD   hl, keyscan_table_row4  
7a9c cd ac 0f		call addatohl  
7a9f			;ld a, 0  
7a9f 36 00		ld (hl), 0  
7aa1			  
7aa1 3e 0a		ld a,10  
7aa3 21 04 fe		LD   hl, keyscan_table_row5  
7aa6 cd ac 0f		call addatohl  
7aa9			;ld a, 0  
7aa9 36 00		ld (hl), 0  
7aab			  
7aab			if DEBUG_KEY_MATRIX  
7aab			  
7aab			; Display text on first line  
7aab			            LD   A, kLCD_Line1  
7aab			            CALL fLCD_Pos       ;Position cursor to location in A  
7aab			            LD   DE, keyscan_table_row1  
7aab			            ;LD   DE, MsgHello  
7aab			            CALL fLCD_Str       ;Display string pointed to by DE  
7aab			  
7aab			; Display text on second line  
7aab			            LD   A, kLCD_Line2  
7aab			            CALL fLCD_Pos       ;Position cursor to location in A  
7aab			            LD   DE, keyscan_table_row2  
7aab			            CALL fLCD_Str       ;Display string pointed to by DE  
7aab			            LD   A, kLCD_Line3  
7aab			            CALL fLCD_Pos       ;Position cursor to location in A  
7aab			            LD   DE, keyscan_table_row3  
7aab			            CALL fLCD_Str       ;Display string pointed to by DE  
7aab			            LD   A, kLCD_Line4  
7aab			            CALL fLCD_Pos       ;Position cursor to location in A  
7aab			            LD   DE, keyscan_table_row4  
7aab			            CALL fLCD_Str       ;Display string pointed to by DE  
7aab			            LD   A, kLCD_Line4+10  
7aab			            CALL fLCD_Pos       ;Position cursor to location in A  
7aab			            LD   DE, keyscan_table_row5  
7aab			            CALL fLCD_Str       ;Display string pointed to by DE  
7aab			  
7aab			;call delay250ms  
7aab				jp matrix  
7aab			endif  
7aab c9			ret  
7aac			  
7aac			; using decade counter....  
7aac			  
7aac			  
7aac			; TODO reset decade counter to start of scan  
7aac			  
7aac			; reset 15  
7aac			; clock 14  
7aac			; ce 13  
7aac			  
7aac			; 1 - q5  
7aac			; 2 - q1  
7aac			; 3 - q0  
7aac			; 4 - q2  
7aac			; 5 - q6  
7aac			; 6 - q7  
7aac			; 7 - q3  
7aac			; 8 - vss  
7aac			; 9 - q8  
7aac			; 10 - q4  
7aac			; 11 - q9  
7aac			; 12 - cout  
7aac			; 16 - vdd  
7aac			  
7aac			; clock      ce       reset     output  
7aac			; 0          x        0         n  
7aac			; x          1        0         n  
7aac			; x          x        1         q0  
7aac			; rising     0        0         n+1  
7aac			; falling    x        0         n  
7aac			; x          rising   0         n  
7aac			; 1          falling  0         x+1  
7aac			;  
7aac			; x = dont care, if n < 5 carry = 1 otherwise 0  
7aac			  
7aac			;   
7aac			; reset   
7aac			; 13=0, 14=0, 15=1 .. 15=0  
7aac			;  
7aac			; handshake line  
7aac			; 14=1.... read line 14=0  
7aac			  
7aac			  
7aac			  
7aac			  
7aac			  
7aac			; TODO hand shake clock for next column scan  
7aac			; TODO detect each row  
7aac			  
7aac			  
7aac			  
7aac			  
7aac			; reset 128  
7aac			; clock 64  
7aac			; ce 32  
7aac			  
7aac			  
7aac			.cyclestart:  
7aac			  
7aac			; reset counter  
7aac 3e 80		ld a, 128  
7aae d3 c1		out (portbdata),a  
7ab0			  
7ab0			; loop leds  
7ab0 06 0a		ld b,10  
7ab2			  
7ab2			.cycle1:  
7ab2 c5			push bc  
7ab3 3e 00		ld a, 0  
7ab5 d3 c1		out (portbdata),a  
7ab7 cd b4 0c		call delay250ms  
7aba			  
7aba 3e 40		ld a, 64  
7abc d3 c1		out (portbdata),a  
7abe cd b4 0c		call delay250ms  
7ac1			  
7ac1 3e 00		ld a, 0  
7ac3 d3 c1		out (portbdata),a  
7ac5 cd b4 0c		call delay250ms  
7ac8			  
7ac8 c1			pop bc  
7ac9 10 e7		djnz .cycle1  
7acb			  
7acb			  
7acb 18 df		jr .cyclestart  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			; map matrix key held to char on face of key  
7acd			  
7acd			;.mtocold:  
7acd			;  
7acd			;  
7acd			;; reset counter  
7acd			;ld a, 128  
7acd			;out (portbdata),a  
7acd			;  
7acd			;  
7acd			;; scan keyboard row 1  
7acd			;ld a, 0  
7acd			;out (portbdata),a  
7acd			;;ld a, 64  
7acd			;;out (portbdata),a  
7acd			;  
7acd			;  
7acd			;	ld a, 128  
7acd			;	ld hl, keyscan_table  
7acd			;	call .rowscan  
7acd			;  
7acd			;;ld a, 0  
7acd			;;out (portbdata),a  
7acd			;ld a, 64  
7acd			;out (portbdata),a  
7acd			;  
7acd			;	ld a, 64  
7acd			;	ld hl, keyscan_table+key_cols  
7acd			;	call .rowscan  
7acd			;  
7acd			;ld a, 0  
7acd			;out (portbdata),a  
7acd			;;ld a, 64  
7acd			;;out (portbdata),a  
7acd			;	ld a, 32  
7acd			;	ld hl, keyscan_table+(key_cols*2)  
7acd			;	call .rowscan  
7acd			;  
7acd			;  
7acd			;;ld a, 0  
7acd			;;out (portbdata),a  
7acd			;ld a, 64  
7acd			;out (portbdata),a  
7acd			;  
7acd			;	ld a, 16  
7acd			;	ld hl, keyscan_table+(key_cols*3)  
7acd			;	call .rowscan  
7acd			;  
7acd			;  
7acd			;	; flag if key D is held down and remove from reporting  
7acd			;	ld bc, .key_map_fd    
7acd			;	ld hl, keyscan_table  
7acd			;	ld de, key_fd  
7acd			;	call .key_shift_hold  
7acd			;	cp 255  
7acd			;	jr z, .cinmap  
7acd			;	; flag if key C is held down and remove from reporting  
7acd			;	ld bc, .key_map_fc    
7acd			;	ld hl, keyscan_table+key_cols  
7acd			;	ld de, key_fc  
7acd			;	call .key_shift_hold  
7acd			;	cp 255  
7acd			;	jr z, .cinmap  
7acd			;	; flag if key B is held down and remove from reporting  
7acd			;	ld bc, .key_map_fb    
7acd			;	ld hl, keyscan_table+(key_cols*2)  
7acd			;	ld de, key_fb  
7acd			;	call .key_shift_hold  
7acd			;	cp 255  
7acd			;	jr z, .cinmap  
7acd			;	; flag if key A is held down and remove from reporting  
7acd			;	ld bc, .key_map_fa    
7acd			;	ld hl, keyscan_table+(key_cols*3)  
7acd			;	ld de, key_fa  
7acd			;	call .key_shift_hold  
7acd			;	cp 255  
7acd			;	jr z, .cinmap  
7acd			;  
7acd			;	ld de, .matrix_to_char  
7acd			;  
7acd			;  
7acd			;.cinmap:   
7acd			;	if DEBUG_KEY  
7acd			;            LD   A, kLCD_Line4  
7acd			;            CALL fLCD_Pos       ;Position cursor to location in A  
7acd			;		push de  
7acd			;            LD   DE, keyscan_table  
7acd			;            CALL fLCD_Str       ;Display string pointed to by DE  
7acd			;		pop de  
7acd			;	endif  
7acd			  
7acd				; scan key matrix table for any held key  
7acd			  
7acd				; de holds either the default matrix or one selected above  
7acd			  
7acd			;	ld hl, keyscan_table  
7acd			;	ld b,key_cols*key_rows  
7acd			;  
7acd			;.cin1:	ld a,(hl)  
7acd			;	cp '#'  
7acd			;	jr z, .cinhit  
7acd			;	inc hl  
7acd			;	inc de  
7acd			;	dec b  
7acd			;	jr nz, .cin1  
7acd			;	; no key found held  
7acd			;	ld a,0  
7acd			;	ret  
7acd			;.cinhit: push de  
7acd			;	pop hl  
7acd			;	ld a,(hl)  
7acd			;	ret  
7acd			  
7acd			; flag a control key is held   
7acd			; hl is key pin, de is flag indicator  
7acd			  
7acd			;.key_shift_hold:  
7acd			;	push bc  
7acd			;	ld a, 1  
7acd			;	ld (cursor_shape),a  
7acd			;	ld b, 0  
7acd			;	ld a, (hl)  
7acd			;	cp '.'  
7acd			;	jr z, .key_shift1  
7acd			;	ld b, 255  
7acd			;	ld a, '+'    ; hide key from later scans  
7acd			;	ld (hl),a  
7acd			;	ld a, 2  
7acd			;	ld (cursor_shape),a  
7acd			;.key_shift1:  
7acd			;	; write flag indicator  
7acd			;	ld a,b  
7acd			;	ld (de),a  
7acd			;  
7acd			;	pop de    ; de now holds the key map ptr  
7acd			;	ret  
7acd			  
7acd				  
7acd				  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			;	push hl  
7acd			;	push de  
7acd			;	push bc  
7acd			;	call keyscan  
7acd			;	; map key matrix to ascii value of key face  
7acd			;  
7acd			;	ld hl, key_face_map  
7acd			;	ld de, keyscan_table  
7acd			;  
7acd			;	; get how many keys to look at  
7acd			;	ld b, keyscan_table_len  
7acd			;	  
7acd			;  
7acd			;	; at this stage fall out on first key hit  
7acd			;	; TODO handle multiple key press  
7acd			;  
7acd			;map1:	ld a,(hl)  
7acd			;	cp '#'  
7acd			;	jr z, keyhit  
7acd			;	inc hl  
7acd			;	inc de  
7acd			;	dec b  
7acd			;	jr nz, map1  
7acd			;nohit:	ld a, 0  
7acd			;	jr keydone  
7acd			;keyhit: push de  
7acd			;	pop hl  
7acd			;	ld a,(hl)  
7acd			;keydone:  
7acd			;	push bc  
7acd			;	push de  
7acd			; 	push hl  
7acd			;	ret   
7acd			;  
7acd			  
7acd			  
7acd			  
7acd			  
7acd			; scan physical key matrix  
7acd			  
7acd			  
7acd			;keyscan:  
7acd			;  
7acd			;; for each key_row use keyscanr bit mask for out  
7acd			;; then read in for keyscanc bitmask  
7acd			;; save result of row scan to keyscantable  
7acd			;  
7acd			;; scan keyboard row 1  
7acd			;  
7acd			;	ld b, key_rows  
7acd			;	ld hl, key_scanr  
7acd			;	ld de, keyscan_table  
7acd			;  
7acd			;rowloop:  
7acd			;  
7acd			;	ld a,(hl)		; out bit mask to energise keyboard row  
7acd			;	call rowscan  
7acd			;	inc hl  
7acd			;	dec b  
7acd			;	jr nz, rowloop  
7acd			;  
7acd			;	ret  
7acd			;  
7acd			;  
7acd			;; pass a out bitmask, b row number  
7acd			;arowscan:   
7acd			;	push bc  
7acd			;  
7acd			;	ld d, b  
7acd			;  
7acd			;	; calculate buffer location for this row  
7acd			;  
7acd			;	ld hl, keyscan_table	  
7acd			;kbufr:  ld e, key_cols  
7acd			;kbufc:	inc hl  
7acd			;	dec e  
7acd			;	jr nz, kbufc  
7acd			;	dec d  
7acd			;	jr nz, kbufr  
7acd			;  
7acd			;	; energise row and read columns  
7acd			;  
7acd			;	out (portbdata),a  
7acd			;	in a,(portbdata)  
7acd			;	ld c,a  
7acd			;  
7acd			;  
7acd			;	; save buffer loc  
7acd			;  
7acd			;	ld (keybufptr), hl  
7acd			;  
7acd			;	ld hl, key_scanc  
7acd			;	ld d, key_cols  
7acd			;  
7acd			;	; for each column check each bit mask  
7acd			;  
7acd			;colloop:  
7acd			;	  
7acd			;  
7acd			;	; reset flags for the row   
7acd			;  
7acd			;	ld b,'.'  
7acd			;	and (hl)  
7acd			;	jr z, maskskip  
7acd			;	ld b,'#'  
7acd			;maskskip:  
7acd			;	; save  key state  
7acd			;	push hl  
7acd			;	ld hl, (keybufptr)  
7acd			;	ld (hl), b  
7acd			;	inc hl  
7acd			;	ld (keybufptr), hl  
7acd			;  
7acd			;	; move to next bit mask  
7acd			;	pop hl  
7acd			;	inc hl  
7acd			;  
7acd			;	dec d  
7acd			;	jr nz, colloop  
7acd			;  
7acd			;	ret  
7acd			;  
7acd			;  
7acd			;;  
7acd			; lcd functions  
7acd			;  
7acd			;  
7acd			  
7acd			;if DEBUG_KEY_MATRIX  
7acd			  
7acd			; test function to display hardware view of matrix state  
7acd			  
7acd			matrixold:  
7acd			  
7acd			  
7acd			  
7acd			; reset counter  
7acd 3e 80		ld a, 128  
7acf d3 c1		out (portbdata),a  
7ad1			; scan keyboard row 1  
7ad1 3e 00		ld a, 0  
7ad3 d3 c1		out (portbdata),a  
7ad5			;ld a, 64  
7ad5			;out (portbdata),a  
7ad5 3e 80			ld a, 128  
7ad7 21 30 fe			ld hl, keyscan_table_row1  
7ada cd 33 7b			call .rowscan  
7add			  
7add			;ld a, 0  
7add			;out (portbdata),a  
7add 3e 40		ld a, 64  
7adf d3 c1		out (portbdata),a  
7ae1 3e 40			ld a, 64  
7ae3 21 25 fe			ld hl, keyscan_table_row2  
7ae6 cd 33 7b			call .rowscan  
7ae9			  
7ae9 3e 00		ld a, 0  
7aeb d3 c1		out (portbdata),a  
7aed			;ld a, 64  
7aed			;out (portbdata),a  
7aed 3e 20			ld a, 32  
7aef 21 1a fe			ld hl, keyscan_table_row3  
7af2 cd 33 7b			call .rowscan  
7af5			  
7af5			;ld a, 0  
7af5			;out (portbdata),a  
7af5 3e 40		ld a, 64  
7af7 d3 c1		out (portbdata),a  
7af9 3e 10			ld a, 16  
7afb 21 0f fe			ld hl, keyscan_table_row4  
7afe cd 33 7b			call .rowscan  
7b01			  
7b01			; Display text on first line  
7b01 3e 00		            LD   A, kLCD_Line1  
7b03 cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7b06 11 30 fe		            LD   DE, keyscan_table_row1  
7b09			            ;LD   DE, MsgHello  
7b09 cd 5e 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7b0c			  
7b0c			; Display text on second line  
7b0c 3e 28		            LD   A, kLCD_Line2  
7b0e cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7b11 11 25 fe		            LD   DE, keyscan_table_row2  
7b14 cd 5e 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7b17 3e 50		            LD   A, kLCD_Line3  
7b19 cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7b1c 11 1a fe		            LD   DE, keyscan_table_row3  
7b1f cd 5e 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7b22 3e 78		            LD   A, kLCD_Line4  
7b24 cd 3c 77		            CALL fLCD_Pos       ;Position cursor to location in A  
7b27 11 0f fe		            LD   DE, keyscan_table_row4  
7b2a cd 5e 77		            CALL fLCD_Str       ;Display string pointed to by DE  
7b2d			  
7b2d cd b4 0c			call delay250ms  
7b30 c3 23 7a			jp matrix  
7b33			  
7b33			; pass de as row display flags  
7b33			.rowscan:   
7b33			;	out (portbdata),a  
7b33 db c1			in a,(portbdata)  
7b35 4f				ld c,a  
7b36				; reset flags for the row   
7b36 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7b38 e6 01			and 1  
7b3a 28 02			jr z, .p1on  
7b3c 06 23			ld b,'#'  
7b3e			.p1on:  
7b3e 70				ld (hl), b  
7b3f 23				inc hl  
7b40			  
7b40 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7b42 79				ld a,c  
7b43 e6 02			and 2  
7b45			;	bit 0,a  
7b45 28 02			jr z, .p2on  
7b47 06 23			ld b,'#'  
7b49			.p2on:  
7b49 70				ld (hl), b  
7b4a 23				inc hl  
7b4b			;  
7b4b 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7b4d 79				ld a,c  
7b4e e6 04			and 4  
7b50			;;	bit 0,a  
7b50 28 02			jr z, .p3on  
7b52 06 23			ld b,'#'  
7b54			.p3on:  
7b54 70				ld (hl), b  
7b55 23				inc hl  
7b56			;;  
7b56 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7b58			;;	bit 0,a  
7b58 79				ld a,c  
7b59 e6 08			and 8  
7b5b 28 02			jr z, .p4on  
7b5d 06 23			ld b,'#'  
7b5f			.p4on:  
7b5f 70				ld (hl), b  
7b60 23				inc hl  
7b61			  
7b61 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7b63			;;	bit 0,a  
7b63 79				ld a,c  
7b64 e6 10			and 16  
7b66 28 02			jr z, .p5on  
7b68 06 23			ld b,'#'  
7b6a			.p5on:  
7b6a 70				ld (hl), b  
7b6b 23				inc hl  
7b6c			; zero term  
7b6c			;	ld b,0  
7b6c 36 00			ld (hl), 0  
7b6e			  
7b6e c9			.rscandone: ret  
7b6f			  
7b6f			;addatohl:  
7b6f			;  
7b6f			 ;add   a, l    ; A = A+L  
7b6f			  ;  ld    l, a    ; L = A+L  
7b6f			   ; adc   a, h    ; A = A+L+H+carry  
7b6f			   ; sub   l       ; A = H+carry  
7b6f			   ; ld    h, a    ; H = H+carry  
7b6f			  
7b6f			;ret  
7b6f			; eof  
# End of file firmware_key_5x10.asm
7b6f			;include "firmware_key_4x10.asm" 
7b6f			 
7b6f			heap_size:    equ heap_end - heap_start 
7b6f			;eof 
# End of file os_mega.asm
7b6f
