# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 71 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-08-11 21:06' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
801f			 
801f			 
801f			 
801f			;        nop  
801f			;        nop 
801f			;;	org 05h		; null out bdos call 
801f			; 
801f			;        nop  
801f			;        nop  
801f			;        nop 
801f			;;	org 08h 
801f			;;; 
801f			;;	jp cin		; rst 8 - char in 
801f			;;; 
801f			; 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;	org 010h 
801f			;; 
801f			;	jp cout		; rest 010h  - char out 
801f			;; 
801f			;	org 01bh   
801f			; 
801f			;	;jp  		; rst 01bh   - write string to display 
801f			;	jp str_at_display 
801f			; 
801f			; 
801f			;	org 020h 
801f			; 
801f			;	; jp		 ; rst 020h - read char at screen location 
801f			; 
801f			;	org 028h 
801f			 
801f				; jp		 ; rst 028h  - storage i/o 
801f			 
801f			; 	org 030h 
801f			;	jp break_point_state 
801f			  
801f			; $30  
801f			; org 038h 
801f			; $38 
801f			 
801f			; TODO any more important entry points to add to jump table for easier coding use? 
801f			 
801f			if BASE_KEV = 1  
801f			 
801f				; need to be at $66 for nmi support 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255 
801f				jp nmi 
801f			endif 
801f			 
801f			include "firmware.asm" 
801f			  
801f			; main constants (used here and in firmware)  
801f			  
801f			; TODO have page 0 of storage as bios  
801f			  
801f			Device_A: equ 0h  
801f			Device_B: equ 040h          ; Sound  
801f			  
801f			if BASE_KEV  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_SC114  
801f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			; TODO fixup for CPM  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			Device_D: equ 0c0h             ; Keyboard and LCD  
801f			  
801f			; Odd specific debug points for testing hardware dev  
801f			  
801f			;if DEBUG_LEVEL0  
801f			;	include "debug_level0.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL1  
801f			;	include "debug_level1.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL2  
801f			;	include "debug_level2.asm"  
801f			;endif  
801f			  
801f			  
801f			CALLMONITOR: macro  
801f			;	call break_point_state  
801f			; now use the break point debug vector  
801f				call debug_vector  
801f				endm  
801f			  
801f			MALLOC_1: equ 1        ; from dk88   
801f			MALLOC_2: equ 0           ; broke  
801f			MALLOC_3: equ 0           ; really broke  
801f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801f			  
801f			if BASE_KEV   
801f			;stacksize: equ 256  
801f			; each stack entry is three bytes (type + word)  
801f			stacksize: equ 3*150  
801f			  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 512  
801f			endif  
801f			if BASE_SC114  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			;if STORAGE_SE == 0  
801f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801f			;endif  
801f			  
801f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801f			  
801f			STORE_0_AUTORUN: equ $20  
801f			  
801f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801f			  
801f			STORE_0_AUTOFILE: equ $21  
801f			STORE_0_BANKRUN: equ $23  
801f			STORE_0_FILERUN: equ $24  
801f			  
801f			; Block 0 offsets for settings  
801f			  
801f			; if set then skip prompt for start up and accept all  
801f			  
801f			STORE_0_QUICKSTART: equ $25  
801f			  
801f			; Blocks where directory table is held  
801f			  
801f			; Reducing the number of entries increases the max file size  
801f			  
801f			;STORE_DIR_START: equ 1  
801f			;STORE_DIR_END: equ 33  
801f			  
801f			; Blocks from where file data is stored  
801f			  
801f			;STORE_DATA_START: equ STORE_DIR_END + 1  
801f			  
801f			; Block indicators (<32 are data files)  
801f			  
801f			;STORE_BLOCK_CFG: equ $8f       ; config block  
801f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801f			;STORE_BLOCK_FREE: equ $85       ; data block free  
801f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801f			  
801f			  
801f			  
801f			; Directory entry flags  
801f			  
801f			;STORE_DIR_FREE: equ 0  
801f			;STORE_DIR_FILE:  equ 1  
801f			  
801f			; Structure offsets to directory entries  
801f			;STORE_DE_FLAG: equ 0  
801f			;STORE_DE_MAXEXT: equ 1  
801f			;STORE_DE_FILENAME: equ 2  
801f			  
801f			; Structure offsets to block 0  
801f			  
801f			;STORE_BK0_ISFOR: equ 1  
801f			;STORE_BK0_LABEL: equ 3  
801f			  
801f			; memory allocation   
801f			  
801f			chk_stund: equ tos+2           ; underflow check word  
801f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801f			  
801f			; keyscan table needs rows x cols buffer  
801f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801f			  
801f			keyscan_table_row1: equ chk_stovr -key_cols-1  
801f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801f			keyscan_scancol: equ keyscan_table-key_cols  
801f			;keyscan_table_len: equ key_rows*key_cols  
801f			;keybufptr: equ keyscan_table - 2  
801f			;keysymbol: equ keybufptr - 1  
801f			key_held: equ keyscan_scancol-1	; currently held  
801f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801f			key_fa: equ key_repeat_ct -1 ;  
801f			key_fb: equ key_fa -1 ;  
801f			key_fc: equ key_fb -1 ;  
801f			key_fd: equ key_fc -1 ;  
801f			key_face_held: equ key_fd - 1   
801f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801f			  
801f			hardware_config: equ key_face_held - 10  
801f			  
801f			; hardware config switches  
801f			; TODO add bitmasks on includes for hardware  
801f			; high byte for expansion ids  
801f			;     0000 0000  no card inserted  
801f			;     0000 0001  storage card inserted  
801f			;     0000 0010  spi sd card active  
801f			  
801f			;       
801f			; low byte:  
801f			;     0000 0001   4x4 keypad  
801f			;     0000 0010   full keyboard  
801f			;     0000 0011   spi/ext keyboard  
801f			;     0000 0100   20x4 lcd  
801f			;     0000 1000   40x4 lcd  
801f			;     0000 1100   spi/ext display  
801f			;     0001 0000   ide interface available  
801f			  
801f			hardware_word: equ hardware_config - 2  
801f			  
801f			; debug marker - optional display of debug point on the debug screens  
801f			  
801f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801f			  
801f			debug_umark: equ debug_vector - 6  ; current user mark  
801f			debug_mark: equ debug_umark - 4    ; internal word debug points  
801f			  
801f			; input_str vars  
801f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801f			input_size: equ input_start -1  ; number of chars  
801f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801f			input_len: equ input_cur_onoff - 5 ; length of current input  
801f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801f			  
801f			; cursor blink rate  
801f			CUR_BLINK_RATE: equ $09  
801f			;CUR_BLINK_RATE: equ 15  
801f			  
801f			key_actual_pressed: equ input_cursor - 1   
801f			key_symbol: equ key_actual_pressed - 1   
801f			key_shift: equ key_symbol - 1   
801f			  
801f			; Display allocation  
801f			  
801f			;display_rows: equ 4     ; move out to mini and mega files  
801f			;display_cols: equ 20  
801f			  
801f			display_fb_len: equ display_rows*display_cols  
801f			  
801f			; primary frame buffer     
801f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801f			; working frame buffers  
801f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801f			display_fb3: equ  display_fb1-display_fb_len - 1  
801f			display_fb2: equ  display_fb3-display_fb_len - 1  
801f			;  
801f			; pointer to active frame buffer  
801f			display_fb_active: equ display_fb2 - 2  
801f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801f			display_write_tmp: equ display_lcde1e2 - 2  
801f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801f			  
801f			;  
801f			  
801f			;; can load into de directory  
801f			cursor_col: equ display_active-1  
801f			cursor_row: equ cursor_col-1  
801f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801f			  
801f			; maths vars  
801f			  
801f			LFSRSeed: equ cursor_shape -20   
801f			randData: equ LFSRSeed - 2  
801f			xrandc: equ randData - 2  
801f			stackstore: equ xrandc - 2  
801f			seed1: equ  stackstore -2   
801f			seed2: equ seed1 - 2  
801f			  
801f			; cf storage vars  
801f			  
801f			iErrorNum:  equ seed2-1         ;Error number  
801f			iErrorReg:  equ iErrorNum -1              ;Error register  
801f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801f			  
801f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801f			  
801f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801f			  
801f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801f			store_tmpid: equ store_tmp3 - 1		; page temp id  
801f			store_tmpext: equ store_tmpid - 1		; file extent temp  
801f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801f			;  
801f			; spi vars  
801f			  
801f			  
801f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801f			spi_device_id: equ spi_device - 1    ; human readable bank number  
801f			  
801f			;;;;; forth cli params  
801f			  
801f			; TODO use a different frame buffer for forth???  
801f			  
801f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801f			  
801f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801f			  
801f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801f			  
801f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801f			  
801f			; os/forth token vars  
801f			  
801f			os_last_cmd: equ os_var_array-255  
801f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801f			os_current_i: equ os_cli_cmd-2  
801f			os_cur_ptr: equ os_current_i-2  
801f			os_word_scratch: equ os_cur_ptr-30  
801f			os_tok_len: equ os_word_scratch - 2  
801f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801f			os_tok_malloc: equ os_tok_ptr - 2  
801f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801f			execscratch: equ os_input-255        ; exec cmd eval buffer  
801f			scratch: equ execscratch-255  
801f			  
801f			os_stack_1: equ scratch - 3       ; stack holding area 1  
801f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801f			  
801f			  
801f			; temp locations for new word processing to save on adding more   
801f			  
801f			os_new_malloc: equ os_stack_4-2  
801f			os_new_parse_len: equ os_new_malloc - 2  
801f			os_new_word_len: equ os_new_parse_len - 2  
801f			os_new_work_ptr: equ os_new_word_len - 2  
801f			os_new_src_ptr: equ os_new_work_ptr - 2  
801f			os_new_exec: equ os_new_src_ptr - 2  
801f			os_new_exec_ptr: equ os_new_exec - 2  
801f			  
801f			; resume memory alloocations....  
801f			  
801f			;os_view_disable: equ os_new_exec_ptr - 1  
801f			os_view_af: equ os_new_exec_ptr - 2  
801f			os_view_hl: equ os_view_af -2  
801f			os_view_de: equ os_view_hl - 2  
801f			os_view_bc: equ os_view_de - 2  
801f			  
801f			; stack checksum word  
801f			if DEBUG_STACK_IMB  
801f				curframe: equ  os_view_de - 5  
801f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			else  
801f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			endif  
801f			  
801f			; with data stack could see memory filled with junk. need some memory management   
801f			; malloc and free entry points added  
801f			  
801f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			;heap_end: equ free_list-1  ; Starting address of heap  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			heap_end: equ chk_word-1  ; Starting address of heap  
801f			  
801f			  
801f			;if BASE_KEV   
801f			;heap_start: equ 0800eh  ; Starting address of heap  
801f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;heap_start: equ baseram+15  ; Starting address of heap  
801f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;endif  
801f			  
801f			  
801f			;;;;  
801f			  
801f			  
801f			; change below to point to last memory alloc above  
801f			topusermem:  equ   heap_start  
801f			  
801f			;if BASE_KEV   
801f			;baseusermem: equ 08000h  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;;aseusermem:     equ    12  
801f			;baseusermem:     equ    prompt  
801f			;;baseusermem:     equ    endofcode  
801f			;endif  
801f			  
801f			  
801f			; **********************************************************************  
801f			; **  Constants  
801f			; **********************************************************************  
801f			  
801f			; Constants used by this code module  
801f			kDataReg:   EQU Device_D           ;PIO port A data register  
801f			kContReg:   EQU Device_D+2           ;PIO port A control register  
801f			  
801f			  
801f			portbdata:  equ Device_D+1    ; port b data  
801f			portbctl:   equ Device_D+3    ; port b control  
801f			  
801f			  
801f			;KEY_SHIFT:   equ 5  
801f			;KEY_SYMBOLSHIFT:  equ 6  
801f			  
801f			KEY_SHIFTLOCK: equ 4  
801f			  
801f			  
801f			KEY_UP: equ 5  
801f			KEY_NEXTWORD: equ 6  
801f			KEY_PREVWORD: equ 7  
801f			KEY_BS: equ 8  
801f			KEY_TAB:  equ 9  
801f			KEY_DOWN: equ 10  
801f			KEY_LEFT: equ 11  
801f			KEY_RIGHT: equ 12  
801f			KEY_CR:   equ 13  
801f			KEY_HOME: equ 14  
801f			KEY_END: equ 15  
801f			  
801f			KEY_F1: equ 16  
801f			KEY_F2: equ 17  
801f			KEY_F3: equ 18  
801f			KEY_F4: equ 19  
801f			  
801f			KEY_F5: equ 20  
801f			KEY_F6: equ 21  
801f			KEY_F7: equ 22  
801f			KEY_F8: equ 23  
801f			  
801f			KEY_F9: equ 24  
801f			KEY_F10: equ 25  
801f			KEY_F11: equ 26  
801f			KEY_F12: equ 27  
801f			  
801f			;if DEBUG_KEY  
801f			;	KEY_MATRIX_NO_PRESS: equ '.'  
801f			;	KEY_SHIFT:   equ '.'  
801f			;	KEY_SYMBOLSHIFT:  equ '.'  
801f			;else  
801f				KEY_SHIFT:   equ '~'  
801f				KEY_SYMBOLSHIFT:  equ '~'  
801f				KEY_MATRIX_NO_PRESS: equ '~'  
801f			;endi  
801f			  
801f			  
801f			  
801f			  
801f			; Macro to make adding debug marks easier  
801f			  
801f			DMARK: macro str  
801f				push af  
801f				ld a, (.dmark)  
801f				ld (debug_mark),a  
801f				ld a, (.dmark+1)  
801f				ld (debug_mark+1),a  
801f				ld a, (.dmark+2)  
801f				ld (debug_mark+2),a  
801f				jr .pastdmark  
801f			.dmark: db str  
801f			.pastdmark: pop af  
801f			  
801f			endm  
801f			  
801f			  
801f			; macro to detect for stack imbalances  
801f			  
801f			include "stackimbal.asm"  
801f			; Macro and code to detect stock imbalances 
801f			 
801f			SPPUSH: equ 0 
801f			 
801f			; Add a stack frame which can be checked before return 
801f			 
801f			STACKFRAME: macro onoff frame1 frame2 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f						exx 
801f			 
801f						ld de, frame1 
801f						ld a, d 
801f						ld hl, curframe 
801f						call hexout 
801f						ld a, e 
801f						ld hl, curframe+2 
801f						call hexout 
801f			  
801f						ld hl, frame1 
801f						push hl 
801f						ld hl, frame2 
801f						push hl 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			endm 
801f			 
801f			STACKFRAMECHK: macro onoff frame1 frame2 
801f			 
801f					 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						exx 
801f						; check stack frame SP 
801f			 
801f						ld hl, frame2 
801f						pop de   ; frame2 
801f			 
801f						call cmp16 
801f						jr nz, .spnosame 
801f						 
801f			 
801f						ld hl, frame1 
801f						pop de   ; frame1 
801f			 
801f						call cmp16 
801f						jr z, .spfrsame 
801f			 
801f						.spnosame: call showsperror 
801f			 
801f						.spfrsame: nop 
801f			 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			 
801f			 
801f			endm 
801f			 
801f			 
801f			; for a sub routine, wrap SP collection and comparisons 
801f			 
801f			; Usage: 
801f			; 
801f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801f			 
801f			SAVESP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f			 
801f						ld (store_sp+(storeword*4)), sp 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			CHECKSP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f			 
801f						; save SP after last save 
801f				 
801f						ld (store_sp+(storeword*4)+2), sp 
801f			 
801f						push hl 
801f						ld hl, store_sp+(storeword*4) 
801f						call check_stack_sp  
801f						pop hl 
801f			 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			if DEBUG_STACK_IMB 
801f			 
801f			check_stack_sp: 
801f					push de 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					push de 
801f			 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					pop hl 
801f			 
801f			 
801f					; check to see if the same 
801f			 
801f					call cmp16 
801f					jr z, .spsame 
801f			 
801f					; not same 
801f			 
801f					call showsperror 
801f			.spsame: 
801f			 
801f					pop de 
801f			 
801f					ret 
801f			 
801f			.sperr:  db "Stack imbalance",0 
801f			 
801f			 
801f			showsperror: 
801f			 
801f			 
801f				push hl 
801f				push af 
801f				push de 
801f				call clear_display 
801f				ld de, .sperr 
801f				ld a,0 
801f			;	ld de,os_word_scratch 
801f				call str_at_display 
801f				ld a, display_row_1+17 
801f				ld de, debug_mark 
801f				call str_at_display 
801f				ld a, 0 
801f				ld (curframe+4),a 
801f				ld hl, curframe 
801f				ld de, os_word_scratch 
801f				ld a, display_row_4 
801f				call str_at_display 
801f				call update_display 
801f				;call break_point_state 
801f				call cin_wait 
801f			 
801f			;	ld a, ' ' 
801f			;	ld (os_view_disable), a 
801f				call bp_on 
801f				pop de	 
801f				pop af 
801f				pop hl 
801f				CALLMONITOR 
801f				ret 
801f			 
801f			endif 
801f			 
801f			 
801f			 
801f			; eof 
# End of file stackimbal.asm
801f			  
801f			;TODO macro to calc col and row offset into screen  
801f			  
801f			  
801f			  
801f			hardware_init:  
801f			  
801f				  
801f			  
801f					;ld a, 0  
801f					;ld (hardware_diag), a  
801f			  
801f					; clear all the buffers  
801f			  
801f 21 0a ed				ld hl, display_fb1  
8022 22 c6 eb				ld (display_fb_active), hl  
8025			  
8025 cd bd 8a				call clear_display  
8028			  
8028 21 c8 eb				ld hl, display_fb2  
802b 22 c6 eb				ld (display_fb_active), hl  
802e			  
802e cd bd 8a				call clear_display  
8031			  
8031					; init primary frame buffer area  
8031 21 ab ed				ld hl, display_fb0  
8034 22 c6 eb				ld (display_fb_active), hl  
8037			  
8037 cd bd 8a				call clear_display  
803a			  
803a			  
803a cd f7 dc				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803d			  
803d cd 99 dd			call key_init  
8040 cd ad 80			call storage_init  
8043			  
8043				; setup malloc functions  
8043			  
8043				if MALLOC_1  
8043 cd a1 90				call  heap_init  
8046				endif  
8046				if MALLOC_4  
8046					call  heap_init  
8046				endif  
8046			  
8046				; init sound hardware if present  
8046			  
8046				if SOUND_ENABLE  
8046					call sound_init  
8046				endif  
8046			  
8046				; lcd test sequence  
8046					  
8046 cd e0 8a			call update_display  
8049 cd 00 8a			call delay1s  
804c 3e 2b			ld a,'+'  
804e cd c2 8a			call fill_display  
8051 cd e0 8a			call update_display  
8054 cd 00 8a			call delay1s  
8057 3e 2a			ld a,'*'  
8059 cd c2 8a			call fill_display  
805c cd e0 8a			call update_display  
805f cd 00 8a			call delay1s  
8062 3e 2d			ld a,'-'  
8064 cd c2 8a			call fill_display  
8067 cd e0 8a			call update_display  
806a cd 00 8a			call delay1s  
806d			  
806d			; boot splash screen  
806d			if display_cols == 20	  
806d			        ld a, display_row_1    
806d			else  
806d 3e 0a		        ld a, display_row_1 +10   
806f			endif  
806f 11 cf 95			ld de, prom_bootmsg  
8072 cd d0 8a			call str_at_display  
8075 cd e0 8a			call update_display  
8078			  
8078			  
8078 cd 00 8a			call delay1s  
807b cd 00 8a			call delay1s  
807e			if display_cols == 20	  
807e			            LD   A, display_row_3+2  
807e			else  
807e 3e 5c		            LD   A, display_row_3+12  
8080			endif  
8080 11 e4 95			ld de, prom_bootmsg1  
8083 cd d0 8a			call str_at_display  
8086			; display debug level  
8086 3e 78		            LD   A, display_row_4  
8088 11 1b 80			ld de, debuglevel  
808b cd d0 8a			call str_at_display  
808e			  
808e cd e0 8a			call update_display  
8091 cd 00 8a			call delay1s  
8094 cd 00 8a			call delay1s  
8097			  
8097			;	ld a, display_row_4+3  
8097			;	ld de, bootmsg2  
8097			;	call str_at_display  
8097			;	call update_display  
8097			;	call delay1s  
8097			;	call delay1s  
8097			  
8097			; debug mark setup  
8097			  
8097 3e 5f		ld a, '_'  
8099 32 65 ee		ld (debug_mark),a  
809c 32 66 ee		ld (debug_mark+1),a  
809f 32 67 ee		ld (debug_mark+2),a  
80a2 3e 00		ld a,0  
80a4 32 68 ee		ld (debug_mark+3),a  
80a7 32 69 ee		ld (debug_umark),a  
80aa			  
80aa c9					ret  
80ab			  
80ab			  
80ab			;bootmsg2:	db "Firmware v0.1",0  
80ab			  
80ab			; a 4x20 lcd  
80ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
80ab			  
80ab			;if display_cols == 20  
80ab			;	include "firmware_lcd_4x20.asm"  
80ab			;endif  
80ab			  
80ab			;if display_cols == 40  
80ab			;	include "firmware_lcd_4x40.asm"  
80ab			;endif  
80ab			  
80ab			;  
80ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
80ab			; TODO abstract the bit bang video out interface for dual display  
80ab			; TODO wire video out to tx pin on rc2014 bus  
80ab			  
80ab			; must supply cin, and cin_wait for low level hardware abstraction   
80ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
80ab			; test scancode  
80ab			  
80ab			;;;;;  
80ab			;;;  
80ab			; Moved out to mini and maxi versions  
80ab			;  
80ab			; include "firmware_key_4x4.asm"  
80ab			; using existing 4 wire x 4 resistor array for input  
80ab			;include "firmware_key_4x10.asm"  
80ab			; need to mod the board for 5 rows due to resistor array  
80ab			;include "firmware_key_5x10.asm"  
80ab			  
80ab			; storage hardware interface  
80ab			  
80ab			; use microchip serial eeprom for storage  
80ab			  
80ab			  
80ab			if STORAGE_SE  
80ab				include "firmware_spi.asm"  
80ab				include "firmware_seeprom.asm"  
80ab			else  
80ab			   ; create some stubs for the labels  
80ab c9			se_readbyte: ret  
80ac c9			se_writebyte: ret  
80ad c9			storage_init: ret  
80ae			  
80ae			endif  
80ae			  
80ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80ae			;include "firmware_cf.asm"  
80ae			  
80ae			; load up high level storage hardward abstractions  
80ae			include "firmware_storage.asm"  
80ae			 
80ae			; persisent storage hardware abstraction layer  
80ae			 
80ae			 
80ae			 
80ae			; Block 0 on storage is a config state 
80ae			 
80ae			 
80ae			 
80ae			; TODO add read phy block and write phy block functions 
80ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80ae			 
80ae			; Abstraction layer  
80ae			 
80ae			; Logocial block size is same size as physical size - using tape concept 
80ae			 
80ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80ae			 
80ae			 
80ae			 
80ae			; Filesystem layout (Logical layout) 
80ae			; 
80ae			; Block 0 - Bank config  
80ae			; 
80ae			;      Byte - 0 file id counter 
80ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80ae			;      Byte - 3-20 zero terminated bank label 
80ae			; 
80ae			; Block 1 > File storage 
80ae			; 
80ae			;      Byte 0 file id    - block 0 file details 
80ae			;      Byte 1 block id - block 0 is file  
80ae			;            Byte 2-15 - File name 
80ae			; 
80ae			;       - to end of block data 
80ae			; 
80ae			 
80ae			; Get ID for the file named in pointer held HL 
80ae			; Returns ID in HL = 255 if no file found 
80ae			 
80ae			storage_getid: 
80ae			 
80ae 22 6d ea			ld (store_tmp1), hl 
80b1			 
80b1				if DEBUG_STORESE 
80b1					DMARK "SGI" 
80b1 f5				push af  
80b2 3a c6 80			ld a, (.dmark)  
80b5 32 65 ee			ld (debug_mark),a  
80b8 3a c7 80			ld a, (.dmark+1)  
80bb 32 66 ee			ld (debug_mark+1),a  
80be 3a c8 80			ld a, (.dmark+2)  
80c1 32 67 ee			ld (debug_mark+2),a  
80c4 18 03			jr .pastdmark  
80c6 ..			.dmark: db "SGI"  
80c9 f1			.pastdmark: pop af  
80ca			endm  
# End of macro DMARK
80ca					CALLMONITOR 
80ca cd 6f ee			call debug_vector  
80cd				endm  
# End of macro CALLMONITOR
80cd				endif 
80cd				; get block 0 and set counter for number of files to scan 
80cd			 
80cd cd 38 82			call storage_get_block_0 
80d0			 
80d0 3a 74 ea			ld a, (store_page) 
80d3 47				ld b, a 
80d4			 
80d4				; get extent 0 of each file id 
80d4			 
80d4				if DEBUG_STORESE 
80d4					DMARK "SGc" 
80d4 f5				push af  
80d5 3a e9 80			ld a, (.dmark)  
80d8 32 65 ee			ld (debug_mark),a  
80db 3a ea 80			ld a, (.dmark+1)  
80de 32 66 ee			ld (debug_mark+1),a  
80e1 3a eb 80			ld a, (.dmark+2)  
80e4 32 67 ee			ld (debug_mark+2),a  
80e7 18 03			jr .pastdmark  
80e9 ..			.dmark: db "SGc"  
80ec f1			.pastdmark: pop af  
80ed			endm  
# End of macro DMARK
80ed					CALLMONITOR 
80ed cd 6f ee			call debug_vector  
80f0				endm  
# End of macro CALLMONITOR
80f0				endif 
80f0 60			.getloop:	ld h, b 
80f1 2e 00				ld l, 0 
80f3 c5					push bc 
80f4			 
80f4 11 74 ea				ld de, store_page 
80f7				if DEBUG_STORESE 
80f7					DMARK "SGr" 
80f7 f5				push af  
80f8 3a 0c 81			ld a, (.dmark)  
80fb 32 65 ee			ld (debug_mark),a  
80fe 3a 0d 81			ld a, (.dmark+1)  
8101 32 66 ee			ld (debug_mark+1),a  
8104 3a 0e 81			ld a, (.dmark+2)  
8107 32 67 ee			ld (debug_mark+2),a  
810a 18 03			jr .pastdmark  
810c ..			.dmark: db "SGr"  
810f f1			.pastdmark: pop af  
8110			endm  
# End of macro DMARK
8110					CALLMONITOR 
8110 cd 6f ee			call debug_vector  
8113				endm  
# End of macro CALLMONITOR
8113				endif 
8113 cd e0 86				call storage_read 
8116 cd 13 8d				call ishlzero 
8119 28 2d				jr z, .gap 
811b					 
811b					; have a file name read. Is it one we want. 
811b			 
811b 2a 6d ea				ld hl, (store_tmp1) 
811e 11 77 ea				ld de, store_page+3   ; file name 
8121			 
8121				if DEBUG_STORESE 
8121					DMARK "SGc" 
8121 f5				push af  
8122 3a 36 81			ld a, (.dmark)  
8125 32 65 ee			ld (debug_mark),a  
8128 3a 37 81			ld a, (.dmark+1)  
812b 32 66 ee			ld (debug_mark+1),a  
812e 3a 38 81			ld a, (.dmark+2)  
8131 32 67 ee			ld (debug_mark+2),a  
8134 18 03			jr .pastdmark  
8136 ..			.dmark: db "SGc"  
8139 f1			.pastdmark: pop af  
813a			endm  
# End of macro DMARK
813a					CALLMONITOR 
813a cd 6f ee			call debug_vector  
813d				endm  
# End of macro CALLMONITOR
813d				endif 
813d cd 88 90				call strcmp 
8140 20 06				jr nz, .gap   ; not this one 
8142			 
8142 c1				        pop bc 
8143			 
8143 26 00				ld h, 0 
8145 68					ld l, b 
8146 18 22				jr .getdone 
8148						 
8148			 
8148			 
8148			 
8148			.gap: 
8148				if DEBUG_STORESE 
8148					DMARK "SGg" 
8148 f5				push af  
8149 3a 5d 81			ld a, (.dmark)  
814c 32 65 ee			ld (debug_mark),a  
814f 3a 5e 81			ld a, (.dmark+1)  
8152 32 66 ee			ld (debug_mark+1),a  
8155 3a 5f 81			ld a, (.dmark+2)  
8158 32 67 ee			ld (debug_mark+2),a  
815b 18 03			jr .pastdmark  
815d ..			.dmark: db "SGg"  
8160 f1			.pastdmark: pop af  
8161			endm  
# End of macro DMARK
8161					CALLMONITOR 
8161 cd 6f ee			call debug_vector  
8164				endm  
# End of macro CALLMONITOR
8164				endif 
8164			 
8164 c1					pop bc 
8165 10 89				djnz .getloop 
8167 21 ff 00				ld hl, 255 
816a			.getdone: 
816a			 
816a				if DEBUG_STORESE 
816a					DMARK "SGe" 
816a f5				push af  
816b 3a 7f 81			ld a, (.dmark)  
816e 32 65 ee			ld (debug_mark),a  
8171 3a 80 81			ld a, (.dmark+1)  
8174 32 66 ee			ld (debug_mark+1),a  
8177 3a 81 81			ld a, (.dmark+2)  
817a 32 67 ee			ld (debug_mark+2),a  
817d 18 03			jr .pastdmark  
817f ..			.dmark: db "SGe"  
8182 f1			.pastdmark: pop af  
8183			endm  
# End of macro DMARK
8183					CALLMONITOR 
8183 cd 6f ee			call debug_vector  
8186				endm  
# End of macro CALLMONITOR
8186				endif 
8186			 
8186 c9				ret 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			; Read Block 
8187			; ---------- 
8187			; 
8187			; With current bank 
8187			;  
8187			; Get block number to read 
8187			; Load physical blocks starting at start block into buffer 
8187			 
8187			; de points to buffer to use 
8187			; hl holds logical block number  
8187			 
8187			storage_read_block: 
8187			 
8187				; TODO bank selection 
8187			 
8187				; for each of the physical blocks read it into the buffer 
8187 06 40			ld b, STORE_BLOCK_PHY 
8189			 
8189				if DEBUG_STORESE 
8189 d5					push de 
818a				endif 
818a				 
818a			.rl1:    
818a			 
818a				; read physical block at hl into de 
818a			        ; increment hl and de to next read position on exit 
818a			 
818a e5				push hl 
818b d5				push de	 
818c c5				push bc 
818d			;	if DEBUG_STORESE 
818d			;		push af 
818d			;		ld a, 'R' 
818d			;		ld (debug_mark),a 
818d			;		pop af 
818d			;		CALLMONITOR 
818d			;	endif 
818d cd ab 80			call se_readbyte 
8190			;	if DEBUG_STORESE 
8190			;		ld a,(spi_portbyte) 
8190			;		ld l, a 
8190			;		push af 
8190			;		ld a, '1' 
8190			;		ld (debug_mark),a 
8190			;		pop af 
8190			;		CALLMONITOR 
8190			;	endif 
8190 c1				pop bc 
8191 d1				pop de 
8192 e1				pop hl 
8193 12				ld (de),a 
8194 23				inc hl 
8195 13				inc de 
8196			 
8196			;	if DEBUG_STORESE 
8196			;		push af 
8196			;		ld a, 'r' 
8196			;		ld (debug_mark),a 
8196			;		pop af 
8196			;		CALLMONITOR 
8196			;	endif 
8196			 
8196 10 f2			djnz .rl1 
8198			 
8198				if DEBUG_STORESE 
8198					DMARK "SRB" 
8198 f5				push af  
8199 3a ad 81			ld a, (.dmark)  
819c 32 65 ee			ld (debug_mark),a  
819f 3a ae 81			ld a, (.dmark+1)  
81a2 32 66 ee			ld (debug_mark+1),a  
81a5 3a af 81			ld a, (.dmark+2)  
81a8 32 67 ee			ld (debug_mark+2),a  
81ab 18 03			jr .pastdmark  
81ad ..			.dmark: db "SRB"  
81b0 f1			.pastdmark: pop af  
81b1			endm  
# End of macro DMARK
81b1 d1					pop de 
81b2			; 
81b2			;		push af 
81b2			;		ld a, 'R' 
81b2			;		ld (debug_mark),a 
81b2			;		pop af 
81b2					CALLMONITOR 
81b2 cd 6f ee			call debug_vector  
81b5				endm  
# End of macro CALLMONITOR
81b5				endif 
81b5 c9				ret	 
81b6				 
81b6			 
81b6			; File Size 
81b6			; --------- 
81b6			; 
81b6			;   hl file id 
81b6			; 
81b6			;  returns in hl the number of blocks 
81b6			 
81b6			storage_file_size: 
81b6 5d				ld e, l 
81b7 16 00			ld d, 0 
81b9 21 40 00			ld hl, STORE_BLOCK_PHY 
81bc					if DEBUG_FORTH_WORDS 
81bc						DMARK "SIZ" 
81bc f5				push af  
81bd 3a d1 81			ld a, (.dmark)  
81c0 32 65 ee			ld (debug_mark),a  
81c3 3a d2 81			ld a, (.dmark+1)  
81c6 32 66 ee			ld (debug_mark+1),a  
81c9 3a d3 81			ld a, (.dmark+2)  
81cc 32 67 ee			ld (debug_mark+2),a  
81cf 18 03			jr .pastdmark  
81d1 ..			.dmark: db "SIZ"  
81d4 f1			.pastdmark: pop af  
81d5			endm  
# End of macro DMARK
81d5						CALLMONITOR 
81d5 cd 6f ee			call debug_vector  
81d8				endm  
# End of macro CALLMONITOR
81d8					endif 
81d8 cd ba 84			call storage_findnextid 
81db			 
81db cd 13 8d			call ishlzero 
81de			;	ld a, l 
81de			;	add h 
81de			;	cp 0 
81de c8				ret z			; block not found so EOF 
81df			 
81df 11 74 ea			ld de, store_page 
81e2 cd 87 81			call storage_read_block 
81e5			 
81e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
81e8 6f				ld l, a 
81e9 26 00			ld h, 0 
81eb c9			 	ret 
81ec			 
81ec			 
81ec			; Write Block 
81ec			; ----------- 
81ec			; 
81ec			; With current bank 
81ec			;  
81ec			; Get block number to write 
81ec			; Write physical blocks starting at start block from buffer 
81ec			  
81ec			storage_write_block: 
81ec				; TODO bank selection 
81ec			 
81ec				; for each of the physical blocks read it into the buffer 
81ec 06 40			ld b, STORE_BLOCK_PHY 
81ee			 
81ee				if DEBUG_STORESE 
81ee					DMARK "SWB" 
81ee f5				push af  
81ef 3a 03 82			ld a, (.dmark)  
81f2 32 65 ee			ld (debug_mark),a  
81f5 3a 04 82			ld a, (.dmark+1)  
81f8 32 66 ee			ld (debug_mark+1),a  
81fb 3a 05 82			ld a, (.dmark+2)  
81fe 32 67 ee			ld (debug_mark+2),a  
8201 18 03			jr .pastdmark  
8203 ..			.dmark: db "SWB"  
8206 f1			.pastdmark: pop af  
8207			endm  
# End of macro DMARK
8207			 
8207					;push af 
8207					;ld a, 'W' 
8207					;ld (debug_mark),a 
8207					;pop af 
8207					CALLMONITOR 
8207 cd 6f ee			call debug_vector  
820a				endm  
# End of macro CALLMONITOR
820a				endif 
820a			 
820a			; might not be working 
820a			;	call se_writepage 
820a			 
820a			;	ret 
820a			; 
820a			 
820a			 
820a			 
820a			.wl1:    
820a			 
820a				; read physical block at hl into de 
820a			        ; increment hl and de to next read position on exit 
820a			 
820a e5				push hl 
820b d5				push de	 
820c c5				push bc 
820d 1a				ld a,(de) 
820e				;if DEBUG_STORESE 
820e			;		push af 
820e			;		ld a, 'W' 
820e			;		ld (debug_mark),a 
820e			;		pop af 
820e			;		CALLMONITOR 
820e			;	endif 
820e cd ac 80			call se_writebyte 
8211			;	call delay250ms 
8211 00				nop 
8212 00				nop 
8213 00				nop 
8214			;	if DEBUG_STORESE 
8214			;		push af 
8214			;		ld a, 'w' 
8214			;		ld (debug_mark),a 
8214			;		pop af 
8214			;		CALLMONITOR 
8214			;	endif 
8214 c1				pop bc 
8215 d1				pop de 
8216 e1				pop hl 
8217 23				inc hl 
8218 13				inc de 
8219			 
8219			 
8219 10 ef			djnz .wl1 
821b			 
821b				if DEBUG_STORESE 
821b					DMARK "SW2" 
821b f5				push af  
821c 3a 30 82			ld a, (.dmark)  
821f 32 65 ee			ld (debug_mark),a  
8222 3a 31 82			ld a, (.dmark+1)  
8225 32 66 ee			ld (debug_mark+1),a  
8228 3a 32 82			ld a, (.dmark+2)  
822b 32 67 ee			ld (debug_mark+2),a  
822e 18 03			jr .pastdmark  
8230 ..			.dmark: db "SW2"  
8233 f1			.pastdmark: pop af  
8234			endm  
# End of macro DMARK
8234			 
8234					;push af 
8234					;ld a, 'W' 
8234					;ld (debug_mark),a 
8234					;pop af 
8234					CALLMONITOR 
8234 cd 6f ee			call debug_vector  
8237				endm  
# End of macro CALLMONITOR
8237				endif 
8237 c9				ret	 
8238			 
8238			; Init bank 
8238			; --------- 
8238			; 
8238			; With current bank 
8238			; 
8238			; Setup block 0 config 
8238			;     Set 0 file id counter 
8238			;     Set formatted byte pattern 
8238			;     Zero out bank label 
8238			;      
8238			; For every logical block write 0-1 byte as null 
8238			 
8238			storage_get_block_0: 
8238			 
8238				; TODO check presence 
8238			 
8238				; get block 0 config 
8238			 
8238 21 00 00			ld hl, 0 
823b 11 74 ea			ld de, store_page 
823e cd 87 81			call storage_read_block 
8241			 
8241				if DEBUG_STORESE 
8241					DMARK "SB0" 
8241 f5				push af  
8242 3a 56 82			ld a, (.dmark)  
8245 32 65 ee			ld (debug_mark),a  
8248 3a 57 82			ld a, (.dmark+1)  
824b 32 66 ee			ld (debug_mark+1),a  
824e 3a 58 82			ld a, (.dmark+2)  
8251 32 67 ee			ld (debug_mark+2),a  
8254 18 03			jr .pastdmark  
8256 ..			.dmark: db "SB0"  
8259 f1			.pastdmark: pop af  
825a			endm  
# End of macro DMARK
825a 11 74 ea				ld de, store_page 
825d			;		push af 
825d			;		ld a, 'i' 
825d			;		ld (debug_mark),a 
825d			;		pop af 
825d					CALLMONITOR 
825d cd 6f ee			call debug_vector  
8260				endm  
# End of macro CALLMONITOR
8260				endif 
8260			 
8260				; is this area formatted? 
8260			 
8260			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8260 2a 75 ea			ld hl, (store_page+1) 
8263 3e 80			ld a,0x80 
8265 bd				cp l 
8266 20 22			jr nz, .ininotformatted 
8268				; do a double check 
8268 3e 27			ld a, 0x27 
826a bc				cp h 
826b 20 1d			jr nz, .ininotformatted 
826d			 
826d				; formatted then 
826d			 
826d				if DEBUG_STORESE 
826d					DMARK "SB1" 
826d f5				push af  
826e 3a 82 82			ld a, (.dmark)  
8271 32 65 ee			ld (debug_mark),a  
8274 3a 83 82			ld a, (.dmark+1)  
8277 32 66 ee			ld (debug_mark+1),a  
827a 3a 84 82			ld a, (.dmark+2)  
827d 32 67 ee			ld (debug_mark+2),a  
8280 18 03			jr .pastdmark  
8282 ..			.dmark: db "SB1"  
8285 f1			.pastdmark: pop af  
8286			endm  
# End of macro DMARK
8286					;push af 
8286					;ld a, 'I' 
8286					;ld (debug_mark),a 
8286					;pop af 
8286					CALLMONITOR 
8286 cd 6f ee			call debug_vector  
8289				endm  
# End of macro CALLMONITOR
8289				endif 
8289 c9				ret 
828a			 
828a			.ininotformatted: 
828a				; bank not formatted so poke various bits to make sure 
828a			 
828a				if DEBUG_STORESE 
828a					DMARK "SB2" 
828a f5				push af  
828b 3a 9f 82			ld a, (.dmark)  
828e 32 65 ee			ld (debug_mark),a  
8291 3a a0 82			ld a, (.dmark+1)  
8294 32 66 ee			ld (debug_mark+1),a  
8297 3a a1 82			ld a, (.dmark+2)  
829a 32 67 ee			ld (debug_mark+2),a  
829d 18 03			jr .pastdmark  
829f ..			.dmark: db "SB2"  
82a2 f1			.pastdmark: pop af  
82a3			endm  
# End of macro DMARK
82a3					;push af 
82a3					;ld a, 'f' 
82a3					;ld (debug_mark),a 
82a3					;pop af 
82a3					CALLMONITOR 
82a3 cd 6f ee			call debug_vector  
82a6				endm  
# End of macro CALLMONITOR
82a6				endif 
82a6			 
82a6 cd c3 89			call storage_clear_page 
82a9			 
82a9 21 74 ea			ld hl, store_page 
82ac 3e 00			ld a, 0 
82ae				 
82ae 77				ld (hl),a   ; reset file counter 
82af			 
82af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82b2 22 75 ea		 	ld (store_page+1), hl	 
82b5			 
82b5				; set default label 
82b5			 
82b5 21 51 83			ld hl, .defaultbanklabl 
82b8 11 77 ea		 	ld de, store_page+3 
82bb 01 0f 00			ld bc, 15 
82be ed b0			ldir 
82c0			 
82c0				; Append the current bank id 
82c0 21 80 ea			ld hl, store_page+3+9 
82c3 3a 59 ea			ld a, (spi_device_id) 
82c6 77				ld (hl), a 
82c7			 
82c7				; save default page 0 
82c7			 
82c7 21 00 00			ld hl, 0 
82ca 11 74 ea			ld de, store_page 
82cd				if DEBUG_STORESE 
82cd					DMARK "SB3" 
82cd f5				push af  
82ce 3a e2 82			ld a, (.dmark)  
82d1 32 65 ee			ld (debug_mark),a  
82d4 3a e3 82			ld a, (.dmark+1)  
82d7 32 66 ee			ld (debug_mark+1),a  
82da 3a e4 82			ld a, (.dmark+2)  
82dd 32 67 ee			ld (debug_mark+2),a  
82e0 18 03			jr .pastdmark  
82e2 ..			.dmark: db "SB3"  
82e5 f1			.pastdmark: pop af  
82e6			endm  
# End of macro DMARK
82e6			;		push af 
82e6			;		ld a, 'F' 
82e6			;		ld (debug_mark),a 
82e6			;		pop af 
82e6					CALLMONITOR 
82e6 cd 6f ee			call debug_vector  
82e9				endm  
# End of macro CALLMONITOR
82e9				endif 
82e9 cd ec 81			call storage_write_block 
82ec				if DEBUG_STORESE 
82ec					DMARK "SB4" 
82ec f5				push af  
82ed 3a 01 83			ld a, (.dmark)  
82f0 32 65 ee			ld (debug_mark),a  
82f3 3a 02 83			ld a, (.dmark+1)  
82f6 32 66 ee			ld (debug_mark+1),a  
82f9 3a 03 83			ld a, (.dmark+2)  
82fc 32 67 ee			ld (debug_mark+2),a  
82ff 18 03			jr .pastdmark  
8301 ..			.dmark: db "SB4"  
8304 f1			.pastdmark: pop af  
8305			endm  
# End of macro DMARK
8305			;		push af 
8305			;		ld a, '>' 
8305			;		ld (debug_mark),a 
8305			;		pop af 
8305					CALLMONITOR 
8305 cd 6f ee			call debug_vector  
8308				endm  
# End of macro CALLMONITOR
8308				endif 
8308			 
8308 00				nop 
8309 00				nop 
830a 00				nop 
830b			 
830b				; now set 0 in every page to mark as a free block 
830b			 
830b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
830d 21 40 00			ld hl, STORE_BLOCK_PHY 
8310			 
8310 3e 00		.setmark1:   	ld a,0 
8312 e5					push hl 
8313 c5					push bc 
8314 cd ac 80				call se_writebyte 
8317 3e 0a			ld a, 10 
8319 cd e5 89			call aDelayInMS 
831c 23				inc hl 
831d cd ac 80				call se_writebyte 
8320 3e 0a			ld a, 10 
8322 cd e5 89			call aDelayInMS 
8325 2b				dec hl 
8326 c1					pop bc 
8327 e1					pop hl 
8328 3e 40				ld a, STORE_BLOCK_PHY 
832a cd ea 8c				call addatohl 
832d 10 e1				djnz .setmark1 
832f			 
832f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8331 3e 00		.setmark2:   	ld a,0 
8333 e5					push hl 
8334 c5					push bc 
8335 cd ac 80				call se_writebyte 
8338 3e 0a			ld a, 10 
833a cd e5 89			call aDelayInMS 
833d 23				inc hl 
833e cd ac 80				call se_writebyte 
8341 3e 0a			ld a, 10 
8343 cd e5 89			call aDelayInMS 
8346 2b				dec hl 
8347 c1					pop bc 
8348 e1					pop hl 
8349 3e 40				ld a, STORE_BLOCK_PHY 
834b cd ea 8c				call addatohl 
834e 10 e1				djnz .setmark2 
8350			 
8350					 
8350			 
8350			 
8350 c9				ret 
8351			 
8351			 
8351			 
8351			 
8351 .. 00		.defaultbanklabl:   db "BankLabel_",0 
835c			 
835c			 
835c			 
835c			; Label Bank 
835c			; ---------- 
835c			; 
835c			; With current bank 
835c			; Read block 0 
835c			; Set label 
835c			; Write block 0 
835c			 
835c			; label str pointer in hl 
835c			 
835c			storage_label:     
835c			 
835c				if DEBUG_STORESE 
835c					DMARK "LBL" 
835c f5				push af  
835d 3a 71 83			ld a, (.dmark)  
8360 32 65 ee			ld (debug_mark),a  
8363 3a 72 83			ld a, (.dmark+1)  
8366 32 66 ee			ld (debug_mark+1),a  
8369 3a 73 83			ld a, (.dmark+2)  
836c 32 67 ee			ld (debug_mark+2),a  
836f 18 03			jr .pastdmark  
8371 ..			.dmark: db "LBL"  
8374 f1			.pastdmark: pop af  
8375			endm  
# End of macro DMARK
8375					CALLMONITOR 
8375 cd 6f ee			call debug_vector  
8378				endm  
# End of macro CALLMONITOR
8378				endif 
8378			 
8378 e5				push hl 
8379			 
8379 cd 38 82			call storage_get_block_0 
837c			 
837c				; set default label 
837c			 
837c e1				pop hl 
837d			 
837d 11 77 ea		 	ld de, store_page+3 
8380 01 0f 00			ld bc, 15 
8383				if DEBUG_STORESE 
8383					DMARK "LB3" 
8383 f5				push af  
8384 3a 98 83			ld a, (.dmark)  
8387 32 65 ee			ld (debug_mark),a  
838a 3a 99 83			ld a, (.dmark+1)  
838d 32 66 ee			ld (debug_mark+1),a  
8390 3a 9a 83			ld a, (.dmark+2)  
8393 32 67 ee			ld (debug_mark+2),a  
8396 18 03			jr .pastdmark  
8398 ..			.dmark: db "LB3"  
839b f1			.pastdmark: pop af  
839c			endm  
# End of macro DMARK
839c					CALLMONITOR 
839c cd 6f ee			call debug_vector  
839f				endm  
# End of macro CALLMONITOR
839f				endif 
839f ed b0			ldir 
83a1				; save default page 0 
83a1			 
83a1 21 00 00			ld hl, 0 
83a4 11 74 ea			ld de, store_page 
83a7				if DEBUG_STORESE 
83a7					DMARK "LBW" 
83a7 f5				push af  
83a8 3a bc 83			ld a, (.dmark)  
83ab 32 65 ee			ld (debug_mark),a  
83ae 3a bd 83			ld a, (.dmark+1)  
83b1 32 66 ee			ld (debug_mark+1),a  
83b4 3a be 83			ld a, (.dmark+2)  
83b7 32 67 ee			ld (debug_mark+2),a  
83ba 18 03			jr .pastdmark  
83bc ..			.dmark: db "LBW"  
83bf f1			.pastdmark: pop af  
83c0			endm  
# End of macro DMARK
83c0					CALLMONITOR 
83c0 cd 6f ee			call debug_vector  
83c3				endm  
# End of macro CALLMONITOR
83c3				endif 
83c3 cd ec 81			call storage_write_block 
83c6			 
83c6 c9				ret 
83c7			 
83c7			 
83c7			 
83c7			; Read Block 0 - Config 
83c7			; --------------------- 
83c7			; 
83c7			; With current bank 
83c7			; Call presence test 
83c7			;    If not present format/init bank  
83c7			; Read block 0  
83c7			;  
83c7			 
83c7			 
83c7			; Dir 
83c7			; --- 
83c7			; 
83c7			; With current bank 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block read byte 2 
83c7			;      if first block of file 
83c7			;         Display file name 
83c7			;         Display type flags for file 
83c7			;        
83c7			 
83c7			; moving to words as this requires stack control 
83c7			 
83c7			 
83c7			; Delete File 
83c7			; ----------- 
83c7			; 
83c7			; With current bank 
83c7			; 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block file id 
83c7			;      If first block of file and dont have file id 
83c7			;         if file to delete 
83c7			;         Save file id 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			;      If file id is one saved 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			 
83c7			 
83c7			.se_done: 
83c7 e1				pop hl 
83c8 c9				ret 
83c9			 
83c9			storage_erase: 
83c9			 
83c9				; hl contains the file id 
83c9			 
83c9 5d				ld e, l 
83ca 16 00			ld d, 0 
83cc 21 40 00			ld hl, STORE_BLOCK_PHY 
83cf					if DEBUG_FORTH_WORDS 
83cf						DMARK "ERA" 
83cf f5				push af  
83d0 3a e4 83			ld a, (.dmark)  
83d3 32 65 ee			ld (debug_mark),a  
83d6 3a e5 83			ld a, (.dmark+1)  
83d9 32 66 ee			ld (debug_mark+1),a  
83dc 3a e6 83			ld a, (.dmark+2)  
83df 32 67 ee			ld (debug_mark+2),a  
83e2 18 03			jr .pastdmark  
83e4 ..			.dmark: db "ERA"  
83e7 f1			.pastdmark: pop af  
83e8			endm  
# End of macro DMARK
83e8						CALLMONITOR 
83e8 cd 6f ee			call debug_vector  
83eb				endm  
# End of macro CALLMONITOR
83eb					endif 
83eb cd ba 84			call storage_findnextid 
83ee cd 13 8d			call ishlzero 
83f1 c8				ret z 
83f2			 
83f2 e5				push hl 
83f3			 
83f3				; TODO check file not found 
83f3			 
83f3 11 74 ea			ld de, store_page 
83f6 cd 87 81			call storage_read_block 
83f9			 
83f9 cd 13 8d			call ishlzero 
83fc ca c7 83			jp z,.se_done 
83ff			 
83ff					if DEBUG_FORTH_WORDS 
83ff						DMARK "ER1" 
83ff f5				push af  
8400 3a 14 84			ld a, (.dmark)  
8403 32 65 ee			ld (debug_mark),a  
8406 3a 15 84			ld a, (.dmark+1)  
8409 32 66 ee			ld (debug_mark+1),a  
840c 3a 16 84			ld a, (.dmark+2)  
840f 32 67 ee			ld (debug_mark+2),a  
8412 18 03			jr .pastdmark  
8414 ..			.dmark: db "ER1"  
8417 f1			.pastdmark: pop af  
8418			endm  
# End of macro DMARK
8418						CALLMONITOR 
8418 cd 6f ee			call debug_vector  
841b				endm  
# End of macro CALLMONITOR
841b					endif 
841b 3a 74 ea			ld a, (store_page)	; get file id 
841e 32 68 ea			ld (store_tmpid), a 
8421			 
8421 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
8424 32 67 ea			ld (store_tmpext), a 
8427			 
8427				; wipe file header 
8427			 
8427 e1				pop hl 
8428 3e 00			ld a, 0 
842a 32 74 ea			ld (store_page), a 
842d 32 75 ea			ld (store_page+1),a 
8430 11 74 ea			ld de, store_page 
8433					if DEBUG_FORTH_WORDS 
8433						DMARK "ER2" 
8433 f5				push af  
8434 3a 48 84			ld a, (.dmark)  
8437 32 65 ee			ld (debug_mark),a  
843a 3a 49 84			ld a, (.dmark+1)  
843d 32 66 ee			ld (debug_mark+1),a  
8440 3a 4a 84			ld a, (.dmark+2)  
8443 32 67 ee			ld (debug_mark+2),a  
8446 18 03			jr .pastdmark  
8448 ..			.dmark: db "ER2"  
844b f1			.pastdmark: pop af  
844c			endm  
# End of macro DMARK
844c						CALLMONITOR 
844c cd 6f ee			call debug_vector  
844f				endm  
# End of macro CALLMONITOR
844f					endif 
844f cd ec 81			call storage_write_block 
8452			 
8452			 
8452				; wipe file extents 
8452			 
8452 3a 67 ea			ld a, (store_tmpext) 
8455 47				ld b, a 
8456			 
8456			.eraext:	  
8456 c5				push bc 
8457			 
8457 21 40 00			ld hl, STORE_BLOCK_PHY 
845a 3a 68 ea			ld a,(store_tmpid) 
845d 5f				ld e, a 
845e 50				ld d, b	 
845f					if DEBUG_FORTH_WORDS 
845f						DMARK "ER3" 
845f f5				push af  
8460 3a 74 84			ld a, (.dmark)  
8463 32 65 ee			ld (debug_mark),a  
8466 3a 75 84			ld a, (.dmark+1)  
8469 32 66 ee			ld (debug_mark+1),a  
846c 3a 76 84			ld a, (.dmark+2)  
846f 32 67 ee			ld (debug_mark+2),a  
8472 18 03			jr .pastdmark  
8474 ..			.dmark: db "ER3"  
8477 f1			.pastdmark: pop af  
8478			endm  
# End of macro DMARK
8478						CALLMONITOR 
8478 cd 6f ee			call debug_vector  
847b				endm  
# End of macro CALLMONITOR
847b					endif 
847b cd ba 84			call storage_findnextid 
847e cd 13 8d			call ishlzero 
8481 ca c7 83			jp z,.se_done 
8484			 
8484 e5				push hl 
8485 11 74 ea			ld de, store_page 
8488 cd 87 81			call storage_read_block 
848b			 
848b				; free block	 
848b			 
848b 3e 00			ld a, 0 
848d 32 74 ea			ld (store_page), a 
8490 32 75 ea			ld (store_page+1),a 
8493 11 74 ea			ld de, store_page 
8496 e1				pop hl 
8497					if DEBUG_FORTH_WORDS 
8497						DMARK "ER4" 
8497 f5				push af  
8498 3a ac 84			ld a, (.dmark)  
849b 32 65 ee			ld (debug_mark),a  
849e 3a ad 84			ld a, (.dmark+1)  
84a1 32 66 ee			ld (debug_mark+1),a  
84a4 3a ae 84			ld a, (.dmark+2)  
84a7 32 67 ee			ld (debug_mark+2),a  
84aa 18 03			jr .pastdmark  
84ac ..			.dmark: db "ER4"  
84af f1			.pastdmark: pop af  
84b0			endm  
# End of macro DMARK
84b0						CALLMONITOR 
84b0 cd 6f ee			call debug_vector  
84b3				endm  
# End of macro CALLMONITOR
84b3					endif 
84b3 cd ec 81			call storage_write_block 
84b6			 
84b6 c1				pop bc 
84b7 10 9d			djnz .eraext 
84b9			 
84b9 c9				ret 
84ba			 
84ba			 
84ba			; Find Free Block 
84ba			; --------------- 
84ba			; 
84ba			; With current bank 
84ba			;  
84ba			; From given starting logical block 
84ba			;    Read block  
84ba			;    If no file id 
84ba			;         Return block id 
84ba			 
84ba			 
84ba			; hl starting page number 
84ba			; hl contains free page number or zero if no pages free 
84ba			; e contains the file id to locate 
84ba			; d contains the block number 
84ba			 
84ba			; TODO change to find file id and use zero for free block 
84ba			 
84ba			storage_findnextid: 
84ba			 
84ba				; now locate first 0 page to mark as a free block 
84ba			 
84ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84bc			;	ld hl, STORE_BLOCK_PHY 
84bc			 
84bc					if DEBUG_FORTH_WORDS 
84bc					DMARK "FNI" 
84bc f5				push af  
84bd 3a d1 84			ld a, (.dmark)  
84c0 32 65 ee			ld (debug_mark),a  
84c3 3a d2 84			ld a, (.dmark+1)  
84c6 32 66 ee			ld (debug_mark+1),a  
84c9 3a d3 84			ld a, (.dmark+2)  
84cc 32 67 ee			ld (debug_mark+2),a  
84cf 18 03			jr .pastdmark  
84d1 ..			.dmark: db "FNI"  
84d4 f1			.pastdmark: pop af  
84d5			endm  
# End of macro DMARK
84d5						CALLMONITOR 
84d5 cd 6f ee			call debug_vector  
84d8				endm  
# End of macro CALLMONITOR
84d8					endif 
84d8			.ff1:   	 
84d8 e5					push hl 
84d9 c5					push bc 
84da d5					push de 
84db cd ab 80				call se_readbyte 
84de 5f					ld e,a 
84df 23					inc hl 
84e0 cd ab 80				call se_readbyte 
84e3 57					ld d, a 
84e4 e1					pop hl 
84e5 e5					push hl 
84e6 cd 08 8d				call cmp16 
84e9 28 49				jr z, .fffound 
84eb			 
84eb d1					pop de 
84ec c1					pop bc 
84ed e1					pop hl 
84ee			 
84ee					; is found? 
84ee					;cp e 
84ee					;ret z 
84ee			 
84ee 3e 40				ld a, STORE_BLOCK_PHY 
84f0 cd ea 8c				call addatohl 
84f3 10 e3				djnz .ff1 
84f5			 
84f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84f7			.ff2:   	 
84f7			 
84f7 e5					push hl 
84f8 c5					push bc 
84f9 d5					push de 
84fa cd ab 80				call se_readbyte 
84fd 5f					ld e,a 
84fe 23					inc hl 
84ff cd ab 80				call se_readbyte 
8502 57					ld d, a 
8503			 
8503 e1					pop hl 
8504 e5					push hl 
8505 cd 08 8d				call cmp16 
8508 28 2a				jr z, .fffound 
850a			 
850a d1					pop de 
850b c1					pop bc 
850c e1					pop hl 
850d					; is found? 
850d					;cp e 
850d					;ret z 
850d			 
850d 3e 40				ld a, STORE_BLOCK_PHY 
850f cd ea 8c				call addatohl 
8512 10 e3				djnz .ff2 
8514			 
8514			 
8514					if DEBUG_FORTH_WORDS 
8514					DMARK "FN-" 
8514 f5				push af  
8515 3a 29 85			ld a, (.dmark)  
8518 32 65 ee			ld (debug_mark),a  
851b 3a 2a 85			ld a, (.dmark+1)  
851e 32 66 ee			ld (debug_mark+1),a  
8521 3a 2b 85			ld a, (.dmark+2)  
8524 32 67 ee			ld (debug_mark+2),a  
8527 18 03			jr .pastdmark  
8529 ..			.dmark: db "FN-"  
852c f1			.pastdmark: pop af  
852d			endm  
# End of macro DMARK
852d					;	push af 
852d					;	ld a, 'n' 
852d					;	ld (debug_mark),a 
852d					;	pop af 
852d						CALLMONITOR 
852d cd 6f ee			call debug_vector  
8530				endm  
# End of macro CALLMONITOR
8530					endif 
8530				; no free marks! 
8530 21 00 00				ld hl, 0 
8533 c9				ret 
8534			.fffound: 
8534				 
8534			 
8534 d1					pop de 
8535 c1					pop bc 
8536 e1					pop hl 
8537					if DEBUG_FORTH_WORDS 
8537					DMARK "FNF" 
8537 f5				push af  
8538 3a 4c 85			ld a, (.dmark)  
853b 32 65 ee			ld (debug_mark),a  
853e 3a 4d 85			ld a, (.dmark+1)  
8541 32 66 ee			ld (debug_mark+1),a  
8544 3a 4e 85			ld a, (.dmark+2)  
8547 32 67 ee			ld (debug_mark+2),a  
854a 18 03			jr .pastdmark  
854c ..			.dmark: db "FNF"  
854f f1			.pastdmark: pop af  
8550			endm  
# End of macro DMARK
8550					;	push af 
8550					;	ld a, 'n' 
8550					;	ld (debug_mark),a 
8550					;	pop af 
8550						CALLMONITOR 
8550 cd 6f ee			call debug_vector  
8553				endm  
# End of macro CALLMONITOR
8553					endif 
8553 c9				ret 
8554			 
8554			 
8554			 
8554			; Free Space 
8554			; ---------- 
8554			; 
8554			; With current bank 
8554			; 
8554			; Set block count to zero 
8554			; Starting with first logical block 
8554			;      Find free block  
8554			;      If block id given, increment block count 
8554			; 
8554			;  
8554			 
8554			 
8554			; hl contains count of free blocks 
8554			 
8554			storage_freeblocks: 
8554			 
8554				; now locate first 0 page to mark as a free block 
8554			 
8554 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8556 21 40 00			ld hl, STORE_BLOCK_PHY 
8559 11 00 00			ld de, 0 
855c			 
855c			.fb1:   	 
855c e5					push hl 
855d c5					push bc 
855e d5					push de 
855f cd ab 80				call se_readbyte 
8562 d1					pop de 
8563 c1					pop bc 
8564 e1					pop hl 
8565			 
8565					; is free? 
8565 fe 00				cp 0 
8567 20 01				jr nz, .ff1cont 
8569 13					inc de 
856a			 
856a			.ff1cont: 
856a			 
856a			 
856a 3e 40				ld a, STORE_BLOCK_PHY 
856c cd ea 8c				call addatohl 
856f 10 eb				djnz .fb1 
8571			 
8571 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8573			.fb2:   	 
8573 e5					push hl 
8574 c5					push bc 
8575 d5					push de 
8576 cd ab 80				call se_readbyte 
8579 d1					pop de 
857a c1					pop bc 
857b e1					pop hl 
857c			 
857c					; is free? 
857c fe 00				cp 0 
857e 20 01				jr nz, .ff2cont 
8580 13					inc de 
8581			 
8581			.ff2cont: 
8581			 
8581 3e 40				ld a, STORE_BLOCK_PHY 
8583 cd ea 8c				call addatohl 
8586 10 eb				djnz .fb2 
8588			 
8588 eb				ex de, hl 
8589 c9				ret 
858a			 
858a			; Get File ID 
858a			; ----------- 
858a			; 
858a			; With current bank 
858a			;  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; For each logical block 
858a			;    Read block file id 
858a			;      If first block of file and dont have file id 
858a			;         if file get id and exit 
858a			 
858a			 
858a			 
858a			 
858a			; Create File 
858a			; ----------- 
858a			; 
858a			; With current bank  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; Increment file id number 
858a			; Save Config 
858a			; Find free block 
858a			; Set buffer with file name and file id 
858a			; Write buffer to free block  
858a			 
858a			 
858a			; hl point to file name 
858a			; hl returns file id 
858a			 
858a			; file format: 
858a			; byte 0 - file id 
858a			; byte 1 - extent number 
858a			; byte 2-> data 
858a			 
858a			; format for extent number 0: 
858a			; 
858a			; byte 0 - file id 
858a			; byte 1 - extent 0 
858a			; byte 2 - extent count 
858a			; byte 3 -> file name and meta data 
858a			 
858a			 
858a			storage_create: 
858a				if DEBUG_STORESE 
858a					DMARK "SCR" 
858a f5				push af  
858b 3a 9f 85			ld a, (.dmark)  
858e 32 65 ee			ld (debug_mark),a  
8591 3a a0 85			ld a, (.dmark+1)  
8594 32 66 ee			ld (debug_mark+1),a  
8597 3a a1 85			ld a, (.dmark+2)  
859a 32 67 ee			ld (debug_mark+2),a  
859d 18 03			jr .pastdmark  
859f ..			.dmark: db "SCR"  
85a2 f1			.pastdmark: pop af  
85a3			endm  
# End of macro DMARK
85a3					CALLMONITOR 
85a3 cd 6f ee			call debug_vector  
85a6				endm  
# End of macro CALLMONITOR
85a6				endif 
85a6			 
85a6 e5				push hl		; save file name pointer 
85a7			 
85a7 cd 38 82			call storage_get_block_0 
85aa			 
85aa 3a 74 ea			ld a,(store_page)	; get current file id 
85ad 3c				inc a 
85ae 32 74 ea			ld (store_page),a 
85b1				 
85b1 32 68 ea			ld (store_tmpid),a			; save id 
85b4			 
85b4 21 00 00			ld hl, 0 
85b7 11 74 ea			ld de, store_page 
85ba				if DEBUG_STORESE 
85ba					DMARK "SCw" 
85ba f5				push af  
85bb 3a cf 85			ld a, (.dmark)  
85be 32 65 ee			ld (debug_mark),a  
85c1 3a d0 85			ld a, (.dmark+1)  
85c4 32 66 ee			ld (debug_mark+1),a  
85c7 3a d1 85			ld a, (.dmark+2)  
85ca 32 67 ee			ld (debug_mark+2),a  
85cd 18 03			jr .pastdmark  
85cf ..			.dmark: db "SCw"  
85d2 f1			.pastdmark: pop af  
85d3			endm  
# End of macro DMARK
85d3					CALLMONITOR 
85d3 cd 6f ee			call debug_vector  
85d6				endm  
# End of macro CALLMONITOR
85d6				endif 
85d6 cd ec 81			call storage_write_block	 ; save update 
85d9			 
85d9				if DEBUG_STORESE 
85d9 11 74 ea				ld de, store_page 
85dc					DMARK "SCC" 
85dc f5				push af  
85dd 3a f1 85			ld a, (.dmark)  
85e0 32 65 ee			ld (debug_mark),a  
85e3 3a f2 85			ld a, (.dmark+1)  
85e6 32 66 ee			ld (debug_mark+1),a  
85e9 3a f3 85			ld a, (.dmark+2)  
85ec 32 67 ee			ld (debug_mark+2),a  
85ef 18 03			jr .pastdmark  
85f1 ..			.dmark: db "SCC"  
85f4 f1			.pastdmark: pop af  
85f5			endm  
# End of macro DMARK
85f5					CALLMONITOR 
85f5 cd 6f ee			call debug_vector  
85f8				endm  
# End of macro CALLMONITOR
85f8				endif 
85f8				;  
85f8				 
85f8 21 40 00			ld hl, STORE_BLOCK_PHY 
85fb 11 00 00			ld de, 0 
85fe cd ba 84			call storage_findnextid 
8601			 
8601 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
8604			 
8604				; TODO detect 0 = no spare blocks 
8604			 
8604				; hl now contains the free page to use for the file header page 
8604			 
8604				if DEBUG_STORESE 
8604				DMARK "SCF" 
8604 f5				push af  
8605 3a 19 86			ld a, (.dmark)  
8608 32 65 ee			ld (debug_mark),a  
860b 3a 1a 86			ld a, (.dmark+1)  
860e 32 66 ee			ld (debug_mark+1),a  
8611 3a 1b 86			ld a, (.dmark+2)  
8614 32 67 ee			ld (debug_mark+2),a  
8617 18 03			jr .pastdmark  
8619 ..			.dmark: db "SCF"  
861c f1			.pastdmark: pop af  
861d			endm  
# End of macro DMARK
861d					CALLMONITOR 
861d cd 6f ee			call debug_vector  
8620				endm  
# End of macro CALLMONITOR
8620				endif 
8620			 
8620 22 5f ea			ld (store_tmppageid), hl 
8623				 
8623 3a 68 ea			ld a,(store_tmpid)    ; get file id 
8626			;	ld a, (store_filecache)			; save to cache 
8626			 
8626 32 74 ea			ld (store_page),a    ; set page id 
8629 3e 00			ld a, 0			 ; extent 0 is file header 
862b 32 75 ea			ld (store_page+1), a   ; set file extent 
862e			 
862e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
8631			 
8631			;	inc hl 		; init block 0 of file 
8631			;	inc hl   		; skip file and extent id 
8631			 ;       ld a, 0 
8631			;	ld (hl),a 
8631			;	ld a, (store_filecache+1)  	; save to cache 
8631			 
8631			;	inc hl    ; file name 
8631				 
8631				 
8631 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8634				if DEBUG_STORESE 
8634					DMARK "SCc" 
8634 f5				push af  
8635 3a 49 86			ld a, (.dmark)  
8638 32 65 ee			ld (debug_mark),a  
863b 3a 4a 86			ld a, (.dmark+1)  
863e 32 66 ee			ld (debug_mark+1),a  
8641 3a 4b 86			ld a, (.dmark+2)  
8644 32 67 ee			ld (debug_mark+2),a  
8647 18 03			jr .pastdmark  
8649 ..			.dmark: db "SCc"  
864c f1			.pastdmark: pop af  
864d			endm  
# End of macro DMARK
864d					CALLMONITOR 
864d cd 6f ee			call debug_vector  
8650				endm  
# End of macro CALLMONITOR
8650				endif 
8650 e1				pop hl    ; get zero term string 
8651 e5				push hl 
8652 3e 00			ld a, 0 
8654 cd 5b 90			call strlent 
8657 23				inc hl   ; cover zero term 
8658 06 00			ld b,0 
865a 4d				ld c,l 
865b e1				pop hl 
865c				;ex de, hl 
865c				if DEBUG_STORESE 
865c					DMARK "SCa" 
865c f5				push af  
865d 3a 71 86			ld a, (.dmark)  
8660 32 65 ee			ld (debug_mark),a  
8663 3a 72 86			ld a, (.dmark+1)  
8666 32 66 ee			ld (debug_mark+1),a  
8669 3a 73 86			ld a, (.dmark+2)  
866c 32 67 ee			ld (debug_mark+2),a  
866f 18 03			jr .pastdmark  
8671 ..			.dmark: db "SCa"  
8674 f1			.pastdmark: pop af  
8675			endm  
# End of macro DMARK
8675					;push af 
8675					;ld a, 'a' 
8675					;ld (debug_mark),a 
8675					;pop af 
8675					CALLMONITOR 
8675 cd 6f ee			call debug_vector  
8678				endm  
# End of macro CALLMONITOR
8678				endif 
8678 ed b0			ldir    ; copy zero term string 
867a				if DEBUG_STORESE 
867a					DMARK "SCA" 
867a f5				push af  
867b 3a 8f 86			ld a, (.dmark)  
867e 32 65 ee			ld (debug_mark),a  
8681 3a 90 86			ld a, (.dmark+1)  
8684 32 66 ee			ld (debug_mark+1),a  
8687 3a 91 86			ld a, (.dmark+2)  
868a 32 67 ee			ld (debug_mark+2),a  
868d 18 03			jr .pastdmark  
868f ..			.dmark: db "SCA"  
8692 f1			.pastdmark: pop af  
8693			endm  
# End of macro DMARK
8693					CALLMONITOR 
8693 cd 6f ee			call debug_vector  
8696				endm  
# End of macro CALLMONITOR
8696				endif 
8696			 
8696				; write file header page 
8696			 
8696 2a 5f ea			ld hl,(store_tmppageid) 
8699 11 74 ea			ld de, store_page 
869c				if DEBUG_STORESE 
869c					DMARK "SCb" 
869c f5				push af  
869d 3a b1 86			ld a, (.dmark)  
86a0 32 65 ee			ld (debug_mark),a  
86a3 3a b2 86			ld a, (.dmark+1)  
86a6 32 66 ee			ld (debug_mark+1),a  
86a9 3a b3 86			ld a, (.dmark+2)  
86ac 32 67 ee			ld (debug_mark+2),a  
86af 18 03			jr .pastdmark  
86b1 ..			.dmark: db "SCb"  
86b4 f1			.pastdmark: pop af  
86b5			endm  
# End of macro DMARK
86b5					;push af 
86b5					;ld a, 'b' 
86b5					;ld (debug_mark),a 
86b5					;pop af 
86b5					CALLMONITOR 
86b5 cd 6f ee			call debug_vector  
86b8				endm  
# End of macro CALLMONITOR
86b8				endif 
86b8 cd ec 81			call storage_write_block 
86bb			 
86bb 3a 68 ea			ld a, (store_tmpid) 
86be 6f				ld l, a 
86bf 26 00			ld h,0 
86c1				if DEBUG_STORESE 
86c1					DMARK "SCz" 
86c1 f5				push af  
86c2 3a d6 86			ld a, (.dmark)  
86c5 32 65 ee			ld (debug_mark),a  
86c8 3a d7 86			ld a, (.dmark+1)  
86cb 32 66 ee			ld (debug_mark+1),a  
86ce 3a d8 86			ld a, (.dmark+2)  
86d1 32 67 ee			ld (debug_mark+2),a  
86d4 18 03			jr .pastdmark  
86d6 ..			.dmark: db "SCz"  
86d9 f1			.pastdmark: pop af  
86da			endm  
# End of macro DMARK
86da					CALLMONITOR 
86da cd 6f ee			call debug_vector  
86dd				endm  
# End of macro CALLMONITOR
86dd				endif 
86dd c9				ret 
86de				 
86de			 
86de			 
86de			; 
86de			; Read File 
86de			; 
86de			; h - file id to locate 
86de			; l - extent to locate 
86de			; de - pointer to string to read into 
86de			; 
86de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86de			 
86de			.sr_fail: 
86de d1				pop de 
86df c9				ret 
86e0			 
86e0			storage_read: 
86e0			 
86e0			 
86e0 d5				push de 
86e1			 
86e1			; TODO BUG the above push is it popped before the RET Z? 
86e1			 
86e1			; TODO how to handle multiple part blocks 
86e1			 
86e1				; locate file extent to read 
86e1			 
86e1 5c				ld e, h 
86e2 55				ld d, l 
86e3			 
86e3			.srext: 
86e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
86e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86ea			 
86ea 21 40 00			ld hl, STORE_BLOCK_PHY 
86ed				if DEBUG_STORESE 
86ed					DMARK "sre" 
86ed f5				push af  
86ee 3a 02 87			ld a, (.dmark)  
86f1 32 65 ee			ld (debug_mark),a  
86f4 3a 03 87			ld a, (.dmark+1)  
86f7 32 66 ee			ld (debug_mark+1),a  
86fa 3a 04 87			ld a, (.dmark+2)  
86fd 32 67 ee			ld (debug_mark+2),a  
8700 18 03			jr .pastdmark  
8702 ..			.dmark: db "sre"  
8705 f1			.pastdmark: pop af  
8706			endm  
# End of macro DMARK
8706					CALLMONITOR 
8706 cd 6f ee			call debug_vector  
8709				endm  
# End of macro CALLMONITOR
8709				endif 
8709 cd ba 84			call storage_findnextid 
870c			 
870c				if DEBUG_STORESE 
870c					DMARK "srf" 
870c f5				push af  
870d 3a 21 87			ld a, (.dmark)  
8710 32 65 ee			ld (debug_mark),a  
8713 3a 22 87			ld a, (.dmark+1)  
8716 32 66 ee			ld (debug_mark+1),a  
8719 3a 23 87			ld a, (.dmark+2)  
871c 32 67 ee			ld (debug_mark+2),a  
871f 18 03			jr .pastdmark  
8721 ..			.dmark: db "srf"  
8724 f1			.pastdmark: pop af  
8725			endm  
# End of macro DMARK
8725					CALLMONITOR 
8725 cd 6f ee			call debug_vector  
8728				endm  
# End of macro CALLMONITOR
8728				endif 
8728 cd 13 8d			call ishlzero 
872b			;	ld a, l 
872b			;	add h 
872b			;	cp 0 
872b 28 b1			jr z,.sr_fail			; block not found so EOF 
872d			 
872d				; save current address for use by higher level words etc 
872d			 
872d 22 65 ea			ld (store_openaddr),hl 
8730			 
8730			 
8730				; hl contains page number to load 
8730 d1				pop de   ; get storage 
8731 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
8735 d5				push de 
8736				if DEBUG_STORESE 
8736					DMARK "srg" 
8736 f5				push af  
8737 3a 4b 87			ld a, (.dmark)  
873a 32 65 ee			ld (debug_mark),a  
873d 3a 4c 87			ld a, (.dmark+1)  
8740 32 66 ee			ld (debug_mark+1),a  
8743 3a 4d 87			ld a, (.dmark+2)  
8746 32 67 ee			ld (debug_mark+2),a  
8749 18 03			jr .pastdmark  
874b ..			.dmark: db "srg"  
874e f1			.pastdmark: pop af  
874f			endm  
# End of macro DMARK
874f					CALLMONITOR 
874f cd 6f ee			call debug_vector  
8752				endm  
# End of macro CALLMONITOR
8752				endif 
8752 cd 87 81			call storage_read_block 
8755			 
8755				; if this a continuation read??? 
8755			 
8755 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8758			 
8758 3e 3f			ld a, STORE_BLOCK_PHY-1 
875a cd ea 8c			call addatohl 
875d 7e				ld a,(hl) 
875e fe 00			cp 0 
8760 28 02			jr z, .markiscont 
8762 3e ff			ld a, 255 
8764			 
8764			.markiscont: 
8764 32 67 ea			ld (store_readcont), a 
8767			 
8767				if DEBUG_STORESE 
8767					DMARK "srC" 
8767 f5				push af  
8768 3a 7c 87			ld a, (.dmark)  
876b 32 65 ee			ld (debug_mark),a  
876e 3a 7d 87			ld a, (.dmark+1)  
8771 32 66 ee			ld (debug_mark+1),a  
8774 3a 7e 87			ld a, (.dmark+2)  
8777 32 67 ee			ld (debug_mark+2),a  
877a 18 03			jr .pastdmark  
877c ..			.dmark: db "srC"  
877f f1			.pastdmark: pop af  
8780			endm  
# End of macro DMARK
8780					CALLMONITOR 
8780 cd 6f ee			call debug_vector  
8783				endm  
# End of macro CALLMONITOR
8783				endif 
8783				; only short reads enabled 
8783			 
8783 3a 6f ea			ld a, (store_longread) 
8786 fe 00			cp 0 
8788 ca 55 88			jp z, .readdone 
878b			 
878b			; TODO if block has no zeros then need to read next block  
878b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
878b			; check last byte of physical block. 
878b			; if not zero then the next block needs to be loaded 
878b			 
878b			 
878b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
878e			 
878e 3e 3f			ld a, STORE_BLOCK_PHY-1 
8790 cd ea 8c			call addatohl 
8793				;dec hl 
8793 7e				ld a,(hl) 
8794				if DEBUG_STORESE 
8794					DMARK "sr?" 
8794 f5				push af  
8795 3a a9 87			ld a, (.dmark)  
8798 32 65 ee			ld (debug_mark),a  
879b 3a aa 87			ld a, (.dmark+1)  
879e 32 66 ee			ld (debug_mark+1),a  
87a1 3a ab 87			ld a, (.dmark+2)  
87a4 32 67 ee			ld (debug_mark+2),a  
87a7 18 03			jr .pastdmark  
87a9 ..			.dmark: db "sr?"  
87ac f1			.pastdmark: pop af  
87ad			endm  
# End of macro DMARK
87ad					CALLMONITOR 
87ad cd 6f ee			call debug_vector  
87b0				endm  
# End of macro CALLMONITOR
87b0				endif 
87b0 fe 00			cp 0 
87b2 ca 55 88			jp z, .readdone 
87b5			 
87b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87b5			 
87b5 23				inc hl 
87b6			 
87b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87b9			 
87b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
87bd			 
87bd eb				ex de, hl 
87be			 
87be				; next ext 
87be			 
87be 23				inc hl 
87bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
87c2			 
87c2				if DEBUG_STORESE 
87c2					DMARK "sF2" 
87c2 f5				push af  
87c3 3a d7 87			ld a, (.dmark)  
87c6 32 65 ee			ld (debug_mark),a  
87c9 3a d8 87			ld a, (.dmark+1)  
87cc 32 66 ee			ld (debug_mark+1),a  
87cf 3a d9 87			ld a, (.dmark+2)  
87d2 32 67 ee			ld (debug_mark+2),a  
87d5 18 03			jr .pastdmark  
87d7 ..			.dmark: db "sF2"  
87da f1			.pastdmark: pop af  
87db			endm  
# End of macro DMARK
87db					CALLMONITOR 
87db cd 6f ee			call debug_vector  
87de				endm  
# End of macro CALLMONITOR
87de				endif 
87de			 
87de				; get and load block 
87de			 
87de cd ba 84			call storage_findnextid 
87e1			 
87e1				if DEBUG_STORESE 
87e1					DMARK "sf2" 
87e1 f5				push af  
87e2 3a f6 87			ld a, (.dmark)  
87e5 32 65 ee			ld (debug_mark),a  
87e8 3a f7 87			ld a, (.dmark+1)  
87eb 32 66 ee			ld (debug_mark+1),a  
87ee 3a f8 87			ld a, (.dmark+2)  
87f1 32 67 ee			ld (debug_mark+2),a  
87f4 18 03			jr .pastdmark  
87f6 ..			.dmark: db "sf2"  
87f9 f1			.pastdmark: pop af  
87fa			endm  
# End of macro DMARK
87fa					CALLMONITOR 
87fa cd 6f ee			call debug_vector  
87fd				endm  
# End of macro CALLMONITOR
87fd				endif 
87fd cd 13 8d			call ishlzero 
8800			;	ld a, l 
8800			;	add h 
8800			;	cp 0 
8800 ca de 86			jp z,.sr_fail			; block not found so EOF 
8803				 
8803				; save current address for use by higher level words etc 
8803			 
8803 22 65 ea			ld (store_openaddr),hl 
8806			 
8806 cd 87 81			call storage_read_block 
8809			 
8809				; on a continuation block, we now have the file id and ext in the middle of the block 
8809				; we need to pull everything back  
8809			 
8809 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
880d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8810 23				inc hl 
8811 23				inc hl     ; skip id and ext 
8812 01 40 00			ld bc, STORE_BLOCK_PHY 
8815				if DEBUG_STORESE 
8815					DMARK "SR<" 
8815 f5				push af  
8816 3a 2a 88			ld a, (.dmark)  
8819 32 65 ee			ld (debug_mark),a  
881c 3a 2b 88			ld a, (.dmark+1)  
881f 32 66 ee			ld (debug_mark+1),a  
8822 3a 2c 88			ld a, (.dmark+2)  
8825 32 67 ee			ld (debug_mark+2),a  
8828 18 03			jr .pastdmark  
882a ..			.dmark: db "SR<"  
882d f1			.pastdmark: pop af  
882e			endm  
# End of macro DMARK
882e					CALLMONITOR 
882e cd 6f ee			call debug_vector  
8831				endm  
# End of macro CALLMONITOR
8831				endif 
8831 ed b0			ldir     ; copy data 
8833			 
8833				; move the pointer back and pretend we have a full buffer for next recheck 
8833			 
8833 1b				dec de 
8834 1b				dec de 
8835			 
8835			; TODO do pop below now short circuit loop????? 
8835 c1				pop bc     ; get rid of spare de on stack 
8836				if DEBUG_STORESE 
8836					DMARK "SR>" 
8836 f5				push af  
8837 3a 4b 88			ld a, (.dmark)  
883a 32 65 ee			ld (debug_mark),a  
883d 3a 4c 88			ld a, (.dmark+1)  
8840 32 66 ee			ld (debug_mark+1),a  
8843 3a 4d 88			ld a, (.dmark+2)  
8846 32 67 ee			ld (debug_mark+2),a  
8849 18 03			jr .pastdmark  
884b ..			.dmark: db "SR>"  
884e f1			.pastdmark: pop af  
884f			endm  
# End of macro DMARK
884f					CALLMONITOR 
884f cd 6f ee			call debug_vector  
8852				endm  
# End of macro CALLMONITOR
8852				endif 
8852 c3 e3 86			jp .srext 
8855			 
8855			 
8855			 
8855			 
8855			 
8855			.readdone:		 
8855 e1				pop hl 		 ; return start of data to show as not EOF 
8856 23				inc hl   ; past file id 
8857 23				inc hl   ; past ext 
8858				if DEBUG_STORESE 
8858					DMARK "SRe" 
8858 f5				push af  
8859 3a 6d 88			ld a, (.dmark)  
885c 32 65 ee			ld (debug_mark),a  
885f 3a 6e 88			ld a, (.dmark+1)  
8862 32 66 ee			ld (debug_mark+1),a  
8865 3a 6f 88			ld a, (.dmark+2)  
8868 32 67 ee			ld (debug_mark+2),a  
886b 18 03			jr .pastdmark  
886d ..			.dmark: db "SRe"  
8870 f1			.pastdmark: pop af  
8871			endm  
# End of macro DMARK
8871					CALLMONITOR 
8871 cd 6f ee			call debug_vector  
8874				endm  
# End of macro CALLMONITOR
8874				endif 
8874 c9					ret 
8875			 
8875			 
8875			 
8875			; 
8875			; Append File 
8875			; 
8875			; hl - file id to locate 
8875			; de - pointer to (multi block) string to write 
8875			 
8875			.sa_notfound: 
8875 d1				pop de 
8876 c9				ret 
8877			 
8877			 
8877			storage_append: 
8877				; hl -  file id to append to 
8877				; de - string to append 
8877			 
8877 d5				push de 
8878				 
8878				if DEBUG_STORESE 
8878					DMARK "AP1" 
8878 f5				push af  
8879 3a 8d 88			ld a, (.dmark)  
887c 32 65 ee			ld (debug_mark),a  
887f 3a 8e 88			ld a, (.dmark+1)  
8882 32 66 ee			ld (debug_mark+1),a  
8885 3a 8f 88			ld a, (.dmark+2)  
8888 32 67 ee			ld (debug_mark+2),a  
888b 18 03			jr .pastdmark  
888d ..			.dmark: db "AP1"  
8890 f1			.pastdmark: pop af  
8891			endm  
# End of macro DMARK
8891					CALLMONITOR 
8891 cd 6f ee			call debug_vector  
8894				endm  
# End of macro CALLMONITOR
8894				endif 
8894			 
8894 7d				ld a, l 
8895 32 68 ea			ld (store_tmpid), a 
8898			 
8898				; get file header  
8898			 
8898 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
889a 3a 68 ea			ld a, (store_tmpid) 
889d 5f				ld e, a 
889e			 
889e 21 40 00				ld hl, STORE_BLOCK_PHY 
88a1 cd ba 84				call storage_findnextid 
88a4			 
88a4 cd 13 8d			call ishlzero 
88a7 28 cc			jr z, .sa_notfound 
88a9			 
88a9 22 5f ea			ld (store_tmppageid), hl 
88ac			 
88ac				; TODO handle file id not found 
88ac			 
88ac				if DEBUG_STORESE 
88ac					DMARK "AP2" 
88ac f5				push af  
88ad 3a c1 88			ld a, (.dmark)  
88b0 32 65 ee			ld (debug_mark),a  
88b3 3a c2 88			ld a, (.dmark+1)  
88b6 32 66 ee			ld (debug_mark+1),a  
88b9 3a c3 88			ld a, (.dmark+2)  
88bc 32 67 ee			ld (debug_mark+2),a  
88bf 18 03			jr .pastdmark  
88c1 ..			.dmark: db "AP2"  
88c4 f1			.pastdmark: pop af  
88c5			endm  
# End of macro DMARK
88c5					CALLMONITOR 
88c5 cd 6f ee			call debug_vector  
88c8				endm  
# End of macro CALLMONITOR
88c8				endif 
88c8			 
88c8				; update file extent count 
88c8			 
88c8 11 74 ea			ld de, store_page 
88cb			 
88cb cd 87 81			call storage_read_block 
88ce			 
88ce				if DEBUG_STORESE 
88ce					DMARK "AP3" 
88ce f5				push af  
88cf 3a e3 88			ld a, (.dmark)  
88d2 32 65 ee			ld (debug_mark),a  
88d5 3a e4 88			ld a, (.dmark+1)  
88d8 32 66 ee			ld (debug_mark+1),a  
88db 3a e5 88			ld a, (.dmark+2)  
88de 32 67 ee			ld (debug_mark+2),a  
88e1 18 03			jr .pastdmark  
88e3 ..			.dmark: db "AP3"  
88e6 f1			.pastdmark: pop af  
88e7			endm  
# End of macro DMARK
88e7					CALLMONITOR 
88e7 cd 6f ee			call debug_vector  
88ea				endm  
# End of macro CALLMONITOR
88ea				endif 
88ea			;	ld (store_tmppageid), hl 
88ea			 
88ea 3a 76 ea			ld a, (store_page+2) 
88ed 3c				inc a 
88ee 32 76 ea			ld (store_page+2), a 
88f1 32 67 ea			ld (store_tmpext), a 
88f4				 
88f4				if DEBUG_STORESE 
88f4					DMARK "AP3" 
88f4 f5				push af  
88f5 3a 09 89			ld a, (.dmark)  
88f8 32 65 ee			ld (debug_mark),a  
88fb 3a 0a 89			ld a, (.dmark+1)  
88fe 32 66 ee			ld (debug_mark+1),a  
8901 3a 0b 89			ld a, (.dmark+2)  
8904 32 67 ee			ld (debug_mark+2),a  
8907 18 03			jr .pastdmark  
8909 ..			.dmark: db "AP3"  
890c f1			.pastdmark: pop af  
890d			endm  
# End of macro DMARK
890d					CALLMONITOR 
890d cd 6f ee			call debug_vector  
8910				endm  
# End of macro CALLMONITOR
8910				endif 
8910 2a 5f ea			ld hl, (store_tmppageid) 
8913 11 74 ea			ld de, store_page 
8916 cd ec 81			call storage_write_block 
8919			 
8919				; find free block 
8919			 
8919 11 00 00			ld de, 0			 ; file extent to locate 
891c			 
891c 21 40 00				ld hl, STORE_BLOCK_PHY 
891f cd ba 84				call storage_findnextid 
8922 cd 13 8d			call ishlzero 
8925 ca 75 88			jp z, .sa_notfound 
8928			 
8928					; TODO handle no space left 
8928					 
8928 22 5f ea				ld (store_tmppageid), hl 
892b			 
892b				if DEBUG_STORESE 
892b					DMARK "AP4" 
892b f5				push af  
892c 3a 40 89			ld a, (.dmark)  
892f 32 65 ee			ld (debug_mark),a  
8932 3a 41 89			ld a, (.dmark+1)  
8935 32 66 ee			ld (debug_mark+1),a  
8938 3a 42 89			ld a, (.dmark+2)  
893b 32 67 ee			ld (debug_mark+2),a  
893e 18 03			jr .pastdmark  
8940 ..			.dmark: db "AP4"  
8943 f1			.pastdmark: pop af  
8944			endm  
# End of macro DMARK
8944					CALLMONITOR 
8944 cd 6f ee			call debug_vector  
8947				endm  
# End of macro CALLMONITOR
8947				endif 
8947					; init the buffer with zeros so we can id if the buffer is full or not 
8947			 
8947 e5					push hl 
8948 c5					push bc 
8949			 
8949 21 74 ea				ld hl, store_page 
894c 06 40				ld b, STORE_BLOCK_PHY 
894e 3e 00				ld a, 0 
8950 77			.zeroblock:	ld (hl), a 
8951 23					inc hl 
8952 10 fc				djnz .zeroblock 
8954			 
8954 c1					pop bc 
8955 e1					pop hl 
8956			 
8956					; construct block 
8956			 
8956 3a 68 ea				ld a, (store_tmpid) 
8959 32 74 ea				ld (store_page), a   ; file id 
895c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
895f 32 75 ea				ld (store_page+1), a 
8962			 
8962 e1					pop hl    ; get string to write 
8963 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8965 11 76 ea				ld de, store_page+2 
8968			 
8968				if DEBUG_STORESE 
8968					DMARK "AP5" 
8968 f5				push af  
8969 3a 7d 89			ld a, (.dmark)  
896c 32 65 ee			ld (debug_mark),a  
896f 3a 7e 89			ld a, (.dmark+1)  
8972 32 66 ee			ld (debug_mark+1),a  
8975 3a 7f 89			ld a, (.dmark+2)  
8978 32 67 ee			ld (debug_mark+2),a  
897b 18 03			jr .pastdmark  
897d ..			.dmark: db "AP5"  
8980 f1			.pastdmark: pop af  
8981			endm  
# End of macro DMARK
8981					CALLMONITOR 
8981 cd 6f ee			call debug_vector  
8984				endm  
# End of macro CALLMONITOR
8984				endif 
8984			 
8984			 
8984			 
8984					; fill buffer with data until end of string or full block 
8984			 
8984 7e			.appd:		ld a, (hl) 
8985 12					ld (de), a 
8986 fe 00				cp 0 
8988 28 04				jr z, .appdone 
898a 23					inc hl 
898b 13					inc de 
898c 10 f6				djnz .appd 
898e			 
898e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
898f f5					push af   		; save last byte dumped 
8990			 
8990			 
8990 2a 5f ea			ld hl, (store_tmppageid) 
8993 11 74 ea			ld de, store_page 
8996				if DEBUG_STORESE 
8996					DMARK "AP6" 
8996 f5				push af  
8997 3a ab 89			ld a, (.dmark)  
899a 32 65 ee			ld (debug_mark),a  
899d 3a ac 89			ld a, (.dmark+1)  
89a0 32 66 ee			ld (debug_mark+1),a  
89a3 3a ad 89			ld a, (.dmark+2)  
89a6 32 67 ee			ld (debug_mark+2),a  
89a9 18 03			jr .pastdmark  
89ab ..			.dmark: db "AP6"  
89ae f1			.pastdmark: pop af  
89af			endm  
# End of macro DMARK
89af					CALLMONITOR 
89af cd 6f ee			call debug_vector  
89b2				endm  
# End of macro CALLMONITOR
89b2				endif 
89b2 cd ec 81				call storage_write_block 
89b5			 
89b5			 
89b5				; was that a full block of data written? 
89b5				; any more to write out? 
89b5			 
89b5				; if yes then set vars and jump to start of function again 
89b5			 
89b5 f1					pop af 
89b6 d1					pop de 
89b7			 
89b7 fe 00				cp 0		 ; no, string was fully written 
89b9 c8					ret z 
89ba			 
89ba					; setup vars for next cycle 
89ba			 
89ba 3a 68 ea				ld a, (store_tmpid) 
89bd 6f					ld l, a 
89be 26 00				ld h, 0 
89c0			 
89c0 c3 77 88			 	jp storage_append	 ; yes, need to write out some more 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			if DEBUG_STORECF 
89c3			storageput:	 
89c3					ret 
89c3			storageread: 
89c3					ld hl, store_page 
89c3					ld b, 200 
89c3					ld a,0 
89c3			.src:		ld (hl),a 
89c3					inc hl 
89c3					djnz .src 
89c3					 
89c3			 
89c3					ld de, 0 
89c3					ld bc, 1 
89c3					ld hl, store_page 
89c3					call cfRead 
89c3			 
89c3				call cfGetError 
89c3				ld hl,scratch 
89c3				call hexout 
89c3				ld hl, scratch+2 
89c3				ld a, 0 
89c3				ld (hl),a 
89c3				ld de, scratch 
89c3				ld a,display_row_1 
89c3				call str_at_display 
89c3				call update_display 
89c3			 
89c3					ld hl, store_page 
89c3					ld (os_cur_ptr),hl 
89c3			 
89c3					ret 
89c3			endif 
89c3			 
89c3			 
89c3			; Clear out the main buffer store (used to remove junk before writing a new block) 
89c3			 
89c3			storage_clear_page: 
89c3 e5				push hl 
89c4 d5				push de 
89c5 c5				push bc 
89c6 21 74 ea			ld hl, store_page 
89c9 3e 00			ld a, 0 
89cb 77				ld (hl), a 
89cc			 
89cc 11 75 ea			ld de, store_page+1 
89cf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89d2			 
89d2 ed b0			ldir 
89d4				 
89d4 c1				pop bc 
89d5 d1				pop de 
89d6 e1				pop hl 
89d7 c9				ret 
89d8			 
89d8			; eof 
# End of file firmware_storage.asm
89d8			  
89d8			; support routines for above hardware abstraction layer  
89d8			  
89d8			include "firmware_general.asm"        ; general support functions  
89d8			 
89d8			; word look up 
89d8			 
89d8			; in 
89d8			; a is the index 
89d8			; hl is pointer start of array 
89d8			; 
89d8			; returns 
89d8			; hl to the word 
89d8			; 
89d8			 
89d8			table_lookup:  
89d8 d5					push de 
89d9 eb					ex de, hl 
89da			 
89da 6f					ld l, a 
89db 26 00				ld h, 0 
89dd 29					add hl, hl 
89de 19					add hl, de 
89df 7e					ld a, (hl) 
89e0 23					inc hl 
89e1 66					ld h,(hl) 
89e2 6f					ld l, a 
89e3			 
89e3 d1					pop de 
89e4 c9					ret 
89e5			 
89e5			; Delay loops 
89e5			 
89e5			 
89e5			 
89e5			aDelayInMS: 
89e5 c5				push bc 
89e6 47				ld b,a 
89e7			msdelay: 
89e7 c5				push bc 
89e8				 
89e8			 
89e8 01 41 00			ld bc,041h 
89eb cd 03 8a			call delayloop 
89ee c1				pop bc 
89ef 05				dec b 
89f0 20 f5			jr nz,msdelay 
89f2			 
89f2			;if CPU_CLOCK_8MHZ 
89f2			;msdelay8: 
89f2			;	push bc 
89f2			;	 
89f2			; 
89f2			;	ld bc,041h 
89f2			;	call delayloop 
89f2			;	pop bc 
89f2			;	dec b 
89f2			;	jr nz,msdelay8 
89f2			;endif 
89f2			 
89f2			 
89f2 c1				pop bc 
89f3 c9				ret 
89f4			 
89f4			 
89f4			delay250ms: 
89f4				;push de 
89f4 01 00 40			ld bc, 04000h 
89f7 c3 03 8a			jp delayloop 
89fa			delay500ms: 
89fa				;push de 
89fa 01 00 80			ld bc, 08000h 
89fd c3 03 8a			jp delayloop 
8a00			delay1s: 
8a00				;push bc 
8a00			   ; Clobbers A, d and e 
8a00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
8a03			delayloop: 
8a03 c5			    push bc 
8a04			 
8a04			if BASE_CPM 
8a04				ld bc, CPM_DELAY_TUNE 
8a04			.cpmloop: 
8a04				push bc 
8a04			 
8a04			endif 
8a04			 
8a04			 
8a04			 
8a04			delayloopi: 
8a04			;	push bc 
8a04			;.dl: 
8a04 cb 47		    bit     0,a    	; 8 
8a06 cb 47		    bit     0,a    	; 8 
8a08 cb 47		    bit     0,a    	; 8 
8a0a e6 ff		    and     255  	; 7 
8a0c 0b			    dec     bc      	; 6 
8a0d 79			    ld      a,c     	; 4 
8a0e b0			    or      b     	; 4 
8a0f c2 04 8a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a12			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a12				;pop de 
8a12			;pop bc 
8a12			 
8a12			if BASE_CPM 
8a12				pop bc 
8a12				 
8a12			    dec     bc      	; 6 
8a12			    ld      a,c     	; 4 
8a12			    or      b     	; 4 
8a12			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a12				 
8a12			 
8a12			endif 
8a12			;if CPU_CLOCK_8MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12			 
8a12			;if CPU_CLOCK_10MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12 c1			    pop bc 
8a13			 
8a13 c9				ret 
8a14			 
8a14			 
8a14			 
8a14			; eof 
# End of file firmware_general.asm
8a14			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a14			; display routines that use the physical hardware abstraction layer 
8a14			 
8a14			 
8a14			; Display an activity indicator 
8a14			; Each call returns the new char pointed to in hl 
8a14			 
8a14			active: 
8a14 3a c0 eb			ld a, (display_active) 
8a17 fe 06			cp 6 
8a19			 
8a19 20 02			jr nz, .sne 
8a1b				; gone past the last one reset sequence 
8a1b 3e ff			ld a, 255 
8a1d			 
8a1d			.sne:   
8a1d				; get the next char in seq 
8a1d 3c				inc a 
8a1e 32 c0 eb			ld (display_active), a 
8a21			 
8a21				; look up the string in the table 
8a21 21 38 8a			ld hl, actseq 
8a24 cb 27			sla a 
8a26 cd ea 8c			call addatohl 
8a29 cd f8 9d			call loadwordinhl 
8a2c			 
8a2c				; forth will write the to string when pushing so move from rom to ram 
8a2c			 
8a2c 11 c1 eb			ld de, display_active+1 
8a2f 01 02 00			ld bc, 2 
8a32 ed b0			ldir 
8a34			 
8a34 21 c1 eb			ld hl, display_active+1 
8a37 c9				ret 
8a38				 
8a38				 
8a38			 
8a38			 
8a38			;db "|/-\|-\" 
8a38			 
8a38			actseq: 
8a38			 
8a38 46 8a		dw spin0 
8a3a 48 8a		dw spin1 
8a3c 4a 8a		dw spin2 
8a3e 4c 8a		dw spin3 
8a40 4a 8a		dw spin2 
8a42 48 8a		dw spin1 
8a44 46 8a		dw spin0 
8a46			 
8a46 .. 00		spin0: db " ", 0 
8a48 .. 00		spin1: db "-", 0 
8a4a .. 00		spin2: db "+", 0 
8a4c .. 00		spin3: db "#", 0 
8a4e			 
8a4e			 
8a4e			; information window 
8a4e			 
8a4e			; pass hl with 1st string to display 
8a4e			; pass de with 2nd string to display 
8a4e			 
8a4e			info_panel: 
8a4e e5				push hl 
8a4f			 
8a4f 2a c6 eb			ld hl, (display_fb_active) 
8a52 e5				push hl    ; future de destination 
8a53 21 ab ed				ld hl, display_fb0 
8a56 22 c6 eb				ld (display_fb_active), hl 
8a59			 
8a59			;	call clear_display 
8a59			 
8a59				if BASE_CPM 
8a59				ld a, '.' 
8a59				else 
8a59 3e a5			ld a, 165 
8a5b				endif 
8a5b cd c2 8a			call fill_display 
8a5e			 
8a5e			 
8a5e 3e 55			ld a, display_row_3 + 5 
8a60 cd d0 8a			call str_at_display 
8a63			 
8a63 e1				pop hl 
8a64 d1				pop de 
8a65			 
8a65 e5				push hl 
8a66			 
8a66			 
8a66 3e 2d			ld a, display_row_2 + 5 
8a68 cd d0 8a			call str_at_display 
8a6b			 
8a6b			 
8a6b cd e0 8a			call update_display 
8a6e cd fd 99			call next_page_prompt 
8a71 cd bd 8a			call clear_display 
8a74			 
8a74				 
8a74 21 0a ed				ld hl, display_fb1 
8a77 22 c6 eb				ld (display_fb_active), hl 
8a7a cd e0 8a			call update_display 
8a7d			 
8a7d e1				pop hl 
8a7e			 
8a7e c9				ret 
8a7f			 
8a7f			 
8a7f			 
8a7f			 
8a7f			; TODO windowing? 
8a7f			 
8a7f			; TODO scroll line up 
8a7f			 
8a7f			scroll_up: 
8a7f			 
8a7f e5				push hl 
8a80 d5				push de 
8a81 c5				push bc 
8a82			 
8a82				; get frame buffer  
8a82			 
8a82 2a c6 eb			ld hl, (display_fb_active) 
8a85 e5				push hl    ; future de destination 
8a86			 
8a86 11 28 00			ld  de, display_cols 
8a89 19				add hl, de 
8a8a			 
8a8a d1				pop de 
8a8b			 
8a8b				;ex de, hl 
8a8b 01 9f 00			ld bc, display_fb_len -1  
8a8e			;if DEBUG_FORTH_WORDS 
8a8e			;	DMARK "SCL" 
8a8e			;	CALLMONITOR 
8a8e			;endif	 
8a8e ed b0			ldir 
8a90			 
8a90				; wipe bottom row 
8a90			 
8a90			 
8a90 2a c6 eb			ld hl, (display_fb_active) 
8a93 11 a0 00			ld de, display_cols*display_rows 
8a96 19				add hl, de 
8a97 06 28			ld b, display_cols 
8a99 3e 20			ld a, ' ' 
8a9b			.scwipe: 
8a9b 77				ld (hl), a 
8a9c 2b				dec hl 
8a9d 10 fc			djnz .scwipe 
8a9f			 
8a9f				;pop hl 
8a9f			 
8a9f c1				pop bc 
8aa0 d1				pop de 
8aa1 e1				pop hl 
8aa2			 
8aa2 c9				ret 
8aa3			 
8aa3			 
8aa3			;scroll_upo: 
8aa3			;	ld de, display_row_1 
8aa3			 ;	ld hl, display_row_2 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_2 
8aa3			 ;	ld hl, display_row_3 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_3 
8aa3			 ;	ld hl, display_row_4 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			 
8aa3			; TODO clear row 4 
8aa3			 
8aa3			;	ret 
8aa3			 
8aa3				 
8aa3			scroll_down: 
8aa3			 
8aa3 e5				push hl 
8aa4 d5				push de 
8aa5 c5				push bc 
8aa6			 
8aa6				; get frame buffer  
8aa6			 
8aa6 2a c6 eb			ld hl, (display_fb_active) 
8aa9			 
8aa9 11 9f 00			ld de, display_fb_len - 1 
8aac 19				add hl, de 
8aad			 
8aad e5			push hl    ; future de destination 
8aae			 
8aae 11 28 00			ld  de, display_cols 
8ab1 ed 52			sbc hl, de 
8ab3			 
8ab3			 
8ab3 d1				pop de 
8ab4			 
8ab4			;	ex de, hl 
8ab4 01 9f 00			ld bc, display_fb_len -1  
8ab7			 
8ab7			 
8ab7				 
8ab7			 
8ab7 ed b0			ldir 
8ab9			 
8ab9				; wipe bottom row 
8ab9			 
8ab9			 
8ab9			;	ld hl, (display_fb_active) 
8ab9			;;	ld de, display_cols*display_rows 
8ab9			;;	add hl, de 
8ab9			;	ld b, display_cols 
8ab9			;	ld a, ' ' 
8ab9			;.scwiped: 
8ab9			;	ld (hl), a 
8ab9			;	dec hl 
8ab9			;	djnz .scwiped 
8ab9			 
8ab9				;pop hl 
8ab9			 
8ab9 c1				pop bc 
8aba d1				pop de 
8abb e1				pop hl 
8abc			 
8abc c9				ret 
8abd			;scroll_down: 
8abd			;	ld de, display_row_4 
8abd			;	ld hl, display_row_3 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_3 
8abd			; 	ld hl, display_row_2 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_2 
8abd			;	ld hl, display_row_1 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;;; TODO clear row 1 
8abd			;	ret 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			; clear active frame buffer 
8abd			 
8abd			clear_display: 
8abd 3e 20			ld a, ' ' 
8abf c3 c2 8a			jp fill_display 
8ac2			 
8ac2			; fill active frame buffer with a char in A 
8ac2			 
8ac2			fill_display: 
8ac2 06 a0			ld b,display_fb_len 
8ac4 2a c6 eb			ld hl, (display_fb_active) 
8ac7 77			.fd1:	ld (hl),a 
8ac8 23				inc hl 
8ac9 10 fc			djnz .fd1 
8acb 23				inc hl 
8acc 3e 00			ld a,0 
8ace 77				ld (hl),a 
8acf			 
8acf			 
8acf c9				ret 
8ad0			; Write string (DE) at pos (A) to active frame buffer 
8ad0			 
8ad0 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
8ad3 06 00					ld b,0 
8ad5 4f					ld c,a 
8ad6 09					add hl,bc 
8ad7 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ad8 b7			            OR   A              ;Null terminator? 
8ad9 c8			            RET  Z              ;Yes, so finished 
8ada 77					ld (hl),a 
8adb 23				inc hl 
8adc 13			            INC  DE             ;Point to next character 
8add 18 f8		            JR   .sad1     ;Repeat 
8adf c9					ret 
8ae0			 
8ae0			; using current frame buffer write to physical display 
8ae0			 
8ae0			update_display: 
8ae0 e5				push hl 
8ae1 2a c6 eb			ld hl, (display_fb_active) 
8ae4 cd 0e dd			call write_display 
8ae7 e1				pop hl 
8ae8 c9				ret 
8ae9			 
8ae9			; TODO scrolling 
8ae9			 
8ae9			 
8ae9			; move cursor right one char 
8ae9			cursor_right: 
8ae9			 
8ae9				; TODO shift right 
8ae9				; TODO if beyond max col 
8ae9				; TODO       cursor_next_line 
8ae9			 
8ae9 c9				ret 
8aea			 
8aea			 
8aea			cursor_next_line: 
8aea				; TODO first char 
8aea				; TODO line down 
8aea				; TODO if past last row 
8aea				; TODO    scroll up 
8aea			 
8aea c9				ret 
8aeb			 
8aeb			cursor_left: 
8aeb				; TODO shift left 
8aeb				; TODO if beyond left  
8aeb				; TODO     cursor prev line 
8aeb				 
8aeb c9				ret 
8aec			 
8aec			cursor_prev_line: 
8aec				; TODO last char 
8aec				; TODO line up 
8aec				; TODO if past first row 
8aec				; TODO   scroll down 
8aec			 
8aec c9				ret 
8aed			 
8aed			 
8aed			cout: 
8aed				; A - char 
8aed c9				ret 
8aee			 
8aee			 
8aee			; Display a menu and allow item selection (optional toggle items) 
8aee			; 
8aee			; format: 
8aee			; hl pointer to word array with zero term for items 
8aee			; e.g.    db item1 
8aee			;         db .... 
8aee			;         db 0 
8aee			; 
8aee			; a = starting menu item  
8aee			; 
8aee			; de = pointer item toggle array   (todo) 
8aee			; 
8aee			; returns item selected in a 1-... 
8aee			; returns 0 if back button pressed 
8aee			; 
8aee			; NOTE: Uses system frame buffer to display 
8aee			; 
8aee			; LEFT, Q = go back 
8aee			; RIGHT, SPACE, CR = select 
8aee			; UP, A - Up 
8aee			; DOWN, Z - Down 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			menu: 
8aee			 
8aee					; keep array pointer 
8aee			 
8aee 22 6d ea				ld (store_tmp1), hl 
8af1 32 6b ea				ld (store_tmp2), a 
8af4			 
8af4					; check for key bounce 
8af4			 
8af4			if BASE_KEV 
8af4			 
8af4			.mbounce:	call cin 
8af4					cp 0 
8af4					jr nz, .mbounce 
8af4			endif 
8af4					; for ease use ex 
8af4			 
8af4					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8af4 21 ab ed				ld hl, display_fb0 
8af7 22 c6 eb				ld (display_fb_active), hl 
8afa			 
8afa cd bd 8a		.mloop:		call clear_display 
8afd cd e0 8a				call update_display 
8b00			 
8b00					; draw selection id '>' at 1 
8b00			 
8b00					; init start of list display 
8b00			 
8b00 3e 05				ld a, 5 
8b02 32 69 ea				ld (store_tmp3), a   ; display row count 
8b05 3a 6b ea				ld a,( store_tmp2) 
8b08 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b0b			 
8b0b					 
8b0b			.mitem:	 
8b0b			 
8b0b			 
8b0b 3a 6c ea				ld a,(store_tmp2+1) 
8b0e 6f					ld l, a 
8b0f 26 00				ld h, 0 
8b11 29					add hl, hl 
8b12 ed 5b 6d ea			ld de, (store_tmp1) 
8b16 19					add hl, de 
8b17 7e					ld a, (hl) 
8b18 23					inc hl 
8b19 66					ld h,(hl) 
8b1a 6f					ld l, a 
8b1b			 
8b1b cd 13 8d				call ishlzero 
8b1e 28 1a				jr z, .mdone 
8b20			 
8b20 eb					ex de, hl 
8b21 3a 69 ea				ld a, (store_tmp3) 
8b24 cd d0 8a				call str_at_display 
8b27					 
8b27			 
8b27					; next item 
8b27 3a 6c ea				ld a, (store_tmp2+1) 
8b2a 3c					inc a 
8b2b 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b2e			 
8b2e			 		; next row 
8b2e			 
8b2e 3a 69 ea				ld a, (store_tmp3) 
8b31 c6 28				add display_cols 
8b33 32 69 ea				ld (store_tmp3), a 
8b36			 
8b36					; at end of screen? 
8b36			 
8b36 fe 10				cp display_rows*4 
8b38 20 d1				jr nz, .mitem 
8b3a			 
8b3a			 
8b3a			.mdone: 
8b3a cd 13 8d				call ishlzero 
8b3d 28 08				jr z, .nodn 
8b3f			 
8b3f 3e 78				ld a, display_row_4 
8b41 11 c0 8b				ld de, .mdown 
8b44 cd d0 8a				call str_at_display 
8b47			 
8b47					; draw options to fill the screens with active item on line 1 
8b47					; if current option is 2 or more then display ^ in top 
8b47			 
8b47 3a 6b ea		.nodn:		ld a, (store_tmp2) 
8b4a fe 00				cp 0 
8b4c 28 08				jr z, .noup 
8b4e			 
8b4e 3e 00				ld a, 0 
8b50 11 be 8b				ld de, .mup 
8b53 cd d0 8a				call str_at_display 
8b56			 
8b56 3e 02		.noup:		ld a, 2 
8b58 11 bc 8b				ld de, .msel 
8b5b cd d0 8a				call str_at_display 
8b5e			 
8b5e					; if current option + 1 is not null then display V in bottom 
8b5e					; get key 
8b5e cd e0 8a				call update_display 
8b61			 
8b61			 
8b61					; handle key 
8b61			 
8b61 cd 9a dd				call cin_wait 
8b64			 
8b64 fe 05				cp KEY_UP 
8b66 28 2b				jr z, .mgoup 
8b68 fe 61				cp 'a' 
8b6a 28 27				jr z, .mgoup 
8b6c fe 0a				cp KEY_DOWN 
8b6e 28 32				jr z, .mgod 
8b70 fe 7a				cp 'z' 
8b72 28 2e				jr z, .mgod 
8b74 fe 20				cp ' ' 
8b76 28 34				jr z, .goend 
8b78 fe 0c				cp KEY_RIGHT 
8b7a 28 30				jr z, .goend 
8b7c fe 0d				cp KEY_CR 
8b7e 28 2c				jr z, .goend 
8b80 fe 71				cp 'q' 
8b82 28 0b				jr z, .goback 
8b84			 
8b84 fe 0b				cp KEY_LEFT 
8b86 28 07				jr z, .goback 
8b88 fe 08				cp KEY_BS 
8b8a 28 03				jr z, .goback 
8b8c c3 fa 8a				jp .mloop 
8b8f			 
8b8f			.goback: 
8b8f 3e 00			ld a, 0 
8b91 18 1d			jr .goend2 
8b93			 
8b93				; move up one 
8b93			.mgoup: 
8b93 3a 6b ea				ld a, (store_tmp2) 
8b96 fe 00				cp 0 
8b98 ca fa 8a				jp z, .mloop 
8b9b 3d					dec a 
8b9c 32 6b ea				ld (store_tmp2), a 
8b9f c3 fa 8a				jp .mloop 
8ba2			 
8ba2				; move down one 
8ba2			.mgod: 
8ba2 3a 6b ea				ld a, (store_tmp2) 
8ba5 3c					inc a 
8ba6 32 6b ea				ld (store_tmp2), a 
8ba9 c3 fa 8a				jp .mloop 
8bac			 
8bac			 
8bac			.goend: 
8bac					; get selected item number 
8bac			 
8bac 3a 6b ea				ld a, (store_tmp2) 
8baf 3c					inc a 
8bb0			 
8bb0			.goend2: 
8bb0 f5					push af 
8bb1			 
8bb1					; restore active fb 
8bb1					; TODO BUG assumes fb1 
8bb1			 
8bb1 21 0a ed				ld hl, display_fb1 
8bb4 22 c6 eb				ld (display_fb_active), hl 
8bb7			 
8bb7					; restore main regs 
8bb7			 
8bb7			 
8bb7 cd e0 8a				call update_display 
8bba			 
8bba f1					pop af 
8bbb			 
8bbb c9				ret 
8bbc			 
8bbc .. 00		.msel:   db ">",0 
8bbe .. 00		.mup:   db "^",0 
8bc0 .. 00		.mdown:   db "v",0 
8bc2			 
8bc2			 
8bc2			; eof 
8bc2			 
# End of file firmware_display.asm
8bc2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bc2			; random number generators 
8bc2			 
8bc2			 
8bc2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bc2			 
8bc2			 
8bc2			;-----> Generate a random number 
8bc2			; output a=answer 0<=a<=255 
8bc2			; all registers are preserved except: af 
8bc2			random: 
8bc2 e5			        push    hl 
8bc3 d5			        push    de 
8bc4 2a a5 eb		        ld      hl,(randData) 
8bc7 ed 5f		        ld      a,r 
8bc9 57			        ld      d,a 
8bca 5e			        ld      e,(hl) 
8bcb 19			        add     hl,de 
8bcc 85			        add     a,l 
8bcd ac			        xor     h 
8bce 22 a5 eb		        ld      (randData),hl 
8bd1 d1			        pop     de 
8bd2 e1			        pop     hl 
8bd3 c9			        ret 
8bd4			 
8bd4			 
8bd4			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bd4			 
8bd4			 
8bd4			 
8bd4			;------LFSR------ 
8bd4			;James Montelongo 
8bd4			;optimized by Spencer Putt 
8bd4			;out: 
8bd4			; a = 8 bit random number 
8bd4			RandLFSR: 
8bd4 21 ab eb		        ld hl,LFSRSeed+4 
8bd7 5e			        ld e,(hl) 
8bd8 23			        inc hl 
8bd9 56			        ld d,(hl) 
8bda 23			        inc hl 
8bdb 4e			        ld c,(hl) 
8bdc 23			        inc hl 
8bdd 7e			        ld a,(hl) 
8bde 47			        ld b,a 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed cb 13		        rl e  
8bef cb 12			rl d 
8bf1 cb 11		        rl c  
8bf3 17				rla 
8bf4 67			        ld h,a 
8bf5 cb 13		        rl e  
8bf7 cb 12			rl d 
8bf9 cb 11		        rl c  
8bfb 17				rla 
8bfc a8			        xor b 
8bfd cb 13		        rl e  
8bff cb 12			rl d 
8c01 ac			        xor h 
8c02 a9			        xor c 
8c03 aa			        xor d 
8c04 21 ad eb		        ld hl,LFSRSeed+6 
8c07 11 ae eb		        ld de,LFSRSeed+7 
8c0a 01 07 00		        ld bc,7 
8c0d ed b8		        lddr 
8c0f 12			        ld (de),a 
8c10 c9			        ret 
8c11			 
8c11			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c11			 
8c11			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c11			 
8c11			 
8c11			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c11			 
8c11			prng16: 
8c11			;Inputs: 
8c11			;   (seed1) contains a 16-bit seed value 
8c11			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c11			;Outputs: 
8c11			;   HL is the result 
8c11			;   BC is the result of the LCG, so not that great of quality 
8c11			;   DE is preserved 
8c11			;Destroys: 
8c11			;   AF 
8c11			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c11			;160cc 
8c11			;26 bytes 
8c11 2a 9f eb		    ld hl,(seed1) 
8c14 44			    ld b,h 
8c15 4d			    ld c,l 
8c16 29			    add hl,hl 
8c17 29			    add hl,hl 
8c18 2c			    inc l 
8c19 09			    add hl,bc 
8c1a 22 9f eb		    ld (seed1),hl 
8c1d 2a 9d eb		    ld hl,(seed2) 
8c20 29			    add hl,hl 
8c21 9f			    sbc a,a 
8c22 e6 2d		    and %00101101 
8c24 ad			    xor l 
8c25 6f			    ld l,a 
8c26 22 9d eb		    ld (seed2),hl 
8c29 09			    add hl,bc 
8c2a c9			    ret 
8c2b			 
8c2b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c2b			 
8c2b			rand32: 
8c2b			;Inputs: 
8c2b			;   (seed1_0) holds the lower 16 bits of the first seed 
8c2b			;   (seed1_1) holds the upper 16 bits of the first seed 
8c2b			;   (seed2_0) holds the lower 16 bits of the second seed 
8c2b			;   (seed2_1) holds the upper 16 bits of the second seed 
8c2b			;   **NOTE: seed2 must be non-zero 
8c2b			;Outputs: 
8c2b			;   HL is the result 
8c2b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c2b			;Destroys: 
8c2b			;   AF 
8c2b			;Tested and passes all CAcert tests 
8c2b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c2b			;it has a period of 18,446,744,069,414,584,320 
8c2b			;roughly 18.4 quintillion. 
8c2b			;LFSR taps: 0,2,6,7  = 11000101 
8c2b			;291cc 
8c2b			;seed1_0=$+1 
8c2b			;    ld hl,12345 
8c2b			;seed1_1=$+1 
8c2b			;    ld de,6789 
8c2b			;    ld b,h 
8c2b			;    ld c,l 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    inc l 
8c2b			;    add hl,bc 
8c2b			;    ld (seed1_0),hl 
8c2b			;    ld hl,(seed1_1) 
8c2b			;    adc hl,de 
8c2b			;    ld (seed1_1),hl 
8c2b			;    ex de,hl 
8c2b			;seed2_0=$+1 
8c2b			;    ld hl,9876 
8c2b			;seed2_1=$+1 
8c2b			;    ld bc,54321 
8c2b			;    add hl,hl \ rl c \ rl b 
8c2b			;    ld (seed2_1),bc 
8c2b			;    sbc a,a 
8c2b			;    and %11000101 
8c2b			;    xor l 
8c2b			;    ld l,a 
8c2b			;    ld (seed2_0),hl 
8c2b			;    ex de,hl 
8c2b			;    add hl,bc 
8c2b			;    ret 
8c2b			; 
8c2b			 
8c2b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c2b			; 20 bytes, 86 cycles (excluding ret) 
8c2b			 
8c2b			; returns   hl = pseudorandom number 
8c2b			; corrupts   a 
8c2b			 
8c2b			; generates 16-bit pseudorandom numbers with a period of 65535 
8c2b			; using the xorshift method: 
8c2b			 
8c2b			; hl ^= hl << 7 
8c2b			; hl ^= hl >> 9 
8c2b			; hl ^= hl << 8 
8c2b			 
8c2b			; some alternative shift triplets which also perform well are: 
8c2b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c2b			 
8c2b			;  org 32768 
8c2b			 
8c2b			xrnd: 
8c2b 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c2e 3e 00		  ld a,0 
8c30 bd			  cp l 
8c31 20 02		  jr nz, .xrnd1 
8c33 2e 01		  ld l, 1 
8c35			.xrnd1: 
8c35			 
8c35 7c			  ld a,h 
8c36 1f			  rra 
8c37 7d			  ld a,l 
8c38 1f			  rra 
8c39 ac			  xor h 
8c3a 67			  ld h,a 
8c3b 7d			  ld a,l 
8c3c 1f			  rra 
8c3d 7c			  ld a,h 
8c3e 1f			  rra 
8c3f ad			  xor l 
8c40 6f			  ld l,a 
8c41 ac			  xor h 
8c42 67			  ld h,a 
8c43			 
8c43 22 a3 eb		  ld (xrandc),hl 
8c46			 
8c46 c9			  ret 
8c47			;  
8c47			 
8c47			 
8c47			;;;; int maths 
8c47			 
8c47			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c47			; Divide 16-bit values (with 16-bit result) 
8c47			; In: Divide BC by divider DE 
8c47			; Out: BC = result, HL = rest 
8c47			; 
8c47			Div16: 
8c47 21 00 00		    ld hl,0 
8c4a 78			    ld a,b 
8c4b 06 08		    ld b,8 
8c4d			Div16_Loop1: 
8c4d 17			    rla 
8c4e ed 6a		    adc hl,hl 
8c50 ed 52		    sbc hl,de 
8c52 30 01		    jr nc,Div16_NoAdd1 
8c54 19			    add hl,de 
8c55			Div16_NoAdd1: 
8c55 10 f6		    djnz Div16_Loop1 
8c57 17			    rla 
8c58 2f			    cpl 
8c59 47			    ld b,a 
8c5a 79			    ld a,c 
8c5b 48			    ld c,b 
8c5c 06 08		    ld b,8 
8c5e			Div16_Loop2: 
8c5e 17			    rla 
8c5f ed 6a		    adc hl,hl 
8c61 ed 52		    sbc hl,de 
8c63 30 01		    jr nc,Div16_NoAdd2 
8c65 19			    add hl,de 
8c66			Div16_NoAdd2: 
8c66 10 f6		    djnz Div16_Loop2 
8c68 17			    rla 
8c69 2f			    cpl 
8c6a 41			    ld b,c 
8c6b 4f			    ld c,a 
8c6c c9			ret 
8c6d			 
8c6d			 
8c6d			;http://z80-heaven.wikidot.com/math 
8c6d			; 
8c6d			;Inputs: 
8c6d			;     DE and A are factors 
8c6d			;Outputs: 
8c6d			;     A is not changed 
8c6d			;     B is 0 
8c6d			;     C is not changed 
8c6d			;     DE is not changed 
8c6d			;     HL is the product 
8c6d			;Time: 
8c6d			;     342+6x 
8c6d			; 
8c6d			Mult16: 
8c6d			 
8c6d 06 08		     ld b,8          ;7           7 
8c6f 21 00 00		     ld hl,0         ;10         10 
8c72 29			       add hl,hl     ;11*8       88 
8c73 07			       rlca          ;4*8        32 
8c74 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c76 19			         add hl,de   ;--         -- 
8c77 10 f9		       djnz $-5      ;13*7+8     99 
8c79 c9			ret 
8c7a			 
8c7a			; 
8c7a			; Square root of 16-bit value 
8c7a			; In:  HL = value 
8c7a			; Out:  D = result (rounded down) 
8c7a			; 
8c7a			;Sqr16: 
8c7a			;    ld de,#0040 
8c7a			;    ld a,l 
8c7a			;    ld l,h 
8c7a			;    ld h,d 
8c7a			;    or a 
8c7a			;    ld b,8 
8c7a			;Sqr16_Loop: 
8c7a			;    sbc hl,de 
8c7a			;    jr nc,Sqr16_Skip 
8c7a			;    add hl,de 
8c7a			;Sqr16_Skip: 
8c7a			;    ccf 
8c7a			;    rl d 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    djnz Sqr16_Loop 
8c7a			;    ret 
8c7a			; 
8c7a			; 
8c7a			; Divide 8-bit values 
8c7a			; In: Divide E by divider C 
8c7a			; Out: A = result, B = rest 
8c7a			; 
8c7a			Div8: 
8c7a af			    xor a 
8c7b 06 08		    ld b,8 
8c7d			Div8_Loop: 
8c7d cb 13		    rl e 
8c7f 17			    rla 
8c80 91			    sub c 
8c81 30 01		    jr nc,Div8_NoAdd 
8c83 81			    add a,c 
8c84			Div8_NoAdd: 
8c84 10 f7		    djnz Div8_Loop 
8c86 47			    ld b,a 
8c87 7b			    ld a,e 
8c88 17			    rla 
8c89 2f			    cpl 
8c8a c9			    ret 
8c8b			 
8c8b			; 
8c8b			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c8b			; In: Multiply A with DE 
8c8b			; Out: HL = result 
8c8b			; 
8c8b			Mult12U: 
8c8b 2e 00		    ld l,0 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd0 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd0: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd1 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd1: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd2 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd2: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd3 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd3: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 30 01		    jr nc,Mult12U_NoAdd4 
8ca4 19			    add hl,de 
8ca5			Mult12U_NoAdd4: 
8ca5 29			    add hl,hl 
8ca6 87			    add a,a 
8ca7 30 01		    jr nc,Mult12U_NoAdd5 
8ca9 19			    add hl,de 
8caa			Mult12U_NoAdd5: 
8caa 29			    add hl,hl 
8cab 87			    add a,a 
8cac 30 01		    jr nc,Mult12U_NoAdd6 
8cae 19			    add hl,de 
8caf			Mult12U_NoAdd6: 
8caf 29			    add hl,hl 
8cb0 87			    add a,a 
8cb1 d0			    ret nc 
8cb2 19			    add hl,de 
8cb3 c9			    ret 
8cb4			 
8cb4			; 
8cb4			; Multiply 8-bit value with a 16-bit value (right rotating) 
8cb4			; In: Multiply A with DE 
8cb4			;      Put lowest value in A for most efficient calculation 
8cb4			; Out: HL = result 
8cb4			; 
8cb4			Mult12R: 
8cb4 21 00 00		    ld hl,0 
8cb7			Mult12R_Loop: 
8cb7 cb 3f		    srl a 
8cb9 30 01		    jr nc,Mult12R_NoAdd 
8cbb 19			    add hl,de 
8cbc			Mult12R_NoAdd: 
8cbc cb 23		    sla e 
8cbe cb 12		    rl d 
8cc0 b7			    or a 
8cc1 c2 b7 8c		    jp nz,Mult12R_Loop 
8cc4 c9			    ret 
8cc5			 
8cc5			; 
8cc5			; Multiply 16-bit values (with 32-bit result) 
8cc5			; In: Multiply BC with DE 
8cc5			; Out: BCHL = result 
8cc5			; 
8cc5			Mult32: 
8cc5 79			    ld a,c 
8cc6 48			    ld c,b 
8cc7 21 00 00		    ld hl,0 
8cca 06 10		    ld b,16 
8ccc			Mult32_Loop: 
8ccc 29			    add hl,hl 
8ccd 17			    rla 
8cce cb 11		    rl c 
8cd0 30 07		    jr nc,Mult32_NoAdd 
8cd2 19			    add hl,de 
8cd3 ce 00		    adc a,0 
8cd5 d2 d9 8c		    jp nc,Mult32_NoAdd 
8cd8 0c			    inc c 
8cd9			Mult32_NoAdd: 
8cd9 10 f1		    djnz Mult32_Loop 
8cdb 41			    ld b,c 
8cdc 4f			    ld c,a 
8cdd c9			    ret 
8cde			 
8cde			 
8cde			 
8cde			; 
8cde			; Multiply 8-bit values 
8cde			; In:  Multiply H with E 
8cde			; Out: HL = result 
8cde			; 
8cde			Mult8: 
8cde 16 00		    ld d,0 
8ce0 6a			    ld l,d 
8ce1 06 08		    ld b,8 
8ce3			Mult8_Loop: 
8ce3 29			    add hl,hl 
8ce4 30 01		    jr nc,Mult8_NoAdd 
8ce6 19			    add hl,de 
8ce7			Mult8_NoAdd: 
8ce7 10 fa		    djnz Mult8_Loop 
8ce9 c9			    ret 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			;;http://z80-heaven.wikidot.com/math 
8cea			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cea			; 
8cea			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cea			;     ld a,16        ;7 
8cea			;     ld hl,0        ;10 
8cea			;     jp $+5         ;10 
8cea			;.DivLoop: 
8cea			;       add hl,bc    ;-- 
8cea			;       dec a        ;64 
8cea			;       jr z,.DivLoopEnd        ;86 
8cea			; 
8cea			;       sla e        ;128 
8cea			;       rl d         ;128 
8cea			;       adc hl,hl    ;240 
8cea			;       sbc hl,bc    ;240 
8cea			;       jr nc,.DivLoop ;23|21 
8cea			;       inc e        ;-- 
8cea			;       jp .DivLoop+1 
8cea			; 
8cea			;.DivLoopEnd: 
8cea			 
8cea			;HL_Div_C: 
8cea			;Inputs: 
8cea			;     HL is the numerator 
8cea			;     C is the denominator 
8cea			;Outputs: 
8cea			;     A is the remainder 
8cea			;     B is 0 
8cea			;     C is not changed 
8cea			;     DE is not changed 
8cea			;     HL is the quotient 
8cea			; 
8cea			;       ld b,16 
8cea			;       xor a 
8cea			;         add hl,hl 
8cea			;         rla 
8cea			;         cp c 
8cea			;         jr c,$+4 
8cea			;           inc l 
8cea			;           sub c 
8cea			;         djnz $-7 
8cea			 
8cea			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cea			 
8cea			addatohl: 
8cea 85			    add   a, l    ; A = A+L 
8ceb 6f			    ld    l, a    ; L = A+L 
8cec 8c			    adc   a, h    ; A = A+L+H+carry 
8ced 95			    sub   l       ; A = H+carry 
8cee 67			    ld    h, a    ; H = H+carry 
8cef c9			ret 
8cf0			 
8cf0			addatode: 
8cf0 83			    add   a, e    ; A = A+L 
8cf1 5f			    ld    e, a    ; L = A+L 
8cf2 8a			    adc   a, d    ; A = A+L+H+carry 
8cf3 93			    sub   e       ; A = H+carry 
8cf4 57			    ld    d, a    ; H = H+carry 
8cf5 c9			ret 
8cf6			 
8cf6			 
8cf6			addatobc: 
8cf6 81			    add   a, c    ; A = A+L 
8cf7 4f			    ld    c, a    ; L = A+L 
8cf8 88			    adc   a, b    ; A = A+L+H+carry 
8cf9 91			    sub   c       ; A = H+carry 
8cfa 47			    ld    b, a    ; H = H+carry 
8cfb c9			ret 
8cfc			 
8cfc			subafromhl: 
8cfc			   ; If A=0 do nothing 
8cfc			    ; Otherwise flip A's sign. Since 
8cfc			    ; the upper byte becomes -1, also 
8cfc			    ; substract 1 from H. 
8cfc ed 44		    neg 
8cfe ca 07 8d		    jp    z, Skip 
8d01 25			    dec   h 
8d02			     
8d02			    ; Now add the low byte as usual 
8d02			    ; Two's complement takes care of 
8d02			    ; ensuring the result is correct 
8d02 85			    add   a, l 
8d03 6f			    ld    l, a 
8d04 8c			    adc   a, h 
8d05 95			    sub   l 
8d06 67			    ld    h, a 
8d07			Skip: 
8d07 c9				ret 
8d08			 
8d08			 
8d08			; compare hl and de 
8d08			; returns:  
8d08			; if hl = de, z=1, s=0, c0=0 
8d08			; if hl > de, z=0, s=0, c=0 
8d08			; if hl < de, z=0, s=1, c=1 
8d08			cmp16:	 
8d08 b7				or a 
8d09 ed 52			sbc hl,de 
8d0b e0				ret po 
8d0c 7c				ld a,h 
8d0d 1f				rra 
8d0e ee 40			xor 01000000B 
8d10 37				scf 
8d11 8f				adc a,a 
8d12 c9				ret 
8d13			 
8d13			 
8d13			; test if hl contains zero   - A is destroyed 
8d13			 
8d13			ishlzero:    
8d13 b7				or a     ; reset flags 
8d14 7c				ld a, h 
8d15 b5				or l        	 
8d16			 
8d16 c9				ret 
8d17			 
8d17			 
8d17			 
8d17			 
8d17			if FORTH_ENABLE_FLOATMATH 
8d17			;include "float/bbcmath.z80" 
8d17			include "float/lpfpcalc.asm" 
8d17			endif 
8d17			 
8d17			 
8d17			; eof 
8d17			 
# End of file firmware_maths.asm
8d17			include "firmware_strings.asm"   ; string handling  
8d17			 
8d17			 
8d17			; TODO string len 
8d17			; input text string, end on cr with zero term 
8d17			; a offset into frame buffer to start prompt 
8d17			; d is max length 
8d17			; e is display size TODO 
8d17			; c is current cursor position 
8d17			; hl is ptr to where string will be stored and edited directly 
8d17			 
8d17			 
8d17			; TODO check limit of buffer for new inserts 
8d17			; TODO check insert does not push beyond buffer 
8d17			; TODO scroll in a limited display area 
8d17			; TODO scroll whole screen on page wrap 
8d17			 
8d17			 
8d17			; TODO use LCD cursor? 
8d17			 
8d17			EDIT_V1: equ 0 
8d17			EDIT_V2: equ 1 
8d17			 
8d17			 
8d17			 
8d17			if EDIT_V2 
8d17			input_str: 
8d17			 
8d17 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
8d1a			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d1a 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
8d1d			;		ld a, c 
8d1d			;		call addatohl 
8d1d			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1d 7a					ld a,d 
8d1e 32 60 ee			        ld (input_size), a       ; save length of input area 
8d21 79					ld a, c 
8d22 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d25 7b					ld a,e 
8d26 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d29			 
8d29			 
8d29					; add a trailing space to make screen refresh nicer 
8d29			 
8d29					;ld hl, (input_start) 
8d29					;push hl 
8d29					;ld a, 0 
8d29					;call strlent 
8d29					;ld a, l 
8d29					;pop hl 
8d29					;call addatohl 
8d29					;dec hl 
8d29					;ld a, ' ' 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld a, 0 
8d29					;ld (hl), a 
8d29			 
8d29			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d29					; init cursor shape if not set by the cin routines 
8d29 21 bb eb				ld hl, cursor_shape 
8d2c			if BASE_KEV 
8d2c					ld a, 255 
8d2c			else 
8d2c 3e 23				ld a, '#' 
8d2e			endif 
8d2e 77					ld (hl), a 
8d2f 23					inc hl 
8d30 3e 00				ld a, 0 
8d32 77					ld (hl), a 
8d33			 
8d33 3e 09				ld a, CUR_BLINK_RATE 
8d35 32 5a ee				ld (input_cur_flash), a 
8d38 3e 01				ld a, 1 
8d3a 32 59 ee				ld (input_cur_onoff),a 
8d3d			.inmain:	 
8d3d			 
8d3d cd 65 8e				call input_disp_ref 
8d40			 
8d40					; save current length of string 
8d40			 
8d40 2a 61 ee				ld hl, (input_start) 
8d43 3e 00				ld a, 0 
8d45 cd 5b 90				call strlent 
8d48 7d					ld a,l 
8d49 32 54 ee				ld (input_len), a 
8d4c			 
8d4c					;call input_disp_oncur 
8d4c			 
8d4c					; display current state of input buffer 
8d4c			 
8d4c					; clean any backspace chars 
8d4c			 
8d4c 3e 20				ld a, " " 
8d4e 32 bb e2				ld (scratch),a 
8d51 3e 00				ld a, 0 
8d53 32 bc e2				ld (scratch+1),a 
8d56 3a 5e ee				ld a,(input_at_pos) 
8d59 85					add l 
8d5a 11 bb e2				ld de, scratch 
8d5d cd d0 8a				call str_at_display 
8d60			 
8d60					; pause 1ms 
8d60			 
8d60 3e 01				ld a, 1 
8d62 cd e5 89				call aDelayInMS 
8d65			 
8d65			; display cursor if visible on this cycle 
8d65			 
8d65					; dec flash counter 
8d65 3a 5a ee				ld a, (input_cur_flash) 
8d68 3d					dec a 
8d69 32 5a ee				ld (input_cur_flash), a 
8d6c fe 00				cp 0 
8d6e 20 0d				jr nz, .inochgstate 
8d70			 
8d70			 
8d70					; reset on change of state 
8d70 3e 09				ld a, CUR_BLINK_RATE 
8d72 32 5a ee				ld (input_cur_flash), a 
8d75			 
8d75					; change state 
8d75 3a 59 ee				ld a,(input_cur_onoff) 
8d78 ed 44				neg 
8d7a 32 59 ee				ld (input_cur_onoff),a 
8d7d			 
8d7d			 
8d7d			 
8d7d			 
8d7d					; TODO is cursor visible? 
8d7d					; TODO if so then over write the char at curspos pos with the cursor shape 
8d7d			 
8d7d								 
8d7d			 
8d7d			.inochgstate: 
8d7d 3a 59 ee				ld a,(input_cur_onoff) 
8d80 fe ff				cp 255 
8d82 28 0e				jr z, .skipcursor 
8d84 3a 5e ee				ld a, (input_at_pos) 
8d87 47					ld b, a 
8d88 3a 4f ee				ld a, (input_cursor) 
8d8b 80					add b 
8d8c 11 bb eb				ld de, cursor_shape 
8d8f					 
8d8f cd d0 8a				call str_at_display 
8d92			 
8d92			.skipcursor: 
8d92				if DEBUG_INPUTV2 
8d92			 
8d92					ld a,(input_at_pos) 
8d92					ld hl, LFSRSeed 
8d92					call hexout 
8d92					ld a, (input_cursor) 
8d92					ld hl, LFSRSeed+2 
8d92					call hexout 
8d92					ld a,(input_size) 
8d92					ld hl, LFSRSeed+4 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_onoff) 
8d92					ld hl, LFSRSeed+6 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_flash) 
8d92					ld hl, LFSRSeed+8 
8d92					call hexout 
8d92			 
8d92					ld a,(input_len) 
8d92					ld hl, LFSRSeed+10 
8d92					call hexout 
8d92					ld hl, LFSRSeed+12 
8d92					ld a, 0 
8d92					ld (hl),a 
8d92					ld a, display_row_4 
8d92					ld de, LFSRSeed 
8d92					call str_at_display 
8d92				endif 
8d92 cd e0 8a				call update_display 
8d95			 
8d95					; TODO keyboard processing 
8d95			 
8d95			if BASE_CPM 
8d95					call cin_wait 
8d95			else 
8d95 cd a0 dd				call cin    ; _wait 
8d98			endif 
8d98 fe 00				cp 0 
8d9a ca 3d 8d				jp z, .inmain 
8d9d			 
8d9d fe 0b				cp KEY_LEFT    ; cursor left 
8d9f ca 57 8e				jp z, input_left 
8da2				 
8da2 fe 0c				cp KEY_RIGHT      ; cursor right 
8da4 ca 5e 8e				jp z, input_right 
8da7			 
8da7 fe 0d				cp KEY_CR 
8da9 c8					ret z 
8daa			 
8daa fe 08				cp KEY_BS 
8dac ca cc 8e				jp z, input_delchar 
8daf			 
8daf fe 06				cp KEY_NEXTWORD 
8db1 ca d8 8d				jp z, input_nxtword 
8db4			 
8db4 fe 07				cp KEY_PREVWORD 
8db6 ca ff 8d				jp z, input_prvword 
8db9			 
8db9 fe 0e				cp KEY_HOME    ; jump to start of line 
8dbb 20 08				jr nz, .ikh 
8dbd 3e 00				ld a, 0 
8dbf 32 4f ee				ld (input_cursor), a 
8dc2 ca 3d 8d				jp z, .inmain 
8dc5			.ikh: 
8dc5			 
8dc5 fe 0f				cp KEY_END     ; jump to end of line 
8dc7 20 09				jr nz, .ike 
8dc9 3a 54 ee				ld a, (input_len) 
8dcc 32 4f ee				ld (input_cursor),a 
8dcf ca 3d 8d				jp z, .inmain 
8dd2			.ike: 
8dd2 fe 05			        cp KEY_UP      ; recall last command 
8dd4 c8					ret z 
8dd5			;jr nz, .irec 
8dd5			; TODO next word 
8dd5			; TODO prev word 
8dd5			;  
8dd5			; 
8dd5			;	ld hl, scratch 
8dd5			;	ld de, os_last_cmd 
8dd5			;	call strcpy 
8dd5			;		jp  .inmain 
8dd5			.irec: 
8dd5			;		jr .instr1 
8dd5			 
8dd5			 
8dd5			 
8dd5					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dd5			 
8dd5			; TODO return if any special keys are given 
8dd5			;		ld l, a 
8dd5			;		ld a, 28 ; KEY_F12   ; 27 
8dd5			;		sub l 
8dd5			;		ret m 
8dd5			;		ld a, l 
8dd5					; if no special key then insert as a char 
8dd5			 
8dd5 c3 9e 8e				jp input_inschr 
8dd8			 
8dd8				 
8dd8			input_nxtword: 
8dd8				; jump to start next word after the cursor 
8dd8			 
8dd8			.insknwn:	 
8dd8 cd 94 8e				call input_curptr	 
8ddb 7e					ld a,(hl)	 
8ddc fe 00				cp 0 
8dde ca 3d 8d				jp z, .inmain    ; end of string 
8de1			 
8de1			; if we are on a word, then move off of it 
8de1			 
8de1 fe 20				cp ' ' 
8de3 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8de5 21 4f ee				ld hl, input_cursor 
8de8 34					inc (hl) 
8de9 18 ed				jr .insknwn 
8deb			 
8deb			.inspace: 
8deb			 
8deb cd 94 8e				call input_curptr	 
8dee 7e					ld a,(hl)	 
8def fe 00				cp 0 
8df1 ca 3d 8d				jp z, .inmain    ; end of string 
8df4			 
8df4			; if we are on a word, then move off of it 
8df4			 
8df4 fe 20				cp ' ' 
8df6 c2 3d 8d				jp nz, .inmain     ; we are on non space so at next word 
8df9 21 4f ee				ld hl, input_cursor 
8dfc 34					inc (hl) 
8dfd 18 ec				jr .inspace 
8dff			 
8dff			 
8dff			 
8dff			 
8dff			input_prvword: 
8dff				; jump to the start of previous word before the cursor 
8dff			 
8dff			; where are we to start with currently? 
8dff			 
8dff cd 94 8e				call input_curptr	 
8e02 7e					ld a, (hl) 
8e03 fe 20				cp ' ' 
8e05 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8e07			 
8e07			 
8e07			 
8e07			.inskpwn:	 
8e07 3a 4f ee				ld a,(input_cursor) 
8e0a fe 00				cp 0 
8e0c ca 3d 8d				jp z, .inmain    ; start of string 
8e0f			 
8e0f			;if we are on a word, then move off of it 
8e0f			 
8e0f cd 94 8e				call input_curptr	 
8e12 7e					ld a, (hl) 
8e13 fe 20				cp ' ' 
8e15 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e17					;jp z, .inmain    ; start of string 
8e17 21 4f ee				ld hl, input_cursor 
8e1a 35					dec (hl) 
8e1b 18 ea				jr .inskpwn 
8e1d			.iwstart: 
8e1d 21 4f ee				ld hl, input_cursor 
8e20 34					inc (hl) 
8e21 c3 3d 8d				jp .inmain 
8e24					 
8e24			 
8e24			.inspacep: 
8e24			 
8e24					;jp .inmain    ; start of string 
8e24			 
8e24			 
8e24			 
8e24 3a 4f ee				ld a,(input_cursor) 
8e27 fe 00				cp 0 
8e29 ca 3d 8d				jp z, .inmain    ; start of string 
8e2c			 
8e2c			; if we are on a word, then move off of it 
8e2c			 
8e2c cd 94 8e				call input_curptr	 
8e2f 7e					ld a, (hl) 
8e30 fe 20				cp ' ' 
8e32 c2 3b 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e35 21 4f ee				ld hl, input_cursor 
8e38 35					dec (hl) 
8e39 18 e9				jr .inspacep 
8e3b			 
8e3b			 
8e3b			.incharp:	 
8e3b					; eat the word to get to the start 
8e3b 3a 4f ee				ld a,(input_cursor) 
8e3e fe 00				cp 0 
8e40 ca 3d 8d				jp z, .inmain    ; start of string 
8e43			 
8e43			; if we are on a word, then move off of it 
8e43			 
8e43 cd 94 8e				call input_curptr	 
8e46 7e					ld a, (hl) 
8e47 fe 20				cp ' ' 
8e49 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e4b 21 4f ee				ld hl, input_cursor 
8e4e 35					dec (hl) 
8e4f 18 ea				jr .incharp 
8e51			.ipwordst: 
8e51					; at space before the prev word so reposition over it 
8e51 21 4f ee				ld hl, input_cursor 
8e54 34					inc (hl) 
8e55 18 b0				jr .inskpwn 
8e57					 
8e57			 
8e57			 
8e57			input_left: 
8e57				; move cursor left 
8e57 21 4f ee			ld hl, input_cursor 
8e5a 35				dec (hl) 
8e5b			;	cp 0 
8e5b			;	jp z, .inmain    ; ignore left as at the start of the string 
8e5b c3 3d 8d			jp .inmain 
8e5e			 
8e5e			input_right: 
8e5e				; move cursor right 
8e5e				 
8e5e				;ld a, (input_size) 
8e5e				;ld b, a 
8e5e 21 4f ee			ld hl, input_cursor 
8e61 34				inc (hl) 
8e62				;dec b 
8e62				;cp 0 
8e62				;jp z, .inmain   ; ignore as at end of the string buffer 
8e62				;ld a, b 
8e62				;inc a 
8e62				;ld (input_cursor), a 
8e62 c3 3d 8d			jp .inmain 
8e65			 
8e65			 
8e65			 
8e65			input_disp_ref: 
8e65				; display the text from start of buffer (ie full refresh) 
8e65 3a 5e ee			ld a, (input_at_pos) 
8e68 2a 61 ee			ld hl,(input_start) 
8e6b eb				ex de, hl 
8e6c cd d0 8a			call str_at_display  
8e6f c9				ret 
8e70			input_disp_oncur: 
8e70				; display the text from cursor position to end of buffer 
8e70				; TODO position start of string at cursor position on screen 
8e70				; TODO draw from that point on 
8e70 3a 4f ee			ld a, (input_cursor) 
8e73 47				ld b, a 
8e74 3a 5e ee			ld a, (input_at_pos) 
8e77 80				add b 
8e78 48				ld c, b     ; save a 
8e79 78				ld a, b     ; inc string start for cursor 
8e7a 2a 61 ee			ld hl,(input_start) 
8e7d cd ea 8c			call addatohl 
8e80 eb				ex de, hl 
8e81 79				ld a, c 
8e82 cd d0 8a			call str_at_display  
8e85 c9				ret 
8e86			 
8e86			input_nxtw: 
8e86				; Find next word 
8e86 c9				ret 
8e87			 
8e87			input_prvw: 
8e87				; Find previous word 
8e87 c9				ret 
8e88			 
8e88			input_lenrem:   
8e88				; Calculate the length of string remaining from current cursor 
8e88				; position to end of buffer (exc null term) 
8e88				 
8e88 3a 4f ee			ld a, (input_cursor) 
8e8b 4f				ld c, a 
8e8c 3a 60 ee			ld a, (input_size) 
8e8f 91				sub c 
8e90 06 00			ld b, 0 
8e92 0d				dec c 
8e93 c9				ret	 
8e94			 
8e94			input_curptr: 
8e94				; calc address of the character under the cursor 
8e94				 
8e94 2a 61 ee			ld hl, (input_start) 
8e97 3a 4f ee			ld a, (input_cursor) 
8e9a cd ea 8c			call addatohl 
8e9d c9				ret 
8e9e			 
8e9e			input_inschr: 
8e9e				; Insert char at cursor position 
8e9e f5				push af   ; save char 
8e9f				;call input_lenrem    ; get bc length of remaining string 
8e9f			 
8e9f				 
8e9f cd 94 8e			call input_curptr 
8ea2			;	ld hl, (input_start) 
8ea2			;	ld a, (input_cursor) 
8ea2			;	call addatohl 
8ea2				;push hl   ; save to come back to 
8ea2			 
8ea2				; shift everything up one to end of buffer 
8ea2			 
8ea2				;push hl 
8ea2				;dec de 
8ea2				;inc de 
8ea2			;	ldir 
8ea2				 
8ea2				;pop hl 
8ea2			 
8ea2				; are we adding to the end of line? 
8ea2			 
8ea2 3a 4f ee			ld a, (input_cursor) 
8ea5 47				ld b, a 
8ea6 3a 54 ee			ld a, (input_len) 
8ea9 b8				cp b 
8eaa 20 09			jr nz, .insmid   ; no, insert in middle of text 
8eac			 
8eac				; tack on the end of the line 
8eac f1				pop af 
8ead 77				ld (hl), a   ; save new char 
8eae 23				inc hl 
8eaf 3e 00			ld a, 0 
8eb1 77				ld (hl), a 
8eb2 c3 5e 8e			jp input_right 
8eb5				 
8eb5			.insmid: 
8eb5				; hl has insertion point so move everything up one to allow for insertion 
8eb5				;call input_shiftright 
8eb5 f1				pop af 
8eb6			 
8eb6			.shufinsmid: 
8eb6 47				ld b, a     ; b contains new char, c prev char at this position  
8eb7 7e				ld a, (hl) 
8eb8			 
8eb8 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eba 28 07			jr z, .endinsmid 
8ebc 4f				ld c, a 
8ebd 78				ld a, b 
8ebe 77				ld (hl), a 
8ebf 23				inc hl 
8ec0 79				ld a, c 
8ec1 18 f3			jr .shufinsmid 
8ec3				 
8ec3			 
8ec3			 
8ec3			 
8ec3			.endinsmid: 
8ec3 78				ld a, b 
8ec4 77				ld (hl), a 
8ec5 23				inc hl 
8ec6 3e 00			ld a, 0 
8ec8 77				ld (hl), a 
8ec9			 
8ec9			 
8ec9			;	ld (hl), a   ; save new char 
8ec9			 
8ec9 c3 5e 8e			jp input_right 
8ecc			 
8ecc			;input_shiftright: 
8ecc			;	; shift text right at cursor, hl has shift start 
8ecc			;	push hl 
8ecc			;	push de 
8ecc			;	push bc 
8ecc			; 
8ecc			; 
8ecc			;	; move to end of string past zero term 
8ecc			;	ld hl,(input_start) 
8ecc			;	ld a, (input_len) 
8ecc			;	call addatohl 
8ecc			;	inc hl 
8ecc			;;	inc hl 
8ecc			;;	inc hl 
8ecc			;	ld a, 0 
8ecc			;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			;	 
8ecc			;;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			; 
8ecc			;	push hl 
8ecc			;	pop de 
8ecc			;	inc de 
8ecc			;	 
8ecc			; 
8ecc			;;	ld hl,(input_start) 
8ecc			;;	ld a, (input_cursor) 
8ecc			;;	call addatohl 
8ecc			; 
8ecc			; 
8ecc			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ecc			;	call input_lenrem    ; get bc length of remaining string 
8ecc			;	;ld a, (input_cursor) 
8ecc			;	;ld c, a 
8ecc			;	ld a, (input_len) 
8ecc			;	cp 2 
8ecc			;	jr z, .iskipzero	 
8ecc			;	;sub c 
8ecc			;	;inc a 
8ecc			;	;ld c, a 
8ecc			;	;ld b, 0 
8ecc			;	inc c 
8ecc			;	inc c 
8ecc			;	; move data 
8ecc			;	lddr 
8ecc			;.iskipzero: 
8ecc			; 
8ecc			;	pop bc 
8ecc			;	pop de 
8ecc			;	pop hl 
8ecc			;	ret	 
8ecc			 
8ecc			input_delchar: 
8ecc				; Delete char at cursor position 
8ecc cd 88 8e			call input_lenrem    ; get bc length of remaining string 
8ecf 2a 61 ee			ld hl, (input_start) 
8ed2 3a 4f ee			ld a, (input_cursor) 
8ed5 cd ea 8c			call addatohl 
8ed8			 
8ed8 e5				push hl 
8ed9 d1				pop de 
8eda 1b				dec de 
8edb			 
8edb			.dl:	 
8edb ed a0			ldi  
8edd 7e				ld a, (hl) 
8ede fe 00			cp 0 
8ee0 28 02			jr z, .dldone 
8ee2 18 f7			jr .dl 
8ee4			.dldone: 
8ee4 ed a0			ldi 
8ee6			 
8ee6 c3 57 8e			jp input_left 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			 
8ee9			 
8ee9			 
8ee9			if EDIT_V1 
8ee9			input_str: 
8ee9			 
8ee9				    	ld (input_at_pos),a      ; save display position to start 
8ee9					add c 
8ee9					ld (input_at_cursor),a	; save draw pos of cursor 
8ee9					ld (input_start), hl     ; save ptr to buffer 
8ee9					ld a, c 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl     ; save ptr to point under the cursor 
8ee9					ld a,d 
8ee9				        ld (input_size), a       ; save length of input area 
8ee9					ld a, c 
8ee9					ld (input_cursor),a      ; init cursor start position  
8ee9					ld a,e 
8ee9				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8ee9					 
8ee9					 
8ee9			 
8ee9			;		ld a,(input_ptr) 
8ee9			;		ld (input_under_cursor),a 	; save what is under the cursor 
8ee9			 
8ee9			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8ee9					; init cursor shape if not set by the cin routines 
8ee9					ld hl, cursor_shape 
8ee9			if BASE_KEV 
8ee9					ld a, 255 
8ee9			else 
8ee9					ld a, '#' 
8ee9			endif 
8ee9					ld (hl), a 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl), a 
8ee9			 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					ld a, 1 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'I' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9			.is1:		; main entry loop 
8ee9			 
8ee9			 
8ee9			 
8ee9					; pause 1ms 
8ee9			 
8ee9					ld a, 1 
8ee9					call aDelayInMS 
8ee9			 
8ee9					; dec flash counter 
8ee9					ld a, (input_cur_flash) 
8ee9					dec a 
8ee9					ld (input_cur_flash), a 
8ee9					cp 0 
8ee9					jr nz, .nochgstate 
8ee9			 
8ee9			 
8ee9					; change state 
8ee9					ld a,(input_cur_onoff) 
8ee9					neg 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			 
8ee9					; reset on change of state 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9			.nochgstate: 
8ee9					 
8ee9					 
8ee9			 
8ee9					; display cursor  
8ee9			 
8ee9			;		ld hl, (input_start) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			 
8ee9					; get char under cursor and replace with cursor 
8ee9			ld hl, (input_ptr) 
8ee9			;		ld a, (hl) 
8ee9			;		ld (input_under_cursor),a 
8ee9			;		ld a, '_' 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					; display string 
8ee9			 
8ee9					ld de, (input_start) 
8ee9					ld a, (input_at_pos) 
8ee9					call str_at_display 
8ee9			;	        call update_display 
8ee9			 
8ee9					; find place to put the cursor 
8ee9			;		add h 
8ee9			;		ld l, display_row_1 
8ee9			;		sub l 
8ee9			; (input_at_pos) 
8ee9					;ld c, a 
8ee9			;		ld a, (input_cursor) 
8ee9			;		ld l, (input_at_pos) 
8ee9			;		;ld b, h 
8ee9			;		add l 
8ee9			;		ld (input_at_cursor),a 
8ee9					;ld l,h 
8ee9			 
8ee9			;		ld h, 0 
8ee9			;		ld l,(input_at_pos) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8ee9			;		call subafromhl 
8ee9			;		ld a,l 
8ee9			;		ld (input_at_cursor), a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					ld a, (hardware_diag) 
8ee9					cp 0 
8ee9					jr z, .skip_input_diag 
8ee9			 
8ee9					ld a,(input_at_pos) 
8ee9					ld hl, LFSRSeed 
8ee9					call hexout 
8ee9					ld a, (input_cursor) 
8ee9					ld hl, LFSRSeed+2 
8ee9					call hexout 
8ee9					ld a,(input_at_cursor) 
8ee9					ld hl, LFSRSeed+4 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_onoff) 
8ee9					ld hl, LFSRSeed+6 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_flash) 
8ee9					ld hl, LFSRSeed+8 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_len) 
8ee9					ld hl, LFSRSeed+10 
8ee9					call hexout 
8ee9					ld hl, LFSRSeed+12 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9					ld a, display_row_4 
8ee9					ld de, LFSRSeed 
8ee9					call str_at_display 
8ee9					.skip_input_diag: 
8ee9				endif 
8ee9			 
8ee9					; decide on if we are showing the cursor this time round 
8ee9			 
8ee9					ld a, (input_cur_onoff) 
8ee9					cp 255 
8ee9					jr z, .skipcur 
8ee9			 
8ee9			 
8ee9					ld a,(input_at_cursor) 
8ee9					ld de, cursor_shape 
8ee9					call str_at_display 
8ee9			 
8ee9					; save length of current input string 
8ee9					ld hl, (input_start) 
8ee9					ld a, 0 
8ee9					call strlent 
8ee9					ld a,l 
8ee9					ld (input_len),a 
8ee9			 
8ee9			.skipcur: 
8ee9			 
8ee9				        call update_display 
8ee9					 
8ee9			 
8ee9			 
8ee9					; wait 
8ee9				 
8ee9					; TODO loop without wait to flash the cursor and char under cursor	 
8ee9					call cin    ; _wait 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 
8ee9			 
8ee9					; get ptr to char to input into 
8ee9			 
8ee9					ld c,a 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_cursor) 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl 
8ee9					ld a,c 
8ee9			 
8ee9					; replace char under cursor 
8ee9			 
8ee9			;		ld hl, (input_ptr) 
8ee9			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8ee9			;		ld (hl), a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'i' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					cp KEY_HOME 
8ee9					jr nz, .iske 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor),a 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					jp .is1 
8ee9					 
8ee9			.iske:		cp KEY_END 
8ee9					jr nz, .isknw 
8ee9					jp .is1 
8ee9			 
8ee9			.isknw:		cp KEY_NEXTWORD 
8ee9					jr nz, .iskpw 
8ee9			 
8ee9			.isknwm:	ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0 
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .isknwm 
8ee9			 
8ee9			.iskpw:		cp KEY_PREVWORD 
8ee9					jr nz, .iskl 
8ee9			.iskpwm:	 
8ee9					ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0  
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .iskpwm 
8ee9			 
8ee9			 
8ee9			.iskl:		cp KEY_LEFT 
8ee9					jr nz, .isk1 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk1:		cp KEY_RIGHT 
8ee9					jr nz, .isk2 
8ee9			 
8ee9					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8ee9					ld e,a 
8ee9					ld a, (input_cursor) 
8ee9					cp e 
8ee9					jp z, .is1		; at the end of string so dont go right 
8ee9			 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk2:		cp KEY_UP 
8ee9			 
8ee9					jr nz, .isk3 
8ee9			 
8ee9					; swap last command with the current on 
8ee9			 
8ee9					; move cursor to start of string 
8ee9					ld hl, (input_start) 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					 
8ee9					; swap input and last command buffers 
8ee9			 
8ee9					ld hl, os_cli_cmd 
8ee9					ld de, os_last_cmd 
8ee9					ld b, 255 
8ee9			.swap1:		ld a, (hl) 
8ee9					ld c,a 
8ee9					ld a, (de) 
8ee9					ld (hl), a 
8ee9					ld a,c 
8ee9					ld (de),a 
8ee9					inc hl 
8ee9					inc de 
8ee9					djnz .swap1 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk3:		cp KEY_BS 
8ee9					jr nz, .isk4 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					; hl is source 
8ee9					; de needs to be source - 1 
8ee9			 
8ee9			;		ld a, 0 
8ee9			;		dec hl 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					; shift all data 
8ee9			 
8ee9					push hl 
8ee9					inc hl 
8ee9					pop de 
8ee9					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8ee9					ld c,a 
8ee9					ld b,0 
8ee9					ldir  
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					; remove char 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld de,.iblank 
8ee9					call str_at_display 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk4:		cp KEY_CR 
8ee9					jr z, .endinput 
8ee9			 
8ee9					; else add the key press to the end 
8ee9			 
8ee9					ld c, a			; save key pressed 
8ee9			 
8ee9					ld a,(hl)		; get what is currently under char 
8ee9			 
8ee9					cp 0			; we are at the end of the string 
8ee9					jr nz, .onchar 
8ee9					 
8ee9					; add a char to the end of the string 
8ee9				 
8ee9					ld (hl),c 
8ee9					inc hl 
8ee9			;		ld a,' ' 
8ee9			;		ld (hl),a 
8ee9			;		inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					dec hl 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc a				; TODO check max string length and scroll  
8ee9					ld (input_cursor), a		; inc cursor pos 
8ee9							 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, '+' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					jp .is1 
8ee9					 
8ee9			 
8ee9			 
8ee9					; if on a char then insert 
8ee9			.onchar: 
8ee9			 
8ee9					; TODO over flow check: make sure insert does not blow out buffer 
8ee9			 
8ee9					; need to do some maths to use lddr 
8ee9			 
8ee9					push hl   ; save char pos 
8ee9					push bc 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_len) 
8ee9					call addatohl  		; end of string 
8ee9					inc hl 
8ee9					inc hl		; past zero term 
8ee9					push hl 
8ee9					inc hl 
8ee9					push hl  
8ee9			 
8ee9								; start and end of lddr set, now how much to move? 
8ee9			 
8ee9							 
8ee9					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8ee9					ld b,a 
8ee9					ld a,(input_len) 
8ee9					ld e,a 
8ee9					sub b 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9			 
8ee9					ld b,0 
8ee9					ld c,a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'i' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					pop de 
8ee9					pop hl 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'I' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					lddr 
8ee9				 
8ee9			 
8ee9			 
8ee9					; TODO have a key for insert/overwrite mode???? 
8ee9					pop bc 
8ee9					pop hl 
8ee9					ld (hl), c		; otherwise overwrite current char 
8ee9					 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.endinput:	; TODO look for end of string 
8ee9			 
8ee9					; add trailing space for end of token 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a,(input_len) 
8ee9					call addatohl 
8ee9					ld a, ' ' 
8ee9					ld (hl),a 
8ee9					; TODO eof of parse marker 
8ee9			 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					ret 
8ee9			 
8ee9			.iblank: db " ",0 
8ee9			 
8ee9			 
8ee9			input_str_prev:	ld (input_at_pos), a 
8ee9					ld (input_start), hl 
8ee9					ld a,1			; add cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					ld (input_ptr), hl 
8ee9					ld a,d 
8ee9					ld (input_size), a 
8ee9					ld a,0 
8ee9					ld (input_cursor),a 
8ee9			.instr1:	 
8ee9			 
8ee9					; TODO do block cursor 
8ee9					; TODO switch cursor depending on the modifer key 
8ee9			 
8ee9					; update cursor shape change on key hold 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl), a 
8ee9			 
8ee9					; display entered text 
8ee9					ld a,(input_at_pos) 
8ee9			            	CALL fLCD_Pos       ;Position cursor to location in A 
8ee9			            	LD   de, (input_start) 
8ee9			            	CALL fLCD_Str       ;Display string pointed to by DE 
8ee9			 
8ee9					call cin 
8ee9					cp 0 
8ee9					jr z, .instr1 
8ee9			 
8ee9					; proecess keyboard controls first 
8ee9			 
8ee9					ld hl,(input_ptr) 
8ee9			 
8ee9					cp KEY_CR	 ; pressing enter ends input 
8ee9					jr z, .instrcr 
8ee9			 
8ee9					cp KEY_BS 	; back space 
8ee9					jr nz, .instr2 
8ee9					; process back space 
8ee9			 
8ee9					; TODO stop back space if at start of string 
8ee9					dec hl 
8ee9					dec hl ; to over write cursor 
8ee9					ld a,(cursor_shape) 
8ee9					;ld a,0 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a," " 
8ee9					ld (hl),a 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9			 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr2:	cp KEY_LEFT    ; cursor left 
8ee9					jr nz, .instr3 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9				 
8ee9			.instr3:	cp KEY_RIGHT      ; cursor right 
8ee9					jr nz, .instr4 
8ee9					inc hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr4:	cp KEY_HOME    ; jump to start of line 
8ee9					jr nz, .instr5 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr5:	cp KEY_END     ; jump to end of line 
8ee9					jr nz, .instr6 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			.instr6:        cp KEY_UP      ; recall last command 
8ee9					jr nz, .instrnew 
8ee9			 
8ee9				ld hl, scratch 
8ee9				ld de, os_last_cmd 
8ee9				call strcpy 
8ee9					jr .instr1 
8ee9			 
8ee9			 
8ee9			.instrnew:	; no special key pressed to see if we have room to store it 
8ee9			 
8ee9					; TODO do string size test 
8ee9			 
8ee9					dec hl ; to over write cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9					jr .instr1 
8ee9			.instrcr:	dec hl		; remove cursor 
8ee9					ld a,' '	; TODO add a trailing space for safety 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					; if at end of line scroll up    
8ee9					; TODO detecting only end of line 4 for scroll up  
8ee9			 
8ee9					;ld   
8ee9			 
8ee9					ret 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			; strcpy hl = dest, de source 
8ee9			 
8ee9 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8eea b7			            OR   A              ;Null terminator? 
8eeb c8			            RET  Z              ;Yes, so finished 
8eec 1a					ld a,(de) 
8eed 77					ld (hl),a 
8eee 13			            INC  DE             ;Point to next character 
8eef 23					inc hl 
8ef0 18 f7		            JR   strcpy       ;Repeat 
8ef2 c9					ret 
8ef3			 
8ef3			 
8ef3			; TODO string_at  
8ef3			; pass string which starts with lcd offset address and then null term string 
8ef3			 
8ef3			; TODO string to dec 
8ef3			; TODO string to hex 
8ef3			; TODO byte to string hex 
8ef3			; TODO byte to string dec 
8ef3			 
8ef3			 
8ef3			 
8ef3			; from z80uartmonitor 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ef3			; pass hl for where to put the text 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3 c5			hexout:	PUSH BC 
8ef4 f5					PUSH AF 
8ef5 47					LD B, A 
8ef6					; Upper nybble 
8ef6 cb 3f				SRL A 
8ef8 cb 3f				SRL A 
8efa cb 3f				SRL A 
8efc cb 3f				SRL A 
8efe cd 0e 8f				CALL tohex 
8f01 77					ld (hl),a 
8f02 23					inc hl	 
8f03					 
8f03					; Lower nybble 
8f03 78					LD A, B 
8f04 e6 0f				AND 0FH 
8f06 cd 0e 8f				CALL tohex 
8f09 77					ld (hl),a 
8f0a 23					inc hl	 
8f0b					 
8f0b f1					POP AF 
8f0c c1					POP BC 
8f0d c9					RET 
8f0e					 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			tohex: 
8f0e e5					PUSH HL 
8f0f d5					PUSH DE 
8f10 16 00				LD D, 0 
8f12 5f					LD E, A 
8f13 21 1b 8f				LD HL, .DATA 
8f16 19					ADD HL, DE 
8f17 7e					LD A, (HL) 
8f18 d1					POP DE 
8f19 e1					POP HL 
8f1a c9					RET 
8f1b			 
8f1b			.DATA: 
8f1b 30					DEFB	30h	; 0 
8f1c 31					DEFB	31h	; 1 
8f1d 32					DEFB	32h	; 2 
8f1e 33					DEFB	33h	; 3 
8f1f 34					DEFB	34h	; 4 
8f20 35					DEFB	35h	; 5 
8f21 36					DEFB	36h	; 6 
8f22 37					DEFB	37h	; 7 
8f23 38					DEFB	38h	; 8 
8f24 39					DEFB	39h	; 9 
8f25 41					DEFB	41h	; A 
8f26 42					DEFB	42h	; B 
8f27 43					DEFB	43h	; C 
8f28 44					DEFB	44h	; D 
8f29 45					DEFB	45h	; E 
8f2a 46					DEFB	46h	; F 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f2b			;;    subtract $30, if result > 9 then subtract $7 more 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			atohex: 
8f2b d6 30				SUB $30 
8f2d fe 0a				CP 10 
8f2f f8					RET M		; If result negative it was 0-9 so we're done 
8f30 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f32 c9					RET		 
8f33			 
8f33			 
8f33			 
8f33			 
8f33			; Get 2 ASCII characters as hex byte from pointer in hl 
8f33			 
8f33			BYTERD: 
8f33 16 00			LD	D,00h		;Set up 
8f35 cd 3d 8f			CALL	HEXCON		;Get byte and convert to hex 
8f38 87				ADD	A,A		;First nibble so 
8f39 87				ADD	A,A		;multiply by 16 
8f3a 87				ADD	A,A		; 
8f3b 87				ADD	A,A		; 
8f3c 57				LD	D,A		;Save hi nibble in D 
8f3d			HEXCON: 
8f3d 7e				ld a, (hl)		;Get next chr 
8f3e 23				inc hl 
8f3f d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f41 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f43 38 02			JR	C,NALPHA	;If so miss next bit 
8f45 d6 07			SUB	007h		;Else convert alpha 
8f47			NALPHA: 
8f47 b2				OR	D		;Add hi nibble back 
8f48 c9				RET			; 
8f49			 
8f49			 
8f49			; 
8f49			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f49			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f49			; characters (0-9a-f) are accepted. 
8f49			; 
8f49			;get_word        push    af 
8f49			;                call    get_byte        ; Get the upper byte 
8f49			;                ld      h, a 
8f49			;                call    get_byte        ; Get the lower byte 
8f49			;                ld      l, a 
8f49			;                pop     af 
8f49			;                ret 
8f49			; 
8f49			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f49			; the routine get_nibble is used only valid characters are accepted - the  
8f49			; input routine only accepts characters 0-9a-f. 
8f49			; 
8f49 c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f4a 7e					ld a,(hl) 
8f4b 23					inc hl 
8f4c cd 71 8f		                call    nibble2val      ; Get upper nibble 
8f4f cb 07		                rlc     a 
8f51 cb 07		                rlc     a 
8f53 cb 07		                rlc     a 
8f55 cb 07		                rlc     a 
8f57 47			                ld      b, a            ; Save upper four bits 
8f58 7e					ld a,(hl) 
8f59 cd 71 8f		                call    nibble2val      ; Get lower nibble 
8f5c b0			                or      b               ; Combine both nibbles 
8f5d c1			                pop     bc              ; Restore B (and C) 
8f5e c9			                ret 
8f5f			; 
8f5f			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f5f			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f5f			; to the serial line interface. The lower 4 bits of A contain the value of  
8f5f			; that particular digit. 
8f5f			; 
8f5f			;get_nibble      ld a,(hl)           ; Read a character 
8f5f			;                call    to_upper        ; Convert to upper case 
8f5f			;                call    is_hex          ; Was it a hex digit? 
8f5f			;                jr      nc, get_nibble  ; No, get another character 
8f5f			 ;               call    nibble2val      ; Convert nibble to value 
8f5f			 ;               call    print_nibble 
8f5f			 ;               ret 
8f5f			; 
8f5f			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f5f			; A valid hexadecimal digit is denoted by a set C flag. 
8f5f			; 
8f5f			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f5f			;                ret     nc              ; Yes 
8f5f			;                cp      '0'             ; Less than '0'? 
8f5f			;                jr      nc, is_hex_1    ; No, continue 
8f5f			;                ccf                     ; Complement carry (i.e. clear it) 
8f5f			;                ret 
8f5f			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f5f			;                ret     c               ; Yes 
8f5f			;                cp      'A'             ; Less than 'A'? 
8f5f			;                jr      nc, is_hex_2    ; No, continue 
8f5f			;                ccf                     ; Yes - clear carry and return 
8f5f			;                ret 
8f5f			;is_hex_2        scf                     ; Set carry 
8f5f			;                ret 
8f5f			; 
8f5f			; Convert a single character contained in A to upper case: 
8f5f			; 
8f5f fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f61 d8			                ret     c 
8f62 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f64 d0			                ret     nc              ; Nothing to do, either 
8f65 e6 5f		                and     $5f             ; Convert to upper case 
8f67 c9			                ret 
8f68			 
8f68			 
8f68			to_lower: 
8f68			 
8f68			   ; if char is in [A-Z] make it lower case 
8f68			 
8f68			   ; enter : a = char 
8f68			   ; exit  : a = lower case char 
8f68			   ; uses  : af 
8f68			 
8f68 fe 41		   cp 'A' 
8f6a d8			   ret c 
8f6b			    
8f6b fe 5b		   cp 'Z'+1 
8f6d d0			   ret nc 
8f6e			    
8f6e f6 20		   or $20 
8f70 c9			   ret 
8f71			 
8f71			; 
8f71			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f71			; corresponding value in A. 
8f71			; 
8f71 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f73 38 02		                jr      c, nibble2val_1 ; Yes 
8f75 d6 07		                sub     7               ; Adjust for A-F 
8f77 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f79 e6 0f		                and     $f              ; Only return lower 4 bits 
8f7b c9			                ret 
8f7c			; 
8f7c			; Print_nibble prints a single hex nibble which is contained in the lower  
8f7c			; four bits of A: 
8f7c			; 
8f7c			;print_nibble    push    af              ; We won't destroy the contents of A 
8f7c			;                and     $f              ; Just in case... 
8f7c			;                add     a, '0'             ; If we have a digit we are done here. 
8f7c			;                cp      '9' + 1         ; Is the result > 9? 
8f7c			;                jr      c, print_nibble_1 
8f7c			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f7c			;print_nibble_1  call    putc            ; Print the nibble and 
8f7c			;                pop     af              ; restore the original value of A 
8f7c			;                ret 
8f7c			;; 
8f7c			;; Send a CR/LF pair: 
8f7c			; 
8f7c			;crlf            push    af 
8f7c			;                ld      a, cr 
8f7c			;                call    putc 
8f7c			;                ld      a, lf 
8f7c			;                call    putc 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_word prints the four hex digits of a word to the serial line. The  
8f7c			; word is expected to be in HL. 
8f7c			; 
8f7c			;print_word      push    hl 
8f7c			;                push    af 
8f7c			;                ld      a, h 
8f7c			;                call    print_byte 
8f7c			;                ld      a, l 
8f7c			;                call    print_byte 
8f7c			;                pop     af 
8f7c			;                pop     hl 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f7c			; The byte to be printed is expected to be in A. 
8f7c			; 
8f7c			;print_byte      push    af              ; Save the contents of the registers 
8f7c			;                push    bc 
8f7c			;                ld      b, a 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                call    print_nibble    ; Print high nibble 
8f7c			;                ld      a, b 
8f7c			;                call    print_nibble    ; Print low nibble 
8f7c			;                pop     bc              ; Restore original register contents 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			fourehexhl:  
8f7c 7e				ld a,(hl) 
8f7d cd 2b 8f			call atohex 
8f80 cb 3f				SRL A 
8f82 cb 3f				SRL A 
8f84 cb 3f				SRL A 
8f86 cb 3f				SRL A 
8f88 47				ld b, a 
8f89 23				inc hl 
8f8a 7e				ld a,(hl) 
8f8b 23				inc hl 
8f8c cd 2b 8f			call atohex 
8f8f 80				add b 
8f90 57				ld d,a 
8f91 7e				ld a,(hl) 
8f92 cd 2b 8f			call atohex 
8f95 cb 3f				SRL A 
8f97 cb 3f				SRL A 
8f99 cb 3f				SRL A 
8f9b cb 3f				SRL A 
8f9d 47				ld b, a 
8f9e 23				inc hl 
8f9f 7e				ld a,(hl) 
8fa0 23				inc hl 
8fa1 cd 2b 8f			call atohex 
8fa4 80				add b 
8fa5 5f				ld e, a 
8fa6 d5				push de 
8fa7 e1				pop hl 
8fa8 c9				ret 
8fa9			 
8fa9			; pass hl. returns z set if the byte at hl is a digit 
8fa9			;isdigithl:  
8fa9			;	push bc 
8fa9			;	ld a,(hl) 
8fa9			;	cp ':' 
8fa9			;	jr nc, .isdf 		; > 
8fa9			;	cp '0' 
8fa9			;	jr c, .isdf		; < 
8fa9			; 
8fa9			;	; TODO find a better way to set z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	cp b 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9			; 
8fa9			;.isdf:	; not digit so clear z 
8fa9			; 
8fa9			;	; TODO find a better way to unset z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	inc b 
8fa9			;	cp b 
8fa9			; 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9				 
8fa9				 
8fa9			 
8fa9			 
8fa9			; pass hl as the four byte address to load 
8fa9			 
8fa9			get_word_hl:  
8fa9 e5				push hl 
8faa cd 49 8f			call get_byte 
8fad				 
8fad 47				ld b, a 
8fae			 
8fae e1				pop hl 
8faf 23				inc hl 
8fb0 23				inc hl 
8fb1			 
8fb1			; TODO not able to handle a-f  
8fb1 7e				ld a,(hl) 
8fb2			;	;cp ':' 
8fb2			;	cp 'g' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp 'G' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp '0' 
8fb2			;	jr c, .single_byte_hl		; < 
8fb2			 
8fb2				;call isdigithl 
8fb2 fe 00			cp 0 
8fb4 28 06			jr z, .single_byte_hl 
8fb6			 
8fb6			.getwhln:   ; hex word so get next byte 
8fb6			 
8fb6 cd 49 8f			call get_byte 
8fb9 6f				ld l, a 
8fba 60				ld h,b 
8fbb c9				ret 
8fbc 68			.single_byte_hl:   ld l,b 
8fbd 26 00				ld h,0 
8fbf c9					ret 
8fc0			 
8fc0			 
8fc0			 
8fc0			 
8fc0 21 60 97			ld hl,asc+1 
8fc3			;	ld a, (hl) 
8fc3			;	call nibble2val 
8fc3 cd 49 8f			call get_byte 
8fc6			 
8fc6			;	call fourehexhl 
8fc6 32 ef e2			ld (scratch+52),a 
8fc9				 
8fc9 21 ed e2			ld hl,scratch+50 
8fcc 22 de e5			ld (os_cur_ptr),hl 
8fcf			 
8fcf c9				ret 
8fd0			 
8fd0			 
8fd0			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fd0			 
8fd0			; Decimal Unsigned Version 
8fd0			 
8fd0			;Number in a to decimal ASCII 
8fd0			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fd0			;Example: display a=56 as "056" 
8fd0			;input: a = number 
8fd0			;Output: a=0,value of a in the screen 
8fd0			;destroys af,bc (don't know about hl and de) 
8fd0			DispAToASCII: 
8fd0 0e 9c			ld	c,-100 
8fd2 cd dc 8f			call	.Na1 
8fd5 0e f6			ld	c,-10 
8fd7 cd dc 8f			call	.Na1 
8fda 0e ff			ld	c,-1 
8fdc 06 2f		.Na1:	ld	b,'0'-1 
8fde 04			.Na2:	inc	b 
8fdf 81				add	a,c 
8fe0 38 fc			jr	c,.Na2 
8fe2 91				sub	c		;works as add 100/10/1 
8fe3 f5				push af		;safer than ld c,a 
8fe4 78				ld	a,b		;char is in b 
8fe5			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fe5 f1				pop af		;safer than ld a,c 
8fe6 c9				ret 
8fe7			 
8fe7			; Decimal Signed Version 
8fe7			 
8fe7			; DispA 
8fe7			; -------------------------------------------------------------- 
8fe7			; Converts a signed integer value to a zero-terminated ASCII 
8fe7			; string representative of that value (using radix 10). 
8fe7			; -------------------------------------------------------------- 
8fe7			; INPUTS: 
8fe7			;     HL     Value to convert (two's complement integer). 
8fe7			;     DE     Base address of string destination. (pointer). 
8fe7			; -------------------------------------------------------------- 
8fe7			; OUTPUTS: 
8fe7			;     None 
8fe7			; -------------------------------------------------------------- 
8fe7			; REGISTERS/MEMORY DESTROYED 
8fe7			; AF HL 
8fe7			; -------------------------------------------------------------- 
8fe7			 
8fe7			;DispHLToASCII: 
8fe7			;   push    de 
8fe7			;   push    bc 
8fe7			; 
8fe7			;; Detect sign of HL. 
8fe7			;    bit    7, h 
8fe7			;    jr     z, ._DoConvert 
8fe7			; 
8fe7			;; HL is negative. Output '-' to string and negate HL. 
8fe7			;    ld     a, '-' 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			; 
8fe7			;; Negate HL (using two's complement) 
8fe7			;    xor    a 
8fe7			;    sub    l 
8fe7			;    ld     l, a 
8fe7			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fe7			;    sbc    a, h 
8fe7			;    ld     h, a 
8fe7			; 
8fe7			;; Convert HL to digit characters 
8fe7			;._DoConvert: 
8fe7			;    ld     b, 0     ; B will count character length of number 
8fe7			;-   ld     a, 10 
8fe7			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fe7			;    push   af 
8fe7			;    inc    b 
8fe7			;    ld     a, h 
8fe7			;    or     l 
8fe7			;    jr     nz, - 
8fe7			; 
8fe7			;; Retrieve digits from stack 
8fe7			;-   pop    af 
8fe7			;    or     $30 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			;    djnz   - 
8fe7			; 
8fe7			;; Terminate string with NULL 
8fe7			;    xor    a 
8fe7			;    ld     (de), a 
8fe7			; 
8fe7			;    pop    bc 
8fe7			;    pop    de 
8fe7			;    ret 
8fe7			 
8fe7			;Comments 
8fe7			; 
8fe7			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fe7			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fe7			;    Note that the output string will not be fixed-width. 
8fe7			; 
8fe7			;Example Usage 
8fe7			; 
8fe7			;    ld    hl, -1004 
8fe7			;    ld    de, OP1 
8fe7			;    call  DispA 
8fe7			;    ld    hl, OP1 
8fe7			;    syscall  PutS 
8fe7			 
8fe7			 
8fe7			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fe7			 
8fe7			 
8fe7			;Converts an ASCII string to an unsigned 16-bit integer 
8fe7			;Quits when it reaches a non-decimal digit 
8fe7			 
8fe7			string_to_uint16: 
8fe7			atoui_16: 
8fe7			;Input: 
8fe7			;     DE points to the string 
8fe7			;Outputs: 
8fe7			;     HL is the result 
8fe7			;     A is the 8-bit value of the number 
8fe7			;     DE points to the byte after the number 
8fe7			;Destroys: 
8fe7			;     BC 
8fe7			;       if the string is non-empty, BC is HL/10 
8fe7			;Size:  24 bytes 
8fe7			;Speed: 42+d(104+{0,9}) 
8fe7			;       d is the number of digits in the number 
8fe7			;       max is 640 cycles for a 5 digit number 
8fe7			;Assuming no leading zeros: 
8fe7			;1 digit:  146cc 
8fe7			;2 digit:  250cc 
8fe7			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fe7			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fe7			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fe7			;avg: 544.81158447265625cc (544+13297/16384) 
8fe7			;=============================================================== 
8fe7 21 00 00		  ld hl,0 
8fea			.u16a: 
8fea 1a			  ld a,(de) 
8feb d6 30		  sub 30h 
8fed fe 0a		  cp 10 
8fef d0			  ret nc 
8ff0 13			  inc de 
8ff1 44			  ld b,h 
8ff2 4d			  ld c,l 
8ff3 29			  add hl,hl 
8ff4 29			  add hl,hl 
8ff5 09			  add hl,bc 
8ff6 29			  add hl,hl 
8ff7 85			  add a,l 
8ff8 6f			  ld l,a 
8ff9 30 ef		  jr nc,.u16a 
8ffb 24			  inc h 
8ffc c3 ea 8f		  jp .u16a 
8fff			 
8fff			 
8fff			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fff			 
8fff			;written by Zeda 
8fff			;Converts a 16-bit unsigned integer to an ASCII string. 
8fff			 
8fff			uitoa_16: 
8fff			;Input: 
8fff			;   DE is the number to convert 
8fff			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8fff			;Output: 
8fff			;   HL points to the null-terminated ASCII string 
8fff			;      NOTE: This isn't necessarily the same as the input HL. 
8fff d5			  push de 
9000 c5			  push bc 
9001 f5			  push af 
9002 eb			  ex de,hl 
9003			 
9003 01 f0 d8		  ld bc,-10000 
9006 3e 2f		  ld a,'0'-1 
9008 3c			  inc a 
9009 09			  add hl,bc  
900a 38 fc		   jr c,$-2 
900c 12			  ld (de),a 
900d 13			  inc de 
900e			 
900e 01 e8 03		  ld bc,1000 
9011 3e 3a		  ld a,'9'+1 
9013 3d			  dec a  
9014 09			  add hl,bc  
9015 30 fc		   jr nc,$-2 
9017 12			  ld (de),a 
9018 13			  inc de 
9019			 
9019 01 9c ff		  ld bc,-100 
901c 3e 2f		  ld a,'0'-1 
901e 3c			  inc a  
901f 09			  add hl,bc  
9020 38 fc		   jr c,$-2 
9022 12			  ld (de),a 
9023 13			  inc de 
9024			 
9024 7d			  ld a,l 
9025 26 3a		  ld h,'9'+1 
9027 25			  dec h  
9028 c6 0a		  add a,10  
902a 30 fb		   jr nc,$-3 
902c c6 30		  add a,'0' 
902e eb			  ex de,hl 
902f 72			  ld (hl),d 
9030 23			  inc hl 
9031 77			  ld (hl),a 
9032 23			  inc hl 
9033 36 00		  ld (hl),0 
9035			 
9035			;Now strip the leading zeros 
9035 0e fa		  ld c,-6 
9037 09			  add hl,bc 
9038 3e 30		  ld a,'0' 
903a 23			  inc hl  
903b be			  cp (hl)  
903c 28 fc		  jr z,$-2 
903e			 
903e			;Make sure that the string is non-empty! 
903e 7e			  ld a,(hl) 
903f b7			  or a 
9040 20 01		  jr nz,.atoub 
9042 2b			  dec hl 
9043			.atoub: 
9043			 
9043 f1			  pop af 
9044 c1			  pop bc 
9045 d1			  pop de 
9046 c9			  ret 
9047			 
9047			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9047			 
9047			toUpper: 
9047			;A is the char. 
9047			;If A is a lowercase letter, this sets it to the matching uppercase 
9047			;18cc or 30cc or 41cc 
9047			;avg: 26.75cc 
9047 fe 61		  cp 'a' 
9049 d8			  ret c 
904a fe 7b		  cp 'z'+1 
904c d0			  ret nc 
904d d6 20		  sub 'a'-'A' 
904f c9			  ret 
9050			 
9050			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9050			 
9050			; String Length 
9050			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9050			 
9050			; Get the length of the null-terminated string starting at $8000 hl 
9050			;    LD     HL, $8000 
9050			 
9050			strlenz: 
9050			 
9050 af			    XOR    A               ; Zero is the value we are looking for. 
9051 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9052 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9053			                           ; 65, 536 bytes (the entire addressable memory space). 
9053 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9055			 
9055			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9055 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9056 6f			    LD     L, A             ; number of bytes 
9057 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9059 2b			    DEC    HL              ; Compensate for null. 
905a c9				ret 
905b			 
905b			; Get the length of the A terminated string starting at $8000 hl 
905b			;    LD     HL, $8000 
905b			 
905b			strlent: 
905b			 
905b			                  ; A is the value we are looking for. 
905b 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
905d 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
905f			                           ; 65, 536 bytes (the entire addressable memory space). 
905f ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9061			 
9061			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9061 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9063 2e 00		    LD     L, 0             ; number of bytes 
9065 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9067 2b			    DEC    HL              ; Compensate for null. 
9068 c9				ret 
9069			 
9069			 
9069			;Comparing Strings 
9069			 
9069			;IN    HL     Address of string1. 
9069			;      DE     Address of string2. 
9069			 
9069			; doc given but wrong??? 
9069			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9069			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9069			; tested 
9069			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9069			 
9069			strcmp_old: 
9069 e5			    PUSH   HL 
906a d5			    PUSH   DE 
906b			 
906b 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
906c be			    CP     (HL)            ; (want to minimize work). 
906d 38 01		    JR     C, Str1IsBigger 
906f 7e			    LD     A, (HL) 
9070			 
9070			Str1IsBigger: 
9070 4f			    LD     C, A             ; Put length in BC 
9071 06 00		    LD     B, 0 
9073 13			    INC    DE              ; Increment pointers to meat of string. 
9074 23			    INC    HL 
9075			 
9075			CmpLoop: 
9075 1a			    LD     A, (DE)          ; Compare bytes. 
9076 ed a1		    CPI 
9078 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
907a 13			    INC    DE              ; Update pointer. 
907b ea 75 90		    JP     PE, CmpLoop 
907e			 
907e d1			    POP    DE 
907f e1			    POP    HL 
9080 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9081 be			    CP     (HL) 
9082 c9			    RET 
9083			 
9083			NoMatch: 
9083 2b			    DEC    HL 
9084 be			    CP     (HL)            ; Compare again to affect carry. 
9085 d1			    POP    DE 
9086 e1			    POP    HL 
9087 c9			    RET 
9088			 
9088			;; test strmp 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr z, .z1 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z1: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr z, .z2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr c, .c1 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c1: 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr c, .c2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;	NEXTW 
9088			;.str1:   db "string1",0 
9088			;.str2:   db "string2",0 
9088			 
9088			; only care about direct match or not 
9088			; hl and de strings 
9088			; zero set if the same 
9088			 
9088			strcmp: 
9088 1a				ld a, (de) 
9089 be				cp (hl) 
908a 28 02			jr z, .ssame 
908c b7				or a 
908d c9				ret 
908e			 
908e			.ssame:  
908e fe 00			cp 0 
9090 c8				ret z 
9091			 
9091 23				inc hl 
9092 13				inc de 
9093 18 f3			jr strcmp 
9095				 
9095				 
9095			 
9095			;Copyright (c) 2014, Luke Maurits 
9095			;All rights reserved. 
9095			; 
9095			;Redistribution and use in source and binary forms, with or without 
9095			;modification, are permitted provided that the following conditions are met: 
9095			; 
9095			;* Redistributions of source code must retain the above copyright notice, this 
9095			;  list of conditions and the following disclaimer. 
9095			; 
9095			;* Redistributions in binary form must reproduce the above copyright notice, 
9095			;  this list of conditions and the following disclaimer in the documentation 
9095			;  and/or other materials provided with the distribution. 
9095			; 
9095			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9095			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9095			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9095			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9095			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9095			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9095			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9095			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9095			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9095			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9095			 
9095			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9095			 
9095			StrictStrCmp: 
9095				; Load next chars of each string 
9095 1a				ld a, (de) 
9096 47				ld b, a 
9097 7e				ld a, (hl) 
9098				; Compare 
9098 b8				cp b 
9099				; Return non-zero if chars don't match 
9099 c0				ret nz 
909a				; Check for end of both strings 
909a fe 00			cp "\0" 
909c				; Return if strings have ended 
909c c8				ret z 
909d				; Otherwise, advance to next chars 
909d 23				inc hl 
909e 13				inc de 
909f 18 f4			jr StrictStrCmp 
90a1			 
90a1			;end 
90a1			; eof 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
# End of file firmware_strings.asm
90a1			include "firmware_memory.asm"   ; malloc and free  
90a1			 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			.mallocsize: db "Wants malloc >256",0 
90a1			.mallocasize: db "MALLOC gives >256",0 
90a1			.malloczero: db "MALLOC gives zero",0 
90a1			 
90a1			malloc_guard_zerolen: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1				ld de, 0 
90a1			        call cmp16 
90a1				jr nz, .lowalloz 
90a1			 
90a1				push hl 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .malloczero 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1				call bp_on 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1			.lowalloz: 
90a1			 
90a1			 
90a1				pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_entry: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowalloc 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocsize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdone 
90a1			.lowalloc: 
90a1			 
90a1			 
90a1				pop hl 
90a1			.lowdone:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_exit: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowallocx 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocasize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdonex 
90a1			.lowallocx: 
90a1			 
90a1				pop hl 
90a1			.lowdonex:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			endif 
90a1			 
90a1			if MALLOC_2 
90a1			; Z80 Malloc and Free Functions 
90a1			 
90a1			; Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc: 
90a1				 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_entry 
90a1			endif 
90a1			 
90a1			 
90a1			 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "mal" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of size into A 
90a1			    or h               ; Check if size is zero 
90a1			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
90a1			 
90a1			    ; Allocate memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma1" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    call malloc_internal ; Call internal malloc function 
90a1			    pop af             ; Restore AF register 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret                ; Return 
90a1			 
90a1			; Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free: 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of pointer into A 
90a1			    or h               ; Check if pointer is NULL 
90a1			    jp z, free_exit    ; If pointer is NULL, exit 
90a1			 
90a1			    ; Free memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1			    call free_internal  ; Call internal free function 
90a1			    pop af             ; Restore AF register 
90a1			    ret                ; Return 
90a1			 
90a1			; Internal Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc_internal: 
90a1			    ld bc, 2           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to requested size 
90a1			    ex de, hl          ; Save total size in DE, and keep it in HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			 
90a1			    ; Search for free memory block 
90a1			    ld de, (heap_end)  ; Load end of heap into DE 
90a1			    ld bc, 0           ; Initialize counter 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			malloc_search_loop: 
90a1			    ; Check if current block is free 
90a1			    ld a, (hl)         ; Load current block's status (free or used) 
90a1			    cp 0               ; Compare with zero (free) 
90a1			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
90a1			 
90a1			    ; Check if current block is large enough 
90a1			    ld a, (hl+1)       ; Load high byte of block size 
90a1			    cp l               ; Compare with low byte of requested size 
90a1			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
90a1			 
90a1			    ld a, (hl+2)       ; Load low byte of block size 
90a1			    cp h               ; Compare with high byte of requested size 
90a1			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
90a1			 
90a1			    ; Mark block as used 
90a1			    ld (hl), 0xFF      ; Set status byte to indicate used block 
90a1			 
90a1			    ; Calculate remaining space in block 
90a1			    ld bc, 0           ; Clear BC 
90a1			    add hl, bc         ; Increment HL to point to start of data block 
90a1			    add hl, de         ; HL = HL + DE (total size) 
90a1			    ld bc, 1           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to start of data block 
90a1			 
90a1			    ; Save pointer to allocated block in HL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma5" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			malloc_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3           ; Size of management overhead 
90a1			    add hl, bc         ; Move to the next block 
90a1			    inc de             ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e            ; Load low byte of heap end address 
90a1			    cp (hl)            ; Compare with low byte of current address 
90a1			    jr nz, malloc_search_loop  ; If not equal, continue searching 
90a1			    ld a, d            ; Load high byte of heap end address 
90a1			    cp 0               ; Check if it's zero (end of memory) 
90a1			    jr nz, malloc_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, allocation failed 
90a1			    xor a              ; Set result to NULL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma6" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			malloc_exit: 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma7" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			; Internal Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free_internal: 
90a1			    ld de, (heap_start) ; Load start of heap into DE 
90a1			    ld bc, 0            ; Initialize counter 
90a1			 
90a1			free_search_loop: 
90a1			    ; Check if current block contains the pointer 
90a1			    ld a, l             ; Load low byte of pointer 
90a1			    cp (hl+1)           ; Compare with high byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			    ld a, h             ; Load high byte of pointer 
90a1			    cp (hl+2)           ; Compare with low byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			 
90a1			    ; Mark block as free 
90a1			    ld (hl), 0          ; Set status byte to indicate free block 
90a1			    ret                 ; Return 
90a1			 
90a1			free_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3            ; Size of management overhead 
90a1			    add hl, bc          ; Move to the next block 
90a1			    inc de              ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e             ; Load low byte of heap end address 
90a1			    cp (hl)             ; Compare with low byte of current address 
90a1			    jr nz, free_search_loop  ; If not equal, continue searching 
90a1			    ld a, d             ; Load high byte of heap end address 
90a1			    cp 0                ; Check if it's zero (end of memory) 
90a1			    jr nz, free_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, pointer is not found in heap 
90a1			    ret 
90a1			 
90a1			free_exit: 
90a1			    ret                 ; Return 
90a1			 
90a1			; Define heap start and end addresses 
90a1			;heap_start:    .dw 0xC000   ; Start of heap 
90a1			;heap_end:      .dw 0xE000   ; End of heap 
90a1			 
90a1			endif 
90a1			 
90a1			 
90a1			if MALLOC_1 
90a1			 
90a1			 
90a1			 
90a1			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
90a1			 
90a1			;moved to firmware.asm 
90a1			;heap_start        .equ  0x9000      ; Starting address of heap 
90a1			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
90a1			 
90a1			;      .org 0 
90a1			;      jp    main 
90a1			 
90a1			 
90a1			;      .org  0x100 
90a1			;main: 
90a1			;      ld    HL, 0x8100 
90a1			;      ld    SP, HL 
90a1			; 
90a1			;      call  heap_init 
90a1			; 
90a1			;      ; Make some allocations 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9004 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9014 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9024 
90a1			; 
90a1			;      ; Free some allocations 
90a1			;      ld    HL, 0x9014 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9004 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9024 
90a1			;      call  free 
90a1			; 
90a1			; 
90a1			;      halt 
90a1			 
90a1			 
90a1			;------------------------------------------------------------------------------ 
90a1			;     heap_init                                                               : 
90a1			;                                                                             : 
90a1			; Description                                                                 : 
90a1			;     Initialise the heap and make it ready for malloc and free operations.   : 
90a1			;                                                                             : 
90a1			;     The heap is maintained as a linked list, starting with an initial       : 
90a1			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
90a1			;     the first free block in the heap. Each block then points to the next    : 
90a1			;     free block within the heap, and the free list ends at the first block   : 
90a1			;     with a null pointer to the next free block.                             : 
90a1			;                                                                             : 
90a1			; Parameters                                                                  : 
90a1			;     Inputs are compile-time only. Two defines which specify the starting    : 
90a1			;     address of the heap and its size are required, along with a memory      : 
90a1			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
90a1			;     principally stores a pointer to the first free block in the heap.       : 
90a1			;                                                                             : 
90a1			; Returns                                                                     : 
90a1			;     Nothing                                                                 : 
90a1			;------------------------------------------------------------------------------ 
90a1			heap_init: 
90a1 e5			      push  HL 
90a2			 
90a2			      ; Initialise free list struct 
90a2 21 be dd		      ld    HL, heap_start 
90a5 22 b9 dd		      ld    (free_list), HL 
90a8 21 00 00		      ld    HL, 0 
90ab 22 bb dd		      ld    (free_list+2), HL 
90ae			 
90ae			      ; Insert first free block at bottom of heap, consumes entire heap 
90ae 21 92 e2		      ld    HL, heap_start+heap_size-4 
90b1 22 be dd		      ld    (heap_start), HL        ; Next block (end of free list) 
90b4 21 d4 04		      ld    HL, heap_size-4 
90b7 22 c0 dd		      ld    (heap_start+2), HL      ; Block size 
90ba			 
90ba			      ; Insert end of free list block at top of heap - two null words will 
90ba			      ; terminate the free list 
90ba 21 00 00		      ld    HL, 0 
90bd 22 94 e2		      ld    (heap_start+heap_size-2), HL 
90c0 22 92 e2		      ld    (heap_start+heap_size-4), HL 
90c3			 
90c3 e1			      pop   HL 
90c4			 
90c4 c9			      ret 
90c5			 
90c5			 
90c5			;------------------------------------------------------------------------------ 
90c5			;     malloc                                                                  : 
90c5			;                                                                             : 
90c5			; Description                                                                 : 
90c5			;     Allocates the wanted space from the heap and returns the address of the : 
90c5			;     first useable byte of the allocation.                                   : 
90c5			;                                                                             : 
90c5			;     Allocations can happen in one of two ways:                              : 
90c5			;                                                                             : 
90c5			;     1. A free block may be found which is the exact size wanted. In this    : 
90c5			;        case the block is removed from the free list and retuedn to the      : 
90c5			;        caller.                                                              : 
90c5			;     2. A free block may be found which is larger than the size wanted. In   : 
90c5			;        this case, the larger block is split into two. The first portion of  : 
90c5			;        this block will become the requested space by the malloc call and    : 
90c5			;        is returned to the caller. The second portion becomes a new free     : 
90c5			;        block, and the free list is adjusted to maintain continuity via this : 
90c5			;        newly created block.                                                 : 
90c5			;                                                                             : 
90c5			;     malloc does not set any initial value in the allocated space, the       : 
90c5			;     caller is required to do this as required.                              : 
90c5			;                                                                             : 
90c5			;     This implementation of malloc uses the stack exclusively, and is        : 
90c5			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90c5			;     advisable to disable interrupts before calling malloc, and recommended  : 
90c5			;     to avoid the use of malloc inside ISRs in general.                      : 
90c5			;                                                                             : 
90c5			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90c5			;                                                                             : 
90c5			; Parameters                                                                  : 
90c5			;     HL  Number of bytes wanted                                              : 
90c5			;                                                                             : 
90c5			; Returns                                                                     : 
90c5			;     HL  Address of the first useable byte of the allocation                 : 
90c5			;                                                                             : 
90c5			; Flags                                                                       : 
90c5			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90c5			;                                                                             : 
90c5			; Stack frame                                                                 : 
90c5			;       |             |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     BC      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     DE      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     IX      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |  prev_free  |                                                       : 
90c5			;   +4  +-------------+                                                       : 
90c5			;       |  this_free  |                                                       : 
90c5			;   +2  +-------------+                                                       : 
90c5			;       |  next_free  |                                                       : 
90c5			;   +0  +-------------+                                                       : 
90c5			;       |             |                                                       : 
90c5			;                                                                             : 
90c5			;------------------------------------------------------------------------------ 
90c5			 
90c5			 
90c5			;malloc: 
90c5			; 
90c5			;	SAVESP ON 1 
90c5			; 
90c5			;	call malloc_code 
90c5			; 
90c5			;	CHECKSP ON 1 
90c5			;	ret 
90c5			 
90c5			 
90c5			malloc: 
90c5 c5			      push  BC 
90c6 d5			      push  DE 
90c7 dd e5		      push  IX 
90c9			if DEBUG_FORTH_MALLOC_HIGH 
90c9			call malloc_guard_entry 
90c9			endif 
90c9			 
90c9					if DEBUG_FORTH_MALLOC 
90c9						DMARK "mal" 
90c9						CALLMONITOR 
90c9					endif 
90c9 7c			      ld    A, H                    ; Exit if no space requested 
90ca b5			      or    L 
90cb ca 8a 91		      jp    Z, malloc_early_exit 
90ce			 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			; 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			 
90ce			 
90ce			 
90ce			 
90ce					if DEBUG_FORTH_MALLOC 
90ce						DMARK "maA" 
90ce						CALLMONITOR 
90ce					endif 
90ce			      ; Set up stack frame 
90ce eb			      ex    DE, HL 
90cf 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90d2 39			      add   HL, SP 
90d3 f9			      ld    SP, HL 
90d4 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90d8 dd 39		      add   IX, SP 
90da			 
90da			      ; Setup initial state 
90da 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90dd 19			      add   HL, DE 
90de			 
90de 44			      ld    B, H                    ; Move want to BC 
90df 4d			      ld    C, L 
90e0			 
90e0 21 b9 dd		      ld    HL, free_list           ; Store prev_free ptr to stack 
90e3 dd 75 04		      ld    (IX+4), L 
90e6 dd 74 05		      ld    (IX+5), H 
90e9			 
90e9 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90ea 23			      inc   HL 
90eb 56			      ld    D, (HL) 
90ec dd 73 02		      ld    (IX+2), E 
90ef dd 72 03		      ld    (IX+3), D 
90f2 eb			      ex    DE, HL                  ; this_free ptr into HL 
90f3			 
90f3					if DEBUG_FORTH_MALLOC 
90f3						DMARK "maB" 
90f3						CALLMONITOR 
90f3					endif 
90f3			      ; Loop through free block list to find some space 
90f3			malloc_find_space: 
90f3 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90f7 b3			      or    E 
90f8 ca 84 91		      jp    Z, malloc_no_space 
90fb			 
90fb dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90fe dd 72 01		      ld    (IX+1), D 
9101			 
9101			      ; Does this block have enough space to make the allocation? 
9101 23			      inc   HL                      ; Load free block size into DE 
9102 5e			      ld    E, (HL) 
9103 23			      inc   HL 
9104 56			      ld    D, (HL) 
9105			 
9105 eb			      ex    DE, HL                  ; Check size of block against want 
9106 b7			      or    A                       ; Ensure carry flag clear 
9107 ed 42		      sbc   HL, BC 
9109 e5			      push  HL                      ; Store the result for later (new block size) 
910a			 
910a ca 59 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
910d 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
910f			 
910f			      ; this_free block is not big enough, setup ptrs to test next free block 
910f e1			      pop   HL                      ; Discard previous result 
9110			 
9110 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9113 dd 66 03		      ld    H, (IX+3) 
9116 dd 75 04		      ld    (IX+4), L 
9119 dd 74 05		      ld    (IX+5), H 
911c			 
911c dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
911f dd 66 01		      ld    H, (IX+1) 
9122 dd 75 02		      ld    (IX+2), L 
9125 dd 74 03		      ld    (IX+3), H 
9128			 
9128					if DEBUG_FORTH_MALLOC 
9128						DMARK "MA>" 
9128						CALLMONITOR 
9128					endif 
9128 18 c9		      jr    malloc_find_space 
912a			 
912a			      ; split a bigger block into two - requested size and remaining size 
912a			malloc_alloc_split: 
912a					if DEBUG_FORTH_MALLOC 
912a						DMARK "MAs" 
912a						CALLMONITOR 
912a					endif 
912a eb			      ex    DE, HL                  ; Calculate address of new free block 
912b 2b			      dec   HL 
912c 2b			      dec   HL 
912d 2b			      dec   HL 
912e 09			      add   HL, BC 
912f			 
912f			      ; Create a new block and point it at next_free 
912f dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9132 dd 56 01		      ld    D, (IX+1) 
9135			 
9135 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9136 23			      inc   HL 
9137 72			      ld    (HL), D 
9138			 
9138 d1			      pop   DE                      ; Store size of new block into new block 
9139 23			      inc   HL 
913a 73			      ld    (HL), E 
913b 23			      inc   HL 
913c 72			      ld    (HL), D 
913d			 
913d			      ; Update this_free ptr to point to new block 
913d 2b			      dec   HL 
913e 2b			      dec   HL 
913f 2b			      dec   HL 
9140			 
9140 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9143 dd 56 03		      ld    D, (IX+3) 
9146			 
9146 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9149 dd 74 03		      ld    (IX+3), H 
914c			 
914c			      ; Modify this_free block to be allocation 
914c eb			      ex    DE, HL 
914d af			      xor   A                       ; Null the next block ptr of allocated block 
914e 77			      ld    (HL), A 
914f 23			      inc   HL 
9150 77			      ld    (HL), A 
9151			 
9151 23			      inc   HL                      ; Store want size into allocated block 
9152 71			      ld    (HL), C 
9153 23			      inc   HL 
9154 70			      ld    (HL), B 
9155 23			      inc   HL 
9156 e5			      push  HL                      ; Address of allocation to return 
9157			 
9157 18 19		      jr    malloc_update_links 
9159			 
9159			malloc_alloc_fit: 
9159 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
915a			 
915a					if DEBUG_FORTH_MALLOC 
915a						DMARK "MAf" 
915a						CALLMONITOR 
915a					endif 
915a			      ; Modify this_free block to be allocation 
915a eb			      ex    DE, HL 
915b 2b			      dec   HL 
915c 2b			      dec   HL 
915d 2b			      dec   HL 
915e			 
915e af			      xor   A                       ; Null the next block ptr of allocated block 
915f 77			      ld    (HL), A 
9160 23			      inc   HL 
9161 77			      ld    (HL), A 
9162			 
9162 23			      inc   HL                      ; Store address of allocation to return 
9163 23			      inc   HL 
9164 23			      inc   HL 
9165 e5			      push  HL 
9166			 
9166			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9166 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9169 dd 66 01		      ld    H, (IX+1) 
916c			 
916c dd 75 02		      ld    (IX+2), L               ; HL to this_free 
916f dd 74 03		      ld    (IX+3), H 
9172			 
9172			 
9172			malloc_update_links: 
9172			      ; Update prev_free ptr to point to this_free 
9172 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9175 dd 66 05		      ld    H, (IX+5) 
9178			 
9178 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
917b dd 56 03		      ld    D, (IX+3) 
917e			 
917e 73			      ld    (HL), E                 ; this_free ptr into prev_free 
917f 23			      inc   HL 
9180 72			      ld    (HL), D 
9181			 
9181					if DEBUG_FORTH_MALLOC 
9181						DMARK "Mul" 
9181						CALLMONITOR 
9181					endif 
9181			      ; Clear the Z flag to indicate successful allocation 
9181 7a			      ld    A, D 
9182 b3			      or    E 
9183			 
9183 d1			      pop   DE                      ; Address of allocation 
9184					if DEBUG_FORTH_MALLOC 
9184						DMARK "MAu" 
9184						CALLMONITOR 
9184					endif 
9184			 
9184			malloc_no_space: 
9184 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9187 39			      add   HL, SP 
9188 f9			      ld    SP, HL 
9189			 
9189 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAN" 
918a						CALLMONITOR 
918a					endif 
918a			 
918a			malloc_early_exit: 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAx" 
918a						CALLMONITOR 
918a					endif 
918a dd e1		      pop   IX 
918c d1			      pop   DE 
918d c1			      pop   BC 
918e			 
918e			if DEBUG_FORTH_MALLOC_HIGH 
918e			call malloc_guard_exit 
918e			call malloc_guard_zerolen 
918e			endif 
918e c9			      ret 
918f			 
918f			 
918f			;------------------------------------------------------------------------------ 
918f			;     free                                                                    : 
918f			;                                                                             : 
918f			; Description                                                                 : 
918f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
918f			;     returned by malloc, otherwise the behaviour is undefined.               : 
918f			;                                                                             : 
918f			;     Where possible, directly adjacent free blocks will be merged together   : 
918f			;     into larger blocks to help ensure that the heap does not become         : 
918f			;     excessively fragmented.                                                 : 
918f			;                                                                             : 
918f			;     free does not clear or set any other value into the freed space, and    : 
918f			;     therefore its contents may be visible through subsequent malloc's. The  : 
918f			;     caller should clear the freed space as required.                        : 
918f			;                                                                             : 
918f			;     This implementation of free uses the stack exclusively, and is          : 
918f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
918f			;     advisable to disable interrupts before calling free, and recommended    : 
918f			;     to avoid the use of free inside ISRs in general.                        : 
918f			;                                                                             : 
918f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
918f			;                                                                             : 
918f			; Parameters                                                                  : 
918f			;     HL  Pointer to address of first byte of allocation to be freed          : 
918f			;                                                                             : 
918f			; Returns                                                                     : 
918f			;     Nothing                                                                 : 
918f			;                                                                             : 
918f			; Stack frame                                                                 : 
918f			;       |             |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     BC      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     DE      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     IX      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |  prev_free  |                                                       : 
918f			;   +2  +-------------+                                                       : 
918f			;       |  next_free  |                                                       : 
918f			;   +0  +-------------+                                                       : 
918f			;       |             |                                                       : 
918f			;                                                                             : 
918f			;------------------------------------------------------------------------------ 
918f			free: 
918f c5			      push  BC 
9190 d5			      push  DE 
9191 dd e5		      push  IX 
9193			 
9193 7c			      ld    A, H                    ; Exit if ptr is null 
9194 b5			      or    L 
9195 ca 59 92		      jp    Z, free_early_exit 
9198			 
9198			      ; Set up stack frame 
9198 eb			      ex    DE, HL 
9199 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
919c 39			      add   HL, SP 
919d f9			      ld    SP, HL 
919e dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91a2 dd 39		      add   IX, SP 
91a4			 
91a4			      ; The address in HL points to the start of the useable allocated space, 
91a4			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
91a4			      ; address of the block itself. 
91a4 eb			      ex    DE, HL 
91a5 11 fc ff		      ld    DE, -4 
91a8 19			      add   HL, DE 
91a9			 
91a9			      ; An allocated block must have a null next block pointer in it 
91a9 7e			      ld    A, (HL) 
91aa 23			      inc   HL 
91ab b6			      or    (HL) 
91ac c2 54 92		      jp    NZ, free_done 
91af			 
91af 2b			      dec   HL 
91b0			 
91b0 44			      ld    B, H                    ; Copy HL to BC 
91b1 4d			      ld    C, L 
91b2			 
91b2			      ; Loop through the free list to find the first block with an address 
91b2			      ; higher than the block being freed 
91b2 21 b9 dd		      ld    HL, free_list 
91b5			 
91b5			free_find_higher_block: 
91b5 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91b6 23			      inc   HL 
91b7 56			      ld    D, (HL) 
91b8 2b			      dec   HL 
91b9			 
91b9 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91bc dd 72 01		      ld    (IX+1), D 
91bf dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91c2 dd 74 03		      ld    (IX+3), H 
91c5			 
91c5 78			      ld    A, B                    ; Check if DE is greater than BC 
91c6 ba			      cp    D                       ; Compare MSB first 
91c7 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91c9 30 04		      jr    NC, free_find_higher_block_skip 
91cb 79			      ld    A, C 
91cc bb			      cp    E                       ; Then compare LSB 
91cd 38 08		      jr    C, free_found_higher_block 
91cf			 
91cf			free_find_higher_block_skip: 
91cf 7a			      ld    A, D                    ; Reached the end of the free list? 
91d0 b3			      or    E 
91d1 ca 54 92		      jp    Z, free_done 
91d4			 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 18 de		      jr    free_find_higher_block 
91d7			 
91d7			free_found_higher_block: 
91d7			      ; Insert freed block between prev and next free blocks 
91d7 71			      ld    (HL), C                 ; Point prev free block to freed block 
91d8 23			      inc   HL 
91d9 70			      ld    (HL), B 
91da			 
91da 60			      ld    H, B                    ; Point freed block at next free block 
91db 69			      ld    L, C 
91dc 73			      ld    (HL), E 
91dd 23			      inc   HL 
91de 72			      ld    (HL), D 
91df			 
91df			      ; Check if the freed block is adjacent to the next free block 
91df 23			      inc   HL                      ; Load size of freed block into HL 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3 eb			      ex    DE, HL 
91e4			 
91e4 09			      add   HL, BC                  ; Add addr of freed block and its size 
91e5			 
91e5 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91e8 dd 56 01		      ld    D, (IX+1) 
91eb			 
91eb b7			      or    A                       ; Clear the carry flag 
91ec ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91ee 20 22		      jr    NZ, free_check_adjacent_to_prev 
91f0			 
91f0			      ; Freed block is adjacent to next, merge into one bigger block 
91f0 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91f1 5e			      ld    E, (HL) 
91f2 23			      inc   HL 
91f3 56			      ld    D, (HL) 
91f4 e5			      push  HL                      ; Save ptr to next block for later 
91f5			 
91f5 60			      ld    H, B                    ; Store ptr from next block into freed block 
91f6 69			      ld    L, C 
91f7 73			      ld    (HL), E 
91f8 23			      inc   HL 
91f9 72			      ld    (HL), D 
91fa			 
91fa e1			      pop   HL                      ; Restore ptr to next block 
91fb 23			      inc   HL                      ; Load size of next block into DE 
91fc 5e			      ld    E, (HL) 
91fd 23			      inc   HL 
91fe 56			      ld    D, (HL) 
91ff d5			      push  DE                      ; Save next block size for later 
9200			 
9200 60			      ld    H, B                    ; Load size of freed block into HL 
9201 69			      ld    L, C 
9202 23			      inc   HL 
9203 23			      inc   HL 
9204 5e			      ld    E, (HL) 
9205 23			      inc   HL 
9206 56			      ld    D, (HL) 
9207 eb			      ex    DE, HL 
9208			 
9208 d1			      pop   DE                      ; Restore size of next block 
9209 19			      add   HL, DE                  ; Add sizes of both blocks 
920a eb			      ex    DE, HL 
920b			 
920b 60			      ld    H, B                    ; Store new bigger size into freed block 
920c 69			      ld    L, C 
920d 23			      inc   HL 
920e 23			      inc   HL 
920f 73			      ld    (HL), E 
9210 23			      inc   HL 
9211 72			      ld    (HL), D 
9212			 
9212			free_check_adjacent_to_prev: 
9212			      ; Check if the freed block is adjacent to the prev free block 
9212 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9215 dd 66 03		      ld    H, (IX+3) 
9218			 
9218 23			      inc   HL                      ; Size of prev free block into DE 
9219 23			      inc   HL 
921a 5e			      ld    E, (HL) 
921b 23			      inc   HL 
921c 56			      ld    D, (HL) 
921d 2b			      dec   HL 
921e 2b			      dec   HL 
921f 2b			      dec   HL 
9220			 
9220 19			      add   HL, DE                  ; Add prev block addr and size 
9221			 
9221 b7			      or    A                       ; Clear the carry flag 
9222 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9224 20 2e		      jr    NZ, free_done 
9226			 
9226			      ; Freed block is adjacent to prev, merge into one bigger block 
9226 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9227 69			      ld    L, C 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b e5			      push  HL                      ; Save freed block ptr for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
922f dd 66 03		      ld    H, (IX+3) 
9232 73			      ld    (HL), E 
9233 23			      inc   HL 
9234 72			      ld    (HL), D 
9235			 
9235 e1			      pop   HL                      ; Restore freed block ptr 
9236 23			      inc   HL                      ; Load size of freed block into DE 
9237 5e			      ld    E, (HL) 
9238 23			      inc   HL 
9239 56			      ld    D, (HL) 
923a d5			      push  DE                      ; Save freed block size for later 
923b			 
923b dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
923e dd 66 03		      ld    H, (IX+3) 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 5e			      ld    E, (HL) 
9244 23			      inc   HL 
9245 56			      ld    D, (HL) 
9246			 
9246 e1			      pop   HL                      ; Add sizes of both blocks 
9247 19			      add   HL, DE 
9248 eb			      ex    DE, HL 
9249			 
9249 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
924c dd 66 03		      ld    H, (IX+3) 
924f 23			      inc   HL 
9250 23			      inc   HL 
9251 73			      ld    (HL), E 
9252 23			      inc   HL 
9253 72			      ld    (HL), D 
9254			 
9254			free_done: 
9254 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9257 39			      add   HL, SP 
9258 f9			      ld    SP, HL 
9259			 
9259			free_early_exit: 
9259 dd e1		      pop   IX 
925b d1			      pop   DE 
925c c1			      pop   BC 
925d			 
925d c9			      ret 
925e			 
925e			; moved to firmware.asm 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			;                  .dw   0 
925e			 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_3 
925e			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
925e			;heap_start        .equ  0x9000      ; Starting address of heap 
925e			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
925e			; 
925e			 ;     .org 0 
925e			  ;    jp    main 
925e			; 
925e			; 
925e			 ;     .org  0x100 
925e			;main: 
925e			 ;     ld    HL, 0x8100 
925e			  ;    ld    SP, HL 
925e			; 
925e			;      call  heap_init 
925e			 
925e			      ; Make some allocations 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9004 
925e			; 
925e			 ;     ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9014 
925e			 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9024 
925e			 
925e			      ; Free some allocations 
925e			;      ld    HL, 0x9014 
925e			;      call  free 
925e			 
925e			;      ld    HL, 0x9004 
925e			;      call  free 
925e			; 
925e			;      ld    HL, 0x9024 
925e			;      call  free 
925e			 
925e			 
925e			 ;     halt 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     heap_init                                                               : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Initialise the heap and make it ready for malloc and free operations.   : 
925e			;                                                                             : 
925e			;     The heap is maintained as a linked list, starting with an initial       : 
925e			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
925e			;     the first free block in the heap. Each block then points to the next    : 
925e			;     free block within the heap, and the free list ends at the first block   : 
925e			;     with a null pointer to the next free block.                             : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     Inputs are compile-time only. Two defines which specify the starting    : 
925e			;     address of the heap and its size are required, along with a memory      : 
925e			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
925e			;     principally stores a pointer to the first free block in the heap.       : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;------------------------------------------------------------------------------ 
925e			heap_init: 
925e			      push  HL 
925e			 
925e			      ; Initialise free list struct 
925e			      ld    HL, heap_start 
925e			      ld    (free_list), HL 
925e			      ld    HL, 0 
925e			      ld    (free_list+2), HL 
925e			 
925e			      ; Insert first free block at bottom of heap, consumes entire heap 
925e			      ld    HL, heap_start+heap_size-4 
925e			      ld    (heap_start), HL        ; Next block (end of free list) 
925e			      ld    HL, heap_size-4 
925e			      ld    (heap_start+2), HL      ; Block size 
925e			 
925e			      ; Insert end of free list block at top of heap - two null words will 
925e			      ; terminate the free list 
925e			      ld    HL, 0 
925e			      ld    (heap_start+heap_size-2), HL 
925e			      ld    (heap_start+heap_size-4), HL 
925e			 
925e			      pop   HL 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     malloc                                                                  : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Allocates the wanted space from the heap and returns the address of the : 
925e			;     first useable byte of the allocation.                                   : 
925e			;                                                                             : 
925e			;     Allocations can happen in one of two ways:                              : 
925e			;                                                                             : 
925e			;     1. A free block may be found which is the exact size wanted. In this    : 
925e			;        case the block is removed from the free list and retuedn to the      : 
925e			;        caller.                                                              : 
925e			;     2. A free block may be found which is larger than the size wanted. In   : 
925e			;        this case, the larger block is split into two. The first portion of  : 
925e			;        this block will become the requested space by the malloc call and    : 
925e			;        is returned to the caller. The second portion becomes a new free     : 
925e			;        block, and the free list is adjusted to maintain continuity via this : 
925e			;        newly created block.                                                 : 
925e			;                                                                             : 
925e			;     malloc does not set any initial value in the allocated space, the       : 
925e			;     caller is required to do this as required.                              : 
925e			;                                                                             : 
925e			;     This implementation of malloc uses the stack exclusively, and is        : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling malloc, and recommended  : 
925e			;     to avoid the use of malloc inside ISRs in general.                      : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Number of bytes wanted                                              : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     HL  Address of the first useable byte of the allocation                 : 
925e			;                                                                             : 
925e			; Flags                                                                       : 
925e			;     Z   Set if the allocation did not succeed, clear otherwise              : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +4  +-------------+                                                       : 
925e			;       |  this_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			malloc: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if no space requested 
925e			      or    L 
925e			      jp    Z, malloc_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; Setup initial state 
925e			      ld    HL, 4                   ; want must also include space used by block struct 
925e			      add   HL, DE 
925e			 
925e			      ld    B, H                    ; Move want to BC 
925e			      ld    C, L 
925e			 
925e			      ld    HL, free_list           ; Store prev_free ptr to stack 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    E, (HL)                 ; Store this_free ptr to stack 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ld    (IX+2), E 
925e			      ld    (IX+3), D 
925e			      ex    DE, HL                  ; this_free ptr into HL 
925e			 
925e			      ; Loop through free block list to find some space 
925e			malloc_find_space: 
925e			      ld    E, (HL)                 ; Load next_free ptr into DE 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ld    A, D                    ; Check for null next_free ptr - end of free list 
925e			      or    E 
925e			      jp    Z, malloc_no_space 
925e			 
925e			      ld    (IX+0), E               ; Store next_free ptr to stack 
925e			      ld    (IX+1), D 
925e			 
925e			      ; Does this block have enough space to make the allocation? 
925e			      inc   HL                      ; Load free block size into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ex    DE, HL                  ; Check size of block against want 
925e			      or    A                       ; Ensure carry flag clear 
925e			      sbc   HL, BC 
925e			      push  HL                      ; Store the result for later (new block size) 
925e			 
925e			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
925e			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
925e			 
925e			      ; this_free block is not big enough, setup ptrs to test next free block 
925e			      pop   HL                      ; Discard previous result 
925e			 
925e			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
925e			      ld    H, (IX+3) 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
925e			      ld    H, (IX+1) 
925e			      ld    (IX+2), L 
925e			      ld    (IX+3), H 
925e			 
925e			      jr    malloc_find_space 
925e			 
925e			      ; split a bigger block into two - requested size and remaining size 
925e			malloc_alloc_split: 
925e			      ex    DE, HL                  ; Calculate address of new free block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      add   HL, BC 
925e			 
925e			      ; Create a new block and point it at next_free 
925e			      ld    E, (IX+0)               ; Load next_free ptr into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      ld    (HL), E                 ; Store next_free ptr into new block 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   DE                      ; Store size of new block into new block 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Update this_free ptr to point to new block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
925e			      ld    (IX+3), H 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store want size into allocated block 
925e			      ld    (HL), C 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			      inc   HL 
925e			      push  HL                      ; Address of allocation to return 
925e			 
925e			      jr    malloc_update_links 
925e			 
925e			malloc_alloc_fit: 
925e			      pop   HL                      ; Dont need new block size, want is exact fit 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store address of allocation to return 
925e			      inc   HL 
925e			      inc   HL 
925e			      push  HL 
925e			 
925e			      ; Copy next_free ptr to this_free, remove allocated block from free list 
925e			      ld    L, (IX+0)               ; next_free to HL 
925e			      ld    H, (IX+1) 
925e			 
925e			      ld    (IX+2), L               ; HL to this_free 
925e			      ld    (IX+3), H 
925e			 
925e			 
925e			malloc_update_links: 
925e			      ; Update prev_free ptr to point to this_free 
925e			      ld    L, (IX+4)               ; prev_free ptr to HL 
925e			      ld    H, (IX+5) 
925e			 
925e			      ld    E, (IX+2)               ; this_free ptr to DE 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (HL), E                 ; this_free ptr into prev_free 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Clear the Z flag to indicate successful allocation 
925e			      ld    A, D 
925e			      or    E 
925e			 
925e			      pop   DE                      ; Address of allocation 
925e			 
925e			malloc_no_space: 
925e			      ld    HL, 6                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			      ex    DE, HL                  ; Alloc addr into HL for return 
925e			 
925e			malloc_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     free                                                                    : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Return the space pointed to by HL to the heap. HL must be an address as : 
925e			;     returned by malloc, otherwise the behaviour is undefined.               : 
925e			;                                                                             : 
925e			;     Where possible, directly adjacent free blocks will be merged together   : 
925e			;     into larger blocks to help ensure that the heap does not become         : 
925e			;     excessively fragmented.                                                 : 
925e			;                                                                             : 
925e			;     free does not clear or set any other value into the freed space, and    : 
925e			;     therefore its contents may be visible through subsequent malloc's. The  : 
925e			;     caller should clear the freed space as required.                        : 
925e			;                                                                             : 
925e			;     This implementation of free uses the stack exclusively, and is          : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling free, and recommended    : 
925e			;     to avoid the use of free inside ISRs in general.                        : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Pointer to address of first byte of allocation to be freed          : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			free: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if ptr is null 
925e			      or    L 
925e			      jp    Z, free_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; The address in HL points to the start of the useable allocated space, 
925e			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
925e			      ; address of the block itself. 
925e			      ex    DE, HL 
925e			      ld    DE, -4 
925e			      add   HL, DE 
925e			 
925e			      ; An allocated block must have a null next block pointer in it 
925e			      ld    A, (HL) 
925e			      inc   HL 
925e			      or    (HL) 
925e			      jp    NZ, free_done 
925e			 
925e			      dec   HL 
925e			 
925e			      ld    B, H                    ; Copy HL to BC 
925e			      ld    C, L 
925e			 
925e			      ; Loop through the free list to find the first block with an address 
925e			      ; higher than the block being freed 
925e			      ld    HL, free_list 
925e			 
925e			free_find_higher_block: 
925e			      ld    E, (HL)                 ; Load next ptr from free block 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			 
925e			      ld    (IX+0), E               ; Save ptr to next free block 
925e			      ld    (IX+1), D 
925e			      ld    (IX+2), L               ; Save ptr to prev free block 
925e			      ld    (IX+3), H 
925e			 
925e			      ld    A, B                    ; Check if DE is greater than BC 
925e			      cp    D                       ; Compare MSB first 
925e			      jr    Z, $+4                  ; MSB the same, compare LSB 
925e			      jr    NC, free_find_higher_block_skip 
925e			      ld    A, C 
925e			      cp    E                       ; Then compare LSB 
925e			      jr    C, free_found_higher_block 
925e			 
925e			free_find_higher_block_skip: 
925e			      ld    A, D                    ; Reached the end of the free list? 
925e			      or    E 
925e			      jp    Z, free_done 
925e			 
925e			      ex    DE, HL 
925e			 
925e			      jr    free_find_higher_block 
925e			 
925e			free_found_higher_block: 
925e			      ; Insert freed block between prev and next free blocks 
925e			      ld    (HL), C                 ; Point prev free block to freed block 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			 
925e			      ld    H, B                    ; Point freed block at next free block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Check if the freed block is adjacent to the next free block 
925e			      inc   HL                      ; Load size of freed block into HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      add   HL, BC                  ; Add addr of freed block and its size 
925e			 
925e			      ld    E, (IX+0)               ; Load addr of next free block into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_check_adjacent_to_prev 
925e			 
925e			      ; Freed block is adjacent to next, merge into one bigger block 
925e			      ex    DE, HL                  ; Load next ptr from next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save ptr to next block for later 
925e			 
925e			      ld    H, B                    ; Store ptr from next block into freed block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore ptr to next block 
925e			      inc   HL                      ; Load size of next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save next block size for later 
925e			 
925e			      ld    H, B                    ; Load size of freed block into HL 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      pop   DE                      ; Restore size of next block 
925e			      add   HL, DE                  ; Add sizes of both blocks 
925e			      ex    DE, HL 
925e			 
925e			      ld    H, B                    ; Store new bigger size into freed block 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_check_adjacent_to_prev: 
925e			      ; Check if the freed block is adjacent to the prev free block 
925e			      ld    L, (IX+2)               ; Prev free block ptr into HL 
925e			      ld    H, (IX+3) 
925e			 
925e			      inc   HL                      ; Size of prev free block into DE 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      add   HL, DE                  ; Add prev block addr and size 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_done 
925e			 
925e			      ; Freed block is adjacent to prev, merge into one bigger block 
925e			      ld    H, B                    ; Load next ptr from freed block into DE 
925e			      ld    L, C 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save freed block ptr for later 
925e			 
925e			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
925e			      ld    H, (IX+3) 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore freed block ptr 
925e			      inc   HL                      ; Load size of freed block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save freed block size for later 
925e			 
925e			      ld    L, (IX+2)               ; Load size of prev block into DE 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      pop   HL                      ; Add sizes of both blocks 
925e			      add   HL, DE 
925e			      ex    DE, HL 
925e			 
925e			      ld    L, (IX+2)               ; Store new bigger size into prev block 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_done: 
925e			      ld    HL, 4                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			free_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;      .org 0x8000 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			 ;                 .dw   0 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_4 
925e			 
925e			; My memory allocation code. Very very simple.... 
925e			; allocate space under 250 chars 
925e			 
925e			heap_init: 
925e				; init start of heap as zero 
925e				;  
925e			 
925e				ld hl, heap_start 
925e				ld a, 0 
925e				ld (hl), a      ; empty block 
925e				inc hl 
925e				ld a, 0 
925e				ld (hl), a      ; length of block 
925e				; write end of list 
925e				inc hl 
925e				ld a,(hl) 
925e				inc hl 
925e				ld a,(hl) 
925e				 
925e			 
925e				; init some malloc vars 
925e			 
925e				ld hl, 0 
925e				ld (free_list), hl       ; store last malloc location 
925e			 
925e				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
925e				ld a, 0 
925e				ld (hl), a 
925e			 
925e			 
925e				ld hl, heap_start 
925e				;  
925e				  
925e				ret 
925e			 
925e			 
925e			;    free block marker 
925e			;    requested size  
925e			;    pointer to next block 
925e			;    .... 
925e			;    next block marker 
925e			 
925e			 
925e			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
925e			; 
925e			 
925e			 
925e			malloc:  
925e				push de 
925e				push bc 
925e				push af 
925e			 
925e				; hl space required 
925e				 
925e				ld c, l    ; hold space   (TODO only a max of 255) 
925e			 
925e			;	inc c     ; TODO BUG need to fix memory leak on push str 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			 
925e			 
925e			 
925e				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
925e			 
925e				ld a, (free_list+3) 
925e				cp 0 
925e				jr z, .contheap 
925e			 
925e				ld hl, (free_list)     ; get last alloc 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mrs" 
925e						CALLMONITOR 
925e					endif 
925e				jr .startalloc 
925e			 
925e			.contheap: 
925e				ld hl, heap_start 
925e			 
925e			.startalloc: 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mym" 
925e						CALLMONITOR 
925e					endif 
925e			.findblock: 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmf" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e				ld a,(hl)  
925e				; if byte is zero then clear to use 
925e			 
925e				cp 0 
925e				jr z, .foundemptyblock 
925e			 
925e				; if byte is not clear 
925e				;     then byte is offset to next block 
925e			 
925e				inc hl 
925e				ld a, (hl) ; get size 
925e			.nextblock:	inc hl 
925e					ld e, (hl) 
925e					inc hl 
925e					ld d, (hl) 
925e					ex de, hl 
925e			;	inc hl  ; move past the store space 
925e			;	inc hl  ; move past zero index  
925e			 
925e				; TODO detect no more space 
925e			 
925e				push hl 
925e				ld de, heap_end 
925e				call cmp16 
925e				pop hl 
925e				jr nc, .nospace 
925e			 
925e				jr .findblock 
925e			 
925e			.nospace: ld hl, 0 
925e				jp .exit 
925e			 
925e			 
925e			.foundemptyblock:	 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mme" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; TODO has block enough space if reusing??? 
925e			 
925e				;  
925e			 
925e			; see if this block has been previously used 
925e				inc hl 
925e				ld a, (hl) 
925e				dec hl 
925e				cp 0 
925e				jr z, .newblock 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meR" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; no reusing previously allocated block 
925e			 
925e			; is it smaller than previously used? 
925e				 
925e				inc hl    ; move to size 
925e				ld a, c 
925e				sub (hl)        ; we want c < (hl) 
925e				dec hl    ; move back to marker 
925e			        jr z, .findblock 
925e			 
925e				; update with the new size which should be lower 
925e			 
925e			        ;inc  hl   ; negate next move. move back to size  
925e			 
925e			.newblock: 
925e				; need to be at marker here 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meN" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			 
925e				ld a, c 
925e			 
925e				ld (free_list+3), a	 ; flag resume from last malloc  
925e				ld (free_list), hl    ; save out last location 
925e			 
925e			 
925e				;inc a     ; space for length byte 
925e				ld (hl), a     ; save block in use marker 
925e			 
925e				inc hl   ; move to space marker 
925e				ld (hl), a    ; save new space 
925e			 
925e				inc hl   ; move to start of allocated area 
925e				 
925e			;	push hl     ; save where we are - 1  
925e			 
925e			;	inc hl  ; move past zero index  
925e				; skip space to set down new marker 
925e			 
925e				; provide some extra space for now 
925e			 
925e				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
925e				inc a 
925e				inc a 
925e			 
925e				push hl   ; save where we are in the node block 
925e			 
925e				call addatohl 
925e			 
925e				; write linked list point 
925e			 
925e				pop de     ; get our node position 
925e				ex de, hl 
925e			 
925e				ld (hl), e 
925e				inc hl 
925e				ld (hl), d 
925e			 
925e				inc hl 
925e			 
925e				; now at start of allocated data so save pointer 
925e			 
925e				push hl 
925e			 
925e				; jump to position of next node and setup empty header in DE 
925e			 
925e				ex de, hl 
925e			 
925e			;	inc hl ; move past end of block 
925e			 
925e				ld a, 0 
925e				ld (hl), a   ; empty marker 
925e				inc hl 
925e				ld (hl), a   ; size 
925e				inc hl  
925e				ld (hl), a   ; ptr 
925e				inc hl 
925e				ld (hl), a   ; ptr 
925e			 
925e			 
925e				pop hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmr" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			.exit: 
925e				pop af 
925e				pop bc 
925e				pop de  
925e				ret 
925e			 
925e			 
925e			 
925e			 
925e			free:  
925e				push hl 
925e				push af 
925e				; get address in hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "fre" 
925e						CALLMONITOR 
925e					endif 
925e				; data is at hl - move to block count 
925e				dec hl 
925e				dec hl    ; get past pointer 
925e				dec hl 
925e			 
925e				ld a, (hl)    ; need this for a validation check 
925e			 
925e				dec hl    ; move to block marker 
925e			 
925e				; now check that the block count and block marker are the same  
925e			        ; this checks that we are on a malloc node and not random memory 
925e			        ; OK a faint chance this could be a problem but rare - famous last words! 
925e			 
925e				ld c, a 
925e				ld a, (hl)    
925e			 
925e				cp c 
925e				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
925e			 
925e				; yes good chance we are on a malloc node 
925e			 
925e				ld a, 0      
925e				ld (hl), a   ; mark as free 
925e			 
925e				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
925e			 
925e			.freeignore:  
925e			 
925e				pop af 
925e				pop hl 
925e			 
925e				ret 
925e			 
925e			 
925e			 
925e			endif 
925e			 
925e			; eof 
# End of file firmware_memory.asm
925e			  
925e			; device C  
925e			; Now handled by SPI  
925e			;if SOUND_ENABLE  
925e			;	include "firmware_sound.asm"  
925e			;endif  
925e			  
925e			include "firmware_diags.asm"  
925e			; Hardware diags menu 
925e			 
925e			 
925e			config: 
925e			 
925e 3e 00			ld a, 0 
9260 21 84 92			ld hl, .configmn 
9263 cd ee 8a			call menu 
9266			 
9266 fe 00			cp 0 
9268 c8				ret z 
9269			 
9269			;	cp 1 
9269			;	call z, .savetostore 
9269			 
9269 fe 01			cp 1 
926b			if STARTUP_V1 
926b cc 9a 92			call z, .selautoload 
926e			endif 
926e			 
926e			if STARTUP_V2 
926e				call z, .enautoload 
926e			endif 
926e fe 02			cp 2 
9270 cc 90 92			call z, .disautoload 
9273			;	cp 3 
9273			;	call z, .selbank 
9273 fe 03			cp 3 
9275 cc b8 92			call z, .debug_tog 
9278 fe 04			cp 4 
927a cc 06 94			call z, .bpsgo 
927d fe 05			cp 5 
927f cc e1 92			call z, hardware_diags 
9282			if STARTUP_V2 
9282				cp 6 
9282				call z, create_startup 
9282			endif 
9282 18 da			jr config 
9284			 
9284			.configmn: 
9284			;	dw prom_c3 
9284 f4 95			dw prom_c2 
9286 09 96			dw prom_c2a 
9288			;	dw prom_c2b 
9288			;	dw prom_c4 
9288 28 96			dw prom_m4 
928a 43 96			dw prom_m4b 
928c 4b 96			dw prom_c1 
928e			if STARTUP_V2 
928e				dw prom_c9 
928e			endif 
928e 00 00			dw 0 
9290				 
9290			 
9290			if STARTUP_V2 
9290			.enautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 1 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290				ld hl, prom_notav 
9290				ld de, prom_empty 
9290				call info_panel 
9290				endif 
9290			 
9290			 
9290				ret 
9290			endif 
9290			 
9290			.disautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 0 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290 21 5a 96			ld hl, prom_notav 
9293 11 70 96			ld de, prom_empty 
9296 cd 4e 8a			call info_panel 
9299				endif 
9299			 
9299			 
9299 c9				ret 
929a			 
929a			if STARTUP_V1 
929a			 
929a			; Select auto start 
929a			 
929a			.selautoload: 
929a			 
929a				 
929a				if STORAGE_SE 
929a			 
929a					call config_dir 
929a				        ld hl, scratch 
929a					ld a, 0 
929a					call menu 
929a			 
929a					cp 0 
929a					ret z 
929a			 
929a					dec a 
929a			 
929a			 
929a					; locate menu option 
929a			 
929a					ld hl, scratch 
929a					call table_lookup 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALl" 
929a						CALLMONITOR 
929a					endif 
929a					; with the pointer to the menu it, the byte following the zero term is the file id 
929a			 
929a					ld a, 0 
929a					ld bc, 50   ; max of bytes to look at 
929a					cpir  
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALb" 
929a						CALLMONITOR 
929a					endif 
929a					;inc hl 
929a			 
929a					ld a, (hl)   ; file id 
929a					 
929a				        ; save bank and file ids 
929a			 
929a					push af 
929a			 
929a			; TODO need to save to block 0 on bank 1	 
929a			 
929a					call storage_get_block_0 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "AL0" 
929a						CALLMONITOR 
929a					endif 
929a					pop af 
929a			 
929a					ld (store_page+STORE_0_FILERUN),a 
929a					 
929a					; save bank id 
929a			 
929a					ld a,(spi_device) 
929a					ld (store_page+STORE_0_BANKRUN),a 
929a			 
929a					; enable auto run of store file 
929a			 
929a					ld a, 1 
929a					ld (store_page+STORE_0_AUTOFILE),a 
929a			 
929a					; save buffer 
929a			 
929a					ld hl, 0 
929a					ld de, store_page 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALw" 
929a						CALLMONITOR 
929a					endif 
929a				call storage_write_block	 ; save update 
929a			  
929a			 
929a			 
929a			 
929a					ld hl, scratch 
929a					call config_fdir 
929a			 
929a				else 
929a			 
929a 21 5a 96			ld hl, prom_notav 
929d 11 70 96			ld de, prom_empty 
92a0 cd 4e 8a			call info_panel 
92a3			 
92a3				endif 
92a3 c9				ret 
92a4			endif 
92a4			 
92a4			 
92a4			; Select storage bank 
92a4			 
92a4			.selbank: 
92a4			 
92a4			;	if STORAGE_SE 
92a4			;	else 
92a4			 
92a4 21 5a 96			ld hl, prom_notav 
92a7 11 70 96			ld de, prom_empty 
92aa cd 4e 8a			call info_panel 
92ad			;	endif 
92ad				 
92ad c9				ret 
92ae			 
92ae			if STORAGE_SE 
92ae			 
92ae			.config_ldir:   
92ae				; Load storage bank labels into menu array 
92ae			 
92ae				 
92ae			 
92ae			 
92ae				ret 
92ae			 
92ae			 
92ae			endif 
92ae			 
92ae			 
92ae			; Save user words to storage 
92ae			 
92ae			.savetostore: 
92ae			 
92ae			;	if STORAGE_SE 
92ae			; 
92ae			;		call config_dir 
92ae			;	        ld hl, scratch 
92ae			;		ld a, 0 
92ae			;		call menu 
92ae			;		 
92ae			;		ld hl, scratch 
92ae			;		call config_fdir 
92ae			; 
92ae			;	else 
92ae			 
92ae 21 5a 96			ld hl, prom_notav 
92b1 11 70 96			ld de, prom_empty 
92b4 cd 4e 8a			call info_panel 
92b7			 
92b7			;	endif 
92b7			 
92b7 c9				ret 
92b8			 
92b8			if STARTUP_V2 
92b8			 
92b8			create_startup: 
92b8			 
92b8				ld a, 0 
92b8				ld hl, .crstart 
92b8				call menu 
92b8			 
92b8				cp 0 
92b8				ret z 
92b8			 
92b8				cp 1 
92b8				call z, .genlsword 
92b8				cp 2 
92b8				call z, .genedword 
92b8			 
92b8				cp 3 
92b8				call z, .gendemword 
92b8			 
92b8				cp 4 
92b8				call z, .genutlword 
92b8				cp 5 
92b8				call z, .genspiword 
92b8				cp 6 
92b8				call z, .genkeyword 
92b8				cp 7 
92b8				call z, .gensoundword 
92b8				cp 7 
92b8				call z, .genhwword 
92b8				jr create_startup 
92b8			 
92b8			.genhwword: 
92b8				ld hl, crs_hw 
92b8				ld de, .hwworddef 
92b8				call .genfile 
92b8				ret 
92b8			.gensoundword: 
92b8				ld hl, crs_sound 
92b8				ld de, .soundworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genlsword: 
92b8				ld hl, crs_s1 
92b8				ld de, .lsworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genedword: 
92b8				ld de, .edworddef 
92b8				ld hl, crs_s2 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.gendemword: 
92b8				ld de, .demoworddef 
92b8				ld hl, crs_s3 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genutlword: 
92b8				ld hl, crs_s4 
92b8				ld de, .utilwordef 
92b8				call .genfile 
92b8				ret 
92b8			.genspiword: 
92b8				ld hl, crs_s5 
92b8				ld de, .spiworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genkeyword: 
92b8				ld hl, crs_s6 
92b8				ld de, .keyworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			; hl - points to file name 
92b8			; de - points to strings to add to file 
92b8			 
92b8			.genfile: 
92b8				push hl 
92b8				push de 
92b8			 
92b8				call clear_display 
92b8				ld a, display_row_1 
92b8				ld de, .genfiletxt 
92b8				call str_at_display 
92b8				call update_display 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8			 
92b8				push de 
92b8				call storage_create 
92b8				; id in hl 
92b8				pop de   ; table of strings to add 
92b8			 
92b8			.genloop: 
92b8			 
92b8				push hl ; save id for next time around 
92b8				push de ; save de for next time around 
92b8			 
92b8				ex de, hl 
92b8				call loadwordinhl 
92b8				ex de, hl 
92b8			 
92b8				; need hl to be the id 
92b8				; need de to be the string ptr 
92b8				 
92b8				call storage_append 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8				inc de 
92b8				inc de 
92b8			 
92b8				ld a,(de) 
92b8				cp 0 
92b8				jr nz, .genloop 
92b8				inc de 
92b8				ld a, (de) 
92b8				dec de 
92b8				cp 0 
92b8				jr nz, .genloop	 
92b8			 
92b8				ret 
92b8			 
92b8			.genfiletxt:  db "Creating file...",0 
92b8			 
92b8			.hwworddef: 
92b8				dw test5 
92b8				dw test6 
92b8				dw test7 
92b8				dw test8 
92b8				dw test9 
92b8				dw test10 
92b8				dw 0 
92b8			 
92b8			.soundworddef: 
92b8				dw sound1 
92b8				dw sound2 
92b8				dw sound3 
92b8				dw sound4 
92b8				dw sound5 
92b8				dw sound6 
92b8				dw sound7 
92b8				dw sound8 
92b8				dw sound9 
92b8				dw 0 
92b8			 
92b8			.utilwordef: 
92b8				dw strncpy 
92b8				dw type 
92b8				dw clrstack 
92b8				dw longread 
92b8				dw start1 
92b8				dw start2 
92b8			; duplicated 
92b8			;	dw start3b 
92b8			;	dw start3c 
92b8				dw list 
92b8				dw 0 
92b8			 
92b8			.lsworddef: 
92b8				dw start3b 
92b8				dw 0 
92b8			 
92b8			.edworddef: 
92b8				dw edit1 
92b8				dw edit2 
92b8				dw edit3 
92b8				dw 0 
92b8			 
92b8			.demoworddef: 
92b8				dw game1 
92b8				dw game1a 
92b8				dw game1b 
92b8				dw game1c 
92b8				dw game1d 
92b8				dw game1s 
92b8				dw game1t 
92b8				dw game1f 
92b8				dw game1z 
92b8				dw game1zz 
92b8				dw ssv2 
92b8				dw ssv3 
92b8				dw ssv4 
92b8				dw ssv5 
92b8				dw ssv1 
92b8				dw ssv1cpm	 
92b8			;	dw game2b 
92b8			;	dw game2bf 
92b8			;	dw game2mba 
92b8			;	dw game2mbas	 
92b8			;	dw game2mbht 
92b8			;	dw game2mbms 
92b8			;	dw game2mb 
92b8			;	dw game3w 
92b8			;	dw game3p 
92b8			;	dw game3sc 
92b8			;	dw game3vsi 
92b8			;	dw game3vs 
92b8				dw 0 
92b8			 
92b8			 
92b8			.spiworddef: 
92b8			 
92b8			    dw spi1 
92b8			    dw spi2 
92b8			    dw spi2b 
92b8			    dw spi3 
92b8			    dw spi4 
92b8			    dw spi5 
92b8			;    dw spi6 
92b8			;    dw spi7 
92b8			 
92b8			;    dw spi8 
92b8			;    dw spi9 
92b8			;    dw spi10 
92b8			    dw 0 
92b8			 
92b8			.keyworddef: 
92b8			 
92b8				dw keyup 
92b8				dw keydown 
92b8				dw keyleft 
92b8				dw keyright 
92b8				dw 	keyf1 
92b8				dw keyf2 
92b8				dw keyf3 
92b8				dw keyf4 
92b8				dw keyf5 
92b8				dw keyf6 
92b8				dw keyf7 
92b8				dw keyf8 
92b8				dw keyf9 
92b8				dw keyf10 
92b8				dw keyf11 
92b8				dw keyf12 
92b8				dw keytab 
92b8				dw keycr 
92b8				dw keyhome 
92b8				dw keyend 
92b8				dw keybs 
92b8				dw 0 
92b8			 
92b8			.crstart: 
92b8				dw crs_s1 
92b8				dw crs_s2 
92b8				dw crs_s3 
92b8				dw crs_s4 
92b8				dw crs_s5 
92b8				dw crs_s6 
92b8				dw crs_sound 
92b8				dw crs_hw 
92b8				dw 0 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			if STORAGE_SE 
92b8			 
92b8			config_fdir: 
92b8				; using the scratch dir go through and release the memory allocated for each string 
92b8				 
92b8				ld hl, scratch 
92b8			.cfdir:	ld e,(hl) 
92b8				inc hl 
92b8				ld d,(hl) 
92b8				inc hl 
92b8			 
92b8				ex de, hl 
92b8				call ishlzero 
92b8				ret z     ; return on null pointer 
92b8				call free 
92b8				ex de, hl 
92b8				jr .cfdir 
92b8			 
92b8			 
92b8				ret 
92b8			 
92b8			 
92b8			config_dir: 
92b8			 
92b8				; for the config menus that need to build a directory of storage call this routine 
92b8				; it will construct a menu in scratch to pass to menu 
92b8			 
92b8				; open storage device 
92b8			 
92b8				; execute DIR to build a list of files and their ids into scratch in menu format 
92b8				; once the menu has finished then will need to call config_fdir to release the strings 
92b8				 
92b8				; c = number items 
92b8			 
92b8				 
92b8				call storage_get_block_0 
92b8			 
92b8				ld hl, store_page     ; get current id count 
92b8				ld b, (hl) 
92b8				ld c, 0    ; count of files   
92b8			 
92b8			 
92b8				ld hl, scratch 
92b8				ld (store_tmp2), hl    ; location to poke strings 
92b8			 
92b8				; check for empty drive 
92b8			 
92b8				ld a, 0 
92b8				cp b 
92b8				jp z, .dirdone 
92b8			 
92b8				 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdc" 
92b8						CALLMONITOR 
92b8					endif 
92b8			 
92b8			 
92b8			.diritem:	 
92b8				push bc 
92b8				; for each of the current ids do a search for them and if found push to stack 
92b8			 
92b8					ld hl, STORE_BLOCK_PHY 
92b8					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92b8					ld e,b 
92b8			 
92b8					call storage_findnextid 
92b8			 
92b8			 
92b8					; if found hl will be non zero 
92b8			 
92b8					call ishlzero 
92b8					jr z, .dirnotfound 
92b8			 
92b8					; increase count 
92b8			 
92b8					pop bc	 
92b8					inc c 
92b8					push bc 
92b8					 
92b8			 
92b8					; get file header and push the file name 
92b8			 
92b8					ld de, store_page 
92b8					call storage_read_block 
92b8			 
92b8					; push file id to stack 
92b8				 
92b8					ld a, (store_page) 
92b8					ld h, 0 
92b8					ld l, a 
92b8			 
92b8					;call forth_push_numhl 
92b8					; TODO store id 
92b8			 
92b8					push hl 
92b8			 
92b8					; push extent count to stack  
92b8				 
92b8					ld hl, store_page+3 
92b8			 
92b8					; get file name length 
92b8			 
92b8					call strlenz   
92b8			 
92b8					inc hl   ; cover zero term 
92b8					inc hl  ; stick the id at the end of the area 
92b8			 
92b8					push hl 
92b8					pop bc    ; move length to bc 
92b8			 
92b8					call malloc 
92b8			 
92b8					; TODO save malloc area to scratch 
92b8			 
92b8					ex de, hl 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), e 
92b8					inc hl 
92b8					ld (hl), d 
92b8					inc hl 
92b8					ld (store_tmp2), hl 
92b8			 
92b8					 
92b8			 
92b8					;pop hl   ; get source 
92b8			;		ex de, hl    ; swap aronund	 
92b8			 
92b8					ld hl, store_page+3 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "CFd" 
92b8						CALLMONITOR 
92b8					endif 
92b8					ldir 
92b8			 
92b8					; de is past string, move back one and store id 
92b8					 
92b8					dec de 
92b8			 
92b8					; store file id 
92b8			 
92b8					pop hl 
92b8					ex de,hl 
92b8					ld (hl), e 
92b8			 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdi" 
92b8						CALLMONITOR 
92b8					endif 
92b8					 
92b8			.dirnotfound: 
92b8					pop bc     
92b8					djnz .diritem 
92b8				 
92b8			.dirdone:	 
92b8			 
92b8					ld a, 0 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), a 
92b8					inc hl 
92b8					ld (hl), a 
92b8					inc hl 
92b8					; push a count of the dir items found 
92b8			 
92b8			;		ld h, 0 
92b8			;		ld l, c 
92b8			 
92b8				ret 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			; Settings 
92b8			; Run  
92b8			 
92b8			 
92b8			 
92b8			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92b8			;;hd_menu2:   db "        2: Editor",0   
92b8			;hd_menu2:   db "        2: Editor       6: Menu",0   
92b8			;hd_menu3:   db "        3: Storage",0 
92b8			;hd_menu4:   db "0=quit  4: Debug",0 
92b8			;hd_don:     db "ON",0 
92b8			;hd_doff:     db "OFF",0 
92b8			; 
92b8			; 
92b8			; 
92b8			;hardware_diags_old:       
92b8			; 
92b8			;.diagmenu: 
92b8			;	call clear_display 
92b8			;	ld a, display_row_1 
92b8			;	ld de, hd_menu1 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_2 
92b8			;	ld de, hd_menu2 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_3 
92b8			;	ld de, hd_menu3 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a,  display_row_4 
92b8			;	ld de, hd_menu4 
92b8			;	call str_at_display 
92b8			; 
92b8			;	; display debug state 
92b8			; 
92b8			;	ld de, hd_don 
92b8			;	ld a, (os_view_disable) 
92b8			;	cp 0 
92b8			;	jr z, .distog 
92b8			;	ld de, hd_doff 
92b8			;.distog: ld a, display_row_4+17 
92b8			;	call str_at_display 
92b8			; 
92b8			;	call update_display 
92b8			; 
92b8			;	call cin_wait 
92b8			; 
92b8			; 
92b8			; 
92b8			;	cp '4' 
92b8			;	jr nz, .diagn1 
92b8			; 
92b8			;	; debug toggle 
92b8			; 
92b8			;	ld a, (os_view_disable) 
92b8			;	ld b, '*' 
92b8			;	cp 0 
92b8			;	jr z, .debtog 
92b8			;	ld b, 0 
92b8			;.debtog:	 
92b8			;	ld a,b 
92b8			;	ld (os_view_disable),a 
92b8			; 
92b8			;.diagn1: cp '0' 
92b8			;	 ret z 
92b8			; 
92b8			;;	cp '1' 
92b8			;;       jp z, matrix	 
92b8			;;   TODO keyboard matrix test 
92b8			; 
92b8			;	cp '2' 
92b8			;	jp z, .diagedit 
92b8			; 
92b8			;;	cp '6' 
92b8			;;	jp z, .menutest 
92b8			;;if ENABLE_BASIC 
92b8			;;	cp '6' 
92b8			;;	jp z, basic 
92b8			;;endif 
92b8			 ; 
92b8			;	jp .diagmenu 
92b8			; 
92b8			; 
92b8			;	ret 
92b8			 
92b8			 
92b8			.debug_tog: 
92b8 21 02 93			ld hl, .menudebug 
92bb				 
92bb			;	ld a, (os_view_disable) 
92bb			;	cp '*' 
92bb 3a 6f ee			ld a,(debug_vector) 
92be fe c9			cp $C9   ; RET 
92c0 20 04			jr nz,.tdon  
92c2 3e 01			ld a, 1 
92c4 18 02			jr .tog1 
92c6 3e 00		.tdon: ld a, 0 
92c8			 
92c8			.tog1: 
92c8 cd ee 8a			call menu 
92cb fe 00			cp 0 
92cd c8				ret z 
92ce fe 01			cp 1    ; disable debug 
92d0 28 04			jr z, .dtog0 
92d2 3e 2a			ld a, '*' 
92d4 18 05			jr .dtogset 
92d6			.dtog0:  
92d6				;ld a, 0 
92d6 cd f4 93			call bp_on 
92d9 18 dd			jr .debug_tog 
92db			.dtogset:  
92db				; ld (os_view_disable), a 
92db cd 00 94			call bp_off 
92de c3 b8 92			jp .debug_tog 
92e1			 
92e1			 
92e1			hardware_diags:       
92e1			 
92e1			.diagm: 
92e1 21 f4 92			ld hl, .menuitems 
92e4 3e 00			ld a, 0 
92e6 cd ee 8a			call menu 
92e9			 
92e9 fe 00		         cp 0 
92eb c8				 ret z 
92ec			 
92ec fe 02			cp 2 
92ee ca 4d 93			jp z, .diagedit 
92f1			 
92f1			;	cp '6' 
92f1			;	jp z, .menutest 
92f1			;if ENABLE_BASIC 
92f1			;	cp '6' 
92f1			;	jp z, basic 
92f1			;endif 
92f1			  
92f1 c3 e1 92			jp .diagm 
92f4			 
92f4				 
92f4 08 93		.menuitems:   	dw .m1 
92f6 13 93				dw .m2 
92f8 1a 93				dw .m3 
92fa 22 93				dw .m5 
92fc 28 93				dw .m5a 
92fe 31 93				dw .m5b 
9300 00 00				dw 0 
9302			 
9302			.menudebug: 
9302 3a 93				dw .m6 
9304 43 93				dw .m7 
9306 00 00				dw 0 
9308			 
9308 .. 00		.m1:   db "Key Matrix",0 
9313 .. 00		.m2:   db "Editor",0 
931a .. 00		.m3:   db "Storage",0 
9322 .. 00		.m5:   db "Sound",0 
9328 .. 00		.m5a:  db "RAM Test",0 
9331 .. 00		.m5b:  db "LCD Test",0 
933a			 
933a .. 00		.m6:   db "Debug ON",0 
9343 .. 00		.m7:   db "Debug OFF",0 
934d			 
934d			; debug editor 
934d			 
934d			.diagedit: 
934d			 
934d 21 bb e2			ld hl, scratch 
9350			;	ld bc, 250 
9350			;	ldir 
9350				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9350 3e 00			ld a, 0 
9352 77				ld (hl), a 
9353 23				inc hl 
9354 77				ld (hl), a 
9355 23				inc hl 
9356 77				ld (hl), a 
9357			 
9357 cd bd 8a		        call clear_display 
935a cd e0 8a			call update_display 
935d				;ld a, 1 
935d				;ld (hardware_diag), a 
935d			.diloop: 
935d 3e 00			ld a, display_row_1 
935f 0e 00			ld c, 0 
9361 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9363 1e 28			ld e, 40 
9365			 
9365 21 bb e2			ld hl, scratch	 
9368 cd 17 8d			call input_str 
936b			 
936b 3e 28			ld a, display_row_2 
936d 11 bb e2			ld de, scratch 
9370 cd d0 8a			call str_at_display 
9373 cd e0 8a			call update_display 
9376			 
9376 c3 5d 93			jp .diloop 
9379			 
9379			 
9379			; pass word in hl 
9379			; a has display location 
9379			display_word_at: 
9379 f5				push af 
937a e5				push hl 
937b 7c				ld a,h 
937c 21 c0 e5			ld hl, os_word_scratch 
937f cd f3 8e			call hexout 
9382 e1				pop hl 
9383 7d				ld a,l 
9384 21 c2 e5			ld hl, os_word_scratch+2 
9387 cd f3 8e			call hexout 
938a 21 c4 e5			ld hl, os_word_scratch+4 
938d 3e 00			ld a,0 
938f 77				ld (hl),a 
9390 11 c0 e5			ld de,os_word_scratch 
9393 f1				pop af 
9394 cd d0 8a				call str_at_display 
9397 c9				ret 
9398			 
9398			display_ptr_state: 
9398			 
9398				; to restore afterwards 
9398			 
9398 d5				push de 
9399 c5				push bc 
939a e5				push hl 
939b f5				push af 
939c			 
939c				; for use in here 
939c			 
939c			;	push bc 
939c			;	push de 
939c			;	push hl 
939c			;	push af 
939c			 
939c cd bd 8a			call clear_display 
939f			 
939f 11 77 95			ld de, .ptrstate 
93a2 3e 00			ld a, display_row_1 
93a4 cd d0 8a			call str_at_display 
93a7			 
93a7				; display debug step 
93a7			 
93a7			 
93a7 11 65 ee			ld de, debug_mark 
93aa 3e 26			ld a, display_row_1+display_cols-2 
93ac cd d0 8a			call str_at_display 
93af			 
93af				; display a 
93af 11 81 95			ld de, .ptrcliptr 
93b2 3e 28			ld a, display_row_2 
93b4 cd d0 8a			call str_at_display 
93b7			 
93b7 f1				pop af 
93b8 2a 3a ea			ld hl,(cli_ptr) 
93bb 3e 30			ld a, display_row_2+8 
93bd cd 79 93			call display_word_at 
93c0			 
93c0			 
93c0				; display hl 
93c0			 
93c0			 
93c0 11 89 95			ld de, .ptrclioptr 
93c3 3e 32			ld a, display_row_2+10 
93c5 cd d0 8a			call str_at_display 
93c8			; 
93c8			;	pop hl 
93c8 3e 35			ld a, display_row_2+13 
93ca 2a 38 ea			ld hl,(cli_origptr) 
93cd cd 79 93			call display_word_at 
93d0			; 
93d0			;	 
93d0			;	; display de 
93d0			 
93d0			;	ld de, .regstatede 
93d0			;	ld a, display_row_3 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop de 
93d0			;	ld h,d 
93d0			;	ld l, e 
93d0			;	ld a, display_row_3+3 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display bc 
93d0			 
93d0			;	ld de, .regstatebc 
93d0			;	ld a, display_row_3+10 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop bc 
93d0			;	ld h,b 
93d0			;	ld l, c 
93d0			;	ld a, display_row_3+13 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display dsp 
93d0			 
93d0			;	ld de, .regstatedsp 
93d0			;	ld a, display_row_4 
93d0			;	call str_at_display 
93d0			 
93d0				 
93d0			;	ld hl,(cli_data_sp) 
93d0			;	ld a, display_row_4+4 
93d0			;	call display_word_at 
93d0			 
93d0				; display rsp 
93d0			 
93d0 11 b8 95			ld de, .regstatersp 
93d3 3e 82			ld a, display_row_4+10 
93d5 cd d0 8a			call str_at_display 
93d8			 
93d8				 
93d8 2a ec e9			ld hl,(cli_ret_sp) 
93db 3e 86			ld a, display_row_4+14 
93dd cd 79 93			call display_word_at 
93e0			 
93e0 cd e0 8a			call update_display 
93e3			 
93e3 cd 00 8a			call delay1s 
93e6 cd 00 8a			call delay1s 
93e9 cd 00 8a			call delay1s 
93ec			 
93ec			 
93ec cd fd 99			call next_page_prompt 
93ef			 
93ef				; restore  
93ef			 
93ef f1				pop af 
93f0 e1				pop hl 
93f1 c1				pop bc 
93f2 d1				pop de 
93f3 c9				ret 
93f4			 
93f4			; Update the break point vector so that the user can hook a new routine 
93f4			 
93f4			bp_on: 
93f4 3e c3			ld a, $c3    ; JP 
93f6 32 6f ee			ld (debug_vector), a 
93f9 21 06 94			ld hl, break_point_state 
93fc 22 70 ee			ld (debug_vector+1), hl 
93ff c9				ret 
9400			 
9400			bp_off: 
9400 3e c9			ld a, $c9    ; RET 
9402 32 6f ee			ld (debug_vector), a 
9405 c9				ret 
9406			 
9406			 
9406			break_point_state: 
9406			;	push af 
9406			; 
9406			;	; see if disabled 
9406			; 
9406			;	ld a, (os_view_disable) 
9406			;	cp '*' 
9406			;	jr nz, .bpsgo 
9406			;	pop af 
9406			;	ret 
9406			 
9406			.bpsgo: 
9406			;	pop af 
9406 f5				push af 
9407 22 9d e2			ld (os_view_hl), hl 
940a ed 53 9b e2		ld (os_view_de), de 
940e ed 43 99 e2		ld (os_view_bc), bc 
9412 e5				push hl 
9413 6f				ld l, a 
9414 26 00			ld h, 0 
9416 22 9f e2			ld (os_view_af),hl 
9419			 
9419 21 ab ed				ld hl, display_fb0 
941c 22 c6 eb				ld (display_fb_active), hl 
941f e1				pop hl	 
9420			 
9420 3e 31			ld a, '1' 
9422 fe 2a		.bps1:  cp '*' 
9424 cc 00 94			call z, bp_off 
9427			;	jr nz, .bps1b 
9427			;	ld (os_view_disable),a 
9427 fe 31		.bps1b:  cp '1' 
9429 20 14			jr nz, .bps2 
942b			 
942b				; display reg 
942b			 
942b				 
942b			 
942b 3a 9f e2			ld a, (os_view_af) 
942e 2a 9d e2			ld hl, (os_view_hl) 
9431 ed 5b 9b e2		ld de, (os_view_de) 
9435 ed 4b 99 e2		ld bc, (os_view_bc) 
9439 cd d3 94			call display_reg_state 
943c c3 bf 94			jp .bpschk 
943f			 
943f fe 32		.bps2:  cp '2' 
9441 20 08			jr nz, .bps3 
9443				 
9443				; display hl 
9443 2a 9d e2			ld hl, (os_view_hl) 
9446 cd bd 95			call display_dump_at_hl 
9449			 
9449 18 74			jr .bpschk 
944b			 
944b fe 33		.bps3:  cp '3' 
944d 20 08			jr nz, .bps4 
944f			 
944f			        ; display de 
944f 2a 9b e2			ld hl, (os_view_de) 
9452 cd bd 95			call display_dump_at_hl 
9455			 
9455 18 68			jr .bpschk 
9457 fe 34		.bps4:  cp '4' 
9459 20 08			jr nz, .bps5 
945b			 
945b			        ; display bc 
945b 2a 99 e2			ld hl, (os_view_bc) 
945e cd bd 95			call display_dump_at_hl 
9461			 
9461 18 5c			jr .bpschk 
9463 fe 35		.bps5:  cp '5' 
9465 20 08		        jr nz, .bps7 
9467			 
9467				; display cur ptr 
9467 2a 3a ea			ld hl, (cli_ptr) 
946a cd bd 95			call display_dump_at_hl 
946d			 
946d 18 50			jr .bpschk 
946f fe 36		.bps7:  cp '6' 
9471 20 08			jr nz, .bps8b 
9473				 
9473				; display cur orig ptr 
9473 2a 38 ea			ld hl, (cli_origptr) 
9476 cd bd 95			call display_dump_at_hl 
9479 18 44			jr .bpschk 
947b fe 37		.bps8b:  cp '7' 
947d 20 08			jr nz, .bps9 
947f				 
947f				; display dsp 
947f 2a e8 e9			ld hl, (cli_data_sp) 
9482 cd bd 95			call display_dump_at_hl 
9485			 
9485 18 38			jr .bpschk 
9487 fe 39		.bps9:  cp '9' 
9489 20 05			jr nz, .bps8c 
948b				 
948b				; display SP 
948b			;	ld hl, sp 
948b cd bd 95			call display_dump_at_hl 
948e			 
948e 18 2f			jr .bpschk 
9490 fe 38		.bps8c:  cp '8' 
9492 20 08			jr nz, .bps8d 
9494				 
9494				; display rsp 
9494 2a ec e9			ld hl, (cli_ret_sp) 
9497 cd bd 95			call display_dump_at_hl 
949a			 
949a 18 23			jr .bpschk 
949c fe 23		.bps8d:  cp '#'     ; access monitor sub system 
949e 20 05			jr nz, .bps8 
94a0 cd b7 97			call monitor 
94a3			 
94a3 18 1a			jr .bpschk 
94a5 fe 30		.bps8:  cp '0' 
94a7 20 16			jr nz, .bpschk 
94a9			 
94a9 21 0a ed				ld hl, display_fb1 
94ac 22 c6 eb				ld (display_fb_active), hl 
94af cd e0 8a				call update_display 
94b2			 
94b2				;ld a, (os_view_af) 
94b2 2a 9d e2			ld hl, (os_view_hl) 
94b5 ed 5b 9b e2		ld de, (os_view_de) 
94b9 ed 4b 99 e2		ld bc, (os_view_bc) 
94bd f1				pop af 
94be c9				ret 
94bf			 
94bf			.bpschk:   
94bf cd 00 8a			call delay1s 
94c2 3e 9f		ld a,display_row_4 + display_cols - 1 
94c4 11 fb 99		        ld de, endprg 
94c7 cd d0 8a			call str_at_display 
94ca cd e0 8a			call update_display 
94cd cd 9a dd			call cin_wait 
94d0			 
94d0 c3 22 94			jp .bps1 
94d3			 
94d3			 
94d3			display_reg_state: 
94d3			 
94d3				; to restore afterwards 
94d3			 
94d3 d5				push de 
94d4 c5				push bc 
94d5 e5				push hl 
94d6 f5				push af 
94d7			 
94d7				; for use in here 
94d7			 
94d7 c5				push bc 
94d8 d5				push de 
94d9 e5				push hl 
94da f5				push af 
94db			 
94db cd bd 8a			call clear_display 
94de			 
94de 11 93 95			ld de, .regstate 
94e1 3e 00			ld a, display_row_1 
94e3 cd d0 8a			call str_at_display 
94e6			 
94e6				; display debug step 
94e6			 
94e6			 
94e6 11 65 ee			ld de, debug_mark 
94e9 3e 25			ld a, display_row_1+display_cols-3 
94eb cd d0 8a			call str_at_display 
94ee			 
94ee				; display a 
94ee 11 af 95			ld de, .regstatea 
94f1 3e 28			ld a, display_row_2 
94f3 cd d0 8a			call str_at_display 
94f6			 
94f6 e1				pop hl 
94f7			;	ld h,0 
94f7			;	ld l, a 
94f7 3e 2b			ld a, display_row_2+3 
94f9 cd 79 93			call display_word_at 
94fc			 
94fc			 
94fc				; display hl 
94fc			 
94fc			 
94fc 11 a3 95			ld de, .regstatehl 
94ff 3e 32			ld a, display_row_2+10 
9501 cd d0 8a			call str_at_display 
9504			 
9504 e1				pop hl 
9505 3e 35			ld a, display_row_2+13 
9507 cd 79 93			call display_word_at 
950a			 
950a				 
950a				; display de 
950a			 
950a 11 a7 95			ld de, .regstatede 
950d 3e 50			ld a, display_row_3 
950f cd d0 8a			call str_at_display 
9512			 
9512 e1				pop hl 
9513			;	ld h,d 
9513			;	ld l, e 
9513 3e 53			ld a, display_row_3+3 
9515 cd 79 93			call display_word_at 
9518			 
9518			 
9518				; display bc 
9518			 
9518 11 ab 95			ld de, .regstatebc 
951b 3e 5a			ld a, display_row_3+10 
951d cd d0 8a			call str_at_display 
9520			 
9520 e1				pop hl 
9521			;	ld h,b 
9521			;	ld l, c 
9521 3e 5d			ld a, display_row_3+13 
9523 cd 79 93			call display_word_at 
9526			 
9526			 
9526				; display dsp 
9526			 
9526 11 b3 95			ld de, .regstatedsp 
9529 3e 78			ld a, display_row_4 
952b cd d0 8a			call str_at_display 
952e			 
952e				 
952e 2a e8 e9			ld hl,(cli_data_sp) 
9531 3e 7c			ld a, display_row_4+4 
9533 cd 79 93			call display_word_at 
9536			 
9536				; display rsp 
9536			 
9536 11 b8 95			ld de, .regstatersp 
9539 3e 82			ld a, display_row_4+10 
953b cd d0 8a			call str_at_display 
953e			 
953e				 
953e 2a ec e9			ld hl,(cli_ret_sp) 
9541 3e 86			ld a, display_row_4+14 
9543 cd 79 93			call display_word_at 
9546			 
9546 cd e0 8a			call update_display 
9549			 
9549			;	call delay1s 
9549			;	call delay1s 
9549			;	call delay1s 
9549			 
9549			 
9549			;	call next_page_prompt 
9549			 
9549				; restore  
9549			 
9549 f1				pop af 
954a e1				pop hl 
954b c1				pop bc 
954c d1				pop de 
954d c9				ret 
954e			 
954e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9562 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9577 .. 00		.ptrstate:	db "Ptr State",0 
9581 .. 00		.ptrcliptr:     db "cli_ptr",0 
9589 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9593 .. 00		.regstate:	db "Reg State (1/0)",0 
95a3 .. 00		.regstatehl:	db "HL:",0 
95a7 .. 00		.regstatede:	db "DE:",0 
95ab .. 00		.regstatebc:	db "BC:",0 
95af .. 00		.regstatea:	db "A :",0 
95b3 .. 00		.regstatedsp:	db "DSP:",0 
95b8 .. 00		.regstatersp:	db "RSP:",0 
95bd			 
95bd			display_dump_at_hl: 
95bd e5				push hl 
95be d5				push de 
95bf c5				push bc 
95c0 f5				push af 
95c1			 
95c1 22 de e5			ld (os_cur_ptr),hl	 
95c4 cd bd 8a			call clear_display 
95c7 cd 05 99			call dumpcont 
95ca			;	call delay1s 
95ca			;	call next_page_prompt 
95ca			 
95ca			 
95ca f1				pop af 
95cb c1				pop bc 
95cc d1				pop de 
95cd e1				pop hl 
95ce c9				ret 
95cf			 
95cf			;if ENABLE_BASIC 
95cf			;	include "nascombasic.asm" 
95cf			;	basic: 
95cf			;	include "forth/FORTH.ASM" 
95cf			;endif 
95cf			 
95cf			; eof 
95cf			 
95cf			 
# End of file firmware_diags.asm
95cf			  
95cf			include "firmware_prompts.asm"  
95cf			; Prompts  
95cf			 
95cf			; boot messages 
95cf			 
95cf .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95e4 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95f4			 
95f4			 
95f4			; config menus 
95f4			 
95f4			;prom_c3: db "Add Dictionary To File",0 
95f4			 
95f4			if STARTUP_V1 
95f4 .. 00		prom_c2: db "Select Autoload File",0 
9609 .. 00		prom_c2a: db "Disable Autoload File", 0 
961f			endif 
961f			 
961f			if STARTUP_V2 
961f			prom_c2: db "Enable Autoload Files",0 
961f			prom_c2a: db "Disable Autoload Files", 0 
961f			 
961f			crs_s1: db "*ls-word", 0 
961f			crs_s2: db "*ed-word", 0 
961f			crs_s3: db "*Demo-Games", 0 
961f			crs_s4: db "*Utils", 0 
961f			crs_s5: db "*SPI-Util", 0 
961f			crs_s6: db "*Key-Constants", 0 
961f			crs_sound: db "*Sound-Util", 0 
961f			crs_hw: db "*Hello-World",0 
961f			 
961f			 
961f			 
961f			endif 
961f			;prom_c2b: db "Select Storage Bank",0 
961f .. 00		prom_c4: db "Settings",0 
9628 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9643 .. 00		prom_m4b:   db "Monitor",0 
964b .. 00		prom_c1: db "Hardware Diags",0 
965a			 
965a			 
965a			if STARTUP_V2 
965a			prom_c9: db "Create Startup Files",0 
965a			endif 
965a			 
965a .. 00		prom_notav:    db "Feature not available",0 
9670 .. 00		prom_empty:    db "",0 
9671			 
9671			; eof 
9671			 
# End of file firmware_prompts.asm
9671			  
9671			  
9671			; eof  
9671			  
# End of file firmware.asm
9671			 
9671			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9671			;if BASE_KEV  
9671			;baseram: equ 08000h 
9671			;endif 
9671			 
9671			;if BASE_SC114 
9671			;baseram:     equ    endofcode 
9671			;endif 
9671			 
9671			 
9671			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9671			 
9671			; start system 
9671			 
9671			coldstart: 
9671				; set sp 
9671				; di/ei 
9671			 
9671 f3				di 
9672 31 00 f0			ld sp, tos 
9675 cd e4 dc			call init_nmi 
9678			;	ei 
9678			 
9678				; init spinner 
9678 3e 00			ld a,0 
967a 32 c0 eb			ld (display_active), a 
967d			 
967d				; disable breakpoint by default 
967d			 
967d				;ld a,'*' 
967d			;	ld a,' ' 
967d			;	ld (os_view_disable),a 
967d			 
967d				; set break point vector as new break point on or off 
967d cd 00 94			call bp_off 
9680			 
9680				; init hardware 
9680			 
9680				; init keyboard and screen hardware 
9680			 
9680 cd 1f 80			call hardware_init 
9683			 
9683			 
9683 cd 00 8a			call delay1s 
9686 3e 58			ld a, display_row_3+8 
9688 11 03 80			ld de, buildtime 
968b cd d0 8a			call str_at_display 
968e cd e0 8a			call update_display 
9691			 
9691 cd 00 8a			call delay1s 
9694 cd 00 8a			call delay1s 
9697 cd 00 8a			call delay1s 
969a			 
969a				; detect if any keys are held down to enable breakpoints at start up 
969a			 
969a cd a0 dd			call cin  
969d fe 00			cp 0 
969f 28 03			jr z, .nokeys 
96a1			 
96a1				;call hardware_diags 
96a1 cd 5e 92			call config 
96a4			 
96a4			;	ld de, .bpen 
96a4			;	ld a, display_row_4 
96a4			;	call str_at_display 
96a4			;	call update_display 
96a4			; 
96a4			;	ld a,0 
96a4			;	ld (os_view_disable),a 
96a4			; 
96a4			;.bpwait: 
96a4			;	call cin 
96a4			;	cp 0 
96a4			;	jr z, .bpwait 
96a4			;	jr .nokeys 
96a4			; 
96a4			; 
96a4			;.bpen:  db "Break points enabled!",0 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			.nokeys: 
96a4			 
96a4			 
96a4				 
96a4			 
96a4			;jp  testkey 
96a4			 
96a4			;call storage_get_block_0 
96a4			; 
96a4			;ld hl, 0 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4				 
96a4			;ld hl, 10 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			;stop:	nop 
96a4			;	jp stop 
96a4			 
96a4			 
96a4			 
96a4			main: 
96a4 cd bd 8a			call clear_display 
96a7 cd e0 8a			call update_display 
96aa			 
96aa			 
96aa			 
96aa			;	call testlcd 
96aa			 
96aa			 
96aa			 
96aa cd 46 9e			call forth_init 
96ad			 
96ad			 
96ad			warmstart: 
96ad cd 1c 9e			call forth_warmstart 
96b0			 
96b0				; run startup word load 
96b0			        ; TODO prevent this running at warmstart after crash  
96b0			 
96b0				if STARTUP_ENABLE 
96b0			 
96b0					if STARTUP_V1 
96b0			 
96b0						if STORAGE_SE 
96b0							call forth_autoload 
96b0						endif 
96b0 cd 34 dc					call forth_startup 
96b3					endif 
96b3			 
96b3					if STARTUP_V2 
96b3			 
96b3						if STORAGE_SE 
96b3							call forth_autoload 
96b3						else 
96b3							call forth_startup 
96b3						endif 
96b3			 
96b3			 
96b3					endif 
96b3			 
96b3				endif 
96b3			 
96b3			warmstart_afterauto: 
96b3			 
96b3				; show free memory after boot 
96b3 11 52 97			ld de, freeram 
96b6 3e 00			ld a, display_row_1 
96b8 cd d0 8a			call str_at_display 
96bb			 
96bb				; get current heap start after loading any uwords 
96bb			 
96bb				;ld de, (os_last_new_uword) 
96bb				;ex de, hl 
96bb			 
96bb			; Or use heap_size word???? 
96bb				;ld hl, heap_end 
96bb				;ld hl, heap_size 
96bb				;ld de, topusermem 
96bb				;ld de, heap_start 
96bb ed 5b b9 dd			ld de, (free_list )      
96bf 21 96 e2				ld hl, heap_end 
96c2 ed 52			sbc hl, de 
96c4				;push hl 
96c4				;ld a,h	         	 
96c4				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96c4				;call hexout 
96c4			   	;pop hl 
96c4			; 
96c4			;	ld a,l 
96c4			;	ld hl, os_word_scratch+2 
96c4			;	call hexout 
96c4			;	ld hl, os_word_scratch+4 
96c4			;	ld a, 0 
96c4			;	ld (hl),a 
96c4 eb				ex de, hl 
96c5 21 c0 e5			ld hl, os_word_scratch 
96c8 cd ff 8f			call uitoa_16 
96cb			 
96cb			 
96cb 11 c0 e5			ld de, os_word_scratch 
96ce 3e 0d			ld a, display_row_1 + 13 
96d0 cd d0 8a			call str_at_display 
96d3 cd e0 8a			call update_display 
96d6			 
96d6			 
96d6				;call demo 
96d6			 
96d6			 
96d6				; init scratch input area for cli commands 
96d6			 
96d6 21 e2 e5			ld hl, os_cli_cmd 
96d9 3e 00			ld a,0 
96db 77				ld (hl),a 
96dc 23				inc hl 
96dd 77				ld (hl),a 
96de			 
96de 3e 00			ld a,0 
96e0 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96e3			 
96e3 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96e6 32 df e5			ld (os_cur_ptr+1),a	 
96e9			 
96e9 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96ec 32 c1 e5			ld (os_word_scratch+1),a	 
96ef				 
96ef			 
96ef				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96ef 21 e2 e5			ld hl, os_cli_cmd 
96f2			 
96f2 3e 00			ld a, 0		 ; init cli input 
96f4 77				ld (hl), a 
96f5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96f7			cli: 
96f7				; show cli prompt 
96f7				;push af 
96f7				;ld a, 0 
96f7				;ld de, prompt 
96f7				;call str_at_display 
96f7			 
96f7				;call update_display 
96f7				;pop af 
96f7				;inc a 
96f7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96f7			 
96f7			.lastrecall: 
96f7			 
96f7 0e 00			ld c, 0 
96f9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96fb 1e 28			ld e, 40 
96fd			 
96fd 21 e2 e5			ld hl, os_cli_cmd 
9700			 
9700				STACKFRAME OFF $fefe $9f9f 
9700				if DEBUG_STACK_IMB 
9700					if OFF 
9700						exx 
9700						ld de, $fefe 
9700						ld a, d 
9700						ld hl, curframe 
9700						call hexout 
9700						ld a, e 
9700						ld hl, curframe+2 
9700						call hexout 
9700						ld hl, $fefe 
9700						push hl 
9700						ld hl, $9f9f 
9700						push hl 
9700						exx 
9700					endif 
9700				endif 
9700			endm 
# End of macro STACKFRAME
9700			 
9700 cd 17 8d			call input_str 
9703			 
9703				STACKFRAMECHK OFF $fefe $9f9f 
9703				if DEBUG_STACK_IMB 
9703					if OFF 
9703						exx 
9703						ld hl, $9f9f 
9703						pop de   ; $9f9f 
9703						call cmp16 
9703						jr nz, .spnosame 
9703						ld hl, $fefe 
9703						pop de   ; $fefe 
9703						call cmp16 
9703						jr z, .spfrsame 
9703						.spnosame: call showsperror 
9703						.spfrsame: nop 
9703						exx 
9703					endif 
9703				endif 
9703			endm 
# End of macro STACKFRAMECHK
9703			 
9703			 
9703				; check to see if last line recall has been requested 
9703			 
9703			if EDIT_V2 
9703 fe 05			cp KEY_UP 
9705 20 0f			jr nz, .noexecline 
9707			 
9707 11 e2 e5			ld de, os_cli_cmd 
970a 21 e1 e6			ld hl, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712 3e 00			ld a, 0 
9714 18 e1			jr .lastrecall 
9716			endif 
9716			 
9716			.noexecline: 
9716				; no so exec the line		 
9716			 
9716				; copy input to last command 
9716			 
9716 21 e2 e5			ld hl, os_cli_cmd 
9719 11 e1 e6			ld de, os_last_cmd 
971c 01 ff 00			ld bc, 255 
971f ed b0			ldir 
9721			 
9721				; wipe current buffer 
9721			 
9721			;	ld a, 0 
9721			;	ld hl, os_cli_cmd 
9721			;	ld de, os_cli_cmd+1 
9721			;	ld bc, 254 
9721			;	ldir 
9721				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9721			;	call strcpy 
9721			;	ld a, 0 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			 
9721				; switch frame buffer to program  
9721			 
9721 21 0a ed				ld hl, display_fb1 
9724 22 c6 eb				ld (display_fb_active), hl 
9727			 
9727			;	nop 
9727				STACKFRAME ON $fbfe $8f9f 
9727				if DEBUG_STACK_IMB 
9727					if ON 
9727						exx 
9727						ld de, $fbfe 
9727						ld a, d 
9727						ld hl, curframe 
9727						call hexout 
9727						ld a, e 
9727						ld hl, curframe+2 
9727						call hexout 
9727						ld hl, $fbfe 
9727						push hl 
9727						ld hl, $8f9f 
9727						push hl 
9727						exx 
9727					endif 
9727				endif 
9727			endm 
# End of macro STACKFRAME
9727				; first time into the parser so pass over the current scratch pad 
9727 21 e2 e5			ld hl,os_cli_cmd 
972a				; tokenise the entered statement(s) in HL 
972a cd c4 9e			call forthparse 
972d			        ; exec forth statements in top of return stack 
972d cd 04 9f			call forthexec 
9730				;call forthexec_cleanup 
9730			;	call parsenext 
9730			 
9730				STACKFRAMECHK ON $fbfe $8f9f 
9730				if DEBUG_STACK_IMB 
9730					if ON 
9730						exx 
9730						ld hl, $8f9f 
9730						pop de   ; $8f9f 
9730						call cmp16 
9730						jr nz, .spnosame 
9730						ld hl, $fbfe 
9730						pop de   ; $fbfe 
9730						call cmp16 
9730						jr z, .spfrsame 
9730						.spnosame: call showsperror 
9730						.spfrsame: nop 
9730						exx 
9730					endif 
9730				endif 
9730			endm 
# End of macro STACKFRAMECHK
9730				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9730			 
9730 3e 78			ld a, display_row_4 
9732 11 63 97			ld de, endprog 
9735			 
9735 cd e0 8a			call update_display		 
9738			 
9738 cd fd 99			call next_page_prompt 
973b			 
973b				; switch frame buffer to cli 
973b			 
973b 21 ab ed				ld hl, display_fb0 
973e 22 c6 eb				ld (display_fb_active), hl 
9741			 
9741			 
9741 cd bd 8a		        call clear_display 
9744 cd e0 8a			call update_display		 
9747			 
9747 21 e2 e5			ld hl, os_cli_cmd 
974a			 
974a 3e 00			ld a, 0		 ; init cli input 
974c 77				ld (hl), a 
974d			 
974d				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
974d			 
974d				; now on last line 
974d			 
974d				; TODO scroll screen up 
974d			 
974d				; TODO instead just clear screen and place at top of screen 
974d			 
974d			;	ld a, 0 
974d			;	ld (f_cursor_ptr),a 
974d			 
974d				;call clear_display 
974d				;call update_display 
974d			 
974d				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974d 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974f c3 f7 96			jp cli 
9752			 
9752 .. 00		freeram: db "Free bytes: ",0 
975f ..			asc: db "1A2F" 
9763 .. 00		endprog: db "End prog...",0 
976f			 
976f			testenter2:   
976f 21 ed e2			ld hl,scratch+50 
9772 22 de e5			ld (os_cur_ptr),hl 
9775 c3 f7 96			jp cli 
9778			 
9778			testenter:  
9778			 
9778 21 5f 97			ld hl,asc 
977b			;	ld a,(hl) 
977b			;	call nibble2val 
977b cd 49 8f			call get_byte 
977e			 
977e			 
977e			;	ld a,(hl) 
977e			;	call atohex 
977e			 
977e			;	call fourehexhl 
977e 32 ed e2			ld (scratch+50),a 
9781			 
9781			 
9781			 
9781 21 61 97			ld hl,asc+2 
9784			;	ld a, (hl) 
9784			;	call nibble2val 
9784 cd 49 8f			call get_byte 
9787			 
9787			;	call fourehexhl 
9787 32 ef e2			ld (scratch+52),a 
978a				 
978a 21 ed e2			ld hl,scratch+50 
978d 22 de e5			ld (os_cur_ptr),hl 
9790 c3 f7 96			jp cli 
9793			 
9793			enter:	 
9793 3a bf e2			ld a,(scratch+4) 
9796 fe 00			cp 0 
9798 28 0c			jr z, .entercont 
979a				; no, not a null term line so has an address to work out.... 
979a			 
979a 21 bd e2			ld hl,scratch+2 
979d cd a9 8f			call get_word_hl 
97a0			 
97a0 22 de e5			ld (os_cur_ptr),hl	 
97a3 c3 f7 96			jp cli 
97a6			 
97a6			 
97a6			.entercont:  
97a6			 
97a6 21 bd e2			ld hl, scratch+2 
97a9 cd 49 8f			call get_byte 
97ac			 
97ac 2a de e5		   	ld hl,(os_cur_ptr) 
97af 77					ld (hl),a 
97b0 23					inc hl 
97b1 22 de e5				ld (os_cur_ptr),hl 
97b4				 
97b4			; get byte  
97b4			 
97b4			 
97b4 c3 f7 96			jp cli 
97b7			 
97b7			 
97b7			; basic monitor support 
97b7			 
97b7			monitor: 
97b7				;  
97b7 cd bd 8a			call clear_display 
97ba 3e 00			ld a, 0 
97bc 11 10 98			ld de, .monprompt 
97bf cd d0 8a			call str_at_display 
97c2 cd e0 8a			call update_display 
97c5			 
97c5				; get a monitor command 
97c5			 
97c5 0e 00			ld c, 0     ; entry at top left 
97c7 16 64			ld d, 100   ; max buffer size 
97c9 1e 0f			ld e, 15    ; input scroll area 
97cb 3e 00			ld a, 0     ; init string 
97cd 21 b9 e4			ld hl, os_input 
97d0 77				ld (hl), a 
97d1 23				inc hl 
97d2 77				ld (hl), a 
97d3 21 b9 e4			ld hl, os_input 
97d6 3e 01			ld a, 1     ; init string 
97d8 cd 17 8d			call input_str 
97db			 
97db cd bd 8a		        call clear_display 
97de cd e0 8a			call update_display		 
97e1			 
97e1 3a b9 e4			ld a, (os_input) 
97e4 cd 47 90			call toUpper 
97e7 fe 48		        cp 'H' 
97e9 ca 84 98		        jp z, .monhelp 
97ec fe 44			cp 'D'		; dump 
97ee ca b7 98			jp z, .mondump	 
97f1 fe 43			cp 'C'		; dump 
97f3 ca d1 98			jp z, .moncdump	 
97f6 fe 4d			cp 'M'		; dump 
97f8 ca 12 98			jp z, .moneditstart 
97fb fe 55			cp 'U'		; dump 
97fd ca 1e 98			jp z, .monedit	 
9800 fe 47			cp 'G'		; dump 
9802 ca ad 98			jp z, .monjump 
9805 fe 42			cp 'B'		; forth breakpoint 
9807 cc 06 94			call z, break_point_state 
980a fe 51			cp 'Q'		; dump 
980c c8				ret z	 
980d			 
980d			 
980d				; TODO "S" to access symbol by name and not need the address 
980d				; TODO "F" to find a string in memory 
980d			 
980d c3 b7 97			jp monitor 
9810			 
9810 .. 00		.monprompt: db ">", 0 
9812			 
9812			.moneditstart: 
9812				; get starting address 
9812			 
9812 21 bb e4			ld hl,os_input+2 
9815 cd a9 8f			call get_word_hl 
9818			 
9818 22 de e5			ld (os_cur_ptr),hl	 
981b			 
981b c3 b7 97			jp monitor 
981e			 
981e			.monedit: 
981e				; get byte to load 
981e			 
981e 21 bb e4			ld hl,os_input+2 
9821 cd 49 8f			call get_byte 
9824			 
9824				; get address to update 
9824 2a de e5			ld hl, (os_cur_ptr) 
9827			 
9827				; update byte 
9827			 
9827 77				ld (hl), a 
9828			 
9828				; move to next address and save it 
9828			 
9828 23				inc hl 
9829 22 de e5			ld (os_cur_ptr),hl	 
982c			 
982c c3 b7 97			jp monitor 
982f			 
982f			 
982f .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9843 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
985f .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
987d .. 00		.monhelptext4:  db "Q-Quit",0 
9884			        
9884			.monhelp: 
9884 3e 00			ld a, display_row_1 
9886 11 2f 98		        ld de, .monhelptext1 
9889			 
9889 cd d0 8a			call str_at_display 
988c 3e 28			ld a, display_row_2 
988e 11 43 98		        ld de, .monhelptext2 
9891					 
9891 cd d0 8a			call str_at_display 
9894 3e 50			ld a, display_row_3 
9896 11 5f 98		        ld de, .monhelptext3 
9899					 
9899 cd d0 8a			call str_at_display 
989c 3e 78			ld a, display_row_4 
989e 11 7d 98		        ld de, .monhelptext4 
98a1 cd d0 8a			call str_at_display 
98a4			 
98a4 cd e0 8a			call update_display		 
98a7			 
98a7 cd fd 99			call next_page_prompt 
98aa c3 b7 97			jp monitor 
98ad			 
98ad			.monjump:    
98ad 21 bb e4			ld hl,os_input+2 
98b0 cd a9 8f			call get_word_hl 
98b3			 
98b3 e9				jp (hl) 
98b4 c3 b7 97			jp monitor 
98b7			 
98b7			.mondump:    
98b7 21 bb e4			ld hl,os_input+2 
98ba cd a9 8f			call get_word_hl 
98bd			 
98bd 22 de e5			ld (os_cur_ptr),hl	 
98c0 cd 05 99			call dumpcont 
98c3 3e 78			ld a, display_row_4 
98c5 11 63 97			ld de, endprog 
98c8			 
98c8 cd e0 8a			call update_display		 
98cb			 
98cb cd fd 99			call next_page_prompt 
98ce c3 b7 97			jp monitor 
98d1			.moncdump: 
98d1 cd 05 99			call dumpcont 
98d4 3e 78			ld a, display_row_4 
98d6 11 63 97			ld de, endprog 
98d9			 
98d9 cd e0 8a			call update_display		 
98dc			 
98dc cd fd 99			call next_page_prompt 
98df c3 b7 97			jp monitor 
98e2			 
98e2			 
98e2			; TODO symbol access  
98e2			 
98e2			.symbols:     ;; A list of symbols that can be called up  
98e2 ab ed			dw display_fb0 
98e4 .. 00			db "fb0",0  
98e8 74 ea		     	dw store_page 
98ea .. 00			db "store_page",0 
98f5			 
98f5			 
98f5			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98f5			 
98f5 3a bc e2			ld a,(scratch+1) 
98f8 fe 00			cp 0 
98fa 28 09			jr z, dumpcont 
98fc			 
98fc				; no, not a null term line so has an address to work out.... 
98fc			 
98fc 21 bd e2			ld hl,scratch+2 
98ff cd a9 8f			call get_word_hl 
9902			 
9902 22 de e5			ld (os_cur_ptr),hl	 
9905			 
9905			 
9905			 
9905			dumpcont: 
9905			 
9905				; dump bytes at ptr 
9905			 
9905			 
9905 3e 00			ld a, display_row_1 
9907 2a c6 eb			ld hl, (display_fb_active) 
990a cd ea 8c			call addatohl 
990d cd 35 99			call .dumpbyterow 
9910			 
9910 3e 28			ld a, display_row_2 
9912 2a c6 eb			ld hl, (display_fb_active) 
9915 cd ea 8c			call addatohl 
9918 cd 35 99			call .dumpbyterow 
991b			 
991b			 
991b 3e 50			ld a, display_row_3 
991d 2a c6 eb			ld hl, (display_fb_active) 
9920 cd ea 8c			call addatohl 
9923 cd 35 99			call .dumpbyterow 
9926			 
9926 3e 78			ld a, display_row_4 
9928 2a c6 eb			ld hl, (display_fb_active) 
992b cd ea 8c			call addatohl 
992e cd 35 99			call .dumpbyterow 
9931			 
9931 cd e0 8a			call update_display 
9934			;		jp cli 
9934 c9				ret 
9935			 
9935			.dumpbyterow: 
9935			 
9935				;push af 
9935			 
9935 e5				push hl 
9936			 
9936				; calc where to poke the ascii 
9936			if display_cols == 20 
9936				ld a, 16 
9936			else 
9936 3e 1f			ld a, 31 
9938			endif 
9938			 
9938 cd ea 8c			call addatohl 
993b 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
993e			 
993e			 
993e			; display decoding address 
993e 2a de e5		   	ld hl,(os_cur_ptr) 
9941			 
9941 7c				ld a,h 
9942 e1				pop hl 
9943 e5				push hl 
9944			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9944 cd f3 8e			call hexout 
9947 2a de e5		   	ld hl,(os_cur_ptr) 
994a			 
994a 7d				ld a,l 
994b e1				pop hl 
994c 23				inc hl 
994d 23				inc hl 
994e e5				push hl 
994f			;	ld hl, os_word_scratch+2 
994f cd f3 8e			call hexout 
9952 e1				pop hl 
9953 23				inc hl 
9954 23				inc hl 
9955				;ld hl, os_word_scratch+4 
9955 3e 3a			ld a, ':' 
9957 77				ld (hl),a 
9958 23				inc hl 
9959				;ld a, 0 
9959				;ld (hl),a 
9959				;ld de, os_word_scratch 
9959				;pop af 
9959				;push af 
9959			;		ld a, display_row_2 
9959			;		call str_at_display 
9959			;		call update_display 
9959			 
9959			 
9959			;pop af 
9959			;	add 5 
9959			 
9959			if display_cols == 20 
9959				ld b, 4 
9959			else 
9959 06 08			ld b, 8 
995b			endif	 
995b			 
995b			.dumpbyte: 
995b c5				push bc 
995c e5				push hl 
995d			 
995d			 
995d 2a de e5		   	ld hl,(os_cur_ptr) 
9960 7e					ld a,(hl) 
9961			 
9961					; poke the ascii to display 
9961 2a c0 e5				ld hl,(os_word_scratch) 
9964 77					ld (hl),a 
9965 23					inc hl 
9966 22 c0 e5				ld (os_word_scratch),hl 
9969			 
9969					 
9969			 
9969			 
9969 e1					pop hl 
996a e5					push hl 
996b			 
996b cd f3 8e				call hexout 
996e			 
996e					 
996e 2a de e5		   	ld hl,(os_cur_ptr) 
9971 23				inc hl 
9972 22 de e5		   	ld (os_cur_ptr),hl 
9975			 
9975 e1					pop hl 
9976 23					inc hl 
9977 23					inc hl 
9978 23					inc hl 
9979			 
9979			 
9979			 
9979					;ld a,0 
9979					;ld (os_word_scratch+2),a 
9979					;pop af 
9979					;push af 
9979			 
9979					;ld de, os_word_scratch 
9979					;call str_at_display 
9979			;		call update_display 
9979			;		pop af 
9979 c1					pop bc 
997a c6 03				add 3 
997c 10 dd			djnz .dumpbyte 
997e			 
997e				 
997e			 
997e c9				ret 
997f			 
997f			jump:	 
997f			 
997f 21 bd e2			ld hl,scratch+2 
9982 cd a9 8f			call get_word_hl 
9985				;ld hl,(scratch+2) 
9985				;call fourehexhl 
9985			 
9985 22 de e5			ld (os_cur_ptr),hl	 
9988			 
9988 e9				jp (hl) 
9989			 
9989			 
9989			 
9989			; TODO implement a basic monitor mode to start with 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			; testing and demo code during development 
9989			 
9989			 
9989 .. 00		str1: db "Enter some text...",0 
999c .. 00		clear: db "                    ",0 
99b1			 
99b1			demo: 
99b1			 
99b1			 
99b1			 
99b1			;	call update_display 
99b1			 
99b1				; init scratch input area for testing 
99b1 21 bb e2			ld hl, scratch	 
99b4 3e 00			ld a,0 
99b6 77				ld (hl),a 
99b7			 
99b7			 
99b7 3e 28		            LD   A, display_row_2 
99b9			;            CALL fLCD_Pos       ;Position cursor to location in A 
99b9 11 89 99		            LD   DE, str1 
99bc cd d0 8a			call str_at_display 
99bf			 
99bf			;            CALL fLCD_Str       ;Display string pointed to by DE 
99bf			cloop:	 
99bf 3e 50		            LD   A, display_row_3 
99c1			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c1 11 9c 99		            LD   DE, clear 
99c4			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99c4 cd d0 8a				call str_at_display 
99c7 3e 78			ld a, display_row_4 
99c9 11 f9 99			ld de, prompt 
99cc			 
99cc cd d0 8a				call str_at_display 
99cf cd e0 8a			call update_display 
99d2			 
99d2 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99d4 16 0a			ld d, 10 
99d6 21 bb e2			ld hl, scratch	 
99d9 cd 17 8d			call input_str 
99dc			 
99dc			;	call clear_display 
99dc			;'	call update_display 
99dc			 
99dc 3e 00		            LD   A, display_row_1 
99de			;            CALL fLCD_Pos       ;Position cursor to location in A 
99de 11 9c 99		            LD   DE, clear 
99e1 cd d0 8a				call str_at_display 
99e4			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e4 3e 00		            LD   A, display_row_1 
99e6			;            CALL fLCD_Pos       ;Position cursor to location in A 
99e6 11 bb e2		            LD   DE, scratch 
99e9			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e9 cd d0 8a				call str_at_display 
99ec cd e0 8a			call update_display 
99ef			 
99ef 3e 00				ld a,0 
99f1 21 bb e2			ld hl, scratch 
99f4 77				ld (hl),a 
99f5			 
99f5 00				nop 
99f6 c3 bf 99			jp cloop 
99f9			 
99f9			 
99f9			 
99f9			; OS Prompt 
99f9			 
99f9 .. 00		prompt: db ">",0 
99fb .. 00		endprg: db "?",0 
99fd			 
99fd			 
99fd			; handy next page prompt 
99fd			next_page_prompt: 
99fd e5				push hl 
99fe d5				push de 
99ff f5				push af 
9a00 c5				push bc 
9a01			 
9a01 3e 9f			ld a,display_row_4 + display_cols - 1 
9a03 11 fb 99		        ld de, endprg 
9a06 cd d0 8a			call str_at_display 
9a09 cd e0 8a			call update_display 
9a0c cd 9a dd			call cin_wait 
9a0f c1				pop bc 
9a10 f1				pop af 
9a11 d1				pop de 
9a12 e1				pop hl 
9a13			 
9a13			 
9a13 c9				ret 
9a14			 
9a14			 
9a14			; forth parser 
9a14			 
9a14			; My forth kernel 
9a14			include "forth_kernel.asm" 
9a14			; 
9a14			; kernel to the forth OS 
9a14			 
9a14			DS_TYPE_STR: equ 1     ; string type 
9a14			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9a14			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9a14			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9a14			 
9a14			FORTH_PARSEV1: equ 0 
9a14			FORTH_PARSEV2: equ 0 
9a14			FORTH_PARSEV3: equ 0 
9a14			FORTH_PARSEV4: equ 0 
9a14			FORTH_PARSEV5: equ 1 
9a14			 
9a14			;if FORTH_PARSEV5 
9a14			;	FORTH_END_BUFFER: equ 0 
9a14			;else 
9a14			FORTH_END_BUFFER: equ 127 
9a14			;endif 
9a14			 
9a14			FORTH_TRUE: equ 1 
9a14			FORTH_FALSE: equ 0 
9a14			 
9a14			if FORTH_PARSEV4 
9a14			include "forth_stackops.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV5 
9a14			include "forth_stackopsv5.asm" 
9a14			 
9a14			; Stack operations for v5 parser on wards 
9a14			; * DATA stack 
9a14			; * LOOP stack 
9a14			; * RETURN stack 
9a14			 
9a14			 
9a14			 
9a14			FORTH_CHK_DSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_data_sp) 
9a14				ld de, cli_data_stack 
9a14				call cmp16 
9a14				jp c, fault_dsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			 
9a14			FORTH_CHK_RSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_ret_sp) 
9a14				ld de, cli_ret_stack 
9a14				call cmp16 
9a14				jp c, fault_rsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_CHK_LOOP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_loop_sp) 
9a14				ld de, cli_loop_stack 
9a14				call cmp16 
9a14				jp c, fault_loop_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTSTR: macro 
9a14				; TOSO might need more for checks when used 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_STR 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTNUM: macro 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_INUM 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			 
9a14			; increase data stack pointer and save hl to it 
9a14				 
9a14			FORTH_DSP_NEXT: macro 
9a14				call macro_forth_dsp_next 
9a14				endm 
9a14			 
9a14			 
9a14			macro_forth_dsp_next: 
9a14				if DEBUG_FORTH_STACK_GUARD 
9a14 cd 0c da				call check_stacks 
9a17				endif 
9a17 e5				push hl 
9a18 d5				push de 
9a19 eb				ex de,hl 
9a1a 2a e8 e9			ld hl,(cli_data_sp) 
9a1d 23				inc hl 
9a1e 23				inc hl 
9a1f			 
9a1f			; PARSEV5 
9a1f 23				inc hl 
9a20 22 e8 e9			ld (cli_data_sp),hl 
9a23 73				ld (hl), e 
9a24 23				inc hl 
9a25 72				ld (hl), d 
9a26 d1				pop de 
9a27 e1				pop hl 
9a28				if DEBUG_FORTH_STACK_GUARD 
9a28 cd 0c da				call check_stacks 
9a2b				endif 
9a2b c9				ret 
9a2c			 
9a2c			 
9a2c			; increase ret stack pointer and save hl to it 
9a2c				 
9a2c			FORTH_RSP_NEXT: macro 
9a2c				call macro_forth_rsp_next 
9a2c				endm 
9a2c			 
9a2c			macro_forth_rsp_next: 
9a2c				if DEBUG_FORTH_STACK_GUARD 
9a2c cd 0c da				call check_stacks 
9a2f				endif 
9a2f e5				push hl 
9a30 d5				push de 
9a31 eb				ex de,hl 
9a32 2a ec e9			ld hl,(cli_ret_sp) 
9a35 23				inc hl 
9a36 23				inc hl 
9a37 22 ec e9			ld (cli_ret_sp),hl 
9a3a 73				ld (hl), e 
9a3b 23				inc hl 
9a3c 72				ld (hl), d 
9a3d d1				pop de 
9a3e e1				pop hl 
9a3f				if DEBUG_FORTH_STACK_GUARD 
9a3f cd 0c da				call check_stacks 
9a42				endif 
9a42 c9				ret 
9a43			 
9a43			; get current ret stack pointer and save to hl  
9a43				 
9a43			FORTH_RSP_TOS: macro 
9a43				call macro_forth_rsp_tos 
9a43				endm 
9a43			 
9a43			macro_forth_rsp_tos: 
9a43				;push de 
9a43 2a ec e9			ld hl,(cli_ret_sp) 
9a46 cd 7e 9a			call loadhlptrtohl 
9a49				;ld e, (hl) 
9a49				;inc hl 
9a49				;ld d, (hl) 
9a49				;ex de, hl 
9a49					if DEBUG_FORTH_WORDS 
9a49			;			DMARK "RST" 
9a49						CALLMONITOR 
9a49 cd 6f ee			call debug_vector  
9a4c				endm  
# End of macro CALLMONITOR
9a4c					endif 
9a4c				;pop de 
9a4c c9				ret 
9a4d			 
9a4d			; pop ret stack pointer 
9a4d				 
9a4d			FORTH_RSP_POP: macro 
9a4d				call macro_forth_rsp_pop 
9a4d				endm 
9a4d			 
9a4d			 
9a4d			macro_forth_rsp_pop: 
9a4d				if DEBUG_FORTH_STACK_GUARD 
9a4d			;		DMARK "RPP" 
9a4d cd 0c da				call check_stacks 
9a50					FORTH_CHK_RSP_UNDER 
9a50 e5				push hl 
9a51 d5				push de 
9a52 2a ec e9			ld hl,(cli_ret_sp) 
9a55 11 a6 e9			ld de, cli_ret_stack 
9a58 cd 08 8d			call cmp16 
9a5b da 23 db			jp c, fault_rsp_under 
9a5e d1				pop de 
9a5f e1				pop hl 
9a60				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a60				endif 
9a60 e5				push hl 
9a61 2a ec e9			ld hl,(cli_ret_sp) 
9a64			 
9a64			 
9a64				if FORTH_ENABLE_FREE 
9a64			 
9a64					; get pointer 
9a64			 
9a64					push de 
9a64					push hl 
9a64			 
9a64					ld e, (hl) 
9a64					inc hl 
9a64					ld d, (hl) 
9a64			 
9a64					ex de, hl 
9a64					call free 
9a64			 
9a64					pop hl 
9a64					pop de 
9a64			 
9a64			 
9a64				endif 
9a64			 
9a64			 
9a64 2b				dec hl 
9a65 2b				dec hl 
9a66 22 ec e9			ld (cli_ret_sp), hl 
9a69				; do stack underflow checks 
9a69 e1				pop hl 
9a6a				if DEBUG_FORTH_STACK_GUARD 
9a6a cd 0c da				call check_stacks 
9a6d					FORTH_CHK_RSP_UNDER 
9a6d e5				push hl 
9a6e d5				push de 
9a6f 2a ec e9			ld hl,(cli_ret_sp) 
9a72 11 a6 e9			ld de, cli_ret_stack 
9a75 cd 08 8d			call cmp16 
9a78 da 23 db			jp c, fault_rsp_under 
9a7b d1				pop de 
9a7c e1				pop hl 
9a7d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a7d				endif 
9a7d c9				ret 
9a7e			 
9a7e			 
9a7e			 
9a7e			; routine to load word pointed to by hl into hl 
9a7e			 
9a7e			loadhlptrtohl: 
9a7e			 
9a7e d5				push de 
9a7f 5e				ld e, (hl) 
9a80 23				inc hl 
9a81 56				ld d, (hl) 
9a82 eb				ex de, hl 
9a83 d1				pop de 
9a84			 
9a84 c9				ret 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			; push a number held in HL onto the data stack 
9a85			; entry point for pushing a value when already in hl used in function above 
9a85			 
9a85			forth_push_numhl: 
9a85			 
9a85 e5				push hl    ; save value to push 
9a86			 
9a86			if DEBUG_FORTH_PUSH 
9a86				; see if disabled 
9a86			 
9a86			 
9a86 f5				push af 
9a87 3a 6f ee			ld a,(debug_vector) 
9a8a fe c9			cp $c9   ; ret 
9a8c			;	ld a, (os_view_disable) 
9a8c			;	cp '*' 
9a8c 28 34			jr z, .pskip2 
9a8e e5				push hl 
9a8f e5			push hl 
9a90 cd bd 8a			call clear_display 
9a93 e1			pop hl 
9a94 7c				ld a,h 
9a95 21 c0 e5			ld hl, os_word_scratch 
9a98 cd f3 8e			call hexout 
9a9b e1				pop hl 
9a9c 7d				ld a,l 
9a9d 21 c2 e5			ld hl, os_word_scratch+2 
9aa0 cd f3 8e			call hexout 
9aa3			 
9aa3 21 c4 e5			ld hl, os_word_scratch+4 
9aa6 3e 00			ld a,0 
9aa8 77				ld (hl),a 
9aa9 11 c0 e5			ld de,os_word_scratch 
9aac 3e 28				ld a, display_row_2 
9aae cd d0 8a				call str_at_display 
9ab1 11 1a cc			ld de, .push_num 
9ab4 3e 00			ld a, display_row_1 
9ab6			 
9ab6 cd d0 8a				call str_at_display 
9ab9			 
9ab9			 
9ab9 cd e0 8a			call update_display 
9abc cd 00 8a			call delay1s 
9abf cd 00 8a			call delay1s 
9ac2			.pskip2:  
9ac2			 
9ac2 f1				pop af 
9ac3			endif	 
9ac3			 
9ac3			 
9ac3				FORTH_DSP_NEXT 
9ac3 cd 14 9a			call macro_forth_dsp_next 
9ac6				endm 
# End of macro FORTH_DSP_NEXT
9ac6			 
9ac6 2a e8 e9			ld hl, (cli_data_sp) 
9ac9			 
9ac9				; save item type 
9ac9 3e 02			ld a,  DS_TYPE_INUM 
9acb 77				ld (hl), a 
9acc 23				inc hl 
9acd			 
9acd				; get word off stack 
9acd d1				pop de 
9ace 7b				ld a,e 
9acf 77				ld (hl), a 
9ad0 23				inc hl 
9ad1 7a				ld a,d 
9ad2 77				ld (hl), a 
9ad3			 
9ad3			if DEBUG_FORTH_PUSH 
9ad3 2b				dec hl 
9ad4 2b				dec hl 
9ad5 2b				dec hl 
9ad6						DMARK "PH5" 
9ad6 f5				push af  
9ad7 3a eb 9a			ld a, (.dmark)  
9ada 32 65 ee			ld (debug_mark),a  
9add 3a ec 9a			ld a, (.dmark+1)  
9ae0 32 66 ee			ld (debug_mark+1),a  
9ae3 3a ed 9a			ld a, (.dmark+2)  
9ae6 32 67 ee			ld (debug_mark+2),a  
9ae9 18 03			jr .pastdmark  
9aeb ..			.dmark: db "PH5"  
9aee f1			.pastdmark: pop af  
9aef			endm  
# End of macro DMARK
9aef				CALLMONITOR 
9aef cd 6f ee			call debug_vector  
9af2				endm  
# End of macro CALLMONITOR
9af2			endif	 
9af2			 
9af2 c9				ret 
9af3			 
9af3			 
9af3			; Push a string to stack pointed to by hl 
9af3			 
9af3			forth_push_str: 
9af3			 
9af3			if DEBUG_FORTH_PUSH 
9af3						DMARK "PSQ" 
9af3 f5				push af  
9af4 3a 08 9b			ld a, (.dmark)  
9af7 32 65 ee			ld (debug_mark),a  
9afa 3a 09 9b			ld a, (.dmark+1)  
9afd 32 66 ee			ld (debug_mark+1),a  
9b00 3a 0a 9b			ld a, (.dmark+2)  
9b03 32 67 ee			ld (debug_mark+2),a  
9b06 18 03			jr .pastdmark  
9b08 ..			.dmark: db "PSQ"  
9b0b f1			.pastdmark: pop af  
9b0c			endm  
# End of macro DMARK
9b0c				CALLMONITOR 
9b0c cd 6f ee			call debug_vector  
9b0f				endm  
# End of macro CALLMONITOR
9b0f			endif	 
9b0f			 
9b0f			 
9b0f			    
9b0f e5				push hl 
9b10 e5				push hl 
9b11			 
9b11			;	ld a, 0   ; find end of string 
9b11 cd 50 90			call strlenz 
9b14			if DEBUG_FORTH_PUSH 
9b14						DMARK "PQ2" 
9b14 f5				push af  
9b15 3a 29 9b			ld a, (.dmark)  
9b18 32 65 ee			ld (debug_mark),a  
9b1b 3a 2a 9b			ld a, (.dmark+1)  
9b1e 32 66 ee			ld (debug_mark+1),a  
9b21 3a 2b 9b			ld a, (.dmark+2)  
9b24 32 67 ee			ld (debug_mark+2),a  
9b27 18 03			jr .pastdmark  
9b29 ..			.dmark: db "PQ2"  
9b2c f1			.pastdmark: pop af  
9b2d			endm  
# End of macro DMARK
9b2d				CALLMONITOR 
9b2d cd 6f ee			call debug_vector  
9b30				endm  
# End of macro CALLMONITOR
9b30			endif	 
9b30 eb				ex de, hl 
9b31 e1				pop hl   ; get ptr to start of string 
9b32			if DEBUG_FORTH_PUSH 
9b32						DMARK "PQ3" 
9b32 f5				push af  
9b33 3a 47 9b			ld a, (.dmark)  
9b36 32 65 ee			ld (debug_mark),a  
9b39 3a 48 9b			ld a, (.dmark+1)  
9b3c 32 66 ee			ld (debug_mark+1),a  
9b3f 3a 49 9b			ld a, (.dmark+2)  
9b42 32 67 ee			ld (debug_mark+2),a  
9b45 18 03			jr .pastdmark  
9b47 ..			.dmark: db "PQ3"  
9b4a f1			.pastdmark: pop af  
9b4b			endm  
# End of macro DMARK
9b4b				CALLMONITOR 
9b4b cd 6f ee			call debug_vector  
9b4e				endm  
# End of macro CALLMONITOR
9b4e			endif	 
9b4e 19				add hl,de 
9b4f			if DEBUG_FORTH_PUSH 
9b4f						DMARK "PQE" 
9b4f f5				push af  
9b50 3a 64 9b			ld a, (.dmark)  
9b53 32 65 ee			ld (debug_mark),a  
9b56 3a 65 9b			ld a, (.dmark+1)  
9b59 32 66 ee			ld (debug_mark+1),a  
9b5c 3a 66 9b			ld a, (.dmark+2)  
9b5f 32 67 ee			ld (debug_mark+2),a  
9b62 18 03			jr .pastdmark  
9b64 ..			.dmark: db "PQE"  
9b67 f1			.pastdmark: pop af  
9b68			endm  
# End of macro DMARK
9b68				CALLMONITOR 
9b68 cd 6f ee			call debug_vector  
9b6b				endm  
# End of macro CALLMONITOR
9b6b			endif	 
9b6b			 
9b6b 2b				dec hl    ; see if there is an optional trailing double quote 
9b6c 7e				ld a,(hl) 
9b6d fe 22			cp '"' 
9b6f 20 03			jr nz, .strnoq 
9b71 3e 00			ld a, 0      ; get rid of double quote 
9b73 77				ld (hl), a 
9b74 23			.strnoq: inc hl 
9b75			 
9b75 3e 00			ld a, 0 
9b77 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b78			 
9b78 13				inc de ; add one for the type string 
9b79 13				inc de ; add one for null term??? 
9b7a			 
9b7a				; tos is get string pointer again 
9b7a				; de contains space to allocate 
9b7a				 
9b7a d5				push de 
9b7b			 
9b7b eb				ex de, hl 
9b7c			 
9b7c				;push af 
9b7c			 
9b7c			if DEBUG_FORTH_PUSH 
9b7c						DMARK "PHm" 
9b7c f5				push af  
9b7d 3a 91 9b			ld a, (.dmark)  
9b80 32 65 ee			ld (debug_mark),a  
9b83 3a 92 9b			ld a, (.dmark+1)  
9b86 32 66 ee			ld (debug_mark+1),a  
9b89 3a 93 9b			ld a, (.dmark+2)  
9b8c 32 67 ee			ld (debug_mark+2),a  
9b8f 18 03			jr .pastdmark  
9b91 ..			.dmark: db "PHm"  
9b94 f1			.pastdmark: pop af  
9b95			endm  
# End of macro DMARK
9b95				CALLMONITOR 
9b95 cd 6f ee			call debug_vector  
9b98				endm  
# End of macro CALLMONITOR
9b98			endif	 
9b98 cd c5 90			call malloc	; on ret hl now contains allocated memory 
9b9b				if DEBUG_FORTH_MALLOC_GUARD 
9b9b cc 72 cc				call z,malloc_error 
9b9e				endif 
9b9e			 
9b9e				 
9b9e c1				pop bc    ; get length 
9b9f d1				pop de   ;  get string start    
9ba0			 
9ba0				; hl has destination from malloc 
9ba0			 
9ba0 eb				ex de, hl    ; prep for ldir 
9ba1			 
9ba1 d5				push de   ; save malloc area for DSP later 
9ba2				;push hl   ; save malloc area for DSP later 
9ba2			 
9ba2			if DEBUG_FORTH_PUSH 
9ba2						DMARK "PHc" 
9ba2 f5				push af  
9ba3 3a b7 9b			ld a, (.dmark)  
9ba6 32 65 ee			ld (debug_mark),a  
9ba9 3a b8 9b			ld a, (.dmark+1)  
9bac 32 66 ee			ld (debug_mark+1),a  
9baf 3a b9 9b			ld a, (.dmark+2)  
9bb2 32 67 ee			ld (debug_mark+2),a  
9bb5 18 03			jr .pastdmark  
9bb7 ..			.dmark: db "PHc"  
9bba f1			.pastdmark: pop af  
9bbb			endm  
# End of macro DMARK
9bbb				CALLMONITOR 
9bbb cd 6f ee			call debug_vector  
9bbe				endm  
# End of macro CALLMONITOR
9bbe			endif	 
9bbe			 
9bbe			 
9bbe ed b0			ldir 
9bc0			 
9bc0			 
9bc0				; push malloc to data stack     macro?????  
9bc0			 
9bc0				FORTH_DSP_NEXT 
9bc0 cd 14 9a			call macro_forth_dsp_next 
9bc3				endm 
# End of macro FORTH_DSP_NEXT
9bc3			 
9bc3				; save value and type 
9bc3			 
9bc3 2a e8 e9			ld hl, (cli_data_sp) 
9bc6			 
9bc6				; save item type 
9bc6 3e 01			ld a,  DS_TYPE_STR 
9bc8 77				ld (hl), a 
9bc9 23				inc hl 
9bca			 
9bca				; get malloc word off stack 
9bca d1				pop de 
9bcb 73				ld (hl), e 
9bcc 23				inc hl 
9bcd 72				ld (hl), d 
9bce			 
9bce			 
9bce			 
9bce			if DEBUG_FORTH_PUSH 
9bce 2a e8 e9			ld hl, (cli_data_sp) 
9bd1						DMARK "PHS" 
9bd1 f5				push af  
9bd2 3a e6 9b			ld a, (.dmark)  
9bd5 32 65 ee			ld (debug_mark),a  
9bd8 3a e7 9b			ld a, (.dmark+1)  
9bdb 32 66 ee			ld (debug_mark+1),a  
9bde 3a e8 9b			ld a, (.dmark+2)  
9be1 32 67 ee			ld (debug_mark+2),a  
9be4 18 03			jr .pastdmark  
9be6 ..			.dmark: db "PHS"  
9be9 f1			.pastdmark: pop af  
9bea			endm  
# End of macro DMARK
9bea				CALLMONITOR 
9bea cd 6f ee			call debug_vector  
9bed				endm  
# End of macro CALLMONITOR
9bed			;	ex de,hl 
9bed			endif	 
9bed				; in case of spaces, skip the ptr past the copied string 
9bed				;pop af 
9bed				;ld (cli_origptr),hl 
9bed			 
9bed c9				ret 
9bee			 
9bee			 
9bee			 
9bee			; TODO ascii push input onto stack given hl to start of input 
9bee			 
9bee			; identify type 
9bee			; if starts with a " then a string 
9bee			; otherwise it is a number 
9bee			;  
9bee			; if a string 
9bee			;     scan for ending " to get length of string to malloc for + 1 
9bee			;     malloc 
9bee			;     put pointer to string on stack first byte flags as string 
9bee			; 
9bee			; else a number 
9bee			;    look for number format identifier 
9bee			;    $xx hex 
9bee			;    %xxxxx bin 
9bee			;    xxxxx decimal 
9bee			;    convert number to 16bit word.  
9bee			;    malloc word + 1 with flag to identiy as num 
9bee			;    put pointer to number on stack 
9bee			;   
9bee			;  
9bee			  
9bee			forth_apush: 
9bee				; kernel push 
9bee			 
9bee			if DEBUG_FORTH_PUSH 
9bee						DMARK "PSH" 
9bee f5				push af  
9bef 3a 03 9c			ld a, (.dmark)  
9bf2 32 65 ee			ld (debug_mark),a  
9bf5 3a 04 9c			ld a, (.dmark+1)  
9bf8 32 66 ee			ld (debug_mark+1),a  
9bfb 3a 05 9c			ld a, (.dmark+2)  
9bfe 32 67 ee			ld (debug_mark+2),a  
9c01 18 03			jr .pastdmark  
9c03 ..			.dmark: db "PSH"  
9c06 f1			.pastdmark: pop af  
9c07			endm  
# End of macro DMARK
9c07				CALLMONITOR 
9c07 cd 6f ee			call debug_vector  
9c0a				endm  
# End of macro CALLMONITOR
9c0a			endif	 
9c0a				; identify input type 
9c0a			 
9c0a 7e				ld a,(hl) 
9c0b			 
9c0b fe 23			cp '#' 
9c0d ca 47 9c			jp z, .fapdec 
9c10			 
9c10			 
9c10 fe 22			cp '"' 
9c12 28 0a			jr z, .fapstr 
9c14 fe 24			cp '$' 
9c16 ca 3e 9c			jp z, .faphex 
9c19 fe 25			cp '%' 
9c1b ca 26 9c			jp z, .fapbin 
9c1e			;	cp 'b' 
9c1e			;	jp z, .fabin 
9c1e				; else decimal 
9c1e			 
9c1e				; TODO do decimal conversion 
9c1e				; decimal is stored as a 16bit word 
9c1e			 
9c1e				; by default everything is a string if type is not detected 
9c1e			.fapstr: ; 
9c1e fe 22			cp '"' 
9c20 20 01			jr nz, .strnoqu 
9c22 23				inc hl 
9c23			.strnoqu: 
9c23 c3 f3 9a			jp forth_push_str 
9c26			 
9c26			 
9c26			 
9c26			.fapbin:    ; push a binary string.  
9c26 11 00 00			ld de, 0   ; hold a 16bit value 
9c29			 
9c29 23			.fapbinshift:	inc hl  
9c2a 7e				ld a,(hl) 
9c2b fe 00			cp 0     ; done scanning  
9c2d 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c2f			 
9c2f				; left shift de 
9c2f eb				ex de, hl	 
9c30 29				add hl, hl 
9c31			 
9c31				; is 1 
9c31 fe 31			cp '1' 
9c33 20 02			jr nz, .binzero 
9c35 cb 4d			bit 1, l 
9c37			.binzero: 
9c37 eb				ex de, hl	 ; save current de 
9c38 18 ef			jr .fapbinshift 
9c3a			 
9c3a			.fapbdone: 
9c3a eb				ex de, hl 
9c3b c3 85 9a			jp forth_push_numhl 
9c3e			 
9c3e			 
9c3e			.faphex:   ; hex is always stored as a 16bit word 
9c3e				; skip number prefix 
9c3e 23				inc hl 
9c3f				; turn ascii into number 
9c3f cd a9 8f			call get_word_hl	; ret 16bit word in hl 
9c42			 
9c42 c3 85 9a			jp forth_push_numhl 
9c45			 
9c45 00				 nop 
9c46			 
9c46			.fabin:   ; TODO bin conversion 
9c46			 
9c46			 
9c46 c9				ret 
9c47			.fapdec:	 
9c47				; string to dec conversion 
9c47 23				inc hl 
9c48 eb				ex de, hl 
9c49 cd e7 8f			call string_to_uint16 
9c4c c3 85 9a			jp forth_push_numhl 
9c4f c9				ret 
9c50				 
9c50			;atoui_16: 
9c50			 
9c50			; get either a string ptr or a 16bit word from the data stack 
9c50			 
9c50			FORTH_DSP: macro 
9c50				call macro_forth_dsp 
9c50				endm 
9c50			 
9c50			macro_forth_dsp: 
9c50				; data stack pointer points to current word on tos 
9c50			 
9c50 2a e8 e9			ld hl,(cli_data_sp) 
9c53			 
9c53				if DEBUG_FORTH_PUSH 
9c53						DMARK "DSP" 
9c53 f5				push af  
9c54 3a 68 9c			ld a, (.dmark)  
9c57 32 65 ee			ld (debug_mark),a  
9c5a 3a 69 9c			ld a, (.dmark+1)  
9c5d 32 66 ee			ld (debug_mark+1),a  
9c60 3a 6a 9c			ld a, (.dmark+2)  
9c63 32 67 ee			ld (debug_mark+2),a  
9c66 18 03			jr .pastdmark  
9c68 ..			.dmark: db "DSP"  
9c6b f1			.pastdmark: pop af  
9c6c			endm  
# End of macro DMARK
9c6c			 
9c6c cd a5 cc				call display_data_sp 
9c6f				;call break_point_state 
9c6f				;rst 030h 
9c6f				CALLMONITOR 
9c6f cd 6f ee			call debug_vector  
9c72				endm  
# End of macro CALLMONITOR
9c72				endif 
9c72			 
9c72 c9				ret 
9c73			 
9c73			; return hl to start of value on stack 
9c73			 
9c73			FORTH_DSP_VALUE: macro 
9c73				call macro_forth_dsp_value 
9c73				endm 
9c73			 
9c73			macro_forth_dsp_value: 
9c73			 
9c73				FORTH_DSP 
9c73 cd 50 9c			call macro_forth_dsp 
9c76				endm 
# End of macro FORTH_DSP
9c76			 
9c76 d5				push de 
9c77			 
9c77 23				inc hl ; skip type 
9c78			 
9c78 5e				ld e, (hl) 
9c79 23				inc hl 
9c7a 56				ld d, (hl) 
9c7b eb				ex de,hl  
9c7c			 
9c7c d1				pop de 
9c7d			 
9c7d c9				ret 
9c7e			 
9c7e			; return hl to start of value to second item on stack 
9c7e			 
9c7e			FORTH_DSP_VALUEM1: macro 
9c7e				call macro_forth_dsp_value_m1 
9c7e				endm 
9c7e			 
9c7e			macro_forth_dsp_value_m1: 
9c7e			 
9c7e				FORTH_DSP 
9c7e cd 50 9c			call macro_forth_dsp 
9c81				endm 
# End of macro FORTH_DSP
9c81			 
9c81 2b				dec hl 
9c82 2b				dec hl 
9c83			;	dec hl 
9c83			 
9c83 d5				push de 
9c84			 
9c84 5e				ld e, (hl) 
9c85 23				inc hl 
9c86 56				ld d, (hl) 
9c87 eb				ex de,hl  
9c88			 
9c88 d1				pop de 
9c89			 
9c89 c9				ret 
9c8a			 
9c8a				 
9c8a			 
9c8a			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c8a			 
9c8a			FORTH_DSP_POP: macro 
9c8a				call macro_forth_dsp_pop 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			; get the tos data type 
9c8a			 
9c8a			FORTH_DSP_TYPE:   macro 
9c8a			 
9c8a				;FORTH_DSP_VALUE 
9c8a				FORTH_DSP 
9c8a				 
9c8a				; hl points to value 
9c8a				; check type 
9c8a			 
9c8a				ld a,(hl) 
9c8a			 
9c8a				endm 
9c8a			 
9c8a			; load the tos value into hl 
9c8a			 
9c8a			 
9c8a			FORTH_DSP_VALUEHL:  macro 
9c8a				call macro_dsp_valuehl 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			 
9c8a			macro_dsp_valuehl: 
9c8a				FORTH_DSP_VALUE 
9c8a cd 73 9c			call macro_forth_dsp_value 
9c8d				endm 
# End of macro FORTH_DSP_VALUE
9c8d			 
9c8d				;FORTH_ERR_TOS_NOTNUM 
9c8d			 
9c8d				;inc hl   ; skip type id 
9c8d			 
9c8d			;	push de 
9c8d			; 
9c8d			;	ld e, (hl) 
9c8d			;	inc hl 
9c8d			;	ld d, (hl) 
9c8d			;	ex de,hl  
9c8d			 
9c8d			;	pop de 
9c8d			 
9c8d				if DEBUG_FORTH_PUSH 
9c8d						DMARK "DVL" 
9c8d f5				push af  
9c8e 3a a2 9c			ld a, (.dmark)  
9c91 32 65 ee			ld (debug_mark),a  
9c94 3a a3 9c			ld a, (.dmark+1)  
9c97 32 66 ee			ld (debug_mark+1),a  
9c9a 3a a4 9c			ld a, (.dmark+2)  
9c9d 32 67 ee			ld (debug_mark+2),a  
9ca0 18 03			jr .pastdmark  
9ca2 ..			.dmark: db "DVL"  
9ca5 f1			.pastdmark: pop af  
9ca6			endm  
# End of macro DMARK
9ca6				CALLMONITOR 
9ca6 cd 6f ee			call debug_vector  
9ca9				endm  
# End of macro CALLMONITOR
9ca9				endif 
9ca9 c9				ret 
9caa			 
9caa			forth_apushstrhl:      
9caa				; push of string requires use of cli_origptr 
9caa				; bodge use 
9caa			 
9caa				; get current cli_origptr, save, update with temp pointer  
9caa ed 5b 38 ea		ld de, (cli_origptr) 
9cae 22 38 ea			ld (cli_origptr), hl 
9cb1 d5				push de 
9cb2 cd ee 9b			call forth_apush 
9cb5 d1				pop de 
9cb6 ed 53 38 ea		ld (cli_origptr), de 
9cba c9			        ret	 
9cbb			 
9cbb			 
9cbb			; increase loop stack pointer and save hl to it 
9cbb				 
9cbb			FORTH_LOOP_NEXT: macro 
9cbb				call macro_forth_loop_next 
9cbb				;nop 
9cbb				endm 
9cbb			 
9cbb			macro_forth_loop_next: 
9cbb				if DEBUG_FORTH_STACK_GUARD 
9cbb cd 0c da				call check_stacks 
9cbe				endif 
9cbe e5				push hl 
9cbf d5				push de 
9cc0 eb				ex de,hl 
9cc1 2a ea e9			ld hl,(cli_loop_sp) 
9cc4 23				inc hl 
9cc5 23				inc hl 
9cc6					if DEBUG_FORTH_WORDS 
9cc6						DMARK "LNX" 
9cc6 f5				push af  
9cc7 3a db 9c			ld a, (.dmark)  
9cca 32 65 ee			ld (debug_mark),a  
9ccd 3a dc 9c			ld a, (.dmark+1)  
9cd0 32 66 ee			ld (debug_mark+1),a  
9cd3 3a dd 9c			ld a, (.dmark+2)  
9cd6 32 67 ee			ld (debug_mark+2),a  
9cd9 18 03			jr .pastdmark  
9cdb ..			.dmark: db "LNX"  
9cde f1			.pastdmark: pop af  
9cdf			endm  
# End of macro DMARK
9cdf						CALLMONITOR 
9cdf cd 6f ee			call debug_vector  
9ce2				endm  
# End of macro CALLMONITOR
9ce2					endif 
9ce2 22 ea e9			ld (cli_loop_sp),hl 
9ce5 73				ld (hl), e 
9ce6 23				inc hl 
9ce7 72				ld (hl), d 
9ce8 d1				pop de    ; been reversed so save a swap on restore 
9ce9 e1				pop hl 
9cea				if DEBUG_FORTH_STACK_GUARD 
9cea cd 0c da				call check_stacks 
9ced				endif 
9ced c9				ret 
9cee			 
9cee			; get current ret stack pointer and save to hl  
9cee				 
9cee			FORTH_LOOP_TOS: macro 
9cee				call macro_forth_loop_tos 
9cee				endm 
9cee			 
9cee			macro_forth_loop_tos: 
9cee d5				push de 
9cef 2a ea e9			ld hl,(cli_loop_sp) 
9cf2 5e				ld e, (hl) 
9cf3 23				inc hl 
9cf4 56				ld d, (hl) 
9cf5 eb				ex de, hl 
9cf6 d1				pop de 
9cf7 c9				ret 
9cf8			 
9cf8			; pop loop stack pointer 
9cf8				 
9cf8			FORTH_LOOP_POP: macro 
9cf8				call macro_forth_loop_pop 
9cf8				endm 
9cf8			 
9cf8			 
9cf8			macro_forth_loop_pop: 
9cf8				if DEBUG_FORTH_STACK_GUARD 
9cf8					DMARK "LPP" 
9cf8 f5				push af  
9cf9 3a 0d 9d			ld a, (.dmark)  
9cfc 32 65 ee			ld (debug_mark),a  
9cff 3a 0e 9d			ld a, (.dmark+1)  
9d02 32 66 ee			ld (debug_mark+1),a  
9d05 3a 0f 9d			ld a, (.dmark+2)  
9d08 32 67 ee			ld (debug_mark+2),a  
9d0b 18 03			jr .pastdmark  
9d0d ..			.dmark: db "LPP"  
9d10 f1			.pastdmark: pop af  
9d11			endm  
# End of macro DMARK
9d11 cd 0c da				call check_stacks 
9d14					FORTH_CHK_LOOP_UNDER 
9d14 e5				push hl 
9d15 d5				push de 
9d16 2a ea e9			ld hl,(cli_loop_sp) 
9d19 11 24 e9			ld de, cli_loop_stack 
9d1c cd 08 8d			call cmp16 
9d1f da 29 db			jp c, fault_loop_under 
9d22 d1				pop de 
9d23 e1				pop hl 
9d24				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d24				endif 
9d24 e5				push hl 
9d25 2a ea e9			ld hl,(cli_loop_sp) 
9d28 2b				dec hl 
9d29 2b				dec hl 
9d2a 22 ea e9			ld (cli_loop_sp), hl 
9d2d				; TODO do stack underflow checks 
9d2d e1				pop hl 
9d2e				if DEBUG_FORTH_STACK_GUARD 
9d2e cd 0c da				call check_stacks 
9d31					FORTH_CHK_LOOP_UNDER 
9d31 e5				push hl 
9d32 d5				push de 
9d33 2a ea e9			ld hl,(cli_loop_sp) 
9d36 11 24 e9			ld de, cli_loop_stack 
9d39 cd 08 8d			call cmp16 
9d3c da 29 db			jp c, fault_loop_under 
9d3f d1				pop de 
9d40 e1				pop hl 
9d41				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d41				endif 
9d41 c9				ret 
9d42			 
9d42			macro_forth_dsp_pop: 
9d42			 
9d42 e5				push hl 
9d43			 
9d43				; release malloc data 
9d43			 
9d43				if DEBUG_FORTH_STACK_GUARD 
9d43 cd 0c da				call check_stacks 
9d46					FORTH_CHK_DSP_UNDER 
9d46 e5				push hl 
9d47 d5				push de 
9d48 2a e8 e9			ld hl,(cli_data_sp) 
9d4b 11 22 e8			ld de, cli_data_stack 
9d4e cd 08 8d			call cmp16 
9d51 da 1d db			jp c, fault_dsp_under 
9d54 d1				pop de 
9d55 e1				pop hl 
9d56				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d56				endif 
9d56				;ld hl,(cli_data_sp) 
9d56			if DEBUG_FORTH_DOT 
9d56				DMARK "DPP" 
9d56 f5				push af  
9d57 3a 6b 9d			ld a, (.dmark)  
9d5a 32 65 ee			ld (debug_mark),a  
9d5d 3a 6c 9d			ld a, (.dmark+1)  
9d60 32 66 ee			ld (debug_mark+1),a  
9d63 3a 6d 9d			ld a, (.dmark+2)  
9d66 32 67 ee			ld (debug_mark+2),a  
9d69 18 03			jr .pastdmark  
9d6b ..			.dmark: db "DPP"  
9d6e f1			.pastdmark: pop af  
9d6f			endm  
# End of macro DMARK
9d6f				CALLMONITOR 
9d6f cd 6f ee			call debug_vector  
9d72				endm  
# End of macro CALLMONITOR
9d72			endif	 
9d72			 
9d72			 
9d72			if FORTH_ENABLE_DSPPOPFREE 
9d72			 
9d72				FORTH_DSP 
9d72 cd 50 9c			call macro_forth_dsp 
9d75				endm 
# End of macro FORTH_DSP
9d75			 
9d75 7e				ld a, (hl) 
9d76 fe 01			cp DS_TYPE_STR 
9d78 20 23			jr nz, .skippopfree 
9d7a			 
9d7a				FORTH_DSP_VALUEHL 
9d7a cd 8a 9c			call macro_dsp_valuehl 
9d7d				endm 
# End of macro FORTH_DSP_VALUEHL
9d7d 00				nop 
9d7e			if DEBUG_FORTH_DOT 
9d7e				DMARK "DPf" 
9d7e f5				push af  
9d7f 3a 93 9d			ld a, (.dmark)  
9d82 32 65 ee			ld (debug_mark),a  
9d85 3a 94 9d			ld a, (.dmark+1)  
9d88 32 66 ee			ld (debug_mark+1),a  
9d8b 3a 95 9d			ld a, (.dmark+2)  
9d8e 32 67 ee			ld (debug_mark+2),a  
9d91 18 03			jr .pastdmark  
9d93 ..			.dmark: db "DPf"  
9d96 f1			.pastdmark: pop af  
9d97			endm  
# End of macro DMARK
9d97				CALLMONITOR 
9d97 cd 6f ee			call debug_vector  
9d9a				endm  
# End of macro CALLMONITOR
9d9a			endif	 
9d9a cd 8f 91			call free 
9d9d			.skippopfree: 
9d9d				 
9d9d			 
9d9d			endif 
9d9d			 
9d9d			if DEBUG_FORTH_DOT_KEY 
9d9d				DMARK "DP2" 
9d9d				CALLMONITOR 
9d9d			endif	 
9d9d			 
9d9d				; move pointer down 
9d9d			 
9d9d 2a e8 e9			ld hl,(cli_data_sp) 
9da0 2b				dec hl 
9da1 2b				dec hl 
9da2			; PARSEV5 
9da2 2b				dec hl 
9da3 22 e8 e9			ld (cli_data_sp), hl 
9da6			 
9da6				if DEBUG_FORTH_STACK_GUARD 
9da6 cd 0c da				call check_stacks 
9da9					FORTH_CHK_DSP_UNDER 
9da9 e5				push hl 
9daa d5				push de 
9dab 2a e8 e9			ld hl,(cli_data_sp) 
9dae 11 22 e8			ld de, cli_data_stack 
9db1 cd 08 8d			call cmp16 
9db4 da 1d db			jp c, fault_dsp_under 
9db7 d1				pop de 
9db8 e1				pop hl 
9db9				endm 
# End of macro FORTH_CHK_DSP_UNDER
9db9				endif 
9db9			 
9db9 e1				pop hl 
9dba			 
9dba c9				ret 
9dbb			 
9dbb			getwordathl: 
9dbb				; hl points to an address 
9dbb				; load hl with the word at that address 
9dbb			 
9dbb d5				push de 
9dbc			 
9dbc 5e				ld e, (hl) 
9dbd 23				inc hl 
9dbe 56				ld d, (hl) 
9dbf eb				ex de, hl 
9dc0			 
9dc0 d1				pop de 
9dc1 c9				ret 
9dc2			 
9dc2			 
9dc2			; functions to manuplite stack pointers 
9dc2			 
9dc2			; generate fragment to set hl to be pointer to a stack item 
9dc2			 
9dc2			FORTH_DSP_PTR: macro  x 
9dc2				ld hl,(cli_data_sp) 
9dc2				ld de, x * 3 
9dc2				sbc hl, de 
9dc2				endm 
9dc2			 
9dc2			 
9dc2			 
9dc2			; copy point in hl to stack tmp storage slots 1-4 
9dc2			hltostack1: 
9dc2 11 b8 e2			ld de, os_stack_1  
9dc5 c3 f0 9d			jp hltostackmv 
9dc8			 
9dc8			hltostack2:  
9dc8 11 b5 e2			ld de, os_stack_2 
9dcb c3 f0 9d			jp hltostackmv 
9dce			 
9dce			hltostack3:  
9dce 11 b2 e2			ld de, os_stack_3 
9dd1 c3 f0 9d			jp hltostackmv 
9dd4			 
9dd4			hltostack4:  
9dd4 11 af e2			ld de, os_stack_4  
9dd7 c3 f0 9d			jp hltostackmv 
9dda			 
9dda			; copy to point in hl from stack tmp storage slots 1-4 
9dda			hlfromstack1: 
9dda 11 b8 e2			ld de, os_stack_1 
9ddd c3 ef 9d			jp hlfromsttackmv 
9de0			 
9de0			hlfromstack2:  
9de0 11 b5 e2			ld de, os_stack_2 
9de3 c3 ef 9d			jp hlfromsttackmv 
9de6			 
9de6			hlfromstack3:  
9de6 11 b2 e2			ld de, os_stack_3 
9de9 c3 ef 9d			jp hlfromsttackmv 
9dec			 
9dec			hlfromstack4:  
9dec 11 af e2			ld de, os_stack_4 
9def			 
9def			hlfromsttackmv: 
9def eb				ex de, hl 
9df0			 
9df0			hltostackmv: 
9df0			 
9df0				; do stack move 
9df0 c5				push bc 
9df1 01 03 00			ld bc, 3 
9df4 ed b0			ldir  
9df6 c1				pop bc	 
9df7 c9				ret 
9df8			 
9df8			; eof 
9df8			 
# End of file forth_stackopsv5.asm
9df8			endif 
9df8			 
9df8			loadwordinhl:	 
9df8			 
9df8 d5				push de 
9df9			 
9df9 5e				ld e, (hl) 
9dfa 23				inc hl 
9dfb 56				ld d, (hl) 
9dfc eb				ex de,hl  
9dfd			 
9dfd d1				pop de 
9dfe			 
9dfe c9				ret 
9dff			 
9dff			user_word_eol:  
9dff				; hl contains the pointer to where to create a linked list item from the end 
9dff				; of the user dict to continue on at the system word dict 
9dff				 
9dff				; poke the stub of the word list linked list to repoint to rom words 
9dff			 
9dff				; stub format 
9dff				; db   word id 
9dff				; dw    link to next word 
9dff			        ; db char length of token 
9dff				; db string + 0 term 
9dff				; db exec code....  
9dff			 
9dff 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e01 77				ld (hl), a		; word id 
9e02 23				inc hl 
9e03			 
9e03 11 ce 9f			ld de, sysdict 
9e06 73				ld (hl), e		; next word link ie system dict 
9e07 23				inc hl 
9e08 72				ld (hl), d		; next word link ie system dict 
9e09 23				inc hl	 
9e0a			 
9e0a			;	ld (hl), sysdict		; next word link ie system dict 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a 3e 02			ld a, 2			; word length is 0 
9e0c 77				ld (hl), a	 
9e0d 23				inc hl 
9e0e			 
9e0e 3e 7e			ld a, '~'			; word length is 0 
9e10 77				ld (hl), a	 
9e11 23				inc hl 
9e12 3e 00			ld a, 0			; save empty word 
9e14 77				ld (hl), a 
9e15			 
9e15 c9				ret 
9e16			 
9e16				 
9e16			 
9e16			forthexec_cleanup: 
9e16				FORTH_RSP_POP 
9e16 cd 4d 9a			call macro_forth_rsp_pop 
9e19				endm 
# End of macro FORTH_RSP_POP
9e19 c9				ret 
9e1a			 
9e1a			forth_call_hl: 
9e1a				; taking hl 
9e1a e5				push hl 
9e1b c9				ret 
9e1c			 
9e1c			; this is called to reset Forth system but keep existing uwords etc 
9e1c			 
9e1c			forth_warmstart: 
9e1c				; setup stack over/under flow checks 
9e1c				if DEBUG_FORTH_STACK_GUARD 
9e1c cd f2 d9				call chk_stk_init 
9e1f				endif 
9e1f			 
9e1f				; init stack pointers  - * these stacks go upwards *  
9e1f 21 a6 e9			ld hl, cli_ret_stack 
9e22 22 ec e9			ld (cli_ret_sp), hl	 
9e25				; set bottom of stack 
9e25 3e 00			ld a,0 
9e27 77				ld (hl),a 
9e28 23				inc hl 
9e29 77				ld (hl),a 
9e2a			 
9e2a 21 22 e8			ld hl, cli_data_stack 
9e2d 22 e8 e9			ld (cli_data_sp), hl	 
9e30				; set bottom of stack 
9e30 3e 00			ld a,0 
9e32 77				ld (hl),a 
9e33 23				inc hl 
9e34 77				ld (hl),a 
9e35			 
9e35 21 24 e9			ld hl, cli_loop_stack 
9e38 22 ea e9			ld (cli_loop_sp), hl	 
9e3b				; set bottom of stack 
9e3b 3e 00			ld a,0 
9e3d 77				ld (hl),a 
9e3e 23				inc hl 
9e3f 77				ld (hl),a 
9e40			 
9e40				; init extent of current open file 
9e40			 
9e40 3e 00			ld a, 0 
9e42 32 64 ea			ld (store_openext), a 
9e45			 
9e45 c9				ret 
9e46			 
9e46			 
9e46			 
9e46			; Cold Start - this is called to setup the whole Forth system 
9e46			 
9e46			forth_init: 
9e46			 
9e46				; setup stack over/under flow checks 
9e46			 
9e46			;	if DEBUG_FORTH_STACK_GUARD 
9e46			;		call chk_stk_init 
9e46			;	endif 
9e46			 
9e46				; enable auto display updates (slow.....) 
9e46			 
9e46 3e 01			ld a, 1 
9e48 32 36 ea			ld (cli_autodisplay), a 
9e4b			 
9e4b				; if storage is in use disable long reads for now 
9e4b 3e 00			ld a, 0 
9e4d 32 6f ea			ld (store_longread), a 
9e50			 
9e50			 
9e50				; show start up screen 
9e50			 
9e50 cd bd 8a			call clear_display 
9e53			 
9e53 3e 00			ld a,0 
9e55 32 58 ea			ld (f_cursor_ptr), a 
9e58			 
9e58				; set start of word list in start of ram - for use when creating user words 
9e58			 
9e58 21 af dd			ld hl, baseram 
9e5b 22 b8 e5			ld (os_last_new_uword), hl 
9e5e cd ff 9d			call user_word_eol 
9e61				 
9e61			;		call display_data_sp 
9e61			;		call next_page_prompt 
9e61			 
9e61			 
9e61			 
9e61			 
9e61 c9				ret 
9e62			 
9e62 .. 00		.bootforth: db " Forth Kernel Init ",0 
9e76			 
9e76			; TODO push to stack 
9e76			 
9e76			;  
9e76			 
9e76			if FORTH_PARSEV2 
9e76			 
9e76			 
9e76				include "forth_parserv2.asm" 
9e76			 
9e76			endif 
9e76			 
9e76			 
9e76			; parse cli version 1 
9e76			 
9e76			if FORTH_PARSEV1 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv1.asm" 
9e76			endif 
9e76				 
9e76			if FORTH_PARSEV3 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv3.asm" 
9e76				include "forth_wordsv3.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV4 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv4.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV5 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv5.asm" 
9e76			 
9e76			 
9e76			; A better parser without using malloc and string copies all over the place.  
9e76			; Exec in situ should be faster 
9e76			 
9e76			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e76			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e76			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e76			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e76			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e76			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e76			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e76			 
9e76			; Core word preamble macro 
9e76			 
9e76			CWHEAD:   macro nxtword opcode lit len opflags 
9e76				db WORD_SYS_CORE+opcode             
9e76				; internal op code number 
9e76				dw nxtword            
9e76				; link to next dict word block 
9e76				db len + 1 
9e76				; literal length of dict word inc zero term 
9e76				db lit,0              
9e76				; literal dict word 
9e76			        ; TODO db opflags        
9e76				endm 
9e76			 
9e76			 
9e76			NEXTW: macro  
9e76				jp macro_next 
9e76				endm 
9e76			 
9e76			macro_next: 
9e76			if DEBUG_FORTH_PARSE_KEY 
9e76				DMARK "NXT" 
9e76				CALLMONITOR 
9e76			endif	 
9e76			;	inc hl  ; skip token null term  
9e76 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e7a ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e7e 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e81			if DEBUG_FORTH_PARSE_KEY 
9e81				DMARK "}AA" 
9e81				CALLMONITOR 
9e81			endif	 
9e81 c3 84 9f			jp execnext 
9e84				;jp exec1 
9e84			       
9e84			 
9e84			 
9e84			; Another go at the parser to compile  
9e84			 
9e84			 
9e84			; TODO rework parser to change all of the string words to byte tokens 
9e84			; TODO do a search for  
9e84			 
9e84			; TODO first run normal parser to zero term sections 
9e84			; TODO for each word do a token look up to get the op code 
9e84			; TODO need some means to flag to the exec that this is a byte code form    
9e84			 
9e84			 
9e84			forthcompile: 
9e84			 
9e84			; 
9e84			; line parse: 
9e84			;       parse raw input buffer 
9e84			;       tokenise the words 
9e84			;       malloc new copy (for looping etc) 
9e84			;       copy to malloc + current pc in line to start of string and add line term 
9e84			;       save on new rsp 
9e84			; 
9e84			 
9e84			; hl to point to the line to tokenise 
9e84			 
9e84			;	push hl 
9e84 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e87			 
9e87			;	ld a,0		; string term on input 
9e87			;	call strlent 
9e87			 
9e87			;	ld (os_tok_len), hl	 ; save string length 
9e87			 
9e87			;if DEBUG_FORTH_TOK 
9e87			;	ex de,hl		 
9e87			;endif 
9e87			 
9e87			;	pop hl 		; get back string pointer 
9e87			 
9e87			if DEBUG_FORTH_TOK 
9e87						DMARK "TOc" 
9e87				CALLMONITOR 
9e87			endif 
9e87 7e			.cptoken2:    ld a,(hl) 
9e88 23				inc hl 
9e89 fe 7f			cp FORTH_END_BUFFER 
9e8b 28 29			jr z, .cptokendone2 
9e8d fe 00			cp 0 
9e8f 28 25			jr z, .cptokendone2 
9e91 fe 22			cp '"' 
9e93 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e95 fe 20			cp ' ' 
9e97 20 ee			jr nz,  .cptoken2 
9e99			 
9e99			; TODO consume comments held between ( and ) 
9e99			 
9e99				; we have a space so change to zero term for dict match later 
9e99 2b				dec hl 
9e9a 3e 00			ld a,0 
9e9c 77				ld (hl), a 
9e9d 23				inc hl 
9e9e 18 e7			jr .cptoken2 
9ea0				 
9ea0			 
9ea0			.cptokenstr2: 
9ea0				; skip all white space until either eol (because forgot to term) or end double quote 
9ea0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ea0				;inc hl ; skip current double quote 
9ea0 7e				ld a,(hl) 
9ea1 23				inc hl 
9ea2 fe 22			cp '"' 
9ea4 28 e1			jr z, .cptoken2 
9ea6 fe 7f			cp FORTH_END_BUFFER 
9ea8 28 0c			jr z, .cptokendone2 
9eaa fe 00			cp 0 
9eac 28 08			jr z, .cptokendone2 
9eae fe 20			cp ' ' 
9eb0 28 02			jr z, .cptmp2 
9eb2 18 ec			jr .cptokenstr2 
9eb4			 
9eb4			.cptmp2:	; we have a space so change to zero term for dict match later 
9eb4				;dec hl 
9eb4				;ld a,"-"	; TODO remove this when working 
9eb4				;ld (hl), a 
9eb4				;inc hl 
9eb4 18 ea			jr .cptokenstr2 
9eb6			 
9eb6			.cptokendone2: 
9eb6				;inc hl 
9eb6 3e 7f			ld a, FORTH_END_BUFFER 
9eb8 77				ld (hl),a 
9eb9 23				inc hl 
9eba 3e 21			ld a, '!' 
9ebc 77				ld (hl),a 
9ebd			 
9ebd 2a bc e5			ld hl,(os_tok_ptr) 
9ec0			         
9ec0			if DEBUG_FORTH_TOK 
9ec0						DMARK "Tc1" 
9ec0				CALLMONITOR 
9ec0			endif 
9ec0			 
9ec0				; push exec string to top of return stack 
9ec0				FORTH_RSP_NEXT 
9ec0 cd 2c 9a			call macro_forth_rsp_next 
9ec3				endm 
# End of macro FORTH_RSP_NEXT
9ec3 c9				ret 
9ec4			 
9ec4			; Another go at the parser need to simplify the process 
9ec4			 
9ec4			forthparse: 
9ec4			 
9ec4			; 
9ec4			; line parse: 
9ec4			;       parse raw input buffer 
9ec4			;       tokenise the words 
9ec4			;       malloc new copy (for looping etc) 
9ec4			;       copy to malloc + current pc in line to start of string and add line term 
9ec4			;       save on new rsp 
9ec4			; 
9ec4			 
9ec4			; hl to point to the line to tokenise 
9ec4			 
9ec4			;	push hl 
9ec4 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ec7			 
9ec7			;	ld a,0		; string term on input 
9ec7			;	call strlent 
9ec7			 
9ec7			;	ld (os_tok_len), hl	 ; save string length 
9ec7			 
9ec7			;if DEBUG_FORTH_TOK 
9ec7			;	ex de,hl		 
9ec7			;endif 
9ec7			 
9ec7			;	pop hl 		; get back string pointer 
9ec7			 
9ec7			if DEBUG_FORTH_TOK 
9ec7						DMARK "TOK" 
9ec7				CALLMONITOR 
9ec7			endif 
9ec7 7e			.ptoken2:    ld a,(hl) 
9ec8 23				inc hl 
9ec9 fe 7f			cp FORTH_END_BUFFER 
9ecb 28 29			jr z, .ptokendone2 
9ecd fe 00			cp 0 
9ecf 28 25			jr z, .ptokendone2 
9ed1 fe 22			cp '"' 
9ed3 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9ed5 fe 20			cp ' ' 
9ed7 20 ee			jr nz,  .ptoken2 
9ed9			 
9ed9			; TODO consume comments held between ( and ) 
9ed9			 
9ed9				; we have a space so change to zero term for dict match later 
9ed9 2b				dec hl 
9eda 3e 00			ld a,0 
9edc 77				ld (hl), a 
9edd 23				inc hl 
9ede 18 e7			jr .ptoken2 
9ee0				 
9ee0			 
9ee0			.ptokenstr2: 
9ee0				; skip all white space until either eol (because forgot to term) or end double quote 
9ee0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ee0				;inc hl ; skip current double quote 
9ee0 7e				ld a,(hl) 
9ee1 23				inc hl 
9ee2 fe 22			cp '"' 
9ee4 28 e1			jr z, .ptoken2 
9ee6 fe 7f			cp FORTH_END_BUFFER 
9ee8 28 0c			jr z, .ptokendone2 
9eea fe 00			cp 0 
9eec 28 08			jr z, .ptokendone2 
9eee fe 20			cp ' ' 
9ef0 28 02			jr z, .ptmp2 
9ef2 18 ec			jr .ptokenstr2 
9ef4			 
9ef4			.ptmp2:	; we have a space so change to zero term for dict match later 
9ef4				;dec hl 
9ef4				;ld a,"-"	; TODO remove this when working 
9ef4				;ld (hl), a 
9ef4				;inc hl 
9ef4 18 ea			jr .ptokenstr2 
9ef6			 
9ef6			.ptokendone2: 
9ef6				;inc hl 
9ef6 3e 7f			ld a, FORTH_END_BUFFER 
9ef8 77				ld (hl),a 
9ef9 23				inc hl 
9efa 3e 21			ld a, '!' 
9efc 77				ld (hl),a 
9efd			 
9efd 2a bc e5			ld hl,(os_tok_ptr) 
9f00			         
9f00			if DEBUG_FORTH_TOK 
9f00						DMARK "TK1" 
9f00				CALLMONITOR 
9f00			endif 
9f00			 
9f00				; push exec string to top of return stack 
9f00				FORTH_RSP_NEXT 
9f00 cd 2c 9a			call macro_forth_rsp_next 
9f03				endm 
# End of macro FORTH_RSP_NEXT
9f03 c9				ret 
9f04			 
9f04			; 
9f04			;	; malloc size + buffer pointer + if is loop flag 
9f04			;	ld hl,(os_tok_len) 		 ; get string length 
9f04			; 
9f04			;	ld a,l 
9f04			; 
9f04			;	cp 0			; we dont want to use a null string 
9f04			;	ret z 
9f04			; 
9f04			;;	add 3    ; prefix malloc with buffer for current word ptr 
9f04			; 
9f04			;	add 5     ; TODO when certain not over writing memory remove 
9f04			; 
9f04			;		 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKE" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	ld l,a 
9f04			;	ld h,0 
9f04			;;	push hl   ; save required space for the copy later 
9f04			;	call malloc 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKM" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			;	if DEBUG_FORTH_MALLOC_GUARD 
9f04			;		push af 
9f04			;		call ishlzero 
9f04			;;		ld a, l 
9f04			;;		add h 
9f04			;;		cp 0 
9f04			;		pop af 
9f04			;		 
9f04			;		call z,malloc_error 
9f04			;	endif 
9f04			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9f04			; 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKR" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	FORTH_RSP_NEXT 
9f04			; 
9f04			;	;inc hl	 ; go past current buffer pointer 
9f04			;	;inc hl 
9f04			;	;inc hl   ; and past if loop flag 
9f04			;		; TODO Need to set flag  
9f04			; 
9f04			;	 
9f04			;	 
9f04			;	ex de,hl	; malloc is dest 
9f04			;	ld hl, (os_tok_len) 
9f04			;;	pop bc 
9f04			;	ld c, l                
9f04			;	ld b,0 
9f04			;	ld hl, (os_tok_ptr) 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKT" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	; do str cpy 
9f04			; 
9f04			;	ldir      ; copy byte in hl to de 
9f04			; 
9f04			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			; 
9f04			;			DMARK "TKY" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			;	;ld a,0 
9f04			;	;ld a,FORTH_END_BUFFER 
9f04			;	ex de, hl 
9f04			;	;dec hl			 ; go back over the space delim at the end of word 
9f04			;	;ld (hl),a 
9f04			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9f04			;	ld a,FORTH_END_BUFFER 
9f04			;	ld (hl),a 
9f04			;	inc hl 
9f04			;	ld a,FORTH_END_BUFFER 
9f04			;	ld (hl),a 
9f04			; 
9f04			;	; init the malloc area data 
9f04			;	; set pc for in current area 
9f04			;	;ld hl, (os_tok_malloc) 
9f04			;	;inc hl 
9f04			;	;inc hl 
9f04			;	;inc hl 
9f04			;	;ex de,hl 
9f04			;	;ld hl, (os_tok_malloc) 
9f04			;	;ld (hl),e 
9f04			;	;inc hl 
9f04			;	;ld (hl),d 
9f04			; 
9f04			; 
9f04			;	ld hl,(os_tok_malloc) 
9f04			;if DEBUG_FORTH_PARSE_KEY 
9f04			;			DMARK "TKU" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	ret 
9f04			 
9f04			forthexec: 
9f04			 
9f04			; line exec: 
9f04			; forth parser 
9f04			 
9f04			; 
9f04			;       get current exec line on rsp 
9f04			 
9f04				FORTH_RSP_TOS 
9f04 cd 43 9a			call macro_forth_rsp_tos 
9f07				endm 
# End of macro FORTH_RSP_TOS
9f07			 
9f07			;       restore current pc - hl points to malloc of data 
9f07			 
9f07				;ld e, (hl) 
9f07				;inc hl 
9f07				;ld d, (hl) 
9f07				;ex de,hl 
9f07			 
9f07			 
9f07			exec1: 
9f07 22 bc e5			ld (os_tok_ptr), hl 
9f0a			 
9f0a				; copy our PC to working vars  
9f0a 22 3a ea			ld (cli_ptr), hl 
9f0d 22 38 ea			ld (cli_origptr), hl 
9f10			 
9f10 7e				ld a,(hl) 
9f11 fe 7f			cp FORTH_END_BUFFER 
9f13 c8				ret z 
9f14			 
9f14				; skip any nulls 
9f14			 
9f14 fe 00			cp 0 
9f16 20 03			jr nz, .execword 
9f18 23				inc hl 
9f19 18 ec			jr exec1 
9f1b			 
9f1b			 
9f1b			.execword: 
9f1b			 
9f1b			 
9f1b			 
9f1b			if DEBUG_FORTH_PARSE_KEY 
9f1b						DMARK "KYQ" 
9f1b				CALLMONITOR 
9f1b			endif 
9f1b			;       while at start of word: 
9f1b			; get start of dict (in user area first) 
9f1b			 
9f1b 21 af dd		ld hl, baseram 
9f1e			;ld hl, sysdict 
9f1e 22 3c ea		ld (cli_nextword),hl 
9f21			;           match word at pc 
9f21			;           exec word 
9f21			;           or push to dsp 
9f21			;           forward to next token 
9f21			;           if line term pop rsp and exit 
9f21			;        
9f21			 
9f21			if DEBUG_FORTH_PARSE_KEY 
9f21						DMARK "KYq" 
9f21				CALLMONITOR 
9f21			endif 
9f21			 
9f21			; 
9f21			; word comp 
9f21			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f21			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f21			;    move to start of word  
9f21			;    compare word to cli_token 
9f21			 
9f21			.execpnword:	; HL at start of a word in the dictionary to check 
9f21			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
9f21			;	ld (cli_ptr), hl 
9f21			 
9f21 2a 3c ea			ld hl,(cli_nextword) 
9f24			 
9f24 cd c7 9f			call forth_tok_next 
9f27			; tok next start here 
9f27			;	; TODO skip compiled symbol for now 
9f27			;	inc hl 
9f27			; 
9f27			;	; save pointer to next word 
9f27			; 
9f27			;	; hl now points to the address of the next word pointer  
9f27			;	ld e, (hl) 
9f27			;	inc hl 
9f27			;	ld d, (hl) 
9f27			;	inc l 
9f27			; 
9f27			;	ex de,hl 
9f27			;if DEBUG_FORTH_PARSE_NEXTWORD 
9f27			;	push bc 
9f27			;	ld bc, (cli_nextword) 
9f27			;			DMARK "NXW" 
9f27			;	CALLMONITOR 
9f27			;	pop bc 
9f27			;endif 
9f27			; tok next end here 
9f27 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f2a eb				ex de, hl 
9f2b			 
9f2b			 
9f2b				; save the pointer of the current token - 1 to check against 
9f2b				 
9f2b 22 40 ea			ld (cli_token), hl   
9f2e				; TODO maybe remove below save if no debug 
9f2e				; save token string ptr for any debug later 
9f2e 23				inc hl  
9f2f 22 42 ea			ld (cli_origtoken), hl 
9f32 2b				dec hl 
9f33				; save pointer to the start of the next dictionay word 
9f33 7e				ld a,(hl)   ; get string length 
9f34 47				ld b,a 
9f35			.execpnwordinc:  
9f35 23				inc hl 
9f36 10 fd			djnz .execpnwordinc 
9f38 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
9f3b			 
9f3b				; now check the word token against the string being parsed 
9f3b			 
9f3b 2a 40 ea			ld hl,(cli_token) 
9f3e 23				inc hl     ; skip string length (use zero term instead to end) 
9f3f 22 40 ea			ld (cli_token), hl 
9f42			 
9f42			if DEBUG_FORTH_PARSE_KEY 
9f42						DMARK "KY2" 
9f42			endif 
9f42			if DEBUG_FORTH_PARSE_EXEC 
9f42				; see if disabled 
9f42			 
9f42			;	ld a, (os_view_disable) 
9f42			;	cp '*' 
9f42				ld a, (debug_vector) 
9f42				cp $c9   ; RET  
9f42				jr z, .skip 
9f42			 
9f42				push hl 
9f42				push hl 
9f42				call clear_display 
9f42				ld de, .compword 
9f42				ld a, display_row_1 
9f42				call str_at_display 
9f42				pop de 
9f42				ld a, display_row_2 
9f42				call str_at_display 
9f42				ld hl,(cli_ptr) 
9f42				ld a,(hl) 
9f42			        ld hl, os_word_scratch 
9f42				ld (hl),a 
9f42				ld a,0 
9f42				inc hl 
9f42				ld (hl),a 	 
9f42				ld de, os_word_scratch 
9f42				ld a, display_row_2+10 
9f42				call str_at_display 
9f42				call update_display 
9f42				ld a, 100 
9f42				call aDelayInMS 
9f42				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f42				call delay250ms 
9f42				endif 
9f42				pop hl 
9f42			.skip:  
9f42			endif	 
9f42			.execpnchar:    ; compare char between token and string to parse 
9f42			 
9f42			if DEBUG_FORTH_PARSE_KEY 
9f42						DMARK "Ky3" 
9f42			endif 
9f42			if DEBUG_FORTH_PARSE_EXEC 
9f42				; see if disabled 
9f42			 
9f42			;	ld a, (os_view_disable) 
9f42			;	cp '*' 
9f42				ld a, (debug_vector) 
9f42				cp $C9  ; RET 
9f42				jr z, .skip2 
9f42			 
9f42			;	call clear_display 
9f42			ld hl,(cli_token) 
9f42			ld a,(hl) 
9f42			ld (os_word_scratch),a 
9f42				ld hl,(cli_ptr) 
9f42			ld a,(hl) 
9f42				ld (os_word_scratch+1),a 
9f42				ld a,0 
9f42				ld (os_word_scratch+2),a 
9f42				ld de,os_word_scratch 
9f42				ld a,display_row_4 
9f42				call str_at_display 
9f42				call update_display 
9f42			.skip2:  
9f42			endif 
9f42 2a 40 ea			ld hl,(cli_token) 
9f45 7e				ld a, (hl)	 ; char in word token 
9f46 23				inc hl 		; move to next char 
9f47 22 40 ea			ld (cli_token), hl ; and save it 
9f4a 47				ld b,a 
9f4b			 
9f4b 2a 3a ea			ld hl,(cli_ptr) ;	get the char from the string to parse 
9f4e 7e				ld a,(hl) 
9f4f 23				inc hl 
9f50 22 3a ea			ld (cli_ptr), hl		; move to next char 
9f53 cd 47 90			call toUpper 		; make sure the input string matches case 
9f56			 
9f56			if DEBUG_FORTH_PARSE 
9f56			endif 
9f56			 
9f56				; input stream end of token is a space so get rid of it 
9f56			 
9f56			;	cp ' ' 
9f56			;	jr nz, .pnskipspace 
9f56			; 
9f56			;	ld a, 0		; make same term as word token term 
9f56			; 
9f56			;.pnskipspace: 
9f56			 
9f56			if DEBUG_FORTH_PARSE_KEY 
9f56						DMARK "KY7" 
9f56			endif 
9f56 b8				cp b 
9f57 c2 6d 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9f5a				 
9f5a			;    if same 
9f5a			;       scan for string terms 0 for token and 32 for input 
9f5a			 
9f5a				 
9f5a			if DEBUG_FORTH_PARSE_KEY 
9f5a						DMARK "KY8" 
9f5a			endif 
9f5a			 
9f5a 80				add b			 
9f5b fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9f5d							; TODO need to make sure last word in zero term string is accounted for 
9f5d 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
9f5f			 
9f5f			 
9f5f				; at end of both strings so both are exact match 
9f5f			 
9f5f			;       skip ptr for next word 
9f5f			 
9f5f 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
9f62 23				inc hl			 ; at next char 
9f63 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
9f66 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f69				 
9f69				 
9f69			if DEBUG_FORTH_PARSE_KEY 
9f69						DMARK "KY3" 
9f69			endif 
9f69			 
9f69			 
9f69			 
9f69			;       exec code block 
9f69			if DEBUG_FORTH_JP 
9f69				call clear_display 
9f69				call update_display 
9f69				call delay1s 
9f69				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f69				ld a,h 
9f69				ld hl, os_word_scratch 
9f69				call hexout 
9f69				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f69				ld a,l 
9f69				ld hl, os_word_scratch+2 
9f69				call hexout 
9f69				ld hl, os_word_scratch+4 
9f69				ld a,0 
9f69				ld (hl),a 
9f69				ld de,os_word_scratch 
9f69				call str_at_display 
9f69					ld a, display_row_2 
9f69					call str_at_display 
9f69				ld de, (cli_origtoken) 
9f69				ld a, display_row_1+10 
9f69					call str_at_display 
9f69			 
9f69				ld a,display_row_1 
9f69				ld de, .foundword 
9f69				ld a, display_row_3 
9f69				call str_at_display 
9f69				call update_display 
9f69				call delay1s 
9f69				call delay1s 
9f69				call delay1s 
9f69			endif 
9f69			 
9f69			if DEBUG_FORTH_PARSE_KEY 
9f69						DMARK "KYj" 
9f69			endif 
9f69				; TODO save the word pointer in this exec 
9f69			 
9f69 2a 3e ea			ld hl,(cli_execword) 
9f6c e9				jp (hl) 
9f6d			 
9f6d			 
9f6d			;    if not same 
9f6d			;	scan for zero term 
9f6d			;	get ptr for next word 
9f6d			;	goto word comp 
9f6d			 
9f6d			.execpnskipword:	; get pointer to next word 
9f6d 2a 3c ea			ld hl,(cli_nextword) 
9f70			 
9f70 7e				ld a,(hl) 
9f71 fe 00			cp WORD_SYS_END 
9f73			;	cp 0 
9f73 28 09			jr z, .execendofdict			 ; at end of words 
9f75			 
9f75			if DEBUG_FORTH_PARSE_KEY 
9f75						DMARK "KY4" 
9f75			endif 
9f75			if DEBUG_FORTH_PARSE_EXEC 
9f75			 
9f75				; see if disabled 
9f75			 
9f75			;	ld a, (os_view_disable) 
9f75			;	cp '*' 
9f75				ld a,(debug_vector) 
9f75				cp $c9   ; RET 
9f75				jr z, .noskip 
9f75			 
9f75			 
9f75				ld de, .nowordfound 
9f75				ld a, display_row_3 
9f75				call str_at_display 
9f75				call update_display 
9f75				ld a, 100 
9f75				call aDelayInMS 
9f75				 
9f75				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f75					call delay250ms 
9f75				endif 
9f75			.noskip:  
9f75			 
9f75			endif	 
9f75			 
9f75 2a 38 ea			ld hl,(cli_origptr) 
9f78 22 3a ea			ld (cli_ptr),hl 
9f7b			 
9f7b			if DEBUG_FORTH_PARSE_KEY 
9f7b						DMARK "KY5" 
9f7b			endif 
9f7b c3 21 9f			jp .execpnword			; else go to next word 
9f7e			 
9f7e			.execendofdict:  
9f7e			 
9f7e			if DEBUG_FORTH_PARSE_KEY 
9f7e						DMARK "KYe" 
9f7e			endif 
9f7e			if DEBUG_FORTH_PARSE_EXEC 
9f7e				; see if disabled 
9f7e			 
9f7e			;	ld a, (os_view_disable) 
9f7e			;	cp '*' 
9f7e				ld a,(debug_vector) 
9f7e				cp $c9   ; ret 
9f7e				jr z, .ispskip 
9f7e			 
9f7e				call clear_display 
9f7e				call update_display 
9f7e				call delay1s 
9f7e				ld de, (cli_origptr) 
9f7e				ld a, display_row_1 
9f7e				call str_at_display 
9f7e				 
9f7e				ld de, .enddict 
9f7e				ld a, display_row_3 
9f7e				call str_at_display 
9f7e				call update_display 
9f7e				ld a, 100 
9f7e				call aDelayInMS 
9f7e				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f7e				call delay1s 
9f7e				call delay1s 
9f7e				call delay1s 
9f7e				endif 
9f7e			.ispskip:  
9f7e				 
9f7e			endif	 
9f7e			 
9f7e			 
9f7e			 
9f7e				; if the word is not a keyword then must be a literal so push it to stack 
9f7e			 
9f7e			; push token to stack to end of word 
9f7e			 
9f7e				STACKFRAME ON $1efe $2f9f 
9f7e				if DEBUG_STACK_IMB 
9f7e					if ON 
9f7e						exx 
9f7e						ld de, $1efe 
9f7e						ld a, d 
9f7e						ld hl, curframe 
9f7e						call hexout 
9f7e						ld a, e 
9f7e						ld hl, curframe+2 
9f7e						call hexout 
9f7e						ld hl, $1efe 
9f7e						push hl 
9f7e						ld hl, $2f9f 
9f7e						push hl 
9f7e						exx 
9f7e					endif 
9f7e				endif 
9f7e			endm 
# End of macro STACKFRAME
9f7e			 
9f7e 2a bc e5		ld hl,(os_tok_ptr) 
9f81 cd ee 9b		call forth_apush 
9f84			 
9f84				STACKFRAMECHK ON $1efe $2f9f 
9f84				if DEBUG_STACK_IMB 
9f84					if ON 
9f84						exx 
9f84						ld hl, $2f9f 
9f84						pop de   ; $2f9f 
9f84						call cmp16 
9f84						jr nz, .spnosame 
9f84						ld hl, $1efe 
9f84						pop de   ; $1efe 
9f84						call cmp16 
9f84						jr z, .spfrsame 
9f84						.spnosame: call showsperror 
9f84						.spfrsame: nop 
9f84						exx 
9f84					endif 
9f84				endif 
9f84			endm 
# End of macro STACKFRAMECHK
9f84			 
9f84			execnext: 
9f84			 
9f84			if DEBUG_FORTH_PARSE_KEY 
9f84						DMARK "KY>" 
9f84			endif 
9f84			; move past token to next word 
9f84			 
9f84 2a bc e5		ld hl, (os_tok_ptr) 
9f87 3e 00		ld a, 0 
9f89 01 ff 00		ld bc, 255     ; input buffer size 
9f8c ed b1		cpir 
9f8e			 
9f8e			if DEBUG_FORTH_PARSE_KEY 
9f8e						DMARK "KY!" 
9f8e				CALLMONITOR 
9f8e			endif	 
9f8e			; TODO this might place hl on the null, so will need to forward on??? 
9f8e			;inc hl   ; see if this gets onto the next item 
9f8e			 
9f8e			 
9f8e			; TODO pass a pointer to the buffer to push 
9f8e			; TODO call function to push 
9f8e			 
9f8e			; look for end of input 
9f8e			 
9f8e			;inc hl 
9f8e			;ld a,(hl) 
9f8e			;cp FORTH_END_BUFFER 
9f8e			;ret z 
9f8e			 
9f8e			 
9f8e c3 07 9f		jp exec1 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			findnexttok: 
9f91			 
9f91				; hl is pointer to move 
9f91				; de is the token to locate 
9f91			 
9f91					if DEBUG_FORTH 
9f91						DMARK "NTK" 
9f91						CALLMONITOR 
9f91					endif 
9f91 d5				push de 
9f92			 
9f92			.fnt1:	 
9f92				; find first char of token to locate 
9f92			 
9f92 1a				ld a, (de) 
9f93 4f				ld c,a 
9f94 7e				ld a,(hl) 
9f95 cd 47 90			call toUpper 
9f98					if DEBUG_FORTH 
9f98						DMARK "NT1" 
9f98						CALLMONITOR 
9f98					endif 
9f98 b9				cp c 
9f99			 
9f99 28 03			jr z, .fnt2cmpmorefirst	 
9f9b			 
9f9b				; first char not found move to next char 
9f9b			 
9f9b 23				inc hl 
9f9c 18 f4			jr .fnt1 
9f9e			 
9f9e			.fnt2cmpmorefirst:	 
9f9e				; first char of token found.  
9f9e			 
9f9e e5				push hl     ; save start of token just in case it is the right one 
9f9f d9				exx 
9fa0 e1				pop hl        ; save it to hl' 
9fa1 d9				exx 
9fa2			 
9fa2			 
9fa2			.fnt2cmpmore:	 
9fa2				; compare the rest 
9fa2				 
9fa2 23				inc hl 
9fa3 13				inc de 
9fa4				 
9fa4 1a				ld a, (de) 
9fa5 4f				ld c,a 
9fa6 7e				ld a,(hl) 
9fa7 cd 47 90			call toUpper 
9faa			 
9faa					if DEBUG_FORTH 
9faa						DMARK "NT2" 
9faa						CALLMONITOR 
9faa					endif 
9faa				; c has the token to find char 
9faa				; a has the mem to scan char 
9faa			 
9faa b9				cp c 
9fab 28 04			jr z,.fntmatch1 
9fad			 
9fad				; they are not the same 
9fad			 
9fad					if DEBUG_FORTH 
9fad						DMARK "NT3" 
9fad						CALLMONITOR 
9fad					endif 
9fad d1				pop de	; reset de token to look for 
9fae d5				push de 
9faf 18 e1			jr .fnt1 
9fb1				 
9fb1			.fntmatch1: 
9fb1			 
9fb1				; is the same char a null which means we might have a full hit? 
9fb1					if DEBUG_FORTH 
9fb1						DMARK "NT4" 
9fb1						CALLMONITOR 
9fb1					endif 
9fb1			 
9fb1 fe 00			cp 0 
9fb3 28 0b			jr z, .fntmatchyes 
9fb5			 
9fb5				; are we at the end of the token to find? 
9fb5			 
9fb5					if DEBUG_FORTH 
9fb5						DMARK "NT5" 
9fb5						CALLMONITOR 
9fb5					endif 
9fb5 3e 00			ld a, 0 
9fb7 b9				cp c 
9fb8			 
9fb8 c2 a2 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9fbb			 
9fbb					if DEBUG_FORTH 
9fbb						DMARK "NT6" 
9fbb						CALLMONITOR 
9fbb					endif 
9fbb				; token to find is exhusted but no match to stream 
9fbb			 
9fbb				; restore tok pointer and continue on 
9fbb d1				pop de 
9fbc d5				push de 
9fbd c3 92 9f			jp .fnt1 
9fc0			 
9fc0			 
9fc0			.fntmatchyes: 
9fc0			 
9fc0				; hl now contains the end of the found token 
9fc0			 
9fc0				; get rid of saved token pointer to find 
9fc0			 
9fc0 d1				pop de 
9fc1			 
9fc1					if DEBUG_FORTH 
9fc1						DMARK "NT9" 
9fc1						CALLMONITOR 
9fc1					endif 
9fc1			 
9fc1				; hl will be on the null term so forward on 
9fc1			 
9fc1				; get back the saved start of the token 
9fc1			 
9fc1 d9				exx 
9fc2 e5				push hl     ; save start of token just in case it is the right one 
9fc3 d9				exx 
9fc4 e1				pop hl        ; save it to hl 
9fc5			 
9fc5 c9				ret 
9fc6			 
9fc6			 
9fc6			; LIST needs to find a specific token   
9fc6			; FORGET needs to find a spefici token 
9fc6			 
9fc6			; SAVE needs to find all tokens by flag 
9fc6			; WORDS just needs to scan through all  by flag 
9fc6			; UWORDS needs to scan through all by flag 
9fc6			 
9fc6			 
9fc6			; given hl as pointer to start of dict look up string 
9fc6			; return hl as pointer to start of word block 
9fc6			; or 0 if not found 
9fc6			 
9fc6			forth_find_tok: 
9fc6 c9				ret 
9fc7			 
9fc7			; given hl as pointer to dict structure 
9fc7			; move to the next dict block structure 
9fc7			 
9fc7			forth_tok_next: 
9fc7				; hl now points to the address of the next word pointer  
9fc7				; TODO skip compiled symbol for now 
9fc7			;	push de 
9fc7 23				inc hl 
9fc8 5e				ld e, (hl) 
9fc9 23				inc hl 
9fca 56				ld d, (hl) 
9fcb 23				inc hl 
9fcc			 
9fcc eb				ex de,hl 
9fcd			if DEBUG_FORTH_PARSE_NEXTWORD 
9fcd				push bc 
9fcd				ld bc, (cli_nextword) 
9fcd						DMARK "NXW" 
9fcd				CALLMONITOR 
9fcd				pop bc 
9fcd			endif 
9fcd			;	pop de	 
9fcd c9				ret 
9fce			 
9fce			 
9fce			 
9fce			; eof 
# End of file forth_parserv5.asm
9fce				include "forth_wordsv4.asm" 
9fce			 
9fce			; the core word dictionary v4 
9fce			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9fce			 
9fce			; this is a linked list for each of the system words used 
9fce			; user defined words will follow the same format but will be in ram 
9fce			 
9fce			 
9fce			; 
9fce			; 
9fce			; define linked list: 
9fce			; 
9fce			; 1. compiled byte op code 
9fce			; 2. len of text word 
9fce			; 3. text word 
9fce			; 4. ptr to next dictionary word 
9fce			; 5. asm, calls etc for the word 
9fce			; 
9fce			;  if 1 == 0 then last word in dict  
9fce			;   
9fce			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9fce			;  
9fce			;  
9fce			; create basic standard set of words 
9fce			; 
9fce			;  
9fce			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9fce			; 2DUP 2DROP 2SWAP  
9fce			; @ C@ - get byte  
9fce			; ! C! - store byte 
9fce			; 0< true if less than zero 
9fce			; 0= true if zero 
9fce			; < >  
9fce			; = true if same 
9fce			; variables 
9fce			 
9fce			 
9fce			; Hardware specific words I may need 
9fce			; 
9fce			; IN OUT  
9fce			; calls to key util functions 
9fce			; calls to hardward abstraction stuff 
9fce			; easy control of frame buffers and lcd i/o 
9fce			; keyboard  
9fce			 
9fce			 
9fce			;DICT: macro 
9fce			; op_code, len, word, next 
9fce			;    word: 
9fce			;    db op_code 
9fce			;    ds word zero term 
9fce			;    dw next 
9fce			;    endm 
9fce			 
9fce			 
9fce			 
9fce			 
9fce			; op code 1 is a flag for user define words which are to be handled differently 
9fce			 
9fce			 
9fce			; 
9fce			; 
9fce			;    TODO on entry to a word this should be the expected environment 
9fce			;    hl - tos value if number then held, if string this is the ptr 
9fce			;    de -  
9fce			 
9fce			 
9fce			; opcode ranges 
9fce			; 0 - end of word dict 
9fce			; 255 - user define words 
9fce			 
9fce			sysdict: 
9fce			include "forth_opcodes.asm" 
9fce			; op codes for forth keywords 
9fce			; free to use code 0  
9fce				OPCODE_HEAP: equ  1 
9fce				OPCODE_EXEC: equ 2 
9fce				OPCODE_DUP: equ 3 
9fce				OPCODE_SWAP: equ 4 
9fce				OPCODE_COLN: equ 5 
9fce				OPCODE_SCOLN: equ 6 
9fce				OPCODE_DROP: equ 7 
9fce				OPCODE_DUP2: equ 8 
9fce				OPCODE_DROP2: equ 9 
9fce				OPCODE_SWAP2: equ 10 
9fce				OPCODE_AT: equ 11 
9fce				OPCODE_CAT: equ 12 
9fce				OPCODE_BANG: equ 13 
9fce				OPCODE_CBANG: equ 14 
9fce				OPCODE_SCALL: equ 15 
9fce				OPCODE_DEPTH: equ 16 
9fce				OPCODE_OVER: equ 17 
9fce				OPCODE_PAUSE: equ 18 
9fce				OPCODE_PAUSES: equ 19 
9fce				OPCODE_ROT: equ 20 
9fce			;free to reuse	OPCODE_WORDS: equ 21 
9fce			        OPCODE_NOT: equ 21 
9fce				OPCODE_UWORDS: equ 22 
9fce				OPCODE_BP: equ 23 
9fce				OPCODE_MONITOR: equ 24  
9fce				OPCODE_MALLOC: equ 25 
9fce				OPCODE_FREE: equ 26 
9fce				OPCODE_LIST: equ 27 
9fce				OPCODE_FORGET: equ 28 
9fce				OPCODE_NOP: equ 29 
9fce				OPCODE_COMO: equ 30 
9fce				OPCODE_COMC: equ 31 
9fce			;free to reuse	OPCODE_ENDCORE: equ 32 
9fce				OPCODE_AFTERSOUND: equ 33 
9fce				OPCODE_GP2: equ 34 
9fce				OPCODE_GP3: equ 35 
9fce				OPCODE_GP4: equ 36 
9fce				OPCODE_SIN: equ 37 
9fce				OPCODE_SOUT: equ 38 
9fce				OPCODE_SPIO: equ 39 
9fce				OPCODE_SPICEH: equ 40 
9fce				OPCODE_SPIOb: equ 41 
9fce				OPCODE_SPII: equ 42 
9fce				OPCODE_SESEL: equ 43 
9fce				OPCODE_CARTDEV: equ 44 
9fce			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9fce				OPCODE_FB: equ 46 
9fce				OPCODE_EMIT: equ 47 
9fce				OPCODE_DOTH: equ 48 
9fce				OPCODE_DOTF: equ 49 
9fce				OPCODE_DOT: equ 50 
9fce				OPCODE_CLS: equ 51 
9fce				OPCODE_DRAW: equ 52 
9fce				OPCODE_DUMP: equ 53 
9fce				OPCODE_CDUMP: equ 54 
9fce				OPCODE_DAT: equ 55 
9fce				OPCODE_HOME: equ 56 
9fce				OPCODE_SPACE: equ 57 
9fce				OPCODE_SPACES: equ 58 
9fce				OPCODE_SCROLL: equ 59 
9fce				OPCODE_ATQ: equ 60 
9fce				OPCODE_AUTODSP: equ 61 
9fce				OPCODE_MENU: equ 62 
9fce			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9fce				OPCODE_THEN: equ 64 
9fce				OPCODE_ELSE: equ 65 
9fce				OPCODE_DO: equ 66 
9fce				OPCODE_LOOP: equ 67 
9fce				OPCODE_I: equ 68 
9fce				OPCODE_DLOOP: equ 69  
9fce				OPCODE_REPEAT: equ 70  
9fce				OPCODE_UNTIL: equ 71 
9fce				OPCODE_ENDFLOW: equ 72 
9fce				OPCODE_WAITK: equ 73 
9fce				OPCODE_ACCEPT: equ 74 
9fce				OPCODE_EDIT: equ 75 
9fce			;free to reuse	OPCODE_ENDKEY: equ 76 
9fce				OPCODE_LZERO: equ 77 
9fce				OPCODE_TZERO: equ 78 
9fce				OPCODE_LESS: equ 79 
9fce				OPCODE_GT: equ 80 
9fce				OPCODE_EQUAL: equ 81  
9fce			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9fce				OPCODE_NEG: equ 83 
9fce				OPCODE_DIV: equ 84 
9fce				OPCODE_MUL: equ 85 
9fce				OPCODE_MIN: equ 86 
9fce				OPCODE_MAX: equ 87 
9fce				OPCODE_RND16: equ 88 
9fce				OPCODE_RND8: equ 89 
9fce				OPCODE_RND: equ 90 
9fce			;free to reuse	OPCODE_ENDMATHS: equ 91  
9fce				OPCODE_BYNAME: equ 92 
9fce				OPCODE_DIR: equ 93 
9fce				OPCODE_SAVE: equ 94 
9fce				OPCODE_LOAD: equ 95 
9fce				OPCODE_BSAVE: equ 96 
9fce				OPCODE_BLOAD: equ 97 
9fce				OPCODE_SEO: equ 98  
9fce				OPCODE_SEI: equ 99 
9fce				OPCODE_SFREE: equ 100 
9fce				OPCODE_SIZE: equ 101 
9fce				OPCODE_CREATE: equ 102 
9fce				OPCODE_APPEND: equ 103 
9fce				OPCODE_SDEL: equ 104 
9fce				OPCODE_OPEN: equ 105 
9fce				OPCODE_READ: equ 106 
9fce				OPCODE_EOF: equ 106 
9fce				OPCODE_FORMAT: equ 107 
9fce				OPCODE_LABEL: equ 108 
9fce				OPCODE_LABELS: equ 109 
9fce			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9fce				OPCODE_UPPER: equ 111 
9fce				OPCODE_LOWER: equ 112 
9fce				OPCODE_SUBSTR: equ 113 
9fce				OPCODE_LEFT: equ 114 
9fce				OPCODE_RIGHT: equ 115 
9fce				OPCODE_STR2NUM: equ 116 
9fce				OPCODE_NUM2STR: equ 117 
9fce				OPCODE_CONCAT: equ 118 
9fce				OPCODE_FIND: equ 119 
9fce				OPCODE_LEN: equ 120 
9fce				OPCODE_CHAR: equ 121 
9fce			; free to reuse	OPCODE_STRLEN: equ 122 
9fce			; free to reuse	OPCODE_ENDSTR: equ 123 
9fce				OPCODE_V0S: equ 124 
9fce				OPCODE_V0Q: equ 125 
9fce				OPCODE_V1S: equ 126 
9fce				OPCODE_V1Q: equ 127 
9fce				OPCODE_V2S: equ 128 
9fce				OPCODE_V2Q: equ 129 
9fce				OPCODE_V3S: equ 130 
9fce				OPCODE_V3Q: equ 131 
9fce			;free to reuse	OPCODE_END: equ 132 
9fce				OPCODE_ZDUP: equ 133 
9fce			 
9fce			; eof 
# End of file forth_opcodes.asm
9fce			 
9fce			include "forth_words_core.asm" 
9fce			 
9fce			; | ## Core Words 
9fce			 
9fce			;if MALLOC_4 
9fce			 
9fce			.HEAP: 
9fce			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9fce 15				db WORD_SYS_CORE+OPCODE_HEAP             
9fcf 0d a0			dw .EXEC            
9fd1 05				db 4 + 1 
9fd2 .. 00			db "HEAP",0              
9fd7				endm 
# End of macro CWHEAD
9fd7			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9fd7			; | | u1 - Current number of bytes in the heap 
9fd7			; | | u2 - Remaining bytes left on the heap 
9fd7			; | |  
9fd7			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9fd7			 
9fd7			 
9fd7				if DEBUG_FORTH_WORDS_KEY 
9fd7					DMARK "HEP" 
9fd7 f5				push af  
9fd8 3a ec 9f			ld a, (.dmark)  
9fdb 32 65 ee			ld (debug_mark),a  
9fde 3a ed 9f			ld a, (.dmark+1)  
9fe1 32 66 ee			ld (debug_mark+1),a  
9fe4 3a ee 9f			ld a, (.dmark+2)  
9fe7 32 67 ee			ld (debug_mark+2),a  
9fea 18 03			jr .pastdmark  
9fec ..			.dmark: db "HEP"  
9fef f1			.pastdmark: pop af  
9ff0			endm  
# End of macro DMARK
9ff0					CALLMONITOR 
9ff0 cd 6f ee			call debug_vector  
9ff3				endm  
# End of macro CALLMONITOR
9ff3				endif 
9ff3 2a b9 dd			ld hl, (free_list )      
9ff6 11 be dd			ld de, heap_start 
9ff9			 
9ff9 ed 52			sbc hl, de  
9ffb			 
9ffb cd 85 9a			call forth_push_numhl 
9ffe			 
9ffe			 
9ffe ed 5b b9 dd		ld de, (free_list )      
a002 21 96 e2			ld hl, heap_end 
a005			 
a005 ed 52			sbc hl, de 
a007			 
a007 cd 85 9a			call forth_push_numhl 
a00a				 
a00a			 
a00a				 
a00a			 
a00a			 
a00a			 
a00a				NEXTW 
a00a c3 76 9e			jp macro_next 
a00d				endm 
# End of macro NEXTW
a00d			;endif 
a00d			 
a00d			.EXEC: 
a00d			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
a00d			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
a00d			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
a00d			;; > > 
a00d			;; > >   
a00d			;	STACKFRAME OFF $5efe $5f9f 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "EXE" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	FORTH_DSP_POP 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX1" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;;	ld e,(hl) 
a00d			;;	inc hl 
a00d			;;	ld d,(hl) 
a00d			;;	ex de,hl 
a00d			; 
a00d			;;		if DEBUG_FORTH_WORDS 
a00d			;;			DMARK "EX2" 
a00d			;;			CALLMONITOR 
a00d			;;		endif 
a00d			;	push hl 
a00d			; 
a00d			;	;ld a, 0 
a00d			;	;ld a, FORTH_END_BUFFER 
a00d			;	call strlenz 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include term 
a00d			;	inc hl   ; include term 
a00d			;	ld b,0 
a00d			;	ld c,l 
a00d			;	pop hl 
a00d			;	ld de, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir 
a00d			; 
a00d			; 
a00d			;	ld hl, execscratch 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXe" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	call forthexec 
a00d			;;	call forthexec_cleanup 
a00d			;;	call forthparse 
a00d			;;	call forthexec 
a00d			; 
a00d			;	STACKFRAMECHK OFF $5efe $5f9f 
a00d			; 
a00d			;	; an immediate word so no need to process any more words 
a00d			;	ret 
a00d			;	NEXTW 
a00d			 
a00d			; dead code - old version  
a00d			;	FORTH_RSP_NEXT 
a00d			 
a00d			;  
a00d			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
a00d			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
a00d			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
a00d			;	push hl 
a00d			;	push de 
a00d			;	push bc 
a00d			; 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "EXR" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			; 
a00d			; 
a00d			;	;v5 FORTH_DSP_VALUE 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	; TODO do string type checks 
a00d			; 
a00d			;;v5	inc hl   ; skip type 
a00d			; 
a00d			;	push hl  ; source code  
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX1" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ld a, 0 
a00d			;	call strlent 
a00d			; 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			; 
a00d			;	push hl    ; size 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX2" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	call malloc 
a00d			; 
a00d			;	ex de, hl    ; de now contains malloc area 
a00d			;	pop bc   	; get byte count 
a00d			;	pop hl      ; get string to copy 
a00d			; 
a00d			;	push de     ; save malloc for free later 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir       ; duplicate string 
a00d			; 
a00d			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
a00d			;	 
a00d			;	; TODO fix the parse would be better than this...  
a00d			;	ex de, hl 
a00d			;	dec hl 
a00d			;	ld a, 0 
a00d			;	ld (hl), a 
a00d			;	dec hl 
a00d			;	ld a, ' ' 
a00d			;	ld (hl), a 
a00d			;	dec hl 
a00d			;	ld (hl), a 
a00d			; 
a00d			;	dec hl 
a00d			;	ld (hl), a 
a00d			; 
a00d			; 
a00d			;	FORTH_DSP_POP  
a00d			; 
a00d			;	pop hl     
a00d			;	push hl    ; save malloc area 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX4" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	call forthexec 
a00d			;	 
a00d			;	pop hl 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX5" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			; 
a00d			;	if FORTH_ENABLE_FREE 
a00d			;	call free 
a00d			;	endif 
a00d			; 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX6" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			; 
a00d			;	pop bc 
a00d			;	pop de 
a00d			;	pop hl 
a00d			;;	FORTH_RSP_POP	  
a00d			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
a00d			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
a00d			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
a00d			; 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX7" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			;	NEXTW 
a00d			 
a00d			;.STKEXEC: 
a00d			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
a00d			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
a00d			; 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "STX" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	ld (store_tmp1), hl    ; count 
a00d			; 
a00d			;	FORTH_DSP_POP 
a00d			;.stkexec1: 
a00d			;	ld hl, (store_tmp1)   ; count 
a00d			;	ld a, 0 
a00d			;	cp l 
a00d			;	ret z 
a00d			; 
a00d			;	dec hl 
a00d			;	ld (store_tmp1), hl    ; count 
a00d			;	 
a00d			;	FORTH_DSP_VALUEHL 
a00d			;	push hl 
a00d			;	 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXp" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	FORTH_DSP_POP 
a00d			; 
a00d			;	call strlenz 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	ld b,0 
a00d			;	ld c,l 
a00d			;	pop hl 
a00d			;	ld de, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir 
a00d			; 
a00d			; 
a00d			;	ld hl, execscratch 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXP" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	ld hl, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXx" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	call forthexec 
a00d			; 
a00d			;	jp .stkexec1 
a00d			; 
a00d			;	ret 
a00d			 
a00d			 
a00d			.DUP: 
a00d			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
a00d 17				db WORD_SYS_CORE+OPCODE_DUP             
a00e 83 a0			dw .ZDUP            
a010 04				db 3 + 1 
a011 .. 00			db "DUP",0              
a015				endm 
# End of macro CWHEAD
a015			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
a015			 
a015				if DEBUG_FORTH_WORDS_KEY 
a015					DMARK "DUP" 
a015 f5				push af  
a016 3a 2a a0			ld a, (.dmark)  
a019 32 65 ee			ld (debug_mark),a  
a01c 3a 2b a0			ld a, (.dmark+1)  
a01f 32 66 ee			ld (debug_mark+1),a  
a022 3a 2c a0			ld a, (.dmark+2)  
a025 32 67 ee			ld (debug_mark+2),a  
a028 18 03			jr .pastdmark  
a02a ..			.dmark: db "DUP"  
a02d f1			.pastdmark: pop af  
a02e			endm  
# End of macro DMARK
a02e					CALLMONITOR 
a02e cd 6f ee			call debug_vector  
a031				endm  
# End of macro CALLMONITOR
a031				endif 
a031			 
a031				FORTH_DSP 
a031 cd 50 9c			call macro_forth_dsp 
a034				endm 
# End of macro FORTH_DSP
a034			 
a034 7e				ld a, (HL) 
a035 fe 01			cp DS_TYPE_STR 
a037 20 25			jr nz, .dupinum 
a039			 
a039				; push another string 
a039			 
a039				FORTH_DSP_VALUEHL     		 
a039 cd 8a 9c			call macro_dsp_valuehl 
a03c				endm 
# End of macro FORTH_DSP_VALUEHL
a03c			 
a03c			if DEBUG_FORTH_WORDS 
a03c				DMARK "DUs" 
a03c f5				push af  
a03d 3a 51 a0			ld a, (.dmark)  
a040 32 65 ee			ld (debug_mark),a  
a043 3a 52 a0			ld a, (.dmark+1)  
a046 32 66 ee			ld (debug_mark+1),a  
a049 3a 53 a0			ld a, (.dmark+2)  
a04c 32 67 ee			ld (debug_mark+2),a  
a04f 18 03			jr .pastdmark  
a051 ..			.dmark: db "DUs"  
a054 f1			.pastdmark: pop af  
a055			endm  
# End of macro DMARK
a055				CALLMONITOR 
a055 cd 6f ee			call debug_vector  
a058				endm  
# End of macro CALLMONITOR
a058			endif 
a058 cd f3 9a			call forth_push_str 
a05b			 
a05b				NEXTW 
a05b c3 76 9e			jp macro_next 
a05e				endm 
# End of macro NEXTW
a05e			 
a05e			 
a05e			.dupinum: 
a05e				 
a05e			 
a05e			 
a05e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a05e cd 8a 9c			call macro_dsp_valuehl 
a061				endm 
# End of macro FORTH_DSP_VALUEHL
a061			 
a061			; TODO add floating point number detection 
a061			 
a061			if DEBUG_FORTH_WORDS 
a061				DMARK "DUi" 
a061 f5				push af  
a062 3a 76 a0			ld a, (.dmark)  
a065 32 65 ee			ld (debug_mark),a  
a068 3a 77 a0			ld a, (.dmark+1)  
a06b 32 66 ee			ld (debug_mark+1),a  
a06e 3a 78 a0			ld a, (.dmark+2)  
a071 32 67 ee			ld (debug_mark+2),a  
a074 18 03			jr .pastdmark  
a076 ..			.dmark: db "DUi"  
a079 f1			.pastdmark: pop af  
a07a			endm  
# End of macro DMARK
a07a				CALLMONITOR 
a07a cd 6f ee			call debug_vector  
a07d				endm  
# End of macro CALLMONITOR
a07d			endif 
a07d			 
a07d cd 85 9a			call forth_push_numhl 
a080				NEXTW 
a080 c3 76 9e			jp macro_next 
a083				endm 
# End of macro NEXTW
a083			.ZDUP: 
a083			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a083 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a084 bb a0			dw .SWAP            
a086 05				db 4 + 1 
a087 .. 00			db "?DUP",0              
a08c				endm 
# End of macro CWHEAD
a08c			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
a08c			 
a08c				if DEBUG_FORTH_WORDS_KEY 
a08c					DMARK "qDU" 
a08c f5				push af  
a08d 3a a1 a0			ld a, (.dmark)  
a090 32 65 ee			ld (debug_mark),a  
a093 3a a2 a0			ld a, (.dmark+1)  
a096 32 66 ee			ld (debug_mark+1),a  
a099 3a a3 a0			ld a, (.dmark+2)  
a09c 32 67 ee			ld (debug_mark+2),a  
a09f 18 03			jr .pastdmark  
a0a1 ..			.dmark: db "qDU"  
a0a4 f1			.pastdmark: pop af  
a0a5			endm  
# End of macro DMARK
a0a5					CALLMONITOR 
a0a5 cd 6f ee			call debug_vector  
a0a8				endm  
# End of macro CALLMONITOR
a0a8				endif 
a0a8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a0a8 cd 8a 9c			call macro_dsp_valuehl 
a0ab				endm 
# End of macro FORTH_DSP_VALUEHL
a0ab			 
a0ab e5				push hl 
a0ac			 
a0ac				; is it a zero? 
a0ac			 
a0ac 3e 00			ld a, 0 
a0ae 84				add h 
a0af 85				add l 
a0b0			 
a0b0 e1				pop hl 
a0b1			 
a0b1 fe 00			cp 0 
a0b3 28 03			jr z, .dup2orig 
a0b5			 
a0b5			 
a0b5 cd 85 9a			call forth_push_numhl 
a0b8			 
a0b8			 
a0b8			; TODO add floating point number detection 
a0b8			 
a0b8			.dup2orig: 
a0b8			 
a0b8				NEXTW 
a0b8 c3 76 9e			jp macro_next 
a0bb				endm 
# End of macro NEXTW
a0bb			.SWAP: 
a0bb			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a0bb 18				db WORD_SYS_CORE+OPCODE_SWAP             
a0bc 0f a1			dw .COLN            
a0be 05				db 4 + 1 
a0bf .. 00			db "SWAP",0              
a0c4				endm 
# End of macro CWHEAD
a0c4			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a0c4				if DEBUG_FORTH_WORDS_KEY 
a0c4					DMARK "SWP" 
a0c4 f5				push af  
a0c5 3a d9 a0			ld a, (.dmark)  
a0c8 32 65 ee			ld (debug_mark),a  
a0cb 3a da a0			ld a, (.dmark+1)  
a0ce 32 66 ee			ld (debug_mark+1),a  
a0d1 3a db a0			ld a, (.dmark+2)  
a0d4 32 67 ee			ld (debug_mark+2),a  
a0d7 18 03			jr .pastdmark  
a0d9 ..			.dmark: db "SWP"  
a0dc f1			.pastdmark: pop af  
a0dd			endm  
# End of macro DMARK
a0dd					CALLMONITOR 
a0dd cd 6f ee			call debug_vector  
a0e0				endm  
# End of macro CALLMONITOR
a0e0				endif 
a0e0			 
a0e0			; DONE Use os stack swap memory 
a0e0			 
a0e0				FORTH_DSP_PTR 0     ; TOS 
a0e0 2a e8 e9			ld hl,(cli_data_sp) 
a0e3 11 00 00			ld de, 0 * 3 
a0e6 ed 52			sbc hl, de 
a0e8				endm 
# End of macro FORTH_DSP_PTR
a0e8 cd c2 9d			call hltostack1 
a0eb			  
a0eb				FORTH_DSP_PTR 1     ; TOS 
a0eb 2a e8 e9			ld hl,(cli_data_sp) 
a0ee 11 03 00			ld de, 1 * 3 
a0f1 ed 52			sbc hl, de 
a0f3				endm 
# End of macro FORTH_DSP_PTR
a0f3 cd c8 9d			call hltostack2 
a0f6			 
a0f6				FORTH_DSP_PTR 0     ; TOS 
a0f6 2a e8 e9			ld hl,(cli_data_sp) 
a0f9 11 00 00			ld de, 0 * 3 
a0fc ed 52			sbc hl, de 
a0fe				endm 
# End of macro FORTH_DSP_PTR
a0fe cd e0 9d			call hlfromstack2 
a101			 
a101				FORTH_DSP_PTR 1     ; TOS 
a101 2a e8 e9			ld hl,(cli_data_sp) 
a104 11 03 00			ld de, 1 * 3 
a107 ed 52			sbc hl, de 
a109				endm 
# End of macro FORTH_DSP_PTR
a109 cd da 9d			call hlfromstack1 
a10c			;	FORTH_DSP_VALUEHL 
a10c			;	push hl     ; w2 
a10c			; 
a10c			;	FORTH_DSP_POP 
a10c			; 
a10c			;	FORTH_DSP_VALUEHL 
a10c			; 
a10c			;	FORTH_DSP_POP 
a10c			; 
a10c			;	pop de     ; w2	, hl = w1 
a10c			; 
a10c			;	ex de, hl 
a10c			;	push de 
a10c			; 
a10c			;	call forth_push_numhl 
a10c			; 
a10c			;	pop hl 
a10c			; 
a10c			;	call forth_push_numhl 
a10c				 
a10c			 
a10c				NEXTW 
a10c c3 76 9e			jp macro_next 
a10f				endm 
# End of macro NEXTW
a10f			.COLN: 
a10f			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a10f 19				db WORD_SYS_CORE+OPCODE_COLN             
a110 9b a2			dw .SCOLN            
a112 02				db 1 + 1 
a113 .. 00			db ":",0              
a115				endm 
# End of macro CWHEAD
a115			; | : ( -- )         Create new word | DONE 
a115			 
a115				if DEBUG_FORTH_WORDS_KEY 
a115					DMARK "CLN" 
a115 f5				push af  
a116 3a 2a a1			ld a, (.dmark)  
a119 32 65 ee			ld (debug_mark),a  
a11c 3a 2b a1			ld a, (.dmark+1)  
a11f 32 66 ee			ld (debug_mark+1),a  
a122 3a 2c a1			ld a, (.dmark+2)  
a125 32 67 ee			ld (debug_mark+2),a  
a128 18 03			jr .pastdmark  
a12a ..			.dmark: db "CLN"  
a12d f1			.pastdmark: pop af  
a12e			endm  
# End of macro DMARK
a12e					CALLMONITOR 
a12e cd 6f ee			call debug_vector  
a131				endm  
# End of macro CALLMONITOR
a131				endif 
a131			STACKFRAME OFF $8efe $989f 
a131				if DEBUG_STACK_IMB 
a131					if OFF 
a131						exx 
a131						ld de, $8efe 
a131						ld a, d 
a131						ld hl, curframe 
a131						call hexout 
a131						ld a, e 
a131						ld hl, curframe+2 
a131						call hexout 
a131						ld hl, $8efe 
a131						push hl 
a131						ld hl, $989f 
a131						push hl 
a131						exx 
a131					endif 
a131				endif 
a131			endm 
# End of macro STACKFRAME
a131			; get parser buffer length  of new word 
a131			 
a131			 
a131			 
a131				; move tok past this to start of name defintition 
a131				; TODO get word to define 
a131				; TODO Move past word token 
a131				; TODO get length of string up to the ';' 
a131			 
a131 2a bc e5		ld hl, (os_tok_ptr) 
a134 23			inc hl 
a135 23			inc hl 
a136			 
a136 3e 3b		ld a, ';' 
a138 cd 5b 90		call strlent 
a13b			 
a13b 7d			ld a,l 
a13c 32 ab e2		ld (os_new_parse_len), a 
a13f			 
a13f			 
a13f			if DEBUG_FORTH_UWORD 
a13f ed 5b bc e5	ld de, (os_tok_ptr) 
a143					DMARK ":01" 
a143 f5				push af  
a144 3a 58 a1			ld a, (.dmark)  
a147 32 65 ee			ld (debug_mark),a  
a14a 3a 59 a1			ld a, (.dmark+1)  
a14d 32 66 ee			ld (debug_mark+1),a  
a150 3a 5a a1			ld a, (.dmark+2)  
a153 32 67 ee			ld (debug_mark+2),a  
a156 18 03			jr .pastdmark  
a158 ..			.dmark: db ":01"  
a15b f1			.pastdmark: pop af  
a15c			endm  
# End of macro DMARK
a15c			CALLMONITOR 
a15c cd 6f ee			call debug_vector  
a15f				endm  
# End of macro CALLMONITOR
a15f			endif 
a15f			 
a15f			; 
a15f			;  new word memory layout: 
a15f			;  
a15f			;    : adg 6666 ;  
a15f			; 
a15f			;    db   1     ; user defined word  
a15f 23			inc hl    
a160			;    dw   sysdict 
a160 23			inc hl 
a161 23			inc hl 
a162			;    db <word len>+1 (for null) 
a162 23			inc hl 
a163			;    db .... <word> 
a163			; 
a163			 
a163 23			inc hl    ; some extras for the word preamble before the above 
a164 23			inc hl 
a165 23			inc hl 
a166 23			inc hl 
a167 23			inc hl 
a168 23			inc hl 
a169 23			inc hl  
a16a 23			inc hl 
a16b 23			inc hl 
a16c 23			inc hl 
a16d 23			inc hl 
a16e 23			inc hl 
a16f 23			inc hl 
a170 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a171			;       exec word buffer 
a171			;	<ptr word>   
a171 23			inc hl 
a172 23			inc hl 
a173			;       <word list><null term> 7F final term 
a173			 
a173			 
a173			if DEBUG_FORTH_UWORD 
a173					DMARK ":02" 
a173 f5				push af  
a174 3a 88 a1			ld a, (.dmark)  
a177 32 65 ee			ld (debug_mark),a  
a17a 3a 89 a1			ld a, (.dmark+1)  
a17d 32 66 ee			ld (debug_mark+1),a  
a180 3a 8a a1			ld a, (.dmark+2)  
a183 32 67 ee			ld (debug_mark+2),a  
a186 18 03			jr .pastdmark  
a188 ..			.dmark: db ":02"  
a18b f1			.pastdmark: pop af  
a18c			endm  
# End of macro DMARK
a18c			CALLMONITOR 
a18c cd 6f ee			call debug_vector  
a18f				endm  
# End of macro CALLMONITOR
a18f			endif 
a18f			 
a18f			 
a18f				; malloc the size 
a18f			 
a18f cd c5 90			call malloc 
a192 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
a195			 
a195			;    db   1     ; user defined word  
a195 3e 01			ld a, WORD_SYS_UWORD  
a197 77				ld (hl), a 
a198			 
a198 23			inc hl    
a199			;    dw   sysdict 
a199 11 ce 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a19c 73			ld (hl), e 
a19d 23			inc hl 
a19e 72			ld (hl), d 
a19f 23			inc hl 
a1a0			 
a1a0			 
a1a0			;    Setup dict word 
a1a0			 
a1a0 23			inc hl 
a1a1 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a1a4			 
a1a4			; 1. get length of dict word 
a1a4			 
a1a4			 
a1a4 2a bc e5		ld hl, (os_tok_ptr) 
a1a7 23			inc hl 
a1a8 23			inc hl    ; position to start of dict word 
a1a9 3e 00		ld a, 0 
a1ab cd 5b 90		call strlent 
a1ae			 
a1ae			 
a1ae 23			inc hl    ; to include null??? 
a1af			 
a1af			; write length of dict word 
a1af			 
a1af ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a1b3 1b			dec de 
a1b4 eb			ex de, hl 
a1b5 73			ld (hl), e 
a1b6 eb			ex de, hl 
a1b7			 
a1b7			 
a1b7			 
a1b7			; copy  
a1b7 4d			ld c, l 
a1b8 06 00		ld b, 0 
a1ba ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a1be 2a bc e5		ld hl, (os_tok_ptr) 
a1c1 23			inc hl 
a1c2 23			inc hl    ; position to start of dict word 
a1c3			 
a1c3			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a1c3			 
a1c3			; TODO need to convert word to upper case 
a1c3			 
a1c3			ucasetok:	 
a1c3 7e			ld a,(hl) 
a1c4 cd 47 90		call toUpper 
a1c7 77			ld (hl),a 
a1c8 ed a0		ldi 
a1ca f2 c3 a1		jp p, ucasetok 
a1cd			 
a1cd			 
a1cd			 
a1cd			; de now points to start of where the word body code should be placed 
a1cd ed 53 a7 e2	ld (os_new_work_ptr), de 
a1d1			; hl now points to the words to throw at forthexec which needs to be copied 
a1d1 22 a5 e2		ld (os_new_src_ptr), hl 
a1d4			 
a1d4			; TODO add 'call to forthexec' 
a1d4			 
a1d4			if DEBUG_FORTH_UWORD 
a1d4 c5			push bc 
a1d5 ed 4b ad e2	ld bc, (os_new_malloc) 
a1d9					DMARK ":0x" 
a1d9 f5				push af  
a1da 3a ee a1			ld a, (.dmark)  
a1dd 32 65 ee			ld (debug_mark),a  
a1e0 3a ef a1			ld a, (.dmark+1)  
a1e3 32 66 ee			ld (debug_mark+1),a  
a1e6 3a f0 a1			ld a, (.dmark+2)  
a1e9 32 67 ee			ld (debug_mark+2),a  
a1ec 18 03			jr .pastdmark  
a1ee ..			.dmark: db ":0x"  
a1f1 f1			.pastdmark: pop af  
a1f2			endm  
# End of macro DMARK
a1f2			CALLMONITOR 
a1f2 cd 6f ee			call debug_vector  
a1f5				endm  
# End of macro CALLMONITOR
a1f5 c1			pop bc 
a1f6			endif 
a1f6			 
a1f6			 
a1f6			; create word preamble which should be: 
a1f6			 
a1f6			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a1f6			 
a1f6			;    ld hl, <word code> 
a1f6			;    jp user_exec 
a1f6			;    <word code bytes> 
a1f6			 
a1f6			 
a1f6			;	inc de     ; TODO ??? or are we already past the word's null 
a1f6 eb			ex de, hl 
a1f7			 
a1f7 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a1f9			 
a1f9 23			inc hl 
a1fa 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a1fd 23			inc hl 
a1fe			 
a1fe 23			inc hl 
a1ff 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a201			 
a201 01 a0 cb		ld bc, user_exec 
a204 23			inc hl 
a205 71			ld (hl), c     ; poke address of user_exec 
a206 23			inc hl 
a207 70			ld (hl), b     
a208			; 
a208			;	inc hl 
a208			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a208			; 
a208			; 
a208			;	ld bc, macro_forth_rsp_next 
a208			;	inc hl 
a208			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a208			;	inc hl 
a208			;	ld (hl), b     
a208			; 
a208			;	inc hl 
a208			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a208			; 
a208			; 
a208			;	inc hl 
a208			;	ld bc, forthexec 
a208			;	ld (hl), c     ; poke address of forthexec 
a208			;	inc hl 
a208			;	ld (hl), b      
a208			; 
a208			;	inc hl 
a208			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a208			; 
a208			;	ld bc, user_dict_next 
a208			;	inc hl 
a208			;	ld (hl), c     ; poke address of forthexec 
a208			;	inc hl 
a208			;	ld (hl), b      
a208			 
a208			; hl is now where we need to copy the word byte data to save this 
a208			 
a208 23			inc hl 
a209 22 a3 e2		ld (os_new_exec), hl 
a20c			 
a20c			; copy definition 
a20c			 
a20c eb			ex de, hl 
a20d			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a20d			;	inc de    ; skip the PC for this parse 
a20d 3a ab e2		ld a, (os_new_parse_len) 
a210 4f			ld c, a 
a211 06 00		ld b, 0 
a213 ed b0		ldir		 ; copy defintion 
a215			 
a215			 
a215			; poke the address of where the new word bytes live for forthexec 
a215			 
a215 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a218			 
a218 ed 5b a3 e2	ld de, (os_new_exec)      
a21c			 
a21c 73			ld (hl), e 
a21d 23			inc hl 
a21e 72			ld (hl), d 
a21f			 
a21f				; TODO copy last user dict word next link to this word 
a21f				; TODO update last user dict word to point to this word 
a21f			; 
a21f			; hl f923 de 812a ; bc 811a 
a21f			 
a21f			if DEBUG_FORTH_UWORD 
a21f c5			push bc 
a220 ed 4b ad e2	ld bc, (os_new_malloc) 
a224					DMARK ":0A" 
a224 f5				push af  
a225 3a 39 a2			ld a, (.dmark)  
a228 32 65 ee			ld (debug_mark),a  
a22b 3a 3a a2			ld a, (.dmark+1)  
a22e 32 66 ee			ld (debug_mark+1),a  
a231 3a 3b a2			ld a, (.dmark+2)  
a234 32 67 ee			ld (debug_mark+2),a  
a237 18 03			jr .pastdmark  
a239 ..			.dmark: db ":0A"  
a23c f1			.pastdmark: pop af  
a23d			endm  
# End of macro DMARK
a23d			CALLMONITOR 
a23d cd 6f ee			call debug_vector  
a240				endm  
# End of macro CALLMONITOR
a240 c1			pop bc 
a241			endif 
a241			if DEBUG_FORTH_UWORD 
a241 c5			push bc 
a242 ed 4b ad e2	ld bc, (os_new_malloc) 
a246 03			inc bc 
a247 03			inc bc 
a248 03			inc bc 
a249 03			inc bc 
a24a 03			inc bc 
a24b 03			inc bc 
a24c 03			inc bc 
a24d 03			inc bc 
a24e			 
a24e					DMARK ":0B" 
a24e f5				push af  
a24f 3a 63 a2			ld a, (.dmark)  
a252 32 65 ee			ld (debug_mark),a  
a255 3a 64 a2			ld a, (.dmark+1)  
a258 32 66 ee			ld (debug_mark+1),a  
a25b 3a 65 a2			ld a, (.dmark+2)  
a25e 32 67 ee			ld (debug_mark+2),a  
a261 18 03			jr .pastdmark  
a263 ..			.dmark: db ":0B"  
a266 f1			.pastdmark: pop af  
a267			endm  
# End of macro DMARK
a267			CALLMONITOR 
a267 cd 6f ee			call debug_vector  
a26a				endm  
# End of macro CALLMONITOR
a26a c1			pop bc 
a26b			endif 
a26b			 
a26b			; update word dict linked list for new word 
a26b			 
a26b			 
a26b 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a26e 23			inc hl     ; move to next work linked list ptr 
a26f			 
a26f ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
a273 73			ld (hl), e 
a274 23			inc hl 
a275 72			ld (hl), d 
a276			 
a276			if DEBUG_FORTH_UWORD 
a276 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a27a			endif 
a27a			 
a27a ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a27e			 
a27e			 
a27e			if DEBUG_FORTH_UWORD 
a27e					DMARK ":0+" 
a27e f5				push af  
a27f 3a 93 a2			ld a, (.dmark)  
a282 32 65 ee			ld (debug_mark),a  
a285 3a 94 a2			ld a, (.dmark+1)  
a288 32 66 ee			ld (debug_mark+1),a  
a28b 3a 95 a2			ld a, (.dmark+2)  
a28e 32 67 ee			ld (debug_mark+2),a  
a291 18 03			jr .pastdmark  
a293 ..			.dmark: db ":0+"  
a296 f1			.pastdmark: pop af  
a297			endm  
# End of macro DMARK
a297			CALLMONITOR 
a297 cd 6f ee			call debug_vector  
a29a				endm  
# End of macro CALLMONITOR
a29a			endif 
a29a			 
a29a			STACKFRAMECHK OFF $8efe $989f 
a29a				if DEBUG_STACK_IMB 
a29a					if OFF 
a29a						exx 
a29a						ld hl, $989f 
a29a						pop de   ; $989f 
a29a						call cmp16 
a29a						jr nz, .spnosame 
a29a						ld hl, $8efe 
a29a						pop de   ; $8efe 
a29a						call cmp16 
a29a						jr z, .spfrsame 
a29a						.spnosame: call showsperror 
a29a						.spfrsame: nop 
a29a						exx 
a29a					endif 
a29a				endif 
a29a			endm 
# End of macro STACKFRAMECHK
a29a			 
a29a c9			ret    ; dont process any remaining parser tokens as they form new word 
a29b			 
a29b			 
a29b			 
a29b			 
a29b			;		NEXT 
a29b			.SCOLN: 
a29b			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a29b 06			db OPCODE_SCOLN 
a29c e7 a2		dw .DROP 
a29e 02			db 2 
a29f .. 00		db ";",0           
a2a1			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a2a1				if DEBUG_FORTH_WORDS_KEY 
a2a1					DMARK "SCN" 
a2a1 f5				push af  
a2a2 3a b6 a2			ld a, (.dmark)  
a2a5 32 65 ee			ld (debug_mark),a  
a2a8 3a b7 a2			ld a, (.dmark+1)  
a2ab 32 66 ee			ld (debug_mark+1),a  
a2ae 3a b8 a2			ld a, (.dmark+2)  
a2b1 32 67 ee			ld (debug_mark+2),a  
a2b4 18 03			jr .pastdmark  
a2b6 ..			.dmark: db "SCN"  
a2b9 f1			.pastdmark: pop af  
a2ba			endm  
# End of macro DMARK
a2ba					CALLMONITOR 
a2ba cd 6f ee			call debug_vector  
a2bd				endm  
# End of macro CALLMONITOR
a2bd				endif 
a2bd				FORTH_RSP_TOS 
a2bd cd 43 9a			call macro_forth_rsp_tos 
a2c0				endm 
# End of macro FORTH_RSP_TOS
a2c0 e5				push hl 
a2c1				FORTH_RSP_POP 
a2c1 cd 4d 9a			call macro_forth_rsp_pop 
a2c4				endm 
# End of macro FORTH_RSP_POP
a2c4 e1				pop hl 
a2c5			;		ex de,hl 
a2c5 22 bc e5			ld (os_tok_ptr),hl 
a2c8			 
a2c8			if DEBUG_FORTH_UWORD 
a2c8					DMARK "SCL" 
a2c8 f5				push af  
a2c9 3a dd a2			ld a, (.dmark)  
a2cc 32 65 ee			ld (debug_mark),a  
a2cf 3a de a2			ld a, (.dmark+1)  
a2d2 32 66 ee			ld (debug_mark+1),a  
a2d5 3a df a2			ld a, (.dmark+2)  
a2d8 32 67 ee			ld (debug_mark+2),a  
a2db 18 03			jr .pastdmark  
a2dd ..			.dmark: db "SCL"  
a2e0 f1			.pastdmark: pop af  
a2e1			endm  
# End of macro DMARK
a2e1			CALLMONITOR 
a2e1 cd 6f ee			call debug_vector  
a2e4				endm  
# End of macro CALLMONITOR
a2e4			endif 
a2e4				NEXTW 
a2e4 c3 76 9e			jp macro_next 
a2e7				endm 
# End of macro NEXTW
a2e7			 
a2e7			.DROP: 
a2e7			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a2e7 1b				db WORD_SYS_CORE+OPCODE_DROP             
a2e8 12 a3			dw .DUP2            
a2ea 05				db 4 + 1 
a2eb .. 00			db "DROP",0              
a2f0				endm 
# End of macro CWHEAD
a2f0			; | DROP ( w -- )   drop the TOS item   | DONE 
a2f0				if DEBUG_FORTH_WORDS_KEY 
a2f0					DMARK "DRP" 
a2f0 f5				push af  
a2f1 3a 05 a3			ld a, (.dmark)  
a2f4 32 65 ee			ld (debug_mark),a  
a2f7 3a 06 a3			ld a, (.dmark+1)  
a2fa 32 66 ee			ld (debug_mark+1),a  
a2fd 3a 07 a3			ld a, (.dmark+2)  
a300 32 67 ee			ld (debug_mark+2),a  
a303 18 03			jr .pastdmark  
a305 ..			.dmark: db "DRP"  
a308 f1			.pastdmark: pop af  
a309			endm  
# End of macro DMARK
a309					CALLMONITOR 
a309 cd 6f ee			call debug_vector  
a30c				endm  
# End of macro CALLMONITOR
a30c				endif 
a30c				FORTH_DSP_POP 
a30c cd 42 9d			call macro_forth_dsp_pop 
a30f				endm 
# End of macro FORTH_DSP_POP
a30f				NEXTW 
a30f c3 76 9e			jp macro_next 
a312				endm 
# End of macro NEXTW
a312			.DUP2: 
a312			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a312 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a313 57 a3			dw .DROP2            
a315 05				db 4 + 1 
a316 .. 00			db "2DUP",0              
a31b				endm 
# End of macro CWHEAD
a31b			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
a31b				if DEBUG_FORTH_WORDS_KEY 
a31b					DMARK "2DU" 
a31b f5				push af  
a31c 3a 30 a3			ld a, (.dmark)  
a31f 32 65 ee			ld (debug_mark),a  
a322 3a 31 a3			ld a, (.dmark+1)  
a325 32 66 ee			ld (debug_mark+1),a  
a328 3a 32 a3			ld a, (.dmark+2)  
a32b 32 67 ee			ld (debug_mark+2),a  
a32e 18 03			jr .pastdmark  
a330 ..			.dmark: db "2DU"  
a333 f1			.pastdmark: pop af  
a334			endm  
# End of macro DMARK
a334					CALLMONITOR 
a334 cd 6f ee			call debug_vector  
a337				endm  
# End of macro CALLMONITOR
a337				endif 
a337				FORTH_DSP_VALUEHL 
a337 cd 8a 9c			call macro_dsp_valuehl 
a33a				endm 
# End of macro FORTH_DSP_VALUEHL
a33a e5				push hl      ; 2 
a33b			 
a33b				FORTH_DSP_POP 
a33b cd 42 9d			call macro_forth_dsp_pop 
a33e				endm 
# End of macro FORTH_DSP_POP
a33e				 
a33e				FORTH_DSP_VALUEHL 
a33e cd 8a 9c			call macro_dsp_valuehl 
a341				endm 
# End of macro FORTH_DSP_VALUEHL
a341			;		push hl      ; 1 
a341			 
a341				FORTH_DSP_POP 
a341 cd 42 9d			call macro_forth_dsp_pop 
a344				endm 
# End of macro FORTH_DSP_POP
a344			 
a344			;		pop hl       ; 1 
a344 d1				pop de       ; 2 
a345			 
a345 cd 85 9a			call forth_push_numhl 
a348 eb				ex de, hl 
a349 cd 85 9a			call forth_push_numhl 
a34c			 
a34c				 
a34c eb				ex de, hl 
a34d			 
a34d cd 85 9a			call forth_push_numhl 
a350 eb				ex de, hl 
a351 cd 85 9a			call forth_push_numhl 
a354			 
a354			 
a354				NEXTW 
a354 c3 76 9e			jp macro_next 
a357				endm 
# End of macro NEXTW
a357			.DROP2: 
a357			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a357 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a358 86 a3			dw .SWAP2            
a35a 06				db 5 + 1 
a35b .. 00			db "2DROP",0              
a361				endm 
# End of macro CWHEAD
a361			; | 2DROP ( w w -- )    Double drop | DONE 
a361				if DEBUG_FORTH_WORDS_KEY 
a361					DMARK "2DR" 
a361 f5				push af  
a362 3a 76 a3			ld a, (.dmark)  
a365 32 65 ee			ld (debug_mark),a  
a368 3a 77 a3			ld a, (.dmark+1)  
a36b 32 66 ee			ld (debug_mark+1),a  
a36e 3a 78 a3			ld a, (.dmark+2)  
a371 32 67 ee			ld (debug_mark+2),a  
a374 18 03			jr .pastdmark  
a376 ..			.dmark: db "2DR"  
a379 f1			.pastdmark: pop af  
a37a			endm  
# End of macro DMARK
a37a					CALLMONITOR 
a37a cd 6f ee			call debug_vector  
a37d				endm  
# End of macro CALLMONITOR
a37d				endif 
a37d				FORTH_DSP_POP 
a37d cd 42 9d			call macro_forth_dsp_pop 
a380				endm 
# End of macro FORTH_DSP_POP
a380				FORTH_DSP_POP 
a380 cd 42 9d			call macro_forth_dsp_pop 
a383				endm 
# End of macro FORTH_DSP_POP
a383				NEXTW 
a383 c3 76 9e			jp macro_next 
a386				endm 
# End of macro NEXTW
a386			.SWAP2: 
a386			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a386 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a387 af a3			dw .AT            
a389 06				db 5 + 1 
a38a .. 00			db "2SWAP",0              
a390				endm 
# End of macro CWHEAD
a390			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a390				if DEBUG_FORTH_WORDS_KEY 
a390					DMARK "2SW" 
a390 f5				push af  
a391 3a a5 a3			ld a, (.dmark)  
a394 32 65 ee			ld (debug_mark),a  
a397 3a a6 a3			ld a, (.dmark+1)  
a39a 32 66 ee			ld (debug_mark+1),a  
a39d 3a a7 a3			ld a, (.dmark+2)  
a3a0 32 67 ee			ld (debug_mark+2),a  
a3a3 18 03			jr .pastdmark  
a3a5 ..			.dmark: db "2SW"  
a3a8 f1			.pastdmark: pop af  
a3a9			endm  
# End of macro DMARK
a3a9					CALLMONITOR 
a3a9 cd 6f ee			call debug_vector  
a3ac				endm  
# End of macro CALLMONITOR
a3ac				endif 
a3ac			; TODO Use os stack swap memory 
a3ac				NEXTW 
a3ac c3 76 9e			jp macro_next 
a3af				endm 
# End of macro NEXTW
a3af			.AT: 
a3af			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a3af 1f				db WORD_SYS_CORE+OPCODE_AT             
a3b0 e1 a3			dw .CAT            
a3b2 02				db 1 + 1 
a3b3 .. 00			db "@",0              
a3b5				endm 
# End of macro CWHEAD
a3b5			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a3b5			 
a3b5				if DEBUG_FORTH_WORDS_KEY 
a3b5					DMARK "AT." 
a3b5 f5				push af  
a3b6 3a ca a3			ld a, (.dmark)  
a3b9 32 65 ee			ld (debug_mark),a  
a3bc 3a cb a3			ld a, (.dmark+1)  
a3bf 32 66 ee			ld (debug_mark+1),a  
a3c2 3a cc a3			ld a, (.dmark+2)  
a3c5 32 67 ee			ld (debug_mark+2),a  
a3c8 18 03			jr .pastdmark  
a3ca ..			.dmark: db "AT."  
a3cd f1			.pastdmark: pop af  
a3ce			endm  
# End of macro DMARK
a3ce					CALLMONITOR 
a3ce cd 6f ee			call debug_vector  
a3d1				endm  
# End of macro CALLMONITOR
a3d1				endif 
a3d1			.getbyteat:	 
a3d1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a3d1 cd 8a 9c			call macro_dsp_valuehl 
a3d4				endm 
# End of macro FORTH_DSP_VALUEHL
a3d4				 
a3d4			;		push hl 
a3d4			 
a3d4				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a3d4 cd 42 9d			call macro_forth_dsp_pop 
a3d7				endm 
# End of macro FORTH_DSP_POP
a3d7			 
a3d7			;		pop hl 
a3d7			 
a3d7 7e				ld a, (hl) 
a3d8			 
a3d8 6f				ld l, a 
a3d9 26 00			ld h, 0 
a3db cd 85 9a			call forth_push_numhl 
a3de			 
a3de				NEXTW 
a3de c3 76 9e			jp macro_next 
a3e1				endm 
# End of macro NEXTW
a3e1			.CAT: 
a3e1			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a3e1 20				db WORD_SYS_CORE+OPCODE_CAT             
a3e2 0a a4			dw .BANG            
a3e4 03				db 2 + 1 
a3e5 .. 00			db "C@",0              
a3e8				endm 
# End of macro CWHEAD
a3e8			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a3e8				if DEBUG_FORTH_WORDS_KEY 
a3e8					DMARK "CAA" 
a3e8 f5				push af  
a3e9 3a fd a3			ld a, (.dmark)  
a3ec 32 65 ee			ld (debug_mark),a  
a3ef 3a fe a3			ld a, (.dmark+1)  
a3f2 32 66 ee			ld (debug_mark+1),a  
a3f5 3a ff a3			ld a, (.dmark+2)  
a3f8 32 67 ee			ld (debug_mark+2),a  
a3fb 18 03			jr .pastdmark  
a3fd ..			.dmark: db "CAA"  
a400 f1			.pastdmark: pop af  
a401			endm  
# End of macro DMARK
a401					CALLMONITOR 
a401 cd 6f ee			call debug_vector  
a404				endm  
# End of macro CALLMONITOR
a404				endif 
a404 c3 d1 a3			jp .getbyteat 
a407				NEXTW 
a407 c3 76 9e			jp macro_next 
a40a				endm 
# End of macro NEXTW
a40a			.BANG: 
a40a			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a40a 21				db WORD_SYS_CORE+OPCODE_BANG             
a40b 40 a4			dw .CBANG            
a40d 02				db 1 + 1 
a40e .. 00			db "!",0              
a410				endm 
# End of macro CWHEAD
a410			; | ! ( x w -- ) Store x at address w      | DONE 
a410				if DEBUG_FORTH_WORDS_KEY 
a410					DMARK "BNG" 
a410 f5				push af  
a411 3a 25 a4			ld a, (.dmark)  
a414 32 65 ee			ld (debug_mark),a  
a417 3a 26 a4			ld a, (.dmark+1)  
a41a 32 66 ee			ld (debug_mark+1),a  
a41d 3a 27 a4			ld a, (.dmark+2)  
a420 32 67 ee			ld (debug_mark+2),a  
a423 18 03			jr .pastdmark  
a425 ..			.dmark: db "BNG"  
a428 f1			.pastdmark: pop af  
a429			endm  
# End of macro DMARK
a429					CALLMONITOR 
a429 cd 6f ee			call debug_vector  
a42c				endm  
# End of macro CALLMONITOR
a42c				endif 
a42c			 
a42c			.storebyteat:		 
a42c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a42c cd 8a 9c			call macro_dsp_valuehl 
a42f				endm 
# End of macro FORTH_DSP_VALUEHL
a42f				 
a42f e5				push hl 
a430			 
a430				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a430 cd 42 9d			call macro_forth_dsp_pop 
a433				endm 
# End of macro FORTH_DSP_POP
a433			 
a433				; get byte to poke 
a433			 
a433				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a433 cd 8a 9c			call macro_dsp_valuehl 
a436				endm 
# End of macro FORTH_DSP_VALUEHL
a436 e5				push hl 
a437			 
a437			 
a437				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a437 cd 42 9d			call macro_forth_dsp_pop 
a43a				endm 
# End of macro FORTH_DSP_POP
a43a			 
a43a			 
a43a d1				pop de 
a43b e1				pop hl 
a43c			 
a43c 73				ld (hl),e 
a43d			 
a43d			 
a43d				NEXTW 
a43d c3 76 9e			jp macro_next 
a440				endm 
# End of macro NEXTW
a440			.CBANG: 
a440			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a440 22				db WORD_SYS_CORE+OPCODE_CBANG             
a441 69 a4			dw .SCALL            
a443 03				db 2 + 1 
a444 .. 00			db "C!",0              
a447				endm 
# End of macro CWHEAD
a447			; | C!  ( x w -- ) Store x at address w  | DONE 
a447				if DEBUG_FORTH_WORDS_KEY 
a447					DMARK "CBA" 
a447 f5				push af  
a448 3a 5c a4			ld a, (.dmark)  
a44b 32 65 ee			ld (debug_mark),a  
a44e 3a 5d a4			ld a, (.dmark+1)  
a451 32 66 ee			ld (debug_mark+1),a  
a454 3a 5e a4			ld a, (.dmark+2)  
a457 32 67 ee			ld (debug_mark+2),a  
a45a 18 03			jr .pastdmark  
a45c ..			.dmark: db "CBA"  
a45f f1			.pastdmark: pop af  
a460			endm  
# End of macro DMARK
a460					CALLMONITOR 
a460 cd 6f ee			call debug_vector  
a463				endm  
# End of macro CALLMONITOR
a463				endif 
a463 c3 2c a4			jp .storebyteat 
a466				NEXTW 
a466 c3 76 9e			jp macro_next 
a469				endm 
# End of macro NEXTW
a469			.SCALL: 
a469			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a469 23				db WORD_SYS_CORE+OPCODE_SCALL             
a46a 9d a4			dw .DEPTH            
a46c 05				db 4 + 1 
a46d .. 00			db "CALL",0              
a472				endm 
# End of macro CWHEAD
a472			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a472				if DEBUG_FORTH_WORDS_KEY 
a472					DMARK "CLL" 
a472 f5				push af  
a473 3a 87 a4			ld a, (.dmark)  
a476 32 65 ee			ld (debug_mark),a  
a479 3a 88 a4			ld a, (.dmark+1)  
a47c 32 66 ee			ld (debug_mark+1),a  
a47f 3a 89 a4			ld a, (.dmark+2)  
a482 32 67 ee			ld (debug_mark+2),a  
a485 18 03			jr .pastdmark  
a487 ..			.dmark: db "CLL"  
a48a f1			.pastdmark: pop af  
a48b			endm  
# End of macro DMARK
a48b					CALLMONITOR 
a48b cd 6f ee			call debug_vector  
a48e				endm  
# End of macro CALLMONITOR
a48e				endif 
a48e			 
a48e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a48e cd 8a 9c			call macro_dsp_valuehl 
a491				endm 
# End of macro FORTH_DSP_VALUEHL
a491			 
a491			;		push hl 
a491			 
a491				; destroy value TOS 
a491			 
a491				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a491 cd 42 9d			call macro_forth_dsp_pop 
a494				endm 
# End of macro FORTH_DSP_POP
a494			 
a494					 
a494			;		pop hl 
a494			 
a494				; how to do a call with hl???? save SP? 
a494 cd 1a 9e			call forth_call_hl 
a497			 
a497			 
a497				; TODO push value back onto stack for another op etc 
a497			 
a497 cd 85 9a			call forth_push_numhl 
a49a				NEXTW 
a49a c3 76 9e			jp macro_next 
a49d				endm 
# End of macro NEXTW
a49d			.DEPTH: 
a49d			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a49d 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a49e da a4			dw .OVER            
a4a0 06				db 5 + 1 
a4a1 .. 00			db "DEPTH",0              
a4a7				endm 
# End of macro CWHEAD
a4a7			; | DEPTH ( -- u ) Push count of stack | DONE 
a4a7				; take current TOS and remove from base value div by two to get count 
a4a7				if DEBUG_FORTH_WORDS_KEY 
a4a7					DMARK "DEP" 
a4a7 f5				push af  
a4a8 3a bc a4			ld a, (.dmark)  
a4ab 32 65 ee			ld (debug_mark),a  
a4ae 3a bd a4			ld a, (.dmark+1)  
a4b1 32 66 ee			ld (debug_mark+1),a  
a4b4 3a be a4			ld a, (.dmark+2)  
a4b7 32 67 ee			ld (debug_mark+2),a  
a4ba 18 03			jr .pastdmark  
a4bc ..			.dmark: db "DEP"  
a4bf f1			.pastdmark: pop af  
a4c0			endm  
# End of macro DMARK
a4c0					CALLMONITOR 
a4c0 cd 6f ee			call debug_vector  
a4c3				endm  
# End of macro CALLMONITOR
a4c3				endif 
a4c3			 
a4c3			 
a4c3 2a e8 e9		ld hl, (cli_data_sp) 
a4c6 11 22 e8		ld de, cli_data_stack 
a4c9 ed 52		sbc hl,de 
a4cb			 
a4cb			; div by size of stack item 
a4cb			 
a4cb 5d			ld e,l 
a4cc 0e 03		ld c, 3 
a4ce cd 7a 8c		call Div8 
a4d1			 
a4d1 6f			ld l,a 
a4d2 26 00		ld h,0 
a4d4			 
a4d4			;srl h 
a4d4			;rr l 
a4d4			 
a4d4 cd 85 9a			call forth_push_numhl 
a4d7				NEXTW 
a4d7 c3 76 9e			jp macro_next 
a4da				endm 
# End of macro NEXTW
a4da			.OVER: 
a4da			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a4da 42				db WORD_SYS_CORE+46             
a4db 21 a5			dw .PAUSE            
a4dd 05				db 4 + 1 
a4de .. 00			db "OVER",0              
a4e3				endm 
# End of macro CWHEAD
a4e3			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
a4e3				if DEBUG_FORTH_WORDS_KEY 
a4e3					DMARK "OVR" 
a4e3 f5				push af  
a4e4 3a f8 a4			ld a, (.dmark)  
a4e7 32 65 ee			ld (debug_mark),a  
a4ea 3a f9 a4			ld a, (.dmark+1)  
a4ed 32 66 ee			ld (debug_mark+1),a  
a4f0 3a fa a4			ld a, (.dmark+2)  
a4f3 32 67 ee			ld (debug_mark+2),a  
a4f6 18 03			jr .pastdmark  
a4f8 ..			.dmark: db "OVR"  
a4fb f1			.pastdmark: pop af  
a4fc			endm  
# End of macro DMARK
a4fc					CALLMONITOR 
a4fc cd 6f ee			call debug_vector  
a4ff				endm  
# End of macro CALLMONITOR
a4ff				endif 
a4ff			 
a4ff			; TODO Use os stack swap memory 
a4ff			 
a4ff				; work out what type we are looking at 
a4ff			 
a4ff				FORTH_DSP_PTR 1 
a4ff 2a e8 e9			ld hl,(cli_data_sp) 
a502 11 03 00			ld de, 1 * 3 
a505 ed 52			sbc hl, de 
a507				endm 
# End of macro FORTH_DSP_PTR
a507			 
a507 7e				ld a, (hl) 
a508				 
a508 f5				push af 
a509				; whatever the type lets get the pointer or word 
a509 23				inc hl 
a50a			;; 
a50a			 
a50a				; type check now to decide on how to push  
a50a			 
a50a cd f8 9d			call loadwordinhl 
a50d f1				pop af 
a50e fe 01			cp DS_TYPE_STR 
a510 28 06			jr z, .ovstr 
a512			 
a512				; we have a numeric so load the word and push 
a512			;	ld e, (hl) 
a512			;	inc hl 
a512			;	ld d, (hl) 
a512			;	ex de, hl 
a512 cd 85 9a			call forth_push_numhl 
a515				NEXTW 
a515 c3 76 9e			jp macro_next 
a518				endm 
# End of macro NEXTW
a518			 
a518			.ovstr: 
a518				; ok, a string so get the pointer and push as a string 
a518			 
a518			;	call loadwordinhl 
a518 cd f3 9a			call forth_push_str 
a51b				NEXTW 
a51b c3 76 9e			jp macro_next 
a51e				endm 
# End of macro NEXTW
a51e			 
a51e			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a51e			;	push hl    ; n2 
a51e			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a51e			; 
a51e			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a51e			;	push hl    ; n1 
a51e			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a51e			; 
a51e			;	pop de     ; n1 
a51e			;	pop hl     ; n2 
a51e			; 
a51e			;	push de 
a51e			;	push hl 
a51e			;	push de 
a51e			 
a51e				; push back  
a51e			 
a51e			;	pop hl 
a51e			;	call forth_push_numhl 
a51e			;	pop hl 
a51e			;	call forth_push_numhl 
a51e			;	pop hl 
a51e			;	call forth_push_numhl 
a51e				NEXTW 
a51e c3 76 9e			jp macro_next 
a521				endm 
# End of macro NEXTW
a521			 
a521			.PAUSE: 
a521			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a521 43				db WORD_SYS_CORE+47             
a522 56 a5			dw .PAUSES            
a524 08				db 7 + 1 
a525 .. 00			db "PAUSEMS",0              
a52d				endm 
# End of macro CWHEAD
a52d			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a52d				if DEBUG_FORTH_WORDS_KEY 
a52d					DMARK "PMS" 
a52d f5				push af  
a52e 3a 42 a5			ld a, (.dmark)  
a531 32 65 ee			ld (debug_mark),a  
a534 3a 43 a5			ld a, (.dmark+1)  
a537 32 66 ee			ld (debug_mark+1),a  
a53a 3a 44 a5			ld a, (.dmark+2)  
a53d 32 67 ee			ld (debug_mark+2),a  
a540 18 03			jr .pastdmark  
a542 ..			.dmark: db "PMS"  
a545 f1			.pastdmark: pop af  
a546			endm  
# End of macro DMARK
a546					CALLMONITOR 
a546 cd 6f ee			call debug_vector  
a549				endm  
# End of macro CALLMONITOR
a549				endif 
a549				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a549 cd 8a 9c			call macro_dsp_valuehl 
a54c				endm 
# End of macro FORTH_DSP_VALUEHL
a54c			;		push hl    ; n2 
a54c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a54c cd 42 9d			call macro_forth_dsp_pop 
a54f				endm 
# End of macro FORTH_DSP_POP
a54f			;		pop hl 
a54f			 
a54f 7d				ld a, l 
a550 cd e5 89			call aDelayInMS 
a553			       NEXTW 
a553 c3 76 9e			jp macro_next 
a556				endm 
# End of macro NEXTW
a556			.PAUSES:  
a556			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a556 44				db WORD_SYS_CORE+48             
a557 c5 a5			dw .ROT            
a559 06				db 5 + 1 
a55a .. 00			db "PAUSE",0              
a560				endm 
# End of macro CWHEAD
a560			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a560				if DEBUG_FORTH_WORDS_KEY 
a560					DMARK "PAU" 
a560 f5				push af  
a561 3a 75 a5			ld a, (.dmark)  
a564 32 65 ee			ld (debug_mark),a  
a567 3a 76 a5			ld a, (.dmark+1)  
a56a 32 66 ee			ld (debug_mark+1),a  
a56d 3a 77 a5			ld a, (.dmark+2)  
a570 32 67 ee			ld (debug_mark+2),a  
a573 18 03			jr .pastdmark  
a575 ..			.dmark: db "PAU"  
a578 f1			.pastdmark: pop af  
a579			endm  
# End of macro DMARK
a579					CALLMONITOR 
a579 cd 6f ee			call debug_vector  
a57c				endm  
# End of macro CALLMONITOR
a57c				endif 
a57c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a57c cd 8a 9c			call macro_dsp_valuehl 
a57f				endm 
# End of macro FORTH_DSP_VALUEHL
a57f			;		push hl    ; n2 
a57f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a57f cd 42 9d			call macro_forth_dsp_pop 
a582				endm 
# End of macro FORTH_DSP_POP
a582			;		pop hl 
a582 45				ld b, l 
a583				if DEBUG_FORTH_WORDS 
a583					DMARK "PAU" 
a583 f5				push af  
a584 3a 98 a5			ld a, (.dmark)  
a587 32 65 ee			ld (debug_mark),a  
a58a 3a 99 a5			ld a, (.dmark+1)  
a58d 32 66 ee			ld (debug_mark+1),a  
a590 3a 9a a5			ld a, (.dmark+2)  
a593 32 67 ee			ld (debug_mark+2),a  
a596 18 03			jr .pastdmark  
a598 ..			.dmark: db "PAU"  
a59b f1			.pastdmark: pop af  
a59c			endm  
# End of macro DMARK
a59c					CALLMONITOR 
a59c cd 6f ee			call debug_vector  
a59f				endm  
# End of macro CALLMONITOR
a59f				endif 
a59f c5			.pauses1:	push bc 
a5a0 cd 00 8a			call delay1s 
a5a3 c1				pop bc 
a5a4				if DEBUG_FORTH_WORDS 
a5a4					DMARK "PA1" 
a5a4 f5				push af  
a5a5 3a b9 a5			ld a, (.dmark)  
a5a8 32 65 ee			ld (debug_mark),a  
a5ab 3a ba a5			ld a, (.dmark+1)  
a5ae 32 66 ee			ld (debug_mark+1),a  
a5b1 3a bb a5			ld a, (.dmark+2)  
a5b4 32 67 ee			ld (debug_mark+2),a  
a5b7 18 03			jr .pastdmark  
a5b9 ..			.dmark: db "PA1"  
a5bc f1			.pastdmark: pop af  
a5bd			endm  
# End of macro DMARK
a5bd					CALLMONITOR 
a5bd cd 6f ee			call debug_vector  
a5c0				endm  
# End of macro CALLMONITOR
a5c0				endif 
a5c0 10 dd			djnz .pauses1 
a5c2			 
a5c2			       NEXTW 
a5c2 c3 76 9e			jp macro_next 
a5c5				endm 
# End of macro NEXTW
a5c5			.ROT: 
a5c5			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a5c5 45				db WORD_SYS_CORE+49             
a5c6 2e a6			dw .UWORDS            
a5c8 04				db 3 + 1 
a5c9 .. 00			db "ROT",0              
a5cd				endm 
# End of macro CWHEAD
a5cd			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
a5cd				if DEBUG_FORTH_WORDS_KEY 
a5cd					DMARK "ROT" 
a5cd f5				push af  
a5ce 3a e2 a5			ld a, (.dmark)  
a5d1 32 65 ee			ld (debug_mark),a  
a5d4 3a e3 a5			ld a, (.dmark+1)  
a5d7 32 66 ee			ld (debug_mark+1),a  
a5da 3a e4 a5			ld a, (.dmark+2)  
a5dd 32 67 ee			ld (debug_mark+2),a  
a5e0 18 03			jr .pastdmark  
a5e2 ..			.dmark: db "ROT"  
a5e5 f1			.pastdmark: pop af  
a5e6			endm  
# End of macro DMARK
a5e6					CALLMONITOR 
a5e6 cd 6f ee			call debug_vector  
a5e9				endm  
# End of macro CALLMONITOR
a5e9				endif 
a5e9			 
a5e9			; DONE Use os stack swap memory 
a5e9			 
a5e9				FORTH_DSP_PTR 0     ; u3 
a5e9 2a e8 e9			ld hl,(cli_data_sp) 
a5ec 11 00 00			ld de, 0 * 3 
a5ef ed 52			sbc hl, de 
a5f1				endm 
# End of macro FORTH_DSP_PTR
a5f1 cd c2 9d			call hltostack1     
a5f4			  
a5f4				FORTH_DSP_PTR 1     ; u2 
a5f4 2a e8 e9			ld hl,(cli_data_sp) 
a5f7 11 03 00			ld de, 1 * 3 
a5fa ed 52			sbc hl, de 
a5fc				endm 
# End of macro FORTH_DSP_PTR
a5fc cd c8 9d			call hltostack2      
a5ff			 
a5ff				FORTH_DSP_PTR 2     ; u1 
a5ff 2a e8 e9			ld hl,(cli_data_sp) 
a602 11 06 00			ld de, 2 * 3 
a605 ed 52			sbc hl, de 
a607				endm 
# End of macro FORTH_DSP_PTR
a607 cd ce 9d			call hltostack3 
a60a			 
a60a			 
a60a				FORTH_DSP_PTR 0     ;  
a60a 2a e8 e9			ld hl,(cli_data_sp) 
a60d 11 00 00			ld de, 0 * 3 
a610 ed 52			sbc hl, de 
a612				endm 
# End of macro FORTH_DSP_PTR
a612 cd e6 9d			call hlfromstack3 
a615			 
a615				FORTH_DSP_PTR 1     ; TOS 
a615 2a e8 e9			ld hl,(cli_data_sp) 
a618 11 03 00			ld de, 1 * 3 
a61b ed 52			sbc hl, de 
a61d				endm 
# End of macro FORTH_DSP_PTR
a61d cd da 9d			call hlfromstack1 
a620			 
a620				FORTH_DSP_PTR 2     ; TOS 
a620 2a e8 e9			ld hl,(cli_data_sp) 
a623 11 06 00			ld de, 2 * 3 
a626 ed 52			sbc hl, de 
a628				endm 
# End of macro FORTH_DSP_PTR
a628 cd e0 9d			call hlfromstack2 
a62b			 
a62b			 
a62b			;	FORTH_DSP_VALUEHL 
a62b			;	push hl    ; u3  
a62b			; 
a62b			;	FORTH_DSP_POP 
a62b			; 
a62b			;	FORTH_DSP_VALUEHL 
a62b			;	push hl     ; u2 
a62b			; 
a62b			;	FORTH_DSP_POP 
a62b			; 
a62b			;	FORTH_DSP_VALUEHL 
a62b			;	push hl     ; u1 
a62b			; 
a62b			;	FORTH_DSP_POP 
a62b			; 
a62b			;	pop bc      ; u1 
a62b			;	pop hl      ; u2 
a62b			;	pop de      ; u3 
a62b			; 
a62b			; 
a62b			;	push bc 
a62b			;	push de 
a62b			;	push hl 
a62b			; 
a62b			; 
a62b			;	pop hl 
a62b			;	call forth_push_numhl 
a62b			; 
a62b			;	pop hl 
a62b			;	call forth_push_numhl 
a62b			; 
a62b			;	pop hl 
a62b			;	call forth_push_numhl 
a62b				 
a62b			 
a62b			 
a62b			 
a62b			 
a62b			 
a62b			       NEXTW 
a62b c3 76 9e			jp macro_next 
a62e				endm 
# End of macro NEXTW
a62e			 
a62e			.UWORDS: 
a62e			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a62e 50				db WORD_SYS_CORE+60             
a62f f0 a6			dw .BP            
a631 07				db 6 + 1 
a632 .. 00			db "UWORDS",0              
a639				endm 
# End of macro CWHEAD
a639			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a639			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a639			; | | Following the count are the individual words. 
a639			; | | 
a639			; | | e.g. UWORDS 
a639			; | | BOX DIRLIST 2 
a639			; | |  
a639			; | | Can be used to save the words to storage via: 
a639			; | | UWORDS $01 DO $01 APPEND LOOP 
a639			if DEBUG_FORTH_WORDS_KEY 
a639				DMARK "UWR" 
a639 f5				push af  
a63a 3a 4e a6			ld a, (.dmark)  
a63d 32 65 ee			ld (debug_mark),a  
a640 3a 4f a6			ld a, (.dmark+1)  
a643 32 66 ee			ld (debug_mark+1),a  
a646 3a 50 a6			ld a, (.dmark+2)  
a649 32 67 ee			ld (debug_mark+2),a  
a64c 18 03			jr .pastdmark  
a64e ..			.dmark: db "UWR"  
a651 f1			.pastdmark: pop af  
a652			endm  
# End of macro DMARK
a652				CALLMONITOR 
a652 cd 6f ee			call debug_vector  
a655				endm  
# End of macro CALLMONITOR
a655			endif 
a655 21 af dd			ld hl, baseram 
a658				;ld hl, baseusermem 
a658 01 00 00			ld bc, 0    ; start a counter 
a65b			 
a65b			; skip dict stub 
a65b			 
a65b cd c7 9f			call forth_tok_next 
a65e			 
a65e			 
a65e			; while we have words to look for 
a65e			 
a65e 7e			.douscan:	ld a, (hl)      
a65f			if DEBUG_FORTH_WORDS 
a65f				DMARK "UWs" 
a65f f5				push af  
a660 3a 74 a6			ld a, (.dmark)  
a663 32 65 ee			ld (debug_mark),a  
a666 3a 75 a6			ld a, (.dmark+1)  
a669 32 66 ee			ld (debug_mark+1),a  
a66c 3a 76 a6			ld a, (.dmark+2)  
a66f 32 67 ee			ld (debug_mark+2),a  
a672 18 03			jr .pastdmark  
a674 ..			.dmark: db "UWs"  
a677 f1			.pastdmark: pop af  
a678			endm  
# End of macro DMARK
a678				CALLMONITOR 
a678 cd 6f ee			call debug_vector  
a67b				endm  
# End of macro CALLMONITOR
a67b			endif 
a67b fe 00			cp WORD_SYS_END 
a67d 28 4d			jr z, .udone 
a67f fe 01			cp WORD_SYS_UWORD 
a681 20 44			jr nz, .nuword 
a683			 
a683			if DEBUG_FORTH_WORDS 
a683				DMARK "UWu" 
a683 f5				push af  
a684 3a 98 a6			ld a, (.dmark)  
a687 32 65 ee			ld (debug_mark),a  
a68a 3a 99 a6			ld a, (.dmark+1)  
a68d 32 66 ee			ld (debug_mark+1),a  
a690 3a 9a a6			ld a, (.dmark+2)  
a693 32 67 ee			ld (debug_mark+2),a  
a696 18 03			jr .pastdmark  
a698 ..			.dmark: db "UWu"  
a69b f1			.pastdmark: pop af  
a69c			endm  
# End of macro DMARK
a69c				CALLMONITOR 
a69c cd 6f ee			call debug_vector  
a69f				endm  
# End of macro CALLMONITOR
a69f			endif 
a69f				; we have a uword so push its name to the stack 
a69f			 
a69f e5				push hl  ; save so we can move to next dict block 
a6a0			 
a6a0				; skip opcode 
a6a0 23				inc hl  
a6a1				; skip next ptr 
a6a1 23				inc hl  
a6a2 23				inc hl 
a6a3				; skip len 
a6a3 23				inc hl 
a6a4			if DEBUG_FORTH_WORDS 
a6a4				DMARK "UWt" 
a6a4 f5				push af  
a6a5 3a b9 a6			ld a, (.dmark)  
a6a8 32 65 ee			ld (debug_mark),a  
a6ab 3a ba a6			ld a, (.dmark+1)  
a6ae 32 66 ee			ld (debug_mark+1),a  
a6b1 3a bb a6			ld a, (.dmark+2)  
a6b4 32 67 ee			ld (debug_mark+2),a  
a6b7 18 03			jr .pastdmark  
a6b9 ..			.dmark: db "UWt"  
a6bc f1			.pastdmark: pop af  
a6bd			endm  
# End of macro DMARK
a6bd				CALLMONITOR 
a6bd cd 6f ee			call debug_vector  
a6c0				endm  
# End of macro CALLMONITOR
a6c0			endif 
a6c0 03				inc bc 
a6c1			 
a6c1 c5				push bc 
a6c2 cd f3 9a			call forth_push_str 
a6c5 c1				pop bc 
a6c6			 
a6c6 e1				pop hl 	 
a6c7			 
a6c7 cd c7 9f		.nuword:	call forth_tok_next 
a6ca 18 92			jr .douscan  
a6cc			 
a6cc			.udone:		 ; push count of uwords found 
a6cc c5				push bc 
a6cd e1				pop hl 
a6ce			 
a6ce			if DEBUG_FORTH_WORDS 
a6ce				DMARK "UWc" 
a6ce f5				push af  
a6cf 3a e3 a6			ld a, (.dmark)  
a6d2 32 65 ee			ld (debug_mark),a  
a6d5 3a e4 a6			ld a, (.dmark+1)  
a6d8 32 66 ee			ld (debug_mark+1),a  
a6db 3a e5 a6			ld a, (.dmark+2)  
a6de 32 67 ee			ld (debug_mark+2),a  
a6e1 18 03			jr .pastdmark  
a6e3 ..			.dmark: db "UWc"  
a6e6 f1			.pastdmark: pop af  
a6e7			endm  
# End of macro DMARK
a6e7				CALLMONITOR 
a6e7 cd 6f ee			call debug_vector  
a6ea				endm  
# End of macro CALLMONITOR
a6ea			endif 
a6ea cd 85 9a			call forth_push_numhl 
a6ed			 
a6ed			 
a6ed			       NEXTW 
a6ed c3 76 9e			jp macro_next 
a6f0				endm 
# End of macro NEXTW
a6f0			 
a6f0			.BP: 
a6f0			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a6f0 54				db WORD_SYS_CORE+64             
a6f1 2a a7			dw .MONITOR            
a6f3 03				db 2 + 1 
a6f4 .. 00			db "BP",0              
a6f7				endm 
# End of macro CWHEAD
a6f7			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a6f7			; | | $00 Will enable the break points within specific code paths 
a6f7			; | | $01 Will disable break points 
a6f7			; | |  
a6f7			; | | By default break points are off. Either the above can be used to enable them 
a6f7			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a6f7			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a6f7			; | | can disable break points. Exiting will then continue boot process. 
a6f7				; get byte count 
a6f7				if DEBUG_FORTH_WORDS_KEY 
a6f7					DMARK "BP." 
a6f7 f5				push af  
a6f8 3a 0c a7			ld a, (.dmark)  
a6fb 32 65 ee			ld (debug_mark),a  
a6fe 3a 0d a7			ld a, (.dmark+1)  
a701 32 66 ee			ld (debug_mark+1),a  
a704 3a 0e a7			ld a, (.dmark+2)  
a707 32 67 ee			ld (debug_mark+2),a  
a70a 18 03			jr .pastdmark  
a70c ..			.dmark: db "BP."  
a70f f1			.pastdmark: pop af  
a710			endm  
# End of macro DMARK
a710					CALLMONITOR 
a710 cd 6f ee			call debug_vector  
a713				endm  
# End of macro CALLMONITOR
a713				endif 
a713			 
a713				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a713 cd 8a 9c			call macro_dsp_valuehl 
a716				endm 
# End of macro FORTH_DSP_VALUEHL
a716			 
a716			;		push hl 
a716			 
a716				; destroy value TOS 
a716			 
a716				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a716 cd 42 9d			call macro_forth_dsp_pop 
a719				endm 
# End of macro FORTH_DSP_POP
a719			 
a719			;		pop hl 
a719			 
a719 3e 00			ld a,0 
a71b bd				cp l 
a71c 28 06			jr z, .bpset 
a71e			;		ld a, '*' 
a71e cd 00 94			call bp_off 
a721				NEXTW 
a721 c3 76 9e			jp macro_next 
a724				endm 
# End of macro NEXTW
a724			 
a724			.bpset:	 
a724				;	ld (os_view_disable), a 
a724 cd f4 93			call bp_on 
a727			 
a727			 
a727				NEXTW 
a727 c3 76 9e			jp macro_next 
a72a				endm 
# End of macro NEXTW
a72a			 
a72a			 
a72a			.MONITOR: 
a72a			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a72a 55				db WORD_SYS_CORE+65             
a72b 5b a7			dw .MALLOC            
a72d 08				db 7 + 1 
a72e .. 00			db "MONITOR",0              
a736				endm 
# End of macro CWHEAD
a736			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a736			; | | At start the current various registers will be displayed with contents. 
a736			; | | Top right corner will show the most recent debug marker seen. 
a736			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a736			; | | and the return stack pointer (RSP). 
a736			; | | Pressing: 
a736			; | |    1 - Initial screen 
a736			; | |    2 - Display a data dump of HL 
a736			; | |    3 - Display a data dump of DE 
a736			; | |    4 - Display a data dump of BC 
a736			; | |    5 - Display a data dump of HL 
a736			; | |    6 - Display a data dump of DSP 
a736			; | |    7 - Display a data dump of RSP 
a736			; | |    8 - Display a data dump of what is at DSP 
a736			; | |    9 - Display a data dump of what is at RSP 
a736			; | |    0 - Exit monitor and continue running. This will also enable break points 
a736			; | |    * - Disable break points 
a736			; | |    # - Enter traditional monitor mode 
a736			; | | 
a736			; | | Monitor Mode 
a736			; | | ------------ 
a736			; | | A prompt of '>' will be shown for various commands: 
a736			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a736			; | |    C - Continue display a data dump from the last set address 
a736			; | |    M xxxx - Set start of memory edit at address xx 
a736			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a736			; | |    G xxxx - Exec code at specific address 
a736			; | |    Q - Return to previous 
a736				if DEBUG_FORTH_WORDS_KEY 
a736					DMARK "MON" 
a736 f5				push af  
a737 3a 4b a7			ld a, (.dmark)  
a73a 32 65 ee			ld (debug_mark),a  
a73d 3a 4c a7			ld a, (.dmark+1)  
a740 32 66 ee			ld (debug_mark+1),a  
a743 3a 4d a7			ld a, (.dmark+2)  
a746 32 67 ee			ld (debug_mark+2),a  
a749 18 03			jr .pastdmark  
a74b ..			.dmark: db "MON"  
a74e f1			.pastdmark: pop af  
a74f			endm  
# End of macro DMARK
a74f					CALLMONITOR 
a74f cd 6f ee			call debug_vector  
a752				endm  
# End of macro CALLMONITOR
a752				endif 
a752			;		ld a, 0 
a752			;		ld (os_view_disable), a 
a752 cd f4 93			call bp_on 
a755			 
a755				CALLMONITOR 
a755 cd 6f ee			call debug_vector  
a758				endm  
# End of macro CALLMONITOR
a758			 
a758			;	call monitor 
a758			 
a758				NEXTW 
a758 c3 76 9e			jp macro_next 
a75b				endm 
# End of macro NEXTW
a75b			 
a75b			 
a75b			.MALLOC: 
a75b			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a75b 56				db WORD_SYS_CORE+66             
a75c 84 a7			dw .MALLOC2            
a75e 06				db 5 + 1 
a75f .. 00			db "ALLOT",0              
a765				endm 
# End of macro CWHEAD
a765			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a765				if DEBUG_FORTH_WORDS_KEY 
a765					DMARK "ALL" 
a765 f5				push af  
a766 3a 7a a7			ld a, (.dmark)  
a769 32 65 ee			ld (debug_mark),a  
a76c 3a 7b a7			ld a, (.dmark+1)  
a76f 32 66 ee			ld (debug_mark+1),a  
a772 3a 7c a7			ld a, (.dmark+2)  
a775 32 67 ee			ld (debug_mark+2),a  
a778 18 03			jr .pastdmark  
a77a ..			.dmark: db "ALL"  
a77d f1			.pastdmark: pop af  
a77e			endm  
# End of macro DMARK
a77e					CALLMONITOR 
a77e cd 6f ee			call debug_vector  
a781				endm  
# End of macro CALLMONITOR
a781				endif 
a781 c3 ab a7			jp .mallocc 
a784			.MALLOC2: 
a784			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a784 56				db WORD_SYS_CORE+66             
a785 c2 a7			dw .FREE            
a787 07				db 6 + 1 
a788 .. 00			db "MALLOC",0              
a78f				endm 
# End of macro CWHEAD
a78f			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a78f				; get byte count 
a78f				if DEBUG_FORTH_WORDS_KEY 
a78f					DMARK "MAL" 
a78f f5				push af  
a790 3a a4 a7			ld a, (.dmark)  
a793 32 65 ee			ld (debug_mark),a  
a796 3a a5 a7			ld a, (.dmark+1)  
a799 32 66 ee			ld (debug_mark+1),a  
a79c 3a a6 a7			ld a, (.dmark+2)  
a79f 32 67 ee			ld (debug_mark+2),a  
a7a2 18 03			jr .pastdmark  
a7a4 ..			.dmark: db "MAL"  
a7a7 f1			.pastdmark: pop af  
a7a8			endm  
# End of macro DMARK
a7a8					CALLMONITOR 
a7a8 cd 6f ee			call debug_vector  
a7ab				endm  
# End of macro CALLMONITOR
a7ab				endif 
a7ab			.mallocc: 
a7ab				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a7ab cd 8a 9c			call macro_dsp_valuehl 
a7ae				endm 
# End of macro FORTH_DSP_VALUEHL
a7ae			 
a7ae			;		push hl 
a7ae			 
a7ae				; destroy value TOS 
a7ae			 
a7ae				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a7ae cd 42 9d			call macro_forth_dsp_pop 
a7b1				endm 
# End of macro FORTH_DSP_POP
a7b1			 
a7b1			;		pop hl 
a7b1 cd c5 90			call malloc 
a7b4			if DEBUG_FORTH_MALLOC_GUARD 
a7b4 f5				push af 
a7b5 cd 13 8d			call ishlzero 
a7b8			;		ld a, l 
a7b8			;		add h 
a7b8			;		cp 0 
a7b8 f1				pop af 
a7b9				 
a7b9 cc 72 cc			call z,malloc_error 
a7bc			endif 
a7bc			 
a7bc cd 85 9a			call forth_push_numhl 
a7bf				NEXTW 
a7bf c3 76 9e			jp macro_next 
a7c2				endm 
# End of macro NEXTW
a7c2			 
a7c2			.FREE: 
a7c2			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a7c2 57				db WORD_SYS_CORE+67             
a7c3 f3 a7			dw .LIST            
a7c5 05				db 4 + 1 
a7c6 .. 00			db "FREE",0              
a7cb				endm 
# End of macro CWHEAD
a7cb			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a7cb				if DEBUG_FORTH_WORDS_KEY 
a7cb					DMARK "FRE" 
a7cb f5				push af  
a7cc 3a e0 a7			ld a, (.dmark)  
a7cf 32 65 ee			ld (debug_mark),a  
a7d2 3a e1 a7			ld a, (.dmark+1)  
a7d5 32 66 ee			ld (debug_mark+1),a  
a7d8 3a e2 a7			ld a, (.dmark+2)  
a7db 32 67 ee			ld (debug_mark+2),a  
a7de 18 03			jr .pastdmark  
a7e0 ..			.dmark: db "FRE"  
a7e3 f1			.pastdmark: pop af  
a7e4			endm  
# End of macro DMARK
a7e4					CALLMONITOR 
a7e4 cd 6f ee			call debug_vector  
a7e7				endm  
# End of macro CALLMONITOR
a7e7				endif 
a7e7				; get address 
a7e7			 
a7e7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a7e7 cd 8a 9c			call macro_dsp_valuehl 
a7ea				endm 
# End of macro FORTH_DSP_VALUEHL
a7ea			 
a7ea			;		push hl 
a7ea			 
a7ea				; destroy value TOS 
a7ea			 
a7ea				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a7ea cd 42 9d			call macro_forth_dsp_pop 
a7ed				endm 
# End of macro FORTH_DSP_POP
a7ed			 
a7ed			;		pop hl 
a7ed			if FORTH_ENABLE_MALLOCFREE 
a7ed cd 8f 91			call free 
a7f0			endif 
a7f0				NEXTW 
a7f0 c3 76 9e			jp macro_next 
a7f3				endm 
# End of macro NEXTW
a7f3			.LIST: 
a7f3			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a7f3 5c				db WORD_SYS_CORE+72             
a7f4 ef a9			dw .FORGET            
a7f6 05				db 4 + 1 
a7f7 .. 00			db "LIST",0              
a7fc				endm 
# End of macro CWHEAD
a7fc			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a7fc			; | | The quoted word must be in upper case. 
a7fc			if DEBUG_FORTH_WORDS_KEY 
a7fc				DMARK "LST" 
a7fc f5				push af  
a7fd 3a 11 a8			ld a, (.dmark)  
a800 32 65 ee			ld (debug_mark),a  
a803 3a 12 a8			ld a, (.dmark+1)  
a806 32 66 ee			ld (debug_mark+1),a  
a809 3a 13 a8			ld a, (.dmark+2)  
a80c 32 67 ee			ld (debug_mark+2),a  
a80f 18 03			jr .pastdmark  
a811 ..			.dmark: db "LST"  
a814 f1			.pastdmark: pop af  
a815			endm  
# End of macro DMARK
a815				CALLMONITOR 
a815 cd 6f ee			call debug_vector  
a818				endm  
# End of macro CALLMONITOR
a818			endif 
a818			 
a818				FORTH_DSP_VALUEHL 
a818 cd 8a 9c			call macro_dsp_valuehl 
a81b				endm 
# End of macro FORTH_DSP_VALUEHL
a81b			 
a81b e5				push hl 
a81c				FORTH_DSP_POP 
a81c cd 42 9d			call macro_forth_dsp_pop 
a81f				endm 
# End of macro FORTH_DSP_POP
a81f c1				pop bc 
a820			 
a820			; Start format of scratch string 
a820			 
a820 21 bb e2			ld hl, scratch 
a823			 
a823 3e 3a			ld a, ':' 
a825 77				ld (hl),a 
a826 23				inc hl 
a827 3e 20			ld a, ' ' 
a829 77				ld (hl), a 
a82a			 
a82a				; Get ptr to the word we need to look up 
a82a			 
a82a			;		FORTH_DSP_VALUEHL 
a82a				;v5 FORTH_DSP_VALUE 
a82a			; TODO type check 
a82a			;		inc hl    ; Skip type check  
a82a			;		push hl 
a82a			;		ex de, hl    ; put into DE 
a82a			 
a82a			 
a82a 21 af dd			ld hl, baseram 
a82d				;ld hl, baseusermem 
a82d			 
a82d e5			push hl   ; sacreifical push 
a82e			 
a82e			.ldouscanm: 
a82e e1			pop hl 
a82f			.ldouscan: 
a82f			if DEBUG_FORTH_WORDS 
a82f				DMARK "LSs" 
a82f f5				push af  
a830 3a 44 a8			ld a, (.dmark)  
a833 32 65 ee			ld (debug_mark),a  
a836 3a 45 a8			ld a, (.dmark+1)  
a839 32 66 ee			ld (debug_mark+1),a  
a83c 3a 46 a8			ld a, (.dmark+2)  
a83f 32 67 ee			ld (debug_mark+2),a  
a842 18 03			jr .pastdmark  
a844 ..			.dmark: db "LSs"  
a847 f1			.pastdmark: pop af  
a848			endm  
# End of macro DMARK
a848				CALLMONITOR 
a848 cd 6f ee			call debug_vector  
a84b				endm  
# End of macro CALLMONITOR
a84b			endif 
a84b			; skip dict stub 
a84b cd c7 9f			call forth_tok_next 
a84e			 
a84e			 
a84e			; while we have words to look for 
a84e			 
a84e 7e			ld a, (hl)      
a84f			if DEBUG_FORTH_WORDS 
a84f				DMARK "LSk" 
a84f f5				push af  
a850 3a 64 a8			ld a, (.dmark)  
a853 32 65 ee			ld (debug_mark),a  
a856 3a 65 a8			ld a, (.dmark+1)  
a859 32 66 ee			ld (debug_mark+1),a  
a85c 3a 66 a8			ld a, (.dmark+2)  
a85f 32 67 ee			ld (debug_mark+2),a  
a862 18 03			jr .pastdmark  
a864 ..			.dmark: db "LSk"  
a867 f1			.pastdmark: pop af  
a868			endm  
# End of macro DMARK
a868				CALLMONITOR 
a868 cd 6f ee			call debug_vector  
a86b				endm  
# End of macro CALLMONITOR
a86b			endif 
a86b				;cp WORD_SYS_END 
a86b				;jp z, .lunotfound 
a86b			 
a86b					; if we hit non uwords then gone too far 
a86b fe 01				cp WORD_SYS_UWORD 
a86d c2 ab a9				jp nz, .lunotfound 
a870			 
a870				if DEBUG_FORTH_WORDS 
a870					DMARK "LSu" 
a870 f5				push af  
a871 3a 85 a8			ld a, (.dmark)  
a874 32 65 ee			ld (debug_mark),a  
a877 3a 86 a8			ld a, (.dmark+1)  
a87a 32 66 ee			ld (debug_mark+1),a  
a87d 3a 87 a8			ld a, (.dmark+2)  
a880 32 67 ee			ld (debug_mark+2),a  
a883 18 03			jr .pastdmark  
a885 ..			.dmark: db "LSu"  
a888 f1			.pastdmark: pop af  
a889			endm  
# End of macro DMARK
a889					CALLMONITOR 
a889 cd 6f ee			call debug_vector  
a88c				endm  
# End of macro CALLMONITOR
a88c				endif 
a88c			 
a88c					; found a uword but is it the one we want... 
a88c			 
a88c c5					push bc     ; uword to find is on bc 
a88d d1					pop de 
a88e			 
a88e e5					push hl  ; to save the ptr 
a88f			 
a88f					; skip opcode 
a88f 23					inc hl  
a890					; skip next ptr 
a890 23					inc hl  
a891 23					inc hl 
a892					; skip len 
a892 23					inc hl 
a893			 
a893				if DEBUG_FORTH_WORDS 
a893					DMARK "LSc" 
a893 f5				push af  
a894 3a a8 a8			ld a, (.dmark)  
a897 32 65 ee			ld (debug_mark),a  
a89a 3a a9 a8			ld a, (.dmark+1)  
a89d 32 66 ee			ld (debug_mark+1),a  
a8a0 3a aa a8			ld a, (.dmark+2)  
a8a3 32 67 ee			ld (debug_mark+2),a  
a8a6 18 03			jr .pastdmark  
a8a8 ..			.dmark: db "LSc"  
a8ab f1			.pastdmark: pop af  
a8ac			endm  
# End of macro DMARK
a8ac					CALLMONITOR 
a8ac cd 6f ee			call debug_vector  
a8af				endm  
# End of macro CALLMONITOR
a8af				endif 
a8af			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a8af			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a8af			; Nope that has gone the other way. It needs to be exact not on first zero 
a8af			;		call strcmp 
a8af c5					push bc 
a8b0 cd 95 90				call StrictStrCmp 
a8b3 c1					pop bc 
a8b4 c2 2e a8				jp nz, .ldouscanm 
a8b7				 
a8b7			 
a8b7			 
a8b7					; we have a uword so push its name to the stack 
a8b7			 
a8b7			;	   	push hl  ; save so we can move to next dict block 
a8b7 e1			pop hl 
a8b8			 
a8b8				if DEBUG_FORTH_WORDS 
a8b8					DMARK "LSm" 
a8b8 f5				push af  
a8b9 3a cd a8			ld a, (.dmark)  
a8bc 32 65 ee			ld (debug_mark),a  
a8bf 3a ce a8			ld a, (.dmark+1)  
a8c2 32 66 ee			ld (debug_mark+1),a  
a8c5 3a cf a8			ld a, (.dmark+2)  
a8c8 32 67 ee			ld (debug_mark+2),a  
a8cb 18 03			jr .pastdmark  
a8cd ..			.dmark: db "LSm"  
a8d0 f1			.pastdmark: pop af  
a8d1			endm  
# End of macro DMARK
a8d1					CALLMONITOR 
a8d1 cd 6f ee			call debug_vector  
a8d4				endm  
# End of macro CALLMONITOR
a8d4				endif 
a8d4			 
a8d4					; skip opcode 
a8d4 23					inc hl  
a8d5					; skip next ptr 
a8d5 23					inc hl  
a8d6 23					inc hl 
a8d7					; skip len 
a8d7 7e					ld a, (hl)   ; save length to add 
a8d8				if DEBUG_FORTH_WORDS 
a8d8					DMARK "LS2" 
a8d8 f5				push af  
a8d9 3a ed a8			ld a, (.dmark)  
a8dc 32 65 ee			ld (debug_mark),a  
a8df 3a ee a8			ld a, (.dmark+1)  
a8e2 32 66 ee			ld (debug_mark+1),a  
a8e5 3a ef a8			ld a, (.dmark+2)  
a8e8 32 67 ee			ld (debug_mark+2),a  
a8eb 18 03			jr .pastdmark  
a8ed ..			.dmark: db "LS2"  
a8f0 f1			.pastdmark: pop af  
a8f1			endm  
# End of macro DMARK
a8f1					CALLMONITOR 
a8f1 cd 6f ee			call debug_vector  
a8f4				endm  
# End of macro CALLMONITOR
a8f4				endif 
a8f4			 
a8f4					; save this location 
a8f4				 
a8f4 e5					push hl 
a8f5			 
a8f5 23					inc hl 
a8f6 11 bd e2				ld de, scratch+2 
a8f9 4f					ld c, a 
a8fa 06 00				ld b, 0 
a8fc			 
a8fc				if DEBUG_FORTH_WORDS 
a8fc					DMARK "LSn" 
a8fc f5				push af  
a8fd 3a 11 a9			ld a, (.dmark)  
a900 32 65 ee			ld (debug_mark),a  
a903 3a 12 a9			ld a, (.dmark+1)  
a906 32 66 ee			ld (debug_mark+1),a  
a909 3a 13 a9			ld a, (.dmark+2)  
a90c 32 67 ee			ld (debug_mark+2),a  
a90f 18 03			jr .pastdmark  
a911 ..			.dmark: db "LSn"  
a914 f1			.pastdmark: pop af  
a915			endm  
# End of macro DMARK
a915					CALLMONITOR 
a915 cd 6f ee			call debug_vector  
a918				endm  
# End of macro CALLMONITOR
a918				endif 
a918			 
a918					; copy uword name to scratch 
a918			 
a918			;		ldir 
a918			.licplw:	; copy uword name to scratch converting to lower case as we go 
a918 ed a0				ldi 
a91a 1b					dec de 
a91b 1a					ld a, (de) 
a91c cd 68 8f				call to_lower 
a91f 12					ld (de),a 
a920 13					inc de 
a921 3e 00				ld a, 0 
a923 b9					cp c 
a924 20 f2				jr nz, .licplw 
a926			 
a926			 
a926			 
a926 1b					dec de 
a927 3e 20				ld a, ' '    ; change null to space 
a929 12					ld (de), a 
a92a			 
a92a 13					inc de 
a92b			 
a92b d5					push de 
a92c c1					pop bc     ; move scratch pointer to end of word name and save it 
a92d			 
a92d e1					pop hl 
a92e 7e					ld a, (hl) 
a92f					;inc hl 
a92f					; skip word string 
a92f cd ea 8c				call addatohl 
a932			 
a932 23					inc hl 
a933			 
a933				if DEBUG_FORTH_WORDS 
a933					DMARK "LS3" 
a933 f5				push af  
a934 3a 48 a9			ld a, (.dmark)  
a937 32 65 ee			ld (debug_mark),a  
a93a 3a 49 a9			ld a, (.dmark+1)  
a93d 32 66 ee			ld (debug_mark+1),a  
a940 3a 4a a9			ld a, (.dmark+2)  
a943 32 67 ee			ld (debug_mark+2),a  
a946 18 03			jr .pastdmark  
a948 ..			.dmark: db "LS3"  
a94b f1			.pastdmark: pop af  
a94c			endm  
# End of macro DMARK
a94c					CALLMONITOR 
a94c cd 6f ee			call debug_vector  
a94f				endm  
# End of macro CALLMONITOR
a94f				endif 
a94f					; should now be at the start of the machine code to setup the eval of the uword 
a94f					; now locate the ptr to the string defintion 
a94f			 
a94f					; skip ld hl, 
a94f					; then load the ptr 
a94f			; TODO use get from hl ptr 
a94f 23					inc hl 
a950 5e					ld e, (hl) 
a951 23					inc hl 
a952 56					ld d, (hl) 
a953 eb					ex de, hl 
a954			 
a954			 
a954				if DEBUG_FORTH_WORDS 
a954					DMARK "LSt" 
a954 f5				push af  
a955 3a 69 a9			ld a, (.dmark)  
a958 32 65 ee			ld (debug_mark),a  
a95b 3a 6a a9			ld a, (.dmark+1)  
a95e 32 66 ee			ld (debug_mark+1),a  
a961 3a 6b a9			ld a, (.dmark+2)  
a964 32 67 ee			ld (debug_mark+2),a  
a967 18 03			jr .pastdmark  
a969 ..			.dmark: db "LSt"  
a96c f1			.pastdmark: pop af  
a96d			endm  
# End of macro DMARK
a96d					CALLMONITOR 
a96d cd 6f ee			call debug_vector  
a970				endm  
# End of macro CALLMONITOR
a970				endif 
a970			 
a970			; cant push right now due to tokenised strings  
a970			 
a970			; get the destination of where to copy this definition to. 
a970			 
a970 c5					push bc 
a971 d1					pop de 
a972			 
a972 7e			.listl:         ld a,(hl) 
a973 fe 00				cp 0 
a975 28 09				jr z, .lreplsp     ; replace zero with space 
a977					;cp FORTH_END_BUFFER 
a977 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
a979 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
a97b				 
a97b					; just copy this char as is then 
a97b			 
a97b 12					ld (de), a 
a97c			 
a97c 23			.listnxt:	inc hl 
a97d 13					inc de 
a97e 18 f2				jr .listl 
a980			 
a980 3e 20		.lreplsp:	ld a,' ' 
a982 12					ld (de), a 
a983 18 f7				jr .listnxt 
a985			 
a985			; close up uword def 
a985			 
a985			.listdone: 
a985 12					ld (de), a 
a986 13					inc de 
a987 3e 00				ld a, 0 
a989 12					ld (de), a 
a98a			 
a98a			; now have def so clean up and push to stack 
a98a			 
a98a 21 bb e2				ld hl, scratch 
a98d				if DEBUG_FORTH_WORDS 
a98d					DMARK "Ltp" 
a98d f5				push af  
a98e 3a a2 a9			ld a, (.dmark)  
a991 32 65 ee			ld (debug_mark),a  
a994 3a a3 a9			ld a, (.dmark+1)  
a997 32 66 ee			ld (debug_mark+1),a  
a99a 3a a4 a9			ld a, (.dmark+2)  
a99d 32 67 ee			ld (debug_mark+2),a  
a9a0 18 03			jr .pastdmark  
a9a2 ..			.dmark: db "Ltp"  
a9a5 f1			.pastdmark: pop af  
a9a6			endm  
# End of macro DMARK
a9a6					CALLMONITOR 
a9a6 cd 6f ee			call debug_vector  
a9a9				endm  
# End of macro CALLMONITOR
a9a9				endif 
a9a9			 
a9a9 18 1f			jr .listpush 
a9ab			 
a9ab			;.lnuword:	pop hl 
a9ab			;		call forth_tok_next 
a9ab			;		jp .ldouscan  
a9ab			 
a9ab			.lunotfound:		  
a9ab			 
a9ab				if DEBUG_FORTH_WORDS 
a9ab					DMARK "LSn" 
a9ab f5				push af  
a9ac 3a c0 a9			ld a, (.dmark)  
a9af 32 65 ee			ld (debug_mark),a  
a9b2 3a c1 a9			ld a, (.dmark+1)  
a9b5 32 66 ee			ld (debug_mark+1),a  
a9b8 3a c2 a9			ld a, (.dmark+2)  
a9bb 32 67 ee			ld (debug_mark+2),a  
a9be 18 03			jr .pastdmark  
a9c0 ..			.dmark: db "LSn"  
a9c3 f1			.pastdmark: pop af  
a9c4			endm  
# End of macro DMARK
a9c4					CALLMONITOR 
a9c4 cd 6f ee			call debug_vector  
a9c7				endm  
# End of macro CALLMONITOR
a9c7				endif 
a9c7			 
a9c7					 
a9c7			;		FORTH_DSP_POP 
a9c7			;		ld hl, .luno 
a9c7			 
a9c7					NEXTW			 
a9c7 c3 76 9e			jp macro_next 
a9ca				endm 
# End of macro NEXTW
a9ca			 
a9ca			.listpush: 
a9ca				if DEBUG_FORTH_WORDS 
a9ca					DMARK "LS>" 
a9ca f5				push af  
a9cb 3a df a9			ld a, (.dmark)  
a9ce 32 65 ee			ld (debug_mark),a  
a9d1 3a e0 a9			ld a, (.dmark+1)  
a9d4 32 66 ee			ld (debug_mark+1),a  
a9d7 3a e1 a9			ld a, (.dmark+2)  
a9da 32 67 ee			ld (debug_mark+2),a  
a9dd 18 03			jr .pastdmark  
a9df ..			.dmark: db "LS>"  
a9e2 f1			.pastdmark: pop af  
a9e3			endm  
# End of macro DMARK
a9e3					CALLMONITOR 
a9e3 cd 6f ee			call debug_vector  
a9e6				endm  
# End of macro CALLMONITOR
a9e6				endif 
a9e6 cd f3 9a				call forth_push_str 
a9e9			 
a9e9			 
a9e9			 
a9e9					NEXTW 
a9e9 c3 76 9e			jp macro_next 
a9ec				endm 
# End of macro NEXTW
a9ec			 
a9ec			;.luno:    db "Word not found",0 
a9ec			 
a9ec			 
a9ec			 
a9ec			 
a9ec			 
a9ec			;		push hl   ; save pointer to start of uword def string 
a9ec			; 
a9ec			;; look for FORTH_EOL_LINE 
a9ec			;		ld a, FORTH_END_BUFFER 
a9ec			;		call strlent 
a9ec			; 
a9ec			;		inc hl		 ; space for coln def 
a9ec			;		inc hl 
a9ec			;		inc hl          ; space for terms 
a9ec			;		inc hl 
a9ec			; 
a9ec			;		ld a, 20   ; TODO get actual length 
a9ec			;		call addatohl    ; include a random amount of room for the uword name 
a9ec			; 
a9ec			;		 
a9ec			;	if DEBUG_FORTH_WORDS 
a9ec			;		DMARK "Lt1" 
a9ec			;		CALLMONITOR 
a9ec			;	endif 
a9ec			;		 
a9ec			; 
a9ec			;; malloc space for the string because we cant change it 
a9ec			; 
a9ec			;		call malloc 
a9ec			;	if DEBUG_FORTH_MALLOC_GUARD 
a9ec			;		push af 
a9ec			;		call ishlzero 
a9ec			;		pop af 
a9ec			;		 
a9ec			;		call z,malloc_error 
a9ec			;	endif 
a9ec			; 
a9ec			;	if DEBUG_FORTH_WORDS 
a9ec			;		DMARK "Lt2" 
a9ec			;		CALLMONITOR 
a9ec			;	endif 
a9ec			;		pop de 
a9ec			;		push hl    ; push the malloc to release later 
a9ec			;		push hl   ;  push back a copy for the later stack push 
a9ec			;		 
a9ec			;; copy the string swapping out the zero terms for spaces 
a9ec			; 
a9ec			;		; de has our source 
a9ec			;		; hl has our dest 
a9ec			; 
a9ec			;; add the coln def 
a9ec			; 
a9ec			;		ld a, ':' 
a9ec			;		ld (hl), a 
a9ec			;		inc hl 
a9ec			;		ld a, ' ' 
a9ec			;		ld (hl), a 
a9ec			;		inc hl 
a9ec			; 
a9ec			;; add the uname word 
a9ec			;		push de   ; save our string for now 
a9ec			;		ex de, hl 
a9ec			; 
a9ec			;		FORTH_DSP_VALUE 
a9ec			;		;v5 FORTH_DSP_VALUE 
a9ec			; 
a9ec			;		inc hl   ; skip type but we know by now this is OK 
a9ec			; 
a9ec			;.luword:	ld a,(hl) 
a9ec			;		cp 0 
a9ec			;		jr z, .luword2 
a9ec			;		ld (de), a 
a9ec			;		inc de 
a9ec			;		inc hl 
a9ec			;		jr .luword 
a9ec			; 
a9ec			;.luword2:	ld a, ' ' 
a9ec			;		ld (de), a 
a9ec			;;		inc hl 
a9ec			;;		inc de 
a9ec			;;		ld (de), a 
a9ec			;;		inc hl 
a9ec			;		inc de 
a9ec			; 
a9ec			;		ex de, hl 
a9ec			;		pop de 
a9ec			;		 
a9ec			;		 
a9ec			; 
a9ec			;; detoken that string and copy it 
a9ec			; 
a9ec			;	if DEBUG_FORTH_WORDS 
a9ec			;		DMARK "Lt2" 
a9ec			;		CALLMONITOR 
a9ec			;	endif 
a9ec			;.ldetok:	ld a, (de) 
a9ec			;		cp FORTH_END_BUFFER 
a9ec			;		jr z, .ldetokend 
a9ec			;		; swap out any zero term for space 
a9ec			;		cp 0 
a9ec			;		jr nz, .ldetoknext 
a9ec			;		ld a, ' ' 
a9ec			; 
a9ec			;	if DEBUG_FORTH_WORDS 
a9ec			;		DMARK "LtS" 
a9ec			;		CALLMONITOR 
a9ec			;	endif 
a9ec			;.ldetoknext:	ld (hl), a 
a9ec			;		inc de 
a9ec			;		inc hl 
a9ec			;		jr .ldetok 
a9ec			; 
a9ec			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
a9ec			;		ld (hl), a  
a9ec			; 
a9ec			;; free that temp malloc 
a9ec			; 
a9ec			;		pop hl    
a9ec			; 
a9ec			;	if DEBUG_FORTH_WORDS 
a9ec			;		DMARK "Lt4" 
a9ec			;		CALLMONITOR 
a9ec			;	endif 
a9ec			;		call forth_apushstrhl 
a9ec			; 
a9ec			;		; get rid of temp malloc area 
a9ec			; 
a9ec			;		pop hl 
a9ec			;		call free 
a9ec			; 
a9ec			;		jr .ludone 
a9ec			; 
a9ec			;.lnuword:	pop hl 
a9ec			;		call forth_tok_next 
a9ec			;		jp .ldouscan  
a9ec			; 
a9ec			;.ludone:		 pop hl 
a9ec			; 
a9ec					NEXTW 
a9ec c3 76 9e			jp macro_next 
a9ef				endm 
# End of macro NEXTW
a9ef			 
a9ef			.FORGET: 
a9ef				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
a9ef 5d				db WORD_SYS_CORE+73             
a9f0 68 aa			dw .NOP            
a9f2 07				db 6 + 1 
a9f3 .. 00			db "FORGET",0              
a9fa				endm 
# End of macro CWHEAD
a9fa			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
a9fa			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
a9fa			; | |  
a9fa			; | | e.g. "MORE" forget 
a9fa					if DEBUG_FORTH_WORDS_KEY 
a9fa						DMARK "FRG" 
a9fa f5				push af  
a9fb 3a 0f aa			ld a, (.dmark)  
a9fe 32 65 ee			ld (debug_mark),a  
aa01 3a 10 aa			ld a, (.dmark+1)  
aa04 32 66 ee			ld (debug_mark+1),a  
aa07 3a 11 aa			ld a, (.dmark+2)  
aa0a 32 67 ee			ld (debug_mark+2),a  
aa0d 18 03			jr .pastdmark  
aa0f ..			.dmark: db "FRG"  
aa12 f1			.pastdmark: pop af  
aa13			endm  
# End of macro DMARK
aa13						CALLMONITOR 
aa13 cd 6f ee			call debug_vector  
aa16				endm  
# End of macro CALLMONITOR
aa16					endif 
aa16			 
aa16				; find uword 
aa16			        ; update start of word with "_" 
aa16				; replace uword with deleted flag 
aa16			 
aa16			 
aa16			;	if DEBUG_FORTH_WORDS 
aa16			;		DMARK "FOG" 
aa16			;		CALLMONITOR 
aa16			;	endif 
aa16			 
aa16			 
aa16					; Get ptr to the word we need to look up 
aa16			 
aa16					FORTH_DSP_VALUEHL 
aa16 cd 8a 9c			call macro_dsp_valuehl 
aa19				endm 
# End of macro FORTH_DSP_VALUEHL
aa19					;v5 FORTH_DSP_VALUE 
aa19				; TODO type check 
aa19			;		inc hl    ; Skip type check  
aa19 e5					push hl 
aa1a c1					pop bc 
aa1b			;		ex de, hl    ; put into DE 
aa1b			 
aa1b			 
aa1b 21 af dd				ld hl, baseram 
aa1e					;ld hl, baseusermem 
aa1e			 
aa1e				; skip dict stub 
aa1e			;	call forth_tok_next 
aa1e e5			push hl   ; sacreifical push 
aa1f			 
aa1f			.fldouscanm: 
aa1f e1				pop hl 
aa20			.fldouscan: 
aa20			;	if DEBUG_FORTH_WORDS 
aa20			;		DMARK "LSs" 
aa20			;		CALLMONITOR 
aa20			;	endif 
aa20				; skip dict stub 
aa20 cd c7 9f				call forth_tok_next 
aa23			 
aa23			 
aa23			; while we have words to look for 
aa23			 
aa23 7e				ld a, (hl)      
aa24			;	if DEBUG_FORTH_WORDS 
aa24			;		DMARK "LSk" 
aa24			;		CALLMONITOR 
aa24			;	endif 
aa24 fe 00				cp WORD_SYS_END 
aa26 ca 62 aa				jp z, .flunotfound 
aa29 fe 01				cp WORD_SYS_UWORD 
aa2b c2 20 aa				jp nz, .fldouscan 
aa2e			 
aa2e			;	if DEBUG_FORTH_WORDS 
aa2e			;		DMARK "LSu" 
aa2e			;		CALLMONITOR 
aa2e			;	endif 
aa2e			 
aa2e					; found a uword but is it the one we want... 
aa2e			 
aa2e c5					push bc     ; uword to find is on bc 
aa2f d1					pop de 
aa30			 
aa30 e5					push hl  ; to save the ptr 
aa31			 
aa31					; skip opcode 
aa31 23					inc hl  
aa32					; skip next ptr 
aa32 23					inc hl  
aa33 23					inc hl 
aa34					; skip len 
aa34 23					inc hl 
aa35			 
aa35			;	if DEBUG_FORTH_WORDS 
aa35			;		DMARK "LSc" 
aa35			;		CALLMONITOR 
aa35			;	endif 
aa35 cd 88 90				call strcmp 
aa38 c2 1f aa				jp nz, .fldouscanm 
aa3b			; 
aa3b			; 
aa3b			;; while we have words to look for 
aa3b			; 
aa3b			;.fdouscan:	ld a, (hl)      
aa3b			;	if DEBUG_FORTH_WORDS 
aa3b			;		DMARK "LSs" 
aa3b			;		CALLMONITOR 
aa3b			;	endif 
aa3b			;		cp WORD_SYS_END 
aa3b			;		jp z, .fudone 
aa3b			;		cp WORD_SYS_UWORD 
aa3b			;		jp nz, .fnuword 
aa3b			; 
aa3b			;	if DEBUG_FORTH_WORDS 
aa3b			;		DMARK "FGu" 
aa3b			;		CALLMONITOR 
aa3b			;	endif 
aa3b			; 
aa3b			;		; found a uword but is it the one we want... 
aa3b			; 
aa3b			; 
aa3b			;	        pop de   ; get back the dsp name 
aa3b			;		push de 
aa3b			; 
aa3b			;		push hl  ; to save the ptr 
aa3b			; 
aa3b			;		; skip opcode 
aa3b			;		inc hl  
aa3b			;		; skip next ptr 
aa3b			;		inc hl  
aa3b			;		inc hl 
aa3b			;		; skip len 
aa3b			;		inc hl 
aa3b			; 
aa3b			;	if DEBUG_FORTH_WORDS 
aa3b			;		DMARK "FGc" 
aa3b			;		CALLMONITOR 
aa3b			;	endif 
aa3b			;		call strcmp 
aa3b			;		jp nz, .fnuword 
aa3b			 
aa3b			 
aa3b e1			pop hl 
aa3c			 
aa3c				 
aa3c				if DEBUG_FORTH_WORDS 
aa3c					DMARK "FGm" 
aa3c f5				push af  
aa3d 3a 51 aa			ld a, (.dmark)  
aa40 32 65 ee			ld (debug_mark),a  
aa43 3a 52 aa			ld a, (.dmark+1)  
aa46 32 66 ee			ld (debug_mark+1),a  
aa49 3a 53 aa			ld a, (.dmark+2)  
aa4c 32 67 ee			ld (debug_mark+2),a  
aa4f 18 03			jr .pastdmark  
aa51 ..			.dmark: db "FGm"  
aa54 f1			.pastdmark: pop af  
aa55			endm  
# End of macro DMARK
aa55					CALLMONITOR 
aa55 cd 6f ee			call debug_vector  
aa58				endm  
# End of macro CALLMONITOR
aa58				endif 
aa58			 
aa58			 
aa58			 
aa58					; we have a uword so push its name to the stack 
aa58			 
aa58			;	   	push hl  ; save so we can move to next dict block 
aa58			;pop hl 
aa58			 
aa58					; update opcode to deleted 
aa58 3e 03				ld a, WORD_SYS_DELETED 
aa5a 77					ld (hl), a 
aa5b			 
aa5b 23					inc hl  
aa5c					; skip next ptr 
aa5c 23					inc hl  
aa5d 23					inc hl 
aa5e					; skip len 
aa5e 23					inc hl 
aa5f			 
aa5f					; TODO change parser to skip deleted words but for now mark it out 
aa5f 3e 5f				ld a, "_" 
aa61 77					ld  (hl),a 
aa62			 
aa62			;		jr .fudone 
aa62			; 
aa62			;.fnuword:	pop hl 
aa62			;		call forth_tok_next 
aa62			;		jp .fdouscan  
aa62			 
aa62			.flunotfound:		  
aa62			 
aa62			 
aa62					 
aa62					FORTH_DSP_POP 
aa62 cd 42 9d			call macro_forth_dsp_pop 
aa65				endm 
# End of macro FORTH_DSP_POP
aa65			;		ld hl, .luno 
aa65			;.fudone:		 pop hl 
aa65					NEXTW 
aa65 c3 76 9e			jp macro_next 
aa68				endm 
# End of macro NEXTW
aa68			.NOP: 
aa68				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
aa68 61				db WORD_SYS_CORE+77             
aa69 8f aa			dw .COMO            
aa6b 04				db 3 + 1 
aa6c .. 00			db "NOP",0              
aa70				endm 
# End of macro CWHEAD
aa70			; | NOP (  --  ) Do nothing | DONE 
aa70					if DEBUG_FORTH_WORDS_KEY 
aa70						DMARK "NOP" 
aa70 f5				push af  
aa71 3a 85 aa			ld a, (.dmark)  
aa74 32 65 ee			ld (debug_mark),a  
aa77 3a 86 aa			ld a, (.dmark+1)  
aa7a 32 66 ee			ld (debug_mark+1),a  
aa7d 3a 87 aa			ld a, (.dmark+2)  
aa80 32 67 ee			ld (debug_mark+2),a  
aa83 18 03			jr .pastdmark  
aa85 ..			.dmark: db "NOP"  
aa88 f1			.pastdmark: pop af  
aa89			endm  
# End of macro DMARK
aa89						CALLMONITOR 
aa89 cd 6f ee			call debug_vector  
aa8c				endm  
# End of macro CALLMONITOR
aa8c					endif 
aa8c				       NEXTW 
aa8c c3 76 9e			jp macro_next 
aa8f				endm 
# End of macro NEXTW
aa8f			.COMO: 
aa8f				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
aa8f 6e				db WORD_SYS_CORE+90             
aa90 e1 aa			dw .COMC            
aa92 02				db 1 + 1 
aa93 .. 00			db "(",0              
aa95				endm 
# End of macro CWHEAD
aa95			; | ( ( -- )  Start of comment | DONE 
aa95			 
aa95			 
aa95 2a bc e5				ld hl, ( os_tok_ptr) 
aa98 11 dc aa			ld de, .closepar 
aa9b					 
aa9b					if DEBUG_FORTH_WORDS 
aa9b						DMARK ").." 
aa9b f5				push af  
aa9c 3a b0 aa			ld a, (.dmark)  
aa9f 32 65 ee			ld (debug_mark),a  
aaa2 3a b1 aa			ld a, (.dmark+1)  
aaa5 32 66 ee			ld (debug_mark+1),a  
aaa8 3a b2 aa			ld a, (.dmark+2)  
aaab 32 67 ee			ld (debug_mark+2),a  
aaae 18 03			jr .pastdmark  
aab0 ..			.dmark: db ").."  
aab3 f1			.pastdmark: pop af  
aab4			endm  
# End of macro DMARK
aab4						CALLMONITOR 
aab4 cd 6f ee			call debug_vector  
aab7				endm  
# End of macro CALLMONITOR
aab7					endif 
aab7 cd 91 9f			call findnexttok  
aaba			 
aaba					if DEBUG_FORTH_WORDS 
aaba						DMARK "IF5" 
aaba f5				push af  
aabb 3a cf aa			ld a, (.dmark)  
aabe 32 65 ee			ld (debug_mark),a  
aac1 3a d0 aa			ld a, (.dmark+1)  
aac4 32 66 ee			ld (debug_mark+1),a  
aac7 3a d1 aa			ld a, (.dmark+2)  
aaca 32 67 ee			ld (debug_mark+2),a  
aacd 18 03			jr .pastdmark  
aacf ..			.dmark: db "IF5"  
aad2 f1			.pastdmark: pop af  
aad3			endm  
# End of macro DMARK
aad3						CALLMONITOR 
aad3 cd 6f ee			call debug_vector  
aad6				endm  
# End of macro CALLMONITOR
aad6					endif 
aad6				; replace below with ) exec using tok_ptr 
aad6 22 bc e5			ld (os_tok_ptr), hl 
aad9 c3 07 9f			jp exec1 
aadc			 
aadc .. 00			.closepar:   db ")",0 
aade			 
aade				       NEXTW 
aade c3 76 9e			jp macro_next 
aae1				endm 
# End of macro NEXTW
aae1			.COMC: 
aae1				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
aae1 6f				db WORD_SYS_CORE+91             
aae2 ea aa			dw .SCRATCH            
aae4 02				db 1 + 1 
aae5 .. 00			db ")",0              
aae7				endm 
# End of macro CWHEAD
aae7			; | ) ( -- )  End of comment |  DONE  
aae7				       NEXTW 
aae7 c3 76 9e			jp macro_next 
aaea				endm 
# End of macro NEXTW
aaea			 
aaea			.SCRATCH: 
aaea				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
aaea 6f				db WORD_SYS_CORE+91             
aaeb 25 ab			dw .INC            
aaed 08				db 7 + 1 
aaee .. 00			db "SCRATCH",0              
aaf6				endm 
# End of macro CWHEAD
aaf6			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
aaf6			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
aaf6			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
aaf6			; | |  
aaf6			; | | e.g.    : score $00 scratch ; 
aaf6			; | |  
aaf6			; | | $00 score ! 
aaf6			; | | $01 score +! 
aaf6			; | |  
aaf6			; | | e.g.   : varword $0a scratch ;  
aaf6			; | | 
aaf6			; | | $8000 varword ! 
aaf6					if DEBUG_FORTH_WORDS_KEY 
aaf6						DMARK "SCR" 
aaf6 f5				push af  
aaf7 3a 0b ab			ld a, (.dmark)  
aafa 32 65 ee			ld (debug_mark),a  
aafd 3a 0c ab			ld a, (.dmark+1)  
ab00 32 66 ee			ld (debug_mark+1),a  
ab03 3a 0d ab			ld a, (.dmark+2)  
ab06 32 67 ee			ld (debug_mark+2),a  
ab09 18 03			jr .pastdmark  
ab0b ..			.dmark: db "SCR"  
ab0e f1			.pastdmark: pop af  
ab0f			endm  
# End of macro DMARK
ab0f						CALLMONITOR 
ab0f cd 6f ee			call debug_vector  
ab12				endm  
# End of macro CALLMONITOR
ab12					endif 
ab12			 
ab12					FORTH_DSP_VALUEHL 
ab12 cd 8a 9c			call macro_dsp_valuehl 
ab15				endm 
# End of macro FORTH_DSP_VALUEHL
ab15				 
ab15					FORTH_DSP_POP 
ab15 cd 42 9d			call macro_forth_dsp_pop 
ab18				endm 
# End of macro FORTH_DSP_POP
ab18			 
ab18 7d					ld a, l 
ab19 21 e0 e7				ld hl, os_var_array 
ab1c cd ea 8c				call addatohl 
ab1f			 
ab1f cd 85 9a				call forth_push_numhl 
ab22			 
ab22				       NEXTW 
ab22 c3 76 9e			jp macro_next 
ab25				endm 
# End of macro NEXTW
ab25			 
ab25			.INC: 
ab25				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
ab25 6f				db WORD_SYS_CORE+91             
ab26 7b ab			dw .DEC            
ab28 03				db 2 + 1 
ab29 .. 00			db "+!",0              
ab2c				endm 
# End of macro CWHEAD
ab2c			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
ab2c					if DEBUG_FORTH_WORDS_KEY 
ab2c						DMARK "+s_" 
ab2c f5				push af  
ab2d 3a 41 ab			ld a, (.dmark)  
ab30 32 65 ee			ld (debug_mark),a  
ab33 3a 42 ab			ld a, (.dmark+1)  
ab36 32 66 ee			ld (debug_mark+1),a  
ab39 3a 43 ab			ld a, (.dmark+2)  
ab3c 32 67 ee			ld (debug_mark+2),a  
ab3f 18 03			jr .pastdmark  
ab41 ..			.dmark: db "+s_"  
ab44 f1			.pastdmark: pop af  
ab45			endm  
# End of macro DMARK
ab45						CALLMONITOR 
ab45 cd 6f ee			call debug_vector  
ab48				endm  
# End of macro CALLMONITOR
ab48					endif 
ab48			 
ab48					FORTH_DSP_VALUEHL 
ab48 cd 8a 9c			call macro_dsp_valuehl 
ab4b				endm 
# End of macro FORTH_DSP_VALUEHL
ab4b			 
ab4b e5					push hl   ; save address 
ab4c			 
ab4c					FORTH_DSP_POP 
ab4c cd 42 9d			call macro_forth_dsp_pop 
ab4f				endm 
# End of macro FORTH_DSP_POP
ab4f			 
ab4f					FORTH_DSP_VALUEHL 
ab4f cd 8a 9c			call macro_dsp_valuehl 
ab52				endm 
# End of macro FORTH_DSP_VALUEHL
ab52			 
ab52 e5					push hl 
ab53					FORTH_DSP_POP 
ab53 cd 42 9d			call macro_forth_dsp_pop 
ab56				endm 
# End of macro FORTH_DSP_POP
ab56 e1					pop hl 
ab57			 
ab57					; hl contains value to add to byte at a 
ab57				 
ab57 eb					ex de, hl 
ab58			 
ab58 e1					pop hl 
ab59			 
ab59					if DEBUG_FORTH_WORDS 
ab59						DMARK "INC" 
ab59 f5				push af  
ab5a 3a 6e ab			ld a, (.dmark)  
ab5d 32 65 ee			ld (debug_mark),a  
ab60 3a 6f ab			ld a, (.dmark+1)  
ab63 32 66 ee			ld (debug_mark+1),a  
ab66 3a 70 ab			ld a, (.dmark+2)  
ab69 32 67 ee			ld (debug_mark+2),a  
ab6c 18 03			jr .pastdmark  
ab6e ..			.dmark: db "INC"  
ab71 f1			.pastdmark: pop af  
ab72			endm  
# End of macro DMARK
ab72						CALLMONITOR 
ab72 cd 6f ee			call debug_vector  
ab75				endm  
# End of macro CALLMONITOR
ab75					endif 
ab75			 
ab75 7e					ld a,(hl) 
ab76 83					add e 
ab77 77					ld (hl),a 
ab78			 
ab78			 
ab78			 
ab78				       NEXTW 
ab78 c3 76 9e			jp macro_next 
ab7b				endm 
# End of macro NEXTW
ab7b			 
ab7b			.DEC: 
ab7b				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
ab7b 6f				db WORD_SYS_CORE+91             
ab7c cf ab			dw .INC2            
ab7e 03				db 2 + 1 
ab7f .. 00			db "-!",0              
ab82				endm 
# End of macro CWHEAD
ab82			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
ab82					if DEBUG_FORTH_WORDS_KEY 
ab82						DMARK "-s_" 
ab82 f5				push af  
ab83 3a 97 ab			ld a, (.dmark)  
ab86 32 65 ee			ld (debug_mark),a  
ab89 3a 98 ab			ld a, (.dmark+1)  
ab8c 32 66 ee			ld (debug_mark+1),a  
ab8f 3a 99 ab			ld a, (.dmark+2)  
ab92 32 67 ee			ld (debug_mark+2),a  
ab95 18 03			jr .pastdmark  
ab97 ..			.dmark: db "-s_"  
ab9a f1			.pastdmark: pop af  
ab9b			endm  
# End of macro DMARK
ab9b						CALLMONITOR 
ab9b cd 6f ee			call debug_vector  
ab9e				endm  
# End of macro CALLMONITOR
ab9e					endif 
ab9e			 
ab9e					FORTH_DSP_VALUEHL 
ab9e cd 8a 9c			call macro_dsp_valuehl 
aba1				endm 
# End of macro FORTH_DSP_VALUEHL
aba1			 
aba1 e5					push hl   ; save address 
aba2			 
aba2					FORTH_DSP_POP 
aba2 cd 42 9d			call macro_forth_dsp_pop 
aba5				endm 
# End of macro FORTH_DSP_POP
aba5			 
aba5					FORTH_DSP_VALUEHL 
aba5 cd 8a 9c			call macro_dsp_valuehl 
aba8				endm 
# End of macro FORTH_DSP_VALUEHL
aba8			 
aba8					; hl contains value to add to byte at a 
aba8				 
aba8 eb					ex de, hl 
aba9			 
aba9 e1					pop hl 
abaa			 
abaa					if DEBUG_FORTH_WORDS 
abaa						DMARK "DEC" 
abaa f5				push af  
abab 3a bf ab			ld a, (.dmark)  
abae 32 65 ee			ld (debug_mark),a  
abb1 3a c0 ab			ld a, (.dmark+1)  
abb4 32 66 ee			ld (debug_mark+1),a  
abb7 3a c1 ab			ld a, (.dmark+2)  
abba 32 67 ee			ld (debug_mark+2),a  
abbd 18 03			jr .pastdmark  
abbf ..			.dmark: db "DEC"  
abc2 f1			.pastdmark: pop af  
abc3			endm  
# End of macro DMARK
abc3						CALLMONITOR 
abc3 cd 6f ee			call debug_vector  
abc6				endm  
# End of macro CALLMONITOR
abc6					endif 
abc6			 
abc6 7e					ld a,(hl) 
abc7 93					sub e 
abc8 77					ld (hl),a 
abc9			 
abc9			 
abc9					FORTH_DSP_POP 
abc9 cd 42 9d			call macro_forth_dsp_pop 
abcc				endm 
# End of macro FORTH_DSP_POP
abcc			 
abcc				       NEXTW 
abcc c3 76 9e			jp macro_next 
abcf				endm 
# End of macro NEXTW
abcf			 
abcf			.INC2: 
abcf				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
abcf 6f				db WORD_SYS_CORE+91             
abd0 7c ac			dw .DEC2            
abd2 04				db 3 + 1 
abd3 .. 00			db "+2!",0              
abd7				endm 
# End of macro CWHEAD
abd7			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
abd7			 
abd7					if DEBUG_FORTH_WORDS_KEY 
abd7						DMARK "+2s" 
abd7 f5				push af  
abd8 3a ec ab			ld a, (.dmark)  
abdb 32 65 ee			ld (debug_mark),a  
abde 3a ed ab			ld a, (.dmark+1)  
abe1 32 66 ee			ld (debug_mark+1),a  
abe4 3a ee ab			ld a, (.dmark+2)  
abe7 32 67 ee			ld (debug_mark+2),a  
abea 18 03			jr .pastdmark  
abec ..			.dmark: db "+2s"  
abef f1			.pastdmark: pop af  
abf0			endm  
# End of macro DMARK
abf0						CALLMONITOR 
abf0 cd 6f ee			call debug_vector  
abf3				endm  
# End of macro CALLMONITOR
abf3					endif 
abf3			 
abf3					; Address 
abf3			 
abf3					FORTH_DSP_VALUEHL 
abf3 cd 8a 9c			call macro_dsp_valuehl 
abf6				endm 
# End of macro FORTH_DSP_VALUEHL
abf6			 
abf6 e5					push hl    ; save address 
abf7			 
abf7					; load content into de 
abf7			 
abf7 5e					ld e,(hl) 
abf8 23					inc hl 
abf9 56					ld d, (hl) 
abfa			 
abfa					if DEBUG_FORTH_WORDS 
abfa						DMARK "+2a" 
abfa f5				push af  
abfb 3a 0f ac			ld a, (.dmark)  
abfe 32 65 ee			ld (debug_mark),a  
ac01 3a 10 ac			ld a, (.dmark+1)  
ac04 32 66 ee			ld (debug_mark+1),a  
ac07 3a 11 ac			ld a, (.dmark+2)  
ac0a 32 67 ee			ld (debug_mark+2),a  
ac0d 18 03			jr .pastdmark  
ac0f ..			.dmark: db "+2a"  
ac12 f1			.pastdmark: pop af  
ac13			endm  
# End of macro DMARK
ac13						CALLMONITOR 
ac13 cd 6f ee			call debug_vector  
ac16				endm  
# End of macro CALLMONITOR
ac16					endif 
ac16			 
ac16					FORTH_DSP_POP 
ac16 cd 42 9d			call macro_forth_dsp_pop 
ac19				endm 
# End of macro FORTH_DSP_POP
ac19			 
ac19					; Get value to add 
ac19			 
ac19					FORTH_DSP_VALUE 
ac19 cd 73 9c			call macro_forth_dsp_value 
ac1c				endm 
# End of macro FORTH_DSP_VALUE
ac1c			 
ac1c					if DEBUG_FORTH_WORDS 
ac1c						DMARK "+2v" 
ac1c f5				push af  
ac1d 3a 31 ac			ld a, (.dmark)  
ac20 32 65 ee			ld (debug_mark),a  
ac23 3a 32 ac			ld a, (.dmark+1)  
ac26 32 66 ee			ld (debug_mark+1),a  
ac29 3a 33 ac			ld a, (.dmark+2)  
ac2c 32 67 ee			ld (debug_mark+2),a  
ac2f 18 03			jr .pastdmark  
ac31 ..			.dmark: db "+2v"  
ac34 f1			.pastdmark: pop af  
ac35			endm  
# End of macro DMARK
ac35						CALLMONITOR 
ac35 cd 6f ee			call debug_vector  
ac38				endm  
# End of macro CALLMONITOR
ac38					endif 
ac38			 
ac38 19					add hl, de 
ac39			 
ac39					if DEBUG_FORTH_WORDS 
ac39						DMARK "+2+" 
ac39 f5				push af  
ac3a 3a 4e ac			ld a, (.dmark)  
ac3d 32 65 ee			ld (debug_mark),a  
ac40 3a 4f ac			ld a, (.dmark+1)  
ac43 32 66 ee			ld (debug_mark+1),a  
ac46 3a 50 ac			ld a, (.dmark+2)  
ac49 32 67 ee			ld (debug_mark+2),a  
ac4c 18 03			jr .pastdmark  
ac4e ..			.dmark: db "+2+"  
ac51 f1			.pastdmark: pop af  
ac52			endm  
# End of macro DMARK
ac52						CALLMONITOR 
ac52 cd 6f ee			call debug_vector  
ac55				endm  
# End of macro CALLMONITOR
ac55					endif 
ac55			 
ac55					; move result to de 
ac55			 
ac55 eb					ex de, hl 
ac56			 
ac56					; Address 
ac56			 
ac56 e1					pop hl 
ac57			 
ac57					; save it back 
ac57			 
ac57 73					ld (hl), e 
ac58 23					inc hl 
ac59 72					ld (hl), d 
ac5a			 
ac5a					if DEBUG_FORTH_WORDS 
ac5a						DMARK "+2e" 
ac5a f5				push af  
ac5b 3a 6f ac			ld a, (.dmark)  
ac5e 32 65 ee			ld (debug_mark),a  
ac61 3a 70 ac			ld a, (.dmark+1)  
ac64 32 66 ee			ld (debug_mark+1),a  
ac67 3a 71 ac			ld a, (.dmark+2)  
ac6a 32 67 ee			ld (debug_mark+2),a  
ac6d 18 03			jr .pastdmark  
ac6f ..			.dmark: db "+2e"  
ac72 f1			.pastdmark: pop af  
ac73			endm  
# End of macro DMARK
ac73						CALLMONITOR 
ac73 cd 6f ee			call debug_vector  
ac76				endm  
# End of macro CALLMONITOR
ac76					endif 
ac76			 
ac76			 
ac76			 
ac76					FORTH_DSP_POP 
ac76 cd 42 9d			call macro_forth_dsp_pop 
ac79				endm 
# End of macro FORTH_DSP_POP
ac79			 
ac79			 
ac79				       NEXTW 
ac79 c3 76 9e			jp macro_next 
ac7c				endm 
# End of macro NEXTW
ac7c			 
ac7c			.DEC2: 
ac7c				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
ac7c 6f				db WORD_SYS_CORE+91             
ac7d 2b ad			dw .GET2            
ac7f 04				db 3 + 1 
ac80 .. 00			db "-2!",0              
ac84				endm 
# End of macro CWHEAD
ac84			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
ac84			 
ac84			 
ac84					if DEBUG_FORTH_WORDS_KEY 
ac84						DMARK "-2s" 
ac84 f5				push af  
ac85 3a 99 ac			ld a, (.dmark)  
ac88 32 65 ee			ld (debug_mark),a  
ac8b 3a 9a ac			ld a, (.dmark+1)  
ac8e 32 66 ee			ld (debug_mark+1),a  
ac91 3a 9b ac			ld a, (.dmark+2)  
ac94 32 67 ee			ld (debug_mark+2),a  
ac97 18 03			jr .pastdmark  
ac99 ..			.dmark: db "-2s"  
ac9c f1			.pastdmark: pop af  
ac9d			endm  
# End of macro DMARK
ac9d						CALLMONITOR 
ac9d cd 6f ee			call debug_vector  
aca0				endm  
# End of macro CALLMONITOR
aca0					endif 
aca0			 
aca0					; Address 
aca0			 
aca0					FORTH_DSP_VALUEHL 
aca0 cd 8a 9c			call macro_dsp_valuehl 
aca3				endm 
# End of macro FORTH_DSP_VALUEHL
aca3			 
aca3 e5					push hl    ; save address 
aca4			 
aca4					; load content into de 
aca4			 
aca4 5e					ld e,(hl) 
aca5 23					inc hl 
aca6 56					ld d, (hl) 
aca7			 
aca7					if DEBUG_FORTH_WORDS 
aca7						DMARK "-2a" 
aca7 f5				push af  
aca8 3a bc ac			ld a, (.dmark)  
acab 32 65 ee			ld (debug_mark),a  
acae 3a bd ac			ld a, (.dmark+1)  
acb1 32 66 ee			ld (debug_mark+1),a  
acb4 3a be ac			ld a, (.dmark+2)  
acb7 32 67 ee			ld (debug_mark+2),a  
acba 18 03			jr .pastdmark  
acbc ..			.dmark: db "-2a"  
acbf f1			.pastdmark: pop af  
acc0			endm  
# End of macro DMARK
acc0						CALLMONITOR 
acc0 cd 6f ee			call debug_vector  
acc3				endm  
# End of macro CALLMONITOR
acc3					endif 
acc3			 
acc3					FORTH_DSP_POP 
acc3 cd 42 9d			call macro_forth_dsp_pop 
acc6				endm 
# End of macro FORTH_DSP_POP
acc6			 
acc6					; Get value to remove 
acc6			 
acc6					FORTH_DSP_VALUE 
acc6 cd 73 9c			call macro_forth_dsp_value 
acc9				endm 
# End of macro FORTH_DSP_VALUE
acc9			 
acc9					if DEBUG_FORTH_WORDS 
acc9						DMARK "-2v" 
acc9 f5				push af  
acca 3a de ac			ld a, (.dmark)  
accd 32 65 ee			ld (debug_mark),a  
acd0 3a df ac			ld a, (.dmark+1)  
acd3 32 66 ee			ld (debug_mark+1),a  
acd6 3a e0 ac			ld a, (.dmark+2)  
acd9 32 67 ee			ld (debug_mark+2),a  
acdc 18 03			jr .pastdmark  
acde ..			.dmark: db "-2v"  
ace1 f1			.pastdmark: pop af  
ace2			endm  
# End of macro DMARK
ace2						CALLMONITOR 
ace2 cd 6f ee			call debug_vector  
ace5				endm  
# End of macro CALLMONITOR
ace5					endif 
ace5			 
ace5 eb					ex de, hl 
ace6 ed 52				sbc hl, de 
ace8			 
ace8					if DEBUG_FORTH_WORDS 
ace8						DMARK "-2d" 
ace8 f5				push af  
ace9 3a fd ac			ld a, (.dmark)  
acec 32 65 ee			ld (debug_mark),a  
acef 3a fe ac			ld a, (.dmark+1)  
acf2 32 66 ee			ld (debug_mark+1),a  
acf5 3a ff ac			ld a, (.dmark+2)  
acf8 32 67 ee			ld (debug_mark+2),a  
acfb 18 03			jr .pastdmark  
acfd ..			.dmark: db "-2d"  
ad00 f1			.pastdmark: pop af  
ad01			endm  
# End of macro DMARK
ad01						CALLMONITOR 
ad01 cd 6f ee			call debug_vector  
ad04				endm  
# End of macro CALLMONITOR
ad04					endif 
ad04			 
ad04					; move result to de 
ad04			 
ad04 eb					ex de, hl 
ad05			 
ad05					; Address 
ad05			 
ad05 e1					pop hl 
ad06			 
ad06					; save it back 
ad06			 
ad06 73					ld (hl), e 
ad07 23					inc hl 
ad08 72					ld (hl), d 
ad09			 
ad09					if DEBUG_FORTH_WORDS 
ad09						DMARK "-2e" 
ad09 f5				push af  
ad0a 3a 1e ad			ld a, (.dmark)  
ad0d 32 65 ee			ld (debug_mark),a  
ad10 3a 1f ad			ld a, (.dmark+1)  
ad13 32 66 ee			ld (debug_mark+1),a  
ad16 3a 20 ad			ld a, (.dmark+2)  
ad19 32 67 ee			ld (debug_mark+2),a  
ad1c 18 03			jr .pastdmark  
ad1e ..			.dmark: db "-2e"  
ad21 f1			.pastdmark: pop af  
ad22			endm  
# End of macro DMARK
ad22						CALLMONITOR 
ad22 cd 6f ee			call debug_vector  
ad25				endm  
# End of macro CALLMONITOR
ad25					endif 
ad25			 
ad25			 
ad25					FORTH_DSP_POP 
ad25 cd 42 9d			call macro_forth_dsp_pop 
ad28				endm 
# End of macro FORTH_DSP_POP
ad28			 
ad28			 
ad28			 
ad28				       NEXTW 
ad28 c3 76 9e			jp macro_next 
ad2b				endm 
# End of macro NEXTW
ad2b			.GET2: 
ad2b				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
ad2b 6f				db WORD_SYS_CORE+91             
ad2c 60 ad			dw .BANG2            
ad2e 03				db 2 + 1 
ad2f .. 00			db "2@",0              
ad32				endm 
# End of macro CWHEAD
ad32			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ad32					if DEBUG_FORTH_WORDS_KEY 
ad32						DMARK "2A_" 
ad32 f5				push af  
ad33 3a 47 ad			ld a, (.dmark)  
ad36 32 65 ee			ld (debug_mark),a  
ad39 3a 48 ad			ld a, (.dmark+1)  
ad3c 32 66 ee			ld (debug_mark+1),a  
ad3f 3a 49 ad			ld a, (.dmark+2)  
ad42 32 67 ee			ld (debug_mark+2),a  
ad45 18 03			jr .pastdmark  
ad47 ..			.dmark: db "2A_"  
ad4a f1			.pastdmark: pop af  
ad4b			endm  
# End of macro DMARK
ad4b						CALLMONITOR 
ad4b cd 6f ee			call debug_vector  
ad4e				endm  
# End of macro CALLMONITOR
ad4e					endif 
ad4e			 
ad4e					FORTH_DSP_VALUEHL 
ad4e cd 8a 9c			call macro_dsp_valuehl 
ad51				endm 
# End of macro FORTH_DSP_VALUEHL
ad51			 
ad51 e5					push hl   ; save address 
ad52			 
ad52					FORTH_DSP_POP 
ad52 cd 42 9d			call macro_forth_dsp_pop 
ad55				endm 
# End of macro FORTH_DSP_POP
ad55			 
ad55 e1					pop hl 
ad56			 
ad56 5e					ld e, (hl) 
ad57 23					inc hl 
ad58 56					ld d, (hl) 
ad59			 
ad59 eb					ex de, hl 
ad5a			 
ad5a cd 85 9a				call forth_push_numhl 
ad5d			 
ad5d				       NEXTW 
ad5d c3 76 9e			jp macro_next 
ad60				endm 
# End of macro NEXTW
ad60			.BANG2: 
ad60				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
ad60 6f				db WORD_SYS_CORE+91             
ad61 98 ad			dw .CONFIG            
ad63 03				db 2 + 1 
ad64 .. 00			db "2!",0              
ad67				endm 
# End of macro CWHEAD
ad67			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
ad67					if DEBUG_FORTH_WORDS_KEY 
ad67						DMARK "2S_" 
ad67 f5				push af  
ad68 3a 7c ad			ld a, (.dmark)  
ad6b 32 65 ee			ld (debug_mark),a  
ad6e 3a 7d ad			ld a, (.dmark+1)  
ad71 32 66 ee			ld (debug_mark+1),a  
ad74 3a 7e ad			ld a, (.dmark+2)  
ad77 32 67 ee			ld (debug_mark+2),a  
ad7a 18 03			jr .pastdmark  
ad7c ..			.dmark: db "2S_"  
ad7f f1			.pastdmark: pop af  
ad80			endm  
# End of macro DMARK
ad80						CALLMONITOR 
ad80 cd 6f ee			call debug_vector  
ad83				endm  
# End of macro CALLMONITOR
ad83					endif 
ad83			 
ad83					FORTH_DSP_VALUEHL 
ad83 cd 8a 9c			call macro_dsp_valuehl 
ad86				endm 
# End of macro FORTH_DSP_VALUEHL
ad86			 
ad86 e5					push hl   ; save address 
ad87			 
ad87			 
ad87					FORTH_DSP_POP 
ad87 cd 42 9d			call macro_forth_dsp_pop 
ad8a				endm 
# End of macro FORTH_DSP_POP
ad8a			 
ad8a					 
ad8a					FORTH_DSP_VALUEHL 
ad8a cd 8a 9c			call macro_dsp_valuehl 
ad8d				endm 
# End of macro FORTH_DSP_VALUEHL
ad8d			 
ad8d					FORTH_DSP_POP 
ad8d cd 42 9d			call macro_forth_dsp_pop 
ad90				endm 
# End of macro FORTH_DSP_POP
ad90			 
ad90 eb					ex de, hl    ; value now in de 
ad91			 
ad91 e1					pop hl 
ad92			 
ad92 73					ld (hl), e 
ad93			 
ad93 23					inc hl 
ad94			 
ad94 72					ld (hl), d 
ad95			 
ad95			 
ad95				       NEXTW 
ad95 c3 76 9e			jp macro_next 
ad98				endm 
# End of macro NEXTW
ad98			.CONFIG: 
ad98				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
ad98 6f				db WORD_SYS_CORE+91             
ad99 a9 ad			dw .ADTOS            
ad9b 07				db 6 + 1 
ad9c .. 00			db "CONFIG",0              
ada3				endm 
# End of macro CWHEAD
ada3			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
ada3			 
ada3 cd 5e 92				call config 
ada6					NEXTW 
ada6 c3 76 9e			jp macro_next 
ada9				endm 
# End of macro NEXTW
ada9			 
ada9			.ADTOS: 
ada9				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
ada9 6f				db WORD_SYS_CORE+91             
adaa bf ad			dw .SBTOS            
adac 03				db 2 + 1 
adad .. 00			db "1+",0              
adb0				endm 
# End of macro CWHEAD
adb0			; | 1+ ( u -- u )  Increment value on TOS | DONE 
adb0			 
adb0					FORTH_DSP_VALUEHL 
adb0 cd 8a 9c			call macro_dsp_valuehl 
adb3				endm 
# End of macro FORTH_DSP_VALUEHL
adb3 e5					push hl 
adb4			 
adb4					FORTH_DSP_POP 
adb4 cd 42 9d			call macro_forth_dsp_pop 
adb7				endm 
# End of macro FORTH_DSP_POP
adb7 e1					pop hl 
adb8			 
adb8 23					inc hl 
adb9 cd 85 9a				call forth_push_numhl 
adbc					 
adbc					NEXTW 
adbc c3 76 9e			jp macro_next 
adbf				endm 
# End of macro NEXTW
adbf			.SBTOS: 
adbf				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
adbf 6f				db WORD_SYS_CORE+91             
adc0 d5 ad			dw .ADSTORE            
adc2 03				db 2 + 1 
adc3 .. 00			db "1-",0              
adc6				endm 
# End of macro CWHEAD
adc6			; | 1- ( u -- u )  Decrement value on TOS | DONE 
adc6			 
adc6					FORTH_DSP_VALUEHL 
adc6 cd 8a 9c			call macro_dsp_valuehl 
adc9				endm 
# End of macro FORTH_DSP_VALUEHL
adc9 e5					push hl 
adca			 
adca					FORTH_DSP_POP 
adca cd 42 9d			call macro_forth_dsp_pop 
adcd				endm 
# End of macro FORTH_DSP_POP
adcd e1					pop hl 
adce			 
adce 2b					dec hl 
adcf cd 85 9a				call forth_push_numhl 
add2					 
add2					NEXTW 
add2 c3 76 9e			jp macro_next 
add5				endm 
# End of macro NEXTW
add5			.ADSTORE: 
add5				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
add5 6f				db WORD_SYS_CORE+91             
add6 eb ad			dw .ADWSTORE            
add8 04				db 3 + 1 
add9 .. 00			db "1+!",0              
addd				endm 
# End of macro CWHEAD
addd			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
addd			 
addd					FORTH_DSP_VALUEHL 
addd cd 8a 9c			call macro_dsp_valuehl 
ade0				endm 
# End of macro FORTH_DSP_VALUEHL
ade0 e5					push hl 
ade1			 
ade1					FORTH_DSP_POP 
ade1 cd 42 9d			call macro_forth_dsp_pop 
ade4				endm 
# End of macro FORTH_DSP_POP
ade4 e1					pop hl 
ade5			 
ade5 7e					ld a, (hl) 
ade6 3c					inc a 
ade7 77					ld (hl), a 
ade8					 
ade8					NEXTW 
ade8 c3 76 9e			jp macro_next 
adeb				endm 
# End of macro NEXTW
adeb			.ADWSTORE: 
adeb				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
adeb 6f				db WORD_SYS_CORE+91             
adec 09 ae			dw .SBSTORE            
adee 05				db 4 + 1 
adef .. 00			db "1+2!",0              
adf4				endm 
# End of macro CWHEAD
adf4			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
adf4			 
adf4					FORTH_DSP_VALUEHL 
adf4 cd 8a 9c			call macro_dsp_valuehl 
adf7				endm 
# End of macro FORTH_DSP_VALUEHL
adf7 e5					push hl 
adf8			 
adf8					FORTH_DSP_POP 
adf8 cd 42 9d			call macro_forth_dsp_pop 
adfb				endm 
# End of macro FORTH_DSP_POP
adfb e1					pop hl 
adfc			 
adfc e5					push hl 
adfd			 
adfd cd f8 9d				call loadwordinhl 
ae00 23					inc hl 
ae01			 
ae01 d1					pop de 
ae02 eb					ex de, hl 
ae03 73					ld (hl), e 
ae04 23					inc hl 
ae05 72					ld (hl), d 
ae06					 
ae06					NEXTW 
ae06 c3 76 9e			jp macro_next 
ae09				endm 
# End of macro NEXTW
ae09			.SBSTORE: 
ae09				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
ae09 6f				db WORD_SYS_CORE+91             
ae0a 1f ae			dw .SBWSTORE            
ae0c 04				db 3 + 1 
ae0d .. 00			db "1-!",0              
ae11				endm 
# End of macro CWHEAD
ae11			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
ae11			 
ae11					FORTH_DSP_VALUEHL 
ae11 cd 8a 9c			call macro_dsp_valuehl 
ae14				endm 
# End of macro FORTH_DSP_VALUEHL
ae14 e5					push hl 
ae15			 
ae15					FORTH_DSP_POP 
ae15 cd 42 9d			call macro_forth_dsp_pop 
ae18				endm 
# End of macro FORTH_DSP_POP
ae18 e1					pop hl 
ae19			 
ae19 7e					ld a, (hl) 
ae1a 3d					dec a 
ae1b 77					ld (hl), a 
ae1c					 
ae1c					NEXTW 
ae1c c3 76 9e			jp macro_next 
ae1f				endm 
# End of macro NEXTW
ae1f			.SBWSTORE: 
ae1f				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
ae1f 6f				db WORD_SYS_CORE+91             
ae20 3d ae			dw .ENDCORE            
ae22 05				db 4 + 1 
ae23 .. 00			db "1-2!",0              
ae28				endm 
# End of macro CWHEAD
ae28			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
ae28			 
ae28					FORTH_DSP_VALUEHL 
ae28 cd 8a 9c			call macro_dsp_valuehl 
ae2b				endm 
# End of macro FORTH_DSP_VALUEHL
ae2b e5					push hl 
ae2c			 
ae2c					FORTH_DSP_POP 
ae2c cd 42 9d			call macro_forth_dsp_pop 
ae2f				endm 
# End of macro FORTH_DSP_POP
ae2f e1					pop hl 
ae30			 
ae30 e5					push hl 
ae31			 
ae31 cd f8 9d				call loadwordinhl 
ae34 2b					dec hl 
ae35			 
ae35 d1					pop de 
ae36 eb					ex de, hl 
ae37 73					ld (hl), e 
ae38 23					inc hl 
ae39 72					ld (hl), d 
ae3a					 
ae3a					NEXTW 
ae3a c3 76 9e			jp macro_next 
ae3d				endm 
# End of macro NEXTW
ae3d			.ENDCORE: 
ae3d			 
ae3d			; eof 
ae3d			 
ae3d			 
# End of file forth_words_core.asm
ae3d			include "forth_words_flow.asm" 
ae3d			 
ae3d			; | ## Program Flow Words 
ae3d			 
ae3d			.IF: 
ae3d				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
ae3d 1e				db WORD_SYS_CORE+10             
ae3e 32 af			dw .THEN            
ae40 03				db 2 + 1 
ae41 .. 00			db "IF",0              
ae44				endm 
# End of macro CWHEAD
ae44			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
ae44			; 
ae44					if DEBUG_FORTH_WORDS_KEY 
ae44						DMARK "IF." 
ae44 f5				push af  
ae45 3a 59 ae			ld a, (.dmark)  
ae48 32 65 ee			ld (debug_mark),a  
ae4b 3a 5a ae			ld a, (.dmark+1)  
ae4e 32 66 ee			ld (debug_mark+1),a  
ae51 3a 5b ae			ld a, (.dmark+2)  
ae54 32 67 ee			ld (debug_mark+2),a  
ae57 18 03			jr .pastdmark  
ae59 ..			.dmark: db "IF."  
ae5c f1			.pastdmark: pop af  
ae5d			endm  
# End of macro DMARK
ae5d						CALLMONITOR 
ae5d cd 6f ee			call debug_vector  
ae60				endm  
# End of macro CALLMONITOR
ae60					endif 
ae60			; eval TOS 
ae60			 
ae60				FORTH_DSP_VALUEHL 
ae60 cd 8a 9c			call macro_dsp_valuehl 
ae63				endm 
# End of macro FORTH_DSP_VALUEHL
ae63			 
ae63			;	push hl 
ae63				FORTH_DSP_POP 
ae63 cd 42 9d			call macro_forth_dsp_pop 
ae66				endm 
# End of macro FORTH_DSP_POP
ae66			;	pop hl 
ae66			 
ae66					if DEBUG_FORTH_WORDS 
ae66						DMARK "IF1" 
ae66 f5				push af  
ae67 3a 7b ae			ld a, (.dmark)  
ae6a 32 65 ee			ld (debug_mark),a  
ae6d 3a 7c ae			ld a, (.dmark+1)  
ae70 32 66 ee			ld (debug_mark+1),a  
ae73 3a 7d ae			ld a, (.dmark+2)  
ae76 32 67 ee			ld (debug_mark+2),a  
ae79 18 03			jr .pastdmark  
ae7b ..			.dmark: db "IF1"  
ae7e f1			.pastdmark: pop af  
ae7f			endm  
# End of macro DMARK
ae7f						CALLMONITOR 
ae7f cd 6f ee			call debug_vector  
ae82				endm  
# End of macro CALLMONITOR
ae82					endif 
ae82 b7				or a        ; clear carry flag 
ae83 11 00 00			ld de, 0 
ae86 eb				ex de,hl 
ae87 ed 52			sbc hl, de 
ae89 c2 13 af			jp nz, .iftrue 
ae8c			 
ae8c					if DEBUG_FORTH_WORDS 
ae8c						DMARK "IF2" 
ae8c f5				push af  
ae8d 3a a1 ae			ld a, (.dmark)  
ae90 32 65 ee			ld (debug_mark),a  
ae93 3a a2 ae			ld a, (.dmark+1)  
ae96 32 66 ee			ld (debug_mark+1),a  
ae99 3a a3 ae			ld a, (.dmark+2)  
ae9c 32 67 ee			ld (debug_mark+2),a  
ae9f 18 03			jr .pastdmark  
aea1 ..			.dmark: db "IF2"  
aea4 f1			.pastdmark: pop af  
aea5			endm  
# End of macro DMARK
aea5						CALLMONITOR 
aea5 cd 6f ee			call debug_vector  
aea8				endm  
# End of macro CALLMONITOR
aea8					endif 
aea8			 
aea8			; if not true then skip to THEN 
aea8			 
aea8				; TODO get tok_ptr 
aea8				; TODO consume toks until we get to THEN 
aea8			 
aea8 2a bc e5			ld hl, (os_tok_ptr) 
aeab					if DEBUG_FORTH_WORDS 
aeab						DMARK "IF3" 
aeab f5				push af  
aeac 3a c0 ae			ld a, (.dmark)  
aeaf 32 65 ee			ld (debug_mark),a  
aeb2 3a c1 ae			ld a, (.dmark+1)  
aeb5 32 66 ee			ld (debug_mark+1),a  
aeb8 3a c2 ae			ld a, (.dmark+2)  
aebb 32 67 ee			ld (debug_mark+2),a  
aebe 18 03			jr .pastdmark  
aec0 ..			.dmark: db "IF3"  
aec3 f1			.pastdmark: pop af  
aec4			endm  
# End of macro DMARK
aec4						CALLMONITOR 
aec4 cd 6f ee			call debug_vector  
aec7				endm  
# End of macro CALLMONITOR
aec7						 
aec7					endif 
aec7 11 0e af			ld de, .ifthen 
aeca					if DEBUG_FORTH_WORDS 
aeca						DMARK "IF4" 
aeca f5				push af  
aecb 3a df ae			ld a, (.dmark)  
aece 32 65 ee			ld (debug_mark),a  
aed1 3a e0 ae			ld a, (.dmark+1)  
aed4 32 66 ee			ld (debug_mark+1),a  
aed7 3a e1 ae			ld a, (.dmark+2)  
aeda 32 67 ee			ld (debug_mark+2),a  
aedd 18 03			jr .pastdmark  
aedf ..			.dmark: db "IF4"  
aee2 f1			.pastdmark: pop af  
aee3			endm  
# End of macro DMARK
aee3						CALLMONITOR 
aee3 cd 6f ee			call debug_vector  
aee6				endm  
# End of macro CALLMONITOR
aee6					endif 
aee6 cd 91 9f			call findnexttok  
aee9			 
aee9					if DEBUG_FORTH_WORDS 
aee9						DMARK "IF5" 
aee9 f5				push af  
aeea 3a fe ae			ld a, (.dmark)  
aeed 32 65 ee			ld (debug_mark),a  
aef0 3a ff ae			ld a, (.dmark+1)  
aef3 32 66 ee			ld (debug_mark+1),a  
aef6 3a 00 af			ld a, (.dmark+2)  
aef9 32 67 ee			ld (debug_mark+2),a  
aefc 18 03			jr .pastdmark  
aefe ..			.dmark: db "IF5"  
af01 f1			.pastdmark: pop af  
af02			endm  
# End of macro DMARK
af02						CALLMONITOR 
af02 cd 6f ee			call debug_vector  
af05				endm  
# End of macro CALLMONITOR
af05					endif 
af05				; TODO replace below with ; exec using tok_ptr 
af05 22 bc e5			ld (os_tok_ptr), hl 
af08 c3 07 9f			jp exec1 
af0b				NEXTW 
af0b c3 76 9e			jp macro_next 
af0e				endm 
# End of macro NEXTW
af0e			 
af0e .. 00		.ifthen:  db "THEN",0 
af13			 
af13			.iftrue:		 
af13				; Exec next words normally 
af13			 
af13				; if true then exec following IF as normal 
af13					if DEBUG_FORTH_WORDS 
af13						DMARK "IFT" 
af13 f5				push af  
af14 3a 28 af			ld a, (.dmark)  
af17 32 65 ee			ld (debug_mark),a  
af1a 3a 29 af			ld a, (.dmark+1)  
af1d 32 66 ee			ld (debug_mark+1),a  
af20 3a 2a af			ld a, (.dmark+2)  
af23 32 67 ee			ld (debug_mark+2),a  
af26 18 03			jr .pastdmark  
af28 ..			.dmark: db "IFT"  
af2b f1			.pastdmark: pop af  
af2c			endm  
# End of macro DMARK
af2c						CALLMONITOR 
af2c cd 6f ee			call debug_vector  
af2f				endm  
# End of macro CALLMONITOR
af2f					endif 
af2f			 
af2f					NEXTW 
af2f c3 76 9e			jp macro_next 
af32				endm 
# End of macro NEXTW
af32			.THEN: 
af32				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
af32 1f				db WORD_SYS_CORE+11             
af33 5a af			dw .ELSE            
af35 05				db 4 + 1 
af36 .. 00			db "THEN",0              
af3b				endm 
# End of macro CWHEAD
af3b			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
af3b					if DEBUG_FORTH_WORDS_KEY 
af3b						DMARK "THN" 
af3b f5				push af  
af3c 3a 50 af			ld a, (.dmark)  
af3f 32 65 ee			ld (debug_mark),a  
af42 3a 51 af			ld a, (.dmark+1)  
af45 32 66 ee			ld (debug_mark+1),a  
af48 3a 52 af			ld a, (.dmark+2)  
af4b 32 67 ee			ld (debug_mark+2),a  
af4e 18 03			jr .pastdmark  
af50 ..			.dmark: db "THN"  
af53 f1			.pastdmark: pop af  
af54			endm  
# End of macro DMARK
af54						CALLMONITOR 
af54 cd 6f ee			call debug_vector  
af57				endm  
# End of macro CALLMONITOR
af57					endif 
af57					NEXTW 
af57 c3 76 9e			jp macro_next 
af5a				endm 
# End of macro NEXTW
af5a			.ELSE: 
af5a				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
af5a 20				db WORD_SYS_CORE+12             
af5b 82 af			dw .DO            
af5d 03				db 2 + 1 
af5e .. 00			db "ELSE",0              
af63				endm 
# End of macro CWHEAD
af63			; | ELSE ( -- ) Not supported - does nothing | TODO 
af63			 
af63					if DEBUG_FORTH_WORDS_KEY 
af63						DMARK "ELS" 
af63 f5				push af  
af64 3a 78 af			ld a, (.dmark)  
af67 32 65 ee			ld (debug_mark),a  
af6a 3a 79 af			ld a, (.dmark+1)  
af6d 32 66 ee			ld (debug_mark+1),a  
af70 3a 7a af			ld a, (.dmark+2)  
af73 32 67 ee			ld (debug_mark+2),a  
af76 18 03			jr .pastdmark  
af78 ..			.dmark: db "ELS"  
af7b f1			.pastdmark: pop af  
af7c			endm  
# End of macro DMARK
af7c						CALLMONITOR 
af7c cd 6f ee			call debug_vector  
af7f				endm  
# End of macro CALLMONITOR
af7f					endif 
af7f			 
af7f			 
af7f					NEXTW 
af7f c3 76 9e			jp macro_next 
af82				endm 
# End of macro NEXTW
af82			.DO: 
af82				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
af82 21				db WORD_SYS_CORE+13             
af83 a9 b0			dw .LOOP            
af85 03				db 2 + 1 
af86 .. 00			db "DO",0              
af89				endm 
# End of macro CWHEAD
af89			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
af89			 
af89					if DEBUG_FORTH_WORDS_KEY 
af89						DMARK "DO." 
af89 f5				push af  
af8a 3a 9e af			ld a, (.dmark)  
af8d 32 65 ee			ld (debug_mark),a  
af90 3a 9f af			ld a, (.dmark+1)  
af93 32 66 ee			ld (debug_mark+1),a  
af96 3a a0 af			ld a, (.dmark+2)  
af99 32 67 ee			ld (debug_mark+2),a  
af9c 18 03			jr .pastdmark  
af9e ..			.dmark: db "DO."  
afa1 f1			.pastdmark: pop af  
afa2			endm  
# End of macro DMARK
afa2						CALLMONITOR 
afa2 cd 6f ee			call debug_vector  
afa5				endm  
# End of macro CALLMONITOR
afa5					endif 
afa5			;  push pc to rsp stack past the DO 
afa5			 
afa5 2a bc e5				ld hl, (os_tok_ptr) 
afa8 23					inc hl   ; D 
afa9 23					inc hl  ; O 
afaa 23					inc hl   ; null 
afab					if DEBUG_FORTH_WORDS 
afab						DMARK "DO2" 
afab f5				push af  
afac 3a c0 af			ld a, (.dmark)  
afaf 32 65 ee			ld (debug_mark),a  
afb2 3a c1 af			ld a, (.dmark+1)  
afb5 32 66 ee			ld (debug_mark+1),a  
afb8 3a c2 af			ld a, (.dmark+2)  
afbb 32 67 ee			ld (debug_mark+2),a  
afbe 18 03			jr .pastdmark  
afc0 ..			.dmark: db "DO2"  
afc3 f1			.pastdmark: pop af  
afc4			endm  
# End of macro DMARK
afc4						CALLMONITOR 
afc4 cd 6f ee			call debug_vector  
afc7				endm  
# End of macro CALLMONITOR
afc7					endif 
afc7					FORTH_RSP_NEXT 
afc7 cd 2c 9a			call macro_forth_rsp_next 
afca				endm 
# End of macro FORTH_RSP_NEXT
afca					if DEBUG_FORTH_WORDS 
afca						DMARK "DO3" 
afca f5				push af  
afcb 3a df af			ld a, (.dmark)  
afce 32 65 ee			ld (debug_mark),a  
afd1 3a e0 af			ld a, (.dmark+1)  
afd4 32 66 ee			ld (debug_mark+1),a  
afd7 3a e1 af			ld a, (.dmark+2)  
afda 32 67 ee			ld (debug_mark+2),a  
afdd 18 03			jr .pastdmark  
afdf ..			.dmark: db "DO3"  
afe2 f1			.pastdmark: pop af  
afe3			endm  
# End of macro DMARK
afe3						CALLMONITOR 
afe3 cd 6f ee			call debug_vector  
afe6				endm  
# End of macro CALLMONITOR
afe6					endif 
afe6			 
afe6					;if DEBUG_FORTH_WORDS 
afe6				;		push hl 
afe6			;		endif  
afe6			 
afe6			; get counters from data stack 
afe6			 
afe6			 
afe6					FORTH_DSP_VALUEHL 
afe6 cd 8a 9c			call macro_dsp_valuehl 
afe9				endm 
# End of macro FORTH_DSP_VALUEHL
afe9 e5					push hl		 ; hl now has starting counter which needs to be tos 
afea			 
afea					if DEBUG_FORTH_WORDS 
afea						DMARK "DO4" 
afea f5				push af  
afeb 3a ff af			ld a, (.dmark)  
afee 32 65 ee			ld (debug_mark),a  
aff1 3a 00 b0			ld a, (.dmark+1)  
aff4 32 66 ee			ld (debug_mark+1),a  
aff7 3a 01 b0			ld a, (.dmark+2)  
affa 32 67 ee			ld (debug_mark+2),a  
affd 18 03			jr .pastdmark  
afff ..			.dmark: db "DO4"  
b002 f1			.pastdmark: pop af  
b003			endm  
# End of macro DMARK
b003						CALLMONITOR 
b003 cd 6f ee			call debug_vector  
b006				endm  
# End of macro CALLMONITOR
b006					endif 
b006					FORTH_DSP_POP 
b006 cd 42 9d			call macro_forth_dsp_pop 
b009				endm 
# End of macro FORTH_DSP_POP
b009			 
b009					if DEBUG_FORTH_WORDS 
b009						DMARK "DO5" 
b009 f5				push af  
b00a 3a 1e b0			ld a, (.dmark)  
b00d 32 65 ee			ld (debug_mark),a  
b010 3a 1f b0			ld a, (.dmark+1)  
b013 32 66 ee			ld (debug_mark+1),a  
b016 3a 20 b0			ld a, (.dmark+2)  
b019 32 67 ee			ld (debug_mark+2),a  
b01c 18 03			jr .pastdmark  
b01e ..			.dmark: db "DO5"  
b021 f1			.pastdmark: pop af  
b022			endm  
# End of macro DMARK
b022						CALLMONITOR 
b022 cd 6f ee			call debug_vector  
b025				endm  
# End of macro CALLMONITOR
b025					endif 
b025			 
b025					FORTH_DSP_VALUEHL 
b025 cd 8a 9c			call macro_dsp_valuehl 
b028				endm 
# End of macro FORTH_DSP_VALUEHL
b028			;		push hl		 ; hl now has starting limit counter 
b028			 
b028					if DEBUG_FORTH_WORDS 
b028						DMARK "DO6" 
b028 f5				push af  
b029 3a 3d b0			ld a, (.dmark)  
b02c 32 65 ee			ld (debug_mark),a  
b02f 3a 3e b0			ld a, (.dmark+1)  
b032 32 66 ee			ld (debug_mark+1),a  
b035 3a 3f b0			ld a, (.dmark+2)  
b038 32 67 ee			ld (debug_mark+2),a  
b03b 18 03			jr .pastdmark  
b03d ..			.dmark: db "DO6"  
b040 f1			.pastdmark: pop af  
b041			endm  
# End of macro DMARK
b041						CALLMONITOR 
b041 cd 6f ee			call debug_vector  
b044				endm  
# End of macro CALLMONITOR
b044					endif 
b044					FORTH_DSP_POP 
b044 cd 42 9d			call macro_forth_dsp_pop 
b047				endm 
# End of macro FORTH_DSP_POP
b047			 
b047			; put counters on the loop stack 
b047			 
b047			;		pop hl			 ; limit counter 
b047 d1					pop de			; start counter 
b048			 
b048					; push limit counter 
b048			 
b048					if DEBUG_FORTH_WORDS 
b048						DMARK "DO7" 
b048 f5				push af  
b049 3a 5d b0			ld a, (.dmark)  
b04c 32 65 ee			ld (debug_mark),a  
b04f 3a 5e b0			ld a, (.dmark+1)  
b052 32 66 ee			ld (debug_mark+1),a  
b055 3a 5f b0			ld a, (.dmark+2)  
b058 32 67 ee			ld (debug_mark+2),a  
b05b 18 03			jr .pastdmark  
b05d ..			.dmark: db "DO7"  
b060 f1			.pastdmark: pop af  
b061			endm  
# End of macro DMARK
b061						CALLMONITOR 
b061 cd 6f ee			call debug_vector  
b064				endm  
# End of macro CALLMONITOR
b064					endif 
b064					FORTH_LOOP_NEXT 
b064 cd bb 9c			call macro_forth_loop_next 
b067				endm 
# End of macro FORTH_LOOP_NEXT
b067			 
b067					; push start counter 
b067			 
b067 eb					ex de, hl 
b068					if DEBUG_FORTH_WORDS 
b068						DMARK "DO7" 
b068 f5				push af  
b069 3a 7d b0			ld a, (.dmark)  
b06c 32 65 ee			ld (debug_mark),a  
b06f 3a 7e b0			ld a, (.dmark+1)  
b072 32 66 ee			ld (debug_mark+1),a  
b075 3a 7f b0			ld a, (.dmark+2)  
b078 32 67 ee			ld (debug_mark+2),a  
b07b 18 03			jr .pastdmark  
b07d ..			.dmark: db "DO7"  
b080 f1			.pastdmark: pop af  
b081			endm  
# End of macro DMARK
b081						CALLMONITOR 
b081 cd 6f ee			call debug_vector  
b084				endm  
# End of macro CALLMONITOR
b084					endif 
b084					FORTH_LOOP_NEXT 
b084 cd bb 9c			call macro_forth_loop_next 
b087				endm 
# End of macro FORTH_LOOP_NEXT
b087			 
b087			 
b087					; init first round of I counter 
b087			 
b087 22 e0 e5				ld (os_current_i), hl 
b08a			 
b08a					if DEBUG_FORTH_WORDS 
b08a						DMARK "DO8" 
b08a f5				push af  
b08b 3a 9f b0			ld a, (.dmark)  
b08e 32 65 ee			ld (debug_mark),a  
b091 3a a0 b0			ld a, (.dmark+1)  
b094 32 66 ee			ld (debug_mark+1),a  
b097 3a a1 b0			ld a, (.dmark+2)  
b09a 32 67 ee			ld (debug_mark+2),a  
b09d 18 03			jr .pastdmark  
b09f ..			.dmark: db "DO8"  
b0a2 f1			.pastdmark: pop af  
b0a3			endm  
# End of macro DMARK
b0a3						CALLMONITOR 
b0a3 cd 6f ee			call debug_vector  
b0a6				endm  
# End of macro CALLMONITOR
b0a6					endif 
b0a6			 
b0a6					NEXTW 
b0a6 c3 76 9e			jp macro_next 
b0a9				endm 
# End of macro NEXTW
b0a9			.LOOP: 
b0a9				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b0a9 22				db WORD_SYS_CORE+14             
b0aa c1 b1			dw .I            
b0ac 05				db 4 + 1 
b0ad .. 00			db "LOOP",0              
b0b2				endm 
# End of macro CWHEAD
b0b2			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b0b2			 
b0b2				; pop tos as current loop count to hl 
b0b2			 
b0b2				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b0b2			 
b0b2				FORTH_LOOP_TOS 
b0b2 cd ee 9c			call macro_forth_loop_tos 
b0b5				endm 
# End of macro FORTH_LOOP_TOS
b0b5 e5				push hl 
b0b6			 
b0b6					if DEBUG_FORTH_WORDS_KEY 
b0b6						DMARK "LOP" 
b0b6 f5				push af  
b0b7 3a cb b0			ld a, (.dmark)  
b0ba 32 65 ee			ld (debug_mark),a  
b0bd 3a cc b0			ld a, (.dmark+1)  
b0c0 32 66 ee			ld (debug_mark+1),a  
b0c3 3a cd b0			ld a, (.dmark+2)  
b0c6 32 67 ee			ld (debug_mark+2),a  
b0c9 18 03			jr .pastdmark  
b0cb ..			.dmark: db "LOP"  
b0ce f1			.pastdmark: pop af  
b0cf			endm  
# End of macro DMARK
b0cf						CALLMONITOR 
b0cf cd 6f ee			call debug_vector  
b0d2				endm  
# End of macro CALLMONITOR
b0d2					endif 
b0d2				; next item on the stack is the limit. get it 
b0d2			 
b0d2			 
b0d2				FORTH_LOOP_POP 
b0d2 cd f8 9c			call macro_forth_loop_pop 
b0d5				endm 
# End of macro FORTH_LOOP_POP
b0d5			 
b0d5				FORTH_LOOP_TOS 
b0d5 cd ee 9c			call macro_forth_loop_tos 
b0d8				endm 
# End of macro FORTH_LOOP_TOS
b0d8			 
b0d8 d1				pop de		 ; de = i, hl = limit 
b0d9			 
b0d9					if DEBUG_FORTH_WORDS 
b0d9						DMARK "LP1" 
b0d9 f5				push af  
b0da 3a ee b0			ld a, (.dmark)  
b0dd 32 65 ee			ld (debug_mark),a  
b0e0 3a ef b0			ld a, (.dmark+1)  
b0e3 32 66 ee			ld (debug_mark+1),a  
b0e6 3a f0 b0			ld a, (.dmark+2)  
b0e9 32 67 ee			ld (debug_mark+2),a  
b0ec 18 03			jr .pastdmark  
b0ee ..			.dmark: db "LP1"  
b0f1 f1			.pastdmark: pop af  
b0f2			endm  
# End of macro DMARK
b0f2						CALLMONITOR 
b0f2 cd 6f ee			call debug_vector  
b0f5				endm  
# End of macro CALLMONITOR
b0f5					endif 
b0f5			 
b0f5				; go back to previous word 
b0f5			 
b0f5 d5				push de    ; save I for inc later 
b0f6			 
b0f6			 
b0f6				; get limit 
b0f6				;  is I at limit? 
b0f6			 
b0f6			 
b0f6					if DEBUG_FORTH_WORDS 
b0f6						DMARK "LP1" 
b0f6 f5				push af  
b0f7 3a 0b b1			ld a, (.dmark)  
b0fa 32 65 ee			ld (debug_mark),a  
b0fd 3a 0c b1			ld a, (.dmark+1)  
b100 32 66 ee			ld (debug_mark+1),a  
b103 3a 0d b1			ld a, (.dmark+2)  
b106 32 67 ee			ld (debug_mark+2),a  
b109 18 03			jr .pastdmark  
b10b ..			.dmark: db "LP1"  
b10e f1			.pastdmark: pop af  
b10f			endm  
# End of macro DMARK
b10f						CALLMONITOR 
b10f cd 6f ee			call debug_vector  
b112				endm  
# End of macro CALLMONITOR
b112					endif 
b112			 
b112 ed 52			sbc hl, de 
b114			 
b114			 
b114				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b114			 
b114 20 26				jr nz, .loopnotdone 
b116			 
b116 e1				pop hl   ; get rid of saved I 
b117				FORTH_LOOP_POP     ; get rid of limit 
b117 cd f8 9c			call macro_forth_loop_pop 
b11a				endm 
# End of macro FORTH_LOOP_POP
b11a			 
b11a				FORTH_RSP_POP     ; get rid of DO ptr 
b11a cd 4d 9a			call macro_forth_rsp_pop 
b11d				endm 
# End of macro FORTH_RSP_POP
b11d			 
b11d			if DEBUG_FORTH_WORDS 
b11d						DMARK "LP>" 
b11d f5				push af  
b11e 3a 32 b1			ld a, (.dmark)  
b121 32 65 ee			ld (debug_mark),a  
b124 3a 33 b1			ld a, (.dmark+1)  
b127 32 66 ee			ld (debug_mark+1),a  
b12a 3a 34 b1			ld a, (.dmark+2)  
b12d 32 67 ee			ld (debug_mark+2),a  
b130 18 03			jr .pastdmark  
b132 ..			.dmark: db "LP>"  
b135 f1			.pastdmark: pop af  
b136			endm  
# End of macro DMARK
b136				CALLMONITOR 
b136 cd 6f ee			call debug_vector  
b139				endm  
# End of macro CALLMONITOR
b139			endif 
b139			 
b139					NEXTW 
b139 c3 76 9e			jp macro_next 
b13c				endm 
# End of macro NEXTW
b13c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b13c			 
b13c			.loopnotdone: 
b13c			 
b13c e1				pop hl    ; get I 
b13d 23				inc hl 
b13e			 
b13e			   	; save new I 
b13e			 
b13e			 
b13e					; set I counter 
b13e			 
b13e 22 e0 e5				ld (os_current_i), hl 
b141			 
b141					if DEBUG_FORTH_WORDS 
b141						DMARK "LPN" 
b141 f5				push af  
b142 3a 56 b1			ld a, (.dmark)  
b145 32 65 ee			ld (debug_mark),a  
b148 3a 57 b1			ld a, (.dmark+1)  
b14b 32 66 ee			ld (debug_mark+1),a  
b14e 3a 58 b1			ld a, (.dmark+2)  
b151 32 67 ee			ld (debug_mark+2),a  
b154 18 03			jr .pastdmark  
b156 ..			.dmark: db "LPN"  
b159 f1			.pastdmark: pop af  
b15a			endm  
# End of macro DMARK
b15a					CALLMONITOR 
b15a cd 6f ee			call debug_vector  
b15d				endm  
# End of macro CALLMONITOR
b15d					endif 
b15d					 
b15d				FORTH_LOOP_NEXT 
b15d cd bb 9c			call macro_forth_loop_next 
b160				endm 
# End of macro FORTH_LOOP_NEXT
b160			 
b160			 
b160					if DEBUG_FORTH_WORDS 
b160 eb						ex de,hl 
b161					endif 
b161			 
b161			;	; get DO ptr 
b161			; 
b161					if DEBUG_FORTH_WORDS 
b161						DMARK "LP7" 
b161 f5				push af  
b162 3a 76 b1			ld a, (.dmark)  
b165 32 65 ee			ld (debug_mark),a  
b168 3a 77 b1			ld a, (.dmark+1)  
b16b 32 66 ee			ld (debug_mark+1),a  
b16e 3a 78 b1			ld a, (.dmark+2)  
b171 32 67 ee			ld (debug_mark+2),a  
b174 18 03			jr .pastdmark  
b176 ..			.dmark: db "LP7"  
b179 f1			.pastdmark: pop af  
b17a			endm  
# End of macro DMARK
b17a					CALLMONITOR 
b17a cd 6f ee			call debug_vector  
b17d				endm  
# End of macro CALLMONITOR
b17d					endif 
b17d				FORTH_RSP_TOS 
b17d cd 43 9a			call macro_forth_rsp_tos 
b180				endm 
# End of macro FORTH_RSP_TOS
b180			 
b180					if DEBUG_FORTH_WORDS 
b180						DMARK "LP8" 
b180 f5				push af  
b181 3a 95 b1			ld a, (.dmark)  
b184 32 65 ee			ld (debug_mark),a  
b187 3a 96 b1			ld a, (.dmark+1)  
b18a 32 66 ee			ld (debug_mark+1),a  
b18d 3a 97 b1			ld a, (.dmark+2)  
b190 32 67 ee			ld (debug_mark+2),a  
b193 18 03			jr .pastdmark  
b195 ..			.dmark: db "LP8"  
b198 f1			.pastdmark: pop af  
b199			endm  
# End of macro DMARK
b199					CALLMONITOR 
b199 cd 6f ee			call debug_vector  
b19c				endm  
# End of macro CALLMONITOR
b19c					endif 
b19c				;push hl 
b19c			 
b19c				; not going to DO any more 
b19c				; get rid of the RSP pointer as DO will add it back in 
b19c				;FORTH_RSP_POP 
b19c				;pop hl 
b19c			 
b19c				;ld hl,(cli_ret_sp) 
b19c				;ld e, (hl) 
b19c				;inc hl 
b19c				;ld d, (hl) 
b19c				;ex de,hl 
b19c 22 bc e5			ld (os_tok_ptr), hl 
b19f					if DEBUG_FORTH_WORDS 
b19f						DMARK "LP<" 
b19f f5				push af  
b1a0 3a b4 b1			ld a, (.dmark)  
b1a3 32 65 ee			ld (debug_mark),a  
b1a6 3a b5 b1			ld a, (.dmark+1)  
b1a9 32 66 ee			ld (debug_mark+1),a  
b1ac 3a b6 b1			ld a, (.dmark+2)  
b1af 32 67 ee			ld (debug_mark+2),a  
b1b2 18 03			jr .pastdmark  
b1b4 ..			.dmark: db "LP<"  
b1b7 f1			.pastdmark: pop af  
b1b8			endm  
# End of macro DMARK
b1b8					CALLMONITOR 
b1b8 cd 6f ee			call debug_vector  
b1bb				endm  
# End of macro CALLMONITOR
b1bb				endif 
b1bb c3 07 9f			jp exec1 
b1be			 
b1be					 
b1be			 
b1be			 
b1be					NEXTW 
b1be c3 76 9e			jp macro_next 
b1c1				endm 
# End of macro NEXTW
b1c1			.I:  
b1c1			 
b1c1				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b1c1 5e				db WORD_SYS_CORE+74             
b1c2 ec b1			dw .DLOOP            
b1c4 02				db 1 + 1 
b1c5 .. 00			db "I",0              
b1c7				endm 
# End of macro CWHEAD
b1c7			; | I ( -- ) Current loop counter | DONE 
b1c7					if DEBUG_FORTH_WORDS_KEY 
b1c7						DMARK "I.." 
b1c7 f5				push af  
b1c8 3a dc b1			ld a, (.dmark)  
b1cb 32 65 ee			ld (debug_mark),a  
b1ce 3a dd b1			ld a, (.dmark+1)  
b1d1 32 66 ee			ld (debug_mark+1),a  
b1d4 3a de b1			ld a, (.dmark+2)  
b1d7 32 67 ee			ld (debug_mark+2),a  
b1da 18 03			jr .pastdmark  
b1dc ..			.dmark: db "I.."  
b1df f1			.pastdmark: pop af  
b1e0			endm  
# End of macro DMARK
b1e0						CALLMONITOR 
b1e0 cd 6f ee			call debug_vector  
b1e3				endm  
# End of macro CALLMONITOR
b1e3					endif 
b1e3			 
b1e3 2a e0 e5				ld hl,(os_current_i) 
b1e6 cd 85 9a				call forth_push_numhl 
b1e9			 
b1e9					NEXTW 
b1e9 c3 76 9e			jp macro_next 
b1ec				endm 
# End of macro NEXTW
b1ec			.DLOOP: 
b1ec				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b1ec 5f				db WORD_SYS_CORE+75             
b1ed cd b2			dw .REPEAT            
b1ef 06				db 5 + 1 
b1f0 .. 00			db "-LOOP",0              
b1f6				endm 
# End of macro CWHEAD
b1f6			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b1f6				; pop tos as current loop count to hl 
b1f6					if DEBUG_FORTH_WORDS_KEY 
b1f6						DMARK "-LP" 
b1f6 f5				push af  
b1f7 3a 0b b2			ld a, (.dmark)  
b1fa 32 65 ee			ld (debug_mark),a  
b1fd 3a 0c b2			ld a, (.dmark+1)  
b200 32 66 ee			ld (debug_mark+1),a  
b203 3a 0d b2			ld a, (.dmark+2)  
b206 32 67 ee			ld (debug_mark+2),a  
b209 18 03			jr .pastdmark  
b20b ..			.dmark: db "-LP"  
b20e f1			.pastdmark: pop af  
b20f			endm  
# End of macro DMARK
b20f						CALLMONITOR 
b20f cd 6f ee			call debug_vector  
b212				endm  
# End of macro CALLMONITOR
b212					endif 
b212			 
b212				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b212			 
b212				FORTH_LOOP_TOS 
b212 cd ee 9c			call macro_forth_loop_tos 
b215				endm 
# End of macro FORTH_LOOP_TOS
b215 e5				push hl 
b216			 
b216					if DEBUG_FORTH_WORDS 
b216						DMARK "-LP" 
b216 f5				push af  
b217 3a 2b b2			ld a, (.dmark)  
b21a 32 65 ee			ld (debug_mark),a  
b21d 3a 2c b2			ld a, (.dmark+1)  
b220 32 66 ee			ld (debug_mark+1),a  
b223 3a 2d b2			ld a, (.dmark+2)  
b226 32 67 ee			ld (debug_mark+2),a  
b229 18 03			jr .pastdmark  
b22b ..			.dmark: db "-LP"  
b22e f1			.pastdmark: pop af  
b22f			endm  
# End of macro DMARK
b22f						CALLMONITOR 
b22f cd 6f ee			call debug_vector  
b232				endm  
# End of macro CALLMONITOR
b232					endif 
b232				; next item on the stack is the limit. get it 
b232			 
b232			 
b232				FORTH_LOOP_POP 
b232 cd f8 9c			call macro_forth_loop_pop 
b235				endm 
# End of macro FORTH_LOOP_POP
b235			 
b235				FORTH_LOOP_TOS 
b235 cd ee 9c			call macro_forth_loop_tos 
b238				endm 
# End of macro FORTH_LOOP_TOS
b238			 
b238 d1				pop de		 ; de = i, hl = limit 
b239			 
b239					if DEBUG_FORTH_WORDS 
b239						DMARK "-L1" 
b239 f5				push af  
b23a 3a 4e b2			ld a, (.dmark)  
b23d 32 65 ee			ld (debug_mark),a  
b240 3a 4f b2			ld a, (.dmark+1)  
b243 32 66 ee			ld (debug_mark+1),a  
b246 3a 50 b2			ld a, (.dmark+2)  
b249 32 67 ee			ld (debug_mark+2),a  
b24c 18 03			jr .pastdmark  
b24e ..			.dmark: db "-L1"  
b251 f1			.pastdmark: pop af  
b252			endm  
# End of macro DMARK
b252						CALLMONITOR 
b252 cd 6f ee			call debug_vector  
b255				endm  
# End of macro CALLMONITOR
b255					endif 
b255			 
b255				; go back to previous word 
b255			 
b255 d5				push de    ; save I for inc later 
b256			 
b256			 
b256				; get limit 
b256				;  is I at limit? 
b256			 
b256			 
b256					if DEBUG_FORTH_WORDS 
b256						DMARK "-L1" 
b256 f5				push af  
b257 3a 6b b2			ld a, (.dmark)  
b25a 32 65 ee			ld (debug_mark),a  
b25d 3a 6c b2			ld a, (.dmark+1)  
b260 32 66 ee			ld (debug_mark+1),a  
b263 3a 6d b2			ld a, (.dmark+2)  
b266 32 67 ee			ld (debug_mark+2),a  
b269 18 03			jr .pastdmark  
b26b ..			.dmark: db "-L1"  
b26e f1			.pastdmark: pop af  
b26f			endm  
# End of macro DMARK
b26f						CALLMONITOR 
b26f cd 6f ee			call debug_vector  
b272				endm  
# End of macro CALLMONITOR
b272					endif 
b272			 
b272 ed 52			sbc hl, de 
b274			 
b274			 
b274				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b274			 
b274 20 26				jr nz, .mloopnotdone 
b276			 
b276 e1				pop hl   ; get rid of saved I 
b277				FORTH_LOOP_POP     ; get rid of limit 
b277 cd f8 9c			call macro_forth_loop_pop 
b27a				endm 
# End of macro FORTH_LOOP_POP
b27a			 
b27a				FORTH_RSP_POP     ; get rid of DO ptr 
b27a cd 4d 9a			call macro_forth_rsp_pop 
b27d				endm 
# End of macro FORTH_RSP_POP
b27d			 
b27d			if DEBUG_FORTH_WORDS 
b27d						DMARK "-L>" 
b27d f5				push af  
b27e 3a 92 b2			ld a, (.dmark)  
b281 32 65 ee			ld (debug_mark),a  
b284 3a 93 b2			ld a, (.dmark+1)  
b287 32 66 ee			ld (debug_mark+1),a  
b28a 3a 94 b2			ld a, (.dmark+2)  
b28d 32 67 ee			ld (debug_mark+2),a  
b290 18 03			jr .pastdmark  
b292 ..			.dmark: db "-L>"  
b295 f1			.pastdmark: pop af  
b296			endm  
# End of macro DMARK
b296				CALLMONITOR 
b296 cd 6f ee			call debug_vector  
b299				endm  
# End of macro CALLMONITOR
b299			endif 
b299			 
b299					NEXTW 
b299 c3 76 9e			jp macro_next 
b29c				endm 
# End of macro NEXTW
b29c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b29c			 
b29c			.mloopnotdone: 
b29c			 
b29c e1				pop hl    ; get I 
b29d 2b				dec hl 
b29e			 
b29e			   	; save new I 
b29e			 
b29e			 
b29e					; set I counter 
b29e			 
b29e 22 e0 e5				ld (os_current_i), hl 
b2a1			 
b2a1					 
b2a1				FORTH_LOOP_NEXT 
b2a1 cd bb 9c			call macro_forth_loop_next 
b2a4				endm 
# End of macro FORTH_LOOP_NEXT
b2a4			 
b2a4			 
b2a4					if DEBUG_FORTH_WORDS 
b2a4 eb						ex de,hl 
b2a5					endif 
b2a5			 
b2a5			;	; get DO ptr 
b2a5			; 
b2a5				FORTH_RSP_TOS 
b2a5 cd 43 9a			call macro_forth_rsp_tos 
b2a8				endm 
# End of macro FORTH_RSP_TOS
b2a8			 
b2a8				;push hl 
b2a8			 
b2a8				; not going to DO any more 
b2a8				; get rid of the RSP pointer as DO will add it back in 
b2a8				;FORTH_RSP_POP 
b2a8				;pop hl 
b2a8			 
b2a8			 
b2a8 22 bc e5			ld (os_tok_ptr), hl 
b2ab					if DEBUG_FORTH_WORDS 
b2ab						DMARK "-L<" 
b2ab f5				push af  
b2ac 3a c0 b2			ld a, (.dmark)  
b2af 32 65 ee			ld (debug_mark),a  
b2b2 3a c1 b2			ld a, (.dmark+1)  
b2b5 32 66 ee			ld (debug_mark+1),a  
b2b8 3a c2 b2			ld a, (.dmark+2)  
b2bb 32 67 ee			ld (debug_mark+2),a  
b2be 18 03			jr .pastdmark  
b2c0 ..			.dmark: db "-L<"  
b2c3 f1			.pastdmark: pop af  
b2c4			endm  
# End of macro DMARK
b2c4					CALLMONITOR 
b2c4 cd 6f ee			call debug_vector  
b2c7				endm  
# End of macro CALLMONITOR
b2c7				endif 
b2c7 c3 07 9f			jp exec1 
b2ca			 
b2ca					 
b2ca			 
b2ca			 
b2ca			 
b2ca				NEXTW 
b2ca c3 76 9e			jp macro_next 
b2cd				endm 
# End of macro NEXTW
b2cd			 
b2cd			 
b2cd			 
b2cd			 
b2cd			.REPEAT: 
b2cd				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b2cd 71				db WORD_SYS_CORE+93             
b2ce 20 b3			dw .UNTIL            
b2d0 06				db 5 + 1 
b2d1 .. 00			db "REPEAT",0              
b2d8				endm 
# End of macro CWHEAD
b2d8			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b2d8			;  push pc to rsp stack past the REPEAT 
b2d8					if DEBUG_FORTH_WORDS_KEY 
b2d8						DMARK "REP" 
b2d8 f5				push af  
b2d9 3a ed b2			ld a, (.dmark)  
b2dc 32 65 ee			ld (debug_mark),a  
b2df 3a ee b2			ld a, (.dmark+1)  
b2e2 32 66 ee			ld (debug_mark+1),a  
b2e5 3a ef b2			ld a, (.dmark+2)  
b2e8 32 67 ee			ld (debug_mark+2),a  
b2eb 18 03			jr .pastdmark  
b2ed ..			.dmark: db "REP"  
b2f0 f1			.pastdmark: pop af  
b2f1			endm  
# End of macro DMARK
b2f1						CALLMONITOR 
b2f1 cd 6f ee			call debug_vector  
b2f4				endm  
# End of macro CALLMONITOR
b2f4					endif 
b2f4			 
b2f4 2a bc e5				ld hl, (os_tok_ptr) 
b2f7 23					inc hl   ; R 
b2f8 23					inc hl  ; E 
b2f9 23					inc hl   ; P 
b2fa 23					inc hl   ; E 
b2fb 23					inc hl   ; A 
b2fc 23					inc hl   ; T 
b2fd 23					inc hl   ; zero 
b2fe					FORTH_RSP_NEXT 
b2fe cd 2c 9a			call macro_forth_rsp_next 
b301				endm 
# End of macro FORTH_RSP_NEXT
b301			 
b301			 
b301					if DEBUG_FORTH_WORDS 
b301						DMARK "REP" 
b301 f5				push af  
b302 3a 16 b3			ld a, (.dmark)  
b305 32 65 ee			ld (debug_mark),a  
b308 3a 17 b3			ld a, (.dmark+1)  
b30b 32 66 ee			ld (debug_mark+1),a  
b30e 3a 18 b3			ld a, (.dmark+2)  
b311 32 67 ee			ld (debug_mark+2),a  
b314 18 03			jr .pastdmark  
b316 ..			.dmark: db "REP"  
b319 f1			.pastdmark: pop af  
b31a			endm  
# End of macro DMARK
b31a						;pop bc    ; TODO BUG ?????? what is this for???? 
b31a						CALLMONITOR 
b31a cd 6f ee			call debug_vector  
b31d				endm  
# End of macro CALLMONITOR
b31d					endif 
b31d			 
b31d					NEXTW 
b31d c3 76 9e			jp macro_next 
b320				endm 
# End of macro NEXTW
b320			;	       NEXTW 
b320			 
b320			.UNTIL: 
b320				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b320 72				db WORD_SYS_CORE+94             
b321 b7 b3			dw .ENDFLOW            
b323 06				db 5 + 1 
b324 .. 00			db "UNTIL",0              
b32a				endm 
# End of macro CWHEAD
b32a			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b32a			 
b32a				; pop tos as check 
b32a			 
b32a				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b32a			 
b32a				FORTH_DSP_VALUEHL 
b32a cd 8a 9c			call macro_dsp_valuehl 
b32d				endm 
# End of macro FORTH_DSP_VALUEHL
b32d			 
b32d					if DEBUG_FORTH_WORDS_KEY 
b32d						DMARK "UNT" 
b32d f5				push af  
b32e 3a 42 b3			ld a, (.dmark)  
b331 32 65 ee			ld (debug_mark),a  
b334 3a 43 b3			ld a, (.dmark+1)  
b337 32 66 ee			ld (debug_mark+1),a  
b33a 3a 44 b3			ld a, (.dmark+2)  
b33d 32 67 ee			ld (debug_mark+2),a  
b340 18 03			jr .pastdmark  
b342 ..			.dmark: db "UNT"  
b345 f1			.pastdmark: pop af  
b346			endm  
# End of macro DMARK
b346						CALLMONITOR 
b346 cd 6f ee			call debug_vector  
b349				endm  
# End of macro CALLMONITOR
b349					endif 
b349			 
b349			;	push hl 
b349				FORTH_DSP_POP 
b349 cd 42 9d			call macro_forth_dsp_pop 
b34c				endm 
# End of macro FORTH_DSP_POP
b34c			 
b34c			;	pop hl 
b34c			 
b34c				; test if true 
b34c			 
b34c cd 13 8d			call ishlzero 
b34f			;	ld a,l 
b34f			;	add h 
b34f			; 
b34f			;	cp 0 
b34f			 
b34f 20 3e			jr nz, .untilnotdone 
b351			 
b351					if DEBUG_FORTH_WORDS 
b351						DMARK "UNf" 
b351 f5				push af  
b352 3a 66 b3			ld a, (.dmark)  
b355 32 65 ee			ld (debug_mark),a  
b358 3a 67 b3			ld a, (.dmark+1)  
b35b 32 66 ee			ld (debug_mark+1),a  
b35e 3a 68 b3			ld a, (.dmark+2)  
b361 32 67 ee			ld (debug_mark+2),a  
b364 18 03			jr .pastdmark  
b366 ..			.dmark: db "UNf"  
b369 f1			.pastdmark: pop af  
b36a			endm  
# End of macro DMARK
b36a						CALLMONITOR 
b36a cd 6f ee			call debug_vector  
b36d				endm  
# End of macro CALLMONITOR
b36d					endif 
b36d			 
b36d			 
b36d			 
b36d				FORTH_RSP_POP     ; get rid of DO ptr 
b36d cd 4d 9a			call macro_forth_rsp_pop 
b370				endm 
# End of macro FORTH_RSP_POP
b370			 
b370			if DEBUG_FORTH_WORDS 
b370						DMARK "UN>" 
b370 f5				push af  
b371 3a 85 b3			ld a, (.dmark)  
b374 32 65 ee			ld (debug_mark),a  
b377 3a 86 b3			ld a, (.dmark+1)  
b37a 32 66 ee			ld (debug_mark+1),a  
b37d 3a 87 b3			ld a, (.dmark+2)  
b380 32 67 ee			ld (debug_mark+2),a  
b383 18 03			jr .pastdmark  
b385 ..			.dmark: db "UN>"  
b388 f1			.pastdmark: pop af  
b389			endm  
# End of macro DMARK
b389				CALLMONITOR 
b389 cd 6f ee			call debug_vector  
b38c				endm  
# End of macro CALLMONITOR
b38c			endif 
b38c			 
b38c					NEXTW 
b38c c3 76 9e			jp macro_next 
b38f				endm 
# End of macro NEXTW
b38f				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b38f			 
b38f			.untilnotdone: 
b38f			 
b38f			 
b38f			;	; get DO ptr 
b38f			; 
b38f				FORTH_RSP_TOS 
b38f cd 43 9a			call macro_forth_rsp_tos 
b392				endm 
# End of macro FORTH_RSP_TOS
b392			 
b392				;push hl 
b392			 
b392				; not going to DO any more 
b392				; get rid of the RSP pointer as DO will add it back in 
b392				;FORTH_RSP_POP 
b392				;pop hl 
b392			 
b392			 
b392 22 bc e5			ld (os_tok_ptr), hl 
b395					if DEBUG_FORTH_WORDS 
b395						DMARK "UN<" 
b395 f5				push af  
b396 3a aa b3			ld a, (.dmark)  
b399 32 65 ee			ld (debug_mark),a  
b39c 3a ab b3			ld a, (.dmark+1)  
b39f 32 66 ee			ld (debug_mark+1),a  
b3a2 3a ac b3			ld a, (.dmark+2)  
b3a5 32 67 ee			ld (debug_mark+2),a  
b3a8 18 03			jr .pastdmark  
b3aa ..			.dmark: db "UN<"  
b3ad f1			.pastdmark: pop af  
b3ae			endm  
# End of macro DMARK
b3ae					CALLMONITOR 
b3ae cd 6f ee			call debug_vector  
b3b1				endm  
# End of macro CALLMONITOR
b3b1				endif 
b3b1 c3 07 9f			jp exec1 
b3b4			 
b3b4					 
b3b4			 
b3b4			 
b3b4					NEXTW 
b3b4 c3 76 9e			jp macro_next 
b3b7				endm 
# End of macro NEXTW
b3b7			 
b3b7			 
b3b7			.ENDFLOW: 
b3b7			 
b3b7			; eof 
b3b7			 
# End of file forth_words_flow.asm
b3b7			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b3b7			include "forth_words_logic.asm" 
b3b7			 
b3b7			; | ## Logic Words 
b3b7			 
b3b7			.NOT: 
b3b7				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b3b7 2d				db WORD_SYS_CORE+25             
b3b8 ff b3			dw .IS            
b3ba 04				db 3 + 1 
b3bb .. 00			db "NOT",0              
b3bf				endm 
# End of macro CWHEAD
b3bf			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b3bf					if DEBUG_FORTH_WORDS_KEY 
b3bf						DMARK "NOT" 
b3bf f5				push af  
b3c0 3a d4 b3			ld a, (.dmark)  
b3c3 32 65 ee			ld (debug_mark),a  
b3c6 3a d5 b3			ld a, (.dmark+1)  
b3c9 32 66 ee			ld (debug_mark+1),a  
b3cc 3a d6 b3			ld a, (.dmark+2)  
b3cf 32 67 ee			ld (debug_mark+2),a  
b3d2 18 03			jr .pastdmark  
b3d4 ..			.dmark: db "NOT"  
b3d7 f1			.pastdmark: pop af  
b3d8			endm  
# End of macro DMARK
b3d8						CALLMONITOR 
b3d8 cd 6f ee			call debug_vector  
b3db				endm  
# End of macro CALLMONITOR
b3db					endif 
b3db					FORTH_DSP 
b3db cd 50 9c			call macro_forth_dsp 
b3de				endm 
# End of macro FORTH_DSP
b3de 7e					ld a,(hl)	; get type of value on TOS 
b3df fe 02				cp DS_TYPE_INUM  
b3e1 28 03				jr z, .noti 
b3e3					NEXTW 
b3e3 c3 76 9e			jp macro_next 
b3e6				endm 
# End of macro NEXTW
b3e6			.noti:          FORTH_DSP_VALUEHL 
b3e6 cd 8a 9c			call macro_dsp_valuehl 
b3e9				endm 
# End of macro FORTH_DSP_VALUEHL
b3e9			;		push hl 
b3e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b3e9 cd 42 9d			call macro_forth_dsp_pop 
b3ec				endm 
# End of macro FORTH_DSP_POP
b3ec			;		pop hl 
b3ec 3e 00				ld a,0 
b3ee bd					cp l 
b3ef 28 04				jr z, .not2t 
b3f1 2e 00				ld l, 0 
b3f3 18 02				jr .notip 
b3f5			 
b3f5 2e ff		.not2t:		ld l, 255 
b3f7			 
b3f7 26 00		.notip:		ld h, 0	 
b3f9			 
b3f9 cd 85 9a				call forth_push_numhl 
b3fc					NEXTW 
b3fc c3 76 9e			jp macro_next 
b3ff				endm 
# End of macro NEXTW
b3ff			 
b3ff			.IS: 
b3ff				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b3ff 2d				db WORD_SYS_CORE+25             
b400 25 b4			dw .LZERO            
b402 03				db 2 + 1 
b403 .. 00			db "IS",0              
b406				endm 
# End of macro CWHEAD
b406			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b406					if DEBUG_FORTH_WORDS_KEY 
b406						DMARK "IS." 
b406 f5				push af  
b407 3a 1b b4			ld a, (.dmark)  
b40a 32 65 ee			ld (debug_mark),a  
b40d 3a 1c b4			ld a, (.dmark+1)  
b410 32 66 ee			ld (debug_mark+1),a  
b413 3a 1d b4			ld a, (.dmark+2)  
b416 32 67 ee			ld (debug_mark+2),a  
b419 18 03			jr .pastdmark  
b41b ..			.dmark: db "IS."  
b41e f1			.pastdmark: pop af  
b41f			endm  
# End of macro DMARK
b41f						CALLMONITOR 
b41f cd 6f ee			call debug_vector  
b422				endm  
# End of macro CALLMONITOR
b422					endif 
b422					NEXTW 
b422 c3 76 9e			jp macro_next 
b425				endm 
# End of macro NEXTW
b425			.LZERO: 
b425				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b425 2d				db WORD_SYS_CORE+25             
b426 2f b4			dw .TZERO            
b428 03				db 2 + 1 
b429 .. 00			db "0<",0              
b42c				endm 
# End of macro CWHEAD
b42c			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b42c					NEXTW 
b42c c3 76 9e			jp macro_next 
b42f				endm 
# End of macro NEXTW
b42f			.TZERO: 
b42f				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b42f 2e				db WORD_SYS_CORE+26             
b430 76 b4			dw .LESS            
b432 03				db 2 + 1 
b433 .. 00			db "0=",0              
b436				endm 
# End of macro CWHEAD
b436			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b436				; TODO add floating point number detection 
b436					;v5 FORTH_DSP_VALUE 
b436					if DEBUG_FORTH_WORDS_KEY 
b436						DMARK "0=." 
b436 f5				push af  
b437 3a 4b b4			ld a, (.dmark)  
b43a 32 65 ee			ld (debug_mark),a  
b43d 3a 4c b4			ld a, (.dmark+1)  
b440 32 66 ee			ld (debug_mark+1),a  
b443 3a 4d b4			ld a, (.dmark+2)  
b446 32 67 ee			ld (debug_mark+2),a  
b449 18 03			jr .pastdmark  
b44b ..			.dmark: db "0=."  
b44e f1			.pastdmark: pop af  
b44f			endm  
# End of macro DMARK
b44f						CALLMONITOR 
b44f cd 6f ee			call debug_vector  
b452				endm  
# End of macro CALLMONITOR
b452					endif 
b452					FORTH_DSP 
b452 cd 50 9c			call macro_forth_dsp 
b455				endm 
# End of macro FORTH_DSP
b455 7e					ld a,(hl)	; get type of value on TOS 
b456 fe 02				cp DS_TYPE_INUM  
b458 28 00				jr z, .tz_inum 
b45a			 
b45a				if FORTH_ENABLE_FLOATMATH 
b45a					jr .tz_done 
b45a			 
b45a				endif 
b45a					 
b45a			 
b45a			.tz_inum: 
b45a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b45a cd 8a 9c			call macro_dsp_valuehl 
b45d				endm 
# End of macro FORTH_DSP_VALUEHL
b45d			 
b45d			;		push hl 
b45d			 
b45d					; destroy value TOS 
b45d			 
b45d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b45d cd 42 9d			call macro_forth_dsp_pop 
b460				endm 
# End of macro FORTH_DSP_POP
b460			 
b460			;		pop hl 
b460			 
b460 3e 00				ld a,0 
b462			 
b462 bd					cp l 
b463 20 08				jr nz, .tz_notzero 
b465			 
b465 bc					cp h 
b466			 
b466 20 05				jr nz, .tz_notzero 
b468			 
b468			 
b468 21 01 00				ld hl, FORTH_TRUE 
b46b 18 03				jr .tz_done 
b46d			 
b46d 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b470			 
b470					; push value back onto stack for another op etc 
b470			 
b470			.tz_done: 
b470 cd 85 9a				call forth_push_numhl 
b473			 
b473					NEXTW 
b473 c3 76 9e			jp macro_next 
b476				endm 
# End of macro NEXTW
b476			.LESS: 
b476				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b476 2f				db WORD_SYS_CORE+27             
b477 df b4			dw .GT            
b479 02				db 1 + 1 
b47a .. 00			db "<",0              
b47c				endm 
# End of macro CWHEAD
b47c			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b47c				; TODO add floating point number detection 
b47c					if DEBUG_FORTH_WORDS_KEY 
b47c						DMARK "LES" 
b47c f5				push af  
b47d 3a 91 b4			ld a, (.dmark)  
b480 32 65 ee			ld (debug_mark),a  
b483 3a 92 b4			ld a, (.dmark+1)  
b486 32 66 ee			ld (debug_mark+1),a  
b489 3a 93 b4			ld a, (.dmark+2)  
b48c 32 67 ee			ld (debug_mark+2),a  
b48f 18 03			jr .pastdmark  
b491 ..			.dmark: db "LES"  
b494 f1			.pastdmark: pop af  
b495			endm  
# End of macro DMARK
b495						CALLMONITOR 
b495 cd 6f ee			call debug_vector  
b498				endm  
# End of macro CALLMONITOR
b498					endif 
b498					FORTH_DSP 
b498 cd 50 9c			call macro_forth_dsp 
b49b				endm 
# End of macro FORTH_DSP
b49b					;v5 FORTH_DSP_VALUE 
b49b 7e					ld a,(hl)	; get type of value on TOS 
b49c fe 02				cp DS_TYPE_INUM  
b49e 28 00				jr z, .less_inum 
b4a0			 
b4a0				if FORTH_ENABLE_FLOATMATH 
b4a0					jr .less_done 
b4a0			 
b4a0				endif 
b4a0					 
b4a0			 
b4a0			.less_inum: 
b4a0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4a0 cd 8a 9c			call macro_dsp_valuehl 
b4a3				endm 
# End of macro FORTH_DSP_VALUEHL
b4a3			 
b4a3 e5					push hl  ; u2 
b4a4			 
b4a4					; destroy value TOS 
b4a4			 
b4a4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4a4 cd 42 9d			call macro_forth_dsp_pop 
b4a7				endm 
# End of macro FORTH_DSP_POP
b4a7			 
b4a7			 
b4a7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4a7 cd 8a 9c			call macro_dsp_valuehl 
b4aa				endm 
# End of macro FORTH_DSP_VALUEHL
b4aa			 
b4aa e5					push hl    ; u1 
b4ab			 
b4ab					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4ab cd 42 9d			call macro_forth_dsp_pop 
b4ae				endm 
# End of macro FORTH_DSP_POP
b4ae			 
b4ae			 
b4ae b7			 or a      ;clear carry flag 
b4af 01 00 00		 ld bc, FORTH_FALSE 
b4b2 e1			  pop hl    ; u1 
b4b3 d1			  pop de    ; u2 
b4b4 ed 52		  sbc hl,de 
b4b6 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b4b8			 
b4b8 01 01 00		 ld bc, FORTH_TRUE 
b4bb			.lscont:  
b4bb c5					push bc 
b4bc e1					pop hl 
b4bd			 
b4bd					if DEBUG_FORTH_WORDS 
b4bd						DMARK "LT1" 
b4bd f5				push af  
b4be 3a d2 b4			ld a, (.dmark)  
b4c1 32 65 ee			ld (debug_mark),a  
b4c4 3a d3 b4			ld a, (.dmark+1)  
b4c7 32 66 ee			ld (debug_mark+1),a  
b4ca 3a d4 b4			ld a, (.dmark+2)  
b4cd 32 67 ee			ld (debug_mark+2),a  
b4d0 18 03			jr .pastdmark  
b4d2 ..			.dmark: db "LT1"  
b4d5 f1			.pastdmark: pop af  
b4d6			endm  
# End of macro DMARK
b4d6						CALLMONITOR 
b4d6 cd 6f ee			call debug_vector  
b4d9				endm  
# End of macro CALLMONITOR
b4d9					endif 
b4d9 cd 85 9a				call forth_push_numhl 
b4dc			 
b4dc					NEXTW 
b4dc c3 76 9e			jp macro_next 
b4df				endm 
# End of macro NEXTW
b4df			.GT: 
b4df				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b4df 30				db WORD_SYS_CORE+28             
b4e0 48 b5			dw .EQUAL            
b4e2 02				db 1 + 1 
b4e3 .. 00			db ">",0              
b4e5				endm 
# End of macro CWHEAD
b4e5			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b4e5				; TODO add floating point number detection 
b4e5					if DEBUG_FORTH_WORDS_KEY 
b4e5						DMARK "GRT" 
b4e5 f5				push af  
b4e6 3a fa b4			ld a, (.dmark)  
b4e9 32 65 ee			ld (debug_mark),a  
b4ec 3a fb b4			ld a, (.dmark+1)  
b4ef 32 66 ee			ld (debug_mark+1),a  
b4f2 3a fc b4			ld a, (.dmark+2)  
b4f5 32 67 ee			ld (debug_mark+2),a  
b4f8 18 03			jr .pastdmark  
b4fa ..			.dmark: db "GRT"  
b4fd f1			.pastdmark: pop af  
b4fe			endm  
# End of macro DMARK
b4fe						CALLMONITOR 
b4fe cd 6f ee			call debug_vector  
b501				endm  
# End of macro CALLMONITOR
b501					endif 
b501					FORTH_DSP 
b501 cd 50 9c			call macro_forth_dsp 
b504				endm 
# End of macro FORTH_DSP
b504					;FORTH_DSP_VALUE 
b504 7e					ld a,(hl)	; get type of value on TOS 
b505 fe 02				cp DS_TYPE_INUM  
b507 28 00				jr z, .gt_inum 
b509			 
b509				if FORTH_ENABLE_FLOATMATH 
b509					jr .gt_done 
b509			 
b509				endif 
b509					 
b509			 
b509			.gt_inum: 
b509					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b509 cd 8a 9c			call macro_dsp_valuehl 
b50c				endm 
# End of macro FORTH_DSP_VALUEHL
b50c			 
b50c e5					push hl  ; u2 
b50d			 
b50d					; destroy value TOS 
b50d			 
b50d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b50d cd 42 9d			call macro_forth_dsp_pop 
b510				endm 
# End of macro FORTH_DSP_POP
b510			 
b510			 
b510					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b510 cd 8a 9c			call macro_dsp_valuehl 
b513				endm 
# End of macro FORTH_DSP_VALUEHL
b513			 
b513 e5					push hl    ; u1 
b514			 
b514					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b514 cd 42 9d			call macro_forth_dsp_pop 
b517				endm 
# End of macro FORTH_DSP_POP
b517			 
b517			 
b517 b7			 or a      ;clear carry flag 
b518 01 00 00		 ld bc, FORTH_FALSE 
b51b e1			  pop hl    ; u1 
b51c d1			  pop de    ; u2 
b51d ed 52		  sbc hl,de 
b51f 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b521			 
b521 01 01 00		 ld bc, FORTH_TRUE 
b524			.gtcont:  
b524 c5					push bc 
b525 e1					pop hl 
b526			 
b526					if DEBUG_FORTH_WORDS 
b526						DMARK "GT1" 
b526 f5				push af  
b527 3a 3b b5			ld a, (.dmark)  
b52a 32 65 ee			ld (debug_mark),a  
b52d 3a 3c b5			ld a, (.dmark+1)  
b530 32 66 ee			ld (debug_mark+1),a  
b533 3a 3d b5			ld a, (.dmark+2)  
b536 32 67 ee			ld (debug_mark+2),a  
b539 18 03			jr .pastdmark  
b53b ..			.dmark: db "GT1"  
b53e f1			.pastdmark: pop af  
b53f			endm  
# End of macro DMARK
b53f						CALLMONITOR 
b53f cd 6f ee			call debug_vector  
b542				endm  
# End of macro CALLMONITOR
b542					endif 
b542 cd 85 9a				call forth_push_numhl 
b545			 
b545					NEXTW 
b545 c3 76 9e			jp macro_next 
b548				endm 
# End of macro NEXTW
b548			.EQUAL: 
b548				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b548 31				db WORD_SYS_CORE+29             
b549 b3 b5			dw .ENDLOGIC            
b54b 02				db 1 + 1 
b54c .. 00			db "=",0              
b54e				endm 
# End of macro CWHEAD
b54e			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b54e				; TODO add floating point number detection 
b54e					if DEBUG_FORTH_WORDS_KEY 
b54e						DMARK "EQ." 
b54e f5				push af  
b54f 3a 63 b5			ld a, (.dmark)  
b552 32 65 ee			ld (debug_mark),a  
b555 3a 64 b5			ld a, (.dmark+1)  
b558 32 66 ee			ld (debug_mark+1),a  
b55b 3a 65 b5			ld a, (.dmark+2)  
b55e 32 67 ee			ld (debug_mark+2),a  
b561 18 03			jr .pastdmark  
b563 ..			.dmark: db "EQ."  
b566 f1			.pastdmark: pop af  
b567			endm  
# End of macro DMARK
b567						CALLMONITOR 
b567 cd 6f ee			call debug_vector  
b56a				endm  
# End of macro CALLMONITOR
b56a					endif 
b56a					FORTH_DSP 
b56a cd 50 9c			call macro_forth_dsp 
b56d				endm 
# End of macro FORTH_DSP
b56d					;v5 FORTH_DSP_VALUE 
b56d 7e					ld a,(hl)	; get type of value on TOS 
b56e fe 02				cp DS_TYPE_INUM  
b570 28 00				jr z, .eq_inum 
b572			 
b572				if FORTH_ENABLE_FLOATMATH 
b572					jr .eq_done 
b572			 
b572				endif 
b572					 
b572			 
b572			.eq_inum: 
b572					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b572 cd 8a 9c			call macro_dsp_valuehl 
b575				endm 
# End of macro FORTH_DSP_VALUEHL
b575			 
b575 e5					push hl 
b576			 
b576					; destroy value TOS 
b576			 
b576					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b576 cd 42 9d			call macro_forth_dsp_pop 
b579				endm 
# End of macro FORTH_DSP_POP
b579			 
b579			 
b579					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b579 cd 8a 9c			call macro_dsp_valuehl 
b57c				endm 
# End of macro FORTH_DSP_VALUEHL
b57c			 
b57c					; one value on hl get other one back 
b57c			 
b57c e5					push hl 
b57d			 
b57d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b57d cd 42 9d			call macro_forth_dsp_pop 
b580				endm 
# End of macro FORTH_DSP_POP
b580			 
b580 0e 00				ld c, FORTH_FALSE 
b582			 
b582 e1					pop hl 
b583 d1					pop de 
b584			 
b584 7b					ld a, e 
b585 bd					cp l 
b586			 
b586 20 06				jr nz, .eq_done 
b588			 
b588 7a					ld a, d 
b589 bc					cp h 
b58a			 
b58a 20 02				jr nz, .eq_done 
b58c			 
b58c 0e 01				ld c, FORTH_TRUE 
b58e					 
b58e			 
b58e			 
b58e			.eq_done: 
b58e			 
b58e					; TODO push value back onto stack for another op etc 
b58e			 
b58e 26 00				ld h, 0 
b590 69					ld l, c 
b591					if DEBUG_FORTH_WORDS 
b591						DMARK "EQ1" 
b591 f5				push af  
b592 3a a6 b5			ld a, (.dmark)  
b595 32 65 ee			ld (debug_mark),a  
b598 3a a7 b5			ld a, (.dmark+1)  
b59b 32 66 ee			ld (debug_mark+1),a  
b59e 3a a8 b5			ld a, (.dmark+2)  
b5a1 32 67 ee			ld (debug_mark+2),a  
b5a4 18 03			jr .pastdmark  
b5a6 ..			.dmark: db "EQ1"  
b5a9 f1			.pastdmark: pop af  
b5aa			endm  
# End of macro DMARK
b5aa						CALLMONITOR 
b5aa cd 6f ee			call debug_vector  
b5ad				endm  
# End of macro CALLMONITOR
b5ad					endif 
b5ad cd 85 9a				call forth_push_numhl 
b5b0			 
b5b0					NEXTW 
b5b0 c3 76 9e			jp macro_next 
b5b3				endm 
# End of macro NEXTW
b5b3			 
b5b3			 
b5b3			.ENDLOGIC: 
b5b3			; eof 
b5b3			 
b5b3			 
# End of file forth_words_logic.asm
b5b3			include "forth_words_maths.asm" 
b5b3			 
b5b3			; | ## Maths Words 
b5b3			 
b5b3			.PLUS:	 
b5b3				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b5b3 15				db WORD_SYS_CORE+1             
b5b4 11 b6			dw .NEG            
b5b6 02				db 1 + 1 
b5b7 .. 00			db "+",0              
b5b9				endm 
# End of macro CWHEAD
b5b9			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b5b9					if DEBUG_FORTH_WORDS_KEY 
b5b9						DMARK "PLU" 
b5b9 f5				push af  
b5ba 3a ce b5			ld a, (.dmark)  
b5bd 32 65 ee			ld (debug_mark),a  
b5c0 3a cf b5			ld a, (.dmark+1)  
b5c3 32 66 ee			ld (debug_mark+1),a  
b5c6 3a d0 b5			ld a, (.dmark+2)  
b5c9 32 67 ee			ld (debug_mark+2),a  
b5cc 18 03			jr .pastdmark  
b5ce ..			.dmark: db "PLU"  
b5d1 f1			.pastdmark: pop af  
b5d2			endm  
# End of macro DMARK
b5d2						CALLMONITOR 
b5d2 cd 6f ee			call debug_vector  
b5d5				endm  
# End of macro CALLMONITOR
b5d5					endif 
b5d5					; add top two values and push back result 
b5d5			 
b5d5					;for v5 FORTH_DSP_VALUE 
b5d5					FORTH_DSP 
b5d5 cd 50 9c			call macro_forth_dsp 
b5d8				endm 
# End of macro FORTH_DSP
b5d8 7e					ld a,(hl)	; get type of value on TOS 
b5d9 fe 02				cp DS_TYPE_INUM  
b5db 28 03				jr z, .dot_inum 
b5dd			 
b5dd					NEXTW 
b5dd c3 76 9e			jp macro_next 
b5e0				endm 
# End of macro NEXTW
b5e0			 
b5e0			; float maths 
b5e0			 
b5e0				if FORTH_ENABLE_FLOATMATH 
b5e0						inc hl      ; now at start of numeric as string 
b5e0			 
b5e0					if DEBUG_FORTH_MATHS 
b5e0						DMARK "ADD" 
b5e0				CALLMONITOR 
b5e0					endif 
b5e0			 
b5e0					;ld ix, hl 
b5e0					call CON 
b5e0			 
b5e0			 
b5e0					push hl 
b5e0					 
b5e0					 
b5e0			 
b5e0						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b5e0			 
b5e0					; get next number 
b5e0			 
b5e0						FORTH_DSP_VALUE 
b5e0			 
b5e0						inc hl      ; now at start of numeric as string 
b5e0			 
b5e0					;ld ix, hl 
b5e0					call CON 
b5e0			 
b5e0					push hl 
b5e0			 
b5e0			 
b5e0						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5e0			 
b5e0						; TODO do add 
b5e0			 
b5e0						call IADD 
b5e0			 
b5e0						; TODO get result back as ascii 
b5e0			 
b5e0						; TODO push result  
b5e0			 
b5e0			 
b5e0			 
b5e0						jr .dot_done 
b5e0				endif 
b5e0			 
b5e0			.dot_inum: 
b5e0			 
b5e0			 
b5e0					if DEBUG_FORTH_DOT 
b5e0						DMARK "+IT" 
b5e0 f5				push af  
b5e1 3a f5 b5			ld a, (.dmark)  
b5e4 32 65 ee			ld (debug_mark),a  
b5e7 3a f6 b5			ld a, (.dmark+1)  
b5ea 32 66 ee			ld (debug_mark+1),a  
b5ed 3a f7 b5			ld a, (.dmark+2)  
b5f0 32 67 ee			ld (debug_mark+2),a  
b5f3 18 03			jr .pastdmark  
b5f5 ..			.dmark: db "+IT"  
b5f8 f1			.pastdmark: pop af  
b5f9			endm  
# End of macro DMARK
b5f9				CALLMONITOR 
b5f9 cd 6f ee			call debug_vector  
b5fc				endm  
# End of macro CALLMONITOR
b5fc					endif 
b5fc			 
b5fc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5fc cd 8a 9c			call macro_dsp_valuehl 
b5ff				endm 
# End of macro FORTH_DSP_VALUEHL
b5ff			 
b5ff				; TODO add floating point number detection 
b5ff			 
b5ff e5					push hl 
b600			 
b600					; destroy value TOS 
b600			 
b600					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b600 cd 42 9d			call macro_forth_dsp_pop 
b603				endm 
# End of macro FORTH_DSP_POP
b603			 
b603			 
b603					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b603 cd 8a 9c			call macro_dsp_valuehl 
b606				endm 
# End of macro FORTH_DSP_VALUEHL
b606			 
b606					; one value on hl get other one back 
b606			 
b606 d1					pop de 
b607			 
b607					; do the add 
b607			 
b607 19					add hl,de 
b608			 
b608					; save it 
b608			 
b608			;		push hl	 
b608			 
b608					; 
b608			 
b608					; destroy value TOS 
b608			 
b608					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b608 cd 42 9d			call macro_forth_dsp_pop 
b60b				endm 
# End of macro FORTH_DSP_POP
b60b			 
b60b					; TODO push value back onto stack for another op etc 
b60b			 
b60b			;		pop hl 
b60b			 
b60b			.dot_done: 
b60b cd 85 9a				call forth_push_numhl 
b60e			 
b60e					NEXTW 
b60e c3 76 9e			jp macro_next 
b611				endm 
# End of macro NEXTW
b611			.NEG: 
b611			 
b611				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b611 17				db WORD_SYS_CORE+3             
b612 54 b6			dw .DIV            
b614 02				db 1 + 1 
b615 .. 00			db "-",0              
b617				endm 
# End of macro CWHEAD
b617			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b617					if DEBUG_FORTH_WORDS_KEY 
b617						DMARK "SUB" 
b617 f5				push af  
b618 3a 2c b6			ld a, (.dmark)  
b61b 32 65 ee			ld (debug_mark),a  
b61e 3a 2d b6			ld a, (.dmark+1)  
b621 32 66 ee			ld (debug_mark+1),a  
b624 3a 2e b6			ld a, (.dmark+2)  
b627 32 67 ee			ld (debug_mark+2),a  
b62a 18 03			jr .pastdmark  
b62c ..			.dmark: db "SUB"  
b62f f1			.pastdmark: pop af  
b630			endm  
# End of macro DMARK
b630						CALLMONITOR 
b630 cd 6f ee			call debug_vector  
b633				endm  
# End of macro CALLMONITOR
b633					endif 
b633			 
b633			 
b633				; TODO add floating point number detection 
b633					; v5 FORTH_DSP_VALUE 
b633					FORTH_DSP 
b633 cd 50 9c			call macro_forth_dsp 
b636				endm 
# End of macro FORTH_DSP
b636 7e					ld a,(hl)	; get type of value on TOS 
b637 fe 02				cp DS_TYPE_INUM  
b639 28 03				jr z, .neg_inum 
b63b			 
b63b					NEXTW 
b63b c3 76 9e			jp macro_next 
b63e				endm 
# End of macro NEXTW
b63e			 
b63e			; float maths 
b63e			 
b63e				if FORTH_ENABLE_FLOATMATH 
b63e					jr .neg_done 
b63e			 
b63e				endif 
b63e					 
b63e			 
b63e			.neg_inum: 
b63e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b63e cd 8a 9c			call macro_dsp_valuehl 
b641				endm 
# End of macro FORTH_DSP_VALUEHL
b641			 
b641 e5					push hl 
b642			 
b642					; destroy value TOS 
b642			 
b642					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b642 cd 42 9d			call macro_forth_dsp_pop 
b645				endm 
# End of macro FORTH_DSP_POP
b645			 
b645			 
b645					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b645 cd 8a 9c			call macro_dsp_valuehl 
b648				endm 
# End of macro FORTH_DSP_VALUEHL
b648			 
b648					; one value on hl get other one back 
b648			 
b648 d1					pop de 
b649			 
b649					; do the sub 
b649			;		ex de, hl 
b649			 
b649 ed 52				sbc hl,de 
b64b			 
b64b					; save it 
b64b			 
b64b			;		push hl	 
b64b			 
b64b					; 
b64b			 
b64b					; destroy value TOS 
b64b			 
b64b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b64b cd 42 9d			call macro_forth_dsp_pop 
b64e				endm 
# End of macro FORTH_DSP_POP
b64e			 
b64e					; TODO push value back onto stack for another op etc 
b64e			 
b64e			;		pop hl 
b64e			 
b64e cd 85 9a				call forth_push_numhl 
b651			.neg_done: 
b651			 
b651					NEXTW 
b651 c3 76 9e			jp macro_next 
b654				endm 
# End of macro NEXTW
b654			.DIV: 
b654				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b654 18				db WORD_SYS_CORE+4             
b655 a1 b6			dw .MUL            
b657 02				db 1 + 1 
b658 .. 00			db "/",0              
b65a				endm 
# End of macro CWHEAD
b65a			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b65a					if DEBUG_FORTH_WORDS_KEY 
b65a						DMARK "DIV" 
b65a f5				push af  
b65b 3a 6f b6			ld a, (.dmark)  
b65e 32 65 ee			ld (debug_mark),a  
b661 3a 70 b6			ld a, (.dmark+1)  
b664 32 66 ee			ld (debug_mark+1),a  
b667 3a 71 b6			ld a, (.dmark+2)  
b66a 32 67 ee			ld (debug_mark+2),a  
b66d 18 03			jr .pastdmark  
b66f ..			.dmark: db "DIV"  
b672 f1			.pastdmark: pop af  
b673			endm  
# End of macro DMARK
b673						CALLMONITOR 
b673 cd 6f ee			call debug_vector  
b676				endm  
# End of macro CALLMONITOR
b676					endif 
b676				; TODO add floating point number detection 
b676					; v5 FORTH_DSP_VALUE 
b676					FORTH_DSP 
b676 cd 50 9c			call macro_forth_dsp 
b679				endm 
# End of macro FORTH_DSP
b679 7e					ld a,(hl)	; get type of value on TOS 
b67a fe 02				cp DS_TYPE_INUM  
b67c 28 03				jr z, .div_inum 
b67e			 
b67e				if FORTH_ENABLE_FLOATMATH 
b67e					jr .div_done 
b67e			 
b67e				endif 
b67e					NEXTW 
b67e c3 76 9e			jp macro_next 
b681				endm 
# End of macro NEXTW
b681			.div_inum: 
b681			 
b681					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b681 cd 8a 9c			call macro_dsp_valuehl 
b684				endm 
# End of macro FORTH_DSP_VALUEHL
b684			 
b684 e5					push hl    ; to go to bc 
b685			 
b685					; destroy value TOS 
b685			 
b685					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b685 cd 42 9d			call macro_forth_dsp_pop 
b688				endm 
# End of macro FORTH_DSP_POP
b688			 
b688			 
b688					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b688 cd 8a 9c			call macro_dsp_valuehl 
b68b				endm 
# End of macro FORTH_DSP_VALUEHL
b68b			 
b68b					; hl to go to de 
b68b			 
b68b e5					push hl 
b68c			 
b68c c1					pop bc 
b68d d1					pop de		 
b68e			 
b68e			 
b68e					if DEBUG_FORTH_MATHS 
b68e						DMARK "DIV" 
b68e				CALLMONITOR 
b68e					endif 
b68e					; one value on hl but move to a get other one back 
b68e			 
b68e			        
b68e cd 47 8c			call Div16 
b691			 
b691			;	push af	 
b691 e5				push hl 
b692 c5				push bc 
b693			 
b693					if DEBUG_FORTH_MATHS 
b693						DMARK "DI1" 
b693				CALLMONITOR 
b693					endif 
b693			 
b693					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b693 cd 42 9d			call macro_forth_dsp_pop 
b696				endm 
# End of macro FORTH_DSP_POP
b696			 
b696			 
b696			 
b696 e1					pop hl    ; result 
b697			 
b697 cd 85 9a				call forth_push_numhl 
b69a			 
b69a e1					pop hl    ; reminder 
b69b			;		ld h,0 
b69b			;		ld l,d 
b69b			 
b69b cd 85 9a				call forth_push_numhl 
b69e			.div_done: 
b69e					NEXTW 
b69e c3 76 9e			jp macro_next 
b6a1				endm 
# End of macro NEXTW
b6a1			.MUL: 
b6a1				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b6a1 19				db WORD_SYS_CORE+5             
b6a2 e6 b6			dw .MIN            
b6a4 02				db 1 + 1 
b6a5 .. 00			db "*",0              
b6a7				endm 
# End of macro CWHEAD
b6a7			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b6a7				; TODO add floating point number detection 
b6a7					if DEBUG_FORTH_WORDS_KEY 
b6a7						DMARK "MUL" 
b6a7 f5				push af  
b6a8 3a bc b6			ld a, (.dmark)  
b6ab 32 65 ee			ld (debug_mark),a  
b6ae 3a bd b6			ld a, (.dmark+1)  
b6b1 32 66 ee			ld (debug_mark+1),a  
b6b4 3a be b6			ld a, (.dmark+2)  
b6b7 32 67 ee			ld (debug_mark+2),a  
b6ba 18 03			jr .pastdmark  
b6bc ..			.dmark: db "MUL"  
b6bf f1			.pastdmark: pop af  
b6c0			endm  
# End of macro DMARK
b6c0						CALLMONITOR 
b6c0 cd 6f ee			call debug_vector  
b6c3				endm  
# End of macro CALLMONITOR
b6c3					endif 
b6c3					FORTH_DSP 
b6c3 cd 50 9c			call macro_forth_dsp 
b6c6				endm 
# End of macro FORTH_DSP
b6c6					; v5 FORTH_DSP_VALUE 
b6c6 7e					ld a,(hl)	; get type of value on TOS 
b6c7 fe 02				cp DS_TYPE_INUM  
b6c9 28 03				jr z, .mul_inum 
b6cb			 
b6cb				if FORTH_ENABLE_FLOATMATH 
b6cb					jr .mul_done 
b6cb			 
b6cb				endif 
b6cb			 
b6cb					NEXTW 
b6cb c3 76 9e			jp macro_next 
b6ce				endm 
# End of macro NEXTW
b6ce			.mul_inum:	 
b6ce			 
b6ce					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6ce cd 8a 9c			call macro_dsp_valuehl 
b6d1				endm 
# End of macro FORTH_DSP_VALUEHL
b6d1			 
b6d1 e5					push hl 
b6d2			 
b6d2					; destroy value TOS 
b6d2			 
b6d2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6d2 cd 42 9d			call macro_forth_dsp_pop 
b6d5				endm 
# End of macro FORTH_DSP_POP
b6d5			 
b6d5			 
b6d5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6d5 cd 8a 9c			call macro_dsp_valuehl 
b6d8				endm 
# End of macro FORTH_DSP_VALUEHL
b6d8			 
b6d8					; one value on hl but move to a get other one back 
b6d8			 
b6d8 7d					ld a, l 
b6d9			 
b6d9 d1					pop de 
b6da			 
b6da					; do the mull 
b6da			;		ex de, hl 
b6da			 
b6da cd 6d 8c				call Mult16 
b6dd					; save it 
b6dd			 
b6dd			;		push hl	 
b6dd			 
b6dd					; 
b6dd			 
b6dd					; destroy value TOS 
b6dd			 
b6dd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6dd cd 42 9d			call macro_forth_dsp_pop 
b6e0				endm 
# End of macro FORTH_DSP_POP
b6e0			 
b6e0					; TODO push value back onto stack for another op etc 
b6e0			 
b6e0			;		pop hl 
b6e0			 
b6e0 cd 85 9a				call forth_push_numhl 
b6e3			 
b6e3			.mul_done: 
b6e3					NEXTW 
b6e3 c3 76 9e			jp macro_next 
b6e6				endm 
# End of macro NEXTW
b6e6			 
b6e6			 
b6e6			 
b6e6			 
b6e6			.MIN: 
b6e6				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b6e6 49				db WORD_SYS_CORE+53             
b6e7 67 b7			dw .MAX            
b6e9 04				db 3 + 1 
b6ea .. 00			db "MIN",0              
b6ee				endm 
# End of macro CWHEAD
b6ee			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b6ee					if DEBUG_FORTH_WORDS_KEY 
b6ee						DMARK "MIN" 
b6ee f5				push af  
b6ef 3a 03 b7			ld a, (.dmark)  
b6f2 32 65 ee			ld (debug_mark),a  
b6f5 3a 04 b7			ld a, (.dmark+1)  
b6f8 32 66 ee			ld (debug_mark+1),a  
b6fb 3a 05 b7			ld a, (.dmark+2)  
b6fe 32 67 ee			ld (debug_mark+2),a  
b701 18 03			jr .pastdmark  
b703 ..			.dmark: db "MIN"  
b706 f1			.pastdmark: pop af  
b707			endm  
# End of macro DMARK
b707						CALLMONITOR 
b707 cd 6f ee			call debug_vector  
b70a				endm  
# End of macro CALLMONITOR
b70a					endif 
b70a					; get u2 
b70a			 
b70a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b70a cd 8a 9c			call macro_dsp_valuehl 
b70d				endm 
# End of macro FORTH_DSP_VALUEHL
b70d			 
b70d e5					push hl   ; u2 
b70e			 
b70e					; destroy value TOS 
b70e			 
b70e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b70e cd 42 9d			call macro_forth_dsp_pop 
b711				endm 
# End of macro FORTH_DSP_POP
b711			 
b711					; get u1 
b711			 
b711					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b711 cd 8a 9c			call macro_dsp_valuehl 
b714				endm 
# End of macro FORTH_DSP_VALUEHL
b714			 
b714 e5					push hl  ; u1 
b715			 
b715					; destroy value TOS 
b715			 
b715					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b715 cd 42 9d			call macro_forth_dsp_pop 
b718				endm 
# End of macro FORTH_DSP_POP
b718			 
b718 b7			 or a      ;clear carry flag 
b719 e1			  pop hl    ; u1 
b71a d1			  pop de    ; u2 
b71b e5				push hl   ; saved in case hl is lowest 
b71c ed 52		  sbc hl,de 
b71e 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b720			 
b720 e1				pop hl 
b721					if DEBUG_FORTH_WORDS 
b721						DMARK "MIN" 
b721 f5				push af  
b722 3a 36 b7			ld a, (.dmark)  
b725 32 65 ee			ld (debug_mark),a  
b728 3a 37 b7			ld a, (.dmark+1)  
b72b 32 66 ee			ld (debug_mark+1),a  
b72e 3a 38 b7			ld a, (.dmark+2)  
b731 32 67 ee			ld (debug_mark+2),a  
b734 18 03			jr .pastdmark  
b736 ..			.dmark: db "MIN"  
b739 f1			.pastdmark: pop af  
b73a			endm  
# End of macro DMARK
b73a						CALLMONITOR 
b73a cd 6f ee			call debug_vector  
b73d				endm  
# End of macro CALLMONITOR
b73d					endif 
b73d cd 85 9a				call forth_push_numhl 
b740			 
b740				       NEXTW 
b740 c3 76 9e			jp macro_next 
b743				endm 
# End of macro NEXTW
b743			 
b743			.mincont:  
b743 c1				pop bc   ; tidy up 
b744 eb				ex de , hl  
b745					if DEBUG_FORTH_WORDS 
b745						DMARK "MI1" 
b745 f5				push af  
b746 3a 5a b7			ld a, (.dmark)  
b749 32 65 ee			ld (debug_mark),a  
b74c 3a 5b b7			ld a, (.dmark+1)  
b74f 32 66 ee			ld (debug_mark+1),a  
b752 3a 5c b7			ld a, (.dmark+2)  
b755 32 67 ee			ld (debug_mark+2),a  
b758 18 03			jr .pastdmark  
b75a ..			.dmark: db "MI1"  
b75d f1			.pastdmark: pop af  
b75e			endm  
# End of macro DMARK
b75e						CALLMONITOR 
b75e cd 6f ee			call debug_vector  
b761				endm  
# End of macro CALLMONITOR
b761					endif 
b761 cd 85 9a				call forth_push_numhl 
b764			 
b764				       NEXTW 
b764 c3 76 9e			jp macro_next 
b767				endm 
# End of macro NEXTW
b767			.MAX: 
b767				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b767 4a				db WORD_SYS_CORE+54             
b768 e8 b7			dw .RND16            
b76a 04				db 3 + 1 
b76b .. 00			db "MAX",0              
b76f				endm 
# End of macro CWHEAD
b76f			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b76f					if DEBUG_FORTH_WORDS_KEY 
b76f						DMARK "MAX" 
b76f f5				push af  
b770 3a 84 b7			ld a, (.dmark)  
b773 32 65 ee			ld (debug_mark),a  
b776 3a 85 b7			ld a, (.dmark+1)  
b779 32 66 ee			ld (debug_mark+1),a  
b77c 3a 86 b7			ld a, (.dmark+2)  
b77f 32 67 ee			ld (debug_mark+2),a  
b782 18 03			jr .pastdmark  
b784 ..			.dmark: db "MAX"  
b787 f1			.pastdmark: pop af  
b788			endm  
# End of macro DMARK
b788						CALLMONITOR 
b788 cd 6f ee			call debug_vector  
b78b				endm  
# End of macro CALLMONITOR
b78b					endif 
b78b					; get u2 
b78b			 
b78b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b78b cd 8a 9c			call macro_dsp_valuehl 
b78e				endm 
# End of macro FORTH_DSP_VALUEHL
b78e			 
b78e e5					push hl   ; u2 
b78f			 
b78f					; destroy value TOS 
b78f			 
b78f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b78f cd 42 9d			call macro_forth_dsp_pop 
b792				endm 
# End of macro FORTH_DSP_POP
b792			 
b792					; get u1 
b792			 
b792					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b792 cd 8a 9c			call macro_dsp_valuehl 
b795				endm 
# End of macro FORTH_DSP_VALUEHL
b795			 
b795 e5					push hl  ; u1 
b796			 
b796					; destroy value TOS 
b796			 
b796					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b796 cd 42 9d			call macro_forth_dsp_pop 
b799				endm 
# End of macro FORTH_DSP_POP
b799			 
b799 b7			 or a      ;clear carry flag 
b79a e1			  pop hl    ; u1 
b79b d1			  pop de    ; u2 
b79c e5				push hl   ; saved in case hl is lowest 
b79d ed 52		  sbc hl,de 
b79f 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b7a1			 
b7a1 e1				pop hl 
b7a2					if DEBUG_FORTH_WORDS 
b7a2						DMARK "MAX" 
b7a2 f5				push af  
b7a3 3a b7 b7			ld a, (.dmark)  
b7a6 32 65 ee			ld (debug_mark),a  
b7a9 3a b8 b7			ld a, (.dmark+1)  
b7ac 32 66 ee			ld (debug_mark+1),a  
b7af 3a b9 b7			ld a, (.dmark+2)  
b7b2 32 67 ee			ld (debug_mark+2),a  
b7b5 18 03			jr .pastdmark  
b7b7 ..			.dmark: db "MAX"  
b7ba f1			.pastdmark: pop af  
b7bb			endm  
# End of macro DMARK
b7bb						CALLMONITOR 
b7bb cd 6f ee			call debug_vector  
b7be				endm  
# End of macro CALLMONITOR
b7be					endif 
b7be cd 85 9a				call forth_push_numhl 
b7c1			 
b7c1				       NEXTW 
b7c1 c3 76 9e			jp macro_next 
b7c4				endm 
# End of macro NEXTW
b7c4			 
b7c4			.maxcont:  
b7c4 c1				pop bc   ; tidy up 
b7c5 eb				ex de , hl  
b7c6					if DEBUG_FORTH_WORDS 
b7c6						DMARK "MA1" 
b7c6 f5				push af  
b7c7 3a db b7			ld a, (.dmark)  
b7ca 32 65 ee			ld (debug_mark),a  
b7cd 3a dc b7			ld a, (.dmark+1)  
b7d0 32 66 ee			ld (debug_mark+1),a  
b7d3 3a dd b7			ld a, (.dmark+2)  
b7d6 32 67 ee			ld (debug_mark+2),a  
b7d9 18 03			jr .pastdmark  
b7db ..			.dmark: db "MA1"  
b7de f1			.pastdmark: pop af  
b7df			endm  
# End of macro DMARK
b7df						CALLMONITOR 
b7df cd 6f ee			call debug_vector  
b7e2				endm  
# End of macro CALLMONITOR
b7e2					endif 
b7e2 cd 85 9a				call forth_push_numhl 
b7e5				       NEXTW 
b7e5 c3 76 9e			jp macro_next 
b7e8				endm 
# End of macro NEXTW
b7e8			 
b7e8			.RND16: 
b7e8				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b7e8 4e				db WORD_SYS_CORE+58             
b7e9 17 b8			dw .RND8            
b7eb 06				db 5 + 1 
b7ec .. 00			db "RND16",0              
b7f2				endm 
# End of macro CWHEAD
b7f2			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b7f2					if DEBUG_FORTH_WORDS_KEY 
b7f2						DMARK "R16" 
b7f2 f5				push af  
b7f3 3a 07 b8			ld a, (.dmark)  
b7f6 32 65 ee			ld (debug_mark),a  
b7f9 3a 08 b8			ld a, (.dmark+1)  
b7fc 32 66 ee			ld (debug_mark+1),a  
b7ff 3a 09 b8			ld a, (.dmark+2)  
b802 32 67 ee			ld (debug_mark+2),a  
b805 18 03			jr .pastdmark  
b807 ..			.dmark: db "R16"  
b80a f1			.pastdmark: pop af  
b80b			endm  
# End of macro DMARK
b80b						CALLMONITOR 
b80b cd 6f ee			call debug_vector  
b80e				endm  
# End of macro CALLMONITOR
b80e					endif 
b80e cd 11 8c				call prng16  
b811 cd 85 9a				call forth_push_numhl 
b814				       NEXTW 
b814 c3 76 9e			jp macro_next 
b817				endm 
# End of macro NEXTW
b817			.RND8: 
b817				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b817 60				db WORD_SYS_CORE+76             
b818 4c b8			dw .RND            
b81a 05				db 4 + 1 
b81b .. 00			db "RND8",0              
b820				endm 
# End of macro CWHEAD
b820			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b820					if DEBUG_FORTH_WORDS_KEY 
b820						DMARK "RN8" 
b820 f5				push af  
b821 3a 35 b8			ld a, (.dmark)  
b824 32 65 ee			ld (debug_mark),a  
b827 3a 36 b8			ld a, (.dmark+1)  
b82a 32 66 ee			ld (debug_mark+1),a  
b82d 3a 37 b8			ld a, (.dmark+2)  
b830 32 67 ee			ld (debug_mark+2),a  
b833 18 03			jr .pastdmark  
b835 ..			.dmark: db "RN8"  
b838 f1			.pastdmark: pop af  
b839			endm  
# End of macro DMARK
b839						CALLMONITOR 
b839 cd 6f ee			call debug_vector  
b83c				endm  
# End of macro CALLMONITOR
b83c					endif 
b83c 2a a3 eb				ld hl,(xrandc) 
b83f 23					inc hl 
b840 cd 2b 8c				call xrnd 
b843 6f					ld l,a	 
b844 26 00				ld h,0 
b846 cd 85 9a				call forth_push_numhl 
b849				       NEXTW 
b849 c3 76 9e			jp macro_next 
b84c				endm 
# End of macro NEXTW
b84c			.RND: 
b84c				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b84c 60				db WORD_SYS_CORE+76             
b84d 52 b9			dw .ENDMATHS            
b84f 04				db 3 + 1 
b850 .. 00			db "RND",0              
b854				endm 
# End of macro CWHEAD
b854			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b854			 
b854					if DEBUG_FORTH_WORDS_KEY 
b854						DMARK "RND" 
b854 f5				push af  
b855 3a 69 b8			ld a, (.dmark)  
b858 32 65 ee			ld (debug_mark),a  
b85b 3a 6a b8			ld a, (.dmark+1)  
b85e 32 66 ee			ld (debug_mark+1),a  
b861 3a 6b b8			ld a, (.dmark+2)  
b864 32 67 ee			ld (debug_mark+2),a  
b867 18 03			jr .pastdmark  
b869 ..			.dmark: db "RND"  
b86c f1			.pastdmark: pop af  
b86d			endm  
# End of macro DMARK
b86d						CALLMONITOR 
b86d cd 6f ee			call debug_vector  
b870				endm  
# End of macro CALLMONITOR
b870					endif 
b870					 
b870					FORTH_DSP_VALUEHL    ; upper range 
b870 cd 8a 9c			call macro_dsp_valuehl 
b873				endm 
# End of macro FORTH_DSP_VALUEHL
b873			 
b873 22 a7 eb				ld (LFSRSeed), hl	 
b876			 
b876					if DEBUG_FORTH_WORDS 
b876						DMARK "RN1" 
b876 f5				push af  
b877 3a 8b b8			ld a, (.dmark)  
b87a 32 65 ee			ld (debug_mark),a  
b87d 3a 8c b8			ld a, (.dmark+1)  
b880 32 66 ee			ld (debug_mark+1),a  
b883 3a 8d b8			ld a, (.dmark+2)  
b886 32 67 ee			ld (debug_mark+2),a  
b889 18 03			jr .pastdmark  
b88b ..			.dmark: db "RN1"  
b88e f1			.pastdmark: pop af  
b88f			endm  
# End of macro DMARK
b88f						CALLMONITOR 
b88f cd 6f ee			call debug_vector  
b892				endm  
# End of macro CALLMONITOR
b892					endif 
b892					FORTH_DSP_POP 
b892 cd 42 9d			call macro_forth_dsp_pop 
b895				endm 
# End of macro FORTH_DSP_POP
b895			 
b895					FORTH_DSP_VALUEHL    ; low range 
b895 cd 8a 9c			call macro_dsp_valuehl 
b898				endm 
# End of macro FORTH_DSP_VALUEHL
b898			 
b898					if DEBUG_FORTH_WORDS 
b898						DMARK "RN2" 
b898 f5				push af  
b899 3a ad b8			ld a, (.dmark)  
b89c 32 65 ee			ld (debug_mark),a  
b89f 3a ae b8			ld a, (.dmark+1)  
b8a2 32 66 ee			ld (debug_mark+1),a  
b8a5 3a af b8			ld a, (.dmark+2)  
b8a8 32 67 ee			ld (debug_mark+2),a  
b8ab 18 03			jr .pastdmark  
b8ad ..			.dmark: db "RN2"  
b8b0 f1			.pastdmark: pop af  
b8b1			endm  
# End of macro DMARK
b8b1						CALLMONITOR 
b8b1 cd 6f ee			call debug_vector  
b8b4				endm  
# End of macro CALLMONITOR
b8b4					endif 
b8b4 22 a9 eb				ld (LFSRSeed+2), hl 
b8b7			 
b8b7					FORTH_DSP_POP 
b8b7 cd 42 9d			call macro_forth_dsp_pop 
b8ba				endm 
# End of macro FORTH_DSP_POP
b8ba			 
b8ba e5					push hl 
b8bb			 
b8bb e1			.inrange:	pop hl 
b8bc cd 11 8c				call prng16  
b8bf					if DEBUG_FORTH_WORDS 
b8bf						DMARK "RN3" 
b8bf f5				push af  
b8c0 3a d4 b8			ld a, (.dmark)  
b8c3 32 65 ee			ld (debug_mark),a  
b8c6 3a d5 b8			ld a, (.dmark+1)  
b8c9 32 66 ee			ld (debug_mark+1),a  
b8cc 3a d6 b8			ld a, (.dmark+2)  
b8cf 32 67 ee			ld (debug_mark+2),a  
b8d2 18 03			jr .pastdmark  
b8d4 ..			.dmark: db "RN3"  
b8d7 f1			.pastdmark: pop af  
b8d8			endm  
# End of macro DMARK
b8d8						CALLMONITOR 
b8d8 cd 6f ee			call debug_vector  
b8db				endm  
# End of macro CALLMONITOR
b8db					endif 
b8db					 
b8db					; if the range is 8bit knock out the high byte 
b8db			 
b8db ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
b8df			 
b8df 3e 00				ld a, 0 
b8e1 ba					cp d  
b8e2 20 1e				jr nz, .hirange 
b8e4 26 00				ld h, 0   ; knock it down to 8bit 
b8e6			 
b8e6					if DEBUG_FORTH_WORDS 
b8e6						DMARK "RNk" 
b8e6 f5				push af  
b8e7 3a fb b8			ld a, (.dmark)  
b8ea 32 65 ee			ld (debug_mark),a  
b8ed 3a fc b8			ld a, (.dmark+1)  
b8f0 32 66 ee			ld (debug_mark+1),a  
b8f3 3a fd b8			ld a, (.dmark+2)  
b8f6 32 67 ee			ld (debug_mark+2),a  
b8f9 18 03			jr .pastdmark  
b8fb ..			.dmark: db "RNk"  
b8fe f1			.pastdmark: pop af  
b8ff			endm  
# End of macro DMARK
b8ff						CALLMONITOR 
b8ff cd 6f ee			call debug_vector  
b902				endm  
# End of macro CALLMONITOR
b902					endif 
b902			.hirange:   
b902 e5					push hl  
b903 b7					or a  
b904 ed 52		                sbc hl, de 
b906			 
b906					;call cmp16 
b906			 
b906 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b908 e1					pop hl 
b909 e5					push hl 
b90a			 
b90a					if DEBUG_FORTH_WORDS 
b90a						DMARK "RN4" 
b90a f5				push af  
b90b 3a 1f b9			ld a, (.dmark)  
b90e 32 65 ee			ld (debug_mark),a  
b911 3a 20 b9			ld a, (.dmark+1)  
b914 32 66 ee			ld (debug_mark+1),a  
b917 3a 21 b9			ld a, (.dmark+2)  
b91a 32 67 ee			ld (debug_mark+2),a  
b91d 18 03			jr .pastdmark  
b91f ..			.dmark: db "RN4"  
b922 f1			.pastdmark: pop af  
b923			endm  
# End of macro DMARK
b923						CALLMONITOR 
b923 cd 6f ee			call debug_vector  
b926				endm  
# End of macro CALLMONITOR
b926					endif 
b926 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
b92a					;call cmp16 
b92a				 
b92a b7					or a  
b92b ed 52		                sbc hl, de 
b92d 38 8c				jr c, .inrange 
b92f			 
b92f e1					pop hl 
b930					 
b930					if DEBUG_FORTH_WORDS 
b930						DMARK "RNd" 
b930 f5				push af  
b931 3a 45 b9			ld a, (.dmark)  
b934 32 65 ee			ld (debug_mark),a  
b937 3a 46 b9			ld a, (.dmark+1)  
b93a 32 66 ee			ld (debug_mark+1),a  
b93d 3a 47 b9			ld a, (.dmark+2)  
b940 32 67 ee			ld (debug_mark+2),a  
b943 18 03			jr .pastdmark  
b945 ..			.dmark: db "RNd"  
b948 f1			.pastdmark: pop af  
b949			endm  
# End of macro DMARK
b949						CALLMONITOR 
b949 cd 6f ee			call debug_vector  
b94c				endm  
# End of macro CALLMONITOR
b94c					endif 
b94c			 
b94c			 
b94c cd 85 9a				call forth_push_numhl 
b94f				       NEXTW 
b94f c3 76 9e			jp macro_next 
b952				endm 
# End of macro NEXTW
b952			 
b952			.ENDMATHS: 
b952			 
b952			; eof 
b952			 
# End of file forth_words_maths.asm
b952			include "forth_words_display.asm" 
b952			 
b952			; | ## Display Words 
b952			 
b952			.ACT: 
b952			 
b952				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
b952 62				db WORD_SYS_CORE+78             
b953 9e b9			dw .INFO            
b955 07				db 6 + 1 
b956 .. 00			db "ACTIVE",0              
b95d				endm 
# End of macro CWHEAD
b95d			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
b95d			;  
b95d			; | | To display a pulsing activity indicator in a processing loop do this... 
b95d			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
b95d			 
b95d					if DEBUG_FORTH_WORDS_KEY 
b95d						DMARK "ACT" 
b95d f5				push af  
b95e 3a 72 b9			ld a, (.dmark)  
b961 32 65 ee			ld (debug_mark),a  
b964 3a 73 b9			ld a, (.dmark+1)  
b967 32 66 ee			ld (debug_mark+1),a  
b96a 3a 74 b9			ld a, (.dmark+2)  
b96d 32 67 ee			ld (debug_mark+2),a  
b970 18 03			jr .pastdmark  
b972 ..			.dmark: db "ACT"  
b975 f1			.pastdmark: pop af  
b976			endm  
# End of macro DMARK
b976						CALLMONITOR 
b976 cd 6f ee			call debug_vector  
b979				endm  
# End of macro CALLMONITOR
b979					endif 
b979 cd 14 8a				call active 
b97c					if DEBUG_FORTH_WORDS 
b97c						DMARK "ACp" 
b97c f5				push af  
b97d 3a 91 b9			ld a, (.dmark)  
b980 32 65 ee			ld (debug_mark),a  
b983 3a 92 b9			ld a, (.dmark+1)  
b986 32 66 ee			ld (debug_mark+1),a  
b989 3a 93 b9			ld a, (.dmark+2)  
b98c 32 67 ee			ld (debug_mark+2),a  
b98f 18 03			jr .pastdmark  
b991 ..			.dmark: db "ACp"  
b994 f1			.pastdmark: pop af  
b995			endm  
# End of macro DMARK
b995						CALLMONITOR 
b995 cd 6f ee			call debug_vector  
b998				endm  
# End of macro CALLMONITOR
b998					endif 
b998 cd f3 9a				call forth_push_str 
b99b			 
b99b					NEXTW 
b99b c3 76 9e			jp macro_next 
b99e				endm 
# End of macro NEXTW
b99e			.INFO: 
b99e			 
b99e				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
b99e 62				db WORD_SYS_CORE+78             
b99f bb b9			dw .ATP            
b9a1 05				db 4 + 1 
b9a2 .. 00			db "INFO",0              
b9a7				endm 
# End of macro CWHEAD
b9a7			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
b9a7					FORTH_DSP_VALUEHL 
b9a7 cd 8a 9c			call macro_dsp_valuehl 
b9aa				endm 
# End of macro FORTH_DSP_VALUEHL
b9aa			 
b9aa					FORTH_DSP_POP 
b9aa cd 42 9d			call macro_forth_dsp_pop 
b9ad				endm 
# End of macro FORTH_DSP_POP
b9ad			 
b9ad e5					push hl 
b9ae			 
b9ae					FORTH_DSP_VALUEHL 
b9ae cd 8a 9c			call macro_dsp_valuehl 
b9b1				endm 
# End of macro FORTH_DSP_VALUEHL
b9b1			 
b9b1					FORTH_DSP_POP 
b9b1 cd 42 9d			call macro_forth_dsp_pop 
b9b4				endm 
# End of macro FORTH_DSP_POP
b9b4			 
b9b4 d1					pop de 
b9b5			 
b9b5 cd 4e 8a				call info_panel 
b9b8			 
b9b8			 
b9b8					NEXTW 
b9b8 c3 76 9e			jp macro_next 
b9bb				endm 
# End of macro NEXTW
b9bb			.ATP: 
b9bb				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
b9bb 62				db WORD_SYS_CORE+78             
b9bc 32 ba			dw .FB            
b9be 04				db 3 + 1 
b9bf .. 00			db "AT?",0              
b9c3				endm 
# End of macro CWHEAD
b9c3			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
b9c3					if DEBUG_FORTH_WORDS_KEY 
b9c3						DMARK "AT?" 
b9c3 f5				push af  
b9c4 3a d8 b9			ld a, (.dmark)  
b9c7 32 65 ee			ld (debug_mark),a  
b9ca 3a d9 b9			ld a, (.dmark+1)  
b9cd 32 66 ee			ld (debug_mark+1),a  
b9d0 3a da b9			ld a, (.dmark+2)  
b9d3 32 67 ee			ld (debug_mark+2),a  
b9d6 18 03			jr .pastdmark  
b9d8 ..			.dmark: db "AT?"  
b9db f1			.pastdmark: pop af  
b9dc			endm  
# End of macro DMARK
b9dc						CALLMONITOR 
b9dc cd 6f ee			call debug_vector  
b9df				endm  
# End of macro CALLMONITOR
b9df					endif 
b9df 3a 58 ea				ld a, (f_cursor_ptr) 
b9e2			 
b9e2			if DEBUG_FORTH_WORDS 
b9e2				DMARK "AT?" 
b9e2 f5				push af  
b9e3 3a f7 b9			ld a, (.dmark)  
b9e6 32 65 ee			ld (debug_mark),a  
b9e9 3a f8 b9			ld a, (.dmark+1)  
b9ec 32 66 ee			ld (debug_mark+1),a  
b9ef 3a f9 b9			ld a, (.dmark+2)  
b9f2 32 67 ee			ld (debug_mark+2),a  
b9f5 18 03			jr .pastdmark  
b9f7 ..			.dmark: db "AT?"  
b9fa f1			.pastdmark: pop af  
b9fb			endm  
# End of macro DMARK
b9fb				CALLMONITOR 
b9fb cd 6f ee			call debug_vector  
b9fe				endm  
# End of macro CALLMONITOR
b9fe			endif	 
b9fe					; count the number of rows 
b9fe			 
b9fe 06 00				ld b, 0 
ba00 4f			.atpr:		ld c, a    ; save in case we go below zero 
ba01 d6 28				sub display_cols 
ba03 f2 09 ba				jp p, .atprunder 
ba06 04					inc b 
ba07 18 f7				jr .atpr 
ba09			.atprunder:	 
ba09			if DEBUG_FORTH_WORDS 
ba09				DMARK "A?2" 
ba09 f5				push af  
ba0a 3a 1e ba			ld a, (.dmark)  
ba0d 32 65 ee			ld (debug_mark),a  
ba10 3a 1f ba			ld a, (.dmark+1)  
ba13 32 66 ee			ld (debug_mark+1),a  
ba16 3a 20 ba			ld a, (.dmark+2)  
ba19 32 67 ee			ld (debug_mark+2),a  
ba1c 18 03			jr .pastdmark  
ba1e ..			.dmark: db "A?2"  
ba21 f1			.pastdmark: pop af  
ba22			endm  
# End of macro DMARK
ba22				CALLMONITOR 
ba22 cd 6f ee			call debug_vector  
ba25				endm  
# End of macro CALLMONITOR
ba25			endif	 
ba25 26 00				ld h, 0 
ba27 69					ld l, c 
ba28 cd 85 9a				call forth_push_numhl 
ba2b 68					ld l, b  
ba2c cd 85 9a				call forth_push_numhl 
ba2f			 
ba2f			 
ba2f				NEXTW 
ba2f c3 76 9e			jp macro_next 
ba32				endm 
# End of macro NEXTW
ba32			 
ba32			.FB: 
ba32				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
ba32 1b				db WORD_SYS_CORE+7             
ba33 80 ba			dw .EMIT            
ba35 03				db 2 + 1 
ba36 .. 00			db "FB",0              
ba39				endm 
# End of macro CWHEAD
ba39			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
ba39			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
ba39			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
ba39			; | | If automatic display is off then updates will not be shown until DRAW is used. 
ba39					if DEBUG_FORTH_WORDS_KEY 
ba39						DMARK "FB." 
ba39 f5				push af  
ba3a 3a 4e ba			ld a, (.dmark)  
ba3d 32 65 ee			ld (debug_mark),a  
ba40 3a 4f ba			ld a, (.dmark+1)  
ba43 32 66 ee			ld (debug_mark+1),a  
ba46 3a 50 ba			ld a, (.dmark+2)  
ba49 32 67 ee			ld (debug_mark+2),a  
ba4c 18 03			jr .pastdmark  
ba4e ..			.dmark: db "FB."  
ba51 f1			.pastdmark: pop af  
ba52			endm  
# End of macro DMARK
ba52						CALLMONITOR 
ba52 cd 6f ee			call debug_vector  
ba55				endm  
# End of macro CALLMONITOR
ba55					endif 
ba55			 
ba55					FORTH_DSP_VALUEHL 
ba55 cd 8a 9c			call macro_dsp_valuehl 
ba58				endm 
# End of macro FORTH_DSP_VALUEHL
ba58			 
ba58 7d					ld a, l 
ba59 fe 01				cp 1 
ba5b 20 05				jr nz, .fbn1 
ba5d 21 0a ed				ld hl, display_fb1 
ba60 18 15				jr .fbset 
ba62 fe 02		.fbn1:		cp 2 
ba64 20 05				jr nz, .fbn2 
ba66 21 c8 eb				ld hl, display_fb2 
ba69 18 0c				jr .fbset 
ba6b fe 03		.fbn2:		cp 3 
ba6d 20 05				jr nz, .fbn3 
ba6f 21 69 ec				ld hl, display_fb3 
ba72 18 03				jr .fbset 
ba74			.fbn3:		 ; if invalid number select first 
ba74 21 0a ed				ld hl, display_fb1 
ba77 22 c6 eb		.fbset:		ld (display_fb_active), hl 
ba7a			 
ba7a					FORTH_DSP_POP 
ba7a cd 42 9d			call macro_forth_dsp_pop 
ba7d				endm 
# End of macro FORTH_DSP_POP
ba7d			 
ba7d					NEXTW 
ba7d c3 76 9e			jp macro_next 
ba80				endm 
# End of macro NEXTW
ba80			 
ba80			 
ba80			.EMIT: 
ba80				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
ba80 1b				db WORD_SYS_CORE+7             
ba81 d1 ba			dw .DOTH            
ba83 05				db 4 + 1 
ba84 .. 00			db "EMIT",0              
ba89				endm 
# End of macro CWHEAD
ba89			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
ba89					; get value off TOS and display it 
ba89			 
ba89					if DEBUG_FORTH_WORDS_KEY 
ba89						DMARK "EMT" 
ba89 f5				push af  
ba8a 3a 9e ba			ld a, (.dmark)  
ba8d 32 65 ee			ld (debug_mark),a  
ba90 3a 9f ba			ld a, (.dmark+1)  
ba93 32 66 ee			ld (debug_mark+1),a  
ba96 3a a0 ba			ld a, (.dmark+2)  
ba99 32 67 ee			ld (debug_mark+2),a  
ba9c 18 03			jr .pastdmark  
ba9e ..			.dmark: db "EMT"  
baa1 f1			.pastdmark: pop af  
baa2			endm  
# End of macro DMARK
baa2						CALLMONITOR 
baa2 cd 6f ee			call debug_vector  
baa5				endm  
# End of macro CALLMONITOR
baa5					endif 
baa5			 
baa5					FORTH_DSP_VALUEHL 
baa5 cd 8a 9c			call macro_dsp_valuehl 
baa8				endm 
# End of macro FORTH_DSP_VALUEHL
baa8			 
baa8 7d					ld a,l 
baa9			 
baa9					; TODO write to display 
baa9			 
baa9 32 b9 e4				ld (os_input), a 
baac 3e 00				ld a, 0 
baae 32 ba e4				ld (os_input+1), a 
bab1					 
bab1 3a 58 ea				ld a, (f_cursor_ptr) 
bab4 11 b9 e4				ld de, os_input 
bab7 cd d0 8a				call str_at_display 
baba			 
baba			 
baba 3a 36 ea				ld a,(cli_autodisplay) 
babd fe 00				cp 0 
babf 28 03				jr z, .enoupdate 
bac1 cd e0 8a						call update_display 
bac4					.enoupdate: 
bac4			 
bac4 3a 58 ea				ld a, (f_cursor_ptr) 
bac7 3c					inc a 
bac8 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bacb			 
bacb			 
bacb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bacb cd 42 9d			call macro_forth_dsp_pop 
bace				endm 
# End of macro FORTH_DSP_POP
bace			  
bace			 
bace					NEXTW 
bace c3 76 9e			jp macro_next 
bad1				endm 
# End of macro NEXTW
bad1			.DOTH: 
bad1				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
bad1 1c				db WORD_SYS_CORE+8             
bad2 01 bb			dw .DOTF            
bad4 03				db 2 + 1 
bad5 .. 00			db ".-",0              
bad8				endm 
# End of macro CWHEAD
bad8			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
bad8					; get value off TOS and display it 
bad8					if DEBUG_FORTH_WORDS_KEY 
bad8						DMARK "DTD" 
bad8 f5				push af  
bad9 3a ed ba			ld a, (.dmark)  
badc 32 65 ee			ld (debug_mark),a  
badf 3a ee ba			ld a, (.dmark+1)  
bae2 32 66 ee			ld (debug_mark+1),a  
bae5 3a ef ba			ld a, (.dmark+2)  
bae8 32 67 ee			ld (debug_mark+2),a  
baeb 18 03			jr .pastdmark  
baed ..			.dmark: db "DTD"  
baf0 f1			.pastdmark: pop af  
baf1			endm  
# End of macro DMARK
baf1						CALLMONITOR 
baf1 cd 6f ee			call debug_vector  
baf4				endm  
# End of macro CALLMONITOR
baf4					endif 
baf4 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
baf6 3e 00			ld a, 0 
baf8 32 37 ea			ld (cli_mvdot), a 
bafb c3 58 bb			jp .dotgo 
bafe				NEXTW 
bafe c3 76 9e			jp macro_next 
bb01				endm 
# End of macro NEXTW
bb01			.DOTF: 
bb01				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
bb01 1c				db WORD_SYS_CORE+8             
bb02 2f bb			dw .DOT            
bb04 03				db 2 + 1 
bb05 .. 00			db ".>",0              
bb08				endm 
# End of macro CWHEAD
bb08			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
bb08					; get value off TOS and display it 
bb08			        ; TODO BUG adds extra spaces 
bb08			        ; TODO BUG handle numerics? 
bb08					if DEBUG_FORTH_WORDS_KEY 
bb08						DMARK "DTC" 
bb08 f5				push af  
bb09 3a 1d bb			ld a, (.dmark)  
bb0c 32 65 ee			ld (debug_mark),a  
bb0f 3a 1e bb			ld a, (.dmark+1)  
bb12 32 66 ee			ld (debug_mark+1),a  
bb15 3a 1f bb			ld a, (.dmark+2)  
bb18 32 67 ee			ld (debug_mark+2),a  
bb1b 18 03			jr .pastdmark  
bb1d ..			.dmark: db "DTC"  
bb20 f1			.pastdmark: pop af  
bb21			endm  
# End of macro DMARK
bb21						CALLMONITOR 
bb21 cd 6f ee			call debug_vector  
bb24				endm  
# End of macro CALLMONITOR
bb24					endif 
bb24 3e 01			ld a, 1 
bb26 32 37 ea			ld (cli_mvdot), a 
bb29 c3 58 bb			jp .dotgo 
bb2c				NEXTW 
bb2c c3 76 9e			jp macro_next 
bb2f				endm 
# End of macro NEXTW
bb2f			 
bb2f			.DOT: 
bb2f				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
bb2f 1c				db WORD_SYS_CORE+8             
bb30 0b bd			dw .CLS            
bb32 02				db 1 + 1 
bb33 .. 00			db ".",0              
bb35				endm 
# End of macro CWHEAD
bb35			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
bb35					; get value off TOS and display it 
bb35			 
bb35					if DEBUG_FORTH_WORDS_KEY 
bb35						DMARK "DOT" 
bb35 f5				push af  
bb36 3a 4a bb			ld a, (.dmark)  
bb39 32 65 ee			ld (debug_mark),a  
bb3c 3a 4b bb			ld a, (.dmark+1)  
bb3f 32 66 ee			ld (debug_mark+1),a  
bb42 3a 4c bb			ld a, (.dmark+2)  
bb45 32 67 ee			ld (debug_mark+2),a  
bb48 18 03			jr .pastdmark  
bb4a ..			.dmark: db "DOT"  
bb4d f1			.pastdmark: pop af  
bb4e			endm  
# End of macro DMARK
bb4e						CALLMONITOR 
bb4e cd 6f ee			call debug_vector  
bb51				endm  
# End of macro CALLMONITOR
bb51					endif 
bb51 3e 00			ld a, 0 
bb53 32 37 ea			ld (cli_mvdot), a 
bb56 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bb58				 
bb58			 
bb58			.dotgo: 
bb58			 
bb58			; move up type to on stack for parserv5 
bb58					FORTH_DSP 
bb58 cd 50 9c			call macro_forth_dsp 
bb5b				endm 
# End of macro FORTH_DSP
bb5b				;FORTH_DSP_VALUE  
bb5b			 
bb5b			if DEBUG_FORTH_DOT 
bb5b				DMARK "DOT" 
bb5b f5				push af  
bb5c 3a 70 bb			ld a, (.dmark)  
bb5f 32 65 ee			ld (debug_mark),a  
bb62 3a 71 bb			ld a, (.dmark+1)  
bb65 32 66 ee			ld (debug_mark+1),a  
bb68 3a 72 bb			ld a, (.dmark+2)  
bb6b 32 67 ee			ld (debug_mark+2),a  
bb6e 18 03			jr .pastdmark  
bb70 ..			.dmark: db "DOT"  
bb73 f1			.pastdmark: pop af  
bb74			endm  
# End of macro DMARK
bb74				CALLMONITOR 
bb74 cd 6f ee			call debug_vector  
bb77				endm  
# End of macro CALLMONITOR
bb77			endif	 
bb77			;		.print: 
bb77			 
bb77 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bb78 23				inc hl   ; position to the actual value 
bb79 fe 01			cp DS_TYPE_STR 
bb7b 20 06			jr nz, .dotnum1  
bb7d			 
bb7d			; display string 
bb7d				FORTH_DSP_VALUE  
bb7d cd 73 9c			call macro_forth_dsp_value 
bb80				endm 
# End of macro FORTH_DSP_VALUE
bb80 eb				ex de,hl 
bb81 18 49			jr .dotwrite 
bb83			 
bb83			.dotnum1: 
bb83 fe 02			cp DS_TYPE_INUM 
bb85 20 44			jr nz, .dotflot 
bb87			 
bb87			 
bb87			; display number 
bb87			 
bb87			;	push hl 
bb87			;	call clear_display 
bb87			;	pop hl 
bb87			 
bb87 5e				ld e, (hl) 
bb88 23				inc hl 
bb89 56				ld d, (hl) 
bb8a 21 bb e2			ld hl, scratch 
bb8d			if DEBUG_FORTH_DOT 
bb8d				DMARK "DT1" 
bb8d f5				push af  
bb8e 3a a2 bb			ld a, (.dmark)  
bb91 32 65 ee			ld (debug_mark),a  
bb94 3a a3 bb			ld a, (.dmark+1)  
bb97 32 66 ee			ld (debug_mark+1),a  
bb9a 3a a4 bb			ld a, (.dmark+2)  
bb9d 32 67 ee			ld (debug_mark+2),a  
bba0 18 03			jr .pastdmark  
bba2 ..			.dmark: db "DT1"  
bba5 f1			.pastdmark: pop af  
bba6			endm  
# End of macro DMARK
bba6				CALLMONITOR 
bba6 cd 6f ee			call debug_vector  
bba9				endm  
# End of macro CALLMONITOR
bba9			endif	 
bba9			 
bba9 cd ff 8f			call uitoa_16 
bbac eb				ex de,hl 
bbad			 
bbad			if DEBUG_FORTH_DOT 
bbad				DMARK "DT2" 
bbad f5				push af  
bbae 3a c2 bb			ld a, (.dmark)  
bbb1 32 65 ee			ld (debug_mark),a  
bbb4 3a c3 bb			ld a, (.dmark+1)  
bbb7 32 66 ee			ld (debug_mark+1),a  
bbba 3a c4 bb			ld a, (.dmark+2)  
bbbd 32 67 ee			ld (debug_mark+2),a  
bbc0 18 03			jr .pastdmark  
bbc2 ..			.dmark: db "DT2"  
bbc5 f1			.pastdmark: pop af  
bbc6			endm  
# End of macro DMARK
bbc6				CALLMONITOR 
bbc6 cd 6f ee			call debug_vector  
bbc9				endm  
# End of macro CALLMONITOR
bbc9			endif	 
bbc9			 
bbc9			;	ld de, os_word_scratch 
bbc9 18 01			jr .dotwrite 
bbcb			 
bbcb 00			.dotflot:   nop 
bbcc			; TODO print floating point number 
bbcc			 
bbcc			.dotwrite:		 
bbcc			 
bbcc					; if c is set then set all '-' to spaces 
bbcc					; need to also take into account .>  
bbcc			 
bbcc 3e 01				ld a, 1 
bbce b9					cp c 
bbcf 20 67				jr nz, .nodashswap 
bbd1			 
bbd1					; DE has the string to write, working with HL 
bbd1			 
bbd1 06 ff				ld b, 255 
bbd3 d5					push de 
bbd4 e1					pop hl 
bbd5			 
bbd5			if DEBUG_FORTH_DOT 
bbd5				DMARK "DT-" 
bbd5 f5				push af  
bbd6 3a ea bb			ld a, (.dmark)  
bbd9 32 65 ee			ld (debug_mark),a  
bbdc 3a eb bb			ld a, (.dmark+1)  
bbdf 32 66 ee			ld (debug_mark+1),a  
bbe2 3a ec bb			ld a, (.dmark+2)  
bbe5 32 67 ee			ld (debug_mark+2),a  
bbe8 18 03			jr .pastdmark  
bbea ..			.dmark: db "DT-"  
bbed f1			.pastdmark: pop af  
bbee			endm  
# End of macro DMARK
bbee				CALLMONITOR 
bbee cd 6f ee			call debug_vector  
bbf1				endm  
# End of macro CALLMONITOR
bbf1			endif	 
bbf1 7e			.dashscan:	ld a, (hl) 
bbf2 fe 00				cp 0 
bbf4 28 42				jr z, .nodashswap 
bbf6 fe 2d				cp '-' 
bbf8 20 03				jr nz, .dashskip 
bbfa 3e 20				ld a, ' ' 
bbfc 77					ld (hl), a 
bbfd 23			.dashskip:	inc hl 
bbfe			if DEBUG_FORTH_DOT 
bbfe				DMARK "D-2" 
bbfe f5				push af  
bbff 3a 13 bc			ld a, (.dmark)  
bc02 32 65 ee			ld (debug_mark),a  
bc05 3a 14 bc			ld a, (.dmark+1)  
bc08 32 66 ee			ld (debug_mark+1),a  
bc0b 3a 15 bc			ld a, (.dmark+2)  
bc0e 32 67 ee			ld (debug_mark+2),a  
bc11 18 03			jr .pastdmark  
bc13 ..			.dmark: db "D-2"  
bc16 f1			.pastdmark: pop af  
bc17			endm  
# End of macro DMARK
bc17				CALLMONITOR 
bc17 cd 6f ee			call debug_vector  
bc1a				endm  
# End of macro CALLMONITOR
bc1a			endif	 
bc1a 10 d5				djnz .dashscan 
bc1c			 
bc1c			if DEBUG_FORTH_DOT 
bc1c				DMARK "D-1" 
bc1c f5				push af  
bc1d 3a 31 bc			ld a, (.dmark)  
bc20 32 65 ee			ld (debug_mark),a  
bc23 3a 32 bc			ld a, (.dmark+1)  
bc26 32 66 ee			ld (debug_mark+1),a  
bc29 3a 33 bc			ld a, (.dmark+2)  
bc2c 32 67 ee			ld (debug_mark+2),a  
bc2f 18 03			jr .pastdmark  
bc31 ..			.dmark: db "D-1"  
bc34 f1			.pastdmark: pop af  
bc35			endm  
# End of macro DMARK
bc35				CALLMONITOR 
bc35 cd 6f ee			call debug_vector  
bc38				endm  
# End of macro CALLMONITOR
bc38			endif	 
bc38			 
bc38			.nodashswap: 
bc38			 
bc38			if DEBUG_FORTH_DOT 
bc38				DMARK "D-o" 
bc38 f5				push af  
bc39 3a 4d bc			ld a, (.dmark)  
bc3c 32 65 ee			ld (debug_mark),a  
bc3f 3a 4e bc			ld a, (.dmark+1)  
bc42 32 66 ee			ld (debug_mark+1),a  
bc45 3a 4f bc			ld a, (.dmark+2)  
bc48 32 67 ee			ld (debug_mark+2),a  
bc4b 18 03			jr .pastdmark  
bc4d ..			.dmark: db "D-o"  
bc50 f1			.pastdmark: pop af  
bc51			endm  
# End of macro DMARK
bc51				CALLMONITOR 
bc51 cd 6f ee			call debug_vector  
bc54				endm  
# End of macro CALLMONITOR
bc54			endif	 
bc54			 
bc54 d5					push de   ; save string start in case we need to advance print 
bc55			 
bc55 3a 58 ea				ld a, (f_cursor_ptr) 
bc58 cd d0 8a				call str_at_display 
bc5b 3a 36 ea				ld a,(cli_autodisplay) 
bc5e fe 00				cp 0 
bc60 28 03				jr z, .noupdate 
bc62 cd e0 8a						call update_display 
bc65					.noupdate: 
bc65			 
bc65			 
bc65					; see if we need to advance the print position 
bc65			 
bc65 e1					pop hl   ; get back string 
bc66			;		ex de,hl 
bc66			 
bc66 3a 37 ea				ld a, (cli_mvdot) 
bc69			if DEBUG_FORTH_DOT 
bc69			;		ld e,a 
bc69				DMARK "D>1" 
bc69 f5				push af  
bc6a 3a 7e bc			ld a, (.dmark)  
bc6d 32 65 ee			ld (debug_mark),a  
bc70 3a 7f bc			ld a, (.dmark+1)  
bc73 32 66 ee			ld (debug_mark+1),a  
bc76 3a 80 bc			ld a, (.dmark+2)  
bc79 32 67 ee			ld (debug_mark+2),a  
bc7c 18 03			jr .pastdmark  
bc7e ..			.dmark: db "D>1"  
bc81 f1			.pastdmark: pop af  
bc82			endm  
# End of macro DMARK
bc82				CALLMONITOR 
bc82 cd 6f ee			call debug_vector  
bc85				endm  
# End of macro CALLMONITOR
bc85			endif	 
bc85 fe 00				cp 0 
bc87 28 44				jr z, .noadv 
bc89					; yes, lets advance the print position 
bc89 3e 00				ld a, 0 
bc8b cd 5b 90				call strlent 
bc8e			if DEBUG_FORTH_DOT 
bc8e				DMARK "D-?" 
bc8e f5				push af  
bc8f 3a a3 bc			ld a, (.dmark)  
bc92 32 65 ee			ld (debug_mark),a  
bc95 3a a4 bc			ld a, (.dmark+1)  
bc98 32 66 ee			ld (debug_mark+1),a  
bc9b 3a a5 bc			ld a, (.dmark+2)  
bc9e 32 67 ee			ld (debug_mark+2),a  
bca1 18 03			jr .pastdmark  
bca3 ..			.dmark: db "D-?"  
bca6 f1			.pastdmark: pop af  
bca7			endm  
# End of macro DMARK
bca7				CALLMONITOR 
bca7 cd 6f ee			call debug_vector  
bcaa				endm  
# End of macro CALLMONITOR
bcaa			endif	 
bcaa 3a 58 ea				ld a, (f_cursor_ptr) 
bcad 85					add a,l 
bcae					;call addatohl 
bcae					;ld a, l 
bcae 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bcb1			 
bcb1			if DEBUG_FORTH_DOT 
bcb1				DMARK "D->" 
bcb1 f5				push af  
bcb2 3a c6 bc			ld a, (.dmark)  
bcb5 32 65 ee			ld (debug_mark),a  
bcb8 3a c7 bc			ld a, (.dmark+1)  
bcbb 32 66 ee			ld (debug_mark+1),a  
bcbe 3a c8 bc			ld a, (.dmark+2)  
bcc1 32 67 ee			ld (debug_mark+2),a  
bcc4 18 03			jr .pastdmark  
bcc6 ..			.dmark: db "D->"  
bcc9 f1			.pastdmark: pop af  
bcca			endm  
# End of macro DMARK
bcca				CALLMONITOR 
bcca cd 6f ee			call debug_vector  
bccd				endm  
# End of macro CALLMONITOR
bccd			endif	 
bccd			 
bccd			.noadv:	 
bccd			 
bccd					if DEBUG_FORTH_DOT_WAIT 
bccd							call next_page_prompt 
bccd					endif	 
bccd			; TODO this pop off the stack causes a crash. i dont know why 
bccd			 
bccd			 
bccd			if DEBUG_FORTH_DOT 
bccd				DMARK "DTh" 
bccd f5				push af  
bcce 3a e2 bc			ld a, (.dmark)  
bcd1 32 65 ee			ld (debug_mark),a  
bcd4 3a e3 bc			ld a, (.dmark+1)  
bcd7 32 66 ee			ld (debug_mark+1),a  
bcda 3a e4 bc			ld a, (.dmark+2)  
bcdd 32 67 ee			ld (debug_mark+2),a  
bce0 18 03			jr .pastdmark  
bce2 ..			.dmark: db "DTh"  
bce5 f1			.pastdmark: pop af  
bce6			endm  
# End of macro DMARK
bce6				CALLMONITOR 
bce6 cd 6f ee			call debug_vector  
bce9				endm  
# End of macro CALLMONITOR
bce9			endif	 
bce9			 
bce9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bce9 cd 42 9d			call macro_forth_dsp_pop 
bcec				endm 
# End of macro FORTH_DSP_POP
bcec			 
bcec			if DEBUG_FORTH_DOT 
bcec				DMARK "DTi" 
bcec f5				push af  
bced 3a 01 bd			ld a, (.dmark)  
bcf0 32 65 ee			ld (debug_mark),a  
bcf3 3a 02 bd			ld a, (.dmark+1)  
bcf6 32 66 ee			ld (debug_mark+1),a  
bcf9 3a 03 bd			ld a, (.dmark+2)  
bcfc 32 67 ee			ld (debug_mark+2),a  
bcff 18 03			jr .pastdmark  
bd01 ..			.dmark: db "DTi"  
bd04 f1			.pastdmark: pop af  
bd05			endm  
# End of macro DMARK
bd05				CALLMONITOR 
bd05 cd 6f ee			call debug_vector  
bd08				endm  
# End of macro CALLMONITOR
bd08			endif	 
bd08			 
bd08			 
bd08					NEXTW 
bd08 c3 76 9e			jp macro_next 
bd0b				endm 
# End of macro NEXTW
bd0b			 
bd0b			.CLS: 
bd0b				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bd0b 35				db WORD_SYS_CORE+33             
bd0c 38 bd			dw .DRAW            
bd0e 04				db 3 + 1 
bd0f .. 00			db "CLS",0              
bd13				endm 
# End of macro CWHEAD
bd13			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
bd13					if DEBUG_FORTH_WORDS_KEY 
bd13						DMARK "CLS" 
bd13 f5				push af  
bd14 3a 28 bd			ld a, (.dmark)  
bd17 32 65 ee			ld (debug_mark),a  
bd1a 3a 29 bd			ld a, (.dmark+1)  
bd1d 32 66 ee			ld (debug_mark+1),a  
bd20 3a 2a bd			ld a, (.dmark+2)  
bd23 32 67 ee			ld (debug_mark+2),a  
bd26 18 03			jr .pastdmark  
bd28 ..			.dmark: db "CLS"  
bd2b f1			.pastdmark: pop af  
bd2c			endm  
# End of macro DMARK
bd2c						CALLMONITOR 
bd2c cd 6f ee			call debug_vector  
bd2f				endm  
# End of macro CALLMONITOR
bd2f					endif 
bd2f cd bd 8a				call clear_display 
bd32 c3 46 be				jp .home		; and home cursor 
bd35					NEXTW 
bd35 c3 76 9e			jp macro_next 
bd38				endm 
# End of macro NEXTW
bd38			 
bd38			.DRAW: 
bd38				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
bd38 36				db WORD_SYS_CORE+34             
bd39 63 bd			dw .DUMP            
bd3b 05				db 4 + 1 
bd3c .. 00			db "DRAW",0              
bd41				endm 
# End of macro CWHEAD
bd41			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
bd41					if DEBUG_FORTH_WORDS_KEY 
bd41						DMARK "DRW" 
bd41 f5				push af  
bd42 3a 56 bd			ld a, (.dmark)  
bd45 32 65 ee			ld (debug_mark),a  
bd48 3a 57 bd			ld a, (.dmark+1)  
bd4b 32 66 ee			ld (debug_mark+1),a  
bd4e 3a 58 bd			ld a, (.dmark+2)  
bd51 32 67 ee			ld (debug_mark+2),a  
bd54 18 03			jr .pastdmark  
bd56 ..			.dmark: db "DRW"  
bd59 f1			.pastdmark: pop af  
bd5a			endm  
# End of macro DMARK
bd5a						CALLMONITOR 
bd5a cd 6f ee			call debug_vector  
bd5d				endm  
# End of macro CALLMONITOR
bd5d					endif 
bd5d cd e0 8a				call update_display 
bd60					NEXTW 
bd60 c3 76 9e			jp macro_next 
bd63				endm 
# End of macro NEXTW
bd63			 
bd63			.DUMP: 
bd63				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
bd63 37				db WORD_SYS_CORE+35             
bd64 9b bd			dw .CDUMP            
bd66 05				db 4 + 1 
bd67 .. 00			db "DUMP",0              
bd6c				endm 
# End of macro CWHEAD
bd6c			; | DUMP ( x -- ) With address x display dump   | DONE 
bd6c			; TODO pop address to use off of the stack 
bd6c					if DEBUG_FORTH_WORDS_KEY 
bd6c						DMARK "DUM" 
bd6c f5				push af  
bd6d 3a 81 bd			ld a, (.dmark)  
bd70 32 65 ee			ld (debug_mark),a  
bd73 3a 82 bd			ld a, (.dmark+1)  
bd76 32 66 ee			ld (debug_mark+1),a  
bd79 3a 83 bd			ld a, (.dmark+2)  
bd7c 32 67 ee			ld (debug_mark+2),a  
bd7f 18 03			jr .pastdmark  
bd81 ..			.dmark: db "DUM"  
bd84 f1			.pastdmark: pop af  
bd85			endm  
# End of macro DMARK
bd85						CALLMONITOR 
bd85 cd 6f ee			call debug_vector  
bd88				endm  
# End of macro CALLMONITOR
bd88					endif 
bd88 cd bd 8a				call clear_display 
bd8b			 
bd8b					; get address 
bd8b			 
bd8b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bd8b cd 8a 9c			call macro_dsp_valuehl 
bd8e				endm 
# End of macro FORTH_DSP_VALUEHL
bd8e				 
bd8e					; save it for cdump 
bd8e			 
bd8e 22 de e5				ld (os_cur_ptr),hl 
bd91			 
bd91					; destroy value TOS 
bd91			 
bd91					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd91 cd 42 9d			call macro_forth_dsp_pop 
bd94				endm 
# End of macro FORTH_DSP_POP
bd94			 
bd94 cd 05 99				call dumpcont	; skip old style of param parsing	 
bd97 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
bd98					NEXTW 
bd98 c3 76 9e			jp macro_next 
bd9b				endm 
# End of macro NEXTW
bd9b			.CDUMP: 
bd9b				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
bd9b 38				db WORD_SYS_CORE+36             
bd9c cb bd			dw .DAT            
bd9e 06				db 5 + 1 
bd9f .. 00			db "CDUMP",0              
bda5				endm 
# End of macro CWHEAD
bda5			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
bda5					if DEBUG_FORTH_WORDS_KEY 
bda5						DMARK "CDP" 
bda5 f5				push af  
bda6 3a ba bd			ld a, (.dmark)  
bda9 32 65 ee			ld (debug_mark),a  
bdac 3a bb bd			ld a, (.dmark+1)  
bdaf 32 66 ee			ld (debug_mark+1),a  
bdb2 3a bc bd			ld a, (.dmark+2)  
bdb5 32 67 ee			ld (debug_mark+2),a  
bdb8 18 03			jr .pastdmark  
bdba ..			.dmark: db "CDP"  
bdbd f1			.pastdmark: pop af  
bdbe			endm  
# End of macro DMARK
bdbe						CALLMONITOR 
bdbe cd 6f ee			call debug_vector  
bdc1				endm  
# End of macro CALLMONITOR
bdc1					endif 
bdc1 cd bd 8a				call clear_display 
bdc4 cd 05 99				call dumpcont	 
bdc7 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
bdc8					NEXTW 
bdc8 c3 76 9e			jp macro_next 
bdcb				endm 
# End of macro NEXTW
bdcb			 
bdcb			 
bdcb			 
bdcb			 
bdcb			.DAT: 
bdcb				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
bdcb 3d				db WORD_SYS_CORE+41             
bdcc 21 be			dw .HOME            
bdce 03				db 2 + 1 
bdcf .. 00			db "AT",0              
bdd2				endm 
# End of macro CWHEAD
bdd2			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
bdd2					if DEBUG_FORTH_WORDS_KEY 
bdd2						DMARK "AT." 
bdd2 f5				push af  
bdd3 3a e7 bd			ld a, (.dmark)  
bdd6 32 65 ee			ld (debug_mark),a  
bdd9 3a e8 bd			ld a, (.dmark+1)  
bddc 32 66 ee			ld (debug_mark+1),a  
bddf 3a e9 bd			ld a, (.dmark+2)  
bde2 32 67 ee			ld (debug_mark+2),a  
bde5 18 03			jr .pastdmark  
bde7 ..			.dmark: db "AT."  
bdea f1			.pastdmark: pop af  
bdeb			endm  
# End of macro DMARK
bdeb						CALLMONITOR 
bdeb cd 6f ee			call debug_vector  
bdee				endm  
# End of macro CALLMONITOR
bdee					endif 
bdee					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bdee cd 8a 9c			call macro_dsp_valuehl 
bdf1				endm 
# End of macro FORTH_DSP_VALUEHL
bdf1			 
bdf1			 
bdf1					; TODO save cursor row 
bdf1 7d					ld a,l 
bdf2 fe 02				cp 2 
bdf4 20 04				jr nz, .crow3 
bdf6 3e 28				ld a, display_row_2 
bdf8 18 12				jr .ccol1 
bdfa fe 03		.crow3:		cp 3 
bdfc 20 04				jr nz, .crow4 
bdfe 3e 50				ld a, display_row_3 
be00 18 0a				jr .ccol1 
be02 fe 04		.crow4:		cp 4 
be04 20 04				jr nz, .crow1 
be06 3e 78				ld a, display_row_4 
be08 18 02				jr .ccol1 
be0a 3e 00		.crow1:		ld a,display_row_1 
be0c f5			.ccol1:		push af			; got row offset 
be0d 6f					ld l,a 
be0e 26 00				ld h,0 
be10					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be10 cd 42 9d			call macro_forth_dsp_pop 
be13				endm 
# End of macro FORTH_DSP_POP
be13					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be13 cd 8a 9c			call macro_dsp_valuehl 
be16				endm 
# End of macro FORTH_DSP_VALUEHL
be16					; TODO save cursor col 
be16 f1					pop af 
be17 85					add l		; add col offset 
be18 32 58 ea				ld (f_cursor_ptr), a 
be1b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be1b cd 42 9d			call macro_forth_dsp_pop 
be1e				endm 
# End of macro FORTH_DSP_POP
be1e			 
be1e					; calculate  
be1e			 
be1e					NEXTW 
be1e c3 76 9e			jp macro_next 
be21				endm 
# End of macro NEXTW
be21			 
be21			 
be21			.HOME: 
be21				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
be21 41				db WORD_SYS_CORE+45             
be22 4e be			dw .CR            
be24 05				db 4 + 1 
be25 .. 00			db "HOME",0              
be2a				endm 
# End of macro CWHEAD
be2a			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
be2a					if DEBUG_FORTH_WORDS_KEY 
be2a						DMARK "HOM" 
be2a f5				push af  
be2b 3a 3f be			ld a, (.dmark)  
be2e 32 65 ee			ld (debug_mark),a  
be31 3a 40 be			ld a, (.dmark+1)  
be34 32 66 ee			ld (debug_mark+1),a  
be37 3a 41 be			ld a, (.dmark+2)  
be3a 32 67 ee			ld (debug_mark+2),a  
be3d 18 03			jr .pastdmark  
be3f ..			.dmark: db "HOM"  
be42 f1			.pastdmark: pop af  
be43			endm  
# End of macro DMARK
be43						CALLMONITOR 
be43 cd 6f ee			call debug_vector  
be46				endm  
# End of macro CALLMONITOR
be46					endif 
be46 3e 00		.home:		ld a, 0		; and home cursor 
be48 32 58 ea				ld (f_cursor_ptr), a 
be4b					NEXTW 
be4b c3 76 9e			jp macro_next 
be4e				endm 
# End of macro NEXTW
be4e			 
be4e			 
be4e			.CR: 
be4e				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
be4e 46				db WORD_SYS_CORE+50             
be4f 89 be			dw .SPACE            
be51 03				db 2 + 1 
be52 .. 00			db "CR",0              
be55				endm 
# End of macro CWHEAD
be55			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
be55					if DEBUG_FORTH_WORDS_KEY 
be55						DMARK "CR." 
be55 f5				push af  
be56 3a 6a be			ld a, (.dmark)  
be59 32 65 ee			ld (debug_mark),a  
be5c 3a 6b be			ld a, (.dmark+1)  
be5f 32 66 ee			ld (debug_mark+1),a  
be62 3a 6c be			ld a, (.dmark+2)  
be65 32 67 ee			ld (debug_mark+2),a  
be68 18 03			jr .pastdmark  
be6a ..			.dmark: db "CR."  
be6d f1			.pastdmark: pop af  
be6e			endm  
# End of macro DMARK
be6e						CALLMONITOR 
be6e cd 6f ee			call debug_vector  
be71				endm  
# End of macro CALLMONITOR
be71					endif 
be71 3e 0d				ld a, 13 
be73 32 bb e2				ld (scratch),a 
be76 3e 0a				ld a, 10 
be78 32 bc e2				ld (scratch+1),a 
be7b 3e 00				ld a, 0 
be7d 32 bd e2				ld (scratch+2),a 
be80 21 bb e2				ld hl, scratch 
be83 cd f3 9a				call forth_push_str 
be86					 
be86				       NEXTW 
be86 c3 76 9e			jp macro_next 
be89				endm 
# End of macro NEXTW
be89			.SPACE: 
be89				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
be89 46				db WORD_SYS_CORE+50             
be8a bf be			dw .SPACES            
be8c 03				db 2 + 1 
be8d .. 00			db "BL",0              
be90				endm 
# End of macro CWHEAD
be90			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
be90					if DEBUG_FORTH_WORDS_KEY 
be90						DMARK "BL." 
be90 f5				push af  
be91 3a a5 be			ld a, (.dmark)  
be94 32 65 ee			ld (debug_mark),a  
be97 3a a6 be			ld a, (.dmark+1)  
be9a 32 66 ee			ld (debug_mark+1),a  
be9d 3a a7 be			ld a, (.dmark+2)  
bea0 32 67 ee			ld (debug_mark+2),a  
bea3 18 03			jr .pastdmark  
bea5 ..			.dmark: db "BL."  
bea8 f1			.pastdmark: pop af  
bea9			endm  
# End of macro DMARK
bea9						CALLMONITOR 
bea9 cd 6f ee			call debug_vector  
beac				endm  
# End of macro CALLMONITOR
beac					endif 
beac 3e 20				ld a, " " 
beae 32 bb e2				ld (scratch),a 
beb1 3e 00				ld a, 0 
beb3 32 bc e2				ld (scratch+1),a 
beb6 21 bb e2				ld hl, scratch 
beb9 cd f3 9a				call forth_push_str 
bebc					 
bebc				       NEXTW 
bebc c3 76 9e			jp macro_next 
bebf				endm 
# End of macro NEXTW
bebf			 
bebf			;.blstr: db " ", 0 
bebf			 
bebf			.SPACES: 
bebf				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
bebf 47				db WORD_SYS_CORE+51             
bec0 5a bf			dw .SCROLL            
bec2 07				db 6 + 1 
bec3 .. 00			db "SPACES",0              
beca				endm 
# End of macro CWHEAD
beca			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
beca					if DEBUG_FORTH_WORDS_KEY 
beca						DMARK "SPS" 
beca f5				push af  
becb 3a df be			ld a, (.dmark)  
bece 32 65 ee			ld (debug_mark),a  
bed1 3a e0 be			ld a, (.dmark+1)  
bed4 32 66 ee			ld (debug_mark+1),a  
bed7 3a e1 be			ld a, (.dmark+2)  
beda 32 67 ee			ld (debug_mark+2),a  
bedd 18 03			jr .pastdmark  
bedf ..			.dmark: db "SPS"  
bee2 f1			.pastdmark: pop af  
bee3			endm  
# End of macro DMARK
bee3						CALLMONITOR 
bee3 cd 6f ee			call debug_vector  
bee6				endm  
# End of macro CALLMONITOR
bee6					endif 
bee6			 
bee6			 
bee6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bee6 cd 8a 9c			call macro_dsp_valuehl 
bee9				endm 
# End of macro FORTH_DSP_VALUEHL
bee9			 
bee9 e5					push hl    ; u 
beea					if DEBUG_FORTH_WORDS 
beea						DMARK "SPA" 
beea f5				push af  
beeb 3a ff be			ld a, (.dmark)  
beee 32 65 ee			ld (debug_mark),a  
bef1 3a 00 bf			ld a, (.dmark+1)  
bef4 32 66 ee			ld (debug_mark+1),a  
bef7 3a 01 bf			ld a, (.dmark+2)  
befa 32 67 ee			ld (debug_mark+2),a  
befd 18 03			jr .pastdmark  
beff ..			.dmark: db "SPA"  
bf02 f1			.pastdmark: pop af  
bf03			endm  
# End of macro DMARK
bf03						CALLMONITOR 
bf03 cd 6f ee			call debug_vector  
bf06				endm  
# End of macro CALLMONITOR
bf06					endif 
bf06			 
bf06					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf06 cd 42 9d			call macro_forth_dsp_pop 
bf09				endm 
# End of macro FORTH_DSP_POP
bf09 e1					pop hl 
bf0a 0e 00				ld c, 0 
bf0c 45					ld b, l 
bf0d 21 bb e2				ld hl, scratch  
bf10			 
bf10					if DEBUG_FORTH_WORDS 
bf10						DMARK "SP2" 
bf10 f5				push af  
bf11 3a 25 bf			ld a, (.dmark)  
bf14 32 65 ee			ld (debug_mark),a  
bf17 3a 26 bf			ld a, (.dmark+1)  
bf1a 32 66 ee			ld (debug_mark+1),a  
bf1d 3a 27 bf			ld a, (.dmark+2)  
bf20 32 67 ee			ld (debug_mark+2),a  
bf23 18 03			jr .pastdmark  
bf25 ..			.dmark: db "SP2"  
bf28 f1			.pastdmark: pop af  
bf29			endm  
# End of macro DMARK
bf29						CALLMONITOR 
bf29 cd 6f ee			call debug_vector  
bf2c				endm  
# End of macro CALLMONITOR
bf2c					endif 
bf2c 3e 20				ld a, ' ' 
bf2e			.spaces1:	 
bf2e 77					ld (hl),a 
bf2f 23					inc hl 
bf30					 
bf30 10 fc				djnz .spaces1 
bf32 3e 00				ld a,0 
bf34 77					ld (hl),a 
bf35 21 bb e2				ld hl, scratch 
bf38					if DEBUG_FORTH_WORDS 
bf38						DMARK "SP3" 
bf38 f5				push af  
bf39 3a 4d bf			ld a, (.dmark)  
bf3c 32 65 ee			ld (debug_mark),a  
bf3f 3a 4e bf			ld a, (.dmark+1)  
bf42 32 66 ee			ld (debug_mark+1),a  
bf45 3a 4f bf			ld a, (.dmark+2)  
bf48 32 67 ee			ld (debug_mark+2),a  
bf4b 18 03			jr .pastdmark  
bf4d ..			.dmark: db "SP3"  
bf50 f1			.pastdmark: pop af  
bf51			endm  
# End of macro DMARK
bf51						CALLMONITOR 
bf51 cd 6f ee			call debug_vector  
bf54				endm  
# End of macro CALLMONITOR
bf54					endif 
bf54 cd f3 9a				call forth_push_str 
bf57			 
bf57				       NEXTW 
bf57 c3 76 9e			jp macro_next 
bf5a				endm 
# End of macro NEXTW
bf5a			 
bf5a			 
bf5a			 
bf5a			.SCROLL: 
bf5a				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
bf5a 53				db WORD_SYS_CORE+63             
bf5b 87 bf			dw .SCROLLD            
bf5d 07				db 6 + 1 
bf5e .. 00			db "SCROLL",0              
bf65				endm 
# End of macro CWHEAD
bf65			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
bf65					if DEBUG_FORTH_WORDS_KEY 
bf65						DMARK "SCR" 
bf65 f5				push af  
bf66 3a 7a bf			ld a, (.dmark)  
bf69 32 65 ee			ld (debug_mark),a  
bf6c 3a 7b bf			ld a, (.dmark+1)  
bf6f 32 66 ee			ld (debug_mark+1),a  
bf72 3a 7c bf			ld a, (.dmark+2)  
bf75 32 67 ee			ld (debug_mark+2),a  
bf78 18 03			jr .pastdmark  
bf7a ..			.dmark: db "SCR"  
bf7d f1			.pastdmark: pop af  
bf7e			endm  
# End of macro DMARK
bf7e						CALLMONITOR 
bf7e cd 6f ee			call debug_vector  
bf81				endm  
# End of macro CALLMONITOR
bf81					endif 
bf81			 
bf81 cd 7f 8a			call scroll_up 
bf84			;	call update_display 
bf84			 
bf84					NEXTW 
bf84 c3 76 9e			jp macro_next 
bf87				endm 
# End of macro NEXTW
bf87			 
bf87			 
bf87			 
bf87			;		; get dir 
bf87			; 
bf87			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf87			; 
bf87			;		push hl 
bf87			; 
bf87			;		; destroy value TOS 
bf87			; 
bf87			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf87			; 
bf87			;		; get count 
bf87			; 
bf87			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf87			; 
bf87			;		push hl 
bf87			; 
bf87			;		; destroy value TOS 
bf87			; 
bf87			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf87			; 
bf87			;		; one value on hl get other one back 
bf87			; 
bf87			;		pop bc    ; count 
bf87			; 
bf87			;		pop de   ; dir 
bf87			; 
bf87			; 
bf87			;		ld b, c 
bf87			; 
bf87			;.scrolldir:     push bc 
bf87			;		push de 
bf87			; 
bf87			;		ld a, 0 
bf87			;		cp e 
bf87			;		jr z, .scrollup  
bf87			;		call scroll_down 
bf87			;		jr .scrollnext 
bf87			;.scrollup:	call scroll_up 
bf87			; 
bf87			;		 
bf87			;.scrollnext: 
bf87			;		pop de 
bf87			;		pop bc 
bf87			;		djnz .scrolldir 
bf87			; 
bf87			; 
bf87			; 
bf87			; 
bf87			; 
bf87			;		NEXTW 
bf87			 
bf87			.SCROLLD: 
bf87				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
bf87 53				db WORD_SYS_CORE+63             
bf88 b5 bf			dw .ATQ            
bf8a 08				db 7 + 1 
bf8b .. 00			db "SCROLLD",0              
bf93				endm 
# End of macro CWHEAD
bf93			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
bf93					if DEBUG_FORTH_WORDS_KEY 
bf93						DMARK "SCD" 
bf93 f5				push af  
bf94 3a a8 bf			ld a, (.dmark)  
bf97 32 65 ee			ld (debug_mark),a  
bf9a 3a a9 bf			ld a, (.dmark+1)  
bf9d 32 66 ee			ld (debug_mark+1),a  
bfa0 3a aa bf			ld a, (.dmark+2)  
bfa3 32 67 ee			ld (debug_mark+2),a  
bfa6 18 03			jr .pastdmark  
bfa8 ..			.dmark: db "SCD"  
bfab f1			.pastdmark: pop af  
bfac			endm  
# End of macro DMARK
bfac						CALLMONITOR 
bfac cd 6f ee			call debug_vector  
bfaf				endm  
# End of macro CALLMONITOR
bfaf					endif 
bfaf			 
bfaf cd a3 8a			call scroll_down 
bfb2			;	call update_display 
bfb2			 
bfb2					NEXTW 
bfb2 c3 76 9e			jp macro_next 
bfb5				endm 
# End of macro NEXTW
bfb5			 
bfb5			 
bfb5			.ATQ: 
bfb5				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
bfb5 62				db WORD_SYS_CORE+78             
bfb6 13 c0			dw .AUTODSP            
bfb8 04				db 3 + 1 
bfb9 .. 00			db "AT@",0              
bfbd				endm 
# End of macro CWHEAD
bfbd			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
bfbd					if DEBUG_FORTH_WORDS_KEY 
bfbd						DMARK "ATA" 
bfbd f5				push af  
bfbe 3a d2 bf			ld a, (.dmark)  
bfc1 32 65 ee			ld (debug_mark),a  
bfc4 3a d3 bf			ld a, (.dmark+1)  
bfc7 32 66 ee			ld (debug_mark+1),a  
bfca 3a d4 bf			ld a, (.dmark+2)  
bfcd 32 67 ee			ld (debug_mark+2),a  
bfd0 18 03			jr .pastdmark  
bfd2 ..			.dmark: db "ATA"  
bfd5 f1			.pastdmark: pop af  
bfd6			endm  
# End of macro DMARK
bfd6						CALLMONITOR 
bfd6 cd 6f ee			call debug_vector  
bfd9				endm  
# End of macro CALLMONITOR
bfd9					endif 
bfd9			 
bfd9			 
bfd9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfd9 cd 8a 9c			call macro_dsp_valuehl 
bfdc				endm 
# End of macro FORTH_DSP_VALUEHL
bfdc			 
bfdc					; TODO save cursor row 
bfdc 7d					ld a,l 
bfdd fe 02				cp 2 
bfdf 20 04				jr nz, .crow3aq 
bfe1 3e 28				ld a, display_row_2 
bfe3 18 12				jr .ccol1aq 
bfe5 fe 03		.crow3aq:		cp 3 
bfe7 20 04				jr nz, .crow4aq 
bfe9 3e 50				ld a, display_row_3 
bfeb 18 0a				jr .ccol1aq 
bfed fe 04		.crow4aq:		cp 4 
bfef 20 04				jr nz, .crow1aq 
bff1 3e 78				ld a, display_row_4 
bff3 18 02				jr .ccol1aq 
bff5 3e 00		.crow1aq:		ld a,display_row_1 
bff7 f5			.ccol1aq:		push af			; got row offset 
bff8 6f					ld l,a 
bff9 26 00				ld h,0 
bffb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bffb cd 42 9d			call macro_forth_dsp_pop 
bffe				endm 
# End of macro FORTH_DSP_POP
bffe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bffe cd 8a 9c			call macro_dsp_valuehl 
c001				endm 
# End of macro FORTH_DSP_VALUEHL
c001					; TODO save cursor col 
c001 f1					pop af 
c002 85					add l		; add col offset 
c003			 
c003					; add current frame buffer address 
c003 2a c6 eb				ld hl, (display_fb_active) 
c006 cd ea 8c				call addatohl 
c009			 
c009			 
c009			 
c009			 
c009					; get char frame buffer location offset in hl 
c009			 
c009 7e					ld a,(hl) 
c00a 26 00				ld h, 0 
c00c 6f					ld l, a 
c00d			 
c00d cd 85 9a				call forth_push_numhl 
c010			 
c010			 
c010					NEXTW 
c010 c3 76 9e			jp macro_next 
c013				endm 
# End of macro NEXTW
c013			 
c013			.AUTODSP: 
c013				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
c013 63				db WORD_SYS_CORE+79             
c014 29 c0			dw .MENU            
c016 05				db 4 + 1 
c017 .. 00			db "ADSP",0              
c01c				endm 
# End of macro CWHEAD
c01c			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
c01c			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
c01c			 
c01c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c01c cd 8a 9c			call macro_dsp_valuehl 
c01f				endm 
# End of macro FORTH_DSP_VALUEHL
c01f			 
c01f			;		push hl 
c01f			 
c01f					; destroy value TOS 
c01f			 
c01f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c01f cd 42 9d			call macro_forth_dsp_pop 
c022				endm 
# End of macro FORTH_DSP_POP
c022			 
c022			;		pop hl 
c022			 
c022 7d					ld a,l 
c023 32 36 ea				ld (cli_autodisplay), a 
c026				       NEXTW 
c026 c3 76 9e			jp macro_next 
c029				endm 
# End of macro NEXTW
c029			 
c029			.MENU: 
c029				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
c029 70				db WORD_SYS_CORE+92             
c02a d2 c0			dw .ENDDISPLAY            
c02c 05				db 4 + 1 
c02d .. 00			db "MENU",0              
c032				endm 
# End of macro CWHEAD
c032			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
c032			 
c032			;		; get number of items on the stack 
c032			; 
c032				 
c032					FORTH_DSP_VALUEHL 
c032 cd 8a 9c			call macro_dsp_valuehl 
c035				endm 
# End of macro FORTH_DSP_VALUEHL
c035				 
c035					if DEBUG_FORTH_WORDS_KEY 
c035						DMARK "MNU" 
c035 f5				push af  
c036 3a 4a c0			ld a, (.dmark)  
c039 32 65 ee			ld (debug_mark),a  
c03c 3a 4b c0			ld a, (.dmark+1)  
c03f 32 66 ee			ld (debug_mark+1),a  
c042 3a 4c c0			ld a, (.dmark+2)  
c045 32 67 ee			ld (debug_mark+2),a  
c048 18 03			jr .pastdmark  
c04a ..			.dmark: db "MNU"  
c04d f1			.pastdmark: pop af  
c04e			endm  
# End of macro DMARK
c04e						CALLMONITOR 
c04e cd 6f ee			call debug_vector  
c051				endm  
# End of macro CALLMONITOR
c051					endif 
c051			 
c051 45					ld b, l	 
c052 05					dec b 
c053			 
c053					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c053 cd 42 9d			call macro_forth_dsp_pop 
c056				endm 
# End of macro FORTH_DSP_POP
c056			 
c056			 
c056					; go directly through the stack to pluck out the string pointers and build an array 
c056			 
c056			;		FORTH_DSP 
c056			 
c056					; hl contains top most stack item 
c056				 
c056 11 bb e2				ld de, scratch 
c059			 
c059			.mbuild: 
c059			 
c059					FORTH_DSP_VALUEHL 
c059 cd 8a 9c			call macro_dsp_valuehl 
c05c				endm 
# End of macro FORTH_DSP_VALUEHL
c05c			 
c05c					if DEBUG_FORTH_WORDS 
c05c						DMARK "MN3" 
c05c f5				push af  
c05d 3a 71 c0			ld a, (.dmark)  
c060 32 65 ee			ld (debug_mark),a  
c063 3a 72 c0			ld a, (.dmark+1)  
c066 32 66 ee			ld (debug_mark+1),a  
c069 3a 73 c0			ld a, (.dmark+2)  
c06c 32 67 ee			ld (debug_mark+2),a  
c06f 18 03			jr .pastdmark  
c071 ..			.dmark: db "MN3"  
c074 f1			.pastdmark: pop af  
c075			endm  
# End of macro DMARK
c075						CALLMONITOR 
c075 cd 6f ee			call debug_vector  
c078				endm  
# End of macro CALLMONITOR
c078					endif 
c078 eb					ex de, hl 
c079 73					ld (hl), e 
c07a 23					inc hl 
c07b 72					ld (hl), d 
c07c 23					inc hl 
c07d eb					ex de, hl 
c07e			 
c07e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c07e cd 42 9d			call macro_forth_dsp_pop 
c081				endm 
# End of macro FORTH_DSP_POP
c081			 
c081 10 d6				djnz .mbuild 
c083			 
c083					; done add term 
c083			 
c083 eb					ex de, hl 
c084 36 00				ld (hl), 0 
c086 23					inc hl 
c087 36 00				ld (hl), 0 
c089			 
c089				 
c089					 
c089 21 bb e2				ld hl, scratch 
c08c			 
c08c					if DEBUG_FORTH_WORDS 
c08c						DMARK "MNx" 
c08c f5				push af  
c08d 3a a1 c0			ld a, (.dmark)  
c090 32 65 ee			ld (debug_mark),a  
c093 3a a2 c0			ld a, (.dmark+1)  
c096 32 66 ee			ld (debug_mark+1),a  
c099 3a a3 c0			ld a, (.dmark+2)  
c09c 32 67 ee			ld (debug_mark+2),a  
c09f 18 03			jr .pastdmark  
c0a1 ..			.dmark: db "MNx"  
c0a4 f1			.pastdmark: pop af  
c0a5			endm  
# End of macro DMARK
c0a5						CALLMONITOR 
c0a5 cd 6f ee			call debug_vector  
c0a8				endm  
# End of macro CALLMONITOR
c0a8					endif 
c0a8			 
c0a8			 
c0a8			 
c0a8 3e 00				ld a, 0 
c0aa cd ee 8a				call menu 
c0ad			 
c0ad			 
c0ad 6f					ld l, a 
c0ae 26 00				ld h, 0 
c0b0			 
c0b0					if DEBUG_FORTH_WORDS 
c0b0						DMARK "MNr" 
c0b0 f5				push af  
c0b1 3a c5 c0			ld a, (.dmark)  
c0b4 32 65 ee			ld (debug_mark),a  
c0b7 3a c6 c0			ld a, (.dmark+1)  
c0ba 32 66 ee			ld (debug_mark+1),a  
c0bd 3a c7 c0			ld a, (.dmark+2)  
c0c0 32 67 ee			ld (debug_mark+2),a  
c0c3 18 03			jr .pastdmark  
c0c5 ..			.dmark: db "MNr"  
c0c8 f1			.pastdmark: pop af  
c0c9			endm  
# End of macro DMARK
c0c9						CALLMONITOR 
c0c9 cd 6f ee			call debug_vector  
c0cc				endm  
# End of macro CALLMONITOR
c0cc					endif 
c0cc			 
c0cc cd 85 9a				call forth_push_numhl 
c0cf			 
c0cf			 
c0cf			 
c0cf			 
c0cf				       NEXTW 
c0cf c3 76 9e			jp macro_next 
c0d2				endm 
# End of macro NEXTW
c0d2			 
c0d2			 
c0d2			.ENDDISPLAY: 
c0d2			 
c0d2			; eof 
# End of file forth_words_display.asm
c0d2			include "forth_words_str.asm" 
c0d2			 
c0d2			; | ## String Words 
c0d2			 
c0d2			.PTR:   
c0d2			 
c0d2				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c0d2 48				db WORD_SYS_CORE+52             
c0d3 ff c0			dw .STYPE            
c0d5 04				db 3 + 1 
c0d6 .. 00			db "PTR",0              
c0da				endm 
# End of macro CWHEAD
c0da			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c0da			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c0da			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c0da			 
c0da					if DEBUG_FORTH_WORDS_KEY 
c0da						DMARK "PTR" 
c0da f5				push af  
c0db 3a ef c0			ld a, (.dmark)  
c0de 32 65 ee			ld (debug_mark),a  
c0e1 3a f0 c0			ld a, (.dmark+1)  
c0e4 32 66 ee			ld (debug_mark+1),a  
c0e7 3a f1 c0			ld a, (.dmark+2)  
c0ea 32 67 ee			ld (debug_mark+2),a  
c0ed 18 03			jr .pastdmark  
c0ef ..			.dmark: db "PTR"  
c0f2 f1			.pastdmark: pop af  
c0f3			endm  
# End of macro DMARK
c0f3						CALLMONITOR 
c0f3 cd 6f ee			call debug_vector  
c0f6				endm  
# End of macro CALLMONITOR
c0f6					endif 
c0f6					FORTH_DSP_VALUEHL 
c0f6 cd 8a 9c			call macro_dsp_valuehl 
c0f9				endm 
# End of macro FORTH_DSP_VALUEHL
c0f9 cd 85 9a				call forth_push_numhl 
c0fc			 
c0fc			 
c0fc					NEXTW 
c0fc c3 76 9e			jp macro_next 
c0ff				endm 
# End of macro NEXTW
c0ff			.STYPE: 
c0ff				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c0ff 48				db WORD_SYS_CORE+52             
c100 4e c1			dw .UPPER            
c102 06				db 5 + 1 
c103 .. 00			db "STYPE",0              
c109				endm 
# End of macro CWHEAD
c109			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c109					if DEBUG_FORTH_WORDS_KEY 
c109						DMARK "STY" 
c109 f5				push af  
c10a 3a 1e c1			ld a, (.dmark)  
c10d 32 65 ee			ld (debug_mark),a  
c110 3a 1f c1			ld a, (.dmark+1)  
c113 32 66 ee			ld (debug_mark+1),a  
c116 3a 20 c1			ld a, (.dmark+2)  
c119 32 67 ee			ld (debug_mark+2),a  
c11c 18 03			jr .pastdmark  
c11e ..			.dmark: db "STY"  
c121 f1			.pastdmark: pop af  
c122			endm  
# End of macro DMARK
c122						CALLMONITOR 
c122 cd 6f ee			call debug_vector  
c125				endm  
# End of macro CALLMONITOR
c125					endif 
c125					FORTH_DSP 
c125 cd 50 9c			call macro_forth_dsp 
c128				endm 
# End of macro FORTH_DSP
c128					;v5 FORTH_DSP_VALUE 
c128			 
c128 7e					ld a, (hl) 
c129			 
c129 f5					push af 
c12a			 
c12a			; Dont destroy TOS		FORTH_DSP_POP 
c12a			 
c12a f1					pop af 
c12b			 
c12b fe 01				cp DS_TYPE_STR 
c12d 28 09				jr z, .typestr 
c12f			 
c12f fe 02				cp DS_TYPE_INUM 
c131 28 0a				jr z, .typeinum 
c133			 
c133 21 4c c1				ld hl, .tna 
c136 18 0a				jr .tpush 
c138			 
c138 21 48 c1		.typestr:	ld hl, .tstr 
c13b 18 05				jr .tpush 
c13d 21 4a c1		.typeinum:	ld hl, .tinum 
c140 18 00				jr .tpush 
c142			 
c142			.tpush: 
c142			 
c142 cd f3 9a				call forth_push_str 
c145			 
c145					NEXTW 
c145 c3 76 9e			jp macro_next 
c148				endm 
# End of macro NEXTW
c148 .. 00		.tstr:	db "s",0 
c14a .. 00		.tinum:  db "i",0 
c14c .. 00		.tna:   db "?", 0 
c14e			 
c14e			 
c14e			.UPPER: 
c14e				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c14e 48				db WORD_SYS_CORE+52             
c14f 89 c1			dw .LOWER            
c151 06				db 5 + 1 
c152 .. 00			db "UPPER",0              
c158				endm 
# End of macro CWHEAD
c158			; | UPPER ( s -- s ) Upper case string s  | DONE 
c158					if DEBUG_FORTH_WORDS_KEY 
c158						DMARK "UPR" 
c158 f5				push af  
c159 3a 6d c1			ld a, (.dmark)  
c15c 32 65 ee			ld (debug_mark),a  
c15f 3a 6e c1			ld a, (.dmark+1)  
c162 32 66 ee			ld (debug_mark+1),a  
c165 3a 6f c1			ld a, (.dmark+2)  
c168 32 67 ee			ld (debug_mark+2),a  
c16b 18 03			jr .pastdmark  
c16d ..			.dmark: db "UPR"  
c170 f1			.pastdmark: pop af  
c171			endm  
# End of macro DMARK
c171						CALLMONITOR 
c171 cd 6f ee			call debug_vector  
c174				endm  
# End of macro CALLMONITOR
c174					endif 
c174			 
c174					FORTH_DSP 
c174 cd 50 9c			call macro_forth_dsp 
c177				endm 
# End of macro FORTH_DSP
c177					 
c177			; TODO check is string type 
c177			 
c177					FORTH_DSP_VALUEHL 
c177 cd 8a 9c			call macro_dsp_valuehl 
c17a				endm 
# End of macro FORTH_DSP_VALUEHL
c17a			; get pointer to string in hl 
c17a			 
c17a 7e			.toup:		ld a, (hl) 
c17b fe 00				cp 0 
c17d 28 07				jr z, .toupdone 
c17f			 
c17f cd 5f 8f				call to_upper 
c182			 
c182 77					ld (hl), a 
c183 23					inc hl 
c184 18 f4				jr .toup 
c186			 
c186					 
c186			 
c186			 
c186			; for each char convert to upper 
c186					 
c186			.toupdone: 
c186			 
c186			 
c186					NEXTW 
c186 c3 76 9e			jp macro_next 
c189				endm 
# End of macro NEXTW
c189			.LOWER: 
c189				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c189 48				db WORD_SYS_CORE+52             
c18a c4 c1			dw .TCASE            
c18c 06				db 5 + 1 
c18d .. 00			db "LOWER",0              
c193				endm 
# End of macro CWHEAD
c193			; | LOWER ( s -- s ) Lower case string s  | DONE 
c193					if DEBUG_FORTH_WORDS_KEY 
c193						DMARK "LWR" 
c193 f5				push af  
c194 3a a8 c1			ld a, (.dmark)  
c197 32 65 ee			ld (debug_mark),a  
c19a 3a a9 c1			ld a, (.dmark+1)  
c19d 32 66 ee			ld (debug_mark+1),a  
c1a0 3a aa c1			ld a, (.dmark+2)  
c1a3 32 67 ee			ld (debug_mark+2),a  
c1a6 18 03			jr .pastdmark  
c1a8 ..			.dmark: db "LWR"  
c1ab f1			.pastdmark: pop af  
c1ac			endm  
# End of macro DMARK
c1ac						CALLMONITOR 
c1ac cd 6f ee			call debug_vector  
c1af				endm  
# End of macro CALLMONITOR
c1af					endif 
c1af			 
c1af					FORTH_DSP 
c1af cd 50 9c			call macro_forth_dsp 
c1b2				endm 
# End of macro FORTH_DSP
c1b2					 
c1b2			; TODO check is string type 
c1b2			 
c1b2					FORTH_DSP_VALUEHL 
c1b2 cd 8a 9c			call macro_dsp_valuehl 
c1b5				endm 
# End of macro FORTH_DSP_VALUEHL
c1b5			; get pointer to string in hl 
c1b5			 
c1b5 7e			.tolow:		ld a, (hl) 
c1b6 fe 00				cp 0 
c1b8 28 07				jr z, .tolowdone 
c1ba			 
c1ba cd 68 8f				call to_lower 
c1bd			 
c1bd 77					ld (hl), a 
c1be 23					inc hl 
c1bf 18 f4				jr .tolow 
c1c1			 
c1c1					 
c1c1			 
c1c1			 
c1c1			; for each char convert to low 
c1c1					 
c1c1			.tolowdone: 
c1c1					NEXTW 
c1c1 c3 76 9e			jp macro_next 
c1c4				endm 
# End of macro NEXTW
c1c4			.TCASE: 
c1c4				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c1c4 48				db WORD_SYS_CORE+52             
c1c5 fa c2			dw .SUBSTR            
c1c7 06				db 5 + 1 
c1c8 .. 00			db "TCASE",0              
c1ce				endm 
# End of macro CWHEAD
c1ce			; | TCASE ( s -- s ) Title case string s  | DONE 
c1ce					if DEBUG_FORTH_WORDS_KEY 
c1ce						DMARK "TCS" 
c1ce f5				push af  
c1cf 3a e3 c1			ld a, (.dmark)  
c1d2 32 65 ee			ld (debug_mark),a  
c1d5 3a e4 c1			ld a, (.dmark+1)  
c1d8 32 66 ee			ld (debug_mark+1),a  
c1db 3a e5 c1			ld a, (.dmark+2)  
c1de 32 67 ee			ld (debug_mark+2),a  
c1e1 18 03			jr .pastdmark  
c1e3 ..			.dmark: db "TCS"  
c1e6 f1			.pastdmark: pop af  
c1e7			endm  
# End of macro DMARK
c1e7						CALLMONITOR 
c1e7 cd 6f ee			call debug_vector  
c1ea				endm  
# End of macro CALLMONITOR
c1ea					endif 
c1ea			 
c1ea					FORTH_DSP 
c1ea cd 50 9c			call macro_forth_dsp 
c1ed				endm 
# End of macro FORTH_DSP
c1ed					 
c1ed			; TODO check is string type 
c1ed			 
c1ed					FORTH_DSP_VALUEHL 
c1ed cd 8a 9c			call macro_dsp_valuehl 
c1f0				endm 
# End of macro FORTH_DSP_VALUEHL
c1f0			; get pointer to string in hl 
c1f0			 
c1f0					if DEBUG_FORTH_WORDS 
c1f0						DMARK "TC1" 
c1f0 f5				push af  
c1f1 3a 05 c2			ld a, (.dmark)  
c1f4 32 65 ee			ld (debug_mark),a  
c1f7 3a 06 c2			ld a, (.dmark+1)  
c1fa 32 66 ee			ld (debug_mark+1),a  
c1fd 3a 07 c2			ld a, (.dmark+2)  
c200 32 67 ee			ld (debug_mark+2),a  
c203 18 03			jr .pastdmark  
c205 ..			.dmark: db "TC1"  
c208 f1			.pastdmark: pop af  
c209			endm  
# End of macro DMARK
c209						CALLMONITOR 
c209 cd 6f ee			call debug_vector  
c20c				endm  
# End of macro CALLMONITOR
c20c					endif 
c20c			 
c20c					; first time in turn to upper case first char 
c20c			 
c20c 7e					ld a, (hl) 
c20d c3 97 c2				jp .totsiptou 
c210			 
c210			 
c210 7e			.tot:		ld a, (hl) 
c211 fe 00				cp 0 
c213 ca db c2				jp z, .totdone 
c216			 
c216					if DEBUG_FORTH_WORDS 
c216						DMARK "TC2" 
c216 f5				push af  
c217 3a 2b c2			ld a, (.dmark)  
c21a 32 65 ee			ld (debug_mark),a  
c21d 3a 2c c2			ld a, (.dmark+1)  
c220 32 66 ee			ld (debug_mark+1),a  
c223 3a 2d c2			ld a, (.dmark+2)  
c226 32 67 ee			ld (debug_mark+2),a  
c229 18 03			jr .pastdmark  
c22b ..			.dmark: db "TC2"  
c22e f1			.pastdmark: pop af  
c22f			endm  
# End of macro DMARK
c22f						CALLMONITOR 
c22f cd 6f ee			call debug_vector  
c232				endm  
# End of macro CALLMONITOR
c232					endif 
c232					; check to see if current char is a space 
c232			 
c232 fe 20				cp ' ' 
c234 28 21				jr z, .totsp 
c236 cd 68 8f				call to_lower 
c239					if DEBUG_FORTH_WORDS 
c239						DMARK "TC3" 
c239 f5				push af  
c23a 3a 4e c2			ld a, (.dmark)  
c23d 32 65 ee			ld (debug_mark),a  
c240 3a 4f c2			ld a, (.dmark+1)  
c243 32 66 ee			ld (debug_mark+1),a  
c246 3a 50 c2			ld a, (.dmark+2)  
c249 32 67 ee			ld (debug_mark+2),a  
c24c 18 03			jr .pastdmark  
c24e ..			.dmark: db "TC3"  
c251 f1			.pastdmark: pop af  
c252			endm  
# End of macro DMARK
c252						CALLMONITOR 
c252 cd 6f ee			call debug_vector  
c255				endm  
# End of macro CALLMONITOR
c255					endif 
c255 18 63				jr .totnxt 
c257			 
c257			.totsp:         ; on a space, find next char which should be upper 
c257			 
c257					if DEBUG_FORTH_WORDS 
c257						DMARK "TC4" 
c257 f5				push af  
c258 3a 6c c2			ld a, (.dmark)  
c25b 32 65 ee			ld (debug_mark),a  
c25e 3a 6d c2			ld a, (.dmark+1)  
c261 32 66 ee			ld (debug_mark+1),a  
c264 3a 6e c2			ld a, (.dmark+2)  
c267 32 67 ee			ld (debug_mark+2),a  
c26a 18 03			jr .pastdmark  
c26c ..			.dmark: db "TC4"  
c26f f1			.pastdmark: pop af  
c270			endm  
# End of macro DMARK
c270						CALLMONITOR 
c270 cd 6f ee			call debug_vector  
c273				endm  
# End of macro CALLMONITOR
c273					endif 
c273					;; 
c273			 
c273 fe 20				cp ' ' 
c275 20 20				jr nz, .totsiptou 
c277 23					inc hl 
c278 7e					ld a, (hl) 
c279					if DEBUG_FORTH_WORDS 
c279						DMARK "TC5" 
c279 f5				push af  
c27a 3a 8e c2			ld a, (.dmark)  
c27d 32 65 ee			ld (debug_mark),a  
c280 3a 8f c2			ld a, (.dmark+1)  
c283 32 66 ee			ld (debug_mark+1),a  
c286 3a 90 c2			ld a, (.dmark+2)  
c289 32 67 ee			ld (debug_mark+2),a  
c28c 18 03			jr .pastdmark  
c28e ..			.dmark: db "TC5"  
c291 f1			.pastdmark: pop af  
c292			endm  
# End of macro DMARK
c292						CALLMONITOR 
c292 cd 6f ee			call debug_vector  
c295				endm  
# End of macro CALLMONITOR
c295					endif 
c295 18 c0				jr .totsp 
c297 fe 00		.totsiptou:    cp 0 
c299 28 40				jr z, .totdone 
c29b					; not space and not zero term so upper case it 
c29b cd 5f 8f				call to_upper 
c29e			 
c29e					if DEBUG_FORTH_WORDS 
c29e						DMARK "TC6" 
c29e f5				push af  
c29f 3a b3 c2			ld a, (.dmark)  
c2a2 32 65 ee			ld (debug_mark),a  
c2a5 3a b4 c2			ld a, (.dmark+1)  
c2a8 32 66 ee			ld (debug_mark+1),a  
c2ab 3a b5 c2			ld a, (.dmark+2)  
c2ae 32 67 ee			ld (debug_mark+2),a  
c2b1 18 03			jr .pastdmark  
c2b3 ..			.dmark: db "TC6"  
c2b6 f1			.pastdmark: pop af  
c2b7			endm  
# End of macro DMARK
c2b7						CALLMONITOR 
c2b7 cd 6f ee			call debug_vector  
c2ba				endm  
# End of macro CALLMONITOR
c2ba					endif 
c2ba			 
c2ba			 
c2ba			.totnxt: 
c2ba			 
c2ba 77					ld (hl), a 
c2bb 23					inc hl 
c2bc					if DEBUG_FORTH_WORDS 
c2bc						DMARK "TC7" 
c2bc f5				push af  
c2bd 3a d1 c2			ld a, (.dmark)  
c2c0 32 65 ee			ld (debug_mark),a  
c2c3 3a d2 c2			ld a, (.dmark+1)  
c2c6 32 66 ee			ld (debug_mark+1),a  
c2c9 3a d3 c2			ld a, (.dmark+2)  
c2cc 32 67 ee			ld (debug_mark+2),a  
c2cf 18 03			jr .pastdmark  
c2d1 ..			.dmark: db "TC7"  
c2d4 f1			.pastdmark: pop af  
c2d5			endm  
# End of macro DMARK
c2d5						CALLMONITOR 
c2d5 cd 6f ee			call debug_vector  
c2d8				endm  
# End of macro CALLMONITOR
c2d8					endif 
c2d8 c3 10 c2				jp .tot 
c2db			 
c2db					 
c2db			 
c2db			 
c2db			; for each char convert to low 
c2db					 
c2db			.totdone: 
c2db					if DEBUG_FORTH_WORDS 
c2db						DMARK "TCd" 
c2db f5				push af  
c2dc 3a f0 c2			ld a, (.dmark)  
c2df 32 65 ee			ld (debug_mark),a  
c2e2 3a f1 c2			ld a, (.dmark+1)  
c2e5 32 66 ee			ld (debug_mark+1),a  
c2e8 3a f2 c2			ld a, (.dmark+2)  
c2eb 32 67 ee			ld (debug_mark+2),a  
c2ee 18 03			jr .pastdmark  
c2f0 ..			.dmark: db "TCd"  
c2f3 f1			.pastdmark: pop af  
c2f4			endm  
# End of macro DMARK
c2f4						CALLMONITOR 
c2f4 cd 6f ee			call debug_vector  
c2f7				endm  
# End of macro CALLMONITOR
c2f7					endif 
c2f7					NEXTW 
c2f7 c3 76 9e			jp macro_next 
c2fa				endm 
# End of macro NEXTW
c2fa			 
c2fa			.SUBSTR: 
c2fa				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c2fa 48				db WORD_SYS_CORE+52             
c2fb 58 c3			dw .LEFT            
c2fd 07				db 6 + 1 
c2fe .. 00			db "SUBSTR",0              
c305				endm 
# End of macro CWHEAD
c305			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c305			 
c305					if DEBUG_FORTH_WORDS_KEY 
c305						DMARK "SST" 
c305 f5				push af  
c306 3a 1a c3			ld a, (.dmark)  
c309 32 65 ee			ld (debug_mark),a  
c30c 3a 1b c3			ld a, (.dmark+1)  
c30f 32 66 ee			ld (debug_mark+1),a  
c312 3a 1c c3			ld a, (.dmark+2)  
c315 32 67 ee			ld (debug_mark+2),a  
c318 18 03			jr .pastdmark  
c31a ..			.dmark: db "SST"  
c31d f1			.pastdmark: pop af  
c31e			endm  
# End of macro DMARK
c31e						CALLMONITOR 
c31e cd 6f ee			call debug_vector  
c321				endm  
# End of macro CALLMONITOR
c321					endif 
c321			; TODO check string type 
c321					FORTH_DSP_VALUEHL 
c321 cd 8a 9c			call macro_dsp_valuehl 
c324				endm 
# End of macro FORTH_DSP_VALUEHL
c324			 
c324 e5					push hl      ; string length 
c325			 
c325					FORTH_DSP_POP 
c325 cd 42 9d			call macro_forth_dsp_pop 
c328				endm 
# End of macro FORTH_DSP_POP
c328			 
c328					FORTH_DSP_VALUEHL 
c328 cd 8a 9c			call macro_dsp_valuehl 
c32b				endm 
# End of macro FORTH_DSP_VALUEHL
c32b			 
c32b e5					push hl     ; start char 
c32c			 
c32c					FORTH_DSP_POP 
c32c cd 42 9d			call macro_forth_dsp_pop 
c32f				endm 
# End of macro FORTH_DSP_POP
c32f			 
c32f			 
c32f					FORTH_DSP_VALUE 
c32f cd 73 9c			call macro_forth_dsp_value 
c332				endm 
# End of macro FORTH_DSP_VALUE
c332			 
c332 d1					pop de    ; get start post offset 
c333			 
c333 19					add hl, de    ; starting offset 
c334			 
c334 c1					pop bc 
c335 c5					push bc      ; grab size of string 
c336			 
c336 e5					push hl    ; save string start  
c337			 
c337 26 00				ld h, 0 
c339 69					ld l, c 
c33a 23					inc hl 
c33b 23					inc hl 
c33c			 
c33c cd c5 90				call malloc 
c33f				if DEBUG_FORTH_MALLOC_GUARD 
c33f cc 72 cc				call z,malloc_error 
c342				endif 
c342			 
c342 eb					ex de, hl      ; save malloc area for string copy 
c343 e1					pop hl    ; get back source 
c344 c1					pop bc    ; get length of string back 
c345			 
c345 d5					push de    ; save malloc area for after we push 
c346 ed b0				ldir     ; copy substr 
c348			 
c348			 
c348 eb					ex de, hl 
c349 3e 00				ld a, 0 
c34b 77					ld (hl), a   ; term substr 
c34c			 
c34c					 
c34c e1					pop hl    ; get malloc so we can push it 
c34d e5					push hl   ; save so we can free it afterwards 
c34e			 
c34e cd f3 9a				call forth_push_str 
c351			 
c351 e1					pop hl 
c352 cd 8f 91				call free 
c355			 
c355					 
c355					 
c355			 
c355			 
c355					NEXTW 
c355 c3 76 9e			jp macro_next 
c358				endm 
# End of macro NEXTW
c358			 
c358			.LEFT: 
c358				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c358 48				db WORD_SYS_CORE+52             
c359 80 c3			dw .RIGHT            
c35b 05				db 4 + 1 
c35c .. 00			db "LEFT",0              
c361				endm 
# End of macro CWHEAD
c361			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c361					if DEBUG_FORTH_WORDS_KEY 
c361						DMARK "LEF" 
c361 f5				push af  
c362 3a 76 c3			ld a, (.dmark)  
c365 32 65 ee			ld (debug_mark),a  
c368 3a 77 c3			ld a, (.dmark+1)  
c36b 32 66 ee			ld (debug_mark+1),a  
c36e 3a 78 c3			ld a, (.dmark+2)  
c371 32 67 ee			ld (debug_mark+2),a  
c374 18 03			jr .pastdmark  
c376 ..			.dmark: db "LEF"  
c379 f1			.pastdmark: pop af  
c37a			endm  
# End of macro DMARK
c37a						CALLMONITOR 
c37a cd 6f ee			call debug_vector  
c37d				endm  
# End of macro CALLMONITOR
c37d					endif 
c37d			 
c37d					NEXTW 
c37d c3 76 9e			jp macro_next 
c380				endm 
# End of macro NEXTW
c380			.RIGHT: 
c380				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c380 48				db WORD_SYS_CORE+52             
c381 a9 c3			dw .STR2NUM            
c383 06				db 5 + 1 
c384 .. 00			db "RIGHT",0              
c38a				endm 
# End of macro CWHEAD
c38a			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c38a					if DEBUG_FORTH_WORDS_KEY 
c38a						DMARK "RIG" 
c38a f5				push af  
c38b 3a 9f c3			ld a, (.dmark)  
c38e 32 65 ee			ld (debug_mark),a  
c391 3a a0 c3			ld a, (.dmark+1)  
c394 32 66 ee			ld (debug_mark+1),a  
c397 3a a1 c3			ld a, (.dmark+2)  
c39a 32 67 ee			ld (debug_mark+2),a  
c39d 18 03			jr .pastdmark  
c39f ..			.dmark: db "RIG"  
c3a2 f1			.pastdmark: pop af  
c3a3			endm  
# End of macro DMARK
c3a3						CALLMONITOR 
c3a3 cd 6f ee			call debug_vector  
c3a6				endm  
# End of macro CALLMONITOR
c3a6					endif 
c3a6			 
c3a6					NEXTW 
c3a6 c3 76 9e			jp macro_next 
c3a9				endm 
# End of macro NEXTW
c3a9			 
c3a9			 
c3a9			.STR2NUM: 
c3a9				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c3a9 48				db WORD_SYS_CORE+52             
c3aa 35 c4			dw .NUM2STR            
c3ac 08				db 7 + 1 
c3ad .. 00			db "STR2NUM",0              
c3b5				endm 
# End of macro CWHEAD
c3b5			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c3b5			 
c3b5			 
c3b5			; TODO STR type check to do 
c3b5					if DEBUG_FORTH_WORDS_KEY 
c3b5						DMARK "S2N" 
c3b5 f5				push af  
c3b6 3a ca c3			ld a, (.dmark)  
c3b9 32 65 ee			ld (debug_mark),a  
c3bc 3a cb c3			ld a, (.dmark+1)  
c3bf 32 66 ee			ld (debug_mark+1),a  
c3c2 3a cc c3			ld a, (.dmark+2)  
c3c5 32 67 ee			ld (debug_mark+2),a  
c3c8 18 03			jr .pastdmark  
c3ca ..			.dmark: db "S2N"  
c3cd f1			.pastdmark: pop af  
c3ce			endm  
# End of macro DMARK
c3ce						CALLMONITOR 
c3ce cd 6f ee			call debug_vector  
c3d1				endm  
# End of macro CALLMONITOR
c3d1					endif 
c3d1			 
c3d1					;FORTH_DSP 
c3d1					FORTH_DSP_VALUE 
c3d1 cd 73 9c			call macro_forth_dsp_value 
c3d4				endm 
# End of macro FORTH_DSP_VALUE
c3d4					;inc hl 
c3d4			 
c3d4 eb					ex de, hl 
c3d5					if DEBUG_FORTH_WORDS 
c3d5						DMARK "S2a" 
c3d5 f5				push af  
c3d6 3a ea c3			ld a, (.dmark)  
c3d9 32 65 ee			ld (debug_mark),a  
c3dc 3a eb c3			ld a, (.dmark+1)  
c3df 32 66 ee			ld (debug_mark+1),a  
c3e2 3a ec c3			ld a, (.dmark+2)  
c3e5 32 67 ee			ld (debug_mark+2),a  
c3e8 18 03			jr .pastdmark  
c3ea ..			.dmark: db "S2a"  
c3ed f1			.pastdmark: pop af  
c3ee			endm  
# End of macro DMARK
c3ee						CALLMONITOR 
c3ee cd 6f ee			call debug_vector  
c3f1				endm  
# End of macro CALLMONITOR
c3f1					endif 
c3f1 cd e7 8f				call string_to_uint16 
c3f4			 
c3f4					if DEBUG_FORTH_WORDS 
c3f4						DMARK "S2b" 
c3f4 f5				push af  
c3f5 3a 09 c4			ld a, (.dmark)  
c3f8 32 65 ee			ld (debug_mark),a  
c3fb 3a 0a c4			ld a, (.dmark+1)  
c3fe 32 66 ee			ld (debug_mark+1),a  
c401 3a 0b c4			ld a, (.dmark+2)  
c404 32 67 ee			ld (debug_mark+2),a  
c407 18 03			jr .pastdmark  
c409 ..			.dmark: db "S2b"  
c40c f1			.pastdmark: pop af  
c40d			endm  
# End of macro DMARK
c40d						CALLMONITOR 
c40d cd 6f ee			call debug_vector  
c410				endm  
# End of macro CALLMONITOR
c410					endif 
c410			;		push hl 
c410					FORTH_DSP_POP 
c410 cd 42 9d			call macro_forth_dsp_pop 
c413				endm 
# End of macro FORTH_DSP_POP
c413			;		pop hl 
c413					 
c413					if DEBUG_FORTH_WORDS 
c413						DMARK "S2b" 
c413 f5				push af  
c414 3a 28 c4			ld a, (.dmark)  
c417 32 65 ee			ld (debug_mark),a  
c41a 3a 29 c4			ld a, (.dmark+1)  
c41d 32 66 ee			ld (debug_mark+1),a  
c420 3a 2a c4			ld a, (.dmark+2)  
c423 32 67 ee			ld (debug_mark+2),a  
c426 18 03			jr .pastdmark  
c428 ..			.dmark: db "S2b"  
c42b f1			.pastdmark: pop af  
c42c			endm  
# End of macro DMARK
c42c						CALLMONITOR 
c42c cd 6f ee			call debug_vector  
c42f				endm  
# End of macro CALLMONITOR
c42f					endif 
c42f cd 85 9a				call forth_push_numhl	 
c432			 
c432				 
c432				       NEXTW 
c432 c3 76 9e			jp macro_next 
c435				endm 
# End of macro NEXTW
c435			.NUM2STR: 
c435				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c435 48				db WORD_SYS_CORE+52             
c436 44 c4			dw .CONCAT            
c438 08				db 7 + 1 
c439 .. 00			db "NUM2STR",0              
c441				endm 
# End of macro CWHEAD
c441			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
c441			 
c441			;		; malloc a string to target 
c441			;		ld hl, 10     ; TODO max string size should be fine 
c441			;		call malloc 
c441			;		push hl    ; save malloc location 
c441			; 
c441			; 
c441			;; TODO check int type 
c441			;		FORTH_DSP_VALUEHL 
c441			;		ld a, l 
c441			;		call DispAToASCII   
c441			;;TODO need to chage above call to dump into string 
c441			; 
c441			; 
c441			 
c441				       NEXTW 
c441 c3 76 9e			jp macro_next 
c444				endm 
# End of macro NEXTW
c444			 
c444			.CONCAT: 
c444				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c444 48				db WORD_SYS_CORE+52             
c445 f7 c4			dw .FIND            
c447 07				db 6 + 1 
c448 .. 00			db "CONCAT",0              
c44f				endm 
# End of macro CWHEAD
c44f			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c44f			 
c44f			; TODO check string type 
c44f			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c44f			 
c44f					if DEBUG_FORTH_WORDS_KEY 
c44f						DMARK "CON" 
c44f f5				push af  
c450 3a 64 c4			ld a, (.dmark)  
c453 32 65 ee			ld (debug_mark),a  
c456 3a 65 c4			ld a, (.dmark+1)  
c459 32 66 ee			ld (debug_mark+1),a  
c45c 3a 66 c4			ld a, (.dmark+2)  
c45f 32 67 ee			ld (debug_mark+2),a  
c462 18 03			jr .pastdmark  
c464 ..			.dmark: db "CON"  
c467 f1			.pastdmark: pop af  
c468			endm  
# End of macro DMARK
c468						CALLMONITOR 
c468 cd 6f ee			call debug_vector  
c46b				endm  
# End of macro CALLMONITOR
c46b					endif 
c46b			 
c46b			 
c46b					FORTH_DSP_VALUE 
c46b cd 73 9c			call macro_forth_dsp_value 
c46e				endm 
# End of macro FORTH_DSP_VALUE
c46e e5					push hl   ; s2 
c46f			 
c46f					FORTH_DSP_POP 
c46f cd 42 9d			call macro_forth_dsp_pop 
c472				endm 
# End of macro FORTH_DSP_POP
c472			 
c472					FORTH_DSP_VALUE 
c472 cd 73 9c			call macro_forth_dsp_value 
c475				endm 
# End of macro FORTH_DSP_VALUE
c475			 
c475 e5					push hl   ; s1 
c476			 
c476					FORTH_DSP_POP 
c476 cd 42 9d			call macro_forth_dsp_pop 
c479				endm 
# End of macro FORTH_DSP_POP
c479					 
c479			 
c479					; copy s1 
c479			 
c479				 
c479					; save ptr 
c479 e1					pop hl  
c47a e5					push hl 
c47b 3e 00				ld a, 0 
c47d cd 5b 90				call strlent 
c480					;inc hl    ; zer0 
c480 06 00				ld b, 0 
c482 4d					ld c, l 
c483 e1					pop hl		 
c484 11 bb e2				ld de, scratch	 
c487					if DEBUG_FORTH_WORDS 
c487						DMARK "CO1" 
c487 f5				push af  
c488 3a 9c c4			ld a, (.dmark)  
c48b 32 65 ee			ld (debug_mark),a  
c48e 3a 9d c4			ld a, (.dmark+1)  
c491 32 66 ee			ld (debug_mark+1),a  
c494 3a 9e c4			ld a, (.dmark+2)  
c497 32 67 ee			ld (debug_mark+2),a  
c49a 18 03			jr .pastdmark  
c49c ..			.dmark: db "CO1"  
c49f f1			.pastdmark: pop af  
c4a0			endm  
# End of macro DMARK
c4a0						CALLMONITOR 
c4a0 cd 6f ee			call debug_vector  
c4a3				endm  
# End of macro CALLMONITOR
c4a3					endif 
c4a3 ed b0				ldir 
c4a5			 
c4a5 e1					pop hl 
c4a6 e5					push hl 
c4a7 d5					push de 
c4a8			 
c4a8			 
c4a8 3e 00				ld a, 0 
c4aa cd 5b 90				call strlent 
c4ad 23					inc hl    ; zer0 
c4ae 23					inc hl 
c4af 06 00				ld b, 0 
c4b1 4d					ld c, l 
c4b2 d1					pop de 
c4b3 e1					pop hl		 
c4b4					if DEBUG_FORTH_WORDS 
c4b4						DMARK "CO2" 
c4b4 f5				push af  
c4b5 3a c9 c4			ld a, (.dmark)  
c4b8 32 65 ee			ld (debug_mark),a  
c4bb 3a ca c4			ld a, (.dmark+1)  
c4be 32 66 ee			ld (debug_mark+1),a  
c4c1 3a cb c4			ld a, (.dmark+2)  
c4c4 32 67 ee			ld (debug_mark+2),a  
c4c7 18 03			jr .pastdmark  
c4c9 ..			.dmark: db "CO2"  
c4cc f1			.pastdmark: pop af  
c4cd			endm  
# End of macro DMARK
c4cd						CALLMONITOR 
c4cd cd 6f ee			call debug_vector  
c4d0				endm  
# End of macro CALLMONITOR
c4d0					endif 
c4d0 ed b0				ldir 
c4d2			 
c4d2			 
c4d2			 
c4d2 21 bb e2				ld hl, scratch 
c4d5					if DEBUG_FORTH_WORDS 
c4d5						DMARK "CO5" 
c4d5 f5				push af  
c4d6 3a ea c4			ld a, (.dmark)  
c4d9 32 65 ee			ld (debug_mark),a  
c4dc 3a eb c4			ld a, (.dmark+1)  
c4df 32 66 ee			ld (debug_mark+1),a  
c4e2 3a ec c4			ld a, (.dmark+2)  
c4e5 32 67 ee			ld (debug_mark+2),a  
c4e8 18 03			jr .pastdmark  
c4ea ..			.dmark: db "CO5"  
c4ed f1			.pastdmark: pop af  
c4ee			endm  
# End of macro DMARK
c4ee						CALLMONITOR 
c4ee cd 6f ee			call debug_vector  
c4f1				endm  
# End of macro CALLMONITOR
c4f1					endif 
c4f1			 
c4f1 cd f3 9a				call forth_push_str 
c4f4			 
c4f4			 
c4f4			 
c4f4			 
c4f4				       NEXTW 
c4f4 c3 76 9e			jp macro_next 
c4f7				endm 
# End of macro NEXTW
c4f7			 
c4f7			 
c4f7			.FIND: 
c4f7				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c4f7 4b				db WORD_SYS_CORE+55             
c4f8 b5 c5			dw .LEN            
c4fa 05				db 4 + 1 
c4fb .. 00			db "FIND",0              
c500				endm 
# End of macro CWHEAD
c500			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c500			 
c500					if DEBUG_FORTH_WORDS_KEY 
c500						DMARK "FND" 
c500 f5				push af  
c501 3a 15 c5			ld a, (.dmark)  
c504 32 65 ee			ld (debug_mark),a  
c507 3a 16 c5			ld a, (.dmark+1)  
c50a 32 66 ee			ld (debug_mark+1),a  
c50d 3a 17 c5			ld a, (.dmark+2)  
c510 32 67 ee			ld (debug_mark+2),a  
c513 18 03			jr .pastdmark  
c515 ..			.dmark: db "FND"  
c518 f1			.pastdmark: pop af  
c519			endm  
# End of macro DMARK
c519						CALLMONITOR 
c519 cd 6f ee			call debug_vector  
c51c				endm  
# End of macro CALLMONITOR
c51c					endif 
c51c			 
c51c			; TODO check string type 
c51c					FORTH_DSP_VALUE 
c51c cd 73 9c			call macro_forth_dsp_value 
c51f				endm 
# End of macro FORTH_DSP_VALUE
c51f			 
c51f e5					push hl    
c520 7e					ld a,(hl)    ; char to find   
c521			; TODO change char to substr 
c521			 
c521 f5					push af 
c522					 
c522			 
c522			 
c522					if DEBUG_FORTH_WORDS 
c522						DMARK "FN1" 
c522 f5				push af  
c523 3a 37 c5			ld a, (.dmark)  
c526 32 65 ee			ld (debug_mark),a  
c529 3a 38 c5			ld a, (.dmark+1)  
c52c 32 66 ee			ld (debug_mark+1),a  
c52f 3a 39 c5			ld a, (.dmark+2)  
c532 32 67 ee			ld (debug_mark+2),a  
c535 18 03			jr .pastdmark  
c537 ..			.dmark: db "FN1"  
c53a f1			.pastdmark: pop af  
c53b			endm  
# End of macro DMARK
c53b						CALLMONITOR 
c53b cd 6f ee			call debug_vector  
c53e				endm  
# End of macro CALLMONITOR
c53e					endif 
c53e			 
c53e					FORTH_DSP_POP 
c53e cd 42 9d			call macro_forth_dsp_pop 
c541				endm 
# End of macro FORTH_DSP_POP
c541			 
c541					; string to search 
c541			 
c541					FORTH_DSP_VALUE 
c541 cd 73 9c			call macro_forth_dsp_value 
c544				endm 
# End of macro FORTH_DSP_VALUE
c544			 
c544 d1					pop de  ; d is char to find  
c545			 
c545					if DEBUG_FORTH_WORDS 
c545						DMARK "FN2" 
c545 f5				push af  
c546 3a 5a c5			ld a, (.dmark)  
c549 32 65 ee			ld (debug_mark),a  
c54c 3a 5b c5			ld a, (.dmark+1)  
c54f 32 66 ee			ld (debug_mark+1),a  
c552 3a 5c c5			ld a, (.dmark+2)  
c555 32 67 ee			ld (debug_mark+2),a  
c558 18 03			jr .pastdmark  
c55a ..			.dmark: db "FN2"  
c55d f1			.pastdmark: pop af  
c55e			endm  
# End of macro DMARK
c55e						CALLMONITOR 
c55e cd 6f ee			call debug_vector  
c561				endm  
# End of macro CALLMONITOR
c561					endif 
c561					 
c561 01 00 00				ld bc, 0 
c564 7e			.findchar:      ld a,(hl) 
c565 fe 00				cp 0   		 
c567 28 27				jr z, .finddone     
c569 ba					cp d 
c56a 28 20				jr z, .foundchar 
c56c 03					inc bc 
c56d 23					inc hl 
c56e					if DEBUG_FORTH_WORDS 
c56e						DMARK "FN3" 
c56e f5				push af  
c56f 3a 83 c5			ld a, (.dmark)  
c572 32 65 ee			ld (debug_mark),a  
c575 3a 84 c5			ld a, (.dmark+1)  
c578 32 66 ee			ld (debug_mark+1),a  
c57b 3a 85 c5			ld a, (.dmark+2)  
c57e 32 67 ee			ld (debug_mark+2),a  
c581 18 03			jr .pastdmark  
c583 ..			.dmark: db "FN3"  
c586 f1			.pastdmark: pop af  
c587			endm  
# End of macro DMARK
c587						CALLMONITOR 
c587 cd 6f ee			call debug_vector  
c58a				endm  
# End of macro CALLMONITOR
c58a					endif 
c58a 18 d8				jr .findchar 
c58c			 
c58c			 
c58c c5			.foundchar:	push bc 
c58d e1					pop hl 
c58e 18 03				jr .findexit 
c590			 
c590			 
c590							 
c590			 
c590			.finddone:     ; got to end of string with no find 
c590 21 00 00				ld hl, 0 
c593			.findexit: 
c593			 
c593					if DEBUG_FORTH_WORDS 
c593						DMARK "FNd" 
c593 f5				push af  
c594 3a a8 c5			ld a, (.dmark)  
c597 32 65 ee			ld (debug_mark),a  
c59a 3a a9 c5			ld a, (.dmark+1)  
c59d 32 66 ee			ld (debug_mark+1),a  
c5a0 3a aa c5			ld a, (.dmark+2)  
c5a3 32 67 ee			ld (debug_mark+2),a  
c5a6 18 03			jr .pastdmark  
c5a8 ..			.dmark: db "FNd"  
c5ab f1			.pastdmark: pop af  
c5ac			endm  
# End of macro DMARK
c5ac						CALLMONITOR 
c5ac cd 6f ee			call debug_vector  
c5af				endm  
# End of macro CALLMONITOR
c5af					endif 
c5af cd 85 9a			call forth_push_numhl 
c5b2			 
c5b2				       NEXTW 
c5b2 c3 76 9e			jp macro_next 
c5b5				endm 
# End of macro NEXTW
c5b5			 
c5b5			.LEN: 
c5b5				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c5b5 4c				db WORD_SYS_CORE+56             
c5b6 1f c6			dw .ASC            
c5b8 06				db 5 + 1 
c5b9 .. 00			db "COUNT",0              
c5bf				endm 
# End of macro CWHEAD
c5bf			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c5bf			 
c5bf					if DEBUG_FORTH_WORDS_KEY 
c5bf						DMARK "CNT" 
c5bf f5				push af  
c5c0 3a d4 c5			ld a, (.dmark)  
c5c3 32 65 ee			ld (debug_mark),a  
c5c6 3a d5 c5			ld a, (.dmark+1)  
c5c9 32 66 ee			ld (debug_mark+1),a  
c5cc 3a d6 c5			ld a, (.dmark+2)  
c5cf 32 67 ee			ld (debug_mark+2),a  
c5d2 18 03			jr .pastdmark  
c5d4 ..			.dmark: db "CNT"  
c5d7 f1			.pastdmark: pop af  
c5d8			endm  
# End of macro DMARK
c5d8						CALLMONITOR 
c5d8 cd 6f ee			call debug_vector  
c5db				endm  
# End of macro CALLMONITOR
c5db					endif 
c5db			; TODO check string type 
c5db					FORTH_DSP_VALUE 
c5db cd 73 9c			call macro_forth_dsp_value 
c5de				endm 
# End of macro FORTH_DSP_VALUE
c5de			 
c5de			 
c5de					if DEBUG_FORTH_WORDS 
c5de						DMARK "CN?" 
c5de f5				push af  
c5df 3a f3 c5			ld a, (.dmark)  
c5e2 32 65 ee			ld (debug_mark),a  
c5e5 3a f4 c5			ld a, (.dmark+1)  
c5e8 32 66 ee			ld (debug_mark+1),a  
c5eb 3a f5 c5			ld a, (.dmark+2)  
c5ee 32 67 ee			ld (debug_mark+2),a  
c5f1 18 03			jr .pastdmark  
c5f3 ..			.dmark: db "CN?"  
c5f6 f1			.pastdmark: pop af  
c5f7			endm  
# End of macro DMARK
c5f7						CALLMONITOR 
c5f7 cd 6f ee			call debug_vector  
c5fa				endm  
# End of macro CALLMONITOR
c5fa					endif 
c5fa cd 50 90				call strlenz 
c5fd					if DEBUG_FORTH_WORDS 
c5fd						DMARK "CNl" 
c5fd f5				push af  
c5fe 3a 12 c6			ld a, (.dmark)  
c601 32 65 ee			ld (debug_mark),a  
c604 3a 13 c6			ld a, (.dmark+1)  
c607 32 66 ee			ld (debug_mark+1),a  
c60a 3a 14 c6			ld a, (.dmark+2)  
c60d 32 67 ee			ld (debug_mark+2),a  
c610 18 03			jr .pastdmark  
c612 ..			.dmark: db "CNl"  
c615 f1			.pastdmark: pop af  
c616			endm  
# End of macro DMARK
c616						CALLMONITOR 
c616 cd 6f ee			call debug_vector  
c619				endm  
# End of macro CALLMONITOR
c619					endif 
c619			 
c619 cd 85 9a				call forth_push_numhl 
c61c			 
c61c			 
c61c			 
c61c				       NEXTW 
c61c c3 76 9e			jp macro_next 
c61f				endm 
# End of macro NEXTW
c61f			.ASC: 
c61f				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c61f 4d				db WORD_SYS_CORE+57             
c620 8d c6			dw .CHR            
c622 04				db 3 + 1 
c623 .. 00			db "ASC",0              
c627				endm 
# End of macro CWHEAD
c627			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c627					if DEBUG_FORTH_WORDS_KEY 
c627						DMARK "ASC" 
c627 f5				push af  
c628 3a 3c c6			ld a, (.dmark)  
c62b 32 65 ee			ld (debug_mark),a  
c62e 3a 3d c6			ld a, (.dmark+1)  
c631 32 66 ee			ld (debug_mark+1),a  
c634 3a 3e c6			ld a, (.dmark+2)  
c637 32 67 ee			ld (debug_mark+2),a  
c63a 18 03			jr .pastdmark  
c63c ..			.dmark: db "ASC"  
c63f f1			.pastdmark: pop af  
c640			endm  
# End of macro DMARK
c640						CALLMONITOR 
c640 cd 6f ee			call debug_vector  
c643				endm  
# End of macro CALLMONITOR
c643					endif 
c643					FORTH_DSP_VALUE 
c643 cd 73 9c			call macro_forth_dsp_value 
c646				endm 
# End of macro FORTH_DSP_VALUE
c646					;v5 FORTH_DSP_VALUE 
c646			;		inc hl      ; now at start of numeric as string 
c646			 
c646 e5					push hl 
c647			 
c647					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c647 cd 42 9d			call macro_forth_dsp_pop 
c64a				endm 
# End of macro FORTH_DSP_POP
c64a			 
c64a e1					pop hl 
c64b			 
c64b					if DEBUG_FORTH_WORDS 
c64b						DMARK "AS1" 
c64b f5				push af  
c64c 3a 60 c6			ld a, (.dmark)  
c64f 32 65 ee			ld (debug_mark),a  
c652 3a 61 c6			ld a, (.dmark+1)  
c655 32 66 ee			ld (debug_mark+1),a  
c658 3a 62 c6			ld a, (.dmark+2)  
c65b 32 67 ee			ld (debug_mark+2),a  
c65e 18 03			jr .pastdmark  
c660 ..			.dmark: db "AS1"  
c663 f1			.pastdmark: pop af  
c664			endm  
# End of macro DMARK
c664						CALLMONITOR 
c664 cd 6f ee			call debug_vector  
c667				endm  
# End of macro CALLMONITOR
c667					endif 
c667					; push the content of a onto the stack as a value 
c667			 
c667 7e					ld a,(hl)   ; get char 
c668 26 00				ld h,0 
c66a 6f					ld l,a 
c66b					if DEBUG_FORTH_WORDS 
c66b						DMARK "AS2" 
c66b f5				push af  
c66c 3a 80 c6			ld a, (.dmark)  
c66f 32 65 ee			ld (debug_mark),a  
c672 3a 81 c6			ld a, (.dmark+1)  
c675 32 66 ee			ld (debug_mark+1),a  
c678 3a 82 c6			ld a, (.dmark+2)  
c67b 32 67 ee			ld (debug_mark+2),a  
c67e 18 03			jr .pastdmark  
c680 ..			.dmark: db "AS2"  
c683 f1			.pastdmark: pop af  
c684			endm  
# End of macro DMARK
c684						CALLMONITOR 
c684 cd 6f ee			call debug_vector  
c687				endm  
# End of macro CALLMONITOR
c687					endif 
c687 cd 85 9a				call forth_push_numhl 
c68a			 
c68a				       NEXTW 
c68a c3 76 9e			jp macro_next 
c68d				endm 
# End of macro NEXTW
c68d			 
c68d			.CHR: 
c68d				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c68d 4d				db WORD_SYS_CORE+57             
c68e c9 c6			dw .ENDSTR            
c690 04				db 3 + 1 
c691 .. 00			db "CHR",0              
c695				endm 
# End of macro CWHEAD
c695			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c695					if DEBUG_FORTH_WORDS_KEY 
c695						DMARK "CHR" 
c695 f5				push af  
c696 3a aa c6			ld a, (.dmark)  
c699 32 65 ee			ld (debug_mark),a  
c69c 3a ab c6			ld a, (.dmark+1)  
c69f 32 66 ee			ld (debug_mark+1),a  
c6a2 3a ac c6			ld a, (.dmark+2)  
c6a5 32 67 ee			ld (debug_mark+2),a  
c6a8 18 03			jr .pastdmark  
c6aa ..			.dmark: db "CHR"  
c6ad f1			.pastdmark: pop af  
c6ae			endm  
# End of macro DMARK
c6ae						CALLMONITOR 
c6ae cd 6f ee			call debug_vector  
c6b1				endm  
# End of macro CALLMONITOR
c6b1					endif 
c6b1					FORTH_DSP_VALUEHL 
c6b1 cd 8a 9c			call macro_dsp_valuehl 
c6b4				endm 
# End of macro FORTH_DSP_VALUEHL
c6b4			 
c6b4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c6b4 cd 42 9d			call macro_forth_dsp_pop 
c6b7				endm 
# End of macro FORTH_DSP_POP
c6b7			 
c6b7					; save asci byte as a zero term string and push string 
c6b7			 
c6b7 7d					ld a,l 
c6b8 32 bb e2				ld (scratch), a 
c6bb			 
c6bb 3e 00				ld a, 0 
c6bd 32 bc e2				ld (scratch+1), a 
c6c0			 
c6c0 21 bb e2				ld hl, scratch 
c6c3 cd f3 9a				call forth_push_str 
c6c6			 
c6c6			 
c6c6				       NEXTW 
c6c6 c3 76 9e			jp macro_next 
c6c9				endm 
# End of macro NEXTW
c6c9			 
c6c9			 
c6c9			 
c6c9			 
c6c9			.ENDSTR: 
c6c9			; eof 
c6c9			 
# End of file forth_words_str.asm
c6c9			include "forth_words_key.asm" 
c6c9			 
c6c9			; | ## Keyboard Words 
c6c9			 
c6c9			.KEY: 
c6c9				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
c6c9 3e				db WORD_SYS_CORE+42             
c6ca f9 c6			dw .WAITK            
c6cc 04				db 3 + 1 
c6cd .. 00			db "KEY",0              
c6d1				endm 
# End of macro CWHEAD
c6d1			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
c6d1			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c6d1			; | | Can use something like this to process: 
c6d1			; | | > repeat active . key ?dup if emit then #1 until  
c6d1			 
c6d1					if DEBUG_FORTH_WORDS_KEY 
c6d1						DMARK "KEY" 
c6d1 f5				push af  
c6d2 3a e6 c6			ld a, (.dmark)  
c6d5 32 65 ee			ld (debug_mark),a  
c6d8 3a e7 c6			ld a, (.dmark+1)  
c6db 32 66 ee			ld (debug_mark+1),a  
c6de 3a e8 c6			ld a, (.dmark+2)  
c6e1 32 67 ee			ld (debug_mark+2),a  
c6e4 18 03			jr .pastdmark  
c6e6 ..			.dmark: db "KEY"  
c6e9 f1			.pastdmark: pop af  
c6ea			endm  
# End of macro DMARK
c6ea						CALLMONITOR 
c6ea cd 6f ee			call debug_vector  
c6ed				endm  
# End of macro CALLMONITOR
c6ed					endif 
c6ed			; TODO currently waits 
c6ed cd a0 dd				call cin 
c6f0					;call cin_wait 
c6f0 6f					ld l, a 
c6f1 26 00				ld h, 0 
c6f3 cd 85 9a				call forth_push_numhl 
c6f6					NEXTW 
c6f6 c3 76 9e			jp macro_next 
c6f9				endm 
# End of macro NEXTW
c6f9			.WAITK: 
c6f9				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c6f9 3f				db WORD_SYS_CORE+43             
c6fa 2b c7			dw .ACCEPT            
c6fc 06				db 5 + 1 
c6fd .. 00			db "WAITK",0              
c703				endm 
# End of macro CWHEAD
c703			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c703					if DEBUG_FORTH_WORDS_KEY 
c703						DMARK "WAI" 
c703 f5				push af  
c704 3a 18 c7			ld a, (.dmark)  
c707 32 65 ee			ld (debug_mark),a  
c70a 3a 19 c7			ld a, (.dmark+1)  
c70d 32 66 ee			ld (debug_mark+1),a  
c710 3a 1a c7			ld a, (.dmark+2)  
c713 32 67 ee			ld (debug_mark+2),a  
c716 18 03			jr .pastdmark  
c718 ..			.dmark: db "WAI"  
c71b f1			.pastdmark: pop af  
c71c			endm  
# End of macro DMARK
c71c						CALLMONITOR 
c71c cd 6f ee			call debug_vector  
c71f				endm  
# End of macro CALLMONITOR
c71f					endif 
c71f cd 9a dd				call cin_wait 
c722 6f					ld l, a 
c723 26 00				ld h, 0 
c725 cd 85 9a				call forth_push_numhl 
c728					NEXTW 
c728 c3 76 9e			jp macro_next 
c72b				endm 
# End of macro NEXTW
c72b			.ACCEPT: 
c72b				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c72b 40				db WORD_SYS_CORE+44             
c72c 89 c7			dw .EDIT            
c72e 07				db 6 + 1 
c72f .. 00			db "ACCEPT",0              
c736				endm 
# End of macro CWHEAD
c736			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c736					; TODO crashes on push 
c736					if DEBUG_FORTH_WORDS_KEY 
c736						DMARK "ACC" 
c736 f5				push af  
c737 3a 4b c7			ld a, (.dmark)  
c73a 32 65 ee			ld (debug_mark),a  
c73d 3a 4c c7			ld a, (.dmark+1)  
c740 32 66 ee			ld (debug_mark+1),a  
c743 3a 4d c7			ld a, (.dmark+2)  
c746 32 67 ee			ld (debug_mark+2),a  
c749 18 03			jr .pastdmark  
c74b ..			.dmark: db "ACC"  
c74e f1			.pastdmark: pop af  
c74f			endm  
# End of macro DMARK
c74f						CALLMONITOR 
c74f cd 6f ee			call debug_vector  
c752				endm  
# End of macro CALLMONITOR
c752					endif 
c752 21 b9 e4				ld hl, os_input 
c755 3e 00				ld a, 0 
c757 77					ld (hl),a 
c758 3a 58 ea				ld a,(f_cursor_ptr) 
c75b 16 64				ld d, 100 
c75d 0e 00				ld c, 0 
c75f 1e 28				ld e, 40 
c761 cd 17 8d				call input_str 
c764					; TODO perhaps do a type check and wrap in quotes if not a number 
c764 21 b9 e4				ld hl, os_input 
c767					if DEBUG_FORTH_WORDS 
c767						DMARK "AC1" 
c767 f5				push af  
c768 3a 7c c7			ld a, (.dmark)  
c76b 32 65 ee			ld (debug_mark),a  
c76e 3a 7d c7			ld a, (.dmark+1)  
c771 32 66 ee			ld (debug_mark+1),a  
c774 3a 7e c7			ld a, (.dmark+2)  
c777 32 67 ee			ld (debug_mark+2),a  
c77a 18 03			jr .pastdmark  
c77c ..			.dmark: db "AC1"  
c77f f1			.pastdmark: pop af  
c780			endm  
# End of macro DMARK
c780						CALLMONITOR 
c780 cd 6f ee			call debug_vector  
c783				endm  
# End of macro CALLMONITOR
c783					endif 
c783 cd f3 9a				call forth_push_str 
c786					NEXTW 
c786 c3 76 9e			jp macro_next 
c789				endm 
# End of macro NEXTW
c789			 
c789			.EDIT: 
c789				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
c789 40				db WORD_SYS_CORE+44             
c78a 2b c8			dw .DEDIT            
c78c 05				db 4 + 1 
c78d .. 00			db "EDIT",0              
c792				endm 
# End of macro CWHEAD
c792			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
c792			 
c792					; TODO does not copy from stack 
c792					if DEBUG_FORTH_WORDS_KEY 
c792						DMARK "EDT" 
c792 f5				push af  
c793 3a a7 c7			ld a, (.dmark)  
c796 32 65 ee			ld (debug_mark),a  
c799 3a a8 c7			ld a, (.dmark+1)  
c79c 32 66 ee			ld (debug_mark+1),a  
c79f 3a a9 c7			ld a, (.dmark+2)  
c7a2 32 67 ee			ld (debug_mark+2),a  
c7a5 18 03			jr .pastdmark  
c7a7 ..			.dmark: db "EDT"  
c7aa f1			.pastdmark: pop af  
c7ab			endm  
# End of macro DMARK
c7ab						CALLMONITOR 
c7ab cd 6f ee			call debug_vector  
c7ae				endm  
# End of macro CALLMONITOR
c7ae					endif 
c7ae			 
c7ae					;FORTH_DSP 
c7ae					FORTH_DSP_VALUEHL 
c7ae cd 8a 9c			call macro_dsp_valuehl 
c7b1				endm 
# End of macro FORTH_DSP_VALUEHL
c7b1			;		inc hl    ; TODO do type check 
c7b1			 
c7b1			;		call get_word_hl 
c7b1 e5					push hl 
c7b2					if DEBUG_FORTH_WORDS 
c7b2						DMARK "EDp" 
c7b2 f5				push af  
c7b3 3a c7 c7			ld a, (.dmark)  
c7b6 32 65 ee			ld (debug_mark),a  
c7b9 3a c8 c7			ld a, (.dmark+1)  
c7bc 32 66 ee			ld (debug_mark+1),a  
c7bf 3a c9 c7			ld a, (.dmark+2)  
c7c2 32 67 ee			ld (debug_mark+2),a  
c7c5 18 03			jr .pastdmark  
c7c7 ..			.dmark: db "EDp"  
c7ca f1			.pastdmark: pop af  
c7cb			endm  
# End of macro DMARK
c7cb						CALLMONITOR 
c7cb cd 6f ee			call debug_vector  
c7ce				endm  
# End of macro CALLMONITOR
c7ce					endif 
c7ce				;	ld a, 0 
c7ce cd 50 90				call strlenz 
c7d1 23					inc hl 
c7d2			 
c7d2 06 00				ld b, 0 
c7d4 4d					ld c, l 
c7d5			 
c7d5 e1					pop hl 
c7d6 11 b9 e4				ld de, os_input 
c7d9					if DEBUG_FORTH_WORDS_KEY 
c7d9						DMARK "EDc" 
c7d9 f5				push af  
c7da 3a ee c7			ld a, (.dmark)  
c7dd 32 65 ee			ld (debug_mark),a  
c7e0 3a ef c7			ld a, (.dmark+1)  
c7e3 32 66 ee			ld (debug_mark+1),a  
c7e6 3a f0 c7			ld a, (.dmark+2)  
c7e9 32 67 ee			ld (debug_mark+2),a  
c7ec 18 03			jr .pastdmark  
c7ee ..			.dmark: db "EDc"  
c7f1 f1			.pastdmark: pop af  
c7f2			endm  
# End of macro DMARK
c7f2						CALLMONITOR 
c7f2 cd 6f ee			call debug_vector  
c7f5				endm  
# End of macro CALLMONITOR
c7f5					endif 
c7f5 ed b0				ldir 
c7f7			 
c7f7			 
c7f7 21 b9 e4				ld hl, os_input 
c7fa					;ld a, 0 
c7fa					;ld (hl),a 
c7fa 3a 58 ea				ld a,(f_cursor_ptr) 
c7fd 16 64				ld d, 100 
c7ff 0e 00				ld c, 0 
c801 1e 28				ld e, 40 
c803 cd 17 8d				call input_str 
c806					; TODO perhaps do a type check and wrap in quotes if not a number 
c806 21 b9 e4				ld hl, os_input 
c809					if DEBUG_FORTH_WORDS 
c809						DMARK "ED1" 
c809 f5				push af  
c80a 3a 1e c8			ld a, (.dmark)  
c80d 32 65 ee			ld (debug_mark),a  
c810 3a 1f c8			ld a, (.dmark+1)  
c813 32 66 ee			ld (debug_mark+1),a  
c816 3a 20 c8			ld a, (.dmark+2)  
c819 32 67 ee			ld (debug_mark+2),a  
c81c 18 03			jr .pastdmark  
c81e ..			.dmark: db "ED1"  
c821 f1			.pastdmark: pop af  
c822			endm  
# End of macro DMARK
c822						CALLMONITOR 
c822 cd 6f ee			call debug_vector  
c825				endm  
# End of macro CALLMONITOR
c825					endif 
c825 cd f3 9a				call forth_push_str 
c828					NEXTW 
c828 c3 76 9e			jp macro_next 
c82b				endm 
# End of macro NEXTW
c82b			 
c82b			.DEDIT: 
c82b				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
c82b 40				db WORD_SYS_CORE+44             
c82c 8d c8			dw .ENDKEY            
c82e 06				db 5 + 1 
c82f .. 00			db "DEDIT",0              
c835				endm 
# End of macro CWHEAD
c835			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
c835			 
c835					; TODO does not copy from stack 
c835					if DEBUG_FORTH_WORDS_KEY 
c835						DMARK "DED" 
c835 f5				push af  
c836 3a 4a c8			ld a, (.dmark)  
c839 32 65 ee			ld (debug_mark),a  
c83c 3a 4b c8			ld a, (.dmark+1)  
c83f 32 66 ee			ld (debug_mark+1),a  
c842 3a 4c c8			ld a, (.dmark+2)  
c845 32 67 ee			ld (debug_mark+2),a  
c848 18 03			jr .pastdmark  
c84a ..			.dmark: db "DED"  
c84d f1			.pastdmark: pop af  
c84e			endm  
# End of macro DMARK
c84e						CALLMONITOR 
c84e cd 6f ee			call debug_vector  
c851				endm  
# End of macro CALLMONITOR
c851					endif 
c851			 
c851					;FORTH_DSP 
c851					FORTH_DSP_VALUEHL 
c851 cd 8a 9c			call macro_dsp_valuehl 
c854				endm 
# End of macro FORTH_DSP_VALUEHL
c854			;		inc hl    ; TODO do type check 
c854			 
c854			;		call get_word_hl 
c854 e5					push hl 
c855 e5					push hl 
c856					FORTH_DSP_POP 
c856 cd 42 9d			call macro_forth_dsp_pop 
c859				endm 
# End of macro FORTH_DSP_POP
c859 e1					pop hl 
c85a					if DEBUG_FORTH_WORDS 
c85a						DMARK "EDp" 
c85a f5				push af  
c85b 3a 6f c8			ld a, (.dmark)  
c85e 32 65 ee			ld (debug_mark),a  
c861 3a 70 c8			ld a, (.dmark+1)  
c864 32 66 ee			ld (debug_mark+1),a  
c867 3a 71 c8			ld a, (.dmark+2)  
c86a 32 67 ee			ld (debug_mark+2),a  
c86d 18 03			jr .pastdmark  
c86f ..			.dmark: db "EDp"  
c872 f1			.pastdmark: pop af  
c873			endm  
# End of macro DMARK
c873						CALLMONITOR 
c873 cd 6f ee			call debug_vector  
c876				endm  
# End of macro CALLMONITOR
c876					endif 
c876				;	ld a, 0 
c876 cd 50 90				call strlenz 
c879 23					inc hl 
c87a			 
c87a 06 00				ld b, 0 
c87c 4d					ld c, l 
c87d			 
c87d e1					pop hl 
c87e			 
c87e					;ld a, 0 
c87e					;ld (hl),a 
c87e 3a 58 ea				ld a,(f_cursor_ptr) 
c881 16 64				ld d, 100 
c883 0e 00				ld c, 0 
c885 1e 28				ld e, 40 
c887 cd 17 8d				call input_str 
c88a					; TODO perhaps do a type check and wrap in quotes if not a number 
c88a					NEXTW 
c88a c3 76 9e			jp macro_next 
c88d				endm 
# End of macro NEXTW
c88d			 
c88d			 
c88d			.ENDKEY: 
c88d			; eof 
c88d			 
# End of file forth_words_key.asm
c88d			include "forth_words_const.asm" 
c88d			 
c88d			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
c88d			 
c88d			 
c88d			.SPITIME: 
c88d				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
c88d 77				db WORD_SYS_CORE+99             
c88e a2 c8			dw .VA            
c890 08				db 7 + 1 
c891 .. 00			db "SPITIME",0              
c899				endm 
# End of macro CWHEAD
c899			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
c899			; 
c899			; | | If using BANK devices then leave as is. 
c899			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
c899			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
c899			 
c899 21 5e ea				ld hl, spi_clktime  
c89c cd 85 9a				call forth_push_numhl 
c89f			 
c89f					NEXTW 
c89f c3 76 9e			jp macro_next 
c8a2				endm 
# End of macro NEXTW
c8a2			 
c8a2			 
c8a2			.VA: 
c8a2				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
c8a2 77				db WORD_SYS_CORE+99             
c8a3 b2 c8			dw .SYMBOL            
c8a5 03				db 2 + 1 
c8a6 .. 00			db "VA",0              
c8a9				endm 
# End of macro CWHEAD
c8a9			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
c8a9 21 22 ea				ld hl, cli_var_array 
c8ac cd 85 9a				call forth_push_numhl 
c8af			 
c8af					NEXTW 
c8af c3 76 9e			jp macro_next 
c8b2				endm 
# End of macro NEXTW
c8b2			 
c8b2			.SYMBOL: 
c8b2				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
c8b2 77				db WORD_SYS_CORE+99             
c8b3 bc c9			dw .ENDCONST            
c8b5 07				db 6 + 1 
c8b6 .. 00			db "SYMBOL",0              
c8bd				endm 
# End of macro CWHEAD
c8bd			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
c8bd			; | 
c8bd			; | | The value is the number reference and the final address is pushed to stack 
c8bd			 
c8bd			; | | ``` 
c8bd			; | | dw sym_table 
c8bd			; | | dw nmi_vector 
c8bd			; | | dw cli_autodisplay 
c8bd			; | | dw cli_data_sp 
c8bd			; | | dw cli_data_stack 
c8bd			; | | dw cli_loop_sp 
c8bd			; | | dw cli_loop_stack 
c8bd			; | | dw cli_var_array 
c8bd			; | | dw cursor_col 
c8bd			; | | dw cursor_ptr 
c8bd			; | | ; 10 
c8bd			; | | dw cursor_row 
c8bd			; | | dw debug_mark 
c8bd			; | | dw display_fb0 
c8bd			; | | dw display_fb1 
c8bd			; | | dw display_fb2 
c8bd			; | | dw display_fb3 
c8bd			; | | dw display_fb_active 
c8bd			; | | dw execscratch 
c8bd			; | | dw f_cursor_ptr 
c8bd			; | | dw hardware_word 
c8bd			; | | ;20 
c8bd			; | | dw input_at_cursor 
c8bd			; | | dw input_at_pos 
c8bd			; | | dw input_cur_flash 
c8bd			; | | dw input_cur_onoff 
c8bd			; | | dw input_cursor 
c8bd			; | | dw input_display_size 
c8bd			; | | dw input_len 
c8bd			; | | dw input_ptr 
c8bd			; | | dw input_size 
c8bd			; | | dw input_start 
c8bd			; | | ; 30 
c8bd			; | | dw input_str 
c8bd			; | | dw input_under_cursor 
c8bd			; | | dw os_cli_cmd 
c8bd			; | | dw os_cur_ptr 
c8bd			; | | dw os_current_i 
c8bd			; | | dw os_input 
c8bd			; | | dw os_last_cmd 
c8bd			; | | dw os_last_new_uword 
c8bd			; | | dw debug_vector 
c8bd			; | | dw os_view_hl 
c8bd			; | | ;40 
c8bd			; | | dw os_word_scratch 
c8bd			; | | dw portbctl 
c8bd			; | | dw portbdata 
c8bd			; | | dw spi_cartdev 
c8bd			; | | dw spi_cartdev2 
c8bd			; | | dw spi_clktime 
c8bd			; | | dw spi_device 
c8bd			; | | dw spi_device_id 
c8bd			; | | dw spi_portbyte 
c8bd			; | | dw stackstore 
c8bd			; | | ; 50 
c8bd			; | | if STORAGE_SE 
c8bd			; | | dw storage_actl 
c8bd			; | | dw storage_adata 
c8bd			; | | else 
c8bd			; | | dw 0 
c8bd			; | | dw 0 
c8bd			; | | endif 
c8bd			; | | dw storage_append 
c8bd			; | | if STORAGE_SE 
c8bd			; | | dw storage_bctl 
c8bd			; | | else 
c8bd			; | | dw 0 
c8bd			; | | endif 
c8bd			; | | dw store_bank_active 
c8bd			; | | dw store_filecache 
c8bd			; | | dw store_longread 
c8bd			; | | dw store_openaddr 
c8bd			; | | dw store_openext 
c8bd			; | | dw store_openmaxext 
c8bd			; | | ; 60 
c8bd			; | | dw store_page 
c8bd			; | | dw store_readbuf 
c8bd			; | | dw store_readcont 
c8bd			; | | dw store_readptr 
c8bd			; | | dw store_tmpext 
c8bd			; | | dw store_tmpid 
c8bd			; | | dw store_tmppageid 
c8bd			; | | dw malloc 
c8bd			; | | dw free 
c8bd			; | | dw cin 
c8bd			; | | ; 70 
c8bd			; | | dw cin_wait 
c8bd			; | | dw forth_push_numhl 
c8bd			; | | dw forth_push_str 
c8bd			; | | ``` 
c8bd			 
c8bd					if DEBUG_FORTH_WORDS_KEY 
c8bd						DMARK "SYM" 
c8bd f5				push af  
c8be 3a d2 c8			ld a, (.dmark)  
c8c1 32 65 ee			ld (debug_mark),a  
c8c4 3a d3 c8			ld a, (.dmark+1)  
c8c7 32 66 ee			ld (debug_mark+1),a  
c8ca 3a d4 c8			ld a, (.dmark+2)  
c8cd 32 67 ee			ld (debug_mark+2),a  
c8d0 18 03			jr .pastdmark  
c8d2 ..			.dmark: db "SYM"  
c8d5 f1			.pastdmark: pop af  
c8d6			endm  
# End of macro DMARK
c8d6						CALLMONITOR 
c8d6 cd 6f ee			call debug_vector  
c8d9				endm  
# End of macro CALLMONITOR
c8d9					endif 
c8d9			 
c8d9					FORTH_DSP_VALUEHL 
c8d9 cd 8a 9c			call macro_dsp_valuehl 
c8dc				endm 
# End of macro FORTH_DSP_VALUEHL
c8dc			 
c8dc 7d					ld a, l     
c8dd			 
c8dd			 
c8dd					if DEBUG_FORTH_WORDS 
c8dd						DMARK "SY1" 
c8dd f5				push af  
c8de 3a f2 c8			ld a, (.dmark)  
c8e1 32 65 ee			ld (debug_mark),a  
c8e4 3a f3 c8			ld a, (.dmark+1)  
c8e7 32 66 ee			ld (debug_mark+1),a  
c8ea 3a f4 c8			ld a, (.dmark+2)  
c8ed 32 67 ee			ld (debug_mark+2),a  
c8f0 18 03			jr .pastdmark  
c8f2 ..			.dmark: db "SY1"  
c8f5 f1			.pastdmark: pop af  
c8f6			endm  
# End of macro DMARK
c8f6						CALLMONITOR 
c8f6 cd 6f ee			call debug_vector  
c8f9				endm  
# End of macro CALLMONITOR
c8f9					endif 
c8f9					 
c8f9 f5					push af	 
c8fa					FORTH_DSP_POP 
c8fa cd 42 9d			call macro_forth_dsp_pop 
c8fd				endm 
# End of macro FORTH_DSP_POP
c8fd f1					pop af 
c8fe			 
c8fe cb 27				sla a  
c900				 
c900					 
c900					if DEBUG_FORTH_WORDS 
c900						DMARK "SY" 
c900 f5				push af  
c901 3a 15 c9			ld a, (.dmark)  
c904 32 65 ee			ld (debug_mark),a  
c907 3a 16 c9			ld a, (.dmark+1)  
c90a 32 66 ee			ld (debug_mark+1),a  
c90d 3a 17 c9			ld a, (.dmark+2)  
c910 32 67 ee			ld (debug_mark+2),a  
c913 18 02			jr .pastdmark  
c915 ..			.dmark: db "SY"  
c917 f1			.pastdmark: pop af  
c918			endm  
# End of macro DMARK
c918						CALLMONITOR 
c918 cd 6f ee			call debug_vector  
c91b				endm  
# End of macro CALLMONITOR
c91b					endif 
c91b			 
c91b 21 2a c9				ld hl, sym_table 
c91e cd ea 8c				call addatohl 
c921 cd f8 9d				call loadwordinhl 
c924 cd 85 9a				call forth_push_numhl 
c927			 
c927			 
c927				       NEXTW 
c927 c3 76 9e			jp macro_next 
c92a				endm 
# End of macro NEXTW
c92a			 
c92a			sym_table: 
c92a			 
c92a			; 0 
c92a 2a c9		dw sym_table 
c92c 72 ee		dw nmi_vector 
c92e 36 ea		dw cli_autodisplay 
c930 e8 e9		dw cli_data_sp 
c932 22 e8		dw cli_data_stack 
c934 ea e9		dw cli_loop_sp 
c936 24 e9		dw cli_loop_stack 
c938 22 ea		dw cli_var_array 
c93a bf eb		dw cursor_col 
c93c bd eb		dw cursor_ptr 
c93e			; 10 
c93e be eb		dw cursor_row 
c940 65 ee		dw debug_mark 
c942 ab ed		dw display_fb0 
c944 0a ed		dw display_fb1 
c946 c8 eb		dw display_fb2 
c948 69 ec		dw display_fb3 
c94a c6 eb		dw display_fb_active 
c94c ba e3		dw execscratch 
c94e 58 ea		dw f_cursor_ptr 
c950 75 ee		dw hardware_word 
c952			;20 
c952 5c ee		dw input_at_cursor 
c954 5e ee		dw input_at_pos 
c956 5a ee		dw input_cur_flash 
c958 59 ee		dw input_cur_onoff 
c95a 4f ee		dw input_cursor 
c95c 5f ee		dw input_display_size 
c95e 54 ee		dw input_len 
c960 63 ee		dw input_ptr 
c962 60 ee		dw input_size 
c964 61 ee		dw input_start 
c966			; 30 
c966 17 8d		dw input_str 
c968 5d ee		dw input_under_cursor 
c96a e2 e5		dw os_cli_cmd 
c96c de e5		dw os_cur_ptr 
c96e e0 e5		dw os_current_i 
c970 b9 e4		dw os_input 
c972 e1 e6		dw os_last_cmd 
c974 b8 e5		dw os_last_new_uword 
c976 6f ee		dw debug_vector 
c978 9d e2		dw os_view_hl 
c97a			;40 
c97a c0 e5		dw os_word_scratch 
c97c c3 00		dw portbctl 
c97e c1 00		dw portbdata 
c980 5d ea		dw spi_cartdev 
c982 5c ea		dw spi_cartdev2 
c984 5e ea		dw spi_clktime 
c986 5a ea		dw spi_device 
c988 59 ea		dw spi_device_id 
c98a 5b ea		dw spi_portbyte 
c98c a1 eb		dw stackstore 
c98e			; 50 
c98e			if STORAGE_SE 
c98e			dw storage_actl 
c98e			dw storage_adata 
c98e			else 
c98e 00 00		dw 0 
c990 00 00		dw 0 
c992			endif 
c992 77 88		dw storage_append 
c994			if STORAGE_SE 
c994			dw storage_bctl 
c994			else 
c994 00 00		dw 0 
c996			endif 
c996 8d eb		dw store_bank_active 
c998 61 ea		dw store_filecache 
c99a 6f ea		dw store_longread 
c99c 65 ea		dw store_openaddr 
c99e 64 ea		dw store_openext 
c9a0 63 ea		dw store_openmaxext 
c9a2			; 60 
c9a2 74 ea		dw store_page 
c9a4 70 ea		dw store_readbuf 
c9a6 67 ea		dw store_readcont 
c9a8 72 ea		dw store_readptr 
c9aa 67 ea		dw store_tmpext 
c9ac 68 ea		dw store_tmpid 
c9ae 5f ea		dw store_tmppageid 
c9b0 c5 90		dw malloc 
c9b2 8f 91		dw free 
c9b4 a0 dd		dw cin 
c9b6			; 70 
c9b6 9a dd		dw cin_wait 
c9b8 85 9a		dw forth_push_numhl 
c9ba f3 9a		dw forth_push_str 
c9bc			 
c9bc			 
c9bc			.ENDCONST: 
c9bc			 
c9bc			; eof 
c9bc			 
c9bc			 
# End of file forth_words_const.asm
c9bc			 
c9bc			if STORAGE_SE 
c9bc			   	include "forth_words_storage.asm" 
c9bc			endif 
c9bc				include "forth_words_device.asm" 
c9bc			; Device related words 
c9bc			 
c9bc			; | ## Device Words 
c9bc			 
c9bc			;if SOUND_ENABLE 
c9bc			;.NOTE: 
c9bc			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
c9bc			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
c9bc			;		if DEBUG_FORTH_WORDS_KEY 
c9bc			;			DMARK "NTE" 
c9bc			;			CALLMONITOR 
c9bc			;		endif 
c9bc			; 
c9bc			;	 
c9bc			; 
c9bc			;		NEXTW 
c9bc			;.AFTERSOUND: 
c9bc			;endif 
c9bc			 
c9bc			 
c9bc			USE_GPIO: equ 0 
c9bc			 
c9bc			if USE_GPIO 
c9bc			.GP1: 
c9bc				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
c9bc			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
c9bc					NEXTW 
c9bc			.GP2: 
c9bc				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
c9bc			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
c9bc			 
c9bc					NEXTW 
c9bc			 
c9bc			.GP3: 
c9bc				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
c9bc			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
c9bc			 
c9bc					NEXTW 
c9bc			 
c9bc			.GP4: 
c9bc				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
c9bc			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
c9bc			 
c9bc					NEXTW 
c9bc			.SIN: 
c9bc			 
c9bc			 
c9bc			endif 
c9bc			 
c9bc			 
c9bc				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
c9bc 33				db WORD_SYS_CORE+31             
c9bd f1 c9			dw .SOUT            
c9bf 03				db 2 + 1 
c9c0 .. 00			db "IN",0              
c9c3				endm 
# End of macro CWHEAD
c9c3			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
c9c3					if DEBUG_FORTH_WORDS_KEY 
c9c3						DMARK "IN." 
c9c3 f5				push af  
c9c4 3a d8 c9			ld a, (.dmark)  
c9c7 32 65 ee			ld (debug_mark),a  
c9ca 3a d9 c9			ld a, (.dmark+1)  
c9cd 32 66 ee			ld (debug_mark+1),a  
c9d0 3a da c9			ld a, (.dmark+2)  
c9d3 32 67 ee			ld (debug_mark+2),a  
c9d6 18 03			jr .pastdmark  
c9d8 ..			.dmark: db "IN."  
c9db f1			.pastdmark: pop af  
c9dc			endm  
# End of macro DMARK
c9dc						CALLMONITOR 
c9dc cd 6f ee			call debug_vector  
c9df				endm  
# End of macro CALLMONITOR
c9df					endif 
c9df					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9df cd 8a 9c			call macro_dsp_valuehl 
c9e2				endm 
# End of macro FORTH_DSP_VALUEHL
c9e2			 
c9e2 e5					push hl 
c9e3			 
c9e3					; destroy value TOS 
c9e3			 
c9e3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9e3 cd 42 9d			call macro_forth_dsp_pop 
c9e6				endm 
# End of macro FORTH_DSP_POP
c9e6			 
c9e6					; one value on hl get other one back 
c9e6			 
c9e6 c1					pop bc 
c9e7			 
c9e7					; do the sub 
c9e7			;		ex de, hl 
c9e7			 
c9e7 ed 68				in l,(c) 
c9e9			 
c9e9					; save it 
c9e9			 
c9e9 26 00				ld h,0 
c9eb			 
c9eb					; TODO push value back onto stack for another op etc 
c9eb			 
c9eb cd 85 9a				call forth_push_numhl 
c9ee					NEXTW 
c9ee c3 76 9e			jp macro_next 
c9f1				endm 
# End of macro NEXTW
c9f1			.SOUT: 
c9f1				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
c9f1 34				db WORD_SYS_CORE+32             
c9f2 44 ca			dw .SPIO            
c9f4 04				db 3 + 1 
c9f5 .. 00			db "OUT",0              
c9f9				endm 
# End of macro CWHEAD
c9f9			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
c9f9					if DEBUG_FORTH_WORDS_KEY 
c9f9						DMARK "OUT" 
c9f9 f5				push af  
c9fa 3a 0e ca			ld a, (.dmark)  
c9fd 32 65 ee			ld (debug_mark),a  
ca00 3a 0f ca			ld a, (.dmark+1)  
ca03 32 66 ee			ld (debug_mark+1),a  
ca06 3a 10 ca			ld a, (.dmark+2)  
ca09 32 67 ee			ld (debug_mark+2),a  
ca0c 18 03			jr .pastdmark  
ca0e ..			.dmark: db "OUT"  
ca11 f1			.pastdmark: pop af  
ca12			endm  
# End of macro DMARK
ca12						CALLMONITOR 
ca12 cd 6f ee			call debug_vector  
ca15				endm  
# End of macro CALLMONITOR
ca15					endif 
ca15			 
ca15					; get port 
ca15			 
ca15					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca15 cd 8a 9c			call macro_dsp_valuehl 
ca18				endm 
# End of macro FORTH_DSP_VALUEHL
ca18			 
ca18 e5					push hl 
ca19			 
ca19					; destroy value TOS 
ca19			 
ca19					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca19 cd 42 9d			call macro_forth_dsp_pop 
ca1c				endm 
# End of macro FORTH_DSP_POP
ca1c			 
ca1c					; get byte to send 
ca1c			 
ca1c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca1c cd 8a 9c			call macro_dsp_valuehl 
ca1f				endm 
# End of macro FORTH_DSP_VALUEHL
ca1f			 
ca1f			;		push hl 
ca1f			 
ca1f					; destroy value TOS 
ca1f			 
ca1f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca1f cd 42 9d			call macro_forth_dsp_pop 
ca22				endm 
# End of macro FORTH_DSP_POP
ca22			 
ca22					; one value on hl get other one back 
ca22			 
ca22			;		pop hl 
ca22			 
ca22 c1					pop bc 
ca23			 
ca23					if DEBUG_FORTH_WORDS 
ca23						DMARK "OUT" 
ca23 f5				push af  
ca24 3a 38 ca			ld a, (.dmark)  
ca27 32 65 ee			ld (debug_mark),a  
ca2a 3a 39 ca			ld a, (.dmark+1)  
ca2d 32 66 ee			ld (debug_mark+1),a  
ca30 3a 3a ca			ld a, (.dmark+2)  
ca33 32 67 ee			ld (debug_mark+2),a  
ca36 18 03			jr .pastdmark  
ca38 ..			.dmark: db "OUT"  
ca3b f1			.pastdmark: pop af  
ca3c			endm  
# End of macro DMARK
ca3c						CALLMONITOR 
ca3c cd 6f ee			call debug_vector  
ca3f				endm  
# End of macro CALLMONITOR
ca3f					endif 
ca3f			 
ca3f ed 69				out (c), l 
ca41			 
ca41					NEXTW 
ca41 c3 76 9e			jp macro_next 
ca44				endm 
# End of macro NEXTW
ca44			 
ca44			 
ca44			.SPIO: 
ca44			 
ca44			if STORAGE_SE 
ca44				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
ca44			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
ca44			 
ca44					call spi_ce_low 
ca44			    NEXTW 
ca44			 
ca44			.SPICEH: 
ca44				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
ca44			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
ca44			 
ca44					call spi_ce_high 
ca44			    NEXTW 
ca44			 
ca44			 
ca44			.SPIOb: 
ca44			 
ca44				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
ca44			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
ca44			 
ca44					if DEBUG_FORTH_WORDS_KEY 
ca44						DMARK "SPo" 
ca44						CALLMONITOR 
ca44					endif 
ca44					; get port 
ca44			 
ca44			 
ca44					; get byte to send 
ca44			 
ca44					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca44			 
ca44			;		push hl    ; u1  
ca44			 
ca44					; destroy value TOS 
ca44			 
ca44					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca44			 
ca44					; one value on hl get other one back 
ca44			 
ca44			;		pop hl   ; u2 - addr 
ca44			 
ca44					; TODO Send SPI byte 
ca44			 
ca44			;		push hl 
ca44			;		call spi_ce_low 
ca44			;		pop hl 
ca44					ld a, l 
ca44					call spi_send_byte 
ca44			;		call spi_ce_high 
ca44			 
ca44					NEXTW 
ca44			 
ca44			.SPII: 
ca44				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
ca44			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
ca44					if DEBUG_FORTH_WORDS_KEY 
ca44						DMARK "SPi" 
ca44						CALLMONITOR 
ca44					endif 
ca44			 
ca44					; TODO Get SPI byte 
ca44			 
ca44					call spi_read_byte 
ca44			 
ca44					if DEBUG_FORTH_WORDS 
ca44						DMARK "Si2" 
ca44						CALLMONITOR 
ca44					endif 
ca44					ld h, 0 
ca44					ld l, a 
ca44					if DEBUG_FORTH_WORDS 
ca44						DMARK "Si3" 
ca44						CALLMONITOR 
ca44					endif 
ca44					call forth_push_numhl 
ca44			 
ca44					NEXTW 
ca44			 
ca44			 
ca44			 
ca44			.SESEL: 
ca44				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
ca44			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
ca44					if DEBUG_FORTH_WORDS_KEY 
ca44						DMARK "BNK" 
ca44						CALLMONITOR 
ca44					endif 
ca44			 
ca44					ld a, 255 
ca44					ld (spi_cartdev), a 
ca44			 
ca44					; get bank 
ca44			 
ca44					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca44			 
ca44			;		push hl 
ca44			 
ca44					; destroy value TOS 
ca44			 
ca44					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca44			 
ca44					; one value on hl get other one back 
ca44			 
ca44			;		pop hl 
ca44			 
ca44			 
ca44					ld c, SPI_CE_HIGH 
ca44					ld b, '0'    ; human readable bank number 
ca44			 
ca44					ld a, l 
ca44			 
ca44					if DEBUG_FORTH_WORDS 
ca44						DMARK "BNK" 
ca44						CALLMONITOR 
ca44					endif 
ca44			 
ca44					; active low 
ca44			 
ca44					cp 0 
ca44					jr z, .bset 
ca44					cp 1 
ca44					jr nz, .b2 
ca44					res 0, c 
ca44					ld b, '1'    ; human readable bank number 
ca44			.b2:		cp 2 
ca44					jr nz, .b3 
ca44					res 1, c 
ca44					ld b, '2'    ; human readable bank number 
ca44			.b3:		cp 3 
ca44					jr nz, .b4 
ca44					res 2, c 
ca44					ld b, '3'    ; human readable bank number 
ca44			.b4:		cp 4 
ca44					jr nz, .b5 
ca44					res 3, c 
ca44					ld b, '4'    ; human readable bank number 
ca44			.b5:		cp 5 
ca44					jr nz, .bset 
ca44					res 4, c 
ca44					ld b, '5'    ; human readable bank number 
ca44			 
ca44			.bset: 
ca44					ld a, c 
ca44					ld (spi_device),a 
ca44					ld a, b 
ca44					ld (spi_device_id),a 
ca44					if DEBUG_FORTH_WORDS 
ca44						DMARK "BN2" 
ca44						CALLMONITOR 
ca44					endif 
ca44			 
ca44					; set default SPI clk pulse time as disabled for BANK use 
ca44			 
ca44					ld a, 0 
ca44					ld (spi_clktime), a 
ca44			 
ca44					NEXTW 
ca44			 
ca44			.CARTDEV: 
ca44				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
ca44			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
ca44					if DEBUG_FORTH_WORDS_KEY 
ca44						DMARK "CDV" 
ca44						CALLMONITOR 
ca44					endif 
ca44			 
ca44					; disable se storage bank selection 
ca44			 
ca44					ld a, SPI_CE_HIGH		; ce high 
ca44					ld (spi_device), a 
ca44			 
ca44					; get bank 
ca44			 
ca44					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca44			 
ca44			;		push hl 
ca44			 
ca44					; destroy value TOS 
ca44			 
ca44					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca44			 
ca44					; one value on hl get other one back 
ca44			 
ca44			;		pop hl 
ca44			 
ca44					; active low 
ca44			 
ca44					ld c, 255 
ca44			 
ca44					ld a, l 
ca44					if DEBUG_FORTH_WORDS 
ca44						DMARK "CDV" 
ca44						CALLMONITOR 
ca44					endif 
ca44					cp 0 
ca44					jr z, .cset 
ca44					cp 1 
ca44					jr nz, .c2 
ca44					res 0, c 
ca44			.c2:		cp 2 
ca44					jr nz, .c3 
ca44					res 1, c 
ca44			.c3:		cp 3 
ca44					jr nz, .c4 
ca44					res 2, c 
ca44			.c4:		cp 4 
ca44					jr nz, .c5 
ca44					res 3, c 
ca44			.c5:		cp 5 
ca44					jr nz, .c6 
ca44					res 4, c 
ca44			.c6:		cp 6 
ca44					jr nz, .c7 
ca44					res 5, c 
ca44			.c7:		cp 7 
ca44					jr nz, .c8 
ca44					res 6, c 
ca44			.c8:		cp 8 
ca44					jr nz, .cset 
ca44					res 7, c 
ca44			.cset:		ld a, c 
ca44					ld (spi_cartdev),a 
ca44			 
ca44					if DEBUG_FORTH_WORDS 
ca44						DMARK "CD2" 
ca44						CALLMONITOR 
ca44					endif 
ca44			 
ca44					; set default SPI clk pulse time as 10ms for CARTDEV use 
ca44			 
ca44					ld a, $0a 
ca44					ld (spi_clktime), a 
ca44					NEXTW 
ca44			endif 
ca44			 
ca44			.ENDDEVICE: 
ca44			; eof 
ca44			 
# End of file forth_words_device.asm
ca44			 
ca44			; var handler 
ca44			 
ca44			 
ca44			.VARS: 
ca44				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
ca44 77				db WORD_SYS_CORE+99             
ca45 f5 ca			dw .V0            
ca47 04				db 3 + 1 
ca48 .. 00			db "VAR",0              
ca4c				endm 
# End of macro CWHEAD
ca4c			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
ca4c			;| 
ca4c			;| The variable name should consist of a single letter. e.g. "a" 
ca4c			;! If a full string is passed then only the first char is looked at 
ca4c			;| Any other char could exceed bounds checks!  
ca4c			 
ca4c					if DEBUG_FORTH_WORDS_KEY 
ca4c						DMARK "VAR" 
ca4c f5				push af  
ca4d 3a 61 ca			ld a, (.dmark)  
ca50 32 65 ee			ld (debug_mark),a  
ca53 3a 62 ca			ld a, (.dmark+1)  
ca56 32 66 ee			ld (debug_mark+1),a  
ca59 3a 63 ca			ld a, (.dmark+2)  
ca5c 32 67 ee			ld (debug_mark+2),a  
ca5f 18 03			jr .pastdmark  
ca61 ..			.dmark: db "VAR"  
ca64 f1			.pastdmark: pop af  
ca65			endm  
# End of macro DMARK
ca65						CALLMONITOR 
ca65 cd 6f ee			call debug_vector  
ca68				endm  
# End of macro CALLMONITOR
ca68					endif 
ca68			 
ca68					FORTH_DSP_VALUEHL 
ca68 cd 8a 9c			call macro_dsp_valuehl 
ca6b				endm 
# End of macro FORTH_DSP_VALUEHL
ca6b			 
ca6b 7e					ld a, (hl)    ; get first char on of the string 
ca6c			 
ca6c			 
ca6c					if DEBUG_FORTH_WORDS 
ca6c						DMARK "VR1" 
ca6c f5				push af  
ca6d 3a 81 ca			ld a, (.dmark)  
ca70 32 65 ee			ld (debug_mark),a  
ca73 3a 82 ca			ld a, (.dmark+1)  
ca76 32 66 ee			ld (debug_mark+1),a  
ca79 3a 83 ca			ld a, (.dmark+2)  
ca7c 32 67 ee			ld (debug_mark+2),a  
ca7f 18 03			jr .pastdmark  
ca81 ..			.dmark: db "VR1"  
ca84 f1			.pastdmark: pop af  
ca85			endm  
# End of macro DMARK
ca85						CALLMONITOR 
ca85 cd 6f ee			call debug_vector  
ca88				endm  
# End of macro CALLMONITOR
ca88					endif 
ca88					 
ca88 f5					push af	 
ca89					FORTH_DSP_POP 
ca89 cd 42 9d			call macro_forth_dsp_pop 
ca8c				endm 
# End of macro FORTH_DSP_POP
ca8c f1					pop af 
ca8d			 
ca8d					; convert to upper 
ca8d			 
ca8d cd 5f 8f				call to_upper 
ca90					if DEBUG_FORTH_WORDS 
ca90						DMARK "Vaa" 
ca90 f5				push af  
ca91 3a a5 ca			ld a, (.dmark)  
ca94 32 65 ee			ld (debug_mark),a  
ca97 3a a6 ca			ld a, (.dmark+1)  
ca9a 32 66 ee			ld (debug_mark+1),a  
ca9d 3a a7 ca			ld a, (.dmark+2)  
caa0 32 67 ee			ld (debug_mark+2),a  
caa3 18 03			jr .pastdmark  
caa5 ..			.dmark: db "Vaa"  
caa8 f1			.pastdmark: pop af  
caa9			endm  
# End of macro DMARK
caa9						CALLMONITOR 
caa9 cd 6f ee			call debug_vector  
caac				endm  
# End of macro CALLMONITOR
caac					endif 
caac 06 41				ld b, 'A' 
caae 90					sub b			; set offset 
caaf					if DEBUG_FORTH_WORDS 
caaf						DMARK "Vbb" 
caaf f5				push af  
cab0 3a c4 ca			ld a, (.dmark)  
cab3 32 65 ee			ld (debug_mark),a  
cab6 3a c5 ca			ld a, (.dmark+1)  
cab9 32 66 ee			ld (debug_mark+1),a  
cabc 3a c6 ca			ld a, (.dmark+2)  
cabf 32 67 ee			ld (debug_mark+2),a  
cac2 18 03			jr .pastdmark  
cac4 ..			.dmark: db "Vbb"  
cac7 f1			.pastdmark: pop af  
cac8			endm  
# End of macro DMARK
cac8						CALLMONITOR 
cac8 cd 6f ee			call debug_vector  
cacb				endm  
# End of macro CALLMONITOR
cacb					endif 
cacb cb 27				sla a  
cacd				 
cacd					 
cacd					if DEBUG_FORTH_WORDS 
cacd						DMARK "VR2" 
cacd f5				push af  
cace 3a e2 ca			ld a, (.dmark)  
cad1 32 65 ee			ld (debug_mark),a  
cad4 3a e3 ca			ld a, (.dmark+1)  
cad7 32 66 ee			ld (debug_mark+1),a  
cada 3a e4 ca			ld a, (.dmark+2)  
cadd 32 67 ee			ld (debug_mark+2),a  
cae0 18 03			jr .pastdmark  
cae2 ..			.dmark: db "VR2"  
cae5 f1			.pastdmark: pop af  
cae6			endm  
# End of macro DMARK
cae6						CALLMONITOR 
cae6 cd 6f ee			call debug_vector  
cae9				endm  
# End of macro CALLMONITOR
cae9					endif 
cae9			 
cae9 21 ee e9				ld hl, cli_var_array2 
caec cd ea 8c				call addatohl 
caef cd 85 9a				call forth_push_numhl 
caf2			 
caf2			 
caf2				       NEXTW 
caf2 c3 76 9e			jp macro_next 
caf5				endm 
# End of macro NEXTW
caf5			.V0: 
caf5				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
caf5 78				db WORD_SYS_CORE+100             
caf6 0d cb			dw .V0Q            
caf8 04				db 3 + 1 
caf9 .. 00			db "V0!",0              
cafd				endm 
# End of macro CWHEAD
cafd			;| V0! ( u1 -- )  Store value to v0  | DONE 
cafd			 
cafd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cafd cd 8a 9c			call macro_dsp_valuehl 
cb00				endm 
# End of macro FORTH_DSP_VALUEHL
cb00			 
cb00 11 22 ea				ld de, cli_var_array 
cb03			 
cb03 eb					ex de, hl 
cb04 73					ld (hl), e 
cb05 23					inc hl 
cb06 72					ld (hl), d 
cb07			 
cb07					; destroy value TOS 
cb07			 
cb07					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb07 cd 42 9d			call macro_forth_dsp_pop 
cb0a				endm 
# End of macro FORTH_DSP_POP
cb0a			 
cb0a				       NEXTW 
cb0a c3 76 9e			jp macro_next 
cb0d				endm 
# End of macro NEXTW
cb0d			.V0Q: 
cb0d				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cb0d 79				db WORD_SYS_CORE+101             
cb0e 1e cb			dw .V1S            
cb10 04				db 3 + 1 
cb11 .. 00			db "V0@",0              
cb15				endm 
# End of macro CWHEAD
cb15			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
cb15 2a 22 ea				ld hl, (cli_var_array) 
cb18 cd 85 9a				call forth_push_numhl 
cb1b			 
cb1b				       NEXTW 
cb1b c3 76 9e			jp macro_next 
cb1e				endm 
# End of macro NEXTW
cb1e			.V1S: 
cb1e				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
cb1e 7a				db WORD_SYS_CORE+102             
cb1f 36 cb			dw .V1Q            
cb21 04				db 3 + 1 
cb22 .. 00			db "V1!",0              
cb26				endm 
# End of macro CWHEAD
cb26			;| V1! ( u1 -- )  Store value to v1 | DONE 
cb26					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb26 cd 8a 9c			call macro_dsp_valuehl 
cb29				endm 
# End of macro FORTH_DSP_VALUEHL
cb29			 
cb29 11 24 ea				ld de, cli_var_array+2 
cb2c				 
cb2c eb					ex de, hl 
cb2d 73					ld (hl), e 
cb2e 23					inc hl 
cb2f 72					ld (hl), d 
cb30			 
cb30					; destroy value TOS 
cb30			 
cb30					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb30 cd 42 9d			call macro_forth_dsp_pop 
cb33				endm 
# End of macro FORTH_DSP_POP
cb33				       NEXTW 
cb33 c3 76 9e			jp macro_next 
cb36				endm 
# End of macro NEXTW
cb36			.V1Q: 
cb36				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
cb36 7b				db WORD_SYS_CORE+103             
cb37 47 cb			dw .V2S            
cb39 04				db 3 + 1 
cb3a .. 00			db "V1@",0              
cb3e				endm 
# End of macro CWHEAD
cb3e			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
cb3e 2a 24 ea				ld hl, (cli_var_array+2) 
cb41 cd 85 9a				call forth_push_numhl 
cb44				       NEXTW 
cb44 c3 76 9e			jp macro_next 
cb47				endm 
# End of macro NEXTW
cb47			.V2S: 
cb47				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
cb47 7c				db WORD_SYS_CORE+104             
cb48 5f cb			dw .V2Q            
cb4a 04				db 3 + 1 
cb4b .. 00			db "V2!",0              
cb4f				endm 
# End of macro CWHEAD
cb4f			;| V2! ( u1 -- )  Store value to v2 | DONE 
cb4f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb4f cd 8a 9c			call macro_dsp_valuehl 
cb52				endm 
# End of macro FORTH_DSP_VALUEHL
cb52			 
cb52 11 26 ea				ld de, cli_var_array+4 
cb55				 
cb55 eb					ex de, hl 
cb56 73					ld (hl), e 
cb57 23					inc hl 
cb58 72					ld (hl), d 
cb59			 
cb59					; destroy value TOS 
cb59			 
cb59					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb59 cd 42 9d			call macro_forth_dsp_pop 
cb5c				endm 
# End of macro FORTH_DSP_POP
cb5c				       NEXTW 
cb5c c3 76 9e			jp macro_next 
cb5f				endm 
# End of macro NEXTW
cb5f			.V2Q: 
cb5f				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cb5f 7d				db WORD_SYS_CORE+105             
cb60 70 cb			dw .V3S            
cb62 04				db 3 + 1 
cb63 .. 00			db "V2@",0              
cb67				endm 
# End of macro CWHEAD
cb67			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cb67 2a 26 ea				ld hl, (cli_var_array+4) 
cb6a cd 85 9a				call forth_push_numhl 
cb6d				       NEXTW 
cb6d c3 76 9e			jp macro_next 
cb70				endm 
# End of macro NEXTW
cb70			.V3S: 
cb70				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
cb70 7c				db WORD_SYS_CORE+104             
cb71 88 cb			dw .V3Q            
cb73 04				db 3 + 1 
cb74 .. 00			db "V3!",0              
cb78				endm 
# End of macro CWHEAD
cb78			;| V3! ( u1 -- )  Store value to v3 | DONE 
cb78					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb78 cd 8a 9c			call macro_dsp_valuehl 
cb7b				endm 
# End of macro FORTH_DSP_VALUEHL
cb7b			 
cb7b 11 28 ea				ld de, cli_var_array+6 
cb7e				 
cb7e eb					ex de, hl 
cb7f 73					ld (hl), e 
cb80 23					inc hl 
cb81 72					ld (hl), d 
cb82			 
cb82					; destroy value TOS 
cb82			 
cb82					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb82 cd 42 9d			call macro_forth_dsp_pop 
cb85				endm 
# End of macro FORTH_DSP_POP
cb85				       NEXTW 
cb85 c3 76 9e			jp macro_next 
cb88				endm 
# End of macro NEXTW
cb88			.V3Q: 
cb88				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
cb88 7d				db WORD_SYS_CORE+105             
cb89 99 cb			dw .END            
cb8b 04				db 3 + 1 
cb8c .. 00			db "V3@",0              
cb90				endm 
# End of macro CWHEAD
cb90			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
cb90 2a 28 ea				ld hl, (cli_var_array+6) 
cb93 cd 85 9a				call forth_push_numhl 
cb96				       NEXTW 
cb96 c3 76 9e			jp macro_next 
cb99				endm 
# End of macro NEXTW
cb99			 
cb99			 
cb99			 
cb99			 
cb99			 
cb99			; end of dict marker 
cb99			 
cb99 00			.END:    db WORD_SYS_END 
cb9a 00 00			dw 0 
cb9c 00				db 0 
cb9d			 
cb9d			; use to jp here for user dict words to save on macro expansion  
cb9d			 
cb9d			user_dict_next: 
cb9d				NEXTW 
cb9d c3 76 9e			jp macro_next 
cba0				endm 
# End of macro NEXTW
cba0			 
cba0			 
cba0			user_exec: 
cba0				;    ld hl, <word code> 
cba0				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
cba0				;    call forthexec 
cba0				;    jp user_dict_next   (NEXT) 
cba0			        ;    <word code bytes> 
cba0 eb				ex de, hl 
cba1 2a bc e5			ld hl,(os_tok_ptr) 
cba4				 
cba4				FORTH_RSP_NEXT 
cba4 cd 2c 9a			call macro_forth_rsp_next 
cba7				endm 
# End of macro FORTH_RSP_NEXT
cba7			 
cba7			if DEBUG_FORTH_UWORD 
cba7						DMARK "UEX" 
cba7 f5				push af  
cba8 3a bc cb			ld a, (.dmark)  
cbab 32 65 ee			ld (debug_mark),a  
cbae 3a bd cb			ld a, (.dmark+1)  
cbb1 32 66 ee			ld (debug_mark+1),a  
cbb4 3a be cb			ld a, (.dmark+2)  
cbb7 32 67 ee			ld (debug_mark+2),a  
cbba 18 03			jr .pastdmark  
cbbc ..			.dmark: db "UEX"  
cbbf f1			.pastdmark: pop af  
cbc0			endm  
# End of macro DMARK
cbc0				CALLMONITOR 
cbc0 cd 6f ee			call debug_vector  
cbc3				endm  
# End of macro CALLMONITOR
cbc3			endif 
cbc3			 
cbc3			 
cbc3			 
cbc3 eb				ex de, hl 
cbc4 22 bc e5			ld (os_tok_ptr), hl 
cbc7				 
cbc7				; Don't use next - Skips the first word in uword. 
cbc7			 
cbc7 c3 07 9f			jp exec1 
cbca			;	NEXT 
cbca			 
cbca			 
cbca			; eof 
# End of file forth_wordsv4.asm
cbca			endif 
cbca			;;;;;;;;;;;;;; Debug code 
cbca			 
cbca			 
cbca			;if DEBUG_FORTH_PARSE 
cbca .. 00		.nowordfound: db "No match",0 
cbd3 .. 00		.compword:	db "Comparing word ",0 
cbe3 .. 00		.nextwordat:	db "Next word at",0 
cbf0 .. 00		.charmatch:	db "Char match",0 
cbfb			;endif 
cbfb			if DEBUG_FORTH_JP 
cbfb			.foundword:	db "Word match. Exec..",0 
cbfb			endif 
cbfb			;if DEBUG_FORTH_PUSH 
cbfb .. 00		.enddict:	db "Dict end. Push.",0 
cc0b .. 00		.push_str:	db "Pushing string",0 
cc1a .. 00		.push_num:	db "Pushing number",0 
cc29 .. 00		.data_sp:	db "SP:",0 
cc2d .. 00		.wordinhl:	db "Word in HL (2/0):",0 
cc3f .. 00		.wordinde:	db "Word in DE (3/0):",0 
cc51 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cc63			;endif 
cc63			;if DEBUG_FORTH_MALLOC 
cc63 .. 00		.push_malloc:	db "Malloc address",0 
cc72			;endif 
cc72			 
cc72			 
cc72			 
cc72			; display malloc address and current data stack pointer  
cc72			 
cc72			malloc_error: 
cc72 d5				push de 
cc73 f5				push af 
cc74 e5				push hl 
cc75 cd bd 8a			call clear_display 
cc78 11 98 cc			ld de, .mallocerr 
cc7b 3e 00			ld a,0 
cc7d			;	ld de,os_word_scratch 
cc7d cd d0 8a			call str_at_display 
cc80 3e 11			ld a, display_row_1+17 
cc82 11 65 ee			ld de, debug_mark 
cc85 cd d0 8a			call str_at_display 
cc88 cd e0 8a			call update_display 
cc8b				;call break_point_state 
cc8b cd 9a dd			call cin_wait 
cc8e			 
cc8e			;	ld a, ' ' 
cc8e			;	ld (os_view_disable), a 
cc8e cd f4 93			call bp_on 
cc91 e1				pop hl 
cc92 f1				pop af 
cc93 d1				pop de	 
cc94				CALLMONITOR 
cc94 cd 6f ee			call debug_vector  
cc97				endm  
# End of macro CALLMONITOR
cc97 c9				ret 
cc98			 
cc98 .. 00		.mallocerr: 	db "Malloc Error",0 
cca5			;if DEBUG_FORTH_PUSH 
cca5			display_data_sp: 
cca5 f5				push af 
cca6			 
cca6				; see if disabled 
cca6			 
cca6			 
cca6 3a 6f ee			ld a, (debug_vector) 
cca9 fe c9			cp $C9  ; RET 
ccab				;ld a, (os_view_disable) 
ccab				;cp '*' 
ccab 28 67			jr z, .skipdsp 
ccad			 
ccad e5				push hl 
ccae e5				push hl 
ccaf e5			push hl 
ccb0 cd bd 8a			call clear_display 
ccb3 e1			pop hl 
ccb4 7c				ld a,h 
ccb5 21 c0 e5			ld hl, os_word_scratch 
ccb8 cd f3 8e			call hexout 
ccbb e1				pop hl 
ccbc 7d				ld a,l 
ccbd 21 c2 e5			ld hl, os_word_scratch+2 
ccc0 cd f3 8e			call hexout 
ccc3 21 c4 e5			ld hl, os_word_scratch+4 
ccc6 3e 00			ld a,0 
ccc8 77				ld (hl),a 
ccc9 11 c0 e5			ld de,os_word_scratch 
cccc 3e 28				ld a, display_row_2 
ccce cd d0 8a				call str_at_display 
ccd1 11 2d cc			ld de, .wordinhl 
ccd4 3e 00			ld a, display_row_1 
ccd6			 
ccd6 cd d0 8a				call str_at_display 
ccd9 11 65 ee			ld de, debug_mark 
ccdc 3e 11			ld a, display_row_1+17 
ccde			 
ccde cd d0 8a				call str_at_display 
cce1			 
cce1				; display current data stack pointer 
cce1 11 29 cc			ld de,.data_sp 
cce4 3e 30				ld a, display_row_2 + 8 
cce6 cd d0 8a				call str_at_display 
cce9			 
cce9 2a e8 e9			ld hl,(cli_data_sp) 
ccec e5				push hl 
cced 7c				ld a,h 
ccee 21 c0 e5			ld hl, os_word_scratch 
ccf1 cd f3 8e			call hexout 
ccf4 e1				pop hl 
ccf5 7d				ld a,l 
ccf6 21 c2 e5			ld hl, os_word_scratch+2 
ccf9 cd f3 8e			call hexout 
ccfc 21 c4 e5			ld hl, os_word_scratch+4 
ccff 3e 00			ld a,0 
cd01 77				ld (hl),a 
cd02 11 c0 e5			ld de,os_word_scratch 
cd05 3e 33				ld a, display_row_2 + 11 
cd07 cd d0 8a				call str_at_display 
cd0a			 
cd0a			 
cd0a cd e0 8a			call update_display 
cd0d cd 00 8a			call delay1s 
cd10 cd 00 8a			call delay1s 
cd13 e1				pop hl 
cd14			.skipdsp: 
cd14 f1				pop af 
cd15 c9				ret 
cd16			 
cd16			display_data_malloc: 
cd16			 
cd16 f5				push af 
cd17 e5				push hl 
cd18 e5				push hl 
cd19 e5			push hl 
cd1a cd bd 8a			call clear_display 
cd1d e1			pop hl 
cd1e 7c				ld a,h 
cd1f 21 c0 e5			ld hl, os_word_scratch 
cd22 cd f3 8e			call hexout 
cd25 e1				pop hl 
cd26 7d				ld a,l 
cd27 21 c2 e5			ld hl, os_word_scratch+2 
cd2a cd f3 8e			call hexout 
cd2d 21 c4 e5			ld hl, os_word_scratch+4 
cd30 3e 00			ld a,0 
cd32 77				ld (hl),a 
cd33 11 c0 e5			ld de,os_word_scratch 
cd36 3e 28				ld a, display_row_2 
cd38 cd d0 8a				call str_at_display 
cd3b 11 63 cc			ld de, .push_malloc 
cd3e 3e 00			ld a, display_row_1 
cd40			 
cd40 cd d0 8a				call str_at_display 
cd43			 
cd43				; display current data stack pointer 
cd43 11 29 cc			ld de,.data_sp 
cd46 3e 30				ld a, display_row_2 + 8 
cd48 cd d0 8a				call str_at_display 
cd4b			 
cd4b 2a e8 e9			ld hl,(cli_data_sp) 
cd4e e5				push hl 
cd4f 7c				ld a,h 
cd50 21 c0 e5			ld hl, os_word_scratch 
cd53 cd f3 8e			call hexout 
cd56 e1				pop hl 
cd57 7d				ld a,l 
cd58 21 c2 e5			ld hl, os_word_scratch+2 
cd5b cd f3 8e			call hexout 
cd5e 21 c4 e5			ld hl, os_word_scratch+4 
cd61 3e 00			ld a,0 
cd63 77				ld (hl),a 
cd64 11 c0 e5			ld de,os_word_scratch 
cd67 3e 33				ld a, display_row_2 + 11 
cd69 cd d0 8a				call str_at_display 
cd6c			 
cd6c cd e0 8a			call update_display 
cd6f cd 00 8a			call delay1s 
cd72 cd 00 8a			call delay1s 
cd75 e1				pop hl 
cd76 f1				pop af 
cd77 c9				ret 
cd78			;endif 
cd78			 
cd78			include "forth_autostart.asm" 
cd78			; list of commands to perform at system start up 
cd78			 
cd78			startcmds: 
cd78			;	dw test11 
cd78			;	dw test12 
cd78			;	dw test13 
cd78			;	dw test14 
cd78			;	dw test15 
cd78			;	dw test16 
cd78			;	dw test17 
cd78			;	dw ifthtest1 
cd78			;	dw ifthtest2 
cd78			;	dw ifthtest3 
cd78			;	dw mmtest1 
cd78			;	dw mmtest2 
cd78			;	dw mmtest3 
cd78			;	dw mmtest4 
cd78			;	dw mmtest5 
cd78			;	dw mmtest6 
cd78			;	dw iftest1 
cd78			;	dw iftest2 
cd78			;	dw iftest3 
cd78			;	dw looptest1 
cd78			;	dw looptest2 
cd78			;	dw test1 
cd78			;	dw test2 
cd78			;	dw test3 
cd78			;	dw test4 
cd78			;	dw game2r 
cd78			;	dw game2b1 
cd78			;	dw game2b2 
cd78			 
cd78				; start up words that are actually useful 
cd78			 
cd78			;    dw spi1 
cd78			;    dw spi2 
cd78			;    dw spi3 
cd78			;    dw spi4 
cd78			;    dw spi5 
cd78			;    dw spi6 
cd78			;    dw spi7 
cd78			; 
cd78			;    dw spi8 
cd78			;    dw spi9 
cd78			;    dw spi10 
cd78			 
cd78			; file editor 
cd78			;	dw edit1 
cd78			;	dw edit2 
cd78			;	dw edit3 
cd78			 
cd78			;	dw longread 
cd78 98 d1			dw clrstack 
cd7a cc d1			dw type 
cd7c			;	dw stest 
cd7c f1 d1			dw strncpy 
cd7e			;	dw list 
cd7e 52 d2			dw start1 
cd80 62 d2			dw start2 
cd82			;	dw start3 
cd82			;	dw start3b 
cd82			;	dw start3c 
cd82			 
cd82				; (unit) testing words 
cd82			 
cd82			;	dw mtesta 
cd82			;	dw mtestb 
cd82			;	dw mtestc 
cd82			;	dw mtestd 
cd82			;	dw mteste 
cd82			 
cd82				; demo/game words 
cd82			 
cd82			;        dw game3w 
cd82			;        dw game3p 
cd82			;        dw game3sc 
cd82			;        dw game3vsi 
cd82			;        dw game3vs 
cd82				 
cd82			;	dw game2b 
cd82			;	dw game2bf 
cd82			;	dw game2mba 
cd82			;	dw game2mbas 
cd82			;	dw game2mb 
cd82			 
cd82 7f d5			dw game1 
cd84 90 d5			dw game1a 
cd86 f2 d5			dw game1b 
cd88 27 d6			dw game1c 
cd8a 5d d6			dw game1d 
cd8c 8e d6			dw game1s 
cd8e a2 d6			dw game1t 
cd90 b7 d6			dw game1f 
cd92 eb d6			dw game1z 
cd94 2f d7			dw game1zz 
cd96			 
cd96 b8 d3			dw test5 
cd98 f0 d3			dw test6 
cd9a 28 d4			dw test7 
cd9c 3c d4			dw test8 
cd9e 68 d4			dw test9 
cda0 7e d4			dw test10 
cda2				 
cda2 06 d8		        dw ssv5 
cda4 ea d7		        dw ssv4 
cda6 ce d7		        dw ssv3 
cda8 98 d7		        dw ssv2 
cdaa 1f d8		        dw ssv1 
cdac 67 d8		        dw ssv1cpm 
cdae			;	dw keyup 
cdae			;	dw keydown 
cdae			;	dw keyleft 
cdae			;	dw keyright 
cdae			;	dw 	keyf1 
cdae			;	dw keyf2 
cdae			;	dw keyf3 
cdae			;	dw keyf4 
cdae			;	dw keyf5 
cdae			;	dw keyf6 
cdae			;	dw keyf7 
cdae			;	dw keyf8 
cdae			;	dw keyf9 
cdae			;	dw keyf10 
cdae			;	dw keyf11 
cdae			;	dw keyf12 
cdae			;	dw keytab 
cdae			;	dw keycr 
cdae			;	dw keyhome 
cdae			;	dw keyend 
cdae			;	dw keybs 
cdae 00 00			db 0, 0	 
cdb0			 
cdb0			 
cdb0			; File Editor 
cdb0			 
cdb0			; ( id - ) use 'e' to edit the displayed line 
cdb0 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
cdd1 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
ce06			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
ce06 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
ce3e			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
ce3e			 
ce3e			; SPI Net support words 
ce3e			 
ce3e			; v0! = node to send to 
ce3e			; ( str count - ) 
ce3e .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
ce97			 
ce97			; spiputc ( char node - ) 
ce97 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
cecb			; spiputc ( u node - ) 
cecb .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
cef9			 
cef9			; spigetc ( - n ) 
cef9 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
cf22			 
cf22			; getnode ( - n ) 
cf22 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
cf4f			 
cf4f			; ( str node - )  
cf4f .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
cfb5			; store string ( str i - ) 
cfb5			 
cfb5			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
cfb5 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
d00a			 
d00a			; get string ( addr i -  )    TO FIX 
d00a			 
d00a .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
d062			 
d062			 
d062			; NETCHAT (TODO) 
d062			; Program to allow two nodes to chat with eachother 
d062			; 
d062			; v0 - target node 
d062			;  
d062			; accept input at 0,0 
d062			; if input is string send spitype to target node 
d062			; starting at row 2,0 , while spigetchr is not zero ->  
d062			; 
d062			; 
d062			; TODO add paging of get request 
d062			 
d062			; ( node - ) 
d062 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d081 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d0d9 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d151			 
d151			 
d151			; Long read of currently open file 
d151 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d198			 
d198			; clear stack  
d198			 
d198 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d1cc			 
d1cc			; type ( addr count - ) 
d1cc .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d1f1			 
d1f1			; some direct memory words 
d1f1			; strncpy ( len t f -- t ) 
d1f1			 
d1f1 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d252			 
d252 .. 00		start1:     	db ": bpon $00 bp ;",0 
d262 .. 00		start2:     	db ": bpoff $01 bp ;",0 
d273 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d2ee .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d34e			 
d34e			 
d34e			; a handy word to list items on the stack 
d34e			 
d34e .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d3b8			 
d3b8			 
d3b8			; test stack  
d3b8			; rnd8 stest 
d3b8			 
d3b8			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d3b8			 
d3b8			; random malloc and free cycles 
d3b8			 
d3b8			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d3b8			 
d3b8			; fixed malloc and free cycles 
d3b8			 
d3b8			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d3b8			 
d3b8			; fixed double string push and drop cycle  
d3b8			 
d3b8			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d3b8			 
d3b8			; consistent fixed string push and drop cycle  
d3b8			 
d3b8			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d3b8			 
d3b8			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d3b8			 
d3b8			;test1:		db ": aa 1 2 3 ;", 0 
d3b8			;test2:     	db "111 aa 888 999",0 
d3b8			;test3:     	db ": bb 77 ;",0 
d3b8			;test4:     	db "$02 $01 do i . loop bb",0 
d3b8			 
d3b8 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d3f0 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d428 .. 00		test7:     	db ": box hline vline ;",0 
d43c .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d468 .. 00		test9:     	db ": sw $01 adsp world ;",0 
d47e .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d4a3			;test11:     	db "hello create .",0 
d4a3			;test12:     	db "hello2 create .",0 
d4a3			 
d4a3			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d4a3			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d4a3			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d4a3			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d4a3			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d4a3			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d4a3			 
d4a3			;iftest1:     	db "$0001 IF cls .",0 
d4a3			;iftest2:     	db "$0000 IF cls .",0 
d4a3			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d4a3			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d4a3			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d4a3			 
d4a3			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d4a3			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d4a3			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d4a3			 
d4a3			 
d4a3 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d4c7 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d4f7 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d51c .. 00		sound4: db ": cha $00 ; ",0 
d529 .. 00		sound5: db ": chb $20 ; ",0 
d536 .. 00		sound6: db ": chc $40 ; ",0 
d543 .. 00		sound7: db ": chd $60 ; ",0 
d550 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d568 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d57f			 
d57f			 
d57f			 
d57f			 
d57f			; a small guess the number game 
d57f			 
d57f .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d590 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d5f2			 
d5f2 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d627 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d65d .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d68e .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d6a2 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d6b7 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d6eb .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
d72f			 
d72f			; Using 'ga' save a high score across multiple runs using external storage 
d72f			 
d72f .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
d798			 
d798			 
d798			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
d798			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
d798			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
d798			 
d798			; simple screen saver to test code memory reuse to destruction 
d798			 
d798 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
d7ce .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
d7ea .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
d806 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
d81f .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
d867 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
d8be			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
d8be			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
d8be			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
d8be			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
d8be			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
d8be			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
d8be			 
d8be			 
d8be			 
d8be			; minesweeper/battleship finding game 
d8be			; draws a game board of random ship/mine positions 
d8be			; user enters coords to see if it hits on 
d8be			; game ends when all are hit 
d8be			; when hit or miss says how many may be in the area 
d8be			 
d8be			; setup the game board and then hide it 
d8be			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
d8be			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
d8be			;; prompt for where to target 
d8be			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
d8be			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
d8be			;; TODO see if the entered coords hits or misses pushes char hit of miss 
d8be			;game2mbht:      db ": mbckht nop ;",0 
d8be			;game2mbms:      db ": mbcms nop ;",0 
d8be			; TODO how many might be near by 
d8be			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
d8be			 
d8be			; Game 3 
d8be			 
d8be			; Vert scroller ski game - avoid the trees! 
d8be			 
d8be			; v0 score (ie turns) 
d8be			; v1 player pos 
d8be			; v2 left wall 
d8be			; v3 right wall 
d8be			 
d8be			; Draw side walls randomly 
d8be			 
d8be			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
d8be			 
d8be			; Draw player 
d8be			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
d8be			 
d8be			; TODO Get Key 
d8be			 
d8be			; TODO Move left right 
d8be			 
d8be			; scroll and move walls a bit 
d8be			 
d8be			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
d8be			 
d8be			; main game loop 
d8be			 
d8be			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
d8be			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
d8be			 
d8be			; key board defs 
d8be			 
d8be .. 00		keyup:       db ": keyup $05 ;",0 
d8cc .. 00		keydown:       db ": keydown $0a ;",0 
d8dc .. 00		keyleft:       db ": keyleft $0b ;",0 
d8ec .. 00		keyright:       db ": keyright $0c ;",0 
d8fd .. 00		keyf1:       db ": keyf1 $10 ;",0 
d90b .. 00		keyf2:       db ": keyf2 $11 ;",0 
d919 .. 00		keyf3:       db ": keyf3 $12 ;",0 
d927 .. 00		keyf4:       db ": keyf4 $13 ;",0 
d935 .. 00		keyf5:       db ": keyf5 $14 ;",0 
d943 .. 00		keyf6:       db ": keyf6 $15 ;",0 
d951 .. 00		keyf7:       db ": keyf7 $16 ;",0 
d95f .. 00		keyf8:       db ": keyf8 $17 ;",0 
d96d .. 00		keyf9:       db ": keyf9 $18 ;",0 
d97b .. 00		keyf10:       db ": keyf10 $19 ;",0 
d98a .. 00		keyf11:       db ": keyf11 $1a ;",0 
d999 .. 00		keyf12:       db ": keyf12 $1b ;",0 
d9a8			 
d9a8 .. 00		keytab:       db ": keytab $09 ;",0 
d9b7 .. 00		keycr:       db ": keycr $0d ;",0 
d9c5 .. 00		keyhome:       db ": keyhome $0e ;",0 
d9d5 .. 00		keyend:       db ": keyend $0f ;",0 
d9e4 .. 00		keybs:       db ": keybs $08 ;",0 
d9f2			 
d9f2			   
d9f2			 
d9f2			 
d9f2			 
d9f2			; eof 
# End of file forth_autostart.asm
d9f2			 
d9f2			 
d9f2			 
d9f2			; stack over and underflow checks 
d9f2			 
d9f2			; init the words to detect the under/overflow 
d9f2			 
d9f2			chk_stk_init: 
d9f2				; a vague random number to check so we dont get any "lucky" hits 
d9f2 3e 2d			ld a, 45 
d9f4 6f				ld l, a 
d9f5 00				nop 
d9f6 3e 17			ld a, 23 
d9f8 67				ld h, a 
d9f9			 
d9f9 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
d9fc			 
d9fc			;	ld (chk_stund), hl	; stack points.... 
d9fc 22 00 ef			ld (chk_stovr), hl 
d9ff 22 e6 e9			ld (chk_ret_und), hl 
da02 22 a4 e9			ld (chk_ret_ovr), hl 
da05 22 22 e9			ld (chk_loop_ovr), hl 
da08 22 20 e8			ld (chk_data_ovr), hl 
da0b c9				ret 
da0c				 
da0c			check_stacks: 
da0c				; check all stack words 
da0c			 
da0c e5				push hl 
da0d d5				push de 
da0e			 
da0e			;	ld de,(chk_word) 
da0e			;	ld hl, (chk_stund)	; stack points.... 
da0e			;	if DEBUG_STK_FAULT 
da0e			;		DMARK "FAa" 
da0e			;		CALLMONITOR 
da0e			;	endif 
da0e			;	call cmp16 
da0e			;	jp z, .chk_faulta 
da0e			; 
da0e			;	ld de, sfaultsu 
da0e			;	jp .chk_fault 
da0e			 
da0e 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
da11 ed 5b 97 e2		ld de,(chk_word) 
da15				if DEBUG_STK_FAULT 
da15					DMARK "FAb" 
da15					CALLMONITOR 
da15				endif 
da15 cd 08 8d			call cmp16 
da18 28 06			jr z, .chk_fault1 
da1a 11 be da			ld de, sfaultso 
da1d c3 6f da			jp .chk_fault 
da20			.chk_fault1:  
da20 2a e6 e9			ld hl, (chk_ret_und) 
da23 ed 5b 97 e2		ld de,(chk_word) 
da27				if DEBUG_STK_FAULT 
da27					DMARK "FAU" 
da27					CALLMONITOR 
da27				endif 
da27 cd 08 8d			call cmp16 
da2a ca 33 da			jp z, .chk_fault2 
da2d 11 ce da			ld de, sfaultru 
da30 c3 6f da			jp .chk_fault 
da33			.chk_fault2:  
da33 2a a4 e9			ld hl, (chk_ret_ovr) 
da36 ed 5b 97 e2		ld de,(chk_word) 
da3a				if DEBUG_STK_FAULT 
da3a					DMARK "FA1" 
da3a					CALLMONITOR 
da3a				endif 
da3a cd 08 8d			call cmp16 
da3d ca 46 da			jp z, .chk_fault3 
da40 11 dc da			ld de, sfaultro 
da43 c3 6f da			jp .chk_fault 
da46			.chk_fault3:  
da46 2a 22 e9			ld hl, (chk_loop_ovr) 
da49 ed 5b 97 e2		ld de,(chk_word) 
da4d				if DEBUG_STK_FAULT 
da4d					DMARK "FA2" 
da4d					CALLMONITOR 
da4d				endif 
da4d cd 08 8d			call cmp16 
da50 ca 59 da			jp z, .chk_fault4 
da53 11 f6 da			ld de, sfaultlo 
da56 c3 6f da			jp .chk_fault 
da59			.chk_fault4:  
da59 2a 20 e8			ld hl, (chk_data_ovr) 
da5c ed 5b 97 e2		ld de,(chk_word) 
da60				if DEBUG_STK_FAULT 
da60					DMARK "FA3" 
da60					CALLMONITOR 
da60				endif 
da60 cd 08 8d			call cmp16 
da63 ca 6c da			jp z, .chk_fault5 
da66 11 10 db			ld de, sfaultdo 
da69 c3 6f da			jp .chk_fault 
da6c			 
da6c			 
da6c			.chk_fault5:  
da6c d1				pop de 
da6d e1				pop hl 
da6e			 
da6e c9				ret 
da6f			 
da6f cd bd 8a		.chk_fault: 	call clear_display 
da72 3e 28				ld a, display_row_2 
da74 cd d0 8a				call str_at_display 
da77 11 a0 da				   ld de, .stackfault 
da7a 3e 00				ld a, display_row_1 
da7c cd d0 8a				call str_at_display 
da7f 11 65 ee				    ld de, debug_mark 
da82 3e 11				ld a, display_row_1+17 
da84 cd d0 8a				call str_at_display 
da87 cd e0 8a				call update_display 
da8a			 
da8a				; prompt before entering montior for investigating issue 
da8a			 
da8a 3e 78			ld a, display_row_4 
da8c 11 63 97			ld de, endprog 
da8f			 
da8f cd e0 8a			call update_display		 
da92			 
da92 cd fd 99			call next_page_prompt 
da95			 
da95 d1				pop de 
da96 e1				pop hl 
da97 cd b7 97				call monitor 
da9a cd 1c 9e				call forth_warmstart 
da9d c3 b3 96				jp warmstart_afterauto 
daa0					;jp 0 
daa0					;halt 
daa0			 
daa0			 
daa0			 
daa0 .. 00		.stackfault: 	db "Stack fault:",0 
daad			 
daad .. 00		sfaultsu: 	db	"Stack under flow",0 
dabe .. 00		sfaultso: 	db	"Stack over flow",0 
dace .. 00		sfaultru:	db "RTS underflow",0 
dadc .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
daf6 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
db10 .. 00		sfaultdo:	db "DTS overflow", 0 
db1d			 
db1d			 
db1d			fault_dsp_under: 
db1d 11 2f db			ld de, .dsp_under 
db20 c3 e5 db			jp .show_fault 
db23			 
db23			fault_rsp_under: 
db23 11 3d db			ld de, .rsp_under 
db26 c3 e5 db			jp .show_fault 
db29			fault_loop_under: 
db29 11 4b db			ld de, .loop_under 
db2c c3 e5 db			jp .show_fault 
db2f			 
db2f .. 00		.dsp_under: db "DSP Underflow",0 
db3d .. 00		.rsp_under: db "RSP Underflow",0 
db4b .. 00		.loop_under: db "LOOP Underflow",0 
db5a			 
db5a			 
db5a d5			type_faultn: 	push de 
db5b e5					push hl 
db5c cd bd 8a				call clear_display 
db5f 11 89 db				   ld de, .typefaultn 
db62 3e 00				ld a, display_row_1 
db64 cd d0 8a				call str_at_display 
db67 11 65 ee				    ld de, debug_mark 
db6a 3e 11				ld a, display_row_1+17 
db6c cd d0 8a				call str_at_display 
db6f cd e0 8a				call update_display 
db72			 
db72				; prompt before entering montior for investigating issue 
db72			 
db72 3e 78			ld a, display_row_4 
db74 11 63 97			ld de, endprog 
db77			 
db77 cd e0 8a			call update_display		 
db7a			 
db7a cd fd 99			call next_page_prompt 
db7d			 
db7d e5					push hl 
db7e d5					push de 
db7f cd b7 97				call monitor 
db82 cd 1c 9e				call forth_warmstart 
db85 c3 b3 96				jp warmstart_afterauto 
db88 76					halt 
db89			 
db89			 
db89 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
dba0			 
dba0 d5			type_faults: 	push de 
dba1 e5					push hl 
dba2 cd bd 8a				call clear_display 
dba5 11 ce db				   ld de, .typefaults 
dba8 3e 00				ld a, display_row_1 
dbaa cd d0 8a				call str_at_display 
dbad 11 65 ee				    ld de, debug_mark 
dbb0 3e 11				ld a, display_row_1+17 
dbb2 cd d0 8a				call str_at_display 
dbb5 cd e0 8a				call update_display 
dbb8			 
dbb8				; prompt before entering montior for investigating issue 
dbb8			 
dbb8 3e 78			ld a, display_row_4 
dbba 11 63 97			ld de, endprog 
dbbd			 
dbbd cd e0 8a			call update_display		 
dbc0			 
dbc0 cd fd 99			call next_page_prompt 
dbc3			 
dbc3 e1					pop hl 
dbc4 d1					pop de 
dbc5 cd b7 97				call monitor 
dbc8 cd 1c 9e				call forth_warmstart 
dbcb c3 b3 96				jp warmstart_afterauto 
dbce			 
dbce			 
dbce .. 00		.typefaults: db "STR Type Expected TOS!",0 
dbe5			 
dbe5			.show_fault: 	 
dbe5 d5					push de 
dbe6 cd bd 8a				call clear_display 
dbe9 d1					pop de 
dbea 3e 00				ld a, display_row_1 
dbec cd d0 8a				call str_at_display 
dbef 11 65 ee				    ld de, debug_mark 
dbf2 3e 11				ld a, display_row_1+17 
dbf4 cd d0 8a				call str_at_display 
dbf7 cd e0 8a				call update_display 
dbfa			 
dbfa				; prompt before entering montior for investigating issue 
dbfa			 
dbfa 3e 78			ld a, display_row_4 
dbfc 11 63 97			ld de, endprog 
dbff			 
dbff cd e0 8a			call update_display		 
dc02			 
dc02 cd fd 99			call next_page_prompt 
dc05			 
dc05 e1					pop hl 
dc06 d1					pop de 
dc07 cd b7 97				call monitor 
dc0a			; do a dump to cli and not warmstart so we preserve all of the uwords.  
dc0a			; TODO Make optional fault restart to cli or warm boot? 
dc0a					;jp warmstart 
dc0a c3 f7 96				jp cli 
dc0d 76					halt 
dc0e			 
dc0e			 
dc0e			; handle the auto run of code from files in storage 
dc0e			 
dc0e			 
dc0e			include "forth_startup.asm" 
dc0e			; Which startup method to use? 
dc0e			; 
dc0e			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
dc0e			; followed by loading of a list of scripts in eeprom 
dc0e			 
dc0e			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
dc0e			; from eeprom 
dc0e			 
dc0e			; Select with define in main stubs 
dc0e			 
dc0e			if STARTUP_V1 
dc0e				include "forth_startupv1.asm" 
dc0e			; Startup script loading version 1 
dc0e			 
dc0e			; If SE storage is available first stage is to use the selected file 
dc0e			; then go through the eeprom list 
dc0e			 
dc0e .. 00		sprompt1: db "Startup load...",0 
dc1e .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
dc34			 
dc34			 
dc34			 
dc34			 
dc34			forth_startup: 
dc34 21 78 cd			ld hl, startcmds 
dc37 3e 00			ld a, 0 
dc39 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
dc3c			 
dc3c e5			.start1:	push hl 
dc3d cd bd 8a			call clear_display 
dc40 11 0e dc			ld de, sprompt1 
dc43 3e 00		        ld a, display_row_1 
dc45 cd d0 8a			call str_at_display 
dc48 11 1e dc			ld de, sprompt2 
dc4b 3e 28		        ld a, display_row_2 
dc4d cd d0 8a			call str_at_display 
dc50 e1				pop hl 
dc51 e5				push hl 
dc52 5e				ld e,(hl) 
dc53 23				inc hl 
dc54 56				ld d,(hl) 
dc55 3e 50		        ld a, display_row_3 
dc57 cd d0 8a			call str_at_display 
dc5a cd e0 8a			call update_display 
dc5d			 
dc5d			 
dc5d 3a e1 e6			ld a, (os_last_cmd) 
dc60 fe 00			cp 0 
dc62 28 05			jr z, .startprompt 
dc64 cd f4 89			call delay250ms 
dc67 18 24			jr .startdo 
dc69				 
dc69				 
dc69			 
dc69			.startprompt: 
dc69			 
dc69 3e 9f			ld a,display_row_4 + display_cols - 1 
dc6b 11 fb 99		        ld de, endprg 
dc6e cd d0 8a			call str_at_display 
dc71 cd e0 8a			call update_display 
dc74 cd 00 8a			call delay1s 
dc77 cd 9a dd			call cin_wait 
dc7a						 
dc7a fe 2a			cp '*' 
dc7c 28 5e			jr z, .startupend1 
dc7e fe 23			cp '#' 
dc80 20 07			jr nz, .startno 
dc82 3e 01			ld a, 1 
dc84 32 e1 e6			ld (os_last_cmd),a 
dc87 18 04			jr .startdo 
dc89 fe 31		.startno:	cp '1' 
dc8b 28 3a			jr z,.startnxt  
dc8d			 
dc8d				; exec startup line 
dc8d			.startdo:	 
dc8d e1				pop hl 
dc8e e5				push hl 
dc8f				 
dc8f 5e				ld e,(hl) 
dc90 23				inc hl 
dc91 56				ld d,(hl) 
dc92 eb				ex de,hl 
dc93			 
dc93 e5				push hl 
dc94			 
dc94 3e 00			ld a, 0 
dc96				;ld a, FORTH_END_BUFFER 
dc96 cd 5b 90			call strlent 
dc99 23				inc hl   ; include zero term to copy 
dc9a 06 00			ld b,0 
dc9c 4d				ld c,l 
dc9d e1				pop hl 
dc9e 11 bb e2			ld de, scratch 
dca1 ed b0			ldir 
dca3			 
dca3			 
dca3 21 bb e2			ld hl, scratch 
dca6 cd c4 9e			call forthparse 
dca9 cd 04 9f			call forthexec 
dcac cd 16 9e			call forthexec_cleanup 
dcaf			 
dcaf 3e 78			ld a, display_row_4 
dcb1 11 63 97			ld de, endprog 
dcb4			 
dcb4 cd e0 8a			call update_display		 
dcb7			 
dcb7 3a e1 e6			ld a, (os_last_cmd) 
dcba fe 00			cp 0 
dcbc 20 09			jr nz, .startnxt 
dcbe cd fd 99			call next_page_prompt 
dcc1 cd bd 8a		        call clear_display 
dcc4 cd e0 8a			call update_display		 
dcc7			 
dcc7				; move onto next startup line? 
dcc7			.startnxt: 
dcc7			 
dcc7 cd f4 89			call delay250ms 
dcca e1				pop hl 
dccb			 
dccb 23				inc hl 
dccc 23				inc hl 
dccd			 
dccd e5				push hl 
dcce 5e				ld e, (hl) 
dccf 23				inc hl 
dcd0 56				ld d, (hl) 
dcd1 e1				pop hl 
dcd2				; TODO replace 0 test 
dcd2			 
dcd2 eb				ex de, hl 
dcd3 cd 13 8d			call ishlzero 
dcd6			;	ld a,e 
dcd6			;	add d 
dcd6			;	cp 0    ; any left to do? 
dcd6 eb				ex de, hl 
dcd7 c2 3c dc			jp nz, .start1 
dcda 18 01			jr .startupend 
dcdc			 
dcdc e1			.startupend1: pop hl 
dcdd			.startupend: 
dcdd			 
dcdd cd bd 8a			call clear_display 
dce0 cd e0 8a			call update_display 
dce3 c9				ret 
dce4			if STORAGE_SE 
dce4			 
dce4			sprompt3: db "Loading from start-up file?:",0 
dce4			sprompt4: db "(Y=Any key/N=No)",0 
dce4			 
dce4			 
dce4			forth_autoload: 
dce4			 
dce4				; load block 0 of store 1 
dce4				 
dce4				ld a, $fe      ; bit 0 clear 
dce4				ld (spi_device), a 
dce4			 
dce4				call storage_get_block_0 
dce4			 
dce4				ld a, (store_page+STORE_0_AUTOFILE) 
dce4			 
dce4				cp 0 
dce4				ret z     ; auto start not enabled 
dce4			 
dce4				call clear_display 
dce4			 
dce4				; set bank 
dce4			 
dce4					ld a, (store_page+STORE_0_BANKRUN) 
dce4					ld (spi_device), a 
dce4			 
dce4				; get file id to load from and get the file name to display 
dce4			 
dce4					ld a, (store_page+STORE_0_FILERUN) 
dce4			 
dce4					ld l, 0 
dce4					ld h, a 
dce4					ld de, store_page 
dce4			 
dce4					if DEBUG_FORTH_WORDS 
dce4						DMARK "ASp" 
dce4						CALLMONITOR 
dce4					endif 
dce4					call storage_read 
dce4			 
dce4					if DEBUG_FORTH_WORDS 
dce4						DMARK "ASr" 
dce4						CALLMONITOR 
dce4					endif 
dce4			 
dce4					call ishlzero 
dce4					ret z             ; file not found 
dce4			 
dce4					ld a, display_row_2 + 10 
dce4					ld de, store_page+3 
dce4					call str_at_display 
dce4				 
dce4			; 
dce4			 
dce4				ld a, display_row_1+5 
dce4				ld de, sprompt3 
dce4				call str_at_display 
dce4				ld a, display_row_3+15 
dce4				ld de, sprompt4 
dce4				call str_at_display 
dce4			 
dce4				call update_display 
dce4			 
dce4				call cin_wait 
dce4				cp 'n' 
dce4				ret z 
dce4				cp 'N' 
dce4				ret z 
dce4			 
dce4				call delay1s 
dce4			 
dce4				ld a, (store_page+2) 
dce4				ld (store_openmaxext), a    ; save count of ext 
dce4				ld a, 1  
dce4				ld (store_openext), a    ; save count of ext 
dce4			 
dce4			.autof:  
dce4				ld l , a 
dce4				 
dce4				ld a, (store_page) 
dce4				ld h, a	 
dce4				ld de, store_page 
dce4					if DEBUG_FORTH_WORDS 
dce4						DMARK "ASl" 
dce4						CALLMONITOR 
dce4					endif 
dce4					call storage_read 
dce4				call ishlzero 
dce4				ret z 
dce4			;	jr z, .autoend 
dce4			 
dce4					if DEBUG_FORTH_WORDS 
dce4						DMARK "ASc" 
dce4						CALLMONITOR 
dce4					endif 
dce4				ld de, store_page+2 
dce4				ld a, display_row_4 
dce4				call str_at_display 
dce4			 
dce4				call update_display 
dce4				call delay250ms 
dce4			 
dce4			 
dce4			 
dce4				ld hl, store_page+2 
dce4				call forthparse 
dce4				call forthexec 
dce4				call forthexec_cleanup 
dce4			 
dce4				 
dce4				ld a, (store_openext) 
dce4				inc a 
dce4				ld (store_openext), a    ; save count of ext 
dce4			 
dce4				jr .autof 
dce4			;.autofdone: 
dce4			; 
dce4			;		if DEBUG_FORTH_WORDS 
dce4			;			DMARK "ASx" 
dce4			;			CALLMONITOR 
dce4			;		endif 
dce4			;;	call clear_display 
dce4			;	ret 
dce4			 
dce4			 
dce4			 
dce4			endif 
# End of file forth_startupv1.asm
dce4			endif 
dce4			if STARTUP_V2 
dce4				include "forth_startupv2.asm" 
dce4			endif 
dce4			 
# End of file forth_startup.asm
dce4			 
dce4			; eof 
# End of file forth_kernel.asm
dce4			;include "nascombasic.asm" 
dce4			 
dce4			 
dce4			; find out where the code ends if loaded into RAM (for SC114) 
dce4			;endofcode:  
dce4			;	nop 
dce4			 
dce4			 
dce4			; jump to nmi vector 
dce4			 
dce4			init_nmi: 
dce4 3e c9			ld a, $c9   ; RET 
dce6 32 72 ee			ld (nmi_vector), a 
dce9 c9				ret 
dcea			nmi: 
dcea e5				push hl 
dceb d5				push de 
dcec c5				push bc 
dced f5				push af 
dcee cd 72 ee			call nmi_vector 
dcf1 f5				push af 
dcf2 c5				push bc 
dcf3 d5				push de 
dcf4 e5				push hl 
dcf5 ed 4d			reti 
dcf7			 
dcf7			 
dcf7			; eof 
dcf7			 
# End of file main.asm
dcf7			;include "firmware_lcd_4x40.asm" 
dcf7			;;include "firmware_lcd_4x20.asm" 
dcf7			include "firmware_serial_display.asm" 
dcf7			 
dcf7			; Serial display interface for SC114 
dcf7			 
dcf7			 
dcf7			display_row_1: equ 0 
dcf7			display_row_2: equ display_row_1+display_cols 
dcf7			display_row_3: equ display_row_2 + display_cols 
dcf7			display_row_4: equ display_row_3 + display_cols 
dcf7			 
dcf7			kLCDWidth:  EQU display_cols             ;Width in characters 
dcf7			kLCD_Line1: EQU 0x00  
dcf7			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
dcf7			; E1 
dcf7			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
dcf7			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
dcf7			 
dcf7			lcd_init: 
dcf7				; no init as handled by the SCM bios 
dcf7 c9				ret 
dcf8			 
dcf8			 
dcf8			; low level functions for direct screen writes 
dcf8			 
dcf8			; output char at pos? 
dcf8			fLCD_Str: 
dcf8			        ;out (SC114_SIO_1_OUT),a 
dcf8 c5				push bc 
dcf9 0e 02			ld c, $02 
dcfb f7				rst $30 
dcfc c1				pop bc 
dcfd c9				ret 
dcfe			 
dcfe			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
dcfe			fLCD_Pos: 
dcfe				; use ASCII escape to position 
dcfe			        ;out (SC114_SIO_1_OUT),a 
dcfe c5				push bc 
dcff 0e 02			ld c, $02 
dd01 f7				rst $30 
dd02 c1				pop bc 
dd03			 
dd03 c9				ret 
dd04			 
dd04			; output char at pos 
dd04			fLCD_Data: 
dd04			      ;  out (SC114_SIO_1_OUT),a 
dd04 c5				push bc 
dd05 0e 02			ld c, $02 
dd07 f7				rst $30 
dd08 c1				pop bc 
dd09			 
dd09 c9				ret 
dd0a			 
dd0a			; ascii cls  
dd0a			 
dd0a 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
dd0e			 
dd0e			; write the frame buffer given in hl to hardware  
dd0e			write_display: 
dd0e			 
dd0e			API: equ 0 
dd0e			 
dd0e			if API 
dd0e				push bc 
dd0e				ld b, 4 
dd0e			 
dd0e			        ld (display_write_tmp), hl 	  
dd0e			 
dd0e				; clear and home cursor 
dd0e			 
dd0e				ld c, 6 
dd0e				ld de, .cls 
dd0e				rst $30 
dd0e			 
dd0e			 
dd0e			.writeln: 
dd0e			 
dd0e				ld de, (display_write_tmp) 
dd0e				ld c, 6 
dd0e				rst $30 
dd0e				ld c, 7 
dd0e				rst $30 
dd0e			 
dd0e				ld hl, (display_write_tmp) 
dd0e				ld de, display_cols 
dd0e				add hl,de 
dd0e				ld (display_write_tmp),hl 
dd0e			 
dd0e				djnz  .writeln 
dd0e			 
dd0e				pop bc 
dd0e			 
dd0e			 
dd0e				ret 
dd0e			endif 
dd0e e5				push hl 
dd0f c5				push bc 
dd10 d5				push de 
dd11			 
dd11			;	ld c, 2 
dd11			;	;ld de, .cls 
dd11			;	ld a, 27 
dd11			;	rst $30 
dd11			;	ld c, 2 
dd11			;	;ld de, .cls 
dd11			;	ld a, '[' 
dd11			;	rst $30 
dd11			; 
dd11			;	ld c, 2 
dd11			;	;ld de, .cls 
dd11			;	ld a, 'H' 
dd11			;	rst $30 
dd11			; 
dd11			 
dd11 0e 02			ld c, 2 
dd13				;ld de, .cls 
dd13 3e 1b			ld a, 27 
dd15 f7				rst $30 
dd16			 
dd16			 
dd16 0e 02			ld c, 2 
dd18				;ld de, .cls 
dd18 3e 5b			ld a, '[' 
dd1a f7				rst $30 
dd1b 0e 02			ld c, 2 
dd1d				;ld de, .cls 
dd1d 3e 32			ld a, '2' 
dd1f f7				rst $30 
dd20 0e 02			ld c, 2 
dd22				;ld de, .cls 
dd22 3e 4a			ld a, 'J' 
dd24 f7				rst $30 
dd25 d1				pop de 
dd26 c1				pop bc 
dd27 e1				pop hl 
dd28			 
dd28			 
dd28 22 c3 eb		        ld (display_write_tmp), hl 	  
dd2b 3e 00			ld a, kLCD_Line1 
dd2d			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dd2d 06 28			ld b, display_cols 
dd2f ed 5b c3 eb		ld de, (display_write_tmp) 
dd33 cd 91 dd			call write_len_string 
dd36				 
dd36			 
dd36 e5			push hl 
dd37 d5			push de 
dd38 c5			push bc 
dd39 0e 07			ld c, 7 
dd3b f7				rst $30 
dd3c c1			pop bc 
dd3d d1			pop de 
dd3e e1			pop hl 
dd3f			 
dd3f				 
dd3f 2a c3 eb			ld hl, (display_write_tmp) 
dd42 11 28 00			ld de, display_cols 
dd45 19				add hl,de 
dd46 22 c3 eb			ld (display_write_tmp),hl 
dd49			 
dd49				 
dd49 3e 28			ld a, kLCD_Line2 
dd4b			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dd4b 06 28			ld b, display_cols 
dd4d ed 5b c3 eb		ld de, (display_write_tmp) 
dd51 cd 91 dd			call write_len_string 
dd54				 
dd54 2a c3 eb			ld hl, (display_write_tmp) 
dd57 11 28 00			ld de, display_cols 
dd5a 19				add hl,de 
dd5b 22 c3 eb			ld (display_write_tmp),hl 
dd5e			 
dd5e e5			push hl 
dd5f d5			push de 
dd60 c5			push bc 
dd61 0e 07			ld c, 7 
dd63 f7				rst $30 
dd64 c1			pop bc 
dd65 d1			pop de 
dd66 e1			pop hl 
dd67			 
dd67				 
dd67 3e 50			ld a, kLCD_Line3 
dd69			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
dd69 06 28			ld b, display_cols 
dd6b ed 5b c3 eb		ld de, (display_write_tmp) 
dd6f cd 91 dd			call write_len_string 
dd72				 
dd72 2a c3 eb			ld hl, (display_write_tmp) 
dd75 11 28 00			ld de, display_cols 
dd78 19				add hl,de 
dd79 22 c3 eb			ld (display_write_tmp),hl 
dd7c			 
dd7c e5			push hl 
dd7d d5			push de 
dd7e c5			push bc 
dd7f 0e 07			ld c, 7 
dd81 f7				rst $30 
dd82 c1			pop bc 
dd83 d1			pop de 
dd84 e1			pop hl 
dd85			 
dd85				 
dd85 3e 78			ld a, kLCD_Line4 
dd87			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
dd87 06 28			ld b, display_cols 
dd89 ed 5b c3 eb		ld de, (display_write_tmp) 
dd8d cd 91 dd			call write_len_string 
dd90 c9					ret 
dd91			 
dd91			 
dd91				; write out a fixed length string given in b from de 
dd91			 
dd91 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
dd92 cd 04 dd		            CALL fLCD_Data      ;Write character to display 
dd95 13				inc de 
dd96 10 f9			djnz write_len_string 
dd98 c9				ret 
dd99			 
dd99			 
dd99			; eof 
# End of file firmware_serial_display.asm
dd99			;include "firmware_key_5x10.asm" 
dd99			;;include "firmware_key_4x10.asm" 
dd99			include "firmware_key_serial.asm" 
dd99			; Serial keyboard interface for SC114 
dd99			 
dd99			key_init: 
dd99				; no init as handled by the SCM bios 
dd99 c9				ret 
dd9a			 
dd9a			 
dd9a			cin_wait: 
dd9a			;	ld a, 0 
dd9a			;	ret 
dd9a			 
dd9a				;in a,(SC114_SIO_1_IN) 
dd9a			        ; Use SCM API to get from whatever console device we are using 
dd9a c5				push bc 
dd9b 0e 01			ld c, $01 
dd9d f7				rst $30 
dd9e c1				pop bc 
dd9f c9				ret 
dda0			 
dda0			cin: 
dda0			 
dda0			 
dda0 c5				push bc 
dda1			 
dda1				; any key waiting to process? 
dda1 0e 03			ld c, $03 
dda3 f7				rst $30 
dda4 28 05			jr z, .cin_skip 
dda6			 
dda6				; yep, get it 
dda6			 
dda6 0e 01			ld c, $01 
dda8 f7				rst $30 
dda9 c1				pop bc 
ddaa c9				ret 
ddab			.cin_skip: 
ddab 3e 00			ld a, 0 
ddad c1				pop bc 
ddae c9				ret 
ddaf			 
ddaf			 
ddaf			 
ddaf			 
# End of file firmware_key_serial.asm
ddaf			endofcode:  
ddaf			baseram:  
ddaf 00				nop 
ddb0			 
ddb0			heap_start: equ baseram+15  ; Starting address of heap 
ddb0			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
ddb0			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
ddb0			;VDU:  EQU     endofcode           ; BASIC Work space 
ddb0			; eof 
ddb0			 
# End of file os_mega_sc114.asm
ddb0
