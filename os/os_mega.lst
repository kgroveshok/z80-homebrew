# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 32 1c			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-08-11 21:06' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
001f			 
001f			 
001f			 
001f			;        nop  
001f			;        nop 
001f			;;	org 05h		; null out bdos call 
001f			; 
001f			;        nop  
001f			;        nop  
001f			;        nop 
001f			;;	org 08h 
001f			;;; 
001f			;;	jp cin		; rst 8 - char in 
001f			;;; 
001f			; 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;	org 010h 
001f			;; 
001f			;	jp cout		; rest 010h  - char out 
001f			;; 
001f			;	org 01bh   
001f			; 
001f			;	;jp  		; rst 01bh   - write string to display 
001f			;	jp str_at_display 
001f			; 
001f			; 
001f			;	org 020h 
001f			; 
001f			;	; jp		 ; rst 020h - read char at screen location 
001f			; 
001f			;	org 028h 
001f			 
001f				; jp		 ; rst 028h  - storage i/o 
001f			 
001f			; 	org 030h 
001f			;	jp break_point_state 
001f			  
001f			; $30  
001f			; org 038h 
001f			; $38 
001f			 
001f			; TODO any more important entry points to add to jump table for easier coding use? 
001f			 
001f			if BASE_KEV = 1  
001f			 
001f				; need to be at $66 for nmi support 
001f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0025 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0031 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0037 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0043 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0049 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0055 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0061 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0067 00 ff			db 0,255 
0069 c3 c9 6f			jp nmi 
006c			endif 
006c			 
006c			include "firmware.asm" 
006c			  
006c			; main constants (used here and in firmware)  
006c			  
006c			; TODO have page 0 of storage as bios  
006c			  
006c			Device_A: equ 0h  
006c			Device_B: equ 040h          ; Sound  
006c			  
006c			if BASE_KEV  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_SC114  
006c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			; TODO fixup for CPM  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			Device_D: equ 0c0h             ; Keyboard and LCD  
006c			  
006c			; Odd specific debug points for testing hardware dev  
006c			  
006c			;if DEBUG_LEVEL0  
006c			;	include "debug_level0.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL1  
006c			;	include "debug_level1.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL2  
006c			;	include "debug_level2.asm"  
006c			;endif  
006c			  
006c			  
006c			CALLMONITOR: macro  
006c			;	call break_point_state  
006c			; now use the break point debug vector  
006c				call debug_vector  
006c				endm  
006c			  
006c			MALLOC_1: equ 1        ; from dk88   
006c			MALLOC_2: equ 0           ; broke  
006c			MALLOC_3: equ 0           ; really broke  
006c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
006c			  
006c			if BASE_KEV   
006c			;stacksize: equ 256  
006c			; each stack entry is three bytes (type + word)  
006c			stacksize: equ 3*150  
006c			  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 512  
006c			endif  
006c			if BASE_SC114  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			;if STORAGE_SE == 0  
006c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
006c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
006c			;endif  
006c			  
006c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
006c			  
006c			STORE_0_AUTORUN: equ $20  
006c			  
006c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
006c			  
006c			STORE_0_AUTOFILE: equ $21  
006c			STORE_0_BANKRUN: equ $23  
006c			STORE_0_FILERUN: equ $24  
006c			  
006c			; Block 0 offsets for settings  
006c			  
006c			; if set then skip prompt for start up and accept all  
006c			  
006c			STORE_0_QUICKSTART: equ $25  
006c			  
006c			; Blocks where directory table is held  
006c			  
006c			; Reducing the number of entries increases the max file size  
006c			  
006c			;STORE_DIR_START: equ 1  
006c			;STORE_DIR_END: equ 33  
006c			  
006c			; Blocks from where file data is stored  
006c			  
006c			;STORE_DATA_START: equ STORE_DIR_END + 1  
006c			  
006c			; Block indicators (<32 are data files)  
006c			  
006c			;STORE_BLOCK_CFG: equ $8f       ; config block  
006c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
006c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
006c			;STORE_BLOCK_FREE: equ $85       ; data block free  
006c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
006c			  
006c			  
006c			  
006c			; Directory entry flags  
006c			  
006c			;STORE_DIR_FREE: equ 0  
006c			;STORE_DIR_FILE:  equ 1  
006c			  
006c			; Structure offsets to directory entries  
006c			;STORE_DE_FLAG: equ 0  
006c			;STORE_DE_MAXEXT: equ 1  
006c			;STORE_DE_FILENAME: equ 2  
006c			  
006c			; Structure offsets to block 0  
006c			  
006c			;STORE_BK0_ISFOR: equ 1  
006c			;STORE_BK0_LABEL: equ 3  
006c			  
006c			; memory allocation   
006c			  
006c			chk_stund: equ tos+2           ; underflow check word  
006c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
006c			  
006c			; keyscan table needs rows x cols buffer  
006c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
006c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
006c			  
006c			keyscan_table_row1: equ chk_stovr -key_cols-1  
006c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
006c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
006c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
006c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
006c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
006c			keyscan_scancol: equ keyscan_table-key_cols  
006c			;keyscan_table_len: equ key_rows*key_cols  
006c			;keybufptr: equ keyscan_table - 2  
006c			;keysymbol: equ keybufptr - 1  
006c			key_held: equ keyscan_scancol-1	; currently held  
006c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
006c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
006c			key_fa: equ key_repeat_ct -1 ;  
006c			key_fb: equ key_fa -1 ;  
006c			key_fc: equ key_fb -1 ;  
006c			key_fd: equ key_fc -1 ;  
006c			key_face_held: equ key_fd - 1   
006c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
006c			  
006c			hardware_config: equ key_face_held - 10  
006c			  
006c			; hardware config switches  
006c			; TODO add bitmasks on includes for hardware  
006c			; high byte for expansion ids  
006c			;     0000 0000  no card inserted  
006c			;     0000 0001  storage card inserted  
006c			;     0000 0010  spi sd card active  
006c			  
006c			;       
006c			; low byte:  
006c			;     0000 0001   4x4 keypad  
006c			;     0000 0010   full keyboard  
006c			;     0000 0011   spi/ext keyboard  
006c			;     0000 0100   20x4 lcd  
006c			;     0000 1000   40x4 lcd  
006c			;     0000 1100   spi/ext display  
006c			;     0001 0000   ide interface available  
006c			  
006c			hardware_word: equ hardware_config - 2  
006c			  
006c			; debug marker - optional display of debug point on the debug screens  
006c			  
006c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
006c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
006c			  
006c			debug_umark: equ debug_vector - 6  ; current user mark  
006c			debug_mark: equ debug_umark - 4    ; internal word debug points  
006c			  
006c			; input_str vars  
006c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
006c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
006c			input_size: equ input_start -1  ; number of chars  
006c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
006c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
006c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
006c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
006c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
006c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
006c			input_len: equ input_cur_onoff - 5 ; length of current input  
006c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
006c			  
006c			; cursor blink rate  
006c			CUR_BLINK_RATE: equ $09  
006c			;CUR_BLINK_RATE: equ 15  
006c			  
006c			key_actual_pressed: equ input_cursor - 1   
006c			key_symbol: equ key_actual_pressed - 1   
006c			key_shift: equ key_symbol - 1   
006c			  
006c			; Display allocation  
006c			  
006c			;display_rows: equ 4     ; move out to mini and mega files  
006c			;display_cols: equ 20  
006c			  
006c			display_fb_len: equ display_rows*display_cols  
006c			  
006c			; primary frame buffer     
006c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
006c			; working frame buffers  
006c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
006c			display_fb3: equ  display_fb1-display_fb_len - 1  
006c			display_fb2: equ  display_fb3-display_fb_len - 1  
006c			;  
006c			; pointer to active frame buffer  
006c			display_fb_active: equ display_fb2 - 2  
006c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
006c			display_write_tmp: equ display_lcde1e2 - 2  
006c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
006c			  
006c			;  
006c			  
006c			;; can load into de directory  
006c			cursor_col: equ display_active-1  
006c			cursor_row: equ cursor_col-1  
006c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
006c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
006c			  
006c			; maths vars  
006c			  
006c			LFSRSeed: equ cursor_shape -20   
006c			randData: equ LFSRSeed - 2  
006c			xrandc: equ randData - 2  
006c			stackstore: equ xrandc - 2  
006c			seed1: equ  stackstore -2   
006c			seed2: equ seed1 - 2  
006c			  
006c			; cf storage vars  
006c			  
006c			iErrorNum:  equ seed2-1         ;Error number  
006c			iErrorReg:  equ iErrorNum -1              ;Error register  
006c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
006c			  
006c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
006c			  
006c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
006c			  
006c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
006c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
006c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
006c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
006c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
006c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
006c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
006c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
006c			store_tmpid: equ store_tmp3 - 1		; page temp id  
006c			store_tmpext: equ store_tmpid - 1		; file extent temp  
006c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
006c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
006c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
006c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
006c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
006c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
006c			;  
006c			; spi vars  
006c			  
006c			  
006c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
006c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
006c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
006c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
006c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
006c			spi_device_id: equ spi_device - 1    ; human readable bank number  
006c			  
006c			;;;;; forth cli params  
006c			  
006c			; TODO use a different frame buffer for forth???  
006c			  
006c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
006c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
006c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
006c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
006c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
006c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
006c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
006c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
006c			  
006c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
006c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
006c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
006c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
006c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
006c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
006c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
006c			  
006c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
006c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
006c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
006c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
006c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
006c			  
006c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
006c			  
006c			; os/forth token vars  
006c			  
006c			os_last_cmd: equ os_var_array-255  
006c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
006c			os_current_i: equ os_cli_cmd-2  
006c			os_cur_ptr: equ os_current_i-2  
006c			os_word_scratch: equ os_cur_ptr-30  
006c			os_tok_len: equ os_word_scratch - 2  
006c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
006c			os_tok_malloc: equ os_tok_ptr - 2  
006c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
006c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
006c			execscratch: equ os_input-255        ; exec cmd eval buffer  
006c			scratch: equ execscratch-255  
006c			  
006c			os_stack_1: equ scratch - 3       ; stack holding area 1  
006c			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
006c			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
006c			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
006c			  
006c			  
006c			; temp locations for new word processing to save on adding more   
006c			  
006c			os_new_malloc: equ os_stack_4-2  
006c			os_new_parse_len: equ os_new_malloc - 2  
006c			os_new_word_len: equ os_new_parse_len - 2  
006c			os_new_work_ptr: equ os_new_word_len - 2  
006c			os_new_src_ptr: equ os_new_work_ptr - 2  
006c			os_new_exec: equ os_new_src_ptr - 2  
006c			os_new_exec_ptr: equ os_new_exec - 2  
006c			  
006c			; resume memory alloocations....  
006c			  
006c			;os_view_disable: equ os_new_exec_ptr - 1  
006c			os_view_af: equ os_new_exec_ptr - 2  
006c			os_view_hl: equ os_view_af -2  
006c			os_view_de: equ os_view_hl - 2  
006c			os_view_bc: equ os_view_de - 2  
006c			  
006c			; stack checksum word  
006c			if DEBUG_STACK_IMB  
006c				curframe: equ  os_view_de - 5  
006c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
006c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			else  
006c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			endif  
006c			  
006c			; with data stack could see memory filled with junk. need some memory management   
006c			; malloc and free entry points added  
006c			  
006c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
006c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			;heap_end: equ free_list-1  ; Starting address of heap  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			heap_end: equ chk_word-1  ; Starting address of heap  
006c			  
006c			  
006c			;if BASE_KEV   
006c			;heap_start: equ 0800eh  ; Starting address of heap  
006c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;heap_start: equ baseram+15  ; Starting address of heap  
006c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;endif  
006c			  
006c			  
006c			;;;;  
006c			  
006c			  
006c			; change below to point to last memory alloc above  
006c			topusermem:  equ   heap_start  
006c			  
006c			;if BASE_KEV   
006c			;baseusermem: equ 08000h  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;;aseusermem:     equ    12  
006c			;baseusermem:     equ    prompt  
006c			;;baseusermem:     equ    endofcode  
006c			;endif  
006c			  
006c			  
006c			; **********************************************************************  
006c			; **  Constants  
006c			; **********************************************************************  
006c			  
006c			; Constants used by this code module  
006c			kDataReg:   EQU Device_D           ;PIO port A data register  
006c			kContReg:   EQU Device_D+2           ;PIO port A control register  
006c			  
006c			  
006c			portbdata:  equ Device_D+1    ; port b data  
006c			portbctl:   equ Device_D+3    ; port b control  
006c			  
006c			  
006c			;KEY_SHIFT:   equ 5  
006c			;KEY_SYMBOLSHIFT:  equ 6  
006c			  
006c			KEY_SHIFTLOCK: equ 4  
006c			  
006c			  
006c			KEY_UP: equ 5  
006c			KEY_NEXTWORD: equ 6  
006c			KEY_PREVWORD: equ 7  
006c			KEY_BS: equ 8  
006c			KEY_TAB:  equ 9  
006c			KEY_DOWN: equ 10  
006c			KEY_LEFT: equ 11  
006c			KEY_RIGHT: equ 12  
006c			KEY_CR:   equ 13  
006c			KEY_HOME: equ 14  
006c			KEY_END: equ 15  
006c			  
006c			KEY_F1: equ 16  
006c			KEY_F2: equ 17  
006c			KEY_F3: equ 18  
006c			KEY_F4: equ 19  
006c			  
006c			KEY_F5: equ 20  
006c			KEY_F6: equ 21  
006c			KEY_F7: equ 22  
006c			KEY_F8: equ 23  
006c			  
006c			KEY_F9: equ 24  
006c			KEY_F10: equ 25  
006c			KEY_F11: equ 26  
006c			KEY_F12: equ 27  
006c			  
006c			;if DEBUG_KEY  
006c			;	KEY_MATRIX_NO_PRESS: equ '.'  
006c			;	KEY_SHIFT:   equ '.'  
006c			;	KEY_SYMBOLSHIFT:  equ '.'  
006c			;else  
006c				KEY_SHIFT:   equ '~'  
006c				KEY_SYMBOLSHIFT:  equ '~'  
006c				KEY_MATRIX_NO_PRESS: equ '~'  
006c			;endi  
006c			  
006c			  
006c			  
006c			  
006c			; Macro to make adding debug marks easier  
006c			  
006c			DMARK: macro str  
006c				push af  
006c				ld a, (.dmark)  
006c				ld (debug_mark),a  
006c				ld a, (.dmark+1)  
006c				ld (debug_mark+1),a  
006c				ld a, (.dmark+2)  
006c				ld (debug_mark+2),a  
006c				jr .pastdmark  
006c			.dmark: db str  
006c			.pastdmark: pop af  
006c			  
006c			endm  
006c			  
006c			  
006c			; macro to detect for stack imbalances  
006c			  
006c			include "stackimbal.asm"  
006c			; Macro and code to detect stock imbalances 
006c			 
006c			SPPUSH: equ 0 
006c			 
006c			; Add a stack frame which can be checked before return 
006c			 
006c			STACKFRAME: macro onoff frame1 frame2 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c						exx 
006c			 
006c						ld de, frame1 
006c						ld a, d 
006c						ld hl, curframe 
006c						call hexout 
006c						ld a, e 
006c						ld hl, curframe+2 
006c						call hexout 
006c			  
006c						ld hl, frame1 
006c						push hl 
006c						ld hl, frame2 
006c						push hl 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			endm 
006c			 
006c			STACKFRAMECHK: macro onoff frame1 frame2 
006c			 
006c					 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						exx 
006c						; check stack frame SP 
006c			 
006c						ld hl, frame2 
006c						pop de   ; frame2 
006c			 
006c						call cmp16 
006c						jr nz, .spnosame 
006c						 
006c			 
006c						ld hl, frame1 
006c						pop de   ; frame1 
006c			 
006c						call cmp16 
006c						jr z, .spfrsame 
006c			 
006c						.spnosame: call showsperror 
006c			 
006c						.spfrsame: nop 
006c			 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			 
006c			 
006c			endm 
006c			 
006c			 
006c			; for a sub routine, wrap SP collection and comparisons 
006c			 
006c			; Usage: 
006c			; 
006c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
006c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
006c			 
006c			SAVESP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c			 
006c						ld (store_sp+(storeword*4)), sp 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			CHECKSP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c			 
006c						; save SP after last save 
006c				 
006c						ld (store_sp+(storeword*4)+2), sp 
006c			 
006c						push hl 
006c						ld hl, store_sp+(storeword*4) 
006c						call check_stack_sp  
006c						pop hl 
006c			 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			if DEBUG_STACK_IMB 
006c			 
006c			check_stack_sp: 
006c					push de 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					push de 
006c			 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					pop hl 
006c			 
006c			 
006c					; check to see if the same 
006c			 
006c					call cmp16 
006c					jr z, .spsame 
006c			 
006c					; not same 
006c			 
006c					call showsperror 
006c			.spsame: 
006c			 
006c					pop de 
006c			 
006c					ret 
006c			 
006c			.sperr:  db "Stack imbalance",0 
006c			 
006c			 
006c			showsperror: 
006c			 
006c			 
006c				push hl 
006c				push af 
006c				push de 
006c				call clear_display 
006c				ld de, .sperr 
006c				ld a,0 
006c			;	ld de,os_word_scratch 
006c				call str_at_display 
006c				ld a, display_row_1+17 
006c				ld de, debug_mark 
006c				call str_at_display 
006c				ld a, 0 
006c				ld (curframe+4),a 
006c				ld hl, curframe 
006c				ld de, os_word_scratch 
006c				ld a, display_row_4 
006c				call str_at_display 
006c				call update_display 
006c				;call break_point_state 
006c				call cin_wait 
006c			 
006c			;	ld a, ' ' 
006c			;	ld (os_view_disable), a 
006c				call bp_on 
006c				pop de	 
006c				pop af 
006c				pop hl 
006c				CALLMONITOR 
006c				ret 
006c			 
006c			endif 
006c			 
006c			 
006c			 
006c			; eof 
# End of file stackimbal.asm
006c			  
006c			;TODO macro to calc col and row offset into screen  
006c			  
006c			  
006c			  
006c			hardware_init:  
006c			  
006c				  
006c			  
006c					;ld a, 0  
006c					;ld (hardware_diag), a  
006c			  
006c					; clear all the buffers  
006c			  
006c 21 45 fc				ld hl, display_fb1  
006f 22 01 fb				ld (display_fb_active), hl  
0072			  
0072 cd aa 0d				call clear_display  
0075			  
0075 21 03 fb				ld hl, display_fb2  
0078 22 01 fb				ld (display_fb_active), hl  
007b			  
007b cd aa 0d				call clear_display  
007e			  
007e					; init primary frame buffer area  
007e 21 e6 fc				ld hl, display_fb0  
0081 22 01 fb				ld (display_fb_active), hl  
0084			  
0084 cd aa 0d				call clear_display  
0087			  
0087			  
0087 cd d6 6f				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
008a			  
008a cd 6d 72			call key_init  
008d cd 56 02			call storage_init  
0090			  
0090				; setup malloc functions  
0090			  
0090				if MALLOC_1  
0090 cd 95 13				call  heap_init  
0093				endif  
0093				if MALLOC_4  
0093					call  heap_init  
0093				endif  
0093			  
0093				; init sound hardware if present  
0093			  
0093				if SOUND_ENABLE  
0093					call sound_init  
0093				endif  
0093			  
0093				; lcd test sequence  
0093					  
0093 cd cd 0d			call update_display  
0096 cd ed 0c			call delay1s  
0099 3e 2b			ld a,'+'  
009b cd af 0d			call fill_display  
009e cd cd 0d			call update_display  
00a1 cd ed 0c			call delay1s  
00a4 3e 2a			ld a,'*'  
00a6 cd af 0d			call fill_display  
00a9 cd cd 0d			call update_display  
00ac cd ed 0c			call delay1s  
00af 3e 2d			ld a,'-'  
00b1 cd af 0d			call fill_display  
00b4 cd cd 0d			call update_display  
00b7 cd ed 0c			call delay1s  
00ba			  
00ba			; boot splash screen  
00ba			if display_cols == 20	  
00ba			        ld a, display_row_1    
00ba			else  
00ba 3e 0a		        ld a, display_row_1 +10   
00bc			endif  
00bc 11 22 1b			ld de, prom_bootmsg  
00bf cd bd 0d			call str_at_display  
00c2 cd cd 0d			call update_display  
00c5			  
00c5			  
00c5 cd ed 0c			call delay1s  
00c8 cd ed 0c			call delay1s  
00cb			if display_cols == 20	  
00cb			            LD   A, display_row_3+2  
00cb			else  
00cb 3e 5c		            LD   A, display_row_3+12  
00cd			endif  
00cd 11 37 1b			ld de, prom_bootmsg1  
00d0 cd bd 0d			call str_at_display  
00d3			; display debug level  
00d3 3e 78		            LD   A, display_row_4  
00d5 11 1b 00			ld de, debuglevel  
00d8 cd bd 0d			call str_at_display  
00db			  
00db cd cd 0d			call update_display  
00de cd ed 0c			call delay1s  
00e1 cd ed 0c			call delay1s  
00e4			  
00e4			;	ld a, display_row_4+3  
00e4			;	ld de, bootmsg2  
00e4			;	call str_at_display  
00e4			;	call update_display  
00e4			;	call delay1s  
00e4			;	call delay1s  
00e4			  
00e4			; debug mark setup  
00e4			  
00e4 3e 5f		ld a, '_'  
00e6 32 a0 fd		ld (debug_mark),a  
00e9 32 a1 fd		ld (debug_mark+1),a  
00ec 32 a2 fd		ld (debug_mark+2),a  
00ef 3e 00		ld a,0  
00f1 32 a3 fd		ld (debug_mark+3),a  
00f4 32 a4 fd		ld (debug_umark),a  
00f7			  
00f7 c9					ret  
00f8			  
00f8			  
00f8			;bootmsg2:	db "Firmware v0.1",0  
00f8			  
00f8			; a 4x20 lcd  
00f8			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00f8			  
00f8			;if display_cols == 20  
00f8			;	include "firmware_lcd_4x20.asm"  
00f8			;endif  
00f8			  
00f8			;if display_cols == 40  
00f8			;	include "firmware_lcd_4x40.asm"  
00f8			;endif  
00f8			  
00f8			;  
00f8			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00f8			; TODO abstract the bit bang video out interface for dual display  
00f8			; TODO wire video out to tx pin on rc2014 bus  
00f8			  
00f8			; must supply cin, and cin_wait for low level hardware abstraction   
00f8			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00f8			; test scancode  
00f8			  
00f8			;;;;;  
00f8			;;;  
00f8			; Moved out to mini and maxi versions  
00f8			;  
00f8			; include "firmware_key_4x4.asm"  
00f8			; using existing 4 wire x 4 resistor array for input  
00f8			;include "firmware_key_4x10.asm"  
00f8			; need to mod the board for 5 rows due to resistor array  
00f8			;include "firmware_key_5x10.asm"  
00f8			  
00f8			; storage hardware interface  
00f8			  
00f8			; use microchip serial eeprom for storage  
00f8			  
00f8			  
00f8			if STORAGE_SE  
00f8				include "firmware_spi.asm"  
00f8			; my spi protocol (used by storage) 
00f8			 
00f8			; SPI pins 
00f8			 
00f8			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00f8			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00f8			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00f8			 
00f8			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00f8			; chip pin 4 gnd 
00f8			 
00f8			 
00f8			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00f8			SPI_CE1: equ 1      ;    port a1 pin 14  
00f8			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00f8			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00f8			SPI_CE4: equ 4      ; port a4     pin 10 
00f8			 
00f8			; active low AND masks 
00f8			 
00f8			;SPI_CE0_MASK: equ    255-1 
00f8			;SPI_CE1_MASK: equ   255-2 
00f8			;SPI_CE2_MASK: equ   255-4 
00f8			;SPI_CE3_MASK: equ   255-8 
00f8			;SPI_CE4_MASK: equ   255-16 
00f8			SPI_CE_HIGH:  equ 255 
00f8			 
00f8			 
00f8			 
00f8			;  Perform SCLK wait pulse 
00f8			 
00f8			spi_clk: 
00f8 f5				push af 
00f9 3a 99 f9			ld a, (spi_clktime) 
00fc fe 00			cp 0 
00fe 28 03			jr z, .scskip 
0100 cd d2 0c			call aDelayInMS 
0103			.scskip: 
0103 f1				pop af 
0104 c9				ret 
0105			 
0105			 
0105			 
0105			; TODO store port id for spi device ie dev c 
0105			; TODO store pin for SO 
0105			; TODO store pin for SI 
0105			; TODO store pin for SCLK 
0105			 
0105			; 
0105			 
0105			; ensure that spi bus is in a stable state with default pins  
0105			 
0105			se_stable_spi:   
0105			 
0105				 ; set DI high, CE high , SCLK low 
0105				;ld a, SPI_DI | SPI_CE0 
0105 3e 07			ld a, SPI_DI  
0107 cd 11 02			call spi_ce_high 
010a d3 80			 out (storage_adata),a 
010c 32 96 f9			ld (spi_portbyte),a 
010f			 
010f				if DEBUG_SPI 
010f					push hl 
010f					ld l, a 
010f					DMARK "SPI" 
010f					CALLMONITOR 
010f					pop hl 
010f				endif 
010f c9				ret 
0110			 
0110			; byte to send in a 
0110			 
0110			spi_send_byte: 
0110				; save byte to send for bit mask shift out 
0110 4f			        ld c,a 
0111 3a 96 f9			ld a,(spi_portbyte) 
0114				  
0114				; clock out	each bit of the byte msb first 
0114			 
0114 06 08			ld b, 8 
0116			.ssb1: 
0116				; clear so bit  
0116 cb bf			res SPI_DI, a 
0118 cb 11			rl c 
011a				; if bit 7 is set then carry is set 
011a 30 02			jr nc, .ssb2 
011c cb ff			set SPI_DI,a 
011e			.ssb2:  ; output bit to ensure it is stable 
011e d3 80			out (storage_adata),a 
0120 00				nop 
0121				; clock bit high 
0121 cb ef			set SPI_SCLK,a 
0123 d3 80			out (storage_adata),a 
0125 00				nop 
0126 cd f8 00			call spi_clk 
0129				; then low 
0129 cb af			res SPI_SCLK,a 
012b d3 80			out (storage_adata),a 
012d 00				nop 
012e cd f8 00			call spi_clk 
0131 10 e3			djnz .ssb1 
0133			 
0133 32 96 f9			ld (spi_portbyte),a 
0136 c9				ret 
0137			 
0137			; TODO low level get byte into A on spi 
0137			 
0137			spi_read_byte:  
0137			 
0137				; save byte to send for bit mask shift out 
0137 0e 00		    ld c,0 
0139 3a 96 f9			ld a,(spi_portbyte) 
013c				  
013c				; clock out	each bit of the byte msb first 
013c			 
013c			 
013c				; clock bit high 
013c cb ef			set SPI_SCLK,a 
013e d3 80			out (storage_adata),a 
0140 00				nop 
0141 cd f8 00			call spi_clk 
0144			 
0144			    ; read DO  
0144			 
0144 cb f9		    set 7,c 
0146 db 80			in a,(storage_adata) 
0148 cb 77		    bit SPI_DO,a 
014a 20 02		    jr nz, .b7 
014c cb b9		    res 7,c 
014e			.b7: 
014e				; then low 
014e cb af			res SPI_SCLK,a 
0150 d3 80			out (storage_adata),a 
0152 00				nop 
0153 cd f8 00			call spi_clk 
0156			     
0156			 
0156				; clock bit high 
0156 cb ef			set SPI_SCLK,a 
0158 d3 80			out (storage_adata),a 
015a 00				nop 
015b cd f8 00			call spi_clk 
015e			 
015e			    ; read DO  
015e			 
015e cb f1		    set 6,c 
0160 db 80			in a,(storage_adata) 
0162 cb 77		    bit SPI_DO,a 
0164 20 02		    jr nz, .b6 
0166 cb b1		    res 6,c 
0168			.b6: 
0168				; then low 
0168 cb af			res SPI_SCLK,a 
016a d3 80			out (storage_adata),a 
016c 00				nop 
016d cd f8 00			call spi_clk 
0170			 
0170				; clock bit high 
0170 cb ef			set SPI_SCLK,a 
0172 d3 80			out (storage_adata),a 
0174 00				nop 
0175 cd f8 00			call spi_clk 
0178			 
0178			 
0178			    ; read DO  
0178			 
0178 cb e9		    set 5,c 
017a db 80			in a,(storage_adata) 
017c cb 77		    bit SPI_DO,a 
017e 20 02		    jr nz, .b5 
0180 cb a9		    res 5,c 
0182			.b5: 
0182				; then low 
0182 cb af			res SPI_SCLK,a 
0184 d3 80			out (storage_adata),a 
0186 00				nop 
0187 cd f8 00			call spi_clk 
018a				; clock bit high 
018a cb ef			set SPI_SCLK,a 
018c d3 80			out (storage_adata),a 
018e 00				nop 
018f cd f8 00			call spi_clk 
0192			 
0192			    ; read DO  
0192			 
0192 cb e1		    set 4,c 
0194 db 80			in a,(storage_adata) 
0196 cb 77		    bit SPI_DO,a 
0198 20 02		    jr nz, .b4 
019a cb a1		    res 4,c 
019c			.b4: 
019c				; then low 
019c cb af			res SPI_SCLK,a 
019e d3 80			out (storage_adata),a 
01a0 00				nop 
01a1 cd f8 00			call spi_clk 
01a4				; clock bit high 
01a4 cb ef			set SPI_SCLK,a 
01a6 d3 80			out (storage_adata),a 
01a8 00				nop 
01a9 cd f8 00			call spi_clk 
01ac			 
01ac			    ; read DO  
01ac			 
01ac cb d9		    set 3,c 
01ae db 80			in a,(storage_adata) 
01b0 cb 77		    bit SPI_DO,a 
01b2 20 02		    jr nz, .b3 
01b4 cb 99		    res 3,c 
01b6			.b3: 
01b6				; then low 
01b6 cb af			res SPI_SCLK,a 
01b8 d3 80			out (storage_adata),a 
01ba 00				nop 
01bb cd f8 00			call spi_clk 
01be				; clock bit high 
01be cb ef			set SPI_SCLK,a 
01c0 d3 80			out (storage_adata),a 
01c2 00				nop 
01c3 cd f8 00			call spi_clk 
01c6			 
01c6			    ; read DO  
01c6			 
01c6 cb d1		    set 2,c 
01c8 db 80			in a,(storage_adata) 
01ca cb 77		    bit SPI_DO,a 
01cc 20 02		    jr nz, .b2 
01ce cb 91		    res 2,c 
01d0			.b2: 
01d0				; then low 
01d0 cb af			res SPI_SCLK,a 
01d2 d3 80			out (storage_adata),a 
01d4 00				nop 
01d5 cd f8 00			call spi_clk 
01d8				; clock bit high 
01d8 cb ef			set SPI_SCLK,a 
01da d3 80			out (storage_adata),a 
01dc 00				nop 
01dd cd f8 00			call spi_clk 
01e0			 
01e0			    ; read DO  
01e0			 
01e0 cb c9		    set 1,c 
01e2 db 80			in a,(storage_adata) 
01e4 cb 77		    bit SPI_DO,a 
01e6 20 02		    jr nz, .b1 
01e8 cb 89		    res 1,c 
01ea			.b1: 
01ea				; then low 
01ea cb af			res SPI_SCLK,a 
01ec d3 80			out (storage_adata),a 
01ee 00				nop 
01ef cd f8 00			call spi_clk 
01f2				; clock bit high 
01f2 cb ef			set SPI_SCLK,a 
01f4 d3 80			out (storage_adata),a 
01f6 00				nop 
01f7 cd f8 00			call spi_clk 
01fa			 
01fa			    ; read DO  
01fa			 
01fa cb c1		    set 0,c 
01fc db 80			in a,(storage_adata) 
01fe cb 77		    bit SPI_DO,a 
0200 20 02		    jr nz, .b0 
0202 cb 81		    res 0,c 
0204			.b0: 
0204				; then low 
0204 cb af			res SPI_SCLK,a 
0206 d3 80			out (storage_adata),a 
0208 00				nop 
0209 cd f8 00			call spi_clk 
020c			 
020c			 
020c 32 96 f9			ld (spi_portbyte),a 
020f			 
020f			    ; return byte 
020f 79			    ld a,c 
0210			 
0210			 
0210 c9				ret 
0211			 
0211			 
0211			 
0211			spi_ce_high: 
0211			 
0211				if DEBUG_SPI_HARD_CE0 
0211			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0211					ret 
0211			 
0211				endif 
0211			 
0211			 
0211 f5				push af 
0212			 
0212				; send direct ce to port b 
0212 3e ff			ld a, 255 
0214 d3 81			out (storage_bdata), a 
0216			 
0216 f1				pop af 
0217			 
0217				; for port a that shares with spi lines AND the mask 
0217			  
0217				if DEBUG_SPI 
0217					push hl 
0217					ld h, a 
0217				endif 
0217			;	ld c, SPI_CE_HIGH 
0217			;	and c 
0217 cb c7			set SPI_CE0, a 
0219 cb cf			set SPI_CE1, a 
021b cb d7			set SPI_CE2, a 
021d cb df			set SPI_CE3, a 
021f cb e7			set SPI_CE4, a 
0221			 
0221				if DEBUG_SPI 
0221					ld l, a 
0221					DMARK "CEh" 
0221					CALLMONITOR 
0221					pop hl 
0221				endif 
0221 c9				ret 
0222			 
0222			 
0222			spi_ce_low: 
0222			 
0222				if DEBUG_SPI_HARD_CE0 
0222			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0222					ret 
0222			 
0222				endif 
0222			 
0222 c5				push bc 
0223 f5				push af 
0224			 
0224				; send direct ce to port b 
0224 3a 98 f9			ld a, (spi_cartdev) 
0227 d3 81			out (storage_bdata), a 
0229			 
0229			 
0229			 
0229				; for port a that shares with spi lines AND the mask 
0229			 
0229 3a 95 f9			ld a, (spi_device)  
022c 4f				ld c, a 
022d			 
022d f1				pop af 
022e			 
022e				; detect CEx 
022e			 
022e				if DEBUG_SPI 
022e					push hl 
022e					ld h, a 
022e				endif 
022e			 
022e cb 41			bit SPI_CE0, c 
0230 20 04			jr nz, .cel1 
0232 cb 87			res SPI_CE0, a 
0234 18 1e			jr .celn 
0236			.cel1: 
0236 cb 49			bit SPI_CE1, c 
0238 20 04			jr nz, .cel2 
023a cb 8f			res SPI_CE1, a 
023c 18 16			jr .celn 
023e			.cel2: 
023e cb 51			bit SPI_CE2, c 
0240 20 04			jr nz, .cel3 
0242 cb 97			res SPI_CE2, a 
0244 18 0e			jr .celn 
0246			.cel3: 
0246 cb 59			bit SPI_CE3, c 
0248 20 04			jr nz, .cel4 
024a cb 9f			res SPI_CE3, a 
024c 18 06			jr .celn 
024e			.cel4: 
024e cb 61			bit SPI_CE4, c 
0250 20 02			jr nz, .celn 
0252 cb a7			res SPI_CE4, a 
0254			.celn: 
0254			 
0254			 
0254			 
0254			;	add c 
0254			 
0254				if DEBUG_SPI 
0254					ld l, a 
0254					DMARK "CEl" 
0254					CALLMONITOR 
0254					pop hl 
0254				endif 
0254 c1				pop bc 
0255 c9				ret 
0256			 
0256			 
0256			 
0256			; eof 
0256			 
0256			 
0256			 
0256			 
0256			 
# End of file firmware_spi.asm
0256				include "firmware_seeprom.asm"  
0256			; 
0256			; persisent storage interface via microchip serial eeprom 
0256			 
0256			; port a pio 2 
0256			; pa 7 - si 
0256			; pa 6 - sclk  
0256			; pa 5 - so 
0256			; pa 4 - cs 
0256			; pa 3 - cs 
0256			; pa 2 - cs 
0256			; pa 1 - cs 
0256			; pa 0 - cs 
0256			; 
0256			; TODO get block 
0256			; TODO save block 
0256			; TODO load file 
0256			; TODO save file 
0256			; TODO get dir  
0256			 
0256			;  
0256			storage_adata: equ Device_C    ; device c port a - onboard storage 
0256			storage_actl: equ Device_C+2     ; device c port a 
0256			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0256			storage_bctl: equ Device_C+3     ; device c port b 
0256			 
0256			 
0256			; TODO move these to hardware driver file 
0256			 
0256			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0256			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0256			; storage bank file system format 
0256			; 
0256			; first page of bank: 
0256			; 	addr 0 - status check 
0256			;       addr 1 - write protect flag 
0256			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0256			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0256			;         TODO see if scanning whole of for available next file id is fast enough 
0256			;	addr 4 > zero term string of bank label 
0256			; 
0256			;        
0256			;  
0256			; first page of any file: 
0256			;      byte 0 - file id  
0256			;      byte 1-17 - fixed file name  
0256			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0256			; 
0256			; other pages of any file: 
0256			;      byte 0 - file id 
0256			;      byte 1> - file data 
0256			; 
0256			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0256			;  
0256			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0256			 
0256			 
0256			;storage_so_bit: 5 
0256			;storage_si_bit: 7 
0256			;storage_sclk_bit: 6 
0256			  
0256			 
0256			; init storage pio 
0256			 
0256			storage_init: 
0256			 
0256			 
0256					; set default SPI clk pulse time as disabled 
0256			 
0256 3e 00				ld a, 0 
0258 32 99 f9				ld (spi_clktime), a 
025b			 
025b					; init hardware 
025b			 
025b 3e cf		            LD   A, 11001111b 
025d d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
025f 3e 00		            LD   A, 00000000b 
0261 cb f7			set SPI_DO,a 
0263			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
0263 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0265			 
0265 3e cf		            LD   A, 11001111b 
0267 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
0269 3e 00		            LD   A, 00000000b 
026b d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
026d			 
026d				; set all external spi devices off  
026d 3e ff			ld a, 255 
026f 32 95 f9			ld (spi_device), a 
0272 32 98 f9			ld (spi_cartdev), a 
0275			 
0275					; ensure the spi bus is in a default stable state 
0275 cd 05 01				call se_stable_spi 
0278			 
0278			; TODO scan spi bus and gather which storage banks are present 
0278			 
0278			; populate store_bank_active  
0278			; for each ce line activate and attempt to write first byte of bank and read back 
0278			; if zero is returned then bank is empty 
0278			;   
0278			; 
0278			 
0278					; init file extent cache to save on slow reads 
0278			 
0278			;	ld hl, store_filecache 
0278			;	ld de, 0 
0278			;	ld hl,(de)	 
0278			 
0278			 
0278 c9			    ret 
0279			 
0279			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
0279			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
0279			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
0279			 
0279			; INSTRUCTION SET 
0279			; READ 0000 0011 Read data from memory array beginning at selected address 
0279			; WRITE 0000 0010 Write data to memory array beginning at selected address 
0279			; WREN 0000 0110 Set the write enable latch (enable write operations) 
0279			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
0279			; RDSR 0000 0101 Read STATUS register 
0279			; WRSR 0000 0001 Write STATUS register 
0279			; PE 0100 0010 Page Erase – erase one page in memory array 
0279			; SE 1101 1000 Sector Erase – erase one sector in memory array 
0279			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
0279			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
0279			 
0279			; TODO send byte steam for page without setting the address for every single byte 
0279			; TODO read byte  
0279			 
0279			; byte in a 
0279			; address in hl  
0279			se_writebyte: 
0279			        
0279			    ;   ld c, a 
0279 f5			        push af 
027a e5			        push hl 
027b			 
027b			    ; initi write mode 
027b			    ; 
027b			    ;CS low 
027b			 
027b 3a 96 f9		       ld a,(spi_portbyte) 
027e cd 22 02			call spi_ce_low 
0281			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0281 d3 80		       out (storage_adata),a 
0283 32 96 f9		       ld (spi_portbyte), a 
0286			 
0286			    ;clock out wren instruction 
0286			 
0286 3e 06		    ld a, store_wren_ins 
0288 cd 10 01		    call spi_send_byte  
028b			 
028b			    ;cs high to enable write latch 
028b			 
028b 3a 96 f9		       ld a,(spi_portbyte) 
028e cd 11 02			call spi_ce_high 
0291			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0291 d3 80		       out (storage_adata),a 
0293 32 96 f9		       ld (spi_portbyte), a 
0296			 
0296 00				nop 
0297			    ; 
0297			    ; intial write data 
0297			    ; 
0297			    ; cs low 
0297			     
0297 3a 96 f9		       ld a,(spi_portbyte) 
029a cd 22 02			call spi_ce_low 
029d			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
029d d3 80		       out (storage_adata),a 
029f 32 96 f9		       ld (spi_portbyte), a 
02a2			 
02a2			    ; clock out write instruction 
02a2			     
02a2 3e 02		    ld a, store_write_ins  
02a4 cd 10 01		    call spi_send_byte  
02a7			 
02a7			    ; clock out address (depending on address size) 
02a7			     
02a7 e1			    pop hl 
02a8 7c			    ld a,h    ; address out msb first 
02a9 cd 10 01		    call spi_send_byte  
02ac 7d			    ld a,l 
02ad cd 10 01		    call spi_send_byte  
02b0			 
02b0			    ; clock out byte(s) for page 
02b0			 
02b0 f1			    pop af 
02b1 cd 10 01		    call spi_send_byte  
02b4			 
02b4			    ; end write with ce high 
02b4 3a 96 f9		       ld a,(spi_portbyte) 
02b7			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02b7 cd 11 02			call spi_ce_high 
02ba d3 80		       out (storage_adata),a 
02bc 32 96 f9		       ld (spi_portbyte), a 
02bf			 
02bf				; pause for internal write cycle 
02bf 3e 0a			ld a, 10 
02c1 cd d2 0c			call aDelayInMS 
02c4 c9			    ret 
02c5			 
02c5			; buffer to write in de 
02c5			; address in hl  
02c5			se_writepage: 
02c5			        
02c5			    ;   ld c, a 
02c5 d5				push de 
02c6 e5			        push hl 
02c7			 
02c7			    ; initi write mode 
02c7			    ; 
02c7			    ;CS low 
02c7			 
02c7 3a 96 f9		       ld a,(spi_portbyte) 
02ca cd 22 02			call spi_ce_low 
02cd			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02cd d3 80		       out (storage_adata),a 
02cf 32 96 f9		       ld (spi_portbyte), a 
02d2			 
02d2			    ;clock out wren instruction 
02d2			 
02d2 3e 06		    ld a, store_wren_ins 
02d4 cd 10 01		    call spi_send_byte  
02d7			 
02d7			    ;cs high to enable write latch 
02d7			 
02d7 3a 96 f9		       ld a,(spi_portbyte) 
02da cd 11 02			call spi_ce_high 
02dd			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02dd d3 80		       out (storage_adata),a 
02df 32 96 f9		       ld (spi_portbyte), a 
02e2			 
02e2 00				nop 
02e3			    ; 
02e3			    ; intial write data 
02e3			    ; 
02e3			    ; cs low 
02e3			     
02e3 3a 96 f9		       ld a,(spi_portbyte) 
02e6			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02e6 cd 22 02			call spi_ce_low 
02e9 d3 80		       out (storage_adata),a 
02eb 32 96 f9		       ld (spi_portbyte), a 
02ee			 
02ee			    ; clock out write instruction 
02ee			     
02ee 3e 02		    ld a, store_write_ins  
02f0 cd 10 01		    call spi_send_byte  
02f3			 
02f3			    ; clock out address (depending on address size) 
02f3			     
02f3 e1			    pop hl 
02f4 7c			    ld a,h    ; address out msb first 
02f5 cd 10 01		    call spi_send_byte  
02f8 7d			    ld a,l 
02f9 cd 10 01		    call spi_send_byte  
02fc			 
02fc			    ; clock out byte(s) for page 
02fc			 
02fc e1				pop hl 
02fd 06 40			ld b, STORE_BLOCK_PHY 
02ff			.bytewrite: 
02ff			 
02ff 7e				ld a,(hl) 
0300 e5			    push hl 
0301 c5				push bc 
0302 cd 10 01		    call spi_send_byte  
0305 c1				pop bc 
0306 e1				pop hl 
0307			 
0307			    ; end write with ce high 
0307 3a 96 f9		       ld a,(spi_portbyte) 
030a cd 11 02			call spi_ce_high 
030d			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
030d d3 80		       out (storage_adata),a 
030f 32 96 f9		       ld (spi_portbyte), a 
0312			 
0312 23				inc hl 
0313 10 ea			djnz .bytewrite 
0315			 
0315				; pause for internal write cycle 
0315 3e 64			ld a, 100 
0317 cd d2 0c			call aDelayInMS 
031a c9			    ret 
031b			; returns byte in a 
031b			; address in hl  
031b			se_readbyte: 
031b d5				push de 
031c c5				push bc 
031d			 
031d			    ;   ld c, a 
031d e5			        push hl 
031e			 
031e			    ; initi write mode 
031e			    ; 
031e			    ;CS low 
031e			 
031e 3a 96 f9		       ld a,(spi_portbyte) 
0321 cd 22 02			call spi_ce_low 
0324			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0324 d3 80		       out (storage_adata),a 
0326 32 96 f9		       ld (spi_portbyte), a 
0329			 
0329			    ;clock out wren instruction 
0329			 
0329 3e 03		    ld a, store_read_ins 
032b cd 10 01		    call spi_send_byte  
032e			 
032e			 
032e			    ; clock out address (depending on address size) 
032e			     
032e e1			    pop hl 
032f 7c			    ld a,h    ; address out msb first 
0330 cd 10 01		    call spi_send_byte  
0333 7d			    ld a,l 
0334 cd 10 01		    call spi_send_byte  
0337			 
0337			    ; clock in byte(s) for page 
0337			 
0337 cd 37 01		    call spi_read_byte  
033a f5				push af 
033b			 
033b			    ; end write with ce high 
033b 3a 96 f9		       ld a,(spi_portbyte) 
033e			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
033e cd 11 02			call spi_ce_high 
0341 d3 80		       out (storage_adata),a 
0343 32 96 f9		       ld (spi_portbyte), a 
0346			 
0346 f1				pop af 
0347			 
0347 c1				pop bc 
0348 d1				pop de 
0349			 
0349 c9			    ret 
034a			 
034a			if DEBUG_STORESE 
034a			 
034a			storageput:  
034a			 
034a			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
034a			 
034a 21 f8 f0			ld hl,scratch+2 
034d cd 9d 12			call get_word_hl 
0350			 
0350				; stuff it here for the moment as it will be overwritten later anyway 
0350			 
0350 22 19 f4			ld (os_cur_ptr),hl	 
0353			 
0353			 
0353			; get pointer to start of string 
0353			 
0353 21 fd f0			ld hl, scratch+7 
0356			 
0356			; loop writing char of string to eeprom 
0356			 
0356 7e			.writestr:	ld a,(hl) 
0357 fe 00				cp 0 
0359 28 12				jr z, .wsdone		; done writing 
035b e5					push hl 
035c 2a 19 f4				ld hl,(os_cur_ptr) 
035f cd 79 02				call se_writebyte 
0362			 
0362 2a 19 f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0365 23					inc hl 
0366 22 19 f4				ld (os_cur_ptr),hl 
0369			 
0369					; restore string pointer and get next char 
0369			 
0369 e1					pop hl 
036a 23					inc hl 
036b 18 e9				jr .writestr 
036d			 
036d			 
036d			 
036d			.wsdone: 
036d			 
036d			 
036d			; when done load first page into a buffer  
036d			 
036d 21 00 80				ld hl,08000h		; start in ram 
0370 22 19 f4				ld (os_cur_ptr),hl 
0373 21 00 00				ld hl, 0		 ; start of page 
0376 22 1e f1				ld (scratch+40),hl	; hang on to it 
0379			 
0379 06 80				ld b, 128		; actually get more then one page 
037b c5			.wsload:	push bc 
037c 2a 1e f1				ld hl,(scratch+40) 
037f e5					push hl 
0380 cd 1b 03				call se_readbyte 
0383			 
0383					; a now as the byte 
0383			 
0383 2a 19 f4				ld hl,(os_cur_ptr) 
0386 77					ld (hl),a 
0387					; inc next buffer area 
0387 23					inc hl 
0388 22 19 f4				ld (os_cur_ptr),hl 
038b			 
038b					; get eeprom position, inc and save for next round 
038b e1					pop hl		 
038c 23					inc hl 
038d 22 1e f1				ld (scratch+40),hl 
0390 c1					pop bc 
0391 10 e8				djnz .wsload 
0393			 
0393			; set 'd' pointer to start of buffer 
0393			 
0393 21 00 80				ld hl,08000h 
0396 22 19 f4				ld (os_cur_ptr),hl 
0399			 
0399			 
0399 c9			ret 
039a			 
039a			 
039a c9			storageread: ret 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			endif 
039b			 
039b			 
039b			 
# End of file firmware_seeprom.asm
039b			else  
039b			   ; create some stubs for the labels  
039b			se_readbyte: ret  
039b			se_writebyte: ret  
039b			storage_init: ret  
039b			  
039b			endif  
039b			  
039b			; use cf card for storage - throwing timeout errors. Hardware or software?????  
039b			;include "firmware_cf.asm"  
039b			  
039b			; load up high level storage hardward abstractions  
039b			include "firmware_storage.asm"  
039b			 
039b			; persisent storage hardware abstraction layer  
039b			 
039b			 
039b			 
039b			; Block 0 on storage is a config state 
039b			 
039b			 
039b			 
039b			; TODO add read phy block and write phy block functions 
039b			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
039b			 
039b			; Abstraction layer  
039b			 
039b			; Logocial block size is same size as physical size - using tape concept 
039b			 
039b			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
039b			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
039b			 
039b			 
039b			 
039b			; Filesystem layout (Logical layout) 
039b			; 
039b			; Block 0 - Bank config  
039b			; 
039b			;      Byte - 0 file id counter 
039b			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
039b			;      Byte - 3-20 zero terminated bank label 
039b			; 
039b			; Block 1 > File storage 
039b			; 
039b			;      Byte 0 file id    - block 0 file details 
039b			;      Byte 1 block id - block 0 is file  
039b			;            Byte 2-15 - File name 
039b			; 
039b			;       - to end of block data 
039b			; 
039b			 
039b			; Get ID for the file named in pointer held HL 
039b			; Returns ID in HL = 255 if no file found 
039b			 
039b			storage_getid: 
039b			 
039b 22 a8 f9			ld (store_tmp1), hl 
039e			 
039e				if DEBUG_STORESE 
039e					DMARK "SGI" 
039e f5				push af  
039f 3a b3 03			ld a, (.dmark)  
03a2 32 a0 fd			ld (debug_mark),a  
03a5 3a b4 03			ld a, (.dmark+1)  
03a8 32 a1 fd			ld (debug_mark+1),a  
03ab 3a b5 03			ld a, (.dmark+2)  
03ae 32 a2 fd			ld (debug_mark+2),a  
03b1 18 03			jr .pastdmark  
03b3 ..			.dmark: db "SGI"  
03b6 f1			.pastdmark: pop af  
03b7			endm  
# End of macro DMARK
03b7					CALLMONITOR 
03b7 cd aa fd			call debug_vector  
03ba				endm  
# End of macro CALLMONITOR
03ba				endif 
03ba				; get block 0 and set counter for number of files to scan 
03ba			 
03ba cd 25 05			call storage_get_block_0 
03bd			 
03bd 3a af f9			ld a, (store_page) 
03c0 47				ld b, a 
03c1			 
03c1				; get extent 0 of each file id 
03c1			 
03c1				if DEBUG_STORESE 
03c1					DMARK "SGc" 
03c1 f5				push af  
03c2 3a d6 03			ld a, (.dmark)  
03c5 32 a0 fd			ld (debug_mark),a  
03c8 3a d7 03			ld a, (.dmark+1)  
03cb 32 a1 fd			ld (debug_mark+1),a  
03ce 3a d8 03			ld a, (.dmark+2)  
03d1 32 a2 fd			ld (debug_mark+2),a  
03d4 18 03			jr .pastdmark  
03d6 ..			.dmark: db "SGc"  
03d9 f1			.pastdmark: pop af  
03da			endm  
# End of macro DMARK
03da					CALLMONITOR 
03da cd aa fd			call debug_vector  
03dd				endm  
# End of macro CALLMONITOR
03dd				endif 
03dd 60			.getloop:	ld h, b 
03de 2e 00				ld l, 0 
03e0 c5					push bc 
03e1			 
03e1 11 af f9				ld de, store_page 
03e4				if DEBUG_STORESE 
03e4					DMARK "SGr" 
03e4 f5				push af  
03e5 3a f9 03			ld a, (.dmark)  
03e8 32 a0 fd			ld (debug_mark),a  
03eb 3a fa 03			ld a, (.dmark+1)  
03ee 32 a1 fd			ld (debug_mark+1),a  
03f1 3a fb 03			ld a, (.dmark+2)  
03f4 32 a2 fd			ld (debug_mark+2),a  
03f7 18 03			jr .pastdmark  
03f9 ..			.dmark: db "SGr"  
03fc f1			.pastdmark: pop af  
03fd			endm  
# End of macro DMARK
03fd					CALLMONITOR 
03fd cd aa fd			call debug_vector  
0400				endm  
# End of macro CALLMONITOR
0400				endif 
0400 cd cd 09				call storage_read 
0403 cd 07 10				call ishlzero 
0406 28 2d				jr z, .gap 
0408					 
0408					; have a file name read. Is it one we want. 
0408			 
0408 2a a8 f9				ld hl, (store_tmp1) 
040b 11 b2 f9				ld de, store_page+3   ; file name 
040e			 
040e				if DEBUG_STORESE 
040e					DMARK "SGc" 
040e f5				push af  
040f 3a 23 04			ld a, (.dmark)  
0412 32 a0 fd			ld (debug_mark),a  
0415 3a 24 04			ld a, (.dmark+1)  
0418 32 a1 fd			ld (debug_mark+1),a  
041b 3a 25 04			ld a, (.dmark+2)  
041e 32 a2 fd			ld (debug_mark+2),a  
0421 18 03			jr .pastdmark  
0423 ..			.dmark: db "SGc"  
0426 f1			.pastdmark: pop af  
0427			endm  
# End of macro DMARK
0427					CALLMONITOR 
0427 cd aa fd			call debug_vector  
042a				endm  
# End of macro CALLMONITOR
042a				endif 
042a cd 7c 13				call strcmp 
042d 20 06				jr nz, .gap   ; not this one 
042f			 
042f c1				        pop bc 
0430			 
0430 26 00				ld h, 0 
0432 68					ld l, b 
0433 18 22				jr .getdone 
0435						 
0435			 
0435			 
0435			 
0435			.gap: 
0435				if DEBUG_STORESE 
0435					DMARK "SGg" 
0435 f5				push af  
0436 3a 4a 04			ld a, (.dmark)  
0439 32 a0 fd			ld (debug_mark),a  
043c 3a 4b 04			ld a, (.dmark+1)  
043f 32 a1 fd			ld (debug_mark+1),a  
0442 3a 4c 04			ld a, (.dmark+2)  
0445 32 a2 fd			ld (debug_mark+2),a  
0448 18 03			jr .pastdmark  
044a ..			.dmark: db "SGg"  
044d f1			.pastdmark: pop af  
044e			endm  
# End of macro DMARK
044e					CALLMONITOR 
044e cd aa fd			call debug_vector  
0451				endm  
# End of macro CALLMONITOR
0451				endif 
0451			 
0451 c1					pop bc 
0452 10 89				djnz .getloop 
0454 21 ff 00				ld hl, 255 
0457			.getdone: 
0457			 
0457				if DEBUG_STORESE 
0457					DMARK "SGe" 
0457 f5				push af  
0458 3a 6c 04			ld a, (.dmark)  
045b 32 a0 fd			ld (debug_mark),a  
045e 3a 6d 04			ld a, (.dmark+1)  
0461 32 a1 fd			ld (debug_mark+1),a  
0464 3a 6e 04			ld a, (.dmark+2)  
0467 32 a2 fd			ld (debug_mark+2),a  
046a 18 03			jr .pastdmark  
046c ..			.dmark: db "SGe"  
046f f1			.pastdmark: pop af  
0470			endm  
# End of macro DMARK
0470					CALLMONITOR 
0470 cd aa fd			call debug_vector  
0473				endm  
# End of macro CALLMONITOR
0473				endif 
0473			 
0473 c9				ret 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			; Read Block 
0474			; ---------- 
0474			; 
0474			; With current bank 
0474			;  
0474			; Get block number to read 
0474			; Load physical blocks starting at start block into buffer 
0474			 
0474			; de points to buffer to use 
0474			; hl holds logical block number  
0474			 
0474			storage_read_block: 
0474			 
0474				; TODO bank selection 
0474			 
0474				; for each of the physical blocks read it into the buffer 
0474 06 40			ld b, STORE_BLOCK_PHY 
0476			 
0476				if DEBUG_STORESE 
0476 d5					push de 
0477				endif 
0477				 
0477			.rl1:    
0477			 
0477				; read physical block at hl into de 
0477			        ; increment hl and de to next read position on exit 
0477			 
0477 e5				push hl 
0478 d5				push de	 
0479 c5				push bc 
047a			;	if DEBUG_STORESE 
047a			;		push af 
047a			;		ld a, 'R' 
047a			;		ld (debug_mark),a 
047a			;		pop af 
047a			;		CALLMONITOR 
047a			;	endif 
047a cd 1b 03			call se_readbyte 
047d			;	if DEBUG_STORESE 
047d			;		ld a,(spi_portbyte) 
047d			;		ld l, a 
047d			;		push af 
047d			;		ld a, '1' 
047d			;		ld (debug_mark),a 
047d			;		pop af 
047d			;		CALLMONITOR 
047d			;	endif 
047d c1				pop bc 
047e d1				pop de 
047f e1				pop hl 
0480 12				ld (de),a 
0481 23				inc hl 
0482 13				inc de 
0483			 
0483			;	if DEBUG_STORESE 
0483			;		push af 
0483			;		ld a, 'r' 
0483			;		ld (debug_mark),a 
0483			;		pop af 
0483			;		CALLMONITOR 
0483			;	endif 
0483			 
0483 10 f2			djnz .rl1 
0485			 
0485				if DEBUG_STORESE 
0485					DMARK "SRB" 
0485 f5				push af  
0486 3a 9a 04			ld a, (.dmark)  
0489 32 a0 fd			ld (debug_mark),a  
048c 3a 9b 04			ld a, (.dmark+1)  
048f 32 a1 fd			ld (debug_mark+1),a  
0492 3a 9c 04			ld a, (.dmark+2)  
0495 32 a2 fd			ld (debug_mark+2),a  
0498 18 03			jr .pastdmark  
049a ..			.dmark: db "SRB"  
049d f1			.pastdmark: pop af  
049e			endm  
# End of macro DMARK
049e d1					pop de 
049f			; 
049f			;		push af 
049f			;		ld a, 'R' 
049f			;		ld (debug_mark),a 
049f			;		pop af 
049f					CALLMONITOR 
049f cd aa fd			call debug_vector  
04a2				endm  
# End of macro CALLMONITOR
04a2				endif 
04a2 c9				ret	 
04a3				 
04a3			 
04a3			; File Size 
04a3			; --------- 
04a3			; 
04a3			;   hl file id 
04a3			; 
04a3			;  returns in hl the number of blocks 
04a3			 
04a3			storage_file_size: 
04a3 5d				ld e, l 
04a4 16 00			ld d, 0 
04a6 21 40 00			ld hl, STORE_BLOCK_PHY 
04a9					if DEBUG_FORTH_WORDS 
04a9						DMARK "SIZ" 
04a9 f5				push af  
04aa 3a be 04			ld a, (.dmark)  
04ad 32 a0 fd			ld (debug_mark),a  
04b0 3a bf 04			ld a, (.dmark+1)  
04b3 32 a1 fd			ld (debug_mark+1),a  
04b6 3a c0 04			ld a, (.dmark+2)  
04b9 32 a2 fd			ld (debug_mark+2),a  
04bc 18 03			jr .pastdmark  
04be ..			.dmark: db "SIZ"  
04c1 f1			.pastdmark: pop af  
04c2			endm  
# End of macro DMARK
04c2						CALLMONITOR 
04c2 cd aa fd			call debug_vector  
04c5				endm  
# End of macro CALLMONITOR
04c5					endif 
04c5 cd a7 07			call storage_findnextid 
04c8			 
04c8 cd 07 10			call ishlzero 
04cb			;	ld a, l 
04cb			;	add h 
04cb			;	cp 0 
04cb c8				ret z			; block not found so EOF 
04cc			 
04cc 11 af f9			ld de, store_page 
04cf cd 74 04			call storage_read_block 
04d2			 
04d2 3a b1 f9			ld a, (store_page+2)	 ; get extent count 
04d5 6f				ld l, a 
04d6 26 00			ld h, 0 
04d8 c9			 	ret 
04d9			 
04d9			 
04d9			; Write Block 
04d9			; ----------- 
04d9			; 
04d9			; With current bank 
04d9			;  
04d9			; Get block number to write 
04d9			; Write physical blocks starting at start block from buffer 
04d9			  
04d9			storage_write_block: 
04d9				; TODO bank selection 
04d9			 
04d9				; for each of the physical blocks read it into the buffer 
04d9 06 40			ld b, STORE_BLOCK_PHY 
04db			 
04db				if DEBUG_STORESE 
04db					DMARK "SWB" 
04db f5				push af  
04dc 3a f0 04			ld a, (.dmark)  
04df 32 a0 fd			ld (debug_mark),a  
04e2 3a f1 04			ld a, (.dmark+1)  
04e5 32 a1 fd			ld (debug_mark+1),a  
04e8 3a f2 04			ld a, (.dmark+2)  
04eb 32 a2 fd			ld (debug_mark+2),a  
04ee 18 03			jr .pastdmark  
04f0 ..			.dmark: db "SWB"  
04f3 f1			.pastdmark: pop af  
04f4			endm  
# End of macro DMARK
04f4			 
04f4					;push af 
04f4					;ld a, 'W' 
04f4					;ld (debug_mark),a 
04f4					;pop af 
04f4					CALLMONITOR 
04f4 cd aa fd			call debug_vector  
04f7				endm  
# End of macro CALLMONITOR
04f7				endif 
04f7			 
04f7			; might not be working 
04f7			;	call se_writepage 
04f7			 
04f7			;	ret 
04f7			; 
04f7			 
04f7			 
04f7			 
04f7			.wl1:    
04f7			 
04f7				; read physical block at hl into de 
04f7			        ; increment hl and de to next read position on exit 
04f7			 
04f7 e5				push hl 
04f8 d5				push de	 
04f9 c5				push bc 
04fa 1a				ld a,(de) 
04fb				;if DEBUG_STORESE 
04fb			;		push af 
04fb			;		ld a, 'W' 
04fb			;		ld (debug_mark),a 
04fb			;		pop af 
04fb			;		CALLMONITOR 
04fb			;	endif 
04fb cd 79 02			call se_writebyte 
04fe			;	call delay250ms 
04fe 00				nop 
04ff 00				nop 
0500 00				nop 
0501			;	if DEBUG_STORESE 
0501			;		push af 
0501			;		ld a, 'w' 
0501			;		ld (debug_mark),a 
0501			;		pop af 
0501			;		CALLMONITOR 
0501			;	endif 
0501 c1				pop bc 
0502 d1				pop de 
0503 e1				pop hl 
0504 23				inc hl 
0505 13				inc de 
0506			 
0506			 
0506 10 ef			djnz .wl1 
0508			 
0508				if DEBUG_STORESE 
0508					DMARK "SW2" 
0508 f5				push af  
0509 3a 1d 05			ld a, (.dmark)  
050c 32 a0 fd			ld (debug_mark),a  
050f 3a 1e 05			ld a, (.dmark+1)  
0512 32 a1 fd			ld (debug_mark+1),a  
0515 3a 1f 05			ld a, (.dmark+2)  
0518 32 a2 fd			ld (debug_mark+2),a  
051b 18 03			jr .pastdmark  
051d ..			.dmark: db "SW2"  
0520 f1			.pastdmark: pop af  
0521			endm  
# End of macro DMARK
0521			 
0521					;push af 
0521					;ld a, 'W' 
0521					;ld (debug_mark),a 
0521					;pop af 
0521					CALLMONITOR 
0521 cd aa fd			call debug_vector  
0524				endm  
# End of macro CALLMONITOR
0524				endif 
0524 c9				ret	 
0525			 
0525			; Init bank 
0525			; --------- 
0525			; 
0525			; With current bank 
0525			; 
0525			; Setup block 0 config 
0525			;     Set 0 file id counter 
0525			;     Set formatted byte pattern 
0525			;     Zero out bank label 
0525			;      
0525			; For every logical block write 0-1 byte as null 
0525			 
0525			storage_get_block_0: 
0525			 
0525				; TODO check presence 
0525			 
0525				; get block 0 config 
0525			 
0525 21 00 00			ld hl, 0 
0528 11 af f9			ld de, store_page 
052b cd 74 04			call storage_read_block 
052e			 
052e				if DEBUG_STORESE 
052e					DMARK "SB0" 
052e f5				push af  
052f 3a 43 05			ld a, (.dmark)  
0532 32 a0 fd			ld (debug_mark),a  
0535 3a 44 05			ld a, (.dmark+1)  
0538 32 a1 fd			ld (debug_mark+1),a  
053b 3a 45 05			ld a, (.dmark+2)  
053e 32 a2 fd			ld (debug_mark+2),a  
0541 18 03			jr .pastdmark  
0543 ..			.dmark: db "SB0"  
0546 f1			.pastdmark: pop af  
0547			endm  
# End of macro DMARK
0547 11 af f9				ld de, store_page 
054a			;		push af 
054a			;		ld a, 'i' 
054a			;		ld (debug_mark),a 
054a			;		pop af 
054a					CALLMONITOR 
054a cd aa fd			call debug_vector  
054d				endm  
# End of macro CALLMONITOR
054d				endif 
054d			 
054d				; is this area formatted? 
054d			 
054d			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
054d 2a b0 f9			ld hl, (store_page+1) 
0550 3e 80			ld a,0x80 
0552 bd				cp l 
0553 20 22			jr nz, .ininotformatted 
0555				; do a double check 
0555 3e 27			ld a, 0x27 
0557 bc				cp h 
0558 20 1d			jr nz, .ininotformatted 
055a			 
055a				; formatted then 
055a			 
055a				if DEBUG_STORESE 
055a					DMARK "SB1" 
055a f5				push af  
055b 3a 6f 05			ld a, (.dmark)  
055e 32 a0 fd			ld (debug_mark),a  
0561 3a 70 05			ld a, (.dmark+1)  
0564 32 a1 fd			ld (debug_mark+1),a  
0567 3a 71 05			ld a, (.dmark+2)  
056a 32 a2 fd			ld (debug_mark+2),a  
056d 18 03			jr .pastdmark  
056f ..			.dmark: db "SB1"  
0572 f1			.pastdmark: pop af  
0573			endm  
# End of macro DMARK
0573					;push af 
0573					;ld a, 'I' 
0573					;ld (debug_mark),a 
0573					;pop af 
0573					CALLMONITOR 
0573 cd aa fd			call debug_vector  
0576				endm  
# End of macro CALLMONITOR
0576				endif 
0576 c9				ret 
0577			 
0577			.ininotformatted: 
0577				; bank not formatted so poke various bits to make sure 
0577			 
0577				if DEBUG_STORESE 
0577					DMARK "SB2" 
0577 f5				push af  
0578 3a 8c 05			ld a, (.dmark)  
057b 32 a0 fd			ld (debug_mark),a  
057e 3a 8d 05			ld a, (.dmark+1)  
0581 32 a1 fd			ld (debug_mark+1),a  
0584 3a 8e 05			ld a, (.dmark+2)  
0587 32 a2 fd			ld (debug_mark+2),a  
058a 18 03			jr .pastdmark  
058c ..			.dmark: db "SB2"  
058f f1			.pastdmark: pop af  
0590			endm  
# End of macro DMARK
0590					;push af 
0590					;ld a, 'f' 
0590					;ld (debug_mark),a 
0590					;pop af 
0590					CALLMONITOR 
0590 cd aa fd			call debug_vector  
0593				endm  
# End of macro CALLMONITOR
0593				endif 
0593			 
0593 cd b0 0c			call storage_clear_page 
0596			 
0596 21 af f9			ld hl, store_page 
0599 3e 00			ld a, 0 
059b				 
059b 77				ld (hl),a   ; reset file counter 
059c			 
059c 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
059f 22 b0 f9		 	ld (store_page+1), hl	 
05a2			 
05a2				; set default label 
05a2			 
05a2 21 3e 06			ld hl, .defaultbanklabl 
05a5 11 b2 f9		 	ld de, store_page+3 
05a8 01 0f 00			ld bc, 15 
05ab ed b0			ldir 
05ad			 
05ad				; Append the current bank id 
05ad 21 bb f9			ld hl, store_page+3+9 
05b0 3a 94 f9			ld a, (spi_device_id) 
05b3 77				ld (hl), a 
05b4			 
05b4				; save default page 0 
05b4			 
05b4 21 00 00			ld hl, 0 
05b7 11 af f9			ld de, store_page 
05ba				if DEBUG_STORESE 
05ba					DMARK "SB3" 
05ba f5				push af  
05bb 3a cf 05			ld a, (.dmark)  
05be 32 a0 fd			ld (debug_mark),a  
05c1 3a d0 05			ld a, (.dmark+1)  
05c4 32 a1 fd			ld (debug_mark+1),a  
05c7 3a d1 05			ld a, (.dmark+2)  
05ca 32 a2 fd			ld (debug_mark+2),a  
05cd 18 03			jr .pastdmark  
05cf ..			.dmark: db "SB3"  
05d2 f1			.pastdmark: pop af  
05d3			endm  
# End of macro DMARK
05d3			;		push af 
05d3			;		ld a, 'F' 
05d3			;		ld (debug_mark),a 
05d3			;		pop af 
05d3					CALLMONITOR 
05d3 cd aa fd			call debug_vector  
05d6				endm  
# End of macro CALLMONITOR
05d6				endif 
05d6 cd d9 04			call storage_write_block 
05d9				if DEBUG_STORESE 
05d9					DMARK "SB4" 
05d9 f5				push af  
05da 3a ee 05			ld a, (.dmark)  
05dd 32 a0 fd			ld (debug_mark),a  
05e0 3a ef 05			ld a, (.dmark+1)  
05e3 32 a1 fd			ld (debug_mark+1),a  
05e6 3a f0 05			ld a, (.dmark+2)  
05e9 32 a2 fd			ld (debug_mark+2),a  
05ec 18 03			jr .pastdmark  
05ee ..			.dmark: db "SB4"  
05f1 f1			.pastdmark: pop af  
05f2			endm  
# End of macro DMARK
05f2			;		push af 
05f2			;		ld a, '>' 
05f2			;		ld (debug_mark),a 
05f2			;		pop af 
05f2					CALLMONITOR 
05f2 cd aa fd			call debug_vector  
05f5				endm  
# End of macro CALLMONITOR
05f5				endif 
05f5			 
05f5 00				nop 
05f6 00				nop 
05f7 00				nop 
05f8			 
05f8				; now set 0 in every page to mark as a free block 
05f8			 
05f8 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05fa 21 40 00			ld hl, STORE_BLOCK_PHY 
05fd			 
05fd 3e 00		.setmark1:   	ld a,0 
05ff e5					push hl 
0600 c5					push bc 
0601 cd 79 02				call se_writebyte 
0604 3e 0a			ld a, 10 
0606 cd d2 0c			call aDelayInMS 
0609 23				inc hl 
060a cd 79 02				call se_writebyte 
060d 3e 0a			ld a, 10 
060f cd d2 0c			call aDelayInMS 
0612 2b				dec hl 
0613 c1					pop bc 
0614 e1					pop hl 
0615 3e 40				ld a, STORE_BLOCK_PHY 
0617 cd de 0f				call addatohl 
061a 10 e1				djnz .setmark1 
061c			 
061c 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
061e 3e 00		.setmark2:   	ld a,0 
0620 e5					push hl 
0621 c5					push bc 
0622 cd 79 02				call se_writebyte 
0625 3e 0a			ld a, 10 
0627 cd d2 0c			call aDelayInMS 
062a 23				inc hl 
062b cd 79 02				call se_writebyte 
062e 3e 0a			ld a, 10 
0630 cd d2 0c			call aDelayInMS 
0633 2b				dec hl 
0634 c1					pop bc 
0635 e1					pop hl 
0636 3e 40				ld a, STORE_BLOCK_PHY 
0638 cd de 0f				call addatohl 
063b 10 e1				djnz .setmark2 
063d			 
063d					 
063d			 
063d			 
063d c9				ret 
063e			 
063e			 
063e			 
063e			 
063e .. 00		.defaultbanklabl:   db "BankLabel_",0 
0649			 
0649			 
0649			 
0649			; Label Bank 
0649			; ---------- 
0649			; 
0649			; With current bank 
0649			; Read block 0 
0649			; Set label 
0649			; Write block 0 
0649			 
0649			; label str pointer in hl 
0649			 
0649			storage_label:     
0649			 
0649				if DEBUG_STORESE 
0649					DMARK "LBL" 
0649 f5				push af  
064a 3a 5e 06			ld a, (.dmark)  
064d 32 a0 fd			ld (debug_mark),a  
0650 3a 5f 06			ld a, (.dmark+1)  
0653 32 a1 fd			ld (debug_mark+1),a  
0656 3a 60 06			ld a, (.dmark+2)  
0659 32 a2 fd			ld (debug_mark+2),a  
065c 18 03			jr .pastdmark  
065e ..			.dmark: db "LBL"  
0661 f1			.pastdmark: pop af  
0662			endm  
# End of macro DMARK
0662					CALLMONITOR 
0662 cd aa fd			call debug_vector  
0665				endm  
# End of macro CALLMONITOR
0665				endif 
0665			 
0665 e5				push hl 
0666			 
0666 cd 25 05			call storage_get_block_0 
0669			 
0669				; set default label 
0669			 
0669 e1				pop hl 
066a			 
066a 11 b2 f9		 	ld de, store_page+3 
066d 01 0f 00			ld bc, 15 
0670				if DEBUG_STORESE 
0670					DMARK "LB3" 
0670 f5				push af  
0671 3a 85 06			ld a, (.dmark)  
0674 32 a0 fd			ld (debug_mark),a  
0677 3a 86 06			ld a, (.dmark+1)  
067a 32 a1 fd			ld (debug_mark+1),a  
067d 3a 87 06			ld a, (.dmark+2)  
0680 32 a2 fd			ld (debug_mark+2),a  
0683 18 03			jr .pastdmark  
0685 ..			.dmark: db "LB3"  
0688 f1			.pastdmark: pop af  
0689			endm  
# End of macro DMARK
0689					CALLMONITOR 
0689 cd aa fd			call debug_vector  
068c				endm  
# End of macro CALLMONITOR
068c				endif 
068c ed b0			ldir 
068e				; save default page 0 
068e			 
068e 21 00 00			ld hl, 0 
0691 11 af f9			ld de, store_page 
0694				if DEBUG_STORESE 
0694					DMARK "LBW" 
0694 f5				push af  
0695 3a a9 06			ld a, (.dmark)  
0698 32 a0 fd			ld (debug_mark),a  
069b 3a aa 06			ld a, (.dmark+1)  
069e 32 a1 fd			ld (debug_mark+1),a  
06a1 3a ab 06			ld a, (.dmark+2)  
06a4 32 a2 fd			ld (debug_mark+2),a  
06a7 18 03			jr .pastdmark  
06a9 ..			.dmark: db "LBW"  
06ac f1			.pastdmark: pop af  
06ad			endm  
# End of macro DMARK
06ad					CALLMONITOR 
06ad cd aa fd			call debug_vector  
06b0				endm  
# End of macro CALLMONITOR
06b0				endif 
06b0 cd d9 04			call storage_write_block 
06b3			 
06b3 c9				ret 
06b4			 
06b4			 
06b4			 
06b4			; Read Block 0 - Config 
06b4			; --------------------- 
06b4			; 
06b4			; With current bank 
06b4			; Call presence test 
06b4			;    If not present format/init bank  
06b4			; Read block 0  
06b4			;  
06b4			 
06b4			 
06b4			; Dir 
06b4			; --- 
06b4			; 
06b4			; With current bank 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block read byte 2 
06b4			;      if first block of file 
06b4			;         Display file name 
06b4			;         Display type flags for file 
06b4			;        
06b4			 
06b4			; moving to words as this requires stack control 
06b4			 
06b4			 
06b4			; Delete File 
06b4			; ----------- 
06b4			; 
06b4			; With current bank 
06b4			; 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block file id 
06b4			;      If first block of file and dont have file id 
06b4			;         if file to delete 
06b4			;         Save file id 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			;      If file id is one saved 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			 
06b4			 
06b4			.se_done: 
06b4 e1				pop hl 
06b5 c9				ret 
06b6			 
06b6			storage_erase: 
06b6			 
06b6				; hl contains the file id 
06b6			 
06b6 5d				ld e, l 
06b7 16 00			ld d, 0 
06b9 21 40 00			ld hl, STORE_BLOCK_PHY 
06bc					if DEBUG_FORTH_WORDS 
06bc						DMARK "ERA" 
06bc f5				push af  
06bd 3a d1 06			ld a, (.dmark)  
06c0 32 a0 fd			ld (debug_mark),a  
06c3 3a d2 06			ld a, (.dmark+1)  
06c6 32 a1 fd			ld (debug_mark+1),a  
06c9 3a d3 06			ld a, (.dmark+2)  
06cc 32 a2 fd			ld (debug_mark+2),a  
06cf 18 03			jr .pastdmark  
06d1 ..			.dmark: db "ERA"  
06d4 f1			.pastdmark: pop af  
06d5			endm  
# End of macro DMARK
06d5						CALLMONITOR 
06d5 cd aa fd			call debug_vector  
06d8				endm  
# End of macro CALLMONITOR
06d8					endif 
06d8 cd a7 07			call storage_findnextid 
06db cd 07 10			call ishlzero 
06de c8				ret z 
06df			 
06df e5				push hl 
06e0			 
06e0				; TODO check file not found 
06e0			 
06e0 11 af f9			ld de, store_page 
06e3 cd 74 04			call storage_read_block 
06e6			 
06e6 cd 07 10			call ishlzero 
06e9 ca b4 06			jp z,.se_done 
06ec			 
06ec					if DEBUG_FORTH_WORDS 
06ec						DMARK "ER1" 
06ec f5				push af  
06ed 3a 01 07			ld a, (.dmark)  
06f0 32 a0 fd			ld (debug_mark),a  
06f3 3a 02 07			ld a, (.dmark+1)  
06f6 32 a1 fd			ld (debug_mark+1),a  
06f9 3a 03 07			ld a, (.dmark+2)  
06fc 32 a2 fd			ld (debug_mark+2),a  
06ff 18 03			jr .pastdmark  
0701 ..			.dmark: db "ER1"  
0704 f1			.pastdmark: pop af  
0705			endm  
# End of macro DMARK
0705						CALLMONITOR 
0705 cd aa fd			call debug_vector  
0708				endm  
# End of macro CALLMONITOR
0708					endif 
0708 3a af f9			ld a, (store_page)	; get file id 
070b 32 a3 f9			ld (store_tmpid), a 
070e			 
070e 3a b1 f9			ld a, (store_page+2)    ; get count of extends 
0711 32 a2 f9			ld (store_tmpext), a 
0714			 
0714				; wipe file header 
0714			 
0714 e1				pop hl 
0715 3e 00			ld a, 0 
0717 32 af f9			ld (store_page), a 
071a 32 b0 f9			ld (store_page+1),a 
071d 11 af f9			ld de, store_page 
0720					if DEBUG_FORTH_WORDS 
0720						DMARK "ER2" 
0720 f5				push af  
0721 3a 35 07			ld a, (.dmark)  
0724 32 a0 fd			ld (debug_mark),a  
0727 3a 36 07			ld a, (.dmark+1)  
072a 32 a1 fd			ld (debug_mark+1),a  
072d 3a 37 07			ld a, (.dmark+2)  
0730 32 a2 fd			ld (debug_mark+2),a  
0733 18 03			jr .pastdmark  
0735 ..			.dmark: db "ER2"  
0738 f1			.pastdmark: pop af  
0739			endm  
# End of macro DMARK
0739						CALLMONITOR 
0739 cd aa fd			call debug_vector  
073c				endm  
# End of macro CALLMONITOR
073c					endif 
073c cd d9 04			call storage_write_block 
073f			 
073f			 
073f				; wipe file extents 
073f			 
073f 3a a2 f9			ld a, (store_tmpext) 
0742 47				ld b, a 
0743			 
0743			.eraext:	  
0743 c5				push bc 
0744			 
0744 21 40 00			ld hl, STORE_BLOCK_PHY 
0747 3a a3 f9			ld a,(store_tmpid) 
074a 5f				ld e, a 
074b 50				ld d, b	 
074c					if DEBUG_FORTH_WORDS 
074c						DMARK "ER3" 
074c f5				push af  
074d 3a 61 07			ld a, (.dmark)  
0750 32 a0 fd			ld (debug_mark),a  
0753 3a 62 07			ld a, (.dmark+1)  
0756 32 a1 fd			ld (debug_mark+1),a  
0759 3a 63 07			ld a, (.dmark+2)  
075c 32 a2 fd			ld (debug_mark+2),a  
075f 18 03			jr .pastdmark  
0761 ..			.dmark: db "ER3"  
0764 f1			.pastdmark: pop af  
0765			endm  
# End of macro DMARK
0765						CALLMONITOR 
0765 cd aa fd			call debug_vector  
0768				endm  
# End of macro CALLMONITOR
0768					endif 
0768 cd a7 07			call storage_findnextid 
076b cd 07 10			call ishlzero 
076e ca b4 06			jp z,.se_done 
0771			 
0771 e5				push hl 
0772 11 af f9			ld de, store_page 
0775 cd 74 04			call storage_read_block 
0778			 
0778				; free block	 
0778			 
0778 3e 00			ld a, 0 
077a 32 af f9			ld (store_page), a 
077d 32 b0 f9			ld (store_page+1),a 
0780 11 af f9			ld de, store_page 
0783 e1				pop hl 
0784					if DEBUG_FORTH_WORDS 
0784						DMARK "ER4" 
0784 f5				push af  
0785 3a 99 07			ld a, (.dmark)  
0788 32 a0 fd			ld (debug_mark),a  
078b 3a 9a 07			ld a, (.dmark+1)  
078e 32 a1 fd			ld (debug_mark+1),a  
0791 3a 9b 07			ld a, (.dmark+2)  
0794 32 a2 fd			ld (debug_mark+2),a  
0797 18 03			jr .pastdmark  
0799 ..			.dmark: db "ER4"  
079c f1			.pastdmark: pop af  
079d			endm  
# End of macro DMARK
079d						CALLMONITOR 
079d cd aa fd			call debug_vector  
07a0				endm  
# End of macro CALLMONITOR
07a0					endif 
07a0 cd d9 04			call storage_write_block 
07a3			 
07a3 c1				pop bc 
07a4 10 9d			djnz .eraext 
07a6			 
07a6 c9				ret 
07a7			 
07a7			 
07a7			; Find Free Block 
07a7			; --------------- 
07a7			; 
07a7			; With current bank 
07a7			;  
07a7			; From given starting logical block 
07a7			;    Read block  
07a7			;    If no file id 
07a7			;         Return block id 
07a7			 
07a7			 
07a7			; hl starting page number 
07a7			; hl contains free page number or zero if no pages free 
07a7			; e contains the file id to locate 
07a7			; d contains the block number 
07a7			 
07a7			; TODO change to find file id and use zero for free block 
07a7			 
07a7			storage_findnextid: 
07a7			 
07a7				; now locate first 0 page to mark as a free block 
07a7			 
07a7 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07a9			;	ld hl, STORE_BLOCK_PHY 
07a9			 
07a9					if DEBUG_FORTH_WORDS 
07a9					DMARK "FNI" 
07a9 f5				push af  
07aa 3a be 07			ld a, (.dmark)  
07ad 32 a0 fd			ld (debug_mark),a  
07b0 3a bf 07			ld a, (.dmark+1)  
07b3 32 a1 fd			ld (debug_mark+1),a  
07b6 3a c0 07			ld a, (.dmark+2)  
07b9 32 a2 fd			ld (debug_mark+2),a  
07bc 18 03			jr .pastdmark  
07be ..			.dmark: db "FNI"  
07c1 f1			.pastdmark: pop af  
07c2			endm  
# End of macro DMARK
07c2						CALLMONITOR 
07c2 cd aa fd			call debug_vector  
07c5				endm  
# End of macro CALLMONITOR
07c5					endif 
07c5			.ff1:   	 
07c5 e5					push hl 
07c6 c5					push bc 
07c7 d5					push de 
07c8 cd 1b 03				call se_readbyte 
07cb 5f					ld e,a 
07cc 23					inc hl 
07cd cd 1b 03				call se_readbyte 
07d0 57					ld d, a 
07d1 e1					pop hl 
07d2 e5					push hl 
07d3 cd fc 0f				call cmp16 
07d6 28 49				jr z, .fffound 
07d8			 
07d8 d1					pop de 
07d9 c1					pop bc 
07da e1					pop hl 
07db			 
07db					; is found? 
07db					;cp e 
07db					;ret z 
07db			 
07db 3e 40				ld a, STORE_BLOCK_PHY 
07dd cd de 0f				call addatohl 
07e0 10 e3				djnz .ff1 
07e2			 
07e2 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07e4			.ff2:   	 
07e4			 
07e4 e5					push hl 
07e5 c5					push bc 
07e6 d5					push de 
07e7 cd 1b 03				call se_readbyte 
07ea 5f					ld e,a 
07eb 23					inc hl 
07ec cd 1b 03				call se_readbyte 
07ef 57					ld d, a 
07f0			 
07f0 e1					pop hl 
07f1 e5					push hl 
07f2 cd fc 0f				call cmp16 
07f5 28 2a				jr z, .fffound 
07f7			 
07f7 d1					pop de 
07f8 c1					pop bc 
07f9 e1					pop hl 
07fa					; is found? 
07fa					;cp e 
07fa					;ret z 
07fa			 
07fa 3e 40				ld a, STORE_BLOCK_PHY 
07fc cd de 0f				call addatohl 
07ff 10 e3				djnz .ff2 
0801			 
0801			 
0801					if DEBUG_FORTH_WORDS 
0801					DMARK "FN-" 
0801 f5				push af  
0802 3a 16 08			ld a, (.dmark)  
0805 32 a0 fd			ld (debug_mark),a  
0808 3a 17 08			ld a, (.dmark+1)  
080b 32 a1 fd			ld (debug_mark+1),a  
080e 3a 18 08			ld a, (.dmark+2)  
0811 32 a2 fd			ld (debug_mark+2),a  
0814 18 03			jr .pastdmark  
0816 ..			.dmark: db "FN-"  
0819 f1			.pastdmark: pop af  
081a			endm  
# End of macro DMARK
081a					;	push af 
081a					;	ld a, 'n' 
081a					;	ld (debug_mark),a 
081a					;	pop af 
081a						CALLMONITOR 
081a cd aa fd			call debug_vector  
081d				endm  
# End of macro CALLMONITOR
081d					endif 
081d				; no free marks! 
081d 21 00 00				ld hl, 0 
0820 c9				ret 
0821			.fffound: 
0821				 
0821			 
0821 d1					pop de 
0822 c1					pop bc 
0823 e1					pop hl 
0824					if DEBUG_FORTH_WORDS 
0824					DMARK "FNF" 
0824 f5				push af  
0825 3a 39 08			ld a, (.dmark)  
0828 32 a0 fd			ld (debug_mark),a  
082b 3a 3a 08			ld a, (.dmark+1)  
082e 32 a1 fd			ld (debug_mark+1),a  
0831 3a 3b 08			ld a, (.dmark+2)  
0834 32 a2 fd			ld (debug_mark+2),a  
0837 18 03			jr .pastdmark  
0839 ..			.dmark: db "FNF"  
083c f1			.pastdmark: pop af  
083d			endm  
# End of macro DMARK
083d					;	push af 
083d					;	ld a, 'n' 
083d					;	ld (debug_mark),a 
083d					;	pop af 
083d						CALLMONITOR 
083d cd aa fd			call debug_vector  
0840				endm  
# End of macro CALLMONITOR
0840					endif 
0840 c9				ret 
0841			 
0841			 
0841			 
0841			; Free Space 
0841			; ---------- 
0841			; 
0841			; With current bank 
0841			; 
0841			; Set block count to zero 
0841			; Starting with first logical block 
0841			;      Find free block  
0841			;      If block id given, increment block count 
0841			; 
0841			;  
0841			 
0841			 
0841			; hl contains count of free blocks 
0841			 
0841			storage_freeblocks: 
0841			 
0841				; now locate first 0 page to mark as a free block 
0841			 
0841 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0843 21 40 00			ld hl, STORE_BLOCK_PHY 
0846 11 00 00			ld de, 0 
0849			 
0849			.fb1:   	 
0849 e5					push hl 
084a c5					push bc 
084b d5					push de 
084c cd 1b 03				call se_readbyte 
084f d1					pop de 
0850 c1					pop bc 
0851 e1					pop hl 
0852			 
0852					; is free? 
0852 fe 00				cp 0 
0854 20 01				jr nz, .ff1cont 
0856 13					inc de 
0857			 
0857			.ff1cont: 
0857			 
0857			 
0857 3e 40				ld a, STORE_BLOCK_PHY 
0859 cd de 0f				call addatohl 
085c 10 eb				djnz .fb1 
085e			 
085e 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0860			.fb2:   	 
0860 e5					push hl 
0861 c5					push bc 
0862 d5					push de 
0863 cd 1b 03				call se_readbyte 
0866 d1					pop de 
0867 c1					pop bc 
0868 e1					pop hl 
0869			 
0869					; is free? 
0869 fe 00				cp 0 
086b 20 01				jr nz, .ff2cont 
086d 13					inc de 
086e			 
086e			.ff2cont: 
086e			 
086e 3e 40				ld a, STORE_BLOCK_PHY 
0870 cd de 0f				call addatohl 
0873 10 eb				djnz .fb2 
0875			 
0875 eb				ex de, hl 
0876 c9				ret 
0877			 
0877			; Get File ID 
0877			; ----------- 
0877			; 
0877			; With current bank 
0877			;  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; For each logical block 
0877			;    Read block file id 
0877			;      If first block of file and dont have file id 
0877			;         if file get id and exit 
0877			 
0877			 
0877			 
0877			 
0877			; Create File 
0877			; ----------- 
0877			; 
0877			; With current bank  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; Increment file id number 
0877			; Save Config 
0877			; Find free block 
0877			; Set buffer with file name and file id 
0877			; Write buffer to free block  
0877			 
0877			 
0877			; hl point to file name 
0877			; hl returns file id 
0877			 
0877			; file format: 
0877			; byte 0 - file id 
0877			; byte 1 - extent number 
0877			; byte 2-> data 
0877			 
0877			; format for extent number 0: 
0877			; 
0877			; byte 0 - file id 
0877			; byte 1 - extent 0 
0877			; byte 2 - extent count 
0877			; byte 3 -> file name and meta data 
0877			 
0877			 
0877			storage_create: 
0877				if DEBUG_STORESE 
0877					DMARK "SCR" 
0877 f5				push af  
0878 3a 8c 08			ld a, (.dmark)  
087b 32 a0 fd			ld (debug_mark),a  
087e 3a 8d 08			ld a, (.dmark+1)  
0881 32 a1 fd			ld (debug_mark+1),a  
0884 3a 8e 08			ld a, (.dmark+2)  
0887 32 a2 fd			ld (debug_mark+2),a  
088a 18 03			jr .pastdmark  
088c ..			.dmark: db "SCR"  
088f f1			.pastdmark: pop af  
0890			endm  
# End of macro DMARK
0890					CALLMONITOR 
0890 cd aa fd			call debug_vector  
0893				endm  
# End of macro CALLMONITOR
0893				endif 
0893			 
0893 e5				push hl		; save file name pointer 
0894			 
0894 cd 25 05			call storage_get_block_0 
0897			 
0897 3a af f9			ld a,(store_page)	; get current file id 
089a 3c				inc a 
089b 32 af f9			ld (store_page),a 
089e				 
089e 32 a3 f9			ld (store_tmpid),a			; save id 
08a1			 
08a1 21 00 00			ld hl, 0 
08a4 11 af f9			ld de, store_page 
08a7				if DEBUG_STORESE 
08a7					DMARK "SCw" 
08a7 f5				push af  
08a8 3a bc 08			ld a, (.dmark)  
08ab 32 a0 fd			ld (debug_mark),a  
08ae 3a bd 08			ld a, (.dmark+1)  
08b1 32 a1 fd			ld (debug_mark+1),a  
08b4 3a be 08			ld a, (.dmark+2)  
08b7 32 a2 fd			ld (debug_mark+2),a  
08ba 18 03			jr .pastdmark  
08bc ..			.dmark: db "SCw"  
08bf f1			.pastdmark: pop af  
08c0			endm  
# End of macro DMARK
08c0					CALLMONITOR 
08c0 cd aa fd			call debug_vector  
08c3				endm  
# End of macro CALLMONITOR
08c3				endif 
08c3 cd d9 04			call storage_write_block	 ; save update 
08c6			 
08c6				if DEBUG_STORESE 
08c6 11 af f9				ld de, store_page 
08c9					DMARK "SCC" 
08c9 f5				push af  
08ca 3a de 08			ld a, (.dmark)  
08cd 32 a0 fd			ld (debug_mark),a  
08d0 3a df 08			ld a, (.dmark+1)  
08d3 32 a1 fd			ld (debug_mark+1),a  
08d6 3a e0 08			ld a, (.dmark+2)  
08d9 32 a2 fd			ld (debug_mark+2),a  
08dc 18 03			jr .pastdmark  
08de ..			.dmark: db "SCC"  
08e1 f1			.pastdmark: pop af  
08e2			endm  
# End of macro DMARK
08e2					CALLMONITOR 
08e2 cd aa fd			call debug_vector  
08e5				endm  
# End of macro CALLMONITOR
08e5				endif 
08e5				;  
08e5				 
08e5 21 40 00			ld hl, STORE_BLOCK_PHY 
08e8 11 00 00			ld de, 0 
08eb cd a7 07			call storage_findnextid 
08ee			 
08ee 22 9a f9			ld (store_tmppageid), hl    ; save page to use  
08f1			 
08f1				; TODO detect 0 = no spare blocks 
08f1			 
08f1				; hl now contains the free page to use for the file header page 
08f1			 
08f1				if DEBUG_STORESE 
08f1				DMARK "SCF" 
08f1 f5				push af  
08f2 3a 06 09			ld a, (.dmark)  
08f5 32 a0 fd			ld (debug_mark),a  
08f8 3a 07 09			ld a, (.dmark+1)  
08fb 32 a1 fd			ld (debug_mark+1),a  
08fe 3a 08 09			ld a, (.dmark+2)  
0901 32 a2 fd			ld (debug_mark+2),a  
0904 18 03			jr .pastdmark  
0906 ..			.dmark: db "SCF"  
0909 f1			.pastdmark: pop af  
090a			endm  
# End of macro DMARK
090a					CALLMONITOR 
090a cd aa fd			call debug_vector  
090d				endm  
# End of macro CALLMONITOR
090d				endif 
090d			 
090d 22 9a f9			ld (store_tmppageid), hl 
0910				 
0910 3a a3 f9			ld a,(store_tmpid)    ; get file id 
0913			;	ld a, (store_filecache)			; save to cache 
0913			 
0913 32 af f9			ld (store_page),a    ; set page id 
0916 3e 00			ld a, 0			 ; extent 0 is file header 
0918 32 b0 f9			ld (store_page+1), a   ; set file extent 
091b			 
091b 32 b1 f9			ld (store_page+2), a   ; extent count for the file 
091e			 
091e			;	inc hl 		; init block 0 of file 
091e			;	inc hl   		; skip file and extent id 
091e			 ;       ld a, 0 
091e			;	ld (hl),a 
091e			;	ld a, (store_filecache+1)  	; save to cache 
091e			 
091e			;	inc hl    ; file name 
091e				 
091e				 
091e 11 b2 f9			ld de, store_page+3    ; get buffer for term string to use as file name 
0921				if DEBUG_STORESE 
0921					DMARK "SCc" 
0921 f5				push af  
0922 3a 36 09			ld a, (.dmark)  
0925 32 a0 fd			ld (debug_mark),a  
0928 3a 37 09			ld a, (.dmark+1)  
092b 32 a1 fd			ld (debug_mark+1),a  
092e 3a 38 09			ld a, (.dmark+2)  
0931 32 a2 fd			ld (debug_mark+2),a  
0934 18 03			jr .pastdmark  
0936 ..			.dmark: db "SCc"  
0939 f1			.pastdmark: pop af  
093a			endm  
# End of macro DMARK
093a					CALLMONITOR 
093a cd aa fd			call debug_vector  
093d				endm  
# End of macro CALLMONITOR
093d				endif 
093d e1				pop hl    ; get zero term string 
093e e5				push hl 
093f 3e 00			ld a, 0 
0941 cd 4f 13			call strlent 
0944 23				inc hl   ; cover zero term 
0945 06 00			ld b,0 
0947 4d				ld c,l 
0948 e1				pop hl 
0949				;ex de, hl 
0949				if DEBUG_STORESE 
0949					DMARK "SCa" 
0949 f5				push af  
094a 3a 5e 09			ld a, (.dmark)  
094d 32 a0 fd			ld (debug_mark),a  
0950 3a 5f 09			ld a, (.dmark+1)  
0953 32 a1 fd			ld (debug_mark+1),a  
0956 3a 60 09			ld a, (.dmark+2)  
0959 32 a2 fd			ld (debug_mark+2),a  
095c 18 03			jr .pastdmark  
095e ..			.dmark: db "SCa"  
0961 f1			.pastdmark: pop af  
0962			endm  
# End of macro DMARK
0962					;push af 
0962					;ld a, 'a' 
0962					;ld (debug_mark),a 
0962					;pop af 
0962					CALLMONITOR 
0962 cd aa fd			call debug_vector  
0965				endm  
# End of macro CALLMONITOR
0965				endif 
0965 ed b0			ldir    ; copy zero term string 
0967				if DEBUG_STORESE 
0967					DMARK "SCA" 
0967 f5				push af  
0968 3a 7c 09			ld a, (.dmark)  
096b 32 a0 fd			ld (debug_mark),a  
096e 3a 7d 09			ld a, (.dmark+1)  
0971 32 a1 fd			ld (debug_mark+1),a  
0974 3a 7e 09			ld a, (.dmark+2)  
0977 32 a2 fd			ld (debug_mark+2),a  
097a 18 03			jr .pastdmark  
097c ..			.dmark: db "SCA"  
097f f1			.pastdmark: pop af  
0980			endm  
# End of macro DMARK
0980					CALLMONITOR 
0980 cd aa fd			call debug_vector  
0983				endm  
# End of macro CALLMONITOR
0983				endif 
0983			 
0983				; write file header page 
0983			 
0983 2a 9a f9			ld hl,(store_tmppageid) 
0986 11 af f9			ld de, store_page 
0989				if DEBUG_STORESE 
0989					DMARK "SCb" 
0989 f5				push af  
098a 3a 9e 09			ld a, (.dmark)  
098d 32 a0 fd			ld (debug_mark),a  
0990 3a 9f 09			ld a, (.dmark+1)  
0993 32 a1 fd			ld (debug_mark+1),a  
0996 3a a0 09			ld a, (.dmark+2)  
0999 32 a2 fd			ld (debug_mark+2),a  
099c 18 03			jr .pastdmark  
099e ..			.dmark: db "SCb"  
09a1 f1			.pastdmark: pop af  
09a2			endm  
# End of macro DMARK
09a2					;push af 
09a2					;ld a, 'b' 
09a2					;ld (debug_mark),a 
09a2					;pop af 
09a2					CALLMONITOR 
09a2 cd aa fd			call debug_vector  
09a5				endm  
# End of macro CALLMONITOR
09a5				endif 
09a5 cd d9 04			call storage_write_block 
09a8			 
09a8 3a a3 f9			ld a, (store_tmpid) 
09ab 6f				ld l, a 
09ac 26 00			ld h,0 
09ae				if DEBUG_STORESE 
09ae					DMARK "SCz" 
09ae f5				push af  
09af 3a c3 09			ld a, (.dmark)  
09b2 32 a0 fd			ld (debug_mark),a  
09b5 3a c4 09			ld a, (.dmark+1)  
09b8 32 a1 fd			ld (debug_mark+1),a  
09bb 3a c5 09			ld a, (.dmark+2)  
09be 32 a2 fd			ld (debug_mark+2),a  
09c1 18 03			jr .pastdmark  
09c3 ..			.dmark: db "SCz"  
09c6 f1			.pastdmark: pop af  
09c7			endm  
# End of macro DMARK
09c7					CALLMONITOR 
09c7 cd aa fd			call debug_vector  
09ca				endm  
# End of macro CALLMONITOR
09ca				endif 
09ca c9				ret 
09cb				 
09cb			 
09cb			 
09cb			; 
09cb			; Read File 
09cb			; 
09cb			; h - file id to locate 
09cb			; l - extent to locate 
09cb			; de - pointer to string to read into 
09cb			; 
09cb			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09cb			 
09cb			.sr_fail: 
09cb d1				pop de 
09cc c9				ret 
09cd			 
09cd			storage_read: 
09cd			 
09cd			 
09cd d5				push de 
09ce			 
09ce			; TODO BUG the above push is it popped before the RET Z? 
09ce			 
09ce			; TODO how to handle multiple part blocks 
09ce			 
09ce				; locate file extent to read 
09ce			 
09ce 5c				ld e, h 
09cf 55				ld d, l 
09d0			 
09d0			.srext: 
09d0 22 ad f9			ld (store_readptr), hl     ; save the current extent to load 
09d3 ed 53 ab f9		ld (store_readbuf), de     ; save the current buffer to load in to 
09d7			 
09d7 21 40 00			ld hl, STORE_BLOCK_PHY 
09da				if DEBUG_STORESE 
09da					DMARK "sre" 
09da f5				push af  
09db 3a ef 09			ld a, (.dmark)  
09de 32 a0 fd			ld (debug_mark),a  
09e1 3a f0 09			ld a, (.dmark+1)  
09e4 32 a1 fd			ld (debug_mark+1),a  
09e7 3a f1 09			ld a, (.dmark+2)  
09ea 32 a2 fd			ld (debug_mark+2),a  
09ed 18 03			jr .pastdmark  
09ef ..			.dmark: db "sre"  
09f2 f1			.pastdmark: pop af  
09f3			endm  
# End of macro DMARK
09f3					CALLMONITOR 
09f3 cd aa fd			call debug_vector  
09f6				endm  
# End of macro CALLMONITOR
09f6				endif 
09f6 cd a7 07			call storage_findnextid 
09f9			 
09f9				if DEBUG_STORESE 
09f9					DMARK "srf" 
09f9 f5				push af  
09fa 3a 0e 0a			ld a, (.dmark)  
09fd 32 a0 fd			ld (debug_mark),a  
0a00 3a 0f 0a			ld a, (.dmark+1)  
0a03 32 a1 fd			ld (debug_mark+1),a  
0a06 3a 10 0a			ld a, (.dmark+2)  
0a09 32 a2 fd			ld (debug_mark+2),a  
0a0c 18 03			jr .pastdmark  
0a0e ..			.dmark: db "srf"  
0a11 f1			.pastdmark: pop af  
0a12			endm  
# End of macro DMARK
0a12					CALLMONITOR 
0a12 cd aa fd			call debug_vector  
0a15				endm  
# End of macro CALLMONITOR
0a15				endif 
0a15 cd 07 10			call ishlzero 
0a18			;	ld a, l 
0a18			;	add h 
0a18			;	cp 0 
0a18 28 b1			jr z,.sr_fail			; block not found so EOF 
0a1a			 
0a1a				; save current address for use by higher level words etc 
0a1a			 
0a1a 22 a0 f9			ld (store_openaddr),hl 
0a1d			 
0a1d			 
0a1d				; hl contains page number to load 
0a1d d1				pop de   ; get storage 
0a1e ed 53 ab f9		ld (store_readbuf), de     ; current buffer to load in to 
0a22 d5				push de 
0a23				if DEBUG_STORESE 
0a23					DMARK "srg" 
0a23 f5				push af  
0a24 3a 38 0a			ld a, (.dmark)  
0a27 32 a0 fd			ld (debug_mark),a  
0a2a 3a 39 0a			ld a, (.dmark+1)  
0a2d 32 a1 fd			ld (debug_mark+1),a  
0a30 3a 3a 0a			ld a, (.dmark+2)  
0a33 32 a2 fd			ld (debug_mark+2),a  
0a36 18 03			jr .pastdmark  
0a38 ..			.dmark: db "srg"  
0a3b f1			.pastdmark: pop af  
0a3c			endm  
# End of macro DMARK
0a3c					CALLMONITOR 
0a3c cd aa fd			call debug_vector  
0a3f				endm  
# End of macro CALLMONITOR
0a3f				endif 
0a3f cd 74 04			call storage_read_block 
0a42			 
0a42				; if this a continuation read??? 
0a42			 
0a42 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a45			 
0a45 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a47 cd de 0f			call addatohl 
0a4a 7e				ld a,(hl) 
0a4b fe 00			cp 0 
0a4d 28 02			jr z, .markiscont 
0a4f 3e ff			ld a, 255 
0a51			 
0a51			.markiscont: 
0a51 32 a2 f9			ld (store_readcont), a 
0a54			 
0a54				if DEBUG_STORESE 
0a54					DMARK "srC" 
0a54 f5				push af  
0a55 3a 69 0a			ld a, (.dmark)  
0a58 32 a0 fd			ld (debug_mark),a  
0a5b 3a 6a 0a			ld a, (.dmark+1)  
0a5e 32 a1 fd			ld (debug_mark+1),a  
0a61 3a 6b 0a			ld a, (.dmark+2)  
0a64 32 a2 fd			ld (debug_mark+2),a  
0a67 18 03			jr .pastdmark  
0a69 ..			.dmark: db "srC"  
0a6c f1			.pastdmark: pop af  
0a6d			endm  
# End of macro DMARK
0a6d					CALLMONITOR 
0a6d cd aa fd			call debug_vector  
0a70				endm  
# End of macro CALLMONITOR
0a70				endif 
0a70				; only short reads enabled 
0a70			 
0a70 3a aa f9			ld a, (store_longread) 
0a73 fe 00			cp 0 
0a75 ca 42 0b			jp z, .readdone 
0a78			 
0a78			; TODO if block has no zeros then need to read next block  
0a78			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a78			; check last byte of physical block. 
0a78			; if not zero then the next block needs to be loaded 
0a78			 
0a78			 
0a78 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a7b			 
0a7b 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a7d cd de 0f			call addatohl 
0a80				;dec hl 
0a80 7e				ld a,(hl) 
0a81				if DEBUG_STORESE 
0a81					DMARK "sr?" 
0a81 f5				push af  
0a82 3a 96 0a			ld a, (.dmark)  
0a85 32 a0 fd			ld (debug_mark),a  
0a88 3a 97 0a			ld a, (.dmark+1)  
0a8b 32 a1 fd			ld (debug_mark+1),a  
0a8e 3a 98 0a			ld a, (.dmark+2)  
0a91 32 a2 fd			ld (debug_mark+2),a  
0a94 18 03			jr .pastdmark  
0a96 ..			.dmark: db "sr?"  
0a99 f1			.pastdmark: pop af  
0a9a			endm  
# End of macro DMARK
0a9a					CALLMONITOR 
0a9a cd aa fd			call debug_vector  
0a9d				endm  
# End of macro CALLMONITOR
0a9d				endif 
0a9d fe 00			cp 0 
0a9f ca 42 0b			jp z, .readdone 
0aa2			 
0aa2				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0aa2			 
0aa2 23				inc hl 
0aa3			 
0aa3 22 ab f9			ld (store_readbuf), hl     ; save the current buffer to load in to 
0aa6			 
0aa6 ed 5b ad f9		ld de, (store_readptr)     ; save the current extent to load 
0aaa			 
0aaa eb				ex de, hl 
0aab			 
0aab				; next ext 
0aab			 
0aab 23				inc hl 
0aac 22 ad f9			ld  (store_readptr), hl     ; save the current extent to load 
0aaf			 
0aaf				if DEBUG_STORESE 
0aaf					DMARK "sF2" 
0aaf f5				push af  
0ab0 3a c4 0a			ld a, (.dmark)  
0ab3 32 a0 fd			ld (debug_mark),a  
0ab6 3a c5 0a			ld a, (.dmark+1)  
0ab9 32 a1 fd			ld (debug_mark+1),a  
0abc 3a c6 0a			ld a, (.dmark+2)  
0abf 32 a2 fd			ld (debug_mark+2),a  
0ac2 18 03			jr .pastdmark  
0ac4 ..			.dmark: db "sF2"  
0ac7 f1			.pastdmark: pop af  
0ac8			endm  
# End of macro DMARK
0ac8					CALLMONITOR 
0ac8 cd aa fd			call debug_vector  
0acb				endm  
# End of macro CALLMONITOR
0acb				endif 
0acb			 
0acb				; get and load block 
0acb			 
0acb cd a7 07			call storage_findnextid 
0ace			 
0ace				if DEBUG_STORESE 
0ace					DMARK "sf2" 
0ace f5				push af  
0acf 3a e3 0a			ld a, (.dmark)  
0ad2 32 a0 fd			ld (debug_mark),a  
0ad5 3a e4 0a			ld a, (.dmark+1)  
0ad8 32 a1 fd			ld (debug_mark+1),a  
0adb 3a e5 0a			ld a, (.dmark+2)  
0ade 32 a2 fd			ld (debug_mark+2),a  
0ae1 18 03			jr .pastdmark  
0ae3 ..			.dmark: db "sf2"  
0ae6 f1			.pastdmark: pop af  
0ae7			endm  
# End of macro DMARK
0ae7					CALLMONITOR 
0ae7 cd aa fd			call debug_vector  
0aea				endm  
# End of macro CALLMONITOR
0aea				endif 
0aea cd 07 10			call ishlzero 
0aed			;	ld a, l 
0aed			;	add h 
0aed			;	cp 0 
0aed ca cb 09			jp z,.sr_fail			; block not found so EOF 
0af0				 
0af0				; save current address for use by higher level words etc 
0af0			 
0af0 22 a0 f9			ld (store_openaddr),hl 
0af3			 
0af3 cd 74 04			call storage_read_block 
0af6			 
0af6				; on a continuation block, we now have the file id and ext in the middle of the block 
0af6				; we need to pull everything back  
0af6			 
0af6 ed 5b ab f9		ld de, (store_readbuf)     ; current buffer to nudge into 
0afa 2a ab f9			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0afd 23				inc hl 
0afe 23				inc hl     ; skip id and ext 
0aff 01 40 00			ld bc, STORE_BLOCK_PHY 
0b02				if DEBUG_STORESE 
0b02					DMARK "SR<" 
0b02 f5				push af  
0b03 3a 17 0b			ld a, (.dmark)  
0b06 32 a0 fd			ld (debug_mark),a  
0b09 3a 18 0b			ld a, (.dmark+1)  
0b0c 32 a1 fd			ld (debug_mark+1),a  
0b0f 3a 19 0b			ld a, (.dmark+2)  
0b12 32 a2 fd			ld (debug_mark+2),a  
0b15 18 03			jr .pastdmark  
0b17 ..			.dmark: db "SR<"  
0b1a f1			.pastdmark: pop af  
0b1b			endm  
# End of macro DMARK
0b1b					CALLMONITOR 
0b1b cd aa fd			call debug_vector  
0b1e				endm  
# End of macro CALLMONITOR
0b1e				endif 
0b1e ed b0			ldir     ; copy data 
0b20			 
0b20				; move the pointer back and pretend we have a full buffer for next recheck 
0b20			 
0b20 1b				dec de 
0b21 1b				dec de 
0b22			 
0b22			; TODO do pop below now short circuit loop????? 
0b22 c1				pop bc     ; get rid of spare de on stack 
0b23				if DEBUG_STORESE 
0b23					DMARK "SR>" 
0b23 f5				push af  
0b24 3a 38 0b			ld a, (.dmark)  
0b27 32 a0 fd			ld (debug_mark),a  
0b2a 3a 39 0b			ld a, (.dmark+1)  
0b2d 32 a1 fd			ld (debug_mark+1),a  
0b30 3a 3a 0b			ld a, (.dmark+2)  
0b33 32 a2 fd			ld (debug_mark+2),a  
0b36 18 03			jr .pastdmark  
0b38 ..			.dmark: db "SR>"  
0b3b f1			.pastdmark: pop af  
0b3c			endm  
# End of macro DMARK
0b3c					CALLMONITOR 
0b3c cd aa fd			call debug_vector  
0b3f				endm  
# End of macro CALLMONITOR
0b3f				endif 
0b3f c3 d0 09			jp .srext 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			.readdone:		 
0b42 e1				pop hl 		 ; return start of data to show as not EOF 
0b43 23				inc hl   ; past file id 
0b44 23				inc hl   ; past ext 
0b45				if DEBUG_STORESE 
0b45					DMARK "SRe" 
0b45 f5				push af  
0b46 3a 5a 0b			ld a, (.dmark)  
0b49 32 a0 fd			ld (debug_mark),a  
0b4c 3a 5b 0b			ld a, (.dmark+1)  
0b4f 32 a1 fd			ld (debug_mark+1),a  
0b52 3a 5c 0b			ld a, (.dmark+2)  
0b55 32 a2 fd			ld (debug_mark+2),a  
0b58 18 03			jr .pastdmark  
0b5a ..			.dmark: db "SRe"  
0b5d f1			.pastdmark: pop af  
0b5e			endm  
# End of macro DMARK
0b5e					CALLMONITOR 
0b5e cd aa fd			call debug_vector  
0b61				endm  
# End of macro CALLMONITOR
0b61				endif 
0b61 c9					ret 
0b62			 
0b62			 
0b62			 
0b62			; 
0b62			; Append File 
0b62			; 
0b62			; hl - file id to locate 
0b62			; de - pointer to (multi block) string to write 
0b62			 
0b62			.sa_notfound: 
0b62 d1				pop de 
0b63 c9				ret 
0b64			 
0b64			 
0b64			storage_append: 
0b64				; hl -  file id to append to 
0b64				; de - string to append 
0b64			 
0b64 d5				push de 
0b65				 
0b65				if DEBUG_STORESE 
0b65					DMARK "AP1" 
0b65 f5				push af  
0b66 3a 7a 0b			ld a, (.dmark)  
0b69 32 a0 fd			ld (debug_mark),a  
0b6c 3a 7b 0b			ld a, (.dmark+1)  
0b6f 32 a1 fd			ld (debug_mark+1),a  
0b72 3a 7c 0b			ld a, (.dmark+2)  
0b75 32 a2 fd			ld (debug_mark+2),a  
0b78 18 03			jr .pastdmark  
0b7a ..			.dmark: db "AP1"  
0b7d f1			.pastdmark: pop af  
0b7e			endm  
# End of macro DMARK
0b7e					CALLMONITOR 
0b7e cd aa fd			call debug_vector  
0b81				endm  
# End of macro CALLMONITOR
0b81				endif 
0b81			 
0b81 7d				ld a, l 
0b82 32 a3 f9			ld (store_tmpid), a 
0b85			 
0b85				; get file header  
0b85			 
0b85 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b87 3a a3 f9			ld a, (store_tmpid) 
0b8a 5f				ld e, a 
0b8b			 
0b8b 21 40 00				ld hl, STORE_BLOCK_PHY 
0b8e cd a7 07				call storage_findnextid 
0b91			 
0b91 cd 07 10			call ishlzero 
0b94 28 cc			jr z, .sa_notfound 
0b96			 
0b96 22 9a f9			ld (store_tmppageid), hl 
0b99			 
0b99				; TODO handle file id not found 
0b99			 
0b99				if DEBUG_STORESE 
0b99					DMARK "AP2" 
0b99 f5				push af  
0b9a 3a ae 0b			ld a, (.dmark)  
0b9d 32 a0 fd			ld (debug_mark),a  
0ba0 3a af 0b			ld a, (.dmark+1)  
0ba3 32 a1 fd			ld (debug_mark+1),a  
0ba6 3a b0 0b			ld a, (.dmark+2)  
0ba9 32 a2 fd			ld (debug_mark+2),a  
0bac 18 03			jr .pastdmark  
0bae ..			.dmark: db "AP2"  
0bb1 f1			.pastdmark: pop af  
0bb2			endm  
# End of macro DMARK
0bb2					CALLMONITOR 
0bb2 cd aa fd			call debug_vector  
0bb5				endm  
# End of macro CALLMONITOR
0bb5				endif 
0bb5			 
0bb5				; update file extent count 
0bb5			 
0bb5 11 af f9			ld de, store_page 
0bb8			 
0bb8 cd 74 04			call storage_read_block 
0bbb			 
0bbb				if DEBUG_STORESE 
0bbb					DMARK "AP3" 
0bbb f5				push af  
0bbc 3a d0 0b			ld a, (.dmark)  
0bbf 32 a0 fd			ld (debug_mark),a  
0bc2 3a d1 0b			ld a, (.dmark+1)  
0bc5 32 a1 fd			ld (debug_mark+1),a  
0bc8 3a d2 0b			ld a, (.dmark+2)  
0bcb 32 a2 fd			ld (debug_mark+2),a  
0bce 18 03			jr .pastdmark  
0bd0 ..			.dmark: db "AP3"  
0bd3 f1			.pastdmark: pop af  
0bd4			endm  
# End of macro DMARK
0bd4					CALLMONITOR 
0bd4 cd aa fd			call debug_vector  
0bd7				endm  
# End of macro CALLMONITOR
0bd7				endif 
0bd7			;	ld (store_tmppageid), hl 
0bd7			 
0bd7 3a b1 f9			ld a, (store_page+2) 
0bda 3c				inc a 
0bdb 32 b1 f9			ld (store_page+2), a 
0bde 32 a2 f9			ld (store_tmpext), a 
0be1				 
0be1				if DEBUG_STORESE 
0be1					DMARK "AP3" 
0be1 f5				push af  
0be2 3a f6 0b			ld a, (.dmark)  
0be5 32 a0 fd			ld (debug_mark),a  
0be8 3a f7 0b			ld a, (.dmark+1)  
0beb 32 a1 fd			ld (debug_mark+1),a  
0bee 3a f8 0b			ld a, (.dmark+2)  
0bf1 32 a2 fd			ld (debug_mark+2),a  
0bf4 18 03			jr .pastdmark  
0bf6 ..			.dmark: db "AP3"  
0bf9 f1			.pastdmark: pop af  
0bfa			endm  
# End of macro DMARK
0bfa					CALLMONITOR 
0bfa cd aa fd			call debug_vector  
0bfd				endm  
# End of macro CALLMONITOR
0bfd				endif 
0bfd 2a 9a f9			ld hl, (store_tmppageid) 
0c00 11 af f9			ld de, store_page 
0c03 cd d9 04			call storage_write_block 
0c06			 
0c06				; find free block 
0c06			 
0c06 11 00 00			ld de, 0			 ; file extent to locate 
0c09			 
0c09 21 40 00				ld hl, STORE_BLOCK_PHY 
0c0c cd a7 07				call storage_findnextid 
0c0f cd 07 10			call ishlzero 
0c12 ca 62 0b			jp z, .sa_notfound 
0c15			 
0c15					; TODO handle no space left 
0c15					 
0c15 22 9a f9				ld (store_tmppageid), hl 
0c18			 
0c18				if DEBUG_STORESE 
0c18					DMARK "AP4" 
0c18 f5				push af  
0c19 3a 2d 0c			ld a, (.dmark)  
0c1c 32 a0 fd			ld (debug_mark),a  
0c1f 3a 2e 0c			ld a, (.dmark+1)  
0c22 32 a1 fd			ld (debug_mark+1),a  
0c25 3a 2f 0c			ld a, (.dmark+2)  
0c28 32 a2 fd			ld (debug_mark+2),a  
0c2b 18 03			jr .pastdmark  
0c2d ..			.dmark: db "AP4"  
0c30 f1			.pastdmark: pop af  
0c31			endm  
# End of macro DMARK
0c31					CALLMONITOR 
0c31 cd aa fd			call debug_vector  
0c34				endm  
# End of macro CALLMONITOR
0c34				endif 
0c34					; init the buffer with zeros so we can id if the buffer is full or not 
0c34			 
0c34 e5					push hl 
0c35 c5					push bc 
0c36			 
0c36 21 af f9				ld hl, store_page 
0c39 06 40				ld b, STORE_BLOCK_PHY 
0c3b 3e 00				ld a, 0 
0c3d 77			.zeroblock:	ld (hl), a 
0c3e 23					inc hl 
0c3f 10 fc				djnz .zeroblock 
0c41			 
0c41 c1					pop bc 
0c42 e1					pop hl 
0c43			 
0c43					; construct block 
0c43			 
0c43 3a a3 f9				ld a, (store_tmpid) 
0c46 32 af f9				ld (store_page), a   ; file id 
0c49 3a a2 f9				ld a, (store_tmpext)   ; extent for this block 
0c4c 32 b0 f9				ld (store_page+1), a 
0c4f			 
0c4f e1					pop hl    ; get string to write 
0c50 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c52 11 b1 f9				ld de, store_page+2 
0c55			 
0c55				if DEBUG_STORESE 
0c55					DMARK "AP5" 
0c55 f5				push af  
0c56 3a 6a 0c			ld a, (.dmark)  
0c59 32 a0 fd			ld (debug_mark),a  
0c5c 3a 6b 0c			ld a, (.dmark+1)  
0c5f 32 a1 fd			ld (debug_mark+1),a  
0c62 3a 6c 0c			ld a, (.dmark+2)  
0c65 32 a2 fd			ld (debug_mark+2),a  
0c68 18 03			jr .pastdmark  
0c6a ..			.dmark: db "AP5"  
0c6d f1			.pastdmark: pop af  
0c6e			endm  
# End of macro DMARK
0c6e					CALLMONITOR 
0c6e cd aa fd			call debug_vector  
0c71				endm  
# End of macro CALLMONITOR
0c71				endif 
0c71			 
0c71			 
0c71			 
0c71					; fill buffer with data until end of string or full block 
0c71			 
0c71 7e			.appd:		ld a, (hl) 
0c72 12					ld (de), a 
0c73 fe 00				cp 0 
0c75 28 04				jr z, .appdone 
0c77 23					inc hl 
0c78 13					inc de 
0c79 10 f6				djnz .appd 
0c7b			 
0c7b e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c7c f5					push af   		; save last byte dumped 
0c7d			 
0c7d			 
0c7d 2a 9a f9			ld hl, (store_tmppageid) 
0c80 11 af f9			ld de, store_page 
0c83				if DEBUG_STORESE 
0c83					DMARK "AP6" 
0c83 f5				push af  
0c84 3a 98 0c			ld a, (.dmark)  
0c87 32 a0 fd			ld (debug_mark),a  
0c8a 3a 99 0c			ld a, (.dmark+1)  
0c8d 32 a1 fd			ld (debug_mark+1),a  
0c90 3a 9a 0c			ld a, (.dmark+2)  
0c93 32 a2 fd			ld (debug_mark+2),a  
0c96 18 03			jr .pastdmark  
0c98 ..			.dmark: db "AP6"  
0c9b f1			.pastdmark: pop af  
0c9c			endm  
# End of macro DMARK
0c9c					CALLMONITOR 
0c9c cd aa fd			call debug_vector  
0c9f				endm  
# End of macro CALLMONITOR
0c9f				endif 
0c9f cd d9 04				call storage_write_block 
0ca2			 
0ca2			 
0ca2				; was that a full block of data written? 
0ca2				; any more to write out? 
0ca2			 
0ca2				; if yes then set vars and jump to start of function again 
0ca2			 
0ca2 f1					pop af 
0ca3 d1					pop de 
0ca4			 
0ca4 fe 00				cp 0		 ; no, string was fully written 
0ca6 c8					ret z 
0ca7			 
0ca7					; setup vars for next cycle 
0ca7			 
0ca7 3a a3 f9				ld a, (store_tmpid) 
0caa 6f					ld l, a 
0cab 26 00				ld h, 0 
0cad			 
0cad c3 64 0b			 	jp storage_append	 ; yes, need to write out some more 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			if DEBUG_STORECF 
0cb0			storageput:	 
0cb0					ret 
0cb0			storageread: 
0cb0					ld hl, store_page 
0cb0					ld b, 200 
0cb0					ld a,0 
0cb0			.src:		ld (hl),a 
0cb0					inc hl 
0cb0					djnz .src 
0cb0					 
0cb0			 
0cb0					ld de, 0 
0cb0					ld bc, 1 
0cb0					ld hl, store_page 
0cb0					call cfRead 
0cb0			 
0cb0				call cfGetError 
0cb0				ld hl,scratch 
0cb0				call hexout 
0cb0				ld hl, scratch+2 
0cb0				ld a, 0 
0cb0				ld (hl),a 
0cb0				ld de, scratch 
0cb0				ld a,display_row_1 
0cb0				call str_at_display 
0cb0				call update_display 
0cb0			 
0cb0					ld hl, store_page 
0cb0					ld (os_cur_ptr),hl 
0cb0			 
0cb0					ret 
0cb0			endif 
0cb0			 
0cb0			 
0cb0			; Clear out the main buffer store (used to remove junk before writing a new block) 
0cb0			 
0cb0			storage_clear_page: 
0cb0 e5				push hl 
0cb1 d5				push de 
0cb2 c5				push bc 
0cb3 21 af f9			ld hl, store_page 
0cb6 3e 00			ld a, 0 
0cb8 77				ld (hl), a 
0cb9			 
0cb9 11 b0 f9			ld de, store_page+1 
0cbc 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0cbf			 
0cbf ed b0			ldir 
0cc1				 
0cc1 c1				pop bc 
0cc2 d1				pop de 
0cc3 e1				pop hl 
0cc4 c9				ret 
0cc5			 
0cc5			; eof 
# End of file firmware_storage.asm
0cc5			  
0cc5			; support routines for above hardware abstraction layer  
0cc5			  
0cc5			include "firmware_general.asm"        ; general support functions  
0cc5			 
0cc5			; word look up 
0cc5			 
0cc5			; in 
0cc5			; a is the index 
0cc5			; hl is pointer start of array 
0cc5			; 
0cc5			; returns 
0cc5			; hl to the word 
0cc5			; 
0cc5			 
0cc5			table_lookup:  
0cc5 d5					push de 
0cc6 eb					ex de, hl 
0cc7			 
0cc7 6f					ld l, a 
0cc8 26 00				ld h, 0 
0cca 29					add hl, hl 
0ccb 19					add hl, de 
0ccc 7e					ld a, (hl) 
0ccd 23					inc hl 
0cce 66					ld h,(hl) 
0ccf 6f					ld l, a 
0cd0			 
0cd0 d1					pop de 
0cd1 c9					ret 
0cd2			 
0cd2			; Delay loops 
0cd2			 
0cd2			 
0cd2			 
0cd2			aDelayInMS: 
0cd2 c5				push bc 
0cd3 47				ld b,a 
0cd4			msdelay: 
0cd4 c5				push bc 
0cd5				 
0cd5			 
0cd5 01 41 00			ld bc,041h 
0cd8 cd f0 0c			call delayloop 
0cdb c1				pop bc 
0cdc 05				dec b 
0cdd 20 f5			jr nz,msdelay 
0cdf			 
0cdf			;if CPU_CLOCK_8MHZ 
0cdf			;msdelay8: 
0cdf			;	push bc 
0cdf			;	 
0cdf			; 
0cdf			;	ld bc,041h 
0cdf			;	call delayloop 
0cdf			;	pop bc 
0cdf			;	dec b 
0cdf			;	jr nz,msdelay8 
0cdf			;endif 
0cdf			 
0cdf			 
0cdf c1				pop bc 
0ce0 c9				ret 
0ce1			 
0ce1			 
0ce1			delay250ms: 
0ce1				;push de 
0ce1 01 00 40			ld bc, 04000h 
0ce4 c3 f0 0c			jp delayloop 
0ce7			delay500ms: 
0ce7				;push de 
0ce7 01 00 80			ld bc, 08000h 
0cea c3 f0 0c			jp delayloop 
0ced			delay1s: 
0ced				;push bc 
0ced			   ; Clobbers A, d and e 
0ced 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0cf0			delayloop: 
0cf0 c5			    push bc 
0cf1			 
0cf1			if BASE_CPM 
0cf1				ld bc, CPM_DELAY_TUNE 
0cf1			.cpmloop: 
0cf1				push bc 
0cf1			 
0cf1			endif 
0cf1			 
0cf1			 
0cf1			 
0cf1			delayloopi: 
0cf1			;	push bc 
0cf1			;.dl: 
0cf1 cb 47		    bit     0,a    	; 8 
0cf3 cb 47		    bit     0,a    	; 8 
0cf5 cb 47		    bit     0,a    	; 8 
0cf7 e6 ff		    and     255  	; 7 
0cf9 0b			    dec     bc      	; 6 
0cfa 79			    ld      a,c     	; 4 
0cfb b0			    or      b     	; 4 
0cfc c2 f1 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cff			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cff				;pop de 
0cff			;pop bc 
0cff			 
0cff			if BASE_CPM 
0cff				pop bc 
0cff				 
0cff			    dec     bc      	; 6 
0cff			    ld      a,c     	; 4 
0cff			    or      b     	; 4 
0cff			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cff				 
0cff			 
0cff			endif 
0cff			;if CPU_CLOCK_8MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff			 
0cff			;if CPU_CLOCK_10MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff c1			    pop bc 
0d00			 
0d00 c9				ret 
0d01			 
0d01			 
0d01			 
0d01			; eof 
# End of file firmware_general.asm
0d01			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0d01			; display routines that use the physical hardware abstraction layer 
0d01			 
0d01			 
0d01			; Display an activity indicator 
0d01			; Each call returns the new char pointed to in hl 
0d01			 
0d01			active: 
0d01 3a fb fa			ld a, (display_active) 
0d04 fe 06			cp 6 
0d06			 
0d06 20 02			jr nz, .sne 
0d08				; gone past the last one reset sequence 
0d08 3e ff			ld a, 255 
0d0a			 
0d0a			.sne:   
0d0a				; get the next char in seq 
0d0a 3c				inc a 
0d0b 32 fb fa			ld (display_active), a 
0d0e			 
0d0e				; look up the string in the table 
0d0e 21 25 0d			ld hl, actseq 
0d11 cb 27			sla a 
0d13 cd de 0f			call addatohl 
0d16 cd b9 23			call loadwordinhl 
0d19			 
0d19				; forth will write the to string when pushing so move from rom to ram 
0d19			 
0d19 11 fc fa			ld de, display_active+1 
0d1c 01 02 00			ld bc, 2 
0d1f ed b0			ldir 
0d21			 
0d21 21 fc fa			ld hl, display_active+1 
0d24 c9				ret 
0d25				 
0d25				 
0d25			 
0d25			 
0d25			;db "|/-\|-\" 
0d25			 
0d25			actseq: 
0d25			 
0d25 33 0d		dw spin0 
0d27 35 0d		dw spin1 
0d29 37 0d		dw spin2 
0d2b 39 0d		dw spin3 
0d2d 37 0d		dw spin2 
0d2f 35 0d		dw spin1 
0d31 33 0d		dw spin0 
0d33			 
0d33 .. 00		spin0: db " ", 0 
0d35 .. 00		spin1: db "-", 0 
0d37 .. 00		spin2: db "+", 0 
0d39 .. 00		spin3: db "#", 0 
0d3b			 
0d3b			 
0d3b			; information window 
0d3b			 
0d3b			; pass hl with 1st string to display 
0d3b			; pass de with 2nd string to display 
0d3b			 
0d3b			info_panel: 
0d3b e5				push hl 
0d3c			 
0d3c 2a 01 fb			ld hl, (display_fb_active) 
0d3f e5				push hl    ; future de destination 
0d40 21 e6 fc				ld hl, display_fb0 
0d43 22 01 fb				ld (display_fb_active), hl 
0d46			 
0d46			;	call clear_display 
0d46			 
0d46				if BASE_CPM 
0d46				ld a, '.' 
0d46				else 
0d46 3e a5			ld a, 165 
0d48				endif 
0d48 cd af 0d			call fill_display 
0d4b			 
0d4b			 
0d4b 3e 55			ld a, display_row_3 + 5 
0d4d cd bd 0d			call str_at_display 
0d50			 
0d50 e1				pop hl 
0d51 d1				pop de 
0d52			 
0d52 e5				push hl 
0d53			 
0d53			 
0d53 3e 2d			ld a, display_row_2 + 5 
0d55 cd bd 0d			call str_at_display 
0d58			 
0d58			 
0d58 cd cd 0d			call update_display 
0d5b cd be 1f			call next_page_prompt 
0d5e cd aa 0d			call clear_display 
0d61			 
0d61				 
0d61 21 45 fc				ld hl, display_fb1 
0d64 22 01 fb				ld (display_fb_active), hl 
0d67 cd cd 0d			call update_display 
0d6a			 
0d6a e1				pop hl 
0d6b			 
0d6b c9				ret 
0d6c			 
0d6c			 
0d6c			 
0d6c			 
0d6c			; TODO windowing? 
0d6c			 
0d6c			; TODO scroll line up 
0d6c			 
0d6c			scroll_up: 
0d6c			 
0d6c e5				push hl 
0d6d d5				push de 
0d6e c5				push bc 
0d6f			 
0d6f				; get frame buffer  
0d6f			 
0d6f 2a 01 fb			ld hl, (display_fb_active) 
0d72 e5				push hl    ; future de destination 
0d73			 
0d73 11 28 00			ld  de, display_cols 
0d76 19				add hl, de 
0d77			 
0d77 d1				pop de 
0d78			 
0d78				;ex de, hl 
0d78 01 9f 00			ld bc, display_fb_len -1  
0d7b			;if DEBUG_FORTH_WORDS 
0d7b			;	DMARK "SCL" 
0d7b			;	CALLMONITOR 
0d7b			;endif	 
0d7b ed b0			ldir 
0d7d			 
0d7d				; wipe bottom row 
0d7d			 
0d7d			 
0d7d 2a 01 fb			ld hl, (display_fb_active) 
0d80 11 a0 00			ld de, display_cols*display_rows 
0d83 19				add hl, de 
0d84 06 28			ld b, display_cols 
0d86 3e 20			ld a, ' ' 
0d88			.scwipe: 
0d88 77				ld (hl), a 
0d89 2b				dec hl 
0d8a 10 fc			djnz .scwipe 
0d8c			 
0d8c				;pop hl 
0d8c			 
0d8c c1				pop bc 
0d8d d1				pop de 
0d8e e1				pop hl 
0d8f			 
0d8f c9				ret 
0d90			 
0d90			 
0d90			;scroll_upo: 
0d90			;	ld de, display_row_1 
0d90			 ;	ld hl, display_row_2 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_2 
0d90			 ;	ld hl, display_row_3 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_3 
0d90			 ;	ld hl, display_row_4 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			 
0d90			; TODO clear row 4 
0d90			 
0d90			;	ret 
0d90			 
0d90				 
0d90			scroll_down: 
0d90			 
0d90 e5				push hl 
0d91 d5				push de 
0d92 c5				push bc 
0d93			 
0d93				; get frame buffer  
0d93			 
0d93 2a 01 fb			ld hl, (display_fb_active) 
0d96			 
0d96 11 9f 00			ld de, display_fb_len - 1 
0d99 19				add hl, de 
0d9a			 
0d9a e5			push hl    ; future de destination 
0d9b			 
0d9b 11 28 00			ld  de, display_cols 
0d9e ed 52			sbc hl, de 
0da0			 
0da0			 
0da0 d1				pop de 
0da1			 
0da1			;	ex de, hl 
0da1 01 9f 00			ld bc, display_fb_len -1  
0da4			 
0da4			 
0da4				 
0da4			 
0da4 ed b0			ldir 
0da6			 
0da6				; wipe bottom row 
0da6			 
0da6			 
0da6			;	ld hl, (display_fb_active) 
0da6			;;	ld de, display_cols*display_rows 
0da6			;;	add hl, de 
0da6			;	ld b, display_cols 
0da6			;	ld a, ' ' 
0da6			;.scwiped: 
0da6			;	ld (hl), a 
0da6			;	dec hl 
0da6			;	djnz .scwiped 
0da6			 
0da6				;pop hl 
0da6			 
0da6 c1				pop bc 
0da7 d1				pop de 
0da8 e1				pop hl 
0da9			 
0da9 c9				ret 
0daa			;scroll_down: 
0daa			;	ld de, display_row_4 
0daa			;	ld hl, display_row_3 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_3 
0daa			; 	ld hl, display_row_2 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_2 
0daa			;	ld hl, display_row_1 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;;; TODO clear row 1 
0daa			;	ret 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			; clear active frame buffer 
0daa			 
0daa			clear_display: 
0daa 3e 20			ld a, ' ' 
0dac c3 af 0d			jp fill_display 
0daf			 
0daf			; fill active frame buffer with a char in A 
0daf			 
0daf			fill_display: 
0daf 06 a0			ld b,display_fb_len 
0db1 2a 01 fb			ld hl, (display_fb_active) 
0db4 77			.fd1:	ld (hl),a 
0db5 23				inc hl 
0db6 10 fc			djnz .fd1 
0db8 23				inc hl 
0db9 3e 00			ld a,0 
0dbb 77				ld (hl),a 
0dbc			 
0dbc			 
0dbc c9				ret 
0dbd			; Write string (DE) at pos (A) to active frame buffer 
0dbd			 
0dbd 2a 01 fb		str_at_display:    ld hl,(display_fb_active) 
0dc0 06 00					ld b,0 
0dc2 4f					ld c,a 
0dc3 09					add hl,bc 
0dc4 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0dc5 b7			            OR   A              ;Null terminator? 
0dc6 c8			            RET  Z              ;Yes, so finished 
0dc7 77					ld (hl),a 
0dc8 23				inc hl 
0dc9 13			            INC  DE             ;Point to next character 
0dca 18 f8		            JR   .sad1     ;Repeat 
0dcc c9					ret 
0dcd			 
0dcd			; using current frame buffer write to physical display 
0dcd			 
0dcd			update_display: 
0dcd e5				push hl 
0dce 2a 01 fb			ld hl, (display_fb_active) 
0dd1 cd 02 70			call write_display 
0dd4 e1				pop hl 
0dd5 c9				ret 
0dd6			 
0dd6			; TODO scrolling 
0dd6			 
0dd6			 
0dd6			; move cursor right one char 
0dd6			cursor_right: 
0dd6			 
0dd6				; TODO shift right 
0dd6				; TODO if beyond max col 
0dd6				; TODO       cursor_next_line 
0dd6			 
0dd6 c9				ret 
0dd7			 
0dd7			 
0dd7			cursor_next_line: 
0dd7				; TODO first char 
0dd7				; TODO line down 
0dd7				; TODO if past last row 
0dd7				; TODO    scroll up 
0dd7			 
0dd7 c9				ret 
0dd8			 
0dd8			cursor_left: 
0dd8				; TODO shift left 
0dd8				; TODO if beyond left  
0dd8				; TODO     cursor prev line 
0dd8				 
0dd8 c9				ret 
0dd9			 
0dd9			cursor_prev_line: 
0dd9				; TODO last char 
0dd9				; TODO line up 
0dd9				; TODO if past first row 
0dd9				; TODO   scroll down 
0dd9			 
0dd9 c9				ret 
0dda			 
0dda			 
0dda			cout: 
0dda				; A - char 
0dda c9				ret 
0ddb			 
0ddb			 
0ddb			; Display a menu and allow item selection (optional toggle items) 
0ddb			; 
0ddb			; format: 
0ddb			; hl pointer to word array with zero term for items 
0ddb			; e.g.    db item1 
0ddb			;         db .... 
0ddb			;         db 0 
0ddb			; 
0ddb			; a = starting menu item  
0ddb			; 
0ddb			; de = pointer item toggle array   (todo) 
0ddb			; 
0ddb			; returns item selected in a 1-... 
0ddb			; returns 0 if back button pressed 
0ddb			; 
0ddb			; NOTE: Uses system frame buffer to display 
0ddb			; 
0ddb			; LEFT, Q = go back 
0ddb			; RIGHT, SPACE, CR = select 
0ddb			; UP, A - Up 
0ddb			; DOWN, Z - Down 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			menu: 
0ddb			 
0ddb					; keep array pointer 
0ddb			 
0ddb 22 a8 f9				ld (store_tmp1), hl 
0dde 32 a6 f9				ld (store_tmp2), a 
0de1			 
0de1					; check for key bounce 
0de1			 
0de1			if BASE_KEV 
0de1			 
0de1 cd 4d 73		.mbounce:	call cin 
0de4 fe 00				cp 0 
0de6 20 f9				jr nz, .mbounce 
0de8			endif 
0de8					; for ease use ex 
0de8			 
0de8					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0de8 21 e6 fc				ld hl, display_fb0 
0deb 22 01 fb				ld (display_fb_active), hl 
0dee			 
0dee cd aa 0d		.mloop:		call clear_display 
0df1 cd cd 0d				call update_display 
0df4			 
0df4					; draw selection id '>' at 1 
0df4			 
0df4					; init start of list display 
0df4			 
0df4 3e 05				ld a, 5 
0df6 32 a4 f9				ld (store_tmp3), a   ; display row count 
0df9 3a a6 f9				ld a,( store_tmp2) 
0dfc 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0dff			 
0dff					 
0dff			.mitem:	 
0dff			 
0dff			 
0dff 3a a7 f9				ld a,(store_tmp2+1) 
0e02 6f					ld l, a 
0e03 26 00				ld h, 0 
0e05 29					add hl, hl 
0e06 ed 5b a8 f9			ld de, (store_tmp1) 
0e0a 19					add hl, de 
0e0b 7e					ld a, (hl) 
0e0c 23					inc hl 
0e0d 66					ld h,(hl) 
0e0e 6f					ld l, a 
0e0f			 
0e0f cd 07 10				call ishlzero 
0e12 28 1a				jr z, .mdone 
0e14			 
0e14 eb					ex de, hl 
0e15 3a a4 f9				ld a, (store_tmp3) 
0e18 cd bd 0d				call str_at_display 
0e1b					 
0e1b			 
0e1b					; next item 
0e1b 3a a7 f9				ld a, (store_tmp2+1) 
0e1e 3c					inc a 
0e1f 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0e22			 
0e22			 		; next row 
0e22			 
0e22 3a a4 f9				ld a, (store_tmp3) 
0e25 c6 28				add display_cols 
0e27 32 a4 f9				ld (store_tmp3), a 
0e2a			 
0e2a					; at end of screen? 
0e2a			 
0e2a fe 10				cp display_rows*4 
0e2c 20 d1				jr nz, .mitem 
0e2e			 
0e2e			 
0e2e			.mdone: 
0e2e cd 07 10				call ishlzero 
0e31 28 08				jr z, .nodn 
0e33			 
0e33 3e 78				ld a, display_row_4 
0e35 11 b4 0e				ld de, .mdown 
0e38 cd bd 0d				call str_at_display 
0e3b			 
0e3b					; draw options to fill the screens with active item on line 1 
0e3b					; if current option is 2 or more then display ^ in top 
0e3b			 
0e3b 3a a6 f9		.nodn:		ld a, (store_tmp2) 
0e3e fe 00				cp 0 
0e40 28 08				jr z, .noup 
0e42			 
0e42 3e 00				ld a, 0 
0e44 11 b2 0e				ld de, .mup 
0e47 cd bd 0d				call str_at_display 
0e4a			 
0e4a 3e 02		.noup:		ld a, 2 
0e4c 11 b0 0e				ld de, .msel 
0e4f cd bd 0d				call str_at_display 
0e52			 
0e52					; if current option + 1 is not null then display V in bottom 
0e52					; get key 
0e52 cd cd 0d				call update_display 
0e55			 
0e55			 
0e55					; handle key 
0e55			 
0e55 cd 3c 73				call cin_wait 
0e58			 
0e58 fe 05				cp KEY_UP 
0e5a 28 2b				jr z, .mgoup 
0e5c fe 61				cp 'a' 
0e5e 28 27				jr z, .mgoup 
0e60 fe 0a				cp KEY_DOWN 
0e62 28 32				jr z, .mgod 
0e64 fe 7a				cp 'z' 
0e66 28 2e				jr z, .mgod 
0e68 fe 20				cp ' ' 
0e6a 28 34				jr z, .goend 
0e6c fe 0c				cp KEY_RIGHT 
0e6e 28 30				jr z, .goend 
0e70 fe 0d				cp KEY_CR 
0e72 28 2c				jr z, .goend 
0e74 fe 71				cp 'q' 
0e76 28 0b				jr z, .goback 
0e78			 
0e78 fe 0b				cp KEY_LEFT 
0e7a 28 07				jr z, .goback 
0e7c fe 08				cp KEY_BS 
0e7e 28 03				jr z, .goback 
0e80 c3 ee 0d				jp .mloop 
0e83			 
0e83			.goback: 
0e83 3e 00			ld a, 0 
0e85 18 1d			jr .goend2 
0e87			 
0e87				; move up one 
0e87			.mgoup: 
0e87 3a a6 f9				ld a, (store_tmp2) 
0e8a fe 00				cp 0 
0e8c ca ee 0d				jp z, .mloop 
0e8f 3d					dec a 
0e90 32 a6 f9				ld (store_tmp2), a 
0e93 c3 ee 0d				jp .mloop 
0e96			 
0e96				; move down one 
0e96			.mgod: 
0e96 3a a6 f9				ld a, (store_tmp2) 
0e99 3c					inc a 
0e9a 32 a6 f9				ld (store_tmp2), a 
0e9d c3 ee 0d				jp .mloop 
0ea0			 
0ea0			 
0ea0			.goend: 
0ea0					; get selected item number 
0ea0			 
0ea0 3a a6 f9				ld a, (store_tmp2) 
0ea3 3c					inc a 
0ea4			 
0ea4			.goend2: 
0ea4 f5					push af 
0ea5			 
0ea5					; restore active fb 
0ea5					; TODO BUG assumes fb1 
0ea5			 
0ea5 21 45 fc				ld hl, display_fb1 
0ea8 22 01 fb				ld (display_fb_active), hl 
0eab			 
0eab					; restore main regs 
0eab			 
0eab			 
0eab cd cd 0d				call update_display 
0eae			 
0eae f1					pop af 
0eaf			 
0eaf c9				ret 
0eb0			 
0eb0 .. 00		.msel:   db ">",0 
0eb2 .. 00		.mup:   db "^",0 
0eb4 .. 00		.mdown:   db "v",0 
0eb6			 
0eb6			 
0eb6			; eof 
0eb6			 
# End of file firmware_display.asm
0eb6			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0eb6			; random number generators 
0eb6			 
0eb6			 
0eb6			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0eb6			 
0eb6			 
0eb6			;-----> Generate a random number 
0eb6			; output a=answer 0<=a<=255 
0eb6			; all registers are preserved except: af 
0eb6			random: 
0eb6 e5			        push    hl 
0eb7 d5			        push    de 
0eb8 2a e0 fa		        ld      hl,(randData) 
0ebb ed 5f		        ld      a,r 
0ebd 57			        ld      d,a 
0ebe 5e			        ld      e,(hl) 
0ebf 19			        add     hl,de 
0ec0 85			        add     a,l 
0ec1 ac			        xor     h 
0ec2 22 e0 fa		        ld      (randData),hl 
0ec5 d1			        pop     de 
0ec6 e1			        pop     hl 
0ec7 c9			        ret 
0ec8			 
0ec8			 
0ec8			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0ec8			 
0ec8			 
0ec8			 
0ec8			;------LFSR------ 
0ec8			;James Montelongo 
0ec8			;optimized by Spencer Putt 
0ec8			;out: 
0ec8			; a = 8 bit random number 
0ec8			RandLFSR: 
0ec8 21 e6 fa		        ld hl,LFSRSeed+4 
0ecb 5e			        ld e,(hl) 
0ecc 23			        inc hl 
0ecd 56			        ld d,(hl) 
0ece 23			        inc hl 
0ecf 4e			        ld c,(hl) 
0ed0 23			        inc hl 
0ed1 7e			        ld a,(hl) 
0ed2 47			        ld b,a 
0ed3 cb 13		        rl e  
0ed5 cb 12			rl d 
0ed7 cb 11		        rl c  
0ed9 17				rla 
0eda cb 13		        rl e  
0edc cb 12			rl d 
0ede cb 11		        rl c  
0ee0 17				rla 
0ee1 cb 13		        rl e  
0ee3 cb 12			rl d 
0ee5 cb 11		        rl c  
0ee7 17				rla 
0ee8 67			        ld h,a 
0ee9 cb 13		        rl e  
0eeb cb 12			rl d 
0eed cb 11		        rl c  
0eef 17				rla 
0ef0 a8			        xor b 
0ef1 cb 13		        rl e  
0ef3 cb 12			rl d 
0ef5 ac			        xor h 
0ef6 a9			        xor c 
0ef7 aa			        xor d 
0ef8 21 e8 fa		        ld hl,LFSRSeed+6 
0efb 11 e9 fa		        ld de,LFSRSeed+7 
0efe 01 07 00		        ld bc,7 
0f01 ed b8		        lddr 
0f03 12			        ld (de),a 
0f04 c9			        ret 
0f05			 
0f05			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0f05			 
0f05			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0f05			 
0f05			 
0f05			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0f05			 
0f05			prng16: 
0f05			;Inputs: 
0f05			;   (seed1) contains a 16-bit seed value 
0f05			;   (seed2) contains a NON-ZERO 16-bit seed value 
0f05			;Outputs: 
0f05			;   HL is the result 
0f05			;   BC is the result of the LCG, so not that great of quality 
0f05			;   DE is preserved 
0f05			;Destroys: 
0f05			;   AF 
0f05			;cycle: 4,294,901,760 (almost 4.3 billion) 
0f05			;160cc 
0f05			;26 bytes 
0f05 2a da fa		    ld hl,(seed1) 
0f08 44			    ld b,h 
0f09 4d			    ld c,l 
0f0a 29			    add hl,hl 
0f0b 29			    add hl,hl 
0f0c 2c			    inc l 
0f0d 09			    add hl,bc 
0f0e 22 da fa		    ld (seed1),hl 
0f11 2a d8 fa		    ld hl,(seed2) 
0f14 29			    add hl,hl 
0f15 9f			    sbc a,a 
0f16 e6 2d		    and %00101101 
0f18 ad			    xor l 
0f19 6f			    ld l,a 
0f1a 22 d8 fa		    ld (seed2),hl 
0f1d 09			    add hl,bc 
0f1e c9			    ret 
0f1f			 
0f1f			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0f1f			 
0f1f			rand32: 
0f1f			;Inputs: 
0f1f			;   (seed1_0) holds the lower 16 bits of the first seed 
0f1f			;   (seed1_1) holds the upper 16 bits of the first seed 
0f1f			;   (seed2_0) holds the lower 16 bits of the second seed 
0f1f			;   (seed2_1) holds the upper 16 bits of the second seed 
0f1f			;   **NOTE: seed2 must be non-zero 
0f1f			;Outputs: 
0f1f			;   HL is the result 
0f1f			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0f1f			;Destroys: 
0f1f			;   AF 
0f1f			;Tested and passes all CAcert tests 
0f1f			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0f1f			;it has a period of 18,446,744,069,414,584,320 
0f1f			;roughly 18.4 quintillion. 
0f1f			;LFSR taps: 0,2,6,7  = 11000101 
0f1f			;291cc 
0f1f			;seed1_0=$+1 
0f1f			;    ld hl,12345 
0f1f			;seed1_1=$+1 
0f1f			;    ld de,6789 
0f1f			;    ld b,h 
0f1f			;    ld c,l 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    inc l 
0f1f			;    add hl,bc 
0f1f			;    ld (seed1_0),hl 
0f1f			;    ld hl,(seed1_1) 
0f1f			;    adc hl,de 
0f1f			;    ld (seed1_1),hl 
0f1f			;    ex de,hl 
0f1f			;seed2_0=$+1 
0f1f			;    ld hl,9876 
0f1f			;seed2_1=$+1 
0f1f			;    ld bc,54321 
0f1f			;    add hl,hl \ rl c \ rl b 
0f1f			;    ld (seed2_1),bc 
0f1f			;    sbc a,a 
0f1f			;    and %11000101 
0f1f			;    xor l 
0f1f			;    ld l,a 
0f1f			;    ld (seed2_0),hl 
0f1f			;    ex de,hl 
0f1f			;    add hl,bc 
0f1f			;    ret 
0f1f			; 
0f1f			 
0f1f			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0f1f			; 20 bytes, 86 cycles (excluding ret) 
0f1f			 
0f1f			; returns   hl = pseudorandom number 
0f1f			; corrupts   a 
0f1f			 
0f1f			; generates 16-bit pseudorandom numbers with a period of 65535 
0f1f			; using the xorshift method: 
0f1f			 
0f1f			; hl ^= hl << 7 
0f1f			; hl ^= hl >> 9 
0f1f			; hl ^= hl << 8 
0f1f			 
0f1f			; some alternative shift triplets which also perform well are: 
0f1f			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0f1f			 
0f1f			;  org 32768 
0f1f			 
0f1f			xrnd: 
0f1f 2a de fa		  ld hl,(xrandc)       ; seed must not be 0 
0f22 3e 00		  ld a,0 
0f24 bd			  cp l 
0f25 20 02		  jr nz, .xrnd1 
0f27 2e 01		  ld l, 1 
0f29			.xrnd1: 
0f29			 
0f29 7c			  ld a,h 
0f2a 1f			  rra 
0f2b 7d			  ld a,l 
0f2c 1f			  rra 
0f2d ac			  xor h 
0f2e 67			  ld h,a 
0f2f 7d			  ld a,l 
0f30 1f			  rra 
0f31 7c			  ld a,h 
0f32 1f			  rra 
0f33 ad			  xor l 
0f34 6f			  ld l,a 
0f35 ac			  xor h 
0f36 67			  ld h,a 
0f37			 
0f37 22 de fa		  ld (xrandc),hl 
0f3a			 
0f3a c9			  ret 
0f3b			;  
0f3b			 
0f3b			 
0f3b			;;;; int maths 
0f3b			 
0f3b			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f3b			; Divide 16-bit values (with 16-bit result) 
0f3b			; In: Divide BC by divider DE 
0f3b			; Out: BC = result, HL = rest 
0f3b			; 
0f3b			Div16: 
0f3b 21 00 00		    ld hl,0 
0f3e 78			    ld a,b 
0f3f 06 08		    ld b,8 
0f41			Div16_Loop1: 
0f41 17			    rla 
0f42 ed 6a		    adc hl,hl 
0f44 ed 52		    sbc hl,de 
0f46 30 01		    jr nc,Div16_NoAdd1 
0f48 19			    add hl,de 
0f49			Div16_NoAdd1: 
0f49 10 f6		    djnz Div16_Loop1 
0f4b 17			    rla 
0f4c 2f			    cpl 
0f4d 47			    ld b,a 
0f4e 79			    ld a,c 
0f4f 48			    ld c,b 
0f50 06 08		    ld b,8 
0f52			Div16_Loop2: 
0f52 17			    rla 
0f53 ed 6a		    adc hl,hl 
0f55 ed 52		    sbc hl,de 
0f57 30 01		    jr nc,Div16_NoAdd2 
0f59 19			    add hl,de 
0f5a			Div16_NoAdd2: 
0f5a 10 f6		    djnz Div16_Loop2 
0f5c 17			    rla 
0f5d 2f			    cpl 
0f5e 41			    ld b,c 
0f5f 4f			    ld c,a 
0f60 c9			ret 
0f61			 
0f61			 
0f61			;http://z80-heaven.wikidot.com/math 
0f61			; 
0f61			;Inputs: 
0f61			;     DE and A are factors 
0f61			;Outputs: 
0f61			;     A is not changed 
0f61			;     B is 0 
0f61			;     C is not changed 
0f61			;     DE is not changed 
0f61			;     HL is the product 
0f61			;Time: 
0f61			;     342+6x 
0f61			; 
0f61			Mult16: 
0f61			 
0f61 06 08		     ld b,8          ;7           7 
0f63 21 00 00		     ld hl,0         ;10         10 
0f66 29			       add hl,hl     ;11*8       88 
0f67 07			       rlca          ;4*8        32 
0f68 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f6a 19			         add hl,de   ;--         -- 
0f6b 10 f9		       djnz $-5      ;13*7+8     99 
0f6d c9			ret 
0f6e			 
0f6e			; 
0f6e			; Square root of 16-bit value 
0f6e			; In:  HL = value 
0f6e			; Out:  D = result (rounded down) 
0f6e			; 
0f6e			;Sqr16: 
0f6e			;    ld de,#0040 
0f6e			;    ld a,l 
0f6e			;    ld l,h 
0f6e			;    ld h,d 
0f6e			;    or a 
0f6e			;    ld b,8 
0f6e			;Sqr16_Loop: 
0f6e			;    sbc hl,de 
0f6e			;    jr nc,Sqr16_Skip 
0f6e			;    add hl,de 
0f6e			;Sqr16_Skip: 
0f6e			;    ccf 
0f6e			;    rl d 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    djnz Sqr16_Loop 
0f6e			;    ret 
0f6e			; 
0f6e			; 
0f6e			; Divide 8-bit values 
0f6e			; In: Divide E by divider C 
0f6e			; Out: A = result, B = rest 
0f6e			; 
0f6e			Div8: 
0f6e af			    xor a 
0f6f 06 08		    ld b,8 
0f71			Div8_Loop: 
0f71 cb 13		    rl e 
0f73 17			    rla 
0f74 91			    sub c 
0f75 30 01		    jr nc,Div8_NoAdd 
0f77 81			    add a,c 
0f78			Div8_NoAdd: 
0f78 10 f7		    djnz Div8_Loop 
0f7a 47			    ld b,a 
0f7b 7b			    ld a,e 
0f7c 17			    rla 
0f7d 2f			    cpl 
0f7e c9			    ret 
0f7f			 
0f7f			; 
0f7f			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f7f			; In: Multiply A with DE 
0f7f			; Out: HL = result 
0f7f			; 
0f7f			Mult12U: 
0f7f 2e 00		    ld l,0 
0f81 87			    add a,a 
0f82 30 01		    jr nc,Mult12U_NoAdd0 
0f84 19			    add hl,de 
0f85			Mult12U_NoAdd0: 
0f85 29			    add hl,hl 
0f86 87			    add a,a 
0f87 30 01		    jr nc,Mult12U_NoAdd1 
0f89 19			    add hl,de 
0f8a			Mult12U_NoAdd1: 
0f8a 29			    add hl,hl 
0f8b 87			    add a,a 
0f8c 30 01		    jr nc,Mult12U_NoAdd2 
0f8e 19			    add hl,de 
0f8f			Mult12U_NoAdd2: 
0f8f 29			    add hl,hl 
0f90 87			    add a,a 
0f91 30 01		    jr nc,Mult12U_NoAdd3 
0f93 19			    add hl,de 
0f94			Mult12U_NoAdd3: 
0f94 29			    add hl,hl 
0f95 87			    add a,a 
0f96 30 01		    jr nc,Mult12U_NoAdd4 
0f98 19			    add hl,de 
0f99			Mult12U_NoAdd4: 
0f99 29			    add hl,hl 
0f9a 87			    add a,a 
0f9b 30 01		    jr nc,Mult12U_NoAdd5 
0f9d 19			    add hl,de 
0f9e			Mult12U_NoAdd5: 
0f9e 29			    add hl,hl 
0f9f 87			    add a,a 
0fa0 30 01		    jr nc,Mult12U_NoAdd6 
0fa2 19			    add hl,de 
0fa3			Mult12U_NoAdd6: 
0fa3 29			    add hl,hl 
0fa4 87			    add a,a 
0fa5 d0			    ret nc 
0fa6 19			    add hl,de 
0fa7 c9			    ret 
0fa8			 
0fa8			; 
0fa8			; Multiply 8-bit value with a 16-bit value (right rotating) 
0fa8			; In: Multiply A with DE 
0fa8			;      Put lowest value in A for most efficient calculation 
0fa8			; Out: HL = result 
0fa8			; 
0fa8			Mult12R: 
0fa8 21 00 00		    ld hl,0 
0fab			Mult12R_Loop: 
0fab cb 3f		    srl a 
0fad 30 01		    jr nc,Mult12R_NoAdd 
0faf 19			    add hl,de 
0fb0			Mult12R_NoAdd: 
0fb0 cb 23		    sla e 
0fb2 cb 12		    rl d 
0fb4 b7			    or a 
0fb5 c2 ab 0f		    jp nz,Mult12R_Loop 
0fb8 c9			    ret 
0fb9			 
0fb9			; 
0fb9			; Multiply 16-bit values (with 32-bit result) 
0fb9			; In: Multiply BC with DE 
0fb9			; Out: BCHL = result 
0fb9			; 
0fb9			Mult32: 
0fb9 79			    ld a,c 
0fba 48			    ld c,b 
0fbb 21 00 00		    ld hl,0 
0fbe 06 10		    ld b,16 
0fc0			Mult32_Loop: 
0fc0 29			    add hl,hl 
0fc1 17			    rla 
0fc2 cb 11		    rl c 
0fc4 30 07		    jr nc,Mult32_NoAdd 
0fc6 19			    add hl,de 
0fc7 ce 00		    adc a,0 
0fc9 d2 cd 0f		    jp nc,Mult32_NoAdd 
0fcc 0c			    inc c 
0fcd			Mult32_NoAdd: 
0fcd 10 f1		    djnz Mult32_Loop 
0fcf 41			    ld b,c 
0fd0 4f			    ld c,a 
0fd1 c9			    ret 
0fd2			 
0fd2			 
0fd2			 
0fd2			; 
0fd2			; Multiply 8-bit values 
0fd2			; In:  Multiply H with E 
0fd2			; Out: HL = result 
0fd2			; 
0fd2			Mult8: 
0fd2 16 00		    ld d,0 
0fd4 6a			    ld l,d 
0fd5 06 08		    ld b,8 
0fd7			Mult8_Loop: 
0fd7 29			    add hl,hl 
0fd8 30 01		    jr nc,Mult8_NoAdd 
0fda 19			    add hl,de 
0fdb			Mult8_NoAdd: 
0fdb 10 fa		    djnz Mult8_Loop 
0fdd c9			    ret 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			;;http://z80-heaven.wikidot.com/math 
0fde			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fde			; 
0fde			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fde			;     ld a,16        ;7 
0fde			;     ld hl,0        ;10 
0fde			;     jp $+5         ;10 
0fde			;.DivLoop: 
0fde			;       add hl,bc    ;-- 
0fde			;       dec a        ;64 
0fde			;       jr z,.DivLoopEnd        ;86 
0fde			; 
0fde			;       sla e        ;128 
0fde			;       rl d         ;128 
0fde			;       adc hl,hl    ;240 
0fde			;       sbc hl,bc    ;240 
0fde			;       jr nc,.DivLoop ;23|21 
0fde			;       inc e        ;-- 
0fde			;       jp .DivLoop+1 
0fde			; 
0fde			;.DivLoopEnd: 
0fde			 
0fde			;HL_Div_C: 
0fde			;Inputs: 
0fde			;     HL is the numerator 
0fde			;     C is the denominator 
0fde			;Outputs: 
0fde			;     A is the remainder 
0fde			;     B is 0 
0fde			;     C is not changed 
0fde			;     DE is not changed 
0fde			;     HL is the quotient 
0fde			; 
0fde			;       ld b,16 
0fde			;       xor a 
0fde			;         add hl,hl 
0fde			;         rla 
0fde			;         cp c 
0fde			;         jr c,$+4 
0fde			;           inc l 
0fde			;           sub c 
0fde			;         djnz $-7 
0fde			 
0fde			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fde			 
0fde			addatohl: 
0fde 85			    add   a, l    ; A = A+L 
0fdf 6f			    ld    l, a    ; L = A+L 
0fe0 8c			    adc   a, h    ; A = A+L+H+carry 
0fe1 95			    sub   l       ; A = H+carry 
0fe2 67			    ld    h, a    ; H = H+carry 
0fe3 c9			ret 
0fe4			 
0fe4			addatode: 
0fe4 83			    add   a, e    ; A = A+L 
0fe5 5f			    ld    e, a    ; L = A+L 
0fe6 8a			    adc   a, d    ; A = A+L+H+carry 
0fe7 93			    sub   e       ; A = H+carry 
0fe8 57			    ld    d, a    ; H = H+carry 
0fe9 c9			ret 
0fea			 
0fea			 
0fea			addatobc: 
0fea 81			    add   a, c    ; A = A+L 
0feb 4f			    ld    c, a    ; L = A+L 
0fec 88			    adc   a, b    ; A = A+L+H+carry 
0fed 91			    sub   c       ; A = H+carry 
0fee 47			    ld    b, a    ; H = H+carry 
0fef c9			ret 
0ff0			 
0ff0			subafromhl: 
0ff0			   ; If A=0 do nothing 
0ff0			    ; Otherwise flip A's sign. Since 
0ff0			    ; the upper byte becomes -1, also 
0ff0			    ; substract 1 from H. 
0ff0 ed 44		    neg 
0ff2 ca fb 0f		    jp    z, Skip 
0ff5 25			    dec   h 
0ff6			     
0ff6			    ; Now add the low byte as usual 
0ff6			    ; Two's complement takes care of 
0ff6			    ; ensuring the result is correct 
0ff6 85			    add   a, l 
0ff7 6f			    ld    l, a 
0ff8 8c			    adc   a, h 
0ff9 95			    sub   l 
0ffa 67			    ld    h, a 
0ffb			Skip: 
0ffb c9				ret 
0ffc			 
0ffc			 
0ffc			; compare hl and de 
0ffc			; returns:  
0ffc			; if hl = de, z=1, s=0, c0=0 
0ffc			; if hl > de, z=0, s=0, c=0 
0ffc			; if hl < de, z=0, s=1, c=1 
0ffc			cmp16:	 
0ffc b7				or a 
0ffd ed 52			sbc hl,de 
0fff e0				ret po 
1000 7c				ld a,h 
1001 1f				rra 
1002 ee 40			xor 01000000B 
1004 37				scf 
1005 8f				adc a,a 
1006 c9				ret 
1007			 
1007			 
1007			; test if hl contains zero   - A is destroyed 
1007			 
1007			ishlzero:    
1007 b7				or a     ; reset flags 
1008 7c				ld a, h 
1009 b5				or l        	 
100a			 
100a c9				ret 
100b			 
100b			 
100b			 
100b			 
100b			if FORTH_ENABLE_FLOATMATH 
100b			;include "float/bbcmath.z80" 
100b			include "float/lpfpcalc.asm" 
100b			endif 
100b			 
100b			 
100b			; eof 
100b			 
# End of file firmware_maths.asm
100b			include "firmware_strings.asm"   ; string handling  
100b			 
100b			 
100b			; TODO string len 
100b			; input text string, end on cr with zero term 
100b			; a offset into frame buffer to start prompt 
100b			; d is max length 
100b			; e is display size TODO 
100b			; c is current cursor position 
100b			; hl is ptr to where string will be stored and edited directly 
100b			 
100b			 
100b			; TODO check limit of buffer for new inserts 
100b			; TODO check insert does not push beyond buffer 
100b			; TODO scroll in a limited display area 
100b			; TODO scroll whole screen on page wrap 
100b			 
100b			 
100b			; TODO use LCD cursor? 
100b			 
100b			EDIT_V1: equ 0 
100b			EDIT_V2: equ 1 
100b			 
100b			 
100b			 
100b			if EDIT_V2 
100b			input_str: 
100b			 
100b 32 99 fd			    	ld (input_at_pos),a      ; save display position to start 
100e			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
100e 22 9c fd				ld (input_start), hl     ; save ptr to buffer 
1011			;		ld a, c 
1011			;		call addatohl 
1011			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
1011 7a					ld a,d 
1012 32 9b fd			        ld (input_size), a       ; save length of input area 
1015 79					ld a, c 
1016 32 8a fd				ld (input_cursor),a      ; init cursor start position relative to start of string 
1019 7b					ld a,e 
101a 32 9a fd			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
101d			 
101d			 
101d					; add a trailing space to make screen refresh nicer 
101d			 
101d					;ld hl, (input_start) 
101d					;push hl 
101d					;ld a, 0 
101d					;call strlent 
101d					;ld a, l 
101d					;pop hl 
101d					;call addatohl 
101d					;dec hl 
101d					;ld a, ' ' 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld a, 0 
101d					;ld (hl), a 
101d			 
101d			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
101d					; init cursor shape if not set by the cin routines 
101d 21 f6 fa				ld hl, cursor_shape 
1020			if BASE_KEV 
1020 3e ff				ld a, 255 
1022			else 
1022					ld a, '#' 
1022			endif 
1022 77					ld (hl), a 
1023 23					inc hl 
1024 3e 00				ld a, 0 
1026 77					ld (hl), a 
1027			 
1027 3e 09				ld a, CUR_BLINK_RATE 
1029 32 95 fd				ld (input_cur_flash), a 
102c 3e 01				ld a, 1 
102e 32 94 fd				ld (input_cur_onoff),a 
1031			.inmain:	 
1031			 
1031 cd 59 11				call input_disp_ref 
1034			 
1034					; save current length of string 
1034			 
1034 2a 9c fd				ld hl, (input_start) 
1037 3e 00				ld a, 0 
1039 cd 4f 13				call strlent 
103c 7d					ld a,l 
103d 32 8f fd				ld (input_len), a 
1040			 
1040					;call input_disp_oncur 
1040			 
1040					; display current state of input buffer 
1040			 
1040					; clean any backspace chars 
1040			 
1040 3e 20				ld a, " " 
1042 32 f6 f0				ld (scratch),a 
1045 3e 00				ld a, 0 
1047 32 f7 f0				ld (scratch+1),a 
104a 3a 99 fd				ld a,(input_at_pos) 
104d 85					add l 
104e 11 f6 f0				ld de, scratch 
1051 cd bd 0d				call str_at_display 
1054			 
1054					; pause 1ms 
1054			 
1054 3e 01				ld a, 1 
1056 cd d2 0c				call aDelayInMS 
1059			 
1059			; display cursor if visible on this cycle 
1059			 
1059					; dec flash counter 
1059 3a 95 fd				ld a, (input_cur_flash) 
105c 3d					dec a 
105d 32 95 fd				ld (input_cur_flash), a 
1060 fe 00				cp 0 
1062 20 0d				jr nz, .inochgstate 
1064			 
1064			 
1064					; reset on change of state 
1064 3e 09				ld a, CUR_BLINK_RATE 
1066 32 95 fd				ld (input_cur_flash), a 
1069			 
1069					; change state 
1069 3a 94 fd				ld a,(input_cur_onoff) 
106c ed 44				neg 
106e 32 94 fd				ld (input_cur_onoff),a 
1071			 
1071			 
1071			 
1071			 
1071					; TODO is cursor visible? 
1071					; TODO if so then over write the char at curspos pos with the cursor shape 
1071			 
1071								 
1071			 
1071			.inochgstate: 
1071 3a 94 fd				ld a,(input_cur_onoff) 
1074 fe ff				cp 255 
1076 28 0e				jr z, .skipcursor 
1078 3a 99 fd				ld a, (input_at_pos) 
107b 47					ld b, a 
107c 3a 8a fd				ld a, (input_cursor) 
107f 80					add b 
1080 11 f6 fa				ld de, cursor_shape 
1083					 
1083 cd bd 0d				call str_at_display 
1086			 
1086			.skipcursor: 
1086				if DEBUG_INPUTV2 
1086			 
1086					ld a,(input_at_pos) 
1086					ld hl, LFSRSeed 
1086					call hexout 
1086					ld a, (input_cursor) 
1086					ld hl, LFSRSeed+2 
1086					call hexout 
1086					ld a,(input_size) 
1086					ld hl, LFSRSeed+4 
1086					call hexout 
1086			 
1086					ld a,(input_cur_onoff) 
1086					ld hl, LFSRSeed+6 
1086					call hexout 
1086			 
1086					ld a,(input_cur_flash) 
1086					ld hl, LFSRSeed+8 
1086					call hexout 
1086			 
1086					ld a,(input_len) 
1086					ld hl, LFSRSeed+10 
1086					call hexout 
1086					ld hl, LFSRSeed+12 
1086					ld a, 0 
1086					ld (hl),a 
1086					ld a, display_row_4 
1086					ld de, LFSRSeed 
1086					call str_at_display 
1086				endif 
1086 cd cd 0d				call update_display 
1089			 
1089					; TODO keyboard processing 
1089			 
1089			if BASE_CPM 
1089					call cin_wait 
1089			else 
1089 cd 4d 73				call cin    ; _wait 
108c			endif 
108c fe 00				cp 0 
108e ca 31 10				jp z, .inmain 
1091			 
1091 fe 0b				cp KEY_LEFT    ; cursor left 
1093 ca 4b 11				jp z, input_left 
1096				 
1096 fe 0c				cp KEY_RIGHT      ; cursor right 
1098 ca 52 11				jp z, input_right 
109b			 
109b fe 0d				cp KEY_CR 
109d c8					ret z 
109e			 
109e fe 08				cp KEY_BS 
10a0 ca c0 11				jp z, input_delchar 
10a3			 
10a3 fe 06				cp KEY_NEXTWORD 
10a5 ca cc 10				jp z, input_nxtword 
10a8			 
10a8 fe 07				cp KEY_PREVWORD 
10aa ca f3 10				jp z, input_prvword 
10ad			 
10ad fe 0e				cp KEY_HOME    ; jump to start of line 
10af 20 08				jr nz, .ikh 
10b1 3e 00				ld a, 0 
10b3 32 8a fd				ld (input_cursor), a 
10b6 ca 31 10				jp z, .inmain 
10b9			.ikh: 
10b9			 
10b9 fe 0f				cp KEY_END     ; jump to end of line 
10bb 20 09				jr nz, .ike 
10bd 3a 8f fd				ld a, (input_len) 
10c0 32 8a fd				ld (input_cursor),a 
10c3 ca 31 10				jp z, .inmain 
10c6			.ike: 
10c6 fe 05			        cp KEY_UP      ; recall last command 
10c8 c8					ret z 
10c9			;jr nz, .irec 
10c9			; TODO next word 
10c9			; TODO prev word 
10c9			;  
10c9			; 
10c9			;	ld hl, scratch 
10c9			;	ld de, os_last_cmd 
10c9			;	call strcpy 
10c9			;		jp  .inmain 
10c9			.irec: 
10c9			;		jr .instr1 
10c9			 
10c9			 
10c9			 
10c9					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
10c9			 
10c9			; TODO return if any special keys are given 
10c9			;		ld l, a 
10c9			;		ld a, 28 ; KEY_F12   ; 27 
10c9			;		sub l 
10c9			;		ret m 
10c9			;		ld a, l 
10c9					; if no special key then insert as a char 
10c9			 
10c9 c3 92 11				jp input_inschr 
10cc			 
10cc				 
10cc			input_nxtword: 
10cc				; jump to start next word after the cursor 
10cc			 
10cc			.insknwn:	 
10cc cd 88 11				call input_curptr	 
10cf 7e					ld a,(hl)	 
10d0 fe 00				cp 0 
10d2 ca 31 10				jp z, .inmain    ; end of string 
10d5			 
10d5			; if we are on a word, then move off of it 
10d5			 
10d5 fe 20				cp ' ' 
10d7 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
10d9 21 8a fd				ld hl, input_cursor 
10dc 34					inc (hl) 
10dd 18 ed				jr .insknwn 
10df			 
10df			.inspace: 
10df			 
10df cd 88 11				call input_curptr	 
10e2 7e					ld a,(hl)	 
10e3 fe 00				cp 0 
10e5 ca 31 10				jp z, .inmain    ; end of string 
10e8			 
10e8			; if we are on a word, then move off of it 
10e8			 
10e8 fe 20				cp ' ' 
10ea c2 31 10				jp nz, .inmain     ; we are on non space so at next word 
10ed 21 8a fd				ld hl, input_cursor 
10f0 34					inc (hl) 
10f1 18 ec				jr .inspace 
10f3			 
10f3			 
10f3			 
10f3			 
10f3			input_prvword: 
10f3				; jump to the start of previous word before the cursor 
10f3			 
10f3			; where are we to start with currently? 
10f3			 
10f3 cd 88 11				call input_curptr	 
10f6 7e					ld a, (hl) 
10f7 fe 20				cp ' ' 
10f9 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
10fb			 
10fb			 
10fb			 
10fb			.inskpwn:	 
10fb 3a 8a fd				ld a,(input_cursor) 
10fe fe 00				cp 0 
1100 ca 31 10				jp z, .inmain    ; start of string 
1103			 
1103			;if we are on a word, then move off of it 
1103			 
1103 cd 88 11				call input_curptr	 
1106 7e					ld a, (hl) 
1107 fe 20				cp ' ' 
1109 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
110b					;jp z, .inmain    ; start of string 
110b 21 8a fd				ld hl, input_cursor 
110e 35					dec (hl) 
110f 18 ea				jr .inskpwn 
1111			.iwstart: 
1111 21 8a fd				ld hl, input_cursor 
1114 34					inc (hl) 
1115 c3 31 10				jp .inmain 
1118					 
1118			 
1118			.inspacep: 
1118			 
1118					;jp .inmain    ; start of string 
1118			 
1118			 
1118			 
1118 3a 8a fd				ld a,(input_cursor) 
111b fe 00				cp 0 
111d ca 31 10				jp z, .inmain    ; start of string 
1120			 
1120			; if we are on a word, then move off of it 
1120			 
1120 cd 88 11				call input_curptr	 
1123 7e					ld a, (hl) 
1124 fe 20				cp ' ' 
1126 c2 2f 11				jp nz, .incharp     ; we are on non space so at end of prev word 
1129 21 8a fd				ld hl, input_cursor 
112c 35					dec (hl) 
112d 18 e9				jr .inspacep 
112f			 
112f			 
112f			.incharp:	 
112f					; eat the word to get to the start 
112f 3a 8a fd				ld a,(input_cursor) 
1132 fe 00				cp 0 
1134 ca 31 10				jp z, .inmain    ; start of string 
1137			 
1137			; if we are on a word, then move off of it 
1137			 
1137 cd 88 11				call input_curptr	 
113a 7e					ld a, (hl) 
113b fe 20				cp ' ' 
113d 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
113f 21 8a fd				ld hl, input_cursor 
1142 35					dec (hl) 
1143 18 ea				jr .incharp 
1145			.ipwordst: 
1145					; at space before the prev word so reposition over it 
1145 21 8a fd				ld hl, input_cursor 
1148 34					inc (hl) 
1149 18 b0				jr .inskpwn 
114b					 
114b			 
114b			 
114b			input_left: 
114b				; move cursor left 
114b 21 8a fd			ld hl, input_cursor 
114e 35				dec (hl) 
114f			;	cp 0 
114f			;	jp z, .inmain    ; ignore left as at the start of the string 
114f c3 31 10			jp .inmain 
1152			 
1152			input_right: 
1152				; move cursor right 
1152				 
1152				;ld a, (input_size) 
1152				;ld b, a 
1152 21 8a fd			ld hl, input_cursor 
1155 34				inc (hl) 
1156				;dec b 
1156				;cp 0 
1156				;jp z, .inmain   ; ignore as at end of the string buffer 
1156				;ld a, b 
1156				;inc a 
1156				;ld (input_cursor), a 
1156 c3 31 10			jp .inmain 
1159			 
1159			 
1159			 
1159			input_disp_ref: 
1159				; display the text from start of buffer (ie full refresh) 
1159 3a 99 fd			ld a, (input_at_pos) 
115c 2a 9c fd			ld hl,(input_start) 
115f eb				ex de, hl 
1160 cd bd 0d			call str_at_display  
1163 c9				ret 
1164			input_disp_oncur: 
1164				; display the text from cursor position to end of buffer 
1164				; TODO position start of string at cursor position on screen 
1164				; TODO draw from that point on 
1164 3a 8a fd			ld a, (input_cursor) 
1167 47				ld b, a 
1168 3a 99 fd			ld a, (input_at_pos) 
116b 80				add b 
116c 48				ld c, b     ; save a 
116d 78				ld a, b     ; inc string start for cursor 
116e 2a 9c fd			ld hl,(input_start) 
1171 cd de 0f			call addatohl 
1174 eb				ex de, hl 
1175 79				ld a, c 
1176 cd bd 0d			call str_at_display  
1179 c9				ret 
117a			 
117a			input_nxtw: 
117a				; Find next word 
117a c9				ret 
117b			 
117b			input_prvw: 
117b				; Find previous word 
117b c9				ret 
117c			 
117c			input_lenrem:   
117c				; Calculate the length of string remaining from current cursor 
117c				; position to end of buffer (exc null term) 
117c				 
117c 3a 8a fd			ld a, (input_cursor) 
117f 4f				ld c, a 
1180 3a 9b fd			ld a, (input_size) 
1183 91				sub c 
1184 06 00			ld b, 0 
1186 0d				dec c 
1187 c9				ret	 
1188			 
1188			input_curptr: 
1188				; calc address of the character under the cursor 
1188				 
1188 2a 9c fd			ld hl, (input_start) 
118b 3a 8a fd			ld a, (input_cursor) 
118e cd de 0f			call addatohl 
1191 c9				ret 
1192			 
1192			input_inschr: 
1192				; Insert char at cursor position 
1192 f5				push af   ; save char 
1193				;call input_lenrem    ; get bc length of remaining string 
1193			 
1193				 
1193 cd 88 11			call input_curptr 
1196			;	ld hl, (input_start) 
1196			;	ld a, (input_cursor) 
1196			;	call addatohl 
1196				;push hl   ; save to come back to 
1196			 
1196				; shift everything up one to end of buffer 
1196			 
1196				;push hl 
1196				;dec de 
1196				;inc de 
1196			;	ldir 
1196				 
1196				;pop hl 
1196			 
1196				; are we adding to the end of line? 
1196			 
1196 3a 8a fd			ld a, (input_cursor) 
1199 47				ld b, a 
119a 3a 8f fd			ld a, (input_len) 
119d b8				cp b 
119e 20 09			jr nz, .insmid   ; no, insert in middle of text 
11a0			 
11a0				; tack on the end of the line 
11a0 f1				pop af 
11a1 77				ld (hl), a   ; save new char 
11a2 23				inc hl 
11a3 3e 00			ld a, 0 
11a5 77				ld (hl), a 
11a6 c3 52 11			jp input_right 
11a9				 
11a9			.insmid: 
11a9				; hl has insertion point so move everything up one to allow for insertion 
11a9				;call input_shiftright 
11a9 f1				pop af 
11aa			 
11aa			.shufinsmid: 
11aa 47				ld b, a     ; b contains new char, c prev char at this position  
11ab 7e				ld a, (hl) 
11ac			 
11ac fe 00			cp 0    ; at end of string need to then dump new char and add term 
11ae 28 07			jr z, .endinsmid 
11b0 4f				ld c, a 
11b1 78				ld a, b 
11b2 77				ld (hl), a 
11b3 23				inc hl 
11b4 79				ld a, c 
11b5 18 f3			jr .shufinsmid 
11b7				 
11b7			 
11b7			 
11b7			 
11b7			.endinsmid: 
11b7 78				ld a, b 
11b8 77				ld (hl), a 
11b9 23				inc hl 
11ba 3e 00			ld a, 0 
11bc 77				ld (hl), a 
11bd			 
11bd			 
11bd			;	ld (hl), a   ; save new char 
11bd			 
11bd c3 52 11			jp input_right 
11c0			 
11c0			;input_shiftright: 
11c0			;	; shift text right at cursor, hl has shift start 
11c0			;	push hl 
11c0			;	push de 
11c0			;	push bc 
11c0			; 
11c0			; 
11c0			;	; move to end of string past zero term 
11c0			;	ld hl,(input_start) 
11c0			;	ld a, (input_len) 
11c0			;	call addatohl 
11c0			;	inc hl 
11c0			;;	inc hl 
11c0			;;	inc hl 
11c0			;	ld a, 0 
11c0			;	ld (hl), a 
11c0			;;	dec hl 
11c0			;	 
11c0			;;	ld (hl), a 
11c0			;;	dec hl 
11c0			; 
11c0			;	push hl 
11c0			;	pop de 
11c0			;	inc de 
11c0			;	 
11c0			; 
11c0			;;	ld hl,(input_start) 
11c0			;;	ld a, (input_cursor) 
11c0			;;	call addatohl 
11c0			; 
11c0			; 
11c0			;	; calc how many bytes from cursor pos to end of string we need to shift 
11c0			;	call input_lenrem    ; get bc length of remaining string 
11c0			;	;ld a, (input_cursor) 
11c0			;	;ld c, a 
11c0			;	ld a, (input_len) 
11c0			;	cp 2 
11c0			;	jr z, .iskipzero	 
11c0			;	;sub c 
11c0			;	;inc a 
11c0			;	;ld c, a 
11c0			;	;ld b, 0 
11c0			;	inc c 
11c0			;	inc c 
11c0			;	; move data 
11c0			;	lddr 
11c0			;.iskipzero: 
11c0			; 
11c0			;	pop bc 
11c0			;	pop de 
11c0			;	pop hl 
11c0			;	ret	 
11c0			 
11c0			input_delchar: 
11c0				; Delete char at cursor position 
11c0 cd 7c 11			call input_lenrem    ; get bc length of remaining string 
11c3 2a 9c fd			ld hl, (input_start) 
11c6 3a 8a fd			ld a, (input_cursor) 
11c9 cd de 0f			call addatohl 
11cc			 
11cc e5				push hl 
11cd d1				pop de 
11ce 1b				dec de 
11cf			 
11cf			.dl:	 
11cf ed a0			ldi  
11d1 7e				ld a, (hl) 
11d2 fe 00			cp 0 
11d4 28 02			jr z, .dldone 
11d6 18 f7			jr .dl 
11d8			.dldone: 
11d8 ed a0			ldi 
11da			 
11da c3 4b 11			jp input_left 
11dd			 
11dd			 
11dd			endif 
11dd			 
11dd			 
11dd			 
11dd			if EDIT_V1 
11dd			input_str: 
11dd			 
11dd				    	ld (input_at_pos),a      ; save display position to start 
11dd					add c 
11dd					ld (input_at_cursor),a	; save draw pos of cursor 
11dd					ld (input_start), hl     ; save ptr to buffer 
11dd					ld a, c 
11dd					call addatohl 
11dd					ld (input_ptr), hl     ; save ptr to point under the cursor 
11dd					ld a,d 
11dd				        ld (input_size), a       ; save length of input area 
11dd					ld a, c 
11dd					ld (input_cursor),a      ; init cursor start position  
11dd					ld a,e 
11dd				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
11dd					 
11dd					 
11dd			 
11dd			;		ld a,(input_ptr) 
11dd			;		ld (input_under_cursor),a 	; save what is under the cursor 
11dd			 
11dd			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
11dd					; init cursor shape if not set by the cin routines 
11dd					ld hl, cursor_shape 
11dd			if BASE_KEV 
11dd					ld a, 255 
11dd			else 
11dd					ld a, '#' 
11dd			endif 
11dd					ld (hl), a 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl), a 
11dd			 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					ld a, 1 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'I' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd			.is1:		; main entry loop 
11dd			 
11dd			 
11dd			 
11dd					; pause 1ms 
11dd			 
11dd					ld a, 1 
11dd					call aDelayInMS 
11dd			 
11dd					; dec flash counter 
11dd					ld a, (input_cur_flash) 
11dd					dec a 
11dd					ld (input_cur_flash), a 
11dd					cp 0 
11dd					jr nz, .nochgstate 
11dd			 
11dd			 
11dd					; change state 
11dd					ld a,(input_cur_onoff) 
11dd					neg 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			 
11dd					; reset on change of state 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd			.nochgstate: 
11dd					 
11dd					 
11dd			 
11dd					; display cursor  
11dd			 
11dd			;		ld hl, (input_start) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			 
11dd					; get char under cursor and replace with cursor 
11dd			ld hl, (input_ptr) 
11dd			;		ld a, (hl) 
11dd			;		ld (input_under_cursor),a 
11dd			;		ld a, '_' 
11dd			;		ld (hl), a 
11dd			 
11dd					; display string 
11dd			 
11dd					ld de, (input_start) 
11dd					ld a, (input_at_pos) 
11dd					call str_at_display 
11dd			;	        call update_display 
11dd			 
11dd					; find place to put the cursor 
11dd			;		add h 
11dd			;		ld l, display_row_1 
11dd			;		sub l 
11dd			; (input_at_pos) 
11dd					;ld c, a 
11dd			;		ld a, (input_cursor) 
11dd			;		ld l, (input_at_pos) 
11dd			;		;ld b, h 
11dd			;		add l 
11dd			;		ld (input_at_cursor),a 
11dd					;ld l,h 
11dd			 
11dd			;		ld h, 0 
11dd			;		ld l,(input_at_pos) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
11dd			;		call subafromhl 
11dd			;		ld a,l 
11dd			;		ld (input_at_cursor), a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					ld a, (hardware_diag) 
11dd					cp 0 
11dd					jr z, .skip_input_diag 
11dd			 
11dd					ld a,(input_at_pos) 
11dd					ld hl, LFSRSeed 
11dd					call hexout 
11dd					ld a, (input_cursor) 
11dd					ld hl, LFSRSeed+2 
11dd					call hexout 
11dd					ld a,(input_at_cursor) 
11dd					ld hl, LFSRSeed+4 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_onoff) 
11dd					ld hl, LFSRSeed+6 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_flash) 
11dd					ld hl, LFSRSeed+8 
11dd					call hexout 
11dd			 
11dd					ld a,(input_len) 
11dd					ld hl, LFSRSeed+10 
11dd					call hexout 
11dd					ld hl, LFSRSeed+12 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd					ld a, display_row_4 
11dd					ld de, LFSRSeed 
11dd					call str_at_display 
11dd					.skip_input_diag: 
11dd				endif 
11dd			 
11dd					; decide on if we are showing the cursor this time round 
11dd			 
11dd					ld a, (input_cur_onoff) 
11dd					cp 255 
11dd					jr z, .skipcur 
11dd			 
11dd			 
11dd					ld a,(input_at_cursor) 
11dd					ld de, cursor_shape 
11dd					call str_at_display 
11dd			 
11dd					; save length of current input string 
11dd					ld hl, (input_start) 
11dd					ld a, 0 
11dd					call strlent 
11dd					ld a,l 
11dd					ld (input_len),a 
11dd			 
11dd			.skipcur: 
11dd			 
11dd				        call update_display 
11dd					 
11dd			 
11dd			 
11dd					; wait 
11dd				 
11dd					; TODO loop without wait to flash the cursor and char under cursor	 
11dd					call cin    ; _wait 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 
11dd			 
11dd					; get ptr to char to input into 
11dd			 
11dd					ld c,a 
11dd					ld hl, (input_start) 
11dd					ld a, (input_cursor) 
11dd					call addatohl 
11dd					ld (input_ptr), hl 
11dd					ld a,c 
11dd			 
11dd					; replace char under cursor 
11dd			 
11dd			;		ld hl, (input_ptr) 
11dd			;		ld a, (input_under_cursor) 	; get what is under the cursor 
11dd			;		ld (hl), a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'i' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					cp KEY_HOME 
11dd					jr nz, .iske 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor),a 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					jp .is1 
11dd					 
11dd			.iske:		cp KEY_END 
11dd					jr nz, .isknw 
11dd					jp .is1 
11dd			 
11dd			.isknw:		cp KEY_NEXTWORD 
11dd					jr nz, .iskpw 
11dd			 
11dd			.isknwm:	ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0 
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd					jr .isknwm 
11dd			 
11dd			.iskpw:		cp KEY_PREVWORD 
11dd					jr nz, .iskl 
11dd			.iskpwm:	 
11dd					ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0  
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd					jr .iskpwm 
11dd			 
11dd			 
11dd			.iskl:		cp KEY_LEFT 
11dd					jr nz, .isk1 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk1:		cp KEY_RIGHT 
11dd					jr nz, .isk2 
11dd			 
11dd					ld a,(input_len)		; TODO BUG why cant i load e direct? 
11dd					ld e,a 
11dd					ld a, (input_cursor) 
11dd					cp e 
11dd					jp z, .is1		; at the end of string so dont go right 
11dd			 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk2:		cp KEY_UP 
11dd			 
11dd					jr nz, .isk3 
11dd			 
11dd					; swap last command with the current on 
11dd			 
11dd					; move cursor to start of string 
11dd					ld hl, (input_start) 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					 
11dd					; swap input and last command buffers 
11dd			 
11dd					ld hl, os_cli_cmd 
11dd					ld de, os_last_cmd 
11dd					ld b, 255 
11dd			.swap1:		ld a, (hl) 
11dd					ld c,a 
11dd					ld a, (de) 
11dd					ld (hl), a 
11dd					ld a,c 
11dd					ld (de),a 
11dd					inc hl 
11dd					inc de 
11dd					djnz .swap1 
11dd			 
11dd			 
11dd			 
11dd			 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk3:		cp KEY_BS 
11dd					jr nz, .isk4 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					; hl is source 
11dd					; de needs to be source - 1 
11dd			 
11dd			;		ld a, 0 
11dd			;		dec hl 
11dd			;		ld (hl), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					; shift all data 
11dd			 
11dd					push hl 
11dd					inc hl 
11dd					pop de 
11dd					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
11dd					ld c,a 
11dd					ld b,0 
11dd					ldir  
11dd			 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					; remove char 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld de,.iblank 
11dd					call str_at_display 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk4:		cp KEY_CR 
11dd					jr z, .endinput 
11dd			 
11dd					; else add the key press to the end 
11dd			 
11dd					ld c, a			; save key pressed 
11dd			 
11dd					ld a,(hl)		; get what is currently under char 
11dd			 
11dd					cp 0			; we are at the end of the string 
11dd					jr nz, .onchar 
11dd					 
11dd					; add a char to the end of the string 
11dd				 
11dd					ld (hl),c 
11dd					inc hl 
11dd			;		ld a,' ' 
11dd			;		ld (hl),a 
11dd			;		inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					dec hl 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc a				; TODO check max string length and scroll  
11dd					ld (input_cursor), a		; inc cursor pos 
11dd							 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, '+' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					jp .is1 
11dd					 
11dd			 
11dd			 
11dd					; if on a char then insert 
11dd			.onchar: 
11dd			 
11dd					; TODO over flow check: make sure insert does not blow out buffer 
11dd			 
11dd					; need to do some maths to use lddr 
11dd			 
11dd					push hl   ; save char pos 
11dd					push bc 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a, (input_len) 
11dd					call addatohl  		; end of string 
11dd					inc hl 
11dd					inc hl		; past zero term 
11dd					push hl 
11dd					inc hl 
11dd					push hl  
11dd			 
11dd								; start and end of lddr set, now how much to move? 
11dd			 
11dd							 
11dd					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
11dd					ld b,a 
11dd					ld a,(input_len) 
11dd					ld e,a 
11dd					sub b 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd			 
11dd					ld b,0 
11dd					ld c,a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'i' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					pop de 
11dd					pop hl 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'I' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					lddr 
11dd				 
11dd			 
11dd			 
11dd					; TODO have a key for insert/overwrite mode???? 
11dd					pop bc 
11dd					pop hl 
11dd					ld (hl), c		; otherwise overwrite current char 
11dd					 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.endinput:	; TODO look for end of string 
11dd			 
11dd					; add trailing space for end of token 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a,(input_len) 
11dd					call addatohl 
11dd					ld a, ' ' 
11dd					ld (hl),a 
11dd					; TODO eof of parse marker 
11dd			 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					ret 
11dd			 
11dd			.iblank: db " ",0 
11dd			 
11dd			 
11dd			input_str_prev:	ld (input_at_pos), a 
11dd					ld (input_start), hl 
11dd					ld a,1			; add cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					ld (input_ptr), hl 
11dd					ld a,d 
11dd					ld (input_size), a 
11dd					ld a,0 
11dd					ld (input_cursor),a 
11dd			.instr1:	 
11dd			 
11dd					; TODO do block cursor 
11dd					; TODO switch cursor depending on the modifer key 
11dd			 
11dd					; update cursor shape change on key hold 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl), a 
11dd			 
11dd					; display entered text 
11dd					ld a,(input_at_pos) 
11dd			            	CALL fLCD_Pos       ;Position cursor to location in A 
11dd			            	LD   de, (input_start) 
11dd			            	CALL fLCD_Str       ;Display string pointed to by DE 
11dd			 
11dd					call cin 
11dd					cp 0 
11dd					jr z, .instr1 
11dd			 
11dd					; proecess keyboard controls first 
11dd			 
11dd					ld hl,(input_ptr) 
11dd			 
11dd					cp KEY_CR	 ; pressing enter ends input 
11dd					jr z, .instrcr 
11dd			 
11dd					cp KEY_BS 	; back space 
11dd					jr nz, .instr2 
11dd					; process back space 
11dd			 
11dd					; TODO stop back space if at start of string 
11dd					dec hl 
11dd					dec hl ; to over write cursor 
11dd					ld a,(cursor_shape) 
11dd					;ld a,0 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a," " 
11dd					ld (hl),a 
11dd					ld (input_ptr),hl 
11dd					 
11dd			 
11dd					jr .instr1 
11dd			 
11dd			.instr2:	cp KEY_LEFT    ; cursor left 
11dd					jr nz, .instr3 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd				 
11dd			.instr3:	cp KEY_RIGHT      ; cursor right 
11dd					jr nz, .instr4 
11dd					inc hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr4:	cp KEY_HOME    ; jump to start of line 
11dd					jr nz, .instr5 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr5:	cp KEY_END     ; jump to end of line 
11dd					jr nz, .instr6 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			.instr6:        cp KEY_UP      ; recall last command 
11dd					jr nz, .instrnew 
11dd			 
11dd				ld hl, scratch 
11dd				ld de, os_last_cmd 
11dd				call strcpy 
11dd					jr .instr1 
11dd			 
11dd			 
11dd			.instrnew:	; no special key pressed to see if we have room to store it 
11dd			 
11dd					; TODO do string size test 
11dd			 
11dd					dec hl ; to over write cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd					ld (input_ptr),hl 
11dd					 
11dd					jr .instr1 
11dd			.instrcr:	dec hl		; remove cursor 
11dd					ld a,' '	; TODO add a trailing space for safety 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					; if at end of line scroll up    
11dd					; TODO detecting only end of line 4 for scroll up  
11dd			 
11dd					;ld   
11dd			 
11dd					ret 
11dd			 
11dd			 
11dd			endif 
11dd			; strcpy hl = dest, de source 
11dd			 
11dd 1a			strcpy:   LD   A, (DE)        ;Get character from string 
11de b7			            OR   A              ;Null terminator? 
11df c8			            RET  Z              ;Yes, so finished 
11e0 1a					ld a,(de) 
11e1 77					ld (hl),a 
11e2 13			            INC  DE             ;Point to next character 
11e3 23					inc hl 
11e4 18 f7		            JR   strcpy       ;Repeat 
11e6 c9					ret 
11e7			 
11e7			 
11e7			; TODO string_at  
11e7			; pass string which starts with lcd offset address and then null term string 
11e7			 
11e7			; TODO string to dec 
11e7			; TODO string to hex 
11e7			; TODO byte to string hex 
11e7			; TODO byte to string dec 
11e7			 
11e7			 
11e7			 
11e7			; from z80uartmonitor 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
11e7			; pass hl for where to put the text 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7 c5			hexout:	PUSH BC 
11e8 f5					PUSH AF 
11e9 47					LD B, A 
11ea					; Upper nybble 
11ea cb 3f				SRL A 
11ec cb 3f				SRL A 
11ee cb 3f				SRL A 
11f0 cb 3f				SRL A 
11f2 cd 02 12				CALL tohex 
11f5 77					ld (hl),a 
11f6 23					inc hl	 
11f7					 
11f7					; Lower nybble 
11f7 78					LD A, B 
11f8 e6 0f				AND 0FH 
11fa cd 02 12				CALL tohex 
11fd 77					ld (hl),a 
11fe 23					inc hl	 
11ff					 
11ff f1					POP AF 
1200 c1					POP BC 
1201 c9					RET 
1202					 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			tohex: 
1202 e5					PUSH HL 
1203 d5					PUSH DE 
1204 16 00				LD D, 0 
1206 5f					LD E, A 
1207 21 0f 12				LD HL, .DATA 
120a 19					ADD HL, DE 
120b 7e					LD A, (HL) 
120c d1					POP DE 
120d e1					POP HL 
120e c9					RET 
120f			 
120f			.DATA: 
120f 30					DEFB	30h	; 0 
1210 31					DEFB	31h	; 1 
1211 32					DEFB	32h	; 2 
1212 33					DEFB	33h	; 3 
1213 34					DEFB	34h	; 4 
1214 35					DEFB	35h	; 5 
1215 36					DEFB	36h	; 6 
1216 37					DEFB	37h	; 7 
1217 38					DEFB	38h	; 8 
1218 39					DEFB	39h	; 9 
1219 41					DEFB	41h	; A 
121a 42					DEFB	42h	; B 
121b 43					DEFB	43h	; C 
121c 44					DEFB	44h	; D 
121d 45					DEFB	45h	; E 
121e 46					DEFB	46h	; F 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
121f			;;    subtract $30, if result > 9 then subtract $7 more 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			atohex: 
121f d6 30				SUB $30 
1221 fe 0a				CP 10 
1223 f8					RET M		; If result negative it was 0-9 so we're done 
1224 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
1226 c9					RET		 
1227			 
1227			 
1227			 
1227			 
1227			; Get 2 ASCII characters as hex byte from pointer in hl 
1227			 
1227			BYTERD: 
1227 16 00			LD	D,00h		;Set up 
1229 cd 31 12			CALL	HEXCON		;Get byte and convert to hex 
122c 87				ADD	A,A		;First nibble so 
122d 87				ADD	A,A		;multiply by 16 
122e 87				ADD	A,A		; 
122f 87				ADD	A,A		; 
1230 57				LD	D,A		;Save hi nibble in D 
1231			HEXCON: 
1231 7e				ld a, (hl)		;Get next chr 
1232 23				inc hl 
1233 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1235 fe 0a			CP	00Ah		;Is it 0-9 ? 
1237 38 02			JR	C,NALPHA	;If so miss next bit 
1239 d6 07			SUB	007h		;Else convert alpha 
123b			NALPHA: 
123b b2				OR	D		;Add hi nibble back 
123c c9				RET			; 
123d			 
123d			 
123d			; 
123d			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
123d			; Since the routines get_byte and therefore get_nibble are called, only valid 
123d			; characters (0-9a-f) are accepted. 
123d			; 
123d			;get_word        push    af 
123d			;                call    get_byte        ; Get the upper byte 
123d			;                ld      h, a 
123d			;                call    get_byte        ; Get the lower byte 
123d			;                ld      l, a 
123d			;                pop     af 
123d			;                ret 
123d			; 
123d			; Get a byte in hexadecimal notation. The result is returned in A. Since 
123d			; the routine get_nibble is used only valid characters are accepted - the  
123d			; input routine only accepts characters 0-9a-f. 
123d			; 
123d c5			get_byte:        push    bc              ; Save contents of B (and C) 
123e 7e					ld a,(hl) 
123f 23					inc hl 
1240 cd 65 12		                call    nibble2val      ; Get upper nibble 
1243 cb 07		                rlc     a 
1245 cb 07		                rlc     a 
1247 cb 07		                rlc     a 
1249 cb 07		                rlc     a 
124b 47			                ld      b, a            ; Save upper four bits 
124c 7e					ld a,(hl) 
124d cd 65 12		                call    nibble2val      ; Get lower nibble 
1250 b0			                or      b               ; Combine both nibbles 
1251 c1			                pop     bc              ; Restore B (and C) 
1252 c9			                ret 
1253			; 
1253			; Get a hexadecimal digit from the serial line. This routine blocks until 
1253			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1253			; to the serial line interface. The lower 4 bits of A contain the value of  
1253			; that particular digit. 
1253			; 
1253			;get_nibble      ld a,(hl)           ; Read a character 
1253			;                call    to_upper        ; Convert to upper case 
1253			;                call    is_hex          ; Was it a hex digit? 
1253			;                jr      nc, get_nibble  ; No, get another character 
1253			 ;               call    nibble2val      ; Convert nibble to value 
1253			 ;               call    print_nibble 
1253			 ;               ret 
1253			; 
1253			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1253			; A valid hexadecimal digit is denoted by a set C flag. 
1253			; 
1253			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1253			;                ret     nc              ; Yes 
1253			;                cp      '0'             ; Less than '0'? 
1253			;                jr      nc, is_hex_1    ; No, continue 
1253			;                ccf                     ; Complement carry (i.e. clear it) 
1253			;                ret 
1253			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1253			;                ret     c               ; Yes 
1253			;                cp      'A'             ; Less than 'A'? 
1253			;                jr      nc, is_hex_2    ; No, continue 
1253			;                ccf                     ; Yes - clear carry and return 
1253			;                ret 
1253			;is_hex_2        scf                     ; Set carry 
1253			;                ret 
1253			; 
1253			; Convert a single character contained in A to upper case: 
1253			; 
1253 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1255 d8			                ret     c 
1256 fe 7b		                cp      'z' + 1         ; > 'z'? 
1258 d0			                ret     nc              ; Nothing to do, either 
1259 e6 5f		                and     $5f             ; Convert to upper case 
125b c9			                ret 
125c			 
125c			 
125c			to_lower: 
125c			 
125c			   ; if char is in [A-Z] make it lower case 
125c			 
125c			   ; enter : a = char 
125c			   ; exit  : a = lower case char 
125c			   ; uses  : af 
125c			 
125c fe 41		   cp 'A' 
125e d8			   ret c 
125f			    
125f fe 5b		   cp 'Z'+1 
1261 d0			   ret nc 
1262			    
1262 f6 20		   or $20 
1264 c9			   ret 
1265			 
1265			; 
1265			; Expects a hexadecimal digit (upper case!) in A and returns the 
1265			; corresponding value in A. 
1265			; 
1265 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1267 38 02		                jr      c, nibble2val_1 ; Yes 
1269 d6 07		                sub     7               ; Adjust for A-F 
126b d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
126d e6 0f		                and     $f              ; Only return lower 4 bits 
126f c9			                ret 
1270			; 
1270			; Print_nibble prints a single hex nibble which is contained in the lower  
1270			; four bits of A: 
1270			; 
1270			;print_nibble    push    af              ; We won't destroy the contents of A 
1270			;                and     $f              ; Just in case... 
1270			;                add     a, '0'             ; If we have a digit we are done here. 
1270			;                cp      '9' + 1         ; Is the result > 9? 
1270			;                jr      c, print_nibble_1 
1270			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1270			;print_nibble_1  call    putc            ; Print the nibble and 
1270			;                pop     af              ; restore the original value of A 
1270			;                ret 
1270			;; 
1270			;; Send a CR/LF pair: 
1270			; 
1270			;crlf            push    af 
1270			;                ld      a, cr 
1270			;                call    putc 
1270			;                ld      a, lf 
1270			;                call    putc 
1270			;                pop     af 
1270			;                ret 
1270			; 
1270			; Print_word prints the four hex digits of a word to the serial line. The  
1270			; word is expected to be in HL. 
1270			; 
1270			;print_word      push    hl 
1270			;                push    af 
1270			;                ld      a, h 
1270			;                call    print_byte 
1270			;                ld      a, l 
1270			;                call    print_byte 
1270			;                pop     af 
1270			;                pop     hl 
1270			;                ret 
1270			; 
1270			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1270			; The byte to be printed is expected to be in A. 
1270			; 
1270			;print_byte      push    af              ; Save the contents of the registers 
1270			;                push    bc 
1270			;                ld      b, a 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                call    print_nibble    ; Print high nibble 
1270			;                ld      a, b 
1270			;                call    print_nibble    ; Print low nibble 
1270			;                pop     bc              ; Restore original register contents 
1270			;                pop     af 
1270			;                ret 
1270			 
1270			 
1270			 
1270			 
1270			 
1270			fourehexhl:  
1270 7e				ld a,(hl) 
1271 cd 1f 12			call atohex 
1274 cb 3f				SRL A 
1276 cb 3f				SRL A 
1278 cb 3f				SRL A 
127a cb 3f				SRL A 
127c 47				ld b, a 
127d 23				inc hl 
127e 7e				ld a,(hl) 
127f 23				inc hl 
1280 cd 1f 12			call atohex 
1283 80				add b 
1284 57				ld d,a 
1285 7e				ld a,(hl) 
1286 cd 1f 12			call atohex 
1289 cb 3f				SRL A 
128b cb 3f				SRL A 
128d cb 3f				SRL A 
128f cb 3f				SRL A 
1291 47				ld b, a 
1292 23				inc hl 
1293 7e				ld a,(hl) 
1294 23				inc hl 
1295 cd 1f 12			call atohex 
1298 80				add b 
1299 5f				ld e, a 
129a d5				push de 
129b e1				pop hl 
129c c9				ret 
129d			 
129d			; pass hl. returns z set if the byte at hl is a digit 
129d			;isdigithl:  
129d			;	push bc 
129d			;	ld a,(hl) 
129d			;	cp ':' 
129d			;	jr nc, .isdf 		; > 
129d			;	cp '0' 
129d			;	jr c, .isdf		; < 
129d			; 
129d			;	; TODO find a better way to set z 
129d			; 
129d			;	ld b,a 
129d			;	cp b 
129d			;	pop bc 
129d			;	ret 
129d			; 
129d			;.isdf:	; not digit so clear z 
129d			; 
129d			;	; TODO find a better way to unset z 
129d			; 
129d			;	ld b,a 
129d			;	inc b 
129d			;	cp b 
129d			; 
129d			;	pop bc 
129d			;	ret 
129d				 
129d				 
129d			 
129d			 
129d			; pass hl as the four byte address to load 
129d			 
129d			get_word_hl:  
129d e5				push hl 
129e cd 3d 12			call get_byte 
12a1				 
12a1 47				ld b, a 
12a2			 
12a2 e1				pop hl 
12a3 23				inc hl 
12a4 23				inc hl 
12a5			 
12a5			; TODO not able to handle a-f  
12a5 7e				ld a,(hl) 
12a6			;	;cp ':' 
12a6			;	cp 'g' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp 'G' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp '0' 
12a6			;	jr c, .single_byte_hl		; < 
12a6			 
12a6				;call isdigithl 
12a6 fe 00			cp 0 
12a8 28 06			jr z, .single_byte_hl 
12aa			 
12aa			.getwhln:   ; hex word so get next byte 
12aa			 
12aa cd 3d 12			call get_byte 
12ad 6f				ld l, a 
12ae 60				ld h,b 
12af c9				ret 
12b0 68			.single_byte_hl:   ld l,b 
12b1 26 00				ld h,0 
12b3 c9					ret 
12b4			 
12b4			 
12b4			 
12b4			 
12b4 21 21 1d			ld hl,asc+1 
12b7			;	ld a, (hl) 
12b7			;	call nibble2val 
12b7 cd 3d 12			call get_byte 
12ba			 
12ba			;	call fourehexhl 
12ba 32 2a f1			ld (scratch+52),a 
12bd				 
12bd 21 28 f1			ld hl,scratch+50 
12c0 22 19 f4			ld (os_cur_ptr),hl 
12c3			 
12c3 c9				ret 
12c4			 
12c4			 
12c4			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
12c4			 
12c4			; Decimal Unsigned Version 
12c4			 
12c4			;Number in a to decimal ASCII 
12c4			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
12c4			;Example: display a=56 as "056" 
12c4			;input: a = number 
12c4			;Output: a=0,value of a in the screen 
12c4			;destroys af,bc (don't know about hl and de) 
12c4			DispAToASCII: 
12c4 0e 9c			ld	c,-100 
12c6 cd d0 12			call	.Na1 
12c9 0e f6			ld	c,-10 
12cb cd d0 12			call	.Na1 
12ce 0e ff			ld	c,-1 
12d0 06 2f		.Na1:	ld	b,'0'-1 
12d2 04			.Na2:	inc	b 
12d3 81				add	a,c 
12d4 38 fc			jr	c,.Na2 
12d6 91				sub	c		;works as add 100/10/1 
12d7 f5				push af		;safer than ld c,a 
12d8 78				ld	a,b		;char is in b 
12d9			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
12d9 f1				pop af		;safer than ld a,c 
12da c9				ret 
12db			 
12db			; Decimal Signed Version 
12db			 
12db			; DispA 
12db			; -------------------------------------------------------------- 
12db			; Converts a signed integer value to a zero-terminated ASCII 
12db			; string representative of that value (using radix 10). 
12db			; -------------------------------------------------------------- 
12db			; INPUTS: 
12db			;     HL     Value to convert (two's complement integer). 
12db			;     DE     Base address of string destination. (pointer). 
12db			; -------------------------------------------------------------- 
12db			; OUTPUTS: 
12db			;     None 
12db			; -------------------------------------------------------------- 
12db			; REGISTERS/MEMORY DESTROYED 
12db			; AF HL 
12db			; -------------------------------------------------------------- 
12db			 
12db			;DispHLToASCII: 
12db			;   push    de 
12db			;   push    bc 
12db			; 
12db			;; Detect sign of HL. 
12db			;    bit    7, h 
12db			;    jr     z, ._DoConvert 
12db			; 
12db			;; HL is negative. Output '-' to string and negate HL. 
12db			;    ld     a, '-' 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			; 
12db			;; Negate HL (using two's complement) 
12db			;    xor    a 
12db			;    sub    l 
12db			;    ld     l, a 
12db			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
12db			;    sbc    a, h 
12db			;    ld     h, a 
12db			; 
12db			;; Convert HL to digit characters 
12db			;._DoConvert: 
12db			;    ld     b, 0     ; B will count character length of number 
12db			;-   ld     a, 10 
12db			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
12db			;    push   af 
12db			;    inc    b 
12db			;    ld     a, h 
12db			;    or     l 
12db			;    jr     nz, - 
12db			; 
12db			;; Retrieve digits from stack 
12db			;-   pop    af 
12db			;    or     $30 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			;    djnz   - 
12db			; 
12db			;; Terminate string with NULL 
12db			;    xor    a 
12db			;    ld     (de), a 
12db			; 
12db			;    pop    bc 
12db			;    pop    de 
12db			;    ret 
12db			 
12db			;Comments 
12db			; 
12db			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
12db			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
12db			;    Note that the output string will not be fixed-width. 
12db			; 
12db			;Example Usage 
12db			; 
12db			;    ld    hl, -1004 
12db			;    ld    de, OP1 
12db			;    call  DispA 
12db			;    ld    hl, OP1 
12db			;    syscall  PutS 
12db			 
12db			 
12db			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12db			 
12db			 
12db			;Converts an ASCII string to an unsigned 16-bit integer 
12db			;Quits when it reaches a non-decimal digit 
12db			 
12db			string_to_uint16: 
12db			atoui_16: 
12db			;Input: 
12db			;     DE points to the string 
12db			;Outputs: 
12db			;     HL is the result 
12db			;     A is the 8-bit value of the number 
12db			;     DE points to the byte after the number 
12db			;Destroys: 
12db			;     BC 
12db			;       if the string is non-empty, BC is HL/10 
12db			;Size:  24 bytes 
12db			;Speed: 42+d(104+{0,9}) 
12db			;       d is the number of digits in the number 
12db			;       max is 640 cycles for a 5 digit number 
12db			;Assuming no leading zeros: 
12db			;1 digit:  146cc 
12db			;2 digit:  250cc 
12db			;3 digit:  354cc or 363cc (avg: 354.126cc) 
12db			;4 digit:  458cc or 467cc (avg: 458.27cc) 
12db			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
12db			;avg: 544.81158447265625cc (544+13297/16384) 
12db			;=============================================================== 
12db 21 00 00		  ld hl,0 
12de			.u16a: 
12de 1a			  ld a,(de) 
12df d6 30		  sub 30h 
12e1 fe 0a		  cp 10 
12e3 d0			  ret nc 
12e4 13			  inc de 
12e5 44			  ld b,h 
12e6 4d			  ld c,l 
12e7 29			  add hl,hl 
12e8 29			  add hl,hl 
12e9 09			  add hl,bc 
12ea 29			  add hl,hl 
12eb 85			  add a,l 
12ec 6f			  ld l,a 
12ed 30 ef		  jr nc,.u16a 
12ef 24			  inc h 
12f0 c3 de 12		  jp .u16a 
12f3			 
12f3			 
12f3			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12f3			 
12f3			;written by Zeda 
12f3			;Converts a 16-bit unsigned integer to an ASCII string. 
12f3			 
12f3			uitoa_16: 
12f3			;Input: 
12f3			;   DE is the number to convert 
12f3			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
12f3			;Output: 
12f3			;   HL points to the null-terminated ASCII string 
12f3			;      NOTE: This isn't necessarily the same as the input HL. 
12f3 d5			  push de 
12f4 c5			  push bc 
12f5 f5			  push af 
12f6 eb			  ex de,hl 
12f7			 
12f7 01 f0 d8		  ld bc,-10000 
12fa 3e 2f		  ld a,'0'-1 
12fc 3c			  inc a 
12fd 09			  add hl,bc  
12fe 38 fc		   jr c,$-2 
1300 12			  ld (de),a 
1301 13			  inc de 
1302			 
1302 01 e8 03		  ld bc,1000 
1305 3e 3a		  ld a,'9'+1 
1307 3d			  dec a  
1308 09			  add hl,bc  
1309 30 fc		   jr nc,$-2 
130b 12			  ld (de),a 
130c 13			  inc de 
130d			 
130d 01 9c ff		  ld bc,-100 
1310 3e 2f		  ld a,'0'-1 
1312 3c			  inc a  
1313 09			  add hl,bc  
1314 38 fc		   jr c,$-2 
1316 12			  ld (de),a 
1317 13			  inc de 
1318			 
1318 7d			  ld a,l 
1319 26 3a		  ld h,'9'+1 
131b 25			  dec h  
131c c6 0a		  add a,10  
131e 30 fb		   jr nc,$-3 
1320 c6 30		  add a,'0' 
1322 eb			  ex de,hl 
1323 72			  ld (hl),d 
1324 23			  inc hl 
1325 77			  ld (hl),a 
1326 23			  inc hl 
1327 36 00		  ld (hl),0 
1329			 
1329			;Now strip the leading zeros 
1329 0e fa		  ld c,-6 
132b 09			  add hl,bc 
132c 3e 30		  ld a,'0' 
132e 23			  inc hl  
132f be			  cp (hl)  
1330 28 fc		  jr z,$-2 
1332			 
1332			;Make sure that the string is non-empty! 
1332 7e			  ld a,(hl) 
1333 b7			  or a 
1334 20 01		  jr nz,.atoub 
1336 2b			  dec hl 
1337			.atoub: 
1337			 
1337 f1			  pop af 
1338 c1			  pop bc 
1339 d1			  pop de 
133a c9			  ret 
133b			 
133b			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
133b			 
133b			toUpper: 
133b			;A is the char. 
133b			;If A is a lowercase letter, this sets it to the matching uppercase 
133b			;18cc or 30cc or 41cc 
133b			;avg: 26.75cc 
133b fe 61		  cp 'a' 
133d d8			  ret c 
133e fe 7b		  cp 'z'+1 
1340 d0			  ret nc 
1341 d6 20		  sub 'a'-'A' 
1343 c9			  ret 
1344			 
1344			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1344			 
1344			; String Length 
1344			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1344			 
1344			; Get the length of the null-terminated string starting at $8000 hl 
1344			;    LD     HL, $8000 
1344			 
1344			strlenz: 
1344			 
1344 af			    XOR    A               ; Zero is the value we are looking for. 
1345 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1346 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1347			                           ; 65, 536 bytes (the entire addressable memory space). 
1347 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1349			 
1349			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1349 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
134a 6f			    LD     L, A             ; number of bytes 
134b ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
134d 2b			    DEC    HL              ; Compensate for null. 
134e c9				ret 
134f			 
134f			; Get the length of the A terminated string starting at $8000 hl 
134f			;    LD     HL, $8000 
134f			 
134f			strlent: 
134f			 
134f			                  ; A is the value we are looking for. 
134f 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1351 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1353			                           ; 65, 536 bytes (the entire addressable memory space). 
1353 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1355			 
1355			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1355 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1357 2e 00		    LD     L, 0             ; number of bytes 
1359 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
135b 2b			    DEC    HL              ; Compensate for null. 
135c c9				ret 
135d			 
135d			 
135d			;Comparing Strings 
135d			 
135d			;IN    HL     Address of string1. 
135d			;      DE     Address of string2. 
135d			 
135d			; doc given but wrong??? 
135d			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
135d			;      carry  Set if string1 > string2, reset if string1 <= string2. 
135d			; tested 
135d			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
135d			 
135d			strcmp_old: 
135d e5			    PUSH   HL 
135e d5			    PUSH   DE 
135f			 
135f 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1360 be			    CP     (HL)            ; (want to minimize work). 
1361 38 01		    JR     C, Str1IsBigger 
1363 7e			    LD     A, (HL) 
1364			 
1364			Str1IsBigger: 
1364 4f			    LD     C, A             ; Put length in BC 
1365 06 00		    LD     B, 0 
1367 13			    INC    DE              ; Increment pointers to meat of string. 
1368 23			    INC    HL 
1369			 
1369			CmpLoop: 
1369 1a			    LD     A, (DE)          ; Compare bytes. 
136a ed a1		    CPI 
136c 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
136e 13			    INC    DE              ; Update pointer. 
136f ea 69 13		    JP     PE, CmpLoop 
1372			 
1372 d1			    POP    DE 
1373 e1			    POP    HL 
1374 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1375 be			    CP     (HL) 
1376 c9			    RET 
1377			 
1377			NoMatch: 
1377 2b			    DEC    HL 
1378 be			    CP     (HL)            ; Compare again to affect carry. 
1379 d1			    POP    DE 
137a e1			    POP    HL 
137b c9			    RET 
137c			 
137c			;; test strmp 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr z, .z1 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z1: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr z, .z2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr c, .c1 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c1: 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr c, .c2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;	NEXTW 
137c			;.str1:   db "string1",0 
137c			;.str2:   db "string2",0 
137c			 
137c			; only care about direct match or not 
137c			; hl and de strings 
137c			; zero set if the same 
137c			 
137c			strcmp: 
137c 1a				ld a, (de) 
137d be				cp (hl) 
137e 28 02			jr z, .ssame 
1380 b7				or a 
1381 c9				ret 
1382			 
1382			.ssame:  
1382 fe 00			cp 0 
1384 c8				ret z 
1385			 
1385 23				inc hl 
1386 13				inc de 
1387 18 f3			jr strcmp 
1389				 
1389				 
1389			 
1389			;Copyright (c) 2014, Luke Maurits 
1389			;All rights reserved. 
1389			; 
1389			;Redistribution and use in source and binary forms, with or without 
1389			;modification, are permitted provided that the following conditions are met: 
1389			; 
1389			;* Redistributions of source code must retain the above copyright notice, this 
1389			;  list of conditions and the following disclaimer. 
1389			; 
1389			;* Redistributions in binary form must reproduce the above copyright notice, 
1389			;  this list of conditions and the following disclaimer in the documentation 
1389			;  and/or other materials provided with the distribution. 
1389			; 
1389			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
1389			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
1389			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
1389			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
1389			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
1389			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
1389			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
1389			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
1389			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
1389			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
1389			 
1389			; https://github.com/lmaurits/lm512/blob/master/string.z80 
1389			 
1389			StrictStrCmp: 
1389				; Load next chars of each string 
1389 1a				ld a, (de) 
138a 47				ld b, a 
138b 7e				ld a, (hl) 
138c				; Compare 
138c b8				cp b 
138d				; Return non-zero if chars don't match 
138d c0				ret nz 
138e				; Check for end of both strings 
138e fe 00			cp "\0" 
1390				; Return if strings have ended 
1390 c8				ret z 
1391				; Otherwise, advance to next chars 
1391 23				inc hl 
1392 13				inc de 
1393 18 f4			jr StrictStrCmp 
1395			 
1395			;end 
1395			; eof 
1395			 
1395			 
1395			 
1395			 
1395			 
1395			 
# End of file firmware_strings.asm
1395			include "firmware_memory.asm"   ; malloc and free  
1395			 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			.mallocsize: db "Wants malloc >256",0 
1395			.mallocasize: db "MALLOC gives >256",0 
1395			.malloczero: db "MALLOC gives zero",0 
1395			 
1395			malloc_guard_zerolen: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395				ld de, 0 
1395			        call cmp16 
1395				jr nz, .lowalloz 
1395			 
1395				push hl 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .malloczero 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395				call bp_on 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395			.lowalloz: 
1395			 
1395			 
1395				pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_entry: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowalloc 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocsize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395				jr .lowdone 
1395			.lowalloc: 
1395			 
1395			 
1395				pop hl 
1395			.lowdone:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_exit: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowallocx 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocasize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395				pop de 
1395				pop hl 
1395			 
1395				CALLMONITOR 
1395				jr .lowdonex 
1395			.lowallocx: 
1395			 
1395				pop hl 
1395			.lowdonex:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			endif 
1395			 
1395			if MALLOC_2 
1395			; Z80 Malloc and Free Functions 
1395			 
1395			; Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc: 
1395				 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_entry 
1395			endif 
1395			 
1395			 
1395			 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "mal" 
1395						CALLMONITOR 
1395					endif 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of size into A 
1395			    or h               ; Check if size is zero 
1395			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1395			 
1395			    ; Allocate memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma1" 
1395						CALLMONITOR 
1395					endif 
1395			    call malloc_internal ; Call internal malloc function 
1395			    pop af             ; Restore AF register 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret                ; Return 
1395			 
1395			; Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free: 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of pointer into A 
1395			    or h               ; Check if pointer is NULL 
1395			    jp z, free_exit    ; If pointer is NULL, exit 
1395			 
1395			    ; Free memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395			    call free_internal  ; Call internal free function 
1395			    pop af             ; Restore AF register 
1395			    ret                ; Return 
1395			 
1395			; Internal Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc_internal: 
1395			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to requested size 
1395			    ex de, hl          ; Save total size in DE, and keep it in HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			 
1395			    ; Search for free memory block 
1395			    ld de, (heap_end)  ; Load end of heap into DE 
1395			    ld bc, 0           ; Initialize counter 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			malloc_search_loop: 
1395			    ; Check if current block is free 
1395			    ld a, (hl)         ; Load current block's status (free or used) 
1395			    cp 0               ; Compare with zero (free) 
1395			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1395			 
1395			    ; Check if current block is large enough 
1395			    ld a, (hl+1)       ; Load high byte of block size 
1395			    cp l               ; Compare with low byte of requested size 
1395			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1395			 
1395			    ld a, (hl+2)       ; Load low byte of block size 
1395			    cp h               ; Compare with high byte of requested size 
1395			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1395			 
1395			    ; Mark block as used 
1395			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1395			 
1395			    ; Calculate remaining space in block 
1395			    ld bc, 0           ; Clear BC 
1395			    add hl, bc         ; Increment HL to point to start of data block 
1395			    add hl, de         ; HL = HL + DE (total size) 
1395			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to start of data block 
1395			 
1395			    ; Save pointer to allocated block in HL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma5" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			malloc_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3           ; Size of management overhead 
1395			    add hl, bc         ; Move to the next block 
1395			    inc de             ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e            ; Load low byte of heap end address 
1395			    cp (hl)            ; Compare with low byte of current address 
1395			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1395			    ld a, d            ; Load high byte of heap end address 
1395			    cp 0               ; Check if it's zero (end of memory) 
1395			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, allocation failed 
1395			    xor a              ; Set result to NULL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma6" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			malloc_exit: 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma7" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			; Internal Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free_internal: 
1395			    ld de, (heap_start) ; Load start of heap into DE 
1395			    ld bc, 0            ; Initialize counter 
1395			 
1395			free_search_loop: 
1395			    ; Check if current block contains the pointer 
1395			    ld a, l             ; Load low byte of pointer 
1395			    cp (hl+1)           ; Compare with high byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			    ld a, h             ; Load high byte of pointer 
1395			    cp (hl+2)           ; Compare with low byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			 
1395			    ; Mark block as free 
1395			    ld (hl), 0          ; Set status byte to indicate free block 
1395			    ret                 ; Return 
1395			 
1395			free_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3            ; Size of management overhead 
1395			    add hl, bc          ; Move to the next block 
1395			    inc de              ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e             ; Load low byte of heap end address 
1395			    cp (hl)             ; Compare with low byte of current address 
1395			    jr nz, free_search_loop  ; If not equal, continue searching 
1395			    ld a, d             ; Load high byte of heap end address 
1395			    cp 0                ; Check if it's zero (end of memory) 
1395			    jr nz, free_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, pointer is not found in heap 
1395			    ret 
1395			 
1395			free_exit: 
1395			    ret                 ; Return 
1395			 
1395			; Define heap start and end addresses 
1395			;heap_start:    .dw 0xC000   ; Start of heap 
1395			;heap_end:      .dw 0xE000   ; End of heap 
1395			 
1395			endif 
1395			 
1395			 
1395			if MALLOC_1 
1395			 
1395			 
1395			 
1395			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1395			 
1395			;moved to firmware.asm 
1395			;heap_start        .equ  0x9000      ; Starting address of heap 
1395			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1395			 
1395			;      .org 0 
1395			;      jp    main 
1395			 
1395			 
1395			;      .org  0x100 
1395			;main: 
1395			;      ld    HL, 0x8100 
1395			;      ld    SP, HL 
1395			; 
1395			;      call  heap_init 
1395			; 
1395			;      ; Make some allocations 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9004 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9014 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9024 
1395			; 
1395			;      ; Free some allocations 
1395			;      ld    HL, 0x9014 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9004 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9024 
1395			;      call  free 
1395			; 
1395			; 
1395			;      halt 
1395			 
1395			 
1395			;------------------------------------------------------------------------------ 
1395			;     heap_init                                                               : 
1395			;                                                                             : 
1395			; Description                                                                 : 
1395			;     Initialise the heap and make it ready for malloc and free operations.   : 
1395			;                                                                             : 
1395			;     The heap is maintained as a linked list, starting with an initial       : 
1395			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1395			;     the first free block in the heap. Each block then points to the next    : 
1395			;     free block within the heap, and the free list ends at the first block   : 
1395			;     with a null pointer to the next free block.                             : 
1395			;                                                                             : 
1395			; Parameters                                                                  : 
1395			;     Inputs are compile-time only. Two defines which specify the starting    : 
1395			;     address of the heap and its size are required, along with a memory      : 
1395			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1395			;     principally stores a pointer to the first free block in the heap.       : 
1395			;                                                                             : 
1395			; Returns                                                                     : 
1395			;     Nothing                                                                 : 
1395			;------------------------------------------------------------------------------ 
1395			heap_init: 
1395 e5			      push  HL 
1396			 
1396			      ; Initialise free list struct 
1396 21 0e 80		      ld    HL, heap_start 
1399 22 0a 80		      ld    (free_list), HL 
139c 21 00 00		      ld    HL, 0 
139f 22 0c 80		      ld    (free_list+2), HL 
13a2			 
13a2			      ; Insert first free block at bottom of heap, consumes entire heap 
13a2 21 cd f0		      ld    HL, heap_start+heap_size-4 
13a5 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
13a8 21 bf 70		      ld    HL, heap_size-4 
13ab 22 10 80		      ld    (heap_start+2), HL      ; Block size 
13ae			 
13ae			      ; Insert end of free list block at top of heap - two null words will 
13ae			      ; terminate the free list 
13ae 21 00 00		      ld    HL, 0 
13b1 22 cf f0		      ld    (heap_start+heap_size-2), HL 
13b4 22 cd f0		      ld    (heap_start+heap_size-4), HL 
13b7			 
13b7 e1			      pop   HL 
13b8			 
13b8 c9			      ret 
13b9			 
13b9			 
13b9			;------------------------------------------------------------------------------ 
13b9			;     malloc                                                                  : 
13b9			;                                                                             : 
13b9			; Description                                                                 : 
13b9			;     Allocates the wanted space from the heap and returns the address of the : 
13b9			;     first useable byte of the allocation.                                   : 
13b9			;                                                                             : 
13b9			;     Allocations can happen in one of two ways:                              : 
13b9			;                                                                             : 
13b9			;     1. A free block may be found which is the exact size wanted. In this    : 
13b9			;        case the block is removed from the free list and retuedn to the      : 
13b9			;        caller.                                                              : 
13b9			;     2. A free block may be found which is larger than the size wanted. In   : 
13b9			;        this case, the larger block is split into two. The first portion of  : 
13b9			;        this block will become the requested space by the malloc call and    : 
13b9			;        is returned to the caller. The second portion becomes a new free     : 
13b9			;        block, and the free list is adjusted to maintain continuity via this : 
13b9			;        newly created block.                                                 : 
13b9			;                                                                             : 
13b9			;     malloc does not set any initial value in the allocated space, the       : 
13b9			;     caller is required to do this as required.                              : 
13b9			;                                                                             : 
13b9			;     This implementation of malloc uses the stack exclusively, and is        : 
13b9			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
13b9			;     advisable to disable interrupts before calling malloc, and recommended  : 
13b9			;     to avoid the use of malloc inside ISRs in general.                      : 
13b9			;                                                                             : 
13b9			;     NOTE: heap_init must be called before malloc and free can be used.      : 
13b9			;                                                                             : 
13b9			; Parameters                                                                  : 
13b9			;     HL  Number of bytes wanted                                              : 
13b9			;                                                                             : 
13b9			; Returns                                                                     : 
13b9			;     HL  Address of the first useable byte of the allocation                 : 
13b9			;                                                                             : 
13b9			; Flags                                                                       : 
13b9			;     Z   Set if the allocation did not succeed, clear otherwise              : 
13b9			;                                                                             : 
13b9			; Stack frame                                                                 : 
13b9			;       |             |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     BC      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     DE      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     IX      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |  prev_free  |                                                       : 
13b9			;   +4  +-------------+                                                       : 
13b9			;       |  this_free  |                                                       : 
13b9			;   +2  +-------------+                                                       : 
13b9			;       |  next_free  |                                                       : 
13b9			;   +0  +-------------+                                                       : 
13b9			;       |             |                                                       : 
13b9			;                                                                             : 
13b9			;------------------------------------------------------------------------------ 
13b9			 
13b9			 
13b9			;malloc: 
13b9			; 
13b9			;	SAVESP ON 1 
13b9			; 
13b9			;	call malloc_code 
13b9			; 
13b9			;	CHECKSP ON 1 
13b9			;	ret 
13b9			 
13b9			 
13b9			malloc: 
13b9 c5			      push  BC 
13ba d5			      push  DE 
13bb dd e5		      push  IX 
13bd			if DEBUG_FORTH_MALLOC_HIGH 
13bd			call malloc_guard_entry 
13bd			endif 
13bd			 
13bd					if DEBUG_FORTH_MALLOC 
13bd						DMARK "mal" 
13bd						CALLMONITOR 
13bd					endif 
13bd 7c			      ld    A, H                    ; Exit if no space requested 
13be b5			      or    L 
13bf ca 7e 14		      jp    Z, malloc_early_exit 
13c2			 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			; 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			 
13c2			 
13c2			 
13c2			 
13c2					if DEBUG_FORTH_MALLOC 
13c2						DMARK "maA" 
13c2						CALLMONITOR 
13c2					endif 
13c2			      ; Set up stack frame 
13c2 eb			      ex    DE, HL 
13c3 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
13c6 39			      add   HL, SP 
13c7 f9			      ld    SP, HL 
13c8 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
13cc dd 39		      add   IX, SP 
13ce			 
13ce			      ; Setup initial state 
13ce 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
13d1 19			      add   HL, DE 
13d2			 
13d2 44			      ld    B, H                    ; Move want to BC 
13d3 4d			      ld    C, L 
13d4			 
13d4 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
13d7 dd 75 04		      ld    (IX+4), L 
13da dd 74 05		      ld    (IX+5), H 
13dd			 
13dd 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
13de 23			      inc   HL 
13df 56			      ld    D, (HL) 
13e0 dd 73 02		      ld    (IX+2), E 
13e3 dd 72 03		      ld    (IX+3), D 
13e6 eb			      ex    DE, HL                  ; this_free ptr into HL 
13e7			 
13e7					if DEBUG_FORTH_MALLOC 
13e7						DMARK "maB" 
13e7						CALLMONITOR 
13e7					endif 
13e7			      ; Loop through free block list to find some space 
13e7			malloc_find_space: 
13e7 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
13e8 23			      inc   HL 
13e9 56			      ld    D, (HL) 
13ea			 
13ea 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
13eb b3			      or    E 
13ec ca 78 14		      jp    Z, malloc_no_space 
13ef			 
13ef dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
13f2 dd 72 01		      ld    (IX+1), D 
13f5			 
13f5			      ; Does this block have enough space to make the allocation? 
13f5 23			      inc   HL                      ; Load free block size into DE 
13f6 5e			      ld    E, (HL) 
13f7 23			      inc   HL 
13f8 56			      ld    D, (HL) 
13f9			 
13f9 eb			      ex    DE, HL                  ; Check size of block against want 
13fa b7			      or    A                       ; Ensure carry flag clear 
13fb ed 42		      sbc   HL, BC 
13fd e5			      push  HL                      ; Store the result for later (new block size) 
13fe			 
13fe ca 4d 14		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1401 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1403			 
1403			      ; this_free block is not big enough, setup ptrs to test next free block 
1403 e1			      pop   HL                      ; Discard previous result 
1404			 
1404 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1407 dd 66 03		      ld    H, (IX+3) 
140a dd 75 04		      ld    (IX+4), L 
140d dd 74 05		      ld    (IX+5), H 
1410			 
1410 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1413 dd 66 01		      ld    H, (IX+1) 
1416 dd 75 02		      ld    (IX+2), L 
1419 dd 74 03		      ld    (IX+3), H 
141c			 
141c					if DEBUG_FORTH_MALLOC 
141c						DMARK "MA>" 
141c						CALLMONITOR 
141c					endif 
141c 18 c9		      jr    malloc_find_space 
141e			 
141e			      ; split a bigger block into two - requested size and remaining size 
141e			malloc_alloc_split: 
141e					if DEBUG_FORTH_MALLOC 
141e						DMARK "MAs" 
141e						CALLMONITOR 
141e					endif 
141e eb			      ex    DE, HL                  ; Calculate address of new free block 
141f 2b			      dec   HL 
1420 2b			      dec   HL 
1421 2b			      dec   HL 
1422 09			      add   HL, BC 
1423			 
1423			      ; Create a new block and point it at next_free 
1423 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
1426 dd 56 01		      ld    D, (IX+1) 
1429			 
1429 73			      ld    (HL), E                 ; Store next_free ptr into new block 
142a 23			      inc   HL 
142b 72			      ld    (HL), D 
142c			 
142c d1			      pop   DE                      ; Store size of new block into new block 
142d 23			      inc   HL 
142e 73			      ld    (HL), E 
142f 23			      inc   HL 
1430 72			      ld    (HL), D 
1431			 
1431			      ; Update this_free ptr to point to new block 
1431 2b			      dec   HL 
1432 2b			      dec   HL 
1433 2b			      dec   HL 
1434			 
1434 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1437 dd 56 03		      ld    D, (IX+3) 
143a			 
143a dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
143d dd 74 03		      ld    (IX+3), H 
1440			 
1440			      ; Modify this_free block to be allocation 
1440 eb			      ex    DE, HL 
1441 af			      xor   A                       ; Null the next block ptr of allocated block 
1442 77			      ld    (HL), A 
1443 23			      inc   HL 
1444 77			      ld    (HL), A 
1445			 
1445 23			      inc   HL                      ; Store want size into allocated block 
1446 71			      ld    (HL), C 
1447 23			      inc   HL 
1448 70			      ld    (HL), B 
1449 23			      inc   HL 
144a e5			      push  HL                      ; Address of allocation to return 
144b			 
144b 18 19		      jr    malloc_update_links 
144d			 
144d			malloc_alloc_fit: 
144d e1			      pop   HL                      ; Dont need new block size, want is exact fit 
144e			 
144e					if DEBUG_FORTH_MALLOC 
144e						DMARK "MAf" 
144e						CALLMONITOR 
144e					endif 
144e			      ; Modify this_free block to be allocation 
144e eb			      ex    DE, HL 
144f 2b			      dec   HL 
1450 2b			      dec   HL 
1451 2b			      dec   HL 
1452			 
1452 af			      xor   A                       ; Null the next block ptr of allocated block 
1453 77			      ld    (HL), A 
1454 23			      inc   HL 
1455 77			      ld    (HL), A 
1456			 
1456 23			      inc   HL                      ; Store address of allocation to return 
1457 23			      inc   HL 
1458 23			      inc   HL 
1459 e5			      push  HL 
145a			 
145a			      ; Copy next_free ptr to this_free, remove allocated block from free list 
145a dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
145d dd 66 01		      ld    H, (IX+1) 
1460			 
1460 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1463 dd 74 03		      ld    (IX+3), H 
1466			 
1466			 
1466			malloc_update_links: 
1466			      ; Update prev_free ptr to point to this_free 
1466 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1469 dd 66 05		      ld    H, (IX+5) 
146c			 
146c dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
146f dd 56 03		      ld    D, (IX+3) 
1472			 
1472 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1473 23			      inc   HL 
1474 72			      ld    (HL), D 
1475			 
1475					if DEBUG_FORTH_MALLOC 
1475						DMARK "Mul" 
1475						CALLMONITOR 
1475					endif 
1475			      ; Clear the Z flag to indicate successful allocation 
1475 7a			      ld    A, D 
1476 b3			      or    E 
1477			 
1477 d1			      pop   DE                      ; Address of allocation 
1478					if DEBUG_FORTH_MALLOC 
1478						DMARK "MAu" 
1478						CALLMONITOR 
1478					endif 
1478			 
1478			malloc_no_space: 
1478 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
147b 39			      add   HL, SP 
147c f9			      ld    SP, HL 
147d			 
147d eb			      ex    DE, HL                  ; Alloc addr into HL for return 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAN" 
147e						CALLMONITOR 
147e					endif 
147e			 
147e			malloc_early_exit: 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAx" 
147e						CALLMONITOR 
147e					endif 
147e dd e1		      pop   IX 
1480 d1			      pop   DE 
1481 c1			      pop   BC 
1482			 
1482			if DEBUG_FORTH_MALLOC_HIGH 
1482			call malloc_guard_exit 
1482			call malloc_guard_zerolen 
1482			endif 
1482 c9			      ret 
1483			 
1483			 
1483			;------------------------------------------------------------------------------ 
1483			;     free                                                                    : 
1483			;                                                                             : 
1483			; Description                                                                 : 
1483			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1483			;     returned by malloc, otherwise the behaviour is undefined.               : 
1483			;                                                                             : 
1483			;     Where possible, directly adjacent free blocks will be merged together   : 
1483			;     into larger blocks to help ensure that the heap does not become         : 
1483			;     excessively fragmented.                                                 : 
1483			;                                                                             : 
1483			;     free does not clear or set any other value into the freed space, and    : 
1483			;     therefore its contents may be visible through subsequent malloc's. The  : 
1483			;     caller should clear the freed space as required.                        : 
1483			;                                                                             : 
1483			;     This implementation of free uses the stack exclusively, and is          : 
1483			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1483			;     advisable to disable interrupts before calling free, and recommended    : 
1483			;     to avoid the use of free inside ISRs in general.                        : 
1483			;                                                                             : 
1483			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1483			;                                                                             : 
1483			; Parameters                                                                  : 
1483			;     HL  Pointer to address of first byte of allocation to be freed          : 
1483			;                                                                             : 
1483			; Returns                                                                     : 
1483			;     Nothing                                                                 : 
1483			;                                                                             : 
1483			; Stack frame                                                                 : 
1483			;       |             |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     BC      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     DE      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     IX      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |  prev_free  |                                                       : 
1483			;   +2  +-------------+                                                       : 
1483			;       |  next_free  |                                                       : 
1483			;   +0  +-------------+                                                       : 
1483			;       |             |                                                       : 
1483			;                                                                             : 
1483			;------------------------------------------------------------------------------ 
1483			free: 
1483 c5			      push  BC 
1484 d5			      push  DE 
1485 dd e5		      push  IX 
1487			 
1487 7c			      ld    A, H                    ; Exit if ptr is null 
1488 b5			      or    L 
1489 ca 4d 15		      jp    Z, free_early_exit 
148c			 
148c			      ; Set up stack frame 
148c eb			      ex    DE, HL 
148d 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1490 39			      add   HL, SP 
1491 f9			      ld    SP, HL 
1492 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1496 dd 39		      add   IX, SP 
1498			 
1498			      ; The address in HL points to the start of the useable allocated space, 
1498			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1498			      ; address of the block itself. 
1498 eb			      ex    DE, HL 
1499 11 fc ff		      ld    DE, -4 
149c 19			      add   HL, DE 
149d			 
149d			      ; An allocated block must have a null next block pointer in it 
149d 7e			      ld    A, (HL) 
149e 23			      inc   HL 
149f b6			      or    (HL) 
14a0 c2 48 15		      jp    NZ, free_done 
14a3			 
14a3 2b			      dec   HL 
14a4			 
14a4 44			      ld    B, H                    ; Copy HL to BC 
14a5 4d			      ld    C, L 
14a6			 
14a6			      ; Loop through the free list to find the first block with an address 
14a6			      ; higher than the block being freed 
14a6 21 0a 80		      ld    HL, free_list 
14a9			 
14a9			free_find_higher_block: 
14a9 5e			      ld    E, (HL)                 ; Load next ptr from free block 
14aa 23			      inc   HL 
14ab 56			      ld    D, (HL) 
14ac 2b			      dec   HL 
14ad			 
14ad dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
14b0 dd 72 01		      ld    (IX+1), D 
14b3 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
14b6 dd 74 03		      ld    (IX+3), H 
14b9			 
14b9 78			      ld    A, B                    ; Check if DE is greater than BC 
14ba ba			      cp    D                       ; Compare MSB first 
14bb 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
14bd 30 04		      jr    NC, free_find_higher_block_skip 
14bf 79			      ld    A, C 
14c0 bb			      cp    E                       ; Then compare LSB 
14c1 38 08		      jr    C, free_found_higher_block 
14c3			 
14c3			free_find_higher_block_skip: 
14c3 7a			      ld    A, D                    ; Reached the end of the free list? 
14c4 b3			      or    E 
14c5 ca 48 15		      jp    Z, free_done 
14c8			 
14c8 eb			      ex    DE, HL 
14c9			 
14c9 18 de		      jr    free_find_higher_block 
14cb			 
14cb			free_found_higher_block: 
14cb			      ; Insert freed block between prev and next free blocks 
14cb 71			      ld    (HL), C                 ; Point prev free block to freed block 
14cc 23			      inc   HL 
14cd 70			      ld    (HL), B 
14ce			 
14ce 60			      ld    H, B                    ; Point freed block at next free block 
14cf 69			      ld    L, C 
14d0 73			      ld    (HL), E 
14d1 23			      inc   HL 
14d2 72			      ld    (HL), D 
14d3			 
14d3			      ; Check if the freed block is adjacent to the next free block 
14d3 23			      inc   HL                      ; Load size of freed block into HL 
14d4 5e			      ld    E, (HL) 
14d5 23			      inc   HL 
14d6 56			      ld    D, (HL) 
14d7 eb			      ex    DE, HL 
14d8			 
14d8 09			      add   HL, BC                  ; Add addr of freed block and its size 
14d9			 
14d9 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
14dc dd 56 01		      ld    D, (IX+1) 
14df			 
14df b7			      or    A                       ; Clear the carry flag 
14e0 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
14e2 20 22		      jr    NZ, free_check_adjacent_to_prev 
14e4			 
14e4			      ; Freed block is adjacent to next, merge into one bigger block 
14e4 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
14e5 5e			      ld    E, (HL) 
14e6 23			      inc   HL 
14e7 56			      ld    D, (HL) 
14e8 e5			      push  HL                      ; Save ptr to next block for later 
14e9			 
14e9 60			      ld    H, B                    ; Store ptr from next block into freed block 
14ea 69			      ld    L, C 
14eb 73			      ld    (HL), E 
14ec 23			      inc   HL 
14ed 72			      ld    (HL), D 
14ee			 
14ee e1			      pop   HL                      ; Restore ptr to next block 
14ef 23			      inc   HL                      ; Load size of next block into DE 
14f0 5e			      ld    E, (HL) 
14f1 23			      inc   HL 
14f2 56			      ld    D, (HL) 
14f3 d5			      push  DE                      ; Save next block size for later 
14f4			 
14f4 60			      ld    H, B                    ; Load size of freed block into HL 
14f5 69			      ld    L, C 
14f6 23			      inc   HL 
14f7 23			      inc   HL 
14f8 5e			      ld    E, (HL) 
14f9 23			      inc   HL 
14fa 56			      ld    D, (HL) 
14fb eb			      ex    DE, HL 
14fc			 
14fc d1			      pop   DE                      ; Restore size of next block 
14fd 19			      add   HL, DE                  ; Add sizes of both blocks 
14fe eb			      ex    DE, HL 
14ff			 
14ff 60			      ld    H, B                    ; Store new bigger size into freed block 
1500 69			      ld    L, C 
1501 23			      inc   HL 
1502 23			      inc   HL 
1503 73			      ld    (HL), E 
1504 23			      inc   HL 
1505 72			      ld    (HL), D 
1506			 
1506			free_check_adjacent_to_prev: 
1506			      ; Check if the freed block is adjacent to the prev free block 
1506 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1509 dd 66 03		      ld    H, (IX+3) 
150c			 
150c 23			      inc   HL                      ; Size of prev free block into DE 
150d 23			      inc   HL 
150e 5e			      ld    E, (HL) 
150f 23			      inc   HL 
1510 56			      ld    D, (HL) 
1511 2b			      dec   HL 
1512 2b			      dec   HL 
1513 2b			      dec   HL 
1514			 
1514 19			      add   HL, DE                  ; Add prev block addr and size 
1515			 
1515 b7			      or    A                       ; Clear the carry flag 
1516 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1518 20 2e		      jr    NZ, free_done 
151a			 
151a			      ; Freed block is adjacent to prev, merge into one bigger block 
151a 60			      ld    H, B                    ; Load next ptr from freed block into DE 
151b 69			      ld    L, C 
151c 5e			      ld    E, (HL) 
151d 23			      inc   HL 
151e 56			      ld    D, (HL) 
151f e5			      push  HL                      ; Save freed block ptr for later 
1520			 
1520 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1523 dd 66 03		      ld    H, (IX+3) 
1526 73			      ld    (HL), E 
1527 23			      inc   HL 
1528 72			      ld    (HL), D 
1529			 
1529 e1			      pop   HL                      ; Restore freed block ptr 
152a 23			      inc   HL                      ; Load size of freed block into DE 
152b 5e			      ld    E, (HL) 
152c 23			      inc   HL 
152d 56			      ld    D, (HL) 
152e d5			      push  DE                      ; Save freed block size for later 
152f			 
152f dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1532 dd 66 03		      ld    H, (IX+3) 
1535 23			      inc   HL 
1536 23			      inc   HL 
1537 5e			      ld    E, (HL) 
1538 23			      inc   HL 
1539 56			      ld    D, (HL) 
153a			 
153a e1			      pop   HL                      ; Add sizes of both blocks 
153b 19			      add   HL, DE 
153c eb			      ex    DE, HL 
153d			 
153d dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1540 dd 66 03		      ld    H, (IX+3) 
1543 23			      inc   HL 
1544 23			      inc   HL 
1545 73			      ld    (HL), E 
1546 23			      inc   HL 
1547 72			      ld    (HL), D 
1548			 
1548			free_done: 
1548 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
154b 39			      add   HL, SP 
154c f9			      ld    SP, HL 
154d			 
154d			free_early_exit: 
154d dd e1		      pop   IX 
154f d1			      pop   DE 
1550 c1			      pop   BC 
1551			 
1551 c9			      ret 
1552			 
1552			; moved to firmware.asm 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			;                  .dw   0 
1552			 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_3 
1552			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1552			;heap_start        .equ  0x9000      ; Starting address of heap 
1552			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1552			; 
1552			 ;     .org 0 
1552			  ;    jp    main 
1552			; 
1552			; 
1552			 ;     .org  0x100 
1552			;main: 
1552			 ;     ld    HL, 0x8100 
1552			  ;    ld    SP, HL 
1552			; 
1552			;      call  heap_init 
1552			 
1552			      ; Make some allocations 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9004 
1552			; 
1552			 ;     ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9014 
1552			 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9024 
1552			 
1552			      ; Free some allocations 
1552			;      ld    HL, 0x9014 
1552			;      call  free 
1552			 
1552			;      ld    HL, 0x9004 
1552			;      call  free 
1552			; 
1552			;      ld    HL, 0x9024 
1552			;      call  free 
1552			 
1552			 
1552			 ;     halt 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     heap_init                                                               : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Initialise the heap and make it ready for malloc and free operations.   : 
1552			;                                                                             : 
1552			;     The heap is maintained as a linked list, starting with an initial       : 
1552			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1552			;     the first free block in the heap. Each block then points to the next    : 
1552			;     free block within the heap, and the free list ends at the first block   : 
1552			;     with a null pointer to the next free block.                             : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     Inputs are compile-time only. Two defines which specify the starting    : 
1552			;     address of the heap and its size are required, along with a memory      : 
1552			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1552			;     principally stores a pointer to the first free block in the heap.       : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;------------------------------------------------------------------------------ 
1552			heap_init: 
1552			      push  HL 
1552			 
1552			      ; Initialise free list struct 
1552			      ld    HL, heap_start 
1552			      ld    (free_list), HL 
1552			      ld    HL, 0 
1552			      ld    (free_list+2), HL 
1552			 
1552			      ; Insert first free block at bottom of heap, consumes entire heap 
1552			      ld    HL, heap_start+heap_size-4 
1552			      ld    (heap_start), HL        ; Next block (end of free list) 
1552			      ld    HL, heap_size-4 
1552			      ld    (heap_start+2), HL      ; Block size 
1552			 
1552			      ; Insert end of free list block at top of heap - two null words will 
1552			      ; terminate the free list 
1552			      ld    HL, 0 
1552			      ld    (heap_start+heap_size-2), HL 
1552			      ld    (heap_start+heap_size-4), HL 
1552			 
1552			      pop   HL 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     malloc                                                                  : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Allocates the wanted space from the heap and returns the address of the : 
1552			;     first useable byte of the allocation.                                   : 
1552			;                                                                             : 
1552			;     Allocations can happen in one of two ways:                              : 
1552			;                                                                             : 
1552			;     1. A free block may be found which is the exact size wanted. In this    : 
1552			;        case the block is removed from the free list and retuedn to the      : 
1552			;        caller.                                                              : 
1552			;     2. A free block may be found which is larger than the size wanted. In   : 
1552			;        this case, the larger block is split into two. The first portion of  : 
1552			;        this block will become the requested space by the malloc call and    : 
1552			;        is returned to the caller. The second portion becomes a new free     : 
1552			;        block, and the free list is adjusted to maintain continuity via this : 
1552			;        newly created block.                                                 : 
1552			;                                                                             : 
1552			;     malloc does not set any initial value in the allocated space, the       : 
1552			;     caller is required to do this as required.                              : 
1552			;                                                                             : 
1552			;     This implementation of malloc uses the stack exclusively, and is        : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling malloc, and recommended  : 
1552			;     to avoid the use of malloc inside ISRs in general.                      : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Number of bytes wanted                                              : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     HL  Address of the first useable byte of the allocation                 : 
1552			;                                                                             : 
1552			; Flags                                                                       : 
1552			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +4  +-------------+                                                       : 
1552			;       |  this_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			malloc: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if no space requested 
1552			      or    L 
1552			      jp    Z, malloc_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; Setup initial state 
1552			      ld    HL, 4                   ; want must also include space used by block struct 
1552			      add   HL, DE 
1552			 
1552			      ld    B, H                    ; Move want to BC 
1552			      ld    C, L 
1552			 
1552			      ld    HL, free_list           ; Store prev_free ptr to stack 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    E, (HL)                 ; Store this_free ptr to stack 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ld    (IX+2), E 
1552			      ld    (IX+3), D 
1552			      ex    DE, HL                  ; this_free ptr into HL 
1552			 
1552			      ; Loop through free block list to find some space 
1552			malloc_find_space: 
1552			      ld    E, (HL)                 ; Load next_free ptr into DE 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1552			      or    E 
1552			      jp    Z, malloc_no_space 
1552			 
1552			      ld    (IX+0), E               ; Store next_free ptr to stack 
1552			      ld    (IX+1), D 
1552			 
1552			      ; Does this block have enough space to make the allocation? 
1552			      inc   HL                      ; Load free block size into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ex    DE, HL                  ; Check size of block against want 
1552			      or    A                       ; Ensure carry flag clear 
1552			      sbc   HL, BC 
1552			      push  HL                      ; Store the result for later (new block size) 
1552			 
1552			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1552			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1552			 
1552			      ; this_free block is not big enough, setup ptrs to test next free block 
1552			      pop   HL                      ; Discard previous result 
1552			 
1552			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1552			      ld    H, (IX+3) 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1552			      ld    H, (IX+1) 
1552			      ld    (IX+2), L 
1552			      ld    (IX+3), H 
1552			 
1552			      jr    malloc_find_space 
1552			 
1552			      ; split a bigger block into two - requested size and remaining size 
1552			malloc_alloc_split: 
1552			      ex    DE, HL                  ; Calculate address of new free block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      add   HL, BC 
1552			 
1552			      ; Create a new block and point it at next_free 
1552			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      ld    (HL), E                 ; Store next_free ptr into new block 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   DE                      ; Store size of new block into new block 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Update this_free ptr to point to new block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1552			      ld    (IX+3), H 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store want size into allocated block 
1552			      ld    (HL), C 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			      inc   HL 
1552			      push  HL                      ; Address of allocation to return 
1552			 
1552			      jr    malloc_update_links 
1552			 
1552			malloc_alloc_fit: 
1552			      pop   HL                      ; Dont need new block size, want is exact fit 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store address of allocation to return 
1552			      inc   HL 
1552			      inc   HL 
1552			      push  HL 
1552			 
1552			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1552			      ld    L, (IX+0)               ; next_free to HL 
1552			      ld    H, (IX+1) 
1552			 
1552			      ld    (IX+2), L               ; HL to this_free 
1552			      ld    (IX+3), H 
1552			 
1552			 
1552			malloc_update_links: 
1552			      ; Update prev_free ptr to point to this_free 
1552			      ld    L, (IX+4)               ; prev_free ptr to HL 
1552			      ld    H, (IX+5) 
1552			 
1552			      ld    E, (IX+2)               ; this_free ptr to DE 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (HL), E                 ; this_free ptr into prev_free 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Clear the Z flag to indicate successful allocation 
1552			      ld    A, D 
1552			      or    E 
1552			 
1552			      pop   DE                      ; Address of allocation 
1552			 
1552			malloc_no_space: 
1552			      ld    HL, 6                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			      ex    DE, HL                  ; Alloc addr into HL for return 
1552			 
1552			malloc_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     free                                                                    : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1552			;     returned by malloc, otherwise the behaviour is undefined.               : 
1552			;                                                                             : 
1552			;     Where possible, directly adjacent free blocks will be merged together   : 
1552			;     into larger blocks to help ensure that the heap does not become         : 
1552			;     excessively fragmented.                                                 : 
1552			;                                                                             : 
1552			;     free does not clear or set any other value into the freed space, and    : 
1552			;     therefore its contents may be visible through subsequent malloc's. The  : 
1552			;     caller should clear the freed space as required.                        : 
1552			;                                                                             : 
1552			;     This implementation of free uses the stack exclusively, and is          : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling free, and recommended    : 
1552			;     to avoid the use of free inside ISRs in general.                        : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Pointer to address of first byte of allocation to be freed          : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			free: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if ptr is null 
1552			      or    L 
1552			      jp    Z, free_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; The address in HL points to the start of the useable allocated space, 
1552			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1552			      ; address of the block itself. 
1552			      ex    DE, HL 
1552			      ld    DE, -4 
1552			      add   HL, DE 
1552			 
1552			      ; An allocated block must have a null next block pointer in it 
1552			      ld    A, (HL) 
1552			      inc   HL 
1552			      or    (HL) 
1552			      jp    NZ, free_done 
1552			 
1552			      dec   HL 
1552			 
1552			      ld    B, H                    ; Copy HL to BC 
1552			      ld    C, L 
1552			 
1552			      ; Loop through the free list to find the first block with an address 
1552			      ; higher than the block being freed 
1552			      ld    HL, free_list 
1552			 
1552			free_find_higher_block: 
1552			      ld    E, (HL)                 ; Load next ptr from free block 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			 
1552			      ld    (IX+0), E               ; Save ptr to next free block 
1552			      ld    (IX+1), D 
1552			      ld    (IX+2), L               ; Save ptr to prev free block 
1552			      ld    (IX+3), H 
1552			 
1552			      ld    A, B                    ; Check if DE is greater than BC 
1552			      cp    D                       ; Compare MSB first 
1552			      jr    Z, $+4                  ; MSB the same, compare LSB 
1552			      jr    NC, free_find_higher_block_skip 
1552			      ld    A, C 
1552			      cp    E                       ; Then compare LSB 
1552			      jr    C, free_found_higher_block 
1552			 
1552			free_find_higher_block_skip: 
1552			      ld    A, D                    ; Reached the end of the free list? 
1552			      or    E 
1552			      jp    Z, free_done 
1552			 
1552			      ex    DE, HL 
1552			 
1552			      jr    free_find_higher_block 
1552			 
1552			free_found_higher_block: 
1552			      ; Insert freed block between prev and next free blocks 
1552			      ld    (HL), C                 ; Point prev free block to freed block 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			 
1552			      ld    H, B                    ; Point freed block at next free block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Check if the freed block is adjacent to the next free block 
1552			      inc   HL                      ; Load size of freed block into HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      add   HL, BC                  ; Add addr of freed block and its size 
1552			 
1552			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_check_adjacent_to_prev 
1552			 
1552			      ; Freed block is adjacent to next, merge into one bigger block 
1552			      ex    DE, HL                  ; Load next ptr from next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save ptr to next block for later 
1552			 
1552			      ld    H, B                    ; Store ptr from next block into freed block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore ptr to next block 
1552			      inc   HL                      ; Load size of next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save next block size for later 
1552			 
1552			      ld    H, B                    ; Load size of freed block into HL 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      pop   DE                      ; Restore size of next block 
1552			      add   HL, DE                  ; Add sizes of both blocks 
1552			      ex    DE, HL 
1552			 
1552			      ld    H, B                    ; Store new bigger size into freed block 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_check_adjacent_to_prev: 
1552			      ; Check if the freed block is adjacent to the prev free block 
1552			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1552			      ld    H, (IX+3) 
1552			 
1552			      inc   HL                      ; Size of prev free block into DE 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      add   HL, DE                  ; Add prev block addr and size 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_done 
1552			 
1552			      ; Freed block is adjacent to prev, merge into one bigger block 
1552			      ld    H, B                    ; Load next ptr from freed block into DE 
1552			      ld    L, C 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save freed block ptr for later 
1552			 
1552			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1552			      ld    H, (IX+3) 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore freed block ptr 
1552			      inc   HL                      ; Load size of freed block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save freed block size for later 
1552			 
1552			      ld    L, (IX+2)               ; Load size of prev block into DE 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      pop   HL                      ; Add sizes of both blocks 
1552			      add   HL, DE 
1552			      ex    DE, HL 
1552			 
1552			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_done: 
1552			      ld    HL, 4                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			free_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;      .org 0x8000 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			 ;                 .dw   0 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_4 
1552			 
1552			; My memory allocation code. Very very simple.... 
1552			; allocate space under 250 chars 
1552			 
1552			heap_init: 
1552				; init start of heap as zero 
1552				;  
1552			 
1552				ld hl, heap_start 
1552				ld a, 0 
1552				ld (hl), a      ; empty block 
1552				inc hl 
1552				ld a, 0 
1552				ld (hl), a      ; length of block 
1552				; write end of list 
1552				inc hl 
1552				ld a,(hl) 
1552				inc hl 
1552				ld a,(hl) 
1552				 
1552			 
1552				; init some malloc vars 
1552			 
1552				ld hl, 0 
1552				ld (free_list), hl       ; store last malloc location 
1552			 
1552				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1552				ld a, 0 
1552				ld (hl), a 
1552			 
1552			 
1552				ld hl, heap_start 
1552				;  
1552				  
1552				ret 
1552			 
1552			 
1552			;    free block marker 
1552			;    requested size  
1552			;    pointer to next block 
1552			;    .... 
1552			;    next block marker 
1552			 
1552			 
1552			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1552			; 
1552			 
1552			 
1552			malloc:  
1552				push de 
1552				push bc 
1552				push af 
1552			 
1552				; hl space required 
1552				 
1552				ld c, l    ; hold space   (TODO only a max of 255) 
1552			 
1552			;	inc c     ; TODO BUG need to fix memory leak on push str 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			 
1552			 
1552			 
1552				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1552			 
1552				ld a, (free_list+3) 
1552				cp 0 
1552				jr z, .contheap 
1552			 
1552				ld hl, (free_list)     ; get last alloc 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mrs" 
1552						CALLMONITOR 
1552					endif 
1552				jr .startalloc 
1552			 
1552			.contheap: 
1552				ld hl, heap_start 
1552			 
1552			.startalloc: 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mym" 
1552						CALLMONITOR 
1552					endif 
1552			.findblock: 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmf" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552				ld a,(hl)  
1552				; if byte is zero then clear to use 
1552			 
1552				cp 0 
1552				jr z, .foundemptyblock 
1552			 
1552				; if byte is not clear 
1552				;     then byte is offset to next block 
1552			 
1552				inc hl 
1552				ld a, (hl) ; get size 
1552			.nextblock:	inc hl 
1552					ld e, (hl) 
1552					inc hl 
1552					ld d, (hl) 
1552					ex de, hl 
1552			;	inc hl  ; move past the store space 
1552			;	inc hl  ; move past zero index  
1552			 
1552				; TODO detect no more space 
1552			 
1552				push hl 
1552				ld de, heap_end 
1552				call cmp16 
1552				pop hl 
1552				jr nc, .nospace 
1552			 
1552				jr .findblock 
1552			 
1552			.nospace: ld hl, 0 
1552				jp .exit 
1552			 
1552			 
1552			.foundemptyblock:	 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mme" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; TODO has block enough space if reusing??? 
1552			 
1552				;  
1552			 
1552			; see if this block has been previously used 
1552				inc hl 
1552				ld a, (hl) 
1552				dec hl 
1552				cp 0 
1552				jr z, .newblock 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meR" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; no reusing previously allocated block 
1552			 
1552			; is it smaller than previously used? 
1552				 
1552				inc hl    ; move to size 
1552				ld a, c 
1552				sub (hl)        ; we want c < (hl) 
1552				dec hl    ; move back to marker 
1552			        jr z, .findblock 
1552			 
1552				; update with the new size which should be lower 
1552			 
1552			        ;inc  hl   ; negate next move. move back to size  
1552			 
1552			.newblock: 
1552				; need to be at marker here 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meN" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			 
1552				ld a, c 
1552			 
1552				ld (free_list+3), a	 ; flag resume from last malloc  
1552				ld (free_list), hl    ; save out last location 
1552			 
1552			 
1552				;inc a     ; space for length byte 
1552				ld (hl), a     ; save block in use marker 
1552			 
1552				inc hl   ; move to space marker 
1552				ld (hl), a    ; save new space 
1552			 
1552				inc hl   ; move to start of allocated area 
1552				 
1552			;	push hl     ; save where we are - 1  
1552			 
1552			;	inc hl  ; move past zero index  
1552				; skip space to set down new marker 
1552			 
1552				; provide some extra space for now 
1552			 
1552				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1552				inc a 
1552				inc a 
1552			 
1552				push hl   ; save where we are in the node block 
1552			 
1552				call addatohl 
1552			 
1552				; write linked list point 
1552			 
1552				pop de     ; get our node position 
1552				ex de, hl 
1552			 
1552				ld (hl), e 
1552				inc hl 
1552				ld (hl), d 
1552			 
1552				inc hl 
1552			 
1552				; now at start of allocated data so save pointer 
1552			 
1552				push hl 
1552			 
1552				; jump to position of next node and setup empty header in DE 
1552			 
1552				ex de, hl 
1552			 
1552			;	inc hl ; move past end of block 
1552			 
1552				ld a, 0 
1552				ld (hl), a   ; empty marker 
1552				inc hl 
1552				ld (hl), a   ; size 
1552				inc hl  
1552				ld (hl), a   ; ptr 
1552				inc hl 
1552				ld (hl), a   ; ptr 
1552			 
1552			 
1552				pop hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmr" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			.exit: 
1552				pop af 
1552				pop bc 
1552				pop de  
1552				ret 
1552			 
1552			 
1552			 
1552			 
1552			free:  
1552				push hl 
1552				push af 
1552				; get address in hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "fre" 
1552						CALLMONITOR 
1552					endif 
1552				; data is at hl - move to block count 
1552				dec hl 
1552				dec hl    ; get past pointer 
1552				dec hl 
1552			 
1552				ld a, (hl)    ; need this for a validation check 
1552			 
1552				dec hl    ; move to block marker 
1552			 
1552				; now check that the block count and block marker are the same  
1552			        ; this checks that we are on a malloc node and not random memory 
1552			        ; OK a faint chance this could be a problem but rare - famous last words! 
1552			 
1552				ld c, a 
1552				ld a, (hl)    
1552			 
1552				cp c 
1552				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1552			 
1552				; yes good chance we are on a malloc node 
1552			 
1552				ld a, 0      
1552				ld (hl), a   ; mark as free 
1552			 
1552				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1552			 
1552			.freeignore:  
1552			 
1552				pop af 
1552				pop hl 
1552			 
1552				ret 
1552			 
1552			 
1552			 
1552			endif 
1552			 
1552			; eof 
# End of file firmware_memory.asm
1552			  
1552			; device C  
1552			; Now handled by SPI  
1552			;if SOUND_ENABLE  
1552			;	include "firmware_sound.asm"  
1552			;endif  
1552			  
1552			include "firmware_diags.asm"  
1552			; Hardware diags menu 
1552			 
1552			 
1552			config: 
1552			 
1552 3e 00			ld a, 0 
1554 21 7d 15			ld hl, .configmn 
1557 cd db 0d			call menu 
155a			 
155a fe 00			cp 0 
155c c8				ret z 
155d			 
155d			;	cp 1 
155d			;	call z, .savetostore 
155d			 
155d fe 01			cp 1 
155f			if STARTUP_V1 
155f				call z, .selautoload 
155f			endif 
155f			 
155f			if STARTUP_V2 
155f cc 8b 15			call z, .enautoload 
1562			endif 
1562 fe 02			cp 2 
1564 cc a2 15			call z, .disautoload 
1567			;	cp 3 
1567			;	call z, .selbank 
1567 fe 03			cp 3 
1569 cc 0b 18			call z, .debug_tog 
156c fe 04			cp 4 
156e cc 59 19			call z, .bpsgo 
1571 fe 05			cp 5 
1573 cc 34 18			call z, hardware_diags 
1576			if STARTUP_V2 
1576 fe 06			cp 6 
1578 cc ce 15			call z, create_startup 
157b			endif 
157b 18 d5			jr config 
157d			 
157d			.configmn: 
157d			;	dw prom_c3 
157d 47 1b			dw prom_c2 
157f 5d 1b			dw prom_c2a 
1581			;	dw prom_c2b 
1581			;	dw prom_c4 
1581 d4 1b			dw prom_m4 
1583 ef 1b			dw prom_m4b 
1585 f7 1b			dw prom_c1 
1587			if STARTUP_V2 
1587 06 1c			dw prom_c9 
1589			endif 
1589 00 00			dw 0 
158b				 
158b			 
158b			if STARTUP_V2 
158b			.enautoload: 
158b				if STORAGE_SE 
158b 3e fe			ld a, $fe      ; bit 0 clear 
158d 32 95 f9			ld (spi_device), a 
1590			 
1590 cd 25 05			call storage_get_block_0 
1593			 
1593 3e 01			ld a, 1 
1595 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
1598			 
1598 21 00 00				ld hl, 0 
159b 11 af f9				ld de, store_page 
159e cd d9 04			call storage_write_block	 ; save update 
15a1				else 
15a1			 
15a1				ld hl, prom_notav 
15a1				ld de, prom_empty 
15a1				call info_panel 
15a1				endif 
15a1			 
15a1			 
15a1 c9				ret 
15a2			endif 
15a2			 
15a2			.disautoload: 
15a2				if STORAGE_SE 
15a2 3e fe			ld a, $fe      ; bit 0 clear 
15a4 32 95 f9			ld (spi_device), a 
15a7			 
15a7 cd 25 05			call storage_get_block_0 
15aa			 
15aa 3e 00			ld a, 0 
15ac 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
15af			 
15af 21 00 00				ld hl, 0 
15b2 11 af f9				ld de, store_page 
15b5 cd d9 04			call storage_write_block	 ; save update 
15b8				else 
15b8			 
15b8				ld hl, prom_notav 
15b8				ld de, prom_empty 
15b8				call info_panel 
15b8				endif 
15b8			 
15b8			 
15b8 c9				ret 
15b9			 
15b9			if STARTUP_V1 
15b9			 
15b9			; Select auto start 
15b9			 
15b9			.selautoload: 
15b9			 
15b9				 
15b9				if STORAGE_SE 
15b9			 
15b9					call config_dir 
15b9				        ld hl, scratch 
15b9					ld a, 0 
15b9					call menu 
15b9			 
15b9					cp 0 
15b9					ret z 
15b9			 
15b9					dec a 
15b9			 
15b9			 
15b9					; locate menu option 
15b9			 
15b9					ld hl, scratch 
15b9					call table_lookup 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALl" 
15b9						CALLMONITOR 
15b9					endif 
15b9					; with the pointer to the menu it, the byte following the zero term is the file id 
15b9			 
15b9					ld a, 0 
15b9					ld bc, 50   ; max of bytes to look at 
15b9					cpir  
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALb" 
15b9						CALLMONITOR 
15b9					endif 
15b9					;inc hl 
15b9			 
15b9					ld a, (hl)   ; file id 
15b9					 
15b9				        ; save bank and file ids 
15b9			 
15b9					push af 
15b9			 
15b9			; TODO need to save to block 0 on bank 1	 
15b9			 
15b9					call storage_get_block_0 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "AL0" 
15b9						CALLMONITOR 
15b9					endif 
15b9					pop af 
15b9			 
15b9					ld (store_page+STORE_0_FILERUN),a 
15b9					 
15b9					; save bank id 
15b9			 
15b9					ld a,(spi_device) 
15b9					ld (store_page+STORE_0_BANKRUN),a 
15b9			 
15b9					; enable auto run of store file 
15b9			 
15b9					ld a, 1 
15b9					ld (store_page+STORE_0_AUTOFILE),a 
15b9			 
15b9					; save buffer 
15b9			 
15b9					ld hl, 0 
15b9					ld de, store_page 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALw" 
15b9						CALLMONITOR 
15b9					endif 
15b9				call storage_write_block	 ; save update 
15b9			  
15b9			 
15b9			 
15b9			 
15b9					ld hl, scratch 
15b9					call config_fdir 
15b9			 
15b9				else 
15b9			 
15b9				ld hl, prom_notav 
15b9				ld de, prom_empty 
15b9				call info_panel 
15b9			 
15b9				endif 
15b9				ret 
15b9			endif 
15b9			 
15b9			 
15b9			; Select storage bank 
15b9			 
15b9			.selbank: 
15b9			 
15b9			;	if STORAGE_SE 
15b9			;	else 
15b9			 
15b9 21 1b 1c			ld hl, prom_notav 
15bc 11 31 1c			ld de, prom_empty 
15bf cd 3b 0d			call info_panel 
15c2			;	endif 
15c2				 
15c2 c9				ret 
15c3			 
15c3			if STORAGE_SE 
15c3			 
15c3			.config_ldir:   
15c3				; Load storage bank labels into menu array 
15c3			 
15c3				 
15c3			 
15c3			 
15c3 c9				ret 
15c4			 
15c4			 
15c4			endif 
15c4			 
15c4			 
15c4			; Save user words to storage 
15c4			 
15c4			.savetostore: 
15c4			 
15c4			;	if STORAGE_SE 
15c4			; 
15c4			;		call config_dir 
15c4			;	        ld hl, scratch 
15c4			;		ld a, 0 
15c4			;		call menu 
15c4			;		 
15c4			;		ld hl, scratch 
15c4			;		call config_fdir 
15c4			; 
15c4			;	else 
15c4			 
15c4 21 1b 1c			ld hl, prom_notav 
15c7 11 31 1c			ld de, prom_empty 
15ca cd 3b 0d			call info_panel 
15cd			 
15cd			;	endif 
15cd			 
15cd c9				ret 
15ce			 
15ce			if STARTUP_V2 
15ce			 
15ce			create_startup: 
15ce			 
15ce 3e 00			ld a, 0 
15d0 21 30 17			ld hl, .crstart 
15d3 cd db 0d			call menu 
15d6			 
15d6 fe 00			cp 0 
15d8 c8				ret z 
15d9			 
15d9 fe 01			cp 1 
15db cc 17 16			call z, .genlsword 
15de fe 02			cp 2 
15e0 cc 21 16			call z, .genedword 
15e3			 
15e3 fe 03			cp 3 
15e5 cc 2b 16			call z, .gendemword 
15e8			 
15e8 fe 04			cp 4 
15ea cc 35 16			call z, .genutlword 
15ed fe 05			cp 5 
15ef cc 3f 16			call z, .genspiword 
15f2 fe 06			cp 6 
15f4 cc 49 16			call z, .genkeyword 
15f7 fe 07			cp 7 
15f9 cc 0d 16			call z, .gensoundword 
15fc fe 07			cp 7 
15fe cc 03 16			call z, .genhwword 
1601 18 cb			jr create_startup 
1603			 
1603			.genhwword: 
1603 21 be 1b			ld hl, crs_hw 
1606 11 96 16			ld de, .hwworddef 
1609 cd 53 16			call .genfile 
160c c9				ret 
160d			.gensoundword: 
160d 21 b2 1b			ld hl, crs_sound 
1610 11 a4 16			ld de, .soundworddef 
1613 cd 53 16			call .genfile 
1616 c9				ret 
1617			.genlsword: 
1617 21 74 1b			ld hl, crs_s1 
161a 11 c8 16			ld de, .lsworddef 
161d cd 53 16			call .genfile 
1620 c9				ret 
1621			 
1621			.genedword: 
1621 11 cc 16			ld de, .edworddef 
1624 21 7d 1b			ld hl, crs_s2 
1627 cd 53 16			call .genfile 
162a c9				ret 
162b			 
162b			.gendemword: 
162b 11 d4 16			ld de, .demoworddef 
162e 21 86 1b			ld hl, crs_s3 
1631 cd 53 16			call .genfile 
1634 c9				ret 
1635			 
1635			.genutlword: 
1635 21 92 1b			ld hl, crs_s4 
1638 11 b8 16			ld de, .utilwordef 
163b cd 53 16			call .genfile 
163e c9				ret 
163f			.genspiword: 
163f 21 99 1b			ld hl, crs_s5 
1642 11 f6 16			ld de, .spiworddef 
1645 cd 53 16			call .genfile 
1648 c9				ret 
1649			.genkeyword: 
1649 21 a3 1b			ld hl, crs_s6 
164c 11 04 17			ld de, .keyworddef 
164f cd 53 16			call .genfile 
1652 c9				ret 
1653			 
1653			; hl - points to file name 
1653			; de - points to strings to add to file 
1653			 
1653			.genfile: 
1653 e5				push hl 
1654 d5				push de 
1655			 
1655 cd aa 0d			call clear_display 
1658 3e 00			ld a, display_row_1 
165a 11 85 16			ld de, .genfiletxt 
165d cd bd 0d			call str_at_display 
1660 cd cd 0d			call update_display 
1663			 
1663 d1				pop de 
1664 e1				pop hl 
1665			 
1665			 
1665 d5				push de 
1666 cd 77 08			call storage_create 
1669				; id in hl 
1669 d1				pop de   ; table of strings to add 
166a			 
166a			.genloop: 
166a			 
166a e5				push hl ; save id for next time around 
166b d5				push de ; save de for next time around 
166c			 
166c eb				ex de, hl 
166d cd b9 23			call loadwordinhl 
1670 eb				ex de, hl 
1671			 
1671				; need hl to be the id 
1671				; need de to be the string ptr 
1671				 
1671 cd 64 0b			call storage_append 
1674			 
1674 d1				pop de 
1675 e1				pop hl 
1676			 
1676 13				inc de 
1677 13				inc de 
1678			 
1678 1a				ld a,(de) 
1679 fe 00			cp 0 
167b 20 ed			jr nz, .genloop 
167d 13				inc de 
167e 1a				ld a, (de) 
167f 1b				dec de 
1680 fe 00			cp 0 
1682 20 e6			jr nz, .genloop	 
1684			 
1684 c9				ret 
1685			 
1685 .. 00		.genfiletxt:  db "Creating file...",0 
1696			 
1696			.hwworddef: 
1696 8c 65			dw test5 
1698 c4 65			dw test6 
169a fc 65			dw test7 
169c 10 66			dw test8 
169e 3c 66			dw test9 
16a0 52 66			dw test10 
16a2 00 00			dw 0 
16a4			 
16a4			.soundworddef: 
16a4 77 66			dw sound1 
16a6 9b 66			dw sound2 
16a8 cb 66			dw sound3 
16aa f0 66			dw sound4 
16ac fd 66			dw sound5 
16ae 0a 67			dw sound6 
16b0 17 67			dw sound7 
16b2 24 67			dw sound8 
16b4 3c 67			dw sound9 
16b6 00 00			dw 0 
16b8			 
16b8			.utilwordef: 
16b8 c5 63			dw strncpy 
16ba a0 63			dw type 
16bc 6c 63			dw clrstack 
16be 25 63			dw longread 
16c0 26 64			dw start1 
16c2 36 64			dw start2 
16c4			; duplicated 
16c4			;	dw start3b 
16c4			;	dw start3c 
16c4 22 65			dw list 
16c6 00 00			dw 0 
16c8			 
16c8			.lsworddef: 
16c8 47 64			dw start3b 
16ca 00 00			dw 0 
16cc			 
16cc			.edworddef: 
16cc 84 5f			dw edit1 
16ce a5 5f			dw edit2 
16d0 da 5f			dw edit3 
16d2 00 00			dw 0 
16d4			 
16d4			.demoworddef: 
16d4 53 67			dw game1 
16d6 64 67			dw game1a 
16d8 c6 67			dw game1b 
16da fb 67			dw game1c 
16dc 31 68			dw game1d 
16de 62 68			dw game1s 
16e0 76 68			dw game1t 
16e2 8b 68			dw game1f 
16e4 bf 68			dw game1z 
16e6 03 69			dw game1zz 
16e8 6c 69			dw ssv2 
16ea a2 69			dw ssv3 
16ec be 69			dw ssv4 
16ee da 69			dw ssv5 
16f0 f3 69			dw ssv1 
16f2 3b 6a			dw ssv1cpm	 
16f4			;	dw game2b 
16f4			;	dw game2bf 
16f4			;	dw game2mba 
16f4			;	dw game2mbas	 
16f4			;	dw game2mbht 
16f4			;	dw game2mbms 
16f4			;	dw game2mb 
16f4			;	dw game3w 
16f4			;	dw game3p 
16f4			;	dw game3sc 
16f4			;	dw game3vsi 
16f4			;	dw game3vs 
16f4 00 00			dw 0 
16f6			 
16f6			 
16f6			.spiworddef: 
16f6			 
16f6 12 60		    dw spi1 
16f8 6b 60		    dw spi2 
16fa 9f 60		    dw spi2b 
16fc 23 61		    dw spi3 
16fe cd 60		    dw spi4 
1700 f6 60		    dw spi5 
1702			;    dw spi6 
1702			;    dw spi7 
1702			 
1702			;    dw spi8 
1702			;    dw spi9 
1702			;    dw spi10 
1702 00 00		    dw 0 
1704			 
1704			.keyworddef: 
1704			 
1704 92 6a			dw keyup 
1706 a0 6a			dw keydown 
1708 b0 6a			dw keyleft 
170a c0 6a			dw keyright 
170c d1 6a			dw 	keyf1 
170e df 6a			dw keyf2 
1710 ed 6a			dw keyf3 
1712 fb 6a			dw keyf4 
1714 09 6b			dw keyf5 
1716 17 6b			dw keyf6 
1718 25 6b			dw keyf7 
171a 33 6b			dw keyf8 
171c 41 6b			dw keyf9 
171e 4f 6b			dw keyf10 
1720 5e 6b			dw keyf11 
1722 6d 6b			dw keyf12 
1724 7c 6b			dw keytab 
1726 8b 6b			dw keycr 
1728 99 6b			dw keyhome 
172a a9 6b			dw keyend 
172c b8 6b			dw keybs 
172e 00 00			dw 0 
1730			 
1730			.crstart: 
1730 74 1b			dw crs_s1 
1732 7d 1b			dw crs_s2 
1734 86 1b			dw crs_s3 
1736 92 1b			dw crs_s4 
1738 99 1b			dw crs_s5 
173a a3 1b			dw crs_s6 
173c b2 1b			dw crs_sound 
173e be 1b			dw crs_hw 
1740 00 00			dw 0 
1742			 
1742			endif 
1742			 
1742			 
1742			if STORAGE_SE 
1742			 
1742			config_fdir: 
1742				; using the scratch dir go through and release the memory allocated for each string 
1742				 
1742 21 f6 f0			ld hl, scratch 
1745 5e			.cfdir:	ld e,(hl) 
1746 23				inc hl 
1747 56				ld d,(hl) 
1748 23				inc hl 
1749			 
1749 eb				ex de, hl 
174a cd 07 10			call ishlzero 
174d c8				ret z     ; return on null pointer 
174e cd 83 14			call free 
1751 eb				ex de, hl 
1752 18 f1			jr .cfdir 
1754			 
1754			 
1754 c9				ret 
1755			 
1755			 
1755			config_dir: 
1755			 
1755				; for the config menus that need to build a directory of storage call this routine 
1755				; it will construct a menu in scratch to pass to menu 
1755			 
1755				; open storage device 
1755			 
1755				; execute DIR to build a list of files and their ids into scratch in menu format 
1755				; once the menu has finished then will need to call config_fdir to release the strings 
1755				 
1755				; c = number items 
1755			 
1755				 
1755 cd 25 05			call storage_get_block_0 
1758			 
1758 21 af f9			ld hl, store_page     ; get current id count 
175b 46				ld b, (hl) 
175c 0e 00			ld c, 0    ; count of files   
175e			 
175e			 
175e 21 f6 f0			ld hl, scratch 
1761 22 a6 f9			ld (store_tmp2), hl    ; location to poke strings 
1764			 
1764				; check for empty drive 
1764			 
1764 3e 00			ld a, 0 
1766 b8				cp b 
1767 ca 01 18			jp z, .dirdone 
176a			 
176a				 
176a					if DEBUG_FORTH_WORDS 
176a						DMARK "Cdc" 
176a f5				push af  
176b 3a 7f 17			ld a, (.dmark)  
176e 32 a0 fd			ld (debug_mark),a  
1771 3a 80 17			ld a, (.dmark+1)  
1774 32 a1 fd			ld (debug_mark+1),a  
1777 3a 81 17			ld a, (.dmark+2)  
177a 32 a2 fd			ld (debug_mark+2),a  
177d 18 03			jr .pastdmark  
177f ..			.dmark: db "Cdc"  
1782 f1			.pastdmark: pop af  
1783			endm  
# End of macro DMARK
1783						CALLMONITOR 
1783 cd aa fd			call debug_vector  
1786				endm  
# End of macro CALLMONITOR
1786					endif 
1786			 
1786			 
1786			.diritem:	 
1786 c5				push bc 
1787				; for each of the current ids do a search for them and if found push to stack 
1787			 
1787 21 40 00				ld hl, STORE_BLOCK_PHY 
178a 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
178c 58					ld e,b 
178d			 
178d cd a7 07				call storage_findnextid 
1790			 
1790			 
1790					; if found hl will be non zero 
1790			 
1790 cd 07 10				call ishlzero 
1793 28 69				jr z, .dirnotfound 
1795			 
1795					; increase count 
1795			 
1795 c1					pop bc	 
1796 0c					inc c 
1797 c5					push bc 
1798					 
1798			 
1798					; get file header and push the file name 
1798			 
1798 11 af f9				ld de, store_page 
179b cd 74 04				call storage_read_block 
179e			 
179e					; push file id to stack 
179e				 
179e 3a af f9				ld a, (store_page) 
17a1 26 00				ld h, 0 
17a3 6f					ld l, a 
17a4			 
17a4					;call forth_push_numhl 
17a4					; TODO store id 
17a4			 
17a4 e5					push hl 
17a5			 
17a5					; push extent count to stack  
17a5				 
17a5 21 b2 f9				ld hl, store_page+3 
17a8			 
17a8					; get file name length 
17a8			 
17a8 cd 44 13				call strlenz   
17ab			 
17ab 23					inc hl   ; cover zero term 
17ac 23					inc hl  ; stick the id at the end of the area 
17ad			 
17ad e5					push hl 
17ae c1					pop bc    ; move length to bc 
17af			 
17af cd b9 13				call malloc 
17b2			 
17b2					; TODO save malloc area to scratch 
17b2			 
17b2 eb					ex de, hl 
17b3 2a a6 f9				ld hl, (store_tmp2) 
17b6 73					ld (hl), e 
17b7 23					inc hl 
17b8 72					ld (hl), d 
17b9 23					inc hl 
17ba 22 a6 f9				ld (store_tmp2), hl 
17bd			 
17bd					 
17bd			 
17bd					;pop hl   ; get source 
17bd			;		ex de, hl    ; swap aronund	 
17bd			 
17bd 21 b2 f9				ld hl, store_page+3 
17c0					if DEBUG_FORTH_WORDS 
17c0						DMARK "CFd" 
17c0 f5				push af  
17c1 3a d5 17			ld a, (.dmark)  
17c4 32 a0 fd			ld (debug_mark),a  
17c7 3a d6 17			ld a, (.dmark+1)  
17ca 32 a1 fd			ld (debug_mark+1),a  
17cd 3a d7 17			ld a, (.dmark+2)  
17d0 32 a2 fd			ld (debug_mark+2),a  
17d3 18 03			jr .pastdmark  
17d5 ..			.dmark: db "CFd"  
17d8 f1			.pastdmark: pop af  
17d9			endm  
# End of macro DMARK
17d9						CALLMONITOR 
17d9 cd aa fd			call debug_vector  
17dc				endm  
# End of macro CALLMONITOR
17dc					endif 
17dc ed b0				ldir 
17de			 
17de					; de is past string, move back one and store id 
17de					 
17de 1b					dec de 
17df			 
17df					; store file id 
17df			 
17df e1					pop hl 
17e0 eb					ex de,hl 
17e1 73					ld (hl), e 
17e2			 
17e2					if DEBUG_FORTH_WORDS 
17e2						DMARK "Cdi" 
17e2 f5				push af  
17e3 3a f7 17			ld a, (.dmark)  
17e6 32 a0 fd			ld (debug_mark),a  
17e9 3a f8 17			ld a, (.dmark+1)  
17ec 32 a1 fd			ld (debug_mark+1),a  
17ef 3a f9 17			ld a, (.dmark+2)  
17f2 32 a2 fd			ld (debug_mark+2),a  
17f5 18 03			jr .pastdmark  
17f7 ..			.dmark: db "Cdi"  
17fa f1			.pastdmark: pop af  
17fb			endm  
# End of macro DMARK
17fb						CALLMONITOR 
17fb cd aa fd			call debug_vector  
17fe				endm  
# End of macro CALLMONITOR
17fe					endif 
17fe					 
17fe			.dirnotfound: 
17fe c1					pop bc     
17ff 10 85				djnz .diritem 
1801				 
1801			.dirdone:	 
1801			 
1801 3e 00				ld a, 0 
1803 2a a6 f9				ld hl, (store_tmp2) 
1806 77					ld (hl), a 
1807 23					inc hl 
1808 77					ld (hl), a 
1809 23					inc hl 
180a					; push a count of the dir items found 
180a			 
180a			;		ld h, 0 
180a			;		ld l, c 
180a			 
180a c9				ret 
180b			 
180b			endif 
180b			 
180b			 
180b			; Settings 
180b			; Run  
180b			 
180b			 
180b			 
180b			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
180b			;;hd_menu2:   db "        2: Editor",0   
180b			;hd_menu2:   db "        2: Editor       6: Menu",0   
180b			;hd_menu3:   db "        3: Storage",0 
180b			;hd_menu4:   db "0=quit  4: Debug",0 
180b			;hd_don:     db "ON",0 
180b			;hd_doff:     db "OFF",0 
180b			; 
180b			; 
180b			; 
180b			;hardware_diags_old:       
180b			; 
180b			;.diagmenu: 
180b			;	call clear_display 
180b			;	ld a, display_row_1 
180b			;	ld de, hd_menu1 
180b			;	call str_at_display 
180b			; 
180b			;	ld a, display_row_2 
180b			;	ld de, hd_menu2 
180b			;	call str_at_display 
180b			; 
180b			;	ld a, display_row_3 
180b			;	ld de, hd_menu3 
180b			;	call str_at_display 
180b			; 
180b			;	ld a,  display_row_4 
180b			;	ld de, hd_menu4 
180b			;	call str_at_display 
180b			; 
180b			;	; display debug state 
180b			; 
180b			;	ld de, hd_don 
180b			;	ld a, (os_view_disable) 
180b			;	cp 0 
180b			;	jr z, .distog 
180b			;	ld de, hd_doff 
180b			;.distog: ld a, display_row_4+17 
180b			;	call str_at_display 
180b			; 
180b			;	call update_display 
180b			; 
180b			;	call cin_wait 
180b			; 
180b			; 
180b			; 
180b			;	cp '4' 
180b			;	jr nz, .diagn1 
180b			; 
180b			;	; debug toggle 
180b			; 
180b			;	ld a, (os_view_disable) 
180b			;	ld b, '*' 
180b			;	cp 0 
180b			;	jr z, .debtog 
180b			;	ld b, 0 
180b			;.debtog:	 
180b			;	ld a,b 
180b			;	ld (os_view_disable),a 
180b			; 
180b			;.diagn1: cp '0' 
180b			;	 ret z 
180b			; 
180b			;;	cp '1' 
180b			;;       jp z, matrix	 
180b			;;   TODO keyboard matrix test 
180b			; 
180b			;	cp '2' 
180b			;	jp z, .diagedit 
180b			; 
180b			;;	cp '6' 
180b			;;	jp z, .menutest 
180b			;;if ENABLE_BASIC 
180b			;;	cp '6' 
180b			;;	jp z, basic 
180b			;;endif 
180b			 ; 
180b			;	jp .diagmenu 
180b			; 
180b			; 
180b			;	ret 
180b			 
180b			 
180b			.debug_tog: 
180b 21 55 18			ld hl, .menudebug 
180e				 
180e			;	ld a, (os_view_disable) 
180e			;	cp '*' 
180e 3a aa fd			ld a,(debug_vector) 
1811 fe c9			cp $C9   ; RET 
1813 20 04			jr nz,.tdon  
1815 3e 01			ld a, 1 
1817 18 02			jr .tog1 
1819 3e 00		.tdon: ld a, 0 
181b			 
181b			.tog1: 
181b cd db 0d			call menu 
181e fe 00			cp 0 
1820 c8				ret z 
1821 fe 01			cp 1    ; disable debug 
1823 28 04			jr z, .dtog0 
1825 3e 2a			ld a, '*' 
1827 18 05			jr .dtogset 
1829			.dtog0:  
1829				;ld a, 0 
1829 cd 47 19			call bp_on 
182c 18 dd			jr .debug_tog 
182e			.dtogset:  
182e				; ld (os_view_disable), a 
182e cd 53 19			call bp_off 
1831 c3 0b 18			jp .debug_tog 
1834			 
1834			 
1834			hardware_diags:       
1834			 
1834			.diagm: 
1834 21 47 18			ld hl, .menuitems 
1837 3e 00			ld a, 0 
1839 cd db 0d			call menu 
183c			 
183c fe 00		         cp 0 
183e c8				 ret z 
183f			 
183f fe 02			cp 2 
1841 ca a0 18			jp z, .diagedit 
1844			 
1844			;	cp '6' 
1844			;	jp z, .menutest 
1844			;if ENABLE_BASIC 
1844			;	cp '6' 
1844			;	jp z, basic 
1844			;endif 
1844			  
1844 c3 34 18			jp .diagm 
1847			 
1847				 
1847 5b 18		.menuitems:   	dw .m1 
1849 66 18				dw .m2 
184b 6d 18				dw .m3 
184d 75 18				dw .m5 
184f 7b 18				dw .m5a 
1851 84 18				dw .m5b 
1853 00 00				dw 0 
1855			 
1855			.menudebug: 
1855 8d 18				dw .m6 
1857 96 18				dw .m7 
1859 00 00				dw 0 
185b			 
185b .. 00		.m1:   db "Key Matrix",0 
1866 .. 00		.m2:   db "Editor",0 
186d .. 00		.m3:   db "Storage",0 
1875 .. 00		.m5:   db "Sound",0 
187b .. 00		.m5a:  db "RAM Test",0 
1884 .. 00		.m5b:  db "LCD Test",0 
188d			 
188d .. 00		.m6:   db "Debug ON",0 
1896 .. 00		.m7:   db "Debug OFF",0 
18a0			 
18a0			; debug editor 
18a0			 
18a0			.diagedit: 
18a0			 
18a0 21 f6 f0			ld hl, scratch 
18a3			;	ld bc, 250 
18a3			;	ldir 
18a3				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
18a3 3e 00			ld a, 0 
18a5 77				ld (hl), a 
18a6 23				inc hl 
18a7 77				ld (hl), a 
18a8 23				inc hl 
18a9 77				ld (hl), a 
18aa			 
18aa cd aa 0d		        call clear_display 
18ad cd cd 0d			call update_display 
18b0				;ld a, 1 
18b0				;ld (hardware_diag), a 
18b0			.diloop: 
18b0 3e 00			ld a, display_row_1 
18b2 0e 00			ld c, 0 
18b4 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
18b6 1e 28			ld e, 40 
18b8			 
18b8 21 f6 f0			ld hl, scratch	 
18bb cd 0b 10			call input_str 
18be			 
18be 3e 28			ld a, display_row_2 
18c0 11 f6 f0			ld de, scratch 
18c3 cd bd 0d			call str_at_display 
18c6 cd cd 0d			call update_display 
18c9			 
18c9 c3 b0 18			jp .diloop 
18cc			 
18cc			 
18cc			; pass word in hl 
18cc			; a has display location 
18cc			display_word_at: 
18cc f5				push af 
18cd e5				push hl 
18ce 7c				ld a,h 
18cf 21 fb f3			ld hl, os_word_scratch 
18d2 cd e7 11			call hexout 
18d5 e1				pop hl 
18d6 7d				ld a,l 
18d7 21 fd f3			ld hl, os_word_scratch+2 
18da cd e7 11			call hexout 
18dd 21 ff f3			ld hl, os_word_scratch+4 
18e0 3e 00			ld a,0 
18e2 77				ld (hl),a 
18e3 11 fb f3			ld de,os_word_scratch 
18e6 f1				pop af 
18e7 cd bd 0d				call str_at_display 
18ea c9				ret 
18eb			 
18eb			display_ptr_state: 
18eb			 
18eb				; to restore afterwards 
18eb			 
18eb d5				push de 
18ec c5				push bc 
18ed e5				push hl 
18ee f5				push af 
18ef			 
18ef				; for use in here 
18ef			 
18ef			;	push bc 
18ef			;	push de 
18ef			;	push hl 
18ef			;	push af 
18ef			 
18ef cd aa 0d			call clear_display 
18f2			 
18f2 11 ca 1a			ld de, .ptrstate 
18f5 3e 00			ld a, display_row_1 
18f7 cd bd 0d			call str_at_display 
18fa			 
18fa				; display debug step 
18fa			 
18fa			 
18fa 11 a0 fd			ld de, debug_mark 
18fd 3e 26			ld a, display_row_1+display_cols-2 
18ff cd bd 0d			call str_at_display 
1902			 
1902				; display a 
1902 11 d4 1a			ld de, .ptrcliptr 
1905 3e 28			ld a, display_row_2 
1907 cd bd 0d			call str_at_display 
190a			 
190a f1				pop af 
190b 2a 75 f9			ld hl,(cli_ptr) 
190e 3e 30			ld a, display_row_2+8 
1910 cd cc 18			call display_word_at 
1913			 
1913			 
1913				; display hl 
1913			 
1913			 
1913 11 dc 1a			ld de, .ptrclioptr 
1916 3e 32			ld a, display_row_2+10 
1918 cd bd 0d			call str_at_display 
191b			; 
191b			;	pop hl 
191b 3e 35			ld a, display_row_2+13 
191d 2a 73 f9			ld hl,(cli_origptr) 
1920 cd cc 18			call display_word_at 
1923			; 
1923			;	 
1923			;	; display de 
1923			 
1923			;	ld de, .regstatede 
1923			;	ld a, display_row_3 
1923			;	call str_at_display 
1923			 
1923			;	pop de 
1923			;	ld h,d 
1923			;	ld l, e 
1923			;	ld a, display_row_3+3 
1923			;	call display_word_at 
1923			 
1923			 
1923				; display bc 
1923			 
1923			;	ld de, .regstatebc 
1923			;	ld a, display_row_3+10 
1923			;	call str_at_display 
1923			 
1923			;	pop bc 
1923			;	ld h,b 
1923			;	ld l, c 
1923			;	ld a, display_row_3+13 
1923			;	call display_word_at 
1923			 
1923			 
1923				; display dsp 
1923			 
1923			;	ld de, .regstatedsp 
1923			;	ld a, display_row_4 
1923			;	call str_at_display 
1923			 
1923				 
1923			;	ld hl,(cli_data_sp) 
1923			;	ld a, display_row_4+4 
1923			;	call display_word_at 
1923			 
1923				; display rsp 
1923			 
1923 11 0b 1b			ld de, .regstatersp 
1926 3e 82			ld a, display_row_4+10 
1928 cd bd 0d			call str_at_display 
192b			 
192b				 
192b 2a 27 f9			ld hl,(cli_ret_sp) 
192e 3e 86			ld a, display_row_4+14 
1930 cd cc 18			call display_word_at 
1933			 
1933 cd cd 0d			call update_display 
1936			 
1936 cd ed 0c			call delay1s 
1939 cd ed 0c			call delay1s 
193c cd ed 0c			call delay1s 
193f			 
193f			 
193f cd be 1f			call next_page_prompt 
1942			 
1942				; restore  
1942			 
1942 f1				pop af 
1943 e1				pop hl 
1944 c1				pop bc 
1945 d1				pop de 
1946 c9				ret 
1947			 
1947			; Update the break point vector so that the user can hook a new routine 
1947			 
1947			bp_on: 
1947 3e c3			ld a, $c3    ; JP 
1949 32 aa fd			ld (debug_vector), a 
194c 21 59 19			ld hl, break_point_state 
194f 22 ab fd			ld (debug_vector+1), hl 
1952 c9				ret 
1953			 
1953			bp_off: 
1953 3e c9			ld a, $c9    ; RET 
1955 32 aa fd			ld (debug_vector), a 
1958 c9				ret 
1959			 
1959			 
1959			break_point_state: 
1959			;	push af 
1959			; 
1959			;	; see if disabled 
1959			; 
1959			;	ld a, (os_view_disable) 
1959			;	cp '*' 
1959			;	jr nz, .bpsgo 
1959			;	pop af 
1959			;	ret 
1959			 
1959			.bpsgo: 
1959			;	pop af 
1959 f5				push af 
195a 22 d8 f0			ld (os_view_hl), hl 
195d ed 53 d6 f0		ld (os_view_de), de 
1961 ed 43 d4 f0		ld (os_view_bc), bc 
1965 e5				push hl 
1966 6f				ld l, a 
1967 26 00			ld h, 0 
1969 22 da f0			ld (os_view_af),hl 
196c			 
196c 21 e6 fc				ld hl, display_fb0 
196f 22 01 fb				ld (display_fb_active), hl 
1972 e1				pop hl	 
1973			 
1973 3e 31			ld a, '1' 
1975 fe 2a		.bps1:  cp '*' 
1977 cc 53 19			call z, bp_off 
197a			;	jr nz, .bps1b 
197a			;	ld (os_view_disable),a 
197a fe 31		.bps1b:  cp '1' 
197c 20 14			jr nz, .bps2 
197e			 
197e				; display reg 
197e			 
197e				 
197e			 
197e 3a da f0			ld a, (os_view_af) 
1981 2a d8 f0			ld hl, (os_view_hl) 
1984 ed 5b d6 f0		ld de, (os_view_de) 
1988 ed 4b d4 f0		ld bc, (os_view_bc) 
198c cd 26 1a			call display_reg_state 
198f c3 12 1a			jp .bpschk 
1992			 
1992 fe 32		.bps2:  cp '2' 
1994 20 08			jr nz, .bps3 
1996				 
1996				; display hl 
1996 2a d8 f0			ld hl, (os_view_hl) 
1999 cd 10 1b			call display_dump_at_hl 
199c			 
199c 18 74			jr .bpschk 
199e			 
199e fe 33		.bps3:  cp '3' 
19a0 20 08			jr nz, .bps4 
19a2			 
19a2			        ; display de 
19a2 2a d6 f0			ld hl, (os_view_de) 
19a5 cd 10 1b			call display_dump_at_hl 
19a8			 
19a8 18 68			jr .bpschk 
19aa fe 34		.bps4:  cp '4' 
19ac 20 08			jr nz, .bps5 
19ae			 
19ae			        ; display bc 
19ae 2a d4 f0			ld hl, (os_view_bc) 
19b1 cd 10 1b			call display_dump_at_hl 
19b4			 
19b4 18 5c			jr .bpschk 
19b6 fe 35		.bps5:  cp '5' 
19b8 20 08		        jr nz, .bps7 
19ba			 
19ba				; display cur ptr 
19ba 2a 75 f9			ld hl, (cli_ptr) 
19bd cd 10 1b			call display_dump_at_hl 
19c0			 
19c0 18 50			jr .bpschk 
19c2 fe 36		.bps7:  cp '6' 
19c4 20 08			jr nz, .bps8b 
19c6				 
19c6				; display cur orig ptr 
19c6 2a 73 f9			ld hl, (cli_origptr) 
19c9 cd 10 1b			call display_dump_at_hl 
19cc 18 44			jr .bpschk 
19ce fe 37		.bps8b:  cp '7' 
19d0 20 08			jr nz, .bps9 
19d2				 
19d2				; display dsp 
19d2 2a 23 f9			ld hl, (cli_data_sp) 
19d5 cd 10 1b			call display_dump_at_hl 
19d8			 
19d8 18 38			jr .bpschk 
19da fe 39		.bps9:  cp '9' 
19dc 20 05			jr nz, .bps8c 
19de				 
19de				; display SP 
19de			;	ld hl, sp 
19de cd 10 1b			call display_dump_at_hl 
19e1			 
19e1 18 2f			jr .bpschk 
19e3 fe 38		.bps8c:  cp '8' 
19e5 20 08			jr nz, .bps8d 
19e7				 
19e7				; display rsp 
19e7 2a 27 f9			ld hl, (cli_ret_sp) 
19ea cd 10 1b			call display_dump_at_hl 
19ed			 
19ed 18 23			jr .bpschk 
19ef fe 23		.bps8d:  cp '#'     ; access monitor sub system 
19f1 20 05			jr nz, .bps8 
19f3 cd 78 1d			call monitor 
19f6			 
19f6 18 1a			jr .bpschk 
19f8 fe 30		.bps8:  cp '0' 
19fa 20 16			jr nz, .bpschk 
19fc			 
19fc 21 45 fc				ld hl, display_fb1 
19ff 22 01 fb				ld (display_fb_active), hl 
1a02 cd cd 0d				call update_display 
1a05			 
1a05				;ld a, (os_view_af) 
1a05 2a d8 f0			ld hl, (os_view_hl) 
1a08 ed 5b d6 f0		ld de, (os_view_de) 
1a0c ed 4b d4 f0		ld bc, (os_view_bc) 
1a10 f1				pop af 
1a11 c9				ret 
1a12			 
1a12			.bpschk:   
1a12 cd ed 0c			call delay1s 
1a15 3e 9f		ld a,display_row_4 + display_cols - 1 
1a17 11 bc 1f		        ld de, endprg 
1a1a cd bd 0d			call str_at_display 
1a1d cd cd 0d			call update_display 
1a20 cd 3c 73			call cin_wait 
1a23			 
1a23 c3 75 19			jp .bps1 
1a26			 
1a26			 
1a26			display_reg_state: 
1a26			 
1a26				; to restore afterwards 
1a26			 
1a26 d5				push de 
1a27 c5				push bc 
1a28 e5				push hl 
1a29 f5				push af 
1a2a			 
1a2a				; for use in here 
1a2a			 
1a2a c5				push bc 
1a2b d5				push de 
1a2c e5				push hl 
1a2d f5				push af 
1a2e			 
1a2e cd aa 0d			call clear_display 
1a31			 
1a31 11 e6 1a			ld de, .regstate 
1a34 3e 00			ld a, display_row_1 
1a36 cd bd 0d			call str_at_display 
1a39			 
1a39				; display debug step 
1a39			 
1a39			 
1a39 11 a0 fd			ld de, debug_mark 
1a3c 3e 25			ld a, display_row_1+display_cols-3 
1a3e cd bd 0d			call str_at_display 
1a41			 
1a41				; display a 
1a41 11 02 1b			ld de, .regstatea 
1a44 3e 28			ld a, display_row_2 
1a46 cd bd 0d			call str_at_display 
1a49			 
1a49 e1				pop hl 
1a4a			;	ld h,0 
1a4a			;	ld l, a 
1a4a 3e 2b			ld a, display_row_2+3 
1a4c cd cc 18			call display_word_at 
1a4f			 
1a4f			 
1a4f				; display hl 
1a4f			 
1a4f			 
1a4f 11 f6 1a			ld de, .regstatehl 
1a52 3e 32			ld a, display_row_2+10 
1a54 cd bd 0d			call str_at_display 
1a57			 
1a57 e1				pop hl 
1a58 3e 35			ld a, display_row_2+13 
1a5a cd cc 18			call display_word_at 
1a5d			 
1a5d				 
1a5d				; display de 
1a5d			 
1a5d 11 fa 1a			ld de, .regstatede 
1a60 3e 50			ld a, display_row_3 
1a62 cd bd 0d			call str_at_display 
1a65			 
1a65 e1				pop hl 
1a66			;	ld h,d 
1a66			;	ld l, e 
1a66 3e 53			ld a, display_row_3+3 
1a68 cd cc 18			call display_word_at 
1a6b			 
1a6b			 
1a6b				; display bc 
1a6b			 
1a6b 11 fe 1a			ld de, .regstatebc 
1a6e 3e 5a			ld a, display_row_3+10 
1a70 cd bd 0d			call str_at_display 
1a73			 
1a73 e1				pop hl 
1a74			;	ld h,b 
1a74			;	ld l, c 
1a74 3e 5d			ld a, display_row_3+13 
1a76 cd cc 18			call display_word_at 
1a79			 
1a79			 
1a79				; display dsp 
1a79			 
1a79 11 06 1b			ld de, .regstatedsp 
1a7c 3e 78			ld a, display_row_4 
1a7e cd bd 0d			call str_at_display 
1a81			 
1a81				 
1a81 2a 23 f9			ld hl,(cli_data_sp) 
1a84 3e 7c			ld a, display_row_4+4 
1a86 cd cc 18			call display_word_at 
1a89			 
1a89				; display rsp 
1a89			 
1a89 11 0b 1b			ld de, .regstatersp 
1a8c 3e 82			ld a, display_row_4+10 
1a8e cd bd 0d			call str_at_display 
1a91			 
1a91				 
1a91 2a 27 f9			ld hl,(cli_ret_sp) 
1a94 3e 86			ld a, display_row_4+14 
1a96 cd cc 18			call display_word_at 
1a99			 
1a99 cd cd 0d			call update_display 
1a9c			 
1a9c			;	call delay1s 
1a9c			;	call delay1s 
1a9c			;	call delay1s 
1a9c			 
1a9c			 
1a9c			;	call next_page_prompt 
1a9c			 
1a9c				; restore  
1a9c			 
1a9c f1				pop af 
1a9d e1				pop hl 
1a9e c1				pop bc 
1a9f d1				pop de 
1aa0 c9				ret 
1aa1			 
1aa1 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1ab5 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1aca .. 00		.ptrstate:	db "Ptr State",0 
1ad4 .. 00		.ptrcliptr:     db "cli_ptr",0 
1adc .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1ae6 .. 00		.regstate:	db "Reg State (1/0)",0 
1af6 .. 00		.regstatehl:	db "HL:",0 
1afa .. 00		.regstatede:	db "DE:",0 
1afe .. 00		.regstatebc:	db "BC:",0 
1b02 .. 00		.regstatea:	db "A :",0 
1b06 .. 00		.regstatedsp:	db "DSP:",0 
1b0b .. 00		.regstatersp:	db "RSP:",0 
1b10			 
1b10			display_dump_at_hl: 
1b10 e5				push hl 
1b11 d5				push de 
1b12 c5				push bc 
1b13 f5				push af 
1b14			 
1b14 22 19 f4			ld (os_cur_ptr),hl	 
1b17 cd aa 0d			call clear_display 
1b1a cd c6 1e			call dumpcont 
1b1d			;	call delay1s 
1b1d			;	call next_page_prompt 
1b1d			 
1b1d			 
1b1d f1				pop af 
1b1e c1				pop bc 
1b1f d1				pop de 
1b20 e1				pop hl 
1b21 c9				ret 
1b22			 
1b22			;if ENABLE_BASIC 
1b22			;	include "nascombasic.asm" 
1b22			;	basic: 
1b22			;	include "forth/FORTH.ASM" 
1b22			;endif 
1b22			 
1b22			; eof 
1b22			 
1b22			 
# End of file firmware_diags.asm
1b22			  
1b22			include "firmware_prompts.asm"  
1b22			; Prompts  
1b22			 
1b22			; boot messages 
1b22			 
1b22 .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1b37 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1b47			 
1b47			 
1b47			; config menus 
1b47			 
1b47			;prom_c3: db "Add Dictionary To File",0 
1b47			 
1b47			if STARTUP_V1 
1b47			prom_c2: db "Select Autoload File",0 
1b47			prom_c2a: db "Disable Autoload File", 0 
1b47			endif 
1b47			 
1b47			if STARTUP_V2 
1b47 .. 00		prom_c2: db "Enable Autoload Files",0 
1b5d .. 00		prom_c2a: db "Disable Autoload Files", 0 
1b74			 
1b74 .. 00		crs_s1: db "*ls-word", 0 
1b7d .. 00		crs_s2: db "*ed-word", 0 
1b86 .. 00		crs_s3: db "*Demo-Games", 0 
1b92 .. 00		crs_s4: db "*Utils", 0 
1b99 .. 00		crs_s5: db "*SPI-Util", 0 
1ba3 .. 00		crs_s6: db "*Key-Constants", 0 
1bb2 .. 00		crs_sound: db "*Sound-Util", 0 
1bbe .. 00		crs_hw: db "*Hello-World",0 
1bcb			 
1bcb			 
1bcb			 
1bcb			endif 
1bcb			;prom_c2b: db "Select Storage Bank",0 
1bcb .. 00		prom_c4: db "Settings",0 
1bd4 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1bef .. 00		prom_m4b:   db "Monitor",0 
1bf7 .. 00		prom_c1: db "Hardware Diags",0 
1c06			 
1c06			 
1c06			if STARTUP_V2 
1c06 .. 00		prom_c9: db "Create Startup Files",0 
1c1b			endif 
1c1b			 
1c1b .. 00		prom_notav:    db "Feature not available",0 
1c31 .. 00		prom_empty:    db "",0 
1c32			 
1c32			; eof 
1c32			 
# End of file firmware_prompts.asm
1c32			  
1c32			  
1c32			; eof  
1c32			  
# End of file firmware.asm
1c32			 
1c32			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1c32			;if BASE_KEV  
1c32			;baseram: equ 08000h 
1c32			;endif 
1c32			 
1c32			;if BASE_SC114 
1c32			;baseram:     equ    endofcode 
1c32			;endif 
1c32			 
1c32			 
1c32			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1c32			 
1c32			; start system 
1c32			 
1c32			coldstart: 
1c32				; set sp 
1c32				; di/ei 
1c32			 
1c32 f3				di 
1c33 31 fd ff			ld sp, tos 
1c36 cd c3 6f			call init_nmi 
1c39			;	ei 
1c39			 
1c39				; init spinner 
1c39 3e 00			ld a,0 
1c3b 32 fb fa			ld (display_active), a 
1c3e			 
1c3e				; disable breakpoint by default 
1c3e			 
1c3e				;ld a,'*' 
1c3e			;	ld a,' ' 
1c3e			;	ld (os_view_disable),a 
1c3e			 
1c3e				; set break point vector as new break point on or off 
1c3e cd 53 19			call bp_off 
1c41			 
1c41				; init hardware 
1c41			 
1c41				; init keyboard and screen hardware 
1c41			 
1c41 cd 6c 00			call hardware_init 
1c44			 
1c44			 
1c44 cd ed 0c			call delay1s 
1c47 3e 58			ld a, display_row_3+8 
1c49 11 03 00			ld de, buildtime 
1c4c cd bd 0d			call str_at_display 
1c4f cd cd 0d			call update_display 
1c52			 
1c52 cd ed 0c			call delay1s 
1c55 cd ed 0c			call delay1s 
1c58 cd ed 0c			call delay1s 
1c5b			 
1c5b				; detect if any keys are held down to enable breakpoints at start up 
1c5b			 
1c5b cd 4d 73			call cin  
1c5e fe 00			cp 0 
1c60 28 03			jr z, .nokeys 
1c62			 
1c62				;call hardware_diags 
1c62 cd 52 15			call config 
1c65			 
1c65			;	ld de, .bpen 
1c65			;	ld a, display_row_4 
1c65			;	call str_at_display 
1c65			;	call update_display 
1c65			; 
1c65			;	ld a,0 
1c65			;	ld (os_view_disable),a 
1c65			; 
1c65			;.bpwait: 
1c65			;	call cin 
1c65			;	cp 0 
1c65			;	jr z, .bpwait 
1c65			;	jr .nokeys 
1c65			; 
1c65			; 
1c65			;.bpen:  db "Break points enabled!",0 
1c65			 
1c65			 
1c65			 
1c65			 
1c65			 
1c65			 
1c65			.nokeys: 
1c65			 
1c65			 
1c65				 
1c65			 
1c65			;jp  testkey 
1c65			 
1c65			;call storage_get_block_0 
1c65			; 
1c65			;ld hl, 0 
1c65			;ld de, store_page 
1c65			;call storage_read_block 
1c65			 
1c65				 
1c65			;ld hl, 10 
1c65			;ld de, store_page 
1c65			;call storage_read_block 
1c65			 
1c65			 
1c65			 
1c65			 
1c65			 
1c65			;stop:	nop 
1c65			;	jp stop 
1c65			 
1c65			 
1c65			 
1c65			main: 
1c65 cd aa 0d			call clear_display 
1c68 cd cd 0d			call update_display 
1c6b			 
1c6b			 
1c6b			 
1c6b			;	call testlcd 
1c6b			 
1c6b			 
1c6b			 
1c6b cd 07 24			call forth_init 
1c6e			 
1c6e			 
1c6e			warmstart: 
1c6e cd dd 23			call forth_warmstart 
1c71			 
1c71				; run startup word load 
1c71			        ; TODO prevent this running at warmstart after crash  
1c71			 
1c71				if STARTUP_ENABLE 
1c71			 
1c71					if STARTUP_V1 
1c71			 
1c71						if STORAGE_SE 
1c71							call forth_autoload 
1c71						endif 
1c71						call forth_startup 
1c71					endif 
1c71			 
1c71					if STARTUP_V2 
1c71			 
1c71						if STORAGE_SE 
1c71 cd f1 6d						call forth_autoload 
1c74						else 
1c74							call forth_startup 
1c74						endif 
1c74			 
1c74			 
1c74					endif 
1c74			 
1c74				endif 
1c74			 
1c74			warmstart_afterauto: 
1c74			 
1c74				; show free memory after boot 
1c74 11 13 1d			ld de, freeram 
1c77 3e 00			ld a, display_row_1 
1c79 cd bd 0d			call str_at_display 
1c7c			 
1c7c				; get current heap start after loading any uwords 
1c7c			 
1c7c				;ld de, (os_last_new_uword) 
1c7c				;ex de, hl 
1c7c			 
1c7c			; Or use heap_size word???? 
1c7c				;ld hl, heap_end 
1c7c				;ld hl, heap_size 
1c7c				;ld de, topusermem 
1c7c				;ld de, heap_start 
1c7c ed 5b 0a 80			ld de, (free_list )      
1c80 21 d1 f0				ld hl, heap_end 
1c83 ed 52			sbc hl, de 
1c85				;push hl 
1c85				;ld a,h	         	 
1c85				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1c85				;call hexout 
1c85			   	;pop hl 
1c85			; 
1c85			;	ld a,l 
1c85			;	ld hl, os_word_scratch+2 
1c85			;	call hexout 
1c85			;	ld hl, os_word_scratch+4 
1c85			;	ld a, 0 
1c85			;	ld (hl),a 
1c85 eb				ex de, hl 
1c86 21 fb f3			ld hl, os_word_scratch 
1c89 cd f3 12			call uitoa_16 
1c8c			 
1c8c			 
1c8c 11 fb f3			ld de, os_word_scratch 
1c8f 3e 0d			ld a, display_row_1 + 13 
1c91 cd bd 0d			call str_at_display 
1c94 cd cd 0d			call update_display 
1c97			 
1c97			 
1c97				;call demo 
1c97			 
1c97			 
1c97				; init scratch input area for cli commands 
1c97			 
1c97 21 1d f4			ld hl, os_cli_cmd 
1c9a 3e 00			ld a,0 
1c9c 77				ld (hl),a 
1c9d 23				inc hl 
1c9e 77				ld (hl),a 
1c9f			 
1c9f 3e 00			ld a,0 
1ca1 32 1c f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1ca4			 
1ca4 32 19 f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1ca7 32 1a f4			ld (os_cur_ptr+1),a	 
1caa			 
1caa 32 fb f3			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1cad 32 fc f3			ld (os_word_scratch+1),a	 
1cb0				 
1cb0			 
1cb0				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cb0 21 1d f4			ld hl, os_cli_cmd 
1cb3			 
1cb3 3e 00			ld a, 0		 ; init cli input 
1cb5 77				ld (hl), a 
1cb6 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cb8			cli: 
1cb8				; show cli prompt 
1cb8				;push af 
1cb8				;ld a, 0 
1cb8				;ld de, prompt 
1cb8				;call str_at_display 
1cb8			 
1cb8				;call update_display 
1cb8				;pop af 
1cb8				;inc a 
1cb8				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1cb8			 
1cb8			.lastrecall: 
1cb8			 
1cb8 0e 00			ld c, 0 
1cba 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1cbc 1e 28			ld e, 40 
1cbe			 
1cbe 21 1d f4			ld hl, os_cli_cmd 
1cc1			 
1cc1				STACKFRAME OFF $fefe $9f9f 
1cc1				if DEBUG_STACK_IMB 
1cc1					if OFF 
1cc1						exx 
1cc1						ld de, $fefe 
1cc1						ld a, d 
1cc1						ld hl, curframe 
1cc1						call hexout 
1cc1						ld a, e 
1cc1						ld hl, curframe+2 
1cc1						call hexout 
1cc1						ld hl, $fefe 
1cc1						push hl 
1cc1						ld hl, $9f9f 
1cc1						push hl 
1cc1						exx 
1cc1					endif 
1cc1				endif 
1cc1			endm 
# End of macro STACKFRAME
1cc1			 
1cc1 cd 0b 10			call input_str 
1cc4			 
1cc4				STACKFRAMECHK OFF $fefe $9f9f 
1cc4				if DEBUG_STACK_IMB 
1cc4					if OFF 
1cc4						exx 
1cc4						ld hl, $9f9f 
1cc4						pop de   ; $9f9f 
1cc4						call cmp16 
1cc4						jr nz, .spnosame 
1cc4						ld hl, $fefe 
1cc4						pop de   ; $fefe 
1cc4						call cmp16 
1cc4						jr z, .spfrsame 
1cc4						.spnosame: call showsperror 
1cc4						.spfrsame: nop 
1cc4						exx 
1cc4					endif 
1cc4				endif 
1cc4			endm 
# End of macro STACKFRAMECHK
1cc4			 
1cc4			 
1cc4				; check to see if last line recall has been requested 
1cc4			 
1cc4			if EDIT_V2 
1cc4 fe 05			cp KEY_UP 
1cc6 20 0f			jr nz, .noexecline 
1cc8			 
1cc8 11 1d f4			ld de, os_cli_cmd 
1ccb 21 1c f5			ld hl, os_last_cmd 
1cce 01 ff 00			ld bc, 255 
1cd1 ed b0			ldir 
1cd3 3e 00			ld a, 0 
1cd5 18 e1			jr .lastrecall 
1cd7			endif 
1cd7			 
1cd7			.noexecline: 
1cd7				; no so exec the line		 
1cd7			 
1cd7				; copy input to last command 
1cd7			 
1cd7 21 1d f4			ld hl, os_cli_cmd 
1cda 11 1c f5			ld de, os_last_cmd 
1cdd 01 ff 00			ld bc, 255 
1ce0 ed b0			ldir 
1ce2			 
1ce2				; wipe current buffer 
1ce2			 
1ce2			;	ld a, 0 
1ce2			;	ld hl, os_cli_cmd 
1ce2			;	ld de, os_cli_cmd+1 
1ce2			;	ld bc, 254 
1ce2			;	ldir 
1ce2				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1ce2			;	call strcpy 
1ce2			;	ld a, 0 
1ce2			;	ld (hl), a 
1ce2			;	inc hl 
1ce2			;	ld (hl), a 
1ce2			;	inc hl 
1ce2			;	ld (hl), a 
1ce2			 
1ce2				; switch frame buffer to program  
1ce2			 
1ce2 21 45 fc				ld hl, display_fb1 
1ce5 22 01 fb				ld (display_fb_active), hl 
1ce8			 
1ce8			;	nop 
1ce8				STACKFRAME ON $fbfe $8f9f 
1ce8				if DEBUG_STACK_IMB 
1ce8					if ON 
1ce8						exx 
1ce8						ld de, $fbfe 
1ce8						ld a, d 
1ce8						ld hl, curframe 
1ce8						call hexout 
1ce8						ld a, e 
1ce8						ld hl, curframe+2 
1ce8						call hexout 
1ce8						ld hl, $fbfe 
1ce8						push hl 
1ce8						ld hl, $8f9f 
1ce8						push hl 
1ce8						exx 
1ce8					endif 
1ce8				endif 
1ce8			endm 
# End of macro STACKFRAME
1ce8				; first time into the parser so pass over the current scratch pad 
1ce8 21 1d f4			ld hl,os_cli_cmd 
1ceb				; tokenise the entered statement(s) in HL 
1ceb cd 85 24			call forthparse 
1cee			        ; exec forth statements in top of return stack 
1cee cd c5 24			call forthexec 
1cf1				;call forthexec_cleanup 
1cf1			;	call parsenext 
1cf1			 
1cf1				STACKFRAMECHK ON $fbfe $8f9f 
1cf1				if DEBUG_STACK_IMB 
1cf1					if ON 
1cf1						exx 
1cf1						ld hl, $8f9f 
1cf1						pop de   ; $8f9f 
1cf1						call cmp16 
1cf1						jr nz, .spnosame 
1cf1						ld hl, $fbfe 
1cf1						pop de   ; $fbfe 
1cf1						call cmp16 
1cf1						jr z, .spfrsame 
1cf1						.spnosame: call showsperror 
1cf1						.spfrsame: nop 
1cf1						exx 
1cf1					endif 
1cf1				endif 
1cf1			endm 
# End of macro STACKFRAMECHK
1cf1				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1cf1			 
1cf1 3e 78			ld a, display_row_4 
1cf3 11 24 1d			ld de, endprog 
1cf6			 
1cf6 cd cd 0d			call update_display		 
1cf9			 
1cf9 cd be 1f			call next_page_prompt 
1cfc			 
1cfc				; switch frame buffer to cli 
1cfc			 
1cfc 21 e6 fc				ld hl, display_fb0 
1cff 22 01 fb				ld (display_fb_active), hl 
1d02			 
1d02			 
1d02 cd aa 0d		        call clear_display 
1d05 cd cd 0d			call update_display		 
1d08			 
1d08 21 1d f4			ld hl, os_cli_cmd 
1d0b			 
1d0b 3e 00			ld a, 0		 ; init cli input 
1d0d 77				ld (hl), a 
1d0e			 
1d0e				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1d0e			 
1d0e				; now on last line 
1d0e			 
1d0e				; TODO scroll screen up 
1d0e			 
1d0e				; TODO instead just clear screen and place at top of screen 
1d0e			 
1d0e			;	ld a, 0 
1d0e			;	ld (f_cursor_ptr),a 
1d0e			 
1d0e				;call clear_display 
1d0e				;call update_display 
1d0e			 
1d0e				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d0e 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d10 c3 b8 1c			jp cli 
1d13			 
1d13 .. 00		freeram: db "Free bytes: ",0 
1d20 ..			asc: db "1A2F" 
1d24 .. 00		endprog: db "End prog...",0 
1d30			 
1d30			testenter2:   
1d30 21 28 f1			ld hl,scratch+50 
1d33 22 19 f4			ld (os_cur_ptr),hl 
1d36 c3 b8 1c			jp cli 
1d39			 
1d39			testenter:  
1d39			 
1d39 21 20 1d			ld hl,asc 
1d3c			;	ld a,(hl) 
1d3c			;	call nibble2val 
1d3c cd 3d 12			call get_byte 
1d3f			 
1d3f			 
1d3f			;	ld a,(hl) 
1d3f			;	call atohex 
1d3f			 
1d3f			;	call fourehexhl 
1d3f 32 28 f1			ld (scratch+50),a 
1d42			 
1d42			 
1d42			 
1d42 21 22 1d			ld hl,asc+2 
1d45			;	ld a, (hl) 
1d45			;	call nibble2val 
1d45 cd 3d 12			call get_byte 
1d48			 
1d48			;	call fourehexhl 
1d48 32 2a f1			ld (scratch+52),a 
1d4b				 
1d4b 21 28 f1			ld hl,scratch+50 
1d4e 22 19 f4			ld (os_cur_ptr),hl 
1d51 c3 b8 1c			jp cli 
1d54			 
1d54			enter:	 
1d54 3a fa f0			ld a,(scratch+4) 
1d57 fe 00			cp 0 
1d59 28 0c			jr z, .entercont 
1d5b				; no, not a null term line so has an address to work out.... 
1d5b			 
1d5b 21 f8 f0			ld hl,scratch+2 
1d5e cd 9d 12			call get_word_hl 
1d61			 
1d61 22 19 f4			ld (os_cur_ptr),hl	 
1d64 c3 b8 1c			jp cli 
1d67			 
1d67			 
1d67			.entercont:  
1d67			 
1d67 21 f8 f0			ld hl, scratch+2 
1d6a cd 3d 12			call get_byte 
1d6d			 
1d6d 2a 19 f4		   	ld hl,(os_cur_ptr) 
1d70 77					ld (hl),a 
1d71 23					inc hl 
1d72 22 19 f4				ld (os_cur_ptr),hl 
1d75				 
1d75			; get byte  
1d75			 
1d75			 
1d75 c3 b8 1c			jp cli 
1d78			 
1d78			 
1d78			; basic monitor support 
1d78			 
1d78			monitor: 
1d78				;  
1d78 cd aa 0d			call clear_display 
1d7b 3e 00			ld a, 0 
1d7d 11 d1 1d			ld de, .monprompt 
1d80 cd bd 0d			call str_at_display 
1d83 cd cd 0d			call update_display 
1d86			 
1d86				; get a monitor command 
1d86			 
1d86 0e 00			ld c, 0     ; entry at top left 
1d88 16 64			ld d, 100   ; max buffer size 
1d8a 1e 0f			ld e, 15    ; input scroll area 
1d8c 3e 00			ld a, 0     ; init string 
1d8e 21 f4 f2			ld hl, os_input 
1d91 77				ld (hl), a 
1d92 23				inc hl 
1d93 77				ld (hl), a 
1d94 21 f4 f2			ld hl, os_input 
1d97 3e 01			ld a, 1     ; init string 
1d99 cd 0b 10			call input_str 
1d9c			 
1d9c cd aa 0d		        call clear_display 
1d9f cd cd 0d			call update_display		 
1da2			 
1da2 3a f4 f2			ld a, (os_input) 
1da5 cd 3b 13			call toUpper 
1da8 fe 48		        cp 'H' 
1daa ca 45 1e		        jp z, .monhelp 
1dad fe 44			cp 'D'		; dump 
1daf ca 78 1e			jp z, .mondump	 
1db2 fe 43			cp 'C'		; dump 
1db4 ca 92 1e			jp z, .moncdump	 
1db7 fe 4d			cp 'M'		; dump 
1db9 ca d3 1d			jp z, .moneditstart 
1dbc fe 55			cp 'U'		; dump 
1dbe ca df 1d			jp z, .monedit	 
1dc1 fe 47			cp 'G'		; dump 
1dc3 ca 6e 1e			jp z, .monjump 
1dc6 fe 42			cp 'B'		; forth breakpoint 
1dc8 cc 59 19			call z, break_point_state 
1dcb fe 51			cp 'Q'		; dump 
1dcd c8				ret z	 
1dce			 
1dce			 
1dce				; TODO "S" to access symbol by name and not need the address 
1dce				; TODO "F" to find a string in memory 
1dce			 
1dce c3 78 1d			jp monitor 
1dd1			 
1dd1 .. 00		.monprompt: db ">", 0 
1dd3			 
1dd3			.moneditstart: 
1dd3				; get starting address 
1dd3			 
1dd3 21 f6 f2			ld hl,os_input+2 
1dd6 cd 9d 12			call get_word_hl 
1dd9			 
1dd9 22 19 f4			ld (os_cur_ptr),hl	 
1ddc			 
1ddc c3 78 1d			jp monitor 
1ddf			 
1ddf			.monedit: 
1ddf				; get byte to load 
1ddf			 
1ddf 21 f6 f2			ld hl,os_input+2 
1de2 cd 3d 12			call get_byte 
1de5			 
1de5				; get address to update 
1de5 2a 19 f4			ld hl, (os_cur_ptr) 
1de8			 
1de8				; update byte 
1de8			 
1de8 77				ld (hl), a 
1de9			 
1de9				; move to next address and save it 
1de9			 
1de9 23				inc hl 
1dea 22 19 f4			ld (os_cur_ptr),hl	 
1ded			 
1ded c3 78 1d			jp monitor 
1df0			 
1df0			 
1df0 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1e04 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1e20 .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1e3e .. 00		.monhelptext4:  db "Q-Quit",0 
1e45			        
1e45			.monhelp: 
1e45 3e 00			ld a, display_row_1 
1e47 11 f0 1d		        ld de, .monhelptext1 
1e4a			 
1e4a cd bd 0d			call str_at_display 
1e4d 3e 28			ld a, display_row_2 
1e4f 11 04 1e		        ld de, .monhelptext2 
1e52					 
1e52 cd bd 0d			call str_at_display 
1e55 3e 50			ld a, display_row_3 
1e57 11 20 1e		        ld de, .monhelptext3 
1e5a					 
1e5a cd bd 0d			call str_at_display 
1e5d 3e 78			ld a, display_row_4 
1e5f 11 3e 1e		        ld de, .monhelptext4 
1e62 cd bd 0d			call str_at_display 
1e65			 
1e65 cd cd 0d			call update_display		 
1e68			 
1e68 cd be 1f			call next_page_prompt 
1e6b c3 78 1d			jp monitor 
1e6e			 
1e6e			.monjump:    
1e6e 21 f6 f2			ld hl,os_input+2 
1e71 cd 9d 12			call get_word_hl 
1e74			 
1e74 e9				jp (hl) 
1e75 c3 78 1d			jp monitor 
1e78			 
1e78			.mondump:    
1e78 21 f6 f2			ld hl,os_input+2 
1e7b cd 9d 12			call get_word_hl 
1e7e			 
1e7e 22 19 f4			ld (os_cur_ptr),hl	 
1e81 cd c6 1e			call dumpcont 
1e84 3e 78			ld a, display_row_4 
1e86 11 24 1d			ld de, endprog 
1e89			 
1e89 cd cd 0d			call update_display		 
1e8c			 
1e8c cd be 1f			call next_page_prompt 
1e8f c3 78 1d			jp monitor 
1e92			.moncdump: 
1e92 cd c6 1e			call dumpcont 
1e95 3e 78			ld a, display_row_4 
1e97 11 24 1d			ld de, endprog 
1e9a			 
1e9a cd cd 0d			call update_display		 
1e9d			 
1e9d cd be 1f			call next_page_prompt 
1ea0 c3 78 1d			jp monitor 
1ea3			 
1ea3			 
1ea3			; TODO symbol access  
1ea3			 
1ea3			.symbols:     ;; A list of symbols that can be called up  
1ea3 e6 fc			dw display_fb0 
1ea5 .. 00			db "fb0",0  
1ea9 af f9		     	dw store_page 
1eab .. 00			db "store_page",0 
1eb6			 
1eb6			 
1eb6			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1eb6			 
1eb6 3a f7 f0			ld a,(scratch+1) 
1eb9 fe 00			cp 0 
1ebb 28 09			jr z, dumpcont 
1ebd			 
1ebd				; no, not a null term line so has an address to work out.... 
1ebd			 
1ebd 21 f8 f0			ld hl,scratch+2 
1ec0 cd 9d 12			call get_word_hl 
1ec3			 
1ec3 22 19 f4			ld (os_cur_ptr),hl	 
1ec6			 
1ec6			 
1ec6			 
1ec6			dumpcont: 
1ec6			 
1ec6				; dump bytes at ptr 
1ec6			 
1ec6			 
1ec6 3e 00			ld a, display_row_1 
1ec8 2a 01 fb			ld hl, (display_fb_active) 
1ecb cd de 0f			call addatohl 
1ece cd f6 1e			call .dumpbyterow 
1ed1			 
1ed1 3e 28			ld a, display_row_2 
1ed3 2a 01 fb			ld hl, (display_fb_active) 
1ed6 cd de 0f			call addatohl 
1ed9 cd f6 1e			call .dumpbyterow 
1edc			 
1edc			 
1edc 3e 50			ld a, display_row_3 
1ede 2a 01 fb			ld hl, (display_fb_active) 
1ee1 cd de 0f			call addatohl 
1ee4 cd f6 1e			call .dumpbyterow 
1ee7			 
1ee7 3e 78			ld a, display_row_4 
1ee9 2a 01 fb			ld hl, (display_fb_active) 
1eec cd de 0f			call addatohl 
1eef cd f6 1e			call .dumpbyterow 
1ef2			 
1ef2 cd cd 0d			call update_display 
1ef5			;		jp cli 
1ef5 c9				ret 
1ef6			 
1ef6			.dumpbyterow: 
1ef6			 
1ef6				;push af 
1ef6			 
1ef6 e5				push hl 
1ef7			 
1ef7				; calc where to poke the ascii 
1ef7			if display_cols == 20 
1ef7				ld a, 16 
1ef7			else 
1ef7 3e 1f			ld a, 31 
1ef9			endif 
1ef9			 
1ef9 cd de 0f			call addatohl 
1efc 22 fb f3			ld (os_word_scratch),hl  		; save pos for later 
1eff			 
1eff			 
1eff			; display decoding address 
1eff 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f02			 
1f02 7c				ld a,h 
1f03 e1				pop hl 
1f04 e5				push hl 
1f05			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1f05 cd e7 11			call hexout 
1f08 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f0b			 
1f0b 7d				ld a,l 
1f0c e1				pop hl 
1f0d 23				inc hl 
1f0e 23				inc hl 
1f0f e5				push hl 
1f10			;	ld hl, os_word_scratch+2 
1f10 cd e7 11			call hexout 
1f13 e1				pop hl 
1f14 23				inc hl 
1f15 23				inc hl 
1f16				;ld hl, os_word_scratch+4 
1f16 3e 3a			ld a, ':' 
1f18 77				ld (hl),a 
1f19 23				inc hl 
1f1a				;ld a, 0 
1f1a				;ld (hl),a 
1f1a				;ld de, os_word_scratch 
1f1a				;pop af 
1f1a				;push af 
1f1a			;		ld a, display_row_2 
1f1a			;		call str_at_display 
1f1a			;		call update_display 
1f1a			 
1f1a			 
1f1a			;pop af 
1f1a			;	add 5 
1f1a			 
1f1a			if display_cols == 20 
1f1a				ld b, 4 
1f1a			else 
1f1a 06 08			ld b, 8 
1f1c			endif	 
1f1c			 
1f1c			.dumpbyte: 
1f1c c5				push bc 
1f1d e5				push hl 
1f1e			 
1f1e			 
1f1e 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f21 7e					ld a,(hl) 
1f22			 
1f22					; poke the ascii to display 
1f22 2a fb f3				ld hl,(os_word_scratch) 
1f25 77					ld (hl),a 
1f26 23					inc hl 
1f27 22 fb f3				ld (os_word_scratch),hl 
1f2a			 
1f2a					 
1f2a			 
1f2a			 
1f2a e1					pop hl 
1f2b e5					push hl 
1f2c			 
1f2c cd e7 11				call hexout 
1f2f			 
1f2f					 
1f2f 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f32 23				inc hl 
1f33 22 19 f4		   	ld (os_cur_ptr),hl 
1f36			 
1f36 e1					pop hl 
1f37 23					inc hl 
1f38 23					inc hl 
1f39 23					inc hl 
1f3a			 
1f3a			 
1f3a			 
1f3a					;ld a,0 
1f3a					;ld (os_word_scratch+2),a 
1f3a					;pop af 
1f3a					;push af 
1f3a			 
1f3a					;ld de, os_word_scratch 
1f3a					;call str_at_display 
1f3a			;		call update_display 
1f3a			;		pop af 
1f3a c1					pop bc 
1f3b c6 03				add 3 
1f3d 10 dd			djnz .dumpbyte 
1f3f			 
1f3f				 
1f3f			 
1f3f c9				ret 
1f40			 
1f40			jump:	 
1f40			 
1f40 21 f8 f0			ld hl,scratch+2 
1f43 cd 9d 12			call get_word_hl 
1f46				;ld hl,(scratch+2) 
1f46				;call fourehexhl 
1f46			 
1f46 22 19 f4			ld (os_cur_ptr),hl	 
1f49			 
1f49 e9				jp (hl) 
1f4a			 
1f4a			 
1f4a			 
1f4a			; TODO implement a basic monitor mode to start with 
1f4a			 
1f4a			 
1f4a			 
1f4a			 
1f4a			 
1f4a			 
1f4a			 
1f4a			 
1f4a			 
1f4a			; testing and demo code during development 
1f4a			 
1f4a			 
1f4a .. 00		str1: db "Enter some text...",0 
1f5d .. 00		clear: db "                    ",0 
1f72			 
1f72			demo: 
1f72			 
1f72			 
1f72			 
1f72			;	call update_display 
1f72			 
1f72				; init scratch input area for testing 
1f72 21 f6 f0			ld hl, scratch	 
1f75 3e 00			ld a,0 
1f77 77				ld (hl),a 
1f78			 
1f78			 
1f78 3e 28		            LD   A, display_row_2 
1f7a			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f7a 11 4a 1f		            LD   DE, str1 
1f7d cd bd 0d			call str_at_display 
1f80			 
1f80			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f80			cloop:	 
1f80 3e 50		            LD   A, display_row_3 
1f82			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f82 11 5d 1f		            LD   DE, clear 
1f85			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1f85 cd bd 0d				call str_at_display 
1f88 3e 78			ld a, display_row_4 
1f8a 11 ba 1f			ld de, prompt 
1f8d			 
1f8d cd bd 0d				call str_at_display 
1f90 cd cd 0d			call update_display 
1f93			 
1f93 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1f95 16 0a			ld d, 10 
1f97 21 f6 f0			ld hl, scratch	 
1f9a cd 0b 10			call input_str 
1f9d			 
1f9d			;	call clear_display 
1f9d			;'	call update_display 
1f9d			 
1f9d 3e 00		            LD   A, display_row_1 
1f9f			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f9f 11 5d 1f		            LD   DE, clear 
1fa2 cd bd 0d				call str_at_display 
1fa5			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fa5 3e 00		            LD   A, display_row_1 
1fa7			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa7 11 f6 f0		            LD   DE, scratch 
1faa			;            CALL fLCD_Str       ;Display string pointed to by DE 
1faa cd bd 0d				call str_at_display 
1fad cd cd 0d			call update_display 
1fb0			 
1fb0 3e 00				ld a,0 
1fb2 21 f6 f0			ld hl, scratch 
1fb5 77				ld (hl),a 
1fb6			 
1fb6 00				nop 
1fb7 c3 80 1f			jp cloop 
1fba			 
1fba			 
1fba			 
1fba			; OS Prompt 
1fba			 
1fba .. 00		prompt: db ">",0 
1fbc .. 00		endprg: db "?",0 
1fbe			 
1fbe			 
1fbe			; handy next page prompt 
1fbe			next_page_prompt: 
1fbe e5				push hl 
1fbf d5				push de 
1fc0 f5				push af 
1fc1 c5				push bc 
1fc2			 
1fc2 3e 9f			ld a,display_row_4 + display_cols - 1 
1fc4 11 bc 1f		        ld de, endprg 
1fc7 cd bd 0d			call str_at_display 
1fca cd cd 0d			call update_display 
1fcd cd 3c 73			call cin_wait 
1fd0 c1				pop bc 
1fd1 f1				pop af 
1fd2 d1				pop de 
1fd3 e1				pop hl 
1fd4			 
1fd4			 
1fd4 c9				ret 
1fd5			 
1fd5			 
1fd5			; forth parser 
1fd5			 
1fd5			; My forth kernel 
1fd5			include "forth_kernel.asm" 
1fd5			; 
1fd5			; kernel to the forth OS 
1fd5			 
1fd5			DS_TYPE_STR: equ 1     ; string type 
1fd5			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1fd5			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1fd5			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1fd5			 
1fd5			FORTH_PARSEV1: equ 0 
1fd5			FORTH_PARSEV2: equ 0 
1fd5			FORTH_PARSEV3: equ 0 
1fd5			FORTH_PARSEV4: equ 0 
1fd5			FORTH_PARSEV5: equ 1 
1fd5			 
1fd5			;if FORTH_PARSEV5 
1fd5			;	FORTH_END_BUFFER: equ 0 
1fd5			;else 
1fd5			FORTH_END_BUFFER: equ 127 
1fd5			;endif 
1fd5			 
1fd5			FORTH_TRUE: equ 1 
1fd5			FORTH_FALSE: equ 0 
1fd5			 
1fd5			if FORTH_PARSEV4 
1fd5			include "forth_stackops.asm" 
1fd5			endif 
1fd5			 
1fd5			if FORTH_PARSEV5 
1fd5			include "forth_stackopsv5.asm" 
1fd5			 
1fd5			; Stack operations for v5 parser on wards 
1fd5			; * DATA stack 
1fd5			; * LOOP stack 
1fd5			; * RETURN stack 
1fd5			 
1fd5			 
1fd5			 
1fd5			FORTH_CHK_DSP_UNDER: macro 
1fd5				push hl 
1fd5				push de 
1fd5				ld hl,(cli_data_sp) 
1fd5				ld de, cli_data_stack 
1fd5				call cmp16 
1fd5				jp c, fault_dsp_under 
1fd5				pop de 
1fd5				pop hl 
1fd5				endm 
1fd5			 
1fd5			 
1fd5			FORTH_CHK_RSP_UNDER: macro 
1fd5				push hl 
1fd5				push de 
1fd5				ld hl,(cli_ret_sp) 
1fd5				ld de, cli_ret_stack 
1fd5				call cmp16 
1fd5				jp c, fault_rsp_under 
1fd5				pop de 
1fd5				pop hl 
1fd5				endm 
1fd5			 
1fd5			FORTH_CHK_LOOP_UNDER: macro 
1fd5				push hl 
1fd5				push de 
1fd5				ld hl,(cli_loop_sp) 
1fd5				ld de, cli_loop_stack 
1fd5				call cmp16 
1fd5				jp c, fault_loop_under 
1fd5				pop de 
1fd5				pop hl 
1fd5				endm 
1fd5			 
1fd5			FORTH_ERR_TOS_NOTSTR: macro 
1fd5				; TOSO might need more for checks when used 
1fd5				push af 
1fd5				ld a,(hl) 
1fd5				cp DS_TYPE_STR 
1fd5				jp nz, type_faultn   
1fd5				pop af 
1fd5				endm 
1fd5			 
1fd5			FORTH_ERR_TOS_NOTNUM: macro 
1fd5				push af 
1fd5				ld a,(hl) 
1fd5				cp DS_TYPE_INUM 
1fd5				jp nz, type_faultn   
1fd5				pop af 
1fd5				endm 
1fd5			 
1fd5			 
1fd5			; increase data stack pointer and save hl to it 
1fd5				 
1fd5			FORTH_DSP_NEXT: macro 
1fd5				call macro_forth_dsp_next 
1fd5				endm 
1fd5			 
1fd5			 
1fd5			macro_forth_dsp_next: 
1fd5				if DEBUG_FORTH_STACK_GUARD 
1fd5 cd e0 6b				call check_stacks 
1fd8				endif 
1fd8 e5				push hl 
1fd9 d5				push de 
1fda eb				ex de,hl 
1fdb 2a 23 f9			ld hl,(cli_data_sp) 
1fde 23				inc hl 
1fdf 23				inc hl 
1fe0			 
1fe0			; PARSEV5 
1fe0 23				inc hl 
1fe1 22 23 f9			ld (cli_data_sp),hl 
1fe4 73				ld (hl), e 
1fe5 23				inc hl 
1fe6 72				ld (hl), d 
1fe7 d1				pop de 
1fe8 e1				pop hl 
1fe9				if DEBUG_FORTH_STACK_GUARD 
1fe9 cd e0 6b				call check_stacks 
1fec				endif 
1fec c9				ret 
1fed			 
1fed			 
1fed			; increase ret stack pointer and save hl to it 
1fed				 
1fed			FORTH_RSP_NEXT: macro 
1fed				call macro_forth_rsp_next 
1fed				endm 
1fed			 
1fed			macro_forth_rsp_next: 
1fed				if DEBUG_FORTH_STACK_GUARD 
1fed cd e0 6b				call check_stacks 
1ff0				endif 
1ff0 e5				push hl 
1ff1 d5				push de 
1ff2 eb				ex de,hl 
1ff3 2a 27 f9			ld hl,(cli_ret_sp) 
1ff6 23				inc hl 
1ff7 23				inc hl 
1ff8 22 27 f9			ld (cli_ret_sp),hl 
1ffb 73				ld (hl), e 
1ffc 23				inc hl 
1ffd 72				ld (hl), d 
1ffe d1				pop de 
1fff e1				pop hl 
2000				if DEBUG_FORTH_STACK_GUARD 
2000 cd e0 6b				call check_stacks 
2003				endif 
2003 c9				ret 
2004			 
2004			; get current ret stack pointer and save to hl  
2004				 
2004			FORTH_RSP_TOS: macro 
2004				call macro_forth_rsp_tos 
2004				endm 
2004			 
2004			macro_forth_rsp_tos: 
2004				;push de 
2004 2a 27 f9			ld hl,(cli_ret_sp) 
2007 cd 3f 20			call loadhlptrtohl 
200a				;ld e, (hl) 
200a				;inc hl 
200a				;ld d, (hl) 
200a				;ex de, hl 
200a					if DEBUG_FORTH_WORDS 
200a			;			DMARK "RST" 
200a						CALLMONITOR 
200a cd aa fd			call debug_vector  
200d				endm  
# End of macro CALLMONITOR
200d					endif 
200d				;pop de 
200d c9				ret 
200e			 
200e			; pop ret stack pointer 
200e				 
200e			FORTH_RSP_POP: macro 
200e				call macro_forth_rsp_pop 
200e				endm 
200e			 
200e			 
200e			macro_forth_rsp_pop: 
200e				if DEBUG_FORTH_STACK_GUARD 
200e			;		DMARK "RPP" 
200e cd e0 6b				call check_stacks 
2011					FORTH_CHK_RSP_UNDER 
2011 e5				push hl 
2012 d5				push de 
2013 2a 27 f9			ld hl,(cli_ret_sp) 
2016 11 e1 f8			ld de, cli_ret_stack 
2019 cd fc 0f			call cmp16 
201c da f7 6c			jp c, fault_rsp_under 
201f d1				pop de 
2020 e1				pop hl 
2021				endm 
# End of macro FORTH_CHK_RSP_UNDER
2021				endif 
2021 e5				push hl 
2022 2a 27 f9			ld hl,(cli_ret_sp) 
2025			 
2025			 
2025				if FORTH_ENABLE_FREE 
2025			 
2025					; get pointer 
2025			 
2025					push de 
2025					push hl 
2025			 
2025					ld e, (hl) 
2025					inc hl 
2025					ld d, (hl) 
2025			 
2025					ex de, hl 
2025					call free 
2025			 
2025					pop hl 
2025					pop de 
2025			 
2025			 
2025				endif 
2025			 
2025			 
2025 2b				dec hl 
2026 2b				dec hl 
2027 22 27 f9			ld (cli_ret_sp), hl 
202a				; do stack underflow checks 
202a e1				pop hl 
202b				if DEBUG_FORTH_STACK_GUARD 
202b cd e0 6b				call check_stacks 
202e					FORTH_CHK_RSP_UNDER 
202e e5				push hl 
202f d5				push de 
2030 2a 27 f9			ld hl,(cli_ret_sp) 
2033 11 e1 f8			ld de, cli_ret_stack 
2036 cd fc 0f			call cmp16 
2039 da f7 6c			jp c, fault_rsp_under 
203c d1				pop de 
203d e1				pop hl 
203e				endm 
# End of macro FORTH_CHK_RSP_UNDER
203e				endif 
203e c9				ret 
203f			 
203f			 
203f			 
203f			; routine to load word pointed to by hl into hl 
203f			 
203f			loadhlptrtohl: 
203f			 
203f d5				push de 
2040 5e				ld e, (hl) 
2041 23				inc hl 
2042 56				ld d, (hl) 
2043 eb				ex de, hl 
2044 d1				pop de 
2045			 
2045 c9				ret 
2046			 
2046			 
2046			 
2046			 
2046			 
2046			; push a number held in HL onto the data stack 
2046			; entry point for pushing a value when already in hl used in function above 
2046			 
2046			forth_push_numhl: 
2046			 
2046 e5				push hl    ; save value to push 
2047			 
2047			if DEBUG_FORTH_PUSH 
2047				; see if disabled 
2047			 
2047			 
2047 f5				push af 
2048 3a aa fd			ld a,(debug_vector) 
204b fe c9			cp $c9   ; ret 
204d			;	ld a, (os_view_disable) 
204d			;	cp '*' 
204d 28 34			jr z, .pskip2 
204f e5				push hl 
2050 e5			push hl 
2051 cd aa 0d			call clear_display 
2054 e1			pop hl 
2055 7c				ld a,h 
2056 21 fb f3			ld hl, os_word_scratch 
2059 cd e7 11			call hexout 
205c e1				pop hl 
205d 7d				ld a,l 
205e 21 fd f3			ld hl, os_word_scratch+2 
2061 cd e7 11			call hexout 
2064			 
2064 21 ff f3			ld hl, os_word_scratch+4 
2067 3e 00			ld a,0 
2069 77				ld (hl),a 
206a 11 fb f3			ld de,os_word_scratch 
206d 3e 28				ld a, display_row_2 
206f cd bd 0d				call str_at_display 
2072 11 ee 5d			ld de, .push_num 
2075 3e 00			ld a, display_row_1 
2077			 
2077 cd bd 0d				call str_at_display 
207a			 
207a			 
207a cd cd 0d			call update_display 
207d cd ed 0c			call delay1s 
2080 cd ed 0c			call delay1s 
2083			.pskip2:  
2083			 
2083 f1				pop af 
2084			endif	 
2084			 
2084			 
2084				FORTH_DSP_NEXT 
2084 cd d5 1f			call macro_forth_dsp_next 
2087				endm 
# End of macro FORTH_DSP_NEXT
2087			 
2087 2a 23 f9			ld hl, (cli_data_sp) 
208a			 
208a				; save item type 
208a 3e 02			ld a,  DS_TYPE_INUM 
208c 77				ld (hl), a 
208d 23				inc hl 
208e			 
208e				; get word off stack 
208e d1				pop de 
208f 7b				ld a,e 
2090 77				ld (hl), a 
2091 23				inc hl 
2092 7a				ld a,d 
2093 77				ld (hl), a 
2094			 
2094			if DEBUG_FORTH_PUSH 
2094 2b				dec hl 
2095 2b				dec hl 
2096 2b				dec hl 
2097						DMARK "PH5" 
2097 f5				push af  
2098 3a ac 20			ld a, (.dmark)  
209b 32 a0 fd			ld (debug_mark),a  
209e 3a ad 20			ld a, (.dmark+1)  
20a1 32 a1 fd			ld (debug_mark+1),a  
20a4 3a ae 20			ld a, (.dmark+2)  
20a7 32 a2 fd			ld (debug_mark+2),a  
20aa 18 03			jr .pastdmark  
20ac ..			.dmark: db "PH5"  
20af f1			.pastdmark: pop af  
20b0			endm  
# End of macro DMARK
20b0				CALLMONITOR 
20b0 cd aa fd			call debug_vector  
20b3				endm  
# End of macro CALLMONITOR
20b3			endif	 
20b3			 
20b3 c9				ret 
20b4			 
20b4			 
20b4			; Push a string to stack pointed to by hl 
20b4			 
20b4			forth_push_str: 
20b4			 
20b4			if DEBUG_FORTH_PUSH 
20b4						DMARK "PSQ" 
20b4 f5				push af  
20b5 3a c9 20			ld a, (.dmark)  
20b8 32 a0 fd			ld (debug_mark),a  
20bb 3a ca 20			ld a, (.dmark+1)  
20be 32 a1 fd			ld (debug_mark+1),a  
20c1 3a cb 20			ld a, (.dmark+2)  
20c4 32 a2 fd			ld (debug_mark+2),a  
20c7 18 03			jr .pastdmark  
20c9 ..			.dmark: db "PSQ"  
20cc f1			.pastdmark: pop af  
20cd			endm  
# End of macro DMARK
20cd				CALLMONITOR 
20cd cd aa fd			call debug_vector  
20d0				endm  
# End of macro CALLMONITOR
20d0			endif	 
20d0			 
20d0			 
20d0			    
20d0 e5				push hl 
20d1 e5				push hl 
20d2			 
20d2			;	ld a, 0   ; find end of string 
20d2 cd 44 13			call strlenz 
20d5			if DEBUG_FORTH_PUSH 
20d5						DMARK "PQ2" 
20d5 f5				push af  
20d6 3a ea 20			ld a, (.dmark)  
20d9 32 a0 fd			ld (debug_mark),a  
20dc 3a eb 20			ld a, (.dmark+1)  
20df 32 a1 fd			ld (debug_mark+1),a  
20e2 3a ec 20			ld a, (.dmark+2)  
20e5 32 a2 fd			ld (debug_mark+2),a  
20e8 18 03			jr .pastdmark  
20ea ..			.dmark: db "PQ2"  
20ed f1			.pastdmark: pop af  
20ee			endm  
# End of macro DMARK
20ee				CALLMONITOR 
20ee cd aa fd			call debug_vector  
20f1				endm  
# End of macro CALLMONITOR
20f1			endif	 
20f1 eb				ex de, hl 
20f2 e1				pop hl   ; get ptr to start of string 
20f3			if DEBUG_FORTH_PUSH 
20f3						DMARK "PQ3" 
20f3 f5				push af  
20f4 3a 08 21			ld a, (.dmark)  
20f7 32 a0 fd			ld (debug_mark),a  
20fa 3a 09 21			ld a, (.dmark+1)  
20fd 32 a1 fd			ld (debug_mark+1),a  
2100 3a 0a 21			ld a, (.dmark+2)  
2103 32 a2 fd			ld (debug_mark+2),a  
2106 18 03			jr .pastdmark  
2108 ..			.dmark: db "PQ3"  
210b f1			.pastdmark: pop af  
210c			endm  
# End of macro DMARK
210c				CALLMONITOR 
210c cd aa fd			call debug_vector  
210f				endm  
# End of macro CALLMONITOR
210f			endif	 
210f 19				add hl,de 
2110			if DEBUG_FORTH_PUSH 
2110						DMARK "PQE" 
2110 f5				push af  
2111 3a 25 21			ld a, (.dmark)  
2114 32 a0 fd			ld (debug_mark),a  
2117 3a 26 21			ld a, (.dmark+1)  
211a 32 a1 fd			ld (debug_mark+1),a  
211d 3a 27 21			ld a, (.dmark+2)  
2120 32 a2 fd			ld (debug_mark+2),a  
2123 18 03			jr .pastdmark  
2125 ..			.dmark: db "PQE"  
2128 f1			.pastdmark: pop af  
2129			endm  
# End of macro DMARK
2129				CALLMONITOR 
2129 cd aa fd			call debug_vector  
212c				endm  
# End of macro CALLMONITOR
212c			endif	 
212c			 
212c 2b				dec hl    ; see if there is an optional trailing double quote 
212d 7e				ld a,(hl) 
212e fe 22			cp '"' 
2130 20 03			jr nz, .strnoq 
2132 3e 00			ld a, 0      ; get rid of double quote 
2134 77				ld (hl), a 
2135 23			.strnoq: inc hl 
2136			 
2136 3e 00			ld a, 0 
2138 77				ld (hl), a     ; add null term and get rid of trailing double quote 
2139			 
2139 13				inc de ; add one for the type string 
213a 13				inc de ; add one for null term??? 
213b			 
213b				; tos is get string pointer again 
213b				; de contains space to allocate 
213b				 
213b d5				push de 
213c			 
213c eb				ex de, hl 
213d			 
213d				;push af 
213d			 
213d			if DEBUG_FORTH_PUSH 
213d						DMARK "PHm" 
213d f5				push af  
213e 3a 52 21			ld a, (.dmark)  
2141 32 a0 fd			ld (debug_mark),a  
2144 3a 53 21			ld a, (.dmark+1)  
2147 32 a1 fd			ld (debug_mark+1),a  
214a 3a 54 21			ld a, (.dmark+2)  
214d 32 a2 fd			ld (debug_mark+2),a  
2150 18 03			jr .pastdmark  
2152 ..			.dmark: db "PHm"  
2155 f1			.pastdmark: pop af  
2156			endm  
# End of macro DMARK
2156				CALLMONITOR 
2156 cd aa fd			call debug_vector  
2159				endm  
# End of macro CALLMONITOR
2159			endif	 
2159 cd b9 13			call malloc	; on ret hl now contains allocated memory 
215c				if DEBUG_FORTH_MALLOC_GUARD 
215c cc 46 5e				call z,malloc_error 
215f				endif 
215f			 
215f				 
215f c1				pop bc    ; get length 
2160 d1				pop de   ;  get string start    
2161			 
2161				; hl has destination from malloc 
2161			 
2161 eb				ex de, hl    ; prep for ldir 
2162			 
2162 d5				push de   ; save malloc area for DSP later 
2163				;push hl   ; save malloc area for DSP later 
2163			 
2163			if DEBUG_FORTH_PUSH 
2163						DMARK "PHc" 
2163 f5				push af  
2164 3a 78 21			ld a, (.dmark)  
2167 32 a0 fd			ld (debug_mark),a  
216a 3a 79 21			ld a, (.dmark+1)  
216d 32 a1 fd			ld (debug_mark+1),a  
2170 3a 7a 21			ld a, (.dmark+2)  
2173 32 a2 fd			ld (debug_mark+2),a  
2176 18 03			jr .pastdmark  
2178 ..			.dmark: db "PHc"  
217b f1			.pastdmark: pop af  
217c			endm  
# End of macro DMARK
217c				CALLMONITOR 
217c cd aa fd			call debug_vector  
217f				endm  
# End of macro CALLMONITOR
217f			endif	 
217f			 
217f			 
217f ed b0			ldir 
2181			 
2181			 
2181				; push malloc to data stack     macro?????  
2181			 
2181				FORTH_DSP_NEXT 
2181 cd d5 1f			call macro_forth_dsp_next 
2184				endm 
# End of macro FORTH_DSP_NEXT
2184			 
2184				; save value and type 
2184			 
2184 2a 23 f9			ld hl, (cli_data_sp) 
2187			 
2187				; save item type 
2187 3e 01			ld a,  DS_TYPE_STR 
2189 77				ld (hl), a 
218a 23				inc hl 
218b			 
218b				; get malloc word off stack 
218b d1				pop de 
218c 73				ld (hl), e 
218d 23				inc hl 
218e 72				ld (hl), d 
218f			 
218f			 
218f			 
218f			if DEBUG_FORTH_PUSH 
218f 2a 23 f9			ld hl, (cli_data_sp) 
2192						DMARK "PHS" 
2192 f5				push af  
2193 3a a7 21			ld a, (.dmark)  
2196 32 a0 fd			ld (debug_mark),a  
2199 3a a8 21			ld a, (.dmark+1)  
219c 32 a1 fd			ld (debug_mark+1),a  
219f 3a a9 21			ld a, (.dmark+2)  
21a2 32 a2 fd			ld (debug_mark+2),a  
21a5 18 03			jr .pastdmark  
21a7 ..			.dmark: db "PHS"  
21aa f1			.pastdmark: pop af  
21ab			endm  
# End of macro DMARK
21ab				CALLMONITOR 
21ab cd aa fd			call debug_vector  
21ae				endm  
# End of macro CALLMONITOR
21ae			;	ex de,hl 
21ae			endif	 
21ae				; in case of spaces, skip the ptr past the copied string 
21ae				;pop af 
21ae				;ld (cli_origptr),hl 
21ae			 
21ae c9				ret 
21af			 
21af			 
21af			 
21af			; TODO ascii push input onto stack given hl to start of input 
21af			 
21af			; identify type 
21af			; if starts with a " then a string 
21af			; otherwise it is a number 
21af			;  
21af			; if a string 
21af			;     scan for ending " to get length of string to malloc for + 1 
21af			;     malloc 
21af			;     put pointer to string on stack first byte flags as string 
21af			; 
21af			; else a number 
21af			;    look for number format identifier 
21af			;    $xx hex 
21af			;    %xxxxx bin 
21af			;    xxxxx decimal 
21af			;    convert number to 16bit word.  
21af			;    malloc word + 1 with flag to identiy as num 
21af			;    put pointer to number on stack 
21af			;   
21af			;  
21af			  
21af			forth_apush: 
21af				; kernel push 
21af			 
21af			if DEBUG_FORTH_PUSH 
21af						DMARK "PSH" 
21af f5				push af  
21b0 3a c4 21			ld a, (.dmark)  
21b3 32 a0 fd			ld (debug_mark),a  
21b6 3a c5 21			ld a, (.dmark+1)  
21b9 32 a1 fd			ld (debug_mark+1),a  
21bc 3a c6 21			ld a, (.dmark+2)  
21bf 32 a2 fd			ld (debug_mark+2),a  
21c2 18 03			jr .pastdmark  
21c4 ..			.dmark: db "PSH"  
21c7 f1			.pastdmark: pop af  
21c8			endm  
# End of macro DMARK
21c8				CALLMONITOR 
21c8 cd aa fd			call debug_vector  
21cb				endm  
# End of macro CALLMONITOR
21cb			endif	 
21cb				; identify input type 
21cb			 
21cb 7e				ld a,(hl) 
21cc			 
21cc fe 23			cp '#' 
21ce ca 08 22			jp z, .fapdec 
21d1			 
21d1			 
21d1 fe 22			cp '"' 
21d3 28 0a			jr z, .fapstr 
21d5 fe 24			cp '$' 
21d7 ca ff 21			jp z, .faphex 
21da fe 25			cp '%' 
21dc ca e7 21			jp z, .fapbin 
21df			;	cp 'b' 
21df			;	jp z, .fabin 
21df				; else decimal 
21df			 
21df				; TODO do decimal conversion 
21df				; decimal is stored as a 16bit word 
21df			 
21df				; by default everything is a string if type is not detected 
21df			.fapstr: ; 
21df fe 22			cp '"' 
21e1 20 01			jr nz, .strnoqu 
21e3 23				inc hl 
21e4			.strnoqu: 
21e4 c3 b4 20			jp forth_push_str 
21e7			 
21e7			 
21e7			 
21e7			.fapbin:    ; push a binary string.  
21e7 11 00 00			ld de, 0   ; hold a 16bit value 
21ea			 
21ea 23			.fapbinshift:	inc hl  
21eb 7e				ld a,(hl) 
21ec fe 00			cp 0     ; done scanning  
21ee 28 0b			jr z, .fapbdone  	; got it in HL so push  
21f0			 
21f0				; left shift de 
21f0 eb				ex de, hl	 
21f1 29				add hl, hl 
21f2			 
21f2				; is 1 
21f2 fe 31			cp '1' 
21f4 20 02			jr nz, .binzero 
21f6 cb 4d			bit 1, l 
21f8			.binzero: 
21f8 eb				ex de, hl	 ; save current de 
21f9 18 ef			jr .fapbinshift 
21fb			 
21fb			.fapbdone: 
21fb eb				ex de, hl 
21fc c3 46 20			jp forth_push_numhl 
21ff			 
21ff			 
21ff			.faphex:   ; hex is always stored as a 16bit word 
21ff				; skip number prefix 
21ff 23				inc hl 
2200				; turn ascii into number 
2200 cd 9d 12			call get_word_hl	; ret 16bit word in hl 
2203			 
2203 c3 46 20			jp forth_push_numhl 
2206			 
2206 00				 nop 
2207			 
2207			.fabin:   ; TODO bin conversion 
2207			 
2207			 
2207 c9				ret 
2208			.fapdec:	 
2208				; string to dec conversion 
2208 23				inc hl 
2209 eb				ex de, hl 
220a cd db 12			call string_to_uint16 
220d c3 46 20			jp forth_push_numhl 
2210 c9				ret 
2211				 
2211			;atoui_16: 
2211			 
2211			; get either a string ptr or a 16bit word from the data stack 
2211			 
2211			FORTH_DSP: macro 
2211				call macro_forth_dsp 
2211				endm 
2211			 
2211			macro_forth_dsp: 
2211				; data stack pointer points to current word on tos 
2211			 
2211 2a 23 f9			ld hl,(cli_data_sp) 
2214			 
2214				if DEBUG_FORTH_PUSH 
2214						DMARK "DSP" 
2214 f5				push af  
2215 3a 29 22			ld a, (.dmark)  
2218 32 a0 fd			ld (debug_mark),a  
221b 3a 2a 22			ld a, (.dmark+1)  
221e 32 a1 fd			ld (debug_mark+1),a  
2221 3a 2b 22			ld a, (.dmark+2)  
2224 32 a2 fd			ld (debug_mark+2),a  
2227 18 03			jr .pastdmark  
2229 ..			.dmark: db "DSP"  
222c f1			.pastdmark: pop af  
222d			endm  
# End of macro DMARK
222d			 
222d cd 79 5e				call display_data_sp 
2230				;call break_point_state 
2230				;rst 030h 
2230				CALLMONITOR 
2230 cd aa fd			call debug_vector  
2233				endm  
# End of macro CALLMONITOR
2233				endif 
2233			 
2233 c9				ret 
2234			 
2234			; return hl to start of value on stack 
2234			 
2234			FORTH_DSP_VALUE: macro 
2234				call macro_forth_dsp_value 
2234				endm 
2234			 
2234			macro_forth_dsp_value: 
2234			 
2234				FORTH_DSP 
2234 cd 11 22			call macro_forth_dsp 
2237				endm 
# End of macro FORTH_DSP
2237			 
2237 d5				push de 
2238			 
2238 23				inc hl ; skip type 
2239			 
2239 5e				ld e, (hl) 
223a 23				inc hl 
223b 56				ld d, (hl) 
223c eb				ex de,hl  
223d			 
223d d1				pop de 
223e			 
223e c9				ret 
223f			 
223f			; return hl to start of value to second item on stack 
223f			 
223f			FORTH_DSP_VALUEM1: macro 
223f				call macro_forth_dsp_value_m1 
223f				endm 
223f			 
223f			macro_forth_dsp_value_m1: 
223f			 
223f				FORTH_DSP 
223f cd 11 22			call macro_forth_dsp 
2242				endm 
# End of macro FORTH_DSP
2242			 
2242 2b				dec hl 
2243 2b				dec hl 
2244			;	dec hl 
2244			 
2244 d5				push de 
2245			 
2245 5e				ld e, (hl) 
2246 23				inc hl 
2247 56				ld d, (hl) 
2248 eb				ex de,hl  
2249			 
2249 d1				pop de 
224a			 
224a c9				ret 
224b			 
224b				 
224b			 
224b			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
224b			 
224b			FORTH_DSP_POP: macro 
224b				call macro_forth_dsp_pop 
224b				endm 
224b			 
224b			 
224b			; get the tos data type 
224b			 
224b			FORTH_DSP_TYPE:   macro 
224b			 
224b				;FORTH_DSP_VALUE 
224b				FORTH_DSP 
224b				 
224b				; hl points to value 
224b				; check type 
224b			 
224b				ld a,(hl) 
224b			 
224b				endm 
224b			 
224b			; load the tos value into hl 
224b			 
224b			 
224b			FORTH_DSP_VALUEHL:  macro 
224b				call macro_dsp_valuehl 
224b				endm 
224b			 
224b			 
224b			 
224b			macro_dsp_valuehl: 
224b				FORTH_DSP_VALUE 
224b cd 34 22			call macro_forth_dsp_value 
224e				endm 
# End of macro FORTH_DSP_VALUE
224e			 
224e				;FORTH_ERR_TOS_NOTNUM 
224e			 
224e				;inc hl   ; skip type id 
224e			 
224e			;	push de 
224e			; 
224e			;	ld e, (hl) 
224e			;	inc hl 
224e			;	ld d, (hl) 
224e			;	ex de,hl  
224e			 
224e			;	pop de 
224e			 
224e				if DEBUG_FORTH_PUSH 
224e						DMARK "DVL" 
224e f5				push af  
224f 3a 63 22			ld a, (.dmark)  
2252 32 a0 fd			ld (debug_mark),a  
2255 3a 64 22			ld a, (.dmark+1)  
2258 32 a1 fd			ld (debug_mark+1),a  
225b 3a 65 22			ld a, (.dmark+2)  
225e 32 a2 fd			ld (debug_mark+2),a  
2261 18 03			jr .pastdmark  
2263 ..			.dmark: db "DVL"  
2266 f1			.pastdmark: pop af  
2267			endm  
# End of macro DMARK
2267				CALLMONITOR 
2267 cd aa fd			call debug_vector  
226a				endm  
# End of macro CALLMONITOR
226a				endif 
226a c9				ret 
226b			 
226b			forth_apushstrhl:      
226b				; push of string requires use of cli_origptr 
226b				; bodge use 
226b			 
226b				; get current cli_origptr, save, update with temp pointer  
226b ed 5b 73 f9		ld de, (cli_origptr) 
226f 22 73 f9			ld (cli_origptr), hl 
2272 d5				push de 
2273 cd af 21			call forth_apush 
2276 d1				pop de 
2277 ed 53 73 f9		ld (cli_origptr), de 
227b c9			        ret	 
227c			 
227c			 
227c			; increase loop stack pointer and save hl to it 
227c				 
227c			FORTH_LOOP_NEXT: macro 
227c				call macro_forth_loop_next 
227c				;nop 
227c				endm 
227c			 
227c			macro_forth_loop_next: 
227c				if DEBUG_FORTH_STACK_GUARD 
227c cd e0 6b				call check_stacks 
227f				endif 
227f e5				push hl 
2280 d5				push de 
2281 eb				ex de,hl 
2282 2a 25 f9			ld hl,(cli_loop_sp) 
2285 23				inc hl 
2286 23				inc hl 
2287					if DEBUG_FORTH_WORDS 
2287						DMARK "LNX" 
2287 f5				push af  
2288 3a 9c 22			ld a, (.dmark)  
228b 32 a0 fd			ld (debug_mark),a  
228e 3a 9d 22			ld a, (.dmark+1)  
2291 32 a1 fd			ld (debug_mark+1),a  
2294 3a 9e 22			ld a, (.dmark+2)  
2297 32 a2 fd			ld (debug_mark+2),a  
229a 18 03			jr .pastdmark  
229c ..			.dmark: db "LNX"  
229f f1			.pastdmark: pop af  
22a0			endm  
# End of macro DMARK
22a0						CALLMONITOR 
22a0 cd aa fd			call debug_vector  
22a3				endm  
# End of macro CALLMONITOR
22a3					endif 
22a3 22 25 f9			ld (cli_loop_sp),hl 
22a6 73				ld (hl), e 
22a7 23				inc hl 
22a8 72				ld (hl), d 
22a9 d1				pop de    ; been reversed so save a swap on restore 
22aa e1				pop hl 
22ab				if DEBUG_FORTH_STACK_GUARD 
22ab cd e0 6b				call check_stacks 
22ae				endif 
22ae c9				ret 
22af			 
22af			; get current ret stack pointer and save to hl  
22af				 
22af			FORTH_LOOP_TOS: macro 
22af				call macro_forth_loop_tos 
22af				endm 
22af			 
22af			macro_forth_loop_tos: 
22af d5				push de 
22b0 2a 25 f9			ld hl,(cli_loop_sp) 
22b3 5e				ld e, (hl) 
22b4 23				inc hl 
22b5 56				ld d, (hl) 
22b6 eb				ex de, hl 
22b7 d1				pop de 
22b8 c9				ret 
22b9			 
22b9			; pop loop stack pointer 
22b9				 
22b9			FORTH_LOOP_POP: macro 
22b9				call macro_forth_loop_pop 
22b9				endm 
22b9			 
22b9			 
22b9			macro_forth_loop_pop: 
22b9				if DEBUG_FORTH_STACK_GUARD 
22b9					DMARK "LPP" 
22b9 f5				push af  
22ba 3a ce 22			ld a, (.dmark)  
22bd 32 a0 fd			ld (debug_mark),a  
22c0 3a cf 22			ld a, (.dmark+1)  
22c3 32 a1 fd			ld (debug_mark+1),a  
22c6 3a d0 22			ld a, (.dmark+2)  
22c9 32 a2 fd			ld (debug_mark+2),a  
22cc 18 03			jr .pastdmark  
22ce ..			.dmark: db "LPP"  
22d1 f1			.pastdmark: pop af  
22d2			endm  
# End of macro DMARK
22d2 cd e0 6b				call check_stacks 
22d5					FORTH_CHK_LOOP_UNDER 
22d5 e5				push hl 
22d6 d5				push de 
22d7 2a 25 f9			ld hl,(cli_loop_sp) 
22da 11 5f f8			ld de, cli_loop_stack 
22dd cd fc 0f			call cmp16 
22e0 da fd 6c			jp c, fault_loop_under 
22e3 d1				pop de 
22e4 e1				pop hl 
22e5				endm 
# End of macro FORTH_CHK_LOOP_UNDER
22e5				endif 
22e5 e5				push hl 
22e6 2a 25 f9			ld hl,(cli_loop_sp) 
22e9 2b				dec hl 
22ea 2b				dec hl 
22eb 22 25 f9			ld (cli_loop_sp), hl 
22ee				; TODO do stack underflow checks 
22ee e1				pop hl 
22ef				if DEBUG_FORTH_STACK_GUARD 
22ef cd e0 6b				call check_stacks 
22f2					FORTH_CHK_LOOP_UNDER 
22f2 e5				push hl 
22f3 d5				push de 
22f4 2a 25 f9			ld hl,(cli_loop_sp) 
22f7 11 5f f8			ld de, cli_loop_stack 
22fa cd fc 0f			call cmp16 
22fd da fd 6c			jp c, fault_loop_under 
2300 d1				pop de 
2301 e1				pop hl 
2302				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2302				endif 
2302 c9				ret 
2303			 
2303			macro_forth_dsp_pop: 
2303			 
2303 e5				push hl 
2304			 
2304				; release malloc data 
2304			 
2304				if DEBUG_FORTH_STACK_GUARD 
2304 cd e0 6b				call check_stacks 
2307					FORTH_CHK_DSP_UNDER 
2307 e5				push hl 
2308 d5				push de 
2309 2a 23 f9			ld hl,(cli_data_sp) 
230c 11 5d f6			ld de, cli_data_stack 
230f cd fc 0f			call cmp16 
2312 da f1 6c			jp c, fault_dsp_under 
2315 d1				pop de 
2316 e1				pop hl 
2317				endm 
# End of macro FORTH_CHK_DSP_UNDER
2317				endif 
2317				;ld hl,(cli_data_sp) 
2317			if DEBUG_FORTH_DOT 
2317				DMARK "DPP" 
2317 f5				push af  
2318 3a 2c 23			ld a, (.dmark)  
231b 32 a0 fd			ld (debug_mark),a  
231e 3a 2d 23			ld a, (.dmark+1)  
2321 32 a1 fd			ld (debug_mark+1),a  
2324 3a 2e 23			ld a, (.dmark+2)  
2327 32 a2 fd			ld (debug_mark+2),a  
232a 18 03			jr .pastdmark  
232c ..			.dmark: db "DPP"  
232f f1			.pastdmark: pop af  
2330			endm  
# End of macro DMARK
2330				CALLMONITOR 
2330 cd aa fd			call debug_vector  
2333				endm  
# End of macro CALLMONITOR
2333			endif	 
2333			 
2333			 
2333			if FORTH_ENABLE_DSPPOPFREE 
2333			 
2333				FORTH_DSP 
2333 cd 11 22			call macro_forth_dsp 
2336				endm 
# End of macro FORTH_DSP
2336			 
2336 7e				ld a, (hl) 
2337 fe 01			cp DS_TYPE_STR 
2339 20 23			jr nz, .skippopfree 
233b			 
233b				FORTH_DSP_VALUEHL 
233b cd 4b 22			call macro_dsp_valuehl 
233e				endm 
# End of macro FORTH_DSP_VALUEHL
233e 00				nop 
233f			if DEBUG_FORTH_DOT 
233f				DMARK "DPf" 
233f f5				push af  
2340 3a 54 23			ld a, (.dmark)  
2343 32 a0 fd			ld (debug_mark),a  
2346 3a 55 23			ld a, (.dmark+1)  
2349 32 a1 fd			ld (debug_mark+1),a  
234c 3a 56 23			ld a, (.dmark+2)  
234f 32 a2 fd			ld (debug_mark+2),a  
2352 18 03			jr .pastdmark  
2354 ..			.dmark: db "DPf"  
2357 f1			.pastdmark: pop af  
2358			endm  
# End of macro DMARK
2358				CALLMONITOR 
2358 cd aa fd			call debug_vector  
235b				endm  
# End of macro CALLMONITOR
235b			endif	 
235b cd 83 14			call free 
235e			.skippopfree: 
235e				 
235e			 
235e			endif 
235e			 
235e			if DEBUG_FORTH_DOT_KEY 
235e				DMARK "DP2" 
235e				CALLMONITOR 
235e			endif	 
235e			 
235e				; move pointer down 
235e			 
235e 2a 23 f9			ld hl,(cli_data_sp) 
2361 2b				dec hl 
2362 2b				dec hl 
2363			; PARSEV5 
2363 2b				dec hl 
2364 22 23 f9			ld (cli_data_sp), hl 
2367			 
2367				if DEBUG_FORTH_STACK_GUARD 
2367 cd e0 6b				call check_stacks 
236a					FORTH_CHK_DSP_UNDER 
236a e5				push hl 
236b d5				push de 
236c 2a 23 f9			ld hl,(cli_data_sp) 
236f 11 5d f6			ld de, cli_data_stack 
2372 cd fc 0f			call cmp16 
2375 da f1 6c			jp c, fault_dsp_under 
2378 d1				pop de 
2379 e1				pop hl 
237a				endm 
# End of macro FORTH_CHK_DSP_UNDER
237a				endif 
237a			 
237a e1				pop hl 
237b			 
237b c9				ret 
237c			 
237c			getwordathl: 
237c				; hl points to an address 
237c				; load hl with the word at that address 
237c			 
237c d5				push de 
237d			 
237d 5e				ld e, (hl) 
237e 23				inc hl 
237f 56				ld d, (hl) 
2380 eb				ex de, hl 
2381			 
2381 d1				pop de 
2382 c9				ret 
2383			 
2383			 
2383			; functions to manuplite stack pointers 
2383			 
2383			; generate fragment to set hl to be pointer to a stack item 
2383			 
2383			FORTH_DSP_PTR: macro  x 
2383				ld hl,(cli_data_sp) 
2383				ld de, x * 3 
2383				sbc hl, de 
2383				endm 
2383			 
2383			 
2383			 
2383			; copy point in hl to stack tmp storage slots 1-4 
2383			hltostack1: 
2383 11 f3 f0			ld de, os_stack_1  
2386 c3 b1 23			jp hltostackmv 
2389			 
2389			hltostack2:  
2389 11 f0 f0			ld de, os_stack_2 
238c c3 b1 23			jp hltostackmv 
238f			 
238f			hltostack3:  
238f 11 ed f0			ld de, os_stack_3 
2392 c3 b1 23			jp hltostackmv 
2395			 
2395			hltostack4:  
2395 11 ea f0			ld de, os_stack_4  
2398 c3 b1 23			jp hltostackmv 
239b			 
239b			; copy to point in hl from stack tmp storage slots 1-4 
239b			hlfromstack1: 
239b 11 f3 f0			ld de, os_stack_1 
239e c3 b0 23			jp hlfromsttackmv 
23a1			 
23a1			hlfromstack2:  
23a1 11 f0 f0			ld de, os_stack_2 
23a4 c3 b0 23			jp hlfromsttackmv 
23a7			 
23a7			hlfromstack3:  
23a7 11 ed f0			ld de, os_stack_3 
23aa c3 b0 23			jp hlfromsttackmv 
23ad			 
23ad			hlfromstack4:  
23ad 11 ea f0			ld de, os_stack_4 
23b0			 
23b0			hlfromsttackmv: 
23b0 eb				ex de, hl 
23b1			 
23b1			hltostackmv: 
23b1			 
23b1				; do stack move 
23b1 c5				push bc 
23b2 01 03 00			ld bc, 3 
23b5 ed b0			ldir  
23b7 c1				pop bc	 
23b8 c9				ret 
23b9			 
23b9			; eof 
23b9			 
# End of file forth_stackopsv5.asm
23b9			endif 
23b9			 
23b9			loadwordinhl:	 
23b9			 
23b9 d5				push de 
23ba			 
23ba 5e				ld e, (hl) 
23bb 23				inc hl 
23bc 56				ld d, (hl) 
23bd eb				ex de,hl  
23be			 
23be d1				pop de 
23bf			 
23bf c9				ret 
23c0			 
23c0			user_word_eol:  
23c0				; hl contains the pointer to where to create a linked list item from the end 
23c0				; of the user dict to continue on at the system word dict 
23c0				 
23c0				; poke the stub of the word list linked list to repoint to rom words 
23c0			 
23c0				; stub format 
23c0				; db   word id 
23c0				; dw    link to next word 
23c0			        ; db char length of token 
23c0				; db string + 0 term 
23c0				; db exec code....  
23c0			 
23c0 3e 00			ld a, WORD_SYS_ROOT     ; root word 
23c2 77				ld (hl), a		; word id 
23c3 23				inc hl 
23c4			 
23c4 11 8f 25			ld de, sysdict 
23c7 73				ld (hl), e		; next word link ie system dict 
23c8 23				inc hl 
23c9 72				ld (hl), d		; next word link ie system dict 
23ca 23				inc hl	 
23cb			 
23cb			;	ld (hl), sysdict		; next word link ie system dict 
23cb			;	inc hl 
23cb			;	inc hl 
23cb			 
23cb			;	inc hl 
23cb			;	inc hl 
23cb			 
23cb 3e 02			ld a, 2			; word length is 0 
23cd 77				ld (hl), a	 
23ce 23				inc hl 
23cf			 
23cf 3e 7e			ld a, '~'			; word length is 0 
23d1 77				ld (hl), a	 
23d2 23				inc hl 
23d3 3e 00			ld a, 0			; save empty word 
23d5 77				ld (hl), a 
23d6			 
23d6 c9				ret 
23d7			 
23d7				 
23d7			 
23d7			forthexec_cleanup: 
23d7				FORTH_RSP_POP 
23d7 cd 0e 20			call macro_forth_rsp_pop 
23da				endm 
# End of macro FORTH_RSP_POP
23da c9				ret 
23db			 
23db			forth_call_hl: 
23db				; taking hl 
23db e5				push hl 
23dc c9				ret 
23dd			 
23dd			; this is called to reset Forth system but keep existing uwords etc 
23dd			 
23dd			forth_warmstart: 
23dd				; setup stack over/under flow checks 
23dd				if DEBUG_FORTH_STACK_GUARD 
23dd cd c6 6b				call chk_stk_init 
23e0				endif 
23e0			 
23e0				; init stack pointers  - * these stacks go upwards *  
23e0 21 e1 f8			ld hl, cli_ret_stack 
23e3 22 27 f9			ld (cli_ret_sp), hl	 
23e6				; set bottom of stack 
23e6 3e 00			ld a,0 
23e8 77				ld (hl),a 
23e9 23				inc hl 
23ea 77				ld (hl),a 
23eb			 
23eb 21 5d f6			ld hl, cli_data_stack 
23ee 22 23 f9			ld (cli_data_sp), hl	 
23f1				; set bottom of stack 
23f1 3e 00			ld a,0 
23f3 77				ld (hl),a 
23f4 23				inc hl 
23f5 77				ld (hl),a 
23f6			 
23f6 21 5f f8			ld hl, cli_loop_stack 
23f9 22 25 f9			ld (cli_loop_sp), hl	 
23fc				; set bottom of stack 
23fc 3e 00			ld a,0 
23fe 77				ld (hl),a 
23ff 23				inc hl 
2400 77				ld (hl),a 
2401			 
2401				; init extent of current open file 
2401			 
2401 3e 00			ld a, 0 
2403 32 9f f9			ld (store_openext), a 
2406			 
2406 c9				ret 
2407			 
2407			 
2407			 
2407			; Cold Start - this is called to setup the whole Forth system 
2407			 
2407			forth_init: 
2407			 
2407				; setup stack over/under flow checks 
2407			 
2407			;	if DEBUG_FORTH_STACK_GUARD 
2407			;		call chk_stk_init 
2407			;	endif 
2407			 
2407				; enable auto display updates (slow.....) 
2407			 
2407 3e 01			ld a, 1 
2409 32 71 f9			ld (cli_autodisplay), a 
240c			 
240c				; if storage is in use disable long reads for now 
240c 3e 00			ld a, 0 
240e 32 aa f9			ld (store_longread), a 
2411			 
2411			 
2411				; show start up screen 
2411			 
2411 cd aa 0d			call clear_display 
2414			 
2414 3e 00			ld a,0 
2416 32 93 f9			ld (f_cursor_ptr), a 
2419			 
2419				; set start of word list in start of ram - for use when creating user words 
2419			 
2419 21 00 80			ld hl, baseram 
241c 22 f3 f3			ld (os_last_new_uword), hl 
241f cd c0 23			call user_word_eol 
2422				 
2422			;		call display_data_sp 
2422			;		call next_page_prompt 
2422			 
2422			 
2422			 
2422			 
2422 c9				ret 
2423			 
2423 .. 00		.bootforth: db " Forth Kernel Init ",0 
2437			 
2437			; TODO push to stack 
2437			 
2437			;  
2437			 
2437			if FORTH_PARSEV2 
2437			 
2437			 
2437				include "forth_parserv2.asm" 
2437			 
2437			endif 
2437			 
2437			 
2437			; parse cli version 1 
2437			 
2437			if FORTH_PARSEV1 
2437			 
2437			 
2437			 
2437			      include "forth_parserv1.asm" 
2437			endif 
2437				 
2437			if FORTH_PARSEV3 
2437			 
2437			 
2437			 
2437			      include "forth_parserv3.asm" 
2437				include "forth_wordsv3.asm" 
2437			endif 
2437			 
2437			if FORTH_PARSEV4 
2437			 
2437			 
2437			 
2437			      include "forth_parserv4.asm" 
2437				include "forth_wordsv4.asm" 
2437			endif 
2437			 
2437			if FORTH_PARSEV5 
2437			 
2437			 
2437			 
2437			      include "forth_parserv5.asm" 
2437			 
2437			 
2437			; A better parser without using malloc and string copies all over the place.  
2437			; Exec in situ should be faster 
2437			 
2437			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
2437			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
2437			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
2437			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
2437			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
2437			WORD_SYS_END: equ 0   ; Opcode for all user words 
2437			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
2437			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
2437			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
2437			 
2437			; Core word preamble macro 
2437			 
2437			CWHEAD:   macro nxtword opcode lit len opflags 
2437				db WORD_SYS_CORE+opcode             
2437				; internal op code number 
2437				dw nxtword            
2437				; link to next dict word block 
2437				db len + 1 
2437				; literal length of dict word inc zero term 
2437				db lit,0              
2437				; literal dict word 
2437			        ; TODO db opflags        
2437				endm 
2437			 
2437			 
2437			NEXTW: macro  
2437				jp macro_next 
2437				endm 
2437			 
2437			macro_next: 
2437			if DEBUG_FORTH_PARSE_KEY 
2437				DMARK "NXT" 
2437				CALLMONITOR 
2437			endif	 
2437			;	inc hl  ; skip token null term  
2437 ed 4b 75 f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
243b ed 5b 73 f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
243f 2a f7 f3			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2442			if DEBUG_FORTH_PARSE_KEY 
2442				DMARK "}AA" 
2442				CALLMONITOR 
2442			endif	 
2442 c3 45 25			jp execnext 
2445				;jp exec1 
2445			       
2445			 
2445			 
2445			; Another go at the parser to compile  
2445			 
2445			 
2445			; TODO rework parser to change all of the string words to byte tokens 
2445			; TODO do a search for  
2445			 
2445			; TODO first run normal parser to zero term sections 
2445			; TODO for each word do a token look up to get the op code 
2445			; TODO need some means to flag to the exec that this is a byte code form    
2445			 
2445			 
2445			forthcompile: 
2445			 
2445			; 
2445			; line parse: 
2445			;       parse raw input buffer 
2445			;       tokenise the words 
2445			;       malloc new copy (for looping etc) 
2445			;       copy to malloc + current pc in line to start of string and add line term 
2445			;       save on new rsp 
2445			; 
2445			 
2445			; hl to point to the line to tokenise 
2445			 
2445			;	push hl 
2445 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2448			 
2448			;	ld a,0		; string term on input 
2448			;	call strlent 
2448			 
2448			;	ld (os_tok_len), hl	 ; save string length 
2448			 
2448			;if DEBUG_FORTH_TOK 
2448			;	ex de,hl		 
2448			;endif 
2448			 
2448			;	pop hl 		; get back string pointer 
2448			 
2448			if DEBUG_FORTH_TOK 
2448						DMARK "TOc" 
2448				CALLMONITOR 
2448			endif 
2448 7e			.cptoken2:    ld a,(hl) 
2449 23				inc hl 
244a fe 7f			cp FORTH_END_BUFFER 
244c 28 29			jr z, .cptokendone2 
244e fe 00			cp 0 
2450 28 25			jr z, .cptokendone2 
2452 fe 22			cp '"' 
2454 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2456 fe 20			cp ' ' 
2458 20 ee			jr nz,  .cptoken2 
245a			 
245a			; TODO consume comments held between ( and ) 
245a			 
245a				; we have a space so change to zero term for dict match later 
245a 2b				dec hl 
245b 3e 00			ld a,0 
245d 77				ld (hl), a 
245e 23				inc hl 
245f 18 e7			jr .cptoken2 
2461				 
2461			 
2461			.cptokenstr2: 
2461				; skip all white space until either eol (because forgot to term) or end double quote 
2461			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2461				;inc hl ; skip current double quote 
2461 7e				ld a,(hl) 
2462 23				inc hl 
2463 fe 22			cp '"' 
2465 28 e1			jr z, .cptoken2 
2467 fe 7f			cp FORTH_END_BUFFER 
2469 28 0c			jr z, .cptokendone2 
246b fe 00			cp 0 
246d 28 08			jr z, .cptokendone2 
246f fe 20			cp ' ' 
2471 28 02			jr z, .cptmp2 
2473 18 ec			jr .cptokenstr2 
2475			 
2475			.cptmp2:	; we have a space so change to zero term for dict match later 
2475				;dec hl 
2475				;ld a,"-"	; TODO remove this when working 
2475				;ld (hl), a 
2475				;inc hl 
2475 18 ea			jr .cptokenstr2 
2477			 
2477			.cptokendone2: 
2477				;inc hl 
2477 3e 7f			ld a, FORTH_END_BUFFER 
2479 77				ld (hl),a 
247a 23				inc hl 
247b 3e 21			ld a, '!' 
247d 77				ld (hl),a 
247e			 
247e 2a f7 f3			ld hl,(os_tok_ptr) 
2481			         
2481			if DEBUG_FORTH_TOK 
2481						DMARK "Tc1" 
2481				CALLMONITOR 
2481			endif 
2481			 
2481				; push exec string to top of return stack 
2481				FORTH_RSP_NEXT 
2481 cd ed 1f			call macro_forth_rsp_next 
2484				endm 
# End of macro FORTH_RSP_NEXT
2484 c9				ret 
2485			 
2485			; Another go at the parser need to simplify the process 
2485			 
2485			forthparse: 
2485			 
2485			; 
2485			; line parse: 
2485			;       parse raw input buffer 
2485			;       tokenise the words 
2485			;       malloc new copy (for looping etc) 
2485			;       copy to malloc + current pc in line to start of string and add line term 
2485			;       save on new rsp 
2485			; 
2485			 
2485			; hl to point to the line to tokenise 
2485			 
2485			;	push hl 
2485 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2488			 
2488			;	ld a,0		; string term on input 
2488			;	call strlent 
2488			 
2488			;	ld (os_tok_len), hl	 ; save string length 
2488			 
2488			;if DEBUG_FORTH_TOK 
2488			;	ex de,hl		 
2488			;endif 
2488			 
2488			;	pop hl 		; get back string pointer 
2488			 
2488			if DEBUG_FORTH_TOK 
2488						DMARK "TOK" 
2488				CALLMONITOR 
2488			endif 
2488 7e			.ptoken2:    ld a,(hl) 
2489 23				inc hl 
248a fe 7f			cp FORTH_END_BUFFER 
248c 28 29			jr z, .ptokendone2 
248e fe 00			cp 0 
2490 28 25			jr z, .ptokendone2 
2492 fe 22			cp '"' 
2494 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2496 fe 20			cp ' ' 
2498 20 ee			jr nz,  .ptoken2 
249a			 
249a			; TODO consume comments held between ( and ) 
249a			 
249a				; we have a space so change to zero term for dict match later 
249a 2b				dec hl 
249b 3e 00			ld a,0 
249d 77				ld (hl), a 
249e 23				inc hl 
249f 18 e7			jr .ptoken2 
24a1				 
24a1			 
24a1			.ptokenstr2: 
24a1				; skip all white space until either eol (because forgot to term) or end double quote 
24a1			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
24a1				;inc hl ; skip current double quote 
24a1 7e				ld a,(hl) 
24a2 23				inc hl 
24a3 fe 22			cp '"' 
24a5 28 e1			jr z, .ptoken2 
24a7 fe 7f			cp FORTH_END_BUFFER 
24a9 28 0c			jr z, .ptokendone2 
24ab fe 00			cp 0 
24ad 28 08			jr z, .ptokendone2 
24af fe 20			cp ' ' 
24b1 28 02			jr z, .ptmp2 
24b3 18 ec			jr .ptokenstr2 
24b5			 
24b5			.ptmp2:	; we have a space so change to zero term for dict match later 
24b5				;dec hl 
24b5				;ld a,"-"	; TODO remove this when working 
24b5				;ld (hl), a 
24b5				;inc hl 
24b5 18 ea			jr .ptokenstr2 
24b7			 
24b7			.ptokendone2: 
24b7				;inc hl 
24b7 3e 7f			ld a, FORTH_END_BUFFER 
24b9 77				ld (hl),a 
24ba 23				inc hl 
24bb 3e 21			ld a, '!' 
24bd 77				ld (hl),a 
24be			 
24be 2a f7 f3			ld hl,(os_tok_ptr) 
24c1			         
24c1			if DEBUG_FORTH_TOK 
24c1						DMARK "TK1" 
24c1				CALLMONITOR 
24c1			endif 
24c1			 
24c1				; push exec string to top of return stack 
24c1				FORTH_RSP_NEXT 
24c1 cd ed 1f			call macro_forth_rsp_next 
24c4				endm 
# End of macro FORTH_RSP_NEXT
24c4 c9				ret 
24c5			 
24c5			; 
24c5			;	; malloc size + buffer pointer + if is loop flag 
24c5			;	ld hl,(os_tok_len) 		 ; get string length 
24c5			; 
24c5			;	ld a,l 
24c5			; 
24c5			;	cp 0			; we dont want to use a null string 
24c5			;	ret z 
24c5			; 
24c5			;;	add 3    ; prefix malloc with buffer for current word ptr 
24c5			; 
24c5			;	add 5     ; TODO when certain not over writing memory remove 
24c5			; 
24c5			;		 
24c5			; 
24c5			;if DEBUG_FORTH_TOK 
24c5			;			DMARK "TKE" 
24c5			;	CALLMONITOR 
24c5			;endif 
24c5			; 
24c5			;	ld l,a 
24c5			;	ld h,0 
24c5			;;	push hl   ; save required space for the copy later 
24c5			;	call malloc 
24c5			;if DEBUG_FORTH_TOK 
24c5			;			DMARK "TKM" 
24c5			;	CALLMONITOR 
24c5			;endif 
24c5			;	if DEBUG_FORTH_MALLOC_GUARD 
24c5			;		push af 
24c5			;		call ishlzero 
24c5			;;		ld a, l 
24c5			;;		add h 
24c5			;;		cp 0 
24c5			;		pop af 
24c5			;		 
24c5			;		call z,malloc_error 
24c5			;	endif 
24c5			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
24c5			; 
24c5			; 
24c5			;if DEBUG_FORTH_TOK 
24c5			;			DMARK "TKR" 
24c5			;	CALLMONITOR 
24c5			;endif 
24c5			; 
24c5			;	FORTH_RSP_NEXT 
24c5			; 
24c5			;	;inc hl	 ; go past current buffer pointer 
24c5			;	;inc hl 
24c5			;	;inc hl   ; and past if loop flag 
24c5			;		; TODO Need to set flag  
24c5			; 
24c5			;	 
24c5			;	 
24c5			;	ex de,hl	; malloc is dest 
24c5			;	ld hl, (os_tok_len) 
24c5			;;	pop bc 
24c5			;	ld c, l                
24c5			;	ld b,0 
24c5			;	ld hl, (os_tok_ptr) 
24c5			; 
24c5			;if DEBUG_FORTH_TOK 
24c5			;			DMARK "TKT" 
24c5			;	CALLMONITOR 
24c5			;endif 
24c5			; 
24c5			;	; do str cpy 
24c5			; 
24c5			;	ldir      ; copy byte in hl to de 
24c5			; 
24c5			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
24c5			; 
24c5			;if DEBUG_FORTH_TOK 
24c5			; 
24c5			;			DMARK "TKY" 
24c5			;	CALLMONITOR 
24c5			;endif 
24c5			;	;ld a,0 
24c5			;	;ld a,FORTH_END_BUFFER 
24c5			;	ex de, hl 
24c5			;	;dec hl			 ; go back over the space delim at the end of word 
24c5			;	;ld (hl),a 
24c5			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
24c5			;	ld a,FORTH_END_BUFFER 
24c5			;	ld (hl),a 
24c5			;	inc hl 
24c5			;	ld a,FORTH_END_BUFFER 
24c5			;	ld (hl),a 
24c5			; 
24c5			;	; init the malloc area data 
24c5			;	; set pc for in current area 
24c5			;	;ld hl, (os_tok_malloc) 
24c5			;	;inc hl 
24c5			;	;inc hl 
24c5			;	;inc hl 
24c5			;	;ex de,hl 
24c5			;	;ld hl, (os_tok_malloc) 
24c5			;	;ld (hl),e 
24c5			;	;inc hl 
24c5			;	;ld (hl),d 
24c5			; 
24c5			; 
24c5			;	ld hl,(os_tok_malloc) 
24c5			;if DEBUG_FORTH_PARSE_KEY 
24c5			;			DMARK "TKU" 
24c5			;	CALLMONITOR 
24c5			;endif 
24c5			; 
24c5			;	ret 
24c5			 
24c5			forthexec: 
24c5			 
24c5			; line exec: 
24c5			; forth parser 
24c5			 
24c5			; 
24c5			;       get current exec line on rsp 
24c5			 
24c5				FORTH_RSP_TOS 
24c5 cd 04 20			call macro_forth_rsp_tos 
24c8				endm 
# End of macro FORTH_RSP_TOS
24c8			 
24c8			;       restore current pc - hl points to malloc of data 
24c8			 
24c8				;ld e, (hl) 
24c8				;inc hl 
24c8				;ld d, (hl) 
24c8				;ex de,hl 
24c8			 
24c8			 
24c8			exec1: 
24c8 22 f7 f3			ld (os_tok_ptr), hl 
24cb			 
24cb				; copy our PC to working vars  
24cb 22 75 f9			ld (cli_ptr), hl 
24ce 22 73 f9			ld (cli_origptr), hl 
24d1			 
24d1 7e				ld a,(hl) 
24d2 fe 7f			cp FORTH_END_BUFFER 
24d4 c8				ret z 
24d5			 
24d5				; skip any nulls 
24d5			 
24d5 fe 00			cp 0 
24d7 20 03			jr nz, .execword 
24d9 23				inc hl 
24da 18 ec			jr exec1 
24dc			 
24dc			 
24dc			.execword: 
24dc			 
24dc			 
24dc			 
24dc			if DEBUG_FORTH_PARSE_KEY 
24dc						DMARK "KYQ" 
24dc				CALLMONITOR 
24dc			endif 
24dc			;       while at start of word: 
24dc			; get start of dict (in user area first) 
24dc			 
24dc 21 00 80		ld hl, baseram 
24df			;ld hl, sysdict 
24df 22 77 f9		ld (cli_nextword),hl 
24e2			;           match word at pc 
24e2			;           exec word 
24e2			;           or push to dsp 
24e2			;           forward to next token 
24e2			;           if line term pop rsp and exit 
24e2			;        
24e2			 
24e2			if DEBUG_FORTH_PARSE_KEY 
24e2						DMARK "KYq" 
24e2				CALLMONITOR 
24e2			endif 
24e2			 
24e2			; 
24e2			; word comp 
24e2			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
24e2			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
24e2			;    move to start of word  
24e2			;    compare word to cli_token 
24e2			 
24e2			.execpnword:	; HL at start of a word in the dictionary to check 
24e2			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
24e2			;	ld (cli_ptr), hl 
24e2			 
24e2 2a 77 f9			ld hl,(cli_nextword) 
24e5			 
24e5 cd 88 25			call forth_tok_next 
24e8			; tok next start here 
24e8			;	; TODO skip compiled symbol for now 
24e8			;	inc hl 
24e8			; 
24e8			;	; save pointer to next word 
24e8			; 
24e8			;	; hl now points to the address of the next word pointer  
24e8			;	ld e, (hl) 
24e8			;	inc hl 
24e8			;	ld d, (hl) 
24e8			;	inc l 
24e8			; 
24e8			;	ex de,hl 
24e8			;if DEBUG_FORTH_PARSE_NEXTWORD 
24e8			;	push bc 
24e8			;	ld bc, (cli_nextword) 
24e8			;			DMARK "NXW" 
24e8			;	CALLMONITOR 
24e8			;	pop bc 
24e8			;endif 
24e8			; tok next end here 
24e8 22 77 f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
24eb eb				ex de, hl 
24ec			 
24ec			 
24ec				; save the pointer of the current token - 1 to check against 
24ec				 
24ec 22 7b f9			ld (cli_token), hl   
24ef				; TODO maybe remove below save if no debug 
24ef				; save token string ptr for any debug later 
24ef 23				inc hl  
24f0 22 7d f9			ld (cli_origtoken), hl 
24f3 2b				dec hl 
24f4				; save pointer to the start of the next dictionay word 
24f4 7e				ld a,(hl)   ; get string length 
24f5 47				ld b,a 
24f6			.execpnwordinc:  
24f6 23				inc hl 
24f7 10 fd			djnz .execpnwordinc 
24f9 22 79 f9			ld (cli_execword), hl      ; save start of this words code 
24fc			 
24fc				; now check the word token against the string being parsed 
24fc			 
24fc 2a 7b f9			ld hl,(cli_token) 
24ff 23				inc hl     ; skip string length (use zero term instead to end) 
2500 22 7b f9			ld (cli_token), hl 
2503			 
2503			if DEBUG_FORTH_PARSE_KEY 
2503						DMARK "KY2" 
2503			endif 
2503			if DEBUG_FORTH_PARSE_EXEC 
2503				; see if disabled 
2503			 
2503			;	ld a, (os_view_disable) 
2503			;	cp '*' 
2503				ld a, (debug_vector) 
2503				cp $c9   ; RET  
2503				jr z, .skip 
2503			 
2503				push hl 
2503				push hl 
2503				call clear_display 
2503				ld de, .compword 
2503				ld a, display_row_1 
2503				call str_at_display 
2503				pop de 
2503				ld a, display_row_2 
2503				call str_at_display 
2503				ld hl,(cli_ptr) 
2503				ld a,(hl) 
2503			        ld hl, os_word_scratch 
2503				ld (hl),a 
2503				ld a,0 
2503				inc hl 
2503				ld (hl),a 	 
2503				ld de, os_word_scratch 
2503				ld a, display_row_2+10 
2503				call str_at_display 
2503				call update_display 
2503				ld a, 100 
2503				call aDelayInMS 
2503				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2503				call delay250ms 
2503				endif 
2503				pop hl 
2503			.skip:  
2503			endif	 
2503			.execpnchar:    ; compare char between token and string to parse 
2503			 
2503			if DEBUG_FORTH_PARSE_KEY 
2503						DMARK "Ky3" 
2503			endif 
2503			if DEBUG_FORTH_PARSE_EXEC 
2503				; see if disabled 
2503			 
2503			;	ld a, (os_view_disable) 
2503			;	cp '*' 
2503				ld a, (debug_vector) 
2503				cp $C9  ; RET 
2503				jr z, .skip2 
2503			 
2503			;	call clear_display 
2503			ld hl,(cli_token) 
2503			ld a,(hl) 
2503			ld (os_word_scratch),a 
2503				ld hl,(cli_ptr) 
2503			ld a,(hl) 
2503				ld (os_word_scratch+1),a 
2503				ld a,0 
2503				ld (os_word_scratch+2),a 
2503				ld de,os_word_scratch 
2503				ld a,display_row_4 
2503				call str_at_display 
2503				call update_display 
2503			.skip2:  
2503			endif 
2503 2a 7b f9			ld hl,(cli_token) 
2506 7e				ld a, (hl)	 ; char in word token 
2507 23				inc hl 		; move to next char 
2508 22 7b f9			ld (cli_token), hl ; and save it 
250b 47				ld b,a 
250c			 
250c 2a 75 f9			ld hl,(cli_ptr) ;	get the char from the string to parse 
250f 7e				ld a,(hl) 
2510 23				inc hl 
2511 22 75 f9			ld (cli_ptr), hl		; move to next char 
2514 cd 3b 13			call toUpper 		; make sure the input string matches case 
2517			 
2517			if DEBUG_FORTH_PARSE 
2517			endif 
2517			 
2517				; input stream end of token is a space so get rid of it 
2517			 
2517			;	cp ' ' 
2517			;	jr nz, .pnskipspace 
2517			; 
2517			;	ld a, 0		; make same term as word token term 
2517			; 
2517			;.pnskipspace: 
2517			 
2517			if DEBUG_FORTH_PARSE_KEY 
2517						DMARK "KY7" 
2517			endif 
2517 b8				cp b 
2518 c2 2e 25			jp nz, .execpnskipword	 ; no match so move to next word 
251b				 
251b			;    if same 
251b			;       scan for string terms 0 for token and 32 for input 
251b			 
251b				 
251b			if DEBUG_FORTH_PARSE_KEY 
251b						DMARK "KY8" 
251b			endif 
251b			 
251b 80				add b			 
251c fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
251e							; TODO need to make sure last word in zero term string is accounted for 
251e 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
2520			 
2520			 
2520				; at end of both strings so both are exact match 
2520			 
2520			;       skip ptr for next word 
2520			 
2520 2a 75 f9			ld hl,(cli_ptr) 	; at input string term 
2523 23				inc hl			 ; at next char 
2524 22 75 f9			ld (cli_ptr), hl     ; save for next round of the parser 
2527 22 73 f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
252a				 
252a				 
252a			if DEBUG_FORTH_PARSE_KEY 
252a						DMARK "KY3" 
252a			endif 
252a			 
252a			 
252a			 
252a			;       exec code block 
252a			if DEBUG_FORTH_JP 
252a				call clear_display 
252a				call update_display 
252a				call delay1s 
252a				ld hl, (cli_execword)     ; save for next check if no match on this word 
252a				ld a,h 
252a				ld hl, os_word_scratch 
252a				call hexout 
252a				ld hl, (cli_execword)     ; save for next check if no match on this word 
252a				ld a,l 
252a				ld hl, os_word_scratch+2 
252a				call hexout 
252a				ld hl, os_word_scratch+4 
252a				ld a,0 
252a				ld (hl),a 
252a				ld de,os_word_scratch 
252a				call str_at_display 
252a					ld a, display_row_2 
252a					call str_at_display 
252a				ld de, (cli_origtoken) 
252a				ld a, display_row_1+10 
252a					call str_at_display 
252a			 
252a				ld a,display_row_1 
252a				ld de, .foundword 
252a				ld a, display_row_3 
252a				call str_at_display 
252a				call update_display 
252a				call delay1s 
252a				call delay1s 
252a				call delay1s 
252a			endif 
252a			 
252a			if DEBUG_FORTH_PARSE_KEY 
252a						DMARK "KYj" 
252a			endif 
252a				; TODO save the word pointer in this exec 
252a			 
252a 2a 79 f9			ld hl,(cli_execword) 
252d e9				jp (hl) 
252e			 
252e			 
252e			;    if not same 
252e			;	scan for zero term 
252e			;	get ptr for next word 
252e			;	goto word comp 
252e			 
252e			.execpnskipword:	; get pointer to next word 
252e 2a 77 f9			ld hl,(cli_nextword) 
2531			 
2531 7e				ld a,(hl) 
2532 fe 00			cp WORD_SYS_END 
2534			;	cp 0 
2534 28 09			jr z, .execendofdict			 ; at end of words 
2536			 
2536			if DEBUG_FORTH_PARSE_KEY 
2536						DMARK "KY4" 
2536			endif 
2536			if DEBUG_FORTH_PARSE_EXEC 
2536			 
2536				; see if disabled 
2536			 
2536			;	ld a, (os_view_disable) 
2536			;	cp '*' 
2536				ld a,(debug_vector) 
2536				cp $c9   ; RET 
2536				jr z, .noskip 
2536			 
2536			 
2536				ld de, .nowordfound 
2536				ld a, display_row_3 
2536				call str_at_display 
2536				call update_display 
2536				ld a, 100 
2536				call aDelayInMS 
2536				 
2536				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2536					call delay250ms 
2536				endif 
2536			.noskip:  
2536			 
2536			endif	 
2536			 
2536 2a 73 f9			ld hl,(cli_origptr) 
2539 22 75 f9			ld (cli_ptr),hl 
253c			 
253c			if DEBUG_FORTH_PARSE_KEY 
253c						DMARK "KY5" 
253c			endif 
253c c3 e2 24			jp .execpnword			; else go to next word 
253f			 
253f			.execendofdict:  
253f			 
253f			if DEBUG_FORTH_PARSE_KEY 
253f						DMARK "KYe" 
253f			endif 
253f			if DEBUG_FORTH_PARSE_EXEC 
253f				; see if disabled 
253f			 
253f			;	ld a, (os_view_disable) 
253f			;	cp '*' 
253f				ld a,(debug_vector) 
253f				cp $c9   ; ret 
253f				jr z, .ispskip 
253f			 
253f				call clear_display 
253f				call update_display 
253f				call delay1s 
253f				ld de, (cli_origptr) 
253f				ld a, display_row_1 
253f				call str_at_display 
253f				 
253f				ld de, .enddict 
253f				ld a, display_row_3 
253f				call str_at_display 
253f				call update_display 
253f				ld a, 100 
253f				call aDelayInMS 
253f				if DEBUG_FORTH_PARSE_EXEC_SLOW 
253f				call delay1s 
253f				call delay1s 
253f				call delay1s 
253f				endif 
253f			.ispskip:  
253f				 
253f			endif	 
253f			 
253f			 
253f			 
253f				; if the word is not a keyword then must be a literal so push it to stack 
253f			 
253f			; push token to stack to end of word 
253f			 
253f				STACKFRAME ON $1efe $2f9f 
253f				if DEBUG_STACK_IMB 
253f					if ON 
253f						exx 
253f						ld de, $1efe 
253f						ld a, d 
253f						ld hl, curframe 
253f						call hexout 
253f						ld a, e 
253f						ld hl, curframe+2 
253f						call hexout 
253f						ld hl, $1efe 
253f						push hl 
253f						ld hl, $2f9f 
253f						push hl 
253f						exx 
253f					endif 
253f				endif 
253f			endm 
# End of macro STACKFRAME
253f			 
253f 2a f7 f3		ld hl,(os_tok_ptr) 
2542 cd af 21		call forth_apush 
2545			 
2545				STACKFRAMECHK ON $1efe $2f9f 
2545				if DEBUG_STACK_IMB 
2545					if ON 
2545						exx 
2545						ld hl, $2f9f 
2545						pop de   ; $2f9f 
2545						call cmp16 
2545						jr nz, .spnosame 
2545						ld hl, $1efe 
2545						pop de   ; $1efe 
2545						call cmp16 
2545						jr z, .spfrsame 
2545						.spnosame: call showsperror 
2545						.spfrsame: nop 
2545						exx 
2545					endif 
2545				endif 
2545			endm 
# End of macro STACKFRAMECHK
2545			 
2545			execnext: 
2545			 
2545			if DEBUG_FORTH_PARSE_KEY 
2545						DMARK "KY>" 
2545			endif 
2545			; move past token to next word 
2545			 
2545 2a f7 f3		ld hl, (os_tok_ptr) 
2548 3e 00		ld a, 0 
254a 01 ff 00		ld bc, 255     ; input buffer size 
254d ed b1		cpir 
254f			 
254f			if DEBUG_FORTH_PARSE_KEY 
254f						DMARK "KY!" 
254f				CALLMONITOR 
254f			endif	 
254f			; TODO this might place hl on the null, so will need to forward on??? 
254f			;inc hl   ; see if this gets onto the next item 
254f			 
254f			 
254f			; TODO pass a pointer to the buffer to push 
254f			; TODO call function to push 
254f			 
254f			; look for end of input 
254f			 
254f			;inc hl 
254f			;ld a,(hl) 
254f			;cp FORTH_END_BUFFER 
254f			;ret z 
254f			 
254f			 
254f c3 c8 24		jp exec1 
2552			 
2552			 
2552			 
2552			 
2552			 
2552			 
2552			 
2552			 
2552			 
2552			findnexttok: 
2552			 
2552				; hl is pointer to move 
2552				; de is the token to locate 
2552			 
2552					if DEBUG_FORTH 
2552						DMARK "NTK" 
2552						CALLMONITOR 
2552					endif 
2552 d5				push de 
2553			 
2553			.fnt1:	 
2553				; find first char of token to locate 
2553			 
2553 1a				ld a, (de) 
2554 4f				ld c,a 
2555 7e				ld a,(hl) 
2556 cd 3b 13			call toUpper 
2559					if DEBUG_FORTH 
2559						DMARK "NT1" 
2559						CALLMONITOR 
2559					endif 
2559 b9				cp c 
255a			 
255a 28 03			jr z, .fnt2cmpmorefirst	 
255c			 
255c				; first char not found move to next char 
255c			 
255c 23				inc hl 
255d 18 f4			jr .fnt1 
255f			 
255f			.fnt2cmpmorefirst:	 
255f				; first char of token found.  
255f			 
255f e5				push hl     ; save start of token just in case it is the right one 
2560 d9				exx 
2561 e1				pop hl        ; save it to hl' 
2562 d9				exx 
2563			 
2563			 
2563			.fnt2cmpmore:	 
2563				; compare the rest 
2563				 
2563 23				inc hl 
2564 13				inc de 
2565				 
2565 1a				ld a, (de) 
2566 4f				ld c,a 
2567 7e				ld a,(hl) 
2568 cd 3b 13			call toUpper 
256b			 
256b					if DEBUG_FORTH 
256b						DMARK "NT2" 
256b						CALLMONITOR 
256b					endif 
256b				; c has the token to find char 
256b				; a has the mem to scan char 
256b			 
256b b9				cp c 
256c 28 04			jr z,.fntmatch1 
256e			 
256e				; they are not the same 
256e			 
256e					if DEBUG_FORTH 
256e						DMARK "NT3" 
256e						CALLMONITOR 
256e					endif 
256e d1				pop de	; reset de token to look for 
256f d5				push de 
2570 18 e1			jr .fnt1 
2572				 
2572			.fntmatch1: 
2572			 
2572				; is the same char a null which means we might have a full hit? 
2572					if DEBUG_FORTH 
2572						DMARK "NT4" 
2572						CALLMONITOR 
2572					endif 
2572			 
2572 fe 00			cp 0 
2574 28 0b			jr z, .fntmatchyes 
2576			 
2576				; are we at the end of the token to find? 
2576			 
2576					if DEBUG_FORTH 
2576						DMARK "NT5" 
2576						CALLMONITOR 
2576					endif 
2576 3e 00			ld a, 0 
2578 b9				cp c 
2579			 
2579 c2 63 25			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
257c			 
257c					if DEBUG_FORTH 
257c						DMARK "NT6" 
257c						CALLMONITOR 
257c					endif 
257c				; token to find is exhusted but no match to stream 
257c			 
257c				; restore tok pointer and continue on 
257c d1				pop de 
257d d5				push de 
257e c3 53 25			jp .fnt1 
2581			 
2581			 
2581			.fntmatchyes: 
2581			 
2581				; hl now contains the end of the found token 
2581			 
2581				; get rid of saved token pointer to find 
2581			 
2581 d1				pop de 
2582			 
2582					if DEBUG_FORTH 
2582						DMARK "NT9" 
2582						CALLMONITOR 
2582					endif 
2582			 
2582				; hl will be on the null term so forward on 
2582			 
2582				; get back the saved start of the token 
2582			 
2582 d9				exx 
2583 e5				push hl     ; save start of token just in case it is the right one 
2584 d9				exx 
2585 e1				pop hl        ; save it to hl 
2586			 
2586 c9				ret 
2587			 
2587			 
2587			; LIST needs to find a specific token   
2587			; FORGET needs to find a spefici token 
2587			 
2587			; SAVE needs to find all tokens by flag 
2587			; WORDS just needs to scan through all  by flag 
2587			; UWORDS needs to scan through all by flag 
2587			 
2587			 
2587			; given hl as pointer to start of dict look up string 
2587			; return hl as pointer to start of word block 
2587			; or 0 if not found 
2587			 
2587			forth_find_tok: 
2587 c9				ret 
2588			 
2588			; given hl as pointer to dict structure 
2588			; move to the next dict block structure 
2588			 
2588			forth_tok_next: 
2588				; hl now points to the address of the next word pointer  
2588				; TODO skip compiled symbol for now 
2588			;	push de 
2588 23				inc hl 
2589 5e				ld e, (hl) 
258a 23				inc hl 
258b 56				ld d, (hl) 
258c 23				inc hl 
258d			 
258d eb				ex de,hl 
258e			if DEBUG_FORTH_PARSE_NEXTWORD 
258e				push bc 
258e				ld bc, (cli_nextword) 
258e						DMARK "NXW" 
258e				CALLMONITOR 
258e				pop bc 
258e			endif 
258e			;	pop de	 
258e c9				ret 
258f			 
258f			 
258f			 
258f			; eof 
# End of file forth_parserv5.asm
258f				include "forth_wordsv4.asm" 
258f			 
258f			; the core word dictionary v4 
258f			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
258f			 
258f			; this is a linked list for each of the system words used 
258f			; user defined words will follow the same format but will be in ram 
258f			 
258f			 
258f			; 
258f			; 
258f			; define linked list: 
258f			; 
258f			; 1. compiled byte op code 
258f			; 2. len of text word 
258f			; 3. text word 
258f			; 4. ptr to next dictionary word 
258f			; 5. asm, calls etc for the word 
258f			; 
258f			;  if 1 == 0 then last word in dict  
258f			;   
258f			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
258f			;  
258f			;  
258f			; create basic standard set of words 
258f			; 
258f			;  
258f			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
258f			; 2DUP 2DROP 2SWAP  
258f			; @ C@ - get byte  
258f			; ! C! - store byte 
258f			; 0< true if less than zero 
258f			; 0= true if zero 
258f			; < >  
258f			; = true if same 
258f			; variables 
258f			 
258f			 
258f			; Hardware specific words I may need 
258f			; 
258f			; IN OUT  
258f			; calls to key util functions 
258f			; calls to hardward abstraction stuff 
258f			; easy control of frame buffers and lcd i/o 
258f			; keyboard  
258f			 
258f			 
258f			;DICT: macro 
258f			; op_code, len, word, next 
258f			;    word: 
258f			;    db op_code 
258f			;    ds word zero term 
258f			;    dw next 
258f			;    endm 
258f			 
258f			 
258f			 
258f			 
258f			; op code 1 is a flag for user define words which are to be handled differently 
258f			 
258f			 
258f			; 
258f			; 
258f			;    TODO on entry to a word this should be the expected environment 
258f			;    hl - tos value if number then held, if string this is the ptr 
258f			;    de -  
258f			 
258f			 
258f			; opcode ranges 
258f			; 0 - end of word dict 
258f			; 255 - user define words 
258f			 
258f			sysdict: 
258f			include "forth_opcodes.asm" 
258f			; op codes for forth keywords 
258f			; free to use code 0  
258f				OPCODE_HEAP: equ  1 
258f				OPCODE_EXEC: equ 2 
258f				OPCODE_DUP: equ 3 
258f				OPCODE_SWAP: equ 4 
258f				OPCODE_COLN: equ 5 
258f				OPCODE_SCOLN: equ 6 
258f				OPCODE_DROP: equ 7 
258f				OPCODE_DUP2: equ 8 
258f				OPCODE_DROP2: equ 9 
258f				OPCODE_SWAP2: equ 10 
258f				OPCODE_AT: equ 11 
258f				OPCODE_CAT: equ 12 
258f				OPCODE_BANG: equ 13 
258f				OPCODE_CBANG: equ 14 
258f				OPCODE_SCALL: equ 15 
258f				OPCODE_DEPTH: equ 16 
258f				OPCODE_OVER: equ 17 
258f				OPCODE_PAUSE: equ 18 
258f				OPCODE_PAUSES: equ 19 
258f				OPCODE_ROT: equ 20 
258f			;free to reuse	OPCODE_WORDS: equ 21 
258f			        OPCODE_NOT: equ 21 
258f				OPCODE_UWORDS: equ 22 
258f				OPCODE_BP: equ 23 
258f				OPCODE_MONITOR: equ 24  
258f				OPCODE_MALLOC: equ 25 
258f				OPCODE_FREE: equ 26 
258f				OPCODE_LIST: equ 27 
258f				OPCODE_FORGET: equ 28 
258f				OPCODE_NOP: equ 29 
258f				OPCODE_COMO: equ 30 
258f				OPCODE_COMC: equ 31 
258f			;free to reuse	OPCODE_ENDCORE: equ 32 
258f				OPCODE_AFTERSOUND: equ 33 
258f				OPCODE_GP2: equ 34 
258f				OPCODE_GP3: equ 35 
258f				OPCODE_GP4: equ 36 
258f				OPCODE_SIN: equ 37 
258f				OPCODE_SOUT: equ 38 
258f				OPCODE_SPIO: equ 39 
258f				OPCODE_SPICEH: equ 40 
258f				OPCODE_SPIOb: equ 41 
258f				OPCODE_SPII: equ 42 
258f				OPCODE_SESEL: equ 43 
258f				OPCODE_CARTDEV: equ 44 
258f			; free to reuse	OPCODE_ENDDEVICE: equ 45 
258f				OPCODE_FB: equ 46 
258f				OPCODE_EMIT: equ 47 
258f				OPCODE_DOTH: equ 48 
258f				OPCODE_DOTF: equ 49 
258f				OPCODE_DOT: equ 50 
258f				OPCODE_CLS: equ 51 
258f				OPCODE_DRAW: equ 52 
258f				OPCODE_DUMP: equ 53 
258f				OPCODE_CDUMP: equ 54 
258f				OPCODE_DAT: equ 55 
258f				OPCODE_HOME: equ 56 
258f				OPCODE_SPACE: equ 57 
258f				OPCODE_SPACES: equ 58 
258f				OPCODE_SCROLL: equ 59 
258f				OPCODE_ATQ: equ 60 
258f				OPCODE_AUTODSP: equ 61 
258f				OPCODE_MENU: equ 62 
258f			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
258f				OPCODE_THEN: equ 64 
258f				OPCODE_ELSE: equ 65 
258f				OPCODE_DO: equ 66 
258f				OPCODE_LOOP: equ 67 
258f				OPCODE_I: equ 68 
258f				OPCODE_DLOOP: equ 69  
258f				OPCODE_REPEAT: equ 70  
258f				OPCODE_UNTIL: equ 71 
258f				OPCODE_ENDFLOW: equ 72 
258f				OPCODE_WAITK: equ 73 
258f				OPCODE_ACCEPT: equ 74 
258f				OPCODE_EDIT: equ 75 
258f			;free to reuse	OPCODE_ENDKEY: equ 76 
258f				OPCODE_LZERO: equ 77 
258f				OPCODE_TZERO: equ 78 
258f				OPCODE_LESS: equ 79 
258f				OPCODE_GT: equ 80 
258f				OPCODE_EQUAL: equ 81  
258f			;free to reuse	OPCODE_ENDLOGIC: equ 82 
258f				OPCODE_NEG: equ 83 
258f				OPCODE_DIV: equ 84 
258f				OPCODE_MUL: equ 85 
258f				OPCODE_MIN: equ 86 
258f				OPCODE_MAX: equ 87 
258f				OPCODE_RND16: equ 88 
258f				OPCODE_RND8: equ 89 
258f				OPCODE_RND: equ 90 
258f			;free to reuse	OPCODE_ENDMATHS: equ 91  
258f				OPCODE_BYNAME: equ 92 
258f				OPCODE_DIR: equ 93 
258f				OPCODE_SAVE: equ 94 
258f				OPCODE_LOAD: equ 95 
258f				OPCODE_BSAVE: equ 96 
258f				OPCODE_BLOAD: equ 97 
258f				OPCODE_SEO: equ 98  
258f				OPCODE_SEI: equ 99 
258f				OPCODE_SFREE: equ 100 
258f				OPCODE_SIZE: equ 101 
258f				OPCODE_CREATE: equ 102 
258f				OPCODE_APPEND: equ 103 
258f				OPCODE_SDEL: equ 104 
258f				OPCODE_OPEN: equ 105 
258f				OPCODE_READ: equ 106 
258f				OPCODE_EOF: equ 106 
258f				OPCODE_FORMAT: equ 107 
258f				OPCODE_LABEL: equ 108 
258f				OPCODE_LABELS: equ 109 
258f			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
258f				OPCODE_UPPER: equ 111 
258f				OPCODE_LOWER: equ 112 
258f				OPCODE_SUBSTR: equ 113 
258f				OPCODE_LEFT: equ 114 
258f				OPCODE_RIGHT: equ 115 
258f				OPCODE_STR2NUM: equ 116 
258f				OPCODE_NUM2STR: equ 117 
258f				OPCODE_CONCAT: equ 118 
258f				OPCODE_FIND: equ 119 
258f				OPCODE_LEN: equ 120 
258f				OPCODE_CHAR: equ 121 
258f			; free to reuse	OPCODE_STRLEN: equ 122 
258f			; free to reuse	OPCODE_ENDSTR: equ 123 
258f				OPCODE_V0S: equ 124 
258f				OPCODE_V0Q: equ 125 
258f				OPCODE_V1S: equ 126 
258f				OPCODE_V1Q: equ 127 
258f				OPCODE_V2S: equ 128 
258f				OPCODE_V2Q: equ 129 
258f				OPCODE_V3S: equ 130 
258f				OPCODE_V3Q: equ 131 
258f			;free to reuse	OPCODE_END: equ 132 
258f				OPCODE_ZDUP: equ 133 
258f			 
258f			; eof 
# End of file forth_opcodes.asm
258f			 
258f			include "forth_words_core.asm" 
258f			 
258f			; | ## Core Words 
258f			 
258f			;if MALLOC_4 
258f			 
258f			.HEAP: 
258f			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
258f 15				db WORD_SYS_CORE+OPCODE_HEAP             
2590 ce 25			dw .EXEC            
2592 05				db 4 + 1 
2593 .. 00			db "HEAP",0              
2598				endm 
# End of macro CWHEAD
2598			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2598			; | | u1 - Current number of bytes in the heap 
2598			; | | u2 - Remaining bytes left on the heap 
2598			; | |  
2598			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2598			 
2598			 
2598				if DEBUG_FORTH_WORDS_KEY 
2598					DMARK "HEP" 
2598 f5				push af  
2599 3a ad 25			ld a, (.dmark)  
259c 32 a0 fd			ld (debug_mark),a  
259f 3a ae 25			ld a, (.dmark+1)  
25a2 32 a1 fd			ld (debug_mark+1),a  
25a5 3a af 25			ld a, (.dmark+2)  
25a8 32 a2 fd			ld (debug_mark+2),a  
25ab 18 03			jr .pastdmark  
25ad ..			.dmark: db "HEP"  
25b0 f1			.pastdmark: pop af  
25b1			endm  
# End of macro DMARK
25b1					CALLMONITOR 
25b1 cd aa fd			call debug_vector  
25b4				endm  
# End of macro CALLMONITOR
25b4				endif 
25b4 2a 0a 80			ld hl, (free_list )      
25b7 11 0e 80			ld de, heap_start 
25ba			 
25ba ed 52			sbc hl, de  
25bc			 
25bc cd 46 20			call forth_push_numhl 
25bf			 
25bf			 
25bf ed 5b 0a 80		ld de, (free_list )      
25c3 21 d1 f0			ld hl, heap_end 
25c6			 
25c6 ed 52			sbc hl, de 
25c8			 
25c8 cd 46 20			call forth_push_numhl 
25cb				 
25cb			 
25cb				 
25cb			 
25cb			 
25cb			 
25cb				NEXTW 
25cb c3 37 24			jp macro_next 
25ce				endm 
# End of macro NEXTW
25ce			;endif 
25ce			 
25ce			.EXEC: 
25ce			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
25ce			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
25ce			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
25ce			;; > > 
25ce			;; > >   
25ce			;	STACKFRAME OFF $5efe $5f9f 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS_KEY 
25ce			;			DMARK "EXE" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			; 
25ce			;	FORTH_DSP_VALUEHL 
25ce			; 
25ce			;	FORTH_DSP_POP 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX1" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;;	ld e,(hl) 
25ce			;;	inc hl 
25ce			;;	ld d,(hl) 
25ce			;;	ex de,hl 
25ce			; 
25ce			;;		if DEBUG_FORTH_WORDS 
25ce			;;			DMARK "EX2" 
25ce			;;			CALLMONITOR 
25ce			;;		endif 
25ce			;	push hl 
25ce			; 
25ce			;	;ld a, 0 
25ce			;	;ld a, FORTH_END_BUFFER 
25ce			;	call strlenz 
25ce			;	inc hl   ; include zero term to copy 
25ce			;	inc hl   ; include term 
25ce			;	inc hl   ; include term 
25ce			;	ld b,0 
25ce			;	ld c,l 
25ce			;	pop hl 
25ce			;	ld de, execscratch 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX3" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	ldir 
25ce			; 
25ce			; 
25ce			;	ld hl, execscratch 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EXe" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			; 
25ce			;	call forthparse 
25ce			;	call forthexec 
25ce			;;	call forthexec_cleanup 
25ce			;;	call forthparse 
25ce			;;	call forthexec 
25ce			; 
25ce			;	STACKFRAMECHK OFF $5efe $5f9f 
25ce			; 
25ce			;	; an immediate word so no need to process any more words 
25ce			;	ret 
25ce			;	NEXTW 
25ce			 
25ce			; dead code - old version  
25ce			;	FORTH_RSP_NEXT 
25ce			 
25ce			;  
25ce			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
25ce			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
25ce			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
25ce			;	push hl 
25ce			;	push de 
25ce			;	push bc 
25ce			; 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS_KEY 
25ce			;			DMARK "EXR" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			; 
25ce			; 
25ce			; 
25ce			;	;v5 FORTH_DSP_VALUE 
25ce			;	FORTH_DSP_VALUEHL 
25ce			; 
25ce			;	; TODO do string type checks 
25ce			; 
25ce			;;v5	inc hl   ; skip type 
25ce			; 
25ce			;	push hl  ; source code  
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX1" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	ld a, 0 
25ce			;	call strlent 
25ce			; 
25ce			;	inc hl 
25ce			;	inc hl 
25ce			;	inc hl 
25ce			;	inc hl 
25ce			; 
25ce			;	push hl    ; size 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX2" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	call malloc 
25ce			; 
25ce			;	ex de, hl    ; de now contains malloc area 
25ce			;	pop bc   	; get byte count 
25ce			;	pop hl      ; get string to copy 
25ce			; 
25ce			;	push de     ; save malloc for free later 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX3" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	ldir       ; duplicate string 
25ce			; 
25ce			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
25ce			;	 
25ce			;	; TODO fix the parse would be better than this...  
25ce			;	ex de, hl 
25ce			;	dec hl 
25ce			;	ld a, 0 
25ce			;	ld (hl), a 
25ce			;	dec hl 
25ce			;	ld a, ' ' 
25ce			;	ld (hl), a 
25ce			;	dec hl 
25ce			;	ld (hl), a 
25ce			; 
25ce			;	dec hl 
25ce			;	ld (hl), a 
25ce			; 
25ce			; 
25ce			;	FORTH_DSP_POP  
25ce			; 
25ce			;	pop hl     
25ce			;	push hl    ; save malloc area 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX4" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			; 
25ce			;	call forthparse 
25ce			;	call forthexec 
25ce			;	 
25ce			;	pop hl 
25ce			;	if DEBUG_FORTH_WORDS 
25ce			;		DMARK "EX5" 
25ce			;		CALLMONITOR 
25ce			;	endif 
25ce			; 
25ce			;	if FORTH_ENABLE_FREE 
25ce			;	call free 
25ce			;	endif 
25ce			; 
25ce			;	if DEBUG_FORTH_WORDS 
25ce			;		DMARK "EX6" 
25ce			;		CALLMONITOR 
25ce			;	endif 
25ce			; 
25ce			;	pop bc 
25ce			;	pop de 
25ce			;	pop hl 
25ce			;;	FORTH_RSP_POP	  
25ce			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
25ce			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
25ce			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
25ce			; 
25ce			;	if DEBUG_FORTH_WORDS 
25ce			;		DMARK "EX7" 
25ce			;		CALLMONITOR 
25ce			;	endif 
25ce			;	NEXTW 
25ce			 
25ce			;.STKEXEC: 
25ce			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
25ce			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
25ce			; 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS_KEY 
25ce			;			DMARK "STX" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			; 
25ce			;	FORTH_DSP_VALUEHL 
25ce			; 
25ce			;	ld (store_tmp1), hl    ; count 
25ce			; 
25ce			;	FORTH_DSP_POP 
25ce			;.stkexec1: 
25ce			;	ld hl, (store_tmp1)   ; count 
25ce			;	ld a, 0 
25ce			;	cp l 
25ce			;	ret z 
25ce			; 
25ce			;	dec hl 
25ce			;	ld (store_tmp1), hl    ; count 
25ce			;	 
25ce			;	FORTH_DSP_VALUEHL 
25ce			;	push hl 
25ce			;	 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EXp" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	FORTH_DSP_POP 
25ce			; 
25ce			;	call strlenz 
25ce			;	inc hl   ; include zero term to copy 
25ce			;	inc hl   ; include zero term to copy 
25ce			;	inc hl   ; include zero term to copy 
25ce			;	ld b,0 
25ce			;	ld c,l 
25ce			;	pop hl 
25ce			;	ld de, execscratch 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EX3" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	ldir 
25ce			; 
25ce			; 
25ce			;	ld hl, execscratch 
25ce			; 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EXP" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			; 
25ce			;	call forthparse 
25ce			;	ld hl, execscratch 
25ce			;		if DEBUG_FORTH_WORDS 
25ce			;			DMARK "EXx" 
25ce			;			CALLMONITOR 
25ce			;		endif 
25ce			;	call forthexec 
25ce			; 
25ce			;	jp .stkexec1 
25ce			; 
25ce			;	ret 
25ce			 
25ce			 
25ce			.DUP: 
25ce			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
25ce 17				db WORD_SYS_CORE+OPCODE_DUP             
25cf 44 26			dw .ZDUP            
25d1 04				db 3 + 1 
25d2 .. 00			db "DUP",0              
25d6				endm 
# End of macro CWHEAD
25d6			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
25d6			 
25d6				if DEBUG_FORTH_WORDS_KEY 
25d6					DMARK "DUP" 
25d6 f5				push af  
25d7 3a eb 25			ld a, (.dmark)  
25da 32 a0 fd			ld (debug_mark),a  
25dd 3a ec 25			ld a, (.dmark+1)  
25e0 32 a1 fd			ld (debug_mark+1),a  
25e3 3a ed 25			ld a, (.dmark+2)  
25e6 32 a2 fd			ld (debug_mark+2),a  
25e9 18 03			jr .pastdmark  
25eb ..			.dmark: db "DUP"  
25ee f1			.pastdmark: pop af  
25ef			endm  
# End of macro DMARK
25ef					CALLMONITOR 
25ef cd aa fd			call debug_vector  
25f2				endm  
# End of macro CALLMONITOR
25f2				endif 
25f2			 
25f2				FORTH_DSP 
25f2 cd 11 22			call macro_forth_dsp 
25f5				endm 
# End of macro FORTH_DSP
25f5			 
25f5 7e				ld a, (HL) 
25f6 fe 01			cp DS_TYPE_STR 
25f8 20 25			jr nz, .dupinum 
25fa			 
25fa				; push another string 
25fa			 
25fa				FORTH_DSP_VALUEHL     		 
25fa cd 4b 22			call macro_dsp_valuehl 
25fd				endm 
# End of macro FORTH_DSP_VALUEHL
25fd			 
25fd			if DEBUG_FORTH_WORDS 
25fd				DMARK "DUs" 
25fd f5				push af  
25fe 3a 12 26			ld a, (.dmark)  
2601 32 a0 fd			ld (debug_mark),a  
2604 3a 13 26			ld a, (.dmark+1)  
2607 32 a1 fd			ld (debug_mark+1),a  
260a 3a 14 26			ld a, (.dmark+2)  
260d 32 a2 fd			ld (debug_mark+2),a  
2610 18 03			jr .pastdmark  
2612 ..			.dmark: db "DUs"  
2615 f1			.pastdmark: pop af  
2616			endm  
# End of macro DMARK
2616				CALLMONITOR 
2616 cd aa fd			call debug_vector  
2619				endm  
# End of macro CALLMONITOR
2619			endif 
2619 cd b4 20			call forth_push_str 
261c			 
261c				NEXTW 
261c c3 37 24			jp macro_next 
261f				endm 
# End of macro NEXTW
261f			 
261f			 
261f			.dupinum: 
261f				 
261f			 
261f			 
261f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
261f cd 4b 22			call macro_dsp_valuehl 
2622				endm 
# End of macro FORTH_DSP_VALUEHL
2622			 
2622			; TODO add floating point number detection 
2622			 
2622			if DEBUG_FORTH_WORDS 
2622				DMARK "DUi" 
2622 f5				push af  
2623 3a 37 26			ld a, (.dmark)  
2626 32 a0 fd			ld (debug_mark),a  
2629 3a 38 26			ld a, (.dmark+1)  
262c 32 a1 fd			ld (debug_mark+1),a  
262f 3a 39 26			ld a, (.dmark+2)  
2632 32 a2 fd			ld (debug_mark+2),a  
2635 18 03			jr .pastdmark  
2637 ..			.dmark: db "DUi"  
263a f1			.pastdmark: pop af  
263b			endm  
# End of macro DMARK
263b				CALLMONITOR 
263b cd aa fd			call debug_vector  
263e				endm  
# End of macro CALLMONITOR
263e			endif 
263e			 
263e cd 46 20			call forth_push_numhl 
2641				NEXTW 
2641 c3 37 24			jp macro_next 
2644				endm 
# End of macro NEXTW
2644			.ZDUP: 
2644			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2644 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2645 7c 26			dw .SWAP            
2647 05				db 4 + 1 
2648 .. 00			db "?DUP",0              
264d				endm 
# End of macro CWHEAD
264d			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
264d			 
264d				if DEBUG_FORTH_WORDS_KEY 
264d					DMARK "qDU" 
264d f5				push af  
264e 3a 62 26			ld a, (.dmark)  
2651 32 a0 fd			ld (debug_mark),a  
2654 3a 63 26			ld a, (.dmark+1)  
2657 32 a1 fd			ld (debug_mark+1),a  
265a 3a 64 26			ld a, (.dmark+2)  
265d 32 a2 fd			ld (debug_mark+2),a  
2660 18 03			jr .pastdmark  
2662 ..			.dmark: db "qDU"  
2665 f1			.pastdmark: pop af  
2666			endm  
# End of macro DMARK
2666					CALLMONITOR 
2666 cd aa fd			call debug_vector  
2669				endm  
# End of macro CALLMONITOR
2669				endif 
2669				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2669 cd 4b 22			call macro_dsp_valuehl 
266c				endm 
# End of macro FORTH_DSP_VALUEHL
266c			 
266c e5				push hl 
266d			 
266d				; is it a zero? 
266d			 
266d 3e 00			ld a, 0 
266f 84				add h 
2670 85				add l 
2671			 
2671 e1				pop hl 
2672			 
2672 fe 00			cp 0 
2674 28 03			jr z, .dup2orig 
2676			 
2676			 
2676 cd 46 20			call forth_push_numhl 
2679			 
2679			 
2679			; TODO add floating point number detection 
2679			 
2679			.dup2orig: 
2679			 
2679				NEXTW 
2679 c3 37 24			jp macro_next 
267c				endm 
# End of macro NEXTW
267c			.SWAP: 
267c			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
267c 18				db WORD_SYS_CORE+OPCODE_SWAP             
267d d0 26			dw .COLN            
267f 05				db 4 + 1 
2680 .. 00			db "SWAP",0              
2685				endm 
# End of macro CWHEAD
2685			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2685				if DEBUG_FORTH_WORDS_KEY 
2685					DMARK "SWP" 
2685 f5				push af  
2686 3a 9a 26			ld a, (.dmark)  
2689 32 a0 fd			ld (debug_mark),a  
268c 3a 9b 26			ld a, (.dmark+1)  
268f 32 a1 fd			ld (debug_mark+1),a  
2692 3a 9c 26			ld a, (.dmark+2)  
2695 32 a2 fd			ld (debug_mark+2),a  
2698 18 03			jr .pastdmark  
269a ..			.dmark: db "SWP"  
269d f1			.pastdmark: pop af  
269e			endm  
# End of macro DMARK
269e					CALLMONITOR 
269e cd aa fd			call debug_vector  
26a1				endm  
# End of macro CALLMONITOR
26a1				endif 
26a1			 
26a1			; DONE Use os stack swap memory 
26a1			 
26a1				FORTH_DSP_PTR 0     ; TOS 
26a1 2a 23 f9			ld hl,(cli_data_sp) 
26a4 11 00 00			ld de, 0 * 3 
26a7 ed 52			sbc hl, de 
26a9				endm 
# End of macro FORTH_DSP_PTR
26a9 cd 83 23			call hltostack1 
26ac			  
26ac				FORTH_DSP_PTR 1     ; TOS 
26ac 2a 23 f9			ld hl,(cli_data_sp) 
26af 11 03 00			ld de, 1 * 3 
26b2 ed 52			sbc hl, de 
26b4				endm 
# End of macro FORTH_DSP_PTR
26b4 cd 89 23			call hltostack2 
26b7			 
26b7				FORTH_DSP_PTR 0     ; TOS 
26b7 2a 23 f9			ld hl,(cli_data_sp) 
26ba 11 00 00			ld de, 0 * 3 
26bd ed 52			sbc hl, de 
26bf				endm 
# End of macro FORTH_DSP_PTR
26bf cd a1 23			call hlfromstack2 
26c2			 
26c2				FORTH_DSP_PTR 1     ; TOS 
26c2 2a 23 f9			ld hl,(cli_data_sp) 
26c5 11 03 00			ld de, 1 * 3 
26c8 ed 52			sbc hl, de 
26ca				endm 
# End of macro FORTH_DSP_PTR
26ca cd 9b 23			call hlfromstack1 
26cd			;	FORTH_DSP_VALUEHL 
26cd			;	push hl     ; w2 
26cd			; 
26cd			;	FORTH_DSP_POP 
26cd			; 
26cd			;	FORTH_DSP_VALUEHL 
26cd			; 
26cd			;	FORTH_DSP_POP 
26cd			; 
26cd			;	pop de     ; w2	, hl = w1 
26cd			; 
26cd			;	ex de, hl 
26cd			;	push de 
26cd			; 
26cd			;	call forth_push_numhl 
26cd			; 
26cd			;	pop hl 
26cd			; 
26cd			;	call forth_push_numhl 
26cd				 
26cd			 
26cd				NEXTW 
26cd c3 37 24			jp macro_next 
26d0				endm 
# End of macro NEXTW
26d0			.COLN: 
26d0			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
26d0 19				db WORD_SYS_CORE+OPCODE_COLN             
26d1 5c 28			dw .SCOLN            
26d3 02				db 1 + 1 
26d4 .. 00			db ":",0              
26d6				endm 
# End of macro CWHEAD
26d6			; | : ( -- )         Create new word | DONE 
26d6			 
26d6				if DEBUG_FORTH_WORDS_KEY 
26d6					DMARK "CLN" 
26d6 f5				push af  
26d7 3a eb 26			ld a, (.dmark)  
26da 32 a0 fd			ld (debug_mark),a  
26dd 3a ec 26			ld a, (.dmark+1)  
26e0 32 a1 fd			ld (debug_mark+1),a  
26e3 3a ed 26			ld a, (.dmark+2)  
26e6 32 a2 fd			ld (debug_mark+2),a  
26e9 18 03			jr .pastdmark  
26eb ..			.dmark: db "CLN"  
26ee f1			.pastdmark: pop af  
26ef			endm  
# End of macro DMARK
26ef					CALLMONITOR 
26ef cd aa fd			call debug_vector  
26f2				endm  
# End of macro CALLMONITOR
26f2				endif 
26f2			STACKFRAME OFF $8efe $989f 
26f2				if DEBUG_STACK_IMB 
26f2					if OFF 
26f2						exx 
26f2						ld de, $8efe 
26f2						ld a, d 
26f2						ld hl, curframe 
26f2						call hexout 
26f2						ld a, e 
26f2						ld hl, curframe+2 
26f2						call hexout 
26f2						ld hl, $8efe 
26f2						push hl 
26f2						ld hl, $989f 
26f2						push hl 
26f2						exx 
26f2					endif 
26f2				endif 
26f2			endm 
# End of macro STACKFRAME
26f2			; get parser buffer length  of new word 
26f2			 
26f2			 
26f2			 
26f2				; move tok past this to start of name defintition 
26f2				; TODO get word to define 
26f2				; TODO Move past word token 
26f2				; TODO get length of string up to the ';' 
26f2			 
26f2 2a f7 f3		ld hl, (os_tok_ptr) 
26f5 23			inc hl 
26f6 23			inc hl 
26f7			 
26f7 3e 3b		ld a, ';' 
26f9 cd 4f 13		call strlent 
26fc			 
26fc 7d			ld a,l 
26fd 32 e6 f0		ld (os_new_parse_len), a 
2700			 
2700			 
2700			if DEBUG_FORTH_UWORD 
2700 ed 5b f7 f3	ld de, (os_tok_ptr) 
2704					DMARK ":01" 
2704 f5				push af  
2705 3a 19 27			ld a, (.dmark)  
2708 32 a0 fd			ld (debug_mark),a  
270b 3a 1a 27			ld a, (.dmark+1)  
270e 32 a1 fd			ld (debug_mark+1),a  
2711 3a 1b 27			ld a, (.dmark+2)  
2714 32 a2 fd			ld (debug_mark+2),a  
2717 18 03			jr .pastdmark  
2719 ..			.dmark: db ":01"  
271c f1			.pastdmark: pop af  
271d			endm  
# End of macro DMARK
271d			CALLMONITOR 
271d cd aa fd			call debug_vector  
2720				endm  
# End of macro CALLMONITOR
2720			endif 
2720			 
2720			; 
2720			;  new word memory layout: 
2720			;  
2720			;    : adg 6666 ;  
2720			; 
2720			;    db   1     ; user defined word  
2720 23			inc hl    
2721			;    dw   sysdict 
2721 23			inc hl 
2722 23			inc hl 
2723			;    db <word len>+1 (for null) 
2723 23			inc hl 
2724			;    db .... <word> 
2724			; 
2724			 
2724 23			inc hl    ; some extras for the word preamble before the above 
2725 23			inc hl 
2726 23			inc hl 
2727 23			inc hl 
2728 23			inc hl 
2729 23			inc hl 
272a 23			inc hl  
272b 23			inc hl 
272c 23			inc hl 
272d 23			inc hl 
272e 23			inc hl 
272f 23			inc hl 
2730 23			inc hl 
2731 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2732			;       exec word buffer 
2732			;	<ptr word>   
2732 23			inc hl 
2733 23			inc hl 
2734			;       <word list><null term> 7F final term 
2734			 
2734			 
2734			if DEBUG_FORTH_UWORD 
2734					DMARK ":02" 
2734 f5				push af  
2735 3a 49 27			ld a, (.dmark)  
2738 32 a0 fd			ld (debug_mark),a  
273b 3a 4a 27			ld a, (.dmark+1)  
273e 32 a1 fd			ld (debug_mark+1),a  
2741 3a 4b 27			ld a, (.dmark+2)  
2744 32 a2 fd			ld (debug_mark+2),a  
2747 18 03			jr .pastdmark  
2749 ..			.dmark: db ":02"  
274c f1			.pastdmark: pop af  
274d			endm  
# End of macro DMARK
274d			CALLMONITOR 
274d cd aa fd			call debug_vector  
2750				endm  
# End of macro CALLMONITOR
2750			endif 
2750			 
2750			 
2750				; malloc the size 
2750			 
2750 cd b9 13			call malloc 
2753 22 e8 f0			ld (os_new_malloc), hl     ; save malloc start 
2756			 
2756			;    db   1     ; user defined word  
2756 3e 01			ld a, WORD_SYS_UWORD  
2758 77				ld (hl), a 
2759			 
2759 23			inc hl    
275a			;    dw   sysdict 
275a 11 8f 25		ld de, sysdict       ; continue on with the scan to the system dict 
275d 73			ld (hl), e 
275e 23			inc hl 
275f 72			ld (hl), d 
2760 23			inc hl 
2761			 
2761			 
2761			;    Setup dict word 
2761			 
2761 23			inc hl 
2762 22 e2 f0		ld (os_new_work_ptr), hl     ; save start of dict word  
2765			 
2765			; 1. get length of dict word 
2765			 
2765			 
2765 2a f7 f3		ld hl, (os_tok_ptr) 
2768 23			inc hl 
2769 23			inc hl    ; position to start of dict word 
276a 3e 00		ld a, 0 
276c cd 4f 13		call strlent 
276f			 
276f			 
276f 23			inc hl    ; to include null??? 
2770			 
2770			; write length of dict word 
2770			 
2770 ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2774 1b			dec de 
2775 eb			ex de, hl 
2776 73			ld (hl), e 
2777 eb			ex de, hl 
2778			 
2778			 
2778			 
2778			; copy  
2778 4d			ld c, l 
2779 06 00		ld b, 0 
277b ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
277f 2a f7 f3		ld hl, (os_tok_ptr) 
2782 23			inc hl 
2783 23			inc hl    ; position to start of dict word 
2784			 
2784			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2784			 
2784			; TODO need to convert word to upper case 
2784			 
2784			ucasetok:	 
2784 7e			ld a,(hl) 
2785 cd 3b 13		call toUpper 
2788 77			ld (hl),a 
2789 ed a0		ldi 
278b f2 84 27		jp p, ucasetok 
278e			 
278e			 
278e			 
278e			; de now points to start of where the word body code should be placed 
278e ed 53 e2 f0	ld (os_new_work_ptr), de 
2792			; hl now points to the words to throw at forthexec which needs to be copied 
2792 22 e0 f0		ld (os_new_src_ptr), hl 
2795			 
2795			; TODO add 'call to forthexec' 
2795			 
2795			if DEBUG_FORTH_UWORD 
2795 c5			push bc 
2796 ed 4b e8 f0	ld bc, (os_new_malloc) 
279a					DMARK ":0x" 
279a f5				push af  
279b 3a af 27			ld a, (.dmark)  
279e 32 a0 fd			ld (debug_mark),a  
27a1 3a b0 27			ld a, (.dmark+1)  
27a4 32 a1 fd			ld (debug_mark+1),a  
27a7 3a b1 27			ld a, (.dmark+2)  
27aa 32 a2 fd			ld (debug_mark+2),a  
27ad 18 03			jr .pastdmark  
27af ..			.dmark: db ":0x"  
27b2 f1			.pastdmark: pop af  
27b3			endm  
# End of macro DMARK
27b3			CALLMONITOR 
27b3 cd aa fd			call debug_vector  
27b6				endm  
# End of macro CALLMONITOR
27b6 c1			pop bc 
27b7			endif 
27b7			 
27b7			 
27b7			; create word preamble which should be: 
27b7			 
27b7			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
27b7			 
27b7			;    ld hl, <word code> 
27b7			;    jp user_exec 
27b7			;    <word code bytes> 
27b7			 
27b7			 
27b7			;	inc de     ; TODO ??? or are we already past the word's null 
27b7 eb			ex de, hl 
27b8			 
27b8 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
27ba			 
27ba 23			inc hl 
27bb 22 dc f0		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
27be 23			inc hl 
27bf			 
27bf 23			inc hl 
27c0 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
27c2			 
27c2 01 74 5d		ld bc, user_exec 
27c5 23			inc hl 
27c6 71			ld (hl), c     ; poke address of user_exec 
27c7 23			inc hl 
27c8 70			ld (hl), b     
27c9			; 
27c9			;	inc hl 
27c9			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
27c9			; 
27c9			; 
27c9			;	ld bc, macro_forth_rsp_next 
27c9			;	inc hl 
27c9			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
27c9			;	inc hl 
27c9			;	ld (hl), b     
27c9			; 
27c9			;	inc hl 
27c9			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
27c9			; 
27c9			; 
27c9			;	inc hl 
27c9			;	ld bc, forthexec 
27c9			;	ld (hl), c     ; poke address of forthexec 
27c9			;	inc hl 
27c9			;	ld (hl), b      
27c9			; 
27c9			;	inc hl 
27c9			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
27c9			; 
27c9			;	ld bc, user_dict_next 
27c9			;	inc hl 
27c9			;	ld (hl), c     ; poke address of forthexec 
27c9			;	inc hl 
27c9			;	ld (hl), b      
27c9			 
27c9			; hl is now where we need to copy the word byte data to save this 
27c9			 
27c9 23			inc hl 
27ca 22 de f0		ld (os_new_exec), hl 
27cd			 
27cd			; copy definition 
27cd			 
27cd eb			ex de, hl 
27ce			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
27ce			;	inc de    ; skip the PC for this parse 
27ce 3a e6 f0		ld a, (os_new_parse_len) 
27d1 4f			ld c, a 
27d2 06 00		ld b, 0 
27d4 ed b0		ldir		 ; copy defintion 
27d6			 
27d6			 
27d6			; poke the address of where the new word bytes live for forthexec 
27d6			 
27d6 2a dc f0		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
27d9			 
27d9 ed 5b de f0	ld de, (os_new_exec)      
27dd			 
27dd 73			ld (hl), e 
27de 23			inc hl 
27df 72			ld (hl), d 
27e0			 
27e0				; TODO copy last user dict word next link to this word 
27e0				; TODO update last user dict word to point to this word 
27e0			; 
27e0			; hl f923 de 812a ; bc 811a 
27e0			 
27e0			if DEBUG_FORTH_UWORD 
27e0 c5			push bc 
27e1 ed 4b e8 f0	ld bc, (os_new_malloc) 
27e5					DMARK ":0A" 
27e5 f5				push af  
27e6 3a fa 27			ld a, (.dmark)  
27e9 32 a0 fd			ld (debug_mark),a  
27ec 3a fb 27			ld a, (.dmark+1)  
27ef 32 a1 fd			ld (debug_mark+1),a  
27f2 3a fc 27			ld a, (.dmark+2)  
27f5 32 a2 fd			ld (debug_mark+2),a  
27f8 18 03			jr .pastdmark  
27fa ..			.dmark: db ":0A"  
27fd f1			.pastdmark: pop af  
27fe			endm  
# End of macro DMARK
27fe			CALLMONITOR 
27fe cd aa fd			call debug_vector  
2801				endm  
# End of macro CALLMONITOR
2801 c1			pop bc 
2802			endif 
2802			if DEBUG_FORTH_UWORD 
2802 c5			push bc 
2803 ed 4b e8 f0	ld bc, (os_new_malloc) 
2807 03			inc bc 
2808 03			inc bc 
2809 03			inc bc 
280a 03			inc bc 
280b 03			inc bc 
280c 03			inc bc 
280d 03			inc bc 
280e 03			inc bc 
280f			 
280f					DMARK ":0B" 
280f f5				push af  
2810 3a 24 28			ld a, (.dmark)  
2813 32 a0 fd			ld (debug_mark),a  
2816 3a 25 28			ld a, (.dmark+1)  
2819 32 a1 fd			ld (debug_mark+1),a  
281c 3a 26 28			ld a, (.dmark+2)  
281f 32 a2 fd			ld (debug_mark+2),a  
2822 18 03			jr .pastdmark  
2824 ..			.dmark: db ":0B"  
2827 f1			.pastdmark: pop af  
2828			endm  
# End of macro DMARK
2828			CALLMONITOR 
2828 cd aa fd			call debug_vector  
282b				endm  
# End of macro CALLMONITOR
282b c1			pop bc 
282c			endif 
282c			 
282c			; update word dict linked list for new word 
282c			 
282c			 
282c 2a f3 f3		ld hl, (os_last_new_uword)		; get the start of the last added uword 
282f 23			inc hl     ; move to next work linked list ptr 
2830			 
2830 ed 5b e8 f0	ld de, (os_new_malloc)		 ; new next word 
2834 73			ld (hl), e 
2835 23			inc hl 
2836 72			ld (hl), d 
2837			 
2837			if DEBUG_FORTH_UWORD 
2837 ed 4b f3 f3	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
283b			endif 
283b			 
283b ed 53 f3 f3	ld (os_last_new_uword), de      ; update last new uword ptr 
283f			 
283f			 
283f			if DEBUG_FORTH_UWORD 
283f					DMARK ":0+" 
283f f5				push af  
2840 3a 54 28			ld a, (.dmark)  
2843 32 a0 fd			ld (debug_mark),a  
2846 3a 55 28			ld a, (.dmark+1)  
2849 32 a1 fd			ld (debug_mark+1),a  
284c 3a 56 28			ld a, (.dmark+2)  
284f 32 a2 fd			ld (debug_mark+2),a  
2852 18 03			jr .pastdmark  
2854 ..			.dmark: db ":0+"  
2857 f1			.pastdmark: pop af  
2858			endm  
# End of macro DMARK
2858			CALLMONITOR 
2858 cd aa fd			call debug_vector  
285b				endm  
# End of macro CALLMONITOR
285b			endif 
285b			 
285b			STACKFRAMECHK OFF $8efe $989f 
285b				if DEBUG_STACK_IMB 
285b					if OFF 
285b						exx 
285b						ld hl, $989f 
285b						pop de   ; $989f 
285b						call cmp16 
285b						jr nz, .spnosame 
285b						ld hl, $8efe 
285b						pop de   ; $8efe 
285b						call cmp16 
285b						jr z, .spfrsame 
285b						.spnosame: call showsperror 
285b						.spfrsame: nop 
285b						exx 
285b					endif 
285b				endif 
285b			endm 
# End of macro STACKFRAMECHK
285b			 
285b c9			ret    ; dont process any remaining parser tokens as they form new word 
285c			 
285c			 
285c			 
285c			 
285c			;		NEXT 
285c			.SCOLN: 
285c			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
285c 06			db OPCODE_SCOLN 
285d a8 28		dw .DROP 
285f 02			db 2 
2860 .. 00		db ";",0           
2862			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2862				if DEBUG_FORTH_WORDS_KEY 
2862					DMARK "SCN" 
2862 f5				push af  
2863 3a 77 28			ld a, (.dmark)  
2866 32 a0 fd			ld (debug_mark),a  
2869 3a 78 28			ld a, (.dmark+1)  
286c 32 a1 fd			ld (debug_mark+1),a  
286f 3a 79 28			ld a, (.dmark+2)  
2872 32 a2 fd			ld (debug_mark+2),a  
2875 18 03			jr .pastdmark  
2877 ..			.dmark: db "SCN"  
287a f1			.pastdmark: pop af  
287b			endm  
# End of macro DMARK
287b					CALLMONITOR 
287b cd aa fd			call debug_vector  
287e				endm  
# End of macro CALLMONITOR
287e				endif 
287e				FORTH_RSP_TOS 
287e cd 04 20			call macro_forth_rsp_tos 
2881				endm 
# End of macro FORTH_RSP_TOS
2881 e5				push hl 
2882				FORTH_RSP_POP 
2882 cd 0e 20			call macro_forth_rsp_pop 
2885				endm 
# End of macro FORTH_RSP_POP
2885 e1				pop hl 
2886			;		ex de,hl 
2886 22 f7 f3			ld (os_tok_ptr),hl 
2889			 
2889			if DEBUG_FORTH_UWORD 
2889					DMARK "SCL" 
2889 f5				push af  
288a 3a 9e 28			ld a, (.dmark)  
288d 32 a0 fd			ld (debug_mark),a  
2890 3a 9f 28			ld a, (.dmark+1)  
2893 32 a1 fd			ld (debug_mark+1),a  
2896 3a a0 28			ld a, (.dmark+2)  
2899 32 a2 fd			ld (debug_mark+2),a  
289c 18 03			jr .pastdmark  
289e ..			.dmark: db "SCL"  
28a1 f1			.pastdmark: pop af  
28a2			endm  
# End of macro DMARK
28a2			CALLMONITOR 
28a2 cd aa fd			call debug_vector  
28a5				endm  
# End of macro CALLMONITOR
28a5			endif 
28a5				NEXTW 
28a5 c3 37 24			jp macro_next 
28a8				endm 
# End of macro NEXTW
28a8			 
28a8			.DROP: 
28a8			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
28a8 1b				db WORD_SYS_CORE+OPCODE_DROP             
28a9 d3 28			dw .DUP2            
28ab 05				db 4 + 1 
28ac .. 00			db "DROP",0              
28b1				endm 
# End of macro CWHEAD
28b1			; | DROP ( w -- )   drop the TOS item   | DONE 
28b1				if DEBUG_FORTH_WORDS_KEY 
28b1					DMARK "DRP" 
28b1 f5				push af  
28b2 3a c6 28			ld a, (.dmark)  
28b5 32 a0 fd			ld (debug_mark),a  
28b8 3a c7 28			ld a, (.dmark+1)  
28bb 32 a1 fd			ld (debug_mark+1),a  
28be 3a c8 28			ld a, (.dmark+2)  
28c1 32 a2 fd			ld (debug_mark+2),a  
28c4 18 03			jr .pastdmark  
28c6 ..			.dmark: db "DRP"  
28c9 f1			.pastdmark: pop af  
28ca			endm  
# End of macro DMARK
28ca					CALLMONITOR 
28ca cd aa fd			call debug_vector  
28cd				endm  
# End of macro CALLMONITOR
28cd				endif 
28cd				FORTH_DSP_POP 
28cd cd 03 23			call macro_forth_dsp_pop 
28d0				endm 
# End of macro FORTH_DSP_POP
28d0				NEXTW 
28d0 c3 37 24			jp macro_next 
28d3				endm 
# End of macro NEXTW
28d3			.DUP2: 
28d3			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
28d3 1c				db WORD_SYS_CORE+OPCODE_DUP2             
28d4 18 29			dw .DROP2            
28d6 05				db 4 + 1 
28d7 .. 00			db "2DUP",0              
28dc				endm 
# End of macro CWHEAD
28dc			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
28dc				if DEBUG_FORTH_WORDS_KEY 
28dc					DMARK "2DU" 
28dc f5				push af  
28dd 3a f1 28			ld a, (.dmark)  
28e0 32 a0 fd			ld (debug_mark),a  
28e3 3a f2 28			ld a, (.dmark+1)  
28e6 32 a1 fd			ld (debug_mark+1),a  
28e9 3a f3 28			ld a, (.dmark+2)  
28ec 32 a2 fd			ld (debug_mark+2),a  
28ef 18 03			jr .pastdmark  
28f1 ..			.dmark: db "2DU"  
28f4 f1			.pastdmark: pop af  
28f5			endm  
# End of macro DMARK
28f5					CALLMONITOR 
28f5 cd aa fd			call debug_vector  
28f8				endm  
# End of macro CALLMONITOR
28f8				endif 
28f8				FORTH_DSP_VALUEHL 
28f8 cd 4b 22			call macro_dsp_valuehl 
28fb				endm 
# End of macro FORTH_DSP_VALUEHL
28fb e5				push hl      ; 2 
28fc			 
28fc				FORTH_DSP_POP 
28fc cd 03 23			call macro_forth_dsp_pop 
28ff				endm 
# End of macro FORTH_DSP_POP
28ff				 
28ff				FORTH_DSP_VALUEHL 
28ff cd 4b 22			call macro_dsp_valuehl 
2902				endm 
# End of macro FORTH_DSP_VALUEHL
2902			;		push hl      ; 1 
2902			 
2902				FORTH_DSP_POP 
2902 cd 03 23			call macro_forth_dsp_pop 
2905				endm 
# End of macro FORTH_DSP_POP
2905			 
2905			;		pop hl       ; 1 
2905 d1				pop de       ; 2 
2906			 
2906 cd 46 20			call forth_push_numhl 
2909 eb				ex de, hl 
290a cd 46 20			call forth_push_numhl 
290d			 
290d				 
290d eb				ex de, hl 
290e			 
290e cd 46 20			call forth_push_numhl 
2911 eb				ex de, hl 
2912 cd 46 20			call forth_push_numhl 
2915			 
2915			 
2915				NEXTW 
2915 c3 37 24			jp macro_next 
2918				endm 
# End of macro NEXTW
2918			.DROP2: 
2918			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
2918 1d				db WORD_SYS_CORE+OPCODE_DROP2             
2919 47 29			dw .SWAP2            
291b 06				db 5 + 1 
291c .. 00			db "2DROP",0              
2922				endm 
# End of macro CWHEAD
2922			; | 2DROP ( w w -- )    Double drop | DONE 
2922				if DEBUG_FORTH_WORDS_KEY 
2922					DMARK "2DR" 
2922 f5				push af  
2923 3a 37 29			ld a, (.dmark)  
2926 32 a0 fd			ld (debug_mark),a  
2929 3a 38 29			ld a, (.dmark+1)  
292c 32 a1 fd			ld (debug_mark+1),a  
292f 3a 39 29			ld a, (.dmark+2)  
2932 32 a2 fd			ld (debug_mark+2),a  
2935 18 03			jr .pastdmark  
2937 ..			.dmark: db "2DR"  
293a f1			.pastdmark: pop af  
293b			endm  
# End of macro DMARK
293b					CALLMONITOR 
293b cd aa fd			call debug_vector  
293e				endm  
# End of macro CALLMONITOR
293e				endif 
293e				FORTH_DSP_POP 
293e cd 03 23			call macro_forth_dsp_pop 
2941				endm 
# End of macro FORTH_DSP_POP
2941				FORTH_DSP_POP 
2941 cd 03 23			call macro_forth_dsp_pop 
2944				endm 
# End of macro FORTH_DSP_POP
2944				NEXTW 
2944 c3 37 24			jp macro_next 
2947				endm 
# End of macro NEXTW
2947			.SWAP2: 
2947			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2947 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2948 70 29			dw .AT            
294a 06				db 5 + 1 
294b .. 00			db "2SWAP",0              
2951				endm 
# End of macro CWHEAD
2951			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
2951				if DEBUG_FORTH_WORDS_KEY 
2951					DMARK "2SW" 
2951 f5				push af  
2952 3a 66 29			ld a, (.dmark)  
2955 32 a0 fd			ld (debug_mark),a  
2958 3a 67 29			ld a, (.dmark+1)  
295b 32 a1 fd			ld (debug_mark+1),a  
295e 3a 68 29			ld a, (.dmark+2)  
2961 32 a2 fd			ld (debug_mark+2),a  
2964 18 03			jr .pastdmark  
2966 ..			.dmark: db "2SW"  
2969 f1			.pastdmark: pop af  
296a			endm  
# End of macro DMARK
296a					CALLMONITOR 
296a cd aa fd			call debug_vector  
296d				endm  
# End of macro CALLMONITOR
296d				endif 
296d			; TODO Use os stack swap memory 
296d				NEXTW 
296d c3 37 24			jp macro_next 
2970				endm 
# End of macro NEXTW
2970			.AT: 
2970			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
2970 1f				db WORD_SYS_CORE+OPCODE_AT             
2971 a2 29			dw .CAT            
2973 02				db 1 + 1 
2974 .. 00			db "@",0              
2976				endm 
# End of macro CWHEAD
2976			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2976			 
2976				if DEBUG_FORTH_WORDS_KEY 
2976					DMARK "AT." 
2976 f5				push af  
2977 3a 8b 29			ld a, (.dmark)  
297a 32 a0 fd			ld (debug_mark),a  
297d 3a 8c 29			ld a, (.dmark+1)  
2980 32 a1 fd			ld (debug_mark+1),a  
2983 3a 8d 29			ld a, (.dmark+2)  
2986 32 a2 fd			ld (debug_mark+2),a  
2989 18 03			jr .pastdmark  
298b ..			.dmark: db "AT."  
298e f1			.pastdmark: pop af  
298f			endm  
# End of macro DMARK
298f					CALLMONITOR 
298f cd aa fd			call debug_vector  
2992				endm  
# End of macro CALLMONITOR
2992				endif 
2992			.getbyteat:	 
2992				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2992 cd 4b 22			call macro_dsp_valuehl 
2995				endm 
# End of macro FORTH_DSP_VALUEHL
2995				 
2995			;		push hl 
2995			 
2995				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2995 cd 03 23			call macro_forth_dsp_pop 
2998				endm 
# End of macro FORTH_DSP_POP
2998			 
2998			;		pop hl 
2998			 
2998 7e				ld a, (hl) 
2999			 
2999 6f				ld l, a 
299a 26 00			ld h, 0 
299c cd 46 20			call forth_push_numhl 
299f			 
299f				NEXTW 
299f c3 37 24			jp macro_next 
29a2				endm 
# End of macro NEXTW
29a2			.CAT: 
29a2			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
29a2 20				db WORD_SYS_CORE+OPCODE_CAT             
29a3 cb 29			dw .BANG            
29a5 03				db 2 + 1 
29a6 .. 00			db "C@",0              
29a9				endm 
# End of macro CWHEAD
29a9			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
29a9				if DEBUG_FORTH_WORDS_KEY 
29a9					DMARK "CAA" 
29a9 f5				push af  
29aa 3a be 29			ld a, (.dmark)  
29ad 32 a0 fd			ld (debug_mark),a  
29b0 3a bf 29			ld a, (.dmark+1)  
29b3 32 a1 fd			ld (debug_mark+1),a  
29b6 3a c0 29			ld a, (.dmark+2)  
29b9 32 a2 fd			ld (debug_mark+2),a  
29bc 18 03			jr .pastdmark  
29be ..			.dmark: db "CAA"  
29c1 f1			.pastdmark: pop af  
29c2			endm  
# End of macro DMARK
29c2					CALLMONITOR 
29c2 cd aa fd			call debug_vector  
29c5				endm  
# End of macro CALLMONITOR
29c5				endif 
29c5 c3 92 29			jp .getbyteat 
29c8				NEXTW 
29c8 c3 37 24			jp macro_next 
29cb				endm 
# End of macro NEXTW
29cb			.BANG: 
29cb			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
29cb 21				db WORD_SYS_CORE+OPCODE_BANG             
29cc 01 2a			dw .CBANG            
29ce 02				db 1 + 1 
29cf .. 00			db "!",0              
29d1				endm 
# End of macro CWHEAD
29d1			; | ! ( x w -- ) Store x at address w      | DONE 
29d1				if DEBUG_FORTH_WORDS_KEY 
29d1					DMARK "BNG" 
29d1 f5				push af  
29d2 3a e6 29			ld a, (.dmark)  
29d5 32 a0 fd			ld (debug_mark),a  
29d8 3a e7 29			ld a, (.dmark+1)  
29db 32 a1 fd			ld (debug_mark+1),a  
29de 3a e8 29			ld a, (.dmark+2)  
29e1 32 a2 fd			ld (debug_mark+2),a  
29e4 18 03			jr .pastdmark  
29e6 ..			.dmark: db "BNG"  
29e9 f1			.pastdmark: pop af  
29ea			endm  
# End of macro DMARK
29ea					CALLMONITOR 
29ea cd aa fd			call debug_vector  
29ed				endm  
# End of macro CALLMONITOR
29ed				endif 
29ed			 
29ed			.storebyteat:		 
29ed				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29ed cd 4b 22			call macro_dsp_valuehl 
29f0				endm 
# End of macro FORTH_DSP_VALUEHL
29f0				 
29f0 e5				push hl 
29f1			 
29f1				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29f1 cd 03 23			call macro_forth_dsp_pop 
29f4				endm 
# End of macro FORTH_DSP_POP
29f4			 
29f4				; get byte to poke 
29f4			 
29f4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29f4 cd 4b 22			call macro_dsp_valuehl 
29f7				endm 
# End of macro FORTH_DSP_VALUEHL
29f7 e5				push hl 
29f8			 
29f8			 
29f8				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29f8 cd 03 23			call macro_forth_dsp_pop 
29fb				endm 
# End of macro FORTH_DSP_POP
29fb			 
29fb			 
29fb d1				pop de 
29fc e1				pop hl 
29fd			 
29fd 73				ld (hl),e 
29fe			 
29fe			 
29fe				NEXTW 
29fe c3 37 24			jp macro_next 
2a01				endm 
# End of macro NEXTW
2a01			.CBANG: 
2a01			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2a01 22				db WORD_SYS_CORE+OPCODE_CBANG             
2a02 2a 2a			dw .SCALL            
2a04 03				db 2 + 1 
2a05 .. 00			db "C!",0              
2a08				endm 
# End of macro CWHEAD
2a08			; | C!  ( x w -- ) Store x at address w  | DONE 
2a08				if DEBUG_FORTH_WORDS_KEY 
2a08					DMARK "CBA" 
2a08 f5				push af  
2a09 3a 1d 2a			ld a, (.dmark)  
2a0c 32 a0 fd			ld (debug_mark),a  
2a0f 3a 1e 2a			ld a, (.dmark+1)  
2a12 32 a1 fd			ld (debug_mark+1),a  
2a15 3a 1f 2a			ld a, (.dmark+2)  
2a18 32 a2 fd			ld (debug_mark+2),a  
2a1b 18 03			jr .pastdmark  
2a1d ..			.dmark: db "CBA"  
2a20 f1			.pastdmark: pop af  
2a21			endm  
# End of macro DMARK
2a21					CALLMONITOR 
2a21 cd aa fd			call debug_vector  
2a24				endm  
# End of macro CALLMONITOR
2a24				endif 
2a24 c3 ed 29			jp .storebyteat 
2a27				NEXTW 
2a27 c3 37 24			jp macro_next 
2a2a				endm 
# End of macro NEXTW
2a2a			.SCALL: 
2a2a			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2a2a 23				db WORD_SYS_CORE+OPCODE_SCALL             
2a2b 5e 2a			dw .DEPTH            
2a2d 05				db 4 + 1 
2a2e .. 00			db "CALL",0              
2a33				endm 
# End of macro CWHEAD
2a33			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2a33				if DEBUG_FORTH_WORDS_KEY 
2a33					DMARK "CLL" 
2a33 f5				push af  
2a34 3a 48 2a			ld a, (.dmark)  
2a37 32 a0 fd			ld (debug_mark),a  
2a3a 3a 49 2a			ld a, (.dmark+1)  
2a3d 32 a1 fd			ld (debug_mark+1),a  
2a40 3a 4a 2a			ld a, (.dmark+2)  
2a43 32 a2 fd			ld (debug_mark+2),a  
2a46 18 03			jr .pastdmark  
2a48 ..			.dmark: db "CLL"  
2a4b f1			.pastdmark: pop af  
2a4c			endm  
# End of macro DMARK
2a4c					CALLMONITOR 
2a4c cd aa fd			call debug_vector  
2a4f				endm  
# End of macro CALLMONITOR
2a4f				endif 
2a4f			 
2a4f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a4f cd 4b 22			call macro_dsp_valuehl 
2a52				endm 
# End of macro FORTH_DSP_VALUEHL
2a52			 
2a52			;		push hl 
2a52			 
2a52				; destroy value TOS 
2a52			 
2a52				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a52 cd 03 23			call macro_forth_dsp_pop 
2a55				endm 
# End of macro FORTH_DSP_POP
2a55			 
2a55					 
2a55			;		pop hl 
2a55			 
2a55				; how to do a call with hl???? save SP? 
2a55 cd db 23			call forth_call_hl 
2a58			 
2a58			 
2a58				; TODO push value back onto stack for another op etc 
2a58			 
2a58 cd 46 20			call forth_push_numhl 
2a5b				NEXTW 
2a5b c3 37 24			jp macro_next 
2a5e				endm 
# End of macro NEXTW
2a5e			.DEPTH: 
2a5e			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2a5e 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2a5f 9b 2a			dw .OVER            
2a61 06				db 5 + 1 
2a62 .. 00			db "DEPTH",0              
2a68				endm 
# End of macro CWHEAD
2a68			; | DEPTH ( -- u ) Push count of stack | DONE 
2a68				; take current TOS and remove from base value div by two to get count 
2a68				if DEBUG_FORTH_WORDS_KEY 
2a68					DMARK "DEP" 
2a68 f5				push af  
2a69 3a 7d 2a			ld a, (.dmark)  
2a6c 32 a0 fd			ld (debug_mark),a  
2a6f 3a 7e 2a			ld a, (.dmark+1)  
2a72 32 a1 fd			ld (debug_mark+1),a  
2a75 3a 7f 2a			ld a, (.dmark+2)  
2a78 32 a2 fd			ld (debug_mark+2),a  
2a7b 18 03			jr .pastdmark  
2a7d ..			.dmark: db "DEP"  
2a80 f1			.pastdmark: pop af  
2a81			endm  
# End of macro DMARK
2a81					CALLMONITOR 
2a81 cd aa fd			call debug_vector  
2a84				endm  
# End of macro CALLMONITOR
2a84				endif 
2a84			 
2a84			 
2a84 2a 23 f9		ld hl, (cli_data_sp) 
2a87 11 5d f6		ld de, cli_data_stack 
2a8a ed 52		sbc hl,de 
2a8c			 
2a8c			; div by size of stack item 
2a8c			 
2a8c 5d			ld e,l 
2a8d 0e 03		ld c, 3 
2a8f cd 6e 0f		call Div8 
2a92			 
2a92 6f			ld l,a 
2a93 26 00		ld h,0 
2a95			 
2a95			;srl h 
2a95			;rr l 
2a95			 
2a95 cd 46 20			call forth_push_numhl 
2a98				NEXTW 
2a98 c3 37 24			jp macro_next 
2a9b				endm 
# End of macro NEXTW
2a9b			.OVER: 
2a9b			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2a9b 42				db WORD_SYS_CORE+46             
2a9c e2 2a			dw .PAUSE            
2a9e 05				db 4 + 1 
2a9f .. 00			db "OVER",0              
2aa4				endm 
# End of macro CWHEAD
2aa4			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
2aa4				if DEBUG_FORTH_WORDS_KEY 
2aa4					DMARK "OVR" 
2aa4 f5				push af  
2aa5 3a b9 2a			ld a, (.dmark)  
2aa8 32 a0 fd			ld (debug_mark),a  
2aab 3a ba 2a			ld a, (.dmark+1)  
2aae 32 a1 fd			ld (debug_mark+1),a  
2ab1 3a bb 2a			ld a, (.dmark+2)  
2ab4 32 a2 fd			ld (debug_mark+2),a  
2ab7 18 03			jr .pastdmark  
2ab9 ..			.dmark: db "OVR"  
2abc f1			.pastdmark: pop af  
2abd			endm  
# End of macro DMARK
2abd					CALLMONITOR 
2abd cd aa fd			call debug_vector  
2ac0				endm  
# End of macro CALLMONITOR
2ac0				endif 
2ac0			 
2ac0			; TODO Use os stack swap memory 
2ac0			 
2ac0				; work out what type we are looking at 
2ac0			 
2ac0				FORTH_DSP_PTR 1 
2ac0 2a 23 f9			ld hl,(cli_data_sp) 
2ac3 11 03 00			ld de, 1 * 3 
2ac6 ed 52			sbc hl, de 
2ac8				endm 
# End of macro FORTH_DSP_PTR
2ac8			 
2ac8 7e				ld a, (hl) 
2ac9				 
2ac9 f5				push af 
2aca				; whatever the type lets get the pointer or word 
2aca 23				inc hl 
2acb			;; 
2acb			 
2acb				; type check now to decide on how to push  
2acb			 
2acb cd b9 23			call loadwordinhl 
2ace f1				pop af 
2acf fe 01			cp DS_TYPE_STR 
2ad1 28 06			jr z, .ovstr 
2ad3			 
2ad3				; we have a numeric so load the word and push 
2ad3			;	ld e, (hl) 
2ad3			;	inc hl 
2ad3			;	ld d, (hl) 
2ad3			;	ex de, hl 
2ad3 cd 46 20			call forth_push_numhl 
2ad6				NEXTW 
2ad6 c3 37 24			jp macro_next 
2ad9				endm 
# End of macro NEXTW
2ad9			 
2ad9			.ovstr: 
2ad9				; ok, a string so get the pointer and push as a string 
2ad9			 
2ad9			;	call loadwordinhl 
2ad9 cd b4 20			call forth_push_str 
2adc				NEXTW 
2adc c3 37 24			jp macro_next 
2adf				endm 
# End of macro NEXTW
2adf			 
2adf			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2adf			;	push hl    ; n2 
2adf			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2adf			; 
2adf			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2adf			;	push hl    ; n1 
2adf			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2adf			; 
2adf			;	pop de     ; n1 
2adf			;	pop hl     ; n2 
2adf			; 
2adf			;	push de 
2adf			;	push hl 
2adf			;	push de 
2adf			 
2adf				; push back  
2adf			 
2adf			;	pop hl 
2adf			;	call forth_push_numhl 
2adf			;	pop hl 
2adf			;	call forth_push_numhl 
2adf			;	pop hl 
2adf			;	call forth_push_numhl 
2adf				NEXTW 
2adf c3 37 24			jp macro_next 
2ae2				endm 
# End of macro NEXTW
2ae2			 
2ae2			.PAUSE: 
2ae2			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2ae2 43				db WORD_SYS_CORE+47             
2ae3 17 2b			dw .PAUSES            
2ae5 08				db 7 + 1 
2ae6 .. 00			db "PAUSEMS",0              
2aee				endm 
# End of macro CWHEAD
2aee			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2aee				if DEBUG_FORTH_WORDS_KEY 
2aee					DMARK "PMS" 
2aee f5				push af  
2aef 3a 03 2b			ld a, (.dmark)  
2af2 32 a0 fd			ld (debug_mark),a  
2af5 3a 04 2b			ld a, (.dmark+1)  
2af8 32 a1 fd			ld (debug_mark+1),a  
2afb 3a 05 2b			ld a, (.dmark+2)  
2afe 32 a2 fd			ld (debug_mark+2),a  
2b01 18 03			jr .pastdmark  
2b03 ..			.dmark: db "PMS"  
2b06 f1			.pastdmark: pop af  
2b07			endm  
# End of macro DMARK
2b07					CALLMONITOR 
2b07 cd aa fd			call debug_vector  
2b0a				endm  
# End of macro CALLMONITOR
2b0a				endif 
2b0a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b0a cd 4b 22			call macro_dsp_valuehl 
2b0d				endm 
# End of macro FORTH_DSP_VALUEHL
2b0d			;		push hl    ; n2 
2b0d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b0d cd 03 23			call macro_forth_dsp_pop 
2b10				endm 
# End of macro FORTH_DSP_POP
2b10			;		pop hl 
2b10			 
2b10 7d				ld a, l 
2b11 cd d2 0c			call aDelayInMS 
2b14			       NEXTW 
2b14 c3 37 24			jp macro_next 
2b17				endm 
# End of macro NEXTW
2b17			.PAUSES:  
2b17			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2b17 44				db WORD_SYS_CORE+48             
2b18 86 2b			dw .ROT            
2b1a 06				db 5 + 1 
2b1b .. 00			db "PAUSE",0              
2b21				endm 
# End of macro CWHEAD
2b21			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2b21				if DEBUG_FORTH_WORDS_KEY 
2b21					DMARK "PAU" 
2b21 f5				push af  
2b22 3a 36 2b			ld a, (.dmark)  
2b25 32 a0 fd			ld (debug_mark),a  
2b28 3a 37 2b			ld a, (.dmark+1)  
2b2b 32 a1 fd			ld (debug_mark+1),a  
2b2e 3a 38 2b			ld a, (.dmark+2)  
2b31 32 a2 fd			ld (debug_mark+2),a  
2b34 18 03			jr .pastdmark  
2b36 ..			.dmark: db "PAU"  
2b39 f1			.pastdmark: pop af  
2b3a			endm  
# End of macro DMARK
2b3a					CALLMONITOR 
2b3a cd aa fd			call debug_vector  
2b3d				endm  
# End of macro CALLMONITOR
2b3d				endif 
2b3d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b3d cd 4b 22			call macro_dsp_valuehl 
2b40				endm 
# End of macro FORTH_DSP_VALUEHL
2b40			;		push hl    ; n2 
2b40				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b40 cd 03 23			call macro_forth_dsp_pop 
2b43				endm 
# End of macro FORTH_DSP_POP
2b43			;		pop hl 
2b43 45				ld b, l 
2b44				if DEBUG_FORTH_WORDS 
2b44					DMARK "PAU" 
2b44 f5				push af  
2b45 3a 59 2b			ld a, (.dmark)  
2b48 32 a0 fd			ld (debug_mark),a  
2b4b 3a 5a 2b			ld a, (.dmark+1)  
2b4e 32 a1 fd			ld (debug_mark+1),a  
2b51 3a 5b 2b			ld a, (.dmark+2)  
2b54 32 a2 fd			ld (debug_mark+2),a  
2b57 18 03			jr .pastdmark  
2b59 ..			.dmark: db "PAU"  
2b5c f1			.pastdmark: pop af  
2b5d			endm  
# End of macro DMARK
2b5d					CALLMONITOR 
2b5d cd aa fd			call debug_vector  
2b60				endm  
# End of macro CALLMONITOR
2b60				endif 
2b60 c5			.pauses1:	push bc 
2b61 cd ed 0c			call delay1s 
2b64 c1				pop bc 
2b65				if DEBUG_FORTH_WORDS 
2b65					DMARK "PA1" 
2b65 f5				push af  
2b66 3a 7a 2b			ld a, (.dmark)  
2b69 32 a0 fd			ld (debug_mark),a  
2b6c 3a 7b 2b			ld a, (.dmark+1)  
2b6f 32 a1 fd			ld (debug_mark+1),a  
2b72 3a 7c 2b			ld a, (.dmark+2)  
2b75 32 a2 fd			ld (debug_mark+2),a  
2b78 18 03			jr .pastdmark  
2b7a ..			.dmark: db "PA1"  
2b7d f1			.pastdmark: pop af  
2b7e			endm  
# End of macro DMARK
2b7e					CALLMONITOR 
2b7e cd aa fd			call debug_vector  
2b81				endm  
# End of macro CALLMONITOR
2b81				endif 
2b81 10 dd			djnz .pauses1 
2b83			 
2b83			       NEXTW 
2b83 c3 37 24			jp macro_next 
2b86				endm 
# End of macro NEXTW
2b86			.ROT: 
2b86			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2b86 45				db WORD_SYS_CORE+49             
2b87 ef 2b			dw .UWORDS            
2b89 04				db 3 + 1 
2b8a .. 00			db "ROT",0              
2b8e				endm 
# End of macro CWHEAD
2b8e			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
2b8e				if DEBUG_FORTH_WORDS_KEY 
2b8e					DMARK "ROT" 
2b8e f5				push af  
2b8f 3a a3 2b			ld a, (.dmark)  
2b92 32 a0 fd			ld (debug_mark),a  
2b95 3a a4 2b			ld a, (.dmark+1)  
2b98 32 a1 fd			ld (debug_mark+1),a  
2b9b 3a a5 2b			ld a, (.dmark+2)  
2b9e 32 a2 fd			ld (debug_mark+2),a  
2ba1 18 03			jr .pastdmark  
2ba3 ..			.dmark: db "ROT"  
2ba6 f1			.pastdmark: pop af  
2ba7			endm  
# End of macro DMARK
2ba7					CALLMONITOR 
2ba7 cd aa fd			call debug_vector  
2baa				endm  
# End of macro CALLMONITOR
2baa				endif 
2baa			 
2baa			; DONE Use os stack swap memory 
2baa			 
2baa				FORTH_DSP_PTR 0     ; u3 
2baa 2a 23 f9			ld hl,(cli_data_sp) 
2bad 11 00 00			ld de, 0 * 3 
2bb0 ed 52			sbc hl, de 
2bb2				endm 
# End of macro FORTH_DSP_PTR
2bb2 cd 83 23			call hltostack1     
2bb5			  
2bb5				FORTH_DSP_PTR 1     ; u2 
2bb5 2a 23 f9			ld hl,(cli_data_sp) 
2bb8 11 03 00			ld de, 1 * 3 
2bbb ed 52			sbc hl, de 
2bbd				endm 
# End of macro FORTH_DSP_PTR
2bbd cd 89 23			call hltostack2      
2bc0			 
2bc0				FORTH_DSP_PTR 2     ; u1 
2bc0 2a 23 f9			ld hl,(cli_data_sp) 
2bc3 11 06 00			ld de, 2 * 3 
2bc6 ed 52			sbc hl, de 
2bc8				endm 
# End of macro FORTH_DSP_PTR
2bc8 cd 8f 23			call hltostack3 
2bcb			 
2bcb			 
2bcb				FORTH_DSP_PTR 0     ;  
2bcb 2a 23 f9			ld hl,(cli_data_sp) 
2bce 11 00 00			ld de, 0 * 3 
2bd1 ed 52			sbc hl, de 
2bd3				endm 
# End of macro FORTH_DSP_PTR
2bd3 cd a7 23			call hlfromstack3 
2bd6			 
2bd6				FORTH_DSP_PTR 1     ; TOS 
2bd6 2a 23 f9			ld hl,(cli_data_sp) 
2bd9 11 03 00			ld de, 1 * 3 
2bdc ed 52			sbc hl, de 
2bde				endm 
# End of macro FORTH_DSP_PTR
2bde cd 9b 23			call hlfromstack1 
2be1			 
2be1				FORTH_DSP_PTR 2     ; TOS 
2be1 2a 23 f9			ld hl,(cli_data_sp) 
2be4 11 06 00			ld de, 2 * 3 
2be7 ed 52			sbc hl, de 
2be9				endm 
# End of macro FORTH_DSP_PTR
2be9 cd a1 23			call hlfromstack2 
2bec			 
2bec			 
2bec			;	FORTH_DSP_VALUEHL 
2bec			;	push hl    ; u3  
2bec			; 
2bec			;	FORTH_DSP_POP 
2bec			; 
2bec			;	FORTH_DSP_VALUEHL 
2bec			;	push hl     ; u2 
2bec			; 
2bec			;	FORTH_DSP_POP 
2bec			; 
2bec			;	FORTH_DSP_VALUEHL 
2bec			;	push hl     ; u1 
2bec			; 
2bec			;	FORTH_DSP_POP 
2bec			; 
2bec			;	pop bc      ; u1 
2bec			;	pop hl      ; u2 
2bec			;	pop de      ; u3 
2bec			; 
2bec			; 
2bec			;	push bc 
2bec			;	push de 
2bec			;	push hl 
2bec			; 
2bec			; 
2bec			;	pop hl 
2bec			;	call forth_push_numhl 
2bec			; 
2bec			;	pop hl 
2bec			;	call forth_push_numhl 
2bec			; 
2bec			;	pop hl 
2bec			;	call forth_push_numhl 
2bec				 
2bec			 
2bec			 
2bec			 
2bec			 
2bec			 
2bec			       NEXTW 
2bec c3 37 24			jp macro_next 
2bef				endm 
# End of macro NEXTW
2bef			 
2bef			.UWORDS: 
2bef			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2bef 50				db WORD_SYS_CORE+60             
2bf0 b1 2c			dw .BP            
2bf2 07				db 6 + 1 
2bf3 .. 00			db "UWORDS",0              
2bfa				endm 
# End of macro CWHEAD
2bfa			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2bfa			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2bfa			; | | Following the count are the individual words. 
2bfa			; | | 
2bfa			; | | e.g. UWORDS 
2bfa			; | | BOX DIRLIST 2 
2bfa			; | |  
2bfa			; | | Can be used to save the words to storage via: 
2bfa			; | | UWORDS $01 DO $01 APPEND LOOP 
2bfa			if DEBUG_FORTH_WORDS_KEY 
2bfa				DMARK "UWR" 
2bfa f5				push af  
2bfb 3a 0f 2c			ld a, (.dmark)  
2bfe 32 a0 fd			ld (debug_mark),a  
2c01 3a 10 2c			ld a, (.dmark+1)  
2c04 32 a1 fd			ld (debug_mark+1),a  
2c07 3a 11 2c			ld a, (.dmark+2)  
2c0a 32 a2 fd			ld (debug_mark+2),a  
2c0d 18 03			jr .pastdmark  
2c0f ..			.dmark: db "UWR"  
2c12 f1			.pastdmark: pop af  
2c13			endm  
# End of macro DMARK
2c13				CALLMONITOR 
2c13 cd aa fd			call debug_vector  
2c16				endm  
# End of macro CALLMONITOR
2c16			endif 
2c16 21 00 80			ld hl, baseram 
2c19				;ld hl, baseusermem 
2c19 01 00 00			ld bc, 0    ; start a counter 
2c1c			 
2c1c			; skip dict stub 
2c1c			 
2c1c cd 88 25			call forth_tok_next 
2c1f			 
2c1f			 
2c1f			; while we have words to look for 
2c1f			 
2c1f 7e			.douscan:	ld a, (hl)      
2c20			if DEBUG_FORTH_WORDS 
2c20				DMARK "UWs" 
2c20 f5				push af  
2c21 3a 35 2c			ld a, (.dmark)  
2c24 32 a0 fd			ld (debug_mark),a  
2c27 3a 36 2c			ld a, (.dmark+1)  
2c2a 32 a1 fd			ld (debug_mark+1),a  
2c2d 3a 37 2c			ld a, (.dmark+2)  
2c30 32 a2 fd			ld (debug_mark+2),a  
2c33 18 03			jr .pastdmark  
2c35 ..			.dmark: db "UWs"  
2c38 f1			.pastdmark: pop af  
2c39			endm  
# End of macro DMARK
2c39				CALLMONITOR 
2c39 cd aa fd			call debug_vector  
2c3c				endm  
# End of macro CALLMONITOR
2c3c			endif 
2c3c fe 00			cp WORD_SYS_END 
2c3e 28 4d			jr z, .udone 
2c40 fe 01			cp WORD_SYS_UWORD 
2c42 20 44			jr nz, .nuword 
2c44			 
2c44			if DEBUG_FORTH_WORDS 
2c44				DMARK "UWu" 
2c44 f5				push af  
2c45 3a 59 2c			ld a, (.dmark)  
2c48 32 a0 fd			ld (debug_mark),a  
2c4b 3a 5a 2c			ld a, (.dmark+1)  
2c4e 32 a1 fd			ld (debug_mark+1),a  
2c51 3a 5b 2c			ld a, (.dmark+2)  
2c54 32 a2 fd			ld (debug_mark+2),a  
2c57 18 03			jr .pastdmark  
2c59 ..			.dmark: db "UWu"  
2c5c f1			.pastdmark: pop af  
2c5d			endm  
# End of macro DMARK
2c5d				CALLMONITOR 
2c5d cd aa fd			call debug_vector  
2c60				endm  
# End of macro CALLMONITOR
2c60			endif 
2c60				; we have a uword so push its name to the stack 
2c60			 
2c60 e5				push hl  ; save so we can move to next dict block 
2c61			 
2c61				; skip opcode 
2c61 23				inc hl  
2c62				; skip next ptr 
2c62 23				inc hl  
2c63 23				inc hl 
2c64				; skip len 
2c64 23				inc hl 
2c65			if DEBUG_FORTH_WORDS 
2c65				DMARK "UWt" 
2c65 f5				push af  
2c66 3a 7a 2c			ld a, (.dmark)  
2c69 32 a0 fd			ld (debug_mark),a  
2c6c 3a 7b 2c			ld a, (.dmark+1)  
2c6f 32 a1 fd			ld (debug_mark+1),a  
2c72 3a 7c 2c			ld a, (.dmark+2)  
2c75 32 a2 fd			ld (debug_mark+2),a  
2c78 18 03			jr .pastdmark  
2c7a ..			.dmark: db "UWt"  
2c7d f1			.pastdmark: pop af  
2c7e			endm  
# End of macro DMARK
2c7e				CALLMONITOR 
2c7e cd aa fd			call debug_vector  
2c81				endm  
# End of macro CALLMONITOR
2c81			endif 
2c81 03				inc bc 
2c82			 
2c82 c5				push bc 
2c83 cd b4 20			call forth_push_str 
2c86 c1				pop bc 
2c87			 
2c87 e1				pop hl 	 
2c88			 
2c88 cd 88 25		.nuword:	call forth_tok_next 
2c8b 18 92			jr .douscan  
2c8d			 
2c8d			.udone:		 ; push count of uwords found 
2c8d c5				push bc 
2c8e e1				pop hl 
2c8f			 
2c8f			if DEBUG_FORTH_WORDS 
2c8f				DMARK "UWc" 
2c8f f5				push af  
2c90 3a a4 2c			ld a, (.dmark)  
2c93 32 a0 fd			ld (debug_mark),a  
2c96 3a a5 2c			ld a, (.dmark+1)  
2c99 32 a1 fd			ld (debug_mark+1),a  
2c9c 3a a6 2c			ld a, (.dmark+2)  
2c9f 32 a2 fd			ld (debug_mark+2),a  
2ca2 18 03			jr .pastdmark  
2ca4 ..			.dmark: db "UWc"  
2ca7 f1			.pastdmark: pop af  
2ca8			endm  
# End of macro DMARK
2ca8				CALLMONITOR 
2ca8 cd aa fd			call debug_vector  
2cab				endm  
# End of macro CALLMONITOR
2cab			endif 
2cab cd 46 20			call forth_push_numhl 
2cae			 
2cae			 
2cae			       NEXTW 
2cae c3 37 24			jp macro_next 
2cb1				endm 
# End of macro NEXTW
2cb1			 
2cb1			.BP: 
2cb1			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2cb1 54				db WORD_SYS_CORE+64             
2cb2 eb 2c			dw .MONITOR            
2cb4 03				db 2 + 1 
2cb5 .. 00			db "BP",0              
2cb8				endm 
# End of macro CWHEAD
2cb8			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2cb8			; | | $00 Will enable the break points within specific code paths 
2cb8			; | | $01 Will disable break points 
2cb8			; | |  
2cb8			; | | By default break points are off. Either the above can be used to enable them 
2cb8			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2cb8			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2cb8			; | | can disable break points. Exiting will then continue boot process. 
2cb8				; get byte count 
2cb8				if DEBUG_FORTH_WORDS_KEY 
2cb8					DMARK "BP." 
2cb8 f5				push af  
2cb9 3a cd 2c			ld a, (.dmark)  
2cbc 32 a0 fd			ld (debug_mark),a  
2cbf 3a ce 2c			ld a, (.dmark+1)  
2cc2 32 a1 fd			ld (debug_mark+1),a  
2cc5 3a cf 2c			ld a, (.dmark+2)  
2cc8 32 a2 fd			ld (debug_mark+2),a  
2ccb 18 03			jr .pastdmark  
2ccd ..			.dmark: db "BP."  
2cd0 f1			.pastdmark: pop af  
2cd1			endm  
# End of macro DMARK
2cd1					CALLMONITOR 
2cd1 cd aa fd			call debug_vector  
2cd4				endm  
# End of macro CALLMONITOR
2cd4				endif 
2cd4			 
2cd4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2cd4 cd 4b 22			call macro_dsp_valuehl 
2cd7				endm 
# End of macro FORTH_DSP_VALUEHL
2cd7			 
2cd7			;		push hl 
2cd7			 
2cd7				; destroy value TOS 
2cd7			 
2cd7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2cd7 cd 03 23			call macro_forth_dsp_pop 
2cda				endm 
# End of macro FORTH_DSP_POP
2cda			 
2cda			;		pop hl 
2cda			 
2cda 3e 00			ld a,0 
2cdc bd				cp l 
2cdd 28 06			jr z, .bpset 
2cdf			;		ld a, '*' 
2cdf cd 53 19			call bp_off 
2ce2				NEXTW 
2ce2 c3 37 24			jp macro_next 
2ce5				endm 
# End of macro NEXTW
2ce5			 
2ce5			.bpset:	 
2ce5				;	ld (os_view_disable), a 
2ce5 cd 47 19			call bp_on 
2ce8			 
2ce8			 
2ce8				NEXTW 
2ce8 c3 37 24			jp macro_next 
2ceb				endm 
# End of macro NEXTW
2ceb			 
2ceb			 
2ceb			.MONITOR: 
2ceb			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2ceb 55				db WORD_SYS_CORE+65             
2cec 1c 2d			dw .MALLOC            
2cee 08				db 7 + 1 
2cef .. 00			db "MONITOR",0              
2cf7				endm 
# End of macro CWHEAD
2cf7			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2cf7			; | | At start the current various registers will be displayed with contents. 
2cf7			; | | Top right corner will show the most recent debug marker seen. 
2cf7			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2cf7			; | | and the return stack pointer (RSP). 
2cf7			; | | Pressing: 
2cf7			; | |    1 - Initial screen 
2cf7			; | |    2 - Display a data dump of HL 
2cf7			; | |    3 - Display a data dump of DE 
2cf7			; | |    4 - Display a data dump of BC 
2cf7			; | |    5 - Display a data dump of HL 
2cf7			; | |    6 - Display a data dump of DSP 
2cf7			; | |    7 - Display a data dump of RSP 
2cf7			; | |    8 - Display a data dump of what is at DSP 
2cf7			; | |    9 - Display a data dump of what is at RSP 
2cf7			; | |    0 - Exit monitor and continue running. This will also enable break points 
2cf7			; | |    * - Disable break points 
2cf7			; | |    # - Enter traditional monitor mode 
2cf7			; | | 
2cf7			; | | Monitor Mode 
2cf7			; | | ------------ 
2cf7			; | | A prompt of '>' will be shown for various commands: 
2cf7			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2cf7			; | |    C - Continue display a data dump from the last set address 
2cf7			; | |    M xxxx - Set start of memory edit at address xx 
2cf7			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2cf7			; | |    G xxxx - Exec code at specific address 
2cf7			; | |    Q - Return to previous 
2cf7				if DEBUG_FORTH_WORDS_KEY 
2cf7					DMARK "MON" 
2cf7 f5				push af  
2cf8 3a 0c 2d			ld a, (.dmark)  
2cfb 32 a0 fd			ld (debug_mark),a  
2cfe 3a 0d 2d			ld a, (.dmark+1)  
2d01 32 a1 fd			ld (debug_mark+1),a  
2d04 3a 0e 2d			ld a, (.dmark+2)  
2d07 32 a2 fd			ld (debug_mark+2),a  
2d0a 18 03			jr .pastdmark  
2d0c ..			.dmark: db "MON"  
2d0f f1			.pastdmark: pop af  
2d10			endm  
# End of macro DMARK
2d10					CALLMONITOR 
2d10 cd aa fd			call debug_vector  
2d13				endm  
# End of macro CALLMONITOR
2d13				endif 
2d13			;		ld a, 0 
2d13			;		ld (os_view_disable), a 
2d13 cd 47 19			call bp_on 
2d16			 
2d16				CALLMONITOR 
2d16 cd aa fd			call debug_vector  
2d19				endm  
# End of macro CALLMONITOR
2d19			 
2d19			;	call monitor 
2d19			 
2d19				NEXTW 
2d19 c3 37 24			jp macro_next 
2d1c				endm 
# End of macro NEXTW
2d1c			 
2d1c			 
2d1c			.MALLOC: 
2d1c			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2d1c 56				db WORD_SYS_CORE+66             
2d1d 45 2d			dw .MALLOC2            
2d1f 06				db 5 + 1 
2d20 .. 00			db "ALLOT",0              
2d26				endm 
# End of macro CWHEAD
2d26			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2d26				if DEBUG_FORTH_WORDS_KEY 
2d26					DMARK "ALL" 
2d26 f5				push af  
2d27 3a 3b 2d			ld a, (.dmark)  
2d2a 32 a0 fd			ld (debug_mark),a  
2d2d 3a 3c 2d			ld a, (.dmark+1)  
2d30 32 a1 fd			ld (debug_mark+1),a  
2d33 3a 3d 2d			ld a, (.dmark+2)  
2d36 32 a2 fd			ld (debug_mark+2),a  
2d39 18 03			jr .pastdmark  
2d3b ..			.dmark: db "ALL"  
2d3e f1			.pastdmark: pop af  
2d3f			endm  
# End of macro DMARK
2d3f					CALLMONITOR 
2d3f cd aa fd			call debug_vector  
2d42				endm  
# End of macro CALLMONITOR
2d42				endif 
2d42 c3 6c 2d			jp .mallocc 
2d45			.MALLOC2: 
2d45			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2d45 56				db WORD_SYS_CORE+66             
2d46 83 2d			dw .FREE            
2d48 07				db 6 + 1 
2d49 .. 00			db "MALLOC",0              
2d50				endm 
# End of macro CWHEAD
2d50			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2d50				; get byte count 
2d50				if DEBUG_FORTH_WORDS_KEY 
2d50					DMARK "MAL" 
2d50 f5				push af  
2d51 3a 65 2d			ld a, (.dmark)  
2d54 32 a0 fd			ld (debug_mark),a  
2d57 3a 66 2d			ld a, (.dmark+1)  
2d5a 32 a1 fd			ld (debug_mark+1),a  
2d5d 3a 67 2d			ld a, (.dmark+2)  
2d60 32 a2 fd			ld (debug_mark+2),a  
2d63 18 03			jr .pastdmark  
2d65 ..			.dmark: db "MAL"  
2d68 f1			.pastdmark: pop af  
2d69			endm  
# End of macro DMARK
2d69					CALLMONITOR 
2d69 cd aa fd			call debug_vector  
2d6c				endm  
# End of macro CALLMONITOR
2d6c				endif 
2d6c			.mallocc: 
2d6c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2d6c cd 4b 22			call macro_dsp_valuehl 
2d6f				endm 
# End of macro FORTH_DSP_VALUEHL
2d6f			 
2d6f			;		push hl 
2d6f			 
2d6f				; destroy value TOS 
2d6f			 
2d6f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2d6f cd 03 23			call macro_forth_dsp_pop 
2d72				endm 
# End of macro FORTH_DSP_POP
2d72			 
2d72			;		pop hl 
2d72 cd b9 13			call malloc 
2d75			if DEBUG_FORTH_MALLOC_GUARD 
2d75 f5				push af 
2d76 cd 07 10			call ishlzero 
2d79			;		ld a, l 
2d79			;		add h 
2d79			;		cp 0 
2d79 f1				pop af 
2d7a				 
2d7a cc 46 5e			call z,malloc_error 
2d7d			endif 
2d7d			 
2d7d cd 46 20			call forth_push_numhl 
2d80				NEXTW 
2d80 c3 37 24			jp macro_next 
2d83				endm 
# End of macro NEXTW
2d83			 
2d83			.FREE: 
2d83			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2d83 57				db WORD_SYS_CORE+67             
2d84 b4 2d			dw .LIST            
2d86 05				db 4 + 1 
2d87 .. 00			db "FREE",0              
2d8c				endm 
# End of macro CWHEAD
2d8c			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2d8c				if DEBUG_FORTH_WORDS_KEY 
2d8c					DMARK "FRE" 
2d8c f5				push af  
2d8d 3a a1 2d			ld a, (.dmark)  
2d90 32 a0 fd			ld (debug_mark),a  
2d93 3a a2 2d			ld a, (.dmark+1)  
2d96 32 a1 fd			ld (debug_mark+1),a  
2d99 3a a3 2d			ld a, (.dmark+2)  
2d9c 32 a2 fd			ld (debug_mark+2),a  
2d9f 18 03			jr .pastdmark  
2da1 ..			.dmark: db "FRE"  
2da4 f1			.pastdmark: pop af  
2da5			endm  
# End of macro DMARK
2da5					CALLMONITOR 
2da5 cd aa fd			call debug_vector  
2da8				endm  
# End of macro CALLMONITOR
2da8				endif 
2da8				; get address 
2da8			 
2da8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2da8 cd 4b 22			call macro_dsp_valuehl 
2dab				endm 
# End of macro FORTH_DSP_VALUEHL
2dab			 
2dab			;		push hl 
2dab			 
2dab				; destroy value TOS 
2dab			 
2dab				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2dab cd 03 23			call macro_forth_dsp_pop 
2dae				endm 
# End of macro FORTH_DSP_POP
2dae			 
2dae			;		pop hl 
2dae			if FORTH_ENABLE_MALLOCFREE 
2dae cd 83 14			call free 
2db1			endif 
2db1				NEXTW 
2db1 c3 37 24			jp macro_next 
2db4				endm 
# End of macro NEXTW
2db4			.LIST: 
2db4			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2db4 5c				db WORD_SYS_CORE+72             
2db5 b0 2f			dw .FORGET            
2db7 05				db 4 + 1 
2db8 .. 00			db "LIST",0              
2dbd				endm 
# End of macro CWHEAD
2dbd			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2dbd			; | | The quoted word must be in upper case. 
2dbd			if DEBUG_FORTH_WORDS_KEY 
2dbd				DMARK "LST" 
2dbd f5				push af  
2dbe 3a d2 2d			ld a, (.dmark)  
2dc1 32 a0 fd			ld (debug_mark),a  
2dc4 3a d3 2d			ld a, (.dmark+1)  
2dc7 32 a1 fd			ld (debug_mark+1),a  
2dca 3a d4 2d			ld a, (.dmark+2)  
2dcd 32 a2 fd			ld (debug_mark+2),a  
2dd0 18 03			jr .pastdmark  
2dd2 ..			.dmark: db "LST"  
2dd5 f1			.pastdmark: pop af  
2dd6			endm  
# End of macro DMARK
2dd6				CALLMONITOR 
2dd6 cd aa fd			call debug_vector  
2dd9				endm  
# End of macro CALLMONITOR
2dd9			endif 
2dd9			 
2dd9				FORTH_DSP_VALUEHL 
2dd9 cd 4b 22			call macro_dsp_valuehl 
2ddc				endm 
# End of macro FORTH_DSP_VALUEHL
2ddc			 
2ddc e5				push hl 
2ddd				FORTH_DSP_POP 
2ddd cd 03 23			call macro_forth_dsp_pop 
2de0				endm 
# End of macro FORTH_DSP_POP
2de0 c1				pop bc 
2de1			 
2de1			; Start format of scratch string 
2de1			 
2de1 21 f6 f0			ld hl, scratch 
2de4			 
2de4 3e 3a			ld a, ':' 
2de6 77				ld (hl),a 
2de7 23				inc hl 
2de8 3e 20			ld a, ' ' 
2dea 77				ld (hl), a 
2deb			 
2deb				; Get ptr to the word we need to look up 
2deb			 
2deb			;		FORTH_DSP_VALUEHL 
2deb				;v5 FORTH_DSP_VALUE 
2deb			; TODO type check 
2deb			;		inc hl    ; Skip type check  
2deb			;		push hl 
2deb			;		ex de, hl    ; put into DE 
2deb			 
2deb			 
2deb 21 00 80			ld hl, baseram 
2dee				;ld hl, baseusermem 
2dee			 
2dee e5			push hl   ; sacreifical push 
2def			 
2def			.ldouscanm: 
2def e1			pop hl 
2df0			.ldouscan: 
2df0			if DEBUG_FORTH_WORDS 
2df0				DMARK "LSs" 
2df0 f5				push af  
2df1 3a 05 2e			ld a, (.dmark)  
2df4 32 a0 fd			ld (debug_mark),a  
2df7 3a 06 2e			ld a, (.dmark+1)  
2dfa 32 a1 fd			ld (debug_mark+1),a  
2dfd 3a 07 2e			ld a, (.dmark+2)  
2e00 32 a2 fd			ld (debug_mark+2),a  
2e03 18 03			jr .pastdmark  
2e05 ..			.dmark: db "LSs"  
2e08 f1			.pastdmark: pop af  
2e09			endm  
# End of macro DMARK
2e09				CALLMONITOR 
2e09 cd aa fd			call debug_vector  
2e0c				endm  
# End of macro CALLMONITOR
2e0c			endif 
2e0c			; skip dict stub 
2e0c cd 88 25			call forth_tok_next 
2e0f			 
2e0f			 
2e0f			; while we have words to look for 
2e0f			 
2e0f 7e			ld a, (hl)      
2e10			if DEBUG_FORTH_WORDS 
2e10				DMARK "LSk" 
2e10 f5				push af  
2e11 3a 25 2e			ld a, (.dmark)  
2e14 32 a0 fd			ld (debug_mark),a  
2e17 3a 26 2e			ld a, (.dmark+1)  
2e1a 32 a1 fd			ld (debug_mark+1),a  
2e1d 3a 27 2e			ld a, (.dmark+2)  
2e20 32 a2 fd			ld (debug_mark+2),a  
2e23 18 03			jr .pastdmark  
2e25 ..			.dmark: db "LSk"  
2e28 f1			.pastdmark: pop af  
2e29			endm  
# End of macro DMARK
2e29				CALLMONITOR 
2e29 cd aa fd			call debug_vector  
2e2c				endm  
# End of macro CALLMONITOR
2e2c			endif 
2e2c				;cp WORD_SYS_END 
2e2c				;jp z, .lunotfound 
2e2c			 
2e2c					; if we hit non uwords then gone too far 
2e2c fe 01				cp WORD_SYS_UWORD 
2e2e c2 6c 2f				jp nz, .lunotfound 
2e31			 
2e31				if DEBUG_FORTH_WORDS 
2e31					DMARK "LSu" 
2e31 f5				push af  
2e32 3a 46 2e			ld a, (.dmark)  
2e35 32 a0 fd			ld (debug_mark),a  
2e38 3a 47 2e			ld a, (.dmark+1)  
2e3b 32 a1 fd			ld (debug_mark+1),a  
2e3e 3a 48 2e			ld a, (.dmark+2)  
2e41 32 a2 fd			ld (debug_mark+2),a  
2e44 18 03			jr .pastdmark  
2e46 ..			.dmark: db "LSu"  
2e49 f1			.pastdmark: pop af  
2e4a			endm  
# End of macro DMARK
2e4a					CALLMONITOR 
2e4a cd aa fd			call debug_vector  
2e4d				endm  
# End of macro CALLMONITOR
2e4d				endif 
2e4d			 
2e4d					; found a uword but is it the one we want... 
2e4d			 
2e4d c5					push bc     ; uword to find is on bc 
2e4e d1					pop de 
2e4f			 
2e4f e5					push hl  ; to save the ptr 
2e50			 
2e50					; skip opcode 
2e50 23					inc hl  
2e51					; skip next ptr 
2e51 23					inc hl  
2e52 23					inc hl 
2e53					; skip len 
2e53 23					inc hl 
2e54			 
2e54				if DEBUG_FORTH_WORDS 
2e54					DMARK "LSc" 
2e54 f5				push af  
2e55 3a 69 2e			ld a, (.dmark)  
2e58 32 a0 fd			ld (debug_mark),a  
2e5b 3a 6a 2e			ld a, (.dmark+1)  
2e5e 32 a1 fd			ld (debug_mark+1),a  
2e61 3a 6b 2e			ld a, (.dmark+2)  
2e64 32 a2 fd			ld (debug_mark+2),a  
2e67 18 03			jr .pastdmark  
2e69 ..			.dmark: db "LSc"  
2e6c f1			.pastdmark: pop af  
2e6d			endm  
# End of macro DMARK
2e6d					CALLMONITOR 
2e6d cd aa fd			call debug_vector  
2e70				endm  
# End of macro CALLMONITOR
2e70				endif 
2e70			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2e70			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2e70			; Nope that has gone the other way. It needs to be exact not on first zero 
2e70			;		call strcmp 
2e70 c5					push bc 
2e71 cd 89 13				call StrictStrCmp 
2e74 c1					pop bc 
2e75 c2 ef 2d				jp nz, .ldouscanm 
2e78				 
2e78			 
2e78			 
2e78					; we have a uword so push its name to the stack 
2e78			 
2e78			;	   	push hl  ; save so we can move to next dict block 
2e78 e1			pop hl 
2e79			 
2e79				if DEBUG_FORTH_WORDS 
2e79					DMARK "LSm" 
2e79 f5				push af  
2e7a 3a 8e 2e			ld a, (.dmark)  
2e7d 32 a0 fd			ld (debug_mark),a  
2e80 3a 8f 2e			ld a, (.dmark+1)  
2e83 32 a1 fd			ld (debug_mark+1),a  
2e86 3a 90 2e			ld a, (.dmark+2)  
2e89 32 a2 fd			ld (debug_mark+2),a  
2e8c 18 03			jr .pastdmark  
2e8e ..			.dmark: db "LSm"  
2e91 f1			.pastdmark: pop af  
2e92			endm  
# End of macro DMARK
2e92					CALLMONITOR 
2e92 cd aa fd			call debug_vector  
2e95				endm  
# End of macro CALLMONITOR
2e95				endif 
2e95			 
2e95					; skip opcode 
2e95 23					inc hl  
2e96					; skip next ptr 
2e96 23					inc hl  
2e97 23					inc hl 
2e98					; skip len 
2e98 7e					ld a, (hl)   ; save length to add 
2e99				if DEBUG_FORTH_WORDS 
2e99					DMARK "LS2" 
2e99 f5				push af  
2e9a 3a ae 2e			ld a, (.dmark)  
2e9d 32 a0 fd			ld (debug_mark),a  
2ea0 3a af 2e			ld a, (.dmark+1)  
2ea3 32 a1 fd			ld (debug_mark+1),a  
2ea6 3a b0 2e			ld a, (.dmark+2)  
2ea9 32 a2 fd			ld (debug_mark+2),a  
2eac 18 03			jr .pastdmark  
2eae ..			.dmark: db "LS2"  
2eb1 f1			.pastdmark: pop af  
2eb2			endm  
# End of macro DMARK
2eb2					CALLMONITOR 
2eb2 cd aa fd			call debug_vector  
2eb5				endm  
# End of macro CALLMONITOR
2eb5				endif 
2eb5			 
2eb5					; save this location 
2eb5				 
2eb5 e5					push hl 
2eb6			 
2eb6 23					inc hl 
2eb7 11 f8 f0				ld de, scratch+2 
2eba 4f					ld c, a 
2ebb 06 00				ld b, 0 
2ebd			 
2ebd				if DEBUG_FORTH_WORDS 
2ebd					DMARK "LSn" 
2ebd f5				push af  
2ebe 3a d2 2e			ld a, (.dmark)  
2ec1 32 a0 fd			ld (debug_mark),a  
2ec4 3a d3 2e			ld a, (.dmark+1)  
2ec7 32 a1 fd			ld (debug_mark+1),a  
2eca 3a d4 2e			ld a, (.dmark+2)  
2ecd 32 a2 fd			ld (debug_mark+2),a  
2ed0 18 03			jr .pastdmark  
2ed2 ..			.dmark: db "LSn"  
2ed5 f1			.pastdmark: pop af  
2ed6			endm  
# End of macro DMARK
2ed6					CALLMONITOR 
2ed6 cd aa fd			call debug_vector  
2ed9				endm  
# End of macro CALLMONITOR
2ed9				endif 
2ed9			 
2ed9					; copy uword name to scratch 
2ed9			 
2ed9			;		ldir 
2ed9			.licplw:	; copy uword name to scratch converting to lower case as we go 
2ed9 ed a0				ldi 
2edb 1b					dec de 
2edc 1a					ld a, (de) 
2edd cd 5c 12				call to_lower 
2ee0 12					ld (de),a 
2ee1 13					inc de 
2ee2 3e 00				ld a, 0 
2ee4 b9					cp c 
2ee5 20 f2				jr nz, .licplw 
2ee7			 
2ee7			 
2ee7			 
2ee7 1b					dec de 
2ee8 3e 20				ld a, ' '    ; change null to space 
2eea 12					ld (de), a 
2eeb			 
2eeb 13					inc de 
2eec			 
2eec d5					push de 
2eed c1					pop bc     ; move scratch pointer to end of word name and save it 
2eee			 
2eee e1					pop hl 
2eef 7e					ld a, (hl) 
2ef0					;inc hl 
2ef0					; skip word string 
2ef0 cd de 0f				call addatohl 
2ef3			 
2ef3 23					inc hl 
2ef4			 
2ef4				if DEBUG_FORTH_WORDS 
2ef4					DMARK "LS3" 
2ef4 f5				push af  
2ef5 3a 09 2f			ld a, (.dmark)  
2ef8 32 a0 fd			ld (debug_mark),a  
2efb 3a 0a 2f			ld a, (.dmark+1)  
2efe 32 a1 fd			ld (debug_mark+1),a  
2f01 3a 0b 2f			ld a, (.dmark+2)  
2f04 32 a2 fd			ld (debug_mark+2),a  
2f07 18 03			jr .pastdmark  
2f09 ..			.dmark: db "LS3"  
2f0c f1			.pastdmark: pop af  
2f0d			endm  
# End of macro DMARK
2f0d					CALLMONITOR 
2f0d cd aa fd			call debug_vector  
2f10				endm  
# End of macro CALLMONITOR
2f10				endif 
2f10					; should now be at the start of the machine code to setup the eval of the uword 
2f10					; now locate the ptr to the string defintion 
2f10			 
2f10					; skip ld hl, 
2f10					; then load the ptr 
2f10			; TODO use get from hl ptr 
2f10 23					inc hl 
2f11 5e					ld e, (hl) 
2f12 23					inc hl 
2f13 56					ld d, (hl) 
2f14 eb					ex de, hl 
2f15			 
2f15			 
2f15				if DEBUG_FORTH_WORDS 
2f15					DMARK "LSt" 
2f15 f5				push af  
2f16 3a 2a 2f			ld a, (.dmark)  
2f19 32 a0 fd			ld (debug_mark),a  
2f1c 3a 2b 2f			ld a, (.dmark+1)  
2f1f 32 a1 fd			ld (debug_mark+1),a  
2f22 3a 2c 2f			ld a, (.dmark+2)  
2f25 32 a2 fd			ld (debug_mark+2),a  
2f28 18 03			jr .pastdmark  
2f2a ..			.dmark: db "LSt"  
2f2d f1			.pastdmark: pop af  
2f2e			endm  
# End of macro DMARK
2f2e					CALLMONITOR 
2f2e cd aa fd			call debug_vector  
2f31				endm  
# End of macro CALLMONITOR
2f31				endif 
2f31			 
2f31			; cant push right now due to tokenised strings  
2f31			 
2f31			; get the destination of where to copy this definition to. 
2f31			 
2f31 c5					push bc 
2f32 d1					pop de 
2f33			 
2f33 7e			.listl:         ld a,(hl) 
2f34 fe 00				cp 0 
2f36 28 09				jr z, .lreplsp     ; replace zero with space 
2f38					;cp FORTH_END_BUFFER 
2f38 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2f3a 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2f3c				 
2f3c					; just copy this char as is then 
2f3c			 
2f3c 12					ld (de), a 
2f3d			 
2f3d 23			.listnxt:	inc hl 
2f3e 13					inc de 
2f3f 18 f2				jr .listl 
2f41			 
2f41 3e 20		.lreplsp:	ld a,' ' 
2f43 12					ld (de), a 
2f44 18 f7				jr .listnxt 
2f46			 
2f46			; close up uword def 
2f46			 
2f46			.listdone: 
2f46 12					ld (de), a 
2f47 13					inc de 
2f48 3e 00				ld a, 0 
2f4a 12					ld (de), a 
2f4b			 
2f4b			; now have def so clean up and push to stack 
2f4b			 
2f4b 21 f6 f0				ld hl, scratch 
2f4e				if DEBUG_FORTH_WORDS 
2f4e					DMARK "Ltp" 
2f4e f5				push af  
2f4f 3a 63 2f			ld a, (.dmark)  
2f52 32 a0 fd			ld (debug_mark),a  
2f55 3a 64 2f			ld a, (.dmark+1)  
2f58 32 a1 fd			ld (debug_mark+1),a  
2f5b 3a 65 2f			ld a, (.dmark+2)  
2f5e 32 a2 fd			ld (debug_mark+2),a  
2f61 18 03			jr .pastdmark  
2f63 ..			.dmark: db "Ltp"  
2f66 f1			.pastdmark: pop af  
2f67			endm  
# End of macro DMARK
2f67					CALLMONITOR 
2f67 cd aa fd			call debug_vector  
2f6a				endm  
# End of macro CALLMONITOR
2f6a				endif 
2f6a			 
2f6a 18 1f			jr .listpush 
2f6c			 
2f6c			;.lnuword:	pop hl 
2f6c			;		call forth_tok_next 
2f6c			;		jp .ldouscan  
2f6c			 
2f6c			.lunotfound:		  
2f6c			 
2f6c				if DEBUG_FORTH_WORDS 
2f6c					DMARK "LSn" 
2f6c f5				push af  
2f6d 3a 81 2f			ld a, (.dmark)  
2f70 32 a0 fd			ld (debug_mark),a  
2f73 3a 82 2f			ld a, (.dmark+1)  
2f76 32 a1 fd			ld (debug_mark+1),a  
2f79 3a 83 2f			ld a, (.dmark+2)  
2f7c 32 a2 fd			ld (debug_mark+2),a  
2f7f 18 03			jr .pastdmark  
2f81 ..			.dmark: db "LSn"  
2f84 f1			.pastdmark: pop af  
2f85			endm  
# End of macro DMARK
2f85					CALLMONITOR 
2f85 cd aa fd			call debug_vector  
2f88				endm  
# End of macro CALLMONITOR
2f88				endif 
2f88			 
2f88					 
2f88			;		FORTH_DSP_POP 
2f88			;		ld hl, .luno 
2f88			 
2f88					NEXTW			 
2f88 c3 37 24			jp macro_next 
2f8b				endm 
# End of macro NEXTW
2f8b			 
2f8b			.listpush: 
2f8b				if DEBUG_FORTH_WORDS 
2f8b					DMARK "LS>" 
2f8b f5				push af  
2f8c 3a a0 2f			ld a, (.dmark)  
2f8f 32 a0 fd			ld (debug_mark),a  
2f92 3a a1 2f			ld a, (.dmark+1)  
2f95 32 a1 fd			ld (debug_mark+1),a  
2f98 3a a2 2f			ld a, (.dmark+2)  
2f9b 32 a2 fd			ld (debug_mark+2),a  
2f9e 18 03			jr .pastdmark  
2fa0 ..			.dmark: db "LS>"  
2fa3 f1			.pastdmark: pop af  
2fa4			endm  
# End of macro DMARK
2fa4					CALLMONITOR 
2fa4 cd aa fd			call debug_vector  
2fa7				endm  
# End of macro CALLMONITOR
2fa7				endif 
2fa7 cd b4 20				call forth_push_str 
2faa			 
2faa			 
2faa			 
2faa					NEXTW 
2faa c3 37 24			jp macro_next 
2fad				endm 
# End of macro NEXTW
2fad			 
2fad			;.luno:    db "Word not found",0 
2fad			 
2fad			 
2fad			 
2fad			 
2fad			 
2fad			;		push hl   ; save pointer to start of uword def string 
2fad			; 
2fad			;; look for FORTH_EOL_LINE 
2fad			;		ld a, FORTH_END_BUFFER 
2fad			;		call strlent 
2fad			; 
2fad			;		inc hl		 ; space for coln def 
2fad			;		inc hl 
2fad			;		inc hl          ; space for terms 
2fad			;		inc hl 
2fad			; 
2fad			;		ld a, 20   ; TODO get actual length 
2fad			;		call addatohl    ; include a random amount of room for the uword name 
2fad			; 
2fad			;		 
2fad			;	if DEBUG_FORTH_WORDS 
2fad			;		DMARK "Lt1" 
2fad			;		CALLMONITOR 
2fad			;	endif 
2fad			;		 
2fad			; 
2fad			;; malloc space for the string because we cant change it 
2fad			; 
2fad			;		call malloc 
2fad			;	if DEBUG_FORTH_MALLOC_GUARD 
2fad			;		push af 
2fad			;		call ishlzero 
2fad			;		pop af 
2fad			;		 
2fad			;		call z,malloc_error 
2fad			;	endif 
2fad			; 
2fad			;	if DEBUG_FORTH_WORDS 
2fad			;		DMARK "Lt2" 
2fad			;		CALLMONITOR 
2fad			;	endif 
2fad			;		pop de 
2fad			;		push hl    ; push the malloc to release later 
2fad			;		push hl   ;  push back a copy for the later stack push 
2fad			;		 
2fad			;; copy the string swapping out the zero terms for spaces 
2fad			; 
2fad			;		; de has our source 
2fad			;		; hl has our dest 
2fad			; 
2fad			;; add the coln def 
2fad			; 
2fad			;		ld a, ':' 
2fad			;		ld (hl), a 
2fad			;		inc hl 
2fad			;		ld a, ' ' 
2fad			;		ld (hl), a 
2fad			;		inc hl 
2fad			; 
2fad			;; add the uname word 
2fad			;		push de   ; save our string for now 
2fad			;		ex de, hl 
2fad			; 
2fad			;		FORTH_DSP_VALUE 
2fad			;		;v5 FORTH_DSP_VALUE 
2fad			; 
2fad			;		inc hl   ; skip type but we know by now this is OK 
2fad			; 
2fad			;.luword:	ld a,(hl) 
2fad			;		cp 0 
2fad			;		jr z, .luword2 
2fad			;		ld (de), a 
2fad			;		inc de 
2fad			;		inc hl 
2fad			;		jr .luword 
2fad			; 
2fad			;.luword2:	ld a, ' ' 
2fad			;		ld (de), a 
2fad			;;		inc hl 
2fad			;;		inc de 
2fad			;;		ld (de), a 
2fad			;;		inc hl 
2fad			;		inc de 
2fad			; 
2fad			;		ex de, hl 
2fad			;		pop de 
2fad			;		 
2fad			;		 
2fad			; 
2fad			;; detoken that string and copy it 
2fad			; 
2fad			;	if DEBUG_FORTH_WORDS 
2fad			;		DMARK "Lt2" 
2fad			;		CALLMONITOR 
2fad			;	endif 
2fad			;.ldetok:	ld a, (de) 
2fad			;		cp FORTH_END_BUFFER 
2fad			;		jr z, .ldetokend 
2fad			;		; swap out any zero term for space 
2fad			;		cp 0 
2fad			;		jr nz, .ldetoknext 
2fad			;		ld a, ' ' 
2fad			; 
2fad			;	if DEBUG_FORTH_WORDS 
2fad			;		DMARK "LtS" 
2fad			;		CALLMONITOR 
2fad			;	endif 
2fad			;.ldetoknext:	ld (hl), a 
2fad			;		inc de 
2fad			;		inc hl 
2fad			;		jr .ldetok 
2fad			; 
2fad			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2fad			;		ld (hl), a  
2fad			; 
2fad			;; free that temp malloc 
2fad			; 
2fad			;		pop hl    
2fad			; 
2fad			;	if DEBUG_FORTH_WORDS 
2fad			;		DMARK "Lt4" 
2fad			;		CALLMONITOR 
2fad			;	endif 
2fad			;		call forth_apushstrhl 
2fad			; 
2fad			;		; get rid of temp malloc area 
2fad			; 
2fad			;		pop hl 
2fad			;		call free 
2fad			; 
2fad			;		jr .ludone 
2fad			; 
2fad			;.lnuword:	pop hl 
2fad			;		call forth_tok_next 
2fad			;		jp .ldouscan  
2fad			; 
2fad			;.ludone:		 pop hl 
2fad			; 
2fad					NEXTW 
2fad c3 37 24			jp macro_next 
2fb0				endm 
# End of macro NEXTW
2fb0			 
2fb0			.FORGET: 
2fb0				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2fb0 5d				db WORD_SYS_CORE+73             
2fb1 29 30			dw .NOP            
2fb3 07				db 6 + 1 
2fb4 .. 00			db "FORGET",0              
2fbb				endm 
# End of macro CWHEAD
2fbb			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2fbb			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2fbb			; | |  
2fbb			; | | e.g. "MORE" forget 
2fbb					if DEBUG_FORTH_WORDS_KEY 
2fbb						DMARK "FRG" 
2fbb f5				push af  
2fbc 3a d0 2f			ld a, (.dmark)  
2fbf 32 a0 fd			ld (debug_mark),a  
2fc2 3a d1 2f			ld a, (.dmark+1)  
2fc5 32 a1 fd			ld (debug_mark+1),a  
2fc8 3a d2 2f			ld a, (.dmark+2)  
2fcb 32 a2 fd			ld (debug_mark+2),a  
2fce 18 03			jr .pastdmark  
2fd0 ..			.dmark: db "FRG"  
2fd3 f1			.pastdmark: pop af  
2fd4			endm  
# End of macro DMARK
2fd4						CALLMONITOR 
2fd4 cd aa fd			call debug_vector  
2fd7				endm  
# End of macro CALLMONITOR
2fd7					endif 
2fd7			 
2fd7				; find uword 
2fd7			        ; update start of word with "_" 
2fd7				; replace uword with deleted flag 
2fd7			 
2fd7			 
2fd7			;	if DEBUG_FORTH_WORDS 
2fd7			;		DMARK "FOG" 
2fd7			;		CALLMONITOR 
2fd7			;	endif 
2fd7			 
2fd7			 
2fd7					; Get ptr to the word we need to look up 
2fd7			 
2fd7					FORTH_DSP_VALUEHL 
2fd7 cd 4b 22			call macro_dsp_valuehl 
2fda				endm 
# End of macro FORTH_DSP_VALUEHL
2fda					;v5 FORTH_DSP_VALUE 
2fda				; TODO type check 
2fda			;		inc hl    ; Skip type check  
2fda e5					push hl 
2fdb c1					pop bc 
2fdc			;		ex de, hl    ; put into DE 
2fdc			 
2fdc			 
2fdc 21 00 80				ld hl, baseram 
2fdf					;ld hl, baseusermem 
2fdf			 
2fdf				; skip dict stub 
2fdf			;	call forth_tok_next 
2fdf e5			push hl   ; sacreifical push 
2fe0			 
2fe0			.fldouscanm: 
2fe0 e1				pop hl 
2fe1			.fldouscan: 
2fe1			;	if DEBUG_FORTH_WORDS 
2fe1			;		DMARK "LSs" 
2fe1			;		CALLMONITOR 
2fe1			;	endif 
2fe1				; skip dict stub 
2fe1 cd 88 25				call forth_tok_next 
2fe4			 
2fe4			 
2fe4			; while we have words to look for 
2fe4			 
2fe4 7e				ld a, (hl)      
2fe5			;	if DEBUG_FORTH_WORDS 
2fe5			;		DMARK "LSk" 
2fe5			;		CALLMONITOR 
2fe5			;	endif 
2fe5 fe 00				cp WORD_SYS_END 
2fe7 ca 23 30				jp z, .flunotfound 
2fea fe 01				cp WORD_SYS_UWORD 
2fec c2 e1 2f				jp nz, .fldouscan 
2fef			 
2fef			;	if DEBUG_FORTH_WORDS 
2fef			;		DMARK "LSu" 
2fef			;		CALLMONITOR 
2fef			;	endif 
2fef			 
2fef					; found a uword but is it the one we want... 
2fef			 
2fef c5					push bc     ; uword to find is on bc 
2ff0 d1					pop de 
2ff1			 
2ff1 e5					push hl  ; to save the ptr 
2ff2			 
2ff2					; skip opcode 
2ff2 23					inc hl  
2ff3					; skip next ptr 
2ff3 23					inc hl  
2ff4 23					inc hl 
2ff5					; skip len 
2ff5 23					inc hl 
2ff6			 
2ff6			;	if DEBUG_FORTH_WORDS 
2ff6			;		DMARK "LSc" 
2ff6			;		CALLMONITOR 
2ff6			;	endif 
2ff6 cd 7c 13				call strcmp 
2ff9 c2 e0 2f				jp nz, .fldouscanm 
2ffc			; 
2ffc			; 
2ffc			;; while we have words to look for 
2ffc			; 
2ffc			;.fdouscan:	ld a, (hl)      
2ffc			;	if DEBUG_FORTH_WORDS 
2ffc			;		DMARK "LSs" 
2ffc			;		CALLMONITOR 
2ffc			;	endif 
2ffc			;		cp WORD_SYS_END 
2ffc			;		jp z, .fudone 
2ffc			;		cp WORD_SYS_UWORD 
2ffc			;		jp nz, .fnuword 
2ffc			; 
2ffc			;	if DEBUG_FORTH_WORDS 
2ffc			;		DMARK "FGu" 
2ffc			;		CALLMONITOR 
2ffc			;	endif 
2ffc			; 
2ffc			;		; found a uword but is it the one we want... 
2ffc			; 
2ffc			; 
2ffc			;	        pop de   ; get back the dsp name 
2ffc			;		push de 
2ffc			; 
2ffc			;		push hl  ; to save the ptr 
2ffc			; 
2ffc			;		; skip opcode 
2ffc			;		inc hl  
2ffc			;		; skip next ptr 
2ffc			;		inc hl  
2ffc			;		inc hl 
2ffc			;		; skip len 
2ffc			;		inc hl 
2ffc			; 
2ffc			;	if DEBUG_FORTH_WORDS 
2ffc			;		DMARK "FGc" 
2ffc			;		CALLMONITOR 
2ffc			;	endif 
2ffc			;		call strcmp 
2ffc			;		jp nz, .fnuword 
2ffc			 
2ffc			 
2ffc e1			pop hl 
2ffd			 
2ffd				 
2ffd				if DEBUG_FORTH_WORDS 
2ffd					DMARK "FGm" 
2ffd f5				push af  
2ffe 3a 12 30			ld a, (.dmark)  
3001 32 a0 fd			ld (debug_mark),a  
3004 3a 13 30			ld a, (.dmark+1)  
3007 32 a1 fd			ld (debug_mark+1),a  
300a 3a 14 30			ld a, (.dmark+2)  
300d 32 a2 fd			ld (debug_mark+2),a  
3010 18 03			jr .pastdmark  
3012 ..			.dmark: db "FGm"  
3015 f1			.pastdmark: pop af  
3016			endm  
# End of macro DMARK
3016					CALLMONITOR 
3016 cd aa fd			call debug_vector  
3019				endm  
# End of macro CALLMONITOR
3019				endif 
3019			 
3019			 
3019			 
3019					; we have a uword so push its name to the stack 
3019			 
3019			;	   	push hl  ; save so we can move to next dict block 
3019			;pop hl 
3019			 
3019					; update opcode to deleted 
3019 3e 03				ld a, WORD_SYS_DELETED 
301b 77					ld (hl), a 
301c			 
301c 23					inc hl  
301d					; skip next ptr 
301d 23					inc hl  
301e 23					inc hl 
301f					; skip len 
301f 23					inc hl 
3020			 
3020					; TODO change parser to skip deleted words but for now mark it out 
3020 3e 5f				ld a, "_" 
3022 77					ld  (hl),a 
3023			 
3023			;		jr .fudone 
3023			; 
3023			;.fnuword:	pop hl 
3023			;		call forth_tok_next 
3023			;		jp .fdouscan  
3023			 
3023			.flunotfound:		  
3023			 
3023			 
3023					 
3023					FORTH_DSP_POP 
3023 cd 03 23			call macro_forth_dsp_pop 
3026				endm 
# End of macro FORTH_DSP_POP
3026			;		ld hl, .luno 
3026			;.fudone:		 pop hl 
3026					NEXTW 
3026 c3 37 24			jp macro_next 
3029				endm 
# End of macro NEXTW
3029			.NOP: 
3029				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
3029 61				db WORD_SYS_CORE+77             
302a 50 30			dw .COMO            
302c 04				db 3 + 1 
302d .. 00			db "NOP",0              
3031				endm 
# End of macro CWHEAD
3031			; | NOP (  --  ) Do nothing | DONE 
3031					if DEBUG_FORTH_WORDS_KEY 
3031						DMARK "NOP" 
3031 f5				push af  
3032 3a 46 30			ld a, (.dmark)  
3035 32 a0 fd			ld (debug_mark),a  
3038 3a 47 30			ld a, (.dmark+1)  
303b 32 a1 fd			ld (debug_mark+1),a  
303e 3a 48 30			ld a, (.dmark+2)  
3041 32 a2 fd			ld (debug_mark+2),a  
3044 18 03			jr .pastdmark  
3046 ..			.dmark: db "NOP"  
3049 f1			.pastdmark: pop af  
304a			endm  
# End of macro DMARK
304a						CALLMONITOR 
304a cd aa fd			call debug_vector  
304d				endm  
# End of macro CALLMONITOR
304d					endif 
304d				       NEXTW 
304d c3 37 24			jp macro_next 
3050				endm 
# End of macro NEXTW
3050			.COMO: 
3050				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
3050 6e				db WORD_SYS_CORE+90             
3051 a2 30			dw .COMC            
3053 02				db 1 + 1 
3054 .. 00			db "(",0              
3056				endm 
# End of macro CWHEAD
3056			; | ( ( -- )  Start of comment | DONE 
3056			 
3056			 
3056 2a f7 f3				ld hl, ( os_tok_ptr) 
3059 11 9d 30			ld de, .closepar 
305c					 
305c					if DEBUG_FORTH_WORDS 
305c						DMARK ").." 
305c f5				push af  
305d 3a 71 30			ld a, (.dmark)  
3060 32 a0 fd			ld (debug_mark),a  
3063 3a 72 30			ld a, (.dmark+1)  
3066 32 a1 fd			ld (debug_mark+1),a  
3069 3a 73 30			ld a, (.dmark+2)  
306c 32 a2 fd			ld (debug_mark+2),a  
306f 18 03			jr .pastdmark  
3071 ..			.dmark: db ").."  
3074 f1			.pastdmark: pop af  
3075			endm  
# End of macro DMARK
3075						CALLMONITOR 
3075 cd aa fd			call debug_vector  
3078				endm  
# End of macro CALLMONITOR
3078					endif 
3078 cd 52 25			call findnexttok  
307b			 
307b					if DEBUG_FORTH_WORDS 
307b						DMARK "IF5" 
307b f5				push af  
307c 3a 90 30			ld a, (.dmark)  
307f 32 a0 fd			ld (debug_mark),a  
3082 3a 91 30			ld a, (.dmark+1)  
3085 32 a1 fd			ld (debug_mark+1),a  
3088 3a 92 30			ld a, (.dmark+2)  
308b 32 a2 fd			ld (debug_mark+2),a  
308e 18 03			jr .pastdmark  
3090 ..			.dmark: db "IF5"  
3093 f1			.pastdmark: pop af  
3094			endm  
# End of macro DMARK
3094						CALLMONITOR 
3094 cd aa fd			call debug_vector  
3097				endm  
# End of macro CALLMONITOR
3097					endif 
3097				; replace below with ) exec using tok_ptr 
3097 22 f7 f3			ld (os_tok_ptr), hl 
309a c3 c8 24			jp exec1 
309d			 
309d .. 00			.closepar:   db ")",0 
309f			 
309f				       NEXTW 
309f c3 37 24			jp macro_next 
30a2				endm 
# End of macro NEXTW
30a2			.COMC: 
30a2				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
30a2 6f				db WORD_SYS_CORE+91             
30a3 ab 30			dw .SCRATCH            
30a5 02				db 1 + 1 
30a6 .. 00			db ")",0              
30a8				endm 
# End of macro CWHEAD
30a8			; | ) ( -- )  End of comment |  DONE  
30a8				       NEXTW 
30a8 c3 37 24			jp macro_next 
30ab				endm 
# End of macro NEXTW
30ab			 
30ab			.SCRATCH: 
30ab				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
30ab 6f				db WORD_SYS_CORE+91             
30ac e6 30			dw .INC            
30ae 08				db 7 + 1 
30af .. 00			db "SCRATCH",0              
30b7				endm 
# End of macro CWHEAD
30b7			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
30b7			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
30b7			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
30b7			; | |  
30b7			; | | e.g.    : score $00 scratch ; 
30b7			; | |  
30b7			; | | $00 score ! 
30b7			; | | $01 score +! 
30b7			; | |  
30b7			; | | e.g.   : varword $0a scratch ;  
30b7			; | | 
30b7			; | | $8000 varword ! 
30b7					if DEBUG_FORTH_WORDS_KEY 
30b7						DMARK "SCR" 
30b7 f5				push af  
30b8 3a cc 30			ld a, (.dmark)  
30bb 32 a0 fd			ld (debug_mark),a  
30be 3a cd 30			ld a, (.dmark+1)  
30c1 32 a1 fd			ld (debug_mark+1),a  
30c4 3a ce 30			ld a, (.dmark+2)  
30c7 32 a2 fd			ld (debug_mark+2),a  
30ca 18 03			jr .pastdmark  
30cc ..			.dmark: db "SCR"  
30cf f1			.pastdmark: pop af  
30d0			endm  
# End of macro DMARK
30d0						CALLMONITOR 
30d0 cd aa fd			call debug_vector  
30d3				endm  
# End of macro CALLMONITOR
30d3					endif 
30d3			 
30d3					FORTH_DSP_VALUEHL 
30d3 cd 4b 22			call macro_dsp_valuehl 
30d6				endm 
# End of macro FORTH_DSP_VALUEHL
30d6				 
30d6					FORTH_DSP_POP 
30d6 cd 03 23			call macro_forth_dsp_pop 
30d9				endm 
# End of macro FORTH_DSP_POP
30d9			 
30d9 7d					ld a, l 
30da 21 1b f6				ld hl, os_var_array 
30dd cd de 0f				call addatohl 
30e0			 
30e0 cd 46 20				call forth_push_numhl 
30e3			 
30e3				       NEXTW 
30e3 c3 37 24			jp macro_next 
30e6				endm 
# End of macro NEXTW
30e6			 
30e6			.INC: 
30e6				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
30e6 6f				db WORD_SYS_CORE+91             
30e7 3c 31			dw .DEC            
30e9 03				db 2 + 1 
30ea .. 00			db "+!",0              
30ed				endm 
# End of macro CWHEAD
30ed			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
30ed					if DEBUG_FORTH_WORDS_KEY 
30ed						DMARK "+s_" 
30ed f5				push af  
30ee 3a 02 31			ld a, (.dmark)  
30f1 32 a0 fd			ld (debug_mark),a  
30f4 3a 03 31			ld a, (.dmark+1)  
30f7 32 a1 fd			ld (debug_mark+1),a  
30fa 3a 04 31			ld a, (.dmark+2)  
30fd 32 a2 fd			ld (debug_mark+2),a  
3100 18 03			jr .pastdmark  
3102 ..			.dmark: db "+s_"  
3105 f1			.pastdmark: pop af  
3106			endm  
# End of macro DMARK
3106						CALLMONITOR 
3106 cd aa fd			call debug_vector  
3109				endm  
# End of macro CALLMONITOR
3109					endif 
3109			 
3109					FORTH_DSP_VALUEHL 
3109 cd 4b 22			call macro_dsp_valuehl 
310c				endm 
# End of macro FORTH_DSP_VALUEHL
310c			 
310c e5					push hl   ; save address 
310d			 
310d					FORTH_DSP_POP 
310d cd 03 23			call macro_forth_dsp_pop 
3110				endm 
# End of macro FORTH_DSP_POP
3110			 
3110					FORTH_DSP_VALUEHL 
3110 cd 4b 22			call macro_dsp_valuehl 
3113				endm 
# End of macro FORTH_DSP_VALUEHL
3113			 
3113 e5					push hl 
3114					FORTH_DSP_POP 
3114 cd 03 23			call macro_forth_dsp_pop 
3117				endm 
# End of macro FORTH_DSP_POP
3117 e1					pop hl 
3118			 
3118					; hl contains value to add to byte at a 
3118				 
3118 eb					ex de, hl 
3119			 
3119 e1					pop hl 
311a			 
311a					if DEBUG_FORTH_WORDS 
311a						DMARK "INC" 
311a f5				push af  
311b 3a 2f 31			ld a, (.dmark)  
311e 32 a0 fd			ld (debug_mark),a  
3121 3a 30 31			ld a, (.dmark+1)  
3124 32 a1 fd			ld (debug_mark+1),a  
3127 3a 31 31			ld a, (.dmark+2)  
312a 32 a2 fd			ld (debug_mark+2),a  
312d 18 03			jr .pastdmark  
312f ..			.dmark: db "INC"  
3132 f1			.pastdmark: pop af  
3133			endm  
# End of macro DMARK
3133						CALLMONITOR 
3133 cd aa fd			call debug_vector  
3136				endm  
# End of macro CALLMONITOR
3136					endif 
3136			 
3136 7e					ld a,(hl) 
3137 83					add e 
3138 77					ld (hl),a 
3139			 
3139			 
3139			 
3139				       NEXTW 
3139 c3 37 24			jp macro_next 
313c				endm 
# End of macro NEXTW
313c			 
313c			.DEC: 
313c				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
313c 6f				db WORD_SYS_CORE+91             
313d 90 31			dw .INC2            
313f 03				db 2 + 1 
3140 .. 00			db "-!",0              
3143				endm 
# End of macro CWHEAD
3143			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
3143					if DEBUG_FORTH_WORDS_KEY 
3143						DMARK "-s_" 
3143 f5				push af  
3144 3a 58 31			ld a, (.dmark)  
3147 32 a0 fd			ld (debug_mark),a  
314a 3a 59 31			ld a, (.dmark+1)  
314d 32 a1 fd			ld (debug_mark+1),a  
3150 3a 5a 31			ld a, (.dmark+2)  
3153 32 a2 fd			ld (debug_mark+2),a  
3156 18 03			jr .pastdmark  
3158 ..			.dmark: db "-s_"  
315b f1			.pastdmark: pop af  
315c			endm  
# End of macro DMARK
315c						CALLMONITOR 
315c cd aa fd			call debug_vector  
315f				endm  
# End of macro CALLMONITOR
315f					endif 
315f			 
315f					FORTH_DSP_VALUEHL 
315f cd 4b 22			call macro_dsp_valuehl 
3162				endm 
# End of macro FORTH_DSP_VALUEHL
3162			 
3162 e5					push hl   ; save address 
3163			 
3163					FORTH_DSP_POP 
3163 cd 03 23			call macro_forth_dsp_pop 
3166				endm 
# End of macro FORTH_DSP_POP
3166			 
3166					FORTH_DSP_VALUEHL 
3166 cd 4b 22			call macro_dsp_valuehl 
3169				endm 
# End of macro FORTH_DSP_VALUEHL
3169			 
3169					; hl contains value to add to byte at a 
3169				 
3169 eb					ex de, hl 
316a			 
316a e1					pop hl 
316b			 
316b					if DEBUG_FORTH_WORDS 
316b						DMARK "DEC" 
316b f5				push af  
316c 3a 80 31			ld a, (.dmark)  
316f 32 a0 fd			ld (debug_mark),a  
3172 3a 81 31			ld a, (.dmark+1)  
3175 32 a1 fd			ld (debug_mark+1),a  
3178 3a 82 31			ld a, (.dmark+2)  
317b 32 a2 fd			ld (debug_mark+2),a  
317e 18 03			jr .pastdmark  
3180 ..			.dmark: db "DEC"  
3183 f1			.pastdmark: pop af  
3184			endm  
# End of macro DMARK
3184						CALLMONITOR 
3184 cd aa fd			call debug_vector  
3187				endm  
# End of macro CALLMONITOR
3187					endif 
3187			 
3187 7e					ld a,(hl) 
3188 93					sub e 
3189 77					ld (hl),a 
318a			 
318a			 
318a					FORTH_DSP_POP 
318a cd 03 23			call macro_forth_dsp_pop 
318d				endm 
# End of macro FORTH_DSP_POP
318d			 
318d				       NEXTW 
318d c3 37 24			jp macro_next 
3190				endm 
# End of macro NEXTW
3190			 
3190			.INC2: 
3190				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
3190 6f				db WORD_SYS_CORE+91             
3191 3d 32			dw .DEC2            
3193 04				db 3 + 1 
3194 .. 00			db "+2!",0              
3198				endm 
# End of macro CWHEAD
3198			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
3198			 
3198					if DEBUG_FORTH_WORDS_KEY 
3198						DMARK "+2s" 
3198 f5				push af  
3199 3a ad 31			ld a, (.dmark)  
319c 32 a0 fd			ld (debug_mark),a  
319f 3a ae 31			ld a, (.dmark+1)  
31a2 32 a1 fd			ld (debug_mark+1),a  
31a5 3a af 31			ld a, (.dmark+2)  
31a8 32 a2 fd			ld (debug_mark+2),a  
31ab 18 03			jr .pastdmark  
31ad ..			.dmark: db "+2s"  
31b0 f1			.pastdmark: pop af  
31b1			endm  
# End of macro DMARK
31b1						CALLMONITOR 
31b1 cd aa fd			call debug_vector  
31b4				endm  
# End of macro CALLMONITOR
31b4					endif 
31b4			 
31b4					; Address 
31b4			 
31b4					FORTH_DSP_VALUEHL 
31b4 cd 4b 22			call macro_dsp_valuehl 
31b7				endm 
# End of macro FORTH_DSP_VALUEHL
31b7			 
31b7 e5					push hl    ; save address 
31b8			 
31b8					; load content into de 
31b8			 
31b8 5e					ld e,(hl) 
31b9 23					inc hl 
31ba 56					ld d, (hl) 
31bb			 
31bb					if DEBUG_FORTH_WORDS 
31bb						DMARK "+2a" 
31bb f5				push af  
31bc 3a d0 31			ld a, (.dmark)  
31bf 32 a0 fd			ld (debug_mark),a  
31c2 3a d1 31			ld a, (.dmark+1)  
31c5 32 a1 fd			ld (debug_mark+1),a  
31c8 3a d2 31			ld a, (.dmark+2)  
31cb 32 a2 fd			ld (debug_mark+2),a  
31ce 18 03			jr .pastdmark  
31d0 ..			.dmark: db "+2a"  
31d3 f1			.pastdmark: pop af  
31d4			endm  
# End of macro DMARK
31d4						CALLMONITOR 
31d4 cd aa fd			call debug_vector  
31d7				endm  
# End of macro CALLMONITOR
31d7					endif 
31d7			 
31d7					FORTH_DSP_POP 
31d7 cd 03 23			call macro_forth_dsp_pop 
31da				endm 
# End of macro FORTH_DSP_POP
31da			 
31da					; Get value to add 
31da			 
31da					FORTH_DSP_VALUE 
31da cd 34 22			call macro_forth_dsp_value 
31dd				endm 
# End of macro FORTH_DSP_VALUE
31dd			 
31dd					if DEBUG_FORTH_WORDS 
31dd						DMARK "+2v" 
31dd f5				push af  
31de 3a f2 31			ld a, (.dmark)  
31e1 32 a0 fd			ld (debug_mark),a  
31e4 3a f3 31			ld a, (.dmark+1)  
31e7 32 a1 fd			ld (debug_mark+1),a  
31ea 3a f4 31			ld a, (.dmark+2)  
31ed 32 a2 fd			ld (debug_mark+2),a  
31f0 18 03			jr .pastdmark  
31f2 ..			.dmark: db "+2v"  
31f5 f1			.pastdmark: pop af  
31f6			endm  
# End of macro DMARK
31f6						CALLMONITOR 
31f6 cd aa fd			call debug_vector  
31f9				endm  
# End of macro CALLMONITOR
31f9					endif 
31f9			 
31f9 19					add hl, de 
31fa			 
31fa					if DEBUG_FORTH_WORDS 
31fa						DMARK "+2+" 
31fa f5				push af  
31fb 3a 0f 32			ld a, (.dmark)  
31fe 32 a0 fd			ld (debug_mark),a  
3201 3a 10 32			ld a, (.dmark+1)  
3204 32 a1 fd			ld (debug_mark+1),a  
3207 3a 11 32			ld a, (.dmark+2)  
320a 32 a2 fd			ld (debug_mark+2),a  
320d 18 03			jr .pastdmark  
320f ..			.dmark: db "+2+"  
3212 f1			.pastdmark: pop af  
3213			endm  
# End of macro DMARK
3213						CALLMONITOR 
3213 cd aa fd			call debug_vector  
3216				endm  
# End of macro CALLMONITOR
3216					endif 
3216			 
3216					; move result to de 
3216			 
3216 eb					ex de, hl 
3217			 
3217					; Address 
3217			 
3217 e1					pop hl 
3218			 
3218					; save it back 
3218			 
3218 73					ld (hl), e 
3219 23					inc hl 
321a 72					ld (hl), d 
321b			 
321b					if DEBUG_FORTH_WORDS 
321b						DMARK "+2e" 
321b f5				push af  
321c 3a 30 32			ld a, (.dmark)  
321f 32 a0 fd			ld (debug_mark),a  
3222 3a 31 32			ld a, (.dmark+1)  
3225 32 a1 fd			ld (debug_mark+1),a  
3228 3a 32 32			ld a, (.dmark+2)  
322b 32 a2 fd			ld (debug_mark+2),a  
322e 18 03			jr .pastdmark  
3230 ..			.dmark: db "+2e"  
3233 f1			.pastdmark: pop af  
3234			endm  
# End of macro DMARK
3234						CALLMONITOR 
3234 cd aa fd			call debug_vector  
3237				endm  
# End of macro CALLMONITOR
3237					endif 
3237			 
3237			 
3237			 
3237					FORTH_DSP_POP 
3237 cd 03 23			call macro_forth_dsp_pop 
323a				endm 
# End of macro FORTH_DSP_POP
323a			 
323a			 
323a				       NEXTW 
323a c3 37 24			jp macro_next 
323d				endm 
# End of macro NEXTW
323d			 
323d			.DEC2: 
323d				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
323d 6f				db WORD_SYS_CORE+91             
323e ec 32			dw .GET2            
3240 04				db 3 + 1 
3241 .. 00			db "-2!",0              
3245				endm 
# End of macro CWHEAD
3245			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
3245			 
3245			 
3245					if DEBUG_FORTH_WORDS_KEY 
3245						DMARK "-2s" 
3245 f5				push af  
3246 3a 5a 32			ld a, (.dmark)  
3249 32 a0 fd			ld (debug_mark),a  
324c 3a 5b 32			ld a, (.dmark+1)  
324f 32 a1 fd			ld (debug_mark+1),a  
3252 3a 5c 32			ld a, (.dmark+2)  
3255 32 a2 fd			ld (debug_mark+2),a  
3258 18 03			jr .pastdmark  
325a ..			.dmark: db "-2s"  
325d f1			.pastdmark: pop af  
325e			endm  
# End of macro DMARK
325e						CALLMONITOR 
325e cd aa fd			call debug_vector  
3261				endm  
# End of macro CALLMONITOR
3261					endif 
3261			 
3261					; Address 
3261			 
3261					FORTH_DSP_VALUEHL 
3261 cd 4b 22			call macro_dsp_valuehl 
3264				endm 
# End of macro FORTH_DSP_VALUEHL
3264			 
3264 e5					push hl    ; save address 
3265			 
3265					; load content into de 
3265			 
3265 5e					ld e,(hl) 
3266 23					inc hl 
3267 56					ld d, (hl) 
3268			 
3268					if DEBUG_FORTH_WORDS 
3268						DMARK "-2a" 
3268 f5				push af  
3269 3a 7d 32			ld a, (.dmark)  
326c 32 a0 fd			ld (debug_mark),a  
326f 3a 7e 32			ld a, (.dmark+1)  
3272 32 a1 fd			ld (debug_mark+1),a  
3275 3a 7f 32			ld a, (.dmark+2)  
3278 32 a2 fd			ld (debug_mark+2),a  
327b 18 03			jr .pastdmark  
327d ..			.dmark: db "-2a"  
3280 f1			.pastdmark: pop af  
3281			endm  
# End of macro DMARK
3281						CALLMONITOR 
3281 cd aa fd			call debug_vector  
3284				endm  
# End of macro CALLMONITOR
3284					endif 
3284			 
3284					FORTH_DSP_POP 
3284 cd 03 23			call macro_forth_dsp_pop 
3287				endm 
# End of macro FORTH_DSP_POP
3287			 
3287					; Get value to remove 
3287			 
3287					FORTH_DSP_VALUE 
3287 cd 34 22			call macro_forth_dsp_value 
328a				endm 
# End of macro FORTH_DSP_VALUE
328a			 
328a					if DEBUG_FORTH_WORDS 
328a						DMARK "-2v" 
328a f5				push af  
328b 3a 9f 32			ld a, (.dmark)  
328e 32 a0 fd			ld (debug_mark),a  
3291 3a a0 32			ld a, (.dmark+1)  
3294 32 a1 fd			ld (debug_mark+1),a  
3297 3a a1 32			ld a, (.dmark+2)  
329a 32 a2 fd			ld (debug_mark+2),a  
329d 18 03			jr .pastdmark  
329f ..			.dmark: db "-2v"  
32a2 f1			.pastdmark: pop af  
32a3			endm  
# End of macro DMARK
32a3						CALLMONITOR 
32a3 cd aa fd			call debug_vector  
32a6				endm  
# End of macro CALLMONITOR
32a6					endif 
32a6			 
32a6 eb					ex de, hl 
32a7 ed 52				sbc hl, de 
32a9			 
32a9					if DEBUG_FORTH_WORDS 
32a9						DMARK "-2d" 
32a9 f5				push af  
32aa 3a be 32			ld a, (.dmark)  
32ad 32 a0 fd			ld (debug_mark),a  
32b0 3a bf 32			ld a, (.dmark+1)  
32b3 32 a1 fd			ld (debug_mark+1),a  
32b6 3a c0 32			ld a, (.dmark+2)  
32b9 32 a2 fd			ld (debug_mark+2),a  
32bc 18 03			jr .pastdmark  
32be ..			.dmark: db "-2d"  
32c1 f1			.pastdmark: pop af  
32c2			endm  
# End of macro DMARK
32c2						CALLMONITOR 
32c2 cd aa fd			call debug_vector  
32c5				endm  
# End of macro CALLMONITOR
32c5					endif 
32c5			 
32c5					; move result to de 
32c5			 
32c5 eb					ex de, hl 
32c6			 
32c6					; Address 
32c6			 
32c6 e1					pop hl 
32c7			 
32c7					; save it back 
32c7			 
32c7 73					ld (hl), e 
32c8 23					inc hl 
32c9 72					ld (hl), d 
32ca			 
32ca					if DEBUG_FORTH_WORDS 
32ca						DMARK "-2e" 
32ca f5				push af  
32cb 3a df 32			ld a, (.dmark)  
32ce 32 a0 fd			ld (debug_mark),a  
32d1 3a e0 32			ld a, (.dmark+1)  
32d4 32 a1 fd			ld (debug_mark+1),a  
32d7 3a e1 32			ld a, (.dmark+2)  
32da 32 a2 fd			ld (debug_mark+2),a  
32dd 18 03			jr .pastdmark  
32df ..			.dmark: db "-2e"  
32e2 f1			.pastdmark: pop af  
32e3			endm  
# End of macro DMARK
32e3						CALLMONITOR 
32e3 cd aa fd			call debug_vector  
32e6				endm  
# End of macro CALLMONITOR
32e6					endif 
32e6			 
32e6			 
32e6					FORTH_DSP_POP 
32e6 cd 03 23			call macro_forth_dsp_pop 
32e9				endm 
# End of macro FORTH_DSP_POP
32e9			 
32e9			 
32e9			 
32e9				       NEXTW 
32e9 c3 37 24			jp macro_next 
32ec				endm 
# End of macro NEXTW
32ec			.GET2: 
32ec				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
32ec 6f				db WORD_SYS_CORE+91             
32ed 21 33			dw .BANG2            
32ef 03				db 2 + 1 
32f0 .. 00			db "2@",0              
32f3				endm 
# End of macro CWHEAD
32f3			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
32f3					if DEBUG_FORTH_WORDS_KEY 
32f3						DMARK "2A_" 
32f3 f5				push af  
32f4 3a 08 33			ld a, (.dmark)  
32f7 32 a0 fd			ld (debug_mark),a  
32fa 3a 09 33			ld a, (.dmark+1)  
32fd 32 a1 fd			ld (debug_mark+1),a  
3300 3a 0a 33			ld a, (.dmark+2)  
3303 32 a2 fd			ld (debug_mark+2),a  
3306 18 03			jr .pastdmark  
3308 ..			.dmark: db "2A_"  
330b f1			.pastdmark: pop af  
330c			endm  
# End of macro DMARK
330c						CALLMONITOR 
330c cd aa fd			call debug_vector  
330f				endm  
# End of macro CALLMONITOR
330f					endif 
330f			 
330f					FORTH_DSP_VALUEHL 
330f cd 4b 22			call macro_dsp_valuehl 
3312				endm 
# End of macro FORTH_DSP_VALUEHL
3312			 
3312 e5					push hl   ; save address 
3313			 
3313					FORTH_DSP_POP 
3313 cd 03 23			call macro_forth_dsp_pop 
3316				endm 
# End of macro FORTH_DSP_POP
3316			 
3316 e1					pop hl 
3317			 
3317 5e					ld e, (hl) 
3318 23					inc hl 
3319 56					ld d, (hl) 
331a			 
331a eb					ex de, hl 
331b			 
331b cd 46 20				call forth_push_numhl 
331e			 
331e				       NEXTW 
331e c3 37 24			jp macro_next 
3321				endm 
# End of macro NEXTW
3321			.BANG2: 
3321				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
3321 6f				db WORD_SYS_CORE+91             
3322 59 33			dw .CONFIG            
3324 03				db 2 + 1 
3325 .. 00			db "2!",0              
3328				endm 
# End of macro CWHEAD
3328			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
3328					if DEBUG_FORTH_WORDS_KEY 
3328						DMARK "2S_" 
3328 f5				push af  
3329 3a 3d 33			ld a, (.dmark)  
332c 32 a0 fd			ld (debug_mark),a  
332f 3a 3e 33			ld a, (.dmark+1)  
3332 32 a1 fd			ld (debug_mark+1),a  
3335 3a 3f 33			ld a, (.dmark+2)  
3338 32 a2 fd			ld (debug_mark+2),a  
333b 18 03			jr .pastdmark  
333d ..			.dmark: db "2S_"  
3340 f1			.pastdmark: pop af  
3341			endm  
# End of macro DMARK
3341						CALLMONITOR 
3341 cd aa fd			call debug_vector  
3344				endm  
# End of macro CALLMONITOR
3344					endif 
3344			 
3344					FORTH_DSP_VALUEHL 
3344 cd 4b 22			call macro_dsp_valuehl 
3347				endm 
# End of macro FORTH_DSP_VALUEHL
3347			 
3347 e5					push hl   ; save address 
3348			 
3348			 
3348					FORTH_DSP_POP 
3348 cd 03 23			call macro_forth_dsp_pop 
334b				endm 
# End of macro FORTH_DSP_POP
334b			 
334b					 
334b					FORTH_DSP_VALUEHL 
334b cd 4b 22			call macro_dsp_valuehl 
334e				endm 
# End of macro FORTH_DSP_VALUEHL
334e			 
334e					FORTH_DSP_POP 
334e cd 03 23			call macro_forth_dsp_pop 
3351				endm 
# End of macro FORTH_DSP_POP
3351			 
3351 eb					ex de, hl    ; value now in de 
3352			 
3352 e1					pop hl 
3353			 
3353 73					ld (hl), e 
3354			 
3354 23					inc hl 
3355			 
3355 72					ld (hl), d 
3356			 
3356			 
3356				       NEXTW 
3356 c3 37 24			jp macro_next 
3359				endm 
# End of macro NEXTW
3359			.CONFIG: 
3359				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
3359 6f				db WORD_SYS_CORE+91             
335a 6a 33			dw .ADTOS            
335c 07				db 6 + 1 
335d .. 00			db "CONFIG",0              
3364				endm 
# End of macro CWHEAD
3364			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
3364			 
3364 cd 52 15				call config 
3367					NEXTW 
3367 c3 37 24			jp macro_next 
336a				endm 
# End of macro NEXTW
336a			 
336a			.ADTOS: 
336a				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
336a 6f				db WORD_SYS_CORE+91             
336b 80 33			dw .SBTOS            
336d 03				db 2 + 1 
336e .. 00			db "1+",0              
3371				endm 
# End of macro CWHEAD
3371			; | 1+ ( u -- u )  Increment value on TOS | DONE 
3371			 
3371					FORTH_DSP_VALUEHL 
3371 cd 4b 22			call macro_dsp_valuehl 
3374				endm 
# End of macro FORTH_DSP_VALUEHL
3374 e5					push hl 
3375			 
3375					FORTH_DSP_POP 
3375 cd 03 23			call macro_forth_dsp_pop 
3378				endm 
# End of macro FORTH_DSP_POP
3378 e1					pop hl 
3379			 
3379 23					inc hl 
337a cd 46 20				call forth_push_numhl 
337d					 
337d					NEXTW 
337d c3 37 24			jp macro_next 
3380				endm 
# End of macro NEXTW
3380			.SBTOS: 
3380				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
3380 6f				db WORD_SYS_CORE+91             
3381 96 33			dw .ADSTORE            
3383 03				db 2 + 1 
3384 .. 00			db "1-",0              
3387				endm 
# End of macro CWHEAD
3387			; | 1- ( u -- u )  Decrement value on TOS | DONE 
3387			 
3387					FORTH_DSP_VALUEHL 
3387 cd 4b 22			call macro_dsp_valuehl 
338a				endm 
# End of macro FORTH_DSP_VALUEHL
338a e5					push hl 
338b			 
338b					FORTH_DSP_POP 
338b cd 03 23			call macro_forth_dsp_pop 
338e				endm 
# End of macro FORTH_DSP_POP
338e e1					pop hl 
338f			 
338f 2b					dec hl 
3390 cd 46 20				call forth_push_numhl 
3393					 
3393					NEXTW 
3393 c3 37 24			jp macro_next 
3396				endm 
# End of macro NEXTW
3396			.ADSTORE: 
3396				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
3396 6f				db WORD_SYS_CORE+91             
3397 ac 33			dw .ADWSTORE            
3399 04				db 3 + 1 
339a .. 00			db "1+!",0              
339e				endm 
# End of macro CWHEAD
339e			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
339e			 
339e					FORTH_DSP_VALUEHL 
339e cd 4b 22			call macro_dsp_valuehl 
33a1				endm 
# End of macro FORTH_DSP_VALUEHL
33a1 e5					push hl 
33a2			 
33a2					FORTH_DSP_POP 
33a2 cd 03 23			call macro_forth_dsp_pop 
33a5				endm 
# End of macro FORTH_DSP_POP
33a5 e1					pop hl 
33a6			 
33a6 7e					ld a, (hl) 
33a7 3c					inc a 
33a8 77					ld (hl), a 
33a9					 
33a9					NEXTW 
33a9 c3 37 24			jp macro_next 
33ac				endm 
# End of macro NEXTW
33ac			.ADWSTORE: 
33ac				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
33ac 6f				db WORD_SYS_CORE+91             
33ad ca 33			dw .SBSTORE            
33af 05				db 4 + 1 
33b0 .. 00			db "1+2!",0              
33b5				endm 
# End of macro CWHEAD
33b5			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
33b5			 
33b5					FORTH_DSP_VALUEHL 
33b5 cd 4b 22			call macro_dsp_valuehl 
33b8				endm 
# End of macro FORTH_DSP_VALUEHL
33b8 e5					push hl 
33b9			 
33b9					FORTH_DSP_POP 
33b9 cd 03 23			call macro_forth_dsp_pop 
33bc				endm 
# End of macro FORTH_DSP_POP
33bc e1					pop hl 
33bd			 
33bd e5					push hl 
33be			 
33be cd b9 23				call loadwordinhl 
33c1 23					inc hl 
33c2			 
33c2 d1					pop de 
33c3 eb					ex de, hl 
33c4 73					ld (hl), e 
33c5 23					inc hl 
33c6 72					ld (hl), d 
33c7					 
33c7					NEXTW 
33c7 c3 37 24			jp macro_next 
33ca				endm 
# End of macro NEXTW
33ca			.SBSTORE: 
33ca				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
33ca 6f				db WORD_SYS_CORE+91             
33cb e0 33			dw .SBWSTORE            
33cd 04				db 3 + 1 
33ce .. 00			db "1-!",0              
33d2				endm 
# End of macro CWHEAD
33d2			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
33d2			 
33d2					FORTH_DSP_VALUEHL 
33d2 cd 4b 22			call macro_dsp_valuehl 
33d5				endm 
# End of macro FORTH_DSP_VALUEHL
33d5 e5					push hl 
33d6			 
33d6					FORTH_DSP_POP 
33d6 cd 03 23			call macro_forth_dsp_pop 
33d9				endm 
# End of macro FORTH_DSP_POP
33d9 e1					pop hl 
33da			 
33da 7e					ld a, (hl) 
33db 3d					dec a 
33dc 77					ld (hl), a 
33dd					 
33dd					NEXTW 
33dd c3 37 24			jp macro_next 
33e0				endm 
# End of macro NEXTW
33e0			.SBWSTORE: 
33e0				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
33e0 6f				db WORD_SYS_CORE+91             
33e1 fe 33			dw .ENDCORE            
33e3 05				db 4 + 1 
33e4 .. 00			db "1-2!",0              
33e9				endm 
# End of macro CWHEAD
33e9			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
33e9			 
33e9					FORTH_DSP_VALUEHL 
33e9 cd 4b 22			call macro_dsp_valuehl 
33ec				endm 
# End of macro FORTH_DSP_VALUEHL
33ec e5					push hl 
33ed			 
33ed					FORTH_DSP_POP 
33ed cd 03 23			call macro_forth_dsp_pop 
33f0				endm 
# End of macro FORTH_DSP_POP
33f0 e1					pop hl 
33f1			 
33f1 e5					push hl 
33f2			 
33f2 cd b9 23				call loadwordinhl 
33f5 2b					dec hl 
33f6			 
33f6 d1					pop de 
33f7 eb					ex de, hl 
33f8 73					ld (hl), e 
33f9 23					inc hl 
33fa 72					ld (hl), d 
33fb					 
33fb					NEXTW 
33fb c3 37 24			jp macro_next 
33fe				endm 
# End of macro NEXTW
33fe			.ENDCORE: 
33fe			 
33fe			; eof 
33fe			 
33fe			 
# End of file forth_words_core.asm
33fe			include "forth_words_flow.asm" 
33fe			 
33fe			; | ## Program Flow Words 
33fe			 
33fe			.IF: 
33fe				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
33fe 1e				db WORD_SYS_CORE+10             
33ff f3 34			dw .THEN            
3401 03				db 2 + 1 
3402 .. 00			db "IF",0              
3405				endm 
# End of macro CWHEAD
3405			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
3405			; 
3405					if DEBUG_FORTH_WORDS_KEY 
3405						DMARK "IF." 
3405 f5				push af  
3406 3a 1a 34			ld a, (.dmark)  
3409 32 a0 fd			ld (debug_mark),a  
340c 3a 1b 34			ld a, (.dmark+1)  
340f 32 a1 fd			ld (debug_mark+1),a  
3412 3a 1c 34			ld a, (.dmark+2)  
3415 32 a2 fd			ld (debug_mark+2),a  
3418 18 03			jr .pastdmark  
341a ..			.dmark: db "IF."  
341d f1			.pastdmark: pop af  
341e			endm  
# End of macro DMARK
341e						CALLMONITOR 
341e cd aa fd			call debug_vector  
3421				endm  
# End of macro CALLMONITOR
3421					endif 
3421			; eval TOS 
3421			 
3421				FORTH_DSP_VALUEHL 
3421 cd 4b 22			call macro_dsp_valuehl 
3424				endm 
# End of macro FORTH_DSP_VALUEHL
3424			 
3424			;	push hl 
3424				FORTH_DSP_POP 
3424 cd 03 23			call macro_forth_dsp_pop 
3427				endm 
# End of macro FORTH_DSP_POP
3427			;	pop hl 
3427			 
3427					if DEBUG_FORTH_WORDS 
3427						DMARK "IF1" 
3427 f5				push af  
3428 3a 3c 34			ld a, (.dmark)  
342b 32 a0 fd			ld (debug_mark),a  
342e 3a 3d 34			ld a, (.dmark+1)  
3431 32 a1 fd			ld (debug_mark+1),a  
3434 3a 3e 34			ld a, (.dmark+2)  
3437 32 a2 fd			ld (debug_mark+2),a  
343a 18 03			jr .pastdmark  
343c ..			.dmark: db "IF1"  
343f f1			.pastdmark: pop af  
3440			endm  
# End of macro DMARK
3440						CALLMONITOR 
3440 cd aa fd			call debug_vector  
3443				endm  
# End of macro CALLMONITOR
3443					endif 
3443 b7				or a        ; clear carry flag 
3444 11 00 00			ld de, 0 
3447 eb				ex de,hl 
3448 ed 52			sbc hl, de 
344a c2 d4 34			jp nz, .iftrue 
344d			 
344d					if DEBUG_FORTH_WORDS 
344d						DMARK "IF2" 
344d f5				push af  
344e 3a 62 34			ld a, (.dmark)  
3451 32 a0 fd			ld (debug_mark),a  
3454 3a 63 34			ld a, (.dmark+1)  
3457 32 a1 fd			ld (debug_mark+1),a  
345a 3a 64 34			ld a, (.dmark+2)  
345d 32 a2 fd			ld (debug_mark+2),a  
3460 18 03			jr .pastdmark  
3462 ..			.dmark: db "IF2"  
3465 f1			.pastdmark: pop af  
3466			endm  
# End of macro DMARK
3466						CALLMONITOR 
3466 cd aa fd			call debug_vector  
3469				endm  
# End of macro CALLMONITOR
3469					endif 
3469			 
3469			; if not true then skip to THEN 
3469			 
3469				; TODO get tok_ptr 
3469				; TODO consume toks until we get to THEN 
3469			 
3469 2a f7 f3			ld hl, (os_tok_ptr) 
346c					if DEBUG_FORTH_WORDS 
346c						DMARK "IF3" 
346c f5				push af  
346d 3a 81 34			ld a, (.dmark)  
3470 32 a0 fd			ld (debug_mark),a  
3473 3a 82 34			ld a, (.dmark+1)  
3476 32 a1 fd			ld (debug_mark+1),a  
3479 3a 83 34			ld a, (.dmark+2)  
347c 32 a2 fd			ld (debug_mark+2),a  
347f 18 03			jr .pastdmark  
3481 ..			.dmark: db "IF3"  
3484 f1			.pastdmark: pop af  
3485			endm  
# End of macro DMARK
3485						CALLMONITOR 
3485 cd aa fd			call debug_vector  
3488				endm  
# End of macro CALLMONITOR
3488						 
3488					endif 
3488 11 cf 34			ld de, .ifthen 
348b					if DEBUG_FORTH_WORDS 
348b						DMARK "IF4" 
348b f5				push af  
348c 3a a0 34			ld a, (.dmark)  
348f 32 a0 fd			ld (debug_mark),a  
3492 3a a1 34			ld a, (.dmark+1)  
3495 32 a1 fd			ld (debug_mark+1),a  
3498 3a a2 34			ld a, (.dmark+2)  
349b 32 a2 fd			ld (debug_mark+2),a  
349e 18 03			jr .pastdmark  
34a0 ..			.dmark: db "IF4"  
34a3 f1			.pastdmark: pop af  
34a4			endm  
# End of macro DMARK
34a4						CALLMONITOR 
34a4 cd aa fd			call debug_vector  
34a7				endm  
# End of macro CALLMONITOR
34a7					endif 
34a7 cd 52 25			call findnexttok  
34aa			 
34aa					if DEBUG_FORTH_WORDS 
34aa						DMARK "IF5" 
34aa f5				push af  
34ab 3a bf 34			ld a, (.dmark)  
34ae 32 a0 fd			ld (debug_mark),a  
34b1 3a c0 34			ld a, (.dmark+1)  
34b4 32 a1 fd			ld (debug_mark+1),a  
34b7 3a c1 34			ld a, (.dmark+2)  
34ba 32 a2 fd			ld (debug_mark+2),a  
34bd 18 03			jr .pastdmark  
34bf ..			.dmark: db "IF5"  
34c2 f1			.pastdmark: pop af  
34c3			endm  
# End of macro DMARK
34c3						CALLMONITOR 
34c3 cd aa fd			call debug_vector  
34c6				endm  
# End of macro CALLMONITOR
34c6					endif 
34c6				; TODO replace below with ; exec using tok_ptr 
34c6 22 f7 f3			ld (os_tok_ptr), hl 
34c9 c3 c8 24			jp exec1 
34cc				NEXTW 
34cc c3 37 24			jp macro_next 
34cf				endm 
# End of macro NEXTW
34cf			 
34cf .. 00		.ifthen:  db "THEN",0 
34d4			 
34d4			.iftrue:		 
34d4				; Exec next words normally 
34d4			 
34d4				; if true then exec following IF as normal 
34d4					if DEBUG_FORTH_WORDS 
34d4						DMARK "IFT" 
34d4 f5				push af  
34d5 3a e9 34			ld a, (.dmark)  
34d8 32 a0 fd			ld (debug_mark),a  
34db 3a ea 34			ld a, (.dmark+1)  
34de 32 a1 fd			ld (debug_mark+1),a  
34e1 3a eb 34			ld a, (.dmark+2)  
34e4 32 a2 fd			ld (debug_mark+2),a  
34e7 18 03			jr .pastdmark  
34e9 ..			.dmark: db "IFT"  
34ec f1			.pastdmark: pop af  
34ed			endm  
# End of macro DMARK
34ed						CALLMONITOR 
34ed cd aa fd			call debug_vector  
34f0				endm  
# End of macro CALLMONITOR
34f0					endif 
34f0			 
34f0					NEXTW 
34f0 c3 37 24			jp macro_next 
34f3				endm 
# End of macro NEXTW
34f3			.THEN: 
34f3				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
34f3 1f				db WORD_SYS_CORE+11             
34f4 1b 35			dw .ELSE            
34f6 05				db 4 + 1 
34f7 .. 00			db "THEN",0              
34fc				endm 
# End of macro CWHEAD
34fc			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
34fc					if DEBUG_FORTH_WORDS_KEY 
34fc						DMARK "THN" 
34fc f5				push af  
34fd 3a 11 35			ld a, (.dmark)  
3500 32 a0 fd			ld (debug_mark),a  
3503 3a 12 35			ld a, (.dmark+1)  
3506 32 a1 fd			ld (debug_mark+1),a  
3509 3a 13 35			ld a, (.dmark+2)  
350c 32 a2 fd			ld (debug_mark+2),a  
350f 18 03			jr .pastdmark  
3511 ..			.dmark: db "THN"  
3514 f1			.pastdmark: pop af  
3515			endm  
# End of macro DMARK
3515						CALLMONITOR 
3515 cd aa fd			call debug_vector  
3518				endm  
# End of macro CALLMONITOR
3518					endif 
3518					NEXTW 
3518 c3 37 24			jp macro_next 
351b				endm 
# End of macro NEXTW
351b			.ELSE: 
351b				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
351b 20				db WORD_SYS_CORE+12             
351c 43 35			dw .DO            
351e 03				db 2 + 1 
351f .. 00			db "ELSE",0              
3524				endm 
# End of macro CWHEAD
3524			; | ELSE ( -- ) Not supported - does nothing | TODO 
3524			 
3524					if DEBUG_FORTH_WORDS_KEY 
3524						DMARK "ELS" 
3524 f5				push af  
3525 3a 39 35			ld a, (.dmark)  
3528 32 a0 fd			ld (debug_mark),a  
352b 3a 3a 35			ld a, (.dmark+1)  
352e 32 a1 fd			ld (debug_mark+1),a  
3531 3a 3b 35			ld a, (.dmark+2)  
3534 32 a2 fd			ld (debug_mark+2),a  
3537 18 03			jr .pastdmark  
3539 ..			.dmark: db "ELS"  
353c f1			.pastdmark: pop af  
353d			endm  
# End of macro DMARK
353d						CALLMONITOR 
353d cd aa fd			call debug_vector  
3540				endm  
# End of macro CALLMONITOR
3540					endif 
3540			 
3540			 
3540					NEXTW 
3540 c3 37 24			jp macro_next 
3543				endm 
# End of macro NEXTW
3543			.DO: 
3543				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
3543 21				db WORD_SYS_CORE+13             
3544 6a 36			dw .LOOP            
3546 03				db 2 + 1 
3547 .. 00			db "DO",0              
354a				endm 
# End of macro CWHEAD
354a			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
354a			 
354a					if DEBUG_FORTH_WORDS_KEY 
354a						DMARK "DO." 
354a f5				push af  
354b 3a 5f 35			ld a, (.dmark)  
354e 32 a0 fd			ld (debug_mark),a  
3551 3a 60 35			ld a, (.dmark+1)  
3554 32 a1 fd			ld (debug_mark+1),a  
3557 3a 61 35			ld a, (.dmark+2)  
355a 32 a2 fd			ld (debug_mark+2),a  
355d 18 03			jr .pastdmark  
355f ..			.dmark: db "DO."  
3562 f1			.pastdmark: pop af  
3563			endm  
# End of macro DMARK
3563						CALLMONITOR 
3563 cd aa fd			call debug_vector  
3566				endm  
# End of macro CALLMONITOR
3566					endif 
3566			;  push pc to rsp stack past the DO 
3566			 
3566 2a f7 f3				ld hl, (os_tok_ptr) 
3569 23					inc hl   ; D 
356a 23					inc hl  ; O 
356b 23					inc hl   ; null 
356c					if DEBUG_FORTH_WORDS 
356c						DMARK "DO2" 
356c f5				push af  
356d 3a 81 35			ld a, (.dmark)  
3570 32 a0 fd			ld (debug_mark),a  
3573 3a 82 35			ld a, (.dmark+1)  
3576 32 a1 fd			ld (debug_mark+1),a  
3579 3a 83 35			ld a, (.dmark+2)  
357c 32 a2 fd			ld (debug_mark+2),a  
357f 18 03			jr .pastdmark  
3581 ..			.dmark: db "DO2"  
3584 f1			.pastdmark: pop af  
3585			endm  
# End of macro DMARK
3585						CALLMONITOR 
3585 cd aa fd			call debug_vector  
3588				endm  
# End of macro CALLMONITOR
3588					endif 
3588					FORTH_RSP_NEXT 
3588 cd ed 1f			call macro_forth_rsp_next 
358b				endm 
# End of macro FORTH_RSP_NEXT
358b					if DEBUG_FORTH_WORDS 
358b						DMARK "DO3" 
358b f5				push af  
358c 3a a0 35			ld a, (.dmark)  
358f 32 a0 fd			ld (debug_mark),a  
3592 3a a1 35			ld a, (.dmark+1)  
3595 32 a1 fd			ld (debug_mark+1),a  
3598 3a a2 35			ld a, (.dmark+2)  
359b 32 a2 fd			ld (debug_mark+2),a  
359e 18 03			jr .pastdmark  
35a0 ..			.dmark: db "DO3"  
35a3 f1			.pastdmark: pop af  
35a4			endm  
# End of macro DMARK
35a4						CALLMONITOR 
35a4 cd aa fd			call debug_vector  
35a7				endm  
# End of macro CALLMONITOR
35a7					endif 
35a7			 
35a7					;if DEBUG_FORTH_WORDS 
35a7				;		push hl 
35a7			;		endif  
35a7			 
35a7			; get counters from data stack 
35a7			 
35a7			 
35a7					FORTH_DSP_VALUEHL 
35a7 cd 4b 22			call macro_dsp_valuehl 
35aa				endm 
# End of macro FORTH_DSP_VALUEHL
35aa e5					push hl		 ; hl now has starting counter which needs to be tos 
35ab			 
35ab					if DEBUG_FORTH_WORDS 
35ab						DMARK "DO4" 
35ab f5				push af  
35ac 3a c0 35			ld a, (.dmark)  
35af 32 a0 fd			ld (debug_mark),a  
35b2 3a c1 35			ld a, (.dmark+1)  
35b5 32 a1 fd			ld (debug_mark+1),a  
35b8 3a c2 35			ld a, (.dmark+2)  
35bb 32 a2 fd			ld (debug_mark+2),a  
35be 18 03			jr .pastdmark  
35c0 ..			.dmark: db "DO4"  
35c3 f1			.pastdmark: pop af  
35c4			endm  
# End of macro DMARK
35c4						CALLMONITOR 
35c4 cd aa fd			call debug_vector  
35c7				endm  
# End of macro CALLMONITOR
35c7					endif 
35c7					FORTH_DSP_POP 
35c7 cd 03 23			call macro_forth_dsp_pop 
35ca				endm 
# End of macro FORTH_DSP_POP
35ca			 
35ca					if DEBUG_FORTH_WORDS 
35ca						DMARK "DO5" 
35ca f5				push af  
35cb 3a df 35			ld a, (.dmark)  
35ce 32 a0 fd			ld (debug_mark),a  
35d1 3a e0 35			ld a, (.dmark+1)  
35d4 32 a1 fd			ld (debug_mark+1),a  
35d7 3a e1 35			ld a, (.dmark+2)  
35da 32 a2 fd			ld (debug_mark+2),a  
35dd 18 03			jr .pastdmark  
35df ..			.dmark: db "DO5"  
35e2 f1			.pastdmark: pop af  
35e3			endm  
# End of macro DMARK
35e3						CALLMONITOR 
35e3 cd aa fd			call debug_vector  
35e6				endm  
# End of macro CALLMONITOR
35e6					endif 
35e6			 
35e6					FORTH_DSP_VALUEHL 
35e6 cd 4b 22			call macro_dsp_valuehl 
35e9				endm 
# End of macro FORTH_DSP_VALUEHL
35e9			;		push hl		 ; hl now has starting limit counter 
35e9			 
35e9					if DEBUG_FORTH_WORDS 
35e9						DMARK "DO6" 
35e9 f5				push af  
35ea 3a fe 35			ld a, (.dmark)  
35ed 32 a0 fd			ld (debug_mark),a  
35f0 3a ff 35			ld a, (.dmark+1)  
35f3 32 a1 fd			ld (debug_mark+1),a  
35f6 3a 00 36			ld a, (.dmark+2)  
35f9 32 a2 fd			ld (debug_mark+2),a  
35fc 18 03			jr .pastdmark  
35fe ..			.dmark: db "DO6"  
3601 f1			.pastdmark: pop af  
3602			endm  
# End of macro DMARK
3602						CALLMONITOR 
3602 cd aa fd			call debug_vector  
3605				endm  
# End of macro CALLMONITOR
3605					endif 
3605					FORTH_DSP_POP 
3605 cd 03 23			call macro_forth_dsp_pop 
3608				endm 
# End of macro FORTH_DSP_POP
3608			 
3608			; put counters on the loop stack 
3608			 
3608			;		pop hl			 ; limit counter 
3608 d1					pop de			; start counter 
3609			 
3609					; push limit counter 
3609			 
3609					if DEBUG_FORTH_WORDS 
3609						DMARK "DO7" 
3609 f5				push af  
360a 3a 1e 36			ld a, (.dmark)  
360d 32 a0 fd			ld (debug_mark),a  
3610 3a 1f 36			ld a, (.dmark+1)  
3613 32 a1 fd			ld (debug_mark+1),a  
3616 3a 20 36			ld a, (.dmark+2)  
3619 32 a2 fd			ld (debug_mark+2),a  
361c 18 03			jr .pastdmark  
361e ..			.dmark: db "DO7"  
3621 f1			.pastdmark: pop af  
3622			endm  
# End of macro DMARK
3622						CALLMONITOR 
3622 cd aa fd			call debug_vector  
3625				endm  
# End of macro CALLMONITOR
3625					endif 
3625					FORTH_LOOP_NEXT 
3625 cd 7c 22			call macro_forth_loop_next 
3628				endm 
# End of macro FORTH_LOOP_NEXT
3628			 
3628					; push start counter 
3628			 
3628 eb					ex de, hl 
3629					if DEBUG_FORTH_WORDS 
3629						DMARK "DO7" 
3629 f5				push af  
362a 3a 3e 36			ld a, (.dmark)  
362d 32 a0 fd			ld (debug_mark),a  
3630 3a 3f 36			ld a, (.dmark+1)  
3633 32 a1 fd			ld (debug_mark+1),a  
3636 3a 40 36			ld a, (.dmark+2)  
3639 32 a2 fd			ld (debug_mark+2),a  
363c 18 03			jr .pastdmark  
363e ..			.dmark: db "DO7"  
3641 f1			.pastdmark: pop af  
3642			endm  
# End of macro DMARK
3642						CALLMONITOR 
3642 cd aa fd			call debug_vector  
3645				endm  
# End of macro CALLMONITOR
3645					endif 
3645					FORTH_LOOP_NEXT 
3645 cd 7c 22			call macro_forth_loop_next 
3648				endm 
# End of macro FORTH_LOOP_NEXT
3648			 
3648			 
3648					; init first round of I counter 
3648			 
3648 22 1b f4				ld (os_current_i), hl 
364b			 
364b					if DEBUG_FORTH_WORDS 
364b						DMARK "DO8" 
364b f5				push af  
364c 3a 60 36			ld a, (.dmark)  
364f 32 a0 fd			ld (debug_mark),a  
3652 3a 61 36			ld a, (.dmark+1)  
3655 32 a1 fd			ld (debug_mark+1),a  
3658 3a 62 36			ld a, (.dmark+2)  
365b 32 a2 fd			ld (debug_mark+2),a  
365e 18 03			jr .pastdmark  
3660 ..			.dmark: db "DO8"  
3663 f1			.pastdmark: pop af  
3664			endm  
# End of macro DMARK
3664						CALLMONITOR 
3664 cd aa fd			call debug_vector  
3667				endm  
# End of macro CALLMONITOR
3667					endif 
3667			 
3667					NEXTW 
3667 c3 37 24			jp macro_next 
366a				endm 
# End of macro NEXTW
366a			.LOOP: 
366a				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
366a 22				db WORD_SYS_CORE+14             
366b 82 37			dw .I            
366d 05				db 4 + 1 
366e .. 00			db "LOOP",0              
3673				endm 
# End of macro CWHEAD
3673			; | LOOP ( -- ) Increment and test loop counter  | DONE 
3673			 
3673				; pop tos as current loop count to hl 
3673			 
3673				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3673			 
3673				FORTH_LOOP_TOS 
3673 cd af 22			call macro_forth_loop_tos 
3676				endm 
# End of macro FORTH_LOOP_TOS
3676 e5				push hl 
3677			 
3677					if DEBUG_FORTH_WORDS_KEY 
3677						DMARK "LOP" 
3677 f5				push af  
3678 3a 8c 36			ld a, (.dmark)  
367b 32 a0 fd			ld (debug_mark),a  
367e 3a 8d 36			ld a, (.dmark+1)  
3681 32 a1 fd			ld (debug_mark+1),a  
3684 3a 8e 36			ld a, (.dmark+2)  
3687 32 a2 fd			ld (debug_mark+2),a  
368a 18 03			jr .pastdmark  
368c ..			.dmark: db "LOP"  
368f f1			.pastdmark: pop af  
3690			endm  
# End of macro DMARK
3690						CALLMONITOR 
3690 cd aa fd			call debug_vector  
3693				endm  
# End of macro CALLMONITOR
3693					endif 
3693				; next item on the stack is the limit. get it 
3693			 
3693			 
3693				FORTH_LOOP_POP 
3693 cd b9 22			call macro_forth_loop_pop 
3696				endm 
# End of macro FORTH_LOOP_POP
3696			 
3696				FORTH_LOOP_TOS 
3696 cd af 22			call macro_forth_loop_tos 
3699				endm 
# End of macro FORTH_LOOP_TOS
3699			 
3699 d1				pop de		 ; de = i, hl = limit 
369a			 
369a					if DEBUG_FORTH_WORDS 
369a						DMARK "LP1" 
369a f5				push af  
369b 3a af 36			ld a, (.dmark)  
369e 32 a0 fd			ld (debug_mark),a  
36a1 3a b0 36			ld a, (.dmark+1)  
36a4 32 a1 fd			ld (debug_mark+1),a  
36a7 3a b1 36			ld a, (.dmark+2)  
36aa 32 a2 fd			ld (debug_mark+2),a  
36ad 18 03			jr .pastdmark  
36af ..			.dmark: db "LP1"  
36b2 f1			.pastdmark: pop af  
36b3			endm  
# End of macro DMARK
36b3						CALLMONITOR 
36b3 cd aa fd			call debug_vector  
36b6				endm  
# End of macro CALLMONITOR
36b6					endif 
36b6			 
36b6				; go back to previous word 
36b6			 
36b6 d5				push de    ; save I for inc later 
36b7			 
36b7			 
36b7				; get limit 
36b7				;  is I at limit? 
36b7			 
36b7			 
36b7					if DEBUG_FORTH_WORDS 
36b7						DMARK "LP1" 
36b7 f5				push af  
36b8 3a cc 36			ld a, (.dmark)  
36bb 32 a0 fd			ld (debug_mark),a  
36be 3a cd 36			ld a, (.dmark+1)  
36c1 32 a1 fd			ld (debug_mark+1),a  
36c4 3a ce 36			ld a, (.dmark+2)  
36c7 32 a2 fd			ld (debug_mark+2),a  
36ca 18 03			jr .pastdmark  
36cc ..			.dmark: db "LP1"  
36cf f1			.pastdmark: pop af  
36d0			endm  
# End of macro DMARK
36d0						CALLMONITOR 
36d0 cd aa fd			call debug_vector  
36d3				endm  
# End of macro CALLMONITOR
36d3					endif 
36d3			 
36d3 ed 52			sbc hl, de 
36d5			 
36d5			 
36d5				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
36d5			 
36d5 20 26				jr nz, .loopnotdone 
36d7			 
36d7 e1				pop hl   ; get rid of saved I 
36d8				FORTH_LOOP_POP     ; get rid of limit 
36d8 cd b9 22			call macro_forth_loop_pop 
36db				endm 
# End of macro FORTH_LOOP_POP
36db			 
36db				FORTH_RSP_POP     ; get rid of DO ptr 
36db cd 0e 20			call macro_forth_rsp_pop 
36de				endm 
# End of macro FORTH_RSP_POP
36de			 
36de			if DEBUG_FORTH_WORDS 
36de						DMARK "LP>" 
36de f5				push af  
36df 3a f3 36			ld a, (.dmark)  
36e2 32 a0 fd			ld (debug_mark),a  
36e5 3a f4 36			ld a, (.dmark+1)  
36e8 32 a1 fd			ld (debug_mark+1),a  
36eb 3a f5 36			ld a, (.dmark+2)  
36ee 32 a2 fd			ld (debug_mark+2),a  
36f1 18 03			jr .pastdmark  
36f3 ..			.dmark: db "LP>"  
36f6 f1			.pastdmark: pop af  
36f7			endm  
# End of macro DMARK
36f7				CALLMONITOR 
36f7 cd aa fd			call debug_vector  
36fa				endm  
# End of macro CALLMONITOR
36fa			endif 
36fa			 
36fa					NEXTW 
36fa c3 37 24			jp macro_next 
36fd				endm 
# End of macro NEXTW
36fd				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
36fd			 
36fd			.loopnotdone: 
36fd			 
36fd e1				pop hl    ; get I 
36fe 23				inc hl 
36ff			 
36ff			   	; save new I 
36ff			 
36ff			 
36ff					; set I counter 
36ff			 
36ff 22 1b f4				ld (os_current_i), hl 
3702			 
3702					if DEBUG_FORTH_WORDS 
3702						DMARK "LPN" 
3702 f5				push af  
3703 3a 17 37			ld a, (.dmark)  
3706 32 a0 fd			ld (debug_mark),a  
3709 3a 18 37			ld a, (.dmark+1)  
370c 32 a1 fd			ld (debug_mark+1),a  
370f 3a 19 37			ld a, (.dmark+2)  
3712 32 a2 fd			ld (debug_mark+2),a  
3715 18 03			jr .pastdmark  
3717 ..			.dmark: db "LPN"  
371a f1			.pastdmark: pop af  
371b			endm  
# End of macro DMARK
371b					CALLMONITOR 
371b cd aa fd			call debug_vector  
371e				endm  
# End of macro CALLMONITOR
371e					endif 
371e					 
371e				FORTH_LOOP_NEXT 
371e cd 7c 22			call macro_forth_loop_next 
3721				endm 
# End of macro FORTH_LOOP_NEXT
3721			 
3721			 
3721					if DEBUG_FORTH_WORDS 
3721 eb						ex de,hl 
3722					endif 
3722			 
3722			;	; get DO ptr 
3722			; 
3722					if DEBUG_FORTH_WORDS 
3722						DMARK "LP7" 
3722 f5				push af  
3723 3a 37 37			ld a, (.dmark)  
3726 32 a0 fd			ld (debug_mark),a  
3729 3a 38 37			ld a, (.dmark+1)  
372c 32 a1 fd			ld (debug_mark+1),a  
372f 3a 39 37			ld a, (.dmark+2)  
3732 32 a2 fd			ld (debug_mark+2),a  
3735 18 03			jr .pastdmark  
3737 ..			.dmark: db "LP7"  
373a f1			.pastdmark: pop af  
373b			endm  
# End of macro DMARK
373b					CALLMONITOR 
373b cd aa fd			call debug_vector  
373e				endm  
# End of macro CALLMONITOR
373e					endif 
373e				FORTH_RSP_TOS 
373e cd 04 20			call macro_forth_rsp_tos 
3741				endm 
# End of macro FORTH_RSP_TOS
3741			 
3741					if DEBUG_FORTH_WORDS 
3741						DMARK "LP8" 
3741 f5				push af  
3742 3a 56 37			ld a, (.dmark)  
3745 32 a0 fd			ld (debug_mark),a  
3748 3a 57 37			ld a, (.dmark+1)  
374b 32 a1 fd			ld (debug_mark+1),a  
374e 3a 58 37			ld a, (.dmark+2)  
3751 32 a2 fd			ld (debug_mark+2),a  
3754 18 03			jr .pastdmark  
3756 ..			.dmark: db "LP8"  
3759 f1			.pastdmark: pop af  
375a			endm  
# End of macro DMARK
375a					CALLMONITOR 
375a cd aa fd			call debug_vector  
375d				endm  
# End of macro CALLMONITOR
375d					endif 
375d				;push hl 
375d			 
375d				; not going to DO any more 
375d				; get rid of the RSP pointer as DO will add it back in 
375d				;FORTH_RSP_POP 
375d				;pop hl 
375d			 
375d				;ld hl,(cli_ret_sp) 
375d				;ld e, (hl) 
375d				;inc hl 
375d				;ld d, (hl) 
375d				;ex de,hl 
375d 22 f7 f3			ld (os_tok_ptr), hl 
3760					if DEBUG_FORTH_WORDS 
3760						DMARK "LP<" 
3760 f5				push af  
3761 3a 75 37			ld a, (.dmark)  
3764 32 a0 fd			ld (debug_mark),a  
3767 3a 76 37			ld a, (.dmark+1)  
376a 32 a1 fd			ld (debug_mark+1),a  
376d 3a 77 37			ld a, (.dmark+2)  
3770 32 a2 fd			ld (debug_mark+2),a  
3773 18 03			jr .pastdmark  
3775 ..			.dmark: db "LP<"  
3778 f1			.pastdmark: pop af  
3779			endm  
# End of macro DMARK
3779					CALLMONITOR 
3779 cd aa fd			call debug_vector  
377c				endm  
# End of macro CALLMONITOR
377c				endif 
377c c3 c8 24			jp exec1 
377f			 
377f					 
377f			 
377f			 
377f					NEXTW 
377f c3 37 24			jp macro_next 
3782				endm 
# End of macro NEXTW
3782			.I:  
3782			 
3782				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
3782 5e				db WORD_SYS_CORE+74             
3783 ad 37			dw .DLOOP            
3785 02				db 1 + 1 
3786 .. 00			db "I",0              
3788				endm 
# End of macro CWHEAD
3788			; | I ( -- ) Current loop counter | DONE 
3788					if DEBUG_FORTH_WORDS_KEY 
3788						DMARK "I.." 
3788 f5				push af  
3789 3a 9d 37			ld a, (.dmark)  
378c 32 a0 fd			ld (debug_mark),a  
378f 3a 9e 37			ld a, (.dmark+1)  
3792 32 a1 fd			ld (debug_mark+1),a  
3795 3a 9f 37			ld a, (.dmark+2)  
3798 32 a2 fd			ld (debug_mark+2),a  
379b 18 03			jr .pastdmark  
379d ..			.dmark: db "I.."  
37a0 f1			.pastdmark: pop af  
37a1			endm  
# End of macro DMARK
37a1						CALLMONITOR 
37a1 cd aa fd			call debug_vector  
37a4				endm  
# End of macro CALLMONITOR
37a4					endif 
37a4			 
37a4 2a 1b f4				ld hl,(os_current_i) 
37a7 cd 46 20				call forth_push_numhl 
37aa			 
37aa					NEXTW 
37aa c3 37 24			jp macro_next 
37ad				endm 
# End of macro NEXTW
37ad			.DLOOP: 
37ad				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
37ad 5f				db WORD_SYS_CORE+75             
37ae 8e 38			dw .REPEAT            
37b0 06				db 5 + 1 
37b1 .. 00			db "-LOOP",0              
37b7				endm 
# End of macro CWHEAD
37b7			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
37b7				; pop tos as current loop count to hl 
37b7					if DEBUG_FORTH_WORDS_KEY 
37b7						DMARK "-LP" 
37b7 f5				push af  
37b8 3a cc 37			ld a, (.dmark)  
37bb 32 a0 fd			ld (debug_mark),a  
37be 3a cd 37			ld a, (.dmark+1)  
37c1 32 a1 fd			ld (debug_mark+1),a  
37c4 3a ce 37			ld a, (.dmark+2)  
37c7 32 a2 fd			ld (debug_mark+2),a  
37ca 18 03			jr .pastdmark  
37cc ..			.dmark: db "-LP"  
37cf f1			.pastdmark: pop af  
37d0			endm  
# End of macro DMARK
37d0						CALLMONITOR 
37d0 cd aa fd			call debug_vector  
37d3				endm  
# End of macro CALLMONITOR
37d3					endif 
37d3			 
37d3				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
37d3			 
37d3				FORTH_LOOP_TOS 
37d3 cd af 22			call macro_forth_loop_tos 
37d6				endm 
# End of macro FORTH_LOOP_TOS
37d6 e5				push hl 
37d7			 
37d7					if DEBUG_FORTH_WORDS 
37d7						DMARK "-LP" 
37d7 f5				push af  
37d8 3a ec 37			ld a, (.dmark)  
37db 32 a0 fd			ld (debug_mark),a  
37de 3a ed 37			ld a, (.dmark+1)  
37e1 32 a1 fd			ld (debug_mark+1),a  
37e4 3a ee 37			ld a, (.dmark+2)  
37e7 32 a2 fd			ld (debug_mark+2),a  
37ea 18 03			jr .pastdmark  
37ec ..			.dmark: db "-LP"  
37ef f1			.pastdmark: pop af  
37f0			endm  
# End of macro DMARK
37f0						CALLMONITOR 
37f0 cd aa fd			call debug_vector  
37f3				endm  
# End of macro CALLMONITOR
37f3					endif 
37f3				; next item on the stack is the limit. get it 
37f3			 
37f3			 
37f3				FORTH_LOOP_POP 
37f3 cd b9 22			call macro_forth_loop_pop 
37f6				endm 
# End of macro FORTH_LOOP_POP
37f6			 
37f6				FORTH_LOOP_TOS 
37f6 cd af 22			call macro_forth_loop_tos 
37f9				endm 
# End of macro FORTH_LOOP_TOS
37f9			 
37f9 d1				pop de		 ; de = i, hl = limit 
37fa			 
37fa					if DEBUG_FORTH_WORDS 
37fa						DMARK "-L1" 
37fa f5				push af  
37fb 3a 0f 38			ld a, (.dmark)  
37fe 32 a0 fd			ld (debug_mark),a  
3801 3a 10 38			ld a, (.dmark+1)  
3804 32 a1 fd			ld (debug_mark+1),a  
3807 3a 11 38			ld a, (.dmark+2)  
380a 32 a2 fd			ld (debug_mark+2),a  
380d 18 03			jr .pastdmark  
380f ..			.dmark: db "-L1"  
3812 f1			.pastdmark: pop af  
3813			endm  
# End of macro DMARK
3813						CALLMONITOR 
3813 cd aa fd			call debug_vector  
3816				endm  
# End of macro CALLMONITOR
3816					endif 
3816			 
3816				; go back to previous word 
3816			 
3816 d5				push de    ; save I for inc later 
3817			 
3817			 
3817				; get limit 
3817				;  is I at limit? 
3817			 
3817			 
3817					if DEBUG_FORTH_WORDS 
3817						DMARK "-L1" 
3817 f5				push af  
3818 3a 2c 38			ld a, (.dmark)  
381b 32 a0 fd			ld (debug_mark),a  
381e 3a 2d 38			ld a, (.dmark+1)  
3821 32 a1 fd			ld (debug_mark+1),a  
3824 3a 2e 38			ld a, (.dmark+2)  
3827 32 a2 fd			ld (debug_mark+2),a  
382a 18 03			jr .pastdmark  
382c ..			.dmark: db "-L1"  
382f f1			.pastdmark: pop af  
3830			endm  
# End of macro DMARK
3830						CALLMONITOR 
3830 cd aa fd			call debug_vector  
3833				endm  
# End of macro CALLMONITOR
3833					endif 
3833			 
3833 ed 52			sbc hl, de 
3835			 
3835			 
3835				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3835			 
3835 20 26				jr nz, .mloopnotdone 
3837			 
3837 e1				pop hl   ; get rid of saved I 
3838				FORTH_LOOP_POP     ; get rid of limit 
3838 cd b9 22			call macro_forth_loop_pop 
383b				endm 
# End of macro FORTH_LOOP_POP
383b			 
383b				FORTH_RSP_POP     ; get rid of DO ptr 
383b cd 0e 20			call macro_forth_rsp_pop 
383e				endm 
# End of macro FORTH_RSP_POP
383e			 
383e			if DEBUG_FORTH_WORDS 
383e						DMARK "-L>" 
383e f5				push af  
383f 3a 53 38			ld a, (.dmark)  
3842 32 a0 fd			ld (debug_mark),a  
3845 3a 54 38			ld a, (.dmark+1)  
3848 32 a1 fd			ld (debug_mark+1),a  
384b 3a 55 38			ld a, (.dmark+2)  
384e 32 a2 fd			ld (debug_mark+2),a  
3851 18 03			jr .pastdmark  
3853 ..			.dmark: db "-L>"  
3856 f1			.pastdmark: pop af  
3857			endm  
# End of macro DMARK
3857				CALLMONITOR 
3857 cd aa fd			call debug_vector  
385a				endm  
# End of macro CALLMONITOR
385a			endif 
385a			 
385a					NEXTW 
385a c3 37 24			jp macro_next 
385d				endm 
# End of macro NEXTW
385d				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
385d			 
385d			.mloopnotdone: 
385d			 
385d e1				pop hl    ; get I 
385e 2b				dec hl 
385f			 
385f			   	; save new I 
385f			 
385f			 
385f					; set I counter 
385f			 
385f 22 1b f4				ld (os_current_i), hl 
3862			 
3862					 
3862				FORTH_LOOP_NEXT 
3862 cd 7c 22			call macro_forth_loop_next 
3865				endm 
# End of macro FORTH_LOOP_NEXT
3865			 
3865			 
3865					if DEBUG_FORTH_WORDS 
3865 eb						ex de,hl 
3866					endif 
3866			 
3866			;	; get DO ptr 
3866			; 
3866				FORTH_RSP_TOS 
3866 cd 04 20			call macro_forth_rsp_tos 
3869				endm 
# End of macro FORTH_RSP_TOS
3869			 
3869				;push hl 
3869			 
3869				; not going to DO any more 
3869				; get rid of the RSP pointer as DO will add it back in 
3869				;FORTH_RSP_POP 
3869				;pop hl 
3869			 
3869			 
3869 22 f7 f3			ld (os_tok_ptr), hl 
386c					if DEBUG_FORTH_WORDS 
386c						DMARK "-L<" 
386c f5				push af  
386d 3a 81 38			ld a, (.dmark)  
3870 32 a0 fd			ld (debug_mark),a  
3873 3a 82 38			ld a, (.dmark+1)  
3876 32 a1 fd			ld (debug_mark+1),a  
3879 3a 83 38			ld a, (.dmark+2)  
387c 32 a2 fd			ld (debug_mark+2),a  
387f 18 03			jr .pastdmark  
3881 ..			.dmark: db "-L<"  
3884 f1			.pastdmark: pop af  
3885			endm  
# End of macro DMARK
3885					CALLMONITOR 
3885 cd aa fd			call debug_vector  
3888				endm  
# End of macro CALLMONITOR
3888				endif 
3888 c3 c8 24			jp exec1 
388b			 
388b					 
388b			 
388b			 
388b			 
388b				NEXTW 
388b c3 37 24			jp macro_next 
388e				endm 
# End of macro NEXTW
388e			 
388e			 
388e			 
388e			 
388e			.REPEAT: 
388e				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
388e 71				db WORD_SYS_CORE+93             
388f e1 38			dw .UNTIL            
3891 06				db 5 + 1 
3892 .. 00			db "REPEAT",0              
3899				endm 
# End of macro CWHEAD
3899			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3899			;  push pc to rsp stack past the REPEAT 
3899					if DEBUG_FORTH_WORDS_KEY 
3899						DMARK "REP" 
3899 f5				push af  
389a 3a ae 38			ld a, (.dmark)  
389d 32 a0 fd			ld (debug_mark),a  
38a0 3a af 38			ld a, (.dmark+1)  
38a3 32 a1 fd			ld (debug_mark+1),a  
38a6 3a b0 38			ld a, (.dmark+2)  
38a9 32 a2 fd			ld (debug_mark+2),a  
38ac 18 03			jr .pastdmark  
38ae ..			.dmark: db "REP"  
38b1 f1			.pastdmark: pop af  
38b2			endm  
# End of macro DMARK
38b2						CALLMONITOR 
38b2 cd aa fd			call debug_vector  
38b5				endm  
# End of macro CALLMONITOR
38b5					endif 
38b5			 
38b5 2a f7 f3				ld hl, (os_tok_ptr) 
38b8 23					inc hl   ; R 
38b9 23					inc hl  ; E 
38ba 23					inc hl   ; P 
38bb 23					inc hl   ; E 
38bc 23					inc hl   ; A 
38bd 23					inc hl   ; T 
38be 23					inc hl   ; zero 
38bf					FORTH_RSP_NEXT 
38bf cd ed 1f			call macro_forth_rsp_next 
38c2				endm 
# End of macro FORTH_RSP_NEXT
38c2			 
38c2			 
38c2					if DEBUG_FORTH_WORDS 
38c2						DMARK "REP" 
38c2 f5				push af  
38c3 3a d7 38			ld a, (.dmark)  
38c6 32 a0 fd			ld (debug_mark),a  
38c9 3a d8 38			ld a, (.dmark+1)  
38cc 32 a1 fd			ld (debug_mark+1),a  
38cf 3a d9 38			ld a, (.dmark+2)  
38d2 32 a2 fd			ld (debug_mark+2),a  
38d5 18 03			jr .pastdmark  
38d7 ..			.dmark: db "REP"  
38da f1			.pastdmark: pop af  
38db			endm  
# End of macro DMARK
38db						;pop bc    ; TODO BUG ?????? what is this for???? 
38db						CALLMONITOR 
38db cd aa fd			call debug_vector  
38de				endm  
# End of macro CALLMONITOR
38de					endif 
38de			 
38de					NEXTW 
38de c3 37 24			jp macro_next 
38e1				endm 
# End of macro NEXTW
38e1			;	       NEXTW 
38e1			 
38e1			.UNTIL: 
38e1				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
38e1 72				db WORD_SYS_CORE+94             
38e2 78 39			dw .ENDFLOW            
38e4 06				db 5 + 1 
38e5 .. 00			db "UNTIL",0              
38eb				endm 
# End of macro CWHEAD
38eb			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
38eb			 
38eb				; pop tos as check 
38eb			 
38eb				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
38eb			 
38eb				FORTH_DSP_VALUEHL 
38eb cd 4b 22			call macro_dsp_valuehl 
38ee				endm 
# End of macro FORTH_DSP_VALUEHL
38ee			 
38ee					if DEBUG_FORTH_WORDS_KEY 
38ee						DMARK "UNT" 
38ee f5				push af  
38ef 3a 03 39			ld a, (.dmark)  
38f2 32 a0 fd			ld (debug_mark),a  
38f5 3a 04 39			ld a, (.dmark+1)  
38f8 32 a1 fd			ld (debug_mark+1),a  
38fb 3a 05 39			ld a, (.dmark+2)  
38fe 32 a2 fd			ld (debug_mark+2),a  
3901 18 03			jr .pastdmark  
3903 ..			.dmark: db "UNT"  
3906 f1			.pastdmark: pop af  
3907			endm  
# End of macro DMARK
3907						CALLMONITOR 
3907 cd aa fd			call debug_vector  
390a				endm  
# End of macro CALLMONITOR
390a					endif 
390a			 
390a			;	push hl 
390a				FORTH_DSP_POP 
390a cd 03 23			call macro_forth_dsp_pop 
390d				endm 
# End of macro FORTH_DSP_POP
390d			 
390d			;	pop hl 
390d			 
390d				; test if true 
390d			 
390d cd 07 10			call ishlzero 
3910			;	ld a,l 
3910			;	add h 
3910			; 
3910			;	cp 0 
3910			 
3910 20 3e			jr nz, .untilnotdone 
3912			 
3912					if DEBUG_FORTH_WORDS 
3912						DMARK "UNf" 
3912 f5				push af  
3913 3a 27 39			ld a, (.dmark)  
3916 32 a0 fd			ld (debug_mark),a  
3919 3a 28 39			ld a, (.dmark+1)  
391c 32 a1 fd			ld (debug_mark+1),a  
391f 3a 29 39			ld a, (.dmark+2)  
3922 32 a2 fd			ld (debug_mark+2),a  
3925 18 03			jr .pastdmark  
3927 ..			.dmark: db "UNf"  
392a f1			.pastdmark: pop af  
392b			endm  
# End of macro DMARK
392b						CALLMONITOR 
392b cd aa fd			call debug_vector  
392e				endm  
# End of macro CALLMONITOR
392e					endif 
392e			 
392e			 
392e			 
392e				FORTH_RSP_POP     ; get rid of DO ptr 
392e cd 0e 20			call macro_forth_rsp_pop 
3931				endm 
# End of macro FORTH_RSP_POP
3931			 
3931			if DEBUG_FORTH_WORDS 
3931						DMARK "UN>" 
3931 f5				push af  
3932 3a 46 39			ld a, (.dmark)  
3935 32 a0 fd			ld (debug_mark),a  
3938 3a 47 39			ld a, (.dmark+1)  
393b 32 a1 fd			ld (debug_mark+1),a  
393e 3a 48 39			ld a, (.dmark+2)  
3941 32 a2 fd			ld (debug_mark+2),a  
3944 18 03			jr .pastdmark  
3946 ..			.dmark: db "UN>"  
3949 f1			.pastdmark: pop af  
394a			endm  
# End of macro DMARK
394a				CALLMONITOR 
394a cd aa fd			call debug_vector  
394d				endm  
# End of macro CALLMONITOR
394d			endif 
394d			 
394d					NEXTW 
394d c3 37 24			jp macro_next 
3950				endm 
# End of macro NEXTW
3950				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3950			 
3950			.untilnotdone: 
3950			 
3950			 
3950			;	; get DO ptr 
3950			; 
3950				FORTH_RSP_TOS 
3950 cd 04 20			call macro_forth_rsp_tos 
3953				endm 
# End of macro FORTH_RSP_TOS
3953			 
3953				;push hl 
3953			 
3953				; not going to DO any more 
3953				; get rid of the RSP pointer as DO will add it back in 
3953				;FORTH_RSP_POP 
3953				;pop hl 
3953			 
3953			 
3953 22 f7 f3			ld (os_tok_ptr), hl 
3956					if DEBUG_FORTH_WORDS 
3956						DMARK "UN<" 
3956 f5				push af  
3957 3a 6b 39			ld a, (.dmark)  
395a 32 a0 fd			ld (debug_mark),a  
395d 3a 6c 39			ld a, (.dmark+1)  
3960 32 a1 fd			ld (debug_mark+1),a  
3963 3a 6d 39			ld a, (.dmark+2)  
3966 32 a2 fd			ld (debug_mark+2),a  
3969 18 03			jr .pastdmark  
396b ..			.dmark: db "UN<"  
396e f1			.pastdmark: pop af  
396f			endm  
# End of macro DMARK
396f					CALLMONITOR 
396f cd aa fd			call debug_vector  
3972				endm  
# End of macro CALLMONITOR
3972				endif 
3972 c3 c8 24			jp exec1 
3975			 
3975					 
3975			 
3975			 
3975					NEXTW 
3975 c3 37 24			jp macro_next 
3978				endm 
# End of macro NEXTW
3978			 
3978			 
3978			.ENDFLOW: 
3978			 
3978			; eof 
3978			 
# End of file forth_words_flow.asm
3978			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3978			include "forth_words_logic.asm" 
3978			 
3978			; | ## Logic Words 
3978			 
3978			.NOT: 
3978				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3978 2d				db WORD_SYS_CORE+25             
3979 c0 39			dw .IS            
397b 04				db 3 + 1 
397c .. 00			db "NOT",0              
3980				endm 
# End of macro CWHEAD
3980			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
3980					if DEBUG_FORTH_WORDS_KEY 
3980						DMARK "NOT" 
3980 f5				push af  
3981 3a 95 39			ld a, (.dmark)  
3984 32 a0 fd			ld (debug_mark),a  
3987 3a 96 39			ld a, (.dmark+1)  
398a 32 a1 fd			ld (debug_mark+1),a  
398d 3a 97 39			ld a, (.dmark+2)  
3990 32 a2 fd			ld (debug_mark+2),a  
3993 18 03			jr .pastdmark  
3995 ..			.dmark: db "NOT"  
3998 f1			.pastdmark: pop af  
3999			endm  
# End of macro DMARK
3999						CALLMONITOR 
3999 cd aa fd			call debug_vector  
399c				endm  
# End of macro CALLMONITOR
399c					endif 
399c					FORTH_DSP 
399c cd 11 22			call macro_forth_dsp 
399f				endm 
# End of macro FORTH_DSP
399f 7e					ld a,(hl)	; get type of value on TOS 
39a0 fe 02				cp DS_TYPE_INUM  
39a2 28 03				jr z, .noti 
39a4					NEXTW 
39a4 c3 37 24			jp macro_next 
39a7				endm 
# End of macro NEXTW
39a7			.noti:          FORTH_DSP_VALUEHL 
39a7 cd 4b 22			call macro_dsp_valuehl 
39aa				endm 
# End of macro FORTH_DSP_VALUEHL
39aa			;		push hl 
39aa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39aa cd 03 23			call macro_forth_dsp_pop 
39ad				endm 
# End of macro FORTH_DSP_POP
39ad			;		pop hl 
39ad 3e 00				ld a,0 
39af bd					cp l 
39b0 28 04				jr z, .not2t 
39b2 2e 00				ld l, 0 
39b4 18 02				jr .notip 
39b6			 
39b6 2e ff		.not2t:		ld l, 255 
39b8			 
39b8 26 00		.notip:		ld h, 0	 
39ba			 
39ba cd 46 20				call forth_push_numhl 
39bd					NEXTW 
39bd c3 37 24			jp macro_next 
39c0				endm 
# End of macro NEXTW
39c0			 
39c0			.IS: 
39c0				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
39c0 2d				db WORD_SYS_CORE+25             
39c1 e6 39			dw .LZERO            
39c3 03				db 2 + 1 
39c4 .. 00			db "IS",0              
39c7				endm 
# End of macro CWHEAD
39c7			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
39c7					if DEBUG_FORTH_WORDS_KEY 
39c7						DMARK "IS." 
39c7 f5				push af  
39c8 3a dc 39			ld a, (.dmark)  
39cb 32 a0 fd			ld (debug_mark),a  
39ce 3a dd 39			ld a, (.dmark+1)  
39d1 32 a1 fd			ld (debug_mark+1),a  
39d4 3a de 39			ld a, (.dmark+2)  
39d7 32 a2 fd			ld (debug_mark+2),a  
39da 18 03			jr .pastdmark  
39dc ..			.dmark: db "IS."  
39df f1			.pastdmark: pop af  
39e0			endm  
# End of macro DMARK
39e0						CALLMONITOR 
39e0 cd aa fd			call debug_vector  
39e3				endm  
# End of macro CALLMONITOR
39e3					endif 
39e3					NEXTW 
39e3 c3 37 24			jp macro_next 
39e6				endm 
# End of macro NEXTW
39e6			.LZERO: 
39e6				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
39e6 2d				db WORD_SYS_CORE+25             
39e7 f0 39			dw .TZERO            
39e9 03				db 2 + 1 
39ea .. 00			db "0<",0              
39ed				endm 
# End of macro CWHEAD
39ed			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
39ed					NEXTW 
39ed c3 37 24			jp macro_next 
39f0				endm 
# End of macro NEXTW
39f0			.TZERO: 
39f0				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
39f0 2e				db WORD_SYS_CORE+26             
39f1 37 3a			dw .LESS            
39f3 03				db 2 + 1 
39f4 .. 00			db "0=",0              
39f7				endm 
# End of macro CWHEAD
39f7			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
39f7				; TODO add floating point number detection 
39f7					;v5 FORTH_DSP_VALUE 
39f7					if DEBUG_FORTH_WORDS_KEY 
39f7						DMARK "0=." 
39f7 f5				push af  
39f8 3a 0c 3a			ld a, (.dmark)  
39fb 32 a0 fd			ld (debug_mark),a  
39fe 3a 0d 3a			ld a, (.dmark+1)  
3a01 32 a1 fd			ld (debug_mark+1),a  
3a04 3a 0e 3a			ld a, (.dmark+2)  
3a07 32 a2 fd			ld (debug_mark+2),a  
3a0a 18 03			jr .pastdmark  
3a0c ..			.dmark: db "0=."  
3a0f f1			.pastdmark: pop af  
3a10			endm  
# End of macro DMARK
3a10						CALLMONITOR 
3a10 cd aa fd			call debug_vector  
3a13				endm  
# End of macro CALLMONITOR
3a13					endif 
3a13					FORTH_DSP 
3a13 cd 11 22			call macro_forth_dsp 
3a16				endm 
# End of macro FORTH_DSP
3a16 7e					ld a,(hl)	; get type of value on TOS 
3a17 fe 02				cp DS_TYPE_INUM  
3a19 28 00				jr z, .tz_inum 
3a1b			 
3a1b				if FORTH_ENABLE_FLOATMATH 
3a1b					jr .tz_done 
3a1b			 
3a1b				endif 
3a1b					 
3a1b			 
3a1b			.tz_inum: 
3a1b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a1b cd 4b 22			call macro_dsp_valuehl 
3a1e				endm 
# End of macro FORTH_DSP_VALUEHL
3a1e			 
3a1e			;		push hl 
3a1e			 
3a1e					; destroy value TOS 
3a1e			 
3a1e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a1e cd 03 23			call macro_forth_dsp_pop 
3a21				endm 
# End of macro FORTH_DSP_POP
3a21			 
3a21			;		pop hl 
3a21			 
3a21 3e 00				ld a,0 
3a23			 
3a23 bd					cp l 
3a24 20 08				jr nz, .tz_notzero 
3a26			 
3a26 bc					cp h 
3a27			 
3a27 20 05				jr nz, .tz_notzero 
3a29			 
3a29			 
3a29 21 01 00				ld hl, FORTH_TRUE 
3a2c 18 03				jr .tz_done 
3a2e			 
3a2e 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3a31			 
3a31					; push value back onto stack for another op etc 
3a31			 
3a31			.tz_done: 
3a31 cd 46 20				call forth_push_numhl 
3a34			 
3a34					NEXTW 
3a34 c3 37 24			jp macro_next 
3a37				endm 
# End of macro NEXTW
3a37			.LESS: 
3a37				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3a37 2f				db WORD_SYS_CORE+27             
3a38 a0 3a			dw .GT            
3a3a 02				db 1 + 1 
3a3b .. 00			db "<",0              
3a3d				endm 
# End of macro CWHEAD
3a3d			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3a3d				; TODO add floating point number detection 
3a3d					if DEBUG_FORTH_WORDS_KEY 
3a3d						DMARK "LES" 
3a3d f5				push af  
3a3e 3a 52 3a			ld a, (.dmark)  
3a41 32 a0 fd			ld (debug_mark),a  
3a44 3a 53 3a			ld a, (.dmark+1)  
3a47 32 a1 fd			ld (debug_mark+1),a  
3a4a 3a 54 3a			ld a, (.dmark+2)  
3a4d 32 a2 fd			ld (debug_mark+2),a  
3a50 18 03			jr .pastdmark  
3a52 ..			.dmark: db "LES"  
3a55 f1			.pastdmark: pop af  
3a56			endm  
# End of macro DMARK
3a56						CALLMONITOR 
3a56 cd aa fd			call debug_vector  
3a59				endm  
# End of macro CALLMONITOR
3a59					endif 
3a59					FORTH_DSP 
3a59 cd 11 22			call macro_forth_dsp 
3a5c				endm 
# End of macro FORTH_DSP
3a5c					;v5 FORTH_DSP_VALUE 
3a5c 7e					ld a,(hl)	; get type of value on TOS 
3a5d fe 02				cp DS_TYPE_INUM  
3a5f 28 00				jr z, .less_inum 
3a61			 
3a61				if FORTH_ENABLE_FLOATMATH 
3a61					jr .less_done 
3a61			 
3a61				endif 
3a61					 
3a61			 
3a61			.less_inum: 
3a61					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a61 cd 4b 22			call macro_dsp_valuehl 
3a64				endm 
# End of macro FORTH_DSP_VALUEHL
3a64			 
3a64 e5					push hl  ; u2 
3a65			 
3a65					; destroy value TOS 
3a65			 
3a65					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a65 cd 03 23			call macro_forth_dsp_pop 
3a68				endm 
# End of macro FORTH_DSP_POP
3a68			 
3a68			 
3a68					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a68 cd 4b 22			call macro_dsp_valuehl 
3a6b				endm 
# End of macro FORTH_DSP_VALUEHL
3a6b			 
3a6b e5					push hl    ; u1 
3a6c			 
3a6c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a6c cd 03 23			call macro_forth_dsp_pop 
3a6f				endm 
# End of macro FORTH_DSP_POP
3a6f			 
3a6f			 
3a6f b7			 or a      ;clear carry flag 
3a70 01 00 00		 ld bc, FORTH_FALSE 
3a73 e1			  pop hl    ; u1 
3a74 d1			  pop de    ; u2 
3a75 ed 52		  sbc hl,de 
3a77 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3a79			 
3a79 01 01 00		 ld bc, FORTH_TRUE 
3a7c			.lscont:  
3a7c c5					push bc 
3a7d e1					pop hl 
3a7e			 
3a7e					if DEBUG_FORTH_WORDS 
3a7e						DMARK "LT1" 
3a7e f5				push af  
3a7f 3a 93 3a			ld a, (.dmark)  
3a82 32 a0 fd			ld (debug_mark),a  
3a85 3a 94 3a			ld a, (.dmark+1)  
3a88 32 a1 fd			ld (debug_mark+1),a  
3a8b 3a 95 3a			ld a, (.dmark+2)  
3a8e 32 a2 fd			ld (debug_mark+2),a  
3a91 18 03			jr .pastdmark  
3a93 ..			.dmark: db "LT1"  
3a96 f1			.pastdmark: pop af  
3a97			endm  
# End of macro DMARK
3a97						CALLMONITOR 
3a97 cd aa fd			call debug_vector  
3a9a				endm  
# End of macro CALLMONITOR
3a9a					endif 
3a9a cd 46 20				call forth_push_numhl 
3a9d			 
3a9d					NEXTW 
3a9d c3 37 24			jp macro_next 
3aa0				endm 
# End of macro NEXTW
3aa0			.GT: 
3aa0				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3aa0 30				db WORD_SYS_CORE+28             
3aa1 09 3b			dw .EQUAL            
3aa3 02				db 1 + 1 
3aa4 .. 00			db ">",0              
3aa6				endm 
# End of macro CWHEAD
3aa6			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3aa6				; TODO add floating point number detection 
3aa6					if DEBUG_FORTH_WORDS_KEY 
3aa6						DMARK "GRT" 
3aa6 f5				push af  
3aa7 3a bb 3a			ld a, (.dmark)  
3aaa 32 a0 fd			ld (debug_mark),a  
3aad 3a bc 3a			ld a, (.dmark+1)  
3ab0 32 a1 fd			ld (debug_mark+1),a  
3ab3 3a bd 3a			ld a, (.dmark+2)  
3ab6 32 a2 fd			ld (debug_mark+2),a  
3ab9 18 03			jr .pastdmark  
3abb ..			.dmark: db "GRT"  
3abe f1			.pastdmark: pop af  
3abf			endm  
# End of macro DMARK
3abf						CALLMONITOR 
3abf cd aa fd			call debug_vector  
3ac2				endm  
# End of macro CALLMONITOR
3ac2					endif 
3ac2					FORTH_DSP 
3ac2 cd 11 22			call macro_forth_dsp 
3ac5				endm 
# End of macro FORTH_DSP
3ac5					;FORTH_DSP_VALUE 
3ac5 7e					ld a,(hl)	; get type of value on TOS 
3ac6 fe 02				cp DS_TYPE_INUM  
3ac8 28 00				jr z, .gt_inum 
3aca			 
3aca				if FORTH_ENABLE_FLOATMATH 
3aca					jr .gt_done 
3aca			 
3aca				endif 
3aca					 
3aca			 
3aca			.gt_inum: 
3aca					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3aca cd 4b 22			call macro_dsp_valuehl 
3acd				endm 
# End of macro FORTH_DSP_VALUEHL
3acd			 
3acd e5					push hl  ; u2 
3ace			 
3ace					; destroy value TOS 
3ace			 
3ace					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ace cd 03 23			call macro_forth_dsp_pop 
3ad1				endm 
# End of macro FORTH_DSP_POP
3ad1			 
3ad1			 
3ad1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ad1 cd 4b 22			call macro_dsp_valuehl 
3ad4				endm 
# End of macro FORTH_DSP_VALUEHL
3ad4			 
3ad4 e5					push hl    ; u1 
3ad5			 
3ad5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ad5 cd 03 23			call macro_forth_dsp_pop 
3ad8				endm 
# End of macro FORTH_DSP_POP
3ad8			 
3ad8			 
3ad8 b7			 or a      ;clear carry flag 
3ad9 01 00 00		 ld bc, FORTH_FALSE 
3adc e1			  pop hl    ; u1 
3add d1			  pop de    ; u2 
3ade ed 52		  sbc hl,de 
3ae0 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3ae2			 
3ae2 01 01 00		 ld bc, FORTH_TRUE 
3ae5			.gtcont:  
3ae5 c5					push bc 
3ae6 e1					pop hl 
3ae7			 
3ae7					if DEBUG_FORTH_WORDS 
3ae7						DMARK "GT1" 
3ae7 f5				push af  
3ae8 3a fc 3a			ld a, (.dmark)  
3aeb 32 a0 fd			ld (debug_mark),a  
3aee 3a fd 3a			ld a, (.dmark+1)  
3af1 32 a1 fd			ld (debug_mark+1),a  
3af4 3a fe 3a			ld a, (.dmark+2)  
3af7 32 a2 fd			ld (debug_mark+2),a  
3afa 18 03			jr .pastdmark  
3afc ..			.dmark: db "GT1"  
3aff f1			.pastdmark: pop af  
3b00			endm  
# End of macro DMARK
3b00						CALLMONITOR 
3b00 cd aa fd			call debug_vector  
3b03				endm  
# End of macro CALLMONITOR
3b03					endif 
3b03 cd 46 20				call forth_push_numhl 
3b06			 
3b06					NEXTW 
3b06 c3 37 24			jp macro_next 
3b09				endm 
# End of macro NEXTW
3b09			.EQUAL: 
3b09				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3b09 31				db WORD_SYS_CORE+29             
3b0a 74 3b			dw .ENDLOGIC            
3b0c 02				db 1 + 1 
3b0d .. 00			db "=",0              
3b0f				endm 
# End of macro CWHEAD
3b0f			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3b0f				; TODO add floating point number detection 
3b0f					if DEBUG_FORTH_WORDS_KEY 
3b0f						DMARK "EQ." 
3b0f f5				push af  
3b10 3a 24 3b			ld a, (.dmark)  
3b13 32 a0 fd			ld (debug_mark),a  
3b16 3a 25 3b			ld a, (.dmark+1)  
3b19 32 a1 fd			ld (debug_mark+1),a  
3b1c 3a 26 3b			ld a, (.dmark+2)  
3b1f 32 a2 fd			ld (debug_mark+2),a  
3b22 18 03			jr .pastdmark  
3b24 ..			.dmark: db "EQ."  
3b27 f1			.pastdmark: pop af  
3b28			endm  
# End of macro DMARK
3b28						CALLMONITOR 
3b28 cd aa fd			call debug_vector  
3b2b				endm  
# End of macro CALLMONITOR
3b2b					endif 
3b2b					FORTH_DSP 
3b2b cd 11 22			call macro_forth_dsp 
3b2e				endm 
# End of macro FORTH_DSP
3b2e					;v5 FORTH_DSP_VALUE 
3b2e 7e					ld a,(hl)	; get type of value on TOS 
3b2f fe 02				cp DS_TYPE_INUM  
3b31 28 00				jr z, .eq_inum 
3b33			 
3b33				if FORTH_ENABLE_FLOATMATH 
3b33					jr .eq_done 
3b33			 
3b33				endif 
3b33					 
3b33			 
3b33			.eq_inum: 
3b33					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b33 cd 4b 22			call macro_dsp_valuehl 
3b36				endm 
# End of macro FORTH_DSP_VALUEHL
3b36			 
3b36 e5					push hl 
3b37			 
3b37					; destroy value TOS 
3b37			 
3b37					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b37 cd 03 23			call macro_forth_dsp_pop 
3b3a				endm 
# End of macro FORTH_DSP_POP
3b3a			 
3b3a			 
3b3a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b3a cd 4b 22			call macro_dsp_valuehl 
3b3d				endm 
# End of macro FORTH_DSP_VALUEHL
3b3d			 
3b3d					; one value on hl get other one back 
3b3d			 
3b3d e5					push hl 
3b3e			 
3b3e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b3e cd 03 23			call macro_forth_dsp_pop 
3b41				endm 
# End of macro FORTH_DSP_POP
3b41			 
3b41 0e 00				ld c, FORTH_FALSE 
3b43			 
3b43 e1					pop hl 
3b44 d1					pop de 
3b45			 
3b45 7b					ld a, e 
3b46 bd					cp l 
3b47			 
3b47 20 06				jr nz, .eq_done 
3b49			 
3b49 7a					ld a, d 
3b4a bc					cp h 
3b4b			 
3b4b 20 02				jr nz, .eq_done 
3b4d			 
3b4d 0e 01				ld c, FORTH_TRUE 
3b4f					 
3b4f			 
3b4f			 
3b4f			.eq_done: 
3b4f			 
3b4f					; TODO push value back onto stack for another op etc 
3b4f			 
3b4f 26 00				ld h, 0 
3b51 69					ld l, c 
3b52					if DEBUG_FORTH_WORDS 
3b52						DMARK "EQ1" 
3b52 f5				push af  
3b53 3a 67 3b			ld a, (.dmark)  
3b56 32 a0 fd			ld (debug_mark),a  
3b59 3a 68 3b			ld a, (.dmark+1)  
3b5c 32 a1 fd			ld (debug_mark+1),a  
3b5f 3a 69 3b			ld a, (.dmark+2)  
3b62 32 a2 fd			ld (debug_mark+2),a  
3b65 18 03			jr .pastdmark  
3b67 ..			.dmark: db "EQ1"  
3b6a f1			.pastdmark: pop af  
3b6b			endm  
# End of macro DMARK
3b6b						CALLMONITOR 
3b6b cd aa fd			call debug_vector  
3b6e				endm  
# End of macro CALLMONITOR
3b6e					endif 
3b6e cd 46 20				call forth_push_numhl 
3b71			 
3b71					NEXTW 
3b71 c3 37 24			jp macro_next 
3b74				endm 
# End of macro NEXTW
3b74			 
3b74			 
3b74			.ENDLOGIC: 
3b74			; eof 
3b74			 
3b74			 
# End of file forth_words_logic.asm
3b74			include "forth_words_maths.asm" 
3b74			 
3b74			; | ## Maths Words 
3b74			 
3b74			.PLUS:	 
3b74				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3b74 15				db WORD_SYS_CORE+1             
3b75 d2 3b			dw .NEG            
3b77 02				db 1 + 1 
3b78 .. 00			db "+",0              
3b7a				endm 
# End of macro CWHEAD
3b7a			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3b7a					if DEBUG_FORTH_WORDS_KEY 
3b7a						DMARK "PLU" 
3b7a f5				push af  
3b7b 3a 8f 3b			ld a, (.dmark)  
3b7e 32 a0 fd			ld (debug_mark),a  
3b81 3a 90 3b			ld a, (.dmark+1)  
3b84 32 a1 fd			ld (debug_mark+1),a  
3b87 3a 91 3b			ld a, (.dmark+2)  
3b8a 32 a2 fd			ld (debug_mark+2),a  
3b8d 18 03			jr .pastdmark  
3b8f ..			.dmark: db "PLU"  
3b92 f1			.pastdmark: pop af  
3b93			endm  
# End of macro DMARK
3b93						CALLMONITOR 
3b93 cd aa fd			call debug_vector  
3b96				endm  
# End of macro CALLMONITOR
3b96					endif 
3b96					; add top two values and push back result 
3b96			 
3b96					;for v5 FORTH_DSP_VALUE 
3b96					FORTH_DSP 
3b96 cd 11 22			call macro_forth_dsp 
3b99				endm 
# End of macro FORTH_DSP
3b99 7e					ld a,(hl)	; get type of value on TOS 
3b9a fe 02				cp DS_TYPE_INUM  
3b9c 28 03				jr z, .dot_inum 
3b9e			 
3b9e					NEXTW 
3b9e c3 37 24			jp macro_next 
3ba1				endm 
# End of macro NEXTW
3ba1			 
3ba1			; float maths 
3ba1			 
3ba1				if FORTH_ENABLE_FLOATMATH 
3ba1						inc hl      ; now at start of numeric as string 
3ba1			 
3ba1					if DEBUG_FORTH_MATHS 
3ba1						DMARK "ADD" 
3ba1				CALLMONITOR 
3ba1					endif 
3ba1			 
3ba1					;ld ix, hl 
3ba1					call CON 
3ba1			 
3ba1			 
3ba1					push hl 
3ba1					 
3ba1					 
3ba1			 
3ba1						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3ba1			 
3ba1					; get next number 
3ba1			 
3ba1						FORTH_DSP_VALUE 
3ba1			 
3ba1						inc hl      ; now at start of numeric as string 
3ba1			 
3ba1					;ld ix, hl 
3ba1					call CON 
3ba1			 
3ba1					push hl 
3ba1			 
3ba1			 
3ba1						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ba1			 
3ba1						; TODO do add 
3ba1			 
3ba1						call IADD 
3ba1			 
3ba1						; TODO get result back as ascii 
3ba1			 
3ba1						; TODO push result  
3ba1			 
3ba1			 
3ba1			 
3ba1						jr .dot_done 
3ba1				endif 
3ba1			 
3ba1			.dot_inum: 
3ba1			 
3ba1			 
3ba1					if DEBUG_FORTH_DOT 
3ba1						DMARK "+IT" 
3ba1 f5				push af  
3ba2 3a b6 3b			ld a, (.dmark)  
3ba5 32 a0 fd			ld (debug_mark),a  
3ba8 3a b7 3b			ld a, (.dmark+1)  
3bab 32 a1 fd			ld (debug_mark+1),a  
3bae 3a b8 3b			ld a, (.dmark+2)  
3bb1 32 a2 fd			ld (debug_mark+2),a  
3bb4 18 03			jr .pastdmark  
3bb6 ..			.dmark: db "+IT"  
3bb9 f1			.pastdmark: pop af  
3bba			endm  
# End of macro DMARK
3bba				CALLMONITOR 
3bba cd aa fd			call debug_vector  
3bbd				endm  
# End of macro CALLMONITOR
3bbd					endif 
3bbd			 
3bbd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bbd cd 4b 22			call macro_dsp_valuehl 
3bc0				endm 
# End of macro FORTH_DSP_VALUEHL
3bc0			 
3bc0				; TODO add floating point number detection 
3bc0			 
3bc0 e5					push hl 
3bc1			 
3bc1					; destroy value TOS 
3bc1			 
3bc1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bc1 cd 03 23			call macro_forth_dsp_pop 
3bc4				endm 
# End of macro FORTH_DSP_POP
3bc4			 
3bc4			 
3bc4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bc4 cd 4b 22			call macro_dsp_valuehl 
3bc7				endm 
# End of macro FORTH_DSP_VALUEHL
3bc7			 
3bc7					; one value on hl get other one back 
3bc7			 
3bc7 d1					pop de 
3bc8			 
3bc8					; do the add 
3bc8			 
3bc8 19					add hl,de 
3bc9			 
3bc9					; save it 
3bc9			 
3bc9			;		push hl	 
3bc9			 
3bc9					; 
3bc9			 
3bc9					; destroy value TOS 
3bc9			 
3bc9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bc9 cd 03 23			call macro_forth_dsp_pop 
3bcc				endm 
# End of macro FORTH_DSP_POP
3bcc			 
3bcc					; TODO push value back onto stack for another op etc 
3bcc			 
3bcc			;		pop hl 
3bcc			 
3bcc			.dot_done: 
3bcc cd 46 20				call forth_push_numhl 
3bcf			 
3bcf					NEXTW 
3bcf c3 37 24			jp macro_next 
3bd2				endm 
# End of macro NEXTW
3bd2			.NEG: 
3bd2			 
3bd2				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3bd2 17				db WORD_SYS_CORE+3             
3bd3 15 3c			dw .DIV            
3bd5 02				db 1 + 1 
3bd6 .. 00			db "-",0              
3bd8				endm 
# End of macro CWHEAD
3bd8			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3bd8					if DEBUG_FORTH_WORDS_KEY 
3bd8						DMARK "SUB" 
3bd8 f5				push af  
3bd9 3a ed 3b			ld a, (.dmark)  
3bdc 32 a0 fd			ld (debug_mark),a  
3bdf 3a ee 3b			ld a, (.dmark+1)  
3be2 32 a1 fd			ld (debug_mark+1),a  
3be5 3a ef 3b			ld a, (.dmark+2)  
3be8 32 a2 fd			ld (debug_mark+2),a  
3beb 18 03			jr .pastdmark  
3bed ..			.dmark: db "SUB"  
3bf0 f1			.pastdmark: pop af  
3bf1			endm  
# End of macro DMARK
3bf1						CALLMONITOR 
3bf1 cd aa fd			call debug_vector  
3bf4				endm  
# End of macro CALLMONITOR
3bf4					endif 
3bf4			 
3bf4			 
3bf4				; TODO add floating point number detection 
3bf4					; v5 FORTH_DSP_VALUE 
3bf4					FORTH_DSP 
3bf4 cd 11 22			call macro_forth_dsp 
3bf7				endm 
# End of macro FORTH_DSP
3bf7 7e					ld a,(hl)	; get type of value on TOS 
3bf8 fe 02				cp DS_TYPE_INUM  
3bfa 28 03				jr z, .neg_inum 
3bfc			 
3bfc					NEXTW 
3bfc c3 37 24			jp macro_next 
3bff				endm 
# End of macro NEXTW
3bff			 
3bff			; float maths 
3bff			 
3bff				if FORTH_ENABLE_FLOATMATH 
3bff					jr .neg_done 
3bff			 
3bff				endif 
3bff					 
3bff			 
3bff			.neg_inum: 
3bff					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bff cd 4b 22			call macro_dsp_valuehl 
3c02				endm 
# End of macro FORTH_DSP_VALUEHL
3c02			 
3c02 e5					push hl 
3c03			 
3c03					; destroy value TOS 
3c03			 
3c03					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c03 cd 03 23			call macro_forth_dsp_pop 
3c06				endm 
# End of macro FORTH_DSP_POP
3c06			 
3c06			 
3c06					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c06 cd 4b 22			call macro_dsp_valuehl 
3c09				endm 
# End of macro FORTH_DSP_VALUEHL
3c09			 
3c09					; one value on hl get other one back 
3c09			 
3c09 d1					pop de 
3c0a			 
3c0a					; do the sub 
3c0a			;		ex de, hl 
3c0a			 
3c0a ed 52				sbc hl,de 
3c0c			 
3c0c					; save it 
3c0c			 
3c0c			;		push hl	 
3c0c			 
3c0c					; 
3c0c			 
3c0c					; destroy value TOS 
3c0c			 
3c0c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c0c cd 03 23			call macro_forth_dsp_pop 
3c0f				endm 
# End of macro FORTH_DSP_POP
3c0f			 
3c0f					; TODO push value back onto stack for another op etc 
3c0f			 
3c0f			;		pop hl 
3c0f			 
3c0f cd 46 20				call forth_push_numhl 
3c12			.neg_done: 
3c12			 
3c12					NEXTW 
3c12 c3 37 24			jp macro_next 
3c15				endm 
# End of macro NEXTW
3c15			.DIV: 
3c15				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3c15 18				db WORD_SYS_CORE+4             
3c16 62 3c			dw .MUL            
3c18 02				db 1 + 1 
3c19 .. 00			db "/",0              
3c1b				endm 
# End of macro CWHEAD
3c1b			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3c1b					if DEBUG_FORTH_WORDS_KEY 
3c1b						DMARK "DIV" 
3c1b f5				push af  
3c1c 3a 30 3c			ld a, (.dmark)  
3c1f 32 a0 fd			ld (debug_mark),a  
3c22 3a 31 3c			ld a, (.dmark+1)  
3c25 32 a1 fd			ld (debug_mark+1),a  
3c28 3a 32 3c			ld a, (.dmark+2)  
3c2b 32 a2 fd			ld (debug_mark+2),a  
3c2e 18 03			jr .pastdmark  
3c30 ..			.dmark: db "DIV"  
3c33 f1			.pastdmark: pop af  
3c34			endm  
# End of macro DMARK
3c34						CALLMONITOR 
3c34 cd aa fd			call debug_vector  
3c37				endm  
# End of macro CALLMONITOR
3c37					endif 
3c37				; TODO add floating point number detection 
3c37					; v5 FORTH_DSP_VALUE 
3c37					FORTH_DSP 
3c37 cd 11 22			call macro_forth_dsp 
3c3a				endm 
# End of macro FORTH_DSP
3c3a 7e					ld a,(hl)	; get type of value on TOS 
3c3b fe 02				cp DS_TYPE_INUM  
3c3d 28 03				jr z, .div_inum 
3c3f			 
3c3f				if FORTH_ENABLE_FLOATMATH 
3c3f					jr .div_done 
3c3f			 
3c3f				endif 
3c3f					NEXTW 
3c3f c3 37 24			jp macro_next 
3c42				endm 
# End of macro NEXTW
3c42			.div_inum: 
3c42			 
3c42					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c42 cd 4b 22			call macro_dsp_valuehl 
3c45				endm 
# End of macro FORTH_DSP_VALUEHL
3c45			 
3c45 e5					push hl    ; to go to bc 
3c46			 
3c46					; destroy value TOS 
3c46			 
3c46					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c46 cd 03 23			call macro_forth_dsp_pop 
3c49				endm 
# End of macro FORTH_DSP_POP
3c49			 
3c49			 
3c49					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c49 cd 4b 22			call macro_dsp_valuehl 
3c4c				endm 
# End of macro FORTH_DSP_VALUEHL
3c4c			 
3c4c					; hl to go to de 
3c4c			 
3c4c e5					push hl 
3c4d			 
3c4d c1					pop bc 
3c4e d1					pop de		 
3c4f			 
3c4f			 
3c4f					if DEBUG_FORTH_MATHS 
3c4f						DMARK "DIV" 
3c4f				CALLMONITOR 
3c4f					endif 
3c4f					; one value on hl but move to a get other one back 
3c4f			 
3c4f			        
3c4f cd 3b 0f			call Div16 
3c52			 
3c52			;	push af	 
3c52 e5				push hl 
3c53 c5				push bc 
3c54			 
3c54					if DEBUG_FORTH_MATHS 
3c54						DMARK "DI1" 
3c54				CALLMONITOR 
3c54					endif 
3c54			 
3c54					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c54 cd 03 23			call macro_forth_dsp_pop 
3c57				endm 
# End of macro FORTH_DSP_POP
3c57			 
3c57			 
3c57			 
3c57 e1					pop hl    ; result 
3c58			 
3c58 cd 46 20				call forth_push_numhl 
3c5b			 
3c5b e1					pop hl    ; reminder 
3c5c			;		ld h,0 
3c5c			;		ld l,d 
3c5c			 
3c5c cd 46 20				call forth_push_numhl 
3c5f			.div_done: 
3c5f					NEXTW 
3c5f c3 37 24			jp macro_next 
3c62				endm 
# End of macro NEXTW
3c62			.MUL: 
3c62				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3c62 19				db WORD_SYS_CORE+5             
3c63 a7 3c			dw .MIN            
3c65 02				db 1 + 1 
3c66 .. 00			db "*",0              
3c68				endm 
# End of macro CWHEAD
3c68			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3c68				; TODO add floating point number detection 
3c68					if DEBUG_FORTH_WORDS_KEY 
3c68						DMARK "MUL" 
3c68 f5				push af  
3c69 3a 7d 3c			ld a, (.dmark)  
3c6c 32 a0 fd			ld (debug_mark),a  
3c6f 3a 7e 3c			ld a, (.dmark+1)  
3c72 32 a1 fd			ld (debug_mark+1),a  
3c75 3a 7f 3c			ld a, (.dmark+2)  
3c78 32 a2 fd			ld (debug_mark+2),a  
3c7b 18 03			jr .pastdmark  
3c7d ..			.dmark: db "MUL"  
3c80 f1			.pastdmark: pop af  
3c81			endm  
# End of macro DMARK
3c81						CALLMONITOR 
3c81 cd aa fd			call debug_vector  
3c84				endm  
# End of macro CALLMONITOR
3c84					endif 
3c84					FORTH_DSP 
3c84 cd 11 22			call macro_forth_dsp 
3c87				endm 
# End of macro FORTH_DSP
3c87					; v5 FORTH_DSP_VALUE 
3c87 7e					ld a,(hl)	; get type of value on TOS 
3c88 fe 02				cp DS_TYPE_INUM  
3c8a 28 03				jr z, .mul_inum 
3c8c			 
3c8c				if FORTH_ENABLE_FLOATMATH 
3c8c					jr .mul_done 
3c8c			 
3c8c				endif 
3c8c			 
3c8c					NEXTW 
3c8c c3 37 24			jp macro_next 
3c8f				endm 
# End of macro NEXTW
3c8f			.mul_inum:	 
3c8f			 
3c8f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c8f cd 4b 22			call macro_dsp_valuehl 
3c92				endm 
# End of macro FORTH_DSP_VALUEHL
3c92			 
3c92 e5					push hl 
3c93			 
3c93					; destroy value TOS 
3c93			 
3c93					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c93 cd 03 23			call macro_forth_dsp_pop 
3c96				endm 
# End of macro FORTH_DSP_POP
3c96			 
3c96			 
3c96					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c96 cd 4b 22			call macro_dsp_valuehl 
3c99				endm 
# End of macro FORTH_DSP_VALUEHL
3c99			 
3c99					; one value on hl but move to a get other one back 
3c99			 
3c99 7d					ld a, l 
3c9a			 
3c9a d1					pop de 
3c9b			 
3c9b					; do the mull 
3c9b			;		ex de, hl 
3c9b			 
3c9b cd 61 0f				call Mult16 
3c9e					; save it 
3c9e			 
3c9e			;		push hl	 
3c9e			 
3c9e					; 
3c9e			 
3c9e					; destroy value TOS 
3c9e			 
3c9e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c9e cd 03 23			call macro_forth_dsp_pop 
3ca1				endm 
# End of macro FORTH_DSP_POP
3ca1			 
3ca1					; TODO push value back onto stack for another op etc 
3ca1			 
3ca1			;		pop hl 
3ca1			 
3ca1 cd 46 20				call forth_push_numhl 
3ca4			 
3ca4			.mul_done: 
3ca4					NEXTW 
3ca4 c3 37 24			jp macro_next 
3ca7				endm 
# End of macro NEXTW
3ca7			 
3ca7			 
3ca7			 
3ca7			 
3ca7			.MIN: 
3ca7				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3ca7 49				db WORD_SYS_CORE+53             
3ca8 28 3d			dw .MAX            
3caa 04				db 3 + 1 
3cab .. 00			db "MIN",0              
3caf				endm 
# End of macro CWHEAD
3caf			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3caf					if DEBUG_FORTH_WORDS_KEY 
3caf						DMARK "MIN" 
3caf f5				push af  
3cb0 3a c4 3c			ld a, (.dmark)  
3cb3 32 a0 fd			ld (debug_mark),a  
3cb6 3a c5 3c			ld a, (.dmark+1)  
3cb9 32 a1 fd			ld (debug_mark+1),a  
3cbc 3a c6 3c			ld a, (.dmark+2)  
3cbf 32 a2 fd			ld (debug_mark+2),a  
3cc2 18 03			jr .pastdmark  
3cc4 ..			.dmark: db "MIN"  
3cc7 f1			.pastdmark: pop af  
3cc8			endm  
# End of macro DMARK
3cc8						CALLMONITOR 
3cc8 cd aa fd			call debug_vector  
3ccb				endm  
# End of macro CALLMONITOR
3ccb					endif 
3ccb					; get u2 
3ccb			 
3ccb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ccb cd 4b 22			call macro_dsp_valuehl 
3cce				endm 
# End of macro FORTH_DSP_VALUEHL
3cce			 
3cce e5					push hl   ; u2 
3ccf			 
3ccf					; destroy value TOS 
3ccf			 
3ccf					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ccf cd 03 23			call macro_forth_dsp_pop 
3cd2				endm 
# End of macro FORTH_DSP_POP
3cd2			 
3cd2					; get u1 
3cd2			 
3cd2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cd2 cd 4b 22			call macro_dsp_valuehl 
3cd5				endm 
# End of macro FORTH_DSP_VALUEHL
3cd5			 
3cd5 e5					push hl  ; u1 
3cd6			 
3cd6					; destroy value TOS 
3cd6			 
3cd6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cd6 cd 03 23			call macro_forth_dsp_pop 
3cd9				endm 
# End of macro FORTH_DSP_POP
3cd9			 
3cd9 b7			 or a      ;clear carry flag 
3cda e1			  pop hl    ; u1 
3cdb d1			  pop de    ; u2 
3cdc e5				push hl   ; saved in case hl is lowest 
3cdd ed 52		  sbc hl,de 
3cdf 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3ce1			 
3ce1 e1				pop hl 
3ce2					if DEBUG_FORTH_WORDS 
3ce2						DMARK "MIN" 
3ce2 f5				push af  
3ce3 3a f7 3c			ld a, (.dmark)  
3ce6 32 a0 fd			ld (debug_mark),a  
3ce9 3a f8 3c			ld a, (.dmark+1)  
3cec 32 a1 fd			ld (debug_mark+1),a  
3cef 3a f9 3c			ld a, (.dmark+2)  
3cf2 32 a2 fd			ld (debug_mark+2),a  
3cf5 18 03			jr .pastdmark  
3cf7 ..			.dmark: db "MIN"  
3cfa f1			.pastdmark: pop af  
3cfb			endm  
# End of macro DMARK
3cfb						CALLMONITOR 
3cfb cd aa fd			call debug_vector  
3cfe				endm  
# End of macro CALLMONITOR
3cfe					endif 
3cfe cd 46 20				call forth_push_numhl 
3d01			 
3d01				       NEXTW 
3d01 c3 37 24			jp macro_next 
3d04				endm 
# End of macro NEXTW
3d04			 
3d04			.mincont:  
3d04 c1				pop bc   ; tidy up 
3d05 eb				ex de , hl  
3d06					if DEBUG_FORTH_WORDS 
3d06						DMARK "MI1" 
3d06 f5				push af  
3d07 3a 1b 3d			ld a, (.dmark)  
3d0a 32 a0 fd			ld (debug_mark),a  
3d0d 3a 1c 3d			ld a, (.dmark+1)  
3d10 32 a1 fd			ld (debug_mark+1),a  
3d13 3a 1d 3d			ld a, (.dmark+2)  
3d16 32 a2 fd			ld (debug_mark+2),a  
3d19 18 03			jr .pastdmark  
3d1b ..			.dmark: db "MI1"  
3d1e f1			.pastdmark: pop af  
3d1f			endm  
# End of macro DMARK
3d1f						CALLMONITOR 
3d1f cd aa fd			call debug_vector  
3d22				endm  
# End of macro CALLMONITOR
3d22					endif 
3d22 cd 46 20				call forth_push_numhl 
3d25			 
3d25				       NEXTW 
3d25 c3 37 24			jp macro_next 
3d28				endm 
# End of macro NEXTW
3d28			.MAX: 
3d28				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3d28 4a				db WORD_SYS_CORE+54             
3d29 a9 3d			dw .RND16            
3d2b 04				db 3 + 1 
3d2c .. 00			db "MAX",0              
3d30				endm 
# End of macro CWHEAD
3d30			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3d30					if DEBUG_FORTH_WORDS_KEY 
3d30						DMARK "MAX" 
3d30 f5				push af  
3d31 3a 45 3d			ld a, (.dmark)  
3d34 32 a0 fd			ld (debug_mark),a  
3d37 3a 46 3d			ld a, (.dmark+1)  
3d3a 32 a1 fd			ld (debug_mark+1),a  
3d3d 3a 47 3d			ld a, (.dmark+2)  
3d40 32 a2 fd			ld (debug_mark+2),a  
3d43 18 03			jr .pastdmark  
3d45 ..			.dmark: db "MAX"  
3d48 f1			.pastdmark: pop af  
3d49			endm  
# End of macro DMARK
3d49						CALLMONITOR 
3d49 cd aa fd			call debug_vector  
3d4c				endm  
# End of macro CALLMONITOR
3d4c					endif 
3d4c					; get u2 
3d4c			 
3d4c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d4c cd 4b 22			call macro_dsp_valuehl 
3d4f				endm 
# End of macro FORTH_DSP_VALUEHL
3d4f			 
3d4f e5					push hl   ; u2 
3d50			 
3d50					; destroy value TOS 
3d50			 
3d50					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d50 cd 03 23			call macro_forth_dsp_pop 
3d53				endm 
# End of macro FORTH_DSP_POP
3d53			 
3d53					; get u1 
3d53			 
3d53					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d53 cd 4b 22			call macro_dsp_valuehl 
3d56				endm 
# End of macro FORTH_DSP_VALUEHL
3d56			 
3d56 e5					push hl  ; u1 
3d57			 
3d57					; destroy value TOS 
3d57			 
3d57					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d57 cd 03 23			call macro_forth_dsp_pop 
3d5a				endm 
# End of macro FORTH_DSP_POP
3d5a			 
3d5a b7			 or a      ;clear carry flag 
3d5b e1			  pop hl    ; u1 
3d5c d1			  pop de    ; u2 
3d5d e5				push hl   ; saved in case hl is lowest 
3d5e ed 52		  sbc hl,de 
3d60 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3d62			 
3d62 e1				pop hl 
3d63					if DEBUG_FORTH_WORDS 
3d63						DMARK "MAX" 
3d63 f5				push af  
3d64 3a 78 3d			ld a, (.dmark)  
3d67 32 a0 fd			ld (debug_mark),a  
3d6a 3a 79 3d			ld a, (.dmark+1)  
3d6d 32 a1 fd			ld (debug_mark+1),a  
3d70 3a 7a 3d			ld a, (.dmark+2)  
3d73 32 a2 fd			ld (debug_mark+2),a  
3d76 18 03			jr .pastdmark  
3d78 ..			.dmark: db "MAX"  
3d7b f1			.pastdmark: pop af  
3d7c			endm  
# End of macro DMARK
3d7c						CALLMONITOR 
3d7c cd aa fd			call debug_vector  
3d7f				endm  
# End of macro CALLMONITOR
3d7f					endif 
3d7f cd 46 20				call forth_push_numhl 
3d82			 
3d82				       NEXTW 
3d82 c3 37 24			jp macro_next 
3d85				endm 
# End of macro NEXTW
3d85			 
3d85			.maxcont:  
3d85 c1				pop bc   ; tidy up 
3d86 eb				ex de , hl  
3d87					if DEBUG_FORTH_WORDS 
3d87						DMARK "MA1" 
3d87 f5				push af  
3d88 3a 9c 3d			ld a, (.dmark)  
3d8b 32 a0 fd			ld (debug_mark),a  
3d8e 3a 9d 3d			ld a, (.dmark+1)  
3d91 32 a1 fd			ld (debug_mark+1),a  
3d94 3a 9e 3d			ld a, (.dmark+2)  
3d97 32 a2 fd			ld (debug_mark+2),a  
3d9a 18 03			jr .pastdmark  
3d9c ..			.dmark: db "MA1"  
3d9f f1			.pastdmark: pop af  
3da0			endm  
# End of macro DMARK
3da0						CALLMONITOR 
3da0 cd aa fd			call debug_vector  
3da3				endm  
# End of macro CALLMONITOR
3da3					endif 
3da3 cd 46 20				call forth_push_numhl 
3da6				       NEXTW 
3da6 c3 37 24			jp macro_next 
3da9				endm 
# End of macro NEXTW
3da9			 
3da9			.RND16: 
3da9				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3da9 4e				db WORD_SYS_CORE+58             
3daa d8 3d			dw .RND8            
3dac 06				db 5 + 1 
3dad .. 00			db "RND16",0              
3db3				endm 
# End of macro CWHEAD
3db3			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3db3					if DEBUG_FORTH_WORDS_KEY 
3db3						DMARK "R16" 
3db3 f5				push af  
3db4 3a c8 3d			ld a, (.dmark)  
3db7 32 a0 fd			ld (debug_mark),a  
3dba 3a c9 3d			ld a, (.dmark+1)  
3dbd 32 a1 fd			ld (debug_mark+1),a  
3dc0 3a ca 3d			ld a, (.dmark+2)  
3dc3 32 a2 fd			ld (debug_mark+2),a  
3dc6 18 03			jr .pastdmark  
3dc8 ..			.dmark: db "R16"  
3dcb f1			.pastdmark: pop af  
3dcc			endm  
# End of macro DMARK
3dcc						CALLMONITOR 
3dcc cd aa fd			call debug_vector  
3dcf				endm  
# End of macro CALLMONITOR
3dcf					endif 
3dcf cd 05 0f				call prng16  
3dd2 cd 46 20				call forth_push_numhl 
3dd5				       NEXTW 
3dd5 c3 37 24			jp macro_next 
3dd8				endm 
# End of macro NEXTW
3dd8			.RND8: 
3dd8				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3dd8 60				db WORD_SYS_CORE+76             
3dd9 0d 3e			dw .RND            
3ddb 05				db 4 + 1 
3ddc .. 00			db "RND8",0              
3de1				endm 
# End of macro CWHEAD
3de1			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3de1					if DEBUG_FORTH_WORDS_KEY 
3de1						DMARK "RN8" 
3de1 f5				push af  
3de2 3a f6 3d			ld a, (.dmark)  
3de5 32 a0 fd			ld (debug_mark),a  
3de8 3a f7 3d			ld a, (.dmark+1)  
3deb 32 a1 fd			ld (debug_mark+1),a  
3dee 3a f8 3d			ld a, (.dmark+2)  
3df1 32 a2 fd			ld (debug_mark+2),a  
3df4 18 03			jr .pastdmark  
3df6 ..			.dmark: db "RN8"  
3df9 f1			.pastdmark: pop af  
3dfa			endm  
# End of macro DMARK
3dfa						CALLMONITOR 
3dfa cd aa fd			call debug_vector  
3dfd				endm  
# End of macro CALLMONITOR
3dfd					endif 
3dfd 2a de fa				ld hl,(xrandc) 
3e00 23					inc hl 
3e01 cd 1f 0f				call xrnd 
3e04 6f					ld l,a	 
3e05 26 00				ld h,0 
3e07 cd 46 20				call forth_push_numhl 
3e0a				       NEXTW 
3e0a c3 37 24			jp macro_next 
3e0d				endm 
# End of macro NEXTW
3e0d			.RND: 
3e0d				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3e0d 60				db WORD_SYS_CORE+76             
3e0e 13 3f			dw .ENDMATHS            
3e10 04				db 3 + 1 
3e11 .. 00			db "RND",0              
3e15				endm 
# End of macro CWHEAD
3e15			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3e15			 
3e15					if DEBUG_FORTH_WORDS_KEY 
3e15						DMARK "RND" 
3e15 f5				push af  
3e16 3a 2a 3e			ld a, (.dmark)  
3e19 32 a0 fd			ld (debug_mark),a  
3e1c 3a 2b 3e			ld a, (.dmark+1)  
3e1f 32 a1 fd			ld (debug_mark+1),a  
3e22 3a 2c 3e			ld a, (.dmark+2)  
3e25 32 a2 fd			ld (debug_mark+2),a  
3e28 18 03			jr .pastdmark  
3e2a ..			.dmark: db "RND"  
3e2d f1			.pastdmark: pop af  
3e2e			endm  
# End of macro DMARK
3e2e						CALLMONITOR 
3e2e cd aa fd			call debug_vector  
3e31				endm  
# End of macro CALLMONITOR
3e31					endif 
3e31					 
3e31					FORTH_DSP_VALUEHL    ; upper range 
3e31 cd 4b 22			call macro_dsp_valuehl 
3e34				endm 
# End of macro FORTH_DSP_VALUEHL
3e34			 
3e34 22 e2 fa				ld (LFSRSeed), hl	 
3e37			 
3e37					if DEBUG_FORTH_WORDS 
3e37						DMARK "RN1" 
3e37 f5				push af  
3e38 3a 4c 3e			ld a, (.dmark)  
3e3b 32 a0 fd			ld (debug_mark),a  
3e3e 3a 4d 3e			ld a, (.dmark+1)  
3e41 32 a1 fd			ld (debug_mark+1),a  
3e44 3a 4e 3e			ld a, (.dmark+2)  
3e47 32 a2 fd			ld (debug_mark+2),a  
3e4a 18 03			jr .pastdmark  
3e4c ..			.dmark: db "RN1"  
3e4f f1			.pastdmark: pop af  
3e50			endm  
# End of macro DMARK
3e50						CALLMONITOR 
3e50 cd aa fd			call debug_vector  
3e53				endm  
# End of macro CALLMONITOR
3e53					endif 
3e53					FORTH_DSP_POP 
3e53 cd 03 23			call macro_forth_dsp_pop 
3e56				endm 
# End of macro FORTH_DSP_POP
3e56			 
3e56					FORTH_DSP_VALUEHL    ; low range 
3e56 cd 4b 22			call macro_dsp_valuehl 
3e59				endm 
# End of macro FORTH_DSP_VALUEHL
3e59			 
3e59					if DEBUG_FORTH_WORDS 
3e59						DMARK "RN2" 
3e59 f5				push af  
3e5a 3a 6e 3e			ld a, (.dmark)  
3e5d 32 a0 fd			ld (debug_mark),a  
3e60 3a 6f 3e			ld a, (.dmark+1)  
3e63 32 a1 fd			ld (debug_mark+1),a  
3e66 3a 70 3e			ld a, (.dmark+2)  
3e69 32 a2 fd			ld (debug_mark+2),a  
3e6c 18 03			jr .pastdmark  
3e6e ..			.dmark: db "RN2"  
3e71 f1			.pastdmark: pop af  
3e72			endm  
# End of macro DMARK
3e72						CALLMONITOR 
3e72 cd aa fd			call debug_vector  
3e75				endm  
# End of macro CALLMONITOR
3e75					endif 
3e75 22 e4 fa				ld (LFSRSeed+2), hl 
3e78			 
3e78					FORTH_DSP_POP 
3e78 cd 03 23			call macro_forth_dsp_pop 
3e7b				endm 
# End of macro FORTH_DSP_POP
3e7b			 
3e7b e5					push hl 
3e7c			 
3e7c e1			.inrange:	pop hl 
3e7d cd 05 0f				call prng16  
3e80					if DEBUG_FORTH_WORDS 
3e80						DMARK "RN3" 
3e80 f5				push af  
3e81 3a 95 3e			ld a, (.dmark)  
3e84 32 a0 fd			ld (debug_mark),a  
3e87 3a 96 3e			ld a, (.dmark+1)  
3e8a 32 a1 fd			ld (debug_mark+1),a  
3e8d 3a 97 3e			ld a, (.dmark+2)  
3e90 32 a2 fd			ld (debug_mark+2),a  
3e93 18 03			jr .pastdmark  
3e95 ..			.dmark: db "RN3"  
3e98 f1			.pastdmark: pop af  
3e99			endm  
# End of macro DMARK
3e99						CALLMONITOR 
3e99 cd aa fd			call debug_vector  
3e9c				endm  
# End of macro CALLMONITOR
3e9c					endif 
3e9c					 
3e9c					; if the range is 8bit knock out the high byte 
3e9c			 
3e9c ed 5b e2 fa			ld de, (LFSRSeed)     ; check high level 
3ea0			 
3ea0 3e 00				ld a, 0 
3ea2 ba					cp d  
3ea3 20 1e				jr nz, .hirange 
3ea5 26 00				ld h, 0   ; knock it down to 8bit 
3ea7			 
3ea7					if DEBUG_FORTH_WORDS 
3ea7						DMARK "RNk" 
3ea7 f5				push af  
3ea8 3a bc 3e			ld a, (.dmark)  
3eab 32 a0 fd			ld (debug_mark),a  
3eae 3a bd 3e			ld a, (.dmark+1)  
3eb1 32 a1 fd			ld (debug_mark+1),a  
3eb4 3a be 3e			ld a, (.dmark+2)  
3eb7 32 a2 fd			ld (debug_mark+2),a  
3eba 18 03			jr .pastdmark  
3ebc ..			.dmark: db "RNk"  
3ebf f1			.pastdmark: pop af  
3ec0			endm  
# End of macro DMARK
3ec0						CALLMONITOR 
3ec0 cd aa fd			call debug_vector  
3ec3				endm  
# End of macro CALLMONITOR
3ec3					endif 
3ec3			.hirange:   
3ec3 e5					push hl  
3ec4 b7					or a  
3ec5 ed 52		                sbc hl, de 
3ec7			 
3ec7					;call cmp16 
3ec7			 
3ec7 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3ec9 e1					pop hl 
3eca e5					push hl 
3ecb			 
3ecb					if DEBUG_FORTH_WORDS 
3ecb						DMARK "RN4" 
3ecb f5				push af  
3ecc 3a e0 3e			ld a, (.dmark)  
3ecf 32 a0 fd			ld (debug_mark),a  
3ed2 3a e1 3e			ld a, (.dmark+1)  
3ed5 32 a1 fd			ld (debug_mark+1),a  
3ed8 3a e2 3e			ld a, (.dmark+2)  
3edb 32 a2 fd			ld (debug_mark+2),a  
3ede 18 03			jr .pastdmark  
3ee0 ..			.dmark: db "RN4"  
3ee3 f1			.pastdmark: pop af  
3ee4			endm  
# End of macro DMARK
3ee4						CALLMONITOR 
3ee4 cd aa fd			call debug_vector  
3ee7				endm  
# End of macro CALLMONITOR
3ee7					endif 
3ee7 ed 5b e4 fa			ld de, (LFSRSeed+2)   ; check low range 
3eeb					;call cmp16 
3eeb				 
3eeb b7					or a  
3eec ed 52		                sbc hl, de 
3eee 38 8c				jr c, .inrange 
3ef0			 
3ef0 e1					pop hl 
3ef1					 
3ef1					if DEBUG_FORTH_WORDS 
3ef1						DMARK "RNd" 
3ef1 f5				push af  
3ef2 3a 06 3f			ld a, (.dmark)  
3ef5 32 a0 fd			ld (debug_mark),a  
3ef8 3a 07 3f			ld a, (.dmark+1)  
3efb 32 a1 fd			ld (debug_mark+1),a  
3efe 3a 08 3f			ld a, (.dmark+2)  
3f01 32 a2 fd			ld (debug_mark+2),a  
3f04 18 03			jr .pastdmark  
3f06 ..			.dmark: db "RNd"  
3f09 f1			.pastdmark: pop af  
3f0a			endm  
# End of macro DMARK
3f0a						CALLMONITOR 
3f0a cd aa fd			call debug_vector  
3f0d				endm  
# End of macro CALLMONITOR
3f0d					endif 
3f0d			 
3f0d			 
3f0d cd 46 20				call forth_push_numhl 
3f10				       NEXTW 
3f10 c3 37 24			jp macro_next 
3f13				endm 
# End of macro NEXTW
3f13			 
3f13			.ENDMATHS: 
3f13			 
3f13			; eof 
3f13			 
# End of file forth_words_maths.asm
3f13			include "forth_words_display.asm" 
3f13			 
3f13			; | ## Display Words 
3f13			 
3f13			.ACT: 
3f13			 
3f13				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3f13 62				db WORD_SYS_CORE+78             
3f14 5f 3f			dw .INFO            
3f16 07				db 6 + 1 
3f17 .. 00			db "ACTIVE",0              
3f1e				endm 
# End of macro CWHEAD
3f1e			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3f1e			;  
3f1e			; | | To display a pulsing activity indicator in a processing loop do this... 
3f1e			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3f1e			 
3f1e					if DEBUG_FORTH_WORDS_KEY 
3f1e						DMARK "ACT" 
3f1e f5				push af  
3f1f 3a 33 3f			ld a, (.dmark)  
3f22 32 a0 fd			ld (debug_mark),a  
3f25 3a 34 3f			ld a, (.dmark+1)  
3f28 32 a1 fd			ld (debug_mark+1),a  
3f2b 3a 35 3f			ld a, (.dmark+2)  
3f2e 32 a2 fd			ld (debug_mark+2),a  
3f31 18 03			jr .pastdmark  
3f33 ..			.dmark: db "ACT"  
3f36 f1			.pastdmark: pop af  
3f37			endm  
# End of macro DMARK
3f37						CALLMONITOR 
3f37 cd aa fd			call debug_vector  
3f3a				endm  
# End of macro CALLMONITOR
3f3a					endif 
3f3a cd 01 0d				call active 
3f3d					if DEBUG_FORTH_WORDS 
3f3d						DMARK "ACp" 
3f3d f5				push af  
3f3e 3a 52 3f			ld a, (.dmark)  
3f41 32 a0 fd			ld (debug_mark),a  
3f44 3a 53 3f			ld a, (.dmark+1)  
3f47 32 a1 fd			ld (debug_mark+1),a  
3f4a 3a 54 3f			ld a, (.dmark+2)  
3f4d 32 a2 fd			ld (debug_mark+2),a  
3f50 18 03			jr .pastdmark  
3f52 ..			.dmark: db "ACp"  
3f55 f1			.pastdmark: pop af  
3f56			endm  
# End of macro DMARK
3f56						CALLMONITOR 
3f56 cd aa fd			call debug_vector  
3f59				endm  
# End of macro CALLMONITOR
3f59					endif 
3f59 cd b4 20				call forth_push_str 
3f5c			 
3f5c					NEXTW 
3f5c c3 37 24			jp macro_next 
3f5f				endm 
# End of macro NEXTW
3f5f			.INFO: 
3f5f			 
3f5f				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3f5f 62				db WORD_SYS_CORE+78             
3f60 7c 3f			dw .ATP            
3f62 05				db 4 + 1 
3f63 .. 00			db "INFO",0              
3f68				endm 
# End of macro CWHEAD
3f68			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3f68					FORTH_DSP_VALUEHL 
3f68 cd 4b 22			call macro_dsp_valuehl 
3f6b				endm 
# End of macro FORTH_DSP_VALUEHL
3f6b			 
3f6b					FORTH_DSP_POP 
3f6b cd 03 23			call macro_forth_dsp_pop 
3f6e				endm 
# End of macro FORTH_DSP_POP
3f6e			 
3f6e e5					push hl 
3f6f			 
3f6f					FORTH_DSP_VALUEHL 
3f6f cd 4b 22			call macro_dsp_valuehl 
3f72				endm 
# End of macro FORTH_DSP_VALUEHL
3f72			 
3f72					FORTH_DSP_POP 
3f72 cd 03 23			call macro_forth_dsp_pop 
3f75				endm 
# End of macro FORTH_DSP_POP
3f75			 
3f75 d1					pop de 
3f76			 
3f76 cd 3b 0d				call info_panel 
3f79			 
3f79			 
3f79					NEXTW 
3f79 c3 37 24			jp macro_next 
3f7c				endm 
# End of macro NEXTW
3f7c			.ATP: 
3f7c				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3f7c 62				db WORD_SYS_CORE+78             
3f7d f3 3f			dw .FB            
3f7f 04				db 3 + 1 
3f80 .. 00			db "AT?",0              
3f84				endm 
# End of macro CWHEAD
3f84			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3f84					if DEBUG_FORTH_WORDS_KEY 
3f84						DMARK "AT?" 
3f84 f5				push af  
3f85 3a 99 3f			ld a, (.dmark)  
3f88 32 a0 fd			ld (debug_mark),a  
3f8b 3a 9a 3f			ld a, (.dmark+1)  
3f8e 32 a1 fd			ld (debug_mark+1),a  
3f91 3a 9b 3f			ld a, (.dmark+2)  
3f94 32 a2 fd			ld (debug_mark+2),a  
3f97 18 03			jr .pastdmark  
3f99 ..			.dmark: db "AT?"  
3f9c f1			.pastdmark: pop af  
3f9d			endm  
# End of macro DMARK
3f9d						CALLMONITOR 
3f9d cd aa fd			call debug_vector  
3fa0				endm  
# End of macro CALLMONITOR
3fa0					endif 
3fa0 3a 93 f9				ld a, (f_cursor_ptr) 
3fa3			 
3fa3			if DEBUG_FORTH_WORDS 
3fa3				DMARK "AT?" 
3fa3 f5				push af  
3fa4 3a b8 3f			ld a, (.dmark)  
3fa7 32 a0 fd			ld (debug_mark),a  
3faa 3a b9 3f			ld a, (.dmark+1)  
3fad 32 a1 fd			ld (debug_mark+1),a  
3fb0 3a ba 3f			ld a, (.dmark+2)  
3fb3 32 a2 fd			ld (debug_mark+2),a  
3fb6 18 03			jr .pastdmark  
3fb8 ..			.dmark: db "AT?"  
3fbb f1			.pastdmark: pop af  
3fbc			endm  
# End of macro DMARK
3fbc				CALLMONITOR 
3fbc cd aa fd			call debug_vector  
3fbf				endm  
# End of macro CALLMONITOR
3fbf			endif	 
3fbf					; count the number of rows 
3fbf			 
3fbf 06 00				ld b, 0 
3fc1 4f			.atpr:		ld c, a    ; save in case we go below zero 
3fc2 d6 28				sub display_cols 
3fc4 f2 ca 3f				jp p, .atprunder 
3fc7 04					inc b 
3fc8 18 f7				jr .atpr 
3fca			.atprunder:	 
3fca			if DEBUG_FORTH_WORDS 
3fca				DMARK "A?2" 
3fca f5				push af  
3fcb 3a df 3f			ld a, (.dmark)  
3fce 32 a0 fd			ld (debug_mark),a  
3fd1 3a e0 3f			ld a, (.dmark+1)  
3fd4 32 a1 fd			ld (debug_mark+1),a  
3fd7 3a e1 3f			ld a, (.dmark+2)  
3fda 32 a2 fd			ld (debug_mark+2),a  
3fdd 18 03			jr .pastdmark  
3fdf ..			.dmark: db "A?2"  
3fe2 f1			.pastdmark: pop af  
3fe3			endm  
# End of macro DMARK
3fe3				CALLMONITOR 
3fe3 cd aa fd			call debug_vector  
3fe6				endm  
# End of macro CALLMONITOR
3fe6			endif	 
3fe6 26 00				ld h, 0 
3fe8 69					ld l, c 
3fe9 cd 46 20				call forth_push_numhl 
3fec 68					ld l, b  
3fed cd 46 20				call forth_push_numhl 
3ff0			 
3ff0			 
3ff0				NEXTW 
3ff0 c3 37 24			jp macro_next 
3ff3				endm 
# End of macro NEXTW
3ff3			 
3ff3			.FB: 
3ff3				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3ff3 1b				db WORD_SYS_CORE+7             
3ff4 41 40			dw .EMIT            
3ff6 03				db 2 + 1 
3ff7 .. 00			db "FB",0              
3ffa				endm 
# End of macro CWHEAD
3ffa			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3ffa			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3ffa			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3ffa			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3ffa					if DEBUG_FORTH_WORDS_KEY 
3ffa						DMARK "FB." 
3ffa f5				push af  
3ffb 3a 0f 40			ld a, (.dmark)  
3ffe 32 a0 fd			ld (debug_mark),a  
4001 3a 10 40			ld a, (.dmark+1)  
4004 32 a1 fd			ld (debug_mark+1),a  
4007 3a 11 40			ld a, (.dmark+2)  
400a 32 a2 fd			ld (debug_mark+2),a  
400d 18 03			jr .pastdmark  
400f ..			.dmark: db "FB."  
4012 f1			.pastdmark: pop af  
4013			endm  
# End of macro DMARK
4013						CALLMONITOR 
4013 cd aa fd			call debug_vector  
4016				endm  
# End of macro CALLMONITOR
4016					endif 
4016			 
4016					FORTH_DSP_VALUEHL 
4016 cd 4b 22			call macro_dsp_valuehl 
4019				endm 
# End of macro FORTH_DSP_VALUEHL
4019			 
4019 7d					ld a, l 
401a fe 01				cp 1 
401c 20 05				jr nz, .fbn1 
401e 21 45 fc				ld hl, display_fb1 
4021 18 15				jr .fbset 
4023 fe 02		.fbn1:		cp 2 
4025 20 05				jr nz, .fbn2 
4027 21 03 fb				ld hl, display_fb2 
402a 18 0c				jr .fbset 
402c fe 03		.fbn2:		cp 3 
402e 20 05				jr nz, .fbn3 
4030 21 a4 fb				ld hl, display_fb3 
4033 18 03				jr .fbset 
4035			.fbn3:		 ; if invalid number select first 
4035 21 45 fc				ld hl, display_fb1 
4038 22 01 fb		.fbset:		ld (display_fb_active), hl 
403b			 
403b					FORTH_DSP_POP 
403b cd 03 23			call macro_forth_dsp_pop 
403e				endm 
# End of macro FORTH_DSP_POP
403e			 
403e					NEXTW 
403e c3 37 24			jp macro_next 
4041				endm 
# End of macro NEXTW
4041			 
4041			 
4041			.EMIT: 
4041				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
4041 1b				db WORD_SYS_CORE+7             
4042 92 40			dw .DOTH            
4044 05				db 4 + 1 
4045 .. 00			db "EMIT",0              
404a				endm 
# End of macro CWHEAD
404a			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
404a					; get value off TOS and display it 
404a			 
404a					if DEBUG_FORTH_WORDS_KEY 
404a						DMARK "EMT" 
404a f5				push af  
404b 3a 5f 40			ld a, (.dmark)  
404e 32 a0 fd			ld (debug_mark),a  
4051 3a 60 40			ld a, (.dmark+1)  
4054 32 a1 fd			ld (debug_mark+1),a  
4057 3a 61 40			ld a, (.dmark+2)  
405a 32 a2 fd			ld (debug_mark+2),a  
405d 18 03			jr .pastdmark  
405f ..			.dmark: db "EMT"  
4062 f1			.pastdmark: pop af  
4063			endm  
# End of macro DMARK
4063						CALLMONITOR 
4063 cd aa fd			call debug_vector  
4066				endm  
# End of macro CALLMONITOR
4066					endif 
4066			 
4066					FORTH_DSP_VALUEHL 
4066 cd 4b 22			call macro_dsp_valuehl 
4069				endm 
# End of macro FORTH_DSP_VALUEHL
4069			 
4069 7d					ld a,l 
406a			 
406a					; TODO write to display 
406a			 
406a 32 f4 f2				ld (os_input), a 
406d 3e 00				ld a, 0 
406f 32 f5 f2				ld (os_input+1), a 
4072					 
4072 3a 93 f9				ld a, (f_cursor_ptr) 
4075 11 f4 f2				ld de, os_input 
4078 cd bd 0d				call str_at_display 
407b			 
407b			 
407b 3a 71 f9				ld a,(cli_autodisplay) 
407e fe 00				cp 0 
4080 28 03				jr z, .enoupdate 
4082 cd cd 0d						call update_display 
4085					.enoupdate: 
4085			 
4085 3a 93 f9				ld a, (f_cursor_ptr) 
4088 3c					inc a 
4089 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
408c			 
408c			 
408c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
408c cd 03 23			call macro_forth_dsp_pop 
408f				endm 
# End of macro FORTH_DSP_POP
408f			  
408f			 
408f					NEXTW 
408f c3 37 24			jp macro_next 
4092				endm 
# End of macro NEXTW
4092			.DOTH: 
4092				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
4092 1c				db WORD_SYS_CORE+8             
4093 c2 40			dw .DOTF            
4095 03				db 2 + 1 
4096 .. 00			db ".-",0              
4099				endm 
# End of macro CWHEAD
4099			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
4099					; get value off TOS and display it 
4099					if DEBUG_FORTH_WORDS_KEY 
4099						DMARK "DTD" 
4099 f5				push af  
409a 3a ae 40			ld a, (.dmark)  
409d 32 a0 fd			ld (debug_mark),a  
40a0 3a af 40			ld a, (.dmark+1)  
40a3 32 a1 fd			ld (debug_mark+1),a  
40a6 3a b0 40			ld a, (.dmark+2)  
40a9 32 a2 fd			ld (debug_mark+2),a  
40ac 18 03			jr .pastdmark  
40ae ..			.dmark: db "DTD"  
40b1 f1			.pastdmark: pop af  
40b2			endm  
# End of macro DMARK
40b2						CALLMONITOR 
40b2 cd aa fd			call debug_vector  
40b5				endm  
# End of macro CALLMONITOR
40b5					endif 
40b5 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
40b7 3e 00			ld a, 0 
40b9 32 72 f9			ld (cli_mvdot), a 
40bc c3 19 41			jp .dotgo 
40bf				NEXTW 
40bf c3 37 24			jp macro_next 
40c2				endm 
# End of macro NEXTW
40c2			.DOTF: 
40c2				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
40c2 1c				db WORD_SYS_CORE+8             
40c3 f0 40			dw .DOT            
40c5 03				db 2 + 1 
40c6 .. 00			db ".>",0              
40c9				endm 
# End of macro CWHEAD
40c9			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
40c9					; get value off TOS and display it 
40c9			        ; TODO BUG adds extra spaces 
40c9			        ; TODO BUG handle numerics? 
40c9					if DEBUG_FORTH_WORDS_KEY 
40c9						DMARK "DTC" 
40c9 f5				push af  
40ca 3a de 40			ld a, (.dmark)  
40cd 32 a0 fd			ld (debug_mark),a  
40d0 3a df 40			ld a, (.dmark+1)  
40d3 32 a1 fd			ld (debug_mark+1),a  
40d6 3a e0 40			ld a, (.dmark+2)  
40d9 32 a2 fd			ld (debug_mark+2),a  
40dc 18 03			jr .pastdmark  
40de ..			.dmark: db "DTC"  
40e1 f1			.pastdmark: pop af  
40e2			endm  
# End of macro DMARK
40e2						CALLMONITOR 
40e2 cd aa fd			call debug_vector  
40e5				endm  
# End of macro CALLMONITOR
40e5					endif 
40e5 3e 01			ld a, 1 
40e7 32 72 f9			ld (cli_mvdot), a 
40ea c3 19 41			jp .dotgo 
40ed				NEXTW 
40ed c3 37 24			jp macro_next 
40f0				endm 
# End of macro NEXTW
40f0			 
40f0			.DOT: 
40f0				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
40f0 1c				db WORD_SYS_CORE+8             
40f1 cc 42			dw .CLS            
40f3 02				db 1 + 1 
40f4 .. 00			db ".",0              
40f6				endm 
# End of macro CWHEAD
40f6			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
40f6					; get value off TOS and display it 
40f6			 
40f6					if DEBUG_FORTH_WORDS_KEY 
40f6						DMARK "DOT" 
40f6 f5				push af  
40f7 3a 0b 41			ld a, (.dmark)  
40fa 32 a0 fd			ld (debug_mark),a  
40fd 3a 0c 41			ld a, (.dmark+1)  
4100 32 a1 fd			ld (debug_mark+1),a  
4103 3a 0d 41			ld a, (.dmark+2)  
4106 32 a2 fd			ld (debug_mark+2),a  
4109 18 03			jr .pastdmark  
410b ..			.dmark: db "DOT"  
410e f1			.pastdmark: pop af  
410f			endm  
# End of macro DMARK
410f						CALLMONITOR 
410f cd aa fd			call debug_vector  
4112				endm  
# End of macro CALLMONITOR
4112					endif 
4112 3e 00			ld a, 0 
4114 32 72 f9			ld (cli_mvdot), a 
4117 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
4119				 
4119			 
4119			.dotgo: 
4119			 
4119			; move up type to on stack for parserv5 
4119					FORTH_DSP 
4119 cd 11 22			call macro_forth_dsp 
411c				endm 
# End of macro FORTH_DSP
411c				;FORTH_DSP_VALUE  
411c			 
411c			if DEBUG_FORTH_DOT 
411c				DMARK "DOT" 
411c f5				push af  
411d 3a 31 41			ld a, (.dmark)  
4120 32 a0 fd			ld (debug_mark),a  
4123 3a 32 41			ld a, (.dmark+1)  
4126 32 a1 fd			ld (debug_mark+1),a  
4129 3a 33 41			ld a, (.dmark+2)  
412c 32 a2 fd			ld (debug_mark+2),a  
412f 18 03			jr .pastdmark  
4131 ..			.dmark: db "DOT"  
4134 f1			.pastdmark: pop af  
4135			endm  
# End of macro DMARK
4135				CALLMONITOR 
4135 cd aa fd			call debug_vector  
4138				endm  
# End of macro CALLMONITOR
4138			endif	 
4138			;		.print: 
4138			 
4138 7e				ld a,(hl)  ; work out what type of value is on the TOS 
4139 23				inc hl   ; position to the actual value 
413a fe 01			cp DS_TYPE_STR 
413c 20 06			jr nz, .dotnum1  
413e			 
413e			; display string 
413e				FORTH_DSP_VALUE  
413e cd 34 22			call macro_forth_dsp_value 
4141				endm 
# End of macro FORTH_DSP_VALUE
4141 eb				ex de,hl 
4142 18 49			jr .dotwrite 
4144			 
4144			.dotnum1: 
4144 fe 02			cp DS_TYPE_INUM 
4146 20 44			jr nz, .dotflot 
4148			 
4148			 
4148			; display number 
4148			 
4148			;	push hl 
4148			;	call clear_display 
4148			;	pop hl 
4148			 
4148 5e				ld e, (hl) 
4149 23				inc hl 
414a 56				ld d, (hl) 
414b 21 f6 f0			ld hl, scratch 
414e			if DEBUG_FORTH_DOT 
414e				DMARK "DT1" 
414e f5				push af  
414f 3a 63 41			ld a, (.dmark)  
4152 32 a0 fd			ld (debug_mark),a  
4155 3a 64 41			ld a, (.dmark+1)  
4158 32 a1 fd			ld (debug_mark+1),a  
415b 3a 65 41			ld a, (.dmark+2)  
415e 32 a2 fd			ld (debug_mark+2),a  
4161 18 03			jr .pastdmark  
4163 ..			.dmark: db "DT1"  
4166 f1			.pastdmark: pop af  
4167			endm  
# End of macro DMARK
4167				CALLMONITOR 
4167 cd aa fd			call debug_vector  
416a				endm  
# End of macro CALLMONITOR
416a			endif	 
416a			 
416a cd f3 12			call uitoa_16 
416d eb				ex de,hl 
416e			 
416e			if DEBUG_FORTH_DOT 
416e				DMARK "DT2" 
416e f5				push af  
416f 3a 83 41			ld a, (.dmark)  
4172 32 a0 fd			ld (debug_mark),a  
4175 3a 84 41			ld a, (.dmark+1)  
4178 32 a1 fd			ld (debug_mark+1),a  
417b 3a 85 41			ld a, (.dmark+2)  
417e 32 a2 fd			ld (debug_mark+2),a  
4181 18 03			jr .pastdmark  
4183 ..			.dmark: db "DT2"  
4186 f1			.pastdmark: pop af  
4187			endm  
# End of macro DMARK
4187				CALLMONITOR 
4187 cd aa fd			call debug_vector  
418a				endm  
# End of macro CALLMONITOR
418a			endif	 
418a			 
418a			;	ld de, os_word_scratch 
418a 18 01			jr .dotwrite 
418c			 
418c 00			.dotflot:   nop 
418d			; TODO print floating point number 
418d			 
418d			.dotwrite:		 
418d			 
418d					; if c is set then set all '-' to spaces 
418d					; need to also take into account .>  
418d			 
418d 3e 01				ld a, 1 
418f b9					cp c 
4190 20 67				jr nz, .nodashswap 
4192			 
4192					; DE has the string to write, working with HL 
4192			 
4192 06 ff				ld b, 255 
4194 d5					push de 
4195 e1					pop hl 
4196			 
4196			if DEBUG_FORTH_DOT 
4196				DMARK "DT-" 
4196 f5				push af  
4197 3a ab 41			ld a, (.dmark)  
419a 32 a0 fd			ld (debug_mark),a  
419d 3a ac 41			ld a, (.dmark+1)  
41a0 32 a1 fd			ld (debug_mark+1),a  
41a3 3a ad 41			ld a, (.dmark+2)  
41a6 32 a2 fd			ld (debug_mark+2),a  
41a9 18 03			jr .pastdmark  
41ab ..			.dmark: db "DT-"  
41ae f1			.pastdmark: pop af  
41af			endm  
# End of macro DMARK
41af				CALLMONITOR 
41af cd aa fd			call debug_vector  
41b2				endm  
# End of macro CALLMONITOR
41b2			endif	 
41b2 7e			.dashscan:	ld a, (hl) 
41b3 fe 00				cp 0 
41b5 28 42				jr z, .nodashswap 
41b7 fe 2d				cp '-' 
41b9 20 03				jr nz, .dashskip 
41bb 3e 20				ld a, ' ' 
41bd 77					ld (hl), a 
41be 23			.dashskip:	inc hl 
41bf			if DEBUG_FORTH_DOT 
41bf				DMARK "D-2" 
41bf f5				push af  
41c0 3a d4 41			ld a, (.dmark)  
41c3 32 a0 fd			ld (debug_mark),a  
41c6 3a d5 41			ld a, (.dmark+1)  
41c9 32 a1 fd			ld (debug_mark+1),a  
41cc 3a d6 41			ld a, (.dmark+2)  
41cf 32 a2 fd			ld (debug_mark+2),a  
41d2 18 03			jr .pastdmark  
41d4 ..			.dmark: db "D-2"  
41d7 f1			.pastdmark: pop af  
41d8			endm  
# End of macro DMARK
41d8				CALLMONITOR 
41d8 cd aa fd			call debug_vector  
41db				endm  
# End of macro CALLMONITOR
41db			endif	 
41db 10 d5				djnz .dashscan 
41dd			 
41dd			if DEBUG_FORTH_DOT 
41dd				DMARK "D-1" 
41dd f5				push af  
41de 3a f2 41			ld a, (.dmark)  
41e1 32 a0 fd			ld (debug_mark),a  
41e4 3a f3 41			ld a, (.dmark+1)  
41e7 32 a1 fd			ld (debug_mark+1),a  
41ea 3a f4 41			ld a, (.dmark+2)  
41ed 32 a2 fd			ld (debug_mark+2),a  
41f0 18 03			jr .pastdmark  
41f2 ..			.dmark: db "D-1"  
41f5 f1			.pastdmark: pop af  
41f6			endm  
# End of macro DMARK
41f6				CALLMONITOR 
41f6 cd aa fd			call debug_vector  
41f9				endm  
# End of macro CALLMONITOR
41f9			endif	 
41f9			 
41f9			.nodashswap: 
41f9			 
41f9			if DEBUG_FORTH_DOT 
41f9				DMARK "D-o" 
41f9 f5				push af  
41fa 3a 0e 42			ld a, (.dmark)  
41fd 32 a0 fd			ld (debug_mark),a  
4200 3a 0f 42			ld a, (.dmark+1)  
4203 32 a1 fd			ld (debug_mark+1),a  
4206 3a 10 42			ld a, (.dmark+2)  
4209 32 a2 fd			ld (debug_mark+2),a  
420c 18 03			jr .pastdmark  
420e ..			.dmark: db "D-o"  
4211 f1			.pastdmark: pop af  
4212			endm  
# End of macro DMARK
4212				CALLMONITOR 
4212 cd aa fd			call debug_vector  
4215				endm  
# End of macro CALLMONITOR
4215			endif	 
4215			 
4215 d5					push de   ; save string start in case we need to advance print 
4216			 
4216 3a 93 f9				ld a, (f_cursor_ptr) 
4219 cd bd 0d				call str_at_display 
421c 3a 71 f9				ld a,(cli_autodisplay) 
421f fe 00				cp 0 
4221 28 03				jr z, .noupdate 
4223 cd cd 0d						call update_display 
4226					.noupdate: 
4226			 
4226			 
4226					; see if we need to advance the print position 
4226			 
4226 e1					pop hl   ; get back string 
4227			;		ex de,hl 
4227			 
4227 3a 72 f9				ld a, (cli_mvdot) 
422a			if DEBUG_FORTH_DOT 
422a			;		ld e,a 
422a				DMARK "D>1" 
422a f5				push af  
422b 3a 3f 42			ld a, (.dmark)  
422e 32 a0 fd			ld (debug_mark),a  
4231 3a 40 42			ld a, (.dmark+1)  
4234 32 a1 fd			ld (debug_mark+1),a  
4237 3a 41 42			ld a, (.dmark+2)  
423a 32 a2 fd			ld (debug_mark+2),a  
423d 18 03			jr .pastdmark  
423f ..			.dmark: db "D>1"  
4242 f1			.pastdmark: pop af  
4243			endm  
# End of macro DMARK
4243				CALLMONITOR 
4243 cd aa fd			call debug_vector  
4246				endm  
# End of macro CALLMONITOR
4246			endif	 
4246 fe 00				cp 0 
4248 28 44				jr z, .noadv 
424a					; yes, lets advance the print position 
424a 3e 00				ld a, 0 
424c cd 4f 13				call strlent 
424f			if DEBUG_FORTH_DOT 
424f				DMARK "D-?" 
424f f5				push af  
4250 3a 64 42			ld a, (.dmark)  
4253 32 a0 fd			ld (debug_mark),a  
4256 3a 65 42			ld a, (.dmark+1)  
4259 32 a1 fd			ld (debug_mark+1),a  
425c 3a 66 42			ld a, (.dmark+2)  
425f 32 a2 fd			ld (debug_mark+2),a  
4262 18 03			jr .pastdmark  
4264 ..			.dmark: db "D-?"  
4267 f1			.pastdmark: pop af  
4268			endm  
# End of macro DMARK
4268				CALLMONITOR 
4268 cd aa fd			call debug_vector  
426b				endm  
# End of macro CALLMONITOR
426b			endif	 
426b 3a 93 f9				ld a, (f_cursor_ptr) 
426e 85					add a,l 
426f					;call addatohl 
426f					;ld a, l 
426f 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
4272			 
4272			if DEBUG_FORTH_DOT 
4272				DMARK "D->" 
4272 f5				push af  
4273 3a 87 42			ld a, (.dmark)  
4276 32 a0 fd			ld (debug_mark),a  
4279 3a 88 42			ld a, (.dmark+1)  
427c 32 a1 fd			ld (debug_mark+1),a  
427f 3a 89 42			ld a, (.dmark+2)  
4282 32 a2 fd			ld (debug_mark+2),a  
4285 18 03			jr .pastdmark  
4287 ..			.dmark: db "D->"  
428a f1			.pastdmark: pop af  
428b			endm  
# End of macro DMARK
428b				CALLMONITOR 
428b cd aa fd			call debug_vector  
428e				endm  
# End of macro CALLMONITOR
428e			endif	 
428e			 
428e			.noadv:	 
428e			 
428e					if DEBUG_FORTH_DOT_WAIT 
428e							call next_page_prompt 
428e					endif	 
428e			; TODO this pop off the stack causes a crash. i dont know why 
428e			 
428e			 
428e			if DEBUG_FORTH_DOT 
428e				DMARK "DTh" 
428e f5				push af  
428f 3a a3 42			ld a, (.dmark)  
4292 32 a0 fd			ld (debug_mark),a  
4295 3a a4 42			ld a, (.dmark+1)  
4298 32 a1 fd			ld (debug_mark+1),a  
429b 3a a5 42			ld a, (.dmark+2)  
429e 32 a2 fd			ld (debug_mark+2),a  
42a1 18 03			jr .pastdmark  
42a3 ..			.dmark: db "DTh"  
42a6 f1			.pastdmark: pop af  
42a7			endm  
# End of macro DMARK
42a7				CALLMONITOR 
42a7 cd aa fd			call debug_vector  
42aa				endm  
# End of macro CALLMONITOR
42aa			endif	 
42aa			 
42aa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42aa cd 03 23			call macro_forth_dsp_pop 
42ad				endm 
# End of macro FORTH_DSP_POP
42ad			 
42ad			if DEBUG_FORTH_DOT 
42ad				DMARK "DTi" 
42ad f5				push af  
42ae 3a c2 42			ld a, (.dmark)  
42b1 32 a0 fd			ld (debug_mark),a  
42b4 3a c3 42			ld a, (.dmark+1)  
42b7 32 a1 fd			ld (debug_mark+1),a  
42ba 3a c4 42			ld a, (.dmark+2)  
42bd 32 a2 fd			ld (debug_mark+2),a  
42c0 18 03			jr .pastdmark  
42c2 ..			.dmark: db "DTi"  
42c5 f1			.pastdmark: pop af  
42c6			endm  
# End of macro DMARK
42c6				CALLMONITOR 
42c6 cd aa fd			call debug_vector  
42c9				endm  
# End of macro CALLMONITOR
42c9			endif	 
42c9			 
42c9			 
42c9					NEXTW 
42c9 c3 37 24			jp macro_next 
42cc				endm 
# End of macro NEXTW
42cc			 
42cc			.CLS: 
42cc				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
42cc 35				db WORD_SYS_CORE+33             
42cd f9 42			dw .DRAW            
42cf 04				db 3 + 1 
42d0 .. 00			db "CLS",0              
42d4				endm 
# End of macro CWHEAD
42d4			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
42d4					if DEBUG_FORTH_WORDS_KEY 
42d4						DMARK "CLS" 
42d4 f5				push af  
42d5 3a e9 42			ld a, (.dmark)  
42d8 32 a0 fd			ld (debug_mark),a  
42db 3a ea 42			ld a, (.dmark+1)  
42de 32 a1 fd			ld (debug_mark+1),a  
42e1 3a eb 42			ld a, (.dmark+2)  
42e4 32 a2 fd			ld (debug_mark+2),a  
42e7 18 03			jr .pastdmark  
42e9 ..			.dmark: db "CLS"  
42ec f1			.pastdmark: pop af  
42ed			endm  
# End of macro DMARK
42ed						CALLMONITOR 
42ed cd aa fd			call debug_vector  
42f0				endm  
# End of macro CALLMONITOR
42f0					endif 
42f0 cd aa 0d				call clear_display 
42f3 c3 07 44				jp .home		; and home cursor 
42f6					NEXTW 
42f6 c3 37 24			jp macro_next 
42f9				endm 
# End of macro NEXTW
42f9			 
42f9			.DRAW: 
42f9				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
42f9 36				db WORD_SYS_CORE+34             
42fa 24 43			dw .DUMP            
42fc 05				db 4 + 1 
42fd .. 00			db "DRAW",0              
4302				endm 
# End of macro CWHEAD
4302			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
4302					if DEBUG_FORTH_WORDS_KEY 
4302						DMARK "DRW" 
4302 f5				push af  
4303 3a 17 43			ld a, (.dmark)  
4306 32 a0 fd			ld (debug_mark),a  
4309 3a 18 43			ld a, (.dmark+1)  
430c 32 a1 fd			ld (debug_mark+1),a  
430f 3a 19 43			ld a, (.dmark+2)  
4312 32 a2 fd			ld (debug_mark+2),a  
4315 18 03			jr .pastdmark  
4317 ..			.dmark: db "DRW"  
431a f1			.pastdmark: pop af  
431b			endm  
# End of macro DMARK
431b						CALLMONITOR 
431b cd aa fd			call debug_vector  
431e				endm  
# End of macro CALLMONITOR
431e					endif 
431e cd cd 0d				call update_display 
4321					NEXTW 
4321 c3 37 24			jp macro_next 
4324				endm 
# End of macro NEXTW
4324			 
4324			.DUMP: 
4324				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
4324 37				db WORD_SYS_CORE+35             
4325 5c 43			dw .CDUMP            
4327 05				db 4 + 1 
4328 .. 00			db "DUMP",0              
432d				endm 
# End of macro CWHEAD
432d			; | DUMP ( x -- ) With address x display dump   | DONE 
432d			; TODO pop address to use off of the stack 
432d					if DEBUG_FORTH_WORDS_KEY 
432d						DMARK "DUM" 
432d f5				push af  
432e 3a 42 43			ld a, (.dmark)  
4331 32 a0 fd			ld (debug_mark),a  
4334 3a 43 43			ld a, (.dmark+1)  
4337 32 a1 fd			ld (debug_mark+1),a  
433a 3a 44 43			ld a, (.dmark+2)  
433d 32 a2 fd			ld (debug_mark+2),a  
4340 18 03			jr .pastdmark  
4342 ..			.dmark: db "DUM"  
4345 f1			.pastdmark: pop af  
4346			endm  
# End of macro DMARK
4346						CALLMONITOR 
4346 cd aa fd			call debug_vector  
4349				endm  
# End of macro CALLMONITOR
4349					endif 
4349 cd aa 0d				call clear_display 
434c			 
434c					; get address 
434c			 
434c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
434c cd 4b 22			call macro_dsp_valuehl 
434f				endm 
# End of macro FORTH_DSP_VALUEHL
434f				 
434f					; save it for cdump 
434f			 
434f 22 19 f4				ld (os_cur_ptr),hl 
4352			 
4352					; destroy value TOS 
4352			 
4352					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4352 cd 03 23			call macro_forth_dsp_pop 
4355				endm 
# End of macro FORTH_DSP_POP
4355			 
4355 cd c6 1e				call dumpcont	; skip old style of param parsing	 
4358 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
4359					NEXTW 
4359 c3 37 24			jp macro_next 
435c				endm 
# End of macro NEXTW
435c			.CDUMP: 
435c				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
435c 38				db WORD_SYS_CORE+36             
435d 8c 43			dw .DAT            
435f 06				db 5 + 1 
4360 .. 00			db "CDUMP",0              
4366				endm 
# End of macro CWHEAD
4366			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
4366					if DEBUG_FORTH_WORDS_KEY 
4366						DMARK "CDP" 
4366 f5				push af  
4367 3a 7b 43			ld a, (.dmark)  
436a 32 a0 fd			ld (debug_mark),a  
436d 3a 7c 43			ld a, (.dmark+1)  
4370 32 a1 fd			ld (debug_mark+1),a  
4373 3a 7d 43			ld a, (.dmark+2)  
4376 32 a2 fd			ld (debug_mark+2),a  
4379 18 03			jr .pastdmark  
437b ..			.dmark: db "CDP"  
437e f1			.pastdmark: pop af  
437f			endm  
# End of macro DMARK
437f						CALLMONITOR 
437f cd aa fd			call debug_vector  
4382				endm  
# End of macro CALLMONITOR
4382					endif 
4382 cd aa 0d				call clear_display 
4385 cd c6 1e				call dumpcont	 
4388 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
4389					NEXTW 
4389 c3 37 24			jp macro_next 
438c				endm 
# End of macro NEXTW
438c			 
438c			 
438c			 
438c			 
438c			.DAT: 
438c				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
438c 3d				db WORD_SYS_CORE+41             
438d e2 43			dw .HOME            
438f 03				db 2 + 1 
4390 .. 00			db "AT",0              
4393				endm 
# End of macro CWHEAD
4393			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
4393					if DEBUG_FORTH_WORDS_KEY 
4393						DMARK "AT." 
4393 f5				push af  
4394 3a a8 43			ld a, (.dmark)  
4397 32 a0 fd			ld (debug_mark),a  
439a 3a a9 43			ld a, (.dmark+1)  
439d 32 a1 fd			ld (debug_mark+1),a  
43a0 3a aa 43			ld a, (.dmark+2)  
43a3 32 a2 fd			ld (debug_mark+2),a  
43a6 18 03			jr .pastdmark  
43a8 ..			.dmark: db "AT."  
43ab f1			.pastdmark: pop af  
43ac			endm  
# End of macro DMARK
43ac						CALLMONITOR 
43ac cd aa fd			call debug_vector  
43af				endm  
# End of macro CALLMONITOR
43af					endif 
43af					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
43af cd 4b 22			call macro_dsp_valuehl 
43b2				endm 
# End of macro FORTH_DSP_VALUEHL
43b2			 
43b2			 
43b2					; TODO save cursor row 
43b2 7d					ld a,l 
43b3 fe 02				cp 2 
43b5 20 04				jr nz, .crow3 
43b7 3e 28				ld a, display_row_2 
43b9 18 12				jr .ccol1 
43bb fe 03		.crow3:		cp 3 
43bd 20 04				jr nz, .crow4 
43bf 3e 50				ld a, display_row_3 
43c1 18 0a				jr .ccol1 
43c3 fe 04		.crow4:		cp 4 
43c5 20 04				jr nz, .crow1 
43c7 3e 78				ld a, display_row_4 
43c9 18 02				jr .ccol1 
43cb 3e 00		.crow1:		ld a,display_row_1 
43cd f5			.ccol1:		push af			; got row offset 
43ce 6f					ld l,a 
43cf 26 00				ld h,0 
43d1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
43d1 cd 03 23			call macro_forth_dsp_pop 
43d4				endm 
# End of macro FORTH_DSP_POP
43d4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
43d4 cd 4b 22			call macro_dsp_valuehl 
43d7				endm 
# End of macro FORTH_DSP_VALUEHL
43d7					; TODO save cursor col 
43d7 f1					pop af 
43d8 85					add l		; add col offset 
43d9 32 93 f9				ld (f_cursor_ptr), a 
43dc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
43dc cd 03 23			call macro_forth_dsp_pop 
43df				endm 
# End of macro FORTH_DSP_POP
43df			 
43df					; calculate  
43df			 
43df					NEXTW 
43df c3 37 24			jp macro_next 
43e2				endm 
# End of macro NEXTW
43e2			 
43e2			 
43e2			.HOME: 
43e2				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
43e2 41				db WORD_SYS_CORE+45             
43e3 0f 44			dw .CR            
43e5 05				db 4 + 1 
43e6 .. 00			db "HOME",0              
43eb				endm 
# End of macro CWHEAD
43eb			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
43eb					if DEBUG_FORTH_WORDS_KEY 
43eb						DMARK "HOM" 
43eb f5				push af  
43ec 3a 00 44			ld a, (.dmark)  
43ef 32 a0 fd			ld (debug_mark),a  
43f2 3a 01 44			ld a, (.dmark+1)  
43f5 32 a1 fd			ld (debug_mark+1),a  
43f8 3a 02 44			ld a, (.dmark+2)  
43fb 32 a2 fd			ld (debug_mark+2),a  
43fe 18 03			jr .pastdmark  
4400 ..			.dmark: db "HOM"  
4403 f1			.pastdmark: pop af  
4404			endm  
# End of macro DMARK
4404						CALLMONITOR 
4404 cd aa fd			call debug_vector  
4407				endm  
# End of macro CALLMONITOR
4407					endif 
4407 3e 00		.home:		ld a, 0		; and home cursor 
4409 32 93 f9				ld (f_cursor_ptr), a 
440c					NEXTW 
440c c3 37 24			jp macro_next 
440f				endm 
# End of macro NEXTW
440f			 
440f			 
440f			.CR: 
440f				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
440f 46				db WORD_SYS_CORE+50             
4410 4a 44			dw .SPACE            
4412 03				db 2 + 1 
4413 .. 00			db "CR",0              
4416				endm 
# End of macro CWHEAD
4416			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
4416					if DEBUG_FORTH_WORDS_KEY 
4416						DMARK "CR." 
4416 f5				push af  
4417 3a 2b 44			ld a, (.dmark)  
441a 32 a0 fd			ld (debug_mark),a  
441d 3a 2c 44			ld a, (.dmark+1)  
4420 32 a1 fd			ld (debug_mark+1),a  
4423 3a 2d 44			ld a, (.dmark+2)  
4426 32 a2 fd			ld (debug_mark+2),a  
4429 18 03			jr .pastdmark  
442b ..			.dmark: db "CR."  
442e f1			.pastdmark: pop af  
442f			endm  
# End of macro DMARK
442f						CALLMONITOR 
442f cd aa fd			call debug_vector  
4432				endm  
# End of macro CALLMONITOR
4432					endif 
4432 3e 0d				ld a, 13 
4434 32 f6 f0				ld (scratch),a 
4437 3e 0a				ld a, 10 
4439 32 f7 f0				ld (scratch+1),a 
443c 3e 00				ld a, 0 
443e 32 f8 f0				ld (scratch+2),a 
4441 21 f6 f0				ld hl, scratch 
4444 cd b4 20				call forth_push_str 
4447					 
4447				       NEXTW 
4447 c3 37 24			jp macro_next 
444a				endm 
# End of macro NEXTW
444a			.SPACE: 
444a				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
444a 46				db WORD_SYS_CORE+50             
444b 80 44			dw .SPACES            
444d 03				db 2 + 1 
444e .. 00			db "BL",0              
4451				endm 
# End of macro CWHEAD
4451			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
4451					if DEBUG_FORTH_WORDS_KEY 
4451						DMARK "BL." 
4451 f5				push af  
4452 3a 66 44			ld a, (.dmark)  
4455 32 a0 fd			ld (debug_mark),a  
4458 3a 67 44			ld a, (.dmark+1)  
445b 32 a1 fd			ld (debug_mark+1),a  
445e 3a 68 44			ld a, (.dmark+2)  
4461 32 a2 fd			ld (debug_mark+2),a  
4464 18 03			jr .pastdmark  
4466 ..			.dmark: db "BL."  
4469 f1			.pastdmark: pop af  
446a			endm  
# End of macro DMARK
446a						CALLMONITOR 
446a cd aa fd			call debug_vector  
446d				endm  
# End of macro CALLMONITOR
446d					endif 
446d 3e 20				ld a, " " 
446f 32 f6 f0				ld (scratch),a 
4472 3e 00				ld a, 0 
4474 32 f7 f0				ld (scratch+1),a 
4477 21 f6 f0				ld hl, scratch 
447a cd b4 20				call forth_push_str 
447d					 
447d				       NEXTW 
447d c3 37 24			jp macro_next 
4480				endm 
# End of macro NEXTW
4480			 
4480			;.blstr: db " ", 0 
4480			 
4480			.SPACES: 
4480				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
4480 47				db WORD_SYS_CORE+51             
4481 1b 45			dw .SCROLL            
4483 07				db 6 + 1 
4484 .. 00			db "SPACES",0              
448b				endm 
# End of macro CWHEAD
448b			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
448b					if DEBUG_FORTH_WORDS_KEY 
448b						DMARK "SPS" 
448b f5				push af  
448c 3a a0 44			ld a, (.dmark)  
448f 32 a0 fd			ld (debug_mark),a  
4492 3a a1 44			ld a, (.dmark+1)  
4495 32 a1 fd			ld (debug_mark+1),a  
4498 3a a2 44			ld a, (.dmark+2)  
449b 32 a2 fd			ld (debug_mark+2),a  
449e 18 03			jr .pastdmark  
44a0 ..			.dmark: db "SPS"  
44a3 f1			.pastdmark: pop af  
44a4			endm  
# End of macro DMARK
44a4						CALLMONITOR 
44a4 cd aa fd			call debug_vector  
44a7				endm  
# End of macro CALLMONITOR
44a7					endif 
44a7			 
44a7			 
44a7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
44a7 cd 4b 22			call macro_dsp_valuehl 
44aa				endm 
# End of macro FORTH_DSP_VALUEHL
44aa			 
44aa e5					push hl    ; u 
44ab					if DEBUG_FORTH_WORDS 
44ab						DMARK "SPA" 
44ab f5				push af  
44ac 3a c0 44			ld a, (.dmark)  
44af 32 a0 fd			ld (debug_mark),a  
44b2 3a c1 44			ld a, (.dmark+1)  
44b5 32 a1 fd			ld (debug_mark+1),a  
44b8 3a c2 44			ld a, (.dmark+2)  
44bb 32 a2 fd			ld (debug_mark+2),a  
44be 18 03			jr .pastdmark  
44c0 ..			.dmark: db "SPA"  
44c3 f1			.pastdmark: pop af  
44c4			endm  
# End of macro DMARK
44c4						CALLMONITOR 
44c4 cd aa fd			call debug_vector  
44c7				endm  
# End of macro CALLMONITOR
44c7					endif 
44c7			 
44c7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44c7 cd 03 23			call macro_forth_dsp_pop 
44ca				endm 
# End of macro FORTH_DSP_POP
44ca e1					pop hl 
44cb 0e 00				ld c, 0 
44cd 45					ld b, l 
44ce 21 f6 f0				ld hl, scratch  
44d1			 
44d1					if DEBUG_FORTH_WORDS 
44d1						DMARK "SP2" 
44d1 f5				push af  
44d2 3a e6 44			ld a, (.dmark)  
44d5 32 a0 fd			ld (debug_mark),a  
44d8 3a e7 44			ld a, (.dmark+1)  
44db 32 a1 fd			ld (debug_mark+1),a  
44de 3a e8 44			ld a, (.dmark+2)  
44e1 32 a2 fd			ld (debug_mark+2),a  
44e4 18 03			jr .pastdmark  
44e6 ..			.dmark: db "SP2"  
44e9 f1			.pastdmark: pop af  
44ea			endm  
# End of macro DMARK
44ea						CALLMONITOR 
44ea cd aa fd			call debug_vector  
44ed				endm  
# End of macro CALLMONITOR
44ed					endif 
44ed 3e 20				ld a, ' ' 
44ef			.spaces1:	 
44ef 77					ld (hl),a 
44f0 23					inc hl 
44f1					 
44f1 10 fc				djnz .spaces1 
44f3 3e 00				ld a,0 
44f5 77					ld (hl),a 
44f6 21 f6 f0				ld hl, scratch 
44f9					if DEBUG_FORTH_WORDS 
44f9						DMARK "SP3" 
44f9 f5				push af  
44fa 3a 0e 45			ld a, (.dmark)  
44fd 32 a0 fd			ld (debug_mark),a  
4500 3a 0f 45			ld a, (.dmark+1)  
4503 32 a1 fd			ld (debug_mark+1),a  
4506 3a 10 45			ld a, (.dmark+2)  
4509 32 a2 fd			ld (debug_mark+2),a  
450c 18 03			jr .pastdmark  
450e ..			.dmark: db "SP3"  
4511 f1			.pastdmark: pop af  
4512			endm  
# End of macro DMARK
4512						CALLMONITOR 
4512 cd aa fd			call debug_vector  
4515				endm  
# End of macro CALLMONITOR
4515					endif 
4515 cd b4 20				call forth_push_str 
4518			 
4518				       NEXTW 
4518 c3 37 24			jp macro_next 
451b				endm 
# End of macro NEXTW
451b			 
451b			 
451b			 
451b			.SCROLL: 
451b				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
451b 53				db WORD_SYS_CORE+63             
451c 48 45			dw .SCROLLD            
451e 07				db 6 + 1 
451f .. 00			db "SCROLL",0              
4526				endm 
# End of macro CWHEAD
4526			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
4526					if DEBUG_FORTH_WORDS_KEY 
4526						DMARK "SCR" 
4526 f5				push af  
4527 3a 3b 45			ld a, (.dmark)  
452a 32 a0 fd			ld (debug_mark),a  
452d 3a 3c 45			ld a, (.dmark+1)  
4530 32 a1 fd			ld (debug_mark+1),a  
4533 3a 3d 45			ld a, (.dmark+2)  
4536 32 a2 fd			ld (debug_mark+2),a  
4539 18 03			jr .pastdmark  
453b ..			.dmark: db "SCR"  
453e f1			.pastdmark: pop af  
453f			endm  
# End of macro DMARK
453f						CALLMONITOR 
453f cd aa fd			call debug_vector  
4542				endm  
# End of macro CALLMONITOR
4542					endif 
4542			 
4542 cd 6c 0d			call scroll_up 
4545			;	call update_display 
4545			 
4545					NEXTW 
4545 c3 37 24			jp macro_next 
4548				endm 
# End of macro NEXTW
4548			 
4548			 
4548			 
4548			;		; get dir 
4548			; 
4548			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4548			; 
4548			;		push hl 
4548			; 
4548			;		; destroy value TOS 
4548			; 
4548			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4548			; 
4548			;		; get count 
4548			; 
4548			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4548			; 
4548			;		push hl 
4548			; 
4548			;		; destroy value TOS 
4548			; 
4548			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4548			; 
4548			;		; one value on hl get other one back 
4548			; 
4548			;		pop bc    ; count 
4548			; 
4548			;		pop de   ; dir 
4548			; 
4548			; 
4548			;		ld b, c 
4548			; 
4548			;.scrolldir:     push bc 
4548			;		push de 
4548			; 
4548			;		ld a, 0 
4548			;		cp e 
4548			;		jr z, .scrollup  
4548			;		call scroll_down 
4548			;		jr .scrollnext 
4548			;.scrollup:	call scroll_up 
4548			; 
4548			;		 
4548			;.scrollnext: 
4548			;		pop de 
4548			;		pop bc 
4548			;		djnz .scrolldir 
4548			; 
4548			; 
4548			; 
4548			; 
4548			; 
4548			;		NEXTW 
4548			 
4548			.SCROLLD: 
4548				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4548 53				db WORD_SYS_CORE+63             
4549 76 45			dw .ATQ            
454b 08				db 7 + 1 
454c .. 00			db "SCROLLD",0              
4554				endm 
# End of macro CWHEAD
4554			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
4554					if DEBUG_FORTH_WORDS_KEY 
4554						DMARK "SCD" 
4554 f5				push af  
4555 3a 69 45			ld a, (.dmark)  
4558 32 a0 fd			ld (debug_mark),a  
455b 3a 6a 45			ld a, (.dmark+1)  
455e 32 a1 fd			ld (debug_mark+1),a  
4561 3a 6b 45			ld a, (.dmark+2)  
4564 32 a2 fd			ld (debug_mark+2),a  
4567 18 03			jr .pastdmark  
4569 ..			.dmark: db "SCD"  
456c f1			.pastdmark: pop af  
456d			endm  
# End of macro DMARK
456d						CALLMONITOR 
456d cd aa fd			call debug_vector  
4570				endm  
# End of macro CALLMONITOR
4570					endif 
4570			 
4570 cd 90 0d			call scroll_down 
4573			;	call update_display 
4573			 
4573					NEXTW 
4573 c3 37 24			jp macro_next 
4576				endm 
# End of macro NEXTW
4576			 
4576			 
4576			.ATQ: 
4576				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4576 62				db WORD_SYS_CORE+78             
4577 d4 45			dw .AUTODSP            
4579 04				db 3 + 1 
457a .. 00			db "AT@",0              
457e				endm 
# End of macro CWHEAD
457e			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
457e					if DEBUG_FORTH_WORDS_KEY 
457e						DMARK "ATA" 
457e f5				push af  
457f 3a 93 45			ld a, (.dmark)  
4582 32 a0 fd			ld (debug_mark),a  
4585 3a 94 45			ld a, (.dmark+1)  
4588 32 a1 fd			ld (debug_mark+1),a  
458b 3a 95 45			ld a, (.dmark+2)  
458e 32 a2 fd			ld (debug_mark+2),a  
4591 18 03			jr .pastdmark  
4593 ..			.dmark: db "ATA"  
4596 f1			.pastdmark: pop af  
4597			endm  
# End of macro DMARK
4597						CALLMONITOR 
4597 cd aa fd			call debug_vector  
459a				endm  
# End of macro CALLMONITOR
459a					endif 
459a			 
459a			 
459a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
459a cd 4b 22			call macro_dsp_valuehl 
459d				endm 
# End of macro FORTH_DSP_VALUEHL
459d			 
459d					; TODO save cursor row 
459d 7d					ld a,l 
459e fe 02				cp 2 
45a0 20 04				jr nz, .crow3aq 
45a2 3e 28				ld a, display_row_2 
45a4 18 12				jr .ccol1aq 
45a6 fe 03		.crow3aq:		cp 3 
45a8 20 04				jr nz, .crow4aq 
45aa 3e 50				ld a, display_row_3 
45ac 18 0a				jr .ccol1aq 
45ae fe 04		.crow4aq:		cp 4 
45b0 20 04				jr nz, .crow1aq 
45b2 3e 78				ld a, display_row_4 
45b4 18 02				jr .ccol1aq 
45b6 3e 00		.crow1aq:		ld a,display_row_1 
45b8 f5			.ccol1aq:		push af			; got row offset 
45b9 6f					ld l,a 
45ba 26 00				ld h,0 
45bc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45bc cd 03 23			call macro_forth_dsp_pop 
45bf				endm 
# End of macro FORTH_DSP_POP
45bf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45bf cd 4b 22			call macro_dsp_valuehl 
45c2				endm 
# End of macro FORTH_DSP_VALUEHL
45c2					; TODO save cursor col 
45c2 f1					pop af 
45c3 85					add l		; add col offset 
45c4			 
45c4					; add current frame buffer address 
45c4 2a 01 fb				ld hl, (display_fb_active) 
45c7 cd de 0f				call addatohl 
45ca			 
45ca			 
45ca			 
45ca			 
45ca					; get char frame buffer location offset in hl 
45ca			 
45ca 7e					ld a,(hl) 
45cb 26 00				ld h, 0 
45cd 6f					ld l, a 
45ce			 
45ce cd 46 20				call forth_push_numhl 
45d1			 
45d1			 
45d1					NEXTW 
45d1 c3 37 24			jp macro_next 
45d4				endm 
# End of macro NEXTW
45d4			 
45d4			.AUTODSP: 
45d4				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
45d4 63				db WORD_SYS_CORE+79             
45d5 ea 45			dw .MENU            
45d7 05				db 4 + 1 
45d8 .. 00			db "ADSP",0              
45dd				endm 
# End of macro CWHEAD
45dd			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
45dd			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
45dd			 
45dd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45dd cd 4b 22			call macro_dsp_valuehl 
45e0				endm 
# End of macro FORTH_DSP_VALUEHL
45e0			 
45e0			;		push hl 
45e0			 
45e0					; destroy value TOS 
45e0			 
45e0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45e0 cd 03 23			call macro_forth_dsp_pop 
45e3				endm 
# End of macro FORTH_DSP_POP
45e3			 
45e3			;		pop hl 
45e3			 
45e3 7d					ld a,l 
45e4 32 71 f9				ld (cli_autodisplay), a 
45e7				       NEXTW 
45e7 c3 37 24			jp macro_next 
45ea				endm 
# End of macro NEXTW
45ea			 
45ea			.MENU: 
45ea				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
45ea 70				db WORD_SYS_CORE+92             
45eb 93 46			dw .ENDDISPLAY            
45ed 05				db 4 + 1 
45ee .. 00			db "MENU",0              
45f3				endm 
# End of macro CWHEAD
45f3			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
45f3			 
45f3			;		; get number of items on the stack 
45f3			; 
45f3				 
45f3					FORTH_DSP_VALUEHL 
45f3 cd 4b 22			call macro_dsp_valuehl 
45f6				endm 
# End of macro FORTH_DSP_VALUEHL
45f6				 
45f6					if DEBUG_FORTH_WORDS_KEY 
45f6						DMARK "MNU" 
45f6 f5				push af  
45f7 3a 0b 46			ld a, (.dmark)  
45fa 32 a0 fd			ld (debug_mark),a  
45fd 3a 0c 46			ld a, (.dmark+1)  
4600 32 a1 fd			ld (debug_mark+1),a  
4603 3a 0d 46			ld a, (.dmark+2)  
4606 32 a2 fd			ld (debug_mark+2),a  
4609 18 03			jr .pastdmark  
460b ..			.dmark: db "MNU"  
460e f1			.pastdmark: pop af  
460f			endm  
# End of macro DMARK
460f						CALLMONITOR 
460f cd aa fd			call debug_vector  
4612				endm  
# End of macro CALLMONITOR
4612					endif 
4612			 
4612 45					ld b, l	 
4613 05					dec b 
4614			 
4614					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4614 cd 03 23			call macro_forth_dsp_pop 
4617				endm 
# End of macro FORTH_DSP_POP
4617			 
4617			 
4617					; go directly through the stack to pluck out the string pointers and build an array 
4617			 
4617			;		FORTH_DSP 
4617			 
4617					; hl contains top most stack item 
4617				 
4617 11 f6 f0				ld de, scratch 
461a			 
461a			.mbuild: 
461a			 
461a					FORTH_DSP_VALUEHL 
461a cd 4b 22			call macro_dsp_valuehl 
461d				endm 
# End of macro FORTH_DSP_VALUEHL
461d			 
461d					if DEBUG_FORTH_WORDS 
461d						DMARK "MN3" 
461d f5				push af  
461e 3a 32 46			ld a, (.dmark)  
4621 32 a0 fd			ld (debug_mark),a  
4624 3a 33 46			ld a, (.dmark+1)  
4627 32 a1 fd			ld (debug_mark+1),a  
462a 3a 34 46			ld a, (.dmark+2)  
462d 32 a2 fd			ld (debug_mark+2),a  
4630 18 03			jr .pastdmark  
4632 ..			.dmark: db "MN3"  
4635 f1			.pastdmark: pop af  
4636			endm  
# End of macro DMARK
4636						CALLMONITOR 
4636 cd aa fd			call debug_vector  
4639				endm  
# End of macro CALLMONITOR
4639					endif 
4639 eb					ex de, hl 
463a 73					ld (hl), e 
463b 23					inc hl 
463c 72					ld (hl), d 
463d 23					inc hl 
463e eb					ex de, hl 
463f			 
463f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
463f cd 03 23			call macro_forth_dsp_pop 
4642				endm 
# End of macro FORTH_DSP_POP
4642			 
4642 10 d6				djnz .mbuild 
4644			 
4644					; done add term 
4644			 
4644 eb					ex de, hl 
4645 36 00				ld (hl), 0 
4647 23					inc hl 
4648 36 00				ld (hl), 0 
464a			 
464a				 
464a					 
464a 21 f6 f0				ld hl, scratch 
464d			 
464d					if DEBUG_FORTH_WORDS 
464d						DMARK "MNx" 
464d f5				push af  
464e 3a 62 46			ld a, (.dmark)  
4651 32 a0 fd			ld (debug_mark),a  
4654 3a 63 46			ld a, (.dmark+1)  
4657 32 a1 fd			ld (debug_mark+1),a  
465a 3a 64 46			ld a, (.dmark+2)  
465d 32 a2 fd			ld (debug_mark+2),a  
4660 18 03			jr .pastdmark  
4662 ..			.dmark: db "MNx"  
4665 f1			.pastdmark: pop af  
4666			endm  
# End of macro DMARK
4666						CALLMONITOR 
4666 cd aa fd			call debug_vector  
4669				endm  
# End of macro CALLMONITOR
4669					endif 
4669			 
4669			 
4669			 
4669 3e 00				ld a, 0 
466b cd db 0d				call menu 
466e			 
466e			 
466e 6f					ld l, a 
466f 26 00				ld h, 0 
4671			 
4671					if DEBUG_FORTH_WORDS 
4671						DMARK "MNr" 
4671 f5				push af  
4672 3a 86 46			ld a, (.dmark)  
4675 32 a0 fd			ld (debug_mark),a  
4678 3a 87 46			ld a, (.dmark+1)  
467b 32 a1 fd			ld (debug_mark+1),a  
467e 3a 88 46			ld a, (.dmark+2)  
4681 32 a2 fd			ld (debug_mark+2),a  
4684 18 03			jr .pastdmark  
4686 ..			.dmark: db "MNr"  
4689 f1			.pastdmark: pop af  
468a			endm  
# End of macro DMARK
468a						CALLMONITOR 
468a cd aa fd			call debug_vector  
468d				endm  
# End of macro CALLMONITOR
468d					endif 
468d			 
468d cd 46 20				call forth_push_numhl 
4690			 
4690			 
4690			 
4690			 
4690				       NEXTW 
4690 c3 37 24			jp macro_next 
4693				endm 
# End of macro NEXTW
4693			 
4693			 
4693			.ENDDISPLAY: 
4693			 
4693			; eof 
# End of file forth_words_display.asm
4693			include "forth_words_str.asm" 
4693			 
4693			; | ## String Words 
4693			 
4693			.PTR:   
4693			 
4693				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
4693 48				db WORD_SYS_CORE+52             
4694 c0 46			dw .STYPE            
4696 04				db 3 + 1 
4697 .. 00			db "PTR",0              
469b				endm 
# End of macro CWHEAD
469b			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
469b			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
469b			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
469b			 
469b					if DEBUG_FORTH_WORDS_KEY 
469b						DMARK "PTR" 
469b f5				push af  
469c 3a b0 46			ld a, (.dmark)  
469f 32 a0 fd			ld (debug_mark),a  
46a2 3a b1 46			ld a, (.dmark+1)  
46a5 32 a1 fd			ld (debug_mark+1),a  
46a8 3a b2 46			ld a, (.dmark+2)  
46ab 32 a2 fd			ld (debug_mark+2),a  
46ae 18 03			jr .pastdmark  
46b0 ..			.dmark: db "PTR"  
46b3 f1			.pastdmark: pop af  
46b4			endm  
# End of macro DMARK
46b4						CALLMONITOR 
46b4 cd aa fd			call debug_vector  
46b7				endm  
# End of macro CALLMONITOR
46b7					endif 
46b7					FORTH_DSP_VALUEHL 
46b7 cd 4b 22			call macro_dsp_valuehl 
46ba				endm 
# End of macro FORTH_DSP_VALUEHL
46ba cd 46 20				call forth_push_numhl 
46bd			 
46bd			 
46bd					NEXTW 
46bd c3 37 24			jp macro_next 
46c0				endm 
# End of macro NEXTW
46c0			.STYPE: 
46c0				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
46c0 48				db WORD_SYS_CORE+52             
46c1 0f 47			dw .UPPER            
46c3 06				db 5 + 1 
46c4 .. 00			db "STYPE",0              
46ca				endm 
# End of macro CWHEAD
46ca			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
46ca					if DEBUG_FORTH_WORDS_KEY 
46ca						DMARK "STY" 
46ca f5				push af  
46cb 3a df 46			ld a, (.dmark)  
46ce 32 a0 fd			ld (debug_mark),a  
46d1 3a e0 46			ld a, (.dmark+1)  
46d4 32 a1 fd			ld (debug_mark+1),a  
46d7 3a e1 46			ld a, (.dmark+2)  
46da 32 a2 fd			ld (debug_mark+2),a  
46dd 18 03			jr .pastdmark  
46df ..			.dmark: db "STY"  
46e2 f1			.pastdmark: pop af  
46e3			endm  
# End of macro DMARK
46e3						CALLMONITOR 
46e3 cd aa fd			call debug_vector  
46e6				endm  
# End of macro CALLMONITOR
46e6					endif 
46e6					FORTH_DSP 
46e6 cd 11 22			call macro_forth_dsp 
46e9				endm 
# End of macro FORTH_DSP
46e9					;v5 FORTH_DSP_VALUE 
46e9			 
46e9 7e					ld a, (hl) 
46ea			 
46ea f5					push af 
46eb			 
46eb			; Dont destroy TOS		FORTH_DSP_POP 
46eb			 
46eb f1					pop af 
46ec			 
46ec fe 01				cp DS_TYPE_STR 
46ee 28 09				jr z, .typestr 
46f0			 
46f0 fe 02				cp DS_TYPE_INUM 
46f2 28 0a				jr z, .typeinum 
46f4			 
46f4 21 0d 47				ld hl, .tna 
46f7 18 0a				jr .tpush 
46f9			 
46f9 21 09 47		.typestr:	ld hl, .tstr 
46fc 18 05				jr .tpush 
46fe 21 0b 47		.typeinum:	ld hl, .tinum 
4701 18 00				jr .tpush 
4703			 
4703			.tpush: 
4703			 
4703 cd b4 20				call forth_push_str 
4706			 
4706					NEXTW 
4706 c3 37 24			jp macro_next 
4709				endm 
# End of macro NEXTW
4709 .. 00		.tstr:	db "s",0 
470b .. 00		.tinum:  db "i",0 
470d .. 00		.tna:   db "?", 0 
470f			 
470f			 
470f			.UPPER: 
470f				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
470f 48				db WORD_SYS_CORE+52             
4710 4a 47			dw .LOWER            
4712 06				db 5 + 1 
4713 .. 00			db "UPPER",0              
4719				endm 
# End of macro CWHEAD
4719			; | UPPER ( s -- s ) Upper case string s  | DONE 
4719					if DEBUG_FORTH_WORDS_KEY 
4719						DMARK "UPR" 
4719 f5				push af  
471a 3a 2e 47			ld a, (.dmark)  
471d 32 a0 fd			ld (debug_mark),a  
4720 3a 2f 47			ld a, (.dmark+1)  
4723 32 a1 fd			ld (debug_mark+1),a  
4726 3a 30 47			ld a, (.dmark+2)  
4729 32 a2 fd			ld (debug_mark+2),a  
472c 18 03			jr .pastdmark  
472e ..			.dmark: db "UPR"  
4731 f1			.pastdmark: pop af  
4732			endm  
# End of macro DMARK
4732						CALLMONITOR 
4732 cd aa fd			call debug_vector  
4735				endm  
# End of macro CALLMONITOR
4735					endif 
4735			 
4735					FORTH_DSP 
4735 cd 11 22			call macro_forth_dsp 
4738				endm 
# End of macro FORTH_DSP
4738					 
4738			; TODO check is string type 
4738			 
4738					FORTH_DSP_VALUEHL 
4738 cd 4b 22			call macro_dsp_valuehl 
473b				endm 
# End of macro FORTH_DSP_VALUEHL
473b			; get pointer to string in hl 
473b			 
473b 7e			.toup:		ld a, (hl) 
473c fe 00				cp 0 
473e 28 07				jr z, .toupdone 
4740			 
4740 cd 53 12				call to_upper 
4743			 
4743 77					ld (hl), a 
4744 23					inc hl 
4745 18 f4				jr .toup 
4747			 
4747					 
4747			 
4747			 
4747			; for each char convert to upper 
4747					 
4747			.toupdone: 
4747			 
4747			 
4747					NEXTW 
4747 c3 37 24			jp macro_next 
474a				endm 
# End of macro NEXTW
474a			.LOWER: 
474a				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
474a 48				db WORD_SYS_CORE+52             
474b 85 47			dw .TCASE            
474d 06				db 5 + 1 
474e .. 00			db "LOWER",0              
4754				endm 
# End of macro CWHEAD
4754			; | LOWER ( s -- s ) Lower case string s  | DONE 
4754					if DEBUG_FORTH_WORDS_KEY 
4754						DMARK "LWR" 
4754 f5				push af  
4755 3a 69 47			ld a, (.dmark)  
4758 32 a0 fd			ld (debug_mark),a  
475b 3a 6a 47			ld a, (.dmark+1)  
475e 32 a1 fd			ld (debug_mark+1),a  
4761 3a 6b 47			ld a, (.dmark+2)  
4764 32 a2 fd			ld (debug_mark+2),a  
4767 18 03			jr .pastdmark  
4769 ..			.dmark: db "LWR"  
476c f1			.pastdmark: pop af  
476d			endm  
# End of macro DMARK
476d						CALLMONITOR 
476d cd aa fd			call debug_vector  
4770				endm  
# End of macro CALLMONITOR
4770					endif 
4770			 
4770					FORTH_DSP 
4770 cd 11 22			call macro_forth_dsp 
4773				endm 
# End of macro FORTH_DSP
4773					 
4773			; TODO check is string type 
4773			 
4773					FORTH_DSP_VALUEHL 
4773 cd 4b 22			call macro_dsp_valuehl 
4776				endm 
# End of macro FORTH_DSP_VALUEHL
4776			; get pointer to string in hl 
4776			 
4776 7e			.tolow:		ld a, (hl) 
4777 fe 00				cp 0 
4779 28 07				jr z, .tolowdone 
477b			 
477b cd 5c 12				call to_lower 
477e			 
477e 77					ld (hl), a 
477f 23					inc hl 
4780 18 f4				jr .tolow 
4782			 
4782					 
4782			 
4782			 
4782			; for each char convert to low 
4782					 
4782			.tolowdone: 
4782					NEXTW 
4782 c3 37 24			jp macro_next 
4785				endm 
# End of macro NEXTW
4785			.TCASE: 
4785				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4785 48				db WORD_SYS_CORE+52             
4786 bb 48			dw .SUBSTR            
4788 06				db 5 + 1 
4789 .. 00			db "TCASE",0              
478f				endm 
# End of macro CWHEAD
478f			; | TCASE ( s -- s ) Title case string s  | DONE 
478f					if DEBUG_FORTH_WORDS_KEY 
478f						DMARK "TCS" 
478f f5				push af  
4790 3a a4 47			ld a, (.dmark)  
4793 32 a0 fd			ld (debug_mark),a  
4796 3a a5 47			ld a, (.dmark+1)  
4799 32 a1 fd			ld (debug_mark+1),a  
479c 3a a6 47			ld a, (.dmark+2)  
479f 32 a2 fd			ld (debug_mark+2),a  
47a2 18 03			jr .pastdmark  
47a4 ..			.dmark: db "TCS"  
47a7 f1			.pastdmark: pop af  
47a8			endm  
# End of macro DMARK
47a8						CALLMONITOR 
47a8 cd aa fd			call debug_vector  
47ab				endm  
# End of macro CALLMONITOR
47ab					endif 
47ab			 
47ab					FORTH_DSP 
47ab cd 11 22			call macro_forth_dsp 
47ae				endm 
# End of macro FORTH_DSP
47ae					 
47ae			; TODO check is string type 
47ae			 
47ae					FORTH_DSP_VALUEHL 
47ae cd 4b 22			call macro_dsp_valuehl 
47b1				endm 
# End of macro FORTH_DSP_VALUEHL
47b1			; get pointer to string in hl 
47b1			 
47b1					if DEBUG_FORTH_WORDS 
47b1						DMARK "TC1" 
47b1 f5				push af  
47b2 3a c6 47			ld a, (.dmark)  
47b5 32 a0 fd			ld (debug_mark),a  
47b8 3a c7 47			ld a, (.dmark+1)  
47bb 32 a1 fd			ld (debug_mark+1),a  
47be 3a c8 47			ld a, (.dmark+2)  
47c1 32 a2 fd			ld (debug_mark+2),a  
47c4 18 03			jr .pastdmark  
47c6 ..			.dmark: db "TC1"  
47c9 f1			.pastdmark: pop af  
47ca			endm  
# End of macro DMARK
47ca						CALLMONITOR 
47ca cd aa fd			call debug_vector  
47cd				endm  
# End of macro CALLMONITOR
47cd					endif 
47cd			 
47cd					; first time in turn to upper case first char 
47cd			 
47cd 7e					ld a, (hl) 
47ce c3 58 48				jp .totsiptou 
47d1			 
47d1			 
47d1 7e			.tot:		ld a, (hl) 
47d2 fe 00				cp 0 
47d4 ca 9c 48				jp z, .totdone 
47d7			 
47d7					if DEBUG_FORTH_WORDS 
47d7						DMARK "TC2" 
47d7 f5				push af  
47d8 3a ec 47			ld a, (.dmark)  
47db 32 a0 fd			ld (debug_mark),a  
47de 3a ed 47			ld a, (.dmark+1)  
47e1 32 a1 fd			ld (debug_mark+1),a  
47e4 3a ee 47			ld a, (.dmark+2)  
47e7 32 a2 fd			ld (debug_mark+2),a  
47ea 18 03			jr .pastdmark  
47ec ..			.dmark: db "TC2"  
47ef f1			.pastdmark: pop af  
47f0			endm  
# End of macro DMARK
47f0						CALLMONITOR 
47f0 cd aa fd			call debug_vector  
47f3				endm  
# End of macro CALLMONITOR
47f3					endif 
47f3					; check to see if current char is a space 
47f3			 
47f3 fe 20				cp ' ' 
47f5 28 21				jr z, .totsp 
47f7 cd 5c 12				call to_lower 
47fa					if DEBUG_FORTH_WORDS 
47fa						DMARK "TC3" 
47fa f5				push af  
47fb 3a 0f 48			ld a, (.dmark)  
47fe 32 a0 fd			ld (debug_mark),a  
4801 3a 10 48			ld a, (.dmark+1)  
4804 32 a1 fd			ld (debug_mark+1),a  
4807 3a 11 48			ld a, (.dmark+2)  
480a 32 a2 fd			ld (debug_mark+2),a  
480d 18 03			jr .pastdmark  
480f ..			.dmark: db "TC3"  
4812 f1			.pastdmark: pop af  
4813			endm  
# End of macro DMARK
4813						CALLMONITOR 
4813 cd aa fd			call debug_vector  
4816				endm  
# End of macro CALLMONITOR
4816					endif 
4816 18 63				jr .totnxt 
4818			 
4818			.totsp:         ; on a space, find next char which should be upper 
4818			 
4818					if DEBUG_FORTH_WORDS 
4818						DMARK "TC4" 
4818 f5				push af  
4819 3a 2d 48			ld a, (.dmark)  
481c 32 a0 fd			ld (debug_mark),a  
481f 3a 2e 48			ld a, (.dmark+1)  
4822 32 a1 fd			ld (debug_mark+1),a  
4825 3a 2f 48			ld a, (.dmark+2)  
4828 32 a2 fd			ld (debug_mark+2),a  
482b 18 03			jr .pastdmark  
482d ..			.dmark: db "TC4"  
4830 f1			.pastdmark: pop af  
4831			endm  
# End of macro DMARK
4831						CALLMONITOR 
4831 cd aa fd			call debug_vector  
4834				endm  
# End of macro CALLMONITOR
4834					endif 
4834					;; 
4834			 
4834 fe 20				cp ' ' 
4836 20 20				jr nz, .totsiptou 
4838 23					inc hl 
4839 7e					ld a, (hl) 
483a					if DEBUG_FORTH_WORDS 
483a						DMARK "TC5" 
483a f5				push af  
483b 3a 4f 48			ld a, (.dmark)  
483e 32 a0 fd			ld (debug_mark),a  
4841 3a 50 48			ld a, (.dmark+1)  
4844 32 a1 fd			ld (debug_mark+1),a  
4847 3a 51 48			ld a, (.dmark+2)  
484a 32 a2 fd			ld (debug_mark+2),a  
484d 18 03			jr .pastdmark  
484f ..			.dmark: db "TC5"  
4852 f1			.pastdmark: pop af  
4853			endm  
# End of macro DMARK
4853						CALLMONITOR 
4853 cd aa fd			call debug_vector  
4856				endm  
# End of macro CALLMONITOR
4856					endif 
4856 18 c0				jr .totsp 
4858 fe 00		.totsiptou:    cp 0 
485a 28 40				jr z, .totdone 
485c					; not space and not zero term so upper case it 
485c cd 53 12				call to_upper 
485f			 
485f					if DEBUG_FORTH_WORDS 
485f						DMARK "TC6" 
485f f5				push af  
4860 3a 74 48			ld a, (.dmark)  
4863 32 a0 fd			ld (debug_mark),a  
4866 3a 75 48			ld a, (.dmark+1)  
4869 32 a1 fd			ld (debug_mark+1),a  
486c 3a 76 48			ld a, (.dmark+2)  
486f 32 a2 fd			ld (debug_mark+2),a  
4872 18 03			jr .pastdmark  
4874 ..			.dmark: db "TC6"  
4877 f1			.pastdmark: pop af  
4878			endm  
# End of macro DMARK
4878						CALLMONITOR 
4878 cd aa fd			call debug_vector  
487b				endm  
# End of macro CALLMONITOR
487b					endif 
487b			 
487b			 
487b			.totnxt: 
487b			 
487b 77					ld (hl), a 
487c 23					inc hl 
487d					if DEBUG_FORTH_WORDS 
487d						DMARK "TC7" 
487d f5				push af  
487e 3a 92 48			ld a, (.dmark)  
4881 32 a0 fd			ld (debug_mark),a  
4884 3a 93 48			ld a, (.dmark+1)  
4887 32 a1 fd			ld (debug_mark+1),a  
488a 3a 94 48			ld a, (.dmark+2)  
488d 32 a2 fd			ld (debug_mark+2),a  
4890 18 03			jr .pastdmark  
4892 ..			.dmark: db "TC7"  
4895 f1			.pastdmark: pop af  
4896			endm  
# End of macro DMARK
4896						CALLMONITOR 
4896 cd aa fd			call debug_vector  
4899				endm  
# End of macro CALLMONITOR
4899					endif 
4899 c3 d1 47				jp .tot 
489c			 
489c					 
489c			 
489c			 
489c			; for each char convert to low 
489c					 
489c			.totdone: 
489c					if DEBUG_FORTH_WORDS 
489c						DMARK "TCd" 
489c f5				push af  
489d 3a b1 48			ld a, (.dmark)  
48a0 32 a0 fd			ld (debug_mark),a  
48a3 3a b2 48			ld a, (.dmark+1)  
48a6 32 a1 fd			ld (debug_mark+1),a  
48a9 3a b3 48			ld a, (.dmark+2)  
48ac 32 a2 fd			ld (debug_mark+2),a  
48af 18 03			jr .pastdmark  
48b1 ..			.dmark: db "TCd"  
48b4 f1			.pastdmark: pop af  
48b5			endm  
# End of macro DMARK
48b5						CALLMONITOR 
48b5 cd aa fd			call debug_vector  
48b8				endm  
# End of macro CALLMONITOR
48b8					endif 
48b8					NEXTW 
48b8 c3 37 24			jp macro_next 
48bb				endm 
# End of macro NEXTW
48bb			 
48bb			.SUBSTR: 
48bb				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
48bb 48				db WORD_SYS_CORE+52             
48bc 19 49			dw .LEFT            
48be 07				db 6 + 1 
48bf .. 00			db "SUBSTR",0              
48c6				endm 
# End of macro CWHEAD
48c6			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
48c6			 
48c6					if DEBUG_FORTH_WORDS_KEY 
48c6						DMARK "SST" 
48c6 f5				push af  
48c7 3a db 48			ld a, (.dmark)  
48ca 32 a0 fd			ld (debug_mark),a  
48cd 3a dc 48			ld a, (.dmark+1)  
48d0 32 a1 fd			ld (debug_mark+1),a  
48d3 3a dd 48			ld a, (.dmark+2)  
48d6 32 a2 fd			ld (debug_mark+2),a  
48d9 18 03			jr .pastdmark  
48db ..			.dmark: db "SST"  
48de f1			.pastdmark: pop af  
48df			endm  
# End of macro DMARK
48df						CALLMONITOR 
48df cd aa fd			call debug_vector  
48e2				endm  
# End of macro CALLMONITOR
48e2					endif 
48e2			; TODO check string type 
48e2					FORTH_DSP_VALUEHL 
48e2 cd 4b 22			call macro_dsp_valuehl 
48e5				endm 
# End of macro FORTH_DSP_VALUEHL
48e5			 
48e5 e5					push hl      ; string length 
48e6			 
48e6					FORTH_DSP_POP 
48e6 cd 03 23			call macro_forth_dsp_pop 
48e9				endm 
# End of macro FORTH_DSP_POP
48e9			 
48e9					FORTH_DSP_VALUEHL 
48e9 cd 4b 22			call macro_dsp_valuehl 
48ec				endm 
# End of macro FORTH_DSP_VALUEHL
48ec			 
48ec e5					push hl     ; start char 
48ed			 
48ed					FORTH_DSP_POP 
48ed cd 03 23			call macro_forth_dsp_pop 
48f0				endm 
# End of macro FORTH_DSP_POP
48f0			 
48f0			 
48f0					FORTH_DSP_VALUE 
48f0 cd 34 22			call macro_forth_dsp_value 
48f3				endm 
# End of macro FORTH_DSP_VALUE
48f3			 
48f3 d1					pop de    ; get start post offset 
48f4			 
48f4 19					add hl, de    ; starting offset 
48f5			 
48f5 c1					pop bc 
48f6 c5					push bc      ; grab size of string 
48f7			 
48f7 e5					push hl    ; save string start  
48f8			 
48f8 26 00				ld h, 0 
48fa 69					ld l, c 
48fb 23					inc hl 
48fc 23					inc hl 
48fd			 
48fd cd b9 13				call malloc 
4900				if DEBUG_FORTH_MALLOC_GUARD 
4900 cc 46 5e				call z,malloc_error 
4903				endif 
4903			 
4903 eb					ex de, hl      ; save malloc area for string copy 
4904 e1					pop hl    ; get back source 
4905 c1					pop bc    ; get length of string back 
4906			 
4906 d5					push de    ; save malloc area for after we push 
4907 ed b0				ldir     ; copy substr 
4909			 
4909			 
4909 eb					ex de, hl 
490a 3e 00				ld a, 0 
490c 77					ld (hl), a   ; term substr 
490d			 
490d					 
490d e1					pop hl    ; get malloc so we can push it 
490e e5					push hl   ; save so we can free it afterwards 
490f			 
490f cd b4 20				call forth_push_str 
4912			 
4912 e1					pop hl 
4913 cd 83 14				call free 
4916			 
4916					 
4916					 
4916			 
4916			 
4916					NEXTW 
4916 c3 37 24			jp macro_next 
4919				endm 
# End of macro NEXTW
4919			 
4919			.LEFT: 
4919				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4919 48				db WORD_SYS_CORE+52             
491a 41 49			dw .RIGHT            
491c 05				db 4 + 1 
491d .. 00			db "LEFT",0              
4922				endm 
# End of macro CWHEAD
4922			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
4922					if DEBUG_FORTH_WORDS_KEY 
4922						DMARK "LEF" 
4922 f5				push af  
4923 3a 37 49			ld a, (.dmark)  
4926 32 a0 fd			ld (debug_mark),a  
4929 3a 38 49			ld a, (.dmark+1)  
492c 32 a1 fd			ld (debug_mark+1),a  
492f 3a 39 49			ld a, (.dmark+2)  
4932 32 a2 fd			ld (debug_mark+2),a  
4935 18 03			jr .pastdmark  
4937 ..			.dmark: db "LEF"  
493a f1			.pastdmark: pop af  
493b			endm  
# End of macro DMARK
493b						CALLMONITOR 
493b cd aa fd			call debug_vector  
493e				endm  
# End of macro CALLMONITOR
493e					endif 
493e			 
493e					NEXTW 
493e c3 37 24			jp macro_next 
4941				endm 
# End of macro NEXTW
4941			.RIGHT: 
4941				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4941 48				db WORD_SYS_CORE+52             
4942 6a 49			dw .STR2NUM            
4944 06				db 5 + 1 
4945 .. 00			db "RIGHT",0              
494b				endm 
# End of macro CWHEAD
494b			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
494b					if DEBUG_FORTH_WORDS_KEY 
494b						DMARK "RIG" 
494b f5				push af  
494c 3a 60 49			ld a, (.dmark)  
494f 32 a0 fd			ld (debug_mark),a  
4952 3a 61 49			ld a, (.dmark+1)  
4955 32 a1 fd			ld (debug_mark+1),a  
4958 3a 62 49			ld a, (.dmark+2)  
495b 32 a2 fd			ld (debug_mark+2),a  
495e 18 03			jr .pastdmark  
4960 ..			.dmark: db "RIG"  
4963 f1			.pastdmark: pop af  
4964			endm  
# End of macro DMARK
4964						CALLMONITOR 
4964 cd aa fd			call debug_vector  
4967				endm  
# End of macro CALLMONITOR
4967					endif 
4967			 
4967					NEXTW 
4967 c3 37 24			jp macro_next 
496a				endm 
# End of macro NEXTW
496a			 
496a			 
496a			.STR2NUM: 
496a				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
496a 48				db WORD_SYS_CORE+52             
496b f6 49			dw .NUM2STR            
496d 08				db 7 + 1 
496e .. 00			db "STR2NUM",0              
4976				endm 
# End of macro CWHEAD
4976			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4976			 
4976			 
4976			; TODO STR type check to do 
4976					if DEBUG_FORTH_WORDS_KEY 
4976						DMARK "S2N" 
4976 f5				push af  
4977 3a 8b 49			ld a, (.dmark)  
497a 32 a0 fd			ld (debug_mark),a  
497d 3a 8c 49			ld a, (.dmark+1)  
4980 32 a1 fd			ld (debug_mark+1),a  
4983 3a 8d 49			ld a, (.dmark+2)  
4986 32 a2 fd			ld (debug_mark+2),a  
4989 18 03			jr .pastdmark  
498b ..			.dmark: db "S2N"  
498e f1			.pastdmark: pop af  
498f			endm  
# End of macro DMARK
498f						CALLMONITOR 
498f cd aa fd			call debug_vector  
4992				endm  
# End of macro CALLMONITOR
4992					endif 
4992			 
4992					;FORTH_DSP 
4992					FORTH_DSP_VALUE 
4992 cd 34 22			call macro_forth_dsp_value 
4995				endm 
# End of macro FORTH_DSP_VALUE
4995					;inc hl 
4995			 
4995 eb					ex de, hl 
4996					if DEBUG_FORTH_WORDS 
4996						DMARK "S2a" 
4996 f5				push af  
4997 3a ab 49			ld a, (.dmark)  
499a 32 a0 fd			ld (debug_mark),a  
499d 3a ac 49			ld a, (.dmark+1)  
49a0 32 a1 fd			ld (debug_mark+1),a  
49a3 3a ad 49			ld a, (.dmark+2)  
49a6 32 a2 fd			ld (debug_mark+2),a  
49a9 18 03			jr .pastdmark  
49ab ..			.dmark: db "S2a"  
49ae f1			.pastdmark: pop af  
49af			endm  
# End of macro DMARK
49af						CALLMONITOR 
49af cd aa fd			call debug_vector  
49b2				endm  
# End of macro CALLMONITOR
49b2					endif 
49b2 cd db 12				call string_to_uint16 
49b5			 
49b5					if DEBUG_FORTH_WORDS 
49b5						DMARK "S2b" 
49b5 f5				push af  
49b6 3a ca 49			ld a, (.dmark)  
49b9 32 a0 fd			ld (debug_mark),a  
49bc 3a cb 49			ld a, (.dmark+1)  
49bf 32 a1 fd			ld (debug_mark+1),a  
49c2 3a cc 49			ld a, (.dmark+2)  
49c5 32 a2 fd			ld (debug_mark+2),a  
49c8 18 03			jr .pastdmark  
49ca ..			.dmark: db "S2b"  
49cd f1			.pastdmark: pop af  
49ce			endm  
# End of macro DMARK
49ce						CALLMONITOR 
49ce cd aa fd			call debug_vector  
49d1				endm  
# End of macro CALLMONITOR
49d1					endif 
49d1			;		push hl 
49d1					FORTH_DSP_POP 
49d1 cd 03 23			call macro_forth_dsp_pop 
49d4				endm 
# End of macro FORTH_DSP_POP
49d4			;		pop hl 
49d4					 
49d4					if DEBUG_FORTH_WORDS 
49d4						DMARK "S2b" 
49d4 f5				push af  
49d5 3a e9 49			ld a, (.dmark)  
49d8 32 a0 fd			ld (debug_mark),a  
49db 3a ea 49			ld a, (.dmark+1)  
49de 32 a1 fd			ld (debug_mark+1),a  
49e1 3a eb 49			ld a, (.dmark+2)  
49e4 32 a2 fd			ld (debug_mark+2),a  
49e7 18 03			jr .pastdmark  
49e9 ..			.dmark: db "S2b"  
49ec f1			.pastdmark: pop af  
49ed			endm  
# End of macro DMARK
49ed						CALLMONITOR 
49ed cd aa fd			call debug_vector  
49f0				endm  
# End of macro CALLMONITOR
49f0					endif 
49f0 cd 46 20				call forth_push_numhl	 
49f3			 
49f3				 
49f3				       NEXTW 
49f3 c3 37 24			jp macro_next 
49f6				endm 
# End of macro NEXTW
49f6			.NUM2STR: 
49f6				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
49f6 48				db WORD_SYS_CORE+52             
49f7 05 4a			dw .CONCAT            
49f9 08				db 7 + 1 
49fa .. 00			db "NUM2STR",0              
4a02				endm 
# End of macro CWHEAD
4a02			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
4a02			 
4a02			;		; malloc a string to target 
4a02			;		ld hl, 10     ; TODO max string size should be fine 
4a02			;		call malloc 
4a02			;		push hl    ; save malloc location 
4a02			; 
4a02			; 
4a02			;; TODO check int type 
4a02			;		FORTH_DSP_VALUEHL 
4a02			;		ld a, l 
4a02			;		call DispAToASCII   
4a02			;;TODO need to chage above call to dump into string 
4a02			; 
4a02			; 
4a02			 
4a02				       NEXTW 
4a02 c3 37 24			jp macro_next 
4a05				endm 
# End of macro NEXTW
4a05			 
4a05			.CONCAT: 
4a05				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4a05 48				db WORD_SYS_CORE+52             
4a06 b8 4a			dw .FIND            
4a08 07				db 6 + 1 
4a09 .. 00			db "CONCAT",0              
4a10				endm 
# End of macro CWHEAD
4a10			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4a10			 
4a10			; TODO check string type 
4a10			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4a10			 
4a10					if DEBUG_FORTH_WORDS_KEY 
4a10						DMARK "CON" 
4a10 f5				push af  
4a11 3a 25 4a			ld a, (.dmark)  
4a14 32 a0 fd			ld (debug_mark),a  
4a17 3a 26 4a			ld a, (.dmark+1)  
4a1a 32 a1 fd			ld (debug_mark+1),a  
4a1d 3a 27 4a			ld a, (.dmark+2)  
4a20 32 a2 fd			ld (debug_mark+2),a  
4a23 18 03			jr .pastdmark  
4a25 ..			.dmark: db "CON"  
4a28 f1			.pastdmark: pop af  
4a29			endm  
# End of macro DMARK
4a29						CALLMONITOR 
4a29 cd aa fd			call debug_vector  
4a2c				endm  
# End of macro CALLMONITOR
4a2c					endif 
4a2c			 
4a2c			 
4a2c					FORTH_DSP_VALUE 
4a2c cd 34 22			call macro_forth_dsp_value 
4a2f				endm 
# End of macro FORTH_DSP_VALUE
4a2f e5					push hl   ; s2 
4a30			 
4a30					FORTH_DSP_POP 
4a30 cd 03 23			call macro_forth_dsp_pop 
4a33				endm 
# End of macro FORTH_DSP_POP
4a33			 
4a33					FORTH_DSP_VALUE 
4a33 cd 34 22			call macro_forth_dsp_value 
4a36				endm 
# End of macro FORTH_DSP_VALUE
4a36			 
4a36 e5					push hl   ; s1 
4a37			 
4a37					FORTH_DSP_POP 
4a37 cd 03 23			call macro_forth_dsp_pop 
4a3a				endm 
# End of macro FORTH_DSP_POP
4a3a					 
4a3a			 
4a3a					; copy s1 
4a3a			 
4a3a				 
4a3a					; save ptr 
4a3a e1					pop hl  
4a3b e5					push hl 
4a3c 3e 00				ld a, 0 
4a3e cd 4f 13				call strlent 
4a41					;inc hl    ; zer0 
4a41 06 00				ld b, 0 
4a43 4d					ld c, l 
4a44 e1					pop hl		 
4a45 11 f6 f0				ld de, scratch	 
4a48					if DEBUG_FORTH_WORDS 
4a48						DMARK "CO1" 
4a48 f5				push af  
4a49 3a 5d 4a			ld a, (.dmark)  
4a4c 32 a0 fd			ld (debug_mark),a  
4a4f 3a 5e 4a			ld a, (.dmark+1)  
4a52 32 a1 fd			ld (debug_mark+1),a  
4a55 3a 5f 4a			ld a, (.dmark+2)  
4a58 32 a2 fd			ld (debug_mark+2),a  
4a5b 18 03			jr .pastdmark  
4a5d ..			.dmark: db "CO1"  
4a60 f1			.pastdmark: pop af  
4a61			endm  
# End of macro DMARK
4a61						CALLMONITOR 
4a61 cd aa fd			call debug_vector  
4a64				endm  
# End of macro CALLMONITOR
4a64					endif 
4a64 ed b0				ldir 
4a66			 
4a66 e1					pop hl 
4a67 e5					push hl 
4a68 d5					push de 
4a69			 
4a69			 
4a69 3e 00				ld a, 0 
4a6b cd 4f 13				call strlent 
4a6e 23					inc hl    ; zer0 
4a6f 23					inc hl 
4a70 06 00				ld b, 0 
4a72 4d					ld c, l 
4a73 d1					pop de 
4a74 e1					pop hl		 
4a75					if DEBUG_FORTH_WORDS 
4a75						DMARK "CO2" 
4a75 f5				push af  
4a76 3a 8a 4a			ld a, (.dmark)  
4a79 32 a0 fd			ld (debug_mark),a  
4a7c 3a 8b 4a			ld a, (.dmark+1)  
4a7f 32 a1 fd			ld (debug_mark+1),a  
4a82 3a 8c 4a			ld a, (.dmark+2)  
4a85 32 a2 fd			ld (debug_mark+2),a  
4a88 18 03			jr .pastdmark  
4a8a ..			.dmark: db "CO2"  
4a8d f1			.pastdmark: pop af  
4a8e			endm  
# End of macro DMARK
4a8e						CALLMONITOR 
4a8e cd aa fd			call debug_vector  
4a91				endm  
# End of macro CALLMONITOR
4a91					endif 
4a91 ed b0				ldir 
4a93			 
4a93			 
4a93			 
4a93 21 f6 f0				ld hl, scratch 
4a96					if DEBUG_FORTH_WORDS 
4a96						DMARK "CO5" 
4a96 f5				push af  
4a97 3a ab 4a			ld a, (.dmark)  
4a9a 32 a0 fd			ld (debug_mark),a  
4a9d 3a ac 4a			ld a, (.dmark+1)  
4aa0 32 a1 fd			ld (debug_mark+1),a  
4aa3 3a ad 4a			ld a, (.dmark+2)  
4aa6 32 a2 fd			ld (debug_mark+2),a  
4aa9 18 03			jr .pastdmark  
4aab ..			.dmark: db "CO5"  
4aae f1			.pastdmark: pop af  
4aaf			endm  
# End of macro DMARK
4aaf						CALLMONITOR 
4aaf cd aa fd			call debug_vector  
4ab2				endm  
# End of macro CALLMONITOR
4ab2					endif 
4ab2			 
4ab2 cd b4 20				call forth_push_str 
4ab5			 
4ab5			 
4ab5			 
4ab5			 
4ab5				       NEXTW 
4ab5 c3 37 24			jp macro_next 
4ab8				endm 
# End of macro NEXTW
4ab8			 
4ab8			 
4ab8			.FIND: 
4ab8				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4ab8 4b				db WORD_SYS_CORE+55             
4ab9 76 4b			dw .LEN            
4abb 05				db 4 + 1 
4abc .. 00			db "FIND",0              
4ac1				endm 
# End of macro CWHEAD
4ac1			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4ac1			 
4ac1					if DEBUG_FORTH_WORDS_KEY 
4ac1						DMARK "FND" 
4ac1 f5				push af  
4ac2 3a d6 4a			ld a, (.dmark)  
4ac5 32 a0 fd			ld (debug_mark),a  
4ac8 3a d7 4a			ld a, (.dmark+1)  
4acb 32 a1 fd			ld (debug_mark+1),a  
4ace 3a d8 4a			ld a, (.dmark+2)  
4ad1 32 a2 fd			ld (debug_mark+2),a  
4ad4 18 03			jr .pastdmark  
4ad6 ..			.dmark: db "FND"  
4ad9 f1			.pastdmark: pop af  
4ada			endm  
# End of macro DMARK
4ada						CALLMONITOR 
4ada cd aa fd			call debug_vector  
4add				endm  
# End of macro CALLMONITOR
4add					endif 
4add			 
4add			; TODO check string type 
4add					FORTH_DSP_VALUE 
4add cd 34 22			call macro_forth_dsp_value 
4ae0				endm 
# End of macro FORTH_DSP_VALUE
4ae0			 
4ae0 e5					push hl    
4ae1 7e					ld a,(hl)    ; char to find   
4ae2			; TODO change char to substr 
4ae2			 
4ae2 f5					push af 
4ae3					 
4ae3			 
4ae3			 
4ae3					if DEBUG_FORTH_WORDS 
4ae3						DMARK "FN1" 
4ae3 f5				push af  
4ae4 3a f8 4a			ld a, (.dmark)  
4ae7 32 a0 fd			ld (debug_mark),a  
4aea 3a f9 4a			ld a, (.dmark+1)  
4aed 32 a1 fd			ld (debug_mark+1),a  
4af0 3a fa 4a			ld a, (.dmark+2)  
4af3 32 a2 fd			ld (debug_mark+2),a  
4af6 18 03			jr .pastdmark  
4af8 ..			.dmark: db "FN1"  
4afb f1			.pastdmark: pop af  
4afc			endm  
# End of macro DMARK
4afc						CALLMONITOR 
4afc cd aa fd			call debug_vector  
4aff				endm  
# End of macro CALLMONITOR
4aff					endif 
4aff			 
4aff					FORTH_DSP_POP 
4aff cd 03 23			call macro_forth_dsp_pop 
4b02				endm 
# End of macro FORTH_DSP_POP
4b02			 
4b02					; string to search 
4b02			 
4b02					FORTH_DSP_VALUE 
4b02 cd 34 22			call macro_forth_dsp_value 
4b05				endm 
# End of macro FORTH_DSP_VALUE
4b05			 
4b05 d1					pop de  ; d is char to find  
4b06			 
4b06					if DEBUG_FORTH_WORDS 
4b06						DMARK "FN2" 
4b06 f5				push af  
4b07 3a 1b 4b			ld a, (.dmark)  
4b0a 32 a0 fd			ld (debug_mark),a  
4b0d 3a 1c 4b			ld a, (.dmark+1)  
4b10 32 a1 fd			ld (debug_mark+1),a  
4b13 3a 1d 4b			ld a, (.dmark+2)  
4b16 32 a2 fd			ld (debug_mark+2),a  
4b19 18 03			jr .pastdmark  
4b1b ..			.dmark: db "FN2"  
4b1e f1			.pastdmark: pop af  
4b1f			endm  
# End of macro DMARK
4b1f						CALLMONITOR 
4b1f cd aa fd			call debug_vector  
4b22				endm  
# End of macro CALLMONITOR
4b22					endif 
4b22					 
4b22 01 00 00				ld bc, 0 
4b25 7e			.findchar:      ld a,(hl) 
4b26 fe 00				cp 0   		 
4b28 28 27				jr z, .finddone     
4b2a ba					cp d 
4b2b 28 20				jr z, .foundchar 
4b2d 03					inc bc 
4b2e 23					inc hl 
4b2f					if DEBUG_FORTH_WORDS 
4b2f						DMARK "FN3" 
4b2f f5				push af  
4b30 3a 44 4b			ld a, (.dmark)  
4b33 32 a0 fd			ld (debug_mark),a  
4b36 3a 45 4b			ld a, (.dmark+1)  
4b39 32 a1 fd			ld (debug_mark+1),a  
4b3c 3a 46 4b			ld a, (.dmark+2)  
4b3f 32 a2 fd			ld (debug_mark+2),a  
4b42 18 03			jr .pastdmark  
4b44 ..			.dmark: db "FN3"  
4b47 f1			.pastdmark: pop af  
4b48			endm  
# End of macro DMARK
4b48						CALLMONITOR 
4b48 cd aa fd			call debug_vector  
4b4b				endm  
# End of macro CALLMONITOR
4b4b					endif 
4b4b 18 d8				jr .findchar 
4b4d			 
4b4d			 
4b4d c5			.foundchar:	push bc 
4b4e e1					pop hl 
4b4f 18 03				jr .findexit 
4b51			 
4b51			 
4b51							 
4b51			 
4b51			.finddone:     ; got to end of string with no find 
4b51 21 00 00				ld hl, 0 
4b54			.findexit: 
4b54			 
4b54					if DEBUG_FORTH_WORDS 
4b54						DMARK "FNd" 
4b54 f5				push af  
4b55 3a 69 4b			ld a, (.dmark)  
4b58 32 a0 fd			ld (debug_mark),a  
4b5b 3a 6a 4b			ld a, (.dmark+1)  
4b5e 32 a1 fd			ld (debug_mark+1),a  
4b61 3a 6b 4b			ld a, (.dmark+2)  
4b64 32 a2 fd			ld (debug_mark+2),a  
4b67 18 03			jr .pastdmark  
4b69 ..			.dmark: db "FNd"  
4b6c f1			.pastdmark: pop af  
4b6d			endm  
# End of macro DMARK
4b6d						CALLMONITOR 
4b6d cd aa fd			call debug_vector  
4b70				endm  
# End of macro CALLMONITOR
4b70					endif 
4b70 cd 46 20			call forth_push_numhl 
4b73			 
4b73				       NEXTW 
4b73 c3 37 24			jp macro_next 
4b76				endm 
# End of macro NEXTW
4b76			 
4b76			.LEN: 
4b76				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4b76 4c				db WORD_SYS_CORE+56             
4b77 e0 4b			dw .ASC            
4b79 06				db 5 + 1 
4b7a .. 00			db "COUNT",0              
4b80				endm 
# End of macro CWHEAD
4b80			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4b80			 
4b80					if DEBUG_FORTH_WORDS_KEY 
4b80						DMARK "CNT" 
4b80 f5				push af  
4b81 3a 95 4b			ld a, (.dmark)  
4b84 32 a0 fd			ld (debug_mark),a  
4b87 3a 96 4b			ld a, (.dmark+1)  
4b8a 32 a1 fd			ld (debug_mark+1),a  
4b8d 3a 97 4b			ld a, (.dmark+2)  
4b90 32 a2 fd			ld (debug_mark+2),a  
4b93 18 03			jr .pastdmark  
4b95 ..			.dmark: db "CNT"  
4b98 f1			.pastdmark: pop af  
4b99			endm  
# End of macro DMARK
4b99						CALLMONITOR 
4b99 cd aa fd			call debug_vector  
4b9c				endm  
# End of macro CALLMONITOR
4b9c					endif 
4b9c			; TODO check string type 
4b9c					FORTH_DSP_VALUE 
4b9c cd 34 22			call macro_forth_dsp_value 
4b9f				endm 
# End of macro FORTH_DSP_VALUE
4b9f			 
4b9f			 
4b9f					if DEBUG_FORTH_WORDS 
4b9f						DMARK "CN?" 
4b9f f5				push af  
4ba0 3a b4 4b			ld a, (.dmark)  
4ba3 32 a0 fd			ld (debug_mark),a  
4ba6 3a b5 4b			ld a, (.dmark+1)  
4ba9 32 a1 fd			ld (debug_mark+1),a  
4bac 3a b6 4b			ld a, (.dmark+2)  
4baf 32 a2 fd			ld (debug_mark+2),a  
4bb2 18 03			jr .pastdmark  
4bb4 ..			.dmark: db "CN?"  
4bb7 f1			.pastdmark: pop af  
4bb8			endm  
# End of macro DMARK
4bb8						CALLMONITOR 
4bb8 cd aa fd			call debug_vector  
4bbb				endm  
# End of macro CALLMONITOR
4bbb					endif 
4bbb cd 44 13				call strlenz 
4bbe					if DEBUG_FORTH_WORDS 
4bbe						DMARK "CNl" 
4bbe f5				push af  
4bbf 3a d3 4b			ld a, (.dmark)  
4bc2 32 a0 fd			ld (debug_mark),a  
4bc5 3a d4 4b			ld a, (.dmark+1)  
4bc8 32 a1 fd			ld (debug_mark+1),a  
4bcb 3a d5 4b			ld a, (.dmark+2)  
4bce 32 a2 fd			ld (debug_mark+2),a  
4bd1 18 03			jr .pastdmark  
4bd3 ..			.dmark: db "CNl"  
4bd6 f1			.pastdmark: pop af  
4bd7			endm  
# End of macro DMARK
4bd7						CALLMONITOR 
4bd7 cd aa fd			call debug_vector  
4bda				endm  
# End of macro CALLMONITOR
4bda					endif 
4bda			 
4bda cd 46 20				call forth_push_numhl 
4bdd			 
4bdd			 
4bdd			 
4bdd				       NEXTW 
4bdd c3 37 24			jp macro_next 
4be0				endm 
# End of macro NEXTW
4be0			.ASC: 
4be0				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4be0 4d				db WORD_SYS_CORE+57             
4be1 4e 4c			dw .CHR            
4be3 04				db 3 + 1 
4be4 .. 00			db "ASC",0              
4be8				endm 
# End of macro CWHEAD
4be8			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4be8					if DEBUG_FORTH_WORDS_KEY 
4be8						DMARK "ASC" 
4be8 f5				push af  
4be9 3a fd 4b			ld a, (.dmark)  
4bec 32 a0 fd			ld (debug_mark),a  
4bef 3a fe 4b			ld a, (.dmark+1)  
4bf2 32 a1 fd			ld (debug_mark+1),a  
4bf5 3a ff 4b			ld a, (.dmark+2)  
4bf8 32 a2 fd			ld (debug_mark+2),a  
4bfb 18 03			jr .pastdmark  
4bfd ..			.dmark: db "ASC"  
4c00 f1			.pastdmark: pop af  
4c01			endm  
# End of macro DMARK
4c01						CALLMONITOR 
4c01 cd aa fd			call debug_vector  
4c04				endm  
# End of macro CALLMONITOR
4c04					endif 
4c04					FORTH_DSP_VALUE 
4c04 cd 34 22			call macro_forth_dsp_value 
4c07				endm 
# End of macro FORTH_DSP_VALUE
4c07					;v5 FORTH_DSP_VALUE 
4c07			;		inc hl      ; now at start of numeric as string 
4c07			 
4c07 e5					push hl 
4c08			 
4c08					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c08 cd 03 23			call macro_forth_dsp_pop 
4c0b				endm 
# End of macro FORTH_DSP_POP
4c0b			 
4c0b e1					pop hl 
4c0c			 
4c0c					if DEBUG_FORTH_WORDS 
4c0c						DMARK "AS1" 
4c0c f5				push af  
4c0d 3a 21 4c			ld a, (.dmark)  
4c10 32 a0 fd			ld (debug_mark),a  
4c13 3a 22 4c			ld a, (.dmark+1)  
4c16 32 a1 fd			ld (debug_mark+1),a  
4c19 3a 23 4c			ld a, (.dmark+2)  
4c1c 32 a2 fd			ld (debug_mark+2),a  
4c1f 18 03			jr .pastdmark  
4c21 ..			.dmark: db "AS1"  
4c24 f1			.pastdmark: pop af  
4c25			endm  
# End of macro DMARK
4c25						CALLMONITOR 
4c25 cd aa fd			call debug_vector  
4c28				endm  
# End of macro CALLMONITOR
4c28					endif 
4c28					; push the content of a onto the stack as a value 
4c28			 
4c28 7e					ld a,(hl)   ; get char 
4c29 26 00				ld h,0 
4c2b 6f					ld l,a 
4c2c					if DEBUG_FORTH_WORDS 
4c2c						DMARK "AS2" 
4c2c f5				push af  
4c2d 3a 41 4c			ld a, (.dmark)  
4c30 32 a0 fd			ld (debug_mark),a  
4c33 3a 42 4c			ld a, (.dmark+1)  
4c36 32 a1 fd			ld (debug_mark+1),a  
4c39 3a 43 4c			ld a, (.dmark+2)  
4c3c 32 a2 fd			ld (debug_mark+2),a  
4c3f 18 03			jr .pastdmark  
4c41 ..			.dmark: db "AS2"  
4c44 f1			.pastdmark: pop af  
4c45			endm  
# End of macro DMARK
4c45						CALLMONITOR 
4c45 cd aa fd			call debug_vector  
4c48				endm  
# End of macro CALLMONITOR
4c48					endif 
4c48 cd 46 20				call forth_push_numhl 
4c4b			 
4c4b				       NEXTW 
4c4b c3 37 24			jp macro_next 
4c4e				endm 
# End of macro NEXTW
4c4e			 
4c4e			.CHR: 
4c4e				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4c4e 4d				db WORD_SYS_CORE+57             
4c4f 8a 4c			dw .ENDSTR            
4c51 04				db 3 + 1 
4c52 .. 00			db "CHR",0              
4c56				endm 
# End of macro CWHEAD
4c56			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4c56					if DEBUG_FORTH_WORDS_KEY 
4c56						DMARK "CHR" 
4c56 f5				push af  
4c57 3a 6b 4c			ld a, (.dmark)  
4c5a 32 a0 fd			ld (debug_mark),a  
4c5d 3a 6c 4c			ld a, (.dmark+1)  
4c60 32 a1 fd			ld (debug_mark+1),a  
4c63 3a 6d 4c			ld a, (.dmark+2)  
4c66 32 a2 fd			ld (debug_mark+2),a  
4c69 18 03			jr .pastdmark  
4c6b ..			.dmark: db "CHR"  
4c6e f1			.pastdmark: pop af  
4c6f			endm  
# End of macro DMARK
4c6f						CALLMONITOR 
4c6f cd aa fd			call debug_vector  
4c72				endm  
# End of macro CALLMONITOR
4c72					endif 
4c72					FORTH_DSP_VALUEHL 
4c72 cd 4b 22			call macro_dsp_valuehl 
4c75				endm 
# End of macro FORTH_DSP_VALUEHL
4c75			 
4c75					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c75 cd 03 23			call macro_forth_dsp_pop 
4c78				endm 
# End of macro FORTH_DSP_POP
4c78			 
4c78					; save asci byte as a zero term string and push string 
4c78			 
4c78 7d					ld a,l 
4c79 32 f6 f0				ld (scratch), a 
4c7c			 
4c7c 3e 00				ld a, 0 
4c7e 32 f7 f0				ld (scratch+1), a 
4c81			 
4c81 21 f6 f0				ld hl, scratch 
4c84 cd b4 20				call forth_push_str 
4c87			 
4c87			 
4c87				       NEXTW 
4c87 c3 37 24			jp macro_next 
4c8a				endm 
# End of macro NEXTW
4c8a			 
4c8a			 
4c8a			 
4c8a			 
4c8a			.ENDSTR: 
4c8a			; eof 
4c8a			 
# End of file forth_words_str.asm
4c8a			include "forth_words_key.asm" 
4c8a			 
4c8a			; | ## Keyboard Words 
4c8a			 
4c8a			.KEY: 
4c8a				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
4c8a 3e				db WORD_SYS_CORE+42             
4c8b ba 4c			dw .WAITK            
4c8d 04				db 3 + 1 
4c8e .. 00			db "KEY",0              
4c92				endm 
# End of macro CWHEAD
4c92			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4c92			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4c92			; | | Can use something like this to process: 
4c92			; | | > repeat active . key ?dup if emit then #1 until  
4c92			 
4c92					if DEBUG_FORTH_WORDS_KEY 
4c92						DMARK "KEY" 
4c92 f5				push af  
4c93 3a a7 4c			ld a, (.dmark)  
4c96 32 a0 fd			ld (debug_mark),a  
4c99 3a a8 4c			ld a, (.dmark+1)  
4c9c 32 a1 fd			ld (debug_mark+1),a  
4c9f 3a a9 4c			ld a, (.dmark+2)  
4ca2 32 a2 fd			ld (debug_mark+2),a  
4ca5 18 03			jr .pastdmark  
4ca7 ..			.dmark: db "KEY"  
4caa f1			.pastdmark: pop af  
4cab			endm  
# End of macro DMARK
4cab						CALLMONITOR 
4cab cd aa fd			call debug_vector  
4cae				endm  
# End of macro CALLMONITOR
4cae					endif 
4cae			; TODO currently waits 
4cae cd 4d 73				call cin 
4cb1					;call cin_wait 
4cb1 6f					ld l, a 
4cb2 26 00				ld h, 0 
4cb4 cd 46 20				call forth_push_numhl 
4cb7					NEXTW 
4cb7 c3 37 24			jp macro_next 
4cba				endm 
# End of macro NEXTW
4cba			.WAITK: 
4cba				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4cba 3f				db WORD_SYS_CORE+43             
4cbb ec 4c			dw .ACCEPT            
4cbd 06				db 5 + 1 
4cbe .. 00			db "WAITK",0              
4cc4				endm 
# End of macro CWHEAD
4cc4			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4cc4					if DEBUG_FORTH_WORDS_KEY 
4cc4						DMARK "WAI" 
4cc4 f5				push af  
4cc5 3a d9 4c			ld a, (.dmark)  
4cc8 32 a0 fd			ld (debug_mark),a  
4ccb 3a da 4c			ld a, (.dmark+1)  
4cce 32 a1 fd			ld (debug_mark+1),a  
4cd1 3a db 4c			ld a, (.dmark+2)  
4cd4 32 a2 fd			ld (debug_mark+2),a  
4cd7 18 03			jr .pastdmark  
4cd9 ..			.dmark: db "WAI"  
4cdc f1			.pastdmark: pop af  
4cdd			endm  
# End of macro DMARK
4cdd						CALLMONITOR 
4cdd cd aa fd			call debug_vector  
4ce0				endm  
# End of macro CALLMONITOR
4ce0					endif 
4ce0 cd 3c 73				call cin_wait 
4ce3 6f					ld l, a 
4ce4 26 00				ld h, 0 
4ce6 cd 46 20				call forth_push_numhl 
4ce9					NEXTW 
4ce9 c3 37 24			jp macro_next 
4cec				endm 
# End of macro NEXTW
4cec			.ACCEPT: 
4cec				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4cec 40				db WORD_SYS_CORE+44             
4ced 4a 4d			dw .EDIT            
4cef 07				db 6 + 1 
4cf0 .. 00			db "ACCEPT",0              
4cf7				endm 
# End of macro CWHEAD
4cf7			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4cf7					; TODO crashes on push 
4cf7					if DEBUG_FORTH_WORDS_KEY 
4cf7						DMARK "ACC" 
4cf7 f5				push af  
4cf8 3a 0c 4d			ld a, (.dmark)  
4cfb 32 a0 fd			ld (debug_mark),a  
4cfe 3a 0d 4d			ld a, (.dmark+1)  
4d01 32 a1 fd			ld (debug_mark+1),a  
4d04 3a 0e 4d			ld a, (.dmark+2)  
4d07 32 a2 fd			ld (debug_mark+2),a  
4d0a 18 03			jr .pastdmark  
4d0c ..			.dmark: db "ACC"  
4d0f f1			.pastdmark: pop af  
4d10			endm  
# End of macro DMARK
4d10						CALLMONITOR 
4d10 cd aa fd			call debug_vector  
4d13				endm  
# End of macro CALLMONITOR
4d13					endif 
4d13 21 f4 f2				ld hl, os_input 
4d16 3e 00				ld a, 0 
4d18 77					ld (hl),a 
4d19 3a 93 f9				ld a,(f_cursor_ptr) 
4d1c 16 64				ld d, 100 
4d1e 0e 00				ld c, 0 
4d20 1e 28				ld e, 40 
4d22 cd 0b 10				call input_str 
4d25					; TODO perhaps do a type check and wrap in quotes if not a number 
4d25 21 f4 f2				ld hl, os_input 
4d28					if DEBUG_FORTH_WORDS 
4d28						DMARK "AC1" 
4d28 f5				push af  
4d29 3a 3d 4d			ld a, (.dmark)  
4d2c 32 a0 fd			ld (debug_mark),a  
4d2f 3a 3e 4d			ld a, (.dmark+1)  
4d32 32 a1 fd			ld (debug_mark+1),a  
4d35 3a 3f 4d			ld a, (.dmark+2)  
4d38 32 a2 fd			ld (debug_mark+2),a  
4d3b 18 03			jr .pastdmark  
4d3d ..			.dmark: db "AC1"  
4d40 f1			.pastdmark: pop af  
4d41			endm  
# End of macro DMARK
4d41						CALLMONITOR 
4d41 cd aa fd			call debug_vector  
4d44				endm  
# End of macro CALLMONITOR
4d44					endif 
4d44 cd b4 20				call forth_push_str 
4d47					NEXTW 
4d47 c3 37 24			jp macro_next 
4d4a				endm 
# End of macro NEXTW
4d4a			 
4d4a			.EDIT: 
4d4a				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4d4a 40				db WORD_SYS_CORE+44             
4d4b ec 4d			dw .DEDIT            
4d4d 05				db 4 + 1 
4d4e .. 00			db "EDIT",0              
4d53				endm 
# End of macro CWHEAD
4d53			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4d53			 
4d53					; TODO does not copy from stack 
4d53					if DEBUG_FORTH_WORDS_KEY 
4d53						DMARK "EDT" 
4d53 f5				push af  
4d54 3a 68 4d			ld a, (.dmark)  
4d57 32 a0 fd			ld (debug_mark),a  
4d5a 3a 69 4d			ld a, (.dmark+1)  
4d5d 32 a1 fd			ld (debug_mark+1),a  
4d60 3a 6a 4d			ld a, (.dmark+2)  
4d63 32 a2 fd			ld (debug_mark+2),a  
4d66 18 03			jr .pastdmark  
4d68 ..			.dmark: db "EDT"  
4d6b f1			.pastdmark: pop af  
4d6c			endm  
# End of macro DMARK
4d6c						CALLMONITOR 
4d6c cd aa fd			call debug_vector  
4d6f				endm  
# End of macro CALLMONITOR
4d6f					endif 
4d6f			 
4d6f					;FORTH_DSP 
4d6f					FORTH_DSP_VALUEHL 
4d6f cd 4b 22			call macro_dsp_valuehl 
4d72				endm 
# End of macro FORTH_DSP_VALUEHL
4d72			;		inc hl    ; TODO do type check 
4d72			 
4d72			;		call get_word_hl 
4d72 e5					push hl 
4d73					if DEBUG_FORTH_WORDS 
4d73						DMARK "EDp" 
4d73 f5				push af  
4d74 3a 88 4d			ld a, (.dmark)  
4d77 32 a0 fd			ld (debug_mark),a  
4d7a 3a 89 4d			ld a, (.dmark+1)  
4d7d 32 a1 fd			ld (debug_mark+1),a  
4d80 3a 8a 4d			ld a, (.dmark+2)  
4d83 32 a2 fd			ld (debug_mark+2),a  
4d86 18 03			jr .pastdmark  
4d88 ..			.dmark: db "EDp"  
4d8b f1			.pastdmark: pop af  
4d8c			endm  
# End of macro DMARK
4d8c						CALLMONITOR 
4d8c cd aa fd			call debug_vector  
4d8f				endm  
# End of macro CALLMONITOR
4d8f					endif 
4d8f				;	ld a, 0 
4d8f cd 44 13				call strlenz 
4d92 23					inc hl 
4d93			 
4d93 06 00				ld b, 0 
4d95 4d					ld c, l 
4d96			 
4d96 e1					pop hl 
4d97 11 f4 f2				ld de, os_input 
4d9a					if DEBUG_FORTH_WORDS_KEY 
4d9a						DMARK "EDc" 
4d9a f5				push af  
4d9b 3a af 4d			ld a, (.dmark)  
4d9e 32 a0 fd			ld (debug_mark),a  
4da1 3a b0 4d			ld a, (.dmark+1)  
4da4 32 a1 fd			ld (debug_mark+1),a  
4da7 3a b1 4d			ld a, (.dmark+2)  
4daa 32 a2 fd			ld (debug_mark+2),a  
4dad 18 03			jr .pastdmark  
4daf ..			.dmark: db "EDc"  
4db2 f1			.pastdmark: pop af  
4db3			endm  
# End of macro DMARK
4db3						CALLMONITOR 
4db3 cd aa fd			call debug_vector  
4db6				endm  
# End of macro CALLMONITOR
4db6					endif 
4db6 ed b0				ldir 
4db8			 
4db8			 
4db8 21 f4 f2				ld hl, os_input 
4dbb					;ld a, 0 
4dbb					;ld (hl),a 
4dbb 3a 93 f9				ld a,(f_cursor_ptr) 
4dbe 16 64				ld d, 100 
4dc0 0e 00				ld c, 0 
4dc2 1e 28				ld e, 40 
4dc4 cd 0b 10				call input_str 
4dc7					; TODO perhaps do a type check and wrap in quotes if not a number 
4dc7 21 f4 f2				ld hl, os_input 
4dca					if DEBUG_FORTH_WORDS 
4dca						DMARK "ED1" 
4dca f5				push af  
4dcb 3a df 4d			ld a, (.dmark)  
4dce 32 a0 fd			ld (debug_mark),a  
4dd1 3a e0 4d			ld a, (.dmark+1)  
4dd4 32 a1 fd			ld (debug_mark+1),a  
4dd7 3a e1 4d			ld a, (.dmark+2)  
4dda 32 a2 fd			ld (debug_mark+2),a  
4ddd 18 03			jr .pastdmark  
4ddf ..			.dmark: db "ED1"  
4de2 f1			.pastdmark: pop af  
4de3			endm  
# End of macro DMARK
4de3						CALLMONITOR 
4de3 cd aa fd			call debug_vector  
4de6				endm  
# End of macro CALLMONITOR
4de6					endif 
4de6 cd b4 20				call forth_push_str 
4de9					NEXTW 
4de9 c3 37 24			jp macro_next 
4dec				endm 
# End of macro NEXTW
4dec			 
4dec			.DEDIT: 
4dec				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4dec 40				db WORD_SYS_CORE+44             
4ded 4e 4e			dw .ENDKEY            
4def 06				db 5 + 1 
4df0 .. 00			db "DEDIT",0              
4df6				endm 
# End of macro CWHEAD
4df6			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
4df6			 
4df6					; TODO does not copy from stack 
4df6					if DEBUG_FORTH_WORDS_KEY 
4df6						DMARK "DED" 
4df6 f5				push af  
4df7 3a 0b 4e			ld a, (.dmark)  
4dfa 32 a0 fd			ld (debug_mark),a  
4dfd 3a 0c 4e			ld a, (.dmark+1)  
4e00 32 a1 fd			ld (debug_mark+1),a  
4e03 3a 0d 4e			ld a, (.dmark+2)  
4e06 32 a2 fd			ld (debug_mark+2),a  
4e09 18 03			jr .pastdmark  
4e0b ..			.dmark: db "DED"  
4e0e f1			.pastdmark: pop af  
4e0f			endm  
# End of macro DMARK
4e0f						CALLMONITOR 
4e0f cd aa fd			call debug_vector  
4e12				endm  
# End of macro CALLMONITOR
4e12					endif 
4e12			 
4e12					;FORTH_DSP 
4e12					FORTH_DSP_VALUEHL 
4e12 cd 4b 22			call macro_dsp_valuehl 
4e15				endm 
# End of macro FORTH_DSP_VALUEHL
4e15			;		inc hl    ; TODO do type check 
4e15			 
4e15			;		call get_word_hl 
4e15 e5					push hl 
4e16 e5					push hl 
4e17					FORTH_DSP_POP 
4e17 cd 03 23			call macro_forth_dsp_pop 
4e1a				endm 
# End of macro FORTH_DSP_POP
4e1a e1					pop hl 
4e1b					if DEBUG_FORTH_WORDS 
4e1b						DMARK "EDp" 
4e1b f5				push af  
4e1c 3a 30 4e			ld a, (.dmark)  
4e1f 32 a0 fd			ld (debug_mark),a  
4e22 3a 31 4e			ld a, (.dmark+1)  
4e25 32 a1 fd			ld (debug_mark+1),a  
4e28 3a 32 4e			ld a, (.dmark+2)  
4e2b 32 a2 fd			ld (debug_mark+2),a  
4e2e 18 03			jr .pastdmark  
4e30 ..			.dmark: db "EDp"  
4e33 f1			.pastdmark: pop af  
4e34			endm  
# End of macro DMARK
4e34						CALLMONITOR 
4e34 cd aa fd			call debug_vector  
4e37				endm  
# End of macro CALLMONITOR
4e37					endif 
4e37				;	ld a, 0 
4e37 cd 44 13				call strlenz 
4e3a 23					inc hl 
4e3b			 
4e3b 06 00				ld b, 0 
4e3d 4d					ld c, l 
4e3e			 
4e3e e1					pop hl 
4e3f			 
4e3f					;ld a, 0 
4e3f					;ld (hl),a 
4e3f 3a 93 f9				ld a,(f_cursor_ptr) 
4e42 16 64				ld d, 100 
4e44 0e 00				ld c, 0 
4e46 1e 28				ld e, 40 
4e48 cd 0b 10				call input_str 
4e4b					; TODO perhaps do a type check and wrap in quotes if not a number 
4e4b					NEXTW 
4e4b c3 37 24			jp macro_next 
4e4e				endm 
# End of macro NEXTW
4e4e			 
4e4e			 
4e4e			.ENDKEY: 
4e4e			; eof 
4e4e			 
# End of file forth_words_key.asm
4e4e			include "forth_words_const.asm" 
4e4e			 
4e4e			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4e4e			 
4e4e			 
4e4e			.SPITIME: 
4e4e				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4e4e 77				db WORD_SYS_CORE+99             
4e4f 63 4e			dw .VA            
4e51 08				db 7 + 1 
4e52 .. 00			db "SPITIME",0              
4e5a				endm 
# End of macro CWHEAD
4e5a			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4e5a			; 
4e5a			; | | If using BANK devices then leave as is. 
4e5a			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4e5a			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4e5a			 
4e5a 21 99 f9				ld hl, spi_clktime  
4e5d cd 46 20				call forth_push_numhl 
4e60			 
4e60					NEXTW 
4e60 c3 37 24			jp macro_next 
4e63				endm 
# End of macro NEXTW
4e63			 
4e63			 
4e63			.VA: 
4e63				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4e63 77				db WORD_SYS_CORE+99             
4e64 73 4e			dw .SYMBOL            
4e66 03				db 2 + 1 
4e67 .. 00			db "VA",0              
4e6a				endm 
# End of macro CWHEAD
4e6a			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4e6a 21 5d f9				ld hl, cli_var_array 
4e6d cd 46 20				call forth_push_numhl 
4e70			 
4e70					NEXTW 
4e70 c3 37 24			jp macro_next 
4e73				endm 
# End of macro NEXTW
4e73			 
4e73			.SYMBOL: 
4e73				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4e73 77				db WORD_SYS_CORE+99             
4e74 7d 4f			dw .ENDCONST            
4e76 07				db 6 + 1 
4e77 .. 00			db "SYMBOL",0              
4e7e				endm 
# End of macro CWHEAD
4e7e			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4e7e			; | 
4e7e			; | | The value is the number reference and the final address is pushed to stack 
4e7e			 
4e7e			; | | ``` 
4e7e			; | | dw sym_table 
4e7e			; | | dw nmi_vector 
4e7e			; | | dw cli_autodisplay 
4e7e			; | | dw cli_data_sp 
4e7e			; | | dw cli_data_stack 
4e7e			; | | dw cli_loop_sp 
4e7e			; | | dw cli_loop_stack 
4e7e			; | | dw cli_var_array 
4e7e			; | | dw cursor_col 
4e7e			; | | dw cursor_ptr 
4e7e			; | | ; 10 
4e7e			; | | dw cursor_row 
4e7e			; | | dw debug_mark 
4e7e			; | | dw display_fb0 
4e7e			; | | dw display_fb1 
4e7e			; | | dw display_fb2 
4e7e			; | | dw display_fb3 
4e7e			; | | dw display_fb_active 
4e7e			; | | dw execscratch 
4e7e			; | | dw f_cursor_ptr 
4e7e			; | | dw hardware_word 
4e7e			; | | ;20 
4e7e			; | | dw input_at_cursor 
4e7e			; | | dw input_at_pos 
4e7e			; | | dw input_cur_flash 
4e7e			; | | dw input_cur_onoff 
4e7e			; | | dw input_cursor 
4e7e			; | | dw input_display_size 
4e7e			; | | dw input_len 
4e7e			; | | dw input_ptr 
4e7e			; | | dw input_size 
4e7e			; | | dw input_start 
4e7e			; | | ; 30 
4e7e			; | | dw input_str 
4e7e			; | | dw input_under_cursor 
4e7e			; | | dw os_cli_cmd 
4e7e			; | | dw os_cur_ptr 
4e7e			; | | dw os_current_i 
4e7e			; | | dw os_input 
4e7e			; | | dw os_last_cmd 
4e7e			; | | dw os_last_new_uword 
4e7e			; | | dw debug_vector 
4e7e			; | | dw os_view_hl 
4e7e			; | | ;40 
4e7e			; | | dw os_word_scratch 
4e7e			; | | dw portbctl 
4e7e			; | | dw portbdata 
4e7e			; | | dw spi_cartdev 
4e7e			; | | dw spi_cartdev2 
4e7e			; | | dw spi_clktime 
4e7e			; | | dw spi_device 
4e7e			; | | dw spi_device_id 
4e7e			; | | dw spi_portbyte 
4e7e			; | | dw stackstore 
4e7e			; | | ; 50 
4e7e			; | | if STORAGE_SE 
4e7e			; | | dw storage_actl 
4e7e			; | | dw storage_adata 
4e7e			; | | else 
4e7e			; | | dw 0 
4e7e			; | | dw 0 
4e7e			; | | endif 
4e7e			; | | dw storage_append 
4e7e			; | | if STORAGE_SE 
4e7e			; | | dw storage_bctl 
4e7e			; | | else 
4e7e			; | | dw 0 
4e7e			; | | endif 
4e7e			; | | dw store_bank_active 
4e7e			; | | dw store_filecache 
4e7e			; | | dw store_longread 
4e7e			; | | dw store_openaddr 
4e7e			; | | dw store_openext 
4e7e			; | | dw store_openmaxext 
4e7e			; | | ; 60 
4e7e			; | | dw store_page 
4e7e			; | | dw store_readbuf 
4e7e			; | | dw store_readcont 
4e7e			; | | dw store_readptr 
4e7e			; | | dw store_tmpext 
4e7e			; | | dw store_tmpid 
4e7e			; | | dw store_tmppageid 
4e7e			; | | dw malloc 
4e7e			; | | dw free 
4e7e			; | | dw cin 
4e7e			; | | ; 70 
4e7e			; | | dw cin_wait 
4e7e			; | | dw forth_push_numhl 
4e7e			; | | dw forth_push_str 
4e7e			; | | ``` 
4e7e			 
4e7e					if DEBUG_FORTH_WORDS_KEY 
4e7e						DMARK "SYM" 
4e7e f5				push af  
4e7f 3a 93 4e			ld a, (.dmark)  
4e82 32 a0 fd			ld (debug_mark),a  
4e85 3a 94 4e			ld a, (.dmark+1)  
4e88 32 a1 fd			ld (debug_mark+1),a  
4e8b 3a 95 4e			ld a, (.dmark+2)  
4e8e 32 a2 fd			ld (debug_mark+2),a  
4e91 18 03			jr .pastdmark  
4e93 ..			.dmark: db "SYM"  
4e96 f1			.pastdmark: pop af  
4e97			endm  
# End of macro DMARK
4e97						CALLMONITOR 
4e97 cd aa fd			call debug_vector  
4e9a				endm  
# End of macro CALLMONITOR
4e9a					endif 
4e9a			 
4e9a					FORTH_DSP_VALUEHL 
4e9a cd 4b 22			call macro_dsp_valuehl 
4e9d				endm 
# End of macro FORTH_DSP_VALUEHL
4e9d			 
4e9d 7d					ld a, l     
4e9e			 
4e9e			 
4e9e					if DEBUG_FORTH_WORDS 
4e9e						DMARK "SY1" 
4e9e f5				push af  
4e9f 3a b3 4e			ld a, (.dmark)  
4ea2 32 a0 fd			ld (debug_mark),a  
4ea5 3a b4 4e			ld a, (.dmark+1)  
4ea8 32 a1 fd			ld (debug_mark+1),a  
4eab 3a b5 4e			ld a, (.dmark+2)  
4eae 32 a2 fd			ld (debug_mark+2),a  
4eb1 18 03			jr .pastdmark  
4eb3 ..			.dmark: db "SY1"  
4eb6 f1			.pastdmark: pop af  
4eb7			endm  
# End of macro DMARK
4eb7						CALLMONITOR 
4eb7 cd aa fd			call debug_vector  
4eba				endm  
# End of macro CALLMONITOR
4eba					endif 
4eba					 
4eba f5					push af	 
4ebb					FORTH_DSP_POP 
4ebb cd 03 23			call macro_forth_dsp_pop 
4ebe				endm 
# End of macro FORTH_DSP_POP
4ebe f1					pop af 
4ebf			 
4ebf cb 27				sla a  
4ec1				 
4ec1					 
4ec1					if DEBUG_FORTH_WORDS 
4ec1						DMARK "SY" 
4ec1 f5				push af  
4ec2 3a d6 4e			ld a, (.dmark)  
4ec5 32 a0 fd			ld (debug_mark),a  
4ec8 3a d7 4e			ld a, (.dmark+1)  
4ecb 32 a1 fd			ld (debug_mark+1),a  
4ece 3a d8 4e			ld a, (.dmark+2)  
4ed1 32 a2 fd			ld (debug_mark+2),a  
4ed4 18 02			jr .pastdmark  
4ed6 ..			.dmark: db "SY"  
4ed8 f1			.pastdmark: pop af  
4ed9			endm  
# End of macro DMARK
4ed9						CALLMONITOR 
4ed9 cd aa fd			call debug_vector  
4edc				endm  
# End of macro CALLMONITOR
4edc					endif 
4edc			 
4edc 21 eb 4e				ld hl, sym_table 
4edf cd de 0f				call addatohl 
4ee2 cd b9 23				call loadwordinhl 
4ee5 cd 46 20				call forth_push_numhl 
4ee8			 
4ee8			 
4ee8				       NEXTW 
4ee8 c3 37 24			jp macro_next 
4eeb				endm 
# End of macro NEXTW
4eeb			 
4eeb			sym_table: 
4eeb			 
4eeb			; 0 
4eeb eb 4e		dw sym_table 
4eed ad fd		dw nmi_vector 
4eef 71 f9		dw cli_autodisplay 
4ef1 23 f9		dw cli_data_sp 
4ef3 5d f6		dw cli_data_stack 
4ef5 25 f9		dw cli_loop_sp 
4ef7 5f f8		dw cli_loop_stack 
4ef9 5d f9		dw cli_var_array 
4efb fa fa		dw cursor_col 
4efd f8 fa		dw cursor_ptr 
4eff			; 10 
4eff f9 fa		dw cursor_row 
4f01 a0 fd		dw debug_mark 
4f03 e6 fc		dw display_fb0 
4f05 45 fc		dw display_fb1 
4f07 03 fb		dw display_fb2 
4f09 a4 fb		dw display_fb3 
4f0b 01 fb		dw display_fb_active 
4f0d f5 f1		dw execscratch 
4f0f 93 f9		dw f_cursor_ptr 
4f11 b0 fd		dw hardware_word 
4f13			;20 
4f13 97 fd		dw input_at_cursor 
4f15 99 fd		dw input_at_pos 
4f17 95 fd		dw input_cur_flash 
4f19 94 fd		dw input_cur_onoff 
4f1b 8a fd		dw input_cursor 
4f1d 9a fd		dw input_display_size 
4f1f 8f fd		dw input_len 
4f21 9e fd		dw input_ptr 
4f23 9b fd		dw input_size 
4f25 9c fd		dw input_start 
4f27			; 30 
4f27 0b 10		dw input_str 
4f29 98 fd		dw input_under_cursor 
4f2b 1d f4		dw os_cli_cmd 
4f2d 19 f4		dw os_cur_ptr 
4f2f 1b f4		dw os_current_i 
4f31 f4 f2		dw os_input 
4f33 1c f5		dw os_last_cmd 
4f35 f3 f3		dw os_last_new_uword 
4f37 aa fd		dw debug_vector 
4f39 d8 f0		dw os_view_hl 
4f3b			;40 
4f3b fb f3		dw os_word_scratch 
4f3d c3 00		dw portbctl 
4f3f c1 00		dw portbdata 
4f41 98 f9		dw spi_cartdev 
4f43 97 f9		dw spi_cartdev2 
4f45 99 f9		dw spi_clktime 
4f47 95 f9		dw spi_device 
4f49 94 f9		dw spi_device_id 
4f4b 96 f9		dw spi_portbyte 
4f4d dc fa		dw stackstore 
4f4f			; 50 
4f4f			if STORAGE_SE 
4f4f 82 00		dw storage_actl 
4f51 80 00		dw storage_adata 
4f53			else 
4f53			dw 0 
4f53			dw 0 
4f53			endif 
4f53 64 0b		dw storage_append 
4f55			if STORAGE_SE 
4f55 83 00		dw storage_bctl 
4f57			else 
4f57			dw 0 
4f57			endif 
4f57 c8 fa		dw store_bank_active 
4f59 9c f9		dw store_filecache 
4f5b aa f9		dw store_longread 
4f5d a0 f9		dw store_openaddr 
4f5f 9f f9		dw store_openext 
4f61 9e f9		dw store_openmaxext 
4f63			; 60 
4f63 af f9		dw store_page 
4f65 ab f9		dw store_readbuf 
4f67 a2 f9		dw store_readcont 
4f69 ad f9		dw store_readptr 
4f6b a2 f9		dw store_tmpext 
4f6d a3 f9		dw store_tmpid 
4f6f 9a f9		dw store_tmppageid 
4f71 b9 13		dw malloc 
4f73 83 14		dw free 
4f75 4d 73		dw cin 
4f77			; 70 
4f77 3c 73		dw cin_wait 
4f79 46 20		dw forth_push_numhl 
4f7b b4 20		dw forth_push_str 
4f7d			 
4f7d			 
4f7d			.ENDCONST: 
4f7d			 
4f7d			; eof 
4f7d			 
4f7d			 
# End of file forth_words_const.asm
4f7d			 
4f7d			if STORAGE_SE 
4f7d			   	include "forth_words_storage.asm" 
4f7d			 
4f7d			; | ## Fixed Storage Words 
4f7d			 
4f7d			.RENAME: 
4f7d			  
4f7d				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
4f7d 3a				db WORD_SYS_CORE+38             
4f7e 73 50			dw .RECORD            
4f80 07				db 6 + 1 
4f81 .. 00			db "RENAME",0              
4f88				endm 
# End of macro CWHEAD
4f88			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
4f88			; | | > [!NOTE] 
4f88			; | | > Compatible with PicoSPINet  
4f88					if DEBUG_FORTH_WORDS_KEY 
4f88						DMARK "REN" 
4f88 f5				push af  
4f89 3a 9d 4f			ld a, (.dmark)  
4f8c 32 a0 fd			ld (debug_mark),a  
4f8f 3a 9e 4f			ld a, (.dmark+1)  
4f92 32 a1 fd			ld (debug_mark+1),a  
4f95 3a 9f 4f			ld a, (.dmark+2)  
4f98 32 a2 fd			ld (debug_mark+2),a  
4f9b 18 03			jr .pastdmark  
4f9d ..			.dmark: db "REN"  
4fa0 f1			.pastdmark: pop af  
4fa1			endm  
# End of macro DMARK
4fa1						CALLMONITOR 
4fa1 cd aa fd			call debug_vector  
4fa4				endm  
# End of macro CALLMONITOR
4fa4					endif 
4fa4			 
4fa4			 
4fa4					; preserve some internal vars used by other file handing routines 
4fa4			 
4fa4 2a a0 f9				ld hl, (store_openaddr) 
4fa7 e5					push hl 
4fa8 3a a2 f9				ld a, (store_readcont) 
4fab f5					push af 
4fac			 
4fac					FORTH_DSP_VALUEHL 
4fac cd 4b 22			call macro_dsp_valuehl 
4faf				endm 
# End of macro FORTH_DSP_VALUEHL
4faf			 
4faf					; move ext and id around for the file header 
4faf			 
4faf 65					ld h, l 
4fb0 2e 00				ld l, 0 
4fb2			 
4fb2 e5					push hl    ; id 
4fb3			 
4fb3					FORTH_DSP_POP 
4fb3 cd 03 23			call macro_forth_dsp_pop 
4fb6				endm 
# End of macro FORTH_DSP_POP
4fb6			 
4fb6					; Locate the file header 
4fb6			 
4fb6 e1					pop hl 
4fb7 e5					push hl 
4fb8 11 af f9				ld de, store_page      ; get block zero of file 
4fbb					if DEBUG_FORTH_WORDS 
4fbb						DMARK "REr" 
4fbb f5				push af  
4fbc 3a d0 4f			ld a, (.dmark)  
4fbf 32 a0 fd			ld (debug_mark),a  
4fc2 3a d1 4f			ld a, (.dmark+1)  
4fc5 32 a1 fd			ld (debug_mark+1),a  
4fc8 3a d2 4f			ld a, (.dmark+2)  
4fcb 32 a2 fd			ld (debug_mark+2),a  
4fce 18 03			jr .pastdmark  
4fd0 ..			.dmark: db "REr"  
4fd3 f1			.pastdmark: pop af  
4fd4			endm  
# End of macro DMARK
4fd4						CALLMONITOR 
4fd4 cd aa fd			call debug_vector  
4fd7				endm  
# End of macro CALLMONITOR
4fd7					endif 
4fd7 cd cd 09				call storage_read 
4fda			 
4fda cd 07 10			call ishlzero 
4fdd 20 05			jr nz, .rnfound 
4fdf			 
4fdf				; file does not exist so indicate with 255 extents in use 
4fdf			 
4fdf 3e ff			ld a, 255 
4fe1 e1				pop hl ; clear dup hl 
4fe2 18 7b			jr .skiprneof 
4fe4			 
4fe4			 
4fe4			.rnfound: 
4fe4					; file found so rename 
4fe4			 
4fe4					FORTH_DSP_VALUEHL 
4fe4 cd 4b 22			call macro_dsp_valuehl 
4fe7				endm 
# End of macro FORTH_DSP_VALUEHL
4fe7			 
4fe7 e5				push hl 
4fe8 3e 00			ld a, 0 
4fea cd 4f 13			call strlent 
4fed 23				inc hl   ; cover zero term 
4fee 06 00			ld b,0 
4ff0 4d				ld c,l 
4ff1 e1				pop hl 
4ff2 11 b2 f9				ld de, store_page + 3 
4ff5 ed b0				ldir 
4ff7			 
4ff7 11 af f9				ld de, store_page 
4ffa					if DEBUG_FORTH_WORDS 
4ffa						DMARK "RER" 
4ffa f5				push af  
4ffb 3a 0f 50			ld a, (.dmark)  
4ffe 32 a0 fd			ld (debug_mark),a  
5001 3a 10 50			ld a, (.dmark+1)  
5004 32 a1 fd			ld (debug_mark+1),a  
5007 3a 11 50			ld a, (.dmark+2)  
500a 32 a2 fd			ld (debug_mark+2),a  
500d 18 03			jr .pastdmark  
500f ..			.dmark: db "RER"  
5012 f1			.pastdmark: pop af  
5013			endm  
# End of macro DMARK
5013						CALLMONITOR 
5013 cd aa fd			call debug_vector  
5016				endm  
# End of macro CALLMONITOR
5016					endif 
5016			 
5016 e1					pop hl    ; get orig file id and mangle it for find id 
5017 55					ld d, l 
5018 5c					ld e, h 
5019			 
5019 21 00 00				ld hl, 0 
501c					if DEBUG_FORTH_WORDS 
501c						DMARK "REf" 
501c f5				push af  
501d 3a 31 50			ld a, (.dmark)  
5020 32 a0 fd			ld (debug_mark),a  
5023 3a 32 50			ld a, (.dmark+1)  
5026 32 a1 fd			ld (debug_mark+1),a  
5029 3a 33 50			ld a, (.dmark+2)  
502c 32 a2 fd			ld (debug_mark+2),a  
502f 18 03			jr .pastdmark  
5031 ..			.dmark: db "REf"  
5034 f1			.pastdmark: pop af  
5035			endm  
# End of macro DMARK
5035						CALLMONITOR 
5035 cd aa fd			call debug_vector  
5038				endm  
# End of macro CALLMONITOR
5038					endif 
5038 cd a7 07				call storage_findnextid 
503b 11 af f9				ld de, store_page 
503e					if DEBUG_FORTH_WORDS 
503e						DMARK "REw" 
503e f5				push af  
503f 3a 53 50			ld a, (.dmark)  
5042 32 a0 fd			ld (debug_mark),a  
5045 3a 54 50			ld a, (.dmark+1)  
5048 32 a1 fd			ld (debug_mark+1),a  
504b 3a 55 50			ld a, (.dmark+2)  
504e 32 a2 fd			ld (debug_mark+2),a  
5051 18 03			jr .pastdmark  
5053 ..			.dmark: db "REw"  
5056 f1			.pastdmark: pop af  
5057			endm  
# End of macro DMARK
5057						CALLMONITOR 
5057 cd aa fd			call debug_vector  
505a				endm  
# End of macro CALLMONITOR
505a					endif 
505a cd d9 04				call storage_write_block 
505d			 
505d 3e 00				ld a, 0 
505f			.skiprneof: 
505f					; drop file name 
505f					FORTH_DSP_POP 
505f cd 03 23			call macro_forth_dsp_pop 
5062				endm 
# End of macro FORTH_DSP_POP
5062			 
5062 6f					ld l, a 
5063 26 00				ld h, 0 
5065 cd 46 20				call forth_push_numhl 
5068			 
5068			 
5068 f1					pop af 
5069 32 a2 f9				ld (store_readcont),a 
506c e1					pop hl 
506d 22 a0 f9				ld (store_openaddr), hl 
5070						 
5070				NEXTW 
5070 c3 37 24			jp macro_next 
5073				endm 
# End of macro NEXTW
5073			.RECORD: 
5073			  
5073				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
5073 3a				db WORD_SYS_CORE+38             
5074 17 51			dw .BREAD            
5076 07				db 6 + 1 
5077 .. 00			db "RECORD",0              
507e				endm 
# End of macro CWHEAD
507e			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
507e			; | | > [!NOTE] 
507e			; | | > Compatible with PicoSPINet  
507e			 
507e					if DEBUG_FORTH_WORDS_KEY 
507e						DMARK "REC" 
507e f5				push af  
507f 3a 93 50			ld a, (.dmark)  
5082 32 a0 fd			ld (debug_mark),a  
5085 3a 94 50			ld a, (.dmark+1)  
5088 32 a1 fd			ld (debug_mark+1),a  
508b 3a 95 50			ld a, (.dmark+2)  
508e 32 a2 fd			ld (debug_mark+2),a  
5091 18 03			jr .pastdmark  
5093 ..			.dmark: db "REC"  
5096 f1			.pastdmark: pop af  
5097			endm  
# End of macro DMARK
5097						CALLMONITOR 
5097 cd aa fd			call debug_vector  
509a				endm  
# End of macro CALLMONITOR
509a					endif 
509a			 
509a					FORTH_DSP_VALUEHL 
509a cd 4b 22			call macro_dsp_valuehl 
509d				endm 
# End of macro FORTH_DSP_VALUEHL
509d			 
509d e5					push hl    ; id 
509e			 
509e					FORTH_DSP_POP 
509e cd 03 23			call macro_forth_dsp_pop 
50a1				endm 
# End of macro FORTH_DSP_POP
50a1			 
50a1					FORTH_DSP_VALUEHL 
50a1 cd 4b 22			call macro_dsp_valuehl 
50a4				endm 
# End of macro FORTH_DSP_VALUEHL
50a4			 
50a4					FORTH_DSP_POP 
50a4 cd 03 23			call macro_forth_dsp_pop 
50a7				endm 
# End of macro FORTH_DSP_POP
50a7			 
50a7 d1					pop de     ; get file id 
50a8			 
50a8					; e = file id 
50a8					; l = file extent 
50a8			 
50a8			 
50a8					; construct request to access file extent 
50a8			 
50a8			;		ld a, e 
50a8 63					ld h, e 
50a9					 
50a9					 
50a9					 
50a9			 
50a9					; e has id 
50a9			 
50a9 11 af f9			ld de, store_page 
50ac					if DEBUG_FORTH_WORDS 
50ac						DMARK "REr" 
50ac f5				push af  
50ad 3a c1 50			ld a, (.dmark)  
50b0 32 a0 fd			ld (debug_mark),a  
50b3 3a c2 50			ld a, (.dmark+1)  
50b6 32 a1 fd			ld (debug_mark+1),a  
50b9 3a c3 50			ld a, (.dmark+2)  
50bc 32 a2 fd			ld (debug_mark+2),a  
50bf 18 03			jr .pastdmark  
50c1 ..			.dmark: db "REr"  
50c4 f1			.pastdmark: pop af  
50c5			endm  
# End of macro DMARK
50c5						CALLMONITOR 
50c5 cd aa fd			call debug_vector  
50c8				endm  
# End of macro CALLMONITOR
50c8					endif 
50c8 cd cd 09				call storage_read 
50cb cd 07 10			call ishlzero 
50ce 28 22			jr z, .recnotfound 
50d0			 
50d0			 
50d0					if DEBUG_FORTH_WORDS 
50d0						DMARK "REe" 
50d0 f5				push af  
50d1 3a e5 50			ld a, (.dmark)  
50d4 32 a0 fd			ld (debug_mark),a  
50d7 3a e6 50			ld a, (.dmark+1)  
50da 32 a1 fd			ld (debug_mark+1),a  
50dd 3a e7 50			ld a, (.dmark+2)  
50e0 32 a2 fd			ld (debug_mark+2),a  
50e3 18 03			jr .pastdmark  
50e5 ..			.dmark: db "REe"  
50e8 f1			.pastdmark: pop af  
50e9			endm  
# End of macro DMARK
50e9						CALLMONITOR 
50e9 cd aa fd			call debug_vector  
50ec				endm  
# End of macro CALLMONITOR
50ec					endif 
50ec cd b4 20			call forth_push_str 
50ef			 
50ef					NEXTW 
50ef c3 37 24			jp macro_next 
50f2				endm 
# End of macro NEXTW
50f2			 
50f2			.recnotfound: 
50f2					if DEBUG_FORTH_WORDS 
50f2						DMARK "REf" 
50f2 f5				push af  
50f3 3a 07 51			ld a, (.dmark)  
50f6 32 a0 fd			ld (debug_mark),a  
50f9 3a 08 51			ld a, (.dmark+1)  
50fc 32 a1 fd			ld (debug_mark+1),a  
50ff 3a 09 51			ld a, (.dmark+2)  
5102 32 a2 fd			ld (debug_mark+2),a  
5105 18 03			jr .pastdmark  
5107 ..			.dmark: db "REf"  
510a f1			.pastdmark: pop af  
510b			endm  
# End of macro DMARK
510b						CALLMONITOR 
510b cd aa fd			call debug_vector  
510e				endm  
# End of macro CALLMONITOR
510e					endif 
510e 21 ff 00			ld hl, 255 
5111 cd 46 20			call forth_push_numhl 
5114				NEXTW 
5114 c3 37 24			jp macro_next 
5117				endm 
# End of macro NEXTW
5117			 
5117			 
5117			.BREAD: 
5117			  
5117				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
5117 3a				db WORD_SYS_CORE+38             
5118 9a 51			dw .BWRITE            
511a 06				db 5 + 1 
511b .. 00			db "BREAD",0              
5121				endm 
# End of macro CWHEAD
5121			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
5121			; | | > [!NOTE] 
5121			; | | > Compatible with PicoSPINet  
5121				 
5121					if DEBUG_FORTH_WORDS_KEY 
5121						DMARK "BRD" 
5121 f5				push af  
5122 3a 36 51			ld a, (.dmark)  
5125 32 a0 fd			ld (debug_mark),a  
5128 3a 37 51			ld a, (.dmark+1)  
512b 32 a1 fd			ld (debug_mark+1),a  
512e 3a 38 51			ld a, (.dmark+2)  
5131 32 a2 fd			ld (debug_mark+2),a  
5134 18 03			jr .pastdmark  
5136 ..			.dmark: db "BRD"  
5139 f1			.pastdmark: pop af  
513a			endm  
# End of macro DMARK
513a						CALLMONITOR 
513a cd aa fd			call debug_vector  
513d				endm  
# End of macro CALLMONITOR
513d					endif 
513d			 
513d				FORTH_DSP_VALUEHL 
513d cd 4b 22			call macro_dsp_valuehl 
5140				endm 
# End of macro FORTH_DSP_VALUEHL
5140			 
5140				FORTH_DSP_POP 
5140 cd 03 23			call macro_forth_dsp_pop 
5143				endm 
# End of macro FORTH_DSP_POP
5143			 
5143				; calc block address 
5143			 
5143 eb				ex de, hl 
5144 3e 40			ld a, STORE_BLOCK_PHY 
5146 cd 61 0f			call Mult16 
5149			 
5149			 
5149 11 af f9			ld de, store_page 
514c			 
514c					if DEBUG_FORTH_WORDS 
514c						DMARK "BR1" 
514c f5				push af  
514d 3a 61 51			ld a, (.dmark)  
5150 32 a0 fd			ld (debug_mark),a  
5153 3a 62 51			ld a, (.dmark+1)  
5156 32 a1 fd			ld (debug_mark+1),a  
5159 3a 63 51			ld a, (.dmark+2)  
515c 32 a2 fd			ld (debug_mark+2),a  
515f 18 03			jr .pastdmark  
5161 ..			.dmark: db "BR1"  
5164 f1			.pastdmark: pop af  
5165			endm  
# End of macro DMARK
5165						CALLMONITOR 
5165 cd aa fd			call debug_vector  
5168				endm  
# End of macro CALLMONITOR
5168					endif 
5168			 
5168 cd 74 04			call storage_read_block 
516b			 
516b cd 07 10			call ishlzero 
516e 20 05			jr nz, .brfound 
5170			 
5170 cd 46 20			call forth_push_numhl 
5173 18 22			jr .brdone 
5175			 
5175			 
5175			.brfound: 
5175 21 b1 f9		        ld hl, store_page+2 
5178			 
5178					if DEBUG_FORTH_WORDS 
5178						DMARK "BR2" 
5178 f5				push af  
5179 3a 8d 51			ld a, (.dmark)  
517c 32 a0 fd			ld (debug_mark),a  
517f 3a 8e 51			ld a, (.dmark+1)  
5182 32 a1 fd			ld (debug_mark+1),a  
5185 3a 8f 51			ld a, (.dmark+2)  
5188 32 a2 fd			ld (debug_mark+2),a  
518b 18 03			jr .pastdmark  
518d ..			.dmark: db "BR2"  
5190 f1			.pastdmark: pop af  
5191			endm  
# End of macro DMARK
5191						CALLMONITOR 
5191 cd aa fd			call debug_vector  
5194				endm  
# End of macro CALLMONITOR
5194					endif 
5194			 
5194 cd b4 20			call forth_push_str 
5197			 
5197			 
5197			.brdone: 
5197			 
5197					NEXTW 
5197 c3 37 24			jp macro_next 
519a				endm 
# End of macro NEXTW
519a			.BWRITE: 
519a				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
519a 3a				db WORD_SYS_CORE+38             
519b 2f 52			dw .BUPD            
519d 07				db 6 + 1 
519e .. 00			db "BWRITE",0              
51a5				endm 
# End of macro CWHEAD
51a5			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
51a5			; | | > [!NOTE] 
51a5			; | | > Compatible with PicoSPINet  
51a5			 
51a5					if DEBUG_FORTH_WORDS_KEY 
51a5						DMARK "BWR" 
51a5 f5				push af  
51a6 3a ba 51			ld a, (.dmark)  
51a9 32 a0 fd			ld (debug_mark),a  
51ac 3a bb 51			ld a, (.dmark+1)  
51af 32 a1 fd			ld (debug_mark+1),a  
51b2 3a bc 51			ld a, (.dmark+2)  
51b5 32 a2 fd			ld (debug_mark+2),a  
51b8 18 03			jr .pastdmark  
51ba ..			.dmark: db "BWR"  
51bd f1			.pastdmark: pop af  
51be			endm  
# End of macro DMARK
51be						CALLMONITOR 
51be cd aa fd			call debug_vector  
51c1				endm  
# End of macro CALLMONITOR
51c1					endif 
51c1			 
51c1				FORTH_DSP_VALUEHL 
51c1 cd 4b 22			call macro_dsp_valuehl 
51c4				endm 
# End of macro FORTH_DSP_VALUEHL
51c4			 
51c4				; calc block address 
51c4			 
51c4 eb				ex de, hl 
51c5 3e 40			ld a, STORE_BLOCK_PHY 
51c7 cd 61 0f			call Mult16 
51ca			 
51ca e5				push hl         ; address 
51cb			 
51cb				FORTH_DSP_POP 
51cb cd 03 23			call macro_forth_dsp_pop 
51ce				endm 
# End of macro FORTH_DSP_POP
51ce			 
51ce				FORTH_DSP_VALUEHL 
51ce cd 4b 22			call macro_dsp_valuehl 
51d1				endm 
# End of macro FORTH_DSP_VALUEHL
51d1			 
51d1				FORTH_DSP_POP 
51d1 cd 03 23			call macro_forth_dsp_pop 
51d4				endm 
# End of macro FORTH_DSP_POP
51d4			 
51d4 cd b0 0c			call storage_clear_page 
51d7			 
51d7				; copy string to store page 
51d7			 
51d7 e5				push hl     ; save string address 
51d8			 
51d8 3e 00			ld a, 0 
51da cd 4f 13			call strlent 
51dd			 
51dd 23				inc hl 
51de			 
51de 4d				ld c, l 
51df 06 00			ld b, 0 
51e1			 
51e1 e1				pop hl 
51e2 11 b1 f9			ld de, store_page + 2 
51e5					if DEBUG_FORTH_WORDS 
51e5						DMARK "BW1" 
51e5 f5				push af  
51e6 3a fa 51			ld a, (.dmark)  
51e9 32 a0 fd			ld (debug_mark),a  
51ec 3a fb 51			ld a, (.dmark+1)  
51ef 32 a1 fd			ld (debug_mark+1),a  
51f2 3a fc 51			ld a, (.dmark+2)  
51f5 32 a2 fd			ld (debug_mark+2),a  
51f8 18 03			jr .pastdmark  
51fa ..			.dmark: db "BW1"  
51fd f1			.pastdmark: pop af  
51fe			endm  
# End of macro DMARK
51fe						CALLMONITOR 
51fe cd aa fd			call debug_vector  
5201				endm  
# End of macro CALLMONITOR
5201					endif 
5201 ed b0			ldir 
5203			 
5203			 
5203				; poke the start of the block with flags to prevent high level file ops hitting the block 
5203			 
5203 21 ff ff			ld hl, $ffff 
5206			 
5206 22 af f9			ld (store_page), hl	 
5209				 
5209 e1				pop hl    ; get address 
520a 11 af f9			ld de, store_page 
520d			 
520d					if DEBUG_FORTH_WORDS 
520d						DMARK "BW2" 
520d f5				push af  
520e 3a 22 52			ld a, (.dmark)  
5211 32 a0 fd			ld (debug_mark),a  
5214 3a 23 52			ld a, (.dmark+1)  
5217 32 a1 fd			ld (debug_mark+1),a  
521a 3a 24 52			ld a, (.dmark+2)  
521d 32 a2 fd			ld (debug_mark+2),a  
5220 18 03			jr .pastdmark  
5222 ..			.dmark: db "BW2"  
5225 f1			.pastdmark: pop af  
5226			endm  
# End of macro DMARK
5226						CALLMONITOR 
5226 cd aa fd			call debug_vector  
5229				endm  
# End of macro CALLMONITOR
5229					endif 
5229			 
5229 cd d9 04			call storage_write_block 
522c			 
522c					NEXTW 
522c c3 37 24			jp macro_next 
522f				endm 
# End of macro NEXTW
522f			 
522f			.BUPD: 
522f				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
522f 3a				db WORD_SYS_CORE+38             
5230 85 52			dw .BYID            
5232 05				db 4 + 1 
5233 .. 00			db "BUPD",0              
5238				endm 
# End of macro CWHEAD
5238			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
5238			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
5238			; | | or completely different file system structure. 
5238			; | | > [!NOTE] 
5238			; | | > Compatible with PicoSPINet  
5238			 
5238					if DEBUG_FORTH_WORDS_KEY 
5238						DMARK "BUD" 
5238 f5				push af  
5239 3a 4d 52			ld a, (.dmark)  
523c 32 a0 fd			ld (debug_mark),a  
523f 3a 4e 52			ld a, (.dmark+1)  
5242 32 a1 fd			ld (debug_mark+1),a  
5245 3a 4f 52			ld a, (.dmark+2)  
5248 32 a2 fd			ld (debug_mark+2),a  
524b 18 03			jr .pastdmark  
524d ..			.dmark: db "BUD"  
5250 f1			.pastdmark: pop af  
5251			endm  
# End of macro DMARK
5251						CALLMONITOR 
5251 cd aa fd			call debug_vector  
5254				endm  
# End of macro CALLMONITOR
5254					endif 
5254			 
5254				FORTH_DSP_VALUEHL 
5254 cd 4b 22			call macro_dsp_valuehl 
5257				endm 
# End of macro FORTH_DSP_VALUEHL
5257			 
5257				; calc block address 
5257			 
5257 eb				ex de, hl 
5258 3e 40			ld a, STORE_BLOCK_PHY 
525a cd 61 0f			call Mult16 
525d			 
525d				FORTH_DSP_POP 
525d cd 03 23			call macro_forth_dsp_pop 
5260				endm 
# End of macro FORTH_DSP_POP
5260			 
5260			 
5260 11 af f9			ld de, store_page 
5263			 
5263					if DEBUG_FORTH_WORDS 
5263						DMARK "BUe" 
5263 f5				push af  
5264 3a 78 52			ld a, (.dmark)  
5267 32 a0 fd			ld (debug_mark),a  
526a 3a 79 52			ld a, (.dmark+1)  
526d 32 a1 fd			ld (debug_mark+1),a  
5270 3a 7a 52			ld a, (.dmark+2)  
5273 32 a2 fd			ld (debug_mark+2),a  
5276 18 03			jr .pastdmark  
5278 ..			.dmark: db "BUe"  
527b f1			.pastdmark: pop af  
527c			endm  
# End of macro DMARK
527c						CALLMONITOR 
527c cd aa fd			call debug_vector  
527f				endm  
# End of macro CALLMONITOR
527f					endif 
527f			 
527f cd d9 04			call storage_write_block 
5282			 
5282					NEXTW 
5282 c3 37 24			jp macro_next 
5285				endm 
# End of macro NEXTW
5285			 
5285			.BYID: 
5285			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
5285			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
5285			; 
5285			;		 
5285			;		if DEBUG_FORTH_WORDS_KEY 
5285			;			DMARK "BYID" 
5285			;			CALLMONITOR 
5285			;		endif 
5285			; 
5285			;		; get direct address 
5285			; 
5285			;		FORTH_DSP_VALUEHL 
5285			; 
5285			;		FORTH_DSP_POP 
5285			; 
5285			;	; calc block address 
5285			; 
5285			;	ex de, hl 
5285			;	ld a, STORE_BLOCK_PHY 
5285			;	call Mult16 
5285			;	;	do BREAD with number as param 
5285			;	; push the file name	 
5285			;	ld de, store_page 
5285			;	call storage_read_block 
5285			 ;       ld hl, store_page+2 
5285			; 
5285			; 
5285			;		NEXTW 
5285			;.BYNAME: 
5285				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
5285 3a				db WORD_SYS_CORE+38             
5286 9e 52			dw .DIR            
5288 06				db 5 + 1 
5289 .. 00			db "GETID",0              
528f				endm 
# End of macro CWHEAD
528f			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
528f			; | | > [!NOTE] 
528f			; | | > Compatible with PicoSPINet  
528f			 
528f					; get pointer to file name to seek 
528f			 
528f					FORTH_DSP_VALUEHL 
528f cd 4b 22			call macro_dsp_valuehl 
5292				endm 
# End of macro FORTH_DSP_VALUEHL
5292			 
5292			 
5292 cd 9b 03				call storage_getid  
5295			 
5295					FORTH_DSP_POP 
5295 cd 03 23			call macro_forth_dsp_pop 
5298				endm 
# End of macro FORTH_DSP_POP
5298			 
5298 cd 46 20				call forth_push_numhl 
529b			 
529b					NEXTW 
529b c3 37 24			jp macro_next 
529e				endm 
# End of macro NEXTW
529e			; 
529e			.DIR: 
529e				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
529e 3a				db WORD_SYS_CORE+38             
529f a2 53			dw .SAVE            
52a1 04				db 3 + 1 
52a2 .. 00			db "DIR",0              
52a6				endm 
# End of macro CWHEAD
52a6			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
52a6			; | | > [!NOTE] 
52a6			; | | > Compatible with PicoSPINet  
52a6			 
52a6					if DEBUG_FORTH_WORDS_KEY 
52a6						DMARK "DIR" 
52a6 f5				push af  
52a7 3a bb 52			ld a, (.dmark)  
52aa 32 a0 fd			ld (debug_mark),a  
52ad 3a bc 52			ld a, (.dmark+1)  
52b0 32 a1 fd			ld (debug_mark+1),a  
52b3 3a bd 52			ld a, (.dmark+2)  
52b6 32 a2 fd			ld (debug_mark+2),a  
52b9 18 03			jr .pastdmark  
52bb ..			.dmark: db "DIR"  
52be f1			.pastdmark: pop af  
52bf			endm  
# End of macro DMARK
52bf						CALLMONITOR 
52bf cd aa fd			call debug_vector  
52c2				endm  
# End of macro CALLMONITOR
52c2					endif 
52c2 cd 25 05			call storage_get_block_0 
52c5			 
52c5 21 af f9			ld hl, store_page     ; get current id count 
52c8 46				ld b, (hl) 
52c9 0e 00			ld c, 0    ; count of files   
52cb					if DEBUG_FORTH_WORDS 
52cb						DMARK "DI1" 
52cb f5				push af  
52cc 3a e0 52			ld a, (.dmark)  
52cf 32 a0 fd			ld (debug_mark),a  
52d2 3a e1 52			ld a, (.dmark+1)  
52d5 32 a1 fd			ld (debug_mark+1),a  
52d8 3a e2 52			ld a, (.dmark+2)  
52db 32 a2 fd			ld (debug_mark+2),a  
52de 18 03			jr .pastdmark  
52e0 ..			.dmark: db "DI1"  
52e3 f1			.pastdmark: pop af  
52e4			endm  
# End of macro DMARK
52e4						CALLMONITOR 
52e4 cd aa fd			call debug_vector  
52e7				endm  
# End of macro CALLMONITOR
52e7					endif 
52e7			 
52e7				; check for empty drive 
52e7			 
52e7 3e 00			ld a, 0 
52e9 b8				cp b 
52ea ca 58 53			jp z, .dirdone 
52ed			 
52ed				; for each of the current ids do a search for them and if found push to stack 
52ed			 
52ed c5			.diritem:	push bc 
52ee 21 40 00				ld hl, STORE_BLOCK_PHY 
52f1 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
52f3 58					ld e,b 
52f4			 
52f4			;		if DEBUG_FORTH_WORDS 
52f4			;			DMARK "DI2" 
52f4			;			CALLMONITOR 
52f4			;		endif 
52f4			 
52f4 cd a7 07				call storage_findnextid 
52f7			 
52f7			;		if DEBUG_FORTH_WORDS 
52f7			;			DMARK "DI3" 
52f7			;			CALLMONITOR 
52f7			;		endif 
52f7			 
52f7					; if found hl will be non zero 
52f7			 
52f7 cd 07 10				call ishlzero 
52fa			;		ld a, l 
52fa			;		add h 
52fa			; 
52fa			;		cp 0 
52fa 28 59				jr z, .dirnotfound 
52fc			 
52fc					; increase count 
52fc			 
52fc c1					pop bc	 
52fd 0c					inc c 
52fe c5					push bc 
52ff					 
52ff			 
52ff					; get file header and push the file name 
52ff			 
52ff 11 af f9				ld de, store_page 
5302 cd 74 04				call storage_read_block 
5305			 
5305					; push file id to stack 
5305				 
5305 3a af f9				ld a, (store_page) 
5308 26 00				ld h, 0 
530a 6f					ld l, a 
530b cd 46 20				call forth_push_numhl 
530e			 
530e					; push extent count to stack  
530e				 
530e 3a b1 f9				ld a, (store_page+2) 
5311 26 00				ld h, 0 
5313 6f					ld l, a 
5314 cd 46 20				call forth_push_numhl 
5317			 
5317					; push file name 
5317			 
5317 21 b2 f9				ld hl, store_page+3 
531a					if DEBUG_FORTH_WORDS 
531a						DMARK "DI5" 
531a f5				push af  
531b 3a 2f 53			ld a, (.dmark)  
531e 32 a0 fd			ld (debug_mark),a  
5321 3a 30 53			ld a, (.dmark+1)  
5324 32 a1 fd			ld (debug_mark+1),a  
5327 3a 31 53			ld a, (.dmark+2)  
532a 32 a2 fd			ld (debug_mark+2),a  
532d 18 03			jr .pastdmark  
532f ..			.dmark: db "DI5"  
5332 f1			.pastdmark: pop af  
5333			endm  
# End of macro DMARK
5333						CALLMONITOR 
5333 cd aa fd			call debug_vector  
5336				endm  
# End of macro CALLMONITOR
5336					endif 
5336 cd b4 20				call forth_push_str 
5339					if DEBUG_FORTH_WORDS 
5339						DMARK "DI6" 
5339 f5				push af  
533a 3a 4e 53			ld a, (.dmark)  
533d 32 a0 fd			ld (debug_mark),a  
5340 3a 4f 53			ld a, (.dmark+1)  
5343 32 a1 fd			ld (debug_mark+1),a  
5346 3a 50 53			ld a, (.dmark+2)  
5349 32 a2 fd			ld (debug_mark+2),a  
534c 18 03			jr .pastdmark  
534e ..			.dmark: db "DI6"  
5351 f1			.pastdmark: pop af  
5352			endm  
# End of macro DMARK
5352						CALLMONITOR 
5352 cd aa fd			call debug_vector  
5355				endm  
# End of macro CALLMONITOR
5355					endif 
5355			.dirnotfound: 
5355 c1					pop bc     
5356 10 95				djnz .diritem 
5358				 
5358			.dirdone:	 
5358					if DEBUG_FORTH_WORDS 
5358						DMARK "DI7" 
5358 f5				push af  
5359 3a 6d 53			ld a, (.dmark)  
535c 32 a0 fd			ld (debug_mark),a  
535f 3a 6e 53			ld a, (.dmark+1)  
5362 32 a1 fd			ld (debug_mark+1),a  
5365 3a 6f 53			ld a, (.dmark+2)  
5368 32 a2 fd			ld (debug_mark+2),a  
536b 18 03			jr .pastdmark  
536d ..			.dmark: db "DI7"  
5370 f1			.pastdmark: pop af  
5371			endm  
# End of macro DMARK
5371						CALLMONITOR 
5371 cd aa fd			call debug_vector  
5374				endm  
# End of macro CALLMONITOR
5374					endif 
5374			 
5374					; push a count of the dir items found 
5374			 
5374 26 00				ld h, 0 
5376 69					ld l, c 
5377 cd 46 20				call forth_push_numhl 
537a			 
537a					; push the bank label 
537a			 
537a cd 25 05				call storage_get_block_0 
537d			 
537d				 
537d 21 b2 f9		 		ld hl, store_page+3 
5380			 
5380					if DEBUG_FORTH_WORDS 
5380						DMARK "DI8" 
5380 f5				push af  
5381 3a 95 53			ld a, (.dmark)  
5384 32 a0 fd			ld (debug_mark),a  
5387 3a 96 53			ld a, (.dmark+1)  
538a 32 a1 fd			ld (debug_mark+1),a  
538d 3a 97 53			ld a, (.dmark+2)  
5390 32 a2 fd			ld (debug_mark+2),a  
5393 18 03			jr .pastdmark  
5395 ..			.dmark: db "DI8"  
5398 f1			.pastdmark: pop af  
5399			endm  
# End of macro DMARK
5399						CALLMONITOR 
5399 cd aa fd			call debug_vector  
539c				endm  
# End of macro CALLMONITOR
539c					endif 
539c cd b4 20				call forth_push_str 
539f			 
539f			 
539f				 
539f					NEXTW 
539f c3 37 24			jp macro_next 
53a2				endm 
# End of macro NEXTW
53a2			.SAVE: 
53a2			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
53a2			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
53a2			;		NEXTW 
53a2			;.LOAD: 
53a2			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
53a2			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
53a2			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
53a2			;; > > The LOAD command can not be used in any user words or compound lines. 
53a2			; 
53a2			;		; store_openext use it. If zero it is EOF 
53a2			; 
53a2			;		; read block from current stream id 
53a2			;		; if the block does not contain zero term keep reading blocks until zero found 
53a2			;		; push the block to stack 
53a2			;		; save the block id to stream 
53a2			; 
53a2			; 
53a2			;		FORTH_DSP_VALUEHL 
53a2			; 
53a2			;;		push hl 
53a2			; 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LOA" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;		FORTH_DSP_POP 
53a2			; 
53a2			;;		pop hl 
53a2			; 
53a2			;		ld h, l 
53a2			;		ld l, 0 
53a2			; 
53a2			;		push hl     ; stack holds current file id and extent to work with 
53a2			; 
53a2			; 
53a2			;		ld de, store_page      ; get block zero of file 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LO0" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;		call storage_read 
53a2			; 
53a2			;		ld a, (store_page+2)    ; max extents for this file 
53a2			;		ld  (store_openmaxext),a   ; get our limit 
53a2			; 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LOE" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			; 
53a2			;; TODO dont know why max extents are not present 
53a2			;;		cp 0 
53a2			;;		jp z, .loadeof     ; dont read past eof 
53a2			; 
53a2			;;		ld a, 1   ; start from the head of the file 
53a2			; 
53a2			;.loadline:	pop hl 
53a2			;		inc hl 
53a2			;		ld  a, (store_openmaxext)   ; get our limit 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LOx" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;		inc a 
53a2			;		cp l 
53a2			;		jp z, .loadeof 
53a2			;		push hl    ; save current extent 
53a2			; 
53a2			;		ld de, store_page 
53a2			; 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LO1" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;		call storage_read 
53a2			; 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LO2" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;	call ishlzero 
53a2			;	ld a, l 
53a2			;	add h 
53a2			;	cp 0 
53a2			;	jr z, .loadeof 
53a2			; 
53a2			;	; not eof so hl should point to data to exec 
53a2			; 
53a2			;	; will need to add the FORTH_END_BUFFER flag 
53a2			 ; 
53a2			;	ld hl, store_page+2 
53a2			;	ld bc, 255 
53a2			;	ld a, 0 
53a2			;	cpir 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LOt" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;	dec hl 
53a2			;	ld a, ' ' 
53a2			;	ld (hl), a 
53a2			;	inc hl 
53a2			;	ld (hl), a 
53a2			;	inc hl 
53a2			;	ld (hl), a 
53a2			;	inc hl 
53a2			;	ld a, FORTH_END_BUFFER 
53a2			;	ld (hl), a 
53a2			; 
53a2			;	; TODO handle more than a single block read 
53a2			; 
53a2			; 
53a2			;	ld hl, store_page+2 
53a2			; 
53a2			;	ld (os_tok_ptr), hl 
53a2			; 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LO3" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			; 
53a2			;	call forthparse 
53a2			;	call forthexec 
53a2			;	call forthexec_cleanup 
53a2			; 
53a2			;	; go to next extent 
53a2			; 
53a2			;	; get next block  or mark as eof 
53a2			;	jp .loadline 
53a2			; 
53a2			; 
53a2			; 
53a2			;	       NEXTW 
53a2			;.loadeof:	ld a, 0 
53a2			;		ld (store_openext), a 
53a2			; 
53a2			;	if DEBUG_STORESE 
53a2			;		DMARK "LOF" 
53a2			;		CALLMONITOR 
53a2			;	endif 
53a2			;		ret 
53a2			;		;NEXTW 
53a2			;.BSAVE:   
53a2			; 
53a2			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
53a2			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
53a2			;		NEXTW 
53a2			;.BLOAD: 
53a2			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
53a2			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
53a2			;		NEXTW 
53a2			;;;; counter gap 
53a2			 
53a2			 
53a2			.SEO: 
53a2				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
53a2 64				db WORD_SYS_CORE+80             
53a3 c1 53			dw .SEI            
53a5 04				db 3 + 1 
53a6 .. 00			db "SEO",0              
53aa				endm 
# End of macro CWHEAD
53aa			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
53aa			 
53aa					; get port 
53aa			 
53aa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
53aa cd 4b 22			call macro_dsp_valuehl 
53ad				endm 
# End of macro FORTH_DSP_VALUEHL
53ad			 
53ad e5					push hl    ; u2 - byte 
53ae			 
53ae					; destroy value TOS 
53ae			 
53ae					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
53ae cd 03 23			call macro_forth_dsp_pop 
53b1				endm 
# End of macro FORTH_DSP_POP
53b1			 
53b1					; get byte to send 
53b1			 
53b1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
53b1 cd 4b 22			call macro_dsp_valuehl 
53b4				endm 
# End of macro FORTH_DSP_VALUEHL
53b4			 
53b4 e5					push hl    ; u1 - addr 
53b5			 
53b5					; destroy value TOS 
53b5			 
53b5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
53b5 cd 03 23			call macro_forth_dsp_pop 
53b8				endm 
# End of macro FORTH_DSP_POP
53b8			 
53b8					; one value on hl get other one back 
53b8			 
53b8 d1					pop de   ; u1 - byte 
53b9			 
53b9 e1					pop hl   ; u2 - addr 
53ba			 
53ba					; TODO Send SPI byte 
53ba			 
53ba			 
53ba 7b					ld a, e 
53bb cd 79 02				call se_writebyte 
53be			 
53be					 
53be			 
53be					NEXTW 
53be c3 37 24			jp macro_next 
53c1				endm 
# End of macro NEXTW
53c1			 
53c1			.SEI: 
53c1				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
53c1 65				db WORD_SYS_CORE+81             
53c2 db 53			dw .SFREE            
53c4 04				db 3 + 1 
53c5 .. 00			db "SEI",0              
53c9				endm 
# End of macro CWHEAD
53c9			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
53c9			 
53c9					; get port 
53c9			 
53c9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
53c9 cd 4b 22			call macro_dsp_valuehl 
53cc				endm 
# End of macro FORTH_DSP_VALUEHL
53cc			 
53cc			;		push hl 
53cc			 
53cc					; destroy value TOS 
53cc			 
53cc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
53cc cd 03 23			call macro_forth_dsp_pop 
53cf				endm 
# End of macro FORTH_DSP_POP
53cf			 
53cf					; one value on hl get other one back 
53cf			 
53cf			;		pop hl 
53cf			 
53cf			 
53cf					; TODO Get SPI byte 
53cf			 
53cf cd 1b 03				call se_readbyte 
53d2			 
53d2 26 00				ld h, 0 
53d4 6f					ld l, a 
53d5 cd 46 20				call forth_push_numhl 
53d8			 
53d8					NEXTW 
53d8 c3 37 24			jp macro_next 
53db				endm 
# End of macro NEXTW
53db			 
53db			.SFREE: 
53db				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
53db 67				db WORD_SYS_CORE+83             
53dc 0a 54			dw .SIZE            
53de 06				db 5 + 1 
53df .. 00			db "FFREE",0              
53e5				endm 
# End of macro CWHEAD
53e5			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
53e5			; | | > [!NOTE] 
53e5			; | | > Compatible with PicoSPINet  
53e5					if DEBUG_FORTH_WORDS_KEY 
53e5						DMARK "FFR" 
53e5 f5				push af  
53e6 3a fa 53			ld a, (.dmark)  
53e9 32 a0 fd			ld (debug_mark),a  
53ec 3a fb 53			ld a, (.dmark+1)  
53ef 32 a1 fd			ld (debug_mark+1),a  
53f2 3a fc 53			ld a, (.dmark+2)  
53f5 32 a2 fd			ld (debug_mark+2),a  
53f8 18 03			jr .pastdmark  
53fa ..			.dmark: db "FFR"  
53fd f1			.pastdmark: pop af  
53fe			endm  
# End of macro DMARK
53fe						CALLMONITOR 
53fe cd aa fd			call debug_vector  
5401				endm  
# End of macro CALLMONITOR
5401					endif 
5401			 
5401 cd 41 08				call storage_freeblocks 
5404			 
5404 cd 46 20				call forth_push_numhl 
5407			 
5407				       NEXTW 
5407 c3 37 24			jp macro_next 
540a				endm 
# End of macro NEXTW
540a			.SIZE: 
540a				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
540a 67				db WORD_SYS_CORE+83             
540b 3e 54			dw .CREATE            
540d 05				db 4 + 1 
540e .. 00			db "SIZE",0              
5413				endm 
# End of macro CWHEAD
5413			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
5413			; | | > [!NOTE] 
5413			; | | > Compatible with PicoSPINet  
5413					if DEBUG_FORTH_WORDS_KEY 
5413						DMARK "SIZ" 
5413 f5				push af  
5414 3a 28 54			ld a, (.dmark)  
5417 32 a0 fd			ld (debug_mark),a  
541a 3a 29 54			ld a, (.dmark+1)  
541d 32 a1 fd			ld (debug_mark+1),a  
5420 3a 2a 54			ld a, (.dmark+2)  
5423 32 a2 fd			ld (debug_mark+2),a  
5426 18 03			jr .pastdmark  
5428 ..			.dmark: db "SIZ"  
542b f1			.pastdmark: pop af  
542c			endm  
# End of macro DMARK
542c						CALLMONITOR 
542c cd aa fd			call debug_vector  
542f				endm  
# End of macro CALLMONITOR
542f					endif 
542f			 
542f					FORTH_DSP_VALUEHL 
542f cd 4b 22			call macro_dsp_valuehl 
5432				endm 
# End of macro FORTH_DSP_VALUEHL
5432			;		push hl 
5432					FORTH_DSP_POP 
5432 cd 03 23			call macro_forth_dsp_pop 
5435				endm 
# End of macro FORTH_DSP_POP
5435			;		pop hl 
5435 cd a3 04				call storage_file_size 
5438			 
5438 cd 46 20				call forth_push_numhl 
543b			  
543b			 
543b				       NEXTW 
543b c3 37 24			jp macro_next 
543e				endm 
# End of macro NEXTW
543e			 
543e			.CREATE: 
543e				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
543e 68				db WORD_SYS_CORE+84             
543f ac 54			dw .APPEND            
5441 07				db 6 + 1 
5442 .. 00			db "CREATE",0              
5449				endm 
# End of macro CWHEAD
5449			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
5449			; | | e.g.  
5449			; | | TestProgram CREATE 
5449			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
5449			; | |  
5449			; | | Max file IDs are 255. 
5449			; | |  
5449			; | | > [!NOTE] 
5449			; | | > Compatible with PicoSPINet  
5449					 
5449					if DEBUG_FORTH_WORDS_KEY 
5449						DMARK "CRT" 
5449 f5				push af  
544a 3a 5e 54			ld a, (.dmark)  
544d 32 a0 fd			ld (debug_mark),a  
5450 3a 5f 54			ld a, (.dmark+1)  
5453 32 a1 fd			ld (debug_mark+1),a  
5456 3a 60 54			ld a, (.dmark+2)  
5459 32 a2 fd			ld (debug_mark+2),a  
545c 18 03			jr .pastdmark  
545e ..			.dmark: db "CRT"  
5461 f1			.pastdmark: pop af  
5462			endm  
# End of macro DMARK
5462						CALLMONITOR 
5462 cd aa fd			call debug_vector  
5465				endm  
# End of macro CALLMONITOR
5465					endif 
5465			;		call storage_get_block_0 
5465			 
5465					; TODO pop hl 
5465			 
5465					;v5 FORTH_DSP_VALUE 
5465					FORTH_DSP_VALUE 
5465 cd 34 22			call macro_forth_dsp_value 
5468				endm 
# End of macro FORTH_DSP_VALUE
5468			 
5468				if DEBUG_STORESE 
5468					DMARK "CR1" 
5468 f5				push af  
5469 3a 7d 54			ld a, (.dmark)  
546c 32 a0 fd			ld (debug_mark),a  
546f 3a 7e 54			ld a, (.dmark+1)  
5472 32 a1 fd			ld (debug_mark+1),a  
5475 3a 7f 54			ld a, (.dmark+2)  
5478 32 a2 fd			ld (debug_mark+2),a  
547b 18 03			jr .pastdmark  
547d ..			.dmark: db "CR1"  
5480 f1			.pastdmark: pop af  
5481			endm  
# End of macro DMARK
5481					CALLMONITOR 
5481 cd aa fd			call debug_vector  
5484				endm  
# End of macro CALLMONITOR
5484				endif 
5484			;		push hl 
5484			;		FORTH_DSP_POP 
5484			;		pop hl 
5484			 
5484			;		inc hl   ; move past the type marker 
5484			 
5484 cd 77 08				call storage_create 
5487			 
5487				if DEBUG_STORESE 
5487					DMARK "CT1" 
5487 f5				push af  
5488 3a 9c 54			ld a, (.dmark)  
548b 32 a0 fd			ld (debug_mark),a  
548e 3a 9d 54			ld a, (.dmark+1)  
5491 32 a1 fd			ld (debug_mark+1),a  
5494 3a 9e 54			ld a, (.dmark+2)  
5497 32 a2 fd			ld (debug_mark+2),a  
549a 18 03			jr .pastdmark  
549c ..			.dmark: db "CT1"  
549f f1			.pastdmark: pop af  
54a0			endm  
# End of macro DMARK
54a0					CALLMONITOR 
54a0 cd aa fd			call debug_vector  
54a3				endm  
# End of macro CALLMONITOR
54a3				endif 
54a3			;		push hl 
54a3					FORTH_DSP_POP 
54a3 cd 03 23			call macro_forth_dsp_pop 
54a6				endm 
# End of macro FORTH_DSP_POP
54a6			;		pop hl 
54a6					; push file id to stack 
54a6 cd 46 20				call forth_push_numhl 
54a9			 
54a9			 
54a9			 
54a9				       NEXTW 
54a9 c3 37 24			jp macro_next 
54ac				endm 
# End of macro NEXTW
54ac			 
54ac			.APPEND: 
54ac				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
54ac 69				db WORD_SYS_CORE+85             
54ad 3d 55			dw .SDEL            
54af 07				db 6 + 1 
54b0 .. 00			db "APPEND",0              
54b7				endm 
# End of macro CWHEAD
54b7			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
54b7			; | | e.g. 
54b7			; | | Test CREATE      -> $01 
54b7			; | | "A string to add to file" $01 APPEND 
54b7			; | |  
54b7			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
54b7			; | | > [!NOTE] 
54b7			; | | > Compatible with PicoSPINet  
54b7					if DEBUG_FORTH_WORDS_KEY 
54b7						DMARK "APP" 
54b7 f5				push af  
54b8 3a cc 54			ld a, (.dmark)  
54bb 32 a0 fd			ld (debug_mark),a  
54be 3a cd 54			ld a, (.dmark+1)  
54c1 32 a1 fd			ld (debug_mark+1),a  
54c4 3a ce 54			ld a, (.dmark+2)  
54c7 32 a2 fd			ld (debug_mark+2),a  
54ca 18 03			jr .pastdmark  
54cc ..			.dmark: db "APP"  
54cf f1			.pastdmark: pop af  
54d0			endm  
# End of macro DMARK
54d0						CALLMONITOR 
54d0 cd aa fd			call debug_vector  
54d3				endm  
# End of macro CALLMONITOR
54d3					endif 
54d3			 
54d3					FORTH_DSP_VALUEHL 
54d3 cd 4b 22			call macro_dsp_valuehl 
54d6				endm 
# End of macro FORTH_DSP_VALUEHL
54d6 e5					push hl 	; save file id 
54d7			 
54d7				if DEBUG_STORESE 
54d7					DMARK "AP1" 
54d7 f5				push af  
54d8 3a ec 54			ld a, (.dmark)  
54db 32 a0 fd			ld (debug_mark),a  
54de 3a ed 54			ld a, (.dmark+1)  
54e1 32 a1 fd			ld (debug_mark+1),a  
54e4 3a ee 54			ld a, (.dmark+2)  
54e7 32 a2 fd			ld (debug_mark+2),a  
54ea 18 03			jr .pastdmark  
54ec ..			.dmark: db "AP1"  
54ef f1			.pastdmark: pop af  
54f0			endm  
# End of macro DMARK
54f0					CALLMONITOR 
54f0 cd aa fd			call debug_vector  
54f3				endm  
# End of macro CALLMONITOR
54f3				endif 
54f3					FORTH_DSP_POP 
54f3 cd 03 23			call macro_forth_dsp_pop 
54f6				endm 
# End of macro FORTH_DSP_POP
54f6			 
54f6					FORTH_DSP_VALUEHL 
54f6 cd 4b 22			call macro_dsp_valuehl 
54f9				endm 
# End of macro FORTH_DSP_VALUEHL
54f9					;v5 FORTH_DSP_VALUE 
54f9 e5					push hl 	; save ptr to string to save 
54fa			 
54fa				if DEBUG_STORESE 
54fa					DMARK "AP1" 
54fa f5				push af  
54fb 3a 0f 55			ld a, (.dmark)  
54fe 32 a0 fd			ld (debug_mark),a  
5501 3a 10 55			ld a, (.dmark+1)  
5504 32 a1 fd			ld (debug_mark+1),a  
5507 3a 11 55			ld a, (.dmark+2)  
550a 32 a2 fd			ld (debug_mark+2),a  
550d 18 03			jr .pastdmark  
550f ..			.dmark: db "AP1"  
5512 f1			.pastdmark: pop af  
5513			endm  
# End of macro DMARK
5513					CALLMONITOR 
5513 cd aa fd			call debug_vector  
5516				endm  
# End of macro CALLMONITOR
5516				endif 
5516					FORTH_DSP_POP 
5516 cd 03 23			call macro_forth_dsp_pop 
5519				endm 
# End of macro FORTH_DSP_POP
5519			 
5519 d1					pop de 
551a e1					pop hl 
551b				if DEBUG_STORESE 
551b					DMARK "AP2" 
551b f5				push af  
551c 3a 30 55			ld a, (.dmark)  
551f 32 a0 fd			ld (debug_mark),a  
5522 3a 31 55			ld a, (.dmark+1)  
5525 32 a1 fd			ld (debug_mark+1),a  
5528 3a 32 55			ld a, (.dmark+2)  
552b 32 a2 fd			ld (debug_mark+2),a  
552e 18 03			jr .pastdmark  
5530 ..			.dmark: db "AP2"  
5533 f1			.pastdmark: pop af  
5534			endm  
# End of macro DMARK
5534					CALLMONITOR 
5534 cd aa fd			call debug_vector  
5537				endm  
# End of macro CALLMONITOR
5537				endif 
5537					;inc de ; skip var type indicator 
5537			 
5537					; TODO how to append numerics???? 
5537			 
5537 cd 64 0b				call storage_append		 
553a			 
553a				       NEXTW 
553a c3 37 24			jp macro_next 
553d				endm 
# End of macro NEXTW
553d			.SDEL: 
553d				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
553d 6a				db WORD_SYS_CORE+86             
553e 89 55			dw .OPEN            
5540 05				db 4 + 1 
5541 .. 00			db "ERA",0              
5545				endm 
# End of macro CWHEAD
5545			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
5545			; | | > [!NOTE] 
5545			; | | > Compatible with PicoSPINet  
5545					FORTH_DSP_VALUEHL 
5545 cd 4b 22			call macro_dsp_valuehl 
5548				endm 
# End of macro FORTH_DSP_VALUEHL
5548			;		push hl 	; save file id 
5548			 
5548					if DEBUG_FORTH_WORDS_KEY 
5548						DMARK "ERA" 
5548 f5				push af  
5549 3a 5d 55			ld a, (.dmark)  
554c 32 a0 fd			ld (debug_mark),a  
554f 3a 5e 55			ld a, (.dmark+1)  
5552 32 a1 fd			ld (debug_mark+1),a  
5555 3a 5f 55			ld a, (.dmark+2)  
5558 32 a2 fd			ld (debug_mark+2),a  
555b 18 03			jr .pastdmark  
555d ..			.dmark: db "ERA"  
5560 f1			.pastdmark: pop af  
5561			endm  
# End of macro DMARK
5561						CALLMONITOR 
5561 cd aa fd			call debug_vector  
5564				endm  
# End of macro CALLMONITOR
5564					endif 
5564				if DEBUG_STORESE 
5564					DMARK "ER1" 
5564 f5				push af  
5565 3a 79 55			ld a, (.dmark)  
5568 32 a0 fd			ld (debug_mark),a  
556b 3a 7a 55			ld a, (.dmark+1)  
556e 32 a1 fd			ld (debug_mark+1),a  
5571 3a 7b 55			ld a, (.dmark+2)  
5574 32 a2 fd			ld (debug_mark+2),a  
5577 18 03			jr .pastdmark  
5579 ..			.dmark: db "ER1"  
557c f1			.pastdmark: pop af  
557d			endm  
# End of macro DMARK
557d					CALLMONITOR 
557d cd aa fd			call debug_vector  
5580				endm  
# End of macro CALLMONITOR
5580				endif 
5580					FORTH_DSP_POP 
5580 cd 03 23			call macro_forth_dsp_pop 
5583				endm 
# End of macro FORTH_DSP_POP
5583			 
5583			;		pop hl 
5583			 
5583 cd b6 06				call storage_erase 
5586				       NEXTW 
5586 c3 37 24			jp macro_next 
5589				endm 
# End of macro NEXTW
5589			 
5589			.OPEN: 
5589				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
5589 6b				db WORD_SYS_CORE+87             
558a 1d 56			dw .READ            
558c 05				db 4 + 1 
558d .. 00			db "OPEN",0              
5592				endm 
# End of macro CWHEAD
5592			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
5592			; | | e.g. 
5592			; | | $01 OPEN $01 DO $01 READ . LOOP 
5592			; | | 
5592			; | | Will return with 255 blocks if the file does not exist 
5592			; | | > [!NOTE] 
5592			; | | > Compatible with PicoSPINet  
5592			 
5592					if DEBUG_FORTH_WORDS_KEY 
5592						DMARK "OPN" 
5592 f5				push af  
5593 3a a7 55			ld a, (.dmark)  
5596 32 a0 fd			ld (debug_mark),a  
5599 3a a8 55			ld a, (.dmark+1)  
559c 32 a1 fd			ld (debug_mark+1),a  
559f 3a a9 55			ld a, (.dmark+2)  
55a2 32 a2 fd			ld (debug_mark+2),a  
55a5 18 03			jr .pastdmark  
55a7 ..			.dmark: db "OPN"  
55aa f1			.pastdmark: pop af  
55ab			endm  
# End of macro DMARK
55ab						CALLMONITOR 
55ab cd aa fd			call debug_vector  
55ae				endm  
# End of macro CALLMONITOR
55ae					endif 
55ae					; TODO handle multiple file opens 
55ae			 
55ae 3e 01			       	ld a, 1 
55b0 32 9f f9				ld (store_openext), a 
55b3			 
55b3					; get max extents for this file 
55b3				 
55b3								 
55b3					FORTH_DSP_VALUEHL 
55b3 cd 4b 22			call macro_dsp_valuehl 
55b6				endm 
# End of macro FORTH_DSP_VALUEHL
55b6			 
55b6 65					ld h, l 
55b7 2e 00				ld l, 0 
55b9			 
55b9					; store file id 
55b9			 
55b9 7c					ld a, h 
55ba 32 9c f9				ld (store_filecache), a 
55bd			 
55bd				if DEBUG_STORESE 
55bd					DMARK "OPN" 
55bd f5				push af  
55be 3a d2 55			ld a, (.dmark)  
55c1 32 a0 fd			ld (debug_mark),a  
55c4 3a d3 55			ld a, (.dmark+1)  
55c7 32 a1 fd			ld (debug_mark+1),a  
55ca 3a d4 55			ld a, (.dmark+2)  
55cd 32 a2 fd			ld (debug_mark+2),a  
55d0 18 03			jr .pastdmark  
55d2 ..			.dmark: db "OPN"  
55d5 f1			.pastdmark: pop af  
55d6			endm  
# End of macro DMARK
55d6					CALLMONITOR 
55d6 cd aa fd			call debug_vector  
55d9				endm  
# End of macro CALLMONITOR
55d9				endif 
55d9			;		push hl 
55d9					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
55d9 cd 03 23			call macro_forth_dsp_pop 
55dc				endm 
# End of macro FORTH_DSP_POP
55dc			;		pop hl 
55dc						 
55dc 11 af f9				ld de, store_page      ; get block zero of file 
55df cd cd 09				call storage_read 
55e2 cd 07 10			call ishlzero 
55e5 20 04			jr nz, .opfound 
55e7			 
55e7				; file does not exist so indicate with 255 extents in use 
55e7			 
55e7 3e ff			ld a, 255 
55e9 18 29			jr .skipopeneof 
55eb			 
55eb			 
55eb			.opfound: 
55eb			 
55eb			 
55eb 3a b1 f9				ld a, (store_page+2)    ; max extents for this file 
55ee 32 9e f9				ld  (store_openmaxext), a   ; get our limit and push 
55f1					 
55f1				if DEBUG_STORESE 
55f1					DMARK "OPx" 
55f1 f5				push af  
55f2 3a 06 56			ld a, (.dmark)  
55f5 32 a0 fd			ld (debug_mark),a  
55f8 3a 07 56			ld a, (.dmark+1)  
55fb 32 a1 fd			ld (debug_mark+1),a  
55fe 3a 08 56			ld a, (.dmark+2)  
5601 32 a2 fd			ld (debug_mark+2),a  
5604 18 03			jr .pastdmark  
5606 ..			.dmark: db "OPx"  
5609 f1			.pastdmark: pop af  
560a			endm  
# End of macro DMARK
560a					CALLMONITOR 
560a cd aa fd			call debug_vector  
560d				endm  
# End of macro CALLMONITOR
560d				endif 
560d fe 00				cp 0 
560f 20 03				jr nz, .skipopeneof 
5611					; have opened an empty file 
5611					 
5611 32 9f f9				ld (store_openext), a 
5614			 
5614			.skipopeneof: 
5614			 
5614 6f					ld l, a 
5615 26 00				ld h, 0 
5617 cd 46 20				call forth_push_numhl 
561a			 
561a			 
561a				       NEXTW 
561a c3 37 24			jp macro_next 
561d				endm 
# End of macro NEXTW
561d			.READ: 
561d				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
561d 6c				db WORD_SYS_CORE+88             
561e 47 57			dw .EOF            
5620 05				db 4 + 1 
5621 .. 00			db "READ",0              
5626				endm 
# End of macro CWHEAD
5626			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
5626			; | | e.g. 
5626			; | | $01 OPEN $01 DO READ . LOOP 
5626			; | | 
5626			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
5626			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
5626			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
5626			; | | two bytes contain the file id and extent. 
5626			; | |  
5626			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
5626			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
5626			; | | > [!NOTE] 
5626			; | | > Compatible with PicoSPINet  
5626			 
5626					if DEBUG_FORTH_WORDS_KEY 
5626						DMARK "REA" 
5626 f5				push af  
5627 3a 3b 56			ld a, (.dmark)  
562a 32 a0 fd			ld (debug_mark),a  
562d 3a 3c 56			ld a, (.dmark+1)  
5630 32 a1 fd			ld (debug_mark+1),a  
5633 3a 3d 56			ld a, (.dmark+2)  
5636 32 a2 fd			ld (debug_mark+2),a  
5639 18 03			jr .pastdmark  
563b ..			.dmark: db "REA"  
563e f1			.pastdmark: pop af  
563f			endm  
# End of macro DMARK
563f						CALLMONITOR 
563f cd aa fd			call debug_vector  
5642				endm  
# End of macro CALLMONITOR
5642					endif 
5642					; store_openext use it. If zero it is EOF 
5642			 
5642					; read block from current stream id 
5642					; if the block does not contain zero term keep reading blocks until zero found 
5642					; push the block to stack 
5642					; save the block id to stream 
5642			 
5642			 
5642 cd 74 57				call .testeof 
5645 3e 01				ld a, 1 
5647 bd					cp l 
5648 ca 23 57				jp z, .ateof 
564b			 
564b			 
564b			;		FORTH_DSP_VALUEHL 
564b			 
564b			;		push hl 
564b			 
564b			;	if DEBUG_STORESE 
564b			;		DMARK "REA" 
564b			;		CALLMONITOR 
564b			;	endif 
564b			;		FORTH_DSP_POP 
564b			 
564b			;		pop hl 
564b				 
564b 3a 9c f9				ld a, (store_filecache) 
564e 67					ld h,a 
564f			 
564f 3a 9f f9				ld a, (store_openext) 
5652 6f					ld l, a 
5653					 
5653 fe 00				cp 0 
5655 ca 23 57				jp z, .ateof     ; dont read past eof 
5658			 
5658 cd b0 0c				call storage_clear_page 
565b			 
565b 11 af f9				ld de, store_page 
565e				if DEBUG_STORESE 
565e					DMARK "RE1" 
565e f5				push af  
565f 3a 73 56			ld a, (.dmark)  
5662 32 a0 fd			ld (debug_mark),a  
5665 3a 74 56			ld a, (.dmark+1)  
5668 32 a1 fd			ld (debug_mark+1),a  
566b 3a 75 56			ld a, (.dmark+2)  
566e 32 a2 fd			ld (debug_mark+2),a  
5671 18 03			jr .pastdmark  
5673 ..			.dmark: db "RE1"  
5676 f1			.pastdmark: pop af  
5677			endm  
# End of macro DMARK
5677					CALLMONITOR 
5677 cd aa fd			call debug_vector  
567a				endm  
# End of macro CALLMONITOR
567a				endif 
567a cd cd 09				call storage_read 
567d			 
567d				if DEBUG_STORESE 
567d					DMARK "RE2" 
567d f5				push af  
567e 3a 92 56			ld a, (.dmark)  
5681 32 a0 fd			ld (debug_mark),a  
5684 3a 93 56			ld a, (.dmark+1)  
5687 32 a1 fd			ld (debug_mark+1),a  
568a 3a 94 56			ld a, (.dmark+2)  
568d 32 a2 fd			ld (debug_mark+2),a  
5690 18 03			jr .pastdmark  
5692 ..			.dmark: db "RE2"  
5695 f1			.pastdmark: pop af  
5696			endm  
# End of macro DMARK
5696					CALLMONITOR 
5696 cd aa fd			call debug_vector  
5699				endm  
# End of macro CALLMONITOR
5699				endif 
5699 cd 07 10			call ishlzero 
569c			;	ld a, l 
569c			;	add h 
569c			;	cp 0 
569c ca 23 57			jp z, .readeof 
569f			 
569f				; not eof so hl should point to data to push to stack 
569f			 
569f				if DEBUG_STORESE 
569f					DMARK "RE3" 
569f f5				push af  
56a0 3a b4 56			ld a, (.dmark)  
56a3 32 a0 fd			ld (debug_mark),a  
56a6 3a b5 56			ld a, (.dmark+1)  
56a9 32 a1 fd			ld (debug_mark+1),a  
56ac 3a b6 56			ld a, (.dmark+2)  
56af 32 a2 fd			ld (debug_mark+2),a  
56b2 18 03			jr .pastdmark  
56b4 ..			.dmark: db "RE3"  
56b7 f1			.pastdmark: pop af  
56b8			endm  
# End of macro DMARK
56b8					CALLMONITOR 
56b8 cd aa fd			call debug_vector  
56bb				endm  
# End of macro CALLMONITOR
56bb				endif 
56bb cd b4 20			call forth_push_str 
56be			 
56be				if DEBUG_STORESE 
56be					DMARK "RE4" 
56be f5				push af  
56bf 3a d3 56			ld a, (.dmark)  
56c2 32 a0 fd			ld (debug_mark),a  
56c5 3a d4 56			ld a, (.dmark+1)  
56c8 32 a1 fd			ld (debug_mark+1),a  
56cb 3a d5 56			ld a, (.dmark+2)  
56ce 32 a2 fd			ld (debug_mark+2),a  
56d1 18 03			jr .pastdmark  
56d3 ..			.dmark: db "RE4"  
56d6 f1			.pastdmark: pop af  
56d7			endm  
# End of macro DMARK
56d7					CALLMONITOR 
56d7 cd aa fd			call debug_vector  
56da				endm  
# End of macro CALLMONITOR
56da				endif 
56da				; get next block  or mark as eof 
56da			 
56da 3a 9e f9			ld a, (store_openmaxext)   ; get our limit 
56dd 4f				ld c, a	 
56de 3a 9f f9			ld a, (store_openext) 
56e1			 
56e1				if DEBUG_STORESE 
56e1					DMARK "RE5" 
56e1 f5				push af  
56e2 3a f6 56			ld a, (.dmark)  
56e5 32 a0 fd			ld (debug_mark),a  
56e8 3a f7 56			ld a, (.dmark+1)  
56eb 32 a1 fd			ld (debug_mark+1),a  
56ee 3a f8 56			ld a, (.dmark+2)  
56f1 32 a2 fd			ld (debug_mark+2),a  
56f4 18 03			jr .pastdmark  
56f6 ..			.dmark: db "RE5"  
56f9 f1			.pastdmark: pop af  
56fa			endm  
# End of macro DMARK
56fa					CALLMONITOR 
56fa cd aa fd			call debug_vector  
56fd				endm  
# End of macro CALLMONITOR
56fd				endif 
56fd b9				cp c 
56fe 28 23			jr z, .readeof     ; at last extent 
5700			 
5700 3c					inc a 
5701 32 9f f9				ld (store_openext), a 
5704			 
5704				if DEBUG_STORESE 
5704					DMARK "RE6" 
5704 f5				push af  
5705 3a 19 57			ld a, (.dmark)  
5708 32 a0 fd			ld (debug_mark),a  
570b 3a 1a 57			ld a, (.dmark+1)  
570e 32 a1 fd			ld (debug_mark+1),a  
5711 3a 1b 57			ld a, (.dmark+2)  
5714 32 a2 fd			ld (debug_mark+2),a  
5717 18 03			jr .pastdmark  
5719 ..			.dmark: db "RE6"  
571c f1			.pastdmark: pop af  
571d			endm  
# End of macro DMARK
571d					CALLMONITOR 
571d cd aa fd			call debug_vector  
5720				endm  
# End of macro CALLMONITOR
5720				endif 
5720			 
5720			 
5720				       NEXTW 
5720 c3 37 24			jp macro_next 
5723				endm 
# End of macro NEXTW
5723			.ateof: 
5723				;	ld hl, .showeof 
5723				;	call forth_push_str 
5723 3e 00		.readeof:	ld a, 0 
5725 32 9f f9				ld (store_openext), a 
5728			 
5728					 
5728				if DEBUG_STORESE 
5728					DMARK "REF" 
5728 f5				push af  
5729 3a 3d 57			ld a, (.dmark)  
572c 32 a0 fd			ld (debug_mark),a  
572f 3a 3e 57			ld a, (.dmark+1)  
5732 32 a1 fd			ld (debug_mark+1),a  
5735 3a 3f 57			ld a, (.dmark+2)  
5738 32 a2 fd			ld (debug_mark+2),a  
573b 18 03			jr .pastdmark  
573d ..			.dmark: db "REF"  
5740 f1			.pastdmark: pop af  
5741			endm  
# End of macro DMARK
5741					CALLMONITOR 
5741 cd aa fd			call debug_vector  
5744				endm  
# End of macro CALLMONITOR
5744				endif 
5744				       NEXTW 
5744 c3 37 24			jp macro_next 
5747				endm 
# End of macro NEXTW
5747			 
5747			;.showeof:   db "eof", 0 
5747			 
5747			 
5747			.EOF: 
5747				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
5747 6d				db WORD_SYS_CORE+89             
5748 89 57			dw .FORMAT            
574a 04				db 3 + 1 
574b .. 00			db "EOF",0              
574f				endm 
# End of macro CWHEAD
574f			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
574f			; | | e.g. 
574f			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
574f			; | | > [!NOTE] 
574f			; | | > Compatible with PicoSPINet  
574f					; TODO if current block id for stream is zero then push true else false 
574f			 
574f					if DEBUG_FORTH_WORDS_KEY 
574f						DMARK "EOF" 
574f f5				push af  
5750 3a 64 57			ld a, (.dmark)  
5753 32 a0 fd			ld (debug_mark),a  
5756 3a 65 57			ld a, (.dmark+1)  
5759 32 a1 fd			ld (debug_mark+1),a  
575c 3a 66 57			ld a, (.dmark+2)  
575f 32 a2 fd			ld (debug_mark+2),a  
5762 18 03			jr .pastdmark  
5764 ..			.dmark: db "EOF"  
5767 f1			.pastdmark: pop af  
5768			endm  
# End of macro DMARK
5768						CALLMONITOR 
5768 cd aa fd			call debug_vector  
576b				endm  
# End of macro CALLMONITOR
576b					endif 
576b			 
576b					; TODO handlue multiple file streams 
576b			 
576b			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
576b cd 74 57				call .testeof 
576e cd 46 20				call forth_push_numhl 
5771			 
5771			 
5771				       NEXTW 
5771 c3 37 24			jp macro_next 
5774				endm 
# End of macro NEXTW
5774			 
5774			.testeof: 
5774 2e 01				ld l, 1 
5776 3a 9e f9				ld a, (store_openmaxext) 
5779 fe 00				cp 0 
577b 28 09				jr  z, .eofdone   ; empty file 
577d 3a 9f f9				ld a, (store_openext) 
5780 fe 00				cp 0 
5782 28 02				jr  z, .eofdone 
5784 2e 00				ld l, 0 
5786 26 00		.eofdone:	ld h, 0 
5788 c9					ret 
5789			 
5789			 
5789			 
5789			 
5789			.FORMAT: 
5789				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
5789 6d				db WORD_SYS_CORE+89             
578a da 57			dw .LABEL            
578c 07				db 6 + 1 
578d .. 00			db "FORMAT",0              
5794				endm 
# End of macro CWHEAD
5794			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
5794			; | | > [!NOTE] 
5794			; | | > Compatible with PicoSPINet  
5794					; TODO if current block id for stream is zero then push true else false 
5794				 
5794				if DEBUG_STORESE 
5794					DMARK "FOR" 
5794 f5				push af  
5795 3a a9 57			ld a, (.dmark)  
5798 32 a0 fd			ld (debug_mark),a  
579b 3a aa 57			ld a, (.dmark+1)  
579e 32 a1 fd			ld (debug_mark+1),a  
57a1 3a ab 57			ld a, (.dmark+2)  
57a4 32 a2 fd			ld (debug_mark+2),a  
57a7 18 03			jr .pastdmark  
57a9 ..			.dmark: db "FOR"  
57ac f1			.pastdmark: pop af  
57ad			endm  
# End of macro DMARK
57ad					CALLMONITOR 
57ad cd aa fd			call debug_vector  
57b0				endm  
# End of macro CALLMONITOR
57b0				endif 
57b0					; Wipes the bank check flags to cause a reformat on next block 0 read 
57b0			 
57b0 21 01 00				ld hl, 1 
57b3 3e 00				ld a, 0 
57b5 cd 79 02				call se_writebyte 
57b8			 
57b8				if DEBUG_STORESE 
57b8					DMARK "FO0" 
57b8 f5				push af  
57b9 3a cd 57			ld a, (.dmark)  
57bc 32 a0 fd			ld (debug_mark),a  
57bf 3a ce 57			ld a, (.dmark+1)  
57c2 32 a1 fd			ld (debug_mark+1),a  
57c5 3a cf 57			ld a, (.dmark+2)  
57c8 32 a2 fd			ld (debug_mark+2),a  
57cb 18 03			jr .pastdmark  
57cd ..			.dmark: db "FO0"  
57d0 f1			.pastdmark: pop af  
57d1			endm  
# End of macro DMARK
57d1					CALLMONITOR 
57d1 cd aa fd			call debug_vector  
57d4				endm  
# End of macro CALLMONITOR
57d4				endif 
57d4					; force bank init 
57d4			 
57d4 cd 25 05				call storage_get_block_0 
57d7					 
57d7				       NEXTW 
57d7 c3 37 24			jp macro_next 
57da				endm 
# End of macro NEXTW
57da			.LABEL: 
57da				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
57da 6d				db WORD_SYS_CORE+89             
57db 28 58			dw .STOREPAGE            
57dd 06				db 5 + 1 
57de .. 00			db "LABEL",0              
57e4				endm 
# End of macro CWHEAD
57e4			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
57e4			; | | > [!NOTE] 
57e4			; | | > Compatible with PicoSPINet  
57e4					; TODO test to see if bank is selected 
57e4				 
57e4					if DEBUG_FORTH_WORDS_KEY 
57e4						DMARK "LBL" 
57e4 f5				push af  
57e5 3a f9 57			ld a, (.dmark)  
57e8 32 a0 fd			ld (debug_mark),a  
57eb 3a fa 57			ld a, (.dmark+1)  
57ee 32 a1 fd			ld (debug_mark+1),a  
57f1 3a fb 57			ld a, (.dmark+2)  
57f4 32 a2 fd			ld (debug_mark+2),a  
57f7 18 03			jr .pastdmark  
57f9 ..			.dmark: db "LBL"  
57fc f1			.pastdmark: pop af  
57fd			endm  
# End of macro DMARK
57fd						CALLMONITOR 
57fd cd aa fd			call debug_vector  
5800				endm  
# End of macro CALLMONITOR
5800					endif 
5800			;	if DEBUG_STORESE 
5800			;		DMARK "LBL" 
5800			;		CALLMONITOR 
5800			;	endif 
5800					FORTH_DSP_VALUEHL 
5800 cd 4b 22			call macro_dsp_valuehl 
5803				endm 
# End of macro FORTH_DSP_VALUEHL
5803					;v5FORTH_DSP_VALUE 
5803					 
5803			;		push hl 
5803					FORTH_DSP_POP 
5803 cd 03 23			call macro_forth_dsp_pop 
5806				endm 
# End of macro FORTH_DSP_POP
5806			;		pop hl 
5806			 
5806			;v5		inc hl   ; move past the type marker 
5806			 
5806				if DEBUG_STORESE 
5806					DMARK "LBl" 
5806 f5				push af  
5807 3a 1b 58			ld a, (.dmark)  
580a 32 a0 fd			ld (debug_mark),a  
580d 3a 1c 58			ld a, (.dmark+1)  
5810 32 a1 fd			ld (debug_mark+1),a  
5813 3a 1d 58			ld a, (.dmark+2)  
5816 32 a2 fd			ld (debug_mark+2),a  
5819 18 03			jr .pastdmark  
581b ..			.dmark: db "LBl"  
581e f1			.pastdmark: pop af  
581f			endm  
# End of macro DMARK
581f					CALLMONITOR 
581f cd aa fd			call debug_vector  
5822				endm  
# End of macro CALLMONITOR
5822				endif 
5822 cd 49 06				call storage_label 
5825			 
5825				       NEXTW 
5825 c3 37 24			jp macro_next 
5828				endm 
# End of macro NEXTW
5828			.STOREPAGE: 
5828				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
5828 6d				db WORD_SYS_CORE+89             
5829 5b 58			dw .LABELS            
582b 0a				db 9 + 1 
582c .. 00			db "STOREPAGE",0              
5836				endm 
# End of macro CWHEAD
5836			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
5836			; | | > [!NOTE] 
5836			; | | > Compatible with PicoSPINet  
5836					; TODO test to see if bank is selected 
5836				 
5836					if DEBUG_FORTH_WORDS_KEY 
5836						DMARK "STP" 
5836 f5				push af  
5837 3a 4b 58			ld a, (.dmark)  
583a 32 a0 fd			ld (debug_mark),a  
583d 3a 4c 58			ld a, (.dmark+1)  
5840 32 a1 fd			ld (debug_mark+1),a  
5843 3a 4d 58			ld a, (.dmark+2)  
5846 32 a2 fd			ld (debug_mark+2),a  
5849 18 03			jr .pastdmark  
584b ..			.dmark: db "STP"  
584e f1			.pastdmark: pop af  
584f			endm  
# End of macro DMARK
584f						CALLMONITOR 
584f cd aa fd			call debug_vector  
5852				endm  
# End of macro CALLMONITOR
5852					endif 
5852			;	if DEBUG_STORESE 
5852			;		DMARK "STP" 
5852			;		CALLMONITOR 
5852			;	endif 
5852			 
5852 21 af f9			ld hl, store_page 
5855 cd 46 20			call forth_push_numhl 
5858			 
5858			 
5858				       NEXTW 
5858 c3 37 24			jp macro_next 
585b				endm 
# End of macro NEXTW
585b			.LABELS: 
585b				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
585b 6d				db WORD_SYS_CORE+89             
585c e5 58			dw .SCONST1            
585e 07				db 6 + 1 
585f .. 00			db "LABELS",0              
5866				endm 
# End of macro CWHEAD
5866			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | DONE 
5866			; | | > [!CAUTION] 
5866			; | | > *NOT* Compatible with PicoSPINet  
5866					;  
5866			 
5866					; save the current device selected to restore afterwards 
5866				 
5866 3a 95 f9				ld a, (spi_device) 
5869 f5					push af 
586a			 
586a			 
586a					; run through each of the banks 
586a			 
586a 21 01 00				ld hl, 1 
586d cd 46 20				call forth_push_numhl 
5870 3e ff				ld a, SPI_CE_HIGH 
5872 cb 87				res SPI_CE0, a 
5874 32 95 f9				ld (spi_device), a 
5877 cd 25 05				call storage_get_block_0 
587a 21 b2 f9				ld hl, store_page+3 
587d cd b4 20				call forth_push_str 
5880			 
5880					 
5880 21 02 00				ld hl, 2 
5883 cd 46 20				call forth_push_numhl 
5886 3e ff				ld a, SPI_CE_HIGH 
5888 cb 8f				res SPI_CE1, a 
588a 32 95 f9				ld (spi_device), a 
588d cd 25 05				call storage_get_block_0 
5890 21 b2 f9				ld hl, store_page+3 
5893 cd b4 20				call forth_push_str 
5896			 
5896					 
5896 21 03 00				ld hl, 3 
5899 cd 46 20				call forth_push_numhl 
589c 3e ff				ld a, SPI_CE_HIGH 
589e cb 97				res SPI_CE2, a 
58a0 32 95 f9				ld (spi_device), a 
58a3 cd 25 05				call storage_get_block_0 
58a6 21 b2 f9				ld hl, store_page+3 
58a9 cd b4 20				call forth_push_str 
58ac			 
58ac			 
58ac 21 04 00				ld hl, 4 
58af cd 46 20				call forth_push_numhl 
58b2 3e ff				ld a, SPI_CE_HIGH 
58b4 cb 9f				res SPI_CE3, a 
58b6 32 95 f9				ld (spi_device), a 
58b9 cd 25 05				call storage_get_block_0 
58bc 21 b2 f9				ld hl, store_page+3 
58bf cd b4 20				call forth_push_str 
58c2			 
58c2					 
58c2			 
58c2 21 05 00				ld hl, 5 
58c5 cd 46 20				call forth_push_numhl 
58c8 3e ff				ld a, SPI_CE_HIGH 
58ca cb a7				res SPI_CE4, a 
58cc 32 95 f9				ld (spi_device), a 
58cf cd 25 05				call storage_get_block_0 
58d2 21 b2 f9				ld hl, store_page+3 
58d5 cd b4 20				call forth_push_str 
58d8			 
58d8					 
58d8					; push fixed count of storage devices (on board) for now 
58d8			 
58d8 21 05 00				ld hl, 5 
58db cd 46 20				call forth_push_numhl 
58de			 
58de					; restore selected device  
58de				 
58de f1					pop af 
58df 32 95 f9				ld (spi_device), a 
58e2			 
58e2				       NEXTW 
58e2 c3 37 24			jp macro_next 
58e5				endm 
# End of macro NEXTW
58e5			 
58e5			.SCONST1: 
58e5				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
58e5 6d				db WORD_SYS_CORE+89             
58e6 fc 58			dw .SCONST2            
58e8 07				db 6 + 1 
58e9 .. 00			db "FILEID",0              
58f0				endm 
# End of macro CWHEAD
58f0			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
58f0			; | | > [!NOTE] 
58f0			; | | > Compatible with PicoSPINet  
58f0 3a 9c f9				ld a, (store_filecache) 
58f3 26 00				ld h, 0 
58f5 6f					ld l, a 
58f6 cd 46 20				call forth_push_numhl 
58f9					NEXTW 
58f9 c3 37 24			jp macro_next 
58fc				endm 
# End of macro NEXTW
58fc			.SCONST2: 
58fc				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
58fc 6d				db WORD_SYS_CORE+89             
58fd 14 59			dw .SCONST3            
58ff 08				db 7 + 1 
5900 .. 00			db "FILEEXT",0              
5908				endm 
# End of macro CWHEAD
5908			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
5908			; | | > [!NOTE] 
5908			; | | > Compatible with PicoSPINet  
5908 3a 9f f9				ld a, (store_openext) 
590b 26 00				ld h, 0 
590d 6f					ld l, a 
590e cd 46 20				call forth_push_numhl 
5911					NEXTW 
5911 c3 37 24			jp macro_next 
5914				endm 
# End of macro NEXTW
5914			.SCONST3: 
5914				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
5914 6d				db WORD_SYS_CORE+89             
5915 2c 59			dw .SCONST4            
5917 08				db 7 + 1 
5918 .. 00			db "FILEMAX",0              
5920				endm 
# End of macro CWHEAD
5920			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5920			; | | > [!NOTE] 
5920			; | | > Compatible with PicoSPINet  
5920 3a 9e f9				ld a, (store_openmaxext) 
5923 26 00				ld h, 0 
5925 6f					ld l, a 
5926 cd 46 20				call forth_push_numhl 
5929					NEXTW 
5929 c3 37 24			jp macro_next 
592c				endm 
# End of macro NEXTW
592c			.SCONST4: 
592c				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
592c 6d				db WORD_SYS_CORE+89             
592d 42 59			dw .SCONST5            
592f 09				db 8 + 1 
5930 .. 00			db "FILEADDR",0              
5939				endm 
# End of macro CWHEAD
5939			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currently open file to stack | DONE 
5939			; | | > [!NOTE] 
5939			; | | > Compatible with PicoSPINet  
5939 2a a0 f9				ld hl, (store_openaddr) 
593c cd 46 20				call forth_push_numhl 
593f					NEXTW 
593f c3 37 24			jp macro_next 
5942				endm 
# End of macro NEXTW
5942			.SCONST5: 
5942				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
5942 6d				db WORD_SYS_CORE+89             
5943 63 59			dw .SCONST6            
5945 09				db 8 + 1 
5946 .. 00			db "FILEPAGE",0              
594f				endm 
# End of macro CWHEAD
594f			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
594f			; | | > [!NOTE] 
594f			; | | > Compatible with PicoSPINet  
594f 2a a0 f9				ld hl, (store_openaddr) 
5952 e5					push hl 
5953 c1					pop bc 
5954 16 00				ld d, 0 
5956 1e 40				ld e, STORE_BLOCK_PHY 
5958 cd 3b 0f				call Div16 
595b c5					push bc 
595c e1					pop hl 
595d cd 46 20				call forth_push_numhl 
5960					NEXTW 
5960 c3 37 24			jp macro_next 
5963				endm 
# End of macro NEXTW
5963			.SCONST6: 
5963				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
5963 6d				db WORD_SYS_CORE+89             
5964 7c 59			dw .ENDSTORAGE            
5966 09				db 8 + 1 
5967 .. 00			db "READCONT",0              
5970				endm 
# End of macro CWHEAD
5970			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
5970			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
5970			; | | a further read should, if applicable, be CONCAT to the previous read. 
5970			; | | > [!NOTE] 
5970			; | | > Compatible with PicoSPINet  
5970 3a a2 f9				ld a, (store_readcont) 
5973 26 00				ld h, 0 
5975 6f					ld l, a 
5976 cd 46 20				call forth_push_numhl 
5979					NEXTW 
5979 c3 37 24			jp macro_next 
597c				endm 
# End of macro NEXTW
597c			.ENDSTORAGE: 
597c			; eof 
# End of file forth_words_storage.asm
597c			endif 
597c				include "forth_words_device.asm" 
597c			; Device related words 
597c			 
597c			; | ## Device Words 
597c			 
597c			;if SOUND_ENABLE 
597c			;.NOTE: 
597c			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
597c			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
597c			;		if DEBUG_FORTH_WORDS_KEY 
597c			;			DMARK "NTE" 
597c			;			CALLMONITOR 
597c			;		endif 
597c			; 
597c			;	 
597c			; 
597c			;		NEXTW 
597c			;.AFTERSOUND: 
597c			;endif 
597c			 
597c			 
597c			USE_GPIO: equ 0 
597c			 
597c			if USE_GPIO 
597c			.GP1: 
597c				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
597c			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
597c					NEXTW 
597c			.GP2: 
597c				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
597c			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
597c			 
597c					NEXTW 
597c			 
597c			.GP3: 
597c				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
597c			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
597c			 
597c					NEXTW 
597c			 
597c			.GP4: 
597c				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
597c			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
597c			 
597c					NEXTW 
597c			.SIN: 
597c			 
597c			 
597c			endif 
597c			 
597c			 
597c				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
597c 33				db WORD_SYS_CORE+31             
597d b1 59			dw .SOUT            
597f 03				db 2 + 1 
5980 .. 00			db "IN",0              
5983				endm 
# End of macro CWHEAD
5983			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
5983					if DEBUG_FORTH_WORDS_KEY 
5983						DMARK "IN." 
5983 f5				push af  
5984 3a 98 59			ld a, (.dmark)  
5987 32 a0 fd			ld (debug_mark),a  
598a 3a 99 59			ld a, (.dmark+1)  
598d 32 a1 fd			ld (debug_mark+1),a  
5990 3a 9a 59			ld a, (.dmark+2)  
5993 32 a2 fd			ld (debug_mark+2),a  
5996 18 03			jr .pastdmark  
5998 ..			.dmark: db "IN."  
599b f1			.pastdmark: pop af  
599c			endm  
# End of macro DMARK
599c						CALLMONITOR 
599c cd aa fd			call debug_vector  
599f				endm  
# End of macro CALLMONITOR
599f					endif 
599f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
599f cd 4b 22			call macro_dsp_valuehl 
59a2				endm 
# End of macro FORTH_DSP_VALUEHL
59a2			 
59a2 e5					push hl 
59a3			 
59a3					; destroy value TOS 
59a3			 
59a3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59a3 cd 03 23			call macro_forth_dsp_pop 
59a6				endm 
# End of macro FORTH_DSP_POP
59a6			 
59a6					; one value on hl get other one back 
59a6			 
59a6 c1					pop bc 
59a7			 
59a7					; do the sub 
59a7			;		ex de, hl 
59a7			 
59a7 ed 68				in l,(c) 
59a9			 
59a9					; save it 
59a9			 
59a9 26 00				ld h,0 
59ab			 
59ab					; TODO push value back onto stack for another op etc 
59ab			 
59ab cd 46 20				call forth_push_numhl 
59ae					NEXTW 
59ae c3 37 24			jp macro_next 
59b1				endm 
# End of macro NEXTW
59b1			.SOUT: 
59b1				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
59b1 34				db WORD_SYS_CORE+32             
59b2 04 5a			dw .SPIO            
59b4 04				db 3 + 1 
59b5 .. 00			db "OUT",0              
59b9				endm 
# End of macro CWHEAD
59b9			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
59b9					if DEBUG_FORTH_WORDS_KEY 
59b9						DMARK "OUT" 
59b9 f5				push af  
59ba 3a ce 59			ld a, (.dmark)  
59bd 32 a0 fd			ld (debug_mark),a  
59c0 3a cf 59			ld a, (.dmark+1)  
59c3 32 a1 fd			ld (debug_mark+1),a  
59c6 3a d0 59			ld a, (.dmark+2)  
59c9 32 a2 fd			ld (debug_mark+2),a  
59cc 18 03			jr .pastdmark  
59ce ..			.dmark: db "OUT"  
59d1 f1			.pastdmark: pop af  
59d2			endm  
# End of macro DMARK
59d2						CALLMONITOR 
59d2 cd aa fd			call debug_vector  
59d5				endm  
# End of macro CALLMONITOR
59d5					endif 
59d5			 
59d5					; get port 
59d5			 
59d5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
59d5 cd 4b 22			call macro_dsp_valuehl 
59d8				endm 
# End of macro FORTH_DSP_VALUEHL
59d8			 
59d8 e5					push hl 
59d9			 
59d9					; destroy value TOS 
59d9			 
59d9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59d9 cd 03 23			call macro_forth_dsp_pop 
59dc				endm 
# End of macro FORTH_DSP_POP
59dc			 
59dc					; get byte to send 
59dc			 
59dc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
59dc cd 4b 22			call macro_dsp_valuehl 
59df				endm 
# End of macro FORTH_DSP_VALUEHL
59df			 
59df			;		push hl 
59df			 
59df					; destroy value TOS 
59df			 
59df					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59df cd 03 23			call macro_forth_dsp_pop 
59e2				endm 
# End of macro FORTH_DSP_POP
59e2			 
59e2					; one value on hl get other one back 
59e2			 
59e2			;		pop hl 
59e2			 
59e2 c1					pop bc 
59e3			 
59e3					if DEBUG_FORTH_WORDS 
59e3						DMARK "OUT" 
59e3 f5				push af  
59e4 3a f8 59			ld a, (.dmark)  
59e7 32 a0 fd			ld (debug_mark),a  
59ea 3a f9 59			ld a, (.dmark+1)  
59ed 32 a1 fd			ld (debug_mark+1),a  
59f0 3a fa 59			ld a, (.dmark+2)  
59f3 32 a2 fd			ld (debug_mark+2),a  
59f6 18 03			jr .pastdmark  
59f8 ..			.dmark: db "OUT"  
59fb f1			.pastdmark: pop af  
59fc			endm  
# End of macro DMARK
59fc						CALLMONITOR 
59fc cd aa fd			call debug_vector  
59ff				endm  
# End of macro CALLMONITOR
59ff					endif 
59ff			 
59ff ed 69				out (c), l 
5a01			 
5a01					NEXTW 
5a01 c3 37 24			jp macro_next 
5a04				endm 
# End of macro NEXTW
5a04			 
5a04			 
5a04			.SPIO: 
5a04			 
5a04			if STORAGE_SE 
5a04				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
5a04 51				db WORD_SYS_CORE+61             
5a05 15 5a			dw .SPICEH            
5a07 07				db 6 + 1 
5a08 .. 00			db "SPICEL",0              
5a0f				endm 
# End of macro CWHEAD
5a0f			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5a0f			 
5a0f cd 22 02				call spi_ce_low 
5a12			    NEXTW 
5a12 c3 37 24			jp macro_next 
5a15				endm 
# End of macro NEXTW
5a15			 
5a15			.SPICEH: 
5a15				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
5a15 51				db WORD_SYS_CORE+61             
5a16 26 5a			dw .SPIOb            
5a18 07				db 6 + 1 
5a19 .. 00			db "SPICEH",0              
5a20				endm 
# End of macro CWHEAD
5a20			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
5a20			 
5a20 cd 11 02				call spi_ce_high 
5a23			    NEXTW 
5a23 c3 37 24			jp macro_next 
5a26				endm 
# End of macro NEXTW
5a26			 
5a26			 
5a26			.SPIOb: 
5a26			 
5a26				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
5a26 51				db WORD_SYS_CORE+61             
5a27 58 5a			dw .SPII            
5a29 05				db 4 + 1 
5a2a .. 00			db "SPIO",0              
5a2f				endm 
# End of macro CWHEAD
5a2f			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
5a2f			 
5a2f					if DEBUG_FORTH_WORDS_KEY 
5a2f						DMARK "SPo" 
5a2f f5				push af  
5a30 3a 44 5a			ld a, (.dmark)  
5a33 32 a0 fd			ld (debug_mark),a  
5a36 3a 45 5a			ld a, (.dmark+1)  
5a39 32 a1 fd			ld (debug_mark+1),a  
5a3c 3a 46 5a			ld a, (.dmark+2)  
5a3f 32 a2 fd			ld (debug_mark+2),a  
5a42 18 03			jr .pastdmark  
5a44 ..			.dmark: db "SPo"  
5a47 f1			.pastdmark: pop af  
5a48			endm  
# End of macro DMARK
5a48						CALLMONITOR 
5a48 cd aa fd			call debug_vector  
5a4b				endm  
# End of macro CALLMONITOR
5a4b					endif 
5a4b					; get port 
5a4b			 
5a4b			 
5a4b					; get byte to send 
5a4b			 
5a4b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5a4b cd 4b 22			call macro_dsp_valuehl 
5a4e				endm 
# End of macro FORTH_DSP_VALUEHL
5a4e			 
5a4e			;		push hl    ; u1  
5a4e			 
5a4e					; destroy value TOS 
5a4e			 
5a4e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5a4e cd 03 23			call macro_forth_dsp_pop 
5a51				endm 
# End of macro FORTH_DSP_POP
5a51			 
5a51					; one value on hl get other one back 
5a51			 
5a51			;		pop hl   ; u2 - addr 
5a51			 
5a51					; TODO Send SPI byte 
5a51			 
5a51			;		push hl 
5a51			;		call spi_ce_low 
5a51			;		pop hl 
5a51 7d					ld a, l 
5a52 cd 10 01				call spi_send_byte 
5a55			;		call spi_ce_high 
5a55			 
5a55					NEXTW 
5a55 c3 37 24			jp macro_next 
5a58				endm 
# End of macro NEXTW
5a58			 
5a58			.SPII: 
5a58				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
5a58 52				db WORD_SYS_CORE+62             
5a59 c1 5a			dw .SESEL            
5a5b 06				db 5 + 1 
5a5c .. 00			db "SPII",0              
5a61				endm 
# End of macro CWHEAD
5a61			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
5a61					if DEBUG_FORTH_WORDS_KEY 
5a61						DMARK "SPi" 
5a61 f5				push af  
5a62 3a 76 5a			ld a, (.dmark)  
5a65 32 a0 fd			ld (debug_mark),a  
5a68 3a 77 5a			ld a, (.dmark+1)  
5a6b 32 a1 fd			ld (debug_mark+1),a  
5a6e 3a 78 5a			ld a, (.dmark+2)  
5a71 32 a2 fd			ld (debug_mark+2),a  
5a74 18 03			jr .pastdmark  
5a76 ..			.dmark: db "SPi"  
5a79 f1			.pastdmark: pop af  
5a7a			endm  
# End of macro DMARK
5a7a						CALLMONITOR 
5a7a cd aa fd			call debug_vector  
5a7d				endm  
# End of macro CALLMONITOR
5a7d					endif 
5a7d			 
5a7d					; TODO Get SPI byte 
5a7d			 
5a7d cd 37 01				call spi_read_byte 
5a80			 
5a80					if DEBUG_FORTH_WORDS 
5a80						DMARK "Si2" 
5a80 f5				push af  
5a81 3a 95 5a			ld a, (.dmark)  
5a84 32 a0 fd			ld (debug_mark),a  
5a87 3a 96 5a			ld a, (.dmark+1)  
5a8a 32 a1 fd			ld (debug_mark+1),a  
5a8d 3a 97 5a			ld a, (.dmark+2)  
5a90 32 a2 fd			ld (debug_mark+2),a  
5a93 18 03			jr .pastdmark  
5a95 ..			.dmark: db "Si2"  
5a98 f1			.pastdmark: pop af  
5a99			endm  
# End of macro DMARK
5a99						CALLMONITOR 
5a99 cd aa fd			call debug_vector  
5a9c				endm  
# End of macro CALLMONITOR
5a9c					endif 
5a9c 26 00				ld h, 0 
5a9e 6f					ld l, a 
5a9f					if DEBUG_FORTH_WORDS 
5a9f						DMARK "Si3" 
5a9f f5				push af  
5aa0 3a b4 5a			ld a, (.dmark)  
5aa3 32 a0 fd			ld (debug_mark),a  
5aa6 3a b5 5a			ld a, (.dmark+1)  
5aa9 32 a1 fd			ld (debug_mark+1),a  
5aac 3a b6 5a			ld a, (.dmark+2)  
5aaf 32 a2 fd			ld (debug_mark+2),a  
5ab2 18 03			jr .pastdmark  
5ab4 ..			.dmark: db "Si3"  
5ab7 f1			.pastdmark: pop af  
5ab8			endm  
# End of macro DMARK
5ab8						CALLMONITOR 
5ab8 cd aa fd			call debug_vector  
5abb				endm  
# End of macro CALLMONITOR
5abb					endif 
5abb cd 46 20				call forth_push_numhl 
5abe			 
5abe					NEXTW 
5abe c3 37 24			jp macro_next 
5ac1				endm 
# End of macro NEXTW
5ac1			 
5ac1			 
5ac1			 
5ac1			.SESEL: 
5ac1				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
5ac1 66				db WORD_SYS_CORE+82             
5ac2 6a 5b			dw .CARTDEV            
5ac4 05				db 4 + 1 
5ac5 .. 00			db "BANK",0              
5aca				endm 
# End of macro CWHEAD
5aca			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
5aca					if DEBUG_FORTH_WORDS_KEY 
5aca						DMARK "BNK" 
5aca f5				push af  
5acb 3a df 5a			ld a, (.dmark)  
5ace 32 a0 fd			ld (debug_mark),a  
5ad1 3a e0 5a			ld a, (.dmark+1)  
5ad4 32 a1 fd			ld (debug_mark+1),a  
5ad7 3a e1 5a			ld a, (.dmark+2)  
5ada 32 a2 fd			ld (debug_mark+2),a  
5add 18 03			jr .pastdmark  
5adf ..			.dmark: db "BNK"  
5ae2 f1			.pastdmark: pop af  
5ae3			endm  
# End of macro DMARK
5ae3						CALLMONITOR 
5ae3 cd aa fd			call debug_vector  
5ae6				endm  
# End of macro CALLMONITOR
5ae6					endif 
5ae6			 
5ae6 3e ff				ld a, 255 
5ae8 32 98 f9				ld (spi_cartdev), a 
5aeb			 
5aeb					; get bank 
5aeb			 
5aeb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5aeb cd 4b 22			call macro_dsp_valuehl 
5aee				endm 
# End of macro FORTH_DSP_VALUEHL
5aee			 
5aee			;		push hl 
5aee			 
5aee					; destroy value TOS 
5aee			 
5aee					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5aee cd 03 23			call macro_forth_dsp_pop 
5af1				endm 
# End of macro FORTH_DSP_POP
5af1			 
5af1					; one value on hl get other one back 
5af1			 
5af1			;		pop hl 
5af1			 
5af1			 
5af1 0e ff				ld c, SPI_CE_HIGH 
5af3 06 30				ld b, '0'    ; human readable bank number 
5af5			 
5af5 7d					ld a, l 
5af6			 
5af6					if DEBUG_FORTH_WORDS 
5af6						DMARK "BNK" 
5af6 f5				push af  
5af7 3a 0b 5b			ld a, (.dmark)  
5afa 32 a0 fd			ld (debug_mark),a  
5afd 3a 0c 5b			ld a, (.dmark+1)  
5b00 32 a1 fd			ld (debug_mark+1),a  
5b03 3a 0d 5b			ld a, (.dmark+2)  
5b06 32 a2 fd			ld (debug_mark+2),a  
5b09 18 03			jr .pastdmark  
5b0b ..			.dmark: db "BNK"  
5b0e f1			.pastdmark: pop af  
5b0f			endm  
# End of macro DMARK
5b0f						CALLMONITOR 
5b0f cd aa fd			call debug_vector  
5b12				endm  
# End of macro CALLMONITOR
5b12					endif 
5b12			 
5b12					; active low 
5b12			 
5b12 fe 00				cp 0 
5b14 28 28				jr z, .bset 
5b16 fe 01				cp 1 
5b18 20 04				jr nz, .b2 
5b1a cb 81				res 0, c 
5b1c 06 31				ld b, '1'    ; human readable bank number 
5b1e fe 02		.b2:		cp 2 
5b20 20 04				jr nz, .b3 
5b22 cb 89				res 1, c 
5b24 06 32				ld b, '2'    ; human readable bank number 
5b26 fe 03		.b3:		cp 3 
5b28 20 04				jr nz, .b4 
5b2a cb 91				res 2, c 
5b2c 06 33				ld b, '3'    ; human readable bank number 
5b2e fe 04		.b4:		cp 4 
5b30 20 04				jr nz, .b5 
5b32 cb 99				res 3, c 
5b34 06 34				ld b, '4'    ; human readable bank number 
5b36 fe 05		.b5:		cp 5 
5b38 20 04				jr nz, .bset 
5b3a cb a1				res 4, c 
5b3c 06 35				ld b, '5'    ; human readable bank number 
5b3e			 
5b3e			.bset: 
5b3e 79					ld a, c 
5b3f 32 95 f9				ld (spi_device),a 
5b42 78					ld a, b 
5b43 32 94 f9				ld (spi_device_id),a 
5b46					if DEBUG_FORTH_WORDS 
5b46						DMARK "BN2" 
5b46 f5				push af  
5b47 3a 5b 5b			ld a, (.dmark)  
5b4a 32 a0 fd			ld (debug_mark),a  
5b4d 3a 5c 5b			ld a, (.dmark+1)  
5b50 32 a1 fd			ld (debug_mark+1),a  
5b53 3a 5d 5b			ld a, (.dmark+2)  
5b56 32 a2 fd			ld (debug_mark+2),a  
5b59 18 03			jr .pastdmark  
5b5b ..			.dmark: db "BN2"  
5b5e f1			.pastdmark: pop af  
5b5f			endm  
# End of macro DMARK
5b5f						CALLMONITOR 
5b5f cd aa fd			call debug_vector  
5b62				endm  
# End of macro CALLMONITOR
5b62					endif 
5b62			 
5b62					; set default SPI clk pulse time as disabled for BANK use 
5b62			 
5b62 3e 00				ld a, 0 
5b64 32 99 f9				ld (spi_clktime), a 
5b67			 
5b67					NEXTW 
5b67 c3 37 24			jp macro_next 
5b6a				endm 
# End of macro NEXTW
5b6a			 
5b6a			.CARTDEV: 
5b6a				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5b6a 66				db WORD_SYS_CORE+82             
5b6b 18 5c			dw .ENDDEVICE            
5b6d 08				db 7 + 1 
5b6e .. 00			db "CARTDEV",0              
5b76				endm 
# End of macro CWHEAD
5b76			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
5b76					if DEBUG_FORTH_WORDS_KEY 
5b76						DMARK "CDV" 
5b76 f5				push af  
5b77 3a 8b 5b			ld a, (.dmark)  
5b7a 32 a0 fd			ld (debug_mark),a  
5b7d 3a 8c 5b			ld a, (.dmark+1)  
5b80 32 a1 fd			ld (debug_mark+1),a  
5b83 3a 8d 5b			ld a, (.dmark+2)  
5b86 32 a2 fd			ld (debug_mark+2),a  
5b89 18 03			jr .pastdmark  
5b8b ..			.dmark: db "CDV"  
5b8e f1			.pastdmark: pop af  
5b8f			endm  
# End of macro DMARK
5b8f						CALLMONITOR 
5b8f cd aa fd			call debug_vector  
5b92				endm  
# End of macro CALLMONITOR
5b92					endif 
5b92			 
5b92					; disable se storage bank selection 
5b92			 
5b92 3e ff				ld a, SPI_CE_HIGH		; ce high 
5b94 32 95 f9				ld (spi_device), a 
5b97			 
5b97					; get bank 
5b97			 
5b97					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5b97 cd 4b 22			call macro_dsp_valuehl 
5b9a				endm 
# End of macro FORTH_DSP_VALUEHL
5b9a			 
5b9a			;		push hl 
5b9a			 
5b9a					; destroy value TOS 
5b9a			 
5b9a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5b9a cd 03 23			call macro_forth_dsp_pop 
5b9d				endm 
# End of macro FORTH_DSP_POP
5b9d			 
5b9d					; one value on hl get other one back 
5b9d			 
5b9d			;		pop hl 
5b9d			 
5b9d					; active low 
5b9d			 
5b9d 0e ff				ld c, 255 
5b9f			 
5b9f 7d					ld a, l 
5ba0					if DEBUG_FORTH_WORDS 
5ba0						DMARK "CDV" 
5ba0 f5				push af  
5ba1 3a b5 5b			ld a, (.dmark)  
5ba4 32 a0 fd			ld (debug_mark),a  
5ba7 3a b6 5b			ld a, (.dmark+1)  
5baa 32 a1 fd			ld (debug_mark+1),a  
5bad 3a b7 5b			ld a, (.dmark+2)  
5bb0 32 a2 fd			ld (debug_mark+2),a  
5bb3 18 03			jr .pastdmark  
5bb5 ..			.dmark: db "CDV"  
5bb8 f1			.pastdmark: pop af  
5bb9			endm  
# End of macro DMARK
5bb9						CALLMONITOR 
5bb9 cd aa fd			call debug_vector  
5bbc				endm  
# End of macro CALLMONITOR
5bbc					endif 
5bbc fe 00				cp 0 
5bbe 28 30				jr z, .cset 
5bc0 fe 01				cp 1 
5bc2 20 02				jr nz, .c2 
5bc4 cb 81				res 0, c 
5bc6 fe 02		.c2:		cp 2 
5bc8 20 02				jr nz, .c3 
5bca cb 89				res 1, c 
5bcc fe 03		.c3:		cp 3 
5bce 20 02				jr nz, .c4 
5bd0 cb 91				res 2, c 
5bd2 fe 04		.c4:		cp 4 
5bd4 20 02				jr nz, .c5 
5bd6 cb 99				res 3, c 
5bd8 fe 05		.c5:		cp 5 
5bda 20 02				jr nz, .c6 
5bdc cb a1				res 4, c 
5bde fe 06		.c6:		cp 6 
5be0 20 02				jr nz, .c7 
5be2 cb a9				res 5, c 
5be4 fe 07		.c7:		cp 7 
5be6 20 02				jr nz, .c8 
5be8 cb b1				res 6, c 
5bea fe 08		.c8:		cp 8 
5bec 20 02				jr nz, .cset 
5bee cb b9				res 7, c 
5bf0 79			.cset:		ld a, c 
5bf1 32 98 f9				ld (spi_cartdev),a 
5bf4			 
5bf4					if DEBUG_FORTH_WORDS 
5bf4						DMARK "CD2" 
5bf4 f5				push af  
5bf5 3a 09 5c			ld a, (.dmark)  
5bf8 32 a0 fd			ld (debug_mark),a  
5bfb 3a 0a 5c			ld a, (.dmark+1)  
5bfe 32 a1 fd			ld (debug_mark+1),a  
5c01 3a 0b 5c			ld a, (.dmark+2)  
5c04 32 a2 fd			ld (debug_mark+2),a  
5c07 18 03			jr .pastdmark  
5c09 ..			.dmark: db "CD2"  
5c0c f1			.pastdmark: pop af  
5c0d			endm  
# End of macro DMARK
5c0d						CALLMONITOR 
5c0d cd aa fd			call debug_vector  
5c10				endm  
# End of macro CALLMONITOR
5c10					endif 
5c10			 
5c10					; set default SPI clk pulse time as 10ms for CARTDEV use 
5c10			 
5c10 3e 0a				ld a, $0a 
5c12 32 99 f9				ld (spi_clktime), a 
5c15					NEXTW 
5c15 c3 37 24			jp macro_next 
5c18				endm 
# End of macro NEXTW
5c18			endif 
5c18			 
5c18			.ENDDEVICE: 
5c18			; eof 
5c18			 
# End of file forth_words_device.asm
5c18			 
5c18			; var handler 
5c18			 
5c18			 
5c18			.VARS: 
5c18				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
5c18 77				db WORD_SYS_CORE+99             
5c19 c9 5c			dw .V0            
5c1b 04				db 3 + 1 
5c1c .. 00			db "VAR",0              
5c20				endm 
# End of macro CWHEAD
5c20			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
5c20			;| 
5c20			;| The variable name should consist of a single letter. e.g. "a" 
5c20			;! If a full string is passed then only the first char is looked at 
5c20			;| Any other char could exceed bounds checks!  
5c20			 
5c20					if DEBUG_FORTH_WORDS_KEY 
5c20						DMARK "VAR" 
5c20 f5				push af  
5c21 3a 35 5c			ld a, (.dmark)  
5c24 32 a0 fd			ld (debug_mark),a  
5c27 3a 36 5c			ld a, (.dmark+1)  
5c2a 32 a1 fd			ld (debug_mark+1),a  
5c2d 3a 37 5c			ld a, (.dmark+2)  
5c30 32 a2 fd			ld (debug_mark+2),a  
5c33 18 03			jr .pastdmark  
5c35 ..			.dmark: db "VAR"  
5c38 f1			.pastdmark: pop af  
5c39			endm  
# End of macro DMARK
5c39						CALLMONITOR 
5c39 cd aa fd			call debug_vector  
5c3c				endm  
# End of macro CALLMONITOR
5c3c					endif 
5c3c			 
5c3c					FORTH_DSP_VALUEHL 
5c3c cd 4b 22			call macro_dsp_valuehl 
5c3f				endm 
# End of macro FORTH_DSP_VALUEHL
5c3f			 
5c3f 7e					ld a, (hl)    ; get first char on of the string 
5c40			 
5c40			 
5c40					if DEBUG_FORTH_WORDS 
5c40						DMARK "VR1" 
5c40 f5				push af  
5c41 3a 55 5c			ld a, (.dmark)  
5c44 32 a0 fd			ld (debug_mark),a  
5c47 3a 56 5c			ld a, (.dmark+1)  
5c4a 32 a1 fd			ld (debug_mark+1),a  
5c4d 3a 57 5c			ld a, (.dmark+2)  
5c50 32 a2 fd			ld (debug_mark+2),a  
5c53 18 03			jr .pastdmark  
5c55 ..			.dmark: db "VR1"  
5c58 f1			.pastdmark: pop af  
5c59			endm  
# End of macro DMARK
5c59						CALLMONITOR 
5c59 cd aa fd			call debug_vector  
5c5c				endm  
# End of macro CALLMONITOR
5c5c					endif 
5c5c					 
5c5c f5					push af	 
5c5d					FORTH_DSP_POP 
5c5d cd 03 23			call macro_forth_dsp_pop 
5c60				endm 
# End of macro FORTH_DSP_POP
5c60 f1					pop af 
5c61			 
5c61					; convert to upper 
5c61			 
5c61 cd 53 12				call to_upper 
5c64					if DEBUG_FORTH_WORDS 
5c64						DMARK "Vaa" 
5c64 f5				push af  
5c65 3a 79 5c			ld a, (.dmark)  
5c68 32 a0 fd			ld (debug_mark),a  
5c6b 3a 7a 5c			ld a, (.dmark+1)  
5c6e 32 a1 fd			ld (debug_mark+1),a  
5c71 3a 7b 5c			ld a, (.dmark+2)  
5c74 32 a2 fd			ld (debug_mark+2),a  
5c77 18 03			jr .pastdmark  
5c79 ..			.dmark: db "Vaa"  
5c7c f1			.pastdmark: pop af  
5c7d			endm  
# End of macro DMARK
5c7d						CALLMONITOR 
5c7d cd aa fd			call debug_vector  
5c80				endm  
# End of macro CALLMONITOR
5c80					endif 
5c80 06 41				ld b, 'A' 
5c82 90					sub b			; set offset 
5c83					if DEBUG_FORTH_WORDS 
5c83						DMARK "Vbb" 
5c83 f5				push af  
5c84 3a 98 5c			ld a, (.dmark)  
5c87 32 a0 fd			ld (debug_mark),a  
5c8a 3a 99 5c			ld a, (.dmark+1)  
5c8d 32 a1 fd			ld (debug_mark+1),a  
5c90 3a 9a 5c			ld a, (.dmark+2)  
5c93 32 a2 fd			ld (debug_mark+2),a  
5c96 18 03			jr .pastdmark  
5c98 ..			.dmark: db "Vbb"  
5c9b f1			.pastdmark: pop af  
5c9c			endm  
# End of macro DMARK
5c9c						CALLMONITOR 
5c9c cd aa fd			call debug_vector  
5c9f				endm  
# End of macro CALLMONITOR
5c9f					endif 
5c9f cb 27				sla a  
5ca1				 
5ca1					 
5ca1					if DEBUG_FORTH_WORDS 
5ca1						DMARK "VR2" 
5ca1 f5				push af  
5ca2 3a b6 5c			ld a, (.dmark)  
5ca5 32 a0 fd			ld (debug_mark),a  
5ca8 3a b7 5c			ld a, (.dmark+1)  
5cab 32 a1 fd			ld (debug_mark+1),a  
5cae 3a b8 5c			ld a, (.dmark+2)  
5cb1 32 a2 fd			ld (debug_mark+2),a  
5cb4 18 03			jr .pastdmark  
5cb6 ..			.dmark: db "VR2"  
5cb9 f1			.pastdmark: pop af  
5cba			endm  
# End of macro DMARK
5cba						CALLMONITOR 
5cba cd aa fd			call debug_vector  
5cbd				endm  
# End of macro CALLMONITOR
5cbd					endif 
5cbd			 
5cbd 21 29 f9				ld hl, cli_var_array2 
5cc0 cd de 0f				call addatohl 
5cc3 cd 46 20				call forth_push_numhl 
5cc6			 
5cc6			 
5cc6				       NEXTW 
5cc6 c3 37 24			jp macro_next 
5cc9				endm 
# End of macro NEXTW
5cc9			.V0: 
5cc9				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
5cc9 78				db WORD_SYS_CORE+100             
5cca e1 5c			dw .V0Q            
5ccc 04				db 3 + 1 
5ccd .. 00			db "V0!",0              
5cd1				endm 
# End of macro CWHEAD
5cd1			;| V0! ( u1 -- )  Store value to v0  | DONE 
5cd1			 
5cd1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5cd1 cd 4b 22			call macro_dsp_valuehl 
5cd4				endm 
# End of macro FORTH_DSP_VALUEHL
5cd4			 
5cd4 11 5d f9				ld de, cli_var_array 
5cd7			 
5cd7 eb					ex de, hl 
5cd8 73					ld (hl), e 
5cd9 23					inc hl 
5cda 72					ld (hl), d 
5cdb			 
5cdb					; destroy value TOS 
5cdb			 
5cdb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5cdb cd 03 23			call macro_forth_dsp_pop 
5cde				endm 
# End of macro FORTH_DSP_POP
5cde			 
5cde				       NEXTW 
5cde c3 37 24			jp macro_next 
5ce1				endm 
# End of macro NEXTW
5ce1			.V0Q: 
5ce1				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
5ce1 79				db WORD_SYS_CORE+101             
5ce2 f2 5c			dw .V1S            
5ce4 04				db 3 + 1 
5ce5 .. 00			db "V0@",0              
5ce9				endm 
# End of macro CWHEAD
5ce9			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5ce9 2a 5d f9				ld hl, (cli_var_array) 
5cec cd 46 20				call forth_push_numhl 
5cef			 
5cef				       NEXTW 
5cef c3 37 24			jp macro_next 
5cf2				endm 
# End of macro NEXTW
5cf2			.V1S: 
5cf2				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
5cf2 7a				db WORD_SYS_CORE+102             
5cf3 0a 5d			dw .V1Q            
5cf5 04				db 3 + 1 
5cf6 .. 00			db "V1!",0              
5cfa				endm 
# End of macro CWHEAD
5cfa			;| V1! ( u1 -- )  Store value to v1 | DONE 
5cfa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5cfa cd 4b 22			call macro_dsp_valuehl 
5cfd				endm 
# End of macro FORTH_DSP_VALUEHL
5cfd			 
5cfd 11 5f f9				ld de, cli_var_array+2 
5d00				 
5d00 eb					ex de, hl 
5d01 73					ld (hl), e 
5d02 23					inc hl 
5d03 72					ld (hl), d 
5d04			 
5d04					; destroy value TOS 
5d04			 
5d04					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d04 cd 03 23			call macro_forth_dsp_pop 
5d07				endm 
# End of macro FORTH_DSP_POP
5d07				       NEXTW 
5d07 c3 37 24			jp macro_next 
5d0a				endm 
# End of macro NEXTW
5d0a			.V1Q: 
5d0a				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5d0a 7b				db WORD_SYS_CORE+103             
5d0b 1b 5d			dw .V2S            
5d0d 04				db 3 + 1 
5d0e .. 00			db "V1@",0              
5d12				endm 
# End of macro CWHEAD
5d12			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5d12 2a 5f f9				ld hl, (cli_var_array+2) 
5d15 cd 46 20				call forth_push_numhl 
5d18				       NEXTW 
5d18 c3 37 24			jp macro_next 
5d1b				endm 
# End of macro NEXTW
5d1b			.V2S: 
5d1b				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
5d1b 7c				db WORD_SYS_CORE+104             
5d1c 33 5d			dw .V2Q            
5d1e 04				db 3 + 1 
5d1f .. 00			db "V2!",0              
5d23				endm 
# End of macro CWHEAD
5d23			;| V2! ( u1 -- )  Store value to v2 | DONE 
5d23					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d23 cd 4b 22			call macro_dsp_valuehl 
5d26				endm 
# End of macro FORTH_DSP_VALUEHL
5d26			 
5d26 11 61 f9				ld de, cli_var_array+4 
5d29				 
5d29 eb					ex de, hl 
5d2a 73					ld (hl), e 
5d2b 23					inc hl 
5d2c 72					ld (hl), d 
5d2d			 
5d2d					; destroy value TOS 
5d2d			 
5d2d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d2d cd 03 23			call macro_forth_dsp_pop 
5d30				endm 
# End of macro FORTH_DSP_POP
5d30				       NEXTW 
5d30 c3 37 24			jp macro_next 
5d33				endm 
# End of macro NEXTW
5d33			.V2Q: 
5d33				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5d33 7d				db WORD_SYS_CORE+105             
5d34 44 5d			dw .V3S            
5d36 04				db 3 + 1 
5d37 .. 00			db "V2@",0              
5d3b				endm 
# End of macro CWHEAD
5d3b			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
5d3b 2a 61 f9				ld hl, (cli_var_array+4) 
5d3e cd 46 20				call forth_push_numhl 
5d41				       NEXTW 
5d41 c3 37 24			jp macro_next 
5d44				endm 
# End of macro NEXTW
5d44			.V3S: 
5d44				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5d44 7c				db WORD_SYS_CORE+104             
5d45 5c 5d			dw .V3Q            
5d47 04				db 3 + 1 
5d48 .. 00			db "V3!",0              
5d4c				endm 
# End of macro CWHEAD
5d4c			;| V3! ( u1 -- )  Store value to v3 | DONE 
5d4c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d4c cd 4b 22			call macro_dsp_valuehl 
5d4f				endm 
# End of macro FORTH_DSP_VALUEHL
5d4f			 
5d4f 11 63 f9				ld de, cli_var_array+6 
5d52				 
5d52 eb					ex de, hl 
5d53 73					ld (hl), e 
5d54 23					inc hl 
5d55 72					ld (hl), d 
5d56			 
5d56					; destroy value TOS 
5d56			 
5d56					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d56 cd 03 23			call macro_forth_dsp_pop 
5d59				endm 
# End of macro FORTH_DSP_POP
5d59				       NEXTW 
5d59 c3 37 24			jp macro_next 
5d5c				endm 
# End of macro NEXTW
5d5c			.V3Q: 
5d5c				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
5d5c 7d				db WORD_SYS_CORE+105             
5d5d 6d 5d			dw .END            
5d5f 04				db 3 + 1 
5d60 .. 00			db "V3@",0              
5d64				endm 
# End of macro CWHEAD
5d64			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5d64 2a 63 f9				ld hl, (cli_var_array+6) 
5d67 cd 46 20				call forth_push_numhl 
5d6a				       NEXTW 
5d6a c3 37 24			jp macro_next 
5d6d				endm 
# End of macro NEXTW
5d6d			 
5d6d			 
5d6d			 
5d6d			 
5d6d			 
5d6d			; end of dict marker 
5d6d			 
5d6d 00			.END:    db WORD_SYS_END 
5d6e 00 00			dw 0 
5d70 00				db 0 
5d71			 
5d71			; use to jp here for user dict words to save on macro expansion  
5d71			 
5d71			user_dict_next: 
5d71				NEXTW 
5d71 c3 37 24			jp macro_next 
5d74				endm 
# End of macro NEXTW
5d74			 
5d74			 
5d74			user_exec: 
5d74				;    ld hl, <word code> 
5d74				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
5d74				;    call forthexec 
5d74				;    jp user_dict_next   (NEXT) 
5d74			        ;    <word code bytes> 
5d74 eb				ex de, hl 
5d75 2a f7 f3			ld hl,(os_tok_ptr) 
5d78				 
5d78				FORTH_RSP_NEXT 
5d78 cd ed 1f			call macro_forth_rsp_next 
5d7b				endm 
# End of macro FORTH_RSP_NEXT
5d7b			 
5d7b			if DEBUG_FORTH_UWORD 
5d7b						DMARK "UEX" 
5d7b f5				push af  
5d7c 3a 90 5d			ld a, (.dmark)  
5d7f 32 a0 fd			ld (debug_mark),a  
5d82 3a 91 5d			ld a, (.dmark+1)  
5d85 32 a1 fd			ld (debug_mark+1),a  
5d88 3a 92 5d			ld a, (.dmark+2)  
5d8b 32 a2 fd			ld (debug_mark+2),a  
5d8e 18 03			jr .pastdmark  
5d90 ..			.dmark: db "UEX"  
5d93 f1			.pastdmark: pop af  
5d94			endm  
# End of macro DMARK
5d94				CALLMONITOR 
5d94 cd aa fd			call debug_vector  
5d97				endm  
# End of macro CALLMONITOR
5d97			endif 
5d97			 
5d97			 
5d97			 
5d97 eb				ex de, hl 
5d98 22 f7 f3			ld (os_tok_ptr), hl 
5d9b				 
5d9b				; Don't use next - Skips the first word in uword. 
5d9b			 
5d9b c3 c8 24			jp exec1 
5d9e			;	NEXT 
5d9e			 
5d9e			 
5d9e			; eof 
# End of file forth_wordsv4.asm
5d9e			endif 
5d9e			;;;;;;;;;;;;;; Debug code 
5d9e			 
5d9e			 
5d9e			;if DEBUG_FORTH_PARSE 
5d9e .. 00		.nowordfound: db "No match",0 
5da7 .. 00		.compword:	db "Comparing word ",0 
5db7 .. 00		.nextwordat:	db "Next word at",0 
5dc4 .. 00		.charmatch:	db "Char match",0 
5dcf			;endif 
5dcf			if DEBUG_FORTH_JP 
5dcf			.foundword:	db "Word match. Exec..",0 
5dcf			endif 
5dcf			;if DEBUG_FORTH_PUSH 
5dcf .. 00		.enddict:	db "Dict end. Push.",0 
5ddf .. 00		.push_str:	db "Pushing string",0 
5dee .. 00		.push_num:	db "Pushing number",0 
5dfd .. 00		.data_sp:	db "SP:",0 
5e01 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5e13 .. 00		.wordinde:	db "Word in DE (3/0):",0 
5e25 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5e37			;endif 
5e37			;if DEBUG_FORTH_MALLOC 
5e37 .. 00		.push_malloc:	db "Malloc address",0 
5e46			;endif 
5e46			 
5e46			 
5e46			 
5e46			; display malloc address and current data stack pointer  
5e46			 
5e46			malloc_error: 
5e46 d5				push de 
5e47 f5				push af 
5e48 e5				push hl 
5e49 cd aa 0d			call clear_display 
5e4c 11 6c 5e			ld de, .mallocerr 
5e4f 3e 00			ld a,0 
5e51			;	ld de,os_word_scratch 
5e51 cd bd 0d			call str_at_display 
5e54 3e 11			ld a, display_row_1+17 
5e56 11 a0 fd			ld de, debug_mark 
5e59 cd bd 0d			call str_at_display 
5e5c cd cd 0d			call update_display 
5e5f				;call break_point_state 
5e5f cd 3c 73			call cin_wait 
5e62			 
5e62			;	ld a, ' ' 
5e62			;	ld (os_view_disable), a 
5e62 cd 47 19			call bp_on 
5e65 e1				pop hl 
5e66 f1				pop af 
5e67 d1				pop de	 
5e68				CALLMONITOR 
5e68 cd aa fd			call debug_vector  
5e6b				endm  
# End of macro CALLMONITOR
5e6b c9				ret 
5e6c			 
5e6c .. 00		.mallocerr: 	db "Malloc Error",0 
5e79			;if DEBUG_FORTH_PUSH 
5e79			display_data_sp: 
5e79 f5				push af 
5e7a			 
5e7a				; see if disabled 
5e7a			 
5e7a			 
5e7a 3a aa fd			ld a, (debug_vector) 
5e7d fe c9			cp $C9  ; RET 
5e7f				;ld a, (os_view_disable) 
5e7f				;cp '*' 
5e7f 28 67			jr z, .skipdsp 
5e81			 
5e81 e5				push hl 
5e82 e5				push hl 
5e83 e5			push hl 
5e84 cd aa 0d			call clear_display 
5e87 e1			pop hl 
5e88 7c				ld a,h 
5e89 21 fb f3			ld hl, os_word_scratch 
5e8c cd e7 11			call hexout 
5e8f e1				pop hl 
5e90 7d				ld a,l 
5e91 21 fd f3			ld hl, os_word_scratch+2 
5e94 cd e7 11			call hexout 
5e97 21 ff f3			ld hl, os_word_scratch+4 
5e9a 3e 00			ld a,0 
5e9c 77				ld (hl),a 
5e9d 11 fb f3			ld de,os_word_scratch 
5ea0 3e 28				ld a, display_row_2 
5ea2 cd bd 0d				call str_at_display 
5ea5 11 01 5e			ld de, .wordinhl 
5ea8 3e 00			ld a, display_row_1 
5eaa			 
5eaa cd bd 0d				call str_at_display 
5ead 11 a0 fd			ld de, debug_mark 
5eb0 3e 11			ld a, display_row_1+17 
5eb2			 
5eb2 cd bd 0d				call str_at_display 
5eb5			 
5eb5				; display current data stack pointer 
5eb5 11 fd 5d			ld de,.data_sp 
5eb8 3e 30				ld a, display_row_2 + 8 
5eba cd bd 0d				call str_at_display 
5ebd			 
5ebd 2a 23 f9			ld hl,(cli_data_sp) 
5ec0 e5				push hl 
5ec1 7c				ld a,h 
5ec2 21 fb f3			ld hl, os_word_scratch 
5ec5 cd e7 11			call hexout 
5ec8 e1				pop hl 
5ec9 7d				ld a,l 
5eca 21 fd f3			ld hl, os_word_scratch+2 
5ecd cd e7 11			call hexout 
5ed0 21 ff f3			ld hl, os_word_scratch+4 
5ed3 3e 00			ld a,0 
5ed5 77				ld (hl),a 
5ed6 11 fb f3			ld de,os_word_scratch 
5ed9 3e 33				ld a, display_row_2 + 11 
5edb cd bd 0d				call str_at_display 
5ede			 
5ede			 
5ede cd cd 0d			call update_display 
5ee1 cd ed 0c			call delay1s 
5ee4 cd ed 0c			call delay1s 
5ee7 e1				pop hl 
5ee8			.skipdsp: 
5ee8 f1				pop af 
5ee9 c9				ret 
5eea			 
5eea			display_data_malloc: 
5eea			 
5eea f5				push af 
5eeb e5				push hl 
5eec e5				push hl 
5eed e5			push hl 
5eee cd aa 0d			call clear_display 
5ef1 e1			pop hl 
5ef2 7c				ld a,h 
5ef3 21 fb f3			ld hl, os_word_scratch 
5ef6 cd e7 11			call hexout 
5ef9 e1				pop hl 
5efa 7d				ld a,l 
5efb 21 fd f3			ld hl, os_word_scratch+2 
5efe cd e7 11			call hexout 
5f01 21 ff f3			ld hl, os_word_scratch+4 
5f04 3e 00			ld a,0 
5f06 77				ld (hl),a 
5f07 11 fb f3			ld de,os_word_scratch 
5f0a 3e 28				ld a, display_row_2 
5f0c cd bd 0d				call str_at_display 
5f0f 11 37 5e			ld de, .push_malloc 
5f12 3e 00			ld a, display_row_1 
5f14			 
5f14 cd bd 0d				call str_at_display 
5f17			 
5f17				; display current data stack pointer 
5f17 11 fd 5d			ld de,.data_sp 
5f1a 3e 30				ld a, display_row_2 + 8 
5f1c cd bd 0d				call str_at_display 
5f1f			 
5f1f 2a 23 f9			ld hl,(cli_data_sp) 
5f22 e5				push hl 
5f23 7c				ld a,h 
5f24 21 fb f3			ld hl, os_word_scratch 
5f27 cd e7 11			call hexout 
5f2a e1				pop hl 
5f2b 7d				ld a,l 
5f2c 21 fd f3			ld hl, os_word_scratch+2 
5f2f cd e7 11			call hexout 
5f32 21 ff f3			ld hl, os_word_scratch+4 
5f35 3e 00			ld a,0 
5f37 77				ld (hl),a 
5f38 11 fb f3			ld de,os_word_scratch 
5f3b 3e 33				ld a, display_row_2 + 11 
5f3d cd bd 0d				call str_at_display 
5f40			 
5f40 cd cd 0d			call update_display 
5f43 cd ed 0c			call delay1s 
5f46 cd ed 0c			call delay1s 
5f49 e1				pop hl 
5f4a f1				pop af 
5f4b c9				ret 
5f4c			;endif 
5f4c			 
5f4c			include "forth_autostart.asm" 
5f4c			; list of commands to perform at system start up 
5f4c			 
5f4c			startcmds: 
5f4c			;	dw test11 
5f4c			;	dw test12 
5f4c			;	dw test13 
5f4c			;	dw test14 
5f4c			;	dw test15 
5f4c			;	dw test16 
5f4c			;	dw test17 
5f4c			;	dw ifthtest1 
5f4c			;	dw ifthtest2 
5f4c			;	dw ifthtest3 
5f4c			;	dw mmtest1 
5f4c			;	dw mmtest2 
5f4c			;	dw mmtest3 
5f4c			;	dw mmtest4 
5f4c			;	dw mmtest5 
5f4c			;	dw mmtest6 
5f4c			;	dw iftest1 
5f4c			;	dw iftest2 
5f4c			;	dw iftest3 
5f4c			;	dw looptest1 
5f4c			;	dw looptest2 
5f4c			;	dw test1 
5f4c			;	dw test2 
5f4c			;	dw test3 
5f4c			;	dw test4 
5f4c			;	dw game2r 
5f4c			;	dw game2b1 
5f4c			;	dw game2b2 
5f4c			 
5f4c				; start up words that are actually useful 
5f4c			 
5f4c			;    dw spi1 
5f4c			;    dw spi2 
5f4c			;    dw spi3 
5f4c			;    dw spi4 
5f4c			;    dw spi5 
5f4c			;    dw spi6 
5f4c			;    dw spi7 
5f4c			; 
5f4c			;    dw spi8 
5f4c			;    dw spi9 
5f4c			;    dw spi10 
5f4c			 
5f4c			; file editor 
5f4c			;	dw edit1 
5f4c			;	dw edit2 
5f4c			;	dw edit3 
5f4c			 
5f4c			;	dw longread 
5f4c 6c 63			dw clrstack 
5f4e a0 63			dw type 
5f50			;	dw stest 
5f50 c5 63			dw strncpy 
5f52			;	dw list 
5f52 26 64			dw start1 
5f54 36 64			dw start2 
5f56			;	dw start3 
5f56			;	dw start3b 
5f56			;	dw start3c 
5f56			 
5f56				; (unit) testing words 
5f56			 
5f56			;	dw mtesta 
5f56			;	dw mtestb 
5f56			;	dw mtestc 
5f56			;	dw mtestd 
5f56			;	dw mteste 
5f56			 
5f56				; demo/game words 
5f56			 
5f56			;        dw game3w 
5f56			;        dw game3p 
5f56			;        dw game3sc 
5f56			;        dw game3vsi 
5f56			;        dw game3vs 
5f56				 
5f56			;	dw game2b 
5f56			;	dw game2bf 
5f56			;	dw game2mba 
5f56			;	dw game2mbas 
5f56			;	dw game2mb 
5f56			 
5f56 53 67			dw game1 
5f58 64 67			dw game1a 
5f5a c6 67			dw game1b 
5f5c fb 67			dw game1c 
5f5e 31 68			dw game1d 
5f60 62 68			dw game1s 
5f62 76 68			dw game1t 
5f64 8b 68			dw game1f 
5f66 bf 68			dw game1z 
5f68 03 69			dw game1zz 
5f6a			 
5f6a 8c 65			dw test5 
5f6c c4 65			dw test6 
5f6e fc 65			dw test7 
5f70 10 66			dw test8 
5f72 3c 66			dw test9 
5f74 52 66			dw test10 
5f76				 
5f76 da 69		        dw ssv5 
5f78 be 69		        dw ssv4 
5f7a a2 69		        dw ssv3 
5f7c 6c 69		        dw ssv2 
5f7e f3 69		        dw ssv1 
5f80 3b 6a		        dw ssv1cpm 
5f82			;	dw keyup 
5f82			;	dw keydown 
5f82			;	dw keyleft 
5f82			;	dw keyright 
5f82			;	dw 	keyf1 
5f82			;	dw keyf2 
5f82			;	dw keyf3 
5f82			;	dw keyf4 
5f82			;	dw keyf5 
5f82			;	dw keyf6 
5f82			;	dw keyf7 
5f82			;	dw keyf8 
5f82			;	dw keyf9 
5f82			;	dw keyf10 
5f82			;	dw keyf11 
5f82			;	dw keyf12 
5f82			;	dw keytab 
5f82			;	dw keycr 
5f82			;	dw keyhome 
5f82			;	dw keyend 
5f82			;	dw keybs 
5f82 00 00			db 0, 0	 
5f84			 
5f84			 
5f84			; File Editor 
5f84			 
5f84			; ( id - ) use 'e' to edit the displayed line 
5f84 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
5fa5 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5fda			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5fda .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
6012			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
6012			 
6012			; SPI Net support words 
6012			 
6012			; v0! = node to send to 
6012			; ( str count - ) 
6012 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
606b			 
606b			; spiputc ( char node - ) 
606b .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
609f			; spiputc ( u node - ) 
609f .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
60cd			 
60cd			; spigetc ( - n ) 
60cd .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
60f6			 
60f6			; getnode ( - n ) 
60f6 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
6123			 
6123			; ( str node - )  
6123 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
6189			; store string ( str i - ) 
6189			 
6189			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
6189 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
61de			 
61de			; get string ( addr i -  )    TO FIX 
61de			 
61de .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
6236			 
6236			 
6236			; NETCHAT (TODO) 
6236			; Program to allow two nodes to chat with eachother 
6236			; 
6236			; v0 - target node 
6236			;  
6236			; accept input at 0,0 
6236			; if input is string send spitype to target node 
6236			; starting at row 2,0 , while spigetchr is not zero ->  
6236			; 
6236			; 
6236			; TODO add paging of get request 
6236			 
6236			; ( node - ) 
6236 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
6255 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
62ad .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
6325			 
6325			 
6325			; Long read of currently open file 
6325 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
636c			 
636c			; clear stack  
636c			 
636c .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
63a0			 
63a0			; type ( addr count - ) 
63a0 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
63c5			 
63c5			; some direct memory words 
63c5			; strncpy ( len t f -- t ) 
63c5			 
63c5 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
6426			 
6426 .. 00		start1:     	db ": bpon $00 bp ;",0 
6436 .. 00		start2:     	db ": bpoff $01 bp ;",0 
6447 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
64c2 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
6522			 
6522			 
6522			; a handy word to list items on the stack 
6522			 
6522 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
658c			 
658c			 
658c			; test stack  
658c			; rnd8 stest 
658c			 
658c			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
658c			 
658c			; random malloc and free cycles 
658c			 
658c			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
658c			 
658c			; fixed malloc and free cycles 
658c			 
658c			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
658c			 
658c			; fixed double string push and drop cycle  
658c			 
658c			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
658c			 
658c			; consistent fixed string push and drop cycle  
658c			 
658c			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
658c			 
658c			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
658c			 
658c			;test1:		db ": aa 1 2 3 ;", 0 
658c			;test2:     	db "111 aa 888 999",0 
658c			;test3:     	db ": bb 77 ;",0 
658c			;test4:     	db "$02 $01 do i . loop bb",0 
658c			 
658c .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
65c4 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
65fc .. 00		test7:     	db ": box hline vline ;",0 
6610 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
663c .. 00		test9:     	db ": sw $01 adsp world ;",0 
6652 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
6677			;test11:     	db "hello create .",0 
6677			;test12:     	db "hello2 create .",0 
6677			 
6677			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
6677			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
6677			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
6677			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
6677			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
6677			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
6677			 
6677			;iftest1:     	db "$0001 IF cls .",0 
6677			;iftest2:     	db "$0000 IF cls .",0 
6677			;iftest3:     	db "$0002 $0003 - IF cls .",0 
6677			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
6677			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
6677			 
6677			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6677			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6677			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6677			 
6677			 
6677 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
669b .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
66cb .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
66f0 .. 00		sound4: db ": cha $00 ; ",0 
66fd .. 00		sound5: db ": chb $20 ; ",0 
670a .. 00		sound6: db ": chc $40 ; ",0 
6717 .. 00		sound7: db ": chd $60 ; ",0 
6724 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
673c .. 00		sound9: db ": cvol $90 + + note ; ", 0 
6753			 
6753			 
6753			 
6753			 
6753			; a small guess the number game 
6753			 
6753 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
6764 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
67c6			 
67c6 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
67fb .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
6831 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
6862 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
6876 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
688b .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
68bf .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
6903			 
6903			; Using 'ga' save a high score across multiple runs using external storage 
6903			 
6903 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
696c			 
696c			 
696c			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
696c			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
696c			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
696c			 
696c			; simple screen saver to test code memory reuse to destruction 
696c			 
696c .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
69a2 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
69be .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
69da .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
69f3 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
6a3b .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
6a92			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
6a92			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
6a92			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
6a92			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
6a92			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
6a92			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
6a92			 
6a92			 
6a92			 
6a92			; minesweeper/battleship finding game 
6a92			; draws a game board of random ship/mine positions 
6a92			; user enters coords to see if it hits on 
6a92			; game ends when all are hit 
6a92			; when hit or miss says how many may be in the area 
6a92			 
6a92			; setup the game board and then hide it 
6a92			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
6a92			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
6a92			;; prompt for where to target 
6a92			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
6a92			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
6a92			;; TODO see if the entered coords hits or misses pushes char hit of miss 
6a92			;game2mbht:      db ": mbckht nop ;",0 
6a92			;game2mbms:      db ": mbcms nop ;",0 
6a92			; TODO how many might be near by 
6a92			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
6a92			 
6a92			; Game 3 
6a92			 
6a92			; Vert scroller ski game - avoid the trees! 
6a92			 
6a92			; v0 score (ie turns) 
6a92			; v1 player pos 
6a92			; v2 left wall 
6a92			; v3 right wall 
6a92			 
6a92			; Draw side walls randomly 
6a92			 
6a92			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
6a92			 
6a92			; Draw player 
6a92			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
6a92			 
6a92			; TODO Get Key 
6a92			 
6a92			; TODO Move left right 
6a92			 
6a92			; scroll and move walls a bit 
6a92			 
6a92			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
6a92			 
6a92			; main game loop 
6a92			 
6a92			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
6a92			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
6a92			 
6a92			; key board defs 
6a92			 
6a92 .. 00		keyup:       db ": keyup $05 ;",0 
6aa0 .. 00		keydown:       db ": keydown $0a ;",0 
6ab0 .. 00		keyleft:       db ": keyleft $0b ;",0 
6ac0 .. 00		keyright:       db ": keyright $0c ;",0 
6ad1 .. 00		keyf1:       db ": keyf1 $10 ;",0 
6adf .. 00		keyf2:       db ": keyf2 $11 ;",0 
6aed .. 00		keyf3:       db ": keyf3 $12 ;",0 
6afb .. 00		keyf4:       db ": keyf4 $13 ;",0 
6b09 .. 00		keyf5:       db ": keyf5 $14 ;",0 
6b17 .. 00		keyf6:       db ": keyf6 $15 ;",0 
6b25 .. 00		keyf7:       db ": keyf7 $16 ;",0 
6b33 .. 00		keyf8:       db ": keyf8 $17 ;",0 
6b41 .. 00		keyf9:       db ": keyf9 $18 ;",0 
6b4f .. 00		keyf10:       db ": keyf10 $19 ;",0 
6b5e .. 00		keyf11:       db ": keyf11 $1a ;",0 
6b6d .. 00		keyf12:       db ": keyf12 $1b ;",0 
6b7c			 
6b7c .. 00		keytab:       db ": keytab $09 ;",0 
6b8b .. 00		keycr:       db ": keycr $0d ;",0 
6b99 .. 00		keyhome:       db ": keyhome $0e ;",0 
6ba9 .. 00		keyend:       db ": keyend $0f ;",0 
6bb8 .. 00		keybs:       db ": keybs $08 ;",0 
6bc6			 
6bc6			   
6bc6			 
6bc6			 
6bc6			 
6bc6			; eof 
# End of file forth_autostart.asm
6bc6			 
6bc6			 
6bc6			 
6bc6			; stack over and underflow checks 
6bc6			 
6bc6			; init the words to detect the under/overflow 
6bc6			 
6bc6			chk_stk_init: 
6bc6				; a vague random number to check so we dont get any "lucky" hits 
6bc6 3e 2d			ld a, 45 
6bc8 6f				ld l, a 
6bc9 00				nop 
6bca 3e 17			ld a, 23 
6bcc 67				ld h, a 
6bcd			 
6bcd 22 d2 f0			ld (chk_word), hl     ; the word we need to check against 
6bd0			 
6bd0			;	ld (chk_stund), hl	; stack points.... 
6bd0 22 3b fe			ld (chk_stovr), hl 
6bd3 22 21 f9			ld (chk_ret_und), hl 
6bd6 22 df f8			ld (chk_ret_ovr), hl 
6bd9 22 5d f8			ld (chk_loop_ovr), hl 
6bdc 22 5b f6			ld (chk_data_ovr), hl 
6bdf c9				ret 
6be0				 
6be0			check_stacks: 
6be0				; check all stack words 
6be0			 
6be0 e5				push hl 
6be1 d5				push de 
6be2			 
6be2			;	ld de,(chk_word) 
6be2			;	ld hl, (chk_stund)	; stack points.... 
6be2			;	if DEBUG_STK_FAULT 
6be2			;		DMARK "FAa" 
6be2			;		CALLMONITOR 
6be2			;	endif 
6be2			;	call cmp16 
6be2			;	jp z, .chk_faulta 
6be2			; 
6be2			;	ld de, sfaultsu 
6be2			;	jp .chk_fault 
6be2			 
6be2 2a 3b fe		.chk_faulta: ld hl, (chk_stovr) 
6be5 ed 5b d2 f0		ld de,(chk_word) 
6be9				if DEBUG_STK_FAULT 
6be9					DMARK "FAb" 
6be9					CALLMONITOR 
6be9				endif 
6be9 cd fc 0f			call cmp16 
6bec 28 06			jr z, .chk_fault1 
6bee 11 92 6c			ld de, sfaultso 
6bf1 c3 43 6c			jp .chk_fault 
6bf4			.chk_fault1:  
6bf4 2a 21 f9			ld hl, (chk_ret_und) 
6bf7 ed 5b d2 f0		ld de,(chk_word) 
6bfb				if DEBUG_STK_FAULT 
6bfb					DMARK "FAU" 
6bfb					CALLMONITOR 
6bfb				endif 
6bfb cd fc 0f			call cmp16 
6bfe ca 07 6c			jp z, .chk_fault2 
6c01 11 a2 6c			ld de, sfaultru 
6c04 c3 43 6c			jp .chk_fault 
6c07			.chk_fault2:  
6c07 2a df f8			ld hl, (chk_ret_ovr) 
6c0a ed 5b d2 f0		ld de,(chk_word) 
6c0e				if DEBUG_STK_FAULT 
6c0e					DMARK "FA1" 
6c0e					CALLMONITOR 
6c0e				endif 
6c0e cd fc 0f			call cmp16 
6c11 ca 1a 6c			jp z, .chk_fault3 
6c14 11 b0 6c			ld de, sfaultro 
6c17 c3 43 6c			jp .chk_fault 
6c1a			.chk_fault3:  
6c1a 2a 5d f8			ld hl, (chk_loop_ovr) 
6c1d ed 5b d2 f0		ld de,(chk_word) 
6c21				if DEBUG_STK_FAULT 
6c21					DMARK "FA2" 
6c21					CALLMONITOR 
6c21				endif 
6c21 cd fc 0f			call cmp16 
6c24 ca 2d 6c			jp z, .chk_fault4 
6c27 11 ca 6c			ld de, sfaultlo 
6c2a c3 43 6c			jp .chk_fault 
6c2d			.chk_fault4:  
6c2d 2a 5b f6			ld hl, (chk_data_ovr) 
6c30 ed 5b d2 f0		ld de,(chk_word) 
6c34				if DEBUG_STK_FAULT 
6c34					DMARK "FA3" 
6c34					CALLMONITOR 
6c34				endif 
6c34 cd fc 0f			call cmp16 
6c37 ca 40 6c			jp z, .chk_fault5 
6c3a 11 e4 6c			ld de, sfaultdo 
6c3d c3 43 6c			jp .chk_fault 
6c40			 
6c40			 
6c40			.chk_fault5:  
6c40 d1				pop de 
6c41 e1				pop hl 
6c42			 
6c42 c9				ret 
6c43			 
6c43 cd aa 0d		.chk_fault: 	call clear_display 
6c46 3e 28				ld a, display_row_2 
6c48 cd bd 0d				call str_at_display 
6c4b 11 74 6c				   ld de, .stackfault 
6c4e 3e 00				ld a, display_row_1 
6c50 cd bd 0d				call str_at_display 
6c53 11 a0 fd				    ld de, debug_mark 
6c56 3e 11				ld a, display_row_1+17 
6c58 cd bd 0d				call str_at_display 
6c5b cd cd 0d				call update_display 
6c5e			 
6c5e				; prompt before entering montior for investigating issue 
6c5e			 
6c5e 3e 78			ld a, display_row_4 
6c60 11 24 1d			ld de, endprog 
6c63			 
6c63 cd cd 0d			call update_display		 
6c66			 
6c66 cd be 1f			call next_page_prompt 
6c69			 
6c69 d1				pop de 
6c6a e1				pop hl 
6c6b cd 78 1d				call monitor 
6c6e cd dd 23				call forth_warmstart 
6c71 c3 74 1c				jp warmstart_afterauto 
6c74					;jp 0 
6c74					;halt 
6c74			 
6c74			 
6c74			 
6c74 .. 00		.stackfault: 	db "Stack fault:",0 
6c81			 
6c81 .. 00		sfaultsu: 	db	"Stack under flow",0 
6c92 .. 00		sfaultso: 	db	"Stack over flow",0 
6ca2 .. 00		sfaultru:	db "RTS underflow",0 
6cb0 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
6cca .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
6ce4 .. 00		sfaultdo:	db "DTS overflow", 0 
6cf1			 
6cf1			 
6cf1			fault_dsp_under: 
6cf1 11 03 6d			ld de, .dsp_under 
6cf4 c3 b9 6d			jp .show_fault 
6cf7			 
6cf7			fault_rsp_under: 
6cf7 11 11 6d			ld de, .rsp_under 
6cfa c3 b9 6d			jp .show_fault 
6cfd			fault_loop_under: 
6cfd 11 1f 6d			ld de, .loop_under 
6d00 c3 b9 6d			jp .show_fault 
6d03			 
6d03 .. 00		.dsp_under: db "DSP Underflow",0 
6d11 .. 00		.rsp_under: db "RSP Underflow",0 
6d1f .. 00		.loop_under: db "LOOP Underflow",0 
6d2e			 
6d2e			 
6d2e d5			type_faultn: 	push de 
6d2f e5					push hl 
6d30 cd aa 0d				call clear_display 
6d33 11 5d 6d				   ld de, .typefaultn 
6d36 3e 00				ld a, display_row_1 
6d38 cd bd 0d				call str_at_display 
6d3b 11 a0 fd				    ld de, debug_mark 
6d3e 3e 11				ld a, display_row_1+17 
6d40 cd bd 0d				call str_at_display 
6d43 cd cd 0d				call update_display 
6d46			 
6d46				; prompt before entering montior for investigating issue 
6d46			 
6d46 3e 78			ld a, display_row_4 
6d48 11 24 1d			ld de, endprog 
6d4b			 
6d4b cd cd 0d			call update_display		 
6d4e			 
6d4e cd be 1f			call next_page_prompt 
6d51			 
6d51 e5					push hl 
6d52 d5					push de 
6d53 cd 78 1d				call monitor 
6d56 cd dd 23				call forth_warmstart 
6d59 c3 74 1c				jp warmstart_afterauto 
6d5c 76					halt 
6d5d			 
6d5d			 
6d5d .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
6d74			 
6d74 d5			type_faults: 	push de 
6d75 e5					push hl 
6d76 cd aa 0d				call clear_display 
6d79 11 a2 6d				   ld de, .typefaults 
6d7c 3e 00				ld a, display_row_1 
6d7e cd bd 0d				call str_at_display 
6d81 11 a0 fd				    ld de, debug_mark 
6d84 3e 11				ld a, display_row_1+17 
6d86 cd bd 0d				call str_at_display 
6d89 cd cd 0d				call update_display 
6d8c			 
6d8c				; prompt before entering montior for investigating issue 
6d8c			 
6d8c 3e 78			ld a, display_row_4 
6d8e 11 24 1d			ld de, endprog 
6d91			 
6d91 cd cd 0d			call update_display		 
6d94			 
6d94 cd be 1f			call next_page_prompt 
6d97			 
6d97 e1					pop hl 
6d98 d1					pop de 
6d99 cd 78 1d				call monitor 
6d9c cd dd 23				call forth_warmstart 
6d9f c3 74 1c				jp warmstart_afterauto 
6da2			 
6da2			 
6da2 .. 00		.typefaults: db "STR Type Expected TOS!",0 
6db9			 
6db9			.show_fault: 	 
6db9 d5					push de 
6dba cd aa 0d				call clear_display 
6dbd d1					pop de 
6dbe 3e 00				ld a, display_row_1 
6dc0 cd bd 0d				call str_at_display 
6dc3 11 a0 fd				    ld de, debug_mark 
6dc6 3e 11				ld a, display_row_1+17 
6dc8 cd bd 0d				call str_at_display 
6dcb cd cd 0d				call update_display 
6dce			 
6dce				; prompt before entering montior for investigating issue 
6dce			 
6dce 3e 78			ld a, display_row_4 
6dd0 11 24 1d			ld de, endprog 
6dd3			 
6dd3 cd cd 0d			call update_display		 
6dd6			 
6dd6 cd be 1f			call next_page_prompt 
6dd9			 
6dd9 e1					pop hl 
6dda d1					pop de 
6ddb cd 78 1d				call monitor 
6dde			; do a dump to cli and not warmstart so we preserve all of the uwords.  
6dde			; TODO Make optional fault restart to cli or warm boot? 
6dde					;jp warmstart 
6dde c3 b8 1c				jp cli 
6de1 76					halt 
6de2			 
6de2			 
6de2			; handle the auto run of code from files in storage 
6de2			 
6de2			 
6de2			include "forth_startup.asm" 
6de2			; Which startup method to use? 
6de2			; 
6de2			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
6de2			; followed by loading of a list of scripts in eeprom 
6de2			 
6de2			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
6de2			; from eeprom 
6de2			 
6de2			; Select with define in main stubs 
6de2			 
6de2			if STARTUP_V1 
6de2				include "forth_startupv1.asm" 
6de2			endif 
6de2			if STARTUP_V2 
6de2				include "forth_startupv2.asm" 
6de2			; Version 2 of the startup  
6de2			;  
6de2			; Auto load any files in bank 1 that start with a '*' 
6de2			; If no se storage then revert to using eprom 
6de2			 
6de2			 
6de2			if STORAGE_SE = 0 
6de2			 
6de2			sprompt1: db "Startup load...",0 
6de2			sprompt2: db "Run? 1=No *=End #=All",0 
6de2			 
6de2			 
6de2			 
6de2			 
6de2			forth_startup: 
6de2				ld hl, startcmds 
6de2				ld a, 0 
6de2				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
6de2			 
6de2			.start1:	push hl 
6de2				call clear_display 
6de2				ld de, sprompt1 
6de2			        ld a, display_row_1 
6de2				call str_at_display 
6de2				ld de, sprompt2 
6de2			        ld a, display_row_2 
6de2				call str_at_display 
6de2				pop hl 
6de2				push hl 
6de2				ld e,(hl) 
6de2				inc hl 
6de2				ld d,(hl) 
6de2			        ld a, display_row_3 
6de2				call str_at_display 
6de2				call update_display 
6de2			 
6de2			 
6de2				ld a, (os_last_cmd) 
6de2				cp 0 
6de2				jr z, .startprompt 
6de2				call delay250ms 
6de2				jr .startdo 
6de2				 
6de2				 
6de2			 
6de2			.startprompt: 
6de2			 
6de2				ld a,display_row_4 + display_cols - 1 
6de2			        ld de, endprg 
6de2				call str_at_display 
6de2				call update_display 
6de2				call delay1s 
6de2				call cin_wait 
6de2						 
6de2				cp '*' 
6de2				jr z, .startupend1 
6de2				cp '#' 
6de2				jr nz, .startno 
6de2				ld a, 1 
6de2				ld (os_last_cmd),a 
6de2				jr .startdo 
6de2			.startno:	cp '1' 
6de2				jr z,.startnxt  
6de2			 
6de2				; exec startup line 
6de2			.startdo:	 
6de2				pop hl 
6de2				push hl 
6de2				 
6de2				ld e,(hl) 
6de2				inc hl 
6de2				ld d,(hl) 
6de2				ex de,hl 
6de2			 
6de2				push hl 
6de2			 
6de2				ld a, 0 
6de2				;ld a, FORTH_END_BUFFER 
6de2				call strlent 
6de2				inc hl   ; include zero term to copy 
6de2				ld b,0 
6de2				ld c,l 
6de2				pop hl 
6de2				ld de, scratch 
6de2				ldir 
6de2			 
6de2			 
6de2				ld hl, scratch 
6de2				call forthparse 
6de2				call forthexec 
6de2				call forthexec_cleanup 
6de2			 
6de2				ld a, display_row_4 
6de2				ld de, endprog 
6de2			 
6de2				call update_display		 
6de2			 
6de2				ld a, (os_last_cmd) 
6de2				cp 0 
6de2				jr nz, .startnxt 
6de2				call next_page_prompt 
6de2			        call clear_display 
6de2				call update_display		 
6de2			 
6de2				; move onto next startup line? 
6de2			.startnxt: 
6de2			 
6de2				call delay250ms 
6de2				pop hl 
6de2			 
6de2				inc hl 
6de2				inc hl 
6de2			 
6de2				push hl 
6de2				ld e, (hl) 
6de2				inc hl 
6de2				ld d, (hl) 
6de2				pop hl 
6de2				; TODO replace 0 test 
6de2			 
6de2				ex de, hl 
6de2				call ishlzero 
6de2			;	ld a,e 
6de2			;	add d 
6de2			;	cp 0    ; any left to do? 
6de2				ex de, hl 
6de2				jp nz, .start1 
6de2				jr .startupend 
6de2			 
6de2			.startupend1: pop hl 
6de2			.startupend: 
6de2			 
6de2				call clear_display 
6de2				call update_display 
6de2				ret 
6de2			endif 
6de2			 
6de2			 
6de2			if STORAGE_SE 
6de2			 
6de2			;sprompt3: db "Loading from start-up file:",0 
6de2 .. 00		sprompt3: db "  Searching...",0 
6df1			;sprompt4: db "(Any key to stop)",0 
6df1			 
6df1			 
6df1			forth_autoload: 
6df1			 
6df1				; load block 0 of store 1 
6df1				 
6df1 3e fe			ld a, $fe      ; bit 0 clear 
6df3 32 95 f9			ld (spi_device), a 
6df6			 
6df6 cd 25 05			call storage_get_block_0 
6df9			 
6df9 3a d0 f9			ld a, (store_page+STORE_0_AUTOFILE) 
6dfc			 
6dfc fe 00			cp 0 
6dfe c8				ret z     ; auto start not enabled 
6dff			 
6dff cd aa 0d			call clear_display 
6e02			 
6e02				; set bank 
6e02			 
6e02 3a d2 f9				ld a, (store_page+STORE_0_BANKRUN) 
6e05 32 95 f9				ld (spi_device), a 
6e08			 
6e08			 
6e08				; generate a directory of bank 1 and search for flagged files 
6e08			 
6e08					if DEBUG_FORTH_WORDS_KEY 
6e08						DMARK "DIR" 
6e08 f5				push af  
6e09 3a 1d 6e			ld a, (.dmark)  
6e0c 32 a0 fd			ld (debug_mark),a  
6e0f 3a 1e 6e			ld a, (.dmark+1)  
6e12 32 a1 fd			ld (debug_mark+1),a  
6e15 3a 1f 6e			ld a, (.dmark+2)  
6e18 32 a2 fd			ld (debug_mark+2),a  
6e1b 18 03			jr .pastdmark  
6e1d ..			.dmark: db "DIR"  
6e20 f1			.pastdmark: pop af  
6e21			endm  
# End of macro DMARK
6e21						CALLMONITOR 
6e21 cd aa fd			call debug_vector  
6e24				endm  
# End of macro CALLMONITOR
6e24					endif 
6e24			 
6e24 cd 25 05			call storage_get_block_0 
6e27			 
6e27 21 af f9			ld hl, store_page     ; get current id count 
6e2a 46				ld b, (hl) 
6e2b 0e 00			ld c, 0    ; count of files   
6e2d					if DEBUG_FORTH_WORDS 
6e2d						DMARK "DI1" 
6e2d f5				push af  
6e2e 3a 42 6e			ld a, (.dmark)  
6e31 32 a0 fd			ld (debug_mark),a  
6e34 3a 43 6e			ld a, (.dmark+1)  
6e37 32 a1 fd			ld (debug_mark+1),a  
6e3a 3a 44 6e			ld a, (.dmark+2)  
6e3d 32 a2 fd			ld (debug_mark+2),a  
6e40 18 03			jr .pastdmark  
6e42 ..			.dmark: db "DI1"  
6e45 f1			.pastdmark: pop af  
6e46			endm  
# End of macro DMARK
6e46						CALLMONITOR 
6e46 cd aa fd			call debug_vector  
6e49				endm  
# End of macro CALLMONITOR
6e49					endif 
6e49			 
6e49				; check for empty drive 
6e49			 
6e49 3e 00			ld a, 0 
6e4b b8				cp b 
6e4c ca 99 6e			jp z, .dirdone 
6e4f			 
6e4f				; for each of the current ids do a search for them and if found push to stack 
6e4f			 
6e4f c5			.diritem:	push bc 
6e50 21 40 00				ld hl, STORE_BLOCK_PHY 
6e53 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
6e55 58					ld e,b 
6e56			 
6e56 d5					push de 
6e57 e5					push hl 
6e58 cd aa 0d			call clear_display 
6e5b 3e 32			ld a, display_row_2 + 10 
6e5d 11 e2 6d			ld de, sprompt3 
6e60 cd bd 0d			call str_at_display 
6e63 cd 01 0d			call active 
6e66 eb				ex de, hl 
6e67 3e 2f			ld a, display_row_2 + 7 
6e69 cd bd 0d			call str_at_display 
6e6c cd cd 0d			call update_display 
6e6f e1				pop hl 
6e70 d1				pop de 
6e71			 
6e71			;		if DEBUG_FORTH_WORDS 
6e71			;			DMARK "DI2" 
6e71			;			CALLMONITOR 
6e71			;		endif 
6e71			 
6e71 cd a7 07				call storage_findnextid 
6e74			 
6e74			;		if DEBUG_FORTH_WORDS 
6e74			;			DMARK "DI3" 
6e74			;			CALLMONITOR 
6e74			;		endif 
6e74			 
6e74					; if found hl will be non zero 
6e74			 
6e74 cd 07 10				call ishlzero 
6e77			;		ld a, l 
6e77			;		add h 
6e77			; 
6e77			;		cp 0 
6e77 28 1d				jr z, .dirnotfound 
6e79			 
6e79					; increase count 
6e79			 
6e79 c1					pop bc	 
6e7a 0c					inc c 
6e7b c5					push bc 
6e7c					 
6e7c			 
6e7c					; get file header and push the file name 
6e7c			 
6e7c 11 af f9				ld de, store_page 
6e7f cd 74 04				call storage_read_block 
6e82			 
6e82					; push file id to stack 
6e82				 
6e82			 
6e82					; is this a file we want to run? 
6e82			 
6e82 21 b2 f9				ld hl, store_page+3 
6e85 7e					ld a,(hl) 
6e86 fe 2a				cp '*' 
6e88 20 0c				jr nz,  .dirnotfound 
6e8a					 
6e8a			 
6e8a			 
6e8a 3a af f9				ld a, (store_page) 
6e8d d5					push de 
6e8e e5					push hl 
6e8f c5					push bc 
6e90 cd bc 6e				call .autorunf 
6e93 c1					pop bc 
6e94 e1					pop hl 
6e95 d1					pop de 
6e96			 
6e96			 
6e96			 
6e96				; save this extent 
6e96			 
6e96					; push file name 
6e96			;display file name to run 
6e96			 
6e96			;		ld hl, store_page+3 
6e96			;		if DEBUG_FORTH_WORDS 
6e96			;			DMARK "DI5" 
6e96			;			CALLMONITOR 
6e96			;		endif 
6e96			; 
6e96			;		 
6e96			; 
6e96			;		call forth_push_str 
6e96			;		if DEBUG_FORTH_WORDS 
6e96			;			DMARK "DI6" 
6e96			;			CALLMONITOR 
6e96			;		endif 
6e96			.dirnotfound: 
6e96 c1					pop bc     
6e97 10 b6				djnz .diritem 
6e99				 
6e99			.dirdone:	 
6e99					if DEBUG_FORTH_WORDS 
6e99						DMARK "DI7" 
6e99 f5				push af  
6e9a 3a ae 6e			ld a, (.dmark)  
6e9d 32 a0 fd			ld (debug_mark),a  
6ea0 3a af 6e			ld a, (.dmark+1)  
6ea3 32 a1 fd			ld (debug_mark+1),a  
6ea6 3a b0 6e			ld a, (.dmark+2)  
6ea9 32 a2 fd			ld (debug_mark+2),a  
6eac 18 03			jr .pastdmark  
6eae ..			.dmark: db "DI7"  
6eb1 f1			.pastdmark: pop af  
6eb2			endm  
# End of macro DMARK
6eb2						CALLMONITOR 
6eb2 cd aa fd			call debug_vector  
6eb5				endm  
# End of macro CALLMONITOR
6eb5					endif 
6eb5			 
6eb5 cd aa 0d				call clear_display 
6eb8 cd cd 0d				call update_display 
6ebb			 
6ebb c9					ret 
6ebc			 
6ebc			 
6ebc			 
6ebc			 
6ebc			 
6ebc			.autorunf: 
6ebc			 
6ebc			 
6ebc				; get file id to load from and get the file name to display 
6ebc			 
6ebc			;		ld a, (store_page+STORE_0_FILERUN) 
6ebc			 
6ebc 2e 00				ld l, 0 
6ebe 67					ld h, a 
6ebf 11 af f9				ld de, store_page 
6ec2			 
6ec2					if DEBUG_FORTH_WORDS 
6ec2						DMARK "ASp" 
6ec2 f5				push af  
6ec3 3a d7 6e			ld a, (.dmark)  
6ec6 32 a0 fd			ld (debug_mark),a  
6ec9 3a d8 6e			ld a, (.dmark+1)  
6ecc 32 a1 fd			ld (debug_mark+1),a  
6ecf 3a d9 6e			ld a, (.dmark+2)  
6ed2 32 a2 fd			ld (debug_mark+2),a  
6ed5 18 03			jr .pastdmark  
6ed7 ..			.dmark: db "ASp"  
6eda f1			.pastdmark: pop af  
6edb			endm  
# End of macro DMARK
6edb						CALLMONITOR 
6edb cd aa fd			call debug_vector  
6ede				endm  
# End of macro CALLMONITOR
6ede					endif 
6ede cd cd 09				call storage_read 
6ee1			 
6ee1					if DEBUG_FORTH_WORDS 
6ee1						DMARK "ASr" 
6ee1 f5				push af  
6ee2 3a f6 6e			ld a, (.dmark)  
6ee5 32 a0 fd			ld (debug_mark),a  
6ee8 3a f7 6e			ld a, (.dmark+1)  
6eeb 32 a1 fd			ld (debug_mark+1),a  
6eee 3a f8 6e			ld a, (.dmark+2)  
6ef1 32 a2 fd			ld (debug_mark+2),a  
6ef4 18 03			jr .pastdmark  
6ef6 ..			.dmark: db "ASr"  
6ef9 f1			.pastdmark: pop af  
6efa			endm  
# End of macro DMARK
6efa						CALLMONITOR 
6efa cd aa fd			call debug_vector  
6efd				endm  
# End of macro CALLMONITOR
6efd					endif 
6efd			 
6efd cd 07 10				call ishlzero 
6f00 c8					ret z             ; file not found 
6f01			 
6f01					; display file name we are loading 
6f01			 
6f01 cd aa 0d				call clear_display 
6f04			 
6f04 3e 32				ld a, display_row_2 + 10 
6f06 11 b2 f9				ld de, store_page+3 
6f09 cd bd 0d				call str_at_display 
6f0c				 
6f0c			; 
6f0c			 
6f0c			;	ld a, display_row_1+5 
6f0c			;	ld de, sprompt3 
6f0c			;	call str_at_display 
6f0c			;	ld a, display_row_2+7 
6f0c			;	call active 
6f0c			;	ex de, hl 
6f0c			;;	ld de, sprompt4 
6f0c			;	call str_at_display 
6f0c			; 
6f0c cd cd 0d			call update_display 
6f0f			 
6f0f			;	call cin_wait 
6f0f			;	cp 'n' 
6f0f			;	ret z 
6f0f			;	cp 'N' 
6f0f			;	ret z 
6f0f			 
6f0f			;	call delay1s 
6f0f			 
6f0f 3a b1 f9			ld a, (store_page+2) 
6f12 32 9e f9			ld (store_openmaxext), a    ; save count of ext 
6f15 3e 01			ld a, 1  
6f17 32 9f f9			ld (store_openext), a    ; save count of ext 
6f1a			 
6f1a			.autof: 
6f1a				; begin to read a line from file 
6f1a			 
6f1a 21 1d f4			ld hl, os_cli_cmd 
6f1d 22 1b f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
6f20			  
6f20			.readext: 
6f20 3a 9f f9			ld a, (store_openext) 
6f23 6f				ld l , a 
6f24				 
6f24 3a af f9			ld a, (store_page) 
6f27 67				ld h, a	 
6f28 11 af f9			ld de, store_page 
6f2b					if DEBUG_FORTH_WORDS 
6f2b						DMARK "ASl" 
6f2b f5				push af  
6f2c 3a 40 6f			ld a, (.dmark)  
6f2f 32 a0 fd			ld (debug_mark),a  
6f32 3a 41 6f			ld a, (.dmark+1)  
6f35 32 a1 fd			ld (debug_mark+1),a  
6f38 3a 42 6f			ld a, (.dmark+2)  
6f3b 32 a2 fd			ld (debug_mark+2),a  
6f3e 18 03			jr .pastdmark  
6f40 ..			.dmark: db "ASl"  
6f43 f1			.pastdmark: pop af  
6f44			endm  
# End of macro DMARK
6f44						CALLMONITOR 
6f44 cd aa fd			call debug_vector  
6f47				endm  
# End of macro CALLMONITOR
6f47					endif 
6f47 cd cd 09				call storage_read 
6f4a cd 07 10			call ishlzero 
6f4d c8				ret z 
6f4e			 
6f4e			; TODO copy to exec buffer 
6f4e			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
6f4e			 
6f4e				; copy the record buffer to the cli buffer 
6f4e			 
6f4e ed 5b 1b f6		ld de, (os_var_array) 
6f52 21 b1 f9			ld hl, store_page+2 
6f55			;	ex de, hl 
6f55 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
6f58 ed b0			ldir 
6f5a ed 53 1b f6		ld (os_var_array), de 
6f5e				 
6f5e 3a 9f f9			ld a, (store_openext) 
6f61 3c				inc a 
6f62 32 9f f9			ld (store_openext), a    ; save count of ext 
6f65			 
6f65			 
6f65			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
6f65				 
6f65 3a a2 f9			ld a, (store_readcont) 
6f68 fe 00			cp 0 
6f6a 20 b4			jr nz, .readext 
6f6c			 
6f6c			;	jr z, .autoend 
6f6c			 
6f6c					if DEBUG_FORTH_WORDS 
6f6c						DMARK "ASc" 
6f6c f5				push af  
6f6d 3a 81 6f			ld a, (.dmark)  
6f70 32 a0 fd			ld (debug_mark),a  
6f73 3a 82 6f			ld a, (.dmark+1)  
6f76 32 a1 fd			ld (debug_mark+1),a  
6f79 3a 83 6f			ld a, (.dmark+2)  
6f7c 32 a2 fd			ld (debug_mark+2),a  
6f7f 18 03			jr .pastdmark  
6f81 ..			.dmark: db "ASc"  
6f84 f1			.pastdmark: pop af  
6f85			endm  
# End of macro DMARK
6f85						CALLMONITOR 
6f85 cd aa fd			call debug_vector  
6f88				endm  
# End of macro CALLMONITOR
6f88					endif 
6f88 e5				push hl	 
6f89 d5				push de 
6f8a cd 01 0d			call active 
6f8d eb				ex de, hl 
6f8e 3e 2f			ld a, display_row_2 + 7 
6f90 cd bd 0d			call str_at_display 
6f93			 
6f93 cd cd 0d			call update_display 
6f96 d1				pop de  
6f97 e1				pop hl 
6f98			;	call delay250ms 
6f98			 
6f98			 
6f98			 
6f98			 
6f98			.autoexec: 
6f98			 
6f98			 
6f98 21 1d f4			ld hl, os_cli_cmd 
6f9b					if DEBUG_FORTH_WORDS 
6f9b						DMARK "ASx" 
6f9b f5				push af  
6f9c 3a b0 6f			ld a, (.dmark)  
6f9f 32 a0 fd			ld (debug_mark),a  
6fa2 3a b1 6f			ld a, (.dmark+1)  
6fa5 32 a1 fd			ld (debug_mark+1),a  
6fa8 3a b2 6f			ld a, (.dmark+2)  
6fab 32 a2 fd			ld (debug_mark+2),a  
6fae 18 03			jr .pastdmark  
6fb0 ..			.dmark: db "ASx"  
6fb3 f1			.pastdmark: pop af  
6fb4			endm  
# End of macro DMARK
6fb4						CALLMONITOR 
6fb4 cd aa fd			call debug_vector  
6fb7				endm  
# End of macro CALLMONITOR
6fb7					endif 
6fb7 cd 85 24			call forthparse 
6fba cd c5 24			call forthexec 
6fbd cd d7 23			call forthexec_cleanup 
6fc0			 
6fc0			 
6fc0			 
6fc0 c3 1a 6f			jp .autof 
6fc3			;.autofdone: 
6fc3			; 
6fc3			;		if DEBUG_FORTH_WORDS 
6fc3			;			DMARK "ASx" 
6fc3			;			CALLMONITOR 
6fc3			;		endif 
6fc3			;;	call clear_display 
6fc3			;	ret 
6fc3			 
6fc3			 
6fc3			 
6fc3			endif 
# End of file forth_startupv2.asm
6fc3			endif 
6fc3			 
# End of file forth_startup.asm
6fc3			 
6fc3			; eof 
# End of file forth_kernel.asm
6fc3			;include "nascombasic.asm" 
6fc3			 
6fc3			 
6fc3			; find out where the code ends if loaded into RAM (for SC114) 
6fc3			;endofcode:  
6fc3			;	nop 
6fc3			 
6fc3			 
6fc3			; jump to nmi vector 
6fc3			 
6fc3			init_nmi: 
6fc3 3e c9			ld a, $c9   ; RET 
6fc5 32 ad fd			ld (nmi_vector), a 
6fc8 c9				ret 
6fc9			nmi: 
6fc9 e5				push hl 
6fca d5				push de 
6fcb c5				push bc 
6fcc f5				push af 
6fcd cd ad fd			call nmi_vector 
6fd0 f5				push af 
6fd1 c5				push bc 
6fd2 d5				push de 
6fd3 e5				push hl 
6fd4 ed 4d			reti 
6fd6			 
6fd6			 
6fd6			; eof 
6fd6			 
# End of file main.asm
6fd6			include "firmware_lcd_4x40.asm" 
6fd6			; **********************************************************************  
6fd6			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
6fd6			; **********************************************************************  
6fd6			;  
6fd6			; **  Written as a Small Computer Monitor App  
6fd6			; **  www.scc.me.uk  
6fd6			;  
6fd6			; History  
6fd6			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
6fd6			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
6fd6			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
6fd6			;  
6fd6			; **********************************************************************  
6fd6			;  
6fd6			; This program is an example of one of the methods of interfacing an   
6fd6			; alphanumeric LCD module.   
6fd6			;  
6fd6			; In this example the display is connected to either a Z80 PIO or a   
6fd6			; simple 8-bit output port.   
6fd6			;  
6fd6			; This interfacing method uses 4-bit data mode and uses time delays  
6fd6			; rather than polling the display's ready status. As a result the   
6fd6			; interface only requires 6 simple output lines:  
6fd6			;   Output bit 0 = not used  
6fd6			;   Output bit 1 = not used  
6fd6			;   Output bit 2 = RS         High = data, Low = instruction  
6fd6			;   Output bit 3 = E          Active high  
6fd6			;   Output bit 4 = DB4  
6fd6			;   Output bit 5 = DB5  
6fd6			;   Output bit 6 = DB6  
6fd6			;   Output bit 7 = DB7  
6fd6			; Display's R/W is connected to 0v so it is always in write mode  
6fd6			;  
6fd6			; This set up should work with any system supporting the RC2014 bus  
6fd6			  
6fd6			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
6fd6			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
6fd6			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
6fd6			;  
6fd6			; **********************************************************************  
6fd6			  
6fd6			; Additonal for 4x40. E1 and E2 instead of just E   
6fd6			; TODO swipe vidout signal on port a to activate E2  
6fd6			  
6fd6			; **********************************************************************  
6fd6			; **  Constants  
6fd6			; **********************************************************************  
6fd6			; LCD constants required by LCD support module  
6fd6			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
6fd6			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
6fd6			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
6fd6			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
6fd6			; TODO Decide which E is being set  
6fd6			kLCDWidth:  EQU display_cols             ;Width in characters  
6fd6			  
6fd6			; **********************************************************************  
6fd6			; **  Code library usage  
6fd6			; **********************************************************************  
6fd6			  
6fd6			; send character to current cursor position  
6fd6			; wraps and/or scrolls screen automatically  
6fd6			  
6fd6			  
6fd6			  
6fd6			lcd_init:  
6fd6			  
6fd6			; SCMonAPI functions used  
6fd6			  
6fd6			; Alphanumeric LCD functions used  
6fd6			; no need to specify specific functions for this module  
6fd6			  
6fd6 3e cf		            LD   A, 11001111b  
6fd8 d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
6fda 3e 00		            LD   A, 00000000b  
6fdc d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
6fde			  
6fde			; Initialise alphanumeric LCD module  
6fde 3e 00				ld a, 0  
6fe0 32 00 fb				ld (display_lcde1e2), a  
6fe3 cd 64 70		            CALL fLCD_Init      ;Initialise LCD module  
6fe6 3e 01				ld a, 1  
6fe8 32 00 fb				ld (display_lcde1e2), a  
6feb cd 64 70		            CALL fLCD_Init      ;Initialise LCD module  
6fee			  
6fee c9				ret  
6fef			  
6fef			;  
6fef			;;  
6fef			; lcd functions  
6fef			;  
6fef			;  
6fef			  
6fef			; what is at cursor position   
6fef			  
6fef			;get_cursor:	ld de, (cursor_row)   ;  row + col  
6fef			;		call curptr  
6fef			;		ret  
6fef			  
6fef			  
6fef			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
6fef			  
6fef			curptr:  
6fef c5				push bc  
6ff0 21 e6 fc			ld hl, display_fb0  
6ff3			cpr:	  
6ff3				; loop for cursor whole row  
6ff3 0e 28			ld c, display_cols  
6ff5 23			cpr1:	inc hl  
6ff6 0d				dec c  
6ff7 20 fc			jr nz, cpr1  
6ff9 05				dec b  
6ffa 20 f7			jr nz, cpr  
6ffc			  
6ffc				; add col	  
6ffc			  
6ffc 23			cpr2:	inc hl  
6ffd 1d				dec e  
6ffe 20 fc			jr nz, cpr2  
7000			  
7000 c1				pop bc  
7001 c9				ret  
7002				  
7002			  
7002			  
7002			  
7002			  
7002			; write the frame buffer given in hl to hardware   
7002 22 fe fa		write_display: ld (display_write_tmp), hl 	   
7005 3e 00			ld a, kLCD_Line1  
7007 cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
700a 06 28			ld b, display_cols  
700c ed 5b fe fa		ld de, (display_write_tmp)  
7010 cd 5c 70			call write_len_string  
7013				  
7013				  
7013 2a fe fa			ld hl, (display_write_tmp)  
7016 11 28 00			ld de, display_cols  
7019 19				add hl,de  
701a 22 fe fa			ld (display_write_tmp),hl  
701d			  
701d				  
701d 3e 28			ld a, kLCD_Line2  
701f cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
7022 06 28			ld b, display_cols  
7024 ed 5b fe fa		ld de, (display_write_tmp)  
7028 cd 5c 70			call write_len_string  
702b				  
702b 2a fe fa			ld hl, (display_write_tmp)  
702e 11 28 00			ld de, display_cols  
7031 19				add hl,de  
7032 22 fe fa			ld (display_write_tmp),hl  
7035			  
7035				  
7035 3e 50			ld a, kLCD_Line3  
7037 cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
703a 06 28			ld b, display_cols  
703c ed 5b fe fa		ld de, (display_write_tmp)  
7040 cd 5c 70			call write_len_string  
7043				  
7043 2a fe fa			ld hl, (display_write_tmp)  
7046 11 28 00			ld de, display_cols  
7049 19				add hl,de  
704a 22 fe fa			ld (display_write_tmp),hl  
704d			  
704d				  
704d 3e 78			ld a, kLCD_Line4  
704f cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
7052 06 28			ld b, display_cols  
7054 ed 5b fe fa		ld de, (display_write_tmp)  
7058 cd 5c 70			call write_len_string  
705b c9					ret  
705c				  
705c				; write out a fixed length string given in b from de  
705c			  
705c 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
705d cd c9 70		            CALL fLCD_Data      ;Write character to display  
7060 13				inc de  
7061 10 f9			djnz write_len_string  
7063 c9				ret  
7064			  
7064			; Some other things to do  
7064			;            LD   A, kLCD_Clear ;Display clear  
7064			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
7064			;            LD   A, kLCD_Under ;Display on with underscore cursor  
7064			;            LD   A, kLCD_On     ;Display on with no cursor  
7064			;            ;LD   A, kLCD_Off   ;Display off  
7064			;            CALL fLCD_Inst      ;Send instruction to display  
7064			;  
7064			;  
7064			;            halt  
7064			;  
7064			;  
7064			;MsgHello:   DB  "Hello World!",0  
7064			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
7064			  
7064			; Custom characters 5 pixels wide by 8 pixels high  
7064			; Up to 8 custom characters can be defined  
7064			;BitMaps:      
7064			;; Character 0x00 = Battery icon  
7064			;            DB  01110b  
7064			;            DB  11011b  
7064			;            DB  10001b  
7064			;            DB  10001b  
7064			;            DB  11111b  
7064			;            DB  11111b  
7064			;            DB  11111b  
7064			;            DB  11111b  
7064			;; Character 0x01 = Bluetooth icon  
7064			;            DB  01100b  
7064			;            DB  01010b  
7064			;            DB  11100b  
7064			;            DB  01000b  
7064			;            DB  11100b  
7064			;            DB  01010b  
7064			;            DB  01100b  
7064			;            DB  00000b  
7064			;  
7064			  
7064			  
7064			; **********************************************************************  
7064			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
7064			; **********************************************************************  
7064			;  
7064			; **  Written as a Small Computer Monitor App   
7064			; **  Version 0.1 SCC 2018-05-16  
7064			; **  www.scc.me.uk  
7064			;  
7064			; **********************************************************************  
7064			;  
7064			; This module provides support for alphanumeric LCD modules using with  
7064			; *  HD44780 (or compatible) controller  
7064			; *  5 x 7 pixel fonts  
7064			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
7064			; *  Interface via six digital outputs to the display (see below)  
7064			;  
7064			; LCD module pinout:  
7064			;   1  Vss   0v supply  
7064			;   2  Vdd   5v supply  
7064			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
7064			;   4  RS    High = data, Low = instruction  
7064			;   5  R/W   High = Read, Low = Write  
7064			;   6  E     Enable signal (active high)  
7064			;   7  DB0   Data bit 0  
7064			;   8  DB1   Data bit 1  
7064			;   9  DB2   Data bit 2  
7064			;  10  DB3   Data bit 3  
7064			;  11  DB4   Data bit 4  
7064			;  12  DB5   Data bit 5  
7064			;  13  DB6   Data bit 6  
7064			;  14  DB7   Data bit 7  
7064			;  15  A     Backlight anode (+)  
7064			;  16  K     Backlight cathode (-)  
7064			;  
7064			; This interfacing method uses 4-bit data mode and uses time delays  
7064			; rather than polling the display's ready status. As a result the   
7064			; interface only requires 6 simple output lines:  
7064			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
7064			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
7064			;   LCD DB4 = Microcomputer output port bit 4  
7064			;   LCD DB5 = Microcomputer output port bit 5  
7064			;   LCD DB6 = Microcomputer output port bit 6  
7064			;   LCD DB7 = Microcomputer output port bit 7  
7064			; Display's R/W is connected to 0v so it is always in write mode  
7064			; All 6 connections must be on the same port address <kLCDPrt>  
7064			; This method also allows a decent length of cable from micro to LCD  
7064			;  
7064			; **********************************************************************  
7064			;  
7064			; To include the code for any given function provided by this module,   
7064			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
7064			; the parent source file.  
7064			; For example:  #REQUIRES   uHexPrefix  
7064			;  
7064			; Also #INCLUDE this file at some point after the #REQUIRES statements  
7064			; in the parent source file.  
7064			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
7064			;  
7064			; These are the function names provided by this module:  
7064			; fLCD_Init                     ;Initialise LCD  
7064			; fLCD_Inst                     ;Send instruction to LCD  
7064			; fLCD_Data                     ;Send data byte to LCD  
7064			; fLCD_Pos                      ;Position cursor  
7064			; fLCD_Str                      ;Display string  
7064			; fLCD_Def                      ;Define custom character  
7064			;  
7064			; **********************************************************************  
7064			;  
7064			; Requires SCMonAPI.asm to also be included in the project  
7064			;  
7064			  
7064			  
7064			; **********************************************************************  
7064			; **  Constants  
7064			; **********************************************************************  
7064			  
7064			; Constants that must be defined externally  
7064			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
7064			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
7064			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
7064			;kLCDWidth: EQU 20             ;Width in characters  
7064			  
7064			; general line offsets in any frame buffer  
7064			  
7064			  
7064			display_row_1: equ 0  
7064			display_row_2: equ display_row_1+display_cols  
7064			display_row_3: equ display_row_2 + display_cols  
7064			display_row_4: equ display_row_3 + display_cols  
7064			;display_row_4_eol:   
7064			  
7064			  
7064			; Cursor position values for the start of each line  
7064			  
7064			; E  
7064			kLCD_Line1: EQU 0x00   
7064			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
7064			; E1  
7064			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
7064			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
7064			  
7064			; Instructions to send as A register to fLCD_Inst  
7064			kLCD_Clear: EQU 00000001b     ;LCD clear  
7064			kLCD_Off:   EQU 00001000b     ;LCD off  
7064			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
7064			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
7064			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
7064			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
7064			  
7064			; Constants used by this code module  
7064			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
7064			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
7064			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
7064			  
7064			  
7064			  
7064			; **********************************************************************  
7064			; **  LCD support functions  
7064			; **********************************************************************  
7064			  
7064			; Initialise alphanumeric LCD module  
7064			; LCD control register codes:  
7064			;   DL   0 = 4-bit mode        1 = 8-bit mode  
7064			;   N    0 = 1-line mode       1 = 2-line mode  
7064			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
7064			;   D    0 = Display off       1 = Display on  
7064			;   C    0 = Cursor off        1 = Cursor on  
7064			;   B    0 = Blinking off      1 = Blinking on  
7064			;   ID   0 = Decrement mode    1 = Increment mode  
7064			;   SH   0 = Entire shift off  1 = Entire shift on  
7064 3e 28		fLCD_Init:  LD   A, 40  
7066 cd 8b 71		            CALL LCDDelay       ;Delay 40ms after power up  
7069			; For reliable reset set 8-bit mode - 3 times  
7069 cd 5b 71		            CALL WrFn8bit       ;Function = 8-bit mode  
706c cd 5b 71		            CALL WrFn8bit       ;Function = 8-bit mode  
706f cd 5b 71		            CALL WrFn8bit       ;Function = 8-bit mode  
7072			; Set 4-bit mode  
7072 cd 57 71		            CALL WrFn4bit       ;Function = 4-bit mode  
7075 cd 89 71		            CALL LCDDelay1      ;Delay 37 us or more  
7078			; Function set  
7078 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
707a cd 8d 70		            CALL fLCD_Inst      ;2 line, display on  
707d			; Display On/Off control  
707d 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
707f cd 8d 70		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
7082			; Display Clear  
7082 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
7084 cd 8d 70		            CALL fLCD_Inst      ;Clear display  
7087			; Entry mode  
7087 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
7089 cd 8d 70		            CALL fLCD_Inst      ;Increment mode, shift off  
708c			; Display module now initialised  
708c c9			            RET  
708d			; ok to here  
708d			  
708d			; Write instruction to LCD  
708d			;   On entry: A = Instruction byte to be written  
708d			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
708d f5			fLCD_Inst:  PUSH AF  
708e f5			            PUSH AF  
708f cd a1 70		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
7092 f1			            POP  AF  
7093 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
7094 17			            RLA  
7095 17			            RLA  
7096 17			            RLA  
7097 cd a1 70		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
709a 3e 02		            LD   A, 2  
709c cd 8b 71		            CALL LCDDelay       ;Delay 2 ms to complete   
709f f1			            POP  AF  
70a0 c9			            RET  
70a1			Wr4bits:   
70a1 f5					push af  
70a2 3a 00 fb				ld a, (display_lcde1e2)  
70a5 fe 00				cp 0     ; e  
70a7 20 10				jr nz, .wea2	  
70a9 f1					pop af  
70aa e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
70ac d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70ae cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
70b0 cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
70b2 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
70b4 cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
70b6 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70b8 c9			            RET  
70b9 f1			.wea2:		pop af  
70ba e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
70bc d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70be cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
70c0 cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
70c2 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
70c4 cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
70c6 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70c8 c9			            RET  
70c9			  
70c9			  
70c9			; Write data to LCD  
70c9			;   On entry: A = Data byte to be written  
70c9			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
70c9 f5			fLCD_Data:  PUSH AF  
70ca f5			            PUSH AF  
70cb cd dd 70		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
70ce f1			            POP  AF  
70cf 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
70d0 17			            RLA  
70d1 17			            RLA  
70d2 17			            RLA  
70d3 cd dd 70		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
70d6 3e 96		            LD   A, 150  
70d8 3d			Wait:      DEC  A              ;Wait a while to allow data   
70d9 20 fd		            JR   NZ, Wait      ;  write to complete  
70db f1			            POP  AF  
70dc c9			            RET  
70dd			Wr4bitsa:     
70dd f5					push af  
70de 3a 00 fb				ld a, (display_lcde1e2)  
70e1 fe 00				cp 0     ; e1  
70e3 20 16				jr nz, .we2	  
70e5 f1					pop af  
70e6 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
70e8 cb d7		            SET  kLCDBitRS, A  
70ea d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
70ec cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
70ee cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
70f0 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
70f2 cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
70f4 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
70f6 cb 97		            RES  kLCDBitRS, A  
70f8 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70fa c9			            RET  
70fb f1			.we2:		pop af  
70fc e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
70fe cb d7		            SET  kLCDBitRS, A  
7100 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7102 cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
7104 cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
7106 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
7108 cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
710a d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
710c cb 97		            RES  kLCDBitRS, A  
710e d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7110 c9			            RET  
7111			  
7111			  
7111			; Position cursor to specified location  
7111			;   On entry: A = Cursor position  
7111			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7111 f5			fLCD_Pos:   PUSH AF  
7112					; at this point set the E1 or E2 flag depending on position  
7112			  
7112 c5					push bc  
7113			;		push af  
7113 06 00				ld b, 0  
7115 4f					ld c, a  
7116 3e 4f				ld a, kLCD_Line3-1  
7118 b7			 		or a      ;clear carry flag  
7119 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
711a 38 04				jr c, .pe1  
711c			  
711c					; E selection  
711c cb 80				res 0, b         ; bit 0 unset e  
711e			;		pop af    ; before line 3 so recover orig pos  
711e			;		ld c, a    ; save for poking back  
711e 18 06				jr .peset	          
7120			.pe1:          	; E2 selection  
7120 cb c0				set 0, b         ; bit 0 set e1  
7122 79					ld a, c  
7123 de 4f				sbc a, kLCD_Line3-1  
7125 4f					ld c, a	         ; save caculated offset  
7126			;		pop af     ; bin this original value now we have calculated form  
7126			  
7126			.peset:		; set bit  
7126 78					ld a, b  
7127 32 00 fb				ld (display_lcde1e2), a 	  
712a 79					ld a, c  
712b c1					pop bc  
712c			  
712c f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
712e cd 8d 70		            CALL fLCD_Inst      ;Write instruction to LCD  
7131 f1			            POP  AF  
7132 c9			            RET  
7133			  
7133			  
7133			; Output text string to LCD  
7133			;   On entry: DE = Pointer to null terminated text string  
7133			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
7133 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
7134 b7			            OR   A              ;Null terminator?  
7135 c8			            RET  Z              ;Yes, so finished  
7136 cd c9 70		            CALL fLCD_Data      ;Write character to display  
7139 13			            INC  DE             ;Point to next character  
713a 18 f7		            JR   fLCD_Str       ;Repeat  
713c c9					ret  
713d			  
713d			; Define custom character  
713d			;   On entry: A = Character number (0 to 7)  
713d			;             DE = Pointer to character bitmap data  
713d			;   On exit:  A = Next character number  
713d			;             DE = Next location following bitmap  
713d			;             BC HL IX IY I AF' BC' DE' HL' preserved  
713d			; Character is   
713d c5			fLCD_Def:   PUSH BC  
713e f5			            PUSH AF  
713f 07			            RLCA                ;Calculate location  
7140 07			            RLCA                ;  for bitmap data  
7141 07			            RLCA                ;  = 8 x CharacterNumber  
7142 f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
7144 cd 8d 70		            CALL fLCD_Inst      ;Write instruction to LCD  
7147 06 00		            LD   B, 0  
7149 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
714a cd c9 70		            CALL fLCD_Data      ;Write byte to display  
714d 13			            INC  DE             ;Point to next byte  
714e 04			            INC  B              ;Count bytes  
714f cb 58		            BIT  3, B           ;Finish all 8 bytes?  
7151 28 f6		            JR   Z, Loop       ;No, so repeat  
7153 f1			            POP  AF  
7154 3c			            INC  A              ;Increment character number  
7155 c1			            POP  BC  
7156 c9			            RET  
7157			  
7157			  
7157			; **********************************************************************  
7157			; **  Private functions  
7157			; **********************************************************************  
7157			  
7157			; Write function to LCD  
7157			;   On entry: A = Function byte to be written  
7157			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7157 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
7159 18 02		            JR   WrFunc  
715b 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
715d f5			WrFunc:     PUSH AF  
715e f5					push af  
715f 3a 00 fb				ld a, (display_lcde1e2)  
7162 fe 00				cp 0     ; e1  
7164 20 0f				jr nz, .wfea2	  
7166 f1					pop af  
7167 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7169 cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
716b cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
716d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
716f cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
7171 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7173 18 0d			jr .wfskip  
7175 f1			.wfea2:		pop af  
7176 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7178 cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
717a cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
717c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
717e cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
7180 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7182 3e 05		.wfskip:            LD  A, 5  
7184 cd 8b 71		            CALL LCDDelay       ;Delay 5 ms to complete  
7187 f1			            POP  AF  
7188 c9			            RET  
7189			  
7189			  
7189			; Delay in milliseconds  
7189			;   On entry: A = Number of milliseconds delay  
7189			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7189 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
718b d5			LCDDelay:   PUSH DE  
718c 5f			            LD   E, A           ;Delay by 'A' ms  
718d 16 00		            LD   D, 0  
718f cd d2 0c		            CALL aDelayInMS  
7192 d1			            POP  DE  
7193 c9			            RET  
7194			  
7194			  
7194			testlcd:  
7194 3e 00			ld a, kLCD_Line1  
7196 cd 11 71			call fLCD_Pos  
7199 06 28			ld b, 40  
719b 11 c9 71			ld de, .ttext1  
719e cd 5c 70			call write_len_string  
71a1			  
71a1 3e 28			ld a, kLCD_Line2  
71a3 cd 11 71			call fLCD_Pos  
71a6 06 28			ld b, 40  
71a8 11 f2 71			ld de, .ttext2  
71ab cd 5c 70			call write_len_string  
71ae 3e 50			ld a, kLCD_Line3  
71b0 cd 11 71			call fLCD_Pos  
71b3 06 28			ld b, 40  
71b5 11 1b 72			ld de, .ttext3  
71b8 cd 5c 70			call write_len_string  
71bb 3e 78			ld a, kLCD_Line4  
71bd cd 11 71			call fLCD_Pos  
71c0 06 28			ld b, 40  
71c2 11 44 72			ld de, .ttext4  
71c5 cd 5c 70			call write_len_string  
71c8			  
71c8 76				halt  
71c9			  
71c9			  
71c9 .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
71f2 .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
721b .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
7244 .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
726d			   
726d			  
726d			  
726d			; eof  
726d			  
# End of file firmware_lcd_4x40.asm
726d			;include "firmware_lcd_4x20.asm" 
726d			include "firmware_key_5x10.asm" 
726d			; 5 x 10 decade counter scanner  
726d			  
726d			  
726d			; TODO do cursor shape change for shift keys  
726d			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
726d			  
726d			  
726d			; bit mask for each scan column and row for teing the matrix  
726d			  
726d			  
726d			key_init:  
726d			  
726d			; SCMonAPI functions used  
726d			  
726d			; Alphanumeric LCD functions used  
726d			; no need to specify specific functions for this module  
726d			  
726d			  
726d 3e cf		            LD   A, 11001111b  
726f d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
7271			;            LD   A, 00000000b  
7271 3e 1f		            LD   A, 00011111b  
7273 d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
7275			  
7275			  
7275				; TODO Configure cursor shapes  
7275			  
7275				; Load cursor shapes   
7275 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
7277 11 87 72		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
727a 06 02		            LD   B, 2           ;Number of characters to define  
727c cd 3d 71		.DefLoop:   CALL fLCD_Def       ;Define custom character  
727f 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
7281			  
7281 3e 01				ld a, 1  
7283 32 f6 fa			ld (cursor_shape),a  
7286 c9				ret  
7287			  
7287			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
7287			; Up to 8 custom characters can be defined  
7287			.cursor_shapes:      
7287			;; Character 0x00 = Normal  
7287 1f			            DB  11111b  
7288 1f			            DB  11111b  
7289 1f			            DB  11111b  
728a 1f			            DB  11111b  
728b 1f			            DB  11111b  
728c 1f			            DB  11111b  
728d 1f			            DB  11111b  
728e 1f			            DB  11111b  
728f			;; Character 0x01 = Modifier  
728f 1f			            DB  11111b  
7290 1b			            DB  11011b  
7291 1b			            DB  11011b  
7292 1b			            DB  11011b  
7293 1b			            DB  11011b  
7294 1f			            DB  11111b  
7295 1b			            DB  11011b  
7296 1f			            DB  11111b  
7297			  
7297			  
7297			  
7297			  
7297			; Display custom character 0  
7297			;            LD   A, kLCD_Line1+14  
7297			;            CALL fLCD_Pos       ;Position cursor to location in A  
7297			;            LD   A, 0  
7297			;            CALL fLCD_Data      ;Write character in A at cursor  
7297			  
7297			; Display custom character 1  
7297			;            LD   A, kLCD_Line2+14  
7297			;            CALL fLCD_Pos      ;Position cursor to location in A  
7297			;            LD   A, 1  
7297			;            CALL fLCD_Data     ;Write character in A at cursor  
7297			  
7297			; keyboard scanning   
7297			  
7297			; character in from keyboard  
7297			  
7297			; mapping for the pcb layout  
7297			  
7297			.matrix_to_char:  
7297 .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
72a2 .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
72ad 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
72b8 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
72c3 .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
72ce			.matrix_to_shift:  
72ce			  
72ce .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
72d9 .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
72e4 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
72ef 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
72fa .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
7305			  
7305			.matrix_to_symbolshift:  
7305			  
7305 fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
7310 .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
731b 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
7326			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
7326 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
7331 .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
733c			  
733c			  
733c			  
733c			; mapping for a simple straight through breadboard layout  
733c			  
733c			;.matrix_to_char:  
733c			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
733c			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
733c			;		db "asdfghjkl",KEY_CR,0  
733c			;		db "qwertyuiop",0  
733c			;		 db "1234567890",0  
733c			;.matrix_to_shift:  
733c			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
733c			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
733c			;		db "ASDFGHJKL",KEY_CR,0  
733c			;		db "QWERTYUIOP",0  
733c			;		 db "!",'"',"#$%^&*()",0  
733c			;.matrix_to_symbolshift:  
733c			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
733c			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
733c			;		db "_?*fghjk=",KEY_CR,0  
733c			;		db "-/+*[]{}@#",0  
733c			;		 db "1234567890",0  
733c			  
733c			;.matrix_to_char: db "D#0*C987B654A321"  
733c			  
733c			  
733c				  
733c			  
733c			; add cin and cin_wait  
733c			  
733c cd 4d 73		cin_wait: 	call cin  
733f						if DEBUG_KEYCINWAIT  
733f							push af  
733f							  
733f							ld hl,key_repeat_ct  
733f							ld (hl),a  
733f							inc hl  
733f							call hexout  
733f							ld hl,key_repeat_ct+3  
733f							ld a,0  
733f							ld (hl),a  
733f			  
733f							    LD   A, kLCD_Line1+11  
733f							    CALL fLCD_Pos       ;Position cursor to location in A  
733f							    LD   DE, key_repeat_ct  
733f							    ;LD   DE, MsgHello  
733f							    CALL fLCD_Str       ;Display string pointed to by DE  
733f			  
733f			  
733f			  
733f							pop af  
733f						endif  
733f fe 00			cp 0  
7341 28 f9			jr z, cin_wait   ; block until key press  
7343			  
7343							if DEBUG_KEYCINWAIT  
7343								push af  
7343			  
7343								ld a, 'A'	  
7343								ld hl,key_repeat_ct  
7343								ld (hl),a  
7343								inc hl  
7343								ld a,0  
7343								ld (hl),a  
7343			  
7343								    LD   A, kLCD_Line2+11  
7343								    CALL fLCD_Pos       ;Position cursor to location in A  
7343								    LD   DE, key_repeat_ct  
7343								    ;LD   DE, MsgHello  
7343								    CALL fLCD_Str       ;Display string pointed to by DE  
7343			  
7343							call delay500ms  
7343			  
7343								pop af  
7343							endif  
7343 f5				push af   ; save key pressed  
7344			  
7344			.cin_wait1:	  
7344							if DEBUG_KEYCINWAIT  
7344								push af  
7344			  
7344								ld a, 'b'	  
7344								ld hl,key_repeat_ct  
7344								ld (hl),a  
7344								inc hl  
7344								ld a,0  
7344								ld (hl),a  
7344			  
7344								    LD   A, kLCD_Line2+11  
7344								    CALL fLCD_Pos       ;Position cursor to location in A  
7344								    LD   DE, key_repeat_ct  
7344								    ;LD   DE, MsgHello  
7344								    CALL fLCD_Str       ;Display string pointed to by DE  
7344			  
7344			  
7344							call delay500ms  
7344			  
7344								pop af  
7344							endif  
7344			  
7344 cd 4d 73		call cin  
7347 fe 00			cp 0  
7349 20 f9			jr nz, .cin_wait1  	; wait for key release  
734b			if DEBUG_KEYCINWAIT  
734b				push af  
734b			  
734b				ld a, '3'	  
734b				ld hl,key_repeat_ct  
734b				ld (hl),a  
734b				inc hl  
734b				ld a,0  
734b				ld (hl),a  
734b			  
734b			            LD   A, kLCD_Line2+11  
734b			            CALL fLCD_Pos       ;Position cursor to location in A  
734b			            LD   DE, key_repeat_ct  
734b			            ;LD   DE, MsgHello  
734b			            CALL fLCD_Str       ;Display string pointed to by DE  
734b			  
734b			  
734b			call delay500ms  
734b			  
734b				pop af  
734b			endif  
734b			  
734b f1				pop af   ; get key  
734c c9				ret  
734d			  
734d			  
734d cd 61 73		cin: 	call .mtoc  
7350			  
7350			if DEBUG_KEYCIN  
7350				push af  
7350				  
7350				ld hl,key_repeat_ct  
7350				ld (hl),a  
7350				inc hl  
7350				call hexout  
7350				ld hl,key_repeat_ct+3  
7350				ld a,0  
7350				ld (hl),a  
7350			  
7350			            LD   A, kLCD_Line3+15  
7350			            CALL fLCD_Pos       ;Position cursor to location in A  
7350			            LD   DE, key_repeat_ct  
7350			            ;LD   DE, MsgHello  
7350			            CALL fLCD_Str       ;Display string pointed to by DE  
7350			  
7350			  
7350			call delay500ms  
7350			  
7350				pop af  
7350			endif  
7350			  
7350			  
7350				; no key held  
7350 fe 00			cp 0  
7352 c8				ret z  
7353			  
7353			if DEBUG_KEYCIN  
7353				push af  
7353			  
7353				ld a, '1'	  
7353				ld hl,key_repeat_ct  
7353				ld (hl),a  
7353				inc hl  
7353				ld a,0  
7353				ld (hl),a  
7353			  
7353			            LD   A, kLCD_Line4+15  
7353			            CALL fLCD_Pos       ;Position cursor to location in A  
7353			            LD   DE, key_repeat_ct  
7353			            ;LD   DE, MsgHello  
7353			            CALL fLCD_Str       ;Display string pointed to by DE  
7353			  
7353			  
7353			call delay500ms  
7353			  
7353				pop af  
7353			endif  
7353			  
7353				; stop key bounce  
7353			  
7353 32 c6 fd			ld (key_held),a		 ; save it  
7356 47				ld b, a  
7357			  
7357 c5			.cina1:	push bc  
7358			if DEBUG_KEYCIN  
7358				push af  
7358			  
7358				ld hl,key_repeat_ct  
7358				inc hl  
7358				call hexout  
7358				ld hl,key_repeat_ct+3  
7358				ld a,0  
7358				ld (hl),a  
7358				ld hl,key_repeat_ct  
7358				ld a, '2'	  
7358				ld (hl),a  
7358			  
7358			            LD   A, kLCD_Line4+15  
7358			            CALL fLCD_Pos       ;Position cursor to location in A  
7358			            LD   DE, key_repeat_ct  
7358			            ;LD   DE, MsgHello  
7358			            CALL fLCD_Str       ;Display string pointed to by DE  
7358			  
7358				pop af  
7358			endif  
7358 cd 61 73			call .mtoc  
735b c1				pop bc  
735c b8				cp b  
735d 28 f8			jr z, .cina1  
735f 78				ld a,b		  
7360			if DEBUG_KEYCIN  
7360				push af  
7360			  
7360				ld hl,key_repeat_ct  
7360				inc hl  
7360				call hexout  
7360				ld hl,key_repeat_ct+3  
7360				ld a,0  
7360				ld (hl),a  
7360				ld hl,key_repeat_ct  
7360				ld a, '3'	  
7360				ld (hl),a  
7360			  
7360			            LD   A, kLCD_Line4+15  
7360			            CALL fLCD_Pos       ;Position cursor to location in A  
7360			            LD   DE, key_repeat_ct  
7360			            ;LD   DE, MsgHello  
7360			            CALL fLCD_Str       ;Display string pointed to by DE  
7360			  
7360				pop af  
7360			endif  
7360 c9				ret  
7361			  
7361			; detect keyboard modifier key press and apply new overlay to the face key held  
7361			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
7361			  
7361			;.cin_map_modifier:   
7361			;	ld a, (hl)  
7361			;	and 255  
7361			;	ret NZ		; modifier key not flagged  
7361			;  
7361			;	; get key face  
7361			;  
7361			;	ld b,(key_face_held)  
7361			;  
7361			;	ld b, key_cols * key_rows  
7361			;  
7361			;	push de  
7361			;	pop hl  
7361			;  
7361			;.mmod1: ld a,(hl)   ; get map test  
7361			;	cp b  
7361			;	jr z, .mmod2  
7361			;  
7361			;  
7361			;  
7361			;.mmod2: inc hl    ;   
7361			;  
7361			;	  
7361			;  
7361			;	  
7361			;  
7361			;	ld hl,key_actual_pressed  
7361			;	ld (hl),a,  
7361			;	ret  
7361			  
7361			; map matrix key held to char on face of key  
7361			  
7361			.mtoc:  
7361			  
7361			; test decade counter strobes  
7361			  
7361			;.decadetest1:  
7361			  
7361			; reset counter  
7361			;ld a, 128  
7361			;out (portbdata),a  
7361			  
7361			  
7361			;ld b, 5  
7361			;.dec1:  
7361			;ld a, 0  
7361			;out (portbdata),a  
7361			;call delay1s  
7361			  
7361			;ld a, 32  
7361			;out (portbdata),a  
7361			;call delay1s  
7361			;call delay1s  
7361			;call delay1s  
7361			;  
7361			;ld a, 64+32  
7361			;out (portbdata),a  
7361			;call delay1s  
7361			;;djnz .dec1  
7361			;  
7361			;jp .decadetest1  
7361			  
7361			  
7361			  
7361			  
7361			  
7361			  
7361			  
7361			  
7361			  
7361			  
7361				; scan keyboard matrix and generate raw scan map  
7361 cd f4 73			call matrix  
7364			  
7364				; reuse c bit 0 left modifer button - ie shift  
7364			        ; reuse c bit 1 for right modifer button - ie symbol shift  
7364				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
7364			  
7364 0e 00			ld c, 0  
7366			  
7366				; TODO set flags for modifer key presses   
7366				; TODO do a search for modifer key...  
7366			  
7366				;ld hl,keyscan_table_row4  
7366 21 25 fe			ld hl,keyscan_table_row2  
7369			  
7369 7e				ld a, (hl)  
736a fe 23			cp '#'  
736c 20 07			jr nz, .nextmodcheck  
736e cb c1			set 0, c  
7370 21 ce 72			ld hl, .matrix_to_shift  
7373 18 21			jr .dokeymap  
7375				; TODO for now igonre  
7375			.nextmodcheck:  
7375 21 1a fe			ld hl,keyscan_table_row3  
7378			  
7378 7e				ld a, (hl)  
7379 fe 23			cp '#'  
737b 20 07			jr nz, .nextmodcheck2  
737d cb c9			set 1, c   
737f 21 05 73			ld hl, .matrix_to_symbolshift  
7382 18 12			jr .dokeymap  
7384			.nextmodcheck2:  
7384 21 2e fe			ld hl,keyscan_table_row2+9    ; right shift  
7387			  
7387 7e				ld a, (hl)  
7388 fe 23			cp '#'  
738a 20 07			jr nz, .donemodcheck  
738c cb c9			set 1, c   
738e 21 ce 72			ld hl, .matrix_to_shift  
7391 18 03			jr .dokeymap  
7393			  
7393				; no modifer found so just map to normal keys  
7393				; get mtoc map matrix to respective keys  
7393			;	ld hl, .matrix_to_char  
7393			;	ld hl, .matrix_to_char  
7393			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
7393			;	ld a, KEY_SHIFT  
7393			;	call findchar  
7393			;  
7393			;	; got offset to key modifer in b  
7393			;  
7393			;	ld hl,keyscan_table_row5  
7393			;  
7393			;	ld a,b  
7393			;	call addatohl  
7393			;	ld a,(hl)  
7393			;  
7393			;	cp '#'  
7393			;	jr nz, .nextmodcheck  
7393			;	set 0, c  
7393			;	ld hl, .matrix_to_char  
7393			;	jr .dokeymap  
7393			;	; TODO for now igonre  
7393			;.nextmodcheck:  
7393			;	ld hl, .matrix_to_symbolshift  
7393			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
7393			;	ld a, KEY_SYMBOLSHIFT  
7393			;	call findchar  
7393			;  
7393			;  
7393			;	; got offset to key modifer in b  
7393			;  
7393			;	ld hl,keyscan_table_row5  
7393			;  
7393			;	ld a,b  
7393			;	call addatohl  
7393			;	ld a,(hl)  
7393			;  
7393			;	cp '#'  
7393			;	jr nz, .donemodcheck  
7393			;	set 1, c   
7393			;	ld hl, .matrix_to_symbolshift  
7393			;	jr .dokeymap  
7393			  
7393			  
7393			  
7393			.donemodcheck:  
7393				; no modifer found so just map to normal keys  
7393				; get mtoc map matrix to respective keys  
7393 21 97 72			ld hl, .matrix_to_char  
7396			  
7396			.dokeymap:  
7396				;ld (key_fa), c   
7396 cd af 73			call .mapkeys  
7399			  
7399			  
7399			if DEBUG_KEY  
7399			  
7399			; Display text on first line  
7399			            LD   A, kLCD_Line1  
7399			            CALL fLCD_Pos       ;Position cursor to location in A  
7399			            LD   DE, keyscan_table_row1  
7399			            ;LD   DE, MsgHello  
7399			            CALL fLCD_Str       ;Display string pointed to by DE  
7399			  
7399			; Display text on second line  
7399			            LD   A, kLCD_Line2  
7399			            CALL fLCD_Pos       ;Position cursor to location in A  
7399			            LD   DE, keyscan_table_row2  
7399			            CALL fLCD_Str       ;Display string pointed to by DE  
7399			            LD   A, kLCD_Line3  
7399			            CALL fLCD_Pos       ;Position cursor to location in A  
7399			            LD   DE, keyscan_table_row3  
7399			            CALL fLCD_Str       ;Display string pointed to by DE  
7399			            LD   A, kLCD_Line4  
7399			            CALL fLCD_Pos       ;Position cursor to location in A  
7399			            LD   DE, keyscan_table_row4  
7399			            CALL fLCD_Str       ;Display string pointed to by DE  
7399			            LD   A, kLCD_Line1+10  
7399			            CALL fLCD_Pos       ;Position cursor to location in A  
7399			            LD   DE, keyscan_table_row5  
7399			            CALL fLCD_Str       ;Display string pointed to by DE  
7399			  
7399				;call delay250ms  
7399			endif  
7399			;	jp testkey  
7399			  
7399			; get first char reported  
7399			  
7399 21 04 fe			ld hl,keyscan_table_row5  
739c			  
739c				;ld b, 46   ; 30 keys to remap + 8 nulls   
739c 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
739e			.findkey:  
739e 7e				ld a,(hl)  
739f fe 00			cp 0  
73a1 28 04			jr z, .nextkey  
73a3 fe 7e			cp KEY_MATRIX_NO_PRESS  
73a5 20 06			jr nz, .foundkey  
73a7			.nextkey:  
73a7 23				inc hl  
73a8 10 f4			djnz .findkey  
73aa 3e 00			ld a,0  
73ac c9				ret  
73ad			.foundkey:  
73ad 7e				ld a,(hl)  
73ae c9				ret  
73af				  
73af			  
73af			; convert the raw key map given hl for destination key  
73af			.mapkeys:  
73af 11 04 fe			ld de,keyscan_table_row5  
73b2			  
73b2 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
73b4			.remap:  
73b4 1a				ld a,(de)  
73b5 fe 23			cp '#'  
73b7 20 02			jr nz, .remapnext  
73b9				;CALLMONITOR  
73b9 7e				ld a,(hl)  
73ba 12				ld (de),a  
73bb			  
73bb			  
73bb			  
73bb			.remapnext:  
73bb 23				inc hl  
73bc 13				inc de  
73bd 10 f5			djnz .remap  
73bf				  
73bf c9				ret  
73c0			  
73c0			  
73c0			  
73c0			.mtocold2:  
73c0			  
73c0			;	; flag if key D is held down and remove from reporting  
73c0			;	ld bc, .key_map_fd    
73c0			;	ld hl, keyscan_table  
73c0			;	ld de, key_fd  
73c0			;	call .key_shift_hold  
73c0			;	cp 255  
73c0			;	jr z, .cinmap  
73c0			;	; flag if key C is held down and remove from reporting  
73c0			;	ld bc, .key_map_fc    
73c0			;	ld hl, keyscan_table+key_cols  
73c0			;	ld de, key_fc  
73c0			;	call .key_shift_hold  
73c0			;	cp 255  
73c0			;	jr z, .cinmap  
73c0			;	; flag if key B is held down and remove from reporting  
73c0			;	ld bc, .key_map_fb    
73c0			;	ld hl, keyscan_table+(key_cols*2)  
73c0			;	ld de, key_fb  
73c0			;	call .key_shift_hold  
73c0			;	cp 255  
73c0			;	jr z, .cinmap  
73c0			;	; flag if key A is held down and remove from reporting  
73c0			;	ld bc, .key_map_fa    
73c0			;	ld hl, keyscan_table+(key_cols*3)  
73c0			;	ld de, key_fa  
73c0			;	call .key_shift_hold  
73c0			;	cp 255  
73c0			;	jr z, .cinmap  
73c0			  
73c0 11 97 72			ld de, .matrix_to_char  
73c3			  
73c3			  
73c3			.cinmap1:   
73c3				if DEBUG_KEY  
73c3			            LD   A, kLCD_Line4  
73c3			            CALL fLCD_Pos       ;Position cursor to location in A  
73c3					push de  
73c3			            LD   DE, keyscan_table  
73c3			            CALL fLCD_Str       ;Display string pointed to by DE  
73c3					pop de  
73c3				endif  
73c3			  
73c3				; scan key matrix table for any held key  
73c3			  
73c3				; de holds either the default matrix or one selected above  
73c3			  
73c3 21 d1 fd			ld hl, keyscan_table  
73c6 06 32			ld b,key_cols*key_rows  
73c8			  
73c8 7e			.cin11:	ld a,(hl)  
73c9 fe 23			cp '#'  
73cb 28 08			jr z, .cinhit1  
73cd 23				inc hl  
73ce 13				inc de  
73cf 05				dec b  
73d0 20 f6			jr nz, .cin11  
73d2				; no key found held  
73d2 3e 00			ld a,0  
73d4 c9				ret  
73d5 d5			.cinhit1: push de  
73d6 e1				pop hl  
73d7 7e				ld a,(hl)  
73d8 c9				ret  
73d9			  
73d9			; flag a control key is held   
73d9			; hl is key pin, de is flag indicator  
73d9			  
73d9			.key_shift_hold1:  
73d9 c5				push bc  
73da 3e 01			ld a, 1  
73dc 32 f6 fa			ld (cursor_shape),a  
73df 06 00			ld b, 0  
73e1 7e				ld a, (hl)  
73e2 fe 2e			cp '.'  
73e4 28 0a			jr z, .key_shift11  
73e6 06 ff			ld b, 255  
73e8 3e 2b			ld a, '+'    ; hide key from later scans  
73ea 77				ld (hl),a  
73eb 3e 02			ld a, 2  
73ed 32 f6 fa			ld (cursor_shape),a  
73f0			.key_shift11:  
73f0				; write flag indicator  
73f0 78				ld a,b  
73f1 12				ld (de),a  
73f2			  
73f2 d1				pop de    ; de now holds the key map ptr  
73f3 c9				ret  
73f4			  
73f4				  
73f4			  
73f4			; scans keyboard matrix and flags key press in memory array	  
73f4				  
73f4			matrix:  
73f4				;call matrix  
73f4				; TODO optimise the code....  
73f4			  
73f4			  
73f4			;ld hl, keyscan_table_row1  
73f4			;ld de, keyscan_table_row1+1  
73f4			;ld bc,46  
73f4			;ld a,KEY_MATRIX_NO_PRESS  
73f4			;ldir  
73f4			  
73f4			  
73f4			  
73f4			; reset counter  
73f4 3e 80		ld a, 128  
73f6 d3 c1		out (portbdata),a  
73f8			  
73f8 06 0a		ld b, 10  
73fa 0e 00		ld c, 0       ; current clock toggle  
73fc			  
73fc			.colscan:  
73fc			  
73fc			; set current column  
73fc			; disable clock enable and set clock low  
73fc			  
73fc			;ld a, 0  
73fc			;out (portbdata),a  
73fc			  
73fc			; For each column scan for switches  
73fc			  
73fc c5			push bc  
73fd 21 c7 fd		ld hl, keyscan_scancol  
7400 cd 09 75		call .rowscan  
7403 c1			pop bc  
7404			  
7404			  
7404			; get back current column  
7404			  
7404			; translate the row scan  
7404			  
7404			;   
7404			; row 1  
7404			  
7404 78			ld a,b  
7405			  
7405 21 3a fe		LD   hl, keyscan_table_row1+10  
7408			  
7408 cd f0 0f		call subafromhl  
740b			;call addatohl  
740b			  
740b 11 c7 fd		ld de, keyscan_scancol  
740e			  
740e 1a			ld a,(de)  
740f 77			ld (hl),a  
7410			  
7410			  
7410			  
7410			  
7410			; row 2  
7410			  
7410 78			ld a,b  
7411			  
7411 21 2f fe		LD   hl, keyscan_table_row2+10  
7414			  
7414			;call addatohl  
7414 cd f0 0f		call subafromhl  
7417			  
7417			  
7417 11 c8 fd		ld de, keyscan_scancol+1  
741a			  
741a 1a			ld a,(de)  
741b 77			ld (hl),a  
741c			  
741c			  
741c			; row 3  
741c			  
741c 78			ld a,b  
741d			  
741d 21 24 fe		LD   hl, keyscan_table_row3+10  
7420			  
7420			;call addatohl  
7420 cd f0 0f		call subafromhl  
7423			  
7423 11 c9 fd		ld de, keyscan_scancol+2  
7426			  
7426 1a			ld a,(de)  
7427 77			ld (hl),a  
7428			  
7428			  
7428			  
7428			; row 4  
7428			  
7428 78			ld a,b  
7429			  
7429 21 19 fe		LD   hl, keyscan_table_row4+10  
742c			  
742c			;call addatohl  
742c cd f0 0f		call subafromhl  
742f			  
742f 11 ca fd		ld de, keyscan_scancol+3  
7432			  
7432 1a			ld a,(de)  
7433 77			ld (hl),a  
7434			  
7434			; row 5  
7434			  
7434 78			ld a,b  
7435			  
7435 21 0e fe		LD   hl, keyscan_table_row5+10  
7438			  
7438			;call addatohl  
7438 cd f0 0f		call subafromhl  
743b			  
743b 11 cb fd		ld de, keyscan_scancol+4  
743e			  
743e 1a			ld a,(de)  
743f 77			ld (hl),a  
7440			  
7440			; handshake next column  
7440			  
7440			  
7440 3e 40		ld a, 64  
7442 d3 c1		out (portbdata),a  
7444			  
7444 3e 00		ld a, 0  
7446 d3 c1		out (portbdata),a  
7448			  
7448			; toggle clk and move to next column  
7448			;ld a, 64  
7448			;cp c  
7448			;  
7448			;jr z, .coltoglow  
7448			;ld c, a  
7448			;jr .coltog  
7448			;.coltoglow:  
7448			;ld c, 0  
7448			;.coltog:  
7448			;ld a, c  
7448			;out (portbdata),a  
7448			  
7448 10 b2		djnz .colscan  
744a			  
744a 3e 0a		ld a,10  
744c 21 30 fe		LD   hl, keyscan_table_row1  
744f cd de 0f		call addatohl  
7452 3e 00		ld a, 0  
7454 77			ld (hl), a  
7455			  
7455			  
7455 3e 0a		ld a,10  
7457 21 25 fe		LD   hl, keyscan_table_row2  
745a cd de 0f		call addatohl  
745d 3e 00		ld a, 0  
745f 77			ld (hl), a  
7460			  
7460 3e 0a		ld a,10  
7462 21 1a fe		LD   hl, keyscan_table_row3  
7465 cd de 0f		call addatohl  
7468 3e 00		ld a, 0  
746a 77			ld (hl), a  
746b			  
746b 3e 0a		ld a,10  
746d 21 0f fe		LD   hl, keyscan_table_row4  
7470 cd de 0f		call addatohl  
7473 3e 00		ld a, 0  
7475 77			ld (hl), a  
7476			  
7476 3e 0a		ld a,10  
7478 21 04 fe		LD   hl, keyscan_table_row5  
747b cd de 0f		call addatohl  
747e 3e 00		ld a, 0  
7480 77			ld (hl), a  
7481			  
7481			if DEBUG_KEY_MATRIX  
7481			  
7481			; Display text on first line  
7481			            LD   A, kLCD_Line1  
7481			            CALL fLCD_Pos       ;Position cursor to location in A  
7481			            LD   DE, keyscan_table_row1  
7481			            ;LD   DE, MsgHello  
7481			            CALL fLCD_Str       ;Display string pointed to by DE  
7481			  
7481			; Display text on second line  
7481			            LD   A, kLCD_Line2  
7481			            CALL fLCD_Pos       ;Position cursor to location in A  
7481			            LD   DE, keyscan_table_row2  
7481			            CALL fLCD_Str       ;Display string pointed to by DE  
7481			            LD   A, kLCD_Line3  
7481			            CALL fLCD_Pos       ;Position cursor to location in A  
7481			            LD   DE, keyscan_table_row3  
7481			            CALL fLCD_Str       ;Display string pointed to by DE  
7481			            LD   A, kLCD_Line4  
7481			            CALL fLCD_Pos       ;Position cursor to location in A  
7481			            LD   DE, keyscan_table_row4  
7481			            CALL fLCD_Str       ;Display string pointed to by DE  
7481			            LD   A, kLCD_Line4+10  
7481			            CALL fLCD_Pos       ;Position cursor to location in A  
7481			            LD   DE, keyscan_table_row5  
7481			            CALL fLCD_Str       ;Display string pointed to by DE  
7481			  
7481			;call delay250ms  
7481				jp matrix  
7481			endif  
7481 c9			ret  
7482			  
7482			; using decade counter....  
7482			  
7482			  
7482			; TODO reset decade counter to start of scan  
7482			  
7482			; reset 15  
7482			; clock 14  
7482			; ce 13  
7482			  
7482			; 1 - q5  
7482			; 2 - q1  
7482			; 3 - q0  
7482			; 4 - q2  
7482			; 5 - q6  
7482			; 6 - q7  
7482			; 7 - q3  
7482			; 8 - vss  
7482			; 9 - q8  
7482			; 10 - q4  
7482			; 11 - q9  
7482			; 12 - cout  
7482			; 16 - vdd  
7482			  
7482			; clock      ce       reset     output  
7482			; 0          x        0         n  
7482			; x          1        0         n  
7482			; x          x        1         q0  
7482			; rising     0        0         n+1  
7482			; falling    x        0         n  
7482			; x          rising   0         n  
7482			; 1          falling  0         x+1  
7482			;  
7482			; x = dont care, if n < 5 carry = 1 otherwise 0  
7482			  
7482			;   
7482			; reset   
7482			; 13=0, 14=0, 15=1 .. 15=0  
7482			;  
7482			; handshake line  
7482			; 14=1.... read line 14=0  
7482			  
7482			  
7482			  
7482			  
7482			  
7482			; TODO hand shake clock for next column scan  
7482			; TODO detect each row  
7482			  
7482			  
7482			  
7482			  
7482			; reset 128  
7482			; clock 64  
7482			; ce 32  
7482			  
7482			  
7482			.cyclestart:  
7482			  
7482			; reset counter  
7482 3e 80		ld a, 128  
7484 d3 c1		out (portbdata),a  
7486			  
7486			; loop leds  
7486 06 0a		ld b,10  
7488			  
7488			.cycle1:  
7488 c5			push bc  
7489 3e 00		ld a, 0  
748b d3 c1		out (portbdata),a  
748d cd e1 0c		call delay250ms  
7490			  
7490 3e 40		ld a, 64  
7492 d3 c1		out (portbdata),a  
7494 cd e1 0c		call delay250ms  
7497			  
7497 3e 00		ld a, 0  
7499 d3 c1		out (portbdata),a  
749b cd e1 0c		call delay250ms  
749e			  
749e c1			pop bc  
749f 10 e7		djnz .cycle1  
74a1			  
74a1			  
74a1 18 df		jr .cyclestart  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			; map matrix key held to char on face of key  
74a3			  
74a3			;.mtocold:  
74a3			;  
74a3			;  
74a3			;; reset counter  
74a3			;ld a, 128  
74a3			;out (portbdata),a  
74a3			;  
74a3			;  
74a3			;; scan keyboard row 1  
74a3			;ld a, 0  
74a3			;out (portbdata),a  
74a3			;;ld a, 64  
74a3			;;out (portbdata),a  
74a3			;  
74a3			;  
74a3			;	ld a, 128  
74a3			;	ld hl, keyscan_table  
74a3			;	call .rowscan  
74a3			;  
74a3			;;ld a, 0  
74a3			;;out (portbdata),a  
74a3			;ld a, 64  
74a3			;out (portbdata),a  
74a3			;  
74a3			;	ld a, 64  
74a3			;	ld hl, keyscan_table+key_cols  
74a3			;	call .rowscan  
74a3			;  
74a3			;ld a, 0  
74a3			;out (portbdata),a  
74a3			;;ld a, 64  
74a3			;;out (portbdata),a  
74a3			;	ld a, 32  
74a3			;	ld hl, keyscan_table+(key_cols*2)  
74a3			;	call .rowscan  
74a3			;  
74a3			;  
74a3			;;ld a, 0  
74a3			;;out (portbdata),a  
74a3			;ld a, 64  
74a3			;out (portbdata),a  
74a3			;  
74a3			;	ld a, 16  
74a3			;	ld hl, keyscan_table+(key_cols*3)  
74a3			;	call .rowscan  
74a3			;  
74a3			;  
74a3			;	; flag if key D is held down and remove from reporting  
74a3			;	ld bc, .key_map_fd    
74a3			;	ld hl, keyscan_table  
74a3			;	ld de, key_fd  
74a3			;	call .key_shift_hold  
74a3			;	cp 255  
74a3			;	jr z, .cinmap  
74a3			;	; flag if key C is held down and remove from reporting  
74a3			;	ld bc, .key_map_fc    
74a3			;	ld hl, keyscan_table+key_cols  
74a3			;	ld de, key_fc  
74a3			;	call .key_shift_hold  
74a3			;	cp 255  
74a3			;	jr z, .cinmap  
74a3			;	; flag if key B is held down and remove from reporting  
74a3			;	ld bc, .key_map_fb    
74a3			;	ld hl, keyscan_table+(key_cols*2)  
74a3			;	ld de, key_fb  
74a3			;	call .key_shift_hold  
74a3			;	cp 255  
74a3			;	jr z, .cinmap  
74a3			;	; flag if key A is held down and remove from reporting  
74a3			;	ld bc, .key_map_fa    
74a3			;	ld hl, keyscan_table+(key_cols*3)  
74a3			;	ld de, key_fa  
74a3			;	call .key_shift_hold  
74a3			;	cp 255  
74a3			;	jr z, .cinmap  
74a3			;  
74a3			;	ld de, .matrix_to_char  
74a3			;  
74a3			;  
74a3			;.cinmap:   
74a3			;	if DEBUG_KEY  
74a3			;            LD   A, kLCD_Line4  
74a3			;            CALL fLCD_Pos       ;Position cursor to location in A  
74a3			;		push de  
74a3			;            LD   DE, keyscan_table  
74a3			;            CALL fLCD_Str       ;Display string pointed to by DE  
74a3			;		pop de  
74a3			;	endif  
74a3			  
74a3				; scan key matrix table for any held key  
74a3			  
74a3				; de holds either the default matrix or one selected above  
74a3			  
74a3			;	ld hl, keyscan_table  
74a3			;	ld b,key_cols*key_rows  
74a3			;  
74a3			;.cin1:	ld a,(hl)  
74a3			;	cp '#'  
74a3			;	jr z, .cinhit  
74a3			;	inc hl  
74a3			;	inc de  
74a3			;	dec b  
74a3			;	jr nz, .cin1  
74a3			;	; no key found held  
74a3			;	ld a,0  
74a3			;	ret  
74a3			;.cinhit: push de  
74a3			;	pop hl  
74a3			;	ld a,(hl)  
74a3			;	ret  
74a3			  
74a3			; flag a control key is held   
74a3			; hl is key pin, de is flag indicator  
74a3			  
74a3			;.key_shift_hold:  
74a3			;	push bc  
74a3			;	ld a, 1  
74a3			;	ld (cursor_shape),a  
74a3			;	ld b, 0  
74a3			;	ld a, (hl)  
74a3			;	cp '.'  
74a3			;	jr z, .key_shift1  
74a3			;	ld b, 255  
74a3			;	ld a, '+'    ; hide key from later scans  
74a3			;	ld (hl),a  
74a3			;	ld a, 2  
74a3			;	ld (cursor_shape),a  
74a3			;.key_shift1:  
74a3			;	; write flag indicator  
74a3			;	ld a,b  
74a3			;	ld (de),a  
74a3			;  
74a3			;	pop de    ; de now holds the key map ptr  
74a3			;	ret  
74a3			  
74a3				  
74a3				  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			;	push hl  
74a3			;	push de  
74a3			;	push bc  
74a3			;	call keyscan  
74a3			;	; map key matrix to ascii value of key face  
74a3			;  
74a3			;	ld hl, key_face_map  
74a3			;	ld de, keyscan_table  
74a3			;  
74a3			;	; get how many keys to look at  
74a3			;	ld b, keyscan_table_len  
74a3			;	  
74a3			;  
74a3			;	; at this stage fall out on first key hit  
74a3			;	; TODO handle multiple key press  
74a3			;  
74a3			;map1:	ld a,(hl)  
74a3			;	cp '#'  
74a3			;	jr z, keyhit  
74a3			;	inc hl  
74a3			;	inc de  
74a3			;	dec b  
74a3			;	jr nz, map1  
74a3			;nohit:	ld a, 0  
74a3			;	jr keydone  
74a3			;keyhit: push de  
74a3			;	pop hl  
74a3			;	ld a,(hl)  
74a3			;keydone:  
74a3			;	push bc  
74a3			;	push de  
74a3			; 	push hl  
74a3			;	ret   
74a3			;  
74a3			  
74a3			  
74a3			  
74a3			  
74a3			; scan physical key matrix  
74a3			  
74a3			  
74a3			;keyscan:  
74a3			;  
74a3			;; for each key_row use keyscanr bit mask for out  
74a3			;; then read in for keyscanc bitmask  
74a3			;; save result of row scan to keyscantable  
74a3			;  
74a3			;; scan keyboard row 1  
74a3			;  
74a3			;	ld b, key_rows  
74a3			;	ld hl, key_scanr  
74a3			;	ld de, keyscan_table  
74a3			;  
74a3			;rowloop:  
74a3			;  
74a3			;	ld a,(hl)		; out bit mask to energise keyboard row  
74a3			;	call rowscan  
74a3			;	inc hl  
74a3			;	dec b  
74a3			;	jr nz, rowloop  
74a3			;  
74a3			;	ret  
74a3			;  
74a3			;  
74a3			;; pass a out bitmask, b row number  
74a3			;arowscan:   
74a3			;	push bc  
74a3			;  
74a3			;	ld d, b  
74a3			;  
74a3			;	; calculate buffer location for this row  
74a3			;  
74a3			;	ld hl, keyscan_table	  
74a3			;kbufr:  ld e, key_cols  
74a3			;kbufc:	inc hl  
74a3			;	dec e  
74a3			;	jr nz, kbufc  
74a3			;	dec d  
74a3			;	jr nz, kbufr  
74a3			;  
74a3			;	; energise row and read columns  
74a3			;  
74a3			;	out (portbdata),a  
74a3			;	in a,(portbdata)  
74a3			;	ld c,a  
74a3			;  
74a3			;  
74a3			;	; save buffer loc  
74a3			;  
74a3			;	ld (keybufptr), hl  
74a3			;  
74a3			;	ld hl, key_scanc  
74a3			;	ld d, key_cols  
74a3			;  
74a3			;	; for each column check each bit mask  
74a3			;  
74a3			;colloop:  
74a3			;	  
74a3			;  
74a3			;	; reset flags for the row   
74a3			;  
74a3			;	ld b,'.'  
74a3			;	and (hl)  
74a3			;	jr z, maskskip  
74a3			;	ld b,'#'  
74a3			;maskskip:  
74a3			;	; save  key state  
74a3			;	push hl  
74a3			;	ld hl, (keybufptr)  
74a3			;	ld (hl), b  
74a3			;	inc hl  
74a3			;	ld (keybufptr), hl  
74a3			;  
74a3			;	; move to next bit mask  
74a3			;	pop hl  
74a3			;	inc hl  
74a3			;  
74a3			;	dec d  
74a3			;	jr nz, colloop  
74a3			;  
74a3			;	ret  
74a3			;  
74a3			;  
74a3			;;  
74a3			; lcd functions  
74a3			;  
74a3			;  
74a3			  
74a3			;if DEBUG_KEY_MATRIX  
74a3			  
74a3			; test function to display hardware view of matrix state  
74a3			  
74a3			matrixold:  
74a3			  
74a3			  
74a3			  
74a3			; reset counter  
74a3 3e 80		ld a, 128  
74a5 d3 c1		out (portbdata),a  
74a7			; scan keyboard row 1  
74a7 3e 00		ld a, 0  
74a9 d3 c1		out (portbdata),a  
74ab			;ld a, 64  
74ab			;out (portbdata),a  
74ab 3e 80			ld a, 128  
74ad 21 30 fe			ld hl, keyscan_table_row1  
74b0 cd 09 75			call .rowscan  
74b3			  
74b3			;ld a, 0  
74b3			;out (portbdata),a  
74b3 3e 40		ld a, 64  
74b5 d3 c1		out (portbdata),a  
74b7 3e 40			ld a, 64  
74b9 21 25 fe			ld hl, keyscan_table_row2  
74bc cd 09 75			call .rowscan  
74bf			  
74bf 3e 00		ld a, 0  
74c1 d3 c1		out (portbdata),a  
74c3			;ld a, 64  
74c3			;out (portbdata),a  
74c3 3e 20			ld a, 32  
74c5 21 1a fe			ld hl, keyscan_table_row3  
74c8 cd 09 75			call .rowscan  
74cb			  
74cb			;ld a, 0  
74cb			;out (portbdata),a  
74cb 3e 40		ld a, 64  
74cd d3 c1		out (portbdata),a  
74cf 3e 10			ld a, 16  
74d1 21 0f fe			ld hl, keyscan_table_row4  
74d4 cd 09 75			call .rowscan  
74d7			  
74d7			; Display text on first line  
74d7 3e 00		            LD   A, kLCD_Line1  
74d9 cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
74dc 11 30 fe		            LD   DE, keyscan_table_row1  
74df			            ;LD   DE, MsgHello  
74df cd 33 71		            CALL fLCD_Str       ;Display string pointed to by DE  
74e2			  
74e2			; Display text on second line  
74e2 3e 28		            LD   A, kLCD_Line2  
74e4 cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
74e7 11 25 fe		            LD   DE, keyscan_table_row2  
74ea cd 33 71		            CALL fLCD_Str       ;Display string pointed to by DE  
74ed 3e 50		            LD   A, kLCD_Line3  
74ef cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
74f2 11 1a fe		            LD   DE, keyscan_table_row3  
74f5 cd 33 71		            CALL fLCD_Str       ;Display string pointed to by DE  
74f8 3e 78		            LD   A, kLCD_Line4  
74fa cd 11 71		            CALL fLCD_Pos       ;Position cursor to location in A  
74fd 11 0f fe		            LD   DE, keyscan_table_row4  
7500 cd 33 71		            CALL fLCD_Str       ;Display string pointed to by DE  
7503			  
7503 cd e1 0c			call delay250ms  
7506 c3 f4 73			jp matrix  
7509			  
7509			; pass de as row display flags  
7509			.rowscan:   
7509			;	out (portbdata),a  
7509 db c1			in a,(portbdata)  
750b 4f				ld c,a  
750c				; reset flags for the row   
750c 06 7e			ld b,KEY_MATRIX_NO_PRESS  
750e e6 01			and 1  
7510 28 02			jr z, .p1on  
7512 06 23			ld b,'#'  
7514			.p1on:  
7514 70				ld (hl), b  
7515 23				inc hl  
7516			  
7516 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7518 79				ld a,c  
7519 e6 02			and 2  
751b			;	bit 0,a  
751b 28 02			jr z, .p2on  
751d 06 23			ld b,'#'  
751f			.p2on:  
751f 70				ld (hl), b  
7520 23				inc hl  
7521			;  
7521 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7523 79				ld a,c  
7524 e6 04			and 4  
7526			;;	bit 0,a  
7526 28 02			jr z, .p3on  
7528 06 23			ld b,'#'  
752a			.p3on:  
752a 70				ld (hl), b  
752b 23				inc hl  
752c			;;  
752c 06 7e			ld b,KEY_MATRIX_NO_PRESS  
752e			;;	bit 0,a  
752e 79				ld a,c  
752f e6 08			and 8  
7531 28 02			jr z, .p4on  
7533 06 23			ld b,'#'  
7535			.p4on:  
7535 70				ld (hl), b  
7536 23				inc hl  
7537			  
7537 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7539			;;	bit 0,a  
7539 79				ld a,c  
753a e6 10			and 16  
753c 28 02			jr z, .p5on  
753e 06 23			ld b,'#'  
7540			.p5on:  
7540 70				ld (hl), b  
7541 23				inc hl  
7542			; zero term  
7542 06 00			ld b,0  
7544 70				ld (hl), b  
7545			  
7545 c9			.rscandone: ret  
7546			  
7546			;addatohl:  
7546			;  
7546			 ;add   a, l    ; A = A+L  
7546			  ;  ld    l, a    ; L = A+L  
7546			   ; adc   a, h    ; A = A+L+H+carry  
7546			   ; sub   l       ; A = H+carry  
7546			   ; ld    h, a    ; H = H+carry  
7546			  
7546			;ret  
7546			; eof  
# End of file firmware_key_5x10.asm
7546			;include "firmware_key_4x10.asm" 
7546			 
7546			heap_size:    equ heap_end - heap_start 
7546			;eof 
# End of file os_mega.asm
7546
