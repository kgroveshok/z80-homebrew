# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			SOUND_ENABLE: equ 1 
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 6d 18			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			;        nop  
0003			;        nop 
0003			;;	org 05h		; null out bdos call 
0003			; 
0003			;        nop  
0003			;        nop  
0003			;        nop 
0003			;;	org 08h 
0003			;;; 
0003			;;	jp cin		; rst 8 - char in 
0003			;;; 
0003			; 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;	org 010h 
0003			;; 
0003			;	jp cout		; rest 010h  - char out 
0003			;; 
0003			;	org 01bh   
0003			; 
0003			;	;jp  		; rst 01bh   - write string to display 
0003			;	jp str_at_display 
0003			; 
0003			; 
0003			;	org 020h 
0003			; 
0003			;	; jp		 ; rst 020h - read char at screen location 
0003			; 
0003			;	org 028h 
0003			 
0003				; jp		 ; rst 028h  - storage i/o 
0003			 
0003			; 	org 030h 
0003			;	jp break_point_state 
0003			  
0003			; $30  
0003			; org 038h 
0003			; $38 
0003			 
0003			; TODO any more important entry points to add to jump table for easier coding use? 
0003			 
0003			 
0003			include "firmware.asm" 
0003			  
0003			; main constants (used here and in firmware)  
0003			  
0003			; TODO have page 0 of storage as bios  
0003			  
0003			Device_A: equ 0h  
0003			Device_B: equ 040h          ; Sound  
0003			  
0003			if BASE_KEV  
0003			Device_C: equ 080h          ; Storage and ext cart devices  
0003			endif  
0003			  
0003			if BASE_SC114  
0003			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
0003			endif  
0003			  
0003			if BASE_CPM  
0003			; TODO fixup for CPM  
0003			Device_C: equ 080h          ; Storage and ext cart devices  
0003			endif  
0003			  
0003			Device_D: equ 0c0h             ; Keyboard and LCD  
0003			  
0003			; Odd specific debug points for testing hardware dev  
0003			  
0003			DEBUG_SOUND: equ 1  
0003			DEBUG_STK_FAULT: equ 0  
0003			DEBUG_INPUT: equ 0     ; Debug input entry code  
0003			DEBUG_KEYCINWAIT: equ 0  
0003			DEBUG_KEYCIN: equ 0  
0003			DEBUG_KEY: equ 0  
0003			DEBUG_KEY_MATRIX: equ 0  
0003			DEBUG_STORECF: equ 0  
0003			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.   
0003			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A  
0003			DEBUG_SPI: equ 0    ; low level spi tests  
0003			  
0003			; Enable many break points  
0003			  
0003			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6  
0003			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6  
0003			DEBUG_FORTH_PARSE_NEXTWORD: equ 0  
0003			DEBUG_FORTH_JP: equ 0    ; 4  
0003			DEBUG_FORTH_MALLOC: equ 0  
0003			DEBUG_FORTH_MALLOC_INT: equ 0  
0003			DEBUG_FORTH_DOT: equ 0  
0003			DEBUG_FORTH_DOT_WAIT: equ 0  
0003			DEBUG_FORTH_MATHS: equ 0  
0003			DEBUG_FORTH_TOK: equ 0    ; 4  
0003			DEBUG_FORTH_PARSE: equ 0    ; 3  
0003			DEBUG_FORTH: equ 0  ;2  
0003			DEBUG_FORTH_WORDS: equ 1   ; 1  
0003			DEBUG_FORTH_PUSH: equ 1   ; 1  
0003			DEBUG_FORTH_UWORD: equ 1   ; 1  
0003			  
0003			; Enable key point breakpoints  
0003			  
0003			DEBUG_FORTH_DOT_KEY: equ 0  
0003			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5  
0003			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1  
0003			  
0003			; Debug stack imbalances  
0003			  
0003			ON: equ 1  
0003			OFF: equ 0  
0003			  
0003			DEBUG_STACK_IMB: equ 0  
0003			STACK_IMB_STORE: equ 20  
0003			  
0003			; House keeping and protections  
0003			  
0003			DEBUG_FORTH_STACK_GUARD: equ 1  
0003			DEBUG_FORTH_MALLOC_GUARD: equ 1  
0003			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual!  
0003			FORTH_ENABLE_FREE: equ 0  
0003			FORTH_ENABLE_MALLOCFREE: equ 1  
0003			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away  
0003			FORTH_ENABLE_FLOATMATH: equ 0  
0003			  
0003			  
0003			CALLMONITOR: macro  
0003				call break_point_state  
0003				endm  
0003			  
0003			MALLOC_1: equ 1        ; from dk88   
0003			MALLOC_2: equ 0           ; broke  
0003			MALLOC_3: equ 0           ; really broke  
0003			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
0003			  
0003			if BASE_KEV   
0003			stacksize: equ 512*2  
0003			  
0003			STACK_RET_SIZE: equ 128  
0003			STACK_LOOP_SIZE: equ 512  
0003			STACK_DATA_SIZE: equ 512  
0003			endif  
0003			if BASE_SC114  
0003			;tos:	equ 0f000h  
0003			stacksize: equ 256  
0003			STACK_RET_SIZE: equ 64  
0003			STACK_LOOP_SIZE: equ 256  
0003			STACK_DATA_SIZE: equ 256  
0003			endif  
0003			  
0003			if BASE_CPM  
0003			;tos:	equ 0f000h  
0003			stacksize: equ 256  
0003			STACK_RET_SIZE: equ 64  
0003			STACK_LOOP_SIZE: equ 256  
0003			STACK_DATA_SIZE: equ 256  
0003			endif  
0003			  
0003			;if STORAGE_SE == 0  
0003			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
0003			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
0003			;endif  
0003			  
0003			; Block 0 at offset $3c holds the file number to run at system startup after the display  
0003			  
0003			STORE_0_AUTOFILE: equ $21  
0003			STORE_0_BANKRUN: equ $23  
0003			STORE_0_FILERUN: equ $24  
0003			  
0003			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
0003			  
0003			STORE_0_AUTORUN: equ $20  
0003			  
0003			; Blocks where directory table is held  
0003			  
0003			; Reducing the number of entries increases the max file size  
0003			  
0003			;STORE_DIR_START: equ 1  
0003			;STORE_DIR_END: equ 33  
0003			  
0003			; Blocks from where file data is stored  
0003			  
0003			;STORE_DATA_START: equ STORE_DIR_END + 1  
0003			  
0003			; Block indicators (<32 are data files)  
0003			  
0003			;STORE_BLOCK_CFG: equ $8f       ; config block  
0003			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
0003			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
0003			;STORE_BLOCK_FREE: equ $85       ; data block free  
0003			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
0003			  
0003			  
0003			  
0003			; Directory entry flags  
0003			  
0003			;STORE_DIR_FREE: equ 0  
0003			;STORE_DIR_FILE:  equ 1  
0003			  
0003			; Structure offsets to directory entries  
0003			;STORE_DE_FLAG: equ 0  
0003			;STORE_DE_MAXEXT: equ 1  
0003			;STORE_DE_FILENAME: equ 2  
0003			  
0003			; Structure offsets to block 0  
0003			  
0003			;STORE_BK0_ISFOR: equ 1  
0003			;STORE_BK0_LABEL: equ 3  
0003			  
0003			; memory allocation   
0003			  
0003			chk_stund: equ tos+2           ; underflow check word  
0003			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
0003			  
0003			; keyscan table needs rows x cols buffer  
0003			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
0003			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
0003			  
0003			keyscan_table_row1: equ chk_stovr -key_cols-1  
0003			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
0003			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
0003			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
0003			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
0003			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
0003			keyscan_scancol: equ keyscan_table-key_cols  
0003			;keyscan_table_len: equ key_rows*key_cols  
0003			;keybufptr: equ keyscan_table - 2  
0003			;keysymbol: equ keybufptr - 1  
0003			key_held: equ keyscan_scancol-1	; currently held  
0003			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
0003			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
0003			key_fa: equ key_repeat_ct -1 ;  
0003			key_fb: equ key_fa -1 ;  
0003			key_fc: equ key_fb -1 ;  
0003			key_fd: equ key_fc -1 ;  
0003			key_face_held: equ key_fd - 1   
0003			  
0003			; flag for enabling/disabling various hardware diags   
0003			  
0003			hardware_diag: equ key_face_held - 1  
0003			  
0003			; hardware config switches  
0003			; TODO add bitmasks on includes for hardware  
0003			; high byte for expansion ids  
0003			;     0000 0000  no card inserted  
0003			;     0000 0001  storage card inserted  
0003			;     0000 0010  spi sd card active  
0003			  
0003			;       
0003			; low byte:  
0003			;     0000 0001   4x4 keypad  
0003			;     0000 0010   full keyboard  
0003			;     0000 0011   spi/ext keyboard  
0003			;     0000 0100   20x4 lcd  
0003			;     0000 1000   40x4 lcd  
0003			;     0000 1100   spi/ext display  
0003			;     0001 0000   ide interface available  
0003			  
0003			hardware_word: equ hardware_diag - 2  
0003			  
0003			; debug marker - optional display of debug point on the debug screens  
0003			  
0003			debug_mark: equ hardware_word - 4  
0003			  
0003			; input_str vars  
0003			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
0003			input_start:  equ input_ptr - 2    ; ptr to the start of string   
0003			input_size: equ input_start -1  ; number of chars  
0003			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
0003			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
0003			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
0003			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
0003			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
0003			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
0003			input_len: equ input_cur_onoff - 5 ; length of current input  
0003			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
0003			  
0003			CUR_BLINK_RATE: equ 15  
0003			  
0003			key_actual_pressed: equ input_cursor - 1   
0003			key_symbol: equ key_actual_pressed - 1   
0003			key_shift: equ key_symbol - 1   
0003			  
0003			; Display allocation  
0003			  
0003			;display_rows: equ 4     ; move out to mini and mega files  
0003			;display_cols: equ 20  
0003			  
0003			display_fb_len: equ display_rows*display_cols  
0003			  
0003			; primary frame buffer     
0003			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
0003			; working frame buffers  
0003			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
0003			display_fb3: equ  display_fb1-display_fb_len - 1  
0003			display_fb2: equ  display_fb3-display_fb_len - 1  
0003			;  
0003			; pointer to active frame buffer  
0003			display_fb_active: equ display_fb2 - 2  
0003			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
0003			display_write_tmp: equ display_lcde1e2 - 2  
0003			  
0003			  
0003			;  
0003			  
0003			;; can load into de directory  
0003			cursor_col: equ display_write_tmp-1  
0003			cursor_row: equ cursor_col-1  
0003			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
0003			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
0003			  
0003			; maths vars  
0003			  
0003			LFSRSeed: equ cursor_shape -20   
0003			randData: equ LFSRSeed - 2  
0003			xrandc: equ randData - 2  
0003			stackstore: equ xrandc - 2  
0003			seed1: equ  stackstore -2   
0003			seed2: equ seed1 - 2  
0003			  
0003			; cf storage vars  
0003			  
0003			iErrorNum:  equ seed2-1         ;Error number  
0003			iErrorReg:  equ iErrorNum -1              ;Error register  
0003			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
0003			  
0003			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
0003			  
0003			STORE_BLOCK_LOG:  equ   255      ; TODO remove.... Logical block size     
0003			  
0003			store_page: equ store_bank_active-STORE_BLOCK_PHY            ; page size for eeprom  
0003			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
0003			store_tmp1: equ store_page - 2      ; temp pointer holders during ops  
0003			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
0003			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
0003			store_tmpid: equ store_tmp3 - 1		; page temp id  
0003			store_tmpext: equ store_tmpid - 1		; file extent temp  
0003			store_openext: equ store_tmpext - 1		; file extent of current opened file for read  
0003			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
0003			store_filecache: equ store_openmaxext-(2*5)   ;  TODO (using just one for now)  file id + extent count cache * 5  
0003			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
0003			;  
0003			; spi vars  
0003			  
0003			  
0003			spi_cartdev: equ store_tmppageid - 1      ; holds bit mask to send to portb (ext spi) devices  
0003			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
0003			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
0003			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
0003			spi_device_id: equ spi_device - 1    ; human readable bank number  
0003			  
0003			;;;;; forth cli params  
0003			  
0003			; TODO use a different frame buffer for forth???  
0003			  
0003			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
0003			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
0003			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
0003			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
0003			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
0003			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
0003			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
0003			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
0003			  
0003			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
0003			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
0003			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
0003			cli_ret_sp: equ cli_var_array - 2    ; ret stack pointer  
0003			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
0003			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
0003			  
0003			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
0003			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
0003			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
0003			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
0003			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
0003			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
0003			chk_data_ovr: equ cli_data_stack -2; overflow check word  
0003			  
0003			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
0003			  
0003			; os/forth token vars  
0003			  
0003			os_last_cmd: equ os_var_array-255  
0003			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
0003			os_current_i: equ os_cli_cmd-2  
0003			os_cur_ptr: equ os_current_i-2  
0003			os_word_scratch: equ os_cur_ptr-30  
0003			os_tok_len: equ os_word_scratch - 2  
0003			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
0003			os_tok_malloc: equ os_tok_ptr - 2  
0003			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
0003			os_input: equ os_last_new_uword-255  
0003			execscratch: equ os_input-255        ; exec cmd eval buffer  
0003			scratch: equ execscratch-255  
0003			  
0003			  
0003			; temp locations for new word processing to save on adding more   
0003			  
0003			os_new_malloc: equ scratch-2  
0003			os_new_parse_len: equ os_new_malloc - 2  
0003			os_new_word_len: equ os_new_parse_len - 2  
0003			os_new_work_ptr: equ os_new_word_len - 2  
0003			os_new_src_ptr: equ os_new_work_ptr - 2  
0003			os_new_exec: equ os_new_src_ptr - 2  
0003			os_new_exec_ptr: equ os_new_exec - 2  
0003			  
0003			; resume memory alloocations....  
0003			  
0003			os_view_disable: equ os_new_exec_ptr - 1  
0003			os_view_af: equ os_view_disable - 2  
0003			os_view_hl: equ os_view_af -2  
0003			os_view_de: equ os_view_hl - 2  
0003			os_view_bc: equ os_view_de - 2  
0003			  
0003			; stack checksum word  
0003			if DEBUG_STACK_IMB  
0003				curframe: equ  os_view_de - 5  
0003				store_sp: equ curframe - (STACK_IMB_STORE*4)  
0003				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
0003			else  
0003				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
0003			endif  
0003			  
0003			; with data stack could see memory filled with junk. need some memory management   
0003			; malloc and free entry points added  
0003			  
0003			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
0003			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
0003			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
0003			;heap_end: equ free_list-1  ; Starting address of heap  
0003			;heap_start: equ free_list - heap_size  ; Starting address of heap  
0003			  
0003			;heap_start: equ free_list - heap_size  ; Starting address of heap  
0003			heap_end: equ chk_word-1  ; Starting address of heap  
0003			  
0003			  
0003			;if BASE_KEV   
0003			;heap_start: equ 0800eh  ; Starting address of heap  
0003			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
0003			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
0003			;endif  
0003			  
0003			;if BASE_SC114  
0003			;heap_start: equ baseram+15  ; Starting address of heap  
0003			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
0003			;endif  
0003			  
0003			  
0003			;;;;  
0003			  
0003			  
0003			; change below to point to last memory alloc above  
0003			topusermem:  equ   heap_start  
0003			  
0003			;if BASE_KEV   
0003			;baseusermem: equ 08000h  
0003			;endif  
0003			  
0003			;if BASE_SC114  
0003			;;aseusermem:     equ    12  
0003			;baseusermem:     equ    prompt  
0003			;;baseusermem:     equ    endofcode  
0003			;endif  
0003			  
0003			  
0003			; **********************************************************************  
0003			; **  Constants  
0003			; **********************************************************************  
0003			  
0003			; Constants used by this code module  
0003			kDataReg:   EQU Device_D           ;PIO port A data register  
0003			kContReg:   EQU Device_D+2           ;PIO port A control register  
0003			  
0003			  
0003			portbdata:  equ Device_D+1    ; port b data  
0003			portbctl:   equ Device_D+3    ; port b control  
0003			  
0003			  
0003			;KEY_SHIFT:   equ 5  
0003			;KEY_SYMBOLSHIFT:  equ 6  
0003			  
0003			KEY_SHIFTLOCK: equ 4  
0003			  
0003			  
0003			KEY_UP: equ 5  
0003			KEY_NEXTWORD: equ 6  
0003			KEY_PREVWORD: equ 7  
0003			KEY_BS: equ 8  
0003			KEY_TAB:  equ 9  
0003			KEY_DOWN: equ 10  
0003			KEY_LEFT: equ 11  
0003			KEY_RIGHT: equ 12  
0003			KEY_CR:   equ 13  
0003			KEY_HOME: equ 14  
0003			KEY_END: equ 15  
0003			  
0003			KEY_F1: equ 16  
0003			KEY_F2: equ 17  
0003			KEY_F3: equ 18  
0003			KEY_F4: equ 19  
0003			  
0003			KEY_F5: equ 20  
0003			KEY_F6: equ 21  
0003			KEY_F7: equ 22  
0003			KEY_F8: equ 23  
0003			  
0003			KEY_F9: equ 24  
0003			KEY_F10: equ 25  
0003			KEY_F11: equ 26  
0003			KEY_F12: equ 27  
0003			  
0003			;if DEBUG_KEY  
0003			;	KEY_MATRIX_NO_PRESS: equ '.'  
0003			;	KEY_SHIFT:   equ '.'  
0003			;	KEY_SYMBOLSHIFT:  equ '.'  
0003			;else  
0003				KEY_SHIFT:   equ '~'  
0003				KEY_SYMBOLSHIFT:  equ '~'  
0003				KEY_MATRIX_NO_PRESS: equ '~'  
0003			;endi  
0003			  
0003			  
0003			  
0003			  
0003			; Macro to make adding debug marks easier  
0003			  
0003			DMARK: macro str  
0003				push af  
0003				ld a, (.dmark)  
0003				ld (debug_mark),a  
0003				ld a, (.dmark+1)  
0003				ld (debug_mark+1),a  
0003				ld a, (.dmark+2)  
0003				ld (debug_mark+2),a  
0003				jr .pastdmark  
0003			.dmark: db str  
0003			.pastdmark: pop af  
0003			  
0003			endm  
0003			  
0003			  
0003			; macro to detect for stack imbalances  
0003			  
0003			include "stackimbal.asm"  
0003			; Macro and code to detect stock imbalances 
0003			 
0003			SPPUSH: equ 0 
0003			 
0003			; Add a stack frame which can be checked before return 
0003			 
0003			STACKFRAME: macro onoff frame1 frame2 
0003			 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003						; save current SP 
0003						exx 
0003			 
0003						ld de, frame1 
0003						ld a, d 
0003						ld hl, curframe 
0003						call hexout 
0003						ld a, e 
0003						ld hl, curframe+2 
0003						call hexout 
0003			  
0003						ld hl, frame1 
0003						push hl 
0003						ld hl, frame2 
0003						push hl 
0003						exx 
0003					endif 
0003					 
0003				endif 
0003			endm 
0003			 
0003			STACKFRAMECHK: macro onoff frame1 frame2 
0003			 
0003					 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003						exx 
0003						; check stack frame SP 
0003			 
0003						ld hl, frame2 
0003						pop de   ; frame2 
0003			 
0003						call cmp16 
0003						jr nz, .spnosame 
0003						 
0003			 
0003						ld hl, frame1 
0003						pop de   ; frame1 
0003			 
0003						call cmp16 
0003						jr z, .spfrsame 
0003			 
0003						.spnosame: call showsperror 
0003			 
0003						.spfrsame: nop 
0003			 
0003						exx 
0003					endif 
0003					 
0003				endif 
0003			 
0003			 
0003			endm 
0003			 
0003			 
0003			; for a sub routine, wrap SP collection and comparisons 
0003			 
0003			; Usage: 
0003			; 
0003			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
0003			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
0003			 
0003			SAVESP: macro onoff storeword 
0003			 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003						; save current SP 
0003			 
0003						ld (store_sp+(storeword*4)), sp 
0003			 
0003					endif 
0003					 
0003				endif 
0003			 
0003			endm 
0003			 
0003			CHECKSP: macro onoff storeword 
0003			 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003			 
0003						; save SP after last save 
0003				 
0003						ld (store_sp+(storeword*4)+2), sp 
0003			 
0003						push hl 
0003						ld hl, store_sp+(storeword*4) 
0003						call check_stack_sp  
0003						pop hl 
0003			 
0003			 
0003					endif 
0003					 
0003				endif 
0003			 
0003			endm 
0003			 
0003			if DEBUG_STACK_IMB 
0003			 
0003			check_stack_sp: 
0003					push de 
0003			 
0003					ld e, (hl) 
0003					inc hl 
0003					ld d, (hl) 
0003					inc hl 
0003			 
0003					push de 
0003			 
0003			 
0003					ld e, (hl) 
0003					inc hl 
0003					ld d, (hl) 
0003					inc hl 
0003			 
0003					pop hl 
0003			 
0003			 
0003					; check to see if the same 
0003			 
0003					call cmp16 
0003					jr z, .spsame 
0003			 
0003					; not same 
0003			 
0003					call showsperror 
0003			.spsame: 
0003			 
0003					pop de 
0003			 
0003					ret 
0003			 
0003			.sperr:  db "Stack imbalance",0 
0003			 
0003			 
0003			showsperror: 
0003			 
0003			 
0003				push hl 
0003				push af 
0003				push de 
0003				call clear_display 
0003				ld de, .sperr 
0003				ld a,0 
0003			;	ld de,os_word_scratch 
0003				call str_at_display 
0003				ld a, display_row_1+17 
0003				ld de, debug_mark 
0003				call str_at_display 
0003				ld a, 0 
0003				ld (curframe+4),a 
0003				ld hl, curframe 
0003				ld de, os_word_scratch 
0003				ld a, display_row_4 
0003				call str_at_display 
0003				call update_display 
0003				;call break_point_state 
0003				call cin_wait 
0003			 
0003				ld a, ' ' 
0003				ld (os_view_disable), a 
0003				pop de	 
0003				pop af 
0003				pop hl 
0003				CALLMONITOR 
0003				ret 
0003			 
0003			endif 
0003			 
0003			 
0003			 
0003			; eof 
# End of file stackimbal.asm
0003			  
0003			;TODO macro to calc col and row offset into screen  
0003			  
0003			  
0003			  
0003			hardware_init:  
0003			  
0003 3e 00				ld a, 0  
0005 32 7d fb				ld (hardware_diag), a  
0008			  
0008					; clear all the buffers  
0008			  
0008 21 1c fa				ld hl, display_fb1  
000b 22 d8 f8				ld (display_fb_active), hl  
000e			  
000e cd d5 0a				call clear_display  
0011			  
0011 21 da f8				ld hl, display_fb2  
0014 22 d8 f8				ld (display_fb_active), hl  
0017			  
0017 cd d5 0a				call clear_display  
001a			  
001a					; init primary frame buffer area  
001a 21 bd fa				ld hl, display_fb0  
001d 22 d8 f8				ld (display_fb_active), hl  
0020			  
0020 cd d5 0a				call clear_display  
0023			  
0023			  
0023 cd db 64				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
0026			  
0026 cd 72 67			call key_init  
0029 cd cc 01			call storage_init  
002c			  
002c				; setup malloc functions  
002c			  
002c				if MALLOC_1  
002c cd ac 11				call  heap_init  
002f				endif  
002f				if MALLOC_4  
002f					call  heap_init  
002f				endif  
002f			  
002f				; init sound hardware if present  
002f			  
002f				if SOUND_ENABLE  
002f cd 69 13				call sound_init  
0032				endif  
0032			  
0032				; lcd test sequence  
0032					  
0032 cd f8 0a			call update_display  
0035 cd 55 0a			call delay1s  
0038 3e 2b			ld a,'+'  
003a cd da 0a			call fill_display  
003d cd f8 0a			call update_display  
0040 cd 55 0a			call delay1s  
0043 3e 2a			ld a,'*'  
0045 cd da 0a			call fill_display  
0048 cd f8 0a			call update_display  
004b cd 55 0a			call delay1s  
004e 3e 2d			ld a,'-'  
0050 cd da 0a			call fill_display  
0053 cd f8 0a			call update_display  
0056 cd 55 0a			call delay1s  
0059			  
0059			; boot splash screen  
0059			if display_cols == 20	  
0059			        ld a, display_row_1    
0059			else  
0059 3e 0a		        ld a, display_row_1 +10   
005b			endif  
005b 11 8c 00			ld de, bootmsg  
005e cd e8 0a			call str_at_display  
0061 cd f8 0a			call update_display  
0064			  
0064			  
0064 cd 55 0a			call delay1s  
0067 cd 55 0a			call delay1s  
006a			if display_cols == 20	  
006a			            LD   A, display_row_3+2  
006a			else  
006a 3e 5c		            LD   A, display_row_3+12  
006c			endif  
006c 11 a1 00			ld de, bootmsg1  
006f cd e8 0a			call str_at_display  
0072 cd f8 0a			call update_display  
0075 cd 55 0a			call delay1s  
0078 cd 55 0a			call delay1s  
007b			  
007b			;	ld a, display_row_4+3  
007b			;	ld de, bootmsg2  
007b			;	call str_at_display  
007b			;	call update_display  
007b			;	call delay1s  
007b			;	call delay1s  
007b			  
007b			; debug mark setup  
007b			  
007b 3e 5f		ld a, '_'  
007d 32 77 fb		ld (debug_mark),a  
0080 32 78 fb		ld (debug_mark+1),a  
0083 32 79 fb		ld (debug_mark+2),a  
0086 3e 00		ld a,0  
0088 32 7a fb		ld (debug_mark+3),a  
008b			  
008b c9					ret  
008c			  
008c			  
008c .. 00		bootmsg:	db "z80-homebrew OS v1.5",0  
00a1 .. 00		bootmsg1:	db "by Kevin Groves",0  
00b1			;bootmsg2:	db "Firmware v0.1",0  
00b1			  
00b1			; a 4x20 lcd  
00b1			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00b1			  
00b1			;if display_cols == 20  
00b1			;	include "firmware_lcd_4x20.asm"  
00b1			;endif  
00b1			  
00b1			;if display_cols == 40  
00b1			;	include "firmware_lcd_4x40.asm"  
00b1			;endif  
00b1			  
00b1			;  
00b1			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00b1			; TODO abstract the bit bang video out interface for dual display  
00b1			; TODO wire video out to tx pin on rc2014 bus  
00b1			  
00b1			; must supply cin, and cin_wait for low level hardware abstraction   
00b1			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00b1			; test scancode  
00b1			  
00b1			;;;;;  
00b1			;;;  
00b1			; Moved out to mini and maxi versions  
00b1			;  
00b1			; include "firmware_key_4x4.asm"  
00b1			; using existing 4 wire x 4 resistor array for input  
00b1			;include "firmware_key_4x10.asm"  
00b1			; need to mod the board for 5 rows due to resistor array  
00b1			;include "firmware_key_5x10.asm"  
00b1			  
00b1			; storage hardware interface  
00b1			  
00b1			; use microchip serial eeprom for storage  
00b1			  
00b1			  
00b1			if STORAGE_SE  
00b1				include "firmware_spi.asm"  
00b1			; my spi protocol (used by storage) 
00b1			 
00b1			; SPI pins 
00b1			 
00b1			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00b1			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00b1			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00b1			 
00b1			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00b1			; chip pin 4 gnd 
00b1			 
00b1			 
00b1			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00b1			SPI_CE1: equ 1      ;    port a1 pin 14  
00b1			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00b1			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00b1			SPI_CE4: equ 4      ; port a4     pin 10 
00b1			 
00b1			; active low AND masks 
00b1			 
00b1			;SPI_CE0_MASK: equ    255-1 
00b1			;SPI_CE1_MASK: equ   255-2 
00b1			;SPI_CE2_MASK: equ   255-4 
00b1			;SPI_CE3_MASK: equ   255-8 
00b1			;SPI_CE4_MASK: equ   255-16 
00b1			SPI_CE_HIGH:  equ 255 
00b1			 
00b1			 
00b1			 
00b1			 
00b1			; TODO store port id for spi device ie dev c 
00b1			; TODO store pin for SO 
00b1			; TODO store pin for SI 
00b1			; TODO store pin for SCLK 
00b1			 
00b1			; 
00b1			 
00b1			; ensure that spi bus is in a stable state with default pins  
00b1			 
00b1			se_stable_spi:   
00b1			 
00b1				 ; set DI high, CE high , SCLK low 
00b1				;ld a, SPI_DI | SPI_CE0 
00b1 3e 07			ld a, SPI_DI  
00b3 cd 87 01			call spi_ce_high 
00b6 d3 80			 out (storage_adata),a 
00b8 32 49 f8			ld (spi_portbyte),a 
00bb			 
00bb				if DEBUG_SPI 
00bb					push hl 
00bb					ld l, a 
00bb					DMARK "SPI" 
00bb					CALLMONITOR 
00bb					pop hl 
00bb				endif 
00bb c9				ret 
00bc			 
00bc			; byte to send in a 
00bc			 
00bc			spi_send_byte: 
00bc				; save byte to send for bit mask shift out 
00bc 4f			        ld c,a 
00bd 3a 49 f8			ld a,(spi_portbyte) 
00c0				  
00c0				; clock out	each bit of the byte msb first 
00c0			 
00c0 06 08			ld b, 8 
00c2			.ssb1: 
00c2				; clear so bit  
00c2 cb bf			res SPI_DI, a 
00c4 cb 11			rl c 
00c6				; if bit 7 is set then carry is set 
00c6 30 02			jr nc, .ssb2 
00c8 cb ff			set SPI_DI,a 
00ca			.ssb2:  ; output bit to ensure it is stable 
00ca d3 80			out (storage_adata),a 
00cc 00				nop 
00cd				; clock bit high 
00cd cb ef			set SPI_SCLK,a 
00cf d3 80			out (storage_adata),a 
00d1 00				nop 
00d2				; then low 
00d2 cb af			res SPI_SCLK,a 
00d4 d3 80			out (storage_adata),a 
00d6 00				nop 
00d7 10 e9			djnz .ssb1 
00d9			 
00d9 32 49 f8			ld (spi_portbyte),a 
00dc c9				ret 
00dd			 
00dd			; TODO low level get byte into A on spi 
00dd			 
00dd			spi_read_byte:  
00dd			 
00dd				; save byte to send for bit mask shift out 
00dd 0e 00		    ld c,0 
00df 3a 49 f8			ld a,(spi_portbyte) 
00e2				  
00e2				; clock out	each bit of the byte msb first 
00e2			 
00e2			 
00e2				; clock bit high 
00e2 cb ef			set SPI_SCLK,a 
00e4 d3 80			out (storage_adata),a 
00e6 00				nop 
00e7			 
00e7			    ; read DO  
00e7			 
00e7 cb f9		    set 7,c 
00e9 db 80			in a,(storage_adata) 
00eb cb 77		    bit SPI_DO,a 
00ed 20 02		    jr nz, .b7 
00ef cb b9		    res 7,c 
00f1			.b7: 
00f1				; then low 
00f1 cb af			res SPI_SCLK,a 
00f3 d3 80			out (storage_adata),a 
00f5 00				nop 
00f6			     
00f6			 
00f6				; clock bit high 
00f6 cb ef			set SPI_SCLK,a 
00f8 d3 80			out (storage_adata),a 
00fa 00				nop 
00fb			 
00fb			    ; read DO  
00fb			 
00fb cb f1		    set 6,c 
00fd db 80			in a,(storage_adata) 
00ff cb 77		    bit SPI_DO,a 
0101 20 02		    jr nz, .b6 
0103 cb b1		    res 6,c 
0105			.b6: 
0105				; then low 
0105 cb af			res SPI_SCLK,a 
0107 d3 80			out (storage_adata),a 
0109 00				nop 
010a			 
010a				; clock bit high 
010a cb ef			set SPI_SCLK,a 
010c d3 80			out (storage_adata),a 
010e 00				nop 
010f			 
010f			 
010f			    ; read DO  
010f			 
010f cb e9		    set 5,c 
0111 db 80			in a,(storage_adata) 
0113 cb 77		    bit SPI_DO,a 
0115 20 02		    jr nz, .b5 
0117 cb a9		    res 5,c 
0119			.b5: 
0119				; then low 
0119 cb af			res SPI_SCLK,a 
011b d3 80			out (storage_adata),a 
011d 00				nop 
011e				; clock bit high 
011e cb ef			set SPI_SCLK,a 
0120 d3 80			out (storage_adata),a 
0122 00				nop 
0123			 
0123			    ; read DO  
0123			 
0123 cb e1		    set 4,c 
0125 db 80			in a,(storage_adata) 
0127 cb 77		    bit SPI_DO,a 
0129 20 02		    jr nz, .b4 
012b cb a1		    res 4,c 
012d			.b4: 
012d				; then low 
012d cb af			res SPI_SCLK,a 
012f d3 80			out (storage_adata),a 
0131 00				nop 
0132				; clock bit high 
0132 cb ef			set SPI_SCLK,a 
0134 d3 80			out (storage_adata),a 
0136 00				nop 
0137			 
0137			    ; read DO  
0137			 
0137 cb d9		    set 3,c 
0139 db 80			in a,(storage_adata) 
013b cb 77		    bit SPI_DO,a 
013d 20 02		    jr nz, .b3 
013f cb 99		    res 3,c 
0141			.b3: 
0141				; then low 
0141 cb af			res SPI_SCLK,a 
0143 d3 80			out (storage_adata),a 
0145 00				nop 
0146				; clock bit high 
0146 cb ef			set SPI_SCLK,a 
0148 d3 80			out (storage_adata),a 
014a 00				nop 
014b			 
014b			    ; read DO  
014b			 
014b cb d1		    set 2,c 
014d db 80			in a,(storage_adata) 
014f cb 77		    bit SPI_DO,a 
0151 20 02		    jr nz, .b2 
0153 cb 91		    res 2,c 
0155			.b2: 
0155				; then low 
0155 cb af			res SPI_SCLK,a 
0157 d3 80			out (storage_adata),a 
0159 00				nop 
015a				; clock bit high 
015a cb ef			set SPI_SCLK,a 
015c d3 80			out (storage_adata),a 
015e 00				nop 
015f			 
015f			    ; read DO  
015f			 
015f cb c9		    set 1,c 
0161 db 80			in a,(storage_adata) 
0163 cb 77		    bit SPI_DO,a 
0165 20 02		    jr nz, .b1 
0167 cb 89		    res 1,c 
0169			.b1: 
0169				; then low 
0169 cb af			res SPI_SCLK,a 
016b d3 80			out (storage_adata),a 
016d 00				nop 
016e				; clock bit high 
016e cb ef			set SPI_SCLK,a 
0170 d3 80			out (storage_adata),a 
0172 00				nop 
0173			 
0173			    ; read DO  
0173			 
0173 cb c1		    set 0,c 
0175 db 80			in a,(storage_adata) 
0177 cb 77		    bit SPI_DO,a 
0179 20 02		    jr nz, .b0 
017b cb 81		    res 0,c 
017d			.b0: 
017d				; then low 
017d cb af			res SPI_SCLK,a 
017f d3 80			out (storage_adata),a 
0181 00				nop 
0182			 
0182			 
0182 32 49 f8			ld (spi_portbyte),a 
0185			 
0185			    ; return byte 
0185 79			    ld a,c 
0186			 
0186			 
0186 c9				ret 
0187			 
0187			 
0187			 
0187			spi_ce_high: 
0187			 
0187				if DEBUG_SPI_HARD_CE0 
0187			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0187					ret 
0187			 
0187				endif 
0187			 
0187			 
0187 f5				push af 
0188			 
0188				; send direct ce to port b 
0188 3e ff			ld a, 255 
018a d3 81			out (storage_bdata), a 
018c			 
018c f1				pop af 
018d			 
018d				; for port a that shares with spi lines AND the mask 
018d			  
018d				if DEBUG_SPI 
018d					push hl 
018d					ld h, a 
018d				endif 
018d			;	ld c, SPI_CE_HIGH 
018d			;	and c 
018d cb c7			set SPI_CE0, a 
018f cb cf			set SPI_CE1, a 
0191 cb d7			set SPI_CE2, a 
0193 cb df			set SPI_CE3, a 
0195 cb e7			set SPI_CE4, a 
0197			 
0197				if DEBUG_SPI 
0197					ld l, a 
0197					DMARK "CEh" 
0197					CALLMONITOR 
0197					pop hl 
0197				endif 
0197 c9				ret 
0198			 
0198			 
0198			spi_ce_low: 
0198			 
0198				if DEBUG_SPI_HARD_CE0 
0198			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0198					ret 
0198			 
0198				endif 
0198			 
0198 c5				push bc 
0199 f5				push af 
019a			 
019a				; send direct ce to port b 
019a 3a 4b f8			ld a, (spi_cartdev) 
019d d3 81			out (storage_bdata), a 
019f			 
019f			 
019f			 
019f				; for port a that shares with spi lines AND the mask 
019f			 
019f 3a 48 f8			ld a, (spi_device)  
01a2 4f				ld c, a 
01a3			 
01a3 f1				pop af 
01a4			 
01a4				; detect CEx 
01a4			 
01a4				if DEBUG_SPI 
01a4					push hl 
01a4					ld h, a 
01a4				endif 
01a4			 
01a4 cb 41			bit SPI_CE0, c 
01a6 20 04			jr nz, .cel1 
01a8 cb 87			res SPI_CE0, a 
01aa 18 1e			jr .celn 
01ac			.cel1: 
01ac cb 49			bit SPI_CE1, c 
01ae 20 04			jr nz, .cel2 
01b0 cb 8f			res SPI_CE1, a 
01b2 18 16			jr .celn 
01b4			.cel2: 
01b4 cb 51			bit SPI_CE2, c 
01b6 20 04			jr nz, .cel3 
01b8 cb 97			res SPI_CE2, a 
01ba 18 0e			jr .celn 
01bc			.cel3: 
01bc cb 59			bit SPI_CE3, c 
01be 20 04			jr nz, .cel4 
01c0 cb 9f			res SPI_CE3, a 
01c2 18 06			jr .celn 
01c4			.cel4: 
01c4 cb 61			bit SPI_CE4, c 
01c6 20 02			jr nz, .celn 
01c8 cb a7			res SPI_CE4, a 
01ca			.celn: 
01ca			 
01ca			 
01ca			 
01ca			;	add c 
01ca			 
01ca				if DEBUG_SPI 
01ca					ld l, a 
01ca					DMARK "CEl" 
01ca					CALLMONITOR 
01ca					pop hl 
01ca				endif 
01ca c1				pop bc 
01cb c9				ret 
01cc			 
01cc			 
01cc			 
01cc			; eof 
01cc			 
01cc			 
01cc			 
01cc			 
01cc			 
# End of file firmware_spi.asm
01cc				include "firmware_seeprom.asm"  
01cc			; 
01cc			; persisent storage interface via microchip serial eeprom 
01cc			 
01cc			; port a pio 2 
01cc			; pa 7 - si 
01cc			; pa 6 - sclk  
01cc			; pa 5 - so 
01cc			; pa 4 - cs 
01cc			; pa 3 - cs 
01cc			; pa 2 - cs 
01cc			; pa 1 - cs 
01cc			; pa 0 - cs 
01cc			; 
01cc			; TODO get block 
01cc			; TODO save block 
01cc			; TODO load file 
01cc			; TODO save file 
01cc			; TODO get dir  
01cc			 
01cc			;  
01cc			storage_adata: equ Device_C    ; device c port a - onboard storage 
01cc			storage_actl: equ Device_C+2     ; device c port a 
01cc			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
01cc			storage_bctl: equ Device_C+3     ; device c port b 
01cc			 
01cc			 
01cc			; TODO move these to hardware driver file 
01cc			 
01cc			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
01cc			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
01cc			; storage bank file system format 
01cc			; 
01cc			; first page of bank: 
01cc			; 	addr 0 - status check 
01cc			;       addr 1 - write protect flag 
01cc			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
01cc			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
01cc			;         TODO see if scanning whole of for available next file id is fast enough 
01cc			;	addr 4 > zero term string of bank label 
01cc			; 
01cc			;        
01cc			;  
01cc			; first page of any file: 
01cc			;      byte 0 - file id  
01cc			;      byte 1-17 - fixed file name  
01cc			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
01cc			; 
01cc			; other pages of any file: 
01cc			;      byte 0 - file id 
01cc			;      byte 1> - file data 
01cc			; 
01cc			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
01cc			;  
01cc			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
01cc			 
01cc			 
01cc			;storage_so_bit: 5 
01cc			;storage_si_bit: 7 
01cc			;storage_sclk_bit: 6 
01cc			  
01cc			 
01cc			; init storage pio 
01cc			 
01cc			storage_init: 
01cc			 
01cc 3e cf		            LD   A, 11001111b 
01ce d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
01d0 3e 00		            LD   A, 00000000b 
01d2 cb f7			set SPI_DO,a 
01d4			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
01d4 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
01d6			 
01d6 3e cf		            LD   A, 11001111b 
01d8 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
01da 3e 00		            LD   A, 00000000b 
01dc d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
01de			 
01de				; set all external spi devices off 
01de 3e 00			ld a, 0 
01e0 32 48 f8			ld (spi_device), a 
01e3 32 4b f8			ld (spi_cartdev), a 
01e6			 
01e6					; ensure the spi bus is in a default stable state 
01e6 cd b1 00				call se_stable_spi 
01e9			 
01e9			; TODO scan spi bus and gather which storage banks are present 
01e9			 
01e9			; populate store_bank_active  
01e9			; for each ce line activate and attempt to write first byte of bank and read back 
01e9			; if zero is returned then bank is empty 
01e9			;   
01e9			; 
01e9			 
01e9					; init file extent cache to save on slow reads 
01e9			 
01e9			;	ld hl, store_filecache 
01e9			;	ld de, 0 
01e9			;	ld hl,(de)	 
01e9			 
01e9			 
01e9 c9			    ret 
01ea			 
01ea			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
01ea			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
01ea			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
01ea			 
01ea			; INSTRUCTION SET 
01ea			; READ 0000 0011 Read data from memory array beginning at selected address 
01ea			; WRITE 0000 0010 Write data to memory array beginning at selected address 
01ea			; WREN 0000 0110 Set the write enable latch (enable write operations) 
01ea			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
01ea			; RDSR 0000 0101 Read STATUS register 
01ea			; WRSR 0000 0001 Write STATUS register 
01ea			; PE 0100 0010 Page Erase – erase one page in memory array 
01ea			; SE 1101 1000 Sector Erase – erase one sector in memory array 
01ea			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
01ea			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
01ea			 
01ea			; TODO send byte steam for page without setting the address for every single byte 
01ea			; TODO read byte  
01ea			 
01ea			; byte in a 
01ea			; address in hl  
01ea			se_writebyte: 
01ea			        
01ea			    ;   ld c, a 
01ea f5			        push af 
01eb e5			        push hl 
01ec			 
01ec			    ; initi write mode 
01ec			    ; 
01ec			    ;CS low 
01ec			 
01ec 3a 49 f8		       ld a,(spi_portbyte) 
01ef cd 98 01			call spi_ce_low 
01f2			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
01f2 d3 80		       out (storage_adata),a 
01f4 32 49 f8		       ld (spi_portbyte), a 
01f7			 
01f7			    ;clock out wren instruction 
01f7			 
01f7 3e 06		    ld a, store_wren_ins 
01f9 cd bc 00		    call spi_send_byte  
01fc			 
01fc			    ;cs high to enable write latch 
01fc			 
01fc 3a 49 f8		       ld a,(spi_portbyte) 
01ff cd 87 01			call spi_ce_high 
0202			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0202 d3 80		       out (storage_adata),a 
0204 32 49 f8		       ld (spi_portbyte), a 
0207			 
0207 00				nop 
0208			    ; 
0208			    ; intial write data 
0208			    ; 
0208			    ; cs low 
0208			     
0208 3a 49 f8		       ld a,(spi_portbyte) 
020b cd 98 01			call spi_ce_low 
020e			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
020e d3 80		       out (storage_adata),a 
0210 32 49 f8		       ld (spi_portbyte), a 
0213			 
0213			    ; clock out write instruction 
0213			     
0213 3e 02		    ld a, store_write_ins  
0215 cd bc 00		    call spi_send_byte  
0218			 
0218			    ; clock out address (depending on address size) 
0218			     
0218 e1			    pop hl 
0219 7c			    ld a,h    ; address out msb first 
021a cd bc 00		    call spi_send_byte  
021d 7d			    ld a,l 
021e cd bc 00		    call spi_send_byte  
0221			 
0221			    ; clock out byte(s) for page 
0221			 
0221 f1			    pop af 
0222 cd bc 00		    call spi_send_byte  
0225			 
0225			    ; end write with ce high 
0225 3a 49 f8		       ld a,(spi_portbyte) 
0228			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
0228 cd 87 01			call spi_ce_high 
022b d3 80		       out (storage_adata),a 
022d 32 49 f8		       ld (spi_portbyte), a 
0230			 
0230				; pause for internal write cycle 
0230 3e 0a			ld a, 10 
0232 cd 3a 0a			call aDelayInMS 
0235 c9			    ret 
0236			 
0236			; buffer to write in de 
0236			; address in hl  
0236			se_writepage: 
0236			        
0236			    ;   ld c, a 
0236 d5				push de 
0237 e5			        push hl 
0238			 
0238			    ; initi write mode 
0238			    ; 
0238			    ;CS low 
0238			 
0238 3a 49 f8		       ld a,(spi_portbyte) 
023b cd 98 01			call spi_ce_low 
023e			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
023e d3 80		       out (storage_adata),a 
0240 32 49 f8		       ld (spi_portbyte), a 
0243			 
0243			    ;clock out wren instruction 
0243			 
0243 3e 06		    ld a, store_wren_ins 
0245 cd bc 00		    call spi_send_byte  
0248			 
0248			    ;cs high to enable write latch 
0248			 
0248 3a 49 f8		       ld a,(spi_portbyte) 
024b cd 87 01			call spi_ce_high 
024e			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
024e d3 80		       out (storage_adata),a 
0250 32 49 f8		       ld (spi_portbyte), a 
0253			 
0253 00				nop 
0254			    ; 
0254			    ; intial write data 
0254			    ; 
0254			    ; cs low 
0254			     
0254 3a 49 f8		       ld a,(spi_portbyte) 
0257			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0257 cd 98 01			call spi_ce_low 
025a d3 80		       out (storage_adata),a 
025c 32 49 f8		       ld (spi_portbyte), a 
025f			 
025f			    ; clock out write instruction 
025f			     
025f 3e 02		    ld a, store_write_ins  
0261 cd bc 00		    call spi_send_byte  
0264			 
0264			    ; clock out address (depending on address size) 
0264			     
0264 e1			    pop hl 
0265 7c			    ld a,h    ; address out msb first 
0266 cd bc 00		    call spi_send_byte  
0269 7d			    ld a,l 
026a cd bc 00		    call spi_send_byte  
026d			 
026d			    ; clock out byte(s) for page 
026d			 
026d e1				pop hl 
026e 06 40			ld b, STORE_BLOCK_PHY 
0270			.bytewrite: 
0270			 
0270 7e				ld a,(hl) 
0271 e5			    push hl 
0272 c5				push bc 
0273 cd bc 00		    call spi_send_byte  
0276 c1				pop bc 
0277 e1				pop hl 
0278			 
0278			    ; end write with ce high 
0278 3a 49 f8		       ld a,(spi_portbyte) 
027b cd 87 01			call spi_ce_high 
027e			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
027e d3 80		       out (storage_adata),a 
0280 32 49 f8		       ld (spi_portbyte), a 
0283			 
0283 23				inc hl 
0284 10 ea			djnz .bytewrite 
0286			 
0286				; pause for internal write cycle 
0286 3e 64			ld a, 100 
0288 cd 3a 0a			call aDelayInMS 
028b c9			    ret 
028c			; returns byte in a 
028c			; address in hl  
028c			se_readbyte: 
028c d5				push de 
028d c5				push bc 
028e			 
028e			    ;   ld c, a 
028e e5			        push hl 
028f			 
028f			    ; initi write mode 
028f			    ; 
028f			    ;CS low 
028f			 
028f 3a 49 f8		       ld a,(spi_portbyte) 
0292 cd 98 01			call spi_ce_low 
0295			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0295 d3 80		       out (storage_adata),a 
0297 32 49 f8		       ld (spi_portbyte), a 
029a			 
029a			    ;clock out wren instruction 
029a			 
029a 3e 03		    ld a, store_read_ins 
029c cd bc 00		    call spi_send_byte  
029f			 
029f			 
029f			    ; clock out address (depending on address size) 
029f			     
029f e1			    pop hl 
02a0 7c			    ld a,h    ; address out msb first 
02a1 cd bc 00		    call spi_send_byte  
02a4 7d			    ld a,l 
02a5 cd bc 00		    call spi_send_byte  
02a8			 
02a8			    ; clock in byte(s) for page 
02a8			 
02a8 cd dd 00		    call spi_read_byte  
02ab f5				push af 
02ac			 
02ac			    ; end write with ce high 
02ac 3a 49 f8		       ld a,(spi_portbyte) 
02af			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02af cd 87 01			call spi_ce_high 
02b2 d3 80		       out (storage_adata),a 
02b4 32 49 f8		       ld (spi_portbyte), a 
02b7			 
02b7 f1				pop af 
02b8			 
02b8 c1				pop bc 
02b9 d1				pop de 
02ba			 
02ba c9			    ret 
02bb			 
02bb			if DEBUG_STORESE 
02bb			 
02bb			storageput:  
02bb			 
02bb			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
02bb			 
02bb 21 1f ee			ld hl,scratch+2 
02be cd c0 10			call get_word_hl 
02c1			 
02c1				; stuff it here for the moment as it will be overwritten later anyway 
02c1			 
02c1 22 40 f1			ld (os_cur_ptr),hl	 
02c4			 
02c4			 
02c4			; get pointer to start of string 
02c4			 
02c4 21 24 ee			ld hl, scratch+7 
02c7			 
02c7			; loop writing char of string to eeprom 
02c7			 
02c7 7e			.writestr:	ld a,(hl) 
02c8 fe 00				cp 0 
02ca 28 12				jr z, .wsdone		; done writing 
02cc e5					push hl 
02cd 2a 40 f1				ld hl,(os_cur_ptr) 
02d0 cd ea 01				call se_writebyte 
02d3			 
02d3 2a 40 f1				ld hl,(os_cur_ptr)	 ; save next eeprom address 
02d6 23					inc hl 
02d7 22 40 f1				ld (os_cur_ptr),hl 
02da			 
02da					; restore string pointer and get next char 
02da			 
02da e1					pop hl 
02db 23					inc hl 
02dc 18 e9				jr .writestr 
02de			 
02de			 
02de			 
02de			.wsdone: 
02de			 
02de			 
02de			; when done load first page into a buffer  
02de			 
02de 21 00 80				ld hl,08000h		; start in ram 
02e1 22 40 f1				ld (os_cur_ptr),hl 
02e4 21 00 00				ld hl, 0		 ; start of page 
02e7 22 45 ee				ld (scratch+40),hl	; hang on to it 
02ea			 
02ea 06 80				ld b, 128		; actually get more then one page 
02ec c5			.wsload:	push bc 
02ed 2a 45 ee				ld hl,(scratch+40) 
02f0 e5					push hl 
02f1 cd 8c 02				call se_readbyte 
02f4			 
02f4					; a now as the byte 
02f4			 
02f4 2a 40 f1				ld hl,(os_cur_ptr) 
02f7 77					ld (hl),a 
02f8					; inc next buffer area 
02f8 23					inc hl 
02f9 22 40 f1				ld (os_cur_ptr),hl 
02fc			 
02fc					; get eeprom position, inc and save for next round 
02fc e1					pop hl		 
02fd 23					inc hl 
02fe 22 45 ee				ld (scratch+40),hl 
0301 c1					pop bc 
0302 10 e8				djnz .wsload 
0304			 
0304			; set 'd' pointer to start of buffer 
0304			 
0304 21 00 80				ld hl,08000h 
0307 22 40 f1				ld (os_cur_ptr),hl 
030a			 
030a			 
030a c9			ret 
030b			 
030b			 
030b c9			storageread: ret 
030c			 
030c			 
030c			 
030c			 
030c			 
030c			 
030c			endif 
030c			 
030c			 
030c			 
# End of file firmware_seeprom.asm
030c			else  
030c			   ; create some stubs for the labels  
030c			se_readbyte: ret  
030c			se_writebyte: ret  
030c			storage_init: ret  
030c			  
030c			endif  
030c			  
030c			; use cf card for storage - throwing timeout errors. Hardware or software?????  
030c			;include "firmware_cf.asm"  
030c			  
030c			; load up high level storage hardward abstractions  
030c			include "firmware_storage.asm"  
030c			 
030c			; persisent storage hardware abstraction layer  
030c			 
030c			 
030c			 
030c			; Block 0 on storage is a config state 
030c			 
030c			 
030c			 
030c			; TODO add read phy block and write phy block functions 
030c			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
030c			 
030c			; Abstraction layer  
030c			 
030c			; Logocial block size is same size as physical size - using tape concept 
030c			 
030c			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
030c			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
030c			 
030c			 
030c			 
030c			; Filesystem layout (Logical layout) 
030c			; 
030c			; Block 0 - Bank config  
030c			; 
030c			;      Byte - 0 file id counter 
030c			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
030c			;      Byte - 3-20 zero terminated bank label 
030c			; 
030c			; Block 1 > File storage 
030c			; 
030c			;      Byte 0 file id    - block 0 file details 
030c			;      Byte 1 block id - block 0 is file  
030c			;            Byte 2-15 - File name 
030c			; 
030c			;       - to end of block data 
030c			; 
030c			 
030c			 
030c			; Read Block 
030c			; ---------- 
030c			; 
030c			; With current bank 
030c			;  
030c			; Get block number to read 
030c			; Load physical blocks starting at start block into buffer 
030c			 
030c			; de points to buffer to use 
030c			; hl holds logical block number  
030c			 
030c			storage_read_block: 
030c			 
030c				; TODO bank selection 
030c			 
030c				; for each of the physical blocks read it into the buffer 
030c 06 40			ld b, STORE_BLOCK_PHY 
030e			 
030e				if DEBUG_STORESE 
030e d5					push de 
030f				endif 
030f				 
030f			.rl1:    
030f			 
030f				; read physical block at hl into de 
030f			        ; increment hl and de to next read position on exit 
030f			 
030f e5				push hl 
0310 d5				push de	 
0311 c5				push bc 
0312			;	if DEBUG_STORESE 
0312			;		push af 
0312			;		ld a, 'R' 
0312			;		ld (debug_mark),a 
0312			;		pop af 
0312			;		CALLMONITOR 
0312			;	endif 
0312 cd 8c 02			call se_readbyte 
0315			;	if DEBUG_STORESE 
0315			;		ld a,(spi_portbyte) 
0315			;		ld l, a 
0315			;		push af 
0315			;		ld a, '1' 
0315			;		ld (debug_mark),a 
0315			;		pop af 
0315			;		CALLMONITOR 
0315			;	endif 
0315 c1				pop bc 
0316 d1				pop de 
0317 e1				pop hl 
0318 12				ld (de),a 
0319 23				inc hl 
031a 13				inc de 
031b			 
031b			;	if DEBUG_STORESE 
031b			;		push af 
031b			;		ld a, 'r' 
031b			;		ld (debug_mark),a 
031b			;		pop af 
031b			;		CALLMONITOR 
031b			;	endif 
031b			 
031b 10 f2			djnz .rl1 
031d			 
031d				if DEBUG_STORESE 
031d					DMARK "SRB" 
031d f5				push af  
031e 3a 32 03			ld a, (.dmark)  
0321 32 77 fb			ld (debug_mark),a  
0324 3a 33 03			ld a, (.dmark+1)  
0327 32 78 fb			ld (debug_mark+1),a  
032a 3a 34 03			ld a, (.dmark+2)  
032d 32 79 fb			ld (debug_mark+2),a  
0330 18 03			jr .pastdmark  
0332 ..			.dmark: db "SRB"  
0335 f1			.pastdmark: pop af  
0336			endm  
# End of macro DMARK
0336 d1					pop de 
0337			; 
0337			;		push af 
0337			;		ld a, 'R' 
0337			;		ld (debug_mark),a 
0337			;		pop af 
0337					CALLMONITOR 
0337 cd 97 16			call break_point_state  
033a				endm  
# End of macro CALLMONITOR
033a				endif 
033a c9				ret	 
033b				 
033b			 
033b			; File Size 
033b			; --------- 
033b			; 
033b			;   hl file id 
033b			; 
033b			;  returns in hl the number of blocks 
033b			 
033b			storage_file_size: 
033b 5d				ld e, l 
033c 16 00			ld d, 0 
033e 21 40 00			ld hl, STORE_BLOCK_PHY 
0341					if DEBUG_FORTH_WORDS 
0341						DMARK "SIZ" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 77 fb			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 78 fb			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 79 fb			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SIZ"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a						CALLMONITOR 
035a cd 97 16			call break_point_state  
035d				endm  
# End of macro CALLMONITOR
035d					endif 
035d cd 2d 06			call storage_findnextid 
0360			 
0360 cd 32 0d			call ishlzero 
0363			;	ld a, l 
0363			;	add h 
0363			;	cp 0 
0363 c8				ret z			; block not found so EOF 
0364			 
0364 11 62 f8			ld de, store_page 
0367 cd 0c 03			call storage_read_block 
036a			 
036a 3a 64 f8			ld a, (store_page+2)	 ; get extent count 
036d 6f				ld l, a 
036e 26 00			ld h, 0 
0370 c9			 	ret 
0371			 
0371			 
0371			; Write Block 
0371			; ----------- 
0371			; 
0371			; With current bank 
0371			;  
0371			; Get block number to write 
0371			; Write physical blocks starting at start block from buffer 
0371			  
0371			storage_write_block: 
0371				; TODO bank selection 
0371			 
0371				; for each of the physical blocks read it into the buffer 
0371 06 40			ld b, STORE_BLOCK_PHY 
0373			 
0373				if DEBUG_STORESE 
0373					DMARK "SWB" 
0373 f5				push af  
0374 3a 88 03			ld a, (.dmark)  
0377 32 77 fb			ld (debug_mark),a  
037a 3a 89 03			ld a, (.dmark+1)  
037d 32 78 fb			ld (debug_mark+1),a  
0380 3a 8a 03			ld a, (.dmark+2)  
0383 32 79 fb			ld (debug_mark+2),a  
0386 18 03			jr .pastdmark  
0388 ..			.dmark: db "SWB"  
038b f1			.pastdmark: pop af  
038c			endm  
# End of macro DMARK
038c			 
038c					;push af 
038c					;ld a, 'W' 
038c					;ld (debug_mark),a 
038c					;pop af 
038c					CALLMONITOR 
038c cd 97 16			call break_point_state  
038f				endm  
# End of macro CALLMONITOR
038f				endif 
038f			 
038f			; might not be working 
038f			;	call se_writepage 
038f			 
038f			;	ret 
038f			; 
038f			 
038f			 
038f			 
038f			.wl1:    
038f			 
038f				; read physical block at hl into de 
038f			        ; increment hl and de to next read position on exit 
038f			 
038f e5				push hl 
0390 d5				push de	 
0391 c5				push bc 
0392 1a				ld a,(de) 
0393				;if DEBUG_STORESE 
0393			;		push af 
0393			;		ld a, 'W' 
0393			;		ld (debug_mark),a 
0393			;		pop af 
0393			;		CALLMONITOR 
0393			;	endif 
0393 cd ea 01			call se_writebyte 
0396			;	call delay250ms 
0396 00				nop 
0397 00				nop 
0398 00				nop 
0399			;	if DEBUG_STORESE 
0399			;		push af 
0399			;		ld a, 'w' 
0399			;		ld (debug_mark),a 
0399			;		pop af 
0399			;		CALLMONITOR 
0399			;	endif 
0399 c1				pop bc 
039a d1				pop de 
039b e1				pop hl 
039c 23				inc hl 
039d 13				inc de 
039e			 
039e			 
039e 10 ef			djnz .wl1 
03a0			 
03a0				if DEBUG_STORESE 
03a0					DMARK "SW2" 
03a0 f5				push af  
03a1 3a b5 03			ld a, (.dmark)  
03a4 32 77 fb			ld (debug_mark),a  
03a7 3a b6 03			ld a, (.dmark+1)  
03aa 32 78 fb			ld (debug_mark+1),a  
03ad 3a b7 03			ld a, (.dmark+2)  
03b0 32 79 fb			ld (debug_mark+2),a  
03b3 18 03			jr .pastdmark  
03b5 ..			.dmark: db "SW2"  
03b8 f1			.pastdmark: pop af  
03b9			endm  
# End of macro DMARK
03b9			 
03b9					;push af 
03b9					;ld a, 'W' 
03b9					;ld (debug_mark),a 
03b9					;pop af 
03b9					CALLMONITOR 
03b9 cd 97 16			call break_point_state  
03bc				endm  
# End of macro CALLMONITOR
03bc				endif 
03bc c9				ret	 
03bd			 
03bd			; Init bank 
03bd			; --------- 
03bd			; 
03bd			; With current bank 
03bd			; 
03bd			; Setup block 0 config 
03bd			;     Set 0 file id counter 
03bd			;     Set formatted byte pattern 
03bd			;     Zero out bank label 
03bd			;      
03bd			; For every logical block write 0-1 byte as null 
03bd			 
03bd			storage_get_block_0: 
03bd			 
03bd				; TODO check presence 
03bd			 
03bd				; get block 0 config 
03bd			 
03bd 21 00 00			ld hl, 0 
03c0 11 62 f8			ld de, store_page 
03c3 cd 0c 03			call storage_read_block 
03c6			 
03c6				if DEBUG_STORESE 
03c6					DMARK "SB0" 
03c6 f5				push af  
03c7 3a db 03			ld a, (.dmark)  
03ca 32 77 fb			ld (debug_mark),a  
03cd 3a dc 03			ld a, (.dmark+1)  
03d0 32 78 fb			ld (debug_mark+1),a  
03d3 3a dd 03			ld a, (.dmark+2)  
03d6 32 79 fb			ld (debug_mark+2),a  
03d9 18 03			jr .pastdmark  
03db ..			.dmark: db "SB0"  
03de f1			.pastdmark: pop af  
03df			endm  
# End of macro DMARK
03df 11 62 f8				ld de, store_page 
03e2			;		push af 
03e2			;		ld a, 'i' 
03e2			;		ld (debug_mark),a 
03e2			;		pop af 
03e2					CALLMONITOR 
03e2 cd 97 16			call break_point_state  
03e5				endm  
# End of macro CALLMONITOR
03e5				endif 
03e5			 
03e5				; is this area formatted? 
03e5			 
03e5			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03e5 2a 63 f8			ld hl, (store_page+1) 
03e8 3e 80			ld a,0x80 
03ea bd				cp l 
03eb 20 22			jr nz, .ininotformatted 
03ed				; do a double check 
03ed 3e 27			ld a, 0x27 
03ef bc				cp h 
03f0 20 1d			jr nz, .ininotformatted 
03f2			 
03f2				; formatted then 
03f2			 
03f2				if DEBUG_STORESE 
03f2					DMARK "SB1" 
03f2 f5				push af  
03f3 3a 07 04			ld a, (.dmark)  
03f6 32 77 fb			ld (debug_mark),a  
03f9 3a 08 04			ld a, (.dmark+1)  
03fc 32 78 fb			ld (debug_mark+1),a  
03ff 3a 09 04			ld a, (.dmark+2)  
0402 32 79 fb			ld (debug_mark+2),a  
0405 18 03			jr .pastdmark  
0407 ..			.dmark: db "SB1"  
040a f1			.pastdmark: pop af  
040b			endm  
# End of macro DMARK
040b					;push af 
040b					;ld a, 'I' 
040b					;ld (debug_mark),a 
040b					;pop af 
040b					CALLMONITOR 
040b cd 97 16			call break_point_state  
040e				endm  
# End of macro CALLMONITOR
040e				endif 
040e c9				ret 
040f			 
040f			.ininotformatted: 
040f				; bank not formatted so poke various bits to make sure 
040f			 
040f				if DEBUG_STORESE 
040f					DMARK "SB2" 
040f f5				push af  
0410 3a 24 04			ld a, (.dmark)  
0413 32 77 fb			ld (debug_mark),a  
0416 3a 25 04			ld a, (.dmark+1)  
0419 32 78 fb			ld (debug_mark+1),a  
041c 3a 26 04			ld a, (.dmark+2)  
041f 32 79 fb			ld (debug_mark+2),a  
0422 18 03			jr .pastdmark  
0424 ..			.dmark: db "SB2"  
0427 f1			.pastdmark: pop af  
0428			endm  
# End of macro DMARK
0428					;push af 
0428					;ld a, 'f' 
0428					;ld (debug_mark),a 
0428					;pop af 
0428					CALLMONITOR 
0428 cd 97 16			call break_point_state  
042b				endm  
# End of macro CALLMONITOR
042b				endif 
042b			 
042b cd 18 0a			call storage_clear_page 
042e			 
042e 21 62 f8			ld hl, store_page 
0431 3e 00			ld a, 0 
0433				 
0433 77				ld (hl),a   ; reset file counter 
0434			 
0434 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0437 22 63 f8		 	ld (store_page+1), hl	 
043a			 
043a				; set default label 
043a			 
043a 21 d6 04			ld hl, .defaultbanklabl 
043d 11 65 f8		 	ld de, store_page+3 
0440 01 0f 00			ld bc, 15 
0443 ed b0			ldir 
0445			 
0445				; Append the current bank id 
0445 21 6e f8			ld hl, store_page+3+9 
0448 3a 47 f8			ld a, (spi_device_id) 
044b 77				ld (hl), a 
044c			 
044c				; save default page 0 
044c			 
044c 21 00 00			ld hl, 0 
044f 11 62 f8			ld de, store_page 
0452				if DEBUG_STORESE 
0452					DMARK "SB3" 
0452 f5				push af  
0453 3a 67 04			ld a, (.dmark)  
0456 32 77 fb			ld (debug_mark),a  
0459 3a 68 04			ld a, (.dmark+1)  
045c 32 78 fb			ld (debug_mark+1),a  
045f 3a 69 04			ld a, (.dmark+2)  
0462 32 79 fb			ld (debug_mark+2),a  
0465 18 03			jr .pastdmark  
0467 ..			.dmark: db "SB3"  
046a f1			.pastdmark: pop af  
046b			endm  
# End of macro DMARK
046b			;		push af 
046b			;		ld a, 'F' 
046b			;		ld (debug_mark),a 
046b			;		pop af 
046b					CALLMONITOR 
046b cd 97 16			call break_point_state  
046e				endm  
# End of macro CALLMONITOR
046e				endif 
046e cd 71 03			call storage_write_block 
0471				if DEBUG_STORESE 
0471					DMARK "SB4" 
0471 f5				push af  
0472 3a 86 04			ld a, (.dmark)  
0475 32 77 fb			ld (debug_mark),a  
0478 3a 87 04			ld a, (.dmark+1)  
047b 32 78 fb			ld (debug_mark+1),a  
047e 3a 88 04			ld a, (.dmark+2)  
0481 32 79 fb			ld (debug_mark+2),a  
0484 18 03			jr .pastdmark  
0486 ..			.dmark: db "SB4"  
0489 f1			.pastdmark: pop af  
048a			endm  
# End of macro DMARK
048a			;		push af 
048a			;		ld a, '>' 
048a			;		ld (debug_mark),a 
048a			;		pop af 
048a					CALLMONITOR 
048a cd 97 16			call break_point_state  
048d				endm  
# End of macro CALLMONITOR
048d				endif 
048d			 
048d 00				nop 
048e 00				nop 
048f 00				nop 
0490			 
0490				; now set 0 in every page to mark as a free block 
0490			 
0490 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0492 21 40 00			ld hl, STORE_BLOCK_PHY 
0495			 
0495 3e 00		.setmark1:   	ld a,0 
0497 e5					push hl 
0498 c5					push bc 
0499 cd ea 01				call se_writebyte 
049c 3e 0a			ld a, 10 
049e cd 3a 0a			call aDelayInMS 
04a1 23				inc hl 
04a2 cd ea 01				call se_writebyte 
04a5 3e 0a			ld a, 10 
04a7 cd 3a 0a			call aDelayInMS 
04aa 2b				dec hl 
04ab c1					pop bc 
04ac e1					pop hl 
04ad 3e 40				ld a, STORE_BLOCK_PHY 
04af cd 09 0d				call addatohl 
04b2 10 e1				djnz .setmark1 
04b4			 
04b4 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
04b6 3e 00		.setmark2:   	ld a,0 
04b8 e5					push hl 
04b9 c5					push bc 
04ba cd ea 01				call se_writebyte 
04bd 3e 0a			ld a, 10 
04bf cd 3a 0a			call aDelayInMS 
04c2 23				inc hl 
04c3 cd ea 01				call se_writebyte 
04c6 3e 0a			ld a, 10 
04c8 cd 3a 0a			call aDelayInMS 
04cb 2b				dec hl 
04cc c1					pop bc 
04cd e1					pop hl 
04ce 3e 40				ld a, STORE_BLOCK_PHY 
04d0 cd 09 0d				call addatohl 
04d3 10 e1				djnz .setmark2 
04d5			 
04d5					 
04d5			 
04d5			 
04d5 c9				ret 
04d6			 
04d6			 
04d6			 
04d6			 
04d6 .. 00		.defaultbanklabl:   db "BankLabel_",0 
04e1			 
04e1			 
04e1			 
04e1			; Label Bank 
04e1			; ---------- 
04e1			; 
04e1			; With current bank 
04e1			; Read block 0 
04e1			; Set label 
04e1			; Write block 0 
04e1			 
04e1			; label str pointer in hl 
04e1			 
04e1			storage_label:     
04e1			 
04e1				if DEBUG_STORESE 
04e1					DMARK "LBL" 
04e1 f5				push af  
04e2 3a f6 04			ld a, (.dmark)  
04e5 32 77 fb			ld (debug_mark),a  
04e8 3a f7 04			ld a, (.dmark+1)  
04eb 32 78 fb			ld (debug_mark+1),a  
04ee 3a f8 04			ld a, (.dmark+2)  
04f1 32 79 fb			ld (debug_mark+2),a  
04f4 18 03			jr .pastdmark  
04f6 ..			.dmark: db "LBL"  
04f9 f1			.pastdmark: pop af  
04fa			endm  
# End of macro DMARK
04fa					CALLMONITOR 
04fa cd 97 16			call break_point_state  
04fd				endm  
# End of macro CALLMONITOR
04fd				endif 
04fd			 
04fd e5				push hl 
04fe			 
04fe cd bd 03			call storage_get_block_0 
0501			 
0501				; set default label 
0501			 
0501 e1				pop hl 
0502			 
0502 11 65 f8		 	ld de, store_page+3 
0505 01 0f 00			ld bc, 15 
0508				if DEBUG_STORESE 
0508					DMARK "LB3" 
0508 f5				push af  
0509 3a 1d 05			ld a, (.dmark)  
050c 32 77 fb			ld (debug_mark),a  
050f 3a 1e 05			ld a, (.dmark+1)  
0512 32 78 fb			ld (debug_mark+1),a  
0515 3a 1f 05			ld a, (.dmark+2)  
0518 32 79 fb			ld (debug_mark+2),a  
051b 18 03			jr .pastdmark  
051d ..			.dmark: db "LB3"  
0520 f1			.pastdmark: pop af  
0521			endm  
# End of macro DMARK
0521					CALLMONITOR 
0521 cd 97 16			call break_point_state  
0524				endm  
# End of macro CALLMONITOR
0524				endif 
0524 ed b0			ldir 
0526				; save default page 0 
0526			 
0526 21 00 00			ld hl, 0 
0529 11 62 f8			ld de, store_page 
052c				if DEBUG_STORESE 
052c					DMARK "LBW" 
052c f5				push af  
052d 3a 41 05			ld a, (.dmark)  
0530 32 77 fb			ld (debug_mark),a  
0533 3a 42 05			ld a, (.dmark+1)  
0536 32 78 fb			ld (debug_mark+1),a  
0539 3a 43 05			ld a, (.dmark+2)  
053c 32 79 fb			ld (debug_mark+2),a  
053f 18 03			jr .pastdmark  
0541 ..			.dmark: db "LBW"  
0544 f1			.pastdmark: pop af  
0545			endm  
# End of macro DMARK
0545					CALLMONITOR 
0545 cd 97 16			call break_point_state  
0548				endm  
# End of macro CALLMONITOR
0548				endif 
0548 cd 71 03			call storage_write_block 
054b			 
054b c9				ret 
054c			 
054c			 
054c			 
054c			; Read Block 0 - Config 
054c			; --------------------- 
054c			; 
054c			; With current bank 
054c			; Call presence test 
054c			;    If not present format/init bank  
054c			; Read block 0  
054c			;  
054c			 
054c			 
054c			; Dir 
054c			; --- 
054c			; 
054c			; With current bank 
054c			; Load Block 0 Config 
054c			; Get max file id number 
054c			; For each logical block 
054c			;    Read block read byte 2 
054c			;      if first block of file 
054c			;         Display file name 
054c			;         Display type flags for file 
054c			;        
054c			 
054c			; moving to words as this requires stack control 
054c			 
054c			 
054c			; Delete File 
054c			; ----------- 
054c			; 
054c			; With current bank 
054c			; 
054c			; Load Block 0 Config 
054c			; Get max file id number 
054c			; For each logical block 
054c			;    Read block file id 
054c			;      If first block of file and dont have file id 
054c			;         if file to delete 
054c			;         Save file id 
054c			;         Null file id 
054c			;         Write this block back 
054c			;      If file id is one saved 
054c			;         Null file id 
054c			;         Write this block back 
054c			 
054c			storage_erase: 
054c			 
054c				; hl contains the file id 
054c			 
054c 5d				ld e, l 
054d 16 00			ld d, 0 
054f 21 40 00			ld hl, STORE_BLOCK_PHY 
0552					if DEBUG_FORTH_WORDS 
0552						DMARK "ERA" 
0552 f5				push af  
0553 3a 67 05			ld a, (.dmark)  
0556 32 77 fb			ld (debug_mark),a  
0559 3a 68 05			ld a, (.dmark+1)  
055c 32 78 fb			ld (debug_mark+1),a  
055f 3a 69 05			ld a, (.dmark+2)  
0562 32 79 fb			ld (debug_mark+2),a  
0565 18 03			jr .pastdmark  
0567 ..			.dmark: db "ERA"  
056a f1			.pastdmark: pop af  
056b			endm  
# End of macro DMARK
056b						CALLMONITOR 
056b cd 97 16			call break_point_state  
056e				endm  
# End of macro CALLMONITOR
056e					endif 
056e cd 2d 06			call storage_findnextid 
0571			 
0571 e5				push hl 
0572			 
0572				; TODO check file not found 
0572			 
0572 11 62 f8			ld de, store_page 
0575 cd 0c 03			call storage_read_block 
0578			 
0578					if DEBUG_FORTH_WORDS 
0578						DMARK "ER1" 
0578 f5				push af  
0579 3a 8d 05			ld a, (.dmark)  
057c 32 77 fb			ld (debug_mark),a  
057f 3a 8e 05			ld a, (.dmark+1)  
0582 32 78 fb			ld (debug_mark+1),a  
0585 3a 8f 05			ld a, (.dmark+2)  
0588 32 79 fb			ld (debug_mark+2),a  
058b 18 03			jr .pastdmark  
058d ..			.dmark: db "ER1"  
0590 f1			.pastdmark: pop af  
0591			endm  
# End of macro DMARK
0591						CALLMONITOR 
0591 cd 97 16			call break_point_state  
0594				endm  
# End of macro CALLMONITOR
0594					endif 
0594 3a 62 f8			ld a, (store_page)	; get file id 
0597 32 5b f8			ld (store_tmpid), a 
059a			 
059a 3a 64 f8			ld a, (store_page+2)    ; get count of extends 
059d 32 5a f8			ld (store_tmpext), a 
05a0			 
05a0				; wipe file header 
05a0			 
05a0 e1				pop hl 
05a1 3e 00			ld a, 0 
05a3 32 62 f8			ld (store_page), a 
05a6 32 63 f8			ld (store_page+1),a 
05a9 11 62 f8			ld de, store_page 
05ac					if DEBUG_FORTH_WORDS 
05ac						DMARK "ER2" 
05ac f5				push af  
05ad 3a c1 05			ld a, (.dmark)  
05b0 32 77 fb			ld (debug_mark),a  
05b3 3a c2 05			ld a, (.dmark+1)  
05b6 32 78 fb			ld (debug_mark+1),a  
05b9 3a c3 05			ld a, (.dmark+2)  
05bc 32 79 fb			ld (debug_mark+2),a  
05bf 18 03			jr .pastdmark  
05c1 ..			.dmark: db "ER2"  
05c4 f1			.pastdmark: pop af  
05c5			endm  
# End of macro DMARK
05c5						CALLMONITOR 
05c5 cd 97 16			call break_point_state  
05c8				endm  
# End of macro CALLMONITOR
05c8					endif 
05c8 cd 71 03			call storage_write_block 
05cb			 
05cb			 
05cb				; wipe file extents 
05cb			 
05cb 3a 5a f8			ld a, (store_tmpext) 
05ce 47				ld b, a 
05cf			 
05cf			.eraext:	  
05cf c5				push bc 
05d0			 
05d0 21 40 00			ld hl, STORE_BLOCK_PHY 
05d3 3a 5b f8			ld a,(store_tmpid) 
05d6 5f				ld e, a 
05d7 50				ld d, b	 
05d8					if DEBUG_FORTH_WORDS 
05d8						DMARK "ER3" 
05d8 f5				push af  
05d9 3a ed 05			ld a, (.dmark)  
05dc 32 77 fb			ld (debug_mark),a  
05df 3a ee 05			ld a, (.dmark+1)  
05e2 32 78 fb			ld (debug_mark+1),a  
05e5 3a ef 05			ld a, (.dmark+2)  
05e8 32 79 fb			ld (debug_mark+2),a  
05eb 18 03			jr .pastdmark  
05ed ..			.dmark: db "ER3"  
05f0 f1			.pastdmark: pop af  
05f1			endm  
# End of macro DMARK
05f1						CALLMONITOR 
05f1 cd 97 16			call break_point_state  
05f4				endm  
# End of macro CALLMONITOR
05f4					endif 
05f4 cd 2d 06			call storage_findnextid 
05f7			 
05f7 e5				push hl 
05f8 11 62 f8			ld de, store_page 
05fb cd 0c 03			call storage_read_block 
05fe			 
05fe				; free block	 
05fe			 
05fe 3e 00			ld a, 0 
0600 32 62 f8			ld (store_page), a 
0603 32 63 f8			ld (store_page+1),a 
0606 11 62 f8			ld de, store_page 
0609 e1				pop hl 
060a					if DEBUG_FORTH_WORDS 
060a						DMARK "ER4" 
060a f5				push af  
060b 3a 1f 06			ld a, (.dmark)  
060e 32 77 fb			ld (debug_mark),a  
0611 3a 20 06			ld a, (.dmark+1)  
0614 32 78 fb			ld (debug_mark+1),a  
0617 3a 21 06			ld a, (.dmark+2)  
061a 32 79 fb			ld (debug_mark+2),a  
061d 18 03			jr .pastdmark  
061f ..			.dmark: db "ER4"  
0622 f1			.pastdmark: pop af  
0623			endm  
# End of macro DMARK
0623						CALLMONITOR 
0623 cd 97 16			call break_point_state  
0626				endm  
# End of macro CALLMONITOR
0626					endif 
0626 cd 71 03			call storage_write_block 
0629			 
0629 c1				pop bc 
062a 10 a3			djnz .eraext 
062c			 
062c c9				ret 
062d			 
062d			 
062d			; Find Free Block 
062d			; --------------- 
062d			; 
062d			; With current bank 
062d			;  
062d			; From given starting logical block 
062d			;    Read block  
062d			;    If no file id 
062d			;         Return block id 
062d			 
062d			 
062d			; hl starting page number 
062d			; hl contains free page number or zero if no pages free 
062d			; e contains the file id to locate 
062d			; d contains the block number 
062d			 
062d			; TODO change to find file id and use zero for free block 
062d			 
062d			storage_findnextid: 
062d			 
062d				; now locate first 0 page to mark as a free block 
062d			 
062d 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
062f			;	ld hl, STORE_BLOCK_PHY 
062f			 
062f					if DEBUG_FORTH_WORDS 
062f					DMARK "FNI" 
062f f5				push af  
0630 3a 44 06			ld a, (.dmark)  
0633 32 77 fb			ld (debug_mark),a  
0636 3a 45 06			ld a, (.dmark+1)  
0639 32 78 fb			ld (debug_mark+1),a  
063c 3a 46 06			ld a, (.dmark+2)  
063f 32 79 fb			ld (debug_mark+2),a  
0642 18 03			jr .pastdmark  
0644 ..			.dmark: db "FNI"  
0647 f1			.pastdmark: pop af  
0648			endm  
# End of macro DMARK
0648						CALLMONITOR 
0648 cd 97 16			call break_point_state  
064b				endm  
# End of macro CALLMONITOR
064b					endif 
064b			.ff1:   	 
064b e5					push hl 
064c c5					push bc 
064d d5					push de 
064e cd 8c 02				call se_readbyte 
0651 5f					ld e,a 
0652 23					inc hl 
0653 cd 8c 02				call se_readbyte 
0656 57					ld d, a 
0657 e1					pop hl 
0658 e5					push hl 
0659 cd 27 0d				call cmp16 
065c 28 49				jr z, .fffound 
065e			 
065e d1					pop de 
065f c1					pop bc 
0660 e1					pop hl 
0661			 
0661					; is found? 
0661					;cp e 
0661					;ret z 
0661			 
0661 3e 40				ld a, STORE_BLOCK_PHY 
0663 cd 09 0d				call addatohl 
0666 10 e3				djnz .ff1 
0668			 
0668 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
066a			.ff2:   	 
066a			 
066a e5					push hl 
066b c5					push bc 
066c d5					push de 
066d cd 8c 02				call se_readbyte 
0670 5f					ld e,a 
0671 23					inc hl 
0672 cd 8c 02				call se_readbyte 
0675 57					ld d, a 
0676			 
0676 e1					pop hl 
0677 e5					push hl 
0678 cd 27 0d				call cmp16 
067b 28 2a				jr z, .fffound 
067d			 
067d d1					pop de 
067e c1					pop bc 
067f e1					pop hl 
0680					; is found? 
0680					;cp e 
0680					;ret z 
0680			 
0680 3e 40				ld a, STORE_BLOCK_PHY 
0682 cd 09 0d				call addatohl 
0685 10 e3				djnz .ff2 
0687			 
0687			 
0687					if DEBUG_FORTH_WORDS 
0687					DMARK "FN-" 
0687 f5				push af  
0688 3a 9c 06			ld a, (.dmark)  
068b 32 77 fb			ld (debug_mark),a  
068e 3a 9d 06			ld a, (.dmark+1)  
0691 32 78 fb			ld (debug_mark+1),a  
0694 3a 9e 06			ld a, (.dmark+2)  
0697 32 79 fb			ld (debug_mark+2),a  
069a 18 03			jr .pastdmark  
069c ..			.dmark: db "FN-"  
069f f1			.pastdmark: pop af  
06a0			endm  
# End of macro DMARK
06a0					;	push af 
06a0					;	ld a, 'n' 
06a0					;	ld (debug_mark),a 
06a0					;	pop af 
06a0						CALLMONITOR 
06a0 cd 97 16			call break_point_state  
06a3				endm  
# End of macro CALLMONITOR
06a3					endif 
06a3				; no free marks! 
06a3 21 00 00				ld hl, 0 
06a6 c9				ret 
06a7			.fffound: 
06a7				 
06a7			 
06a7 d1					pop de 
06a8 c1					pop bc 
06a9 e1					pop hl 
06aa					if DEBUG_FORTH_WORDS 
06aa					DMARK "FNF" 
06aa f5				push af  
06ab 3a bf 06			ld a, (.dmark)  
06ae 32 77 fb			ld (debug_mark),a  
06b1 3a c0 06			ld a, (.dmark+1)  
06b4 32 78 fb			ld (debug_mark+1),a  
06b7 3a c1 06			ld a, (.dmark+2)  
06ba 32 79 fb			ld (debug_mark+2),a  
06bd 18 03			jr .pastdmark  
06bf ..			.dmark: db "FNF"  
06c2 f1			.pastdmark: pop af  
06c3			endm  
# End of macro DMARK
06c3					;	push af 
06c3					;	ld a, 'n' 
06c3					;	ld (debug_mark),a 
06c3					;	pop af 
06c3						CALLMONITOR 
06c3 cd 97 16			call break_point_state  
06c6				endm  
# End of macro CALLMONITOR
06c6					endif 
06c6 c9				ret 
06c7			 
06c7			 
06c7			 
06c7			; Free Space 
06c7			; ---------- 
06c7			; 
06c7			; With current bank 
06c7			; 
06c7			; Set block count to zero 
06c7			; Starting with first logical block 
06c7			;      Find free block  
06c7			;      If block id given, increment block count 
06c7			; 
06c7			;  
06c7			 
06c7			 
06c7			; hl contains count of free blocks 
06c7			 
06c7			storage_freeblocks: 
06c7			 
06c7				; now locate first 0 page to mark as a free block 
06c7			 
06c7 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
06c9 21 40 00			ld hl, STORE_BLOCK_PHY 
06cc 11 00 00			ld de, 0 
06cf			 
06cf			.fb1:   	 
06cf e5					push hl 
06d0 c5					push bc 
06d1 d5					push de 
06d2 cd 8c 02				call se_readbyte 
06d5 d1					pop de 
06d6 c1					pop bc 
06d7 e1					pop hl 
06d8			 
06d8					; is free? 
06d8 fe 00				cp 0 
06da 20 01				jr nz, .ff1cont 
06dc 13					inc de 
06dd			 
06dd			.ff1cont: 
06dd			 
06dd			 
06dd 3e 40				ld a, STORE_BLOCK_PHY 
06df cd 09 0d				call addatohl 
06e2 10 eb				djnz .fb1 
06e4			 
06e4 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
06e6			.fb2:   	 
06e6 e5					push hl 
06e7 c5					push bc 
06e8 d5					push de 
06e9 cd 8c 02				call se_readbyte 
06ec d1					pop de 
06ed c1					pop bc 
06ee e1					pop hl 
06ef			 
06ef					; is free? 
06ef fe 00				cp 0 
06f1 20 01				jr nz, .ff2cont 
06f3 13					inc de 
06f4			 
06f4			.ff2cont: 
06f4			 
06f4 3e 40				ld a, STORE_BLOCK_PHY 
06f6 cd 09 0d				call addatohl 
06f9 10 eb				djnz .fb2 
06fb			 
06fb eb				ex de, hl 
06fc c9				ret 
06fd			 
06fd			; Get File ID 
06fd			; ----------- 
06fd			; 
06fd			; With current bank 
06fd			;  
06fd			; Load Block 0 Config 
06fd			; Get max file id number 
06fd			; For each logical block 
06fd			;    Read block file id 
06fd			;      If first block of file and dont have file id 
06fd			;         if file get id and exit 
06fd			 
06fd			 
06fd			 
06fd			 
06fd			; Create File 
06fd			; ----------- 
06fd			; 
06fd			; With current bank  
06fd			; Load Block 0 Config 
06fd			; Get max file id number 
06fd			; Increment file id number 
06fd			; Save Config 
06fd			; Find free block 
06fd			; Set buffer with file name and file id 
06fd			; Write buffer to free block  
06fd			 
06fd			 
06fd			; hl point to file name 
06fd			; hl returns file id 
06fd			 
06fd			; file format: 
06fd			; byte 0 - file id 
06fd			; byte 1 - extent number 
06fd			; byte 2-> data 
06fd			 
06fd			; format for extent number 0: 
06fd			; 
06fd			; byte 0 - file id 
06fd			; byte 1 - extent 0 
06fd			; byte 2 - extent count 
06fd			; byte 3 -> file name and meta data 
06fd			 
06fd			 
06fd			storage_create: 
06fd				if DEBUG_STORESE 
06fd					DMARK "SCR" 
06fd f5				push af  
06fe 3a 12 07			ld a, (.dmark)  
0701 32 77 fb			ld (debug_mark),a  
0704 3a 13 07			ld a, (.dmark+1)  
0707 32 78 fb			ld (debug_mark+1),a  
070a 3a 14 07			ld a, (.dmark+2)  
070d 32 79 fb			ld (debug_mark+2),a  
0710 18 03			jr .pastdmark  
0712 ..			.dmark: db "SCR"  
0715 f1			.pastdmark: pop af  
0716			endm  
# End of macro DMARK
0716					CALLMONITOR 
0716 cd 97 16			call break_point_state  
0719				endm  
# End of macro CALLMONITOR
0719				endif 
0719			 
0719 e5				push hl		; save file name pointer 
071a			 
071a cd bd 03			call storage_get_block_0 
071d			 
071d 3a 62 f8			ld a,(store_page)	; get current file id 
0720 3c				inc a 
0721 32 62 f8			ld (store_page),a 
0724				 
0724 32 5b f8			ld (store_tmpid),a			; save id 
0727			 
0727 21 00 00			ld hl, 0 
072a 11 62 f8			ld de, store_page 
072d				if DEBUG_STORESE 
072d					DMARK "SCw" 
072d f5				push af  
072e 3a 42 07			ld a, (.dmark)  
0731 32 77 fb			ld (debug_mark),a  
0734 3a 43 07			ld a, (.dmark+1)  
0737 32 78 fb			ld (debug_mark+1),a  
073a 3a 44 07			ld a, (.dmark+2)  
073d 32 79 fb			ld (debug_mark+2),a  
0740 18 03			jr .pastdmark  
0742 ..			.dmark: db "SCw"  
0745 f1			.pastdmark: pop af  
0746			endm  
# End of macro DMARK
0746					CALLMONITOR 
0746 cd 97 16			call break_point_state  
0749				endm  
# End of macro CALLMONITOR
0749				endif 
0749 cd 71 03			call storage_write_block	 ; save update 
074c			 
074c				if DEBUG_STORESE 
074c 11 62 f8				ld de, store_page 
074f					DMARK "SCC" 
074f f5				push af  
0750 3a 64 07			ld a, (.dmark)  
0753 32 77 fb			ld (debug_mark),a  
0756 3a 65 07			ld a, (.dmark+1)  
0759 32 78 fb			ld (debug_mark+1),a  
075c 3a 66 07			ld a, (.dmark+2)  
075f 32 79 fb			ld (debug_mark+2),a  
0762 18 03			jr .pastdmark  
0764 ..			.dmark: db "SCC"  
0767 f1			.pastdmark: pop af  
0768			endm  
# End of macro DMARK
0768					CALLMONITOR 
0768 cd 97 16			call break_point_state  
076b				endm  
# End of macro CALLMONITOR
076b				endif 
076b				;  
076b				 
076b 21 40 00			ld hl, STORE_BLOCK_PHY 
076e 11 00 00			ld de, 0 
0771 cd 2d 06			call storage_findnextid 
0774			 
0774 22 4c f8			ld (store_tmppageid), hl    ; save page to use  
0777			 
0777				; TODO detect 0 = no spare blocks 
0777			 
0777				; hl now contains the free page to use for the file header page 
0777			 
0777				if DEBUG_STORESE 
0777				DMARK "SCF" 
0777 f5				push af  
0778 3a 8c 07			ld a, (.dmark)  
077b 32 77 fb			ld (debug_mark),a  
077e 3a 8d 07			ld a, (.dmark+1)  
0781 32 78 fb			ld (debug_mark+1),a  
0784 3a 8e 07			ld a, (.dmark+2)  
0787 32 79 fb			ld (debug_mark+2),a  
078a 18 03			jr .pastdmark  
078c ..			.dmark: db "SCF"  
078f f1			.pastdmark: pop af  
0790			endm  
# End of macro DMARK
0790					CALLMONITOR 
0790 cd 97 16			call break_point_state  
0793				endm  
# End of macro CALLMONITOR
0793				endif 
0793			 
0793 22 4c f8			ld (store_tmppageid), hl 
0796				 
0796 3a 5b f8			ld a,(store_tmpid)    ; get file id 
0799			;	ld a, (store_filecache)			; save to cache 
0799			 
0799 32 62 f8			ld (store_page),a    ; set page id 
079c 3e 00			ld a, 0			 ; extent 0 is file header 
079e 32 63 f8			ld (store_page+1), a   ; set file extent 
07a1			 
07a1 32 64 f8			ld (store_page+2), a   ; extent count for the file 
07a4			 
07a4			;	inc hl 		; init block 0 of file 
07a4			;	inc hl   		; skip file and extent id 
07a4			 ;       ld a, 0 
07a4			;	ld (hl),a 
07a4			;	ld a, (store_filecache+1)  	; save to cache 
07a4			 
07a4			;	inc hl    ; file name 
07a4				 
07a4				 
07a4 11 65 f8			ld de, store_page+3    ; get buffer for term string to use as file name 
07a7				if DEBUG_STORESE 
07a7					DMARK "SCc" 
07a7 f5				push af  
07a8 3a bc 07			ld a, (.dmark)  
07ab 32 77 fb			ld (debug_mark),a  
07ae 3a bd 07			ld a, (.dmark+1)  
07b1 32 78 fb			ld (debug_mark+1),a  
07b4 3a be 07			ld a, (.dmark+2)  
07b7 32 79 fb			ld (debug_mark+2),a  
07ba 18 03			jr .pastdmark  
07bc ..			.dmark: db "SCc"  
07bf f1			.pastdmark: pop af  
07c0			endm  
# End of macro DMARK
07c0					CALLMONITOR 
07c0 cd 97 16			call break_point_state  
07c3				endm  
# End of macro CALLMONITOR
07c3				endif 
07c3 e1				pop hl    ; get zero term string 
07c4 e5				push hl 
07c5 3e 00			ld a, 0 
07c7 cd 72 11			call strlent 
07ca 23				inc hl   ; cover zero term 
07cb 06 00			ld b,0 
07cd 4d				ld c,l 
07ce e1				pop hl 
07cf				;ex de, hl 
07cf				if DEBUG_STORESE 
07cf					DMARK "SCa" 
07cf f5				push af  
07d0 3a e4 07			ld a, (.dmark)  
07d3 32 77 fb			ld (debug_mark),a  
07d6 3a e5 07			ld a, (.dmark+1)  
07d9 32 78 fb			ld (debug_mark+1),a  
07dc 3a e6 07			ld a, (.dmark+2)  
07df 32 79 fb			ld (debug_mark+2),a  
07e2 18 03			jr .pastdmark  
07e4 ..			.dmark: db "SCa"  
07e7 f1			.pastdmark: pop af  
07e8			endm  
# End of macro DMARK
07e8					;push af 
07e8					;ld a, 'a' 
07e8					;ld (debug_mark),a 
07e8					;pop af 
07e8					CALLMONITOR 
07e8 cd 97 16			call break_point_state  
07eb				endm  
# End of macro CALLMONITOR
07eb				endif 
07eb ed b0			ldir    ; copy zero term string 
07ed				if DEBUG_STORESE 
07ed					DMARK "SCA" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 77 fb			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 78 fb			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 79 fb			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "SCA"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 97 16			call break_point_state  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809			 
0809				; write file header page 
0809			 
0809 2a 4c f8			ld hl,(store_tmppageid) 
080c 11 62 f8			ld de, store_page 
080f				if DEBUG_STORESE 
080f					DMARK "SCb" 
080f f5				push af  
0810 3a 24 08			ld a, (.dmark)  
0813 32 77 fb			ld (debug_mark),a  
0816 3a 25 08			ld a, (.dmark+1)  
0819 32 78 fb			ld (debug_mark+1),a  
081c 3a 26 08			ld a, (.dmark+2)  
081f 32 79 fb			ld (debug_mark+2),a  
0822 18 03			jr .pastdmark  
0824 ..			.dmark: db "SCb"  
0827 f1			.pastdmark: pop af  
0828			endm  
# End of macro DMARK
0828					;push af 
0828					;ld a, 'b' 
0828					;ld (debug_mark),a 
0828					;pop af 
0828					CALLMONITOR 
0828 cd 97 16			call break_point_state  
082b				endm  
# End of macro CALLMONITOR
082b				endif 
082b cd 71 03			call storage_write_block 
082e			 
082e 3a 5b f8			ld a, (store_tmpid) 
0831 6f				ld l, a 
0832 26 00			ld h,0 
0834				if DEBUG_STORESE 
0834					DMARK "SCz" 
0834 f5				push af  
0835 3a 49 08			ld a, (.dmark)  
0838 32 77 fb			ld (debug_mark),a  
083b 3a 4a 08			ld a, (.dmark+1)  
083e 32 78 fb			ld (debug_mark+1),a  
0841 3a 4b 08			ld a, (.dmark+2)  
0844 32 79 fb			ld (debug_mark+2),a  
0847 18 03			jr .pastdmark  
0849 ..			.dmark: db "SCz"  
084c f1			.pastdmark: pop af  
084d			endm  
# End of macro DMARK
084d					CALLMONITOR 
084d cd 97 16			call break_point_state  
0850				endm  
# End of macro CALLMONITOR
0850				endif 
0850 c9				ret 
0851				 
0851			 
0851			 
0851			; 
0851			; Read File 
0851			; 
0851			; h - file id to locate 
0851			; l - extent to locate 
0851			; de - pointer to string to read into 
0851			; 
0851			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
0851			storage_read: 
0851 d5				push de 
0852			 
0852			; TODO BUG the above push is it popped before the RET Z? 
0852			 
0852			; TODO how to handle multiple part blocks 
0852			 
0852				; locate file extent to read 
0852			 
0852 5c				ld e, h 
0853 55				ld d, l 
0854 21 40 00			ld hl, STORE_BLOCK_PHY 
0857				if DEBUG_STORESE 
0857					DMARK "SRE" 
0857 f5				push af  
0858 3a 6c 08			ld a, (.dmark)  
085b 32 77 fb			ld (debug_mark),a  
085e 3a 6d 08			ld a, (.dmark+1)  
0861 32 78 fb			ld (debug_mark+1),a  
0864 3a 6e 08			ld a, (.dmark+2)  
0867 32 79 fb			ld (debug_mark+2),a  
086a 18 03			jr .pastdmark  
086c ..			.dmark: db "SRE"  
086f f1			.pastdmark: pop af  
0870			endm  
# End of macro DMARK
0870					CALLMONITOR 
0870 cd 97 16			call break_point_state  
0873				endm  
# End of macro CALLMONITOR
0873				endif 
0873 cd 2d 06			call storage_findnextid 
0876			 
0876				if DEBUG_STORESE 
0876					DMARK "SRf" 
0876 f5				push af  
0877 3a 8b 08			ld a, (.dmark)  
087a 32 77 fb			ld (debug_mark),a  
087d 3a 8c 08			ld a, (.dmark+1)  
0880 32 78 fb			ld (debug_mark+1),a  
0883 3a 8d 08			ld a, (.dmark+2)  
0886 32 79 fb			ld (debug_mark+2),a  
0889 18 03			jr .pastdmark  
088b ..			.dmark: db "SRf"  
088e f1			.pastdmark: pop af  
088f			endm  
# End of macro DMARK
088f					CALLMONITOR 
088f cd 97 16			call break_point_state  
0892				endm  
# End of macro CALLMONITOR
0892				endif 
0892 cd 32 0d			call ishlzero 
0895			;	ld a, l 
0895			;	add h 
0895			;	cp 0 
0895 c8				ret z			; block not found so EOF 
0896			 
0896				; hl contains page number to load 
0896 d1				pop de   ; get storage 
0897 d5				push de 
0898				if DEBUG_STORESE 
0898					DMARK "SRg" 
0898 f5				push af  
0899 3a ad 08			ld a, (.dmark)  
089c 32 77 fb			ld (debug_mark),a  
089f 3a ae 08			ld a, (.dmark+1)  
08a2 32 78 fb			ld (debug_mark+1),a  
08a5 3a af 08			ld a, (.dmark+2)  
08a8 32 79 fb			ld (debug_mark+2),a  
08ab 18 03			jr .pastdmark  
08ad ..			.dmark: db "SRg"  
08b0 f1			.pastdmark: pop af  
08b1			endm  
# End of macro DMARK
08b1					CALLMONITOR 
08b1 cd 97 16			call break_point_state  
08b4				endm  
# End of macro CALLMONITOR
08b4				endif 
08b4 cd 0c 03			call storage_read_block 
08b7			 
08b7			 
08b7			; TODO if block has no zeros then need to read next block  
08b7			 
08b7			 
08b7					 
08b7 e1				pop hl 		 ; return start of data to show as not EOF 
08b8 23				inc hl   ; past file id 
08b9 23				inc hl   ; past ext 
08ba				if DEBUG_STORESE 
08ba					DMARK "SRe" 
08ba f5				push af  
08bb 3a cf 08			ld a, (.dmark)  
08be 32 77 fb			ld (debug_mark),a  
08c1 3a d0 08			ld a, (.dmark+1)  
08c4 32 78 fb			ld (debug_mark+1),a  
08c7 3a d1 08			ld a, (.dmark+2)  
08ca 32 79 fb			ld (debug_mark+2),a  
08cd 18 03			jr .pastdmark  
08cf ..			.dmark: db "SRe"  
08d2 f1			.pastdmark: pop af  
08d3			endm  
# End of macro DMARK
08d3					CALLMONITOR 
08d3 cd 97 16			call break_point_state  
08d6				endm  
# End of macro CALLMONITOR
08d6				endif 
08d6 c9					ret 
08d7			 
08d7			 
08d7			 
08d7			; 
08d7			; Append File 
08d7			; 
08d7			; hl - file id to locate 
08d7			; de - pointer to (multi block) string to write 
08d7			 
08d7			 
08d7			storage_append: 
08d7				; hl -  file id to append to 
08d7				; de - string to append 
08d7			 
08d7 d5				push de 
08d8				 
08d8				if DEBUG_STORESE 
08d8					DMARK "AP1" 
08d8 f5				push af  
08d9 3a ed 08			ld a, (.dmark)  
08dc 32 77 fb			ld (debug_mark),a  
08df 3a ee 08			ld a, (.dmark+1)  
08e2 32 78 fb			ld (debug_mark+1),a  
08e5 3a ef 08			ld a, (.dmark+2)  
08e8 32 79 fb			ld (debug_mark+2),a  
08eb 18 03			jr .pastdmark  
08ed ..			.dmark: db "AP1"  
08f0 f1			.pastdmark: pop af  
08f1			endm  
# End of macro DMARK
08f1					CALLMONITOR 
08f1 cd 97 16			call break_point_state  
08f4				endm  
# End of macro CALLMONITOR
08f4				endif 
08f4			 
08f4 7d				ld a, l 
08f5 32 5b f8			ld (store_tmpid), a 
08f8			 
08f8				; get file header  
08f8			 
08f8 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
08fa 3a 5b f8			ld a, (store_tmpid) 
08fd 5f				ld e, a 
08fe			 
08fe 21 40 00				ld hl, STORE_BLOCK_PHY 
0901 cd 2d 06				call storage_findnextid 
0904			 
0904 22 4c f8			ld (store_tmppageid), hl 
0907			 
0907				; TODO handle file id not found 
0907			 
0907				if DEBUG_STORESE 
0907					DMARK "AP2" 
0907 f5				push af  
0908 3a 1c 09			ld a, (.dmark)  
090b 32 77 fb			ld (debug_mark),a  
090e 3a 1d 09			ld a, (.dmark+1)  
0911 32 78 fb			ld (debug_mark+1),a  
0914 3a 1e 09			ld a, (.dmark+2)  
0917 32 79 fb			ld (debug_mark+2),a  
091a 18 03			jr .pastdmark  
091c ..			.dmark: db "AP2"  
091f f1			.pastdmark: pop af  
0920			endm  
# End of macro DMARK
0920					CALLMONITOR 
0920 cd 97 16			call break_point_state  
0923				endm  
# End of macro CALLMONITOR
0923				endif 
0923			 
0923				; update file extent count 
0923			 
0923 11 62 f8			ld de, store_page 
0926			 
0926 cd 0c 03			call storage_read_block 
0929			 
0929				if DEBUG_STORESE 
0929					DMARK "AP3" 
0929 f5				push af  
092a 3a 3e 09			ld a, (.dmark)  
092d 32 77 fb			ld (debug_mark),a  
0930 3a 3f 09			ld a, (.dmark+1)  
0933 32 78 fb			ld (debug_mark+1),a  
0936 3a 40 09			ld a, (.dmark+2)  
0939 32 79 fb			ld (debug_mark+2),a  
093c 18 03			jr .pastdmark  
093e ..			.dmark: db "AP3"  
0941 f1			.pastdmark: pop af  
0942			endm  
# End of macro DMARK
0942					CALLMONITOR 
0942 cd 97 16			call break_point_state  
0945				endm  
# End of macro CALLMONITOR
0945				endif 
0945			;	ld (store_tmppageid), hl 
0945			 
0945 3a 64 f8			ld a, (store_page+2) 
0948 3c				inc a 
0949 32 64 f8			ld (store_page+2), a 
094c 32 5a f8			ld (store_tmpext), a 
094f				 
094f				if DEBUG_STORESE 
094f					DMARK "AP3" 
094f f5				push af  
0950 3a 64 09			ld a, (.dmark)  
0953 32 77 fb			ld (debug_mark),a  
0956 3a 65 09			ld a, (.dmark+1)  
0959 32 78 fb			ld (debug_mark+1),a  
095c 3a 66 09			ld a, (.dmark+2)  
095f 32 79 fb			ld (debug_mark+2),a  
0962 18 03			jr .pastdmark  
0964 ..			.dmark: db "AP3"  
0967 f1			.pastdmark: pop af  
0968			endm  
# End of macro DMARK
0968					CALLMONITOR 
0968 cd 97 16			call break_point_state  
096b				endm  
# End of macro CALLMONITOR
096b				endif 
096b 2a 4c f8			ld hl, (store_tmppageid) 
096e 11 62 f8			ld de, store_page 
0971 cd 71 03			call storage_write_block 
0974			 
0974				; find free block 
0974			 
0974 11 00 00			ld de, 0			 ; file extent to locate 
0977			 
0977 21 40 00				ld hl, STORE_BLOCK_PHY 
097a cd 2d 06				call storage_findnextid 
097d			 
097d					; TODO handle no space left 
097d					 
097d 22 4c f8				ld (store_tmppageid), hl 
0980			 
0980				if DEBUG_STORESE 
0980					DMARK "AP4" 
0980 f5				push af  
0981 3a 95 09			ld a, (.dmark)  
0984 32 77 fb			ld (debug_mark),a  
0987 3a 96 09			ld a, (.dmark+1)  
098a 32 78 fb			ld (debug_mark+1),a  
098d 3a 97 09			ld a, (.dmark+2)  
0990 32 79 fb			ld (debug_mark+2),a  
0993 18 03			jr .pastdmark  
0995 ..			.dmark: db "AP4"  
0998 f1			.pastdmark: pop af  
0999			endm  
# End of macro DMARK
0999					CALLMONITOR 
0999 cd 97 16			call break_point_state  
099c				endm  
# End of macro CALLMONITOR
099c				endif 
099c					; init the buffer with zeros so we can id if the buffer is full or not 
099c			 
099c e5					push hl 
099d c5					push bc 
099e			 
099e 21 62 f8				ld hl, store_page 
09a1 06 40				ld b, STORE_BLOCK_PHY 
09a3 3e 00				ld a, 0 
09a5 77			.zeroblock:	ld (hl), a 
09a6 23					inc hl 
09a7 10 fc				djnz .zeroblock 
09a9			 
09a9 c1					pop bc 
09aa e1					pop hl 
09ab			 
09ab					; construct block 
09ab			 
09ab 3a 5b f8				ld a, (store_tmpid) 
09ae 32 62 f8				ld (store_page), a   ; file id 
09b1 3a 5a f8				ld a, (store_tmpext)   ; extent for this block 
09b4 32 63 f8				ld (store_page+1), a 
09b7			 
09b7 e1					pop hl    ; get string to write 
09b8 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
09ba 11 64 f8				ld de, store_page+2 
09bd			 
09bd				if DEBUG_STORESE 
09bd					DMARK "AP5" 
09bd f5				push af  
09be 3a d2 09			ld a, (.dmark)  
09c1 32 77 fb			ld (debug_mark),a  
09c4 3a d3 09			ld a, (.dmark+1)  
09c7 32 78 fb			ld (debug_mark+1),a  
09ca 3a d4 09			ld a, (.dmark+2)  
09cd 32 79 fb			ld (debug_mark+2),a  
09d0 18 03			jr .pastdmark  
09d2 ..			.dmark: db "AP5"  
09d5 f1			.pastdmark: pop af  
09d6			endm  
# End of macro DMARK
09d6					CALLMONITOR 
09d6 cd 97 16			call break_point_state  
09d9				endm  
# End of macro CALLMONITOR
09d9				endif 
09d9			 
09d9			 
09d9			 
09d9					; fill buffer with data until end of string or full block 
09d9			 
09d9 7e			.appd:		ld a, (hl) 
09da 12					ld (de), a 
09db fe 00				cp 0 
09dd 28 04				jr z, .appdone 
09df 23					inc hl 
09e0 13					inc de 
09e1 10 f6				djnz .appd 
09e3			 
09e3 e5			.appdone:	push hl		 	; save current source in case we need to go around again 
09e4 f5					push af   		; save last byte dumped 
09e5			 
09e5			 
09e5 2a 4c f8			ld hl, (store_tmppageid) 
09e8 11 62 f8			ld de, store_page 
09eb				if DEBUG_STORESE 
09eb					DMARK "AP6" 
09eb f5				push af  
09ec 3a 00 0a			ld a, (.dmark)  
09ef 32 77 fb			ld (debug_mark),a  
09f2 3a 01 0a			ld a, (.dmark+1)  
09f5 32 78 fb			ld (debug_mark+1),a  
09f8 3a 02 0a			ld a, (.dmark+2)  
09fb 32 79 fb			ld (debug_mark+2),a  
09fe 18 03			jr .pastdmark  
0a00 ..			.dmark: db "AP6"  
0a03 f1			.pastdmark: pop af  
0a04			endm  
# End of macro DMARK
0a04					CALLMONITOR 
0a04 cd 97 16			call break_point_state  
0a07				endm  
# End of macro CALLMONITOR
0a07				endif 
0a07 cd 71 03				call storage_write_block 
0a0a			 
0a0a			 
0a0a				; was that a full block of data written? 
0a0a				; any more to write out? 
0a0a			 
0a0a				; if yes then set vars and jump to start of function again 
0a0a			 
0a0a f1					pop af 
0a0b d1					pop de 
0a0c			 
0a0c fe 00				cp 0		 ; no, string was fully written 
0a0e c8					ret z 
0a0f			 
0a0f					; setup vars for next cycle 
0a0f			 
0a0f 3a 5b f8				ld a, (store_tmpid) 
0a12 6f					ld l, a 
0a13 26 00				ld h, 0 
0a15			 
0a15 c3 d7 08			 	jp storage_append	 ; yes, need to write out some more 
0a18			 
0a18			 
0a18			 
0a18			 
0a18			 
0a18			 
0a18			 
0a18			if DEBUG_STORECF 
0a18			storageput:	 
0a18					ret 
0a18			storageread: 
0a18					ld hl, store_page 
0a18					ld b, 200 
0a18					ld a,0 
0a18			.src:		ld (hl),a 
0a18					inc hl 
0a18					djnz .src 
0a18					 
0a18			 
0a18					ld de, 0 
0a18					ld bc, 1 
0a18					ld hl, store_page 
0a18					call cfRead 
0a18			 
0a18				call cfGetError 
0a18				ld hl,scratch 
0a18				call hexout 
0a18				ld hl, scratch+2 
0a18				ld a, 0 
0a18				ld (hl),a 
0a18				ld de, scratch 
0a18				ld a,display_row_1 
0a18				call str_at_display 
0a18				call update_display 
0a18			 
0a18					ld hl, store_page 
0a18					ld (os_cur_ptr),hl 
0a18			 
0a18					ret 
0a18			endif 
0a18			 
0a18			 
0a18			; Clear out the main buffer store (used to remove junk before writing a new block) 
0a18			 
0a18			storage_clear_page: 
0a18 e5				push hl 
0a19 d5				push de 
0a1a c5				push bc 
0a1b 21 62 f8			ld hl, store_page 
0a1e 3e 00			ld a, 0 
0a20 77				ld (hl), a 
0a21			 
0a21 11 63 f8			ld de, store_page+1 
0a24 01 40 00			ld bc, STORE_BLOCK_PHY 
0a27			 
0a27 ed b0			ldir 
0a29				 
0a29 c1				pop bc 
0a2a d1				pop de 
0a2b e1				pop hl 
0a2c c9				ret 
0a2d			 
0a2d			; eof 
# End of file firmware_storage.asm
0a2d			  
0a2d			; support routines for above hardware abstraction layer  
0a2d			  
0a2d			include "firmware_general.asm"        ; general support functions  
0a2d			 
0a2d			; word look up 
0a2d			 
0a2d			; in 
0a2d			; a is the index 
0a2d			; hl is pointer start of array 
0a2d			; 
0a2d			; returns 
0a2d			; hl to the word 
0a2d			; 
0a2d			 
0a2d			table_lookup:  
0a2d d5					push de 
0a2e eb					ex de, hl 
0a2f			 
0a2f 6f					ld l, a 
0a30 26 00				ld h, 0 
0a32 29					add hl, hl 
0a33 19					add hl, de 
0a34 7e					ld a, (hl) 
0a35 23					inc hl 
0a36 66					ld h,(hl) 
0a37 6f					ld l, a 
0a38			 
0a38 d1					pop de 
0a39 c9					ret 
0a3a			 
0a3a			; Delay loops 
0a3a			 
0a3a			 
0a3a			 
0a3a			aDelayInMS: 
0a3a c5				push bc 
0a3b 47				ld b,a 
0a3c			msdelay: 
0a3c c5				push bc 
0a3d				 
0a3d			 
0a3d 01 41 00			ld bc,041h 
0a40 cd 58 0a			call delayloop 
0a43 c1				pop bc 
0a44 05				dec b 
0a45 20 f5			jr nz,msdelay 
0a47			 
0a47			;if CPU_CLOCK_8MHZ 
0a47			;msdelay8: 
0a47			;	push bc 
0a47			;	 
0a47			; 
0a47			;	ld bc,041h 
0a47			;	call delayloop 
0a47			;	pop bc 
0a47			;	dec b 
0a47			;	jr nz,msdelay8 
0a47			;endif 
0a47			 
0a47			 
0a47 c1				pop bc 
0a48 c9				ret 
0a49			 
0a49			 
0a49			delay250ms: 
0a49				;push de 
0a49 01 00 40			ld bc, 04000h 
0a4c c3 58 0a			jp delayloop 
0a4f			delay500ms: 
0a4f				;push de 
0a4f 01 00 80			ld bc, 08000h 
0a52 c3 58 0a			jp delayloop 
0a55			delay1s: 
0a55				;push bc 
0a55			   ; Clobbers A, d and e 
0a55 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0a58			delayloop: 
0a58 c5			    push bc 
0a59			 
0a59			if BASE_CPM 
0a59				ld bc, CPM_DELAY_TUNE 
0a59			.cpmloop: 
0a59				push bc 
0a59			 
0a59			endif 
0a59			 
0a59			 
0a59			 
0a59			delayloopi: 
0a59			;	push bc 
0a59			;.dl: 
0a59 cb 47		    bit     0,a    	; 8 
0a5b cb 47		    bit     0,a    	; 8 
0a5d cb 47		    bit     0,a    	; 8 
0a5f e6 ff		    and     255  	; 7 
0a61 0b			    dec     bc      	; 6 
0a62 79			    ld      a,c     	; 4 
0a63 b0			    or      b     	; 4 
0a64 c2 59 0a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0a67			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0a67				;pop de 
0a67			;pop bc 
0a67			 
0a67			if BASE_CPM 
0a67				pop bc 
0a67				 
0a67			    dec     bc      	; 6 
0a67			    ld      a,c     	; 4 
0a67			    or      b     	; 4 
0a67			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0a67				 
0a67			 
0a67			endif 
0a67			;if CPU_CLOCK_8MHZ 
0a67			;    pop bc 
0a67			;    push bc 
0a67			;.dl8: 
0a67			;    bit     0,a    	; 8 
0a67			;    bit     0,a    	; 8 
0a67			;    bit     0,a    	; 8 
0a67			;    and     255  	; 7 
0a67			;    dec     bc      	; 6 
0a67			;    ld      a,c     	; 4 
0a67			;    or      b     	; 4 
0a67			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0a67			;endif 
0a67			 
0a67			;if CPU_CLOCK_10MHZ 
0a67			;    pop bc 
0a67			;    push bc 
0a67			;.dl8: 
0a67			;    bit     0,a    	; 8 
0a67			;    bit     0,a    	; 8 
0a67			;    bit     0,a    	; 8 
0a67			;    and     255  	; 7 
0a67			;    dec     bc      	; 6 
0a67			;    ld      a,c     	; 4 
0a67			;    or      b     	; 4 
0a67			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0a67			;endif 
0a67 c1			    pop bc 
0a68			 
0a68 c9				ret 
0a69			 
0a69			 
0a69			 
0a69			; eof 
# End of file firmware_general.asm
0a69			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0a69			; display routines that use the physical hardware abstraction layer 
0a69			 
0a69			 
0a69			; information window 
0a69			 
0a69			; pass hl with 1st string to display 
0a69			; pass de with 2nd string to display 
0a69			 
0a69			info_panel: 
0a69 e5				push hl 
0a6a			 
0a6a 2a d8 f8			ld hl, (display_fb_active) 
0a6d e5				push hl    ; future de destination 
0a6e 21 bd fa				ld hl, display_fb0 
0a71 22 d8 f8				ld (display_fb_active), hl 
0a74			 
0a74 cd d5 0a			call clear_display 
0a77			 
0a77			 
0a77 3e 55			ld a, display_row_3 + 5 
0a79 cd e8 0a			call str_at_display 
0a7c			 
0a7c e1				pop hl 
0a7d d1				pop de 
0a7e			 
0a7e e5				push hl 
0a7f			 
0a7f			 
0a7f 3e 2d			ld a, display_row_2 + 5 
0a81 cd e8 0a			call str_at_display 
0a84			 
0a84			 
0a84 cd f8 0a			call update_display 
0a87 cd 9c 1b			call next_page_prompt 
0a8a cd d5 0a			call clear_display 
0a8d			 
0a8d				 
0a8d 21 1c fa				ld hl, display_fb1 
0a90 22 d8 f8				ld (display_fb_active), hl 
0a93 cd f8 0a			call update_display 
0a96			 
0a96			 
0a96 c9				ret 
0a97			 
0a97			 
0a97			 
0a97			 
0a97			; TODO windowing? 
0a97			 
0a97			; TODO scroll line up 
0a97			 
0a97			scroll_up: 
0a97			 
0a97 e5				push hl 
0a98 d5				push de 
0a99 c5				push bc 
0a9a			 
0a9a				; get frame buffer  
0a9a			 
0a9a 2a d8 f8			ld hl, (display_fb_active) 
0a9d e5				push hl    ; future de destination 
0a9e			 
0a9e 11 28 00			ld  de, display_cols 
0aa1 19				add hl, de 
0aa2			 
0aa2 d1				pop de 
0aa3			 
0aa3				;ex de, hl 
0aa3 01 9f 00			ld bc, display_fb_len -1  
0aa6			;if DEBUG_FORTH_WORDS 
0aa6			;	DMARK "SCL" 
0aa6			;	CALLMONITOR 
0aa6			;endif	 
0aa6 ed b0			ldir 
0aa8			 
0aa8				; wipe bottom row 
0aa8			 
0aa8			 
0aa8 2a d8 f8			ld hl, (display_fb_active) 
0aab 11 a0 00			ld de, display_cols*display_rows 
0aae 19				add hl, de 
0aaf 06 28			ld b, display_cols 
0ab1 3e 20			ld a, ' ' 
0ab3			.scwipe: 
0ab3 77				ld (hl), a 
0ab4 2b				dec hl 
0ab5 10 fc			djnz .scwipe 
0ab7			 
0ab7				;pop hl 
0ab7			 
0ab7 c1				pop bc 
0ab8 d1				pop de 
0ab9 e1				pop hl 
0aba			 
0aba c9				ret 
0abb			 
0abb			 
0abb			;scroll_upo: 
0abb			;	ld de, display_row_1 
0abb			 ;	ld hl, display_row_2 
0abb			;	ld bc, display_cols 
0abb			;	ldir 
0abb			;	ld de, display_row_2 
0abb			 ;	ld hl, display_row_3 
0abb			;	ld bc, display_cols 
0abb			;	ldir 
0abb			;	ld de, display_row_3 
0abb			 ;	ld hl, display_row_4 
0abb			;	ld bc, display_cols 
0abb			;	ldir 
0abb			 
0abb			; TODO clear row 4 
0abb			 
0abb			;	ret 
0abb			 
0abb				 
0abb			scroll_down: 
0abb			 
0abb e5				push hl 
0abc d5				push de 
0abd c5				push bc 
0abe			 
0abe				; get frame buffer  
0abe			 
0abe 2a d8 f8			ld hl, (display_fb_active) 
0ac1			 
0ac1 11 9f 00			ld de, display_fb_len - 1 
0ac4 19				add hl, de 
0ac5			 
0ac5 e5			push hl    ; future de destination 
0ac6			 
0ac6 11 28 00			ld  de, display_cols 
0ac9 ed 52			sbc hl, de 
0acb			 
0acb			 
0acb d1				pop de 
0acc			 
0acc			;	ex de, hl 
0acc 01 9f 00			ld bc, display_fb_len -1  
0acf			 
0acf			 
0acf				 
0acf			 
0acf ed b0			ldir 
0ad1			 
0ad1				; wipe bottom row 
0ad1			 
0ad1			 
0ad1			;	ld hl, (display_fb_active) 
0ad1			;;	ld de, display_cols*display_rows 
0ad1			;;	add hl, de 
0ad1			;	ld b, display_cols 
0ad1			;	ld a, ' ' 
0ad1			;.scwiped: 
0ad1			;	ld (hl), a 
0ad1			;	dec hl 
0ad1			;	djnz .scwiped 
0ad1			 
0ad1				;pop hl 
0ad1			 
0ad1 c1				pop bc 
0ad2 d1				pop de 
0ad3 e1				pop hl 
0ad4			 
0ad4 c9				ret 
0ad5			;scroll_down: 
0ad5			;	ld de, display_row_4 
0ad5			;	ld hl, display_row_3 
0ad5			;	ld bc, display_cols 
0ad5			;	ldir 
0ad5			;	ld de, display_row_3 
0ad5			; 	ld hl, display_row_2 
0ad5			;	ld bc, display_cols 
0ad5			;	ldir 
0ad5			;	ld de, display_row_2 
0ad5			;	ld hl, display_row_1 
0ad5			;	ld bc, display_cols 
0ad5			;	ldir 
0ad5			;;; TODO clear row 1 
0ad5			;	ret 
0ad5			 
0ad5			 
0ad5			 
0ad5			 
0ad5			 
0ad5			; clear active frame buffer 
0ad5			 
0ad5			clear_display: 
0ad5 3e 20			ld a, ' ' 
0ad7 c3 da 0a			jp fill_display 
0ada			 
0ada			; fill active frame buffer with a char in A 
0ada			 
0ada			fill_display: 
0ada 06 a0			ld b,display_fb_len 
0adc 2a d8 f8			ld hl, (display_fb_active) 
0adf 77			.fd1:	ld (hl),a 
0ae0 23				inc hl 
0ae1 10 fc			djnz .fd1 
0ae3 23				inc hl 
0ae4 3e 00			ld a,0 
0ae6 77				ld (hl),a 
0ae7			 
0ae7			 
0ae7 c9				ret 
0ae8			; Write string (DE) at pos (A) to active frame buffer 
0ae8			 
0ae8 2a d8 f8		str_at_display:    ld hl,(display_fb_active) 
0aeb 06 00					ld b,0 
0aed 4f					ld c,a 
0aee 09					add hl,bc 
0aef 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0af0 b7			            OR   A              ;Null terminator? 
0af1 c8			            RET  Z              ;Yes, so finished 
0af2 77					ld (hl),a 
0af3 23				inc hl 
0af4 13			            INC  DE             ;Point to next character 
0af5 18 f8		            JR   .sad1     ;Repeat 
0af7 c9					ret 
0af8			 
0af8			; using current frame buffer write to physical display 
0af8			 
0af8			update_display: 
0af8 e5				push hl 
0af9 2a d8 f8			ld hl, (display_fb_active) 
0afc cd 07 65			call write_display 
0aff e1				pop hl 
0b00 c9				ret 
0b01			 
0b01			; TODO scrolling 
0b01			 
0b01			 
0b01			; move cursor right one char 
0b01			cursor_right: 
0b01			 
0b01				; TODO shift right 
0b01				; TODO if beyond max col 
0b01				; TODO       cursor_next_line 
0b01			 
0b01 c9				ret 
0b02			 
0b02			 
0b02			cursor_next_line: 
0b02				; TODO first char 
0b02				; TODO line down 
0b02				; TODO if past last row 
0b02				; TODO    scroll up 
0b02			 
0b02 c9				ret 
0b03			 
0b03			cursor_left: 
0b03				; TODO shift left 
0b03				; TODO if beyond left  
0b03				; TODO     cursor prev line 
0b03				 
0b03 c9				ret 
0b04			 
0b04			cursor_prev_line: 
0b04				; TODO last char 
0b04				; TODO line up 
0b04				; TODO if past first row 
0b04				; TODO   scroll down 
0b04			 
0b04 c9				ret 
0b05			 
0b05			 
0b05			cout: 
0b05				; A - char 
0b05 c9				ret 
0b06			 
0b06			 
0b06			; Display a menu and allow item selection (optional toggle items) 
0b06			; 
0b06			; format: 
0b06			; hl pointer to word array with zero term for items 
0b06			; e.g.    db item1 
0b06			;         db .... 
0b06			;         db 0 
0b06			; 
0b06			; a = starting menu item  
0b06			; 
0b06			; de = pointer item toggle array   (todo) 
0b06			; 
0b06			; returns item selected in a 1-... 
0b06			; returns 0 if back button pressed 
0b06			; 
0b06			; NOTE: Uses system frame buffer to display 
0b06			; 
0b06			; LEFT, Q = go back 
0b06			; RIGHT, SPACE, CR = select 
0b06			; UP, A - Up 
0b06			; DOWN, Z - Down 
0b06			 
0b06			 
0b06			 
0b06			 
0b06			 
0b06			menu: 
0b06			 
0b06					; keep array pointer 
0b06			 
0b06 22 60 f8				ld (store_tmp1), hl 
0b09 32 5e f8				ld (store_tmp2), a 
0b0c			 
0b0c					; check for key bounce 
0b0c			 
0b0c			if BASE_KEV 
0b0c			 
0b0c cd 52 68		.mbounce:	call cin 
0b0f fe 00				cp 0 
0b11 20 f9				jr nz, .mbounce 
0b13			endif 
0b13					; for ease use ex 
0b13			 
0b13					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0b13 21 bd fa				ld hl, display_fb0 
0b16 22 d8 f8				ld (display_fb_active), hl 
0b19			 
0b19 cd d5 0a		.mloop:		call clear_display 
0b1c cd f8 0a				call update_display 
0b1f			 
0b1f					; draw selection id '>' at 1 
0b1f			 
0b1f					; init start of list display 
0b1f			 
0b1f 3e 05				ld a, 5 
0b21 32 5c f8				ld (store_tmp3), a   ; display row count 
0b24 3a 5e f8				ld a,( store_tmp2) 
0b27 32 5f f8				ld (store_tmp2+1), a   ; display item count 
0b2a			 
0b2a					 
0b2a			.mitem:	 
0b2a			 
0b2a			 
0b2a 3a 5f f8				ld a,(store_tmp2+1) 
0b2d 6f					ld l, a 
0b2e 26 00				ld h, 0 
0b30 29					add hl, hl 
0b31 ed 5b 60 f8			ld de, (store_tmp1) 
0b35 19					add hl, de 
0b36 7e					ld a, (hl) 
0b37 23					inc hl 
0b38 66					ld h,(hl) 
0b39 6f					ld l, a 
0b3a			 
0b3a cd 32 0d				call ishlzero 
0b3d 28 1a				jr z, .mdone 
0b3f			 
0b3f eb					ex de, hl 
0b40 3a 5c f8				ld a, (store_tmp3) 
0b43 cd e8 0a				call str_at_display 
0b46					 
0b46			 
0b46					; next item 
0b46 3a 5f f8				ld a, (store_tmp2+1) 
0b49 3c					inc a 
0b4a 32 5f f8				ld (store_tmp2+1), a   ; display item count 
0b4d			 
0b4d			 		; next row 
0b4d			 
0b4d 3a 5c f8				ld a, (store_tmp3) 
0b50 c6 28				add display_cols 
0b52 32 5c f8				ld (store_tmp3), a 
0b55			 
0b55					; at end of screen? 
0b55			 
0b55 fe 10				cp display_rows*4 
0b57 20 d1				jr nz, .mitem 
0b59			 
0b59			 
0b59			.mdone: 
0b59 cd 32 0d				call ishlzero 
0b5c 28 08				jr z, .nodn 
0b5e			 
0b5e 3e 78				ld a, display_row_4 
0b60 11 df 0b				ld de, .mdown 
0b63 cd e8 0a				call str_at_display 
0b66			 
0b66					; draw options to fill the screens with active item on line 1 
0b66					; if current option is 2 or more then display ^ in top 
0b66			 
0b66 3a 5e f8		.nodn:		ld a, (store_tmp2) 
0b69 fe 00				cp 0 
0b6b 28 08				jr z, .noup 
0b6d			 
0b6d 3e 00				ld a, 0 
0b6f 11 dd 0b				ld de, .mup 
0b72 cd e8 0a				call str_at_display 
0b75			 
0b75 3e 02		.noup:		ld a, 2 
0b77 11 db 0b				ld de, .msel 
0b7a cd e8 0a				call str_at_display 
0b7d			 
0b7d					; if current option + 1 is not null then display V in bottom 
0b7d					; get key 
0b7d cd f8 0a				call update_display 
0b80			 
0b80			 
0b80					; handle key 
0b80			 
0b80 cd 41 68				call cin_wait 
0b83			 
0b83 fe 05				cp KEY_UP 
0b85 28 2b				jr z, .mgoup 
0b87 fe 61				cp 'a' 
0b89 28 27				jr z, .mgoup 
0b8b fe 0a				cp KEY_DOWN 
0b8d 28 32				jr z, .mgod 
0b8f fe 7a				cp 'z' 
0b91 28 2e				jr z, .mgod 
0b93 fe 20				cp ' ' 
0b95 28 34				jr z, .goend 
0b97 fe 0c				cp KEY_RIGHT 
0b99 28 30				jr z, .goend 
0b9b fe 0d				cp KEY_CR 
0b9d 28 2c				jr z, .goend 
0b9f fe 71				cp 'q' 
0ba1 28 0b				jr z, .goback 
0ba3			 
0ba3 fe 0b				cp KEY_LEFT 
0ba5 28 07				jr z, .goback 
0ba7 fe 08				cp KEY_BS 
0ba9 28 03				jr z, .goback 
0bab c3 19 0b				jp .mloop 
0bae			 
0bae			.goback: 
0bae 3e 00			ld a, 0 
0bb0 18 1d			jr .goend2 
0bb2			 
0bb2				; move up one 
0bb2			.mgoup: 
0bb2 3a 5e f8				ld a, (store_tmp2) 
0bb5 fe 00				cp 0 
0bb7 ca 19 0b				jp z, .mloop 
0bba 3d					dec a 
0bbb 32 5e f8				ld (store_tmp2), a 
0bbe c3 19 0b				jp .mloop 
0bc1			 
0bc1				; move down one 
0bc1			.mgod: 
0bc1 3a 5e f8				ld a, (store_tmp2) 
0bc4 3c					inc a 
0bc5 32 5e f8				ld (store_tmp2), a 
0bc8 c3 19 0b				jp .mloop 
0bcb			 
0bcb			 
0bcb			.goend: 
0bcb					; get selected item number 
0bcb			 
0bcb 3a 5e f8				ld a, (store_tmp2) 
0bce 3c					inc a 
0bcf			 
0bcf			.goend2: 
0bcf f5					push af 
0bd0			 
0bd0					; restore active fb 
0bd0					; TODO BUG assumes fb1 
0bd0			 
0bd0 21 1c fa				ld hl, display_fb1 
0bd3 22 d8 f8				ld (display_fb_active), hl 
0bd6			 
0bd6					; restore main regs 
0bd6			 
0bd6			 
0bd6 cd f8 0a				call update_display 
0bd9			 
0bd9 f1					pop af 
0bda			 
0bda c9				ret 
0bdb			 
0bdb .. 00		.msel:   db ">",0 
0bdd .. 00		.mup:   db "^",0 
0bdf .. 00		.mdown:   db "v",0 
0be1			 
0be1			 
0be1			; eof 
0be1			 
# End of file firmware_display.asm
0be1			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0be1			; random number generators 
0be1			 
0be1			 
0be1			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0be1			 
0be1			 
0be1			;-----> Generate a random number 
0be1			; output a=answer 0<=a<=255 
0be1			; all registers are preserved except: af 
0be1			random: 
0be1 e5			        push    hl 
0be2 d5			        push    de 
0be3 2a ba f8		        ld      hl,(randData) 
0be6 ed 5f		        ld      a,r 
0be8 57			        ld      d,a 
0be9 5e			        ld      e,(hl) 
0bea 19			        add     hl,de 
0beb 85			        add     a,l 
0bec ac			        xor     h 
0bed 22 ba f8		        ld      (randData),hl 
0bf0 d1			        pop     de 
0bf1 e1			        pop     hl 
0bf2 c9			        ret 
0bf3			 
0bf3			 
0bf3			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0bf3			 
0bf3			 
0bf3			 
0bf3			;------LFSR------ 
0bf3			;James Montelongo 
0bf3			;optimized by Spencer Putt 
0bf3			;out: 
0bf3			; a = 8 bit random number 
0bf3			RandLFSR: 
0bf3 21 c0 f8		        ld hl,LFSRSeed+4 
0bf6 5e			        ld e,(hl) 
0bf7 23			        inc hl 
0bf8 56			        ld d,(hl) 
0bf9 23			        inc hl 
0bfa 4e			        ld c,(hl) 
0bfb 23			        inc hl 
0bfc 7e			        ld a,(hl) 
0bfd 47			        ld b,a 
0bfe cb 13		        rl e  
0c00 cb 12			rl d 
0c02 cb 11		        rl c  
0c04 17				rla 
0c05 cb 13		        rl e  
0c07 cb 12			rl d 
0c09 cb 11		        rl c  
0c0b 17				rla 
0c0c cb 13		        rl e  
0c0e cb 12			rl d 
0c10 cb 11		        rl c  
0c12 17				rla 
0c13 67			        ld h,a 
0c14 cb 13		        rl e  
0c16 cb 12			rl d 
0c18 cb 11		        rl c  
0c1a 17				rla 
0c1b a8			        xor b 
0c1c cb 13		        rl e  
0c1e cb 12			rl d 
0c20 ac			        xor h 
0c21 a9			        xor c 
0c22 aa			        xor d 
0c23 21 c2 f8		        ld hl,LFSRSeed+6 
0c26 11 c3 f8		        ld de,LFSRSeed+7 
0c29 01 07 00		        ld bc,7 
0c2c ed b8		        lddr 
0c2e 12			        ld (de),a 
0c2f c9			        ret 
0c30			 
0c30			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0c30			 
0c30			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0c30			 
0c30			 
0c30			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0c30			 
0c30			prng16: 
0c30			;Inputs: 
0c30			;   (seed1) contains a 16-bit seed value 
0c30			;   (seed2) contains a NON-ZERO 16-bit seed value 
0c30			;Outputs: 
0c30			;   HL is the result 
0c30			;   BC is the result of the LCG, so not that great of quality 
0c30			;   DE is preserved 
0c30			;Destroys: 
0c30			;   AF 
0c30			;cycle: 4,294,901,760 (almost 4.3 billion) 
0c30			;160cc 
0c30			;26 bytes 
0c30 2a b4 f8		    ld hl,(seed1) 
0c33 44			    ld b,h 
0c34 4d			    ld c,l 
0c35 29			    add hl,hl 
0c36 29			    add hl,hl 
0c37 2c			    inc l 
0c38 09			    add hl,bc 
0c39 22 b4 f8		    ld (seed1),hl 
0c3c 2a b2 f8		    ld hl,(seed2) 
0c3f 29			    add hl,hl 
0c40 9f			    sbc a,a 
0c41 e6 2d		    and %00101101 
0c43 ad			    xor l 
0c44 6f			    ld l,a 
0c45 22 b2 f8		    ld (seed2),hl 
0c48 09			    add hl,bc 
0c49 c9			    ret 
0c4a			 
0c4a			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0c4a			 
0c4a			rand32: 
0c4a			;Inputs: 
0c4a			;   (seed1_0) holds the lower 16 bits of the first seed 
0c4a			;   (seed1_1) holds the upper 16 bits of the first seed 
0c4a			;   (seed2_0) holds the lower 16 bits of the second seed 
0c4a			;   (seed2_1) holds the upper 16 bits of the second seed 
0c4a			;   **NOTE: seed2 must be non-zero 
0c4a			;Outputs: 
0c4a			;   HL is the result 
0c4a			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0c4a			;Destroys: 
0c4a			;   AF 
0c4a			;Tested and passes all CAcert tests 
0c4a			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0c4a			;it has a period of 18,446,744,069,414,584,320 
0c4a			;roughly 18.4 quintillion. 
0c4a			;LFSR taps: 0,2,6,7  = 11000101 
0c4a			;291cc 
0c4a			;seed1_0=$+1 
0c4a			;    ld hl,12345 
0c4a			;seed1_1=$+1 
0c4a			;    ld de,6789 
0c4a			;    ld b,h 
0c4a			;    ld c,l 
0c4a			;    add hl,hl \ rl e \ rl d 
0c4a			;    add hl,hl \ rl e \ rl d 
0c4a			;    inc l 
0c4a			;    add hl,bc 
0c4a			;    ld (seed1_0),hl 
0c4a			;    ld hl,(seed1_1) 
0c4a			;    adc hl,de 
0c4a			;    ld (seed1_1),hl 
0c4a			;    ex de,hl 
0c4a			;seed2_0=$+1 
0c4a			;    ld hl,9876 
0c4a			;seed2_1=$+1 
0c4a			;    ld bc,54321 
0c4a			;    add hl,hl \ rl c \ rl b 
0c4a			;    ld (seed2_1),bc 
0c4a			;    sbc a,a 
0c4a			;    and %11000101 
0c4a			;    xor l 
0c4a			;    ld l,a 
0c4a			;    ld (seed2_0),hl 
0c4a			;    ex de,hl 
0c4a			;    add hl,bc 
0c4a			;    ret 
0c4a			; 
0c4a			 
0c4a			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0c4a			; 20 bytes, 86 cycles (excluding ret) 
0c4a			 
0c4a			; returns   hl = pseudorandom number 
0c4a			; corrupts   a 
0c4a			 
0c4a			; generates 16-bit pseudorandom numbers with a period of 65535 
0c4a			; using the xorshift method: 
0c4a			 
0c4a			; hl ^= hl << 7 
0c4a			; hl ^= hl >> 9 
0c4a			; hl ^= hl << 8 
0c4a			 
0c4a			; some alternative shift triplets which also perform well are: 
0c4a			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0c4a			 
0c4a			;  org 32768 
0c4a			 
0c4a			xrnd: 
0c4a 2a b8 f8		  ld hl,(xrandc)       ; seed must not be 0 
0c4d 3e 00		  ld a,0 
0c4f bd			  cp l 
0c50 20 02		  jr nz, .xrnd1 
0c52 2e 01		  ld l, 1 
0c54			.xrnd1: 
0c54			 
0c54 7c			  ld a,h 
0c55 1f			  rra 
0c56 7d			  ld a,l 
0c57 1f			  rra 
0c58 ac			  xor h 
0c59 67			  ld h,a 
0c5a 7d			  ld a,l 
0c5b 1f			  rra 
0c5c 7c			  ld a,h 
0c5d 1f			  rra 
0c5e ad			  xor l 
0c5f 6f			  ld l,a 
0c60 ac			  xor h 
0c61 67			  ld h,a 
0c62			 
0c62 22 b8 f8		  ld (xrandc),hl 
0c65			 
0c65 c9			  ret 
0c66			;  
0c66			 
0c66			 
0c66			;;;; int maths 
0c66			 
0c66			; https://map.grauw.nl/articles/mult_div_shifts.php 
0c66			; Divide 16-bit values (with 16-bit result) 
0c66			; In: Divide BC by divider DE 
0c66			; Out: BC = result, HL = rest 
0c66			; 
0c66			Div16: 
0c66 21 00 00		    ld hl,0 
0c69 78			    ld a,b 
0c6a 06 08		    ld b,8 
0c6c			Div16_Loop1: 
0c6c 17			    rla 
0c6d ed 6a		    adc hl,hl 
0c6f ed 52		    sbc hl,de 
0c71 30 01		    jr nc,Div16_NoAdd1 
0c73 19			    add hl,de 
0c74			Div16_NoAdd1: 
0c74 10 f6		    djnz Div16_Loop1 
0c76 17			    rla 
0c77 2f			    cpl 
0c78 47			    ld b,a 
0c79 79			    ld a,c 
0c7a 48			    ld c,b 
0c7b 06 08		    ld b,8 
0c7d			Div16_Loop2: 
0c7d 17			    rla 
0c7e ed 6a		    adc hl,hl 
0c80 ed 52		    sbc hl,de 
0c82 30 01		    jr nc,Div16_NoAdd2 
0c84 19			    add hl,de 
0c85			Div16_NoAdd2: 
0c85 10 f6		    djnz Div16_Loop2 
0c87 17			    rla 
0c88 2f			    cpl 
0c89 41			    ld b,c 
0c8a 4f			    ld c,a 
0c8b c9			ret 
0c8c			 
0c8c			 
0c8c			;http://z80-heaven.wikidot.com/math 
0c8c			; 
0c8c			;Inputs: 
0c8c			;     DE and A are factors 
0c8c			;Outputs: 
0c8c			;     A is not changed 
0c8c			;     B is 0 
0c8c			;     C is not changed 
0c8c			;     DE is not changed 
0c8c			;     HL is the product 
0c8c			;Time: 
0c8c			;     342+6x 
0c8c			; 
0c8c			Mult16: 
0c8c			 
0c8c 06 08		     ld b,8          ;7           7 
0c8e 21 00 00		     ld hl,0         ;10         10 
0c91 29			       add hl,hl     ;11*8       88 
0c92 07			       rlca          ;4*8        32 
0c93 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0c95 19			         add hl,de   ;--         -- 
0c96 10 f9		       djnz $-5      ;13*7+8     99 
0c98 c9			ret 
0c99			 
0c99			; 
0c99			; Square root of 16-bit value 
0c99			; In:  HL = value 
0c99			; Out:  D = result (rounded down) 
0c99			; 
0c99			;Sqr16: 
0c99			;    ld de,#0040 
0c99			;    ld a,l 
0c99			;    ld l,h 
0c99			;    ld h,d 
0c99			;    or a 
0c99			;    ld b,8 
0c99			;Sqr16_Loop: 
0c99			;    sbc hl,de 
0c99			;    jr nc,Sqr16_Skip 
0c99			;    add hl,de 
0c99			;Sqr16_Skip: 
0c99			;    ccf 
0c99			;    rl d 
0c99			;    add a,a 
0c99			;    adc hl,hl 
0c99			;    add a,a 
0c99			;    adc hl,hl 
0c99			;    djnz Sqr16_Loop 
0c99			;    ret 
0c99			; 
0c99			; 
0c99			; Divide 8-bit values 
0c99			; In: Divide E by divider C 
0c99			; Out: A = result, B = rest 
0c99			; 
0c99			Div8: 
0c99 af			    xor a 
0c9a 06 08		    ld b,8 
0c9c			Div8_Loop: 
0c9c cb 13		    rl e 
0c9e 17			    rla 
0c9f 91			    sub c 
0ca0 30 01		    jr nc,Div8_NoAdd 
0ca2 81			    add a,c 
0ca3			Div8_NoAdd: 
0ca3 10 f7		    djnz Div8_Loop 
0ca5 47			    ld b,a 
0ca6 7b			    ld a,e 
0ca7 17			    rla 
0ca8 2f			    cpl 
0ca9 c9			    ret 
0caa			 
0caa			; 
0caa			; Multiply 8-bit value with a 16-bit value (unrolled) 
0caa			; In: Multiply A with DE 
0caa			; Out: HL = result 
0caa			; 
0caa			Mult12U: 
0caa 2e 00		    ld l,0 
0cac 87			    add a,a 
0cad 30 01		    jr nc,Mult12U_NoAdd0 
0caf 19			    add hl,de 
0cb0			Mult12U_NoAdd0: 
0cb0 29			    add hl,hl 
0cb1 87			    add a,a 
0cb2 30 01		    jr nc,Mult12U_NoAdd1 
0cb4 19			    add hl,de 
0cb5			Mult12U_NoAdd1: 
0cb5 29			    add hl,hl 
0cb6 87			    add a,a 
0cb7 30 01		    jr nc,Mult12U_NoAdd2 
0cb9 19			    add hl,de 
0cba			Mult12U_NoAdd2: 
0cba 29			    add hl,hl 
0cbb 87			    add a,a 
0cbc 30 01		    jr nc,Mult12U_NoAdd3 
0cbe 19			    add hl,de 
0cbf			Mult12U_NoAdd3: 
0cbf 29			    add hl,hl 
0cc0 87			    add a,a 
0cc1 30 01		    jr nc,Mult12U_NoAdd4 
0cc3 19			    add hl,de 
0cc4			Mult12U_NoAdd4: 
0cc4 29			    add hl,hl 
0cc5 87			    add a,a 
0cc6 30 01		    jr nc,Mult12U_NoAdd5 
0cc8 19			    add hl,de 
0cc9			Mult12U_NoAdd5: 
0cc9 29			    add hl,hl 
0cca 87			    add a,a 
0ccb 30 01		    jr nc,Mult12U_NoAdd6 
0ccd 19			    add hl,de 
0cce			Mult12U_NoAdd6: 
0cce 29			    add hl,hl 
0ccf 87			    add a,a 
0cd0 d0			    ret nc 
0cd1 19			    add hl,de 
0cd2 c9			    ret 
0cd3			 
0cd3			; 
0cd3			; Multiply 8-bit value with a 16-bit value (right rotating) 
0cd3			; In: Multiply A with DE 
0cd3			;      Put lowest value in A for most efficient calculation 
0cd3			; Out: HL = result 
0cd3			; 
0cd3			Mult12R: 
0cd3 21 00 00		    ld hl,0 
0cd6			Mult12R_Loop: 
0cd6 cb 3f		    srl a 
0cd8 30 01		    jr nc,Mult12R_NoAdd 
0cda 19			    add hl,de 
0cdb			Mult12R_NoAdd: 
0cdb cb 23		    sla e 
0cdd cb 12		    rl d 
0cdf b7			    or a 
0ce0 c2 d6 0c		    jp nz,Mult12R_Loop 
0ce3 c9			    ret 
0ce4			 
0ce4			; 
0ce4			; Multiply 16-bit values (with 32-bit result) 
0ce4			; In: Multiply BC with DE 
0ce4			; Out: BCHL = result 
0ce4			; 
0ce4			Mult32: 
0ce4 79			    ld a,c 
0ce5 48			    ld c,b 
0ce6 21 00 00		    ld hl,0 
0ce9 06 10		    ld b,16 
0ceb			Mult32_Loop: 
0ceb 29			    add hl,hl 
0cec 17			    rla 
0ced cb 11		    rl c 
0cef 30 07		    jr nc,Mult32_NoAdd 
0cf1 19			    add hl,de 
0cf2 ce 00		    adc a,0 
0cf4 d2 f8 0c		    jp nc,Mult32_NoAdd 
0cf7 0c			    inc c 
0cf8			Mult32_NoAdd: 
0cf8 10 f1		    djnz Mult32_Loop 
0cfa 41			    ld b,c 
0cfb 4f			    ld c,a 
0cfc c9			    ret 
0cfd			 
0cfd			 
0cfd			 
0cfd			; 
0cfd			; Multiply 8-bit values 
0cfd			; In:  Multiply H with E 
0cfd			; Out: HL = result 
0cfd			; 
0cfd			Mult8: 
0cfd 16 00		    ld d,0 
0cff 6a			    ld l,d 
0d00 06 08		    ld b,8 
0d02			Mult8_Loop: 
0d02 29			    add hl,hl 
0d03 30 01		    jr nc,Mult8_NoAdd 
0d05 19			    add hl,de 
0d06			Mult8_NoAdd: 
0d06 10 fa		    djnz Mult8_Loop 
0d08 c9			    ret 
0d09			 
0d09			 
0d09			 
0d09			 
0d09			 
0d09			 
0d09			 
0d09			 
0d09			;;http://z80-heaven.wikidot.com/math 
0d09			;;This divides DE by BC, storing the result in DE, remainder in HL 
0d09			; 
0d09			;DE_Div_BC:          ;1281-2x, x is at most 16 
0d09			;     ld a,16        ;7 
0d09			;     ld hl,0        ;10 
0d09			;     jp $+5         ;10 
0d09			;.DivLoop: 
0d09			;       add hl,bc    ;-- 
0d09			;       dec a        ;64 
0d09			;       jr z,.DivLoopEnd        ;86 
0d09			; 
0d09			;       sla e        ;128 
0d09			;       rl d         ;128 
0d09			;       adc hl,hl    ;240 
0d09			;       sbc hl,bc    ;240 
0d09			;       jr nc,.DivLoop ;23|21 
0d09			;       inc e        ;-- 
0d09			;       jp .DivLoop+1 
0d09			; 
0d09			;.DivLoopEnd: 
0d09			 
0d09			;HL_Div_C: 
0d09			;Inputs: 
0d09			;     HL is the numerator 
0d09			;     C is the denominator 
0d09			;Outputs: 
0d09			;     A is the remainder 
0d09			;     B is 0 
0d09			;     C is not changed 
0d09			;     DE is not changed 
0d09			;     HL is the quotient 
0d09			; 
0d09			;       ld b,16 
0d09			;       xor a 
0d09			;         add hl,hl 
0d09			;         rla 
0d09			;         cp c 
0d09			;         jr c,$+4 
0d09			;           inc l 
0d09			;           sub c 
0d09			;         djnz $-7 
0d09			 
0d09			; https://plutiedev.com/z80-add-8bit-to-16bit 
0d09			 
0d09			addatohl: 
0d09 85			    add   a, l    ; A = A+L 
0d0a 6f			    ld    l, a    ; L = A+L 
0d0b 8c			    adc   a, h    ; A = A+L+H+carry 
0d0c 95			    sub   l       ; A = H+carry 
0d0d 67			    ld    h, a    ; H = H+carry 
0d0e c9			ret 
0d0f			 
0d0f			addatode: 
0d0f 83			    add   a, e    ; A = A+L 
0d10 5f			    ld    e, a    ; L = A+L 
0d11 8a			    adc   a, d    ; A = A+L+H+carry 
0d12 93			    sub   e       ; A = H+carry 
0d13 57			    ld    d, a    ; H = H+carry 
0d14 c9			ret 
0d15			 
0d15			 
0d15			addatobc: 
0d15 81			    add   a, c    ; A = A+L 
0d16 4f			    ld    c, a    ; L = A+L 
0d17 88			    adc   a, b    ; A = A+L+H+carry 
0d18 91			    sub   c       ; A = H+carry 
0d19 47			    ld    b, a    ; H = H+carry 
0d1a c9			ret 
0d1b			 
0d1b			subafromhl: 
0d1b			   ; If A=0 do nothing 
0d1b			    ; Otherwise flip A's sign. Since 
0d1b			    ; the upper byte becomes -1, also 
0d1b			    ; substract 1 from H. 
0d1b ed 44		    neg 
0d1d ca 26 0d		    jp    z, Skip 
0d20 25			    dec   h 
0d21			     
0d21			    ; Now add the low byte as usual 
0d21			    ; Two's complement takes care of 
0d21			    ; ensuring the result is correct 
0d21 85			    add   a, l 
0d22 6f			    ld    l, a 
0d23 8c			    adc   a, h 
0d24 95			    sub   l 
0d25 67			    ld    h, a 
0d26			Skip: 
0d26 c9				ret 
0d27			 
0d27			 
0d27			; compare hl and de 
0d27			; returns:  
0d27			; if hl = de, z=1, s=0, c0=0 
0d27			; if hl > de, z=0, s=0, c=0 
0d27			; if hl < de, z=0, s=1, c=1 
0d27			cmp16:	 
0d27 b7				or a 
0d28 ed 52			sbc hl,de 
0d2a e0				ret po 
0d2b 7c				ld a,h 
0d2c 1f				rra 
0d2d ee 40			xor 01000000B 
0d2f 37				scf 
0d30 8f				adc a,a 
0d31 c9				ret 
0d32			 
0d32			 
0d32			; test if hl contains zero   - A is destroyed 
0d32			 
0d32			ishlzero:    
0d32 b7				or a     ; reset flags 
0d33 7c				ld a, h 
0d34 b5				or l        	 
0d35			 
0d35 c9				ret 
0d36			 
0d36			 
0d36			 
0d36			 
0d36			if FORTH_ENABLE_FLOATMATH 
0d36			;include "float/bbcmath.z80" 
0d36			include "float/lpfpcalc.asm" 
0d36			endif 
0d36			 
0d36			 
0d36			; eof 
0d36			 
# End of file firmware_maths.asm
0d36			include "firmware_strings.asm"   ; string handling  
0d36			 
0d36			 
0d36			; TODO string len 
0d36			; input text string, end on cr with zero term 
0d36			; a offset into frame buffer to start prompt 
0d36			; d is max length 
0d36			; e is display size TODO 
0d36			; c is current cursor position 
0d36			; hl is ptr to where string will be stored 
0d36			 
0d36			 
0d36			; TODO check limit of buffer for new inserts 
0d36			; TODO check insert does not push beyond buffer 
0d36			; TODO scroll in a limited display area 
0d36			; TODO scroll whole screen on page wrap 
0d36			 
0d36			 
0d36			; TODO handle KEY_PREVWORD 
0d36			; TODO handle KEY_NEXTWORD 
0d36			; TODO handle KEY_HOME 
0d36			; TODO handle KEY_END 
0d36			; TODO use LCD cursor? 
0d36			 
0d36 32 70 fb		input_str:    	ld (input_at_pos),a      ; save display position to start 
0d39 81					add c 
0d3a 32 6e fb				ld (input_at_cursor),a	; save draw pos of cursor 
0d3d 22 73 fb				ld (input_start), hl     ; save ptr to buffer 
0d40 79					ld a, c 
0d41 cd 09 0d				call addatohl 
0d44 22 75 fb				ld (input_ptr), hl     ; save ptr to point under the cursor 
0d47 7a					ld a,d 
0d48 32 72 fb			        ld (input_size), a       ; save length of input area 
0d4b 79					ld a, c 
0d4c 32 61 fb				ld (input_cursor),a      ; init cursor start position  
0d4f 7b					ld a,e 
0d50 32 71 fb			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0d53					 
0d53					 
0d53			 
0d53			;		ld a,(input_ptr) 
0d53			;		ld (input_under_cursor),a 	; save what is under the cursor 
0d53			 
0d53			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0d53					; init cursor shape if not set by the cin routines 
0d53 21 d0 f8				ld hl, cursor_shape 
0d56 3e ff				ld a, 255 
0d58 77					ld (hl), a 
0d59 23					inc hl 
0d5a 3e 00				ld a, 0 
0d5c 77					ld (hl), a 
0d5d			 
0d5d 3e 0f				ld a, CUR_BLINK_RATE 
0d5f 32 6c fb				ld (input_cur_flash), a 
0d62 3e 01				ld a, 1 
0d64 32 6b fb				ld (input_cur_onoff),a 
0d67			 
0d67			;	if DEBUG_INPUT 
0d67			;		push af 
0d67			;		ld a, 'I' 
0d67			;		ld (debug_mark),a 
0d67			;		pop af 
0d67			;		CALLMONITOR 
0d67			;	endif 
0d67			.is1:		; main entry loop 
0d67			 
0d67			 
0d67			 
0d67					; pause 1ms 
0d67			 
0d67 3e 01				ld a, 1 
0d69 cd 3a 0a				call aDelayInMS 
0d6c			 
0d6c					; dec flash counter 
0d6c 3a 6c fb				ld a, (input_cur_flash) 
0d6f 3d					dec a 
0d70 32 6c fb				ld (input_cur_flash), a 
0d73 fe 00				cp 0 
0d75 20 0d				jr nz, .nochgstate 
0d77			 
0d77			 
0d77					; change state 
0d77 3a 6b fb				ld a,(input_cur_onoff) 
0d7a ed 44				neg 
0d7c 32 6b fb				ld (input_cur_onoff),a 
0d7f			 
0d7f			 
0d7f					; reset on change of state 
0d7f 3e 0f				ld a, CUR_BLINK_RATE 
0d81 32 6c fb				ld (input_cur_flash), a 
0d84			 
0d84			.nochgstate: 
0d84					 
0d84					 
0d84			 
0d84					; display cursor  
0d84			 
0d84			;		ld hl, (input_start) 
0d84			;		ld a, (input_cursor) 
0d84			;		call addatohl 
0d84			 
0d84					; get char under cursor and replace with cursor 
0d84 2a 75 fb		ld hl, (input_ptr) 
0d87			;		ld a, (hl) 
0d87			;		ld (input_under_cursor),a 
0d87			;		ld a, '_' 
0d87			;		ld (hl), a 
0d87			 
0d87					; display string 
0d87			 
0d87 ed 5b 73 fb			ld de, (input_start) 
0d8b 3a 70 fb				ld a, (input_at_pos) 
0d8e cd e8 0a				call str_at_display 
0d91			;	        call update_display 
0d91			 
0d91					; find place to put the cursor 
0d91			;		add h 
0d91			;		ld l, display_row_1 
0d91			;		sub l 
0d91			; (input_at_pos) 
0d91					;ld c, a 
0d91			;		ld a, (input_cursor) 
0d91			;		ld l, (input_at_pos) 
0d91			;		;ld b, h 
0d91			;		add l 
0d91			;		ld (input_at_cursor),a 
0d91					;ld l,h 
0d91			 
0d91			;		ld h, 0 
0d91			;		ld l,(input_at_pos) 
0d91			;		ld a, (input_cursor) 
0d91			;		call addatohl 
0d91			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0d91			;		call subafromhl 
0d91			;		ld a,l 
0d91			;		ld (input_at_cursor), a 
0d91			 
0d91				if DEBUG_INPUT 
0d91					ld a, (hardware_diag) 
0d91					cp 0 
0d91					jr z, .skip_input_diag 
0d91			 
0d91					ld a,(input_at_pos) 
0d91					ld hl, LFSRSeed 
0d91					call hexout 
0d91					ld a, (input_cursor) 
0d91					ld hl, LFSRSeed+2 
0d91					call hexout 
0d91					ld a,(input_at_cursor) 
0d91					ld hl, LFSRSeed+4 
0d91					call hexout 
0d91			 
0d91					ld a,(input_cur_onoff) 
0d91					ld hl, LFSRSeed+6 
0d91					call hexout 
0d91			 
0d91					ld a,(input_cur_flash) 
0d91					ld hl, LFSRSeed+8 
0d91					call hexout 
0d91			 
0d91					ld a,(input_len) 
0d91					ld hl, LFSRSeed+10 
0d91					call hexout 
0d91					ld hl, LFSRSeed+12 
0d91					ld a, 0 
0d91					ld (hl),a 
0d91					ld a, display_row_4 
0d91					ld de, LFSRSeed 
0d91					call str_at_display 
0d91					.skip_input_diag: 
0d91				endif 
0d91			 
0d91					; decide on if we are showing the cursor this time round 
0d91			 
0d91 3a 6b fb				ld a, (input_cur_onoff) 
0d94 fe ff				cp 255 
0d96 28 13				jr z, .skipcur 
0d98			 
0d98			 
0d98 3a 6e fb				ld a,(input_at_cursor) 
0d9b 11 d0 f8				ld de, cursor_shape 
0d9e cd e8 0a				call str_at_display 
0da1			 
0da1					; save length of current input string 
0da1 2a 73 fb				ld hl, (input_start) 
0da4 cd 67 11				call strlenz 
0da7 7d					ld a,l 
0da8 32 66 fb				ld (input_len),a 
0dab			 
0dab			.skipcur: 
0dab			 
0dab cd f8 0a			        call update_display 
0dae					 
0dae			 
0dae			 
0dae					; wait 
0dae				 
0dae					; TODO loop without wait to flash the cursor and char under cursor	 
0dae cd 52 68				call cin    ; _wait 
0db1			 
0db1 fe 00				cp 0 
0db3 ca 67 0d				jp z, .is1 
0db6			 
0db6					; get ptr to char to input into 
0db6			 
0db6 4f					ld c,a 
0db7 2a 73 fb				ld hl, (input_start) 
0dba 3a 61 fb				ld a, (input_cursor) 
0dbd cd 09 0d				call addatohl 
0dc0 22 75 fb				ld (input_ptr), hl 
0dc3 79					ld a,c 
0dc4			 
0dc4					; replace char under cursor 
0dc4			 
0dc4			;		ld hl, (input_ptr) 
0dc4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0dc4			;		ld (hl), a 
0dc4			 
0dc4			;	if DEBUG_INPUT 
0dc4			;		push af 
0dc4			;		ld a, 'i' 
0dc4			;		ld (debug_mark),a 
0dc4			;		pop af 
0dc4			;		CALLMONITOR 
0dc4			;	endif 
0dc4 fe 0e				cp KEY_HOME 
0dc6 20 0e				jr nz, .iske 
0dc8			 
0dc8 3a 70 fb				ld a, (input_at_pos) 
0dcb 32 6e fb				ld (input_at_cursor),a 
0dce 3e 00				ld a, 0 
0dd0 32 61 fb				ld (input_cursor), a 
0dd3 c3 67 0d				jp .is1 
0dd6					 
0dd6 fe 0f		.iske:		cp KEY_END 
0dd8 20 03				jr nz, .isknw 
0dda c3 67 0d				jp .is1 
0ddd			 
0ddd fe 06		.isknw:		cp KEY_NEXTWORD 
0ddf 20 1b				jr nz, .iskpw 
0de1			 
0de1 2a 75 fb		.isknwm:	ld hl, (input_ptr) 
0de4 7e					ld a,(hl)	 
0de5 fe 00				cp 0 
0de7 ca 67 0d				jp z, .is1    ; end of string 
0dea fe 20				cp ' ' 
0dec ca 67 0d				jp z, .is1    ; end of word 
0def 23					inc hl 
0df0 22 75 fb				ld (input_ptr), hl 
0df3 3a 6e fb				ld a, (input_at_cursor) 
0df6 3c					inc a 
0df7 32 6e fb				ld (input_at_cursor), a 
0dfa 18 e5				jr .isknwm 
0dfc			 
0dfc fe 07		.iskpw:		cp KEY_PREVWORD 
0dfe 20 1b				jr nz, .iskl 
0e00			.iskpwm:	 
0e00 2a 75 fb				ld hl, (input_ptr) 
0e03 7e					ld a,(hl)	 
0e04 fe 00				cp 0  
0e06 ca 67 0d				jp z, .is1    ; end of string 
0e09 fe 20				cp ' ' 
0e0b ca 67 0d				jp z, .is1    ; end of word 
0e0e 2b					dec hl 
0e0f 22 75 fb				ld (input_ptr), hl 
0e12 3a 6e fb				ld a, (input_at_cursor) 
0e15 3d					dec a 
0e16 32 6e fb				ld (input_at_cursor), a 
0e19 18 e5				jr .iskpwm 
0e1b			 
0e1b			 
0e1b fe 0b		.iskl:		cp KEY_LEFT 
0e1d 20 27				jr nz, .isk1 
0e1f			 
0e1f 3a 61 fb				ld a, (input_cursor) 
0e22			 
0e22 fe 00				cp 0 
0e24 ca 67 0d				jp z, .is1 		; at start of line to ignore  
0e27			 
0e27 3d					dec  a 		; TODO check underflow 
0e28 32 61 fb				ld (input_cursor), a 
0e2b			 
0e2b 2a 75 fb				ld hl, (input_ptr) 
0e2e 2b					dec hl 
0e2f 22 75 fb				ld (input_ptr), hl 
0e32					 
0e32 3a 6e fb				ld a, (input_at_cursor) 
0e35 3d					dec a 
0e36 32 6e fb				ld (input_at_cursor), a 
0e39			 
0e39 3e 01				ld a, 1		; show cursor moving 
0e3b 32 6b fb				ld (input_cur_onoff),a 
0e3e 3e 0f				ld a, CUR_BLINK_RATE 
0e40 32 6c fb				ld (input_cur_flash), a 
0e43			 
0e43 c3 67 0d				jp .is1 
0e46			 
0e46 fe 0c		.isk1:		cp KEY_RIGHT 
0e48 20 2a				jr nz, .isk2 
0e4a			 
0e4a 3a 66 fb				ld a,(input_len)		; TODO BUG why cant i load e direct? 
0e4d 5f					ld e,a 
0e4e 3a 61 fb				ld a, (input_cursor) 
0e51 bb					cp e 
0e52 ca 67 0d				jp z, .is1		; at the end of string so dont go right 
0e55			 
0e55 3c					inc  a 		; TODO check overflow 
0e56 32 61 fb				ld (input_cursor), a 
0e59			 
0e59 3a 6e fb				ld a, (input_at_cursor) 
0e5c 3c					inc a 
0e5d 32 6e fb				ld (input_at_cursor), a 
0e60			 
0e60 2a 75 fb				ld hl, (input_ptr) 
0e63 23					inc hl 
0e64 22 75 fb				ld (input_ptr), hl 
0e67			 
0e67 3e 01				ld a, 1		; show cursor moving 
0e69 32 6b fb				ld (input_cur_onoff),a 
0e6c 3e 0f				ld a, CUR_BLINK_RATE 
0e6e 32 6c fb				ld (input_cur_flash), a 
0e71			 
0e71 c3 67 0d				jp .is1 
0e74			 
0e74 fe 05		.isk2:		cp KEY_UP 
0e76			 
0e76 20 26				jr nz, .isk3 
0e78			 
0e78					; swap last command with the current on 
0e78			 
0e78					; move cursor to start of string 
0e78 2a 73 fb				ld hl, (input_start) 
0e7b 22 75 fb				ld (input_ptr), hl 
0e7e			 
0e7e 3a 70 fb				ld a, (input_at_pos) 
0e81 32 6e fb				ld (input_at_cursor), a 
0e84			 
0e84 3e 00				ld a, 0 
0e86 32 61 fb				ld (input_cursor), a 
0e89					 
0e89					; swap input and last command buffers 
0e89			 
0e89 21 44 f1				ld hl, os_cli_cmd 
0e8c 11 43 f2				ld de, os_last_cmd 
0e8f 06 ff				ld b, 255 
0e91 7e			.swap1:		ld a, (hl) 
0e92 4f					ld c,a 
0e93 1a					ld a, (de) 
0e94 77					ld (hl), a 
0e95 79					ld a,c 
0e96 12					ld (de),a 
0e97 23					inc hl 
0e98 13					inc de 
0e99 10 f6				djnz .swap1 
0e9b			 
0e9b			 
0e9b			 
0e9b			 
0e9b			 
0e9b c3 67 0d				jp .is1 
0e9e			 
0e9e fe 08		.isk3:		cp KEY_BS 
0ea0 20 3c				jr nz, .isk4 
0ea2			 
0ea2 3a 61 fb				ld a, (input_cursor) 
0ea5			 
0ea5 fe 00				cp 0 
0ea7 ca 67 0d				jp z, .is1 		; at start of line to ignore  
0eaa			 
0eaa 3d					dec  a 		; TODO check underflow 
0eab 32 61 fb				ld (input_cursor), a 
0eae			 
0eae					; hl is source 
0eae					; de needs to be source - 1 
0eae			 
0eae			;		ld a, 0 
0eae			;		dec hl 
0eae			;		ld (hl), a 
0eae			 
0eae 2a 75 fb				ld hl, (input_ptr) 
0eb1 2b					dec hl 
0eb2 22 75 fb				ld (input_ptr), hl 
0eb5			 
0eb5					; shift all data 
0eb5			 
0eb5 e5					push hl 
0eb6 23					inc hl 
0eb7 d1					pop de 
0eb8 3a 66 fb				ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ebb 4f					ld c,a 
0ebc 06 00				ld b,0 
0ebe ed b0				ldir  
0ec0			 
0ec0			 
0ec0			 
0ec0			 
0ec0 3a 6e fb				ld a, (input_at_cursor) 
0ec3 3d					dec a 
0ec4 32 6e fb				ld (input_at_cursor), a 
0ec7			 
0ec7			 
0ec7 3e 01				ld a, 1		; show cursor moving 
0ec9 32 6b fb				ld (input_cur_onoff),a 
0ecc 3e 0f				ld a, CUR_BLINK_RATE 
0ece 32 6c fb				ld (input_cur_flash), a 
0ed1			 
0ed1					; remove char 
0ed1 3a 6e fb				ld a, (input_at_cursor) 
0ed4 3c					inc a 
0ed5 11 5f 0f				ld de,.iblank 
0ed8 cd e8 0a				call str_at_display 
0edb			 
0edb c3 67 0d				jp .is1 
0ede			 
0ede fe 0d		.isk4:		cp KEY_CR 
0ee0 28 6c				jr z, .endinput 
0ee2			 
0ee2					; else add the key press to the end 
0ee2			 
0ee2 4f					ld c, a			; save key pressed 
0ee3			 
0ee3 7e					ld a,(hl)		; get what is currently under char 
0ee4			 
0ee4 fe 00				cp 0			; we are at the end of the string 
0ee6 20 2f				jr nz, .onchar 
0ee8					 
0ee8					; add a char to the end of the string 
0ee8				 
0ee8 71					ld (hl),c 
0ee9 23					inc hl 
0eea			;		ld a,' ' 
0eea			;		ld (hl),a 
0eea			;		inc hl 
0eea 3e 00				ld a,0 
0eec 77					ld (hl),a 
0eed 2b					dec hl 
0eee			 
0eee 3a 61 fb				ld a, (input_cursor) 
0ef1 3c					inc a				; TODO check max string length and scroll  
0ef2 32 61 fb				ld (input_cursor), a		; inc cursor pos 
0ef5							 
0ef5 3a 6e fb				ld a, (input_at_cursor) 
0ef8 3c					inc a 
0ef9 32 6e fb				ld (input_at_cursor), a 
0efc			 
0efc 2a 75 fb				ld hl, (input_ptr) 
0eff 23					inc hl 
0f00 22 75 fb				ld (input_ptr), hl 
0f03			 
0f03 2a 75 fb				ld hl, (input_ptr) 
0f06 23					inc hl 
0f07 22 75 fb				ld (input_ptr), hl 
0f0a			;	if DEBUG_INPUT 
0f0a			;		push af 
0f0a			;		ld a, '+' 
0f0a			;		ld (debug_mark),a 
0f0a			;		pop af 
0f0a			;		CALLMONITOR 
0f0a			;	endif 
0f0a 3e 01				ld a, 1		; show cursor moving 
0f0c 32 6b fb				ld (input_cur_onoff),a 
0f0f 3e 0f				ld a, CUR_BLINK_RATE 
0f11 32 6c fb				ld (input_cur_flash), a 
0f14 c3 67 0d				jp .is1 
0f17					 
0f17			 
0f17			 
0f17					; if on a char then insert 
0f17			.onchar: 
0f17			 
0f17					; TODO over flow check: make sure insert does not blow out buffer 
0f17			 
0f17					; need to do some maths to use lddr 
0f17			 
0f17 e5					push hl   ; save char pos 
0f18 c5					push bc 
0f19			 
0f19 2a 73 fb				ld hl, (input_start) 
0f1c 3a 66 fb				ld a, (input_len) 
0f1f cd 09 0d				call addatohl  		; end of string 
0f22 23					inc hl 
0f23 23					inc hl		; past zero term 
0f24 e5					push hl 
0f25 23					inc hl 
0f26 e5					push hl  
0f27			 
0f27								; start and end of lddr set, now how much to move? 
0f27			 
0f27							 
0f27 3a 61 fb				ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0f2a 47					ld b,a 
0f2b 3a 66 fb				ld a,(input_len) 
0f2e 5f					ld e,a 
0f2f 90					sub b 
0f30 3c					inc a		;?? 
0f31 3c					inc a		;?? 
0f32 3c					inc a		;?? 
0f33			 
0f33 06 00				ld b,0 
0f35 4f					ld c,a 
0f36			 
0f36				if DEBUG_INPUT 
0f36					push af 
0f36					ld a, 'i' 
0f36					ld (debug_mark),a 
0f36					pop af 
0f36			;		CALLMONITOR 
0f36				endif 
0f36 d1					pop de 
0f37 e1					pop hl 
0f38				if DEBUG_INPUT 
0f38					push af 
0f38					ld a, 'I' 
0f38					ld (debug_mark),a 
0f38					pop af 
0f38			;		CALLMONITOR 
0f38				endif 
0f38 ed b8				lddr 
0f3a				 
0f3a			 
0f3a			 
0f3a					; TODO have a key for insert/overwrite mode???? 
0f3a c1					pop bc 
0f3b e1					pop hl 
0f3c 71					ld (hl), c		; otherwise overwrite current char 
0f3d					 
0f3d			 
0f3d			 
0f3d			 
0f3d 3a 61 fb				ld a, (input_cursor) 
0f40 3c					inc  a 		; TODO check overflow 
0f41 32 61 fb				ld (input_cursor), a 
0f44			 
0f44 3a 6e fb				ld a, (input_at_cursor) 
0f47 3c					inc a 
0f48 32 6e fb				ld (input_at_cursor), a 
0f4b			 
0f4b c3 67 0d				jp .is1 
0f4e			 
0f4e			.endinput:	; TODO look for end of string 
0f4e			 
0f4e					; add trailing space for end of token 
0f4e			 
0f4e 2a 73 fb				ld hl, (input_start) 
0f51 3a 66 fb				ld a,(input_len) 
0f54 cd 09 0d				call addatohl 
0f57 3e 20				ld a, ' ' 
0f59 77					ld (hl),a 
0f5a					; TODO eof of parse marker 
0f5a			 
0f5a 23					inc hl 
0f5b 3e 00				ld a, 0 
0f5d 77					ld (hl),a 
0f5e			 
0f5e			 
0f5e c9					ret 
0f5f			 
0f5f .. 00		.iblank: db " ",0 
0f61			 
0f61			 
0f61 32 70 fb		input_str_prev:	ld (input_at_pos), a 
0f64 22 73 fb				ld (input_start), hl 
0f67 3e 01				ld a,1			; add cursor 
0f69 77					ld (hl),a 
0f6a 23					inc hl 
0f6b 3e 00				ld a,0 
0f6d 77					ld (hl),a 
0f6e 22 75 fb				ld (input_ptr), hl 
0f71 7a					ld a,d 
0f72 32 72 fb				ld (input_size), a 
0f75 3e 00				ld a,0 
0f77 32 61 fb				ld (input_cursor),a 
0f7a			.instr1:	 
0f7a			 
0f7a					; TODO do block cursor 
0f7a					; TODO switch cursor depending on the modifer key 
0f7a			 
0f7a					; update cursor shape change on key hold 
0f7a			 
0f7a 2a 75 fb				ld hl, (input_ptr) 
0f7d 2b					dec hl 
0f7e 3a d0 f8				ld a,(cursor_shape) 
0f81 77					ld (hl), a 
0f82			 
0f82					; display entered text 
0f82 3a 70 fb				ld a,(input_at_pos) 
0f85 cd 16 66		            	CALL fLCD_Pos       ;Position cursor to location in A 
0f88 ed 5b 73 fb	            	LD   de, (input_start) 
0f8c cd 38 66		            	CALL fLCD_Str       ;Display string pointed to by DE 
0f8f			 
0f8f cd 52 68				call cin 
0f92 fe 00				cp 0 
0f94 28 e4				jr z, .instr1 
0f96			 
0f96					; proecess keyboard controls first 
0f96			 
0f96 2a 75 fb				ld hl,(input_ptr) 
0f99			 
0f99 fe 0d				cp KEY_CR	 ; pressing enter ends input 
0f9b 28 5a				jr z, .instrcr 
0f9d			 
0f9d fe 08				cp KEY_BS 	; back space 
0f9f 20 0f				jr nz, .instr2 
0fa1					; process back space 
0fa1			 
0fa1					; TODO stop back space if at start of string 
0fa1 2b					dec hl 
0fa2 2b					dec hl ; to over write cursor 
0fa3 3a d0 f8				ld a,(cursor_shape) 
0fa6					;ld a,0 
0fa6 77					ld (hl),a 
0fa7 23					inc hl 
0fa8 3e 20				ld a," " 
0faa 77					ld (hl),a 
0fab 22 75 fb				ld (input_ptr),hl 
0fae					 
0fae			 
0fae 18 ca				jr .instr1 
0fb0			 
0fb0 fe 0b		.instr2:	cp KEY_LEFT    ; cursor left 
0fb2 20 06				jr nz, .instr3 
0fb4 2b					dec hl 
0fb5 22 75 fb				ld (input_ptr),hl 
0fb8 18 c0				jr .instr1 
0fba				 
0fba fe 0c		.instr3:	cp KEY_RIGHT ; cursor right 
0fbc 20 06				jr nz, .instr4 
0fbe 23					inc hl 
0fbf 22 75 fb				ld (input_ptr),hl 
0fc2 18 b6				jr .instr1 
0fc4			 
0fc4 fe 0e		.instr4:	cp KEY_HOME    ; jump to start of line 
0fc6 20 06				jr nz, .instr5 
0fc8 2b					dec hl 
0fc9 22 75 fb				ld (input_ptr),hl 
0fcc 18 ac				jr .instr1 
0fce			 
0fce fe 0f		.instr5:	cp KEY_END     ; jump to end of line 
0fd0 20 06				jr nz, .instr6 
0fd2 2b					dec hl 
0fd3 22 75 fb				ld (input_ptr),hl 
0fd6 18 a2				jr .instr1 
0fd8 fe 05		.instr6:        cp KEY_UP      ; recall last command 
0fda 20 0b				jr nz, .instrnew 
0fdc			 
0fdc 21 1d ee			ld hl, scratch 
0fdf 11 43 f2			ld de, os_last_cmd 
0fe2 cd 00 10			call strcpy 
0fe5 18 93				jr .instr1 
0fe7			 
0fe7			 
0fe7			.instrnew:	; no special key pressed to see if we have room to store it 
0fe7			 
0fe7					; TODO do string size test 
0fe7			 
0fe7 2b					dec hl ; to over write cursor 
0fe8 77					ld (hl),a 
0fe9 23					inc hl 
0fea 3a d0 f8				ld a,(cursor_shape) 
0fed 77					ld (hl),a 
0fee 23					inc hl 
0fef 3e 00				ld a,0 
0ff1 77					ld (hl),a 
0ff2			 
0ff2 22 75 fb				ld (input_ptr),hl 
0ff5					 
0ff5 18 83				jr .instr1 
0ff7 2b			.instrcr:	dec hl		; remove cursor 
0ff8 3e 20				ld a,' '	; TODO add a trailing space for safety 
0ffa 77					ld (hl),a 
0ffb 23					inc hl 
0ffc 3e 00				ld a,0 
0ffe 77					ld (hl),a 
0fff			 
0fff			 
0fff					; if at end of line scroll up    
0fff					; TODO detecting only end of line 4 for scroll up  
0fff			 
0fff					;ld   
0fff			 
0fff c9					ret 
1000			 
1000			 
1000			; strcpy hl = dest, de source 
1000			 
1000 1a			strcpy:   LD   A, (DE)        ;Get character from string 
1001 b7			            OR   A              ;Null terminator? 
1002 c8			            RET  Z              ;Yes, so finished 
1003 1a					ld a,(de) 
1004 77					ld (hl),a 
1005 13			            INC  DE             ;Point to next character 
1006 23					inc hl 
1007 18 f7		            JR   strcpy       ;Repeat 
1009 c9					ret 
100a			 
100a			 
100a			; TODO string_at  
100a			; pass string which starts with lcd offset address and then null term string 
100a			 
100a			; TODO string to dec 
100a			; TODO string to hex 
100a			; TODO byte to string hex 
100a			; TODO byte to string dec 
100a			 
100a			 
100a			 
100a			; from z80uartmonitor 
100a			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
100a			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
100a			; pass hl for where to put the text 
100a			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
100a c5			hexout:	PUSH BC 
100b f5					PUSH AF 
100c 47					LD B, A 
100d					; Upper nybble 
100d cb 3f				SRL A 
100f cb 3f				SRL A 
1011 cb 3f				SRL A 
1013 cb 3f				SRL A 
1015 cd 25 10				CALL tohex 
1018 77					ld (hl),a 
1019 23					inc hl	 
101a					 
101a					; Lower nybble 
101a 78					LD A, B 
101b e6 0f				AND 0FH 
101d cd 25 10				CALL tohex 
1020 77					ld (hl),a 
1021 23					inc hl	 
1022					 
1022 f1					POP AF 
1023 c1					POP BC 
1024 c9					RET 
1025					 
1025			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1025			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1025			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1025			tohex: 
1025 e5					PUSH HL 
1026 d5					PUSH DE 
1027 16 00				LD D, 0 
1029 5f					LD E, A 
102a 21 32 10				LD HL, .DATA 
102d 19					ADD HL, DE 
102e 7e					LD A, (HL) 
102f d1					POP DE 
1030 e1					POP HL 
1031 c9					RET 
1032			 
1032			.DATA: 
1032 30					DEFB	30h	; 0 
1033 31					DEFB	31h	; 1 
1034 32					DEFB	32h	; 2 
1035 33					DEFB	33h	; 3 
1036 34					DEFB	34h	; 4 
1037 35					DEFB	35h	; 5 
1038 36					DEFB	36h	; 6 
1039 37					DEFB	37h	; 7 
103a 38					DEFB	38h	; 8 
103b 39					DEFB	39h	; 9 
103c 41					DEFB	41h	; A 
103d 42					DEFB	42h	; B 
103e 43					DEFB	43h	; C 
103f 44					DEFB	44h	; D 
1040 45					DEFB	45h	; E 
1041 46					DEFB	46h	; F 
1042			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1042			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1042			;;    subtract $30, if result > 9 then subtract $7 more 
1042			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1042			atohex: 
1042 d6 30				SUB $30 
1044 fe 0a				CP 10 
1046 f8					RET M		; If result negative it was 0-9 so we're done 
1047 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
1049 c9					RET		 
104a			 
104a			 
104a			 
104a			 
104a			; Get 2 ASCII characters as hex byte from pointer in hl 
104a			 
104a			BYTERD: 
104a 16 00			LD	D,00h		;Set up 
104c cd 54 10			CALL	HEXCON		;Get byte and convert to hex 
104f 87				ADD	A,A		;First nibble so 
1050 87				ADD	A,A		;multiply by 16 
1051 87				ADD	A,A		; 
1052 87				ADD	A,A		; 
1053 57				LD	D,A		;Save hi nibble in D 
1054			HEXCON: 
1054 7e				ld a, (hl)		;Get next chr 
1055 23				inc hl 
1056 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1058 fe 0a			CP	00Ah		;Is it 0-9 ? 
105a 38 02			JR	C,NALPHA	;If so miss next bit 
105c d6 07			SUB	007h		;Else convert alpha 
105e			NALPHA: 
105e b2				OR	D		;Add hi nibble back 
105f c9				RET			; 
1060			 
1060			 
1060			; 
1060			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1060			; Since the routines get_byte and therefore get_nibble are called, only valid 
1060			; characters (0-9a-f) are accepted. 
1060			; 
1060			;get_word        push    af 
1060			;                call    get_byte        ; Get the upper byte 
1060			;                ld      h, a 
1060			;                call    get_byte        ; Get the lower byte 
1060			;                ld      l, a 
1060			;                pop     af 
1060			;                ret 
1060			; 
1060			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1060			; the routine get_nibble is used only valid characters are accepted - the  
1060			; input routine only accepts characters 0-9a-f. 
1060			; 
1060 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1061 7e					ld a,(hl) 
1062 23					inc hl 
1063 cd 88 10		                call    nibble2val      ; Get upper nibble 
1066 cb 07		                rlc     a 
1068 cb 07		                rlc     a 
106a cb 07		                rlc     a 
106c cb 07		                rlc     a 
106e 47			                ld      b, a            ; Save upper four bits 
106f 7e					ld a,(hl) 
1070 cd 88 10		                call    nibble2val      ; Get lower nibble 
1073 b0			                or      b               ; Combine both nibbles 
1074 c1			                pop     bc              ; Restore B (and C) 
1075 c9			                ret 
1076			; 
1076			; Get a hexadecimal digit from the serial line. This routine blocks until 
1076			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1076			; to the serial line interface. The lower 4 bits of A contain the value of  
1076			; that particular digit. 
1076			; 
1076			;get_nibble      ld a,(hl)           ; Read a character 
1076			;                call    to_upper        ; Convert to upper case 
1076			;                call    is_hex          ; Was it a hex digit? 
1076			;                jr      nc, get_nibble  ; No, get another character 
1076			 ;               call    nibble2val      ; Convert nibble to value 
1076			 ;               call    print_nibble 
1076			 ;               ret 
1076			; 
1076			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1076			; A valid hexadecimal digit is denoted by a set C flag. 
1076			; 
1076			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1076			;                ret     nc              ; Yes 
1076			;                cp      '0'             ; Less than '0'? 
1076			;                jr      nc, is_hex_1    ; No, continue 
1076			;                ccf                     ; Complement carry (i.e. clear it) 
1076			;                ret 
1076			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1076			;                ret     c               ; Yes 
1076			;                cp      'A'             ; Less than 'A'? 
1076			;                jr      nc, is_hex_2    ; No, continue 
1076			;                ccf                     ; Yes - clear carry and return 
1076			;                ret 
1076			;is_hex_2        scf                     ; Set carry 
1076			;                ret 
1076			; 
1076			; Convert a single character contained in A to upper case: 
1076			; 
1076 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1078 d8			                ret     c 
1079 fe 7b		                cp      'z' + 1         ; > 'z'? 
107b d0			                ret     nc              ; Nothing to do, either 
107c e6 5f		                and     $5f             ; Convert to upper case 
107e c9			                ret 
107f			 
107f			 
107f			to_lower: 
107f			 
107f			   ; if char is in [A-Z] make it lower case 
107f			 
107f			   ; enter : a = char 
107f			   ; exit  : a = lower case char 
107f			   ; uses  : af 
107f			 
107f fe 41		   cp 'A' 
1081 d8			   ret c 
1082			    
1082 fe 5b		   cp 'Z'+1 
1084 d0			   ret nc 
1085			    
1085 f6 20		   or $20 
1087 c9			   ret 
1088			 
1088			; 
1088			; Expects a hexadecimal digit (upper case!) in A and returns the 
1088			; corresponding value in A. 
1088			; 
1088 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
108a 38 02		                jr      c, nibble2val_1 ; Yes 
108c d6 07		                sub     7               ; Adjust for A-F 
108e d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1090 e6 0f		                and     $f              ; Only return lower 4 bits 
1092 c9			                ret 
1093			; 
1093			; Print_nibble prints a single hex nibble which is contained in the lower  
1093			; four bits of A: 
1093			; 
1093			;print_nibble    push    af              ; We won't destroy the contents of A 
1093			;                and     $f              ; Just in case... 
1093			;                add     a, '0'             ; If we have a digit we are done here. 
1093			;                cp      '9' + 1         ; Is the result > 9? 
1093			;                jr      c, print_nibble_1 
1093			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1093			;print_nibble_1  call    putc            ; Print the nibble and 
1093			;                pop     af              ; restore the original value of A 
1093			;                ret 
1093			;; 
1093			;; Send a CR/LF pair: 
1093			; 
1093			;crlf            push    af 
1093			;                ld      a, cr 
1093			;                call    putc 
1093			;                ld      a, lf 
1093			;                call    putc 
1093			;                pop     af 
1093			;                ret 
1093			; 
1093			; Print_word prints the four hex digits of a word to the serial line. The  
1093			; word is expected to be in HL. 
1093			; 
1093			;print_word      push    hl 
1093			;                push    af 
1093			;                ld      a, h 
1093			;                call    print_byte 
1093			;                ld      a, l 
1093			;                call    print_byte 
1093			;                pop     af 
1093			;                pop     hl 
1093			;                ret 
1093			; 
1093			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1093			; The byte to be printed is expected to be in A. 
1093			; 
1093			;print_byte      push    af              ; Save the contents of the registers 
1093			;                push    bc 
1093			;                ld      b, a 
1093			;                rrca 
1093			;                rrca 
1093			;                rrca 
1093			;                rrca 
1093			;                call    print_nibble    ; Print high nibble 
1093			;                ld      a, b 
1093			;                call    print_nibble    ; Print low nibble 
1093			;                pop     bc              ; Restore original register contents 
1093			;                pop     af 
1093			;                ret 
1093			 
1093			 
1093			 
1093			 
1093			 
1093			fourehexhl:  
1093 7e				ld a,(hl) 
1094 cd 42 10			call atohex 
1097 cb 3f				SRL A 
1099 cb 3f				SRL A 
109b cb 3f				SRL A 
109d cb 3f				SRL A 
109f 47				ld b, a 
10a0 23				inc hl 
10a1 7e				ld a,(hl) 
10a2 23				inc hl 
10a3 cd 42 10			call atohex 
10a6 80				add b 
10a7 57				ld d,a 
10a8 7e				ld a,(hl) 
10a9 cd 42 10			call atohex 
10ac cb 3f				SRL A 
10ae cb 3f				SRL A 
10b0 cb 3f				SRL A 
10b2 cb 3f				SRL A 
10b4 47				ld b, a 
10b5 23				inc hl 
10b6 7e				ld a,(hl) 
10b7 23				inc hl 
10b8 cd 42 10			call atohex 
10bb 80				add b 
10bc 5f				ld e, a 
10bd d5				push de 
10be e1				pop hl 
10bf c9				ret 
10c0			 
10c0			; pass hl. returns z set if the byte at hl is a digit 
10c0			;isdigithl:  
10c0			;	push bc 
10c0			;	ld a,(hl) 
10c0			;	cp ':' 
10c0			;	jr nc, .isdf 		; > 
10c0			;	cp '0' 
10c0			;	jr c, .isdf		; < 
10c0			; 
10c0			;	; TODO find a better way to set z 
10c0			; 
10c0			;	ld b,a 
10c0			;	cp b 
10c0			;	pop bc 
10c0			;	ret 
10c0			; 
10c0			;.isdf:	; not digit so clear z 
10c0			; 
10c0			;	; TODO find a better way to unset z 
10c0			; 
10c0			;	ld b,a 
10c0			;	inc b 
10c0			;	cp b 
10c0			; 
10c0			;	pop bc 
10c0			;	ret 
10c0				 
10c0				 
10c0			 
10c0			 
10c0			; pass hl as the four byte address to load 
10c0			 
10c0			get_word_hl:  
10c0 e5				push hl 
10c1 cd 60 10			call get_byte 
10c4				 
10c4 47				ld b, a 
10c5			 
10c5 e1				pop hl 
10c6 23				inc hl 
10c7 23				inc hl 
10c8			 
10c8			; TODO not able to handle a-f  
10c8 7e				ld a,(hl) 
10c9			;	;cp ':' 
10c9			;	cp 'g' 
10c9			;	jr nc, .single_byte_hl 		; > 
10c9			;	cp 'G' 
10c9			;	jr nc, .single_byte_hl 		; > 
10c9			;	cp '0' 
10c9			;	jr c, .single_byte_hl		; < 
10c9			 
10c9				;call isdigithl 
10c9 fe 00			cp 0 
10cb 28 06			jr z, .single_byte_hl 
10cd			 
10cd			.getwhln:   ; hex word so get next byte 
10cd			 
10cd cd 60 10			call get_byte 
10d0 6f				ld l, a 
10d1 60				ld h,b 
10d2 c9				ret 
10d3 68			.single_byte_hl:   ld l,b 
10d4 26 00				ld h,0 
10d6 c9					ret 
10d7			 
10d7			 
10d7			 
10d7			 
10d7 21 3b 19			ld hl,asc+1 
10da			;	ld a, (hl) 
10da			;	call nibble2val 
10da cd 60 10			call get_byte 
10dd			 
10dd			;	call fourehexhl 
10dd 32 51 ee			ld (scratch+52),a 
10e0				 
10e0 21 4f ee			ld hl,scratch+50 
10e3 22 40 f1			ld (os_cur_ptr),hl 
10e6			 
10e6 c9				ret 
10e7			 
10e7			 
10e7			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10e7			 
10e7			; Decimal Unsigned Version 
10e7			 
10e7			;Number in a to decimal ASCII 
10e7			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10e7			;Example: display a=56 as "056" 
10e7			;input: a = number 
10e7			;Output: a=0,value of a in the screen 
10e7			;destroys af,bc (don't know about hl and de) 
10e7			DispAToASCII: 
10e7 0e 9c			ld	c,-100 
10e9 cd f3 10			call	.Na1 
10ec 0e f6			ld	c,-10 
10ee cd f3 10			call	.Na1 
10f1 0e ff			ld	c,-1 
10f3 06 2f		.Na1:	ld	b,'0'-1 
10f5 04			.Na2:	inc	b 
10f6 81				add	a,c 
10f7 38 fc			jr	c,.Na2 
10f9 91				sub	c		;works as add 100/10/1 
10fa f5				push af		;safer than ld c,a 
10fb 78				ld	a,b		;char is in b 
10fc			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10fc f1				pop af		;safer than ld a,c 
10fd c9				ret 
10fe			 
10fe			; Decimal Signed Version 
10fe			 
10fe			; DispA 
10fe			; -------------------------------------------------------------- 
10fe			; Converts a signed integer value to a zero-terminated ASCII 
10fe			; string representative of that value (using radix 10). 
10fe			; -------------------------------------------------------------- 
10fe			; INPUTS: 
10fe			;     HL     Value to convert (two's complement integer). 
10fe			;     DE     Base address of string destination. (pointer). 
10fe			; -------------------------------------------------------------- 
10fe			; OUTPUTS: 
10fe			;     None 
10fe			; -------------------------------------------------------------- 
10fe			; REGISTERS/MEMORY DESTROYED 
10fe			; AF HL 
10fe			; -------------------------------------------------------------- 
10fe			 
10fe			;DispHLToASCII: 
10fe			;   push    de 
10fe			;   push    bc 
10fe			; 
10fe			;; Detect sign of HL. 
10fe			;    bit    7, h 
10fe			;    jr     z, ._DoConvert 
10fe			; 
10fe			;; HL is negative. Output '-' to string and negate HL. 
10fe			;    ld     a, '-' 
10fe			;    ld     (de), a 
10fe			;    inc    de 
10fe			; 
10fe			;; Negate HL (using two's complement) 
10fe			;    xor    a 
10fe			;    sub    l 
10fe			;    ld     l, a 
10fe			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10fe			;    sbc    a, h 
10fe			;    ld     h, a 
10fe			; 
10fe			;; Convert HL to digit characters 
10fe			;._DoConvert: 
10fe			;    ld     b, 0     ; B will count character length of number 
10fe			;-   ld     a, 10 
10fe			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10fe			;    push   af 
10fe			;    inc    b 
10fe			;    ld     a, h 
10fe			;    or     l 
10fe			;    jr     nz, - 
10fe			; 
10fe			;; Retrieve digits from stack 
10fe			;-   pop    af 
10fe			;    or     $30 
10fe			;    ld     (de), a 
10fe			;    inc    de 
10fe			;    djnz   - 
10fe			; 
10fe			;; Terminate string with NULL 
10fe			;    xor    a 
10fe			;    ld     (de), a 
10fe			; 
10fe			;    pop    bc 
10fe			;    pop    de 
10fe			;    ret 
10fe			 
10fe			;Comments 
10fe			; 
10fe			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10fe			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10fe			;    Note that the output string will not be fixed-width. 
10fe			; 
10fe			;Example Usage 
10fe			; 
10fe			;    ld    hl, -1004 
10fe			;    ld    de, OP1 
10fe			;    call  DispA 
10fe			;    ld    hl, OP1 
10fe			;    syscall  PutS 
10fe			 
10fe			 
10fe			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10fe			 
10fe			 
10fe			;Converts an ASCII string to an unsigned 16-bit integer 
10fe			;Quits when it reaches a non-decimal digit 
10fe			 
10fe			string_to_uint16: 
10fe			atoui_16: 
10fe			;Input: 
10fe			;     DE points to the string 
10fe			;Outputs: 
10fe			;     HL is the result 
10fe			;     A is the 8-bit value of the number 
10fe			;     DE points to the byte after the number 
10fe			;Destroys: 
10fe			;     BC 
10fe			;       if the string is non-empty, BC is HL/10 
10fe			;Size:  24 bytes 
10fe			;Speed: 42+d(104+{0,9}) 
10fe			;       d is the number of digits in the number 
10fe			;       max is 640 cycles for a 5 digit number 
10fe			;Assuming no leading zeros: 
10fe			;1 digit:  146cc 
10fe			;2 digit:  250cc 
10fe			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10fe			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10fe			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10fe			;avg: 544.81158447265625cc (544+13297/16384) 
10fe			;=============================================================== 
10fe 21 00 00		  ld hl,0 
1101			.u16a: 
1101 1a			  ld a,(de) 
1102 d6 30		  sub 30h 
1104 fe 0a		  cp 10 
1106 d0			  ret nc 
1107 13			  inc de 
1108 44			  ld b,h 
1109 4d			  ld c,l 
110a 29			  add hl,hl 
110b 29			  add hl,hl 
110c 09			  add hl,bc 
110d 29			  add hl,hl 
110e 85			  add a,l 
110f 6f			  ld l,a 
1110 30 ef		  jr nc,.u16a 
1112 24			  inc h 
1113 c3 01 11		  jp .u16a 
1116			 
1116			 
1116			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
1116			 
1116			;written by Zeda 
1116			;Converts a 16-bit unsigned integer to an ASCII string. 
1116			 
1116			uitoa_16: 
1116			;Input: 
1116			;   DE is the number to convert 
1116			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
1116			;Output: 
1116			;   HL points to the null-terminated ASCII string 
1116			;      NOTE: This isn't necessarily the same as the input HL. 
1116 d5			  push de 
1117 c5			  push bc 
1118 f5			  push af 
1119 eb			  ex de,hl 
111a			 
111a 01 f0 d8		  ld bc,-10000 
111d 3e 2f		  ld a,'0'-1 
111f 3c			  inc a 
1120 09			  add hl,bc  
1121 38 fc		   jr c,$-2 
1123 12			  ld (de),a 
1124 13			  inc de 
1125			 
1125 01 e8 03		  ld bc,1000 
1128 3e 3a		  ld a,'9'+1 
112a 3d			  dec a  
112b 09			  add hl,bc  
112c 30 fc		   jr nc,$-2 
112e 12			  ld (de),a 
112f 13			  inc de 
1130			 
1130 01 9c ff		  ld bc,-100 
1133 3e 2f		  ld a,'0'-1 
1135 3c			  inc a  
1136 09			  add hl,bc  
1137 38 fc		   jr c,$-2 
1139 12			  ld (de),a 
113a 13			  inc de 
113b			 
113b 7d			  ld a,l 
113c 26 3a		  ld h,'9'+1 
113e 25			  dec h  
113f c6 0a		  add a,10  
1141 30 fb		   jr nc,$-3 
1143 c6 30		  add a,'0' 
1145 eb			  ex de,hl 
1146 72			  ld (hl),d 
1147 23			  inc hl 
1148 77			  ld (hl),a 
1149 23			  inc hl 
114a 36 00		  ld (hl),0 
114c			 
114c			;Now strip the leading zeros 
114c 0e fa		  ld c,-6 
114e 09			  add hl,bc 
114f 3e 30		  ld a,'0' 
1151 23			  inc hl  
1152 be			  cp (hl)  
1153 28 fc		  jr z,$-2 
1155			 
1155			;Make sure that the string is non-empty! 
1155 7e			  ld a,(hl) 
1156 b7			  or a 
1157 20 01		  jr nz,.atoub 
1159 2b			  dec hl 
115a			.atoub: 
115a			 
115a f1			  pop af 
115b c1			  pop bc 
115c d1			  pop de 
115d c9			  ret 
115e			 
115e			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
115e			 
115e			toUpper: 
115e			;A is the char. 
115e			;If A is a lowercase letter, this sets it to the matching uppercase 
115e			;18cc or 30cc or 41cc 
115e			;avg: 26.75cc 
115e fe 61		  cp 'a' 
1160 d8			  ret c 
1161 fe 7b		  cp 'z'+1 
1163 d0			  ret nc 
1164 d6 20		  sub 'a'-'A' 
1166 c9			  ret 
1167			 
1167			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1167			 
1167			; String Length 
1167			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1167			 
1167			; Get the length of the null-terminated string starting at $8000 hl 
1167			;    LD     HL, $8000 
1167			 
1167			strlenz: 
1167			 
1167 af			    XOR    A               ; Zero is the value we are looking for. 
1168 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1169 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
116d 6f			    LD     L, A             ; number of bytes 
116e ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1170 2b			    DEC    HL              ; Compensate for null. 
1171 c9				ret 
1172			 
1172			; Get the length of the A terminated string starting at $8000 hl 
1172			;    LD     HL, $8000 
1172			 
1172			strlent: 
1172			 
1172			                  ; A is the value we are looking for. 
1172 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1174 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1176			                           ; 65, 536 bytes (the entire addressable memory space). 
1176 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1178			 
1178			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1178 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
117a 2e 00		    LD     L, 0             ; number of bytes 
117c ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
117e 2b			    DEC    HL              ; Compensate for null. 
117f c9				ret 
1180			 
1180			 
1180			;Comparing Strings 
1180			 
1180			;IN    HL     Address of string1. 
1180			;      DE     Address of string2. 
1180			 
1180			; doc given but wrong??? 
1180			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1180			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1180			; tested 
1180			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1180			 
1180			strcmp_old: 
1180 e5			    PUSH   HL 
1181 d5			    PUSH   DE 
1182			 
1182 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1183 be			    CP     (HL)            ; (want to minimize work). 
1184 38 01		    JR     C, Str1IsBigger 
1186 7e			    LD     A, (HL) 
1187			 
1187			Str1IsBigger: 
1187 4f			    LD     C, A             ; Put length in BC 
1188 06 00		    LD     B, 0 
118a 13			    INC    DE              ; Increment pointers to meat of string. 
118b 23			    INC    HL 
118c			 
118c			CmpLoop: 
118c 1a			    LD     A, (DE)          ; Compare bytes. 
118d ed a1		    CPI 
118f 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1191 13			    INC    DE              ; Update pointer. 
1192 ea 8c 11		    JP     PE, CmpLoop 
1195			 
1195 d1			    POP    DE 
1196 e1			    POP    HL 
1197 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1198 be			    CP     (HL) 
1199 c9			    RET 
119a			 
119a			NoMatch: 
119a 2b			    DEC    HL 
119b be			    CP     (HL)            ; Compare again to affect carry. 
119c d1			    POP    DE 
119d e1			    POP    HL 
119e c9			    RET 
119f			 
119f			;; test strmp 
119f			; 
119f			;ld de, .str1 
119f			;ld hl, .str2 
119f			;call strcmp 
119f			;jr z, .z1 
119f			;;this 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "NZ1" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			;.z1: 
119f			; 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "ZZ1" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			; 
119f			;ld de, .str1 
119f			;ld hl, .str1 
119f			;call strcmp 
119f			;jr z, .z2 
119f			;;this 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "NZ2" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			;.z2: 
119f			; 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "ZZ2" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			; 
119f			;ld de, .str1 
119f			;ld hl, .str2 
119f			;call strcmp 
119f			;jr c, .c1 
119f			; 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "Nc1" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			;.c1: 
119f			;;this 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "cc1" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			; 
119f			;ld de, .str1 
119f			;ld hl, .str1 
119f			;call strcmp 
119f			;jr c, .c2 
119f			;;this 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "Nc2" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			;.c2: 
119f			; 
119f			;	if DEBUG_FORTH_WORDS 
119f			;		DMARK "cc2" 
119f			;		CALLMONITOR 
119f			;	endif 
119f			;	NEXTW 
119f			;.str1:   db "string1",0 
119f			;.str2:   db "string2",0 
119f			 
119f			; only care about direct match or not 
119f			; hl and de strings 
119f			; zero set if the same 
119f			 
119f			strcmp: 
119f 1a				ld a, (de) 
11a0 be				cp (hl) 
11a1 28 02			jr z, .ssame 
11a3 b7				or a 
11a4 c9				ret 
11a5			 
11a5			.ssame:  
11a5 fe 00			cp 0 
11a7 c8				ret z 
11a8			 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f3			jr strcmp 
11ac				 
11ac				 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				ld a, 0 
11ac				ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				ld a, 0 
11ac				ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				ld a, 0 
11ac				ld (os_view_disable), a 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 0e 80		      ld    HL, heap_start 
11b0 22 0a 80		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 0c 80		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 ff ed		      ld    HL, heap_start+heap_size-4 
11bc 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 f1 6d		      ld    HL, heap_size-4 
11c2 22 10 80		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 01 ee		      ld    (heap_start+heap_size-2), HL 
11cb 22 ff ed		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 0a 80		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			if SOUND_ENABLE  
1369				include "firmware_sound.asm"  
1369			; Sound abstraction layer 
1369			 
1369			; support different sound chips through common interface 
1369			 
1369			SOUND_DEVICE_AY: equ 0 
1369			 
1369			SOUND_DEVICE: equ Device_A 
1369			 
1369			 
1369			 
1369			if SOUND_DEVICE_AY 
1369				include "firmware_sound_ay38910.asm" 
1369			else 
1369				include "firmware_sound_sn76489an.asm" 
1369			 
1369			; Device support for SN76489AN sound chip 
1369			 
1369			; https://arduinoplusplus.wordpress.com/2019/10/05/making-noise-with-a-sn76489-digital-sound-generator-part-1/ 
1369			; http://danceswithferrets.org/geekblog/?p=93 
1369			; https://www.smspower.org/Development/SN76489 
1369			 
1369			; D0 [ 3] 
1369			; D1 [ 2] 
1369			; D2 [ 1] 
1369			; D3 [15] 
1369			; D4 [13] 
1369			; D5 [12] 
1369			; D6 [11] 
1369			; D7 [10] 
1369			; /WE [ 5] 
1369			; CLK [14] 
1369			; /OE [ 6] 
1369			; AUDIO [ 7] 
1369			; GND 8 
1369			; +5 16 
1369			; 
1369			 
1369			; Write sequence: 
1369			; CE low 
1369			; Data bus 
1369			; WE low then high 
1369			; 32 clock cycles / 8ns write time at 4mhz 
1369			; 
1369			; https://github.com/jblang/SN76489 
1369			; Shows that the clock needs to be enabled when required. Noticed that with the clock connected it interupted the bus 
1369			; Tried: 
1369			; 
1369			; CE/OE -> Both pins of NAND -> To one pin of second NAND and second pin to full clock -> CLK on chip 
1369			; 
1369			; Connected WE to OR too 
1369			;  
1369			; That enabled the clock when required 
1369			; However still random bus corruption. Need further investigation 
1369			 
1369			 
1369			SOUND_LATCH: equ 10000000B 
1369			SOUND_DATA: equ 0B 
1369			SOUND_CH0:  equ 0B    ; Tone 
1369			SOUND_CH1: equ 0100000B        ; Tone 
1369			SOUND_CH2: equ 1000000B   ; Tone 
1369			SOUND_CH3: equ 1100000B    ; Noise 
1369			SOUND_VOL: equ 10000B 
1369			SOUND_TONE: equ 0B 
1369			 
1369			 
1369			sound_init: 
1369 3e 1f			ld a, SOUND_DATA | SOUND_CH0 | SOUND_VOL | 1111B 
136b cd 80 13			call note_send_byte 
136e 3e 07			ld a, SOUND_DATA | SOUND_CH0 | SOUND_TONE | 0111B 
1370 cd 80 13			call note_send_byte 
1373 cd 49 0a			call delay250ms 
1376 3e 05			ld a, SOUND_DATA | SOUND_CH0 | SOUND_TONE | 0101B 
1378 cd 80 13			call note_send_byte 
137b cd 49 0a			call delay250ms 
137e c9				ret 
137f			 
137f			; Play a note 
137f			; h = note 
137f			; l = duration 
137f			; a = channel 
137f			 
137f			 
137f			;  frequ = clock / ( 2 x reg valu x 32 )  
137f			 
137f			note:  
137f				 
137f			 
137f c9				ret 
1380			 
1380			note_send_byte: 
1380				; byte in a 
1380			 
1380				; we high 
1380 d3 40			out (Device_B), a 
1382			;	ld a, 1 
1382			;	call aDelayInMS 
1382 00				nop  
1383 00				nop  
1384 00				nop  
1385 00				nop  
1386				; we low 
1386 d3 40			out (Device_B), a 
1388			;	ld a, 1 
1388			;	call aDelayInMS 
1388 00				nop  
1389 00				nop  
138a 00				nop  
138b 00				nop  
138c				; we high 
138c d3 40			out (Device_B), a 
138e			;	ld a, 1 
138e			;	call aDelayInMS 
138e 00				nop  
138f 00				nop  
1390 00				nop  
1391 00				nop  
1392			 
1392			 
1392 c9				ret 
1393			 
1393			;void SilenceAllChannels() 
1393			;{ 
1393			;  SendByte(0x9f); 
1393			;  SendByte(0xbf); 
1393			;  SendByte(0xdf); 
1393			;  SendByte(0xff); 
1393			;} 
1393			 
1393			 
1393			; eof 
1393			 
# End of file firmware_sound_sn76489an.asm
1393			endif 
1393			 
1393			 
1393			; Abstraction entry points 
1393			 
1393			; init  
1393			 
1393			; sound_init in specific hardware files 
1393			 
1393			; Play a note 
1393			; h = note 
1393			; l = duration 
1393			; a = channel 
1393			 
1393			;note:     
1393			;	ret 
1393			 
1393			 
1393			 
1393			 
1393			; eof 
1393			 
# End of file firmware_sound.asm
1393			endif  
1393			  
1393			include "firmware_diags.asm"  
1393			; Hardware diags menu 
1393			 
1393			 
1393			config: 
1393			 
1393 3e 00			ld a, 0 
1395 21 b9 13			ld hl, .configmn 
1398 cd 06 0b			call menu 
139b			 
139b fe 00			cp 0 
139d c8				ret z 
139e			 
139e fe 01			cp 1 
13a0 cc 7e 14			call z, .savetostore 
13a3			 
13a3 fe 02			cp 2 
13a5 cc 3f 14			call z, .selautoload 
13a8 fe 03			cp 3 
13aa cc 7c 14			call z, .selbank 
13ad fe 05			cp 5 
13af cc 59 15			call z, .debug_tog 
13b2 fe 06			cp 6 
13b4 cc 7f 15			call z, hardware_diags 
13b7			 
13b7 18 da			jr config 
13b9			 
13b9			.configmn: 
13b9 c7 13			dw .c3 
13bb e3 13			dw .c2 
13bd f8 13			dw .c2b 
13bf 0c 14			dw .c4 
13c1 15 14			dw .m4 
13c3 30 14			dw .c1 
13c5 00 00			dw 0 
13c7				 
13c7			 
13c7 .. 00		.c3: db "Add User Dictionary To File",0 
13e3 .. 00		.c2: db "Select Autoload File",0 
13f8 .. 00		.c2b: db "Select Storage Bank",0 
140c .. 00		.c4: db "Settings",0 
1415 .. 00		.m4:   db "Debug & Breakpoints On/Off",0 
1430 .. 00		.c1: db "Hardware Diags",0 
143f			 
143f			; Select auto start 
143f			 
143f			.selautoload: 
143f			 
143f				 
143f				if STORAGE_SE 
143f			 
143f cd a3 14				call config_dir 
1442 21 1d ee			        ld hl, scratch 
1445 3e 00				ld a, 0 
1447 cd 06 0b				call menu 
144a			 
144a					; locate menu option 
144a			 
144a 21 1d ee				ld hl, scratch 
144d cd 2d 0a				call table_lookup 
1450			 
1450					; with the pointer to the menu it, the byte following the zero term is the file id 
1450			 
1450 3e 00				ld a, 0 
1452 01 32 00				ld bc, 50   ; max of bytes to look at 
1455 ed b1				cpir  
1457			 
1457 23					inc hl 
1458			 
1458 7e					ld a, (hl)   ; file id 
1459					 
1459				        ; save bank and file ids 
1459			 
1459 f5					push af 
145a			 
145a cd bd 03				call storage_get_block_0 
145d			 
145d f1					pop af 
145e			 
145e 32 86 f8				ld (store_page+STORE_0_FILERUN),a 
1461					 
1461					; save bank id 
1461			 
1461 3a 48 f8				ld a,(spi_device) 
1464 32 85 f8				ld (store_page+STORE_0_BANKRUN),a 
1467			 
1467					; enable auto run of store file 
1467 3e 01				ld a, 1 
1469 32 83 f8				ld (store_page+STORE_0_AUTOFILE),a 
146c			 
146c					; save buffer 
146c			 
146c 21 00 00				ld hl, 0 
146f 11 62 f8				ld de, store_page 
1472 cd 71 03			call storage_write_block	 ; save update 
1475			  
1475			 
1475			 
1475			 
1475 21 1d ee				ld hl, scratch 
1478 cd 90 14				call config_fdir 
147b			 
147b			 
147b				endif 
147b c9				ret 
147c			 
147c			 
147c			 
147c			; Select storage bank 
147c			 
147c			.selbank: 
147c			 
147c				if STORAGE_SE 
147c				endif 
147c				 
147c c9				ret 
147d			 
147d			if STORAGE_SE 
147d			 
147d			.config_ldir:   
147d				; Load storage bank labels into menu array 
147d			 
147d				 
147d			 
147d			 
147d c9				ret 
147e			 
147e			 
147e			endif 
147e			 
147e			 
147e			; Save user words to storage 
147e			 
147e			.savetostore: 
147e			 
147e				if STORAGE_SE 
147e			 
147e cd a3 14				call config_dir 
1481 21 1d ee			        ld hl, scratch 
1484 3e 00				ld a, 0 
1486 cd 06 0b				call menu 
1489					 
1489 21 1d ee				ld hl, scratch 
148c cd 90 14				call config_fdir 
148f			 
148f			 
148f				endif 
148f			 
148f c9				ret 
1490			 
1490			 
1490			 
1490			if STORAGE_SE 
1490			 
1490			config_fdir: 
1490				; using the scratch dir go through and release the memory allocated for each string 
1490				 
1490 21 1d ee			ld hl, scratch 
1493 5e			.cfdir:	ld e,(hl) 
1494 23				inc hl 
1495 56				ld d,(hl) 
1496 23				inc hl 
1497			 
1497 eb				ex de, hl 
1498 cd 32 0d			call ishlzero 
149b c8				ret z     ; return on null pointer 
149c cd 9a 12			call free 
149f eb				ex de, hl 
14a0 18 f1			jr .cfdir 
14a2			 
14a2			 
14a2 c9				ret 
14a3			 
14a3			 
14a3			config_dir: 
14a3			 
14a3				; for the config menus that need to build a directory of storage call this routine 
14a3				; it will construct a menu in scratch to pass to menu 
14a3			 
14a3				; open storage device 
14a3			 
14a3				; execute DIR to build a list of files and their ids into scratch in menu format 
14a3				; once the menu has finished then will need to call config_fdir to release the strings 
14a3				 
14a3				; c = number items 
14a3			 
14a3				 
14a3 cd bd 03			call storage_get_block_0 
14a6			 
14a6 21 62 f8			ld hl, store_page     ; get current id count 
14a9 46				ld b, (hl) 
14aa 0e 00			ld c, 0    ; count of files   
14ac			 
14ac			 
14ac 21 1d ee			ld hl, scratch 
14af 22 5e f8			ld (store_tmp2), hl    ; location to poke strings 
14b2			 
14b2				; check for empty drive 
14b2			 
14b2 3e 00			ld a, 0 
14b4 b8				cp b 
14b5 ca 4f 15			jp z, .dirdone 
14b8			 
14b8				 
14b8					if DEBUG_FORTH_WORDS 
14b8						DMARK "Cdc" 
14b8 f5				push af  
14b9 3a cd 14			ld a, (.dmark)  
14bc 32 77 fb			ld (debug_mark),a  
14bf 3a ce 14			ld a, (.dmark+1)  
14c2 32 78 fb			ld (debug_mark+1),a  
14c5 3a cf 14			ld a, (.dmark+2)  
14c8 32 79 fb			ld (debug_mark+2),a  
14cb 18 03			jr .pastdmark  
14cd ..			.dmark: db "Cdc"  
14d0 f1			.pastdmark: pop af  
14d1			endm  
# End of macro DMARK
14d1						CALLMONITOR 
14d1 cd 97 16			call break_point_state  
14d4				endm  
# End of macro CALLMONITOR
14d4					endif 
14d4			 
14d4			 
14d4			.diritem:	 
14d4 c5				push bc 
14d5				; for each of the current ids do a search for them and if found push to stack 
14d5			 
14d5 21 40 00				ld hl, STORE_BLOCK_PHY 
14d8 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
14da 58					ld e,b 
14db			 
14db cd 2d 06				call storage_findnextid 
14de			 
14de			 
14de					; if found hl will be non zero 
14de			 
14de cd 32 0d				call ishlzero 
14e1 28 69				jr z, .dirnotfound 
14e3			 
14e3					; increase count 
14e3			 
14e3 c1					pop bc	 
14e4 0c					inc c 
14e5 c5					push bc 
14e6					 
14e6			 
14e6					; get file header and push the file name 
14e6			 
14e6 11 62 f8				ld de, store_page 
14e9 cd 0c 03				call storage_read_block 
14ec			 
14ec					; push file id to stack 
14ec				 
14ec 3a 62 f8				ld a, (store_page) 
14ef 26 00				ld h, 0 
14f1 6f					ld l, a 
14f2			 
14f2					;call forth_push_numhl 
14f2					; TODO store id 
14f2			 
14f2 e5					push hl 
14f3			 
14f3					; push extent count to stack  
14f3				 
14f3 21 65 f8				ld hl, store_page+3 
14f6			 
14f6					; get file name length 
14f6			 
14f6 cd 67 11				call strlenz   
14f9			 
14f9 23					inc hl   ; cover zero term 
14fa 23					inc hl  ; stick the id at the end of the area 
14fb			 
14fb e5					push hl 
14fc c1					pop bc    ; move length to bc 
14fd			 
14fd cd d0 11				call malloc 
1500			 
1500					; TODO save malloc area to scratch 
1500			 
1500 eb					ex de, hl 
1501 2a 5e f8				ld hl, (store_tmp2) 
1504 73					ld (hl), e 
1505 23					inc hl 
1506 72					ld (hl), d 
1507 23					inc hl 
1508 22 5e f8				ld (store_tmp2), hl 
150b			 
150b					 
150b			 
150b					;pop hl   ; get source 
150b			;		ex de, hl    ; swap aronund	 
150b			 
150b 21 65 f8				ld hl, store_page+3 
150e					if DEBUG_FORTH_WORDS 
150e						DMARK "CFd" 
150e f5				push af  
150f 3a 23 15			ld a, (.dmark)  
1512 32 77 fb			ld (debug_mark),a  
1515 3a 24 15			ld a, (.dmark+1)  
1518 32 78 fb			ld (debug_mark+1),a  
151b 3a 25 15			ld a, (.dmark+2)  
151e 32 79 fb			ld (debug_mark+2),a  
1521 18 03			jr .pastdmark  
1523 ..			.dmark: db "CFd"  
1526 f1			.pastdmark: pop af  
1527			endm  
# End of macro DMARK
1527						CALLMONITOR 
1527 cd 97 16			call break_point_state  
152a				endm  
# End of macro CALLMONITOR
152a					endif 
152a ed b0				ldir 
152c			 
152c					; de is past string, move back one and store id 
152c					 
152c 1b					dec de 
152d			 
152d					; store file id 
152d			 
152d e1					pop hl 
152e eb					ex de,hl 
152f 73					ld (hl), e 
1530			 
1530					if DEBUG_FORTH_WORDS 
1530						DMARK "Cdi" 
1530 f5				push af  
1531 3a 45 15			ld a, (.dmark)  
1534 32 77 fb			ld (debug_mark),a  
1537 3a 46 15			ld a, (.dmark+1)  
153a 32 78 fb			ld (debug_mark+1),a  
153d 3a 47 15			ld a, (.dmark+2)  
1540 32 79 fb			ld (debug_mark+2),a  
1543 18 03			jr .pastdmark  
1545 ..			.dmark: db "Cdi"  
1548 f1			.pastdmark: pop af  
1549			endm  
# End of macro DMARK
1549						CALLMONITOR 
1549 cd 97 16			call break_point_state  
154c				endm  
# End of macro CALLMONITOR
154c					endif 
154c					 
154c			.dirnotfound: 
154c c1					pop bc     
154d 10 85				djnz .diritem 
154f				 
154f			.dirdone:	 
154f			 
154f 3e 00				ld a, 0 
1551 2a 5e f8				ld hl, (store_tmp2) 
1554 77					ld (hl), a 
1555 23					inc hl 
1556 77					ld (hl), a 
1557 23					inc hl 
1558					; push a count of the dir items found 
1558			 
1558			;		ld h, 0 
1558			;		ld l, c 
1558			 
1558 c9				ret 
1559			 
1559			endif 
1559			 
1559			 
1559			; Settings 
1559			; Run  
1559			 
1559			 
1559			 
1559			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
1559			;;hd_menu2:   db "        2: Editor",0   
1559			;hd_menu2:   db "        2: Editor       6: Menu",0   
1559			;hd_menu3:   db "        3: Storage",0 
1559			;hd_menu4:   db "0=quit  4: Debug",0 
1559			;hd_don:     db "ON",0 
1559			;hd_doff:     db "OFF",0 
1559			; 
1559			; 
1559			; 
1559			;hardware_diags_old:       
1559			; 
1559			;.diagmenu: 
1559			;	call clear_display 
1559			;	ld a, display_row_1 
1559			;	ld de, hd_menu1 
1559			;	call str_at_display 
1559			; 
1559			;	ld a, display_row_2 
1559			;	ld de, hd_menu2 
1559			;	call str_at_display 
1559			; 
1559			;	ld a, display_row_3 
1559			;	ld de, hd_menu3 
1559			;	call str_at_display 
1559			; 
1559			;	ld a,  display_row_4 
1559			;	ld de, hd_menu4 
1559			;	call str_at_display 
1559			; 
1559			;	; display debug state 
1559			; 
1559			;	ld de, hd_don 
1559			;	ld a, (os_view_disable) 
1559			;	cp 0 
1559			;	jr z, .distog 
1559			;	ld de, hd_doff 
1559			;.distog: ld a, display_row_4+17 
1559			;	call str_at_display 
1559			; 
1559			;	call update_display 
1559			; 
1559			;	call cin_wait 
1559			; 
1559			; 
1559			; 
1559			;	cp '4' 
1559			;	jr nz, .diagn1 
1559			; 
1559			;	; debug toggle 
1559			; 
1559			;	ld a, (os_view_disable) 
1559			;	ld b, '*' 
1559			;	cp 0 
1559			;	jr z, .debtog 
1559			;	ld b, 0 
1559			;.debtog:	 
1559			;	ld a,b 
1559			;	ld (os_view_disable),a 
1559			; 
1559			;.diagn1: cp '0' 
1559			;	 ret z 
1559			; 
1559			;;	cp '1' 
1559			;;       jp z, matrix	 
1559			;;   TODO keyboard matrix test 
1559			; 
1559			;	cp '2' 
1559			;	jp z, .diagedit 
1559			; 
1559			;;	cp '6' 
1559			;;	jp z, .menutest 
1559			;;if ENABLE_BASIC 
1559			;;	cp '6' 
1559			;;	jp z, basic 
1559			;;endif 
1559			 ; 
1559			;	jp .diagmenu 
1559			; 
1559			; 
1559			;	ret 
1559			 
1559			 
1559			.debug_tog: 
1559 21 a0 15			ld hl, .menudebug 
155c				 
155c 3a 0e ee			ld a, (os_view_disable) 
155f fe 2a			cp '*' 
1561 20 04			jr nz,.tdon  
1563 3e 01			ld a, 1 
1565 18 02			jr .tog1 
1567 3e 00		.tdon: ld a, 0 
1569			 
1569			.tog1: 
1569 cd 06 0b			call menu 
156c fe 00			cp 0 
156e c8				ret z 
156f fe 01			cp 1    ; disable debug 
1571 28 04			jr z, .dtog0 
1573 3e 2a			ld a, '*' 
1575 18 02			jr .dtogset 
1577 3e 00		.dtog0: ld a, 0 
1579 32 0e ee		.dtogset:  ld (os_view_disable), a 
157c c3 59 15			jp .debug_tog 
157f			 
157f			 
157f			hardware_diags:       
157f			 
157f			.diagm: 
157f 21 92 15			ld hl, .menuitems 
1582 3e 00			ld a, 0 
1584 cd 06 0b			call menu 
1587			 
1587 fe 00		         cp 0 
1589 c8				 ret z 
158a			 
158a fe 02			cp 2 
158c ca eb 15			jp z, .diagedit 
158f			 
158f			;	cp '6' 
158f			;	jp z, .menutest 
158f			;if ENABLE_BASIC 
158f			;	cp '6' 
158f			;	jp z, basic 
158f			;endif 
158f			  
158f c3 7f 15			jp .diagm 
1592			 
1592				 
1592 a6 15		.menuitems:   	dw .m1 
1594 b1 15				dw .m2 
1596 b8 15				dw .m3 
1598 c0 15				dw .m5 
159a c6 15				dw .m5a 
159c cf 15				dw .m5b 
159e 00 00				dw 0 
15a0			 
15a0			.menudebug: 
15a0 d8 15				dw .m6 
15a2 e1 15				dw .m7 
15a4 00 00				dw 0 
15a6			 
15a6 .. 00		.m1:   db "Key Matrix",0 
15b1 .. 00		.m2:   db "Editor",0 
15b8 .. 00		.m3:   db "Storage",0 
15c0 .. 00		.m5:   db "Sound",0 
15c6 .. 00		.m5a:  db "RAM Test",0 
15cf .. 00		.m5b:  db "LCD Test",0 
15d8			 
15d8 .. 00		.m6:   db "Debug ON",0 
15e1 .. 00		.m7:   db "Debug OFF",0 
15eb			 
15eb			; debug editor 
15eb			 
15eb			.diagedit: 
15eb			 
15eb 21 1d ee			ld hl, scratch 
15ee			;	ld bc, 250 
15ee			;	ldir 
15ee				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
15ee 3e 00			ld a, 0 
15f0 77				ld (hl), a 
15f1 23				inc hl 
15f2 77				ld (hl), a 
15f3 23				inc hl 
15f4 77				ld (hl), a 
15f5			 
15f5 cd d5 0a		        call clear_display 
15f8 cd f8 0a			call update_display 
15fb 3e 01			ld a, 1 
15fd 32 7d fb			ld (hardware_diag), a 
1600			.diloop: 
1600 3e 00			ld a, display_row_1 
1602 0e 00			ld c, 0 
1604 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1606 1e 28			ld e, 40 
1608			 
1608 21 1d ee			ld hl, scratch	 
160b cd 36 0d			call input_str 
160e			 
160e 3e 28			ld a, display_row_2 
1610 11 1d ee			ld de, scratch 
1613 cd e8 0a			call str_at_display 
1616 cd f8 0a			call update_display 
1619			 
1619 c3 00 16			jp .diloop 
161c			 
161c			 
161c			; pass word in hl 
161c			; a has display location 
161c			display_word_at: 
161c f5				push af 
161d e5				push hl 
161e 7c				ld a,h 
161f 21 22 f1			ld hl, os_word_scratch 
1622 cd 0a 10			call hexout 
1625 e1				pop hl 
1626 7d				ld a,l 
1627 21 24 f1			ld hl, os_word_scratch+2 
162a cd 0a 10			call hexout 
162d 21 26 f1			ld hl, os_word_scratch+4 
1630 3e 00			ld a,0 
1632 77				ld (hl),a 
1633 11 22 f1			ld de,os_word_scratch 
1636 f1				pop af 
1637 cd e8 0a				call str_at_display 
163a c9				ret 
163b			 
163b			display_ptr_state: 
163b			 
163b				; to restore afterwards 
163b			 
163b d5				push de 
163c c5				push bc 
163d e5				push hl 
163e f5				push af 
163f			 
163f				; for use in here 
163f			 
163f			;	push bc 
163f			;	push de 
163f			;	push hl 
163f			;	push af 
163f			 
163f cd d5 0a			call clear_display 
1642			 
1642 11 15 18			ld de, .ptrstate 
1645 3e 00			ld a, display_row_1 
1647 cd e8 0a			call str_at_display 
164a			 
164a				; display debug step 
164a			 
164a			 
164a 11 77 fb			ld de, debug_mark 
164d 3e 26			ld a, display_row_1+display_cols-2 
164f cd e8 0a			call str_at_display 
1652			 
1652				; display a 
1652 11 1f 18			ld de, .ptrcliptr 
1655 3e 28			ld a, display_row_2 
1657 cd e8 0a			call str_at_display 
165a			 
165a f1				pop af 
165b 2a 28 f8			ld hl,(cli_ptr) 
165e 3e 30			ld a, display_row_2+8 
1660 cd 1c 16			call display_word_at 
1663			 
1663			 
1663				; display hl 
1663			 
1663			 
1663 11 27 18			ld de, .ptrclioptr 
1666 3e 32			ld a, display_row_2+10 
1668 cd e8 0a			call str_at_display 
166b			; 
166b			;	pop hl 
166b 3e 35			ld a, display_row_2+13 
166d 2a 26 f8			ld hl,(cli_origptr) 
1670 cd 1c 16			call display_word_at 
1673			; 
1673			;	 
1673			;	; display de 
1673			 
1673			;	ld de, .regstatede 
1673			;	ld a, display_row_3 
1673			;	call str_at_display 
1673			 
1673			;	pop de 
1673			;	ld h,d 
1673			;	ld l, e 
1673			;	ld a, display_row_3+3 
1673			;	call display_word_at 
1673			 
1673			 
1673				; display bc 
1673			 
1673			;	ld de, .regstatebc 
1673			;	ld a, display_row_3+10 
1673			;	call str_at_display 
1673			 
1673			;	pop bc 
1673			;	ld h,b 
1673			;	ld l, c 
1673			;	ld a, display_row_3+13 
1673			;	call display_word_at 
1673			 
1673			 
1673				; display dsp 
1673			 
1673			;	ld de, .regstatedsp 
1673			;	ld a, display_row_4 
1673			;	call str_at_display 
1673			 
1673				 
1673			;	ld hl,(cli_data_sp) 
1673			;	ld a, display_row_4+4 
1673			;	call display_word_at 
1673			 
1673				; display rsp 
1673			 
1673 11 56 18			ld de, .regstatersp 
1676 3e 82			ld a, display_row_4+10 
1678 cd e8 0a			call str_at_display 
167b			 
167b				 
167b 2a 0e f8			ld hl,(cli_ret_sp) 
167e 3e 86			ld a, display_row_4+14 
1680 cd 1c 16			call display_word_at 
1683			 
1683 cd f8 0a			call update_display 
1686			 
1686 cd 55 0a			call delay1s 
1689 cd 55 0a			call delay1s 
168c cd 55 0a			call delay1s 
168f			 
168f			 
168f cd 9c 1b			call next_page_prompt 
1692			 
1692				; restore  
1692			 
1692 f1				pop af 
1693 e1				pop hl 
1694 c1				pop bc 
1695 d1				pop de 
1696 c9				ret 
1697			 
1697			break_point_state: 
1697 f5				push af 
1698			 
1698				; see if disabled 
1698			 
1698 3a 0e ee			ld a, (os_view_disable) 
169b fe 2a			cp '*' 
169d 20 02			jr nz, .bpsgo 
169f f1				pop af 
16a0 c9				ret 
16a1			 
16a1			.bpsgo: 
16a1 f1				pop af 
16a2 f5				push af 
16a3 22 0a ee			ld (os_view_hl), hl 
16a6 ed 53 08 ee		ld (os_view_de), de 
16aa ed 43 06 ee		ld (os_view_bc), bc 
16ae e5				push hl 
16af 6f				ld l, a 
16b0 26 00			ld h, 0 
16b2 22 0c ee			ld (os_view_af),hl 
16b5			 
16b5 21 bd fa				ld hl, display_fb0 
16b8 22 d8 f8				ld (display_fb_active), hl 
16bb e1				pop hl	 
16bc			 
16bc 3e 31			ld a, '1' 
16be fe 2a		.bps1:  cp '*' 
16c0 20 03			jr nz, .bps1b 
16c2 32 0e ee			ld (os_view_disable),a 
16c5 fe 31		.bps1b:  cp '1' 
16c7 20 14			jr nz, .bps2 
16c9			 
16c9				; display reg 
16c9			 
16c9				 
16c9			 
16c9 3a 0c ee			ld a, (os_view_af) 
16cc 2a 0a ee			ld hl, (os_view_hl) 
16cf ed 5b 08 ee		ld de, (os_view_de) 
16d3 ed 4b 06 ee		ld bc, (os_view_bc) 
16d7 cd 71 17			call display_reg_state 
16da c3 5d 17			jp .bpschk 
16dd			 
16dd fe 32		.bps2:  cp '2' 
16df 20 08			jr nz, .bps3 
16e1				 
16e1				; display hl 
16e1 2a 0a ee			ld hl, (os_view_hl) 
16e4 cd 5b 18			call display_dump_at_hl 
16e7			 
16e7 18 74			jr .bpschk 
16e9			 
16e9 fe 33		.bps3:  cp '3' 
16eb 20 08			jr nz, .bps4 
16ed			 
16ed			        ; display de 
16ed 2a 08 ee			ld hl, (os_view_de) 
16f0 cd 5b 18			call display_dump_at_hl 
16f3			 
16f3 18 68			jr .bpschk 
16f5 fe 34		.bps4:  cp '4' 
16f7 20 08			jr nz, .bps5 
16f9			 
16f9			        ; display bc 
16f9 2a 06 ee			ld hl, (os_view_bc) 
16fc cd 5b 18			call display_dump_at_hl 
16ff			 
16ff 18 5c			jr .bpschk 
1701 fe 35		.bps5:  cp '5' 
1703 20 08		        jr nz, .bps7 
1705			 
1705				; display cur ptr 
1705 2a 28 f8			ld hl, (cli_ptr) 
1708 cd 5b 18			call display_dump_at_hl 
170b			 
170b 18 50			jr .bpschk 
170d fe 36		.bps7:  cp '6' 
170f 20 08			jr nz, .bps8b 
1711				 
1711				; display cur orig ptr 
1711 2a 26 f8			ld hl, (cli_origptr) 
1714 cd 5b 18			call display_dump_at_hl 
1717 18 44			jr .bpschk 
1719 fe 37		.bps8b:  cp '7' 
171b 20 08			jr nz, .bps9 
171d				 
171d				; display dsp 
171d 2a 0a f8			ld hl, (cli_data_sp) 
1720 cd 5b 18			call display_dump_at_hl 
1723			 
1723 18 38			jr .bpschk 
1725 fe 39		.bps9:  cp '9' 
1727 20 05			jr nz, .bps8c 
1729				 
1729				; display SP 
1729			;	ld hl, sp 
1729 cd 5b 18			call display_dump_at_hl 
172c			 
172c 18 2f			jr .bpschk 
172e fe 38		.bps8c:  cp '8' 
1730 20 08			jr nz, .bps8d 
1732				 
1732				; display rsp 
1732 2a 0e f8			ld hl, (cli_ret_sp) 
1735 cd 5b 18			call display_dump_at_hl 
1738			 
1738 18 23			jr .bpschk 
173a fe 23		.bps8d:  cp '#'     ; access monitor sub system 
173c 20 05			jr nz, .bps8 
173e cd 92 19			call monitor 
1741			 
1741 18 1a			jr .bpschk 
1743 fe 30		.bps8:  cp '0' 
1745 20 16			jr nz, .bpschk 
1747			 
1747 21 1c fa				ld hl, display_fb1 
174a 22 d8 f8				ld (display_fb_active), hl 
174d cd f8 0a				call update_display 
1750			 
1750				;ld a, (os_view_af) 
1750 2a 0a ee			ld hl, (os_view_hl) 
1753 ed 5b 08 ee		ld de, (os_view_de) 
1757 ed 4b 06 ee		ld bc, (os_view_bc) 
175b f1				pop af 
175c c9				ret 
175d			 
175d			.bpschk:   
175d cd 55 0a			call delay1s 
1760 3e 9f		ld a,display_row_4 + display_cols - 1 
1762 11 9a 1b		        ld de, endprg 
1765 cd e8 0a			call str_at_display 
1768 cd f8 0a			call update_display 
176b cd 41 68			call cin_wait 
176e			 
176e c3 be 16			jp .bps1 
1771			 
1771			 
1771			display_reg_state: 
1771			 
1771				; to restore afterwards 
1771			 
1771 d5				push de 
1772 c5				push bc 
1773 e5				push hl 
1774 f5				push af 
1775			 
1775				; for use in here 
1775			 
1775 c5				push bc 
1776 d5				push de 
1777 e5				push hl 
1778 f5				push af 
1779			 
1779 cd d5 0a			call clear_display 
177c			 
177c 11 31 18			ld de, .regstate 
177f 3e 00			ld a, display_row_1 
1781 cd e8 0a			call str_at_display 
1784			 
1784				; display debug step 
1784			 
1784			 
1784 11 77 fb			ld de, debug_mark 
1787 3e 25			ld a, display_row_1+display_cols-3 
1789 cd e8 0a			call str_at_display 
178c			 
178c				; display a 
178c 11 4d 18			ld de, .regstatea 
178f 3e 28			ld a, display_row_2 
1791 cd e8 0a			call str_at_display 
1794			 
1794 e1				pop hl 
1795			;	ld h,0 
1795			;	ld l, a 
1795 3e 2b			ld a, display_row_2+3 
1797 cd 1c 16			call display_word_at 
179a			 
179a			 
179a				; display hl 
179a			 
179a			 
179a 11 41 18			ld de, .regstatehl 
179d 3e 32			ld a, display_row_2+10 
179f cd e8 0a			call str_at_display 
17a2			 
17a2 e1				pop hl 
17a3 3e 35			ld a, display_row_2+13 
17a5 cd 1c 16			call display_word_at 
17a8			 
17a8				 
17a8				; display de 
17a8			 
17a8 11 45 18			ld de, .regstatede 
17ab 3e 50			ld a, display_row_3 
17ad cd e8 0a			call str_at_display 
17b0			 
17b0 e1				pop hl 
17b1			;	ld h,d 
17b1			;	ld l, e 
17b1 3e 53			ld a, display_row_3+3 
17b3 cd 1c 16			call display_word_at 
17b6			 
17b6			 
17b6				; display bc 
17b6			 
17b6 11 49 18			ld de, .regstatebc 
17b9 3e 5a			ld a, display_row_3+10 
17bb cd e8 0a			call str_at_display 
17be			 
17be e1				pop hl 
17bf			;	ld h,b 
17bf			;	ld l, c 
17bf 3e 5d			ld a, display_row_3+13 
17c1 cd 1c 16			call display_word_at 
17c4			 
17c4			 
17c4				; display dsp 
17c4			 
17c4 11 51 18			ld de, .regstatedsp 
17c7 3e 78			ld a, display_row_4 
17c9 cd e8 0a			call str_at_display 
17cc			 
17cc				 
17cc 2a 0a f8			ld hl,(cli_data_sp) 
17cf 3e 7c			ld a, display_row_4+4 
17d1 cd 1c 16			call display_word_at 
17d4			 
17d4				; display rsp 
17d4			 
17d4 11 56 18			ld de, .regstatersp 
17d7 3e 82			ld a, display_row_4+10 
17d9 cd e8 0a			call str_at_display 
17dc			 
17dc				 
17dc 2a 0e f8			ld hl,(cli_ret_sp) 
17df 3e 86			ld a, display_row_4+14 
17e1 cd 1c 16			call display_word_at 
17e4			 
17e4 cd f8 0a			call update_display 
17e7			 
17e7			;	call delay1s 
17e7			;	call delay1s 
17e7			;	call delay1s 
17e7			 
17e7			 
17e7			;	call next_page_prompt 
17e7			 
17e7				; restore  
17e7			 
17e7 f1				pop af 
17e8 e1				pop hl 
17e9 c1				pop bc 
17ea d1				pop de 
17eb c9				ret 
17ec			 
17ec .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1800 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1815 .. 00		.ptrstate:	db "Ptr State",0 
181f .. 00		.ptrcliptr:     db "cli_ptr",0 
1827 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1831 .. 00		.regstate:	db "Reg State (1/0)",0 
1841 .. 00		.regstatehl:	db "HL:",0 
1845 .. 00		.regstatede:	db "DE:",0 
1849 .. 00		.regstatebc:	db "BC:",0 
184d .. 00		.regstatea:	db "A :",0 
1851 .. 00		.regstatedsp:	db "DSP:",0 
1856 .. 00		.regstatersp:	db "RSP:",0 
185b			 
185b			display_dump_at_hl: 
185b e5				push hl 
185c d5				push de 
185d c5				push bc 
185e f5				push af 
185f			 
185f 22 40 f1			ld (os_cur_ptr),hl	 
1862 cd d5 0a			call clear_display 
1865 cd a4 1a			call dumpcont 
1868			;	call delay1s 
1868			;	call next_page_prompt 
1868			 
1868			 
1868 f1				pop af 
1869 c1				pop bc 
186a d1				pop de 
186b e1				pop hl 
186c c9				ret 
186d			 
186d			;if ENABLE_BASIC 
186d			;	include "nascombasic.asm" 
186d			;	basic: 
186d			;	include "forth/FORTH.ASM" 
186d			;endif 
186d			 
186d			; eof 
186d			 
186d			 
# End of file firmware_diags.asm
186d			  
186d			  
186d			  
186d			  
186d			; eof  
186d			  
# End of file firmware.asm
186d			 
186d			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
186d			;if BASE_KEV  
186d			;baseram: equ 08000h 
186d			;endif 
186d			 
186d			;if BASE_SC114 
186d			;baseram:     equ    endofcode 
186d			;endif 
186d			 
186d			 
186d			; start system 
186d			 
186d			coldstart: 
186d				; set sp 
186d				; di/ei 
186d			 
186d f3				di 
186e 31 fd ff			ld sp, tos 
1871			;	ei 
1871			 
1871			 
1871				; disable breakpoint by default 
1871			 
1871 3e 2a			ld a,'*' 
1873 32 0e ee			ld (os_view_disable),a 
1876			 
1876				; init hardware 
1876			 
1876				; init keyboard and screen hardware 
1876			 
1876 cd 03 00			call hardware_init 
1879			 
1879			 
1879				; detect if any keys are held down to enable breakpoints at start up 
1879			 
1879 cd 52 68			call cin  
187c fe 00			cp 0 
187e 28 03			jr z, .nokeys 
1880			 
1880				;call hardware_diags 
1880 cd 93 13			call config 
1883			 
1883			;	ld de, .bpen 
1883			;	ld a, display_row_4 
1883			;	call str_at_display 
1883			;	call update_display 
1883			; 
1883			;	ld a,0 
1883			;	ld (os_view_disable),a 
1883			; 
1883			;.bpwait: 
1883			;	call cin 
1883			;	cp 0 
1883			;	jr z, .bpwait 
1883			;	jr .nokeys 
1883			; 
1883			; 
1883			;.bpen:  db "Break points enabled!",0 
1883			 
1883			 
1883			 
1883			 
1883			 
1883			 
1883			.nokeys: 
1883			 
1883			 
1883				 
1883			 
1883			;jp  testkey 
1883			 
1883			;call storage_get_block_0 
1883			; 
1883			;ld hl, 0 
1883			;ld de, store_page 
1883			;call storage_read_block 
1883			 
1883				 
1883			;ld hl, 10 
1883			;ld de, store_page 
1883			;call storage_read_block 
1883			 
1883			 
1883			 
1883			 
1883			 
1883			;stop:	nop 
1883			;	jp stop 
1883			 
1883			 
1883			 
1883			main: 
1883 cd d5 0a			call clear_display 
1886 cd f8 0a			call update_display 
1889			 
1889			 
1889			 
1889			;	call testlcd 
1889			 
1889			 
1889			 
1889 cd 62 1f			call forth_init 
188c			 
188c			 
188c			warmstart: 
188c cd 38 1f			call forth_warmstart 
188f			 
188f				; run startup word load 
188f			        ; TODO prevent this running at warmstart after crash  
188f			 
188f				if STARTUP_ENABLE 
188f cd 18 62				call forth_startup 
1892				endif 
1892			 
1892				; show free memory after boot 
1892 11 2c 19			ld de, freeram 
1895 3e 00			ld a, display_row_1 
1897 cd e8 0a			call str_at_display 
189a			 
189a			; Or use heap_size word???? 
189a 21 03 ee			ld hl, heap_end 
189d 11 0e 80			ld de, heap_start 
18a0 ed 52			sbc hl, de 
18a2 e5				push hl 
18a3 7c				ld a,h	         	 
18a4 21 22 f1			ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
18a7 cd 0a 10			call hexout 
18aa e1			   	pop hl 
18ab			 
18ab 7d				ld a,l 
18ac 21 24 f1			ld hl, os_word_scratch+2 
18af cd 0a 10			call hexout 
18b2 21 26 f1			ld hl, os_word_scratch+4 
18b5 3e 00			ld a, 0 
18b7 77				ld (hl),a 
18b8 11 22 f1			ld de, os_word_scratch 
18bb 3e 0d			ld a, display_row_1 + 13 
18bd cd e8 0a			call str_at_display 
18c0 cd f8 0a			call update_display 
18c3			 
18c3			 
18c3				;call demo 
18c3			 
18c3			 
18c3				; init scratch input area for cli commands 
18c3			 
18c3 21 44 f1			ld hl, os_cli_cmd 
18c6 3e 00			ld a,0 
18c8 77				ld (hl),a 
18c9 23				inc hl 
18ca 77				ld (hl),a 
18cb			 
18cb 3e 00			ld a,0 
18cd 32 43 f2			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
18d0			 
18d0 32 40 f1			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
18d3 32 41 f1			ld (os_cur_ptr+1),a	 
18d6			 
18d6 32 22 f1			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
18d9 32 23 f1			ld (os_word_scratch+1),a	 
18dc				 
18dc			 
18dc				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
18dc 21 44 f1			ld hl, os_cli_cmd 
18df			 
18df 3e 00			ld a, 0		 ; init cli input 
18e1 77				ld (hl), a 
18e2 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
18e4			cli: 
18e4				; show cli prompt 
18e4				;push af 
18e4				;ld a, 0 
18e4				;ld de, prompt 
18e4				;call str_at_display 
18e4			 
18e4				;call update_display 
18e4				;pop af 
18e4				;inc a 
18e4				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
18e4 0e 00			ld c, 0 
18e6 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
18e8 1e 28			ld e, 40 
18ea			 
18ea 21 44 f1			ld hl, os_cli_cmd 
18ed			 
18ed				STACKFRAME OFF $fefe $9f9f 
18ed				if DEBUG_STACK_IMB 
18ed					if OFF 
18ed						exx 
18ed						ld de, $fefe 
18ed						ld a, d 
18ed						ld hl, curframe 
18ed						call hexout 
18ed						ld a, e 
18ed						ld hl, curframe+2 
18ed						call hexout 
18ed						ld hl, $fefe 
18ed						push hl 
18ed						ld hl, $9f9f 
18ed						push hl 
18ed						exx 
18ed					endif 
18ed				endif 
18ed			endm 
# End of macro STACKFRAME
18ed			 
18ed cd 36 0d			call input_str 
18f0			 
18f0				STACKFRAMECHK OFF $fefe $9f9f 
18f0				if DEBUG_STACK_IMB 
18f0					if OFF 
18f0						exx 
18f0						ld hl, $9f9f 
18f0						pop de   ; $9f9f 
18f0						call cmp16 
18f0						jr nz, .spnosame 
18f0						ld hl, $fefe 
18f0						pop de   ; $fefe 
18f0						call cmp16 
18f0						jr z, .spfrsame 
18f0						.spnosame: call showsperror 
18f0						.spfrsame: nop 
18f0						exx 
18f0					endif 
18f0				endif 
18f0			endm 
# End of macro STACKFRAMECHK
18f0			 
18f0				; copy input to last command 
18f0			 
18f0 21 44 f1			ld hl, os_cli_cmd 
18f3 11 43 f2			ld de, os_last_cmd 
18f6 01 ff 00			ld bc, 255 
18f9 ed b0			ldir 
18fb			 
18fb				; wipe current buffer 
18fb			 
18fb			;	ld a, 0 
18fb			;	ld hl, os_cli_cmd 
18fb			;	ld de, os_cli_cmd+1 
18fb			;	ld bc, 254 
18fb			;	ldir 
18fb				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
18fb			;	call strcpy 
18fb			;	ld a, 0 
18fb			;	ld (hl), a 
18fb			;	inc hl 
18fb			;	ld (hl), a 
18fb			;	inc hl 
18fb			;	ld (hl), a 
18fb			 
18fb				; switch frame buffer to program  
18fb			 
18fb 21 1c fa				ld hl, display_fb1 
18fe 22 d8 f8				ld (display_fb_active), hl 
1901			 
1901			;	nop 
1901				STACKFRAME ON $fbfe $8f9f 
1901				if DEBUG_STACK_IMB 
1901					if ON 
1901						exx 
1901						ld de, $fbfe 
1901						ld a, d 
1901						ld hl, curframe 
1901						call hexout 
1901						ld a, e 
1901						ld hl, curframe+2 
1901						call hexout 
1901						ld hl, $fbfe 
1901						push hl 
1901						ld hl, $8f9f 
1901						push hl 
1901						exx 
1901					endif 
1901				endif 
1901			endm 
# End of macro STACKFRAME
1901				; first time into the parser so pass over the current scratch pad 
1901 21 44 f1			ld hl,os_cli_cmd 
1904				; tokenise the entered statement(s) in HL 
1904 cd db 1f			call forthparse 
1907			        ; exec forth statements in top of return stack 
1907 cd 1b 20			call forthexec 
190a				;call forthexec_cleanup 
190a			;	call parsenext 
190a			 
190a				STACKFRAMECHK ON $fbfe $8f9f 
190a				if DEBUG_STACK_IMB 
190a					if ON 
190a						exx 
190a						ld hl, $8f9f 
190a						pop de   ; $8f9f 
190a						call cmp16 
190a						jr nz, .spnosame 
190a						ld hl, $fbfe 
190a						pop de   ; $fbfe 
190a						call cmp16 
190a						jr z, .spfrsame 
190a						.spnosame: call showsperror 
190a						.spfrsame: nop 
190a						exx 
190a					endif 
190a				endif 
190a			endm 
# End of macro STACKFRAMECHK
190a				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
190a			 
190a 3e 78			ld a, display_row_4 
190c 11 3e 19			ld de, endprog 
190f			 
190f cd f8 0a			call update_display		 
1912			 
1912 cd 9c 1b			call next_page_prompt 
1915			 
1915				; switch frame buffer to cli 
1915			 
1915 21 bd fa				ld hl, display_fb0 
1918 22 d8 f8				ld (display_fb_active), hl 
191b			 
191b			 
191b cd d5 0a		        call clear_display 
191e cd f8 0a			call update_display		 
1921			 
1921 21 44 f1			ld hl, os_cli_cmd 
1924			 
1924 3e 00			ld a, 0		 ; init cli input 
1926 77				ld (hl), a 
1927			 
1927				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1927			 
1927				; now on last line 
1927			 
1927				; TODO scroll screen up 
1927			 
1927				; TODO instead just clear screen and place at top of screen 
1927			 
1927			;	ld a, 0 
1927			;	ld (f_cursor_ptr),a 
1927			 
1927				;call clear_display 
1927				;call update_display 
1927			 
1927				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1927 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1929 c3 e4 18			jp cli 
192c			 
192c .. 00		freeram: db "Free bytes: $",0 
193a ..			asc: db "1A2F" 
193e .. 00		endprog: db "End prog...",0 
194a			 
194a			testenter2:   
194a 21 4f ee			ld hl,scratch+50 
194d 22 40 f1			ld (os_cur_ptr),hl 
1950 c3 e4 18			jp cli 
1953			 
1953			testenter:  
1953			 
1953 21 3a 19			ld hl,asc 
1956			;	ld a,(hl) 
1956			;	call nibble2val 
1956 cd 60 10			call get_byte 
1959			 
1959			 
1959			;	ld a,(hl) 
1959			;	call atohex 
1959			 
1959			;	call fourehexhl 
1959 32 4f ee			ld (scratch+50),a 
195c			 
195c			 
195c			 
195c 21 3c 19			ld hl,asc+2 
195f			;	ld a, (hl) 
195f			;	call nibble2val 
195f cd 60 10			call get_byte 
1962			 
1962			;	call fourehexhl 
1962 32 51 ee			ld (scratch+52),a 
1965				 
1965 21 4f ee			ld hl,scratch+50 
1968 22 40 f1			ld (os_cur_ptr),hl 
196b c3 e4 18			jp cli 
196e			 
196e			enter:	 
196e 3a 21 ee			ld a,(scratch+4) 
1971 fe 00			cp 0 
1973 28 0c			jr z, .entercont 
1975				; no, not a null term line so has an address to work out.... 
1975			 
1975 21 1f ee			ld hl,scratch+2 
1978 cd c0 10			call get_word_hl 
197b			 
197b 22 40 f1			ld (os_cur_ptr),hl	 
197e c3 e4 18			jp cli 
1981			 
1981			 
1981			.entercont:  
1981			 
1981 21 1f ee			ld hl, scratch+2 
1984 cd 60 10			call get_byte 
1987			 
1987 2a 40 f1		   	ld hl,(os_cur_ptr) 
198a 77					ld (hl),a 
198b 23					inc hl 
198c 22 40 f1				ld (os_cur_ptr),hl 
198f				 
198f			; get byte  
198f			 
198f			 
198f c3 e4 18			jp cli 
1992			 
1992			 
1992			; basic monitor support 
1992			 
1992			monitor: 
1992				;  
1992 cd d5 0a			call clear_display 
1995 3e 00			ld a, 0 
1997 11 df 19			ld de, .monprompt 
199a cd e8 0a			call str_at_display 
199d cd f8 0a			call update_display 
19a0			 
19a0				; get a monitor command 
19a0			 
19a0 0e 00			ld c, 0     ; entry at top left 
19a2 16 64			ld d, 100   ; max buffer size 
19a4 1e 0f			ld e, 15    ; input scroll area 
19a6 3e 00			ld a, 0     ; init string 
19a8 21 1b f0			ld hl, os_input 
19ab 77				ld (hl), a 
19ac 23				inc hl 
19ad 77				ld (hl), a 
19ae 21 1b f0			ld hl, os_input 
19b1 3e 01			ld a, 1     ; init string 
19b3 cd 36 0d			call input_str 
19b6			 
19b6 cd d5 0a		        call clear_display 
19b9 cd f8 0a			call update_display		 
19bc			 
19bc 3a 1b f0			ld a, (os_input) 
19bf cd 5e 11			call toUpper 
19c2 fe 48		        cp 'H' 
19c4 28 6f		        jr z, .monhelp 
19c6 fe 44			cp 'D'		; dump 
19c8 ca 56 1a			jp z, .mondump	 
19cb fe 43			cp 'C'		; dump 
19cd ca 70 1a			jp z, .moncdump	 
19d0 fe 4d			cp 'M'		; dump 
19d2 ca e1 19			jp z, .moneditstart 
19d5 fe 55			cp 'U'		; dump 
19d7 28 14			jr z, .monedit	 
19d9 fe 51			cp 'Q'		; dump 
19db c8				ret z	 
19dc			 
19dc			 
19dc				; TODO "S" to access symbol by name and not need the address 
19dc				; TODO "F" to find a string in memory 
19dc			 
19dc c3 92 19			jp monitor 
19df			 
19df .. 00		.monprompt: db ">", 0 
19e1			 
19e1			.moneditstart: 
19e1				; get starting address 
19e1			 
19e1 21 1d f0			ld hl,os_input+2 
19e4 cd c0 10			call get_word_hl 
19e7			 
19e7 22 40 f1			ld (os_cur_ptr),hl	 
19ea			 
19ea c3 92 19			jp monitor 
19ed			 
19ed			.monedit: 
19ed				; get byte to load 
19ed			 
19ed 21 1d f0			ld hl,os_input+2 
19f0 cd 60 10			call get_byte 
19f3			 
19f3				; get address to update 
19f3 2a 40 f1			ld hl, (os_cur_ptr) 
19f6			 
19f6				; update byte 
19f6			 
19f6 77				ld (hl), a 
19f7			 
19f7				; move to next address and save it 
19f7			 
19f7 23				inc hl 
19f8 22 40 f1			ld (os_cur_ptr),hl	 
19fb			 
19fb c3 92 19			jp monitor 
19fe			 
19fe			 
19fe .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1a12 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1a2e .. 00		.monhelptext3:  db "Q-Quit",0 
1a35			        
1a35			.monhelp: 
1a35 3e 00			ld a, display_row_1 
1a37 11 fe 19		        ld de, .monhelptext1 
1a3a			 
1a3a cd e8 0a			call str_at_display 
1a3d 3e 28			ld a, display_row_2 
1a3f 11 12 1a		        ld de, .monhelptext2 
1a42					 
1a42 cd e8 0a			call str_at_display 
1a45 3e 50			ld a, display_row_3 
1a47 11 2e 1a		        ld de, .monhelptext3 
1a4a					 
1a4a cd e8 0a			call str_at_display 
1a4d cd f8 0a			call update_display		 
1a50			 
1a50 cd 9c 1b			call next_page_prompt 
1a53 c3 92 19			jp monitor 
1a56			 
1a56			.mondump:    
1a56 21 1d f0			ld hl,os_input+2 
1a59 cd c0 10			call get_word_hl 
1a5c			 
1a5c 22 40 f1			ld (os_cur_ptr),hl	 
1a5f cd a4 1a			call dumpcont 
1a62 3e 78			ld a, display_row_4 
1a64 11 3e 19			ld de, endprog 
1a67			 
1a67 cd f8 0a			call update_display		 
1a6a			 
1a6a cd 9c 1b			call next_page_prompt 
1a6d c3 92 19			jp monitor 
1a70			.moncdump: 
1a70 cd a4 1a			call dumpcont 
1a73 3e 78			ld a, display_row_4 
1a75 11 3e 19			ld de, endprog 
1a78			 
1a78 cd f8 0a			call update_display		 
1a7b			 
1a7b cd 9c 1b			call next_page_prompt 
1a7e c3 92 19			jp monitor 
1a81			 
1a81			 
1a81			; TODO symbol access  
1a81			 
1a81			.symbols:     ;; A list of symbols that can be called up  
1a81 bd fa			dw display_fb0 
1a83 .. 00			db "fb0",0  
1a87 62 f8		     	dw store_page 
1a89 .. 00			db "store_page",0 
1a94			 
1a94			 
1a94			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a94			 
1a94 3a 1e ee			ld a,(scratch+1) 
1a97 fe 00			cp 0 
1a99 28 09			jr z, dumpcont 
1a9b			 
1a9b				; no, not a null term line so has an address to work out.... 
1a9b			 
1a9b 21 1f ee			ld hl,scratch+2 
1a9e cd c0 10			call get_word_hl 
1aa1			 
1aa1 22 40 f1			ld (os_cur_ptr),hl	 
1aa4			 
1aa4			 
1aa4			 
1aa4			dumpcont: 
1aa4			 
1aa4				; dump bytes at ptr 
1aa4			 
1aa4			 
1aa4 3e 00			ld a, display_row_1 
1aa6 2a d8 f8			ld hl, (display_fb_active) 
1aa9 cd 09 0d			call addatohl 
1aac cd d4 1a			call .dumpbyterow 
1aaf			 
1aaf 3e 28			ld a, display_row_2 
1ab1 2a d8 f8			ld hl, (display_fb_active) 
1ab4 cd 09 0d			call addatohl 
1ab7 cd d4 1a			call .dumpbyterow 
1aba			 
1aba			 
1aba 3e 50			ld a, display_row_3 
1abc 2a d8 f8			ld hl, (display_fb_active) 
1abf cd 09 0d			call addatohl 
1ac2 cd d4 1a			call .dumpbyterow 
1ac5			 
1ac5 3e 78			ld a, display_row_4 
1ac7 2a d8 f8			ld hl, (display_fb_active) 
1aca cd 09 0d			call addatohl 
1acd cd d4 1a			call .dumpbyterow 
1ad0			 
1ad0 cd f8 0a			call update_display 
1ad3			;		jp cli 
1ad3 c9				ret 
1ad4			 
1ad4			.dumpbyterow: 
1ad4			 
1ad4				;push af 
1ad4			 
1ad4 e5				push hl 
1ad5			 
1ad5				; calc where to poke the ascii 
1ad5			if display_cols == 20 
1ad5				ld a, 16 
1ad5			else 
1ad5 3e 1f			ld a, 31 
1ad7			endif 
1ad7			 
1ad7 cd 09 0d			call addatohl 
1ada 22 22 f1			ld (os_word_scratch),hl  		; save pos for later 
1add			 
1add			 
1add			; display decoding address 
1add 2a 40 f1		   	ld hl,(os_cur_ptr) 
1ae0			 
1ae0 7c				ld a,h 
1ae1 e1				pop hl 
1ae2 e5				push hl 
1ae3			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1ae3 cd 0a 10			call hexout 
1ae6 2a 40 f1		   	ld hl,(os_cur_ptr) 
1ae9			 
1ae9 7d				ld a,l 
1aea e1				pop hl 
1aeb 23				inc hl 
1aec 23				inc hl 
1aed e5				push hl 
1aee			;	ld hl, os_word_scratch+2 
1aee cd 0a 10			call hexout 
1af1 e1				pop hl 
1af2 23				inc hl 
1af3 23				inc hl 
1af4				;ld hl, os_word_scratch+4 
1af4 3e 3a			ld a, ':' 
1af6 77				ld (hl),a 
1af7 23				inc hl 
1af8				;ld a, 0 
1af8				;ld (hl),a 
1af8				;ld de, os_word_scratch 
1af8				;pop af 
1af8				;push af 
1af8			;		ld a, display_row_2 
1af8			;		call str_at_display 
1af8			;		call update_display 
1af8			 
1af8			 
1af8			;pop af 
1af8			;	add 5 
1af8			 
1af8			if display_cols == 20 
1af8				ld b, 4 
1af8			else 
1af8 06 08			ld b, 8 
1afa			endif	 
1afa			 
1afa			.dumpbyte: 
1afa c5				push bc 
1afb e5				push hl 
1afc			 
1afc			 
1afc 2a 40 f1		   	ld hl,(os_cur_ptr) 
1aff 7e					ld a,(hl) 
1b00			 
1b00					; poke the ascii to display 
1b00 2a 22 f1				ld hl,(os_word_scratch) 
1b03 77					ld (hl),a 
1b04 23					inc hl 
1b05 22 22 f1				ld (os_word_scratch),hl 
1b08			 
1b08					 
1b08			 
1b08			 
1b08 e1					pop hl 
1b09 e5					push hl 
1b0a			 
1b0a cd 0a 10				call hexout 
1b0d			 
1b0d					 
1b0d 2a 40 f1		   	ld hl,(os_cur_ptr) 
1b10 23				inc hl 
1b11 22 40 f1		   	ld (os_cur_ptr),hl 
1b14			 
1b14 e1					pop hl 
1b15 23					inc hl 
1b16 23					inc hl 
1b17 23					inc hl 
1b18			 
1b18			 
1b18			 
1b18					;ld a,0 
1b18					;ld (os_word_scratch+2),a 
1b18					;pop af 
1b18					;push af 
1b18			 
1b18					;ld de, os_word_scratch 
1b18					;call str_at_display 
1b18			;		call update_display 
1b18			;		pop af 
1b18 c1					pop bc 
1b19 c6 03				add 3 
1b1b 10 dd			djnz .dumpbyte 
1b1d			 
1b1d				 
1b1d			 
1b1d c9				ret 
1b1e			 
1b1e			jump:	 
1b1e			 
1b1e 21 1f ee			ld hl,scratch+2 
1b21 cd c0 10			call get_word_hl 
1b24				;ld hl,(scratch+2) 
1b24				;call fourehexhl 
1b24			 
1b24 22 40 f1			ld (os_cur_ptr),hl	 
1b27			 
1b27 e9				jp (hl) 
1b28			 
1b28			 
1b28			 
1b28			; TODO implement a basic monitor mode to start with 
1b28			 
1b28			 
1b28			 
1b28			 
1b28			 
1b28			 
1b28			 
1b28			 
1b28			 
1b28			; testing and demo code during development 
1b28			 
1b28			 
1b28 .. 00		str1: db "Enter some text...",0 
1b3b .. 00		clear: db "                    ",0 
1b50			 
1b50			demo: 
1b50			 
1b50			 
1b50			 
1b50			;	call update_display 
1b50			 
1b50				; init scratch input area for testing 
1b50 21 1d ee			ld hl, scratch	 
1b53 3e 00			ld a,0 
1b55 77				ld (hl),a 
1b56			 
1b56			 
1b56 3e 28		            LD   A, display_row_2 
1b58			;            CALL fLCD_Pos       ;Position cursor to location in A 
1b58 11 28 1b		            LD   DE, str1 
1b5b cd e8 0a			call str_at_display 
1b5e			 
1b5e			;            CALL fLCD_Str       ;Display string pointed to by DE 
1b5e			cloop:	 
1b5e 3e 50		            LD   A, display_row_3 
1b60			;            CALL fLCD_Pos       ;Position cursor to location in A 
1b60 11 3b 1b		            LD   DE, clear 
1b63			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1b63 cd e8 0a				call str_at_display 
1b66 3e 78			ld a, display_row_4 
1b68 11 98 1b			ld de, prompt 
1b6b			 
1b6b cd e8 0a				call str_at_display 
1b6e cd f8 0a			call update_display 
1b71			 
1b71 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1b73 16 0a			ld d, 10 
1b75 21 1d ee			ld hl, scratch	 
1b78 cd 36 0d			call input_str 
1b7b			 
1b7b			;	call clear_display 
1b7b			;'	call update_display 
1b7b			 
1b7b 3e 00		            LD   A, display_row_1 
1b7d			;            CALL fLCD_Pos       ;Position cursor to location in A 
1b7d 11 3b 1b		            LD   DE, clear 
1b80 cd e8 0a				call str_at_display 
1b83			;            CALL fLCD_Str       ;Display string pointed to by DE 
1b83 3e 00		            LD   A, display_row_1 
1b85			;            CALL fLCD_Pos       ;Position cursor to location in A 
1b85 11 1d ee		            LD   DE, scratch 
1b88			;            CALL fLCD_Str       ;Display string pointed to by DE 
1b88 cd e8 0a				call str_at_display 
1b8b cd f8 0a			call update_display 
1b8e			 
1b8e 3e 00				ld a,0 
1b90 21 1d ee			ld hl, scratch 
1b93 77				ld (hl),a 
1b94			 
1b94 00				nop 
1b95 c3 5e 1b			jp cloop 
1b98			 
1b98			 
1b98			 
1b98			; OS Prompt 
1b98			 
1b98 .. 00		prompt: db ">",0 
1b9a .. 00		endprg: db "?",0 
1b9c			 
1b9c			 
1b9c			; handy next page prompt 
1b9c			next_page_prompt: 
1b9c e5				push hl 
1b9d d5				push de 
1b9e f5				push af 
1b9f c5				push bc 
1ba0			 
1ba0 3e 9f			ld a,display_row_4 + display_cols - 1 
1ba2 11 9a 1b		        ld de, endprg 
1ba5 cd e8 0a			call str_at_display 
1ba8 cd f8 0a			call update_display 
1bab cd 41 68			call cin_wait 
1bae c1				pop bc 
1baf f1				pop af 
1bb0 d1				pop de 
1bb1 e1				pop hl 
1bb2			 
1bb2			 
1bb2 c9				ret 
1bb3			 
1bb3			 
1bb3			; forth parser 
1bb3			 
1bb3			; My forth kernel 
1bb3			include "forth_kernel.asm" 
1bb3			; 
1bb3			; kernel to the forth OS 
1bb3			 
1bb3			DS_TYPE_STR: equ 1     ; string type 
1bb3			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1bb3			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1bb3			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1bb3			 
1bb3			FORTH_PARSEV1: equ 0 
1bb3			FORTH_PARSEV2: equ 0 
1bb3			FORTH_PARSEV3: equ 0 
1bb3			FORTH_PARSEV4: equ 0 
1bb3			FORTH_PARSEV5: equ 1 
1bb3			 
1bb3			;if FORTH_PARSEV5 
1bb3			;	FORTH_END_BUFFER: equ 0 
1bb3			;else 
1bb3			FORTH_END_BUFFER: equ 127 
1bb3			;endif 
1bb3			 
1bb3			FORTH_TRUE: equ 1 
1bb3			FORTH_FALSE: equ 0 
1bb3			 
1bb3			if FORTH_PARSEV4 
1bb3			include "forth_stackops.asm" 
1bb3			endif 
1bb3			 
1bb3			if FORTH_PARSEV5 
1bb3			include "forth_stackopsv5.asm" 
1bb3			 
1bb3			; Stack operations for v5 parser on wards 
1bb3			; * DATA stack 
1bb3			; * LOOP stack 
1bb3			; * RETURN stack 
1bb3			 
1bb3			 
1bb3			 
1bb3			FORTH_CHK_DSP_UNDER: macro 
1bb3				push hl 
1bb3				push de 
1bb3				ld hl,(cli_data_sp) 
1bb3				ld de, cli_data_stack 
1bb3				call cmp16 
1bb3				jp c, fault_dsp_under 
1bb3				pop de 
1bb3				pop hl 
1bb3				endm 
1bb3			 
1bb3			 
1bb3			FORTH_CHK_RSP_UNDER: macro 
1bb3				push hl 
1bb3				push de 
1bb3				ld hl,(cli_ret_sp) 
1bb3				ld de, cli_ret_stack 
1bb3				call cmp16 
1bb3				jp c, fault_rsp_under 
1bb3				pop de 
1bb3				pop hl 
1bb3				endm 
1bb3			 
1bb3			FORTH_CHK_LOOP_UNDER: macro 
1bb3				push hl 
1bb3				push de 
1bb3				ld hl,(cli_loop_sp) 
1bb3				ld de, cli_loop_stack 
1bb3				call cmp16 
1bb3				jp c, fault_loop_under 
1bb3				pop de 
1bb3				pop hl 
1bb3				endm 
1bb3			 
1bb3			FORTH_ERR_TOS_NOTSTR: macro 
1bb3				; TOSO might need more for checks when used 
1bb3				push af 
1bb3				ld a,(hl) 
1bb3				cp DS_TYPE_STR 
1bb3				jp nz, type_faultn   
1bb3				pop af 
1bb3				endm 
1bb3			 
1bb3			FORTH_ERR_TOS_NOTNUM: macro 
1bb3				push af 
1bb3				ld a,(hl) 
1bb3				cp DS_TYPE_INUM 
1bb3				jp nz, type_faultn   
1bb3				pop af 
1bb3				endm 
1bb3			 
1bb3			 
1bb3			; increase data stack pointer and save hl to it 
1bb3				 
1bb3			FORTH_DSP_NEXT: macro 
1bb3				call macro_forth_dsp_next 
1bb3				endm 
1bb3			 
1bb3			 
1bb3			macro_forth_dsp_next: 
1bb3				if DEBUG_FORTH_STACK_GUARD 
1bb3 cd e2 62				call check_stacks 
1bb6				endif 
1bb6 e5				push hl 
1bb7 d5				push de 
1bb8 eb				ex de,hl 
1bb9 2a 0a f8			ld hl,(cli_data_sp) 
1bbc 23				inc hl 
1bbd 23				inc hl 
1bbe			 
1bbe			; PARSEV5 
1bbe 23				inc hl 
1bbf 22 0a f8			ld (cli_data_sp),hl 
1bc2 73				ld (hl), e 
1bc3 23				inc hl 
1bc4 72				ld (hl), d 
1bc5 d1				pop de 
1bc6 e1				pop hl 
1bc7				if DEBUG_FORTH_STACK_GUARD 
1bc7 cd e2 62				call check_stacks 
1bca				endif 
1bca c9				ret 
1bcb			 
1bcb			 
1bcb			; increase ret stack pointer and save hl to it 
1bcb				 
1bcb			FORTH_RSP_NEXT: macro 
1bcb				call macro_forth_rsp_next 
1bcb				endm 
1bcb			 
1bcb			macro_forth_rsp_next: 
1bcb				if DEBUG_FORTH_STACK_GUARD 
1bcb cd e2 62				call check_stacks 
1bce				endif 
1bce e5				push hl 
1bcf d5				push de 
1bd0 eb				ex de,hl 
1bd1 2a 0e f8			ld hl,(cli_ret_sp) 
1bd4 23				inc hl 
1bd5 23				inc hl 
1bd6 22 0e f8			ld (cli_ret_sp),hl 
1bd9 73				ld (hl), e 
1bda 23				inc hl 
1bdb 72				ld (hl), d 
1bdc d1				pop de 
1bdd e1				pop hl 
1bde				if DEBUG_FORTH_STACK_GUARD 
1bde cd e2 62				call check_stacks 
1be1				endif 
1be1 c9				ret 
1be2			 
1be2			; get current ret stack pointer and save to hl  
1be2				 
1be2			FORTH_RSP_TOS: macro 
1be2				call macro_forth_rsp_tos 
1be2				endm 
1be2			 
1be2			macro_forth_rsp_tos: 
1be2				;push de 
1be2 2a 0e f8			ld hl,(cli_ret_sp) 
1be5 cd 1d 1c			call loadhlptrtohl 
1be8				;ld e, (hl) 
1be8				;inc hl 
1be8				;ld d, (hl) 
1be8				;ex de, hl 
1be8					if DEBUG_FORTH_WORDS 
1be8			;			DMARK "RST" 
1be8						CALLMONITOR 
1be8 cd 97 16			call break_point_state  
1beb				endm  
# End of macro CALLMONITOR
1beb					endif 
1beb				;pop de 
1beb c9				ret 
1bec			 
1bec			; pop ret stack pointer 
1bec				 
1bec			FORTH_RSP_POP: macro 
1bec				call macro_forth_rsp_pop 
1bec				endm 
1bec			 
1bec			 
1bec			macro_forth_rsp_pop: 
1bec				if DEBUG_FORTH_STACK_GUARD 
1bec			;		DMARK "RPP" 
1bec cd e2 62				call check_stacks 
1bef					FORTH_CHK_RSP_UNDER 
1bef e5				push hl 
1bf0 d5				push de 
1bf1 2a 0e f8			ld hl,(cli_ret_sp) 
1bf4 11 88 f7			ld de, cli_ret_stack 
1bf7 cd 27 0d			call cmp16 
1bfa da f6 63			jp c, fault_rsp_under 
1bfd d1				pop de 
1bfe e1				pop hl 
1bff				endm 
# End of macro FORTH_CHK_RSP_UNDER
1bff				endif 
1bff e5				push hl 
1c00 2a 0e f8			ld hl,(cli_ret_sp) 
1c03			 
1c03			 
1c03				if FORTH_ENABLE_FREE 
1c03			 
1c03					; get pointer 
1c03			 
1c03					push de 
1c03					push hl 
1c03			 
1c03					ld e, (hl) 
1c03					inc hl 
1c03					ld d, (hl) 
1c03			 
1c03					ex de, hl 
1c03					call free 
1c03			 
1c03					pop hl 
1c03					pop de 
1c03			 
1c03			 
1c03				endif 
1c03			 
1c03			 
1c03 2b				dec hl 
1c04 2b				dec hl 
1c05 22 0e f8			ld (cli_ret_sp), hl 
1c08				; do stack underflow checks 
1c08 e1				pop hl 
1c09				if DEBUG_FORTH_STACK_GUARD 
1c09 cd e2 62				call check_stacks 
1c0c					FORTH_CHK_RSP_UNDER 
1c0c e5				push hl 
1c0d d5				push de 
1c0e 2a 0e f8			ld hl,(cli_ret_sp) 
1c11 11 88 f7			ld de, cli_ret_stack 
1c14 cd 27 0d			call cmp16 
1c17 da f6 63			jp c, fault_rsp_under 
1c1a d1				pop de 
1c1b e1				pop hl 
1c1c				endm 
# End of macro FORTH_CHK_RSP_UNDER
1c1c				endif 
1c1c c9				ret 
1c1d			 
1c1d			 
1c1d			 
1c1d			; routine to load word pointed to by hl into hl 
1c1d			 
1c1d			loadhlptrtohl: 
1c1d			 
1c1d d5				push de 
1c1e 5e				ld e, (hl) 
1c1f 23				inc hl 
1c20 56				ld d, (hl) 
1c21 eb				ex de, hl 
1c22 d1				pop de 
1c23			 
1c23 c9				ret 
1c24			 
1c24			 
1c24			 
1c24			 
1c24			 
1c24			; push a number held in HL onto the data stack 
1c24			; entry point for pushing a value when already in hl used in function above 
1c24			 
1c24			forth_push_numhl: 
1c24			 
1c24 e5				push hl    ; save value to push 
1c25			 
1c25			if DEBUG_FORTH_PUSH 
1c25				; see if disabled 
1c25			 
1c25			 
1c25 f5				push af 
1c26 3a 0e ee			ld a, (os_view_disable) 
1c29 fe 2a			cp '*' 
1c2b 28 34			jr z, .pskip2 
1c2d e5				push hl 
1c2e e5			push hl 
1c2f cd d5 0a			call clear_display 
1c32 e1			pop hl 
1c33 7c				ld a,h 
1c34 21 22 f1			ld hl, os_word_scratch 
1c37 cd 0a 10			call hexout 
1c3a e1				pop hl 
1c3b 7d				ld a,l 
1c3c 21 24 f1			ld hl, os_word_scratch+2 
1c3f cd 0a 10			call hexout 
1c42			 
1c42 21 26 f1			ld hl, os_word_scratch+4 
1c45 3e 00			ld a,0 
1c47 77				ld (hl),a 
1c48 11 22 f1			ld de,os_word_scratch 
1c4b 3e 28				ld a, display_row_2 
1c4d cd e8 0a				call str_at_display 
1c50 11 f0 51			ld de, .push_num 
1c53 3e 00			ld a, display_row_1 
1c55			 
1c55 cd e8 0a				call str_at_display 
1c58			 
1c58			 
1c58 cd f8 0a			call update_display 
1c5b cd 55 0a			call delay1s 
1c5e cd 55 0a			call delay1s 
1c61			.pskip2:  
1c61			 
1c61 f1				pop af 
1c62			endif	 
1c62			 
1c62			 
1c62				FORTH_DSP_NEXT 
1c62 cd b3 1b			call macro_forth_dsp_next 
1c65				endm 
# End of macro FORTH_DSP_NEXT
1c65			 
1c65 2a 0a f8			ld hl, (cli_data_sp) 
1c68			 
1c68				; save item type 
1c68 3e 02			ld a,  DS_TYPE_INUM 
1c6a 77				ld (hl), a 
1c6b 23				inc hl 
1c6c			 
1c6c				; get word off stack 
1c6c d1				pop de 
1c6d 7b				ld a,e 
1c6e 77				ld (hl), a 
1c6f 23				inc hl 
1c70 7a				ld a,d 
1c71 77				ld (hl), a 
1c72			 
1c72			if DEBUG_FORTH_PUSH 
1c72 2b				dec hl 
1c73 2b				dec hl 
1c74 2b				dec hl 
1c75						DMARK "PH5" 
1c75 f5				push af  
1c76 3a 8a 1c			ld a, (.dmark)  
1c79 32 77 fb			ld (debug_mark),a  
1c7c 3a 8b 1c			ld a, (.dmark+1)  
1c7f 32 78 fb			ld (debug_mark+1),a  
1c82 3a 8c 1c			ld a, (.dmark+2)  
1c85 32 79 fb			ld (debug_mark+2),a  
1c88 18 03			jr .pastdmark  
1c8a ..			.dmark: db "PH5"  
1c8d f1			.pastdmark: pop af  
1c8e			endm  
# End of macro DMARK
1c8e				CALLMONITOR 
1c8e cd 97 16			call break_point_state  
1c91				endm  
# End of macro CALLMONITOR
1c91			endif	 
1c91			 
1c91 c9				ret 
1c92			 
1c92			 
1c92			; Push a string to stack pointed to by hl 
1c92			 
1c92			forth_push_str: 
1c92			 
1c92			if DEBUG_FORTH_PUSH 
1c92						DMARK "PSQ" 
1c92 f5				push af  
1c93 3a a7 1c			ld a, (.dmark)  
1c96 32 77 fb			ld (debug_mark),a  
1c99 3a a8 1c			ld a, (.dmark+1)  
1c9c 32 78 fb			ld (debug_mark+1),a  
1c9f 3a a9 1c			ld a, (.dmark+2)  
1ca2 32 79 fb			ld (debug_mark+2),a  
1ca5 18 03			jr .pastdmark  
1ca7 ..			.dmark: db "PSQ"  
1caa f1			.pastdmark: pop af  
1cab			endm  
# End of macro DMARK
1cab				CALLMONITOR 
1cab cd 97 16			call break_point_state  
1cae				endm  
# End of macro CALLMONITOR
1cae			endif	 
1cae			    
1cae e5				push hl 
1caf e5				push hl 
1cb0			 
1cb0			;	ld a, 0   ; find end of string 
1cb0 cd 67 11			call strlenz 
1cb3			if DEBUG_FORTH_PUSH 
1cb3						DMARK "PQ2" 
1cb3 f5				push af  
1cb4 3a c8 1c			ld a, (.dmark)  
1cb7 32 77 fb			ld (debug_mark),a  
1cba 3a c9 1c			ld a, (.dmark+1)  
1cbd 32 78 fb			ld (debug_mark+1),a  
1cc0 3a ca 1c			ld a, (.dmark+2)  
1cc3 32 79 fb			ld (debug_mark+2),a  
1cc6 18 03			jr .pastdmark  
1cc8 ..			.dmark: db "PQ2"  
1ccb f1			.pastdmark: pop af  
1ccc			endm  
# End of macro DMARK
1ccc				CALLMONITOR 
1ccc cd 97 16			call break_point_state  
1ccf				endm  
# End of macro CALLMONITOR
1ccf			endif	 
1ccf eb				ex de, hl 
1cd0 e1				pop hl   ; get ptr to start of string 
1cd1			if DEBUG_FORTH_PUSH 
1cd1						DMARK "PQ3" 
1cd1 f5				push af  
1cd2 3a e6 1c			ld a, (.dmark)  
1cd5 32 77 fb			ld (debug_mark),a  
1cd8 3a e7 1c			ld a, (.dmark+1)  
1cdb 32 78 fb			ld (debug_mark+1),a  
1cde 3a e8 1c			ld a, (.dmark+2)  
1ce1 32 79 fb			ld (debug_mark+2),a  
1ce4 18 03			jr .pastdmark  
1ce6 ..			.dmark: db "PQ3"  
1ce9 f1			.pastdmark: pop af  
1cea			endm  
# End of macro DMARK
1cea				CALLMONITOR 
1cea cd 97 16			call break_point_state  
1ced				endm  
# End of macro CALLMONITOR
1ced			endif	 
1ced 19				add hl,de 
1cee			if DEBUG_FORTH_PUSH 
1cee						DMARK "PQE" 
1cee f5				push af  
1cef 3a 03 1d			ld a, (.dmark)  
1cf2 32 77 fb			ld (debug_mark),a  
1cf5 3a 04 1d			ld a, (.dmark+1)  
1cf8 32 78 fb			ld (debug_mark+1),a  
1cfb 3a 05 1d			ld a, (.dmark+2)  
1cfe 32 79 fb			ld (debug_mark+2),a  
1d01 18 03			jr .pastdmark  
1d03 ..			.dmark: db "PQE"  
1d06 f1			.pastdmark: pop af  
1d07			endm  
# End of macro DMARK
1d07				CALLMONITOR 
1d07 cd 97 16			call break_point_state  
1d0a				endm  
# End of macro CALLMONITOR
1d0a			endif	 
1d0a			 
1d0a 2b				dec hl    ; see if there is an optional trailing double quote 
1d0b 7e				ld a,(hl) 
1d0c fe 22			cp '"' 
1d0e 20 03			jr nz, .strnoq 
1d10 3e 00			ld a, 0      ; get rid of double quote 
1d12 77				ld (hl), a 
1d13 23			.strnoq: inc hl 
1d14			 
1d14 3e 00			ld a, 0 
1d16 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1d17			 
1d17 13				inc de ; add one for the type string 
1d18 13				inc de ; add one for null term??? 
1d19			 
1d19				; tos is get string pointer again 
1d19				; de contains space to allocate 
1d19				 
1d19 d5				push de 
1d1a			 
1d1a eb				ex de, hl 
1d1b			 
1d1b				;push af 
1d1b			 
1d1b			if DEBUG_FORTH_PUSH 
1d1b						DMARK "PHm" 
1d1b f5				push af  
1d1c 3a 30 1d			ld a, (.dmark)  
1d1f 32 77 fb			ld (debug_mark),a  
1d22 3a 31 1d			ld a, (.dmark+1)  
1d25 32 78 fb			ld (debug_mark+1),a  
1d28 3a 32 1d			ld a, (.dmark+2)  
1d2b 32 79 fb			ld (debug_mark+2),a  
1d2e 18 03			jr .pastdmark  
1d30 ..			.dmark: db "PHm"  
1d33 f1			.pastdmark: pop af  
1d34			endm  
# End of macro DMARK
1d34				CALLMONITOR 
1d34 cd 97 16			call break_point_state  
1d37				endm  
# End of macro CALLMONITOR
1d37			endif	 
1d37 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1d3a				if DEBUG_FORTH_MALLOC_GUARD 
1d3a cc 48 52				call z,malloc_error 
1d3d				endif 
1d3d			 
1d3d				 
1d3d c1				pop bc    ; get length 
1d3e d1				pop de   ;  get string start    
1d3f			 
1d3f				; hl has destination from malloc 
1d3f			 
1d3f eb				ex de, hl    ; prep for ldir 
1d40			 
1d40 d5				push de   ; save malloc area for DSP later 
1d41				;push hl   ; save malloc area for DSP later 
1d41			 
1d41			if DEBUG_FORTH_PUSH 
1d41						DMARK "PHc" 
1d41 f5				push af  
1d42 3a 56 1d			ld a, (.dmark)  
1d45 32 77 fb			ld (debug_mark),a  
1d48 3a 57 1d			ld a, (.dmark+1)  
1d4b 32 78 fb			ld (debug_mark+1),a  
1d4e 3a 58 1d			ld a, (.dmark+2)  
1d51 32 79 fb			ld (debug_mark+2),a  
1d54 18 03			jr .pastdmark  
1d56 ..			.dmark: db "PHc"  
1d59 f1			.pastdmark: pop af  
1d5a			endm  
# End of macro DMARK
1d5a				CALLMONITOR 
1d5a cd 97 16			call break_point_state  
1d5d				endm  
# End of macro CALLMONITOR
1d5d			endif	 
1d5d			 
1d5d			 
1d5d ed b0			ldir 
1d5f			 
1d5f			 
1d5f				; push malloc to data stack     macro?????  
1d5f			 
1d5f				FORTH_DSP_NEXT 
1d5f cd b3 1b			call macro_forth_dsp_next 
1d62				endm 
# End of macro FORTH_DSP_NEXT
1d62			 
1d62				; save value and type 
1d62			 
1d62 2a 0a f8			ld hl, (cli_data_sp) 
1d65			 
1d65				; save item type 
1d65 3e 01			ld a,  DS_TYPE_STR 
1d67 77				ld (hl), a 
1d68 23				inc hl 
1d69			 
1d69				; get malloc word off stack 
1d69 d1				pop de 
1d6a 73				ld (hl), e 
1d6b 23				inc hl 
1d6c 72				ld (hl), d 
1d6d			 
1d6d			 
1d6d			 
1d6d			if DEBUG_FORTH_PUSH 
1d6d 2a 0a f8			ld hl, (cli_data_sp) 
1d70						DMARK "PHS" 
1d70 f5				push af  
1d71 3a 85 1d			ld a, (.dmark)  
1d74 32 77 fb			ld (debug_mark),a  
1d77 3a 86 1d			ld a, (.dmark+1)  
1d7a 32 78 fb			ld (debug_mark+1),a  
1d7d 3a 87 1d			ld a, (.dmark+2)  
1d80 32 79 fb			ld (debug_mark+2),a  
1d83 18 03			jr .pastdmark  
1d85 ..			.dmark: db "PHS"  
1d88 f1			.pastdmark: pop af  
1d89			endm  
# End of macro DMARK
1d89				CALLMONITOR 
1d89 cd 97 16			call break_point_state  
1d8c				endm  
# End of macro CALLMONITOR
1d8c			;	ex de,hl 
1d8c			endif	 
1d8c				; in case of spaces, skip the ptr past the copied string 
1d8c				;pop af 
1d8c				;ld (cli_origptr),hl 
1d8c			 
1d8c c9				ret 
1d8d			 
1d8d			 
1d8d			 
1d8d			; TODO ascii push input onto stack given hl to start of input 
1d8d			 
1d8d			; identify type 
1d8d			; if starts with a " then a string 
1d8d			; otherwise it is a number 
1d8d			;  
1d8d			; if a string 
1d8d			;     scan for ending " to get length of string to malloc for + 1 
1d8d			;     malloc 
1d8d			;     put pointer to string on stack first byte flags as string 
1d8d			; 
1d8d			; else a number 
1d8d			;    look for number format identifier 
1d8d			;    $xx hex 
1d8d			;    %xxxxx bin 
1d8d			;    xxxxx decimal 
1d8d			;    convert number to 16bit word.  
1d8d			;    malloc word + 1 with flag to identiy as num 
1d8d			;    put pointer to number on stack 
1d8d			;   
1d8d			;  
1d8d			  
1d8d			forth_apush: 
1d8d				; kernel push 
1d8d			 
1d8d			if DEBUG_FORTH_PUSH 
1d8d						DMARK "PSH" 
1d8d f5				push af  
1d8e 3a a2 1d			ld a, (.dmark)  
1d91 32 77 fb			ld (debug_mark),a  
1d94 3a a3 1d			ld a, (.dmark+1)  
1d97 32 78 fb			ld (debug_mark+1),a  
1d9a 3a a4 1d			ld a, (.dmark+2)  
1d9d 32 79 fb			ld (debug_mark+2),a  
1da0 18 03			jr .pastdmark  
1da2 ..			.dmark: db "PSH"  
1da5 f1			.pastdmark: pop af  
1da6			endm  
# End of macro DMARK
1da6				CALLMONITOR 
1da6 cd 97 16			call break_point_state  
1da9				endm  
# End of macro CALLMONITOR
1da9			endif	 
1da9				; identify input type 
1da9			 
1da9 7e				ld a,(hl) 
1daa fe 22			cp '"' 
1dac 28 0a			jr z, .fapstr 
1dae fe 24			cp '$' 
1db0 ca d8 1d			jp z, .faphex 
1db3 fe 25			cp '%' 
1db5 ca c0 1d			jp z, .fapbin 
1db8			;	cp 'b' 
1db8			;	jp z, .fabin 
1db8				; else decimal 
1db8			 
1db8				; TODO do decimal conversion 
1db8				; decimal is stored as a 16bit word 
1db8			 
1db8				; by default everything is a string if type is not detected 
1db8			.fapstr: ; 
1db8 fe 22			cp '"' 
1dba 20 01			jr nz, .strnoqu 
1dbc 23				inc hl 
1dbd			.strnoqu: 
1dbd c3 92 1c			jp forth_push_str 
1dc0			 
1dc0			 
1dc0			 
1dc0			.fapbin:    ; push a binary string.  
1dc0 11 00 00			ld de, 0   ; hold a 16bit value 
1dc3			 
1dc3 23			.fapbinshift:	inc hl  
1dc4 7e				ld a,(hl) 
1dc5 fe 00			cp 0     ; done scanning  
1dc7 28 0b			jr z, .fapbdone  	; got it in HL so push  
1dc9			 
1dc9				; left shift de 
1dc9 eb				ex de, hl	 
1dca 29				add hl, hl 
1dcb			 
1dcb				; is 1 
1dcb fe 31			cp '1' 
1dcd 20 02			jr nz, .binzero 
1dcf cb 4d			bit 1, l 
1dd1			.binzero: 
1dd1 eb				ex de, hl	 ; save current de 
1dd2 18 ef			jr .fapbinshift 
1dd4			 
1dd4			.fapbdone: 
1dd4 eb				ex de, hl 
1dd5 c3 24 1c			jp forth_push_numhl 
1dd8			 
1dd8			 
1dd8			.faphex:   ; hex is always stored as a 16bit word 
1dd8				; skip number prefix 
1dd8 23				inc hl 
1dd9				; turn ascii into number 
1dd9 cd c0 10			call get_word_hl	; ret 16bit word in hl 
1ddc			 
1ddc c3 24 1c			jp forth_push_numhl 
1ddf			 
1ddf 00				 nop 
1de0			 
1de0			.fabin:   ; TODO bin conversion 
1de0			 
1de0			 
1de0 c9				ret 
1de1			 
1de1			 
1de1			; get either a string ptr or a 16bit word from the data stack 
1de1			 
1de1			FORTH_DSP: macro 
1de1				call macro_forth_dsp 
1de1				endm 
1de1			 
1de1			macro_forth_dsp: 
1de1				; data stack pointer points to current word on tos 
1de1			 
1de1 2a 0a f8			ld hl,(cli_data_sp) 
1de4			 
1de4				if DEBUG_FORTH_PUSH 
1de4						DMARK "DSP" 
1de4 f5				push af  
1de5 3a f9 1d			ld a, (.dmark)  
1de8 32 77 fb			ld (debug_mark),a  
1deb 3a fa 1d			ld a, (.dmark+1)  
1dee 32 78 fb			ld (debug_mark+1),a  
1df1 3a fb 1d			ld a, (.dmark+2)  
1df4 32 79 fb			ld (debug_mark+2),a  
1df7 18 03			jr .pastdmark  
1df9 ..			.dmark: db "DSP"  
1dfc f1			.pastdmark: pop af  
1dfd			endm  
# End of macro DMARK
1dfd			 
1dfd cd 7d 52				call display_data_sp 
1e00				;call break_point_state 
1e00				;rst 030h 
1e00				CALLMONITOR 
1e00 cd 97 16			call break_point_state  
1e03				endm  
# End of macro CALLMONITOR
1e03				endif 
1e03			 
1e03 c9				ret 
1e04			 
1e04			; return hl to start of value on stack 
1e04			 
1e04			FORTH_DSP_VALUE: macro 
1e04				call macro_forth_dsp_value 
1e04				endm 
1e04			 
1e04			macro_forth_dsp_value: 
1e04			 
1e04				FORTH_DSP 
1e04 cd e1 1d			call macro_forth_dsp 
1e07				endm 
# End of macro FORTH_DSP
1e07			 
1e07 d5				push de 
1e08			 
1e08 23				inc hl ; skip type 
1e09			 
1e09 5e				ld e, (hl) 
1e0a 23				inc hl 
1e0b 56				ld d, (hl) 
1e0c eb				ex de,hl  
1e0d			 
1e0d d1				pop de 
1e0e			 
1e0e c9				ret 
1e0f			 
1e0f			; return hl to start of value to second item on stack 
1e0f			 
1e0f			FORTH_DSP_VALUEM1: macro 
1e0f				call macro_forth_dsp_value_m1 
1e0f				endm 
1e0f			 
1e0f			macro_forth_dsp_value_m1: 
1e0f			 
1e0f				FORTH_DSP 
1e0f cd e1 1d			call macro_forth_dsp 
1e12				endm 
# End of macro FORTH_DSP
1e12			 
1e12 2b				dec hl 
1e13 2b				dec hl 
1e14			;	dec hl 
1e14			 
1e14 d5				push de 
1e15			 
1e15 5e				ld e, (hl) 
1e16 23				inc hl 
1e17 56				ld d, (hl) 
1e18 eb				ex de,hl  
1e19			 
1e19 d1				pop de 
1e1a			 
1e1a c9				ret 
1e1b			 
1e1b				 
1e1b			 
1e1b			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1e1b			 
1e1b			FORTH_DSP_POP: macro 
1e1b				call macro_forth_dsp_pop 
1e1b				endm 
1e1b			 
1e1b			 
1e1b			; get the tos data type 
1e1b			 
1e1b			FORTH_DSP_TYPE:   macro 
1e1b			 
1e1b				;FORTH_DSP_VALUE 
1e1b				FORTH_DSP 
1e1b				 
1e1b				; hl points to value 
1e1b				; check type 
1e1b			 
1e1b				ld a,(hl) 
1e1b			 
1e1b				endm 
1e1b			 
1e1b			; load the tos value into hl 
1e1b			 
1e1b			 
1e1b			FORTH_DSP_VALUEHL:  macro 
1e1b				call macro_dsp_valuehl 
1e1b				endm 
1e1b			 
1e1b			 
1e1b			 
1e1b			macro_dsp_valuehl: 
1e1b				FORTH_DSP_VALUE 
1e1b cd 04 1e			call macro_forth_dsp_value 
1e1e				endm 
# End of macro FORTH_DSP_VALUE
1e1e			 
1e1e				;FORTH_ERR_TOS_NOTNUM 
1e1e			 
1e1e				;inc hl   ; skip type id 
1e1e			 
1e1e			;	push de 
1e1e			; 
1e1e			;	ld e, (hl) 
1e1e			;	inc hl 
1e1e			;	ld d, (hl) 
1e1e			;	ex de,hl  
1e1e			 
1e1e			;	pop de 
1e1e			 
1e1e				if DEBUG_FORTH_PUSH 
1e1e						DMARK "DVL" 
1e1e f5				push af  
1e1f 3a 33 1e			ld a, (.dmark)  
1e22 32 77 fb			ld (debug_mark),a  
1e25 3a 34 1e			ld a, (.dmark+1)  
1e28 32 78 fb			ld (debug_mark+1),a  
1e2b 3a 35 1e			ld a, (.dmark+2)  
1e2e 32 79 fb			ld (debug_mark+2),a  
1e31 18 03			jr .pastdmark  
1e33 ..			.dmark: db "DVL"  
1e36 f1			.pastdmark: pop af  
1e37			endm  
# End of macro DMARK
1e37				CALLMONITOR 
1e37 cd 97 16			call break_point_state  
1e3a				endm  
# End of macro CALLMONITOR
1e3a				endif 
1e3a c9				ret 
1e3b			 
1e3b			forth_apushstrhl:      
1e3b				; push of string requires use of cli_origptr 
1e3b				; bodge use 
1e3b			 
1e3b				; get current cli_origptr, save, update with temp pointer  
1e3b ed 5b 26 f8		ld de, (cli_origptr) 
1e3f 22 26 f8			ld (cli_origptr), hl 
1e42 d5				push de 
1e43 cd 8d 1d			call forth_apush 
1e46 d1				pop de 
1e47 ed 53 26 f8		ld (cli_origptr), de 
1e4b c9			        ret	 
1e4c			 
1e4c			 
1e4c			; increase loop stack pointer and save hl to it 
1e4c				 
1e4c			FORTH_LOOP_NEXT: macro 
1e4c				call macro_forth_loop_next 
1e4c				;nop 
1e4c				endm 
1e4c			 
1e4c			macro_forth_loop_next: 
1e4c				if DEBUG_FORTH_STACK_GUARD 
1e4c cd e2 62				call check_stacks 
1e4f				endif 
1e4f e5				push hl 
1e50 d5				push de 
1e51 eb				ex de,hl 
1e52 2a 0c f8			ld hl,(cli_loop_sp) 
1e55 23				inc hl 
1e56 23				inc hl 
1e57					if DEBUG_FORTH_WORDS 
1e57						DMARK "LNX" 
1e57 f5				push af  
1e58 3a 6c 1e			ld a, (.dmark)  
1e5b 32 77 fb			ld (debug_mark),a  
1e5e 3a 6d 1e			ld a, (.dmark+1)  
1e61 32 78 fb			ld (debug_mark+1),a  
1e64 3a 6e 1e			ld a, (.dmark+2)  
1e67 32 79 fb			ld (debug_mark+2),a  
1e6a 18 03			jr .pastdmark  
1e6c ..			.dmark: db "LNX"  
1e6f f1			.pastdmark: pop af  
1e70			endm  
# End of macro DMARK
1e70						CALLMONITOR 
1e70 cd 97 16			call break_point_state  
1e73				endm  
# End of macro CALLMONITOR
1e73					endif 
1e73 22 0c f8			ld (cli_loop_sp),hl 
1e76 73				ld (hl), e 
1e77 23				inc hl 
1e78 72				ld (hl), d 
1e79 d1				pop de    ; been reversed so save a swap on restore 
1e7a e1				pop hl 
1e7b				if DEBUG_FORTH_STACK_GUARD 
1e7b cd e2 62				call check_stacks 
1e7e				endif 
1e7e c9				ret 
1e7f			 
1e7f			; get current ret stack pointer and save to hl  
1e7f				 
1e7f			FORTH_LOOP_TOS: macro 
1e7f				call macro_forth_loop_tos 
1e7f				endm 
1e7f			 
1e7f			macro_forth_loop_tos: 
1e7f d5				push de 
1e80 2a 0c f8			ld hl,(cli_loop_sp) 
1e83 5e				ld e, (hl) 
1e84 23				inc hl 
1e85 56				ld d, (hl) 
1e86 eb				ex de, hl 
1e87 d1				pop de 
1e88 c9				ret 
1e89			 
1e89			; pop loop stack pointer 
1e89				 
1e89			FORTH_LOOP_POP: macro 
1e89				call macro_forth_loop_pop 
1e89				endm 
1e89			 
1e89			 
1e89			macro_forth_loop_pop: 
1e89				if DEBUG_FORTH_STACK_GUARD 
1e89					DMARK "LPP" 
1e89 f5				push af  
1e8a 3a 9e 1e			ld a, (.dmark)  
1e8d 32 77 fb			ld (debug_mark),a  
1e90 3a 9f 1e			ld a, (.dmark+1)  
1e93 32 78 fb			ld (debug_mark+1),a  
1e96 3a a0 1e			ld a, (.dmark+2)  
1e99 32 79 fb			ld (debug_mark+2),a  
1e9c 18 03			jr .pastdmark  
1e9e ..			.dmark: db "LPP"  
1ea1 f1			.pastdmark: pop af  
1ea2			endm  
# End of macro DMARK
1ea2 cd e2 62				call check_stacks 
1ea5					FORTH_CHK_LOOP_UNDER 
1ea5 e5				push hl 
1ea6 d5				push de 
1ea7 2a 0c f8			ld hl,(cli_loop_sp) 
1eaa 11 86 f5			ld de, cli_loop_stack 
1ead cd 27 0d			call cmp16 
1eb0 da fc 63			jp c, fault_loop_under 
1eb3 d1				pop de 
1eb4 e1				pop hl 
1eb5				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1eb5				endif 
1eb5 e5				push hl 
1eb6 2a 0c f8			ld hl,(cli_loop_sp) 
1eb9 2b				dec hl 
1eba 2b				dec hl 
1ebb 22 0c f8			ld (cli_loop_sp), hl 
1ebe				; TODO do stack underflow checks 
1ebe e1				pop hl 
1ebf				if DEBUG_FORTH_STACK_GUARD 
1ebf cd e2 62				call check_stacks 
1ec2					FORTH_CHK_LOOP_UNDER 
1ec2 e5				push hl 
1ec3 d5				push de 
1ec4 2a 0c f8			ld hl,(cli_loop_sp) 
1ec7 11 86 f5			ld de, cli_loop_stack 
1eca cd 27 0d			call cmp16 
1ecd da fc 63			jp c, fault_loop_under 
1ed0 d1				pop de 
1ed1 e1				pop hl 
1ed2				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1ed2				endif 
1ed2 c9				ret 
1ed3			 
1ed3			macro_forth_dsp_pop: 
1ed3			 
1ed3 e5				push hl 
1ed4			 
1ed4				; release malloc data 
1ed4			 
1ed4				if DEBUG_FORTH_STACK_GUARD 
1ed4 cd e2 62				call check_stacks 
1ed7					FORTH_CHK_DSP_UNDER 
1ed7 e5				push hl 
1ed8 d5				push de 
1ed9 2a 0a f8			ld hl,(cli_data_sp) 
1edc 11 84 f3			ld de, cli_data_stack 
1edf cd 27 0d			call cmp16 
1ee2 da f0 63			jp c, fault_dsp_under 
1ee5 d1				pop de 
1ee6 e1				pop hl 
1ee7				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ee7				endif 
1ee7				;ld hl,(cli_data_sp) 
1ee7			if DEBUG_FORTH_DOT 
1ee7				DMARK "DPP" 
1ee7				CALLMONITOR 
1ee7			endif	 
1ee7			 
1ee7			 
1ee7			if FORTH_ENABLE_DSPPOPFREE 
1ee7			 
1ee7				FORTH_DSP 
1ee7 cd e1 1d			call macro_forth_dsp 
1eea				endm 
# End of macro FORTH_DSP
1eea			 
1eea 7e				ld a, (hl) 
1eeb fe 01			cp DS_TYPE_STR 
1eed 20 07			jr nz, .skippopfree 
1eef			 
1eef				FORTH_DSP_VALUEHL 
1eef cd 1b 1e			call macro_dsp_valuehl 
1ef2				endm 
# End of macro FORTH_DSP_VALUEHL
1ef2 00				nop 
1ef3			if DEBUG_FORTH_DOT 
1ef3				DMARK "DPf" 
1ef3				CALLMONITOR 
1ef3			endif	 
1ef3 cd 9a 12			call free 
1ef6			.skippopfree: 
1ef6				 
1ef6			 
1ef6			endif 
1ef6			 
1ef6			if DEBUG_FORTH_DOT_KEY 
1ef6				DMARK "DP2" 
1ef6				CALLMONITOR 
1ef6			endif	 
1ef6			 
1ef6				; move pointer down 
1ef6			 
1ef6 2a 0a f8			ld hl,(cli_data_sp) 
1ef9 2b				dec hl 
1efa 2b				dec hl 
1efb			; PARSEV5 
1efb 2b				dec hl 
1efc 22 0a f8			ld (cli_data_sp), hl 
1eff			 
1eff				if DEBUG_FORTH_STACK_GUARD 
1eff cd e2 62				call check_stacks 
1f02					FORTH_CHK_DSP_UNDER 
1f02 e5				push hl 
1f03 d5				push de 
1f04 2a 0a f8			ld hl,(cli_data_sp) 
1f07 11 84 f3			ld de, cli_data_stack 
1f0a cd 27 0d			call cmp16 
1f0d da f0 63			jp c, fault_dsp_under 
1f10 d1				pop de 
1f11 e1				pop hl 
1f12				endm 
# End of macro FORTH_CHK_DSP_UNDER
1f12				endif 
1f12			 
1f12 e1				pop hl 
1f13			 
1f13 c9				ret 
1f14			 
1f14			getwordathl: 
1f14				; hl points to an address 
1f14				; load hl with the word at that address 
1f14			 
1f14 d5				push de 
1f15			 
1f15 5e				ld e, (hl) 
1f16 23				inc hl 
1f17 56				ld d, (hl) 
1f18 eb				ex de, hl 
1f19			 
1f19 d1				pop de 
1f1a c9				ret 
1f1b			 
1f1b			 
1f1b			 
1f1b			 
1f1b			 
1f1b			; eof 
1f1b			 
# End of file forth_stackopsv5.asm
1f1b			endif 
1f1b			 
1f1b			user_word_eol:  
1f1b				; hl contains the pointer to where to create a linked list item from the end 
1f1b				; of the user dict to continue on at the system word dict 
1f1b				 
1f1b				; poke the stub of the word list linked list to repoint to rom words 
1f1b			 
1f1b				; stub format 
1f1b				; db   word id 
1f1b				; dw    link to next word 
1f1b			        ; db char length of token 
1f1b				; db string + 0 term 
1f1b				; db exec code....  
1f1b			 
1f1b 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f1d 77				ld (hl), a		; word id 
1f1e 23				inc hl 
1f1f			 
1f1f 11 e5 20			ld de, sysdict 
1f22 73				ld (hl), e		; next word link ie system dict 
1f23 23				inc hl 
1f24 72				ld (hl), d		; next word link ie system dict 
1f25 23				inc hl	 
1f26			 
1f26			;	ld (hl), sysdict		; next word link ie system dict 
1f26			;	inc hl 
1f26			;	inc hl 
1f26			 
1f26			;	inc hl 
1f26			;	inc hl 
1f26			 
1f26 3e 02			ld a, 2			; word length is 0 
1f28 77				ld (hl), a	 
1f29 23				inc hl 
1f2a			 
1f2a 3e 7e			ld a, '~'			; word length is 0 
1f2c 77				ld (hl), a	 
1f2d 23				inc hl 
1f2e 3e 00			ld a, 0			; save empty word 
1f30 77				ld (hl), a 
1f31			 
1f31 c9				ret 
1f32			 
1f32				 
1f32			 
1f32			forthexec_cleanup: 
1f32				FORTH_RSP_POP 
1f32 cd ec 1b			call macro_forth_rsp_pop 
1f35				endm 
# End of macro FORTH_RSP_POP
1f35 c9				ret 
1f36			 
1f36			forth_call_hl: 
1f36				; taking hl 
1f36 e5				push hl 
1f37 c9				ret 
1f38			 
1f38			; this is called to reset Forth system but keep existing uwords etc 
1f38			 
1f38			forth_warmstart: 
1f38				; setup stack over/under flow checks 
1f38				if DEBUG_FORTH_STACK_GUARD 
1f38 cd c8 62				call chk_stk_init 
1f3b				endif 
1f3b			 
1f3b				; init stack pointers  - * these stacks go upwards *  
1f3b 21 88 f7			ld hl, cli_ret_stack 
1f3e 22 0e f8			ld (cli_ret_sp), hl	 
1f41				; set bottom of stack 
1f41 3e 00			ld a,0 
1f43 77				ld (hl),a 
1f44 23				inc hl 
1f45 77				ld (hl),a 
1f46			 
1f46 21 84 f3			ld hl, cli_data_stack 
1f49 22 0a f8			ld (cli_data_sp), hl	 
1f4c				; set bottom of stack 
1f4c 3e 00			ld a,0 
1f4e 77				ld (hl),a 
1f4f 23				inc hl 
1f50 77				ld (hl),a 
1f51			 
1f51 21 86 f5			ld hl, cli_loop_stack 
1f54 22 0c f8			ld (cli_loop_sp), hl	 
1f57				; set bottom of stack 
1f57 3e 00			ld a,0 
1f59 77				ld (hl),a 
1f5a 23				inc hl 
1f5b 77				ld (hl),a 
1f5c			 
1f5c				; init extent of current open file 
1f5c			 
1f5c 3e 00			ld a, 0 
1f5e 32 59 f8			ld (store_openext), a 
1f61			 
1f61 c9				ret 
1f62			 
1f62			 
1f62			; Cold Start - this is called to setup the whole Forth system 
1f62			 
1f62			forth_init: 
1f62			 
1f62				; setup stack over/under flow checks 
1f62			 
1f62			;	if DEBUG_FORTH_STACK_GUARD 
1f62			;		call chk_stk_init 
1f62			;	endif 
1f62			 
1f62				; enable auto display updates (slow.....) 
1f62			 
1f62 3e 01			ld a, 1 
1f64 32 24 f8			ld (cli_autodisplay), a 
1f67			 
1f67			 
1f67			 
1f67				; show start up screen 
1f67			 
1f67 cd d5 0a			call clear_display 
1f6a			 
1f6a 3e 00			ld a,0 
1f6c 32 46 f8			ld (f_cursor_ptr), a 
1f6f			 
1f6f				; set start of word list in start of ram - for use when creating user words 
1f6f			 
1f6f 21 00 80			ld hl, baseram 
1f72 22 1a f1			ld (os_last_new_uword), hl 
1f75 cd 1b 1f			call user_word_eol 
1f78				 
1f78			;		call display_data_sp 
1f78			;		call next_page_prompt 
1f78			 
1f78			 
1f78			 
1f78			 
1f78 c9				ret 
1f79			 
1f79 .. 00		.bootforth: db " Forth Kernel Init ",0 
1f8d			 
1f8d			; TODO push to stack 
1f8d			 
1f8d			;  
1f8d			 
1f8d			if FORTH_PARSEV2 
1f8d			 
1f8d			 
1f8d				include "forth_parserv2.asm" 
1f8d			 
1f8d			endif 
1f8d			 
1f8d			 
1f8d			; parse cli version 1 
1f8d			 
1f8d			if FORTH_PARSEV1 
1f8d			 
1f8d			 
1f8d			 
1f8d			      include "forth_parserv1.asm" 
1f8d			endif 
1f8d				 
1f8d			if FORTH_PARSEV3 
1f8d			 
1f8d			 
1f8d			 
1f8d			      include "forth_parserv3.asm" 
1f8d				include "forth_wordsv3.asm" 
1f8d			endif 
1f8d			 
1f8d			if FORTH_PARSEV4 
1f8d			 
1f8d			 
1f8d			 
1f8d			      include "forth_parserv4.asm" 
1f8d				include "forth_wordsv4.asm" 
1f8d			endif 
1f8d			 
1f8d			if FORTH_PARSEV5 
1f8d			 
1f8d			 
1f8d			 
1f8d			      include "forth_parserv5.asm" 
1f8d			 
1f8d			 
1f8d			; A better parser without using malloc and string copies all over the place.  
1f8d			; Exec in situ should be faster 
1f8d			 
1f8d			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f8d			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f8d			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f8d			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f8d			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f8d			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f8d			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f8d			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f8d			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f8d			 
1f8d			; Core word preamble macro 
1f8d			 
1f8d			CWHEAD:   macro nxtword opcode lit len opflags 
1f8d				db WORD_SYS_CORE+opcode             
1f8d				; internal op code number 
1f8d				dw nxtword            
1f8d				; link to next dict word block 
1f8d				db len + 1 
1f8d				; literal length of dict word inc zero term 
1f8d				db lit,0              
1f8d				; literal dict word 
1f8d			        ; TODO db opflags        
1f8d				endm 
1f8d			 
1f8d			 
1f8d			NEXTW: macro  
1f8d				jp macro_next 
1f8d				endm 
1f8d			 
1f8d			macro_next: 
1f8d			if DEBUG_FORTH_PARSE_KEY 
1f8d				DMARK "NXT" 
1f8d				CALLMONITOR 
1f8d			endif	 
1f8d			;	inc hl  ; skip token null term  
1f8d ed 4b 28 f8		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f91 ed 5b 26 f8		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f95 2a 1e f1			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f98			if DEBUG_FORTH_PARSE_KEY 
1f98				DMARK "}AA" 
1f98				CALLMONITOR 
1f98			endif	 
1f98 c3 9b 20			jp execnext 
1f9b				;jp exec1 
1f9b			       
1f9b			 
1f9b			 
1f9b			; Another go at the parser to compile  
1f9b			 
1f9b			 
1f9b			; TODO rework parser to change all of the string words to byte tokens 
1f9b			; TODO do a search for  
1f9b			 
1f9b			; TODO first run normal parser to zero term sections 
1f9b			; TODO for each word do a token look up to get the op code 
1f9b			; TODO need some means to flag to the exec that this is a byte code form    
1f9b			 
1f9b			 
1f9b			forthcompile: 
1f9b			 
1f9b			; 
1f9b			; line parse: 
1f9b			;       parse raw input buffer 
1f9b			;       tokenise the words 
1f9b			;       malloc new copy (for looping etc) 
1f9b			;       copy to malloc + current pc in line to start of string and add line term 
1f9b			;       save on new rsp 
1f9b			; 
1f9b			 
1f9b			; hl to point to the line to tokenise 
1f9b			 
1f9b			;	push hl 
1f9b 22 1e f1			ld (os_tok_ptr), hl  ; save ptr to string 
1f9e			 
1f9e			;	ld a,0		; string term on input 
1f9e			;	call strlent 
1f9e			 
1f9e			;	ld (os_tok_len), hl	 ; save string length 
1f9e			 
1f9e			;if DEBUG_FORTH_TOK 
1f9e			;	ex de,hl		 
1f9e			;endif 
1f9e			 
1f9e			;	pop hl 		; get back string pointer 
1f9e			 
1f9e			if DEBUG_FORTH_TOK 
1f9e						DMARK "TOc" 
1f9e				CALLMONITOR 
1f9e			endif 
1f9e 7e			.cptoken2:    ld a,(hl) 
1f9f 23				inc hl 
1fa0 fe 7f			cp FORTH_END_BUFFER 
1fa2 28 29			jr z, .cptokendone2 
1fa4 fe 00			cp 0 
1fa6 28 25			jr z, .cptokendone2 
1fa8 fe 22			cp '"' 
1faa 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1fac fe 20			cp ' ' 
1fae 20 ee			jr nz,  .cptoken2 
1fb0			 
1fb0			; TODO consume comments held between ( and ) 
1fb0			 
1fb0				; we have a space so change to zero term for dict match later 
1fb0 2b				dec hl 
1fb1 3e 00			ld a,0 
1fb3 77				ld (hl), a 
1fb4 23				inc hl 
1fb5 18 e7			jr .cptoken2 
1fb7				 
1fb7			 
1fb7			.cptokenstr2: 
1fb7				; skip all white space until either eol (because forgot to term) or end double quote 
1fb7			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fb7				;inc hl ; skip current double quote 
1fb7 7e				ld a,(hl) 
1fb8 23				inc hl 
1fb9 fe 22			cp '"' 
1fbb 28 e1			jr z, .cptoken2 
1fbd fe 7f			cp FORTH_END_BUFFER 
1fbf 28 0c			jr z, .cptokendone2 
1fc1 fe 00			cp 0 
1fc3 28 08			jr z, .cptokendone2 
1fc5 fe 20			cp ' ' 
1fc7 28 02			jr z, .cptmp2 
1fc9 18 ec			jr .cptokenstr2 
1fcb			 
1fcb			.cptmp2:	; we have a space so change to zero term for dict match later 
1fcb				;dec hl 
1fcb				;ld a,"-"	; TODO remove this when working 
1fcb				;ld (hl), a 
1fcb				;inc hl 
1fcb 18 ea			jr .cptokenstr2 
1fcd			 
1fcd			.cptokendone2: 
1fcd				;inc hl 
1fcd 3e 7f			ld a, FORTH_END_BUFFER 
1fcf 77				ld (hl),a 
1fd0 23				inc hl 
1fd1 3e 21			ld a, '!' 
1fd3 77				ld (hl),a 
1fd4			 
1fd4 2a 1e f1			ld hl,(os_tok_ptr) 
1fd7			         
1fd7			if DEBUG_FORTH_TOK 
1fd7						DMARK "Tc1" 
1fd7				CALLMONITOR 
1fd7			endif 
1fd7			 
1fd7				; push exec string to top of return stack 
1fd7				FORTH_RSP_NEXT 
1fd7 cd cb 1b			call macro_forth_rsp_next 
1fda				endm 
# End of macro FORTH_RSP_NEXT
1fda c9				ret 
1fdb			 
1fdb			; Another go at the parser need to simplify the process 
1fdb			 
1fdb			forthparse: 
1fdb			 
1fdb			; 
1fdb			; line parse: 
1fdb			;       parse raw input buffer 
1fdb			;       tokenise the words 
1fdb			;       malloc new copy (for looping etc) 
1fdb			;       copy to malloc + current pc in line to start of string and add line term 
1fdb			;       save on new rsp 
1fdb			; 
1fdb			 
1fdb			; hl to point to the line to tokenise 
1fdb			 
1fdb			;	push hl 
1fdb 22 1e f1			ld (os_tok_ptr), hl  ; save ptr to string 
1fde			 
1fde			;	ld a,0		; string term on input 
1fde			;	call strlent 
1fde			 
1fde			;	ld (os_tok_len), hl	 ; save string length 
1fde			 
1fde			;if DEBUG_FORTH_TOK 
1fde			;	ex de,hl		 
1fde			;endif 
1fde			 
1fde			;	pop hl 		; get back string pointer 
1fde			 
1fde			if DEBUG_FORTH_TOK 
1fde						DMARK "TOK" 
1fde				CALLMONITOR 
1fde			endif 
1fde 7e			.ptoken2:    ld a,(hl) 
1fdf 23				inc hl 
1fe0 fe 7f			cp FORTH_END_BUFFER 
1fe2 28 29			jr z, .ptokendone2 
1fe4 fe 00			cp 0 
1fe6 28 25			jr z, .ptokendone2 
1fe8 fe 22			cp '"' 
1fea 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fec fe 20			cp ' ' 
1fee 20 ee			jr nz,  .ptoken2 
1ff0			 
1ff0			; TODO consume comments held between ( and ) 
1ff0			 
1ff0				; we have a space so change to zero term for dict match later 
1ff0 2b				dec hl 
1ff1 3e 00			ld a,0 
1ff3 77				ld (hl), a 
1ff4 23				inc hl 
1ff5 18 e7			jr .ptoken2 
1ff7				 
1ff7			 
1ff7			.ptokenstr2: 
1ff7				; skip all white space until either eol (because forgot to term) or end double quote 
1ff7			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1ff7				;inc hl ; skip current double quote 
1ff7 7e				ld a,(hl) 
1ff8 23				inc hl 
1ff9 fe 22			cp '"' 
1ffb 28 e1			jr z, .ptoken2 
1ffd fe 7f			cp FORTH_END_BUFFER 
1fff 28 0c			jr z, .ptokendone2 
2001 fe 00			cp 0 
2003 28 08			jr z, .ptokendone2 
2005 fe 20			cp ' ' 
2007 28 02			jr z, .ptmp2 
2009 18 ec			jr .ptokenstr2 
200b			 
200b			.ptmp2:	; we have a space so change to zero term for dict match later 
200b				;dec hl 
200b				;ld a,"-"	; TODO remove this when working 
200b				;ld (hl), a 
200b				;inc hl 
200b 18 ea			jr .ptokenstr2 
200d			 
200d			.ptokendone2: 
200d				;inc hl 
200d 3e 7f			ld a, FORTH_END_BUFFER 
200f 77				ld (hl),a 
2010 23				inc hl 
2011 3e 21			ld a, '!' 
2013 77				ld (hl),a 
2014			 
2014 2a 1e f1			ld hl,(os_tok_ptr) 
2017			         
2017			if DEBUG_FORTH_TOK 
2017						DMARK "TK1" 
2017				CALLMONITOR 
2017			endif 
2017			 
2017				; push exec string to top of return stack 
2017				FORTH_RSP_NEXT 
2017 cd cb 1b			call macro_forth_rsp_next 
201a				endm 
# End of macro FORTH_RSP_NEXT
201a c9				ret 
201b			 
201b			; 
201b			;	; malloc size + buffer pointer + if is loop flag 
201b			;	ld hl,(os_tok_len) 		 ; get string length 
201b			; 
201b			;	ld a,l 
201b			; 
201b			;	cp 0			; we dont want to use a null string 
201b			;	ret z 
201b			; 
201b			;;	add 3    ; prefix malloc with buffer for current word ptr 
201b			; 
201b			;	add 5     ; TODO when certain not over writing memory remove 
201b			; 
201b			;		 
201b			; 
201b			;if DEBUG_FORTH_TOK 
201b			;			DMARK "TKE" 
201b			;	CALLMONITOR 
201b			;endif 
201b			; 
201b			;	ld l,a 
201b			;	ld h,0 
201b			;;	push hl   ; save required space for the copy later 
201b			;	call malloc 
201b			;if DEBUG_FORTH_TOK 
201b			;			DMARK "TKM" 
201b			;	CALLMONITOR 
201b			;endif 
201b			;	if DEBUG_FORTH_MALLOC_GUARD 
201b			;		push af 
201b			;		call ishlzero 
201b			;;		ld a, l 
201b			;;		add h 
201b			;;		cp 0 
201b			;		pop af 
201b			;		 
201b			;		call z,malloc_error 
201b			;	endif 
201b			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
201b			; 
201b			; 
201b			;if DEBUG_FORTH_TOK 
201b			;			DMARK "TKR" 
201b			;	CALLMONITOR 
201b			;endif 
201b			; 
201b			;	FORTH_RSP_NEXT 
201b			; 
201b			;	;inc hl	 ; go past current buffer pointer 
201b			;	;inc hl 
201b			;	;inc hl   ; and past if loop flag 
201b			;		; TODO Need to set flag  
201b			; 
201b			;	 
201b			;	 
201b			;	ex de,hl	; malloc is dest 
201b			;	ld hl, (os_tok_len) 
201b			;;	pop bc 
201b			;	ld c, l                
201b			;	ld b,0 
201b			;	ld hl, (os_tok_ptr) 
201b			; 
201b			;if DEBUG_FORTH_TOK 
201b			;			DMARK "TKT" 
201b			;	CALLMONITOR 
201b			;endif 
201b			; 
201b			;	; do str cpy 
201b			; 
201b			;	ldir      ; copy byte in hl to de 
201b			; 
201b			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
201b			; 
201b			;if DEBUG_FORTH_TOK 
201b			; 
201b			;			DMARK "TKY" 
201b			;	CALLMONITOR 
201b			;endif 
201b			;	;ld a,0 
201b			;	;ld a,FORTH_END_BUFFER 
201b			;	ex de, hl 
201b			;	;dec hl			 ; go back over the space delim at the end of word 
201b			;	;ld (hl),a 
201b			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
201b			;	ld a,FORTH_END_BUFFER 
201b			;	ld (hl),a 
201b			;	inc hl 
201b			;	ld a,FORTH_END_BUFFER 
201b			;	ld (hl),a 
201b			; 
201b			;	; init the malloc area data 
201b			;	; set pc for in current area 
201b			;	;ld hl, (os_tok_malloc) 
201b			;	;inc hl 
201b			;	;inc hl 
201b			;	;inc hl 
201b			;	;ex de,hl 
201b			;	;ld hl, (os_tok_malloc) 
201b			;	;ld (hl),e 
201b			;	;inc hl 
201b			;	;ld (hl),d 
201b			; 
201b			; 
201b			;	ld hl,(os_tok_malloc) 
201b			;if DEBUG_FORTH_PARSE_KEY 
201b			;			DMARK "TKU" 
201b			;	CALLMONITOR 
201b			;endif 
201b			; 
201b			;	ret 
201b			 
201b			forthexec: 
201b			 
201b			; line exec: 
201b			; forth parser 
201b			 
201b			; 
201b			;       get current exec line on rsp 
201b			 
201b				FORTH_RSP_TOS 
201b cd e2 1b			call macro_forth_rsp_tos 
201e				endm 
# End of macro FORTH_RSP_TOS
201e			 
201e			;       restore current pc - hl points to malloc of data 
201e			 
201e				;ld e, (hl) 
201e				;inc hl 
201e				;ld d, (hl) 
201e				;ex de,hl 
201e			 
201e			 
201e			exec1: 
201e 22 1e f1			ld (os_tok_ptr), hl 
2021			 
2021				; copy our PC to working vars  
2021 22 28 f8			ld (cli_ptr), hl 
2024 22 26 f8			ld (cli_origptr), hl 
2027			 
2027 7e				ld a,(hl) 
2028 fe 7f			cp FORTH_END_BUFFER 
202a c8				ret z 
202b			 
202b				; skip any nulls 
202b			 
202b fe 00			cp 0 
202d 20 03			jr nz, .execword 
202f 23				inc hl 
2030 18 ec			jr exec1 
2032			 
2032			 
2032			.execword: 
2032			 
2032			 
2032			 
2032			if DEBUG_FORTH_PARSE_KEY 
2032						DMARK "KYQ" 
2032				CALLMONITOR 
2032			endif 
2032			;       while at start of word: 
2032			; get start of dict (in user area first) 
2032			 
2032 21 00 80		ld hl, baseram 
2035			;ld hl, sysdict 
2035 22 2a f8		ld (cli_nextword),hl 
2038			;           match word at pc 
2038			;           exec word 
2038			;           or push to dsp 
2038			;           forward to next token 
2038			;           if line term pop rsp and exit 
2038			;        
2038			 
2038			if DEBUG_FORTH_PARSE_KEY 
2038						DMARK "KYq" 
2038				CALLMONITOR 
2038			endif 
2038			 
2038			; 
2038			; word comp 
2038			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2038			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2038			;    move to start of word  
2038			;    compare word to cli_token 
2038			 
2038			.execpnword:	; HL at start of a word in the dictionary to check 
2038			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
2038			;	ld (cli_ptr), hl 
2038			 
2038 2a 2a f8			ld hl,(cli_nextword) 
203b			 
203b cd de 20			call forth_tok_next 
203e			; tok next start here 
203e			;	; TODO skip compiled symbol for now 
203e			;	inc hl 
203e			; 
203e			;	; save pointer to next word 
203e			; 
203e			;	; hl now points to the address of the next word pointer  
203e			;	ld e, (hl) 
203e			;	inc hl 
203e			;	ld d, (hl) 
203e			;	inc l 
203e			; 
203e			;	ex de,hl 
203e			;if DEBUG_FORTH_PARSE_NEXTWORD 
203e			;	push bc 
203e			;	ld bc, (cli_nextword) 
203e			;			DMARK "NXW" 
203e			;	CALLMONITOR 
203e			;	pop bc 
203e			;endif 
203e			; tok next end here 
203e 22 2a f8			ld (cli_nextword), hl     ; save for next check if no match on this word 
2041 eb				ex de, hl 
2042			 
2042			 
2042				; save the pointer of the current token - 1 to check against 
2042				 
2042 22 2e f8			ld (cli_token), hl   
2045				; TODO maybe remove below save if no debug 
2045				; save token string ptr for any debug later 
2045 23				inc hl  
2046 22 30 f8			ld (cli_origtoken), hl 
2049 2b				dec hl 
204a				; save pointer to the start of the next dictionay word 
204a 7e				ld a,(hl)   ; get string length 
204b 47				ld b,a 
204c			.execpnwordinc:  
204c 23				inc hl 
204d 10 fd			djnz .execpnwordinc 
204f 22 2c f8			ld (cli_execword), hl      ; save start of this words code 
2052			 
2052				; now check the word token against the string being parsed 
2052			 
2052 2a 2e f8			ld hl,(cli_token) 
2055 23				inc hl     ; skip string length (use zero term instead to end) 
2056 22 2e f8			ld (cli_token), hl 
2059			 
2059			if DEBUG_FORTH_PARSE_KEY 
2059						DMARK "KY2" 
2059			endif 
2059			if DEBUG_FORTH_PARSE_EXEC 
2059				; see if disabled 
2059			 
2059				ld a, (os_view_disable) 
2059				cp '*' 
2059				jr z, .skip 
2059			 
2059				push hl 
2059				push hl 
2059				call clear_display 
2059				ld de, .compword 
2059				ld a, display_row_1 
2059				call str_at_display 
2059				pop de 
2059				ld a, display_row_2 
2059				call str_at_display 
2059				ld hl,(cli_ptr) 
2059				ld a,(hl) 
2059			        ld hl, os_word_scratch 
2059				ld (hl),a 
2059				ld a,0 
2059				inc hl 
2059				ld (hl),a 	 
2059				ld de, os_word_scratch 
2059				ld a, display_row_2+10 
2059				call str_at_display 
2059				call update_display 
2059				ld a, 100 
2059				call aDelayInMS 
2059				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2059				call delay250ms 
2059				endif 
2059				pop hl 
2059			.skip:  
2059			endif	 
2059			.execpnchar:    ; compare char between token and string to parse 
2059			 
2059			if DEBUG_FORTH_PARSE_KEY 
2059						DMARK "Ky3" 
2059			endif 
2059			if DEBUG_FORTH_PARSE_EXEC 
2059				; see if disabled 
2059			 
2059				ld a, (os_view_disable) 
2059				cp '*' 
2059				jr z, .skip2 
2059			 
2059			;	call clear_display 
2059			ld hl,(cli_token) 
2059			ld a,(hl) 
2059			ld (os_word_scratch),a 
2059				ld hl,(cli_ptr) 
2059			ld a,(hl) 
2059				ld (os_word_scratch+1),a 
2059				ld a,0 
2059				ld (os_word_scratch+2),a 
2059				ld de,os_word_scratch 
2059				ld a,display_row_4 
2059				call str_at_display 
2059				call update_display 
2059			.skip2:  
2059			endif 
2059 2a 2e f8			ld hl,(cli_token) 
205c 7e				ld a, (hl)	 ; char in word token 
205d 23				inc hl 		; move to next char 
205e 22 2e f8			ld (cli_token), hl ; and save it 
2061 47				ld b,a 
2062			 
2062 2a 28 f8			ld hl,(cli_ptr) ;	get the char from the string to parse 
2065 7e				ld a,(hl) 
2066 23				inc hl 
2067 22 28 f8			ld (cli_ptr), hl		; move to next char 
206a cd 5e 11			call toUpper 		; make sure the input string matches case 
206d			 
206d			if DEBUG_FORTH_PARSE 
206d			endif 
206d			 
206d				; input stream end of token is a space so get rid of it 
206d			 
206d			;	cp ' ' 
206d			;	jr nz, .pnskipspace 
206d			; 
206d			;	ld a, 0		; make same term as word token term 
206d			; 
206d			;.pnskipspace: 
206d			 
206d			if DEBUG_FORTH_PARSE_KEY 
206d						DMARK "KY7" 
206d			endif 
206d b8				cp b 
206e c2 84 20			jp nz, .execpnskipword	 ; no match so move to next word 
2071				 
2071			;    if same 
2071			;       scan for string terms 0 for token and 32 for input 
2071			 
2071				 
2071			if DEBUG_FORTH_PARSE_KEY 
2071						DMARK "KY8" 
2071			endif 
2071			 
2071 80				add b			 
2072 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2074							; TODO need to make sure last word in zero term string is accounted for 
2074 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
2076			 
2076			 
2076				; at end of both strings so both are exact match 
2076			 
2076			;       skip ptr for next word 
2076			 
2076 2a 28 f8			ld hl,(cli_ptr) 	; at input string term 
2079 23				inc hl			 ; at next char 
207a 22 28 f8			ld (cli_ptr), hl     ; save for next round of the parser 
207d 22 26 f8			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2080				 
2080				 
2080			if DEBUG_FORTH_PARSE_KEY 
2080						DMARK "KY3" 
2080			endif 
2080			 
2080			 
2080			 
2080			;       exec code block 
2080			if DEBUG_FORTH_JP 
2080				call clear_display 
2080				call update_display 
2080				call delay1s 
2080				ld hl, (cli_execword)     ; save for next check if no match on this word 
2080				ld a,h 
2080				ld hl, os_word_scratch 
2080				call hexout 
2080				ld hl, (cli_execword)     ; save for next check if no match on this word 
2080				ld a,l 
2080				ld hl, os_word_scratch+2 
2080				call hexout 
2080				ld hl, os_word_scratch+4 
2080				ld a,0 
2080				ld (hl),a 
2080				ld de,os_word_scratch 
2080				call str_at_display 
2080					ld a, display_row_2 
2080					call str_at_display 
2080				ld de, (cli_origtoken) 
2080				ld a, display_row_1+10 
2080					call str_at_display 
2080			 
2080				ld a,display_row_1 
2080				ld de, .foundword 
2080				ld a, display_row_3 
2080				call str_at_display 
2080				call update_display 
2080				call delay1s 
2080				call delay1s 
2080				call delay1s 
2080			endif 
2080			 
2080			if DEBUG_FORTH_PARSE_KEY 
2080						DMARK "KYj" 
2080			endif 
2080				; TODO save the word pointer in this exec 
2080			 
2080 2a 2c f8			ld hl,(cli_execword) 
2083 e9				jp (hl) 
2084			 
2084			 
2084			;    if not same 
2084			;	scan for zero term 
2084			;	get ptr for next word 
2084			;	goto word comp 
2084			 
2084			.execpnskipword:	; get pointer to next word 
2084 2a 2a f8			ld hl,(cli_nextword) 
2087			 
2087 7e				ld a,(hl) 
2088 fe 00			cp WORD_SYS_END 
208a			;	cp 0 
208a 28 09			jr z, .execendofdict			 ; at end of words 
208c			 
208c			if DEBUG_FORTH_PARSE_KEY 
208c						DMARK "KY4" 
208c			endif 
208c			if DEBUG_FORTH_PARSE_EXEC 
208c			 
208c				; see if disabled 
208c			 
208c				ld a, (os_view_disable) 
208c				cp '*' 
208c				jr z, .noskip 
208c			 
208c			 
208c				ld de, .nowordfound 
208c				ld a, display_row_3 
208c				call str_at_display 
208c				call update_display 
208c				ld a, 100 
208c				call aDelayInMS 
208c				 
208c				if DEBUG_FORTH_PARSE_EXEC_SLOW 
208c					call delay250ms 
208c				endif 
208c			.noskip:  
208c			 
208c			endif	 
208c			 
208c 2a 26 f8			ld hl,(cli_origptr) 
208f 22 28 f8			ld (cli_ptr),hl 
2092			 
2092			if DEBUG_FORTH_PARSE_KEY 
2092						DMARK "KY5" 
2092			endif 
2092 c3 38 20			jp .execpnword			; else go to next word 
2095			 
2095			.execendofdict:  
2095			 
2095			if DEBUG_FORTH_PARSE_KEY 
2095						DMARK "KYe" 
2095			endif 
2095			if DEBUG_FORTH_PARSE_EXEC 
2095				; see if disabled 
2095			 
2095				ld a, (os_view_disable) 
2095				cp '*' 
2095				jr z, .ispskip 
2095			 
2095				call clear_display 
2095				call update_display 
2095				call delay1s 
2095				ld de, (cli_origptr) 
2095				ld a, display_row_1 
2095				call str_at_display 
2095				 
2095				ld de, .enddict 
2095				ld a, display_row_3 
2095				call str_at_display 
2095				call update_display 
2095				ld a, 100 
2095				call aDelayInMS 
2095				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2095				call delay1s 
2095				call delay1s 
2095				call delay1s 
2095				endif 
2095			.ispskip:  
2095				 
2095			endif	 
2095			 
2095			 
2095			 
2095				; if the word is not a keyword then must be a literal so push it to stack 
2095			 
2095			; push token to stack to end of word 
2095			 
2095				STACKFRAME ON $1efe $2f9f 
2095				if DEBUG_STACK_IMB 
2095					if ON 
2095						exx 
2095						ld de, $1efe 
2095						ld a, d 
2095						ld hl, curframe 
2095						call hexout 
2095						ld a, e 
2095						ld hl, curframe+2 
2095						call hexout 
2095						ld hl, $1efe 
2095						push hl 
2095						ld hl, $2f9f 
2095						push hl 
2095						exx 
2095					endif 
2095				endif 
2095			endm 
# End of macro STACKFRAME
2095			 
2095 2a 1e f1		ld hl,(os_tok_ptr) 
2098 cd 8d 1d		call forth_apush 
209b			 
209b				STACKFRAMECHK ON $1efe $2f9f 
209b				if DEBUG_STACK_IMB 
209b					if ON 
209b						exx 
209b						ld hl, $2f9f 
209b						pop de   ; $2f9f 
209b						call cmp16 
209b						jr nz, .spnosame 
209b						ld hl, $1efe 
209b						pop de   ; $1efe 
209b						call cmp16 
209b						jr z, .spfrsame 
209b						.spnosame: call showsperror 
209b						.spfrsame: nop 
209b						exx 
209b					endif 
209b				endif 
209b			endm 
# End of macro STACKFRAMECHK
209b			 
209b			execnext: 
209b			 
209b			if DEBUG_FORTH_PARSE_KEY 
209b						DMARK "KY>" 
209b			endif 
209b			; move past token to next word 
209b			 
209b 2a 1e f1		ld hl, (os_tok_ptr) 
209e 3e 00		ld a, 0 
20a0 01 ff 00		ld bc, 255     ; input buffer size 
20a3 ed b1		cpir 
20a5			 
20a5			if DEBUG_FORTH_PARSE_KEY 
20a5						DMARK "KY!" 
20a5				CALLMONITOR 
20a5			endif	 
20a5			; TODO this might place hl on the null, so will need to forward on??? 
20a5			;inc hl   ; see if this gets onto the next item 
20a5			 
20a5			 
20a5			; TODO pass a pointer to the buffer to push 
20a5			; TODO call function to push 
20a5			 
20a5			; look for end of input 
20a5			 
20a5			;inc hl 
20a5			;ld a,(hl) 
20a5			;cp FORTH_END_BUFFER 
20a5			;ret z 
20a5			 
20a5			 
20a5 c3 1e 20		jp exec1 
20a8			 
20a8			 
20a8			 
20a8			 
20a8			 
20a8			 
20a8			 
20a8			 
20a8			 
20a8			findnexttok: 
20a8			 
20a8				; hl is pointer to move 
20a8				; de is the token to locate 
20a8			 
20a8					if DEBUG_FORTH 
20a8						DMARK "NTK" 
20a8						CALLMONITOR 
20a8					endif 
20a8 d5				push de 
20a9			 
20a9			.fnt1:	 
20a9				; find first char of token to locate 
20a9			 
20a9 1a				ld a, (de) 
20aa 4f				ld c,a 
20ab 7e				ld a,(hl) 
20ac cd 5e 11			call toUpper 
20af					if DEBUG_FORTH 
20af						DMARK "NT1" 
20af						CALLMONITOR 
20af					endif 
20af b9				cp c 
20b0			 
20b0 28 03			jr z, .fnt2cmpmorefirst	 
20b2			 
20b2				; first char not found move to next char 
20b2			 
20b2 23				inc hl 
20b3 18 f4			jr .fnt1 
20b5			 
20b5			.fnt2cmpmorefirst:	 
20b5				; first char of token found.  
20b5			 
20b5 e5				push hl     ; save start of token just in case it is the right one 
20b6 d9				exx 
20b7 e1				pop hl        ; save it to hl' 
20b8 d9				exx 
20b9			 
20b9			 
20b9			.fnt2cmpmore:	 
20b9				; compare the rest 
20b9				 
20b9 23				inc hl 
20ba 13				inc de 
20bb				 
20bb 1a				ld a, (de) 
20bc 4f				ld c,a 
20bd 7e				ld a,(hl) 
20be cd 5e 11			call toUpper 
20c1			 
20c1					if DEBUG_FORTH 
20c1						DMARK "NT2" 
20c1						CALLMONITOR 
20c1					endif 
20c1				; c has the token to find char 
20c1				; a has the mem to scan char 
20c1			 
20c1 b9				cp c 
20c2 28 04			jr z,.fntmatch1 
20c4			 
20c4				; they are not the same 
20c4			 
20c4					if DEBUG_FORTH 
20c4						DMARK "NT3" 
20c4						CALLMONITOR 
20c4					endif 
20c4 d1				pop de	; reset de token to look for 
20c5 d5				push de 
20c6 18 e1			jr .fnt1 
20c8				 
20c8			.fntmatch1: 
20c8			 
20c8				; is the same char a null which means we might have a full hit? 
20c8					if DEBUG_FORTH 
20c8						DMARK "NT4" 
20c8						CALLMONITOR 
20c8					endif 
20c8			 
20c8 fe 00			cp 0 
20ca 28 0b			jr z, .fntmatchyes 
20cc			 
20cc				; are we at the end of the token to find? 
20cc			 
20cc					if DEBUG_FORTH 
20cc						DMARK "NT5" 
20cc						CALLMONITOR 
20cc					endif 
20cc 3e 00			ld a, 0 
20ce b9				cp c 
20cf			 
20cf c2 b9 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20d2			 
20d2					if DEBUG_FORTH 
20d2						DMARK "NT6" 
20d2						CALLMONITOR 
20d2					endif 
20d2				; token to find is exhusted but no match to stream 
20d2			 
20d2				; restore tok pointer and continue on 
20d2 d1				pop de 
20d3 d5				push de 
20d4 c3 a9 20			jp .fnt1 
20d7			 
20d7			 
20d7			.fntmatchyes: 
20d7			 
20d7				; hl now contains the end of the found token 
20d7			 
20d7				; get rid of saved token pointer to find 
20d7			 
20d7 d1				pop de 
20d8			 
20d8					if DEBUG_FORTH 
20d8						DMARK "NT9" 
20d8						CALLMONITOR 
20d8					endif 
20d8			 
20d8				; hl will be on the null term so forward on 
20d8			 
20d8				; get back the saved start of the token 
20d8			 
20d8 d9				exx 
20d9 e5				push hl     ; save start of token just in case it is the right one 
20da d9				exx 
20db e1				pop hl        ; save it to hl 
20dc			 
20dc c9				ret 
20dd			 
20dd			 
20dd			; LIST needs to find a specific token   
20dd			; FORGET needs to find a spefici token 
20dd			 
20dd			; SAVE needs to find all tokens by flag 
20dd			; WORDS just needs to scan through all  by flag 
20dd			; UWORDS needs to scan through all by flag 
20dd			 
20dd			 
20dd			; given hl as pointer to start of dict look up string 
20dd			; return hl as pointer to start of word block 
20dd			; or 0 if not found 
20dd			 
20dd			forth_find_tok: 
20dd c9				ret 
20de			 
20de			; given hl as pointer to dict structure 
20de			; move to the next dict block structure 
20de			 
20de			forth_tok_next: 
20de				; hl now points to the address of the next word pointer  
20de				; TODO skip compiled symbol for now 
20de			;	push de 
20de 23				inc hl 
20df 5e				ld e, (hl) 
20e0 23				inc hl 
20e1 56				ld d, (hl) 
20e2 23				inc hl 
20e3			 
20e3 eb				ex de,hl 
20e4			if DEBUG_FORTH_PARSE_NEXTWORD 
20e4				push bc 
20e4				ld bc, (cli_nextword) 
20e4						DMARK "NXW" 
20e4				CALLMONITOR 
20e4				pop bc 
20e4			endif 
20e4			;	pop de	 
20e4 c9				ret 
20e5			 
20e5			 
20e5			 
20e5			; eof 
# End of file forth_parserv5.asm
20e5				include "forth_wordsv4.asm" 
20e5			 
20e5			; the core word dictionary v4 
20e5			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20e5			 
20e5			; this is a linked list for each of the system words used 
20e5			; user defined words will follow the same format but will be in ram 
20e5			 
20e5			 
20e5			; 
20e5			; 
20e5			; define linked list: 
20e5			; 
20e5			; 1. compiled byte op code 
20e5			; 2. len of text word 
20e5			; 3. text word 
20e5			; 4. ptr to next dictionary word 
20e5			; 5. asm, calls etc for the word 
20e5			; 
20e5			;  if 1 == 0 then last word in dict  
20e5			;   
20e5			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20e5			;  
20e5			;  
20e5			; create basic standard set of words 
20e5			; 
20e5			;  
20e5			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20e5			; 2DUP 2DROP 2SWAP  
20e5			; @ C@ - get byte  
20e5			; ! C! - store byte 
20e5			; 0< true if less than zero 
20e5			; 0= true if zero 
20e5			; < >  
20e5			; = true if same 
20e5			; variables 
20e5			 
20e5			 
20e5			; Hardware specific words I may need 
20e5			; 
20e5			; IN OUT  
20e5			; calls to key util functions 
20e5			; calls to hardward abstraction stuff 
20e5			; easy control of frame buffers and lcd i/o 
20e5			; keyboard  
20e5			 
20e5			 
20e5			;DICT: macro 
20e5			; op_code, len, word, next 
20e5			;    word: 
20e5			;    db op_code 
20e5			;    ds word zero term 
20e5			;    dw next 
20e5			;    endm 
20e5			 
20e5			 
20e5			 
20e5			 
20e5			; op code 1 is a flag for user define words which are to be handled differently 
20e5			 
20e5			 
20e5			; 
20e5			; 
20e5			;    TODO on entry to a word this should be the expected environment 
20e5			;    hl - tos value if number then held, if string this is the ptr 
20e5			;    de -  
20e5			 
20e5			 
20e5			; opcode ranges 
20e5			; 0 - end of word dict 
20e5			; 255 - user define words 
20e5			 
20e5			sysdict: 
20e5			include "forth_opcodes.asm" 
20e5			; op codes for forth keywords 
20e5			; free to use code 0  
20e5				OPCODE_HEAP: equ  1 
20e5				OPCODE_EXEC: equ 2 
20e5				OPCODE_DUP: equ 3 
20e5				OPCODE_SWAP: equ 4 
20e5				OPCODE_COLN: equ 5 
20e5				OPCODE_SCOLN: equ 6 
20e5				OPCODE_DROP: equ 7 
20e5				OPCODE_DUP2: equ 8 
20e5				OPCODE_DROP2: equ 9 
20e5				OPCODE_SWAP2: equ 10 
20e5				OPCODE_AT: equ 11 
20e5				OPCODE_CAT: equ 12 
20e5				OPCODE_BANG: equ 13 
20e5				OPCODE_CBANG: equ 14 
20e5				OPCODE_SCALL: equ 15 
20e5				OPCODE_DEPTH: equ 16 
20e5				OPCODE_OVER: equ 17 
20e5				OPCODE_PAUSE: equ 18 
20e5				OPCODE_PAUSES: equ 19 
20e5				OPCODE_ROT: equ 20 
20e5			;free to reuse	OPCODE_WORDS: equ 21 
20e5			        OPCODE_NOT: equ 21 
20e5				OPCODE_UWORDS: equ 22 
20e5				OPCODE_BP: equ 23 
20e5				OPCODE_MONITOR: equ 24  
20e5				OPCODE_MALLOC: equ 25 
20e5				OPCODE_FREE: equ 26 
20e5				OPCODE_LIST: equ 27 
20e5				OPCODE_FORGET: equ 28 
20e5				OPCODE_NOP: equ 29 
20e5				OPCODE_COMO: equ 30 
20e5				OPCODE_COMC: equ 31 
20e5			;free to reuse	OPCODE_ENDCORE: equ 32 
20e5				OPCODE_AFTERSOUND: equ 33 
20e5				OPCODE_GP2: equ 34 
20e5				OPCODE_GP3: equ 35 
20e5				OPCODE_GP4: equ 36 
20e5				OPCODE_SIN: equ 37 
20e5				OPCODE_SOUT: equ 38 
20e5				OPCODE_SPIO: equ 39 
20e5				OPCODE_SPICEH: equ 40 
20e5				OPCODE_SPIOb: equ 41 
20e5				OPCODE_SPII: equ 42 
20e5				OPCODE_SESEL: equ 43 
20e5				OPCODE_CARTDEV: equ 44 
20e5			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20e5				OPCODE_FB: equ 46 
20e5				OPCODE_EMIT: equ 47 
20e5				OPCODE_DOTH: equ 48 
20e5				OPCODE_DOTF: equ 49 
20e5				OPCODE_DOT: equ 50 
20e5				OPCODE_CLS: equ 51 
20e5				OPCODE_DRAW: equ 52 
20e5				OPCODE_DUMP: equ 53 
20e5				OPCODE_CDUMP: equ 54 
20e5				OPCODE_DAT: equ 55 
20e5				OPCODE_HOME: equ 56 
20e5				OPCODE_SPACE: equ 57 
20e5				OPCODE_SPACES: equ 58 
20e5				OPCODE_SCROLL: equ 59 
20e5				OPCODE_ATQ: equ 60 
20e5				OPCODE_AUTODSP: equ 61 
20e5				OPCODE_MENU: equ 62 
20e5			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20e5				OPCODE_THEN: equ 64 
20e5				OPCODE_ELSE: equ 65 
20e5				OPCODE_DO: equ 66 
20e5				OPCODE_LOOP: equ 67 
20e5				OPCODE_I: equ 68 
20e5				OPCODE_DLOOP: equ 69  
20e5				OPCODE_REPEAT: equ 70  
20e5				OPCODE_UNTIL: equ 71 
20e5				OPCODE_ENDFLOW: equ 72 
20e5				OPCODE_WAITK: equ 73 
20e5				OPCODE_ACCEPT: equ 74 
20e5				OPCODE_EDIT: equ 75 
20e5			;free to reuse	OPCODE_ENDKEY: equ 76 
20e5				OPCODE_LZERO: equ 77 
20e5				OPCODE_TZERO: equ 78 
20e5				OPCODE_LESS: equ 79 
20e5				OPCODE_GT: equ 80 
20e5				OPCODE_EQUAL: equ 81  
20e5			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20e5				OPCODE_NEG: equ 83 
20e5				OPCODE_DIV: equ 84 
20e5				OPCODE_MUL: equ 85 
20e5				OPCODE_MIN: equ 86 
20e5				OPCODE_MAX: equ 87 
20e5				OPCODE_RND16: equ 88 
20e5				OPCODE_RND8: equ 89 
20e5				OPCODE_RND: equ 90 
20e5			;free to reuse	OPCODE_ENDMATHS: equ 91  
20e5				OPCODE_BYNAME: equ 92 
20e5				OPCODE_DIR: equ 93 
20e5				OPCODE_SAVE: equ 94 
20e5				OPCODE_LOAD: equ 95 
20e5				OPCODE_BSAVE: equ 96 
20e5				OPCODE_BLOAD: equ 97 
20e5				OPCODE_SEO: equ 98  
20e5				OPCODE_SEI: equ 99 
20e5				OPCODE_SFREE: equ 100 
20e5				OPCODE_SIZE: equ 101 
20e5				OPCODE_CREATE: equ 102 
20e5				OPCODE_APPEND: equ 103 
20e5				OPCODE_SDEL: equ 104 
20e5				OPCODE_OPEN: equ 105 
20e5				OPCODE_READ: equ 106 
20e5				OPCODE_EOF: equ 106 
20e5				OPCODE_FORMAT: equ 107 
20e5				OPCODE_LABEL: equ 108 
20e5				OPCODE_LABELS: equ 109 
20e5			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20e5				OPCODE_UPPER: equ 111 
20e5				OPCODE_LOWER: equ 112 
20e5				OPCODE_SUBSTR: equ 113 
20e5				OPCODE_LEFT: equ 114 
20e5				OPCODE_RIGHT: equ 115 
20e5				OPCODE_STR2NUM: equ 116 
20e5				OPCODE_NUM2STR: equ 117 
20e5				OPCODE_CONCAT: equ 118 
20e5				OPCODE_FIND: equ 119 
20e5				OPCODE_LEN: equ 120 
20e5				OPCODE_CHAR: equ 121 
20e5			; free to reuse	OPCODE_STRLEN: equ 122 
20e5			; free to reuse	OPCODE_ENDSTR: equ 123 
20e5				OPCODE_V0S: equ 124 
20e5				OPCODE_V0Q: equ 125 
20e5				OPCODE_V1S: equ 126 
20e5				OPCODE_V1Q: equ 127 
20e5				OPCODE_V2S: equ 128 
20e5				OPCODE_V2Q: equ 129 
20e5				OPCODE_V3S: equ 130 
20e5				OPCODE_V3Q: equ 131 
20e5			;free to reuse	OPCODE_END: equ 132 
20e5				OPCODE_ZDUP: equ 133 
20e5			 
20e5			; eof 
# End of file forth_opcodes.asm
20e5			 
20e5			include "forth_words_core.asm" 
20e5			 
20e5			; | ## Core Words 
20e5			 
20e5			;if MALLOC_4 
20e5			 
20e5			.HEAP: 
20e5				CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20e5 15				db WORD_SYS_CORE+OPCODE_HEAP             
20e6 24 21			dw .EXEC            
20e8 05				db 4 + 1 
20e9 .. 00			db "HEAP",0              
20ee				endm 
# End of macro CWHEAD
20ee			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20ee			; | | u1 - Current number of bytes in the heap 
20ee			; | | u2 - Remaining bytes left on the heap 
20ee			; | |  
20ee			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20ee			 
20ee			 
20ee					if DEBUG_FORTH_WORDS_KEY 
20ee						DMARK "HEP" 
20ee f5				push af  
20ef 3a 03 21			ld a, (.dmark)  
20f2 32 77 fb			ld (debug_mark),a  
20f5 3a 04 21			ld a, (.dmark+1)  
20f8 32 78 fb			ld (debug_mark+1),a  
20fb 3a 05 21			ld a, (.dmark+2)  
20fe 32 79 fb			ld (debug_mark+2),a  
2101 18 03			jr .pastdmark  
2103 ..			.dmark: db "HEP"  
2106 f1			.pastdmark: pop af  
2107			endm  
# End of macro DMARK
2107						CALLMONITOR 
2107 cd 97 16			call break_point_state  
210a				endm  
# End of macro CALLMONITOR
210a					endif 
210a 2a 0a 80				ld hl, (free_list )      
210d 11 0e 80				ld de, heap_start 
2110			 
2110 ed 52				sbc hl, de  
2112			 
2112 cd 24 1c				call forth_push_numhl 
2115			 
2115			 
2115 ed 5b 0a 80			ld de, (free_list )      
2119 21 03 ee				ld hl, heap_end 
211c			 
211c ed 52				sbc hl, de 
211e			 
211e cd 24 1c				call forth_push_numhl 
2121					 
2121			 
2121					 
2121			 
2121			 
2121			 
2121					NEXTW 
2121 c3 8d 1f			jp macro_next 
2124				endm 
# End of macro NEXTW
2124			;endif 
2124			 
2124			.EXEC: 
2124				CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2124 16				db WORD_SYS_CORE+OPCODE_EXEC             
2125 c0 21			dw .STKEXEC            
2127 05				db 4 + 1 
2128 .. 00			db "EXEC",0              
212d				endm 
# End of macro CWHEAD
212d			; | EXEC ( u -- )    Execs the string on TOS as a FORTH expression | CRASHES ON NEXTW 
212d			; | | u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
212d			; | | 
212d			; | |   
212d				STACKFRAME OFF $5efe $5f9f 
212d				if DEBUG_STACK_IMB 
212d					if OFF 
212d						exx 
212d						ld de, $5efe 
212d						ld a, d 
212d						ld hl, curframe 
212d						call hexout 
212d						ld a, e 
212d						ld hl, curframe+2 
212d						call hexout 
212d						ld hl, $5efe 
212d						push hl 
212d						ld hl, $5f9f 
212d						push hl 
212d						exx 
212d					endif 
212d				endif 
212d			endm 
# End of macro STACKFRAME
212d			 
212d					if DEBUG_FORTH_WORDS_KEY 
212d						DMARK "EXE" 
212d f5				push af  
212e 3a 42 21			ld a, (.dmark)  
2131 32 77 fb			ld (debug_mark),a  
2134 3a 43 21			ld a, (.dmark+1)  
2137 32 78 fb			ld (debug_mark+1),a  
213a 3a 44 21			ld a, (.dmark+2)  
213d 32 79 fb			ld (debug_mark+2),a  
2140 18 03			jr .pastdmark  
2142 ..			.dmark: db "EXE"  
2145 f1			.pastdmark: pop af  
2146			endm  
# End of macro DMARK
2146						CALLMONITOR 
2146 cd 97 16			call break_point_state  
2149				endm  
# End of macro CALLMONITOR
2149					endif 
2149			 
2149				FORTH_DSP_VALUEHL 
2149 cd 1b 1e			call macro_dsp_valuehl 
214c				endm 
# End of macro FORTH_DSP_VALUEHL
214c			 
214c				FORTH_DSP_POP 
214c cd d3 1e			call macro_forth_dsp_pop 
214f				endm 
# End of macro FORTH_DSP_POP
214f			 
214f					if DEBUG_FORTH_WORDS 
214f						DMARK "EX1" 
214f f5				push af  
2150 3a 64 21			ld a, (.dmark)  
2153 32 77 fb			ld (debug_mark),a  
2156 3a 65 21			ld a, (.dmark+1)  
2159 32 78 fb			ld (debug_mark+1),a  
215c 3a 66 21			ld a, (.dmark+2)  
215f 32 79 fb			ld (debug_mark+2),a  
2162 18 03			jr .pastdmark  
2164 ..			.dmark: db "EX1"  
2167 f1			.pastdmark: pop af  
2168			endm  
# End of macro DMARK
2168						CALLMONITOR 
2168 cd 97 16			call break_point_state  
216b				endm  
# End of macro CALLMONITOR
216b					endif 
216b			;	ld e,(hl) 
216b			;	inc hl 
216b			;	ld d,(hl) 
216b			;	ex de,hl 
216b			 
216b			;		if DEBUG_FORTH_WORDS 
216b			;			DMARK "EX2" 
216b			;			CALLMONITOR 
216b			;		endif 
216b e5				push hl 
216c			 
216c				;ld a, 0 
216c				;ld a, FORTH_END_BUFFER 
216c cd 67 11			call strlenz 
216f 23				inc hl   ; include zero term to copy 
2170 23				inc hl   ; include term 
2171 23				inc hl   ; include term 
2172 06 00			ld b,0 
2174 4d				ld c,l 
2175 e1				pop hl 
2176 11 1c ef			ld de, execscratch 
2179					if DEBUG_FORTH_WORDS 
2179						DMARK "EX3" 
2179 f5				push af  
217a 3a 8e 21			ld a, (.dmark)  
217d 32 77 fb			ld (debug_mark),a  
2180 3a 8f 21			ld a, (.dmark+1)  
2183 32 78 fb			ld (debug_mark+1),a  
2186 3a 90 21			ld a, (.dmark+2)  
2189 32 79 fb			ld (debug_mark+2),a  
218c 18 03			jr .pastdmark  
218e ..			.dmark: db "EX3"  
2191 f1			.pastdmark: pop af  
2192			endm  
# End of macro DMARK
2192						CALLMONITOR 
2192 cd 97 16			call break_point_state  
2195				endm  
# End of macro CALLMONITOR
2195					endif 
2195 ed b0			ldir 
2197			 
2197			 
2197 21 1c ef			ld hl, execscratch 
219a			 
219a					if DEBUG_FORTH_WORDS 
219a						DMARK "EXe" 
219a f5				push af  
219b 3a af 21			ld a, (.dmark)  
219e 32 77 fb			ld (debug_mark),a  
21a1 3a b0 21			ld a, (.dmark+1)  
21a4 32 78 fb			ld (debug_mark+1),a  
21a7 3a b1 21			ld a, (.dmark+2)  
21aa 32 79 fb			ld (debug_mark+2),a  
21ad 18 03			jr .pastdmark  
21af ..			.dmark: db "EXe"  
21b2 f1			.pastdmark: pop af  
21b3			endm  
# End of macro DMARK
21b3						CALLMONITOR 
21b3 cd 97 16			call break_point_state  
21b6				endm  
# End of macro CALLMONITOR
21b6					endif 
21b6			 
21b6 cd db 1f			call forthparse 
21b9 cd 1b 20			call forthexec 
21bc			;	call forthexec_cleanup 
21bc			;	call forthparse 
21bc			;	call forthexec 
21bc			 
21bc				STACKFRAMECHK OFF $5efe $5f9f 
21bc				if DEBUG_STACK_IMB 
21bc					if OFF 
21bc						exx 
21bc						ld hl, $5f9f 
21bc						pop de   ; $5f9f 
21bc						call cmp16 
21bc						jr nz, .spnosame 
21bc						ld hl, $5efe 
21bc						pop de   ; $5efe 
21bc						call cmp16 
21bc						jr z, .spfrsame 
21bc						.spnosame: call showsperror 
21bc						.spfrsame: nop 
21bc						exx 
21bc					endif 
21bc				endif 
21bc			endm 
# End of macro STACKFRAMECHK
21bc			 
21bc				; an immediate word so no need to process any more words 
21bc c9				ret 
21bd				NEXTW 
21bd c3 8d 1f			jp macro_next 
21c0				endm 
# End of macro NEXTW
21c0			 
21c0			; dead code - old version  
21c0			;	FORTH_RSP_NEXT 
21c0			 
21c0			;  
21c0			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
21c0			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
21c0			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
21c0			;	push hl 
21c0			;	push de 
21c0			;	push bc 
21c0			; 
21c0			; 
21c0			;		if DEBUG_FORTH_WORDS_KEY 
21c0			;			DMARK "EXR" 
21c0			;			CALLMONITOR 
21c0			;		endif 
21c0			; 
21c0			; 
21c0			; 
21c0			;	;v5 FORTH_DSP_VALUE 
21c0			;	FORTH_DSP_VALUEHL 
21c0			; 
21c0			;	; TODO do string type checks 
21c0			; 
21c0			;;v5	inc hl   ; skip type 
21c0			; 
21c0			;	push hl  ; source code  
21c0			;		if DEBUG_FORTH_WORDS 
21c0			;			DMARK "EX1" 
21c0			;			CALLMONITOR 
21c0			;		endif 
21c0			;	ld a, 0 
21c0			;	call strlent 
21c0			; 
21c0			;	inc hl 
21c0			;	inc hl 
21c0			;	inc hl 
21c0			;	inc hl 
21c0			; 
21c0			;	push hl    ; size 
21c0			; 
21c0			;		if DEBUG_FORTH_WORDS 
21c0			;			DMARK "EX2" 
21c0			;			CALLMONITOR 
21c0			;		endif 
21c0			;	call malloc 
21c0			; 
21c0			;	ex de, hl    ; de now contains malloc area 
21c0			;	pop bc   	; get byte count 
21c0			;	pop hl      ; get string to copy 
21c0			; 
21c0			;	push de     ; save malloc for free later 
21c0			; 
21c0			;		if DEBUG_FORTH_WORDS 
21c0			;			DMARK "EX3" 
21c0			;			CALLMONITOR 
21c0			;		endif 
21c0			;	ldir       ; duplicate string 
21c0			; 
21c0			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
21c0			;	 
21c0			;	; TODO fix the parse would be better than this...  
21c0			;	ex de, hl 
21c0			;	dec hl 
21c0			;	ld a, 0 
21c0			;	ld (hl), a 
21c0			;	dec hl 
21c0			;	ld a, ' ' 
21c0			;	ld (hl), a 
21c0			;	dec hl 
21c0			;	ld (hl), a 
21c0			; 
21c0			;	dec hl 
21c0			;	ld (hl), a 
21c0			; 
21c0			; 
21c0			;	FORTH_DSP_POP  
21c0			; 
21c0			;	pop hl     
21c0			;	push hl    ; save malloc area 
21c0			; 
21c0			;		if DEBUG_FORTH_WORDS 
21c0			;			DMARK "EX4" 
21c0			;			CALLMONITOR 
21c0			;		endif 
21c0			; 
21c0			;	call forthparse 
21c0			;	call forthexec 
21c0			;	 
21c0			;	pop hl 
21c0			;	if DEBUG_FORTH_WORDS 
21c0			;		DMARK "EX5" 
21c0			;		CALLMONITOR 
21c0			;	endif 
21c0			; 
21c0			;	if FORTH_ENABLE_FREE 
21c0			;	call free 
21c0			;	endif 
21c0			; 
21c0			;	if DEBUG_FORTH_WORDS 
21c0			;		DMARK "EX6" 
21c0			;		CALLMONITOR 
21c0			;	endif 
21c0			; 
21c0			;	pop bc 
21c0			;	pop de 
21c0			;	pop hl 
21c0			;;	FORTH_RSP_POP	  
21c0			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
21c0			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
21c0			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
21c0			; 
21c0			;	if DEBUG_FORTH_WORDS 
21c0			;		DMARK "EX7" 
21c0			;		CALLMONITOR 
21c0			;	endif 
21c0			;	NEXTW 
21c0			 
21c0			.STKEXEC: 
21c0				CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
21c0 3f				db WORD_SYS_CORE+43             
21c1 08 23			dw .ZDUP            
21c3 08				db 7 + 1 
21c4 .. 00			db "STKEXEC",0              
21cc				endm 
# End of macro CWHEAD
21cc			; | STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code | TO TEST 
21cc			 
21cc			 
21cc					if DEBUG_FORTH_WORDS_KEY 
21cc						DMARK "STX" 
21cc f5				push af  
21cd 3a e1 21			ld a, (.dmark)  
21d0 32 77 fb			ld (debug_mark),a  
21d3 3a e2 21			ld a, (.dmark+1)  
21d6 32 78 fb			ld (debug_mark+1),a  
21d9 3a e3 21			ld a, (.dmark+2)  
21dc 32 79 fb			ld (debug_mark+2),a  
21df 18 03			jr .pastdmark  
21e1 ..			.dmark: db "STX"  
21e4 f1			.pastdmark: pop af  
21e5			endm  
# End of macro DMARK
21e5						CALLMONITOR 
21e5 cd 97 16			call break_point_state  
21e8				endm  
# End of macro CALLMONITOR
21e8					endif 
21e8			 
21e8				FORTH_DSP_VALUEHL 
21e8 cd 1b 1e			call macro_dsp_valuehl 
21eb				endm 
# End of macro FORTH_DSP_VALUEHL
21eb			 
21eb 22 60 f8			ld (store_tmp1), hl    ; count 
21ee			 
21ee				FORTH_DSP_POP 
21ee cd d3 1e			call macro_forth_dsp_pop 
21f1				endm 
# End of macro FORTH_DSP_POP
21f1			.stkexec1: 
21f1 2a 60 f8			ld hl, (store_tmp1)   ; count 
21f4 3e 00			ld a, 0 
21f6 bd				cp l 
21f7 c8				ret z 
21f8			 
21f8 2b				dec hl 
21f9 22 60 f8			ld (store_tmp1), hl    ; count 
21fc				 
21fc				FORTH_DSP_VALUEHL 
21fc cd 1b 1e			call macro_dsp_valuehl 
21ff				endm 
# End of macro FORTH_DSP_VALUEHL
21ff e5				push hl 
2200				 
2200					if DEBUG_FORTH_WORDS 
2200						DMARK "EXp" 
2200 f5				push af  
2201 3a 15 22			ld a, (.dmark)  
2204 32 77 fb			ld (debug_mark),a  
2207 3a 16 22			ld a, (.dmark+1)  
220a 32 78 fb			ld (debug_mark+1),a  
220d 3a 17 22			ld a, (.dmark+2)  
2210 32 79 fb			ld (debug_mark+2),a  
2213 18 03			jr .pastdmark  
2215 ..			.dmark: db "EXp"  
2218 f1			.pastdmark: pop af  
2219			endm  
# End of macro DMARK
2219						CALLMONITOR 
2219 cd 97 16			call break_point_state  
221c				endm  
# End of macro CALLMONITOR
221c					endif 
221c				FORTH_DSP_POP 
221c cd d3 1e			call macro_forth_dsp_pop 
221f				endm 
# End of macro FORTH_DSP_POP
221f			 
221f cd 67 11			call strlenz 
2222 23				inc hl   ; include zero term to copy 
2223 23				inc hl   ; include zero term to copy 
2224 23				inc hl   ; include zero term to copy 
2225 06 00			ld b,0 
2227 4d				ld c,l 
2228 e1				pop hl 
2229 11 1c ef			ld de, execscratch 
222c					if DEBUG_FORTH_WORDS 
222c						DMARK "EX3" 
222c f5				push af  
222d 3a 41 22			ld a, (.dmark)  
2230 32 77 fb			ld (debug_mark),a  
2233 3a 42 22			ld a, (.dmark+1)  
2236 32 78 fb			ld (debug_mark+1),a  
2239 3a 43 22			ld a, (.dmark+2)  
223c 32 79 fb			ld (debug_mark+2),a  
223f 18 03			jr .pastdmark  
2241 ..			.dmark: db "EX3"  
2244 f1			.pastdmark: pop af  
2245			endm  
# End of macro DMARK
2245						CALLMONITOR 
2245 cd 97 16			call break_point_state  
2248				endm  
# End of macro CALLMONITOR
2248					endif 
2248 ed b0			ldir 
224a			 
224a			 
224a 21 1c ef			ld hl, execscratch 
224d			 
224d					if DEBUG_FORTH_WORDS 
224d						DMARK "EXP" 
224d f5				push af  
224e 3a 62 22			ld a, (.dmark)  
2251 32 77 fb			ld (debug_mark),a  
2254 3a 63 22			ld a, (.dmark+1)  
2257 32 78 fb			ld (debug_mark+1),a  
225a 3a 64 22			ld a, (.dmark+2)  
225d 32 79 fb			ld (debug_mark+2),a  
2260 18 03			jr .pastdmark  
2262 ..			.dmark: db "EXP"  
2265 f1			.pastdmark: pop af  
2266			endm  
# End of macro DMARK
2266						CALLMONITOR 
2266 cd 97 16			call break_point_state  
2269				endm  
# End of macro CALLMONITOR
2269					endif 
2269			 
2269 cd db 1f			call forthparse 
226c 21 1c ef			ld hl, execscratch 
226f					if DEBUG_FORTH_WORDS 
226f						DMARK "EXx" 
226f f5				push af  
2270 3a 84 22			ld a, (.dmark)  
2273 32 77 fb			ld (debug_mark),a  
2276 3a 85 22			ld a, (.dmark+1)  
2279 32 78 fb			ld (debug_mark+1),a  
227c 3a 86 22			ld a, (.dmark+2)  
227f 32 79 fb			ld (debug_mark+2),a  
2282 18 03			jr .pastdmark  
2284 ..			.dmark: db "EXx"  
2287 f1			.pastdmark: pop af  
2288			endm  
# End of macro DMARK
2288						CALLMONITOR 
2288 cd 97 16			call break_point_state  
228b				endm  
# End of macro CALLMONITOR
228b					endif 
228b cd 1b 20			call forthexec 
228e			 
228e c3 f1 21			jp .stkexec1 
2291			 
2291 c9				ret 
2292			 
2292			 
2292			.DUP: 
2292				CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2292 17				db WORD_SYS_CORE+OPCODE_DUP             
2293 08 23			dw .ZDUP            
2295 04				db 3 + 1 
2296 .. 00			db "DUP",0              
229a				endm 
# End of macro CWHEAD
229a			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
229a			 
229a					if DEBUG_FORTH_WORDS_KEY 
229a						DMARK "DUP" 
229a f5				push af  
229b 3a af 22			ld a, (.dmark)  
229e 32 77 fb			ld (debug_mark),a  
22a1 3a b0 22			ld a, (.dmark+1)  
22a4 32 78 fb			ld (debug_mark+1),a  
22a7 3a b1 22			ld a, (.dmark+2)  
22aa 32 79 fb			ld (debug_mark+2),a  
22ad 18 03			jr .pastdmark  
22af ..			.dmark: db "DUP"  
22b2 f1			.pastdmark: pop af  
22b3			endm  
# End of macro DMARK
22b3						CALLMONITOR 
22b3 cd 97 16			call break_point_state  
22b6				endm  
# End of macro CALLMONITOR
22b6					endif 
22b6			 
22b6					FORTH_DSP 
22b6 cd e1 1d			call macro_forth_dsp 
22b9				endm 
# End of macro FORTH_DSP
22b9			 
22b9 7e					ld a, (HL) 
22ba fe 01				cp DS_TYPE_STR 
22bc 20 25				jr nz, .dupinum 
22be			 
22be					; push another string 
22be			 
22be					FORTH_DSP_VALUEHL     		 
22be cd 1b 1e			call macro_dsp_valuehl 
22c1				endm 
# End of macro FORTH_DSP_VALUEHL
22c1			 
22c1				if DEBUG_FORTH_WORDS 
22c1					DMARK "DUs" 
22c1 f5				push af  
22c2 3a d6 22			ld a, (.dmark)  
22c5 32 77 fb			ld (debug_mark),a  
22c8 3a d7 22			ld a, (.dmark+1)  
22cb 32 78 fb			ld (debug_mark+1),a  
22ce 3a d8 22			ld a, (.dmark+2)  
22d1 32 79 fb			ld (debug_mark+2),a  
22d4 18 03			jr .pastdmark  
22d6 ..			.dmark: db "DUs"  
22d9 f1			.pastdmark: pop af  
22da			endm  
# End of macro DMARK
22da					CALLMONITOR 
22da cd 97 16			call break_point_state  
22dd				endm  
# End of macro CALLMONITOR
22dd				endif 
22dd cd 92 1c				call forth_push_str 
22e0			 
22e0					NEXTW 
22e0 c3 8d 1f			jp macro_next 
22e3				endm 
# End of macro NEXTW
22e3			 
22e3			 
22e3			.dupinum: 
22e3					 
22e3			 
22e3			 
22e3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
22e3 cd 1b 1e			call macro_dsp_valuehl 
22e6				endm 
# End of macro FORTH_DSP_VALUEHL
22e6			 
22e6				; TODO add floating point number detection 
22e6			 
22e6				if DEBUG_FORTH_WORDS 
22e6					DMARK "DUi" 
22e6 f5				push af  
22e7 3a fb 22			ld a, (.dmark)  
22ea 32 77 fb			ld (debug_mark),a  
22ed 3a fc 22			ld a, (.dmark+1)  
22f0 32 78 fb			ld (debug_mark+1),a  
22f3 3a fd 22			ld a, (.dmark+2)  
22f6 32 79 fb			ld (debug_mark+2),a  
22f9 18 03			jr .pastdmark  
22fb ..			.dmark: db "DUi"  
22fe f1			.pastdmark: pop af  
22ff			endm  
# End of macro DMARK
22ff					CALLMONITOR 
22ff cd 97 16			call break_point_state  
2302				endm  
# End of macro CALLMONITOR
2302				endif 
2302			 
2302 cd 24 1c				call forth_push_numhl 
2305					NEXTW 
2305 c3 8d 1f			jp macro_next 
2308				endm 
# End of macro NEXTW
2308			.ZDUP: 
2308				CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2308 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2309 40 23			dw .SWAP            
230b 05				db 4 + 1 
230c .. 00			db "?DUP",0              
2311				endm 
# End of macro CWHEAD
2311			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | DONE 
2311			 
2311					if DEBUG_FORTH_WORDS_KEY 
2311						DMARK "qDU" 
2311 f5				push af  
2312 3a 26 23			ld a, (.dmark)  
2315 32 77 fb			ld (debug_mark),a  
2318 3a 27 23			ld a, (.dmark+1)  
231b 32 78 fb			ld (debug_mark+1),a  
231e 3a 28 23			ld a, (.dmark+2)  
2321 32 79 fb			ld (debug_mark+2),a  
2324 18 03			jr .pastdmark  
2326 ..			.dmark: db "qDU"  
2329 f1			.pastdmark: pop af  
232a			endm  
# End of macro DMARK
232a						CALLMONITOR 
232a cd 97 16			call break_point_state  
232d				endm  
# End of macro CALLMONITOR
232d					endif 
232d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
232d cd 1b 1e			call macro_dsp_valuehl 
2330				endm 
# End of macro FORTH_DSP_VALUEHL
2330			 
2330 e5					push hl 
2331			 
2331					; is it a zero? 
2331			 
2331 3e 00				ld a, 0 
2333 84					add h 
2334 85					add l 
2335			 
2335 e1					pop hl 
2336			 
2336 fe 00				cp 0 
2338 28 03				jr z, .dup2orig 
233a			 
233a			 
233a cd 24 1c				call forth_push_numhl 
233d			 
233d			 
233d				; TODO add floating point number detection 
233d			 
233d			.dup2orig: 
233d			 
233d					NEXTW 
233d c3 8d 1f			jp macro_next 
2340				endm 
# End of macro NEXTW
2340			.SWAP: 
2340				CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
2340 18				db WORD_SYS_CORE+OPCODE_SWAP             
2341 7f 23			dw .COLN            
2343 05				db 4 + 1 
2344 .. 00			db "SWAP",0              
2349				endm 
# End of macro CWHEAD
2349			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2349					if DEBUG_FORTH_WORDS_KEY 
2349						DMARK "SWP" 
2349 f5				push af  
234a 3a 5e 23			ld a, (.dmark)  
234d 32 77 fb			ld (debug_mark),a  
2350 3a 5f 23			ld a, (.dmark+1)  
2353 32 78 fb			ld (debug_mark+1),a  
2356 3a 60 23			ld a, (.dmark+2)  
2359 32 79 fb			ld (debug_mark+2),a  
235c 18 03			jr .pastdmark  
235e ..			.dmark: db "SWP"  
2361 f1			.pastdmark: pop af  
2362			endm  
# End of macro DMARK
2362						CALLMONITOR 
2362 cd 97 16			call break_point_state  
2365				endm  
# End of macro CALLMONITOR
2365					endif 
2365			 
2365					FORTH_DSP_VALUEHL 
2365 cd 1b 1e			call macro_dsp_valuehl 
2368				endm 
# End of macro FORTH_DSP_VALUEHL
2368 e5					push hl     ; w2 
2369			 
2369					FORTH_DSP_POP 
2369 cd d3 1e			call macro_forth_dsp_pop 
236c				endm 
# End of macro FORTH_DSP_POP
236c			 
236c					FORTH_DSP_VALUEHL 
236c cd 1b 1e			call macro_dsp_valuehl 
236f				endm 
# End of macro FORTH_DSP_VALUEHL
236f			 
236f					FORTH_DSP_POP 
236f cd d3 1e			call macro_forth_dsp_pop 
2372				endm 
# End of macro FORTH_DSP_POP
2372			 
2372 d1					pop de     ; w2	, hl = w1 
2373			 
2373 eb					ex de, hl 
2374 d5					push de 
2375			 
2375 cd 24 1c				call forth_push_numhl 
2378			 
2378 e1					pop hl 
2379			 
2379 cd 24 1c				call forth_push_numhl 
237c					 
237c			 
237c					NEXTW 
237c c3 8d 1f			jp macro_next 
237f				endm 
# End of macro NEXTW
237f			.COLN: 
237f				CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
237f 19				db WORD_SYS_CORE+OPCODE_COLN             
2380 0b 25			dw .SCOLN            
2382 02				db 1 + 1 
2383 .. 00			db ":",0              
2385				endm 
# End of macro CWHEAD
2385			; | : ( -- )         Create new word | DONE 
2385			 
2385					if DEBUG_FORTH_WORDS_KEY 
2385						DMARK "CLN" 
2385 f5				push af  
2386 3a 9a 23			ld a, (.dmark)  
2389 32 77 fb			ld (debug_mark),a  
238c 3a 9b 23			ld a, (.dmark+1)  
238f 32 78 fb			ld (debug_mark+1),a  
2392 3a 9c 23			ld a, (.dmark+2)  
2395 32 79 fb			ld (debug_mark+2),a  
2398 18 03			jr .pastdmark  
239a ..			.dmark: db "CLN"  
239d f1			.pastdmark: pop af  
239e			endm  
# End of macro DMARK
239e						CALLMONITOR 
239e cd 97 16			call break_point_state  
23a1				endm  
# End of macro CALLMONITOR
23a1					endif 
23a1				STACKFRAME OFF $8efe $989f 
23a1				if DEBUG_STACK_IMB 
23a1					if OFF 
23a1						exx 
23a1						ld de, $8efe 
23a1						ld a, d 
23a1						ld hl, curframe 
23a1						call hexout 
23a1						ld a, e 
23a1						ld hl, curframe+2 
23a1						call hexout 
23a1						ld hl, $8efe 
23a1						push hl 
23a1						ld hl, $989f 
23a1						push hl 
23a1						exx 
23a1					endif 
23a1				endif 
23a1			endm 
# End of macro STACKFRAME
23a1				; get parser buffer length  of new word 
23a1			 
23a1				 
23a1			 
23a1					; move tok past this to start of name defintition 
23a1					; TODO get word to define 
23a1					; TODO Move past word token 
23a1					; TODO get length of string up to the ';' 
23a1			 
23a1 2a 1e f1			ld hl, (os_tok_ptr) 
23a4 23				inc hl 
23a5 23				inc hl 
23a6			 
23a6 3e 3b			ld a, ';' 
23a8 cd 72 11			call strlent 
23ab			 
23ab 7d				ld a,l 
23ac 32 19 ee			ld (os_new_parse_len), a 
23af			 
23af			 
23af			if DEBUG_FORTH_UWORD 
23af ed 5b 1e f1		ld de, (os_tok_ptr) 
23b3						DMARK ":01" 
23b3 f5				push af  
23b4 3a c8 23			ld a, (.dmark)  
23b7 32 77 fb			ld (debug_mark),a  
23ba 3a c9 23			ld a, (.dmark+1)  
23bd 32 78 fb			ld (debug_mark+1),a  
23c0 3a ca 23			ld a, (.dmark+2)  
23c3 32 79 fb			ld (debug_mark+2),a  
23c6 18 03			jr .pastdmark  
23c8 ..			.dmark: db ":01"  
23cb f1			.pastdmark: pop af  
23cc			endm  
# End of macro DMARK
23cc				CALLMONITOR 
23cc cd 97 16			call break_point_state  
23cf				endm  
# End of macro CALLMONITOR
23cf			endif 
23cf			 
23cf			; 
23cf			;  new word memory layout: 
23cf			;  
23cf			;    : adg 6666 ;  
23cf			; 
23cf			;    db   1     ; user defined word  
23cf 23				inc hl    
23d0			;    dw   sysdict 
23d0 23				inc hl 
23d1 23				inc hl 
23d2			;    db <word len>+1 (for null) 
23d2 23				inc hl 
23d3			;    db .... <word> 
23d3			; 
23d3			 
23d3 23				inc hl    ; some extras for the word preamble before the above 
23d4 23				inc hl 
23d5 23				inc hl 
23d6 23				inc hl 
23d7 23				inc hl 
23d8 23				inc hl 
23d9 23				inc hl  
23da 23				inc hl 
23db 23				inc hl 
23dc 23				inc hl 
23dd 23				inc hl 
23de 23				inc hl 
23df 23				inc hl 
23e0 23				inc hl     ; TODO how many do we really need?     maybe only 6 
23e1			;       exec word buffer 
23e1			;	<ptr word>   
23e1 23				inc hl 
23e2 23				inc hl 
23e3			;       <word list><null term> 7F final term 
23e3			 
23e3			 
23e3			if DEBUG_FORTH_UWORD 
23e3						DMARK ":02" 
23e3 f5				push af  
23e4 3a f8 23			ld a, (.dmark)  
23e7 32 77 fb			ld (debug_mark),a  
23ea 3a f9 23			ld a, (.dmark+1)  
23ed 32 78 fb			ld (debug_mark+1),a  
23f0 3a fa 23			ld a, (.dmark+2)  
23f3 32 79 fb			ld (debug_mark+2),a  
23f6 18 03			jr .pastdmark  
23f8 ..			.dmark: db ":02"  
23fb f1			.pastdmark: pop af  
23fc			endm  
# End of macro DMARK
23fc				CALLMONITOR 
23fc cd 97 16			call break_point_state  
23ff				endm  
# End of macro CALLMONITOR
23ff			endif 
23ff			 
23ff				 
23ff					; malloc the size 
23ff			 
23ff cd d0 11				call malloc 
2402 22 1b ee				ld (os_new_malloc), hl     ; save malloc start 
2405			 
2405			;    db   1     ; user defined word  
2405 3e 01				ld a, WORD_SYS_UWORD  
2407 77					ld (hl), a 
2408				 
2408 23				inc hl    
2409			;    dw   sysdict 
2409 11 e5 20			ld de, sysdict       ; continue on with the scan to the system dict 
240c 73				ld (hl), e 
240d 23				inc hl 
240e 72				ld (hl), d 
240f 23				inc hl 
2410			 
2410			 
2410			;    Setup dict word 
2410			 
2410 23				inc hl 
2411 22 15 ee			ld (os_new_work_ptr), hl     ; save start of dict word  
2414			 
2414				; 1. get length of dict word 
2414			 
2414			 
2414 2a 1e f1			ld hl, (os_tok_ptr) 
2417 23				inc hl 
2418 23				inc hl    ; position to start of dict word 
2419 3e 00			ld a, 0 
241b cd 72 11			call strlent 
241e			 
241e			 
241e 23				inc hl    ; to include null??? 
241f			 
241f				; write length of dict word 
241f			 
241f ed 5b 15 ee		ld de, (os_new_work_ptr)   ; get dest for copy of word 
2423 1b				dec de 
2424 eb				ex de, hl 
2425 73				ld (hl), e 
2426 eb				ex de, hl 
2427			 
2427				 
2427			 
2427				; copy  
2427 4d				ld c, l 
2428 06 00			ld b, 0 
242a ed 5b 15 ee		ld de, (os_new_work_ptr)   ; get dest for copy of word 
242e 2a 1e f1			ld hl, (os_tok_ptr) 
2431 23				inc hl 
2432 23				inc hl    ; position to start of dict word 
2433				 
2433			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2433				 
2433				; TODO need to convert word to upper case 
2433			 
2433			ucasetok:	 
2433 7e				ld a,(hl) 
2434 cd 5e 11			call toUpper 
2437 77				ld (hl),a 
2438 ed a0			ldi 
243a f2 33 24		 	jp p, ucasetok 
243d			 
243d			 
243d			 
243d				; de now points to start of where the word body code should be placed 
243d ed 53 15 ee		ld (os_new_work_ptr), de 
2441				; hl now points to the words to throw at forthexec which needs to be copied 
2441 22 13 ee			ld (os_new_src_ptr), hl 
2444			 
2444				; TODO add 'call to forthexec' 
2444			 
2444			if DEBUG_FORTH_UWORD 
2444 c5				push bc 
2445 ed 4b 1b ee		ld bc, (os_new_malloc) 
2449						DMARK ":0x" 
2449 f5				push af  
244a 3a 5e 24			ld a, (.dmark)  
244d 32 77 fb			ld (debug_mark),a  
2450 3a 5f 24			ld a, (.dmark+1)  
2453 32 78 fb			ld (debug_mark+1),a  
2456 3a 60 24			ld a, (.dmark+2)  
2459 32 79 fb			ld (debug_mark+2),a  
245c 18 03			jr .pastdmark  
245e ..			.dmark: db ":0x"  
2461 f1			.pastdmark: pop af  
2462			endm  
# End of macro DMARK
2462				CALLMONITOR 
2462 cd 97 16			call break_point_state  
2465				endm  
# End of macro CALLMONITOR
2465 c1				pop bc 
2466			endif 
2466			 
2466			 
2466				; create word preamble which should be: 
2466			 
2466			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2466			 
2466				;    ld hl, <word code> 
2466				;    jp user_exec 
2466			        ;    <word code bytes> 
2466			 
2466			 
2466			;	inc de     ; TODO ??? or are we already past the word's null 
2466 eb				ex de, hl 
2467			 
2467 36 21			ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
2469			 
2469 23				inc hl 
246a 22 0f ee			ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
246d 23				inc hl 
246e			 
246e 23				inc hl 
246f 36 c3			ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
2471			 
2471 01 76 51			ld bc, user_exec 
2474 23				inc hl 
2475 71				ld (hl), c     ; poke address of user_exec 
2476 23				inc hl 
2477 70				ld (hl), b     
2478			 ; 
2478			;	inc hl 
2478			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2478			; 
2478			; 
2478			;	ld bc, macro_forth_rsp_next 
2478			;	inc hl 
2478			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
2478			;	inc hl 
2478			;	ld (hl), b     
2478			 ; 
2478			;	inc hl 
2478			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2478			; 
2478			; 
2478			;	inc hl 
2478			;	ld bc, forthexec 
2478			;	ld (hl), c     ; poke address of forthexec 
2478			;	inc hl 
2478			;	ld (hl), b      
2478			; 
2478			;	inc hl 
2478			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
2478			; 
2478			;	ld bc, user_dict_next 
2478			;	inc hl 
2478			;	ld (hl), c     ; poke address of forthexec 
2478			;	inc hl 
2478			;	ld (hl), b      
2478			 
2478				; hl is now where we need to copy the word byte data to save this 
2478			 
2478 23				inc hl 
2479 22 11 ee			ld (os_new_exec), hl 
247c				 
247c				; copy definition 
247c			 
247c eb				ex de, hl 
247d			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
247d			;	inc de    ; skip the PC for this parse 
247d 3a 19 ee			ld a, (os_new_parse_len) 
2480 4f				ld c, a 
2481 06 00			ld b, 0 
2483 ed b0			ldir		 ; copy defintion 
2485			 
2485			 
2485				; poke the address of where the new word bytes live for forthexec 
2485			 
2485 2a 0f ee			ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
2488			 
2488 ed 5b 11 ee		ld de, (os_new_exec)      
248c				 
248c 73				ld (hl), e 
248d 23				inc hl 
248e 72				ld (hl), d 
248f			 
248f					; TODO copy last user dict word next link to this word 
248f					; TODO update last user dict word to point to this word 
248f			; 
248f			; hl f923 de 812a ; bc 811a 
248f			 
248f			if DEBUG_FORTH_UWORD 
248f c5				push bc 
2490 ed 4b 1b ee		ld bc, (os_new_malloc) 
2494						DMARK ":0A" 
2494 f5				push af  
2495 3a a9 24			ld a, (.dmark)  
2498 32 77 fb			ld (debug_mark),a  
249b 3a aa 24			ld a, (.dmark+1)  
249e 32 78 fb			ld (debug_mark+1),a  
24a1 3a ab 24			ld a, (.dmark+2)  
24a4 32 79 fb			ld (debug_mark+2),a  
24a7 18 03			jr .pastdmark  
24a9 ..			.dmark: db ":0A"  
24ac f1			.pastdmark: pop af  
24ad			endm  
# End of macro DMARK
24ad				CALLMONITOR 
24ad cd 97 16			call break_point_state  
24b0				endm  
# End of macro CALLMONITOR
24b0 c1				pop bc 
24b1			endif 
24b1			if DEBUG_FORTH_UWORD 
24b1 c5				push bc 
24b2 ed 4b 1b ee		ld bc, (os_new_malloc) 
24b6 03				inc bc 
24b7 03				inc bc 
24b8 03				inc bc 
24b9 03				inc bc 
24ba 03				inc bc 
24bb 03				inc bc 
24bc 03				inc bc 
24bd 03				inc bc 
24be			 
24be						DMARK ":0B" 
24be f5				push af  
24bf 3a d3 24			ld a, (.dmark)  
24c2 32 77 fb			ld (debug_mark),a  
24c5 3a d4 24			ld a, (.dmark+1)  
24c8 32 78 fb			ld (debug_mark+1),a  
24cb 3a d5 24			ld a, (.dmark+2)  
24ce 32 79 fb			ld (debug_mark+2),a  
24d1 18 03			jr .pastdmark  
24d3 ..			.dmark: db ":0B"  
24d6 f1			.pastdmark: pop af  
24d7			endm  
# End of macro DMARK
24d7				CALLMONITOR 
24d7 cd 97 16			call break_point_state  
24da				endm  
# End of macro CALLMONITOR
24da c1				pop bc 
24db			endif 
24db			 
24db			; update word dict linked list for new word 
24db			 
24db			 
24db 2a 1a f1		ld hl, (os_last_new_uword)		; get the start of the last added uword 
24de 23			inc hl     ; move to next work linked list ptr 
24df			 
24df ed 5b 1b ee	ld de, (os_new_malloc)		 ; new next word 
24e3 73			ld (hl), e 
24e4 23			inc hl 
24e5 72			ld (hl), d 
24e6			 
24e6			if DEBUG_FORTH_UWORD 
24e6 ed 4b 1a f1		ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
24ea			endif 
24ea			 
24ea ed 53 1a f1	ld (os_last_new_uword), de      ; update last new uword ptr 
24ee			 
24ee			 
24ee			if DEBUG_FORTH_UWORD 
24ee						DMARK ":0+" 
24ee f5				push af  
24ef 3a 03 25			ld a, (.dmark)  
24f2 32 77 fb			ld (debug_mark),a  
24f5 3a 04 25			ld a, (.dmark+1)  
24f8 32 78 fb			ld (debug_mark+1),a  
24fb 3a 05 25			ld a, (.dmark+2)  
24fe 32 79 fb			ld (debug_mark+2),a  
2501 18 03			jr .pastdmark  
2503 ..			.dmark: db ":0+"  
2506 f1			.pastdmark: pop af  
2507			endm  
# End of macro DMARK
2507				CALLMONITOR 
2507 cd 97 16			call break_point_state  
250a				endm  
# End of macro CALLMONITOR
250a			endif 
250a			 
250a				STACKFRAMECHK OFF $8efe $989f 
250a				if DEBUG_STACK_IMB 
250a					if OFF 
250a						exx 
250a						ld hl, $989f 
250a						pop de   ; $989f 
250a						call cmp16 
250a						jr nz, .spnosame 
250a						ld hl, $8efe 
250a						pop de   ; $8efe 
250a						call cmp16 
250a						jr z, .spfrsame 
250a						.spnosame: call showsperror 
250a						.spfrsame: nop 
250a						exx 
250a					endif 
250a				endif 
250a			endm 
# End of macro STACKFRAMECHK
250a			 
250a c9			ret    ; dont process any remaining parser tokens as they form new word 
250b			 
250b			 
250b			 
250b			 
250b			;		NEXT 
250b			.SCOLN: 
250b			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
250b 06				db OPCODE_SCOLN 
250c 57 25			dw .DROP 
250e 02				db 2 
250f .. 00			db ";",0           
2511			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2511					if DEBUG_FORTH_WORDS_KEY 
2511						DMARK "SCN" 
2511 f5				push af  
2512 3a 26 25			ld a, (.dmark)  
2515 32 77 fb			ld (debug_mark),a  
2518 3a 27 25			ld a, (.dmark+1)  
251b 32 78 fb			ld (debug_mark+1),a  
251e 3a 28 25			ld a, (.dmark+2)  
2521 32 79 fb			ld (debug_mark+2),a  
2524 18 03			jr .pastdmark  
2526 ..			.dmark: db "SCN"  
2529 f1			.pastdmark: pop af  
252a			endm  
# End of macro DMARK
252a						CALLMONITOR 
252a cd 97 16			call break_point_state  
252d				endm  
# End of macro CALLMONITOR
252d					endif 
252d					FORTH_RSP_TOS 
252d cd e2 1b			call macro_forth_rsp_tos 
2530				endm 
# End of macro FORTH_RSP_TOS
2530 e5					push hl 
2531					FORTH_RSP_POP 
2531 cd ec 1b			call macro_forth_rsp_pop 
2534				endm 
# End of macro FORTH_RSP_POP
2534 e1					pop hl 
2535			;		ex de,hl 
2535 22 1e f1				ld (os_tok_ptr),hl 
2538			 
2538			if DEBUG_FORTH_UWORD 
2538						DMARK "SCL" 
2538 f5				push af  
2539 3a 4d 25			ld a, (.dmark)  
253c 32 77 fb			ld (debug_mark),a  
253f 3a 4e 25			ld a, (.dmark+1)  
2542 32 78 fb			ld (debug_mark+1),a  
2545 3a 4f 25			ld a, (.dmark+2)  
2548 32 79 fb			ld (debug_mark+2),a  
254b 18 03			jr .pastdmark  
254d ..			.dmark: db "SCL"  
2550 f1			.pastdmark: pop af  
2551			endm  
# End of macro DMARK
2551				CALLMONITOR 
2551 cd 97 16			call break_point_state  
2554				endm  
# End of macro CALLMONITOR
2554			endif 
2554					NEXTW 
2554 c3 8d 1f			jp macro_next 
2557				endm 
# End of macro NEXTW
2557			 
2557			.DROP: 
2557				CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2557 1b				db WORD_SYS_CORE+OPCODE_DROP             
2558 82 25			dw .DUP2            
255a 05				db 4 + 1 
255b .. 00			db "DROP",0              
2560				endm 
# End of macro CWHEAD
2560			; | DROP ( w -- )   drop the TOS item   | DONE 
2560					if DEBUG_FORTH_WORDS_KEY 
2560						DMARK "DRP" 
2560 f5				push af  
2561 3a 75 25			ld a, (.dmark)  
2564 32 77 fb			ld (debug_mark),a  
2567 3a 76 25			ld a, (.dmark+1)  
256a 32 78 fb			ld (debug_mark+1),a  
256d 3a 77 25			ld a, (.dmark+2)  
2570 32 79 fb			ld (debug_mark+2),a  
2573 18 03			jr .pastdmark  
2575 ..			.dmark: db "DRP"  
2578 f1			.pastdmark: pop af  
2579			endm  
# End of macro DMARK
2579						CALLMONITOR 
2579 cd 97 16			call break_point_state  
257c				endm  
# End of macro CALLMONITOR
257c					endif 
257c					FORTH_DSP_POP 
257c cd d3 1e			call macro_forth_dsp_pop 
257f				endm 
# End of macro FORTH_DSP_POP
257f					NEXTW 
257f c3 8d 1f			jp macro_next 
2582				endm 
# End of macro NEXTW
2582			.DUP2: 
2582				CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2582 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2583 c7 25			dw .DROP2            
2585 05				db 4 + 1 
2586 .. 00			db "2DUP",0              
258b				endm 
# End of macro CWHEAD
258b			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | DONE 
258b					if DEBUG_FORTH_WORDS_KEY 
258b						DMARK "2DU" 
258b f5				push af  
258c 3a a0 25			ld a, (.dmark)  
258f 32 77 fb			ld (debug_mark),a  
2592 3a a1 25			ld a, (.dmark+1)  
2595 32 78 fb			ld (debug_mark+1),a  
2598 3a a2 25			ld a, (.dmark+2)  
259b 32 79 fb			ld (debug_mark+2),a  
259e 18 03			jr .pastdmark  
25a0 ..			.dmark: db "2DU"  
25a3 f1			.pastdmark: pop af  
25a4			endm  
# End of macro DMARK
25a4						CALLMONITOR 
25a4 cd 97 16			call break_point_state  
25a7				endm  
# End of macro CALLMONITOR
25a7					endif 
25a7					FORTH_DSP_VALUEHL 
25a7 cd 1b 1e			call macro_dsp_valuehl 
25aa				endm 
# End of macro FORTH_DSP_VALUEHL
25aa e5					push hl      ; 2 
25ab			 
25ab					FORTH_DSP_POP 
25ab cd d3 1e			call macro_forth_dsp_pop 
25ae				endm 
# End of macro FORTH_DSP_POP
25ae					 
25ae					FORTH_DSP_VALUEHL 
25ae cd 1b 1e			call macro_dsp_valuehl 
25b1				endm 
# End of macro FORTH_DSP_VALUEHL
25b1			;		push hl      ; 1 
25b1			 
25b1					FORTH_DSP_POP 
25b1 cd d3 1e			call macro_forth_dsp_pop 
25b4				endm 
# End of macro FORTH_DSP_POP
25b4			 
25b4			;		pop hl       ; 1 
25b4 d1					pop de       ; 2 
25b5			 
25b5 cd 24 1c				call forth_push_numhl 
25b8 eb					ex de, hl 
25b9 cd 24 1c				call forth_push_numhl 
25bc			 
25bc					 
25bc eb					ex de, hl 
25bd			 
25bd cd 24 1c				call forth_push_numhl 
25c0 eb					ex de, hl 
25c1 cd 24 1c				call forth_push_numhl 
25c4			 
25c4			 
25c4					NEXTW 
25c4 c3 8d 1f			jp macro_next 
25c7				endm 
# End of macro NEXTW
25c7			.DROP2: 
25c7				CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
25c7 1d				db WORD_SYS_CORE+OPCODE_DROP2             
25c8 f6 25			dw .SWAP2            
25ca 06				db 5 + 1 
25cb .. 00			db "2DROP",0              
25d1				endm 
# End of macro CWHEAD
25d1			; | 2DROP ( w w -- )    Double drop | DONE 
25d1					if DEBUG_FORTH_WORDS_KEY 
25d1						DMARK "2DR" 
25d1 f5				push af  
25d2 3a e6 25			ld a, (.dmark)  
25d5 32 77 fb			ld (debug_mark),a  
25d8 3a e7 25			ld a, (.dmark+1)  
25db 32 78 fb			ld (debug_mark+1),a  
25de 3a e8 25			ld a, (.dmark+2)  
25e1 32 79 fb			ld (debug_mark+2),a  
25e4 18 03			jr .pastdmark  
25e6 ..			.dmark: db "2DR"  
25e9 f1			.pastdmark: pop af  
25ea			endm  
# End of macro DMARK
25ea						CALLMONITOR 
25ea cd 97 16			call break_point_state  
25ed				endm  
# End of macro CALLMONITOR
25ed					endif 
25ed					FORTH_DSP_POP 
25ed cd d3 1e			call macro_forth_dsp_pop 
25f0				endm 
# End of macro FORTH_DSP_POP
25f0					FORTH_DSP_POP 
25f0 cd d3 1e			call macro_forth_dsp_pop 
25f3				endm 
# End of macro FORTH_DSP_POP
25f3					NEXTW 
25f3 c3 8d 1f			jp macro_next 
25f6				endm 
# End of macro NEXTW
25f6			.SWAP2: 
25f6				CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
25f6 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
25f7 1f 26			dw .AT            
25f9 06				db 5 + 1 
25fa .. 00			db "2SWAP",0              
2600				endm 
# End of macro CWHEAD
2600			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
2600					if DEBUG_FORTH_WORDS_KEY 
2600						DMARK "2SW" 
2600 f5				push af  
2601 3a 15 26			ld a, (.dmark)  
2604 32 77 fb			ld (debug_mark),a  
2607 3a 16 26			ld a, (.dmark+1)  
260a 32 78 fb			ld (debug_mark+1),a  
260d 3a 17 26			ld a, (.dmark+2)  
2610 32 79 fb			ld (debug_mark+2),a  
2613 18 03			jr .pastdmark  
2615 ..			.dmark: db "2SW"  
2618 f1			.pastdmark: pop af  
2619			endm  
# End of macro DMARK
2619						CALLMONITOR 
2619 cd 97 16			call break_point_state  
261c				endm  
# End of macro CALLMONITOR
261c					endif 
261c					NEXTW 
261c c3 8d 1f			jp macro_next 
261f				endm 
# End of macro NEXTW
261f			.AT: 
261f				CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
261f 1f				db WORD_SYS_CORE+OPCODE_AT             
2620 51 26			dw .CAT            
2622 02				db 1 + 1 
2623 .. 00			db "@",0              
2625				endm 
# End of macro CWHEAD
2625			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2625			 
2625					if DEBUG_FORTH_WORDS_KEY 
2625						DMARK "AT." 
2625 f5				push af  
2626 3a 3a 26			ld a, (.dmark)  
2629 32 77 fb			ld (debug_mark),a  
262c 3a 3b 26			ld a, (.dmark+1)  
262f 32 78 fb			ld (debug_mark+1),a  
2632 3a 3c 26			ld a, (.dmark+2)  
2635 32 79 fb			ld (debug_mark+2),a  
2638 18 03			jr .pastdmark  
263a ..			.dmark: db "AT."  
263d f1			.pastdmark: pop af  
263e			endm  
# End of macro DMARK
263e						CALLMONITOR 
263e cd 97 16			call break_point_state  
2641				endm  
# End of macro CALLMONITOR
2641					endif 
2641			.getbyteat:	 
2641					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2641 cd 1b 1e			call macro_dsp_valuehl 
2644				endm 
# End of macro FORTH_DSP_VALUEHL
2644					 
2644			;		push hl 
2644				 
2644					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2644 cd d3 1e			call macro_forth_dsp_pop 
2647				endm 
# End of macro FORTH_DSP_POP
2647			 
2647			;		pop hl 
2647			 
2647 7e					ld a, (hl) 
2648			 
2648 6f					ld l, a 
2649 26 00				ld h, 0 
264b cd 24 1c				call forth_push_numhl 
264e			 
264e					NEXTW 
264e c3 8d 1f			jp macro_next 
2651				endm 
# End of macro NEXTW
2651			.CAT: 
2651				CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2651 20				db WORD_SYS_CORE+OPCODE_CAT             
2652 7a 26			dw .BANG            
2654 03				db 2 + 1 
2655 .. 00			db "C@",0              
2658				endm 
# End of macro CWHEAD
2658			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2658					if DEBUG_FORTH_WORDS_KEY 
2658						DMARK "CAA" 
2658 f5				push af  
2659 3a 6d 26			ld a, (.dmark)  
265c 32 77 fb			ld (debug_mark),a  
265f 3a 6e 26			ld a, (.dmark+1)  
2662 32 78 fb			ld (debug_mark+1),a  
2665 3a 6f 26			ld a, (.dmark+2)  
2668 32 79 fb			ld (debug_mark+2),a  
266b 18 03			jr .pastdmark  
266d ..			.dmark: db "CAA"  
2670 f1			.pastdmark: pop af  
2671			endm  
# End of macro DMARK
2671						CALLMONITOR 
2671 cd 97 16			call break_point_state  
2674				endm  
# End of macro CALLMONITOR
2674					endif 
2674 c3 41 26				jp .getbyteat 
2677					NEXTW 
2677 c3 8d 1f			jp macro_next 
267a				endm 
# End of macro NEXTW
267a			.BANG: 
267a				CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
267a 21				db WORD_SYS_CORE+OPCODE_BANG             
267b b0 26			dw .CBANG            
267d 02				db 1 + 1 
267e .. 00			db "!",0              
2680				endm 
# End of macro CWHEAD
2680			; | ! ( x w -- ) Store x at address w      | DONE 
2680					if DEBUG_FORTH_WORDS_KEY 
2680						DMARK "BNG" 
2680 f5				push af  
2681 3a 95 26			ld a, (.dmark)  
2684 32 77 fb			ld (debug_mark),a  
2687 3a 96 26			ld a, (.dmark+1)  
268a 32 78 fb			ld (debug_mark+1),a  
268d 3a 97 26			ld a, (.dmark+2)  
2690 32 79 fb			ld (debug_mark+2),a  
2693 18 03			jr .pastdmark  
2695 ..			.dmark: db "BNG"  
2698 f1			.pastdmark: pop af  
2699			endm  
# End of macro DMARK
2699						CALLMONITOR 
2699 cd 97 16			call break_point_state  
269c				endm  
# End of macro CALLMONITOR
269c					endif 
269c			 
269c			.storebyteat:		 
269c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
269c cd 1b 1e			call macro_dsp_valuehl 
269f				endm 
# End of macro FORTH_DSP_VALUEHL
269f					 
269f e5					push hl 
26a0				 
26a0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26a0 cd d3 1e			call macro_forth_dsp_pop 
26a3				endm 
# End of macro FORTH_DSP_POP
26a3			 
26a3					; get byte to poke 
26a3			 
26a3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26a3 cd 1b 1e			call macro_dsp_valuehl 
26a6				endm 
# End of macro FORTH_DSP_VALUEHL
26a6 e5					push hl 
26a7			 
26a7			 
26a7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26a7 cd d3 1e			call macro_forth_dsp_pop 
26aa				endm 
# End of macro FORTH_DSP_POP
26aa			 
26aa			 
26aa d1					pop de 
26ab e1					pop hl 
26ac			 
26ac 73					ld (hl),e 
26ad			 
26ad			 
26ad					NEXTW 
26ad c3 8d 1f			jp macro_next 
26b0				endm 
# End of macro NEXTW
26b0			.CBANG: 
26b0				CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
26b0 22				db WORD_SYS_CORE+OPCODE_CBANG             
26b1 d9 26			dw .SCALL            
26b3 03				db 2 + 1 
26b4 .. 00			db "C!",0              
26b7				endm 
# End of macro CWHEAD
26b7			; | C!  ( x w -- ) Store x at address w  | DONE 
26b7					if DEBUG_FORTH_WORDS_KEY 
26b7						DMARK "CBA" 
26b7 f5				push af  
26b8 3a cc 26			ld a, (.dmark)  
26bb 32 77 fb			ld (debug_mark),a  
26be 3a cd 26			ld a, (.dmark+1)  
26c1 32 78 fb			ld (debug_mark+1),a  
26c4 3a ce 26			ld a, (.dmark+2)  
26c7 32 79 fb			ld (debug_mark+2),a  
26ca 18 03			jr .pastdmark  
26cc ..			.dmark: db "CBA"  
26cf f1			.pastdmark: pop af  
26d0			endm  
# End of macro DMARK
26d0						CALLMONITOR 
26d0 cd 97 16			call break_point_state  
26d3				endm  
# End of macro CALLMONITOR
26d3					endif 
26d3 c3 9c 26				jp .storebyteat 
26d6					NEXTW 
26d6 c3 8d 1f			jp macro_next 
26d9				endm 
# End of macro NEXTW
26d9			.SCALL: 
26d9				CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
26d9 23				db WORD_SYS_CORE+OPCODE_SCALL             
26da 0d 27			dw .DEPTH            
26dc 05				db 4 + 1 
26dd .. 00			db "CALL",0              
26e2				endm 
# End of macro CWHEAD
26e2			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
26e2					if DEBUG_FORTH_WORDS_KEY 
26e2						DMARK "CLL" 
26e2 f5				push af  
26e3 3a f7 26			ld a, (.dmark)  
26e6 32 77 fb			ld (debug_mark),a  
26e9 3a f8 26			ld a, (.dmark+1)  
26ec 32 78 fb			ld (debug_mark+1),a  
26ef 3a f9 26			ld a, (.dmark+2)  
26f2 32 79 fb			ld (debug_mark+2),a  
26f5 18 03			jr .pastdmark  
26f7 ..			.dmark: db "CLL"  
26fa f1			.pastdmark: pop af  
26fb			endm  
# End of macro DMARK
26fb						CALLMONITOR 
26fb cd 97 16			call break_point_state  
26fe				endm  
# End of macro CALLMONITOR
26fe					endif 
26fe			 
26fe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26fe cd 1b 1e			call macro_dsp_valuehl 
2701				endm 
# End of macro FORTH_DSP_VALUEHL
2701			 
2701			;		push hl 
2701			 
2701					; destroy value TOS 
2701			 
2701					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2701 cd d3 1e			call macro_forth_dsp_pop 
2704				endm 
# End of macro FORTH_DSP_POP
2704			 
2704						 
2704			;		pop hl 
2704			 
2704					; how to do a call with hl???? save SP? 
2704 cd 36 1f				call forth_call_hl 
2707			 
2707			 
2707					; TODO push value back onto stack for another op etc 
2707			 
2707 cd 24 1c				call forth_push_numhl 
270a					NEXTW 
270a c3 8d 1f			jp macro_next 
270d				endm 
# End of macro NEXTW
270d			.DEPTH: 
270d				CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
270d 24				db WORD_SYS_CORE+OPCODE_DEPTH             
270e 4a 27			dw .OVER            
2710 06				db 5 + 1 
2711 .. 00			db "DEPTH",0              
2717				endm 
# End of macro CWHEAD
2717			; | DEPTH ( -- u ) Push count of stack | DONE 
2717					; take current TOS and remove from base value div by two to get count 
2717					if DEBUG_FORTH_WORDS_KEY 
2717						DMARK "DEP" 
2717 f5				push af  
2718 3a 2c 27			ld a, (.dmark)  
271b 32 77 fb			ld (debug_mark),a  
271e 3a 2d 27			ld a, (.dmark+1)  
2721 32 78 fb			ld (debug_mark+1),a  
2724 3a 2e 27			ld a, (.dmark+2)  
2727 32 79 fb			ld (debug_mark+2),a  
272a 18 03			jr .pastdmark  
272c ..			.dmark: db "DEP"  
272f f1			.pastdmark: pop af  
2730			endm  
# End of macro DMARK
2730						CALLMONITOR 
2730 cd 97 16			call break_point_state  
2733				endm  
# End of macro CALLMONITOR
2733					endif 
2733			 
2733			 
2733 2a 0a f8			ld hl, (cli_data_sp) 
2736 11 84 f3			ld de, cli_data_stack 
2739 ed 52			sbc hl,de 
273b				 
273b				; div by size of stack item 
273b			 
273b 5d				ld e,l 
273c 0e 03			ld c, 3 
273e cd 99 0c			call Div8 
2741			 
2741 6f				ld l,a 
2742 26 00			ld h,0 
2744			 
2744				;srl h 
2744				;rr l 
2744			 
2744 cd 24 1c				call forth_push_numhl 
2747					NEXTW 
2747 c3 8d 1f			jp macro_next 
274a				endm 
# End of macro NEXTW
274a			.OVER: 
274a				CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
274a 42				db WORD_SYS_CORE+46             
274b 91 27			dw .PAUSE            
274d 05				db 4 + 1 
274e .. 00			db "OVER",0              
2753				endm 
# End of macro CWHEAD
2753			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
2753					if DEBUG_FORTH_WORDS_KEY 
2753						DMARK "OVR" 
2753 f5				push af  
2754 3a 68 27			ld a, (.dmark)  
2757 32 77 fb			ld (debug_mark),a  
275a 3a 69 27			ld a, (.dmark+1)  
275d 32 78 fb			ld (debug_mark+1),a  
2760 3a 6a 27			ld a, (.dmark+2)  
2763 32 79 fb			ld (debug_mark+2),a  
2766 18 03			jr .pastdmark  
2768 ..			.dmark: db "OVR"  
276b f1			.pastdmark: pop af  
276c			endm  
# End of macro DMARK
276c						CALLMONITOR 
276c cd 97 16			call break_point_state  
276f				endm  
# End of macro CALLMONITOR
276f					endif 
276f			 
276f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
276f cd 1b 1e			call macro_dsp_valuehl 
2772				endm 
# End of macro FORTH_DSP_VALUEHL
2772 e5					push hl    ; n2 
2773					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2773 cd d3 1e			call macro_forth_dsp_pop 
2776				endm 
# End of macro FORTH_DSP_POP
2776			 
2776					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2776 cd 1b 1e			call macro_dsp_valuehl 
2779				endm 
# End of macro FORTH_DSP_VALUEHL
2779 e5					push hl    ; n1 
277a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
277a cd d3 1e			call macro_forth_dsp_pop 
277d				endm 
# End of macro FORTH_DSP_POP
277d			 
277d d1					pop de     ; n1 
277e e1					pop hl     ; n2 
277f			 
277f d5					push de 
2780 e5					push hl 
2781 d5					push de 
2782			 
2782					; push back  
2782			 
2782 e1					pop hl 
2783 cd 24 1c				call forth_push_numhl 
2786 e1					pop hl 
2787 cd 24 1c				call forth_push_numhl 
278a e1					pop hl 
278b cd 24 1c				call forth_push_numhl 
278e					NEXTW 
278e c3 8d 1f			jp macro_next 
2791				endm 
# End of macro NEXTW
2791			 
2791			.PAUSE: 
2791				CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2791 43				db WORD_SYS_CORE+47             
2792 c6 27			dw .PAUSES            
2794 08				db 7 + 1 
2795 .. 00			db "PAUSEMS",0              
279d				endm 
# End of macro CWHEAD
279d			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
279d					if DEBUG_FORTH_WORDS_KEY 
279d						DMARK "PMS" 
279d f5				push af  
279e 3a b2 27			ld a, (.dmark)  
27a1 32 77 fb			ld (debug_mark),a  
27a4 3a b3 27			ld a, (.dmark+1)  
27a7 32 78 fb			ld (debug_mark+1),a  
27aa 3a b4 27			ld a, (.dmark+2)  
27ad 32 79 fb			ld (debug_mark+2),a  
27b0 18 03			jr .pastdmark  
27b2 ..			.dmark: db "PMS"  
27b5 f1			.pastdmark: pop af  
27b6			endm  
# End of macro DMARK
27b6						CALLMONITOR 
27b6 cd 97 16			call break_point_state  
27b9				endm  
# End of macro CALLMONITOR
27b9					endif 
27b9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27b9 cd 1b 1e			call macro_dsp_valuehl 
27bc				endm 
# End of macro FORTH_DSP_VALUEHL
27bc			;		push hl    ; n2 
27bc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27bc cd d3 1e			call macro_forth_dsp_pop 
27bf				endm 
# End of macro FORTH_DSP_POP
27bf			;		pop hl 
27bf			 
27bf 7d					ld a, l 
27c0 cd 3a 0a				call aDelayInMS 
27c3				       NEXTW 
27c3 c3 8d 1f			jp macro_next 
27c6				endm 
# End of macro NEXTW
27c6			.PAUSES:  
27c6				CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
27c6 44				db WORD_SYS_CORE+48             
27c7 35 28			dw .ROT            
27c9 06				db 5 + 1 
27ca .. 00			db "PAUSE",0              
27d0				endm 
# End of macro CWHEAD
27d0			; | PAUSE ( n -- )  Pause for n seconds | DONE 
27d0					if DEBUG_FORTH_WORDS_KEY 
27d0						DMARK "PAU" 
27d0 f5				push af  
27d1 3a e5 27			ld a, (.dmark)  
27d4 32 77 fb			ld (debug_mark),a  
27d7 3a e6 27			ld a, (.dmark+1)  
27da 32 78 fb			ld (debug_mark+1),a  
27dd 3a e7 27			ld a, (.dmark+2)  
27e0 32 79 fb			ld (debug_mark+2),a  
27e3 18 03			jr .pastdmark  
27e5 ..			.dmark: db "PAU"  
27e8 f1			.pastdmark: pop af  
27e9			endm  
# End of macro DMARK
27e9						CALLMONITOR 
27e9 cd 97 16			call break_point_state  
27ec				endm  
# End of macro CALLMONITOR
27ec					endif 
27ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27ec cd 1b 1e			call macro_dsp_valuehl 
27ef				endm 
# End of macro FORTH_DSP_VALUEHL
27ef			;		push hl    ; n2 
27ef					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27ef cd d3 1e			call macro_forth_dsp_pop 
27f2				endm 
# End of macro FORTH_DSP_POP
27f2			;		pop hl 
27f2 45					ld b, l 
27f3					if DEBUG_FORTH_WORDS 
27f3						DMARK "PAU" 
27f3 f5				push af  
27f4 3a 08 28			ld a, (.dmark)  
27f7 32 77 fb			ld (debug_mark),a  
27fa 3a 09 28			ld a, (.dmark+1)  
27fd 32 78 fb			ld (debug_mark+1),a  
2800 3a 0a 28			ld a, (.dmark+2)  
2803 32 79 fb			ld (debug_mark+2),a  
2806 18 03			jr .pastdmark  
2808 ..			.dmark: db "PAU"  
280b f1			.pastdmark: pop af  
280c			endm  
# End of macro DMARK
280c						CALLMONITOR 
280c cd 97 16			call break_point_state  
280f				endm  
# End of macro CALLMONITOR
280f					endif 
280f c5			.pauses1:	push bc 
2810 cd 55 0a				call delay1s 
2813 c1					pop bc 
2814					if DEBUG_FORTH_WORDS 
2814						DMARK "PA1" 
2814 f5				push af  
2815 3a 29 28			ld a, (.dmark)  
2818 32 77 fb			ld (debug_mark),a  
281b 3a 2a 28			ld a, (.dmark+1)  
281e 32 78 fb			ld (debug_mark+1),a  
2821 3a 2b 28			ld a, (.dmark+2)  
2824 32 79 fb			ld (debug_mark+2),a  
2827 18 03			jr .pastdmark  
2829 ..			.dmark: db "PA1"  
282c f1			.pastdmark: pop af  
282d			endm  
# End of macro DMARK
282d						CALLMONITOR 
282d cd 97 16			call break_point_state  
2830				endm  
# End of macro CALLMONITOR
2830					endif 
2830 10 dd				djnz .pauses1 
2832			 
2832				       NEXTW 
2832 c3 8d 1f			jp macro_next 
2835				endm 
# End of macro NEXTW
2835			.ROT: 
2835				CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2835 45				db WORD_SYS_CORE+49             
2836 83 28			dw .UWORDS            
2838 04				db 3 + 1 
2839 .. 00			db "ROT",0              
283d				endm 
# End of macro CWHEAD
283d			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
283d					if DEBUG_FORTH_WORDS_KEY 
283d						DMARK "ROT" 
283d f5				push af  
283e 3a 52 28			ld a, (.dmark)  
2841 32 77 fb			ld (debug_mark),a  
2844 3a 53 28			ld a, (.dmark+1)  
2847 32 78 fb			ld (debug_mark+1),a  
284a 3a 54 28			ld a, (.dmark+2)  
284d 32 79 fb			ld (debug_mark+2),a  
2850 18 03			jr .pastdmark  
2852 ..			.dmark: db "ROT"  
2855 f1			.pastdmark: pop af  
2856			endm  
# End of macro DMARK
2856						CALLMONITOR 
2856 cd 97 16			call break_point_state  
2859				endm  
# End of macro CALLMONITOR
2859					endif 
2859			 
2859					FORTH_DSP_VALUEHL 
2859 cd 1b 1e			call macro_dsp_valuehl 
285c				endm 
# End of macro FORTH_DSP_VALUEHL
285c e5					push hl    ; u3  
285d			 
285d					FORTH_DSP_POP 
285d cd d3 1e			call macro_forth_dsp_pop 
2860				endm 
# End of macro FORTH_DSP_POP
2860			   
2860					FORTH_DSP_VALUEHL 
2860 cd 1b 1e			call macro_dsp_valuehl 
2863				endm 
# End of macro FORTH_DSP_VALUEHL
2863 e5					push hl     ; u2 
2864			 
2864					FORTH_DSP_POP 
2864 cd d3 1e			call macro_forth_dsp_pop 
2867				endm 
# End of macro FORTH_DSP_POP
2867			 
2867					FORTH_DSP_VALUEHL 
2867 cd 1b 1e			call macro_dsp_valuehl 
286a				endm 
# End of macro FORTH_DSP_VALUEHL
286a e5					push hl     ; u1 
286b			 
286b					FORTH_DSP_POP 
286b cd d3 1e			call macro_forth_dsp_pop 
286e				endm 
# End of macro FORTH_DSP_POP
286e			 
286e c1					pop bc      ; u1 
286f e1					pop hl      ; u2 
2870 d1					pop de      ; u3 
2871			 
2871			 
2871 c5					push bc 
2872 d5					push de 
2873 e5					push hl 
2874			 
2874			 
2874 e1					pop hl 
2875 cd 24 1c				call forth_push_numhl 
2878			 
2878 e1					pop hl 
2879 cd 24 1c				call forth_push_numhl 
287c			 
287c e1					pop hl 
287d cd 24 1c				call forth_push_numhl 
2880					 
2880			 
2880			 
2880			 
2880			 
2880			 
2880				       NEXTW 
2880 c3 8d 1f			jp macro_next 
2883				endm 
# End of macro NEXTW
2883			 
2883			.UWORDS: 
2883				CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2883 50				db WORD_SYS_CORE+60             
2884 45 29			dw .BP            
2886 07				db 6 + 1 
2887 .. 00			db "UWORDS",0              
288e				endm 
# End of macro CWHEAD
288e			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
288e			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
288e			; | | Following the count are the individual words. 
288e			; | | 
288e			; | | e.g. UWORDS 
288e			; | | BOX DIRLIST 2 
288e			; | |  
288e			; | | Can be used to save the words to storage via: 
288e			; | | UWORDS $01 DO $01 APPEND LOOP 
288e				if DEBUG_FORTH_WORDS_KEY 
288e					DMARK "UWR" 
288e f5				push af  
288f 3a a3 28			ld a, (.dmark)  
2892 32 77 fb			ld (debug_mark),a  
2895 3a a4 28			ld a, (.dmark+1)  
2898 32 78 fb			ld (debug_mark+1),a  
289b 3a a5 28			ld a, (.dmark+2)  
289e 32 79 fb			ld (debug_mark+2),a  
28a1 18 03			jr .pastdmark  
28a3 ..			.dmark: db "UWR"  
28a6 f1			.pastdmark: pop af  
28a7			endm  
# End of macro DMARK
28a7					CALLMONITOR 
28a7 cd 97 16			call break_point_state  
28aa				endm  
# End of macro CALLMONITOR
28aa				endif 
28aa 21 00 80				ld hl, baseram 
28ad					;ld hl, baseusermem 
28ad 01 00 00				ld bc, 0    ; start a counter 
28b0			 
28b0				; skip dict stub 
28b0			 
28b0 cd de 20				call forth_tok_next 
28b3			 
28b3			 
28b3			; while we have words to look for 
28b3			 
28b3 7e			.douscan:	ld a, (hl)      
28b4				if DEBUG_FORTH_WORDS 
28b4					DMARK "UWs" 
28b4 f5				push af  
28b5 3a c9 28			ld a, (.dmark)  
28b8 32 77 fb			ld (debug_mark),a  
28bb 3a ca 28			ld a, (.dmark+1)  
28be 32 78 fb			ld (debug_mark+1),a  
28c1 3a cb 28			ld a, (.dmark+2)  
28c4 32 79 fb			ld (debug_mark+2),a  
28c7 18 03			jr .pastdmark  
28c9 ..			.dmark: db "UWs"  
28cc f1			.pastdmark: pop af  
28cd			endm  
# End of macro DMARK
28cd					CALLMONITOR 
28cd cd 97 16			call break_point_state  
28d0				endm  
# End of macro CALLMONITOR
28d0				endif 
28d0 fe 00				cp WORD_SYS_END 
28d2 28 4d				jr z, .udone 
28d4 fe 01				cp WORD_SYS_UWORD 
28d6 20 44				jr nz, .nuword 
28d8			 
28d8				if DEBUG_FORTH_WORDS 
28d8					DMARK "UWu" 
28d8 f5				push af  
28d9 3a ed 28			ld a, (.dmark)  
28dc 32 77 fb			ld (debug_mark),a  
28df 3a ee 28			ld a, (.dmark+1)  
28e2 32 78 fb			ld (debug_mark+1),a  
28e5 3a ef 28			ld a, (.dmark+2)  
28e8 32 79 fb			ld (debug_mark+2),a  
28eb 18 03			jr .pastdmark  
28ed ..			.dmark: db "UWu"  
28f0 f1			.pastdmark: pop af  
28f1			endm  
# End of macro DMARK
28f1					CALLMONITOR 
28f1 cd 97 16			call break_point_state  
28f4				endm  
# End of macro CALLMONITOR
28f4				endif 
28f4					; we have a uword so push its name to the stack 
28f4			 
28f4 e5				   	push hl  ; save so we can move to next dict block 
28f5			 
28f5					; skip opcode 
28f5 23					inc hl  
28f6					; skip next ptr 
28f6 23					inc hl  
28f7 23					inc hl 
28f8					; skip len 
28f8 23					inc hl 
28f9				if DEBUG_FORTH_WORDS 
28f9					DMARK "UWt" 
28f9 f5				push af  
28fa 3a 0e 29			ld a, (.dmark)  
28fd 32 77 fb			ld (debug_mark),a  
2900 3a 0f 29			ld a, (.dmark+1)  
2903 32 78 fb			ld (debug_mark+1),a  
2906 3a 10 29			ld a, (.dmark+2)  
2909 32 79 fb			ld (debug_mark+2),a  
290c 18 03			jr .pastdmark  
290e ..			.dmark: db "UWt"  
2911 f1			.pastdmark: pop af  
2912			endm  
# End of macro DMARK
2912					CALLMONITOR 
2912 cd 97 16			call break_point_state  
2915				endm  
# End of macro CALLMONITOR
2915				endif 
2915 03					inc bc 
2916			 
2916 c5					push bc 
2917 cd 92 1c				call forth_push_str 
291a c1					pop bc 
291b			 
291b e1					pop hl 	 
291c			 
291c cd de 20		.nuword:	call forth_tok_next 
291f 18 92				jr .douscan  
2921			 
2921			.udone:		 ; push count of uwords found 
2921 c5					push bc 
2922 e1					pop hl 
2923			 
2923				if DEBUG_FORTH_WORDS 
2923					DMARK "UWc" 
2923 f5				push af  
2924 3a 38 29			ld a, (.dmark)  
2927 32 77 fb			ld (debug_mark),a  
292a 3a 39 29			ld a, (.dmark+1)  
292d 32 78 fb			ld (debug_mark+1),a  
2930 3a 3a 29			ld a, (.dmark+2)  
2933 32 79 fb			ld (debug_mark+2),a  
2936 18 03			jr .pastdmark  
2938 ..			.dmark: db "UWc"  
293b f1			.pastdmark: pop af  
293c			endm  
# End of macro DMARK
293c					CALLMONITOR 
293c cd 97 16			call break_point_state  
293f				endm  
# End of macro CALLMONITOR
293f				endif 
293f cd 24 1c				call forth_push_numhl 
2942			 
2942			 
2942				       NEXTW 
2942 c3 8d 1f			jp macro_next 
2945				endm 
# End of macro NEXTW
2945			 
2945			.BP: 
2945				CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2945 54				db WORD_SYS_CORE+64             
2946 7b 29			dw .MONITOR            
2948 03				db 2 + 1 
2949 .. 00			db "BP",0              
294c				endm 
# End of macro CWHEAD
294c			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
294c			; | | $00 Will enable the break points within specific code paths 
294c			; | | $01 Will disable break points 
294c			; | |  
294c			; | | By default break points are off. Either the above can be used to enable them 
294c			; | | or if a key is held down during start up the spashscreen will appear to freeze 
294c			; | | and on release of the pressed key a message will be disaplayed to notify 
294c			; | | that break points are enabled. Pressing any key will then continue boot process. 
294c					; get byte count 
294c					if DEBUG_FORTH_WORDS_KEY 
294c						DMARK "BP." 
294c f5				push af  
294d 3a 61 29			ld a, (.dmark)  
2950 32 77 fb			ld (debug_mark),a  
2953 3a 62 29			ld a, (.dmark+1)  
2956 32 78 fb			ld (debug_mark+1),a  
2959 3a 63 29			ld a, (.dmark+2)  
295c 32 79 fb			ld (debug_mark+2),a  
295f 18 03			jr .pastdmark  
2961 ..			.dmark: db "BP."  
2964 f1			.pastdmark: pop af  
2965			endm  
# End of macro DMARK
2965						CALLMONITOR 
2965 cd 97 16			call break_point_state  
2968				endm  
# End of macro CALLMONITOR
2968					endif 
2968			 
2968					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2968 cd 1b 1e			call macro_dsp_valuehl 
296b				endm 
# End of macro FORTH_DSP_VALUEHL
296b			 
296b			;		push hl 
296b			 
296b					; destroy value TOS 
296b			 
296b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
296b cd d3 1e			call macro_forth_dsp_pop 
296e				endm 
# End of macro FORTH_DSP_POP
296e			 
296e			;		pop hl 
296e			 
296e 3e 00				ld a,0 
2970 bd					cp l 
2971 28 02				jr z, .bpset 
2973 3e 2a				ld a, '*' 
2975			 
2975 32 0e ee		.bpset:		ld (os_view_disable), a 
2978			 
2978			 
2978					NEXTW 
2978 c3 8d 1f			jp macro_next 
297b				endm 
# End of macro NEXTW
297b			 
297b			 
297b			.MONITOR: 
297b				CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
297b 55				db WORD_SYS_CORE+65             
297c ae 29			dw .MALLOC            
297e 08				db 7 + 1 
297f .. 00			db "MONITOR",0              
2987				endm 
# End of macro CWHEAD
2987			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2987			; | | At start the current various registers will be displayed with contents. 
2987			; | | Top right corner will show the most recent debug marker seen. 
2987			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2987			; | | and the return stack pointer (RSP). 
2987			; | | Pressing: 
2987			; | |    1 - Initial screen 
2987			; | |    2 - Display a data dump of HL 
2987			; | |    3 - Display a data dump of DE 
2987			; | |    4 - Display a data dump of BC 
2987			; | |    5 - Display a data dump of HL 
2987			; | |    6 - Display a data dump of DSP 
2987			; | |    7 - Display a data dump of RSP 
2987			; | |    8 - Display a data dump of what is at DSP 
2987			; | |    9 - Display a data dump of what is at RSP 
2987			; | |    0 - Exit monitor and continue running. This will also enable break points 
2987			; | |    * - Disable break points 
2987			; | |    # - Enter traditional monitor mode 
2987			; | | 
2987			; | | Monitor Mode 
2987			; | | ------------ 
2987			; | | A prompt of '>' will be shown for various commands: 
2987			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2987			; | |    C - Continue display a data dump from the last set address 
2987			; | |    M xxxx - Set start of memory edit at address xx 
2987			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2987			; | |    Q - Return to previous 
2987					if DEBUG_FORTH_WORDS_KEY 
2987						DMARK "MON" 
2987 f5				push af  
2988 3a 9c 29			ld a, (.dmark)  
298b 32 77 fb			ld (debug_mark),a  
298e 3a 9d 29			ld a, (.dmark+1)  
2991 32 78 fb			ld (debug_mark+1),a  
2994 3a 9e 29			ld a, (.dmark+2)  
2997 32 79 fb			ld (debug_mark+2),a  
299a 18 03			jr .pastdmark  
299c ..			.dmark: db "MON"  
299f f1			.pastdmark: pop af  
29a0			endm  
# End of macro DMARK
29a0						CALLMONITOR 
29a0 cd 97 16			call break_point_state  
29a3				endm  
# End of macro CALLMONITOR
29a3					endif 
29a3 3e 00				ld a, 0 
29a5 32 0e ee				ld (os_view_disable), a 
29a8			 
29a8					CALLMONITOR 
29a8 cd 97 16			call break_point_state  
29ab				endm  
# End of macro CALLMONITOR
29ab			 
29ab			;	call monitor 
29ab			 
29ab					NEXTW 
29ab c3 8d 1f			jp macro_next 
29ae				endm 
# End of macro NEXTW
29ae			 
29ae			 
29ae			.MALLOC: 
29ae				CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
29ae 56				db WORD_SYS_CORE+66             
29af d7 29			dw .MALLOC2            
29b1 06				db 5 + 1 
29b2 .. 00			db "ALLOT",0              
29b8				endm 
# End of macro CWHEAD
29b8			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
29b8					if DEBUG_FORTH_WORDS_KEY 
29b8						DMARK "ALL" 
29b8 f5				push af  
29b9 3a cd 29			ld a, (.dmark)  
29bc 32 77 fb			ld (debug_mark),a  
29bf 3a ce 29			ld a, (.dmark+1)  
29c2 32 78 fb			ld (debug_mark+1),a  
29c5 3a cf 29			ld a, (.dmark+2)  
29c8 32 79 fb			ld (debug_mark+2),a  
29cb 18 03			jr .pastdmark  
29cd ..			.dmark: db "ALL"  
29d0 f1			.pastdmark: pop af  
29d1			endm  
# End of macro DMARK
29d1						CALLMONITOR 
29d1 cd 97 16			call break_point_state  
29d4				endm  
# End of macro CALLMONITOR
29d4					endif 
29d4 c3 fe 29				jp .mallocc 
29d7			.MALLOC2: 
29d7				CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
29d7 56				db WORD_SYS_CORE+66             
29d8 15 2a			dw .FREE            
29da 07				db 6 + 1 
29db .. 00			db "MALLOC",0              
29e2				endm 
# End of macro CWHEAD
29e2			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
29e2					; get byte count 
29e2					if DEBUG_FORTH_WORDS_KEY 
29e2						DMARK "MAL" 
29e2 f5				push af  
29e3 3a f7 29			ld a, (.dmark)  
29e6 32 77 fb			ld (debug_mark),a  
29e9 3a f8 29			ld a, (.dmark+1)  
29ec 32 78 fb			ld (debug_mark+1),a  
29ef 3a f9 29			ld a, (.dmark+2)  
29f2 32 79 fb			ld (debug_mark+2),a  
29f5 18 03			jr .pastdmark  
29f7 ..			.dmark: db "MAL"  
29fa f1			.pastdmark: pop af  
29fb			endm  
# End of macro DMARK
29fb						CALLMONITOR 
29fb cd 97 16			call break_point_state  
29fe				endm  
# End of macro CALLMONITOR
29fe					endif 
29fe			.mallocc: 
29fe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29fe cd 1b 1e			call macro_dsp_valuehl 
2a01				endm 
# End of macro FORTH_DSP_VALUEHL
2a01			 
2a01			;		push hl 
2a01			 
2a01					; destroy value TOS 
2a01			 
2a01					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a01 cd d3 1e			call macro_forth_dsp_pop 
2a04				endm 
# End of macro FORTH_DSP_POP
2a04			 
2a04			;		pop hl 
2a04 cd d0 11				call malloc 
2a07				if DEBUG_FORTH_MALLOC_GUARD 
2a07 f5					push af 
2a08 cd 32 0d				call ishlzero 
2a0b			;		ld a, l 
2a0b			;		add h 
2a0b			;		cp 0 
2a0b f1					pop af 
2a0c					 
2a0c cc 48 52				call z,malloc_error 
2a0f				endif 
2a0f			 
2a0f cd 24 1c				call forth_push_numhl 
2a12					NEXTW 
2a12 c3 8d 1f			jp macro_next 
2a15				endm 
# End of macro NEXTW
2a15			 
2a15			.FREE: 
2a15				CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2a15 57				db WORD_SYS_CORE+67             
2a16 46 2a			dw .LIST            
2a18 05				db 4 + 1 
2a19 .. 00			db "FREE",0              
2a1e				endm 
# End of macro CWHEAD
2a1e			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2a1e					if DEBUG_FORTH_WORDS_KEY 
2a1e						DMARK "FRE" 
2a1e f5				push af  
2a1f 3a 33 2a			ld a, (.dmark)  
2a22 32 77 fb			ld (debug_mark),a  
2a25 3a 34 2a			ld a, (.dmark+1)  
2a28 32 78 fb			ld (debug_mark+1),a  
2a2b 3a 35 2a			ld a, (.dmark+2)  
2a2e 32 79 fb			ld (debug_mark+2),a  
2a31 18 03			jr .pastdmark  
2a33 ..			.dmark: db "FRE"  
2a36 f1			.pastdmark: pop af  
2a37			endm  
# End of macro DMARK
2a37						CALLMONITOR 
2a37 cd 97 16			call break_point_state  
2a3a				endm  
# End of macro CALLMONITOR
2a3a					endif 
2a3a					; get address 
2a3a			 
2a3a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a3a cd 1b 1e			call macro_dsp_valuehl 
2a3d				endm 
# End of macro FORTH_DSP_VALUEHL
2a3d			 
2a3d			;		push hl 
2a3d			 
2a3d					; destroy value TOS 
2a3d			 
2a3d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a3d cd d3 1e			call macro_forth_dsp_pop 
2a40				endm 
# End of macro FORTH_DSP_POP
2a40			 
2a40			;		pop hl 
2a40			if FORTH_ENABLE_MALLOCFREE 
2a40 cd 9a 12				call free 
2a43			endif 
2a43					NEXTW 
2a43 c3 8d 1f			jp macro_next 
2a46				endm 
# End of macro NEXTW
2a46			.LIST: 
2a46				CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2a46 5c				db WORD_SYS_CORE+72             
2a47 09 2c			dw .FORGET            
2a49 05				db 4 + 1 
2a4a .. 00			db "LIST",0              
2a4f				endm 
# End of macro CWHEAD
2a4f			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2a4f			; | | The quoted word must be in upper case. 
2a4f				if DEBUG_FORTH_WORDS_KEY 
2a4f					DMARK "LST" 
2a4f f5				push af  
2a50 3a 64 2a			ld a, (.dmark)  
2a53 32 77 fb			ld (debug_mark),a  
2a56 3a 65 2a			ld a, (.dmark+1)  
2a59 32 78 fb			ld (debug_mark+1),a  
2a5c 3a 66 2a			ld a, (.dmark+2)  
2a5f 32 79 fb			ld (debug_mark+2),a  
2a62 18 03			jr .pastdmark  
2a64 ..			.dmark: db "LST"  
2a67 f1			.pastdmark: pop af  
2a68			endm  
# End of macro DMARK
2a68					CALLMONITOR 
2a68 cd 97 16			call break_point_state  
2a6b				endm  
# End of macro CALLMONITOR
2a6b				endif 
2a6b			 
2a6b					FORTH_DSP_VALUEHL 
2a6b cd 1b 1e			call macro_dsp_valuehl 
2a6e				endm 
# End of macro FORTH_DSP_VALUEHL
2a6e			 
2a6e e5					push hl 
2a6f c1					pop bc 
2a70			 
2a70			; Start format of scratch string 
2a70			 
2a70 21 1d ee				ld hl, scratch 
2a73			 
2a73 3e 3a				ld a, ':' 
2a75 77					ld (hl),a 
2a76 23					inc hl 
2a77 3e 20				ld a, ' ' 
2a79 77					ld (hl), a 
2a7a			 
2a7a					; Get ptr to the word we need to look up 
2a7a			 
2a7a			;		FORTH_DSP_VALUEHL 
2a7a					;v5 FORTH_DSP_VALUE 
2a7a				; TODO type check 
2a7a			;		inc hl    ; Skip type check  
2a7a			;		push hl 
2a7a			;		ex de, hl    ; put into DE 
2a7a			 
2a7a			 
2a7a 21 00 80				ld hl, baseram 
2a7d					;ld hl, baseusermem 
2a7d			 
2a7d e5			push hl   ; sacreifical push 
2a7e			 
2a7e			.ldouscanm: 
2a7e e1				pop hl 
2a7f			.ldouscan: 
2a7f				if DEBUG_FORTH_WORDS 
2a7f					DMARK "LSs" 
2a7f f5				push af  
2a80 3a 94 2a			ld a, (.dmark)  
2a83 32 77 fb			ld (debug_mark),a  
2a86 3a 95 2a			ld a, (.dmark+1)  
2a89 32 78 fb			ld (debug_mark+1),a  
2a8c 3a 96 2a			ld a, (.dmark+2)  
2a8f 32 79 fb			ld (debug_mark+2),a  
2a92 18 03			jr .pastdmark  
2a94 ..			.dmark: db "LSs"  
2a97 f1			.pastdmark: pop af  
2a98			endm  
# End of macro DMARK
2a98					CALLMONITOR 
2a98 cd 97 16			call break_point_state  
2a9b				endm  
# End of macro CALLMONITOR
2a9b				endif 
2a9b				; skip dict stub 
2a9b cd de 20				call forth_tok_next 
2a9e			 
2a9e			 
2a9e			; while we have words to look for 
2a9e			 
2a9e 7e				ld a, (hl)      
2a9f				if DEBUG_FORTH_WORDS 
2a9f					DMARK "LSk" 
2a9f f5				push af  
2aa0 3a b4 2a			ld a, (.dmark)  
2aa3 32 77 fb			ld (debug_mark),a  
2aa6 3a b5 2a			ld a, (.dmark+1)  
2aa9 32 78 fb			ld (debug_mark+1),a  
2aac 3a b6 2a			ld a, (.dmark+2)  
2aaf 32 79 fb			ld (debug_mark+2),a  
2ab2 18 03			jr .pastdmark  
2ab4 ..			.dmark: db "LSk"  
2ab7 f1			.pastdmark: pop af  
2ab8			endm  
# End of macro DMARK
2ab8					CALLMONITOR 
2ab8 cd 97 16			call break_point_state  
2abb				endm  
# End of macro CALLMONITOR
2abb				endif 
2abb fe 00				cp WORD_SYS_END 
2abd ca f0 2b				jp z, .lunotfound 
2ac0 fe 01				cp WORD_SYS_UWORD 
2ac2 c2 7f 2a				jp nz, .ldouscan 
2ac5			 
2ac5				if DEBUG_FORTH_WORDS 
2ac5					DMARK "LSu" 
2ac5 f5				push af  
2ac6 3a da 2a			ld a, (.dmark)  
2ac9 32 77 fb			ld (debug_mark),a  
2acc 3a db 2a			ld a, (.dmark+1)  
2acf 32 78 fb			ld (debug_mark+1),a  
2ad2 3a dc 2a			ld a, (.dmark+2)  
2ad5 32 79 fb			ld (debug_mark+2),a  
2ad8 18 03			jr .pastdmark  
2ada ..			.dmark: db "LSu"  
2add f1			.pastdmark: pop af  
2ade			endm  
# End of macro DMARK
2ade					CALLMONITOR 
2ade cd 97 16			call break_point_state  
2ae1				endm  
# End of macro CALLMONITOR
2ae1				endif 
2ae1			 
2ae1					; found a uword but is it the one we want... 
2ae1			 
2ae1 c5					push bc     ; uword to find is on bc 
2ae2 d1					pop de 
2ae3			 
2ae3 e5					push hl  ; to save the ptr 
2ae4			 
2ae4					; skip opcode 
2ae4 23					inc hl  
2ae5					; skip next ptr 
2ae5 23					inc hl  
2ae6 23					inc hl 
2ae7					; skip len 
2ae7 23					inc hl 
2ae8			 
2ae8				if DEBUG_FORTH_WORDS 
2ae8					DMARK "LSc" 
2ae8 f5				push af  
2ae9 3a fd 2a			ld a, (.dmark)  
2aec 32 77 fb			ld (debug_mark),a  
2aef 3a fe 2a			ld a, (.dmark+1)  
2af2 32 78 fb			ld (debug_mark+1),a  
2af5 3a ff 2a			ld a, (.dmark+2)  
2af8 32 79 fb			ld (debug_mark+2),a  
2afb 18 03			jr .pastdmark  
2afd ..			.dmark: db "LSc"  
2b00 f1			.pastdmark: pop af  
2b01			endm  
# End of macro DMARK
2b01					CALLMONITOR 
2b01 cd 97 16			call break_point_state  
2b04				endm  
# End of macro CALLMONITOR
2b04				endif 
2b04 cd 9f 11				call strcmp 
2b07 c2 7e 2a				jp nz, .ldouscanm 
2b0a				 
2b0a			 
2b0a			 
2b0a					; we have a uword so push its name to the stack 
2b0a			 
2b0a			;	   	push hl  ; save so we can move to next dict block 
2b0a e1			pop hl 
2b0b			 
2b0b				if DEBUG_FORTH_WORDS 
2b0b					DMARK "LSm" 
2b0b f5				push af  
2b0c 3a 20 2b			ld a, (.dmark)  
2b0f 32 77 fb			ld (debug_mark),a  
2b12 3a 21 2b			ld a, (.dmark+1)  
2b15 32 78 fb			ld (debug_mark+1),a  
2b18 3a 22 2b			ld a, (.dmark+2)  
2b1b 32 79 fb			ld (debug_mark+2),a  
2b1e 18 03			jr .pastdmark  
2b20 ..			.dmark: db "LSm"  
2b23 f1			.pastdmark: pop af  
2b24			endm  
# End of macro DMARK
2b24					CALLMONITOR 
2b24 cd 97 16			call break_point_state  
2b27				endm  
# End of macro CALLMONITOR
2b27				endif 
2b27			 
2b27					; skip opcode 
2b27 23					inc hl  
2b28					; skip next ptr 
2b28 23					inc hl  
2b29 23					inc hl 
2b2a					; skip len 
2b2a 7e					ld a, (hl)   ; save length to add 
2b2b				if DEBUG_FORTH_WORDS 
2b2b					DMARK "LS2" 
2b2b f5				push af  
2b2c 3a 40 2b			ld a, (.dmark)  
2b2f 32 77 fb			ld (debug_mark),a  
2b32 3a 41 2b			ld a, (.dmark+1)  
2b35 32 78 fb			ld (debug_mark+1),a  
2b38 3a 42 2b			ld a, (.dmark+2)  
2b3b 32 79 fb			ld (debug_mark+2),a  
2b3e 18 03			jr .pastdmark  
2b40 ..			.dmark: db "LS2"  
2b43 f1			.pastdmark: pop af  
2b44			endm  
# End of macro DMARK
2b44					CALLMONITOR 
2b44 cd 97 16			call break_point_state  
2b47				endm  
# End of macro CALLMONITOR
2b47				endif 
2b47			 
2b47					; save this location 
2b47				 
2b47 e5					push hl 
2b48			 
2b48 23					inc hl 
2b49 11 1f ee				ld de, scratch+2 
2b4c 4f					ld c, a 
2b4d 06 00				ld b, 0 
2b4f			 
2b4f				if DEBUG_FORTH_WORDS 
2b4f					DMARK "LSn" 
2b4f f5				push af  
2b50 3a 64 2b			ld a, (.dmark)  
2b53 32 77 fb			ld (debug_mark),a  
2b56 3a 65 2b			ld a, (.dmark+1)  
2b59 32 78 fb			ld (debug_mark+1),a  
2b5c 3a 66 2b			ld a, (.dmark+2)  
2b5f 32 79 fb			ld (debug_mark+2),a  
2b62 18 03			jr .pastdmark  
2b64 ..			.dmark: db "LSn"  
2b67 f1			.pastdmark: pop af  
2b68			endm  
# End of macro DMARK
2b68					CALLMONITOR 
2b68 cd 97 16			call break_point_state  
2b6b				endm  
# End of macro CALLMONITOR
2b6b				endif 
2b6b			 
2b6b					; copy uword name to scratch 
2b6b			 
2b6b ed b0				ldir 
2b6d			 
2b6d 1b					dec de 
2b6e 3e 20				ld a, ' '    ; change null to space 
2b70 12					ld (de), a 
2b71			 
2b71 13					inc de 
2b72			 
2b72 d5					push de 
2b73 c1					pop bc     ; move scratch pointer to end of word name and save it 
2b74			 
2b74 e1					pop hl 
2b75 7e					ld a, (hl) 
2b76					;inc hl 
2b76					; skip word string 
2b76 cd 09 0d				call addatohl 
2b79			 
2b79 23					inc hl 
2b7a			 
2b7a				if DEBUG_FORTH_WORDS 
2b7a					DMARK "LS3" 
2b7a f5				push af  
2b7b 3a 8f 2b			ld a, (.dmark)  
2b7e 32 77 fb			ld (debug_mark),a  
2b81 3a 90 2b			ld a, (.dmark+1)  
2b84 32 78 fb			ld (debug_mark+1),a  
2b87 3a 91 2b			ld a, (.dmark+2)  
2b8a 32 79 fb			ld (debug_mark+2),a  
2b8d 18 03			jr .pastdmark  
2b8f ..			.dmark: db "LS3"  
2b92 f1			.pastdmark: pop af  
2b93			endm  
# End of macro DMARK
2b93					CALLMONITOR 
2b93 cd 97 16			call break_point_state  
2b96				endm  
# End of macro CALLMONITOR
2b96				endif 
2b96					; should now be at the start of the machine code to setup the eval of the uword 
2b96					; now locate the ptr to the string defintion 
2b96			 
2b96					; skip ld hl, 
2b96					; then load the ptr 
2b96			 
2b96 23					inc hl 
2b97 5e					ld e, (hl) 
2b98 23					inc hl 
2b99 56					ld d, (hl) 
2b9a eb					ex de, hl 
2b9b			 
2b9b			 
2b9b				if DEBUG_FORTH_WORDS 
2b9b					DMARK "LSt" 
2b9b f5				push af  
2b9c 3a b0 2b			ld a, (.dmark)  
2b9f 32 77 fb			ld (debug_mark),a  
2ba2 3a b1 2b			ld a, (.dmark+1)  
2ba5 32 78 fb			ld (debug_mark+1),a  
2ba8 3a b2 2b			ld a, (.dmark+2)  
2bab 32 79 fb			ld (debug_mark+2),a  
2bae 18 03			jr .pastdmark  
2bb0 ..			.dmark: db "LSt"  
2bb3 f1			.pastdmark: pop af  
2bb4			endm  
# End of macro DMARK
2bb4					CALLMONITOR 
2bb4 cd 97 16			call break_point_state  
2bb7				endm  
# End of macro CALLMONITOR
2bb7				endif 
2bb7			 
2bb7			; cant push right now due to tokenised strings  
2bb7			 
2bb7			; get the destination of where to copy this definition to. 
2bb7			 
2bb7 c5					push bc 
2bb8 d1					pop de 
2bb9			 
2bb9 7e			.listl:         ld a,(hl) 
2bba fe 00				cp 0 
2bbc 28 09				jr z, .lreplsp     ; replace zero with space 
2bbe fe 7f				cp FORTH_END_BUFFER 
2bc0 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2bc2				 
2bc2					; just copy this char as is then 
2bc2			 
2bc2 12					ld (de), a 
2bc3			 
2bc3 23			.listnxt:	inc hl 
2bc4 13					inc de 
2bc5 18 f2				jr .listl 
2bc7			 
2bc7 3e 20		.lreplsp:	ld a,' ' 
2bc9 12					ld (de), a 
2bca 18 f7				jr .listnxt 
2bcc			 
2bcc			; close up uword def 
2bcc			 
2bcc			.listdone: 
2bcc 3e 00				ld a, 0 
2bce 12					ld (de), a 
2bcf			 
2bcf			; now have def so clean up and push to stack 
2bcf			 
2bcf 21 1d ee				ld hl, scratch 
2bd2				if DEBUG_FORTH_WORDS 
2bd2					DMARK "Ltp" 
2bd2 f5				push af  
2bd3 3a e7 2b			ld a, (.dmark)  
2bd6 32 77 fb			ld (debug_mark),a  
2bd9 3a e8 2b			ld a, (.dmark+1)  
2bdc 32 78 fb			ld (debug_mark+1),a  
2bdf 3a e9 2b			ld a, (.dmark+2)  
2be2 32 79 fb			ld (debug_mark+2),a  
2be5 18 03			jr .pastdmark  
2be7 ..			.dmark: db "Ltp"  
2bea f1			.pastdmark: pop af  
2beb			endm  
# End of macro DMARK
2beb					CALLMONITOR 
2beb cd 97 16			call break_point_state  
2bee				endm  
# End of macro CALLMONITOR
2bee				endif 
2bee			 
2bee 18 06			jr .listpush 
2bf0			 
2bf0			;.lnuword:	pop hl 
2bf0			;		call forth_tok_next 
2bf0			;		jp .ldouscan  
2bf0			 
2bf0			.lunotfound:		  
2bf0			 
2bf0			 
2bf0					 
2bf0					FORTH_DSP_POP 
2bf0 cd d3 1e			call macro_forth_dsp_pop 
2bf3				endm 
# End of macro FORTH_DSP_POP
2bf3 21 fc 2b				ld hl, .luno 
2bf6						 
2bf6			 
2bf6			.listpush: 
2bf6 cd 92 1c				call forth_push_str 
2bf9			 
2bf9			 
2bf9			 
2bf9					NEXTW 
2bf9 c3 8d 1f			jp macro_next 
2bfc				endm 
# End of macro NEXTW
2bfc			 
2bfc .. 00		.luno:    db "Not found",0 
2c06			 
2c06			 
2c06			 
2c06			 
2c06			 
2c06			;		push hl   ; save pointer to start of uword def string 
2c06			; 
2c06			;; look for FORTH_EOL_LINE 
2c06			;		ld a, FORTH_END_BUFFER 
2c06			;		call strlent 
2c06			; 
2c06			;		inc hl		 ; space for coln def 
2c06			;		inc hl 
2c06			;		inc hl          ; space for terms 
2c06			;		inc hl 
2c06			; 
2c06			;		ld a, 20   ; TODO get actual length 
2c06			;		call addatohl    ; include a random amount of room for the uword name 
2c06			; 
2c06			;		 
2c06			;	if DEBUG_FORTH_WORDS 
2c06			;		DMARK "Lt1" 
2c06			;		CALLMONITOR 
2c06			;	endif 
2c06			;		 
2c06			; 
2c06			;; malloc space for the string because we cant change it 
2c06			; 
2c06			;		call malloc 
2c06			;	if DEBUG_FORTH_MALLOC_GUARD 
2c06			;		push af 
2c06			;		call ishlzero 
2c06			;		pop af 
2c06			;		 
2c06			;		call z,malloc_error 
2c06			;	endif 
2c06			; 
2c06			;	if DEBUG_FORTH_WORDS 
2c06			;		DMARK "Lt2" 
2c06			;		CALLMONITOR 
2c06			;	endif 
2c06			;		pop de 
2c06			;		push hl    ; push the malloc to release later 
2c06			;		push hl   ;  push back a copy for the later stack push 
2c06			;		 
2c06			;; copy the string swapping out the zero terms for spaces 
2c06			; 
2c06			;		; de has our source 
2c06			;		; hl has our dest 
2c06			; 
2c06			;; add the coln def 
2c06			; 
2c06			;		ld a, ':' 
2c06			;		ld (hl), a 
2c06			;		inc hl 
2c06			;		ld a, ' ' 
2c06			;		ld (hl), a 
2c06			;		inc hl 
2c06			; 
2c06			;; add the uname word 
2c06			;		push de   ; save our string for now 
2c06			;		ex de, hl 
2c06			; 
2c06			;		FORTH_DSP_VALUE 
2c06			;		;v5 FORTH_DSP_VALUE 
2c06			; 
2c06			;		inc hl   ; skip type but we know by now this is OK 
2c06			; 
2c06			;.luword:	ld a,(hl) 
2c06			;		cp 0 
2c06			;		jr z, .luword2 
2c06			;		ld (de), a 
2c06			;		inc de 
2c06			;		inc hl 
2c06			;		jr .luword 
2c06			; 
2c06			;.luword2:	ld a, ' ' 
2c06			;		ld (de), a 
2c06			;;		inc hl 
2c06			;;		inc de 
2c06			;;		ld (de), a 
2c06			;;		inc hl 
2c06			;		inc de 
2c06			; 
2c06			;		ex de, hl 
2c06			;		pop de 
2c06			;		 
2c06			;		 
2c06			; 
2c06			;; detoken that string and copy it 
2c06			; 
2c06			;	if DEBUG_FORTH_WORDS 
2c06			;		DMARK "Lt2" 
2c06			;		CALLMONITOR 
2c06			;	endif 
2c06			;.ldetok:	ld a, (de) 
2c06			;		cp FORTH_END_BUFFER 
2c06			;		jr z, .ldetokend 
2c06			;		; swap out any zero term for space 
2c06			;		cp 0 
2c06			;		jr nz, .ldetoknext 
2c06			;		ld a, ' ' 
2c06			; 
2c06			;	if DEBUG_FORTH_WORDS 
2c06			;		DMARK "LtS" 
2c06			;		CALLMONITOR 
2c06			;	endif 
2c06			;.ldetoknext:	ld (hl), a 
2c06			;		inc de 
2c06			;		inc hl 
2c06			;		jr .ldetok 
2c06			; 
2c06			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2c06			;		ld (hl), a  
2c06			; 
2c06			;; free that temp malloc 
2c06			; 
2c06			;		pop hl    
2c06			; 
2c06			;	if DEBUG_FORTH_WORDS 
2c06			;		DMARK "Lt4" 
2c06			;		CALLMONITOR 
2c06			;	endif 
2c06			;		call forth_apushstrhl 
2c06			; 
2c06			;		; get rid of temp malloc area 
2c06			; 
2c06			;		pop hl 
2c06			;		call free 
2c06			; 
2c06			;		jr .ludone 
2c06			; 
2c06			;.lnuword:	pop hl 
2c06			;		call forth_tok_next 
2c06			;		jp .ldouscan  
2c06			; 
2c06			;.ludone:		 pop hl 
2c06			; 
2c06					NEXTW 
2c06 c3 8d 1f			jp macro_next 
2c09				endm 
# End of macro NEXTW
2c09			 
2c09			.FORGET: 
2c09				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2c09 5d				db WORD_SYS_CORE+73             
2c0a 82 2c			dw .NOP            
2c0c 07				db 6 + 1 
2c0d .. 00			db "FORGET",0              
2c14				endm 
# End of macro CWHEAD
2c14			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2c14			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quote uword name must be in caps. 
2c14			; | |  
2c14			; | | e.g. "MORE" forget 
2c14					if DEBUG_FORTH_WORDS_KEY 
2c14						DMARK "FRG" 
2c14 f5				push af  
2c15 3a 29 2c			ld a, (.dmark)  
2c18 32 77 fb			ld (debug_mark),a  
2c1b 3a 2a 2c			ld a, (.dmark+1)  
2c1e 32 78 fb			ld (debug_mark+1),a  
2c21 3a 2b 2c			ld a, (.dmark+2)  
2c24 32 79 fb			ld (debug_mark+2),a  
2c27 18 03			jr .pastdmark  
2c29 ..			.dmark: db "FRG"  
2c2c f1			.pastdmark: pop af  
2c2d			endm  
# End of macro DMARK
2c2d						CALLMONITOR 
2c2d cd 97 16			call break_point_state  
2c30				endm  
# End of macro CALLMONITOR
2c30					endif 
2c30			 
2c30				; find uword 
2c30			        ; update start of word with "_" 
2c30				; replace uword with deleted flag 
2c30			 
2c30			 
2c30			;	if DEBUG_FORTH_WORDS 
2c30			;		DMARK "FOG" 
2c30			;		CALLMONITOR 
2c30			;	endif 
2c30			 
2c30			 
2c30					; Get ptr to the word we need to look up 
2c30			 
2c30					FORTH_DSP_VALUEHL 
2c30 cd 1b 1e			call macro_dsp_valuehl 
2c33				endm 
# End of macro FORTH_DSP_VALUEHL
2c33					;v5 FORTH_DSP_VALUE 
2c33				; TODO type check 
2c33			;		inc hl    ; Skip type check  
2c33 e5					push hl 
2c34 c1					pop bc 
2c35			;		ex de, hl    ; put into DE 
2c35			 
2c35			 
2c35 21 00 80				ld hl, baseram 
2c38					;ld hl, baseusermem 
2c38			 
2c38				; skip dict stub 
2c38			;	call forth_tok_next 
2c38 e5			push hl   ; sacreifical push 
2c39			 
2c39			.fldouscanm: 
2c39 e1				pop hl 
2c3a			.fldouscan: 
2c3a			;	if DEBUG_FORTH_WORDS 
2c3a			;		DMARK "LSs" 
2c3a			;		CALLMONITOR 
2c3a			;	endif 
2c3a				; skip dict stub 
2c3a cd de 20				call forth_tok_next 
2c3d			 
2c3d			 
2c3d			; while we have words to look for 
2c3d			 
2c3d 7e				ld a, (hl)      
2c3e			;	if DEBUG_FORTH_WORDS 
2c3e			;		DMARK "LSk" 
2c3e			;		CALLMONITOR 
2c3e			;	endif 
2c3e fe 00				cp WORD_SYS_END 
2c40 ca 7c 2c				jp z, .flunotfound 
2c43 fe 01				cp WORD_SYS_UWORD 
2c45 c2 3a 2c				jp nz, .fldouscan 
2c48			 
2c48			;	if DEBUG_FORTH_WORDS 
2c48			;		DMARK "LSu" 
2c48			;		CALLMONITOR 
2c48			;	endif 
2c48			 
2c48					; found a uword but is it the one we want... 
2c48			 
2c48 c5					push bc     ; uword to find is on bc 
2c49 d1					pop de 
2c4a			 
2c4a e5					push hl  ; to save the ptr 
2c4b			 
2c4b					; skip opcode 
2c4b 23					inc hl  
2c4c					; skip next ptr 
2c4c 23					inc hl  
2c4d 23					inc hl 
2c4e					; skip len 
2c4e 23					inc hl 
2c4f			 
2c4f			;	if DEBUG_FORTH_WORDS 
2c4f			;		DMARK "LSc" 
2c4f			;		CALLMONITOR 
2c4f			;	endif 
2c4f cd 9f 11				call strcmp 
2c52 c2 39 2c				jp nz, .fldouscanm 
2c55			; 
2c55			; 
2c55			;; while we have words to look for 
2c55			; 
2c55			;.fdouscan:	ld a, (hl)      
2c55			;	if DEBUG_FORTH_WORDS 
2c55			;		DMARK "LSs" 
2c55			;		CALLMONITOR 
2c55			;	endif 
2c55			;		cp WORD_SYS_END 
2c55			;		jp z, .fudone 
2c55			;		cp WORD_SYS_UWORD 
2c55			;		jp nz, .fnuword 
2c55			; 
2c55			;	if DEBUG_FORTH_WORDS 
2c55			;		DMARK "FGu" 
2c55			;		CALLMONITOR 
2c55			;	endif 
2c55			; 
2c55			;		; found a uword but is it the one we want... 
2c55			; 
2c55			; 
2c55			;	        pop de   ; get back the dsp name 
2c55			;		push de 
2c55			; 
2c55			;		push hl  ; to save the ptr 
2c55			; 
2c55			;		; skip opcode 
2c55			;		inc hl  
2c55			;		; skip next ptr 
2c55			;		inc hl  
2c55			;		inc hl 
2c55			;		; skip len 
2c55			;		inc hl 
2c55			; 
2c55			;	if DEBUG_FORTH_WORDS 
2c55			;		DMARK "FGc" 
2c55			;		CALLMONITOR 
2c55			;	endif 
2c55			;		call strcmp 
2c55			;		jp nz, .fnuword 
2c55			 
2c55			 
2c55 e1			pop hl 
2c56			 
2c56				 
2c56				if DEBUG_FORTH_WORDS 
2c56					DMARK "FGm" 
2c56 f5				push af  
2c57 3a 6b 2c			ld a, (.dmark)  
2c5a 32 77 fb			ld (debug_mark),a  
2c5d 3a 6c 2c			ld a, (.dmark+1)  
2c60 32 78 fb			ld (debug_mark+1),a  
2c63 3a 6d 2c			ld a, (.dmark+2)  
2c66 32 79 fb			ld (debug_mark+2),a  
2c69 18 03			jr .pastdmark  
2c6b ..			.dmark: db "FGm"  
2c6e f1			.pastdmark: pop af  
2c6f			endm  
# End of macro DMARK
2c6f					CALLMONITOR 
2c6f cd 97 16			call break_point_state  
2c72				endm  
# End of macro CALLMONITOR
2c72				endif 
2c72			 
2c72			 
2c72			 
2c72					; we have a uword so push its name to the stack 
2c72			 
2c72			;	   	push hl  ; save so we can move to next dict block 
2c72			;pop hl 
2c72			 
2c72					; update opcode to deleted 
2c72 3e 03				ld a, WORD_SYS_DELETED 
2c74 77					ld (hl), a 
2c75			 
2c75 23					inc hl  
2c76					; skip next ptr 
2c76 23					inc hl  
2c77 23					inc hl 
2c78					; skip len 
2c78 23					inc hl 
2c79			 
2c79					; TODO change parser to skip deleted words but for now mark it out 
2c79 3e 5f				ld a, "_" 
2c7b 77					ld  (hl),a 
2c7c			 
2c7c			;		jr .fudone 
2c7c			; 
2c7c			;.fnuword:	pop hl 
2c7c			;		call forth_tok_next 
2c7c			;		jp .fdouscan  
2c7c			 
2c7c			.flunotfound:		  
2c7c			 
2c7c			 
2c7c					 
2c7c					FORTH_DSP_POP 
2c7c cd d3 1e			call macro_forth_dsp_pop 
2c7f				endm 
# End of macro FORTH_DSP_POP
2c7f			;		ld hl, .luno 
2c7f			;.fudone:		 pop hl 
2c7f					NEXTW 
2c7f c3 8d 1f			jp macro_next 
2c82				endm 
# End of macro NEXTW
2c82			.NOP: 
2c82				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2c82 61				db WORD_SYS_CORE+77             
2c83 a9 2c			dw .COMO            
2c85 04				db 3 + 1 
2c86 .. 00			db "NOP",0              
2c8a				endm 
# End of macro CWHEAD
2c8a			; | NOP (  --  ) Do nothing | DONE 
2c8a					if DEBUG_FORTH_WORDS_KEY 
2c8a						DMARK "NOP" 
2c8a f5				push af  
2c8b 3a 9f 2c			ld a, (.dmark)  
2c8e 32 77 fb			ld (debug_mark),a  
2c91 3a a0 2c			ld a, (.dmark+1)  
2c94 32 78 fb			ld (debug_mark+1),a  
2c97 3a a1 2c			ld a, (.dmark+2)  
2c9a 32 79 fb			ld (debug_mark+2),a  
2c9d 18 03			jr .pastdmark  
2c9f ..			.dmark: db "NOP"  
2ca2 f1			.pastdmark: pop af  
2ca3			endm  
# End of macro DMARK
2ca3						CALLMONITOR 
2ca3 cd 97 16			call break_point_state  
2ca6				endm  
# End of macro CALLMONITOR
2ca6					endif 
2ca6				       NEXTW 
2ca6 c3 8d 1f			jp macro_next 
2ca9				endm 
# End of macro NEXTW
2ca9			.COMO: 
2ca9				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2ca9 6e				db WORD_SYS_CORE+90             
2caa fb 2c			dw .COMC            
2cac 02				db 1 + 1 
2cad .. 00			db "(",0              
2caf				endm 
# End of macro CWHEAD
2caf			; | ( ( -- )  Start of comment | DONE 
2caf			 
2caf			 
2caf 2a 1e f1				ld hl, ( os_tok_ptr) 
2cb2 11 f6 2c			ld de, .closepar 
2cb5					 
2cb5					if DEBUG_FORTH_WORDS 
2cb5						DMARK ").." 
2cb5 f5				push af  
2cb6 3a ca 2c			ld a, (.dmark)  
2cb9 32 77 fb			ld (debug_mark),a  
2cbc 3a cb 2c			ld a, (.dmark+1)  
2cbf 32 78 fb			ld (debug_mark+1),a  
2cc2 3a cc 2c			ld a, (.dmark+2)  
2cc5 32 79 fb			ld (debug_mark+2),a  
2cc8 18 03			jr .pastdmark  
2cca ..			.dmark: db ").."  
2ccd f1			.pastdmark: pop af  
2cce			endm  
# End of macro DMARK
2cce						CALLMONITOR 
2cce cd 97 16			call break_point_state  
2cd1				endm  
# End of macro CALLMONITOR
2cd1					endif 
2cd1 cd a8 20			call findnexttok  
2cd4			 
2cd4					if DEBUG_FORTH_WORDS 
2cd4						DMARK "IF5" 
2cd4 f5				push af  
2cd5 3a e9 2c			ld a, (.dmark)  
2cd8 32 77 fb			ld (debug_mark),a  
2cdb 3a ea 2c			ld a, (.dmark+1)  
2cde 32 78 fb			ld (debug_mark+1),a  
2ce1 3a eb 2c			ld a, (.dmark+2)  
2ce4 32 79 fb			ld (debug_mark+2),a  
2ce7 18 03			jr .pastdmark  
2ce9 ..			.dmark: db "IF5"  
2cec f1			.pastdmark: pop af  
2ced			endm  
# End of macro DMARK
2ced						CALLMONITOR 
2ced cd 97 16			call break_point_state  
2cf0				endm  
# End of macro CALLMONITOR
2cf0					endif 
2cf0				; replace below with ) exec using tok_ptr 
2cf0 22 1e f1			ld (os_tok_ptr), hl 
2cf3 c3 1e 20			jp exec1 
2cf6			 
2cf6 .. 00			.closepar:   db ")",0 
2cf8			 
2cf8				       NEXTW 
2cf8 c3 8d 1f			jp macro_next 
2cfb				endm 
# End of macro NEXTW
2cfb			.COMC: 
2cfb				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2cfb 6f				db WORD_SYS_CORE+91             
2cfc 04 2d			dw .SCRATCH            
2cfe 02				db 1 + 1 
2cff .. 00			db ")",0              
2d01				endm 
# End of macro CWHEAD
2d01			; | ) ( -- )  End of comment |  DONE  
2d01				       NEXTW 
2d01 c3 8d 1f			jp macro_next 
2d04				endm 
# End of macro NEXTW
2d04			 
2d04			.SCRATCH: 
2d04				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2d04 6f				db WORD_SYS_CORE+91             
2d05 3f 2d			dw .INC            
2d07 08				db 7 + 1 
2d08 .. 00			db "SCRATCH",0              
2d10				endm 
# End of macro CWHEAD
2d10			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2d10			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2d10			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2d10			; | |  
2d10			; | | e.g.    : score $00 scratch ; 
2d10			; | |  
2d10			; | | $00 score ! 
2d10			; | | $01 score +! 
2d10			; | |  
2d10			; | | e.g.   : varword $0a scratch ;  
2d10			; | | 
2d10			; | | $8000 varword ! 
2d10					if DEBUG_FORTH_WORDS_KEY 
2d10						DMARK "SCR" 
2d10 f5				push af  
2d11 3a 25 2d			ld a, (.dmark)  
2d14 32 77 fb			ld (debug_mark),a  
2d17 3a 26 2d			ld a, (.dmark+1)  
2d1a 32 78 fb			ld (debug_mark+1),a  
2d1d 3a 27 2d			ld a, (.dmark+2)  
2d20 32 79 fb			ld (debug_mark+2),a  
2d23 18 03			jr .pastdmark  
2d25 ..			.dmark: db "SCR"  
2d28 f1			.pastdmark: pop af  
2d29			endm  
# End of macro DMARK
2d29						CALLMONITOR 
2d29 cd 97 16			call break_point_state  
2d2c				endm  
# End of macro CALLMONITOR
2d2c					endif 
2d2c			 
2d2c					FORTH_DSP_VALUEHL 
2d2c cd 1b 1e			call macro_dsp_valuehl 
2d2f				endm 
# End of macro FORTH_DSP_VALUEHL
2d2f				 
2d2f					FORTH_DSP_POP 
2d2f cd d3 1e			call macro_forth_dsp_pop 
2d32				endm 
# End of macro FORTH_DSP_POP
2d32			 
2d32 7d					ld a, l 
2d33 21 42 f3				ld hl, os_var_array 
2d36 cd 09 0d				call addatohl 
2d39			 
2d39 cd 24 1c				call forth_push_numhl 
2d3c			 
2d3c				       NEXTW 
2d3c c3 8d 1f			jp macro_next 
2d3f				endm 
# End of macro NEXTW
2d3f			 
2d3f			.INC: 
2d3f				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2d3f 6f				db WORD_SYS_CORE+91             
2d40 93 2d			dw .DEC            
2d42 03				db 2 + 1 
2d43 .. 00			db "+!",0              
2d46				endm 
# End of macro CWHEAD
2d46			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2d46					if DEBUG_FORTH_WORDS_KEY 
2d46						DMARK "+s_" 
2d46 f5				push af  
2d47 3a 5b 2d			ld a, (.dmark)  
2d4a 32 77 fb			ld (debug_mark),a  
2d4d 3a 5c 2d			ld a, (.dmark+1)  
2d50 32 78 fb			ld (debug_mark+1),a  
2d53 3a 5d 2d			ld a, (.dmark+2)  
2d56 32 79 fb			ld (debug_mark+2),a  
2d59 18 03			jr .pastdmark  
2d5b ..			.dmark: db "+s_"  
2d5e f1			.pastdmark: pop af  
2d5f			endm  
# End of macro DMARK
2d5f						CALLMONITOR 
2d5f cd 97 16			call break_point_state  
2d62				endm  
# End of macro CALLMONITOR
2d62					endif 
2d62			 
2d62					FORTH_DSP_VALUEHL 
2d62 cd 1b 1e			call macro_dsp_valuehl 
2d65				endm 
# End of macro FORTH_DSP_VALUEHL
2d65			 
2d65 e5					push hl   ; save address 
2d66			 
2d66					FORTH_DSP_POP 
2d66 cd d3 1e			call macro_forth_dsp_pop 
2d69				endm 
# End of macro FORTH_DSP_POP
2d69			 
2d69					FORTH_DSP_VALUEHL 
2d69 cd 1b 1e			call macro_dsp_valuehl 
2d6c				endm 
# End of macro FORTH_DSP_VALUEHL
2d6c			 
2d6c					FORTH_DSP_POP 
2d6c cd d3 1e			call macro_forth_dsp_pop 
2d6f				endm 
# End of macro FORTH_DSP_POP
2d6f			 
2d6f					; hl contains value to add to byte at a 
2d6f				 
2d6f eb					ex de, hl 
2d70			 
2d70 e1					pop hl 
2d71			 
2d71					if DEBUG_FORTH_WORDS 
2d71						DMARK "INC" 
2d71 f5				push af  
2d72 3a 86 2d			ld a, (.dmark)  
2d75 32 77 fb			ld (debug_mark),a  
2d78 3a 87 2d			ld a, (.dmark+1)  
2d7b 32 78 fb			ld (debug_mark+1),a  
2d7e 3a 88 2d			ld a, (.dmark+2)  
2d81 32 79 fb			ld (debug_mark+2),a  
2d84 18 03			jr .pastdmark  
2d86 ..			.dmark: db "INC"  
2d89 f1			.pastdmark: pop af  
2d8a			endm  
# End of macro DMARK
2d8a						CALLMONITOR 
2d8a cd 97 16			call break_point_state  
2d8d				endm  
# End of macro CALLMONITOR
2d8d					endif 
2d8d			 
2d8d 7e					ld a,(hl) 
2d8e 83					add e 
2d8f 77					ld (hl),a 
2d90			 
2d90			 
2d90			 
2d90				       NEXTW 
2d90 c3 8d 1f			jp macro_next 
2d93				endm 
# End of macro NEXTW
2d93			 
2d93			.DEC: 
2d93				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2d93 6f				db WORD_SYS_CORE+91             
2d94 e4 2d			dw .INC2            
2d96 03				db 2 + 1 
2d97 .. 00			db "-!",0              
2d9a				endm 
# End of macro CWHEAD
2d9a			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2d9a					if DEBUG_FORTH_WORDS_KEY 
2d9a						DMARK "-s_" 
2d9a f5				push af  
2d9b 3a af 2d			ld a, (.dmark)  
2d9e 32 77 fb			ld (debug_mark),a  
2da1 3a b0 2d			ld a, (.dmark+1)  
2da4 32 78 fb			ld (debug_mark+1),a  
2da7 3a b1 2d			ld a, (.dmark+2)  
2daa 32 79 fb			ld (debug_mark+2),a  
2dad 18 03			jr .pastdmark  
2daf ..			.dmark: db "-s_"  
2db2 f1			.pastdmark: pop af  
2db3			endm  
# End of macro DMARK
2db3						CALLMONITOR 
2db3 cd 97 16			call break_point_state  
2db6				endm  
# End of macro CALLMONITOR
2db6					endif 
2db6			 
2db6					FORTH_DSP_VALUEHL 
2db6 cd 1b 1e			call macro_dsp_valuehl 
2db9				endm 
# End of macro FORTH_DSP_VALUEHL
2db9			 
2db9 e5					push hl   ; save address 
2dba			 
2dba					FORTH_DSP_POP 
2dba cd d3 1e			call macro_forth_dsp_pop 
2dbd				endm 
# End of macro FORTH_DSP_POP
2dbd			 
2dbd					FORTH_DSP_VALUEHL 
2dbd cd 1b 1e			call macro_dsp_valuehl 
2dc0				endm 
# End of macro FORTH_DSP_VALUEHL
2dc0			 
2dc0					; hl contains value to add to byte at a 
2dc0				 
2dc0 eb					ex de, hl 
2dc1			 
2dc1 e1					pop hl 
2dc2			 
2dc2					if DEBUG_FORTH_WORDS 
2dc2						DMARK "DEC" 
2dc2 f5				push af  
2dc3 3a d7 2d			ld a, (.dmark)  
2dc6 32 77 fb			ld (debug_mark),a  
2dc9 3a d8 2d			ld a, (.dmark+1)  
2dcc 32 78 fb			ld (debug_mark+1),a  
2dcf 3a d9 2d			ld a, (.dmark+2)  
2dd2 32 79 fb			ld (debug_mark+2),a  
2dd5 18 03			jr .pastdmark  
2dd7 ..			.dmark: db "DEC"  
2dda f1			.pastdmark: pop af  
2ddb			endm  
# End of macro DMARK
2ddb						CALLMONITOR 
2ddb cd 97 16			call break_point_state  
2dde				endm  
# End of macro CALLMONITOR
2dde					endif 
2dde			 
2dde 7e					ld a,(hl) 
2ddf 93					sub e 
2de0 77					ld (hl),a 
2de1			 
2de1			 
2de1			 
2de1				       NEXTW 
2de1 c3 8d 1f			jp macro_next 
2de4				endm 
# End of macro NEXTW
2de4			 
2de4			.INC2: 
2de4				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2de4 6f				db WORD_SYS_CORE+91             
2de5 8e 2e			dw .DEC2            
2de7 04				db 3 + 1 
2de8 .. 00			db "+2!",0              
2dec				endm 
# End of macro CWHEAD
2dec			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2dec			 
2dec					if DEBUG_FORTH_WORDS_KEY 
2dec						DMARK "+2s" 
2dec f5				push af  
2ded 3a 01 2e			ld a, (.dmark)  
2df0 32 77 fb			ld (debug_mark),a  
2df3 3a 02 2e			ld a, (.dmark+1)  
2df6 32 78 fb			ld (debug_mark+1),a  
2df9 3a 03 2e			ld a, (.dmark+2)  
2dfc 32 79 fb			ld (debug_mark+2),a  
2dff 18 03			jr .pastdmark  
2e01 ..			.dmark: db "+2s"  
2e04 f1			.pastdmark: pop af  
2e05			endm  
# End of macro DMARK
2e05						CALLMONITOR 
2e05 cd 97 16			call break_point_state  
2e08				endm  
# End of macro CALLMONITOR
2e08					endif 
2e08			 
2e08					; Address 
2e08			 
2e08					FORTH_DSP_VALUEHL 
2e08 cd 1b 1e			call macro_dsp_valuehl 
2e0b				endm 
# End of macro FORTH_DSP_VALUEHL
2e0b			 
2e0b e5					push hl    ; save address 
2e0c			 
2e0c					; load content into de 
2e0c			 
2e0c 5e					ld e,(hl) 
2e0d 23					inc hl 
2e0e 56					ld d, (hl) 
2e0f			 
2e0f					if DEBUG_FORTH_WORDS 
2e0f						DMARK "+2a" 
2e0f f5				push af  
2e10 3a 24 2e			ld a, (.dmark)  
2e13 32 77 fb			ld (debug_mark),a  
2e16 3a 25 2e			ld a, (.dmark+1)  
2e19 32 78 fb			ld (debug_mark+1),a  
2e1c 3a 26 2e			ld a, (.dmark+2)  
2e1f 32 79 fb			ld (debug_mark+2),a  
2e22 18 03			jr .pastdmark  
2e24 ..			.dmark: db "+2a"  
2e27 f1			.pastdmark: pop af  
2e28			endm  
# End of macro DMARK
2e28						CALLMONITOR 
2e28 cd 97 16			call break_point_state  
2e2b				endm  
# End of macro CALLMONITOR
2e2b					endif 
2e2b			 
2e2b					FORTH_DSP_POP 
2e2b cd d3 1e			call macro_forth_dsp_pop 
2e2e				endm 
# End of macro FORTH_DSP_POP
2e2e			 
2e2e					; Get value to add 
2e2e			 
2e2e					FORTH_DSP_VALUE 
2e2e cd 04 1e			call macro_forth_dsp_value 
2e31				endm 
# End of macro FORTH_DSP_VALUE
2e31			 
2e31					if DEBUG_FORTH_WORDS 
2e31						DMARK "+2v" 
2e31 f5				push af  
2e32 3a 46 2e			ld a, (.dmark)  
2e35 32 77 fb			ld (debug_mark),a  
2e38 3a 47 2e			ld a, (.dmark+1)  
2e3b 32 78 fb			ld (debug_mark+1),a  
2e3e 3a 48 2e			ld a, (.dmark+2)  
2e41 32 79 fb			ld (debug_mark+2),a  
2e44 18 03			jr .pastdmark  
2e46 ..			.dmark: db "+2v"  
2e49 f1			.pastdmark: pop af  
2e4a			endm  
# End of macro DMARK
2e4a						CALLMONITOR 
2e4a cd 97 16			call break_point_state  
2e4d				endm  
# End of macro CALLMONITOR
2e4d					endif 
2e4d			 
2e4d 19					add hl, de 
2e4e			 
2e4e					if DEBUG_FORTH_WORDS 
2e4e						DMARK "+2+" 
2e4e f5				push af  
2e4f 3a 63 2e			ld a, (.dmark)  
2e52 32 77 fb			ld (debug_mark),a  
2e55 3a 64 2e			ld a, (.dmark+1)  
2e58 32 78 fb			ld (debug_mark+1),a  
2e5b 3a 65 2e			ld a, (.dmark+2)  
2e5e 32 79 fb			ld (debug_mark+2),a  
2e61 18 03			jr .pastdmark  
2e63 ..			.dmark: db "+2+"  
2e66 f1			.pastdmark: pop af  
2e67			endm  
# End of macro DMARK
2e67						CALLMONITOR 
2e67 cd 97 16			call break_point_state  
2e6a				endm  
# End of macro CALLMONITOR
2e6a					endif 
2e6a			 
2e6a					; move result to de 
2e6a			 
2e6a eb					ex de, hl 
2e6b			 
2e6b					; Address 
2e6b			 
2e6b e1					pop hl 
2e6c			 
2e6c					; save it back 
2e6c			 
2e6c 73					ld (hl), e 
2e6d 23					inc hl 
2e6e 72					ld (hl), d 
2e6f			 
2e6f					if DEBUG_FORTH_WORDS 
2e6f						DMARK "+2e" 
2e6f f5				push af  
2e70 3a 84 2e			ld a, (.dmark)  
2e73 32 77 fb			ld (debug_mark),a  
2e76 3a 85 2e			ld a, (.dmark+1)  
2e79 32 78 fb			ld (debug_mark+1),a  
2e7c 3a 86 2e			ld a, (.dmark+2)  
2e7f 32 79 fb			ld (debug_mark+2),a  
2e82 18 03			jr .pastdmark  
2e84 ..			.dmark: db "+2e"  
2e87 f1			.pastdmark: pop af  
2e88			endm  
# End of macro DMARK
2e88						CALLMONITOR 
2e88 cd 97 16			call break_point_state  
2e8b				endm  
# End of macro CALLMONITOR
2e8b					endif 
2e8b			 
2e8b			 
2e8b			 
2e8b			 
2e8b			 
2e8b				       NEXTW 
2e8b c3 8d 1f			jp macro_next 
2e8e				endm 
# End of macro NEXTW
2e8e			 
2e8e			.DEC2: 
2e8e				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2e8e 6f				db WORD_SYS_CORE+91             
2e8f 3a 2f			dw .GET2            
2e91 04				db 3 + 1 
2e92 .. 00			db "-2!",0              
2e96				endm 
# End of macro CWHEAD
2e96			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2e96			 
2e96			 
2e96					if DEBUG_FORTH_WORDS_KEY 
2e96						DMARK "-2s" 
2e96 f5				push af  
2e97 3a ab 2e			ld a, (.dmark)  
2e9a 32 77 fb			ld (debug_mark),a  
2e9d 3a ac 2e			ld a, (.dmark+1)  
2ea0 32 78 fb			ld (debug_mark+1),a  
2ea3 3a ad 2e			ld a, (.dmark+2)  
2ea6 32 79 fb			ld (debug_mark+2),a  
2ea9 18 03			jr .pastdmark  
2eab ..			.dmark: db "-2s"  
2eae f1			.pastdmark: pop af  
2eaf			endm  
# End of macro DMARK
2eaf						CALLMONITOR 
2eaf cd 97 16			call break_point_state  
2eb2				endm  
# End of macro CALLMONITOR
2eb2					endif 
2eb2			 
2eb2					; Address 
2eb2			 
2eb2					FORTH_DSP_VALUEHL 
2eb2 cd 1b 1e			call macro_dsp_valuehl 
2eb5				endm 
# End of macro FORTH_DSP_VALUEHL
2eb5			 
2eb5 e5					push hl    ; save address 
2eb6			 
2eb6					; load content into de 
2eb6			 
2eb6 5e					ld e,(hl) 
2eb7 23					inc hl 
2eb8 56					ld d, (hl) 
2eb9			 
2eb9					if DEBUG_FORTH_WORDS 
2eb9						DMARK "-2a" 
2eb9 f5				push af  
2eba 3a ce 2e			ld a, (.dmark)  
2ebd 32 77 fb			ld (debug_mark),a  
2ec0 3a cf 2e			ld a, (.dmark+1)  
2ec3 32 78 fb			ld (debug_mark+1),a  
2ec6 3a d0 2e			ld a, (.dmark+2)  
2ec9 32 79 fb			ld (debug_mark+2),a  
2ecc 18 03			jr .pastdmark  
2ece ..			.dmark: db "-2a"  
2ed1 f1			.pastdmark: pop af  
2ed2			endm  
# End of macro DMARK
2ed2						CALLMONITOR 
2ed2 cd 97 16			call break_point_state  
2ed5				endm  
# End of macro CALLMONITOR
2ed5					endif 
2ed5			 
2ed5					FORTH_DSP_POP 
2ed5 cd d3 1e			call macro_forth_dsp_pop 
2ed8				endm 
# End of macro FORTH_DSP_POP
2ed8			 
2ed8					; Get value to remove 
2ed8			 
2ed8					FORTH_DSP_VALUE 
2ed8 cd 04 1e			call macro_forth_dsp_value 
2edb				endm 
# End of macro FORTH_DSP_VALUE
2edb			 
2edb					if DEBUG_FORTH_WORDS 
2edb						DMARK "-2v" 
2edb f5				push af  
2edc 3a f0 2e			ld a, (.dmark)  
2edf 32 77 fb			ld (debug_mark),a  
2ee2 3a f1 2e			ld a, (.dmark+1)  
2ee5 32 78 fb			ld (debug_mark+1),a  
2ee8 3a f2 2e			ld a, (.dmark+2)  
2eeb 32 79 fb			ld (debug_mark+2),a  
2eee 18 03			jr .pastdmark  
2ef0 ..			.dmark: db "-2v"  
2ef3 f1			.pastdmark: pop af  
2ef4			endm  
# End of macro DMARK
2ef4						CALLMONITOR 
2ef4 cd 97 16			call break_point_state  
2ef7				endm  
# End of macro CALLMONITOR
2ef7					endif 
2ef7			 
2ef7 eb					ex de, hl 
2ef8 ed 52				sbc hl, de 
2efa			 
2efa					if DEBUG_FORTH_WORDS 
2efa						DMARK "-2d" 
2efa f5				push af  
2efb 3a 0f 2f			ld a, (.dmark)  
2efe 32 77 fb			ld (debug_mark),a  
2f01 3a 10 2f			ld a, (.dmark+1)  
2f04 32 78 fb			ld (debug_mark+1),a  
2f07 3a 11 2f			ld a, (.dmark+2)  
2f0a 32 79 fb			ld (debug_mark+2),a  
2f0d 18 03			jr .pastdmark  
2f0f ..			.dmark: db "-2d"  
2f12 f1			.pastdmark: pop af  
2f13			endm  
# End of macro DMARK
2f13						CALLMONITOR 
2f13 cd 97 16			call break_point_state  
2f16				endm  
# End of macro CALLMONITOR
2f16					endif 
2f16			 
2f16					; move result to de 
2f16			 
2f16 eb					ex de, hl 
2f17			 
2f17					; Address 
2f17			 
2f17 e1					pop hl 
2f18			 
2f18					; save it back 
2f18			 
2f18 73					ld (hl), e 
2f19 23					inc hl 
2f1a 72					ld (hl), d 
2f1b			 
2f1b					if DEBUG_FORTH_WORDS 
2f1b						DMARK "-2e" 
2f1b f5				push af  
2f1c 3a 30 2f			ld a, (.dmark)  
2f1f 32 77 fb			ld (debug_mark),a  
2f22 3a 31 2f			ld a, (.dmark+1)  
2f25 32 78 fb			ld (debug_mark+1),a  
2f28 3a 32 2f			ld a, (.dmark+2)  
2f2b 32 79 fb			ld (debug_mark+2),a  
2f2e 18 03			jr .pastdmark  
2f30 ..			.dmark: db "-2e"  
2f33 f1			.pastdmark: pop af  
2f34			endm  
# End of macro DMARK
2f34						CALLMONITOR 
2f34 cd 97 16			call break_point_state  
2f37				endm  
# End of macro CALLMONITOR
2f37					endif 
2f37			 
2f37			 
2f37			 
2f37			 
2f37			 
2f37				       NEXTW 
2f37 c3 8d 1f			jp macro_next 
2f3a				endm 
# End of macro NEXTW
2f3a			.GET2: 
2f3a				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2f3a 6f				db WORD_SYS_CORE+91             
2f3b 6a 2f			dw .BANG2            
2f3d 03				db 2 + 1 
2f3e .. 00			db "2@",0              
2f41				endm 
# End of macro CWHEAD
2f41			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2f41					if DEBUG_FORTH_WORDS_KEY 
2f41						DMARK "2A_" 
2f41 f5				push af  
2f42 3a 56 2f			ld a, (.dmark)  
2f45 32 77 fb			ld (debug_mark),a  
2f48 3a 57 2f			ld a, (.dmark+1)  
2f4b 32 78 fb			ld (debug_mark+1),a  
2f4e 3a 58 2f			ld a, (.dmark+2)  
2f51 32 79 fb			ld (debug_mark+2),a  
2f54 18 03			jr .pastdmark  
2f56 ..			.dmark: db "2A_"  
2f59 f1			.pastdmark: pop af  
2f5a			endm  
# End of macro DMARK
2f5a						CALLMONITOR 
2f5a cd 97 16			call break_point_state  
2f5d				endm  
# End of macro CALLMONITOR
2f5d					endif 
2f5d			 
2f5d					FORTH_DSP_VALUEHL 
2f5d cd 1b 1e			call macro_dsp_valuehl 
2f60				endm 
# End of macro FORTH_DSP_VALUEHL
2f60			 
2f60 5e					ld e, (hl) 
2f61 23					inc hl 
2f62 56					ld d, (hl) 
2f63			 
2f63 eb					ex de, hl 
2f64			 
2f64 cd 24 1c				call forth_push_numhl 
2f67			 
2f67				       NEXTW 
2f67 c3 8d 1f			jp macro_next 
2f6a				endm 
# End of macro NEXTW
2f6a			.BANG2: 
2f6a				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2f6a 6f				db WORD_SYS_CORE+91             
2f6b a2 2f			dw .CONFIG            
2f6d 03				db 2 + 1 
2f6e .. 00			db "2!",0              
2f71				endm 
# End of macro CWHEAD
2f71			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2f71					if DEBUG_FORTH_WORDS_KEY 
2f71						DMARK "2S_" 
2f71 f5				push af  
2f72 3a 86 2f			ld a, (.dmark)  
2f75 32 77 fb			ld (debug_mark),a  
2f78 3a 87 2f			ld a, (.dmark+1)  
2f7b 32 78 fb			ld (debug_mark+1),a  
2f7e 3a 88 2f			ld a, (.dmark+2)  
2f81 32 79 fb			ld (debug_mark+2),a  
2f84 18 03			jr .pastdmark  
2f86 ..			.dmark: db "2S_"  
2f89 f1			.pastdmark: pop af  
2f8a			endm  
# End of macro DMARK
2f8a						CALLMONITOR 
2f8a cd 97 16			call break_point_state  
2f8d				endm  
# End of macro CALLMONITOR
2f8d					endif 
2f8d			 
2f8d					FORTH_DSP_VALUEHL 
2f8d cd 1b 1e			call macro_dsp_valuehl 
2f90				endm 
# End of macro FORTH_DSP_VALUEHL
2f90			 
2f90 e5					push hl   ; save address 
2f91			 
2f91			 
2f91					FORTH_DSP_POP 
2f91 cd d3 1e			call macro_forth_dsp_pop 
2f94				endm 
# End of macro FORTH_DSP_POP
2f94			 
2f94					 
2f94					FORTH_DSP_VALUEHL 
2f94 cd 1b 1e			call macro_dsp_valuehl 
2f97				endm 
# End of macro FORTH_DSP_VALUEHL
2f97			 
2f97					FORTH_DSP_POP 
2f97 cd d3 1e			call macro_forth_dsp_pop 
2f9a				endm 
# End of macro FORTH_DSP_POP
2f9a			 
2f9a eb					ex de, hl    ; value now in de 
2f9b			 
2f9b e1					pop hl 
2f9c			 
2f9c 73					ld (hl), e 
2f9d			 
2f9d 23					inc hl 
2f9e			 
2f9e 72					ld (hl), d 
2f9f			 
2f9f			 
2f9f				       NEXTW 
2f9f c3 8d 1f			jp macro_next 
2fa2				endm 
# End of macro NEXTW
2fa2			.CONFIG: 
2fa2				CWHEAD .ENDCORE 91 "CONFIG" 6 WORD_FLAG_CODE 
2fa2 6f				db WORD_SYS_CORE+91             
2fa3 b3 2f			dw .ENDCORE            
2fa5 07				db 6 + 1 
2fa6 .. 00			db "CONFIG",0              
2fad				endm 
# End of macro CWHEAD
2fad			; | CONFIG ( -- )  Access the system configuration menu | TO DO 
2fad			 
2fad cd 93 13				call config 
2fb0					NEXTW 
2fb0 c3 8d 1f			jp macro_next 
2fb3				endm 
# End of macro NEXTW
2fb3			.ENDCORE: 
2fb3			 
2fb3			; eof 
2fb3			 
2fb3			 
# End of file forth_words_core.asm
2fb3			include "forth_words_flow.asm" 
2fb3			 
2fb3			; | ## Program Flow Words 
2fb3			 
2fb3			.IF: 
2fb3				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
2fb3 1e				db WORD_SYS_CORE+10             
2fb4 a8 30			dw .THEN            
2fb6 03				db 2 + 1 
2fb7 .. 00			db "IF",0              
2fba				endm 
# End of macro CWHEAD
2fba			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
2fba			; 
2fba					if DEBUG_FORTH_WORDS_KEY 
2fba						DMARK "IF." 
2fba f5				push af  
2fbb 3a cf 2f			ld a, (.dmark)  
2fbe 32 77 fb			ld (debug_mark),a  
2fc1 3a d0 2f			ld a, (.dmark+1)  
2fc4 32 78 fb			ld (debug_mark+1),a  
2fc7 3a d1 2f			ld a, (.dmark+2)  
2fca 32 79 fb			ld (debug_mark+2),a  
2fcd 18 03			jr .pastdmark  
2fcf ..			.dmark: db "IF."  
2fd2 f1			.pastdmark: pop af  
2fd3			endm  
# End of macro DMARK
2fd3						CALLMONITOR 
2fd3 cd 97 16			call break_point_state  
2fd6				endm  
# End of macro CALLMONITOR
2fd6					endif 
2fd6			; eval TOS 
2fd6			 
2fd6				FORTH_DSP_VALUEHL 
2fd6 cd 1b 1e			call macro_dsp_valuehl 
2fd9				endm 
# End of macro FORTH_DSP_VALUEHL
2fd9			 
2fd9			;	push hl 
2fd9				FORTH_DSP_POP 
2fd9 cd d3 1e			call macro_forth_dsp_pop 
2fdc				endm 
# End of macro FORTH_DSP_POP
2fdc			;	pop hl 
2fdc			 
2fdc					if DEBUG_FORTH_WORDS 
2fdc						DMARK "IF1" 
2fdc f5				push af  
2fdd 3a f1 2f			ld a, (.dmark)  
2fe0 32 77 fb			ld (debug_mark),a  
2fe3 3a f2 2f			ld a, (.dmark+1)  
2fe6 32 78 fb			ld (debug_mark+1),a  
2fe9 3a f3 2f			ld a, (.dmark+2)  
2fec 32 79 fb			ld (debug_mark+2),a  
2fef 18 03			jr .pastdmark  
2ff1 ..			.dmark: db "IF1"  
2ff4 f1			.pastdmark: pop af  
2ff5			endm  
# End of macro DMARK
2ff5						CALLMONITOR 
2ff5 cd 97 16			call break_point_state  
2ff8				endm  
# End of macro CALLMONITOR
2ff8					endif 
2ff8 b7				or a        ; clear carry flag 
2ff9 11 00 00			ld de, 0 
2ffc eb				ex de,hl 
2ffd ed 52			sbc hl, de 
2fff c2 89 30			jp nz, .iftrue 
3002			 
3002					if DEBUG_FORTH_WORDS 
3002						DMARK "IF2" 
3002 f5				push af  
3003 3a 17 30			ld a, (.dmark)  
3006 32 77 fb			ld (debug_mark),a  
3009 3a 18 30			ld a, (.dmark+1)  
300c 32 78 fb			ld (debug_mark+1),a  
300f 3a 19 30			ld a, (.dmark+2)  
3012 32 79 fb			ld (debug_mark+2),a  
3015 18 03			jr .pastdmark  
3017 ..			.dmark: db "IF2"  
301a f1			.pastdmark: pop af  
301b			endm  
# End of macro DMARK
301b						CALLMONITOR 
301b cd 97 16			call break_point_state  
301e				endm  
# End of macro CALLMONITOR
301e					endif 
301e			 
301e			; if not true then skip to THEN 
301e			 
301e				; TODO get tok_ptr 
301e				; TODO consume toks until we get to THEN 
301e			 
301e 2a 1e f1			ld hl, (os_tok_ptr) 
3021					if DEBUG_FORTH_WORDS 
3021						DMARK "IF3" 
3021 f5				push af  
3022 3a 36 30			ld a, (.dmark)  
3025 32 77 fb			ld (debug_mark),a  
3028 3a 37 30			ld a, (.dmark+1)  
302b 32 78 fb			ld (debug_mark+1),a  
302e 3a 38 30			ld a, (.dmark+2)  
3031 32 79 fb			ld (debug_mark+2),a  
3034 18 03			jr .pastdmark  
3036 ..			.dmark: db "IF3"  
3039 f1			.pastdmark: pop af  
303a			endm  
# End of macro DMARK
303a						CALLMONITOR 
303a cd 97 16			call break_point_state  
303d				endm  
# End of macro CALLMONITOR
303d						 
303d					endif 
303d 11 84 30			ld de, .ifthen 
3040					if DEBUG_FORTH_WORDS 
3040						DMARK "IF4" 
3040 f5				push af  
3041 3a 55 30			ld a, (.dmark)  
3044 32 77 fb			ld (debug_mark),a  
3047 3a 56 30			ld a, (.dmark+1)  
304a 32 78 fb			ld (debug_mark+1),a  
304d 3a 57 30			ld a, (.dmark+2)  
3050 32 79 fb			ld (debug_mark+2),a  
3053 18 03			jr .pastdmark  
3055 ..			.dmark: db "IF4"  
3058 f1			.pastdmark: pop af  
3059			endm  
# End of macro DMARK
3059						CALLMONITOR 
3059 cd 97 16			call break_point_state  
305c				endm  
# End of macro CALLMONITOR
305c					endif 
305c cd a8 20			call findnexttok  
305f			 
305f					if DEBUG_FORTH_WORDS 
305f						DMARK "IF5" 
305f f5				push af  
3060 3a 74 30			ld a, (.dmark)  
3063 32 77 fb			ld (debug_mark),a  
3066 3a 75 30			ld a, (.dmark+1)  
3069 32 78 fb			ld (debug_mark+1),a  
306c 3a 76 30			ld a, (.dmark+2)  
306f 32 79 fb			ld (debug_mark+2),a  
3072 18 03			jr .pastdmark  
3074 ..			.dmark: db "IF5"  
3077 f1			.pastdmark: pop af  
3078			endm  
# End of macro DMARK
3078						CALLMONITOR 
3078 cd 97 16			call break_point_state  
307b				endm  
# End of macro CALLMONITOR
307b					endif 
307b				; TODO replace below with ; exec using tok_ptr 
307b 22 1e f1			ld (os_tok_ptr), hl 
307e c3 1e 20			jp exec1 
3081				NEXTW 
3081 c3 8d 1f			jp macro_next 
3084				endm 
# End of macro NEXTW
3084			 
3084 .. 00		.ifthen:  db "THEN",0 
3089			 
3089			.iftrue:		 
3089				; Exec next words normally 
3089			 
3089				; if true then exec following IF as normal 
3089					if DEBUG_FORTH_WORDS 
3089						DMARK "IFT" 
3089 f5				push af  
308a 3a 9e 30			ld a, (.dmark)  
308d 32 77 fb			ld (debug_mark),a  
3090 3a 9f 30			ld a, (.dmark+1)  
3093 32 78 fb			ld (debug_mark+1),a  
3096 3a a0 30			ld a, (.dmark+2)  
3099 32 79 fb			ld (debug_mark+2),a  
309c 18 03			jr .pastdmark  
309e ..			.dmark: db "IFT"  
30a1 f1			.pastdmark: pop af  
30a2			endm  
# End of macro DMARK
30a2						CALLMONITOR 
30a2 cd 97 16			call break_point_state  
30a5				endm  
# End of macro CALLMONITOR
30a5					endif 
30a5			 
30a5					NEXTW 
30a5 c3 8d 1f			jp macro_next 
30a8				endm 
# End of macro NEXTW
30a8			.THEN: 
30a8				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
30a8 1f				db WORD_SYS_CORE+11             
30a9 d0 30			dw .ELSE            
30ab 05				db 4 + 1 
30ac .. 00			db "THEN",0              
30b1				endm 
# End of macro CWHEAD
30b1			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
30b1					if DEBUG_FORTH_WORDS_KEY 
30b1						DMARK "THN" 
30b1 f5				push af  
30b2 3a c6 30			ld a, (.dmark)  
30b5 32 77 fb			ld (debug_mark),a  
30b8 3a c7 30			ld a, (.dmark+1)  
30bb 32 78 fb			ld (debug_mark+1),a  
30be 3a c8 30			ld a, (.dmark+2)  
30c1 32 79 fb			ld (debug_mark+2),a  
30c4 18 03			jr .pastdmark  
30c6 ..			.dmark: db "THN"  
30c9 f1			.pastdmark: pop af  
30ca			endm  
# End of macro DMARK
30ca						CALLMONITOR 
30ca cd 97 16			call break_point_state  
30cd				endm  
# End of macro CALLMONITOR
30cd					endif 
30cd					NEXTW 
30cd c3 8d 1f			jp macro_next 
30d0				endm 
# End of macro NEXTW
30d0			.ELSE: 
30d0				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
30d0 20				db WORD_SYS_CORE+12             
30d1 f8 30			dw .DO            
30d3 03				db 2 + 1 
30d4 .. 00			db "ELSE",0              
30d9				endm 
# End of macro CWHEAD
30d9			; | ELSE ( -- ) Not supported - does nothing | TODO 
30d9			 
30d9					if DEBUG_FORTH_WORDS_KEY 
30d9						DMARK "ELS" 
30d9 f5				push af  
30da 3a ee 30			ld a, (.dmark)  
30dd 32 77 fb			ld (debug_mark),a  
30e0 3a ef 30			ld a, (.dmark+1)  
30e3 32 78 fb			ld (debug_mark+1),a  
30e6 3a f0 30			ld a, (.dmark+2)  
30e9 32 79 fb			ld (debug_mark+2),a  
30ec 18 03			jr .pastdmark  
30ee ..			.dmark: db "ELS"  
30f1 f1			.pastdmark: pop af  
30f2			endm  
# End of macro DMARK
30f2						CALLMONITOR 
30f2 cd 97 16			call break_point_state  
30f5				endm  
# End of macro CALLMONITOR
30f5					endif 
30f5			 
30f5			 
30f5					NEXTW 
30f5 c3 8d 1f			jp macro_next 
30f8				endm 
# End of macro NEXTW
30f8			.DO: 
30f8				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
30f8 21				db WORD_SYS_CORE+13             
30f9 1f 32			dw .LOOP            
30fb 03				db 2 + 1 
30fc .. 00			db "DO",0              
30ff				endm 
# End of macro CWHEAD
30ff			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
30ff			 
30ff					if DEBUG_FORTH_WORDS_KEY 
30ff						DMARK "DO." 
30ff f5				push af  
3100 3a 14 31			ld a, (.dmark)  
3103 32 77 fb			ld (debug_mark),a  
3106 3a 15 31			ld a, (.dmark+1)  
3109 32 78 fb			ld (debug_mark+1),a  
310c 3a 16 31			ld a, (.dmark+2)  
310f 32 79 fb			ld (debug_mark+2),a  
3112 18 03			jr .pastdmark  
3114 ..			.dmark: db "DO."  
3117 f1			.pastdmark: pop af  
3118			endm  
# End of macro DMARK
3118						CALLMONITOR 
3118 cd 97 16			call break_point_state  
311b				endm  
# End of macro CALLMONITOR
311b					endif 
311b			;  push pc to rsp stack past the DO 
311b			 
311b 2a 1e f1				ld hl, (os_tok_ptr) 
311e 23					inc hl   ; D 
311f 23					inc hl  ; O 
3120 23					inc hl   ; null 
3121					if DEBUG_FORTH_WORDS 
3121						DMARK "DO2" 
3121 f5				push af  
3122 3a 36 31			ld a, (.dmark)  
3125 32 77 fb			ld (debug_mark),a  
3128 3a 37 31			ld a, (.dmark+1)  
312b 32 78 fb			ld (debug_mark+1),a  
312e 3a 38 31			ld a, (.dmark+2)  
3131 32 79 fb			ld (debug_mark+2),a  
3134 18 03			jr .pastdmark  
3136 ..			.dmark: db "DO2"  
3139 f1			.pastdmark: pop af  
313a			endm  
# End of macro DMARK
313a						CALLMONITOR 
313a cd 97 16			call break_point_state  
313d				endm  
# End of macro CALLMONITOR
313d					endif 
313d					FORTH_RSP_NEXT 
313d cd cb 1b			call macro_forth_rsp_next 
3140				endm 
# End of macro FORTH_RSP_NEXT
3140					if DEBUG_FORTH_WORDS 
3140						DMARK "DO3" 
3140 f5				push af  
3141 3a 55 31			ld a, (.dmark)  
3144 32 77 fb			ld (debug_mark),a  
3147 3a 56 31			ld a, (.dmark+1)  
314a 32 78 fb			ld (debug_mark+1),a  
314d 3a 57 31			ld a, (.dmark+2)  
3150 32 79 fb			ld (debug_mark+2),a  
3153 18 03			jr .pastdmark  
3155 ..			.dmark: db "DO3"  
3158 f1			.pastdmark: pop af  
3159			endm  
# End of macro DMARK
3159						CALLMONITOR 
3159 cd 97 16			call break_point_state  
315c				endm  
# End of macro CALLMONITOR
315c					endif 
315c			 
315c					;if DEBUG_FORTH_WORDS 
315c				;		push hl 
315c			;		endif  
315c			 
315c			; get counters from data stack 
315c			 
315c			 
315c					FORTH_DSP_VALUEHL 
315c cd 1b 1e			call macro_dsp_valuehl 
315f				endm 
# End of macro FORTH_DSP_VALUEHL
315f e5					push hl		 ; hl now has starting counter which needs to be tos 
3160			 
3160					if DEBUG_FORTH_WORDS 
3160						DMARK "DO4" 
3160 f5				push af  
3161 3a 75 31			ld a, (.dmark)  
3164 32 77 fb			ld (debug_mark),a  
3167 3a 76 31			ld a, (.dmark+1)  
316a 32 78 fb			ld (debug_mark+1),a  
316d 3a 77 31			ld a, (.dmark+2)  
3170 32 79 fb			ld (debug_mark+2),a  
3173 18 03			jr .pastdmark  
3175 ..			.dmark: db "DO4"  
3178 f1			.pastdmark: pop af  
3179			endm  
# End of macro DMARK
3179						CALLMONITOR 
3179 cd 97 16			call break_point_state  
317c				endm  
# End of macro CALLMONITOR
317c					endif 
317c					FORTH_DSP_POP 
317c cd d3 1e			call macro_forth_dsp_pop 
317f				endm 
# End of macro FORTH_DSP_POP
317f			 
317f					if DEBUG_FORTH_WORDS 
317f						DMARK "DO5" 
317f f5				push af  
3180 3a 94 31			ld a, (.dmark)  
3183 32 77 fb			ld (debug_mark),a  
3186 3a 95 31			ld a, (.dmark+1)  
3189 32 78 fb			ld (debug_mark+1),a  
318c 3a 96 31			ld a, (.dmark+2)  
318f 32 79 fb			ld (debug_mark+2),a  
3192 18 03			jr .pastdmark  
3194 ..			.dmark: db "DO5"  
3197 f1			.pastdmark: pop af  
3198			endm  
# End of macro DMARK
3198						CALLMONITOR 
3198 cd 97 16			call break_point_state  
319b				endm  
# End of macro CALLMONITOR
319b					endif 
319b			 
319b					FORTH_DSP_VALUEHL 
319b cd 1b 1e			call macro_dsp_valuehl 
319e				endm 
# End of macro FORTH_DSP_VALUEHL
319e			;		push hl		 ; hl now has starting limit counter 
319e			 
319e					if DEBUG_FORTH_WORDS 
319e						DMARK "DO6" 
319e f5				push af  
319f 3a b3 31			ld a, (.dmark)  
31a2 32 77 fb			ld (debug_mark),a  
31a5 3a b4 31			ld a, (.dmark+1)  
31a8 32 78 fb			ld (debug_mark+1),a  
31ab 3a b5 31			ld a, (.dmark+2)  
31ae 32 79 fb			ld (debug_mark+2),a  
31b1 18 03			jr .pastdmark  
31b3 ..			.dmark: db "DO6"  
31b6 f1			.pastdmark: pop af  
31b7			endm  
# End of macro DMARK
31b7						CALLMONITOR 
31b7 cd 97 16			call break_point_state  
31ba				endm  
# End of macro CALLMONITOR
31ba					endif 
31ba					FORTH_DSP_POP 
31ba cd d3 1e			call macro_forth_dsp_pop 
31bd				endm 
# End of macro FORTH_DSP_POP
31bd			 
31bd			; put counters on the loop stack 
31bd			 
31bd			;		pop hl			 ; limit counter 
31bd d1					pop de			; start counter 
31be			 
31be					; push limit counter 
31be			 
31be					if DEBUG_FORTH_WORDS 
31be						DMARK "DO7" 
31be f5				push af  
31bf 3a d3 31			ld a, (.dmark)  
31c2 32 77 fb			ld (debug_mark),a  
31c5 3a d4 31			ld a, (.dmark+1)  
31c8 32 78 fb			ld (debug_mark+1),a  
31cb 3a d5 31			ld a, (.dmark+2)  
31ce 32 79 fb			ld (debug_mark+2),a  
31d1 18 03			jr .pastdmark  
31d3 ..			.dmark: db "DO7"  
31d6 f1			.pastdmark: pop af  
31d7			endm  
# End of macro DMARK
31d7						CALLMONITOR 
31d7 cd 97 16			call break_point_state  
31da				endm  
# End of macro CALLMONITOR
31da					endif 
31da					FORTH_LOOP_NEXT 
31da cd 4c 1e			call macro_forth_loop_next 
31dd				endm 
# End of macro FORTH_LOOP_NEXT
31dd			 
31dd					; push start counter 
31dd			 
31dd eb					ex de, hl 
31de					if DEBUG_FORTH_WORDS 
31de						DMARK "DO7" 
31de f5				push af  
31df 3a f3 31			ld a, (.dmark)  
31e2 32 77 fb			ld (debug_mark),a  
31e5 3a f4 31			ld a, (.dmark+1)  
31e8 32 78 fb			ld (debug_mark+1),a  
31eb 3a f5 31			ld a, (.dmark+2)  
31ee 32 79 fb			ld (debug_mark+2),a  
31f1 18 03			jr .pastdmark  
31f3 ..			.dmark: db "DO7"  
31f6 f1			.pastdmark: pop af  
31f7			endm  
# End of macro DMARK
31f7						CALLMONITOR 
31f7 cd 97 16			call break_point_state  
31fa				endm  
# End of macro CALLMONITOR
31fa					endif 
31fa					FORTH_LOOP_NEXT 
31fa cd 4c 1e			call macro_forth_loop_next 
31fd				endm 
# End of macro FORTH_LOOP_NEXT
31fd			 
31fd			 
31fd					; init first round of I counter 
31fd			 
31fd 22 42 f1				ld (os_current_i), hl 
3200			 
3200					if DEBUG_FORTH_WORDS 
3200						DMARK "DO8" 
3200 f5				push af  
3201 3a 15 32			ld a, (.dmark)  
3204 32 77 fb			ld (debug_mark),a  
3207 3a 16 32			ld a, (.dmark+1)  
320a 32 78 fb			ld (debug_mark+1),a  
320d 3a 17 32			ld a, (.dmark+2)  
3210 32 79 fb			ld (debug_mark+2),a  
3213 18 03			jr .pastdmark  
3215 ..			.dmark: db "DO8"  
3218 f1			.pastdmark: pop af  
3219			endm  
# End of macro DMARK
3219						CALLMONITOR 
3219 cd 97 16			call break_point_state  
321c				endm  
# End of macro CALLMONITOR
321c					endif 
321c			 
321c					NEXTW 
321c c3 8d 1f			jp macro_next 
321f				endm 
# End of macro NEXTW
321f			.LOOP: 
321f				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
321f 22				db WORD_SYS_CORE+14             
3220 37 33			dw .I            
3222 05				db 4 + 1 
3223 .. 00			db "LOOP",0              
3228				endm 
# End of macro CWHEAD
3228			; | LOOP ( -- ) Increment and test loop counter  | DONE 
3228			 
3228				; pop tos as current loop count to hl 
3228			 
3228				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3228			 
3228				FORTH_LOOP_TOS 
3228 cd 7f 1e			call macro_forth_loop_tos 
322b				endm 
# End of macro FORTH_LOOP_TOS
322b e5				push hl 
322c			 
322c					if DEBUG_FORTH_WORDS_KEY 
322c						DMARK "LOP" 
322c f5				push af  
322d 3a 41 32			ld a, (.dmark)  
3230 32 77 fb			ld (debug_mark),a  
3233 3a 42 32			ld a, (.dmark+1)  
3236 32 78 fb			ld (debug_mark+1),a  
3239 3a 43 32			ld a, (.dmark+2)  
323c 32 79 fb			ld (debug_mark+2),a  
323f 18 03			jr .pastdmark  
3241 ..			.dmark: db "LOP"  
3244 f1			.pastdmark: pop af  
3245			endm  
# End of macro DMARK
3245						CALLMONITOR 
3245 cd 97 16			call break_point_state  
3248				endm  
# End of macro CALLMONITOR
3248					endif 
3248				; next item on the stack is the limit. get it 
3248			 
3248			 
3248				FORTH_LOOP_POP 
3248 cd 89 1e			call macro_forth_loop_pop 
324b				endm 
# End of macro FORTH_LOOP_POP
324b			 
324b				FORTH_LOOP_TOS 
324b cd 7f 1e			call macro_forth_loop_tos 
324e				endm 
# End of macro FORTH_LOOP_TOS
324e			 
324e d1				pop de		 ; de = i, hl = limit 
324f			 
324f					if DEBUG_FORTH_WORDS 
324f						DMARK "LP1" 
324f f5				push af  
3250 3a 64 32			ld a, (.dmark)  
3253 32 77 fb			ld (debug_mark),a  
3256 3a 65 32			ld a, (.dmark+1)  
3259 32 78 fb			ld (debug_mark+1),a  
325c 3a 66 32			ld a, (.dmark+2)  
325f 32 79 fb			ld (debug_mark+2),a  
3262 18 03			jr .pastdmark  
3264 ..			.dmark: db "LP1"  
3267 f1			.pastdmark: pop af  
3268			endm  
# End of macro DMARK
3268						CALLMONITOR 
3268 cd 97 16			call break_point_state  
326b				endm  
# End of macro CALLMONITOR
326b					endif 
326b			 
326b				; go back to previous word 
326b			 
326b d5				push de    ; save I for inc later 
326c			 
326c			 
326c				; get limit 
326c				;  is I at limit? 
326c			 
326c			 
326c					if DEBUG_FORTH_WORDS 
326c						DMARK "LP1" 
326c f5				push af  
326d 3a 81 32			ld a, (.dmark)  
3270 32 77 fb			ld (debug_mark),a  
3273 3a 82 32			ld a, (.dmark+1)  
3276 32 78 fb			ld (debug_mark+1),a  
3279 3a 83 32			ld a, (.dmark+2)  
327c 32 79 fb			ld (debug_mark+2),a  
327f 18 03			jr .pastdmark  
3281 ..			.dmark: db "LP1"  
3284 f1			.pastdmark: pop af  
3285			endm  
# End of macro DMARK
3285						CALLMONITOR 
3285 cd 97 16			call break_point_state  
3288				endm  
# End of macro CALLMONITOR
3288					endif 
3288			 
3288 ed 52			sbc hl, de 
328a			 
328a			 
328a				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
328a			 
328a 20 26				jr nz, .loopnotdone 
328c			 
328c e1				pop hl   ; get rid of saved I 
328d				FORTH_LOOP_POP     ; get rid of limit 
328d cd 89 1e			call macro_forth_loop_pop 
3290				endm 
# End of macro FORTH_LOOP_POP
3290			 
3290				FORTH_RSP_POP     ; get rid of DO ptr 
3290 cd ec 1b			call macro_forth_rsp_pop 
3293				endm 
# End of macro FORTH_RSP_POP
3293			 
3293			if DEBUG_FORTH_WORDS 
3293						DMARK "LP>" 
3293 f5				push af  
3294 3a a8 32			ld a, (.dmark)  
3297 32 77 fb			ld (debug_mark),a  
329a 3a a9 32			ld a, (.dmark+1)  
329d 32 78 fb			ld (debug_mark+1),a  
32a0 3a aa 32			ld a, (.dmark+2)  
32a3 32 79 fb			ld (debug_mark+2),a  
32a6 18 03			jr .pastdmark  
32a8 ..			.dmark: db "LP>"  
32ab f1			.pastdmark: pop af  
32ac			endm  
# End of macro DMARK
32ac				CALLMONITOR 
32ac cd 97 16			call break_point_state  
32af				endm  
# End of macro CALLMONITOR
32af			endif 
32af			 
32af					NEXTW 
32af c3 8d 1f			jp macro_next 
32b2				endm 
# End of macro NEXTW
32b2				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
32b2			 
32b2			.loopnotdone: 
32b2			 
32b2 e1				pop hl    ; get I 
32b3 23				inc hl 
32b4			 
32b4			   	; save new I 
32b4			 
32b4			 
32b4					; set I counter 
32b4			 
32b4 22 42 f1				ld (os_current_i), hl 
32b7			 
32b7					if DEBUG_FORTH_WORDS 
32b7						DMARK "LPN" 
32b7 f5				push af  
32b8 3a cc 32			ld a, (.dmark)  
32bb 32 77 fb			ld (debug_mark),a  
32be 3a cd 32			ld a, (.dmark+1)  
32c1 32 78 fb			ld (debug_mark+1),a  
32c4 3a ce 32			ld a, (.dmark+2)  
32c7 32 79 fb			ld (debug_mark+2),a  
32ca 18 03			jr .pastdmark  
32cc ..			.dmark: db "LPN"  
32cf f1			.pastdmark: pop af  
32d0			endm  
# End of macro DMARK
32d0					CALLMONITOR 
32d0 cd 97 16			call break_point_state  
32d3				endm  
# End of macro CALLMONITOR
32d3					endif 
32d3					 
32d3				FORTH_LOOP_NEXT 
32d3 cd 4c 1e			call macro_forth_loop_next 
32d6				endm 
# End of macro FORTH_LOOP_NEXT
32d6			 
32d6			 
32d6					if DEBUG_FORTH_WORDS 
32d6 eb						ex de,hl 
32d7					endif 
32d7			 
32d7			;	; get DO ptr 
32d7			; 
32d7					if DEBUG_FORTH_WORDS 
32d7						DMARK "LP7" 
32d7 f5				push af  
32d8 3a ec 32			ld a, (.dmark)  
32db 32 77 fb			ld (debug_mark),a  
32de 3a ed 32			ld a, (.dmark+1)  
32e1 32 78 fb			ld (debug_mark+1),a  
32e4 3a ee 32			ld a, (.dmark+2)  
32e7 32 79 fb			ld (debug_mark+2),a  
32ea 18 03			jr .pastdmark  
32ec ..			.dmark: db "LP7"  
32ef f1			.pastdmark: pop af  
32f0			endm  
# End of macro DMARK
32f0					CALLMONITOR 
32f0 cd 97 16			call break_point_state  
32f3				endm  
# End of macro CALLMONITOR
32f3					endif 
32f3				FORTH_RSP_TOS 
32f3 cd e2 1b			call macro_forth_rsp_tos 
32f6				endm 
# End of macro FORTH_RSP_TOS
32f6			 
32f6					if DEBUG_FORTH_WORDS 
32f6						DMARK "LP8" 
32f6 f5				push af  
32f7 3a 0b 33			ld a, (.dmark)  
32fa 32 77 fb			ld (debug_mark),a  
32fd 3a 0c 33			ld a, (.dmark+1)  
3300 32 78 fb			ld (debug_mark+1),a  
3303 3a 0d 33			ld a, (.dmark+2)  
3306 32 79 fb			ld (debug_mark+2),a  
3309 18 03			jr .pastdmark  
330b ..			.dmark: db "LP8"  
330e f1			.pastdmark: pop af  
330f			endm  
# End of macro DMARK
330f					CALLMONITOR 
330f cd 97 16			call break_point_state  
3312				endm  
# End of macro CALLMONITOR
3312					endif 
3312				;push hl 
3312			 
3312				; not going to DO any more 
3312				; get rid of the RSP pointer as DO will add it back in 
3312				;FORTH_RSP_POP 
3312				;pop hl 
3312			 
3312				;ld hl,(cli_ret_sp) 
3312				;ld e, (hl) 
3312				;inc hl 
3312				;ld d, (hl) 
3312				;ex de,hl 
3312 22 1e f1			ld (os_tok_ptr), hl 
3315					if DEBUG_FORTH_WORDS 
3315						DMARK "LP<" 
3315 f5				push af  
3316 3a 2a 33			ld a, (.dmark)  
3319 32 77 fb			ld (debug_mark),a  
331c 3a 2b 33			ld a, (.dmark+1)  
331f 32 78 fb			ld (debug_mark+1),a  
3322 3a 2c 33			ld a, (.dmark+2)  
3325 32 79 fb			ld (debug_mark+2),a  
3328 18 03			jr .pastdmark  
332a ..			.dmark: db "LP<"  
332d f1			.pastdmark: pop af  
332e			endm  
# End of macro DMARK
332e					CALLMONITOR 
332e cd 97 16			call break_point_state  
3331				endm  
# End of macro CALLMONITOR
3331				endif 
3331 c3 1e 20			jp exec1 
3334			 
3334					 
3334			 
3334			 
3334					NEXTW 
3334 c3 8d 1f			jp macro_next 
3337				endm 
# End of macro NEXTW
3337			.I:  
3337			 
3337				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
3337 5e				db WORD_SYS_CORE+74             
3338 62 33			dw .DLOOP            
333a 02				db 1 + 1 
333b .. 00			db "I",0              
333d				endm 
# End of macro CWHEAD
333d			; | I ( -- ) Current loop counter | DONE 
333d					if DEBUG_FORTH_WORDS_KEY 
333d						DMARK "I.." 
333d f5				push af  
333e 3a 52 33			ld a, (.dmark)  
3341 32 77 fb			ld (debug_mark),a  
3344 3a 53 33			ld a, (.dmark+1)  
3347 32 78 fb			ld (debug_mark+1),a  
334a 3a 54 33			ld a, (.dmark+2)  
334d 32 79 fb			ld (debug_mark+2),a  
3350 18 03			jr .pastdmark  
3352 ..			.dmark: db "I.."  
3355 f1			.pastdmark: pop af  
3356			endm  
# End of macro DMARK
3356						CALLMONITOR 
3356 cd 97 16			call break_point_state  
3359				endm  
# End of macro CALLMONITOR
3359					endif 
3359			 
3359 2a 42 f1				ld hl,(os_current_i) 
335c cd 24 1c				call forth_push_numhl 
335f			 
335f					NEXTW 
335f c3 8d 1f			jp macro_next 
3362				endm 
# End of macro NEXTW
3362			.DLOOP: 
3362				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
3362 5f				db WORD_SYS_CORE+75             
3363 43 34			dw .REPEAT            
3365 06				db 5 + 1 
3366 .. 00			db "-LOOP",0              
336c				endm 
# End of macro CWHEAD
336c			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
336c				; pop tos as current loop count to hl 
336c					if DEBUG_FORTH_WORDS_KEY 
336c						DMARK "-LP" 
336c f5				push af  
336d 3a 81 33			ld a, (.dmark)  
3370 32 77 fb			ld (debug_mark),a  
3373 3a 82 33			ld a, (.dmark+1)  
3376 32 78 fb			ld (debug_mark+1),a  
3379 3a 83 33			ld a, (.dmark+2)  
337c 32 79 fb			ld (debug_mark+2),a  
337f 18 03			jr .pastdmark  
3381 ..			.dmark: db "-LP"  
3384 f1			.pastdmark: pop af  
3385			endm  
# End of macro DMARK
3385						CALLMONITOR 
3385 cd 97 16			call break_point_state  
3388				endm  
# End of macro CALLMONITOR
3388					endif 
3388			 
3388				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3388			 
3388				FORTH_LOOP_TOS 
3388 cd 7f 1e			call macro_forth_loop_tos 
338b				endm 
# End of macro FORTH_LOOP_TOS
338b e5				push hl 
338c			 
338c					if DEBUG_FORTH_WORDS 
338c						DMARK "-LP" 
338c f5				push af  
338d 3a a1 33			ld a, (.dmark)  
3390 32 77 fb			ld (debug_mark),a  
3393 3a a2 33			ld a, (.dmark+1)  
3396 32 78 fb			ld (debug_mark+1),a  
3399 3a a3 33			ld a, (.dmark+2)  
339c 32 79 fb			ld (debug_mark+2),a  
339f 18 03			jr .pastdmark  
33a1 ..			.dmark: db "-LP"  
33a4 f1			.pastdmark: pop af  
33a5			endm  
# End of macro DMARK
33a5						CALLMONITOR 
33a5 cd 97 16			call break_point_state  
33a8				endm  
# End of macro CALLMONITOR
33a8					endif 
33a8				; next item on the stack is the limit. get it 
33a8			 
33a8			 
33a8				FORTH_LOOP_POP 
33a8 cd 89 1e			call macro_forth_loop_pop 
33ab				endm 
# End of macro FORTH_LOOP_POP
33ab			 
33ab				FORTH_LOOP_TOS 
33ab cd 7f 1e			call macro_forth_loop_tos 
33ae				endm 
# End of macro FORTH_LOOP_TOS
33ae			 
33ae d1				pop de		 ; de = i, hl = limit 
33af			 
33af					if DEBUG_FORTH_WORDS 
33af						DMARK "-L1" 
33af f5				push af  
33b0 3a c4 33			ld a, (.dmark)  
33b3 32 77 fb			ld (debug_mark),a  
33b6 3a c5 33			ld a, (.dmark+1)  
33b9 32 78 fb			ld (debug_mark+1),a  
33bc 3a c6 33			ld a, (.dmark+2)  
33bf 32 79 fb			ld (debug_mark+2),a  
33c2 18 03			jr .pastdmark  
33c4 ..			.dmark: db "-L1"  
33c7 f1			.pastdmark: pop af  
33c8			endm  
# End of macro DMARK
33c8						CALLMONITOR 
33c8 cd 97 16			call break_point_state  
33cb				endm  
# End of macro CALLMONITOR
33cb					endif 
33cb			 
33cb				; go back to previous word 
33cb			 
33cb d5				push de    ; save I for inc later 
33cc			 
33cc			 
33cc				; get limit 
33cc				;  is I at limit? 
33cc			 
33cc			 
33cc					if DEBUG_FORTH_WORDS 
33cc						DMARK "-L1" 
33cc f5				push af  
33cd 3a e1 33			ld a, (.dmark)  
33d0 32 77 fb			ld (debug_mark),a  
33d3 3a e2 33			ld a, (.dmark+1)  
33d6 32 78 fb			ld (debug_mark+1),a  
33d9 3a e3 33			ld a, (.dmark+2)  
33dc 32 79 fb			ld (debug_mark+2),a  
33df 18 03			jr .pastdmark  
33e1 ..			.dmark: db "-L1"  
33e4 f1			.pastdmark: pop af  
33e5			endm  
# End of macro DMARK
33e5						CALLMONITOR 
33e5 cd 97 16			call break_point_state  
33e8				endm  
# End of macro CALLMONITOR
33e8					endif 
33e8			 
33e8 ed 52			sbc hl, de 
33ea			 
33ea			 
33ea				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
33ea			 
33ea 20 26				jr nz, .mloopnotdone 
33ec			 
33ec e1				pop hl   ; get rid of saved I 
33ed				FORTH_LOOP_POP     ; get rid of limit 
33ed cd 89 1e			call macro_forth_loop_pop 
33f0				endm 
# End of macro FORTH_LOOP_POP
33f0			 
33f0				FORTH_RSP_POP     ; get rid of DO ptr 
33f0 cd ec 1b			call macro_forth_rsp_pop 
33f3				endm 
# End of macro FORTH_RSP_POP
33f3			 
33f3			if DEBUG_FORTH_WORDS 
33f3						DMARK "-L>" 
33f3 f5				push af  
33f4 3a 08 34			ld a, (.dmark)  
33f7 32 77 fb			ld (debug_mark),a  
33fa 3a 09 34			ld a, (.dmark+1)  
33fd 32 78 fb			ld (debug_mark+1),a  
3400 3a 0a 34			ld a, (.dmark+2)  
3403 32 79 fb			ld (debug_mark+2),a  
3406 18 03			jr .pastdmark  
3408 ..			.dmark: db "-L>"  
340b f1			.pastdmark: pop af  
340c			endm  
# End of macro DMARK
340c				CALLMONITOR 
340c cd 97 16			call break_point_state  
340f				endm  
# End of macro CALLMONITOR
340f			endif 
340f			 
340f					NEXTW 
340f c3 8d 1f			jp macro_next 
3412				endm 
# End of macro NEXTW
3412				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3412			 
3412			.mloopnotdone: 
3412			 
3412 e1				pop hl    ; get I 
3413 2b				dec hl 
3414			 
3414			   	; save new I 
3414			 
3414			 
3414					; set I counter 
3414			 
3414 22 42 f1				ld (os_current_i), hl 
3417			 
3417					 
3417				FORTH_LOOP_NEXT 
3417 cd 4c 1e			call macro_forth_loop_next 
341a				endm 
# End of macro FORTH_LOOP_NEXT
341a			 
341a			 
341a					if DEBUG_FORTH_WORDS 
341a eb						ex de,hl 
341b					endif 
341b			 
341b			;	; get DO ptr 
341b			; 
341b				FORTH_RSP_TOS 
341b cd e2 1b			call macro_forth_rsp_tos 
341e				endm 
# End of macro FORTH_RSP_TOS
341e			 
341e				;push hl 
341e			 
341e				; not going to DO any more 
341e				; get rid of the RSP pointer as DO will add it back in 
341e				;FORTH_RSP_POP 
341e				;pop hl 
341e			 
341e			 
341e 22 1e f1			ld (os_tok_ptr), hl 
3421					if DEBUG_FORTH_WORDS 
3421						DMARK "-L<" 
3421 f5				push af  
3422 3a 36 34			ld a, (.dmark)  
3425 32 77 fb			ld (debug_mark),a  
3428 3a 37 34			ld a, (.dmark+1)  
342b 32 78 fb			ld (debug_mark+1),a  
342e 3a 38 34			ld a, (.dmark+2)  
3431 32 79 fb			ld (debug_mark+2),a  
3434 18 03			jr .pastdmark  
3436 ..			.dmark: db "-L<"  
3439 f1			.pastdmark: pop af  
343a			endm  
# End of macro DMARK
343a					CALLMONITOR 
343a cd 97 16			call break_point_state  
343d				endm  
# End of macro CALLMONITOR
343d				endif 
343d c3 1e 20			jp exec1 
3440			 
3440					 
3440			 
3440			 
3440			 
3440				NEXTW 
3440 c3 8d 1f			jp macro_next 
3443				endm 
# End of macro NEXTW
3443			 
3443			 
3443			 
3443			 
3443			.REPEAT: 
3443				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3443 71				db WORD_SYS_CORE+93             
3444 96 34			dw .UNTIL            
3446 06				db 5 + 1 
3447 .. 00			db "REPEAT",0              
344e				endm 
# End of macro CWHEAD
344e			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
344e			;  push pc to rsp stack past the REPEAT 
344e					if DEBUG_FORTH_WORDS_KEY 
344e						DMARK "REP" 
344e f5				push af  
344f 3a 63 34			ld a, (.dmark)  
3452 32 77 fb			ld (debug_mark),a  
3455 3a 64 34			ld a, (.dmark+1)  
3458 32 78 fb			ld (debug_mark+1),a  
345b 3a 65 34			ld a, (.dmark+2)  
345e 32 79 fb			ld (debug_mark+2),a  
3461 18 03			jr .pastdmark  
3463 ..			.dmark: db "REP"  
3466 f1			.pastdmark: pop af  
3467			endm  
# End of macro DMARK
3467						CALLMONITOR 
3467 cd 97 16			call break_point_state  
346a				endm  
# End of macro CALLMONITOR
346a					endif 
346a			 
346a 2a 1e f1				ld hl, (os_tok_ptr) 
346d 23					inc hl   ; R 
346e 23					inc hl  ; E 
346f 23					inc hl   ; P 
3470 23					inc hl   ; E 
3471 23					inc hl   ; A 
3472 23					inc hl   ; T 
3473 23					inc hl   ; zero 
3474					FORTH_RSP_NEXT 
3474 cd cb 1b			call macro_forth_rsp_next 
3477				endm 
# End of macro FORTH_RSP_NEXT
3477			 
3477			 
3477					if DEBUG_FORTH_WORDS 
3477						DMARK "REP" 
3477 f5				push af  
3478 3a 8c 34			ld a, (.dmark)  
347b 32 77 fb			ld (debug_mark),a  
347e 3a 8d 34			ld a, (.dmark+1)  
3481 32 78 fb			ld (debug_mark+1),a  
3484 3a 8e 34			ld a, (.dmark+2)  
3487 32 79 fb			ld (debug_mark+2),a  
348a 18 03			jr .pastdmark  
348c ..			.dmark: db "REP"  
348f f1			.pastdmark: pop af  
3490			endm  
# End of macro DMARK
3490						;pop bc    ; TODO BUG ?????? what is this for???? 
3490						CALLMONITOR 
3490 cd 97 16			call break_point_state  
3493				endm  
# End of macro CALLMONITOR
3493					endif 
3493			 
3493					NEXTW 
3493 c3 8d 1f			jp macro_next 
3496				endm 
# End of macro NEXTW
3496			;	       NEXTW 
3496			 
3496			.UNTIL: 
3496				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3496 72				db WORD_SYS_CORE+94             
3497 2d 35			dw .ENDFLOW            
3499 06				db 5 + 1 
349a .. 00			db "UNTIL",0              
34a0				endm 
# End of macro CWHEAD
34a0			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
34a0			 
34a0				; pop tos as check 
34a0			 
34a0				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
34a0			 
34a0				FORTH_DSP_VALUEHL 
34a0 cd 1b 1e			call macro_dsp_valuehl 
34a3				endm 
# End of macro FORTH_DSP_VALUEHL
34a3			 
34a3					if DEBUG_FORTH_WORDS_KEY 
34a3						DMARK "UNT" 
34a3 f5				push af  
34a4 3a b8 34			ld a, (.dmark)  
34a7 32 77 fb			ld (debug_mark),a  
34aa 3a b9 34			ld a, (.dmark+1)  
34ad 32 78 fb			ld (debug_mark+1),a  
34b0 3a ba 34			ld a, (.dmark+2)  
34b3 32 79 fb			ld (debug_mark+2),a  
34b6 18 03			jr .pastdmark  
34b8 ..			.dmark: db "UNT"  
34bb f1			.pastdmark: pop af  
34bc			endm  
# End of macro DMARK
34bc						CALLMONITOR 
34bc cd 97 16			call break_point_state  
34bf				endm  
# End of macro CALLMONITOR
34bf					endif 
34bf			 
34bf			;	push hl 
34bf				FORTH_DSP_POP 
34bf cd d3 1e			call macro_forth_dsp_pop 
34c2				endm 
# End of macro FORTH_DSP_POP
34c2			 
34c2			;	pop hl 
34c2			 
34c2				; test if true 
34c2			 
34c2 cd 32 0d			call ishlzero 
34c5			;	ld a,l 
34c5			;	add h 
34c5			; 
34c5			;	cp 0 
34c5			 
34c5 20 3e			jr nz, .untilnotdone 
34c7			 
34c7					if DEBUG_FORTH_WORDS 
34c7						DMARK "UNf" 
34c7 f5				push af  
34c8 3a dc 34			ld a, (.dmark)  
34cb 32 77 fb			ld (debug_mark),a  
34ce 3a dd 34			ld a, (.dmark+1)  
34d1 32 78 fb			ld (debug_mark+1),a  
34d4 3a de 34			ld a, (.dmark+2)  
34d7 32 79 fb			ld (debug_mark+2),a  
34da 18 03			jr .pastdmark  
34dc ..			.dmark: db "UNf"  
34df f1			.pastdmark: pop af  
34e0			endm  
# End of macro DMARK
34e0						CALLMONITOR 
34e0 cd 97 16			call break_point_state  
34e3				endm  
# End of macro CALLMONITOR
34e3					endif 
34e3			 
34e3			 
34e3			 
34e3				FORTH_RSP_POP     ; get rid of DO ptr 
34e3 cd ec 1b			call macro_forth_rsp_pop 
34e6				endm 
# End of macro FORTH_RSP_POP
34e6			 
34e6			if DEBUG_FORTH_WORDS 
34e6						DMARK "UN>" 
34e6 f5				push af  
34e7 3a fb 34			ld a, (.dmark)  
34ea 32 77 fb			ld (debug_mark),a  
34ed 3a fc 34			ld a, (.dmark+1)  
34f0 32 78 fb			ld (debug_mark+1),a  
34f3 3a fd 34			ld a, (.dmark+2)  
34f6 32 79 fb			ld (debug_mark+2),a  
34f9 18 03			jr .pastdmark  
34fb ..			.dmark: db "UN>"  
34fe f1			.pastdmark: pop af  
34ff			endm  
# End of macro DMARK
34ff				CALLMONITOR 
34ff cd 97 16			call break_point_state  
3502				endm  
# End of macro CALLMONITOR
3502			endif 
3502			 
3502					NEXTW 
3502 c3 8d 1f			jp macro_next 
3505				endm 
# End of macro NEXTW
3505				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3505			 
3505			.untilnotdone: 
3505			 
3505			 
3505			;	; get DO ptr 
3505			; 
3505				FORTH_RSP_TOS 
3505 cd e2 1b			call macro_forth_rsp_tos 
3508				endm 
# End of macro FORTH_RSP_TOS
3508			 
3508				;push hl 
3508			 
3508				; not going to DO any more 
3508				; get rid of the RSP pointer as DO will add it back in 
3508				;FORTH_RSP_POP 
3508				;pop hl 
3508			 
3508			 
3508 22 1e f1			ld (os_tok_ptr), hl 
350b					if DEBUG_FORTH_WORDS 
350b						DMARK "UN<" 
350b f5				push af  
350c 3a 20 35			ld a, (.dmark)  
350f 32 77 fb			ld (debug_mark),a  
3512 3a 21 35			ld a, (.dmark+1)  
3515 32 78 fb			ld (debug_mark+1),a  
3518 3a 22 35			ld a, (.dmark+2)  
351b 32 79 fb			ld (debug_mark+2),a  
351e 18 03			jr .pastdmark  
3520 ..			.dmark: db "UN<"  
3523 f1			.pastdmark: pop af  
3524			endm  
# End of macro DMARK
3524					CALLMONITOR 
3524 cd 97 16			call break_point_state  
3527				endm  
# End of macro CALLMONITOR
3527				endif 
3527 c3 1e 20			jp exec1 
352a			 
352a					 
352a			 
352a			 
352a					NEXTW 
352a c3 8d 1f			jp macro_next 
352d				endm 
# End of macro NEXTW
352d			 
352d			 
352d			.ENDFLOW: 
352d			 
352d			; eof 
352d			 
# End of file forth_words_flow.asm
352d			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
352d			include "forth_words_logic.asm" 
352d			 
352d			; | ## Logic Words 
352d			 
352d			.NOT: 
352d				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
352d 2d				db WORD_SYS_CORE+25             
352e 75 35			dw .IS            
3530 04				db 3 + 1 
3531 .. 00			db "NOT",0              
3535				endm 
# End of macro CWHEAD
3535			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
3535					if DEBUG_FORTH_WORDS_KEY 
3535						DMARK "NOT" 
3535 f5				push af  
3536 3a 4a 35			ld a, (.dmark)  
3539 32 77 fb			ld (debug_mark),a  
353c 3a 4b 35			ld a, (.dmark+1)  
353f 32 78 fb			ld (debug_mark+1),a  
3542 3a 4c 35			ld a, (.dmark+2)  
3545 32 79 fb			ld (debug_mark+2),a  
3548 18 03			jr .pastdmark  
354a ..			.dmark: db "NOT"  
354d f1			.pastdmark: pop af  
354e			endm  
# End of macro DMARK
354e						CALLMONITOR 
354e cd 97 16			call break_point_state  
3551				endm  
# End of macro CALLMONITOR
3551					endif 
3551					FORTH_DSP 
3551 cd e1 1d			call macro_forth_dsp 
3554				endm 
# End of macro FORTH_DSP
3554 7e					ld a,(hl)	; get type of value on TOS 
3555 fe 02				cp DS_TYPE_INUM  
3557 28 03				jr z, .noti 
3559					NEXTW 
3559 c3 8d 1f			jp macro_next 
355c				endm 
# End of macro NEXTW
355c			.noti:          FORTH_DSP_VALUEHL 
355c cd 1b 1e			call macro_dsp_valuehl 
355f				endm 
# End of macro FORTH_DSP_VALUEHL
355f			;		push hl 
355f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
355f cd d3 1e			call macro_forth_dsp_pop 
3562				endm 
# End of macro FORTH_DSP_POP
3562			;		pop hl 
3562 3e 00				ld a,0 
3564 bd					cp l 
3565 28 04				jr z, .not2t 
3567 2e 00				ld l, 0 
3569 18 02				jr .notip 
356b			 
356b 2e ff		.not2t:		ld l, 255 
356d			 
356d 26 00		.notip:		ld h, 0	 
356f			 
356f cd 24 1c				call forth_push_numhl 
3572					NEXTW 
3572 c3 8d 1f			jp macro_next 
3575				endm 
# End of macro NEXTW
3575			 
3575			.IS: 
3575				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
3575 2d				db WORD_SYS_CORE+25             
3576 9b 35			dw .LZERO            
3578 03				db 2 + 1 
3579 .. 00			db "IS",0              
357c				endm 
# End of macro CWHEAD
357c			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
357c					if DEBUG_FORTH_WORDS_KEY 
357c						DMARK "IS." 
357c f5				push af  
357d 3a 91 35			ld a, (.dmark)  
3580 32 77 fb			ld (debug_mark),a  
3583 3a 92 35			ld a, (.dmark+1)  
3586 32 78 fb			ld (debug_mark+1),a  
3589 3a 93 35			ld a, (.dmark+2)  
358c 32 79 fb			ld (debug_mark+2),a  
358f 18 03			jr .pastdmark  
3591 ..			.dmark: db "IS."  
3594 f1			.pastdmark: pop af  
3595			endm  
# End of macro DMARK
3595						CALLMONITOR 
3595 cd 97 16			call break_point_state  
3598				endm  
# End of macro CALLMONITOR
3598					endif 
3598					NEXTW 
3598 c3 8d 1f			jp macro_next 
359b				endm 
# End of macro NEXTW
359b			.LZERO: 
359b				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
359b 2d				db WORD_SYS_CORE+25             
359c a5 35			dw .TZERO            
359e 03				db 2 + 1 
359f .. 00			db "0<",0              
35a2				endm 
# End of macro CWHEAD
35a2			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
35a2					NEXTW 
35a2 c3 8d 1f			jp macro_next 
35a5				endm 
# End of macro NEXTW
35a5			.TZERO: 
35a5				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
35a5 2e				db WORD_SYS_CORE+26             
35a6 ec 35			dw .LESS            
35a8 03				db 2 + 1 
35a9 .. 00			db "0=",0              
35ac				endm 
# End of macro CWHEAD
35ac			; | 0= ( u -- f ) Push true if u equals 0 | TEST NO DEBUG 
35ac				; TODO add floating point number detection 
35ac					;v5 FORTH_DSP_VALUE 
35ac					if DEBUG_FORTH_WORDS_KEY 
35ac						DMARK "0=." 
35ac f5				push af  
35ad 3a c1 35			ld a, (.dmark)  
35b0 32 77 fb			ld (debug_mark),a  
35b3 3a c2 35			ld a, (.dmark+1)  
35b6 32 78 fb			ld (debug_mark+1),a  
35b9 3a c3 35			ld a, (.dmark+2)  
35bc 32 79 fb			ld (debug_mark+2),a  
35bf 18 03			jr .pastdmark  
35c1 ..			.dmark: db "0=."  
35c4 f1			.pastdmark: pop af  
35c5			endm  
# End of macro DMARK
35c5						CALLMONITOR 
35c5 cd 97 16			call break_point_state  
35c8				endm  
# End of macro CALLMONITOR
35c8					endif 
35c8					FORTH_DSP 
35c8 cd e1 1d			call macro_forth_dsp 
35cb				endm 
# End of macro FORTH_DSP
35cb 7e					ld a,(hl)	; get type of value on TOS 
35cc fe 02				cp DS_TYPE_INUM  
35ce 28 00				jr z, .tz_inum 
35d0			 
35d0				if FORTH_ENABLE_FLOATMATH 
35d0					jr .tz_done 
35d0			 
35d0				endif 
35d0					 
35d0			 
35d0			.tz_inum: 
35d0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35d0 cd 1b 1e			call macro_dsp_valuehl 
35d3				endm 
# End of macro FORTH_DSP_VALUEHL
35d3			 
35d3			;		push hl 
35d3			 
35d3					; destroy value TOS 
35d3			 
35d3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35d3 cd d3 1e			call macro_forth_dsp_pop 
35d6				endm 
# End of macro FORTH_DSP_POP
35d6			 
35d6			;		pop hl 
35d6			 
35d6 3e 00				ld a,0 
35d8			 
35d8 bd					cp l 
35d9 20 08				jr nz, .tz_notzero 
35db			 
35db bc					cp h 
35dc			 
35dc 20 05				jr nz, .tz_notzero 
35de			 
35de			 
35de 21 01 00				ld hl, FORTH_TRUE 
35e1 18 03				jr .tz_done 
35e3			 
35e3 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
35e6			 
35e6					; push value back onto stack for another op etc 
35e6			 
35e6			.tz_done: 
35e6 cd 24 1c				call forth_push_numhl 
35e9			 
35e9					NEXTW 
35e9 c3 8d 1f			jp macro_next 
35ec				endm 
# End of macro NEXTW
35ec			.LESS: 
35ec				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
35ec 2f				db WORD_SYS_CORE+27             
35ed 55 36			dw .GT            
35ef 02				db 1 + 1 
35f0 .. 00			db "<",0              
35f2				endm 
# End of macro CWHEAD
35f2			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
35f2				; TODO add floating point number detection 
35f2					if DEBUG_FORTH_WORDS_KEY 
35f2						DMARK "LES" 
35f2 f5				push af  
35f3 3a 07 36			ld a, (.dmark)  
35f6 32 77 fb			ld (debug_mark),a  
35f9 3a 08 36			ld a, (.dmark+1)  
35fc 32 78 fb			ld (debug_mark+1),a  
35ff 3a 09 36			ld a, (.dmark+2)  
3602 32 79 fb			ld (debug_mark+2),a  
3605 18 03			jr .pastdmark  
3607 ..			.dmark: db "LES"  
360a f1			.pastdmark: pop af  
360b			endm  
# End of macro DMARK
360b						CALLMONITOR 
360b cd 97 16			call break_point_state  
360e				endm  
# End of macro CALLMONITOR
360e					endif 
360e					FORTH_DSP 
360e cd e1 1d			call macro_forth_dsp 
3611				endm 
# End of macro FORTH_DSP
3611					;v5 FORTH_DSP_VALUE 
3611 7e					ld a,(hl)	; get type of value on TOS 
3612 fe 02				cp DS_TYPE_INUM  
3614 28 00				jr z, .less_inum 
3616			 
3616				if FORTH_ENABLE_FLOATMATH 
3616					jr .less_done 
3616			 
3616				endif 
3616					 
3616			 
3616			.less_inum: 
3616					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3616 cd 1b 1e			call macro_dsp_valuehl 
3619				endm 
# End of macro FORTH_DSP_VALUEHL
3619			 
3619 e5					push hl  ; u2 
361a			 
361a					; destroy value TOS 
361a			 
361a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
361a cd d3 1e			call macro_forth_dsp_pop 
361d				endm 
# End of macro FORTH_DSP_POP
361d			 
361d			 
361d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
361d cd 1b 1e			call macro_dsp_valuehl 
3620				endm 
# End of macro FORTH_DSP_VALUEHL
3620			 
3620 e5					push hl    ; u1 
3621			 
3621					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3621 cd d3 1e			call macro_forth_dsp_pop 
3624				endm 
# End of macro FORTH_DSP_POP
3624			 
3624			 
3624 b7			 or a      ;clear carry flag 
3625 01 00 00		 ld bc, FORTH_FALSE 
3628 e1			  pop hl    ; u1 
3629 d1			  pop de    ; u2 
362a ed 52		  sbc hl,de 
362c 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
362e			 
362e 01 01 00		 ld bc, FORTH_TRUE 
3631			.lscont:  
3631 c5					push bc 
3632 e1					pop hl 
3633			 
3633					if DEBUG_FORTH_WORDS 
3633						DMARK "LT1" 
3633 f5				push af  
3634 3a 48 36			ld a, (.dmark)  
3637 32 77 fb			ld (debug_mark),a  
363a 3a 49 36			ld a, (.dmark+1)  
363d 32 78 fb			ld (debug_mark+1),a  
3640 3a 4a 36			ld a, (.dmark+2)  
3643 32 79 fb			ld (debug_mark+2),a  
3646 18 03			jr .pastdmark  
3648 ..			.dmark: db "LT1"  
364b f1			.pastdmark: pop af  
364c			endm  
# End of macro DMARK
364c						CALLMONITOR 
364c cd 97 16			call break_point_state  
364f				endm  
# End of macro CALLMONITOR
364f					endif 
364f cd 24 1c				call forth_push_numhl 
3652			 
3652					NEXTW 
3652 c3 8d 1f			jp macro_next 
3655				endm 
# End of macro NEXTW
3655			.GT: 
3655				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3655 30				db WORD_SYS_CORE+28             
3656 be 36			dw .EQUAL            
3658 02				db 1 + 1 
3659 .. 00			db ">",0              
365b				endm 
# End of macro CWHEAD
365b			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
365b				; TODO add floating point number detection 
365b					if DEBUG_FORTH_WORDS_KEY 
365b						DMARK "GRT" 
365b f5				push af  
365c 3a 70 36			ld a, (.dmark)  
365f 32 77 fb			ld (debug_mark),a  
3662 3a 71 36			ld a, (.dmark+1)  
3665 32 78 fb			ld (debug_mark+1),a  
3668 3a 72 36			ld a, (.dmark+2)  
366b 32 79 fb			ld (debug_mark+2),a  
366e 18 03			jr .pastdmark  
3670 ..			.dmark: db "GRT"  
3673 f1			.pastdmark: pop af  
3674			endm  
# End of macro DMARK
3674						CALLMONITOR 
3674 cd 97 16			call break_point_state  
3677				endm  
# End of macro CALLMONITOR
3677					endif 
3677					FORTH_DSP 
3677 cd e1 1d			call macro_forth_dsp 
367a				endm 
# End of macro FORTH_DSP
367a					;FORTH_DSP_VALUE 
367a 7e					ld a,(hl)	; get type of value on TOS 
367b fe 02				cp DS_TYPE_INUM  
367d 28 00				jr z, .gt_inum 
367f			 
367f				if FORTH_ENABLE_FLOATMATH 
367f					jr .gt_done 
367f			 
367f				endif 
367f					 
367f			 
367f			.gt_inum: 
367f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
367f cd 1b 1e			call macro_dsp_valuehl 
3682				endm 
# End of macro FORTH_DSP_VALUEHL
3682			 
3682 e5					push hl  ; u2 
3683			 
3683					; destroy value TOS 
3683			 
3683					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3683 cd d3 1e			call macro_forth_dsp_pop 
3686				endm 
# End of macro FORTH_DSP_POP
3686			 
3686			 
3686					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3686 cd 1b 1e			call macro_dsp_valuehl 
3689				endm 
# End of macro FORTH_DSP_VALUEHL
3689			 
3689 e5					push hl    ; u1 
368a			 
368a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
368a cd d3 1e			call macro_forth_dsp_pop 
368d				endm 
# End of macro FORTH_DSP_POP
368d			 
368d			 
368d b7			 or a      ;clear carry flag 
368e 01 00 00		 ld bc, FORTH_FALSE 
3691 e1			  pop hl    ; u1 
3692 d1			  pop de    ; u2 
3693 ed 52		  sbc hl,de 
3695 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3697			 
3697 01 01 00		 ld bc, FORTH_TRUE 
369a			.gtcont:  
369a c5					push bc 
369b e1					pop hl 
369c			 
369c					if DEBUG_FORTH_WORDS 
369c						DMARK "GT1" 
369c f5				push af  
369d 3a b1 36			ld a, (.dmark)  
36a0 32 77 fb			ld (debug_mark),a  
36a3 3a b2 36			ld a, (.dmark+1)  
36a6 32 78 fb			ld (debug_mark+1),a  
36a9 3a b3 36			ld a, (.dmark+2)  
36ac 32 79 fb			ld (debug_mark+2),a  
36af 18 03			jr .pastdmark  
36b1 ..			.dmark: db "GT1"  
36b4 f1			.pastdmark: pop af  
36b5			endm  
# End of macro DMARK
36b5						CALLMONITOR 
36b5 cd 97 16			call break_point_state  
36b8				endm  
# End of macro CALLMONITOR
36b8					endif 
36b8 cd 24 1c				call forth_push_numhl 
36bb			 
36bb					NEXTW 
36bb c3 8d 1f			jp macro_next 
36be				endm 
# End of macro NEXTW
36be			.EQUAL: 
36be				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
36be 31				db WORD_SYS_CORE+29             
36bf 29 37			dw .ENDLOGIC            
36c1 02				db 1 + 1 
36c2 .. 00			db "=",0              
36c4				endm 
# End of macro CWHEAD
36c4			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
36c4				; TODO add floating point number detection 
36c4					if DEBUG_FORTH_WORDS_KEY 
36c4						DMARK "EQ." 
36c4 f5				push af  
36c5 3a d9 36			ld a, (.dmark)  
36c8 32 77 fb			ld (debug_mark),a  
36cb 3a da 36			ld a, (.dmark+1)  
36ce 32 78 fb			ld (debug_mark+1),a  
36d1 3a db 36			ld a, (.dmark+2)  
36d4 32 79 fb			ld (debug_mark+2),a  
36d7 18 03			jr .pastdmark  
36d9 ..			.dmark: db "EQ."  
36dc f1			.pastdmark: pop af  
36dd			endm  
# End of macro DMARK
36dd						CALLMONITOR 
36dd cd 97 16			call break_point_state  
36e0				endm  
# End of macro CALLMONITOR
36e0					endif 
36e0					FORTH_DSP 
36e0 cd e1 1d			call macro_forth_dsp 
36e3				endm 
# End of macro FORTH_DSP
36e3					;v5 FORTH_DSP_VALUE 
36e3 7e					ld a,(hl)	; get type of value on TOS 
36e4 fe 02				cp DS_TYPE_INUM  
36e6 28 00				jr z, .eq_inum 
36e8			 
36e8				if FORTH_ENABLE_FLOATMATH 
36e8					jr .eq_done 
36e8			 
36e8				endif 
36e8					 
36e8			 
36e8			.eq_inum: 
36e8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36e8 cd 1b 1e			call macro_dsp_valuehl 
36eb				endm 
# End of macro FORTH_DSP_VALUEHL
36eb			 
36eb e5					push hl 
36ec			 
36ec					; destroy value TOS 
36ec			 
36ec					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36ec cd d3 1e			call macro_forth_dsp_pop 
36ef				endm 
# End of macro FORTH_DSP_POP
36ef			 
36ef			 
36ef					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36ef cd 1b 1e			call macro_dsp_valuehl 
36f2				endm 
# End of macro FORTH_DSP_VALUEHL
36f2			 
36f2					; one value on hl get other one back 
36f2			 
36f2 e5					push hl 
36f3			 
36f3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36f3 cd d3 1e			call macro_forth_dsp_pop 
36f6				endm 
# End of macro FORTH_DSP_POP
36f6			 
36f6 0e 00				ld c, FORTH_FALSE 
36f8			 
36f8 e1					pop hl 
36f9 d1					pop de 
36fa			 
36fa 7b					ld a, e 
36fb bd					cp l 
36fc			 
36fc 20 06				jr nz, .eq_done 
36fe			 
36fe 7a					ld a, d 
36ff bc					cp h 
3700			 
3700 20 02				jr nz, .eq_done 
3702			 
3702 0e 01				ld c, FORTH_TRUE 
3704					 
3704			 
3704			 
3704			.eq_done: 
3704			 
3704					; TODO push value back onto stack for another op etc 
3704			 
3704 26 00				ld h, 0 
3706 69					ld l, c 
3707					if DEBUG_FORTH_WORDS 
3707						DMARK "EQ1" 
3707 f5				push af  
3708 3a 1c 37			ld a, (.dmark)  
370b 32 77 fb			ld (debug_mark),a  
370e 3a 1d 37			ld a, (.dmark+1)  
3711 32 78 fb			ld (debug_mark+1),a  
3714 3a 1e 37			ld a, (.dmark+2)  
3717 32 79 fb			ld (debug_mark+2),a  
371a 18 03			jr .pastdmark  
371c ..			.dmark: db "EQ1"  
371f f1			.pastdmark: pop af  
3720			endm  
# End of macro DMARK
3720						CALLMONITOR 
3720 cd 97 16			call break_point_state  
3723				endm  
# End of macro CALLMONITOR
3723					endif 
3723 cd 24 1c				call forth_push_numhl 
3726			 
3726					NEXTW 
3726 c3 8d 1f			jp macro_next 
3729				endm 
# End of macro NEXTW
3729			 
3729			 
3729			.ENDLOGIC: 
3729			; eof 
3729			 
3729			 
# End of file forth_words_logic.asm
3729			include "forth_words_maths.asm" 
3729			 
3729			; | ## Maths Words 
3729			 
3729			.PLUS:	 
3729				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3729 15				db WORD_SYS_CORE+1             
372a 6b 37			dw .NEG            
372c 02				db 1 + 1 
372d .. 00			db "+",0              
372f				endm 
# End of macro CWHEAD
372f			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
372f					if DEBUG_FORTH_WORDS_KEY 
372f						DMARK "PLU" 
372f f5				push af  
3730 3a 44 37			ld a, (.dmark)  
3733 32 77 fb			ld (debug_mark),a  
3736 3a 45 37			ld a, (.dmark+1)  
3739 32 78 fb			ld (debug_mark+1),a  
373c 3a 46 37			ld a, (.dmark+2)  
373f 32 79 fb			ld (debug_mark+2),a  
3742 18 03			jr .pastdmark  
3744 ..			.dmark: db "PLU"  
3747 f1			.pastdmark: pop af  
3748			endm  
# End of macro DMARK
3748						CALLMONITOR 
3748 cd 97 16			call break_point_state  
374b				endm  
# End of macro CALLMONITOR
374b					endif 
374b					; add top two values and push back result 
374b			 
374b					;for v5 FORTH_DSP_VALUE 
374b					FORTH_DSP 
374b cd e1 1d			call macro_forth_dsp 
374e				endm 
# End of macro FORTH_DSP
374e 7e					ld a,(hl)	; get type of value on TOS 
374f fe 02				cp DS_TYPE_INUM  
3751 28 03				jr z, .dot_inum 
3753			 
3753					NEXTW 
3753 c3 8d 1f			jp macro_next 
3756				endm 
# End of macro NEXTW
3756			 
3756			; float maths 
3756			 
3756				if FORTH_ENABLE_FLOATMATH 
3756						inc hl      ; now at start of numeric as string 
3756			 
3756					if DEBUG_FORTH_MATHS 
3756						DMARK "ADD" 
3756				CALLMONITOR 
3756					endif 
3756			 
3756					;ld ix, hl 
3756					call CON 
3756			 
3756			 
3756					push hl 
3756					 
3756					 
3756			 
3756						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3756			 
3756					; get next number 
3756			 
3756						FORTH_DSP_VALUE 
3756			 
3756						inc hl      ; now at start of numeric as string 
3756			 
3756					;ld ix, hl 
3756					call CON 
3756			 
3756					push hl 
3756			 
3756			 
3756						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3756			 
3756						; TODO do add 
3756			 
3756						call IADD 
3756			 
3756						; TODO get result back as ascii 
3756			 
3756						; TODO push result  
3756			 
3756			 
3756			 
3756						jr .dot_done 
3756				endif 
3756			 
3756			.dot_inum: 
3756			 
3756			 
3756					if DEBUG_FORTH_DOT 
3756						DMARK "+IT" 
3756				CALLMONITOR 
3756					endif 
3756			 
3756					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3756 cd 1b 1e			call macro_dsp_valuehl 
3759				endm 
# End of macro FORTH_DSP_VALUEHL
3759			 
3759				; TODO add floating point number detection 
3759			 
3759 e5					push hl 
375a			 
375a					; destroy value TOS 
375a			 
375a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
375a cd d3 1e			call macro_forth_dsp_pop 
375d				endm 
# End of macro FORTH_DSP_POP
375d			 
375d			 
375d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
375d cd 1b 1e			call macro_dsp_valuehl 
3760				endm 
# End of macro FORTH_DSP_VALUEHL
3760			 
3760					; one value on hl get other one back 
3760			 
3760 d1					pop de 
3761			 
3761					; do the add 
3761			 
3761 19					add hl,de 
3762			 
3762					; save it 
3762			 
3762			;		push hl	 
3762			 
3762					; 
3762			 
3762					; destroy value TOS 
3762			 
3762					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3762 cd d3 1e			call macro_forth_dsp_pop 
3765				endm 
# End of macro FORTH_DSP_POP
3765			 
3765					; TODO push value back onto stack for another op etc 
3765			 
3765			;		pop hl 
3765			 
3765			.dot_done: 
3765 cd 24 1c				call forth_push_numhl 
3768			 
3768					NEXTW 
3768 c3 8d 1f			jp macro_next 
376b				endm 
# End of macro NEXTW
376b			.NEG: 
376b			 
376b				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
376b 17				db WORD_SYS_CORE+3             
376c ae 37			dw .DIV            
376e 02				db 1 + 1 
376f .. 00			db "-",0              
3771				endm 
# End of macro CWHEAD
3771			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3771					if DEBUG_FORTH_WORDS_KEY 
3771						DMARK "SUB" 
3771 f5				push af  
3772 3a 86 37			ld a, (.dmark)  
3775 32 77 fb			ld (debug_mark),a  
3778 3a 87 37			ld a, (.dmark+1)  
377b 32 78 fb			ld (debug_mark+1),a  
377e 3a 88 37			ld a, (.dmark+2)  
3781 32 79 fb			ld (debug_mark+2),a  
3784 18 03			jr .pastdmark  
3786 ..			.dmark: db "SUB"  
3789 f1			.pastdmark: pop af  
378a			endm  
# End of macro DMARK
378a						CALLMONITOR 
378a cd 97 16			call break_point_state  
378d				endm  
# End of macro CALLMONITOR
378d					endif 
378d			 
378d			 
378d				; TODO add floating point number detection 
378d					; v5 FORTH_DSP_VALUE 
378d					FORTH_DSP 
378d cd e1 1d			call macro_forth_dsp 
3790				endm 
# End of macro FORTH_DSP
3790 7e					ld a,(hl)	; get type of value on TOS 
3791 fe 02				cp DS_TYPE_INUM  
3793 28 03				jr z, .neg_inum 
3795			 
3795					NEXTW 
3795 c3 8d 1f			jp macro_next 
3798				endm 
# End of macro NEXTW
3798			 
3798			; float maths 
3798			 
3798				if FORTH_ENABLE_FLOATMATH 
3798					jr .neg_done 
3798			 
3798				endif 
3798					 
3798			 
3798			.neg_inum: 
3798					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3798 cd 1b 1e			call macro_dsp_valuehl 
379b				endm 
# End of macro FORTH_DSP_VALUEHL
379b			 
379b e5					push hl 
379c			 
379c					; destroy value TOS 
379c			 
379c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
379c cd d3 1e			call macro_forth_dsp_pop 
379f				endm 
# End of macro FORTH_DSP_POP
379f			 
379f			 
379f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
379f cd 1b 1e			call macro_dsp_valuehl 
37a2				endm 
# End of macro FORTH_DSP_VALUEHL
37a2			 
37a2					; one value on hl get other one back 
37a2			 
37a2 d1					pop de 
37a3			 
37a3					; do the sub 
37a3			;		ex de, hl 
37a3			 
37a3 ed 52				sbc hl,de 
37a5			 
37a5					; save it 
37a5			 
37a5			;		push hl	 
37a5			 
37a5					; 
37a5			 
37a5					; destroy value TOS 
37a5			 
37a5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37a5 cd d3 1e			call macro_forth_dsp_pop 
37a8				endm 
# End of macro FORTH_DSP_POP
37a8			 
37a8					; TODO push value back onto stack for another op etc 
37a8			 
37a8			;		pop hl 
37a8			 
37a8 cd 24 1c				call forth_push_numhl 
37ab			.neg_done: 
37ab			 
37ab					NEXTW 
37ab c3 8d 1f			jp macro_next 
37ae				endm 
# End of macro NEXTW
37ae			.DIV: 
37ae				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
37ae 18				db WORD_SYS_CORE+4             
37af fb 37			dw .MUL            
37b1 02				db 1 + 1 
37b2 .. 00			db "/",0              
37b4				endm 
# End of macro CWHEAD
37b4			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
37b4					if DEBUG_FORTH_WORDS_KEY 
37b4						DMARK "DIV" 
37b4 f5				push af  
37b5 3a c9 37			ld a, (.dmark)  
37b8 32 77 fb			ld (debug_mark),a  
37bb 3a ca 37			ld a, (.dmark+1)  
37be 32 78 fb			ld (debug_mark+1),a  
37c1 3a cb 37			ld a, (.dmark+2)  
37c4 32 79 fb			ld (debug_mark+2),a  
37c7 18 03			jr .pastdmark  
37c9 ..			.dmark: db "DIV"  
37cc f1			.pastdmark: pop af  
37cd			endm  
# End of macro DMARK
37cd						CALLMONITOR 
37cd cd 97 16			call break_point_state  
37d0				endm  
# End of macro CALLMONITOR
37d0					endif 
37d0				; TODO add floating point number detection 
37d0					; v5 FORTH_DSP_VALUE 
37d0					FORTH_DSP 
37d0 cd e1 1d			call macro_forth_dsp 
37d3				endm 
# End of macro FORTH_DSP
37d3 7e					ld a,(hl)	; get type of value on TOS 
37d4 fe 02				cp DS_TYPE_INUM  
37d6 28 03				jr z, .div_inum 
37d8			 
37d8				if FORTH_ENABLE_FLOATMATH 
37d8					jr .div_done 
37d8			 
37d8				endif 
37d8					NEXTW 
37d8 c3 8d 1f			jp macro_next 
37db				endm 
# End of macro NEXTW
37db			.div_inum: 
37db			 
37db					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37db cd 1b 1e			call macro_dsp_valuehl 
37de				endm 
# End of macro FORTH_DSP_VALUEHL
37de			 
37de e5					push hl    ; to go to bc 
37df			 
37df					; destroy value TOS 
37df			 
37df					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37df cd d3 1e			call macro_forth_dsp_pop 
37e2				endm 
# End of macro FORTH_DSP_POP
37e2			 
37e2			 
37e2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37e2 cd 1b 1e			call macro_dsp_valuehl 
37e5				endm 
# End of macro FORTH_DSP_VALUEHL
37e5			 
37e5					; hl to go to de 
37e5			 
37e5 e5					push hl 
37e6			 
37e6 c1					pop bc 
37e7 d1					pop de		 
37e8			 
37e8			 
37e8					if DEBUG_FORTH_MATHS 
37e8						DMARK "DIV" 
37e8				CALLMONITOR 
37e8					endif 
37e8					; one value on hl but move to a get other one back 
37e8			 
37e8			        
37e8 cd 66 0c			call Div16 
37eb			 
37eb			;	push af	 
37eb e5				push hl 
37ec c5				push bc 
37ed			 
37ed					if DEBUG_FORTH_MATHS 
37ed						DMARK "DI1" 
37ed				CALLMONITOR 
37ed					endif 
37ed			 
37ed					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37ed cd d3 1e			call macro_forth_dsp_pop 
37f0				endm 
# End of macro FORTH_DSP_POP
37f0			 
37f0			 
37f0			 
37f0 e1					pop hl    ; result 
37f1			 
37f1 cd 24 1c				call forth_push_numhl 
37f4			 
37f4 e1					pop hl    ; reminder 
37f5			;		ld h,0 
37f5			;		ld l,d 
37f5			 
37f5 cd 24 1c				call forth_push_numhl 
37f8			.div_done: 
37f8					NEXTW 
37f8 c3 8d 1f			jp macro_next 
37fb				endm 
# End of macro NEXTW
37fb			.MUL: 
37fb				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
37fb 19				db WORD_SYS_CORE+5             
37fc 40 38			dw .MIN            
37fe 02				db 1 + 1 
37ff .. 00			db "*",0              
3801				endm 
# End of macro CWHEAD
3801			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3801				; TODO add floating point number detection 
3801					if DEBUG_FORTH_WORDS_KEY 
3801						DMARK "MUL" 
3801 f5				push af  
3802 3a 16 38			ld a, (.dmark)  
3805 32 77 fb			ld (debug_mark),a  
3808 3a 17 38			ld a, (.dmark+1)  
380b 32 78 fb			ld (debug_mark+1),a  
380e 3a 18 38			ld a, (.dmark+2)  
3811 32 79 fb			ld (debug_mark+2),a  
3814 18 03			jr .pastdmark  
3816 ..			.dmark: db "MUL"  
3819 f1			.pastdmark: pop af  
381a			endm  
# End of macro DMARK
381a						CALLMONITOR 
381a cd 97 16			call break_point_state  
381d				endm  
# End of macro CALLMONITOR
381d					endif 
381d					FORTH_DSP 
381d cd e1 1d			call macro_forth_dsp 
3820				endm 
# End of macro FORTH_DSP
3820					; v5 FORTH_DSP_VALUE 
3820 7e					ld a,(hl)	; get type of value on TOS 
3821 fe 02				cp DS_TYPE_INUM  
3823 28 03				jr z, .mul_inum 
3825			 
3825				if FORTH_ENABLE_FLOATMATH 
3825					jr .mul_done 
3825			 
3825				endif 
3825			 
3825					NEXTW 
3825 c3 8d 1f			jp macro_next 
3828				endm 
# End of macro NEXTW
3828			.mul_inum:	 
3828			 
3828					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3828 cd 1b 1e			call macro_dsp_valuehl 
382b				endm 
# End of macro FORTH_DSP_VALUEHL
382b			 
382b e5					push hl 
382c			 
382c					; destroy value TOS 
382c			 
382c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
382c cd d3 1e			call macro_forth_dsp_pop 
382f				endm 
# End of macro FORTH_DSP_POP
382f			 
382f			 
382f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
382f cd 1b 1e			call macro_dsp_valuehl 
3832				endm 
# End of macro FORTH_DSP_VALUEHL
3832			 
3832					; one value on hl but move to a get other one back 
3832			 
3832 7d					ld a, l 
3833			 
3833 d1					pop de 
3834			 
3834					; do the mull 
3834			;		ex de, hl 
3834			 
3834 cd 8c 0c				call Mult16 
3837					; save it 
3837			 
3837			;		push hl	 
3837			 
3837					; 
3837			 
3837					; destroy value TOS 
3837			 
3837					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3837 cd d3 1e			call macro_forth_dsp_pop 
383a				endm 
# End of macro FORTH_DSP_POP
383a			 
383a					; TODO push value back onto stack for another op etc 
383a			 
383a			;		pop hl 
383a			 
383a cd 24 1c				call forth_push_numhl 
383d			 
383d			.mul_done: 
383d					NEXTW 
383d c3 8d 1f			jp macro_next 
3840				endm 
# End of macro NEXTW
3840			 
3840			 
3840			 
3840			 
3840			.MIN: 
3840				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3840 49				db WORD_SYS_CORE+53             
3841 c1 38			dw .MAX            
3843 04				db 3 + 1 
3844 .. 00			db "MIN",0              
3848				endm 
# End of macro CWHEAD
3848			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3848					if DEBUG_FORTH_WORDS_KEY 
3848						DMARK "MIN" 
3848 f5				push af  
3849 3a 5d 38			ld a, (.dmark)  
384c 32 77 fb			ld (debug_mark),a  
384f 3a 5e 38			ld a, (.dmark+1)  
3852 32 78 fb			ld (debug_mark+1),a  
3855 3a 5f 38			ld a, (.dmark+2)  
3858 32 79 fb			ld (debug_mark+2),a  
385b 18 03			jr .pastdmark  
385d ..			.dmark: db "MIN"  
3860 f1			.pastdmark: pop af  
3861			endm  
# End of macro DMARK
3861						CALLMONITOR 
3861 cd 97 16			call break_point_state  
3864				endm  
# End of macro CALLMONITOR
3864					endif 
3864					; get u2 
3864			 
3864					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3864 cd 1b 1e			call macro_dsp_valuehl 
3867				endm 
# End of macro FORTH_DSP_VALUEHL
3867			 
3867 e5					push hl   ; u2 
3868			 
3868					; destroy value TOS 
3868			 
3868					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3868 cd d3 1e			call macro_forth_dsp_pop 
386b				endm 
# End of macro FORTH_DSP_POP
386b			 
386b					; get u1 
386b			 
386b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
386b cd 1b 1e			call macro_dsp_valuehl 
386e				endm 
# End of macro FORTH_DSP_VALUEHL
386e			 
386e e5					push hl  ; u1 
386f			 
386f					; destroy value TOS 
386f			 
386f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
386f cd d3 1e			call macro_forth_dsp_pop 
3872				endm 
# End of macro FORTH_DSP_POP
3872			 
3872 b7			 or a      ;clear carry flag 
3873 e1			  pop hl    ; u1 
3874 d1			  pop de    ; u2 
3875 e5				push hl   ; saved in case hl is lowest 
3876 ed 52		  sbc hl,de 
3878 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
387a			 
387a e1				pop hl 
387b					if DEBUG_FORTH_WORDS 
387b						DMARK "MIN" 
387b f5				push af  
387c 3a 90 38			ld a, (.dmark)  
387f 32 77 fb			ld (debug_mark),a  
3882 3a 91 38			ld a, (.dmark+1)  
3885 32 78 fb			ld (debug_mark+1),a  
3888 3a 92 38			ld a, (.dmark+2)  
388b 32 79 fb			ld (debug_mark+2),a  
388e 18 03			jr .pastdmark  
3890 ..			.dmark: db "MIN"  
3893 f1			.pastdmark: pop af  
3894			endm  
# End of macro DMARK
3894						CALLMONITOR 
3894 cd 97 16			call break_point_state  
3897				endm  
# End of macro CALLMONITOR
3897					endif 
3897 cd 24 1c				call forth_push_numhl 
389a			 
389a				       NEXTW 
389a c3 8d 1f			jp macro_next 
389d				endm 
# End of macro NEXTW
389d			 
389d			.mincont:  
389d c1				pop bc   ; tidy up 
389e eb				ex de , hl  
389f					if DEBUG_FORTH_WORDS 
389f						DMARK "MI1" 
389f f5				push af  
38a0 3a b4 38			ld a, (.dmark)  
38a3 32 77 fb			ld (debug_mark),a  
38a6 3a b5 38			ld a, (.dmark+1)  
38a9 32 78 fb			ld (debug_mark+1),a  
38ac 3a b6 38			ld a, (.dmark+2)  
38af 32 79 fb			ld (debug_mark+2),a  
38b2 18 03			jr .pastdmark  
38b4 ..			.dmark: db "MI1"  
38b7 f1			.pastdmark: pop af  
38b8			endm  
# End of macro DMARK
38b8						CALLMONITOR 
38b8 cd 97 16			call break_point_state  
38bb				endm  
# End of macro CALLMONITOR
38bb					endif 
38bb cd 24 1c				call forth_push_numhl 
38be			 
38be				       NEXTW 
38be c3 8d 1f			jp macro_next 
38c1				endm 
# End of macro NEXTW
38c1			.MAX: 
38c1				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
38c1 4a				db WORD_SYS_CORE+54             
38c2 42 39			dw .RND16            
38c4 04				db 3 + 1 
38c5 .. 00			db "MAX",0              
38c9				endm 
# End of macro CWHEAD
38c9			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
38c9					if DEBUG_FORTH_WORDS_KEY 
38c9						DMARK "MAX" 
38c9 f5				push af  
38ca 3a de 38			ld a, (.dmark)  
38cd 32 77 fb			ld (debug_mark),a  
38d0 3a df 38			ld a, (.dmark+1)  
38d3 32 78 fb			ld (debug_mark+1),a  
38d6 3a e0 38			ld a, (.dmark+2)  
38d9 32 79 fb			ld (debug_mark+2),a  
38dc 18 03			jr .pastdmark  
38de ..			.dmark: db "MAX"  
38e1 f1			.pastdmark: pop af  
38e2			endm  
# End of macro DMARK
38e2						CALLMONITOR 
38e2 cd 97 16			call break_point_state  
38e5				endm  
# End of macro CALLMONITOR
38e5					endif 
38e5					; get u2 
38e5			 
38e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38e5 cd 1b 1e			call macro_dsp_valuehl 
38e8				endm 
# End of macro FORTH_DSP_VALUEHL
38e8			 
38e8 e5					push hl   ; u2 
38e9			 
38e9					; destroy value TOS 
38e9			 
38e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38e9 cd d3 1e			call macro_forth_dsp_pop 
38ec				endm 
# End of macro FORTH_DSP_POP
38ec			 
38ec					; get u1 
38ec			 
38ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38ec cd 1b 1e			call macro_dsp_valuehl 
38ef				endm 
# End of macro FORTH_DSP_VALUEHL
38ef			 
38ef e5					push hl  ; u1 
38f0			 
38f0					; destroy value TOS 
38f0			 
38f0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38f0 cd d3 1e			call macro_forth_dsp_pop 
38f3				endm 
# End of macro FORTH_DSP_POP
38f3			 
38f3 b7			 or a      ;clear carry flag 
38f4 e1			  pop hl    ; u1 
38f5 d1			  pop de    ; u2 
38f6 e5				push hl   ; saved in case hl is lowest 
38f7 ed 52		  sbc hl,de 
38f9 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
38fb			 
38fb e1				pop hl 
38fc					if DEBUG_FORTH_WORDS 
38fc						DMARK "MAX" 
38fc f5				push af  
38fd 3a 11 39			ld a, (.dmark)  
3900 32 77 fb			ld (debug_mark),a  
3903 3a 12 39			ld a, (.dmark+1)  
3906 32 78 fb			ld (debug_mark+1),a  
3909 3a 13 39			ld a, (.dmark+2)  
390c 32 79 fb			ld (debug_mark+2),a  
390f 18 03			jr .pastdmark  
3911 ..			.dmark: db "MAX"  
3914 f1			.pastdmark: pop af  
3915			endm  
# End of macro DMARK
3915						CALLMONITOR 
3915 cd 97 16			call break_point_state  
3918				endm  
# End of macro CALLMONITOR
3918					endif 
3918 cd 24 1c				call forth_push_numhl 
391b			 
391b				       NEXTW 
391b c3 8d 1f			jp macro_next 
391e				endm 
# End of macro NEXTW
391e			 
391e			.maxcont:  
391e c1				pop bc   ; tidy up 
391f eb				ex de , hl  
3920					if DEBUG_FORTH_WORDS 
3920						DMARK "MA1" 
3920 f5				push af  
3921 3a 35 39			ld a, (.dmark)  
3924 32 77 fb			ld (debug_mark),a  
3927 3a 36 39			ld a, (.dmark+1)  
392a 32 78 fb			ld (debug_mark+1),a  
392d 3a 37 39			ld a, (.dmark+2)  
3930 32 79 fb			ld (debug_mark+2),a  
3933 18 03			jr .pastdmark  
3935 ..			.dmark: db "MA1"  
3938 f1			.pastdmark: pop af  
3939			endm  
# End of macro DMARK
3939						CALLMONITOR 
3939 cd 97 16			call break_point_state  
393c				endm  
# End of macro CALLMONITOR
393c					endif 
393c cd 24 1c				call forth_push_numhl 
393f				       NEXTW 
393f c3 8d 1f			jp macro_next 
3942				endm 
# End of macro NEXTW
3942			 
3942			.RND16: 
3942				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3942 4e				db WORD_SYS_CORE+58             
3943 71 39			dw .RND8            
3945 06				db 5 + 1 
3946 .. 00			db "RND16",0              
394c				endm 
# End of macro CWHEAD
394c			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
394c					if DEBUG_FORTH_WORDS_KEY 
394c						DMARK "R16" 
394c f5				push af  
394d 3a 61 39			ld a, (.dmark)  
3950 32 77 fb			ld (debug_mark),a  
3953 3a 62 39			ld a, (.dmark+1)  
3956 32 78 fb			ld (debug_mark+1),a  
3959 3a 63 39			ld a, (.dmark+2)  
395c 32 79 fb			ld (debug_mark+2),a  
395f 18 03			jr .pastdmark  
3961 ..			.dmark: db "R16"  
3964 f1			.pastdmark: pop af  
3965			endm  
# End of macro DMARK
3965						CALLMONITOR 
3965 cd 97 16			call break_point_state  
3968				endm  
# End of macro CALLMONITOR
3968					endif 
3968 cd 30 0c				call prng16  
396b cd 24 1c				call forth_push_numhl 
396e				       NEXTW 
396e c3 8d 1f			jp macro_next 
3971				endm 
# End of macro NEXTW
3971			.RND8: 
3971				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3971 60				db WORD_SYS_CORE+76             
3972 a6 39			dw .RND            
3974 05				db 4 + 1 
3975 .. 00			db "RND8",0              
397a				endm 
# End of macro CWHEAD
397a			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
397a					if DEBUG_FORTH_WORDS_KEY 
397a						DMARK "RN8" 
397a f5				push af  
397b 3a 8f 39			ld a, (.dmark)  
397e 32 77 fb			ld (debug_mark),a  
3981 3a 90 39			ld a, (.dmark+1)  
3984 32 78 fb			ld (debug_mark+1),a  
3987 3a 91 39			ld a, (.dmark+2)  
398a 32 79 fb			ld (debug_mark+2),a  
398d 18 03			jr .pastdmark  
398f ..			.dmark: db "RN8"  
3992 f1			.pastdmark: pop af  
3993			endm  
# End of macro DMARK
3993						CALLMONITOR 
3993 cd 97 16			call break_point_state  
3996				endm  
# End of macro CALLMONITOR
3996					endif 
3996 2a b8 f8				ld hl,(xrandc) 
3999 23					inc hl 
399a cd 4a 0c				call xrnd 
399d 6f					ld l,a	 
399e 26 00				ld h,0 
39a0 cd 24 1c				call forth_push_numhl 
39a3				       NEXTW 
39a3 c3 8d 1f			jp macro_next 
39a6				endm 
# End of macro NEXTW
39a6			.RND: 
39a6				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
39a6 60				db WORD_SYS_CORE+76             
39a7 ac 3a			dw .ENDMATHS            
39a9 04				db 3 + 1 
39aa .. 00			db "RND",0              
39ae				endm 
# End of macro CWHEAD
39ae			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
39ae			 
39ae					if DEBUG_FORTH_WORDS_KEY 
39ae						DMARK "RND" 
39ae f5				push af  
39af 3a c3 39			ld a, (.dmark)  
39b2 32 77 fb			ld (debug_mark),a  
39b5 3a c4 39			ld a, (.dmark+1)  
39b8 32 78 fb			ld (debug_mark+1),a  
39bb 3a c5 39			ld a, (.dmark+2)  
39be 32 79 fb			ld (debug_mark+2),a  
39c1 18 03			jr .pastdmark  
39c3 ..			.dmark: db "RND"  
39c6 f1			.pastdmark: pop af  
39c7			endm  
# End of macro DMARK
39c7						CALLMONITOR 
39c7 cd 97 16			call break_point_state  
39ca				endm  
# End of macro CALLMONITOR
39ca					endif 
39ca					 
39ca					FORTH_DSP_VALUEHL    ; upper range 
39ca cd 1b 1e			call macro_dsp_valuehl 
39cd				endm 
# End of macro FORTH_DSP_VALUEHL
39cd			 
39cd 22 bc f8				ld (LFSRSeed), hl	 
39d0			 
39d0					if DEBUG_FORTH_WORDS 
39d0						DMARK "RN1" 
39d0 f5				push af  
39d1 3a e5 39			ld a, (.dmark)  
39d4 32 77 fb			ld (debug_mark),a  
39d7 3a e6 39			ld a, (.dmark+1)  
39da 32 78 fb			ld (debug_mark+1),a  
39dd 3a e7 39			ld a, (.dmark+2)  
39e0 32 79 fb			ld (debug_mark+2),a  
39e3 18 03			jr .pastdmark  
39e5 ..			.dmark: db "RN1"  
39e8 f1			.pastdmark: pop af  
39e9			endm  
# End of macro DMARK
39e9						CALLMONITOR 
39e9 cd 97 16			call break_point_state  
39ec				endm  
# End of macro CALLMONITOR
39ec					endif 
39ec					FORTH_DSP_POP 
39ec cd d3 1e			call macro_forth_dsp_pop 
39ef				endm 
# End of macro FORTH_DSP_POP
39ef			 
39ef					FORTH_DSP_VALUEHL    ; low range 
39ef cd 1b 1e			call macro_dsp_valuehl 
39f2				endm 
# End of macro FORTH_DSP_VALUEHL
39f2			 
39f2					if DEBUG_FORTH_WORDS 
39f2						DMARK "RN2" 
39f2 f5				push af  
39f3 3a 07 3a			ld a, (.dmark)  
39f6 32 77 fb			ld (debug_mark),a  
39f9 3a 08 3a			ld a, (.dmark+1)  
39fc 32 78 fb			ld (debug_mark+1),a  
39ff 3a 09 3a			ld a, (.dmark+2)  
3a02 32 79 fb			ld (debug_mark+2),a  
3a05 18 03			jr .pastdmark  
3a07 ..			.dmark: db "RN2"  
3a0a f1			.pastdmark: pop af  
3a0b			endm  
# End of macro DMARK
3a0b						CALLMONITOR 
3a0b cd 97 16			call break_point_state  
3a0e				endm  
# End of macro CALLMONITOR
3a0e					endif 
3a0e 22 be f8				ld (LFSRSeed+2), hl 
3a11			 
3a11					FORTH_DSP_POP 
3a11 cd d3 1e			call macro_forth_dsp_pop 
3a14				endm 
# End of macro FORTH_DSP_POP
3a14			 
3a14 e5					push hl 
3a15			 
3a15 e1			.inrange:	pop hl 
3a16 cd 30 0c				call prng16  
3a19					if DEBUG_FORTH_WORDS 
3a19						DMARK "RN3" 
3a19 f5				push af  
3a1a 3a 2e 3a			ld a, (.dmark)  
3a1d 32 77 fb			ld (debug_mark),a  
3a20 3a 2f 3a			ld a, (.dmark+1)  
3a23 32 78 fb			ld (debug_mark+1),a  
3a26 3a 30 3a			ld a, (.dmark+2)  
3a29 32 79 fb			ld (debug_mark+2),a  
3a2c 18 03			jr .pastdmark  
3a2e ..			.dmark: db "RN3"  
3a31 f1			.pastdmark: pop af  
3a32			endm  
# End of macro DMARK
3a32						CALLMONITOR 
3a32 cd 97 16			call break_point_state  
3a35				endm  
# End of macro CALLMONITOR
3a35					endif 
3a35					 
3a35					; if the range is 8bit knock out the high byte 
3a35			 
3a35 ed 5b bc f8			ld de, (LFSRSeed)     ; check high level 
3a39			 
3a39 3e 00				ld a, 0 
3a3b ba					cp d  
3a3c 20 1e				jr nz, .hirange 
3a3e 26 00				ld h, 0   ; knock it down to 8bit 
3a40			 
3a40					if DEBUG_FORTH_WORDS 
3a40						DMARK "RNk" 
3a40 f5				push af  
3a41 3a 55 3a			ld a, (.dmark)  
3a44 32 77 fb			ld (debug_mark),a  
3a47 3a 56 3a			ld a, (.dmark+1)  
3a4a 32 78 fb			ld (debug_mark+1),a  
3a4d 3a 57 3a			ld a, (.dmark+2)  
3a50 32 79 fb			ld (debug_mark+2),a  
3a53 18 03			jr .pastdmark  
3a55 ..			.dmark: db "RNk"  
3a58 f1			.pastdmark: pop af  
3a59			endm  
# End of macro DMARK
3a59						CALLMONITOR 
3a59 cd 97 16			call break_point_state  
3a5c				endm  
# End of macro CALLMONITOR
3a5c					endif 
3a5c			.hirange:   
3a5c e5					push hl  
3a5d b7					or a  
3a5e ed 52		                sbc hl, de 
3a60			 
3a60					;call cmp16 
3a60			 
3a60 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3a62 e1					pop hl 
3a63 e5					push hl 
3a64			 
3a64					if DEBUG_FORTH_WORDS 
3a64						DMARK "RN4" 
3a64 f5				push af  
3a65 3a 79 3a			ld a, (.dmark)  
3a68 32 77 fb			ld (debug_mark),a  
3a6b 3a 7a 3a			ld a, (.dmark+1)  
3a6e 32 78 fb			ld (debug_mark+1),a  
3a71 3a 7b 3a			ld a, (.dmark+2)  
3a74 32 79 fb			ld (debug_mark+2),a  
3a77 18 03			jr .pastdmark  
3a79 ..			.dmark: db "RN4"  
3a7c f1			.pastdmark: pop af  
3a7d			endm  
# End of macro DMARK
3a7d						CALLMONITOR 
3a7d cd 97 16			call break_point_state  
3a80				endm  
# End of macro CALLMONITOR
3a80					endif 
3a80 ed 5b be f8			ld de, (LFSRSeed+2)   ; check low range 
3a84					;call cmp16 
3a84				 
3a84 b7					or a  
3a85 ed 52		                sbc hl, de 
3a87 38 8c				jr c, .inrange 
3a89			 
3a89 e1					pop hl 
3a8a					 
3a8a					if DEBUG_FORTH_WORDS 
3a8a						DMARK "RNd" 
3a8a f5				push af  
3a8b 3a 9f 3a			ld a, (.dmark)  
3a8e 32 77 fb			ld (debug_mark),a  
3a91 3a a0 3a			ld a, (.dmark+1)  
3a94 32 78 fb			ld (debug_mark+1),a  
3a97 3a a1 3a			ld a, (.dmark+2)  
3a9a 32 79 fb			ld (debug_mark+2),a  
3a9d 18 03			jr .pastdmark  
3a9f ..			.dmark: db "RNd"  
3aa2 f1			.pastdmark: pop af  
3aa3			endm  
# End of macro DMARK
3aa3						CALLMONITOR 
3aa3 cd 97 16			call break_point_state  
3aa6				endm  
# End of macro CALLMONITOR
3aa6					endif 
3aa6			 
3aa6			 
3aa6 cd 24 1c				call forth_push_numhl 
3aa9				       NEXTW 
3aa9 c3 8d 1f			jp macro_next 
3aac				endm 
# End of macro NEXTW
3aac			 
3aac			.ENDMATHS: 
3aac			 
3aac			; eof 
3aac			 
# End of file forth_words_maths.asm
3aac			include "forth_words_display.asm" 
3aac			 
3aac			; | ## Display Words 
3aac			 
3aac			.ATP: 
3aac				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3aac 62				db WORD_SYS_CORE+78             
3aad 23 3b			dw .FB            
3aaf 04				db 3 + 1 
3ab0 .. 00			db "AT?",0              
3ab4				endm 
# End of macro CWHEAD
3ab4			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3ab4					if DEBUG_FORTH_WORDS_KEY 
3ab4						DMARK "AT?" 
3ab4 f5				push af  
3ab5 3a c9 3a			ld a, (.dmark)  
3ab8 32 77 fb			ld (debug_mark),a  
3abb 3a ca 3a			ld a, (.dmark+1)  
3abe 32 78 fb			ld (debug_mark+1),a  
3ac1 3a cb 3a			ld a, (.dmark+2)  
3ac4 32 79 fb			ld (debug_mark+2),a  
3ac7 18 03			jr .pastdmark  
3ac9 ..			.dmark: db "AT?"  
3acc f1			.pastdmark: pop af  
3acd			endm  
# End of macro DMARK
3acd						CALLMONITOR 
3acd cd 97 16			call break_point_state  
3ad0				endm  
# End of macro CALLMONITOR
3ad0					endif 
3ad0 3a 46 f8				ld a, (f_cursor_ptr) 
3ad3			 
3ad3			if DEBUG_FORTH_WORDS 
3ad3				DMARK "AT?" 
3ad3 f5				push af  
3ad4 3a e8 3a			ld a, (.dmark)  
3ad7 32 77 fb			ld (debug_mark),a  
3ada 3a e9 3a			ld a, (.dmark+1)  
3add 32 78 fb			ld (debug_mark+1),a  
3ae0 3a ea 3a			ld a, (.dmark+2)  
3ae3 32 79 fb			ld (debug_mark+2),a  
3ae6 18 03			jr .pastdmark  
3ae8 ..			.dmark: db "AT?"  
3aeb f1			.pastdmark: pop af  
3aec			endm  
# End of macro DMARK
3aec				CALLMONITOR 
3aec cd 97 16			call break_point_state  
3aef				endm  
# End of macro CALLMONITOR
3aef			endif	 
3aef					; count the number of rows 
3aef			 
3aef 06 00				ld b, 0 
3af1 4f			.atpr:		ld c, a    ; save in case we go below zero 
3af2 d6 28				sub display_cols 
3af4 f2 fa 3a				jp p, .atprunder 
3af7 04					inc b 
3af8 18 f7				jr .atpr 
3afa			.atprunder:	 
3afa			if DEBUG_FORTH_WORDS 
3afa				DMARK "A?2" 
3afa f5				push af  
3afb 3a 0f 3b			ld a, (.dmark)  
3afe 32 77 fb			ld (debug_mark),a  
3b01 3a 10 3b			ld a, (.dmark+1)  
3b04 32 78 fb			ld (debug_mark+1),a  
3b07 3a 11 3b			ld a, (.dmark+2)  
3b0a 32 79 fb			ld (debug_mark+2),a  
3b0d 18 03			jr .pastdmark  
3b0f ..			.dmark: db "A?2"  
3b12 f1			.pastdmark: pop af  
3b13			endm  
# End of macro DMARK
3b13				CALLMONITOR 
3b13 cd 97 16			call break_point_state  
3b16				endm  
# End of macro CALLMONITOR
3b16			endif	 
3b16 26 00				ld h, 0 
3b18 69					ld l, c 
3b19 cd 24 1c				call forth_push_numhl 
3b1c 68					ld l, b  
3b1d cd 24 1c				call forth_push_numhl 
3b20			 
3b20			 
3b20				NEXTW 
3b20 c3 8d 1f			jp macro_next 
3b23				endm 
# End of macro NEXTW
3b23			 
3b23			.FB: 
3b23				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3b23 1b				db WORD_SYS_CORE+7             
3b24 71 3b			dw .EMIT            
3b26 03				db 2 + 1 
3b27 .. 00			db "FB",0              
3b2a				endm 
# End of macro CWHEAD
3b2a			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3b2a			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3b2a			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3b2a			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3b2a					if DEBUG_FORTH_WORDS_KEY 
3b2a						DMARK "FB." 
3b2a f5				push af  
3b2b 3a 3f 3b			ld a, (.dmark)  
3b2e 32 77 fb			ld (debug_mark),a  
3b31 3a 40 3b			ld a, (.dmark+1)  
3b34 32 78 fb			ld (debug_mark+1),a  
3b37 3a 41 3b			ld a, (.dmark+2)  
3b3a 32 79 fb			ld (debug_mark+2),a  
3b3d 18 03			jr .pastdmark  
3b3f ..			.dmark: db "FB."  
3b42 f1			.pastdmark: pop af  
3b43			endm  
# End of macro DMARK
3b43						CALLMONITOR 
3b43 cd 97 16			call break_point_state  
3b46				endm  
# End of macro CALLMONITOR
3b46					endif 
3b46			 
3b46					FORTH_DSP_VALUEHL 
3b46 cd 1b 1e			call macro_dsp_valuehl 
3b49				endm 
# End of macro FORTH_DSP_VALUEHL
3b49			 
3b49 7d					ld a, l 
3b4a fe 01				cp 1 
3b4c 20 05				jr nz, .fbn1 
3b4e 21 1c fa				ld hl, display_fb1 
3b51 18 15				jr .fbset 
3b53 fe 02		.fbn1:		cp 2 
3b55 20 05				jr nz, .fbn2 
3b57 21 da f8				ld hl, display_fb2 
3b5a 18 0c				jr .fbset 
3b5c fe 03		.fbn2:		cp 3 
3b5e 20 05				jr nz, .fbn3 
3b60 21 7b f9				ld hl, display_fb3 
3b63 18 03				jr .fbset 
3b65			.fbn3:		 ; if invalid number select first 
3b65 21 1c fa				ld hl, display_fb1 
3b68 22 d8 f8		.fbset:		ld (display_fb_active), hl 
3b6b			 
3b6b					FORTH_DSP_POP 
3b6b cd d3 1e			call macro_forth_dsp_pop 
3b6e				endm 
# End of macro FORTH_DSP_POP
3b6e			 
3b6e					NEXTW 
3b6e c3 8d 1f			jp macro_next 
3b71				endm 
# End of macro NEXTW
3b71			 
3b71			 
3b71			.EMIT: 
3b71				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3b71 1b				db WORD_SYS_CORE+7             
3b72 c2 3b			dw .DOTH            
3b74 05				db 4 + 1 
3b75 .. 00			db "EMIT",0              
3b7a				endm 
# End of macro CWHEAD
3b7a			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3b7a					; get value off TOS and display it 
3b7a			 
3b7a					if DEBUG_FORTH_WORDS_KEY 
3b7a						DMARK "EMT" 
3b7a f5				push af  
3b7b 3a 8f 3b			ld a, (.dmark)  
3b7e 32 77 fb			ld (debug_mark),a  
3b81 3a 90 3b			ld a, (.dmark+1)  
3b84 32 78 fb			ld (debug_mark+1),a  
3b87 3a 91 3b			ld a, (.dmark+2)  
3b8a 32 79 fb			ld (debug_mark+2),a  
3b8d 18 03			jr .pastdmark  
3b8f ..			.dmark: db "EMT"  
3b92 f1			.pastdmark: pop af  
3b93			endm  
# End of macro DMARK
3b93						CALLMONITOR 
3b93 cd 97 16			call break_point_state  
3b96				endm  
# End of macro CALLMONITOR
3b96					endif 
3b96			 
3b96					FORTH_DSP_VALUEHL 
3b96 cd 1b 1e			call macro_dsp_valuehl 
3b99				endm 
# End of macro FORTH_DSP_VALUEHL
3b99			 
3b99 7d					ld a,l 
3b9a			 
3b9a					; TODO write to display 
3b9a			 
3b9a 32 1b f0				ld (os_input), a 
3b9d 3e 00				ld a, 0 
3b9f 32 1c f0				ld (os_input+1), a 
3ba2					 
3ba2 3a 46 f8				ld a, (f_cursor_ptr) 
3ba5 11 1b f0				ld de, os_input 
3ba8 cd e8 0a				call str_at_display 
3bab			 
3bab			 
3bab 3a 24 f8				ld a,(cli_autodisplay) 
3bae fe 00				cp 0 
3bb0 28 03				jr z, .enoupdate 
3bb2 cd f8 0a						call update_display 
3bb5					.enoupdate: 
3bb5			 
3bb5 3a 46 f8				ld a, (f_cursor_ptr) 
3bb8 3c					inc a 
3bb9 32 46 f8				ld (f_cursor_ptr), a   ; save new pos 
3bbc			 
3bbc			 
3bbc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bbc cd d3 1e			call macro_forth_dsp_pop 
3bbf				endm 
# End of macro FORTH_DSP_POP
3bbf			  
3bbf			 
3bbf					NEXTW 
3bbf c3 8d 1f			jp macro_next 
3bc2				endm 
# End of macro NEXTW
3bc2			.DOTH: 
3bc2				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3bc2 1c				db WORD_SYS_CORE+8             
3bc3 f2 3b			dw .DOTF            
3bc5 03				db 2 + 1 
3bc6 .. 00			db ".-",0              
3bc9				endm 
# End of macro CWHEAD
3bc9			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3bc9					; get value off TOS and display it 
3bc9					if DEBUG_FORTH_WORDS_KEY 
3bc9						DMARK "DTD" 
3bc9 f5				push af  
3bca 3a de 3b			ld a, (.dmark)  
3bcd 32 77 fb			ld (debug_mark),a  
3bd0 3a df 3b			ld a, (.dmark+1)  
3bd3 32 78 fb			ld (debug_mark+1),a  
3bd6 3a e0 3b			ld a, (.dmark+2)  
3bd9 32 79 fb			ld (debug_mark+2),a  
3bdc 18 03			jr .pastdmark  
3bde ..			.dmark: db "DTD"  
3be1 f1			.pastdmark: pop af  
3be2			endm  
# End of macro DMARK
3be2						CALLMONITOR 
3be2 cd 97 16			call break_point_state  
3be5				endm  
# End of macro CALLMONITOR
3be5					endif 
3be5 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3be7 3e 00			ld a, 0 
3be9 32 25 f8			ld (cli_mvdot), a 
3bec c3 49 3c			jp .dotgo 
3bef				NEXTW 
3bef c3 8d 1f			jp macro_next 
3bf2				endm 
# End of macro NEXTW
3bf2			.DOTF: 
3bf2				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3bf2 1c				db WORD_SYS_CORE+8             
3bf3 20 3c			dw .DOT            
3bf5 03				db 2 + 1 
3bf6 .. 00			db ".>",0              
3bf9				endm 
# End of macro CWHEAD
3bf9			        ; | .> ( u -- ) Display TOS and move the next display point with display  | WIP 
3bf9					; get value off TOS and display it 
3bf9			        ; TODO BUG adds extra spaces 
3bf9			        ; TODO BUG handle numerics? 
3bf9					if DEBUG_FORTH_WORDS_KEY 
3bf9						DMARK "DTC" 
3bf9 f5				push af  
3bfa 3a 0e 3c			ld a, (.dmark)  
3bfd 32 77 fb			ld (debug_mark),a  
3c00 3a 0f 3c			ld a, (.dmark+1)  
3c03 32 78 fb			ld (debug_mark+1),a  
3c06 3a 10 3c			ld a, (.dmark+2)  
3c09 32 79 fb			ld (debug_mark+2),a  
3c0c 18 03			jr .pastdmark  
3c0e ..			.dmark: db "DTC"  
3c11 f1			.pastdmark: pop af  
3c12			endm  
# End of macro DMARK
3c12						CALLMONITOR 
3c12 cd 97 16			call break_point_state  
3c15				endm  
# End of macro CALLMONITOR
3c15					endif 
3c15 3e 01			ld a, 1 
3c17 32 25 f8			ld (cli_mvdot), a 
3c1a c3 49 3c			jp .dotgo 
3c1d				NEXTW 
3c1d c3 8d 1f			jp macro_next 
3c20				endm 
# End of macro NEXTW
3c20			 
3c20			.DOT: 
3c20				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3c20 1c				db WORD_SYS_CORE+8             
3c21 ac 3c			dw .CLS            
3c23 02				db 1 + 1 
3c24 .. 00			db ".",0              
3c26				endm 
# End of macro CWHEAD
3c26			        ; | . ( u -- ) Display TOS | DONE 
3c26					; get value off TOS and display it 
3c26			 
3c26					if DEBUG_FORTH_WORDS_KEY 
3c26						DMARK "DOT" 
3c26 f5				push af  
3c27 3a 3b 3c			ld a, (.dmark)  
3c2a 32 77 fb			ld (debug_mark),a  
3c2d 3a 3c 3c			ld a, (.dmark+1)  
3c30 32 78 fb			ld (debug_mark+1),a  
3c33 3a 3d 3c			ld a, (.dmark+2)  
3c36 32 79 fb			ld (debug_mark+2),a  
3c39 18 03			jr .pastdmark  
3c3b ..			.dmark: db "DOT"  
3c3e f1			.pastdmark: pop af  
3c3f			endm  
# End of macro DMARK
3c3f						CALLMONITOR 
3c3f cd 97 16			call break_point_state  
3c42				endm  
# End of macro CALLMONITOR
3c42					endif 
3c42 3e 00			ld a, 0 
3c44 32 25 f8			ld (cli_mvdot), a 
3c47 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3c49				 
3c49			 
3c49			.dotgo: 
3c49			 
3c49			; move up type to on stack for parserv5 
3c49					FORTH_DSP 
3c49 cd e1 1d			call macro_forth_dsp 
3c4c				endm 
# End of macro FORTH_DSP
3c4c				;FORTH_DSP_VALUE  
3c4c			 
3c4c			if DEBUG_FORTH_DOT 
3c4c				DMARK "DOT" 
3c4c				CALLMONITOR 
3c4c			endif	 
3c4c			;		.print: 
3c4c			 
3c4c 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3c4d 23				inc hl   ; position to the actual value 
3c4e fe 01			cp DS_TYPE_STR 
3c50 20 06			jr nz, .dotnum1  
3c52			 
3c52			; display string 
3c52				FORTH_DSP_VALUE  
3c52 cd 04 1e			call macro_forth_dsp_value 
3c55				endm 
# End of macro FORTH_DSP_VALUE
3c55 eb				ex de,hl 
3c56 18 11			jr .dotwrite 
3c58			 
3c58			.dotnum1: 
3c58 fe 02			cp DS_TYPE_INUM 
3c5a 20 0c			jr nz, .dotflot 
3c5c			 
3c5c			 
3c5c			; display number 
3c5c			 
3c5c			;	push hl 
3c5c			;	call clear_display 
3c5c			;	pop hl 
3c5c			 
3c5c 5e				ld e, (hl) 
3c5d 23				inc hl 
3c5e 56				ld d, (hl) 
3c5f 21 1d ee			ld hl, scratch 
3c62			if DEBUG_FORTH_DOT 
3c62				DMARK "DT1" 
3c62				CALLMONITOR 
3c62			endif	 
3c62			 
3c62 cd 16 11			call uitoa_16 
3c65 eb				ex de,hl 
3c66			 
3c66			if DEBUG_FORTH_DOT 
3c66				DMARK "DT2" 
3c66				CALLMONITOR 
3c66			endif	 
3c66			 
3c66			;	ld de, os_word_scratch 
3c66 18 01			jr .dotwrite 
3c68			 
3c68 00			.dotflot:   nop 
3c69			; TODO print floating point number 
3c69			 
3c69			.dotwrite:		 
3c69			 
3c69					; if c is set then set all '-' to spaces 
3c69					; need to also take into account .>  
3c69			 
3c69 3e 01				ld a, 1 
3c6b b9					cp c 
3c6c 20 13				jr nz, .nodashswap 
3c6e			 
3c6e					; DE has the string to write, working with HL 
3c6e			 
3c6e 06 ff				ld b, 255 
3c70 d5					push de 
3c71 e1					pop hl 
3c72			 
3c72			if DEBUG_FORTH_DOT 
3c72				DMARK "DT-" 
3c72				CALLMONITOR 
3c72			endif	 
3c72 7e			.dashscan:	ld a, (hl) 
3c73 fe 00				cp 0 
3c75 28 0a				jr z, .nodashswap 
3c77 fe 2d				cp '-' 
3c79 20 03				jr nz, .dashskip 
3c7b 3e 20				ld a, ' ' 
3c7d 77					ld (hl), a 
3c7e 23			.dashskip:	inc hl 
3c7f			if DEBUG_FORTH_DOT 
3c7f				DMARK "D-2" 
3c7f				CALLMONITOR 
3c7f			endif	 
3c7f 10 f1				djnz .dashscan 
3c81			 
3c81			if DEBUG_FORTH_DOT 
3c81				DMARK "D-1" 
3c81				CALLMONITOR 
3c81			endif	 
3c81			 
3c81			.nodashswap: 
3c81			 
3c81 e5					push hl   ; save string start in case we need to advance print 
3c82			 
3c82 3a 46 f8				ld a, (f_cursor_ptr) 
3c85 cd e8 0a				call str_at_display 
3c88 3a 24 f8				ld a,(cli_autodisplay) 
3c8b fe 00				cp 0 
3c8d 28 03				jr z, .noupdate 
3c8f cd f8 0a						call update_display 
3c92					.noupdate: 
3c92			 
3c92			 
3c92					; see if we need to advance the print position 
3c92			 
3c92 e1					pop hl   ; get back string 
3c93			 
3c93 3a 25 f8				ld a, (cli_mvdot) 
3c96			if DEBUG_FORTH_DOT 
3c96					ld e,a 
3c96				DMARK "D>1" 
3c96				CALLMONITOR 
3c96			endif	 
3c96 fe 00				cp 0 
3c98 28 0c				jr z, .noadv 
3c9a					; yes, lets advance the print position 
3c9a 3e 00				ld a, 0 
3c9c cd 72 11				call strlent 
3c9f 3a 46 f8				ld a, (f_cursor_ptr) 
3ca2 85					add a,l 
3ca3					;call addatohl 
3ca3					;ld a, l 
3ca3 32 46 f8				ld (f_cursor_ptr), a   ; save new pos 
3ca6			 
3ca6			if DEBUG_FORTH_DOT 
3ca6				DMARK "D->" 
3ca6				CALLMONITOR 
3ca6			endif	 
3ca6			 
3ca6			.noadv:	 
3ca6			 
3ca6					if DEBUG_FORTH_DOT_WAIT 
3ca6							call next_page_prompt 
3ca6					endif	 
3ca6			; TODO this pop off the stack causes a crash. i dont know why 
3ca6			 
3ca6			 
3ca6			if DEBUG_FORTH_DOT 
3ca6				DMARK "DTh" 
3ca6				CALLMONITOR 
3ca6			endif	 
3ca6			 
3ca6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ca6 cd d3 1e			call macro_forth_dsp_pop 
3ca9				endm 
# End of macro FORTH_DSP_POP
3ca9			 
3ca9			if DEBUG_FORTH_DOT 
3ca9				DMARK "DTi" 
3ca9				CALLMONITOR 
3ca9			endif	 
3ca9			 
3ca9			 
3ca9					NEXTW 
3ca9 c3 8d 1f			jp macro_next 
3cac				endm 
# End of macro NEXTW
3cac			 
3cac			.CLS: 
3cac				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3cac 35				db WORD_SYS_CORE+33             
3cad d9 3c			dw .DRAW            
3caf 04				db 3 + 1 
3cb0 .. 00			db "CLS",0              
3cb4				endm 
# End of macro CWHEAD
3cb4			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3cb4					if DEBUG_FORTH_WORDS_KEY 
3cb4						DMARK "CLS" 
3cb4 f5				push af  
3cb5 3a c9 3c			ld a, (.dmark)  
3cb8 32 77 fb			ld (debug_mark),a  
3cbb 3a ca 3c			ld a, (.dmark+1)  
3cbe 32 78 fb			ld (debug_mark+1),a  
3cc1 3a cb 3c			ld a, (.dmark+2)  
3cc4 32 79 fb			ld (debug_mark+2),a  
3cc7 18 03			jr .pastdmark  
3cc9 ..			.dmark: db "CLS"  
3ccc f1			.pastdmark: pop af  
3ccd			endm  
# End of macro DMARK
3ccd						CALLMONITOR 
3ccd cd 97 16			call break_point_state  
3cd0				endm  
# End of macro CALLMONITOR
3cd0					endif 
3cd0 cd d5 0a				call clear_display 
3cd3 c3 e7 3d				jp .home		; and home cursor 
3cd6					NEXTW 
3cd6 c3 8d 1f			jp macro_next 
3cd9				endm 
# End of macro NEXTW
3cd9			 
3cd9			.DRAW: 
3cd9				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3cd9 36				db WORD_SYS_CORE+34             
3cda 04 3d			dw .DUMP            
3cdc 05				db 4 + 1 
3cdd .. 00			db "DRAW",0              
3ce2				endm 
# End of macro CWHEAD
3ce2			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3ce2					if DEBUG_FORTH_WORDS_KEY 
3ce2						DMARK "DRW" 
3ce2 f5				push af  
3ce3 3a f7 3c			ld a, (.dmark)  
3ce6 32 77 fb			ld (debug_mark),a  
3ce9 3a f8 3c			ld a, (.dmark+1)  
3cec 32 78 fb			ld (debug_mark+1),a  
3cef 3a f9 3c			ld a, (.dmark+2)  
3cf2 32 79 fb			ld (debug_mark+2),a  
3cf5 18 03			jr .pastdmark  
3cf7 ..			.dmark: db "DRW"  
3cfa f1			.pastdmark: pop af  
3cfb			endm  
# End of macro DMARK
3cfb						CALLMONITOR 
3cfb cd 97 16			call break_point_state  
3cfe				endm  
# End of macro CALLMONITOR
3cfe					endif 
3cfe cd f8 0a				call update_display 
3d01					NEXTW 
3d01 c3 8d 1f			jp macro_next 
3d04				endm 
# End of macro NEXTW
3d04			 
3d04			.DUMP: 
3d04				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3d04 37				db WORD_SYS_CORE+35             
3d05 3c 3d			dw .CDUMP            
3d07 05				db 4 + 1 
3d08 .. 00			db "DUMP",0              
3d0d				endm 
# End of macro CWHEAD
3d0d			; | DUMP ( x -- ) With address x display dump   | DONE 
3d0d			; TODO pop address to use off of the stack 
3d0d					if DEBUG_FORTH_WORDS_KEY 
3d0d						DMARK "DUM" 
3d0d f5				push af  
3d0e 3a 22 3d			ld a, (.dmark)  
3d11 32 77 fb			ld (debug_mark),a  
3d14 3a 23 3d			ld a, (.dmark+1)  
3d17 32 78 fb			ld (debug_mark+1),a  
3d1a 3a 24 3d			ld a, (.dmark+2)  
3d1d 32 79 fb			ld (debug_mark+2),a  
3d20 18 03			jr .pastdmark  
3d22 ..			.dmark: db "DUM"  
3d25 f1			.pastdmark: pop af  
3d26			endm  
# End of macro DMARK
3d26						CALLMONITOR 
3d26 cd 97 16			call break_point_state  
3d29				endm  
# End of macro CALLMONITOR
3d29					endif 
3d29 cd d5 0a				call clear_display 
3d2c			 
3d2c					; get address 
3d2c			 
3d2c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d2c cd 1b 1e			call macro_dsp_valuehl 
3d2f				endm 
# End of macro FORTH_DSP_VALUEHL
3d2f				 
3d2f					; save it for cdump 
3d2f			 
3d2f 22 40 f1				ld (os_cur_ptr),hl 
3d32			 
3d32					; destroy value TOS 
3d32			 
3d32					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d32 cd d3 1e			call macro_forth_dsp_pop 
3d35				endm 
# End of macro FORTH_DSP_POP
3d35			 
3d35 cd a4 1a				call dumpcont	; skip old style of param parsing	 
3d38 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3d39					NEXTW 
3d39 c3 8d 1f			jp macro_next 
3d3c				endm 
# End of macro NEXTW
3d3c			.CDUMP: 
3d3c				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3d3c 38				db WORD_SYS_CORE+36             
3d3d 6c 3d			dw .DAT            
3d3f 06				db 5 + 1 
3d40 .. 00			db "CDUMP",0              
3d46				endm 
# End of macro CWHEAD
3d46			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3d46					if DEBUG_FORTH_WORDS_KEY 
3d46						DMARK "CDP" 
3d46 f5				push af  
3d47 3a 5b 3d			ld a, (.dmark)  
3d4a 32 77 fb			ld (debug_mark),a  
3d4d 3a 5c 3d			ld a, (.dmark+1)  
3d50 32 78 fb			ld (debug_mark+1),a  
3d53 3a 5d 3d			ld a, (.dmark+2)  
3d56 32 79 fb			ld (debug_mark+2),a  
3d59 18 03			jr .pastdmark  
3d5b ..			.dmark: db "CDP"  
3d5e f1			.pastdmark: pop af  
3d5f			endm  
# End of macro DMARK
3d5f						CALLMONITOR 
3d5f cd 97 16			call break_point_state  
3d62				endm  
# End of macro CALLMONITOR
3d62					endif 
3d62 cd d5 0a				call clear_display 
3d65 cd a4 1a				call dumpcont	 
3d68 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
3d69					NEXTW 
3d69 c3 8d 1f			jp macro_next 
3d6c				endm 
# End of macro NEXTW
3d6c			 
3d6c			 
3d6c			 
3d6c			 
3d6c			.DAT: 
3d6c				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
3d6c 3d				db WORD_SYS_CORE+41             
3d6d c2 3d			dw .HOME            
3d6f 03				db 2 + 1 
3d70 .. 00			db "AT",0              
3d73				endm 
# End of macro CWHEAD
3d73			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
3d73					if DEBUG_FORTH_WORDS_KEY 
3d73						DMARK "AT." 
3d73 f5				push af  
3d74 3a 88 3d			ld a, (.dmark)  
3d77 32 77 fb			ld (debug_mark),a  
3d7a 3a 89 3d			ld a, (.dmark+1)  
3d7d 32 78 fb			ld (debug_mark+1),a  
3d80 3a 8a 3d			ld a, (.dmark+2)  
3d83 32 79 fb			ld (debug_mark+2),a  
3d86 18 03			jr .pastdmark  
3d88 ..			.dmark: db "AT."  
3d8b f1			.pastdmark: pop af  
3d8c			endm  
# End of macro DMARK
3d8c						CALLMONITOR 
3d8c cd 97 16			call break_point_state  
3d8f				endm  
# End of macro CALLMONITOR
3d8f					endif 
3d8f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d8f cd 1b 1e			call macro_dsp_valuehl 
3d92				endm 
# End of macro FORTH_DSP_VALUEHL
3d92			 
3d92			 
3d92					; TODO save cursor row 
3d92 7d					ld a,l 
3d93 fe 02				cp 2 
3d95 20 04				jr nz, .crow3 
3d97 3e 28				ld a, display_row_2 
3d99 18 12				jr .ccol1 
3d9b fe 03		.crow3:		cp 3 
3d9d 20 04				jr nz, .crow4 
3d9f 3e 50				ld a, display_row_3 
3da1 18 0a				jr .ccol1 
3da3 fe 04		.crow4:		cp 4 
3da5 20 04				jr nz, .crow1 
3da7 3e 78				ld a, display_row_4 
3da9 18 02				jr .ccol1 
3dab 3e 00		.crow1:		ld a,display_row_1 
3dad f5			.ccol1:		push af			; got row offset 
3dae 6f					ld l,a 
3daf 26 00				ld h,0 
3db1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3db1 cd d3 1e			call macro_forth_dsp_pop 
3db4				endm 
# End of macro FORTH_DSP_POP
3db4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3db4 cd 1b 1e			call macro_dsp_valuehl 
3db7				endm 
# End of macro FORTH_DSP_VALUEHL
3db7					; TODO save cursor col 
3db7 f1					pop af 
3db8 85					add l		; add col offset 
3db9 32 46 f8				ld (f_cursor_ptr), a 
3dbc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3dbc cd d3 1e			call macro_forth_dsp_pop 
3dbf				endm 
# End of macro FORTH_DSP_POP
3dbf			 
3dbf					; calculate  
3dbf			 
3dbf					NEXTW 
3dbf c3 8d 1f			jp macro_next 
3dc2				endm 
# End of macro NEXTW
3dc2			 
3dc2			 
3dc2			.HOME: 
3dc2				CWHEAD .SPACE 45 "HOME" 4 WORD_FLAG_CODE 
3dc2 41				db WORD_SYS_CORE+45             
3dc3 ef 3d			dw .SPACE            
3dc5 05				db 4 + 1 
3dc6 .. 00			db "HOME",0              
3dcb				endm 
# End of macro CWHEAD
3dcb			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
3dcb					if DEBUG_FORTH_WORDS_KEY 
3dcb						DMARK "HOM" 
3dcb f5				push af  
3dcc 3a e0 3d			ld a, (.dmark)  
3dcf 32 77 fb			ld (debug_mark),a  
3dd2 3a e1 3d			ld a, (.dmark+1)  
3dd5 32 78 fb			ld (debug_mark+1),a  
3dd8 3a e2 3d			ld a, (.dmark+2)  
3ddb 32 79 fb			ld (debug_mark+2),a  
3dde 18 03			jr .pastdmark  
3de0 ..			.dmark: db "HOM"  
3de3 f1			.pastdmark: pop af  
3de4			endm  
# End of macro DMARK
3de4						CALLMONITOR 
3de4 cd 97 16			call break_point_state  
3de7				endm  
# End of macro CALLMONITOR
3de7					endif 
3de7 3e 00		.home:		ld a, 0		; and home cursor 
3de9 32 46 f8				ld (f_cursor_ptr), a 
3dec					NEXTW 
3dec c3 8d 1f			jp macro_next 
3def				endm 
# End of macro NEXTW
3def			 
3def			 
3def			.SPACE: 
3def				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
3def 46				db WORD_SYS_CORE+50             
3df0 1d 3e			dw .SPACES            
3df2 03				db 2 + 1 
3df3 .. 00			db "BL",0              
3df6				endm 
# End of macro CWHEAD
3df6			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
3df6					if DEBUG_FORTH_WORDS_KEY 
3df6						DMARK "BL." 
3df6 f5				push af  
3df7 3a 0b 3e			ld a, (.dmark)  
3dfa 32 77 fb			ld (debug_mark),a  
3dfd 3a 0c 3e			ld a, (.dmark+1)  
3e00 32 78 fb			ld (debug_mark+1),a  
3e03 3a 0d 3e			ld a, (.dmark+2)  
3e06 32 79 fb			ld (debug_mark+2),a  
3e09 18 03			jr .pastdmark  
3e0b ..			.dmark: db "BL."  
3e0e f1			.pastdmark: pop af  
3e0f			endm  
# End of macro DMARK
3e0f						CALLMONITOR 
3e0f cd 97 16			call break_point_state  
3e12				endm  
# End of macro CALLMONITOR
3e12					endif 
3e12 21 1b 3e				ld hl, .blstr 
3e15 cd 92 1c				call forth_push_str 
3e18					 
3e18				       NEXTW 
3e18 c3 8d 1f			jp macro_next 
3e1b				endm 
# End of macro NEXTW
3e1b			 
3e1b .. 00		.blstr: db " ", 0 
3e1d			 
3e1d			.SPACES: 
3e1d				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
3e1d 47				db WORD_SYS_CORE+51             
3e1e b8 3e			dw .SCROLL            
3e20 07				db 6 + 1 
3e21 .. 00			db "SPACES",0              
3e28				endm 
# End of macro CWHEAD
3e28			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | TO TEST 
3e28					if DEBUG_FORTH_WORDS_KEY 
3e28						DMARK "SPS" 
3e28 f5				push af  
3e29 3a 3d 3e			ld a, (.dmark)  
3e2c 32 77 fb			ld (debug_mark),a  
3e2f 3a 3e 3e			ld a, (.dmark+1)  
3e32 32 78 fb			ld (debug_mark+1),a  
3e35 3a 3f 3e			ld a, (.dmark+2)  
3e38 32 79 fb			ld (debug_mark+2),a  
3e3b 18 03			jr .pastdmark  
3e3d ..			.dmark: db "SPS"  
3e40 f1			.pastdmark: pop af  
3e41			endm  
# End of macro DMARK
3e41						CALLMONITOR 
3e41 cd 97 16			call break_point_state  
3e44				endm  
# End of macro CALLMONITOR
3e44					endif 
3e44			 
3e44			 
3e44					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e44 cd 1b 1e			call macro_dsp_valuehl 
3e47				endm 
# End of macro FORTH_DSP_VALUEHL
3e47			 
3e47			;		push hl    ; u 
3e47					if DEBUG_FORTH_WORDS 
3e47						DMARK "SPA" 
3e47 f5				push af  
3e48 3a 5c 3e			ld a, (.dmark)  
3e4b 32 77 fb			ld (debug_mark),a  
3e4e 3a 5d 3e			ld a, (.dmark+1)  
3e51 32 78 fb			ld (debug_mark+1),a  
3e54 3a 5e 3e			ld a, (.dmark+2)  
3e57 32 79 fb			ld (debug_mark+2),a  
3e5a 18 03			jr .pastdmark  
3e5c ..			.dmark: db "SPA"  
3e5f f1			.pastdmark: pop af  
3e60			endm  
# End of macro DMARK
3e60						CALLMONITOR 
3e60 cd 97 16			call break_point_state  
3e63				endm  
# End of macro CALLMONITOR
3e63					endif 
3e63			 
3e63					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e63 cd d3 1e			call macro_forth_dsp_pop 
3e66				endm 
# End of macro FORTH_DSP_POP
3e66			;		pop hl 
3e66 4d					ld c, l 
3e67 06 00				ld b, 0 
3e69 21 1d ee				ld hl, scratch  
3e6c			 
3e6c					if DEBUG_FORTH_WORDS 
3e6c						DMARK "SP2" 
3e6c f5				push af  
3e6d 3a 81 3e			ld a, (.dmark)  
3e70 32 77 fb			ld (debug_mark),a  
3e73 3a 82 3e			ld a, (.dmark+1)  
3e76 32 78 fb			ld (debug_mark+1),a  
3e79 3a 83 3e			ld a, (.dmark+2)  
3e7c 32 79 fb			ld (debug_mark+2),a  
3e7f 18 03			jr .pastdmark  
3e81 ..			.dmark: db "SP2"  
3e84 f1			.pastdmark: pop af  
3e85			endm  
# End of macro DMARK
3e85						CALLMONITOR 
3e85 cd 97 16			call break_point_state  
3e88				endm  
# End of macro CALLMONITOR
3e88					endif 
3e88 3e 20				ld a, ' ' 
3e8a c5			.spaces1:	push bc 
3e8b 77					ld (hl),a 
3e8c 23					inc hl 
3e8d c1					pop bc 
3e8e 10 fa				djnz .spaces1 
3e90 3e 00				ld a,0 
3e92 77					ld (hl),a 
3e93 21 1d ee				ld hl, scratch 
3e96					if DEBUG_FORTH_WORDS 
3e96						DMARK "SP3" 
3e96 f5				push af  
3e97 3a ab 3e			ld a, (.dmark)  
3e9a 32 77 fb			ld (debug_mark),a  
3e9d 3a ac 3e			ld a, (.dmark+1)  
3ea0 32 78 fb			ld (debug_mark+1),a  
3ea3 3a ad 3e			ld a, (.dmark+2)  
3ea6 32 79 fb			ld (debug_mark+2),a  
3ea9 18 03			jr .pastdmark  
3eab ..			.dmark: db "SP3"  
3eae f1			.pastdmark: pop af  
3eaf			endm  
# End of macro DMARK
3eaf						CALLMONITOR 
3eaf cd 97 16			call break_point_state  
3eb2				endm  
# End of macro CALLMONITOR
3eb2					endif 
3eb2 cd 8d 1d				call forth_apush 
3eb5			 
3eb5				       NEXTW 
3eb5 c3 8d 1f			jp macro_next 
3eb8				endm 
# End of macro NEXTW
3eb8			 
3eb8			 
3eb8			 
3eb8			.SCROLL: 
3eb8				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
3eb8 53				db WORD_SYS_CORE+63             
3eb9 e5 3e			dw .SCROLLD            
3ebb 07				db 6 + 1 
3ebc .. 00			db "SCROLL",0              
3ec3				endm 
# End of macro CWHEAD
3ec3			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
3ec3					if DEBUG_FORTH_WORDS_KEY 
3ec3						DMARK "SCR" 
3ec3 f5				push af  
3ec4 3a d8 3e			ld a, (.dmark)  
3ec7 32 77 fb			ld (debug_mark),a  
3eca 3a d9 3e			ld a, (.dmark+1)  
3ecd 32 78 fb			ld (debug_mark+1),a  
3ed0 3a da 3e			ld a, (.dmark+2)  
3ed3 32 79 fb			ld (debug_mark+2),a  
3ed6 18 03			jr .pastdmark  
3ed8 ..			.dmark: db "SCR"  
3edb f1			.pastdmark: pop af  
3edc			endm  
# End of macro DMARK
3edc						CALLMONITOR 
3edc cd 97 16			call break_point_state  
3edf				endm  
# End of macro CALLMONITOR
3edf					endif 
3edf			 
3edf cd 97 0a			call scroll_up 
3ee2			;	call update_display 
3ee2			 
3ee2					NEXTW 
3ee2 c3 8d 1f			jp macro_next 
3ee5				endm 
# End of macro NEXTW
3ee5			 
3ee5			 
3ee5			 
3ee5			;		; get dir 
3ee5			; 
3ee5			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ee5			; 
3ee5			;		push hl 
3ee5			; 
3ee5			;		; destroy value TOS 
3ee5			; 
3ee5			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ee5			; 
3ee5			;		; get count 
3ee5			; 
3ee5			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ee5			; 
3ee5			;		push hl 
3ee5			; 
3ee5			;		; destroy value TOS 
3ee5			; 
3ee5			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ee5			; 
3ee5			;		; one value on hl get other one back 
3ee5			; 
3ee5			;		pop bc    ; count 
3ee5			; 
3ee5			;		pop de   ; dir 
3ee5			; 
3ee5			; 
3ee5			;		ld b, c 
3ee5			; 
3ee5			;.scrolldir:     push bc 
3ee5			;		push de 
3ee5			; 
3ee5			;		ld a, 0 
3ee5			;		cp e 
3ee5			;		jr z, .scrollup  
3ee5			;		call scroll_down 
3ee5			;		jr .scrollnext 
3ee5			;.scrollup:	call scroll_up 
3ee5			; 
3ee5			;		 
3ee5			;.scrollnext: 
3ee5			;		pop de 
3ee5			;		pop bc 
3ee5			;		djnz .scrolldir 
3ee5			; 
3ee5			; 
3ee5			; 
3ee5			; 
3ee5			; 
3ee5			;		NEXTW 
3ee5			 
3ee5			.SCROLLD: 
3ee5				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
3ee5 53				db WORD_SYS_CORE+63             
3ee6 13 3f			dw .ATQ            
3ee8 08				db 7 + 1 
3ee9 .. 00			db "SCROLLD",0              
3ef1				endm 
# End of macro CWHEAD
3ef1			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
3ef1					if DEBUG_FORTH_WORDS_KEY 
3ef1						DMARK "SCD" 
3ef1 f5				push af  
3ef2 3a 06 3f			ld a, (.dmark)  
3ef5 32 77 fb			ld (debug_mark),a  
3ef8 3a 07 3f			ld a, (.dmark+1)  
3efb 32 78 fb			ld (debug_mark+1),a  
3efe 3a 08 3f			ld a, (.dmark+2)  
3f01 32 79 fb			ld (debug_mark+2),a  
3f04 18 03			jr .pastdmark  
3f06 ..			.dmark: db "SCD"  
3f09 f1			.pastdmark: pop af  
3f0a			endm  
# End of macro DMARK
3f0a						CALLMONITOR 
3f0a cd 97 16			call break_point_state  
3f0d				endm  
# End of macro CALLMONITOR
3f0d					endif 
3f0d			 
3f0d cd bb 0a			call scroll_down 
3f10			;	call update_display 
3f10			 
3f10					NEXTW 
3f10 c3 8d 1f			jp macro_next 
3f13				endm 
# End of macro NEXTW
3f13			 
3f13			 
3f13			.ATQ: 
3f13				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
3f13 62				db WORD_SYS_CORE+78             
3f14 71 3f			dw .AUTODSP            
3f16 04				db 3 + 1 
3f17 .. 00			db "AT@",0              
3f1b				endm 
# End of macro CWHEAD
3f1b			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
3f1b					if DEBUG_FORTH_WORDS_KEY 
3f1b						DMARK "ATA" 
3f1b f5				push af  
3f1c 3a 30 3f			ld a, (.dmark)  
3f1f 32 77 fb			ld (debug_mark),a  
3f22 3a 31 3f			ld a, (.dmark+1)  
3f25 32 78 fb			ld (debug_mark+1),a  
3f28 3a 32 3f			ld a, (.dmark+2)  
3f2b 32 79 fb			ld (debug_mark+2),a  
3f2e 18 03			jr .pastdmark  
3f30 ..			.dmark: db "ATA"  
3f33 f1			.pastdmark: pop af  
3f34			endm  
# End of macro DMARK
3f34						CALLMONITOR 
3f34 cd 97 16			call break_point_state  
3f37				endm  
# End of macro CALLMONITOR
3f37					endif 
3f37			 
3f37			 
3f37					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f37 cd 1b 1e			call macro_dsp_valuehl 
3f3a				endm 
# End of macro FORTH_DSP_VALUEHL
3f3a			 
3f3a					; TODO save cursor row 
3f3a 7d					ld a,l 
3f3b fe 02				cp 2 
3f3d 20 04				jr nz, .crow3aq 
3f3f 3e 28				ld a, display_row_2 
3f41 18 12				jr .ccol1aq 
3f43 fe 03		.crow3aq:		cp 3 
3f45 20 04				jr nz, .crow4aq 
3f47 3e 50				ld a, display_row_3 
3f49 18 0a				jr .ccol1aq 
3f4b fe 04		.crow4aq:		cp 4 
3f4d 20 04				jr nz, .crow1aq 
3f4f 3e 78				ld a, display_row_4 
3f51 18 02				jr .ccol1aq 
3f53 3e 00		.crow1aq:		ld a,display_row_1 
3f55 f5			.ccol1aq:		push af			; got row offset 
3f56 6f					ld l,a 
3f57 26 00				ld h,0 
3f59					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f59 cd d3 1e			call macro_forth_dsp_pop 
3f5c				endm 
# End of macro FORTH_DSP_POP
3f5c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f5c cd 1b 1e			call macro_dsp_valuehl 
3f5f				endm 
# End of macro FORTH_DSP_VALUEHL
3f5f					; TODO save cursor col 
3f5f f1					pop af 
3f60 85					add l		; add col offset 
3f61			 
3f61					; add current frame buffer address 
3f61 2a d8 f8				ld hl, (display_fb_active) 
3f64 cd 09 0d				call addatohl 
3f67			 
3f67			 
3f67			 
3f67			 
3f67					; get char frame buffer location offset in hl 
3f67			 
3f67 7e					ld a,(hl) 
3f68 26 00				ld h, 0 
3f6a 6f					ld l, a 
3f6b			 
3f6b cd 24 1c				call forth_push_numhl 
3f6e			 
3f6e			 
3f6e					NEXTW 
3f6e c3 8d 1f			jp macro_next 
3f71				endm 
# End of macro NEXTW
3f71			 
3f71			.AUTODSP: 
3f71				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
3f71 63				db WORD_SYS_CORE+79             
3f72 87 3f			dw .MENU            
3f74 05				db 4 + 1 
3f75 .. 00			db "ADSP",0              
3f7a				endm 
# End of macro CWHEAD
3f7a			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
3f7a			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
3f7a			 
3f7a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f7a cd 1b 1e			call macro_dsp_valuehl 
3f7d				endm 
# End of macro FORTH_DSP_VALUEHL
3f7d			 
3f7d			;		push hl 
3f7d			 
3f7d					; destroy value TOS 
3f7d			 
3f7d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f7d cd d3 1e			call macro_forth_dsp_pop 
3f80				endm 
# End of macro FORTH_DSP_POP
3f80			 
3f80			;		pop hl 
3f80			 
3f80 7d					ld a,l 
3f81 32 24 f8				ld (cli_autodisplay), a 
3f84				       NEXTW 
3f84 c3 8d 1f			jp macro_next 
3f87				endm 
# End of macro NEXTW
3f87			 
3f87			.MENU: 
3f87				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
3f87 70				db WORD_SYS_CORE+92             
3f88 30 40			dw .ENDDISPLAY            
3f8a 05				db 4 + 1 
3f8b .. 00			db "MENU",0              
3f90				endm 
# End of macro CWHEAD
3f90			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | TODO 
3f90			 
3f90			;		; get number of items on the stack 
3f90			; 
3f90				 
3f90					FORTH_DSP_VALUEHL 
3f90 cd 1b 1e			call macro_dsp_valuehl 
3f93				endm 
# End of macro FORTH_DSP_VALUEHL
3f93				 
3f93					if DEBUG_FORTH_WORDS_KEY 
3f93						DMARK "MNU" 
3f93 f5				push af  
3f94 3a a8 3f			ld a, (.dmark)  
3f97 32 77 fb			ld (debug_mark),a  
3f9a 3a a9 3f			ld a, (.dmark+1)  
3f9d 32 78 fb			ld (debug_mark+1),a  
3fa0 3a aa 3f			ld a, (.dmark+2)  
3fa3 32 79 fb			ld (debug_mark+2),a  
3fa6 18 03			jr .pastdmark  
3fa8 ..			.dmark: db "MNU"  
3fab f1			.pastdmark: pop af  
3fac			endm  
# End of macro DMARK
3fac						CALLMONITOR 
3fac cd 97 16			call break_point_state  
3faf				endm  
# End of macro CALLMONITOR
3faf					endif 
3faf			 
3faf 45					ld b, l	 
3fb0 05					dec b 
3fb1			 
3fb1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3fb1 cd d3 1e			call macro_forth_dsp_pop 
3fb4				endm 
# End of macro FORTH_DSP_POP
3fb4			 
3fb4			 
3fb4					; go directly through the stack to pluck out the string pointers and build an array 
3fb4			 
3fb4			;		FORTH_DSP 
3fb4			 
3fb4					; hl contains top most stack item 
3fb4				 
3fb4 11 1d ee				ld de, scratch 
3fb7			 
3fb7			.mbuild: 
3fb7			 
3fb7					FORTH_DSP_VALUEHL 
3fb7 cd 1b 1e			call macro_dsp_valuehl 
3fba				endm 
# End of macro FORTH_DSP_VALUEHL
3fba			 
3fba					if DEBUG_FORTH_WORDS 
3fba						DMARK "MN3" 
3fba f5				push af  
3fbb 3a cf 3f			ld a, (.dmark)  
3fbe 32 77 fb			ld (debug_mark),a  
3fc1 3a d0 3f			ld a, (.dmark+1)  
3fc4 32 78 fb			ld (debug_mark+1),a  
3fc7 3a d1 3f			ld a, (.dmark+2)  
3fca 32 79 fb			ld (debug_mark+2),a  
3fcd 18 03			jr .pastdmark  
3fcf ..			.dmark: db "MN3"  
3fd2 f1			.pastdmark: pop af  
3fd3			endm  
# End of macro DMARK
3fd3						CALLMONITOR 
3fd3 cd 97 16			call break_point_state  
3fd6				endm  
# End of macro CALLMONITOR
3fd6					endif 
3fd6 eb					ex de, hl 
3fd7 73					ld (hl), e 
3fd8 23					inc hl 
3fd9 72					ld (hl), d 
3fda 23					inc hl 
3fdb eb					ex de, hl 
3fdc			 
3fdc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3fdc cd d3 1e			call macro_forth_dsp_pop 
3fdf				endm 
# End of macro FORTH_DSP_POP
3fdf			 
3fdf 10 d6				djnz .mbuild 
3fe1			 
3fe1					; done add term 
3fe1			 
3fe1 eb					ex de, hl 
3fe2 36 00				ld (hl), 0 
3fe4 23					inc hl 
3fe5 36 00				ld (hl), 0 
3fe7			 
3fe7				 
3fe7					 
3fe7 21 1d ee				ld hl, scratch 
3fea			 
3fea					if DEBUG_FORTH_WORDS 
3fea						DMARK "MNx" 
3fea f5				push af  
3feb 3a ff 3f			ld a, (.dmark)  
3fee 32 77 fb			ld (debug_mark),a  
3ff1 3a 00 40			ld a, (.dmark+1)  
3ff4 32 78 fb			ld (debug_mark+1),a  
3ff7 3a 01 40			ld a, (.dmark+2)  
3ffa 32 79 fb			ld (debug_mark+2),a  
3ffd 18 03			jr .pastdmark  
3fff ..			.dmark: db "MNx"  
4002 f1			.pastdmark: pop af  
4003			endm  
# End of macro DMARK
4003						CALLMONITOR 
4003 cd 97 16			call break_point_state  
4006				endm  
# End of macro CALLMONITOR
4006					endif 
4006			 
4006			 
4006			 
4006 3e 00				ld a, 0 
4008 cd 06 0b				call menu 
400b			 
400b			 
400b 6f					ld l, a 
400c 26 00				ld h, 0 
400e			 
400e					if DEBUG_FORTH_WORDS 
400e						DMARK "MNr" 
400e f5				push af  
400f 3a 23 40			ld a, (.dmark)  
4012 32 77 fb			ld (debug_mark),a  
4015 3a 24 40			ld a, (.dmark+1)  
4018 32 78 fb			ld (debug_mark+1),a  
401b 3a 25 40			ld a, (.dmark+2)  
401e 32 79 fb			ld (debug_mark+2),a  
4021 18 03			jr .pastdmark  
4023 ..			.dmark: db "MNr"  
4026 f1			.pastdmark: pop af  
4027			endm  
# End of macro DMARK
4027						CALLMONITOR 
4027 cd 97 16			call break_point_state  
402a				endm  
# End of macro CALLMONITOR
402a					endif 
402a			 
402a cd 24 1c				call forth_push_numhl 
402d			 
402d			 
402d			 
402d			 
402d				       NEXTW 
402d c3 8d 1f			jp macro_next 
4030				endm 
# End of macro NEXTW
4030			 
4030			 
4030			.ENDDISPLAY: 
4030			 
4030			; eof 
# End of file forth_words_display.asm
4030			include "forth_words_str.asm" 
4030			 
4030			; | ## String Words 
4030			 
4030			.PTR:   
4030			 
4030				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
4030 48				db WORD_SYS_CORE+52             
4031 5d 40			dw .STYPE            
4033 04				db 3 + 1 
4034 .. 00			db "PTR",0              
4038				endm 
# End of macro CWHEAD
4038			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4038			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4038			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4038			 
4038					if DEBUG_FORTH_WORDS_KEY 
4038						DMARK "PTR" 
4038 f5				push af  
4039 3a 4d 40			ld a, (.dmark)  
403c 32 77 fb			ld (debug_mark),a  
403f 3a 4e 40			ld a, (.dmark+1)  
4042 32 78 fb			ld (debug_mark+1),a  
4045 3a 4f 40			ld a, (.dmark+2)  
4048 32 79 fb			ld (debug_mark+2),a  
404b 18 03			jr .pastdmark  
404d ..			.dmark: db "PTR"  
4050 f1			.pastdmark: pop af  
4051			endm  
# End of macro DMARK
4051						CALLMONITOR 
4051 cd 97 16			call break_point_state  
4054				endm  
# End of macro CALLMONITOR
4054					endif 
4054					FORTH_DSP_VALUEHL 
4054 cd 1b 1e			call macro_dsp_valuehl 
4057				endm 
# End of macro FORTH_DSP_VALUEHL
4057 cd 24 1c				call forth_push_numhl 
405a			 
405a			 
405a					NEXTW 
405a c3 8d 1f			jp macro_next 
405d				endm 
# End of macro NEXTW
405d			.STYPE: 
405d				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
405d 48				db WORD_SYS_CORE+52             
405e ac 40			dw .UPPER            
4060 06				db 5 + 1 
4061 .. 00			db "STYPE",0              
4067				endm 
# End of macro CWHEAD
4067			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
4067					if DEBUG_FORTH_WORDS_KEY 
4067						DMARK "STY" 
4067 f5				push af  
4068 3a 7c 40			ld a, (.dmark)  
406b 32 77 fb			ld (debug_mark),a  
406e 3a 7d 40			ld a, (.dmark+1)  
4071 32 78 fb			ld (debug_mark+1),a  
4074 3a 7e 40			ld a, (.dmark+2)  
4077 32 79 fb			ld (debug_mark+2),a  
407a 18 03			jr .pastdmark  
407c ..			.dmark: db "STY"  
407f f1			.pastdmark: pop af  
4080			endm  
# End of macro DMARK
4080						CALLMONITOR 
4080 cd 97 16			call break_point_state  
4083				endm  
# End of macro CALLMONITOR
4083					endif 
4083					FORTH_DSP 
4083 cd e1 1d			call macro_forth_dsp 
4086				endm 
# End of macro FORTH_DSP
4086					;v5 FORTH_DSP_VALUE 
4086			 
4086 7e					ld a, (hl) 
4087			 
4087 f5					push af 
4088			 
4088			; Dont destroy TOS		FORTH_DSP_POP 
4088			 
4088 f1					pop af 
4089			 
4089 fe 01				cp DS_TYPE_STR 
408b 28 09				jr z, .typestr 
408d			 
408d fe 02				cp DS_TYPE_INUM 
408f 28 0a				jr z, .typeinum 
4091			 
4091 21 aa 40				ld hl, .tna 
4094 18 0a				jr .tpush 
4096			 
4096 21 a6 40		.typestr:	ld hl, .tstr 
4099 18 05				jr .tpush 
409b 21 a8 40		.typeinum:	ld hl, .tinum 
409e 18 00				jr .tpush 
40a0			 
40a0			.tpush: 
40a0			 
40a0 cd 92 1c				call forth_push_str 
40a3			 
40a3					NEXTW 
40a3 c3 8d 1f			jp macro_next 
40a6				endm 
# End of macro NEXTW
40a6 .. 00		.tstr:	db "s",0 
40a8 .. 00		.tinum:  db "i",0 
40aa .. 00		.tna:   db "?", 0 
40ac			 
40ac			 
40ac			.UPPER: 
40ac				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
40ac 48				db WORD_SYS_CORE+52             
40ad e7 40			dw .LOWER            
40af 06				db 5 + 1 
40b0 .. 00			db "UPPER",0              
40b6				endm 
# End of macro CWHEAD
40b6			; | UPPER ( s -- s ) Upper case string s  | DONE 
40b6					if DEBUG_FORTH_WORDS_KEY 
40b6						DMARK "UPR" 
40b6 f5				push af  
40b7 3a cb 40			ld a, (.dmark)  
40ba 32 77 fb			ld (debug_mark),a  
40bd 3a cc 40			ld a, (.dmark+1)  
40c0 32 78 fb			ld (debug_mark+1),a  
40c3 3a cd 40			ld a, (.dmark+2)  
40c6 32 79 fb			ld (debug_mark+2),a  
40c9 18 03			jr .pastdmark  
40cb ..			.dmark: db "UPR"  
40ce f1			.pastdmark: pop af  
40cf			endm  
# End of macro DMARK
40cf						CALLMONITOR 
40cf cd 97 16			call break_point_state  
40d2				endm  
# End of macro CALLMONITOR
40d2					endif 
40d2			 
40d2					FORTH_DSP 
40d2 cd e1 1d			call macro_forth_dsp 
40d5				endm 
# End of macro FORTH_DSP
40d5					 
40d5			; TODO check is string type 
40d5			 
40d5					FORTH_DSP_VALUEHL 
40d5 cd 1b 1e			call macro_dsp_valuehl 
40d8				endm 
# End of macro FORTH_DSP_VALUEHL
40d8			; get pointer to string in hl 
40d8			 
40d8 7e			.toup:		ld a, (hl) 
40d9 fe 00				cp 0 
40db 28 07				jr z, .toupdone 
40dd			 
40dd cd 76 10				call to_upper 
40e0			 
40e0 77					ld (hl), a 
40e1 23					inc hl 
40e2 18 f4				jr .toup 
40e4			 
40e4					 
40e4			 
40e4			 
40e4			; for each char convert to upper 
40e4					 
40e4			.toupdone: 
40e4			 
40e4			 
40e4					NEXTW 
40e4 c3 8d 1f			jp macro_next 
40e7				endm 
# End of macro NEXTW
40e7			.LOWER: 
40e7				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
40e7 48				db WORD_SYS_CORE+52             
40e8 22 41			dw .TCASE            
40ea 06				db 5 + 1 
40eb .. 00			db "LOWER",0              
40f1				endm 
# End of macro CWHEAD
40f1			; | LOWER ( s -- s ) Lower case string s  | DONE 
40f1					if DEBUG_FORTH_WORDS_KEY 
40f1						DMARK "LWR" 
40f1 f5				push af  
40f2 3a 06 41			ld a, (.dmark)  
40f5 32 77 fb			ld (debug_mark),a  
40f8 3a 07 41			ld a, (.dmark+1)  
40fb 32 78 fb			ld (debug_mark+1),a  
40fe 3a 08 41			ld a, (.dmark+2)  
4101 32 79 fb			ld (debug_mark+2),a  
4104 18 03			jr .pastdmark  
4106 ..			.dmark: db "LWR"  
4109 f1			.pastdmark: pop af  
410a			endm  
# End of macro DMARK
410a						CALLMONITOR 
410a cd 97 16			call break_point_state  
410d				endm  
# End of macro CALLMONITOR
410d					endif 
410d			 
410d					FORTH_DSP 
410d cd e1 1d			call macro_forth_dsp 
4110				endm 
# End of macro FORTH_DSP
4110					 
4110			; TODO check is string type 
4110			 
4110					FORTH_DSP_VALUEHL 
4110 cd 1b 1e			call macro_dsp_valuehl 
4113				endm 
# End of macro FORTH_DSP_VALUEHL
4113			; get pointer to string in hl 
4113			 
4113 7e			.tolow:		ld a, (hl) 
4114 fe 00				cp 0 
4116 28 07				jr z, .tolowdone 
4118			 
4118 cd 7f 10				call to_lower 
411b			 
411b 77					ld (hl), a 
411c 23					inc hl 
411d 18 f4				jr .tolow 
411f			 
411f					 
411f			 
411f			 
411f			; for each char convert to low 
411f					 
411f			.tolowdone: 
411f					NEXTW 
411f c3 8d 1f			jp macro_next 
4122				endm 
# End of macro NEXTW
4122			.TCASE: 
4122				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4122 48				db WORD_SYS_CORE+52             
4123 58 42			dw .SUBSTR            
4125 06				db 5 + 1 
4126 .. 00			db "TCASE",0              
412c				endm 
# End of macro CWHEAD
412c			; | TCASE ( s -- s ) Title case string s  | DONE 
412c					if DEBUG_FORTH_WORDS_KEY 
412c						DMARK "TCS" 
412c f5				push af  
412d 3a 41 41			ld a, (.dmark)  
4130 32 77 fb			ld (debug_mark),a  
4133 3a 42 41			ld a, (.dmark+1)  
4136 32 78 fb			ld (debug_mark+1),a  
4139 3a 43 41			ld a, (.dmark+2)  
413c 32 79 fb			ld (debug_mark+2),a  
413f 18 03			jr .pastdmark  
4141 ..			.dmark: db "TCS"  
4144 f1			.pastdmark: pop af  
4145			endm  
# End of macro DMARK
4145						CALLMONITOR 
4145 cd 97 16			call break_point_state  
4148				endm  
# End of macro CALLMONITOR
4148					endif 
4148			 
4148					FORTH_DSP 
4148 cd e1 1d			call macro_forth_dsp 
414b				endm 
# End of macro FORTH_DSP
414b					 
414b			; TODO check is string type 
414b			 
414b					FORTH_DSP_VALUEHL 
414b cd 1b 1e			call macro_dsp_valuehl 
414e				endm 
# End of macro FORTH_DSP_VALUEHL
414e			; get pointer to string in hl 
414e			 
414e					if DEBUG_FORTH_WORDS 
414e						DMARK "TC1" 
414e f5				push af  
414f 3a 63 41			ld a, (.dmark)  
4152 32 77 fb			ld (debug_mark),a  
4155 3a 64 41			ld a, (.dmark+1)  
4158 32 78 fb			ld (debug_mark+1),a  
415b 3a 65 41			ld a, (.dmark+2)  
415e 32 79 fb			ld (debug_mark+2),a  
4161 18 03			jr .pastdmark  
4163 ..			.dmark: db "TC1"  
4166 f1			.pastdmark: pop af  
4167			endm  
# End of macro DMARK
4167						CALLMONITOR 
4167 cd 97 16			call break_point_state  
416a				endm  
# End of macro CALLMONITOR
416a					endif 
416a			 
416a					; first time in turn to upper case first char 
416a			 
416a 7e					ld a, (hl) 
416b c3 f5 41				jp .totsiptou 
416e			 
416e			 
416e 7e			.tot:		ld a, (hl) 
416f fe 00				cp 0 
4171 ca 39 42				jp z, .totdone 
4174			 
4174					if DEBUG_FORTH_WORDS 
4174						DMARK "TC2" 
4174 f5				push af  
4175 3a 89 41			ld a, (.dmark)  
4178 32 77 fb			ld (debug_mark),a  
417b 3a 8a 41			ld a, (.dmark+1)  
417e 32 78 fb			ld (debug_mark+1),a  
4181 3a 8b 41			ld a, (.dmark+2)  
4184 32 79 fb			ld (debug_mark+2),a  
4187 18 03			jr .pastdmark  
4189 ..			.dmark: db "TC2"  
418c f1			.pastdmark: pop af  
418d			endm  
# End of macro DMARK
418d						CALLMONITOR 
418d cd 97 16			call break_point_state  
4190				endm  
# End of macro CALLMONITOR
4190					endif 
4190					; check to see if current char is a space 
4190			 
4190 fe 20				cp ' ' 
4192 28 21				jr z, .totsp 
4194 cd 7f 10				call to_lower 
4197					if DEBUG_FORTH_WORDS 
4197						DMARK "TC3" 
4197 f5				push af  
4198 3a ac 41			ld a, (.dmark)  
419b 32 77 fb			ld (debug_mark),a  
419e 3a ad 41			ld a, (.dmark+1)  
41a1 32 78 fb			ld (debug_mark+1),a  
41a4 3a ae 41			ld a, (.dmark+2)  
41a7 32 79 fb			ld (debug_mark+2),a  
41aa 18 03			jr .pastdmark  
41ac ..			.dmark: db "TC3"  
41af f1			.pastdmark: pop af  
41b0			endm  
# End of macro DMARK
41b0						CALLMONITOR 
41b0 cd 97 16			call break_point_state  
41b3				endm  
# End of macro CALLMONITOR
41b3					endif 
41b3 18 63				jr .totnxt 
41b5			 
41b5			.totsp:         ; on a space, find next char which should be upper 
41b5			 
41b5					if DEBUG_FORTH_WORDS 
41b5						DMARK "TC4" 
41b5 f5				push af  
41b6 3a ca 41			ld a, (.dmark)  
41b9 32 77 fb			ld (debug_mark),a  
41bc 3a cb 41			ld a, (.dmark+1)  
41bf 32 78 fb			ld (debug_mark+1),a  
41c2 3a cc 41			ld a, (.dmark+2)  
41c5 32 79 fb			ld (debug_mark+2),a  
41c8 18 03			jr .pastdmark  
41ca ..			.dmark: db "TC4"  
41cd f1			.pastdmark: pop af  
41ce			endm  
# End of macro DMARK
41ce						CALLMONITOR 
41ce cd 97 16			call break_point_state  
41d1				endm  
# End of macro CALLMONITOR
41d1					endif 
41d1					;; 
41d1			 
41d1 fe 20				cp ' ' 
41d3 20 20				jr nz, .totsiptou 
41d5 23					inc hl 
41d6 7e					ld a, (hl) 
41d7					if DEBUG_FORTH_WORDS 
41d7						DMARK "TC5" 
41d7 f5				push af  
41d8 3a ec 41			ld a, (.dmark)  
41db 32 77 fb			ld (debug_mark),a  
41de 3a ed 41			ld a, (.dmark+1)  
41e1 32 78 fb			ld (debug_mark+1),a  
41e4 3a ee 41			ld a, (.dmark+2)  
41e7 32 79 fb			ld (debug_mark+2),a  
41ea 18 03			jr .pastdmark  
41ec ..			.dmark: db "TC5"  
41ef f1			.pastdmark: pop af  
41f0			endm  
# End of macro DMARK
41f0						CALLMONITOR 
41f0 cd 97 16			call break_point_state  
41f3				endm  
# End of macro CALLMONITOR
41f3					endif 
41f3 18 c0				jr .totsp 
41f5 fe 00		.totsiptou:    cp 0 
41f7 28 40				jr z, .totdone 
41f9					; not space and not zero term so upper case it 
41f9 cd 76 10				call to_upper 
41fc			 
41fc					if DEBUG_FORTH_WORDS 
41fc						DMARK "TC6" 
41fc f5				push af  
41fd 3a 11 42			ld a, (.dmark)  
4200 32 77 fb			ld (debug_mark),a  
4203 3a 12 42			ld a, (.dmark+1)  
4206 32 78 fb			ld (debug_mark+1),a  
4209 3a 13 42			ld a, (.dmark+2)  
420c 32 79 fb			ld (debug_mark+2),a  
420f 18 03			jr .pastdmark  
4211 ..			.dmark: db "TC6"  
4214 f1			.pastdmark: pop af  
4215			endm  
# End of macro DMARK
4215						CALLMONITOR 
4215 cd 97 16			call break_point_state  
4218				endm  
# End of macro CALLMONITOR
4218					endif 
4218			 
4218			 
4218			.totnxt: 
4218			 
4218 77					ld (hl), a 
4219 23					inc hl 
421a					if DEBUG_FORTH_WORDS 
421a						DMARK "TC7" 
421a f5				push af  
421b 3a 2f 42			ld a, (.dmark)  
421e 32 77 fb			ld (debug_mark),a  
4221 3a 30 42			ld a, (.dmark+1)  
4224 32 78 fb			ld (debug_mark+1),a  
4227 3a 31 42			ld a, (.dmark+2)  
422a 32 79 fb			ld (debug_mark+2),a  
422d 18 03			jr .pastdmark  
422f ..			.dmark: db "TC7"  
4232 f1			.pastdmark: pop af  
4233			endm  
# End of macro DMARK
4233						CALLMONITOR 
4233 cd 97 16			call break_point_state  
4236				endm  
# End of macro CALLMONITOR
4236					endif 
4236 c3 6e 41				jp .tot 
4239			 
4239					 
4239			 
4239			 
4239			; for each char convert to low 
4239					 
4239			.totdone: 
4239					if DEBUG_FORTH_WORDS 
4239						DMARK "TCd" 
4239 f5				push af  
423a 3a 4e 42			ld a, (.dmark)  
423d 32 77 fb			ld (debug_mark),a  
4240 3a 4f 42			ld a, (.dmark+1)  
4243 32 78 fb			ld (debug_mark+1),a  
4246 3a 50 42			ld a, (.dmark+2)  
4249 32 79 fb			ld (debug_mark+2),a  
424c 18 03			jr .pastdmark  
424e ..			.dmark: db "TCd"  
4251 f1			.pastdmark: pop af  
4252			endm  
# End of macro DMARK
4252						CALLMONITOR 
4252 cd 97 16			call break_point_state  
4255				endm  
# End of macro CALLMONITOR
4255					endif 
4255					NEXTW 
4255 c3 8d 1f			jp macro_next 
4258				endm 
# End of macro NEXTW
4258			 
4258			.SUBSTR: 
4258				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4258 48				db WORD_SYS_CORE+52             
4259 b6 42			dw .LEFT            
425b 07				db 6 + 1 
425c .. 00			db "SUBSTR",0              
4263				endm 
# End of macro CWHEAD
4263			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
4263			 
4263					if DEBUG_FORTH_WORDS_KEY 
4263						DMARK "SST" 
4263 f5				push af  
4264 3a 78 42			ld a, (.dmark)  
4267 32 77 fb			ld (debug_mark),a  
426a 3a 79 42			ld a, (.dmark+1)  
426d 32 78 fb			ld (debug_mark+1),a  
4270 3a 7a 42			ld a, (.dmark+2)  
4273 32 79 fb			ld (debug_mark+2),a  
4276 18 03			jr .pastdmark  
4278 ..			.dmark: db "SST"  
427b f1			.pastdmark: pop af  
427c			endm  
# End of macro DMARK
427c						CALLMONITOR 
427c cd 97 16			call break_point_state  
427f				endm  
# End of macro CALLMONITOR
427f					endif 
427f			; TODO check string type 
427f					FORTH_DSP_VALUEHL 
427f cd 1b 1e			call macro_dsp_valuehl 
4282				endm 
# End of macro FORTH_DSP_VALUEHL
4282			 
4282 e5					push hl      ; string length 
4283			 
4283					FORTH_DSP_POP 
4283 cd d3 1e			call macro_forth_dsp_pop 
4286				endm 
# End of macro FORTH_DSP_POP
4286			 
4286					FORTH_DSP_VALUEHL 
4286 cd 1b 1e			call macro_dsp_valuehl 
4289				endm 
# End of macro FORTH_DSP_VALUEHL
4289			 
4289 e5					push hl     ; start char 
428a			 
428a					FORTH_DSP_POP 
428a cd d3 1e			call macro_forth_dsp_pop 
428d				endm 
# End of macro FORTH_DSP_POP
428d			 
428d			 
428d					FORTH_DSP_VALUE 
428d cd 04 1e			call macro_forth_dsp_value 
4290				endm 
# End of macro FORTH_DSP_VALUE
4290			 
4290 d1					pop de    ; get start post offset 
4291			 
4291 19					add hl, de    ; starting offset 
4292			 
4292 c1					pop bc 
4293 c5					push bc      ; grab size of string 
4294			 
4294 e5					push hl    ; save string start  
4295			 
4295 26 00				ld h, 0 
4297 69					ld l, c 
4298 23					inc hl 
4299 23					inc hl 
429a			 
429a cd d0 11				call malloc 
429d				if DEBUG_FORTH_MALLOC_GUARD 
429d cc 48 52				call z,malloc_error 
42a0				endif 
42a0			 
42a0 eb					ex de, hl      ; save malloc area for string copy 
42a1 e1					pop hl    ; get back source 
42a2 c1					pop bc    ; get length of string back 
42a3			 
42a3 d5					push de    ; save malloc area for after we push 
42a4 ed b0				ldir     ; copy substr 
42a6			 
42a6			 
42a6 eb					ex de, hl 
42a7 3e 00				ld a, 0 
42a9 77					ld (hl), a   ; term substr 
42aa			 
42aa					 
42aa e1					pop hl    ; get malloc so we can push it 
42ab e5					push hl   ; save so we can free it afterwards 
42ac			 
42ac cd 92 1c				call forth_push_str 
42af			 
42af e1					pop hl 
42b0 cd 9a 12				call free 
42b3			 
42b3					 
42b3					 
42b3			 
42b3			 
42b3					NEXTW 
42b3 c3 8d 1f			jp macro_next 
42b6				endm 
# End of macro NEXTW
42b6			 
42b6			.LEFT: 
42b6				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
42b6 48				db WORD_SYS_CORE+52             
42b7 de 42			dw .RIGHT            
42b9 05				db 4 + 1 
42ba .. 00			db "LEFT",0              
42bf				endm 
# End of macro CWHEAD
42bf			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
42bf					if DEBUG_FORTH_WORDS_KEY 
42bf						DMARK "LEF" 
42bf f5				push af  
42c0 3a d4 42			ld a, (.dmark)  
42c3 32 77 fb			ld (debug_mark),a  
42c6 3a d5 42			ld a, (.dmark+1)  
42c9 32 78 fb			ld (debug_mark+1),a  
42cc 3a d6 42			ld a, (.dmark+2)  
42cf 32 79 fb			ld (debug_mark+2),a  
42d2 18 03			jr .pastdmark  
42d4 ..			.dmark: db "LEF"  
42d7 f1			.pastdmark: pop af  
42d8			endm  
# End of macro DMARK
42d8						CALLMONITOR 
42d8 cd 97 16			call break_point_state  
42db				endm  
# End of macro CALLMONITOR
42db					endif 
42db			 
42db					NEXTW 
42db c3 8d 1f			jp macro_next 
42de				endm 
# End of macro NEXTW
42de			.RIGHT: 
42de				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
42de 48				db WORD_SYS_CORE+52             
42df 07 43			dw .STR2NUM            
42e1 06				db 5 + 1 
42e2 .. 00			db "RIGHT",0              
42e8				endm 
# End of macro CWHEAD
42e8			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
42e8					if DEBUG_FORTH_WORDS_KEY 
42e8						DMARK "RIG" 
42e8 f5				push af  
42e9 3a fd 42			ld a, (.dmark)  
42ec 32 77 fb			ld (debug_mark),a  
42ef 3a fe 42			ld a, (.dmark+1)  
42f2 32 78 fb			ld (debug_mark+1),a  
42f5 3a ff 42			ld a, (.dmark+2)  
42f8 32 79 fb			ld (debug_mark+2),a  
42fb 18 03			jr .pastdmark  
42fd ..			.dmark: db "RIG"  
4300 f1			.pastdmark: pop af  
4301			endm  
# End of macro DMARK
4301						CALLMONITOR 
4301 cd 97 16			call break_point_state  
4304				endm  
# End of macro CALLMONITOR
4304					endif 
4304			 
4304					NEXTW 
4304 c3 8d 1f			jp macro_next 
4307				endm 
# End of macro NEXTW
4307			 
4307			 
4307			.STR2NUM: 
4307				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4307 48				db WORD_SYS_CORE+52             
4308 93 43			dw .NUM2STR            
430a 08				db 7 + 1 
430b .. 00			db "STR2NUM",0              
4313				endm 
# End of macro CWHEAD
4313			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4313			 
4313			 
4313			; TODO STR type check to do 
4313					if DEBUG_FORTH_WORDS_KEY 
4313						DMARK "S2N" 
4313 f5				push af  
4314 3a 28 43			ld a, (.dmark)  
4317 32 77 fb			ld (debug_mark),a  
431a 3a 29 43			ld a, (.dmark+1)  
431d 32 78 fb			ld (debug_mark+1),a  
4320 3a 2a 43			ld a, (.dmark+2)  
4323 32 79 fb			ld (debug_mark+2),a  
4326 18 03			jr .pastdmark  
4328 ..			.dmark: db "S2N"  
432b f1			.pastdmark: pop af  
432c			endm  
# End of macro DMARK
432c						CALLMONITOR 
432c cd 97 16			call break_point_state  
432f				endm  
# End of macro CALLMONITOR
432f					endif 
432f			 
432f					;FORTH_DSP 
432f					FORTH_DSP_VALUE 
432f cd 04 1e			call macro_forth_dsp_value 
4332				endm 
# End of macro FORTH_DSP_VALUE
4332					;inc hl 
4332			 
4332 eb					ex de, hl 
4333					if DEBUG_FORTH_WORDS 
4333						DMARK "S2a" 
4333 f5				push af  
4334 3a 48 43			ld a, (.dmark)  
4337 32 77 fb			ld (debug_mark),a  
433a 3a 49 43			ld a, (.dmark+1)  
433d 32 78 fb			ld (debug_mark+1),a  
4340 3a 4a 43			ld a, (.dmark+2)  
4343 32 79 fb			ld (debug_mark+2),a  
4346 18 03			jr .pastdmark  
4348 ..			.dmark: db "S2a"  
434b f1			.pastdmark: pop af  
434c			endm  
# End of macro DMARK
434c						CALLMONITOR 
434c cd 97 16			call break_point_state  
434f				endm  
# End of macro CALLMONITOR
434f					endif 
434f cd fe 10				call string_to_uint16 
4352			 
4352					if DEBUG_FORTH_WORDS 
4352						DMARK "S2b" 
4352 f5				push af  
4353 3a 67 43			ld a, (.dmark)  
4356 32 77 fb			ld (debug_mark),a  
4359 3a 68 43			ld a, (.dmark+1)  
435c 32 78 fb			ld (debug_mark+1),a  
435f 3a 69 43			ld a, (.dmark+2)  
4362 32 79 fb			ld (debug_mark+2),a  
4365 18 03			jr .pastdmark  
4367 ..			.dmark: db "S2b"  
436a f1			.pastdmark: pop af  
436b			endm  
# End of macro DMARK
436b						CALLMONITOR 
436b cd 97 16			call break_point_state  
436e				endm  
# End of macro CALLMONITOR
436e					endif 
436e			;		push hl 
436e					FORTH_DSP_POP 
436e cd d3 1e			call macro_forth_dsp_pop 
4371				endm 
# End of macro FORTH_DSP_POP
4371			;		pop hl 
4371					 
4371					if DEBUG_FORTH_WORDS 
4371						DMARK "S2b" 
4371 f5				push af  
4372 3a 86 43			ld a, (.dmark)  
4375 32 77 fb			ld (debug_mark),a  
4378 3a 87 43			ld a, (.dmark+1)  
437b 32 78 fb			ld (debug_mark+1),a  
437e 3a 88 43			ld a, (.dmark+2)  
4381 32 79 fb			ld (debug_mark+2),a  
4384 18 03			jr .pastdmark  
4386 ..			.dmark: db "S2b"  
4389 f1			.pastdmark: pop af  
438a			endm  
# End of macro DMARK
438a						CALLMONITOR 
438a cd 97 16			call break_point_state  
438d				endm  
# End of macro CALLMONITOR
438d					endif 
438d cd 24 1c				call forth_push_numhl	 
4390			 
4390				 
4390				       NEXTW 
4390 c3 8d 1f			jp macro_next 
4393				endm 
# End of macro NEXTW
4393			.NUM2STR: 
4393				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4393 48				db WORD_SYS_CORE+52             
4394 a2 43			dw .CONCAT            
4396 08				db 7 + 1 
4397 .. 00			db "NUM2STR",0              
439f				endm 
# End of macro CWHEAD
439f			; | NUM2STR ( n -- s ) Convert a number on TOS to string | NOT DOING 
439f			 
439f			;		; malloc a string to target 
439f			;		ld hl, 10     ; TODO max string size should be fine 
439f			;		call malloc 
439f			;		push hl    ; save malloc location 
439f			; 
439f			; 
439f			;; TODO check int type 
439f			;		FORTH_DSP_VALUEHL 
439f			;		ld a, l 
439f			;		call DispAToASCII   
439f			;;TODO need to chage above call to dump into string 
439f			; 
439f			; 
439f			 
439f				       NEXTW 
439f c3 8d 1f			jp macro_next 
43a2				endm 
# End of macro NEXTW
43a2			 
43a2			.CONCAT: 
43a2				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
43a2 48				db WORD_SYS_CORE+52             
43a3 55 44			dw .FIND            
43a5 07				db 6 + 1 
43a6 .. 00			db "CONCAT",0              
43ad				endm 
# End of macro CWHEAD
43ad			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
43ad			 
43ad			; TODO check string type 
43ad			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
43ad			 
43ad					if DEBUG_FORTH_WORDS_KEY 
43ad						DMARK "CON" 
43ad f5				push af  
43ae 3a c2 43			ld a, (.dmark)  
43b1 32 77 fb			ld (debug_mark),a  
43b4 3a c3 43			ld a, (.dmark+1)  
43b7 32 78 fb			ld (debug_mark+1),a  
43ba 3a c4 43			ld a, (.dmark+2)  
43bd 32 79 fb			ld (debug_mark+2),a  
43c0 18 03			jr .pastdmark  
43c2 ..			.dmark: db "CON"  
43c5 f1			.pastdmark: pop af  
43c6			endm  
# End of macro DMARK
43c6						CALLMONITOR 
43c6 cd 97 16			call break_point_state  
43c9				endm  
# End of macro CALLMONITOR
43c9					endif 
43c9			 
43c9			 
43c9					FORTH_DSP_VALUE 
43c9 cd 04 1e			call macro_forth_dsp_value 
43cc				endm 
# End of macro FORTH_DSP_VALUE
43cc e5					push hl   ; s2 
43cd			 
43cd					FORTH_DSP_POP 
43cd cd d3 1e			call macro_forth_dsp_pop 
43d0				endm 
# End of macro FORTH_DSP_POP
43d0			 
43d0					FORTH_DSP_VALUE 
43d0 cd 04 1e			call macro_forth_dsp_value 
43d3				endm 
# End of macro FORTH_DSP_VALUE
43d3			 
43d3 e5					push hl   ; s1 
43d4			 
43d4					FORTH_DSP_POP 
43d4 cd d3 1e			call macro_forth_dsp_pop 
43d7				endm 
# End of macro FORTH_DSP_POP
43d7					 
43d7			 
43d7					; copy s1 
43d7			 
43d7				 
43d7					; save ptr 
43d7 e1					pop hl  
43d8 e5					push hl 
43d9 3e 00				ld a, 0 
43db cd 72 11				call strlent 
43de					;inc hl    ; zer0 
43de 06 00				ld b, 0 
43e0 4d					ld c, l 
43e1 e1					pop hl		 
43e2 11 1d ee				ld de, scratch	 
43e5					if DEBUG_FORTH_WORDS 
43e5						DMARK "CO1" 
43e5 f5				push af  
43e6 3a fa 43			ld a, (.dmark)  
43e9 32 77 fb			ld (debug_mark),a  
43ec 3a fb 43			ld a, (.dmark+1)  
43ef 32 78 fb			ld (debug_mark+1),a  
43f2 3a fc 43			ld a, (.dmark+2)  
43f5 32 79 fb			ld (debug_mark+2),a  
43f8 18 03			jr .pastdmark  
43fa ..			.dmark: db "CO1"  
43fd f1			.pastdmark: pop af  
43fe			endm  
# End of macro DMARK
43fe						CALLMONITOR 
43fe cd 97 16			call break_point_state  
4401				endm  
# End of macro CALLMONITOR
4401					endif 
4401 ed b0				ldir 
4403			 
4403 e1					pop hl 
4404 e5					push hl 
4405 d5					push de 
4406			 
4406			 
4406 3e 00				ld a, 0 
4408 cd 72 11				call strlent 
440b 23					inc hl    ; zer0 
440c 23					inc hl 
440d 06 00				ld b, 0 
440f 4d					ld c, l 
4410 d1					pop de 
4411 e1					pop hl		 
4412					if DEBUG_FORTH_WORDS 
4412						DMARK "CO2" 
4412 f5				push af  
4413 3a 27 44			ld a, (.dmark)  
4416 32 77 fb			ld (debug_mark),a  
4419 3a 28 44			ld a, (.dmark+1)  
441c 32 78 fb			ld (debug_mark+1),a  
441f 3a 29 44			ld a, (.dmark+2)  
4422 32 79 fb			ld (debug_mark+2),a  
4425 18 03			jr .pastdmark  
4427 ..			.dmark: db "CO2"  
442a f1			.pastdmark: pop af  
442b			endm  
# End of macro DMARK
442b						CALLMONITOR 
442b cd 97 16			call break_point_state  
442e				endm  
# End of macro CALLMONITOR
442e					endif 
442e ed b0				ldir 
4430			 
4430			 
4430			 
4430 21 1d ee				ld hl, scratch 
4433					if DEBUG_FORTH_WORDS 
4433						DMARK "CO5" 
4433 f5				push af  
4434 3a 48 44			ld a, (.dmark)  
4437 32 77 fb			ld (debug_mark),a  
443a 3a 49 44			ld a, (.dmark+1)  
443d 32 78 fb			ld (debug_mark+1),a  
4440 3a 4a 44			ld a, (.dmark+2)  
4443 32 79 fb			ld (debug_mark+2),a  
4446 18 03			jr .pastdmark  
4448 ..			.dmark: db "CO5"  
444b f1			.pastdmark: pop af  
444c			endm  
# End of macro DMARK
444c						CALLMONITOR 
444c cd 97 16			call break_point_state  
444f				endm  
# End of macro CALLMONITOR
444f					endif 
444f			 
444f cd 92 1c				call forth_push_str 
4452			 
4452			 
4452			 
4452			 
4452				       NEXTW 
4452 c3 8d 1f			jp macro_next 
4455				endm 
# End of macro NEXTW
4455			 
4455			 
4455			.FIND: 
4455				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4455 4b				db WORD_SYS_CORE+55             
4456 13 45			dw .LEN            
4458 05				db 4 + 1 
4459 .. 00			db "FIND",0              
445e				endm 
# End of macro CWHEAD
445e			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
445e			 
445e					if DEBUG_FORTH_WORDS_KEY 
445e						DMARK "FND" 
445e f5				push af  
445f 3a 73 44			ld a, (.dmark)  
4462 32 77 fb			ld (debug_mark),a  
4465 3a 74 44			ld a, (.dmark+1)  
4468 32 78 fb			ld (debug_mark+1),a  
446b 3a 75 44			ld a, (.dmark+2)  
446e 32 79 fb			ld (debug_mark+2),a  
4471 18 03			jr .pastdmark  
4473 ..			.dmark: db "FND"  
4476 f1			.pastdmark: pop af  
4477			endm  
# End of macro DMARK
4477						CALLMONITOR 
4477 cd 97 16			call break_point_state  
447a				endm  
# End of macro CALLMONITOR
447a					endif 
447a			 
447a			; TODO check string type 
447a					FORTH_DSP_VALUE 
447a cd 04 1e			call macro_forth_dsp_value 
447d				endm 
# End of macro FORTH_DSP_VALUE
447d			 
447d e5					push hl    
447e 7e					ld a,(hl)    ; char to find   
447f			; TODO change char to substr 
447f			 
447f f5					push af 
4480					 
4480			 
4480			 
4480					if DEBUG_FORTH_WORDS 
4480						DMARK "FN1" 
4480 f5				push af  
4481 3a 95 44			ld a, (.dmark)  
4484 32 77 fb			ld (debug_mark),a  
4487 3a 96 44			ld a, (.dmark+1)  
448a 32 78 fb			ld (debug_mark+1),a  
448d 3a 97 44			ld a, (.dmark+2)  
4490 32 79 fb			ld (debug_mark+2),a  
4493 18 03			jr .pastdmark  
4495 ..			.dmark: db "FN1"  
4498 f1			.pastdmark: pop af  
4499			endm  
# End of macro DMARK
4499						CALLMONITOR 
4499 cd 97 16			call break_point_state  
449c				endm  
# End of macro CALLMONITOR
449c					endif 
449c			 
449c					FORTH_DSP_POP 
449c cd d3 1e			call macro_forth_dsp_pop 
449f				endm 
# End of macro FORTH_DSP_POP
449f			 
449f					; string to search 
449f			 
449f					FORTH_DSP_VALUE 
449f cd 04 1e			call macro_forth_dsp_value 
44a2				endm 
# End of macro FORTH_DSP_VALUE
44a2			 
44a2 d1					pop de  ; d is char to find  
44a3			 
44a3					if DEBUG_FORTH_WORDS 
44a3						DMARK "FN2" 
44a3 f5				push af  
44a4 3a b8 44			ld a, (.dmark)  
44a7 32 77 fb			ld (debug_mark),a  
44aa 3a b9 44			ld a, (.dmark+1)  
44ad 32 78 fb			ld (debug_mark+1),a  
44b0 3a ba 44			ld a, (.dmark+2)  
44b3 32 79 fb			ld (debug_mark+2),a  
44b6 18 03			jr .pastdmark  
44b8 ..			.dmark: db "FN2"  
44bb f1			.pastdmark: pop af  
44bc			endm  
# End of macro DMARK
44bc						CALLMONITOR 
44bc cd 97 16			call break_point_state  
44bf				endm  
# End of macro CALLMONITOR
44bf					endif 
44bf					 
44bf 01 00 00				ld bc, 0 
44c2 7e			.findchar:      ld a,(hl) 
44c3 fe 00				cp 0   		 
44c5 28 27				jr z, .finddone     
44c7 ba					cp d 
44c8 28 20				jr z, .foundchar 
44ca 03					inc bc 
44cb 23					inc hl 
44cc					if DEBUG_FORTH_WORDS 
44cc						DMARK "FN3" 
44cc f5				push af  
44cd 3a e1 44			ld a, (.dmark)  
44d0 32 77 fb			ld (debug_mark),a  
44d3 3a e2 44			ld a, (.dmark+1)  
44d6 32 78 fb			ld (debug_mark+1),a  
44d9 3a e3 44			ld a, (.dmark+2)  
44dc 32 79 fb			ld (debug_mark+2),a  
44df 18 03			jr .pastdmark  
44e1 ..			.dmark: db "FN3"  
44e4 f1			.pastdmark: pop af  
44e5			endm  
# End of macro DMARK
44e5						CALLMONITOR 
44e5 cd 97 16			call break_point_state  
44e8				endm  
# End of macro CALLMONITOR
44e8					endif 
44e8 18 d8				jr .findchar 
44ea			 
44ea			 
44ea c5			.foundchar:	push bc 
44eb e1					pop hl 
44ec 18 03				jr .findexit 
44ee			 
44ee			 
44ee							 
44ee			 
44ee			.finddone:     ; got to end of string with no find 
44ee 21 00 00				ld hl, 0 
44f1			.findexit: 
44f1			 
44f1					if DEBUG_FORTH_WORDS 
44f1						DMARK "FNd" 
44f1 f5				push af  
44f2 3a 06 45			ld a, (.dmark)  
44f5 32 77 fb			ld (debug_mark),a  
44f8 3a 07 45			ld a, (.dmark+1)  
44fb 32 78 fb			ld (debug_mark+1),a  
44fe 3a 08 45			ld a, (.dmark+2)  
4501 32 79 fb			ld (debug_mark+2),a  
4504 18 03			jr .pastdmark  
4506 ..			.dmark: db "FNd"  
4509 f1			.pastdmark: pop af  
450a			endm  
# End of macro DMARK
450a						CALLMONITOR 
450a cd 97 16			call break_point_state  
450d				endm  
# End of macro CALLMONITOR
450d					endif 
450d cd 24 1c			call forth_push_numhl 
4510			 
4510				       NEXTW 
4510 c3 8d 1f			jp macro_next 
4513				endm 
# End of macro NEXTW
4513			 
4513			.LEN: 
4513				CWHEAD .CHAR 56 "COUNT" 5 WORD_FLAG_CODE 
4513 4c				db WORD_SYS_CORE+56             
4514 48 45			dw .CHAR            
4516 06				db 5 + 1 
4517 .. 00			db "COUNT",0              
451d				endm 
# End of macro CWHEAD
451d			; | COUNT (  u1 -- u2 ) Push the length of the string on TOS | DONE 
451d			 
451d					if DEBUG_FORTH_WORDS_KEY 
451d						DMARK "CNT" 
451d f5				push af  
451e 3a 32 45			ld a, (.dmark)  
4521 32 77 fb			ld (debug_mark),a  
4524 3a 33 45			ld a, (.dmark+1)  
4527 32 78 fb			ld (debug_mark+1),a  
452a 3a 34 45			ld a, (.dmark+2)  
452d 32 79 fb			ld (debug_mark+2),a  
4530 18 03			jr .pastdmark  
4532 ..			.dmark: db "CNT"  
4535 f1			.pastdmark: pop af  
4536			endm  
# End of macro DMARK
4536						CALLMONITOR 
4536 cd 97 16			call break_point_state  
4539				endm  
# End of macro CALLMONITOR
4539					endif 
4539			; TODO check string type 
4539					FORTH_DSP 
4539 cd e1 1d			call macro_forth_dsp 
453c				endm 
# End of macro FORTH_DSP
453c					;v5FORTH_DSP_VALUE 
453c			 
453c 23					inc hl 
453d			 
453d 3e 00				ld a, 0 
453f cd 72 11				call strlent 
4542			 
4542 cd 24 1c				call forth_push_numhl 
4545			 
4545			 
4545			 
4545				       NEXTW 
4545 c3 8d 1f			jp macro_next 
4548				endm 
# End of macro NEXTW
4548			.CHAR: 
4548				CWHEAD .ENDSTR 57 "CHAR" 4 WORD_FLAG_CODE 
4548 4d				db WORD_SYS_CORE+57             
4549 7e 45			dw .ENDSTR            
454b 05				db 4 + 1 
454c .. 00			db "CHAR",0              
4551				endm 
# End of macro CWHEAD
4551			; | CHAR ( u -- n ) Get the ascii value of the first character of the string on the stack | DONE 
4551					if DEBUG_FORTH_WORDS_KEY 
4551						DMARK "CHR" 
4551 f5				push af  
4552 3a 66 45			ld a, (.dmark)  
4555 32 77 fb			ld (debug_mark),a  
4558 3a 67 45			ld a, (.dmark+1)  
455b 32 78 fb			ld (debug_mark+1),a  
455e 3a 68 45			ld a, (.dmark+2)  
4561 32 79 fb			ld (debug_mark+2),a  
4564 18 03			jr .pastdmark  
4566 ..			.dmark: db "CHR"  
4569 f1			.pastdmark: pop af  
456a			endm  
# End of macro DMARK
456a						CALLMONITOR 
456a cd 97 16			call break_point_state  
456d				endm  
# End of macro CALLMONITOR
456d					endif 
456d					FORTH_DSP 
456d cd e1 1d			call macro_forth_dsp 
4570				endm 
# End of macro FORTH_DSP
4570					;v5 FORTH_DSP_VALUE 
4570 23					inc hl      ; now at start of numeric as string 
4571			 
4571			;		push hl 
4571			 
4571					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4571 cd d3 1e			call macro_forth_dsp_pop 
4574				endm 
# End of macro FORTH_DSP_POP
4574			 
4574			;		pop hl 
4574			 
4574					; push the content of a onto the stack as a value 
4574			 
4574 7e					ld a,(hl)   ; get char 
4575 26 00				ld h,0 
4577 6f					ld l,a 
4578 cd 24 1c				call forth_push_numhl 
457b			 
457b				       NEXTW 
457b c3 8d 1f			jp macro_next 
457e				endm 
# End of macro NEXTW
457e			 
457e			 
457e			 
457e			 
457e			.ENDSTR: 
457e			; eof 
457e			 
# End of file forth_words_str.asm
457e			include "forth_words_key.asm" 
457e			 
457e			; | ## Keyboard Words 
457e			 
457e			.KEY: 
457e				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
457e 3e				db WORD_SYS_CORE+42             
457f ae 45			dw .WAITK            
4581 04				db 3 + 1 
4582 .. 00			db "KEY",0              
4586				endm 
# End of macro CWHEAD
4586			; | KEY ( -- w f ) Scan for keypress but do not wait true if next item on stack is key press | TODO 
4586			 
4586					if DEBUG_FORTH_WORDS_KEY 
4586						DMARK "KEY" 
4586 f5				push af  
4587 3a 9b 45			ld a, (.dmark)  
458a 32 77 fb			ld (debug_mark),a  
458d 3a 9c 45			ld a, (.dmark+1)  
4590 32 78 fb			ld (debug_mark+1),a  
4593 3a 9d 45			ld a, (.dmark+2)  
4596 32 79 fb			ld (debug_mark+2),a  
4599 18 03			jr .pastdmark  
459b ..			.dmark: db "KEY"  
459e f1			.pastdmark: pop af  
459f			endm  
# End of macro DMARK
459f						CALLMONITOR 
459f cd 97 16			call break_point_state  
45a2				endm  
# End of macro CALLMONITOR
45a2					endif 
45a2			; TODO currently waits 
45a2 cd 52 68				call cin 
45a5					;call cin_wait 
45a5 6f					ld l, a 
45a6 26 00				ld h, 0 
45a8 cd 24 1c				call forth_push_numhl 
45ab					NEXTW 
45ab c3 8d 1f			jp macro_next 
45ae				endm 
# End of macro NEXTW
45ae			.WAITK: 
45ae				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
45ae 3f				db WORD_SYS_CORE+43             
45af e0 45			dw .ACCEPT            
45b1 06				db 5 + 1 
45b2 .. 00			db "WAITK",0              
45b8				endm 
# End of macro CWHEAD
45b8			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
45b8					if DEBUG_FORTH_WORDS_KEY 
45b8						DMARK "WAI" 
45b8 f5				push af  
45b9 3a cd 45			ld a, (.dmark)  
45bc 32 77 fb			ld (debug_mark),a  
45bf 3a ce 45			ld a, (.dmark+1)  
45c2 32 78 fb			ld (debug_mark+1),a  
45c5 3a cf 45			ld a, (.dmark+2)  
45c8 32 79 fb			ld (debug_mark+2),a  
45cb 18 03			jr .pastdmark  
45cd ..			.dmark: db "WAI"  
45d0 f1			.pastdmark: pop af  
45d1			endm  
# End of macro DMARK
45d1						CALLMONITOR 
45d1 cd 97 16			call break_point_state  
45d4				endm  
# End of macro CALLMONITOR
45d4					endif 
45d4 cd 41 68				call cin_wait 
45d7 6f					ld l, a 
45d8 26 00				ld h, 0 
45da cd 24 1c				call forth_push_numhl 
45dd					NEXTW 
45dd c3 8d 1f			jp macro_next 
45e0				endm 
# End of macro NEXTW
45e0			.ACCEPT: 
45e0				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
45e0 40				db WORD_SYS_CORE+44             
45e1 3e 46			dw .EDIT            
45e3 07				db 6 + 1 
45e4 .. 00			db "ACCEPT",0              
45eb				endm 
# End of macro CWHEAD
45eb			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
45eb					; TODO crashes on push 
45eb					if DEBUG_FORTH_WORDS_KEY 
45eb						DMARK "ACC" 
45eb f5				push af  
45ec 3a 00 46			ld a, (.dmark)  
45ef 32 77 fb			ld (debug_mark),a  
45f2 3a 01 46			ld a, (.dmark+1)  
45f5 32 78 fb			ld (debug_mark+1),a  
45f8 3a 02 46			ld a, (.dmark+2)  
45fb 32 79 fb			ld (debug_mark+2),a  
45fe 18 03			jr .pastdmark  
4600 ..			.dmark: db "ACC"  
4603 f1			.pastdmark: pop af  
4604			endm  
# End of macro DMARK
4604						CALLMONITOR 
4604 cd 97 16			call break_point_state  
4607				endm  
# End of macro CALLMONITOR
4607					endif 
4607 21 1b f0				ld hl, os_input 
460a 3e 00				ld a, 0 
460c 77					ld (hl),a 
460d 3a 46 f8				ld a,(f_cursor_ptr) 
4610 16 64				ld d, 100 
4612 0e 00				ld c, 0 
4614 1e 28				ld e, 40 
4616 cd 36 0d				call input_str 
4619					; TODO perhaps do a type check and wrap in quotes if not a number 
4619 21 1b f0				ld hl, os_input 
461c					if DEBUG_FORTH_WORDS 
461c						DMARK "AC1" 
461c f5				push af  
461d 3a 31 46			ld a, (.dmark)  
4620 32 77 fb			ld (debug_mark),a  
4623 3a 32 46			ld a, (.dmark+1)  
4626 32 78 fb			ld (debug_mark+1),a  
4629 3a 33 46			ld a, (.dmark+2)  
462c 32 79 fb			ld (debug_mark+2),a  
462f 18 03			jr .pastdmark  
4631 ..			.dmark: db "AC1"  
4634 f1			.pastdmark: pop af  
4635			endm  
# End of macro DMARK
4635						CALLMONITOR 
4635 cd 97 16			call break_point_state  
4638				endm  
# End of macro CALLMONITOR
4638					endif 
4638 cd 92 1c				call forth_push_str 
463b					NEXTW 
463b c3 8d 1f			jp macro_next 
463e				endm 
# End of macro NEXTW
463e			 
463e			.EDIT: 
463e				CWHEAD .ENDKEY 44 "EDIT" 4 WORD_FLAG_CODE 
463e 40				db WORD_SYS_CORE+44             
463f c7 46			dw .ENDKEY            
4641 05				db 4 + 1 
4642 .. 00			db "EDIT",0              
4647				endm 
# End of macro CWHEAD
4647			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4647			 
4647					; TODO does not copy from stack 
4647					if DEBUG_FORTH_WORDS_KEY 
4647						DMARK "EDT" 
4647 f5				push af  
4648 3a 5c 46			ld a, (.dmark)  
464b 32 77 fb			ld (debug_mark),a  
464e 3a 5d 46			ld a, (.dmark+1)  
4651 32 78 fb			ld (debug_mark+1),a  
4654 3a 5e 46			ld a, (.dmark+2)  
4657 32 79 fb			ld (debug_mark+2),a  
465a 18 03			jr .pastdmark  
465c ..			.dmark: db "EDT"  
465f f1			.pastdmark: pop af  
4660			endm  
# End of macro DMARK
4660						CALLMONITOR 
4660 cd 97 16			call break_point_state  
4663				endm  
# End of macro CALLMONITOR
4663					endif 
4663			 
4663					FORTH_DSP 
4663 cd e1 1d			call macro_forth_dsp 
4666				endm 
# End of macro FORTH_DSP
4666					;v5 FORTH_DSP_VALUE 
4666 23					inc hl    ; TODO do type check 
4667			 
4667 e5					push hl 
4668 3e 00				ld a, 0 
466a cd 72 11				call strlent 
466d 23					inc hl 
466e			 
466e 06 00				ld b, 0 
4670 4d					ld c, l 
4671			 
4671 e1					pop hl 
4672 11 1b f0				ld de, os_input 
4675					if DEBUG_FORTH_WORDS_KEY 
4675						DMARK "EDc" 
4675 f5				push af  
4676 3a 8a 46			ld a, (.dmark)  
4679 32 77 fb			ld (debug_mark),a  
467c 3a 8b 46			ld a, (.dmark+1)  
467f 32 78 fb			ld (debug_mark+1),a  
4682 3a 8c 46			ld a, (.dmark+2)  
4685 32 79 fb			ld (debug_mark+2),a  
4688 18 03			jr .pastdmark  
468a ..			.dmark: db "EDc"  
468d f1			.pastdmark: pop af  
468e			endm  
# End of macro DMARK
468e						CALLMONITOR 
468e cd 97 16			call break_point_state  
4691				endm  
# End of macro CALLMONITOR
4691					endif 
4691 ed b0				ldir 
4693			 
4693			 
4693 21 1b f0				ld hl, os_input 
4696					;ld a, 0 
4696					;ld (hl),a 
4696 3a 46 f8				ld a,(f_cursor_ptr) 
4699 16 64				ld d, 100 
469b 0e 00				ld c, 0 
469d 1e 28				ld e, 40 
469f cd 36 0d				call input_str 
46a2					; TODO perhaps do a type check and wrap in quotes if not a number 
46a2 21 1b f0				ld hl, os_input 
46a5					if DEBUG_FORTH_WORDS 
46a5						DMARK "ED1" 
46a5 f5				push af  
46a6 3a ba 46			ld a, (.dmark)  
46a9 32 77 fb			ld (debug_mark),a  
46ac 3a bb 46			ld a, (.dmark+1)  
46af 32 78 fb			ld (debug_mark+1),a  
46b2 3a bc 46			ld a, (.dmark+2)  
46b5 32 79 fb			ld (debug_mark+2),a  
46b8 18 03			jr .pastdmark  
46ba ..			.dmark: db "ED1"  
46bd f1			.pastdmark: pop af  
46be			endm  
# End of macro DMARK
46be						CALLMONITOR 
46be cd 97 16			call break_point_state  
46c1				endm  
# End of macro CALLMONITOR
46c1					endif 
46c1 cd 92 1c				call forth_push_str 
46c4					NEXTW 
46c4 c3 8d 1f			jp macro_next 
46c7				endm 
# End of macro NEXTW
46c7			 
46c7			 
46c7			 
46c7			.ENDKEY: 
46c7			; eof 
46c7			 
# End of file forth_words_key.asm
46c7			 
46c7			if STORAGE_SE 
46c7			   	include "forth_words_storage.asm" 
46c7			 
46c7			; | ## Fixed Storage Words 
46c7			 
46c7			 
46c7			.BREAD: 
46c7			  
46c7				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
46c7 3a				db WORD_SYS_CORE+38             
46c8 40 47			dw .BWRITE            
46ca 06				db 5 + 1 
46cb .. 00			db "BREAD",0              
46d1				endm 
# End of macro CWHEAD
46d1			; | BREAD ( u -- u ) With the current bank, read a block from block address u (1-512) and push to stack  | DONE 
46d1				 
46d1					if DEBUG_FORTH_WORDS_KEY 
46d1						DMARK "BRD" 
46d1 f5				push af  
46d2 3a e6 46			ld a, (.dmark)  
46d5 32 77 fb			ld (debug_mark),a  
46d8 3a e7 46			ld a, (.dmark+1)  
46db 32 78 fb			ld (debug_mark+1),a  
46de 3a e8 46			ld a, (.dmark+2)  
46e1 32 79 fb			ld (debug_mark+2),a  
46e4 18 03			jr .pastdmark  
46e6 ..			.dmark: db "BRD"  
46e9 f1			.pastdmark: pop af  
46ea			endm  
# End of macro DMARK
46ea						CALLMONITOR 
46ea cd 97 16			call break_point_state  
46ed				endm  
# End of macro CALLMONITOR
46ed					endif 
46ed			 
46ed				FORTH_DSP_VALUEHL 
46ed cd 1b 1e			call macro_dsp_valuehl 
46f0				endm 
# End of macro FORTH_DSP_VALUEHL
46f0			 
46f0				FORTH_DSP_POP 
46f0 cd d3 1e			call macro_forth_dsp_pop 
46f3				endm 
# End of macro FORTH_DSP_POP
46f3			 
46f3				; calc block address 
46f3			 
46f3 eb				ex de, hl 
46f4 3e 40			ld a, STORE_BLOCK_PHY 
46f6 cd 8c 0c			call Mult16 
46f9			 
46f9			 
46f9 11 62 f8			ld de, store_page 
46fc			 
46fc					if DEBUG_FORTH_WORDS 
46fc						DMARK "BR1" 
46fc f5				push af  
46fd 3a 11 47			ld a, (.dmark)  
4700 32 77 fb			ld (debug_mark),a  
4703 3a 12 47			ld a, (.dmark+1)  
4706 32 78 fb			ld (debug_mark+1),a  
4709 3a 13 47			ld a, (.dmark+2)  
470c 32 79 fb			ld (debug_mark+2),a  
470f 18 03			jr .pastdmark  
4711 ..			.dmark: db "BR1"  
4714 f1			.pastdmark: pop af  
4715			endm  
# End of macro DMARK
4715						CALLMONITOR 
4715 cd 97 16			call break_point_state  
4718				endm  
# End of macro CALLMONITOR
4718					endif 
4718			 
4718 cd 0c 03			call storage_read_block 
471b			 
471b 21 64 f8		        ld hl, store_page+2 
471e					if DEBUG_FORTH_WORDS 
471e						DMARK "BR2" 
471e f5				push af  
471f 3a 33 47			ld a, (.dmark)  
4722 32 77 fb			ld (debug_mark),a  
4725 3a 34 47			ld a, (.dmark+1)  
4728 32 78 fb			ld (debug_mark+1),a  
472b 3a 35 47			ld a, (.dmark+2)  
472e 32 79 fb			ld (debug_mark+2),a  
4731 18 03			jr .pastdmark  
4733 ..			.dmark: db "BR2"  
4736 f1			.pastdmark: pop af  
4737			endm  
# End of macro DMARK
4737						CALLMONITOR 
4737 cd 97 16			call break_point_state  
473a				endm  
# End of macro CALLMONITOR
473a					endif 
473a cd 92 1c			call forth_push_str 
473d			 
473d			 
473d					NEXTW 
473d c3 8d 1f			jp macro_next 
4740				endm 
# End of macro NEXTW
4740			.BWRITE: 
4740				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
4740 3a				db WORD_SYS_CORE+38             
4741 d5 47			dw .BUPD            
4743 07				db 6 + 1 
4744 .. 00			db "BWRITE",0              
474b				endm 
# End of macro CWHEAD
474b			; | BWRITE ( s u -- ) With the current bank, write the string s to address u | DONE 
474b			 
474b					if DEBUG_FORTH_WORDS_KEY 
474b						DMARK "BWR" 
474b f5				push af  
474c 3a 60 47			ld a, (.dmark)  
474f 32 77 fb			ld (debug_mark),a  
4752 3a 61 47			ld a, (.dmark+1)  
4755 32 78 fb			ld (debug_mark+1),a  
4758 3a 62 47			ld a, (.dmark+2)  
475b 32 79 fb			ld (debug_mark+2),a  
475e 18 03			jr .pastdmark  
4760 ..			.dmark: db "BWR"  
4763 f1			.pastdmark: pop af  
4764			endm  
# End of macro DMARK
4764						CALLMONITOR 
4764 cd 97 16			call break_point_state  
4767				endm  
# End of macro CALLMONITOR
4767					endif 
4767			 
4767				FORTH_DSP_VALUEHL 
4767 cd 1b 1e			call macro_dsp_valuehl 
476a				endm 
# End of macro FORTH_DSP_VALUEHL
476a			 
476a				; calc block address 
476a			 
476a eb				ex de, hl 
476b 3e 40			ld a, STORE_BLOCK_PHY 
476d cd 8c 0c			call Mult16 
4770			 
4770 e5				push hl         ; address 
4771			 
4771				FORTH_DSP_POP 
4771 cd d3 1e			call macro_forth_dsp_pop 
4774				endm 
# End of macro FORTH_DSP_POP
4774			 
4774				FORTH_DSP_VALUEHL 
4774 cd 1b 1e			call macro_dsp_valuehl 
4777				endm 
# End of macro FORTH_DSP_VALUEHL
4777			 
4777				FORTH_DSP_POP 
4777 cd d3 1e			call macro_forth_dsp_pop 
477a				endm 
# End of macro FORTH_DSP_POP
477a			 
477a cd 18 0a			call storage_clear_page 
477d			 
477d				; copy string to store page 
477d			 
477d e5				push hl     ; save string address 
477e			 
477e 3e 00			ld a, 0 
4780 cd 72 11			call strlent 
4783			 
4783 23				inc hl 
4784			 
4784 4d				ld c, l 
4785 06 00			ld b, 0 
4787			 
4787 e1				pop hl 
4788 11 64 f8			ld de, store_page + 2 
478b					if DEBUG_FORTH_WORDS 
478b						DMARK "BW1" 
478b f5				push af  
478c 3a a0 47			ld a, (.dmark)  
478f 32 77 fb			ld (debug_mark),a  
4792 3a a1 47			ld a, (.dmark+1)  
4795 32 78 fb			ld (debug_mark+1),a  
4798 3a a2 47			ld a, (.dmark+2)  
479b 32 79 fb			ld (debug_mark+2),a  
479e 18 03			jr .pastdmark  
47a0 ..			.dmark: db "BW1"  
47a3 f1			.pastdmark: pop af  
47a4			endm  
# End of macro DMARK
47a4						CALLMONITOR 
47a4 cd 97 16			call break_point_state  
47a7				endm  
# End of macro CALLMONITOR
47a7					endif 
47a7 ed b0			ldir 
47a9			 
47a9			 
47a9				; poke the start of the block with flags to prevent high level file ops hitting the block 
47a9			 
47a9 21 ff ff			ld hl, $ffff 
47ac			 
47ac 22 62 f8			ld (store_page), hl	 
47af				 
47af e1				pop hl    ; get address 
47b0 11 62 f8			ld de, store_page 
47b3			 
47b3					if DEBUG_FORTH_WORDS 
47b3						DMARK "BW2" 
47b3 f5				push af  
47b4 3a c8 47			ld a, (.dmark)  
47b7 32 77 fb			ld (debug_mark),a  
47ba 3a c9 47			ld a, (.dmark+1)  
47bd 32 78 fb			ld (debug_mark+1),a  
47c0 3a ca 47			ld a, (.dmark+2)  
47c3 32 79 fb			ld (debug_mark+2),a  
47c6 18 03			jr .pastdmark  
47c8 ..			.dmark: db "BW2"  
47cb f1			.pastdmark: pop af  
47cc			endm  
# End of macro DMARK
47cc						CALLMONITOR 
47cc cd 97 16			call break_point_state  
47cf				endm  
# End of macro CALLMONITOR
47cf					endif 
47cf			 
47cf cd 71 03			call storage_write_block 
47d2			 
47d2					NEXTW 
47d2 c3 8d 1f			jp macro_next 
47d5				endm 
# End of macro NEXTW
47d5			 
47d5			.BUPD: 
47d5				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
47d5 3a				db WORD_SYS_CORE+38             
47d6 2b 48			dw .BYID            
47d8 05				db 4 + 1 
47d9 .. 00			db "BUPD",0              
47de				endm 
# End of macro CWHEAD
47de			; | BUPD ( u -- ) Write the contents of the current file system storage buffer directly to address u | DONE 
47de			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
47de			; | | or completely different file system structure. 
47de			 
47de					if DEBUG_FORTH_WORDS_KEY 
47de						DMARK "BUD" 
47de f5				push af  
47df 3a f3 47			ld a, (.dmark)  
47e2 32 77 fb			ld (debug_mark),a  
47e5 3a f4 47			ld a, (.dmark+1)  
47e8 32 78 fb			ld (debug_mark+1),a  
47eb 3a f5 47			ld a, (.dmark+2)  
47ee 32 79 fb			ld (debug_mark+2),a  
47f1 18 03			jr .pastdmark  
47f3 ..			.dmark: db "BUD"  
47f6 f1			.pastdmark: pop af  
47f7			endm  
# End of macro DMARK
47f7						CALLMONITOR 
47f7 cd 97 16			call break_point_state  
47fa				endm  
# End of macro CALLMONITOR
47fa					endif 
47fa			 
47fa				FORTH_DSP_VALUEHL 
47fa cd 1b 1e			call macro_dsp_valuehl 
47fd				endm 
# End of macro FORTH_DSP_VALUEHL
47fd			 
47fd				; calc block address 
47fd			 
47fd eb				ex de, hl 
47fe 3e 40			ld a, STORE_BLOCK_PHY 
4800 cd 8c 0c			call Mult16 
4803			 
4803				FORTH_DSP_POP 
4803 cd d3 1e			call macro_forth_dsp_pop 
4806				endm 
# End of macro FORTH_DSP_POP
4806			 
4806			 
4806 11 62 f8			ld de, store_page 
4809			 
4809					if DEBUG_FORTH_WORDS 
4809						DMARK "BUe" 
4809 f5				push af  
480a 3a 1e 48			ld a, (.dmark)  
480d 32 77 fb			ld (debug_mark),a  
4810 3a 1f 48			ld a, (.dmark+1)  
4813 32 78 fb			ld (debug_mark+1),a  
4816 3a 20 48			ld a, (.dmark+2)  
4819 32 79 fb			ld (debug_mark+2),a  
481c 18 03			jr .pastdmark  
481e ..			.dmark: db "BUe"  
4821 f1			.pastdmark: pop af  
4822			endm  
# End of macro DMARK
4822						CALLMONITOR 
4822 cd 97 16			call break_point_state  
4825				endm  
# End of macro CALLMONITOR
4825					endif 
4825			 
4825 cd 71 03			call storage_write_block 
4828			 
4828					NEXTW 
4828 c3 8d 1f			jp macro_next 
482b				endm 
# End of macro NEXTW
482b			 
482b			.BYID: 
482b			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
482b			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
482b			; 
482b			;		 
482b			;		if DEBUG_FORTH_WORDS_KEY 
482b			;			DMARK "BYID" 
482b			;			CALLMONITOR 
482b			;		endif 
482b			; 
482b			;		; get direct address 
482b			; 
482b			;		FORTH_DSP_VALUEHL 
482b			; 
482b			;		FORTH_DSP_POP 
482b			; 
482b			;	; calc block address 
482b			; 
482b			;	ex de, hl 
482b			;	ld a, STORE_BLOCK_PHY 
482b			;	call Mult16 
482b			;	;	do BREAD with number as param 
482b			;	; push the file name	 
482b			;	ld de, store_page 
482b			;	call storage_read_block 
482b			 ;       ld hl, store_page+2 
482b			; 
482b			; 
482b			;		NEXTW 
482b			;.BYNAME: 
482b			;	CWHEAD .DIR 38 "BYNAME" 6 WORD_FLAG_CODE 
482b			;; > BYNAME ( s -- u ) Get the file ID in the current BANK of the file named s > TODO 
482b			;		NEXTW 
482b			; 
482b			.DIR: 
482b				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
482b 3a				db WORD_SYS_CORE+38             
482c 2f 49			dw .SAVE            
482e 04				db 3 + 1 
482f .. 00			db "DIR",0              
4833				endm 
# End of macro CWHEAD
4833			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
4833			 
4833					if DEBUG_FORTH_WORDS_KEY 
4833						DMARK "DIR" 
4833 f5				push af  
4834 3a 48 48			ld a, (.dmark)  
4837 32 77 fb			ld (debug_mark),a  
483a 3a 49 48			ld a, (.dmark+1)  
483d 32 78 fb			ld (debug_mark+1),a  
4840 3a 4a 48			ld a, (.dmark+2)  
4843 32 79 fb			ld (debug_mark+2),a  
4846 18 03			jr .pastdmark  
4848 ..			.dmark: db "DIR"  
484b f1			.pastdmark: pop af  
484c			endm  
# End of macro DMARK
484c						CALLMONITOR 
484c cd 97 16			call break_point_state  
484f				endm  
# End of macro CALLMONITOR
484f					endif 
484f cd bd 03			call storage_get_block_0 
4852			 
4852 21 62 f8			ld hl, store_page     ; get current id count 
4855 46				ld b, (hl) 
4856 0e 00			ld c, 0    ; count of files   
4858					if DEBUG_FORTH_WORDS 
4858						DMARK "DI1" 
4858 f5				push af  
4859 3a 6d 48			ld a, (.dmark)  
485c 32 77 fb			ld (debug_mark),a  
485f 3a 6e 48			ld a, (.dmark+1)  
4862 32 78 fb			ld (debug_mark+1),a  
4865 3a 6f 48			ld a, (.dmark+2)  
4868 32 79 fb			ld (debug_mark+2),a  
486b 18 03			jr .pastdmark  
486d ..			.dmark: db "DI1"  
4870 f1			.pastdmark: pop af  
4871			endm  
# End of macro DMARK
4871						CALLMONITOR 
4871 cd 97 16			call break_point_state  
4874				endm  
# End of macro CALLMONITOR
4874					endif 
4874			 
4874				; check for empty drive 
4874			 
4874 3e 00			ld a, 0 
4876 b8				cp b 
4877 ca e5 48			jp z, .dirdone 
487a			 
487a				; for each of the current ids do a search for them and if found push to stack 
487a			 
487a c5			.diritem:	push bc 
487b 21 40 00				ld hl, STORE_BLOCK_PHY 
487e 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
4880 58					ld e,b 
4881			 
4881			;		if DEBUG_FORTH_WORDS 
4881			;			DMARK "DI2" 
4881			;			CALLMONITOR 
4881			;		endif 
4881			 
4881 cd 2d 06				call storage_findnextid 
4884			 
4884			;		if DEBUG_FORTH_WORDS 
4884			;			DMARK "DI3" 
4884			;			CALLMONITOR 
4884			;		endif 
4884			 
4884					; if found hl will be non zero 
4884			 
4884 cd 32 0d				call ishlzero 
4887			;		ld a, l 
4887			;		add h 
4887			; 
4887			;		cp 0 
4887 28 59				jr z, .dirnotfound 
4889			 
4889					; increase count 
4889			 
4889 c1					pop bc	 
488a 0c					inc c 
488b c5					push bc 
488c					 
488c			 
488c					; get file header and push the file name 
488c			 
488c 11 62 f8				ld de, store_page 
488f cd 0c 03				call storage_read_block 
4892			 
4892					; push file id to stack 
4892				 
4892 3a 62 f8				ld a, (store_page) 
4895 26 00				ld h, 0 
4897 6f					ld l, a 
4898 cd 24 1c				call forth_push_numhl 
489b			 
489b					; push extent count to stack  
489b				 
489b 3a 64 f8				ld a, (store_page+2) 
489e 26 00				ld h, 0 
48a0 6f					ld l, a 
48a1 cd 24 1c				call forth_push_numhl 
48a4			 
48a4					; push file name 
48a4			 
48a4 21 65 f8				ld hl, store_page+3 
48a7					if DEBUG_FORTH_WORDS 
48a7						DMARK "DI5" 
48a7 f5				push af  
48a8 3a bc 48			ld a, (.dmark)  
48ab 32 77 fb			ld (debug_mark),a  
48ae 3a bd 48			ld a, (.dmark+1)  
48b1 32 78 fb			ld (debug_mark+1),a  
48b4 3a be 48			ld a, (.dmark+2)  
48b7 32 79 fb			ld (debug_mark+2),a  
48ba 18 03			jr .pastdmark  
48bc ..			.dmark: db "DI5"  
48bf f1			.pastdmark: pop af  
48c0			endm  
# End of macro DMARK
48c0						CALLMONITOR 
48c0 cd 97 16			call break_point_state  
48c3				endm  
# End of macro CALLMONITOR
48c3					endif 
48c3 cd 92 1c				call forth_push_str 
48c6					if DEBUG_FORTH_WORDS 
48c6						DMARK "DI6" 
48c6 f5				push af  
48c7 3a db 48			ld a, (.dmark)  
48ca 32 77 fb			ld (debug_mark),a  
48cd 3a dc 48			ld a, (.dmark+1)  
48d0 32 78 fb			ld (debug_mark+1),a  
48d3 3a dd 48			ld a, (.dmark+2)  
48d6 32 79 fb			ld (debug_mark+2),a  
48d9 18 03			jr .pastdmark  
48db ..			.dmark: db "DI6"  
48de f1			.pastdmark: pop af  
48df			endm  
# End of macro DMARK
48df						CALLMONITOR 
48df cd 97 16			call break_point_state  
48e2				endm  
# End of macro CALLMONITOR
48e2					endif 
48e2			.dirnotfound: 
48e2 c1					pop bc     
48e3 10 95				djnz .diritem 
48e5				 
48e5			.dirdone:	 
48e5					if DEBUG_FORTH_WORDS 
48e5						DMARK "DI7" 
48e5 f5				push af  
48e6 3a fa 48			ld a, (.dmark)  
48e9 32 77 fb			ld (debug_mark),a  
48ec 3a fb 48			ld a, (.dmark+1)  
48ef 32 78 fb			ld (debug_mark+1),a  
48f2 3a fc 48			ld a, (.dmark+2)  
48f5 32 79 fb			ld (debug_mark+2),a  
48f8 18 03			jr .pastdmark  
48fa ..			.dmark: db "DI7"  
48fd f1			.pastdmark: pop af  
48fe			endm  
# End of macro DMARK
48fe						CALLMONITOR 
48fe cd 97 16			call break_point_state  
4901				endm  
# End of macro CALLMONITOR
4901					endif 
4901			 
4901					; push a count of the dir items found 
4901			 
4901 26 00				ld h, 0 
4903 69					ld l, c 
4904 cd 24 1c				call forth_push_numhl 
4907			 
4907					; push the bank label 
4907			 
4907 cd bd 03				call storage_get_block_0 
490a			 
490a				 
490a 21 65 f8		 		ld hl, store_page+3 
490d			 
490d					if DEBUG_FORTH_WORDS 
490d						DMARK "DI8" 
490d f5				push af  
490e 3a 22 49			ld a, (.dmark)  
4911 32 77 fb			ld (debug_mark),a  
4914 3a 23 49			ld a, (.dmark+1)  
4917 32 78 fb			ld (debug_mark+1),a  
491a 3a 24 49			ld a, (.dmark+2)  
491d 32 79 fb			ld (debug_mark+2),a  
4920 18 03			jr .pastdmark  
4922 ..			.dmark: db "DI8"  
4925 f1			.pastdmark: pop af  
4926			endm  
# End of macro DMARK
4926						CALLMONITOR 
4926 cd 97 16			call break_point_state  
4929				endm  
# End of macro CALLMONITOR
4929					endif 
4929 cd 92 1c				call forth_push_str 
492c			 
492c			 
492c				 
492c					NEXTW 
492c c3 8d 1f			jp macro_next 
492f				endm 
# End of macro NEXTW
492f			.SAVE: 
492f			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
492f			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
492f			;		NEXTW 
492f			;.LOAD: 
492f			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
492f			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
492f			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
492f			;; > > The LOAD command can not be used in any user words or compound lines. 
492f			; 
492f			;		; store_openext use it. If zero it is EOF 
492f			; 
492f			;		; read block from current stream id 
492f			;		; if the block does not contain zero term keep reading blocks until zero found 
492f			;		; push the block to stack 
492f			;		; save the block id to stream 
492f			; 
492f			; 
492f			;		FORTH_DSP_VALUEHL 
492f			; 
492f			;;		push hl 
492f			; 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LOA" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;		FORTH_DSP_POP 
492f			; 
492f			;;		pop hl 
492f			; 
492f			;		ld h, l 
492f			;		ld l, 0 
492f			; 
492f			;		push hl     ; stack holds current file id and extent to work with 
492f			; 
492f			; 
492f			;		ld de, store_page      ; get block zero of file 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LO0" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;		call storage_read 
492f			; 
492f			;		ld a, (store_page+2)    ; max extents for this file 
492f			;		ld  (store_openmaxext),a   ; get our limit 
492f			; 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LOE" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			; 
492f			;; TODO dont know why max extents are not present 
492f			;;		cp 0 
492f			;;		jp z, .loadeof     ; dont read past eof 
492f			; 
492f			;;		ld a, 1   ; start from the head of the file 
492f			; 
492f			;.loadline:	pop hl 
492f			;		inc hl 
492f			;		ld  a, (store_openmaxext)   ; get our limit 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LOx" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;		inc a 
492f			;		cp l 
492f			;		jp z, .loadeof 
492f			;		push hl    ; save current extent 
492f			; 
492f			;		ld de, store_page 
492f			; 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LO1" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;		call storage_read 
492f			; 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LO2" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;	call ishlzero 
492f			;	ld a, l 
492f			;	add h 
492f			;	cp 0 
492f			;	jr z, .loadeof 
492f			; 
492f			;	; not eof so hl should point to data to exec 
492f			; 
492f			;	; will need to add the FORTH_END_BUFFER flag 
492f			 ; 
492f			;	ld hl, store_page+2 
492f			;	ld bc, 255 
492f			;	ld a, 0 
492f			;	cpir 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LOt" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;	dec hl 
492f			;	ld a, ' ' 
492f			;	ld (hl), a 
492f			;	inc hl 
492f			;	ld (hl), a 
492f			;	inc hl 
492f			;	ld (hl), a 
492f			;	inc hl 
492f			;	ld a, FORTH_END_BUFFER 
492f			;	ld (hl), a 
492f			; 
492f			;	; TODO handle more than a single block read 
492f			; 
492f			; 
492f			;	ld hl, store_page+2 
492f			; 
492f			;	ld (os_tok_ptr), hl 
492f			; 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LO3" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			; 
492f			;	call forthparse 
492f			;	call forthexec 
492f			;	call forthexec_cleanup 
492f			; 
492f			;	; go to next extent 
492f			; 
492f			;	; get next block  or mark as eof 
492f			;	jp .loadline 
492f			; 
492f			; 
492f			; 
492f			;	       NEXTW 
492f			;.loadeof:	ld a, 0 
492f			;		ld (store_openext), a 
492f			; 
492f			;	if DEBUG_STORESE 
492f			;		DMARK "LOF" 
492f			;		CALLMONITOR 
492f			;	endif 
492f			;		ret 
492f			;		;NEXTW 
492f			;.BSAVE:   
492f			; 
492f			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
492f			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
492f			;		NEXTW 
492f			;.BLOAD: 
492f			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
492f			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
492f			;		NEXTW 
492f			;;;; counter gap 
492f			 
492f			 
492f			.SEO: 
492f				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
492f 64				db WORD_SYS_CORE+80             
4930 4e 49			dw .SEI            
4932 04				db 3 + 1 
4933 .. 00			db "SEO",0              
4937				endm 
# End of macro CWHEAD
4937			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
4937			 
4937					; get port 
4937			 
4937					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4937 cd 1b 1e			call macro_dsp_valuehl 
493a				endm 
# End of macro FORTH_DSP_VALUEHL
493a			 
493a e5					push hl    ; u2 - byte 
493b			 
493b					; destroy value TOS 
493b			 
493b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
493b cd d3 1e			call macro_forth_dsp_pop 
493e				endm 
# End of macro FORTH_DSP_POP
493e			 
493e					; get byte to send 
493e			 
493e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
493e cd 1b 1e			call macro_dsp_valuehl 
4941				endm 
# End of macro FORTH_DSP_VALUEHL
4941			 
4941 e5					push hl    ; u1 - addr 
4942			 
4942					; destroy value TOS 
4942			 
4942					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4942 cd d3 1e			call macro_forth_dsp_pop 
4945				endm 
# End of macro FORTH_DSP_POP
4945			 
4945					; one value on hl get other one back 
4945			 
4945 d1					pop de   ; u1 - byte 
4946			 
4946 e1					pop hl   ; u2 - addr 
4947			 
4947					; TODO Send SPI byte 
4947			 
4947			 
4947 7b					ld a, e 
4948 cd ea 01				call se_writebyte 
494b			 
494b					 
494b			 
494b					NEXTW 
494b c3 8d 1f			jp macro_next 
494e				endm 
# End of macro NEXTW
494e			 
494e			.SEI: 
494e				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
494e 65				db WORD_SYS_CORE+81             
494f 68 49			dw .SFREE            
4951 04				db 3 + 1 
4952 .. 00			db "SEI",0              
4956				endm 
# End of macro CWHEAD
4956			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
4956			 
4956					; get port 
4956			 
4956					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4956 cd 1b 1e			call macro_dsp_valuehl 
4959				endm 
# End of macro FORTH_DSP_VALUEHL
4959			 
4959			;		push hl 
4959			 
4959					; destroy value TOS 
4959			 
4959					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4959 cd d3 1e			call macro_forth_dsp_pop 
495c				endm 
# End of macro FORTH_DSP_POP
495c			 
495c					; one value on hl get other one back 
495c			 
495c			;		pop hl 
495c			 
495c			 
495c					; TODO Get SPI byte 
495c			 
495c cd 8c 02				call se_readbyte 
495f			 
495f 26 00				ld h, 0 
4961 6f					ld l, a 
4962 cd 24 1c				call forth_push_numhl 
4965			 
4965					NEXTW 
4965 c3 8d 1f			jp macro_next 
4968				endm 
# End of macro NEXTW
4968			 
4968			.SFREE: 
4968				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
4968 67				db WORD_SYS_CORE+83             
4969 97 49			dw .SIZE            
496b 06				db 5 + 1 
496c .. 00			db "FFREE",0              
4972				endm 
# End of macro CWHEAD
4972			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
4972					if DEBUG_FORTH_WORDS_KEY 
4972						DMARK "FFR" 
4972 f5				push af  
4973 3a 87 49			ld a, (.dmark)  
4976 32 77 fb			ld (debug_mark),a  
4979 3a 88 49			ld a, (.dmark+1)  
497c 32 78 fb			ld (debug_mark+1),a  
497f 3a 89 49			ld a, (.dmark+2)  
4982 32 79 fb			ld (debug_mark+2),a  
4985 18 03			jr .pastdmark  
4987 ..			.dmark: db "FFR"  
498a f1			.pastdmark: pop af  
498b			endm  
# End of macro DMARK
498b						CALLMONITOR 
498b cd 97 16			call break_point_state  
498e				endm  
# End of macro CALLMONITOR
498e					endif 
498e			 
498e cd c7 06				call storage_freeblocks 
4991			 
4991 cd 24 1c				call forth_push_numhl 
4994			 
4994				       NEXTW 
4994 c3 8d 1f			jp macro_next 
4997				endm 
# End of macro NEXTW
4997			.SIZE: 
4997				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
4997 67				db WORD_SYS_CORE+83             
4998 cb 49			dw .CREATE            
499a 05				db 4 + 1 
499b .. 00			db "SIZE",0              
49a0				endm 
# End of macro CWHEAD
49a0			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
49a0					if DEBUG_FORTH_WORDS_KEY 
49a0						DMARK "SIZ" 
49a0 f5				push af  
49a1 3a b5 49			ld a, (.dmark)  
49a4 32 77 fb			ld (debug_mark),a  
49a7 3a b6 49			ld a, (.dmark+1)  
49aa 32 78 fb			ld (debug_mark+1),a  
49ad 3a b7 49			ld a, (.dmark+2)  
49b0 32 79 fb			ld (debug_mark+2),a  
49b3 18 03			jr .pastdmark  
49b5 ..			.dmark: db "SIZ"  
49b8 f1			.pastdmark: pop af  
49b9			endm  
# End of macro DMARK
49b9						CALLMONITOR 
49b9 cd 97 16			call break_point_state  
49bc				endm  
# End of macro CALLMONITOR
49bc					endif 
49bc			 
49bc					FORTH_DSP_VALUEHL 
49bc cd 1b 1e			call macro_dsp_valuehl 
49bf				endm 
# End of macro FORTH_DSP_VALUEHL
49bf			;		push hl 
49bf					FORTH_DSP_POP 
49bf cd d3 1e			call macro_forth_dsp_pop 
49c2				endm 
# End of macro FORTH_DSP_POP
49c2			;		pop hl 
49c2 cd 3b 03				call storage_file_size 
49c5			 
49c5 cd 24 1c				call forth_push_numhl 
49c8			  
49c8			 
49c8				       NEXTW 
49c8 c3 8d 1f			jp macro_next 
49cb				endm 
# End of macro NEXTW
49cb			 
49cb			.CREATE: 
49cb				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
49cb 68				db WORD_SYS_CORE+84             
49cc 39 4a			dw .APPEND            
49ce 07				db 6 + 1 
49cf .. 00			db "CREATE",0              
49d6				endm 
# End of macro CWHEAD
49d6			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
49d6			; | | e.g.  
49d6			; | | TestProgram CREATE 
49d6			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
49d6			; | |  
49d6			; | | Max file IDs are 255. 
49d6			; | |  
49d6					 
49d6					if DEBUG_FORTH_WORDS_KEY 
49d6						DMARK "CRT" 
49d6 f5				push af  
49d7 3a eb 49			ld a, (.dmark)  
49da 32 77 fb			ld (debug_mark),a  
49dd 3a ec 49			ld a, (.dmark+1)  
49e0 32 78 fb			ld (debug_mark+1),a  
49e3 3a ed 49			ld a, (.dmark+2)  
49e6 32 79 fb			ld (debug_mark+2),a  
49e9 18 03			jr .pastdmark  
49eb ..			.dmark: db "CRT"  
49ee f1			.pastdmark: pop af  
49ef			endm  
# End of macro DMARK
49ef						CALLMONITOR 
49ef cd 97 16			call break_point_state  
49f2				endm  
# End of macro CALLMONITOR
49f2					endif 
49f2			;		call storage_get_block_0 
49f2			 
49f2					; TODO pop hl 
49f2			 
49f2					;v5 FORTH_DSP_VALUE 
49f2					FORTH_DSP_VALUE 
49f2 cd 04 1e			call macro_forth_dsp_value 
49f5				endm 
# End of macro FORTH_DSP_VALUE
49f5			 
49f5				if DEBUG_STORESE 
49f5					DMARK "CR1" 
49f5 f5				push af  
49f6 3a 0a 4a			ld a, (.dmark)  
49f9 32 77 fb			ld (debug_mark),a  
49fc 3a 0b 4a			ld a, (.dmark+1)  
49ff 32 78 fb			ld (debug_mark+1),a  
4a02 3a 0c 4a			ld a, (.dmark+2)  
4a05 32 79 fb			ld (debug_mark+2),a  
4a08 18 03			jr .pastdmark  
4a0a ..			.dmark: db "CR1"  
4a0d f1			.pastdmark: pop af  
4a0e			endm  
# End of macro DMARK
4a0e					CALLMONITOR 
4a0e cd 97 16			call break_point_state  
4a11				endm  
# End of macro CALLMONITOR
4a11				endif 
4a11			;		push hl 
4a11			;		FORTH_DSP_POP 
4a11			;		pop hl 
4a11			 
4a11			;		inc hl   ; move past the type marker 
4a11			 
4a11 cd fd 06				call storage_create 
4a14			 
4a14				if DEBUG_STORESE 
4a14					DMARK "CT1" 
4a14 f5				push af  
4a15 3a 29 4a			ld a, (.dmark)  
4a18 32 77 fb			ld (debug_mark),a  
4a1b 3a 2a 4a			ld a, (.dmark+1)  
4a1e 32 78 fb			ld (debug_mark+1),a  
4a21 3a 2b 4a			ld a, (.dmark+2)  
4a24 32 79 fb			ld (debug_mark+2),a  
4a27 18 03			jr .pastdmark  
4a29 ..			.dmark: db "CT1"  
4a2c f1			.pastdmark: pop af  
4a2d			endm  
# End of macro DMARK
4a2d					CALLMONITOR 
4a2d cd 97 16			call break_point_state  
4a30				endm  
# End of macro CALLMONITOR
4a30				endif 
4a30			;		push hl 
4a30					FORTH_DSP_POP 
4a30 cd d3 1e			call macro_forth_dsp_pop 
4a33				endm 
# End of macro FORTH_DSP_POP
4a33			;		pop hl 
4a33					; push file id to stack 
4a33 cd 24 1c				call forth_push_numhl 
4a36			 
4a36			 
4a36			 
4a36				       NEXTW 
4a36 c3 8d 1f			jp macro_next 
4a39				endm 
# End of macro NEXTW
4a39			 
4a39			.APPEND: 
4a39				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
4a39 69				db WORD_SYS_CORE+85             
4a3a ca 4a			dw .SDEL            
4a3c 07				db 6 + 1 
4a3d .. 00			db "APPEND",0              
4a44				endm 
# End of macro CWHEAD
4a44			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
4a44			; | | e.g. 
4a44			; | | Test CREATE      -> $01 
4a44			; | | "A string to add to file" $01 APPEND 
4a44			; | |  
4a44			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
4a44					if DEBUG_FORTH_WORDS_KEY 
4a44						DMARK "APP" 
4a44 f5				push af  
4a45 3a 59 4a			ld a, (.dmark)  
4a48 32 77 fb			ld (debug_mark),a  
4a4b 3a 5a 4a			ld a, (.dmark+1)  
4a4e 32 78 fb			ld (debug_mark+1),a  
4a51 3a 5b 4a			ld a, (.dmark+2)  
4a54 32 79 fb			ld (debug_mark+2),a  
4a57 18 03			jr .pastdmark  
4a59 ..			.dmark: db "APP"  
4a5c f1			.pastdmark: pop af  
4a5d			endm  
# End of macro DMARK
4a5d						CALLMONITOR 
4a5d cd 97 16			call break_point_state  
4a60				endm  
# End of macro CALLMONITOR
4a60					endif 
4a60			 
4a60					FORTH_DSP_VALUEHL 
4a60 cd 1b 1e			call macro_dsp_valuehl 
4a63				endm 
# End of macro FORTH_DSP_VALUEHL
4a63 e5					push hl 	; save file id 
4a64			 
4a64				if DEBUG_STORESE 
4a64					DMARK "AP1" 
4a64 f5				push af  
4a65 3a 79 4a			ld a, (.dmark)  
4a68 32 77 fb			ld (debug_mark),a  
4a6b 3a 7a 4a			ld a, (.dmark+1)  
4a6e 32 78 fb			ld (debug_mark+1),a  
4a71 3a 7b 4a			ld a, (.dmark+2)  
4a74 32 79 fb			ld (debug_mark+2),a  
4a77 18 03			jr .pastdmark  
4a79 ..			.dmark: db "AP1"  
4a7c f1			.pastdmark: pop af  
4a7d			endm  
# End of macro DMARK
4a7d					CALLMONITOR 
4a7d cd 97 16			call break_point_state  
4a80				endm  
# End of macro CALLMONITOR
4a80				endif 
4a80					FORTH_DSP_POP 
4a80 cd d3 1e			call macro_forth_dsp_pop 
4a83				endm 
# End of macro FORTH_DSP_POP
4a83			 
4a83					FORTH_DSP_VALUEHL 
4a83 cd 1b 1e			call macro_dsp_valuehl 
4a86				endm 
# End of macro FORTH_DSP_VALUEHL
4a86					;v5 FORTH_DSP_VALUE 
4a86 e5					push hl 	; save ptr to string to save 
4a87			 
4a87				if DEBUG_STORESE 
4a87					DMARK "AP1" 
4a87 f5				push af  
4a88 3a 9c 4a			ld a, (.dmark)  
4a8b 32 77 fb			ld (debug_mark),a  
4a8e 3a 9d 4a			ld a, (.dmark+1)  
4a91 32 78 fb			ld (debug_mark+1),a  
4a94 3a 9e 4a			ld a, (.dmark+2)  
4a97 32 79 fb			ld (debug_mark+2),a  
4a9a 18 03			jr .pastdmark  
4a9c ..			.dmark: db "AP1"  
4a9f f1			.pastdmark: pop af  
4aa0			endm  
# End of macro DMARK
4aa0					CALLMONITOR 
4aa0 cd 97 16			call break_point_state  
4aa3				endm  
# End of macro CALLMONITOR
4aa3				endif 
4aa3					FORTH_DSP_POP 
4aa3 cd d3 1e			call macro_forth_dsp_pop 
4aa6				endm 
# End of macro FORTH_DSP_POP
4aa6			 
4aa6 d1					pop de 
4aa7 e1					pop hl 
4aa8				if DEBUG_STORESE 
4aa8					DMARK "AP2" 
4aa8 f5				push af  
4aa9 3a bd 4a			ld a, (.dmark)  
4aac 32 77 fb			ld (debug_mark),a  
4aaf 3a be 4a			ld a, (.dmark+1)  
4ab2 32 78 fb			ld (debug_mark+1),a  
4ab5 3a bf 4a			ld a, (.dmark+2)  
4ab8 32 79 fb			ld (debug_mark+2),a  
4abb 18 03			jr .pastdmark  
4abd ..			.dmark: db "AP2"  
4ac0 f1			.pastdmark: pop af  
4ac1			endm  
# End of macro DMARK
4ac1					CALLMONITOR 
4ac1 cd 97 16			call break_point_state  
4ac4				endm  
# End of macro CALLMONITOR
4ac4				endif 
4ac4					;inc de ; skip var type indicator 
4ac4			 
4ac4					; TODO how to append numerics???? 
4ac4			 
4ac4 cd d7 08				call storage_append		 
4ac7			 
4ac7				       NEXTW 
4ac7 c3 8d 1f			jp macro_next 
4aca				endm 
# End of macro NEXTW
4aca			.SDEL: 
4aca				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
4aca 6a				db WORD_SYS_CORE+86             
4acb 16 4b			dw .OPEN            
4acd 05				db 4 + 1 
4ace .. 00			db "ERA",0              
4ad2				endm 
# End of macro CWHEAD
4ad2			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
4ad2					FORTH_DSP_VALUEHL 
4ad2 cd 1b 1e			call macro_dsp_valuehl 
4ad5				endm 
# End of macro FORTH_DSP_VALUEHL
4ad5			;		push hl 	; save file id 
4ad5			 
4ad5					if DEBUG_FORTH_WORDS_KEY 
4ad5						DMARK "ERA" 
4ad5 f5				push af  
4ad6 3a ea 4a			ld a, (.dmark)  
4ad9 32 77 fb			ld (debug_mark),a  
4adc 3a eb 4a			ld a, (.dmark+1)  
4adf 32 78 fb			ld (debug_mark+1),a  
4ae2 3a ec 4a			ld a, (.dmark+2)  
4ae5 32 79 fb			ld (debug_mark+2),a  
4ae8 18 03			jr .pastdmark  
4aea ..			.dmark: db "ERA"  
4aed f1			.pastdmark: pop af  
4aee			endm  
# End of macro DMARK
4aee						CALLMONITOR 
4aee cd 97 16			call break_point_state  
4af1				endm  
# End of macro CALLMONITOR
4af1					endif 
4af1				if DEBUG_STORESE 
4af1					DMARK "ER1" 
4af1 f5				push af  
4af2 3a 06 4b			ld a, (.dmark)  
4af5 32 77 fb			ld (debug_mark),a  
4af8 3a 07 4b			ld a, (.dmark+1)  
4afb 32 78 fb			ld (debug_mark+1),a  
4afe 3a 08 4b			ld a, (.dmark+2)  
4b01 32 79 fb			ld (debug_mark+2),a  
4b04 18 03			jr .pastdmark  
4b06 ..			.dmark: db "ER1"  
4b09 f1			.pastdmark: pop af  
4b0a			endm  
# End of macro DMARK
4b0a					CALLMONITOR 
4b0a cd 97 16			call break_point_state  
4b0d				endm  
# End of macro CALLMONITOR
4b0d				endif 
4b0d					FORTH_DSP_POP 
4b0d cd d3 1e			call macro_forth_dsp_pop 
4b10				endm 
# End of macro FORTH_DSP_POP
4b10			 
4b10			;		pop hl 
4b10			 
4b10 cd 4c 05				call storage_erase 
4b13				       NEXTW 
4b13 c3 8d 1f			jp macro_next 
4b16				endm 
# End of macro NEXTW
4b16			 
4b16			.OPEN: 
4b16				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
4b16 6b				db WORD_SYS_CORE+87             
4b17 9d 4b			dw .READ            
4b19 05				db 4 + 1 
4b1a .. 00			db "OPEN",0              
4b1f				endm 
# End of macro CWHEAD
4b1f			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
4b1f			; | | e.g. 
4b1f			; | | $01 OPEN $01 DO $01 READ . LOOP 
4b1f			 
4b1f					if DEBUG_FORTH_WORDS_KEY 
4b1f						DMARK "OPN" 
4b1f f5				push af  
4b20 3a 34 4b			ld a, (.dmark)  
4b23 32 77 fb			ld (debug_mark),a  
4b26 3a 35 4b			ld a, (.dmark+1)  
4b29 32 78 fb			ld (debug_mark+1),a  
4b2c 3a 36 4b			ld a, (.dmark+2)  
4b2f 32 79 fb			ld (debug_mark+2),a  
4b32 18 03			jr .pastdmark  
4b34 ..			.dmark: db "OPN"  
4b37 f1			.pastdmark: pop af  
4b38			endm  
# End of macro DMARK
4b38						CALLMONITOR 
4b38 cd 97 16			call break_point_state  
4b3b				endm  
# End of macro CALLMONITOR
4b3b					endif 
4b3b					; TODO handle multiple file opens 
4b3b			 
4b3b 3e 01			       	ld a, 1 
4b3d 32 59 f8				ld (store_openext), a 
4b40			 
4b40					; get max extents for this file 
4b40				 
4b40								 
4b40					FORTH_DSP_VALUEHL 
4b40 cd 1b 1e			call macro_dsp_valuehl 
4b43				endm 
# End of macro FORTH_DSP_VALUEHL
4b43			 
4b43 65					ld h, l 
4b44 2e 00				ld l, 0 
4b46			 
4b46				if DEBUG_STORESE 
4b46					DMARK "OPN" 
4b46 f5				push af  
4b47 3a 5b 4b			ld a, (.dmark)  
4b4a 32 77 fb			ld (debug_mark),a  
4b4d 3a 5c 4b			ld a, (.dmark+1)  
4b50 32 78 fb			ld (debug_mark+1),a  
4b53 3a 5d 4b			ld a, (.dmark+2)  
4b56 32 79 fb			ld (debug_mark+2),a  
4b59 18 03			jr .pastdmark  
4b5b ..			.dmark: db "OPN"  
4b5e f1			.pastdmark: pop af  
4b5f			endm  
# End of macro DMARK
4b5f					CALLMONITOR 
4b5f cd 97 16			call break_point_state  
4b62				endm  
# End of macro CALLMONITOR
4b62				endif 
4b62			;		push hl 
4b62					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
4b62 cd d3 1e			call macro_forth_dsp_pop 
4b65				endm 
# End of macro FORTH_DSP_POP
4b65			;		pop hl 
4b65						 
4b65 11 62 f8				ld de, store_page      ; get block zero of file 
4b68 cd 51 08				call storage_read 
4b6b			 
4b6b			 
4b6b 3a 64 f8				ld a, (store_page+2)    ; max extents for this file 
4b6e 32 58 f8				ld  (store_openmaxext), a   ; get our limit and push 
4b71					 
4b71				if DEBUG_STORESE 
4b71					DMARK "OPx" 
4b71 f5				push af  
4b72 3a 86 4b			ld a, (.dmark)  
4b75 32 77 fb			ld (debug_mark),a  
4b78 3a 87 4b			ld a, (.dmark+1)  
4b7b 32 78 fb			ld (debug_mark+1),a  
4b7e 3a 88 4b			ld a, (.dmark+2)  
4b81 32 79 fb			ld (debug_mark+2),a  
4b84 18 03			jr .pastdmark  
4b86 ..			.dmark: db "OPx"  
4b89 f1			.pastdmark: pop af  
4b8a			endm  
# End of macro DMARK
4b8a					CALLMONITOR 
4b8a cd 97 16			call break_point_state  
4b8d				endm  
# End of macro CALLMONITOR
4b8d				endif 
4b8d fe 00				cp 0 
4b8f 20 03				jr nz, .skipopeneof 
4b91					; have opened an empty file 
4b91					 
4b91 32 59 f8				ld (store_openext), a 
4b94			 
4b94			.skipopeneof: 
4b94			 
4b94 6f					ld l, a 
4b95 26 00				ld h, 0 
4b97 cd 24 1c				call forth_push_numhl 
4b9a			 
4b9a			 
4b9a				       NEXTW 
4b9a c3 8d 1f			jp macro_next 
4b9d				endm 
# End of macro NEXTW
4b9d			.READ: 
4b9d				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
4b9d 6c				db WORD_SYS_CORE+88             
4b9e e4 4c			dw .EOF            
4ba0 05				db 4 + 1 
4ba1 .. 00			db "READ",0              
4ba6				endm 
# End of macro CWHEAD
4ba6			; | READ ( n -- n  )  Reads next page of file id and push to stack | DONE 
4ba6			; | | e.g. 
4ba6			; | | $01 OPEN $01 DO $01 READ . LOOP 
4ba6			 
4ba6					if DEBUG_FORTH_WORDS_KEY 
4ba6						DMARK "REA" 
4ba6 f5				push af  
4ba7 3a bb 4b			ld a, (.dmark)  
4baa 32 77 fb			ld (debug_mark),a  
4bad 3a bc 4b			ld a, (.dmark+1)  
4bb0 32 78 fb			ld (debug_mark+1),a  
4bb3 3a bd 4b			ld a, (.dmark+2)  
4bb6 32 79 fb			ld (debug_mark+2),a  
4bb9 18 03			jr .pastdmark  
4bbb ..			.dmark: db "REA"  
4bbe f1			.pastdmark: pop af  
4bbf			endm  
# End of macro DMARK
4bbf						CALLMONITOR 
4bbf cd 97 16			call break_point_state  
4bc2				endm  
# End of macro CALLMONITOR
4bc2					endif 
4bc2					; store_openext use it. If zero it is EOF 
4bc2			 
4bc2					; read block from current stream id 
4bc2					; if the block does not contain zero term keep reading blocks until zero found 
4bc2					; push the block to stack 
4bc2					; save the block id to stream 
4bc2			 
4bc2			 
4bc2					FORTH_DSP_VALUEHL 
4bc2 cd 1b 1e			call macro_dsp_valuehl 
4bc5				endm 
# End of macro FORTH_DSP_VALUEHL
4bc5			 
4bc5			;		push hl 
4bc5			 
4bc5				if DEBUG_STORESE 
4bc5					DMARK "REA" 
4bc5 f5				push af  
4bc6 3a da 4b			ld a, (.dmark)  
4bc9 32 77 fb			ld (debug_mark),a  
4bcc 3a db 4b			ld a, (.dmark+1)  
4bcf 32 78 fb			ld (debug_mark+1),a  
4bd2 3a dc 4b			ld a, (.dmark+2)  
4bd5 32 79 fb			ld (debug_mark+2),a  
4bd8 18 03			jr .pastdmark  
4bda ..			.dmark: db "REA"  
4bdd f1			.pastdmark: pop af  
4bde			endm  
# End of macro DMARK
4bde					CALLMONITOR 
4bde cd 97 16			call break_point_state  
4be1				endm  
# End of macro CALLMONITOR
4be1				endif 
4be1					FORTH_DSP_POP 
4be1 cd d3 1e			call macro_forth_dsp_pop 
4be4				endm 
# End of macro FORTH_DSP_POP
4be4			 
4be4			;		pop hl 
4be4				 
4be4 65					ld h,l 
4be5			 
4be5 3a 59 f8				ld a, (store_openext) 
4be8 6f					ld l, a 
4be9					 
4be9 fe 00				cp 0 
4beb ca b6 4c				jp z, .ateof     ; dont read past eof 
4bee			 
4bee			 
4bee 11 62 f8				ld de, store_page 
4bf1				if DEBUG_STORESE 
4bf1					DMARK "RE1" 
4bf1 f5				push af  
4bf2 3a 06 4c			ld a, (.dmark)  
4bf5 32 77 fb			ld (debug_mark),a  
4bf8 3a 07 4c			ld a, (.dmark+1)  
4bfb 32 78 fb			ld (debug_mark+1),a  
4bfe 3a 08 4c			ld a, (.dmark+2)  
4c01 32 79 fb			ld (debug_mark+2),a  
4c04 18 03			jr .pastdmark  
4c06 ..			.dmark: db "RE1"  
4c09 f1			.pastdmark: pop af  
4c0a			endm  
# End of macro DMARK
4c0a					CALLMONITOR 
4c0a cd 97 16			call break_point_state  
4c0d				endm  
# End of macro CALLMONITOR
4c0d				endif 
4c0d cd 51 08				call storage_read 
4c10			 
4c10				if DEBUG_STORESE 
4c10					DMARK "RE2" 
4c10 f5				push af  
4c11 3a 25 4c			ld a, (.dmark)  
4c14 32 77 fb			ld (debug_mark),a  
4c17 3a 26 4c			ld a, (.dmark+1)  
4c1a 32 78 fb			ld (debug_mark+1),a  
4c1d 3a 27 4c			ld a, (.dmark+2)  
4c20 32 79 fb			ld (debug_mark+2),a  
4c23 18 03			jr .pastdmark  
4c25 ..			.dmark: db "RE2"  
4c28 f1			.pastdmark: pop af  
4c29			endm  
# End of macro DMARK
4c29					CALLMONITOR 
4c29 cd 97 16			call break_point_state  
4c2c				endm  
# End of macro CALLMONITOR
4c2c				endif 
4c2c cd 32 0d			call ishlzero 
4c2f			;	ld a, l 
4c2f			;	add h 
4c2f			;	cp 0 
4c2f ca bc 4c			jp z, .readeof 
4c32			 
4c32				; not eof so hl should point to data to push to stack 
4c32			 
4c32				if DEBUG_STORESE 
4c32					DMARK "RE3" 
4c32 f5				push af  
4c33 3a 47 4c			ld a, (.dmark)  
4c36 32 77 fb			ld (debug_mark),a  
4c39 3a 48 4c			ld a, (.dmark+1)  
4c3c 32 78 fb			ld (debug_mark+1),a  
4c3f 3a 49 4c			ld a, (.dmark+2)  
4c42 32 79 fb			ld (debug_mark+2),a  
4c45 18 03			jr .pastdmark  
4c47 ..			.dmark: db "RE3"  
4c4a f1			.pastdmark: pop af  
4c4b			endm  
# End of macro DMARK
4c4b					CALLMONITOR 
4c4b cd 97 16			call break_point_state  
4c4e				endm  
# End of macro CALLMONITOR
4c4e				endif 
4c4e cd 92 1c			call forth_push_str 
4c51			 
4c51				if DEBUG_STORESE 
4c51					DMARK "RE4" 
4c51 f5				push af  
4c52 3a 66 4c			ld a, (.dmark)  
4c55 32 77 fb			ld (debug_mark),a  
4c58 3a 67 4c			ld a, (.dmark+1)  
4c5b 32 78 fb			ld (debug_mark+1),a  
4c5e 3a 68 4c			ld a, (.dmark+2)  
4c61 32 79 fb			ld (debug_mark+2),a  
4c64 18 03			jr .pastdmark  
4c66 ..			.dmark: db "RE4"  
4c69 f1			.pastdmark: pop af  
4c6a			endm  
# End of macro DMARK
4c6a					CALLMONITOR 
4c6a cd 97 16			call break_point_state  
4c6d				endm  
# End of macro CALLMONITOR
4c6d				endif 
4c6d				; get next block  or mark as eof 
4c6d			 
4c6d 3a 58 f8			ld a, (store_openmaxext)   ; get our limit 
4c70 4f				ld c, a	 
4c71 3a 59 f8			ld a, (store_openext) 
4c74			 
4c74				if DEBUG_STORESE 
4c74					DMARK "RE5" 
4c74 f5				push af  
4c75 3a 89 4c			ld a, (.dmark)  
4c78 32 77 fb			ld (debug_mark),a  
4c7b 3a 8a 4c			ld a, (.dmark+1)  
4c7e 32 78 fb			ld (debug_mark+1),a  
4c81 3a 8b 4c			ld a, (.dmark+2)  
4c84 32 79 fb			ld (debug_mark+2),a  
4c87 18 03			jr .pastdmark  
4c89 ..			.dmark: db "RE5"  
4c8c f1			.pastdmark: pop af  
4c8d			endm  
# End of macro DMARK
4c8d					CALLMONITOR 
4c8d cd 97 16			call break_point_state  
4c90				endm  
# End of macro CALLMONITOR
4c90				endif 
4c90 b9				cp c 
4c91 28 29			jr z, .readeof     ; at last extent 
4c93			 
4c93 3c					inc a 
4c94 32 59 f8				ld (store_openext), a 
4c97			 
4c97				if DEBUG_STORESE 
4c97					DMARK "RE6" 
4c97 f5				push af  
4c98 3a ac 4c			ld a, (.dmark)  
4c9b 32 77 fb			ld (debug_mark),a  
4c9e 3a ad 4c			ld a, (.dmark+1)  
4ca1 32 78 fb			ld (debug_mark+1),a  
4ca4 3a ae 4c			ld a, (.dmark+2)  
4ca7 32 79 fb			ld (debug_mark+2),a  
4caa 18 03			jr .pastdmark  
4cac ..			.dmark: db "RE6"  
4caf f1			.pastdmark: pop af  
4cb0			endm  
# End of macro DMARK
4cb0					CALLMONITOR 
4cb0 cd 97 16			call break_point_state  
4cb3				endm  
# End of macro CALLMONITOR
4cb3				endif 
4cb3			 
4cb3			 
4cb3				       NEXTW 
4cb3 c3 8d 1f			jp macro_next 
4cb6				endm 
# End of macro NEXTW
4cb6			.ateof: 
4cb6 21 e0 4c				ld hl, .showeof 
4cb9 cd 92 1c				call forth_push_str 
4cbc 3e 00		.readeof:	ld a, 0 
4cbe 32 59 f8				ld (store_openext), a 
4cc1			 
4cc1					 
4cc1				if DEBUG_STORESE 
4cc1					DMARK "REF" 
4cc1 f5				push af  
4cc2 3a d6 4c			ld a, (.dmark)  
4cc5 32 77 fb			ld (debug_mark),a  
4cc8 3a d7 4c			ld a, (.dmark+1)  
4ccb 32 78 fb			ld (debug_mark+1),a  
4cce 3a d8 4c			ld a, (.dmark+2)  
4cd1 32 79 fb			ld (debug_mark+2),a  
4cd4 18 03			jr .pastdmark  
4cd6 ..			.dmark: db "REF"  
4cd9 f1			.pastdmark: pop af  
4cda			endm  
# End of macro DMARK
4cda					CALLMONITOR 
4cda cd 97 16			call break_point_state  
4cdd				endm  
# End of macro CALLMONITOR
4cdd				endif 
4cdd				       NEXTW 
4cdd c3 8d 1f			jp macro_next 
4ce0				endm 
# End of macro NEXTW
4ce0			 
4ce0 .. 00		.showeof:   db "eof", 0 
4ce4			 
4ce4			 
4ce4			.EOF: 
4ce4				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
4ce4 6d				db WORD_SYS_CORE+89             
4ce5 25 4d			dw .FORMAT            
4ce7 04				db 3 + 1 
4ce8 .. 00			db "EOF",0              
4cec				endm 
# End of macro CWHEAD
4cec			; | EOF ( n -- u )  Returns EOF logical state of file id n - CURRENTLY n IS IGNORED AND ONLY ONE STREAM IS SUPPORTED | DONE 
4cec			; | | e.g. 
4cec			; | | $01 OPEN REPEAT $01 READ $01 EOF $00 IF LOOP 
4cec					; TODO if current block id for stream is zero then push true else false 
4cec			 
4cec					if DEBUG_FORTH_WORDS_KEY 
4cec						DMARK "EOF" 
4cec f5				push af  
4ced 3a 01 4d			ld a, (.dmark)  
4cf0 32 77 fb			ld (debug_mark),a  
4cf3 3a 02 4d			ld a, (.dmark+1)  
4cf6 32 78 fb			ld (debug_mark+1),a  
4cf9 3a 03 4d			ld a, (.dmark+2)  
4cfc 32 79 fb			ld (debug_mark+2),a  
4cff 18 03			jr .pastdmark  
4d01 ..			.dmark: db "EOF"  
4d04 f1			.pastdmark: pop af  
4d05			endm  
# End of macro DMARK
4d05						CALLMONITOR 
4d05 cd 97 16			call break_point_state  
4d08				endm  
# End of macro CALLMONITOR
4d08					endif 
4d08			 
4d08					; TODO handlue multiple file streams 
4d08			 
4d08					FORTH_DSP_POP     ; for now just get rid of stream id 
4d08 cd d3 1e			call macro_forth_dsp_pop 
4d0b				endm 
# End of macro FORTH_DSP_POP
4d0b			 
4d0b 2e 01				ld l, 1 
4d0d 3a 58 f8				ld a, (store_openmaxext) 
4d10 fe 00				cp 0 
4d12 28 09				jr  z, .eofdone   ; empty file 
4d14 3a 59 f8				ld a, (store_openext) 
4d17 fe 00				cp 0 
4d19 28 02				jr  z, .eofdone 
4d1b 2e 00				ld l, 0 
4d1d 26 00		.eofdone:	ld h, 0 
4d1f cd 24 1c				call forth_push_numhl 
4d22			 
4d22			 
4d22				       NEXTW 
4d22 c3 8d 1f			jp macro_next 
4d25				endm 
# End of macro NEXTW
4d25			 
4d25			.FORMAT: 
4d25				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
4d25 6d				db WORD_SYS_CORE+89             
4d26 76 4d			dw .LABEL            
4d28 07				db 6 + 1 
4d29 .. 00			db "FORMAT",0              
4d30				endm 
# End of macro CWHEAD
4d30			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
4d30					; TODO if current block id for stream is zero then push true else false 
4d30				 
4d30				if DEBUG_STORESE 
4d30					DMARK "FOR" 
4d30 f5				push af  
4d31 3a 45 4d			ld a, (.dmark)  
4d34 32 77 fb			ld (debug_mark),a  
4d37 3a 46 4d			ld a, (.dmark+1)  
4d3a 32 78 fb			ld (debug_mark+1),a  
4d3d 3a 47 4d			ld a, (.dmark+2)  
4d40 32 79 fb			ld (debug_mark+2),a  
4d43 18 03			jr .pastdmark  
4d45 ..			.dmark: db "FOR"  
4d48 f1			.pastdmark: pop af  
4d49			endm  
# End of macro DMARK
4d49					CALLMONITOR 
4d49 cd 97 16			call break_point_state  
4d4c				endm  
# End of macro CALLMONITOR
4d4c				endif 
4d4c					; Wipes the bank check flags to cause a reformat on next block 0 read 
4d4c			 
4d4c 21 01 00				ld hl, 1 
4d4f 3e 00				ld a, 0 
4d51 cd ea 01				call se_writebyte 
4d54			 
4d54				if DEBUG_STORESE 
4d54					DMARK "FO0" 
4d54 f5				push af  
4d55 3a 69 4d			ld a, (.dmark)  
4d58 32 77 fb			ld (debug_mark),a  
4d5b 3a 6a 4d			ld a, (.dmark+1)  
4d5e 32 78 fb			ld (debug_mark+1),a  
4d61 3a 6b 4d			ld a, (.dmark+2)  
4d64 32 79 fb			ld (debug_mark+2),a  
4d67 18 03			jr .pastdmark  
4d69 ..			.dmark: db "FO0"  
4d6c f1			.pastdmark: pop af  
4d6d			endm  
# End of macro DMARK
4d6d					CALLMONITOR 
4d6d cd 97 16			call break_point_state  
4d70				endm  
# End of macro CALLMONITOR
4d70				endif 
4d70					; force bank init 
4d70			 
4d70 cd bd 03				call storage_get_block_0 
4d73					 
4d73				       NEXTW 
4d73 c3 8d 1f			jp macro_next 
4d76				endm 
# End of macro NEXTW
4d76			.LABEL: 
4d76				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
4d76 6d				db WORD_SYS_CORE+89             
4d77 c4 4d			dw .STOREPAGE            
4d79 06				db 5 + 1 
4d7a .. 00			db "LABEL",0              
4d80				endm 
# End of macro CWHEAD
4d80			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
4d80					; TODO test to see if bank is selected 
4d80				 
4d80					if DEBUG_FORTH_WORDS_KEY 
4d80						DMARK "LBL" 
4d80 f5				push af  
4d81 3a 95 4d			ld a, (.dmark)  
4d84 32 77 fb			ld (debug_mark),a  
4d87 3a 96 4d			ld a, (.dmark+1)  
4d8a 32 78 fb			ld (debug_mark+1),a  
4d8d 3a 97 4d			ld a, (.dmark+2)  
4d90 32 79 fb			ld (debug_mark+2),a  
4d93 18 03			jr .pastdmark  
4d95 ..			.dmark: db "LBL"  
4d98 f1			.pastdmark: pop af  
4d99			endm  
# End of macro DMARK
4d99						CALLMONITOR 
4d99 cd 97 16			call break_point_state  
4d9c				endm  
# End of macro CALLMONITOR
4d9c					endif 
4d9c			;	if DEBUG_STORESE 
4d9c			;		DMARK "LBL" 
4d9c			;		CALLMONITOR 
4d9c			;	endif 
4d9c					FORTH_DSP_VALUEHL 
4d9c cd 1b 1e			call macro_dsp_valuehl 
4d9f				endm 
# End of macro FORTH_DSP_VALUEHL
4d9f					;v5FORTH_DSP_VALUE 
4d9f					 
4d9f			;		push hl 
4d9f					FORTH_DSP_POP 
4d9f cd d3 1e			call macro_forth_dsp_pop 
4da2				endm 
# End of macro FORTH_DSP_POP
4da2			;		pop hl 
4da2			 
4da2			;v5		inc hl   ; move past the type marker 
4da2			 
4da2				if DEBUG_STORESE 
4da2					DMARK "LBl" 
4da2 f5				push af  
4da3 3a b7 4d			ld a, (.dmark)  
4da6 32 77 fb			ld (debug_mark),a  
4da9 3a b8 4d			ld a, (.dmark+1)  
4dac 32 78 fb			ld (debug_mark+1),a  
4daf 3a b9 4d			ld a, (.dmark+2)  
4db2 32 79 fb			ld (debug_mark+2),a  
4db5 18 03			jr .pastdmark  
4db7 ..			.dmark: db "LBl"  
4dba f1			.pastdmark: pop af  
4dbb			endm  
# End of macro DMARK
4dbb					CALLMONITOR 
4dbb cd 97 16			call break_point_state  
4dbe				endm  
# End of macro CALLMONITOR
4dbe				endif 
4dbe cd e1 04				call storage_label 
4dc1			 
4dc1				       NEXTW 
4dc1 c3 8d 1f			jp macro_next 
4dc4				endm 
# End of macro NEXTW
4dc4			.STOREPAGE: 
4dc4				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
4dc4 6d				db WORD_SYS_CORE+89             
4dc5 f7 4d			dw .LABELS            
4dc7 0a				db 9 + 1 
4dc8 .. 00			db "STOREPAGE",0              
4dd2				endm 
# End of macro CWHEAD
4dd2			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
4dd2					; TODO test to see if bank is selected 
4dd2				 
4dd2					if DEBUG_FORTH_WORDS_KEY 
4dd2						DMARK "STP" 
4dd2 f5				push af  
4dd3 3a e7 4d			ld a, (.dmark)  
4dd6 32 77 fb			ld (debug_mark),a  
4dd9 3a e8 4d			ld a, (.dmark+1)  
4ddc 32 78 fb			ld (debug_mark+1),a  
4ddf 3a e9 4d			ld a, (.dmark+2)  
4de2 32 79 fb			ld (debug_mark+2),a  
4de5 18 03			jr .pastdmark  
4de7 ..			.dmark: db "STP"  
4dea f1			.pastdmark: pop af  
4deb			endm  
# End of macro DMARK
4deb						CALLMONITOR 
4deb cd 97 16			call break_point_state  
4dee				endm  
# End of macro CALLMONITOR
4dee					endif 
4dee			;	if DEBUG_STORESE 
4dee			;		DMARK "STP" 
4dee			;		CALLMONITOR 
4dee			;	endif 
4dee			 
4dee 21 62 f8			ld hl, store_page 
4df1 cd 24 1c			call forth_push_numhl 
4df4			 
4df4			 
4df4				       NEXTW 
4df4 c3 8d 1f			jp macro_next 
4df7				endm 
# End of macro NEXTW
4df7			.LABELS: 
4df7				CWHEAD .ENDSTORAGE 89 "LABELS" 6 WORD_FLAG_CODE 
4df7 6d				db WORD_SYS_CORE+89             
4df8 81 4e			dw .ENDSTORAGE            
4dfa 07				db 6 + 1 
4dfb .. 00			db "LABELS",0              
4e02				endm 
# End of macro CWHEAD
4e02			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | TO TEST 
4e02					;  
4e02			 
4e02					; save the current device selected to restore afterwards 
4e02				 
4e02 3a 48 f8				ld a, (spi_device) 
4e05 f5					push af 
4e06			 
4e06			 
4e06					; run through each of the banks 
4e06			 
4e06 21 01 00				ld hl, 1 
4e09 cd 24 1c				call forth_push_numhl 
4e0c 3e ff				ld a, SPI_CE_HIGH 
4e0e cb 87				res SPI_CE0, a 
4e10 32 48 f8				ld (spi_device), a 
4e13 cd bd 03				call storage_get_block_0 
4e16 21 65 f8				ld hl, store_page+3 
4e19 cd 92 1c				call forth_push_str 
4e1c			 
4e1c					 
4e1c 21 02 00				ld hl, 2 
4e1f cd 24 1c				call forth_push_numhl 
4e22 3e ff				ld a, SPI_CE_HIGH 
4e24 cb 8f				res SPI_CE1, a 
4e26 32 48 f8				ld (spi_device), a 
4e29 cd bd 03				call storage_get_block_0 
4e2c 21 65 f8				ld hl, store_page+3 
4e2f cd 92 1c				call forth_push_str 
4e32			 
4e32					 
4e32 21 03 00				ld hl, 3 
4e35 cd 24 1c				call forth_push_numhl 
4e38 3e ff				ld a, SPI_CE_HIGH 
4e3a cb 97				res SPI_CE2, a 
4e3c 32 48 f8				ld (spi_device), a 
4e3f cd bd 03				call storage_get_block_0 
4e42 21 65 f8				ld hl, store_page+3 
4e45 cd 92 1c				call forth_push_str 
4e48			 
4e48			 
4e48 21 04 00				ld hl, 4 
4e4b cd 24 1c				call forth_push_numhl 
4e4e 3e ff				ld a, SPI_CE_HIGH 
4e50 cb 9f				res SPI_CE3, a 
4e52 32 48 f8				ld (spi_device), a 
4e55 cd bd 03				call storage_get_block_0 
4e58 21 65 f8				ld hl, store_page+3 
4e5b cd 92 1c				call forth_push_str 
4e5e			 
4e5e					 
4e5e			 
4e5e 21 05 00				ld hl, 5 
4e61 cd 24 1c				call forth_push_numhl 
4e64 3e ff				ld a, SPI_CE_HIGH 
4e66 cb a7				res SPI_CE4, a 
4e68 32 48 f8				ld (spi_device), a 
4e6b cd bd 03				call storage_get_block_0 
4e6e 21 65 f8				ld hl, store_page+3 
4e71 cd 92 1c				call forth_push_str 
4e74			 
4e74					 
4e74					; push fixed count of storage devices (on board) for now 
4e74			 
4e74 21 05 00				ld hl, 5 
4e77 cd 24 1c				call forth_push_numhl 
4e7a			 
4e7a					; restore selected device  
4e7a				 
4e7a f1					pop af 
4e7b 32 48 f8				ld (spi_device), a 
4e7e			 
4e7e				       NEXTW 
4e7e c3 8d 1f			jp macro_next 
4e81				endm 
# End of macro NEXTW
4e81			 
4e81			.ENDSTORAGE: 
4e81			; eof 
# End of file forth_words_storage.asm
4e81			endif 
4e81				include "forth_words_device.asm" 
4e81			; Device related words 
4e81			 
4e81			; | ## Device Words 
4e81			 
4e81			if SOUND_ENABLE 
4e81			.NOTE: 
4e81				CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4e81 33				db WORD_SYS_CORE+31             
4e82 a9 4e			dw .AFTERSOUND            
4e84 05				db 4 + 1 
4e85 .. 00			db "NOTE",0              
4e8a				endm 
# End of macro CWHEAD
4e8a			; | NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds | TODO 
4e8a					if DEBUG_FORTH_WORDS_KEY 
4e8a						DMARK "NTE" 
4e8a f5				push af  
4e8b 3a 9f 4e			ld a, (.dmark)  
4e8e 32 77 fb			ld (debug_mark),a  
4e91 3a a0 4e			ld a, (.dmark+1)  
4e94 32 78 fb			ld (debug_mark+1),a  
4e97 3a a1 4e			ld a, (.dmark+2)  
4e9a 32 79 fb			ld (debug_mark+2),a  
4e9d 18 03			jr .pastdmark  
4e9f ..			.dmark: db "NTE"  
4ea2 f1			.pastdmark: pop af  
4ea3			endm  
# End of macro DMARK
4ea3						CALLMONITOR 
4ea3 cd 97 16			call break_point_state  
4ea6				endm  
# End of macro CALLMONITOR
4ea6					endif 
4ea6			 
4ea6				 
4ea6			 
4ea6					NEXTW 
4ea6 c3 8d 1f			jp macro_next 
4ea9				endm 
# End of macro NEXTW
4ea9			.AFTERSOUND: 
4ea9			endif 
4ea9			 
4ea9			 
4ea9			USE_GPIO: equ 0 
4ea9			 
4ea9			if USE_GPIO 
4ea9			.GP1: 
4ea9				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4ea9			; | IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result  |  
4ea9					NEXTW 
4ea9			.GP2: 
4ea9				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4ea9			; | IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2  |  
4ea9			 
4ea9					NEXTW 
4ea9			 
4ea9			.GP3: 
4ea9				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4ea9			; | IOBYTE ( u1 --  )    Perform a GPIO write of byte u1  |  
4ea9			 
4ea9					NEXTW 
4ea9			 
4ea9			.GP4: 
4ea9				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4ea9			; | IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin  |  
4ea9			 
4ea9					NEXTW 
4ea9			.SIN: 
4ea9			 
4ea9			 
4ea9			endif 
4ea9			 
4ea9			 
4ea9				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4ea9 33				db WORD_SYS_CORE+31             
4eaa de 4e			dw .SOUT            
4eac 03				db 2 + 1 
4ead .. 00			db "IN",0              
4eb0				endm 
# End of macro CWHEAD
4eb0			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4eb0					if DEBUG_FORTH_WORDS_KEY 
4eb0						DMARK "IN." 
4eb0 f5				push af  
4eb1 3a c5 4e			ld a, (.dmark)  
4eb4 32 77 fb			ld (debug_mark),a  
4eb7 3a c6 4e			ld a, (.dmark+1)  
4eba 32 78 fb			ld (debug_mark+1),a  
4ebd 3a c7 4e			ld a, (.dmark+2)  
4ec0 32 79 fb			ld (debug_mark+2),a  
4ec3 18 03			jr .pastdmark  
4ec5 ..			.dmark: db "IN."  
4ec8 f1			.pastdmark: pop af  
4ec9			endm  
# End of macro DMARK
4ec9						CALLMONITOR 
4ec9 cd 97 16			call break_point_state  
4ecc				endm  
# End of macro CALLMONITOR
4ecc					endif 
4ecc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ecc cd 1b 1e			call macro_dsp_valuehl 
4ecf				endm 
# End of macro FORTH_DSP_VALUEHL
4ecf			 
4ecf e5					push hl 
4ed0			 
4ed0					; destroy value TOS 
4ed0			 
4ed0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4ed0 cd d3 1e			call macro_forth_dsp_pop 
4ed3				endm 
# End of macro FORTH_DSP_POP
4ed3			 
4ed3					; one value on hl get other one back 
4ed3			 
4ed3 c1					pop bc 
4ed4			 
4ed4					; do the sub 
4ed4			;		ex de, hl 
4ed4			 
4ed4 ed 68				in l,(c) 
4ed6			 
4ed6					; save it 
4ed6			 
4ed6 26 00				ld h,0 
4ed8			 
4ed8					; TODO push value back onto stack for another op etc 
4ed8			 
4ed8 cd 24 1c				call forth_push_numhl 
4edb					NEXTW 
4edb c3 8d 1f			jp macro_next 
4ede				endm 
# End of macro NEXTW
4ede			.SOUT: 
4ede				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4ede 34				db WORD_SYS_CORE+32             
4edf 31 4f			dw .SPIO            
4ee1 04				db 3 + 1 
4ee2 .. 00			db "OUT",0              
4ee6				endm 
# End of macro CWHEAD
4ee6			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4ee6					if DEBUG_FORTH_WORDS_KEY 
4ee6						DMARK "OUT" 
4ee6 f5				push af  
4ee7 3a fb 4e			ld a, (.dmark)  
4eea 32 77 fb			ld (debug_mark),a  
4eed 3a fc 4e			ld a, (.dmark+1)  
4ef0 32 78 fb			ld (debug_mark+1),a  
4ef3 3a fd 4e			ld a, (.dmark+2)  
4ef6 32 79 fb			ld (debug_mark+2),a  
4ef9 18 03			jr .pastdmark  
4efb ..			.dmark: db "OUT"  
4efe f1			.pastdmark: pop af  
4eff			endm  
# End of macro DMARK
4eff						CALLMONITOR 
4eff cd 97 16			call break_point_state  
4f02				endm  
# End of macro CALLMONITOR
4f02					endif 
4f02			 
4f02					; get port 
4f02			 
4f02					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f02 cd 1b 1e			call macro_dsp_valuehl 
4f05				endm 
# End of macro FORTH_DSP_VALUEHL
4f05			 
4f05 e5					push hl 
4f06			 
4f06					; destroy value TOS 
4f06			 
4f06					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f06 cd d3 1e			call macro_forth_dsp_pop 
4f09				endm 
# End of macro FORTH_DSP_POP
4f09			 
4f09					; get byte to send 
4f09			 
4f09					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f09 cd 1b 1e			call macro_dsp_valuehl 
4f0c				endm 
# End of macro FORTH_DSP_VALUEHL
4f0c			 
4f0c			;		push hl 
4f0c			 
4f0c					; destroy value TOS 
4f0c			 
4f0c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f0c cd d3 1e			call macro_forth_dsp_pop 
4f0f				endm 
# End of macro FORTH_DSP_POP
4f0f			 
4f0f					; one value on hl get other one back 
4f0f			 
4f0f			;		pop hl 
4f0f			 
4f0f c1					pop bc 
4f10			 
4f10					if DEBUG_FORTH_WORDS 
4f10						DMARK "OUT" 
4f10 f5				push af  
4f11 3a 25 4f			ld a, (.dmark)  
4f14 32 77 fb			ld (debug_mark),a  
4f17 3a 26 4f			ld a, (.dmark+1)  
4f1a 32 78 fb			ld (debug_mark+1),a  
4f1d 3a 27 4f			ld a, (.dmark+2)  
4f20 32 79 fb			ld (debug_mark+2),a  
4f23 18 03			jr .pastdmark  
4f25 ..			.dmark: db "OUT"  
4f28 f1			.pastdmark: pop af  
4f29			endm  
# End of macro DMARK
4f29						CALLMONITOR 
4f29 cd 97 16			call break_point_state  
4f2c				endm  
# End of macro CALLMONITOR
4f2c					endif 
4f2c			 
4f2c ed 69				out (c), l 
4f2e			 
4f2e					NEXTW 
4f2e c3 8d 1f			jp macro_next 
4f31				endm 
# End of macro NEXTW
4f31			 
4f31			 
4f31			.SPIO: 
4f31			 
4f31			if STORAGE_SE 
4f31				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4f31 51				db WORD_SYS_CORE+61             
4f32 42 4f			dw .SPICEH            
4f34 07				db 6 + 1 
4f35 .. 00			db "SPICEL",0              
4f3c				endm 
# End of macro CWHEAD
4f3c			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4f3c			 
4f3c cd 98 01				call spi_ce_low 
4f3f			    NEXTW 
4f3f c3 8d 1f			jp macro_next 
4f42				endm 
# End of macro NEXTW
4f42			 
4f42			.SPICEH: 
4f42				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4f42 51				db WORD_SYS_CORE+61             
4f43 53 4f			dw .SPIOb            
4f45 07				db 6 + 1 
4f46 .. 00			db "SPICEH",0              
4f4d				endm 
# End of macro CWHEAD
4f4d			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4f4d			 
4f4d cd 87 01				call spi_ce_high 
4f50			    NEXTW 
4f50 c3 8d 1f			jp macro_next 
4f53				endm 
# End of macro NEXTW
4f53			 
4f53			 
4f53			.SPIOb: 
4f53			 
4f53				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4f53 51				db WORD_SYS_CORE+61             
4f54 69 4f			dw .SPII            
4f56 05				db 4 + 1 
4f57 .. 00			db "SPIO",0              
4f5c				endm 
# End of macro CWHEAD
4f5c			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4f5c			 
4f5c					; get port 
4f5c			 
4f5c			 
4f5c					; get byte to send 
4f5c			 
4f5c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f5c cd 1b 1e			call macro_dsp_valuehl 
4f5f				endm 
# End of macro FORTH_DSP_VALUEHL
4f5f			 
4f5f			;		push hl    ; u1  
4f5f			 
4f5f					; destroy value TOS 
4f5f			 
4f5f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f5f cd d3 1e			call macro_forth_dsp_pop 
4f62				endm 
# End of macro FORTH_DSP_POP
4f62			 
4f62					; one value on hl get other one back 
4f62			 
4f62			;		pop hl   ; u2 - addr 
4f62			 
4f62					; TODO Send SPI byte 
4f62			 
4f62 7d					ld a, l 
4f63 cd bc 00				call spi_send_byte 
4f66			 
4f66					NEXTW 
4f66 c3 8d 1f			jp macro_next 
4f69				endm 
# End of macro NEXTW
4f69			 
4f69			.SPII: 
4f69				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4f69 52				db WORD_SYS_CORE+62             
4f6a 7e 4f			dw .SESEL            
4f6c 06				db 5 + 1 
4f6d .. 00			db "SPII",0              
4f72				endm 
# End of macro CWHEAD
4f72			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4f72			 
4f72					; TODO Get SPI byte 
4f72			 
4f72 cd dd 00				call spi_read_byte 
4f75			 
4f75 26 00				ld h, 0 
4f77 6f					ld l, a 
4f78 cd 24 1c				call forth_push_numhl 
4f7b			 
4f7b					NEXTW 
4f7b c3 8d 1f			jp macro_next 
4f7e				endm 
# End of macro NEXTW
4f7e			 
4f7e			 
4f7e			 
4f7e			.SESEL: 
4f7e				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4f7e 66				db WORD_SYS_CORE+82             
4f7f 22 50			dw .CARTDEV            
4f81 05				db 4 + 1 
4f82 .. 00			db "BANK",0              
4f87				endm 
# End of macro CWHEAD
4f87			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4f87					if DEBUG_FORTH_WORDS_KEY 
4f87						DMARK "BNK" 
4f87 f5				push af  
4f88 3a 9c 4f			ld a, (.dmark)  
4f8b 32 77 fb			ld (debug_mark),a  
4f8e 3a 9d 4f			ld a, (.dmark+1)  
4f91 32 78 fb			ld (debug_mark+1),a  
4f94 3a 9e 4f			ld a, (.dmark+2)  
4f97 32 79 fb			ld (debug_mark+2),a  
4f9a 18 03			jr .pastdmark  
4f9c ..			.dmark: db "BNK"  
4f9f f1			.pastdmark: pop af  
4fa0			endm  
# End of macro DMARK
4fa0						CALLMONITOR 
4fa0 cd 97 16			call break_point_state  
4fa3				endm  
# End of macro CALLMONITOR
4fa3					endif 
4fa3			 
4fa3 3e ff				ld a, 255 
4fa5 32 4b f8				ld (spi_cartdev), a 
4fa8			 
4fa8					; get bank 
4fa8			 
4fa8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4fa8 cd 1b 1e			call macro_dsp_valuehl 
4fab				endm 
# End of macro FORTH_DSP_VALUEHL
4fab			 
4fab			;		push hl 
4fab			 
4fab					; destroy value TOS 
4fab			 
4fab					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4fab cd d3 1e			call macro_forth_dsp_pop 
4fae				endm 
# End of macro FORTH_DSP_POP
4fae			 
4fae					; one value on hl get other one back 
4fae			 
4fae			;		pop hl 
4fae			 
4fae			 
4fae 0e ff				ld c, SPI_CE_HIGH 
4fb0 06 30				ld b, '0'    ; human readable bank number 
4fb2			 
4fb2 7d					ld a, l 
4fb3			 
4fb3					if DEBUG_FORTH_WORDS 
4fb3						DMARK "BNK" 
4fb3 f5				push af  
4fb4 3a c8 4f			ld a, (.dmark)  
4fb7 32 77 fb			ld (debug_mark),a  
4fba 3a c9 4f			ld a, (.dmark+1)  
4fbd 32 78 fb			ld (debug_mark+1),a  
4fc0 3a ca 4f			ld a, (.dmark+2)  
4fc3 32 79 fb			ld (debug_mark+2),a  
4fc6 18 03			jr .pastdmark  
4fc8 ..			.dmark: db "BNK"  
4fcb f1			.pastdmark: pop af  
4fcc			endm  
# End of macro DMARK
4fcc						CALLMONITOR 
4fcc cd 97 16			call break_point_state  
4fcf				endm  
# End of macro CALLMONITOR
4fcf					endif 
4fcf			 
4fcf					; active low 
4fcf			 
4fcf fe 00				cp 0 
4fd1 28 28				jr z, .bset 
4fd3 fe 01				cp 1 
4fd5 20 04				jr nz, .b2 
4fd7 cb 81				res 0, c 
4fd9 06 31				ld b, '1'    ; human readable bank number 
4fdb fe 02		.b2:		cp 2 
4fdd 20 04				jr nz, .b3 
4fdf cb 89				res 1, c 
4fe1 06 32				ld b, '2'    ; human readable bank number 
4fe3 fe 03		.b3:		cp 3 
4fe5 20 04				jr nz, .b4 
4fe7 cb 91				res 2, c 
4fe9 06 33				ld b, '3'    ; human readable bank number 
4feb fe 04		.b4:		cp 4 
4fed 20 04				jr nz, .b5 
4fef cb 99				res 3, c 
4ff1 06 34				ld b, '4'    ; human readable bank number 
4ff3 fe 05		.b5:		cp 5 
4ff5 20 04				jr nz, .bset 
4ff7 cb a1				res 4, c 
4ff9 06 35				ld b, '5'    ; human readable bank number 
4ffb			 
4ffb			.bset: 
4ffb 79					ld a, c 
4ffc 32 48 f8				ld (spi_device),a 
4fff 78					ld a, b 
5000 32 47 f8				ld (spi_device_id),a 
5003					if DEBUG_FORTH_WORDS 
5003						DMARK "BN2" 
5003 f5				push af  
5004 3a 18 50			ld a, (.dmark)  
5007 32 77 fb			ld (debug_mark),a  
500a 3a 19 50			ld a, (.dmark+1)  
500d 32 78 fb			ld (debug_mark+1),a  
5010 3a 1a 50			ld a, (.dmark+2)  
5013 32 79 fb			ld (debug_mark+2),a  
5016 18 03			jr .pastdmark  
5018 ..			.dmark: db "BN2"  
501b f1			.pastdmark: pop af  
501c			endm  
# End of macro DMARK
501c						CALLMONITOR 
501c cd 97 16			call break_point_state  
501f				endm  
# End of macro CALLMONITOR
501f					endif 
501f			 
501f					NEXTW 
501f c3 8d 1f			jp macro_next 
5022				endm 
# End of macro NEXTW
5022			 
5022			.CARTDEV: 
5022				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5022 66				db WORD_SYS_CORE+82             
5023 cb 50			dw .ENDDEVICE            
5025 08				db 7 + 1 
5026 .. 00			db "CARTDEV",0              
502e				endm 
# End of macro CWHEAD
502e			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
502e					if DEBUG_FORTH_WORDS_KEY 
502e						DMARK "CDV" 
502e f5				push af  
502f 3a 43 50			ld a, (.dmark)  
5032 32 77 fb			ld (debug_mark),a  
5035 3a 44 50			ld a, (.dmark+1)  
5038 32 78 fb			ld (debug_mark+1),a  
503b 3a 45 50			ld a, (.dmark+2)  
503e 32 79 fb			ld (debug_mark+2),a  
5041 18 03			jr .pastdmark  
5043 ..			.dmark: db "CDV"  
5046 f1			.pastdmark: pop af  
5047			endm  
# End of macro DMARK
5047						CALLMONITOR 
5047 cd 97 16			call break_point_state  
504a				endm  
# End of macro CALLMONITOR
504a					endif 
504a			 
504a					; disable se storage bank selection 
504a			 
504a 3e ff				ld a, SPI_CE_HIGH		; ce high 
504c 32 48 f8				ld (spi_device), a 
504f			 
504f					; get bank 
504f			 
504f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
504f cd 1b 1e			call macro_dsp_valuehl 
5052				endm 
# End of macro FORTH_DSP_VALUEHL
5052			 
5052			;		push hl 
5052			 
5052					; destroy value TOS 
5052			 
5052					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5052 cd d3 1e			call macro_forth_dsp_pop 
5055				endm 
# End of macro FORTH_DSP_POP
5055			 
5055					; one value on hl get other one back 
5055			 
5055			;		pop hl 
5055			 
5055					; active low 
5055			 
5055 0e ff				ld c, 255 
5057			 
5057 7d					ld a, l 
5058					if DEBUG_FORTH_WORDS 
5058						DMARK "CDV" 
5058 f5				push af  
5059 3a 6d 50			ld a, (.dmark)  
505c 32 77 fb			ld (debug_mark),a  
505f 3a 6e 50			ld a, (.dmark+1)  
5062 32 78 fb			ld (debug_mark+1),a  
5065 3a 6f 50			ld a, (.dmark+2)  
5068 32 79 fb			ld (debug_mark+2),a  
506b 18 03			jr .pastdmark  
506d ..			.dmark: db "CDV"  
5070 f1			.pastdmark: pop af  
5071			endm  
# End of macro DMARK
5071						CALLMONITOR 
5071 cd 97 16			call break_point_state  
5074				endm  
# End of macro CALLMONITOR
5074					endif 
5074 fe 00				cp 0 
5076 28 30				jr z, .cset 
5078 fe 01				cp 1 
507a 20 02				jr nz, .c2 
507c cb 81				res 0, c 
507e fe 02		.c2:		cp 2 
5080 20 02				jr nz, .c3 
5082 cb 89				res 1, c 
5084 fe 03		.c3:		cp 3 
5086 20 02				jr nz, .c4 
5088 cb 91				res 2, c 
508a fe 04		.c4:		cp 4 
508c 20 02				jr nz, .c5 
508e cb 99				res 3, c 
5090 fe 05		.c5:		cp 5 
5092 20 02				jr nz, .c6 
5094 cb a1				res 4, c 
5096 fe 06		.c6:		cp 6 
5098 20 02				jr nz, .c7 
509a cb a9				res 5, c 
509c fe 07		.c7:		cp 7 
509e 20 02				jr nz, .c8 
50a0 cb b1				res 6, c 
50a2 fe 08		.c8:		cp 8 
50a4 20 02				jr nz, .cset 
50a6 cb b9				res 7, c 
50a8 79			.cset:		ld a, c 
50a9 32 4b f8				ld (spi_cartdev),a 
50ac			 
50ac					if DEBUG_FORTH_WORDS 
50ac						DMARK "CD2" 
50ac f5				push af  
50ad 3a c1 50			ld a, (.dmark)  
50b0 32 77 fb			ld (debug_mark),a  
50b3 3a c2 50			ld a, (.dmark+1)  
50b6 32 78 fb			ld (debug_mark+1),a  
50b9 3a c3 50			ld a, (.dmark+2)  
50bc 32 79 fb			ld (debug_mark+2),a  
50bf 18 03			jr .pastdmark  
50c1 ..			.dmark: db "CD2"  
50c4 f1			.pastdmark: pop af  
50c5			endm  
# End of macro DMARK
50c5						CALLMONITOR 
50c5 cd 97 16			call break_point_state  
50c8				endm  
# End of macro CALLMONITOR
50c8					endif 
50c8					NEXTW 
50c8 c3 8d 1f			jp macro_next 
50cb				endm 
# End of macro NEXTW
50cb			endif 
50cb			 
50cb			.ENDDEVICE: 
50cb			; eof 
50cb			 
# End of file forth_words_device.asm
50cb			 
50cb			; var handler 
50cb			 
50cb			 
50cb			.VARS: 
50cb				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
50cb 78				db WORD_SYS_CORE+100             
50cc e3 50			dw .V0Q            
50ce 04				db 3 + 1 
50cf .. 00			db "V0!",0              
50d3				endm 
# End of macro CWHEAD
50d3			;| V0! ( u1 -- )  Store value to v0  | DONE 
50d3			 
50d3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
50d3 cd 1b 1e			call macro_dsp_valuehl 
50d6				endm 
# End of macro FORTH_DSP_VALUEHL
50d6			 
50d6 11 10 f8				ld de, cli_var_array 
50d9			 
50d9 eb					ex de, hl 
50da 73					ld (hl), e 
50db 23					inc hl 
50dc 72					ld (hl), d 
50dd			 
50dd					; destroy value TOS 
50dd			 
50dd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
50dd cd d3 1e			call macro_forth_dsp_pop 
50e0				endm 
# End of macro FORTH_DSP_POP
50e0			 
50e0				       NEXTW 
50e0 c3 8d 1f			jp macro_next 
50e3				endm 
# End of macro NEXTW
50e3			.V0Q: 
50e3				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
50e3 79				db WORD_SYS_CORE+101             
50e4 f4 50			dw .V1S            
50e6 04				db 3 + 1 
50e7 .. 00			db "V0@",0              
50eb				endm 
# End of macro CWHEAD
50eb			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
50eb 2a 10 f8				ld hl, (cli_var_array) 
50ee cd 24 1c				call forth_push_numhl 
50f1			 
50f1				       NEXTW 
50f1 c3 8d 1f			jp macro_next 
50f4				endm 
# End of macro NEXTW
50f4			.V1S: 
50f4				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
50f4 7a				db WORD_SYS_CORE+102             
50f5 0c 51			dw .V1Q            
50f7 04				db 3 + 1 
50f8 .. 00			db "V1!",0              
50fc				endm 
# End of macro CWHEAD
50fc			;| V1! ( u1 -- )  Store value to v1 | DONE 
50fc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
50fc cd 1b 1e			call macro_dsp_valuehl 
50ff				endm 
# End of macro FORTH_DSP_VALUEHL
50ff			 
50ff 11 12 f8				ld de, cli_var_array+2 
5102				 
5102 eb					ex de, hl 
5103 73					ld (hl), e 
5104 23					inc hl 
5105 72					ld (hl), d 
5106			 
5106					; destroy value TOS 
5106			 
5106					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5106 cd d3 1e			call macro_forth_dsp_pop 
5109				endm 
# End of macro FORTH_DSP_POP
5109				       NEXTW 
5109 c3 8d 1f			jp macro_next 
510c				endm 
# End of macro NEXTW
510c			.V1Q: 
510c				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
510c 7b				db WORD_SYS_CORE+103             
510d 1d 51			dw .V2S            
510f 04				db 3 + 1 
5110 .. 00			db "V1@",0              
5114				endm 
# End of macro CWHEAD
5114			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5114 2a 12 f8				ld hl, (cli_var_array+2) 
5117 cd 24 1c				call forth_push_numhl 
511a				       NEXTW 
511a c3 8d 1f			jp macro_next 
511d				endm 
# End of macro NEXTW
511d			.V2S: 
511d				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
511d 7c				db WORD_SYS_CORE+104             
511e 35 51			dw .V2Q            
5120 04				db 3 + 1 
5121 .. 00			db "V2!",0              
5125				endm 
# End of macro CWHEAD
5125			;| V2! ( u1 -- )  Store value to v2 | DONE 
5125					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5125 cd 1b 1e			call macro_dsp_valuehl 
5128				endm 
# End of macro FORTH_DSP_VALUEHL
5128			 
5128 11 14 f8				ld de, cli_var_array+4 
512b				 
512b eb					ex de, hl 
512c 73					ld (hl), e 
512d 23					inc hl 
512e 72					ld (hl), d 
512f			 
512f					; destroy value TOS 
512f			 
512f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
512f cd d3 1e			call macro_forth_dsp_pop 
5132				endm 
# End of macro FORTH_DSP_POP
5132				       NEXTW 
5132 c3 8d 1f			jp macro_next 
5135				endm 
# End of macro NEXTW
5135			.V2Q: 
5135				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5135 7d				db WORD_SYS_CORE+105             
5136 46 51			dw .V3S            
5138 04				db 3 + 1 
5139 .. 00			db "V2@",0              
513d				endm 
# End of macro CWHEAD
513d			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
513d 2a 14 f8				ld hl, (cli_var_array+4) 
5140 cd 24 1c				call forth_push_numhl 
5143				       NEXTW 
5143 c3 8d 1f			jp macro_next 
5146				endm 
# End of macro NEXTW
5146			.V3S: 
5146				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5146 7c				db WORD_SYS_CORE+104             
5147 5e 51			dw .V3Q            
5149 04				db 3 + 1 
514a .. 00			db "V3!",0              
514e				endm 
# End of macro CWHEAD
514e			;| V3! ( u1 -- )  Store value to v3 | DONE 
514e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
514e cd 1b 1e			call macro_dsp_valuehl 
5151				endm 
# End of macro FORTH_DSP_VALUEHL
5151			 
5151 11 16 f8				ld de, cli_var_array+6 
5154				 
5154 eb					ex de, hl 
5155 73					ld (hl), e 
5156 23					inc hl 
5157 72					ld (hl), d 
5158			 
5158					; destroy value TOS 
5158			 
5158					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5158 cd d3 1e			call macro_forth_dsp_pop 
515b				endm 
# End of macro FORTH_DSP_POP
515b				       NEXTW 
515b c3 8d 1f			jp macro_next 
515e				endm 
# End of macro NEXTW
515e			.V3Q: 
515e				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
515e 7d				db WORD_SYS_CORE+105             
515f 6f 51			dw .END            
5161 04				db 3 + 1 
5162 .. 00			db "V3@",0              
5166				endm 
# End of macro CWHEAD
5166			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5166 2a 16 f8				ld hl, (cli_var_array+6) 
5169 cd 24 1c				call forth_push_numhl 
516c				       NEXTW 
516c c3 8d 1f			jp macro_next 
516f				endm 
# End of macro NEXTW
516f			 
516f			 
516f			 
516f			 
516f			 
516f			; end of dict marker 
516f			 
516f 00			.END:    db WORD_SYS_END 
5170 00 00			dw 0 
5172 00				db 0 
5173			 
5173			; use to jp here for user dict words to save on macro expansion  
5173			 
5173			user_dict_next: 
5173				NEXTW 
5173 c3 8d 1f			jp macro_next 
5176				endm 
# End of macro NEXTW
5176			 
5176			 
5176			user_exec: 
5176				;    ld hl, <word code> 
5176				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
5176				;    call forthexec 
5176				;    jp user_dict_next   (NEXT) 
5176			        ;    <word code bytes> 
5176 eb				ex de, hl 
5177 2a 1e f1			ld hl,(os_tok_ptr) 
517a				 
517a				FORTH_RSP_NEXT 
517a cd cb 1b			call macro_forth_rsp_next 
517d				endm 
# End of macro FORTH_RSP_NEXT
517d			 
517d			if DEBUG_FORTH_UWORD 
517d						DMARK "UEX" 
517d f5				push af  
517e 3a 92 51			ld a, (.dmark)  
5181 32 77 fb			ld (debug_mark),a  
5184 3a 93 51			ld a, (.dmark+1)  
5187 32 78 fb			ld (debug_mark+1),a  
518a 3a 94 51			ld a, (.dmark+2)  
518d 32 79 fb			ld (debug_mark+2),a  
5190 18 03			jr .pastdmark  
5192 ..			.dmark: db "UEX"  
5195 f1			.pastdmark: pop af  
5196			endm  
# End of macro DMARK
5196				CALLMONITOR 
5196 cd 97 16			call break_point_state  
5199				endm  
# End of macro CALLMONITOR
5199			endif 
5199			 
5199			 
5199			 
5199 eb				ex de, hl 
519a 22 1e f1			ld (os_tok_ptr), hl 
519d				 
519d				; Don't use next - Skips the first word in uword. 
519d			 
519d c3 1e 20			jp exec1 
51a0			;	NEXT 
51a0			 
51a0			 
51a0			; eof 
# End of file forth_wordsv4.asm
51a0			endif 
51a0			;;;;;;;;;;;;;; Debug code 
51a0			 
51a0			 
51a0			;if DEBUG_FORTH_PARSE 
51a0 .. 00		.nowordfound: db "No match",0 
51a9 .. 00		.compword:	db "Comparing word ",0 
51b9 .. 00		.nextwordat:	db "Next word at",0 
51c6 .. 00		.charmatch:	db "Char match",0 
51d1			;endif 
51d1			if DEBUG_FORTH_JP 
51d1			.foundword:	db "Word match. Exec..",0 
51d1			endif 
51d1			;if DEBUG_FORTH_PUSH 
51d1 .. 00		.enddict:	db "Dict end. Push.",0 
51e1 .. 00		.push_str:	db "Pushing string",0 
51f0 .. 00		.push_num:	db "Pushing number",0 
51ff .. 00		.data_sp:	db "SP:",0 
5203 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5215 .. 00		.wordinde:	db "Word in DE (3/0):",0 
5227 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5239			;endif 
5239			;if DEBUG_FORTH_MALLOC 
5239 .. 00		.push_malloc:	db "Malloc address",0 
5248			;endif 
5248			 
5248			 
5248			 
5248			; display malloc address and current data stack pointer  
5248			 
5248			malloc_error: 
5248 d5				push de 
5249 f5				push af 
524a e5				push hl 
524b cd d5 0a			call clear_display 
524e 11 70 52			ld de, .mallocerr 
5251 3e 00			ld a,0 
5253			;	ld de,os_word_scratch 
5253 cd e8 0a			call str_at_display 
5256 3e 11			ld a, display_row_1+17 
5258 11 77 fb			ld de, debug_mark 
525b cd e8 0a			call str_at_display 
525e cd f8 0a			call update_display 
5261				;call break_point_state 
5261 cd 41 68			call cin_wait 
5264			 
5264 3e 20			ld a, ' ' 
5266 32 0e ee			ld (os_view_disable), a 
5269 e1				pop hl 
526a f1				pop af 
526b d1				pop de	 
526c				CALLMONITOR 
526c cd 97 16			call break_point_state  
526f				endm  
# End of macro CALLMONITOR
526f c9				ret 
5270			 
5270 .. 00		.mallocerr: 	db "Malloc Error",0 
527d			;if DEBUG_FORTH_PUSH 
527d			display_data_sp: 
527d f5				push af 
527e			 
527e				; see if disabled 
527e			 
527e 3a 0e ee			ld a, (os_view_disable) 
5281 fe 2a			cp '*' 
5283 28 67			jr z, .skipdsp 
5285			 
5285 e5				push hl 
5286 e5				push hl 
5287 e5			push hl 
5288 cd d5 0a			call clear_display 
528b e1			pop hl 
528c 7c				ld a,h 
528d 21 22 f1			ld hl, os_word_scratch 
5290 cd 0a 10			call hexout 
5293 e1				pop hl 
5294 7d				ld a,l 
5295 21 24 f1			ld hl, os_word_scratch+2 
5298 cd 0a 10			call hexout 
529b 21 26 f1			ld hl, os_word_scratch+4 
529e 3e 00			ld a,0 
52a0 77				ld (hl),a 
52a1 11 22 f1			ld de,os_word_scratch 
52a4 3e 28				ld a, display_row_2 
52a6 cd e8 0a				call str_at_display 
52a9 11 03 52			ld de, .wordinhl 
52ac 3e 00			ld a, display_row_1 
52ae			 
52ae cd e8 0a				call str_at_display 
52b1 11 77 fb			ld de, debug_mark 
52b4 3e 11			ld a, display_row_1+17 
52b6			 
52b6 cd e8 0a				call str_at_display 
52b9			 
52b9				; display current data stack pointer 
52b9 11 ff 51			ld de,.data_sp 
52bc 3e 30				ld a, display_row_2 + 8 
52be cd e8 0a				call str_at_display 
52c1			 
52c1 2a 0a f8			ld hl,(cli_data_sp) 
52c4 e5				push hl 
52c5 7c				ld a,h 
52c6 21 22 f1			ld hl, os_word_scratch 
52c9 cd 0a 10			call hexout 
52cc e1				pop hl 
52cd 7d				ld a,l 
52ce 21 24 f1			ld hl, os_word_scratch+2 
52d1 cd 0a 10			call hexout 
52d4 21 26 f1			ld hl, os_word_scratch+4 
52d7 3e 00			ld a,0 
52d9 77				ld (hl),a 
52da 11 22 f1			ld de,os_word_scratch 
52dd 3e 33				ld a, display_row_2 + 11 
52df cd e8 0a				call str_at_display 
52e2			 
52e2			 
52e2 cd f8 0a			call update_display 
52e5 cd 55 0a			call delay1s 
52e8 cd 55 0a			call delay1s 
52eb e1				pop hl 
52ec			.skipdsp: 
52ec f1				pop af 
52ed c9				ret 
52ee			 
52ee			display_data_malloc: 
52ee			 
52ee f5				push af 
52ef e5				push hl 
52f0 e5				push hl 
52f1 e5			push hl 
52f2 cd d5 0a			call clear_display 
52f5 e1			pop hl 
52f6 7c				ld a,h 
52f7 21 22 f1			ld hl, os_word_scratch 
52fa cd 0a 10			call hexout 
52fd e1				pop hl 
52fe 7d				ld a,l 
52ff 21 24 f1			ld hl, os_word_scratch+2 
5302 cd 0a 10			call hexout 
5305 21 26 f1			ld hl, os_word_scratch+4 
5308 3e 00			ld a,0 
530a 77				ld (hl),a 
530b 11 22 f1			ld de,os_word_scratch 
530e 3e 28				ld a, display_row_2 
5310 cd e8 0a				call str_at_display 
5313 11 39 52			ld de, .push_malloc 
5316 3e 00			ld a, display_row_1 
5318			 
5318 cd e8 0a				call str_at_display 
531b			 
531b				; display current data stack pointer 
531b 11 ff 51			ld de,.data_sp 
531e 3e 30				ld a, display_row_2 + 8 
5320 cd e8 0a				call str_at_display 
5323			 
5323 2a 0a f8			ld hl,(cli_data_sp) 
5326 e5				push hl 
5327 7c				ld a,h 
5328 21 22 f1			ld hl, os_word_scratch 
532b cd 0a 10			call hexout 
532e e1				pop hl 
532f 7d				ld a,l 
5330 21 24 f1			ld hl, os_word_scratch+2 
5333 cd 0a 10			call hexout 
5336 21 26 f1			ld hl, os_word_scratch+4 
5339 3e 00			ld a,0 
533b 77				ld (hl),a 
533c 11 22 f1			ld de,os_word_scratch 
533f 3e 33				ld a, display_row_2 + 11 
5341 cd e8 0a				call str_at_display 
5344			 
5344 cd f8 0a			call update_display 
5347 cd 55 0a			call delay1s 
534a cd 55 0a			call delay1s 
534d e1				pop hl 
534e f1				pop af 
534f c9				ret 
5350			;endif 
5350			 
5350			include "forth_autostart.asm" 
5350			; list of commands to perform at system start up 
5350			 
5350			startcmds: 
5350			;	dw test11 
5350			;	dw test12 
5350			;	dw test13 
5350			;	dw test14 
5350			;	dw test15 
5350			;	dw test16 
5350			;	dw test17 
5350			;	dw ifthtest1 
5350			;	dw ifthtest2 
5350			;	dw ifthtest3 
5350			;	dw mmtest1 
5350			;	dw mmtest2 
5350			;	dw mmtest3 
5350			;	dw mmtest4 
5350			;	dw mmtest5 
5350			;	dw mmtest6 
5350			;	dw iftest1 
5350			;	dw iftest2 
5350			;	dw iftest3 
5350			;	dw looptest1 
5350			;	dw looptest2 
5350			;	dw test1 
5350			;	dw test2 
5350			;	dw test3 
5350			;	dw test4 
5350			;	dw game2r 
5350			;	dw game2b1 
5350			;	dw game2b2 
5350			 
5350				; start up words that are actually useful 
5350			 
5350 ae 53			dw clrstack 
5352 e1 53			dw type 
5354 a2 55			dw stest 
5356 05 54			dw strncpy 
5358 43 55			dw list 
535a 66 54			dw start1 
535c 78 54			dw start2 
535e			;	dw start3 
535e 8b 54			dw start3b 
5360 e3 54			dw start3c 
5362			 
5362				; (unit) testing words 
5362			 
5362 19 56			dw mtesta 
5364 ce 56			dw mtestb 
5366 71 57			dw mtestc 
5368 26 58			dw mtestd 
536a ca 58			dw mteste 
536c			 
536c				; demo/game words 
536c			 
536c d6 5f		        dw game3w 
536e 04 60		        dw game3p 
5370 22 60		        dw game3sc 
5372 53 60		        dw game3vsi 
5374 7f 60		        dw game3vs 
5376				 
5376 c9 5d			dw game2b 
5378 37 5e			dw game2bf 
537a 81 5e			dw game2mba 
537c 17 5f			dw game2mbas 
537e 59 5f			dw game2mb 
5380			 
5380 8a 5a			dw game1 
5382 9b 5a			dw game1a 
5384 fd 5a			dw game1b 
5386 32 5b			dw game1c 
5388 68 5b			dw game1d 
538a 99 5b			dw game1s 
538c ad 5b			dw game1t 
538e c2 5b			dw game1f 
5390 f6 5b			dw game1z 
5392 3a 5c			dw game1zz 
5394			 
5394 80 59			dw test5 
5396 b8 59			dw test6 
5398 f0 59			dw test7 
539a 04 5a			dw test8 
539c 30 5a			dw test9 
539e 46 5a			dw test10 
53a0				 
53a0 11 5d		        dw ssv5 
53a2 f5 5c		        dw ssv4 
53a4 d9 5c		        dw ssv3 
53a6 a3 5c		        dw ssv2 
53a8 2a 5d		        dw ssv1 
53aa 72 5d		        dw ssv1cpm 
53ac			;	dw keyup 
53ac			;	dw keydown 
53ac			;	dw keyleft 
53ac			;	dw keyright 
53ac			;	dw 	keyf1 
53ac			;	dw keyf2 
53ac			;	dw keyf3 
53ac			;	dw keyf4 
53ac			;	dw keyf5 
53ac			;	dw keyf6 
53ac			;	dw keyf7 
53ac			;	dw keyf8 
53ac			;	dw keyf9 
53ac			;	dw keyf10 
53ac			;	dw keyf11 
53ac			;	dw keyf12 
53ac			;	dw keytab 
53ac			;	dw keycr 
53ac			;	dw keyhome 
53ac			;	dw keyend 
53ac			;	dw keybs 
53ac 00 00			db 0, 0	 
53ae			 
53ae			 
53ae			; clear stack  
53ae			 
53ae .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ;", 0 
53e1			 
53e1			; type ( addr count - ) 
53e1 .. 00		type:     db ": type $00 do dup i + @ emit loop ;", 0 
5405			 
5405			; some direct memory words 
5405			; strncpy ( len t f -- t ) 
5405			 
5405 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
5466			 
5466 .. 00		start1:     	db ": bpon $0000 bp ;",0 
5478 .. 00		start2:     	db ": bpoff $0001 bp ;",0 
548b			;start3:         db ": dirlist ir cls drop dup $00 > if $01 do .> BL .> .> BL .> .> BL .> loop then nop ;",0 
548b .. 00		start3b:         db ": dla dir cls drop dup $00 > if $01 do $08 i at . $01 i at . $04 i at . loop then nop ;",0 
54e3 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
5543			 
5543			 
5543			; a handy word to list items on the stack 
5543			 
5543 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> accept drop depth 0= not until nop ;",0 
55a2			 
55a2			 
55a2			; test stack  
55a2			; rnd8 stest 
55a2			 
55a2 .. 00		stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
5619			 
5619			; random malloc and free cycles 
5619			 
5619 .. 00		mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
56ce			 
56ce			; fixed malloc and free cycles 
56ce			 
56ce .. 00		mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5771			 
5771			; fixed double string push and drop cycle  
5771			 
5771 .. 00		mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
5826			 
5826			; consistent fixed string push and drop cycle  
5826			 
5826 .. 00		mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
58ca			 
58ca .. 00		mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5980			 
5980			;test1:		db ": aa 1 2 3 ;", 0 
5980			;test2:     	db "111 aa 888 999",0 
5980			;test3:     	db ": bb 77 ;",0 
5980			;test4:     	db "$02 $01 do i . loop bb",0 
5980			 
5980 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
59b8 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
59f0 .. 00		test7:     	db ": box hline vline ;",0 
5a04 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
5a30 .. 00		test9:     	db ": sw $01 adsp world ;",0 
5a46 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
5a6b .. 00		test11:     	db "hello create .",0 
5a7a .. 00		test12:     	db "hello2 create .",0 
5a8a			 
5a8a			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
5a8a			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
5a8a			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
5a8a			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
5a8a			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
5a8a			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
5a8a			 
5a8a			;iftest1:     	db "$0001 IF cls .",0 
5a8a			;iftest2:     	db "$0000 IF cls .",0 
5a8a			;iftest3:     	db "$0002 $0003 - IF cls .",0 
5a8a			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
5a8a			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
5a8a			 
5a8a			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
5a8a			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
5a8a			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
5a8a			 
5a8a			 
5a8a			 
5a8a			; a small guess the number game 
5a8a			 
5a8a .. 00		game1:          db ": gsn rnd8 v1! ;",0 
5a9b .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
5afd			 
5afd .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
5b32 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5b68 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5b99 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
5bad .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5bc2 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
5bf6 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5c3a			 
5c3a			; Using 'ga' save a high score across multiple runs using external storage 
5c3a			 
5c3a .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5ca3			 
5ca3			 
5ca3			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5ca3			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5ca3			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5ca3			 
5ca3			; simple screen saver to test code memory reuse to destruction 
5ca3			 
5ca3 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5cd9 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5cf5 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5d11 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5d2a .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5d72 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5dc9			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5dc9			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5dc9			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5dc9			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5dc9			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5dc9			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5dc9			 
5dc9			 
5dc9			 
5dc9			; minesweeper/battleship finding game 
5dc9			; draws a game board of random ship/mine positions 
5dc9			; user enters coords to see if it hits on 
5dc9			; game ends when all are hit 
5dc9			; when hit or miss says how many may be in the area 
5dc9			 
5dc9			; setup the game board and then hide it 
5dc9 .. 00		game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5e37 .. 00		game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5e81			; prompt for where to target 
5e81 .. 00		game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5f17 .. 00		game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5f3c			; TODO see if the entered coords hits or misses pushes char hit of miss 
5f3c .. 00		game2mbht:      db ": mbckht nop ;",0 
5f4b .. 00		game2mbms:      db ": mbcms nop ;",0 
5f59			; TODO how many might be near by 
5f59 .. 00		game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5fd6			 
5fd6			; Game 3 
5fd6			 
5fd6			; Vert scroller ski game - avoid the trees! 
5fd6			 
5fd6			; v0 score (ie turns) 
5fd6			; v1 player pos 
5fd6			; v2 left wall 
5fd6			; v3 right wall 
5fd6			 
5fd6			; Draw side walls randomly 
5fd6			 
5fd6 .. 00		game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
6004			 
6004			; Draw player 
6004 .. 00		game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
6022			 
6022			; TODO Get Key 
6022			 
6022			; TODO Move left right 
6022			 
6022			; scroll and move walls a bit 
6022			 
6022 .. 00		game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
6053			 
6053			; main game loop 
6053			 
6053 .. 00		game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
607f .. 00		game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
60be			 
60be			; key board defs 
60be			 
60be .. 00		keyup:       db ": keyup $05 ;",0 
60cc .. 00		keydown:       db ": keydown $0a ;",0 
60dc .. 00		keyleft:       db ": keyleft $0b ;",0 
60ec .. 00		keyright:       db ": keyright $0c ;",0 
60fd .. 00		keyf1:       db ": keyf1 $10 ;",0 
610b .. 00		keyf2:       db ": keyf2 $11 ;",0 
6119 .. 00		keyf3:       db ": keyf3 $12 ;",0 
6127 .. 00		keyf4:       db ": keyf4 $13 ;",0 
6135 .. 00		keyf5:       db ": keyf5 $14 ;",0 
6143 .. 00		keyf6:       db ": keyf6 $15 ;",0 
6151 .. 00		keyf7:       db ": keyf7 $16 ;",0 
615f .. 00		keyf8:       db ": keyf8 $17 ;",0 
616d .. 00		keyf9:       db ": keyf9 $18 ;",0 
617b .. 00		keyf10:       db ": keyf10 $19 ;",0 
618a .. 00		keyf11:       db ": keyf11 $1a ;",0 
6199 .. 00		keyf12:       db ": keyf12 $1b ;",0 
61a8			 
61a8 .. 00		keytab:       db ": keytab $09 ;",0 
61b7 .. 00		keycr:       db ": keycr $0d ;",0 
61c5 .. 00		keyhome:       db ": keyhome $0e ;",0 
61d5 .. 00		keyend:       db ": keyend $0f ;",0 
61e4 .. 00		keybs:       db ": keybs $08 ;",0 
61f2			 
61f2			   
61f2			 
61f2			 
61f2			 
61f2			; eof 
# End of file forth_autostart.asm
61f2			 
61f2 .. 00		sprompt1: db "Startup load...",0 
6202 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
6218			 
6218			forth_startup: 
6218 21 50 53			ld hl, startcmds 
621b 3e 00			ld a, 0 
621d 32 43 f2			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
6220			 
6220 e5			.start1:	push hl 
6221 cd d5 0a			call clear_display 
6224 11 f2 61			ld de, sprompt1 
6227 3e 00		        ld a, display_row_1 
6229 cd e8 0a			call str_at_display 
622c 11 02 62			ld de, sprompt2 
622f 3e 28		        ld a, display_row_2 
6231 cd e8 0a			call str_at_display 
6234 e1				pop hl 
6235 e5				push hl 
6236 5e				ld e,(hl) 
6237 23				inc hl 
6238 56				ld d,(hl) 
6239 3e 50		        ld a, display_row_3 
623b cd e8 0a			call str_at_display 
623e cd f8 0a			call update_display 
6241			 
6241			 
6241 3a 43 f2			ld a, (os_last_cmd) 
6244 fe 00			cp 0 
6246 28 05			jr z, .startprompt 
6248 cd 49 0a			call delay250ms 
624b 18 24			jr .startdo 
624d				 
624d				 
624d			 
624d			.startprompt: 
624d			 
624d 3e 9f			ld a,display_row_4 + display_cols - 1 
624f 11 9a 1b		        ld de, endprg 
6252 cd e8 0a			call str_at_display 
6255 cd f8 0a			call update_display 
6258 cd 55 0a			call delay1s 
625b cd 41 68			call cin_wait 
625e						 
625e fe 2a			cp '*' 
6260 28 5e			jr z, .startupend1 
6262 fe 23			cp '#' 
6264 20 07			jr nz, .startno 
6266 3e 01			ld a, 1 
6268 32 43 f2			ld (os_last_cmd),a 
626b 18 04			jr .startdo 
626d fe 31		.startno:	cp '1' 
626f 28 3a			jr z,.startnxt  
6271			 
6271				; exec startup line 
6271			.startdo:	 
6271 e1				pop hl 
6272 e5				push hl 
6273				 
6273 5e				ld e,(hl) 
6274 23				inc hl 
6275 56				ld d,(hl) 
6276 eb				ex de,hl 
6277			 
6277 e5				push hl 
6278			 
6278 3e 00			ld a, 0 
627a				;ld a, FORTH_END_BUFFER 
627a cd 72 11			call strlent 
627d 23				inc hl   ; include zero term to copy 
627e 06 00			ld b,0 
6280 4d				ld c,l 
6281 e1				pop hl 
6282 11 1d ee			ld de, scratch 
6285 ed b0			ldir 
6287			 
6287			 
6287 21 1d ee			ld hl, scratch 
628a cd db 1f			call forthparse 
628d cd 1b 20			call forthexec 
6290 cd 32 1f			call forthexec_cleanup 
6293			 
6293 3e 78			ld a, display_row_4 
6295 11 3e 19			ld de, endprog 
6298			 
6298 cd f8 0a			call update_display		 
629b			 
629b 3a 43 f2			ld a, (os_last_cmd) 
629e fe 00			cp 0 
62a0 20 09			jr nz, .startnxt 
62a2 cd 9c 1b			call next_page_prompt 
62a5 cd d5 0a		        call clear_display 
62a8 cd f8 0a			call update_display		 
62ab			 
62ab				; move onto next startup line? 
62ab			.startnxt: 
62ab			 
62ab cd 49 0a			call delay250ms 
62ae e1				pop hl 
62af			 
62af 23				inc hl 
62b0 23				inc hl 
62b1			 
62b1 e5				push hl 
62b2 5e				ld e, (hl) 
62b3 23				inc hl 
62b4 56				ld d, (hl) 
62b5 e1				pop hl 
62b6				; TODO replace 0 test 
62b6			 
62b6 eb				ex de, hl 
62b7 cd 32 0d			call ishlzero 
62ba			;	ld a,e 
62ba			;	add d 
62ba			;	cp 0    ; any left to do? 
62ba eb				ex de, hl 
62bb c2 20 62			jp nz, .start1 
62be 18 01			jr .startupend 
62c0			 
62c0 e1			.startupend1: pop hl 
62c1			.startupend: 
62c1			 
62c1 cd d5 0a			call clear_display 
62c4 cd f8 0a			call update_display 
62c7 c9				ret 
62c8			 
62c8			 
62c8			; stack over and underflow checks 
62c8			 
62c8			; init the words to detect the under/overflow 
62c8			 
62c8			chk_stk_init: 
62c8				; a vague random number to check so we dont get any "lucky" hits 
62c8 3e 2d			ld a, 45 
62ca 6f				ld l, a 
62cb 00				nop 
62cc 3e 17			ld a, 23 
62ce 67				ld h, a 
62cf			 
62cf 22 04 ee			ld (chk_word), hl     ; the word we need to check against 
62d2			 
62d2			;	ld (chk_stund), hl	; stack points.... 
62d2 22 fd fb			ld (chk_stovr), hl 
62d5 22 08 f8			ld (chk_ret_und), hl 
62d8 22 86 f7			ld (chk_ret_ovr), hl 
62db 22 84 f5			ld (chk_loop_ovr), hl 
62de 22 82 f3			ld (chk_data_ovr), hl 
62e1 c9				ret 
62e2				 
62e2			check_stacks: 
62e2				; check all stack words 
62e2			 
62e2 e5				push hl 
62e3 d5				push de 
62e4			 
62e4			;	ld de,(chk_word) 
62e4			;	ld hl, (chk_stund)	; stack points.... 
62e4			;	if DEBUG_STK_FAULT 
62e4			;		DMARK "FAa" 
62e4			;		CALLMONITOR 
62e4			;	endif 
62e4			;	call cmp16 
62e4			;	jp z, .chk_faulta 
62e4			; 
62e4			;	ld de, sfaultsu 
62e4			;	jp .chk_fault 
62e4			 
62e4 2a fd fb		.chk_faulta: ld hl, (chk_stovr) 
62e7 ed 5b 04 ee		ld de,(chk_word) 
62eb				if DEBUG_STK_FAULT 
62eb					DMARK "FAb" 
62eb					CALLMONITOR 
62eb				endif 
62eb cd 27 0d			call cmp16 
62ee 28 06			jr z, .chk_fault1 
62f0 11 91 63			ld de, sfaultso 
62f3 c3 45 63			jp .chk_fault 
62f6			.chk_fault1:  
62f6 2a 08 f8			ld hl, (chk_ret_und) 
62f9 ed 5b 04 ee		ld de,(chk_word) 
62fd				if DEBUG_STK_FAULT 
62fd					DMARK "FAU" 
62fd					CALLMONITOR 
62fd				endif 
62fd cd 27 0d			call cmp16 
6300 ca 09 63			jp z, .chk_fault2 
6303 11 a1 63			ld de, sfaultru 
6306 c3 45 63			jp .chk_fault 
6309			.chk_fault2:  
6309 2a 86 f7			ld hl, (chk_ret_ovr) 
630c ed 5b 04 ee		ld de,(chk_word) 
6310				if DEBUG_STK_FAULT 
6310					DMARK "FA1" 
6310					CALLMONITOR 
6310				endif 
6310 cd 27 0d			call cmp16 
6313 ca 1c 63			jp z, .chk_fault3 
6316 11 af 63			ld de, sfaultro 
6319 c3 45 63			jp .chk_fault 
631c			.chk_fault3:  
631c 2a 84 f5			ld hl, (chk_loop_ovr) 
631f ed 5b 04 ee		ld de,(chk_word) 
6323				if DEBUG_STK_FAULT 
6323					DMARK "FA2" 
6323					CALLMONITOR 
6323				endif 
6323 cd 27 0d			call cmp16 
6326 ca 2f 63			jp z, .chk_fault4 
6329 11 c9 63			ld de, sfaultlo 
632c c3 45 63			jp .chk_fault 
632f			.chk_fault4:  
632f 2a 82 f3			ld hl, (chk_data_ovr) 
6332 ed 5b 04 ee		ld de,(chk_word) 
6336				if DEBUG_STK_FAULT 
6336					DMARK "FA3" 
6336					CALLMONITOR 
6336				endif 
6336 cd 27 0d			call cmp16 
6339 ca 42 63			jp z, .chk_fault5 
633c 11 e3 63			ld de, sfaultdo 
633f c3 45 63			jp .chk_fault 
6342			 
6342			 
6342			.chk_fault5:  
6342 d1				pop de 
6343 e1				pop hl 
6344			 
6344 c9				ret 
6345			 
6345 cd d5 0a		.chk_fault: 	call clear_display 
6348 3e 28				ld a, display_row_2 
634a cd e8 0a				call str_at_display 
634d 11 73 63				   ld de, .stackfault 
6350 3e 00				ld a, display_row_1 
6352 cd e8 0a				call str_at_display 
6355 11 77 fb				    ld de, debug_mark 
6358 3e 11				ld a, display_row_1+17 
635a cd e8 0a				call str_at_display 
635d cd f8 0a				call update_display 
6360			 
6360				; prompt before entering montior for investigating issue 
6360			 
6360 3e 78			ld a, display_row_4 
6362 11 3e 19			ld de, endprog 
6365			 
6365 cd f8 0a			call update_display		 
6368			 
6368 cd 9c 1b			call next_page_prompt 
636b			 
636b d1				pop de 
636c e1				pop hl 
636d cd 92 19				call monitor 
6370 c3 8c 18				jp warmstart 
6373					;jp 0 
6373					;halt 
6373			 
6373			 
6373			 
6373 .. 00		.stackfault: 	db "Stack fault:",0 
6380			 
6380 .. 00		sfaultsu: 	db	"Stack under flow",0 
6391 .. 00		sfaultso: 	db	"Stack over flow",0 
63a1 .. 00		sfaultru:	db "RTS underflow",0 
63af .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
63c9 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
63e3 .. 00		sfaultdo:	db "DTS overflow", 0 
63f0			 
63f0			 
63f0			fault_dsp_under: 
63f0 11 02 64			ld de, .dsp_under 
63f3 c3 b2 64			jp .show_fault 
63f6			 
63f6			fault_rsp_under: 
63f6 11 10 64			ld de, .rsp_under 
63f9 c3 b2 64			jp .show_fault 
63fc			fault_loop_under: 
63fc 11 1e 64			ld de, .loop_under 
63ff c3 b2 64			jp .show_fault 
6402			 
6402 .. 00		.dsp_under: db "DSP Underflow",0 
6410 .. 00		.rsp_under: db "RSP Underflow",0 
641e .. 00		.loop_under: db "LOOP Underflow",0 
642d			 
642d			 
642d d5			type_faultn: 	push de 
642e e5					push hl 
642f cd d5 0a				call clear_display 
6432 11 59 64				   ld de, .typefaultn 
6435 3e 00				ld a, display_row_1 
6437 cd e8 0a				call str_at_display 
643a 11 77 fb				    ld de, debug_mark 
643d 3e 11				ld a, display_row_1+17 
643f cd e8 0a				call str_at_display 
6442 cd f8 0a				call update_display 
6445			 
6445				; prompt before entering montior for investigating issue 
6445			 
6445 3e 78			ld a, display_row_4 
6447 11 3e 19			ld de, endprog 
644a			 
644a cd f8 0a			call update_display		 
644d			 
644d cd 9c 1b			call next_page_prompt 
6450			 
6450 e5					push hl 
6451 d5					push de 
6452 cd 92 19				call monitor 
6455 c3 8c 18				jp warmstart 
6458 76					halt 
6459			 
6459			 
6459 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
6470			 
6470 d5			type_faults: 	push de 
6471 e5					push hl 
6472 cd d5 0a				call clear_display 
6475 11 9b 64				   ld de, .typefaults 
6478 3e 00				ld a, display_row_1 
647a cd e8 0a				call str_at_display 
647d 11 77 fb				    ld de, debug_mark 
6480 3e 11				ld a, display_row_1+17 
6482 cd e8 0a				call str_at_display 
6485 cd f8 0a				call update_display 
6488			 
6488				; prompt before entering montior for investigating issue 
6488			 
6488 3e 78			ld a, display_row_4 
648a 11 3e 19			ld de, endprog 
648d			 
648d cd f8 0a			call update_display		 
6490			 
6490 cd 9c 1b			call next_page_prompt 
6493			 
6493 e1					pop hl 
6494 d1					pop de 
6495 cd 92 19				call monitor 
6498 c3 8c 18				jp warmstart 
649b			 
649b			 
649b .. 00		.typefaults: db "STR Type Expected TOS!",0 
64b2			 
64b2			.show_fault: 	 
64b2 d5					push de 
64b3 cd d5 0a				call clear_display 
64b6 d1					pop de 
64b7 3e 00				ld a, display_row_1 
64b9 cd e8 0a				call str_at_display 
64bc 11 77 fb				    ld de, debug_mark 
64bf 3e 11				ld a, display_row_1+17 
64c1 cd e8 0a				call str_at_display 
64c4 cd f8 0a				call update_display 
64c7			 
64c7				; prompt before entering montior for investigating issue 
64c7			 
64c7 3e 78			ld a, display_row_4 
64c9 11 3e 19			ld de, endprog 
64cc			 
64cc cd f8 0a			call update_display		 
64cf			 
64cf cd 9c 1b			call next_page_prompt 
64d2			 
64d2 e1					pop hl 
64d3 d1					pop de 
64d4 cd 92 19				call monitor 
64d7			; do a dump to cli and not warmstart so we preserve all of the uwords.  
64d7			; TODO Make optional fault restart to cli or warm boot? 
64d7					;jp warmstart 
64d7 c3 e4 18				jp cli 
64da 76					halt 
64db			; eof 
# End of file forth_kernel.asm
64db			;include "nascombasic.asm" 
64db			 
64db			 
64db			; find out where the code ends if loaded into RAM (for SC114) 
64db			;endofcode:  
64db			;	nop 
64db			 
64db			 
64db			; eof 
64db			 
# End of file main.asm
64db			include "firmware_lcd_4x40.asm" 
64db			; **********************************************************************  
64db			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
64db			; **********************************************************************  
64db			;  
64db			; **  Written as a Small Computer Monitor App  
64db			; **  www.scc.me.uk  
64db			;  
64db			; History  
64db			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
64db			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
64db			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
64db			;  
64db			; **********************************************************************  
64db			;  
64db			; This program is an example of one of the methods of interfacing an   
64db			; alphanumeric LCD module.   
64db			;  
64db			; In this example the display is connected to either a Z80 PIO or a   
64db			; simple 8-bit output port.   
64db			;  
64db			; This interfacing method uses 4-bit data mode and uses time delays  
64db			; rather than polling the display's ready status. As a result the   
64db			; interface only requires 6 simple output lines:  
64db			;   Output bit 0 = not used  
64db			;   Output bit 1 = not used  
64db			;   Output bit 2 = RS         High = data, Low = instruction  
64db			;   Output bit 3 = E          Active high  
64db			;   Output bit 4 = DB4  
64db			;   Output bit 5 = DB5  
64db			;   Output bit 6 = DB6  
64db			;   Output bit 7 = DB7  
64db			; Display's R/W is connected to 0v so it is always in write mode  
64db			;  
64db			; This set up should work with any system supporting the RC2014 bus  
64db			  
64db			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
64db			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
64db			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
64db			;  
64db			; **********************************************************************  
64db			  
64db			; Additonal for 4x40. E1 and E2 instead of just E   
64db			; TODO swipe vidout signal on port a to activate E2  
64db			  
64db			; **********************************************************************  
64db			; **  Constants  
64db			; **********************************************************************  
64db			; LCD constants required by LCD support module  
64db			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
64db			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
64db			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
64db			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
64db			; TODO Decide which E is being set  
64db			kLCDWidth:  EQU display_cols             ;Width in characters  
64db			  
64db			; **********************************************************************  
64db			; **  Code library usage  
64db			; **********************************************************************  
64db			  
64db			; send character to current cursor position  
64db			; wraps and/or scrolls screen automatically  
64db			  
64db			  
64db			  
64db			lcd_init:  
64db			  
64db			; SCMonAPI functions used  
64db			  
64db			; Alphanumeric LCD functions used  
64db			; no need to specify specific functions for this module  
64db			  
64db 3e cf		            LD   A, 11001111b  
64dd d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
64df 3e 00		            LD   A, 00000000b  
64e1 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
64e3			  
64e3			; Initialise alphanumeric LCD module  
64e3 3e 00				ld a, 0  
64e5 32 d7 f8				ld (display_lcde1e2), a  
64e8 cd 69 65		            CALL fLCD_Init      ;Initialise LCD module  
64eb 3e 01				ld a, 1  
64ed 32 d7 f8				ld (display_lcde1e2), a  
64f0 cd 69 65		            CALL fLCD_Init      ;Initialise LCD module  
64f3			  
64f3 c9				ret  
64f4			  
64f4			;  
64f4			;;  
64f4			; lcd functions  
64f4			;  
64f4			;  
64f4			  
64f4			; what is at cursor position   
64f4			  
64f4			;get_cursor:	ld de, (cursor_row)   ;  row + col  
64f4			;		call curptr  
64f4			;		ret  
64f4			  
64f4			  
64f4			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
64f4			  
64f4			curptr:  
64f4 c5				push bc  
64f5 21 bd fa			ld hl, display_fb0  
64f8			cpr:	  
64f8				; loop for cursor whole row  
64f8 0e 28			ld c, display_cols  
64fa 23			cpr1:	inc hl  
64fb 0d				dec c  
64fc 20 fc			jr nz, cpr1  
64fe 05				dec b  
64ff 20 f7			jr nz, cpr  
6501			  
6501				; add col	  
6501			  
6501 23			cpr2:	inc hl  
6502 1d				dec e  
6503 20 fc			jr nz, cpr2  
6505			  
6505 c1				pop bc  
6506 c9				ret  
6507				  
6507			  
6507			  
6507			  
6507			  
6507			; write the frame buffer given in hl to hardware   
6507 22 d5 f8		write_display: ld (display_write_tmp), hl 	   
650a 3e 00			ld a, kLCD_Line1  
650c cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
650f 06 28			ld b, display_cols  
6511 ed 5b d5 f8		ld de, (display_write_tmp)  
6515 cd 61 65			call write_len_string  
6518				  
6518				  
6518 2a d5 f8			ld hl, (display_write_tmp)  
651b 11 28 00			ld de, display_cols  
651e 19				add hl,de  
651f 22 d5 f8			ld (display_write_tmp),hl  
6522			  
6522				  
6522 3e 28			ld a, kLCD_Line2  
6524 cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
6527 06 28			ld b, display_cols  
6529 ed 5b d5 f8		ld de, (display_write_tmp)  
652d cd 61 65			call write_len_string  
6530				  
6530 2a d5 f8			ld hl, (display_write_tmp)  
6533 11 28 00			ld de, display_cols  
6536 19				add hl,de  
6537 22 d5 f8			ld (display_write_tmp),hl  
653a			  
653a				  
653a 3e 50			ld a, kLCD_Line3  
653c cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
653f 06 28			ld b, display_cols  
6541 ed 5b d5 f8		ld de, (display_write_tmp)  
6545 cd 61 65			call write_len_string  
6548				  
6548 2a d5 f8			ld hl, (display_write_tmp)  
654b 11 28 00			ld de, display_cols  
654e 19				add hl,de  
654f 22 d5 f8			ld (display_write_tmp),hl  
6552			  
6552				  
6552 3e 78			ld a, kLCD_Line4  
6554 cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
6557 06 28			ld b, display_cols  
6559 ed 5b d5 f8		ld de, (display_write_tmp)  
655d cd 61 65			call write_len_string  
6560 c9					ret  
6561				  
6561				; write out a fixed length string given in b from de  
6561			  
6561 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
6562 cd ce 65		            CALL fLCD_Data      ;Write character to display  
6565 13				inc de  
6566 10 f9			djnz write_len_string  
6568 c9				ret  
6569			  
6569			; Some other things to do  
6569			;            LD   A, kLCD_Clear ;Display clear  
6569			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
6569			;            LD   A, kLCD_Under ;Display on with underscore cursor  
6569			;            LD   A, kLCD_On     ;Display on with no cursor  
6569			;            ;LD   A, kLCD_Off   ;Display off  
6569			;            CALL fLCD_Inst      ;Send instruction to display  
6569			;  
6569			;  
6569			;            halt  
6569			;  
6569			;  
6569			;MsgHello:   DB  "Hello World!",0  
6569			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
6569			  
6569			; Custom characters 5 pixels wide by 8 pixels high  
6569			; Up to 8 custom characters can be defined  
6569			;BitMaps:      
6569			;; Character 0x00 = Battery icon  
6569			;            DB  01110b  
6569			;            DB  11011b  
6569			;            DB  10001b  
6569			;            DB  10001b  
6569			;            DB  11111b  
6569			;            DB  11111b  
6569			;            DB  11111b  
6569			;            DB  11111b  
6569			;; Character 0x01 = Bluetooth icon  
6569			;            DB  01100b  
6569			;            DB  01010b  
6569			;            DB  11100b  
6569			;            DB  01000b  
6569			;            DB  11100b  
6569			;            DB  01010b  
6569			;            DB  01100b  
6569			;            DB  00000b  
6569			;  
6569			  
6569			  
6569			; **********************************************************************  
6569			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
6569			; **********************************************************************  
6569			;  
6569			; **  Written as a Small Computer Monitor App   
6569			; **  Version 0.1 SCC 2018-05-16  
6569			; **  www.scc.me.uk  
6569			;  
6569			; **********************************************************************  
6569			;  
6569			; This module provides support for alphanumeric LCD modules using with  
6569			; *  HD44780 (or compatible) controller  
6569			; *  5 x 7 pixel fonts  
6569			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
6569			; *  Interface via six digital outputs to the display (see below)  
6569			;  
6569			; LCD module pinout:  
6569			;   1  Vss   0v supply  
6569			;   2  Vdd   5v supply  
6569			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
6569			;   4  RS    High = data, Low = instruction  
6569			;   5  R/W   High = Read, Low = Write  
6569			;   6  E     Enable signal (active high)  
6569			;   7  DB0   Data bit 0  
6569			;   8  DB1   Data bit 1  
6569			;   9  DB2   Data bit 2  
6569			;  10  DB3   Data bit 3  
6569			;  11  DB4   Data bit 4  
6569			;  12  DB5   Data bit 5  
6569			;  13  DB6   Data bit 6  
6569			;  14  DB7   Data bit 7  
6569			;  15  A     Backlight anode (+)  
6569			;  16  K     Backlight cathode (-)  
6569			;  
6569			; This interfacing method uses 4-bit data mode and uses time delays  
6569			; rather than polling the display's ready status. As a result the   
6569			; interface only requires 6 simple output lines:  
6569			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
6569			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
6569			;   LCD DB4 = Microcomputer output port bit 4  
6569			;   LCD DB5 = Microcomputer output port bit 5  
6569			;   LCD DB6 = Microcomputer output port bit 6  
6569			;   LCD DB7 = Microcomputer output port bit 7  
6569			; Display's R/W is connected to 0v so it is always in write mode  
6569			; All 6 connections must be on the same port address <kLCDPrt>  
6569			; This method also allows a decent length of cable from micro to LCD  
6569			;  
6569			; **********************************************************************  
6569			;  
6569			; To include the code for any given function provided by this module,   
6569			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
6569			; the parent source file.  
6569			; For example:  #REQUIRES   uHexPrefix  
6569			;  
6569			; Also #INCLUDE this file at some point after the #REQUIRES statements  
6569			; in the parent source file.  
6569			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
6569			;  
6569			; These are the function names provided by this module:  
6569			; fLCD_Init                     ;Initialise LCD  
6569			; fLCD_Inst                     ;Send instruction to LCD  
6569			; fLCD_Data                     ;Send data byte to LCD  
6569			; fLCD_Pos                      ;Position cursor  
6569			; fLCD_Str                      ;Display string  
6569			; fLCD_Def                      ;Define custom character  
6569			;  
6569			; **********************************************************************  
6569			;  
6569			; Requires SCMonAPI.asm to also be included in the project  
6569			;  
6569			  
6569			  
6569			; **********************************************************************  
6569			; **  Constants  
6569			; **********************************************************************  
6569			  
6569			; Constants that must be defined externally  
6569			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
6569			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
6569			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
6569			;kLCDWidth: EQU 20             ;Width in characters  
6569			  
6569			; general line offsets in any frame buffer  
6569			  
6569			  
6569			display_row_1: equ 0  
6569			display_row_2: equ display_row_1+display_cols  
6569			display_row_3: equ display_row_2 + display_cols  
6569			display_row_4: equ display_row_3 + display_cols  
6569			;display_row_4_eol:   
6569			  
6569			  
6569			; Cursor position values for the start of each line  
6569			  
6569			; E  
6569			kLCD_Line1: EQU 0x00   
6569			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
6569			; E1  
6569			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
6569			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
6569			  
6569			; Instructions to send as A register to fLCD_Inst  
6569			kLCD_Clear: EQU 00000001b     ;LCD clear  
6569			kLCD_Off:   EQU 00001000b     ;LCD off  
6569			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
6569			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
6569			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
6569			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
6569			  
6569			; Constants used by this code module  
6569			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
6569			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
6569			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
6569			  
6569			  
6569			  
6569			; **********************************************************************  
6569			; **  LCD support functions  
6569			; **********************************************************************  
6569			  
6569			; Initialise alphanumeric LCD module  
6569			; LCD control register codes:  
6569			;   DL   0 = 4-bit mode        1 = 8-bit mode  
6569			;   N    0 = 1-line mode       1 = 2-line mode  
6569			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
6569			;   D    0 = Display off       1 = Display on  
6569			;   C    0 = Cursor off        1 = Cursor on  
6569			;   B    0 = Blinking off      1 = Blinking on  
6569			;   ID   0 = Decrement mode    1 = Increment mode  
6569			;   SH   0 = Entire shift off  1 = Entire shift on  
6569 3e 28		fLCD_Init:  LD   A, 40  
656b cd 90 66		            CALL LCDDelay       ;Delay 40ms after power up  
656e			; For reliable reset set 8-bit mode - 3 times  
656e cd 60 66		            CALL WrFn8bit       ;Function = 8-bit mode  
6571 cd 60 66		            CALL WrFn8bit       ;Function = 8-bit mode  
6574 cd 60 66		            CALL WrFn8bit       ;Function = 8-bit mode  
6577			; Set 4-bit mode  
6577 cd 5c 66		            CALL WrFn4bit       ;Function = 4-bit mode  
657a cd 8e 66		            CALL LCDDelay1      ;Delay 37 us or more  
657d			; Function set  
657d 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
657f cd 92 65		            CALL fLCD_Inst      ;2 line, display on  
6582			; Display On/Off control  
6582 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
6584 cd 92 65		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
6587			; Display Clear  
6587 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
6589 cd 92 65		            CALL fLCD_Inst      ;Clear display  
658c			; Entry mode  
658c 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
658e cd 92 65		            CALL fLCD_Inst      ;Increment mode, shift off  
6591			; Display module now initialised  
6591 c9			            RET  
6592			; ok to here  
6592			  
6592			; Write instruction to LCD  
6592			;   On entry: A = Instruction byte to be written  
6592			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
6592 f5			fLCD_Inst:  PUSH AF  
6593 f5			            PUSH AF  
6594 cd a6 65		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
6597 f1			            POP  AF  
6598 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
6599 17			            RLA  
659a 17			            RLA  
659b 17			            RLA  
659c cd a6 65		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
659f 3e 02		            LD   A, 2  
65a1 cd 90 66		            CALL LCDDelay       ;Delay 2 ms to complete   
65a4 f1			            POP  AF  
65a5 c9			            RET  
65a6			Wr4bits:   
65a6 f5					push af  
65a7 3a d7 f8				ld a, (display_lcde1e2)  
65aa fe 00				cp 0     ; e  
65ac 20 10				jr nz, .wea2	  
65ae f1					pop af  
65af e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
65b1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
65b3 cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
65b5 cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
65b7 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
65b9 cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
65bb d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
65bd c9			            RET  
65be f1			.wea2:		pop af  
65bf e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
65c1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
65c3 cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
65c5 cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
65c7 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
65c9 cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
65cb d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
65cd c9			            RET  
65ce			  
65ce			  
65ce			; Write data to LCD  
65ce			;   On entry: A = Data byte to be written  
65ce			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
65ce f5			fLCD_Data:  PUSH AF  
65cf f5			            PUSH AF  
65d0 cd e2 65		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
65d3 f1			            POP  AF  
65d4 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
65d5 17			            RLA  
65d6 17			            RLA  
65d7 17			            RLA  
65d8 cd e2 65		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
65db 3e 96		            LD   A, 150  
65dd 3d			Wait:      DEC  A              ;Wait a while to allow data   
65de 20 fd		            JR   NZ, Wait      ;  write to complete  
65e0 f1			            POP  AF  
65e1 c9			            RET  
65e2			Wr4bitsa:     
65e2 f5					push af  
65e3 3a d7 f8				ld a, (display_lcde1e2)  
65e6 fe 00				cp 0     ; e1  
65e8 20 16				jr nz, .we2	  
65ea f1					pop af  
65eb e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
65ed cb d7		            SET  kLCDBitRS, A  
65ef d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
65f1 cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
65f3 cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
65f5 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
65f7 cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
65f9 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
65fb cb 97		            RES  kLCDBitRS, A  
65fd d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
65ff c9			            RET  
6600 f1			.we2:		pop af  
6601 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
6603 cb d7		            SET  kLCDBitRS, A  
6605 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
6607 cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
6609 cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
660b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
660d cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
660f d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
6611 cb 97		            RES  kLCDBitRS, A  
6613 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6615 c9			            RET  
6616			  
6616			  
6616			; Position cursor to specified location  
6616			;   On entry: A = Cursor position  
6616			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
6616 f5			fLCD_Pos:   PUSH AF  
6617					; at this point set the E1 or E2 flag depending on position  
6617			  
6617 c5					push bc  
6618			;		push af  
6618 06 00				ld b, 0  
661a 4f					ld c, a  
661b 3e 4f				ld a, kLCD_Line3-1  
661d b7			 		or a      ;clear carry flag  
661e 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
661f 38 04				jr c, .pe1  
6621			  
6621					; E selection  
6621 cb 80				res 0, b         ; bit 0 unset e  
6623			;		pop af    ; before line 3 so recover orig pos  
6623			;		ld c, a    ; save for poking back  
6623 18 06				jr .peset	          
6625			.pe1:          	; E2 selection  
6625 cb c0				set 0, b         ; bit 0 set e1  
6627 79					ld a, c  
6628 de 4f				sbc a, kLCD_Line3-1  
662a 4f					ld c, a	         ; save caculated offset  
662b			;		pop af     ; bin this original value now we have calculated form  
662b			  
662b			.peset:		; set bit  
662b 78					ld a, b  
662c 32 d7 f8				ld (display_lcde1e2), a 	  
662f 79					ld a, c  
6630 c1					pop bc  
6631			  
6631 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
6633 cd 92 65		            CALL fLCD_Inst      ;Write instruction to LCD  
6636 f1			            POP  AF  
6637 c9			            RET  
6638			  
6638			  
6638			; Output text string to LCD  
6638			;   On entry: DE = Pointer to null terminated text string  
6638			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
6638 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
6639 b7			            OR   A              ;Null terminator?  
663a c8			            RET  Z              ;Yes, so finished  
663b cd ce 65		            CALL fLCD_Data      ;Write character to display  
663e 13			            INC  DE             ;Point to next character  
663f 18 f7		            JR   fLCD_Str       ;Repeat  
6641 c9					ret  
6642			  
6642			; Define custom character  
6642			;   On entry: A = Character number (0 to 7)  
6642			;             DE = Pointer to character bitmap data  
6642			;   On exit:  A = Next character number  
6642			;             DE = Next location following bitmap  
6642			;             BC HL IX IY I AF' BC' DE' HL' preserved  
6642			; Character is   
6642 c5			fLCD_Def:   PUSH BC  
6643 f5			            PUSH AF  
6644 07			            RLCA                ;Calculate location  
6645 07			            RLCA                ;  for bitmap data  
6646 07			            RLCA                ;  = 8 x CharacterNumber  
6647 f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
6649 cd 92 65		            CALL fLCD_Inst      ;Write instruction to LCD  
664c 06 00		            LD   B, 0  
664e 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
664f cd ce 65		            CALL fLCD_Data      ;Write byte to display  
6652 13			            INC  DE             ;Point to next byte  
6653 04			            INC  B              ;Count bytes  
6654 cb 58		            BIT  3, B           ;Finish all 8 bytes?  
6656 28 f6		            JR   Z, Loop       ;No, so repeat  
6658 f1			            POP  AF  
6659 3c			            INC  A              ;Increment character number  
665a c1			            POP  BC  
665b c9			            RET  
665c			  
665c			  
665c			; **********************************************************************  
665c			; **  Private functions  
665c			; **********************************************************************  
665c			  
665c			; Write function to LCD  
665c			;   On entry: A = Function byte to be written  
665c			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
665c 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
665e 18 02		            JR   WrFunc  
6660 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
6662 f5			WrFunc:     PUSH AF  
6663 f5					push af  
6664 3a d7 f8				ld a, (display_lcde1e2)  
6667 fe 00				cp 0     ; e1  
6669 20 0f				jr nz, .wfea2	  
666b f1					pop af  
666c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
666e cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
6670 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
6672 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
6674 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
6676 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6678 18 0d			jr .wfskip  
667a f1			.wfea2:		pop af  
667b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
667d cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
667f cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
6681 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
6683 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
6685 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6687 3e 05		.wfskip:            LD  A, 5  
6689 cd 90 66		            CALL LCDDelay       ;Delay 5 ms to complete  
668c f1			            POP  AF  
668d c9			            RET  
668e			  
668e			  
668e			; Delay in milliseconds  
668e			;   On entry: A = Number of milliseconds delay  
668e			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
668e 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
6690 d5			LCDDelay:   PUSH DE  
6691 5f			            LD   E, A           ;Delay by 'A' ms  
6692 16 00		            LD   D, 0  
6694 cd 3a 0a		            CALL aDelayInMS  
6697 d1			            POP  DE  
6698 c9			            RET  
6699			  
6699			  
6699			testlcd:  
6699 3e 00			ld a, kLCD_Line1  
669b cd 16 66			call fLCD_Pos  
669e 06 28			ld b, 40  
66a0 11 ce 66			ld de, .ttext1  
66a3 cd 61 65			call write_len_string  
66a6			  
66a6 3e 28			ld a, kLCD_Line2  
66a8 cd 16 66			call fLCD_Pos  
66ab 06 28			ld b, 40  
66ad 11 f7 66			ld de, .ttext2  
66b0 cd 61 65			call write_len_string  
66b3 3e 50			ld a, kLCD_Line3  
66b5 cd 16 66			call fLCD_Pos  
66b8 06 28			ld b, 40  
66ba 11 20 67			ld de, .ttext3  
66bd cd 61 65			call write_len_string  
66c0 3e 78			ld a, kLCD_Line4  
66c2 cd 16 66			call fLCD_Pos  
66c5 06 28			ld b, 40  
66c7 11 49 67			ld de, .ttext4  
66ca cd 61 65			call write_len_string  
66cd			  
66cd 76				halt  
66ce			  
66ce			  
66ce .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
66f7 .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
6720 .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
6749 .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
6772			   
6772			  
6772			  
6772			; eof  
6772			  
# End of file firmware_lcd_4x40.asm
6772			;include "firmware_lcd_4x20.asm" 
6772			include "firmware_key_5x10.asm" 
6772			; 5 x 10 decade counter scanner  
6772			  
6772			  
6772			; TODO do cursor shape change for shift keys  
6772			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
6772			  
6772			  
6772			; bit mask for each scan column and row for teing the matrix  
6772			  
6772			  
6772			key_init:  
6772			  
6772			; SCMonAPI functions used  
6772			  
6772			; Alphanumeric LCD functions used  
6772			; no need to specify specific functions for this module  
6772			  
6772			  
6772 3e cf		            LD   A, 11001111b  
6774 d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
6776			;            LD   A, 00000000b  
6776 3e 1f		            LD   A, 00011111b  
6778 d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
677a			  
677a			  
677a				; TODO Configure cursor shapes  
677a			  
677a				; Load cursor shapes   
677a 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
677c 11 8c 67		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
677f 06 02		            LD   B, 2           ;Number of characters to define  
6781 cd 42 66		.DefLoop:   CALL fLCD_Def       ;Define custom character  
6784 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
6786			  
6786 3e 01				ld a, 1  
6788 32 d0 f8			ld (cursor_shape),a  
678b c9				ret  
678c			  
678c			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
678c			; Up to 8 custom characters can be defined  
678c			.cursor_shapes:      
678c			;; Character 0x00 = Normal  
678c 1f			            DB  11111b  
678d 1f			            DB  11111b  
678e 1f			            DB  11111b  
678f 1f			            DB  11111b  
6790 1f			            DB  11111b  
6791 1f			            DB  11111b  
6792 1f			            DB  11111b  
6793 1f			            DB  11111b  
6794			;; Character 0x01 = Modifier  
6794 1f			            DB  11111b  
6795 1b			            DB  11011b  
6796 1b			            DB  11011b  
6797 1b			            DB  11011b  
6798 1b			            DB  11011b  
6799 1f			            DB  11111b  
679a 1b			            DB  11011b  
679b 1f			            DB  11111b  
679c			  
679c			  
679c			  
679c			  
679c			; Display custom character 0  
679c			;            LD   A, kLCD_Line1+14  
679c			;            CALL fLCD_Pos       ;Position cursor to location in A  
679c			;            LD   A, 0  
679c			;            CALL fLCD_Data      ;Write character in A at cursor  
679c			  
679c			; Display custom character 1  
679c			;            LD   A, kLCD_Line2+14  
679c			;            CALL fLCD_Pos      ;Position cursor to location in A  
679c			;            LD   A, 1  
679c			;            CALL fLCD_Data     ;Write character in A at cursor  
679c			  
679c			; keyboard scanning   
679c			  
679c			; character in from keyboard  
679c			  
679c			; mapping for the pcb layout  
679c			  
679c			.matrix_to_char:  
679c .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
67a7 .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
67b2 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
67bd 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
67c8 .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
67d3			.matrix_to_shift:  
67d3			  
67d3 .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
67de .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
67e9 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
67f4 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
67ff .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
680a			  
680a			.matrix_to_symbolshift:  
680a			  
680a fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
6815 .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
6820 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
682b			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
682b 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
6836 .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
6841			  
6841			  
6841			  
6841			; mapping for a simple straight through breadboard layout  
6841			  
6841			;.matrix_to_char:  
6841			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
6841			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
6841			;		db "asdfghjkl",KEY_CR,0  
6841			;		db "qwertyuiop",0  
6841			;		 db "1234567890",0  
6841			;.matrix_to_shift:  
6841			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
6841			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
6841			;		db "ASDFGHJKL",KEY_CR,0  
6841			;		db "QWERTYUIOP",0  
6841			;		 db "!",'"',"#$%^&*()",0  
6841			;.matrix_to_symbolshift:  
6841			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
6841			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
6841			;		db "_?*fghjk=",KEY_CR,0  
6841			;		db "-/+*[]{}@#",0  
6841			;		 db "1234567890",0  
6841			  
6841			;.matrix_to_char: db "D#0*C987B654A321"  
6841			  
6841			  
6841				  
6841			  
6841			; add cin and cin_wait  
6841			  
6841 cd 52 68		cin_wait: 	call cin  
6844						if DEBUG_KEYCINWAIT  
6844							push af  
6844							  
6844							ld hl,key_repeat_ct  
6844							ld (hl),a  
6844							inc hl  
6844							call hexout  
6844							ld hl,key_repeat_ct+3  
6844							ld a,0  
6844							ld (hl),a  
6844			  
6844							    LD   A, kLCD_Line1+11  
6844							    CALL fLCD_Pos       ;Position cursor to location in A  
6844							    LD   DE, key_repeat_ct  
6844							    ;LD   DE, MsgHello  
6844							    CALL fLCD_Str       ;Display string pointed to by DE  
6844			  
6844			  
6844			  
6844							pop af  
6844						endif  
6844 fe 00			cp 0  
6846 28 f9			jr z, cin_wait   ; block until key press  
6848			  
6848							if DEBUG_KEYCINWAIT  
6848								push af  
6848			  
6848								ld a, 'A'	  
6848								ld hl,key_repeat_ct  
6848								ld (hl),a  
6848								inc hl  
6848								ld a,0  
6848								ld (hl),a  
6848			  
6848								    LD   A, kLCD_Line2+11  
6848								    CALL fLCD_Pos       ;Position cursor to location in A  
6848								    LD   DE, key_repeat_ct  
6848								    ;LD   DE, MsgHello  
6848								    CALL fLCD_Str       ;Display string pointed to by DE  
6848			  
6848							call delay500ms  
6848			  
6848								pop af  
6848							endif  
6848 f5				push af   ; save key pressed  
6849			  
6849			.cin_wait1:	  
6849							if DEBUG_KEYCINWAIT  
6849								push af  
6849			  
6849								ld a, 'b'	  
6849								ld hl,key_repeat_ct  
6849								ld (hl),a  
6849								inc hl  
6849								ld a,0  
6849								ld (hl),a  
6849			  
6849								    LD   A, kLCD_Line2+11  
6849								    CALL fLCD_Pos       ;Position cursor to location in A  
6849								    LD   DE, key_repeat_ct  
6849								    ;LD   DE, MsgHello  
6849								    CALL fLCD_Str       ;Display string pointed to by DE  
6849			  
6849			  
6849							call delay500ms  
6849			  
6849								pop af  
6849							endif  
6849			  
6849 cd 52 68		call cin  
684c fe 00			cp 0  
684e 20 f9			jr nz, .cin_wait1  	; wait for key release  
6850			if DEBUG_KEYCINWAIT  
6850				push af  
6850			  
6850				ld a, '3'	  
6850				ld hl,key_repeat_ct  
6850				ld (hl),a  
6850				inc hl  
6850				ld a,0  
6850				ld (hl),a  
6850			  
6850			            LD   A, kLCD_Line2+11  
6850			            CALL fLCD_Pos       ;Position cursor to location in A  
6850			            LD   DE, key_repeat_ct  
6850			            ;LD   DE, MsgHello  
6850			            CALL fLCD_Str       ;Display string pointed to by DE  
6850			  
6850			  
6850			call delay500ms  
6850			  
6850				pop af  
6850			endif  
6850			  
6850 f1				pop af   ; get key  
6851 c9				ret  
6852			  
6852			  
6852 cd 66 68		cin: 	call .mtoc  
6855			  
6855			if DEBUG_KEYCIN  
6855				push af  
6855				  
6855				ld hl,key_repeat_ct  
6855				ld (hl),a  
6855				inc hl  
6855				call hexout  
6855				ld hl,key_repeat_ct+3  
6855				ld a,0  
6855				ld (hl),a  
6855			  
6855			            LD   A, kLCD_Line3+15  
6855			            CALL fLCD_Pos       ;Position cursor to location in A  
6855			            LD   DE, key_repeat_ct  
6855			            ;LD   DE, MsgHello  
6855			            CALL fLCD_Str       ;Display string pointed to by DE  
6855			  
6855			  
6855			call delay500ms  
6855			  
6855				pop af  
6855			endif  
6855			  
6855			  
6855				; no key held  
6855 fe 00			cp 0  
6857 c8				ret z  
6858			  
6858			if DEBUG_KEYCIN  
6858				push af  
6858			  
6858				ld a, '1'	  
6858				ld hl,key_repeat_ct  
6858				ld (hl),a  
6858				inc hl  
6858				ld a,0  
6858				ld (hl),a  
6858			  
6858			            LD   A, kLCD_Line4+15  
6858			            CALL fLCD_Pos       ;Position cursor to location in A  
6858			            LD   DE, key_repeat_ct  
6858			            ;LD   DE, MsgHello  
6858			            CALL fLCD_Str       ;Display string pointed to by DE  
6858			  
6858			  
6858			call delay500ms  
6858			  
6858				pop af  
6858			endif  
6858			  
6858				; stop key bounce  
6858			  
6858 32 88 fb			ld (key_held),a		 ; save it  
685b 47				ld b, a  
685c			  
685c c5			.cina1:	push bc  
685d			if DEBUG_KEYCIN  
685d				push af  
685d			  
685d				ld hl,key_repeat_ct  
685d				inc hl  
685d				call hexout  
685d				ld hl,key_repeat_ct+3  
685d				ld a,0  
685d				ld (hl),a  
685d				ld hl,key_repeat_ct  
685d				ld a, '2'	  
685d				ld (hl),a  
685d			  
685d			            LD   A, kLCD_Line4+15  
685d			            CALL fLCD_Pos       ;Position cursor to location in A  
685d			            LD   DE, key_repeat_ct  
685d			            ;LD   DE, MsgHello  
685d			            CALL fLCD_Str       ;Display string pointed to by DE  
685d			  
685d				pop af  
685d			endif  
685d cd 66 68			call .mtoc  
6860 c1				pop bc  
6861 b8				cp b  
6862 28 f8			jr z, .cina1  
6864 78				ld a,b		  
6865			if DEBUG_KEYCIN  
6865				push af  
6865			  
6865				ld hl,key_repeat_ct  
6865				inc hl  
6865				call hexout  
6865				ld hl,key_repeat_ct+3  
6865				ld a,0  
6865				ld (hl),a  
6865				ld hl,key_repeat_ct  
6865				ld a, '3'	  
6865				ld (hl),a  
6865			  
6865			            LD   A, kLCD_Line4+15  
6865			            CALL fLCD_Pos       ;Position cursor to location in A  
6865			            LD   DE, key_repeat_ct  
6865			            ;LD   DE, MsgHello  
6865			            CALL fLCD_Str       ;Display string pointed to by DE  
6865			  
6865				pop af  
6865			endif  
6865 c9				ret  
6866			  
6866			; detect keyboard modifier key press and apply new overlay to the face key held  
6866			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
6866			  
6866			;.cin_map_modifier:   
6866			;	ld a, (hl)  
6866			;	and 255  
6866			;	ret NZ		; modifier key not flagged  
6866			;  
6866			;	; get key face  
6866			;  
6866			;	ld b,(key_face_held)  
6866			;  
6866			;	ld b, key_cols * key_rows  
6866			;  
6866			;	push de  
6866			;	pop hl  
6866			;  
6866			;.mmod1: ld a,(hl)   ; get map test  
6866			;	cp b  
6866			;	jr z, .mmod2  
6866			;  
6866			;  
6866			;  
6866			;.mmod2: inc hl    ;   
6866			;  
6866			;	  
6866			;  
6866			;	  
6866			;  
6866			;	ld hl,key_actual_pressed  
6866			;	ld (hl),a,  
6866			;	ret  
6866			  
6866			; map matrix key held to char on face of key  
6866			  
6866			.mtoc:  
6866			  
6866			; test decade counter strobes  
6866			  
6866			;.decadetest1:  
6866			  
6866			; reset counter  
6866			;ld a, 128  
6866			;out (portbdata),a  
6866			  
6866			  
6866			;ld b, 5  
6866			;.dec1:  
6866			;ld a, 0  
6866			;out (portbdata),a  
6866			;call delay1s  
6866			  
6866			;ld a, 32  
6866			;out (portbdata),a  
6866			;call delay1s  
6866			;call delay1s  
6866			;call delay1s  
6866			;  
6866			;ld a, 64+32  
6866			;out (portbdata),a  
6866			;call delay1s  
6866			;;djnz .dec1  
6866			;  
6866			;jp .decadetest1  
6866			  
6866			  
6866			  
6866			  
6866			  
6866			  
6866			  
6866			  
6866			  
6866			  
6866				; scan keyboard matrix and generate raw scan map  
6866 cd f9 68			call matrix  
6869			  
6869				; reuse c bit 0 left modifer button - ie shift  
6869			        ; reuse c bit 1 for right modifer button - ie symbol shift  
6869				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
6869			  
6869 0e 00			ld c, 0  
686b			  
686b				; TODO set flags for modifer key presses   
686b				; TODO do a search for modifer key...  
686b			  
686b				;ld hl,keyscan_table_row4  
686b 21 e7 fb			ld hl,keyscan_table_row2  
686e			  
686e 7e				ld a, (hl)  
686f fe 23			cp '#'  
6871 20 07			jr nz, .nextmodcheck  
6873 cb c1			set 0, c  
6875 21 d3 67			ld hl, .matrix_to_shift  
6878 18 21			jr .dokeymap  
687a				; TODO for now igonre  
687a			.nextmodcheck:  
687a 21 dc fb			ld hl,keyscan_table_row3  
687d			  
687d 7e				ld a, (hl)  
687e fe 23			cp '#'  
6880 20 07			jr nz, .nextmodcheck2  
6882 cb c9			set 1, c   
6884 21 0a 68			ld hl, .matrix_to_symbolshift  
6887 18 12			jr .dokeymap  
6889			.nextmodcheck2:  
6889 21 f0 fb			ld hl,keyscan_table_row2+9    ; right shift  
688c			  
688c 7e				ld a, (hl)  
688d fe 23			cp '#'  
688f 20 07			jr nz, .donemodcheck  
6891 cb c9			set 1, c   
6893 21 d3 67			ld hl, .matrix_to_shift  
6896 18 03			jr .dokeymap  
6898			  
6898				; no modifer found so just map to normal keys  
6898				; get mtoc map matrix to respective keys  
6898			;	ld hl, .matrix_to_char  
6898			;	ld hl, .matrix_to_char  
6898			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
6898			;	ld a, KEY_SHIFT  
6898			;	call findchar  
6898			;  
6898			;	; got offset to key modifer in b  
6898			;  
6898			;	ld hl,keyscan_table_row5  
6898			;  
6898			;	ld a,b  
6898			;	call addatohl  
6898			;	ld a,(hl)  
6898			;  
6898			;	cp '#'  
6898			;	jr nz, .nextmodcheck  
6898			;	set 0, c  
6898			;	ld hl, .matrix_to_char  
6898			;	jr .dokeymap  
6898			;	; TODO for now igonre  
6898			;.nextmodcheck:  
6898			;	ld hl, .matrix_to_symbolshift  
6898			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
6898			;	ld a, KEY_SYMBOLSHIFT  
6898			;	call findchar  
6898			;  
6898			;  
6898			;	; got offset to key modifer in b  
6898			;  
6898			;	ld hl,keyscan_table_row5  
6898			;  
6898			;	ld a,b  
6898			;	call addatohl  
6898			;	ld a,(hl)  
6898			;  
6898			;	cp '#'  
6898			;	jr nz, .donemodcheck  
6898			;	set 1, c   
6898			;	ld hl, .matrix_to_symbolshift  
6898			;	jr .dokeymap  
6898			  
6898			  
6898			  
6898			.donemodcheck:  
6898				; no modifer found so just map to normal keys  
6898				; get mtoc map matrix to respective keys  
6898 21 9c 67			ld hl, .matrix_to_char  
689b			  
689b			.dokeymap:  
689b				;ld (key_fa), c   
689b cd b4 68			call .mapkeys  
689e			  
689e			  
689e			if DEBUG_KEY  
689e			  
689e			; Display text on first line  
689e			            LD   A, kLCD_Line1  
689e			            CALL fLCD_Pos       ;Position cursor to location in A  
689e			            LD   DE, keyscan_table_row1  
689e			            ;LD   DE, MsgHello  
689e			            CALL fLCD_Str       ;Display string pointed to by DE  
689e			  
689e			; Display text on second line  
689e			            LD   A, kLCD_Line2  
689e			            CALL fLCD_Pos       ;Position cursor to location in A  
689e			            LD   DE, keyscan_table_row2  
689e			            CALL fLCD_Str       ;Display string pointed to by DE  
689e			            LD   A, kLCD_Line3  
689e			            CALL fLCD_Pos       ;Position cursor to location in A  
689e			            LD   DE, keyscan_table_row3  
689e			            CALL fLCD_Str       ;Display string pointed to by DE  
689e			            LD   A, kLCD_Line4  
689e			            CALL fLCD_Pos       ;Position cursor to location in A  
689e			            LD   DE, keyscan_table_row4  
689e			            CALL fLCD_Str       ;Display string pointed to by DE  
689e			            LD   A, kLCD_Line1+10  
689e			            CALL fLCD_Pos       ;Position cursor to location in A  
689e			            LD   DE, keyscan_table_row5  
689e			            CALL fLCD_Str       ;Display string pointed to by DE  
689e			  
689e				;call delay250ms  
689e			endif  
689e			;	jp testkey  
689e			  
689e			; get first char reported  
689e			  
689e 21 c6 fb			ld hl,keyscan_table_row5  
68a1			  
68a1				;ld b, 46   ; 30 keys to remap + 8 nulls   
68a1 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
68a3			.findkey:  
68a3 7e				ld a,(hl)  
68a4 fe 00			cp 0  
68a6 28 04			jr z, .nextkey  
68a8 fe 7e			cp KEY_MATRIX_NO_PRESS  
68aa 20 06			jr nz, .foundkey  
68ac			.nextkey:  
68ac 23				inc hl  
68ad 10 f4			djnz .findkey  
68af 3e 00			ld a,0  
68b1 c9				ret  
68b2			.foundkey:  
68b2 7e				ld a,(hl)  
68b3 c9				ret  
68b4				  
68b4			  
68b4			; convert the raw key map given hl for destination key  
68b4			.mapkeys:  
68b4 11 c6 fb			ld de,keyscan_table_row5  
68b7			  
68b7 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
68b9			.remap:  
68b9 1a				ld a,(de)  
68ba fe 23			cp '#'  
68bc 20 02			jr nz, .remapnext  
68be				;CALLMONITOR  
68be 7e				ld a,(hl)  
68bf 12				ld (de),a  
68c0			  
68c0			  
68c0			  
68c0			.remapnext:  
68c0 23				inc hl  
68c1 13				inc de  
68c2 10 f5			djnz .remap  
68c4				  
68c4 c9				ret  
68c5			  
68c5			  
68c5			  
68c5			.mtocold2:  
68c5			  
68c5			;	; flag if key D is held down and remove from reporting  
68c5			;	ld bc, .key_map_fd    
68c5			;	ld hl, keyscan_table  
68c5			;	ld de, key_fd  
68c5			;	call .key_shift_hold  
68c5			;	cp 255  
68c5			;	jr z, .cinmap  
68c5			;	; flag if key C is held down and remove from reporting  
68c5			;	ld bc, .key_map_fc    
68c5			;	ld hl, keyscan_table+key_cols  
68c5			;	ld de, key_fc  
68c5			;	call .key_shift_hold  
68c5			;	cp 255  
68c5			;	jr z, .cinmap  
68c5			;	; flag if key B is held down and remove from reporting  
68c5			;	ld bc, .key_map_fb    
68c5			;	ld hl, keyscan_table+(key_cols*2)  
68c5			;	ld de, key_fb  
68c5			;	call .key_shift_hold  
68c5			;	cp 255  
68c5			;	jr z, .cinmap  
68c5			;	; flag if key A is held down and remove from reporting  
68c5			;	ld bc, .key_map_fa    
68c5			;	ld hl, keyscan_table+(key_cols*3)  
68c5			;	ld de, key_fa  
68c5			;	call .key_shift_hold  
68c5			;	cp 255  
68c5			;	jr z, .cinmap  
68c5			  
68c5 11 9c 67			ld de, .matrix_to_char  
68c8			  
68c8			  
68c8			.cinmap1:   
68c8				if DEBUG_KEY  
68c8			            LD   A, kLCD_Line4  
68c8			            CALL fLCD_Pos       ;Position cursor to location in A  
68c8					push de  
68c8			            LD   DE, keyscan_table  
68c8			            CALL fLCD_Str       ;Display string pointed to by DE  
68c8					pop de  
68c8				endif  
68c8			  
68c8				; scan key matrix table for any held key  
68c8			  
68c8				; de holds either the default matrix or one selected above  
68c8			  
68c8 21 93 fb			ld hl, keyscan_table  
68cb 06 32			ld b,key_cols*key_rows  
68cd			  
68cd 7e			.cin11:	ld a,(hl)  
68ce fe 23			cp '#'  
68d0 28 08			jr z, .cinhit1  
68d2 23				inc hl  
68d3 13				inc de  
68d4 05				dec b  
68d5 20 f6			jr nz, .cin11  
68d7				; no key found held  
68d7 3e 00			ld a,0  
68d9 c9				ret  
68da d5			.cinhit1: push de  
68db e1				pop hl  
68dc 7e				ld a,(hl)  
68dd c9				ret  
68de			  
68de			; flag a control key is held   
68de			; hl is key pin, de is flag indicator  
68de			  
68de			.key_shift_hold1:  
68de c5				push bc  
68df 3e 01			ld a, 1  
68e1 32 d0 f8			ld (cursor_shape),a  
68e4 06 00			ld b, 0  
68e6 7e				ld a, (hl)  
68e7 fe 2e			cp '.'  
68e9 28 0a			jr z, .key_shift11  
68eb 06 ff			ld b, 255  
68ed 3e 2b			ld a, '+'    ; hide key from later scans  
68ef 77				ld (hl),a  
68f0 3e 02			ld a, 2  
68f2 32 d0 f8			ld (cursor_shape),a  
68f5			.key_shift11:  
68f5				; write flag indicator  
68f5 78				ld a,b  
68f6 12				ld (de),a  
68f7			  
68f7 d1				pop de    ; de now holds the key map ptr  
68f8 c9				ret  
68f9			  
68f9				  
68f9			  
68f9			; scans keyboard matrix and flags key press in memory array	  
68f9				  
68f9			matrix:  
68f9				;call matrix  
68f9				; TODO optimise the code....  
68f9			  
68f9			  
68f9			;ld hl, keyscan_table_row1  
68f9			;ld de, keyscan_table_row1+1  
68f9			;ld bc,46  
68f9			;ld a,KEY_MATRIX_NO_PRESS  
68f9			;ldir  
68f9			  
68f9			  
68f9			  
68f9			; reset counter  
68f9 3e 80		ld a, 128  
68fb d3 c1		out (portbdata),a  
68fd			  
68fd 06 0a		ld b, 10  
68ff 0e 00		ld c, 0       ; current clock toggle  
6901			  
6901			.colscan:  
6901			  
6901			; set current column  
6901			; disable clock enable and set clock low  
6901			  
6901			;ld a, 0  
6901			;out (portbdata),a  
6901			  
6901			; For each column scan for switches  
6901			  
6901 c5			push bc  
6902 21 89 fb		ld hl, keyscan_scancol  
6905 cd 0e 6a		call .rowscan  
6908 c1			pop bc  
6909			  
6909			  
6909			; get back current column  
6909			  
6909			; translate the row scan  
6909			  
6909			;   
6909			; row 1  
6909			  
6909 78			ld a,b  
690a			  
690a 21 fc fb		LD   hl, keyscan_table_row1+10  
690d			  
690d cd 1b 0d		call subafromhl  
6910			;call addatohl  
6910			  
6910 11 89 fb		ld de, keyscan_scancol  
6913			  
6913 1a			ld a,(de)  
6914 77			ld (hl),a  
6915			  
6915			  
6915			  
6915			  
6915			; row 2  
6915			  
6915 78			ld a,b  
6916			  
6916 21 f1 fb		LD   hl, keyscan_table_row2+10  
6919			  
6919			;call addatohl  
6919 cd 1b 0d		call subafromhl  
691c			  
691c			  
691c 11 8a fb		ld de, keyscan_scancol+1  
691f			  
691f 1a			ld a,(de)  
6920 77			ld (hl),a  
6921			  
6921			  
6921			; row 3  
6921			  
6921 78			ld a,b  
6922			  
6922 21 e6 fb		LD   hl, keyscan_table_row3+10  
6925			  
6925			;call addatohl  
6925 cd 1b 0d		call subafromhl  
6928			  
6928 11 8b fb		ld de, keyscan_scancol+2  
692b			  
692b 1a			ld a,(de)  
692c 77			ld (hl),a  
692d			  
692d			  
692d			  
692d			; row 4  
692d			  
692d 78			ld a,b  
692e			  
692e 21 db fb		LD   hl, keyscan_table_row4+10  
6931			  
6931			;call addatohl  
6931 cd 1b 0d		call subafromhl  
6934			  
6934 11 8c fb		ld de, keyscan_scancol+3  
6937			  
6937 1a			ld a,(de)  
6938 77			ld (hl),a  
6939			  
6939			; row 5  
6939			  
6939 78			ld a,b  
693a			  
693a 21 d0 fb		LD   hl, keyscan_table_row5+10  
693d			  
693d			;call addatohl  
693d cd 1b 0d		call subafromhl  
6940			  
6940 11 8d fb		ld de, keyscan_scancol+4  
6943			  
6943 1a			ld a,(de)  
6944 77			ld (hl),a  
6945			  
6945			; handshake next column  
6945			  
6945			  
6945 3e 40		ld a, 64  
6947 d3 c1		out (portbdata),a  
6949			  
6949 3e 00		ld a, 0  
694b d3 c1		out (portbdata),a  
694d			  
694d			; toggle clk and move to next column  
694d			;ld a, 64  
694d			;cp c  
694d			;  
694d			;jr z, .coltoglow  
694d			;ld c, a  
694d			;jr .coltog  
694d			;.coltoglow:  
694d			;ld c, 0  
694d			;.coltog:  
694d			;ld a, c  
694d			;out (portbdata),a  
694d			  
694d 10 b2		djnz .colscan  
694f			  
694f 3e 0a		ld a,10  
6951 21 f2 fb		LD   hl, keyscan_table_row1  
6954 cd 09 0d		call addatohl  
6957 3e 00		ld a, 0  
6959 77			ld (hl), a  
695a			  
695a			  
695a 3e 0a		ld a,10  
695c 21 e7 fb		LD   hl, keyscan_table_row2  
695f cd 09 0d		call addatohl  
6962 3e 00		ld a, 0  
6964 77			ld (hl), a  
6965			  
6965 3e 0a		ld a,10  
6967 21 dc fb		LD   hl, keyscan_table_row3  
696a cd 09 0d		call addatohl  
696d 3e 00		ld a, 0  
696f 77			ld (hl), a  
6970			  
6970 3e 0a		ld a,10  
6972 21 d1 fb		LD   hl, keyscan_table_row4  
6975 cd 09 0d		call addatohl  
6978 3e 00		ld a, 0  
697a 77			ld (hl), a  
697b			  
697b 3e 0a		ld a,10  
697d 21 c6 fb		LD   hl, keyscan_table_row5  
6980 cd 09 0d		call addatohl  
6983 3e 00		ld a, 0  
6985 77			ld (hl), a  
6986			  
6986			if DEBUG_KEY_MATRIX  
6986			  
6986			; Display text on first line  
6986			            LD   A, kLCD_Line1  
6986			            CALL fLCD_Pos       ;Position cursor to location in A  
6986			            LD   DE, keyscan_table_row1  
6986			            ;LD   DE, MsgHello  
6986			            CALL fLCD_Str       ;Display string pointed to by DE  
6986			  
6986			; Display text on second line  
6986			            LD   A, kLCD_Line2  
6986			            CALL fLCD_Pos       ;Position cursor to location in A  
6986			            LD   DE, keyscan_table_row2  
6986			            CALL fLCD_Str       ;Display string pointed to by DE  
6986			            LD   A, kLCD_Line3  
6986			            CALL fLCD_Pos       ;Position cursor to location in A  
6986			            LD   DE, keyscan_table_row3  
6986			            CALL fLCD_Str       ;Display string pointed to by DE  
6986			            LD   A, kLCD_Line4  
6986			            CALL fLCD_Pos       ;Position cursor to location in A  
6986			            LD   DE, keyscan_table_row4  
6986			            CALL fLCD_Str       ;Display string pointed to by DE  
6986			            LD   A, kLCD_Line4+10  
6986			            CALL fLCD_Pos       ;Position cursor to location in A  
6986			            LD   DE, keyscan_table_row5  
6986			            CALL fLCD_Str       ;Display string pointed to by DE  
6986			  
6986			;call delay250ms  
6986				jp matrix  
6986			endif  
6986 c9			ret  
6987			  
6987			; using decade counter....  
6987			  
6987			  
6987			; TODO reset decade counter to start of scan  
6987			  
6987			; reset 15  
6987			; clock 14  
6987			; ce 13  
6987			  
6987			; 1 - q5  
6987			; 2 - q1  
6987			; 3 - q0  
6987			; 4 - q2  
6987			; 5 - q6  
6987			; 6 - q7  
6987			; 7 - q3  
6987			; 8 - vss  
6987			; 9 - q8  
6987			; 10 - q4  
6987			; 11 - q9  
6987			; 12 - cout  
6987			; 16 - vdd  
6987			  
6987			; clock      ce       reset     output  
6987			; 0          x        0         n  
6987			; x          1        0         n  
6987			; x          x        1         q0  
6987			; rising     0        0         n+1  
6987			; falling    x        0         n  
6987			; x          rising   0         n  
6987			; 1          falling  0         x+1  
6987			;  
6987			; x = dont care, if n < 5 carry = 1 otherwise 0  
6987			  
6987			;   
6987			; reset   
6987			; 13=0, 14=0, 15=1 .. 15=0  
6987			;  
6987			; handshake line  
6987			; 14=1.... read line 14=0  
6987			  
6987			  
6987			  
6987			  
6987			  
6987			; TODO hand shake clock for next column scan  
6987			; TODO detect each row  
6987			  
6987			  
6987			  
6987			  
6987			; reset 128  
6987			; clock 64  
6987			; ce 32  
6987			  
6987			  
6987			.cyclestart:  
6987			  
6987			; reset counter  
6987 3e 80		ld a, 128  
6989 d3 c1		out (portbdata),a  
698b			  
698b			; loop leds  
698b 06 0a		ld b,10  
698d			  
698d			.cycle1:  
698d c5			push bc  
698e 3e 00		ld a, 0  
6990 d3 c1		out (portbdata),a  
6992 cd 49 0a		call delay250ms  
6995			  
6995 3e 40		ld a, 64  
6997 d3 c1		out (portbdata),a  
6999 cd 49 0a		call delay250ms  
699c			  
699c 3e 00		ld a, 0  
699e d3 c1		out (portbdata),a  
69a0 cd 49 0a		call delay250ms  
69a3			  
69a3 c1			pop bc  
69a4 10 e7		djnz .cycle1  
69a6			  
69a6			  
69a6 18 df		jr .cyclestart  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			; map matrix key held to char on face of key  
69a8			  
69a8			;.mtocold:  
69a8			;  
69a8			;  
69a8			;; reset counter  
69a8			;ld a, 128  
69a8			;out (portbdata),a  
69a8			;  
69a8			;  
69a8			;; scan keyboard row 1  
69a8			;ld a, 0  
69a8			;out (portbdata),a  
69a8			;;ld a, 64  
69a8			;;out (portbdata),a  
69a8			;  
69a8			;  
69a8			;	ld a, 128  
69a8			;	ld hl, keyscan_table  
69a8			;	call .rowscan  
69a8			;  
69a8			;;ld a, 0  
69a8			;;out (portbdata),a  
69a8			;ld a, 64  
69a8			;out (portbdata),a  
69a8			;  
69a8			;	ld a, 64  
69a8			;	ld hl, keyscan_table+key_cols  
69a8			;	call .rowscan  
69a8			;  
69a8			;ld a, 0  
69a8			;out (portbdata),a  
69a8			;;ld a, 64  
69a8			;;out (portbdata),a  
69a8			;	ld a, 32  
69a8			;	ld hl, keyscan_table+(key_cols*2)  
69a8			;	call .rowscan  
69a8			;  
69a8			;  
69a8			;;ld a, 0  
69a8			;;out (portbdata),a  
69a8			;ld a, 64  
69a8			;out (portbdata),a  
69a8			;  
69a8			;	ld a, 16  
69a8			;	ld hl, keyscan_table+(key_cols*3)  
69a8			;	call .rowscan  
69a8			;  
69a8			;  
69a8			;	; flag if key D is held down and remove from reporting  
69a8			;	ld bc, .key_map_fd    
69a8			;	ld hl, keyscan_table  
69a8			;	ld de, key_fd  
69a8			;	call .key_shift_hold  
69a8			;	cp 255  
69a8			;	jr z, .cinmap  
69a8			;	; flag if key C is held down and remove from reporting  
69a8			;	ld bc, .key_map_fc    
69a8			;	ld hl, keyscan_table+key_cols  
69a8			;	ld de, key_fc  
69a8			;	call .key_shift_hold  
69a8			;	cp 255  
69a8			;	jr z, .cinmap  
69a8			;	; flag if key B is held down and remove from reporting  
69a8			;	ld bc, .key_map_fb    
69a8			;	ld hl, keyscan_table+(key_cols*2)  
69a8			;	ld de, key_fb  
69a8			;	call .key_shift_hold  
69a8			;	cp 255  
69a8			;	jr z, .cinmap  
69a8			;	; flag if key A is held down and remove from reporting  
69a8			;	ld bc, .key_map_fa    
69a8			;	ld hl, keyscan_table+(key_cols*3)  
69a8			;	ld de, key_fa  
69a8			;	call .key_shift_hold  
69a8			;	cp 255  
69a8			;	jr z, .cinmap  
69a8			;  
69a8			;	ld de, .matrix_to_char  
69a8			;  
69a8			;  
69a8			;.cinmap:   
69a8			;	if DEBUG_KEY  
69a8			;            LD   A, kLCD_Line4  
69a8			;            CALL fLCD_Pos       ;Position cursor to location in A  
69a8			;		push de  
69a8			;            LD   DE, keyscan_table  
69a8			;            CALL fLCD_Str       ;Display string pointed to by DE  
69a8			;		pop de  
69a8			;	endif  
69a8			  
69a8				; scan key matrix table for any held key  
69a8			  
69a8				; de holds either the default matrix or one selected above  
69a8			  
69a8			;	ld hl, keyscan_table  
69a8			;	ld b,key_cols*key_rows  
69a8			;  
69a8			;.cin1:	ld a,(hl)  
69a8			;	cp '#'  
69a8			;	jr z, .cinhit  
69a8			;	inc hl  
69a8			;	inc de  
69a8			;	dec b  
69a8			;	jr nz, .cin1  
69a8			;	; no key found held  
69a8			;	ld a,0  
69a8			;	ret  
69a8			;.cinhit: push de  
69a8			;	pop hl  
69a8			;	ld a,(hl)  
69a8			;	ret  
69a8			  
69a8			; flag a control key is held   
69a8			; hl is key pin, de is flag indicator  
69a8			  
69a8			;.key_shift_hold:  
69a8			;	push bc  
69a8			;	ld a, 1  
69a8			;	ld (cursor_shape),a  
69a8			;	ld b, 0  
69a8			;	ld a, (hl)  
69a8			;	cp '.'  
69a8			;	jr z, .key_shift1  
69a8			;	ld b, 255  
69a8			;	ld a, '+'    ; hide key from later scans  
69a8			;	ld (hl),a  
69a8			;	ld a, 2  
69a8			;	ld (cursor_shape),a  
69a8			;.key_shift1:  
69a8			;	; write flag indicator  
69a8			;	ld a,b  
69a8			;	ld (de),a  
69a8			;  
69a8			;	pop de    ; de now holds the key map ptr  
69a8			;	ret  
69a8			  
69a8				  
69a8				  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			;	push hl  
69a8			;	push de  
69a8			;	push bc  
69a8			;	call keyscan  
69a8			;	; map key matrix to ascii value of key face  
69a8			;  
69a8			;	ld hl, key_face_map  
69a8			;	ld de, keyscan_table  
69a8			;  
69a8			;	; get how many keys to look at  
69a8			;	ld b, keyscan_table_len  
69a8			;	  
69a8			;  
69a8			;	; at this stage fall out on first key hit  
69a8			;	; TODO handle multiple key press  
69a8			;  
69a8			;map1:	ld a,(hl)  
69a8			;	cp '#'  
69a8			;	jr z, keyhit  
69a8			;	inc hl  
69a8			;	inc de  
69a8			;	dec b  
69a8			;	jr nz, map1  
69a8			;nohit:	ld a, 0  
69a8			;	jr keydone  
69a8			;keyhit: push de  
69a8			;	pop hl  
69a8			;	ld a,(hl)  
69a8			;keydone:  
69a8			;	push bc  
69a8			;	push de  
69a8			; 	push hl  
69a8			;	ret   
69a8			;  
69a8			  
69a8			  
69a8			  
69a8			  
69a8			; scan physical key matrix  
69a8			  
69a8			  
69a8			;keyscan:  
69a8			;  
69a8			;; for each key_row use keyscanr bit mask for out  
69a8			;; then read in for keyscanc bitmask  
69a8			;; save result of row scan to keyscantable  
69a8			;  
69a8			;; scan keyboard row 1  
69a8			;  
69a8			;	ld b, key_rows  
69a8			;	ld hl, key_scanr  
69a8			;	ld de, keyscan_table  
69a8			;  
69a8			;rowloop:  
69a8			;  
69a8			;	ld a,(hl)		; out bit mask to energise keyboard row  
69a8			;	call rowscan  
69a8			;	inc hl  
69a8			;	dec b  
69a8			;	jr nz, rowloop  
69a8			;  
69a8			;	ret  
69a8			;  
69a8			;  
69a8			;; pass a out bitmask, b row number  
69a8			;arowscan:   
69a8			;	push bc  
69a8			;  
69a8			;	ld d, b  
69a8			;  
69a8			;	; calculate buffer location for this row  
69a8			;  
69a8			;	ld hl, keyscan_table	  
69a8			;kbufr:  ld e, key_cols  
69a8			;kbufc:	inc hl  
69a8			;	dec e  
69a8			;	jr nz, kbufc  
69a8			;	dec d  
69a8			;	jr nz, kbufr  
69a8			;  
69a8			;	; energise row and read columns  
69a8			;  
69a8			;	out (portbdata),a  
69a8			;	in a,(portbdata)  
69a8			;	ld c,a  
69a8			;  
69a8			;  
69a8			;	; save buffer loc  
69a8			;  
69a8			;	ld (keybufptr), hl  
69a8			;  
69a8			;	ld hl, key_scanc  
69a8			;	ld d, key_cols  
69a8			;  
69a8			;	; for each column check each bit mask  
69a8			;  
69a8			;colloop:  
69a8			;	  
69a8			;  
69a8			;	; reset flags for the row   
69a8			;  
69a8			;	ld b,'.'  
69a8			;	and (hl)  
69a8			;	jr z, maskskip  
69a8			;	ld b,'#'  
69a8			;maskskip:  
69a8			;	; save  key state  
69a8			;	push hl  
69a8			;	ld hl, (keybufptr)  
69a8			;	ld (hl), b  
69a8			;	inc hl  
69a8			;	ld (keybufptr), hl  
69a8			;  
69a8			;	; move to next bit mask  
69a8			;	pop hl  
69a8			;	inc hl  
69a8			;  
69a8			;	dec d  
69a8			;	jr nz, colloop  
69a8			;  
69a8			;	ret  
69a8			;  
69a8			;  
69a8			;;  
69a8			; lcd functions  
69a8			;  
69a8			;  
69a8			  
69a8			;if DEBUG_KEY_MATRIX  
69a8			  
69a8			; test function to display hardware view of matrix state  
69a8			  
69a8			matrixold:  
69a8			  
69a8			  
69a8			  
69a8			; reset counter  
69a8 3e 80		ld a, 128  
69aa d3 c1		out (portbdata),a  
69ac			; scan keyboard row 1  
69ac 3e 00		ld a, 0  
69ae d3 c1		out (portbdata),a  
69b0			;ld a, 64  
69b0			;out (portbdata),a  
69b0 3e 80			ld a, 128  
69b2 21 f2 fb			ld hl, keyscan_table_row1  
69b5 cd 0e 6a			call .rowscan  
69b8			  
69b8			;ld a, 0  
69b8			;out (portbdata),a  
69b8 3e 40		ld a, 64  
69ba d3 c1		out (portbdata),a  
69bc 3e 40			ld a, 64  
69be 21 e7 fb			ld hl, keyscan_table_row2  
69c1 cd 0e 6a			call .rowscan  
69c4			  
69c4 3e 00		ld a, 0  
69c6 d3 c1		out (portbdata),a  
69c8			;ld a, 64  
69c8			;out (portbdata),a  
69c8 3e 20			ld a, 32  
69ca 21 dc fb			ld hl, keyscan_table_row3  
69cd cd 0e 6a			call .rowscan  
69d0			  
69d0			;ld a, 0  
69d0			;out (portbdata),a  
69d0 3e 40		ld a, 64  
69d2 d3 c1		out (portbdata),a  
69d4 3e 10			ld a, 16  
69d6 21 d1 fb			ld hl, keyscan_table_row4  
69d9 cd 0e 6a			call .rowscan  
69dc			  
69dc			; Display text on first line  
69dc 3e 00		            LD   A, kLCD_Line1  
69de cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
69e1 11 f2 fb		            LD   DE, keyscan_table_row1  
69e4			            ;LD   DE, MsgHello  
69e4 cd 38 66		            CALL fLCD_Str       ;Display string pointed to by DE  
69e7			  
69e7			; Display text on second line  
69e7 3e 28		            LD   A, kLCD_Line2  
69e9 cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
69ec 11 e7 fb		            LD   DE, keyscan_table_row2  
69ef cd 38 66		            CALL fLCD_Str       ;Display string pointed to by DE  
69f2 3e 50		            LD   A, kLCD_Line3  
69f4 cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
69f7 11 dc fb		            LD   DE, keyscan_table_row3  
69fa cd 38 66		            CALL fLCD_Str       ;Display string pointed to by DE  
69fd 3e 78		            LD   A, kLCD_Line4  
69ff cd 16 66		            CALL fLCD_Pos       ;Position cursor to location in A  
6a02 11 d1 fb		            LD   DE, keyscan_table_row4  
6a05 cd 38 66		            CALL fLCD_Str       ;Display string pointed to by DE  
6a08			  
6a08 cd 49 0a			call delay250ms  
6a0b c3 f9 68			jp matrix  
6a0e			  
6a0e			; pass de as row display flags  
6a0e			.rowscan:   
6a0e			;	out (portbdata),a  
6a0e db c1			in a,(portbdata)  
6a10 4f				ld c,a  
6a11				; reset flags for the row   
6a11 06 7e			ld b,KEY_MATRIX_NO_PRESS  
6a13 e6 01			and 1  
6a15 28 02			jr z, .p1on  
6a17 06 23			ld b,'#'  
6a19			.p1on:  
6a19 70				ld (hl), b  
6a1a 23				inc hl  
6a1b			  
6a1b 06 7e			ld b,KEY_MATRIX_NO_PRESS  
6a1d 79				ld a,c  
6a1e e6 02			and 2  
6a20			;	bit 0,a  
6a20 28 02			jr z, .p2on  
6a22 06 23			ld b,'#'  
6a24			.p2on:  
6a24 70				ld (hl), b  
6a25 23				inc hl  
6a26			;  
6a26 06 7e			ld b,KEY_MATRIX_NO_PRESS  
6a28 79				ld a,c  
6a29 e6 04			and 4  
6a2b			;;	bit 0,a  
6a2b 28 02			jr z, .p3on  
6a2d 06 23			ld b,'#'  
6a2f			.p3on:  
6a2f 70				ld (hl), b  
6a30 23				inc hl  
6a31			;;  
6a31 06 7e			ld b,KEY_MATRIX_NO_PRESS  
6a33			;;	bit 0,a  
6a33 79				ld a,c  
6a34 e6 08			and 8  
6a36 28 02			jr z, .p4on  
6a38 06 23			ld b,'#'  
6a3a			.p4on:  
6a3a 70				ld (hl), b  
6a3b 23				inc hl  
6a3c			  
6a3c 06 7e			ld b,KEY_MATRIX_NO_PRESS  
6a3e			;;	bit 0,a  
6a3e 79				ld a,c  
6a3f e6 10			and 16  
6a41 28 02			jr z, .p5on  
6a43 06 23			ld b,'#'  
6a45			.p5on:  
6a45 70				ld (hl), b  
6a46 23				inc hl  
6a47			; zero term  
6a47 06 00			ld b,0  
6a49 70				ld (hl), b  
6a4a			  
6a4a c9			.rscandone: ret  
6a4b			  
6a4b			;addatohl:  
6a4b			;  
6a4b			 ;add   a, l    ; A = A+L  
6a4b			  ;  ld    l, a    ; L = A+L  
6a4b			   ; adc   a, h    ; A = A+L+H+carry  
6a4b			   ; sub   l       ; A = H+carry  
6a4b			   ; ld    h, a    ; H = H+carry  
6a4b			  
6a4b			;ret  
6a4b			; eof  
# End of file firmware_key_5x10.asm
6a4b			;include "firmware_key_4x10.asm" 
6a4b			 
6a4b			heap_size:    equ heap_end - heap_start 
6a4b			;eof 
# End of file os_mega.asm
6a4b
