# File os_mini.asm
0000			; 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ 0 
0000			CPU_CLOCK_10MHZ: equ 0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			tos:	equ 0fffdh 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
0000			 
0000			 
0000			; Full OS but with the small 4x4 keypad 
0000			 
0000			display_rows: equ 4     ; move out to mini and mega files 
0000			display_cols: equ 20 
0000			 
0000			key_rows: equ 4     ; TODO move out to mini and mega 
0000			key_cols: equ 4    ; TODO move out to mini and mega 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 03 19			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			;        nop  
0003			;        nop 
0003			;;	org 05h		; null out bdos call 
0003			; 
0003			;        nop  
0003			;        nop  
0003			;        nop 
0003			;;	org 08h 
0003			;;; 
0003			;;	jp cin		; rst 8 - char in 
0003			;;; 
0003			; 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;        nop 
0003			;	org 010h 
0003			;; 
0003			;	jp cout		; rest 010h  - char out 
0003			;; 
0003			;	org 01bh   
0003			; 
0003			;	;jp  		; rst 01bh   - write string to display 
0003			;	jp str_at_display 
0003			; 
0003			; 
0003			;	org 020h 
0003			; 
0003			;	; jp		 ; rst 020h - read char at screen location 
0003			; 
0003			;	org 028h 
0003			 
0003				; jp		 ; rst 028h  - storage i/o 
0003			 
0003			; 	org 030h 
0003			;	jp break_point_state 
0003			  
0003			; $30  
0003			; org 038h 
0003			; $38 
0003			 
0003			; TODO any more important entry points to add to jump table for easier coding use? 
0003			 
0003			 
0003			include "firmware.asm" 
0003			  
0003			; main constants (used here and in firmware)  
0003			  
0003			; TODO have page 0 of storage as bios  
0003			  
0003			Device_A: equ 0h  
0003			Device_B: equ 040h          ; Sound  
0003			  
0003			if BASE_KEV  
0003			Device_C: equ 080h          ; Storage and ext cart devices  
0003			endif  
0003			  
0003			if BASE_SC114  
0003			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
0003			endif  
0003			  
0003			if BASE_CPM  
0003			; TODO fixup for CPM  
0003			Device_C: equ 080h          ; Storage and ext cart devices  
0003			endif  
0003			  
0003			Device_D: equ 0c0h             ; Keyboard and LCD  
0003			  
0003			; Odd specific debug points for testing hardware dev  
0003			  
0003			DEBUG_SOUND: equ 1  
0003			DEBUG_STK_FAULT: equ 0  
0003			DEBUG_INPUT: equ 0     ; Debug input entry code  
0003			DEBUG_KEYCINWAIT: equ 0  
0003			DEBUG_KEYCIN: equ 0  
0003			DEBUG_KEY: equ 0  
0003			DEBUG_KEY_MATRIX: equ 0  
0003			DEBUG_STORECF: equ 0  
0003			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.   
0003			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A  
0003			DEBUG_SPI: equ 0    ; low level spi tests  
0003			  
0003			; Enable many break points  
0003			  
0003			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6  
0003			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6  
0003			DEBUG_FORTH_PARSE_NEXTWORD: equ 0  
0003			DEBUG_FORTH_JP: equ 0    ; 4  
0003			DEBUG_FORTH_MALLOC: equ 0  
0003			DEBUG_FORTH_MALLOC_INT: equ 0  
0003			DEBUG_FORTH_DOT: equ 0  
0003			DEBUG_FORTH_DOT_WAIT: equ 0  
0003			DEBUG_FORTH_MATHS: equ 0  
0003			DEBUG_FORTH_TOK: equ 0    ; 4  
0003			DEBUG_FORTH_PARSE: equ 0    ; 3  
0003			DEBUG_FORTH: equ 0  ;2  
0003			DEBUG_FORTH_WORDS: equ 1   ; 1  
0003			DEBUG_FORTH_PUSH: equ 1   ; 1  
0003			DEBUG_FORTH_UWORD: equ 1   ; 1  
0003			  
0003			; Enable key point breakpoints  
0003			  
0003			DEBUG_FORTH_DOT_KEY: equ 0  
0003			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5  
0003			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1  
0003			  
0003			; Debug stack imbalances  
0003			  
0003			ON: equ 1  
0003			OFF: equ 0  
0003			  
0003			DEBUG_STACK_IMB: equ 0  
0003			STACK_IMB_STORE: equ 20  
0003			  
0003			; House keeping and protections  
0003			  
0003			DEBUG_FORTH_STACK_GUARD: equ 1  
0003			DEBUG_FORTH_MALLOC_GUARD: equ 1  
0003			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual!  
0003			FORTH_ENABLE_FREE: equ 0  
0003			FORTH_ENABLE_MALLOCFREE: equ 1  
0003			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away  
0003			FORTH_ENABLE_FLOATMATH: equ 0  
0003			  
0003			  
0003			CALLMONITOR: macro  
0003				call break_point_state  
0003				endm  
0003			  
0003			MALLOC_1: equ 1        ; from dk88   
0003			MALLOC_2: equ 0           ; broke  
0003			MALLOC_3: equ 0           ; really broke  
0003			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
0003			  
0003			if BASE_KEV   
0003			stacksize: equ 512*2  
0003			  
0003			STACK_RET_SIZE: equ 128  
0003			STACK_LOOP_SIZE: equ 512  
0003			STACK_DATA_SIZE: equ 512  
0003			endif  
0003			if BASE_SC114  
0003			;tos:	equ 0f000h  
0003			stacksize: equ 256  
0003			STACK_RET_SIZE: equ 64  
0003			STACK_LOOP_SIZE: equ 256  
0003			STACK_DATA_SIZE: equ 256  
0003			endif  
0003			  
0003			if BASE_CPM  
0003			;tos:	equ 0f000h  
0003			stacksize: equ 256  
0003			STACK_RET_SIZE: equ 64  
0003			STACK_LOOP_SIZE: equ 256  
0003			STACK_DATA_SIZE: equ 256  
0003			endif  
0003			  
0003			;if STORAGE_SE == 0  
0003			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
0003			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
0003			;endif  
0003			  
0003			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
0003			  
0003			STORE_0_AUTOFILE: equ $21  
0003			STORE_0_BANKRUN: equ $23  
0003			STORE_0_FILERUN: equ $24  
0003			  
0003			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
0003			  
0003			STORE_0_AUTORUN: equ $20  
0003			  
0003			; Blocks where directory table is held  
0003			  
0003			; Reducing the number of entries increases the max file size  
0003			  
0003			;STORE_DIR_START: equ 1  
0003			;STORE_DIR_END: equ 33  
0003			  
0003			; Blocks from where file data is stored  
0003			  
0003			;STORE_DATA_START: equ STORE_DIR_END + 1  
0003			  
0003			; Block indicators (<32 are data files)  
0003			  
0003			;STORE_BLOCK_CFG: equ $8f       ; config block  
0003			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
0003			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
0003			;STORE_BLOCK_FREE: equ $85       ; data block free  
0003			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
0003			  
0003			  
0003			  
0003			; Directory entry flags  
0003			  
0003			;STORE_DIR_FREE: equ 0  
0003			;STORE_DIR_FILE:  equ 1  
0003			  
0003			; Structure offsets to directory entries  
0003			;STORE_DE_FLAG: equ 0  
0003			;STORE_DE_MAXEXT: equ 1  
0003			;STORE_DE_FILENAME: equ 2  
0003			  
0003			; Structure offsets to block 0  
0003			  
0003			;STORE_BK0_ISFOR: equ 1  
0003			;STORE_BK0_LABEL: equ 3  
0003			  
0003			; memory allocation   
0003			  
0003			chk_stund: equ tos+2           ; underflow check word  
0003			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
0003			  
0003			; keyscan table needs rows x cols buffer  
0003			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
0003			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
0003			  
0003			keyscan_table_row1: equ chk_stovr -key_cols-1  
0003			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
0003			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
0003			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
0003			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
0003			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
0003			keyscan_scancol: equ keyscan_table-key_cols  
0003			;keyscan_table_len: equ key_rows*key_cols  
0003			;keybufptr: equ keyscan_table - 2  
0003			;keysymbol: equ keybufptr - 1  
0003			key_held: equ keyscan_scancol-1	; currently held  
0003			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
0003			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
0003			key_fa: equ key_repeat_ct -1 ;  
0003			key_fb: equ key_fa -1 ;  
0003			key_fc: equ key_fb -1 ;  
0003			key_fd: equ key_fc -1 ;  
0003			key_face_held: equ key_fd - 1   
0003			  
0003			; flag for enabling/disabling various hardware diags   
0003			  
0003			hardware_diag: equ key_face_held - 1  
0003			  
0003			; hardware config switches  
0003			; TODO add bitmasks on includes for hardware  
0003			; high byte for expansion ids  
0003			;     0000 0000  no card inserted  
0003			;     0000 0001  storage card inserted  
0003			;     0000 0010  spi sd card active  
0003			  
0003			;       
0003			; low byte:  
0003			;     0000 0001   4x4 keypad  
0003			;     0000 0010   full keyboard  
0003			;     0000 0011   spi/ext keyboard  
0003			;     0000 0100   20x4 lcd  
0003			;     0000 1000   40x4 lcd  
0003			;     0000 1100   spi/ext display  
0003			;     0001 0000   ide interface available  
0003			  
0003			hardware_word: equ hardware_diag - 2  
0003			  
0003			; debug marker - optional display of debug point on the debug screens  
0003			  
0003			debug_mark: equ hardware_word - 4  
0003			  
0003			; input_str vars  
0003			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
0003			input_start:  equ input_ptr - 2    ; ptr to the start of string   
0003			input_size: equ input_start -1  ; number of chars  
0003			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
0003			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
0003			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
0003			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
0003			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
0003			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
0003			input_len: equ input_cur_onoff - 5 ; length of current input  
0003			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
0003			  
0003			CUR_BLINK_RATE: equ 15  
0003			  
0003			key_actual_pressed: equ input_cursor - 1   
0003			key_symbol: equ key_actual_pressed - 1   
0003			key_shift: equ key_symbol - 1   
0003			  
0003			; Display allocation  
0003			  
0003			;display_rows: equ 4     ; move out to mini and mega files  
0003			;display_cols: equ 20  
0003			  
0003			display_fb_len: equ display_rows*display_cols  
0003			  
0003			; primary frame buffer     
0003			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
0003			; working frame buffers  
0003			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
0003			display_fb3: equ  display_fb1-display_fb_len - 1  
0003			display_fb2: equ  display_fb3-display_fb_len - 1  
0003			;  
0003			; pointer to active frame buffer  
0003			display_fb_active: equ display_fb2 - 2  
0003			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
0003			display_write_tmp: equ display_lcde1e2 - 2  
0003			  
0003			  
0003			;  
0003			  
0003			;; can load into de directory  
0003			cursor_col: equ display_write_tmp-1  
0003			cursor_row: equ cursor_col-1  
0003			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
0003			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
0003			  
0003			; maths vars  
0003			  
0003			LFSRSeed: equ cursor_shape -20   
0003			randData: equ LFSRSeed - 2  
0003			xrandc: equ randData - 2  
0003			stackstore: equ xrandc - 2  
0003			seed1: equ  stackstore -2   
0003			seed2: equ seed1 - 2  
0003			  
0003			; cf storage vars  
0003			  
0003			iErrorNum:  equ seed2-1         ;Error number  
0003			iErrorReg:  equ iErrorNum -1              ;Error register  
0003			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
0003			  
0003			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
0003			  
0003			STORE_BLOCK_LOG:  equ   255      ; TODO remove.... Logical block size     
0003			  
0003			store_page: equ store_bank_active-STORE_BLOCK_PHY            ; page size for eeprom  
0003			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
0003			store_tmp1: equ store_page - 2      ; temp pointer holders during ops  
0003			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
0003			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
0003			store_tmpid: equ store_tmp3 - 1		; page temp id  
0003			store_tmpext: equ store_tmpid - 1		; file extent temp  
0003			store_openext: equ store_tmpext - 1		; file extent of current opened file for read  
0003			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
0003			store_filecache: equ store_openmaxext-(2*5)   ;  TODO (using just one for now)  file id + extent count cache * 5  
0003			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
0003			;  
0003			; spi vars  
0003			  
0003			  
0003			spi_cartdev: equ store_tmppageid - 1      ; holds bit mask to send to portb (ext spi) devices  
0003			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
0003			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
0003			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
0003			spi_device_id: equ spi_device - 1    ; human readable bank number  
0003			  
0003			;;;;; forth cli params  
0003			  
0003			; TODO use a different frame buffer for forth???  
0003			  
0003			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
0003			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
0003			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
0003			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
0003			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
0003			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
0003			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
0003			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
0003			  
0003			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
0003			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
0003			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
0003			cli_ret_sp: equ cli_var_array - 2    ; ret stack pointer  
0003			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
0003			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
0003			  
0003			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
0003			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
0003			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
0003			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
0003			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
0003			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
0003			chk_data_ovr: equ cli_data_stack -2; overflow check word  
0003			  
0003			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
0003			  
0003			; os/forth token vars  
0003			  
0003			os_last_cmd: equ os_var_array-255  
0003			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
0003			os_current_i: equ os_cli_cmd-2  
0003			os_cur_ptr: equ os_current_i-2  
0003			os_word_scratch: equ os_cur_ptr-30  
0003			os_tok_len: equ os_word_scratch - 2  
0003			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
0003			os_tok_malloc: equ os_tok_ptr - 2  
0003			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
0003			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
0003			execscratch: equ os_input-255        ; exec cmd eval buffer  
0003			scratch: equ execscratch-255  
0003			  
0003			  
0003			; temp locations for new word processing to save on adding more   
0003			  
0003			os_new_malloc: equ scratch-2  
0003			os_new_parse_len: equ os_new_malloc - 2  
0003			os_new_word_len: equ os_new_parse_len - 2  
0003			os_new_work_ptr: equ os_new_word_len - 2  
0003			os_new_src_ptr: equ os_new_work_ptr - 2  
0003			os_new_exec: equ os_new_src_ptr - 2  
0003			os_new_exec_ptr: equ os_new_exec - 2  
0003			  
0003			; resume memory alloocations....  
0003			  
0003			os_view_disable: equ os_new_exec_ptr - 1  
0003			os_view_af: equ os_view_disable - 2  
0003			os_view_hl: equ os_view_af -2  
0003			os_view_de: equ os_view_hl - 2  
0003			os_view_bc: equ os_view_de - 2  
0003			  
0003			; stack checksum word  
0003			if DEBUG_STACK_IMB  
0003				curframe: equ  os_view_de - 5  
0003				store_sp: equ curframe - (STACK_IMB_STORE*4)  
0003				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
0003			else  
0003				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
0003			endif  
0003			  
0003			; with data stack could see memory filled with junk. need some memory management   
0003			; malloc and free entry points added  
0003			  
0003			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
0003			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
0003			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
0003			;heap_end: equ free_list-1  ; Starting address of heap  
0003			;heap_start: equ free_list - heap_size  ; Starting address of heap  
0003			  
0003			;heap_start: equ free_list - heap_size  ; Starting address of heap  
0003			heap_end: equ chk_word-1  ; Starting address of heap  
0003			  
0003			  
0003			;if BASE_KEV   
0003			;heap_start: equ 0800eh  ; Starting address of heap  
0003			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
0003			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
0003			;endif  
0003			  
0003			;if BASE_SC114  
0003			;heap_start: equ baseram+15  ; Starting address of heap  
0003			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
0003			;endif  
0003			  
0003			  
0003			;;;;  
0003			  
0003			  
0003			; change below to point to last memory alloc above  
0003			topusermem:  equ   heap_start  
0003			  
0003			;if BASE_KEV   
0003			;baseusermem: equ 08000h  
0003			;endif  
0003			  
0003			;if BASE_SC114  
0003			;;aseusermem:     equ    12  
0003			;baseusermem:     equ    prompt  
0003			;;baseusermem:     equ    endofcode  
0003			;endif  
0003			  
0003			  
0003			; **********************************************************************  
0003			; **  Constants  
0003			; **********************************************************************  
0003			  
0003			; Constants used by this code module  
0003			kDataReg:   EQU Device_D           ;PIO port A data register  
0003			kContReg:   EQU Device_D+2           ;PIO port A control register  
0003			  
0003			  
0003			portbdata:  equ Device_D+1    ; port b data  
0003			portbctl:   equ Device_D+3    ; port b control  
0003			  
0003			  
0003			;KEY_SHIFT:   equ 5  
0003			;KEY_SYMBOLSHIFT:  equ 6  
0003			  
0003			KEY_SHIFTLOCK: equ 4  
0003			  
0003			  
0003			KEY_UP: equ 5  
0003			KEY_NEXTWORD: equ 6  
0003			KEY_PREVWORD: equ 7  
0003			KEY_BS: equ 8  
0003			KEY_TAB:  equ 9  
0003			KEY_DOWN: equ 10  
0003			KEY_LEFT: equ 11  
0003			KEY_RIGHT: equ 12  
0003			KEY_CR:   equ 13  
0003			KEY_HOME: equ 14  
0003			KEY_END: equ 15  
0003			  
0003			KEY_F1: equ 16  
0003			KEY_F2: equ 17  
0003			KEY_F3: equ 18  
0003			KEY_F4: equ 19  
0003			  
0003			KEY_F5: equ 20  
0003			KEY_F6: equ 21  
0003			KEY_F7: equ 22  
0003			KEY_F8: equ 23  
0003			  
0003			KEY_F9: equ 24  
0003			KEY_F10: equ 25  
0003			KEY_F11: equ 26  
0003			KEY_F12: equ 27  
0003			  
0003			;if DEBUG_KEY  
0003			;	KEY_MATRIX_NO_PRESS: equ '.'  
0003			;	KEY_SHIFT:   equ '.'  
0003			;	KEY_SYMBOLSHIFT:  equ '.'  
0003			;else  
0003				KEY_SHIFT:   equ '~'  
0003				KEY_SYMBOLSHIFT:  equ '~'  
0003				KEY_MATRIX_NO_PRESS: equ '~'  
0003			;endi  
0003			  
0003			  
0003			  
0003			  
0003			; Macro to make adding debug marks easier  
0003			  
0003			DMARK: macro str  
0003				push af  
0003				ld a, (.dmark)  
0003				ld (debug_mark),a  
0003				ld a, (.dmark+1)  
0003				ld (debug_mark+1),a  
0003				ld a, (.dmark+2)  
0003				ld (debug_mark+2),a  
0003				jr .pastdmark  
0003			.dmark: db str  
0003			.pastdmark: pop af  
0003			  
0003			endm  
0003			  
0003			  
0003			; macro to detect for stack imbalances  
0003			  
0003			include "stackimbal.asm"  
0003			; Macro and code to detect stock imbalances 
0003			 
0003			SPPUSH: equ 0 
0003			 
0003			; Add a stack frame which can be checked before return 
0003			 
0003			STACKFRAME: macro onoff frame1 frame2 
0003			 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003						; save current SP 
0003						exx 
0003			 
0003						ld de, frame1 
0003						ld a, d 
0003						ld hl, curframe 
0003						call hexout 
0003						ld a, e 
0003						ld hl, curframe+2 
0003						call hexout 
0003			  
0003						ld hl, frame1 
0003						push hl 
0003						ld hl, frame2 
0003						push hl 
0003						exx 
0003					endif 
0003					 
0003				endif 
0003			endm 
0003			 
0003			STACKFRAMECHK: macro onoff frame1 frame2 
0003			 
0003					 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003						exx 
0003						; check stack frame SP 
0003			 
0003						ld hl, frame2 
0003						pop de   ; frame2 
0003			 
0003						call cmp16 
0003						jr nz, .spnosame 
0003						 
0003			 
0003						ld hl, frame1 
0003						pop de   ; frame1 
0003			 
0003						call cmp16 
0003						jr z, .spfrsame 
0003			 
0003						.spnosame: call showsperror 
0003			 
0003						.spfrsame: nop 
0003			 
0003						exx 
0003					endif 
0003					 
0003				endif 
0003			 
0003			 
0003			endm 
0003			 
0003			 
0003			; for a sub routine, wrap SP collection and comparisons 
0003			 
0003			; Usage: 
0003			; 
0003			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
0003			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
0003			 
0003			SAVESP: macro onoff storeword 
0003			 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003						; save current SP 
0003			 
0003						ld (store_sp+(storeword*4)), sp 
0003			 
0003					endif 
0003					 
0003				endif 
0003			 
0003			endm 
0003			 
0003			CHECKSP: macro onoff storeword 
0003			 
0003				if DEBUG_STACK_IMB 
0003					if onoff 
0003			 
0003						; save SP after last save 
0003				 
0003						ld (store_sp+(storeword*4)+2), sp 
0003			 
0003						push hl 
0003						ld hl, store_sp+(storeword*4) 
0003						call check_stack_sp  
0003						pop hl 
0003			 
0003			 
0003					endif 
0003					 
0003				endif 
0003			 
0003			endm 
0003			 
0003			if DEBUG_STACK_IMB 
0003			 
0003			check_stack_sp: 
0003					push de 
0003			 
0003					ld e, (hl) 
0003					inc hl 
0003					ld d, (hl) 
0003					inc hl 
0003			 
0003					push de 
0003			 
0003			 
0003					ld e, (hl) 
0003					inc hl 
0003					ld d, (hl) 
0003					inc hl 
0003			 
0003					pop hl 
0003			 
0003			 
0003					; check to see if the same 
0003			 
0003					call cmp16 
0003					jr z, .spsame 
0003			 
0003					; not same 
0003			 
0003					call showsperror 
0003			.spsame: 
0003			 
0003					pop de 
0003			 
0003					ret 
0003			 
0003			.sperr:  db "Stack imbalance",0 
0003			 
0003			 
0003			showsperror: 
0003			 
0003			 
0003				push hl 
0003				push af 
0003				push de 
0003				call clear_display 
0003				ld de, .sperr 
0003				ld a,0 
0003			;	ld de,os_word_scratch 
0003				call str_at_display 
0003				ld a, display_row_1+17 
0003				ld de, debug_mark 
0003				call str_at_display 
0003				ld a, 0 
0003				ld (curframe+4),a 
0003				ld hl, curframe 
0003				ld de, os_word_scratch 
0003				ld a, display_row_4 
0003				call str_at_display 
0003				call update_display 
0003				;call break_point_state 
0003				call cin_wait 
0003			 
0003				ld a, ' ' 
0003				ld (os_view_disable), a 
0003				pop de	 
0003				pop af 
0003				pop hl 
0003				CALLMONITOR 
0003				ret 
0003			 
0003			endif 
0003			 
0003			 
0003			 
0003			; eof 
# End of file stackimbal.asm
0003			  
0003			;TODO macro to calc col and row offset into screen  
0003			  
0003			  
0003			  
0003			hardware_init:  
0003			  
0003 3e 00				ld a, 0  
0005 32 c3 fb				ld (hardware_diag), a  
0008			  
0008					; clear all the buffers  
0008			  
0008 21 02 fb				ld hl, display_fb1  
000b 22 5e fa				ld (display_fb_active), hl  
000e			  
000e cd e6 0a				call clear_display  
0011			  
0011 21 60 fa				ld hl, display_fb2  
0014 22 5e fa				ld (display_fb_active), hl  
0017			  
0017 cd e6 0a				call clear_display  
001a			  
001a					; init primary frame buffer area  
001a 21 53 fb				ld hl, display_fb0  
001d 22 5e fa				ld (display_fb_active), hl  
0020			  
0020 cd e6 0a				call clear_display  
0023			  
0023			  
0023 cd 4f 65				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
0026			  
0026 cd 98 66			call key_init  
0029 cd c9 01			call storage_init  
002c			  
002c				; setup malloc functions  
002c			  
002c				if MALLOC_1  
002c cd bd 11				call  heap_init  
002f				endif  
002f				if MALLOC_4  
002f					call  heap_init  
002f				endif  
002f			  
002f				; init sound hardware if present  
002f			  
002f				if SOUND_ENABLE  
002f					call sound_init  
002f				endif  
002f			  
002f				; lcd test sequence  
002f					  
002f cd 09 0b			call update_display  
0032 cd 66 0a			call delay1s  
0035 3e 2b			ld a,'+'  
0037 cd eb 0a			call fill_display  
003a cd 09 0b			call update_display  
003d cd 66 0a			call delay1s  
0040 3e 2a			ld a,'*'  
0042 cd eb 0a			call fill_display  
0045 cd 09 0b			call update_display  
0048 cd 66 0a			call delay1s  
004b 3e 2d			ld a,'-'  
004d cd eb 0a			call fill_display  
0050 cd 09 0b			call update_display  
0053 cd 66 0a			call delay1s  
0056			  
0056			; boot splash screen  
0056			if display_cols == 20	  
0056 3e 00		        ld a, display_row_1    
0058			else  
0058			        ld a, display_row_1 +10   
0058			endif  
0058 11 89 00			ld de, bootmsg  
005b cd f9 0a			call str_at_display  
005e cd 09 0b			call update_display  
0061			  
0061			  
0061 cd 66 0a			call delay1s  
0064 cd 66 0a			call delay1s  
0067			if display_cols == 20	  
0067 3e 2a		            LD   A, display_row_3+2  
0069			else  
0069			            LD   A, display_row_3+12  
0069			endif  
0069 11 9e 00			ld de, bootmsg1  
006c cd f9 0a			call str_at_display  
006f cd 09 0b			call update_display  
0072 cd 66 0a			call delay1s  
0075 cd 66 0a			call delay1s  
0078			  
0078			;	ld a, display_row_4+3  
0078			;	ld de, bootmsg2  
0078			;	call str_at_display  
0078			;	call update_display  
0078			;	call delay1s  
0078			;	call delay1s  
0078			  
0078			; debug mark setup  
0078			  
0078 3e 5f		ld a, '_'  
007a 32 bd fb		ld (debug_mark),a  
007d 32 be fb		ld (debug_mark+1),a  
0080 32 bf fb		ld (debug_mark+2),a  
0083 3e 00		ld a,0  
0085 32 c0 fb		ld (debug_mark+3),a  
0088			  
0088 c9					ret  
0089			  
0089			  
0089 .. 00		bootmsg:	db "z80-homebrew OS v1.5",0  
009e .. 00		bootmsg1:	db "by Kevin Groves",0  
00ae			;bootmsg2:	db "Firmware v0.1",0  
00ae			  
00ae			; a 4x20 lcd  
00ae			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00ae			  
00ae			;if display_cols == 20  
00ae			;	include "firmware_lcd_4x20.asm"  
00ae			;endif  
00ae			  
00ae			;if display_cols == 40  
00ae			;	include "firmware_lcd_4x40.asm"  
00ae			;endif  
00ae			  
00ae			;  
00ae			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00ae			; TODO abstract the bit bang video out interface for dual display  
00ae			; TODO wire video out to tx pin on rc2014 bus  
00ae			  
00ae			; must supply cin, and cin_wait for low level hardware abstraction   
00ae			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00ae			; test scancode  
00ae			  
00ae			;;;;;  
00ae			;;;  
00ae			; Moved out to mini and maxi versions  
00ae			;  
00ae			; include "firmware_key_4x4.asm"  
00ae			; using existing 4 wire x 4 resistor array for input  
00ae			;include "firmware_key_4x10.asm"  
00ae			; need to mod the board for 5 rows due to resistor array  
00ae			;include "firmware_key_5x10.asm"  
00ae			  
00ae			; storage hardware interface  
00ae			  
00ae			; use microchip serial eeprom for storage  
00ae			  
00ae			  
00ae			if STORAGE_SE  
00ae				include "firmware_spi.asm"  
00ae			; my spi protocol (used by storage) 
00ae			 
00ae			; SPI pins 
00ae			 
00ae			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00ae			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00ae			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00ae			 
00ae			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00ae			; chip pin 4 gnd 
00ae			 
00ae			 
00ae			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00ae			SPI_CE1: equ 1      ;    port a1 pin 14  
00ae			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00ae			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00ae			SPI_CE4: equ 4      ; port a4     pin 10 
00ae			 
00ae			; active low AND masks 
00ae			 
00ae			;SPI_CE0_MASK: equ    255-1 
00ae			;SPI_CE1_MASK: equ   255-2 
00ae			;SPI_CE2_MASK: equ   255-4 
00ae			;SPI_CE3_MASK: equ   255-8 
00ae			;SPI_CE4_MASK: equ   255-16 
00ae			SPI_CE_HIGH:  equ 255 
00ae			 
00ae			 
00ae			 
00ae			 
00ae			; TODO store port id for spi device ie dev c 
00ae			; TODO store pin for SO 
00ae			; TODO store pin for SI 
00ae			; TODO store pin for SCLK 
00ae			 
00ae			; 
00ae			 
00ae			; ensure that spi bus is in a stable state with default pins  
00ae			 
00ae			se_stable_spi:   
00ae			 
00ae				 ; set DI high, CE high , SCLK low 
00ae				;ld a, SPI_DI | SPI_CE0 
00ae 3e 07			ld a, SPI_DI  
00b0 cd 84 01			call spi_ce_high 
00b3 d3 80			 out (storage_adata),a 
00b5 32 cf f9			ld (spi_portbyte),a 
00b8			 
00b8				if DEBUG_SPI 
00b8					push hl 
00b8					ld l, a 
00b8					DMARK "SPI" 
00b8					CALLMONITOR 
00b8					pop hl 
00b8				endif 
00b8 c9				ret 
00b9			 
00b9			; byte to send in a 
00b9			 
00b9			spi_send_byte: 
00b9				; save byte to send for bit mask shift out 
00b9 4f			        ld c,a 
00ba 3a cf f9			ld a,(spi_portbyte) 
00bd				  
00bd				; clock out	each bit of the byte msb first 
00bd			 
00bd 06 08			ld b, 8 
00bf			.ssb1: 
00bf				; clear so bit  
00bf cb bf			res SPI_DI, a 
00c1 cb 11			rl c 
00c3				; if bit 7 is set then carry is set 
00c3 30 02			jr nc, .ssb2 
00c5 cb ff			set SPI_DI,a 
00c7			.ssb2:  ; output bit to ensure it is stable 
00c7 d3 80			out (storage_adata),a 
00c9 00				nop 
00ca				; clock bit high 
00ca cb ef			set SPI_SCLK,a 
00cc d3 80			out (storage_adata),a 
00ce 00				nop 
00cf				; then low 
00cf cb af			res SPI_SCLK,a 
00d1 d3 80			out (storage_adata),a 
00d3 00				nop 
00d4 10 e9			djnz .ssb1 
00d6			 
00d6 32 cf f9			ld (spi_portbyte),a 
00d9 c9				ret 
00da			 
00da			; TODO low level get byte into A on spi 
00da			 
00da			spi_read_byte:  
00da			 
00da				; save byte to send for bit mask shift out 
00da 0e 00		    ld c,0 
00dc 3a cf f9			ld a,(spi_portbyte) 
00df				  
00df				; clock out	each bit of the byte msb first 
00df			 
00df			 
00df				; clock bit high 
00df cb ef			set SPI_SCLK,a 
00e1 d3 80			out (storage_adata),a 
00e3 00				nop 
00e4			 
00e4			    ; read DO  
00e4			 
00e4 cb f9		    set 7,c 
00e6 db 80			in a,(storage_adata) 
00e8 cb 77		    bit SPI_DO,a 
00ea 20 02		    jr nz, .b7 
00ec cb b9		    res 7,c 
00ee			.b7: 
00ee				; then low 
00ee cb af			res SPI_SCLK,a 
00f0 d3 80			out (storage_adata),a 
00f2 00				nop 
00f3			     
00f3			 
00f3				; clock bit high 
00f3 cb ef			set SPI_SCLK,a 
00f5 d3 80			out (storage_adata),a 
00f7 00				nop 
00f8			 
00f8			    ; read DO  
00f8			 
00f8 cb f1		    set 6,c 
00fa db 80			in a,(storage_adata) 
00fc cb 77		    bit SPI_DO,a 
00fe 20 02		    jr nz, .b6 
0100 cb b1		    res 6,c 
0102			.b6: 
0102				; then low 
0102 cb af			res SPI_SCLK,a 
0104 d3 80			out (storage_adata),a 
0106 00				nop 
0107			 
0107				; clock bit high 
0107 cb ef			set SPI_SCLK,a 
0109 d3 80			out (storage_adata),a 
010b 00				nop 
010c			 
010c			 
010c			    ; read DO  
010c			 
010c cb e9		    set 5,c 
010e db 80			in a,(storage_adata) 
0110 cb 77		    bit SPI_DO,a 
0112 20 02		    jr nz, .b5 
0114 cb a9		    res 5,c 
0116			.b5: 
0116				; then low 
0116 cb af			res SPI_SCLK,a 
0118 d3 80			out (storage_adata),a 
011a 00				nop 
011b				; clock bit high 
011b cb ef			set SPI_SCLK,a 
011d d3 80			out (storage_adata),a 
011f 00				nop 
0120			 
0120			    ; read DO  
0120			 
0120 cb e1		    set 4,c 
0122 db 80			in a,(storage_adata) 
0124 cb 77		    bit SPI_DO,a 
0126 20 02		    jr nz, .b4 
0128 cb a1		    res 4,c 
012a			.b4: 
012a				; then low 
012a cb af			res SPI_SCLK,a 
012c d3 80			out (storage_adata),a 
012e 00				nop 
012f				; clock bit high 
012f cb ef			set SPI_SCLK,a 
0131 d3 80			out (storage_adata),a 
0133 00				nop 
0134			 
0134			    ; read DO  
0134			 
0134 cb d9		    set 3,c 
0136 db 80			in a,(storage_adata) 
0138 cb 77		    bit SPI_DO,a 
013a 20 02		    jr nz, .b3 
013c cb 99		    res 3,c 
013e			.b3: 
013e				; then low 
013e cb af			res SPI_SCLK,a 
0140 d3 80			out (storage_adata),a 
0142 00				nop 
0143				; clock bit high 
0143 cb ef			set SPI_SCLK,a 
0145 d3 80			out (storage_adata),a 
0147 00				nop 
0148			 
0148			    ; read DO  
0148			 
0148 cb d1		    set 2,c 
014a db 80			in a,(storage_adata) 
014c cb 77		    bit SPI_DO,a 
014e 20 02		    jr nz, .b2 
0150 cb 91		    res 2,c 
0152			.b2: 
0152				; then low 
0152 cb af			res SPI_SCLK,a 
0154 d3 80			out (storage_adata),a 
0156 00				nop 
0157				; clock bit high 
0157 cb ef			set SPI_SCLK,a 
0159 d3 80			out (storage_adata),a 
015b 00				nop 
015c			 
015c			    ; read DO  
015c			 
015c cb c9		    set 1,c 
015e db 80			in a,(storage_adata) 
0160 cb 77		    bit SPI_DO,a 
0162 20 02		    jr nz, .b1 
0164 cb 89		    res 1,c 
0166			.b1: 
0166				; then low 
0166 cb af			res SPI_SCLK,a 
0168 d3 80			out (storage_adata),a 
016a 00				nop 
016b				; clock bit high 
016b cb ef			set SPI_SCLK,a 
016d d3 80			out (storage_adata),a 
016f 00				nop 
0170			 
0170			    ; read DO  
0170			 
0170 cb c1		    set 0,c 
0172 db 80			in a,(storage_adata) 
0174 cb 77		    bit SPI_DO,a 
0176 20 02		    jr nz, .b0 
0178 cb 81		    res 0,c 
017a			.b0: 
017a				; then low 
017a cb af			res SPI_SCLK,a 
017c d3 80			out (storage_adata),a 
017e 00				nop 
017f			 
017f			 
017f 32 cf f9			ld (spi_portbyte),a 
0182			 
0182			    ; return byte 
0182 79			    ld a,c 
0183			 
0183			 
0183 c9				ret 
0184			 
0184			 
0184			 
0184			spi_ce_high: 
0184			 
0184				if DEBUG_SPI_HARD_CE0 
0184			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0184					ret 
0184			 
0184				endif 
0184			 
0184			 
0184 f5				push af 
0185			 
0185				; send direct ce to port b 
0185 3e ff			ld a, 255 
0187 d3 81			out (storage_bdata), a 
0189			 
0189 f1				pop af 
018a			 
018a				; for port a that shares with spi lines AND the mask 
018a			  
018a				if DEBUG_SPI 
018a					push hl 
018a					ld h, a 
018a				endif 
018a			;	ld c, SPI_CE_HIGH 
018a			;	and c 
018a cb c7			set SPI_CE0, a 
018c cb cf			set SPI_CE1, a 
018e cb d7			set SPI_CE2, a 
0190 cb df			set SPI_CE3, a 
0192 cb e7			set SPI_CE4, a 
0194			 
0194				if DEBUG_SPI 
0194					ld l, a 
0194					DMARK "CEh" 
0194					CALLMONITOR 
0194					pop hl 
0194				endif 
0194 c9				ret 
0195			 
0195			 
0195			spi_ce_low: 
0195			 
0195				if DEBUG_SPI_HARD_CE0 
0195			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0195					ret 
0195			 
0195				endif 
0195			 
0195 c5				push bc 
0196 f5				push af 
0197			 
0197				; send direct ce to port b 
0197 3a d1 f9			ld a, (spi_cartdev) 
019a d3 81			out (storage_bdata), a 
019c			 
019c			 
019c			 
019c				; for port a that shares with spi lines AND the mask 
019c			 
019c 3a ce f9			ld a, (spi_device)  
019f 4f				ld c, a 
01a0			 
01a0 f1				pop af 
01a1			 
01a1				; detect CEx 
01a1			 
01a1				if DEBUG_SPI 
01a1					push hl 
01a1					ld h, a 
01a1				endif 
01a1			 
01a1 cb 41			bit SPI_CE0, c 
01a3 20 04			jr nz, .cel1 
01a5 cb 87			res SPI_CE0, a 
01a7 18 1e			jr .celn 
01a9			.cel1: 
01a9 cb 49			bit SPI_CE1, c 
01ab 20 04			jr nz, .cel2 
01ad cb 8f			res SPI_CE1, a 
01af 18 16			jr .celn 
01b1			.cel2: 
01b1 cb 51			bit SPI_CE2, c 
01b3 20 04			jr nz, .cel3 
01b5 cb 97			res SPI_CE2, a 
01b7 18 0e			jr .celn 
01b9			.cel3: 
01b9 cb 59			bit SPI_CE3, c 
01bb 20 04			jr nz, .cel4 
01bd cb 9f			res SPI_CE3, a 
01bf 18 06			jr .celn 
01c1			.cel4: 
01c1 cb 61			bit SPI_CE4, c 
01c3 20 02			jr nz, .celn 
01c5 cb a7			res SPI_CE4, a 
01c7			.celn: 
01c7			 
01c7			 
01c7			 
01c7			;	add c 
01c7			 
01c7				if DEBUG_SPI 
01c7					ld l, a 
01c7					DMARK "CEl" 
01c7					CALLMONITOR 
01c7					pop hl 
01c7				endif 
01c7 c1				pop bc 
01c8 c9				ret 
01c9			 
01c9			 
01c9			 
01c9			; eof 
01c9			 
01c9			 
01c9			 
01c9			 
01c9			 
# End of file firmware_spi.asm
01c9				include "firmware_seeprom.asm"  
01c9			; 
01c9			; persisent storage interface via microchip serial eeprom 
01c9			 
01c9			; port a pio 2 
01c9			; pa 7 - si 
01c9			; pa 6 - sclk  
01c9			; pa 5 - so 
01c9			; pa 4 - cs 
01c9			; pa 3 - cs 
01c9			; pa 2 - cs 
01c9			; pa 1 - cs 
01c9			; pa 0 - cs 
01c9			; 
01c9			; TODO get block 
01c9			; TODO save block 
01c9			; TODO load file 
01c9			; TODO save file 
01c9			; TODO get dir  
01c9			 
01c9			;  
01c9			storage_adata: equ Device_C    ; device c port a - onboard storage 
01c9			storage_actl: equ Device_C+2     ; device c port a 
01c9			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
01c9			storage_bctl: equ Device_C+3     ; device c port b 
01c9			 
01c9			 
01c9			; TODO move these to hardware driver file 
01c9			 
01c9			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
01c9			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
01c9			; storage bank file system format 
01c9			; 
01c9			; first page of bank: 
01c9			; 	addr 0 - status check 
01c9			;       addr 1 - write protect flag 
01c9			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
01c9			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
01c9			;         TODO see if scanning whole of for available next file id is fast enough 
01c9			;	addr 4 > zero term string of bank label 
01c9			; 
01c9			;        
01c9			;  
01c9			; first page of any file: 
01c9			;      byte 0 - file id  
01c9			;      byte 1-17 - fixed file name  
01c9			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
01c9			; 
01c9			; other pages of any file: 
01c9			;      byte 0 - file id 
01c9			;      byte 1> - file data 
01c9			; 
01c9			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
01c9			;  
01c9			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
01c9			 
01c9			 
01c9			;storage_so_bit: 5 
01c9			;storage_si_bit: 7 
01c9			;storage_sclk_bit: 6 
01c9			  
01c9			 
01c9			; init storage pio 
01c9			 
01c9			storage_init: 
01c9			 
01c9 3e cf		            LD   A, 11001111b 
01cb d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
01cd 3e 00		            LD   A, 00000000b 
01cf cb f7			set SPI_DO,a 
01d1			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
01d1 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
01d3			 
01d3 3e cf		            LD   A, 11001111b 
01d5 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
01d7 3e 00		            LD   A, 00000000b 
01d9 d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
01db			 
01db				; set all external spi devices off 
01db 3e 00			ld a, 0 
01dd 32 ce f9			ld (spi_device), a 
01e0 32 d1 f9			ld (spi_cartdev), a 
01e3			 
01e3					; ensure the spi bus is in a default stable state 
01e3 cd ae 00				call se_stable_spi 
01e6			 
01e6			; TODO scan spi bus and gather which storage banks are present 
01e6			 
01e6			; populate store_bank_active  
01e6			; for each ce line activate and attempt to write first byte of bank and read back 
01e6			; if zero is returned then bank is empty 
01e6			;   
01e6			; 
01e6			 
01e6					; init file extent cache to save on slow reads 
01e6			 
01e6			;	ld hl, store_filecache 
01e6			;	ld de, 0 
01e6			;	ld hl,(de)	 
01e6			 
01e6			 
01e6 c9			    ret 
01e7			 
01e7			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
01e7			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
01e7			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
01e7			 
01e7			; INSTRUCTION SET 
01e7			; READ 0000 0011 Read data from memory array beginning at selected address 
01e7			; WRITE 0000 0010 Write data to memory array beginning at selected address 
01e7			; WREN 0000 0110 Set the write enable latch (enable write operations) 
01e7			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
01e7			; RDSR 0000 0101 Read STATUS register 
01e7			; WRSR 0000 0001 Write STATUS register 
01e7			; PE 0100 0010 Page Erase – erase one page in memory array 
01e7			; SE 1101 1000 Sector Erase – erase one sector in memory array 
01e7			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
01e7			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
01e7			 
01e7			; TODO send byte steam for page without setting the address for every single byte 
01e7			; TODO read byte  
01e7			 
01e7			; byte in a 
01e7			; address in hl  
01e7			se_writebyte: 
01e7			        
01e7			    ;   ld c, a 
01e7 f5			        push af 
01e8 e5			        push hl 
01e9			 
01e9			    ; initi write mode 
01e9			    ; 
01e9			    ;CS low 
01e9			 
01e9 3a cf f9		       ld a,(spi_portbyte) 
01ec cd 95 01			call spi_ce_low 
01ef			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
01ef d3 80		       out (storage_adata),a 
01f1 32 cf f9		       ld (spi_portbyte), a 
01f4			 
01f4			    ;clock out wren instruction 
01f4			 
01f4 3e 06		    ld a, store_wren_ins 
01f6 cd b9 00		    call spi_send_byte  
01f9			 
01f9			    ;cs high to enable write latch 
01f9			 
01f9 3a cf f9		       ld a,(spi_portbyte) 
01fc cd 84 01			call spi_ce_high 
01ff			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
01ff d3 80		       out (storage_adata),a 
0201 32 cf f9		       ld (spi_portbyte), a 
0204			 
0204 00				nop 
0205			    ; 
0205			    ; intial write data 
0205			    ; 
0205			    ; cs low 
0205			     
0205 3a cf f9		       ld a,(spi_portbyte) 
0208 cd 95 01			call spi_ce_low 
020b			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
020b d3 80		       out (storage_adata),a 
020d 32 cf f9		       ld (spi_portbyte), a 
0210			 
0210			    ; clock out write instruction 
0210			     
0210 3e 02		    ld a, store_write_ins  
0212 cd b9 00		    call spi_send_byte  
0215			 
0215			    ; clock out address (depending on address size) 
0215			     
0215 e1			    pop hl 
0216 7c			    ld a,h    ; address out msb first 
0217 cd b9 00		    call spi_send_byte  
021a 7d			    ld a,l 
021b cd b9 00		    call spi_send_byte  
021e			 
021e			    ; clock out byte(s) for page 
021e			 
021e f1			    pop af 
021f cd b9 00		    call spi_send_byte  
0222			 
0222			    ; end write with ce high 
0222 3a cf f9		       ld a,(spi_portbyte) 
0225			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
0225 cd 84 01			call spi_ce_high 
0228 d3 80		       out (storage_adata),a 
022a 32 cf f9		       ld (spi_portbyte), a 
022d			 
022d				; pause for internal write cycle 
022d 3e 0a			ld a, 10 
022f cd 4b 0a			call aDelayInMS 
0232 c9			    ret 
0233			 
0233			; buffer to write in de 
0233			; address in hl  
0233			se_writepage: 
0233			        
0233			    ;   ld c, a 
0233 d5				push de 
0234 e5			        push hl 
0235			 
0235			    ; initi write mode 
0235			    ; 
0235			    ;CS low 
0235			 
0235 3a cf f9		       ld a,(spi_portbyte) 
0238 cd 95 01			call spi_ce_low 
023b			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
023b d3 80		       out (storage_adata),a 
023d 32 cf f9		       ld (spi_portbyte), a 
0240			 
0240			    ;clock out wren instruction 
0240			 
0240 3e 06		    ld a, store_wren_ins 
0242 cd b9 00		    call spi_send_byte  
0245			 
0245			    ;cs high to enable write latch 
0245			 
0245 3a cf f9		       ld a,(spi_portbyte) 
0248 cd 84 01			call spi_ce_high 
024b			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
024b d3 80		       out (storage_adata),a 
024d 32 cf f9		       ld (spi_portbyte), a 
0250			 
0250 00				nop 
0251			    ; 
0251			    ; intial write data 
0251			    ; 
0251			    ; cs low 
0251			     
0251 3a cf f9		       ld a,(spi_portbyte) 
0254			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0254 cd 95 01			call spi_ce_low 
0257 d3 80		       out (storage_adata),a 
0259 32 cf f9		       ld (spi_portbyte), a 
025c			 
025c			    ; clock out write instruction 
025c			     
025c 3e 02		    ld a, store_write_ins  
025e cd b9 00		    call spi_send_byte  
0261			 
0261			    ; clock out address (depending on address size) 
0261			     
0261 e1			    pop hl 
0262 7c			    ld a,h    ; address out msb first 
0263 cd b9 00		    call spi_send_byte  
0266 7d			    ld a,l 
0267 cd b9 00		    call spi_send_byte  
026a			 
026a			    ; clock out byte(s) for page 
026a			 
026a e1				pop hl 
026b 06 40			ld b, STORE_BLOCK_PHY 
026d			.bytewrite: 
026d			 
026d 7e				ld a,(hl) 
026e e5			    push hl 
026f c5				push bc 
0270 cd b9 00		    call spi_send_byte  
0273 c1				pop bc 
0274 e1				pop hl 
0275			 
0275			    ; end write with ce high 
0275 3a cf f9		       ld a,(spi_portbyte) 
0278 cd 84 01			call spi_ce_high 
027b			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
027b d3 80		       out (storage_adata),a 
027d 32 cf f9		       ld (spi_portbyte), a 
0280			 
0280 23				inc hl 
0281 10 ea			djnz .bytewrite 
0283			 
0283				; pause for internal write cycle 
0283 3e 64			ld a, 100 
0285 cd 4b 0a			call aDelayInMS 
0288 c9			    ret 
0289			; returns byte in a 
0289			; address in hl  
0289			se_readbyte: 
0289 d5				push de 
028a c5				push bc 
028b			 
028b			    ;   ld c, a 
028b e5			        push hl 
028c			 
028c			    ; initi write mode 
028c			    ; 
028c			    ;CS low 
028c			 
028c 3a cf f9		       ld a,(spi_portbyte) 
028f cd 95 01			call spi_ce_low 
0292			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0292 d3 80		       out (storage_adata),a 
0294 32 cf f9		       ld (spi_portbyte), a 
0297			 
0297			    ;clock out wren instruction 
0297			 
0297 3e 03		    ld a, store_read_ins 
0299 cd b9 00		    call spi_send_byte  
029c			 
029c			 
029c			    ; clock out address (depending on address size) 
029c			     
029c e1			    pop hl 
029d 7c			    ld a,h    ; address out msb first 
029e cd b9 00		    call spi_send_byte  
02a1 7d			    ld a,l 
02a2 cd b9 00		    call spi_send_byte  
02a5			 
02a5			    ; clock in byte(s) for page 
02a5			 
02a5 cd da 00		    call spi_read_byte  
02a8 f5				push af 
02a9			 
02a9			    ; end write with ce high 
02a9 3a cf f9		       ld a,(spi_portbyte) 
02ac			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02ac cd 84 01			call spi_ce_high 
02af d3 80		       out (storage_adata),a 
02b1 32 cf f9		       ld (spi_portbyte), a 
02b4			 
02b4 f1				pop af 
02b5			 
02b5 c1				pop bc 
02b6 d1				pop de 
02b7			 
02b7 c9			    ret 
02b8			 
02b8			if DEBUG_STORESE 
02b8			 
02b8			storageput:  
02b8			 
02b8			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
02b8			 
02b8 21 a5 ef			ld hl,scratch+2 
02bb cd d1 10			call get_word_hl 
02be			 
02be				; stuff it here for the moment as it will be overwritten later anyway 
02be			 
02be 22 c6 f2			ld (os_cur_ptr),hl	 
02c1			 
02c1			 
02c1			; get pointer to start of string 
02c1			 
02c1 21 aa ef			ld hl, scratch+7 
02c4			 
02c4			; loop writing char of string to eeprom 
02c4			 
02c4 7e			.writestr:	ld a,(hl) 
02c5 fe 00				cp 0 
02c7 28 12				jr z, .wsdone		; done writing 
02c9 e5					push hl 
02ca 2a c6 f2				ld hl,(os_cur_ptr) 
02cd cd e7 01				call se_writebyte 
02d0			 
02d0 2a c6 f2				ld hl,(os_cur_ptr)	 ; save next eeprom address 
02d3 23					inc hl 
02d4 22 c6 f2				ld (os_cur_ptr),hl 
02d7			 
02d7					; restore string pointer and get next char 
02d7			 
02d7 e1					pop hl 
02d8 23					inc hl 
02d9 18 e9				jr .writestr 
02db			 
02db			 
02db			 
02db			.wsdone: 
02db			 
02db			 
02db			; when done load first page into a buffer  
02db			 
02db 21 00 80				ld hl,08000h		; start in ram 
02de 22 c6 f2				ld (os_cur_ptr),hl 
02e1 21 00 00				ld hl, 0		 ; start of page 
02e4 22 cb ef				ld (scratch+40),hl	; hang on to it 
02e7			 
02e7 06 80				ld b, 128		; actually get more then one page 
02e9 c5			.wsload:	push bc 
02ea 2a cb ef				ld hl,(scratch+40) 
02ed e5					push hl 
02ee cd 89 02				call se_readbyte 
02f1			 
02f1					; a now as the byte 
02f1			 
02f1 2a c6 f2				ld hl,(os_cur_ptr) 
02f4 77					ld (hl),a 
02f5					; inc next buffer area 
02f5 23					inc hl 
02f6 22 c6 f2				ld (os_cur_ptr),hl 
02f9			 
02f9					; get eeprom position, inc and save for next round 
02f9 e1					pop hl		 
02fa 23					inc hl 
02fb 22 cb ef				ld (scratch+40),hl 
02fe c1					pop bc 
02ff 10 e8				djnz .wsload 
0301			 
0301			; set 'd' pointer to start of buffer 
0301			 
0301 21 00 80				ld hl,08000h 
0304 22 c6 f2				ld (os_cur_ptr),hl 
0307			 
0307			 
0307 c9			ret 
0308			 
0308			 
0308 c9			storageread: ret 
0309			 
0309			 
0309			 
0309			 
0309			 
0309			 
0309			endif 
0309			 
0309			 
0309			 
# End of file firmware_seeprom.asm
0309			else  
0309			   ; create some stubs for the labels  
0309			se_readbyte: ret  
0309			se_writebyte: ret  
0309			storage_init: ret  
0309			  
0309			endif  
0309			  
0309			; use cf card for storage - throwing timeout errors. Hardware or software?????  
0309			;include "firmware_cf.asm"  
0309			  
0309			; load up high level storage hardward abstractions  
0309			include "firmware_storage.asm"  
0309			 
0309			; persisent storage hardware abstraction layer  
0309			 
0309			 
0309			 
0309			; Block 0 on storage is a config state 
0309			 
0309			 
0309			 
0309			; TODO add read phy block and write phy block functions 
0309			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
0309			 
0309			; Abstraction layer  
0309			 
0309			; Logocial block size is same size as physical size - using tape concept 
0309			 
0309			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
0309			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
0309			 
0309			 
0309			 
0309			; Filesystem layout (Logical layout) 
0309			; 
0309			; Block 0 - Bank config  
0309			; 
0309			;      Byte - 0 file id counter 
0309			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0309			;      Byte - 3-20 zero terminated bank label 
0309			; 
0309			; Block 1 > File storage 
0309			; 
0309			;      Byte 0 file id    - block 0 file details 
0309			;      Byte 1 block id - block 0 is file  
0309			;            Byte 2-15 - File name 
0309			; 
0309			;       - to end of block data 
0309			; 
0309			 
0309			 
0309			; Read Block 
0309			; ---------- 
0309			; 
0309			; With current bank 
0309			;  
0309			; Get block number to read 
0309			; Load physical blocks starting at start block into buffer 
0309			 
0309			; de points to buffer to use 
0309			; hl holds logical block number  
0309			 
0309			storage_read_block: 
0309			 
0309				; TODO bank selection 
0309			 
0309				; for each of the physical blocks read it into the buffer 
0309 06 40			ld b, STORE_BLOCK_PHY 
030b			 
030b				if DEBUG_STORESE 
030b d5					push de 
030c				endif 
030c				 
030c			.rl1:    
030c			 
030c				; read physical block at hl into de 
030c			        ; increment hl and de to next read position on exit 
030c			 
030c e5				push hl 
030d d5				push de	 
030e c5				push bc 
030f			;	if DEBUG_STORESE 
030f			;		push af 
030f			;		ld a, 'R' 
030f			;		ld (debug_mark),a 
030f			;		pop af 
030f			;		CALLMONITOR 
030f			;	endif 
030f cd 89 02			call se_readbyte 
0312			;	if DEBUG_STORESE 
0312			;		ld a,(spi_portbyte) 
0312			;		ld l, a 
0312			;		push af 
0312			;		ld a, '1' 
0312			;		ld (debug_mark),a 
0312			;		pop af 
0312			;		CALLMONITOR 
0312			;	endif 
0312 c1				pop bc 
0313 d1				pop de 
0314 e1				pop hl 
0315 12				ld (de),a 
0316 23				inc hl 
0317 13				inc de 
0318			 
0318			;	if DEBUG_STORESE 
0318			;		push af 
0318			;		ld a, 'r' 
0318			;		ld (debug_mark),a 
0318			;		pop af 
0318			;		CALLMONITOR 
0318			;	endif 
0318			 
0318 10 f2			djnz .rl1 
031a			 
031a				if DEBUG_STORESE 
031a					DMARK "SRB" 
031a f5				push af  
031b 3a 2f 03			ld a, (.dmark)  
031e 32 bd fb			ld (debug_mark),a  
0321 3a 30 03			ld a, (.dmark+1)  
0324 32 be fb			ld (debug_mark+1),a  
0327 3a 31 03			ld a, (.dmark+2)  
032a 32 bf fb			ld (debug_mark+2),a  
032d 18 03			jr .pastdmark  
032f ..			.dmark: db "SRB"  
0332 f1			.pastdmark: pop af  
0333			endm  
# End of macro DMARK
0333 d1					pop de 
0334			; 
0334			;		push af 
0334			;		ld a, 'R' 
0334			;		ld (debug_mark),a 
0334			;		pop af 
0334					CALLMONITOR 
0334 cd 2d 17			call break_point_state  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338				 
0338			 
0338			; File Size 
0338			; --------- 
0338			; 
0338			;   hl file id 
0338			; 
0338			;  returns in hl the number of blocks 
0338			 
0338			storage_file_size: 
0338 5d				ld e, l 
0339 16 00			ld d, 0 
033b 21 40 00			ld hl, STORE_BLOCK_PHY 
033e					if DEBUG_FORTH_WORDS 
033e						DMARK "SIZ" 
033e f5				push af  
033f 3a 53 03			ld a, (.dmark)  
0342 32 bd fb			ld (debug_mark),a  
0345 3a 54 03			ld a, (.dmark+1)  
0348 32 be fb			ld (debug_mark+1),a  
034b 3a 55 03			ld a, (.dmark+2)  
034e 32 bf fb			ld (debug_mark+2),a  
0351 18 03			jr .pastdmark  
0353 ..			.dmark: db "SIZ"  
0356 f1			.pastdmark: pop af  
0357			endm  
# End of macro DMARK
0357						CALLMONITOR 
0357 cd 2d 17			call break_point_state  
035a				endm  
# End of macro CALLMONITOR
035a					endif 
035a cd 2e 06			call storage_findnextid 
035d			 
035d cd 43 0d			call ishlzero 
0360			;	ld a, l 
0360			;	add h 
0360			;	cp 0 
0360 c8				ret z			; block not found so EOF 
0361			 
0361 11 e8 f9			ld de, store_page 
0364 cd 09 03			call storage_read_block 
0367			 
0367 3a ea f9			ld a, (store_page+2)	 ; get extent count 
036a 6f				ld l, a 
036b 26 00			ld h, 0 
036d c9			 	ret 
036e			 
036e			 
036e			; Write Block 
036e			; ----------- 
036e			; 
036e			; With current bank 
036e			;  
036e			; Get block number to write 
036e			; Write physical blocks starting at start block from buffer 
036e			  
036e			storage_write_block: 
036e				; TODO bank selection 
036e			 
036e				; for each of the physical blocks read it into the buffer 
036e 06 40			ld b, STORE_BLOCK_PHY 
0370			 
0370				if DEBUG_STORESE 
0370					DMARK "SWB" 
0370 f5				push af  
0371 3a 85 03			ld a, (.dmark)  
0374 32 bd fb			ld (debug_mark),a  
0377 3a 86 03			ld a, (.dmark+1)  
037a 32 be fb			ld (debug_mark+1),a  
037d 3a 87 03			ld a, (.dmark+2)  
0380 32 bf fb			ld (debug_mark+2),a  
0383 18 03			jr .pastdmark  
0385 ..			.dmark: db "SWB"  
0388 f1			.pastdmark: pop af  
0389			endm  
# End of macro DMARK
0389			 
0389					;push af 
0389					;ld a, 'W' 
0389					;ld (debug_mark),a 
0389					;pop af 
0389					CALLMONITOR 
0389 cd 2d 17			call break_point_state  
038c				endm  
# End of macro CALLMONITOR
038c				endif 
038c			 
038c			; might not be working 
038c			;	call se_writepage 
038c			 
038c			;	ret 
038c			; 
038c			 
038c			 
038c			 
038c			.wl1:    
038c			 
038c				; read physical block at hl into de 
038c			        ; increment hl and de to next read position on exit 
038c			 
038c e5				push hl 
038d d5				push de	 
038e c5				push bc 
038f 1a				ld a,(de) 
0390				;if DEBUG_STORESE 
0390			;		push af 
0390			;		ld a, 'W' 
0390			;		ld (debug_mark),a 
0390			;		pop af 
0390			;		CALLMONITOR 
0390			;	endif 
0390 cd e7 01			call se_writebyte 
0393			;	call delay250ms 
0393 00				nop 
0394 00				nop 
0395 00				nop 
0396			;	if DEBUG_STORESE 
0396			;		push af 
0396			;		ld a, 'w' 
0396			;		ld (debug_mark),a 
0396			;		pop af 
0396			;		CALLMONITOR 
0396			;	endif 
0396 c1				pop bc 
0397 d1				pop de 
0398 e1				pop hl 
0399 23				inc hl 
039a 13				inc de 
039b			 
039b			 
039b 10 ef			djnz .wl1 
039d			 
039d				if DEBUG_STORESE 
039d					DMARK "SW2" 
039d f5				push af  
039e 3a b2 03			ld a, (.dmark)  
03a1 32 bd fb			ld (debug_mark),a  
03a4 3a b3 03			ld a, (.dmark+1)  
03a7 32 be fb			ld (debug_mark+1),a  
03aa 3a b4 03			ld a, (.dmark+2)  
03ad 32 bf fb			ld (debug_mark+2),a  
03b0 18 03			jr .pastdmark  
03b2 ..			.dmark: db "SW2"  
03b5 f1			.pastdmark: pop af  
03b6			endm  
# End of macro DMARK
03b6			 
03b6					;push af 
03b6					;ld a, 'W' 
03b6					;ld (debug_mark),a 
03b6					;pop af 
03b6					CALLMONITOR 
03b6 cd 2d 17			call break_point_state  
03b9				endm  
# End of macro CALLMONITOR
03b9				endif 
03b9 c9				ret	 
03ba			 
03ba			; Init bank 
03ba			; --------- 
03ba			; 
03ba			; With current bank 
03ba			; 
03ba			; Setup block 0 config 
03ba			;     Set 0 file id counter 
03ba			;     Set formatted byte pattern 
03ba			;     Zero out bank label 
03ba			;      
03ba			; For every logical block write 0-1 byte as null 
03ba			 
03ba			storage_get_block_0: 
03ba			 
03ba				; TODO check presence 
03ba			 
03ba				; get block 0 config 
03ba			 
03ba 21 00 00			ld hl, 0 
03bd 11 e8 f9			ld de, store_page 
03c0 cd 09 03			call storage_read_block 
03c3			 
03c3				if DEBUG_STORESE 
03c3					DMARK "SB0" 
03c3 f5				push af  
03c4 3a d8 03			ld a, (.dmark)  
03c7 32 bd fb			ld (debug_mark),a  
03ca 3a d9 03			ld a, (.dmark+1)  
03cd 32 be fb			ld (debug_mark+1),a  
03d0 3a da 03			ld a, (.dmark+2)  
03d3 32 bf fb			ld (debug_mark+2),a  
03d6 18 03			jr .pastdmark  
03d8 ..			.dmark: db "SB0"  
03db f1			.pastdmark: pop af  
03dc			endm  
# End of macro DMARK
03dc 11 e8 f9				ld de, store_page 
03df			;		push af 
03df			;		ld a, 'i' 
03df			;		ld (debug_mark),a 
03df			;		pop af 
03df					CALLMONITOR 
03df cd 2d 17			call break_point_state  
03e2				endm  
# End of macro CALLMONITOR
03e2				endif 
03e2			 
03e2				; is this area formatted? 
03e2			 
03e2			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03e2 2a e9 f9			ld hl, (store_page+1) 
03e5 3e 80			ld a,0x80 
03e7 bd				cp l 
03e8 20 22			jr nz, .ininotformatted 
03ea				; do a double check 
03ea 3e 27			ld a, 0x27 
03ec bc				cp h 
03ed 20 1d			jr nz, .ininotformatted 
03ef			 
03ef				; formatted then 
03ef			 
03ef				if DEBUG_STORESE 
03ef					DMARK "SB1" 
03ef f5				push af  
03f0 3a 04 04			ld a, (.dmark)  
03f3 32 bd fb			ld (debug_mark),a  
03f6 3a 05 04			ld a, (.dmark+1)  
03f9 32 be fb			ld (debug_mark+1),a  
03fc 3a 06 04			ld a, (.dmark+2)  
03ff 32 bf fb			ld (debug_mark+2),a  
0402 18 03			jr .pastdmark  
0404 ..			.dmark: db "SB1"  
0407 f1			.pastdmark: pop af  
0408			endm  
# End of macro DMARK
0408					;push af 
0408					;ld a, 'I' 
0408					;ld (debug_mark),a 
0408					;pop af 
0408					CALLMONITOR 
0408 cd 2d 17			call break_point_state  
040b				endm  
# End of macro CALLMONITOR
040b				endif 
040b c9				ret 
040c			 
040c			.ininotformatted: 
040c				; bank not formatted so poke various bits to make sure 
040c			 
040c				if DEBUG_STORESE 
040c					DMARK "SB2" 
040c f5				push af  
040d 3a 21 04			ld a, (.dmark)  
0410 32 bd fb			ld (debug_mark),a  
0413 3a 22 04			ld a, (.dmark+1)  
0416 32 be fb			ld (debug_mark+1),a  
0419 3a 23 04			ld a, (.dmark+2)  
041c 32 bf fb			ld (debug_mark+2),a  
041f 18 03			jr .pastdmark  
0421 ..			.dmark: db "SB2"  
0424 f1			.pastdmark: pop af  
0425			endm  
# End of macro DMARK
0425					;push af 
0425					;ld a, 'f' 
0425					;ld (debug_mark),a 
0425					;pop af 
0425					CALLMONITOR 
0425 cd 2d 17			call break_point_state  
0428				endm  
# End of macro CALLMONITOR
0428				endif 
0428			 
0428 cd 29 0a			call storage_clear_page 
042b			 
042b 21 e8 f9			ld hl, store_page 
042e 3e 00			ld a, 0 
0430				 
0430 77				ld (hl),a   ; reset file counter 
0431			 
0431 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0434 22 e9 f9		 	ld (store_page+1), hl	 
0437			 
0437				; set default label 
0437			 
0437 21 d3 04			ld hl, .defaultbanklabl 
043a 11 eb f9		 	ld de, store_page+3 
043d 01 0f 00			ld bc, 15 
0440 ed b0			ldir 
0442			 
0442				; Append the current bank id 
0442 21 f4 f9			ld hl, store_page+3+9 
0445 3a cd f9			ld a, (spi_device_id) 
0448 77				ld (hl), a 
0449			 
0449				; save default page 0 
0449			 
0449 21 00 00			ld hl, 0 
044c 11 e8 f9			ld de, store_page 
044f				if DEBUG_STORESE 
044f					DMARK "SB3" 
044f f5				push af  
0450 3a 64 04			ld a, (.dmark)  
0453 32 bd fb			ld (debug_mark),a  
0456 3a 65 04			ld a, (.dmark+1)  
0459 32 be fb			ld (debug_mark+1),a  
045c 3a 66 04			ld a, (.dmark+2)  
045f 32 bf fb			ld (debug_mark+2),a  
0462 18 03			jr .pastdmark  
0464 ..			.dmark: db "SB3"  
0467 f1			.pastdmark: pop af  
0468			endm  
# End of macro DMARK
0468			;		push af 
0468			;		ld a, 'F' 
0468			;		ld (debug_mark),a 
0468			;		pop af 
0468					CALLMONITOR 
0468 cd 2d 17			call break_point_state  
046b				endm  
# End of macro CALLMONITOR
046b				endif 
046b cd 6e 03			call storage_write_block 
046e				if DEBUG_STORESE 
046e					DMARK "SB4" 
046e f5				push af  
046f 3a 83 04			ld a, (.dmark)  
0472 32 bd fb			ld (debug_mark),a  
0475 3a 84 04			ld a, (.dmark+1)  
0478 32 be fb			ld (debug_mark+1),a  
047b 3a 85 04			ld a, (.dmark+2)  
047e 32 bf fb			ld (debug_mark+2),a  
0481 18 03			jr .pastdmark  
0483 ..			.dmark: db "SB4"  
0486 f1			.pastdmark: pop af  
0487			endm  
# End of macro DMARK
0487			;		push af 
0487			;		ld a, '>' 
0487			;		ld (debug_mark),a 
0487			;		pop af 
0487					CALLMONITOR 
0487 cd 2d 17			call break_point_state  
048a				endm  
# End of macro CALLMONITOR
048a				endif 
048a			 
048a 00				nop 
048b 00				nop 
048c 00				nop 
048d			 
048d				; now set 0 in every page to mark as a free block 
048d			 
048d 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
048f 21 40 00			ld hl, STORE_BLOCK_PHY 
0492			 
0492 3e 00		.setmark1:   	ld a,0 
0494 e5					push hl 
0495 c5					push bc 
0496 cd e7 01				call se_writebyte 
0499 3e 0a			ld a, 10 
049b cd 4b 0a			call aDelayInMS 
049e 23				inc hl 
049f cd e7 01				call se_writebyte 
04a2 3e 0a			ld a, 10 
04a4 cd 4b 0a			call aDelayInMS 
04a7 2b				dec hl 
04a8 c1					pop bc 
04a9 e1					pop hl 
04aa 3e 40				ld a, STORE_BLOCK_PHY 
04ac cd 1a 0d				call addatohl 
04af 10 e1				djnz .setmark1 
04b1			 
04b1 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
04b3 3e 00		.setmark2:   	ld a,0 
04b5 e5					push hl 
04b6 c5					push bc 
04b7 cd e7 01				call se_writebyte 
04ba 3e 0a			ld a, 10 
04bc cd 4b 0a			call aDelayInMS 
04bf 23				inc hl 
04c0 cd e7 01				call se_writebyte 
04c3 3e 0a			ld a, 10 
04c5 cd 4b 0a			call aDelayInMS 
04c8 2b				dec hl 
04c9 c1					pop bc 
04ca e1					pop hl 
04cb 3e 40				ld a, STORE_BLOCK_PHY 
04cd cd 1a 0d				call addatohl 
04d0 10 e1				djnz .setmark2 
04d2			 
04d2					 
04d2			 
04d2			 
04d2 c9				ret 
04d3			 
04d3			 
04d3			 
04d3			 
04d3 .. 00		.defaultbanklabl:   db "BankLabel_",0 
04de			 
04de			 
04de			 
04de			; Label Bank 
04de			; ---------- 
04de			; 
04de			; With current bank 
04de			; Read block 0 
04de			; Set label 
04de			; Write block 0 
04de			 
04de			; label str pointer in hl 
04de			 
04de			storage_label:     
04de			 
04de				if DEBUG_STORESE 
04de					DMARK "LBL" 
04de f5				push af  
04df 3a f3 04			ld a, (.dmark)  
04e2 32 bd fb			ld (debug_mark),a  
04e5 3a f4 04			ld a, (.dmark+1)  
04e8 32 be fb			ld (debug_mark+1),a  
04eb 3a f5 04			ld a, (.dmark+2)  
04ee 32 bf fb			ld (debug_mark+2),a  
04f1 18 03			jr .pastdmark  
04f3 ..			.dmark: db "LBL"  
04f6 f1			.pastdmark: pop af  
04f7			endm  
# End of macro DMARK
04f7					CALLMONITOR 
04f7 cd 2d 17			call break_point_state  
04fa				endm  
# End of macro CALLMONITOR
04fa				endif 
04fa			 
04fa e5				push hl 
04fb			 
04fb cd ba 03			call storage_get_block_0 
04fe			 
04fe				; set default label 
04fe			 
04fe e1				pop hl 
04ff			 
04ff 11 eb f9		 	ld de, store_page+3 
0502 01 0f 00			ld bc, 15 
0505				if DEBUG_STORESE 
0505					DMARK "LB3" 
0505 f5				push af  
0506 3a 1a 05			ld a, (.dmark)  
0509 32 bd fb			ld (debug_mark),a  
050c 3a 1b 05			ld a, (.dmark+1)  
050f 32 be fb			ld (debug_mark+1),a  
0512 3a 1c 05			ld a, (.dmark+2)  
0515 32 bf fb			ld (debug_mark+2),a  
0518 18 03			jr .pastdmark  
051a ..			.dmark: db "LB3"  
051d f1			.pastdmark: pop af  
051e			endm  
# End of macro DMARK
051e					CALLMONITOR 
051e cd 2d 17			call break_point_state  
0521				endm  
# End of macro CALLMONITOR
0521				endif 
0521 ed b0			ldir 
0523				; save default page 0 
0523			 
0523 21 00 00			ld hl, 0 
0526 11 e8 f9			ld de, store_page 
0529				if DEBUG_STORESE 
0529					DMARK "LBW" 
0529 f5				push af  
052a 3a 3e 05			ld a, (.dmark)  
052d 32 bd fb			ld (debug_mark),a  
0530 3a 3f 05			ld a, (.dmark+1)  
0533 32 be fb			ld (debug_mark+1),a  
0536 3a 40 05			ld a, (.dmark+2)  
0539 32 bf fb			ld (debug_mark+2),a  
053c 18 03			jr .pastdmark  
053e ..			.dmark: db "LBW"  
0541 f1			.pastdmark: pop af  
0542			endm  
# End of macro DMARK
0542					CALLMONITOR 
0542 cd 2d 17			call break_point_state  
0545				endm  
# End of macro CALLMONITOR
0545				endif 
0545 cd 6e 03			call storage_write_block 
0548			 
0548 c9				ret 
0549			 
0549			 
0549			 
0549			; Read Block 0 - Config 
0549			; --------------------- 
0549			; 
0549			; With current bank 
0549			; Call presence test 
0549			;    If not present format/init bank  
0549			; Read block 0  
0549			;  
0549			 
0549			 
0549			; Dir 
0549			; --- 
0549			; 
0549			; With current bank 
0549			; Load Block 0 Config 
0549			; Get max file id number 
0549			; For each logical block 
0549			;    Read block read byte 2 
0549			;      if first block of file 
0549			;         Display file name 
0549			;         Display type flags for file 
0549			;        
0549			 
0549			; moving to words as this requires stack control 
0549			 
0549			 
0549			; Delete File 
0549			; ----------- 
0549			; 
0549			; With current bank 
0549			; 
0549			; Load Block 0 Config 
0549			; Get max file id number 
0549			; For each logical block 
0549			;    Read block file id 
0549			;      If first block of file and dont have file id 
0549			;         if file to delete 
0549			;         Save file id 
0549			;         Null file id 
0549			;         Write this block back 
0549			;      If file id is one saved 
0549			;         Null file id 
0549			;         Write this block back 
0549			 
0549			storage_erase: 
0549			 
0549				; hl contains the file id 
0549			 
0549 5d				ld e, l 
054a 16 00			ld d, 0 
054c 21 40 00			ld hl, STORE_BLOCK_PHY 
054f					if DEBUG_FORTH_WORDS 
054f						DMARK "ERA" 
054f f5				push af  
0550 3a 64 05			ld a, (.dmark)  
0553 32 bd fb			ld (debug_mark),a  
0556 3a 65 05			ld a, (.dmark+1)  
0559 32 be fb			ld (debug_mark+1),a  
055c 3a 66 05			ld a, (.dmark+2)  
055f 32 bf fb			ld (debug_mark+2),a  
0562 18 03			jr .pastdmark  
0564 ..			.dmark: db "ERA"  
0567 f1			.pastdmark: pop af  
0568			endm  
# End of macro DMARK
0568						CALLMONITOR 
0568 cd 2d 17			call break_point_state  
056b				endm  
# End of macro CALLMONITOR
056b					endif 
056b cd 2e 06			call storage_findnextid 
056e cd 43 0d			call ishlzero 
0571 c8				ret z 
0572			 
0572 e5				push hl 
0573			 
0573				; TODO check file not found 
0573			 
0573 11 e8 f9			ld de, store_page 
0576 cd 09 03			call storage_read_block 
0579			 
0579					if DEBUG_FORTH_WORDS 
0579						DMARK "ER1" 
0579 f5				push af  
057a 3a 8e 05			ld a, (.dmark)  
057d 32 bd fb			ld (debug_mark),a  
0580 3a 8f 05			ld a, (.dmark+1)  
0583 32 be fb			ld (debug_mark+1),a  
0586 3a 90 05			ld a, (.dmark+2)  
0589 32 bf fb			ld (debug_mark+2),a  
058c 18 03			jr .pastdmark  
058e ..			.dmark: db "ER1"  
0591 f1			.pastdmark: pop af  
0592			endm  
# End of macro DMARK
0592						CALLMONITOR 
0592 cd 2d 17			call break_point_state  
0595				endm  
# End of macro CALLMONITOR
0595					endif 
0595 3a e8 f9			ld a, (store_page)	; get file id 
0598 32 e1 f9			ld (store_tmpid), a 
059b			 
059b 3a ea f9			ld a, (store_page+2)    ; get count of extends 
059e 32 e0 f9			ld (store_tmpext), a 
05a1			 
05a1				; wipe file header 
05a1			 
05a1 e1				pop hl 
05a2 3e 00			ld a, 0 
05a4 32 e8 f9			ld (store_page), a 
05a7 32 e9 f9			ld (store_page+1),a 
05aa 11 e8 f9			ld de, store_page 
05ad					if DEBUG_FORTH_WORDS 
05ad						DMARK "ER2" 
05ad f5				push af  
05ae 3a c2 05			ld a, (.dmark)  
05b1 32 bd fb			ld (debug_mark),a  
05b4 3a c3 05			ld a, (.dmark+1)  
05b7 32 be fb			ld (debug_mark+1),a  
05ba 3a c4 05			ld a, (.dmark+2)  
05bd 32 bf fb			ld (debug_mark+2),a  
05c0 18 03			jr .pastdmark  
05c2 ..			.dmark: db "ER2"  
05c5 f1			.pastdmark: pop af  
05c6			endm  
# End of macro DMARK
05c6						CALLMONITOR 
05c6 cd 2d 17			call break_point_state  
05c9				endm  
# End of macro CALLMONITOR
05c9					endif 
05c9 cd 6e 03			call storage_write_block 
05cc			 
05cc			 
05cc				; wipe file extents 
05cc			 
05cc 3a e0 f9			ld a, (store_tmpext) 
05cf 47				ld b, a 
05d0			 
05d0			.eraext:	  
05d0 c5				push bc 
05d1			 
05d1 21 40 00			ld hl, STORE_BLOCK_PHY 
05d4 3a e1 f9			ld a,(store_tmpid) 
05d7 5f				ld e, a 
05d8 50				ld d, b	 
05d9					if DEBUG_FORTH_WORDS 
05d9						DMARK "ER3" 
05d9 f5				push af  
05da 3a ee 05			ld a, (.dmark)  
05dd 32 bd fb			ld (debug_mark),a  
05e0 3a ef 05			ld a, (.dmark+1)  
05e3 32 be fb			ld (debug_mark+1),a  
05e6 3a f0 05			ld a, (.dmark+2)  
05e9 32 bf fb			ld (debug_mark+2),a  
05ec 18 03			jr .pastdmark  
05ee ..			.dmark: db "ER3"  
05f1 f1			.pastdmark: pop af  
05f2			endm  
# End of macro DMARK
05f2						CALLMONITOR 
05f2 cd 2d 17			call break_point_state  
05f5				endm  
# End of macro CALLMONITOR
05f5					endif 
05f5 cd 2e 06			call storage_findnextid 
05f8			 
05f8 e5				push hl 
05f9 11 e8 f9			ld de, store_page 
05fc cd 09 03			call storage_read_block 
05ff			 
05ff				; free block	 
05ff			 
05ff 3e 00			ld a, 0 
0601 32 e8 f9			ld (store_page), a 
0604 32 e9 f9			ld (store_page+1),a 
0607 11 e8 f9			ld de, store_page 
060a e1				pop hl 
060b					if DEBUG_FORTH_WORDS 
060b						DMARK "ER4" 
060b f5				push af  
060c 3a 20 06			ld a, (.dmark)  
060f 32 bd fb			ld (debug_mark),a  
0612 3a 21 06			ld a, (.dmark+1)  
0615 32 be fb			ld (debug_mark+1),a  
0618 3a 22 06			ld a, (.dmark+2)  
061b 32 bf fb			ld (debug_mark+2),a  
061e 18 03			jr .pastdmark  
0620 ..			.dmark: db "ER4"  
0623 f1			.pastdmark: pop af  
0624			endm  
# End of macro DMARK
0624						CALLMONITOR 
0624 cd 2d 17			call break_point_state  
0627				endm  
# End of macro CALLMONITOR
0627					endif 
0627 cd 6e 03			call storage_write_block 
062a			 
062a c1				pop bc 
062b 10 a3			djnz .eraext 
062d			 
062d c9				ret 
062e			 
062e			 
062e			; Find Free Block 
062e			; --------------- 
062e			; 
062e			; With current bank 
062e			;  
062e			; From given starting logical block 
062e			;    Read block  
062e			;    If no file id 
062e			;         Return block id 
062e			 
062e			 
062e			; hl starting page number 
062e			; hl contains free page number or zero if no pages free 
062e			; e contains the file id to locate 
062e			; d contains the block number 
062e			 
062e			; TODO change to find file id and use zero for free block 
062e			 
062e			storage_findnextid: 
062e			 
062e				; now locate first 0 page to mark as a free block 
062e			 
062e 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0630			;	ld hl, STORE_BLOCK_PHY 
0630			 
0630					if DEBUG_FORTH_WORDS 
0630					DMARK "FNI" 
0630 f5				push af  
0631 3a 45 06			ld a, (.dmark)  
0634 32 bd fb			ld (debug_mark),a  
0637 3a 46 06			ld a, (.dmark+1)  
063a 32 be fb			ld (debug_mark+1),a  
063d 3a 47 06			ld a, (.dmark+2)  
0640 32 bf fb			ld (debug_mark+2),a  
0643 18 03			jr .pastdmark  
0645 ..			.dmark: db "FNI"  
0648 f1			.pastdmark: pop af  
0649			endm  
# End of macro DMARK
0649						CALLMONITOR 
0649 cd 2d 17			call break_point_state  
064c				endm  
# End of macro CALLMONITOR
064c					endif 
064c			.ff1:   	 
064c e5					push hl 
064d c5					push bc 
064e d5					push de 
064f cd 89 02				call se_readbyte 
0652 5f					ld e,a 
0653 23					inc hl 
0654 cd 89 02				call se_readbyte 
0657 57					ld d, a 
0658 e1					pop hl 
0659 e5					push hl 
065a cd 38 0d				call cmp16 
065d 28 49				jr z, .fffound 
065f			 
065f d1					pop de 
0660 c1					pop bc 
0661 e1					pop hl 
0662			 
0662					; is found? 
0662					;cp e 
0662					;ret z 
0662			 
0662 3e 40				ld a, STORE_BLOCK_PHY 
0664 cd 1a 0d				call addatohl 
0667 10 e3				djnz .ff1 
0669			 
0669 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
066b			.ff2:   	 
066b			 
066b e5					push hl 
066c c5					push bc 
066d d5					push de 
066e cd 89 02				call se_readbyte 
0671 5f					ld e,a 
0672 23					inc hl 
0673 cd 89 02				call se_readbyte 
0676 57					ld d, a 
0677			 
0677 e1					pop hl 
0678 e5					push hl 
0679 cd 38 0d				call cmp16 
067c 28 2a				jr z, .fffound 
067e			 
067e d1					pop de 
067f c1					pop bc 
0680 e1					pop hl 
0681					; is found? 
0681					;cp e 
0681					;ret z 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd 1a 0d				call addatohl 
0686 10 e3				djnz .ff2 
0688			 
0688			 
0688					if DEBUG_FORTH_WORDS 
0688					DMARK "FN-" 
0688 f5				push af  
0689 3a 9d 06			ld a, (.dmark)  
068c 32 bd fb			ld (debug_mark),a  
068f 3a 9e 06			ld a, (.dmark+1)  
0692 32 be fb			ld (debug_mark+1),a  
0695 3a 9f 06			ld a, (.dmark+2)  
0698 32 bf fb			ld (debug_mark+2),a  
069b 18 03			jr .pastdmark  
069d ..			.dmark: db "FN-"  
06a0 f1			.pastdmark: pop af  
06a1			endm  
# End of macro DMARK
06a1					;	push af 
06a1					;	ld a, 'n' 
06a1					;	ld (debug_mark),a 
06a1					;	pop af 
06a1						CALLMONITOR 
06a1 cd 2d 17			call break_point_state  
06a4				endm  
# End of macro CALLMONITOR
06a4					endif 
06a4				; no free marks! 
06a4 21 00 00				ld hl, 0 
06a7 c9				ret 
06a8			.fffound: 
06a8				 
06a8			 
06a8 d1					pop de 
06a9 c1					pop bc 
06aa e1					pop hl 
06ab					if DEBUG_FORTH_WORDS 
06ab					DMARK "FNF" 
06ab f5				push af  
06ac 3a c0 06			ld a, (.dmark)  
06af 32 bd fb			ld (debug_mark),a  
06b2 3a c1 06			ld a, (.dmark+1)  
06b5 32 be fb			ld (debug_mark+1),a  
06b8 3a c2 06			ld a, (.dmark+2)  
06bb 32 bf fb			ld (debug_mark+2),a  
06be 18 03			jr .pastdmark  
06c0 ..			.dmark: db "FNF"  
06c3 f1			.pastdmark: pop af  
06c4			endm  
# End of macro DMARK
06c4					;	push af 
06c4					;	ld a, 'n' 
06c4					;	ld (debug_mark),a 
06c4					;	pop af 
06c4						CALLMONITOR 
06c4 cd 2d 17			call break_point_state  
06c7				endm  
# End of macro CALLMONITOR
06c7					endif 
06c7 c9				ret 
06c8			 
06c8			 
06c8			 
06c8			; Free Space 
06c8			; ---------- 
06c8			; 
06c8			; With current bank 
06c8			; 
06c8			; Set block count to zero 
06c8			; Starting with first logical block 
06c8			;      Find free block  
06c8			;      If block id given, increment block count 
06c8			; 
06c8			;  
06c8			 
06c8			 
06c8			; hl contains count of free blocks 
06c8			 
06c8			storage_freeblocks: 
06c8			 
06c8				; now locate first 0 page to mark as a free block 
06c8			 
06c8 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
06ca 21 40 00			ld hl, STORE_BLOCK_PHY 
06cd 11 00 00			ld de, 0 
06d0			 
06d0			.fb1:   	 
06d0 e5					push hl 
06d1 c5					push bc 
06d2 d5					push de 
06d3 cd 89 02				call se_readbyte 
06d6 d1					pop de 
06d7 c1					pop bc 
06d8 e1					pop hl 
06d9			 
06d9					; is free? 
06d9 fe 00				cp 0 
06db 20 01				jr nz, .ff1cont 
06dd 13					inc de 
06de			 
06de			.ff1cont: 
06de			 
06de			 
06de 3e 40				ld a, STORE_BLOCK_PHY 
06e0 cd 1a 0d				call addatohl 
06e3 10 eb				djnz .fb1 
06e5			 
06e5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
06e7			.fb2:   	 
06e7 e5					push hl 
06e8 c5					push bc 
06e9 d5					push de 
06ea cd 89 02				call se_readbyte 
06ed d1					pop de 
06ee c1					pop bc 
06ef e1					pop hl 
06f0			 
06f0					; is free? 
06f0 fe 00				cp 0 
06f2 20 01				jr nz, .ff2cont 
06f4 13					inc de 
06f5			 
06f5			.ff2cont: 
06f5			 
06f5 3e 40				ld a, STORE_BLOCK_PHY 
06f7 cd 1a 0d				call addatohl 
06fa 10 eb				djnz .fb2 
06fc			 
06fc eb				ex de, hl 
06fd c9				ret 
06fe			 
06fe			; Get File ID 
06fe			; ----------- 
06fe			; 
06fe			; With current bank 
06fe			;  
06fe			; Load Block 0 Config 
06fe			; Get max file id number 
06fe			; For each logical block 
06fe			;    Read block file id 
06fe			;      If first block of file and dont have file id 
06fe			;         if file get id and exit 
06fe			 
06fe			 
06fe			 
06fe			 
06fe			; Create File 
06fe			; ----------- 
06fe			; 
06fe			; With current bank  
06fe			; Load Block 0 Config 
06fe			; Get max file id number 
06fe			; Increment file id number 
06fe			; Save Config 
06fe			; Find free block 
06fe			; Set buffer with file name and file id 
06fe			; Write buffer to free block  
06fe			 
06fe			 
06fe			; hl point to file name 
06fe			; hl returns file id 
06fe			 
06fe			; file format: 
06fe			; byte 0 - file id 
06fe			; byte 1 - extent number 
06fe			; byte 2-> data 
06fe			 
06fe			; format for extent number 0: 
06fe			; 
06fe			; byte 0 - file id 
06fe			; byte 1 - extent 0 
06fe			; byte 2 - extent count 
06fe			; byte 3 -> file name and meta data 
06fe			 
06fe			 
06fe			storage_create: 
06fe				if DEBUG_STORESE 
06fe					DMARK "SCR" 
06fe f5				push af  
06ff 3a 13 07			ld a, (.dmark)  
0702 32 bd fb			ld (debug_mark),a  
0705 3a 14 07			ld a, (.dmark+1)  
0708 32 be fb			ld (debug_mark+1),a  
070b 3a 15 07			ld a, (.dmark+2)  
070e 32 bf fb			ld (debug_mark+2),a  
0711 18 03			jr .pastdmark  
0713 ..			.dmark: db "SCR"  
0716 f1			.pastdmark: pop af  
0717			endm  
# End of macro DMARK
0717					CALLMONITOR 
0717 cd 2d 17			call break_point_state  
071a				endm  
# End of macro CALLMONITOR
071a				endif 
071a			 
071a e5				push hl		; save file name pointer 
071b			 
071b cd ba 03			call storage_get_block_0 
071e			 
071e 3a e8 f9			ld a,(store_page)	; get current file id 
0721 3c				inc a 
0722 32 e8 f9			ld (store_page),a 
0725				 
0725 32 e1 f9			ld (store_tmpid),a			; save id 
0728			 
0728 21 00 00			ld hl, 0 
072b 11 e8 f9			ld de, store_page 
072e				if DEBUG_STORESE 
072e					DMARK "SCw" 
072e f5				push af  
072f 3a 43 07			ld a, (.dmark)  
0732 32 bd fb			ld (debug_mark),a  
0735 3a 44 07			ld a, (.dmark+1)  
0738 32 be fb			ld (debug_mark+1),a  
073b 3a 45 07			ld a, (.dmark+2)  
073e 32 bf fb			ld (debug_mark+2),a  
0741 18 03			jr .pastdmark  
0743 ..			.dmark: db "SCw"  
0746 f1			.pastdmark: pop af  
0747			endm  
# End of macro DMARK
0747					CALLMONITOR 
0747 cd 2d 17			call break_point_state  
074a				endm  
# End of macro CALLMONITOR
074a				endif 
074a cd 6e 03			call storage_write_block	 ; save update 
074d			 
074d				if DEBUG_STORESE 
074d 11 e8 f9				ld de, store_page 
0750					DMARK "SCC" 
0750 f5				push af  
0751 3a 65 07			ld a, (.dmark)  
0754 32 bd fb			ld (debug_mark),a  
0757 3a 66 07			ld a, (.dmark+1)  
075a 32 be fb			ld (debug_mark+1),a  
075d 3a 67 07			ld a, (.dmark+2)  
0760 32 bf fb			ld (debug_mark+2),a  
0763 18 03			jr .pastdmark  
0765 ..			.dmark: db "SCC"  
0768 f1			.pastdmark: pop af  
0769			endm  
# End of macro DMARK
0769					CALLMONITOR 
0769 cd 2d 17			call break_point_state  
076c				endm  
# End of macro CALLMONITOR
076c				endif 
076c				;  
076c				 
076c 21 40 00			ld hl, STORE_BLOCK_PHY 
076f 11 00 00			ld de, 0 
0772 cd 2e 06			call storage_findnextid 
0775			 
0775 22 d2 f9			ld (store_tmppageid), hl    ; save page to use  
0778			 
0778				; TODO detect 0 = no spare blocks 
0778			 
0778				; hl now contains the free page to use for the file header page 
0778			 
0778				if DEBUG_STORESE 
0778				DMARK "SCF" 
0778 f5				push af  
0779 3a 8d 07			ld a, (.dmark)  
077c 32 bd fb			ld (debug_mark),a  
077f 3a 8e 07			ld a, (.dmark+1)  
0782 32 be fb			ld (debug_mark+1),a  
0785 3a 8f 07			ld a, (.dmark+2)  
0788 32 bf fb			ld (debug_mark+2),a  
078b 18 03			jr .pastdmark  
078d ..			.dmark: db "SCF"  
0790 f1			.pastdmark: pop af  
0791			endm  
# End of macro DMARK
0791					CALLMONITOR 
0791 cd 2d 17			call break_point_state  
0794				endm  
# End of macro CALLMONITOR
0794				endif 
0794			 
0794 22 d2 f9			ld (store_tmppageid), hl 
0797				 
0797 3a e1 f9			ld a,(store_tmpid)    ; get file id 
079a			;	ld a, (store_filecache)			; save to cache 
079a			 
079a 32 e8 f9			ld (store_page),a    ; set page id 
079d 3e 00			ld a, 0			 ; extent 0 is file header 
079f 32 e9 f9			ld (store_page+1), a   ; set file extent 
07a2			 
07a2 32 ea f9			ld (store_page+2), a   ; extent count for the file 
07a5			 
07a5			;	inc hl 		; init block 0 of file 
07a5			;	inc hl   		; skip file and extent id 
07a5			 ;       ld a, 0 
07a5			;	ld (hl),a 
07a5			;	ld a, (store_filecache+1)  	; save to cache 
07a5			 
07a5			;	inc hl    ; file name 
07a5				 
07a5				 
07a5 11 eb f9			ld de, store_page+3    ; get buffer for term string to use as file name 
07a8				if DEBUG_STORESE 
07a8					DMARK "SCc" 
07a8 f5				push af  
07a9 3a bd 07			ld a, (.dmark)  
07ac 32 bd fb			ld (debug_mark),a  
07af 3a be 07			ld a, (.dmark+1)  
07b2 32 be fb			ld (debug_mark+1),a  
07b5 3a bf 07			ld a, (.dmark+2)  
07b8 32 bf fb			ld (debug_mark+2),a  
07bb 18 03			jr .pastdmark  
07bd ..			.dmark: db "SCc"  
07c0 f1			.pastdmark: pop af  
07c1			endm  
# End of macro DMARK
07c1					CALLMONITOR 
07c1 cd 2d 17			call break_point_state  
07c4				endm  
# End of macro CALLMONITOR
07c4				endif 
07c4 e1				pop hl    ; get zero term string 
07c5 e5				push hl 
07c6 3e 00			ld a, 0 
07c8 cd 83 11			call strlent 
07cb 23				inc hl   ; cover zero term 
07cc 06 00			ld b,0 
07ce 4d				ld c,l 
07cf e1				pop hl 
07d0				;ex de, hl 
07d0				if DEBUG_STORESE 
07d0					DMARK "SCa" 
07d0 f5				push af  
07d1 3a e5 07			ld a, (.dmark)  
07d4 32 bd fb			ld (debug_mark),a  
07d7 3a e6 07			ld a, (.dmark+1)  
07da 32 be fb			ld (debug_mark+1),a  
07dd 3a e7 07			ld a, (.dmark+2)  
07e0 32 bf fb			ld (debug_mark+2),a  
07e3 18 03			jr .pastdmark  
07e5 ..			.dmark: db "SCa"  
07e8 f1			.pastdmark: pop af  
07e9			endm  
# End of macro DMARK
07e9					;push af 
07e9					;ld a, 'a' 
07e9					;ld (debug_mark),a 
07e9					;pop af 
07e9					CALLMONITOR 
07e9 cd 2d 17			call break_point_state  
07ec				endm  
# End of macro CALLMONITOR
07ec				endif 
07ec ed b0			ldir    ; copy zero term string 
07ee				if DEBUG_STORESE 
07ee					DMARK "SCA" 
07ee f5				push af  
07ef 3a 03 08			ld a, (.dmark)  
07f2 32 bd fb			ld (debug_mark),a  
07f5 3a 04 08			ld a, (.dmark+1)  
07f8 32 be fb			ld (debug_mark+1),a  
07fb 3a 05 08			ld a, (.dmark+2)  
07fe 32 bf fb			ld (debug_mark+2),a  
0801 18 03			jr .pastdmark  
0803 ..			.dmark: db "SCA"  
0806 f1			.pastdmark: pop af  
0807			endm  
# End of macro DMARK
0807					CALLMONITOR 
0807 cd 2d 17			call break_point_state  
080a				endm  
# End of macro CALLMONITOR
080a				endif 
080a			 
080a				; write file header page 
080a			 
080a 2a d2 f9			ld hl,(store_tmppageid) 
080d 11 e8 f9			ld de, store_page 
0810				if DEBUG_STORESE 
0810					DMARK "SCb" 
0810 f5				push af  
0811 3a 25 08			ld a, (.dmark)  
0814 32 bd fb			ld (debug_mark),a  
0817 3a 26 08			ld a, (.dmark+1)  
081a 32 be fb			ld (debug_mark+1),a  
081d 3a 27 08			ld a, (.dmark+2)  
0820 32 bf fb			ld (debug_mark+2),a  
0823 18 03			jr .pastdmark  
0825 ..			.dmark: db "SCb"  
0828 f1			.pastdmark: pop af  
0829			endm  
# End of macro DMARK
0829					;push af 
0829					;ld a, 'b' 
0829					;ld (debug_mark),a 
0829					;pop af 
0829					CALLMONITOR 
0829 cd 2d 17			call break_point_state  
082c				endm  
# End of macro CALLMONITOR
082c				endif 
082c cd 6e 03			call storage_write_block 
082f			 
082f 3a e1 f9			ld a, (store_tmpid) 
0832 6f				ld l, a 
0833 26 00			ld h,0 
0835				if DEBUG_STORESE 
0835					DMARK "SCz" 
0835 f5				push af  
0836 3a 4a 08			ld a, (.dmark)  
0839 32 bd fb			ld (debug_mark),a  
083c 3a 4b 08			ld a, (.dmark+1)  
083f 32 be fb			ld (debug_mark+1),a  
0842 3a 4c 08			ld a, (.dmark+2)  
0845 32 bf fb			ld (debug_mark+2),a  
0848 18 03			jr .pastdmark  
084a ..			.dmark: db "SCz"  
084d f1			.pastdmark: pop af  
084e			endm  
# End of macro DMARK
084e					CALLMONITOR 
084e cd 2d 17			call break_point_state  
0851				endm  
# End of macro CALLMONITOR
0851				endif 
0851 c9				ret 
0852				 
0852			 
0852			 
0852			; 
0852			; Read File 
0852			; 
0852			; h - file id to locate 
0852			; l - extent to locate 
0852			; de - pointer to string to read into 
0852			; 
0852			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
0852			 
0852			.sr_fail: 
0852 d1				pop de 
0853 c9				ret 
0854			 
0854			storage_read: 
0854 d5				push de 
0855			 
0855			; TODO BUG the above push is it popped before the RET Z? 
0855			 
0855			; TODO how to handle multiple part blocks 
0855			 
0855				; locate file extent to read 
0855			 
0855 5c				ld e, h 
0856 55				ld d, l 
0857 21 40 00			ld hl, STORE_BLOCK_PHY 
085a				if DEBUG_STORESE 
085a					DMARK "SRE" 
085a f5				push af  
085b 3a 6f 08			ld a, (.dmark)  
085e 32 bd fb			ld (debug_mark),a  
0861 3a 70 08			ld a, (.dmark+1)  
0864 32 be fb			ld (debug_mark+1),a  
0867 3a 71 08			ld a, (.dmark+2)  
086a 32 bf fb			ld (debug_mark+2),a  
086d 18 03			jr .pastdmark  
086f ..			.dmark: db "SRE"  
0872 f1			.pastdmark: pop af  
0873			endm  
# End of macro DMARK
0873					CALLMONITOR 
0873 cd 2d 17			call break_point_state  
0876				endm  
# End of macro CALLMONITOR
0876				endif 
0876 cd 2e 06			call storage_findnextid 
0879			 
0879				if DEBUG_STORESE 
0879					DMARK "SRf" 
0879 f5				push af  
087a 3a 8e 08			ld a, (.dmark)  
087d 32 bd fb			ld (debug_mark),a  
0880 3a 8f 08			ld a, (.dmark+1)  
0883 32 be fb			ld (debug_mark+1),a  
0886 3a 90 08			ld a, (.dmark+2)  
0889 32 bf fb			ld (debug_mark+2),a  
088c 18 03			jr .pastdmark  
088e ..			.dmark: db "SRf"  
0891 f1			.pastdmark: pop af  
0892			endm  
# End of macro DMARK
0892					CALLMONITOR 
0892 cd 2d 17			call break_point_state  
0895				endm  
# End of macro CALLMONITOR
0895				endif 
0895 cd 43 0d			call ishlzero 
0898			;	ld a, l 
0898			;	add h 
0898			;	cp 0 
0898 28 b8			jr z,.sr_fail			; block not found so EOF 
089a			 
089a				; hl contains page number to load 
089a d1				pop de   ; get storage 
089b d5				push de 
089c				if DEBUG_STORESE 
089c					DMARK "SRg" 
089c f5				push af  
089d 3a b1 08			ld a, (.dmark)  
08a0 32 bd fb			ld (debug_mark),a  
08a3 3a b2 08			ld a, (.dmark+1)  
08a6 32 be fb			ld (debug_mark+1),a  
08a9 3a b3 08			ld a, (.dmark+2)  
08ac 32 bf fb			ld (debug_mark+2),a  
08af 18 03			jr .pastdmark  
08b1 ..			.dmark: db "SRg"  
08b4 f1			.pastdmark: pop af  
08b5			endm  
# End of macro DMARK
08b5					CALLMONITOR 
08b5 cd 2d 17			call break_point_state  
08b8				endm  
# End of macro CALLMONITOR
08b8				endif 
08b8 cd 09 03			call storage_read_block 
08bb			 
08bb			 
08bb			; TODO if block has no zeros then need to read next block  
08bb			 
08bb			 
08bb					 
08bb e1				pop hl 		 ; return start of data to show as not EOF 
08bc 23				inc hl   ; past file id 
08bd 23				inc hl   ; past ext 
08be				if DEBUG_STORESE 
08be					DMARK "SRe" 
08be f5				push af  
08bf 3a d3 08			ld a, (.dmark)  
08c2 32 bd fb			ld (debug_mark),a  
08c5 3a d4 08			ld a, (.dmark+1)  
08c8 32 be fb			ld (debug_mark+1),a  
08cb 3a d5 08			ld a, (.dmark+2)  
08ce 32 bf fb			ld (debug_mark+2),a  
08d1 18 03			jr .pastdmark  
08d3 ..			.dmark: db "SRe"  
08d6 f1			.pastdmark: pop af  
08d7			endm  
# End of macro DMARK
08d7					CALLMONITOR 
08d7 cd 2d 17			call break_point_state  
08da				endm  
# End of macro CALLMONITOR
08da				endif 
08da c9					ret 
08db			 
08db			 
08db			 
08db			; 
08db			; Append File 
08db			; 
08db			; hl - file id to locate 
08db			; de - pointer to (multi block) string to write 
08db			 
08db			.sa_notfound: 
08db d1				pop de 
08dc c9				ret 
08dd			 
08dd			 
08dd			storage_append: 
08dd				; hl -  file id to append to 
08dd				; de - string to append 
08dd			 
08dd d5				push de 
08de				 
08de				if DEBUG_STORESE 
08de					DMARK "AP1" 
08de f5				push af  
08df 3a f3 08			ld a, (.dmark)  
08e2 32 bd fb			ld (debug_mark),a  
08e5 3a f4 08			ld a, (.dmark+1)  
08e8 32 be fb			ld (debug_mark+1),a  
08eb 3a f5 08			ld a, (.dmark+2)  
08ee 32 bf fb			ld (debug_mark+2),a  
08f1 18 03			jr .pastdmark  
08f3 ..			.dmark: db "AP1"  
08f6 f1			.pastdmark: pop af  
08f7			endm  
# End of macro DMARK
08f7					CALLMONITOR 
08f7 cd 2d 17			call break_point_state  
08fa				endm  
# End of macro CALLMONITOR
08fa				endif 
08fa			 
08fa 7d				ld a, l 
08fb 32 e1 f9			ld (store_tmpid), a 
08fe			 
08fe				; get file header  
08fe			 
08fe 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0900 3a e1 f9			ld a, (store_tmpid) 
0903 5f				ld e, a 
0904			 
0904 21 40 00				ld hl, STORE_BLOCK_PHY 
0907 cd 2e 06				call storage_findnextid 
090a			 
090a cd 43 0d			call ishlzero 
090d 28 cc			jr z, .sa_notfound 
090f			 
090f 22 d2 f9			ld (store_tmppageid), hl 
0912			 
0912				; TODO handle file id not found 
0912			 
0912				if DEBUG_STORESE 
0912					DMARK "AP2" 
0912 f5				push af  
0913 3a 27 09			ld a, (.dmark)  
0916 32 bd fb			ld (debug_mark),a  
0919 3a 28 09			ld a, (.dmark+1)  
091c 32 be fb			ld (debug_mark+1),a  
091f 3a 29 09			ld a, (.dmark+2)  
0922 32 bf fb			ld (debug_mark+2),a  
0925 18 03			jr .pastdmark  
0927 ..			.dmark: db "AP2"  
092a f1			.pastdmark: pop af  
092b			endm  
# End of macro DMARK
092b					CALLMONITOR 
092b cd 2d 17			call break_point_state  
092e				endm  
# End of macro CALLMONITOR
092e				endif 
092e			 
092e				; update file extent count 
092e			 
092e 11 e8 f9			ld de, store_page 
0931			 
0931 cd 09 03			call storage_read_block 
0934			 
0934				if DEBUG_STORESE 
0934					DMARK "AP3" 
0934 f5				push af  
0935 3a 49 09			ld a, (.dmark)  
0938 32 bd fb			ld (debug_mark),a  
093b 3a 4a 09			ld a, (.dmark+1)  
093e 32 be fb			ld (debug_mark+1),a  
0941 3a 4b 09			ld a, (.dmark+2)  
0944 32 bf fb			ld (debug_mark+2),a  
0947 18 03			jr .pastdmark  
0949 ..			.dmark: db "AP3"  
094c f1			.pastdmark: pop af  
094d			endm  
# End of macro DMARK
094d					CALLMONITOR 
094d cd 2d 17			call break_point_state  
0950				endm  
# End of macro CALLMONITOR
0950				endif 
0950			;	ld (store_tmppageid), hl 
0950			 
0950 3a ea f9			ld a, (store_page+2) 
0953 3c				inc a 
0954 32 ea f9			ld (store_page+2), a 
0957 32 e0 f9			ld (store_tmpext), a 
095a				 
095a				if DEBUG_STORESE 
095a					DMARK "AP3" 
095a f5				push af  
095b 3a 6f 09			ld a, (.dmark)  
095e 32 bd fb			ld (debug_mark),a  
0961 3a 70 09			ld a, (.dmark+1)  
0964 32 be fb			ld (debug_mark+1),a  
0967 3a 71 09			ld a, (.dmark+2)  
096a 32 bf fb			ld (debug_mark+2),a  
096d 18 03			jr .pastdmark  
096f ..			.dmark: db "AP3"  
0972 f1			.pastdmark: pop af  
0973			endm  
# End of macro DMARK
0973					CALLMONITOR 
0973 cd 2d 17			call break_point_state  
0976				endm  
# End of macro CALLMONITOR
0976				endif 
0976 2a d2 f9			ld hl, (store_tmppageid) 
0979 11 e8 f9			ld de, store_page 
097c cd 6e 03			call storage_write_block 
097f			 
097f				; find free block 
097f			 
097f 11 00 00			ld de, 0			 ; file extent to locate 
0982			 
0982 21 40 00				ld hl, STORE_BLOCK_PHY 
0985 cd 2e 06				call storage_findnextid 
0988 cd 43 0d			call ishlzero 
098b ca db 08			jp z, .sa_notfound 
098e			 
098e					; TODO handle no space left 
098e					 
098e 22 d2 f9				ld (store_tmppageid), hl 
0991			 
0991				if DEBUG_STORESE 
0991					DMARK "AP4" 
0991 f5				push af  
0992 3a a6 09			ld a, (.dmark)  
0995 32 bd fb			ld (debug_mark),a  
0998 3a a7 09			ld a, (.dmark+1)  
099b 32 be fb			ld (debug_mark+1),a  
099e 3a a8 09			ld a, (.dmark+2)  
09a1 32 bf fb			ld (debug_mark+2),a  
09a4 18 03			jr .pastdmark  
09a6 ..			.dmark: db "AP4"  
09a9 f1			.pastdmark: pop af  
09aa			endm  
# End of macro DMARK
09aa					CALLMONITOR 
09aa cd 2d 17			call break_point_state  
09ad				endm  
# End of macro CALLMONITOR
09ad				endif 
09ad					; init the buffer with zeros so we can id if the buffer is full or not 
09ad			 
09ad e5					push hl 
09ae c5					push bc 
09af			 
09af 21 e8 f9				ld hl, store_page 
09b2 06 40				ld b, STORE_BLOCK_PHY 
09b4 3e 00				ld a, 0 
09b6 77			.zeroblock:	ld (hl), a 
09b7 23					inc hl 
09b8 10 fc				djnz .zeroblock 
09ba			 
09ba c1					pop bc 
09bb e1					pop hl 
09bc			 
09bc					; construct block 
09bc			 
09bc 3a e1 f9				ld a, (store_tmpid) 
09bf 32 e8 f9				ld (store_page), a   ; file id 
09c2 3a e0 f9				ld a, (store_tmpext)   ; extent for this block 
09c5 32 e9 f9				ld (store_page+1), a 
09c8			 
09c8 e1					pop hl    ; get string to write 
09c9 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
09cb 11 ea f9				ld de, store_page+2 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP5" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 bd fb			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 be fb			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 bf fb			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP5"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 2d 17			call break_point_state  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			 
09ea			 
09ea			 
09ea					; fill buffer with data until end of string or full block 
09ea			 
09ea 7e			.appd:		ld a, (hl) 
09eb 12					ld (de), a 
09ec fe 00				cp 0 
09ee 28 04				jr z, .appdone 
09f0 23					inc hl 
09f1 13					inc de 
09f2 10 f6				djnz .appd 
09f4			 
09f4 e5			.appdone:	push hl		 	; save current source in case we need to go around again 
09f5 f5					push af   		; save last byte dumped 
09f6			 
09f6			 
09f6 2a d2 f9			ld hl, (store_tmppageid) 
09f9 11 e8 f9			ld de, store_page 
09fc				if DEBUG_STORESE 
09fc					DMARK "AP6" 
09fc f5				push af  
09fd 3a 11 0a			ld a, (.dmark)  
0a00 32 bd fb			ld (debug_mark),a  
0a03 3a 12 0a			ld a, (.dmark+1)  
0a06 32 be fb			ld (debug_mark+1),a  
0a09 3a 13 0a			ld a, (.dmark+2)  
0a0c 32 bf fb			ld (debug_mark+2),a  
0a0f 18 03			jr .pastdmark  
0a11 ..			.dmark: db "AP6"  
0a14 f1			.pastdmark: pop af  
0a15			endm  
# End of macro DMARK
0a15					CALLMONITOR 
0a15 cd 2d 17			call break_point_state  
0a18				endm  
# End of macro CALLMONITOR
0a18				endif 
0a18 cd 6e 03				call storage_write_block 
0a1b			 
0a1b			 
0a1b				; was that a full block of data written? 
0a1b				; any more to write out? 
0a1b			 
0a1b				; if yes then set vars and jump to start of function again 
0a1b			 
0a1b f1					pop af 
0a1c d1					pop de 
0a1d			 
0a1d fe 00				cp 0		 ; no, string was fully written 
0a1f c8					ret z 
0a20			 
0a20					; setup vars for next cycle 
0a20			 
0a20 3a e1 f9				ld a, (store_tmpid) 
0a23 6f					ld l, a 
0a24 26 00				ld h, 0 
0a26			 
0a26 c3 dd 08			 	jp storage_append	 ; yes, need to write out some more 
0a29			 
0a29			 
0a29			 
0a29			 
0a29			 
0a29			 
0a29			 
0a29			if DEBUG_STORECF 
0a29			storageput:	 
0a29					ret 
0a29			storageread: 
0a29					ld hl, store_page 
0a29					ld b, 200 
0a29					ld a,0 
0a29			.src:		ld (hl),a 
0a29					inc hl 
0a29					djnz .src 
0a29					 
0a29			 
0a29					ld de, 0 
0a29					ld bc, 1 
0a29					ld hl, store_page 
0a29					call cfRead 
0a29			 
0a29				call cfGetError 
0a29				ld hl,scratch 
0a29				call hexout 
0a29				ld hl, scratch+2 
0a29				ld a, 0 
0a29				ld (hl),a 
0a29				ld de, scratch 
0a29				ld a,display_row_1 
0a29				call str_at_display 
0a29				call update_display 
0a29			 
0a29					ld hl, store_page 
0a29					ld (os_cur_ptr),hl 
0a29			 
0a29					ret 
0a29			endif 
0a29			 
0a29			 
0a29			; Clear out the main buffer store (used to remove junk before writing a new block) 
0a29			 
0a29			storage_clear_page: 
0a29 e5				push hl 
0a2a d5				push de 
0a2b c5				push bc 
0a2c 21 e8 f9			ld hl, store_page 
0a2f 3e 00			ld a, 0 
0a31 77				ld (hl), a 
0a32			 
0a32 11 e9 f9			ld de, store_page+1 
0a35 01 40 00			ld bc, STORE_BLOCK_PHY 
0a38			 
0a38 ed b0			ldir 
0a3a				 
0a3a c1				pop bc 
0a3b d1				pop de 
0a3c e1				pop hl 
0a3d c9				ret 
0a3e			 
0a3e			; eof 
# End of file firmware_storage.asm
0a3e			  
0a3e			; support routines for above hardware abstraction layer  
0a3e			  
0a3e			include "firmware_general.asm"        ; general support functions  
0a3e			 
0a3e			; word look up 
0a3e			 
0a3e			; in 
0a3e			; a is the index 
0a3e			; hl is pointer start of array 
0a3e			; 
0a3e			; returns 
0a3e			; hl to the word 
0a3e			; 
0a3e			 
0a3e			table_lookup:  
0a3e d5					push de 
0a3f eb					ex de, hl 
0a40			 
0a40 6f					ld l, a 
0a41 26 00				ld h, 0 
0a43 29					add hl, hl 
0a44 19					add hl, de 
0a45 7e					ld a, (hl) 
0a46 23					inc hl 
0a47 66					ld h,(hl) 
0a48 6f					ld l, a 
0a49			 
0a49 d1					pop de 
0a4a c9					ret 
0a4b			 
0a4b			; Delay loops 
0a4b			 
0a4b			 
0a4b			 
0a4b			aDelayInMS: 
0a4b c5				push bc 
0a4c 47				ld b,a 
0a4d			msdelay: 
0a4d c5				push bc 
0a4e				 
0a4e			 
0a4e 01 41 00			ld bc,041h 
0a51 cd 69 0a			call delayloop 
0a54 c1				pop bc 
0a55 05				dec b 
0a56 20 f5			jr nz,msdelay 
0a58			 
0a58			;if CPU_CLOCK_8MHZ 
0a58			;msdelay8: 
0a58			;	push bc 
0a58			;	 
0a58			; 
0a58			;	ld bc,041h 
0a58			;	call delayloop 
0a58			;	pop bc 
0a58			;	dec b 
0a58			;	jr nz,msdelay8 
0a58			;endif 
0a58			 
0a58			 
0a58 c1				pop bc 
0a59 c9				ret 
0a5a			 
0a5a			 
0a5a			delay250ms: 
0a5a				;push de 
0a5a 01 00 40			ld bc, 04000h 
0a5d c3 69 0a			jp delayloop 
0a60			delay500ms: 
0a60				;push de 
0a60 01 00 80			ld bc, 08000h 
0a63 c3 69 0a			jp delayloop 
0a66			delay1s: 
0a66				;push bc 
0a66			   ; Clobbers A, d and e 
0a66 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0a69			delayloop: 
0a69 c5			    push bc 
0a6a			 
0a6a			if BASE_CPM 
0a6a				ld bc, CPM_DELAY_TUNE 
0a6a			.cpmloop: 
0a6a				push bc 
0a6a			 
0a6a			endif 
0a6a			 
0a6a			 
0a6a			 
0a6a			delayloopi: 
0a6a			;	push bc 
0a6a			;.dl: 
0a6a cb 47		    bit     0,a    	; 8 
0a6c cb 47		    bit     0,a    	; 8 
0a6e cb 47		    bit     0,a    	; 8 
0a70 e6 ff		    and     255  	; 7 
0a72 0b			    dec     bc      	; 6 
0a73 79			    ld      a,c     	; 4 
0a74 b0			    or      b     	; 4 
0a75 c2 6a 0a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0a78			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0a78				;pop de 
0a78			;pop bc 
0a78			 
0a78			if BASE_CPM 
0a78				pop bc 
0a78				 
0a78			    dec     bc      	; 6 
0a78			    ld      a,c     	; 4 
0a78			    or      b     	; 4 
0a78			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0a78				 
0a78			 
0a78			endif 
0a78			;if CPU_CLOCK_8MHZ 
0a78			;    pop bc 
0a78			;    push bc 
0a78			;.dl8: 
0a78			;    bit     0,a    	; 8 
0a78			;    bit     0,a    	; 8 
0a78			;    bit     0,a    	; 8 
0a78			;    and     255  	; 7 
0a78			;    dec     bc      	; 6 
0a78			;    ld      a,c     	; 4 
0a78			;    or      b     	; 4 
0a78			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0a78			;endif 
0a78			 
0a78			;if CPU_CLOCK_10MHZ 
0a78			;    pop bc 
0a78			;    push bc 
0a78			;.dl8: 
0a78			;    bit     0,a    	; 8 
0a78			;    bit     0,a    	; 8 
0a78			;    bit     0,a    	; 8 
0a78			;    and     255  	; 7 
0a78			;    dec     bc      	; 6 
0a78			;    ld      a,c     	; 4 
0a78			;    or      b     	; 4 
0a78			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0a78			;endif 
0a78 c1			    pop bc 
0a79			 
0a79 c9				ret 
0a7a			 
0a7a			 
0a7a			 
0a7a			; eof 
# End of file firmware_general.asm
0a7a			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0a7a			; display routines that use the physical hardware abstraction layer 
0a7a			 
0a7a			 
0a7a			; information window 
0a7a			 
0a7a			; pass hl with 1st string to display 
0a7a			; pass de with 2nd string to display 
0a7a			 
0a7a			info_panel: 
0a7a e5				push hl 
0a7b			 
0a7b 2a 5e fa			ld hl, (display_fb_active) 
0a7e e5				push hl    ; future de destination 
0a7f 21 53 fb				ld hl, display_fb0 
0a82 22 5e fa				ld (display_fb_active), hl 
0a85			 
0a85 cd e6 0a			call clear_display 
0a88			 
0a88			 
0a88 3e 2d			ld a, display_row_3 + 5 
0a8a cd f9 0a			call str_at_display 
0a8d			 
0a8d e1				pop hl 
0a8e d1				pop de 
0a8f			 
0a8f e5				push hl 
0a90			 
0a90			 
0a90 3e 19			ld a, display_row_2 + 5 
0a92 cd f9 0a			call str_at_display 
0a95			 
0a95			 
0a95 cd 09 0b			call update_display 
0a98 cd 35 1c			call next_page_prompt 
0a9b cd e6 0a			call clear_display 
0a9e			 
0a9e				 
0a9e 21 02 fb				ld hl, display_fb1 
0aa1 22 5e fa				ld (display_fb_active), hl 
0aa4 cd 09 0b			call update_display 
0aa7			 
0aa7			 
0aa7 c9				ret 
0aa8			 
0aa8			 
0aa8			 
0aa8			 
0aa8			; TODO windowing? 
0aa8			 
0aa8			; TODO scroll line up 
0aa8			 
0aa8			scroll_up: 
0aa8			 
0aa8 e5				push hl 
0aa9 d5				push de 
0aaa c5				push bc 
0aab			 
0aab				; get frame buffer  
0aab			 
0aab 2a 5e fa			ld hl, (display_fb_active) 
0aae e5				push hl    ; future de destination 
0aaf			 
0aaf 11 14 00			ld  de, display_cols 
0ab2 19				add hl, de 
0ab3			 
0ab3 d1				pop de 
0ab4			 
0ab4				;ex de, hl 
0ab4 01 4f 00			ld bc, display_fb_len -1  
0ab7			;if DEBUG_FORTH_WORDS 
0ab7			;	DMARK "SCL" 
0ab7			;	CALLMONITOR 
0ab7			;endif	 
0ab7 ed b0			ldir 
0ab9			 
0ab9				; wipe bottom row 
0ab9			 
0ab9			 
0ab9 2a 5e fa			ld hl, (display_fb_active) 
0abc 11 50 00			ld de, display_cols*display_rows 
0abf 19				add hl, de 
0ac0 06 14			ld b, display_cols 
0ac2 3e 20			ld a, ' ' 
0ac4			.scwipe: 
0ac4 77				ld (hl), a 
0ac5 2b				dec hl 
0ac6 10 fc			djnz .scwipe 
0ac8			 
0ac8				;pop hl 
0ac8			 
0ac8 c1				pop bc 
0ac9 d1				pop de 
0aca e1				pop hl 
0acb			 
0acb c9				ret 
0acc			 
0acc			 
0acc			;scroll_upo: 
0acc			;	ld de, display_row_1 
0acc			 ;	ld hl, display_row_2 
0acc			;	ld bc, display_cols 
0acc			;	ldir 
0acc			;	ld de, display_row_2 
0acc			 ;	ld hl, display_row_3 
0acc			;	ld bc, display_cols 
0acc			;	ldir 
0acc			;	ld de, display_row_3 
0acc			 ;	ld hl, display_row_4 
0acc			;	ld bc, display_cols 
0acc			;	ldir 
0acc			 
0acc			; TODO clear row 4 
0acc			 
0acc			;	ret 
0acc			 
0acc				 
0acc			scroll_down: 
0acc			 
0acc e5				push hl 
0acd d5				push de 
0ace c5				push bc 
0acf			 
0acf				; get frame buffer  
0acf			 
0acf 2a 5e fa			ld hl, (display_fb_active) 
0ad2			 
0ad2 11 4f 00			ld de, display_fb_len - 1 
0ad5 19				add hl, de 
0ad6			 
0ad6 e5			push hl    ; future de destination 
0ad7			 
0ad7 11 14 00			ld  de, display_cols 
0ada ed 52			sbc hl, de 
0adc			 
0adc			 
0adc d1				pop de 
0add			 
0add			;	ex de, hl 
0add 01 4f 00			ld bc, display_fb_len -1  
0ae0			 
0ae0			 
0ae0				 
0ae0			 
0ae0 ed b0			ldir 
0ae2			 
0ae2				; wipe bottom row 
0ae2			 
0ae2			 
0ae2			;	ld hl, (display_fb_active) 
0ae2			;;	ld de, display_cols*display_rows 
0ae2			;;	add hl, de 
0ae2			;	ld b, display_cols 
0ae2			;	ld a, ' ' 
0ae2			;.scwiped: 
0ae2			;	ld (hl), a 
0ae2			;	dec hl 
0ae2			;	djnz .scwiped 
0ae2			 
0ae2				;pop hl 
0ae2			 
0ae2 c1				pop bc 
0ae3 d1				pop de 
0ae4 e1				pop hl 
0ae5			 
0ae5 c9				ret 
0ae6			;scroll_down: 
0ae6			;	ld de, display_row_4 
0ae6			;	ld hl, display_row_3 
0ae6			;	ld bc, display_cols 
0ae6			;	ldir 
0ae6			;	ld de, display_row_3 
0ae6			; 	ld hl, display_row_2 
0ae6			;	ld bc, display_cols 
0ae6			;	ldir 
0ae6			;	ld de, display_row_2 
0ae6			;	ld hl, display_row_1 
0ae6			;	ld bc, display_cols 
0ae6			;	ldir 
0ae6			;;; TODO clear row 1 
0ae6			;	ret 
0ae6			 
0ae6			 
0ae6			 
0ae6			 
0ae6			 
0ae6			; clear active frame buffer 
0ae6			 
0ae6			clear_display: 
0ae6 3e 20			ld a, ' ' 
0ae8 c3 eb 0a			jp fill_display 
0aeb			 
0aeb			; fill active frame buffer with a char in A 
0aeb			 
0aeb			fill_display: 
0aeb 06 50			ld b,display_fb_len 
0aed 2a 5e fa			ld hl, (display_fb_active) 
0af0 77			.fd1:	ld (hl),a 
0af1 23				inc hl 
0af2 10 fc			djnz .fd1 
0af4 23				inc hl 
0af5 3e 00			ld a,0 
0af7 77				ld (hl),a 
0af8			 
0af8			 
0af8 c9				ret 
0af9			; Write string (DE) at pos (A) to active frame buffer 
0af9			 
0af9 2a 5e fa		str_at_display:    ld hl,(display_fb_active) 
0afc 06 00					ld b,0 
0afe 4f					ld c,a 
0aff 09					add hl,bc 
0b00 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0b01 b7			            OR   A              ;Null terminator? 
0b02 c8			            RET  Z              ;Yes, so finished 
0b03 77					ld (hl),a 
0b04 23				inc hl 
0b05 13			            INC  DE             ;Point to next character 
0b06 18 f8		            JR   .sad1     ;Repeat 
0b08 c9					ret 
0b09			 
0b09			; using current frame buffer write to physical display 
0b09			 
0b09			update_display: 
0b09 e5				push hl 
0b0a 2a 5e fa			ld hl, (display_fb_active) 
0b0d cd 6e 65			call write_display 
0b10 e1				pop hl 
0b11 c9				ret 
0b12			 
0b12			; TODO scrolling 
0b12			 
0b12			 
0b12			; move cursor right one char 
0b12			cursor_right: 
0b12			 
0b12				; TODO shift right 
0b12				; TODO if beyond max col 
0b12				; TODO       cursor_next_line 
0b12			 
0b12 c9				ret 
0b13			 
0b13			 
0b13			cursor_next_line: 
0b13				; TODO first char 
0b13				; TODO line down 
0b13				; TODO if past last row 
0b13				; TODO    scroll up 
0b13			 
0b13 c9				ret 
0b14			 
0b14			cursor_left: 
0b14				; TODO shift left 
0b14				; TODO if beyond left  
0b14				; TODO     cursor prev line 
0b14				 
0b14 c9				ret 
0b15			 
0b15			cursor_prev_line: 
0b15				; TODO last char 
0b15				; TODO line up 
0b15				; TODO if past first row 
0b15				; TODO   scroll down 
0b15			 
0b15 c9				ret 
0b16			 
0b16			 
0b16			cout: 
0b16				; A - char 
0b16 c9				ret 
0b17			 
0b17			 
0b17			; Display a menu and allow item selection (optional toggle items) 
0b17			; 
0b17			; format: 
0b17			; hl pointer to word array with zero term for items 
0b17			; e.g.    db item1 
0b17			;         db .... 
0b17			;         db 0 
0b17			; 
0b17			; a = starting menu item  
0b17			; 
0b17			; de = pointer item toggle array   (todo) 
0b17			; 
0b17			; returns item selected in a 1-... 
0b17			; returns 0 if back button pressed 
0b17			; 
0b17			; NOTE: Uses system frame buffer to display 
0b17			; 
0b17			; LEFT, Q = go back 
0b17			; RIGHT, SPACE, CR = select 
0b17			; UP, A - Up 
0b17			; DOWN, Z - Down 
0b17			 
0b17			 
0b17			 
0b17			 
0b17			 
0b17			menu: 
0b17			 
0b17					; keep array pointer 
0b17			 
0b17 22 e6 f9				ld (store_tmp1), hl 
0b1a 32 e4 f9				ld (store_tmp2), a 
0b1d			 
0b1d					; check for key bounce 
0b1d			 
0b1d			if BASE_KEV 
0b1d			 
0b1d cd 23 67		.mbounce:	call cin 
0b20 fe 00				cp 0 
0b22 20 f9				jr nz, .mbounce 
0b24			endif 
0b24					; for ease use ex 
0b24			 
0b24					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0b24 21 53 fb				ld hl, display_fb0 
0b27 22 5e fa				ld (display_fb_active), hl 
0b2a			 
0b2a cd e6 0a		.mloop:		call clear_display 
0b2d cd 09 0b				call update_display 
0b30			 
0b30					; draw selection id '>' at 1 
0b30			 
0b30					; init start of list display 
0b30			 
0b30 3e 05				ld a, 5 
0b32 32 e2 f9				ld (store_tmp3), a   ; display row count 
0b35 3a e4 f9				ld a,( store_tmp2) 
0b38 32 e5 f9				ld (store_tmp2+1), a   ; display item count 
0b3b			 
0b3b					 
0b3b			.mitem:	 
0b3b			 
0b3b			 
0b3b 3a e5 f9				ld a,(store_tmp2+1) 
0b3e 6f					ld l, a 
0b3f 26 00				ld h, 0 
0b41 29					add hl, hl 
0b42 ed 5b e6 f9			ld de, (store_tmp1) 
0b46 19					add hl, de 
0b47 7e					ld a, (hl) 
0b48 23					inc hl 
0b49 66					ld h,(hl) 
0b4a 6f					ld l, a 
0b4b			 
0b4b cd 43 0d				call ishlzero 
0b4e 28 1a				jr z, .mdone 
0b50			 
0b50 eb					ex de, hl 
0b51 3a e2 f9				ld a, (store_tmp3) 
0b54 cd f9 0a				call str_at_display 
0b57					 
0b57			 
0b57					; next item 
0b57 3a e5 f9				ld a, (store_tmp2+1) 
0b5a 3c					inc a 
0b5b 32 e5 f9				ld (store_tmp2+1), a   ; display item count 
0b5e			 
0b5e			 		; next row 
0b5e			 
0b5e 3a e2 f9				ld a, (store_tmp3) 
0b61 c6 14				add display_cols 
0b63 32 e2 f9				ld (store_tmp3), a 
0b66			 
0b66					; at end of screen? 
0b66			 
0b66 fe 10				cp display_rows*4 
0b68 20 d1				jr nz, .mitem 
0b6a			 
0b6a			 
0b6a			.mdone: 
0b6a cd 43 0d				call ishlzero 
0b6d 28 08				jr z, .nodn 
0b6f			 
0b6f 3e 3c				ld a, display_row_4 
0b71 11 f0 0b				ld de, .mdown 
0b74 cd f9 0a				call str_at_display 
0b77			 
0b77					; draw options to fill the screens with active item on line 1 
0b77					; if current option is 2 or more then display ^ in top 
0b77			 
0b77 3a e4 f9		.nodn:		ld a, (store_tmp2) 
0b7a fe 00				cp 0 
0b7c 28 08				jr z, .noup 
0b7e			 
0b7e 3e 00				ld a, 0 
0b80 11 ee 0b				ld de, .mup 
0b83 cd f9 0a				call str_at_display 
0b86			 
0b86 3e 02		.noup:		ld a, 2 
0b88 11 ec 0b				ld de, .msel 
0b8b cd f9 0a				call str_at_display 
0b8e			 
0b8e					; if current option + 1 is not null then display V in bottom 
0b8e					; get key 
0b8e cd 09 0b				call update_display 
0b91			 
0b91			 
0b91					; handle key 
0b91			 
0b91 cd 12 67				call cin_wait 
0b94			 
0b94 fe 05				cp KEY_UP 
0b96 28 2b				jr z, .mgoup 
0b98 fe 61				cp 'a' 
0b9a 28 27				jr z, .mgoup 
0b9c fe 0a				cp KEY_DOWN 
0b9e 28 32				jr z, .mgod 
0ba0 fe 7a				cp 'z' 
0ba2 28 2e				jr z, .mgod 
0ba4 fe 20				cp ' ' 
0ba6 28 34				jr z, .goend 
0ba8 fe 0c				cp KEY_RIGHT 
0baa 28 30				jr z, .goend 
0bac fe 0d				cp KEY_CR 
0bae 28 2c				jr z, .goend 
0bb0 fe 71				cp 'q' 
0bb2 28 0b				jr z, .goback 
0bb4			 
0bb4 fe 0b				cp KEY_LEFT 
0bb6 28 07				jr z, .goback 
0bb8 fe 08				cp KEY_BS 
0bba 28 03				jr z, .goback 
0bbc c3 2a 0b				jp .mloop 
0bbf			 
0bbf			.goback: 
0bbf 3e 00			ld a, 0 
0bc1 18 1d			jr .goend2 
0bc3			 
0bc3				; move up one 
0bc3			.mgoup: 
0bc3 3a e4 f9				ld a, (store_tmp2) 
0bc6 fe 00				cp 0 
0bc8 ca 2a 0b				jp z, .mloop 
0bcb 3d					dec a 
0bcc 32 e4 f9				ld (store_tmp2), a 
0bcf c3 2a 0b				jp .mloop 
0bd2			 
0bd2				; move down one 
0bd2			.mgod: 
0bd2 3a e4 f9				ld a, (store_tmp2) 
0bd5 3c					inc a 
0bd6 32 e4 f9				ld (store_tmp2), a 
0bd9 c3 2a 0b				jp .mloop 
0bdc			 
0bdc			 
0bdc			.goend: 
0bdc					; get selected item number 
0bdc			 
0bdc 3a e4 f9				ld a, (store_tmp2) 
0bdf 3c					inc a 
0be0			 
0be0			.goend2: 
0be0 f5					push af 
0be1			 
0be1					; restore active fb 
0be1					; TODO BUG assumes fb1 
0be1			 
0be1 21 02 fb				ld hl, display_fb1 
0be4 22 5e fa				ld (display_fb_active), hl 
0be7			 
0be7					; restore main regs 
0be7			 
0be7			 
0be7 cd 09 0b				call update_display 
0bea			 
0bea f1					pop af 
0beb			 
0beb c9				ret 
0bec			 
0bec .. 00		.msel:   db ">",0 
0bee .. 00		.mup:   db "^",0 
0bf0 .. 00		.mdown:   db "v",0 
0bf2			 
0bf2			 
0bf2			; eof 
0bf2			 
# End of file firmware_display.asm
0bf2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0bf2			; random number generators 
0bf2			 
0bf2			 
0bf2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0bf2			 
0bf2			 
0bf2			;-----> Generate a random number 
0bf2			; output a=answer 0<=a<=255 
0bf2			; all registers are preserved except: af 
0bf2			random: 
0bf2 e5			        push    hl 
0bf3 d5			        push    de 
0bf4 2a 40 fa		        ld      hl,(randData) 
0bf7 ed 5f		        ld      a,r 
0bf9 57			        ld      d,a 
0bfa 5e			        ld      e,(hl) 
0bfb 19			        add     hl,de 
0bfc 85			        add     a,l 
0bfd ac			        xor     h 
0bfe 22 40 fa		        ld      (randData),hl 
0c01 d1			        pop     de 
0c02 e1			        pop     hl 
0c03 c9			        ret 
0c04			 
0c04			 
0c04			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0c04			 
0c04			 
0c04			 
0c04			;------LFSR------ 
0c04			;James Montelongo 
0c04			;optimized by Spencer Putt 
0c04			;out: 
0c04			; a = 8 bit random number 
0c04			RandLFSR: 
0c04 21 46 fa		        ld hl,LFSRSeed+4 
0c07 5e			        ld e,(hl) 
0c08 23			        inc hl 
0c09 56			        ld d,(hl) 
0c0a 23			        inc hl 
0c0b 4e			        ld c,(hl) 
0c0c 23			        inc hl 
0c0d 7e			        ld a,(hl) 
0c0e 47			        ld b,a 
0c0f cb 13		        rl e  
0c11 cb 12			rl d 
0c13 cb 11		        rl c  
0c15 17				rla 
0c16 cb 13		        rl e  
0c18 cb 12			rl d 
0c1a cb 11		        rl c  
0c1c 17				rla 
0c1d cb 13		        rl e  
0c1f cb 12			rl d 
0c21 cb 11		        rl c  
0c23 17				rla 
0c24 67			        ld h,a 
0c25 cb 13		        rl e  
0c27 cb 12			rl d 
0c29 cb 11		        rl c  
0c2b 17				rla 
0c2c a8			        xor b 
0c2d cb 13		        rl e  
0c2f cb 12			rl d 
0c31 ac			        xor h 
0c32 a9			        xor c 
0c33 aa			        xor d 
0c34 21 48 fa		        ld hl,LFSRSeed+6 
0c37 11 49 fa		        ld de,LFSRSeed+7 
0c3a 01 07 00		        ld bc,7 
0c3d ed b8		        lddr 
0c3f 12			        ld (de),a 
0c40 c9			        ret 
0c41			 
0c41			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0c41			 
0c41			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0c41			 
0c41			 
0c41			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0c41			 
0c41			prng16: 
0c41			;Inputs: 
0c41			;   (seed1) contains a 16-bit seed value 
0c41			;   (seed2) contains a NON-ZERO 16-bit seed value 
0c41			;Outputs: 
0c41			;   HL is the result 
0c41			;   BC is the result of the LCG, so not that great of quality 
0c41			;   DE is preserved 
0c41			;Destroys: 
0c41			;   AF 
0c41			;cycle: 4,294,901,760 (almost 4.3 billion) 
0c41			;160cc 
0c41			;26 bytes 
0c41 2a 3a fa		    ld hl,(seed1) 
0c44 44			    ld b,h 
0c45 4d			    ld c,l 
0c46 29			    add hl,hl 
0c47 29			    add hl,hl 
0c48 2c			    inc l 
0c49 09			    add hl,bc 
0c4a 22 3a fa		    ld (seed1),hl 
0c4d 2a 38 fa		    ld hl,(seed2) 
0c50 29			    add hl,hl 
0c51 9f			    sbc a,a 
0c52 e6 2d		    and %00101101 
0c54 ad			    xor l 
0c55 6f			    ld l,a 
0c56 22 38 fa		    ld (seed2),hl 
0c59 09			    add hl,bc 
0c5a c9			    ret 
0c5b			 
0c5b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0c5b			 
0c5b			rand32: 
0c5b			;Inputs: 
0c5b			;   (seed1_0) holds the lower 16 bits of the first seed 
0c5b			;   (seed1_1) holds the upper 16 bits of the first seed 
0c5b			;   (seed2_0) holds the lower 16 bits of the second seed 
0c5b			;   (seed2_1) holds the upper 16 bits of the second seed 
0c5b			;   **NOTE: seed2 must be non-zero 
0c5b			;Outputs: 
0c5b			;   HL is the result 
0c5b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0c5b			;Destroys: 
0c5b			;   AF 
0c5b			;Tested and passes all CAcert tests 
0c5b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0c5b			;it has a period of 18,446,744,069,414,584,320 
0c5b			;roughly 18.4 quintillion. 
0c5b			;LFSR taps: 0,2,6,7  = 11000101 
0c5b			;291cc 
0c5b			;seed1_0=$+1 
0c5b			;    ld hl,12345 
0c5b			;seed1_1=$+1 
0c5b			;    ld de,6789 
0c5b			;    ld b,h 
0c5b			;    ld c,l 
0c5b			;    add hl,hl \ rl e \ rl d 
0c5b			;    add hl,hl \ rl e \ rl d 
0c5b			;    inc l 
0c5b			;    add hl,bc 
0c5b			;    ld (seed1_0),hl 
0c5b			;    ld hl,(seed1_1) 
0c5b			;    adc hl,de 
0c5b			;    ld (seed1_1),hl 
0c5b			;    ex de,hl 
0c5b			;seed2_0=$+1 
0c5b			;    ld hl,9876 
0c5b			;seed2_1=$+1 
0c5b			;    ld bc,54321 
0c5b			;    add hl,hl \ rl c \ rl b 
0c5b			;    ld (seed2_1),bc 
0c5b			;    sbc a,a 
0c5b			;    and %11000101 
0c5b			;    xor l 
0c5b			;    ld l,a 
0c5b			;    ld (seed2_0),hl 
0c5b			;    ex de,hl 
0c5b			;    add hl,bc 
0c5b			;    ret 
0c5b			; 
0c5b			 
0c5b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0c5b			; 20 bytes, 86 cycles (excluding ret) 
0c5b			 
0c5b			; returns   hl = pseudorandom number 
0c5b			; corrupts   a 
0c5b			 
0c5b			; generates 16-bit pseudorandom numbers with a period of 65535 
0c5b			; using the xorshift method: 
0c5b			 
0c5b			; hl ^= hl << 7 
0c5b			; hl ^= hl >> 9 
0c5b			; hl ^= hl << 8 
0c5b			 
0c5b			; some alternative shift triplets which also perform well are: 
0c5b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0c5b			 
0c5b			;  org 32768 
0c5b			 
0c5b			xrnd: 
0c5b 2a 3e fa		  ld hl,(xrandc)       ; seed must not be 0 
0c5e 3e 00		  ld a,0 
0c60 bd			  cp l 
0c61 20 02		  jr nz, .xrnd1 
0c63 2e 01		  ld l, 1 
0c65			.xrnd1: 
0c65			 
0c65 7c			  ld a,h 
0c66 1f			  rra 
0c67 7d			  ld a,l 
0c68 1f			  rra 
0c69 ac			  xor h 
0c6a 67			  ld h,a 
0c6b 7d			  ld a,l 
0c6c 1f			  rra 
0c6d 7c			  ld a,h 
0c6e 1f			  rra 
0c6f ad			  xor l 
0c70 6f			  ld l,a 
0c71 ac			  xor h 
0c72 67			  ld h,a 
0c73			 
0c73 22 3e fa		  ld (xrandc),hl 
0c76			 
0c76 c9			  ret 
0c77			;  
0c77			 
0c77			 
0c77			;;;; int maths 
0c77			 
0c77			; https://map.grauw.nl/articles/mult_div_shifts.php 
0c77			; Divide 16-bit values (with 16-bit result) 
0c77			; In: Divide BC by divider DE 
0c77			; Out: BC = result, HL = rest 
0c77			; 
0c77			Div16: 
0c77 21 00 00		    ld hl,0 
0c7a 78			    ld a,b 
0c7b 06 08		    ld b,8 
0c7d			Div16_Loop1: 
0c7d 17			    rla 
0c7e ed 6a		    adc hl,hl 
0c80 ed 52		    sbc hl,de 
0c82 30 01		    jr nc,Div16_NoAdd1 
0c84 19			    add hl,de 
0c85			Div16_NoAdd1: 
0c85 10 f6		    djnz Div16_Loop1 
0c87 17			    rla 
0c88 2f			    cpl 
0c89 47			    ld b,a 
0c8a 79			    ld a,c 
0c8b 48			    ld c,b 
0c8c 06 08		    ld b,8 
0c8e			Div16_Loop2: 
0c8e 17			    rla 
0c8f ed 6a		    adc hl,hl 
0c91 ed 52		    sbc hl,de 
0c93 30 01		    jr nc,Div16_NoAdd2 
0c95 19			    add hl,de 
0c96			Div16_NoAdd2: 
0c96 10 f6		    djnz Div16_Loop2 
0c98 17			    rla 
0c99 2f			    cpl 
0c9a 41			    ld b,c 
0c9b 4f			    ld c,a 
0c9c c9			ret 
0c9d			 
0c9d			 
0c9d			;http://z80-heaven.wikidot.com/math 
0c9d			; 
0c9d			;Inputs: 
0c9d			;     DE and A are factors 
0c9d			;Outputs: 
0c9d			;     A is not changed 
0c9d			;     B is 0 
0c9d			;     C is not changed 
0c9d			;     DE is not changed 
0c9d			;     HL is the product 
0c9d			;Time: 
0c9d			;     342+6x 
0c9d			; 
0c9d			Mult16: 
0c9d			 
0c9d 06 08		     ld b,8          ;7           7 
0c9f 21 00 00		     ld hl,0         ;10         10 
0ca2 29			       add hl,hl     ;11*8       88 
0ca3 07			       rlca          ;4*8        32 
0ca4 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0ca6 19			         add hl,de   ;--         -- 
0ca7 10 f9		       djnz $-5      ;13*7+8     99 
0ca9 c9			ret 
0caa			 
0caa			; 
0caa			; Square root of 16-bit value 
0caa			; In:  HL = value 
0caa			; Out:  D = result (rounded down) 
0caa			; 
0caa			;Sqr16: 
0caa			;    ld de,#0040 
0caa			;    ld a,l 
0caa			;    ld l,h 
0caa			;    ld h,d 
0caa			;    or a 
0caa			;    ld b,8 
0caa			;Sqr16_Loop: 
0caa			;    sbc hl,de 
0caa			;    jr nc,Sqr16_Skip 
0caa			;    add hl,de 
0caa			;Sqr16_Skip: 
0caa			;    ccf 
0caa			;    rl d 
0caa			;    add a,a 
0caa			;    adc hl,hl 
0caa			;    add a,a 
0caa			;    adc hl,hl 
0caa			;    djnz Sqr16_Loop 
0caa			;    ret 
0caa			; 
0caa			; 
0caa			; Divide 8-bit values 
0caa			; In: Divide E by divider C 
0caa			; Out: A = result, B = rest 
0caa			; 
0caa			Div8: 
0caa af			    xor a 
0cab 06 08		    ld b,8 
0cad			Div8_Loop: 
0cad cb 13		    rl e 
0caf 17			    rla 
0cb0 91			    sub c 
0cb1 30 01		    jr nc,Div8_NoAdd 
0cb3 81			    add a,c 
0cb4			Div8_NoAdd: 
0cb4 10 f7		    djnz Div8_Loop 
0cb6 47			    ld b,a 
0cb7 7b			    ld a,e 
0cb8 17			    rla 
0cb9 2f			    cpl 
0cba c9			    ret 
0cbb			 
0cbb			; 
0cbb			; Multiply 8-bit value with a 16-bit value (unrolled) 
0cbb			; In: Multiply A with DE 
0cbb			; Out: HL = result 
0cbb			; 
0cbb			Mult12U: 
0cbb 2e 00		    ld l,0 
0cbd 87			    add a,a 
0cbe 30 01		    jr nc,Mult12U_NoAdd0 
0cc0 19			    add hl,de 
0cc1			Mult12U_NoAdd0: 
0cc1 29			    add hl,hl 
0cc2 87			    add a,a 
0cc3 30 01		    jr nc,Mult12U_NoAdd1 
0cc5 19			    add hl,de 
0cc6			Mult12U_NoAdd1: 
0cc6 29			    add hl,hl 
0cc7 87			    add a,a 
0cc8 30 01		    jr nc,Mult12U_NoAdd2 
0cca 19			    add hl,de 
0ccb			Mult12U_NoAdd2: 
0ccb 29			    add hl,hl 
0ccc 87			    add a,a 
0ccd 30 01		    jr nc,Mult12U_NoAdd3 
0ccf 19			    add hl,de 
0cd0			Mult12U_NoAdd3: 
0cd0 29			    add hl,hl 
0cd1 87			    add a,a 
0cd2 30 01		    jr nc,Mult12U_NoAdd4 
0cd4 19			    add hl,de 
0cd5			Mult12U_NoAdd4: 
0cd5 29			    add hl,hl 
0cd6 87			    add a,a 
0cd7 30 01		    jr nc,Mult12U_NoAdd5 
0cd9 19			    add hl,de 
0cda			Mult12U_NoAdd5: 
0cda 29			    add hl,hl 
0cdb 87			    add a,a 
0cdc 30 01		    jr nc,Mult12U_NoAdd6 
0cde 19			    add hl,de 
0cdf			Mult12U_NoAdd6: 
0cdf 29			    add hl,hl 
0ce0 87			    add a,a 
0ce1 d0			    ret nc 
0ce2 19			    add hl,de 
0ce3 c9			    ret 
0ce4			 
0ce4			; 
0ce4			; Multiply 8-bit value with a 16-bit value (right rotating) 
0ce4			; In: Multiply A with DE 
0ce4			;      Put lowest value in A for most efficient calculation 
0ce4			; Out: HL = result 
0ce4			; 
0ce4			Mult12R: 
0ce4 21 00 00		    ld hl,0 
0ce7			Mult12R_Loop: 
0ce7 cb 3f		    srl a 
0ce9 30 01		    jr nc,Mult12R_NoAdd 
0ceb 19			    add hl,de 
0cec			Mult12R_NoAdd: 
0cec cb 23		    sla e 
0cee cb 12		    rl d 
0cf0 b7			    or a 
0cf1 c2 e7 0c		    jp nz,Mult12R_Loop 
0cf4 c9			    ret 
0cf5			 
0cf5			; 
0cf5			; Multiply 16-bit values (with 32-bit result) 
0cf5			; In: Multiply BC with DE 
0cf5			; Out: BCHL = result 
0cf5			; 
0cf5			Mult32: 
0cf5 79			    ld a,c 
0cf6 48			    ld c,b 
0cf7 21 00 00		    ld hl,0 
0cfa 06 10		    ld b,16 
0cfc			Mult32_Loop: 
0cfc 29			    add hl,hl 
0cfd 17			    rla 
0cfe cb 11		    rl c 
0d00 30 07		    jr nc,Mult32_NoAdd 
0d02 19			    add hl,de 
0d03 ce 00		    adc a,0 
0d05 d2 09 0d		    jp nc,Mult32_NoAdd 
0d08 0c			    inc c 
0d09			Mult32_NoAdd: 
0d09 10 f1		    djnz Mult32_Loop 
0d0b 41			    ld b,c 
0d0c 4f			    ld c,a 
0d0d c9			    ret 
0d0e			 
0d0e			 
0d0e			 
0d0e			; 
0d0e			; Multiply 8-bit values 
0d0e			; In:  Multiply H with E 
0d0e			; Out: HL = result 
0d0e			; 
0d0e			Mult8: 
0d0e 16 00		    ld d,0 
0d10 6a			    ld l,d 
0d11 06 08		    ld b,8 
0d13			Mult8_Loop: 
0d13 29			    add hl,hl 
0d14 30 01		    jr nc,Mult8_NoAdd 
0d16 19			    add hl,de 
0d17			Mult8_NoAdd: 
0d17 10 fa		    djnz Mult8_Loop 
0d19 c9			    ret 
0d1a			 
0d1a			 
0d1a			 
0d1a			 
0d1a			 
0d1a			 
0d1a			 
0d1a			 
0d1a			;;http://z80-heaven.wikidot.com/math 
0d1a			;;This divides DE by BC, storing the result in DE, remainder in HL 
0d1a			; 
0d1a			;DE_Div_BC:          ;1281-2x, x is at most 16 
0d1a			;     ld a,16        ;7 
0d1a			;     ld hl,0        ;10 
0d1a			;     jp $+5         ;10 
0d1a			;.DivLoop: 
0d1a			;       add hl,bc    ;-- 
0d1a			;       dec a        ;64 
0d1a			;       jr z,.DivLoopEnd        ;86 
0d1a			; 
0d1a			;       sla e        ;128 
0d1a			;       rl d         ;128 
0d1a			;       adc hl,hl    ;240 
0d1a			;       sbc hl,bc    ;240 
0d1a			;       jr nc,.DivLoop ;23|21 
0d1a			;       inc e        ;-- 
0d1a			;       jp .DivLoop+1 
0d1a			; 
0d1a			;.DivLoopEnd: 
0d1a			 
0d1a			;HL_Div_C: 
0d1a			;Inputs: 
0d1a			;     HL is the numerator 
0d1a			;     C is the denominator 
0d1a			;Outputs: 
0d1a			;     A is the remainder 
0d1a			;     B is 0 
0d1a			;     C is not changed 
0d1a			;     DE is not changed 
0d1a			;     HL is the quotient 
0d1a			; 
0d1a			;       ld b,16 
0d1a			;       xor a 
0d1a			;         add hl,hl 
0d1a			;         rla 
0d1a			;         cp c 
0d1a			;         jr c,$+4 
0d1a			;           inc l 
0d1a			;           sub c 
0d1a			;         djnz $-7 
0d1a			 
0d1a			; https://plutiedev.com/z80-add-8bit-to-16bit 
0d1a			 
0d1a			addatohl: 
0d1a 85			    add   a, l    ; A = A+L 
0d1b 6f			    ld    l, a    ; L = A+L 
0d1c 8c			    adc   a, h    ; A = A+L+H+carry 
0d1d 95			    sub   l       ; A = H+carry 
0d1e 67			    ld    h, a    ; H = H+carry 
0d1f c9			ret 
0d20			 
0d20			addatode: 
0d20 83			    add   a, e    ; A = A+L 
0d21 5f			    ld    e, a    ; L = A+L 
0d22 8a			    adc   a, d    ; A = A+L+H+carry 
0d23 93			    sub   e       ; A = H+carry 
0d24 57			    ld    d, a    ; H = H+carry 
0d25 c9			ret 
0d26			 
0d26			 
0d26			addatobc: 
0d26 81			    add   a, c    ; A = A+L 
0d27 4f			    ld    c, a    ; L = A+L 
0d28 88			    adc   a, b    ; A = A+L+H+carry 
0d29 91			    sub   c       ; A = H+carry 
0d2a 47			    ld    b, a    ; H = H+carry 
0d2b c9			ret 
0d2c			 
0d2c			subafromhl: 
0d2c			   ; If A=0 do nothing 
0d2c			    ; Otherwise flip A's sign. Since 
0d2c			    ; the upper byte becomes -1, also 
0d2c			    ; substract 1 from H. 
0d2c ed 44		    neg 
0d2e ca 37 0d		    jp    z, Skip 
0d31 25			    dec   h 
0d32			     
0d32			    ; Now add the low byte as usual 
0d32			    ; Two's complement takes care of 
0d32			    ; ensuring the result is correct 
0d32 85			    add   a, l 
0d33 6f			    ld    l, a 
0d34 8c			    adc   a, h 
0d35 95			    sub   l 
0d36 67			    ld    h, a 
0d37			Skip: 
0d37 c9				ret 
0d38			 
0d38			 
0d38			; compare hl and de 
0d38			; returns:  
0d38			; if hl = de, z=1, s=0, c0=0 
0d38			; if hl > de, z=0, s=0, c=0 
0d38			; if hl < de, z=0, s=1, c=1 
0d38			cmp16:	 
0d38 b7				or a 
0d39 ed 52			sbc hl,de 
0d3b e0				ret po 
0d3c 7c				ld a,h 
0d3d 1f				rra 
0d3e ee 40			xor 01000000B 
0d40 37				scf 
0d41 8f				adc a,a 
0d42 c9				ret 
0d43			 
0d43			 
0d43			; test if hl contains zero   - A is destroyed 
0d43			 
0d43			ishlzero:    
0d43 b7				or a     ; reset flags 
0d44 7c				ld a, h 
0d45 b5				or l        	 
0d46			 
0d46 c9				ret 
0d47			 
0d47			 
0d47			 
0d47			 
0d47			if FORTH_ENABLE_FLOATMATH 
0d47			;include "float/bbcmath.z80" 
0d47			include "float/lpfpcalc.asm" 
0d47			endif 
0d47			 
0d47			 
0d47			; eof 
0d47			 
# End of file firmware_maths.asm
0d47			include "firmware_strings.asm"   ; string handling  
0d47			 
0d47			 
0d47			; TODO string len 
0d47			; input text string, end on cr with zero term 
0d47			; a offset into frame buffer to start prompt 
0d47			; d is max length 
0d47			; e is display size TODO 
0d47			; c is current cursor position 
0d47			; hl is ptr to where string will be stored 
0d47			 
0d47			 
0d47			; TODO check limit of buffer for new inserts 
0d47			; TODO check insert does not push beyond buffer 
0d47			; TODO scroll in a limited display area 
0d47			; TODO scroll whole screen on page wrap 
0d47			 
0d47			 
0d47			; TODO handle KEY_PREVWORD 
0d47			; TODO handle KEY_NEXTWORD 
0d47			; TODO handle KEY_HOME 
0d47			; TODO handle KEY_END 
0d47			; TODO use LCD cursor? 
0d47			 
0d47 32 b6 fb		input_str:    	ld (input_at_pos),a      ; save display position to start 
0d4a 81					add c 
0d4b 32 b4 fb				ld (input_at_cursor),a	; save draw pos of cursor 
0d4e 22 b9 fb				ld (input_start), hl     ; save ptr to buffer 
0d51 79					ld a, c 
0d52 cd 1a 0d				call addatohl 
0d55 22 bb fb				ld (input_ptr), hl     ; save ptr to point under the cursor 
0d58 7a					ld a,d 
0d59 32 b8 fb			        ld (input_size), a       ; save length of input area 
0d5c 79					ld a, c 
0d5d 32 a7 fb				ld (input_cursor),a      ; init cursor start position  
0d60 7b					ld a,e 
0d61 32 b7 fb			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0d64					 
0d64					 
0d64			 
0d64			;		ld a,(input_ptr) 
0d64			;		ld (input_under_cursor),a 	; save what is under the cursor 
0d64			 
0d64			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0d64					; init cursor shape if not set by the cin routines 
0d64 21 56 fa				ld hl, cursor_shape 
0d67 3e ff				ld a, 255 
0d69 77					ld (hl), a 
0d6a 23					inc hl 
0d6b 3e 00				ld a, 0 
0d6d 77					ld (hl), a 
0d6e			 
0d6e 3e 0f				ld a, CUR_BLINK_RATE 
0d70 32 b2 fb				ld (input_cur_flash), a 
0d73 3e 01				ld a, 1 
0d75 32 b1 fb				ld (input_cur_onoff),a 
0d78			 
0d78			;	if DEBUG_INPUT 
0d78			;		push af 
0d78			;		ld a, 'I' 
0d78			;		ld (debug_mark),a 
0d78			;		pop af 
0d78			;		CALLMONITOR 
0d78			;	endif 
0d78			.is1:		; main entry loop 
0d78			 
0d78			 
0d78			 
0d78					; pause 1ms 
0d78			 
0d78 3e 01				ld a, 1 
0d7a cd 4b 0a				call aDelayInMS 
0d7d			 
0d7d					; dec flash counter 
0d7d 3a b2 fb				ld a, (input_cur_flash) 
0d80 3d					dec a 
0d81 32 b2 fb				ld (input_cur_flash), a 
0d84 fe 00				cp 0 
0d86 20 0d				jr nz, .nochgstate 
0d88			 
0d88			 
0d88					; change state 
0d88 3a b1 fb				ld a,(input_cur_onoff) 
0d8b ed 44				neg 
0d8d 32 b1 fb				ld (input_cur_onoff),a 
0d90			 
0d90			 
0d90					; reset on change of state 
0d90 3e 0f				ld a, CUR_BLINK_RATE 
0d92 32 b2 fb				ld (input_cur_flash), a 
0d95			 
0d95			.nochgstate: 
0d95					 
0d95					 
0d95			 
0d95					; display cursor  
0d95			 
0d95			;		ld hl, (input_start) 
0d95			;		ld a, (input_cursor) 
0d95			;		call addatohl 
0d95			 
0d95					; get char under cursor and replace with cursor 
0d95 2a bb fb		ld hl, (input_ptr) 
0d98			;		ld a, (hl) 
0d98			;		ld (input_under_cursor),a 
0d98			;		ld a, '_' 
0d98			;		ld (hl), a 
0d98			 
0d98					; display string 
0d98			 
0d98 ed 5b b9 fb			ld de, (input_start) 
0d9c 3a b6 fb				ld a, (input_at_pos) 
0d9f cd f9 0a				call str_at_display 
0da2			;	        call update_display 
0da2			 
0da2					; find place to put the cursor 
0da2			;		add h 
0da2			;		ld l, display_row_1 
0da2			;		sub l 
0da2			; (input_at_pos) 
0da2					;ld c, a 
0da2			;		ld a, (input_cursor) 
0da2			;		ld l, (input_at_pos) 
0da2			;		;ld b, h 
0da2			;		add l 
0da2			;		ld (input_at_cursor),a 
0da2					;ld l,h 
0da2			 
0da2			;		ld h, 0 
0da2			;		ld l,(input_at_pos) 
0da2			;		ld a, (input_cursor) 
0da2			;		call addatohl 
0da2			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0da2			;		call subafromhl 
0da2			;		ld a,l 
0da2			;		ld (input_at_cursor), a 
0da2			 
0da2				if DEBUG_INPUT 
0da2					ld a, (hardware_diag) 
0da2					cp 0 
0da2					jr z, .skip_input_diag 
0da2			 
0da2					ld a,(input_at_pos) 
0da2					ld hl, LFSRSeed 
0da2					call hexout 
0da2					ld a, (input_cursor) 
0da2					ld hl, LFSRSeed+2 
0da2					call hexout 
0da2					ld a,(input_at_cursor) 
0da2					ld hl, LFSRSeed+4 
0da2					call hexout 
0da2			 
0da2					ld a,(input_cur_onoff) 
0da2					ld hl, LFSRSeed+6 
0da2					call hexout 
0da2			 
0da2					ld a,(input_cur_flash) 
0da2					ld hl, LFSRSeed+8 
0da2					call hexout 
0da2			 
0da2					ld a,(input_len) 
0da2					ld hl, LFSRSeed+10 
0da2					call hexout 
0da2					ld hl, LFSRSeed+12 
0da2					ld a, 0 
0da2					ld (hl),a 
0da2					ld a, display_row_4 
0da2					ld de, LFSRSeed 
0da2					call str_at_display 
0da2					.skip_input_diag: 
0da2				endif 
0da2			 
0da2					; decide on if we are showing the cursor this time round 
0da2			 
0da2 3a b1 fb				ld a, (input_cur_onoff) 
0da5 fe ff				cp 255 
0da7 28 13				jr z, .skipcur 
0da9			 
0da9			 
0da9 3a b4 fb				ld a,(input_at_cursor) 
0dac 11 56 fa				ld de, cursor_shape 
0daf cd f9 0a				call str_at_display 
0db2			 
0db2					; save length of current input string 
0db2 2a b9 fb				ld hl, (input_start) 
0db5 cd 78 11				call strlenz 
0db8 7d					ld a,l 
0db9 32 ac fb				ld (input_len),a 
0dbc			 
0dbc			.skipcur: 
0dbc			 
0dbc cd 09 0b			        call update_display 
0dbf					 
0dbf			 
0dbf			 
0dbf					; wait 
0dbf				 
0dbf					; TODO loop without wait to flash the cursor and char under cursor	 
0dbf cd 23 67				call cin    ; _wait 
0dc2			 
0dc2 fe 00				cp 0 
0dc4 ca 78 0d				jp z, .is1 
0dc7			 
0dc7					; get ptr to char to input into 
0dc7			 
0dc7 4f					ld c,a 
0dc8 2a b9 fb				ld hl, (input_start) 
0dcb 3a a7 fb				ld a, (input_cursor) 
0dce cd 1a 0d				call addatohl 
0dd1 22 bb fb				ld (input_ptr), hl 
0dd4 79					ld a,c 
0dd5			 
0dd5					; replace char under cursor 
0dd5			 
0dd5			;		ld hl, (input_ptr) 
0dd5			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0dd5			;		ld (hl), a 
0dd5			 
0dd5			;	if DEBUG_INPUT 
0dd5			;		push af 
0dd5			;		ld a, 'i' 
0dd5			;		ld (debug_mark),a 
0dd5			;		pop af 
0dd5			;		CALLMONITOR 
0dd5			;	endif 
0dd5 fe 0e				cp KEY_HOME 
0dd7 20 0e				jr nz, .iske 
0dd9			 
0dd9 3a b6 fb				ld a, (input_at_pos) 
0ddc 32 b4 fb				ld (input_at_cursor),a 
0ddf 3e 00				ld a, 0 
0de1 32 a7 fb				ld (input_cursor), a 
0de4 c3 78 0d				jp .is1 
0de7					 
0de7 fe 0f		.iske:		cp KEY_END 
0de9 20 03				jr nz, .isknw 
0deb c3 78 0d				jp .is1 
0dee			 
0dee fe 06		.isknw:		cp KEY_NEXTWORD 
0df0 20 1b				jr nz, .iskpw 
0df2			 
0df2 2a bb fb		.isknwm:	ld hl, (input_ptr) 
0df5 7e					ld a,(hl)	 
0df6 fe 00				cp 0 
0df8 ca 78 0d				jp z, .is1    ; end of string 
0dfb fe 20				cp ' ' 
0dfd ca 78 0d				jp z, .is1    ; end of word 
0e00 23					inc hl 
0e01 22 bb fb				ld (input_ptr), hl 
0e04 3a b4 fb				ld a, (input_at_cursor) 
0e07 3c					inc a 
0e08 32 b4 fb				ld (input_at_cursor), a 
0e0b 18 e5				jr .isknwm 
0e0d			 
0e0d fe 07		.iskpw:		cp KEY_PREVWORD 
0e0f 20 1b				jr nz, .iskl 
0e11			.iskpwm:	 
0e11 2a bb fb				ld hl, (input_ptr) 
0e14 7e					ld a,(hl)	 
0e15 fe 00				cp 0  
0e17 ca 78 0d				jp z, .is1    ; end of string 
0e1a fe 20				cp ' ' 
0e1c ca 78 0d				jp z, .is1    ; end of word 
0e1f 2b					dec hl 
0e20 22 bb fb				ld (input_ptr), hl 
0e23 3a b4 fb				ld a, (input_at_cursor) 
0e26 3d					dec a 
0e27 32 b4 fb				ld (input_at_cursor), a 
0e2a 18 e5				jr .iskpwm 
0e2c			 
0e2c			 
0e2c fe 0b		.iskl:		cp KEY_LEFT 
0e2e 20 27				jr nz, .isk1 
0e30			 
0e30 3a a7 fb				ld a, (input_cursor) 
0e33			 
0e33 fe 00				cp 0 
0e35 ca 78 0d				jp z, .is1 		; at start of line to ignore  
0e38			 
0e38 3d					dec  a 		; TODO check underflow 
0e39 32 a7 fb				ld (input_cursor), a 
0e3c			 
0e3c 2a bb fb				ld hl, (input_ptr) 
0e3f 2b					dec hl 
0e40 22 bb fb				ld (input_ptr), hl 
0e43					 
0e43 3a b4 fb				ld a, (input_at_cursor) 
0e46 3d					dec a 
0e47 32 b4 fb				ld (input_at_cursor), a 
0e4a			 
0e4a 3e 01				ld a, 1		; show cursor moving 
0e4c 32 b1 fb				ld (input_cur_onoff),a 
0e4f 3e 0f				ld a, CUR_BLINK_RATE 
0e51 32 b2 fb				ld (input_cur_flash), a 
0e54			 
0e54 c3 78 0d				jp .is1 
0e57			 
0e57 fe 0c		.isk1:		cp KEY_RIGHT 
0e59 20 2a				jr nz, .isk2 
0e5b			 
0e5b 3a ac fb				ld a,(input_len)		; TODO BUG why cant i load e direct? 
0e5e 5f					ld e,a 
0e5f 3a a7 fb				ld a, (input_cursor) 
0e62 bb					cp e 
0e63 ca 78 0d				jp z, .is1		; at the end of string so dont go right 
0e66			 
0e66 3c					inc  a 		; TODO check overflow 
0e67 32 a7 fb				ld (input_cursor), a 
0e6a			 
0e6a 3a b4 fb				ld a, (input_at_cursor) 
0e6d 3c					inc a 
0e6e 32 b4 fb				ld (input_at_cursor), a 
0e71			 
0e71 2a bb fb				ld hl, (input_ptr) 
0e74 23					inc hl 
0e75 22 bb fb				ld (input_ptr), hl 
0e78			 
0e78 3e 01				ld a, 1		; show cursor moving 
0e7a 32 b1 fb				ld (input_cur_onoff),a 
0e7d 3e 0f				ld a, CUR_BLINK_RATE 
0e7f 32 b2 fb				ld (input_cur_flash), a 
0e82			 
0e82 c3 78 0d				jp .is1 
0e85			 
0e85 fe 05		.isk2:		cp KEY_UP 
0e87			 
0e87 20 26				jr nz, .isk3 
0e89			 
0e89					; swap last command with the current on 
0e89			 
0e89					; move cursor to start of string 
0e89 2a b9 fb				ld hl, (input_start) 
0e8c 22 bb fb				ld (input_ptr), hl 
0e8f			 
0e8f 3a b6 fb				ld a, (input_at_pos) 
0e92 32 b4 fb				ld (input_at_cursor), a 
0e95			 
0e95 3e 00				ld a, 0 
0e97 32 a7 fb				ld (input_cursor), a 
0e9a					 
0e9a					; swap input and last command buffers 
0e9a			 
0e9a 21 ca f2				ld hl, os_cli_cmd 
0e9d 11 c9 f3				ld de, os_last_cmd 
0ea0 06 ff				ld b, 255 
0ea2 7e			.swap1:		ld a, (hl) 
0ea3 4f					ld c,a 
0ea4 1a					ld a, (de) 
0ea5 77					ld (hl), a 
0ea6 79					ld a,c 
0ea7 12					ld (de),a 
0ea8 23					inc hl 
0ea9 13					inc de 
0eaa 10 f6				djnz .swap1 
0eac			 
0eac			 
0eac			 
0eac			 
0eac			 
0eac c3 78 0d				jp .is1 
0eaf			 
0eaf fe 08		.isk3:		cp KEY_BS 
0eb1 20 3c				jr nz, .isk4 
0eb3			 
0eb3 3a a7 fb				ld a, (input_cursor) 
0eb6			 
0eb6 fe 00				cp 0 
0eb8 ca 78 0d				jp z, .is1 		; at start of line to ignore  
0ebb			 
0ebb 3d					dec  a 		; TODO check underflow 
0ebc 32 a7 fb				ld (input_cursor), a 
0ebf			 
0ebf					; hl is source 
0ebf					; de needs to be source - 1 
0ebf			 
0ebf			;		ld a, 0 
0ebf			;		dec hl 
0ebf			;		ld (hl), a 
0ebf			 
0ebf 2a bb fb				ld hl, (input_ptr) 
0ec2 2b					dec hl 
0ec3 22 bb fb				ld (input_ptr), hl 
0ec6			 
0ec6					; shift all data 
0ec6			 
0ec6 e5					push hl 
0ec7 23					inc hl 
0ec8 d1					pop de 
0ec9 3a ac fb				ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ecc 4f					ld c,a 
0ecd 06 00				ld b,0 
0ecf ed b0				ldir  
0ed1			 
0ed1			 
0ed1			 
0ed1			 
0ed1 3a b4 fb				ld a, (input_at_cursor) 
0ed4 3d					dec a 
0ed5 32 b4 fb				ld (input_at_cursor), a 
0ed8			 
0ed8			 
0ed8 3e 01				ld a, 1		; show cursor moving 
0eda 32 b1 fb				ld (input_cur_onoff),a 
0edd 3e 0f				ld a, CUR_BLINK_RATE 
0edf 32 b2 fb				ld (input_cur_flash), a 
0ee2			 
0ee2					; remove char 
0ee2 3a b4 fb				ld a, (input_at_cursor) 
0ee5 3c					inc a 
0ee6 11 70 0f				ld de,.iblank 
0ee9 cd f9 0a				call str_at_display 
0eec			 
0eec c3 78 0d				jp .is1 
0eef			 
0eef fe 0d		.isk4:		cp KEY_CR 
0ef1 28 6c				jr z, .endinput 
0ef3			 
0ef3					; else add the key press to the end 
0ef3			 
0ef3 4f					ld c, a			; save key pressed 
0ef4			 
0ef4 7e					ld a,(hl)		; get what is currently under char 
0ef5			 
0ef5 fe 00				cp 0			; we are at the end of the string 
0ef7 20 2f				jr nz, .onchar 
0ef9					 
0ef9					; add a char to the end of the string 
0ef9				 
0ef9 71					ld (hl),c 
0efa 23					inc hl 
0efb			;		ld a,' ' 
0efb			;		ld (hl),a 
0efb			;		inc hl 
0efb 3e 00				ld a,0 
0efd 77					ld (hl),a 
0efe 2b					dec hl 
0eff			 
0eff 3a a7 fb				ld a, (input_cursor) 
0f02 3c					inc a				; TODO check max string length and scroll  
0f03 32 a7 fb				ld (input_cursor), a		; inc cursor pos 
0f06							 
0f06 3a b4 fb				ld a, (input_at_cursor) 
0f09 3c					inc a 
0f0a 32 b4 fb				ld (input_at_cursor), a 
0f0d			 
0f0d 2a bb fb				ld hl, (input_ptr) 
0f10 23					inc hl 
0f11 22 bb fb				ld (input_ptr), hl 
0f14			 
0f14 2a bb fb				ld hl, (input_ptr) 
0f17 23					inc hl 
0f18 22 bb fb				ld (input_ptr), hl 
0f1b			;	if DEBUG_INPUT 
0f1b			;		push af 
0f1b			;		ld a, '+' 
0f1b			;		ld (debug_mark),a 
0f1b			;		pop af 
0f1b			;		CALLMONITOR 
0f1b			;	endif 
0f1b 3e 01				ld a, 1		; show cursor moving 
0f1d 32 b1 fb				ld (input_cur_onoff),a 
0f20 3e 0f				ld a, CUR_BLINK_RATE 
0f22 32 b2 fb				ld (input_cur_flash), a 
0f25 c3 78 0d				jp .is1 
0f28					 
0f28			 
0f28			 
0f28					; if on a char then insert 
0f28			.onchar: 
0f28			 
0f28					; TODO over flow check: make sure insert does not blow out buffer 
0f28			 
0f28					; need to do some maths to use lddr 
0f28			 
0f28 e5					push hl   ; save char pos 
0f29 c5					push bc 
0f2a			 
0f2a 2a b9 fb				ld hl, (input_start) 
0f2d 3a ac fb				ld a, (input_len) 
0f30 cd 1a 0d				call addatohl  		; end of string 
0f33 23					inc hl 
0f34 23					inc hl		; past zero term 
0f35 e5					push hl 
0f36 23					inc hl 
0f37 e5					push hl  
0f38			 
0f38								; start and end of lddr set, now how much to move? 
0f38			 
0f38							 
0f38 3a a7 fb				ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0f3b 47					ld b,a 
0f3c 3a ac fb				ld a,(input_len) 
0f3f 5f					ld e,a 
0f40 90					sub b 
0f41 3c					inc a		;?? 
0f42 3c					inc a		;?? 
0f43 3c					inc a		;?? 
0f44			 
0f44 06 00				ld b,0 
0f46 4f					ld c,a 
0f47			 
0f47				if DEBUG_INPUT 
0f47					push af 
0f47					ld a, 'i' 
0f47					ld (debug_mark),a 
0f47					pop af 
0f47			;		CALLMONITOR 
0f47				endif 
0f47 d1					pop de 
0f48 e1					pop hl 
0f49				if DEBUG_INPUT 
0f49					push af 
0f49					ld a, 'I' 
0f49					ld (debug_mark),a 
0f49					pop af 
0f49			;		CALLMONITOR 
0f49				endif 
0f49 ed b8				lddr 
0f4b				 
0f4b			 
0f4b			 
0f4b					; TODO have a key for insert/overwrite mode???? 
0f4b c1					pop bc 
0f4c e1					pop hl 
0f4d 71					ld (hl), c		; otherwise overwrite current char 
0f4e					 
0f4e			 
0f4e			 
0f4e			 
0f4e 3a a7 fb				ld a, (input_cursor) 
0f51 3c					inc  a 		; TODO check overflow 
0f52 32 a7 fb				ld (input_cursor), a 
0f55			 
0f55 3a b4 fb				ld a, (input_at_cursor) 
0f58 3c					inc a 
0f59 32 b4 fb				ld (input_at_cursor), a 
0f5c			 
0f5c c3 78 0d				jp .is1 
0f5f			 
0f5f			.endinput:	; TODO look for end of string 
0f5f			 
0f5f					; add trailing space for end of token 
0f5f			 
0f5f 2a b9 fb				ld hl, (input_start) 
0f62 3a ac fb				ld a,(input_len) 
0f65 cd 1a 0d				call addatohl 
0f68 3e 20				ld a, ' ' 
0f6a 77					ld (hl),a 
0f6b					; TODO eof of parse marker 
0f6b			 
0f6b 23					inc hl 
0f6c 3e 00				ld a, 0 
0f6e 77					ld (hl),a 
0f6f			 
0f6f			 
0f6f c9					ret 
0f70			 
0f70 .. 00		.iblank: db " ",0 
0f72			 
0f72			 
0f72 32 b6 fb		input_str_prev:	ld (input_at_pos), a 
0f75 22 b9 fb				ld (input_start), hl 
0f78 3e 01				ld a,1			; add cursor 
0f7a 77					ld (hl),a 
0f7b 23					inc hl 
0f7c 3e 00				ld a,0 
0f7e 77					ld (hl),a 
0f7f 22 bb fb				ld (input_ptr), hl 
0f82 7a					ld a,d 
0f83 32 b8 fb				ld (input_size), a 
0f86 3e 00				ld a,0 
0f88 32 a7 fb				ld (input_cursor),a 
0f8b			.instr1:	 
0f8b			 
0f8b					; TODO do block cursor 
0f8b					; TODO switch cursor depending on the modifer key 
0f8b			 
0f8b					; update cursor shape change on key hold 
0f8b			 
0f8b 2a bb fb				ld hl, (input_ptr) 
0f8e 2b					dec hl 
0f8f 3a 56 fa				ld a,(cursor_shape) 
0f92 77					ld (hl), a 
0f93			 
0f93					; display entered text 
0f93 3a b6 fb				ld a,(input_at_pos) 
0f96 cd 41 66		            	CALL fLCD_Pos       ;Position cursor to location in A 
0f99 ed 5b b9 fb	            	LD   de, (input_start) 
0f9d cd 49 66		            	CALL fLCD_Str       ;Display string pointed to by DE 
0fa0			 
0fa0 cd 23 67				call cin 
0fa3 fe 00				cp 0 
0fa5 28 e4				jr z, .instr1 
0fa7			 
0fa7					; proecess keyboard controls first 
0fa7			 
0fa7 2a bb fb				ld hl,(input_ptr) 
0faa			 
0faa fe 0d				cp KEY_CR	 ; pressing enter ends input 
0fac 28 5a				jr z, .instrcr 
0fae			 
0fae fe 08				cp KEY_BS 	; back space 
0fb0 20 0f				jr nz, .instr2 
0fb2					; process back space 
0fb2			 
0fb2					; TODO stop back space if at start of string 
0fb2 2b					dec hl 
0fb3 2b					dec hl ; to over write cursor 
0fb4 3a 56 fa				ld a,(cursor_shape) 
0fb7					;ld a,0 
0fb7 77					ld (hl),a 
0fb8 23					inc hl 
0fb9 3e 20				ld a," " 
0fbb 77					ld (hl),a 
0fbc 22 bb fb				ld (input_ptr),hl 
0fbf					 
0fbf			 
0fbf 18 ca				jr .instr1 
0fc1			 
0fc1 fe 0b		.instr2:	cp KEY_LEFT    ; cursor left 
0fc3 20 06				jr nz, .instr3 
0fc5 2b					dec hl 
0fc6 22 bb fb				ld (input_ptr),hl 
0fc9 18 c0				jr .instr1 
0fcb				 
0fcb fe 0c		.instr3:	cp KEY_RIGHT ; cursor right 
0fcd 20 06				jr nz, .instr4 
0fcf 23					inc hl 
0fd0 22 bb fb				ld (input_ptr),hl 
0fd3 18 b6				jr .instr1 
0fd5			 
0fd5 fe 0e		.instr4:	cp KEY_HOME    ; jump to start of line 
0fd7 20 06				jr nz, .instr5 
0fd9 2b					dec hl 
0fda 22 bb fb				ld (input_ptr),hl 
0fdd 18 ac				jr .instr1 
0fdf			 
0fdf fe 0f		.instr5:	cp KEY_END     ; jump to end of line 
0fe1 20 06				jr nz, .instr6 
0fe3 2b					dec hl 
0fe4 22 bb fb				ld (input_ptr),hl 
0fe7 18 a2				jr .instr1 
0fe9 fe 05		.instr6:        cp KEY_UP      ; recall last command 
0feb 20 0b				jr nz, .instrnew 
0fed			 
0fed 21 a3 ef			ld hl, scratch 
0ff0 11 c9 f3			ld de, os_last_cmd 
0ff3 cd 11 10			call strcpy 
0ff6 18 93				jr .instr1 
0ff8			 
0ff8			 
0ff8			.instrnew:	; no special key pressed to see if we have room to store it 
0ff8			 
0ff8					; TODO do string size test 
0ff8			 
0ff8 2b					dec hl ; to over write cursor 
0ff9 77					ld (hl),a 
0ffa 23					inc hl 
0ffb 3a 56 fa				ld a,(cursor_shape) 
0ffe 77					ld (hl),a 
0fff 23					inc hl 
1000 3e 00				ld a,0 
1002 77					ld (hl),a 
1003			 
1003 22 bb fb				ld (input_ptr),hl 
1006					 
1006 18 83				jr .instr1 
1008 2b			.instrcr:	dec hl		; remove cursor 
1009 3e 20				ld a,' '	; TODO add a trailing space for safety 
100b 77					ld (hl),a 
100c 23					inc hl 
100d 3e 00				ld a,0 
100f 77					ld (hl),a 
1010			 
1010			 
1010					; if at end of line scroll up    
1010					; TODO detecting only end of line 4 for scroll up  
1010			 
1010					;ld   
1010			 
1010 c9					ret 
1011			 
1011			 
1011			; strcpy hl = dest, de source 
1011			 
1011 1a			strcpy:   LD   A, (DE)        ;Get character from string 
1012 b7			            OR   A              ;Null terminator? 
1013 c8			            RET  Z              ;Yes, so finished 
1014 1a					ld a,(de) 
1015 77					ld (hl),a 
1016 13			            INC  DE             ;Point to next character 
1017 23					inc hl 
1018 18 f7		            JR   strcpy       ;Repeat 
101a c9					ret 
101b			 
101b			 
101b			; TODO string_at  
101b			; pass string which starts with lcd offset address and then null term string 
101b			 
101b			; TODO string to dec 
101b			; TODO string to hex 
101b			; TODO byte to string hex 
101b			; TODO byte to string dec 
101b			 
101b			 
101b			 
101b			; from z80uartmonitor 
101b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
101b			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
101b			; pass hl for where to put the text 
101b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
101b c5			hexout:	PUSH BC 
101c f5					PUSH AF 
101d 47					LD B, A 
101e					; Upper nybble 
101e cb 3f				SRL A 
1020 cb 3f				SRL A 
1022 cb 3f				SRL A 
1024 cb 3f				SRL A 
1026 cd 36 10				CALL tohex 
1029 77					ld (hl),a 
102a 23					inc hl	 
102b					 
102b					; Lower nybble 
102b 78					LD A, B 
102c e6 0f				AND 0FH 
102e cd 36 10				CALL tohex 
1031 77					ld (hl),a 
1032 23					inc hl	 
1033					 
1033 f1					POP AF 
1034 c1					POP BC 
1035 c9					RET 
1036					 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1036			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1036			tohex: 
1036 e5					PUSH HL 
1037 d5					PUSH DE 
1038 16 00				LD D, 0 
103a 5f					LD E, A 
103b 21 43 10				LD HL, .DATA 
103e 19					ADD HL, DE 
103f 7e					LD A, (HL) 
1040 d1					POP DE 
1041 e1					POP HL 
1042 c9					RET 
1043			 
1043			.DATA: 
1043 30					DEFB	30h	; 0 
1044 31					DEFB	31h	; 1 
1045 32					DEFB	32h	; 2 
1046 33					DEFB	33h	; 3 
1047 34					DEFB	34h	; 4 
1048 35					DEFB	35h	; 5 
1049 36					DEFB	36h	; 6 
104a 37					DEFB	37h	; 7 
104b 38					DEFB	38h	; 8 
104c 39					DEFB	39h	; 9 
104d 41					DEFB	41h	; A 
104e 42					DEFB	42h	; B 
104f 43					DEFB	43h	; C 
1050 44					DEFB	44h	; D 
1051 45					DEFB	45h	; E 
1052 46					DEFB	46h	; F 
1053			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1053			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1053			;;    subtract $30, if result > 9 then subtract $7 more 
1053			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1053			atohex: 
1053 d6 30				SUB $30 
1055 fe 0a				CP 10 
1057 f8					RET M		; If result negative it was 0-9 so we're done 
1058 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
105a c9					RET		 
105b			 
105b			 
105b			 
105b			 
105b			; Get 2 ASCII characters as hex byte from pointer in hl 
105b			 
105b			BYTERD: 
105b 16 00			LD	D,00h		;Set up 
105d cd 65 10			CALL	HEXCON		;Get byte and convert to hex 
1060 87				ADD	A,A		;First nibble so 
1061 87				ADD	A,A		;multiply by 16 
1062 87				ADD	A,A		; 
1063 87				ADD	A,A		; 
1064 57				LD	D,A		;Save hi nibble in D 
1065			HEXCON: 
1065 7e				ld a, (hl)		;Get next chr 
1066 23				inc hl 
1067 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1069 fe 0a			CP	00Ah		;Is it 0-9 ? 
106b 38 02			JR	C,NALPHA	;If so miss next bit 
106d d6 07			SUB	007h		;Else convert alpha 
106f			NALPHA: 
106f b2				OR	D		;Add hi nibble back 
1070 c9				RET			; 
1071			 
1071			 
1071			; 
1071			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1071			; Since the routines get_byte and therefore get_nibble are called, only valid 
1071			; characters (0-9a-f) are accepted. 
1071			; 
1071			;get_word        push    af 
1071			;                call    get_byte        ; Get the upper byte 
1071			;                ld      h, a 
1071			;                call    get_byte        ; Get the lower byte 
1071			;                ld      l, a 
1071			;                pop     af 
1071			;                ret 
1071			; 
1071			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1071			; the routine get_nibble is used only valid characters are accepted - the  
1071			; input routine only accepts characters 0-9a-f. 
1071			; 
1071 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1072 7e					ld a,(hl) 
1073 23					inc hl 
1074 cd 99 10		                call    nibble2val      ; Get upper nibble 
1077 cb 07		                rlc     a 
1079 cb 07		                rlc     a 
107b cb 07		                rlc     a 
107d cb 07		                rlc     a 
107f 47			                ld      b, a            ; Save upper four bits 
1080 7e					ld a,(hl) 
1081 cd 99 10		                call    nibble2val      ; Get lower nibble 
1084 b0			                or      b               ; Combine both nibbles 
1085 c1			                pop     bc              ; Restore B (and C) 
1086 c9			                ret 
1087			; 
1087			; Get a hexadecimal digit from the serial line. This routine blocks until 
1087			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1087			; to the serial line interface. The lower 4 bits of A contain the value of  
1087			; that particular digit. 
1087			; 
1087			;get_nibble      ld a,(hl)           ; Read a character 
1087			;                call    to_upper        ; Convert to upper case 
1087			;                call    is_hex          ; Was it a hex digit? 
1087			;                jr      nc, get_nibble  ; No, get another character 
1087			 ;               call    nibble2val      ; Convert nibble to value 
1087			 ;               call    print_nibble 
1087			 ;               ret 
1087			; 
1087			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1087			; A valid hexadecimal digit is denoted by a set C flag. 
1087			; 
1087			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1087			;                ret     nc              ; Yes 
1087			;                cp      '0'             ; Less than '0'? 
1087			;                jr      nc, is_hex_1    ; No, continue 
1087			;                ccf                     ; Complement carry (i.e. clear it) 
1087			;                ret 
1087			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1087			;                ret     c               ; Yes 
1087			;                cp      'A'             ; Less than 'A'? 
1087			;                jr      nc, is_hex_2    ; No, continue 
1087			;                ccf                     ; Yes - clear carry and return 
1087			;                ret 
1087			;is_hex_2        scf                     ; Set carry 
1087			;                ret 
1087			; 
1087			; Convert a single character contained in A to upper case: 
1087			; 
1087 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1089 d8			                ret     c 
108a fe 7b		                cp      'z' + 1         ; > 'z'? 
108c d0			                ret     nc              ; Nothing to do, either 
108d e6 5f		                and     $5f             ; Convert to upper case 
108f c9			                ret 
1090			 
1090			 
1090			to_lower: 
1090			 
1090			   ; if char is in [A-Z] make it lower case 
1090			 
1090			   ; enter : a = char 
1090			   ; exit  : a = lower case char 
1090			   ; uses  : af 
1090			 
1090 fe 41		   cp 'A' 
1092 d8			   ret c 
1093			    
1093 fe 5b		   cp 'Z'+1 
1095 d0			   ret nc 
1096			    
1096 f6 20		   or $20 
1098 c9			   ret 
1099			 
1099			; 
1099			; Expects a hexadecimal digit (upper case!) in A and returns the 
1099			; corresponding value in A. 
1099			; 
1099 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
109b 38 02		                jr      c, nibble2val_1 ; Yes 
109d d6 07		                sub     7               ; Adjust for A-F 
109f d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
10a1 e6 0f		                and     $f              ; Only return lower 4 bits 
10a3 c9			                ret 
10a4			; 
10a4			; Print_nibble prints a single hex nibble which is contained in the lower  
10a4			; four bits of A: 
10a4			; 
10a4			;print_nibble    push    af              ; We won't destroy the contents of A 
10a4			;                and     $f              ; Just in case... 
10a4			;                add     a, '0'             ; If we have a digit we are done here. 
10a4			;                cp      '9' + 1         ; Is the result > 9? 
10a4			;                jr      c, print_nibble_1 
10a4			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
10a4			;print_nibble_1  call    putc            ; Print the nibble and 
10a4			;                pop     af              ; restore the original value of A 
10a4			;                ret 
10a4			;; 
10a4			;; Send a CR/LF pair: 
10a4			; 
10a4			;crlf            push    af 
10a4			;                ld      a, cr 
10a4			;                call    putc 
10a4			;                ld      a, lf 
10a4			;                call    putc 
10a4			;                pop     af 
10a4			;                ret 
10a4			; 
10a4			; Print_word prints the four hex digits of a word to the serial line. The  
10a4			; word is expected to be in HL. 
10a4			; 
10a4			;print_word      push    hl 
10a4			;                push    af 
10a4			;                ld      a, h 
10a4			;                call    print_byte 
10a4			;                ld      a, l 
10a4			;                call    print_byte 
10a4			;                pop     af 
10a4			;                pop     hl 
10a4			;                ret 
10a4			; 
10a4			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
10a4			; The byte to be printed is expected to be in A. 
10a4			; 
10a4			;print_byte      push    af              ; Save the contents of the registers 
10a4			;                push    bc 
10a4			;                ld      b, a 
10a4			;                rrca 
10a4			;                rrca 
10a4			;                rrca 
10a4			;                rrca 
10a4			;                call    print_nibble    ; Print high nibble 
10a4			;                ld      a, b 
10a4			;                call    print_nibble    ; Print low nibble 
10a4			;                pop     bc              ; Restore original register contents 
10a4			;                pop     af 
10a4			;                ret 
10a4			 
10a4			 
10a4			 
10a4			 
10a4			 
10a4			fourehexhl:  
10a4 7e				ld a,(hl) 
10a5 cd 53 10			call atohex 
10a8 cb 3f				SRL A 
10aa cb 3f				SRL A 
10ac cb 3f				SRL A 
10ae cb 3f				SRL A 
10b0 47				ld b, a 
10b1 23				inc hl 
10b2 7e				ld a,(hl) 
10b3 23				inc hl 
10b4 cd 53 10			call atohex 
10b7 80				add b 
10b8 57				ld d,a 
10b9 7e				ld a,(hl) 
10ba cd 53 10			call atohex 
10bd cb 3f				SRL A 
10bf cb 3f				SRL A 
10c1 cb 3f				SRL A 
10c3 cb 3f				SRL A 
10c5 47				ld b, a 
10c6 23				inc hl 
10c7 7e				ld a,(hl) 
10c8 23				inc hl 
10c9 cd 53 10			call atohex 
10cc 80				add b 
10cd 5f				ld e, a 
10ce d5				push de 
10cf e1				pop hl 
10d0 c9				ret 
10d1			 
10d1			; pass hl. returns z set if the byte at hl is a digit 
10d1			;isdigithl:  
10d1			;	push bc 
10d1			;	ld a,(hl) 
10d1			;	cp ':' 
10d1			;	jr nc, .isdf 		; > 
10d1			;	cp '0' 
10d1			;	jr c, .isdf		; < 
10d1			; 
10d1			;	; TODO find a better way to set z 
10d1			; 
10d1			;	ld b,a 
10d1			;	cp b 
10d1			;	pop bc 
10d1			;	ret 
10d1			; 
10d1			;.isdf:	; not digit so clear z 
10d1			; 
10d1			;	; TODO find a better way to unset z 
10d1			; 
10d1			;	ld b,a 
10d1			;	inc b 
10d1			;	cp b 
10d1			; 
10d1			;	pop bc 
10d1			;	ret 
10d1				 
10d1				 
10d1			 
10d1			 
10d1			; pass hl as the four byte address to load 
10d1			 
10d1			get_word_hl:  
10d1 e5				push hl 
10d2 cd 71 10			call get_byte 
10d5				 
10d5 47				ld b, a 
10d6			 
10d6 e1				pop hl 
10d7 23				inc hl 
10d8 23				inc hl 
10d9			 
10d9			; TODO not able to handle a-f  
10d9 7e				ld a,(hl) 
10da			;	;cp ':' 
10da			;	cp 'g' 
10da			;	jr nc, .single_byte_hl 		; > 
10da			;	cp 'G' 
10da			;	jr nc, .single_byte_hl 		; > 
10da			;	cp '0' 
10da			;	jr c, .single_byte_hl		; < 
10da			 
10da				;call isdigithl 
10da fe 00			cp 0 
10dc 28 06			jr z, .single_byte_hl 
10de			 
10de			.getwhln:   ; hex word so get next byte 
10de			 
10de cd 71 10			call get_byte 
10e1 6f				ld l, a 
10e2 60				ld h,b 
10e3 c9				ret 
10e4 68			.single_byte_hl:   ld l,b 
10e5 26 00				ld h,0 
10e7 c9					ret 
10e8			 
10e8			 
10e8			 
10e8			 
10e8 21 d4 19			ld hl,asc+1 
10eb			;	ld a, (hl) 
10eb			;	call nibble2val 
10eb cd 71 10			call get_byte 
10ee			 
10ee			;	call fourehexhl 
10ee 32 d7 ef			ld (scratch+52),a 
10f1				 
10f1 21 d5 ef			ld hl,scratch+50 
10f4 22 c6 f2			ld (os_cur_ptr),hl 
10f7			 
10f7 c9				ret 
10f8			 
10f8			 
10f8			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10f8			 
10f8			; Decimal Unsigned Version 
10f8			 
10f8			;Number in a to decimal ASCII 
10f8			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10f8			;Example: display a=56 as "056" 
10f8			;input: a = number 
10f8			;Output: a=0,value of a in the screen 
10f8			;destroys af,bc (don't know about hl and de) 
10f8			DispAToASCII: 
10f8 0e 9c			ld	c,-100 
10fa cd 04 11			call	.Na1 
10fd 0e f6			ld	c,-10 
10ff cd 04 11			call	.Na1 
1102 0e ff			ld	c,-1 
1104 06 2f		.Na1:	ld	b,'0'-1 
1106 04			.Na2:	inc	b 
1107 81				add	a,c 
1108 38 fc			jr	c,.Na2 
110a 91				sub	c		;works as add 100/10/1 
110b f5				push af		;safer than ld c,a 
110c 78				ld	a,b		;char is in b 
110d			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
110d f1				pop af		;safer than ld a,c 
110e c9				ret 
110f			 
110f			; Decimal Signed Version 
110f			 
110f			; DispA 
110f			; -------------------------------------------------------------- 
110f			; Converts a signed integer value to a zero-terminated ASCII 
110f			; string representative of that value (using radix 10). 
110f			; -------------------------------------------------------------- 
110f			; INPUTS: 
110f			;     HL     Value to convert (two's complement integer). 
110f			;     DE     Base address of string destination. (pointer). 
110f			; -------------------------------------------------------------- 
110f			; OUTPUTS: 
110f			;     None 
110f			; -------------------------------------------------------------- 
110f			; REGISTERS/MEMORY DESTROYED 
110f			; AF HL 
110f			; -------------------------------------------------------------- 
110f			 
110f			;DispHLToASCII: 
110f			;   push    de 
110f			;   push    bc 
110f			; 
110f			;; Detect sign of HL. 
110f			;    bit    7, h 
110f			;    jr     z, ._DoConvert 
110f			; 
110f			;; HL is negative. Output '-' to string and negate HL. 
110f			;    ld     a, '-' 
110f			;    ld     (de), a 
110f			;    inc    de 
110f			; 
110f			;; Negate HL (using two's complement) 
110f			;    xor    a 
110f			;    sub    l 
110f			;    ld     l, a 
110f			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
110f			;    sbc    a, h 
110f			;    ld     h, a 
110f			; 
110f			;; Convert HL to digit characters 
110f			;._DoConvert: 
110f			;    ld     b, 0     ; B will count character length of number 
110f			;-   ld     a, 10 
110f			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
110f			;    push   af 
110f			;    inc    b 
110f			;    ld     a, h 
110f			;    or     l 
110f			;    jr     nz, - 
110f			; 
110f			;; Retrieve digits from stack 
110f			;-   pop    af 
110f			;    or     $30 
110f			;    ld     (de), a 
110f			;    inc    de 
110f			;    djnz   - 
110f			; 
110f			;; Terminate string with NULL 
110f			;    xor    a 
110f			;    ld     (de), a 
110f			; 
110f			;    pop    bc 
110f			;    pop    de 
110f			;    ret 
110f			 
110f			;Comments 
110f			; 
110f			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
110f			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
110f			;    Note that the output string will not be fixed-width. 
110f			; 
110f			;Example Usage 
110f			; 
110f			;    ld    hl, -1004 
110f			;    ld    de, OP1 
110f			;    call  DispA 
110f			;    ld    hl, OP1 
110f			;    syscall  PutS 
110f			 
110f			 
110f			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110f			 
110f			 
110f			;Converts an ASCII string to an unsigned 16-bit integer 
110f			;Quits when it reaches a non-decimal digit 
110f			 
110f			string_to_uint16: 
110f			atoui_16: 
110f			;Input: 
110f			;     DE points to the string 
110f			;Outputs: 
110f			;     HL is the result 
110f			;     A is the 8-bit value of the number 
110f			;     DE points to the byte after the number 
110f			;Destroys: 
110f			;     BC 
110f			;       if the string is non-empty, BC is HL/10 
110f			;Size:  24 bytes 
110f			;Speed: 42+d(104+{0,9}) 
110f			;       d is the number of digits in the number 
110f			;       max is 640 cycles for a 5 digit number 
110f			;Assuming no leading zeros: 
110f			;1 digit:  146cc 
110f			;2 digit:  250cc 
110f			;3 digit:  354cc or 363cc (avg: 354.126cc) 
110f			;4 digit:  458cc or 467cc (avg: 458.27cc) 
110f			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
110f			;avg: 544.81158447265625cc (544+13297/16384) 
110f			;=============================================================== 
110f 21 00 00		  ld hl,0 
1112			.u16a: 
1112 1a			  ld a,(de) 
1113 d6 30		  sub 30h 
1115 fe 0a		  cp 10 
1117 d0			  ret nc 
1118 13			  inc de 
1119 44			  ld b,h 
111a 4d			  ld c,l 
111b 29			  add hl,hl 
111c 29			  add hl,hl 
111d 09			  add hl,bc 
111e 29			  add hl,hl 
111f 85			  add a,l 
1120 6f			  ld l,a 
1121 30 ef		  jr nc,.u16a 
1123 24			  inc h 
1124 c3 12 11		  jp .u16a 
1127			 
1127			 
1127			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
1127			 
1127			;written by Zeda 
1127			;Converts a 16-bit unsigned integer to an ASCII string. 
1127			 
1127			uitoa_16: 
1127			;Input: 
1127			;   DE is the number to convert 
1127			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
1127			;Output: 
1127			;   HL points to the null-terminated ASCII string 
1127			;      NOTE: This isn't necessarily the same as the input HL. 
1127 d5			  push de 
1128 c5			  push bc 
1129 f5			  push af 
112a eb			  ex de,hl 
112b			 
112b 01 f0 d8		  ld bc,-10000 
112e 3e 2f		  ld a,'0'-1 
1130 3c			  inc a 
1131 09			  add hl,bc  
1132 38 fc		   jr c,$-2 
1134 12			  ld (de),a 
1135 13			  inc de 
1136			 
1136 01 e8 03		  ld bc,1000 
1139 3e 3a		  ld a,'9'+1 
113b 3d			  dec a  
113c 09			  add hl,bc  
113d 30 fc		   jr nc,$-2 
113f 12			  ld (de),a 
1140 13			  inc de 
1141			 
1141 01 9c ff		  ld bc,-100 
1144 3e 2f		  ld a,'0'-1 
1146 3c			  inc a  
1147 09			  add hl,bc  
1148 38 fc		   jr c,$-2 
114a 12			  ld (de),a 
114b 13			  inc de 
114c			 
114c 7d			  ld a,l 
114d 26 3a		  ld h,'9'+1 
114f 25			  dec h  
1150 c6 0a		  add a,10  
1152 30 fb		   jr nc,$-3 
1154 c6 30		  add a,'0' 
1156 eb			  ex de,hl 
1157 72			  ld (hl),d 
1158 23			  inc hl 
1159 77			  ld (hl),a 
115a 23			  inc hl 
115b 36 00		  ld (hl),0 
115d			 
115d			;Now strip the leading zeros 
115d 0e fa		  ld c,-6 
115f 09			  add hl,bc 
1160 3e 30		  ld a,'0' 
1162 23			  inc hl  
1163 be			  cp (hl)  
1164 28 fc		  jr z,$-2 
1166			 
1166			;Make sure that the string is non-empty! 
1166 7e			  ld a,(hl) 
1167 b7			  or a 
1168 20 01		  jr nz,.atoub 
116a 2b			  dec hl 
116b			.atoub: 
116b			 
116b f1			  pop af 
116c c1			  pop bc 
116d d1			  pop de 
116e c9			  ret 
116f			 
116f			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
116f			 
116f			toUpper: 
116f			;A is the char. 
116f			;If A is a lowercase letter, this sets it to the matching uppercase 
116f			;18cc or 30cc or 41cc 
116f			;avg: 26.75cc 
116f fe 61		  cp 'a' 
1171 d8			  ret c 
1172 fe 7b		  cp 'z'+1 
1174 d0			  ret nc 
1175 d6 20		  sub 'a'-'A' 
1177 c9			  ret 
1178			 
1178			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1178			 
1178			; String Length 
1178			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1178			 
1178			; Get the length of the null-terminated string starting at $8000 hl 
1178			;    LD     HL, $8000 
1178			 
1178			strlenz: 
1178			 
1178 af			    XOR    A               ; Zero is the value we are looking for. 
1179 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
117a 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
117b			                           ; 65, 536 bytes (the entire addressable memory space). 
117b ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
117d			 
117d			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
117d 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
117e 6f			    LD     L, A             ; number of bytes 
117f ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1181 2b			    DEC    HL              ; Compensate for null. 
1182 c9				ret 
1183			 
1183			; Get the length of the A terminated string starting at $8000 hl 
1183			;    LD     HL, $8000 
1183			 
1183			strlent: 
1183			 
1183			                  ; A is the value we are looking for. 
1183 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1185 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1187			                           ; 65, 536 bytes (the entire addressable memory space). 
1187 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1189			 
1189			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1189 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
118b 2e 00		    LD     L, 0             ; number of bytes 
118d ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
118f 2b			    DEC    HL              ; Compensate for null. 
1190 c9				ret 
1191			 
1191			 
1191			;Comparing Strings 
1191			 
1191			;IN    HL     Address of string1. 
1191			;      DE     Address of string2. 
1191			 
1191			; doc given but wrong??? 
1191			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1191			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1191			; tested 
1191			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1191			 
1191			strcmp_old: 
1191 e5			    PUSH   HL 
1192 d5			    PUSH   DE 
1193			 
1193 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1194 be			    CP     (HL)            ; (want to minimize work). 
1195 38 01		    JR     C, Str1IsBigger 
1197 7e			    LD     A, (HL) 
1198			 
1198			Str1IsBigger: 
1198 4f			    LD     C, A             ; Put length in BC 
1199 06 00		    LD     B, 0 
119b 13			    INC    DE              ; Increment pointers to meat of string. 
119c 23			    INC    HL 
119d			 
119d			CmpLoop: 
119d 1a			    LD     A, (DE)          ; Compare bytes. 
119e ed a1		    CPI 
11a0 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
11a2 13			    INC    DE              ; Update pointer. 
11a3 ea 9d 11		    JP     PE, CmpLoop 
11a6			 
11a6 d1			    POP    DE 
11a7 e1			    POP    HL 
11a8 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
11a9 be			    CP     (HL) 
11aa c9			    RET 
11ab			 
11ab			NoMatch: 
11ab 2b			    DEC    HL 
11ac be			    CP     (HL)            ; Compare again to affect carry. 
11ad d1			    POP    DE 
11ae e1			    POP    HL 
11af c9			    RET 
11b0			 
11b0			;; test strmp 
11b0			; 
11b0			;ld de, .str1 
11b0			;ld hl, .str2 
11b0			;call strcmp 
11b0			;jr z, .z1 
11b0			;;this 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "NZ1" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			;.z1: 
11b0			; 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "ZZ1" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			; 
11b0			;ld de, .str1 
11b0			;ld hl, .str1 
11b0			;call strcmp 
11b0			;jr z, .z2 
11b0			;;this 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "NZ2" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			;.z2: 
11b0			; 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "ZZ2" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			; 
11b0			;ld de, .str1 
11b0			;ld hl, .str2 
11b0			;call strcmp 
11b0			;jr c, .c1 
11b0			; 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "Nc1" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			;.c1: 
11b0			;;this 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "cc1" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			; 
11b0			;ld de, .str1 
11b0			;ld hl, .str1 
11b0			;call strcmp 
11b0			;jr c, .c2 
11b0			;;this 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "Nc2" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			;.c2: 
11b0			; 
11b0			;	if DEBUG_FORTH_WORDS 
11b0			;		DMARK "cc2" 
11b0			;		CALLMONITOR 
11b0			;	endif 
11b0			;	NEXTW 
11b0			;.str1:   db "string1",0 
11b0			;.str2:   db "string2",0 
11b0			 
11b0			; only care about direct match or not 
11b0			; hl and de strings 
11b0			; zero set if the same 
11b0			 
11b0			strcmp: 
11b0 1a				ld a, (de) 
11b1 be				cp (hl) 
11b2 28 02			jr z, .ssame 
11b4 b7				or a 
11b5 c9				ret 
11b6			 
11b6			.ssame:  
11b6 fe 00			cp 0 
11b8 c8				ret z 
11b9			 
11b9 23				inc hl 
11ba 13				inc de 
11bb 18 f3			jr strcmp 
11bd				 
11bd				 
11bd			 
11bd			 
11bd			 
11bd			 
11bd			; eof 
11bd			 
11bd			 
11bd			 
11bd			 
11bd			 
11bd			 
# End of file firmware_strings.asm
11bd			include "firmware_memory.asm"   ; malloc and free  
11bd			 
11bd			if DEBUG_FORTH_MALLOC_HIGH 
11bd			.mallocsize: db "Wants malloc >256",0 
11bd			.mallocasize: db "MALLOC gives >256",0 
11bd			.malloczero: db "MALLOC gives zero",0 
11bd			 
11bd			malloc_guard_zerolen: 
11bd				push hl 
11bd				push de 
11bd				push af 
11bd			 
11bd				ld de, 0 
11bd			        call cmp16 
11bd				jr nz, .lowalloz 
11bd			 
11bd				push hl 
11bd				push de 
11bd					ld hl, display_fb0 
11bd					ld (display_fb_active), hl 
11bd				call clear_display 
11bd				ld a, 0 
11bd				ld de, .malloczero 
11bd				call str_at_display 
11bd				call update_display 
11bd				call delay1s 
11bd				call delay1s 
11bd				ld a, 0 
11bd				ld (os_view_disable), a 
11bd			 
11bd				pop de 
11bd				pop hl 
11bd			 
11bd				 
11bd			 
11bd				CALLMONITOR 
11bd			.lowalloz: 
11bd			 
11bd			 
11bd				pop af 
11bd				pop de 
11bd				pop hl 
11bd			ret 
11bd			 
11bd			malloc_guard_entry: 
11bd				push hl 
11bd				push de 
11bd				push af 
11bd			 
11bd			 	or a      ;clear carry flag 
11bd				push hl 
11bd				ld de, 255 
11bd				sbc hl, de 
11bd				jr c, .lowalloc 
11bd			 
11bd				push de 
11bd					ld hl, display_fb0 
11bd					ld (display_fb_active), hl 
11bd				call clear_display 
11bd				ld a, 0 
11bd				ld de, .mallocsize 
11bd				call str_at_display 
11bd				call update_display 
11bd				call delay1s 
11bd				call delay1s 
11bd				ld a, 0 
11bd				ld (os_view_disable), a 
11bd			 
11bd				pop de 
11bd				pop hl 
11bd			 
11bd				 
11bd			 
11bd				CALLMONITOR 
11bd				jr .lowdone 
11bd			.lowalloc: 
11bd			 
11bd			 
11bd				pop hl 
11bd			.lowdone:	pop af 
11bd				pop de 
11bd				pop hl 
11bd			ret 
11bd			 
11bd			malloc_guard_exit: 
11bd				push hl 
11bd				push de 
11bd				push af 
11bd			 
11bd			 	or a      ;clear carry flag 
11bd				push hl 
11bd				ld de, 255 
11bd				sbc hl, de 
11bd				jr c, .lowallocx 
11bd			 
11bd				push de 
11bd					ld hl, display_fb0 
11bd					ld (display_fb_active), hl 
11bd				call clear_display 
11bd				ld a, 0 
11bd				ld de, .mallocasize 
11bd				call str_at_display 
11bd				call update_display 
11bd				call delay1s 
11bd				call delay1s 
11bd				ld a, 0 
11bd				ld (os_view_disable), a 
11bd				pop de 
11bd				pop hl 
11bd			 
11bd				CALLMONITOR 
11bd				jr .lowdonex 
11bd			.lowallocx: 
11bd			 
11bd				pop hl 
11bd			.lowdonex:	pop af 
11bd				pop de 
11bd				pop hl 
11bd			ret 
11bd			endif 
11bd			 
11bd			if MALLOC_2 
11bd			; Z80 Malloc and Free Functions 
11bd			 
11bd			; Malloc Function: 
11bd			; Input: 
11bd			;   HL: Size of block to allocate 
11bd			; Output: 
11bd			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11bd			 
11bd			malloc: 
11bd				 
11bd			if DEBUG_FORTH_MALLOC_HIGH 
11bd			call malloc_guard_entry 
11bd			endif 
11bd			 
11bd			 
11bd			 
11bd			 
11bd					if DEBUG_FORTH_MALLOC 
11bd						DMARK "mal" 
11bd						CALLMONITOR 
11bd					endif 
11bd			    push af            ; Save AF register 
11bd			    ld a, l            ; Load low byte of size into A 
11bd			    or h               ; Check if size is zero 
11bd			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11bd			 
11bd			    ; Allocate memory 
11bd			    ld hl, (heap_start) ; Load start of heap into HL 
11bd					if DEBUG_FORTH_MALLOC 
11bd						DMARK "ma1" 
11bd						CALLMONITOR 
11bd					endif 
11bd			    call malloc_internal ; Call internal malloc function 
11bd			    pop af             ; Restore AF register 
11bd			if DEBUG_FORTH_MALLOC_HIGH 
11bd			call malloc_guard_exit 
11bd			call malloc_guard_zerolen 
11bd			endif 
11bd			    ret                ; Return 
11bd			 
11bd			; Free Function: 
11bd			; Input: 
11bd			;   HL: Pointer to memory block to free 
11bd			; Output: 
11bd			;   None 
11bd			 
11bd			free: 
11bd			    push af            ; Save AF register 
11bd			    ld a, l            ; Load low byte of pointer into A 
11bd			    or h               ; Check if pointer is NULL 
11bd			    jp z, free_exit    ; If pointer is NULL, exit 
11bd			 
11bd			    ; Free memory 
11bd			    ld hl, (heap_start) ; Load start of heap into HL 
11bd			    call free_internal  ; Call internal free function 
11bd			    pop af             ; Restore AF register 
11bd			    ret                ; Return 
11bd			 
11bd			; Internal Malloc Function: 
11bd			; Input: 
11bd			;   HL: Size of block to allocate 
11bd			; Output: 
11bd			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11bd			 
11bd			malloc_internal: 
11bd			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11bd			    add hl, bc         ; Add management overhead to requested size 
11bd			    ex de, hl          ; Save total size in DE, and keep it in HL 
11bd					if DEBUG_FORTH_MALLOC 
11bd						DMARK "ma2" 
11bd						CALLMONITOR 
11bd					endif 
11bd			 
11bd			    ; Search for free memory block 
11bd			    ld de, (heap_end)  ; Load end of heap into DE 
11bd			    ld bc, 0           ; Initialize counter 
11bd			 
11bd					if DEBUG_FORTH_MALLOC 
11bd						DMARK "ma2" 
11bd						CALLMONITOR 
11bd					endif 
11bd			malloc_search_loop: 
11bd			    ; Check if current block is free 
11bd			    ld a, (hl)         ; Load current block's status (free or used) 
11bd			    cp 0               ; Compare with zero (free) 
11bd			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11bd			 
11bd			    ; Check if current block is large enough 
11bd			    ld a, (hl+1)       ; Load high byte of block size 
11bd			    cp l               ; Compare with low byte of requested size 
11bd			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11bd			 
11bd			    ld a, (hl+2)       ; Load low byte of block size 
11bd			    cp h               ; Compare with high byte of requested size 
11bd			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11bd			 
11bd			    ; Mark block as used 
11bd			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11bd			 
11bd			    ; Calculate remaining space in block 
11bd			    ld bc, 0           ; Clear BC 
11bd			    add hl, bc         ; Increment HL to point to start of data block 
11bd			    add hl, de         ; HL = HL + DE (total size) 
11bd			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11bd			    add hl, bc         ; Add management overhead to start of data block 
11bd			 
11bd			    ; Save pointer to allocated block in HL 
11bd			if DEBUG_FORTH_MALLOC_HIGH 
11bd						DMARK "ma5" 
11bd			call malloc_guard_exit 
11bd			call malloc_guard_zerolen 
11bd			endif 
11bd			    ret 
11bd			 
11bd			malloc_skip_block_check: 
11bd			    ; Move to the next block 
11bd			    ld bc, 3           ; Size of management overhead 
11bd			    add hl, bc         ; Move to the next block 
11bd			    inc de             ; Increment counter 
11bd			 
11bd			    ; Check if we have reached the end of heap 
11bd			    ld a, e            ; Load low byte of heap end address 
11bd			    cp (hl)            ; Compare with low byte of current address 
11bd			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11bd			    ld a, d            ; Load high byte of heap end address 
11bd			    cp 0               ; Check if it's zero (end of memory) 
11bd			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11bd			 
11bd			    ; If we reached here, allocation failed 
11bd			    xor a              ; Set result to NULL 
11bd			if DEBUG_FORTH_MALLOC_HIGH 
11bd						DMARK "ma6" 
11bd			call malloc_guard_exit 
11bd			call malloc_guard_zerolen 
11bd			endif 
11bd			    ret 
11bd			malloc_exit: 
11bd			if DEBUG_FORTH_MALLOC_HIGH 
11bd						DMARK "ma7" 
11bd			call malloc_guard_exit 
11bd			call malloc_guard_zerolen 
11bd			endif 
11bd			    ret 
11bd			 
11bd			; Internal Free Function: 
11bd			; Input: 
11bd			;   HL: Pointer to memory block to free 
11bd			; Output: 
11bd			;   None 
11bd			 
11bd			free_internal: 
11bd			    ld de, (heap_start) ; Load start of heap into DE 
11bd			    ld bc, 0            ; Initialize counter 
11bd			 
11bd			free_search_loop: 
11bd			    ; Check if current block contains the pointer 
11bd			    ld a, l             ; Load low byte of pointer 
11bd			    cp (hl+1)           ; Compare with high byte of current block's address 
11bd			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11bd			    ld a, h             ; Load high byte of pointer 
11bd			    cp (hl+2)           ; Compare with low byte of current block's address 
11bd			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11bd			 
11bd			    ; Mark block as free 
11bd			    ld (hl), 0          ; Set status byte to indicate free block 
11bd			    ret                 ; Return 
11bd			 
11bd			free_skip_block_check: 
11bd			    ; Move to the next block 
11bd			    ld bc, 3            ; Size of management overhead 
11bd			    add hl, bc          ; Move to the next block 
11bd			    inc de              ; Increment counter 
11bd			 
11bd			    ; Check if we have reached the end of heap 
11bd			    ld a, e             ; Load low byte of heap end address 
11bd			    cp (hl)             ; Compare with low byte of current address 
11bd			    jr nz, free_search_loop  ; If not equal, continue searching 
11bd			    ld a, d             ; Load high byte of heap end address 
11bd			    cp 0                ; Check if it's zero (end of memory) 
11bd			    jr nz, free_search_loop  ; If not zero, continue searching 
11bd			 
11bd			    ; If we reached here, pointer is not found in heap 
11bd			    ret 
11bd			 
11bd			free_exit: 
11bd			    ret                 ; Return 
11bd			 
11bd			; Define heap start and end addresses 
11bd			;heap_start:    .dw 0xC000   ; Start of heap 
11bd			;heap_end:      .dw 0xE000   ; End of heap 
11bd			 
11bd			endif 
11bd			 
11bd			 
11bd			if MALLOC_1 
11bd			 
11bd			 
11bd			 
11bd			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11bd			 
11bd			;moved to firmware.asm 
11bd			;heap_start        .equ  0x9000      ; Starting address of heap 
11bd			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11bd			 
11bd			;      .org 0 
11bd			;      jp    main 
11bd			 
11bd			 
11bd			;      .org  0x100 
11bd			;main: 
11bd			;      ld    HL, 0x8100 
11bd			;      ld    SP, HL 
11bd			; 
11bd			;      call  heap_init 
11bd			; 
11bd			;      ; Make some allocations 
11bd			;      ld    HL, 12 
11bd			;      call  malloc            ; Allocates 0x9004 
11bd			; 
11bd			;      ld    HL, 12 
11bd			;      call  malloc            ; Allocates 0x9014 
11bd			; 
11bd			;      ld    HL, 12 
11bd			;      call  malloc            ; Allocates 0x9024 
11bd			; 
11bd			;      ; Free some allocations 
11bd			;      ld    HL, 0x9014 
11bd			;      call  free 
11bd			; 
11bd			;      ld    HL, 0x9004 
11bd			;      call  free 
11bd			; 
11bd			;      ld    HL, 0x9024 
11bd			;      call  free 
11bd			; 
11bd			; 
11bd			;      halt 
11bd			 
11bd			 
11bd			;------------------------------------------------------------------------------ 
11bd			;     heap_init                                                               : 
11bd			;                                                                             : 
11bd			; Description                                                                 : 
11bd			;     Initialise the heap and make it ready for malloc and free operations.   : 
11bd			;                                                                             : 
11bd			;     The heap is maintained as a linked list, starting with an initial       : 
11bd			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11bd			;     the first free block in the heap. Each block then points to the next    : 
11bd			;     free block within the heap, and the free list ends at the first block   : 
11bd			;     with a null pointer to the next free block.                             : 
11bd			;                                                                             : 
11bd			; Parameters                                                                  : 
11bd			;     Inputs are compile-time only. Two defines which specify the starting    : 
11bd			;     address of the heap and its size are required, along with a memory      : 
11bd			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11bd			;     principally stores a pointer to the first free block in the heap.       : 
11bd			;                                                                             : 
11bd			; Returns                                                                     : 
11bd			;     Nothing                                                                 : 
11bd			;------------------------------------------------------------------------------ 
11bd			heap_init: 
11bd e5			      push  HL 
11be			 
11be			      ; Initialise free list struct 
11be 21 0e 80		      ld    HL, heap_start 
11c1 22 0a 80		      ld    (free_list), HL 
11c4 21 00 00		      ld    HL, 0 
11c7 22 0c 80		      ld    (free_list+2), HL 
11ca			 
11ca			      ; Insert first free block at bottom of heap, consumes entire heap 
11ca 21 0a 80		      ld    HL, heap_start+heap_size-4 
11cd 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
11d0 21 fc ff		      ld    HL, heap_size-4 
11d3 22 10 80		      ld    (heap_start+2), HL      ; Block size 
11d6			 
11d6			      ; Insert end of free list block at top of heap - two null words will 
11d6			      ; terminate the free list 
11d6 21 00 00		      ld    HL, 0 
11d9 22 0c 80		      ld    (heap_start+heap_size-2), HL 
11dc 22 0a 80		      ld    (heap_start+heap_size-4), HL 
11df			 
11df e1			      pop   HL 
11e0			 
11e0 c9			      ret 
11e1			 
11e1			 
11e1			;------------------------------------------------------------------------------ 
11e1			;     malloc                                                                  : 
11e1			;                                                                             : 
11e1			; Description                                                                 : 
11e1			;     Allocates the wanted space from the heap and returns the address of the : 
11e1			;     first useable byte of the allocation.                                   : 
11e1			;                                                                             : 
11e1			;     Allocations can happen in one of two ways:                              : 
11e1			;                                                                             : 
11e1			;     1. A free block may be found which is the exact size wanted. In this    : 
11e1			;        case the block is removed from the free list and retuedn to the      : 
11e1			;        caller.                                                              : 
11e1			;     2. A free block may be found which is larger than the size wanted. In   : 
11e1			;        this case, the larger block is split into two. The first portion of  : 
11e1			;        this block will become the requested space by the malloc call and    : 
11e1			;        is returned to the caller. The second portion becomes a new free     : 
11e1			;        block, and the free list is adjusted to maintain continuity via this : 
11e1			;        newly created block.                                                 : 
11e1			;                                                                             : 
11e1			;     malloc does not set any initial value in the allocated space, the       : 
11e1			;     caller is required to do this as required.                              : 
11e1			;                                                                             : 
11e1			;     This implementation of malloc uses the stack exclusively, and is        : 
11e1			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11e1			;     advisable to disable interrupts before calling malloc, and recommended  : 
11e1			;     to avoid the use of malloc inside ISRs in general.                      : 
11e1			;                                                                             : 
11e1			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11e1			;                                                                             : 
11e1			; Parameters                                                                  : 
11e1			;     HL  Number of bytes wanted                                              : 
11e1			;                                                                             : 
11e1			; Returns                                                                     : 
11e1			;     HL  Address of the first useable byte of the allocation                 : 
11e1			;                                                                             : 
11e1			; Flags                                                                       : 
11e1			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11e1			;                                                                             : 
11e1			; Stack frame                                                                 : 
11e1			;       |             |                                                       : 
11e1			;       +-------------+                                                       : 
11e1			;       |     BC      |                                                       : 
11e1			;       +-------------+                                                       : 
11e1			;       |     DE      |                                                       : 
11e1			;       +-------------+                                                       : 
11e1			;       |     IX      |                                                       : 
11e1			;       +-------------+                                                       : 
11e1			;       |  prev_free  |                                                       : 
11e1			;   +4  +-------------+                                                       : 
11e1			;       |  this_free  |                                                       : 
11e1			;   +2  +-------------+                                                       : 
11e1			;       |  next_free  |                                                       : 
11e1			;   +0  +-------------+                                                       : 
11e1			;       |             |                                                       : 
11e1			;                                                                             : 
11e1			;------------------------------------------------------------------------------ 
11e1			 
11e1			 
11e1			;malloc: 
11e1			; 
11e1			;	SAVESP ON 1 
11e1			; 
11e1			;	call malloc_code 
11e1			; 
11e1			;	CHECKSP ON 1 
11e1			;	ret 
11e1			 
11e1			 
11e1			malloc: 
11e1 c5			      push  BC 
11e2 d5			      push  DE 
11e3 dd e5		      push  IX 
11e5			if DEBUG_FORTH_MALLOC_HIGH 
11e5			call malloc_guard_entry 
11e5			endif 
11e5			 
11e5					if DEBUG_FORTH_MALLOC 
11e5						DMARK "mal" 
11e5						CALLMONITOR 
11e5					endif 
11e5 7c			      ld    A, H                    ; Exit if no space requested 
11e6 b5			      or    L 
11e7 ca a6 12		      jp    Z, malloc_early_exit 
11ea			 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			; 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			;inc hl 
11ea			 
11ea			 
11ea			 
11ea			 
11ea					if DEBUG_FORTH_MALLOC 
11ea						DMARK "maA" 
11ea						CALLMONITOR 
11ea					endif 
11ea			      ; Set up stack frame 
11ea eb			      ex    DE, HL 
11eb 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11ee 39			      add   HL, SP 
11ef f9			      ld    SP, HL 
11f0 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11f4 dd 39		      add   IX, SP 
11f6			 
11f6			      ; Setup initial state 
11f6 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11f9 19			      add   HL, DE 
11fa			 
11fa 44			      ld    B, H                    ; Move want to BC 
11fb 4d			      ld    C, L 
11fc			 
11fc 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ff dd 75 04		      ld    (IX+4), L 
1202 dd 74 05		      ld    (IX+5), H 
1205			 
1205 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
1206 23			      inc   HL 
1207 56			      ld    D, (HL) 
1208 dd 73 02		      ld    (IX+2), E 
120b dd 72 03		      ld    (IX+3), D 
120e eb			      ex    DE, HL                  ; this_free ptr into HL 
120f			 
120f					if DEBUG_FORTH_MALLOC 
120f						DMARK "maB" 
120f						CALLMONITOR 
120f					endif 
120f			      ; Loop through free block list to find some space 
120f			malloc_find_space: 
120f 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
1210 23			      inc   HL 
1211 56			      ld    D, (HL) 
1212			 
1212 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1213 b3			      or    E 
1214 ca a0 12		      jp    Z, malloc_no_space 
1217			 
1217 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
121a dd 72 01		      ld    (IX+1), D 
121d			 
121d			      ; Does this block have enough space to make the allocation? 
121d 23			      inc   HL                      ; Load free block size into DE 
121e 5e			      ld    E, (HL) 
121f 23			      inc   HL 
1220 56			      ld    D, (HL) 
1221			 
1221 eb			      ex    DE, HL                  ; Check size of block against want 
1222 b7			      or    A                       ; Ensure carry flag clear 
1223 ed 42		      sbc   HL, BC 
1225 e5			      push  HL                      ; Store the result for later (new block size) 
1226			 
1226 ca 75 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1229 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
122b			 
122b			      ; this_free block is not big enough, setup ptrs to test next free block 
122b e1			      pop   HL                      ; Discard previous result 
122c			 
122c dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
122f dd 66 03		      ld    H, (IX+3) 
1232 dd 75 04		      ld    (IX+4), L 
1235 dd 74 05		      ld    (IX+5), H 
1238			 
1238 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
123b dd 66 01		      ld    H, (IX+1) 
123e dd 75 02		      ld    (IX+2), L 
1241 dd 74 03		      ld    (IX+3), H 
1244			 
1244					if DEBUG_FORTH_MALLOC 
1244						DMARK "MA>" 
1244						CALLMONITOR 
1244					endif 
1244 18 c9		      jr    malloc_find_space 
1246			 
1246			      ; split a bigger block into two - requested size and remaining size 
1246			malloc_alloc_split: 
1246					if DEBUG_FORTH_MALLOC 
1246						DMARK "MAs" 
1246						CALLMONITOR 
1246					endif 
1246 eb			      ex    DE, HL                  ; Calculate address of new free block 
1247 2b			      dec   HL 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 09			      add   HL, BC 
124b			 
124b			      ; Create a new block and point it at next_free 
124b dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
124e dd 56 01		      ld    D, (IX+1) 
1251			 
1251 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1252 23			      inc   HL 
1253 72			      ld    (HL), D 
1254			 
1254 d1			      pop   DE                      ; Store size of new block into new block 
1255 23			      inc   HL 
1256 73			      ld    (HL), E 
1257 23			      inc   HL 
1258 72			      ld    (HL), D 
1259			 
1259			      ; Update this_free ptr to point to new block 
1259 2b			      dec   HL 
125a 2b			      dec   HL 
125b 2b			      dec   HL 
125c			 
125c dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
125f dd 56 03		      ld    D, (IX+3) 
1262			 
1262 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1265 dd 74 03		      ld    (IX+3), H 
1268			 
1268			      ; Modify this_free block to be allocation 
1268 eb			      ex    DE, HL 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store want size into allocated block 
126e 71			      ld    (HL), C 
126f 23			      inc   HL 
1270 70			      ld    (HL), B 
1271 23			      inc   HL 
1272 e5			      push  HL                      ; Address of allocation to return 
1273			 
1273 18 19		      jr    malloc_update_links 
1275			 
1275			malloc_alloc_fit: 
1275 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1276			 
1276					if DEBUG_FORTH_MALLOC 
1276						DMARK "MAf" 
1276						CALLMONITOR 
1276					endif 
1276			      ; Modify this_free block to be allocation 
1276 eb			      ex    DE, HL 
1277 2b			      dec   HL 
1278 2b			      dec   HL 
1279 2b			      dec   HL 
127a			 
127a af			      xor   A                       ; Null the next block ptr of allocated block 
127b 77			      ld    (HL), A 
127c 23			      inc   HL 
127d 77			      ld    (HL), A 
127e			 
127e 23			      inc   HL                      ; Store address of allocation to return 
127f 23			      inc   HL 
1280 23			      inc   HL 
1281 e5			      push  HL 
1282			 
1282			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1282 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1285 dd 66 01		      ld    H, (IX+1) 
1288			 
1288 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
128b dd 74 03		      ld    (IX+3), H 
128e			 
128e			 
128e			malloc_update_links: 
128e			      ; Update prev_free ptr to point to this_free 
128e dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1291 dd 66 05		      ld    H, (IX+5) 
1294			 
1294 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1297 dd 56 03		      ld    D, (IX+3) 
129a			 
129a 73			      ld    (HL), E                 ; this_free ptr into prev_free 
129b 23			      inc   HL 
129c 72			      ld    (HL), D 
129d			 
129d					if DEBUG_FORTH_MALLOC 
129d						DMARK "Mul" 
129d						CALLMONITOR 
129d					endif 
129d			      ; Clear the Z flag to indicate successful allocation 
129d 7a			      ld    A, D 
129e b3			      or    E 
129f			 
129f d1			      pop   DE                      ; Address of allocation 
12a0					if DEBUG_FORTH_MALLOC 
12a0						DMARK "MAu" 
12a0						CALLMONITOR 
12a0					endif 
12a0			 
12a0			malloc_no_space: 
12a0 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
12a3 39			      add   HL, SP 
12a4 f9			      ld    SP, HL 
12a5			 
12a5 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
12a6					if DEBUG_FORTH_MALLOC 
12a6						DMARK "MAN" 
12a6						CALLMONITOR 
12a6					endif 
12a6			 
12a6			malloc_early_exit: 
12a6					if DEBUG_FORTH_MALLOC 
12a6						DMARK "MAx" 
12a6						CALLMONITOR 
12a6					endif 
12a6 dd e1		      pop   IX 
12a8 d1			      pop   DE 
12a9 c1			      pop   BC 
12aa			 
12aa			if DEBUG_FORTH_MALLOC_HIGH 
12aa			call malloc_guard_exit 
12aa			call malloc_guard_zerolen 
12aa			endif 
12aa c9			      ret 
12ab			 
12ab			 
12ab			;------------------------------------------------------------------------------ 
12ab			;     free                                                                    : 
12ab			;                                                                             : 
12ab			; Description                                                                 : 
12ab			;     Return the space pointed to by HL to the heap. HL must be an address as : 
12ab			;     returned by malloc, otherwise the behaviour is undefined.               : 
12ab			;                                                                             : 
12ab			;     Where possible, directly adjacent free blocks will be merged together   : 
12ab			;     into larger blocks to help ensure that the heap does not become         : 
12ab			;     excessively fragmented.                                                 : 
12ab			;                                                                             : 
12ab			;     free does not clear or set any other value into the freed space, and    : 
12ab			;     therefore its contents may be visible through subsequent malloc's. The  : 
12ab			;     caller should clear the freed space as required.                        : 
12ab			;                                                                             : 
12ab			;     This implementation of free uses the stack exclusively, and is          : 
12ab			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
12ab			;     advisable to disable interrupts before calling free, and recommended    : 
12ab			;     to avoid the use of free inside ISRs in general.                        : 
12ab			;                                                                             : 
12ab			;     NOTE: heap_init must be called before malloc and free can be used.      : 
12ab			;                                                                             : 
12ab			; Parameters                                                                  : 
12ab			;     HL  Pointer to address of first byte of allocation to be freed          : 
12ab			;                                                                             : 
12ab			; Returns                                                                     : 
12ab			;     Nothing                                                                 : 
12ab			;                                                                             : 
12ab			; Stack frame                                                                 : 
12ab			;       |             |                                                       : 
12ab			;       +-------------+                                                       : 
12ab			;       |     BC      |                                                       : 
12ab			;       +-------------+                                                       : 
12ab			;       |     DE      |                                                       : 
12ab			;       +-------------+                                                       : 
12ab			;       |     IX      |                                                       : 
12ab			;       +-------------+                                                       : 
12ab			;       |  prev_free  |                                                       : 
12ab			;   +2  +-------------+                                                       : 
12ab			;       |  next_free  |                                                       : 
12ab			;   +0  +-------------+                                                       : 
12ab			;       |             |                                                       : 
12ab			;                                                                             : 
12ab			;------------------------------------------------------------------------------ 
12ab			free: 
12ab c5			      push  BC 
12ac d5			      push  DE 
12ad dd e5		      push  IX 
12af			 
12af 7c			      ld    A, H                    ; Exit if ptr is null 
12b0 b5			      or    L 
12b1 ca 75 13		      jp    Z, free_early_exit 
12b4			 
12b4			      ; Set up stack frame 
12b4 eb			      ex    DE, HL 
12b5 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12b8 39			      add   HL, SP 
12b9 f9			      ld    SP, HL 
12ba dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12be dd 39		      add   IX, SP 
12c0			 
12c0			      ; The address in HL points to the start of the useable allocated space, 
12c0			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12c0			      ; address of the block itself. 
12c0 eb			      ex    DE, HL 
12c1 11 fc ff		      ld    DE, -4 
12c4 19			      add   HL, DE 
12c5			 
12c5			      ; An allocated block must have a null next block pointer in it 
12c5 7e			      ld    A, (HL) 
12c6 23			      inc   HL 
12c7 b6			      or    (HL) 
12c8 c2 70 13		      jp    NZ, free_done 
12cb			 
12cb 2b			      dec   HL 
12cc			 
12cc 44			      ld    B, H                    ; Copy HL to BC 
12cd 4d			      ld    C, L 
12ce			 
12ce			      ; Loop through the free list to find the first block with an address 
12ce			      ; higher than the block being freed 
12ce 21 0a 80		      ld    HL, free_list 
12d1			 
12d1			free_find_higher_block: 
12d1 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12d2 23			      inc   HL 
12d3 56			      ld    D, (HL) 
12d4 2b			      dec   HL 
12d5			 
12d5 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12d8 dd 72 01		      ld    (IX+1), D 
12db dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12de dd 74 03		      ld    (IX+3), H 
12e1			 
12e1 78			      ld    A, B                    ; Check if DE is greater than BC 
12e2 ba			      cp    D                       ; Compare MSB first 
12e3 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12e5 30 04		      jr    NC, free_find_higher_block_skip 
12e7 79			      ld    A, C 
12e8 bb			      cp    E                       ; Then compare LSB 
12e9 38 08		      jr    C, free_found_higher_block 
12eb			 
12eb			free_find_higher_block_skip: 
12eb 7a			      ld    A, D                    ; Reached the end of the free list? 
12ec b3			      or    E 
12ed ca 70 13		      jp    Z, free_done 
12f0			 
12f0 eb			      ex    DE, HL 
12f1			 
12f1 18 de		      jr    free_find_higher_block 
12f3			 
12f3			free_found_higher_block: 
12f3			      ; Insert freed block between prev and next free blocks 
12f3 71			      ld    (HL), C                 ; Point prev free block to freed block 
12f4 23			      inc   HL 
12f5 70			      ld    (HL), B 
12f6			 
12f6 60			      ld    H, B                    ; Point freed block at next free block 
12f7 69			      ld    L, C 
12f8 73			      ld    (HL), E 
12f9 23			      inc   HL 
12fa 72			      ld    (HL), D 
12fb			 
12fb			      ; Check if the freed block is adjacent to the next free block 
12fb 23			      inc   HL                      ; Load size of freed block into HL 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff eb			      ex    DE, HL 
1300			 
1300 09			      add   HL, BC                  ; Add addr of freed block and its size 
1301			 
1301 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
1304 dd 56 01		      ld    D, (IX+1) 
1307			 
1307 b7			      or    A                       ; Clear the carry flag 
1308 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
130a 20 22		      jr    NZ, free_check_adjacent_to_prev 
130c			 
130c			      ; Freed block is adjacent to next, merge into one bigger block 
130c eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
130d 5e			      ld    E, (HL) 
130e 23			      inc   HL 
130f 56			      ld    D, (HL) 
1310 e5			      push  HL                      ; Save ptr to next block for later 
1311			 
1311 60			      ld    H, B                    ; Store ptr from next block into freed block 
1312 69			      ld    L, C 
1313 73			      ld    (HL), E 
1314 23			      inc   HL 
1315 72			      ld    (HL), D 
1316			 
1316 e1			      pop   HL                      ; Restore ptr to next block 
1317 23			      inc   HL                      ; Load size of next block into DE 
1318 5e			      ld    E, (HL) 
1319 23			      inc   HL 
131a 56			      ld    D, (HL) 
131b d5			      push  DE                      ; Save next block size for later 
131c			 
131c 60			      ld    H, B                    ; Load size of freed block into HL 
131d 69			      ld    L, C 
131e 23			      inc   HL 
131f 23			      inc   HL 
1320 5e			      ld    E, (HL) 
1321 23			      inc   HL 
1322 56			      ld    D, (HL) 
1323 eb			      ex    DE, HL 
1324			 
1324 d1			      pop   DE                      ; Restore size of next block 
1325 19			      add   HL, DE                  ; Add sizes of both blocks 
1326 eb			      ex    DE, HL 
1327			 
1327 60			      ld    H, B                    ; Store new bigger size into freed block 
1328 69			      ld    L, C 
1329 23			      inc   HL 
132a 23			      inc   HL 
132b 73			      ld    (HL), E 
132c 23			      inc   HL 
132d 72			      ld    (HL), D 
132e			 
132e			free_check_adjacent_to_prev: 
132e			      ; Check if the freed block is adjacent to the prev free block 
132e dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1331 dd 66 03		      ld    H, (IX+3) 
1334			 
1334 23			      inc   HL                      ; Size of prev free block into DE 
1335 23			      inc   HL 
1336 5e			      ld    E, (HL) 
1337 23			      inc   HL 
1338 56			      ld    D, (HL) 
1339 2b			      dec   HL 
133a 2b			      dec   HL 
133b 2b			      dec   HL 
133c			 
133c 19			      add   HL, DE                  ; Add prev block addr and size 
133d			 
133d b7			      or    A                       ; Clear the carry flag 
133e ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1340 20 2e		      jr    NZ, free_done 
1342			 
1342			      ; Freed block is adjacent to prev, merge into one bigger block 
1342 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1343 69			      ld    L, C 
1344 5e			      ld    E, (HL) 
1345 23			      inc   HL 
1346 56			      ld    D, (HL) 
1347 e5			      push  HL                      ; Save freed block ptr for later 
1348			 
1348 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
134b dd 66 03		      ld    H, (IX+3) 
134e 73			      ld    (HL), E 
134f 23			      inc   HL 
1350 72			      ld    (HL), D 
1351			 
1351 e1			      pop   HL                      ; Restore freed block ptr 
1352 23			      inc   HL                      ; Load size of freed block into DE 
1353 5e			      ld    E, (HL) 
1354 23			      inc   HL 
1355 56			      ld    D, (HL) 
1356 d5			      push  DE                      ; Save freed block size for later 
1357			 
1357 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
135a dd 66 03		      ld    H, (IX+3) 
135d 23			      inc   HL 
135e 23			      inc   HL 
135f 5e			      ld    E, (HL) 
1360 23			      inc   HL 
1361 56			      ld    D, (HL) 
1362			 
1362 e1			      pop   HL                      ; Add sizes of both blocks 
1363 19			      add   HL, DE 
1364 eb			      ex    DE, HL 
1365			 
1365 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1368 dd 66 03		      ld    H, (IX+3) 
136b 23			      inc   HL 
136c 23			      inc   HL 
136d 73			      ld    (HL), E 
136e 23			      inc   HL 
136f 72			      ld    (HL), D 
1370			 
1370			free_done: 
1370 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1373 39			      add   HL, SP 
1374 f9			      ld    SP, HL 
1375			 
1375			free_early_exit: 
1375 dd e1		      pop   IX 
1377 d1			      pop   DE 
1378 c1			      pop   BC 
1379			 
1379 c9			      ret 
137a			 
137a			; moved to firmware.asm 
137a			; 
137a			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
137a			;                  .dw   0 
137a			 
137a			 
137a			endif 
137a			 
137a			 
137a			if MALLOC_3 
137a			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
137a			;heap_start        .equ  0x9000      ; Starting address of heap 
137a			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
137a			; 
137a			 ;     .org 0 
137a			  ;    jp    main 
137a			; 
137a			; 
137a			 ;     .org  0x100 
137a			;main: 
137a			 ;     ld    HL, 0x8100 
137a			  ;    ld    SP, HL 
137a			; 
137a			;      call  heap_init 
137a			 
137a			      ; Make some allocations 
137a			;      ld    HL, 12 
137a			;      call  malloc            ; Allocates 0x9004 
137a			; 
137a			 ;     ld    HL, 12 
137a			;      call  malloc            ; Allocates 0x9014 
137a			 
137a			;      ld    HL, 12 
137a			;      call  malloc            ; Allocates 0x9024 
137a			 
137a			      ; Free some allocations 
137a			;      ld    HL, 0x9014 
137a			;      call  free 
137a			 
137a			;      ld    HL, 0x9004 
137a			;      call  free 
137a			; 
137a			;      ld    HL, 0x9024 
137a			;      call  free 
137a			 
137a			 
137a			 ;     halt 
137a			 
137a			 
137a			;------------------------------------------------------------------------------ 
137a			;     heap_init                                                               : 
137a			;                                                                             : 
137a			; Description                                                                 : 
137a			;     Initialise the heap and make it ready for malloc and free operations.   : 
137a			;                                                                             : 
137a			;     The heap is maintained as a linked list, starting with an initial       : 
137a			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
137a			;     the first free block in the heap. Each block then points to the next    : 
137a			;     free block within the heap, and the free list ends at the first block   : 
137a			;     with a null pointer to the next free block.                             : 
137a			;                                                                             : 
137a			; Parameters                                                                  : 
137a			;     Inputs are compile-time only. Two defines which specify the starting    : 
137a			;     address of the heap and its size are required, along with a memory      : 
137a			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
137a			;     principally stores a pointer to the first free block in the heap.       : 
137a			;                                                                             : 
137a			; Returns                                                                     : 
137a			;     Nothing                                                                 : 
137a			;------------------------------------------------------------------------------ 
137a			heap_init: 
137a			      push  HL 
137a			 
137a			      ; Initialise free list struct 
137a			      ld    HL, heap_start 
137a			      ld    (free_list), HL 
137a			      ld    HL, 0 
137a			      ld    (free_list+2), HL 
137a			 
137a			      ; Insert first free block at bottom of heap, consumes entire heap 
137a			      ld    HL, heap_start+heap_size-4 
137a			      ld    (heap_start), HL        ; Next block (end of free list) 
137a			      ld    HL, heap_size-4 
137a			      ld    (heap_start+2), HL      ; Block size 
137a			 
137a			      ; Insert end of free list block at top of heap - two null words will 
137a			      ; terminate the free list 
137a			      ld    HL, 0 
137a			      ld    (heap_start+heap_size-2), HL 
137a			      ld    (heap_start+heap_size-4), HL 
137a			 
137a			      pop   HL 
137a			 
137a			      ret 
137a			 
137a			 
137a			;------------------------------------------------------------------------------ 
137a			;     malloc                                                                  : 
137a			;                                                                             : 
137a			; Description                                                                 : 
137a			;     Allocates the wanted space from the heap and returns the address of the : 
137a			;     first useable byte of the allocation.                                   : 
137a			;                                                                             : 
137a			;     Allocations can happen in one of two ways:                              : 
137a			;                                                                             : 
137a			;     1. A free block may be found which is the exact size wanted. In this    : 
137a			;        case the block is removed from the free list and retuedn to the      : 
137a			;        caller.                                                              : 
137a			;     2. A free block may be found which is larger than the size wanted. In   : 
137a			;        this case, the larger block is split into two. The first portion of  : 
137a			;        this block will become the requested space by the malloc call and    : 
137a			;        is returned to the caller. The second portion becomes a new free     : 
137a			;        block, and the free list is adjusted to maintain continuity via this : 
137a			;        newly created block.                                                 : 
137a			;                                                                             : 
137a			;     malloc does not set any initial value in the allocated space, the       : 
137a			;     caller is required to do this as required.                              : 
137a			;                                                                             : 
137a			;     This implementation of malloc uses the stack exclusively, and is        : 
137a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
137a			;     advisable to disable interrupts before calling malloc, and recommended  : 
137a			;     to avoid the use of malloc inside ISRs in general.                      : 
137a			;                                                                             : 
137a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
137a			;                                                                             : 
137a			; Parameters                                                                  : 
137a			;     HL  Number of bytes wanted                                              : 
137a			;                                                                             : 
137a			; Returns                                                                     : 
137a			;     HL  Address of the first useable byte of the allocation                 : 
137a			;                                                                             : 
137a			; Flags                                                                       : 
137a			;     Z   Set if the allocation did not succeed, clear otherwise              : 
137a			;                                                                             : 
137a			; Stack frame                                                                 : 
137a			;       |             |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |     BC      |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |     DE      |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |     IX      |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |  prev_free  |                                                       : 
137a			;   +4  +-------------+                                                       : 
137a			;       |  this_free  |                                                       : 
137a			;   +2  +-------------+                                                       : 
137a			;       |  next_free  |                                                       : 
137a			;   +0  +-------------+                                                       : 
137a			;       |             |                                                       : 
137a			;                                                                             : 
137a			;------------------------------------------------------------------------------ 
137a			malloc: 
137a			      push  BC 
137a			      push  DE 
137a			      push  IX 
137a			 
137a			      ld    A, H                    ; Exit if no space requested 
137a			      or    L 
137a			      jp    Z, malloc_early_exit 
137a			 
137a			      ; Set up stack frame 
137a			      ex    DE, HL 
137a			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
137a			      add   HL, SP 
137a			      ld    SP, HL 
137a			      ld    IX, 0                   ; Use IX as a frame pointer 
137a			      add   IX, SP 
137a			 
137a			      ; Setup initial state 
137a			      ld    HL, 4                   ; want must also include space used by block struct 
137a			      add   HL, DE 
137a			 
137a			      ld    B, H                    ; Move want to BC 
137a			      ld    C, L 
137a			 
137a			      ld    HL, free_list           ; Store prev_free ptr to stack 
137a			      ld    (IX+4), L 
137a			      ld    (IX+5), H 
137a			 
137a			      ld    E, (HL)                 ; Store this_free ptr to stack 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      ld    (IX+2), E 
137a			      ld    (IX+3), D 
137a			      ex    DE, HL                  ; this_free ptr into HL 
137a			 
137a			      ; Loop through free block list to find some space 
137a			malloc_find_space: 
137a			      ld    E, (HL)                 ; Load next_free ptr into DE 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			 
137a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
137a			      or    E 
137a			      jp    Z, malloc_no_space 
137a			 
137a			      ld    (IX+0), E               ; Store next_free ptr to stack 
137a			      ld    (IX+1), D 
137a			 
137a			      ; Does this block have enough space to make the allocation? 
137a			      inc   HL                      ; Load free block size into DE 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			 
137a			      ex    DE, HL                  ; Check size of block against want 
137a			      or    A                       ; Ensure carry flag clear 
137a			      sbc   HL, BC 
137a			      push  HL                      ; Store the result for later (new block size) 
137a			 
137a			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
137a			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
137a			 
137a			      ; this_free block is not big enough, setup ptrs to test next free block 
137a			      pop   HL                      ; Discard previous result 
137a			 
137a			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
137a			      ld    H, (IX+3) 
137a			      ld    (IX+4), L 
137a			      ld    (IX+5), H 
137a			 
137a			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
137a			      ld    H, (IX+1) 
137a			      ld    (IX+2), L 
137a			      ld    (IX+3), H 
137a			 
137a			      jr    malloc_find_space 
137a			 
137a			      ; split a bigger block into two - requested size and remaining size 
137a			malloc_alloc_split: 
137a			      ex    DE, HL                  ; Calculate address of new free block 
137a			      dec   HL 
137a			      dec   HL 
137a			      dec   HL 
137a			      add   HL, BC 
137a			 
137a			      ; Create a new block and point it at next_free 
137a			      ld    E, (IX+0)               ; Load next_free ptr into DE 
137a			      ld    D, (IX+1) 
137a			 
137a			      ld    (HL), E                 ; Store next_free ptr into new block 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			      pop   DE                      ; Store size of new block into new block 
137a			      inc   HL 
137a			      ld    (HL), E 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			      ; Update this_free ptr to point to new block 
137a			      dec   HL 
137a			      dec   HL 
137a			      dec   HL 
137a			 
137a			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
137a			      ld    D, (IX+3) 
137a			 
137a			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
137a			      ld    (IX+3), H 
137a			 
137a			      ; Modify this_free block to be allocation 
137a			      ex    DE, HL 
137a			      xor   A                       ; Null the next block ptr of allocated block 
137a			      ld    (HL), A 
137a			      inc   HL 
137a			      ld    (HL), A 
137a			 
137a			      inc   HL                      ; Store want size into allocated block 
137a			      ld    (HL), C 
137a			      inc   HL 
137a			      ld    (HL), B 
137a			      inc   HL 
137a			      push  HL                      ; Address of allocation to return 
137a			 
137a			      jr    malloc_update_links 
137a			 
137a			malloc_alloc_fit: 
137a			      pop   HL                      ; Dont need new block size, want is exact fit 
137a			 
137a			      ; Modify this_free block to be allocation 
137a			      ex    DE, HL 
137a			      dec   HL 
137a			      dec   HL 
137a			      dec   HL 
137a			 
137a			      xor   A                       ; Null the next block ptr of allocated block 
137a			      ld    (HL), A 
137a			      inc   HL 
137a			      ld    (HL), A 
137a			 
137a			      inc   HL                      ; Store address of allocation to return 
137a			      inc   HL 
137a			      inc   HL 
137a			      push  HL 
137a			 
137a			      ; Copy next_free ptr to this_free, remove allocated block from free list 
137a			      ld    L, (IX+0)               ; next_free to HL 
137a			      ld    H, (IX+1) 
137a			 
137a			      ld    (IX+2), L               ; HL to this_free 
137a			      ld    (IX+3), H 
137a			 
137a			 
137a			malloc_update_links: 
137a			      ; Update prev_free ptr to point to this_free 
137a			      ld    L, (IX+4)               ; prev_free ptr to HL 
137a			      ld    H, (IX+5) 
137a			 
137a			      ld    E, (IX+2)               ; this_free ptr to DE 
137a			      ld    D, (IX+3) 
137a			 
137a			      ld    (HL), E                 ; this_free ptr into prev_free 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			      ; Clear the Z flag to indicate successful allocation 
137a			      ld    A, D 
137a			      or    E 
137a			 
137a			      pop   DE                      ; Address of allocation 
137a			 
137a			malloc_no_space: 
137a			      ld    HL, 6                   ; Clean up stack frame 
137a			      add   HL, SP 
137a			      ld    SP, HL 
137a			 
137a			      ex    DE, HL                  ; Alloc addr into HL for return 
137a			 
137a			malloc_early_exit: 
137a			      pop   IX 
137a			      pop   DE 
137a			      pop   BC 
137a			 
137a			      ret 
137a			 
137a			 
137a			;------------------------------------------------------------------------------ 
137a			;     free                                                                    : 
137a			;                                                                             : 
137a			; Description                                                                 : 
137a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
137a			;     returned by malloc, otherwise the behaviour is undefined.               : 
137a			;                                                                             : 
137a			;     Where possible, directly adjacent free blocks will be merged together   : 
137a			;     into larger blocks to help ensure that the heap does not become         : 
137a			;     excessively fragmented.                                                 : 
137a			;                                                                             : 
137a			;     free does not clear or set any other value into the freed space, and    : 
137a			;     therefore its contents may be visible through subsequent malloc's. The  : 
137a			;     caller should clear the freed space as required.                        : 
137a			;                                                                             : 
137a			;     This implementation of free uses the stack exclusively, and is          : 
137a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
137a			;     advisable to disable interrupts before calling free, and recommended    : 
137a			;     to avoid the use of free inside ISRs in general.                        : 
137a			;                                                                             : 
137a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
137a			;                                                                             : 
137a			; Parameters                                                                  : 
137a			;     HL  Pointer to address of first byte of allocation to be freed          : 
137a			;                                                                             : 
137a			; Returns                                                                     : 
137a			;     Nothing                                                                 : 
137a			;                                                                             : 
137a			; Stack frame                                                                 : 
137a			;       |             |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |     BC      |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |     DE      |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |     IX      |                                                       : 
137a			;       +-------------+                                                       : 
137a			;       |  prev_free  |                                                       : 
137a			;   +2  +-------------+                                                       : 
137a			;       |  next_free  |                                                       : 
137a			;   +0  +-------------+                                                       : 
137a			;       |             |                                                       : 
137a			;                                                                             : 
137a			;------------------------------------------------------------------------------ 
137a			free: 
137a			      push  BC 
137a			      push  DE 
137a			      push  IX 
137a			 
137a			      ld    A, H                    ; Exit if ptr is null 
137a			      or    L 
137a			      jp    Z, free_early_exit 
137a			 
137a			      ; Set up stack frame 
137a			      ex    DE, HL 
137a			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
137a			      add   HL, SP 
137a			      ld    SP, HL 
137a			      ld    IX, 0                   ; Use IX as a frame pointer 
137a			      add   IX, SP 
137a			 
137a			      ; The address in HL points to the start of the useable allocated space, 
137a			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
137a			      ; address of the block itself. 
137a			      ex    DE, HL 
137a			      ld    DE, -4 
137a			      add   HL, DE 
137a			 
137a			      ; An allocated block must have a null next block pointer in it 
137a			      ld    A, (HL) 
137a			      inc   HL 
137a			      or    (HL) 
137a			      jp    NZ, free_done 
137a			 
137a			      dec   HL 
137a			 
137a			      ld    B, H                    ; Copy HL to BC 
137a			      ld    C, L 
137a			 
137a			      ; Loop through the free list to find the first block with an address 
137a			      ; higher than the block being freed 
137a			      ld    HL, free_list 
137a			 
137a			free_find_higher_block: 
137a			      ld    E, (HL)                 ; Load next ptr from free block 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      dec   HL 
137a			 
137a			      ld    (IX+0), E               ; Save ptr to next free block 
137a			      ld    (IX+1), D 
137a			      ld    (IX+2), L               ; Save ptr to prev free block 
137a			      ld    (IX+3), H 
137a			 
137a			      ld    A, B                    ; Check if DE is greater than BC 
137a			      cp    D                       ; Compare MSB first 
137a			      jr    Z, $+4                  ; MSB the same, compare LSB 
137a			      jr    NC, free_find_higher_block_skip 
137a			      ld    A, C 
137a			      cp    E                       ; Then compare LSB 
137a			      jr    C, free_found_higher_block 
137a			 
137a			free_find_higher_block_skip: 
137a			      ld    A, D                    ; Reached the end of the free list? 
137a			      or    E 
137a			      jp    Z, free_done 
137a			 
137a			      ex    DE, HL 
137a			 
137a			      jr    free_find_higher_block 
137a			 
137a			free_found_higher_block: 
137a			      ; Insert freed block between prev and next free blocks 
137a			      ld    (HL), C                 ; Point prev free block to freed block 
137a			      inc   HL 
137a			      ld    (HL), B 
137a			 
137a			      ld    H, B                    ; Point freed block at next free block 
137a			      ld    L, C 
137a			      ld    (HL), E 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			      ; Check if the freed block is adjacent to the next free block 
137a			      inc   HL                      ; Load size of freed block into HL 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      ex    DE, HL 
137a			 
137a			      add   HL, BC                  ; Add addr of freed block and its size 
137a			 
137a			      ld    E, (IX+0)               ; Load addr of next free block into DE 
137a			      ld    D, (IX+1) 
137a			 
137a			      or    A                       ; Clear the carry flag 
137a			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
137a			      jr    NZ, free_check_adjacent_to_prev 
137a			 
137a			      ; Freed block is adjacent to next, merge into one bigger block 
137a			      ex    DE, HL                  ; Load next ptr from next block into DE 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      push  HL                      ; Save ptr to next block for later 
137a			 
137a			      ld    H, B                    ; Store ptr from next block into freed block 
137a			      ld    L, C 
137a			      ld    (HL), E 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			      pop   HL                      ; Restore ptr to next block 
137a			      inc   HL                      ; Load size of next block into DE 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      push  DE                      ; Save next block size for later 
137a			 
137a			      ld    H, B                    ; Load size of freed block into HL 
137a			      ld    L, C 
137a			      inc   HL 
137a			      inc   HL 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      ex    DE, HL 
137a			 
137a			      pop   DE                      ; Restore size of next block 
137a			      add   HL, DE                  ; Add sizes of both blocks 
137a			      ex    DE, HL 
137a			 
137a			      ld    H, B                    ; Store new bigger size into freed block 
137a			      ld    L, C 
137a			      inc   HL 
137a			      inc   HL 
137a			      ld    (HL), E 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			free_check_adjacent_to_prev: 
137a			      ; Check if the freed block is adjacent to the prev free block 
137a			      ld    L, (IX+2)               ; Prev free block ptr into HL 
137a			      ld    H, (IX+3) 
137a			 
137a			      inc   HL                      ; Size of prev free block into DE 
137a			      inc   HL 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      dec   HL 
137a			      dec   HL 
137a			      dec   HL 
137a			 
137a			      add   HL, DE                  ; Add prev block addr and size 
137a			 
137a			      or    A                       ; Clear the carry flag 
137a			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
137a			      jr    NZ, free_done 
137a			 
137a			      ; Freed block is adjacent to prev, merge into one bigger block 
137a			      ld    H, B                    ; Load next ptr from freed block into DE 
137a			      ld    L, C 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      push  HL                      ; Save freed block ptr for later 
137a			 
137a			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
137a			      ld    H, (IX+3) 
137a			      ld    (HL), E 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			      pop   HL                      ; Restore freed block ptr 
137a			      inc   HL                      ; Load size of freed block into DE 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			      push  DE                      ; Save freed block size for later 
137a			 
137a			      ld    L, (IX+2)               ; Load size of prev block into DE 
137a			      ld    H, (IX+3) 
137a			      inc   HL 
137a			      inc   HL 
137a			      ld    E, (HL) 
137a			      inc   HL 
137a			      ld    D, (HL) 
137a			 
137a			      pop   HL                      ; Add sizes of both blocks 
137a			      add   HL, DE 
137a			      ex    DE, HL 
137a			 
137a			      ld    L, (IX+2)               ; Store new bigger size into prev block 
137a			      ld    H, (IX+3) 
137a			      inc   HL 
137a			      inc   HL 
137a			      ld    (HL), E 
137a			      inc   HL 
137a			      ld    (HL), D 
137a			 
137a			free_done: 
137a			      ld    HL, 4                   ; Clean up stack frame 
137a			      add   HL, SP 
137a			      ld    SP, HL 
137a			 
137a			free_early_exit: 
137a			      pop   IX 
137a			      pop   DE 
137a			      pop   BC 
137a			 
137a			      ret 
137a			 
137a			 
137a			;      .org 0x8000 
137a			; 
137a			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
137a			 ;                 .dw   0 
137a			 
137a			endif 
137a			 
137a			 
137a			if MALLOC_4 
137a			 
137a			; My memory allocation code. Very very simple.... 
137a			; allocate space under 250 chars 
137a			 
137a			heap_init: 
137a				; init start of heap as zero 
137a				;  
137a			 
137a				ld hl, heap_start 
137a				ld a, 0 
137a				ld (hl), a      ; empty block 
137a				inc hl 
137a				ld a, 0 
137a				ld (hl), a      ; length of block 
137a				; write end of list 
137a				inc hl 
137a				ld a,(hl) 
137a				inc hl 
137a				ld a,(hl) 
137a				 
137a			 
137a				; init some malloc vars 
137a			 
137a				ld hl, 0 
137a				ld (free_list), hl       ; store last malloc location 
137a			 
137a				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
137a				ld a, 0 
137a				ld (hl), a 
137a			 
137a			 
137a				ld hl, heap_start 
137a				;  
137a				  
137a				ret 
137a			 
137a			 
137a			;    free block marker 
137a			;    requested size  
137a			;    pointer to next block 
137a			;    .... 
137a			;    next block marker 
137a			 
137a			 
137a			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
137a			; 
137a			 
137a			 
137a			malloc:  
137a				push de 
137a				push bc 
137a				push af 
137a			 
137a				; hl space required 
137a				 
137a				ld c, l    ; hold space   (TODO only a max of 255) 
137a			 
137a			;	inc c     ; TODO BUG need to fix memory leak on push str 
137a			;	inc c 
137a			;	inc c 
137a			;	inc c 
137a			;	inc c 
137a			;	inc c 
137a			;	inc c 
137a			 
137a			 
137a			 
137a				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
137a			 
137a				ld a, (free_list+3) 
137a				cp 0 
137a				jr z, .contheap 
137a			 
137a				ld hl, (free_list)     ; get last alloc 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "mrs" 
137a						CALLMONITOR 
137a					endif 
137a				jr .startalloc 
137a			 
137a			.contheap: 
137a				ld hl, heap_start 
137a			 
137a			.startalloc: 
137a			 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "mym" 
137a						CALLMONITOR 
137a					endif 
137a			.findblock: 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "mmf" 
137a						CALLMONITOR 
137a					endif 
137a			 
137a				ld a,(hl)  
137a				; if byte is zero then clear to use 
137a			 
137a				cp 0 
137a				jr z, .foundemptyblock 
137a			 
137a				; if byte is not clear 
137a				;     then byte is offset to next block 
137a			 
137a				inc hl 
137a				ld a, (hl) ; get size 
137a			.nextblock:	inc hl 
137a					ld e, (hl) 
137a					inc hl 
137a					ld d, (hl) 
137a					ex de, hl 
137a			;	inc hl  ; move past the store space 
137a			;	inc hl  ; move past zero index  
137a			 
137a				; TODO detect no more space 
137a			 
137a				push hl 
137a				ld de, heap_end 
137a				call cmp16 
137a				pop hl 
137a				jr nc, .nospace 
137a			 
137a				jr .findblock 
137a			 
137a			.nospace: ld hl, 0 
137a				jp .exit 
137a			 
137a			 
137a			.foundemptyblock:	 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "mme" 
137a						CALLMONITOR 
137a					endif 
137a			 
137a			; TODO has block enough space if reusing??? 
137a			 
137a				;  
137a			 
137a			; see if this block has been previously used 
137a				inc hl 
137a				ld a, (hl) 
137a				dec hl 
137a				cp 0 
137a				jr z, .newblock 
137a			 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "meR" 
137a						CALLMONITOR 
137a					endif 
137a			 
137a			; no reusing previously allocated block 
137a			 
137a			; is it smaller than previously used? 
137a				 
137a				inc hl    ; move to size 
137a				ld a, c 
137a				sub (hl)        ; we want c < (hl) 
137a				dec hl    ; move back to marker 
137a			        jr z, .findblock 
137a			 
137a				; update with the new size which should be lower 
137a			 
137a			        ;inc  hl   ; negate next move. move back to size  
137a			 
137a			.newblock: 
137a				; need to be at marker here 
137a			 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "meN" 
137a						CALLMONITOR 
137a					endif 
137a			 
137a			 
137a				ld a, c 
137a			 
137a				ld (free_list+3), a	 ; flag resume from last malloc  
137a				ld (free_list), hl    ; save out last location 
137a			 
137a			 
137a				;inc a     ; space for length byte 
137a				ld (hl), a     ; save block in use marker 
137a			 
137a				inc hl   ; move to space marker 
137a				ld (hl), a    ; save new space 
137a			 
137a				inc hl   ; move to start of allocated area 
137a				 
137a			;	push hl     ; save where we are - 1  
137a			 
137a			;	inc hl  ; move past zero index  
137a				; skip space to set down new marker 
137a			 
137a				; provide some extra space for now 
137a			 
137a				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
137a				inc a 
137a				inc a 
137a			 
137a				push hl   ; save where we are in the node block 
137a			 
137a				call addatohl 
137a			 
137a				; write linked list point 
137a			 
137a				pop de     ; get our node position 
137a				ex de, hl 
137a			 
137a				ld (hl), e 
137a				inc hl 
137a				ld (hl), d 
137a			 
137a				inc hl 
137a			 
137a				; now at start of allocated data so save pointer 
137a			 
137a				push hl 
137a			 
137a				; jump to position of next node and setup empty header in DE 
137a			 
137a				ex de, hl 
137a			 
137a			;	inc hl ; move past end of block 
137a			 
137a				ld a, 0 
137a				ld (hl), a   ; empty marker 
137a				inc hl 
137a				ld (hl), a   ; size 
137a				inc hl  
137a				ld (hl), a   ; ptr 
137a				inc hl 
137a				ld (hl), a   ; ptr 
137a			 
137a			 
137a				pop hl 
137a			 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "mmr" 
137a						CALLMONITOR 
137a					endif 
137a			 
137a			.exit: 
137a				pop af 
137a				pop bc 
137a				pop de  
137a				ret 
137a			 
137a			 
137a			 
137a			 
137a			free:  
137a				push hl 
137a				push af 
137a				; get address in hl 
137a			 
137a					if DEBUG_FORTH_MALLOC_INT 
137a						DMARK "fre" 
137a						CALLMONITOR 
137a					endif 
137a				; data is at hl - move to block count 
137a				dec hl 
137a				dec hl    ; get past pointer 
137a				dec hl 
137a			 
137a				ld a, (hl)    ; need this for a validation check 
137a			 
137a				dec hl    ; move to block marker 
137a			 
137a				; now check that the block count and block marker are the same  
137a			        ; this checks that we are on a malloc node and not random memory 
137a			        ; OK a faint chance this could be a problem but rare - famous last words! 
137a			 
137a				ld c, a 
137a				ld a, (hl)    
137a			 
137a				cp c 
137a				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
137a			 
137a				; yes good chance we are on a malloc node 
137a			 
137a				ld a, 0      
137a				ld (hl), a   ; mark as free 
137a			 
137a				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
137a			 
137a			.freeignore:  
137a			 
137a				pop af 
137a				pop hl 
137a			 
137a				ret 
137a			 
137a			 
137a			 
137a			endif 
137a			 
137a			; eof 
# End of file firmware_memory.asm
137a			  
137a			; device C  
137a			if SOUND_ENABLE  
137a				include "firmware_sound.asm"  
137a			endif  
137a			  
137a			include "firmware_diags.asm"  
137a			; Hardware diags menu 
137a			 
137a			 
137a			config: 
137a			 
137a 3e 00			ld a, 0 
137c 21 aa 13			ld hl, .configmn 
137f cd 17 0b			call menu 
1382			 
1382 fe 00			cp 0 
1384 c8				ret z 
1385			 
1385 fe 01			cp 1 
1387 cc 14 15			call z, .savetostore 
138a			 
138a fe 02			cp 2 
138c cc 62 14			call z, .selautoload 
138f fe 03			cp 3 
1391 cc 4b 14			call z, .disautoload 
1394 fe 04			cp 4 
1396 cc 12 15			call z, .selbank 
1399 fe 05			cp 5 
139b cc ef 15			call z, .debug_tog 
139e fe 06			cp 6 
13a0 cc 37 17			call z, .bpsgo 
13a3 fe 07			cp 7 
13a5 cc 15 16			call z, hardware_diags 
13a8			 
13a8 18 d0			jr config 
13aa			 
13aa			.configmn: 
13aa ba 13			dw .c3 
13ac d1 13			dw .c2 
13ae e6 13			dw .c2a 
13b0 fc 13			dw .c2b 
13b2			;	dw .c4 
13b2 19 14			dw .m4 
13b4 34 14			dw .m4b 
13b6 3c 14			dw .c1 
13b8 00 00			dw 0 
13ba				 
13ba			 
13ba .. 00		.c3: db "Add Dictionary To File",0 
13d1 .. 00		.c2: db "Select Autoload File",0 
13e6 .. 00		.c2a: db "Disable Autoload File", 0 
13fc .. 00		.c2b: db "Select Storage Bank",0 
1410 .. 00		.c4: db "Settings",0 
1419 .. 00		.m4:   db "Debug & Breakpoints On/Off",0 
1434 .. 00		.m4b:   db "Monitor",0 
143c .. 00		.c1: db "Hardware Diags",0 
144b			 
144b			 
144b			.disautoload: 
144b				if STORAGE_SE 
144b 3e fe			ld a, $fe      ; bit 0 clear 
144d 32 ce f9			ld (spi_device), a 
1450			 
1450 cd ba 03			call storage_get_block_0 
1453			 
1453 3e 00			ld a, 0 
1455 32 09 fa			ld (store_page+STORE_0_AUTOFILE), a 
1458			 
1458 21 00 00				ld hl, 0 
145b 11 e8 f9				ld de, store_page 
145e cd 6e 03			call storage_write_block	 ; save update 
1461				endif 
1461			 
1461			 
1461 c9				ret 
1462			 
1462			 
1462			 
1462			; Select auto start 
1462			 
1462			.selautoload: 
1462			 
1462				 
1462				if STORAGE_SE 
1462			 
1462 cd 39 15				call config_dir 
1465 21 a3 ef			        ld hl, scratch 
1468 3e 00				ld a, 0 
146a cd 17 0b				call menu 
146d			 
146d fe 00				cp 0 
146f c8					ret z 
1470			 
1470 3d					dec a 
1471			 
1471			 
1471					; locate menu option 
1471			 
1471 21 a3 ef				ld hl, scratch 
1474 cd 3e 0a				call table_lookup 
1477			 
1477					if DEBUG_FORTH_WORDS 
1477						DMARK "ALl" 
1477 f5				push af  
1478 3a 8c 14			ld a, (.dmark)  
147b 32 bd fb			ld (debug_mark),a  
147e 3a 8d 14			ld a, (.dmark+1)  
1481 32 be fb			ld (debug_mark+1),a  
1484 3a 8e 14			ld a, (.dmark+2)  
1487 32 bf fb			ld (debug_mark+2),a  
148a 18 03			jr .pastdmark  
148c ..			.dmark: db "ALl"  
148f f1			.pastdmark: pop af  
1490			endm  
# End of macro DMARK
1490						CALLMONITOR 
1490 cd 2d 17			call break_point_state  
1493				endm  
# End of macro CALLMONITOR
1493					endif 
1493					; with the pointer to the menu it, the byte following the zero term is the file id 
1493			 
1493 3e 00				ld a, 0 
1495 01 32 00				ld bc, 50   ; max of bytes to look at 
1498 ed b1				cpir  
149a			 
149a					if DEBUG_FORTH_WORDS 
149a						DMARK "ALb" 
149a f5				push af  
149b 3a af 14			ld a, (.dmark)  
149e 32 bd fb			ld (debug_mark),a  
14a1 3a b0 14			ld a, (.dmark+1)  
14a4 32 be fb			ld (debug_mark+1),a  
14a7 3a b1 14			ld a, (.dmark+2)  
14aa 32 bf fb			ld (debug_mark+2),a  
14ad 18 03			jr .pastdmark  
14af ..			.dmark: db "ALb"  
14b2 f1			.pastdmark: pop af  
14b3			endm  
# End of macro DMARK
14b3						CALLMONITOR 
14b3 cd 2d 17			call break_point_state  
14b6				endm  
# End of macro CALLMONITOR
14b6					endif 
14b6					;inc hl 
14b6			 
14b6 7e					ld a, (hl)   ; file id 
14b7					 
14b7				        ; save bank and file ids 
14b7			 
14b7 f5					push af 
14b8			 
14b8			; TODO need to save to block 0 on bank 1	 
14b8			 
14b8 cd ba 03				call storage_get_block_0 
14bb			 
14bb					if DEBUG_FORTH_WORDS 
14bb						DMARK "AL0" 
14bb f5				push af  
14bc 3a d0 14			ld a, (.dmark)  
14bf 32 bd fb			ld (debug_mark),a  
14c2 3a d1 14			ld a, (.dmark+1)  
14c5 32 be fb			ld (debug_mark+1),a  
14c8 3a d2 14			ld a, (.dmark+2)  
14cb 32 bf fb			ld (debug_mark+2),a  
14ce 18 03			jr .pastdmark  
14d0 ..			.dmark: db "AL0"  
14d3 f1			.pastdmark: pop af  
14d4			endm  
# End of macro DMARK
14d4						CALLMONITOR 
14d4 cd 2d 17			call break_point_state  
14d7				endm  
# End of macro CALLMONITOR
14d7					endif 
14d7 f1					pop af 
14d8			 
14d8 32 0c fa				ld (store_page+STORE_0_FILERUN),a 
14db					 
14db					; save bank id 
14db			 
14db 3a ce f9				ld a,(spi_device) 
14de 32 0b fa				ld (store_page+STORE_0_BANKRUN),a 
14e1			 
14e1					; enable auto run of store file 
14e1			 
14e1 3e 01				ld a, 1 
14e3 32 09 fa				ld (store_page+STORE_0_AUTOFILE),a 
14e6			 
14e6					; save buffer 
14e6			 
14e6 21 00 00				ld hl, 0 
14e9 11 e8 f9				ld de, store_page 
14ec					if DEBUG_FORTH_WORDS 
14ec						DMARK "ALw" 
14ec f5				push af  
14ed 3a 01 15			ld a, (.dmark)  
14f0 32 bd fb			ld (debug_mark),a  
14f3 3a 02 15			ld a, (.dmark+1)  
14f6 32 be fb			ld (debug_mark+1),a  
14f9 3a 03 15			ld a, (.dmark+2)  
14fc 32 bf fb			ld (debug_mark+2),a  
14ff 18 03			jr .pastdmark  
1501 ..			.dmark: db "ALw"  
1504 f1			.pastdmark: pop af  
1505			endm  
# End of macro DMARK
1505						CALLMONITOR 
1505 cd 2d 17			call break_point_state  
1508				endm  
# End of macro CALLMONITOR
1508					endif 
1508 cd 6e 03			call storage_write_block	 ; save update 
150b			  
150b			 
150b			 
150b			 
150b 21 a3 ef				ld hl, scratch 
150e cd 26 15				call config_fdir 
1511			 
1511			 
1511				endif 
1511 c9				ret 
1512			 
1512			 
1512			 
1512			; Select storage bank 
1512			 
1512			.selbank: 
1512			 
1512				if STORAGE_SE 
1512				endif 
1512				 
1512 c9				ret 
1513			 
1513			if STORAGE_SE 
1513			 
1513			.config_ldir:   
1513				; Load storage bank labels into menu array 
1513			 
1513				 
1513			 
1513			 
1513 c9				ret 
1514			 
1514			 
1514			endif 
1514			 
1514			 
1514			; Save user words to storage 
1514			 
1514			.savetostore: 
1514			 
1514				if STORAGE_SE 
1514			 
1514 cd 39 15				call config_dir 
1517 21 a3 ef			        ld hl, scratch 
151a 3e 00				ld a, 0 
151c cd 17 0b				call menu 
151f					 
151f 21 a3 ef				ld hl, scratch 
1522 cd 26 15				call config_fdir 
1525			 
1525			 
1525				endif 
1525			 
1525 c9				ret 
1526			 
1526			 
1526			 
1526			if STORAGE_SE 
1526			 
1526			config_fdir: 
1526				; using the scratch dir go through and release the memory allocated for each string 
1526				 
1526 21 a3 ef			ld hl, scratch 
1529 5e			.cfdir:	ld e,(hl) 
152a 23				inc hl 
152b 56				ld d,(hl) 
152c 23				inc hl 
152d			 
152d eb				ex de, hl 
152e cd 43 0d			call ishlzero 
1531 c8				ret z     ; return on null pointer 
1532 cd ab 12			call free 
1535 eb				ex de, hl 
1536 18 f1			jr .cfdir 
1538			 
1538			 
1538 c9				ret 
1539			 
1539			 
1539			config_dir: 
1539			 
1539				; for the config menus that need to build a directory of storage call this routine 
1539				; it will construct a menu in scratch to pass to menu 
1539			 
1539				; open storage device 
1539			 
1539				; execute DIR to build a list of files and their ids into scratch in menu format 
1539				; once the menu has finished then will need to call config_fdir to release the strings 
1539				 
1539				; c = number items 
1539			 
1539				 
1539 cd ba 03			call storage_get_block_0 
153c			 
153c 21 e8 f9			ld hl, store_page     ; get current id count 
153f 46				ld b, (hl) 
1540 0e 00			ld c, 0    ; count of files   
1542			 
1542			 
1542 21 a3 ef			ld hl, scratch 
1545 22 e4 f9			ld (store_tmp2), hl    ; location to poke strings 
1548			 
1548				; check for empty drive 
1548			 
1548 3e 00			ld a, 0 
154a b8				cp b 
154b ca e5 15			jp z, .dirdone 
154e			 
154e				 
154e					if DEBUG_FORTH_WORDS 
154e						DMARK "Cdc" 
154e f5				push af  
154f 3a 63 15			ld a, (.dmark)  
1552 32 bd fb			ld (debug_mark),a  
1555 3a 64 15			ld a, (.dmark+1)  
1558 32 be fb			ld (debug_mark+1),a  
155b 3a 65 15			ld a, (.dmark+2)  
155e 32 bf fb			ld (debug_mark+2),a  
1561 18 03			jr .pastdmark  
1563 ..			.dmark: db "Cdc"  
1566 f1			.pastdmark: pop af  
1567			endm  
# End of macro DMARK
1567						CALLMONITOR 
1567 cd 2d 17			call break_point_state  
156a				endm  
# End of macro CALLMONITOR
156a					endif 
156a			 
156a			 
156a			.diritem:	 
156a c5				push bc 
156b				; for each of the current ids do a search for them and if found push to stack 
156b			 
156b 21 40 00				ld hl, STORE_BLOCK_PHY 
156e 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
1570 58					ld e,b 
1571			 
1571 cd 2e 06				call storage_findnextid 
1574			 
1574			 
1574					; if found hl will be non zero 
1574			 
1574 cd 43 0d				call ishlzero 
1577 28 69				jr z, .dirnotfound 
1579			 
1579					; increase count 
1579			 
1579 c1					pop bc	 
157a 0c					inc c 
157b c5					push bc 
157c					 
157c			 
157c					; get file header and push the file name 
157c			 
157c 11 e8 f9				ld de, store_page 
157f cd 09 03				call storage_read_block 
1582			 
1582					; push file id to stack 
1582				 
1582 3a e8 f9				ld a, (store_page) 
1585 26 00				ld h, 0 
1587 6f					ld l, a 
1588			 
1588					;call forth_push_numhl 
1588					; TODO store id 
1588			 
1588 e5					push hl 
1589			 
1589					; push extent count to stack  
1589				 
1589 21 eb f9				ld hl, store_page+3 
158c			 
158c					; get file name length 
158c			 
158c cd 78 11				call strlenz   
158f			 
158f 23					inc hl   ; cover zero term 
1590 23					inc hl  ; stick the id at the end of the area 
1591			 
1591 e5					push hl 
1592 c1					pop bc    ; move length to bc 
1593			 
1593 cd e1 11				call malloc 
1596			 
1596					; TODO save malloc area to scratch 
1596			 
1596 eb					ex de, hl 
1597 2a e4 f9				ld hl, (store_tmp2) 
159a 73					ld (hl), e 
159b 23					inc hl 
159c 72					ld (hl), d 
159d 23					inc hl 
159e 22 e4 f9				ld (store_tmp2), hl 
15a1			 
15a1					 
15a1			 
15a1					;pop hl   ; get source 
15a1			;		ex de, hl    ; swap aronund	 
15a1			 
15a1 21 eb f9				ld hl, store_page+3 
15a4					if DEBUG_FORTH_WORDS 
15a4						DMARK "CFd" 
15a4 f5				push af  
15a5 3a b9 15			ld a, (.dmark)  
15a8 32 bd fb			ld (debug_mark),a  
15ab 3a ba 15			ld a, (.dmark+1)  
15ae 32 be fb			ld (debug_mark+1),a  
15b1 3a bb 15			ld a, (.dmark+2)  
15b4 32 bf fb			ld (debug_mark+2),a  
15b7 18 03			jr .pastdmark  
15b9 ..			.dmark: db "CFd"  
15bc f1			.pastdmark: pop af  
15bd			endm  
# End of macro DMARK
15bd						CALLMONITOR 
15bd cd 2d 17			call break_point_state  
15c0				endm  
# End of macro CALLMONITOR
15c0					endif 
15c0 ed b0				ldir 
15c2			 
15c2					; de is past string, move back one and store id 
15c2					 
15c2 1b					dec de 
15c3			 
15c3					; store file id 
15c3			 
15c3 e1					pop hl 
15c4 eb					ex de,hl 
15c5 73					ld (hl), e 
15c6			 
15c6					if DEBUG_FORTH_WORDS 
15c6						DMARK "Cdi" 
15c6 f5				push af  
15c7 3a db 15			ld a, (.dmark)  
15ca 32 bd fb			ld (debug_mark),a  
15cd 3a dc 15			ld a, (.dmark+1)  
15d0 32 be fb			ld (debug_mark+1),a  
15d3 3a dd 15			ld a, (.dmark+2)  
15d6 32 bf fb			ld (debug_mark+2),a  
15d9 18 03			jr .pastdmark  
15db ..			.dmark: db "Cdi"  
15de f1			.pastdmark: pop af  
15df			endm  
# End of macro DMARK
15df						CALLMONITOR 
15df cd 2d 17			call break_point_state  
15e2				endm  
# End of macro CALLMONITOR
15e2					endif 
15e2					 
15e2			.dirnotfound: 
15e2 c1					pop bc     
15e3 10 85				djnz .diritem 
15e5				 
15e5			.dirdone:	 
15e5			 
15e5 3e 00				ld a, 0 
15e7 2a e4 f9				ld hl, (store_tmp2) 
15ea 77					ld (hl), a 
15eb 23					inc hl 
15ec 77					ld (hl), a 
15ed 23					inc hl 
15ee					; push a count of the dir items found 
15ee			 
15ee			;		ld h, 0 
15ee			;		ld l, c 
15ee			 
15ee c9				ret 
15ef			 
15ef			endif 
15ef			 
15ef			 
15ef			; Settings 
15ef			; Run  
15ef			 
15ef			 
15ef			 
15ef			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
15ef			;;hd_menu2:   db "        2: Editor",0   
15ef			;hd_menu2:   db "        2: Editor       6: Menu",0   
15ef			;hd_menu3:   db "        3: Storage",0 
15ef			;hd_menu4:   db "0=quit  4: Debug",0 
15ef			;hd_don:     db "ON",0 
15ef			;hd_doff:     db "OFF",0 
15ef			; 
15ef			; 
15ef			; 
15ef			;hardware_diags_old:       
15ef			; 
15ef			;.diagmenu: 
15ef			;	call clear_display 
15ef			;	ld a, display_row_1 
15ef			;	ld de, hd_menu1 
15ef			;	call str_at_display 
15ef			; 
15ef			;	ld a, display_row_2 
15ef			;	ld de, hd_menu2 
15ef			;	call str_at_display 
15ef			; 
15ef			;	ld a, display_row_3 
15ef			;	ld de, hd_menu3 
15ef			;	call str_at_display 
15ef			; 
15ef			;	ld a,  display_row_4 
15ef			;	ld de, hd_menu4 
15ef			;	call str_at_display 
15ef			; 
15ef			;	; display debug state 
15ef			; 
15ef			;	ld de, hd_don 
15ef			;	ld a, (os_view_disable) 
15ef			;	cp 0 
15ef			;	jr z, .distog 
15ef			;	ld de, hd_doff 
15ef			;.distog: ld a, display_row_4+17 
15ef			;	call str_at_display 
15ef			; 
15ef			;	call update_display 
15ef			; 
15ef			;	call cin_wait 
15ef			; 
15ef			; 
15ef			; 
15ef			;	cp '4' 
15ef			;	jr nz, .diagn1 
15ef			; 
15ef			;	; debug toggle 
15ef			; 
15ef			;	ld a, (os_view_disable) 
15ef			;	ld b, '*' 
15ef			;	cp 0 
15ef			;	jr z, .debtog 
15ef			;	ld b, 0 
15ef			;.debtog:	 
15ef			;	ld a,b 
15ef			;	ld (os_view_disable),a 
15ef			; 
15ef			;.diagn1: cp '0' 
15ef			;	 ret z 
15ef			; 
15ef			;;	cp '1' 
15ef			;;       jp z, matrix	 
15ef			;;   TODO keyboard matrix test 
15ef			; 
15ef			;	cp '2' 
15ef			;	jp z, .diagedit 
15ef			; 
15ef			;;	cp '6' 
15ef			;;	jp z, .menutest 
15ef			;;if ENABLE_BASIC 
15ef			;;	cp '6' 
15ef			;;	jp z, basic 
15ef			;;endif 
15ef			 ; 
15ef			;	jp .diagmenu 
15ef			; 
15ef			; 
15ef			;	ret 
15ef			 
15ef			 
15ef			.debug_tog: 
15ef 21 36 16			ld hl, .menudebug 
15f2				 
15f2 3a 94 ef			ld a, (os_view_disable) 
15f5 fe 2a			cp '*' 
15f7 20 04			jr nz,.tdon  
15f9 3e 01			ld a, 1 
15fb 18 02			jr .tog1 
15fd 3e 00		.tdon: ld a, 0 
15ff			 
15ff			.tog1: 
15ff cd 17 0b			call menu 
1602 fe 00			cp 0 
1604 c8				ret z 
1605 fe 01			cp 1    ; disable debug 
1607 28 04			jr z, .dtog0 
1609 3e 2a			ld a, '*' 
160b 18 02			jr .dtogset 
160d 3e 00		.dtog0: ld a, 0 
160f 32 94 ef		.dtogset:  ld (os_view_disable), a 
1612 c3 ef 15			jp .debug_tog 
1615			 
1615			 
1615			hardware_diags:       
1615			 
1615			.diagm: 
1615 21 28 16			ld hl, .menuitems 
1618 3e 00			ld a, 0 
161a cd 17 0b			call menu 
161d			 
161d fe 00		         cp 0 
161f c8				 ret z 
1620			 
1620 fe 02			cp 2 
1622 ca 81 16			jp z, .diagedit 
1625			 
1625			;	cp '6' 
1625			;	jp z, .menutest 
1625			;if ENABLE_BASIC 
1625			;	cp '6' 
1625			;	jp z, basic 
1625			;endif 
1625			  
1625 c3 15 16			jp .diagm 
1628			 
1628				 
1628 3c 16		.menuitems:   	dw .m1 
162a 47 16				dw .m2 
162c 4e 16				dw .m3 
162e 56 16				dw .m5 
1630 5c 16				dw .m5a 
1632 65 16				dw .m5b 
1634 00 00				dw 0 
1636			 
1636			.menudebug: 
1636 6e 16				dw .m6 
1638 77 16				dw .m7 
163a 00 00				dw 0 
163c			 
163c .. 00		.m1:   db "Key Matrix",0 
1647 .. 00		.m2:   db "Editor",0 
164e .. 00		.m3:   db "Storage",0 
1656 .. 00		.m5:   db "Sound",0 
165c .. 00		.m5a:  db "RAM Test",0 
1665 .. 00		.m5b:  db "LCD Test",0 
166e			 
166e .. 00		.m6:   db "Debug ON",0 
1677 .. 00		.m7:   db "Debug OFF",0 
1681			 
1681			; debug editor 
1681			 
1681			.diagedit: 
1681			 
1681 21 a3 ef			ld hl, scratch 
1684			;	ld bc, 250 
1684			;	ldir 
1684				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1684 3e 00			ld a, 0 
1686 77				ld (hl), a 
1687 23				inc hl 
1688 77				ld (hl), a 
1689 23				inc hl 
168a 77				ld (hl), a 
168b			 
168b cd e6 0a		        call clear_display 
168e cd 09 0b			call update_display 
1691 3e 01			ld a, 1 
1693 32 c3 fb			ld (hardware_diag), a 
1696			.diloop: 
1696 3e 00			ld a, display_row_1 
1698 0e 00			ld c, 0 
169a 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
169c 1e 28			ld e, 40 
169e			 
169e 21 a3 ef			ld hl, scratch	 
16a1 cd 47 0d			call input_str 
16a4			 
16a4 3e 14			ld a, display_row_2 
16a6 11 a3 ef			ld de, scratch 
16a9 cd f9 0a			call str_at_display 
16ac cd 09 0b			call update_display 
16af			 
16af c3 96 16			jp .diloop 
16b2			 
16b2			 
16b2			; pass word in hl 
16b2			; a has display location 
16b2			display_word_at: 
16b2 f5				push af 
16b3 e5				push hl 
16b4 7c				ld a,h 
16b5 21 a8 f2			ld hl, os_word_scratch 
16b8 cd 1b 10			call hexout 
16bb e1				pop hl 
16bc 7d				ld a,l 
16bd 21 aa f2			ld hl, os_word_scratch+2 
16c0 cd 1b 10			call hexout 
16c3 21 ac f2			ld hl, os_word_scratch+4 
16c6 3e 00			ld a,0 
16c8 77				ld (hl),a 
16c9 11 a8 f2			ld de,os_word_scratch 
16cc f1				pop af 
16cd cd f9 0a				call str_at_display 
16d0 c9				ret 
16d1			 
16d1			display_ptr_state: 
16d1			 
16d1				; to restore afterwards 
16d1			 
16d1 d5				push de 
16d2 c5				push bc 
16d3 e5				push hl 
16d4 f5				push af 
16d5			 
16d5				; for use in here 
16d5			 
16d5			;	push bc 
16d5			;	push de 
16d5			;	push hl 
16d5			;	push af 
16d5			 
16d5 cd e6 0a			call clear_display 
16d8			 
16d8 11 ab 18			ld de, .ptrstate 
16db 3e 00			ld a, display_row_1 
16dd cd f9 0a			call str_at_display 
16e0			 
16e0				; display debug step 
16e0			 
16e0			 
16e0 11 bd fb			ld de, debug_mark 
16e3 3e 12			ld a, display_row_1+display_cols-2 
16e5 cd f9 0a			call str_at_display 
16e8			 
16e8				; display a 
16e8 11 b5 18			ld de, .ptrcliptr 
16eb 3e 14			ld a, display_row_2 
16ed cd f9 0a			call str_at_display 
16f0			 
16f0 f1				pop af 
16f1 2a ae f9			ld hl,(cli_ptr) 
16f4 3e 1c			ld a, display_row_2+8 
16f6 cd b2 16			call display_word_at 
16f9			 
16f9			 
16f9				; display hl 
16f9			 
16f9			 
16f9 11 bd 18			ld de, .ptrclioptr 
16fc 3e 1e			ld a, display_row_2+10 
16fe cd f9 0a			call str_at_display 
1701			; 
1701			;	pop hl 
1701 3e 21			ld a, display_row_2+13 
1703 2a ac f9			ld hl,(cli_origptr) 
1706 cd b2 16			call display_word_at 
1709			; 
1709			;	 
1709			;	; display de 
1709			 
1709			;	ld de, .regstatede 
1709			;	ld a, display_row_3 
1709			;	call str_at_display 
1709			 
1709			;	pop de 
1709			;	ld h,d 
1709			;	ld l, e 
1709			;	ld a, display_row_3+3 
1709			;	call display_word_at 
1709			 
1709			 
1709				; display bc 
1709			 
1709			;	ld de, .regstatebc 
1709			;	ld a, display_row_3+10 
1709			;	call str_at_display 
1709			 
1709			;	pop bc 
1709			;	ld h,b 
1709			;	ld l, c 
1709			;	ld a, display_row_3+13 
1709			;	call display_word_at 
1709			 
1709			 
1709				; display dsp 
1709			 
1709			;	ld de, .regstatedsp 
1709			;	ld a, display_row_4 
1709			;	call str_at_display 
1709			 
1709				 
1709			;	ld hl,(cli_data_sp) 
1709			;	ld a, display_row_4+4 
1709			;	call display_word_at 
1709			 
1709				; display rsp 
1709			 
1709 11 ec 18			ld de, .regstatersp 
170c 3e 46			ld a, display_row_4+10 
170e cd f9 0a			call str_at_display 
1711			 
1711				 
1711 2a 94 f9			ld hl,(cli_ret_sp) 
1714 3e 4a			ld a, display_row_4+14 
1716 cd b2 16			call display_word_at 
1719			 
1719 cd 09 0b			call update_display 
171c			 
171c cd 66 0a			call delay1s 
171f cd 66 0a			call delay1s 
1722 cd 66 0a			call delay1s 
1725			 
1725			 
1725 cd 35 1c			call next_page_prompt 
1728			 
1728				; restore  
1728			 
1728 f1				pop af 
1729 e1				pop hl 
172a c1				pop bc 
172b d1				pop de 
172c c9				ret 
172d			 
172d			break_point_state: 
172d f5				push af 
172e			 
172e				; see if disabled 
172e			 
172e 3a 94 ef			ld a, (os_view_disable) 
1731 fe 2a			cp '*' 
1733 20 02			jr nz, .bpsgo 
1735 f1				pop af 
1736 c9				ret 
1737			 
1737			.bpsgo: 
1737 f1				pop af 
1738 f5				push af 
1739 22 90 ef			ld (os_view_hl), hl 
173c ed 53 8e ef		ld (os_view_de), de 
1740 ed 43 8c ef		ld (os_view_bc), bc 
1744 e5				push hl 
1745 6f				ld l, a 
1746 26 00			ld h, 0 
1748 22 92 ef			ld (os_view_af),hl 
174b			 
174b 21 53 fb				ld hl, display_fb0 
174e 22 5e fa				ld (display_fb_active), hl 
1751 e1				pop hl	 
1752			 
1752 3e 31			ld a, '1' 
1754 fe 2a		.bps1:  cp '*' 
1756 20 03			jr nz, .bps1b 
1758 32 94 ef			ld (os_view_disable),a 
175b fe 31		.bps1b:  cp '1' 
175d 20 14			jr nz, .bps2 
175f			 
175f				; display reg 
175f			 
175f				 
175f			 
175f 3a 92 ef			ld a, (os_view_af) 
1762 2a 90 ef			ld hl, (os_view_hl) 
1765 ed 5b 8e ef		ld de, (os_view_de) 
1769 ed 4b 8c ef		ld bc, (os_view_bc) 
176d cd 07 18			call display_reg_state 
1770 c3 f3 17			jp .bpschk 
1773			 
1773 fe 32		.bps2:  cp '2' 
1775 20 08			jr nz, .bps3 
1777				 
1777				; display hl 
1777 2a 90 ef			ld hl, (os_view_hl) 
177a cd f1 18			call display_dump_at_hl 
177d			 
177d 18 74			jr .bpschk 
177f			 
177f fe 33		.bps3:  cp '3' 
1781 20 08			jr nz, .bps4 
1783			 
1783			        ; display de 
1783 2a 8e ef			ld hl, (os_view_de) 
1786 cd f1 18			call display_dump_at_hl 
1789			 
1789 18 68			jr .bpschk 
178b fe 34		.bps4:  cp '4' 
178d 20 08			jr nz, .bps5 
178f			 
178f			        ; display bc 
178f 2a 8c ef			ld hl, (os_view_bc) 
1792 cd f1 18			call display_dump_at_hl 
1795			 
1795 18 5c			jr .bpschk 
1797 fe 35		.bps5:  cp '5' 
1799 20 08		        jr nz, .bps7 
179b			 
179b				; display cur ptr 
179b 2a ae f9			ld hl, (cli_ptr) 
179e cd f1 18			call display_dump_at_hl 
17a1			 
17a1 18 50			jr .bpschk 
17a3 fe 36		.bps7:  cp '6' 
17a5 20 08			jr nz, .bps8b 
17a7				 
17a7				; display cur orig ptr 
17a7 2a ac f9			ld hl, (cli_origptr) 
17aa cd f1 18			call display_dump_at_hl 
17ad 18 44			jr .bpschk 
17af fe 37		.bps8b:  cp '7' 
17b1 20 08			jr nz, .bps9 
17b3				 
17b3				; display dsp 
17b3 2a 90 f9			ld hl, (cli_data_sp) 
17b6 cd f1 18			call display_dump_at_hl 
17b9			 
17b9 18 38			jr .bpschk 
17bb fe 39		.bps9:  cp '9' 
17bd 20 05			jr nz, .bps8c 
17bf				 
17bf				; display SP 
17bf			;	ld hl, sp 
17bf cd f1 18			call display_dump_at_hl 
17c2			 
17c2 18 2f			jr .bpschk 
17c4 fe 38		.bps8c:  cp '8' 
17c6 20 08			jr nz, .bps8d 
17c8				 
17c8				; display rsp 
17c8 2a 94 f9			ld hl, (cli_ret_sp) 
17cb cd f1 18			call display_dump_at_hl 
17ce			 
17ce 18 23			jr .bpschk 
17d0 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
17d2 20 05			jr nz, .bps8 
17d4 cd 2b 1a			call monitor 
17d7			 
17d7 18 1a			jr .bpschk 
17d9 fe 30		.bps8:  cp '0' 
17db 20 16			jr nz, .bpschk 
17dd			 
17dd 21 02 fb				ld hl, display_fb1 
17e0 22 5e fa				ld (display_fb_active), hl 
17e3 cd 09 0b				call update_display 
17e6			 
17e6				;ld a, (os_view_af) 
17e6 2a 90 ef			ld hl, (os_view_hl) 
17e9 ed 5b 8e ef		ld de, (os_view_de) 
17ed ed 4b 8c ef		ld bc, (os_view_bc) 
17f1 f1				pop af 
17f2 c9				ret 
17f3			 
17f3			.bpschk:   
17f3 cd 66 0a			call delay1s 
17f6 3e 4f		ld a,display_row_4 + display_cols - 1 
17f8 11 33 1c		        ld de, endprg 
17fb cd f9 0a			call str_at_display 
17fe cd 09 0b			call update_display 
1801 cd 12 67			call cin_wait 
1804			 
1804 c3 54 17			jp .bps1 
1807			 
1807			 
1807			display_reg_state: 
1807			 
1807				; to restore afterwards 
1807			 
1807 d5				push de 
1808 c5				push bc 
1809 e5				push hl 
180a f5				push af 
180b			 
180b				; for use in here 
180b			 
180b c5				push bc 
180c d5				push de 
180d e5				push hl 
180e f5				push af 
180f			 
180f cd e6 0a			call clear_display 
1812			 
1812 11 c7 18			ld de, .regstate 
1815 3e 00			ld a, display_row_1 
1817 cd f9 0a			call str_at_display 
181a			 
181a				; display debug step 
181a			 
181a			 
181a 11 bd fb			ld de, debug_mark 
181d 3e 11			ld a, display_row_1+display_cols-3 
181f cd f9 0a			call str_at_display 
1822			 
1822				; display a 
1822 11 e3 18			ld de, .regstatea 
1825 3e 14			ld a, display_row_2 
1827 cd f9 0a			call str_at_display 
182a			 
182a e1				pop hl 
182b			;	ld h,0 
182b			;	ld l, a 
182b 3e 17			ld a, display_row_2+3 
182d cd b2 16			call display_word_at 
1830			 
1830			 
1830				; display hl 
1830			 
1830			 
1830 11 d7 18			ld de, .regstatehl 
1833 3e 1e			ld a, display_row_2+10 
1835 cd f9 0a			call str_at_display 
1838			 
1838 e1				pop hl 
1839 3e 21			ld a, display_row_2+13 
183b cd b2 16			call display_word_at 
183e			 
183e				 
183e				; display de 
183e			 
183e 11 db 18			ld de, .regstatede 
1841 3e 28			ld a, display_row_3 
1843 cd f9 0a			call str_at_display 
1846			 
1846 e1				pop hl 
1847			;	ld h,d 
1847			;	ld l, e 
1847 3e 2b			ld a, display_row_3+3 
1849 cd b2 16			call display_word_at 
184c			 
184c			 
184c				; display bc 
184c			 
184c 11 df 18			ld de, .regstatebc 
184f 3e 32			ld a, display_row_3+10 
1851 cd f9 0a			call str_at_display 
1854			 
1854 e1				pop hl 
1855			;	ld h,b 
1855			;	ld l, c 
1855 3e 35			ld a, display_row_3+13 
1857 cd b2 16			call display_word_at 
185a			 
185a			 
185a				; display dsp 
185a			 
185a 11 e7 18			ld de, .regstatedsp 
185d 3e 3c			ld a, display_row_4 
185f cd f9 0a			call str_at_display 
1862			 
1862				 
1862 2a 90 f9			ld hl,(cli_data_sp) 
1865 3e 40			ld a, display_row_4+4 
1867 cd b2 16			call display_word_at 
186a			 
186a				; display rsp 
186a			 
186a 11 ec 18			ld de, .regstatersp 
186d 3e 46			ld a, display_row_4+10 
186f cd f9 0a			call str_at_display 
1872			 
1872				 
1872 2a 94 f9			ld hl,(cli_ret_sp) 
1875 3e 4a			ld a, display_row_4+14 
1877 cd b2 16			call display_word_at 
187a			 
187a cd 09 0b			call update_display 
187d			 
187d			;	call delay1s 
187d			;	call delay1s 
187d			;	call delay1s 
187d			 
187d			 
187d			;	call next_page_prompt 
187d			 
187d				; restore  
187d			 
187d f1				pop af 
187e e1				pop hl 
187f c1				pop bc 
1880 d1				pop de 
1881 c9				ret 
1882			 
1882 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1896 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
18ab .. 00		.ptrstate:	db "Ptr State",0 
18b5 .. 00		.ptrcliptr:     db "cli_ptr",0 
18bd .. 00		.ptrclioptr:     db "cli_o_ptr",0 
18c7 .. 00		.regstate:	db "Reg State (1/0)",0 
18d7 .. 00		.regstatehl:	db "HL:",0 
18db .. 00		.regstatede:	db "DE:",0 
18df .. 00		.regstatebc:	db "BC:",0 
18e3 .. 00		.regstatea:	db "A :",0 
18e7 .. 00		.regstatedsp:	db "DSP:",0 
18ec .. 00		.regstatersp:	db "RSP:",0 
18f1			 
18f1			display_dump_at_hl: 
18f1 e5				push hl 
18f2 d5				push de 
18f3 c5				push bc 
18f4 f5				push af 
18f5			 
18f5 22 c6 f2			ld (os_cur_ptr),hl	 
18f8 cd e6 0a			call clear_display 
18fb cd 3d 1b			call dumpcont 
18fe			;	call delay1s 
18fe			;	call next_page_prompt 
18fe			 
18fe			 
18fe f1				pop af 
18ff c1				pop bc 
1900 d1				pop de 
1901 e1				pop hl 
1902 c9				ret 
1903			 
1903			;if ENABLE_BASIC 
1903			;	include "nascombasic.asm" 
1903			;	basic: 
1903			;	include "forth/FORTH.ASM" 
1903			;endif 
1903			 
1903			; eof 
1903			 
1903			 
# End of file firmware_diags.asm
1903			  
1903			  
1903			  
1903			  
1903			; eof  
1903			  
# End of file firmware.asm
1903			 
1903			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1903			;if BASE_KEV  
1903			;baseram: equ 08000h 
1903			;endif 
1903			 
1903			;if BASE_SC114 
1903			;baseram:     equ    endofcode 
1903			;endif 
1903			 
1903			 
1903			; start system 
1903			 
1903			coldstart: 
1903				; set sp 
1903				; di/ei 
1903			 
1903 f3				di 
1904 31 fd ff			ld sp, tos 
1907			;	ei 
1907			 
1907			 
1907				; disable breakpoint by default 
1907			 
1907 3e 2a			ld a,'*' 
1909 32 94 ef			ld (os_view_disable),a 
190c			 
190c				; init hardware 
190c			 
190c				; init keyboard and screen hardware 
190c			 
190c cd 03 00			call hardware_init 
190f			 
190f			 
190f				; detect if any keys are held down to enable breakpoints at start up 
190f			 
190f cd 23 67			call cin  
1912 fe 00			cp 0 
1914 28 03			jr z, .nokeys 
1916			 
1916				;call hardware_diags 
1916 cd 7a 13			call config 
1919			 
1919			;	ld de, .bpen 
1919			;	ld a, display_row_4 
1919			;	call str_at_display 
1919			;	call update_display 
1919			; 
1919			;	ld a,0 
1919			;	ld (os_view_disable),a 
1919			; 
1919			;.bpwait: 
1919			;	call cin 
1919			;	cp 0 
1919			;	jr z, .bpwait 
1919			;	jr .nokeys 
1919			; 
1919			; 
1919			;.bpen:  db "Break points enabled!",0 
1919			 
1919			 
1919			 
1919			 
1919			 
1919			 
1919			.nokeys: 
1919			 
1919			 
1919				 
1919			 
1919			;jp  testkey 
1919			 
1919			;call storage_get_block_0 
1919			; 
1919			;ld hl, 0 
1919			;ld de, store_page 
1919			;call storage_read_block 
1919			 
1919				 
1919			;ld hl, 10 
1919			;ld de, store_page 
1919			;call storage_read_block 
1919			 
1919			 
1919			 
1919			 
1919			 
1919			;stop:	nop 
1919			;	jp stop 
1919			 
1919			 
1919			 
1919			main: 
1919 cd e6 0a			call clear_display 
191c cd 09 0b			call update_display 
191f			 
191f			 
191f			 
191f			;	call testlcd 
191f			 
191f			 
191f			 
191f cd fb 1f			call forth_init 
1922			 
1922			 
1922			warmstart: 
1922 cd d1 1f			call forth_warmstart 
1925			 
1925				; run startup word load 
1925			        ; TODO prevent this running at warmstart after crash  
1925			 
1925				if STARTUP_ENABLE 
1925					if STORAGE_SE 
1925 cd 54 64					call forth_autoload 
1928					endif 
1928 cd 63 61				call forth_startup 
192b			 
192b			 
192b				endif 
192b			 
192b				; show free memory after boot 
192b 11 c5 19			ld de, freeram 
192e 3e 00			ld a, display_row_1 
1930 cd f9 0a			call str_at_display 
1933			 
1933			; Or use heap_size word???? 
1933 21 89 ef			ld hl, heap_end 
1936 11 0e 80			ld de, heap_start 
1939 ed 52			sbc hl, de 
193b e5				push hl 
193c 7c				ld a,h	         	 
193d 21 a8 f2			ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1940 cd 1b 10			call hexout 
1943 e1			   	pop hl 
1944			 
1944 7d				ld a,l 
1945 21 aa f2			ld hl, os_word_scratch+2 
1948 cd 1b 10			call hexout 
194b 21 ac f2			ld hl, os_word_scratch+4 
194e 3e 00			ld a, 0 
1950 77				ld (hl),a 
1951 11 a8 f2			ld de, os_word_scratch 
1954 3e 0d			ld a, display_row_1 + 13 
1956 cd f9 0a			call str_at_display 
1959 cd 09 0b			call update_display 
195c			 
195c			 
195c				;call demo 
195c			 
195c			 
195c				; init scratch input area for cli commands 
195c			 
195c 21 ca f2			ld hl, os_cli_cmd 
195f 3e 00			ld a,0 
1961 77				ld (hl),a 
1962 23				inc hl 
1963 77				ld (hl),a 
1964			 
1964 3e 00			ld a,0 
1966 32 c9 f3			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1969			 
1969 32 c6 f2			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
196c 32 c7 f2			ld (os_cur_ptr+1),a	 
196f			 
196f 32 a8 f2			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1972 32 a9 f2			ld (os_word_scratch+1),a	 
1975				 
1975			 
1975				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1975 21 ca f2			ld hl, os_cli_cmd 
1978			 
1978 3e 00			ld a, 0		 ; init cli input 
197a 77				ld (hl), a 
197b 3e 14			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
197d			cli: 
197d				; show cli prompt 
197d				;push af 
197d				;ld a, 0 
197d				;ld de, prompt 
197d				;call str_at_display 
197d			 
197d				;call update_display 
197d				;pop af 
197d				;inc a 
197d				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
197d 0e 00			ld c, 0 
197f 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1981 1e 28			ld e, 40 
1983			 
1983 21 ca f2			ld hl, os_cli_cmd 
1986			 
1986				STACKFRAME OFF $fefe $9f9f 
1986				if DEBUG_STACK_IMB 
1986					if OFF 
1986						exx 
1986						ld de, $fefe 
1986						ld a, d 
1986						ld hl, curframe 
1986						call hexout 
1986						ld a, e 
1986						ld hl, curframe+2 
1986						call hexout 
1986						ld hl, $fefe 
1986						push hl 
1986						ld hl, $9f9f 
1986						push hl 
1986						exx 
1986					endif 
1986				endif 
1986			endm 
# End of macro STACKFRAME
1986			 
1986 cd 47 0d			call input_str 
1989			 
1989				STACKFRAMECHK OFF $fefe $9f9f 
1989				if DEBUG_STACK_IMB 
1989					if OFF 
1989						exx 
1989						ld hl, $9f9f 
1989						pop de   ; $9f9f 
1989						call cmp16 
1989						jr nz, .spnosame 
1989						ld hl, $fefe 
1989						pop de   ; $fefe 
1989						call cmp16 
1989						jr z, .spfrsame 
1989						.spnosame: call showsperror 
1989						.spfrsame: nop 
1989						exx 
1989					endif 
1989				endif 
1989			endm 
# End of macro STACKFRAMECHK
1989			 
1989				; copy input to last command 
1989			 
1989 21 ca f2			ld hl, os_cli_cmd 
198c 11 c9 f3			ld de, os_last_cmd 
198f 01 ff 00			ld bc, 255 
1992 ed b0			ldir 
1994			 
1994				; wipe current buffer 
1994			 
1994			;	ld a, 0 
1994			;	ld hl, os_cli_cmd 
1994			;	ld de, os_cli_cmd+1 
1994			;	ld bc, 254 
1994			;	ldir 
1994				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1994			;	call strcpy 
1994			;	ld a, 0 
1994			;	ld (hl), a 
1994			;	inc hl 
1994			;	ld (hl), a 
1994			;	inc hl 
1994			;	ld (hl), a 
1994			 
1994				; switch frame buffer to program  
1994			 
1994 21 02 fb				ld hl, display_fb1 
1997 22 5e fa				ld (display_fb_active), hl 
199a			 
199a			;	nop 
199a				STACKFRAME ON $fbfe $8f9f 
199a				if DEBUG_STACK_IMB 
199a					if ON 
199a						exx 
199a						ld de, $fbfe 
199a						ld a, d 
199a						ld hl, curframe 
199a						call hexout 
199a						ld a, e 
199a						ld hl, curframe+2 
199a						call hexout 
199a						ld hl, $fbfe 
199a						push hl 
199a						ld hl, $8f9f 
199a						push hl 
199a						exx 
199a					endif 
199a				endif 
199a			endm 
# End of macro STACKFRAME
199a				; first time into the parser so pass over the current scratch pad 
199a 21 ca f2			ld hl,os_cli_cmd 
199d				; tokenise the entered statement(s) in HL 
199d cd 74 20			call forthparse 
19a0			        ; exec forth statements in top of return stack 
19a0 cd b4 20			call forthexec 
19a3				;call forthexec_cleanup 
19a3			;	call parsenext 
19a3			 
19a3				STACKFRAMECHK ON $fbfe $8f9f 
19a3				if DEBUG_STACK_IMB 
19a3					if ON 
19a3						exx 
19a3						ld hl, $8f9f 
19a3						pop de   ; $8f9f 
19a3						call cmp16 
19a3						jr nz, .spnosame 
19a3						ld hl, $fbfe 
19a3						pop de   ; $fbfe 
19a3						call cmp16 
19a3						jr z, .spfrsame 
19a3						.spnosame: call showsperror 
19a3						.spfrsame: nop 
19a3						exx 
19a3					endif 
19a3				endif 
19a3			endm 
# End of macro STACKFRAMECHK
19a3				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
19a3			 
19a3 3e 3c			ld a, display_row_4 
19a5 11 d7 19			ld de, endprog 
19a8			 
19a8 cd 09 0b			call update_display		 
19ab			 
19ab cd 35 1c			call next_page_prompt 
19ae			 
19ae				; switch frame buffer to cli 
19ae			 
19ae 21 53 fb				ld hl, display_fb0 
19b1 22 5e fa				ld (display_fb_active), hl 
19b4			 
19b4			 
19b4 cd e6 0a		        call clear_display 
19b7 cd 09 0b			call update_display		 
19ba			 
19ba 21 ca f2			ld hl, os_cli_cmd 
19bd			 
19bd 3e 00			ld a, 0		 ; init cli input 
19bf 77				ld (hl), a 
19c0			 
19c0				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
19c0			 
19c0				; now on last line 
19c0			 
19c0				; TODO scroll screen up 
19c0			 
19c0				; TODO instead just clear screen and place at top of screen 
19c0			 
19c0			;	ld a, 0 
19c0			;	ld (f_cursor_ptr),a 
19c0			 
19c0				;call clear_display 
19c0				;call update_display 
19c0			 
19c0				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
19c0 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
19c2 c3 7d 19			jp cli 
19c5			 
19c5 .. 00		freeram: db "Free bytes: $",0 
19d3 ..			asc: db "1A2F" 
19d7 .. 00		endprog: db "End prog...",0 
19e3			 
19e3			testenter2:   
19e3 21 d5 ef			ld hl,scratch+50 
19e6 22 c6 f2			ld (os_cur_ptr),hl 
19e9 c3 7d 19			jp cli 
19ec			 
19ec			testenter:  
19ec			 
19ec 21 d3 19			ld hl,asc 
19ef			;	ld a,(hl) 
19ef			;	call nibble2val 
19ef cd 71 10			call get_byte 
19f2			 
19f2			 
19f2			;	ld a,(hl) 
19f2			;	call atohex 
19f2			 
19f2			;	call fourehexhl 
19f2 32 d5 ef			ld (scratch+50),a 
19f5			 
19f5			 
19f5			 
19f5 21 d5 19			ld hl,asc+2 
19f8			;	ld a, (hl) 
19f8			;	call nibble2val 
19f8 cd 71 10			call get_byte 
19fb			 
19fb			;	call fourehexhl 
19fb 32 d7 ef			ld (scratch+52),a 
19fe				 
19fe 21 d5 ef			ld hl,scratch+50 
1a01 22 c6 f2			ld (os_cur_ptr),hl 
1a04 c3 7d 19			jp cli 
1a07			 
1a07			enter:	 
1a07 3a a7 ef			ld a,(scratch+4) 
1a0a fe 00			cp 0 
1a0c 28 0c			jr z, .entercont 
1a0e				; no, not a null term line so has an address to work out.... 
1a0e			 
1a0e 21 a5 ef			ld hl,scratch+2 
1a11 cd d1 10			call get_word_hl 
1a14			 
1a14 22 c6 f2			ld (os_cur_ptr),hl	 
1a17 c3 7d 19			jp cli 
1a1a			 
1a1a			 
1a1a			.entercont:  
1a1a			 
1a1a 21 a5 ef			ld hl, scratch+2 
1a1d cd 71 10			call get_byte 
1a20			 
1a20 2a c6 f2		   	ld hl,(os_cur_ptr) 
1a23 77					ld (hl),a 
1a24 23					inc hl 
1a25 22 c6 f2				ld (os_cur_ptr),hl 
1a28				 
1a28			; get byte  
1a28			 
1a28			 
1a28 c3 7d 19			jp cli 
1a2b			 
1a2b			 
1a2b			; basic monitor support 
1a2b			 
1a2b			monitor: 
1a2b				;  
1a2b cd e6 0a			call clear_display 
1a2e 3e 00			ld a, 0 
1a30 11 78 1a			ld de, .monprompt 
1a33 cd f9 0a			call str_at_display 
1a36 cd 09 0b			call update_display 
1a39			 
1a39				; get a monitor command 
1a39			 
1a39 0e 00			ld c, 0     ; entry at top left 
1a3b 16 64			ld d, 100   ; max buffer size 
1a3d 1e 0f			ld e, 15    ; input scroll area 
1a3f 3e 00			ld a, 0     ; init string 
1a41 21 a1 f1			ld hl, os_input 
1a44 77				ld (hl), a 
1a45 23				inc hl 
1a46 77				ld (hl), a 
1a47 21 a1 f1			ld hl, os_input 
1a4a 3e 01			ld a, 1     ; init string 
1a4c cd 47 0d			call input_str 
1a4f			 
1a4f cd e6 0a		        call clear_display 
1a52 cd 09 0b			call update_display		 
1a55			 
1a55 3a a1 f1			ld a, (os_input) 
1a58 cd 6f 11			call toUpper 
1a5b fe 48		        cp 'H' 
1a5d 28 6f		        jr z, .monhelp 
1a5f fe 44			cp 'D'		; dump 
1a61 ca ef 1a			jp z, .mondump	 
1a64 fe 43			cp 'C'		; dump 
1a66 ca 09 1b			jp z, .moncdump	 
1a69 fe 4d			cp 'M'		; dump 
1a6b ca 7a 1a			jp z, .moneditstart 
1a6e fe 55			cp 'U'		; dump 
1a70 28 14			jr z, .monedit	 
1a72 fe 51			cp 'Q'		; dump 
1a74 c8				ret z	 
1a75			 
1a75			 
1a75				; TODO "S" to access symbol by name and not need the address 
1a75				; TODO "F" to find a string in memory 
1a75			 
1a75 c3 2b 1a			jp monitor 
1a78			 
1a78 .. 00		.monprompt: db ">", 0 
1a7a			 
1a7a			.moneditstart: 
1a7a				; get starting address 
1a7a			 
1a7a 21 a3 f1			ld hl,os_input+2 
1a7d cd d1 10			call get_word_hl 
1a80			 
1a80 22 c6 f2			ld (os_cur_ptr),hl	 
1a83			 
1a83 c3 2b 1a			jp monitor 
1a86			 
1a86			.monedit: 
1a86				; get byte to load 
1a86			 
1a86 21 a3 f1			ld hl,os_input+2 
1a89 cd 71 10			call get_byte 
1a8c			 
1a8c				; get address to update 
1a8c 2a c6 f2			ld hl, (os_cur_ptr) 
1a8f			 
1a8f				; update byte 
1a8f			 
1a8f 77				ld (hl), a 
1a90			 
1a90				; move to next address and save it 
1a90			 
1a90 23				inc hl 
1a91 22 c6 f2			ld (os_cur_ptr),hl	 
1a94			 
1a94 c3 2b 1a			jp monitor 
1a97			 
1a97			 
1a97 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1aab .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1ac7 .. 00		.monhelptext3:  db "Q-Quit",0 
1ace			        
1ace			.monhelp: 
1ace 3e 00			ld a, display_row_1 
1ad0 11 97 1a		        ld de, .monhelptext1 
1ad3			 
1ad3 cd f9 0a			call str_at_display 
1ad6 3e 14			ld a, display_row_2 
1ad8 11 ab 1a		        ld de, .monhelptext2 
1adb					 
1adb cd f9 0a			call str_at_display 
1ade 3e 28			ld a, display_row_3 
1ae0 11 c7 1a		        ld de, .monhelptext3 
1ae3					 
1ae3 cd f9 0a			call str_at_display 
1ae6 cd 09 0b			call update_display		 
1ae9			 
1ae9 cd 35 1c			call next_page_prompt 
1aec c3 2b 1a			jp monitor 
1aef			 
1aef			.mondump:    
1aef 21 a3 f1			ld hl,os_input+2 
1af2 cd d1 10			call get_word_hl 
1af5			 
1af5 22 c6 f2			ld (os_cur_ptr),hl	 
1af8 cd 3d 1b			call dumpcont 
1afb 3e 3c			ld a, display_row_4 
1afd 11 d7 19			ld de, endprog 
1b00			 
1b00 cd 09 0b			call update_display		 
1b03			 
1b03 cd 35 1c			call next_page_prompt 
1b06 c3 2b 1a			jp monitor 
1b09			.moncdump: 
1b09 cd 3d 1b			call dumpcont 
1b0c 3e 3c			ld a, display_row_4 
1b0e 11 d7 19			ld de, endprog 
1b11			 
1b11 cd 09 0b			call update_display		 
1b14			 
1b14 cd 35 1c			call next_page_prompt 
1b17 c3 2b 1a			jp monitor 
1b1a			 
1b1a			 
1b1a			; TODO symbol access  
1b1a			 
1b1a			.symbols:     ;; A list of symbols that can be called up  
1b1a 53 fb			dw display_fb0 
1b1c .. 00			db "fb0",0  
1b20 e8 f9		     	dw store_page 
1b22 .. 00			db "store_page",0 
1b2d			 
1b2d			 
1b2d			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1b2d			 
1b2d 3a a4 ef			ld a,(scratch+1) 
1b30 fe 00			cp 0 
1b32 28 09			jr z, dumpcont 
1b34			 
1b34				; no, not a null term line so has an address to work out.... 
1b34			 
1b34 21 a5 ef			ld hl,scratch+2 
1b37 cd d1 10			call get_word_hl 
1b3a			 
1b3a 22 c6 f2			ld (os_cur_ptr),hl	 
1b3d			 
1b3d			 
1b3d			 
1b3d			dumpcont: 
1b3d			 
1b3d				; dump bytes at ptr 
1b3d			 
1b3d			 
1b3d 3e 00			ld a, display_row_1 
1b3f 2a 5e fa			ld hl, (display_fb_active) 
1b42 cd 1a 0d			call addatohl 
1b45 cd 6d 1b			call .dumpbyterow 
1b48			 
1b48 3e 14			ld a, display_row_2 
1b4a 2a 5e fa			ld hl, (display_fb_active) 
1b4d cd 1a 0d			call addatohl 
1b50 cd 6d 1b			call .dumpbyterow 
1b53			 
1b53			 
1b53 3e 28			ld a, display_row_3 
1b55 2a 5e fa			ld hl, (display_fb_active) 
1b58 cd 1a 0d			call addatohl 
1b5b cd 6d 1b			call .dumpbyterow 
1b5e			 
1b5e 3e 3c			ld a, display_row_4 
1b60 2a 5e fa			ld hl, (display_fb_active) 
1b63 cd 1a 0d			call addatohl 
1b66 cd 6d 1b			call .dumpbyterow 
1b69			 
1b69 cd 09 0b			call update_display 
1b6c			;		jp cli 
1b6c c9				ret 
1b6d			 
1b6d			.dumpbyterow: 
1b6d			 
1b6d				;push af 
1b6d			 
1b6d e5				push hl 
1b6e			 
1b6e				; calc where to poke the ascii 
1b6e			if display_cols == 20 
1b6e 3e 10			ld a, 16 
1b70			else 
1b70				ld a, 31 
1b70			endif 
1b70			 
1b70 cd 1a 0d			call addatohl 
1b73 22 a8 f2			ld (os_word_scratch),hl  		; save pos for later 
1b76			 
1b76			 
1b76			; display decoding address 
1b76 2a c6 f2		   	ld hl,(os_cur_ptr) 
1b79			 
1b79 7c				ld a,h 
1b7a e1				pop hl 
1b7b e5				push hl 
1b7c			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1b7c cd 1b 10			call hexout 
1b7f 2a c6 f2		   	ld hl,(os_cur_ptr) 
1b82			 
1b82 7d				ld a,l 
1b83 e1				pop hl 
1b84 23				inc hl 
1b85 23				inc hl 
1b86 e5				push hl 
1b87			;	ld hl, os_word_scratch+2 
1b87 cd 1b 10			call hexout 
1b8a e1				pop hl 
1b8b 23				inc hl 
1b8c 23				inc hl 
1b8d				;ld hl, os_word_scratch+4 
1b8d 3e 3a			ld a, ':' 
1b8f 77				ld (hl),a 
1b90 23				inc hl 
1b91				;ld a, 0 
1b91				;ld (hl),a 
1b91				;ld de, os_word_scratch 
1b91				;pop af 
1b91				;push af 
1b91			;		ld a, display_row_2 
1b91			;		call str_at_display 
1b91			;		call update_display 
1b91			 
1b91			 
1b91			;pop af 
1b91			;	add 5 
1b91			 
1b91			if display_cols == 20 
1b91 06 04			ld b, 4 
1b93			else 
1b93				ld b, 8 
1b93			endif	 
1b93			 
1b93			.dumpbyte: 
1b93 c5				push bc 
1b94 e5				push hl 
1b95			 
1b95			 
1b95 2a c6 f2		   	ld hl,(os_cur_ptr) 
1b98 7e					ld a,(hl) 
1b99			 
1b99					; poke the ascii to display 
1b99 2a a8 f2				ld hl,(os_word_scratch) 
1b9c 77					ld (hl),a 
1b9d 23					inc hl 
1b9e 22 a8 f2				ld (os_word_scratch),hl 
1ba1			 
1ba1					 
1ba1			 
1ba1			 
1ba1 e1					pop hl 
1ba2 e5					push hl 
1ba3			 
1ba3 cd 1b 10				call hexout 
1ba6			 
1ba6					 
1ba6 2a c6 f2		   	ld hl,(os_cur_ptr) 
1ba9 23				inc hl 
1baa 22 c6 f2		   	ld (os_cur_ptr),hl 
1bad			 
1bad e1					pop hl 
1bae 23					inc hl 
1baf 23					inc hl 
1bb0 23					inc hl 
1bb1			 
1bb1			 
1bb1			 
1bb1					;ld a,0 
1bb1					;ld (os_word_scratch+2),a 
1bb1					;pop af 
1bb1					;push af 
1bb1			 
1bb1					;ld de, os_word_scratch 
1bb1					;call str_at_display 
1bb1			;		call update_display 
1bb1			;		pop af 
1bb1 c1					pop bc 
1bb2 c6 03				add 3 
1bb4 10 dd			djnz .dumpbyte 
1bb6			 
1bb6				 
1bb6			 
1bb6 c9				ret 
1bb7			 
1bb7			jump:	 
1bb7			 
1bb7 21 a5 ef			ld hl,scratch+2 
1bba cd d1 10			call get_word_hl 
1bbd				;ld hl,(scratch+2) 
1bbd				;call fourehexhl 
1bbd			 
1bbd 22 c6 f2			ld (os_cur_ptr),hl	 
1bc0			 
1bc0 e9				jp (hl) 
1bc1			 
1bc1			 
1bc1			 
1bc1			; TODO implement a basic monitor mode to start with 
1bc1			 
1bc1			 
1bc1			 
1bc1			 
1bc1			 
1bc1			 
1bc1			 
1bc1			 
1bc1			 
1bc1			; testing and demo code during development 
1bc1			 
1bc1			 
1bc1 .. 00		str1: db "Enter some text...",0 
1bd4 .. 00		clear: db "                    ",0 
1be9			 
1be9			demo: 
1be9			 
1be9			 
1be9			 
1be9			;	call update_display 
1be9			 
1be9				; init scratch input area for testing 
1be9 21 a3 ef			ld hl, scratch	 
1bec 3e 00			ld a,0 
1bee 77				ld (hl),a 
1bef			 
1bef			 
1bef 3e 14		            LD   A, display_row_2 
1bf1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1bf1 11 c1 1b		            LD   DE, str1 
1bf4 cd f9 0a			call str_at_display 
1bf7			 
1bf7			;            CALL fLCD_Str       ;Display string pointed to by DE 
1bf7			cloop:	 
1bf7 3e 28		            LD   A, display_row_3 
1bf9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1bf9 11 d4 1b		            LD   DE, clear 
1bfc			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1bfc cd f9 0a				call str_at_display 
1bff 3e 3c			ld a, display_row_4 
1c01 11 31 1c			ld de, prompt 
1c04			 
1c04 cd f9 0a				call str_at_display 
1c07 cd 09 0b			call update_display 
1c0a			 
1c0a 3e 55			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1c0c 16 0a			ld d, 10 
1c0e 21 a3 ef			ld hl, scratch	 
1c11 cd 47 0d			call input_str 
1c14			 
1c14			;	call clear_display 
1c14			;'	call update_display 
1c14			 
1c14 3e 00		            LD   A, display_row_1 
1c16			;            CALL fLCD_Pos       ;Position cursor to location in A 
1c16 11 d4 1b		            LD   DE, clear 
1c19 cd f9 0a				call str_at_display 
1c1c			;            CALL fLCD_Str       ;Display string pointed to by DE 
1c1c 3e 00		            LD   A, display_row_1 
1c1e			;            CALL fLCD_Pos       ;Position cursor to location in A 
1c1e 11 a3 ef		            LD   DE, scratch 
1c21			;            CALL fLCD_Str       ;Display string pointed to by DE 
1c21 cd f9 0a				call str_at_display 
1c24 cd 09 0b			call update_display 
1c27			 
1c27 3e 00				ld a,0 
1c29 21 a3 ef			ld hl, scratch 
1c2c 77				ld (hl),a 
1c2d			 
1c2d 00				nop 
1c2e c3 f7 1b			jp cloop 
1c31			 
1c31			 
1c31			 
1c31			; OS Prompt 
1c31			 
1c31 .. 00		prompt: db ">",0 
1c33 .. 00		endprg: db "?",0 
1c35			 
1c35			 
1c35			; handy next page prompt 
1c35			next_page_prompt: 
1c35 e5				push hl 
1c36 d5				push de 
1c37 f5				push af 
1c38 c5				push bc 
1c39			 
1c39 3e 4f			ld a,display_row_4 + display_cols - 1 
1c3b 11 33 1c		        ld de, endprg 
1c3e cd f9 0a			call str_at_display 
1c41 cd 09 0b			call update_display 
1c44 cd 12 67			call cin_wait 
1c47 c1				pop bc 
1c48 f1				pop af 
1c49 d1				pop de 
1c4a e1				pop hl 
1c4b			 
1c4b			 
1c4b c9				ret 
1c4c			 
1c4c			 
1c4c			; forth parser 
1c4c			 
1c4c			; My forth kernel 
1c4c			include "forth_kernel.asm" 
1c4c			; 
1c4c			; kernel to the forth OS 
1c4c			 
1c4c			DS_TYPE_STR: equ 1     ; string type 
1c4c			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1c4c			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1c4c			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1c4c			 
1c4c			FORTH_PARSEV1: equ 0 
1c4c			FORTH_PARSEV2: equ 0 
1c4c			FORTH_PARSEV3: equ 0 
1c4c			FORTH_PARSEV4: equ 0 
1c4c			FORTH_PARSEV5: equ 1 
1c4c			 
1c4c			;if FORTH_PARSEV5 
1c4c			;	FORTH_END_BUFFER: equ 0 
1c4c			;else 
1c4c			FORTH_END_BUFFER: equ 127 
1c4c			;endif 
1c4c			 
1c4c			FORTH_TRUE: equ 1 
1c4c			FORTH_FALSE: equ 0 
1c4c			 
1c4c			if FORTH_PARSEV4 
1c4c			include "forth_stackops.asm" 
1c4c			endif 
1c4c			 
1c4c			if FORTH_PARSEV5 
1c4c			include "forth_stackopsv5.asm" 
1c4c			 
1c4c			; Stack operations for v5 parser on wards 
1c4c			; * DATA stack 
1c4c			; * LOOP stack 
1c4c			; * RETURN stack 
1c4c			 
1c4c			 
1c4c			 
1c4c			FORTH_CHK_DSP_UNDER: macro 
1c4c				push hl 
1c4c				push de 
1c4c				ld hl,(cli_data_sp) 
1c4c				ld de, cli_data_stack 
1c4c				call cmp16 
1c4c				jp c, fault_dsp_under 
1c4c				pop de 
1c4c				pop hl 
1c4c				endm 
1c4c			 
1c4c			 
1c4c			FORTH_CHK_RSP_UNDER: macro 
1c4c				push hl 
1c4c				push de 
1c4c				ld hl,(cli_ret_sp) 
1c4c				ld de, cli_ret_stack 
1c4c				call cmp16 
1c4c				jp c, fault_rsp_under 
1c4c				pop de 
1c4c				pop hl 
1c4c				endm 
1c4c			 
1c4c			FORTH_CHK_LOOP_UNDER: macro 
1c4c				push hl 
1c4c				push de 
1c4c				ld hl,(cli_loop_sp) 
1c4c				ld de, cli_loop_stack 
1c4c				call cmp16 
1c4c				jp c, fault_loop_under 
1c4c				pop de 
1c4c				pop hl 
1c4c				endm 
1c4c			 
1c4c			FORTH_ERR_TOS_NOTSTR: macro 
1c4c				; TOSO might need more for checks when used 
1c4c				push af 
1c4c				ld a,(hl) 
1c4c				cp DS_TYPE_STR 
1c4c				jp nz, type_faultn   
1c4c				pop af 
1c4c				endm 
1c4c			 
1c4c			FORTH_ERR_TOS_NOTNUM: macro 
1c4c				push af 
1c4c				ld a,(hl) 
1c4c				cp DS_TYPE_INUM 
1c4c				jp nz, type_faultn   
1c4c				pop af 
1c4c				endm 
1c4c			 
1c4c			 
1c4c			; increase data stack pointer and save hl to it 
1c4c				 
1c4c			FORTH_DSP_NEXT: macro 
1c4c				call macro_forth_dsp_next 
1c4c				endm 
1c4c			 
1c4c			 
1c4c			macro_forth_dsp_next: 
1c4c				if DEBUG_FORTH_STACK_GUARD 
1c4c cd 2d 62				call check_stacks 
1c4f				endif 
1c4f e5				push hl 
1c50 d5				push de 
1c51 eb				ex de,hl 
1c52 2a 90 f9			ld hl,(cli_data_sp) 
1c55 23				inc hl 
1c56 23				inc hl 
1c57			 
1c57			; PARSEV5 
1c57 23				inc hl 
1c58 22 90 f9			ld (cli_data_sp),hl 
1c5b 73				ld (hl), e 
1c5c 23				inc hl 
1c5d 72				ld (hl), d 
1c5e d1				pop de 
1c5f e1				pop hl 
1c60				if DEBUG_FORTH_STACK_GUARD 
1c60 cd 2d 62				call check_stacks 
1c63				endif 
1c63 c9				ret 
1c64			 
1c64			 
1c64			; increase ret stack pointer and save hl to it 
1c64				 
1c64			FORTH_RSP_NEXT: macro 
1c64				call macro_forth_rsp_next 
1c64				endm 
1c64			 
1c64			macro_forth_rsp_next: 
1c64				if DEBUG_FORTH_STACK_GUARD 
1c64 cd 2d 62				call check_stacks 
1c67				endif 
1c67 e5				push hl 
1c68 d5				push de 
1c69 eb				ex de,hl 
1c6a 2a 94 f9			ld hl,(cli_ret_sp) 
1c6d 23				inc hl 
1c6e 23				inc hl 
1c6f 22 94 f9			ld (cli_ret_sp),hl 
1c72 73				ld (hl), e 
1c73 23				inc hl 
1c74 72				ld (hl), d 
1c75 d1				pop de 
1c76 e1				pop hl 
1c77				if DEBUG_FORTH_STACK_GUARD 
1c77 cd 2d 62				call check_stacks 
1c7a				endif 
1c7a c9				ret 
1c7b			 
1c7b			; get current ret stack pointer and save to hl  
1c7b				 
1c7b			FORTH_RSP_TOS: macro 
1c7b				call macro_forth_rsp_tos 
1c7b				endm 
1c7b			 
1c7b			macro_forth_rsp_tos: 
1c7b				;push de 
1c7b 2a 94 f9			ld hl,(cli_ret_sp) 
1c7e cd b6 1c			call loadhlptrtohl 
1c81				;ld e, (hl) 
1c81				;inc hl 
1c81				;ld d, (hl) 
1c81				;ex de, hl 
1c81					if DEBUG_FORTH_WORDS 
1c81			;			DMARK "RST" 
1c81						CALLMONITOR 
1c81 cd 2d 17			call break_point_state  
1c84				endm  
# End of macro CALLMONITOR
1c84					endif 
1c84				;pop de 
1c84 c9				ret 
1c85			 
1c85			; pop ret stack pointer 
1c85				 
1c85			FORTH_RSP_POP: macro 
1c85				call macro_forth_rsp_pop 
1c85				endm 
1c85			 
1c85			 
1c85			macro_forth_rsp_pop: 
1c85				if DEBUG_FORTH_STACK_GUARD 
1c85			;		DMARK "RPP" 
1c85 cd 2d 62				call check_stacks 
1c88					FORTH_CHK_RSP_UNDER 
1c88 e5				push hl 
1c89 d5				push de 
1c8a 2a 94 f9			ld hl,(cli_ret_sp) 
1c8d 11 0e f9			ld de, cli_ret_stack 
1c90 cd 38 0d			call cmp16 
1c93 da 41 63			jp c, fault_rsp_under 
1c96 d1				pop de 
1c97 e1				pop hl 
1c98				endm 
# End of macro FORTH_CHK_RSP_UNDER
1c98				endif 
1c98 e5				push hl 
1c99 2a 94 f9			ld hl,(cli_ret_sp) 
1c9c			 
1c9c			 
1c9c				if FORTH_ENABLE_FREE 
1c9c			 
1c9c					; get pointer 
1c9c			 
1c9c					push de 
1c9c					push hl 
1c9c			 
1c9c					ld e, (hl) 
1c9c					inc hl 
1c9c					ld d, (hl) 
1c9c			 
1c9c					ex de, hl 
1c9c					call free 
1c9c			 
1c9c					pop hl 
1c9c					pop de 
1c9c			 
1c9c			 
1c9c				endif 
1c9c			 
1c9c			 
1c9c 2b				dec hl 
1c9d 2b				dec hl 
1c9e 22 94 f9			ld (cli_ret_sp), hl 
1ca1				; do stack underflow checks 
1ca1 e1				pop hl 
1ca2				if DEBUG_FORTH_STACK_GUARD 
1ca2 cd 2d 62				call check_stacks 
1ca5					FORTH_CHK_RSP_UNDER 
1ca5 e5				push hl 
1ca6 d5				push de 
1ca7 2a 94 f9			ld hl,(cli_ret_sp) 
1caa 11 0e f9			ld de, cli_ret_stack 
1cad cd 38 0d			call cmp16 
1cb0 da 41 63			jp c, fault_rsp_under 
1cb3 d1				pop de 
1cb4 e1				pop hl 
1cb5				endm 
# End of macro FORTH_CHK_RSP_UNDER
1cb5				endif 
1cb5 c9				ret 
1cb6			 
1cb6			 
1cb6			 
1cb6			; routine to load word pointed to by hl into hl 
1cb6			 
1cb6			loadhlptrtohl: 
1cb6			 
1cb6 d5				push de 
1cb7 5e				ld e, (hl) 
1cb8 23				inc hl 
1cb9 56				ld d, (hl) 
1cba eb				ex de, hl 
1cbb d1				pop de 
1cbc			 
1cbc c9				ret 
1cbd			 
1cbd			 
1cbd			 
1cbd			 
1cbd			 
1cbd			; push a number held in HL onto the data stack 
1cbd			; entry point for pushing a value when already in hl used in function above 
1cbd			 
1cbd			forth_push_numhl: 
1cbd			 
1cbd e5				push hl    ; save value to push 
1cbe			 
1cbe			if DEBUG_FORTH_PUSH 
1cbe				; see if disabled 
1cbe			 
1cbe			 
1cbe f5				push af 
1cbf 3a 94 ef			ld a, (os_view_disable) 
1cc2 fe 2a			cp '*' 
1cc4 28 34			jr z, .pskip2 
1cc6 e5				push hl 
1cc7 e5			push hl 
1cc8 cd e6 0a			call clear_display 
1ccb e1			pop hl 
1ccc 7c				ld a,h 
1ccd 21 a8 f2			ld hl, os_word_scratch 
1cd0 cd 1b 10			call hexout 
1cd3 e1				pop hl 
1cd4 7d				ld a,l 
1cd5 21 aa f2			ld hl, os_word_scratch+2 
1cd8 cd 1b 10			call hexout 
1cdb			 
1cdb 21 ac f2			ld hl, os_word_scratch+4 
1cde 3e 00			ld a,0 
1ce0 77				ld (hl),a 
1ce1 11 a8 f2			ld de,os_word_scratch 
1ce4 3e 14				ld a, display_row_2 
1ce6 cd f9 0a				call str_at_display 
1ce9 11 3b 51			ld de, .push_num 
1cec 3e 00			ld a, display_row_1 
1cee			 
1cee cd f9 0a				call str_at_display 
1cf1			 
1cf1			 
1cf1 cd 09 0b			call update_display 
1cf4 cd 66 0a			call delay1s 
1cf7 cd 66 0a			call delay1s 
1cfa			.pskip2:  
1cfa			 
1cfa f1				pop af 
1cfb			endif	 
1cfb			 
1cfb			 
1cfb				FORTH_DSP_NEXT 
1cfb cd 4c 1c			call macro_forth_dsp_next 
1cfe				endm 
# End of macro FORTH_DSP_NEXT
1cfe			 
1cfe 2a 90 f9			ld hl, (cli_data_sp) 
1d01			 
1d01				; save item type 
1d01 3e 02			ld a,  DS_TYPE_INUM 
1d03 77				ld (hl), a 
1d04 23				inc hl 
1d05			 
1d05				; get word off stack 
1d05 d1				pop de 
1d06 7b				ld a,e 
1d07 77				ld (hl), a 
1d08 23				inc hl 
1d09 7a				ld a,d 
1d0a 77				ld (hl), a 
1d0b			 
1d0b			if DEBUG_FORTH_PUSH 
1d0b 2b				dec hl 
1d0c 2b				dec hl 
1d0d 2b				dec hl 
1d0e						DMARK "PH5" 
1d0e f5				push af  
1d0f 3a 23 1d			ld a, (.dmark)  
1d12 32 bd fb			ld (debug_mark),a  
1d15 3a 24 1d			ld a, (.dmark+1)  
1d18 32 be fb			ld (debug_mark+1),a  
1d1b 3a 25 1d			ld a, (.dmark+2)  
1d1e 32 bf fb			ld (debug_mark+2),a  
1d21 18 03			jr .pastdmark  
1d23 ..			.dmark: db "PH5"  
1d26 f1			.pastdmark: pop af  
1d27			endm  
# End of macro DMARK
1d27				CALLMONITOR 
1d27 cd 2d 17			call break_point_state  
1d2a				endm  
# End of macro CALLMONITOR
1d2a			endif	 
1d2a			 
1d2a c9				ret 
1d2b			 
1d2b			 
1d2b			; Push a string to stack pointed to by hl 
1d2b			 
1d2b			forth_push_str: 
1d2b			 
1d2b			if DEBUG_FORTH_PUSH 
1d2b						DMARK "PSQ" 
1d2b f5				push af  
1d2c 3a 40 1d			ld a, (.dmark)  
1d2f 32 bd fb			ld (debug_mark),a  
1d32 3a 41 1d			ld a, (.dmark+1)  
1d35 32 be fb			ld (debug_mark+1),a  
1d38 3a 42 1d			ld a, (.dmark+2)  
1d3b 32 bf fb			ld (debug_mark+2),a  
1d3e 18 03			jr .pastdmark  
1d40 ..			.dmark: db "PSQ"  
1d43 f1			.pastdmark: pop af  
1d44			endm  
# End of macro DMARK
1d44				CALLMONITOR 
1d44 cd 2d 17			call break_point_state  
1d47				endm  
# End of macro CALLMONITOR
1d47			endif	 
1d47			    
1d47 e5				push hl 
1d48 e5				push hl 
1d49			 
1d49			;	ld a, 0   ; find end of string 
1d49 cd 78 11			call strlenz 
1d4c			if DEBUG_FORTH_PUSH 
1d4c						DMARK "PQ2" 
1d4c f5				push af  
1d4d 3a 61 1d			ld a, (.dmark)  
1d50 32 bd fb			ld (debug_mark),a  
1d53 3a 62 1d			ld a, (.dmark+1)  
1d56 32 be fb			ld (debug_mark+1),a  
1d59 3a 63 1d			ld a, (.dmark+2)  
1d5c 32 bf fb			ld (debug_mark+2),a  
1d5f 18 03			jr .pastdmark  
1d61 ..			.dmark: db "PQ2"  
1d64 f1			.pastdmark: pop af  
1d65			endm  
# End of macro DMARK
1d65				CALLMONITOR 
1d65 cd 2d 17			call break_point_state  
1d68				endm  
# End of macro CALLMONITOR
1d68			endif	 
1d68 eb				ex de, hl 
1d69 e1				pop hl   ; get ptr to start of string 
1d6a			if DEBUG_FORTH_PUSH 
1d6a						DMARK "PQ3" 
1d6a f5				push af  
1d6b 3a 7f 1d			ld a, (.dmark)  
1d6e 32 bd fb			ld (debug_mark),a  
1d71 3a 80 1d			ld a, (.dmark+1)  
1d74 32 be fb			ld (debug_mark+1),a  
1d77 3a 81 1d			ld a, (.dmark+2)  
1d7a 32 bf fb			ld (debug_mark+2),a  
1d7d 18 03			jr .pastdmark  
1d7f ..			.dmark: db "PQ3"  
1d82 f1			.pastdmark: pop af  
1d83			endm  
# End of macro DMARK
1d83				CALLMONITOR 
1d83 cd 2d 17			call break_point_state  
1d86				endm  
# End of macro CALLMONITOR
1d86			endif	 
1d86 19				add hl,de 
1d87			if DEBUG_FORTH_PUSH 
1d87						DMARK "PQE" 
1d87 f5				push af  
1d88 3a 9c 1d			ld a, (.dmark)  
1d8b 32 bd fb			ld (debug_mark),a  
1d8e 3a 9d 1d			ld a, (.dmark+1)  
1d91 32 be fb			ld (debug_mark+1),a  
1d94 3a 9e 1d			ld a, (.dmark+2)  
1d97 32 bf fb			ld (debug_mark+2),a  
1d9a 18 03			jr .pastdmark  
1d9c ..			.dmark: db "PQE"  
1d9f f1			.pastdmark: pop af  
1da0			endm  
# End of macro DMARK
1da0				CALLMONITOR 
1da0 cd 2d 17			call break_point_state  
1da3				endm  
# End of macro CALLMONITOR
1da3			endif	 
1da3			 
1da3 2b				dec hl    ; see if there is an optional trailing double quote 
1da4 7e				ld a,(hl) 
1da5 fe 22			cp '"' 
1da7 20 03			jr nz, .strnoq 
1da9 3e 00			ld a, 0      ; get rid of double quote 
1dab 77				ld (hl), a 
1dac 23			.strnoq: inc hl 
1dad			 
1dad 3e 00			ld a, 0 
1daf 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1db0			 
1db0 13				inc de ; add one for the type string 
1db1 13				inc de ; add one for null term??? 
1db2			 
1db2				; tos is get string pointer again 
1db2				; de contains space to allocate 
1db2				 
1db2 d5				push de 
1db3			 
1db3 eb				ex de, hl 
1db4			 
1db4				;push af 
1db4			 
1db4			if DEBUG_FORTH_PUSH 
1db4						DMARK "PHm" 
1db4 f5				push af  
1db5 3a c9 1d			ld a, (.dmark)  
1db8 32 bd fb			ld (debug_mark),a  
1dbb 3a ca 1d			ld a, (.dmark+1)  
1dbe 32 be fb			ld (debug_mark+1),a  
1dc1 3a cb 1d			ld a, (.dmark+2)  
1dc4 32 bf fb			ld (debug_mark+2),a  
1dc7 18 03			jr .pastdmark  
1dc9 ..			.dmark: db "PHm"  
1dcc f1			.pastdmark: pop af  
1dcd			endm  
# End of macro DMARK
1dcd				CALLMONITOR 
1dcd cd 2d 17			call break_point_state  
1dd0				endm  
# End of macro CALLMONITOR
1dd0			endif	 
1dd0 cd e1 11			call malloc	; on ret hl now contains allocated memory 
1dd3				if DEBUG_FORTH_MALLOC_GUARD 
1dd3 cc 93 51				call z,malloc_error 
1dd6				endif 
1dd6			 
1dd6				 
1dd6 c1				pop bc    ; get length 
1dd7 d1				pop de   ;  get string start    
1dd8			 
1dd8				; hl has destination from malloc 
1dd8			 
1dd8 eb				ex de, hl    ; prep for ldir 
1dd9			 
1dd9 d5				push de   ; save malloc area for DSP later 
1dda				;push hl   ; save malloc area for DSP later 
1dda			 
1dda			if DEBUG_FORTH_PUSH 
1dda						DMARK "PHc" 
1dda f5				push af  
1ddb 3a ef 1d			ld a, (.dmark)  
1dde 32 bd fb			ld (debug_mark),a  
1de1 3a f0 1d			ld a, (.dmark+1)  
1de4 32 be fb			ld (debug_mark+1),a  
1de7 3a f1 1d			ld a, (.dmark+2)  
1dea 32 bf fb			ld (debug_mark+2),a  
1ded 18 03			jr .pastdmark  
1def ..			.dmark: db "PHc"  
1df2 f1			.pastdmark: pop af  
1df3			endm  
# End of macro DMARK
1df3				CALLMONITOR 
1df3 cd 2d 17			call break_point_state  
1df6				endm  
# End of macro CALLMONITOR
1df6			endif	 
1df6			 
1df6			 
1df6 ed b0			ldir 
1df8			 
1df8			 
1df8				; push malloc to data stack     macro?????  
1df8			 
1df8				FORTH_DSP_NEXT 
1df8 cd 4c 1c			call macro_forth_dsp_next 
1dfb				endm 
# End of macro FORTH_DSP_NEXT
1dfb			 
1dfb				; save value and type 
1dfb			 
1dfb 2a 90 f9			ld hl, (cli_data_sp) 
1dfe			 
1dfe				; save item type 
1dfe 3e 01			ld a,  DS_TYPE_STR 
1e00 77				ld (hl), a 
1e01 23				inc hl 
1e02			 
1e02				; get malloc word off stack 
1e02 d1				pop de 
1e03 73				ld (hl), e 
1e04 23				inc hl 
1e05 72				ld (hl), d 
1e06			 
1e06			 
1e06			 
1e06			if DEBUG_FORTH_PUSH 
1e06 2a 90 f9			ld hl, (cli_data_sp) 
1e09						DMARK "PHS" 
1e09 f5				push af  
1e0a 3a 1e 1e			ld a, (.dmark)  
1e0d 32 bd fb			ld (debug_mark),a  
1e10 3a 1f 1e			ld a, (.dmark+1)  
1e13 32 be fb			ld (debug_mark+1),a  
1e16 3a 20 1e			ld a, (.dmark+2)  
1e19 32 bf fb			ld (debug_mark+2),a  
1e1c 18 03			jr .pastdmark  
1e1e ..			.dmark: db "PHS"  
1e21 f1			.pastdmark: pop af  
1e22			endm  
# End of macro DMARK
1e22				CALLMONITOR 
1e22 cd 2d 17			call break_point_state  
1e25				endm  
# End of macro CALLMONITOR
1e25			;	ex de,hl 
1e25			endif	 
1e25				; in case of spaces, skip the ptr past the copied string 
1e25				;pop af 
1e25				;ld (cli_origptr),hl 
1e25			 
1e25 c9				ret 
1e26			 
1e26			 
1e26			 
1e26			; TODO ascii push input onto stack given hl to start of input 
1e26			 
1e26			; identify type 
1e26			; if starts with a " then a string 
1e26			; otherwise it is a number 
1e26			;  
1e26			; if a string 
1e26			;     scan for ending " to get length of string to malloc for + 1 
1e26			;     malloc 
1e26			;     put pointer to string on stack first byte flags as string 
1e26			; 
1e26			; else a number 
1e26			;    look for number format identifier 
1e26			;    $xx hex 
1e26			;    %xxxxx bin 
1e26			;    xxxxx decimal 
1e26			;    convert number to 16bit word.  
1e26			;    malloc word + 1 with flag to identiy as num 
1e26			;    put pointer to number on stack 
1e26			;   
1e26			;  
1e26			  
1e26			forth_apush: 
1e26				; kernel push 
1e26			 
1e26			if DEBUG_FORTH_PUSH 
1e26						DMARK "PSH" 
1e26 f5				push af  
1e27 3a 3b 1e			ld a, (.dmark)  
1e2a 32 bd fb			ld (debug_mark),a  
1e2d 3a 3c 1e			ld a, (.dmark+1)  
1e30 32 be fb			ld (debug_mark+1),a  
1e33 3a 3d 1e			ld a, (.dmark+2)  
1e36 32 bf fb			ld (debug_mark+2),a  
1e39 18 03			jr .pastdmark  
1e3b ..			.dmark: db "PSH"  
1e3e f1			.pastdmark: pop af  
1e3f			endm  
# End of macro DMARK
1e3f				CALLMONITOR 
1e3f cd 2d 17			call break_point_state  
1e42				endm  
# End of macro CALLMONITOR
1e42			endif	 
1e42				; identify input type 
1e42			 
1e42 7e				ld a,(hl) 
1e43 fe 22			cp '"' 
1e45 28 0a			jr z, .fapstr 
1e47 fe 24			cp '$' 
1e49 ca 71 1e			jp z, .faphex 
1e4c fe 25			cp '%' 
1e4e ca 59 1e			jp z, .fapbin 
1e51			;	cp 'b' 
1e51			;	jp z, .fabin 
1e51				; else decimal 
1e51			 
1e51				; TODO do decimal conversion 
1e51				; decimal is stored as a 16bit word 
1e51			 
1e51				; by default everything is a string if type is not detected 
1e51			.fapstr: ; 
1e51 fe 22			cp '"' 
1e53 20 01			jr nz, .strnoqu 
1e55 23				inc hl 
1e56			.strnoqu: 
1e56 c3 2b 1d			jp forth_push_str 
1e59			 
1e59			 
1e59			 
1e59			.fapbin:    ; push a binary string.  
1e59 11 00 00			ld de, 0   ; hold a 16bit value 
1e5c			 
1e5c 23			.fapbinshift:	inc hl  
1e5d 7e				ld a,(hl) 
1e5e fe 00			cp 0     ; done scanning  
1e60 28 0b			jr z, .fapbdone  	; got it in HL so push  
1e62			 
1e62				; left shift de 
1e62 eb				ex de, hl	 
1e63 29				add hl, hl 
1e64			 
1e64				; is 1 
1e64 fe 31			cp '1' 
1e66 20 02			jr nz, .binzero 
1e68 cb 4d			bit 1, l 
1e6a			.binzero: 
1e6a eb				ex de, hl	 ; save current de 
1e6b 18 ef			jr .fapbinshift 
1e6d			 
1e6d			.fapbdone: 
1e6d eb				ex de, hl 
1e6e c3 bd 1c			jp forth_push_numhl 
1e71			 
1e71			 
1e71			.faphex:   ; hex is always stored as a 16bit word 
1e71				; skip number prefix 
1e71 23				inc hl 
1e72				; turn ascii into number 
1e72 cd d1 10			call get_word_hl	; ret 16bit word in hl 
1e75			 
1e75 c3 bd 1c			jp forth_push_numhl 
1e78			 
1e78 00				 nop 
1e79			 
1e79			.fabin:   ; TODO bin conversion 
1e79			 
1e79			 
1e79 c9				ret 
1e7a			 
1e7a			 
1e7a			; get either a string ptr or a 16bit word from the data stack 
1e7a			 
1e7a			FORTH_DSP: macro 
1e7a				call macro_forth_dsp 
1e7a				endm 
1e7a			 
1e7a			macro_forth_dsp: 
1e7a				; data stack pointer points to current word on tos 
1e7a			 
1e7a 2a 90 f9			ld hl,(cli_data_sp) 
1e7d			 
1e7d				if DEBUG_FORTH_PUSH 
1e7d						DMARK "DSP" 
1e7d f5				push af  
1e7e 3a 92 1e			ld a, (.dmark)  
1e81 32 bd fb			ld (debug_mark),a  
1e84 3a 93 1e			ld a, (.dmark+1)  
1e87 32 be fb			ld (debug_mark+1),a  
1e8a 3a 94 1e			ld a, (.dmark+2)  
1e8d 32 bf fb			ld (debug_mark+2),a  
1e90 18 03			jr .pastdmark  
1e92 ..			.dmark: db "DSP"  
1e95 f1			.pastdmark: pop af  
1e96			endm  
# End of macro DMARK
1e96			 
1e96 cd c8 51				call display_data_sp 
1e99				;call break_point_state 
1e99				;rst 030h 
1e99				CALLMONITOR 
1e99 cd 2d 17			call break_point_state  
1e9c				endm  
# End of macro CALLMONITOR
1e9c				endif 
1e9c			 
1e9c c9				ret 
1e9d			 
1e9d			; return hl to start of value on stack 
1e9d			 
1e9d			FORTH_DSP_VALUE: macro 
1e9d				call macro_forth_dsp_value 
1e9d				endm 
1e9d			 
1e9d			macro_forth_dsp_value: 
1e9d			 
1e9d				FORTH_DSP 
1e9d cd 7a 1e			call macro_forth_dsp 
1ea0				endm 
# End of macro FORTH_DSP
1ea0			 
1ea0 d5				push de 
1ea1			 
1ea1 23				inc hl ; skip type 
1ea2			 
1ea2 5e				ld e, (hl) 
1ea3 23				inc hl 
1ea4 56				ld d, (hl) 
1ea5 eb				ex de,hl  
1ea6			 
1ea6 d1				pop de 
1ea7			 
1ea7 c9				ret 
1ea8			 
1ea8			; return hl to start of value to second item on stack 
1ea8			 
1ea8			FORTH_DSP_VALUEM1: macro 
1ea8				call macro_forth_dsp_value_m1 
1ea8				endm 
1ea8			 
1ea8			macro_forth_dsp_value_m1: 
1ea8			 
1ea8				FORTH_DSP 
1ea8 cd 7a 1e			call macro_forth_dsp 
1eab				endm 
# End of macro FORTH_DSP
1eab			 
1eab 2b				dec hl 
1eac 2b				dec hl 
1ead			;	dec hl 
1ead			 
1ead d5				push de 
1eae			 
1eae 5e				ld e, (hl) 
1eaf 23				inc hl 
1eb0 56				ld d, (hl) 
1eb1 eb				ex de,hl  
1eb2			 
1eb2 d1				pop de 
1eb3			 
1eb3 c9				ret 
1eb4			 
1eb4				 
1eb4			 
1eb4			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1eb4			 
1eb4			FORTH_DSP_POP: macro 
1eb4				call macro_forth_dsp_pop 
1eb4				endm 
1eb4			 
1eb4			 
1eb4			; get the tos data type 
1eb4			 
1eb4			FORTH_DSP_TYPE:   macro 
1eb4			 
1eb4				;FORTH_DSP_VALUE 
1eb4				FORTH_DSP 
1eb4				 
1eb4				; hl points to value 
1eb4				; check type 
1eb4			 
1eb4				ld a,(hl) 
1eb4			 
1eb4				endm 
1eb4			 
1eb4			; load the tos value into hl 
1eb4			 
1eb4			 
1eb4			FORTH_DSP_VALUEHL:  macro 
1eb4				call macro_dsp_valuehl 
1eb4				endm 
1eb4			 
1eb4			 
1eb4			 
1eb4			macro_dsp_valuehl: 
1eb4				FORTH_DSP_VALUE 
1eb4 cd 9d 1e			call macro_forth_dsp_value 
1eb7				endm 
# End of macro FORTH_DSP_VALUE
1eb7			 
1eb7				;FORTH_ERR_TOS_NOTNUM 
1eb7			 
1eb7				;inc hl   ; skip type id 
1eb7			 
1eb7			;	push de 
1eb7			; 
1eb7			;	ld e, (hl) 
1eb7			;	inc hl 
1eb7			;	ld d, (hl) 
1eb7			;	ex de,hl  
1eb7			 
1eb7			;	pop de 
1eb7			 
1eb7				if DEBUG_FORTH_PUSH 
1eb7						DMARK "DVL" 
1eb7 f5				push af  
1eb8 3a cc 1e			ld a, (.dmark)  
1ebb 32 bd fb			ld (debug_mark),a  
1ebe 3a cd 1e			ld a, (.dmark+1)  
1ec1 32 be fb			ld (debug_mark+1),a  
1ec4 3a ce 1e			ld a, (.dmark+2)  
1ec7 32 bf fb			ld (debug_mark+2),a  
1eca 18 03			jr .pastdmark  
1ecc ..			.dmark: db "DVL"  
1ecf f1			.pastdmark: pop af  
1ed0			endm  
# End of macro DMARK
1ed0				CALLMONITOR 
1ed0 cd 2d 17			call break_point_state  
1ed3				endm  
# End of macro CALLMONITOR
1ed3				endif 
1ed3 c9				ret 
1ed4			 
1ed4			forth_apushstrhl:      
1ed4				; push of string requires use of cli_origptr 
1ed4				; bodge use 
1ed4			 
1ed4				; get current cli_origptr, save, update with temp pointer  
1ed4 ed 5b ac f9		ld de, (cli_origptr) 
1ed8 22 ac f9			ld (cli_origptr), hl 
1edb d5				push de 
1edc cd 26 1e			call forth_apush 
1edf d1				pop de 
1ee0 ed 53 ac f9		ld (cli_origptr), de 
1ee4 c9			        ret	 
1ee5			 
1ee5			 
1ee5			; increase loop stack pointer and save hl to it 
1ee5				 
1ee5			FORTH_LOOP_NEXT: macro 
1ee5				call macro_forth_loop_next 
1ee5				;nop 
1ee5				endm 
1ee5			 
1ee5			macro_forth_loop_next: 
1ee5				if DEBUG_FORTH_STACK_GUARD 
1ee5 cd 2d 62				call check_stacks 
1ee8				endif 
1ee8 e5				push hl 
1ee9 d5				push de 
1eea eb				ex de,hl 
1eeb 2a 92 f9			ld hl,(cli_loop_sp) 
1eee 23				inc hl 
1eef 23				inc hl 
1ef0					if DEBUG_FORTH_WORDS 
1ef0						DMARK "LNX" 
1ef0 f5				push af  
1ef1 3a 05 1f			ld a, (.dmark)  
1ef4 32 bd fb			ld (debug_mark),a  
1ef7 3a 06 1f			ld a, (.dmark+1)  
1efa 32 be fb			ld (debug_mark+1),a  
1efd 3a 07 1f			ld a, (.dmark+2)  
1f00 32 bf fb			ld (debug_mark+2),a  
1f03 18 03			jr .pastdmark  
1f05 ..			.dmark: db "LNX"  
1f08 f1			.pastdmark: pop af  
1f09			endm  
# End of macro DMARK
1f09						CALLMONITOR 
1f09 cd 2d 17			call break_point_state  
1f0c				endm  
# End of macro CALLMONITOR
1f0c					endif 
1f0c 22 92 f9			ld (cli_loop_sp),hl 
1f0f 73				ld (hl), e 
1f10 23				inc hl 
1f11 72				ld (hl), d 
1f12 d1				pop de    ; been reversed so save a swap on restore 
1f13 e1				pop hl 
1f14				if DEBUG_FORTH_STACK_GUARD 
1f14 cd 2d 62				call check_stacks 
1f17				endif 
1f17 c9				ret 
1f18			 
1f18			; get current ret stack pointer and save to hl  
1f18				 
1f18			FORTH_LOOP_TOS: macro 
1f18				call macro_forth_loop_tos 
1f18				endm 
1f18			 
1f18			macro_forth_loop_tos: 
1f18 d5				push de 
1f19 2a 92 f9			ld hl,(cli_loop_sp) 
1f1c 5e				ld e, (hl) 
1f1d 23				inc hl 
1f1e 56				ld d, (hl) 
1f1f eb				ex de, hl 
1f20 d1				pop de 
1f21 c9				ret 
1f22			 
1f22			; pop loop stack pointer 
1f22				 
1f22			FORTH_LOOP_POP: macro 
1f22				call macro_forth_loop_pop 
1f22				endm 
1f22			 
1f22			 
1f22			macro_forth_loop_pop: 
1f22				if DEBUG_FORTH_STACK_GUARD 
1f22					DMARK "LPP" 
1f22 f5				push af  
1f23 3a 37 1f			ld a, (.dmark)  
1f26 32 bd fb			ld (debug_mark),a  
1f29 3a 38 1f			ld a, (.dmark+1)  
1f2c 32 be fb			ld (debug_mark+1),a  
1f2f 3a 39 1f			ld a, (.dmark+2)  
1f32 32 bf fb			ld (debug_mark+2),a  
1f35 18 03			jr .pastdmark  
1f37 ..			.dmark: db "LPP"  
1f3a f1			.pastdmark: pop af  
1f3b			endm  
# End of macro DMARK
1f3b cd 2d 62				call check_stacks 
1f3e					FORTH_CHK_LOOP_UNDER 
1f3e e5				push hl 
1f3f d5				push de 
1f40 2a 92 f9			ld hl,(cli_loop_sp) 
1f43 11 0c f7			ld de, cli_loop_stack 
1f46 cd 38 0d			call cmp16 
1f49 da 47 63			jp c, fault_loop_under 
1f4c d1				pop de 
1f4d e1				pop hl 
1f4e				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1f4e				endif 
1f4e e5				push hl 
1f4f 2a 92 f9			ld hl,(cli_loop_sp) 
1f52 2b				dec hl 
1f53 2b				dec hl 
1f54 22 92 f9			ld (cli_loop_sp), hl 
1f57				; TODO do stack underflow checks 
1f57 e1				pop hl 
1f58				if DEBUG_FORTH_STACK_GUARD 
1f58 cd 2d 62				call check_stacks 
1f5b					FORTH_CHK_LOOP_UNDER 
1f5b e5				push hl 
1f5c d5				push de 
1f5d 2a 92 f9			ld hl,(cli_loop_sp) 
1f60 11 0c f7			ld de, cli_loop_stack 
1f63 cd 38 0d			call cmp16 
1f66 da 47 63			jp c, fault_loop_under 
1f69 d1				pop de 
1f6a e1				pop hl 
1f6b				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1f6b				endif 
1f6b c9				ret 
1f6c			 
1f6c			macro_forth_dsp_pop: 
1f6c			 
1f6c e5				push hl 
1f6d			 
1f6d				; release malloc data 
1f6d			 
1f6d				if DEBUG_FORTH_STACK_GUARD 
1f6d cd 2d 62				call check_stacks 
1f70					FORTH_CHK_DSP_UNDER 
1f70 e5				push hl 
1f71 d5				push de 
1f72 2a 90 f9			ld hl,(cli_data_sp) 
1f75 11 0a f5			ld de, cli_data_stack 
1f78 cd 38 0d			call cmp16 
1f7b da 3b 63			jp c, fault_dsp_under 
1f7e d1				pop de 
1f7f e1				pop hl 
1f80				endm 
# End of macro FORTH_CHK_DSP_UNDER
1f80				endif 
1f80				;ld hl,(cli_data_sp) 
1f80			if DEBUG_FORTH_DOT 
1f80				DMARK "DPP" 
1f80				CALLMONITOR 
1f80			endif	 
1f80			 
1f80			 
1f80			if FORTH_ENABLE_DSPPOPFREE 
1f80			 
1f80				FORTH_DSP 
1f80 cd 7a 1e			call macro_forth_dsp 
1f83				endm 
# End of macro FORTH_DSP
1f83			 
1f83 7e				ld a, (hl) 
1f84 fe 01			cp DS_TYPE_STR 
1f86 20 07			jr nz, .skippopfree 
1f88			 
1f88				FORTH_DSP_VALUEHL 
1f88 cd b4 1e			call macro_dsp_valuehl 
1f8b				endm 
# End of macro FORTH_DSP_VALUEHL
1f8b 00				nop 
1f8c			if DEBUG_FORTH_DOT 
1f8c				DMARK "DPf" 
1f8c				CALLMONITOR 
1f8c			endif	 
1f8c cd ab 12			call free 
1f8f			.skippopfree: 
1f8f				 
1f8f			 
1f8f			endif 
1f8f			 
1f8f			if DEBUG_FORTH_DOT_KEY 
1f8f				DMARK "DP2" 
1f8f				CALLMONITOR 
1f8f			endif	 
1f8f			 
1f8f				; move pointer down 
1f8f			 
1f8f 2a 90 f9			ld hl,(cli_data_sp) 
1f92 2b				dec hl 
1f93 2b				dec hl 
1f94			; PARSEV5 
1f94 2b				dec hl 
1f95 22 90 f9			ld (cli_data_sp), hl 
1f98			 
1f98				if DEBUG_FORTH_STACK_GUARD 
1f98 cd 2d 62				call check_stacks 
1f9b					FORTH_CHK_DSP_UNDER 
1f9b e5				push hl 
1f9c d5				push de 
1f9d 2a 90 f9			ld hl,(cli_data_sp) 
1fa0 11 0a f5			ld de, cli_data_stack 
1fa3 cd 38 0d			call cmp16 
1fa6 da 3b 63			jp c, fault_dsp_under 
1fa9 d1				pop de 
1faa e1				pop hl 
1fab				endm 
# End of macro FORTH_CHK_DSP_UNDER
1fab				endif 
1fab			 
1fab e1				pop hl 
1fac			 
1fac c9				ret 
1fad			 
1fad			getwordathl: 
1fad				; hl points to an address 
1fad				; load hl with the word at that address 
1fad			 
1fad d5				push de 
1fae			 
1fae 5e				ld e, (hl) 
1faf 23				inc hl 
1fb0 56				ld d, (hl) 
1fb1 eb				ex de, hl 
1fb2			 
1fb2 d1				pop de 
1fb3 c9				ret 
1fb4			 
1fb4			 
1fb4			 
1fb4			 
1fb4			 
1fb4			; eof 
1fb4			 
# End of file forth_stackopsv5.asm
1fb4			endif 
1fb4			 
1fb4			user_word_eol:  
1fb4				; hl contains the pointer to where to create a linked list item from the end 
1fb4				; of the user dict to continue on at the system word dict 
1fb4				 
1fb4				; poke the stub of the word list linked list to repoint to rom words 
1fb4			 
1fb4				; stub format 
1fb4				; db   word id 
1fb4				; dw    link to next word 
1fb4			        ; db char length of token 
1fb4				; db string + 0 term 
1fb4				; db exec code....  
1fb4			 
1fb4 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1fb6 77				ld (hl), a		; word id 
1fb7 23				inc hl 
1fb8			 
1fb8 11 7e 21			ld de, sysdict 
1fbb 73				ld (hl), e		; next word link ie system dict 
1fbc 23				inc hl 
1fbd 72				ld (hl), d		; next word link ie system dict 
1fbe 23				inc hl	 
1fbf			 
1fbf			;	ld (hl), sysdict		; next word link ie system dict 
1fbf			;	inc hl 
1fbf			;	inc hl 
1fbf			 
1fbf			;	inc hl 
1fbf			;	inc hl 
1fbf			 
1fbf 3e 02			ld a, 2			; word length is 0 
1fc1 77				ld (hl), a	 
1fc2 23				inc hl 
1fc3			 
1fc3 3e 7e			ld a, '~'			; word length is 0 
1fc5 77				ld (hl), a	 
1fc6 23				inc hl 
1fc7 3e 00			ld a, 0			; save empty word 
1fc9 77				ld (hl), a 
1fca			 
1fca c9				ret 
1fcb			 
1fcb				 
1fcb			 
1fcb			forthexec_cleanup: 
1fcb				FORTH_RSP_POP 
1fcb cd 85 1c			call macro_forth_rsp_pop 
1fce				endm 
# End of macro FORTH_RSP_POP
1fce c9				ret 
1fcf			 
1fcf			forth_call_hl: 
1fcf				; taking hl 
1fcf e5				push hl 
1fd0 c9				ret 
1fd1			 
1fd1			; this is called to reset Forth system but keep existing uwords etc 
1fd1			 
1fd1			forth_warmstart: 
1fd1				; setup stack over/under flow checks 
1fd1				if DEBUG_FORTH_STACK_GUARD 
1fd1 cd 13 62				call chk_stk_init 
1fd4				endif 
1fd4			 
1fd4				; init stack pointers  - * these stacks go upwards *  
1fd4 21 0e f9			ld hl, cli_ret_stack 
1fd7 22 94 f9			ld (cli_ret_sp), hl	 
1fda				; set bottom of stack 
1fda 3e 00			ld a,0 
1fdc 77				ld (hl),a 
1fdd 23				inc hl 
1fde 77				ld (hl),a 
1fdf			 
1fdf 21 0a f5			ld hl, cli_data_stack 
1fe2 22 90 f9			ld (cli_data_sp), hl	 
1fe5				; set bottom of stack 
1fe5 3e 00			ld a,0 
1fe7 77				ld (hl),a 
1fe8 23				inc hl 
1fe9 77				ld (hl),a 
1fea			 
1fea 21 0c f7			ld hl, cli_loop_stack 
1fed 22 92 f9			ld (cli_loop_sp), hl	 
1ff0				; set bottom of stack 
1ff0 3e 00			ld a,0 
1ff2 77				ld (hl),a 
1ff3 23				inc hl 
1ff4 77				ld (hl),a 
1ff5			 
1ff5				; init extent of current open file 
1ff5			 
1ff5 3e 00			ld a, 0 
1ff7 32 df f9			ld (store_openext), a 
1ffa			 
1ffa c9				ret 
1ffb			 
1ffb			 
1ffb			; Cold Start - this is called to setup the whole Forth system 
1ffb			 
1ffb			forth_init: 
1ffb			 
1ffb				; setup stack over/under flow checks 
1ffb			 
1ffb			;	if DEBUG_FORTH_STACK_GUARD 
1ffb			;		call chk_stk_init 
1ffb			;	endif 
1ffb			 
1ffb				; enable auto display updates (slow.....) 
1ffb			 
1ffb 3e 01			ld a, 1 
1ffd 32 aa f9			ld (cli_autodisplay), a 
2000			 
2000			 
2000			 
2000				; show start up screen 
2000			 
2000 cd e6 0a			call clear_display 
2003			 
2003 3e 00			ld a,0 
2005 32 cc f9			ld (f_cursor_ptr), a 
2008			 
2008				; set start of word list in start of ram - for use when creating user words 
2008			 
2008 21 00 80			ld hl, baseram 
200b 22 a0 f2			ld (os_last_new_uword), hl 
200e cd b4 1f			call user_word_eol 
2011				 
2011			;		call display_data_sp 
2011			;		call next_page_prompt 
2011			 
2011			 
2011			 
2011			 
2011 c9				ret 
2012			 
2012 .. 00		.bootforth: db " Forth Kernel Init ",0 
2026			 
2026			; TODO push to stack 
2026			 
2026			;  
2026			 
2026			if FORTH_PARSEV2 
2026			 
2026			 
2026				include "forth_parserv2.asm" 
2026			 
2026			endif 
2026			 
2026			 
2026			; parse cli version 1 
2026			 
2026			if FORTH_PARSEV1 
2026			 
2026			 
2026			 
2026			      include "forth_parserv1.asm" 
2026			endif 
2026				 
2026			if FORTH_PARSEV3 
2026			 
2026			 
2026			 
2026			      include "forth_parserv3.asm" 
2026				include "forth_wordsv3.asm" 
2026			endif 
2026			 
2026			if FORTH_PARSEV4 
2026			 
2026			 
2026			 
2026			      include "forth_parserv4.asm" 
2026				include "forth_wordsv4.asm" 
2026			endif 
2026			 
2026			if FORTH_PARSEV5 
2026			 
2026			 
2026			 
2026			      include "forth_parserv5.asm" 
2026			 
2026			 
2026			; A better parser without using malloc and string copies all over the place.  
2026			; Exec in situ should be faster 
2026			 
2026			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
2026			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
2026			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
2026			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
2026			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
2026			WORD_SYS_END: equ 0   ; Opcode for all user words 
2026			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
2026			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
2026			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
2026			 
2026			; Core word preamble macro 
2026			 
2026			CWHEAD:   macro nxtword opcode lit len opflags 
2026				db WORD_SYS_CORE+opcode             
2026				; internal op code number 
2026				dw nxtword            
2026				; link to next dict word block 
2026				db len + 1 
2026				; literal length of dict word inc zero term 
2026				db lit,0              
2026				; literal dict word 
2026			        ; TODO db opflags        
2026				endm 
2026			 
2026			 
2026			NEXTW: macro  
2026				jp macro_next 
2026				endm 
2026			 
2026			macro_next: 
2026			if DEBUG_FORTH_PARSE_KEY 
2026				DMARK "NXT" 
2026				CALLMONITOR 
2026			endif	 
2026			;	inc hl  ; skip token null term  
2026 ed 4b ae f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
202a ed 5b ac f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
202e 2a a4 f2			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2031			if DEBUG_FORTH_PARSE_KEY 
2031				DMARK "}AA" 
2031				CALLMONITOR 
2031			endif	 
2031 c3 34 21			jp execnext 
2034				;jp exec1 
2034			       
2034			 
2034			 
2034			; Another go at the parser to compile  
2034			 
2034			 
2034			; TODO rework parser to change all of the string words to byte tokens 
2034			; TODO do a search for  
2034			 
2034			; TODO first run normal parser to zero term sections 
2034			; TODO for each word do a token look up to get the op code 
2034			; TODO need some means to flag to the exec that this is a byte code form    
2034			 
2034			 
2034			forthcompile: 
2034			 
2034			; 
2034			; line parse: 
2034			;       parse raw input buffer 
2034			;       tokenise the words 
2034			;       malloc new copy (for looping etc) 
2034			;       copy to malloc + current pc in line to start of string and add line term 
2034			;       save on new rsp 
2034			; 
2034			 
2034			; hl to point to the line to tokenise 
2034			 
2034			;	push hl 
2034 22 a4 f2			ld (os_tok_ptr), hl  ; save ptr to string 
2037			 
2037			;	ld a,0		; string term on input 
2037			;	call strlent 
2037			 
2037			;	ld (os_tok_len), hl	 ; save string length 
2037			 
2037			;if DEBUG_FORTH_TOK 
2037			;	ex de,hl		 
2037			;endif 
2037			 
2037			;	pop hl 		; get back string pointer 
2037			 
2037			if DEBUG_FORTH_TOK 
2037						DMARK "TOc" 
2037				CALLMONITOR 
2037			endif 
2037 7e			.cptoken2:    ld a,(hl) 
2038 23				inc hl 
2039 fe 7f			cp FORTH_END_BUFFER 
203b 28 29			jr z, .cptokendone2 
203d fe 00			cp 0 
203f 28 25			jr z, .cptokendone2 
2041 fe 22			cp '"' 
2043 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2045 fe 20			cp ' ' 
2047 20 ee			jr nz,  .cptoken2 
2049			 
2049			; TODO consume comments held between ( and ) 
2049			 
2049				; we have a space so change to zero term for dict match later 
2049 2b				dec hl 
204a 3e 00			ld a,0 
204c 77				ld (hl), a 
204d 23				inc hl 
204e 18 e7			jr .cptoken2 
2050				 
2050			 
2050			.cptokenstr2: 
2050				; skip all white space until either eol (because forgot to term) or end double quote 
2050			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2050				;inc hl ; skip current double quote 
2050 7e				ld a,(hl) 
2051 23				inc hl 
2052 fe 22			cp '"' 
2054 28 e1			jr z, .cptoken2 
2056 fe 7f			cp FORTH_END_BUFFER 
2058 28 0c			jr z, .cptokendone2 
205a fe 00			cp 0 
205c 28 08			jr z, .cptokendone2 
205e fe 20			cp ' ' 
2060 28 02			jr z, .cptmp2 
2062 18 ec			jr .cptokenstr2 
2064			 
2064			.cptmp2:	; we have a space so change to zero term for dict match later 
2064				;dec hl 
2064				;ld a,"-"	; TODO remove this when working 
2064				;ld (hl), a 
2064				;inc hl 
2064 18 ea			jr .cptokenstr2 
2066			 
2066			.cptokendone2: 
2066				;inc hl 
2066 3e 7f			ld a, FORTH_END_BUFFER 
2068 77				ld (hl),a 
2069 23				inc hl 
206a 3e 21			ld a, '!' 
206c 77				ld (hl),a 
206d			 
206d 2a a4 f2			ld hl,(os_tok_ptr) 
2070			         
2070			if DEBUG_FORTH_TOK 
2070						DMARK "Tc1" 
2070				CALLMONITOR 
2070			endif 
2070			 
2070				; push exec string to top of return stack 
2070				FORTH_RSP_NEXT 
2070 cd 64 1c			call macro_forth_rsp_next 
2073				endm 
# End of macro FORTH_RSP_NEXT
2073 c9				ret 
2074			 
2074			; Another go at the parser need to simplify the process 
2074			 
2074			forthparse: 
2074			 
2074			; 
2074			; line parse: 
2074			;       parse raw input buffer 
2074			;       tokenise the words 
2074			;       malloc new copy (for looping etc) 
2074			;       copy to malloc + current pc in line to start of string and add line term 
2074			;       save on new rsp 
2074			; 
2074			 
2074			; hl to point to the line to tokenise 
2074			 
2074			;	push hl 
2074 22 a4 f2			ld (os_tok_ptr), hl  ; save ptr to string 
2077			 
2077			;	ld a,0		; string term on input 
2077			;	call strlent 
2077			 
2077			;	ld (os_tok_len), hl	 ; save string length 
2077			 
2077			;if DEBUG_FORTH_TOK 
2077			;	ex de,hl		 
2077			;endif 
2077			 
2077			;	pop hl 		; get back string pointer 
2077			 
2077			if DEBUG_FORTH_TOK 
2077						DMARK "TOK" 
2077				CALLMONITOR 
2077			endif 
2077 7e			.ptoken2:    ld a,(hl) 
2078 23				inc hl 
2079 fe 7f			cp FORTH_END_BUFFER 
207b 28 29			jr z, .ptokendone2 
207d fe 00			cp 0 
207f 28 25			jr z, .ptokendone2 
2081 fe 22			cp '"' 
2083 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2085 fe 20			cp ' ' 
2087 20 ee			jr nz,  .ptoken2 
2089			 
2089			; TODO consume comments held between ( and ) 
2089			 
2089				; we have a space so change to zero term for dict match later 
2089 2b				dec hl 
208a 3e 00			ld a,0 
208c 77				ld (hl), a 
208d 23				inc hl 
208e 18 e7			jr .ptoken2 
2090				 
2090			 
2090			.ptokenstr2: 
2090				; skip all white space until either eol (because forgot to term) or end double quote 
2090			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2090				;inc hl ; skip current double quote 
2090 7e				ld a,(hl) 
2091 23				inc hl 
2092 fe 22			cp '"' 
2094 28 e1			jr z, .ptoken2 
2096 fe 7f			cp FORTH_END_BUFFER 
2098 28 0c			jr z, .ptokendone2 
209a fe 00			cp 0 
209c 28 08			jr z, .ptokendone2 
209e fe 20			cp ' ' 
20a0 28 02			jr z, .ptmp2 
20a2 18 ec			jr .ptokenstr2 
20a4			 
20a4			.ptmp2:	; we have a space so change to zero term for dict match later 
20a4				;dec hl 
20a4				;ld a,"-"	; TODO remove this when working 
20a4				;ld (hl), a 
20a4				;inc hl 
20a4 18 ea			jr .ptokenstr2 
20a6			 
20a6			.ptokendone2: 
20a6				;inc hl 
20a6 3e 7f			ld a, FORTH_END_BUFFER 
20a8 77				ld (hl),a 
20a9 23				inc hl 
20aa 3e 21			ld a, '!' 
20ac 77				ld (hl),a 
20ad			 
20ad 2a a4 f2			ld hl,(os_tok_ptr) 
20b0			         
20b0			if DEBUG_FORTH_TOK 
20b0						DMARK "TK1" 
20b0				CALLMONITOR 
20b0			endif 
20b0			 
20b0				; push exec string to top of return stack 
20b0				FORTH_RSP_NEXT 
20b0 cd 64 1c			call macro_forth_rsp_next 
20b3				endm 
# End of macro FORTH_RSP_NEXT
20b3 c9				ret 
20b4			 
20b4			; 
20b4			;	; malloc size + buffer pointer + if is loop flag 
20b4			;	ld hl,(os_tok_len) 		 ; get string length 
20b4			; 
20b4			;	ld a,l 
20b4			; 
20b4			;	cp 0			; we dont want to use a null string 
20b4			;	ret z 
20b4			; 
20b4			;;	add 3    ; prefix malloc with buffer for current word ptr 
20b4			; 
20b4			;	add 5     ; TODO when certain not over writing memory remove 
20b4			; 
20b4			;		 
20b4			; 
20b4			;if DEBUG_FORTH_TOK 
20b4			;			DMARK "TKE" 
20b4			;	CALLMONITOR 
20b4			;endif 
20b4			; 
20b4			;	ld l,a 
20b4			;	ld h,0 
20b4			;;	push hl   ; save required space for the copy later 
20b4			;	call malloc 
20b4			;if DEBUG_FORTH_TOK 
20b4			;			DMARK "TKM" 
20b4			;	CALLMONITOR 
20b4			;endif 
20b4			;	if DEBUG_FORTH_MALLOC_GUARD 
20b4			;		push af 
20b4			;		call ishlzero 
20b4			;;		ld a, l 
20b4			;;		add h 
20b4			;;		cp 0 
20b4			;		pop af 
20b4			;		 
20b4			;		call z,malloc_error 
20b4			;	endif 
20b4			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
20b4			; 
20b4			; 
20b4			;if DEBUG_FORTH_TOK 
20b4			;			DMARK "TKR" 
20b4			;	CALLMONITOR 
20b4			;endif 
20b4			; 
20b4			;	FORTH_RSP_NEXT 
20b4			; 
20b4			;	;inc hl	 ; go past current buffer pointer 
20b4			;	;inc hl 
20b4			;	;inc hl   ; and past if loop flag 
20b4			;		; TODO Need to set flag  
20b4			; 
20b4			;	 
20b4			;	 
20b4			;	ex de,hl	; malloc is dest 
20b4			;	ld hl, (os_tok_len) 
20b4			;;	pop bc 
20b4			;	ld c, l                
20b4			;	ld b,0 
20b4			;	ld hl, (os_tok_ptr) 
20b4			; 
20b4			;if DEBUG_FORTH_TOK 
20b4			;			DMARK "TKT" 
20b4			;	CALLMONITOR 
20b4			;endif 
20b4			; 
20b4			;	; do str cpy 
20b4			; 
20b4			;	ldir      ; copy byte in hl to de 
20b4			; 
20b4			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
20b4			; 
20b4			;if DEBUG_FORTH_TOK 
20b4			; 
20b4			;			DMARK "TKY" 
20b4			;	CALLMONITOR 
20b4			;endif 
20b4			;	;ld a,0 
20b4			;	;ld a,FORTH_END_BUFFER 
20b4			;	ex de, hl 
20b4			;	;dec hl			 ; go back over the space delim at the end of word 
20b4			;	;ld (hl),a 
20b4			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
20b4			;	ld a,FORTH_END_BUFFER 
20b4			;	ld (hl),a 
20b4			;	inc hl 
20b4			;	ld a,FORTH_END_BUFFER 
20b4			;	ld (hl),a 
20b4			; 
20b4			;	; init the malloc area data 
20b4			;	; set pc for in current area 
20b4			;	;ld hl, (os_tok_malloc) 
20b4			;	;inc hl 
20b4			;	;inc hl 
20b4			;	;inc hl 
20b4			;	;ex de,hl 
20b4			;	;ld hl, (os_tok_malloc) 
20b4			;	;ld (hl),e 
20b4			;	;inc hl 
20b4			;	;ld (hl),d 
20b4			; 
20b4			; 
20b4			;	ld hl,(os_tok_malloc) 
20b4			;if DEBUG_FORTH_PARSE_KEY 
20b4			;			DMARK "TKU" 
20b4			;	CALLMONITOR 
20b4			;endif 
20b4			; 
20b4			;	ret 
20b4			 
20b4			forthexec: 
20b4			 
20b4			; line exec: 
20b4			; forth parser 
20b4			 
20b4			; 
20b4			;       get current exec line on rsp 
20b4			 
20b4				FORTH_RSP_TOS 
20b4 cd 7b 1c			call macro_forth_rsp_tos 
20b7				endm 
# End of macro FORTH_RSP_TOS
20b7			 
20b7			;       restore current pc - hl points to malloc of data 
20b7			 
20b7				;ld e, (hl) 
20b7				;inc hl 
20b7				;ld d, (hl) 
20b7				;ex de,hl 
20b7			 
20b7			 
20b7			exec1: 
20b7 22 a4 f2			ld (os_tok_ptr), hl 
20ba			 
20ba				; copy our PC to working vars  
20ba 22 ae f9			ld (cli_ptr), hl 
20bd 22 ac f9			ld (cli_origptr), hl 
20c0			 
20c0 7e				ld a,(hl) 
20c1 fe 7f			cp FORTH_END_BUFFER 
20c3 c8				ret z 
20c4			 
20c4				; skip any nulls 
20c4			 
20c4 fe 00			cp 0 
20c6 20 03			jr nz, .execword 
20c8 23				inc hl 
20c9 18 ec			jr exec1 
20cb			 
20cb			 
20cb			.execword: 
20cb			 
20cb			 
20cb			 
20cb			if DEBUG_FORTH_PARSE_KEY 
20cb						DMARK "KYQ" 
20cb				CALLMONITOR 
20cb			endif 
20cb			;       while at start of word: 
20cb			; get start of dict (in user area first) 
20cb			 
20cb 21 00 80		ld hl, baseram 
20ce			;ld hl, sysdict 
20ce 22 b0 f9		ld (cli_nextword),hl 
20d1			;           match word at pc 
20d1			;           exec word 
20d1			;           or push to dsp 
20d1			;           forward to next token 
20d1			;           if line term pop rsp and exit 
20d1			;        
20d1			 
20d1			if DEBUG_FORTH_PARSE_KEY 
20d1						DMARK "KYq" 
20d1				CALLMONITOR 
20d1			endif 
20d1			 
20d1			; 
20d1			; word comp 
20d1			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
20d1			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
20d1			;    move to start of word  
20d1			;    compare word to cli_token 
20d1			 
20d1			.execpnword:	; HL at start of a word in the dictionary to check 
20d1			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
20d1			;	ld (cli_ptr), hl 
20d1			 
20d1 2a b0 f9			ld hl,(cli_nextword) 
20d4			 
20d4 cd 77 21			call forth_tok_next 
20d7			; tok next start here 
20d7			;	; TODO skip compiled symbol for now 
20d7			;	inc hl 
20d7			; 
20d7			;	; save pointer to next word 
20d7			; 
20d7			;	; hl now points to the address of the next word pointer  
20d7			;	ld e, (hl) 
20d7			;	inc hl 
20d7			;	ld d, (hl) 
20d7			;	inc l 
20d7			; 
20d7			;	ex de,hl 
20d7			;if DEBUG_FORTH_PARSE_NEXTWORD 
20d7			;	push bc 
20d7			;	ld bc, (cli_nextword) 
20d7			;			DMARK "NXW" 
20d7			;	CALLMONITOR 
20d7			;	pop bc 
20d7			;endif 
20d7			; tok next end here 
20d7 22 b0 f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
20da eb				ex de, hl 
20db			 
20db			 
20db				; save the pointer of the current token - 1 to check against 
20db				 
20db 22 b4 f9			ld (cli_token), hl   
20de				; TODO maybe remove below save if no debug 
20de				; save token string ptr for any debug later 
20de 23				inc hl  
20df 22 b6 f9			ld (cli_origtoken), hl 
20e2 2b				dec hl 
20e3				; save pointer to the start of the next dictionay word 
20e3 7e				ld a,(hl)   ; get string length 
20e4 47				ld b,a 
20e5			.execpnwordinc:  
20e5 23				inc hl 
20e6 10 fd			djnz .execpnwordinc 
20e8 22 b2 f9			ld (cli_execword), hl      ; save start of this words code 
20eb			 
20eb				; now check the word token against the string being parsed 
20eb			 
20eb 2a b4 f9			ld hl,(cli_token) 
20ee 23				inc hl     ; skip string length (use zero term instead to end) 
20ef 22 b4 f9			ld (cli_token), hl 
20f2			 
20f2			if DEBUG_FORTH_PARSE_KEY 
20f2						DMARK "KY2" 
20f2			endif 
20f2			if DEBUG_FORTH_PARSE_EXEC 
20f2				; see if disabled 
20f2			 
20f2				ld a, (os_view_disable) 
20f2				cp '*' 
20f2				jr z, .skip 
20f2			 
20f2				push hl 
20f2				push hl 
20f2				call clear_display 
20f2				ld de, .compword 
20f2				ld a, display_row_1 
20f2				call str_at_display 
20f2				pop de 
20f2				ld a, display_row_2 
20f2				call str_at_display 
20f2				ld hl,(cli_ptr) 
20f2				ld a,(hl) 
20f2			        ld hl, os_word_scratch 
20f2				ld (hl),a 
20f2				ld a,0 
20f2				inc hl 
20f2				ld (hl),a 	 
20f2				ld de, os_word_scratch 
20f2				ld a, display_row_2+10 
20f2				call str_at_display 
20f2				call update_display 
20f2				ld a, 100 
20f2				call aDelayInMS 
20f2				if DEBUG_FORTH_PARSE_EXEC_SLOW 
20f2				call delay250ms 
20f2				endif 
20f2				pop hl 
20f2			.skip:  
20f2			endif	 
20f2			.execpnchar:    ; compare char between token and string to parse 
20f2			 
20f2			if DEBUG_FORTH_PARSE_KEY 
20f2						DMARK "Ky3" 
20f2			endif 
20f2			if DEBUG_FORTH_PARSE_EXEC 
20f2				; see if disabled 
20f2			 
20f2				ld a, (os_view_disable) 
20f2				cp '*' 
20f2				jr z, .skip2 
20f2			 
20f2			;	call clear_display 
20f2			ld hl,(cli_token) 
20f2			ld a,(hl) 
20f2			ld (os_word_scratch),a 
20f2				ld hl,(cli_ptr) 
20f2			ld a,(hl) 
20f2				ld (os_word_scratch+1),a 
20f2				ld a,0 
20f2				ld (os_word_scratch+2),a 
20f2				ld de,os_word_scratch 
20f2				ld a,display_row_4 
20f2				call str_at_display 
20f2				call update_display 
20f2			.skip2:  
20f2			endif 
20f2 2a b4 f9			ld hl,(cli_token) 
20f5 7e				ld a, (hl)	 ; char in word token 
20f6 23				inc hl 		; move to next char 
20f7 22 b4 f9			ld (cli_token), hl ; and save it 
20fa 47				ld b,a 
20fb			 
20fb 2a ae f9			ld hl,(cli_ptr) ;	get the char from the string to parse 
20fe 7e				ld a,(hl) 
20ff 23				inc hl 
2100 22 ae f9			ld (cli_ptr), hl		; move to next char 
2103 cd 6f 11			call toUpper 		; make sure the input string matches case 
2106			 
2106			if DEBUG_FORTH_PARSE 
2106			endif 
2106			 
2106				; input stream end of token is a space so get rid of it 
2106			 
2106			;	cp ' ' 
2106			;	jr nz, .pnskipspace 
2106			; 
2106			;	ld a, 0		; make same term as word token term 
2106			; 
2106			;.pnskipspace: 
2106			 
2106			if DEBUG_FORTH_PARSE_KEY 
2106						DMARK "KY7" 
2106			endif 
2106 b8				cp b 
2107 c2 1d 21			jp nz, .execpnskipword	 ; no match so move to next word 
210a				 
210a			;    if same 
210a			;       scan for string terms 0 for token and 32 for input 
210a			 
210a				 
210a			if DEBUG_FORTH_PARSE_KEY 
210a						DMARK "KY8" 
210a			endif 
210a			 
210a 80				add b			 
210b fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
210d							; TODO need to make sure last word in zero term string is accounted for 
210d 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
210f			 
210f			 
210f				; at end of both strings so both are exact match 
210f			 
210f			;       skip ptr for next word 
210f			 
210f 2a ae f9			ld hl,(cli_ptr) 	; at input string term 
2112 23				inc hl			 ; at next char 
2113 22 ae f9			ld (cli_ptr), hl     ; save for next round of the parser 
2116 22 ac f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2119				 
2119				 
2119			if DEBUG_FORTH_PARSE_KEY 
2119						DMARK "KY3" 
2119			endif 
2119			 
2119			 
2119			 
2119			;       exec code block 
2119			if DEBUG_FORTH_JP 
2119				call clear_display 
2119				call update_display 
2119				call delay1s 
2119				ld hl, (cli_execword)     ; save for next check if no match on this word 
2119				ld a,h 
2119				ld hl, os_word_scratch 
2119				call hexout 
2119				ld hl, (cli_execword)     ; save for next check if no match on this word 
2119				ld a,l 
2119				ld hl, os_word_scratch+2 
2119				call hexout 
2119				ld hl, os_word_scratch+4 
2119				ld a,0 
2119				ld (hl),a 
2119				ld de,os_word_scratch 
2119				call str_at_display 
2119					ld a, display_row_2 
2119					call str_at_display 
2119				ld de, (cli_origtoken) 
2119				ld a, display_row_1+10 
2119					call str_at_display 
2119			 
2119				ld a,display_row_1 
2119				ld de, .foundword 
2119				ld a, display_row_3 
2119				call str_at_display 
2119				call update_display 
2119				call delay1s 
2119				call delay1s 
2119				call delay1s 
2119			endif 
2119			 
2119			if DEBUG_FORTH_PARSE_KEY 
2119						DMARK "KYj" 
2119			endif 
2119				; TODO save the word pointer in this exec 
2119			 
2119 2a b2 f9			ld hl,(cli_execword) 
211c e9				jp (hl) 
211d			 
211d			 
211d			;    if not same 
211d			;	scan for zero term 
211d			;	get ptr for next word 
211d			;	goto word comp 
211d			 
211d			.execpnskipword:	; get pointer to next word 
211d 2a b0 f9			ld hl,(cli_nextword) 
2120			 
2120 7e				ld a,(hl) 
2121 fe 00			cp WORD_SYS_END 
2123			;	cp 0 
2123 28 09			jr z, .execendofdict			 ; at end of words 
2125			 
2125			if DEBUG_FORTH_PARSE_KEY 
2125						DMARK "KY4" 
2125			endif 
2125			if DEBUG_FORTH_PARSE_EXEC 
2125			 
2125				; see if disabled 
2125			 
2125				ld a, (os_view_disable) 
2125				cp '*' 
2125				jr z, .noskip 
2125			 
2125			 
2125				ld de, .nowordfound 
2125				ld a, display_row_3 
2125				call str_at_display 
2125				call update_display 
2125				ld a, 100 
2125				call aDelayInMS 
2125				 
2125				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2125					call delay250ms 
2125				endif 
2125			.noskip:  
2125			 
2125			endif	 
2125			 
2125 2a ac f9			ld hl,(cli_origptr) 
2128 22 ae f9			ld (cli_ptr),hl 
212b			 
212b			if DEBUG_FORTH_PARSE_KEY 
212b						DMARK "KY5" 
212b			endif 
212b c3 d1 20			jp .execpnword			; else go to next word 
212e			 
212e			.execendofdict:  
212e			 
212e			if DEBUG_FORTH_PARSE_KEY 
212e						DMARK "KYe" 
212e			endif 
212e			if DEBUG_FORTH_PARSE_EXEC 
212e				; see if disabled 
212e			 
212e				ld a, (os_view_disable) 
212e				cp '*' 
212e				jr z, .ispskip 
212e			 
212e				call clear_display 
212e				call update_display 
212e				call delay1s 
212e				ld de, (cli_origptr) 
212e				ld a, display_row_1 
212e				call str_at_display 
212e				 
212e				ld de, .enddict 
212e				ld a, display_row_3 
212e				call str_at_display 
212e				call update_display 
212e				ld a, 100 
212e				call aDelayInMS 
212e				if DEBUG_FORTH_PARSE_EXEC_SLOW 
212e				call delay1s 
212e				call delay1s 
212e				call delay1s 
212e				endif 
212e			.ispskip:  
212e				 
212e			endif	 
212e			 
212e			 
212e			 
212e				; if the word is not a keyword then must be a literal so push it to stack 
212e			 
212e			; push token to stack to end of word 
212e			 
212e				STACKFRAME ON $1efe $2f9f 
212e				if DEBUG_STACK_IMB 
212e					if ON 
212e						exx 
212e						ld de, $1efe 
212e						ld a, d 
212e						ld hl, curframe 
212e						call hexout 
212e						ld a, e 
212e						ld hl, curframe+2 
212e						call hexout 
212e						ld hl, $1efe 
212e						push hl 
212e						ld hl, $2f9f 
212e						push hl 
212e						exx 
212e					endif 
212e				endif 
212e			endm 
# End of macro STACKFRAME
212e			 
212e 2a a4 f2		ld hl,(os_tok_ptr) 
2131 cd 26 1e		call forth_apush 
2134			 
2134				STACKFRAMECHK ON $1efe $2f9f 
2134				if DEBUG_STACK_IMB 
2134					if ON 
2134						exx 
2134						ld hl, $2f9f 
2134						pop de   ; $2f9f 
2134						call cmp16 
2134						jr nz, .spnosame 
2134						ld hl, $1efe 
2134						pop de   ; $1efe 
2134						call cmp16 
2134						jr z, .spfrsame 
2134						.spnosame: call showsperror 
2134						.spfrsame: nop 
2134						exx 
2134					endif 
2134				endif 
2134			endm 
# End of macro STACKFRAMECHK
2134			 
2134			execnext: 
2134			 
2134			if DEBUG_FORTH_PARSE_KEY 
2134						DMARK "KY>" 
2134			endif 
2134			; move past token to next word 
2134			 
2134 2a a4 f2		ld hl, (os_tok_ptr) 
2137 3e 00		ld a, 0 
2139 01 ff 00		ld bc, 255     ; input buffer size 
213c ed b1		cpir 
213e			 
213e			if DEBUG_FORTH_PARSE_KEY 
213e						DMARK "KY!" 
213e				CALLMONITOR 
213e			endif	 
213e			; TODO this might place hl on the null, so will need to forward on??? 
213e			;inc hl   ; see if this gets onto the next item 
213e			 
213e			 
213e			; TODO pass a pointer to the buffer to push 
213e			; TODO call function to push 
213e			 
213e			; look for end of input 
213e			 
213e			;inc hl 
213e			;ld a,(hl) 
213e			;cp FORTH_END_BUFFER 
213e			;ret z 
213e			 
213e			 
213e c3 b7 20		jp exec1 
2141			 
2141			 
2141			 
2141			 
2141			 
2141			 
2141			 
2141			 
2141			 
2141			findnexttok: 
2141			 
2141				; hl is pointer to move 
2141				; de is the token to locate 
2141			 
2141					if DEBUG_FORTH 
2141						DMARK "NTK" 
2141						CALLMONITOR 
2141					endif 
2141 d5				push de 
2142			 
2142			.fnt1:	 
2142				; find first char of token to locate 
2142			 
2142 1a				ld a, (de) 
2143 4f				ld c,a 
2144 7e				ld a,(hl) 
2145 cd 6f 11			call toUpper 
2148					if DEBUG_FORTH 
2148						DMARK "NT1" 
2148						CALLMONITOR 
2148					endif 
2148 b9				cp c 
2149			 
2149 28 03			jr z, .fnt2cmpmorefirst	 
214b			 
214b				; first char not found move to next char 
214b			 
214b 23				inc hl 
214c 18 f4			jr .fnt1 
214e			 
214e			.fnt2cmpmorefirst:	 
214e				; first char of token found.  
214e			 
214e e5				push hl     ; save start of token just in case it is the right one 
214f d9				exx 
2150 e1				pop hl        ; save it to hl' 
2151 d9				exx 
2152			 
2152			 
2152			.fnt2cmpmore:	 
2152				; compare the rest 
2152				 
2152 23				inc hl 
2153 13				inc de 
2154				 
2154 1a				ld a, (de) 
2155 4f				ld c,a 
2156 7e				ld a,(hl) 
2157 cd 6f 11			call toUpper 
215a			 
215a					if DEBUG_FORTH 
215a						DMARK "NT2" 
215a						CALLMONITOR 
215a					endif 
215a				; c has the token to find char 
215a				; a has the mem to scan char 
215a			 
215a b9				cp c 
215b 28 04			jr z,.fntmatch1 
215d			 
215d				; they are not the same 
215d			 
215d					if DEBUG_FORTH 
215d						DMARK "NT3" 
215d						CALLMONITOR 
215d					endif 
215d d1				pop de	; reset de token to look for 
215e d5				push de 
215f 18 e1			jr .fnt1 
2161				 
2161			.fntmatch1: 
2161			 
2161				; is the same char a null which means we might have a full hit? 
2161					if DEBUG_FORTH 
2161						DMARK "NT4" 
2161						CALLMONITOR 
2161					endif 
2161			 
2161 fe 00			cp 0 
2163 28 0b			jr z, .fntmatchyes 
2165			 
2165				; are we at the end of the token to find? 
2165			 
2165					if DEBUG_FORTH 
2165						DMARK "NT5" 
2165						CALLMONITOR 
2165					endif 
2165 3e 00			ld a, 0 
2167 b9				cp c 
2168			 
2168 c2 52 21			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
216b			 
216b					if DEBUG_FORTH 
216b						DMARK "NT6" 
216b						CALLMONITOR 
216b					endif 
216b				; token to find is exhusted but no match to stream 
216b			 
216b				; restore tok pointer and continue on 
216b d1				pop de 
216c d5				push de 
216d c3 42 21			jp .fnt1 
2170			 
2170			 
2170			.fntmatchyes: 
2170			 
2170				; hl now contains the end of the found token 
2170			 
2170				; get rid of saved token pointer to find 
2170			 
2170 d1				pop de 
2171			 
2171					if DEBUG_FORTH 
2171						DMARK "NT9" 
2171						CALLMONITOR 
2171					endif 
2171			 
2171				; hl will be on the null term so forward on 
2171			 
2171				; get back the saved start of the token 
2171			 
2171 d9				exx 
2172 e5				push hl     ; save start of token just in case it is the right one 
2173 d9				exx 
2174 e1				pop hl        ; save it to hl 
2175			 
2175 c9				ret 
2176			 
2176			 
2176			; LIST needs to find a specific token   
2176			; FORGET needs to find a spefici token 
2176			 
2176			; SAVE needs to find all tokens by flag 
2176			; WORDS just needs to scan through all  by flag 
2176			; UWORDS needs to scan through all by flag 
2176			 
2176			 
2176			; given hl as pointer to start of dict look up string 
2176			; return hl as pointer to start of word block 
2176			; or 0 if not found 
2176			 
2176			forth_find_tok: 
2176 c9				ret 
2177			 
2177			; given hl as pointer to dict structure 
2177			; move to the next dict block structure 
2177			 
2177			forth_tok_next: 
2177				; hl now points to the address of the next word pointer  
2177				; TODO skip compiled symbol for now 
2177			;	push de 
2177 23				inc hl 
2178 5e				ld e, (hl) 
2179 23				inc hl 
217a 56				ld d, (hl) 
217b 23				inc hl 
217c			 
217c eb				ex de,hl 
217d			if DEBUG_FORTH_PARSE_NEXTWORD 
217d				push bc 
217d				ld bc, (cli_nextword) 
217d						DMARK "NXW" 
217d				CALLMONITOR 
217d				pop bc 
217d			endif 
217d			;	pop de	 
217d c9				ret 
217e			 
217e			 
217e			 
217e			; eof 
# End of file forth_parserv5.asm
217e				include "forth_wordsv4.asm" 
217e			 
217e			; the core word dictionary v4 
217e			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
217e			 
217e			; this is a linked list for each of the system words used 
217e			; user defined words will follow the same format but will be in ram 
217e			 
217e			 
217e			; 
217e			; 
217e			; define linked list: 
217e			; 
217e			; 1. compiled byte op code 
217e			; 2. len of text word 
217e			; 3. text word 
217e			; 4. ptr to next dictionary word 
217e			; 5. asm, calls etc for the word 
217e			; 
217e			;  if 1 == 0 then last word in dict  
217e			;   
217e			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
217e			;  
217e			;  
217e			; create basic standard set of words 
217e			; 
217e			;  
217e			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
217e			; 2DUP 2DROP 2SWAP  
217e			; @ C@ - get byte  
217e			; ! C! - store byte 
217e			; 0< true if less than zero 
217e			; 0= true if zero 
217e			; < >  
217e			; = true if same 
217e			; variables 
217e			 
217e			 
217e			; Hardware specific words I may need 
217e			; 
217e			; IN OUT  
217e			; calls to key util functions 
217e			; calls to hardward abstraction stuff 
217e			; easy control of frame buffers and lcd i/o 
217e			; keyboard  
217e			 
217e			 
217e			;DICT: macro 
217e			; op_code, len, word, next 
217e			;    word: 
217e			;    db op_code 
217e			;    ds word zero term 
217e			;    dw next 
217e			;    endm 
217e			 
217e			 
217e			 
217e			 
217e			; op code 1 is a flag for user define words which are to be handled differently 
217e			 
217e			 
217e			; 
217e			; 
217e			;    TODO on entry to a word this should be the expected environment 
217e			;    hl - tos value if number then held, if string this is the ptr 
217e			;    de -  
217e			 
217e			 
217e			; opcode ranges 
217e			; 0 - end of word dict 
217e			; 255 - user define words 
217e			 
217e			sysdict: 
217e			include "forth_opcodes.asm" 
217e			; op codes for forth keywords 
217e			; free to use code 0  
217e				OPCODE_HEAP: equ  1 
217e				OPCODE_EXEC: equ 2 
217e				OPCODE_DUP: equ 3 
217e				OPCODE_SWAP: equ 4 
217e				OPCODE_COLN: equ 5 
217e				OPCODE_SCOLN: equ 6 
217e				OPCODE_DROP: equ 7 
217e				OPCODE_DUP2: equ 8 
217e				OPCODE_DROP2: equ 9 
217e				OPCODE_SWAP2: equ 10 
217e				OPCODE_AT: equ 11 
217e				OPCODE_CAT: equ 12 
217e				OPCODE_BANG: equ 13 
217e				OPCODE_CBANG: equ 14 
217e				OPCODE_SCALL: equ 15 
217e				OPCODE_DEPTH: equ 16 
217e				OPCODE_OVER: equ 17 
217e				OPCODE_PAUSE: equ 18 
217e				OPCODE_PAUSES: equ 19 
217e				OPCODE_ROT: equ 20 
217e			;free to reuse	OPCODE_WORDS: equ 21 
217e			        OPCODE_NOT: equ 21 
217e				OPCODE_UWORDS: equ 22 
217e				OPCODE_BP: equ 23 
217e				OPCODE_MONITOR: equ 24  
217e				OPCODE_MALLOC: equ 25 
217e				OPCODE_FREE: equ 26 
217e				OPCODE_LIST: equ 27 
217e				OPCODE_FORGET: equ 28 
217e				OPCODE_NOP: equ 29 
217e				OPCODE_COMO: equ 30 
217e				OPCODE_COMC: equ 31 
217e			;free to reuse	OPCODE_ENDCORE: equ 32 
217e				OPCODE_AFTERSOUND: equ 33 
217e				OPCODE_GP2: equ 34 
217e				OPCODE_GP3: equ 35 
217e				OPCODE_GP4: equ 36 
217e				OPCODE_SIN: equ 37 
217e				OPCODE_SOUT: equ 38 
217e				OPCODE_SPIO: equ 39 
217e				OPCODE_SPICEH: equ 40 
217e				OPCODE_SPIOb: equ 41 
217e				OPCODE_SPII: equ 42 
217e				OPCODE_SESEL: equ 43 
217e				OPCODE_CARTDEV: equ 44 
217e			; free to reuse	OPCODE_ENDDEVICE: equ 45 
217e				OPCODE_FB: equ 46 
217e				OPCODE_EMIT: equ 47 
217e				OPCODE_DOTH: equ 48 
217e				OPCODE_DOTF: equ 49 
217e				OPCODE_DOT: equ 50 
217e				OPCODE_CLS: equ 51 
217e				OPCODE_DRAW: equ 52 
217e				OPCODE_DUMP: equ 53 
217e				OPCODE_CDUMP: equ 54 
217e				OPCODE_DAT: equ 55 
217e				OPCODE_HOME: equ 56 
217e				OPCODE_SPACE: equ 57 
217e				OPCODE_SPACES: equ 58 
217e				OPCODE_SCROLL: equ 59 
217e				OPCODE_ATQ: equ 60 
217e				OPCODE_AUTODSP: equ 61 
217e				OPCODE_MENU: equ 62 
217e			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
217e				OPCODE_THEN: equ 64 
217e				OPCODE_ELSE: equ 65 
217e				OPCODE_DO: equ 66 
217e				OPCODE_LOOP: equ 67 
217e				OPCODE_I: equ 68 
217e				OPCODE_DLOOP: equ 69  
217e				OPCODE_REPEAT: equ 70  
217e				OPCODE_UNTIL: equ 71 
217e				OPCODE_ENDFLOW: equ 72 
217e				OPCODE_WAITK: equ 73 
217e				OPCODE_ACCEPT: equ 74 
217e				OPCODE_EDIT: equ 75 
217e			;free to reuse	OPCODE_ENDKEY: equ 76 
217e				OPCODE_LZERO: equ 77 
217e				OPCODE_TZERO: equ 78 
217e				OPCODE_LESS: equ 79 
217e				OPCODE_GT: equ 80 
217e				OPCODE_EQUAL: equ 81  
217e			;free to reuse	OPCODE_ENDLOGIC: equ 82 
217e				OPCODE_NEG: equ 83 
217e				OPCODE_DIV: equ 84 
217e				OPCODE_MUL: equ 85 
217e				OPCODE_MIN: equ 86 
217e				OPCODE_MAX: equ 87 
217e				OPCODE_RND16: equ 88 
217e				OPCODE_RND8: equ 89 
217e				OPCODE_RND: equ 90 
217e			;free to reuse	OPCODE_ENDMATHS: equ 91  
217e				OPCODE_BYNAME: equ 92 
217e				OPCODE_DIR: equ 93 
217e				OPCODE_SAVE: equ 94 
217e				OPCODE_LOAD: equ 95 
217e				OPCODE_BSAVE: equ 96 
217e				OPCODE_BLOAD: equ 97 
217e				OPCODE_SEO: equ 98  
217e				OPCODE_SEI: equ 99 
217e				OPCODE_SFREE: equ 100 
217e				OPCODE_SIZE: equ 101 
217e				OPCODE_CREATE: equ 102 
217e				OPCODE_APPEND: equ 103 
217e				OPCODE_SDEL: equ 104 
217e				OPCODE_OPEN: equ 105 
217e				OPCODE_READ: equ 106 
217e				OPCODE_EOF: equ 106 
217e				OPCODE_FORMAT: equ 107 
217e				OPCODE_LABEL: equ 108 
217e				OPCODE_LABELS: equ 109 
217e			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
217e				OPCODE_UPPER: equ 111 
217e				OPCODE_LOWER: equ 112 
217e				OPCODE_SUBSTR: equ 113 
217e				OPCODE_LEFT: equ 114 
217e				OPCODE_RIGHT: equ 115 
217e				OPCODE_STR2NUM: equ 116 
217e				OPCODE_NUM2STR: equ 117 
217e				OPCODE_CONCAT: equ 118 
217e				OPCODE_FIND: equ 119 
217e				OPCODE_LEN: equ 120 
217e				OPCODE_CHAR: equ 121 
217e			; free to reuse	OPCODE_STRLEN: equ 122 
217e			; free to reuse	OPCODE_ENDSTR: equ 123 
217e				OPCODE_V0S: equ 124 
217e				OPCODE_V0Q: equ 125 
217e				OPCODE_V1S: equ 126 
217e				OPCODE_V1Q: equ 127 
217e				OPCODE_V2S: equ 128 
217e				OPCODE_V2Q: equ 129 
217e				OPCODE_V3S: equ 130 
217e				OPCODE_V3Q: equ 131 
217e			;free to reuse	OPCODE_END: equ 132 
217e				OPCODE_ZDUP: equ 133 
217e			 
217e			; eof 
# End of file forth_opcodes.asm
217e			 
217e			include "forth_words_core.asm" 
217e			 
217e			; | ## Core Words 
217e			 
217e			;if MALLOC_4 
217e			 
217e			.HEAP: 
217e				CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
217e 15				db WORD_SYS_CORE+OPCODE_HEAP             
217f bd 21			dw .EXEC            
2181 05				db 4 + 1 
2182 .. 00			db "HEAP",0              
2187				endm 
# End of macro CWHEAD
2187			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2187			; | | u1 - Current number of bytes in the heap 
2187			; | | u2 - Remaining bytes left on the heap 
2187			; | |  
2187			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2187			 
2187			 
2187					if DEBUG_FORTH_WORDS_KEY 
2187						DMARK "HEP" 
2187 f5				push af  
2188 3a 9c 21			ld a, (.dmark)  
218b 32 bd fb			ld (debug_mark),a  
218e 3a 9d 21			ld a, (.dmark+1)  
2191 32 be fb			ld (debug_mark+1),a  
2194 3a 9e 21			ld a, (.dmark+2)  
2197 32 bf fb			ld (debug_mark+2),a  
219a 18 03			jr .pastdmark  
219c ..			.dmark: db "HEP"  
219f f1			.pastdmark: pop af  
21a0			endm  
# End of macro DMARK
21a0						CALLMONITOR 
21a0 cd 2d 17			call break_point_state  
21a3				endm  
# End of macro CALLMONITOR
21a3					endif 
21a3 2a 0a 80				ld hl, (free_list )      
21a6 11 0e 80				ld de, heap_start 
21a9			 
21a9 ed 52				sbc hl, de  
21ab			 
21ab cd bd 1c				call forth_push_numhl 
21ae			 
21ae			 
21ae ed 5b 0a 80			ld de, (free_list )      
21b2 21 89 ef				ld hl, heap_end 
21b5			 
21b5 ed 52				sbc hl, de 
21b7			 
21b7 cd bd 1c				call forth_push_numhl 
21ba					 
21ba			 
21ba					 
21ba			 
21ba			 
21ba			 
21ba					NEXTW 
21ba c3 26 20			jp macro_next 
21bd				endm 
# End of macro NEXTW
21bd			;endif 
21bd			 
21bd			.EXEC: 
21bd			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
21bd			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
21bd			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
21bd			;; > > 
21bd			;; > >   
21bd			;	STACKFRAME OFF $5efe $5f9f 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS_KEY 
21bd			;			DMARK "EXE" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			; 
21bd			;	FORTH_DSP_VALUEHL 
21bd			; 
21bd			;	FORTH_DSP_POP 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX1" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;;	ld e,(hl) 
21bd			;;	inc hl 
21bd			;;	ld d,(hl) 
21bd			;;	ex de,hl 
21bd			; 
21bd			;;		if DEBUG_FORTH_WORDS 
21bd			;;			DMARK "EX2" 
21bd			;;			CALLMONITOR 
21bd			;;		endif 
21bd			;	push hl 
21bd			; 
21bd			;	;ld a, 0 
21bd			;	;ld a, FORTH_END_BUFFER 
21bd			;	call strlenz 
21bd			;	inc hl   ; include zero term to copy 
21bd			;	inc hl   ; include term 
21bd			;	inc hl   ; include term 
21bd			;	ld b,0 
21bd			;	ld c,l 
21bd			;	pop hl 
21bd			;	ld de, execscratch 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX3" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	ldir 
21bd			; 
21bd			; 
21bd			;	ld hl, execscratch 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EXe" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			; 
21bd			;	call forthparse 
21bd			;	call forthexec 
21bd			;;	call forthexec_cleanup 
21bd			;;	call forthparse 
21bd			;;	call forthexec 
21bd			; 
21bd			;	STACKFRAMECHK OFF $5efe $5f9f 
21bd			; 
21bd			;	; an immediate word so no need to process any more words 
21bd			;	ret 
21bd			;	NEXTW 
21bd			 
21bd			; dead code - old version  
21bd			;	FORTH_RSP_NEXT 
21bd			 
21bd			;  
21bd			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
21bd			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
21bd			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
21bd			;	push hl 
21bd			;	push de 
21bd			;	push bc 
21bd			; 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS_KEY 
21bd			;			DMARK "EXR" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			; 
21bd			; 
21bd			; 
21bd			;	;v5 FORTH_DSP_VALUE 
21bd			;	FORTH_DSP_VALUEHL 
21bd			; 
21bd			;	; TODO do string type checks 
21bd			; 
21bd			;;v5	inc hl   ; skip type 
21bd			; 
21bd			;	push hl  ; source code  
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX1" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	ld a, 0 
21bd			;	call strlent 
21bd			; 
21bd			;	inc hl 
21bd			;	inc hl 
21bd			;	inc hl 
21bd			;	inc hl 
21bd			; 
21bd			;	push hl    ; size 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX2" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	call malloc 
21bd			; 
21bd			;	ex de, hl    ; de now contains malloc area 
21bd			;	pop bc   	; get byte count 
21bd			;	pop hl      ; get string to copy 
21bd			; 
21bd			;	push de     ; save malloc for free later 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX3" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	ldir       ; duplicate string 
21bd			; 
21bd			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
21bd			;	 
21bd			;	; TODO fix the parse would be better than this...  
21bd			;	ex de, hl 
21bd			;	dec hl 
21bd			;	ld a, 0 
21bd			;	ld (hl), a 
21bd			;	dec hl 
21bd			;	ld a, ' ' 
21bd			;	ld (hl), a 
21bd			;	dec hl 
21bd			;	ld (hl), a 
21bd			; 
21bd			;	dec hl 
21bd			;	ld (hl), a 
21bd			; 
21bd			; 
21bd			;	FORTH_DSP_POP  
21bd			; 
21bd			;	pop hl     
21bd			;	push hl    ; save malloc area 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX4" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			; 
21bd			;	call forthparse 
21bd			;	call forthexec 
21bd			;	 
21bd			;	pop hl 
21bd			;	if DEBUG_FORTH_WORDS 
21bd			;		DMARK "EX5" 
21bd			;		CALLMONITOR 
21bd			;	endif 
21bd			; 
21bd			;	if FORTH_ENABLE_FREE 
21bd			;	call free 
21bd			;	endif 
21bd			; 
21bd			;	if DEBUG_FORTH_WORDS 
21bd			;		DMARK "EX6" 
21bd			;		CALLMONITOR 
21bd			;	endif 
21bd			; 
21bd			;	pop bc 
21bd			;	pop de 
21bd			;	pop hl 
21bd			;;	FORTH_RSP_POP	  
21bd			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
21bd			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
21bd			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
21bd			; 
21bd			;	if DEBUG_FORTH_WORDS 
21bd			;		DMARK "EX7" 
21bd			;		CALLMONITOR 
21bd			;	endif 
21bd			;	NEXTW 
21bd			 
21bd			;.STKEXEC: 
21bd			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
21bd			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
21bd			; 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS_KEY 
21bd			;			DMARK "STX" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			; 
21bd			;	FORTH_DSP_VALUEHL 
21bd			; 
21bd			;	ld (store_tmp1), hl    ; count 
21bd			; 
21bd			;	FORTH_DSP_POP 
21bd			;.stkexec1: 
21bd			;	ld hl, (store_tmp1)   ; count 
21bd			;	ld a, 0 
21bd			;	cp l 
21bd			;	ret z 
21bd			; 
21bd			;	dec hl 
21bd			;	ld (store_tmp1), hl    ; count 
21bd			;	 
21bd			;	FORTH_DSP_VALUEHL 
21bd			;	push hl 
21bd			;	 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EXp" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	FORTH_DSP_POP 
21bd			; 
21bd			;	call strlenz 
21bd			;	inc hl   ; include zero term to copy 
21bd			;	inc hl   ; include zero term to copy 
21bd			;	inc hl   ; include zero term to copy 
21bd			;	ld b,0 
21bd			;	ld c,l 
21bd			;	pop hl 
21bd			;	ld de, execscratch 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EX3" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	ldir 
21bd			; 
21bd			; 
21bd			;	ld hl, execscratch 
21bd			; 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EXP" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			; 
21bd			;	call forthparse 
21bd			;	ld hl, execscratch 
21bd			;		if DEBUG_FORTH_WORDS 
21bd			;			DMARK "EXx" 
21bd			;			CALLMONITOR 
21bd			;		endif 
21bd			;	call forthexec 
21bd			; 
21bd			;	jp .stkexec1 
21bd			; 
21bd			;	ret 
21bd			 
21bd			 
21bd			.DUP: 
21bd				CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
21bd 17				db WORD_SYS_CORE+OPCODE_DUP             
21be 33 22			dw .ZDUP            
21c0 04				db 3 + 1 
21c1 .. 00			db "DUP",0              
21c5				endm 
# End of macro CWHEAD
21c5			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
21c5			 
21c5					if DEBUG_FORTH_WORDS_KEY 
21c5						DMARK "DUP" 
21c5 f5				push af  
21c6 3a da 21			ld a, (.dmark)  
21c9 32 bd fb			ld (debug_mark),a  
21cc 3a db 21			ld a, (.dmark+1)  
21cf 32 be fb			ld (debug_mark+1),a  
21d2 3a dc 21			ld a, (.dmark+2)  
21d5 32 bf fb			ld (debug_mark+2),a  
21d8 18 03			jr .pastdmark  
21da ..			.dmark: db "DUP"  
21dd f1			.pastdmark: pop af  
21de			endm  
# End of macro DMARK
21de						CALLMONITOR 
21de cd 2d 17			call break_point_state  
21e1				endm  
# End of macro CALLMONITOR
21e1					endif 
21e1			 
21e1					FORTH_DSP 
21e1 cd 7a 1e			call macro_forth_dsp 
21e4				endm 
# End of macro FORTH_DSP
21e4			 
21e4 7e					ld a, (HL) 
21e5 fe 01				cp DS_TYPE_STR 
21e7 20 25				jr nz, .dupinum 
21e9			 
21e9					; push another string 
21e9			 
21e9					FORTH_DSP_VALUEHL     		 
21e9 cd b4 1e			call macro_dsp_valuehl 
21ec				endm 
# End of macro FORTH_DSP_VALUEHL
21ec			 
21ec				if DEBUG_FORTH_WORDS 
21ec					DMARK "DUs" 
21ec f5				push af  
21ed 3a 01 22			ld a, (.dmark)  
21f0 32 bd fb			ld (debug_mark),a  
21f3 3a 02 22			ld a, (.dmark+1)  
21f6 32 be fb			ld (debug_mark+1),a  
21f9 3a 03 22			ld a, (.dmark+2)  
21fc 32 bf fb			ld (debug_mark+2),a  
21ff 18 03			jr .pastdmark  
2201 ..			.dmark: db "DUs"  
2204 f1			.pastdmark: pop af  
2205			endm  
# End of macro DMARK
2205					CALLMONITOR 
2205 cd 2d 17			call break_point_state  
2208				endm  
# End of macro CALLMONITOR
2208				endif 
2208 cd 2b 1d				call forth_push_str 
220b			 
220b					NEXTW 
220b c3 26 20			jp macro_next 
220e				endm 
# End of macro NEXTW
220e			 
220e			 
220e			.dupinum: 
220e					 
220e			 
220e			 
220e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
220e cd b4 1e			call macro_dsp_valuehl 
2211				endm 
# End of macro FORTH_DSP_VALUEHL
2211			 
2211				; TODO add floating point number detection 
2211			 
2211				if DEBUG_FORTH_WORDS 
2211					DMARK "DUi" 
2211 f5				push af  
2212 3a 26 22			ld a, (.dmark)  
2215 32 bd fb			ld (debug_mark),a  
2218 3a 27 22			ld a, (.dmark+1)  
221b 32 be fb			ld (debug_mark+1),a  
221e 3a 28 22			ld a, (.dmark+2)  
2221 32 bf fb			ld (debug_mark+2),a  
2224 18 03			jr .pastdmark  
2226 ..			.dmark: db "DUi"  
2229 f1			.pastdmark: pop af  
222a			endm  
# End of macro DMARK
222a					CALLMONITOR 
222a cd 2d 17			call break_point_state  
222d				endm  
# End of macro CALLMONITOR
222d				endif 
222d			 
222d cd bd 1c				call forth_push_numhl 
2230					NEXTW 
2230 c3 26 20			jp macro_next 
2233				endm 
# End of macro NEXTW
2233			.ZDUP: 
2233				CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2233 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2234 6b 22			dw .SWAP            
2236 05				db 4 + 1 
2237 .. 00			db "?DUP",0              
223c				endm 
# End of macro CWHEAD
223c			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | DONE 
223c			 
223c					if DEBUG_FORTH_WORDS_KEY 
223c						DMARK "qDU" 
223c f5				push af  
223d 3a 51 22			ld a, (.dmark)  
2240 32 bd fb			ld (debug_mark),a  
2243 3a 52 22			ld a, (.dmark+1)  
2246 32 be fb			ld (debug_mark+1),a  
2249 3a 53 22			ld a, (.dmark+2)  
224c 32 bf fb			ld (debug_mark+2),a  
224f 18 03			jr .pastdmark  
2251 ..			.dmark: db "qDU"  
2254 f1			.pastdmark: pop af  
2255			endm  
# End of macro DMARK
2255						CALLMONITOR 
2255 cd 2d 17			call break_point_state  
2258				endm  
# End of macro CALLMONITOR
2258					endif 
2258					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2258 cd b4 1e			call macro_dsp_valuehl 
225b				endm 
# End of macro FORTH_DSP_VALUEHL
225b			 
225b e5					push hl 
225c			 
225c					; is it a zero? 
225c			 
225c 3e 00				ld a, 0 
225e 84					add h 
225f 85					add l 
2260			 
2260 e1					pop hl 
2261			 
2261 fe 00				cp 0 
2263 28 03				jr z, .dup2orig 
2265			 
2265			 
2265 cd bd 1c				call forth_push_numhl 
2268			 
2268			 
2268				; TODO add floating point number detection 
2268			 
2268			.dup2orig: 
2268			 
2268					NEXTW 
2268 c3 26 20			jp macro_next 
226b				endm 
# End of macro NEXTW
226b			.SWAP: 
226b				CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
226b 18				db WORD_SYS_CORE+OPCODE_SWAP             
226c aa 22			dw .COLN            
226e 05				db 4 + 1 
226f .. 00			db "SWAP",0              
2274				endm 
# End of macro CWHEAD
2274			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2274					if DEBUG_FORTH_WORDS_KEY 
2274						DMARK "SWP" 
2274 f5				push af  
2275 3a 89 22			ld a, (.dmark)  
2278 32 bd fb			ld (debug_mark),a  
227b 3a 8a 22			ld a, (.dmark+1)  
227e 32 be fb			ld (debug_mark+1),a  
2281 3a 8b 22			ld a, (.dmark+2)  
2284 32 bf fb			ld (debug_mark+2),a  
2287 18 03			jr .pastdmark  
2289 ..			.dmark: db "SWP"  
228c f1			.pastdmark: pop af  
228d			endm  
# End of macro DMARK
228d						CALLMONITOR 
228d cd 2d 17			call break_point_state  
2290				endm  
# End of macro CALLMONITOR
2290					endif 
2290			 
2290					FORTH_DSP_VALUEHL 
2290 cd b4 1e			call macro_dsp_valuehl 
2293				endm 
# End of macro FORTH_DSP_VALUEHL
2293 e5					push hl     ; w2 
2294			 
2294					FORTH_DSP_POP 
2294 cd 6c 1f			call macro_forth_dsp_pop 
2297				endm 
# End of macro FORTH_DSP_POP
2297			 
2297					FORTH_DSP_VALUEHL 
2297 cd b4 1e			call macro_dsp_valuehl 
229a				endm 
# End of macro FORTH_DSP_VALUEHL
229a			 
229a					FORTH_DSP_POP 
229a cd 6c 1f			call macro_forth_dsp_pop 
229d				endm 
# End of macro FORTH_DSP_POP
229d			 
229d d1					pop de     ; w2	, hl = w1 
229e			 
229e eb					ex de, hl 
229f d5					push de 
22a0			 
22a0 cd bd 1c				call forth_push_numhl 
22a3			 
22a3 e1					pop hl 
22a4			 
22a4 cd bd 1c				call forth_push_numhl 
22a7					 
22a7			 
22a7					NEXTW 
22a7 c3 26 20			jp macro_next 
22aa				endm 
# End of macro NEXTW
22aa			.COLN: 
22aa				CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
22aa 19				db WORD_SYS_CORE+OPCODE_COLN             
22ab 36 24			dw .SCOLN            
22ad 02				db 1 + 1 
22ae .. 00			db ":",0              
22b0				endm 
# End of macro CWHEAD
22b0			; | : ( -- )         Create new word | DONE 
22b0			 
22b0					if DEBUG_FORTH_WORDS_KEY 
22b0						DMARK "CLN" 
22b0 f5				push af  
22b1 3a c5 22			ld a, (.dmark)  
22b4 32 bd fb			ld (debug_mark),a  
22b7 3a c6 22			ld a, (.dmark+1)  
22ba 32 be fb			ld (debug_mark+1),a  
22bd 3a c7 22			ld a, (.dmark+2)  
22c0 32 bf fb			ld (debug_mark+2),a  
22c3 18 03			jr .pastdmark  
22c5 ..			.dmark: db "CLN"  
22c8 f1			.pastdmark: pop af  
22c9			endm  
# End of macro DMARK
22c9						CALLMONITOR 
22c9 cd 2d 17			call break_point_state  
22cc				endm  
# End of macro CALLMONITOR
22cc					endif 
22cc				STACKFRAME OFF $8efe $989f 
22cc				if DEBUG_STACK_IMB 
22cc					if OFF 
22cc						exx 
22cc						ld de, $8efe 
22cc						ld a, d 
22cc						ld hl, curframe 
22cc						call hexout 
22cc						ld a, e 
22cc						ld hl, curframe+2 
22cc						call hexout 
22cc						ld hl, $8efe 
22cc						push hl 
22cc						ld hl, $989f 
22cc						push hl 
22cc						exx 
22cc					endif 
22cc				endif 
22cc			endm 
# End of macro STACKFRAME
22cc				; get parser buffer length  of new word 
22cc			 
22cc				 
22cc			 
22cc					; move tok past this to start of name defintition 
22cc					; TODO get word to define 
22cc					; TODO Move past word token 
22cc					; TODO get length of string up to the ';' 
22cc			 
22cc 2a a4 f2			ld hl, (os_tok_ptr) 
22cf 23				inc hl 
22d0 23				inc hl 
22d1			 
22d1 3e 3b			ld a, ';' 
22d3 cd 83 11			call strlent 
22d6			 
22d6 7d				ld a,l 
22d7 32 9f ef			ld (os_new_parse_len), a 
22da			 
22da			 
22da			if DEBUG_FORTH_UWORD 
22da ed 5b a4 f2		ld de, (os_tok_ptr) 
22de						DMARK ":01" 
22de f5				push af  
22df 3a f3 22			ld a, (.dmark)  
22e2 32 bd fb			ld (debug_mark),a  
22e5 3a f4 22			ld a, (.dmark+1)  
22e8 32 be fb			ld (debug_mark+1),a  
22eb 3a f5 22			ld a, (.dmark+2)  
22ee 32 bf fb			ld (debug_mark+2),a  
22f1 18 03			jr .pastdmark  
22f3 ..			.dmark: db ":01"  
22f6 f1			.pastdmark: pop af  
22f7			endm  
# End of macro DMARK
22f7				CALLMONITOR 
22f7 cd 2d 17			call break_point_state  
22fa				endm  
# End of macro CALLMONITOR
22fa			endif 
22fa			 
22fa			; 
22fa			;  new word memory layout: 
22fa			;  
22fa			;    : adg 6666 ;  
22fa			; 
22fa			;    db   1     ; user defined word  
22fa 23				inc hl    
22fb			;    dw   sysdict 
22fb 23				inc hl 
22fc 23				inc hl 
22fd			;    db <word len>+1 (for null) 
22fd 23				inc hl 
22fe			;    db .... <word> 
22fe			; 
22fe			 
22fe 23				inc hl    ; some extras for the word preamble before the above 
22ff 23				inc hl 
2300 23				inc hl 
2301 23				inc hl 
2302 23				inc hl 
2303 23				inc hl 
2304 23				inc hl  
2305 23				inc hl 
2306 23				inc hl 
2307 23				inc hl 
2308 23				inc hl 
2309 23				inc hl 
230a 23				inc hl 
230b 23				inc hl     ; TODO how many do we really need?     maybe only 6 
230c			;       exec word buffer 
230c			;	<ptr word>   
230c 23				inc hl 
230d 23				inc hl 
230e			;       <word list><null term> 7F final term 
230e			 
230e			 
230e			if DEBUG_FORTH_UWORD 
230e						DMARK ":02" 
230e f5				push af  
230f 3a 23 23			ld a, (.dmark)  
2312 32 bd fb			ld (debug_mark),a  
2315 3a 24 23			ld a, (.dmark+1)  
2318 32 be fb			ld (debug_mark+1),a  
231b 3a 25 23			ld a, (.dmark+2)  
231e 32 bf fb			ld (debug_mark+2),a  
2321 18 03			jr .pastdmark  
2323 ..			.dmark: db ":02"  
2326 f1			.pastdmark: pop af  
2327			endm  
# End of macro DMARK
2327				CALLMONITOR 
2327 cd 2d 17			call break_point_state  
232a				endm  
# End of macro CALLMONITOR
232a			endif 
232a			 
232a				 
232a					; malloc the size 
232a			 
232a cd e1 11				call malloc 
232d 22 a1 ef				ld (os_new_malloc), hl     ; save malloc start 
2330			 
2330			;    db   1     ; user defined word  
2330 3e 01				ld a, WORD_SYS_UWORD  
2332 77					ld (hl), a 
2333				 
2333 23				inc hl    
2334			;    dw   sysdict 
2334 11 7e 21			ld de, sysdict       ; continue on with the scan to the system dict 
2337 73				ld (hl), e 
2338 23				inc hl 
2339 72				ld (hl), d 
233a 23				inc hl 
233b			 
233b			 
233b			;    Setup dict word 
233b			 
233b 23				inc hl 
233c 22 9b ef			ld (os_new_work_ptr), hl     ; save start of dict word  
233f			 
233f				; 1. get length of dict word 
233f			 
233f			 
233f 2a a4 f2			ld hl, (os_tok_ptr) 
2342 23				inc hl 
2343 23				inc hl    ; position to start of dict word 
2344 3e 00			ld a, 0 
2346 cd 83 11			call strlent 
2349			 
2349			 
2349 23				inc hl    ; to include null??? 
234a			 
234a				; write length of dict word 
234a			 
234a ed 5b 9b ef		ld de, (os_new_work_ptr)   ; get dest for copy of word 
234e 1b				dec de 
234f eb				ex de, hl 
2350 73				ld (hl), e 
2351 eb				ex de, hl 
2352			 
2352				 
2352			 
2352				; copy  
2352 4d				ld c, l 
2353 06 00			ld b, 0 
2355 ed 5b 9b ef		ld de, (os_new_work_ptr)   ; get dest for copy of word 
2359 2a a4 f2			ld hl, (os_tok_ptr) 
235c 23				inc hl 
235d 23				inc hl    ; position to start of dict word 
235e				 
235e			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
235e				 
235e				; TODO need to convert word to upper case 
235e			 
235e			ucasetok:	 
235e 7e				ld a,(hl) 
235f cd 6f 11			call toUpper 
2362 77				ld (hl),a 
2363 ed a0			ldi 
2365 f2 5e 23		 	jp p, ucasetok 
2368			 
2368			 
2368			 
2368				; de now points to start of where the word body code should be placed 
2368 ed 53 9b ef		ld (os_new_work_ptr), de 
236c				; hl now points to the words to throw at forthexec which needs to be copied 
236c 22 99 ef			ld (os_new_src_ptr), hl 
236f			 
236f				; TODO add 'call to forthexec' 
236f			 
236f			if DEBUG_FORTH_UWORD 
236f c5				push bc 
2370 ed 4b a1 ef		ld bc, (os_new_malloc) 
2374						DMARK ":0x" 
2374 f5				push af  
2375 3a 89 23			ld a, (.dmark)  
2378 32 bd fb			ld (debug_mark),a  
237b 3a 8a 23			ld a, (.dmark+1)  
237e 32 be fb			ld (debug_mark+1),a  
2381 3a 8b 23			ld a, (.dmark+2)  
2384 32 bf fb			ld (debug_mark+2),a  
2387 18 03			jr .pastdmark  
2389 ..			.dmark: db ":0x"  
238c f1			.pastdmark: pop af  
238d			endm  
# End of macro DMARK
238d				CALLMONITOR 
238d cd 2d 17			call break_point_state  
2390				endm  
# End of macro CALLMONITOR
2390 c1				pop bc 
2391			endif 
2391			 
2391			 
2391				; create word preamble which should be: 
2391			 
2391			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2391			 
2391				;    ld hl, <word code> 
2391				;    jp user_exec 
2391			        ;    <word code bytes> 
2391			 
2391			 
2391			;	inc de     ; TODO ??? or are we already past the word's null 
2391 eb				ex de, hl 
2392			 
2392 36 21			ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
2394			 
2394 23				inc hl 
2395 22 95 ef			ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
2398 23				inc hl 
2399			 
2399 23				inc hl 
239a 36 c3			ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
239c			 
239c 01 c1 50			ld bc, user_exec 
239f 23				inc hl 
23a0 71				ld (hl), c     ; poke address of user_exec 
23a1 23				inc hl 
23a2 70				ld (hl), b     
23a3			 ; 
23a3			;	inc hl 
23a3			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
23a3			; 
23a3			; 
23a3			;	ld bc, macro_forth_rsp_next 
23a3			;	inc hl 
23a3			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
23a3			;	inc hl 
23a3			;	ld (hl), b     
23a3			 ; 
23a3			;	inc hl 
23a3			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
23a3			; 
23a3			; 
23a3			;	inc hl 
23a3			;	ld bc, forthexec 
23a3			;	ld (hl), c     ; poke address of forthexec 
23a3			;	inc hl 
23a3			;	ld (hl), b      
23a3			; 
23a3			;	inc hl 
23a3			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
23a3			; 
23a3			;	ld bc, user_dict_next 
23a3			;	inc hl 
23a3			;	ld (hl), c     ; poke address of forthexec 
23a3			;	inc hl 
23a3			;	ld (hl), b      
23a3			 
23a3				; hl is now where we need to copy the word byte data to save this 
23a3			 
23a3 23				inc hl 
23a4 22 97 ef			ld (os_new_exec), hl 
23a7				 
23a7				; copy definition 
23a7			 
23a7 eb				ex de, hl 
23a8			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
23a8			;	inc de    ; skip the PC for this parse 
23a8 3a 9f ef			ld a, (os_new_parse_len) 
23ab 4f				ld c, a 
23ac 06 00			ld b, 0 
23ae ed b0			ldir		 ; copy defintion 
23b0			 
23b0			 
23b0				; poke the address of where the new word bytes live for forthexec 
23b0			 
23b0 2a 95 ef			ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
23b3			 
23b3 ed 5b 97 ef		ld de, (os_new_exec)      
23b7				 
23b7 73				ld (hl), e 
23b8 23				inc hl 
23b9 72				ld (hl), d 
23ba			 
23ba					; TODO copy last user dict word next link to this word 
23ba					; TODO update last user dict word to point to this word 
23ba			; 
23ba			; hl f923 de 812a ; bc 811a 
23ba			 
23ba			if DEBUG_FORTH_UWORD 
23ba c5				push bc 
23bb ed 4b a1 ef		ld bc, (os_new_malloc) 
23bf						DMARK ":0A" 
23bf f5				push af  
23c0 3a d4 23			ld a, (.dmark)  
23c3 32 bd fb			ld (debug_mark),a  
23c6 3a d5 23			ld a, (.dmark+1)  
23c9 32 be fb			ld (debug_mark+1),a  
23cc 3a d6 23			ld a, (.dmark+2)  
23cf 32 bf fb			ld (debug_mark+2),a  
23d2 18 03			jr .pastdmark  
23d4 ..			.dmark: db ":0A"  
23d7 f1			.pastdmark: pop af  
23d8			endm  
# End of macro DMARK
23d8				CALLMONITOR 
23d8 cd 2d 17			call break_point_state  
23db				endm  
# End of macro CALLMONITOR
23db c1				pop bc 
23dc			endif 
23dc			if DEBUG_FORTH_UWORD 
23dc c5				push bc 
23dd ed 4b a1 ef		ld bc, (os_new_malloc) 
23e1 03				inc bc 
23e2 03				inc bc 
23e3 03				inc bc 
23e4 03				inc bc 
23e5 03				inc bc 
23e6 03				inc bc 
23e7 03				inc bc 
23e8 03				inc bc 
23e9			 
23e9						DMARK ":0B" 
23e9 f5				push af  
23ea 3a fe 23			ld a, (.dmark)  
23ed 32 bd fb			ld (debug_mark),a  
23f0 3a ff 23			ld a, (.dmark+1)  
23f3 32 be fb			ld (debug_mark+1),a  
23f6 3a 00 24			ld a, (.dmark+2)  
23f9 32 bf fb			ld (debug_mark+2),a  
23fc 18 03			jr .pastdmark  
23fe ..			.dmark: db ":0B"  
2401 f1			.pastdmark: pop af  
2402			endm  
# End of macro DMARK
2402				CALLMONITOR 
2402 cd 2d 17			call break_point_state  
2405				endm  
# End of macro CALLMONITOR
2405 c1				pop bc 
2406			endif 
2406			 
2406			; update word dict linked list for new word 
2406			 
2406			 
2406 2a a0 f2		ld hl, (os_last_new_uword)		; get the start of the last added uword 
2409 23			inc hl     ; move to next work linked list ptr 
240a			 
240a ed 5b a1 ef	ld de, (os_new_malloc)		 ; new next word 
240e 73			ld (hl), e 
240f 23			inc hl 
2410 72			ld (hl), d 
2411			 
2411			if DEBUG_FORTH_UWORD 
2411 ed 4b a0 f2		ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2415			endif 
2415			 
2415 ed 53 a0 f2	ld (os_last_new_uword), de      ; update last new uword ptr 
2419			 
2419			 
2419			if DEBUG_FORTH_UWORD 
2419						DMARK ":0+" 
2419 f5				push af  
241a 3a 2e 24			ld a, (.dmark)  
241d 32 bd fb			ld (debug_mark),a  
2420 3a 2f 24			ld a, (.dmark+1)  
2423 32 be fb			ld (debug_mark+1),a  
2426 3a 30 24			ld a, (.dmark+2)  
2429 32 bf fb			ld (debug_mark+2),a  
242c 18 03			jr .pastdmark  
242e ..			.dmark: db ":0+"  
2431 f1			.pastdmark: pop af  
2432			endm  
# End of macro DMARK
2432				CALLMONITOR 
2432 cd 2d 17			call break_point_state  
2435				endm  
# End of macro CALLMONITOR
2435			endif 
2435			 
2435				STACKFRAMECHK OFF $8efe $989f 
2435				if DEBUG_STACK_IMB 
2435					if OFF 
2435						exx 
2435						ld hl, $989f 
2435						pop de   ; $989f 
2435						call cmp16 
2435						jr nz, .spnosame 
2435						ld hl, $8efe 
2435						pop de   ; $8efe 
2435						call cmp16 
2435						jr z, .spfrsame 
2435						.spnosame: call showsperror 
2435						.spfrsame: nop 
2435						exx 
2435					endif 
2435				endif 
2435			endm 
# End of macro STACKFRAMECHK
2435			 
2435 c9			ret    ; dont process any remaining parser tokens as they form new word 
2436			 
2436			 
2436			 
2436			 
2436			;		NEXT 
2436			.SCOLN: 
2436			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
2436 06				db OPCODE_SCOLN 
2437 82 24			dw .DROP 
2439 02				db 2 
243a .. 00			db ";",0           
243c			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
243c					if DEBUG_FORTH_WORDS_KEY 
243c						DMARK "SCN" 
243c f5				push af  
243d 3a 51 24			ld a, (.dmark)  
2440 32 bd fb			ld (debug_mark),a  
2443 3a 52 24			ld a, (.dmark+1)  
2446 32 be fb			ld (debug_mark+1),a  
2449 3a 53 24			ld a, (.dmark+2)  
244c 32 bf fb			ld (debug_mark+2),a  
244f 18 03			jr .pastdmark  
2451 ..			.dmark: db "SCN"  
2454 f1			.pastdmark: pop af  
2455			endm  
# End of macro DMARK
2455						CALLMONITOR 
2455 cd 2d 17			call break_point_state  
2458				endm  
# End of macro CALLMONITOR
2458					endif 
2458					FORTH_RSP_TOS 
2458 cd 7b 1c			call macro_forth_rsp_tos 
245b				endm 
# End of macro FORTH_RSP_TOS
245b e5					push hl 
245c					FORTH_RSP_POP 
245c cd 85 1c			call macro_forth_rsp_pop 
245f				endm 
# End of macro FORTH_RSP_POP
245f e1					pop hl 
2460			;		ex de,hl 
2460 22 a4 f2				ld (os_tok_ptr),hl 
2463			 
2463			if DEBUG_FORTH_UWORD 
2463						DMARK "SCL" 
2463 f5				push af  
2464 3a 78 24			ld a, (.dmark)  
2467 32 bd fb			ld (debug_mark),a  
246a 3a 79 24			ld a, (.dmark+1)  
246d 32 be fb			ld (debug_mark+1),a  
2470 3a 7a 24			ld a, (.dmark+2)  
2473 32 bf fb			ld (debug_mark+2),a  
2476 18 03			jr .pastdmark  
2478 ..			.dmark: db "SCL"  
247b f1			.pastdmark: pop af  
247c			endm  
# End of macro DMARK
247c				CALLMONITOR 
247c cd 2d 17			call break_point_state  
247f				endm  
# End of macro CALLMONITOR
247f			endif 
247f					NEXTW 
247f c3 26 20			jp macro_next 
2482				endm 
# End of macro NEXTW
2482			 
2482			.DROP: 
2482				CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2482 1b				db WORD_SYS_CORE+OPCODE_DROP             
2483 ad 24			dw .DUP2            
2485 05				db 4 + 1 
2486 .. 00			db "DROP",0              
248b				endm 
# End of macro CWHEAD
248b			; | DROP ( w -- )   drop the TOS item   | DONE 
248b					if DEBUG_FORTH_WORDS_KEY 
248b						DMARK "DRP" 
248b f5				push af  
248c 3a a0 24			ld a, (.dmark)  
248f 32 bd fb			ld (debug_mark),a  
2492 3a a1 24			ld a, (.dmark+1)  
2495 32 be fb			ld (debug_mark+1),a  
2498 3a a2 24			ld a, (.dmark+2)  
249b 32 bf fb			ld (debug_mark+2),a  
249e 18 03			jr .pastdmark  
24a0 ..			.dmark: db "DRP"  
24a3 f1			.pastdmark: pop af  
24a4			endm  
# End of macro DMARK
24a4						CALLMONITOR 
24a4 cd 2d 17			call break_point_state  
24a7				endm  
# End of macro CALLMONITOR
24a7					endif 
24a7					FORTH_DSP_POP 
24a7 cd 6c 1f			call macro_forth_dsp_pop 
24aa				endm 
# End of macro FORTH_DSP_POP
24aa					NEXTW 
24aa c3 26 20			jp macro_next 
24ad				endm 
# End of macro NEXTW
24ad			.DUP2: 
24ad				CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
24ad 1c				db WORD_SYS_CORE+OPCODE_DUP2             
24ae f2 24			dw .DROP2            
24b0 05				db 4 + 1 
24b1 .. 00			db "2DUP",0              
24b6				endm 
# End of macro CWHEAD
24b6			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | DONE 
24b6					if DEBUG_FORTH_WORDS_KEY 
24b6						DMARK "2DU" 
24b6 f5				push af  
24b7 3a cb 24			ld a, (.dmark)  
24ba 32 bd fb			ld (debug_mark),a  
24bd 3a cc 24			ld a, (.dmark+1)  
24c0 32 be fb			ld (debug_mark+1),a  
24c3 3a cd 24			ld a, (.dmark+2)  
24c6 32 bf fb			ld (debug_mark+2),a  
24c9 18 03			jr .pastdmark  
24cb ..			.dmark: db "2DU"  
24ce f1			.pastdmark: pop af  
24cf			endm  
# End of macro DMARK
24cf						CALLMONITOR 
24cf cd 2d 17			call break_point_state  
24d2				endm  
# End of macro CALLMONITOR
24d2					endif 
24d2					FORTH_DSP_VALUEHL 
24d2 cd b4 1e			call macro_dsp_valuehl 
24d5				endm 
# End of macro FORTH_DSP_VALUEHL
24d5 e5					push hl      ; 2 
24d6			 
24d6					FORTH_DSP_POP 
24d6 cd 6c 1f			call macro_forth_dsp_pop 
24d9				endm 
# End of macro FORTH_DSP_POP
24d9					 
24d9					FORTH_DSP_VALUEHL 
24d9 cd b4 1e			call macro_dsp_valuehl 
24dc				endm 
# End of macro FORTH_DSP_VALUEHL
24dc			;		push hl      ; 1 
24dc			 
24dc					FORTH_DSP_POP 
24dc cd 6c 1f			call macro_forth_dsp_pop 
24df				endm 
# End of macro FORTH_DSP_POP
24df			 
24df			;		pop hl       ; 1 
24df d1					pop de       ; 2 
24e0			 
24e0 cd bd 1c				call forth_push_numhl 
24e3 eb					ex de, hl 
24e4 cd bd 1c				call forth_push_numhl 
24e7			 
24e7					 
24e7 eb					ex de, hl 
24e8			 
24e8 cd bd 1c				call forth_push_numhl 
24eb eb					ex de, hl 
24ec cd bd 1c				call forth_push_numhl 
24ef			 
24ef			 
24ef					NEXTW 
24ef c3 26 20			jp macro_next 
24f2				endm 
# End of macro NEXTW
24f2			.DROP2: 
24f2				CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
24f2 1d				db WORD_SYS_CORE+OPCODE_DROP2             
24f3 21 25			dw .SWAP2            
24f5 06				db 5 + 1 
24f6 .. 00			db "2DROP",0              
24fc				endm 
# End of macro CWHEAD
24fc			; | 2DROP ( w w -- )    Double drop | DONE 
24fc					if DEBUG_FORTH_WORDS_KEY 
24fc						DMARK "2DR" 
24fc f5				push af  
24fd 3a 11 25			ld a, (.dmark)  
2500 32 bd fb			ld (debug_mark),a  
2503 3a 12 25			ld a, (.dmark+1)  
2506 32 be fb			ld (debug_mark+1),a  
2509 3a 13 25			ld a, (.dmark+2)  
250c 32 bf fb			ld (debug_mark+2),a  
250f 18 03			jr .pastdmark  
2511 ..			.dmark: db "2DR"  
2514 f1			.pastdmark: pop af  
2515			endm  
# End of macro DMARK
2515						CALLMONITOR 
2515 cd 2d 17			call break_point_state  
2518				endm  
# End of macro CALLMONITOR
2518					endif 
2518					FORTH_DSP_POP 
2518 cd 6c 1f			call macro_forth_dsp_pop 
251b				endm 
# End of macro FORTH_DSP_POP
251b					FORTH_DSP_POP 
251b cd 6c 1f			call macro_forth_dsp_pop 
251e				endm 
# End of macro FORTH_DSP_POP
251e					NEXTW 
251e c3 26 20			jp macro_next 
2521				endm 
# End of macro NEXTW
2521			.SWAP2: 
2521				CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2521 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2522 4a 25			dw .AT            
2524 06				db 5 + 1 
2525 .. 00			db "2SWAP",0              
252b				endm 
# End of macro CWHEAD
252b			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
252b					if DEBUG_FORTH_WORDS_KEY 
252b						DMARK "2SW" 
252b f5				push af  
252c 3a 40 25			ld a, (.dmark)  
252f 32 bd fb			ld (debug_mark),a  
2532 3a 41 25			ld a, (.dmark+1)  
2535 32 be fb			ld (debug_mark+1),a  
2538 3a 42 25			ld a, (.dmark+2)  
253b 32 bf fb			ld (debug_mark+2),a  
253e 18 03			jr .pastdmark  
2540 ..			.dmark: db "2SW"  
2543 f1			.pastdmark: pop af  
2544			endm  
# End of macro DMARK
2544						CALLMONITOR 
2544 cd 2d 17			call break_point_state  
2547				endm  
# End of macro CALLMONITOR
2547					endif 
2547					NEXTW 
2547 c3 26 20			jp macro_next 
254a				endm 
# End of macro NEXTW
254a			.AT: 
254a				CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
254a 1f				db WORD_SYS_CORE+OPCODE_AT             
254b 7c 25			dw .CAT            
254d 02				db 1 + 1 
254e .. 00			db "@",0              
2550				endm 
# End of macro CWHEAD
2550			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2550			 
2550					if DEBUG_FORTH_WORDS_KEY 
2550						DMARK "AT." 
2550 f5				push af  
2551 3a 65 25			ld a, (.dmark)  
2554 32 bd fb			ld (debug_mark),a  
2557 3a 66 25			ld a, (.dmark+1)  
255a 32 be fb			ld (debug_mark+1),a  
255d 3a 67 25			ld a, (.dmark+2)  
2560 32 bf fb			ld (debug_mark+2),a  
2563 18 03			jr .pastdmark  
2565 ..			.dmark: db "AT."  
2568 f1			.pastdmark: pop af  
2569			endm  
# End of macro DMARK
2569						CALLMONITOR 
2569 cd 2d 17			call break_point_state  
256c				endm  
# End of macro CALLMONITOR
256c					endif 
256c			.getbyteat:	 
256c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
256c cd b4 1e			call macro_dsp_valuehl 
256f				endm 
# End of macro FORTH_DSP_VALUEHL
256f					 
256f			;		push hl 
256f				 
256f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
256f cd 6c 1f			call macro_forth_dsp_pop 
2572				endm 
# End of macro FORTH_DSP_POP
2572			 
2572			;		pop hl 
2572			 
2572 7e					ld a, (hl) 
2573			 
2573 6f					ld l, a 
2574 26 00				ld h, 0 
2576 cd bd 1c				call forth_push_numhl 
2579			 
2579					NEXTW 
2579 c3 26 20			jp macro_next 
257c				endm 
# End of macro NEXTW
257c			.CAT: 
257c				CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
257c 20				db WORD_SYS_CORE+OPCODE_CAT             
257d a5 25			dw .BANG            
257f 03				db 2 + 1 
2580 .. 00			db "C@",0              
2583				endm 
# End of macro CWHEAD
2583			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2583					if DEBUG_FORTH_WORDS_KEY 
2583						DMARK "CAA" 
2583 f5				push af  
2584 3a 98 25			ld a, (.dmark)  
2587 32 bd fb			ld (debug_mark),a  
258a 3a 99 25			ld a, (.dmark+1)  
258d 32 be fb			ld (debug_mark+1),a  
2590 3a 9a 25			ld a, (.dmark+2)  
2593 32 bf fb			ld (debug_mark+2),a  
2596 18 03			jr .pastdmark  
2598 ..			.dmark: db "CAA"  
259b f1			.pastdmark: pop af  
259c			endm  
# End of macro DMARK
259c						CALLMONITOR 
259c cd 2d 17			call break_point_state  
259f				endm  
# End of macro CALLMONITOR
259f					endif 
259f c3 6c 25				jp .getbyteat 
25a2					NEXTW 
25a2 c3 26 20			jp macro_next 
25a5				endm 
# End of macro NEXTW
25a5			.BANG: 
25a5				CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
25a5 21				db WORD_SYS_CORE+OPCODE_BANG             
25a6 db 25			dw .CBANG            
25a8 02				db 1 + 1 
25a9 .. 00			db "!",0              
25ab				endm 
# End of macro CWHEAD
25ab			; | ! ( x w -- ) Store x at address w      | DONE 
25ab					if DEBUG_FORTH_WORDS_KEY 
25ab						DMARK "BNG" 
25ab f5				push af  
25ac 3a c0 25			ld a, (.dmark)  
25af 32 bd fb			ld (debug_mark),a  
25b2 3a c1 25			ld a, (.dmark+1)  
25b5 32 be fb			ld (debug_mark+1),a  
25b8 3a c2 25			ld a, (.dmark+2)  
25bb 32 bf fb			ld (debug_mark+2),a  
25be 18 03			jr .pastdmark  
25c0 ..			.dmark: db "BNG"  
25c3 f1			.pastdmark: pop af  
25c4			endm  
# End of macro DMARK
25c4						CALLMONITOR 
25c4 cd 2d 17			call break_point_state  
25c7				endm  
# End of macro CALLMONITOR
25c7					endif 
25c7			 
25c7			.storebyteat:		 
25c7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25c7 cd b4 1e			call macro_dsp_valuehl 
25ca				endm 
# End of macro FORTH_DSP_VALUEHL
25ca					 
25ca e5					push hl 
25cb				 
25cb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25cb cd 6c 1f			call macro_forth_dsp_pop 
25ce				endm 
# End of macro FORTH_DSP_POP
25ce			 
25ce					; get byte to poke 
25ce			 
25ce					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25ce cd b4 1e			call macro_dsp_valuehl 
25d1				endm 
# End of macro FORTH_DSP_VALUEHL
25d1 e5					push hl 
25d2			 
25d2			 
25d2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25d2 cd 6c 1f			call macro_forth_dsp_pop 
25d5				endm 
# End of macro FORTH_DSP_POP
25d5			 
25d5			 
25d5 d1					pop de 
25d6 e1					pop hl 
25d7			 
25d7 73					ld (hl),e 
25d8			 
25d8			 
25d8					NEXTW 
25d8 c3 26 20			jp macro_next 
25db				endm 
# End of macro NEXTW
25db			.CBANG: 
25db				CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
25db 22				db WORD_SYS_CORE+OPCODE_CBANG             
25dc 04 26			dw .SCALL            
25de 03				db 2 + 1 
25df .. 00			db "C!",0              
25e2				endm 
# End of macro CWHEAD
25e2			; | C!  ( x w -- ) Store x at address w  | DONE 
25e2					if DEBUG_FORTH_WORDS_KEY 
25e2						DMARK "CBA" 
25e2 f5				push af  
25e3 3a f7 25			ld a, (.dmark)  
25e6 32 bd fb			ld (debug_mark),a  
25e9 3a f8 25			ld a, (.dmark+1)  
25ec 32 be fb			ld (debug_mark+1),a  
25ef 3a f9 25			ld a, (.dmark+2)  
25f2 32 bf fb			ld (debug_mark+2),a  
25f5 18 03			jr .pastdmark  
25f7 ..			.dmark: db "CBA"  
25fa f1			.pastdmark: pop af  
25fb			endm  
# End of macro DMARK
25fb						CALLMONITOR 
25fb cd 2d 17			call break_point_state  
25fe				endm  
# End of macro CALLMONITOR
25fe					endif 
25fe c3 c7 25				jp .storebyteat 
2601					NEXTW 
2601 c3 26 20			jp macro_next 
2604				endm 
# End of macro NEXTW
2604			.SCALL: 
2604				CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2604 23				db WORD_SYS_CORE+OPCODE_SCALL             
2605 38 26			dw .DEPTH            
2607 05				db 4 + 1 
2608 .. 00			db "CALL",0              
260d				endm 
# End of macro CWHEAD
260d			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
260d					if DEBUG_FORTH_WORDS_KEY 
260d						DMARK "CLL" 
260d f5				push af  
260e 3a 22 26			ld a, (.dmark)  
2611 32 bd fb			ld (debug_mark),a  
2614 3a 23 26			ld a, (.dmark+1)  
2617 32 be fb			ld (debug_mark+1),a  
261a 3a 24 26			ld a, (.dmark+2)  
261d 32 bf fb			ld (debug_mark+2),a  
2620 18 03			jr .pastdmark  
2622 ..			.dmark: db "CLL"  
2625 f1			.pastdmark: pop af  
2626			endm  
# End of macro DMARK
2626						CALLMONITOR 
2626 cd 2d 17			call break_point_state  
2629				endm  
# End of macro CALLMONITOR
2629					endif 
2629			 
2629					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2629 cd b4 1e			call macro_dsp_valuehl 
262c				endm 
# End of macro FORTH_DSP_VALUEHL
262c			 
262c			;		push hl 
262c			 
262c					; destroy value TOS 
262c			 
262c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
262c cd 6c 1f			call macro_forth_dsp_pop 
262f				endm 
# End of macro FORTH_DSP_POP
262f			 
262f						 
262f			;		pop hl 
262f			 
262f					; how to do a call with hl???? save SP? 
262f cd cf 1f				call forth_call_hl 
2632			 
2632			 
2632					; TODO push value back onto stack for another op etc 
2632			 
2632 cd bd 1c				call forth_push_numhl 
2635					NEXTW 
2635 c3 26 20			jp macro_next 
2638				endm 
# End of macro NEXTW
2638			.DEPTH: 
2638				CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2638 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2639 75 26			dw .OVER            
263b 06				db 5 + 1 
263c .. 00			db "DEPTH",0              
2642				endm 
# End of macro CWHEAD
2642			; | DEPTH ( -- u ) Push count of stack | DONE 
2642					; take current TOS and remove from base value div by two to get count 
2642					if DEBUG_FORTH_WORDS_KEY 
2642						DMARK "DEP" 
2642 f5				push af  
2643 3a 57 26			ld a, (.dmark)  
2646 32 bd fb			ld (debug_mark),a  
2649 3a 58 26			ld a, (.dmark+1)  
264c 32 be fb			ld (debug_mark+1),a  
264f 3a 59 26			ld a, (.dmark+2)  
2652 32 bf fb			ld (debug_mark+2),a  
2655 18 03			jr .pastdmark  
2657 ..			.dmark: db "DEP"  
265a f1			.pastdmark: pop af  
265b			endm  
# End of macro DMARK
265b						CALLMONITOR 
265b cd 2d 17			call break_point_state  
265e				endm  
# End of macro CALLMONITOR
265e					endif 
265e			 
265e			 
265e 2a 90 f9			ld hl, (cli_data_sp) 
2661 11 0a f5			ld de, cli_data_stack 
2664 ed 52			sbc hl,de 
2666				 
2666				; div by size of stack item 
2666			 
2666 5d				ld e,l 
2667 0e 03			ld c, 3 
2669 cd aa 0c			call Div8 
266c			 
266c 6f				ld l,a 
266d 26 00			ld h,0 
266f			 
266f				;srl h 
266f				;rr l 
266f			 
266f cd bd 1c				call forth_push_numhl 
2672					NEXTW 
2672 c3 26 20			jp macro_next 
2675				endm 
# End of macro NEXTW
2675			.OVER: 
2675				CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2675 42				db WORD_SYS_CORE+46             
2676 bc 26			dw .PAUSE            
2678 05				db 4 + 1 
2679 .. 00			db "OVER",0              
267e				endm 
# End of macro CWHEAD
267e			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
267e					if DEBUG_FORTH_WORDS_KEY 
267e						DMARK "OVR" 
267e f5				push af  
267f 3a 93 26			ld a, (.dmark)  
2682 32 bd fb			ld (debug_mark),a  
2685 3a 94 26			ld a, (.dmark+1)  
2688 32 be fb			ld (debug_mark+1),a  
268b 3a 95 26			ld a, (.dmark+2)  
268e 32 bf fb			ld (debug_mark+2),a  
2691 18 03			jr .pastdmark  
2693 ..			.dmark: db "OVR"  
2696 f1			.pastdmark: pop af  
2697			endm  
# End of macro DMARK
2697						CALLMONITOR 
2697 cd 2d 17			call break_point_state  
269a				endm  
# End of macro CALLMONITOR
269a					endif 
269a			 
269a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
269a cd b4 1e			call macro_dsp_valuehl 
269d				endm 
# End of macro FORTH_DSP_VALUEHL
269d e5					push hl    ; n2 
269e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
269e cd 6c 1f			call macro_forth_dsp_pop 
26a1				endm 
# End of macro FORTH_DSP_POP
26a1			 
26a1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26a1 cd b4 1e			call macro_dsp_valuehl 
26a4				endm 
# End of macro FORTH_DSP_VALUEHL
26a4 e5					push hl    ; n1 
26a5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26a5 cd 6c 1f			call macro_forth_dsp_pop 
26a8				endm 
# End of macro FORTH_DSP_POP
26a8			 
26a8 d1					pop de     ; n1 
26a9 e1					pop hl     ; n2 
26aa			 
26aa d5					push de 
26ab e5					push hl 
26ac d5					push de 
26ad			 
26ad					; push back  
26ad			 
26ad e1					pop hl 
26ae cd bd 1c				call forth_push_numhl 
26b1 e1					pop hl 
26b2 cd bd 1c				call forth_push_numhl 
26b5 e1					pop hl 
26b6 cd bd 1c				call forth_push_numhl 
26b9					NEXTW 
26b9 c3 26 20			jp macro_next 
26bc				endm 
# End of macro NEXTW
26bc			 
26bc			.PAUSE: 
26bc				CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
26bc 43				db WORD_SYS_CORE+47             
26bd f1 26			dw .PAUSES            
26bf 08				db 7 + 1 
26c0 .. 00			db "PAUSEMS",0              
26c8				endm 
# End of macro CWHEAD
26c8			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
26c8					if DEBUG_FORTH_WORDS_KEY 
26c8						DMARK "PMS" 
26c8 f5				push af  
26c9 3a dd 26			ld a, (.dmark)  
26cc 32 bd fb			ld (debug_mark),a  
26cf 3a de 26			ld a, (.dmark+1)  
26d2 32 be fb			ld (debug_mark+1),a  
26d5 3a df 26			ld a, (.dmark+2)  
26d8 32 bf fb			ld (debug_mark+2),a  
26db 18 03			jr .pastdmark  
26dd ..			.dmark: db "PMS"  
26e0 f1			.pastdmark: pop af  
26e1			endm  
# End of macro DMARK
26e1						CALLMONITOR 
26e1 cd 2d 17			call break_point_state  
26e4				endm  
# End of macro CALLMONITOR
26e4					endif 
26e4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26e4 cd b4 1e			call macro_dsp_valuehl 
26e7				endm 
# End of macro FORTH_DSP_VALUEHL
26e7			;		push hl    ; n2 
26e7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26e7 cd 6c 1f			call macro_forth_dsp_pop 
26ea				endm 
# End of macro FORTH_DSP_POP
26ea			;		pop hl 
26ea			 
26ea 7d					ld a, l 
26eb cd 4b 0a				call aDelayInMS 
26ee				       NEXTW 
26ee c3 26 20			jp macro_next 
26f1				endm 
# End of macro NEXTW
26f1			.PAUSES:  
26f1				CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
26f1 44				db WORD_SYS_CORE+48             
26f2 60 27			dw .ROT            
26f4 06				db 5 + 1 
26f5 .. 00			db "PAUSE",0              
26fb				endm 
# End of macro CWHEAD
26fb			; | PAUSE ( n -- )  Pause for n seconds | DONE 
26fb					if DEBUG_FORTH_WORDS_KEY 
26fb						DMARK "PAU" 
26fb f5				push af  
26fc 3a 10 27			ld a, (.dmark)  
26ff 32 bd fb			ld (debug_mark),a  
2702 3a 11 27			ld a, (.dmark+1)  
2705 32 be fb			ld (debug_mark+1),a  
2708 3a 12 27			ld a, (.dmark+2)  
270b 32 bf fb			ld (debug_mark+2),a  
270e 18 03			jr .pastdmark  
2710 ..			.dmark: db "PAU"  
2713 f1			.pastdmark: pop af  
2714			endm  
# End of macro DMARK
2714						CALLMONITOR 
2714 cd 2d 17			call break_point_state  
2717				endm  
# End of macro CALLMONITOR
2717					endif 
2717					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2717 cd b4 1e			call macro_dsp_valuehl 
271a				endm 
# End of macro FORTH_DSP_VALUEHL
271a			;		push hl    ; n2 
271a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
271a cd 6c 1f			call macro_forth_dsp_pop 
271d				endm 
# End of macro FORTH_DSP_POP
271d			;		pop hl 
271d 45					ld b, l 
271e					if DEBUG_FORTH_WORDS 
271e						DMARK "PAU" 
271e f5				push af  
271f 3a 33 27			ld a, (.dmark)  
2722 32 bd fb			ld (debug_mark),a  
2725 3a 34 27			ld a, (.dmark+1)  
2728 32 be fb			ld (debug_mark+1),a  
272b 3a 35 27			ld a, (.dmark+2)  
272e 32 bf fb			ld (debug_mark+2),a  
2731 18 03			jr .pastdmark  
2733 ..			.dmark: db "PAU"  
2736 f1			.pastdmark: pop af  
2737			endm  
# End of macro DMARK
2737						CALLMONITOR 
2737 cd 2d 17			call break_point_state  
273a				endm  
# End of macro CALLMONITOR
273a					endif 
273a c5			.pauses1:	push bc 
273b cd 66 0a				call delay1s 
273e c1					pop bc 
273f					if DEBUG_FORTH_WORDS 
273f						DMARK "PA1" 
273f f5				push af  
2740 3a 54 27			ld a, (.dmark)  
2743 32 bd fb			ld (debug_mark),a  
2746 3a 55 27			ld a, (.dmark+1)  
2749 32 be fb			ld (debug_mark+1),a  
274c 3a 56 27			ld a, (.dmark+2)  
274f 32 bf fb			ld (debug_mark+2),a  
2752 18 03			jr .pastdmark  
2754 ..			.dmark: db "PA1"  
2757 f1			.pastdmark: pop af  
2758			endm  
# End of macro DMARK
2758						CALLMONITOR 
2758 cd 2d 17			call break_point_state  
275b				endm  
# End of macro CALLMONITOR
275b					endif 
275b 10 dd				djnz .pauses1 
275d			 
275d				       NEXTW 
275d c3 26 20			jp macro_next 
2760				endm 
# End of macro NEXTW
2760			.ROT: 
2760				CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2760 45				db WORD_SYS_CORE+49             
2761 ae 27			dw .UWORDS            
2763 04				db 3 + 1 
2764 .. 00			db "ROT",0              
2768				endm 
# End of macro CWHEAD
2768			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
2768					if DEBUG_FORTH_WORDS_KEY 
2768						DMARK "ROT" 
2768 f5				push af  
2769 3a 7d 27			ld a, (.dmark)  
276c 32 bd fb			ld (debug_mark),a  
276f 3a 7e 27			ld a, (.dmark+1)  
2772 32 be fb			ld (debug_mark+1),a  
2775 3a 7f 27			ld a, (.dmark+2)  
2778 32 bf fb			ld (debug_mark+2),a  
277b 18 03			jr .pastdmark  
277d ..			.dmark: db "ROT"  
2780 f1			.pastdmark: pop af  
2781			endm  
# End of macro DMARK
2781						CALLMONITOR 
2781 cd 2d 17			call break_point_state  
2784				endm  
# End of macro CALLMONITOR
2784					endif 
2784			 
2784					FORTH_DSP_VALUEHL 
2784 cd b4 1e			call macro_dsp_valuehl 
2787				endm 
# End of macro FORTH_DSP_VALUEHL
2787 e5					push hl    ; u3  
2788			 
2788					FORTH_DSP_POP 
2788 cd 6c 1f			call macro_forth_dsp_pop 
278b				endm 
# End of macro FORTH_DSP_POP
278b			   
278b					FORTH_DSP_VALUEHL 
278b cd b4 1e			call macro_dsp_valuehl 
278e				endm 
# End of macro FORTH_DSP_VALUEHL
278e e5					push hl     ; u2 
278f			 
278f					FORTH_DSP_POP 
278f cd 6c 1f			call macro_forth_dsp_pop 
2792				endm 
# End of macro FORTH_DSP_POP
2792			 
2792					FORTH_DSP_VALUEHL 
2792 cd b4 1e			call macro_dsp_valuehl 
2795				endm 
# End of macro FORTH_DSP_VALUEHL
2795 e5					push hl     ; u1 
2796			 
2796					FORTH_DSP_POP 
2796 cd 6c 1f			call macro_forth_dsp_pop 
2799				endm 
# End of macro FORTH_DSP_POP
2799			 
2799 c1					pop bc      ; u1 
279a e1					pop hl      ; u2 
279b d1					pop de      ; u3 
279c			 
279c			 
279c c5					push bc 
279d d5					push de 
279e e5					push hl 
279f			 
279f			 
279f e1					pop hl 
27a0 cd bd 1c				call forth_push_numhl 
27a3			 
27a3 e1					pop hl 
27a4 cd bd 1c				call forth_push_numhl 
27a7			 
27a7 e1					pop hl 
27a8 cd bd 1c				call forth_push_numhl 
27ab					 
27ab			 
27ab			 
27ab			 
27ab			 
27ab			 
27ab				       NEXTW 
27ab c3 26 20			jp macro_next 
27ae				endm 
# End of macro NEXTW
27ae			 
27ae			.UWORDS: 
27ae				CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
27ae 50				db WORD_SYS_CORE+60             
27af 70 28			dw .BP            
27b1 07				db 6 + 1 
27b2 .. 00			db "UWORDS",0              
27b9				endm 
# End of macro CWHEAD
27b9			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
27b9			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
27b9			; | | Following the count are the individual words. 
27b9			; | | 
27b9			; | | e.g. UWORDS 
27b9			; | | BOX DIRLIST 2 
27b9			; | |  
27b9			; | | Can be used to save the words to storage via: 
27b9			; | | UWORDS $01 DO $01 APPEND LOOP 
27b9				if DEBUG_FORTH_WORDS_KEY 
27b9					DMARK "UWR" 
27b9 f5				push af  
27ba 3a ce 27			ld a, (.dmark)  
27bd 32 bd fb			ld (debug_mark),a  
27c0 3a cf 27			ld a, (.dmark+1)  
27c3 32 be fb			ld (debug_mark+1),a  
27c6 3a d0 27			ld a, (.dmark+2)  
27c9 32 bf fb			ld (debug_mark+2),a  
27cc 18 03			jr .pastdmark  
27ce ..			.dmark: db "UWR"  
27d1 f1			.pastdmark: pop af  
27d2			endm  
# End of macro DMARK
27d2					CALLMONITOR 
27d2 cd 2d 17			call break_point_state  
27d5				endm  
# End of macro CALLMONITOR
27d5				endif 
27d5 21 00 80				ld hl, baseram 
27d8					;ld hl, baseusermem 
27d8 01 00 00				ld bc, 0    ; start a counter 
27db			 
27db				; skip dict stub 
27db			 
27db cd 77 21				call forth_tok_next 
27de			 
27de			 
27de			; while we have words to look for 
27de			 
27de 7e			.douscan:	ld a, (hl)      
27df				if DEBUG_FORTH_WORDS 
27df					DMARK "UWs" 
27df f5				push af  
27e0 3a f4 27			ld a, (.dmark)  
27e3 32 bd fb			ld (debug_mark),a  
27e6 3a f5 27			ld a, (.dmark+1)  
27e9 32 be fb			ld (debug_mark+1),a  
27ec 3a f6 27			ld a, (.dmark+2)  
27ef 32 bf fb			ld (debug_mark+2),a  
27f2 18 03			jr .pastdmark  
27f4 ..			.dmark: db "UWs"  
27f7 f1			.pastdmark: pop af  
27f8			endm  
# End of macro DMARK
27f8					CALLMONITOR 
27f8 cd 2d 17			call break_point_state  
27fb				endm  
# End of macro CALLMONITOR
27fb				endif 
27fb fe 00				cp WORD_SYS_END 
27fd 28 4d				jr z, .udone 
27ff fe 01				cp WORD_SYS_UWORD 
2801 20 44				jr nz, .nuword 
2803			 
2803				if DEBUG_FORTH_WORDS 
2803					DMARK "UWu" 
2803 f5				push af  
2804 3a 18 28			ld a, (.dmark)  
2807 32 bd fb			ld (debug_mark),a  
280a 3a 19 28			ld a, (.dmark+1)  
280d 32 be fb			ld (debug_mark+1),a  
2810 3a 1a 28			ld a, (.dmark+2)  
2813 32 bf fb			ld (debug_mark+2),a  
2816 18 03			jr .pastdmark  
2818 ..			.dmark: db "UWu"  
281b f1			.pastdmark: pop af  
281c			endm  
# End of macro DMARK
281c					CALLMONITOR 
281c cd 2d 17			call break_point_state  
281f				endm  
# End of macro CALLMONITOR
281f				endif 
281f					; we have a uword so push its name to the stack 
281f			 
281f e5				   	push hl  ; save so we can move to next dict block 
2820			 
2820					; skip opcode 
2820 23					inc hl  
2821					; skip next ptr 
2821 23					inc hl  
2822 23					inc hl 
2823					; skip len 
2823 23					inc hl 
2824				if DEBUG_FORTH_WORDS 
2824					DMARK "UWt" 
2824 f5				push af  
2825 3a 39 28			ld a, (.dmark)  
2828 32 bd fb			ld (debug_mark),a  
282b 3a 3a 28			ld a, (.dmark+1)  
282e 32 be fb			ld (debug_mark+1),a  
2831 3a 3b 28			ld a, (.dmark+2)  
2834 32 bf fb			ld (debug_mark+2),a  
2837 18 03			jr .pastdmark  
2839 ..			.dmark: db "UWt"  
283c f1			.pastdmark: pop af  
283d			endm  
# End of macro DMARK
283d					CALLMONITOR 
283d cd 2d 17			call break_point_state  
2840				endm  
# End of macro CALLMONITOR
2840				endif 
2840 03					inc bc 
2841			 
2841 c5					push bc 
2842 cd 2b 1d				call forth_push_str 
2845 c1					pop bc 
2846			 
2846 e1					pop hl 	 
2847			 
2847 cd 77 21		.nuword:	call forth_tok_next 
284a 18 92				jr .douscan  
284c			 
284c			.udone:		 ; push count of uwords found 
284c c5					push bc 
284d e1					pop hl 
284e			 
284e				if DEBUG_FORTH_WORDS 
284e					DMARK "UWc" 
284e f5				push af  
284f 3a 63 28			ld a, (.dmark)  
2852 32 bd fb			ld (debug_mark),a  
2855 3a 64 28			ld a, (.dmark+1)  
2858 32 be fb			ld (debug_mark+1),a  
285b 3a 65 28			ld a, (.dmark+2)  
285e 32 bf fb			ld (debug_mark+2),a  
2861 18 03			jr .pastdmark  
2863 ..			.dmark: db "UWc"  
2866 f1			.pastdmark: pop af  
2867			endm  
# End of macro DMARK
2867					CALLMONITOR 
2867 cd 2d 17			call break_point_state  
286a				endm  
# End of macro CALLMONITOR
286a				endif 
286a cd bd 1c				call forth_push_numhl 
286d			 
286d			 
286d				       NEXTW 
286d c3 26 20			jp macro_next 
2870				endm 
# End of macro NEXTW
2870			 
2870			.BP: 
2870				CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2870 54				db WORD_SYS_CORE+64             
2871 a6 28			dw .MONITOR            
2873 03				db 2 + 1 
2874 .. 00			db "BP",0              
2877				endm 
# End of macro CWHEAD
2877			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2877			; | | $00 Will enable the break points within specific code paths 
2877			; | | $01 Will disable break points 
2877			; | |  
2877			; | | By default break points are off. Either the above can be used to enable them 
2877			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2877			; | | and on release of the pressed key a message will be disaplayed to notify 
2877			; | | that break points are enabled. Pressing any key will then continue boot process. 
2877					; get byte count 
2877					if DEBUG_FORTH_WORDS_KEY 
2877						DMARK "BP." 
2877 f5				push af  
2878 3a 8c 28			ld a, (.dmark)  
287b 32 bd fb			ld (debug_mark),a  
287e 3a 8d 28			ld a, (.dmark+1)  
2881 32 be fb			ld (debug_mark+1),a  
2884 3a 8e 28			ld a, (.dmark+2)  
2887 32 bf fb			ld (debug_mark+2),a  
288a 18 03			jr .pastdmark  
288c ..			.dmark: db "BP."  
288f f1			.pastdmark: pop af  
2890			endm  
# End of macro DMARK
2890						CALLMONITOR 
2890 cd 2d 17			call break_point_state  
2893				endm  
# End of macro CALLMONITOR
2893					endif 
2893			 
2893					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2893 cd b4 1e			call macro_dsp_valuehl 
2896				endm 
# End of macro FORTH_DSP_VALUEHL
2896			 
2896			;		push hl 
2896			 
2896					; destroy value TOS 
2896			 
2896					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2896 cd 6c 1f			call macro_forth_dsp_pop 
2899				endm 
# End of macro FORTH_DSP_POP
2899			 
2899			;		pop hl 
2899			 
2899 3e 00				ld a,0 
289b bd					cp l 
289c 28 02				jr z, .bpset 
289e 3e 2a				ld a, '*' 
28a0			 
28a0 32 94 ef		.bpset:		ld (os_view_disable), a 
28a3			 
28a3			 
28a3					NEXTW 
28a3 c3 26 20			jp macro_next 
28a6				endm 
# End of macro NEXTW
28a6			 
28a6			 
28a6			.MONITOR: 
28a6				CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
28a6 55				db WORD_SYS_CORE+65             
28a7 d9 28			dw .MALLOC            
28a9 08				db 7 + 1 
28aa .. 00			db "MONITOR",0              
28b2				endm 
# End of macro CWHEAD
28b2			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
28b2			; | | At start the current various registers will be displayed with contents. 
28b2			; | | Top right corner will show the most recent debug marker seen. 
28b2			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
28b2			; | | and the return stack pointer (RSP). 
28b2			; | | Pressing: 
28b2			; | |    1 - Initial screen 
28b2			; | |    2 - Display a data dump of HL 
28b2			; | |    3 - Display a data dump of DE 
28b2			; | |    4 - Display a data dump of BC 
28b2			; | |    5 - Display a data dump of HL 
28b2			; | |    6 - Display a data dump of DSP 
28b2			; | |    7 - Display a data dump of RSP 
28b2			; | |    8 - Display a data dump of what is at DSP 
28b2			; | |    9 - Display a data dump of what is at RSP 
28b2			; | |    0 - Exit monitor and continue running. This will also enable break points 
28b2			; | |    * - Disable break points 
28b2			; | |    # - Enter traditional monitor mode 
28b2			; | | 
28b2			; | | Monitor Mode 
28b2			; | | ------------ 
28b2			; | | A prompt of '>' will be shown for various commands: 
28b2			; | |    D xxxx - Display a data dump starting from hex address xxxx 
28b2			; | |    C - Continue display a data dump from the last set address 
28b2			; | |    M xxxx - Set start of memory edit at address xx 
28b2			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
28b2			; | |    Q - Return to previous 
28b2					if DEBUG_FORTH_WORDS_KEY 
28b2						DMARK "MON" 
28b2 f5				push af  
28b3 3a c7 28			ld a, (.dmark)  
28b6 32 bd fb			ld (debug_mark),a  
28b9 3a c8 28			ld a, (.dmark+1)  
28bc 32 be fb			ld (debug_mark+1),a  
28bf 3a c9 28			ld a, (.dmark+2)  
28c2 32 bf fb			ld (debug_mark+2),a  
28c5 18 03			jr .pastdmark  
28c7 ..			.dmark: db "MON"  
28ca f1			.pastdmark: pop af  
28cb			endm  
# End of macro DMARK
28cb						CALLMONITOR 
28cb cd 2d 17			call break_point_state  
28ce				endm  
# End of macro CALLMONITOR
28ce					endif 
28ce 3e 00				ld a, 0 
28d0 32 94 ef				ld (os_view_disable), a 
28d3			 
28d3					CALLMONITOR 
28d3 cd 2d 17			call break_point_state  
28d6				endm  
# End of macro CALLMONITOR
28d6			 
28d6			;	call monitor 
28d6			 
28d6					NEXTW 
28d6 c3 26 20			jp macro_next 
28d9				endm 
# End of macro NEXTW
28d9			 
28d9			 
28d9			.MALLOC: 
28d9				CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
28d9 56				db WORD_SYS_CORE+66             
28da 02 29			dw .MALLOC2            
28dc 06				db 5 + 1 
28dd .. 00			db "ALLOT",0              
28e3				endm 
# End of macro CWHEAD
28e3			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
28e3					if DEBUG_FORTH_WORDS_KEY 
28e3						DMARK "ALL" 
28e3 f5				push af  
28e4 3a f8 28			ld a, (.dmark)  
28e7 32 bd fb			ld (debug_mark),a  
28ea 3a f9 28			ld a, (.dmark+1)  
28ed 32 be fb			ld (debug_mark+1),a  
28f0 3a fa 28			ld a, (.dmark+2)  
28f3 32 bf fb			ld (debug_mark+2),a  
28f6 18 03			jr .pastdmark  
28f8 ..			.dmark: db "ALL"  
28fb f1			.pastdmark: pop af  
28fc			endm  
# End of macro DMARK
28fc						CALLMONITOR 
28fc cd 2d 17			call break_point_state  
28ff				endm  
# End of macro CALLMONITOR
28ff					endif 
28ff c3 29 29				jp .mallocc 
2902			.MALLOC2: 
2902				CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2902 56				db WORD_SYS_CORE+66             
2903 40 29			dw .FREE            
2905 07				db 6 + 1 
2906 .. 00			db "MALLOC",0              
290d				endm 
# End of macro CWHEAD
290d			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
290d					; get byte count 
290d					if DEBUG_FORTH_WORDS_KEY 
290d						DMARK "MAL" 
290d f5				push af  
290e 3a 22 29			ld a, (.dmark)  
2911 32 bd fb			ld (debug_mark),a  
2914 3a 23 29			ld a, (.dmark+1)  
2917 32 be fb			ld (debug_mark+1),a  
291a 3a 24 29			ld a, (.dmark+2)  
291d 32 bf fb			ld (debug_mark+2),a  
2920 18 03			jr .pastdmark  
2922 ..			.dmark: db "MAL"  
2925 f1			.pastdmark: pop af  
2926			endm  
# End of macro DMARK
2926						CALLMONITOR 
2926 cd 2d 17			call break_point_state  
2929				endm  
# End of macro CALLMONITOR
2929					endif 
2929			.mallocc: 
2929					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2929 cd b4 1e			call macro_dsp_valuehl 
292c				endm 
# End of macro FORTH_DSP_VALUEHL
292c			 
292c			;		push hl 
292c			 
292c					; destroy value TOS 
292c			 
292c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
292c cd 6c 1f			call macro_forth_dsp_pop 
292f				endm 
# End of macro FORTH_DSP_POP
292f			 
292f			;		pop hl 
292f cd e1 11				call malloc 
2932				if DEBUG_FORTH_MALLOC_GUARD 
2932 f5					push af 
2933 cd 43 0d				call ishlzero 
2936			;		ld a, l 
2936			;		add h 
2936			;		cp 0 
2936 f1					pop af 
2937					 
2937 cc 93 51				call z,malloc_error 
293a				endif 
293a			 
293a cd bd 1c				call forth_push_numhl 
293d					NEXTW 
293d c3 26 20			jp macro_next 
2940				endm 
# End of macro NEXTW
2940			 
2940			.FREE: 
2940				CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2940 57				db WORD_SYS_CORE+67             
2941 71 29			dw .LIST            
2943 05				db 4 + 1 
2944 .. 00			db "FREE",0              
2949				endm 
# End of macro CWHEAD
2949			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2949					if DEBUG_FORTH_WORDS_KEY 
2949						DMARK "FRE" 
2949 f5				push af  
294a 3a 5e 29			ld a, (.dmark)  
294d 32 bd fb			ld (debug_mark),a  
2950 3a 5f 29			ld a, (.dmark+1)  
2953 32 be fb			ld (debug_mark+1),a  
2956 3a 60 29			ld a, (.dmark+2)  
2959 32 bf fb			ld (debug_mark+2),a  
295c 18 03			jr .pastdmark  
295e ..			.dmark: db "FRE"  
2961 f1			.pastdmark: pop af  
2962			endm  
# End of macro DMARK
2962						CALLMONITOR 
2962 cd 2d 17			call break_point_state  
2965				endm  
# End of macro CALLMONITOR
2965					endif 
2965					; get address 
2965			 
2965					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2965 cd b4 1e			call macro_dsp_valuehl 
2968				endm 
# End of macro FORTH_DSP_VALUEHL
2968			 
2968			;		push hl 
2968			 
2968					; destroy value TOS 
2968			 
2968					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2968 cd 6c 1f			call macro_forth_dsp_pop 
296b				endm 
# End of macro FORTH_DSP_POP
296b			 
296b			;		pop hl 
296b			if FORTH_ENABLE_MALLOCFREE 
296b cd ab 12				call free 
296e			endif 
296e					NEXTW 
296e c3 26 20			jp macro_next 
2971				endm 
# End of macro NEXTW
2971			.LIST: 
2971				CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2971 5c				db WORD_SYS_CORE+72             
2972 50 2b			dw .FORGET            
2974 05				db 4 + 1 
2975 .. 00			db "LIST",0              
297a				endm 
# End of macro CWHEAD
297a			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
297a			; | | The quoted word must be in upper case. 
297a				if DEBUG_FORTH_WORDS_KEY 
297a					DMARK "LST" 
297a f5				push af  
297b 3a 8f 29			ld a, (.dmark)  
297e 32 bd fb			ld (debug_mark),a  
2981 3a 90 29			ld a, (.dmark+1)  
2984 32 be fb			ld (debug_mark+1),a  
2987 3a 91 29			ld a, (.dmark+2)  
298a 32 bf fb			ld (debug_mark+2),a  
298d 18 03			jr .pastdmark  
298f ..			.dmark: db "LST"  
2992 f1			.pastdmark: pop af  
2993			endm  
# End of macro DMARK
2993					CALLMONITOR 
2993 cd 2d 17			call break_point_state  
2996				endm  
# End of macro CALLMONITOR
2996				endif 
2996			 
2996					FORTH_DSP_VALUEHL 
2996 cd b4 1e			call macro_dsp_valuehl 
2999				endm 
# End of macro FORTH_DSP_VALUEHL
2999			 
2999 e5					push hl 
299a c1					pop bc 
299b			 
299b			; Start format of scratch string 
299b			 
299b 21 a3 ef				ld hl, scratch 
299e			 
299e 3e 3a				ld a, ':' 
29a0 77					ld (hl),a 
29a1 23					inc hl 
29a2 3e 20				ld a, ' ' 
29a4 77					ld (hl), a 
29a5			 
29a5					; Get ptr to the word we need to look up 
29a5			 
29a5			;		FORTH_DSP_VALUEHL 
29a5					;v5 FORTH_DSP_VALUE 
29a5				; TODO type check 
29a5			;		inc hl    ; Skip type check  
29a5			;		push hl 
29a5			;		ex de, hl    ; put into DE 
29a5			 
29a5			 
29a5 21 00 80				ld hl, baseram 
29a8					;ld hl, baseusermem 
29a8			 
29a8 e5			push hl   ; sacreifical push 
29a9			 
29a9			.ldouscanm: 
29a9 e1				pop hl 
29aa			.ldouscan: 
29aa				if DEBUG_FORTH_WORDS 
29aa					DMARK "LSs" 
29aa f5				push af  
29ab 3a bf 29			ld a, (.dmark)  
29ae 32 bd fb			ld (debug_mark),a  
29b1 3a c0 29			ld a, (.dmark+1)  
29b4 32 be fb			ld (debug_mark+1),a  
29b7 3a c1 29			ld a, (.dmark+2)  
29ba 32 bf fb			ld (debug_mark+2),a  
29bd 18 03			jr .pastdmark  
29bf ..			.dmark: db "LSs"  
29c2 f1			.pastdmark: pop af  
29c3			endm  
# End of macro DMARK
29c3					CALLMONITOR 
29c3 cd 2d 17			call break_point_state  
29c6				endm  
# End of macro CALLMONITOR
29c6				endif 
29c6				; skip dict stub 
29c6 cd 77 21				call forth_tok_next 
29c9			 
29c9			 
29c9			; while we have words to look for 
29c9			 
29c9 7e				ld a, (hl)      
29ca				if DEBUG_FORTH_WORDS 
29ca					DMARK "LSk" 
29ca f5				push af  
29cb 3a df 29			ld a, (.dmark)  
29ce 32 bd fb			ld (debug_mark),a  
29d1 3a e0 29			ld a, (.dmark+1)  
29d4 32 be fb			ld (debug_mark+1),a  
29d7 3a e1 29			ld a, (.dmark+2)  
29da 32 bf fb			ld (debug_mark+2),a  
29dd 18 03			jr .pastdmark  
29df ..			.dmark: db "LSk"  
29e2 f1			.pastdmark: pop af  
29e3			endm  
# End of macro DMARK
29e3					CALLMONITOR 
29e3 cd 2d 17			call break_point_state  
29e6				endm  
# End of macro CALLMONITOR
29e6				endif 
29e6 fe 00				cp WORD_SYS_END 
29e8 ca 1b 2b				jp z, .lunotfound 
29eb fe 01				cp WORD_SYS_UWORD 
29ed c2 aa 29				jp nz, .ldouscan 
29f0			 
29f0				if DEBUG_FORTH_WORDS 
29f0					DMARK "LSu" 
29f0 f5				push af  
29f1 3a 05 2a			ld a, (.dmark)  
29f4 32 bd fb			ld (debug_mark),a  
29f7 3a 06 2a			ld a, (.dmark+1)  
29fa 32 be fb			ld (debug_mark+1),a  
29fd 3a 07 2a			ld a, (.dmark+2)  
2a00 32 bf fb			ld (debug_mark+2),a  
2a03 18 03			jr .pastdmark  
2a05 ..			.dmark: db "LSu"  
2a08 f1			.pastdmark: pop af  
2a09			endm  
# End of macro DMARK
2a09					CALLMONITOR 
2a09 cd 2d 17			call break_point_state  
2a0c				endm  
# End of macro CALLMONITOR
2a0c				endif 
2a0c			 
2a0c					; found a uword but is it the one we want... 
2a0c			 
2a0c c5					push bc     ; uword to find is on bc 
2a0d d1					pop de 
2a0e			 
2a0e e5					push hl  ; to save the ptr 
2a0f			 
2a0f					; skip opcode 
2a0f 23					inc hl  
2a10					; skip next ptr 
2a10 23					inc hl  
2a11 23					inc hl 
2a12					; skip len 
2a12 23					inc hl 
2a13			 
2a13				if DEBUG_FORTH_WORDS 
2a13					DMARK "LSc" 
2a13 f5				push af  
2a14 3a 28 2a			ld a, (.dmark)  
2a17 32 bd fb			ld (debug_mark),a  
2a1a 3a 29 2a			ld a, (.dmark+1)  
2a1d 32 be fb			ld (debug_mark+1),a  
2a20 3a 2a 2a			ld a, (.dmark+2)  
2a23 32 bf fb			ld (debug_mark+2),a  
2a26 18 03			jr .pastdmark  
2a28 ..			.dmark: db "LSc"  
2a2b f1			.pastdmark: pop af  
2a2c			endm  
# End of macro DMARK
2a2c					CALLMONITOR 
2a2c cd 2d 17			call break_point_state  
2a2f				endm  
# End of macro CALLMONITOR
2a2f				endif 
2a2f cd b0 11				call strcmp 
2a32 c2 a9 29				jp nz, .ldouscanm 
2a35				 
2a35			 
2a35			 
2a35					; we have a uword so push its name to the stack 
2a35			 
2a35			;	   	push hl  ; save so we can move to next dict block 
2a35 e1			pop hl 
2a36			 
2a36				if DEBUG_FORTH_WORDS 
2a36					DMARK "LSm" 
2a36 f5				push af  
2a37 3a 4b 2a			ld a, (.dmark)  
2a3a 32 bd fb			ld (debug_mark),a  
2a3d 3a 4c 2a			ld a, (.dmark+1)  
2a40 32 be fb			ld (debug_mark+1),a  
2a43 3a 4d 2a			ld a, (.dmark+2)  
2a46 32 bf fb			ld (debug_mark+2),a  
2a49 18 03			jr .pastdmark  
2a4b ..			.dmark: db "LSm"  
2a4e f1			.pastdmark: pop af  
2a4f			endm  
# End of macro DMARK
2a4f					CALLMONITOR 
2a4f cd 2d 17			call break_point_state  
2a52				endm  
# End of macro CALLMONITOR
2a52				endif 
2a52			 
2a52					; skip opcode 
2a52 23					inc hl  
2a53					; skip next ptr 
2a53 23					inc hl  
2a54 23					inc hl 
2a55					; skip len 
2a55 7e					ld a, (hl)   ; save length to add 
2a56				if DEBUG_FORTH_WORDS 
2a56					DMARK "LS2" 
2a56 f5				push af  
2a57 3a 6b 2a			ld a, (.dmark)  
2a5a 32 bd fb			ld (debug_mark),a  
2a5d 3a 6c 2a			ld a, (.dmark+1)  
2a60 32 be fb			ld (debug_mark+1),a  
2a63 3a 6d 2a			ld a, (.dmark+2)  
2a66 32 bf fb			ld (debug_mark+2),a  
2a69 18 03			jr .pastdmark  
2a6b ..			.dmark: db "LS2"  
2a6e f1			.pastdmark: pop af  
2a6f			endm  
# End of macro DMARK
2a6f					CALLMONITOR 
2a6f cd 2d 17			call break_point_state  
2a72				endm  
# End of macro CALLMONITOR
2a72				endif 
2a72			 
2a72					; save this location 
2a72				 
2a72 e5					push hl 
2a73			 
2a73 23					inc hl 
2a74 11 a5 ef				ld de, scratch+2 
2a77 4f					ld c, a 
2a78 06 00				ld b, 0 
2a7a			 
2a7a				if DEBUG_FORTH_WORDS 
2a7a					DMARK "LSn" 
2a7a f5				push af  
2a7b 3a 8f 2a			ld a, (.dmark)  
2a7e 32 bd fb			ld (debug_mark),a  
2a81 3a 90 2a			ld a, (.dmark+1)  
2a84 32 be fb			ld (debug_mark+1),a  
2a87 3a 91 2a			ld a, (.dmark+2)  
2a8a 32 bf fb			ld (debug_mark+2),a  
2a8d 18 03			jr .pastdmark  
2a8f ..			.dmark: db "LSn"  
2a92 f1			.pastdmark: pop af  
2a93			endm  
# End of macro DMARK
2a93					CALLMONITOR 
2a93 cd 2d 17			call break_point_state  
2a96				endm  
# End of macro CALLMONITOR
2a96				endif 
2a96			 
2a96					; copy uword name to scratch 
2a96			 
2a96 ed b0				ldir 
2a98			 
2a98 1b					dec de 
2a99 3e 20				ld a, ' '    ; change null to space 
2a9b 12					ld (de), a 
2a9c			 
2a9c 13					inc de 
2a9d			 
2a9d d5					push de 
2a9e c1					pop bc     ; move scratch pointer to end of word name and save it 
2a9f			 
2a9f e1					pop hl 
2aa0 7e					ld a, (hl) 
2aa1					;inc hl 
2aa1					; skip word string 
2aa1 cd 1a 0d				call addatohl 
2aa4			 
2aa4 23					inc hl 
2aa5			 
2aa5				if DEBUG_FORTH_WORDS 
2aa5					DMARK "LS3" 
2aa5 f5				push af  
2aa6 3a ba 2a			ld a, (.dmark)  
2aa9 32 bd fb			ld (debug_mark),a  
2aac 3a bb 2a			ld a, (.dmark+1)  
2aaf 32 be fb			ld (debug_mark+1),a  
2ab2 3a bc 2a			ld a, (.dmark+2)  
2ab5 32 bf fb			ld (debug_mark+2),a  
2ab8 18 03			jr .pastdmark  
2aba ..			.dmark: db "LS3"  
2abd f1			.pastdmark: pop af  
2abe			endm  
# End of macro DMARK
2abe					CALLMONITOR 
2abe cd 2d 17			call break_point_state  
2ac1				endm  
# End of macro CALLMONITOR
2ac1				endif 
2ac1					; should now be at the start of the machine code to setup the eval of the uword 
2ac1					; now locate the ptr to the string defintion 
2ac1			 
2ac1					; skip ld hl, 
2ac1					; then load the ptr 
2ac1			 
2ac1 23					inc hl 
2ac2 5e					ld e, (hl) 
2ac3 23					inc hl 
2ac4 56					ld d, (hl) 
2ac5 eb					ex de, hl 
2ac6			 
2ac6			 
2ac6				if DEBUG_FORTH_WORDS 
2ac6					DMARK "LSt" 
2ac6 f5				push af  
2ac7 3a db 2a			ld a, (.dmark)  
2aca 32 bd fb			ld (debug_mark),a  
2acd 3a dc 2a			ld a, (.dmark+1)  
2ad0 32 be fb			ld (debug_mark+1),a  
2ad3 3a dd 2a			ld a, (.dmark+2)  
2ad6 32 bf fb			ld (debug_mark+2),a  
2ad9 18 03			jr .pastdmark  
2adb ..			.dmark: db "LSt"  
2ade f1			.pastdmark: pop af  
2adf			endm  
# End of macro DMARK
2adf					CALLMONITOR 
2adf cd 2d 17			call break_point_state  
2ae2				endm  
# End of macro CALLMONITOR
2ae2				endif 
2ae2			 
2ae2			; cant push right now due to tokenised strings  
2ae2			 
2ae2			; get the destination of where to copy this definition to. 
2ae2			 
2ae2 c5					push bc 
2ae3 d1					pop de 
2ae4			 
2ae4 7e			.listl:         ld a,(hl) 
2ae5 fe 00				cp 0 
2ae7 28 09				jr z, .lreplsp     ; replace zero with space 
2ae9 fe 7f				cp FORTH_END_BUFFER 
2aeb 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2aed				 
2aed					; just copy this char as is then 
2aed			 
2aed 12					ld (de), a 
2aee			 
2aee 23			.listnxt:	inc hl 
2aef 13					inc de 
2af0 18 f2				jr .listl 
2af2			 
2af2 3e 20		.lreplsp:	ld a,' ' 
2af4 12					ld (de), a 
2af5 18 f7				jr .listnxt 
2af7			 
2af7			; close up uword def 
2af7			 
2af7			.listdone: 
2af7 3e 00				ld a, 0 
2af9 12					ld (de), a 
2afa			 
2afa			; now have def so clean up and push to stack 
2afa			 
2afa 21 a3 ef				ld hl, scratch 
2afd				if DEBUG_FORTH_WORDS 
2afd					DMARK "Ltp" 
2afd f5				push af  
2afe 3a 12 2b			ld a, (.dmark)  
2b01 32 bd fb			ld (debug_mark),a  
2b04 3a 13 2b			ld a, (.dmark+1)  
2b07 32 be fb			ld (debug_mark+1),a  
2b0a 3a 14 2b			ld a, (.dmark+2)  
2b0d 32 bf fb			ld (debug_mark+2),a  
2b10 18 03			jr .pastdmark  
2b12 ..			.dmark: db "Ltp"  
2b15 f1			.pastdmark: pop af  
2b16			endm  
# End of macro DMARK
2b16					CALLMONITOR 
2b16 cd 2d 17			call break_point_state  
2b19				endm  
# End of macro CALLMONITOR
2b19				endif 
2b19			 
2b19 18 22			jr .listpush 
2b1b			 
2b1b			;.lnuword:	pop hl 
2b1b			;		call forth_tok_next 
2b1b			;		jp .ldouscan  
2b1b			 
2b1b			.lunotfound:		  
2b1b			 
2b1b				if DEBUG_FORTH_WORDS 
2b1b					DMARK "LSn" 
2b1b f5				push af  
2b1c 3a 30 2b			ld a, (.dmark)  
2b1f 32 bd fb			ld (debug_mark),a  
2b22 3a 31 2b			ld a, (.dmark+1)  
2b25 32 be fb			ld (debug_mark+1),a  
2b28 3a 32 2b			ld a, (.dmark+2)  
2b2b 32 bf fb			ld (debug_mark+2),a  
2b2e 18 03			jr .pastdmark  
2b30 ..			.dmark: db "LSn"  
2b33 f1			.pastdmark: pop af  
2b34			endm  
# End of macro DMARK
2b34					CALLMONITOR 
2b34 cd 2d 17			call break_point_state  
2b37				endm  
# End of macro CALLMONITOR
2b37				endif 
2b37			 
2b37					 
2b37					FORTH_DSP_POP 
2b37 cd 6c 1f			call macro_forth_dsp_pop 
2b3a				endm 
# End of macro FORTH_DSP_POP
2b3a 21 43 2b				ld hl, .luno 
2b3d						 
2b3d			 
2b3d			.listpush: 
2b3d cd 2b 1d				call forth_push_str 
2b40			 
2b40			 
2b40			 
2b40					NEXTW 
2b40 c3 26 20			jp macro_next 
2b43				endm 
# End of macro NEXTW
2b43			 
2b43 .. 00		.luno:    db "Not found",0 
2b4d			 
2b4d			 
2b4d			 
2b4d			 
2b4d			 
2b4d			;		push hl   ; save pointer to start of uword def string 
2b4d			; 
2b4d			;; look for FORTH_EOL_LINE 
2b4d			;		ld a, FORTH_END_BUFFER 
2b4d			;		call strlent 
2b4d			; 
2b4d			;		inc hl		 ; space for coln def 
2b4d			;		inc hl 
2b4d			;		inc hl          ; space for terms 
2b4d			;		inc hl 
2b4d			; 
2b4d			;		ld a, 20   ; TODO get actual length 
2b4d			;		call addatohl    ; include a random amount of room for the uword name 
2b4d			; 
2b4d			;		 
2b4d			;	if DEBUG_FORTH_WORDS 
2b4d			;		DMARK "Lt1" 
2b4d			;		CALLMONITOR 
2b4d			;	endif 
2b4d			;		 
2b4d			; 
2b4d			;; malloc space for the string because we cant change it 
2b4d			; 
2b4d			;		call malloc 
2b4d			;	if DEBUG_FORTH_MALLOC_GUARD 
2b4d			;		push af 
2b4d			;		call ishlzero 
2b4d			;		pop af 
2b4d			;		 
2b4d			;		call z,malloc_error 
2b4d			;	endif 
2b4d			; 
2b4d			;	if DEBUG_FORTH_WORDS 
2b4d			;		DMARK "Lt2" 
2b4d			;		CALLMONITOR 
2b4d			;	endif 
2b4d			;		pop de 
2b4d			;		push hl    ; push the malloc to release later 
2b4d			;		push hl   ;  push back a copy for the later stack push 
2b4d			;		 
2b4d			;; copy the string swapping out the zero terms for spaces 
2b4d			; 
2b4d			;		; de has our source 
2b4d			;		; hl has our dest 
2b4d			; 
2b4d			;; add the coln def 
2b4d			; 
2b4d			;		ld a, ':' 
2b4d			;		ld (hl), a 
2b4d			;		inc hl 
2b4d			;		ld a, ' ' 
2b4d			;		ld (hl), a 
2b4d			;		inc hl 
2b4d			; 
2b4d			;; add the uname word 
2b4d			;		push de   ; save our string for now 
2b4d			;		ex de, hl 
2b4d			; 
2b4d			;		FORTH_DSP_VALUE 
2b4d			;		;v5 FORTH_DSP_VALUE 
2b4d			; 
2b4d			;		inc hl   ; skip type but we know by now this is OK 
2b4d			; 
2b4d			;.luword:	ld a,(hl) 
2b4d			;		cp 0 
2b4d			;		jr z, .luword2 
2b4d			;		ld (de), a 
2b4d			;		inc de 
2b4d			;		inc hl 
2b4d			;		jr .luword 
2b4d			; 
2b4d			;.luword2:	ld a, ' ' 
2b4d			;		ld (de), a 
2b4d			;;		inc hl 
2b4d			;;		inc de 
2b4d			;;		ld (de), a 
2b4d			;;		inc hl 
2b4d			;		inc de 
2b4d			; 
2b4d			;		ex de, hl 
2b4d			;		pop de 
2b4d			;		 
2b4d			;		 
2b4d			; 
2b4d			;; detoken that string and copy it 
2b4d			; 
2b4d			;	if DEBUG_FORTH_WORDS 
2b4d			;		DMARK "Lt2" 
2b4d			;		CALLMONITOR 
2b4d			;	endif 
2b4d			;.ldetok:	ld a, (de) 
2b4d			;		cp FORTH_END_BUFFER 
2b4d			;		jr z, .ldetokend 
2b4d			;		; swap out any zero term for space 
2b4d			;		cp 0 
2b4d			;		jr nz, .ldetoknext 
2b4d			;		ld a, ' ' 
2b4d			; 
2b4d			;	if DEBUG_FORTH_WORDS 
2b4d			;		DMARK "LtS" 
2b4d			;		CALLMONITOR 
2b4d			;	endif 
2b4d			;.ldetoknext:	ld (hl), a 
2b4d			;		inc de 
2b4d			;		inc hl 
2b4d			;		jr .ldetok 
2b4d			; 
2b4d			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2b4d			;		ld (hl), a  
2b4d			; 
2b4d			;; free that temp malloc 
2b4d			; 
2b4d			;		pop hl    
2b4d			; 
2b4d			;	if DEBUG_FORTH_WORDS 
2b4d			;		DMARK "Lt4" 
2b4d			;		CALLMONITOR 
2b4d			;	endif 
2b4d			;		call forth_apushstrhl 
2b4d			; 
2b4d			;		; get rid of temp malloc area 
2b4d			; 
2b4d			;		pop hl 
2b4d			;		call free 
2b4d			; 
2b4d			;		jr .ludone 
2b4d			; 
2b4d			;.lnuword:	pop hl 
2b4d			;		call forth_tok_next 
2b4d			;		jp .ldouscan  
2b4d			; 
2b4d			;.ludone:		 pop hl 
2b4d			; 
2b4d					NEXTW 
2b4d c3 26 20			jp macro_next 
2b50				endm 
# End of macro NEXTW
2b50			 
2b50			.FORGET: 
2b50				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2b50 5d				db WORD_SYS_CORE+73             
2b51 c9 2b			dw .NOP            
2b53 07				db 6 + 1 
2b54 .. 00			db "FORGET",0              
2b5b				endm 
# End of macro CWHEAD
2b5b			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2b5b			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quote uword name must be in caps. 
2b5b			; | |  
2b5b			; | | e.g. "MORE" forget 
2b5b					if DEBUG_FORTH_WORDS_KEY 
2b5b						DMARK "FRG" 
2b5b f5				push af  
2b5c 3a 70 2b			ld a, (.dmark)  
2b5f 32 bd fb			ld (debug_mark),a  
2b62 3a 71 2b			ld a, (.dmark+1)  
2b65 32 be fb			ld (debug_mark+1),a  
2b68 3a 72 2b			ld a, (.dmark+2)  
2b6b 32 bf fb			ld (debug_mark+2),a  
2b6e 18 03			jr .pastdmark  
2b70 ..			.dmark: db "FRG"  
2b73 f1			.pastdmark: pop af  
2b74			endm  
# End of macro DMARK
2b74						CALLMONITOR 
2b74 cd 2d 17			call break_point_state  
2b77				endm  
# End of macro CALLMONITOR
2b77					endif 
2b77			 
2b77				; find uword 
2b77			        ; update start of word with "_" 
2b77				; replace uword with deleted flag 
2b77			 
2b77			 
2b77			;	if DEBUG_FORTH_WORDS 
2b77			;		DMARK "FOG" 
2b77			;		CALLMONITOR 
2b77			;	endif 
2b77			 
2b77			 
2b77					; Get ptr to the word we need to look up 
2b77			 
2b77					FORTH_DSP_VALUEHL 
2b77 cd b4 1e			call macro_dsp_valuehl 
2b7a				endm 
# End of macro FORTH_DSP_VALUEHL
2b7a					;v5 FORTH_DSP_VALUE 
2b7a				; TODO type check 
2b7a			;		inc hl    ; Skip type check  
2b7a e5					push hl 
2b7b c1					pop bc 
2b7c			;		ex de, hl    ; put into DE 
2b7c			 
2b7c			 
2b7c 21 00 80				ld hl, baseram 
2b7f					;ld hl, baseusermem 
2b7f			 
2b7f				; skip dict stub 
2b7f			;	call forth_tok_next 
2b7f e5			push hl   ; sacreifical push 
2b80			 
2b80			.fldouscanm: 
2b80 e1				pop hl 
2b81			.fldouscan: 
2b81			;	if DEBUG_FORTH_WORDS 
2b81			;		DMARK "LSs" 
2b81			;		CALLMONITOR 
2b81			;	endif 
2b81				; skip dict stub 
2b81 cd 77 21				call forth_tok_next 
2b84			 
2b84			 
2b84			; while we have words to look for 
2b84			 
2b84 7e				ld a, (hl)      
2b85			;	if DEBUG_FORTH_WORDS 
2b85			;		DMARK "LSk" 
2b85			;		CALLMONITOR 
2b85			;	endif 
2b85 fe 00				cp WORD_SYS_END 
2b87 ca c3 2b				jp z, .flunotfound 
2b8a fe 01				cp WORD_SYS_UWORD 
2b8c c2 81 2b				jp nz, .fldouscan 
2b8f			 
2b8f			;	if DEBUG_FORTH_WORDS 
2b8f			;		DMARK "LSu" 
2b8f			;		CALLMONITOR 
2b8f			;	endif 
2b8f			 
2b8f					; found a uword but is it the one we want... 
2b8f			 
2b8f c5					push bc     ; uword to find is on bc 
2b90 d1					pop de 
2b91			 
2b91 e5					push hl  ; to save the ptr 
2b92			 
2b92					; skip opcode 
2b92 23					inc hl  
2b93					; skip next ptr 
2b93 23					inc hl  
2b94 23					inc hl 
2b95					; skip len 
2b95 23					inc hl 
2b96			 
2b96			;	if DEBUG_FORTH_WORDS 
2b96			;		DMARK "LSc" 
2b96			;		CALLMONITOR 
2b96			;	endif 
2b96 cd b0 11				call strcmp 
2b99 c2 80 2b				jp nz, .fldouscanm 
2b9c			; 
2b9c			; 
2b9c			;; while we have words to look for 
2b9c			; 
2b9c			;.fdouscan:	ld a, (hl)      
2b9c			;	if DEBUG_FORTH_WORDS 
2b9c			;		DMARK "LSs" 
2b9c			;		CALLMONITOR 
2b9c			;	endif 
2b9c			;		cp WORD_SYS_END 
2b9c			;		jp z, .fudone 
2b9c			;		cp WORD_SYS_UWORD 
2b9c			;		jp nz, .fnuword 
2b9c			; 
2b9c			;	if DEBUG_FORTH_WORDS 
2b9c			;		DMARK "FGu" 
2b9c			;		CALLMONITOR 
2b9c			;	endif 
2b9c			; 
2b9c			;		; found a uword but is it the one we want... 
2b9c			; 
2b9c			; 
2b9c			;	        pop de   ; get back the dsp name 
2b9c			;		push de 
2b9c			; 
2b9c			;		push hl  ; to save the ptr 
2b9c			; 
2b9c			;		; skip opcode 
2b9c			;		inc hl  
2b9c			;		; skip next ptr 
2b9c			;		inc hl  
2b9c			;		inc hl 
2b9c			;		; skip len 
2b9c			;		inc hl 
2b9c			; 
2b9c			;	if DEBUG_FORTH_WORDS 
2b9c			;		DMARK "FGc" 
2b9c			;		CALLMONITOR 
2b9c			;	endif 
2b9c			;		call strcmp 
2b9c			;		jp nz, .fnuword 
2b9c			 
2b9c			 
2b9c e1			pop hl 
2b9d			 
2b9d				 
2b9d				if DEBUG_FORTH_WORDS 
2b9d					DMARK "FGm" 
2b9d f5				push af  
2b9e 3a b2 2b			ld a, (.dmark)  
2ba1 32 bd fb			ld (debug_mark),a  
2ba4 3a b3 2b			ld a, (.dmark+1)  
2ba7 32 be fb			ld (debug_mark+1),a  
2baa 3a b4 2b			ld a, (.dmark+2)  
2bad 32 bf fb			ld (debug_mark+2),a  
2bb0 18 03			jr .pastdmark  
2bb2 ..			.dmark: db "FGm"  
2bb5 f1			.pastdmark: pop af  
2bb6			endm  
# End of macro DMARK
2bb6					CALLMONITOR 
2bb6 cd 2d 17			call break_point_state  
2bb9				endm  
# End of macro CALLMONITOR
2bb9				endif 
2bb9			 
2bb9			 
2bb9			 
2bb9					; we have a uword so push its name to the stack 
2bb9			 
2bb9			;	   	push hl  ; save so we can move to next dict block 
2bb9			;pop hl 
2bb9			 
2bb9					; update opcode to deleted 
2bb9 3e 03				ld a, WORD_SYS_DELETED 
2bbb 77					ld (hl), a 
2bbc			 
2bbc 23					inc hl  
2bbd					; skip next ptr 
2bbd 23					inc hl  
2bbe 23					inc hl 
2bbf					; skip len 
2bbf 23					inc hl 
2bc0			 
2bc0					; TODO change parser to skip deleted words but for now mark it out 
2bc0 3e 5f				ld a, "_" 
2bc2 77					ld  (hl),a 
2bc3			 
2bc3			;		jr .fudone 
2bc3			; 
2bc3			;.fnuword:	pop hl 
2bc3			;		call forth_tok_next 
2bc3			;		jp .fdouscan  
2bc3			 
2bc3			.flunotfound:		  
2bc3			 
2bc3			 
2bc3					 
2bc3					FORTH_DSP_POP 
2bc3 cd 6c 1f			call macro_forth_dsp_pop 
2bc6				endm 
# End of macro FORTH_DSP_POP
2bc6			;		ld hl, .luno 
2bc6			;.fudone:		 pop hl 
2bc6					NEXTW 
2bc6 c3 26 20			jp macro_next 
2bc9				endm 
# End of macro NEXTW
2bc9			.NOP: 
2bc9				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2bc9 61				db WORD_SYS_CORE+77             
2bca f0 2b			dw .COMO            
2bcc 04				db 3 + 1 
2bcd .. 00			db "NOP",0              
2bd1				endm 
# End of macro CWHEAD
2bd1			; | NOP (  --  ) Do nothing | DONE 
2bd1					if DEBUG_FORTH_WORDS_KEY 
2bd1						DMARK "NOP" 
2bd1 f5				push af  
2bd2 3a e6 2b			ld a, (.dmark)  
2bd5 32 bd fb			ld (debug_mark),a  
2bd8 3a e7 2b			ld a, (.dmark+1)  
2bdb 32 be fb			ld (debug_mark+1),a  
2bde 3a e8 2b			ld a, (.dmark+2)  
2be1 32 bf fb			ld (debug_mark+2),a  
2be4 18 03			jr .pastdmark  
2be6 ..			.dmark: db "NOP"  
2be9 f1			.pastdmark: pop af  
2bea			endm  
# End of macro DMARK
2bea						CALLMONITOR 
2bea cd 2d 17			call break_point_state  
2bed				endm  
# End of macro CALLMONITOR
2bed					endif 
2bed				       NEXTW 
2bed c3 26 20			jp macro_next 
2bf0				endm 
# End of macro NEXTW
2bf0			.COMO: 
2bf0				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2bf0 6e				db WORD_SYS_CORE+90             
2bf1 42 2c			dw .COMC            
2bf3 02				db 1 + 1 
2bf4 .. 00			db "(",0              
2bf6				endm 
# End of macro CWHEAD
2bf6			; | ( ( -- )  Start of comment | DONE 
2bf6			 
2bf6			 
2bf6 2a a4 f2				ld hl, ( os_tok_ptr) 
2bf9 11 3d 2c			ld de, .closepar 
2bfc					 
2bfc					if DEBUG_FORTH_WORDS 
2bfc						DMARK ").." 
2bfc f5				push af  
2bfd 3a 11 2c			ld a, (.dmark)  
2c00 32 bd fb			ld (debug_mark),a  
2c03 3a 12 2c			ld a, (.dmark+1)  
2c06 32 be fb			ld (debug_mark+1),a  
2c09 3a 13 2c			ld a, (.dmark+2)  
2c0c 32 bf fb			ld (debug_mark+2),a  
2c0f 18 03			jr .pastdmark  
2c11 ..			.dmark: db ").."  
2c14 f1			.pastdmark: pop af  
2c15			endm  
# End of macro DMARK
2c15						CALLMONITOR 
2c15 cd 2d 17			call break_point_state  
2c18				endm  
# End of macro CALLMONITOR
2c18					endif 
2c18 cd 41 21			call findnexttok  
2c1b			 
2c1b					if DEBUG_FORTH_WORDS 
2c1b						DMARK "IF5" 
2c1b f5				push af  
2c1c 3a 30 2c			ld a, (.dmark)  
2c1f 32 bd fb			ld (debug_mark),a  
2c22 3a 31 2c			ld a, (.dmark+1)  
2c25 32 be fb			ld (debug_mark+1),a  
2c28 3a 32 2c			ld a, (.dmark+2)  
2c2b 32 bf fb			ld (debug_mark+2),a  
2c2e 18 03			jr .pastdmark  
2c30 ..			.dmark: db "IF5"  
2c33 f1			.pastdmark: pop af  
2c34			endm  
# End of macro DMARK
2c34						CALLMONITOR 
2c34 cd 2d 17			call break_point_state  
2c37				endm  
# End of macro CALLMONITOR
2c37					endif 
2c37				; replace below with ) exec using tok_ptr 
2c37 22 a4 f2			ld (os_tok_ptr), hl 
2c3a c3 b7 20			jp exec1 
2c3d			 
2c3d .. 00			.closepar:   db ")",0 
2c3f			 
2c3f				       NEXTW 
2c3f c3 26 20			jp macro_next 
2c42				endm 
# End of macro NEXTW
2c42			.COMC: 
2c42				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2c42 6f				db WORD_SYS_CORE+91             
2c43 4b 2c			dw .SCRATCH            
2c45 02				db 1 + 1 
2c46 .. 00			db ")",0              
2c48				endm 
# End of macro CWHEAD
2c48			; | ) ( -- )  End of comment |  DONE  
2c48				       NEXTW 
2c48 c3 26 20			jp macro_next 
2c4b				endm 
# End of macro NEXTW
2c4b			 
2c4b			.SCRATCH: 
2c4b				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2c4b 6f				db WORD_SYS_CORE+91             
2c4c 86 2c			dw .INC            
2c4e 08				db 7 + 1 
2c4f .. 00			db "SCRATCH",0              
2c57				endm 
# End of macro CWHEAD
2c57			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2c57			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2c57			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2c57			; | |  
2c57			; | | e.g.    : score $00 scratch ; 
2c57			; | |  
2c57			; | | $00 score ! 
2c57			; | | $01 score +! 
2c57			; | |  
2c57			; | | e.g.   : varword $0a scratch ;  
2c57			; | | 
2c57			; | | $8000 varword ! 
2c57					if DEBUG_FORTH_WORDS_KEY 
2c57						DMARK "SCR" 
2c57 f5				push af  
2c58 3a 6c 2c			ld a, (.dmark)  
2c5b 32 bd fb			ld (debug_mark),a  
2c5e 3a 6d 2c			ld a, (.dmark+1)  
2c61 32 be fb			ld (debug_mark+1),a  
2c64 3a 6e 2c			ld a, (.dmark+2)  
2c67 32 bf fb			ld (debug_mark+2),a  
2c6a 18 03			jr .pastdmark  
2c6c ..			.dmark: db "SCR"  
2c6f f1			.pastdmark: pop af  
2c70			endm  
# End of macro DMARK
2c70						CALLMONITOR 
2c70 cd 2d 17			call break_point_state  
2c73				endm  
# End of macro CALLMONITOR
2c73					endif 
2c73			 
2c73					FORTH_DSP_VALUEHL 
2c73 cd b4 1e			call macro_dsp_valuehl 
2c76				endm 
# End of macro FORTH_DSP_VALUEHL
2c76				 
2c76					FORTH_DSP_POP 
2c76 cd 6c 1f			call macro_forth_dsp_pop 
2c79				endm 
# End of macro FORTH_DSP_POP
2c79			 
2c79 7d					ld a, l 
2c7a 21 c8 f4				ld hl, os_var_array 
2c7d cd 1a 0d				call addatohl 
2c80			 
2c80 cd bd 1c				call forth_push_numhl 
2c83			 
2c83				       NEXTW 
2c83 c3 26 20			jp macro_next 
2c86				endm 
# End of macro NEXTW
2c86			 
2c86			.INC: 
2c86				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2c86 6f				db WORD_SYS_CORE+91             
2c87 da 2c			dw .DEC            
2c89 03				db 2 + 1 
2c8a .. 00			db "+!",0              
2c8d				endm 
# End of macro CWHEAD
2c8d			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2c8d					if DEBUG_FORTH_WORDS_KEY 
2c8d						DMARK "+s_" 
2c8d f5				push af  
2c8e 3a a2 2c			ld a, (.dmark)  
2c91 32 bd fb			ld (debug_mark),a  
2c94 3a a3 2c			ld a, (.dmark+1)  
2c97 32 be fb			ld (debug_mark+1),a  
2c9a 3a a4 2c			ld a, (.dmark+2)  
2c9d 32 bf fb			ld (debug_mark+2),a  
2ca0 18 03			jr .pastdmark  
2ca2 ..			.dmark: db "+s_"  
2ca5 f1			.pastdmark: pop af  
2ca6			endm  
# End of macro DMARK
2ca6						CALLMONITOR 
2ca6 cd 2d 17			call break_point_state  
2ca9				endm  
# End of macro CALLMONITOR
2ca9					endif 
2ca9			 
2ca9					FORTH_DSP_VALUEHL 
2ca9 cd b4 1e			call macro_dsp_valuehl 
2cac				endm 
# End of macro FORTH_DSP_VALUEHL
2cac			 
2cac e5					push hl   ; save address 
2cad			 
2cad					FORTH_DSP_POP 
2cad cd 6c 1f			call macro_forth_dsp_pop 
2cb0				endm 
# End of macro FORTH_DSP_POP
2cb0			 
2cb0					FORTH_DSP_VALUEHL 
2cb0 cd b4 1e			call macro_dsp_valuehl 
2cb3				endm 
# End of macro FORTH_DSP_VALUEHL
2cb3			 
2cb3					FORTH_DSP_POP 
2cb3 cd 6c 1f			call macro_forth_dsp_pop 
2cb6				endm 
# End of macro FORTH_DSP_POP
2cb6			 
2cb6					; hl contains value to add to byte at a 
2cb6				 
2cb6 eb					ex de, hl 
2cb7			 
2cb7 e1					pop hl 
2cb8			 
2cb8					if DEBUG_FORTH_WORDS 
2cb8						DMARK "INC" 
2cb8 f5				push af  
2cb9 3a cd 2c			ld a, (.dmark)  
2cbc 32 bd fb			ld (debug_mark),a  
2cbf 3a ce 2c			ld a, (.dmark+1)  
2cc2 32 be fb			ld (debug_mark+1),a  
2cc5 3a cf 2c			ld a, (.dmark+2)  
2cc8 32 bf fb			ld (debug_mark+2),a  
2ccb 18 03			jr .pastdmark  
2ccd ..			.dmark: db "INC"  
2cd0 f1			.pastdmark: pop af  
2cd1			endm  
# End of macro DMARK
2cd1						CALLMONITOR 
2cd1 cd 2d 17			call break_point_state  
2cd4				endm  
# End of macro CALLMONITOR
2cd4					endif 
2cd4			 
2cd4 7e					ld a,(hl) 
2cd5 83					add e 
2cd6 77					ld (hl),a 
2cd7			 
2cd7			 
2cd7			 
2cd7				       NEXTW 
2cd7 c3 26 20			jp macro_next 
2cda				endm 
# End of macro NEXTW
2cda			 
2cda			.DEC: 
2cda				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2cda 6f				db WORD_SYS_CORE+91             
2cdb 2b 2d			dw .INC2            
2cdd 03				db 2 + 1 
2cde .. 00			db "-!",0              
2ce1				endm 
# End of macro CWHEAD
2ce1			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2ce1					if DEBUG_FORTH_WORDS_KEY 
2ce1						DMARK "-s_" 
2ce1 f5				push af  
2ce2 3a f6 2c			ld a, (.dmark)  
2ce5 32 bd fb			ld (debug_mark),a  
2ce8 3a f7 2c			ld a, (.dmark+1)  
2ceb 32 be fb			ld (debug_mark+1),a  
2cee 3a f8 2c			ld a, (.dmark+2)  
2cf1 32 bf fb			ld (debug_mark+2),a  
2cf4 18 03			jr .pastdmark  
2cf6 ..			.dmark: db "-s_"  
2cf9 f1			.pastdmark: pop af  
2cfa			endm  
# End of macro DMARK
2cfa						CALLMONITOR 
2cfa cd 2d 17			call break_point_state  
2cfd				endm  
# End of macro CALLMONITOR
2cfd					endif 
2cfd			 
2cfd					FORTH_DSP_VALUEHL 
2cfd cd b4 1e			call macro_dsp_valuehl 
2d00				endm 
# End of macro FORTH_DSP_VALUEHL
2d00			 
2d00 e5					push hl   ; save address 
2d01			 
2d01					FORTH_DSP_POP 
2d01 cd 6c 1f			call macro_forth_dsp_pop 
2d04				endm 
# End of macro FORTH_DSP_POP
2d04			 
2d04					FORTH_DSP_VALUEHL 
2d04 cd b4 1e			call macro_dsp_valuehl 
2d07				endm 
# End of macro FORTH_DSP_VALUEHL
2d07			 
2d07					; hl contains value to add to byte at a 
2d07				 
2d07 eb					ex de, hl 
2d08			 
2d08 e1					pop hl 
2d09			 
2d09					if DEBUG_FORTH_WORDS 
2d09						DMARK "DEC" 
2d09 f5				push af  
2d0a 3a 1e 2d			ld a, (.dmark)  
2d0d 32 bd fb			ld (debug_mark),a  
2d10 3a 1f 2d			ld a, (.dmark+1)  
2d13 32 be fb			ld (debug_mark+1),a  
2d16 3a 20 2d			ld a, (.dmark+2)  
2d19 32 bf fb			ld (debug_mark+2),a  
2d1c 18 03			jr .pastdmark  
2d1e ..			.dmark: db "DEC"  
2d21 f1			.pastdmark: pop af  
2d22			endm  
# End of macro DMARK
2d22						CALLMONITOR 
2d22 cd 2d 17			call break_point_state  
2d25				endm  
# End of macro CALLMONITOR
2d25					endif 
2d25			 
2d25 7e					ld a,(hl) 
2d26 93					sub e 
2d27 77					ld (hl),a 
2d28			 
2d28			 
2d28			 
2d28				       NEXTW 
2d28 c3 26 20			jp macro_next 
2d2b				endm 
# End of macro NEXTW
2d2b			 
2d2b			.INC2: 
2d2b				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2d2b 6f				db WORD_SYS_CORE+91             
2d2c d5 2d			dw .DEC2            
2d2e 04				db 3 + 1 
2d2f .. 00			db "+2!",0              
2d33				endm 
# End of macro CWHEAD
2d33			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2d33			 
2d33					if DEBUG_FORTH_WORDS_KEY 
2d33						DMARK "+2s" 
2d33 f5				push af  
2d34 3a 48 2d			ld a, (.dmark)  
2d37 32 bd fb			ld (debug_mark),a  
2d3a 3a 49 2d			ld a, (.dmark+1)  
2d3d 32 be fb			ld (debug_mark+1),a  
2d40 3a 4a 2d			ld a, (.dmark+2)  
2d43 32 bf fb			ld (debug_mark+2),a  
2d46 18 03			jr .pastdmark  
2d48 ..			.dmark: db "+2s"  
2d4b f1			.pastdmark: pop af  
2d4c			endm  
# End of macro DMARK
2d4c						CALLMONITOR 
2d4c cd 2d 17			call break_point_state  
2d4f				endm  
# End of macro CALLMONITOR
2d4f					endif 
2d4f			 
2d4f					; Address 
2d4f			 
2d4f					FORTH_DSP_VALUEHL 
2d4f cd b4 1e			call macro_dsp_valuehl 
2d52				endm 
# End of macro FORTH_DSP_VALUEHL
2d52			 
2d52 e5					push hl    ; save address 
2d53			 
2d53					; load content into de 
2d53			 
2d53 5e					ld e,(hl) 
2d54 23					inc hl 
2d55 56					ld d, (hl) 
2d56			 
2d56					if DEBUG_FORTH_WORDS 
2d56						DMARK "+2a" 
2d56 f5				push af  
2d57 3a 6b 2d			ld a, (.dmark)  
2d5a 32 bd fb			ld (debug_mark),a  
2d5d 3a 6c 2d			ld a, (.dmark+1)  
2d60 32 be fb			ld (debug_mark+1),a  
2d63 3a 6d 2d			ld a, (.dmark+2)  
2d66 32 bf fb			ld (debug_mark+2),a  
2d69 18 03			jr .pastdmark  
2d6b ..			.dmark: db "+2a"  
2d6e f1			.pastdmark: pop af  
2d6f			endm  
# End of macro DMARK
2d6f						CALLMONITOR 
2d6f cd 2d 17			call break_point_state  
2d72				endm  
# End of macro CALLMONITOR
2d72					endif 
2d72			 
2d72					FORTH_DSP_POP 
2d72 cd 6c 1f			call macro_forth_dsp_pop 
2d75				endm 
# End of macro FORTH_DSP_POP
2d75			 
2d75					; Get value to add 
2d75			 
2d75					FORTH_DSP_VALUE 
2d75 cd 9d 1e			call macro_forth_dsp_value 
2d78				endm 
# End of macro FORTH_DSP_VALUE
2d78			 
2d78					if DEBUG_FORTH_WORDS 
2d78						DMARK "+2v" 
2d78 f5				push af  
2d79 3a 8d 2d			ld a, (.dmark)  
2d7c 32 bd fb			ld (debug_mark),a  
2d7f 3a 8e 2d			ld a, (.dmark+1)  
2d82 32 be fb			ld (debug_mark+1),a  
2d85 3a 8f 2d			ld a, (.dmark+2)  
2d88 32 bf fb			ld (debug_mark+2),a  
2d8b 18 03			jr .pastdmark  
2d8d ..			.dmark: db "+2v"  
2d90 f1			.pastdmark: pop af  
2d91			endm  
# End of macro DMARK
2d91						CALLMONITOR 
2d91 cd 2d 17			call break_point_state  
2d94				endm  
# End of macro CALLMONITOR
2d94					endif 
2d94			 
2d94 19					add hl, de 
2d95			 
2d95					if DEBUG_FORTH_WORDS 
2d95						DMARK "+2+" 
2d95 f5				push af  
2d96 3a aa 2d			ld a, (.dmark)  
2d99 32 bd fb			ld (debug_mark),a  
2d9c 3a ab 2d			ld a, (.dmark+1)  
2d9f 32 be fb			ld (debug_mark+1),a  
2da2 3a ac 2d			ld a, (.dmark+2)  
2da5 32 bf fb			ld (debug_mark+2),a  
2da8 18 03			jr .pastdmark  
2daa ..			.dmark: db "+2+"  
2dad f1			.pastdmark: pop af  
2dae			endm  
# End of macro DMARK
2dae						CALLMONITOR 
2dae cd 2d 17			call break_point_state  
2db1				endm  
# End of macro CALLMONITOR
2db1					endif 
2db1			 
2db1					; move result to de 
2db1			 
2db1 eb					ex de, hl 
2db2			 
2db2					; Address 
2db2			 
2db2 e1					pop hl 
2db3			 
2db3					; save it back 
2db3			 
2db3 73					ld (hl), e 
2db4 23					inc hl 
2db5 72					ld (hl), d 
2db6			 
2db6					if DEBUG_FORTH_WORDS 
2db6						DMARK "+2e" 
2db6 f5				push af  
2db7 3a cb 2d			ld a, (.dmark)  
2dba 32 bd fb			ld (debug_mark),a  
2dbd 3a cc 2d			ld a, (.dmark+1)  
2dc0 32 be fb			ld (debug_mark+1),a  
2dc3 3a cd 2d			ld a, (.dmark+2)  
2dc6 32 bf fb			ld (debug_mark+2),a  
2dc9 18 03			jr .pastdmark  
2dcb ..			.dmark: db "+2e"  
2dce f1			.pastdmark: pop af  
2dcf			endm  
# End of macro DMARK
2dcf						CALLMONITOR 
2dcf cd 2d 17			call break_point_state  
2dd2				endm  
# End of macro CALLMONITOR
2dd2					endif 
2dd2			 
2dd2			 
2dd2			 
2dd2			 
2dd2			 
2dd2				       NEXTW 
2dd2 c3 26 20			jp macro_next 
2dd5				endm 
# End of macro NEXTW
2dd5			 
2dd5			.DEC2: 
2dd5				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2dd5 6f				db WORD_SYS_CORE+91             
2dd6 81 2e			dw .GET2            
2dd8 04				db 3 + 1 
2dd9 .. 00			db "-2!",0              
2ddd				endm 
# End of macro CWHEAD
2ddd			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2ddd			 
2ddd			 
2ddd					if DEBUG_FORTH_WORDS_KEY 
2ddd						DMARK "-2s" 
2ddd f5				push af  
2dde 3a f2 2d			ld a, (.dmark)  
2de1 32 bd fb			ld (debug_mark),a  
2de4 3a f3 2d			ld a, (.dmark+1)  
2de7 32 be fb			ld (debug_mark+1),a  
2dea 3a f4 2d			ld a, (.dmark+2)  
2ded 32 bf fb			ld (debug_mark+2),a  
2df0 18 03			jr .pastdmark  
2df2 ..			.dmark: db "-2s"  
2df5 f1			.pastdmark: pop af  
2df6			endm  
# End of macro DMARK
2df6						CALLMONITOR 
2df6 cd 2d 17			call break_point_state  
2df9				endm  
# End of macro CALLMONITOR
2df9					endif 
2df9			 
2df9					; Address 
2df9			 
2df9					FORTH_DSP_VALUEHL 
2df9 cd b4 1e			call macro_dsp_valuehl 
2dfc				endm 
# End of macro FORTH_DSP_VALUEHL
2dfc			 
2dfc e5					push hl    ; save address 
2dfd			 
2dfd					; load content into de 
2dfd			 
2dfd 5e					ld e,(hl) 
2dfe 23					inc hl 
2dff 56					ld d, (hl) 
2e00			 
2e00					if DEBUG_FORTH_WORDS 
2e00						DMARK "-2a" 
2e00 f5				push af  
2e01 3a 15 2e			ld a, (.dmark)  
2e04 32 bd fb			ld (debug_mark),a  
2e07 3a 16 2e			ld a, (.dmark+1)  
2e0a 32 be fb			ld (debug_mark+1),a  
2e0d 3a 17 2e			ld a, (.dmark+2)  
2e10 32 bf fb			ld (debug_mark+2),a  
2e13 18 03			jr .pastdmark  
2e15 ..			.dmark: db "-2a"  
2e18 f1			.pastdmark: pop af  
2e19			endm  
# End of macro DMARK
2e19						CALLMONITOR 
2e19 cd 2d 17			call break_point_state  
2e1c				endm  
# End of macro CALLMONITOR
2e1c					endif 
2e1c			 
2e1c					FORTH_DSP_POP 
2e1c cd 6c 1f			call macro_forth_dsp_pop 
2e1f				endm 
# End of macro FORTH_DSP_POP
2e1f			 
2e1f					; Get value to remove 
2e1f			 
2e1f					FORTH_DSP_VALUE 
2e1f cd 9d 1e			call macro_forth_dsp_value 
2e22				endm 
# End of macro FORTH_DSP_VALUE
2e22			 
2e22					if DEBUG_FORTH_WORDS 
2e22						DMARK "-2v" 
2e22 f5				push af  
2e23 3a 37 2e			ld a, (.dmark)  
2e26 32 bd fb			ld (debug_mark),a  
2e29 3a 38 2e			ld a, (.dmark+1)  
2e2c 32 be fb			ld (debug_mark+1),a  
2e2f 3a 39 2e			ld a, (.dmark+2)  
2e32 32 bf fb			ld (debug_mark+2),a  
2e35 18 03			jr .pastdmark  
2e37 ..			.dmark: db "-2v"  
2e3a f1			.pastdmark: pop af  
2e3b			endm  
# End of macro DMARK
2e3b						CALLMONITOR 
2e3b cd 2d 17			call break_point_state  
2e3e				endm  
# End of macro CALLMONITOR
2e3e					endif 
2e3e			 
2e3e eb					ex de, hl 
2e3f ed 52				sbc hl, de 
2e41			 
2e41					if DEBUG_FORTH_WORDS 
2e41						DMARK "-2d" 
2e41 f5				push af  
2e42 3a 56 2e			ld a, (.dmark)  
2e45 32 bd fb			ld (debug_mark),a  
2e48 3a 57 2e			ld a, (.dmark+1)  
2e4b 32 be fb			ld (debug_mark+1),a  
2e4e 3a 58 2e			ld a, (.dmark+2)  
2e51 32 bf fb			ld (debug_mark+2),a  
2e54 18 03			jr .pastdmark  
2e56 ..			.dmark: db "-2d"  
2e59 f1			.pastdmark: pop af  
2e5a			endm  
# End of macro DMARK
2e5a						CALLMONITOR 
2e5a cd 2d 17			call break_point_state  
2e5d				endm  
# End of macro CALLMONITOR
2e5d					endif 
2e5d			 
2e5d					; move result to de 
2e5d			 
2e5d eb					ex de, hl 
2e5e			 
2e5e					; Address 
2e5e			 
2e5e e1					pop hl 
2e5f			 
2e5f					; save it back 
2e5f			 
2e5f 73					ld (hl), e 
2e60 23					inc hl 
2e61 72					ld (hl), d 
2e62			 
2e62					if DEBUG_FORTH_WORDS 
2e62						DMARK "-2e" 
2e62 f5				push af  
2e63 3a 77 2e			ld a, (.dmark)  
2e66 32 bd fb			ld (debug_mark),a  
2e69 3a 78 2e			ld a, (.dmark+1)  
2e6c 32 be fb			ld (debug_mark+1),a  
2e6f 3a 79 2e			ld a, (.dmark+2)  
2e72 32 bf fb			ld (debug_mark+2),a  
2e75 18 03			jr .pastdmark  
2e77 ..			.dmark: db "-2e"  
2e7a f1			.pastdmark: pop af  
2e7b			endm  
# End of macro DMARK
2e7b						CALLMONITOR 
2e7b cd 2d 17			call break_point_state  
2e7e				endm  
# End of macro CALLMONITOR
2e7e					endif 
2e7e			 
2e7e			 
2e7e			 
2e7e			 
2e7e			 
2e7e				       NEXTW 
2e7e c3 26 20			jp macro_next 
2e81				endm 
# End of macro NEXTW
2e81			.GET2: 
2e81				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2e81 6f				db WORD_SYS_CORE+91             
2e82 b1 2e			dw .BANG2            
2e84 03				db 2 + 1 
2e85 .. 00			db "2@",0              
2e88				endm 
# End of macro CWHEAD
2e88			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2e88					if DEBUG_FORTH_WORDS_KEY 
2e88						DMARK "2A_" 
2e88 f5				push af  
2e89 3a 9d 2e			ld a, (.dmark)  
2e8c 32 bd fb			ld (debug_mark),a  
2e8f 3a 9e 2e			ld a, (.dmark+1)  
2e92 32 be fb			ld (debug_mark+1),a  
2e95 3a 9f 2e			ld a, (.dmark+2)  
2e98 32 bf fb			ld (debug_mark+2),a  
2e9b 18 03			jr .pastdmark  
2e9d ..			.dmark: db "2A_"  
2ea0 f1			.pastdmark: pop af  
2ea1			endm  
# End of macro DMARK
2ea1						CALLMONITOR 
2ea1 cd 2d 17			call break_point_state  
2ea4				endm  
# End of macro CALLMONITOR
2ea4					endif 
2ea4			 
2ea4					FORTH_DSP_VALUEHL 
2ea4 cd b4 1e			call macro_dsp_valuehl 
2ea7				endm 
# End of macro FORTH_DSP_VALUEHL
2ea7			 
2ea7 5e					ld e, (hl) 
2ea8 23					inc hl 
2ea9 56					ld d, (hl) 
2eaa			 
2eaa eb					ex de, hl 
2eab			 
2eab cd bd 1c				call forth_push_numhl 
2eae			 
2eae				       NEXTW 
2eae c3 26 20			jp macro_next 
2eb1				endm 
# End of macro NEXTW
2eb1			.BANG2: 
2eb1				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2eb1 6f				db WORD_SYS_CORE+91             
2eb2 e9 2e			dw .CONFIG            
2eb4 03				db 2 + 1 
2eb5 .. 00			db "2!",0              
2eb8				endm 
# End of macro CWHEAD
2eb8			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2eb8					if DEBUG_FORTH_WORDS_KEY 
2eb8						DMARK "2S_" 
2eb8 f5				push af  
2eb9 3a cd 2e			ld a, (.dmark)  
2ebc 32 bd fb			ld (debug_mark),a  
2ebf 3a ce 2e			ld a, (.dmark+1)  
2ec2 32 be fb			ld (debug_mark+1),a  
2ec5 3a cf 2e			ld a, (.dmark+2)  
2ec8 32 bf fb			ld (debug_mark+2),a  
2ecb 18 03			jr .pastdmark  
2ecd ..			.dmark: db "2S_"  
2ed0 f1			.pastdmark: pop af  
2ed1			endm  
# End of macro DMARK
2ed1						CALLMONITOR 
2ed1 cd 2d 17			call break_point_state  
2ed4				endm  
# End of macro CALLMONITOR
2ed4					endif 
2ed4			 
2ed4					FORTH_DSP_VALUEHL 
2ed4 cd b4 1e			call macro_dsp_valuehl 
2ed7				endm 
# End of macro FORTH_DSP_VALUEHL
2ed7			 
2ed7 e5					push hl   ; save address 
2ed8			 
2ed8			 
2ed8					FORTH_DSP_POP 
2ed8 cd 6c 1f			call macro_forth_dsp_pop 
2edb				endm 
# End of macro FORTH_DSP_POP
2edb			 
2edb					 
2edb					FORTH_DSP_VALUEHL 
2edb cd b4 1e			call macro_dsp_valuehl 
2ede				endm 
# End of macro FORTH_DSP_VALUEHL
2ede			 
2ede					FORTH_DSP_POP 
2ede cd 6c 1f			call macro_forth_dsp_pop 
2ee1				endm 
# End of macro FORTH_DSP_POP
2ee1			 
2ee1 eb					ex de, hl    ; value now in de 
2ee2			 
2ee2 e1					pop hl 
2ee3			 
2ee3 73					ld (hl), e 
2ee4			 
2ee4 23					inc hl 
2ee5			 
2ee5 72					ld (hl), d 
2ee6			 
2ee6			 
2ee6				       NEXTW 
2ee6 c3 26 20			jp macro_next 
2ee9				endm 
# End of macro NEXTW
2ee9			.CONFIG: 
2ee9				CWHEAD .ENDCORE 91 "CONFIG" 6 WORD_FLAG_CODE 
2ee9 6f				db WORD_SYS_CORE+91             
2eea fa 2e			dw .ENDCORE            
2eec 07				db 6 + 1 
2eed .. 00			db "CONFIG",0              
2ef4				endm 
# End of macro CWHEAD
2ef4			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
2ef4			 
2ef4 cd 7a 13				call config 
2ef7					NEXTW 
2ef7 c3 26 20			jp macro_next 
2efa				endm 
# End of macro NEXTW
2efa			.ENDCORE: 
2efa			 
2efa			; eof 
2efa			 
2efa			 
# End of file forth_words_core.asm
2efa			include "forth_words_flow.asm" 
2efa			 
2efa			; | ## Program Flow Words 
2efa			 
2efa			.IF: 
2efa				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
2efa 1e				db WORD_SYS_CORE+10             
2efb ef 2f			dw .THEN            
2efd 03				db 2 + 1 
2efe .. 00			db "IF",0              
2f01				endm 
# End of macro CWHEAD
2f01			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
2f01			; 
2f01					if DEBUG_FORTH_WORDS_KEY 
2f01						DMARK "IF." 
2f01 f5				push af  
2f02 3a 16 2f			ld a, (.dmark)  
2f05 32 bd fb			ld (debug_mark),a  
2f08 3a 17 2f			ld a, (.dmark+1)  
2f0b 32 be fb			ld (debug_mark+1),a  
2f0e 3a 18 2f			ld a, (.dmark+2)  
2f11 32 bf fb			ld (debug_mark+2),a  
2f14 18 03			jr .pastdmark  
2f16 ..			.dmark: db "IF."  
2f19 f1			.pastdmark: pop af  
2f1a			endm  
# End of macro DMARK
2f1a						CALLMONITOR 
2f1a cd 2d 17			call break_point_state  
2f1d				endm  
# End of macro CALLMONITOR
2f1d					endif 
2f1d			; eval TOS 
2f1d			 
2f1d				FORTH_DSP_VALUEHL 
2f1d cd b4 1e			call macro_dsp_valuehl 
2f20				endm 
# End of macro FORTH_DSP_VALUEHL
2f20			 
2f20			;	push hl 
2f20				FORTH_DSP_POP 
2f20 cd 6c 1f			call macro_forth_dsp_pop 
2f23				endm 
# End of macro FORTH_DSP_POP
2f23			;	pop hl 
2f23			 
2f23					if DEBUG_FORTH_WORDS 
2f23						DMARK "IF1" 
2f23 f5				push af  
2f24 3a 38 2f			ld a, (.dmark)  
2f27 32 bd fb			ld (debug_mark),a  
2f2a 3a 39 2f			ld a, (.dmark+1)  
2f2d 32 be fb			ld (debug_mark+1),a  
2f30 3a 3a 2f			ld a, (.dmark+2)  
2f33 32 bf fb			ld (debug_mark+2),a  
2f36 18 03			jr .pastdmark  
2f38 ..			.dmark: db "IF1"  
2f3b f1			.pastdmark: pop af  
2f3c			endm  
# End of macro DMARK
2f3c						CALLMONITOR 
2f3c cd 2d 17			call break_point_state  
2f3f				endm  
# End of macro CALLMONITOR
2f3f					endif 
2f3f b7				or a        ; clear carry flag 
2f40 11 00 00			ld de, 0 
2f43 eb				ex de,hl 
2f44 ed 52			sbc hl, de 
2f46 c2 d0 2f			jp nz, .iftrue 
2f49			 
2f49					if DEBUG_FORTH_WORDS 
2f49						DMARK "IF2" 
2f49 f5				push af  
2f4a 3a 5e 2f			ld a, (.dmark)  
2f4d 32 bd fb			ld (debug_mark),a  
2f50 3a 5f 2f			ld a, (.dmark+1)  
2f53 32 be fb			ld (debug_mark+1),a  
2f56 3a 60 2f			ld a, (.dmark+2)  
2f59 32 bf fb			ld (debug_mark+2),a  
2f5c 18 03			jr .pastdmark  
2f5e ..			.dmark: db "IF2"  
2f61 f1			.pastdmark: pop af  
2f62			endm  
# End of macro DMARK
2f62						CALLMONITOR 
2f62 cd 2d 17			call break_point_state  
2f65				endm  
# End of macro CALLMONITOR
2f65					endif 
2f65			 
2f65			; if not true then skip to THEN 
2f65			 
2f65				; TODO get tok_ptr 
2f65				; TODO consume toks until we get to THEN 
2f65			 
2f65 2a a4 f2			ld hl, (os_tok_ptr) 
2f68					if DEBUG_FORTH_WORDS 
2f68						DMARK "IF3" 
2f68 f5				push af  
2f69 3a 7d 2f			ld a, (.dmark)  
2f6c 32 bd fb			ld (debug_mark),a  
2f6f 3a 7e 2f			ld a, (.dmark+1)  
2f72 32 be fb			ld (debug_mark+1),a  
2f75 3a 7f 2f			ld a, (.dmark+2)  
2f78 32 bf fb			ld (debug_mark+2),a  
2f7b 18 03			jr .pastdmark  
2f7d ..			.dmark: db "IF3"  
2f80 f1			.pastdmark: pop af  
2f81			endm  
# End of macro DMARK
2f81						CALLMONITOR 
2f81 cd 2d 17			call break_point_state  
2f84				endm  
# End of macro CALLMONITOR
2f84						 
2f84					endif 
2f84 11 cb 2f			ld de, .ifthen 
2f87					if DEBUG_FORTH_WORDS 
2f87						DMARK "IF4" 
2f87 f5				push af  
2f88 3a 9c 2f			ld a, (.dmark)  
2f8b 32 bd fb			ld (debug_mark),a  
2f8e 3a 9d 2f			ld a, (.dmark+1)  
2f91 32 be fb			ld (debug_mark+1),a  
2f94 3a 9e 2f			ld a, (.dmark+2)  
2f97 32 bf fb			ld (debug_mark+2),a  
2f9a 18 03			jr .pastdmark  
2f9c ..			.dmark: db "IF4"  
2f9f f1			.pastdmark: pop af  
2fa0			endm  
# End of macro DMARK
2fa0						CALLMONITOR 
2fa0 cd 2d 17			call break_point_state  
2fa3				endm  
# End of macro CALLMONITOR
2fa3					endif 
2fa3 cd 41 21			call findnexttok  
2fa6			 
2fa6					if DEBUG_FORTH_WORDS 
2fa6						DMARK "IF5" 
2fa6 f5				push af  
2fa7 3a bb 2f			ld a, (.dmark)  
2faa 32 bd fb			ld (debug_mark),a  
2fad 3a bc 2f			ld a, (.dmark+1)  
2fb0 32 be fb			ld (debug_mark+1),a  
2fb3 3a bd 2f			ld a, (.dmark+2)  
2fb6 32 bf fb			ld (debug_mark+2),a  
2fb9 18 03			jr .pastdmark  
2fbb ..			.dmark: db "IF5"  
2fbe f1			.pastdmark: pop af  
2fbf			endm  
# End of macro DMARK
2fbf						CALLMONITOR 
2fbf cd 2d 17			call break_point_state  
2fc2				endm  
# End of macro CALLMONITOR
2fc2					endif 
2fc2				; TODO replace below with ; exec using tok_ptr 
2fc2 22 a4 f2			ld (os_tok_ptr), hl 
2fc5 c3 b7 20			jp exec1 
2fc8				NEXTW 
2fc8 c3 26 20			jp macro_next 
2fcb				endm 
# End of macro NEXTW
2fcb			 
2fcb .. 00		.ifthen:  db "THEN",0 
2fd0			 
2fd0			.iftrue:		 
2fd0				; Exec next words normally 
2fd0			 
2fd0				; if true then exec following IF as normal 
2fd0					if DEBUG_FORTH_WORDS 
2fd0						DMARK "IFT" 
2fd0 f5				push af  
2fd1 3a e5 2f			ld a, (.dmark)  
2fd4 32 bd fb			ld (debug_mark),a  
2fd7 3a e6 2f			ld a, (.dmark+1)  
2fda 32 be fb			ld (debug_mark+1),a  
2fdd 3a e7 2f			ld a, (.dmark+2)  
2fe0 32 bf fb			ld (debug_mark+2),a  
2fe3 18 03			jr .pastdmark  
2fe5 ..			.dmark: db "IFT"  
2fe8 f1			.pastdmark: pop af  
2fe9			endm  
# End of macro DMARK
2fe9						CALLMONITOR 
2fe9 cd 2d 17			call break_point_state  
2fec				endm  
# End of macro CALLMONITOR
2fec					endif 
2fec			 
2fec					NEXTW 
2fec c3 26 20			jp macro_next 
2fef				endm 
# End of macro NEXTW
2fef			.THEN: 
2fef				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
2fef 1f				db WORD_SYS_CORE+11             
2ff0 17 30			dw .ELSE            
2ff2 05				db 4 + 1 
2ff3 .. 00			db "THEN",0              
2ff8				endm 
# End of macro CWHEAD
2ff8			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
2ff8					if DEBUG_FORTH_WORDS_KEY 
2ff8						DMARK "THN" 
2ff8 f5				push af  
2ff9 3a 0d 30			ld a, (.dmark)  
2ffc 32 bd fb			ld (debug_mark),a  
2fff 3a 0e 30			ld a, (.dmark+1)  
3002 32 be fb			ld (debug_mark+1),a  
3005 3a 0f 30			ld a, (.dmark+2)  
3008 32 bf fb			ld (debug_mark+2),a  
300b 18 03			jr .pastdmark  
300d ..			.dmark: db "THN"  
3010 f1			.pastdmark: pop af  
3011			endm  
# End of macro DMARK
3011						CALLMONITOR 
3011 cd 2d 17			call break_point_state  
3014				endm  
# End of macro CALLMONITOR
3014					endif 
3014					NEXTW 
3014 c3 26 20			jp macro_next 
3017				endm 
# End of macro NEXTW
3017			.ELSE: 
3017				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3017 20				db WORD_SYS_CORE+12             
3018 3f 30			dw .DO            
301a 03				db 2 + 1 
301b .. 00			db "ELSE",0              
3020				endm 
# End of macro CWHEAD
3020			; | ELSE ( -- ) Not supported - does nothing | TODO 
3020			 
3020					if DEBUG_FORTH_WORDS_KEY 
3020						DMARK "ELS" 
3020 f5				push af  
3021 3a 35 30			ld a, (.dmark)  
3024 32 bd fb			ld (debug_mark),a  
3027 3a 36 30			ld a, (.dmark+1)  
302a 32 be fb			ld (debug_mark+1),a  
302d 3a 37 30			ld a, (.dmark+2)  
3030 32 bf fb			ld (debug_mark+2),a  
3033 18 03			jr .pastdmark  
3035 ..			.dmark: db "ELS"  
3038 f1			.pastdmark: pop af  
3039			endm  
# End of macro DMARK
3039						CALLMONITOR 
3039 cd 2d 17			call break_point_state  
303c				endm  
# End of macro CALLMONITOR
303c					endif 
303c			 
303c			 
303c					NEXTW 
303c c3 26 20			jp macro_next 
303f				endm 
# End of macro NEXTW
303f			.DO: 
303f				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
303f 21				db WORD_SYS_CORE+13             
3040 66 31			dw .LOOP            
3042 03				db 2 + 1 
3043 .. 00			db "DO",0              
3046				endm 
# End of macro CWHEAD
3046			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3046			 
3046					if DEBUG_FORTH_WORDS_KEY 
3046						DMARK "DO." 
3046 f5				push af  
3047 3a 5b 30			ld a, (.dmark)  
304a 32 bd fb			ld (debug_mark),a  
304d 3a 5c 30			ld a, (.dmark+1)  
3050 32 be fb			ld (debug_mark+1),a  
3053 3a 5d 30			ld a, (.dmark+2)  
3056 32 bf fb			ld (debug_mark+2),a  
3059 18 03			jr .pastdmark  
305b ..			.dmark: db "DO."  
305e f1			.pastdmark: pop af  
305f			endm  
# End of macro DMARK
305f						CALLMONITOR 
305f cd 2d 17			call break_point_state  
3062				endm  
# End of macro CALLMONITOR
3062					endif 
3062			;  push pc to rsp stack past the DO 
3062			 
3062 2a a4 f2				ld hl, (os_tok_ptr) 
3065 23					inc hl   ; D 
3066 23					inc hl  ; O 
3067 23					inc hl   ; null 
3068					if DEBUG_FORTH_WORDS 
3068						DMARK "DO2" 
3068 f5				push af  
3069 3a 7d 30			ld a, (.dmark)  
306c 32 bd fb			ld (debug_mark),a  
306f 3a 7e 30			ld a, (.dmark+1)  
3072 32 be fb			ld (debug_mark+1),a  
3075 3a 7f 30			ld a, (.dmark+2)  
3078 32 bf fb			ld (debug_mark+2),a  
307b 18 03			jr .pastdmark  
307d ..			.dmark: db "DO2"  
3080 f1			.pastdmark: pop af  
3081			endm  
# End of macro DMARK
3081						CALLMONITOR 
3081 cd 2d 17			call break_point_state  
3084				endm  
# End of macro CALLMONITOR
3084					endif 
3084					FORTH_RSP_NEXT 
3084 cd 64 1c			call macro_forth_rsp_next 
3087				endm 
# End of macro FORTH_RSP_NEXT
3087					if DEBUG_FORTH_WORDS 
3087						DMARK "DO3" 
3087 f5				push af  
3088 3a 9c 30			ld a, (.dmark)  
308b 32 bd fb			ld (debug_mark),a  
308e 3a 9d 30			ld a, (.dmark+1)  
3091 32 be fb			ld (debug_mark+1),a  
3094 3a 9e 30			ld a, (.dmark+2)  
3097 32 bf fb			ld (debug_mark+2),a  
309a 18 03			jr .pastdmark  
309c ..			.dmark: db "DO3"  
309f f1			.pastdmark: pop af  
30a0			endm  
# End of macro DMARK
30a0						CALLMONITOR 
30a0 cd 2d 17			call break_point_state  
30a3				endm  
# End of macro CALLMONITOR
30a3					endif 
30a3			 
30a3					;if DEBUG_FORTH_WORDS 
30a3				;		push hl 
30a3			;		endif  
30a3			 
30a3			; get counters from data stack 
30a3			 
30a3			 
30a3					FORTH_DSP_VALUEHL 
30a3 cd b4 1e			call macro_dsp_valuehl 
30a6				endm 
# End of macro FORTH_DSP_VALUEHL
30a6 e5					push hl		 ; hl now has starting counter which needs to be tos 
30a7			 
30a7					if DEBUG_FORTH_WORDS 
30a7						DMARK "DO4" 
30a7 f5				push af  
30a8 3a bc 30			ld a, (.dmark)  
30ab 32 bd fb			ld (debug_mark),a  
30ae 3a bd 30			ld a, (.dmark+1)  
30b1 32 be fb			ld (debug_mark+1),a  
30b4 3a be 30			ld a, (.dmark+2)  
30b7 32 bf fb			ld (debug_mark+2),a  
30ba 18 03			jr .pastdmark  
30bc ..			.dmark: db "DO4"  
30bf f1			.pastdmark: pop af  
30c0			endm  
# End of macro DMARK
30c0						CALLMONITOR 
30c0 cd 2d 17			call break_point_state  
30c3				endm  
# End of macro CALLMONITOR
30c3					endif 
30c3					FORTH_DSP_POP 
30c3 cd 6c 1f			call macro_forth_dsp_pop 
30c6				endm 
# End of macro FORTH_DSP_POP
30c6			 
30c6					if DEBUG_FORTH_WORDS 
30c6						DMARK "DO5" 
30c6 f5				push af  
30c7 3a db 30			ld a, (.dmark)  
30ca 32 bd fb			ld (debug_mark),a  
30cd 3a dc 30			ld a, (.dmark+1)  
30d0 32 be fb			ld (debug_mark+1),a  
30d3 3a dd 30			ld a, (.dmark+2)  
30d6 32 bf fb			ld (debug_mark+2),a  
30d9 18 03			jr .pastdmark  
30db ..			.dmark: db "DO5"  
30de f1			.pastdmark: pop af  
30df			endm  
# End of macro DMARK
30df						CALLMONITOR 
30df cd 2d 17			call break_point_state  
30e2				endm  
# End of macro CALLMONITOR
30e2					endif 
30e2			 
30e2					FORTH_DSP_VALUEHL 
30e2 cd b4 1e			call macro_dsp_valuehl 
30e5				endm 
# End of macro FORTH_DSP_VALUEHL
30e5			;		push hl		 ; hl now has starting limit counter 
30e5			 
30e5					if DEBUG_FORTH_WORDS 
30e5						DMARK "DO6" 
30e5 f5				push af  
30e6 3a fa 30			ld a, (.dmark)  
30e9 32 bd fb			ld (debug_mark),a  
30ec 3a fb 30			ld a, (.dmark+1)  
30ef 32 be fb			ld (debug_mark+1),a  
30f2 3a fc 30			ld a, (.dmark+2)  
30f5 32 bf fb			ld (debug_mark+2),a  
30f8 18 03			jr .pastdmark  
30fa ..			.dmark: db "DO6"  
30fd f1			.pastdmark: pop af  
30fe			endm  
# End of macro DMARK
30fe						CALLMONITOR 
30fe cd 2d 17			call break_point_state  
3101				endm  
# End of macro CALLMONITOR
3101					endif 
3101					FORTH_DSP_POP 
3101 cd 6c 1f			call macro_forth_dsp_pop 
3104				endm 
# End of macro FORTH_DSP_POP
3104			 
3104			; put counters on the loop stack 
3104			 
3104			;		pop hl			 ; limit counter 
3104 d1					pop de			; start counter 
3105			 
3105					; push limit counter 
3105			 
3105					if DEBUG_FORTH_WORDS 
3105						DMARK "DO7" 
3105 f5				push af  
3106 3a 1a 31			ld a, (.dmark)  
3109 32 bd fb			ld (debug_mark),a  
310c 3a 1b 31			ld a, (.dmark+1)  
310f 32 be fb			ld (debug_mark+1),a  
3112 3a 1c 31			ld a, (.dmark+2)  
3115 32 bf fb			ld (debug_mark+2),a  
3118 18 03			jr .pastdmark  
311a ..			.dmark: db "DO7"  
311d f1			.pastdmark: pop af  
311e			endm  
# End of macro DMARK
311e						CALLMONITOR 
311e cd 2d 17			call break_point_state  
3121				endm  
# End of macro CALLMONITOR
3121					endif 
3121					FORTH_LOOP_NEXT 
3121 cd e5 1e			call macro_forth_loop_next 
3124				endm 
# End of macro FORTH_LOOP_NEXT
3124			 
3124					; push start counter 
3124			 
3124 eb					ex de, hl 
3125					if DEBUG_FORTH_WORDS 
3125						DMARK "DO7" 
3125 f5				push af  
3126 3a 3a 31			ld a, (.dmark)  
3129 32 bd fb			ld (debug_mark),a  
312c 3a 3b 31			ld a, (.dmark+1)  
312f 32 be fb			ld (debug_mark+1),a  
3132 3a 3c 31			ld a, (.dmark+2)  
3135 32 bf fb			ld (debug_mark+2),a  
3138 18 03			jr .pastdmark  
313a ..			.dmark: db "DO7"  
313d f1			.pastdmark: pop af  
313e			endm  
# End of macro DMARK
313e						CALLMONITOR 
313e cd 2d 17			call break_point_state  
3141				endm  
# End of macro CALLMONITOR
3141					endif 
3141					FORTH_LOOP_NEXT 
3141 cd e5 1e			call macro_forth_loop_next 
3144				endm 
# End of macro FORTH_LOOP_NEXT
3144			 
3144			 
3144					; init first round of I counter 
3144			 
3144 22 c8 f2				ld (os_current_i), hl 
3147			 
3147					if DEBUG_FORTH_WORDS 
3147						DMARK "DO8" 
3147 f5				push af  
3148 3a 5c 31			ld a, (.dmark)  
314b 32 bd fb			ld (debug_mark),a  
314e 3a 5d 31			ld a, (.dmark+1)  
3151 32 be fb			ld (debug_mark+1),a  
3154 3a 5e 31			ld a, (.dmark+2)  
3157 32 bf fb			ld (debug_mark+2),a  
315a 18 03			jr .pastdmark  
315c ..			.dmark: db "DO8"  
315f f1			.pastdmark: pop af  
3160			endm  
# End of macro DMARK
3160						CALLMONITOR 
3160 cd 2d 17			call break_point_state  
3163				endm  
# End of macro CALLMONITOR
3163					endif 
3163			 
3163					NEXTW 
3163 c3 26 20			jp macro_next 
3166				endm 
# End of macro NEXTW
3166			.LOOP: 
3166				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
3166 22				db WORD_SYS_CORE+14             
3167 7e 32			dw .I            
3169 05				db 4 + 1 
316a .. 00			db "LOOP",0              
316f				endm 
# End of macro CWHEAD
316f			; | LOOP ( -- ) Increment and test loop counter  | DONE 
316f			 
316f				; pop tos as current loop count to hl 
316f			 
316f				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
316f			 
316f				FORTH_LOOP_TOS 
316f cd 18 1f			call macro_forth_loop_tos 
3172				endm 
# End of macro FORTH_LOOP_TOS
3172 e5				push hl 
3173			 
3173					if DEBUG_FORTH_WORDS_KEY 
3173						DMARK "LOP" 
3173 f5				push af  
3174 3a 88 31			ld a, (.dmark)  
3177 32 bd fb			ld (debug_mark),a  
317a 3a 89 31			ld a, (.dmark+1)  
317d 32 be fb			ld (debug_mark+1),a  
3180 3a 8a 31			ld a, (.dmark+2)  
3183 32 bf fb			ld (debug_mark+2),a  
3186 18 03			jr .pastdmark  
3188 ..			.dmark: db "LOP"  
318b f1			.pastdmark: pop af  
318c			endm  
# End of macro DMARK
318c						CALLMONITOR 
318c cd 2d 17			call break_point_state  
318f				endm  
# End of macro CALLMONITOR
318f					endif 
318f				; next item on the stack is the limit. get it 
318f			 
318f			 
318f				FORTH_LOOP_POP 
318f cd 22 1f			call macro_forth_loop_pop 
3192				endm 
# End of macro FORTH_LOOP_POP
3192			 
3192				FORTH_LOOP_TOS 
3192 cd 18 1f			call macro_forth_loop_tos 
3195				endm 
# End of macro FORTH_LOOP_TOS
3195			 
3195 d1				pop de		 ; de = i, hl = limit 
3196			 
3196					if DEBUG_FORTH_WORDS 
3196						DMARK "LP1" 
3196 f5				push af  
3197 3a ab 31			ld a, (.dmark)  
319a 32 bd fb			ld (debug_mark),a  
319d 3a ac 31			ld a, (.dmark+1)  
31a0 32 be fb			ld (debug_mark+1),a  
31a3 3a ad 31			ld a, (.dmark+2)  
31a6 32 bf fb			ld (debug_mark+2),a  
31a9 18 03			jr .pastdmark  
31ab ..			.dmark: db "LP1"  
31ae f1			.pastdmark: pop af  
31af			endm  
# End of macro DMARK
31af						CALLMONITOR 
31af cd 2d 17			call break_point_state  
31b2				endm  
# End of macro CALLMONITOR
31b2					endif 
31b2			 
31b2				; go back to previous word 
31b2			 
31b2 d5				push de    ; save I for inc later 
31b3			 
31b3			 
31b3				; get limit 
31b3				;  is I at limit? 
31b3			 
31b3			 
31b3					if DEBUG_FORTH_WORDS 
31b3						DMARK "LP1" 
31b3 f5				push af  
31b4 3a c8 31			ld a, (.dmark)  
31b7 32 bd fb			ld (debug_mark),a  
31ba 3a c9 31			ld a, (.dmark+1)  
31bd 32 be fb			ld (debug_mark+1),a  
31c0 3a ca 31			ld a, (.dmark+2)  
31c3 32 bf fb			ld (debug_mark+2),a  
31c6 18 03			jr .pastdmark  
31c8 ..			.dmark: db "LP1"  
31cb f1			.pastdmark: pop af  
31cc			endm  
# End of macro DMARK
31cc						CALLMONITOR 
31cc cd 2d 17			call break_point_state  
31cf				endm  
# End of macro CALLMONITOR
31cf					endif 
31cf			 
31cf ed 52			sbc hl, de 
31d1			 
31d1			 
31d1				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
31d1			 
31d1 20 26				jr nz, .loopnotdone 
31d3			 
31d3 e1				pop hl   ; get rid of saved I 
31d4				FORTH_LOOP_POP     ; get rid of limit 
31d4 cd 22 1f			call macro_forth_loop_pop 
31d7				endm 
# End of macro FORTH_LOOP_POP
31d7			 
31d7				FORTH_RSP_POP     ; get rid of DO ptr 
31d7 cd 85 1c			call macro_forth_rsp_pop 
31da				endm 
# End of macro FORTH_RSP_POP
31da			 
31da			if DEBUG_FORTH_WORDS 
31da						DMARK "LP>" 
31da f5				push af  
31db 3a ef 31			ld a, (.dmark)  
31de 32 bd fb			ld (debug_mark),a  
31e1 3a f0 31			ld a, (.dmark+1)  
31e4 32 be fb			ld (debug_mark+1),a  
31e7 3a f1 31			ld a, (.dmark+2)  
31ea 32 bf fb			ld (debug_mark+2),a  
31ed 18 03			jr .pastdmark  
31ef ..			.dmark: db "LP>"  
31f2 f1			.pastdmark: pop af  
31f3			endm  
# End of macro DMARK
31f3				CALLMONITOR 
31f3 cd 2d 17			call break_point_state  
31f6				endm  
# End of macro CALLMONITOR
31f6			endif 
31f6			 
31f6					NEXTW 
31f6 c3 26 20			jp macro_next 
31f9				endm 
# End of macro NEXTW
31f9				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
31f9			 
31f9			.loopnotdone: 
31f9			 
31f9 e1				pop hl    ; get I 
31fa 23				inc hl 
31fb			 
31fb			   	; save new I 
31fb			 
31fb			 
31fb					; set I counter 
31fb			 
31fb 22 c8 f2				ld (os_current_i), hl 
31fe			 
31fe					if DEBUG_FORTH_WORDS 
31fe						DMARK "LPN" 
31fe f5				push af  
31ff 3a 13 32			ld a, (.dmark)  
3202 32 bd fb			ld (debug_mark),a  
3205 3a 14 32			ld a, (.dmark+1)  
3208 32 be fb			ld (debug_mark+1),a  
320b 3a 15 32			ld a, (.dmark+2)  
320e 32 bf fb			ld (debug_mark+2),a  
3211 18 03			jr .pastdmark  
3213 ..			.dmark: db "LPN"  
3216 f1			.pastdmark: pop af  
3217			endm  
# End of macro DMARK
3217					CALLMONITOR 
3217 cd 2d 17			call break_point_state  
321a				endm  
# End of macro CALLMONITOR
321a					endif 
321a					 
321a				FORTH_LOOP_NEXT 
321a cd e5 1e			call macro_forth_loop_next 
321d				endm 
# End of macro FORTH_LOOP_NEXT
321d			 
321d			 
321d					if DEBUG_FORTH_WORDS 
321d eb						ex de,hl 
321e					endif 
321e			 
321e			;	; get DO ptr 
321e			; 
321e					if DEBUG_FORTH_WORDS 
321e						DMARK "LP7" 
321e f5				push af  
321f 3a 33 32			ld a, (.dmark)  
3222 32 bd fb			ld (debug_mark),a  
3225 3a 34 32			ld a, (.dmark+1)  
3228 32 be fb			ld (debug_mark+1),a  
322b 3a 35 32			ld a, (.dmark+2)  
322e 32 bf fb			ld (debug_mark+2),a  
3231 18 03			jr .pastdmark  
3233 ..			.dmark: db "LP7"  
3236 f1			.pastdmark: pop af  
3237			endm  
# End of macro DMARK
3237					CALLMONITOR 
3237 cd 2d 17			call break_point_state  
323a				endm  
# End of macro CALLMONITOR
323a					endif 
323a				FORTH_RSP_TOS 
323a cd 7b 1c			call macro_forth_rsp_tos 
323d				endm 
# End of macro FORTH_RSP_TOS
323d			 
323d					if DEBUG_FORTH_WORDS 
323d						DMARK "LP8" 
323d f5				push af  
323e 3a 52 32			ld a, (.dmark)  
3241 32 bd fb			ld (debug_mark),a  
3244 3a 53 32			ld a, (.dmark+1)  
3247 32 be fb			ld (debug_mark+1),a  
324a 3a 54 32			ld a, (.dmark+2)  
324d 32 bf fb			ld (debug_mark+2),a  
3250 18 03			jr .pastdmark  
3252 ..			.dmark: db "LP8"  
3255 f1			.pastdmark: pop af  
3256			endm  
# End of macro DMARK
3256					CALLMONITOR 
3256 cd 2d 17			call break_point_state  
3259				endm  
# End of macro CALLMONITOR
3259					endif 
3259				;push hl 
3259			 
3259				; not going to DO any more 
3259				; get rid of the RSP pointer as DO will add it back in 
3259				;FORTH_RSP_POP 
3259				;pop hl 
3259			 
3259				;ld hl,(cli_ret_sp) 
3259				;ld e, (hl) 
3259				;inc hl 
3259				;ld d, (hl) 
3259				;ex de,hl 
3259 22 a4 f2			ld (os_tok_ptr), hl 
325c					if DEBUG_FORTH_WORDS 
325c						DMARK "LP<" 
325c f5				push af  
325d 3a 71 32			ld a, (.dmark)  
3260 32 bd fb			ld (debug_mark),a  
3263 3a 72 32			ld a, (.dmark+1)  
3266 32 be fb			ld (debug_mark+1),a  
3269 3a 73 32			ld a, (.dmark+2)  
326c 32 bf fb			ld (debug_mark+2),a  
326f 18 03			jr .pastdmark  
3271 ..			.dmark: db "LP<"  
3274 f1			.pastdmark: pop af  
3275			endm  
# End of macro DMARK
3275					CALLMONITOR 
3275 cd 2d 17			call break_point_state  
3278				endm  
# End of macro CALLMONITOR
3278				endif 
3278 c3 b7 20			jp exec1 
327b			 
327b					 
327b			 
327b			 
327b					NEXTW 
327b c3 26 20			jp macro_next 
327e				endm 
# End of macro NEXTW
327e			.I:  
327e			 
327e				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
327e 5e				db WORD_SYS_CORE+74             
327f a9 32			dw .DLOOP            
3281 02				db 1 + 1 
3282 .. 00			db "I",0              
3284				endm 
# End of macro CWHEAD
3284			; | I ( -- ) Current loop counter | DONE 
3284					if DEBUG_FORTH_WORDS_KEY 
3284						DMARK "I.." 
3284 f5				push af  
3285 3a 99 32			ld a, (.dmark)  
3288 32 bd fb			ld (debug_mark),a  
328b 3a 9a 32			ld a, (.dmark+1)  
328e 32 be fb			ld (debug_mark+1),a  
3291 3a 9b 32			ld a, (.dmark+2)  
3294 32 bf fb			ld (debug_mark+2),a  
3297 18 03			jr .pastdmark  
3299 ..			.dmark: db "I.."  
329c f1			.pastdmark: pop af  
329d			endm  
# End of macro DMARK
329d						CALLMONITOR 
329d cd 2d 17			call break_point_state  
32a0				endm  
# End of macro CALLMONITOR
32a0					endif 
32a0			 
32a0 2a c8 f2				ld hl,(os_current_i) 
32a3 cd bd 1c				call forth_push_numhl 
32a6			 
32a6					NEXTW 
32a6 c3 26 20			jp macro_next 
32a9				endm 
# End of macro NEXTW
32a9			.DLOOP: 
32a9				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
32a9 5f				db WORD_SYS_CORE+75             
32aa 8a 33			dw .REPEAT            
32ac 06				db 5 + 1 
32ad .. 00			db "-LOOP",0              
32b3				endm 
# End of macro CWHEAD
32b3			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
32b3				; pop tos as current loop count to hl 
32b3					if DEBUG_FORTH_WORDS_KEY 
32b3						DMARK "-LP" 
32b3 f5				push af  
32b4 3a c8 32			ld a, (.dmark)  
32b7 32 bd fb			ld (debug_mark),a  
32ba 3a c9 32			ld a, (.dmark+1)  
32bd 32 be fb			ld (debug_mark+1),a  
32c0 3a ca 32			ld a, (.dmark+2)  
32c3 32 bf fb			ld (debug_mark+2),a  
32c6 18 03			jr .pastdmark  
32c8 ..			.dmark: db "-LP"  
32cb f1			.pastdmark: pop af  
32cc			endm  
# End of macro DMARK
32cc						CALLMONITOR 
32cc cd 2d 17			call break_point_state  
32cf				endm  
# End of macro CALLMONITOR
32cf					endif 
32cf			 
32cf				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
32cf			 
32cf				FORTH_LOOP_TOS 
32cf cd 18 1f			call macro_forth_loop_tos 
32d2				endm 
# End of macro FORTH_LOOP_TOS
32d2 e5				push hl 
32d3			 
32d3					if DEBUG_FORTH_WORDS 
32d3						DMARK "-LP" 
32d3 f5				push af  
32d4 3a e8 32			ld a, (.dmark)  
32d7 32 bd fb			ld (debug_mark),a  
32da 3a e9 32			ld a, (.dmark+1)  
32dd 32 be fb			ld (debug_mark+1),a  
32e0 3a ea 32			ld a, (.dmark+2)  
32e3 32 bf fb			ld (debug_mark+2),a  
32e6 18 03			jr .pastdmark  
32e8 ..			.dmark: db "-LP"  
32eb f1			.pastdmark: pop af  
32ec			endm  
# End of macro DMARK
32ec						CALLMONITOR 
32ec cd 2d 17			call break_point_state  
32ef				endm  
# End of macro CALLMONITOR
32ef					endif 
32ef				; next item on the stack is the limit. get it 
32ef			 
32ef			 
32ef				FORTH_LOOP_POP 
32ef cd 22 1f			call macro_forth_loop_pop 
32f2				endm 
# End of macro FORTH_LOOP_POP
32f2			 
32f2				FORTH_LOOP_TOS 
32f2 cd 18 1f			call macro_forth_loop_tos 
32f5				endm 
# End of macro FORTH_LOOP_TOS
32f5			 
32f5 d1				pop de		 ; de = i, hl = limit 
32f6			 
32f6					if DEBUG_FORTH_WORDS 
32f6						DMARK "-L1" 
32f6 f5				push af  
32f7 3a 0b 33			ld a, (.dmark)  
32fa 32 bd fb			ld (debug_mark),a  
32fd 3a 0c 33			ld a, (.dmark+1)  
3300 32 be fb			ld (debug_mark+1),a  
3303 3a 0d 33			ld a, (.dmark+2)  
3306 32 bf fb			ld (debug_mark+2),a  
3309 18 03			jr .pastdmark  
330b ..			.dmark: db "-L1"  
330e f1			.pastdmark: pop af  
330f			endm  
# End of macro DMARK
330f						CALLMONITOR 
330f cd 2d 17			call break_point_state  
3312				endm  
# End of macro CALLMONITOR
3312					endif 
3312			 
3312				; go back to previous word 
3312			 
3312 d5				push de    ; save I for inc later 
3313			 
3313			 
3313				; get limit 
3313				;  is I at limit? 
3313			 
3313			 
3313					if DEBUG_FORTH_WORDS 
3313						DMARK "-L1" 
3313 f5				push af  
3314 3a 28 33			ld a, (.dmark)  
3317 32 bd fb			ld (debug_mark),a  
331a 3a 29 33			ld a, (.dmark+1)  
331d 32 be fb			ld (debug_mark+1),a  
3320 3a 2a 33			ld a, (.dmark+2)  
3323 32 bf fb			ld (debug_mark+2),a  
3326 18 03			jr .pastdmark  
3328 ..			.dmark: db "-L1"  
332b f1			.pastdmark: pop af  
332c			endm  
# End of macro DMARK
332c						CALLMONITOR 
332c cd 2d 17			call break_point_state  
332f				endm  
# End of macro CALLMONITOR
332f					endif 
332f			 
332f ed 52			sbc hl, de 
3331			 
3331			 
3331				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3331			 
3331 20 26				jr nz, .mloopnotdone 
3333			 
3333 e1				pop hl   ; get rid of saved I 
3334				FORTH_LOOP_POP     ; get rid of limit 
3334 cd 22 1f			call macro_forth_loop_pop 
3337				endm 
# End of macro FORTH_LOOP_POP
3337			 
3337				FORTH_RSP_POP     ; get rid of DO ptr 
3337 cd 85 1c			call macro_forth_rsp_pop 
333a				endm 
# End of macro FORTH_RSP_POP
333a			 
333a			if DEBUG_FORTH_WORDS 
333a						DMARK "-L>" 
333a f5				push af  
333b 3a 4f 33			ld a, (.dmark)  
333e 32 bd fb			ld (debug_mark),a  
3341 3a 50 33			ld a, (.dmark+1)  
3344 32 be fb			ld (debug_mark+1),a  
3347 3a 51 33			ld a, (.dmark+2)  
334a 32 bf fb			ld (debug_mark+2),a  
334d 18 03			jr .pastdmark  
334f ..			.dmark: db "-L>"  
3352 f1			.pastdmark: pop af  
3353			endm  
# End of macro DMARK
3353				CALLMONITOR 
3353 cd 2d 17			call break_point_state  
3356				endm  
# End of macro CALLMONITOR
3356			endif 
3356			 
3356					NEXTW 
3356 c3 26 20			jp macro_next 
3359				endm 
# End of macro NEXTW
3359				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3359			 
3359			.mloopnotdone: 
3359			 
3359 e1				pop hl    ; get I 
335a 2b				dec hl 
335b			 
335b			   	; save new I 
335b			 
335b			 
335b					; set I counter 
335b			 
335b 22 c8 f2				ld (os_current_i), hl 
335e			 
335e					 
335e				FORTH_LOOP_NEXT 
335e cd e5 1e			call macro_forth_loop_next 
3361				endm 
# End of macro FORTH_LOOP_NEXT
3361			 
3361			 
3361					if DEBUG_FORTH_WORDS 
3361 eb						ex de,hl 
3362					endif 
3362			 
3362			;	; get DO ptr 
3362			; 
3362				FORTH_RSP_TOS 
3362 cd 7b 1c			call macro_forth_rsp_tos 
3365				endm 
# End of macro FORTH_RSP_TOS
3365			 
3365				;push hl 
3365			 
3365				; not going to DO any more 
3365				; get rid of the RSP pointer as DO will add it back in 
3365				;FORTH_RSP_POP 
3365				;pop hl 
3365			 
3365			 
3365 22 a4 f2			ld (os_tok_ptr), hl 
3368					if DEBUG_FORTH_WORDS 
3368						DMARK "-L<" 
3368 f5				push af  
3369 3a 7d 33			ld a, (.dmark)  
336c 32 bd fb			ld (debug_mark),a  
336f 3a 7e 33			ld a, (.dmark+1)  
3372 32 be fb			ld (debug_mark+1),a  
3375 3a 7f 33			ld a, (.dmark+2)  
3378 32 bf fb			ld (debug_mark+2),a  
337b 18 03			jr .pastdmark  
337d ..			.dmark: db "-L<"  
3380 f1			.pastdmark: pop af  
3381			endm  
# End of macro DMARK
3381					CALLMONITOR 
3381 cd 2d 17			call break_point_state  
3384				endm  
# End of macro CALLMONITOR
3384				endif 
3384 c3 b7 20			jp exec1 
3387			 
3387					 
3387			 
3387			 
3387			 
3387				NEXTW 
3387 c3 26 20			jp macro_next 
338a				endm 
# End of macro NEXTW
338a			 
338a			 
338a			 
338a			 
338a			.REPEAT: 
338a				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
338a 71				db WORD_SYS_CORE+93             
338b dd 33			dw .UNTIL            
338d 06				db 5 + 1 
338e .. 00			db "REPEAT",0              
3395				endm 
# End of macro CWHEAD
3395			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3395			;  push pc to rsp stack past the REPEAT 
3395					if DEBUG_FORTH_WORDS_KEY 
3395						DMARK "REP" 
3395 f5				push af  
3396 3a aa 33			ld a, (.dmark)  
3399 32 bd fb			ld (debug_mark),a  
339c 3a ab 33			ld a, (.dmark+1)  
339f 32 be fb			ld (debug_mark+1),a  
33a2 3a ac 33			ld a, (.dmark+2)  
33a5 32 bf fb			ld (debug_mark+2),a  
33a8 18 03			jr .pastdmark  
33aa ..			.dmark: db "REP"  
33ad f1			.pastdmark: pop af  
33ae			endm  
# End of macro DMARK
33ae						CALLMONITOR 
33ae cd 2d 17			call break_point_state  
33b1				endm  
# End of macro CALLMONITOR
33b1					endif 
33b1			 
33b1 2a a4 f2				ld hl, (os_tok_ptr) 
33b4 23					inc hl   ; R 
33b5 23					inc hl  ; E 
33b6 23					inc hl   ; P 
33b7 23					inc hl   ; E 
33b8 23					inc hl   ; A 
33b9 23					inc hl   ; T 
33ba 23					inc hl   ; zero 
33bb					FORTH_RSP_NEXT 
33bb cd 64 1c			call macro_forth_rsp_next 
33be				endm 
# End of macro FORTH_RSP_NEXT
33be			 
33be			 
33be					if DEBUG_FORTH_WORDS 
33be						DMARK "REP" 
33be f5				push af  
33bf 3a d3 33			ld a, (.dmark)  
33c2 32 bd fb			ld (debug_mark),a  
33c5 3a d4 33			ld a, (.dmark+1)  
33c8 32 be fb			ld (debug_mark+1),a  
33cb 3a d5 33			ld a, (.dmark+2)  
33ce 32 bf fb			ld (debug_mark+2),a  
33d1 18 03			jr .pastdmark  
33d3 ..			.dmark: db "REP"  
33d6 f1			.pastdmark: pop af  
33d7			endm  
# End of macro DMARK
33d7						;pop bc    ; TODO BUG ?????? what is this for???? 
33d7						CALLMONITOR 
33d7 cd 2d 17			call break_point_state  
33da				endm  
# End of macro CALLMONITOR
33da					endif 
33da			 
33da					NEXTW 
33da c3 26 20			jp macro_next 
33dd				endm 
# End of macro NEXTW
33dd			;	       NEXTW 
33dd			 
33dd			.UNTIL: 
33dd				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
33dd 72				db WORD_SYS_CORE+94             
33de 74 34			dw .ENDFLOW            
33e0 06				db 5 + 1 
33e1 .. 00			db "UNTIL",0              
33e7				endm 
# End of macro CWHEAD
33e7			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
33e7			 
33e7				; pop tos as check 
33e7			 
33e7				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
33e7			 
33e7				FORTH_DSP_VALUEHL 
33e7 cd b4 1e			call macro_dsp_valuehl 
33ea				endm 
# End of macro FORTH_DSP_VALUEHL
33ea			 
33ea					if DEBUG_FORTH_WORDS_KEY 
33ea						DMARK "UNT" 
33ea f5				push af  
33eb 3a ff 33			ld a, (.dmark)  
33ee 32 bd fb			ld (debug_mark),a  
33f1 3a 00 34			ld a, (.dmark+1)  
33f4 32 be fb			ld (debug_mark+1),a  
33f7 3a 01 34			ld a, (.dmark+2)  
33fa 32 bf fb			ld (debug_mark+2),a  
33fd 18 03			jr .pastdmark  
33ff ..			.dmark: db "UNT"  
3402 f1			.pastdmark: pop af  
3403			endm  
# End of macro DMARK
3403						CALLMONITOR 
3403 cd 2d 17			call break_point_state  
3406				endm  
# End of macro CALLMONITOR
3406					endif 
3406			 
3406			;	push hl 
3406				FORTH_DSP_POP 
3406 cd 6c 1f			call macro_forth_dsp_pop 
3409				endm 
# End of macro FORTH_DSP_POP
3409			 
3409			;	pop hl 
3409			 
3409				; test if true 
3409			 
3409 cd 43 0d			call ishlzero 
340c			;	ld a,l 
340c			;	add h 
340c			; 
340c			;	cp 0 
340c			 
340c 20 3e			jr nz, .untilnotdone 
340e			 
340e					if DEBUG_FORTH_WORDS 
340e						DMARK "UNf" 
340e f5				push af  
340f 3a 23 34			ld a, (.dmark)  
3412 32 bd fb			ld (debug_mark),a  
3415 3a 24 34			ld a, (.dmark+1)  
3418 32 be fb			ld (debug_mark+1),a  
341b 3a 25 34			ld a, (.dmark+2)  
341e 32 bf fb			ld (debug_mark+2),a  
3421 18 03			jr .pastdmark  
3423 ..			.dmark: db "UNf"  
3426 f1			.pastdmark: pop af  
3427			endm  
# End of macro DMARK
3427						CALLMONITOR 
3427 cd 2d 17			call break_point_state  
342a				endm  
# End of macro CALLMONITOR
342a					endif 
342a			 
342a			 
342a			 
342a				FORTH_RSP_POP     ; get rid of DO ptr 
342a cd 85 1c			call macro_forth_rsp_pop 
342d				endm 
# End of macro FORTH_RSP_POP
342d			 
342d			if DEBUG_FORTH_WORDS 
342d						DMARK "UN>" 
342d f5				push af  
342e 3a 42 34			ld a, (.dmark)  
3431 32 bd fb			ld (debug_mark),a  
3434 3a 43 34			ld a, (.dmark+1)  
3437 32 be fb			ld (debug_mark+1),a  
343a 3a 44 34			ld a, (.dmark+2)  
343d 32 bf fb			ld (debug_mark+2),a  
3440 18 03			jr .pastdmark  
3442 ..			.dmark: db "UN>"  
3445 f1			.pastdmark: pop af  
3446			endm  
# End of macro DMARK
3446				CALLMONITOR 
3446 cd 2d 17			call break_point_state  
3449				endm  
# End of macro CALLMONITOR
3449			endif 
3449			 
3449					NEXTW 
3449 c3 26 20			jp macro_next 
344c				endm 
# End of macro NEXTW
344c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
344c			 
344c			.untilnotdone: 
344c			 
344c			 
344c			;	; get DO ptr 
344c			; 
344c				FORTH_RSP_TOS 
344c cd 7b 1c			call macro_forth_rsp_tos 
344f				endm 
# End of macro FORTH_RSP_TOS
344f			 
344f				;push hl 
344f			 
344f				; not going to DO any more 
344f				; get rid of the RSP pointer as DO will add it back in 
344f				;FORTH_RSP_POP 
344f				;pop hl 
344f			 
344f			 
344f 22 a4 f2			ld (os_tok_ptr), hl 
3452					if DEBUG_FORTH_WORDS 
3452						DMARK "UN<" 
3452 f5				push af  
3453 3a 67 34			ld a, (.dmark)  
3456 32 bd fb			ld (debug_mark),a  
3459 3a 68 34			ld a, (.dmark+1)  
345c 32 be fb			ld (debug_mark+1),a  
345f 3a 69 34			ld a, (.dmark+2)  
3462 32 bf fb			ld (debug_mark+2),a  
3465 18 03			jr .pastdmark  
3467 ..			.dmark: db "UN<"  
346a f1			.pastdmark: pop af  
346b			endm  
# End of macro DMARK
346b					CALLMONITOR 
346b cd 2d 17			call break_point_state  
346e				endm  
# End of macro CALLMONITOR
346e				endif 
346e c3 b7 20			jp exec1 
3471			 
3471					 
3471			 
3471			 
3471					NEXTW 
3471 c3 26 20			jp macro_next 
3474				endm 
# End of macro NEXTW
3474			 
3474			 
3474			.ENDFLOW: 
3474			 
3474			; eof 
3474			 
# End of file forth_words_flow.asm
3474			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3474			include "forth_words_logic.asm" 
3474			 
3474			; | ## Logic Words 
3474			 
3474			.NOT: 
3474				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3474 2d				db WORD_SYS_CORE+25             
3475 bc 34			dw .IS            
3477 04				db 3 + 1 
3478 .. 00			db "NOT",0              
347c				endm 
# End of macro CWHEAD
347c			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
347c					if DEBUG_FORTH_WORDS_KEY 
347c						DMARK "NOT" 
347c f5				push af  
347d 3a 91 34			ld a, (.dmark)  
3480 32 bd fb			ld (debug_mark),a  
3483 3a 92 34			ld a, (.dmark+1)  
3486 32 be fb			ld (debug_mark+1),a  
3489 3a 93 34			ld a, (.dmark+2)  
348c 32 bf fb			ld (debug_mark+2),a  
348f 18 03			jr .pastdmark  
3491 ..			.dmark: db "NOT"  
3494 f1			.pastdmark: pop af  
3495			endm  
# End of macro DMARK
3495						CALLMONITOR 
3495 cd 2d 17			call break_point_state  
3498				endm  
# End of macro CALLMONITOR
3498					endif 
3498					FORTH_DSP 
3498 cd 7a 1e			call macro_forth_dsp 
349b				endm 
# End of macro FORTH_DSP
349b 7e					ld a,(hl)	; get type of value on TOS 
349c fe 02				cp DS_TYPE_INUM  
349e 28 03				jr z, .noti 
34a0					NEXTW 
34a0 c3 26 20			jp macro_next 
34a3				endm 
# End of macro NEXTW
34a3			.noti:          FORTH_DSP_VALUEHL 
34a3 cd b4 1e			call macro_dsp_valuehl 
34a6				endm 
# End of macro FORTH_DSP_VALUEHL
34a6			;		push hl 
34a6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
34a6 cd 6c 1f			call macro_forth_dsp_pop 
34a9				endm 
# End of macro FORTH_DSP_POP
34a9			;		pop hl 
34a9 3e 00				ld a,0 
34ab bd					cp l 
34ac 28 04				jr z, .not2t 
34ae 2e 00				ld l, 0 
34b0 18 02				jr .notip 
34b2			 
34b2 2e ff		.not2t:		ld l, 255 
34b4			 
34b4 26 00		.notip:		ld h, 0	 
34b6			 
34b6 cd bd 1c				call forth_push_numhl 
34b9					NEXTW 
34b9 c3 26 20			jp macro_next 
34bc				endm 
# End of macro NEXTW
34bc			 
34bc			.IS: 
34bc				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
34bc 2d				db WORD_SYS_CORE+25             
34bd e2 34			dw .LZERO            
34bf 03				db 2 + 1 
34c0 .. 00			db "IS",0              
34c3				endm 
# End of macro CWHEAD
34c3			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
34c3					if DEBUG_FORTH_WORDS_KEY 
34c3						DMARK "IS." 
34c3 f5				push af  
34c4 3a d8 34			ld a, (.dmark)  
34c7 32 bd fb			ld (debug_mark),a  
34ca 3a d9 34			ld a, (.dmark+1)  
34cd 32 be fb			ld (debug_mark+1),a  
34d0 3a da 34			ld a, (.dmark+2)  
34d3 32 bf fb			ld (debug_mark+2),a  
34d6 18 03			jr .pastdmark  
34d8 ..			.dmark: db "IS."  
34db f1			.pastdmark: pop af  
34dc			endm  
# End of macro DMARK
34dc						CALLMONITOR 
34dc cd 2d 17			call break_point_state  
34df				endm  
# End of macro CALLMONITOR
34df					endif 
34df					NEXTW 
34df c3 26 20			jp macro_next 
34e2				endm 
# End of macro NEXTW
34e2			.LZERO: 
34e2				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
34e2 2d				db WORD_SYS_CORE+25             
34e3 ec 34			dw .TZERO            
34e5 03				db 2 + 1 
34e6 .. 00			db "0<",0              
34e9				endm 
# End of macro CWHEAD
34e9			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
34e9					NEXTW 
34e9 c3 26 20			jp macro_next 
34ec				endm 
# End of macro NEXTW
34ec			.TZERO: 
34ec				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
34ec 2e				db WORD_SYS_CORE+26             
34ed 33 35			dw .LESS            
34ef 03				db 2 + 1 
34f0 .. 00			db "0=",0              
34f3				endm 
# End of macro CWHEAD
34f3			; | 0= ( u -- f ) Push true if u equals 0 | TEST NO DEBUG 
34f3				; TODO add floating point number detection 
34f3					;v5 FORTH_DSP_VALUE 
34f3					if DEBUG_FORTH_WORDS_KEY 
34f3						DMARK "0=." 
34f3 f5				push af  
34f4 3a 08 35			ld a, (.dmark)  
34f7 32 bd fb			ld (debug_mark),a  
34fa 3a 09 35			ld a, (.dmark+1)  
34fd 32 be fb			ld (debug_mark+1),a  
3500 3a 0a 35			ld a, (.dmark+2)  
3503 32 bf fb			ld (debug_mark+2),a  
3506 18 03			jr .pastdmark  
3508 ..			.dmark: db "0=."  
350b f1			.pastdmark: pop af  
350c			endm  
# End of macro DMARK
350c						CALLMONITOR 
350c cd 2d 17			call break_point_state  
350f				endm  
# End of macro CALLMONITOR
350f					endif 
350f					FORTH_DSP 
350f cd 7a 1e			call macro_forth_dsp 
3512				endm 
# End of macro FORTH_DSP
3512 7e					ld a,(hl)	; get type of value on TOS 
3513 fe 02				cp DS_TYPE_INUM  
3515 28 00				jr z, .tz_inum 
3517			 
3517				if FORTH_ENABLE_FLOATMATH 
3517					jr .tz_done 
3517			 
3517				endif 
3517					 
3517			 
3517			.tz_inum: 
3517					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3517 cd b4 1e			call macro_dsp_valuehl 
351a				endm 
# End of macro FORTH_DSP_VALUEHL
351a			 
351a			;		push hl 
351a			 
351a					; destroy value TOS 
351a			 
351a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
351a cd 6c 1f			call macro_forth_dsp_pop 
351d				endm 
# End of macro FORTH_DSP_POP
351d			 
351d			;		pop hl 
351d			 
351d 3e 00				ld a,0 
351f			 
351f bd					cp l 
3520 20 08				jr nz, .tz_notzero 
3522			 
3522 bc					cp h 
3523			 
3523 20 05				jr nz, .tz_notzero 
3525			 
3525			 
3525 21 01 00				ld hl, FORTH_TRUE 
3528 18 03				jr .tz_done 
352a			 
352a 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
352d			 
352d					; push value back onto stack for another op etc 
352d			 
352d			.tz_done: 
352d cd bd 1c				call forth_push_numhl 
3530			 
3530					NEXTW 
3530 c3 26 20			jp macro_next 
3533				endm 
# End of macro NEXTW
3533			.LESS: 
3533				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3533 2f				db WORD_SYS_CORE+27             
3534 9c 35			dw .GT            
3536 02				db 1 + 1 
3537 .. 00			db "<",0              
3539				endm 
# End of macro CWHEAD
3539			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3539				; TODO add floating point number detection 
3539					if DEBUG_FORTH_WORDS_KEY 
3539						DMARK "LES" 
3539 f5				push af  
353a 3a 4e 35			ld a, (.dmark)  
353d 32 bd fb			ld (debug_mark),a  
3540 3a 4f 35			ld a, (.dmark+1)  
3543 32 be fb			ld (debug_mark+1),a  
3546 3a 50 35			ld a, (.dmark+2)  
3549 32 bf fb			ld (debug_mark+2),a  
354c 18 03			jr .pastdmark  
354e ..			.dmark: db "LES"  
3551 f1			.pastdmark: pop af  
3552			endm  
# End of macro DMARK
3552						CALLMONITOR 
3552 cd 2d 17			call break_point_state  
3555				endm  
# End of macro CALLMONITOR
3555					endif 
3555					FORTH_DSP 
3555 cd 7a 1e			call macro_forth_dsp 
3558				endm 
# End of macro FORTH_DSP
3558					;v5 FORTH_DSP_VALUE 
3558 7e					ld a,(hl)	; get type of value on TOS 
3559 fe 02				cp DS_TYPE_INUM  
355b 28 00				jr z, .less_inum 
355d			 
355d				if FORTH_ENABLE_FLOATMATH 
355d					jr .less_done 
355d			 
355d				endif 
355d					 
355d			 
355d			.less_inum: 
355d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
355d cd b4 1e			call macro_dsp_valuehl 
3560				endm 
# End of macro FORTH_DSP_VALUEHL
3560			 
3560 e5					push hl  ; u2 
3561			 
3561					; destroy value TOS 
3561			 
3561					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3561 cd 6c 1f			call macro_forth_dsp_pop 
3564				endm 
# End of macro FORTH_DSP_POP
3564			 
3564			 
3564					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3564 cd b4 1e			call macro_dsp_valuehl 
3567				endm 
# End of macro FORTH_DSP_VALUEHL
3567			 
3567 e5					push hl    ; u1 
3568			 
3568					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3568 cd 6c 1f			call macro_forth_dsp_pop 
356b				endm 
# End of macro FORTH_DSP_POP
356b			 
356b			 
356b b7			 or a      ;clear carry flag 
356c 01 00 00		 ld bc, FORTH_FALSE 
356f e1			  pop hl    ; u1 
3570 d1			  pop de    ; u2 
3571 ed 52		  sbc hl,de 
3573 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3575			 
3575 01 01 00		 ld bc, FORTH_TRUE 
3578			.lscont:  
3578 c5					push bc 
3579 e1					pop hl 
357a			 
357a					if DEBUG_FORTH_WORDS 
357a						DMARK "LT1" 
357a f5				push af  
357b 3a 8f 35			ld a, (.dmark)  
357e 32 bd fb			ld (debug_mark),a  
3581 3a 90 35			ld a, (.dmark+1)  
3584 32 be fb			ld (debug_mark+1),a  
3587 3a 91 35			ld a, (.dmark+2)  
358a 32 bf fb			ld (debug_mark+2),a  
358d 18 03			jr .pastdmark  
358f ..			.dmark: db "LT1"  
3592 f1			.pastdmark: pop af  
3593			endm  
# End of macro DMARK
3593						CALLMONITOR 
3593 cd 2d 17			call break_point_state  
3596				endm  
# End of macro CALLMONITOR
3596					endif 
3596 cd bd 1c				call forth_push_numhl 
3599			 
3599					NEXTW 
3599 c3 26 20			jp macro_next 
359c				endm 
# End of macro NEXTW
359c			.GT: 
359c				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
359c 30				db WORD_SYS_CORE+28             
359d 05 36			dw .EQUAL            
359f 02				db 1 + 1 
35a0 .. 00			db ">",0              
35a2				endm 
# End of macro CWHEAD
35a2			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
35a2				; TODO add floating point number detection 
35a2					if DEBUG_FORTH_WORDS_KEY 
35a2						DMARK "GRT" 
35a2 f5				push af  
35a3 3a b7 35			ld a, (.dmark)  
35a6 32 bd fb			ld (debug_mark),a  
35a9 3a b8 35			ld a, (.dmark+1)  
35ac 32 be fb			ld (debug_mark+1),a  
35af 3a b9 35			ld a, (.dmark+2)  
35b2 32 bf fb			ld (debug_mark+2),a  
35b5 18 03			jr .pastdmark  
35b7 ..			.dmark: db "GRT"  
35ba f1			.pastdmark: pop af  
35bb			endm  
# End of macro DMARK
35bb						CALLMONITOR 
35bb cd 2d 17			call break_point_state  
35be				endm  
# End of macro CALLMONITOR
35be					endif 
35be					FORTH_DSP 
35be cd 7a 1e			call macro_forth_dsp 
35c1				endm 
# End of macro FORTH_DSP
35c1					;FORTH_DSP_VALUE 
35c1 7e					ld a,(hl)	; get type of value on TOS 
35c2 fe 02				cp DS_TYPE_INUM  
35c4 28 00				jr z, .gt_inum 
35c6			 
35c6				if FORTH_ENABLE_FLOATMATH 
35c6					jr .gt_done 
35c6			 
35c6				endif 
35c6					 
35c6			 
35c6			.gt_inum: 
35c6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35c6 cd b4 1e			call macro_dsp_valuehl 
35c9				endm 
# End of macro FORTH_DSP_VALUEHL
35c9			 
35c9 e5					push hl  ; u2 
35ca			 
35ca					; destroy value TOS 
35ca			 
35ca					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35ca cd 6c 1f			call macro_forth_dsp_pop 
35cd				endm 
# End of macro FORTH_DSP_POP
35cd			 
35cd			 
35cd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35cd cd b4 1e			call macro_dsp_valuehl 
35d0				endm 
# End of macro FORTH_DSP_VALUEHL
35d0			 
35d0 e5					push hl    ; u1 
35d1			 
35d1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35d1 cd 6c 1f			call macro_forth_dsp_pop 
35d4				endm 
# End of macro FORTH_DSP_POP
35d4			 
35d4			 
35d4 b7			 or a      ;clear carry flag 
35d5 01 00 00		 ld bc, FORTH_FALSE 
35d8 e1			  pop hl    ; u1 
35d9 d1			  pop de    ; u2 
35da ed 52		  sbc hl,de 
35dc 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
35de			 
35de 01 01 00		 ld bc, FORTH_TRUE 
35e1			.gtcont:  
35e1 c5					push bc 
35e2 e1					pop hl 
35e3			 
35e3					if DEBUG_FORTH_WORDS 
35e3						DMARK "GT1" 
35e3 f5				push af  
35e4 3a f8 35			ld a, (.dmark)  
35e7 32 bd fb			ld (debug_mark),a  
35ea 3a f9 35			ld a, (.dmark+1)  
35ed 32 be fb			ld (debug_mark+1),a  
35f0 3a fa 35			ld a, (.dmark+2)  
35f3 32 bf fb			ld (debug_mark+2),a  
35f6 18 03			jr .pastdmark  
35f8 ..			.dmark: db "GT1"  
35fb f1			.pastdmark: pop af  
35fc			endm  
# End of macro DMARK
35fc						CALLMONITOR 
35fc cd 2d 17			call break_point_state  
35ff				endm  
# End of macro CALLMONITOR
35ff					endif 
35ff cd bd 1c				call forth_push_numhl 
3602			 
3602					NEXTW 
3602 c3 26 20			jp macro_next 
3605				endm 
# End of macro NEXTW
3605			.EQUAL: 
3605				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3605 31				db WORD_SYS_CORE+29             
3606 70 36			dw .ENDLOGIC            
3608 02				db 1 + 1 
3609 .. 00			db "=",0              
360b				endm 
# End of macro CWHEAD
360b			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
360b				; TODO add floating point number detection 
360b					if DEBUG_FORTH_WORDS_KEY 
360b						DMARK "EQ." 
360b f5				push af  
360c 3a 20 36			ld a, (.dmark)  
360f 32 bd fb			ld (debug_mark),a  
3612 3a 21 36			ld a, (.dmark+1)  
3615 32 be fb			ld (debug_mark+1),a  
3618 3a 22 36			ld a, (.dmark+2)  
361b 32 bf fb			ld (debug_mark+2),a  
361e 18 03			jr .pastdmark  
3620 ..			.dmark: db "EQ."  
3623 f1			.pastdmark: pop af  
3624			endm  
# End of macro DMARK
3624						CALLMONITOR 
3624 cd 2d 17			call break_point_state  
3627				endm  
# End of macro CALLMONITOR
3627					endif 
3627					FORTH_DSP 
3627 cd 7a 1e			call macro_forth_dsp 
362a				endm 
# End of macro FORTH_DSP
362a					;v5 FORTH_DSP_VALUE 
362a 7e					ld a,(hl)	; get type of value on TOS 
362b fe 02				cp DS_TYPE_INUM  
362d 28 00				jr z, .eq_inum 
362f			 
362f				if FORTH_ENABLE_FLOATMATH 
362f					jr .eq_done 
362f			 
362f				endif 
362f					 
362f			 
362f			.eq_inum: 
362f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
362f cd b4 1e			call macro_dsp_valuehl 
3632				endm 
# End of macro FORTH_DSP_VALUEHL
3632			 
3632 e5					push hl 
3633			 
3633					; destroy value TOS 
3633			 
3633					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3633 cd 6c 1f			call macro_forth_dsp_pop 
3636				endm 
# End of macro FORTH_DSP_POP
3636			 
3636			 
3636					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3636 cd b4 1e			call macro_dsp_valuehl 
3639				endm 
# End of macro FORTH_DSP_VALUEHL
3639			 
3639					; one value on hl get other one back 
3639			 
3639 e5					push hl 
363a			 
363a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
363a cd 6c 1f			call macro_forth_dsp_pop 
363d				endm 
# End of macro FORTH_DSP_POP
363d			 
363d 0e 00				ld c, FORTH_FALSE 
363f			 
363f e1					pop hl 
3640 d1					pop de 
3641			 
3641 7b					ld a, e 
3642 bd					cp l 
3643			 
3643 20 06				jr nz, .eq_done 
3645			 
3645 7a					ld a, d 
3646 bc					cp h 
3647			 
3647 20 02				jr nz, .eq_done 
3649			 
3649 0e 01				ld c, FORTH_TRUE 
364b					 
364b			 
364b			 
364b			.eq_done: 
364b			 
364b					; TODO push value back onto stack for another op etc 
364b			 
364b 26 00				ld h, 0 
364d 69					ld l, c 
364e					if DEBUG_FORTH_WORDS 
364e						DMARK "EQ1" 
364e f5				push af  
364f 3a 63 36			ld a, (.dmark)  
3652 32 bd fb			ld (debug_mark),a  
3655 3a 64 36			ld a, (.dmark+1)  
3658 32 be fb			ld (debug_mark+1),a  
365b 3a 65 36			ld a, (.dmark+2)  
365e 32 bf fb			ld (debug_mark+2),a  
3661 18 03			jr .pastdmark  
3663 ..			.dmark: db "EQ1"  
3666 f1			.pastdmark: pop af  
3667			endm  
# End of macro DMARK
3667						CALLMONITOR 
3667 cd 2d 17			call break_point_state  
366a				endm  
# End of macro CALLMONITOR
366a					endif 
366a cd bd 1c				call forth_push_numhl 
366d			 
366d					NEXTW 
366d c3 26 20			jp macro_next 
3670				endm 
# End of macro NEXTW
3670			 
3670			 
3670			.ENDLOGIC: 
3670			; eof 
3670			 
3670			 
# End of file forth_words_logic.asm
3670			include "forth_words_maths.asm" 
3670			 
3670			; | ## Maths Words 
3670			 
3670			.PLUS:	 
3670				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3670 15				db WORD_SYS_CORE+1             
3671 b2 36			dw .NEG            
3673 02				db 1 + 1 
3674 .. 00			db "+",0              
3676				endm 
# End of macro CWHEAD
3676			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3676					if DEBUG_FORTH_WORDS_KEY 
3676						DMARK "PLU" 
3676 f5				push af  
3677 3a 8b 36			ld a, (.dmark)  
367a 32 bd fb			ld (debug_mark),a  
367d 3a 8c 36			ld a, (.dmark+1)  
3680 32 be fb			ld (debug_mark+1),a  
3683 3a 8d 36			ld a, (.dmark+2)  
3686 32 bf fb			ld (debug_mark+2),a  
3689 18 03			jr .pastdmark  
368b ..			.dmark: db "PLU"  
368e f1			.pastdmark: pop af  
368f			endm  
# End of macro DMARK
368f						CALLMONITOR 
368f cd 2d 17			call break_point_state  
3692				endm  
# End of macro CALLMONITOR
3692					endif 
3692					; add top two values and push back result 
3692			 
3692					;for v5 FORTH_DSP_VALUE 
3692					FORTH_DSP 
3692 cd 7a 1e			call macro_forth_dsp 
3695				endm 
# End of macro FORTH_DSP
3695 7e					ld a,(hl)	; get type of value on TOS 
3696 fe 02				cp DS_TYPE_INUM  
3698 28 03				jr z, .dot_inum 
369a			 
369a					NEXTW 
369a c3 26 20			jp macro_next 
369d				endm 
# End of macro NEXTW
369d			 
369d			; float maths 
369d			 
369d				if FORTH_ENABLE_FLOATMATH 
369d						inc hl      ; now at start of numeric as string 
369d			 
369d					if DEBUG_FORTH_MATHS 
369d						DMARK "ADD" 
369d				CALLMONITOR 
369d					endif 
369d			 
369d					;ld ix, hl 
369d					call CON 
369d			 
369d			 
369d					push hl 
369d					 
369d					 
369d			 
369d						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
369d			 
369d					; get next number 
369d			 
369d						FORTH_DSP_VALUE 
369d			 
369d						inc hl      ; now at start of numeric as string 
369d			 
369d					;ld ix, hl 
369d					call CON 
369d			 
369d					push hl 
369d			 
369d			 
369d						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
369d			 
369d						; TODO do add 
369d			 
369d						call IADD 
369d			 
369d						; TODO get result back as ascii 
369d			 
369d						; TODO push result  
369d			 
369d			 
369d			 
369d						jr .dot_done 
369d				endif 
369d			 
369d			.dot_inum: 
369d			 
369d			 
369d					if DEBUG_FORTH_DOT 
369d						DMARK "+IT" 
369d				CALLMONITOR 
369d					endif 
369d			 
369d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
369d cd b4 1e			call macro_dsp_valuehl 
36a0				endm 
# End of macro FORTH_DSP_VALUEHL
36a0			 
36a0				; TODO add floating point number detection 
36a0			 
36a0 e5					push hl 
36a1			 
36a1					; destroy value TOS 
36a1			 
36a1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36a1 cd 6c 1f			call macro_forth_dsp_pop 
36a4				endm 
# End of macro FORTH_DSP_POP
36a4			 
36a4			 
36a4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36a4 cd b4 1e			call macro_dsp_valuehl 
36a7				endm 
# End of macro FORTH_DSP_VALUEHL
36a7			 
36a7					; one value on hl get other one back 
36a7			 
36a7 d1					pop de 
36a8			 
36a8					; do the add 
36a8			 
36a8 19					add hl,de 
36a9			 
36a9					; save it 
36a9			 
36a9			;		push hl	 
36a9			 
36a9					; 
36a9			 
36a9					; destroy value TOS 
36a9			 
36a9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36a9 cd 6c 1f			call macro_forth_dsp_pop 
36ac				endm 
# End of macro FORTH_DSP_POP
36ac			 
36ac					; TODO push value back onto stack for another op etc 
36ac			 
36ac			;		pop hl 
36ac			 
36ac			.dot_done: 
36ac cd bd 1c				call forth_push_numhl 
36af			 
36af					NEXTW 
36af c3 26 20			jp macro_next 
36b2				endm 
# End of macro NEXTW
36b2			.NEG: 
36b2			 
36b2				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
36b2 17				db WORD_SYS_CORE+3             
36b3 f5 36			dw .DIV            
36b5 02				db 1 + 1 
36b6 .. 00			db "-",0              
36b8				endm 
# End of macro CWHEAD
36b8			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
36b8					if DEBUG_FORTH_WORDS_KEY 
36b8						DMARK "SUB" 
36b8 f5				push af  
36b9 3a cd 36			ld a, (.dmark)  
36bc 32 bd fb			ld (debug_mark),a  
36bf 3a ce 36			ld a, (.dmark+1)  
36c2 32 be fb			ld (debug_mark+1),a  
36c5 3a cf 36			ld a, (.dmark+2)  
36c8 32 bf fb			ld (debug_mark+2),a  
36cb 18 03			jr .pastdmark  
36cd ..			.dmark: db "SUB"  
36d0 f1			.pastdmark: pop af  
36d1			endm  
# End of macro DMARK
36d1						CALLMONITOR 
36d1 cd 2d 17			call break_point_state  
36d4				endm  
# End of macro CALLMONITOR
36d4					endif 
36d4			 
36d4			 
36d4				; TODO add floating point number detection 
36d4					; v5 FORTH_DSP_VALUE 
36d4					FORTH_DSP 
36d4 cd 7a 1e			call macro_forth_dsp 
36d7				endm 
# End of macro FORTH_DSP
36d7 7e					ld a,(hl)	; get type of value on TOS 
36d8 fe 02				cp DS_TYPE_INUM  
36da 28 03				jr z, .neg_inum 
36dc			 
36dc					NEXTW 
36dc c3 26 20			jp macro_next 
36df				endm 
# End of macro NEXTW
36df			 
36df			; float maths 
36df			 
36df				if FORTH_ENABLE_FLOATMATH 
36df					jr .neg_done 
36df			 
36df				endif 
36df					 
36df			 
36df			.neg_inum: 
36df					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36df cd b4 1e			call macro_dsp_valuehl 
36e2				endm 
# End of macro FORTH_DSP_VALUEHL
36e2			 
36e2 e5					push hl 
36e3			 
36e3					; destroy value TOS 
36e3			 
36e3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36e3 cd 6c 1f			call macro_forth_dsp_pop 
36e6				endm 
# End of macro FORTH_DSP_POP
36e6			 
36e6			 
36e6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36e6 cd b4 1e			call macro_dsp_valuehl 
36e9				endm 
# End of macro FORTH_DSP_VALUEHL
36e9			 
36e9					; one value on hl get other one back 
36e9			 
36e9 d1					pop de 
36ea			 
36ea					; do the sub 
36ea			;		ex de, hl 
36ea			 
36ea ed 52				sbc hl,de 
36ec			 
36ec					; save it 
36ec			 
36ec			;		push hl	 
36ec			 
36ec					; 
36ec			 
36ec					; destroy value TOS 
36ec			 
36ec					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36ec cd 6c 1f			call macro_forth_dsp_pop 
36ef				endm 
# End of macro FORTH_DSP_POP
36ef			 
36ef					; TODO push value back onto stack for another op etc 
36ef			 
36ef			;		pop hl 
36ef			 
36ef cd bd 1c				call forth_push_numhl 
36f2			.neg_done: 
36f2			 
36f2					NEXTW 
36f2 c3 26 20			jp macro_next 
36f5				endm 
# End of macro NEXTW
36f5			.DIV: 
36f5				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
36f5 18				db WORD_SYS_CORE+4             
36f6 42 37			dw .MUL            
36f8 02				db 1 + 1 
36f9 .. 00			db "/",0              
36fb				endm 
# End of macro CWHEAD
36fb			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
36fb					if DEBUG_FORTH_WORDS_KEY 
36fb						DMARK "DIV" 
36fb f5				push af  
36fc 3a 10 37			ld a, (.dmark)  
36ff 32 bd fb			ld (debug_mark),a  
3702 3a 11 37			ld a, (.dmark+1)  
3705 32 be fb			ld (debug_mark+1),a  
3708 3a 12 37			ld a, (.dmark+2)  
370b 32 bf fb			ld (debug_mark+2),a  
370e 18 03			jr .pastdmark  
3710 ..			.dmark: db "DIV"  
3713 f1			.pastdmark: pop af  
3714			endm  
# End of macro DMARK
3714						CALLMONITOR 
3714 cd 2d 17			call break_point_state  
3717				endm  
# End of macro CALLMONITOR
3717					endif 
3717				; TODO add floating point number detection 
3717					; v5 FORTH_DSP_VALUE 
3717					FORTH_DSP 
3717 cd 7a 1e			call macro_forth_dsp 
371a				endm 
# End of macro FORTH_DSP
371a 7e					ld a,(hl)	; get type of value on TOS 
371b fe 02				cp DS_TYPE_INUM  
371d 28 03				jr z, .div_inum 
371f			 
371f				if FORTH_ENABLE_FLOATMATH 
371f					jr .div_done 
371f			 
371f				endif 
371f					NEXTW 
371f c3 26 20			jp macro_next 
3722				endm 
# End of macro NEXTW
3722			.div_inum: 
3722			 
3722					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3722 cd b4 1e			call macro_dsp_valuehl 
3725				endm 
# End of macro FORTH_DSP_VALUEHL
3725			 
3725 e5					push hl    ; to go to bc 
3726			 
3726					; destroy value TOS 
3726			 
3726					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3726 cd 6c 1f			call macro_forth_dsp_pop 
3729				endm 
# End of macro FORTH_DSP_POP
3729			 
3729			 
3729					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3729 cd b4 1e			call macro_dsp_valuehl 
372c				endm 
# End of macro FORTH_DSP_VALUEHL
372c			 
372c					; hl to go to de 
372c			 
372c e5					push hl 
372d			 
372d c1					pop bc 
372e d1					pop de		 
372f			 
372f			 
372f					if DEBUG_FORTH_MATHS 
372f						DMARK "DIV" 
372f				CALLMONITOR 
372f					endif 
372f					; one value on hl but move to a get other one back 
372f			 
372f			        
372f cd 77 0c			call Div16 
3732			 
3732			;	push af	 
3732 e5				push hl 
3733 c5				push bc 
3734			 
3734					if DEBUG_FORTH_MATHS 
3734						DMARK "DI1" 
3734				CALLMONITOR 
3734					endif 
3734			 
3734					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3734 cd 6c 1f			call macro_forth_dsp_pop 
3737				endm 
# End of macro FORTH_DSP_POP
3737			 
3737			 
3737			 
3737 e1					pop hl    ; result 
3738			 
3738 cd bd 1c				call forth_push_numhl 
373b			 
373b e1					pop hl    ; reminder 
373c			;		ld h,0 
373c			;		ld l,d 
373c			 
373c cd bd 1c				call forth_push_numhl 
373f			.div_done: 
373f					NEXTW 
373f c3 26 20			jp macro_next 
3742				endm 
# End of macro NEXTW
3742			.MUL: 
3742				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3742 19				db WORD_SYS_CORE+5             
3743 87 37			dw .MIN            
3745 02				db 1 + 1 
3746 .. 00			db "*",0              
3748				endm 
# End of macro CWHEAD
3748			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3748				; TODO add floating point number detection 
3748					if DEBUG_FORTH_WORDS_KEY 
3748						DMARK "MUL" 
3748 f5				push af  
3749 3a 5d 37			ld a, (.dmark)  
374c 32 bd fb			ld (debug_mark),a  
374f 3a 5e 37			ld a, (.dmark+1)  
3752 32 be fb			ld (debug_mark+1),a  
3755 3a 5f 37			ld a, (.dmark+2)  
3758 32 bf fb			ld (debug_mark+2),a  
375b 18 03			jr .pastdmark  
375d ..			.dmark: db "MUL"  
3760 f1			.pastdmark: pop af  
3761			endm  
# End of macro DMARK
3761						CALLMONITOR 
3761 cd 2d 17			call break_point_state  
3764				endm  
# End of macro CALLMONITOR
3764					endif 
3764					FORTH_DSP 
3764 cd 7a 1e			call macro_forth_dsp 
3767				endm 
# End of macro FORTH_DSP
3767					; v5 FORTH_DSP_VALUE 
3767 7e					ld a,(hl)	; get type of value on TOS 
3768 fe 02				cp DS_TYPE_INUM  
376a 28 03				jr z, .mul_inum 
376c			 
376c				if FORTH_ENABLE_FLOATMATH 
376c					jr .mul_done 
376c			 
376c				endif 
376c			 
376c					NEXTW 
376c c3 26 20			jp macro_next 
376f				endm 
# End of macro NEXTW
376f			.mul_inum:	 
376f			 
376f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
376f cd b4 1e			call macro_dsp_valuehl 
3772				endm 
# End of macro FORTH_DSP_VALUEHL
3772			 
3772 e5					push hl 
3773			 
3773					; destroy value TOS 
3773			 
3773					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3773 cd 6c 1f			call macro_forth_dsp_pop 
3776				endm 
# End of macro FORTH_DSP_POP
3776			 
3776			 
3776					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3776 cd b4 1e			call macro_dsp_valuehl 
3779				endm 
# End of macro FORTH_DSP_VALUEHL
3779			 
3779					; one value on hl but move to a get other one back 
3779			 
3779 7d					ld a, l 
377a			 
377a d1					pop de 
377b			 
377b					; do the mull 
377b			;		ex de, hl 
377b			 
377b cd 9d 0c				call Mult16 
377e					; save it 
377e			 
377e			;		push hl	 
377e			 
377e					; 
377e			 
377e					; destroy value TOS 
377e			 
377e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
377e cd 6c 1f			call macro_forth_dsp_pop 
3781				endm 
# End of macro FORTH_DSP_POP
3781			 
3781					; TODO push value back onto stack for another op etc 
3781			 
3781			;		pop hl 
3781			 
3781 cd bd 1c				call forth_push_numhl 
3784			 
3784			.mul_done: 
3784					NEXTW 
3784 c3 26 20			jp macro_next 
3787				endm 
# End of macro NEXTW
3787			 
3787			 
3787			 
3787			 
3787			.MIN: 
3787				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3787 49				db WORD_SYS_CORE+53             
3788 08 38			dw .MAX            
378a 04				db 3 + 1 
378b .. 00			db "MIN",0              
378f				endm 
# End of macro CWHEAD
378f			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
378f					if DEBUG_FORTH_WORDS_KEY 
378f						DMARK "MIN" 
378f f5				push af  
3790 3a a4 37			ld a, (.dmark)  
3793 32 bd fb			ld (debug_mark),a  
3796 3a a5 37			ld a, (.dmark+1)  
3799 32 be fb			ld (debug_mark+1),a  
379c 3a a6 37			ld a, (.dmark+2)  
379f 32 bf fb			ld (debug_mark+2),a  
37a2 18 03			jr .pastdmark  
37a4 ..			.dmark: db "MIN"  
37a7 f1			.pastdmark: pop af  
37a8			endm  
# End of macro DMARK
37a8						CALLMONITOR 
37a8 cd 2d 17			call break_point_state  
37ab				endm  
# End of macro CALLMONITOR
37ab					endif 
37ab					; get u2 
37ab			 
37ab					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37ab cd b4 1e			call macro_dsp_valuehl 
37ae				endm 
# End of macro FORTH_DSP_VALUEHL
37ae			 
37ae e5					push hl   ; u2 
37af			 
37af					; destroy value TOS 
37af			 
37af					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37af cd 6c 1f			call macro_forth_dsp_pop 
37b2				endm 
# End of macro FORTH_DSP_POP
37b2			 
37b2					; get u1 
37b2			 
37b2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37b2 cd b4 1e			call macro_dsp_valuehl 
37b5				endm 
# End of macro FORTH_DSP_VALUEHL
37b5			 
37b5 e5					push hl  ; u1 
37b6			 
37b6					; destroy value TOS 
37b6			 
37b6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37b6 cd 6c 1f			call macro_forth_dsp_pop 
37b9				endm 
# End of macro FORTH_DSP_POP
37b9			 
37b9 b7			 or a      ;clear carry flag 
37ba e1			  pop hl    ; u1 
37bb d1			  pop de    ; u2 
37bc e5				push hl   ; saved in case hl is lowest 
37bd ed 52		  sbc hl,de 
37bf 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
37c1			 
37c1 e1				pop hl 
37c2					if DEBUG_FORTH_WORDS 
37c2						DMARK "MIN" 
37c2 f5				push af  
37c3 3a d7 37			ld a, (.dmark)  
37c6 32 bd fb			ld (debug_mark),a  
37c9 3a d8 37			ld a, (.dmark+1)  
37cc 32 be fb			ld (debug_mark+1),a  
37cf 3a d9 37			ld a, (.dmark+2)  
37d2 32 bf fb			ld (debug_mark+2),a  
37d5 18 03			jr .pastdmark  
37d7 ..			.dmark: db "MIN"  
37da f1			.pastdmark: pop af  
37db			endm  
# End of macro DMARK
37db						CALLMONITOR 
37db cd 2d 17			call break_point_state  
37de				endm  
# End of macro CALLMONITOR
37de					endif 
37de cd bd 1c				call forth_push_numhl 
37e1			 
37e1				       NEXTW 
37e1 c3 26 20			jp macro_next 
37e4				endm 
# End of macro NEXTW
37e4			 
37e4			.mincont:  
37e4 c1				pop bc   ; tidy up 
37e5 eb				ex de , hl  
37e6					if DEBUG_FORTH_WORDS 
37e6						DMARK "MI1" 
37e6 f5				push af  
37e7 3a fb 37			ld a, (.dmark)  
37ea 32 bd fb			ld (debug_mark),a  
37ed 3a fc 37			ld a, (.dmark+1)  
37f0 32 be fb			ld (debug_mark+1),a  
37f3 3a fd 37			ld a, (.dmark+2)  
37f6 32 bf fb			ld (debug_mark+2),a  
37f9 18 03			jr .pastdmark  
37fb ..			.dmark: db "MI1"  
37fe f1			.pastdmark: pop af  
37ff			endm  
# End of macro DMARK
37ff						CALLMONITOR 
37ff cd 2d 17			call break_point_state  
3802				endm  
# End of macro CALLMONITOR
3802					endif 
3802 cd bd 1c				call forth_push_numhl 
3805			 
3805				       NEXTW 
3805 c3 26 20			jp macro_next 
3808				endm 
# End of macro NEXTW
3808			.MAX: 
3808				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3808 4a				db WORD_SYS_CORE+54             
3809 89 38			dw .RND16            
380b 04				db 3 + 1 
380c .. 00			db "MAX",0              
3810				endm 
# End of macro CWHEAD
3810			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3810					if DEBUG_FORTH_WORDS_KEY 
3810						DMARK "MAX" 
3810 f5				push af  
3811 3a 25 38			ld a, (.dmark)  
3814 32 bd fb			ld (debug_mark),a  
3817 3a 26 38			ld a, (.dmark+1)  
381a 32 be fb			ld (debug_mark+1),a  
381d 3a 27 38			ld a, (.dmark+2)  
3820 32 bf fb			ld (debug_mark+2),a  
3823 18 03			jr .pastdmark  
3825 ..			.dmark: db "MAX"  
3828 f1			.pastdmark: pop af  
3829			endm  
# End of macro DMARK
3829						CALLMONITOR 
3829 cd 2d 17			call break_point_state  
382c				endm  
# End of macro CALLMONITOR
382c					endif 
382c					; get u2 
382c			 
382c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
382c cd b4 1e			call macro_dsp_valuehl 
382f				endm 
# End of macro FORTH_DSP_VALUEHL
382f			 
382f e5					push hl   ; u2 
3830			 
3830					; destroy value TOS 
3830			 
3830					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3830 cd 6c 1f			call macro_forth_dsp_pop 
3833				endm 
# End of macro FORTH_DSP_POP
3833			 
3833					; get u1 
3833			 
3833					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3833 cd b4 1e			call macro_dsp_valuehl 
3836				endm 
# End of macro FORTH_DSP_VALUEHL
3836			 
3836 e5					push hl  ; u1 
3837			 
3837					; destroy value TOS 
3837			 
3837					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3837 cd 6c 1f			call macro_forth_dsp_pop 
383a				endm 
# End of macro FORTH_DSP_POP
383a			 
383a b7			 or a      ;clear carry flag 
383b e1			  pop hl    ; u1 
383c d1			  pop de    ; u2 
383d e5				push hl   ; saved in case hl is lowest 
383e ed 52		  sbc hl,de 
3840 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3842			 
3842 e1				pop hl 
3843					if DEBUG_FORTH_WORDS 
3843						DMARK "MAX" 
3843 f5				push af  
3844 3a 58 38			ld a, (.dmark)  
3847 32 bd fb			ld (debug_mark),a  
384a 3a 59 38			ld a, (.dmark+1)  
384d 32 be fb			ld (debug_mark+1),a  
3850 3a 5a 38			ld a, (.dmark+2)  
3853 32 bf fb			ld (debug_mark+2),a  
3856 18 03			jr .pastdmark  
3858 ..			.dmark: db "MAX"  
385b f1			.pastdmark: pop af  
385c			endm  
# End of macro DMARK
385c						CALLMONITOR 
385c cd 2d 17			call break_point_state  
385f				endm  
# End of macro CALLMONITOR
385f					endif 
385f cd bd 1c				call forth_push_numhl 
3862			 
3862				       NEXTW 
3862 c3 26 20			jp macro_next 
3865				endm 
# End of macro NEXTW
3865			 
3865			.maxcont:  
3865 c1				pop bc   ; tidy up 
3866 eb				ex de , hl  
3867					if DEBUG_FORTH_WORDS 
3867						DMARK "MA1" 
3867 f5				push af  
3868 3a 7c 38			ld a, (.dmark)  
386b 32 bd fb			ld (debug_mark),a  
386e 3a 7d 38			ld a, (.dmark+1)  
3871 32 be fb			ld (debug_mark+1),a  
3874 3a 7e 38			ld a, (.dmark+2)  
3877 32 bf fb			ld (debug_mark+2),a  
387a 18 03			jr .pastdmark  
387c ..			.dmark: db "MA1"  
387f f1			.pastdmark: pop af  
3880			endm  
# End of macro DMARK
3880						CALLMONITOR 
3880 cd 2d 17			call break_point_state  
3883				endm  
# End of macro CALLMONITOR
3883					endif 
3883 cd bd 1c				call forth_push_numhl 
3886				       NEXTW 
3886 c3 26 20			jp macro_next 
3889				endm 
# End of macro NEXTW
3889			 
3889			.RND16: 
3889				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3889 4e				db WORD_SYS_CORE+58             
388a b8 38			dw .RND8            
388c 06				db 5 + 1 
388d .. 00			db "RND16",0              
3893				endm 
# End of macro CWHEAD
3893			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3893					if DEBUG_FORTH_WORDS_KEY 
3893						DMARK "R16" 
3893 f5				push af  
3894 3a a8 38			ld a, (.dmark)  
3897 32 bd fb			ld (debug_mark),a  
389a 3a a9 38			ld a, (.dmark+1)  
389d 32 be fb			ld (debug_mark+1),a  
38a0 3a aa 38			ld a, (.dmark+2)  
38a3 32 bf fb			ld (debug_mark+2),a  
38a6 18 03			jr .pastdmark  
38a8 ..			.dmark: db "R16"  
38ab f1			.pastdmark: pop af  
38ac			endm  
# End of macro DMARK
38ac						CALLMONITOR 
38ac cd 2d 17			call break_point_state  
38af				endm  
# End of macro CALLMONITOR
38af					endif 
38af cd 41 0c				call prng16  
38b2 cd bd 1c				call forth_push_numhl 
38b5				       NEXTW 
38b5 c3 26 20			jp macro_next 
38b8				endm 
# End of macro NEXTW
38b8			.RND8: 
38b8				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
38b8 60				db WORD_SYS_CORE+76             
38b9 ed 38			dw .RND            
38bb 05				db 4 + 1 
38bc .. 00			db "RND8",0              
38c1				endm 
# End of macro CWHEAD
38c1			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
38c1					if DEBUG_FORTH_WORDS_KEY 
38c1						DMARK "RN8" 
38c1 f5				push af  
38c2 3a d6 38			ld a, (.dmark)  
38c5 32 bd fb			ld (debug_mark),a  
38c8 3a d7 38			ld a, (.dmark+1)  
38cb 32 be fb			ld (debug_mark+1),a  
38ce 3a d8 38			ld a, (.dmark+2)  
38d1 32 bf fb			ld (debug_mark+2),a  
38d4 18 03			jr .pastdmark  
38d6 ..			.dmark: db "RN8"  
38d9 f1			.pastdmark: pop af  
38da			endm  
# End of macro DMARK
38da						CALLMONITOR 
38da cd 2d 17			call break_point_state  
38dd				endm  
# End of macro CALLMONITOR
38dd					endif 
38dd 2a 3e fa				ld hl,(xrandc) 
38e0 23					inc hl 
38e1 cd 5b 0c				call xrnd 
38e4 6f					ld l,a	 
38e5 26 00				ld h,0 
38e7 cd bd 1c				call forth_push_numhl 
38ea				       NEXTW 
38ea c3 26 20			jp macro_next 
38ed				endm 
# End of macro NEXTW
38ed			.RND: 
38ed				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
38ed 60				db WORD_SYS_CORE+76             
38ee f3 39			dw .ENDMATHS            
38f0 04				db 3 + 1 
38f1 .. 00			db "RND",0              
38f5				endm 
# End of macro CWHEAD
38f5			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
38f5			 
38f5					if DEBUG_FORTH_WORDS_KEY 
38f5						DMARK "RND" 
38f5 f5				push af  
38f6 3a 0a 39			ld a, (.dmark)  
38f9 32 bd fb			ld (debug_mark),a  
38fc 3a 0b 39			ld a, (.dmark+1)  
38ff 32 be fb			ld (debug_mark+1),a  
3902 3a 0c 39			ld a, (.dmark+2)  
3905 32 bf fb			ld (debug_mark+2),a  
3908 18 03			jr .pastdmark  
390a ..			.dmark: db "RND"  
390d f1			.pastdmark: pop af  
390e			endm  
# End of macro DMARK
390e						CALLMONITOR 
390e cd 2d 17			call break_point_state  
3911				endm  
# End of macro CALLMONITOR
3911					endif 
3911					 
3911					FORTH_DSP_VALUEHL    ; upper range 
3911 cd b4 1e			call macro_dsp_valuehl 
3914				endm 
# End of macro FORTH_DSP_VALUEHL
3914			 
3914 22 42 fa				ld (LFSRSeed), hl	 
3917			 
3917					if DEBUG_FORTH_WORDS 
3917						DMARK "RN1" 
3917 f5				push af  
3918 3a 2c 39			ld a, (.dmark)  
391b 32 bd fb			ld (debug_mark),a  
391e 3a 2d 39			ld a, (.dmark+1)  
3921 32 be fb			ld (debug_mark+1),a  
3924 3a 2e 39			ld a, (.dmark+2)  
3927 32 bf fb			ld (debug_mark+2),a  
392a 18 03			jr .pastdmark  
392c ..			.dmark: db "RN1"  
392f f1			.pastdmark: pop af  
3930			endm  
# End of macro DMARK
3930						CALLMONITOR 
3930 cd 2d 17			call break_point_state  
3933				endm  
# End of macro CALLMONITOR
3933					endif 
3933					FORTH_DSP_POP 
3933 cd 6c 1f			call macro_forth_dsp_pop 
3936				endm 
# End of macro FORTH_DSP_POP
3936			 
3936					FORTH_DSP_VALUEHL    ; low range 
3936 cd b4 1e			call macro_dsp_valuehl 
3939				endm 
# End of macro FORTH_DSP_VALUEHL
3939			 
3939					if DEBUG_FORTH_WORDS 
3939						DMARK "RN2" 
3939 f5				push af  
393a 3a 4e 39			ld a, (.dmark)  
393d 32 bd fb			ld (debug_mark),a  
3940 3a 4f 39			ld a, (.dmark+1)  
3943 32 be fb			ld (debug_mark+1),a  
3946 3a 50 39			ld a, (.dmark+2)  
3949 32 bf fb			ld (debug_mark+2),a  
394c 18 03			jr .pastdmark  
394e ..			.dmark: db "RN2"  
3951 f1			.pastdmark: pop af  
3952			endm  
# End of macro DMARK
3952						CALLMONITOR 
3952 cd 2d 17			call break_point_state  
3955				endm  
# End of macro CALLMONITOR
3955					endif 
3955 22 44 fa				ld (LFSRSeed+2), hl 
3958			 
3958					FORTH_DSP_POP 
3958 cd 6c 1f			call macro_forth_dsp_pop 
395b				endm 
# End of macro FORTH_DSP_POP
395b			 
395b e5					push hl 
395c			 
395c e1			.inrange:	pop hl 
395d cd 41 0c				call prng16  
3960					if DEBUG_FORTH_WORDS 
3960						DMARK "RN3" 
3960 f5				push af  
3961 3a 75 39			ld a, (.dmark)  
3964 32 bd fb			ld (debug_mark),a  
3967 3a 76 39			ld a, (.dmark+1)  
396a 32 be fb			ld (debug_mark+1),a  
396d 3a 77 39			ld a, (.dmark+2)  
3970 32 bf fb			ld (debug_mark+2),a  
3973 18 03			jr .pastdmark  
3975 ..			.dmark: db "RN3"  
3978 f1			.pastdmark: pop af  
3979			endm  
# End of macro DMARK
3979						CALLMONITOR 
3979 cd 2d 17			call break_point_state  
397c				endm  
# End of macro CALLMONITOR
397c					endif 
397c					 
397c					; if the range is 8bit knock out the high byte 
397c			 
397c ed 5b 42 fa			ld de, (LFSRSeed)     ; check high level 
3980			 
3980 3e 00				ld a, 0 
3982 ba					cp d  
3983 20 1e				jr nz, .hirange 
3985 26 00				ld h, 0   ; knock it down to 8bit 
3987			 
3987					if DEBUG_FORTH_WORDS 
3987						DMARK "RNk" 
3987 f5				push af  
3988 3a 9c 39			ld a, (.dmark)  
398b 32 bd fb			ld (debug_mark),a  
398e 3a 9d 39			ld a, (.dmark+1)  
3991 32 be fb			ld (debug_mark+1),a  
3994 3a 9e 39			ld a, (.dmark+2)  
3997 32 bf fb			ld (debug_mark+2),a  
399a 18 03			jr .pastdmark  
399c ..			.dmark: db "RNk"  
399f f1			.pastdmark: pop af  
39a0			endm  
# End of macro DMARK
39a0						CALLMONITOR 
39a0 cd 2d 17			call break_point_state  
39a3				endm  
# End of macro CALLMONITOR
39a3					endif 
39a3			.hirange:   
39a3 e5					push hl  
39a4 b7					or a  
39a5 ed 52		                sbc hl, de 
39a7			 
39a7					;call cmp16 
39a7			 
39a7 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
39a9 e1					pop hl 
39aa e5					push hl 
39ab			 
39ab					if DEBUG_FORTH_WORDS 
39ab						DMARK "RN4" 
39ab f5				push af  
39ac 3a c0 39			ld a, (.dmark)  
39af 32 bd fb			ld (debug_mark),a  
39b2 3a c1 39			ld a, (.dmark+1)  
39b5 32 be fb			ld (debug_mark+1),a  
39b8 3a c2 39			ld a, (.dmark+2)  
39bb 32 bf fb			ld (debug_mark+2),a  
39be 18 03			jr .pastdmark  
39c0 ..			.dmark: db "RN4"  
39c3 f1			.pastdmark: pop af  
39c4			endm  
# End of macro DMARK
39c4						CALLMONITOR 
39c4 cd 2d 17			call break_point_state  
39c7				endm  
# End of macro CALLMONITOR
39c7					endif 
39c7 ed 5b 44 fa			ld de, (LFSRSeed+2)   ; check low range 
39cb					;call cmp16 
39cb				 
39cb b7					or a  
39cc ed 52		                sbc hl, de 
39ce 38 8c				jr c, .inrange 
39d0			 
39d0 e1					pop hl 
39d1					 
39d1					if DEBUG_FORTH_WORDS 
39d1						DMARK "RNd" 
39d1 f5				push af  
39d2 3a e6 39			ld a, (.dmark)  
39d5 32 bd fb			ld (debug_mark),a  
39d8 3a e7 39			ld a, (.dmark+1)  
39db 32 be fb			ld (debug_mark+1),a  
39de 3a e8 39			ld a, (.dmark+2)  
39e1 32 bf fb			ld (debug_mark+2),a  
39e4 18 03			jr .pastdmark  
39e6 ..			.dmark: db "RNd"  
39e9 f1			.pastdmark: pop af  
39ea			endm  
# End of macro DMARK
39ea						CALLMONITOR 
39ea cd 2d 17			call break_point_state  
39ed				endm  
# End of macro CALLMONITOR
39ed					endif 
39ed			 
39ed			 
39ed cd bd 1c				call forth_push_numhl 
39f0				       NEXTW 
39f0 c3 26 20			jp macro_next 
39f3				endm 
# End of macro NEXTW
39f3			 
39f3			.ENDMATHS: 
39f3			 
39f3			; eof 
39f3			 
# End of file forth_words_maths.asm
39f3			include "forth_words_display.asm" 
39f3			 
39f3			; | ## Display Words 
39f3			 
39f3			.ATP: 
39f3				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
39f3 62				db WORD_SYS_CORE+78             
39f4 6a 3a			dw .FB            
39f6 04				db 3 + 1 
39f7 .. 00			db "AT?",0              
39fb				endm 
# End of macro CWHEAD
39fb			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
39fb					if DEBUG_FORTH_WORDS_KEY 
39fb						DMARK "AT?" 
39fb f5				push af  
39fc 3a 10 3a			ld a, (.dmark)  
39ff 32 bd fb			ld (debug_mark),a  
3a02 3a 11 3a			ld a, (.dmark+1)  
3a05 32 be fb			ld (debug_mark+1),a  
3a08 3a 12 3a			ld a, (.dmark+2)  
3a0b 32 bf fb			ld (debug_mark+2),a  
3a0e 18 03			jr .pastdmark  
3a10 ..			.dmark: db "AT?"  
3a13 f1			.pastdmark: pop af  
3a14			endm  
# End of macro DMARK
3a14						CALLMONITOR 
3a14 cd 2d 17			call break_point_state  
3a17				endm  
# End of macro CALLMONITOR
3a17					endif 
3a17 3a cc f9				ld a, (f_cursor_ptr) 
3a1a			 
3a1a			if DEBUG_FORTH_WORDS 
3a1a				DMARK "AT?" 
3a1a f5				push af  
3a1b 3a 2f 3a			ld a, (.dmark)  
3a1e 32 bd fb			ld (debug_mark),a  
3a21 3a 30 3a			ld a, (.dmark+1)  
3a24 32 be fb			ld (debug_mark+1),a  
3a27 3a 31 3a			ld a, (.dmark+2)  
3a2a 32 bf fb			ld (debug_mark+2),a  
3a2d 18 03			jr .pastdmark  
3a2f ..			.dmark: db "AT?"  
3a32 f1			.pastdmark: pop af  
3a33			endm  
# End of macro DMARK
3a33				CALLMONITOR 
3a33 cd 2d 17			call break_point_state  
3a36				endm  
# End of macro CALLMONITOR
3a36			endif	 
3a36					; count the number of rows 
3a36			 
3a36 06 00				ld b, 0 
3a38 4f			.atpr:		ld c, a    ; save in case we go below zero 
3a39 d6 14				sub display_cols 
3a3b f2 41 3a				jp p, .atprunder 
3a3e 04					inc b 
3a3f 18 f7				jr .atpr 
3a41			.atprunder:	 
3a41			if DEBUG_FORTH_WORDS 
3a41				DMARK "A?2" 
3a41 f5				push af  
3a42 3a 56 3a			ld a, (.dmark)  
3a45 32 bd fb			ld (debug_mark),a  
3a48 3a 57 3a			ld a, (.dmark+1)  
3a4b 32 be fb			ld (debug_mark+1),a  
3a4e 3a 58 3a			ld a, (.dmark+2)  
3a51 32 bf fb			ld (debug_mark+2),a  
3a54 18 03			jr .pastdmark  
3a56 ..			.dmark: db "A?2"  
3a59 f1			.pastdmark: pop af  
3a5a			endm  
# End of macro DMARK
3a5a				CALLMONITOR 
3a5a cd 2d 17			call break_point_state  
3a5d				endm  
# End of macro CALLMONITOR
3a5d			endif	 
3a5d 26 00				ld h, 0 
3a5f 69					ld l, c 
3a60 cd bd 1c				call forth_push_numhl 
3a63 68					ld l, b  
3a64 cd bd 1c				call forth_push_numhl 
3a67			 
3a67			 
3a67				NEXTW 
3a67 c3 26 20			jp macro_next 
3a6a				endm 
# End of macro NEXTW
3a6a			 
3a6a			.FB: 
3a6a				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3a6a 1b				db WORD_SYS_CORE+7             
3a6b b8 3a			dw .EMIT            
3a6d 03				db 2 + 1 
3a6e .. 00			db "FB",0              
3a71				endm 
# End of macro CWHEAD
3a71			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3a71			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3a71			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3a71			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3a71					if DEBUG_FORTH_WORDS_KEY 
3a71						DMARK "FB." 
3a71 f5				push af  
3a72 3a 86 3a			ld a, (.dmark)  
3a75 32 bd fb			ld (debug_mark),a  
3a78 3a 87 3a			ld a, (.dmark+1)  
3a7b 32 be fb			ld (debug_mark+1),a  
3a7e 3a 88 3a			ld a, (.dmark+2)  
3a81 32 bf fb			ld (debug_mark+2),a  
3a84 18 03			jr .pastdmark  
3a86 ..			.dmark: db "FB."  
3a89 f1			.pastdmark: pop af  
3a8a			endm  
# End of macro DMARK
3a8a						CALLMONITOR 
3a8a cd 2d 17			call break_point_state  
3a8d				endm  
# End of macro CALLMONITOR
3a8d					endif 
3a8d			 
3a8d					FORTH_DSP_VALUEHL 
3a8d cd b4 1e			call macro_dsp_valuehl 
3a90				endm 
# End of macro FORTH_DSP_VALUEHL
3a90			 
3a90 7d					ld a, l 
3a91 fe 01				cp 1 
3a93 20 05				jr nz, .fbn1 
3a95 21 02 fb				ld hl, display_fb1 
3a98 18 15				jr .fbset 
3a9a fe 02		.fbn1:		cp 2 
3a9c 20 05				jr nz, .fbn2 
3a9e 21 60 fa				ld hl, display_fb2 
3aa1 18 0c				jr .fbset 
3aa3 fe 03		.fbn2:		cp 3 
3aa5 20 05				jr nz, .fbn3 
3aa7 21 b1 fa				ld hl, display_fb3 
3aaa 18 03				jr .fbset 
3aac			.fbn3:		 ; if invalid number select first 
3aac 21 02 fb				ld hl, display_fb1 
3aaf 22 5e fa		.fbset:		ld (display_fb_active), hl 
3ab2			 
3ab2					FORTH_DSP_POP 
3ab2 cd 6c 1f			call macro_forth_dsp_pop 
3ab5				endm 
# End of macro FORTH_DSP_POP
3ab5			 
3ab5					NEXTW 
3ab5 c3 26 20			jp macro_next 
3ab8				endm 
# End of macro NEXTW
3ab8			 
3ab8			 
3ab8			.EMIT: 
3ab8				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3ab8 1b				db WORD_SYS_CORE+7             
3ab9 09 3b			dw .DOTH            
3abb 05				db 4 + 1 
3abc .. 00			db "EMIT",0              
3ac1				endm 
# End of macro CWHEAD
3ac1			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3ac1					; get value off TOS and display it 
3ac1			 
3ac1					if DEBUG_FORTH_WORDS_KEY 
3ac1						DMARK "EMT" 
3ac1 f5				push af  
3ac2 3a d6 3a			ld a, (.dmark)  
3ac5 32 bd fb			ld (debug_mark),a  
3ac8 3a d7 3a			ld a, (.dmark+1)  
3acb 32 be fb			ld (debug_mark+1),a  
3ace 3a d8 3a			ld a, (.dmark+2)  
3ad1 32 bf fb			ld (debug_mark+2),a  
3ad4 18 03			jr .pastdmark  
3ad6 ..			.dmark: db "EMT"  
3ad9 f1			.pastdmark: pop af  
3ada			endm  
# End of macro DMARK
3ada						CALLMONITOR 
3ada cd 2d 17			call break_point_state  
3add				endm  
# End of macro CALLMONITOR
3add					endif 
3add			 
3add					FORTH_DSP_VALUEHL 
3add cd b4 1e			call macro_dsp_valuehl 
3ae0				endm 
# End of macro FORTH_DSP_VALUEHL
3ae0			 
3ae0 7d					ld a,l 
3ae1			 
3ae1					; TODO write to display 
3ae1			 
3ae1 32 a1 f1				ld (os_input), a 
3ae4 3e 00				ld a, 0 
3ae6 32 a2 f1				ld (os_input+1), a 
3ae9					 
3ae9 3a cc f9				ld a, (f_cursor_ptr) 
3aec 11 a1 f1				ld de, os_input 
3aef cd f9 0a				call str_at_display 
3af2			 
3af2			 
3af2 3a aa f9				ld a,(cli_autodisplay) 
3af5 fe 00				cp 0 
3af7 28 03				jr z, .enoupdate 
3af9 cd 09 0b						call update_display 
3afc					.enoupdate: 
3afc			 
3afc 3a cc f9				ld a, (f_cursor_ptr) 
3aff 3c					inc a 
3b00 32 cc f9				ld (f_cursor_ptr), a   ; save new pos 
3b03			 
3b03			 
3b03					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b03 cd 6c 1f			call macro_forth_dsp_pop 
3b06				endm 
# End of macro FORTH_DSP_POP
3b06			  
3b06			 
3b06					NEXTW 
3b06 c3 26 20			jp macro_next 
3b09				endm 
# End of macro NEXTW
3b09			.DOTH: 
3b09				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3b09 1c				db WORD_SYS_CORE+8             
3b0a 39 3b			dw .DOTF            
3b0c 03				db 2 + 1 
3b0d .. 00			db ".-",0              
3b10				endm 
# End of macro CWHEAD
3b10			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3b10					; get value off TOS and display it 
3b10					if DEBUG_FORTH_WORDS_KEY 
3b10						DMARK "DTD" 
3b10 f5				push af  
3b11 3a 25 3b			ld a, (.dmark)  
3b14 32 bd fb			ld (debug_mark),a  
3b17 3a 26 3b			ld a, (.dmark+1)  
3b1a 32 be fb			ld (debug_mark+1),a  
3b1d 3a 27 3b			ld a, (.dmark+2)  
3b20 32 bf fb			ld (debug_mark+2),a  
3b23 18 03			jr .pastdmark  
3b25 ..			.dmark: db "DTD"  
3b28 f1			.pastdmark: pop af  
3b29			endm  
# End of macro DMARK
3b29						CALLMONITOR 
3b29 cd 2d 17			call break_point_state  
3b2c				endm  
# End of macro CALLMONITOR
3b2c					endif 
3b2c 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3b2e 3e 00			ld a, 0 
3b30 32 ab f9			ld (cli_mvdot), a 
3b33 c3 90 3b			jp .dotgo 
3b36				NEXTW 
3b36 c3 26 20			jp macro_next 
3b39				endm 
# End of macro NEXTW
3b39			.DOTF: 
3b39				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3b39 1c				db WORD_SYS_CORE+8             
3b3a 67 3b			dw .DOT            
3b3c 03				db 2 + 1 
3b3d .. 00			db ".>",0              
3b40				endm 
# End of macro CWHEAD
3b40			        ; | .> ( u -- ) Display TOS and move the next display point with display  | WIP 
3b40					; get value off TOS and display it 
3b40			        ; TODO BUG adds extra spaces 
3b40			        ; TODO BUG handle numerics? 
3b40					if DEBUG_FORTH_WORDS_KEY 
3b40						DMARK "DTC" 
3b40 f5				push af  
3b41 3a 55 3b			ld a, (.dmark)  
3b44 32 bd fb			ld (debug_mark),a  
3b47 3a 56 3b			ld a, (.dmark+1)  
3b4a 32 be fb			ld (debug_mark+1),a  
3b4d 3a 57 3b			ld a, (.dmark+2)  
3b50 32 bf fb			ld (debug_mark+2),a  
3b53 18 03			jr .pastdmark  
3b55 ..			.dmark: db "DTC"  
3b58 f1			.pastdmark: pop af  
3b59			endm  
# End of macro DMARK
3b59						CALLMONITOR 
3b59 cd 2d 17			call break_point_state  
3b5c				endm  
# End of macro CALLMONITOR
3b5c					endif 
3b5c 3e 01			ld a, 1 
3b5e 32 ab f9			ld (cli_mvdot), a 
3b61 c3 90 3b			jp .dotgo 
3b64				NEXTW 
3b64 c3 26 20			jp macro_next 
3b67				endm 
# End of macro NEXTW
3b67			 
3b67			.DOT: 
3b67				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3b67 1c				db WORD_SYS_CORE+8             
3b68 f3 3b			dw .CLS            
3b6a 02				db 1 + 1 
3b6b .. 00			db ".",0              
3b6d				endm 
# End of macro CWHEAD
3b6d			        ; | . ( u -- ) Display TOS | DONE 
3b6d					; get value off TOS and display it 
3b6d			 
3b6d					if DEBUG_FORTH_WORDS_KEY 
3b6d						DMARK "DOT" 
3b6d f5				push af  
3b6e 3a 82 3b			ld a, (.dmark)  
3b71 32 bd fb			ld (debug_mark),a  
3b74 3a 83 3b			ld a, (.dmark+1)  
3b77 32 be fb			ld (debug_mark+1),a  
3b7a 3a 84 3b			ld a, (.dmark+2)  
3b7d 32 bf fb			ld (debug_mark+2),a  
3b80 18 03			jr .pastdmark  
3b82 ..			.dmark: db "DOT"  
3b85 f1			.pastdmark: pop af  
3b86			endm  
# End of macro DMARK
3b86						CALLMONITOR 
3b86 cd 2d 17			call break_point_state  
3b89				endm  
# End of macro CALLMONITOR
3b89					endif 
3b89 3e 00			ld a, 0 
3b8b 32 ab f9			ld (cli_mvdot), a 
3b8e 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3b90				 
3b90			 
3b90			.dotgo: 
3b90			 
3b90			; move up type to on stack for parserv5 
3b90					FORTH_DSP 
3b90 cd 7a 1e			call macro_forth_dsp 
3b93				endm 
# End of macro FORTH_DSP
3b93				;FORTH_DSP_VALUE  
3b93			 
3b93			if DEBUG_FORTH_DOT 
3b93				DMARK "DOT" 
3b93				CALLMONITOR 
3b93			endif	 
3b93			;		.print: 
3b93			 
3b93 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3b94 23				inc hl   ; position to the actual value 
3b95 fe 01			cp DS_TYPE_STR 
3b97 20 06			jr nz, .dotnum1  
3b99			 
3b99			; display string 
3b99				FORTH_DSP_VALUE  
3b99 cd 9d 1e			call macro_forth_dsp_value 
3b9c				endm 
# End of macro FORTH_DSP_VALUE
3b9c eb				ex de,hl 
3b9d 18 11			jr .dotwrite 
3b9f			 
3b9f			.dotnum1: 
3b9f fe 02			cp DS_TYPE_INUM 
3ba1 20 0c			jr nz, .dotflot 
3ba3			 
3ba3			 
3ba3			; display number 
3ba3			 
3ba3			;	push hl 
3ba3			;	call clear_display 
3ba3			;	pop hl 
3ba3			 
3ba3 5e				ld e, (hl) 
3ba4 23				inc hl 
3ba5 56				ld d, (hl) 
3ba6 21 a3 ef			ld hl, scratch 
3ba9			if DEBUG_FORTH_DOT 
3ba9				DMARK "DT1" 
3ba9				CALLMONITOR 
3ba9			endif	 
3ba9			 
3ba9 cd 27 11			call uitoa_16 
3bac eb				ex de,hl 
3bad			 
3bad			if DEBUG_FORTH_DOT 
3bad				DMARK "DT2" 
3bad				CALLMONITOR 
3bad			endif	 
3bad			 
3bad			;	ld de, os_word_scratch 
3bad 18 01			jr .dotwrite 
3baf			 
3baf 00			.dotflot:   nop 
3bb0			; TODO print floating point number 
3bb0			 
3bb0			.dotwrite:		 
3bb0			 
3bb0					; if c is set then set all '-' to spaces 
3bb0					; need to also take into account .>  
3bb0			 
3bb0 3e 01				ld a, 1 
3bb2 b9					cp c 
3bb3 20 13				jr nz, .nodashswap 
3bb5			 
3bb5					; DE has the string to write, working with HL 
3bb5			 
3bb5 06 ff				ld b, 255 
3bb7 d5					push de 
3bb8 e1					pop hl 
3bb9			 
3bb9			if DEBUG_FORTH_DOT 
3bb9				DMARK "DT-" 
3bb9				CALLMONITOR 
3bb9			endif	 
3bb9 7e			.dashscan:	ld a, (hl) 
3bba fe 00				cp 0 
3bbc 28 0a				jr z, .nodashswap 
3bbe fe 2d				cp '-' 
3bc0 20 03				jr nz, .dashskip 
3bc2 3e 20				ld a, ' ' 
3bc4 77					ld (hl), a 
3bc5 23			.dashskip:	inc hl 
3bc6			if DEBUG_FORTH_DOT 
3bc6				DMARK "D-2" 
3bc6				CALLMONITOR 
3bc6			endif	 
3bc6 10 f1				djnz .dashscan 
3bc8			 
3bc8			if DEBUG_FORTH_DOT 
3bc8				DMARK "D-1" 
3bc8				CALLMONITOR 
3bc8			endif	 
3bc8			 
3bc8			.nodashswap: 
3bc8			 
3bc8 e5					push hl   ; save string start in case we need to advance print 
3bc9			 
3bc9 3a cc f9				ld a, (f_cursor_ptr) 
3bcc cd f9 0a				call str_at_display 
3bcf 3a aa f9				ld a,(cli_autodisplay) 
3bd2 fe 00				cp 0 
3bd4 28 03				jr z, .noupdate 
3bd6 cd 09 0b						call update_display 
3bd9					.noupdate: 
3bd9			 
3bd9			 
3bd9					; see if we need to advance the print position 
3bd9			 
3bd9 e1					pop hl   ; get back string 
3bda			 
3bda 3a ab f9				ld a, (cli_mvdot) 
3bdd			if DEBUG_FORTH_DOT 
3bdd					ld e,a 
3bdd				DMARK "D>1" 
3bdd				CALLMONITOR 
3bdd			endif	 
3bdd fe 00				cp 0 
3bdf 28 0c				jr z, .noadv 
3be1					; yes, lets advance the print position 
3be1 3e 00				ld a, 0 
3be3 cd 83 11				call strlent 
3be6 3a cc f9				ld a, (f_cursor_ptr) 
3be9 85					add a,l 
3bea					;call addatohl 
3bea					;ld a, l 
3bea 32 cc f9				ld (f_cursor_ptr), a   ; save new pos 
3bed			 
3bed			if DEBUG_FORTH_DOT 
3bed				DMARK "D->" 
3bed				CALLMONITOR 
3bed			endif	 
3bed			 
3bed			.noadv:	 
3bed			 
3bed					if DEBUG_FORTH_DOT_WAIT 
3bed							call next_page_prompt 
3bed					endif	 
3bed			; TODO this pop off the stack causes a crash. i dont know why 
3bed			 
3bed			 
3bed			if DEBUG_FORTH_DOT 
3bed				DMARK "DTh" 
3bed				CALLMONITOR 
3bed			endif	 
3bed			 
3bed					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bed cd 6c 1f			call macro_forth_dsp_pop 
3bf0				endm 
# End of macro FORTH_DSP_POP
3bf0			 
3bf0			if DEBUG_FORTH_DOT 
3bf0				DMARK "DTi" 
3bf0				CALLMONITOR 
3bf0			endif	 
3bf0			 
3bf0			 
3bf0					NEXTW 
3bf0 c3 26 20			jp macro_next 
3bf3				endm 
# End of macro NEXTW
3bf3			 
3bf3			.CLS: 
3bf3				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3bf3 35				db WORD_SYS_CORE+33             
3bf4 20 3c			dw .DRAW            
3bf6 04				db 3 + 1 
3bf7 .. 00			db "CLS",0              
3bfb				endm 
# End of macro CWHEAD
3bfb			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3bfb					if DEBUG_FORTH_WORDS_KEY 
3bfb						DMARK "CLS" 
3bfb f5				push af  
3bfc 3a 10 3c			ld a, (.dmark)  
3bff 32 bd fb			ld (debug_mark),a  
3c02 3a 11 3c			ld a, (.dmark+1)  
3c05 32 be fb			ld (debug_mark+1),a  
3c08 3a 12 3c			ld a, (.dmark+2)  
3c0b 32 bf fb			ld (debug_mark+2),a  
3c0e 18 03			jr .pastdmark  
3c10 ..			.dmark: db "CLS"  
3c13 f1			.pastdmark: pop af  
3c14			endm  
# End of macro DMARK
3c14						CALLMONITOR 
3c14 cd 2d 17			call break_point_state  
3c17				endm  
# End of macro CALLMONITOR
3c17					endif 
3c17 cd e6 0a				call clear_display 
3c1a c3 2e 3d				jp .home		; and home cursor 
3c1d					NEXTW 
3c1d c3 26 20			jp macro_next 
3c20				endm 
# End of macro NEXTW
3c20			 
3c20			.DRAW: 
3c20				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3c20 36				db WORD_SYS_CORE+34             
3c21 4b 3c			dw .DUMP            
3c23 05				db 4 + 1 
3c24 .. 00			db "DRAW",0              
3c29				endm 
# End of macro CWHEAD
3c29			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3c29					if DEBUG_FORTH_WORDS_KEY 
3c29						DMARK "DRW" 
3c29 f5				push af  
3c2a 3a 3e 3c			ld a, (.dmark)  
3c2d 32 bd fb			ld (debug_mark),a  
3c30 3a 3f 3c			ld a, (.dmark+1)  
3c33 32 be fb			ld (debug_mark+1),a  
3c36 3a 40 3c			ld a, (.dmark+2)  
3c39 32 bf fb			ld (debug_mark+2),a  
3c3c 18 03			jr .pastdmark  
3c3e ..			.dmark: db "DRW"  
3c41 f1			.pastdmark: pop af  
3c42			endm  
# End of macro DMARK
3c42						CALLMONITOR 
3c42 cd 2d 17			call break_point_state  
3c45				endm  
# End of macro CALLMONITOR
3c45					endif 
3c45 cd 09 0b				call update_display 
3c48					NEXTW 
3c48 c3 26 20			jp macro_next 
3c4b				endm 
# End of macro NEXTW
3c4b			 
3c4b			.DUMP: 
3c4b				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3c4b 37				db WORD_SYS_CORE+35             
3c4c 83 3c			dw .CDUMP            
3c4e 05				db 4 + 1 
3c4f .. 00			db "DUMP",0              
3c54				endm 
# End of macro CWHEAD
3c54			; | DUMP ( x -- ) With address x display dump   | DONE 
3c54			; TODO pop address to use off of the stack 
3c54					if DEBUG_FORTH_WORDS_KEY 
3c54						DMARK "DUM" 
3c54 f5				push af  
3c55 3a 69 3c			ld a, (.dmark)  
3c58 32 bd fb			ld (debug_mark),a  
3c5b 3a 6a 3c			ld a, (.dmark+1)  
3c5e 32 be fb			ld (debug_mark+1),a  
3c61 3a 6b 3c			ld a, (.dmark+2)  
3c64 32 bf fb			ld (debug_mark+2),a  
3c67 18 03			jr .pastdmark  
3c69 ..			.dmark: db "DUM"  
3c6c f1			.pastdmark: pop af  
3c6d			endm  
# End of macro DMARK
3c6d						CALLMONITOR 
3c6d cd 2d 17			call break_point_state  
3c70				endm  
# End of macro CALLMONITOR
3c70					endif 
3c70 cd e6 0a				call clear_display 
3c73			 
3c73					; get address 
3c73			 
3c73					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c73 cd b4 1e			call macro_dsp_valuehl 
3c76				endm 
# End of macro FORTH_DSP_VALUEHL
3c76				 
3c76					; save it for cdump 
3c76			 
3c76 22 c6 f2				ld (os_cur_ptr),hl 
3c79			 
3c79					; destroy value TOS 
3c79			 
3c79					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c79 cd 6c 1f			call macro_forth_dsp_pop 
3c7c				endm 
# End of macro FORTH_DSP_POP
3c7c			 
3c7c cd 3d 1b				call dumpcont	; skip old style of param parsing	 
3c7f c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3c80					NEXTW 
3c80 c3 26 20			jp macro_next 
3c83				endm 
# End of macro NEXTW
3c83			.CDUMP: 
3c83				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3c83 38				db WORD_SYS_CORE+36             
3c84 b3 3c			dw .DAT            
3c86 06				db 5 + 1 
3c87 .. 00			db "CDUMP",0              
3c8d				endm 
# End of macro CWHEAD
3c8d			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3c8d					if DEBUG_FORTH_WORDS_KEY 
3c8d						DMARK "CDP" 
3c8d f5				push af  
3c8e 3a a2 3c			ld a, (.dmark)  
3c91 32 bd fb			ld (debug_mark),a  
3c94 3a a3 3c			ld a, (.dmark+1)  
3c97 32 be fb			ld (debug_mark+1),a  
3c9a 3a a4 3c			ld a, (.dmark+2)  
3c9d 32 bf fb			ld (debug_mark+2),a  
3ca0 18 03			jr .pastdmark  
3ca2 ..			.dmark: db "CDP"  
3ca5 f1			.pastdmark: pop af  
3ca6			endm  
# End of macro DMARK
3ca6						CALLMONITOR 
3ca6 cd 2d 17			call break_point_state  
3ca9				endm  
# End of macro CALLMONITOR
3ca9					endif 
3ca9 cd e6 0a				call clear_display 
3cac cd 3d 1b				call dumpcont	 
3caf c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
3cb0					NEXTW 
3cb0 c3 26 20			jp macro_next 
3cb3				endm 
# End of macro NEXTW
3cb3			 
3cb3			 
3cb3			 
3cb3			 
3cb3			.DAT: 
3cb3				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
3cb3 3d				db WORD_SYS_CORE+41             
3cb4 09 3d			dw .HOME            
3cb6 03				db 2 + 1 
3cb7 .. 00			db "AT",0              
3cba				endm 
# End of macro CWHEAD
3cba			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
3cba					if DEBUG_FORTH_WORDS_KEY 
3cba						DMARK "AT." 
3cba f5				push af  
3cbb 3a cf 3c			ld a, (.dmark)  
3cbe 32 bd fb			ld (debug_mark),a  
3cc1 3a d0 3c			ld a, (.dmark+1)  
3cc4 32 be fb			ld (debug_mark+1),a  
3cc7 3a d1 3c			ld a, (.dmark+2)  
3cca 32 bf fb			ld (debug_mark+2),a  
3ccd 18 03			jr .pastdmark  
3ccf ..			.dmark: db "AT."  
3cd2 f1			.pastdmark: pop af  
3cd3			endm  
# End of macro DMARK
3cd3						CALLMONITOR 
3cd3 cd 2d 17			call break_point_state  
3cd6				endm  
# End of macro CALLMONITOR
3cd6					endif 
3cd6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cd6 cd b4 1e			call macro_dsp_valuehl 
3cd9				endm 
# End of macro FORTH_DSP_VALUEHL
3cd9			 
3cd9			 
3cd9					; TODO save cursor row 
3cd9 7d					ld a,l 
3cda fe 02				cp 2 
3cdc 20 04				jr nz, .crow3 
3cde 3e 14				ld a, display_row_2 
3ce0 18 12				jr .ccol1 
3ce2 fe 03		.crow3:		cp 3 
3ce4 20 04				jr nz, .crow4 
3ce6 3e 28				ld a, display_row_3 
3ce8 18 0a				jr .ccol1 
3cea fe 04		.crow4:		cp 4 
3cec 20 04				jr nz, .crow1 
3cee 3e 3c				ld a, display_row_4 
3cf0 18 02				jr .ccol1 
3cf2 3e 00		.crow1:		ld a,display_row_1 
3cf4 f5			.ccol1:		push af			; got row offset 
3cf5 6f					ld l,a 
3cf6 26 00				ld h,0 
3cf8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cf8 cd 6c 1f			call macro_forth_dsp_pop 
3cfb				endm 
# End of macro FORTH_DSP_POP
3cfb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cfb cd b4 1e			call macro_dsp_valuehl 
3cfe				endm 
# End of macro FORTH_DSP_VALUEHL
3cfe					; TODO save cursor col 
3cfe f1					pop af 
3cff 85					add l		; add col offset 
3d00 32 cc f9				ld (f_cursor_ptr), a 
3d03					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d03 cd 6c 1f			call macro_forth_dsp_pop 
3d06				endm 
# End of macro FORTH_DSP_POP
3d06			 
3d06					; calculate  
3d06			 
3d06					NEXTW 
3d06 c3 26 20			jp macro_next 
3d09				endm 
# End of macro NEXTW
3d09			 
3d09			 
3d09			.HOME: 
3d09				CWHEAD .SPACE 45 "HOME" 4 WORD_FLAG_CODE 
3d09 41				db WORD_SYS_CORE+45             
3d0a 36 3d			dw .SPACE            
3d0c 05				db 4 + 1 
3d0d .. 00			db "HOME",0              
3d12				endm 
# End of macro CWHEAD
3d12			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
3d12					if DEBUG_FORTH_WORDS_KEY 
3d12						DMARK "HOM" 
3d12 f5				push af  
3d13 3a 27 3d			ld a, (.dmark)  
3d16 32 bd fb			ld (debug_mark),a  
3d19 3a 28 3d			ld a, (.dmark+1)  
3d1c 32 be fb			ld (debug_mark+1),a  
3d1f 3a 29 3d			ld a, (.dmark+2)  
3d22 32 bf fb			ld (debug_mark+2),a  
3d25 18 03			jr .pastdmark  
3d27 ..			.dmark: db "HOM"  
3d2a f1			.pastdmark: pop af  
3d2b			endm  
# End of macro DMARK
3d2b						CALLMONITOR 
3d2b cd 2d 17			call break_point_state  
3d2e				endm  
# End of macro CALLMONITOR
3d2e					endif 
3d2e 3e 00		.home:		ld a, 0		; and home cursor 
3d30 32 cc f9				ld (f_cursor_ptr), a 
3d33					NEXTW 
3d33 c3 26 20			jp macro_next 
3d36				endm 
# End of macro NEXTW
3d36			 
3d36			 
3d36			.SPACE: 
3d36				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
3d36 46				db WORD_SYS_CORE+50             
3d37 64 3d			dw .SPACES            
3d39 03				db 2 + 1 
3d3a .. 00			db "BL",0              
3d3d				endm 
# End of macro CWHEAD
3d3d			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
3d3d					if DEBUG_FORTH_WORDS_KEY 
3d3d						DMARK "BL." 
3d3d f5				push af  
3d3e 3a 52 3d			ld a, (.dmark)  
3d41 32 bd fb			ld (debug_mark),a  
3d44 3a 53 3d			ld a, (.dmark+1)  
3d47 32 be fb			ld (debug_mark+1),a  
3d4a 3a 54 3d			ld a, (.dmark+2)  
3d4d 32 bf fb			ld (debug_mark+2),a  
3d50 18 03			jr .pastdmark  
3d52 ..			.dmark: db "BL."  
3d55 f1			.pastdmark: pop af  
3d56			endm  
# End of macro DMARK
3d56						CALLMONITOR 
3d56 cd 2d 17			call break_point_state  
3d59				endm  
# End of macro CALLMONITOR
3d59					endif 
3d59 21 62 3d				ld hl, .blstr 
3d5c cd 2b 1d				call forth_push_str 
3d5f					 
3d5f				       NEXTW 
3d5f c3 26 20			jp macro_next 
3d62				endm 
# End of macro NEXTW
3d62			 
3d62 .. 00		.blstr: db " ", 0 
3d64			 
3d64			.SPACES: 
3d64				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
3d64 47				db WORD_SYS_CORE+51             
3d65 ff 3d			dw .SCROLL            
3d67 07				db 6 + 1 
3d68 .. 00			db "SPACES",0              
3d6f				endm 
# End of macro CWHEAD
3d6f			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | TO TEST 
3d6f					if DEBUG_FORTH_WORDS_KEY 
3d6f						DMARK "SPS" 
3d6f f5				push af  
3d70 3a 84 3d			ld a, (.dmark)  
3d73 32 bd fb			ld (debug_mark),a  
3d76 3a 85 3d			ld a, (.dmark+1)  
3d79 32 be fb			ld (debug_mark+1),a  
3d7c 3a 86 3d			ld a, (.dmark+2)  
3d7f 32 bf fb			ld (debug_mark+2),a  
3d82 18 03			jr .pastdmark  
3d84 ..			.dmark: db "SPS"  
3d87 f1			.pastdmark: pop af  
3d88			endm  
# End of macro DMARK
3d88						CALLMONITOR 
3d88 cd 2d 17			call break_point_state  
3d8b				endm  
# End of macro CALLMONITOR
3d8b					endif 
3d8b			 
3d8b			 
3d8b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d8b cd b4 1e			call macro_dsp_valuehl 
3d8e				endm 
# End of macro FORTH_DSP_VALUEHL
3d8e			 
3d8e			;		push hl    ; u 
3d8e					if DEBUG_FORTH_WORDS 
3d8e						DMARK "SPA" 
3d8e f5				push af  
3d8f 3a a3 3d			ld a, (.dmark)  
3d92 32 bd fb			ld (debug_mark),a  
3d95 3a a4 3d			ld a, (.dmark+1)  
3d98 32 be fb			ld (debug_mark+1),a  
3d9b 3a a5 3d			ld a, (.dmark+2)  
3d9e 32 bf fb			ld (debug_mark+2),a  
3da1 18 03			jr .pastdmark  
3da3 ..			.dmark: db "SPA"  
3da6 f1			.pastdmark: pop af  
3da7			endm  
# End of macro DMARK
3da7						CALLMONITOR 
3da7 cd 2d 17			call break_point_state  
3daa				endm  
# End of macro CALLMONITOR
3daa					endif 
3daa			 
3daa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3daa cd 6c 1f			call macro_forth_dsp_pop 
3dad				endm 
# End of macro FORTH_DSP_POP
3dad			;		pop hl 
3dad 4d					ld c, l 
3dae 06 00				ld b, 0 
3db0 21 a3 ef				ld hl, scratch  
3db3			 
3db3					if DEBUG_FORTH_WORDS 
3db3						DMARK "SP2" 
3db3 f5				push af  
3db4 3a c8 3d			ld a, (.dmark)  
3db7 32 bd fb			ld (debug_mark),a  
3dba 3a c9 3d			ld a, (.dmark+1)  
3dbd 32 be fb			ld (debug_mark+1),a  
3dc0 3a ca 3d			ld a, (.dmark+2)  
3dc3 32 bf fb			ld (debug_mark+2),a  
3dc6 18 03			jr .pastdmark  
3dc8 ..			.dmark: db "SP2"  
3dcb f1			.pastdmark: pop af  
3dcc			endm  
# End of macro DMARK
3dcc						CALLMONITOR 
3dcc cd 2d 17			call break_point_state  
3dcf				endm  
# End of macro CALLMONITOR
3dcf					endif 
3dcf 3e 20				ld a, ' ' 
3dd1 c5			.spaces1:	push bc 
3dd2 77					ld (hl),a 
3dd3 23					inc hl 
3dd4 c1					pop bc 
3dd5 10 fa				djnz .spaces1 
3dd7 3e 00				ld a,0 
3dd9 77					ld (hl),a 
3dda 21 a3 ef				ld hl, scratch 
3ddd					if DEBUG_FORTH_WORDS 
3ddd						DMARK "SP3" 
3ddd f5				push af  
3dde 3a f2 3d			ld a, (.dmark)  
3de1 32 bd fb			ld (debug_mark),a  
3de4 3a f3 3d			ld a, (.dmark+1)  
3de7 32 be fb			ld (debug_mark+1),a  
3dea 3a f4 3d			ld a, (.dmark+2)  
3ded 32 bf fb			ld (debug_mark+2),a  
3df0 18 03			jr .pastdmark  
3df2 ..			.dmark: db "SP3"  
3df5 f1			.pastdmark: pop af  
3df6			endm  
# End of macro DMARK
3df6						CALLMONITOR 
3df6 cd 2d 17			call break_point_state  
3df9				endm  
# End of macro CALLMONITOR
3df9					endif 
3df9 cd 26 1e				call forth_apush 
3dfc			 
3dfc				       NEXTW 
3dfc c3 26 20			jp macro_next 
3dff				endm 
# End of macro NEXTW
3dff			 
3dff			 
3dff			 
3dff			.SCROLL: 
3dff				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
3dff 53				db WORD_SYS_CORE+63             
3e00 2c 3e			dw .SCROLLD            
3e02 07				db 6 + 1 
3e03 .. 00			db "SCROLL",0              
3e0a				endm 
# End of macro CWHEAD
3e0a			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
3e0a					if DEBUG_FORTH_WORDS_KEY 
3e0a						DMARK "SCR" 
3e0a f5				push af  
3e0b 3a 1f 3e			ld a, (.dmark)  
3e0e 32 bd fb			ld (debug_mark),a  
3e11 3a 20 3e			ld a, (.dmark+1)  
3e14 32 be fb			ld (debug_mark+1),a  
3e17 3a 21 3e			ld a, (.dmark+2)  
3e1a 32 bf fb			ld (debug_mark+2),a  
3e1d 18 03			jr .pastdmark  
3e1f ..			.dmark: db "SCR"  
3e22 f1			.pastdmark: pop af  
3e23			endm  
# End of macro DMARK
3e23						CALLMONITOR 
3e23 cd 2d 17			call break_point_state  
3e26				endm  
# End of macro CALLMONITOR
3e26					endif 
3e26			 
3e26 cd a8 0a			call scroll_up 
3e29			;	call update_display 
3e29			 
3e29					NEXTW 
3e29 c3 26 20			jp macro_next 
3e2c				endm 
# End of macro NEXTW
3e2c			 
3e2c			 
3e2c			 
3e2c			;		; get dir 
3e2c			; 
3e2c			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e2c			; 
3e2c			;		push hl 
3e2c			; 
3e2c			;		; destroy value TOS 
3e2c			; 
3e2c			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e2c			; 
3e2c			;		; get count 
3e2c			; 
3e2c			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e2c			; 
3e2c			;		push hl 
3e2c			; 
3e2c			;		; destroy value TOS 
3e2c			; 
3e2c			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e2c			; 
3e2c			;		; one value on hl get other one back 
3e2c			; 
3e2c			;		pop bc    ; count 
3e2c			; 
3e2c			;		pop de   ; dir 
3e2c			; 
3e2c			; 
3e2c			;		ld b, c 
3e2c			; 
3e2c			;.scrolldir:     push bc 
3e2c			;		push de 
3e2c			; 
3e2c			;		ld a, 0 
3e2c			;		cp e 
3e2c			;		jr z, .scrollup  
3e2c			;		call scroll_down 
3e2c			;		jr .scrollnext 
3e2c			;.scrollup:	call scroll_up 
3e2c			; 
3e2c			;		 
3e2c			;.scrollnext: 
3e2c			;		pop de 
3e2c			;		pop bc 
3e2c			;		djnz .scrolldir 
3e2c			; 
3e2c			; 
3e2c			; 
3e2c			; 
3e2c			; 
3e2c			;		NEXTW 
3e2c			 
3e2c			.SCROLLD: 
3e2c				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
3e2c 53				db WORD_SYS_CORE+63             
3e2d 5a 3e			dw .ATQ            
3e2f 08				db 7 + 1 
3e30 .. 00			db "SCROLLD",0              
3e38				endm 
# End of macro CWHEAD
3e38			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
3e38					if DEBUG_FORTH_WORDS_KEY 
3e38						DMARK "SCD" 
3e38 f5				push af  
3e39 3a 4d 3e			ld a, (.dmark)  
3e3c 32 bd fb			ld (debug_mark),a  
3e3f 3a 4e 3e			ld a, (.dmark+1)  
3e42 32 be fb			ld (debug_mark+1),a  
3e45 3a 4f 3e			ld a, (.dmark+2)  
3e48 32 bf fb			ld (debug_mark+2),a  
3e4b 18 03			jr .pastdmark  
3e4d ..			.dmark: db "SCD"  
3e50 f1			.pastdmark: pop af  
3e51			endm  
# End of macro DMARK
3e51						CALLMONITOR 
3e51 cd 2d 17			call break_point_state  
3e54				endm  
# End of macro CALLMONITOR
3e54					endif 
3e54			 
3e54 cd cc 0a			call scroll_down 
3e57			;	call update_display 
3e57			 
3e57					NEXTW 
3e57 c3 26 20			jp macro_next 
3e5a				endm 
# End of macro NEXTW
3e5a			 
3e5a			 
3e5a			.ATQ: 
3e5a				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
3e5a 62				db WORD_SYS_CORE+78             
3e5b b8 3e			dw .AUTODSP            
3e5d 04				db 3 + 1 
3e5e .. 00			db "AT@",0              
3e62				endm 
# End of macro CWHEAD
3e62			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
3e62					if DEBUG_FORTH_WORDS_KEY 
3e62						DMARK "ATA" 
3e62 f5				push af  
3e63 3a 77 3e			ld a, (.dmark)  
3e66 32 bd fb			ld (debug_mark),a  
3e69 3a 78 3e			ld a, (.dmark+1)  
3e6c 32 be fb			ld (debug_mark+1),a  
3e6f 3a 79 3e			ld a, (.dmark+2)  
3e72 32 bf fb			ld (debug_mark+2),a  
3e75 18 03			jr .pastdmark  
3e77 ..			.dmark: db "ATA"  
3e7a f1			.pastdmark: pop af  
3e7b			endm  
# End of macro DMARK
3e7b						CALLMONITOR 
3e7b cd 2d 17			call break_point_state  
3e7e				endm  
# End of macro CALLMONITOR
3e7e					endif 
3e7e			 
3e7e			 
3e7e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e7e cd b4 1e			call macro_dsp_valuehl 
3e81				endm 
# End of macro FORTH_DSP_VALUEHL
3e81			 
3e81					; TODO save cursor row 
3e81 7d					ld a,l 
3e82 fe 02				cp 2 
3e84 20 04				jr nz, .crow3aq 
3e86 3e 14				ld a, display_row_2 
3e88 18 12				jr .ccol1aq 
3e8a fe 03		.crow3aq:		cp 3 
3e8c 20 04				jr nz, .crow4aq 
3e8e 3e 28				ld a, display_row_3 
3e90 18 0a				jr .ccol1aq 
3e92 fe 04		.crow4aq:		cp 4 
3e94 20 04				jr nz, .crow1aq 
3e96 3e 3c				ld a, display_row_4 
3e98 18 02				jr .ccol1aq 
3e9a 3e 00		.crow1aq:		ld a,display_row_1 
3e9c f5			.ccol1aq:		push af			; got row offset 
3e9d 6f					ld l,a 
3e9e 26 00				ld h,0 
3ea0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ea0 cd 6c 1f			call macro_forth_dsp_pop 
3ea3				endm 
# End of macro FORTH_DSP_POP
3ea3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ea3 cd b4 1e			call macro_dsp_valuehl 
3ea6				endm 
# End of macro FORTH_DSP_VALUEHL
3ea6					; TODO save cursor col 
3ea6 f1					pop af 
3ea7 85					add l		; add col offset 
3ea8			 
3ea8					; add current frame buffer address 
3ea8 2a 5e fa				ld hl, (display_fb_active) 
3eab cd 1a 0d				call addatohl 
3eae			 
3eae			 
3eae			 
3eae			 
3eae					; get char frame buffer location offset in hl 
3eae			 
3eae 7e					ld a,(hl) 
3eaf 26 00				ld h, 0 
3eb1 6f					ld l, a 
3eb2			 
3eb2 cd bd 1c				call forth_push_numhl 
3eb5			 
3eb5			 
3eb5					NEXTW 
3eb5 c3 26 20			jp macro_next 
3eb8				endm 
# End of macro NEXTW
3eb8			 
3eb8			.AUTODSP: 
3eb8				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
3eb8 63				db WORD_SYS_CORE+79             
3eb9 ce 3e			dw .MENU            
3ebb 05				db 4 + 1 
3ebc .. 00			db "ADSP",0              
3ec1				endm 
# End of macro CWHEAD
3ec1			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
3ec1			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
3ec1			 
3ec1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ec1 cd b4 1e			call macro_dsp_valuehl 
3ec4				endm 
# End of macro FORTH_DSP_VALUEHL
3ec4			 
3ec4			;		push hl 
3ec4			 
3ec4					; destroy value TOS 
3ec4			 
3ec4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ec4 cd 6c 1f			call macro_forth_dsp_pop 
3ec7				endm 
# End of macro FORTH_DSP_POP
3ec7			 
3ec7			;		pop hl 
3ec7			 
3ec7 7d					ld a,l 
3ec8 32 aa f9				ld (cli_autodisplay), a 
3ecb				       NEXTW 
3ecb c3 26 20			jp macro_next 
3ece				endm 
# End of macro NEXTW
3ece			 
3ece			.MENU: 
3ece				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
3ece 70				db WORD_SYS_CORE+92             
3ecf 77 3f			dw .ENDDISPLAY            
3ed1 05				db 4 + 1 
3ed2 .. 00			db "MENU",0              
3ed7				endm 
# End of macro CWHEAD
3ed7			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | TODO 
3ed7			 
3ed7			;		; get number of items on the stack 
3ed7			; 
3ed7				 
3ed7					FORTH_DSP_VALUEHL 
3ed7 cd b4 1e			call macro_dsp_valuehl 
3eda				endm 
# End of macro FORTH_DSP_VALUEHL
3eda				 
3eda					if DEBUG_FORTH_WORDS_KEY 
3eda						DMARK "MNU" 
3eda f5				push af  
3edb 3a ef 3e			ld a, (.dmark)  
3ede 32 bd fb			ld (debug_mark),a  
3ee1 3a f0 3e			ld a, (.dmark+1)  
3ee4 32 be fb			ld (debug_mark+1),a  
3ee7 3a f1 3e			ld a, (.dmark+2)  
3eea 32 bf fb			ld (debug_mark+2),a  
3eed 18 03			jr .pastdmark  
3eef ..			.dmark: db "MNU"  
3ef2 f1			.pastdmark: pop af  
3ef3			endm  
# End of macro DMARK
3ef3						CALLMONITOR 
3ef3 cd 2d 17			call break_point_state  
3ef6				endm  
# End of macro CALLMONITOR
3ef6					endif 
3ef6			 
3ef6 45					ld b, l	 
3ef7 05					dec b 
3ef8			 
3ef8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ef8 cd 6c 1f			call macro_forth_dsp_pop 
3efb				endm 
# End of macro FORTH_DSP_POP
3efb			 
3efb			 
3efb					; go directly through the stack to pluck out the string pointers and build an array 
3efb			 
3efb			;		FORTH_DSP 
3efb			 
3efb					; hl contains top most stack item 
3efb				 
3efb 11 a3 ef				ld de, scratch 
3efe			 
3efe			.mbuild: 
3efe			 
3efe					FORTH_DSP_VALUEHL 
3efe cd b4 1e			call macro_dsp_valuehl 
3f01				endm 
# End of macro FORTH_DSP_VALUEHL
3f01			 
3f01					if DEBUG_FORTH_WORDS 
3f01						DMARK "MN3" 
3f01 f5				push af  
3f02 3a 16 3f			ld a, (.dmark)  
3f05 32 bd fb			ld (debug_mark),a  
3f08 3a 17 3f			ld a, (.dmark+1)  
3f0b 32 be fb			ld (debug_mark+1),a  
3f0e 3a 18 3f			ld a, (.dmark+2)  
3f11 32 bf fb			ld (debug_mark+2),a  
3f14 18 03			jr .pastdmark  
3f16 ..			.dmark: db "MN3"  
3f19 f1			.pastdmark: pop af  
3f1a			endm  
# End of macro DMARK
3f1a						CALLMONITOR 
3f1a cd 2d 17			call break_point_state  
3f1d				endm  
# End of macro CALLMONITOR
3f1d					endif 
3f1d eb					ex de, hl 
3f1e 73					ld (hl), e 
3f1f 23					inc hl 
3f20 72					ld (hl), d 
3f21 23					inc hl 
3f22 eb					ex de, hl 
3f23			 
3f23					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f23 cd 6c 1f			call macro_forth_dsp_pop 
3f26				endm 
# End of macro FORTH_DSP_POP
3f26			 
3f26 10 d6				djnz .mbuild 
3f28			 
3f28					; done add term 
3f28			 
3f28 eb					ex de, hl 
3f29 36 00				ld (hl), 0 
3f2b 23					inc hl 
3f2c 36 00				ld (hl), 0 
3f2e			 
3f2e				 
3f2e					 
3f2e 21 a3 ef				ld hl, scratch 
3f31			 
3f31					if DEBUG_FORTH_WORDS 
3f31						DMARK "MNx" 
3f31 f5				push af  
3f32 3a 46 3f			ld a, (.dmark)  
3f35 32 bd fb			ld (debug_mark),a  
3f38 3a 47 3f			ld a, (.dmark+1)  
3f3b 32 be fb			ld (debug_mark+1),a  
3f3e 3a 48 3f			ld a, (.dmark+2)  
3f41 32 bf fb			ld (debug_mark+2),a  
3f44 18 03			jr .pastdmark  
3f46 ..			.dmark: db "MNx"  
3f49 f1			.pastdmark: pop af  
3f4a			endm  
# End of macro DMARK
3f4a						CALLMONITOR 
3f4a cd 2d 17			call break_point_state  
3f4d				endm  
# End of macro CALLMONITOR
3f4d					endif 
3f4d			 
3f4d			 
3f4d			 
3f4d 3e 00				ld a, 0 
3f4f cd 17 0b				call menu 
3f52			 
3f52			 
3f52 6f					ld l, a 
3f53 26 00				ld h, 0 
3f55			 
3f55					if DEBUG_FORTH_WORDS 
3f55						DMARK "MNr" 
3f55 f5				push af  
3f56 3a 6a 3f			ld a, (.dmark)  
3f59 32 bd fb			ld (debug_mark),a  
3f5c 3a 6b 3f			ld a, (.dmark+1)  
3f5f 32 be fb			ld (debug_mark+1),a  
3f62 3a 6c 3f			ld a, (.dmark+2)  
3f65 32 bf fb			ld (debug_mark+2),a  
3f68 18 03			jr .pastdmark  
3f6a ..			.dmark: db "MNr"  
3f6d f1			.pastdmark: pop af  
3f6e			endm  
# End of macro DMARK
3f6e						CALLMONITOR 
3f6e cd 2d 17			call break_point_state  
3f71				endm  
# End of macro CALLMONITOR
3f71					endif 
3f71			 
3f71 cd bd 1c				call forth_push_numhl 
3f74			 
3f74			 
3f74			 
3f74			 
3f74				       NEXTW 
3f74 c3 26 20			jp macro_next 
3f77				endm 
# End of macro NEXTW
3f77			 
3f77			 
3f77			.ENDDISPLAY: 
3f77			 
3f77			; eof 
# End of file forth_words_display.asm
3f77			include "forth_words_str.asm" 
3f77			 
3f77			; | ## String Words 
3f77			 
3f77			.PTR:   
3f77			 
3f77				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
3f77 48				db WORD_SYS_CORE+52             
3f78 a4 3f			dw .STYPE            
3f7a 04				db 3 + 1 
3f7b .. 00			db "PTR",0              
3f7f				endm 
# End of macro CWHEAD
3f7f			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
3f7f			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
3f7f			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
3f7f			 
3f7f					if DEBUG_FORTH_WORDS_KEY 
3f7f						DMARK "PTR" 
3f7f f5				push af  
3f80 3a 94 3f			ld a, (.dmark)  
3f83 32 bd fb			ld (debug_mark),a  
3f86 3a 95 3f			ld a, (.dmark+1)  
3f89 32 be fb			ld (debug_mark+1),a  
3f8c 3a 96 3f			ld a, (.dmark+2)  
3f8f 32 bf fb			ld (debug_mark+2),a  
3f92 18 03			jr .pastdmark  
3f94 ..			.dmark: db "PTR"  
3f97 f1			.pastdmark: pop af  
3f98			endm  
# End of macro DMARK
3f98						CALLMONITOR 
3f98 cd 2d 17			call break_point_state  
3f9b				endm  
# End of macro CALLMONITOR
3f9b					endif 
3f9b					FORTH_DSP_VALUEHL 
3f9b cd b4 1e			call macro_dsp_valuehl 
3f9e				endm 
# End of macro FORTH_DSP_VALUEHL
3f9e cd bd 1c				call forth_push_numhl 
3fa1			 
3fa1			 
3fa1					NEXTW 
3fa1 c3 26 20			jp macro_next 
3fa4				endm 
# End of macro NEXTW
3fa4			.STYPE: 
3fa4				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
3fa4 48				db WORD_SYS_CORE+52             
3fa5 f3 3f			dw .UPPER            
3fa7 06				db 5 + 1 
3fa8 .. 00			db "STYPE",0              
3fae				endm 
# End of macro CWHEAD
3fae			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
3fae					if DEBUG_FORTH_WORDS_KEY 
3fae						DMARK "STY" 
3fae f5				push af  
3faf 3a c3 3f			ld a, (.dmark)  
3fb2 32 bd fb			ld (debug_mark),a  
3fb5 3a c4 3f			ld a, (.dmark+1)  
3fb8 32 be fb			ld (debug_mark+1),a  
3fbb 3a c5 3f			ld a, (.dmark+2)  
3fbe 32 bf fb			ld (debug_mark+2),a  
3fc1 18 03			jr .pastdmark  
3fc3 ..			.dmark: db "STY"  
3fc6 f1			.pastdmark: pop af  
3fc7			endm  
# End of macro DMARK
3fc7						CALLMONITOR 
3fc7 cd 2d 17			call break_point_state  
3fca				endm  
# End of macro CALLMONITOR
3fca					endif 
3fca					FORTH_DSP 
3fca cd 7a 1e			call macro_forth_dsp 
3fcd				endm 
# End of macro FORTH_DSP
3fcd					;v5 FORTH_DSP_VALUE 
3fcd			 
3fcd 7e					ld a, (hl) 
3fce			 
3fce f5					push af 
3fcf			 
3fcf			; Dont destroy TOS		FORTH_DSP_POP 
3fcf			 
3fcf f1					pop af 
3fd0			 
3fd0 fe 01				cp DS_TYPE_STR 
3fd2 28 09				jr z, .typestr 
3fd4			 
3fd4 fe 02				cp DS_TYPE_INUM 
3fd6 28 0a				jr z, .typeinum 
3fd8			 
3fd8 21 f1 3f				ld hl, .tna 
3fdb 18 0a				jr .tpush 
3fdd			 
3fdd 21 ed 3f		.typestr:	ld hl, .tstr 
3fe0 18 05				jr .tpush 
3fe2 21 ef 3f		.typeinum:	ld hl, .tinum 
3fe5 18 00				jr .tpush 
3fe7			 
3fe7			.tpush: 
3fe7			 
3fe7 cd 2b 1d				call forth_push_str 
3fea			 
3fea					NEXTW 
3fea c3 26 20			jp macro_next 
3fed				endm 
# End of macro NEXTW
3fed .. 00		.tstr:	db "s",0 
3fef .. 00		.tinum:  db "i",0 
3ff1 .. 00		.tna:   db "?", 0 
3ff3			 
3ff3			 
3ff3			.UPPER: 
3ff3				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
3ff3 48				db WORD_SYS_CORE+52             
3ff4 2e 40			dw .LOWER            
3ff6 06				db 5 + 1 
3ff7 .. 00			db "UPPER",0              
3ffd				endm 
# End of macro CWHEAD
3ffd			; | UPPER ( s -- s ) Upper case string s  | DONE 
3ffd					if DEBUG_FORTH_WORDS_KEY 
3ffd						DMARK "UPR" 
3ffd f5				push af  
3ffe 3a 12 40			ld a, (.dmark)  
4001 32 bd fb			ld (debug_mark),a  
4004 3a 13 40			ld a, (.dmark+1)  
4007 32 be fb			ld (debug_mark+1),a  
400a 3a 14 40			ld a, (.dmark+2)  
400d 32 bf fb			ld (debug_mark+2),a  
4010 18 03			jr .pastdmark  
4012 ..			.dmark: db "UPR"  
4015 f1			.pastdmark: pop af  
4016			endm  
# End of macro DMARK
4016						CALLMONITOR 
4016 cd 2d 17			call break_point_state  
4019				endm  
# End of macro CALLMONITOR
4019					endif 
4019			 
4019					FORTH_DSP 
4019 cd 7a 1e			call macro_forth_dsp 
401c				endm 
# End of macro FORTH_DSP
401c					 
401c			; TODO check is string type 
401c			 
401c					FORTH_DSP_VALUEHL 
401c cd b4 1e			call macro_dsp_valuehl 
401f				endm 
# End of macro FORTH_DSP_VALUEHL
401f			; get pointer to string in hl 
401f			 
401f 7e			.toup:		ld a, (hl) 
4020 fe 00				cp 0 
4022 28 07				jr z, .toupdone 
4024			 
4024 cd 87 10				call to_upper 
4027			 
4027 77					ld (hl), a 
4028 23					inc hl 
4029 18 f4				jr .toup 
402b			 
402b					 
402b			 
402b			 
402b			; for each char convert to upper 
402b					 
402b			.toupdone: 
402b			 
402b			 
402b					NEXTW 
402b c3 26 20			jp macro_next 
402e				endm 
# End of macro NEXTW
402e			.LOWER: 
402e				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
402e 48				db WORD_SYS_CORE+52             
402f 69 40			dw .TCASE            
4031 06				db 5 + 1 
4032 .. 00			db "LOWER",0              
4038				endm 
# End of macro CWHEAD
4038			; | LOWER ( s -- s ) Lower case string s  | DONE 
4038					if DEBUG_FORTH_WORDS_KEY 
4038						DMARK "LWR" 
4038 f5				push af  
4039 3a 4d 40			ld a, (.dmark)  
403c 32 bd fb			ld (debug_mark),a  
403f 3a 4e 40			ld a, (.dmark+1)  
4042 32 be fb			ld (debug_mark+1),a  
4045 3a 4f 40			ld a, (.dmark+2)  
4048 32 bf fb			ld (debug_mark+2),a  
404b 18 03			jr .pastdmark  
404d ..			.dmark: db "LWR"  
4050 f1			.pastdmark: pop af  
4051			endm  
# End of macro DMARK
4051						CALLMONITOR 
4051 cd 2d 17			call break_point_state  
4054				endm  
# End of macro CALLMONITOR
4054					endif 
4054			 
4054					FORTH_DSP 
4054 cd 7a 1e			call macro_forth_dsp 
4057				endm 
# End of macro FORTH_DSP
4057					 
4057			; TODO check is string type 
4057			 
4057					FORTH_DSP_VALUEHL 
4057 cd b4 1e			call macro_dsp_valuehl 
405a				endm 
# End of macro FORTH_DSP_VALUEHL
405a			; get pointer to string in hl 
405a			 
405a 7e			.tolow:		ld a, (hl) 
405b fe 00				cp 0 
405d 28 07				jr z, .tolowdone 
405f			 
405f cd 90 10				call to_lower 
4062			 
4062 77					ld (hl), a 
4063 23					inc hl 
4064 18 f4				jr .tolow 
4066			 
4066					 
4066			 
4066			 
4066			; for each char convert to low 
4066					 
4066			.tolowdone: 
4066					NEXTW 
4066 c3 26 20			jp macro_next 
4069				endm 
# End of macro NEXTW
4069			.TCASE: 
4069				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4069 48				db WORD_SYS_CORE+52             
406a 9f 41			dw .SUBSTR            
406c 06				db 5 + 1 
406d .. 00			db "TCASE",0              
4073				endm 
# End of macro CWHEAD
4073			; | TCASE ( s -- s ) Title case string s  | DONE 
4073					if DEBUG_FORTH_WORDS_KEY 
4073						DMARK "TCS" 
4073 f5				push af  
4074 3a 88 40			ld a, (.dmark)  
4077 32 bd fb			ld (debug_mark),a  
407a 3a 89 40			ld a, (.dmark+1)  
407d 32 be fb			ld (debug_mark+1),a  
4080 3a 8a 40			ld a, (.dmark+2)  
4083 32 bf fb			ld (debug_mark+2),a  
4086 18 03			jr .pastdmark  
4088 ..			.dmark: db "TCS"  
408b f1			.pastdmark: pop af  
408c			endm  
# End of macro DMARK
408c						CALLMONITOR 
408c cd 2d 17			call break_point_state  
408f				endm  
# End of macro CALLMONITOR
408f					endif 
408f			 
408f					FORTH_DSP 
408f cd 7a 1e			call macro_forth_dsp 
4092				endm 
# End of macro FORTH_DSP
4092					 
4092			; TODO check is string type 
4092			 
4092					FORTH_DSP_VALUEHL 
4092 cd b4 1e			call macro_dsp_valuehl 
4095				endm 
# End of macro FORTH_DSP_VALUEHL
4095			; get pointer to string in hl 
4095			 
4095					if DEBUG_FORTH_WORDS 
4095						DMARK "TC1" 
4095 f5				push af  
4096 3a aa 40			ld a, (.dmark)  
4099 32 bd fb			ld (debug_mark),a  
409c 3a ab 40			ld a, (.dmark+1)  
409f 32 be fb			ld (debug_mark+1),a  
40a2 3a ac 40			ld a, (.dmark+2)  
40a5 32 bf fb			ld (debug_mark+2),a  
40a8 18 03			jr .pastdmark  
40aa ..			.dmark: db "TC1"  
40ad f1			.pastdmark: pop af  
40ae			endm  
# End of macro DMARK
40ae						CALLMONITOR 
40ae cd 2d 17			call break_point_state  
40b1				endm  
# End of macro CALLMONITOR
40b1					endif 
40b1			 
40b1					; first time in turn to upper case first char 
40b1			 
40b1 7e					ld a, (hl) 
40b2 c3 3c 41				jp .totsiptou 
40b5			 
40b5			 
40b5 7e			.tot:		ld a, (hl) 
40b6 fe 00				cp 0 
40b8 ca 80 41				jp z, .totdone 
40bb			 
40bb					if DEBUG_FORTH_WORDS 
40bb						DMARK "TC2" 
40bb f5				push af  
40bc 3a d0 40			ld a, (.dmark)  
40bf 32 bd fb			ld (debug_mark),a  
40c2 3a d1 40			ld a, (.dmark+1)  
40c5 32 be fb			ld (debug_mark+1),a  
40c8 3a d2 40			ld a, (.dmark+2)  
40cb 32 bf fb			ld (debug_mark+2),a  
40ce 18 03			jr .pastdmark  
40d0 ..			.dmark: db "TC2"  
40d3 f1			.pastdmark: pop af  
40d4			endm  
# End of macro DMARK
40d4						CALLMONITOR 
40d4 cd 2d 17			call break_point_state  
40d7				endm  
# End of macro CALLMONITOR
40d7					endif 
40d7					; check to see if current char is a space 
40d7			 
40d7 fe 20				cp ' ' 
40d9 28 21				jr z, .totsp 
40db cd 90 10				call to_lower 
40de					if DEBUG_FORTH_WORDS 
40de						DMARK "TC3" 
40de f5				push af  
40df 3a f3 40			ld a, (.dmark)  
40e2 32 bd fb			ld (debug_mark),a  
40e5 3a f4 40			ld a, (.dmark+1)  
40e8 32 be fb			ld (debug_mark+1),a  
40eb 3a f5 40			ld a, (.dmark+2)  
40ee 32 bf fb			ld (debug_mark+2),a  
40f1 18 03			jr .pastdmark  
40f3 ..			.dmark: db "TC3"  
40f6 f1			.pastdmark: pop af  
40f7			endm  
# End of macro DMARK
40f7						CALLMONITOR 
40f7 cd 2d 17			call break_point_state  
40fa				endm  
# End of macro CALLMONITOR
40fa					endif 
40fa 18 63				jr .totnxt 
40fc			 
40fc			.totsp:         ; on a space, find next char which should be upper 
40fc			 
40fc					if DEBUG_FORTH_WORDS 
40fc						DMARK "TC4" 
40fc f5				push af  
40fd 3a 11 41			ld a, (.dmark)  
4100 32 bd fb			ld (debug_mark),a  
4103 3a 12 41			ld a, (.dmark+1)  
4106 32 be fb			ld (debug_mark+1),a  
4109 3a 13 41			ld a, (.dmark+2)  
410c 32 bf fb			ld (debug_mark+2),a  
410f 18 03			jr .pastdmark  
4111 ..			.dmark: db "TC4"  
4114 f1			.pastdmark: pop af  
4115			endm  
# End of macro DMARK
4115						CALLMONITOR 
4115 cd 2d 17			call break_point_state  
4118				endm  
# End of macro CALLMONITOR
4118					endif 
4118					;; 
4118			 
4118 fe 20				cp ' ' 
411a 20 20				jr nz, .totsiptou 
411c 23					inc hl 
411d 7e					ld a, (hl) 
411e					if DEBUG_FORTH_WORDS 
411e						DMARK "TC5" 
411e f5				push af  
411f 3a 33 41			ld a, (.dmark)  
4122 32 bd fb			ld (debug_mark),a  
4125 3a 34 41			ld a, (.dmark+1)  
4128 32 be fb			ld (debug_mark+1),a  
412b 3a 35 41			ld a, (.dmark+2)  
412e 32 bf fb			ld (debug_mark+2),a  
4131 18 03			jr .pastdmark  
4133 ..			.dmark: db "TC5"  
4136 f1			.pastdmark: pop af  
4137			endm  
# End of macro DMARK
4137						CALLMONITOR 
4137 cd 2d 17			call break_point_state  
413a				endm  
# End of macro CALLMONITOR
413a					endif 
413a 18 c0				jr .totsp 
413c fe 00		.totsiptou:    cp 0 
413e 28 40				jr z, .totdone 
4140					; not space and not zero term so upper case it 
4140 cd 87 10				call to_upper 
4143			 
4143					if DEBUG_FORTH_WORDS 
4143						DMARK "TC6" 
4143 f5				push af  
4144 3a 58 41			ld a, (.dmark)  
4147 32 bd fb			ld (debug_mark),a  
414a 3a 59 41			ld a, (.dmark+1)  
414d 32 be fb			ld (debug_mark+1),a  
4150 3a 5a 41			ld a, (.dmark+2)  
4153 32 bf fb			ld (debug_mark+2),a  
4156 18 03			jr .pastdmark  
4158 ..			.dmark: db "TC6"  
415b f1			.pastdmark: pop af  
415c			endm  
# End of macro DMARK
415c						CALLMONITOR 
415c cd 2d 17			call break_point_state  
415f				endm  
# End of macro CALLMONITOR
415f					endif 
415f			 
415f			 
415f			.totnxt: 
415f			 
415f 77					ld (hl), a 
4160 23					inc hl 
4161					if DEBUG_FORTH_WORDS 
4161						DMARK "TC7" 
4161 f5				push af  
4162 3a 76 41			ld a, (.dmark)  
4165 32 bd fb			ld (debug_mark),a  
4168 3a 77 41			ld a, (.dmark+1)  
416b 32 be fb			ld (debug_mark+1),a  
416e 3a 78 41			ld a, (.dmark+2)  
4171 32 bf fb			ld (debug_mark+2),a  
4174 18 03			jr .pastdmark  
4176 ..			.dmark: db "TC7"  
4179 f1			.pastdmark: pop af  
417a			endm  
# End of macro DMARK
417a						CALLMONITOR 
417a cd 2d 17			call break_point_state  
417d				endm  
# End of macro CALLMONITOR
417d					endif 
417d c3 b5 40				jp .tot 
4180			 
4180					 
4180			 
4180			 
4180			; for each char convert to low 
4180					 
4180			.totdone: 
4180					if DEBUG_FORTH_WORDS 
4180						DMARK "TCd" 
4180 f5				push af  
4181 3a 95 41			ld a, (.dmark)  
4184 32 bd fb			ld (debug_mark),a  
4187 3a 96 41			ld a, (.dmark+1)  
418a 32 be fb			ld (debug_mark+1),a  
418d 3a 97 41			ld a, (.dmark+2)  
4190 32 bf fb			ld (debug_mark+2),a  
4193 18 03			jr .pastdmark  
4195 ..			.dmark: db "TCd"  
4198 f1			.pastdmark: pop af  
4199			endm  
# End of macro DMARK
4199						CALLMONITOR 
4199 cd 2d 17			call break_point_state  
419c				endm  
# End of macro CALLMONITOR
419c					endif 
419c					NEXTW 
419c c3 26 20			jp macro_next 
419f				endm 
# End of macro NEXTW
419f			 
419f			.SUBSTR: 
419f				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
419f 48				db WORD_SYS_CORE+52             
41a0 fd 41			dw .LEFT            
41a2 07				db 6 + 1 
41a3 .. 00			db "SUBSTR",0              
41aa				endm 
# End of macro CWHEAD
41aa			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
41aa			 
41aa					if DEBUG_FORTH_WORDS_KEY 
41aa						DMARK "SST" 
41aa f5				push af  
41ab 3a bf 41			ld a, (.dmark)  
41ae 32 bd fb			ld (debug_mark),a  
41b1 3a c0 41			ld a, (.dmark+1)  
41b4 32 be fb			ld (debug_mark+1),a  
41b7 3a c1 41			ld a, (.dmark+2)  
41ba 32 bf fb			ld (debug_mark+2),a  
41bd 18 03			jr .pastdmark  
41bf ..			.dmark: db "SST"  
41c2 f1			.pastdmark: pop af  
41c3			endm  
# End of macro DMARK
41c3						CALLMONITOR 
41c3 cd 2d 17			call break_point_state  
41c6				endm  
# End of macro CALLMONITOR
41c6					endif 
41c6			; TODO check string type 
41c6					FORTH_DSP_VALUEHL 
41c6 cd b4 1e			call macro_dsp_valuehl 
41c9				endm 
# End of macro FORTH_DSP_VALUEHL
41c9			 
41c9 e5					push hl      ; string length 
41ca			 
41ca					FORTH_DSP_POP 
41ca cd 6c 1f			call macro_forth_dsp_pop 
41cd				endm 
# End of macro FORTH_DSP_POP
41cd			 
41cd					FORTH_DSP_VALUEHL 
41cd cd b4 1e			call macro_dsp_valuehl 
41d0				endm 
# End of macro FORTH_DSP_VALUEHL
41d0			 
41d0 e5					push hl     ; start char 
41d1			 
41d1					FORTH_DSP_POP 
41d1 cd 6c 1f			call macro_forth_dsp_pop 
41d4				endm 
# End of macro FORTH_DSP_POP
41d4			 
41d4			 
41d4					FORTH_DSP_VALUE 
41d4 cd 9d 1e			call macro_forth_dsp_value 
41d7				endm 
# End of macro FORTH_DSP_VALUE
41d7			 
41d7 d1					pop de    ; get start post offset 
41d8			 
41d8 19					add hl, de    ; starting offset 
41d9			 
41d9 c1					pop bc 
41da c5					push bc      ; grab size of string 
41db			 
41db e5					push hl    ; save string start  
41dc			 
41dc 26 00				ld h, 0 
41de 69					ld l, c 
41df 23					inc hl 
41e0 23					inc hl 
41e1			 
41e1 cd e1 11				call malloc 
41e4				if DEBUG_FORTH_MALLOC_GUARD 
41e4 cc 93 51				call z,malloc_error 
41e7				endif 
41e7			 
41e7 eb					ex de, hl      ; save malloc area for string copy 
41e8 e1					pop hl    ; get back source 
41e9 c1					pop bc    ; get length of string back 
41ea			 
41ea d5					push de    ; save malloc area for after we push 
41eb ed b0				ldir     ; copy substr 
41ed			 
41ed			 
41ed eb					ex de, hl 
41ee 3e 00				ld a, 0 
41f0 77					ld (hl), a   ; term substr 
41f1			 
41f1					 
41f1 e1					pop hl    ; get malloc so we can push it 
41f2 e5					push hl   ; save so we can free it afterwards 
41f3			 
41f3 cd 2b 1d				call forth_push_str 
41f6			 
41f6 e1					pop hl 
41f7 cd ab 12				call free 
41fa			 
41fa					 
41fa					 
41fa			 
41fa			 
41fa					NEXTW 
41fa c3 26 20			jp macro_next 
41fd				endm 
# End of macro NEXTW
41fd			 
41fd			.LEFT: 
41fd				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
41fd 48				db WORD_SYS_CORE+52             
41fe 25 42			dw .RIGHT            
4200 05				db 4 + 1 
4201 .. 00			db "LEFT",0              
4206				endm 
# End of macro CWHEAD
4206			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
4206					if DEBUG_FORTH_WORDS_KEY 
4206						DMARK "LEF" 
4206 f5				push af  
4207 3a 1b 42			ld a, (.dmark)  
420a 32 bd fb			ld (debug_mark),a  
420d 3a 1c 42			ld a, (.dmark+1)  
4210 32 be fb			ld (debug_mark+1),a  
4213 3a 1d 42			ld a, (.dmark+2)  
4216 32 bf fb			ld (debug_mark+2),a  
4219 18 03			jr .pastdmark  
421b ..			.dmark: db "LEF"  
421e f1			.pastdmark: pop af  
421f			endm  
# End of macro DMARK
421f						CALLMONITOR 
421f cd 2d 17			call break_point_state  
4222				endm  
# End of macro CALLMONITOR
4222					endif 
4222			 
4222					NEXTW 
4222 c3 26 20			jp macro_next 
4225				endm 
# End of macro NEXTW
4225			.RIGHT: 
4225				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4225 48				db WORD_SYS_CORE+52             
4226 4e 42			dw .STR2NUM            
4228 06				db 5 + 1 
4229 .. 00			db "RIGHT",0              
422f				endm 
# End of macro CWHEAD
422f			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
422f					if DEBUG_FORTH_WORDS_KEY 
422f						DMARK "RIG" 
422f f5				push af  
4230 3a 44 42			ld a, (.dmark)  
4233 32 bd fb			ld (debug_mark),a  
4236 3a 45 42			ld a, (.dmark+1)  
4239 32 be fb			ld (debug_mark+1),a  
423c 3a 46 42			ld a, (.dmark+2)  
423f 32 bf fb			ld (debug_mark+2),a  
4242 18 03			jr .pastdmark  
4244 ..			.dmark: db "RIG"  
4247 f1			.pastdmark: pop af  
4248			endm  
# End of macro DMARK
4248						CALLMONITOR 
4248 cd 2d 17			call break_point_state  
424b				endm  
# End of macro CALLMONITOR
424b					endif 
424b			 
424b					NEXTW 
424b c3 26 20			jp macro_next 
424e				endm 
# End of macro NEXTW
424e			 
424e			 
424e			.STR2NUM: 
424e				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
424e 48				db WORD_SYS_CORE+52             
424f da 42			dw .NUM2STR            
4251 08				db 7 + 1 
4252 .. 00			db "STR2NUM",0              
425a				endm 
# End of macro CWHEAD
425a			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
425a			 
425a			 
425a			; TODO STR type check to do 
425a					if DEBUG_FORTH_WORDS_KEY 
425a						DMARK "S2N" 
425a f5				push af  
425b 3a 6f 42			ld a, (.dmark)  
425e 32 bd fb			ld (debug_mark),a  
4261 3a 70 42			ld a, (.dmark+1)  
4264 32 be fb			ld (debug_mark+1),a  
4267 3a 71 42			ld a, (.dmark+2)  
426a 32 bf fb			ld (debug_mark+2),a  
426d 18 03			jr .pastdmark  
426f ..			.dmark: db "S2N"  
4272 f1			.pastdmark: pop af  
4273			endm  
# End of macro DMARK
4273						CALLMONITOR 
4273 cd 2d 17			call break_point_state  
4276				endm  
# End of macro CALLMONITOR
4276					endif 
4276			 
4276					;FORTH_DSP 
4276					FORTH_DSP_VALUE 
4276 cd 9d 1e			call macro_forth_dsp_value 
4279				endm 
# End of macro FORTH_DSP_VALUE
4279					;inc hl 
4279			 
4279 eb					ex de, hl 
427a					if DEBUG_FORTH_WORDS 
427a						DMARK "S2a" 
427a f5				push af  
427b 3a 8f 42			ld a, (.dmark)  
427e 32 bd fb			ld (debug_mark),a  
4281 3a 90 42			ld a, (.dmark+1)  
4284 32 be fb			ld (debug_mark+1),a  
4287 3a 91 42			ld a, (.dmark+2)  
428a 32 bf fb			ld (debug_mark+2),a  
428d 18 03			jr .pastdmark  
428f ..			.dmark: db "S2a"  
4292 f1			.pastdmark: pop af  
4293			endm  
# End of macro DMARK
4293						CALLMONITOR 
4293 cd 2d 17			call break_point_state  
4296				endm  
# End of macro CALLMONITOR
4296					endif 
4296 cd 0f 11				call string_to_uint16 
4299			 
4299					if DEBUG_FORTH_WORDS 
4299						DMARK "S2b" 
4299 f5				push af  
429a 3a ae 42			ld a, (.dmark)  
429d 32 bd fb			ld (debug_mark),a  
42a0 3a af 42			ld a, (.dmark+1)  
42a3 32 be fb			ld (debug_mark+1),a  
42a6 3a b0 42			ld a, (.dmark+2)  
42a9 32 bf fb			ld (debug_mark+2),a  
42ac 18 03			jr .pastdmark  
42ae ..			.dmark: db "S2b"  
42b1 f1			.pastdmark: pop af  
42b2			endm  
# End of macro DMARK
42b2						CALLMONITOR 
42b2 cd 2d 17			call break_point_state  
42b5				endm  
# End of macro CALLMONITOR
42b5					endif 
42b5			;		push hl 
42b5					FORTH_DSP_POP 
42b5 cd 6c 1f			call macro_forth_dsp_pop 
42b8				endm 
# End of macro FORTH_DSP_POP
42b8			;		pop hl 
42b8					 
42b8					if DEBUG_FORTH_WORDS 
42b8						DMARK "S2b" 
42b8 f5				push af  
42b9 3a cd 42			ld a, (.dmark)  
42bc 32 bd fb			ld (debug_mark),a  
42bf 3a ce 42			ld a, (.dmark+1)  
42c2 32 be fb			ld (debug_mark+1),a  
42c5 3a cf 42			ld a, (.dmark+2)  
42c8 32 bf fb			ld (debug_mark+2),a  
42cb 18 03			jr .pastdmark  
42cd ..			.dmark: db "S2b"  
42d0 f1			.pastdmark: pop af  
42d1			endm  
# End of macro DMARK
42d1						CALLMONITOR 
42d1 cd 2d 17			call break_point_state  
42d4				endm  
# End of macro CALLMONITOR
42d4					endif 
42d4 cd bd 1c				call forth_push_numhl	 
42d7			 
42d7				 
42d7				       NEXTW 
42d7 c3 26 20			jp macro_next 
42da				endm 
# End of macro NEXTW
42da			.NUM2STR: 
42da				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
42da 48				db WORD_SYS_CORE+52             
42db e9 42			dw .CONCAT            
42dd 08				db 7 + 1 
42de .. 00			db "NUM2STR",0              
42e6				endm 
# End of macro CWHEAD
42e6			; | NUM2STR ( n -- s ) Convert a number on TOS to string | NOT DOING 
42e6			 
42e6			;		; malloc a string to target 
42e6			;		ld hl, 10     ; TODO max string size should be fine 
42e6			;		call malloc 
42e6			;		push hl    ; save malloc location 
42e6			; 
42e6			; 
42e6			;; TODO check int type 
42e6			;		FORTH_DSP_VALUEHL 
42e6			;		ld a, l 
42e6			;		call DispAToASCII   
42e6			;;TODO need to chage above call to dump into string 
42e6			; 
42e6			; 
42e6			 
42e6				       NEXTW 
42e6 c3 26 20			jp macro_next 
42e9				endm 
# End of macro NEXTW
42e9			 
42e9			.CONCAT: 
42e9				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
42e9 48				db WORD_SYS_CORE+52             
42ea 9c 43			dw .FIND            
42ec 07				db 6 + 1 
42ed .. 00			db "CONCAT",0              
42f4				endm 
# End of macro CWHEAD
42f4			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
42f4			 
42f4			; TODO check string type 
42f4			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
42f4			 
42f4					if DEBUG_FORTH_WORDS_KEY 
42f4						DMARK "CON" 
42f4 f5				push af  
42f5 3a 09 43			ld a, (.dmark)  
42f8 32 bd fb			ld (debug_mark),a  
42fb 3a 0a 43			ld a, (.dmark+1)  
42fe 32 be fb			ld (debug_mark+1),a  
4301 3a 0b 43			ld a, (.dmark+2)  
4304 32 bf fb			ld (debug_mark+2),a  
4307 18 03			jr .pastdmark  
4309 ..			.dmark: db "CON"  
430c f1			.pastdmark: pop af  
430d			endm  
# End of macro DMARK
430d						CALLMONITOR 
430d cd 2d 17			call break_point_state  
4310				endm  
# End of macro CALLMONITOR
4310					endif 
4310			 
4310			 
4310					FORTH_DSP_VALUE 
4310 cd 9d 1e			call macro_forth_dsp_value 
4313				endm 
# End of macro FORTH_DSP_VALUE
4313 e5					push hl   ; s2 
4314			 
4314					FORTH_DSP_POP 
4314 cd 6c 1f			call macro_forth_dsp_pop 
4317				endm 
# End of macro FORTH_DSP_POP
4317			 
4317					FORTH_DSP_VALUE 
4317 cd 9d 1e			call macro_forth_dsp_value 
431a				endm 
# End of macro FORTH_DSP_VALUE
431a			 
431a e5					push hl   ; s1 
431b			 
431b					FORTH_DSP_POP 
431b cd 6c 1f			call macro_forth_dsp_pop 
431e				endm 
# End of macro FORTH_DSP_POP
431e					 
431e			 
431e					; copy s1 
431e			 
431e				 
431e					; save ptr 
431e e1					pop hl  
431f e5					push hl 
4320 3e 00				ld a, 0 
4322 cd 83 11				call strlent 
4325					;inc hl    ; zer0 
4325 06 00				ld b, 0 
4327 4d					ld c, l 
4328 e1					pop hl		 
4329 11 a3 ef				ld de, scratch	 
432c					if DEBUG_FORTH_WORDS 
432c						DMARK "CO1" 
432c f5				push af  
432d 3a 41 43			ld a, (.dmark)  
4330 32 bd fb			ld (debug_mark),a  
4333 3a 42 43			ld a, (.dmark+1)  
4336 32 be fb			ld (debug_mark+1),a  
4339 3a 43 43			ld a, (.dmark+2)  
433c 32 bf fb			ld (debug_mark+2),a  
433f 18 03			jr .pastdmark  
4341 ..			.dmark: db "CO1"  
4344 f1			.pastdmark: pop af  
4345			endm  
# End of macro DMARK
4345						CALLMONITOR 
4345 cd 2d 17			call break_point_state  
4348				endm  
# End of macro CALLMONITOR
4348					endif 
4348 ed b0				ldir 
434a			 
434a e1					pop hl 
434b e5					push hl 
434c d5					push de 
434d			 
434d			 
434d 3e 00				ld a, 0 
434f cd 83 11				call strlent 
4352 23					inc hl    ; zer0 
4353 23					inc hl 
4354 06 00				ld b, 0 
4356 4d					ld c, l 
4357 d1					pop de 
4358 e1					pop hl		 
4359					if DEBUG_FORTH_WORDS 
4359						DMARK "CO2" 
4359 f5				push af  
435a 3a 6e 43			ld a, (.dmark)  
435d 32 bd fb			ld (debug_mark),a  
4360 3a 6f 43			ld a, (.dmark+1)  
4363 32 be fb			ld (debug_mark+1),a  
4366 3a 70 43			ld a, (.dmark+2)  
4369 32 bf fb			ld (debug_mark+2),a  
436c 18 03			jr .pastdmark  
436e ..			.dmark: db "CO2"  
4371 f1			.pastdmark: pop af  
4372			endm  
# End of macro DMARK
4372						CALLMONITOR 
4372 cd 2d 17			call break_point_state  
4375				endm  
# End of macro CALLMONITOR
4375					endif 
4375 ed b0				ldir 
4377			 
4377			 
4377			 
4377 21 a3 ef				ld hl, scratch 
437a					if DEBUG_FORTH_WORDS 
437a						DMARK "CO5" 
437a f5				push af  
437b 3a 8f 43			ld a, (.dmark)  
437e 32 bd fb			ld (debug_mark),a  
4381 3a 90 43			ld a, (.dmark+1)  
4384 32 be fb			ld (debug_mark+1),a  
4387 3a 91 43			ld a, (.dmark+2)  
438a 32 bf fb			ld (debug_mark+2),a  
438d 18 03			jr .pastdmark  
438f ..			.dmark: db "CO5"  
4392 f1			.pastdmark: pop af  
4393			endm  
# End of macro DMARK
4393						CALLMONITOR 
4393 cd 2d 17			call break_point_state  
4396				endm  
# End of macro CALLMONITOR
4396					endif 
4396			 
4396 cd 2b 1d				call forth_push_str 
4399			 
4399			 
4399			 
4399			 
4399				       NEXTW 
4399 c3 26 20			jp macro_next 
439c				endm 
# End of macro NEXTW
439c			 
439c			 
439c			.FIND: 
439c				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
439c 4b				db WORD_SYS_CORE+55             
439d 5a 44			dw .LEN            
439f 05				db 4 + 1 
43a0 .. 00			db "FIND",0              
43a5				endm 
# End of macro CWHEAD
43a5			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
43a5			 
43a5					if DEBUG_FORTH_WORDS_KEY 
43a5						DMARK "FND" 
43a5 f5				push af  
43a6 3a ba 43			ld a, (.dmark)  
43a9 32 bd fb			ld (debug_mark),a  
43ac 3a bb 43			ld a, (.dmark+1)  
43af 32 be fb			ld (debug_mark+1),a  
43b2 3a bc 43			ld a, (.dmark+2)  
43b5 32 bf fb			ld (debug_mark+2),a  
43b8 18 03			jr .pastdmark  
43ba ..			.dmark: db "FND"  
43bd f1			.pastdmark: pop af  
43be			endm  
# End of macro DMARK
43be						CALLMONITOR 
43be cd 2d 17			call break_point_state  
43c1				endm  
# End of macro CALLMONITOR
43c1					endif 
43c1			 
43c1			; TODO check string type 
43c1					FORTH_DSP_VALUE 
43c1 cd 9d 1e			call macro_forth_dsp_value 
43c4				endm 
# End of macro FORTH_DSP_VALUE
43c4			 
43c4 e5					push hl    
43c5 7e					ld a,(hl)    ; char to find   
43c6			; TODO change char to substr 
43c6			 
43c6 f5					push af 
43c7					 
43c7			 
43c7			 
43c7					if DEBUG_FORTH_WORDS 
43c7						DMARK "FN1" 
43c7 f5				push af  
43c8 3a dc 43			ld a, (.dmark)  
43cb 32 bd fb			ld (debug_mark),a  
43ce 3a dd 43			ld a, (.dmark+1)  
43d1 32 be fb			ld (debug_mark+1),a  
43d4 3a de 43			ld a, (.dmark+2)  
43d7 32 bf fb			ld (debug_mark+2),a  
43da 18 03			jr .pastdmark  
43dc ..			.dmark: db "FN1"  
43df f1			.pastdmark: pop af  
43e0			endm  
# End of macro DMARK
43e0						CALLMONITOR 
43e0 cd 2d 17			call break_point_state  
43e3				endm  
# End of macro CALLMONITOR
43e3					endif 
43e3			 
43e3					FORTH_DSP_POP 
43e3 cd 6c 1f			call macro_forth_dsp_pop 
43e6				endm 
# End of macro FORTH_DSP_POP
43e6			 
43e6					; string to search 
43e6			 
43e6					FORTH_DSP_VALUE 
43e6 cd 9d 1e			call macro_forth_dsp_value 
43e9				endm 
# End of macro FORTH_DSP_VALUE
43e9			 
43e9 d1					pop de  ; d is char to find  
43ea			 
43ea					if DEBUG_FORTH_WORDS 
43ea						DMARK "FN2" 
43ea f5				push af  
43eb 3a ff 43			ld a, (.dmark)  
43ee 32 bd fb			ld (debug_mark),a  
43f1 3a 00 44			ld a, (.dmark+1)  
43f4 32 be fb			ld (debug_mark+1),a  
43f7 3a 01 44			ld a, (.dmark+2)  
43fa 32 bf fb			ld (debug_mark+2),a  
43fd 18 03			jr .pastdmark  
43ff ..			.dmark: db "FN2"  
4402 f1			.pastdmark: pop af  
4403			endm  
# End of macro DMARK
4403						CALLMONITOR 
4403 cd 2d 17			call break_point_state  
4406				endm  
# End of macro CALLMONITOR
4406					endif 
4406					 
4406 01 00 00				ld bc, 0 
4409 7e			.findchar:      ld a,(hl) 
440a fe 00				cp 0   		 
440c 28 27				jr z, .finddone     
440e ba					cp d 
440f 28 20				jr z, .foundchar 
4411 03					inc bc 
4412 23					inc hl 
4413					if DEBUG_FORTH_WORDS 
4413						DMARK "FN3" 
4413 f5				push af  
4414 3a 28 44			ld a, (.dmark)  
4417 32 bd fb			ld (debug_mark),a  
441a 3a 29 44			ld a, (.dmark+1)  
441d 32 be fb			ld (debug_mark+1),a  
4420 3a 2a 44			ld a, (.dmark+2)  
4423 32 bf fb			ld (debug_mark+2),a  
4426 18 03			jr .pastdmark  
4428 ..			.dmark: db "FN3"  
442b f1			.pastdmark: pop af  
442c			endm  
# End of macro DMARK
442c						CALLMONITOR 
442c cd 2d 17			call break_point_state  
442f				endm  
# End of macro CALLMONITOR
442f					endif 
442f 18 d8				jr .findchar 
4431			 
4431			 
4431 c5			.foundchar:	push bc 
4432 e1					pop hl 
4433 18 03				jr .findexit 
4435			 
4435			 
4435							 
4435			 
4435			.finddone:     ; got to end of string with no find 
4435 21 00 00				ld hl, 0 
4438			.findexit: 
4438			 
4438					if DEBUG_FORTH_WORDS 
4438						DMARK "FNd" 
4438 f5				push af  
4439 3a 4d 44			ld a, (.dmark)  
443c 32 bd fb			ld (debug_mark),a  
443f 3a 4e 44			ld a, (.dmark+1)  
4442 32 be fb			ld (debug_mark+1),a  
4445 3a 4f 44			ld a, (.dmark+2)  
4448 32 bf fb			ld (debug_mark+2),a  
444b 18 03			jr .pastdmark  
444d ..			.dmark: db "FNd"  
4450 f1			.pastdmark: pop af  
4451			endm  
# End of macro DMARK
4451						CALLMONITOR 
4451 cd 2d 17			call break_point_state  
4454				endm  
# End of macro CALLMONITOR
4454					endif 
4454 cd bd 1c			call forth_push_numhl 
4457			 
4457				       NEXTW 
4457 c3 26 20			jp macro_next 
445a				endm 
# End of macro NEXTW
445a			 
445a			.LEN: 
445a				CWHEAD .CHAR 56 "COUNT" 5 WORD_FLAG_CODE 
445a 4c				db WORD_SYS_CORE+56             
445b 8f 44			dw .CHAR            
445d 06				db 5 + 1 
445e .. 00			db "COUNT",0              
4464				endm 
# End of macro CWHEAD
4464			; | COUNT (  u1 -- u2 ) Push the length of the string on TOS | DONE 
4464			 
4464					if DEBUG_FORTH_WORDS_KEY 
4464						DMARK "CNT" 
4464 f5				push af  
4465 3a 79 44			ld a, (.dmark)  
4468 32 bd fb			ld (debug_mark),a  
446b 3a 7a 44			ld a, (.dmark+1)  
446e 32 be fb			ld (debug_mark+1),a  
4471 3a 7b 44			ld a, (.dmark+2)  
4474 32 bf fb			ld (debug_mark+2),a  
4477 18 03			jr .pastdmark  
4479 ..			.dmark: db "CNT"  
447c f1			.pastdmark: pop af  
447d			endm  
# End of macro DMARK
447d						CALLMONITOR 
447d cd 2d 17			call break_point_state  
4480				endm  
# End of macro CALLMONITOR
4480					endif 
4480			; TODO check string type 
4480					FORTH_DSP 
4480 cd 7a 1e			call macro_forth_dsp 
4483				endm 
# End of macro FORTH_DSP
4483					;v5FORTH_DSP_VALUE 
4483			 
4483 23					inc hl 
4484			 
4484 3e 00				ld a, 0 
4486 cd 83 11				call strlent 
4489			 
4489 cd bd 1c				call forth_push_numhl 
448c			 
448c			 
448c			 
448c				       NEXTW 
448c c3 26 20			jp macro_next 
448f				endm 
# End of macro NEXTW
448f			.CHAR: 
448f				CWHEAD .ENDSTR 57 "CHAR" 4 WORD_FLAG_CODE 
448f 4d				db WORD_SYS_CORE+57             
4490 c5 44			dw .ENDSTR            
4492 05				db 4 + 1 
4493 .. 00			db "CHAR",0              
4498				endm 
# End of macro CWHEAD
4498			; | CHAR ( u -- n ) Get the ascii value of the first character of the string on the stack | DONE 
4498					if DEBUG_FORTH_WORDS_KEY 
4498						DMARK "CHR" 
4498 f5				push af  
4499 3a ad 44			ld a, (.dmark)  
449c 32 bd fb			ld (debug_mark),a  
449f 3a ae 44			ld a, (.dmark+1)  
44a2 32 be fb			ld (debug_mark+1),a  
44a5 3a af 44			ld a, (.dmark+2)  
44a8 32 bf fb			ld (debug_mark+2),a  
44ab 18 03			jr .pastdmark  
44ad ..			.dmark: db "CHR"  
44b0 f1			.pastdmark: pop af  
44b1			endm  
# End of macro DMARK
44b1						CALLMONITOR 
44b1 cd 2d 17			call break_point_state  
44b4				endm  
# End of macro CALLMONITOR
44b4					endif 
44b4					FORTH_DSP 
44b4 cd 7a 1e			call macro_forth_dsp 
44b7				endm 
# End of macro FORTH_DSP
44b7					;v5 FORTH_DSP_VALUE 
44b7 23					inc hl      ; now at start of numeric as string 
44b8			 
44b8			;		push hl 
44b8			 
44b8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44b8 cd 6c 1f			call macro_forth_dsp_pop 
44bb				endm 
# End of macro FORTH_DSP_POP
44bb			 
44bb			;		pop hl 
44bb			 
44bb					; push the content of a onto the stack as a value 
44bb			 
44bb 7e					ld a,(hl)   ; get char 
44bc 26 00				ld h,0 
44be 6f					ld l,a 
44bf cd bd 1c				call forth_push_numhl 
44c2			 
44c2				       NEXTW 
44c2 c3 26 20			jp macro_next 
44c5				endm 
# End of macro NEXTW
44c5			 
44c5			 
44c5			 
44c5			 
44c5			.ENDSTR: 
44c5			; eof 
44c5			 
# End of file forth_words_str.asm
44c5			include "forth_words_key.asm" 
44c5			 
44c5			; | ## Keyboard Words 
44c5			 
44c5			.KEY: 
44c5				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
44c5 3e				db WORD_SYS_CORE+42             
44c6 f5 44			dw .WAITK            
44c8 04				db 3 + 1 
44c9 .. 00			db "KEY",0              
44cd				endm 
# End of macro CWHEAD
44cd			; | KEY ( -- w f ) Scan for keypress but do not wait true if next item on stack is key press | TODO 
44cd			 
44cd					if DEBUG_FORTH_WORDS_KEY 
44cd						DMARK "KEY" 
44cd f5				push af  
44ce 3a e2 44			ld a, (.dmark)  
44d1 32 bd fb			ld (debug_mark),a  
44d4 3a e3 44			ld a, (.dmark+1)  
44d7 32 be fb			ld (debug_mark+1),a  
44da 3a e4 44			ld a, (.dmark+2)  
44dd 32 bf fb			ld (debug_mark+2),a  
44e0 18 03			jr .pastdmark  
44e2 ..			.dmark: db "KEY"  
44e5 f1			.pastdmark: pop af  
44e6			endm  
# End of macro DMARK
44e6						CALLMONITOR 
44e6 cd 2d 17			call break_point_state  
44e9				endm  
# End of macro CALLMONITOR
44e9					endif 
44e9			; TODO currently waits 
44e9 cd 23 67				call cin 
44ec					;call cin_wait 
44ec 6f					ld l, a 
44ed 26 00				ld h, 0 
44ef cd bd 1c				call forth_push_numhl 
44f2					NEXTW 
44f2 c3 26 20			jp macro_next 
44f5				endm 
# End of macro NEXTW
44f5			.WAITK: 
44f5				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
44f5 3f				db WORD_SYS_CORE+43             
44f6 27 45			dw .ACCEPT            
44f8 06				db 5 + 1 
44f9 .. 00			db "WAITK",0              
44ff				endm 
# End of macro CWHEAD
44ff			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
44ff					if DEBUG_FORTH_WORDS_KEY 
44ff						DMARK "WAI" 
44ff f5				push af  
4500 3a 14 45			ld a, (.dmark)  
4503 32 bd fb			ld (debug_mark),a  
4506 3a 15 45			ld a, (.dmark+1)  
4509 32 be fb			ld (debug_mark+1),a  
450c 3a 16 45			ld a, (.dmark+2)  
450f 32 bf fb			ld (debug_mark+2),a  
4512 18 03			jr .pastdmark  
4514 ..			.dmark: db "WAI"  
4517 f1			.pastdmark: pop af  
4518			endm  
# End of macro DMARK
4518						CALLMONITOR 
4518 cd 2d 17			call break_point_state  
451b				endm  
# End of macro CALLMONITOR
451b					endif 
451b cd 12 67				call cin_wait 
451e 6f					ld l, a 
451f 26 00				ld h, 0 
4521 cd bd 1c				call forth_push_numhl 
4524					NEXTW 
4524 c3 26 20			jp macro_next 
4527				endm 
# End of macro NEXTW
4527			.ACCEPT: 
4527				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4527 40				db WORD_SYS_CORE+44             
4528 85 45			dw .EDIT            
452a 07				db 6 + 1 
452b .. 00			db "ACCEPT",0              
4532				endm 
# End of macro CWHEAD
4532			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4532					; TODO crashes on push 
4532					if DEBUG_FORTH_WORDS_KEY 
4532						DMARK "ACC" 
4532 f5				push af  
4533 3a 47 45			ld a, (.dmark)  
4536 32 bd fb			ld (debug_mark),a  
4539 3a 48 45			ld a, (.dmark+1)  
453c 32 be fb			ld (debug_mark+1),a  
453f 3a 49 45			ld a, (.dmark+2)  
4542 32 bf fb			ld (debug_mark+2),a  
4545 18 03			jr .pastdmark  
4547 ..			.dmark: db "ACC"  
454a f1			.pastdmark: pop af  
454b			endm  
# End of macro DMARK
454b						CALLMONITOR 
454b cd 2d 17			call break_point_state  
454e				endm  
# End of macro CALLMONITOR
454e					endif 
454e 21 a1 f1				ld hl, os_input 
4551 3e 00				ld a, 0 
4553 77					ld (hl),a 
4554 3a cc f9				ld a,(f_cursor_ptr) 
4557 16 64				ld d, 100 
4559 0e 00				ld c, 0 
455b 1e 28				ld e, 40 
455d cd 47 0d				call input_str 
4560					; TODO perhaps do a type check and wrap in quotes if not a number 
4560 21 a1 f1				ld hl, os_input 
4563					if DEBUG_FORTH_WORDS 
4563						DMARK "AC1" 
4563 f5				push af  
4564 3a 78 45			ld a, (.dmark)  
4567 32 bd fb			ld (debug_mark),a  
456a 3a 79 45			ld a, (.dmark+1)  
456d 32 be fb			ld (debug_mark+1),a  
4570 3a 7a 45			ld a, (.dmark+2)  
4573 32 bf fb			ld (debug_mark+2),a  
4576 18 03			jr .pastdmark  
4578 ..			.dmark: db "AC1"  
457b f1			.pastdmark: pop af  
457c			endm  
# End of macro DMARK
457c						CALLMONITOR 
457c cd 2d 17			call break_point_state  
457f				endm  
# End of macro CALLMONITOR
457f					endif 
457f cd 2b 1d				call forth_push_str 
4582					NEXTW 
4582 c3 26 20			jp macro_next 
4585				endm 
# End of macro NEXTW
4585			 
4585			.EDIT: 
4585				CWHEAD .ENDKEY 44 "EDIT" 4 WORD_FLAG_CODE 
4585 40				db WORD_SYS_CORE+44             
4586 27 46			dw .ENDKEY            
4588 05				db 4 + 1 
4589 .. 00			db "EDIT",0              
458e				endm 
# End of macro CWHEAD
458e			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
458e			 
458e					; TODO does not copy from stack 
458e					if DEBUG_FORTH_WORDS_KEY 
458e						DMARK "EDT" 
458e f5				push af  
458f 3a a3 45			ld a, (.dmark)  
4592 32 bd fb			ld (debug_mark),a  
4595 3a a4 45			ld a, (.dmark+1)  
4598 32 be fb			ld (debug_mark+1),a  
459b 3a a5 45			ld a, (.dmark+2)  
459e 32 bf fb			ld (debug_mark+2),a  
45a1 18 03			jr .pastdmark  
45a3 ..			.dmark: db "EDT"  
45a6 f1			.pastdmark: pop af  
45a7			endm  
# End of macro DMARK
45a7						CALLMONITOR 
45a7 cd 2d 17			call break_point_state  
45aa				endm  
# End of macro CALLMONITOR
45aa					endif 
45aa			 
45aa					;FORTH_DSP 
45aa					FORTH_DSP_VALUEHL 
45aa cd b4 1e			call macro_dsp_valuehl 
45ad				endm 
# End of macro FORTH_DSP_VALUEHL
45ad			;		inc hl    ; TODO do type check 
45ad			 
45ad			;		call get_word_hl 
45ad e5					push hl 
45ae					if DEBUG_FORTH_WORDS 
45ae						DMARK "EDp" 
45ae f5				push af  
45af 3a c3 45			ld a, (.dmark)  
45b2 32 bd fb			ld (debug_mark),a  
45b5 3a c4 45			ld a, (.dmark+1)  
45b8 32 be fb			ld (debug_mark+1),a  
45bb 3a c5 45			ld a, (.dmark+2)  
45be 32 bf fb			ld (debug_mark+2),a  
45c1 18 03			jr .pastdmark  
45c3 ..			.dmark: db "EDp"  
45c6 f1			.pastdmark: pop af  
45c7			endm  
# End of macro DMARK
45c7						CALLMONITOR 
45c7 cd 2d 17			call break_point_state  
45ca				endm  
# End of macro CALLMONITOR
45ca					endif 
45ca				;	ld a, 0 
45ca cd 78 11				call strlenz 
45cd 23					inc hl 
45ce			 
45ce 06 00				ld b, 0 
45d0 4d					ld c, l 
45d1			 
45d1 e1					pop hl 
45d2 11 a1 f1				ld de, os_input 
45d5					if DEBUG_FORTH_WORDS_KEY 
45d5						DMARK "EDc" 
45d5 f5				push af  
45d6 3a ea 45			ld a, (.dmark)  
45d9 32 bd fb			ld (debug_mark),a  
45dc 3a eb 45			ld a, (.dmark+1)  
45df 32 be fb			ld (debug_mark+1),a  
45e2 3a ec 45			ld a, (.dmark+2)  
45e5 32 bf fb			ld (debug_mark+2),a  
45e8 18 03			jr .pastdmark  
45ea ..			.dmark: db "EDc"  
45ed f1			.pastdmark: pop af  
45ee			endm  
# End of macro DMARK
45ee						CALLMONITOR 
45ee cd 2d 17			call break_point_state  
45f1				endm  
# End of macro CALLMONITOR
45f1					endif 
45f1 ed b0				ldir 
45f3			 
45f3			 
45f3 21 a1 f1				ld hl, os_input 
45f6					;ld a, 0 
45f6					;ld (hl),a 
45f6 3a cc f9				ld a,(f_cursor_ptr) 
45f9 16 64				ld d, 100 
45fb 0e 00				ld c, 0 
45fd 1e 28				ld e, 40 
45ff cd 47 0d				call input_str 
4602					; TODO perhaps do a type check and wrap in quotes if not a number 
4602 21 a1 f1				ld hl, os_input 
4605					if DEBUG_FORTH_WORDS 
4605						DMARK "ED1" 
4605 f5				push af  
4606 3a 1a 46			ld a, (.dmark)  
4609 32 bd fb			ld (debug_mark),a  
460c 3a 1b 46			ld a, (.dmark+1)  
460f 32 be fb			ld (debug_mark+1),a  
4612 3a 1c 46			ld a, (.dmark+2)  
4615 32 bf fb			ld (debug_mark+2),a  
4618 18 03			jr .pastdmark  
461a ..			.dmark: db "ED1"  
461d f1			.pastdmark: pop af  
461e			endm  
# End of macro DMARK
461e						CALLMONITOR 
461e cd 2d 17			call break_point_state  
4621				endm  
# End of macro CALLMONITOR
4621					endif 
4621 cd 2b 1d				call forth_push_str 
4624					NEXTW 
4624 c3 26 20			jp macro_next 
4627				endm 
# End of macro NEXTW
4627			 
4627			 
4627			 
4627			.ENDKEY: 
4627			; eof 
4627			 
# End of file forth_words_key.asm
4627			 
4627			if STORAGE_SE 
4627			   	include "forth_words_storage.asm" 
4627			 
4627			; | ## Fixed Storage Words 
4627			 
4627			 
4627			.BREAD: 
4627			  
4627				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
4627 3a				db WORD_SYS_CORE+38             
4628 aa 46			dw .BWRITE            
462a 06				db 5 + 1 
462b .. 00			db "BREAD",0              
4631				endm 
# End of macro CWHEAD
4631			; | BREAD ( u -- u ) With the current bank, read a block from block address u (1-512) and push to stack  | DONE 
4631				 
4631					if DEBUG_FORTH_WORDS_KEY 
4631						DMARK "BRD" 
4631 f5				push af  
4632 3a 46 46			ld a, (.dmark)  
4635 32 bd fb			ld (debug_mark),a  
4638 3a 47 46			ld a, (.dmark+1)  
463b 32 be fb			ld (debug_mark+1),a  
463e 3a 48 46			ld a, (.dmark+2)  
4641 32 bf fb			ld (debug_mark+2),a  
4644 18 03			jr .pastdmark  
4646 ..			.dmark: db "BRD"  
4649 f1			.pastdmark: pop af  
464a			endm  
# End of macro DMARK
464a						CALLMONITOR 
464a cd 2d 17			call break_point_state  
464d				endm  
# End of macro CALLMONITOR
464d					endif 
464d			 
464d				FORTH_DSP_VALUEHL 
464d cd b4 1e			call macro_dsp_valuehl 
4650				endm 
# End of macro FORTH_DSP_VALUEHL
4650			 
4650				FORTH_DSP_POP 
4650 cd 6c 1f			call macro_forth_dsp_pop 
4653				endm 
# End of macro FORTH_DSP_POP
4653			 
4653				; calc block address 
4653			 
4653 eb				ex de, hl 
4654 3e 40			ld a, STORE_BLOCK_PHY 
4656 cd 9d 0c			call Mult16 
4659			 
4659			 
4659 11 e8 f9			ld de, store_page 
465c			 
465c					if DEBUG_FORTH_WORDS 
465c						DMARK "BR1" 
465c f5				push af  
465d 3a 71 46			ld a, (.dmark)  
4660 32 bd fb			ld (debug_mark),a  
4663 3a 72 46			ld a, (.dmark+1)  
4666 32 be fb			ld (debug_mark+1),a  
4669 3a 73 46			ld a, (.dmark+2)  
466c 32 bf fb			ld (debug_mark+2),a  
466f 18 03			jr .pastdmark  
4671 ..			.dmark: db "BR1"  
4674 f1			.pastdmark: pop af  
4675			endm  
# End of macro DMARK
4675						CALLMONITOR 
4675 cd 2d 17			call break_point_state  
4678				endm  
# End of macro CALLMONITOR
4678					endif 
4678			 
4678 cd 09 03			call storage_read_block 
467b			 
467b cd 43 0d			call ishlzero 
467e 20 05			jr nz, .brfound 
4680			 
4680 cd bd 1c			call forth_push_numhl 
4683 18 22			jr .brdone 
4685			 
4685			 
4685			.brfound: 
4685 21 ea f9		        ld hl, store_page+2 
4688			 
4688					if DEBUG_FORTH_WORDS 
4688						DMARK "BR2" 
4688 f5				push af  
4689 3a 9d 46			ld a, (.dmark)  
468c 32 bd fb			ld (debug_mark),a  
468f 3a 9e 46			ld a, (.dmark+1)  
4692 32 be fb			ld (debug_mark+1),a  
4695 3a 9f 46			ld a, (.dmark+2)  
4698 32 bf fb			ld (debug_mark+2),a  
469b 18 03			jr .pastdmark  
469d ..			.dmark: db "BR2"  
46a0 f1			.pastdmark: pop af  
46a1			endm  
# End of macro DMARK
46a1						CALLMONITOR 
46a1 cd 2d 17			call break_point_state  
46a4				endm  
# End of macro CALLMONITOR
46a4					endif 
46a4			 
46a4 cd 2b 1d			call forth_push_str 
46a7			 
46a7			 
46a7			.brdone: 
46a7			 
46a7					NEXTW 
46a7 c3 26 20			jp macro_next 
46aa				endm 
# End of macro NEXTW
46aa			.BWRITE: 
46aa				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
46aa 3a				db WORD_SYS_CORE+38             
46ab 3f 47			dw .BUPD            
46ad 07				db 6 + 1 
46ae .. 00			db "BWRITE",0              
46b5				endm 
# End of macro CWHEAD
46b5			; | BWRITE ( s u -- ) With the current bank, write the string s to address u | DONE 
46b5			 
46b5					if DEBUG_FORTH_WORDS_KEY 
46b5						DMARK "BWR" 
46b5 f5				push af  
46b6 3a ca 46			ld a, (.dmark)  
46b9 32 bd fb			ld (debug_mark),a  
46bc 3a cb 46			ld a, (.dmark+1)  
46bf 32 be fb			ld (debug_mark+1),a  
46c2 3a cc 46			ld a, (.dmark+2)  
46c5 32 bf fb			ld (debug_mark+2),a  
46c8 18 03			jr .pastdmark  
46ca ..			.dmark: db "BWR"  
46cd f1			.pastdmark: pop af  
46ce			endm  
# End of macro DMARK
46ce						CALLMONITOR 
46ce cd 2d 17			call break_point_state  
46d1				endm  
# End of macro CALLMONITOR
46d1					endif 
46d1			 
46d1				FORTH_DSP_VALUEHL 
46d1 cd b4 1e			call macro_dsp_valuehl 
46d4				endm 
# End of macro FORTH_DSP_VALUEHL
46d4			 
46d4				; calc block address 
46d4			 
46d4 eb				ex de, hl 
46d5 3e 40			ld a, STORE_BLOCK_PHY 
46d7 cd 9d 0c			call Mult16 
46da			 
46da e5				push hl         ; address 
46db			 
46db				FORTH_DSP_POP 
46db cd 6c 1f			call macro_forth_dsp_pop 
46de				endm 
# End of macro FORTH_DSP_POP
46de			 
46de				FORTH_DSP_VALUEHL 
46de cd b4 1e			call macro_dsp_valuehl 
46e1				endm 
# End of macro FORTH_DSP_VALUEHL
46e1			 
46e1				FORTH_DSP_POP 
46e1 cd 6c 1f			call macro_forth_dsp_pop 
46e4				endm 
# End of macro FORTH_DSP_POP
46e4			 
46e4 cd 29 0a			call storage_clear_page 
46e7			 
46e7				; copy string to store page 
46e7			 
46e7 e5				push hl     ; save string address 
46e8			 
46e8 3e 00			ld a, 0 
46ea cd 83 11			call strlent 
46ed			 
46ed 23				inc hl 
46ee			 
46ee 4d				ld c, l 
46ef 06 00			ld b, 0 
46f1			 
46f1 e1				pop hl 
46f2 11 ea f9			ld de, store_page + 2 
46f5					if DEBUG_FORTH_WORDS 
46f5						DMARK "BW1" 
46f5 f5				push af  
46f6 3a 0a 47			ld a, (.dmark)  
46f9 32 bd fb			ld (debug_mark),a  
46fc 3a 0b 47			ld a, (.dmark+1)  
46ff 32 be fb			ld (debug_mark+1),a  
4702 3a 0c 47			ld a, (.dmark+2)  
4705 32 bf fb			ld (debug_mark+2),a  
4708 18 03			jr .pastdmark  
470a ..			.dmark: db "BW1"  
470d f1			.pastdmark: pop af  
470e			endm  
# End of macro DMARK
470e						CALLMONITOR 
470e cd 2d 17			call break_point_state  
4711				endm  
# End of macro CALLMONITOR
4711					endif 
4711 ed b0			ldir 
4713			 
4713			 
4713				; poke the start of the block with flags to prevent high level file ops hitting the block 
4713			 
4713 21 ff ff			ld hl, $ffff 
4716			 
4716 22 e8 f9			ld (store_page), hl	 
4719				 
4719 e1				pop hl    ; get address 
471a 11 e8 f9			ld de, store_page 
471d			 
471d					if DEBUG_FORTH_WORDS 
471d						DMARK "BW2" 
471d f5				push af  
471e 3a 32 47			ld a, (.dmark)  
4721 32 bd fb			ld (debug_mark),a  
4724 3a 33 47			ld a, (.dmark+1)  
4727 32 be fb			ld (debug_mark+1),a  
472a 3a 34 47			ld a, (.dmark+2)  
472d 32 bf fb			ld (debug_mark+2),a  
4730 18 03			jr .pastdmark  
4732 ..			.dmark: db "BW2"  
4735 f1			.pastdmark: pop af  
4736			endm  
# End of macro DMARK
4736						CALLMONITOR 
4736 cd 2d 17			call break_point_state  
4739				endm  
# End of macro CALLMONITOR
4739					endif 
4739			 
4739 cd 6e 03			call storage_write_block 
473c			 
473c					NEXTW 
473c c3 26 20			jp macro_next 
473f				endm 
# End of macro NEXTW
473f			 
473f			.BUPD: 
473f				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
473f 3a				db WORD_SYS_CORE+38             
4740 95 47			dw .BYID            
4742 05				db 4 + 1 
4743 .. 00			db "BUPD",0              
4748				endm 
# End of macro CWHEAD
4748			; | BUPD ( u -- ) Write the contents of the current file system storage buffer directly to address u | DONE 
4748			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
4748			; | | or completely different file system structure. 
4748			 
4748					if DEBUG_FORTH_WORDS_KEY 
4748						DMARK "BUD" 
4748 f5				push af  
4749 3a 5d 47			ld a, (.dmark)  
474c 32 bd fb			ld (debug_mark),a  
474f 3a 5e 47			ld a, (.dmark+1)  
4752 32 be fb			ld (debug_mark+1),a  
4755 3a 5f 47			ld a, (.dmark+2)  
4758 32 bf fb			ld (debug_mark+2),a  
475b 18 03			jr .pastdmark  
475d ..			.dmark: db "BUD"  
4760 f1			.pastdmark: pop af  
4761			endm  
# End of macro DMARK
4761						CALLMONITOR 
4761 cd 2d 17			call break_point_state  
4764				endm  
# End of macro CALLMONITOR
4764					endif 
4764			 
4764				FORTH_DSP_VALUEHL 
4764 cd b4 1e			call macro_dsp_valuehl 
4767				endm 
# End of macro FORTH_DSP_VALUEHL
4767			 
4767				; calc block address 
4767			 
4767 eb				ex de, hl 
4768 3e 40			ld a, STORE_BLOCK_PHY 
476a cd 9d 0c			call Mult16 
476d			 
476d				FORTH_DSP_POP 
476d cd 6c 1f			call macro_forth_dsp_pop 
4770				endm 
# End of macro FORTH_DSP_POP
4770			 
4770			 
4770 11 e8 f9			ld de, store_page 
4773			 
4773					if DEBUG_FORTH_WORDS 
4773						DMARK "BUe" 
4773 f5				push af  
4774 3a 88 47			ld a, (.dmark)  
4777 32 bd fb			ld (debug_mark),a  
477a 3a 89 47			ld a, (.dmark+1)  
477d 32 be fb			ld (debug_mark+1),a  
4780 3a 8a 47			ld a, (.dmark+2)  
4783 32 bf fb			ld (debug_mark+2),a  
4786 18 03			jr .pastdmark  
4788 ..			.dmark: db "BUe"  
478b f1			.pastdmark: pop af  
478c			endm  
# End of macro DMARK
478c						CALLMONITOR 
478c cd 2d 17			call break_point_state  
478f				endm  
# End of macro CALLMONITOR
478f					endif 
478f			 
478f cd 6e 03			call storage_write_block 
4792			 
4792					NEXTW 
4792 c3 26 20			jp macro_next 
4795				endm 
# End of macro NEXTW
4795			 
4795			.BYID: 
4795			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
4795			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
4795			; 
4795			;		 
4795			;		if DEBUG_FORTH_WORDS_KEY 
4795			;			DMARK "BYID" 
4795			;			CALLMONITOR 
4795			;		endif 
4795			; 
4795			;		; get direct address 
4795			; 
4795			;		FORTH_DSP_VALUEHL 
4795			; 
4795			;		FORTH_DSP_POP 
4795			; 
4795			;	; calc block address 
4795			; 
4795			;	ex de, hl 
4795			;	ld a, STORE_BLOCK_PHY 
4795			;	call Mult16 
4795			;	;	do BREAD with number as param 
4795			;	; push the file name	 
4795			;	ld de, store_page 
4795			;	call storage_read_block 
4795			 ;       ld hl, store_page+2 
4795			; 
4795			; 
4795			;		NEXTW 
4795			;.BYNAME: 
4795			;	CWHEAD .DIR 38 "BYNAME" 6 WORD_FLAG_CODE 
4795			;; > BYNAME ( s -- u ) Get the file ID in the current BANK of the file named s > TODO 
4795			;		NEXTW 
4795			; 
4795			.DIR: 
4795				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
4795 3a				db WORD_SYS_CORE+38             
4796 99 48			dw .SAVE            
4798 04				db 3 + 1 
4799 .. 00			db "DIR",0              
479d				endm 
# End of macro CWHEAD
479d			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
479d			 
479d					if DEBUG_FORTH_WORDS_KEY 
479d						DMARK "DIR" 
479d f5				push af  
479e 3a b2 47			ld a, (.dmark)  
47a1 32 bd fb			ld (debug_mark),a  
47a4 3a b3 47			ld a, (.dmark+1)  
47a7 32 be fb			ld (debug_mark+1),a  
47aa 3a b4 47			ld a, (.dmark+2)  
47ad 32 bf fb			ld (debug_mark+2),a  
47b0 18 03			jr .pastdmark  
47b2 ..			.dmark: db "DIR"  
47b5 f1			.pastdmark: pop af  
47b6			endm  
# End of macro DMARK
47b6						CALLMONITOR 
47b6 cd 2d 17			call break_point_state  
47b9				endm  
# End of macro CALLMONITOR
47b9					endif 
47b9 cd ba 03			call storage_get_block_0 
47bc			 
47bc 21 e8 f9			ld hl, store_page     ; get current id count 
47bf 46				ld b, (hl) 
47c0 0e 00			ld c, 0    ; count of files   
47c2					if DEBUG_FORTH_WORDS 
47c2						DMARK "DI1" 
47c2 f5				push af  
47c3 3a d7 47			ld a, (.dmark)  
47c6 32 bd fb			ld (debug_mark),a  
47c9 3a d8 47			ld a, (.dmark+1)  
47cc 32 be fb			ld (debug_mark+1),a  
47cf 3a d9 47			ld a, (.dmark+2)  
47d2 32 bf fb			ld (debug_mark+2),a  
47d5 18 03			jr .pastdmark  
47d7 ..			.dmark: db "DI1"  
47da f1			.pastdmark: pop af  
47db			endm  
# End of macro DMARK
47db						CALLMONITOR 
47db cd 2d 17			call break_point_state  
47de				endm  
# End of macro CALLMONITOR
47de					endif 
47de			 
47de				; check for empty drive 
47de			 
47de 3e 00			ld a, 0 
47e0 b8				cp b 
47e1 ca 4f 48			jp z, .dirdone 
47e4			 
47e4				; for each of the current ids do a search for them and if found push to stack 
47e4			 
47e4 c5			.diritem:	push bc 
47e5 21 40 00				ld hl, STORE_BLOCK_PHY 
47e8 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
47ea 58					ld e,b 
47eb			 
47eb			;		if DEBUG_FORTH_WORDS 
47eb			;			DMARK "DI2" 
47eb			;			CALLMONITOR 
47eb			;		endif 
47eb			 
47eb cd 2e 06				call storage_findnextid 
47ee			 
47ee			;		if DEBUG_FORTH_WORDS 
47ee			;			DMARK "DI3" 
47ee			;			CALLMONITOR 
47ee			;		endif 
47ee			 
47ee					; if found hl will be non zero 
47ee			 
47ee cd 43 0d				call ishlzero 
47f1			;		ld a, l 
47f1			;		add h 
47f1			; 
47f1			;		cp 0 
47f1 28 59				jr z, .dirnotfound 
47f3			 
47f3					; increase count 
47f3			 
47f3 c1					pop bc	 
47f4 0c					inc c 
47f5 c5					push bc 
47f6					 
47f6			 
47f6					; get file header and push the file name 
47f6			 
47f6 11 e8 f9				ld de, store_page 
47f9 cd 09 03				call storage_read_block 
47fc			 
47fc					; push file id to stack 
47fc				 
47fc 3a e8 f9				ld a, (store_page) 
47ff 26 00				ld h, 0 
4801 6f					ld l, a 
4802 cd bd 1c				call forth_push_numhl 
4805			 
4805					; push extent count to stack  
4805				 
4805 3a ea f9				ld a, (store_page+2) 
4808 26 00				ld h, 0 
480a 6f					ld l, a 
480b cd bd 1c				call forth_push_numhl 
480e			 
480e					; push file name 
480e			 
480e 21 eb f9				ld hl, store_page+3 
4811					if DEBUG_FORTH_WORDS 
4811						DMARK "DI5" 
4811 f5				push af  
4812 3a 26 48			ld a, (.dmark)  
4815 32 bd fb			ld (debug_mark),a  
4818 3a 27 48			ld a, (.dmark+1)  
481b 32 be fb			ld (debug_mark+1),a  
481e 3a 28 48			ld a, (.dmark+2)  
4821 32 bf fb			ld (debug_mark+2),a  
4824 18 03			jr .pastdmark  
4826 ..			.dmark: db "DI5"  
4829 f1			.pastdmark: pop af  
482a			endm  
# End of macro DMARK
482a						CALLMONITOR 
482a cd 2d 17			call break_point_state  
482d				endm  
# End of macro CALLMONITOR
482d					endif 
482d cd 2b 1d				call forth_push_str 
4830					if DEBUG_FORTH_WORDS 
4830						DMARK "DI6" 
4830 f5				push af  
4831 3a 45 48			ld a, (.dmark)  
4834 32 bd fb			ld (debug_mark),a  
4837 3a 46 48			ld a, (.dmark+1)  
483a 32 be fb			ld (debug_mark+1),a  
483d 3a 47 48			ld a, (.dmark+2)  
4840 32 bf fb			ld (debug_mark+2),a  
4843 18 03			jr .pastdmark  
4845 ..			.dmark: db "DI6"  
4848 f1			.pastdmark: pop af  
4849			endm  
# End of macro DMARK
4849						CALLMONITOR 
4849 cd 2d 17			call break_point_state  
484c				endm  
# End of macro CALLMONITOR
484c					endif 
484c			.dirnotfound: 
484c c1					pop bc     
484d 10 95				djnz .diritem 
484f				 
484f			.dirdone:	 
484f					if DEBUG_FORTH_WORDS 
484f						DMARK "DI7" 
484f f5				push af  
4850 3a 64 48			ld a, (.dmark)  
4853 32 bd fb			ld (debug_mark),a  
4856 3a 65 48			ld a, (.dmark+1)  
4859 32 be fb			ld (debug_mark+1),a  
485c 3a 66 48			ld a, (.dmark+2)  
485f 32 bf fb			ld (debug_mark+2),a  
4862 18 03			jr .pastdmark  
4864 ..			.dmark: db "DI7"  
4867 f1			.pastdmark: pop af  
4868			endm  
# End of macro DMARK
4868						CALLMONITOR 
4868 cd 2d 17			call break_point_state  
486b				endm  
# End of macro CALLMONITOR
486b					endif 
486b			 
486b					; push a count of the dir items found 
486b			 
486b 26 00				ld h, 0 
486d 69					ld l, c 
486e cd bd 1c				call forth_push_numhl 
4871			 
4871					; push the bank label 
4871			 
4871 cd ba 03				call storage_get_block_0 
4874			 
4874				 
4874 21 eb f9		 		ld hl, store_page+3 
4877			 
4877					if DEBUG_FORTH_WORDS 
4877						DMARK "DI8" 
4877 f5				push af  
4878 3a 8c 48			ld a, (.dmark)  
487b 32 bd fb			ld (debug_mark),a  
487e 3a 8d 48			ld a, (.dmark+1)  
4881 32 be fb			ld (debug_mark+1),a  
4884 3a 8e 48			ld a, (.dmark+2)  
4887 32 bf fb			ld (debug_mark+2),a  
488a 18 03			jr .pastdmark  
488c ..			.dmark: db "DI8"  
488f f1			.pastdmark: pop af  
4890			endm  
# End of macro DMARK
4890						CALLMONITOR 
4890 cd 2d 17			call break_point_state  
4893				endm  
# End of macro CALLMONITOR
4893					endif 
4893 cd 2b 1d				call forth_push_str 
4896			 
4896			 
4896				 
4896					NEXTW 
4896 c3 26 20			jp macro_next 
4899				endm 
# End of macro NEXTW
4899			.SAVE: 
4899			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
4899			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
4899			;		NEXTW 
4899			;.LOAD: 
4899			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
4899			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
4899			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
4899			;; > > The LOAD command can not be used in any user words or compound lines. 
4899			; 
4899			;		; store_openext use it. If zero it is EOF 
4899			; 
4899			;		; read block from current stream id 
4899			;		; if the block does not contain zero term keep reading blocks until zero found 
4899			;		; push the block to stack 
4899			;		; save the block id to stream 
4899			; 
4899			; 
4899			;		FORTH_DSP_VALUEHL 
4899			; 
4899			;;		push hl 
4899			; 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LOA" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;		FORTH_DSP_POP 
4899			; 
4899			;;		pop hl 
4899			; 
4899			;		ld h, l 
4899			;		ld l, 0 
4899			; 
4899			;		push hl     ; stack holds current file id and extent to work with 
4899			; 
4899			; 
4899			;		ld de, store_page      ; get block zero of file 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LO0" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;		call storage_read 
4899			; 
4899			;		ld a, (store_page+2)    ; max extents for this file 
4899			;		ld  (store_openmaxext),a   ; get our limit 
4899			; 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LOE" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			; 
4899			;; TODO dont know why max extents are not present 
4899			;;		cp 0 
4899			;;		jp z, .loadeof     ; dont read past eof 
4899			; 
4899			;;		ld a, 1   ; start from the head of the file 
4899			; 
4899			;.loadline:	pop hl 
4899			;		inc hl 
4899			;		ld  a, (store_openmaxext)   ; get our limit 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LOx" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;		inc a 
4899			;		cp l 
4899			;		jp z, .loadeof 
4899			;		push hl    ; save current extent 
4899			; 
4899			;		ld de, store_page 
4899			; 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LO1" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;		call storage_read 
4899			; 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LO2" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;	call ishlzero 
4899			;	ld a, l 
4899			;	add h 
4899			;	cp 0 
4899			;	jr z, .loadeof 
4899			; 
4899			;	; not eof so hl should point to data to exec 
4899			; 
4899			;	; will need to add the FORTH_END_BUFFER flag 
4899			 ; 
4899			;	ld hl, store_page+2 
4899			;	ld bc, 255 
4899			;	ld a, 0 
4899			;	cpir 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LOt" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;	dec hl 
4899			;	ld a, ' ' 
4899			;	ld (hl), a 
4899			;	inc hl 
4899			;	ld (hl), a 
4899			;	inc hl 
4899			;	ld (hl), a 
4899			;	inc hl 
4899			;	ld a, FORTH_END_BUFFER 
4899			;	ld (hl), a 
4899			; 
4899			;	; TODO handle more than a single block read 
4899			; 
4899			; 
4899			;	ld hl, store_page+2 
4899			; 
4899			;	ld (os_tok_ptr), hl 
4899			; 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LO3" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			; 
4899			;	call forthparse 
4899			;	call forthexec 
4899			;	call forthexec_cleanup 
4899			; 
4899			;	; go to next extent 
4899			; 
4899			;	; get next block  or mark as eof 
4899			;	jp .loadline 
4899			; 
4899			; 
4899			; 
4899			;	       NEXTW 
4899			;.loadeof:	ld a, 0 
4899			;		ld (store_openext), a 
4899			; 
4899			;	if DEBUG_STORESE 
4899			;		DMARK "LOF" 
4899			;		CALLMONITOR 
4899			;	endif 
4899			;		ret 
4899			;		;NEXTW 
4899			;.BSAVE:   
4899			; 
4899			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
4899			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
4899			;		NEXTW 
4899			;.BLOAD: 
4899			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
4899			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
4899			;		NEXTW 
4899			;;;; counter gap 
4899			 
4899			 
4899			.SEO: 
4899				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
4899 64				db WORD_SYS_CORE+80             
489a b8 48			dw .SEI            
489c 04				db 3 + 1 
489d .. 00			db "SEO",0              
48a1				endm 
# End of macro CWHEAD
48a1			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
48a1			 
48a1					; get port 
48a1			 
48a1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
48a1 cd b4 1e			call macro_dsp_valuehl 
48a4				endm 
# End of macro FORTH_DSP_VALUEHL
48a4			 
48a4 e5					push hl    ; u2 - byte 
48a5			 
48a5					; destroy value TOS 
48a5			 
48a5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
48a5 cd 6c 1f			call macro_forth_dsp_pop 
48a8				endm 
# End of macro FORTH_DSP_POP
48a8			 
48a8					; get byte to send 
48a8			 
48a8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
48a8 cd b4 1e			call macro_dsp_valuehl 
48ab				endm 
# End of macro FORTH_DSP_VALUEHL
48ab			 
48ab e5					push hl    ; u1 - addr 
48ac			 
48ac					; destroy value TOS 
48ac			 
48ac					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
48ac cd 6c 1f			call macro_forth_dsp_pop 
48af				endm 
# End of macro FORTH_DSP_POP
48af			 
48af					; one value on hl get other one back 
48af			 
48af d1					pop de   ; u1 - byte 
48b0			 
48b0 e1					pop hl   ; u2 - addr 
48b1			 
48b1					; TODO Send SPI byte 
48b1			 
48b1			 
48b1 7b					ld a, e 
48b2 cd e7 01				call se_writebyte 
48b5			 
48b5					 
48b5			 
48b5					NEXTW 
48b5 c3 26 20			jp macro_next 
48b8				endm 
# End of macro NEXTW
48b8			 
48b8			.SEI: 
48b8				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
48b8 65				db WORD_SYS_CORE+81             
48b9 d2 48			dw .SFREE            
48bb 04				db 3 + 1 
48bc .. 00			db "SEI",0              
48c0				endm 
# End of macro CWHEAD
48c0			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
48c0			 
48c0					; get port 
48c0			 
48c0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
48c0 cd b4 1e			call macro_dsp_valuehl 
48c3				endm 
# End of macro FORTH_DSP_VALUEHL
48c3			 
48c3			;		push hl 
48c3			 
48c3					; destroy value TOS 
48c3			 
48c3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
48c3 cd 6c 1f			call macro_forth_dsp_pop 
48c6				endm 
# End of macro FORTH_DSP_POP
48c6			 
48c6					; one value on hl get other one back 
48c6			 
48c6			;		pop hl 
48c6			 
48c6			 
48c6					; TODO Get SPI byte 
48c6			 
48c6 cd 89 02				call se_readbyte 
48c9			 
48c9 26 00				ld h, 0 
48cb 6f					ld l, a 
48cc cd bd 1c				call forth_push_numhl 
48cf			 
48cf					NEXTW 
48cf c3 26 20			jp macro_next 
48d2				endm 
# End of macro NEXTW
48d2			 
48d2			.SFREE: 
48d2				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
48d2 67				db WORD_SYS_CORE+83             
48d3 01 49			dw .SIZE            
48d5 06				db 5 + 1 
48d6 .. 00			db "FFREE",0              
48dc				endm 
# End of macro CWHEAD
48dc			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
48dc					if DEBUG_FORTH_WORDS_KEY 
48dc						DMARK "FFR" 
48dc f5				push af  
48dd 3a f1 48			ld a, (.dmark)  
48e0 32 bd fb			ld (debug_mark),a  
48e3 3a f2 48			ld a, (.dmark+1)  
48e6 32 be fb			ld (debug_mark+1),a  
48e9 3a f3 48			ld a, (.dmark+2)  
48ec 32 bf fb			ld (debug_mark+2),a  
48ef 18 03			jr .pastdmark  
48f1 ..			.dmark: db "FFR"  
48f4 f1			.pastdmark: pop af  
48f5			endm  
# End of macro DMARK
48f5						CALLMONITOR 
48f5 cd 2d 17			call break_point_state  
48f8				endm  
# End of macro CALLMONITOR
48f8					endif 
48f8			 
48f8 cd c8 06				call storage_freeblocks 
48fb			 
48fb cd bd 1c				call forth_push_numhl 
48fe			 
48fe				       NEXTW 
48fe c3 26 20			jp macro_next 
4901				endm 
# End of macro NEXTW
4901			.SIZE: 
4901				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
4901 67				db WORD_SYS_CORE+83             
4902 35 49			dw .CREATE            
4904 05				db 4 + 1 
4905 .. 00			db "SIZE",0              
490a				endm 
# End of macro CWHEAD
490a			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
490a					if DEBUG_FORTH_WORDS_KEY 
490a						DMARK "SIZ" 
490a f5				push af  
490b 3a 1f 49			ld a, (.dmark)  
490e 32 bd fb			ld (debug_mark),a  
4911 3a 20 49			ld a, (.dmark+1)  
4914 32 be fb			ld (debug_mark+1),a  
4917 3a 21 49			ld a, (.dmark+2)  
491a 32 bf fb			ld (debug_mark+2),a  
491d 18 03			jr .pastdmark  
491f ..			.dmark: db "SIZ"  
4922 f1			.pastdmark: pop af  
4923			endm  
# End of macro DMARK
4923						CALLMONITOR 
4923 cd 2d 17			call break_point_state  
4926				endm  
# End of macro CALLMONITOR
4926					endif 
4926			 
4926					FORTH_DSP_VALUEHL 
4926 cd b4 1e			call macro_dsp_valuehl 
4929				endm 
# End of macro FORTH_DSP_VALUEHL
4929			;		push hl 
4929					FORTH_DSP_POP 
4929 cd 6c 1f			call macro_forth_dsp_pop 
492c				endm 
# End of macro FORTH_DSP_POP
492c			;		pop hl 
492c cd 38 03				call storage_file_size 
492f			 
492f cd bd 1c				call forth_push_numhl 
4932			  
4932			 
4932				       NEXTW 
4932 c3 26 20			jp macro_next 
4935				endm 
# End of macro NEXTW
4935			 
4935			.CREATE: 
4935				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
4935 68				db WORD_SYS_CORE+84             
4936 a3 49			dw .APPEND            
4938 07				db 6 + 1 
4939 .. 00			db "CREATE",0              
4940				endm 
# End of macro CWHEAD
4940			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
4940			; | | e.g.  
4940			; | | TestProgram CREATE 
4940			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
4940			; | |  
4940			; | | Max file IDs are 255. 
4940			; | |  
4940					 
4940					if DEBUG_FORTH_WORDS_KEY 
4940						DMARK "CRT" 
4940 f5				push af  
4941 3a 55 49			ld a, (.dmark)  
4944 32 bd fb			ld (debug_mark),a  
4947 3a 56 49			ld a, (.dmark+1)  
494a 32 be fb			ld (debug_mark+1),a  
494d 3a 57 49			ld a, (.dmark+2)  
4950 32 bf fb			ld (debug_mark+2),a  
4953 18 03			jr .pastdmark  
4955 ..			.dmark: db "CRT"  
4958 f1			.pastdmark: pop af  
4959			endm  
# End of macro DMARK
4959						CALLMONITOR 
4959 cd 2d 17			call break_point_state  
495c				endm  
# End of macro CALLMONITOR
495c					endif 
495c			;		call storage_get_block_0 
495c			 
495c					; TODO pop hl 
495c			 
495c					;v5 FORTH_DSP_VALUE 
495c					FORTH_DSP_VALUE 
495c cd 9d 1e			call macro_forth_dsp_value 
495f				endm 
# End of macro FORTH_DSP_VALUE
495f			 
495f				if DEBUG_STORESE 
495f					DMARK "CR1" 
495f f5				push af  
4960 3a 74 49			ld a, (.dmark)  
4963 32 bd fb			ld (debug_mark),a  
4966 3a 75 49			ld a, (.dmark+1)  
4969 32 be fb			ld (debug_mark+1),a  
496c 3a 76 49			ld a, (.dmark+2)  
496f 32 bf fb			ld (debug_mark+2),a  
4972 18 03			jr .pastdmark  
4974 ..			.dmark: db "CR1"  
4977 f1			.pastdmark: pop af  
4978			endm  
# End of macro DMARK
4978					CALLMONITOR 
4978 cd 2d 17			call break_point_state  
497b				endm  
# End of macro CALLMONITOR
497b				endif 
497b			;		push hl 
497b			;		FORTH_DSP_POP 
497b			;		pop hl 
497b			 
497b			;		inc hl   ; move past the type marker 
497b			 
497b cd fe 06				call storage_create 
497e			 
497e				if DEBUG_STORESE 
497e					DMARK "CT1" 
497e f5				push af  
497f 3a 93 49			ld a, (.dmark)  
4982 32 bd fb			ld (debug_mark),a  
4985 3a 94 49			ld a, (.dmark+1)  
4988 32 be fb			ld (debug_mark+1),a  
498b 3a 95 49			ld a, (.dmark+2)  
498e 32 bf fb			ld (debug_mark+2),a  
4991 18 03			jr .pastdmark  
4993 ..			.dmark: db "CT1"  
4996 f1			.pastdmark: pop af  
4997			endm  
# End of macro DMARK
4997					CALLMONITOR 
4997 cd 2d 17			call break_point_state  
499a				endm  
# End of macro CALLMONITOR
499a				endif 
499a			;		push hl 
499a					FORTH_DSP_POP 
499a cd 6c 1f			call macro_forth_dsp_pop 
499d				endm 
# End of macro FORTH_DSP_POP
499d			;		pop hl 
499d					; push file id to stack 
499d cd bd 1c				call forth_push_numhl 
49a0			 
49a0			 
49a0			 
49a0				       NEXTW 
49a0 c3 26 20			jp macro_next 
49a3				endm 
# End of macro NEXTW
49a3			 
49a3			.APPEND: 
49a3				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
49a3 69				db WORD_SYS_CORE+85             
49a4 34 4a			dw .SDEL            
49a6 07				db 6 + 1 
49a7 .. 00			db "APPEND",0              
49ae				endm 
# End of macro CWHEAD
49ae			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
49ae			; | | e.g. 
49ae			; | | Test CREATE      -> $01 
49ae			; | | "A string to add to file" $01 APPEND 
49ae			; | |  
49ae			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
49ae					if DEBUG_FORTH_WORDS_KEY 
49ae						DMARK "APP" 
49ae f5				push af  
49af 3a c3 49			ld a, (.dmark)  
49b2 32 bd fb			ld (debug_mark),a  
49b5 3a c4 49			ld a, (.dmark+1)  
49b8 32 be fb			ld (debug_mark+1),a  
49bb 3a c5 49			ld a, (.dmark+2)  
49be 32 bf fb			ld (debug_mark+2),a  
49c1 18 03			jr .pastdmark  
49c3 ..			.dmark: db "APP"  
49c6 f1			.pastdmark: pop af  
49c7			endm  
# End of macro DMARK
49c7						CALLMONITOR 
49c7 cd 2d 17			call break_point_state  
49ca				endm  
# End of macro CALLMONITOR
49ca					endif 
49ca			 
49ca					FORTH_DSP_VALUEHL 
49ca cd b4 1e			call macro_dsp_valuehl 
49cd				endm 
# End of macro FORTH_DSP_VALUEHL
49cd e5					push hl 	; save file id 
49ce			 
49ce				if DEBUG_STORESE 
49ce					DMARK "AP1" 
49ce f5				push af  
49cf 3a e3 49			ld a, (.dmark)  
49d2 32 bd fb			ld (debug_mark),a  
49d5 3a e4 49			ld a, (.dmark+1)  
49d8 32 be fb			ld (debug_mark+1),a  
49db 3a e5 49			ld a, (.dmark+2)  
49de 32 bf fb			ld (debug_mark+2),a  
49e1 18 03			jr .pastdmark  
49e3 ..			.dmark: db "AP1"  
49e6 f1			.pastdmark: pop af  
49e7			endm  
# End of macro DMARK
49e7					CALLMONITOR 
49e7 cd 2d 17			call break_point_state  
49ea				endm  
# End of macro CALLMONITOR
49ea				endif 
49ea					FORTH_DSP_POP 
49ea cd 6c 1f			call macro_forth_dsp_pop 
49ed				endm 
# End of macro FORTH_DSP_POP
49ed			 
49ed					FORTH_DSP_VALUEHL 
49ed cd b4 1e			call macro_dsp_valuehl 
49f0				endm 
# End of macro FORTH_DSP_VALUEHL
49f0					;v5 FORTH_DSP_VALUE 
49f0 e5					push hl 	; save ptr to string to save 
49f1			 
49f1				if DEBUG_STORESE 
49f1					DMARK "AP1" 
49f1 f5				push af  
49f2 3a 06 4a			ld a, (.dmark)  
49f5 32 bd fb			ld (debug_mark),a  
49f8 3a 07 4a			ld a, (.dmark+1)  
49fb 32 be fb			ld (debug_mark+1),a  
49fe 3a 08 4a			ld a, (.dmark+2)  
4a01 32 bf fb			ld (debug_mark+2),a  
4a04 18 03			jr .pastdmark  
4a06 ..			.dmark: db "AP1"  
4a09 f1			.pastdmark: pop af  
4a0a			endm  
# End of macro DMARK
4a0a					CALLMONITOR 
4a0a cd 2d 17			call break_point_state  
4a0d				endm  
# End of macro CALLMONITOR
4a0d				endif 
4a0d					FORTH_DSP_POP 
4a0d cd 6c 1f			call macro_forth_dsp_pop 
4a10				endm 
# End of macro FORTH_DSP_POP
4a10			 
4a10 d1					pop de 
4a11 e1					pop hl 
4a12				if DEBUG_STORESE 
4a12					DMARK "AP2" 
4a12 f5				push af  
4a13 3a 27 4a			ld a, (.dmark)  
4a16 32 bd fb			ld (debug_mark),a  
4a19 3a 28 4a			ld a, (.dmark+1)  
4a1c 32 be fb			ld (debug_mark+1),a  
4a1f 3a 29 4a			ld a, (.dmark+2)  
4a22 32 bf fb			ld (debug_mark+2),a  
4a25 18 03			jr .pastdmark  
4a27 ..			.dmark: db "AP2"  
4a2a f1			.pastdmark: pop af  
4a2b			endm  
# End of macro DMARK
4a2b					CALLMONITOR 
4a2b cd 2d 17			call break_point_state  
4a2e				endm  
# End of macro CALLMONITOR
4a2e				endif 
4a2e					;inc de ; skip var type indicator 
4a2e			 
4a2e					; TODO how to append numerics???? 
4a2e			 
4a2e cd dd 08				call storage_append		 
4a31			 
4a31				       NEXTW 
4a31 c3 26 20			jp macro_next 
4a34				endm 
# End of macro NEXTW
4a34			.SDEL: 
4a34				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
4a34 6a				db WORD_SYS_CORE+86             
4a35 80 4a			dw .OPEN            
4a37 05				db 4 + 1 
4a38 .. 00			db "ERA",0              
4a3c				endm 
# End of macro CWHEAD
4a3c			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
4a3c					FORTH_DSP_VALUEHL 
4a3c cd b4 1e			call macro_dsp_valuehl 
4a3f				endm 
# End of macro FORTH_DSP_VALUEHL
4a3f			;		push hl 	; save file id 
4a3f			 
4a3f					if DEBUG_FORTH_WORDS_KEY 
4a3f						DMARK "ERA" 
4a3f f5				push af  
4a40 3a 54 4a			ld a, (.dmark)  
4a43 32 bd fb			ld (debug_mark),a  
4a46 3a 55 4a			ld a, (.dmark+1)  
4a49 32 be fb			ld (debug_mark+1),a  
4a4c 3a 56 4a			ld a, (.dmark+2)  
4a4f 32 bf fb			ld (debug_mark+2),a  
4a52 18 03			jr .pastdmark  
4a54 ..			.dmark: db "ERA"  
4a57 f1			.pastdmark: pop af  
4a58			endm  
# End of macro DMARK
4a58						CALLMONITOR 
4a58 cd 2d 17			call break_point_state  
4a5b				endm  
# End of macro CALLMONITOR
4a5b					endif 
4a5b				if DEBUG_STORESE 
4a5b					DMARK "ER1" 
4a5b f5				push af  
4a5c 3a 70 4a			ld a, (.dmark)  
4a5f 32 bd fb			ld (debug_mark),a  
4a62 3a 71 4a			ld a, (.dmark+1)  
4a65 32 be fb			ld (debug_mark+1),a  
4a68 3a 72 4a			ld a, (.dmark+2)  
4a6b 32 bf fb			ld (debug_mark+2),a  
4a6e 18 03			jr .pastdmark  
4a70 ..			.dmark: db "ER1"  
4a73 f1			.pastdmark: pop af  
4a74			endm  
# End of macro DMARK
4a74					CALLMONITOR 
4a74 cd 2d 17			call break_point_state  
4a77				endm  
# End of macro CALLMONITOR
4a77				endif 
4a77					FORTH_DSP_POP 
4a77 cd 6c 1f			call macro_forth_dsp_pop 
4a7a				endm 
# End of macro FORTH_DSP_POP
4a7a			 
4a7a			;		pop hl 
4a7a			 
4a7a cd 49 05				call storage_erase 
4a7d				       NEXTW 
4a7d c3 26 20			jp macro_next 
4a80				endm 
# End of macro NEXTW
4a80			 
4a80			.OPEN: 
4a80				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
4a80 6b				db WORD_SYS_CORE+87             
4a81 10 4b			dw .READ            
4a83 05				db 4 + 1 
4a84 .. 00			db "OPEN",0              
4a89				endm 
# End of macro CWHEAD
4a89			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
4a89			; | | e.g. 
4a89			; | | $01 OPEN $01 DO $01 READ . LOOP 
4a89			; | | 
4a89			; | | Will return with 255 blocks if the file does not exist 
4a89			 
4a89					if DEBUG_FORTH_WORDS_KEY 
4a89						DMARK "OPN" 
4a89 f5				push af  
4a8a 3a 9e 4a			ld a, (.dmark)  
4a8d 32 bd fb			ld (debug_mark),a  
4a90 3a 9f 4a			ld a, (.dmark+1)  
4a93 32 be fb			ld (debug_mark+1),a  
4a96 3a a0 4a			ld a, (.dmark+2)  
4a99 32 bf fb			ld (debug_mark+2),a  
4a9c 18 03			jr .pastdmark  
4a9e ..			.dmark: db "OPN"  
4aa1 f1			.pastdmark: pop af  
4aa2			endm  
# End of macro DMARK
4aa2						CALLMONITOR 
4aa2 cd 2d 17			call break_point_state  
4aa5				endm  
# End of macro CALLMONITOR
4aa5					endif 
4aa5					; TODO handle multiple file opens 
4aa5			 
4aa5 3e 01			       	ld a, 1 
4aa7 32 df f9				ld (store_openext), a 
4aaa			 
4aaa					; get max extents for this file 
4aaa				 
4aaa								 
4aaa					FORTH_DSP_VALUEHL 
4aaa cd b4 1e			call macro_dsp_valuehl 
4aad				endm 
# End of macro FORTH_DSP_VALUEHL
4aad			 
4aad 65					ld h, l 
4aae 2e 00				ld l, 0 
4ab0			 
4ab0				if DEBUG_STORESE 
4ab0					DMARK "OPN" 
4ab0 f5				push af  
4ab1 3a c5 4a			ld a, (.dmark)  
4ab4 32 bd fb			ld (debug_mark),a  
4ab7 3a c6 4a			ld a, (.dmark+1)  
4aba 32 be fb			ld (debug_mark+1),a  
4abd 3a c7 4a			ld a, (.dmark+2)  
4ac0 32 bf fb			ld (debug_mark+2),a  
4ac3 18 03			jr .pastdmark  
4ac5 ..			.dmark: db "OPN"  
4ac8 f1			.pastdmark: pop af  
4ac9			endm  
# End of macro DMARK
4ac9					CALLMONITOR 
4ac9 cd 2d 17			call break_point_state  
4acc				endm  
# End of macro CALLMONITOR
4acc				endif 
4acc			;		push hl 
4acc					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
4acc cd 6c 1f			call macro_forth_dsp_pop 
4acf				endm 
# End of macro FORTH_DSP_POP
4acf			;		pop hl 
4acf						 
4acf 11 e8 f9				ld de, store_page      ; get block zero of file 
4ad2 cd 54 08				call storage_read 
4ad5 cd 43 0d			call ishlzero 
4ad8 20 04			jr nz, .opfound 
4ada			 
4ada				; file does not exist so indicate with 255 extents in use 
4ada			 
4ada 3e ff			ld a, 255 
4adc 18 29			jr .skipopeneof 
4ade			 
4ade			 
4ade			.opfound: 
4ade			 
4ade			 
4ade 3a ea f9				ld a, (store_page+2)    ; max extents for this file 
4ae1 32 de f9				ld  (store_openmaxext), a   ; get our limit and push 
4ae4					 
4ae4				if DEBUG_STORESE 
4ae4					DMARK "OPx" 
4ae4 f5				push af  
4ae5 3a f9 4a			ld a, (.dmark)  
4ae8 32 bd fb			ld (debug_mark),a  
4aeb 3a fa 4a			ld a, (.dmark+1)  
4aee 32 be fb			ld (debug_mark+1),a  
4af1 3a fb 4a			ld a, (.dmark+2)  
4af4 32 bf fb			ld (debug_mark+2),a  
4af7 18 03			jr .pastdmark  
4af9 ..			.dmark: db "OPx"  
4afc f1			.pastdmark: pop af  
4afd			endm  
# End of macro DMARK
4afd					CALLMONITOR 
4afd cd 2d 17			call break_point_state  
4b00				endm  
# End of macro CALLMONITOR
4b00				endif 
4b00 fe 00				cp 0 
4b02 20 03				jr nz, .skipopeneof 
4b04					; have opened an empty file 
4b04					 
4b04 32 df f9				ld (store_openext), a 
4b07			 
4b07			.skipopeneof: 
4b07			 
4b07 6f					ld l, a 
4b08 26 00				ld h, 0 
4b0a cd bd 1c				call forth_push_numhl 
4b0d			 
4b0d			 
4b0d				       NEXTW 
4b0d c3 26 20			jp macro_next 
4b10				endm 
# End of macro NEXTW
4b10			.READ: 
4b10				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
4b10 6c				db WORD_SYS_CORE+88             
4b11 57 4c			dw .EOF            
4b13 05				db 4 + 1 
4b14 .. 00			db "READ",0              
4b19				endm 
# End of macro CWHEAD
4b19			; | READ ( n -- n  )  Reads next page of file id and push to stack | DONE 
4b19			; | | e.g. 
4b19			; | | $01 OPEN $01 DO $01 READ . LOOP 
4b19			 
4b19					if DEBUG_FORTH_WORDS_KEY 
4b19						DMARK "REA" 
4b19 f5				push af  
4b1a 3a 2e 4b			ld a, (.dmark)  
4b1d 32 bd fb			ld (debug_mark),a  
4b20 3a 2f 4b			ld a, (.dmark+1)  
4b23 32 be fb			ld (debug_mark+1),a  
4b26 3a 30 4b			ld a, (.dmark+2)  
4b29 32 bf fb			ld (debug_mark+2),a  
4b2c 18 03			jr .pastdmark  
4b2e ..			.dmark: db "REA"  
4b31 f1			.pastdmark: pop af  
4b32			endm  
# End of macro DMARK
4b32						CALLMONITOR 
4b32 cd 2d 17			call break_point_state  
4b35				endm  
# End of macro CALLMONITOR
4b35					endif 
4b35					; store_openext use it. If zero it is EOF 
4b35			 
4b35					; read block from current stream id 
4b35					; if the block does not contain zero term keep reading blocks until zero found 
4b35					; push the block to stack 
4b35					; save the block id to stream 
4b35			 
4b35			 
4b35					FORTH_DSP_VALUEHL 
4b35 cd b4 1e			call macro_dsp_valuehl 
4b38				endm 
# End of macro FORTH_DSP_VALUEHL
4b38			 
4b38			;		push hl 
4b38			 
4b38				if DEBUG_STORESE 
4b38					DMARK "REA" 
4b38 f5				push af  
4b39 3a 4d 4b			ld a, (.dmark)  
4b3c 32 bd fb			ld (debug_mark),a  
4b3f 3a 4e 4b			ld a, (.dmark+1)  
4b42 32 be fb			ld (debug_mark+1),a  
4b45 3a 4f 4b			ld a, (.dmark+2)  
4b48 32 bf fb			ld (debug_mark+2),a  
4b4b 18 03			jr .pastdmark  
4b4d ..			.dmark: db "REA"  
4b50 f1			.pastdmark: pop af  
4b51			endm  
# End of macro DMARK
4b51					CALLMONITOR 
4b51 cd 2d 17			call break_point_state  
4b54				endm  
# End of macro CALLMONITOR
4b54				endif 
4b54					FORTH_DSP_POP 
4b54 cd 6c 1f			call macro_forth_dsp_pop 
4b57				endm 
# End of macro FORTH_DSP_POP
4b57			 
4b57			;		pop hl 
4b57				 
4b57 65					ld h,l 
4b58			 
4b58 3a df f9				ld a, (store_openext) 
4b5b 6f					ld l, a 
4b5c					 
4b5c fe 00				cp 0 
4b5e ca 29 4c				jp z, .ateof     ; dont read past eof 
4b61			 
4b61			 
4b61 11 e8 f9				ld de, store_page 
4b64				if DEBUG_STORESE 
4b64					DMARK "RE1" 
4b64 f5				push af  
4b65 3a 79 4b			ld a, (.dmark)  
4b68 32 bd fb			ld (debug_mark),a  
4b6b 3a 7a 4b			ld a, (.dmark+1)  
4b6e 32 be fb			ld (debug_mark+1),a  
4b71 3a 7b 4b			ld a, (.dmark+2)  
4b74 32 bf fb			ld (debug_mark+2),a  
4b77 18 03			jr .pastdmark  
4b79 ..			.dmark: db "RE1"  
4b7c f1			.pastdmark: pop af  
4b7d			endm  
# End of macro DMARK
4b7d					CALLMONITOR 
4b7d cd 2d 17			call break_point_state  
4b80				endm  
# End of macro CALLMONITOR
4b80				endif 
4b80 cd 54 08				call storage_read 
4b83			 
4b83				if DEBUG_STORESE 
4b83					DMARK "RE2" 
4b83 f5				push af  
4b84 3a 98 4b			ld a, (.dmark)  
4b87 32 bd fb			ld (debug_mark),a  
4b8a 3a 99 4b			ld a, (.dmark+1)  
4b8d 32 be fb			ld (debug_mark+1),a  
4b90 3a 9a 4b			ld a, (.dmark+2)  
4b93 32 bf fb			ld (debug_mark+2),a  
4b96 18 03			jr .pastdmark  
4b98 ..			.dmark: db "RE2"  
4b9b f1			.pastdmark: pop af  
4b9c			endm  
# End of macro DMARK
4b9c					CALLMONITOR 
4b9c cd 2d 17			call break_point_state  
4b9f				endm  
# End of macro CALLMONITOR
4b9f				endif 
4b9f cd 43 0d			call ishlzero 
4ba2			;	ld a, l 
4ba2			;	add h 
4ba2			;	cp 0 
4ba2 ca 2f 4c			jp z, .readeof 
4ba5			 
4ba5				; not eof so hl should point to data to push to stack 
4ba5			 
4ba5				if DEBUG_STORESE 
4ba5					DMARK "RE3" 
4ba5 f5				push af  
4ba6 3a ba 4b			ld a, (.dmark)  
4ba9 32 bd fb			ld (debug_mark),a  
4bac 3a bb 4b			ld a, (.dmark+1)  
4baf 32 be fb			ld (debug_mark+1),a  
4bb2 3a bc 4b			ld a, (.dmark+2)  
4bb5 32 bf fb			ld (debug_mark+2),a  
4bb8 18 03			jr .pastdmark  
4bba ..			.dmark: db "RE3"  
4bbd f1			.pastdmark: pop af  
4bbe			endm  
# End of macro DMARK
4bbe					CALLMONITOR 
4bbe cd 2d 17			call break_point_state  
4bc1				endm  
# End of macro CALLMONITOR
4bc1				endif 
4bc1 cd 2b 1d			call forth_push_str 
4bc4			 
4bc4				if DEBUG_STORESE 
4bc4					DMARK "RE4" 
4bc4 f5				push af  
4bc5 3a d9 4b			ld a, (.dmark)  
4bc8 32 bd fb			ld (debug_mark),a  
4bcb 3a da 4b			ld a, (.dmark+1)  
4bce 32 be fb			ld (debug_mark+1),a  
4bd1 3a db 4b			ld a, (.dmark+2)  
4bd4 32 bf fb			ld (debug_mark+2),a  
4bd7 18 03			jr .pastdmark  
4bd9 ..			.dmark: db "RE4"  
4bdc f1			.pastdmark: pop af  
4bdd			endm  
# End of macro DMARK
4bdd					CALLMONITOR 
4bdd cd 2d 17			call break_point_state  
4be0				endm  
# End of macro CALLMONITOR
4be0				endif 
4be0				; get next block  or mark as eof 
4be0			 
4be0 3a de f9			ld a, (store_openmaxext)   ; get our limit 
4be3 4f				ld c, a	 
4be4 3a df f9			ld a, (store_openext) 
4be7			 
4be7				if DEBUG_STORESE 
4be7					DMARK "RE5" 
4be7 f5				push af  
4be8 3a fc 4b			ld a, (.dmark)  
4beb 32 bd fb			ld (debug_mark),a  
4bee 3a fd 4b			ld a, (.dmark+1)  
4bf1 32 be fb			ld (debug_mark+1),a  
4bf4 3a fe 4b			ld a, (.dmark+2)  
4bf7 32 bf fb			ld (debug_mark+2),a  
4bfa 18 03			jr .pastdmark  
4bfc ..			.dmark: db "RE5"  
4bff f1			.pastdmark: pop af  
4c00			endm  
# End of macro DMARK
4c00					CALLMONITOR 
4c00 cd 2d 17			call break_point_state  
4c03				endm  
# End of macro CALLMONITOR
4c03				endif 
4c03 b9				cp c 
4c04 28 29			jr z, .readeof     ; at last extent 
4c06			 
4c06 3c					inc a 
4c07 32 df f9				ld (store_openext), a 
4c0a			 
4c0a				if DEBUG_STORESE 
4c0a					DMARK "RE6" 
4c0a f5				push af  
4c0b 3a 1f 4c			ld a, (.dmark)  
4c0e 32 bd fb			ld (debug_mark),a  
4c11 3a 20 4c			ld a, (.dmark+1)  
4c14 32 be fb			ld (debug_mark+1),a  
4c17 3a 21 4c			ld a, (.dmark+2)  
4c1a 32 bf fb			ld (debug_mark+2),a  
4c1d 18 03			jr .pastdmark  
4c1f ..			.dmark: db "RE6"  
4c22 f1			.pastdmark: pop af  
4c23			endm  
# End of macro DMARK
4c23					CALLMONITOR 
4c23 cd 2d 17			call break_point_state  
4c26				endm  
# End of macro CALLMONITOR
4c26				endif 
4c26			 
4c26			 
4c26				       NEXTW 
4c26 c3 26 20			jp macro_next 
4c29				endm 
# End of macro NEXTW
4c29			.ateof: 
4c29 21 53 4c				ld hl, .showeof 
4c2c cd 2b 1d				call forth_push_str 
4c2f 3e 00		.readeof:	ld a, 0 
4c31 32 df f9				ld (store_openext), a 
4c34			 
4c34					 
4c34				if DEBUG_STORESE 
4c34					DMARK "REF" 
4c34 f5				push af  
4c35 3a 49 4c			ld a, (.dmark)  
4c38 32 bd fb			ld (debug_mark),a  
4c3b 3a 4a 4c			ld a, (.dmark+1)  
4c3e 32 be fb			ld (debug_mark+1),a  
4c41 3a 4b 4c			ld a, (.dmark+2)  
4c44 32 bf fb			ld (debug_mark+2),a  
4c47 18 03			jr .pastdmark  
4c49 ..			.dmark: db "REF"  
4c4c f1			.pastdmark: pop af  
4c4d			endm  
# End of macro DMARK
4c4d					CALLMONITOR 
4c4d cd 2d 17			call break_point_state  
4c50				endm  
# End of macro CALLMONITOR
4c50				endif 
4c50				       NEXTW 
4c50 c3 26 20			jp macro_next 
4c53				endm 
# End of macro NEXTW
4c53			 
4c53 .. 00		.showeof:   db "eof", 0 
4c57			 
4c57			 
4c57			.EOF: 
4c57				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
4c57 6d				db WORD_SYS_CORE+89             
4c58 98 4c			dw .FORMAT            
4c5a 04				db 3 + 1 
4c5b .. 00			db "EOF",0              
4c5f				endm 
# End of macro CWHEAD
4c5f			; | EOF ( n -- u )  Returns EOF logical state of file id n - CURRENTLY n IS IGNORED AND ONLY ONE STREAM IS SUPPORTED | DONE 
4c5f			; | | e.g. 
4c5f			; | | $01 OPEN REPEAT $01 READ $01 EOF $00 IF LOOP 
4c5f					; TODO if current block id for stream is zero then push true else false 
4c5f			 
4c5f					if DEBUG_FORTH_WORDS_KEY 
4c5f						DMARK "EOF" 
4c5f f5				push af  
4c60 3a 74 4c			ld a, (.dmark)  
4c63 32 bd fb			ld (debug_mark),a  
4c66 3a 75 4c			ld a, (.dmark+1)  
4c69 32 be fb			ld (debug_mark+1),a  
4c6c 3a 76 4c			ld a, (.dmark+2)  
4c6f 32 bf fb			ld (debug_mark+2),a  
4c72 18 03			jr .pastdmark  
4c74 ..			.dmark: db "EOF"  
4c77 f1			.pastdmark: pop af  
4c78			endm  
# End of macro DMARK
4c78						CALLMONITOR 
4c78 cd 2d 17			call break_point_state  
4c7b				endm  
# End of macro CALLMONITOR
4c7b					endif 
4c7b			 
4c7b					; TODO handlue multiple file streams 
4c7b			 
4c7b					FORTH_DSP_POP     ; for now just get rid of stream id 
4c7b cd 6c 1f			call macro_forth_dsp_pop 
4c7e				endm 
# End of macro FORTH_DSP_POP
4c7e			 
4c7e 2e 01				ld l, 1 
4c80 3a de f9				ld a, (store_openmaxext) 
4c83 fe 00				cp 0 
4c85 28 09				jr  z, .eofdone   ; empty file 
4c87 3a df f9				ld a, (store_openext) 
4c8a fe 00				cp 0 
4c8c 28 02				jr  z, .eofdone 
4c8e 2e 00				ld l, 0 
4c90 26 00		.eofdone:	ld h, 0 
4c92 cd bd 1c				call forth_push_numhl 
4c95			 
4c95			 
4c95				       NEXTW 
4c95 c3 26 20			jp macro_next 
4c98				endm 
# End of macro NEXTW
4c98			 
4c98			.FORMAT: 
4c98				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
4c98 6d				db WORD_SYS_CORE+89             
4c99 e9 4c			dw .LABEL            
4c9b 07				db 6 + 1 
4c9c .. 00			db "FORMAT",0              
4ca3				endm 
# End of macro CWHEAD
4ca3			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
4ca3					; TODO if current block id for stream is zero then push true else false 
4ca3				 
4ca3				if DEBUG_STORESE 
4ca3					DMARK "FOR" 
4ca3 f5				push af  
4ca4 3a b8 4c			ld a, (.dmark)  
4ca7 32 bd fb			ld (debug_mark),a  
4caa 3a b9 4c			ld a, (.dmark+1)  
4cad 32 be fb			ld (debug_mark+1),a  
4cb0 3a ba 4c			ld a, (.dmark+2)  
4cb3 32 bf fb			ld (debug_mark+2),a  
4cb6 18 03			jr .pastdmark  
4cb8 ..			.dmark: db "FOR"  
4cbb f1			.pastdmark: pop af  
4cbc			endm  
# End of macro DMARK
4cbc					CALLMONITOR 
4cbc cd 2d 17			call break_point_state  
4cbf				endm  
# End of macro CALLMONITOR
4cbf				endif 
4cbf					; Wipes the bank check flags to cause a reformat on next block 0 read 
4cbf			 
4cbf 21 01 00				ld hl, 1 
4cc2 3e 00				ld a, 0 
4cc4 cd e7 01				call se_writebyte 
4cc7			 
4cc7				if DEBUG_STORESE 
4cc7					DMARK "FO0" 
4cc7 f5				push af  
4cc8 3a dc 4c			ld a, (.dmark)  
4ccb 32 bd fb			ld (debug_mark),a  
4cce 3a dd 4c			ld a, (.dmark+1)  
4cd1 32 be fb			ld (debug_mark+1),a  
4cd4 3a de 4c			ld a, (.dmark+2)  
4cd7 32 bf fb			ld (debug_mark+2),a  
4cda 18 03			jr .pastdmark  
4cdc ..			.dmark: db "FO0"  
4cdf f1			.pastdmark: pop af  
4ce0			endm  
# End of macro DMARK
4ce0					CALLMONITOR 
4ce0 cd 2d 17			call break_point_state  
4ce3				endm  
# End of macro CALLMONITOR
4ce3				endif 
4ce3					; force bank init 
4ce3			 
4ce3 cd ba 03				call storage_get_block_0 
4ce6					 
4ce6				       NEXTW 
4ce6 c3 26 20			jp macro_next 
4ce9				endm 
# End of macro NEXTW
4ce9			.LABEL: 
4ce9				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
4ce9 6d				db WORD_SYS_CORE+89             
4cea 37 4d			dw .STOREPAGE            
4cec 06				db 5 + 1 
4ced .. 00			db "LABEL",0              
4cf3				endm 
# End of macro CWHEAD
4cf3			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
4cf3					; TODO test to see if bank is selected 
4cf3				 
4cf3					if DEBUG_FORTH_WORDS_KEY 
4cf3						DMARK "LBL" 
4cf3 f5				push af  
4cf4 3a 08 4d			ld a, (.dmark)  
4cf7 32 bd fb			ld (debug_mark),a  
4cfa 3a 09 4d			ld a, (.dmark+1)  
4cfd 32 be fb			ld (debug_mark+1),a  
4d00 3a 0a 4d			ld a, (.dmark+2)  
4d03 32 bf fb			ld (debug_mark+2),a  
4d06 18 03			jr .pastdmark  
4d08 ..			.dmark: db "LBL"  
4d0b f1			.pastdmark: pop af  
4d0c			endm  
# End of macro DMARK
4d0c						CALLMONITOR 
4d0c cd 2d 17			call break_point_state  
4d0f				endm  
# End of macro CALLMONITOR
4d0f					endif 
4d0f			;	if DEBUG_STORESE 
4d0f			;		DMARK "LBL" 
4d0f			;		CALLMONITOR 
4d0f			;	endif 
4d0f					FORTH_DSP_VALUEHL 
4d0f cd b4 1e			call macro_dsp_valuehl 
4d12				endm 
# End of macro FORTH_DSP_VALUEHL
4d12					;v5FORTH_DSP_VALUE 
4d12					 
4d12			;		push hl 
4d12					FORTH_DSP_POP 
4d12 cd 6c 1f			call macro_forth_dsp_pop 
4d15				endm 
# End of macro FORTH_DSP_POP
4d15			;		pop hl 
4d15			 
4d15			;v5		inc hl   ; move past the type marker 
4d15			 
4d15				if DEBUG_STORESE 
4d15					DMARK "LBl" 
4d15 f5				push af  
4d16 3a 2a 4d			ld a, (.dmark)  
4d19 32 bd fb			ld (debug_mark),a  
4d1c 3a 2b 4d			ld a, (.dmark+1)  
4d1f 32 be fb			ld (debug_mark+1),a  
4d22 3a 2c 4d			ld a, (.dmark+2)  
4d25 32 bf fb			ld (debug_mark+2),a  
4d28 18 03			jr .pastdmark  
4d2a ..			.dmark: db "LBl"  
4d2d f1			.pastdmark: pop af  
4d2e			endm  
# End of macro DMARK
4d2e					CALLMONITOR 
4d2e cd 2d 17			call break_point_state  
4d31				endm  
# End of macro CALLMONITOR
4d31				endif 
4d31 cd de 04				call storage_label 
4d34			 
4d34				       NEXTW 
4d34 c3 26 20			jp macro_next 
4d37				endm 
# End of macro NEXTW
4d37			.STOREPAGE: 
4d37				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
4d37 6d				db WORD_SYS_CORE+89             
4d38 6a 4d			dw .LABELS            
4d3a 0a				db 9 + 1 
4d3b .. 00			db "STOREPAGE",0              
4d45				endm 
# End of macro CWHEAD
4d45			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
4d45					; TODO test to see if bank is selected 
4d45				 
4d45					if DEBUG_FORTH_WORDS_KEY 
4d45						DMARK "STP" 
4d45 f5				push af  
4d46 3a 5a 4d			ld a, (.dmark)  
4d49 32 bd fb			ld (debug_mark),a  
4d4c 3a 5b 4d			ld a, (.dmark+1)  
4d4f 32 be fb			ld (debug_mark+1),a  
4d52 3a 5c 4d			ld a, (.dmark+2)  
4d55 32 bf fb			ld (debug_mark+2),a  
4d58 18 03			jr .pastdmark  
4d5a ..			.dmark: db "STP"  
4d5d f1			.pastdmark: pop af  
4d5e			endm  
# End of macro DMARK
4d5e						CALLMONITOR 
4d5e cd 2d 17			call break_point_state  
4d61				endm  
# End of macro CALLMONITOR
4d61					endif 
4d61			;	if DEBUG_STORESE 
4d61			;		DMARK "STP" 
4d61			;		CALLMONITOR 
4d61			;	endif 
4d61			 
4d61 21 e8 f9			ld hl, store_page 
4d64 cd bd 1c			call forth_push_numhl 
4d67			 
4d67			 
4d67				       NEXTW 
4d67 c3 26 20			jp macro_next 
4d6a				endm 
# End of macro NEXTW
4d6a			.LABELS: 
4d6a				CWHEAD .ENDSTORAGE 89 "LABELS" 6 WORD_FLAG_CODE 
4d6a 6d				db WORD_SYS_CORE+89             
4d6b f4 4d			dw .ENDSTORAGE            
4d6d 07				db 6 + 1 
4d6e .. 00			db "LABELS",0              
4d75				endm 
# End of macro CWHEAD
4d75			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | TO TEST 
4d75					;  
4d75			 
4d75					; save the current device selected to restore afterwards 
4d75				 
4d75 3a ce f9				ld a, (spi_device) 
4d78 f5					push af 
4d79			 
4d79			 
4d79					; run through each of the banks 
4d79			 
4d79 21 01 00				ld hl, 1 
4d7c cd bd 1c				call forth_push_numhl 
4d7f 3e ff				ld a, SPI_CE_HIGH 
4d81 cb 87				res SPI_CE0, a 
4d83 32 ce f9				ld (spi_device), a 
4d86 cd ba 03				call storage_get_block_0 
4d89 21 eb f9				ld hl, store_page+3 
4d8c cd 2b 1d				call forth_push_str 
4d8f			 
4d8f					 
4d8f 21 02 00				ld hl, 2 
4d92 cd bd 1c				call forth_push_numhl 
4d95 3e ff				ld a, SPI_CE_HIGH 
4d97 cb 8f				res SPI_CE1, a 
4d99 32 ce f9				ld (spi_device), a 
4d9c cd ba 03				call storage_get_block_0 
4d9f 21 eb f9				ld hl, store_page+3 
4da2 cd 2b 1d				call forth_push_str 
4da5			 
4da5					 
4da5 21 03 00				ld hl, 3 
4da8 cd bd 1c				call forth_push_numhl 
4dab 3e ff				ld a, SPI_CE_HIGH 
4dad cb 97				res SPI_CE2, a 
4daf 32 ce f9				ld (spi_device), a 
4db2 cd ba 03				call storage_get_block_0 
4db5 21 eb f9				ld hl, store_page+3 
4db8 cd 2b 1d				call forth_push_str 
4dbb			 
4dbb			 
4dbb 21 04 00				ld hl, 4 
4dbe cd bd 1c				call forth_push_numhl 
4dc1 3e ff				ld a, SPI_CE_HIGH 
4dc3 cb 9f				res SPI_CE3, a 
4dc5 32 ce f9				ld (spi_device), a 
4dc8 cd ba 03				call storage_get_block_0 
4dcb 21 eb f9				ld hl, store_page+3 
4dce cd 2b 1d				call forth_push_str 
4dd1			 
4dd1					 
4dd1			 
4dd1 21 05 00				ld hl, 5 
4dd4 cd bd 1c				call forth_push_numhl 
4dd7 3e ff				ld a, SPI_CE_HIGH 
4dd9 cb a7				res SPI_CE4, a 
4ddb 32 ce f9				ld (spi_device), a 
4dde cd ba 03				call storage_get_block_0 
4de1 21 eb f9				ld hl, store_page+3 
4de4 cd 2b 1d				call forth_push_str 
4de7			 
4de7					 
4de7					; push fixed count of storage devices (on board) for now 
4de7			 
4de7 21 05 00				ld hl, 5 
4dea cd bd 1c				call forth_push_numhl 
4ded			 
4ded					; restore selected device  
4ded				 
4ded f1					pop af 
4dee 32 ce f9				ld (spi_device), a 
4df1			 
4df1				       NEXTW 
4df1 c3 26 20			jp macro_next 
4df4				endm 
# End of macro NEXTW
4df4			 
4df4			.ENDSTORAGE: 
4df4			; eof 
# End of file forth_words_storage.asm
4df4			endif 
4df4				include "forth_words_device.asm" 
4df4			; Device related words 
4df4			 
4df4			; | ## Device Words 
4df4			 
4df4			if SOUND_ENABLE 
4df4			.NOTE: 
4df4				CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4df4			; | NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds | TODO 
4df4					if DEBUG_FORTH_WORDS_KEY 
4df4						DMARK "NTE" 
4df4						CALLMONITOR 
4df4					endif 
4df4			 
4df4				 
4df4			 
4df4					NEXTW 
4df4			.AFTERSOUND: 
4df4			endif 
4df4			 
4df4			 
4df4			USE_GPIO: equ 0 
4df4			 
4df4			if USE_GPIO 
4df4			.GP1: 
4df4				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4df4			; | IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result  |  
4df4					NEXTW 
4df4			.GP2: 
4df4				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4df4			; | IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2  |  
4df4			 
4df4					NEXTW 
4df4			 
4df4			.GP3: 
4df4				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4df4			; | IOBYTE ( u1 --  )    Perform a GPIO write of byte u1  |  
4df4			 
4df4					NEXTW 
4df4			 
4df4			.GP4: 
4df4				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4df4			; | IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin  |  
4df4			 
4df4					NEXTW 
4df4			.SIN: 
4df4			 
4df4			 
4df4			endif 
4df4			 
4df4			 
4df4				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4df4 33				db WORD_SYS_CORE+31             
4df5 29 4e			dw .SOUT            
4df7 03				db 2 + 1 
4df8 .. 00			db "IN",0              
4dfb				endm 
# End of macro CWHEAD
4dfb			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4dfb					if DEBUG_FORTH_WORDS_KEY 
4dfb						DMARK "IN." 
4dfb f5				push af  
4dfc 3a 10 4e			ld a, (.dmark)  
4dff 32 bd fb			ld (debug_mark),a  
4e02 3a 11 4e			ld a, (.dmark+1)  
4e05 32 be fb			ld (debug_mark+1),a  
4e08 3a 12 4e			ld a, (.dmark+2)  
4e0b 32 bf fb			ld (debug_mark+2),a  
4e0e 18 03			jr .pastdmark  
4e10 ..			.dmark: db "IN."  
4e13 f1			.pastdmark: pop af  
4e14			endm  
# End of macro DMARK
4e14						CALLMONITOR 
4e14 cd 2d 17			call break_point_state  
4e17				endm  
# End of macro CALLMONITOR
4e17					endif 
4e17					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e17 cd b4 1e			call macro_dsp_valuehl 
4e1a				endm 
# End of macro FORTH_DSP_VALUEHL
4e1a			 
4e1a e5					push hl 
4e1b			 
4e1b					; destroy value TOS 
4e1b			 
4e1b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e1b cd 6c 1f			call macro_forth_dsp_pop 
4e1e				endm 
# End of macro FORTH_DSP_POP
4e1e			 
4e1e					; one value on hl get other one back 
4e1e			 
4e1e c1					pop bc 
4e1f			 
4e1f					; do the sub 
4e1f			;		ex de, hl 
4e1f			 
4e1f ed 68				in l,(c) 
4e21			 
4e21					; save it 
4e21			 
4e21 26 00				ld h,0 
4e23			 
4e23					; TODO push value back onto stack for another op etc 
4e23			 
4e23 cd bd 1c				call forth_push_numhl 
4e26					NEXTW 
4e26 c3 26 20			jp macro_next 
4e29				endm 
# End of macro NEXTW
4e29			.SOUT: 
4e29				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4e29 34				db WORD_SYS_CORE+32             
4e2a 7c 4e			dw .SPIO            
4e2c 04				db 3 + 1 
4e2d .. 00			db "OUT",0              
4e31				endm 
# End of macro CWHEAD
4e31			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4e31					if DEBUG_FORTH_WORDS_KEY 
4e31						DMARK "OUT" 
4e31 f5				push af  
4e32 3a 46 4e			ld a, (.dmark)  
4e35 32 bd fb			ld (debug_mark),a  
4e38 3a 47 4e			ld a, (.dmark+1)  
4e3b 32 be fb			ld (debug_mark+1),a  
4e3e 3a 48 4e			ld a, (.dmark+2)  
4e41 32 bf fb			ld (debug_mark+2),a  
4e44 18 03			jr .pastdmark  
4e46 ..			.dmark: db "OUT"  
4e49 f1			.pastdmark: pop af  
4e4a			endm  
# End of macro DMARK
4e4a						CALLMONITOR 
4e4a cd 2d 17			call break_point_state  
4e4d				endm  
# End of macro CALLMONITOR
4e4d					endif 
4e4d			 
4e4d					; get port 
4e4d			 
4e4d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e4d cd b4 1e			call macro_dsp_valuehl 
4e50				endm 
# End of macro FORTH_DSP_VALUEHL
4e50			 
4e50 e5					push hl 
4e51			 
4e51					; destroy value TOS 
4e51			 
4e51					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e51 cd 6c 1f			call macro_forth_dsp_pop 
4e54				endm 
# End of macro FORTH_DSP_POP
4e54			 
4e54					; get byte to send 
4e54			 
4e54					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e54 cd b4 1e			call macro_dsp_valuehl 
4e57				endm 
# End of macro FORTH_DSP_VALUEHL
4e57			 
4e57			;		push hl 
4e57			 
4e57					; destroy value TOS 
4e57			 
4e57					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e57 cd 6c 1f			call macro_forth_dsp_pop 
4e5a				endm 
# End of macro FORTH_DSP_POP
4e5a			 
4e5a					; one value on hl get other one back 
4e5a			 
4e5a			;		pop hl 
4e5a			 
4e5a c1					pop bc 
4e5b			 
4e5b					if DEBUG_FORTH_WORDS 
4e5b						DMARK "OUT" 
4e5b f5				push af  
4e5c 3a 70 4e			ld a, (.dmark)  
4e5f 32 bd fb			ld (debug_mark),a  
4e62 3a 71 4e			ld a, (.dmark+1)  
4e65 32 be fb			ld (debug_mark+1),a  
4e68 3a 72 4e			ld a, (.dmark+2)  
4e6b 32 bf fb			ld (debug_mark+2),a  
4e6e 18 03			jr .pastdmark  
4e70 ..			.dmark: db "OUT"  
4e73 f1			.pastdmark: pop af  
4e74			endm  
# End of macro DMARK
4e74						CALLMONITOR 
4e74 cd 2d 17			call break_point_state  
4e77				endm  
# End of macro CALLMONITOR
4e77					endif 
4e77			 
4e77 ed 69				out (c), l 
4e79			 
4e79					NEXTW 
4e79 c3 26 20			jp macro_next 
4e7c				endm 
# End of macro NEXTW
4e7c			 
4e7c			 
4e7c			.SPIO: 
4e7c			 
4e7c			if STORAGE_SE 
4e7c				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4e7c 51				db WORD_SYS_CORE+61             
4e7d 8d 4e			dw .SPICEH            
4e7f 07				db 6 + 1 
4e80 .. 00			db "SPICEL",0              
4e87				endm 
# End of macro CWHEAD
4e87			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4e87			 
4e87 cd 95 01				call spi_ce_low 
4e8a			    NEXTW 
4e8a c3 26 20			jp macro_next 
4e8d				endm 
# End of macro NEXTW
4e8d			 
4e8d			.SPICEH: 
4e8d				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4e8d 51				db WORD_SYS_CORE+61             
4e8e 9e 4e			dw .SPIOb            
4e90 07				db 6 + 1 
4e91 .. 00			db "SPICEH",0              
4e98				endm 
# End of macro CWHEAD
4e98			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4e98			 
4e98 cd 84 01				call spi_ce_high 
4e9b			    NEXTW 
4e9b c3 26 20			jp macro_next 
4e9e				endm 
# End of macro NEXTW
4e9e			 
4e9e			 
4e9e			.SPIOb: 
4e9e			 
4e9e				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4e9e 51				db WORD_SYS_CORE+61             
4e9f b4 4e			dw .SPII            
4ea1 05				db 4 + 1 
4ea2 .. 00			db "SPIO",0              
4ea7				endm 
# End of macro CWHEAD
4ea7			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4ea7			 
4ea7					; get port 
4ea7			 
4ea7			 
4ea7					; get byte to send 
4ea7			 
4ea7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ea7 cd b4 1e			call macro_dsp_valuehl 
4eaa				endm 
# End of macro FORTH_DSP_VALUEHL
4eaa			 
4eaa			;		push hl    ; u1  
4eaa			 
4eaa					; destroy value TOS 
4eaa			 
4eaa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4eaa cd 6c 1f			call macro_forth_dsp_pop 
4ead				endm 
# End of macro FORTH_DSP_POP
4ead			 
4ead					; one value on hl get other one back 
4ead			 
4ead			;		pop hl   ; u2 - addr 
4ead			 
4ead					; TODO Send SPI byte 
4ead			 
4ead 7d					ld a, l 
4eae cd b9 00				call spi_send_byte 
4eb1			 
4eb1					NEXTW 
4eb1 c3 26 20			jp macro_next 
4eb4				endm 
# End of macro NEXTW
4eb4			 
4eb4			.SPII: 
4eb4				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4eb4 52				db WORD_SYS_CORE+62             
4eb5 c9 4e			dw .SESEL            
4eb7 06				db 5 + 1 
4eb8 .. 00			db "SPII",0              
4ebd				endm 
# End of macro CWHEAD
4ebd			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4ebd			 
4ebd					; TODO Get SPI byte 
4ebd			 
4ebd cd da 00				call spi_read_byte 
4ec0			 
4ec0 26 00				ld h, 0 
4ec2 6f					ld l, a 
4ec3 cd bd 1c				call forth_push_numhl 
4ec6			 
4ec6					NEXTW 
4ec6 c3 26 20			jp macro_next 
4ec9				endm 
# End of macro NEXTW
4ec9			 
4ec9			 
4ec9			 
4ec9			.SESEL: 
4ec9				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4ec9 66				db WORD_SYS_CORE+82             
4eca 6d 4f			dw .CARTDEV            
4ecc 05				db 4 + 1 
4ecd .. 00			db "BANK",0              
4ed2				endm 
# End of macro CWHEAD
4ed2			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4ed2					if DEBUG_FORTH_WORDS_KEY 
4ed2						DMARK "BNK" 
4ed2 f5				push af  
4ed3 3a e7 4e			ld a, (.dmark)  
4ed6 32 bd fb			ld (debug_mark),a  
4ed9 3a e8 4e			ld a, (.dmark+1)  
4edc 32 be fb			ld (debug_mark+1),a  
4edf 3a e9 4e			ld a, (.dmark+2)  
4ee2 32 bf fb			ld (debug_mark+2),a  
4ee5 18 03			jr .pastdmark  
4ee7 ..			.dmark: db "BNK"  
4eea f1			.pastdmark: pop af  
4eeb			endm  
# End of macro DMARK
4eeb						CALLMONITOR 
4eeb cd 2d 17			call break_point_state  
4eee				endm  
# End of macro CALLMONITOR
4eee					endif 
4eee			 
4eee 3e ff				ld a, 255 
4ef0 32 d1 f9				ld (spi_cartdev), a 
4ef3			 
4ef3					; get bank 
4ef3			 
4ef3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ef3 cd b4 1e			call macro_dsp_valuehl 
4ef6				endm 
# End of macro FORTH_DSP_VALUEHL
4ef6			 
4ef6			;		push hl 
4ef6			 
4ef6					; destroy value TOS 
4ef6			 
4ef6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4ef6 cd 6c 1f			call macro_forth_dsp_pop 
4ef9				endm 
# End of macro FORTH_DSP_POP
4ef9			 
4ef9					; one value on hl get other one back 
4ef9			 
4ef9			;		pop hl 
4ef9			 
4ef9			 
4ef9 0e ff				ld c, SPI_CE_HIGH 
4efb 06 30				ld b, '0'    ; human readable bank number 
4efd			 
4efd 7d					ld a, l 
4efe			 
4efe					if DEBUG_FORTH_WORDS 
4efe						DMARK "BNK" 
4efe f5				push af  
4eff 3a 13 4f			ld a, (.dmark)  
4f02 32 bd fb			ld (debug_mark),a  
4f05 3a 14 4f			ld a, (.dmark+1)  
4f08 32 be fb			ld (debug_mark+1),a  
4f0b 3a 15 4f			ld a, (.dmark+2)  
4f0e 32 bf fb			ld (debug_mark+2),a  
4f11 18 03			jr .pastdmark  
4f13 ..			.dmark: db "BNK"  
4f16 f1			.pastdmark: pop af  
4f17			endm  
# End of macro DMARK
4f17						CALLMONITOR 
4f17 cd 2d 17			call break_point_state  
4f1a				endm  
# End of macro CALLMONITOR
4f1a					endif 
4f1a			 
4f1a					; active low 
4f1a			 
4f1a fe 00				cp 0 
4f1c 28 28				jr z, .bset 
4f1e fe 01				cp 1 
4f20 20 04				jr nz, .b2 
4f22 cb 81				res 0, c 
4f24 06 31				ld b, '1'    ; human readable bank number 
4f26 fe 02		.b2:		cp 2 
4f28 20 04				jr nz, .b3 
4f2a cb 89				res 1, c 
4f2c 06 32				ld b, '2'    ; human readable bank number 
4f2e fe 03		.b3:		cp 3 
4f30 20 04				jr nz, .b4 
4f32 cb 91				res 2, c 
4f34 06 33				ld b, '3'    ; human readable bank number 
4f36 fe 04		.b4:		cp 4 
4f38 20 04				jr nz, .b5 
4f3a cb 99				res 3, c 
4f3c 06 34				ld b, '4'    ; human readable bank number 
4f3e fe 05		.b5:		cp 5 
4f40 20 04				jr nz, .bset 
4f42 cb a1				res 4, c 
4f44 06 35				ld b, '5'    ; human readable bank number 
4f46			 
4f46			.bset: 
4f46 79					ld a, c 
4f47 32 ce f9				ld (spi_device),a 
4f4a 78					ld a, b 
4f4b 32 cd f9				ld (spi_device_id),a 
4f4e					if DEBUG_FORTH_WORDS 
4f4e						DMARK "BN2" 
4f4e f5				push af  
4f4f 3a 63 4f			ld a, (.dmark)  
4f52 32 bd fb			ld (debug_mark),a  
4f55 3a 64 4f			ld a, (.dmark+1)  
4f58 32 be fb			ld (debug_mark+1),a  
4f5b 3a 65 4f			ld a, (.dmark+2)  
4f5e 32 bf fb			ld (debug_mark+2),a  
4f61 18 03			jr .pastdmark  
4f63 ..			.dmark: db "BN2"  
4f66 f1			.pastdmark: pop af  
4f67			endm  
# End of macro DMARK
4f67						CALLMONITOR 
4f67 cd 2d 17			call break_point_state  
4f6a				endm  
# End of macro CALLMONITOR
4f6a					endif 
4f6a			 
4f6a					NEXTW 
4f6a c3 26 20			jp macro_next 
4f6d				endm 
# End of macro NEXTW
4f6d			 
4f6d			.CARTDEV: 
4f6d				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4f6d 66				db WORD_SYS_CORE+82             
4f6e 16 50			dw .ENDDEVICE            
4f70 08				db 7 + 1 
4f71 .. 00			db "CARTDEV",0              
4f79				endm 
# End of macro CWHEAD
4f79			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4f79					if DEBUG_FORTH_WORDS_KEY 
4f79						DMARK "CDV" 
4f79 f5				push af  
4f7a 3a 8e 4f			ld a, (.dmark)  
4f7d 32 bd fb			ld (debug_mark),a  
4f80 3a 8f 4f			ld a, (.dmark+1)  
4f83 32 be fb			ld (debug_mark+1),a  
4f86 3a 90 4f			ld a, (.dmark+2)  
4f89 32 bf fb			ld (debug_mark+2),a  
4f8c 18 03			jr .pastdmark  
4f8e ..			.dmark: db "CDV"  
4f91 f1			.pastdmark: pop af  
4f92			endm  
# End of macro DMARK
4f92						CALLMONITOR 
4f92 cd 2d 17			call break_point_state  
4f95				endm  
# End of macro CALLMONITOR
4f95					endif 
4f95			 
4f95					; disable se storage bank selection 
4f95			 
4f95 3e ff				ld a, SPI_CE_HIGH		; ce high 
4f97 32 ce f9				ld (spi_device), a 
4f9a			 
4f9a					; get bank 
4f9a			 
4f9a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f9a cd b4 1e			call macro_dsp_valuehl 
4f9d				endm 
# End of macro FORTH_DSP_VALUEHL
4f9d			 
4f9d			;		push hl 
4f9d			 
4f9d					; destroy value TOS 
4f9d			 
4f9d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f9d cd 6c 1f			call macro_forth_dsp_pop 
4fa0				endm 
# End of macro FORTH_DSP_POP
4fa0			 
4fa0					; one value on hl get other one back 
4fa0			 
4fa0			;		pop hl 
4fa0			 
4fa0					; active low 
4fa0			 
4fa0 0e ff				ld c, 255 
4fa2			 
4fa2 7d					ld a, l 
4fa3					if DEBUG_FORTH_WORDS 
4fa3						DMARK "CDV" 
4fa3 f5				push af  
4fa4 3a b8 4f			ld a, (.dmark)  
4fa7 32 bd fb			ld (debug_mark),a  
4faa 3a b9 4f			ld a, (.dmark+1)  
4fad 32 be fb			ld (debug_mark+1),a  
4fb0 3a ba 4f			ld a, (.dmark+2)  
4fb3 32 bf fb			ld (debug_mark+2),a  
4fb6 18 03			jr .pastdmark  
4fb8 ..			.dmark: db "CDV"  
4fbb f1			.pastdmark: pop af  
4fbc			endm  
# End of macro DMARK
4fbc						CALLMONITOR 
4fbc cd 2d 17			call break_point_state  
4fbf				endm  
# End of macro CALLMONITOR
4fbf					endif 
4fbf fe 00				cp 0 
4fc1 28 30				jr z, .cset 
4fc3 fe 01				cp 1 
4fc5 20 02				jr nz, .c2 
4fc7 cb 81				res 0, c 
4fc9 fe 02		.c2:		cp 2 
4fcb 20 02				jr nz, .c3 
4fcd cb 89				res 1, c 
4fcf fe 03		.c3:		cp 3 
4fd1 20 02				jr nz, .c4 
4fd3 cb 91				res 2, c 
4fd5 fe 04		.c4:		cp 4 
4fd7 20 02				jr nz, .c5 
4fd9 cb 99				res 3, c 
4fdb fe 05		.c5:		cp 5 
4fdd 20 02				jr nz, .c6 
4fdf cb a1				res 4, c 
4fe1 fe 06		.c6:		cp 6 
4fe3 20 02				jr nz, .c7 
4fe5 cb a9				res 5, c 
4fe7 fe 07		.c7:		cp 7 
4fe9 20 02				jr nz, .c8 
4feb cb b1				res 6, c 
4fed fe 08		.c8:		cp 8 
4fef 20 02				jr nz, .cset 
4ff1 cb b9				res 7, c 
4ff3 79			.cset:		ld a, c 
4ff4 32 d1 f9				ld (spi_cartdev),a 
4ff7			 
4ff7					if DEBUG_FORTH_WORDS 
4ff7						DMARK "CD2" 
4ff7 f5				push af  
4ff8 3a 0c 50			ld a, (.dmark)  
4ffb 32 bd fb			ld (debug_mark),a  
4ffe 3a 0d 50			ld a, (.dmark+1)  
5001 32 be fb			ld (debug_mark+1),a  
5004 3a 0e 50			ld a, (.dmark+2)  
5007 32 bf fb			ld (debug_mark+2),a  
500a 18 03			jr .pastdmark  
500c ..			.dmark: db "CD2"  
500f f1			.pastdmark: pop af  
5010			endm  
# End of macro DMARK
5010						CALLMONITOR 
5010 cd 2d 17			call break_point_state  
5013				endm  
# End of macro CALLMONITOR
5013					endif 
5013					NEXTW 
5013 c3 26 20			jp macro_next 
5016				endm 
# End of macro NEXTW
5016			endif 
5016			 
5016			.ENDDEVICE: 
5016			; eof 
5016			 
# End of file forth_words_device.asm
5016			 
5016			; var handler 
5016			 
5016			 
5016			.VARS: 
5016				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
5016 78				db WORD_SYS_CORE+100             
5017 2e 50			dw .V0Q            
5019 04				db 3 + 1 
501a .. 00			db "V0!",0              
501e				endm 
# End of macro CWHEAD
501e			;| V0! ( u1 -- )  Store value to v0  | DONE 
501e			 
501e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
501e cd b4 1e			call macro_dsp_valuehl 
5021				endm 
# End of macro FORTH_DSP_VALUEHL
5021			 
5021 11 96 f9				ld de, cli_var_array 
5024			 
5024 eb					ex de, hl 
5025 73					ld (hl), e 
5026 23					inc hl 
5027 72					ld (hl), d 
5028			 
5028					; destroy value TOS 
5028			 
5028					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5028 cd 6c 1f			call macro_forth_dsp_pop 
502b				endm 
# End of macro FORTH_DSP_POP
502b			 
502b				       NEXTW 
502b c3 26 20			jp macro_next 
502e				endm 
# End of macro NEXTW
502e			.V0Q: 
502e				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
502e 79				db WORD_SYS_CORE+101             
502f 3f 50			dw .V1S            
5031 04				db 3 + 1 
5032 .. 00			db "V0@",0              
5036				endm 
# End of macro CWHEAD
5036			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5036 2a 96 f9				ld hl, (cli_var_array) 
5039 cd bd 1c				call forth_push_numhl 
503c			 
503c				       NEXTW 
503c c3 26 20			jp macro_next 
503f				endm 
# End of macro NEXTW
503f			.V1S: 
503f				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
503f 7a				db WORD_SYS_CORE+102             
5040 57 50			dw .V1Q            
5042 04				db 3 + 1 
5043 .. 00			db "V1!",0              
5047				endm 
# End of macro CWHEAD
5047			;| V1! ( u1 -- )  Store value to v1 | DONE 
5047					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5047 cd b4 1e			call macro_dsp_valuehl 
504a				endm 
# End of macro FORTH_DSP_VALUEHL
504a			 
504a 11 98 f9				ld de, cli_var_array+2 
504d				 
504d eb					ex de, hl 
504e 73					ld (hl), e 
504f 23					inc hl 
5050 72					ld (hl), d 
5051			 
5051					; destroy value TOS 
5051			 
5051					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5051 cd 6c 1f			call macro_forth_dsp_pop 
5054				endm 
# End of macro FORTH_DSP_POP
5054				       NEXTW 
5054 c3 26 20			jp macro_next 
5057				endm 
# End of macro NEXTW
5057			.V1Q: 
5057				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5057 7b				db WORD_SYS_CORE+103             
5058 68 50			dw .V2S            
505a 04				db 3 + 1 
505b .. 00			db "V1@",0              
505f				endm 
# End of macro CWHEAD
505f			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
505f 2a 98 f9				ld hl, (cli_var_array+2) 
5062 cd bd 1c				call forth_push_numhl 
5065				       NEXTW 
5065 c3 26 20			jp macro_next 
5068				endm 
# End of macro NEXTW
5068			.V2S: 
5068				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
5068 7c				db WORD_SYS_CORE+104             
5069 80 50			dw .V2Q            
506b 04				db 3 + 1 
506c .. 00			db "V2!",0              
5070				endm 
# End of macro CWHEAD
5070			;| V2! ( u1 -- )  Store value to v2 | DONE 
5070					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5070 cd b4 1e			call macro_dsp_valuehl 
5073				endm 
# End of macro FORTH_DSP_VALUEHL
5073			 
5073 11 9a f9				ld de, cli_var_array+4 
5076				 
5076 eb					ex de, hl 
5077 73					ld (hl), e 
5078 23					inc hl 
5079 72					ld (hl), d 
507a			 
507a					; destroy value TOS 
507a			 
507a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
507a cd 6c 1f			call macro_forth_dsp_pop 
507d				endm 
# End of macro FORTH_DSP_POP
507d				       NEXTW 
507d c3 26 20			jp macro_next 
5080				endm 
# End of macro NEXTW
5080			.V2Q: 
5080				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5080 7d				db WORD_SYS_CORE+105             
5081 91 50			dw .V3S            
5083 04				db 3 + 1 
5084 .. 00			db "V2@",0              
5088				endm 
# End of macro CWHEAD
5088			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
5088 2a 9a f9				ld hl, (cli_var_array+4) 
508b cd bd 1c				call forth_push_numhl 
508e				       NEXTW 
508e c3 26 20			jp macro_next 
5091				endm 
# End of macro NEXTW
5091			.V3S: 
5091				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5091 7c				db WORD_SYS_CORE+104             
5092 a9 50			dw .V3Q            
5094 04				db 3 + 1 
5095 .. 00			db "V3!",0              
5099				endm 
# End of macro CWHEAD
5099			;| V3! ( u1 -- )  Store value to v3 | DONE 
5099					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5099 cd b4 1e			call macro_dsp_valuehl 
509c				endm 
# End of macro FORTH_DSP_VALUEHL
509c			 
509c 11 9c f9				ld de, cli_var_array+6 
509f				 
509f eb					ex de, hl 
50a0 73					ld (hl), e 
50a1 23					inc hl 
50a2 72					ld (hl), d 
50a3			 
50a3					; destroy value TOS 
50a3			 
50a3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
50a3 cd 6c 1f			call macro_forth_dsp_pop 
50a6				endm 
# End of macro FORTH_DSP_POP
50a6				       NEXTW 
50a6 c3 26 20			jp macro_next 
50a9				endm 
# End of macro NEXTW
50a9			.V3Q: 
50a9				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
50a9 7d				db WORD_SYS_CORE+105             
50aa ba 50			dw .END            
50ac 04				db 3 + 1 
50ad .. 00			db "V3@",0              
50b1				endm 
# End of macro CWHEAD
50b1			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
50b1 2a 9c f9				ld hl, (cli_var_array+6) 
50b4 cd bd 1c				call forth_push_numhl 
50b7				       NEXTW 
50b7 c3 26 20			jp macro_next 
50ba				endm 
# End of macro NEXTW
50ba			 
50ba			 
50ba			 
50ba			 
50ba			 
50ba			; end of dict marker 
50ba			 
50ba 00			.END:    db WORD_SYS_END 
50bb 00 00			dw 0 
50bd 00				db 0 
50be			 
50be			; use to jp here for user dict words to save on macro expansion  
50be			 
50be			user_dict_next: 
50be				NEXTW 
50be c3 26 20			jp macro_next 
50c1				endm 
# End of macro NEXTW
50c1			 
50c1			 
50c1			user_exec: 
50c1				;    ld hl, <word code> 
50c1				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
50c1				;    call forthexec 
50c1				;    jp user_dict_next   (NEXT) 
50c1			        ;    <word code bytes> 
50c1 eb				ex de, hl 
50c2 2a a4 f2			ld hl,(os_tok_ptr) 
50c5				 
50c5				FORTH_RSP_NEXT 
50c5 cd 64 1c			call macro_forth_rsp_next 
50c8				endm 
# End of macro FORTH_RSP_NEXT
50c8			 
50c8			if DEBUG_FORTH_UWORD 
50c8						DMARK "UEX" 
50c8 f5				push af  
50c9 3a dd 50			ld a, (.dmark)  
50cc 32 bd fb			ld (debug_mark),a  
50cf 3a de 50			ld a, (.dmark+1)  
50d2 32 be fb			ld (debug_mark+1),a  
50d5 3a df 50			ld a, (.dmark+2)  
50d8 32 bf fb			ld (debug_mark+2),a  
50db 18 03			jr .pastdmark  
50dd ..			.dmark: db "UEX"  
50e0 f1			.pastdmark: pop af  
50e1			endm  
# End of macro DMARK
50e1				CALLMONITOR 
50e1 cd 2d 17			call break_point_state  
50e4				endm  
# End of macro CALLMONITOR
50e4			endif 
50e4			 
50e4			 
50e4			 
50e4 eb				ex de, hl 
50e5 22 a4 f2			ld (os_tok_ptr), hl 
50e8				 
50e8				; Don't use next - Skips the first word in uword. 
50e8			 
50e8 c3 b7 20			jp exec1 
50eb			;	NEXT 
50eb			 
50eb			 
50eb			; eof 
# End of file forth_wordsv4.asm
50eb			endif 
50eb			;;;;;;;;;;;;;; Debug code 
50eb			 
50eb			 
50eb			;if DEBUG_FORTH_PARSE 
50eb .. 00		.nowordfound: db "No match",0 
50f4 .. 00		.compword:	db "Comparing word ",0 
5104 .. 00		.nextwordat:	db "Next word at",0 
5111 .. 00		.charmatch:	db "Char match",0 
511c			;endif 
511c			if DEBUG_FORTH_JP 
511c			.foundword:	db "Word match. Exec..",0 
511c			endif 
511c			;if DEBUG_FORTH_PUSH 
511c .. 00		.enddict:	db "Dict end. Push.",0 
512c .. 00		.push_str:	db "Pushing string",0 
513b .. 00		.push_num:	db "Pushing number",0 
514a .. 00		.data_sp:	db "SP:",0 
514e .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5160 .. 00		.wordinde:	db "Word in DE (3/0):",0 
5172 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5184			;endif 
5184			;if DEBUG_FORTH_MALLOC 
5184 .. 00		.push_malloc:	db "Malloc address",0 
5193			;endif 
5193			 
5193			 
5193			 
5193			; display malloc address and current data stack pointer  
5193			 
5193			malloc_error: 
5193 d5				push de 
5194 f5				push af 
5195 e5				push hl 
5196 cd e6 0a			call clear_display 
5199 11 bb 51			ld de, .mallocerr 
519c 3e 00			ld a,0 
519e			;	ld de,os_word_scratch 
519e cd f9 0a			call str_at_display 
51a1 3e 11			ld a, display_row_1+17 
51a3 11 bd fb			ld de, debug_mark 
51a6 cd f9 0a			call str_at_display 
51a9 cd 09 0b			call update_display 
51ac				;call break_point_state 
51ac cd 12 67			call cin_wait 
51af			 
51af 3e 20			ld a, ' ' 
51b1 32 94 ef			ld (os_view_disable), a 
51b4 e1				pop hl 
51b5 f1				pop af 
51b6 d1				pop de	 
51b7				CALLMONITOR 
51b7 cd 2d 17			call break_point_state  
51ba				endm  
# End of macro CALLMONITOR
51ba c9				ret 
51bb			 
51bb .. 00		.mallocerr: 	db "Malloc Error",0 
51c8			;if DEBUG_FORTH_PUSH 
51c8			display_data_sp: 
51c8 f5				push af 
51c9			 
51c9				; see if disabled 
51c9			 
51c9 3a 94 ef			ld a, (os_view_disable) 
51cc fe 2a			cp '*' 
51ce 28 67			jr z, .skipdsp 
51d0			 
51d0 e5				push hl 
51d1 e5				push hl 
51d2 e5			push hl 
51d3 cd e6 0a			call clear_display 
51d6 e1			pop hl 
51d7 7c				ld a,h 
51d8 21 a8 f2			ld hl, os_word_scratch 
51db cd 1b 10			call hexout 
51de e1				pop hl 
51df 7d				ld a,l 
51e0 21 aa f2			ld hl, os_word_scratch+2 
51e3 cd 1b 10			call hexout 
51e6 21 ac f2			ld hl, os_word_scratch+4 
51e9 3e 00			ld a,0 
51eb 77				ld (hl),a 
51ec 11 a8 f2			ld de,os_word_scratch 
51ef 3e 14				ld a, display_row_2 
51f1 cd f9 0a				call str_at_display 
51f4 11 4e 51			ld de, .wordinhl 
51f7 3e 00			ld a, display_row_1 
51f9			 
51f9 cd f9 0a				call str_at_display 
51fc 11 bd fb			ld de, debug_mark 
51ff 3e 11			ld a, display_row_1+17 
5201			 
5201 cd f9 0a				call str_at_display 
5204			 
5204				; display current data stack pointer 
5204 11 4a 51			ld de,.data_sp 
5207 3e 1c				ld a, display_row_2 + 8 
5209 cd f9 0a				call str_at_display 
520c			 
520c 2a 90 f9			ld hl,(cli_data_sp) 
520f e5				push hl 
5210 7c				ld a,h 
5211 21 a8 f2			ld hl, os_word_scratch 
5214 cd 1b 10			call hexout 
5217 e1				pop hl 
5218 7d				ld a,l 
5219 21 aa f2			ld hl, os_word_scratch+2 
521c cd 1b 10			call hexout 
521f 21 ac f2			ld hl, os_word_scratch+4 
5222 3e 00			ld a,0 
5224 77				ld (hl),a 
5225 11 a8 f2			ld de,os_word_scratch 
5228 3e 1f				ld a, display_row_2 + 11 
522a cd f9 0a				call str_at_display 
522d			 
522d			 
522d cd 09 0b			call update_display 
5230 cd 66 0a			call delay1s 
5233 cd 66 0a			call delay1s 
5236 e1				pop hl 
5237			.skipdsp: 
5237 f1				pop af 
5238 c9				ret 
5239			 
5239			display_data_malloc: 
5239			 
5239 f5				push af 
523a e5				push hl 
523b e5				push hl 
523c e5			push hl 
523d cd e6 0a			call clear_display 
5240 e1			pop hl 
5241 7c				ld a,h 
5242 21 a8 f2			ld hl, os_word_scratch 
5245 cd 1b 10			call hexout 
5248 e1				pop hl 
5249 7d				ld a,l 
524a 21 aa f2			ld hl, os_word_scratch+2 
524d cd 1b 10			call hexout 
5250 21 ac f2			ld hl, os_word_scratch+4 
5253 3e 00			ld a,0 
5255 77				ld (hl),a 
5256 11 a8 f2			ld de,os_word_scratch 
5259 3e 14				ld a, display_row_2 
525b cd f9 0a				call str_at_display 
525e 11 84 51			ld de, .push_malloc 
5261 3e 00			ld a, display_row_1 
5263			 
5263 cd f9 0a				call str_at_display 
5266			 
5266				; display current data stack pointer 
5266 11 4a 51			ld de,.data_sp 
5269 3e 1c				ld a, display_row_2 + 8 
526b cd f9 0a				call str_at_display 
526e			 
526e 2a 90 f9			ld hl,(cli_data_sp) 
5271 e5				push hl 
5272 7c				ld a,h 
5273 21 a8 f2			ld hl, os_word_scratch 
5276 cd 1b 10			call hexout 
5279 e1				pop hl 
527a 7d				ld a,l 
527b 21 aa f2			ld hl, os_word_scratch+2 
527e cd 1b 10			call hexout 
5281 21 ac f2			ld hl, os_word_scratch+4 
5284 3e 00			ld a,0 
5286 77				ld (hl),a 
5287 11 a8 f2			ld de,os_word_scratch 
528a 3e 1f				ld a, display_row_2 + 11 
528c cd f9 0a				call str_at_display 
528f			 
528f cd 09 0b			call update_display 
5292 cd 66 0a			call delay1s 
5295 cd 66 0a			call delay1s 
5298 e1				pop hl 
5299 f1				pop af 
529a c9				ret 
529b			;endif 
529b			 
529b			include "forth_autostart.asm" 
529b			; list of commands to perform at system start up 
529b			 
529b			startcmds: 
529b			;	dw test11 
529b			;	dw test12 
529b			;	dw test13 
529b			;	dw test14 
529b			;	dw test15 
529b			;	dw test16 
529b			;	dw test17 
529b			;	dw ifthtest1 
529b			;	dw ifthtest2 
529b			;	dw ifthtest3 
529b			;	dw mmtest1 
529b			;	dw mmtest2 
529b			;	dw mmtest3 
529b			;	dw mmtest4 
529b			;	dw mmtest5 
529b			;	dw mmtest6 
529b			;	dw iftest1 
529b			;	dw iftest2 
529b			;	dw iftest3 
529b			;	dw looptest1 
529b			;	dw looptest2 
529b			;	dw test1 
529b			;	dw test2 
529b			;	dw test3 
529b			;	dw test4 
529b			;	dw game2r 
529b			;	dw game2b1 
529b			;	dw game2b2 
529b			 
529b				; start up words that are actually useful 
529b			 
529b f9 52			dw clrstack 
529d 2c 53			dw type 
529f ed 54			dw stest 
52a1 50 53			dw strncpy 
52a3 8e 54			dw list 
52a5 b1 53			dw start1 
52a7 c3 53			dw start2 
52a9			;	dw start3 
52a9 d6 53			dw start3b 
52ab 2e 54			dw start3c 
52ad			 
52ad				; (unit) testing words 
52ad			 
52ad 64 55			dw mtesta 
52af 19 56			dw mtestb 
52b1 bc 56			dw mtestc 
52b3 71 57			dw mtestd 
52b5 15 58			dw mteste 
52b7			 
52b7				; demo/game words 
52b7			 
52b7 21 5f		        dw game3w 
52b9 4f 5f		        dw game3p 
52bb 6d 5f		        dw game3sc 
52bd 9e 5f		        dw game3vsi 
52bf ca 5f		        dw game3vs 
52c1				 
52c1 14 5d			dw game2b 
52c3 82 5d			dw game2bf 
52c5 cc 5d			dw game2mba 
52c7 62 5e			dw game2mbas 
52c9 a4 5e			dw game2mb 
52cb			 
52cb d5 59			dw game1 
52cd e6 59			dw game1a 
52cf 48 5a			dw game1b 
52d1 7d 5a			dw game1c 
52d3 b3 5a			dw game1d 
52d5 e4 5a			dw game1s 
52d7 f8 5a			dw game1t 
52d9 0d 5b			dw game1f 
52db 41 5b			dw game1z 
52dd 85 5b			dw game1zz 
52df			 
52df cb 58			dw test5 
52e1 03 59			dw test6 
52e3 3b 59			dw test7 
52e5 4f 59			dw test8 
52e7 7b 59			dw test9 
52e9 91 59			dw test10 
52eb				 
52eb 5c 5c		        dw ssv5 
52ed 40 5c		        dw ssv4 
52ef 24 5c		        dw ssv3 
52f1 ee 5b		        dw ssv2 
52f3 75 5c		        dw ssv1 
52f5 bd 5c		        dw ssv1cpm 
52f7			;	dw keyup 
52f7			;	dw keydown 
52f7			;	dw keyleft 
52f7			;	dw keyright 
52f7			;	dw 	keyf1 
52f7			;	dw keyf2 
52f7			;	dw keyf3 
52f7			;	dw keyf4 
52f7			;	dw keyf5 
52f7			;	dw keyf6 
52f7			;	dw keyf7 
52f7			;	dw keyf8 
52f7			;	dw keyf9 
52f7			;	dw keyf10 
52f7			;	dw keyf11 
52f7			;	dw keyf12 
52f7			;	dw keytab 
52f7			;	dw keycr 
52f7			;	dw keyhome 
52f7			;	dw keyend 
52f7			;	dw keybs 
52f7 00 00			db 0, 0	 
52f9			 
52f9			 
52f9			; clear stack  
52f9			 
52f9 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ;", 0 
532c			 
532c			; type ( addr count - ) 
532c .. 00		type:     db ": type $00 do dup i + @ emit loop ;", 0 
5350			 
5350			; some direct memory words 
5350			; strncpy ( len t f -- t ) 
5350			 
5350 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
53b1			 
53b1 .. 00		start1:     	db ": bpon $0000 bp ;",0 
53c3 .. 00		start2:     	db ": bpoff $0001 bp ;",0 
53d6			;start3:         db ": dirlist ir cls drop dup $00 > if $01 do .> BL .> .> BL .> .> BL .> loop then nop ;",0 
53d6 .. 00		start3b:         db ": dla dir cls drop dup $00 > if $01 do $08 i at . $01 i at . $04 i at . loop then nop ;",0 
542e .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
548e			 
548e			 
548e			; a handy word to list items on the stack 
548e			 
548e .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> accept drop depth 0= not until nop ;",0 
54ed			 
54ed			 
54ed			; test stack  
54ed			; rnd8 stest 
54ed			 
54ed .. 00		stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
5564			 
5564			; random malloc and free cycles 
5564			 
5564 .. 00		mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5619			 
5619			; fixed malloc and free cycles 
5619			 
5619 .. 00		mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
56bc			 
56bc			; fixed double string push and drop cycle  
56bc			 
56bc .. 00		mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
5771			 
5771			; consistent fixed string push and drop cycle  
5771			 
5771 .. 00		mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5815			 
5815 .. 00		mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
58cb			 
58cb			;test1:		db ": aa 1 2 3 ;", 0 
58cb			;test2:     	db "111 aa 888 999",0 
58cb			;test3:     	db ": bb 77 ;",0 
58cb			;test4:     	db "$02 $01 do i . loop bb",0 
58cb			 
58cb .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
5903 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
593b .. 00		test7:     	db ": box hline vline ;",0 
594f .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
597b .. 00		test9:     	db ": sw $01 adsp world ;",0 
5991 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
59b6 .. 00		test11:     	db "hello create .",0 
59c5 .. 00		test12:     	db "hello2 create .",0 
59d5			 
59d5			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
59d5			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
59d5			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
59d5			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
59d5			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
59d5			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
59d5			 
59d5			;iftest1:     	db "$0001 IF cls .",0 
59d5			;iftest2:     	db "$0000 IF cls .",0 
59d5			;iftest3:     	db "$0002 $0003 - IF cls .",0 
59d5			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
59d5			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
59d5			 
59d5			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
59d5			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
59d5			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
59d5			 
59d5			 
59d5			 
59d5			; a small guess the number game 
59d5			 
59d5 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
59e6 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
5a48			 
5a48 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
5a7d .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5ab3 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5ae4 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
5af8 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5b0d .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
5b41 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5b85			 
5b85			; Using 'ga' save a high score across multiple runs using external storage 
5b85			 
5b85 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5bee			 
5bee			 
5bee			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5bee			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5bee			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5bee			 
5bee			; simple screen saver to test code memory reuse to destruction 
5bee			 
5bee .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5c24 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5c40 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5c5c .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5c75 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5cbd .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5d14			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5d14			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5d14			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5d14			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5d14			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5d14			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5d14			 
5d14			 
5d14			 
5d14			; minesweeper/battleship finding game 
5d14			; draws a game board of random ship/mine positions 
5d14			; user enters coords to see if it hits on 
5d14			; game ends when all are hit 
5d14			; when hit or miss says how many may be in the area 
5d14			 
5d14			; setup the game board and then hide it 
5d14 .. 00		game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5d82 .. 00		game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5dcc			; prompt for where to target 
5dcc .. 00		game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5e62 .. 00		game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5e87			; TODO see if the entered coords hits or misses pushes char hit of miss 
5e87 .. 00		game2mbht:      db ": mbckht nop ;",0 
5e96 .. 00		game2mbms:      db ": mbcms nop ;",0 
5ea4			; TODO how many might be near by 
5ea4 .. 00		game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5f21			 
5f21			; Game 3 
5f21			 
5f21			; Vert scroller ski game - avoid the trees! 
5f21			 
5f21			; v0 score (ie turns) 
5f21			; v1 player pos 
5f21			; v2 left wall 
5f21			; v3 right wall 
5f21			 
5f21			; Draw side walls randomly 
5f21			 
5f21 .. 00		game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5f4f			 
5f4f			; Draw player 
5f4f .. 00		game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5f6d			 
5f6d			; TODO Get Key 
5f6d			 
5f6d			; TODO Move left right 
5f6d			 
5f6d			; scroll and move walls a bit 
5f6d			 
5f6d .. 00		game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5f9e			 
5f9e			; main game loop 
5f9e			 
5f9e .. 00		game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5fca .. 00		game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
6009			 
6009			; key board defs 
6009			 
6009 .. 00		keyup:       db ": keyup $05 ;",0 
6017 .. 00		keydown:       db ": keydown $0a ;",0 
6027 .. 00		keyleft:       db ": keyleft $0b ;",0 
6037 .. 00		keyright:       db ": keyright $0c ;",0 
6048 .. 00		keyf1:       db ": keyf1 $10 ;",0 
6056 .. 00		keyf2:       db ": keyf2 $11 ;",0 
6064 .. 00		keyf3:       db ": keyf3 $12 ;",0 
6072 .. 00		keyf4:       db ": keyf4 $13 ;",0 
6080 .. 00		keyf5:       db ": keyf5 $14 ;",0 
608e .. 00		keyf6:       db ": keyf6 $15 ;",0 
609c .. 00		keyf7:       db ": keyf7 $16 ;",0 
60aa .. 00		keyf8:       db ": keyf8 $17 ;",0 
60b8 .. 00		keyf9:       db ": keyf9 $18 ;",0 
60c6 .. 00		keyf10:       db ": keyf10 $19 ;",0 
60d5 .. 00		keyf11:       db ": keyf11 $1a ;",0 
60e4 .. 00		keyf12:       db ": keyf12 $1b ;",0 
60f3			 
60f3 .. 00		keytab:       db ": keytab $09 ;",0 
6102 .. 00		keycr:       db ": keycr $0d ;",0 
6110 .. 00		keyhome:       db ": keyhome $0e ;",0 
6120 .. 00		keyend:       db ": keyend $0f ;",0 
612f .. 00		keybs:       db ": keybs $08 ;",0 
613d			 
613d			   
613d			 
613d			 
613d			 
613d			; eof 
# End of file forth_autostart.asm
613d			 
613d .. 00		sprompt1: db "Startup load...",0 
614d .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
6163			 
6163			 
6163			 
6163			 
6163			forth_startup: 
6163 21 9b 52			ld hl, startcmds 
6166 3e 00			ld a, 0 
6168 32 c9 f3			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
616b			 
616b e5			.start1:	push hl 
616c cd e6 0a			call clear_display 
616f 11 3d 61			ld de, sprompt1 
6172 3e 00		        ld a, display_row_1 
6174 cd f9 0a			call str_at_display 
6177 11 4d 61			ld de, sprompt2 
617a 3e 14		        ld a, display_row_2 
617c cd f9 0a			call str_at_display 
617f e1				pop hl 
6180 e5				push hl 
6181 5e				ld e,(hl) 
6182 23				inc hl 
6183 56				ld d,(hl) 
6184 3e 28		        ld a, display_row_3 
6186 cd f9 0a			call str_at_display 
6189 cd 09 0b			call update_display 
618c			 
618c			 
618c 3a c9 f3			ld a, (os_last_cmd) 
618f fe 00			cp 0 
6191 28 05			jr z, .startprompt 
6193 cd 5a 0a			call delay250ms 
6196 18 24			jr .startdo 
6198				 
6198				 
6198			 
6198			.startprompt: 
6198			 
6198 3e 4f			ld a,display_row_4 + display_cols - 1 
619a 11 33 1c		        ld de, endprg 
619d cd f9 0a			call str_at_display 
61a0 cd 09 0b			call update_display 
61a3 cd 66 0a			call delay1s 
61a6 cd 12 67			call cin_wait 
61a9						 
61a9 fe 2a			cp '*' 
61ab 28 5e			jr z, .startupend1 
61ad fe 23			cp '#' 
61af 20 07			jr nz, .startno 
61b1 3e 01			ld a, 1 
61b3 32 c9 f3			ld (os_last_cmd),a 
61b6 18 04			jr .startdo 
61b8 fe 31		.startno:	cp '1' 
61ba 28 3a			jr z,.startnxt  
61bc			 
61bc				; exec startup line 
61bc			.startdo:	 
61bc e1				pop hl 
61bd e5				push hl 
61be				 
61be 5e				ld e,(hl) 
61bf 23				inc hl 
61c0 56				ld d,(hl) 
61c1 eb				ex de,hl 
61c2			 
61c2 e5				push hl 
61c3			 
61c3 3e 00			ld a, 0 
61c5				;ld a, FORTH_END_BUFFER 
61c5 cd 83 11			call strlent 
61c8 23				inc hl   ; include zero term to copy 
61c9 06 00			ld b,0 
61cb 4d				ld c,l 
61cc e1				pop hl 
61cd 11 a3 ef			ld de, scratch 
61d0 ed b0			ldir 
61d2			 
61d2			 
61d2 21 a3 ef			ld hl, scratch 
61d5 cd 74 20			call forthparse 
61d8 cd b4 20			call forthexec 
61db cd cb 1f			call forthexec_cleanup 
61de			 
61de 3e 3c			ld a, display_row_4 
61e0 11 d7 19			ld de, endprog 
61e3			 
61e3 cd 09 0b			call update_display		 
61e6			 
61e6 3a c9 f3			ld a, (os_last_cmd) 
61e9 fe 00			cp 0 
61eb 20 09			jr nz, .startnxt 
61ed cd 35 1c			call next_page_prompt 
61f0 cd e6 0a		        call clear_display 
61f3 cd 09 0b			call update_display		 
61f6			 
61f6				; move onto next startup line? 
61f6			.startnxt: 
61f6			 
61f6 cd 5a 0a			call delay250ms 
61f9 e1				pop hl 
61fa			 
61fa 23				inc hl 
61fb 23				inc hl 
61fc			 
61fc e5				push hl 
61fd 5e				ld e, (hl) 
61fe 23				inc hl 
61ff 56				ld d, (hl) 
6200 e1				pop hl 
6201				; TODO replace 0 test 
6201			 
6201 eb				ex de, hl 
6202 cd 43 0d			call ishlzero 
6205			;	ld a,e 
6205			;	add d 
6205			;	cp 0    ; any left to do? 
6205 eb				ex de, hl 
6206 c2 6b 61			jp nz, .start1 
6209 18 01			jr .startupend 
620b			 
620b e1			.startupend1: pop hl 
620c			.startupend: 
620c			 
620c cd e6 0a			call clear_display 
620f cd 09 0b			call update_display 
6212 c9				ret 
6213			 
6213			 
6213			; stack over and underflow checks 
6213			 
6213			; init the words to detect the under/overflow 
6213			 
6213			chk_stk_init: 
6213				; a vague random number to check so we dont get any "lucky" hits 
6213 3e 2d			ld a, 45 
6215 6f				ld l, a 
6216 00				nop 
6217 3e 17			ld a, 23 
6219 67				ld h, a 
621a			 
621a 22 8a ef			ld (chk_word), hl     ; the word we need to check against 
621d			 
621d			;	ld (chk_stund), hl	; stack points.... 
621d 22 fd fb			ld (chk_stovr), hl 
6220 22 8e f9			ld (chk_ret_und), hl 
6223 22 0c f9			ld (chk_ret_ovr), hl 
6226 22 0a f7			ld (chk_loop_ovr), hl 
6229 22 08 f5			ld (chk_data_ovr), hl 
622c c9				ret 
622d				 
622d			check_stacks: 
622d				; check all stack words 
622d			 
622d e5				push hl 
622e d5				push de 
622f			 
622f			;	ld de,(chk_word) 
622f			;	ld hl, (chk_stund)	; stack points.... 
622f			;	if DEBUG_STK_FAULT 
622f			;		DMARK "FAa" 
622f			;		CALLMONITOR 
622f			;	endif 
622f			;	call cmp16 
622f			;	jp z, .chk_faulta 
622f			; 
622f			;	ld de, sfaultsu 
622f			;	jp .chk_fault 
622f			 
622f 2a fd fb		.chk_faulta: ld hl, (chk_stovr) 
6232 ed 5b 8a ef		ld de,(chk_word) 
6236				if DEBUG_STK_FAULT 
6236					DMARK "FAb" 
6236					CALLMONITOR 
6236				endif 
6236 cd 38 0d			call cmp16 
6239 28 06			jr z, .chk_fault1 
623b 11 dc 62			ld de, sfaultso 
623e c3 90 62			jp .chk_fault 
6241			.chk_fault1:  
6241 2a 8e f9			ld hl, (chk_ret_und) 
6244 ed 5b 8a ef		ld de,(chk_word) 
6248				if DEBUG_STK_FAULT 
6248					DMARK "FAU" 
6248					CALLMONITOR 
6248				endif 
6248 cd 38 0d			call cmp16 
624b ca 54 62			jp z, .chk_fault2 
624e 11 ec 62			ld de, sfaultru 
6251 c3 90 62			jp .chk_fault 
6254			.chk_fault2:  
6254 2a 0c f9			ld hl, (chk_ret_ovr) 
6257 ed 5b 8a ef		ld de,(chk_word) 
625b				if DEBUG_STK_FAULT 
625b					DMARK "FA1" 
625b					CALLMONITOR 
625b				endif 
625b cd 38 0d			call cmp16 
625e ca 67 62			jp z, .chk_fault3 
6261 11 fa 62			ld de, sfaultro 
6264 c3 90 62			jp .chk_fault 
6267			.chk_fault3:  
6267 2a 0a f7			ld hl, (chk_loop_ovr) 
626a ed 5b 8a ef		ld de,(chk_word) 
626e				if DEBUG_STK_FAULT 
626e					DMARK "FA2" 
626e					CALLMONITOR 
626e				endif 
626e cd 38 0d			call cmp16 
6271 ca 7a 62			jp z, .chk_fault4 
6274 11 14 63			ld de, sfaultlo 
6277 c3 90 62			jp .chk_fault 
627a			.chk_fault4:  
627a 2a 08 f5			ld hl, (chk_data_ovr) 
627d ed 5b 8a ef		ld de,(chk_word) 
6281				if DEBUG_STK_FAULT 
6281					DMARK "FA3" 
6281					CALLMONITOR 
6281				endif 
6281 cd 38 0d			call cmp16 
6284 ca 8d 62			jp z, .chk_fault5 
6287 11 2e 63			ld de, sfaultdo 
628a c3 90 62			jp .chk_fault 
628d			 
628d			 
628d			.chk_fault5:  
628d d1				pop de 
628e e1				pop hl 
628f			 
628f c9				ret 
6290			 
6290 cd e6 0a		.chk_fault: 	call clear_display 
6293 3e 14				ld a, display_row_2 
6295 cd f9 0a				call str_at_display 
6298 11 be 62				   ld de, .stackfault 
629b 3e 00				ld a, display_row_1 
629d cd f9 0a				call str_at_display 
62a0 11 bd fb				    ld de, debug_mark 
62a3 3e 11				ld a, display_row_1+17 
62a5 cd f9 0a				call str_at_display 
62a8 cd 09 0b				call update_display 
62ab			 
62ab				; prompt before entering montior for investigating issue 
62ab			 
62ab 3e 3c			ld a, display_row_4 
62ad 11 d7 19			ld de, endprog 
62b0			 
62b0 cd 09 0b			call update_display		 
62b3			 
62b3 cd 35 1c			call next_page_prompt 
62b6			 
62b6 d1				pop de 
62b7 e1				pop hl 
62b8 cd 2b 1a				call monitor 
62bb c3 22 19				jp warmstart 
62be					;jp 0 
62be					;halt 
62be			 
62be			 
62be			 
62be .. 00		.stackfault: 	db "Stack fault:",0 
62cb			 
62cb .. 00		sfaultsu: 	db	"Stack under flow",0 
62dc .. 00		sfaultso: 	db	"Stack over flow",0 
62ec .. 00		sfaultru:	db "RTS underflow",0 
62fa .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
6314 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
632e .. 00		sfaultdo:	db "DTS overflow", 0 
633b			 
633b			 
633b			fault_dsp_under: 
633b 11 4d 63			ld de, .dsp_under 
633e c3 fd 63			jp .show_fault 
6341			 
6341			fault_rsp_under: 
6341 11 5b 63			ld de, .rsp_under 
6344 c3 fd 63			jp .show_fault 
6347			fault_loop_under: 
6347 11 69 63			ld de, .loop_under 
634a c3 fd 63			jp .show_fault 
634d			 
634d .. 00		.dsp_under: db "DSP Underflow",0 
635b .. 00		.rsp_under: db "RSP Underflow",0 
6369 .. 00		.loop_under: db "LOOP Underflow",0 
6378			 
6378			 
6378 d5			type_faultn: 	push de 
6379 e5					push hl 
637a cd e6 0a				call clear_display 
637d 11 a4 63				   ld de, .typefaultn 
6380 3e 00				ld a, display_row_1 
6382 cd f9 0a				call str_at_display 
6385 11 bd fb				    ld de, debug_mark 
6388 3e 11				ld a, display_row_1+17 
638a cd f9 0a				call str_at_display 
638d cd 09 0b				call update_display 
6390			 
6390				; prompt before entering montior for investigating issue 
6390			 
6390 3e 3c			ld a, display_row_4 
6392 11 d7 19			ld de, endprog 
6395			 
6395 cd 09 0b			call update_display		 
6398			 
6398 cd 35 1c			call next_page_prompt 
639b			 
639b e5					push hl 
639c d5					push de 
639d cd 2b 1a				call monitor 
63a0 c3 22 19				jp warmstart 
63a3 76					halt 
63a4			 
63a4			 
63a4 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
63bb			 
63bb d5			type_faults: 	push de 
63bc e5					push hl 
63bd cd e6 0a				call clear_display 
63c0 11 e6 63				   ld de, .typefaults 
63c3 3e 00				ld a, display_row_1 
63c5 cd f9 0a				call str_at_display 
63c8 11 bd fb				    ld de, debug_mark 
63cb 3e 11				ld a, display_row_1+17 
63cd cd f9 0a				call str_at_display 
63d0 cd 09 0b				call update_display 
63d3			 
63d3				; prompt before entering montior for investigating issue 
63d3			 
63d3 3e 3c			ld a, display_row_4 
63d5 11 d7 19			ld de, endprog 
63d8			 
63d8 cd 09 0b			call update_display		 
63db			 
63db cd 35 1c			call next_page_prompt 
63de			 
63de e1					pop hl 
63df d1					pop de 
63e0 cd 2b 1a				call monitor 
63e3 c3 22 19				jp warmstart 
63e6			 
63e6			 
63e6 .. 00		.typefaults: db "STR Type Expected TOS!",0 
63fd			 
63fd			.show_fault: 	 
63fd d5					push de 
63fe cd e6 0a				call clear_display 
6401 d1					pop de 
6402 3e 00				ld a, display_row_1 
6404 cd f9 0a				call str_at_display 
6407 11 bd fb				    ld de, debug_mark 
640a 3e 11				ld a, display_row_1+17 
640c cd f9 0a				call str_at_display 
640f cd 09 0b				call update_display 
6412			 
6412				; prompt before entering montior for investigating issue 
6412			 
6412 3e 3c			ld a, display_row_4 
6414 11 d7 19			ld de, endprog 
6417			 
6417 cd 09 0b			call update_display		 
641a			 
641a cd 35 1c			call next_page_prompt 
641d			 
641d e1					pop hl 
641e d1					pop de 
641f cd 2b 1a				call monitor 
6422			; do a dump to cli and not warmstart so we preserve all of the uwords.  
6422			; TODO Make optional fault restart to cli or warm boot? 
6422					;jp warmstart 
6422 c3 7d 19				jp cli 
6425 76					halt 
6426			 
6426			; handle the auto run of code from files in storage 
6426			 
6426			 
6426			if STORAGE_SE 
6426			 
6426 .. 00		sprompt3: db "Loading from start-up file?:",0 
6443 .. 00		sprompt4: db "(Y=Any key/N=No)",0 
6454			 
6454			 
6454			forth_autoload: 
6454			 
6454				; load block 0 of store 1 
6454				 
6454 3e fe			ld a, $fe      ; bit 0 clear 
6456 32 ce f9			ld (spi_device), a 
6459			 
6459 cd ba 03			call storage_get_block_0 
645c			 
645c 3a 09 fa			ld a, (store_page+STORE_0_AUTOFILE) 
645f			 
645f fe 00			cp 0 
6461 c8				ret z     ; auto start not enabled 
6462			 
6462 cd e6 0a			call clear_display 
6465			 
6465				; set bank 
6465			 
6465 3a 0b fa				ld a, (store_page+STORE_0_BANKRUN) 
6468 32 ce f9				ld (spi_device), a 
646b			 
646b				; get file id to load from and get the file name to display 
646b			 
646b 3a 0c fa				ld a, (store_page+STORE_0_FILERUN) 
646e			 
646e 2e 00				ld l, 0 
6470 67					ld h, a 
6471 11 e8 f9				ld de, store_page 
6474			 
6474					if DEBUG_FORTH_WORDS 
6474						DMARK "ASp" 
6474 f5				push af  
6475 3a 89 64			ld a, (.dmark)  
6478 32 bd fb			ld (debug_mark),a  
647b 3a 8a 64			ld a, (.dmark+1)  
647e 32 be fb			ld (debug_mark+1),a  
6481 3a 8b 64			ld a, (.dmark+2)  
6484 32 bf fb			ld (debug_mark+2),a  
6487 18 03			jr .pastdmark  
6489 ..			.dmark: db "ASp"  
648c f1			.pastdmark: pop af  
648d			endm  
# End of macro DMARK
648d						CALLMONITOR 
648d cd 2d 17			call break_point_state  
6490				endm  
# End of macro CALLMONITOR
6490					endif 
6490 cd 54 08				call storage_read 
6493			 
6493					if DEBUG_FORTH_WORDS 
6493						DMARK "ASr" 
6493 f5				push af  
6494 3a a8 64			ld a, (.dmark)  
6497 32 bd fb			ld (debug_mark),a  
649a 3a a9 64			ld a, (.dmark+1)  
649d 32 be fb			ld (debug_mark+1),a  
64a0 3a aa 64			ld a, (.dmark+2)  
64a3 32 bf fb			ld (debug_mark+2),a  
64a6 18 03			jr .pastdmark  
64a8 ..			.dmark: db "ASr"  
64ab f1			.pastdmark: pop af  
64ac			endm  
# End of macro DMARK
64ac						CALLMONITOR 
64ac cd 2d 17			call break_point_state  
64af				endm  
# End of macro CALLMONITOR
64af					endif 
64af			 
64af cd 43 0d				call ishlzero 
64b2 c8					ret z             ; file not found 
64b3			 
64b3 3e 1e				ld a, display_row_2 + 10 
64b5 11 eb f9				ld de, store_page+3 
64b8 cd f9 0a				call str_at_display 
64bb				 
64bb			; 
64bb			 
64bb 3e 05			ld a, display_row_1+5 
64bd 11 26 64			ld de, sprompt3 
64c0 cd f9 0a			call str_at_display 
64c3 3e 37			ld a, display_row_3+15 
64c5 11 43 64			ld de, sprompt4 
64c8 cd f9 0a			call str_at_display 
64cb			 
64cb cd 09 0b			call update_display 
64ce			 
64ce cd 12 67			call cin_wait 
64d1 fe 6e			cp 'n' 
64d3 c8				ret z 
64d4 fe 4e			cp 'N' 
64d6 c8				ret z 
64d7			 
64d7 cd 66 0a			call delay1s 
64da			 
64da 3a ea f9			ld a, (store_page+2) 
64dd 32 de f9			ld (store_openmaxext), a    ; save count of ext 
64e0 3e 01			ld a, 1  
64e2 32 df f9			ld (store_openext), a    ; save count of ext 
64e5			 
64e5			.autof:  
64e5 6f				ld l , a 
64e6				 
64e6 3a e8 f9			ld a, (store_page) 
64e9 67				ld h, a	 
64ea 11 e8 f9			ld de, store_page 
64ed					if DEBUG_FORTH_WORDS 
64ed						DMARK "ASl" 
64ed f5				push af  
64ee 3a 02 65			ld a, (.dmark)  
64f1 32 bd fb			ld (debug_mark),a  
64f4 3a 03 65			ld a, (.dmark+1)  
64f7 32 be fb			ld (debug_mark+1),a  
64fa 3a 04 65			ld a, (.dmark+2)  
64fd 32 bf fb			ld (debug_mark+2),a  
6500 18 03			jr .pastdmark  
6502 ..			.dmark: db "ASl"  
6505 f1			.pastdmark: pop af  
6506			endm  
# End of macro DMARK
6506						CALLMONITOR 
6506 cd 2d 17			call break_point_state  
6509				endm  
# End of macro CALLMONITOR
6509					endif 
6509 cd 54 08				call storage_read 
650c cd 43 0d			call ishlzero 
650f c8				ret z 
6510			;	jr z, .autoend 
6510			 
6510					if DEBUG_FORTH_WORDS 
6510						DMARK "ASc" 
6510 f5				push af  
6511 3a 25 65			ld a, (.dmark)  
6514 32 bd fb			ld (debug_mark),a  
6517 3a 26 65			ld a, (.dmark+1)  
651a 32 be fb			ld (debug_mark+1),a  
651d 3a 27 65			ld a, (.dmark+2)  
6520 32 bf fb			ld (debug_mark+2),a  
6523 18 03			jr .pastdmark  
6525 ..			.dmark: db "ASc"  
6528 f1			.pastdmark: pop af  
6529			endm  
# End of macro DMARK
6529						CALLMONITOR 
6529 cd 2d 17			call break_point_state  
652c				endm  
# End of macro CALLMONITOR
652c					endif 
652c 11 ea f9			ld de, store_page+2 
652f 3e 3c			ld a, display_row_4 
6531 cd f9 0a			call str_at_display 
6534			 
6534 cd 09 0b			call update_display 
6537 cd 5a 0a			call delay250ms 
653a			 
653a			 
653a			 
653a 21 ea f9			ld hl, store_page+2 
653d cd 74 20			call forthparse 
6540 cd b4 20			call forthexec 
6543 cd cb 1f			call forthexec_cleanup 
6546			 
6546				 
6546 3a df f9			ld a, (store_openext) 
6549 3c				inc a 
654a 32 df f9			ld (store_openext), a    ; save count of ext 
654d			 
654d 18 96			jr .autof 
654f			;.autofdone: 
654f			; 
654f			;		if DEBUG_FORTH_WORDS 
654f			;			DMARK "ASx" 
654f			;			CALLMONITOR 
654f			;		endif 
654f			;;	call clear_display 
654f			;	ret 
654f			 
654f			 
654f			 
654f			endif 
654f			 
654f			 
654f			; eof 
# End of file forth_kernel.asm
654f			;include "nascombasic.asm" 
654f			 
654f			 
654f			; find out where the code ends if loaded into RAM (for SC114) 
654f			;endofcode:  
654f			;	nop 
654f			 
654f			 
654f			; eof 
654f			 
# End of file main.asm
654f			include "firmware_lcd_4x20.asm" 
654f			; **********************************************************************  
654f			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
654f			; **********************************************************************  
654f			;  
654f			; **  Written as a Small Computer Monitor App  
654f			; **  www.scc.me.uk  
654f			;  
654f			; History  
654f			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
654f			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
654f			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
654f			;  
654f			; **********************************************************************  
654f			;  
654f			; This program is an example of one of the methods of interfacing an   
654f			; alphanumeric LCD module.   
654f			;  
654f			; In this example the display is connected to either a Z80 PIO or a   
654f			; simple 8-bit output port.   
654f			;  
654f			; This interfacing method uses 4-bit data mode and uses time delays  
654f			; rather than polling the display's ready status. As a result the   
654f			; interface only requires 6 simple output lines:  
654f			;   Output bit 0 = not used  
654f			;   Output bit 1 = not used  
654f			;   Output bit 2 = RS         High = data, Low = instruction  
654f			;   Output bit 3 = E          Active high  
654f			;   Output bit 4 = DB4  
654f			;   Output bit 5 = DB5  
654f			;   Output bit 6 = DB6  
654f			;   Output bit 7 = DB7  
654f			; Display's R/W is connected to 0v so it is always in write mode  
654f			;  
654f			; This set up should work with any system supporting the RC2014 bus  
654f			  
654f			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
654f			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
654f			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
654f			;  
654f			; **********************************************************************  
654f			  
654f			; **********************************************************************  
654f			; **  Constants  
654f			; **********************************************************************  
654f			; LCD constants required by LCD support module  
654f			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
654f			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
654f			kLCDBitE:   EQU 3              ;Port bit for LCD E signal  
654f			kLCDWidth:  EQU display_cols             ;Width in characters  
654f			  
654f			; **********************************************************************  
654f			; **  Code library usage  
654f			; **********************************************************************  
654f			  
654f			; send character to current cursor position  
654f			; wraps and/or scrolls screen automatically  
654f			  
654f			  
654f			lcd_init:  
654f			  
654f			; SCMonAPI functions used  
654f			  
654f			; Alphanumeric LCD functions used  
654f			; no need to specify specific functions for this module  
654f			  
654f 3e cf		            LD   A, 11001111b  
6551 d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
6553 3e 00		            LD   A, 00000000b  
6555 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
6557			  
6557			; Initialise alphanumeric LCD module  
6557 cd d0 65		            CALL fLCD_Init      ;Initialise LCD module  
655a			  
655a c9				ret  
655b			  
655b			;  
655b			;;  
655b			; lcd functions  
655b			;  
655b			;  
655b			  
655b			; what is at cursor position   
655b			  
655b			;get_cursor:	ld de, (cursor_row)   ;  row + col  
655b			;		call curptr  
655b			;		ret  
655b			  
655b			  
655b			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
655b			  
655b			curptr:  
655b c5				push bc  
655c 21 53 fb			ld hl, display_fb0  
655f			cpr:	  
655f				; loop for cursor whole row  
655f 0e 14			ld c, display_cols  
6561 23			cpr1:	inc hl  
6562 0d				dec c  
6563 20 fc			jr nz, cpr1  
6565 05				dec b  
6566 20 f7			jr nz, cpr  
6568			  
6568				; add col	  
6568			  
6568 23			cpr2:	inc hl  
6569 1d				dec e  
656a 20 fc			jr nz, cpr2  
656c			  
656c c1				pop bc  
656d c9				ret  
656e				  
656e			  
656e			  
656e			  
656e			  
656e			; write the frame buffer given in hl to hardware   
656e 22 5b fa		write_display: ld (display_write_tmp), hl 	   
6571 3e 00			ld a, kLCD_Line1  
6573 cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
6576 06 14			ld b, display_cols  
6578 ed 5b 5b fa		ld de, (display_write_tmp)  
657c cd c8 65			call write_len_string  
657f				  
657f				  
657f 2a 5b fa			ld hl, (display_write_tmp)  
6582 11 14 00			ld de, display_cols  
6585 19				add hl,de  
6586 22 5b fa			ld (display_write_tmp),hl  
6589			  
6589				  
6589 3e 40			ld a, kLCD_Line2  
658b cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
658e 06 14			ld b, display_cols  
6590 ed 5b 5b fa		ld de, (display_write_tmp)  
6594 cd c8 65			call write_len_string  
6597				  
6597 2a 5b fa			ld hl, (display_write_tmp)  
659a 11 14 00			ld de, display_cols  
659d 19				add hl,de  
659e 22 5b fa			ld (display_write_tmp),hl  
65a1			  
65a1				  
65a1 3e 14			ld a, kLCD_Line3  
65a3 cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
65a6 06 14			ld b, display_cols  
65a8 ed 5b 5b fa		ld de, (display_write_tmp)  
65ac cd c8 65			call write_len_string  
65af				  
65af 2a 5b fa			ld hl, (display_write_tmp)  
65b2 11 14 00			ld de, display_cols  
65b5 19				add hl,de  
65b6 22 5b fa			ld (display_write_tmp),hl  
65b9			  
65b9				  
65b9 3e 54			ld a, kLCD_Line4  
65bb cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
65be 06 14			ld b, display_cols  
65c0 ed 5b 5b fa		ld de, (display_write_tmp)  
65c4 cd c8 65			call write_len_string  
65c7 c9					ret  
65c8				  
65c8				; write out a fixed length string given in b from de  
65c8			  
65c8 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
65c9 cd 1a 66		            CALL fLCD_Data      ;Write character to display  
65cc 13				inc de  
65cd 10 f9			djnz write_len_string  
65cf c9				ret  
65d0			  
65d0			; Some other things to do  
65d0			;            LD   A, kLCD_Clear ;Display clear  
65d0			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
65d0			;            LD   A, kLCD_Under ;Display on with underscore cursor  
65d0			;            LD   A, kLCD_On     ;Display on with no cursor  
65d0			;            ;LD   A, kLCD_Off   ;Display off  
65d0			;            CALL fLCD_Inst      ;Send instruction to display  
65d0			;  
65d0			;  
65d0			;            halt  
65d0			;  
65d0			;  
65d0			;MsgHello:   DB  "Hello World!",0  
65d0			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
65d0			  
65d0			; Custom characters 5 pixels wide by 8 pixels high  
65d0			; Up to 8 custom characters can be defined  
65d0			;BitMaps:      
65d0			;; Character 0x00 = Battery icon  
65d0			;            DB  01110b  
65d0			;            DB  11011b  
65d0			;            DB  10001b  
65d0			;            DB  10001b  
65d0			;            DB  11111b  
65d0			;            DB  11111b  
65d0			;            DB  11111b  
65d0			;            DB  11111b  
65d0			;; Character 0x01 = Bluetooth icon  
65d0			;            DB  01100b  
65d0			;            DB  01010b  
65d0			;            DB  11100b  
65d0			;            DB  01000b  
65d0			;            DB  11100b  
65d0			;            DB  01010b  
65d0			;            DB  01100b  
65d0			;            DB  00000b  
65d0			;  
65d0			  
65d0			  
65d0			; **********************************************************************  
65d0			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
65d0			; **********************************************************************  
65d0			;  
65d0			; **  Written as a Small Computer Monitor App   
65d0			; **  Version 0.1 SCC 2018-05-16  
65d0			; **  www.scc.me.uk  
65d0			;  
65d0			; **********************************************************************  
65d0			;  
65d0			; This module provides support for alphanumeric LCD modules using with  
65d0			; *  HD44780 (or compatible) controller  
65d0			; *  5 x 7 pixel fonts  
65d0			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
65d0			; *  Interface via six digital outputs to the display (see below)  
65d0			;  
65d0			; LCD module pinout:  
65d0			;   1  Vss   0v supply  
65d0			;   2  Vdd   5v supply  
65d0			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
65d0			;   4  RS    High = data, Low = instruction  
65d0			;   5  R/W   High = Read, Low = Write  
65d0			;   6  E     Enable signal (active high)  
65d0			;   7  DB0   Data bit 0  
65d0			;   8  DB1   Data bit 1  
65d0			;   9  DB2   Data bit 2  
65d0			;  10  DB3   Data bit 3  
65d0			;  11  DB4   Data bit 4  
65d0			;  12  DB5   Data bit 5  
65d0			;  13  DB6   Data bit 6  
65d0			;  14  DB7   Data bit 7  
65d0			;  15  A     Backlight anode (+)  
65d0			;  16  K     Backlight cathode (-)  
65d0			;  
65d0			; This interfacing method uses 4-bit data mode and uses time delays  
65d0			; rather than polling the display's ready status. As a result the   
65d0			; interface only requires 6 simple output lines:  
65d0			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
65d0			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
65d0			;   LCD DB4 = Microcomputer output port bit 4  
65d0			;   LCD DB5 = Microcomputer output port bit 5  
65d0			;   LCD DB6 = Microcomputer output port bit 6  
65d0			;   LCD DB7 = Microcomputer output port bit 7  
65d0			; Display's R/W is connected to 0v so it is always in write mode  
65d0			; All 6 connections must be on the same port address <kLCDPrt>  
65d0			; This method also allows a decent length of cable from micro to LCD  
65d0			;  
65d0			; **********************************************************************  
65d0			;  
65d0			; To include the code for any given function provided by this module,   
65d0			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
65d0			; the parent source file.  
65d0			; For example:  #REQUIRES   uHexPrefix  
65d0			;  
65d0			; Also #INCLUDE this file at some point after the #REQUIRES statements  
65d0			; in the parent source file.  
65d0			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
65d0			;  
65d0			; These are the function names provided by this module:  
65d0			; fLCD_Init                     ;Initialise LCD  
65d0			; fLCD_Inst                     ;Send instruction to LCD  
65d0			; fLCD_Data                     ;Send data byte to LCD  
65d0			; fLCD_Pos                      ;Position cursor  
65d0			; fLCD_Str                      ;Display string  
65d0			; fLCD_Def                      ;Define custom character  
65d0			;  
65d0			; **********************************************************************  
65d0			;  
65d0			; Requires SCMonAPI.asm to also be included in the project  
65d0			;  
65d0			  
65d0			  
65d0			; **********************************************************************  
65d0			; **  Constants  
65d0			; **********************************************************************  
65d0			  
65d0			; Constants that must be defined externally  
65d0			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
65d0			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
65d0			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
65d0			;kLCDWidth: EQU 20             ;Width in characters  
65d0			  
65d0			; general line offsets in any frame buffer  
65d0			  
65d0			  
65d0			display_row_1: equ 0  
65d0			display_row_2: equ display_row_1+display_cols  
65d0			display_row_3: equ display_row_2 + display_cols  
65d0			display_row_4: equ display_row_3 + display_cols  
65d0			;display_row_4_eol:   
65d0			  
65d0			  
65d0			; Cursor position values for the start of each line  
65d0			kLCD_Line1: EQU 0x00   
65d0			kLCD_Line2: EQU 0x40    
65d0			kLCD_Line3: EQU kLCD_Line1+kLCDWidth  
65d0			kLCD_Line4: EQU kLCD_Line2+kLCDWidth   
65d0			  
65d0			; Instructions to send as A register to fLCD_Inst  
65d0			kLCD_Clear: EQU 00000001b     ;LCD clear  
65d0			kLCD_Off:   EQU 00001000b     ;LCD off  
65d0			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
65d0			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
65d0			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
65d0			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
65d0			  
65d0			; Constants used by this code module  
65d0			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
65d0			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
65d0			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
65d0			  
65d0			  
65d0			  
65d0			; **********************************************************************  
65d0			; **  LCD support functions  
65d0			; **********************************************************************  
65d0			  
65d0			; Initialise alphanumeric LCD module  
65d0			; LCD control register codes:  
65d0			;   DL   0 = 4-bit mode        1 = 8-bit mode  
65d0			;   N    0 = 1-line mode       1 = 2-line mode  
65d0			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
65d0			;   D    0 = Display off       1 = Display on  
65d0			;   C    0 = Cursor off        1 = Cursor on  
65d0			;   B    0 = Blinking off      1 = Blinking on  
65d0			;   ID   0 = Decrement mode    1 = Increment mode  
65d0			;   SH   0 = Entire shift off  1 = Entire shift on  
65d0 3e 28		fLCD_Init:  LD   A, 40  
65d2 cd 87 66		            CALL LCDDelay       ;Delay 40ms after power up  
65d5			; For reliable reset set 8-bit mode - 3 times  
65d5 cd 71 66		            CALL WrFn8bit       ;Function = 8-bit mode  
65d8 cd 71 66		            CALL WrFn8bit       ;Function = 8-bit mode  
65db cd 71 66		            CALL WrFn8bit       ;Function = 8-bit mode  
65de			; Set 4-bit mode  
65de cd 6d 66		            CALL WrFn4bit       ;Function = 4-bit mode  
65e1 cd 85 66		            CALL LCDDelay1      ;Delay 37 us or more  
65e4			; Function set  
65e4 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
65e6 cd f9 65		            CALL fLCD_Inst      ;2 line, display on  
65e9			; Display On/Off control  
65e9 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
65eb cd f9 65		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
65ee			; Display Clear  
65ee 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
65f0 cd f9 65		            CALL fLCD_Inst      ;Clear display  
65f3			; Entry mode  
65f3 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
65f5 cd f9 65		            CALL fLCD_Inst      ;Increment mode, shift off  
65f8			; Display module now initialised  
65f8 c9			            RET  
65f9			; ok to here  
65f9			  
65f9			; Write instruction to LCD  
65f9			;   On entry: A = Instruction byte to be written  
65f9			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
65f9 f5			fLCD_Inst:  PUSH AF  
65fa f5			            PUSH AF  
65fb cd 0d 66		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
65fe f1			            POP  AF  
65ff 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
6600 17			            RLA  
6601 17			            RLA  
6602 17			            RLA  
6603 cd 0d 66		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
6606 3e 02		            LD   A, 2  
6608 cd 87 66		            CALL LCDDelay       ;Delay 2 ms to complete   
660b f1			            POP  AF  
660c c9			            RET  
660d e6 f0		Wr4bits:   AND  0xF0           ;Mask so we only have D4 to D7  
660f d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6611 cb df		            SET  kLCDBitE, A  
6613 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
6615 cb 9f		            RES  kLCDBitE, A  
6617 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6619 c9			            RET  
661a			  
661a			  
661a			; Write data to LCD  
661a			;   On entry: A = Data byte to be written  
661a			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
661a f5			fLCD_Data:  PUSH AF  
661b f5			            PUSH AF  
661c cd 2e 66		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
661f f1			            POP  AF  
6620 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
6621 17			            RLA  
6622 17			            RLA  
6623 17			            RLA  
6624 cd 2e 66		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
6627 3e 96		            LD   A, 150  
6629 3d			Wait:      DEC  A              ;Wait a while to allow data   
662a 20 fd		            JR   NZ, Wait      ;  write to complete  
662c f1			            POP  AF  
662d c9			            RET  
662e e6 f0		Wr4bitsa:   AND  0xF0           ;Mask so we only have D4 to D7  
6630 cb d7		            SET  kLCDBitRS, A  
6632 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
6634 cb df		            SET  kLCDBitE, A  
6636 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
6638 cb 9f		            RES  kLCDBitE, A  
663a d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
663c cb 97		            RES  kLCDBitRS, A  
663e d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6640 c9			            RET  
6641			  
6641			  
6641			; Position cursor to specified location  
6641			;   On entry: A = Cursor position  
6641			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
6641 f5			fLCD_Pos:   PUSH AF  
6642 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
6644 cd f9 65		            CALL fLCD_Inst      ;Write instruction to LCD  
6647 f1			            POP  AF  
6648 c9			            RET  
6649			  
6649			  
6649			; Output text string to LCD  
6649			;   On entry: DE = Pointer to null terminated text string  
6649			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
6649 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
664a b7			            OR   A              ;Null terminator?  
664b c8			            RET  Z              ;Yes, so finished  
664c cd 1a 66		            CALL fLCD_Data      ;Write character to display  
664f 13			            INC  DE             ;Point to next character  
6650 18 f7		            JR   fLCD_Str       ;Repeat  
6652 c9					ret  
6653			  
6653			; Define custom character  
6653			;   On entry: A = Character number (0 to 7)  
6653			;             DE = Pointer to character bitmap data  
6653			;   On exit:  A = Next character number  
6653			;             DE = Next location following bitmap  
6653			;             BC HL IX IY I AF' BC' DE' HL' preserved  
6653			; Character is   
6653 c5			fLCD_Def:   PUSH BC  
6654 f5			            PUSH AF  
6655 07			            RLCA                ;Calculate location  
6656 07			            RLCA                ;  for bitmap data  
6657 07			            RLCA                ;  = 8 x CharacterNumber  
6658 f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
665a cd f9 65		            CALL fLCD_Inst      ;Write instruction to LCD  
665d 06 00		            LD   B, 0  
665f 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
6660 cd 1a 66		            CALL fLCD_Data      ;Write byte to display  
6663 13			            INC  DE             ;Point to next byte  
6664 04			            INC  B              ;Count bytes  
6665 cb 58		            BIT  3, B           ;Finish all 8 bytes?  
6667 28 f6		            JR   Z, Loop       ;No, so repeat  
6669 f1			            POP  AF  
666a 3c			            INC  A              ;Increment character number  
666b c1			            POP  BC  
666c c9			            RET  
666d			  
666d			  
666d			; **********************************************************************  
666d			; **  Private functions  
666d			; **********************************************************************  
666d			  
666d			; Write function to LCD  
666d			;   On entry: A = Function byte to be written  
666d			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
666d 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
666f 18 02		            JR   WrFunc  
6671 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
6673 f5			WrFunc:     PUSH AF  
6674 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
6676 cb df		            SET  kLCDBitE, A  
6678 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
667a cb 9f		            RES  kLCDBitE, A  
667c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
667e 3e 05		            LD   A, 5  
6680 cd 87 66		            CALL LCDDelay       ;Delay 5 ms to complete  
6683 f1			            POP  AF  
6684 c9			            RET  
6685			  
6685			  
6685			; Delay in milliseconds  
6685			;   On entry: A = Number of milliseconds delay  
6685			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
6685 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
6687 d5			LCDDelay:   PUSH DE  
6688 5f			            LD   E, A           ;Delay by 'A' ms  
6689 16 00		            LD   D, 0  
668b cd 4b 0a		            CALL aDelayInMS  
668e d1			            POP  DE  
668f c9			            RET  
6690			  
6690			  
6690			  
6690			  
6690			; eof  
6690			  
# End of file firmware_lcd_4x20.asm
6690			include "firmware_key_4x4.asm" 
6690			  
6690			  
6690			; bit mask for each scan column and row for teing the matrix  
6690			  
6690			; out   
6690 80 40 20 10	key_row_bitmask:    db 128, 64, 32, 16  
6694			; in  
6694 01 02 04 08	key_col_bitmask:    db 1, 2, 4, 8  
6698			  
6698			; row/col to character map  
6698			  
6698			; char, state use   123xxsss   - bit 8,7,6 this key selects specified state, s is this key is member of that state  
6698			;    
6698			  
6698			; physical key matrix map to face of key  
6698			  
6698			  
6698			;      	1	2	3	A  
6698			;   	abc”	def&	ghi$	s1  
6698			;			  
6698			;	4	5	6	B  
6698			; 	jkl,	mno.	pqr:	s2  
6698			;			  
6698			; 	7	8	9	C  
6698			;	stu;	vwx@	yz?!	s3  
6698			;			  
6698			; 	*	0	#	D  
6698			; 	shift lck '	Space < >	Enter ( )	s4  
6698			;       tab bs 		  
6698			  
6698			  
6698			  
6698			  
6698			key_init:  
6698			  
6698			; SCMonAPI functions used  
6698			  
6698			; Alphanumeric LCD functions used  
6698			; no need to specify specific functions for this module  
6698			  
6698			  
6698 3e cf		            LD   A, 11001111b  
669a d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
669c			;            LD   A, 00000000b  
669c 3e 0f		            LD   A, 00001111b  
669e d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
66a0			  
66a0			  
66a0				; TODO Configure cursor shapes  
66a0			  
66a0				; Load cursor shapes   
66a0 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
66a2 11 b2 66		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
66a5 06 02		            LD   B, 2           ;Number of characters to define  
66a7 cd 53 66		.DefLoop:   CALL fLCD_Def       ;Define custom character  
66aa 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
66ac			  
66ac 3e 01				ld a, 1  
66ae 32 56 fa			ld (cursor_shape),a  
66b1 c9				ret  
66b2			  
66b2			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
66b2			; Up to 8 custom characters can be defined  
66b2			.cursor_shapes:      
66b2			;; Character 0x00 = Normal  
66b2 1f			            DB  11111b  
66b3 1f			            DB  11111b  
66b4 1f			            DB  11111b  
66b5 1f			            DB  11111b  
66b6 1f			            DB  11111b  
66b7 1f			            DB  11111b  
66b8 1f			            DB  11111b  
66b9 1f			            DB  11111b  
66ba			;; Character 0x01 = Modifier  
66ba 1f			            DB  11111b  
66bb 1b			            DB  11011b  
66bc 1b			            DB  11011b  
66bd 1b			            DB  11011b  
66be 1b			            DB  11011b  
66bf 1f			            DB  11111b  
66c0 1b			            DB  11011b  
66c1 1f			            DB  11111b  
66c2			  
66c2			  
66c2			  
66c2			  
66c2			; Display custom character 0  
66c2			;            LD   A, kLCD_Line1+14  
66c2			;            CALL fLCD_Pos       ;Position cursor to location in A  
66c2			;            LD   A, 0  
66c2			;            CALL fLCD_Data      ;Write character in A at cursor  
66c2			  
66c2			; Display custom character 1  
66c2			;            LD   A, kLCD_Line2+14  
66c2			;            CALL fLCD_Pos      ;Position cursor to location in A  
66c2			;            LD   A, 1  
66c2			;            CALL fLCD_Data     ;Write character in A at cursor  
66c2			  
66c2			; keyboard scanning   
66c2			  
66c2			  
66c2			; key_rows: equ 4  
66c2			; key_cols: equ 4  
66c2			; keyscan_table: edu ( tos-stacksize-(key_rows*key_cols))  
66c2			  
66c2			; key_scanr: equ key_row_bitmask  
66c2			; key_scanc: equ key_col_bitmask  
66c2			  
66c2			; key_char_map: equ key_map  
66c2			  
66c2			  
66c2			  
66c2			; character in from keyboard  
66c2			  
66c2 ..			.matrix_to_char: db "D#0*C987B654A321"  
66d2			  
66d2			  
66d2			; map the physical key to a char dependant on state  
66d2			  
66d2			.key_map_fa:   
66d2			  
66d2 ..					db 'D'  
66d3 0d					db KEY_CR    ; cr  
66d4 ..					db ' '  
66d5 04					db  KEY_SHIFTLOCK   ; TODO Shift lock  
66d6 ..					db 'C'  
66d7 ..					db 'y'  
66d8 ..					db 'v'  
66d9 ..					db 's'  
66da ..					db 'B'  
66db ..					db 'p'  
66dc ..					db 'm'  
66dd ..					db 'j'  
66de ..					db 'A'  
66df ..					db 'g'  
66e0 ..					db 'd'  
66e1 ..					db 'a'  
66e2			  
66e2			.key_map_fb:  
66e2			  
66e2 ..					db 'A'  
66e3 ..					db '+'   
66e4 ..					db '<'  
66e5 ..					db  "'"    
66e6			  
66e6 ..					db 'A'  
66e7 ..					db 'z'  
66e8 ..					db 'w'  
66e9 ..					db 't'  
66ea ..					db 'A'  
66eb ..					db 'q'  
66ec ..					db 'n'  
66ed ..					db 'k'  
66ee ..					db 'A'  
66ef ..					db 'h'  
66f0 ..					db 'e'  
66f1 ..			 		db 'b'  
66f2			  
66f2			.key_map_fc:   
66f2			  
66f2			  
66f2 ..					db 'A'  
66f3 ..					db '-'   
66f4 ..					db '>'  
66f5 ..					db  '='   	  
66f6 ..					db 'A'  
66f7 ..					db '?'  
66f8 ..					db 'x'  
66f9 ..					db 'u'  
66fa ..					db 'A'  
66fb ..					db 'r'  
66fc ..					db 'o'  
66fd ..					db 'l'  
66fe ..					db 'A'  
66ff ..					db 'i'  
6700 ..					db 'f'  
6701 ..					db 'c'  
6702			  
6702				  
6702			.key_map_fd:  
6702			  
6702 ..					db 'A'  
6703 ..					db '/'   
6704 ..					db '%'   
6705 08					db KEY_BS  ; back space  
6706 ..					db 'A'  
6707 ..					db '!'  
6708 ..					db '@'  
6709 ..					db ';'  
670a ..					db 'A'  
670b ..					db ':'  
670c ..					db '.'  
670d ..					db ','  
670e ..					db 'A'  
670f ..					db '$'  
6710 ..					db '&'  
6711 ..				 	db '"'  
6712			  
6712					  
6712				  
6712			  
6712			; add cin and cin_wait  
6712			  
6712 cd 23 67		cin_wait: 	call cin  
6715 fe 00			cp 0  
6717 28 f9			jr z, cin_wait   ; block until key press  
6719			  
6719 f5				push af   ; save key pressed  
671a			  
671a cd 23 67		.cin_wait1:	call cin  
671d fe 00			cp 0  
671f 20 f9			jr nz, .cin_wait1  	; wait for key release  
6721			  
6721 f1				pop af   ; get key  
6722 c9				ret  
6723			  
6723			  
6723 cd 34 67		cin: 	call .mtoc  
6726			  
6726				; no key held  
6726 fe 00			cp 0  
6728 c8				ret z  
6729			  
6729				; stop key bounce  
6729			  
6729			;	ld (key_held),a		 ; save it  
6729 47				ld b, a  
672a			  
672a c5			.cina1:	push bc  
672b cd 34 67			call .mtoc  
672e c1				pop bc  
672f b8				cp b  
6730 28 f8			jr z, .cina1  
6732 78				ld a,b		  
6733 c9				ret  
6734			  
6734			; detect keyboard modifier key press and apply new overlay to the face key held  
6734			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
6734			  
6734			;.cin_map_modifier:   
6734			;	ld a, (hl)  
6734			;	and 255  
6734			;	ret NZ		; modifier key not flagged  
6734			;  
6734			;	; get key face  
6734			;  
6734			;	ld b,(key_face_held)  
6734			;  
6734			;	ld b, key_cols * key_rows  
6734			;  
6734			;	push de  
6734			;	pop hl  
6734			;  
6734			;.mmod1: ld a,(hl)   ; get map test  
6734			;	cp b  
6734			;	jr z, .mmod2  
6734			;  
6734			;  
6734			;  
6734			;.mmod2: inc hl    ;   
6734			;  
6734			;	  
6734			;  
6734			;	  
6734			;  
6734			;	ld hl,key_actual_pressed  
6734			;	ld (hl),a,  
6734			;	ret  
6734			  
6734				  
6734			  
6734			; map matrix key held to char on face of key  
6734			  
6734			.mtoc:  
6734			  
6734			  
6734				; TODO optimise the code....  
6734			  
6734			; scan keyboard row 1  
6734 3e 80			ld a, 128  
6736 21 d3 fb			ld hl, keyscan_table  
6739 cd 1b 68			call .rowscan  
673c			  
673c				   
673c			  
673c 3e 40			ld a, 64  
673e 21 d7 fb			ld hl, keyscan_table+key_cols  
6741 cd 1b 68			call .rowscan  
6744			  
6744			  
6744			  
6744			  
6744 3e 20			ld a, 32  
6746 21 db fb			ld hl, keyscan_table+(key_cols*2)  
6749 cd 1b 68			call .rowscan  
674c			  
674c			  
674c			  
674c 3e 10			ld a, 16  
674e 21 df fb			ld hl, keyscan_table+(key_cols*3)  
6751 cd 1b 68			call .rowscan  
6754			  
6754			  
6754				; flag if key D is held down and remove from reporting  
6754 01 02 67			ld bc, .key_map_fd    
6757 21 d3 fb			ld hl, keyscan_table  
675a 11 c5 fb			ld de, key_fd  
675d cd ad 67			call .key_shift_hold  
6760 fe ff			cp 255  
6762 28 33			jr z, .cinmap  
6764				; flag if key C is held down and remove from reporting  
6764 01 f2 66			ld bc, .key_map_fc    
6767 21 d7 fb			ld hl, keyscan_table+key_cols  
676a 11 c6 fb			ld de, key_fc  
676d cd ad 67			call .key_shift_hold  
6770 fe ff			cp 255  
6772 28 23			jr z, .cinmap  
6774				; flag if key B is held down and remove from reporting  
6774 01 e2 66			ld bc, .key_map_fb    
6777 21 db fb			ld hl, keyscan_table+(key_cols*2)  
677a 11 c7 fb			ld de, key_fb  
677d cd ad 67			call .key_shift_hold  
6780 fe ff			cp 255  
6782 28 13			jr z, .cinmap  
6784				; flag if key A is held down and remove from reporting  
6784 01 d2 66			ld bc, .key_map_fa    
6787 21 df fb			ld hl, keyscan_table+(key_cols*3)  
678a 11 c8 fb			ld de, key_fa  
678d cd ad 67			call .key_shift_hold  
6790 fe ff			cp 255  
6792 28 03			jr z, .cinmap  
6794			  
6794 11 c2 66			ld de, .matrix_to_char  
6797			  
6797			  
6797			.cinmap:   
6797				if DEBUG_KEY  
6797			            LD   A, kLCD_Line4  
6797			            CALL fLCD_Pos       ;Position cursor to location in A  
6797					push de  
6797			            LD   DE, keyscan_table  
6797			            CALL fLCD_Str       ;Display string pointed to by DE  
6797					pop de  
6797				endif  
6797			  
6797				; scan key matrix table for any held key  
6797			  
6797				; de holds either the default matrix or one selected above  
6797			  
6797 21 d3 fb			ld hl, keyscan_table  
679a 06 10			ld b,key_cols*key_rows  
679c			  
679c 7e			.cin1:	ld a,(hl)  
679d fe 23			cp '#'  
679f 28 08			jr z, .cinhit  
67a1 23				inc hl  
67a2 13				inc de  
67a3 05				dec b  
67a4 20 f6			jr nz, .cin1  
67a6				; no key found held  
67a6 3e 00			ld a,0  
67a8 c9				ret  
67a9 d5			.cinhit: push de  
67aa e1				pop hl  
67ab 7e				ld a,(hl)  
67ac c9				ret  
67ad			  
67ad			; flag a control key is held   
67ad			; hl is key pin, de is flag indicator  
67ad			  
67ad			.key_shift_hold:  
67ad c5				push bc  
67ae 3e 01			ld a, 1  
67b0 32 56 fa			ld (cursor_shape),a  
67b3 06 00			ld b, 0  
67b5 7e				ld a, (hl)  
67b6 fe 2e			cp '.'  
67b8 28 0a			jr z, .key_shift1  
67ba 06 ff			ld b, 255  
67bc 3e 2b			ld a, '+'    ; hide key from later scans  
67be 77				ld (hl),a  
67bf 3e 02			ld a, 2  
67c1 32 56 fa			ld (cursor_shape),a  
67c4			.key_shift1:  
67c4				; write flag indicator  
67c4 78				ld a,b  
67c5 12				ld (de),a  
67c6			  
67c6 d1				pop de    ; de now holds the key map ptr  
67c7 c9				ret  
67c8			  
67c8				  
67c8				  
67c8			  
67c8			  
67c8			  
67c8			  
67c8			  
67c8			  
67c8			  
67c8			  
67c8			  
67c8			  
67c8 c9				ret  
67c9			  
67c9			;	push hl  
67c9			;	push de  
67c9			;	push bc  
67c9			;	call keyscan  
67c9			;	; map key matrix to ascii value of key face  
67c9			;  
67c9			;	ld hl, key_face_map  
67c9			;	ld de, keyscan_table  
67c9			;  
67c9			;	; get how many keys to look at  
67c9			;	ld b, keyscan_table_len  
67c9			;	  
67c9			;  
67c9			;	; at this stage fall out on first key hit  
67c9			;	; TODO handle multiple key press  
67c9			;  
67c9			;map1:	ld a,(hl)  
67c9			;	cp '#'  
67c9			;	jr z, keyhit  
67c9			;	inc hl  
67c9			;	inc de  
67c9			;	dec b  
67c9			;	jr nz, map1  
67c9			;nohit:	ld a, 0  
67c9			;	jr keydone  
67c9			;keyhit: push de  
67c9			;	pop hl  
67c9			;	ld a,(hl)  
67c9			;keydone:  
67c9			;	push bc  
67c9			;	push de  
67c9			; 	push hl  
67c9			;	ret   
67c9			;  
67c9			  
67c9			  
67c9			  
67c9			  
67c9			; scan physical key matrix  
67c9			  
67c9			  
67c9			;keyscan:  
67c9			;  
67c9			;; for each key_row use keyscanr bit mask for out  
67c9			;; then read in for keyscanc bitmask  
67c9			;; save result of row scan to keyscantable  
67c9			;  
67c9			;; scan keyboard row 1  
67c9			;  
67c9			;	ld b, key_rows  
67c9			;	ld hl, key_scanr  
67c9			;	ld de, keyscan_table  
67c9			;  
67c9			;rowloop:  
67c9			;  
67c9			;	ld a,(hl)		; out bit mask to energise keyboard row  
67c9			;	call rowscan  
67c9			;	inc hl  
67c9			;	dec b  
67c9			;	jr nz, rowloop  
67c9			;  
67c9			;	ret  
67c9			;  
67c9			;  
67c9			;; pass a out bitmask, b row number  
67c9			;arowscan:   
67c9			;	push bc  
67c9			;  
67c9			;	ld d, b  
67c9			;  
67c9			;	; calculate buffer location for this row  
67c9			;  
67c9			;	ld hl, keyscan_table	  
67c9			;kbufr:  ld e, key_cols  
67c9			;kbufc:	inc hl  
67c9			;	dec e  
67c9			;	jr nz, kbufc  
67c9			;	dec d  
67c9			;	jr nz, kbufr  
67c9			;  
67c9			;	; energise row and read columns  
67c9			;  
67c9			;	out (portbdata),a  
67c9			;	in a,(portbdata)  
67c9			;	ld c,a  
67c9			;  
67c9			;  
67c9			;	; save buffer loc  
67c9			;  
67c9			;	ld (keybufptr), hl  
67c9			;  
67c9			;	ld hl, key_scanc  
67c9			;	ld d, key_cols  
67c9			;  
67c9			;	; for each column check each bit mask  
67c9			;  
67c9			;colloop:  
67c9			;	  
67c9			;  
67c9			;	; reset flags for the row   
67c9			;  
67c9			;	ld b,'.'  
67c9			;	and (hl)  
67c9			;	jr z, maskskip  
67c9			;	ld b,'#'  
67c9			;maskskip:  
67c9			;	; save  key state  
67c9			;	push hl  
67c9			;	ld hl, (keybufptr)  
67c9			;	ld (hl), b  
67c9			;	inc hl  
67c9			;	ld (keybufptr), hl  
67c9			;  
67c9			;	; move to next bit mask  
67c9			;	pop hl  
67c9			;	inc hl  
67c9			;  
67c9			;	dec d  
67c9			;	jr nz, colloop  
67c9			;  
67c9			;	ret  
67c9			;  
67c9			;  
67c9			;;  
67c9			; lcd functions  
67c9			;  
67c9			;  
67c9			  
67c9			;if DEBUG_KEY_MATRIX  
67c9			  
67c9			; test function to display hardware view of matrix state  
67c9			  
67c9			matrix:  
67c9			  
67c9			  
67c9			  
67c9			; scan keyboard row 1  
67c9 3e 80			ld a, 128  
67cb 21 f8 fb			ld hl, keyscan_table_row1  
67ce cd 1b 68			call .rowscan  
67d1			  
67d1 3e 40			ld a, 64  
67d3 21 f3 fb			ld hl, keyscan_table_row2  
67d6 cd 1b 68			call .rowscan  
67d9			  
67d9 3e 20			ld a, 32  
67db 21 ee fb			ld hl, keyscan_table_row3  
67de cd 1b 68			call .rowscan  
67e1			  
67e1 3e 10			ld a, 16  
67e3 21 e9 fb			ld hl, keyscan_table_row4  
67e6 cd 1b 68			call .rowscan  
67e9			  
67e9			; Display text on first line  
67e9 3e 00		            LD   A, kLCD_Line1  
67eb cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
67ee 11 f8 fb		            LD   DE, keyscan_table_row1  
67f1			            ;LD   DE, MsgHello  
67f1 cd 49 66		            CALL fLCD_Str       ;Display string pointed to by DE  
67f4			  
67f4			; Display text on second line  
67f4 3e 40		            LD   A, kLCD_Line2  
67f6 cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
67f9 11 f3 fb		            LD   DE, keyscan_table_row2  
67fc cd 49 66		            CALL fLCD_Str       ;Display string pointed to by DE  
67ff 3e 14		            LD   A, kLCD_Line3  
6801 cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
6804 11 ee fb		            LD   DE, keyscan_table_row3  
6807 cd 49 66		            CALL fLCD_Str       ;Display string pointed to by DE  
680a 3e 54		            LD   A, kLCD_Line4  
680c cd 41 66		            CALL fLCD_Pos       ;Position cursor to location in A  
680f 11 e9 fb		            LD   DE, keyscan_table_row4  
6812 cd 49 66		            CALL fLCD_Str       ;Display string pointed to by DE  
6815			  
6815 cd 5a 0a			call delay250ms  
6818 c3 c9 67			jp matrix  
681b			  
681b			; pass de as row display flags  
681b			.rowscan:   
681b d3 c1			out (portbdata),a  
681d db c1			in a,(portbdata)  
681f 4f				ld c,a  
6820				; reset flags for the row   
6820 06 2e			ld b,'.'  
6822 e6 01			and 1  
6824 28 02			jr z, .p1on  
6826 06 23			ld b,'#'  
6828			.p1on:  
6828 70				ld (hl), b  
6829 23				inc hl  
682a			  
682a 06 2e			ld b,'.'  
682c 79				ld a,c  
682d e6 02			and 2  
682f			;	bit 0,a  
682f 28 02			jr z, .p2on  
6831 06 23			ld b,'#'  
6833			.p2on:  
6833 70				ld (hl), b  
6834 23				inc hl  
6835			;  
6835 06 2e			ld b,'.'  
6837 79				ld a,c  
6838 e6 04			and 4  
683a			;;	bit 0,a  
683a 28 02			jr z, .p3on  
683c 06 23			ld b,'#'  
683e			.p3on:  
683e 70				ld (hl), b  
683f 23				inc hl  
6840			;;  
6840 06 2e			ld b,'.'  
6842			;;	bit 0,a  
6842 79				ld a,c  
6843 e6 08			and 8  
6845 28 02			jr z, .p4on  
6847 06 23			ld b,'#'  
6849			.p4on:  
6849 70				ld (hl), b  
684a 23				inc hl  
684b			  
684b			; zero term  
684b 06 00			ld b,0  
684d 70				ld (hl), b  
684e			  
684e c9			.rscandone: ret  
684f			  
684f			  
684f			  
684f			;endif  
684f			  
684f			  
684f			; eof  
# End of file firmware_key_4x4.asm
# End of file os_mini.asm
684f
