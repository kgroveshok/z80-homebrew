# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 2f 1c			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-08-11 12:11' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
001f			 
001f			 
001f			 
001f			;        nop  
001f			;        nop 
001f			;;	org 05h		; null out bdos call 
001f			; 
001f			;        nop  
001f			;        nop  
001f			;        nop 
001f			;;	org 08h 
001f			;;; 
001f			;;	jp cin		; rst 8 - char in 
001f			;;; 
001f			; 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;	org 010h 
001f			;; 
001f			;	jp cout		; rest 010h  - char out 
001f			;; 
001f			;	org 01bh   
001f			; 
001f			;	;jp  		; rst 01bh   - write string to display 
001f			;	jp str_at_display 
001f			; 
001f			; 
001f			;	org 020h 
001f			; 
001f			;	; jp		 ; rst 020h - read char at screen location 
001f			; 
001f			;	org 028h 
001f			 
001f				; jp		 ; rst 028h  - storage i/o 
001f			 
001f			; 	org 030h 
001f			;	jp break_point_state 
001f			  
001f			; $30  
001f			; org 038h 
001f			; $38 
001f			 
001f			; TODO any more important entry points to add to jump table for easier coding use? 
001f			 
001f			if BASE_KEV = 1  
001f			 
001f				; need to be at $66 for nmi support 
001f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0025 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0031 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0037 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0043 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0049 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0055 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0061 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0067 00 ff			db 0,255 
0069 c3 40 6f			jp nmi 
006c			endif 
006c			 
006c			include "firmware.asm" 
006c			  
006c			; main constants (used here and in firmware)  
006c			  
006c			; TODO have page 0 of storage as bios  
006c			  
006c			Device_A: equ 0h  
006c			Device_B: equ 040h          ; Sound  
006c			  
006c			if BASE_KEV  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_SC114  
006c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			; TODO fixup for CPM  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			Device_D: equ 0c0h             ; Keyboard and LCD  
006c			  
006c			; Odd specific debug points for testing hardware dev  
006c			  
006c			;if DEBUG_LEVEL0  
006c			;	include "debug_level0.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL1  
006c			;	include "debug_level1.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL2  
006c			;	include "debug_level2.asm"  
006c			;endif  
006c			  
006c			  
006c			CALLMONITOR: macro  
006c			;	call break_point_state  
006c			; now use the break point debug vector  
006c				call debug_vector  
006c				endm  
006c			  
006c			MALLOC_1: equ 1        ; from dk88   
006c			MALLOC_2: equ 0           ; broke  
006c			MALLOC_3: equ 0           ; really broke  
006c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
006c			  
006c			if BASE_KEV   
006c			;stacksize: equ 256  
006c			; each stack entry is three bytes (type + word)  
006c			stacksize: equ 3*150  
006c			  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 512  
006c			endif  
006c			if BASE_SC114  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			;if STORAGE_SE == 0  
006c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
006c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
006c			;endif  
006c			  
006c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
006c			  
006c			STORE_0_AUTORUN: equ $20  
006c			  
006c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
006c			  
006c			STORE_0_AUTOFILE: equ $21  
006c			STORE_0_BANKRUN: equ $23  
006c			STORE_0_FILERUN: equ $24  
006c			  
006c			; Block 0 offsets for settings  
006c			  
006c			; if set then skip prompt for start up and accept all  
006c			  
006c			STORE_0_QUICKSTART: equ $25  
006c			  
006c			; Blocks where directory table is held  
006c			  
006c			; Reducing the number of entries increases the max file size  
006c			  
006c			;STORE_DIR_START: equ 1  
006c			;STORE_DIR_END: equ 33  
006c			  
006c			; Blocks from where file data is stored  
006c			  
006c			;STORE_DATA_START: equ STORE_DIR_END + 1  
006c			  
006c			; Block indicators (<32 are data files)  
006c			  
006c			;STORE_BLOCK_CFG: equ $8f       ; config block  
006c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
006c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
006c			;STORE_BLOCK_FREE: equ $85       ; data block free  
006c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
006c			  
006c			  
006c			  
006c			; Directory entry flags  
006c			  
006c			;STORE_DIR_FREE: equ 0  
006c			;STORE_DIR_FILE:  equ 1  
006c			  
006c			; Structure offsets to directory entries  
006c			;STORE_DE_FLAG: equ 0  
006c			;STORE_DE_MAXEXT: equ 1  
006c			;STORE_DE_FILENAME: equ 2  
006c			  
006c			; Structure offsets to block 0  
006c			  
006c			;STORE_BK0_ISFOR: equ 1  
006c			;STORE_BK0_LABEL: equ 3  
006c			  
006c			; memory allocation   
006c			  
006c			chk_stund: equ tos+2           ; underflow check word  
006c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
006c			  
006c			; keyscan table needs rows x cols buffer  
006c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
006c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
006c			  
006c			keyscan_table_row1: equ chk_stovr -key_cols-1  
006c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
006c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
006c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
006c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
006c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
006c			keyscan_scancol: equ keyscan_table-key_cols  
006c			;keyscan_table_len: equ key_rows*key_cols  
006c			;keybufptr: equ keyscan_table - 2  
006c			;keysymbol: equ keybufptr - 1  
006c			key_held: equ keyscan_scancol-1	; currently held  
006c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
006c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
006c			key_fa: equ key_repeat_ct -1 ;  
006c			key_fb: equ key_fa -1 ;  
006c			key_fc: equ key_fb -1 ;  
006c			key_fd: equ key_fc -1 ;  
006c			key_face_held: equ key_fd - 1   
006c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
006c			  
006c			hardware_config: equ key_face_held - 10  
006c			  
006c			; hardware config switches  
006c			; TODO add bitmasks on includes for hardware  
006c			; high byte for expansion ids  
006c			;     0000 0000  no card inserted  
006c			;     0000 0001  storage card inserted  
006c			;     0000 0010  spi sd card active  
006c			  
006c			;       
006c			; low byte:  
006c			;     0000 0001   4x4 keypad  
006c			;     0000 0010   full keyboard  
006c			;     0000 0011   spi/ext keyboard  
006c			;     0000 0100   20x4 lcd  
006c			;     0000 1000   40x4 lcd  
006c			;     0000 1100   spi/ext display  
006c			;     0001 0000   ide interface available  
006c			  
006c			hardware_word: equ hardware_config - 2  
006c			  
006c			; debug marker - optional display of debug point on the debug screens  
006c			  
006c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
006c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
006c			  
006c			debug_mark: equ debug_vector - 4  
006c			  
006c			; input_str vars  
006c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
006c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
006c			input_size: equ input_start -1  ; number of chars  
006c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
006c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
006c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
006c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
006c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
006c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
006c			input_len: equ input_cur_onoff - 5 ; length of current input  
006c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
006c			  
006c			; cursor blink rate  
006c			CUR_BLINK_RATE: equ $09  
006c			;CUR_BLINK_RATE: equ 15  
006c			  
006c			key_actual_pressed: equ input_cursor - 1   
006c			key_symbol: equ key_actual_pressed - 1   
006c			key_shift: equ key_symbol - 1   
006c			  
006c			; Display allocation  
006c			  
006c			;display_rows: equ 4     ; move out to mini and mega files  
006c			;display_cols: equ 20  
006c			  
006c			display_fb_len: equ display_rows*display_cols  
006c			  
006c			; primary frame buffer     
006c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
006c			; working frame buffers  
006c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
006c			display_fb3: equ  display_fb1-display_fb_len - 1  
006c			display_fb2: equ  display_fb3-display_fb_len - 1  
006c			;  
006c			; pointer to active frame buffer  
006c			display_fb_active: equ display_fb2 - 2  
006c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
006c			display_write_tmp: equ display_lcde1e2 - 2  
006c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
006c			  
006c			;  
006c			  
006c			;; can load into de directory  
006c			cursor_col: equ display_active-1  
006c			cursor_row: equ cursor_col-1  
006c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
006c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
006c			  
006c			; maths vars  
006c			  
006c			LFSRSeed: equ cursor_shape -20   
006c			randData: equ LFSRSeed - 2  
006c			xrandc: equ randData - 2  
006c			stackstore: equ xrandc - 2  
006c			seed1: equ  stackstore -2   
006c			seed2: equ seed1 - 2  
006c			  
006c			; cf storage vars  
006c			  
006c			iErrorNum:  equ seed2-1         ;Error number  
006c			iErrorReg:  equ iErrorNum -1              ;Error register  
006c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
006c			  
006c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
006c			  
006c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
006c			  
006c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
006c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
006c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
006c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
006c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
006c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
006c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
006c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
006c			store_tmpid: equ store_tmp3 - 1		; page temp id  
006c			store_tmpext: equ store_tmpid - 1		; file extent temp  
006c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
006c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
006c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
006c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
006c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
006c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
006c			;  
006c			; spi vars  
006c			  
006c			  
006c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
006c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
006c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
006c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
006c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
006c			spi_device_id: equ spi_device - 1    ; human readable bank number  
006c			  
006c			;;;;; forth cli params  
006c			  
006c			; TODO use a different frame buffer for forth???  
006c			  
006c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
006c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
006c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
006c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
006c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
006c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
006c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
006c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
006c			  
006c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
006c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
006c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
006c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
006c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
006c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
006c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
006c			  
006c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
006c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
006c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
006c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
006c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
006c			  
006c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
006c			  
006c			; os/forth token vars  
006c			  
006c			os_last_cmd: equ os_var_array-255  
006c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
006c			os_current_i: equ os_cli_cmd-2  
006c			os_cur_ptr: equ os_current_i-2  
006c			os_word_scratch: equ os_cur_ptr-30  
006c			os_tok_len: equ os_word_scratch - 2  
006c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
006c			os_tok_malloc: equ os_tok_ptr - 2  
006c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
006c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
006c			execscratch: equ os_input-255        ; exec cmd eval buffer  
006c			scratch: equ execscratch-255  
006c			  
006c			os_stack_1: equ scratch - 3       ; stack holding area 1  
006c			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
006c			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
006c			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
006c			  
006c			  
006c			; temp locations for new word processing to save on adding more   
006c			  
006c			os_new_malloc: equ os_stack_4-2  
006c			os_new_parse_len: equ os_new_malloc - 2  
006c			os_new_word_len: equ os_new_parse_len - 2  
006c			os_new_work_ptr: equ os_new_word_len - 2  
006c			os_new_src_ptr: equ os_new_work_ptr - 2  
006c			os_new_exec: equ os_new_src_ptr - 2  
006c			os_new_exec_ptr: equ os_new_exec - 2  
006c			  
006c			; resume memory alloocations....  
006c			  
006c			;os_view_disable: equ os_new_exec_ptr - 1  
006c			os_view_af: equ os_new_exec_ptr - 2  
006c			os_view_hl: equ os_view_af -2  
006c			os_view_de: equ os_view_hl - 2  
006c			os_view_bc: equ os_view_de - 2  
006c			  
006c			; stack checksum word  
006c			if DEBUG_STACK_IMB  
006c				curframe: equ  os_view_de - 5  
006c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
006c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			else  
006c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			endif  
006c			  
006c			; with data stack could see memory filled with junk. need some memory management   
006c			; malloc and free entry points added  
006c			  
006c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
006c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			;heap_end: equ free_list-1  ; Starting address of heap  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			heap_end: equ chk_word-1  ; Starting address of heap  
006c			  
006c			  
006c			;if BASE_KEV   
006c			;heap_start: equ 0800eh  ; Starting address of heap  
006c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;heap_start: equ baseram+15  ; Starting address of heap  
006c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;endif  
006c			  
006c			  
006c			;;;;  
006c			  
006c			  
006c			; change below to point to last memory alloc above  
006c			topusermem:  equ   heap_start  
006c			  
006c			;if BASE_KEV   
006c			;baseusermem: equ 08000h  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;;aseusermem:     equ    12  
006c			;baseusermem:     equ    prompt  
006c			;;baseusermem:     equ    endofcode  
006c			;endif  
006c			  
006c			  
006c			; **********************************************************************  
006c			; **  Constants  
006c			; **********************************************************************  
006c			  
006c			; Constants used by this code module  
006c			kDataReg:   EQU Device_D           ;PIO port A data register  
006c			kContReg:   EQU Device_D+2           ;PIO port A control register  
006c			  
006c			  
006c			portbdata:  equ Device_D+1    ; port b data  
006c			portbctl:   equ Device_D+3    ; port b control  
006c			  
006c			  
006c			;KEY_SHIFT:   equ 5  
006c			;KEY_SYMBOLSHIFT:  equ 6  
006c			  
006c			KEY_SHIFTLOCK: equ 4  
006c			  
006c			  
006c			KEY_UP: equ 5  
006c			KEY_NEXTWORD: equ 6  
006c			KEY_PREVWORD: equ 7  
006c			KEY_BS: equ 8  
006c			KEY_TAB:  equ 9  
006c			KEY_DOWN: equ 10  
006c			KEY_LEFT: equ 11  
006c			KEY_RIGHT: equ 12  
006c			KEY_CR:   equ 13  
006c			KEY_HOME: equ 14  
006c			KEY_END: equ 15  
006c			  
006c			KEY_F1: equ 16  
006c			KEY_F2: equ 17  
006c			KEY_F3: equ 18  
006c			KEY_F4: equ 19  
006c			  
006c			KEY_F5: equ 20  
006c			KEY_F6: equ 21  
006c			KEY_F7: equ 22  
006c			KEY_F8: equ 23  
006c			  
006c			KEY_F9: equ 24  
006c			KEY_F10: equ 25  
006c			KEY_F11: equ 26  
006c			KEY_F12: equ 27  
006c			  
006c			;if DEBUG_KEY  
006c			;	KEY_MATRIX_NO_PRESS: equ '.'  
006c			;	KEY_SHIFT:   equ '.'  
006c			;	KEY_SYMBOLSHIFT:  equ '.'  
006c			;else  
006c				KEY_SHIFT:   equ '~'  
006c				KEY_SYMBOLSHIFT:  equ '~'  
006c				KEY_MATRIX_NO_PRESS: equ '~'  
006c			;endi  
006c			  
006c			  
006c			  
006c			  
006c			; Macro to make adding debug marks easier  
006c			  
006c			DMARK: macro str  
006c				push af  
006c				ld a, (.dmark)  
006c				ld (debug_mark),a  
006c				ld a, (.dmark+1)  
006c				ld (debug_mark+1),a  
006c				ld a, (.dmark+2)  
006c				ld (debug_mark+2),a  
006c				jr .pastdmark  
006c			.dmark: db str  
006c			.pastdmark: pop af  
006c			  
006c			endm  
006c			  
006c			  
006c			; macro to detect for stack imbalances  
006c			  
006c			include "stackimbal.asm"  
006c			; Macro and code to detect stock imbalances 
006c			 
006c			SPPUSH: equ 0 
006c			 
006c			; Add a stack frame which can be checked before return 
006c			 
006c			STACKFRAME: macro onoff frame1 frame2 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c						exx 
006c			 
006c						ld de, frame1 
006c						ld a, d 
006c						ld hl, curframe 
006c						call hexout 
006c						ld a, e 
006c						ld hl, curframe+2 
006c						call hexout 
006c			  
006c						ld hl, frame1 
006c						push hl 
006c						ld hl, frame2 
006c						push hl 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			endm 
006c			 
006c			STACKFRAMECHK: macro onoff frame1 frame2 
006c			 
006c					 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						exx 
006c						; check stack frame SP 
006c			 
006c						ld hl, frame2 
006c						pop de   ; frame2 
006c			 
006c						call cmp16 
006c						jr nz, .spnosame 
006c						 
006c			 
006c						ld hl, frame1 
006c						pop de   ; frame1 
006c			 
006c						call cmp16 
006c						jr z, .spfrsame 
006c			 
006c						.spnosame: call showsperror 
006c			 
006c						.spfrsame: nop 
006c			 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			 
006c			 
006c			endm 
006c			 
006c			 
006c			; for a sub routine, wrap SP collection and comparisons 
006c			 
006c			; Usage: 
006c			; 
006c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
006c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
006c			 
006c			SAVESP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c			 
006c						ld (store_sp+(storeword*4)), sp 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			CHECKSP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c			 
006c						; save SP after last save 
006c				 
006c						ld (store_sp+(storeword*4)+2), sp 
006c			 
006c						push hl 
006c						ld hl, store_sp+(storeword*4) 
006c						call check_stack_sp  
006c						pop hl 
006c			 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			if DEBUG_STACK_IMB 
006c			 
006c			check_stack_sp: 
006c					push de 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					push de 
006c			 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					pop hl 
006c			 
006c			 
006c					; check to see if the same 
006c			 
006c					call cmp16 
006c					jr z, .spsame 
006c			 
006c					; not same 
006c			 
006c					call showsperror 
006c			.spsame: 
006c			 
006c					pop de 
006c			 
006c					ret 
006c			 
006c			.sperr:  db "Stack imbalance",0 
006c			 
006c			 
006c			showsperror: 
006c			 
006c			 
006c				push hl 
006c				push af 
006c				push de 
006c				call clear_display 
006c				ld de, .sperr 
006c				ld a,0 
006c			;	ld de,os_word_scratch 
006c				call str_at_display 
006c				ld a, display_row_1+17 
006c				ld de, debug_mark 
006c				call str_at_display 
006c				ld a, 0 
006c				ld (curframe+4),a 
006c				ld hl, curframe 
006c				ld de, os_word_scratch 
006c				ld a, display_row_4 
006c				call str_at_display 
006c				call update_display 
006c				;call break_point_state 
006c				call cin_wait 
006c			 
006c			;	ld a, ' ' 
006c			;	ld (os_view_disable), a 
006c				call bp_on 
006c				pop de	 
006c				pop af 
006c				pop hl 
006c				CALLMONITOR 
006c				ret 
006c			 
006c			endif 
006c			 
006c			 
006c			 
006c			; eof 
# End of file stackimbal.asm
006c			  
006c			;TODO macro to calc col and row offset into screen  
006c			  
006c			  
006c			  
006c			hardware_init:  
006c			  
006c				  
006c			  
006c					;ld a, 0  
006c					;ld (hardware_diag), a  
006c			  
006c					; clear all the buffers  
006c			  
006c 21 4b fc				ld hl, display_fb1  
006f 22 07 fb				ld (display_fb_active), hl  
0072			  
0072 cd a7 0d				call clear_display  
0075			  
0075 21 09 fb				ld hl, display_fb2  
0078 22 07 fb				ld (display_fb_active), hl  
007b			  
007b cd a7 0d				call clear_display  
007e			  
007e					; init primary frame buffer area  
007e 21 ec fc				ld hl, display_fb0  
0081 22 07 fb				ld (display_fb_active), hl  
0084			  
0084 cd a7 0d				call clear_display  
0087			  
0087			  
0087 cd 4d 6f				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
008a			  
008a cd e4 71			call key_init  
008d cd 53 02			call storage_init  
0090			  
0090				; setup malloc functions  
0090			  
0090				if MALLOC_1  
0090 cd 92 13				call  heap_init  
0093				endif  
0093				if MALLOC_4  
0093					call  heap_init  
0093				endif  
0093			  
0093				; init sound hardware if present  
0093			  
0093				if SOUND_ENABLE  
0093					call sound_init  
0093				endif  
0093			  
0093				; lcd test sequence  
0093					  
0093 cd ca 0d			call update_display  
0096 cd ea 0c			call delay1s  
0099 3e 2b			ld a,'+'  
009b cd ac 0d			call fill_display  
009e cd ca 0d			call update_display  
00a1 cd ea 0c			call delay1s  
00a4 3e 2a			ld a,'*'  
00a6 cd ac 0d			call fill_display  
00a9 cd ca 0d			call update_display  
00ac cd ea 0c			call delay1s  
00af 3e 2d			ld a,'-'  
00b1 cd ac 0d			call fill_display  
00b4 cd ca 0d			call update_display  
00b7 cd ea 0c			call delay1s  
00ba			  
00ba			; boot splash screen  
00ba			if display_cols == 20	  
00ba			        ld a, display_row_1    
00ba			else  
00ba 3e 0a		        ld a, display_row_1 +10   
00bc			endif  
00bc 11 1f 1b			ld de, prom_bootmsg  
00bf cd ba 0d			call str_at_display  
00c2 cd ca 0d			call update_display  
00c5			  
00c5			  
00c5 cd ea 0c			call delay1s  
00c8 cd ea 0c			call delay1s  
00cb			if display_cols == 20	  
00cb			            LD   A, display_row_3+2  
00cb			else  
00cb 3e 5c		            LD   A, display_row_3+12  
00cd			endif  
00cd 11 34 1b			ld de, prom_bootmsg1  
00d0 cd ba 0d			call str_at_display  
00d3			; display debug level  
00d3 3e 78		            LD   A, display_row_4  
00d5 11 1b 00			ld de, debuglevel  
00d8 cd ba 0d			call str_at_display  
00db			  
00db cd ca 0d			call update_display  
00de cd ea 0c			call delay1s  
00e1 cd ea 0c			call delay1s  
00e4			  
00e4			;	ld a, display_row_4+3  
00e4			;	ld de, bootmsg2  
00e4			;	call str_at_display  
00e4			;	call update_display  
00e4			;	call delay1s  
00e4			;	call delay1s  
00e4			  
00e4			; debug mark setup  
00e4			  
00e4 3e 5f		ld a, '_'  
00e6 32 a6 fd		ld (debug_mark),a  
00e9 32 a7 fd		ld (debug_mark+1),a  
00ec 32 a8 fd		ld (debug_mark+2),a  
00ef 3e 00		ld a,0  
00f1 32 a9 fd		ld (debug_mark+3),a  
00f4			  
00f4 c9					ret  
00f5			  
00f5			  
00f5			;bootmsg2:	db "Firmware v0.1",0  
00f5			  
00f5			; a 4x20 lcd  
00f5			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00f5			  
00f5			;if display_cols == 20  
00f5			;	include "firmware_lcd_4x20.asm"  
00f5			;endif  
00f5			  
00f5			;if display_cols == 40  
00f5			;	include "firmware_lcd_4x40.asm"  
00f5			;endif  
00f5			  
00f5			;  
00f5			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00f5			; TODO abstract the bit bang video out interface for dual display  
00f5			; TODO wire video out to tx pin on rc2014 bus  
00f5			  
00f5			; must supply cin, and cin_wait for low level hardware abstraction   
00f5			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00f5			; test scancode  
00f5			  
00f5			;;;;;  
00f5			;;;  
00f5			; Moved out to mini and maxi versions  
00f5			;  
00f5			; include "firmware_key_4x4.asm"  
00f5			; using existing 4 wire x 4 resistor array for input  
00f5			;include "firmware_key_4x10.asm"  
00f5			; need to mod the board for 5 rows due to resistor array  
00f5			;include "firmware_key_5x10.asm"  
00f5			  
00f5			; storage hardware interface  
00f5			  
00f5			; use microchip serial eeprom for storage  
00f5			  
00f5			  
00f5			if STORAGE_SE  
00f5				include "firmware_spi.asm"  
00f5			; my spi protocol (used by storage) 
00f5			 
00f5			; SPI pins 
00f5			 
00f5			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00f5			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00f5			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00f5			 
00f5			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00f5			; chip pin 4 gnd 
00f5			 
00f5			 
00f5			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00f5			SPI_CE1: equ 1      ;    port a1 pin 14  
00f5			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00f5			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00f5			SPI_CE4: equ 4      ; port a4     pin 10 
00f5			 
00f5			; active low AND masks 
00f5			 
00f5			;SPI_CE0_MASK: equ    255-1 
00f5			;SPI_CE1_MASK: equ   255-2 
00f5			;SPI_CE2_MASK: equ   255-4 
00f5			;SPI_CE3_MASK: equ   255-8 
00f5			;SPI_CE4_MASK: equ   255-16 
00f5			SPI_CE_HIGH:  equ 255 
00f5			 
00f5			 
00f5			 
00f5			;  Perform SCLK wait pulse 
00f5			 
00f5			spi_clk: 
00f5 f5				push af 
00f6 3a 9f f9			ld a, (spi_clktime) 
00f9 fe 00			cp 0 
00fb 28 03			jr z, .scskip 
00fd cd cf 0c			call aDelayInMS 
0100			.scskip: 
0100 f1				pop af 
0101 c9				ret 
0102			 
0102			 
0102			 
0102			; TODO store port id for spi device ie dev c 
0102			; TODO store pin for SO 
0102			; TODO store pin for SI 
0102			; TODO store pin for SCLK 
0102			 
0102			; 
0102			 
0102			; ensure that spi bus is in a stable state with default pins  
0102			 
0102			se_stable_spi:   
0102			 
0102				 ; set DI high, CE high , SCLK low 
0102				;ld a, SPI_DI | SPI_CE0 
0102 3e 07			ld a, SPI_DI  
0104 cd 0e 02			call spi_ce_high 
0107 d3 80			 out (storage_adata),a 
0109 32 9c f9			ld (spi_portbyte),a 
010c			 
010c				if DEBUG_SPI 
010c					push hl 
010c					ld l, a 
010c					DMARK "SPI" 
010c					CALLMONITOR 
010c					pop hl 
010c				endif 
010c c9				ret 
010d			 
010d			; byte to send in a 
010d			 
010d			spi_send_byte: 
010d				; save byte to send for bit mask shift out 
010d 4f			        ld c,a 
010e 3a 9c f9			ld a,(spi_portbyte) 
0111				  
0111				; clock out	each bit of the byte msb first 
0111			 
0111 06 08			ld b, 8 
0113			.ssb1: 
0113				; clear so bit  
0113 cb bf			res SPI_DI, a 
0115 cb 11			rl c 
0117				; if bit 7 is set then carry is set 
0117 30 02			jr nc, .ssb2 
0119 cb ff			set SPI_DI,a 
011b			.ssb2:  ; output bit to ensure it is stable 
011b d3 80			out (storage_adata),a 
011d 00				nop 
011e				; clock bit high 
011e cb ef			set SPI_SCLK,a 
0120 d3 80			out (storage_adata),a 
0122 00				nop 
0123 cd f5 00			call spi_clk 
0126				; then low 
0126 cb af			res SPI_SCLK,a 
0128 d3 80			out (storage_adata),a 
012a 00				nop 
012b cd f5 00			call spi_clk 
012e 10 e3			djnz .ssb1 
0130			 
0130 32 9c f9			ld (spi_portbyte),a 
0133 c9				ret 
0134			 
0134			; TODO low level get byte into A on spi 
0134			 
0134			spi_read_byte:  
0134			 
0134				; save byte to send for bit mask shift out 
0134 0e 00		    ld c,0 
0136 3a 9c f9			ld a,(spi_portbyte) 
0139				  
0139				; clock out	each bit of the byte msb first 
0139			 
0139			 
0139				; clock bit high 
0139 cb ef			set SPI_SCLK,a 
013b d3 80			out (storage_adata),a 
013d 00				nop 
013e cd f5 00			call spi_clk 
0141			 
0141			    ; read DO  
0141			 
0141 cb f9		    set 7,c 
0143 db 80			in a,(storage_adata) 
0145 cb 77		    bit SPI_DO,a 
0147 20 02		    jr nz, .b7 
0149 cb b9		    res 7,c 
014b			.b7: 
014b				; then low 
014b cb af			res SPI_SCLK,a 
014d d3 80			out (storage_adata),a 
014f 00				nop 
0150 cd f5 00			call spi_clk 
0153			     
0153			 
0153				; clock bit high 
0153 cb ef			set SPI_SCLK,a 
0155 d3 80			out (storage_adata),a 
0157 00				nop 
0158 cd f5 00			call spi_clk 
015b			 
015b			    ; read DO  
015b			 
015b cb f1		    set 6,c 
015d db 80			in a,(storage_adata) 
015f cb 77		    bit SPI_DO,a 
0161 20 02		    jr nz, .b6 
0163 cb b1		    res 6,c 
0165			.b6: 
0165				; then low 
0165 cb af			res SPI_SCLK,a 
0167 d3 80			out (storage_adata),a 
0169 00				nop 
016a cd f5 00			call spi_clk 
016d			 
016d				; clock bit high 
016d cb ef			set SPI_SCLK,a 
016f d3 80			out (storage_adata),a 
0171 00				nop 
0172 cd f5 00			call spi_clk 
0175			 
0175			 
0175			    ; read DO  
0175			 
0175 cb e9		    set 5,c 
0177 db 80			in a,(storage_adata) 
0179 cb 77		    bit SPI_DO,a 
017b 20 02		    jr nz, .b5 
017d cb a9		    res 5,c 
017f			.b5: 
017f				; then low 
017f cb af			res SPI_SCLK,a 
0181 d3 80			out (storage_adata),a 
0183 00				nop 
0184 cd f5 00			call spi_clk 
0187				; clock bit high 
0187 cb ef			set SPI_SCLK,a 
0189 d3 80			out (storage_adata),a 
018b 00				nop 
018c cd f5 00			call spi_clk 
018f			 
018f			    ; read DO  
018f			 
018f cb e1		    set 4,c 
0191 db 80			in a,(storage_adata) 
0193 cb 77		    bit SPI_DO,a 
0195 20 02		    jr nz, .b4 
0197 cb a1		    res 4,c 
0199			.b4: 
0199				; then low 
0199 cb af			res SPI_SCLK,a 
019b d3 80			out (storage_adata),a 
019d 00				nop 
019e cd f5 00			call spi_clk 
01a1				; clock bit high 
01a1 cb ef			set SPI_SCLK,a 
01a3 d3 80			out (storage_adata),a 
01a5 00				nop 
01a6 cd f5 00			call spi_clk 
01a9			 
01a9			    ; read DO  
01a9			 
01a9 cb d9		    set 3,c 
01ab db 80			in a,(storage_adata) 
01ad cb 77		    bit SPI_DO,a 
01af 20 02		    jr nz, .b3 
01b1 cb 99		    res 3,c 
01b3			.b3: 
01b3				; then low 
01b3 cb af			res SPI_SCLK,a 
01b5 d3 80			out (storage_adata),a 
01b7 00				nop 
01b8 cd f5 00			call spi_clk 
01bb				; clock bit high 
01bb cb ef			set SPI_SCLK,a 
01bd d3 80			out (storage_adata),a 
01bf 00				nop 
01c0 cd f5 00			call spi_clk 
01c3			 
01c3			    ; read DO  
01c3			 
01c3 cb d1		    set 2,c 
01c5 db 80			in a,(storage_adata) 
01c7 cb 77		    bit SPI_DO,a 
01c9 20 02		    jr nz, .b2 
01cb cb 91		    res 2,c 
01cd			.b2: 
01cd				; then low 
01cd cb af			res SPI_SCLK,a 
01cf d3 80			out (storage_adata),a 
01d1 00				nop 
01d2 cd f5 00			call spi_clk 
01d5				; clock bit high 
01d5 cb ef			set SPI_SCLK,a 
01d7 d3 80			out (storage_adata),a 
01d9 00				nop 
01da cd f5 00			call spi_clk 
01dd			 
01dd			    ; read DO  
01dd			 
01dd cb c9		    set 1,c 
01df db 80			in a,(storage_adata) 
01e1 cb 77		    bit SPI_DO,a 
01e3 20 02		    jr nz, .b1 
01e5 cb 89		    res 1,c 
01e7			.b1: 
01e7				; then low 
01e7 cb af			res SPI_SCLK,a 
01e9 d3 80			out (storage_adata),a 
01eb 00				nop 
01ec cd f5 00			call spi_clk 
01ef				; clock bit high 
01ef cb ef			set SPI_SCLK,a 
01f1 d3 80			out (storage_adata),a 
01f3 00				nop 
01f4 cd f5 00			call spi_clk 
01f7			 
01f7			    ; read DO  
01f7			 
01f7 cb c1		    set 0,c 
01f9 db 80			in a,(storage_adata) 
01fb cb 77		    bit SPI_DO,a 
01fd 20 02		    jr nz, .b0 
01ff cb 81		    res 0,c 
0201			.b0: 
0201				; then low 
0201 cb af			res SPI_SCLK,a 
0203 d3 80			out (storage_adata),a 
0205 00				nop 
0206 cd f5 00			call spi_clk 
0209			 
0209			 
0209 32 9c f9			ld (spi_portbyte),a 
020c			 
020c			    ; return byte 
020c 79			    ld a,c 
020d			 
020d			 
020d c9				ret 
020e			 
020e			 
020e			 
020e			spi_ce_high: 
020e			 
020e				if DEBUG_SPI_HARD_CE0 
020e			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
020e					ret 
020e			 
020e				endif 
020e			 
020e			 
020e f5				push af 
020f			 
020f				; send direct ce to port b 
020f 3e ff			ld a, 255 
0211 d3 81			out (storage_bdata), a 
0213			 
0213 f1				pop af 
0214			 
0214				; for port a that shares with spi lines AND the mask 
0214			  
0214				if DEBUG_SPI 
0214					push hl 
0214					ld h, a 
0214				endif 
0214			;	ld c, SPI_CE_HIGH 
0214			;	and c 
0214 cb c7			set SPI_CE0, a 
0216 cb cf			set SPI_CE1, a 
0218 cb d7			set SPI_CE2, a 
021a cb df			set SPI_CE3, a 
021c cb e7			set SPI_CE4, a 
021e			 
021e				if DEBUG_SPI 
021e					ld l, a 
021e					DMARK "CEh" 
021e					CALLMONITOR 
021e					pop hl 
021e				endif 
021e c9				ret 
021f			 
021f			 
021f			spi_ce_low: 
021f			 
021f				if DEBUG_SPI_HARD_CE0 
021f			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
021f					ret 
021f			 
021f				endif 
021f			 
021f c5				push bc 
0220 f5				push af 
0221			 
0221				; send direct ce to port b 
0221 3a 9e f9			ld a, (spi_cartdev) 
0224 d3 81			out (storage_bdata), a 
0226			 
0226			 
0226			 
0226				; for port a that shares with spi lines AND the mask 
0226			 
0226 3a 9b f9			ld a, (spi_device)  
0229 4f				ld c, a 
022a			 
022a f1				pop af 
022b			 
022b				; detect CEx 
022b			 
022b				if DEBUG_SPI 
022b					push hl 
022b					ld h, a 
022b				endif 
022b			 
022b cb 41			bit SPI_CE0, c 
022d 20 04			jr nz, .cel1 
022f cb 87			res SPI_CE0, a 
0231 18 1e			jr .celn 
0233			.cel1: 
0233 cb 49			bit SPI_CE1, c 
0235 20 04			jr nz, .cel2 
0237 cb 8f			res SPI_CE1, a 
0239 18 16			jr .celn 
023b			.cel2: 
023b cb 51			bit SPI_CE2, c 
023d 20 04			jr nz, .cel3 
023f cb 97			res SPI_CE2, a 
0241 18 0e			jr .celn 
0243			.cel3: 
0243 cb 59			bit SPI_CE3, c 
0245 20 04			jr nz, .cel4 
0247 cb 9f			res SPI_CE3, a 
0249 18 06			jr .celn 
024b			.cel4: 
024b cb 61			bit SPI_CE4, c 
024d 20 02			jr nz, .celn 
024f cb a7			res SPI_CE4, a 
0251			.celn: 
0251			 
0251			 
0251			 
0251			;	add c 
0251			 
0251				if DEBUG_SPI 
0251					ld l, a 
0251					DMARK "CEl" 
0251					CALLMONITOR 
0251					pop hl 
0251				endif 
0251 c1				pop bc 
0252 c9				ret 
0253			 
0253			 
0253			 
0253			; eof 
0253			 
0253			 
0253			 
0253			 
0253			 
# End of file firmware_spi.asm
0253				include "firmware_seeprom.asm"  
0253			; 
0253			; persisent storage interface via microchip serial eeprom 
0253			 
0253			; port a pio 2 
0253			; pa 7 - si 
0253			; pa 6 - sclk  
0253			; pa 5 - so 
0253			; pa 4 - cs 
0253			; pa 3 - cs 
0253			; pa 2 - cs 
0253			; pa 1 - cs 
0253			; pa 0 - cs 
0253			; 
0253			; TODO get block 
0253			; TODO save block 
0253			; TODO load file 
0253			; TODO save file 
0253			; TODO get dir  
0253			 
0253			;  
0253			storage_adata: equ Device_C    ; device c port a - onboard storage 
0253			storage_actl: equ Device_C+2     ; device c port a 
0253			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0253			storage_bctl: equ Device_C+3     ; device c port b 
0253			 
0253			 
0253			; TODO move these to hardware driver file 
0253			 
0253			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0253			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0253			; storage bank file system format 
0253			; 
0253			; first page of bank: 
0253			; 	addr 0 - status check 
0253			;       addr 1 - write protect flag 
0253			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0253			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0253			;         TODO see if scanning whole of for available next file id is fast enough 
0253			;	addr 4 > zero term string of bank label 
0253			; 
0253			;        
0253			;  
0253			; first page of any file: 
0253			;      byte 0 - file id  
0253			;      byte 1-17 - fixed file name  
0253			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0253			; 
0253			; other pages of any file: 
0253			;      byte 0 - file id 
0253			;      byte 1> - file data 
0253			; 
0253			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0253			;  
0253			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0253			 
0253			 
0253			;storage_so_bit: 5 
0253			;storage_si_bit: 7 
0253			;storage_sclk_bit: 6 
0253			  
0253			 
0253			; init storage pio 
0253			 
0253			storage_init: 
0253			 
0253			 
0253					; set default SPI clk pulse time as disabled 
0253			 
0253 3e 00				ld a, 0 
0255 32 9f f9				ld (spi_clktime), a 
0258			 
0258					; init hardware 
0258			 
0258 3e cf		            LD   A, 11001111b 
025a d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
025c 3e 00		            LD   A, 00000000b 
025e cb f7			set SPI_DO,a 
0260			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
0260 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0262			 
0262 3e cf		            LD   A, 11001111b 
0264 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
0266 3e 00		            LD   A, 00000000b 
0268 d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
026a			 
026a				; set all external spi devices off  
026a 3e ff			ld a, 255 
026c 32 9b f9			ld (spi_device), a 
026f 32 9e f9			ld (spi_cartdev), a 
0272			 
0272					; ensure the spi bus is in a default stable state 
0272 cd 02 01				call se_stable_spi 
0275			 
0275			; TODO scan spi bus and gather which storage banks are present 
0275			 
0275			; populate store_bank_active  
0275			; for each ce line activate and attempt to write first byte of bank and read back 
0275			; if zero is returned then bank is empty 
0275			;   
0275			; 
0275			 
0275					; init file extent cache to save on slow reads 
0275			 
0275			;	ld hl, store_filecache 
0275			;	ld de, 0 
0275			;	ld hl,(de)	 
0275			 
0275			 
0275 c9			    ret 
0276			 
0276			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
0276			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
0276			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
0276			 
0276			; INSTRUCTION SET 
0276			; READ 0000 0011 Read data from memory array beginning at selected address 
0276			; WRITE 0000 0010 Write data to memory array beginning at selected address 
0276			; WREN 0000 0110 Set the write enable latch (enable write operations) 
0276			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
0276			; RDSR 0000 0101 Read STATUS register 
0276			; WRSR 0000 0001 Write STATUS register 
0276			; PE 0100 0010 Page Erase – erase one page in memory array 
0276			; SE 1101 1000 Sector Erase – erase one sector in memory array 
0276			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
0276			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
0276			 
0276			; TODO send byte steam for page without setting the address for every single byte 
0276			; TODO read byte  
0276			 
0276			; byte in a 
0276			; address in hl  
0276			se_writebyte: 
0276			        
0276			    ;   ld c, a 
0276 f5			        push af 
0277 e5			        push hl 
0278			 
0278			    ; initi write mode 
0278			    ; 
0278			    ;CS low 
0278			 
0278 3a 9c f9		       ld a,(spi_portbyte) 
027b cd 1f 02			call spi_ce_low 
027e			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
027e d3 80		       out (storage_adata),a 
0280 32 9c f9		       ld (spi_portbyte), a 
0283			 
0283			    ;clock out wren instruction 
0283			 
0283 3e 06		    ld a, store_wren_ins 
0285 cd 0d 01		    call spi_send_byte  
0288			 
0288			    ;cs high to enable write latch 
0288			 
0288 3a 9c f9		       ld a,(spi_portbyte) 
028b cd 0e 02			call spi_ce_high 
028e			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
028e d3 80		       out (storage_adata),a 
0290 32 9c f9		       ld (spi_portbyte), a 
0293			 
0293 00				nop 
0294			    ; 
0294			    ; intial write data 
0294			    ; 
0294			    ; cs low 
0294			     
0294 3a 9c f9		       ld a,(spi_portbyte) 
0297 cd 1f 02			call spi_ce_low 
029a			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
029a d3 80		       out (storage_adata),a 
029c 32 9c f9		       ld (spi_portbyte), a 
029f			 
029f			    ; clock out write instruction 
029f			     
029f 3e 02		    ld a, store_write_ins  
02a1 cd 0d 01		    call spi_send_byte  
02a4			 
02a4			    ; clock out address (depending on address size) 
02a4			     
02a4 e1			    pop hl 
02a5 7c			    ld a,h    ; address out msb first 
02a6 cd 0d 01		    call spi_send_byte  
02a9 7d			    ld a,l 
02aa cd 0d 01		    call spi_send_byte  
02ad			 
02ad			    ; clock out byte(s) for page 
02ad			 
02ad f1			    pop af 
02ae cd 0d 01		    call spi_send_byte  
02b1			 
02b1			    ; end write with ce high 
02b1 3a 9c f9		       ld a,(spi_portbyte) 
02b4			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02b4 cd 0e 02			call spi_ce_high 
02b7 d3 80		       out (storage_adata),a 
02b9 32 9c f9		       ld (spi_portbyte), a 
02bc			 
02bc				; pause for internal write cycle 
02bc 3e 0a			ld a, 10 
02be cd cf 0c			call aDelayInMS 
02c1 c9			    ret 
02c2			 
02c2			; buffer to write in de 
02c2			; address in hl  
02c2			se_writepage: 
02c2			        
02c2			    ;   ld c, a 
02c2 d5				push de 
02c3 e5			        push hl 
02c4			 
02c4			    ; initi write mode 
02c4			    ; 
02c4			    ;CS low 
02c4			 
02c4 3a 9c f9		       ld a,(spi_portbyte) 
02c7 cd 1f 02			call spi_ce_low 
02ca			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02ca d3 80		       out (storage_adata),a 
02cc 32 9c f9		       ld (spi_portbyte), a 
02cf			 
02cf			    ;clock out wren instruction 
02cf			 
02cf 3e 06		    ld a, store_wren_ins 
02d1 cd 0d 01		    call spi_send_byte  
02d4			 
02d4			    ;cs high to enable write latch 
02d4			 
02d4 3a 9c f9		       ld a,(spi_portbyte) 
02d7 cd 0e 02			call spi_ce_high 
02da			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02da d3 80		       out (storage_adata),a 
02dc 32 9c f9		       ld (spi_portbyte), a 
02df			 
02df 00				nop 
02e0			    ; 
02e0			    ; intial write data 
02e0			    ; 
02e0			    ; cs low 
02e0			     
02e0 3a 9c f9		       ld a,(spi_portbyte) 
02e3			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02e3 cd 1f 02			call spi_ce_low 
02e6 d3 80		       out (storage_adata),a 
02e8 32 9c f9		       ld (spi_portbyte), a 
02eb			 
02eb			    ; clock out write instruction 
02eb			     
02eb 3e 02		    ld a, store_write_ins  
02ed cd 0d 01		    call spi_send_byte  
02f0			 
02f0			    ; clock out address (depending on address size) 
02f0			     
02f0 e1			    pop hl 
02f1 7c			    ld a,h    ; address out msb first 
02f2 cd 0d 01		    call spi_send_byte  
02f5 7d			    ld a,l 
02f6 cd 0d 01		    call spi_send_byte  
02f9			 
02f9			    ; clock out byte(s) for page 
02f9			 
02f9 e1				pop hl 
02fa 06 40			ld b, STORE_BLOCK_PHY 
02fc			.bytewrite: 
02fc			 
02fc 7e				ld a,(hl) 
02fd e5			    push hl 
02fe c5				push bc 
02ff cd 0d 01		    call spi_send_byte  
0302 c1				pop bc 
0303 e1				pop hl 
0304			 
0304			    ; end write with ce high 
0304 3a 9c f9		       ld a,(spi_portbyte) 
0307 cd 0e 02			call spi_ce_high 
030a			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
030a d3 80		       out (storage_adata),a 
030c 32 9c f9		       ld (spi_portbyte), a 
030f			 
030f 23				inc hl 
0310 10 ea			djnz .bytewrite 
0312			 
0312				; pause for internal write cycle 
0312 3e 64			ld a, 100 
0314 cd cf 0c			call aDelayInMS 
0317 c9			    ret 
0318			; returns byte in a 
0318			; address in hl  
0318			se_readbyte: 
0318 d5				push de 
0319 c5				push bc 
031a			 
031a			    ;   ld c, a 
031a e5			        push hl 
031b			 
031b			    ; initi write mode 
031b			    ; 
031b			    ;CS low 
031b			 
031b 3a 9c f9		       ld a,(spi_portbyte) 
031e cd 1f 02			call spi_ce_low 
0321			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0321 d3 80		       out (storage_adata),a 
0323 32 9c f9		       ld (spi_portbyte), a 
0326			 
0326			    ;clock out wren instruction 
0326			 
0326 3e 03		    ld a, store_read_ins 
0328 cd 0d 01		    call spi_send_byte  
032b			 
032b			 
032b			    ; clock out address (depending on address size) 
032b			     
032b e1			    pop hl 
032c 7c			    ld a,h    ; address out msb first 
032d cd 0d 01		    call spi_send_byte  
0330 7d			    ld a,l 
0331 cd 0d 01		    call spi_send_byte  
0334			 
0334			    ; clock in byte(s) for page 
0334			 
0334 cd 34 01		    call spi_read_byte  
0337 f5				push af 
0338			 
0338			    ; end write with ce high 
0338 3a 9c f9		       ld a,(spi_portbyte) 
033b			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
033b cd 0e 02			call spi_ce_high 
033e d3 80		       out (storage_adata),a 
0340 32 9c f9		       ld (spi_portbyte), a 
0343			 
0343 f1				pop af 
0344			 
0344 c1				pop bc 
0345 d1				pop de 
0346			 
0346 c9			    ret 
0347			 
0347			if DEBUG_STORESE 
0347			 
0347			storageput:  
0347			 
0347			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
0347			 
0347 21 fe f0			ld hl,scratch+2 
034a cd 9a 12			call get_word_hl 
034d			 
034d				; stuff it here for the moment as it will be overwritten later anyway 
034d			 
034d 22 1f f4			ld (os_cur_ptr),hl	 
0350			 
0350			 
0350			; get pointer to start of string 
0350			 
0350 21 03 f1			ld hl, scratch+7 
0353			 
0353			; loop writing char of string to eeprom 
0353			 
0353 7e			.writestr:	ld a,(hl) 
0354 fe 00				cp 0 
0356 28 12				jr z, .wsdone		; done writing 
0358 e5					push hl 
0359 2a 1f f4				ld hl,(os_cur_ptr) 
035c cd 76 02				call se_writebyte 
035f			 
035f 2a 1f f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0362 23					inc hl 
0363 22 1f f4				ld (os_cur_ptr),hl 
0366			 
0366					; restore string pointer and get next char 
0366			 
0366 e1					pop hl 
0367 23					inc hl 
0368 18 e9				jr .writestr 
036a			 
036a			 
036a			 
036a			.wsdone: 
036a			 
036a			 
036a			; when done load first page into a buffer  
036a			 
036a 21 00 80				ld hl,08000h		; start in ram 
036d 22 1f f4				ld (os_cur_ptr),hl 
0370 21 00 00				ld hl, 0		 ; start of page 
0373 22 24 f1				ld (scratch+40),hl	; hang on to it 
0376			 
0376 06 80				ld b, 128		; actually get more then one page 
0378 c5			.wsload:	push bc 
0379 2a 24 f1				ld hl,(scratch+40) 
037c e5					push hl 
037d cd 18 03				call se_readbyte 
0380			 
0380					; a now as the byte 
0380			 
0380 2a 1f f4				ld hl,(os_cur_ptr) 
0383 77					ld (hl),a 
0384					; inc next buffer area 
0384 23					inc hl 
0385 22 1f f4				ld (os_cur_ptr),hl 
0388			 
0388					; get eeprom position, inc and save for next round 
0388 e1					pop hl		 
0389 23					inc hl 
038a 22 24 f1				ld (scratch+40),hl 
038d c1					pop bc 
038e 10 e8				djnz .wsload 
0390			 
0390			; set 'd' pointer to start of buffer 
0390			 
0390 21 00 80				ld hl,08000h 
0393 22 1f f4				ld (os_cur_ptr),hl 
0396			 
0396			 
0396 c9			ret 
0397			 
0397			 
0397 c9			storageread: ret 
0398			 
0398			 
0398			 
0398			 
0398			 
0398			 
0398			endif 
0398			 
0398			 
0398			 
# End of file firmware_seeprom.asm
0398			else  
0398			   ; create some stubs for the labels  
0398			se_readbyte: ret  
0398			se_writebyte: ret  
0398			storage_init: ret  
0398			  
0398			endif  
0398			  
0398			; use cf card for storage - throwing timeout errors. Hardware or software?????  
0398			;include "firmware_cf.asm"  
0398			  
0398			; load up high level storage hardward abstractions  
0398			include "firmware_storage.asm"  
0398			 
0398			; persisent storage hardware abstraction layer  
0398			 
0398			 
0398			 
0398			; Block 0 on storage is a config state 
0398			 
0398			 
0398			 
0398			; TODO add read phy block and write phy block functions 
0398			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
0398			 
0398			; Abstraction layer  
0398			 
0398			; Logocial block size is same size as physical size - using tape concept 
0398			 
0398			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
0398			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
0398			 
0398			 
0398			 
0398			; Filesystem layout (Logical layout) 
0398			; 
0398			; Block 0 - Bank config  
0398			; 
0398			;      Byte - 0 file id counter 
0398			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0398			;      Byte - 3-20 zero terminated bank label 
0398			; 
0398			; Block 1 > File storage 
0398			; 
0398			;      Byte 0 file id    - block 0 file details 
0398			;      Byte 1 block id - block 0 is file  
0398			;            Byte 2-15 - File name 
0398			; 
0398			;       - to end of block data 
0398			; 
0398			 
0398			; Get ID for the file named in pointer held HL 
0398			; Returns ID in HL = 255 if no file found 
0398			 
0398			storage_getid: 
0398			 
0398 22 ae f9			ld (store_tmp1), hl 
039b			 
039b				if DEBUG_STORESE 
039b					DMARK "SGI" 
039b f5				push af  
039c 3a b0 03			ld a, (.dmark)  
039f 32 a6 fd			ld (debug_mark),a  
03a2 3a b1 03			ld a, (.dmark+1)  
03a5 32 a7 fd			ld (debug_mark+1),a  
03a8 3a b2 03			ld a, (.dmark+2)  
03ab 32 a8 fd			ld (debug_mark+2),a  
03ae 18 03			jr .pastdmark  
03b0 ..			.dmark: db "SGI"  
03b3 f1			.pastdmark: pop af  
03b4			endm  
# End of macro DMARK
03b4					CALLMONITOR 
03b4 cd aa fd			call debug_vector  
03b7				endm  
# End of macro CALLMONITOR
03b7				endif 
03b7				; get block 0 and set counter for number of files to scan 
03b7			 
03b7 cd 22 05			call storage_get_block_0 
03ba			 
03ba 3a b5 f9			ld a, (store_page) 
03bd 47				ld b, a 
03be			 
03be				; get extent 0 of each file id 
03be			 
03be				if DEBUG_STORESE 
03be					DMARK "SGc" 
03be f5				push af  
03bf 3a d3 03			ld a, (.dmark)  
03c2 32 a6 fd			ld (debug_mark),a  
03c5 3a d4 03			ld a, (.dmark+1)  
03c8 32 a7 fd			ld (debug_mark+1),a  
03cb 3a d5 03			ld a, (.dmark+2)  
03ce 32 a8 fd			ld (debug_mark+2),a  
03d1 18 03			jr .pastdmark  
03d3 ..			.dmark: db "SGc"  
03d6 f1			.pastdmark: pop af  
03d7			endm  
# End of macro DMARK
03d7					CALLMONITOR 
03d7 cd aa fd			call debug_vector  
03da				endm  
# End of macro CALLMONITOR
03da				endif 
03da 60			.getloop:	ld h, b 
03db 2e 00				ld l, 0 
03dd c5					push bc 
03de			 
03de 11 b5 f9				ld de, store_page 
03e1				if DEBUG_STORESE 
03e1					DMARK "SGr" 
03e1 f5				push af  
03e2 3a f6 03			ld a, (.dmark)  
03e5 32 a6 fd			ld (debug_mark),a  
03e8 3a f7 03			ld a, (.dmark+1)  
03eb 32 a7 fd			ld (debug_mark+1),a  
03ee 3a f8 03			ld a, (.dmark+2)  
03f1 32 a8 fd			ld (debug_mark+2),a  
03f4 18 03			jr .pastdmark  
03f6 ..			.dmark: db "SGr"  
03f9 f1			.pastdmark: pop af  
03fa			endm  
# End of macro DMARK
03fa					CALLMONITOR 
03fa cd aa fd			call debug_vector  
03fd				endm  
# End of macro CALLMONITOR
03fd				endif 
03fd cd ca 09				call storage_read 
0400 cd 04 10				call ishlzero 
0403 28 2d				jr z, .gap 
0405					 
0405					; have a file name read. Is it one we want. 
0405			 
0405 2a ae f9				ld hl, (store_tmp1) 
0408 11 b8 f9				ld de, store_page+3   ; file name 
040b			 
040b				if DEBUG_STORESE 
040b					DMARK "SGc" 
040b f5				push af  
040c 3a 20 04			ld a, (.dmark)  
040f 32 a6 fd			ld (debug_mark),a  
0412 3a 21 04			ld a, (.dmark+1)  
0415 32 a7 fd			ld (debug_mark+1),a  
0418 3a 22 04			ld a, (.dmark+2)  
041b 32 a8 fd			ld (debug_mark+2),a  
041e 18 03			jr .pastdmark  
0420 ..			.dmark: db "SGc"  
0423 f1			.pastdmark: pop af  
0424			endm  
# End of macro DMARK
0424					CALLMONITOR 
0424 cd aa fd			call debug_vector  
0427				endm  
# End of macro CALLMONITOR
0427				endif 
0427 cd 79 13				call strcmp 
042a 20 06				jr nz, .gap   ; not this one 
042c			 
042c c1				        pop bc 
042d			 
042d 26 00				ld h, 0 
042f 68					ld l, b 
0430 18 22				jr .getdone 
0432						 
0432			 
0432			 
0432			 
0432			.gap: 
0432				if DEBUG_STORESE 
0432					DMARK "SGg" 
0432 f5				push af  
0433 3a 47 04			ld a, (.dmark)  
0436 32 a6 fd			ld (debug_mark),a  
0439 3a 48 04			ld a, (.dmark+1)  
043c 32 a7 fd			ld (debug_mark+1),a  
043f 3a 49 04			ld a, (.dmark+2)  
0442 32 a8 fd			ld (debug_mark+2),a  
0445 18 03			jr .pastdmark  
0447 ..			.dmark: db "SGg"  
044a f1			.pastdmark: pop af  
044b			endm  
# End of macro DMARK
044b					CALLMONITOR 
044b cd aa fd			call debug_vector  
044e				endm  
# End of macro CALLMONITOR
044e				endif 
044e			 
044e c1					pop bc 
044f 10 89				djnz .getloop 
0451 21 ff 00				ld hl, 255 
0454			.getdone: 
0454			 
0454				if DEBUG_STORESE 
0454					DMARK "SGe" 
0454 f5				push af  
0455 3a 69 04			ld a, (.dmark)  
0458 32 a6 fd			ld (debug_mark),a  
045b 3a 6a 04			ld a, (.dmark+1)  
045e 32 a7 fd			ld (debug_mark+1),a  
0461 3a 6b 04			ld a, (.dmark+2)  
0464 32 a8 fd			ld (debug_mark+2),a  
0467 18 03			jr .pastdmark  
0469 ..			.dmark: db "SGe"  
046c f1			.pastdmark: pop af  
046d			endm  
# End of macro DMARK
046d					CALLMONITOR 
046d cd aa fd			call debug_vector  
0470				endm  
# End of macro CALLMONITOR
0470				endif 
0470			 
0470 c9				ret 
0471			 
0471			 
0471			 
0471			 
0471			 
0471			 
0471			 
0471			 
0471			; Read Block 
0471			; ---------- 
0471			; 
0471			; With current bank 
0471			;  
0471			; Get block number to read 
0471			; Load physical blocks starting at start block into buffer 
0471			 
0471			; de points to buffer to use 
0471			; hl holds logical block number  
0471			 
0471			storage_read_block: 
0471			 
0471				; TODO bank selection 
0471			 
0471				; for each of the physical blocks read it into the buffer 
0471 06 40			ld b, STORE_BLOCK_PHY 
0473			 
0473				if DEBUG_STORESE 
0473 d5					push de 
0474				endif 
0474				 
0474			.rl1:    
0474			 
0474				; read physical block at hl into de 
0474			        ; increment hl and de to next read position on exit 
0474			 
0474 e5				push hl 
0475 d5				push de	 
0476 c5				push bc 
0477			;	if DEBUG_STORESE 
0477			;		push af 
0477			;		ld a, 'R' 
0477			;		ld (debug_mark),a 
0477			;		pop af 
0477			;		CALLMONITOR 
0477			;	endif 
0477 cd 18 03			call se_readbyte 
047a			;	if DEBUG_STORESE 
047a			;		ld a,(spi_portbyte) 
047a			;		ld l, a 
047a			;		push af 
047a			;		ld a, '1' 
047a			;		ld (debug_mark),a 
047a			;		pop af 
047a			;		CALLMONITOR 
047a			;	endif 
047a c1				pop bc 
047b d1				pop de 
047c e1				pop hl 
047d 12				ld (de),a 
047e 23				inc hl 
047f 13				inc de 
0480			 
0480			;	if DEBUG_STORESE 
0480			;		push af 
0480			;		ld a, 'r' 
0480			;		ld (debug_mark),a 
0480			;		pop af 
0480			;		CALLMONITOR 
0480			;	endif 
0480			 
0480 10 f2			djnz .rl1 
0482			 
0482				if DEBUG_STORESE 
0482					DMARK "SRB" 
0482 f5				push af  
0483 3a 97 04			ld a, (.dmark)  
0486 32 a6 fd			ld (debug_mark),a  
0489 3a 98 04			ld a, (.dmark+1)  
048c 32 a7 fd			ld (debug_mark+1),a  
048f 3a 99 04			ld a, (.dmark+2)  
0492 32 a8 fd			ld (debug_mark+2),a  
0495 18 03			jr .pastdmark  
0497 ..			.dmark: db "SRB"  
049a f1			.pastdmark: pop af  
049b			endm  
# End of macro DMARK
049b d1					pop de 
049c			; 
049c			;		push af 
049c			;		ld a, 'R' 
049c			;		ld (debug_mark),a 
049c			;		pop af 
049c					CALLMONITOR 
049c cd aa fd			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f c9				ret	 
04a0				 
04a0			 
04a0			; File Size 
04a0			; --------- 
04a0			; 
04a0			;   hl file id 
04a0			; 
04a0			;  returns in hl the number of blocks 
04a0			 
04a0			storage_file_size: 
04a0 5d				ld e, l 
04a1 16 00			ld d, 0 
04a3 21 40 00			ld hl, STORE_BLOCK_PHY 
04a6					if DEBUG_FORTH_WORDS 
04a6						DMARK "SIZ" 
04a6 f5				push af  
04a7 3a bb 04			ld a, (.dmark)  
04aa 32 a6 fd			ld (debug_mark),a  
04ad 3a bc 04			ld a, (.dmark+1)  
04b0 32 a7 fd			ld (debug_mark+1),a  
04b3 3a bd 04			ld a, (.dmark+2)  
04b6 32 a8 fd			ld (debug_mark+2),a  
04b9 18 03			jr .pastdmark  
04bb ..			.dmark: db "SIZ"  
04be f1			.pastdmark: pop af  
04bf			endm  
# End of macro DMARK
04bf						CALLMONITOR 
04bf cd aa fd			call debug_vector  
04c2				endm  
# End of macro CALLMONITOR
04c2					endif 
04c2 cd a4 07			call storage_findnextid 
04c5			 
04c5 cd 04 10			call ishlzero 
04c8			;	ld a, l 
04c8			;	add h 
04c8			;	cp 0 
04c8 c8				ret z			; block not found so EOF 
04c9			 
04c9 11 b5 f9			ld de, store_page 
04cc cd 71 04			call storage_read_block 
04cf			 
04cf 3a b7 f9			ld a, (store_page+2)	 ; get extent count 
04d2 6f				ld l, a 
04d3 26 00			ld h, 0 
04d5 c9			 	ret 
04d6			 
04d6			 
04d6			; Write Block 
04d6			; ----------- 
04d6			; 
04d6			; With current bank 
04d6			;  
04d6			; Get block number to write 
04d6			; Write physical blocks starting at start block from buffer 
04d6			  
04d6			storage_write_block: 
04d6				; TODO bank selection 
04d6			 
04d6				; for each of the physical blocks read it into the buffer 
04d6 06 40			ld b, STORE_BLOCK_PHY 
04d8			 
04d8				if DEBUG_STORESE 
04d8					DMARK "SWB" 
04d8 f5				push af  
04d9 3a ed 04			ld a, (.dmark)  
04dc 32 a6 fd			ld (debug_mark),a  
04df 3a ee 04			ld a, (.dmark+1)  
04e2 32 a7 fd			ld (debug_mark+1),a  
04e5 3a ef 04			ld a, (.dmark+2)  
04e8 32 a8 fd			ld (debug_mark+2),a  
04eb 18 03			jr .pastdmark  
04ed ..			.dmark: db "SWB"  
04f0 f1			.pastdmark: pop af  
04f1			endm  
# End of macro DMARK
04f1			 
04f1					;push af 
04f1					;ld a, 'W' 
04f1					;ld (debug_mark),a 
04f1					;pop af 
04f1					CALLMONITOR 
04f1 cd aa fd			call debug_vector  
04f4				endm  
# End of macro CALLMONITOR
04f4				endif 
04f4			 
04f4			; might not be working 
04f4			;	call se_writepage 
04f4			 
04f4			;	ret 
04f4			; 
04f4			 
04f4			 
04f4			 
04f4			.wl1:    
04f4			 
04f4				; read physical block at hl into de 
04f4			        ; increment hl and de to next read position on exit 
04f4			 
04f4 e5				push hl 
04f5 d5				push de	 
04f6 c5				push bc 
04f7 1a				ld a,(de) 
04f8				;if DEBUG_STORESE 
04f8			;		push af 
04f8			;		ld a, 'W' 
04f8			;		ld (debug_mark),a 
04f8			;		pop af 
04f8			;		CALLMONITOR 
04f8			;	endif 
04f8 cd 76 02			call se_writebyte 
04fb			;	call delay250ms 
04fb 00				nop 
04fc 00				nop 
04fd 00				nop 
04fe			;	if DEBUG_STORESE 
04fe			;		push af 
04fe			;		ld a, 'w' 
04fe			;		ld (debug_mark),a 
04fe			;		pop af 
04fe			;		CALLMONITOR 
04fe			;	endif 
04fe c1				pop bc 
04ff d1				pop de 
0500 e1				pop hl 
0501 23				inc hl 
0502 13				inc de 
0503			 
0503			 
0503 10 ef			djnz .wl1 
0505			 
0505				if DEBUG_STORESE 
0505					DMARK "SW2" 
0505 f5				push af  
0506 3a 1a 05			ld a, (.dmark)  
0509 32 a6 fd			ld (debug_mark),a  
050c 3a 1b 05			ld a, (.dmark+1)  
050f 32 a7 fd			ld (debug_mark+1),a  
0512 3a 1c 05			ld a, (.dmark+2)  
0515 32 a8 fd			ld (debug_mark+2),a  
0518 18 03			jr .pastdmark  
051a ..			.dmark: db "SW2"  
051d f1			.pastdmark: pop af  
051e			endm  
# End of macro DMARK
051e			 
051e					;push af 
051e					;ld a, 'W' 
051e					;ld (debug_mark),a 
051e					;pop af 
051e					CALLMONITOR 
051e cd aa fd			call debug_vector  
0521				endm  
# End of macro CALLMONITOR
0521				endif 
0521 c9				ret	 
0522			 
0522			; Init bank 
0522			; --------- 
0522			; 
0522			; With current bank 
0522			; 
0522			; Setup block 0 config 
0522			;     Set 0 file id counter 
0522			;     Set formatted byte pattern 
0522			;     Zero out bank label 
0522			;      
0522			; For every logical block write 0-1 byte as null 
0522			 
0522			storage_get_block_0: 
0522			 
0522				; TODO check presence 
0522			 
0522				; get block 0 config 
0522			 
0522 21 00 00			ld hl, 0 
0525 11 b5 f9			ld de, store_page 
0528 cd 71 04			call storage_read_block 
052b			 
052b				if DEBUG_STORESE 
052b					DMARK "SB0" 
052b f5				push af  
052c 3a 40 05			ld a, (.dmark)  
052f 32 a6 fd			ld (debug_mark),a  
0532 3a 41 05			ld a, (.dmark+1)  
0535 32 a7 fd			ld (debug_mark+1),a  
0538 3a 42 05			ld a, (.dmark+2)  
053b 32 a8 fd			ld (debug_mark+2),a  
053e 18 03			jr .pastdmark  
0540 ..			.dmark: db "SB0"  
0543 f1			.pastdmark: pop af  
0544			endm  
# End of macro DMARK
0544 11 b5 f9				ld de, store_page 
0547			;		push af 
0547			;		ld a, 'i' 
0547			;		ld (debug_mark),a 
0547			;		pop af 
0547					CALLMONITOR 
0547 cd aa fd			call debug_vector  
054a				endm  
# End of macro CALLMONITOR
054a				endif 
054a			 
054a				; is this area formatted? 
054a			 
054a			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
054a 2a b6 f9			ld hl, (store_page+1) 
054d 3e 80			ld a,0x80 
054f bd				cp l 
0550 20 22			jr nz, .ininotformatted 
0552				; do a double check 
0552 3e 27			ld a, 0x27 
0554 bc				cp h 
0555 20 1d			jr nz, .ininotformatted 
0557			 
0557				; formatted then 
0557			 
0557				if DEBUG_STORESE 
0557					DMARK "SB1" 
0557 f5				push af  
0558 3a 6c 05			ld a, (.dmark)  
055b 32 a6 fd			ld (debug_mark),a  
055e 3a 6d 05			ld a, (.dmark+1)  
0561 32 a7 fd			ld (debug_mark+1),a  
0564 3a 6e 05			ld a, (.dmark+2)  
0567 32 a8 fd			ld (debug_mark+2),a  
056a 18 03			jr .pastdmark  
056c ..			.dmark: db "SB1"  
056f f1			.pastdmark: pop af  
0570			endm  
# End of macro DMARK
0570					;push af 
0570					;ld a, 'I' 
0570					;ld (debug_mark),a 
0570					;pop af 
0570					CALLMONITOR 
0570 cd aa fd			call debug_vector  
0573				endm  
# End of macro CALLMONITOR
0573				endif 
0573 c9				ret 
0574			 
0574			.ininotformatted: 
0574				; bank not formatted so poke various bits to make sure 
0574			 
0574				if DEBUG_STORESE 
0574					DMARK "SB2" 
0574 f5				push af  
0575 3a 89 05			ld a, (.dmark)  
0578 32 a6 fd			ld (debug_mark),a  
057b 3a 8a 05			ld a, (.dmark+1)  
057e 32 a7 fd			ld (debug_mark+1),a  
0581 3a 8b 05			ld a, (.dmark+2)  
0584 32 a8 fd			ld (debug_mark+2),a  
0587 18 03			jr .pastdmark  
0589 ..			.dmark: db "SB2"  
058c f1			.pastdmark: pop af  
058d			endm  
# End of macro DMARK
058d					;push af 
058d					;ld a, 'f' 
058d					;ld (debug_mark),a 
058d					;pop af 
058d					CALLMONITOR 
058d cd aa fd			call debug_vector  
0590				endm  
# End of macro CALLMONITOR
0590				endif 
0590			 
0590 cd ad 0c			call storage_clear_page 
0593			 
0593 21 b5 f9			ld hl, store_page 
0596 3e 00			ld a, 0 
0598				 
0598 77				ld (hl),a   ; reset file counter 
0599			 
0599 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
059c 22 b6 f9		 	ld (store_page+1), hl	 
059f			 
059f				; set default label 
059f			 
059f 21 3b 06			ld hl, .defaultbanklabl 
05a2 11 b8 f9		 	ld de, store_page+3 
05a5 01 0f 00			ld bc, 15 
05a8 ed b0			ldir 
05aa			 
05aa				; Append the current bank id 
05aa 21 c1 f9			ld hl, store_page+3+9 
05ad 3a 9a f9			ld a, (spi_device_id) 
05b0 77				ld (hl), a 
05b1			 
05b1				; save default page 0 
05b1			 
05b1 21 00 00			ld hl, 0 
05b4 11 b5 f9			ld de, store_page 
05b7				if DEBUG_STORESE 
05b7					DMARK "SB3" 
05b7 f5				push af  
05b8 3a cc 05			ld a, (.dmark)  
05bb 32 a6 fd			ld (debug_mark),a  
05be 3a cd 05			ld a, (.dmark+1)  
05c1 32 a7 fd			ld (debug_mark+1),a  
05c4 3a ce 05			ld a, (.dmark+2)  
05c7 32 a8 fd			ld (debug_mark+2),a  
05ca 18 03			jr .pastdmark  
05cc ..			.dmark: db "SB3"  
05cf f1			.pastdmark: pop af  
05d0			endm  
# End of macro DMARK
05d0			;		push af 
05d0			;		ld a, 'F' 
05d0			;		ld (debug_mark),a 
05d0			;		pop af 
05d0					CALLMONITOR 
05d0 cd aa fd			call debug_vector  
05d3				endm  
# End of macro CALLMONITOR
05d3				endif 
05d3 cd d6 04			call storage_write_block 
05d6				if DEBUG_STORESE 
05d6					DMARK "SB4" 
05d6 f5				push af  
05d7 3a eb 05			ld a, (.dmark)  
05da 32 a6 fd			ld (debug_mark),a  
05dd 3a ec 05			ld a, (.dmark+1)  
05e0 32 a7 fd			ld (debug_mark+1),a  
05e3 3a ed 05			ld a, (.dmark+2)  
05e6 32 a8 fd			ld (debug_mark+2),a  
05e9 18 03			jr .pastdmark  
05eb ..			.dmark: db "SB4"  
05ee f1			.pastdmark: pop af  
05ef			endm  
# End of macro DMARK
05ef			;		push af 
05ef			;		ld a, '>' 
05ef			;		ld (debug_mark),a 
05ef			;		pop af 
05ef					CALLMONITOR 
05ef cd aa fd			call debug_vector  
05f2				endm  
# End of macro CALLMONITOR
05f2				endif 
05f2			 
05f2 00				nop 
05f3 00				nop 
05f4 00				nop 
05f5			 
05f5				; now set 0 in every page to mark as a free block 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7 21 40 00			ld hl, STORE_BLOCK_PHY 
05fa			 
05fa 3e 00		.setmark1:   	ld a,0 
05fc e5					push hl 
05fd c5					push bc 
05fe cd 76 02				call se_writebyte 
0601 3e 0a			ld a, 10 
0603 cd cf 0c			call aDelayInMS 
0606 23				inc hl 
0607 cd 76 02				call se_writebyte 
060a 3e 0a			ld a, 10 
060c cd cf 0c			call aDelayInMS 
060f 2b				dec hl 
0610 c1					pop bc 
0611 e1					pop hl 
0612 3e 40				ld a, STORE_BLOCK_PHY 
0614 cd db 0f				call addatohl 
0617 10 e1				djnz .setmark1 
0619			 
0619 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
061b 3e 00		.setmark2:   	ld a,0 
061d e5					push hl 
061e c5					push bc 
061f cd 76 02				call se_writebyte 
0622 3e 0a			ld a, 10 
0624 cd cf 0c			call aDelayInMS 
0627 23				inc hl 
0628 cd 76 02				call se_writebyte 
062b 3e 0a			ld a, 10 
062d cd cf 0c			call aDelayInMS 
0630 2b				dec hl 
0631 c1					pop bc 
0632 e1					pop hl 
0633 3e 40				ld a, STORE_BLOCK_PHY 
0635 cd db 0f				call addatohl 
0638 10 e1				djnz .setmark2 
063a			 
063a					 
063a			 
063a			 
063a c9				ret 
063b			 
063b			 
063b			 
063b			 
063b .. 00		.defaultbanklabl:   db "BankLabel_",0 
0646			 
0646			 
0646			 
0646			; Label Bank 
0646			; ---------- 
0646			; 
0646			; With current bank 
0646			; Read block 0 
0646			; Set label 
0646			; Write block 0 
0646			 
0646			; label str pointer in hl 
0646			 
0646			storage_label:     
0646			 
0646				if DEBUG_STORESE 
0646					DMARK "LBL" 
0646 f5				push af  
0647 3a 5b 06			ld a, (.dmark)  
064a 32 a6 fd			ld (debug_mark),a  
064d 3a 5c 06			ld a, (.dmark+1)  
0650 32 a7 fd			ld (debug_mark+1),a  
0653 3a 5d 06			ld a, (.dmark+2)  
0656 32 a8 fd			ld (debug_mark+2),a  
0659 18 03			jr .pastdmark  
065b ..			.dmark: db "LBL"  
065e f1			.pastdmark: pop af  
065f			endm  
# End of macro DMARK
065f					CALLMONITOR 
065f cd aa fd			call debug_vector  
0662				endm  
# End of macro CALLMONITOR
0662				endif 
0662			 
0662 e5				push hl 
0663			 
0663 cd 22 05			call storage_get_block_0 
0666			 
0666				; set default label 
0666			 
0666 e1				pop hl 
0667			 
0667 11 b8 f9		 	ld de, store_page+3 
066a 01 0f 00			ld bc, 15 
066d				if DEBUG_STORESE 
066d					DMARK "LB3" 
066d f5				push af  
066e 3a 82 06			ld a, (.dmark)  
0671 32 a6 fd			ld (debug_mark),a  
0674 3a 83 06			ld a, (.dmark+1)  
0677 32 a7 fd			ld (debug_mark+1),a  
067a 3a 84 06			ld a, (.dmark+2)  
067d 32 a8 fd			ld (debug_mark+2),a  
0680 18 03			jr .pastdmark  
0682 ..			.dmark: db "LB3"  
0685 f1			.pastdmark: pop af  
0686			endm  
# End of macro DMARK
0686					CALLMONITOR 
0686 cd aa fd			call debug_vector  
0689				endm  
# End of macro CALLMONITOR
0689				endif 
0689 ed b0			ldir 
068b				; save default page 0 
068b			 
068b 21 00 00			ld hl, 0 
068e 11 b5 f9			ld de, store_page 
0691				if DEBUG_STORESE 
0691					DMARK "LBW" 
0691 f5				push af  
0692 3a a6 06			ld a, (.dmark)  
0695 32 a6 fd			ld (debug_mark),a  
0698 3a a7 06			ld a, (.dmark+1)  
069b 32 a7 fd			ld (debug_mark+1),a  
069e 3a a8 06			ld a, (.dmark+2)  
06a1 32 a8 fd			ld (debug_mark+2),a  
06a4 18 03			jr .pastdmark  
06a6 ..			.dmark: db "LBW"  
06a9 f1			.pastdmark: pop af  
06aa			endm  
# End of macro DMARK
06aa					CALLMONITOR 
06aa cd aa fd			call debug_vector  
06ad				endm  
# End of macro CALLMONITOR
06ad				endif 
06ad cd d6 04			call storage_write_block 
06b0			 
06b0 c9				ret 
06b1			 
06b1			 
06b1			 
06b1			; Read Block 0 - Config 
06b1			; --------------------- 
06b1			; 
06b1			; With current bank 
06b1			; Call presence test 
06b1			;    If not present format/init bank  
06b1			; Read block 0  
06b1			;  
06b1			 
06b1			 
06b1			; Dir 
06b1			; --- 
06b1			; 
06b1			; With current bank 
06b1			; Load Block 0 Config 
06b1			; Get max file id number 
06b1			; For each logical block 
06b1			;    Read block read byte 2 
06b1			;      if first block of file 
06b1			;         Display file name 
06b1			;         Display type flags for file 
06b1			;        
06b1			 
06b1			; moving to words as this requires stack control 
06b1			 
06b1			 
06b1			; Delete File 
06b1			; ----------- 
06b1			; 
06b1			; With current bank 
06b1			; 
06b1			; Load Block 0 Config 
06b1			; Get max file id number 
06b1			; For each logical block 
06b1			;    Read block file id 
06b1			;      If first block of file and dont have file id 
06b1			;         if file to delete 
06b1			;         Save file id 
06b1			;         Null file id 
06b1			;         Write this block back 
06b1			;      If file id is one saved 
06b1			;         Null file id 
06b1			;         Write this block back 
06b1			 
06b1			 
06b1			.se_done: 
06b1 e1				pop hl 
06b2 c9				ret 
06b3			 
06b3			storage_erase: 
06b3			 
06b3				; hl contains the file id 
06b3			 
06b3 5d				ld e, l 
06b4 16 00			ld d, 0 
06b6 21 40 00			ld hl, STORE_BLOCK_PHY 
06b9					if DEBUG_FORTH_WORDS 
06b9						DMARK "ERA" 
06b9 f5				push af  
06ba 3a ce 06			ld a, (.dmark)  
06bd 32 a6 fd			ld (debug_mark),a  
06c0 3a cf 06			ld a, (.dmark+1)  
06c3 32 a7 fd			ld (debug_mark+1),a  
06c6 3a d0 06			ld a, (.dmark+2)  
06c9 32 a8 fd			ld (debug_mark+2),a  
06cc 18 03			jr .pastdmark  
06ce ..			.dmark: db "ERA"  
06d1 f1			.pastdmark: pop af  
06d2			endm  
# End of macro DMARK
06d2						CALLMONITOR 
06d2 cd aa fd			call debug_vector  
06d5				endm  
# End of macro CALLMONITOR
06d5					endif 
06d5 cd a4 07			call storage_findnextid 
06d8 cd 04 10			call ishlzero 
06db c8				ret z 
06dc			 
06dc e5				push hl 
06dd			 
06dd				; TODO check file not found 
06dd			 
06dd 11 b5 f9			ld de, store_page 
06e0 cd 71 04			call storage_read_block 
06e3			 
06e3 cd 04 10			call ishlzero 
06e6 ca b1 06			jp z,.se_done 
06e9			 
06e9					if DEBUG_FORTH_WORDS 
06e9						DMARK "ER1" 
06e9 f5				push af  
06ea 3a fe 06			ld a, (.dmark)  
06ed 32 a6 fd			ld (debug_mark),a  
06f0 3a ff 06			ld a, (.dmark+1)  
06f3 32 a7 fd			ld (debug_mark+1),a  
06f6 3a 00 07			ld a, (.dmark+2)  
06f9 32 a8 fd			ld (debug_mark+2),a  
06fc 18 03			jr .pastdmark  
06fe ..			.dmark: db "ER1"  
0701 f1			.pastdmark: pop af  
0702			endm  
# End of macro DMARK
0702						CALLMONITOR 
0702 cd aa fd			call debug_vector  
0705				endm  
# End of macro CALLMONITOR
0705					endif 
0705 3a b5 f9			ld a, (store_page)	; get file id 
0708 32 a9 f9			ld (store_tmpid), a 
070b			 
070b 3a b7 f9			ld a, (store_page+2)    ; get count of extends 
070e 32 a8 f9			ld (store_tmpext), a 
0711			 
0711				; wipe file header 
0711			 
0711 e1				pop hl 
0712 3e 00			ld a, 0 
0714 32 b5 f9			ld (store_page), a 
0717 32 b6 f9			ld (store_page+1),a 
071a 11 b5 f9			ld de, store_page 
071d					if DEBUG_FORTH_WORDS 
071d						DMARK "ER2" 
071d f5				push af  
071e 3a 32 07			ld a, (.dmark)  
0721 32 a6 fd			ld (debug_mark),a  
0724 3a 33 07			ld a, (.dmark+1)  
0727 32 a7 fd			ld (debug_mark+1),a  
072a 3a 34 07			ld a, (.dmark+2)  
072d 32 a8 fd			ld (debug_mark+2),a  
0730 18 03			jr .pastdmark  
0732 ..			.dmark: db "ER2"  
0735 f1			.pastdmark: pop af  
0736			endm  
# End of macro DMARK
0736						CALLMONITOR 
0736 cd aa fd			call debug_vector  
0739				endm  
# End of macro CALLMONITOR
0739					endif 
0739 cd d6 04			call storage_write_block 
073c			 
073c			 
073c				; wipe file extents 
073c			 
073c 3a a8 f9			ld a, (store_tmpext) 
073f 47				ld b, a 
0740			 
0740			.eraext:	  
0740 c5				push bc 
0741			 
0741 21 40 00			ld hl, STORE_BLOCK_PHY 
0744 3a a9 f9			ld a,(store_tmpid) 
0747 5f				ld e, a 
0748 50				ld d, b	 
0749					if DEBUG_FORTH_WORDS 
0749						DMARK "ER3" 
0749 f5				push af  
074a 3a 5e 07			ld a, (.dmark)  
074d 32 a6 fd			ld (debug_mark),a  
0750 3a 5f 07			ld a, (.dmark+1)  
0753 32 a7 fd			ld (debug_mark+1),a  
0756 3a 60 07			ld a, (.dmark+2)  
0759 32 a8 fd			ld (debug_mark+2),a  
075c 18 03			jr .pastdmark  
075e ..			.dmark: db "ER3"  
0761 f1			.pastdmark: pop af  
0762			endm  
# End of macro DMARK
0762						CALLMONITOR 
0762 cd aa fd			call debug_vector  
0765				endm  
# End of macro CALLMONITOR
0765					endif 
0765 cd a4 07			call storage_findnextid 
0768 cd 04 10			call ishlzero 
076b ca b1 06			jp z,.se_done 
076e			 
076e e5				push hl 
076f 11 b5 f9			ld de, store_page 
0772 cd 71 04			call storage_read_block 
0775			 
0775				; free block	 
0775			 
0775 3e 00			ld a, 0 
0777 32 b5 f9			ld (store_page), a 
077a 32 b6 f9			ld (store_page+1),a 
077d 11 b5 f9			ld de, store_page 
0780 e1				pop hl 
0781					if DEBUG_FORTH_WORDS 
0781						DMARK "ER4" 
0781 f5				push af  
0782 3a 96 07			ld a, (.dmark)  
0785 32 a6 fd			ld (debug_mark),a  
0788 3a 97 07			ld a, (.dmark+1)  
078b 32 a7 fd			ld (debug_mark+1),a  
078e 3a 98 07			ld a, (.dmark+2)  
0791 32 a8 fd			ld (debug_mark+2),a  
0794 18 03			jr .pastdmark  
0796 ..			.dmark: db "ER4"  
0799 f1			.pastdmark: pop af  
079a			endm  
# End of macro DMARK
079a						CALLMONITOR 
079a cd aa fd			call debug_vector  
079d				endm  
# End of macro CALLMONITOR
079d					endif 
079d cd d6 04			call storage_write_block 
07a0			 
07a0 c1				pop bc 
07a1 10 9d			djnz .eraext 
07a3			 
07a3 c9				ret 
07a4			 
07a4			 
07a4			; Find Free Block 
07a4			; --------------- 
07a4			; 
07a4			; With current bank 
07a4			;  
07a4			; From given starting logical block 
07a4			;    Read block  
07a4			;    If no file id 
07a4			;         Return block id 
07a4			 
07a4			 
07a4			; hl starting page number 
07a4			; hl contains free page number or zero if no pages free 
07a4			; e contains the file id to locate 
07a4			; d contains the block number 
07a4			 
07a4			; TODO change to find file id and use zero for free block 
07a4			 
07a4			storage_findnextid: 
07a4			 
07a4				; now locate first 0 page to mark as a free block 
07a4			 
07a4 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07a6			;	ld hl, STORE_BLOCK_PHY 
07a6			 
07a6					if DEBUG_FORTH_WORDS 
07a6					DMARK "FNI" 
07a6 f5				push af  
07a7 3a bb 07			ld a, (.dmark)  
07aa 32 a6 fd			ld (debug_mark),a  
07ad 3a bc 07			ld a, (.dmark+1)  
07b0 32 a7 fd			ld (debug_mark+1),a  
07b3 3a bd 07			ld a, (.dmark+2)  
07b6 32 a8 fd			ld (debug_mark+2),a  
07b9 18 03			jr .pastdmark  
07bb ..			.dmark: db "FNI"  
07be f1			.pastdmark: pop af  
07bf			endm  
# End of macro DMARK
07bf						CALLMONITOR 
07bf cd aa fd			call debug_vector  
07c2				endm  
# End of macro CALLMONITOR
07c2					endif 
07c2			.ff1:   	 
07c2 e5					push hl 
07c3 c5					push bc 
07c4 d5					push de 
07c5 cd 18 03				call se_readbyte 
07c8 5f					ld e,a 
07c9 23					inc hl 
07ca cd 18 03				call se_readbyte 
07cd 57					ld d, a 
07ce e1					pop hl 
07cf e5					push hl 
07d0 cd f9 0f				call cmp16 
07d3 28 49				jr z, .fffound 
07d5			 
07d5 d1					pop de 
07d6 c1					pop bc 
07d7 e1					pop hl 
07d8			 
07d8					; is found? 
07d8					;cp e 
07d8					;ret z 
07d8			 
07d8 3e 40				ld a, STORE_BLOCK_PHY 
07da cd db 0f				call addatohl 
07dd 10 e3				djnz .ff1 
07df			 
07df 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07e1			.ff2:   	 
07e1			 
07e1 e5					push hl 
07e2 c5					push bc 
07e3 d5					push de 
07e4 cd 18 03				call se_readbyte 
07e7 5f					ld e,a 
07e8 23					inc hl 
07e9 cd 18 03				call se_readbyte 
07ec 57					ld d, a 
07ed			 
07ed e1					pop hl 
07ee e5					push hl 
07ef cd f9 0f				call cmp16 
07f2 28 2a				jr z, .fffound 
07f4			 
07f4 d1					pop de 
07f5 c1					pop bc 
07f6 e1					pop hl 
07f7					; is found? 
07f7					;cp e 
07f7					;ret z 
07f7			 
07f7 3e 40				ld a, STORE_BLOCK_PHY 
07f9 cd db 0f				call addatohl 
07fc 10 e3				djnz .ff2 
07fe			 
07fe			 
07fe					if DEBUG_FORTH_WORDS 
07fe					DMARK "FN-" 
07fe f5				push af  
07ff 3a 13 08			ld a, (.dmark)  
0802 32 a6 fd			ld (debug_mark),a  
0805 3a 14 08			ld a, (.dmark+1)  
0808 32 a7 fd			ld (debug_mark+1),a  
080b 3a 15 08			ld a, (.dmark+2)  
080e 32 a8 fd			ld (debug_mark+2),a  
0811 18 03			jr .pastdmark  
0813 ..			.dmark: db "FN-"  
0816 f1			.pastdmark: pop af  
0817			endm  
# End of macro DMARK
0817					;	push af 
0817					;	ld a, 'n' 
0817					;	ld (debug_mark),a 
0817					;	pop af 
0817						CALLMONITOR 
0817 cd aa fd			call debug_vector  
081a				endm  
# End of macro CALLMONITOR
081a					endif 
081a				; no free marks! 
081a 21 00 00				ld hl, 0 
081d c9				ret 
081e			.fffound: 
081e				 
081e			 
081e d1					pop de 
081f c1					pop bc 
0820 e1					pop hl 
0821					if DEBUG_FORTH_WORDS 
0821					DMARK "FNF" 
0821 f5				push af  
0822 3a 36 08			ld a, (.dmark)  
0825 32 a6 fd			ld (debug_mark),a  
0828 3a 37 08			ld a, (.dmark+1)  
082b 32 a7 fd			ld (debug_mark+1),a  
082e 3a 38 08			ld a, (.dmark+2)  
0831 32 a8 fd			ld (debug_mark+2),a  
0834 18 03			jr .pastdmark  
0836 ..			.dmark: db "FNF"  
0839 f1			.pastdmark: pop af  
083a			endm  
# End of macro DMARK
083a					;	push af 
083a					;	ld a, 'n' 
083a					;	ld (debug_mark),a 
083a					;	pop af 
083a						CALLMONITOR 
083a cd aa fd			call debug_vector  
083d				endm  
# End of macro CALLMONITOR
083d					endif 
083d c9				ret 
083e			 
083e			 
083e			 
083e			; Free Space 
083e			; ---------- 
083e			; 
083e			; With current bank 
083e			; 
083e			; Set block count to zero 
083e			; Starting with first logical block 
083e			;      Find free block  
083e			;      If block id given, increment block count 
083e			; 
083e			;  
083e			 
083e			 
083e			; hl contains count of free blocks 
083e			 
083e			storage_freeblocks: 
083e			 
083e				; now locate first 0 page to mark as a free block 
083e			 
083e 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0840 21 40 00			ld hl, STORE_BLOCK_PHY 
0843 11 00 00			ld de, 0 
0846			 
0846			.fb1:   	 
0846 e5					push hl 
0847 c5					push bc 
0848 d5					push de 
0849 cd 18 03				call se_readbyte 
084c d1					pop de 
084d c1					pop bc 
084e e1					pop hl 
084f			 
084f					; is free? 
084f fe 00				cp 0 
0851 20 01				jr nz, .ff1cont 
0853 13					inc de 
0854			 
0854			.ff1cont: 
0854			 
0854			 
0854 3e 40				ld a, STORE_BLOCK_PHY 
0856 cd db 0f				call addatohl 
0859 10 eb				djnz .fb1 
085b			 
085b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
085d			.fb2:   	 
085d e5					push hl 
085e c5					push bc 
085f d5					push de 
0860 cd 18 03				call se_readbyte 
0863 d1					pop de 
0864 c1					pop bc 
0865 e1					pop hl 
0866			 
0866					; is free? 
0866 fe 00				cp 0 
0868 20 01				jr nz, .ff2cont 
086a 13					inc de 
086b			 
086b			.ff2cont: 
086b			 
086b 3e 40				ld a, STORE_BLOCK_PHY 
086d cd db 0f				call addatohl 
0870 10 eb				djnz .fb2 
0872			 
0872 eb				ex de, hl 
0873 c9				ret 
0874			 
0874			; Get File ID 
0874			; ----------- 
0874			; 
0874			; With current bank 
0874			;  
0874			; Load Block 0 Config 
0874			; Get max file id number 
0874			; For each logical block 
0874			;    Read block file id 
0874			;      If first block of file and dont have file id 
0874			;         if file get id and exit 
0874			 
0874			 
0874			 
0874			 
0874			; Create File 
0874			; ----------- 
0874			; 
0874			; With current bank  
0874			; Load Block 0 Config 
0874			; Get max file id number 
0874			; Increment file id number 
0874			; Save Config 
0874			; Find free block 
0874			; Set buffer with file name and file id 
0874			; Write buffer to free block  
0874			 
0874			 
0874			; hl point to file name 
0874			; hl returns file id 
0874			 
0874			; file format: 
0874			; byte 0 - file id 
0874			; byte 1 - extent number 
0874			; byte 2-> data 
0874			 
0874			; format for extent number 0: 
0874			; 
0874			; byte 0 - file id 
0874			; byte 1 - extent 0 
0874			; byte 2 - extent count 
0874			; byte 3 -> file name and meta data 
0874			 
0874			 
0874			storage_create: 
0874				if DEBUG_STORESE 
0874					DMARK "SCR" 
0874 f5				push af  
0875 3a 89 08			ld a, (.dmark)  
0878 32 a6 fd			ld (debug_mark),a  
087b 3a 8a 08			ld a, (.dmark+1)  
087e 32 a7 fd			ld (debug_mark+1),a  
0881 3a 8b 08			ld a, (.dmark+2)  
0884 32 a8 fd			ld (debug_mark+2),a  
0887 18 03			jr .pastdmark  
0889 ..			.dmark: db "SCR"  
088c f1			.pastdmark: pop af  
088d			endm  
# End of macro DMARK
088d					CALLMONITOR 
088d cd aa fd			call debug_vector  
0890				endm  
# End of macro CALLMONITOR
0890				endif 
0890			 
0890 e5				push hl		; save file name pointer 
0891			 
0891 cd 22 05			call storage_get_block_0 
0894			 
0894 3a b5 f9			ld a,(store_page)	; get current file id 
0897 3c				inc a 
0898 32 b5 f9			ld (store_page),a 
089b				 
089b 32 a9 f9			ld (store_tmpid),a			; save id 
089e			 
089e 21 00 00			ld hl, 0 
08a1 11 b5 f9			ld de, store_page 
08a4				if DEBUG_STORESE 
08a4					DMARK "SCw" 
08a4 f5				push af  
08a5 3a b9 08			ld a, (.dmark)  
08a8 32 a6 fd			ld (debug_mark),a  
08ab 3a ba 08			ld a, (.dmark+1)  
08ae 32 a7 fd			ld (debug_mark+1),a  
08b1 3a bb 08			ld a, (.dmark+2)  
08b4 32 a8 fd			ld (debug_mark+2),a  
08b7 18 03			jr .pastdmark  
08b9 ..			.dmark: db "SCw"  
08bc f1			.pastdmark: pop af  
08bd			endm  
# End of macro DMARK
08bd					CALLMONITOR 
08bd cd aa fd			call debug_vector  
08c0				endm  
# End of macro CALLMONITOR
08c0				endif 
08c0 cd d6 04			call storage_write_block	 ; save update 
08c3			 
08c3				if DEBUG_STORESE 
08c3 11 b5 f9				ld de, store_page 
08c6					DMARK "SCC" 
08c6 f5				push af  
08c7 3a db 08			ld a, (.dmark)  
08ca 32 a6 fd			ld (debug_mark),a  
08cd 3a dc 08			ld a, (.dmark+1)  
08d0 32 a7 fd			ld (debug_mark+1),a  
08d3 3a dd 08			ld a, (.dmark+2)  
08d6 32 a8 fd			ld (debug_mark+2),a  
08d9 18 03			jr .pastdmark  
08db ..			.dmark: db "SCC"  
08de f1			.pastdmark: pop af  
08df			endm  
# End of macro DMARK
08df					CALLMONITOR 
08df cd aa fd			call debug_vector  
08e2				endm  
# End of macro CALLMONITOR
08e2				endif 
08e2				;  
08e2				 
08e2 21 40 00			ld hl, STORE_BLOCK_PHY 
08e5 11 00 00			ld de, 0 
08e8 cd a4 07			call storage_findnextid 
08eb			 
08eb 22 a0 f9			ld (store_tmppageid), hl    ; save page to use  
08ee			 
08ee				; TODO detect 0 = no spare blocks 
08ee			 
08ee				; hl now contains the free page to use for the file header page 
08ee			 
08ee				if DEBUG_STORESE 
08ee				DMARK "SCF" 
08ee f5				push af  
08ef 3a 03 09			ld a, (.dmark)  
08f2 32 a6 fd			ld (debug_mark),a  
08f5 3a 04 09			ld a, (.dmark+1)  
08f8 32 a7 fd			ld (debug_mark+1),a  
08fb 3a 05 09			ld a, (.dmark+2)  
08fe 32 a8 fd			ld (debug_mark+2),a  
0901 18 03			jr .pastdmark  
0903 ..			.dmark: db "SCF"  
0906 f1			.pastdmark: pop af  
0907			endm  
# End of macro DMARK
0907					CALLMONITOR 
0907 cd aa fd			call debug_vector  
090a				endm  
# End of macro CALLMONITOR
090a				endif 
090a			 
090a 22 a0 f9			ld (store_tmppageid), hl 
090d				 
090d 3a a9 f9			ld a,(store_tmpid)    ; get file id 
0910			;	ld a, (store_filecache)			; save to cache 
0910			 
0910 32 b5 f9			ld (store_page),a    ; set page id 
0913 3e 00			ld a, 0			 ; extent 0 is file header 
0915 32 b6 f9			ld (store_page+1), a   ; set file extent 
0918			 
0918 32 b7 f9			ld (store_page+2), a   ; extent count for the file 
091b			 
091b			;	inc hl 		; init block 0 of file 
091b			;	inc hl   		; skip file and extent id 
091b			 ;       ld a, 0 
091b			;	ld (hl),a 
091b			;	ld a, (store_filecache+1)  	; save to cache 
091b			 
091b			;	inc hl    ; file name 
091b				 
091b				 
091b 11 b8 f9			ld de, store_page+3    ; get buffer for term string to use as file name 
091e				if DEBUG_STORESE 
091e					DMARK "SCc" 
091e f5				push af  
091f 3a 33 09			ld a, (.dmark)  
0922 32 a6 fd			ld (debug_mark),a  
0925 3a 34 09			ld a, (.dmark+1)  
0928 32 a7 fd			ld (debug_mark+1),a  
092b 3a 35 09			ld a, (.dmark+2)  
092e 32 a8 fd			ld (debug_mark+2),a  
0931 18 03			jr .pastdmark  
0933 ..			.dmark: db "SCc"  
0936 f1			.pastdmark: pop af  
0937			endm  
# End of macro DMARK
0937					CALLMONITOR 
0937 cd aa fd			call debug_vector  
093a				endm  
# End of macro CALLMONITOR
093a				endif 
093a e1				pop hl    ; get zero term string 
093b e5				push hl 
093c 3e 00			ld a, 0 
093e cd 4c 13			call strlent 
0941 23				inc hl   ; cover zero term 
0942 06 00			ld b,0 
0944 4d				ld c,l 
0945 e1				pop hl 
0946				;ex de, hl 
0946				if DEBUG_STORESE 
0946					DMARK "SCa" 
0946 f5				push af  
0947 3a 5b 09			ld a, (.dmark)  
094a 32 a6 fd			ld (debug_mark),a  
094d 3a 5c 09			ld a, (.dmark+1)  
0950 32 a7 fd			ld (debug_mark+1),a  
0953 3a 5d 09			ld a, (.dmark+2)  
0956 32 a8 fd			ld (debug_mark+2),a  
0959 18 03			jr .pastdmark  
095b ..			.dmark: db "SCa"  
095e f1			.pastdmark: pop af  
095f			endm  
# End of macro DMARK
095f					;push af 
095f					;ld a, 'a' 
095f					;ld (debug_mark),a 
095f					;pop af 
095f					CALLMONITOR 
095f cd aa fd			call debug_vector  
0962				endm  
# End of macro CALLMONITOR
0962				endif 
0962 ed b0			ldir    ; copy zero term string 
0964				if DEBUG_STORESE 
0964					DMARK "SCA" 
0964 f5				push af  
0965 3a 79 09			ld a, (.dmark)  
0968 32 a6 fd			ld (debug_mark),a  
096b 3a 7a 09			ld a, (.dmark+1)  
096e 32 a7 fd			ld (debug_mark+1),a  
0971 3a 7b 09			ld a, (.dmark+2)  
0974 32 a8 fd			ld (debug_mark+2),a  
0977 18 03			jr .pastdmark  
0979 ..			.dmark: db "SCA"  
097c f1			.pastdmark: pop af  
097d			endm  
# End of macro DMARK
097d					CALLMONITOR 
097d cd aa fd			call debug_vector  
0980				endm  
# End of macro CALLMONITOR
0980				endif 
0980			 
0980				; write file header page 
0980			 
0980 2a a0 f9			ld hl,(store_tmppageid) 
0983 11 b5 f9			ld de, store_page 
0986				if DEBUG_STORESE 
0986					DMARK "SCb" 
0986 f5				push af  
0987 3a 9b 09			ld a, (.dmark)  
098a 32 a6 fd			ld (debug_mark),a  
098d 3a 9c 09			ld a, (.dmark+1)  
0990 32 a7 fd			ld (debug_mark+1),a  
0993 3a 9d 09			ld a, (.dmark+2)  
0996 32 a8 fd			ld (debug_mark+2),a  
0999 18 03			jr .pastdmark  
099b ..			.dmark: db "SCb"  
099e f1			.pastdmark: pop af  
099f			endm  
# End of macro DMARK
099f					;push af 
099f					;ld a, 'b' 
099f					;ld (debug_mark),a 
099f					;pop af 
099f					CALLMONITOR 
099f cd aa fd			call debug_vector  
09a2				endm  
# End of macro CALLMONITOR
09a2				endif 
09a2 cd d6 04			call storage_write_block 
09a5			 
09a5 3a a9 f9			ld a, (store_tmpid) 
09a8 6f				ld l, a 
09a9 26 00			ld h,0 
09ab				if DEBUG_STORESE 
09ab					DMARK "SCz" 
09ab f5				push af  
09ac 3a c0 09			ld a, (.dmark)  
09af 32 a6 fd			ld (debug_mark),a  
09b2 3a c1 09			ld a, (.dmark+1)  
09b5 32 a7 fd			ld (debug_mark+1),a  
09b8 3a c2 09			ld a, (.dmark+2)  
09bb 32 a8 fd			ld (debug_mark+2),a  
09be 18 03			jr .pastdmark  
09c0 ..			.dmark: db "SCz"  
09c3 f1			.pastdmark: pop af  
09c4			endm  
# End of macro DMARK
09c4					CALLMONITOR 
09c4 cd aa fd			call debug_vector  
09c7				endm  
# End of macro CALLMONITOR
09c7				endif 
09c7 c9				ret 
09c8				 
09c8			 
09c8			 
09c8			; 
09c8			; Read File 
09c8			; 
09c8			; h - file id to locate 
09c8			; l - extent to locate 
09c8			; de - pointer to string to read into 
09c8			; 
09c8			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09c8			 
09c8			.sr_fail: 
09c8 d1				pop de 
09c9 c9				ret 
09ca			 
09ca			storage_read: 
09ca			 
09ca			 
09ca d5				push de 
09cb			 
09cb			; TODO BUG the above push is it popped before the RET Z? 
09cb			 
09cb			; TODO how to handle multiple part blocks 
09cb			 
09cb				; locate file extent to read 
09cb			 
09cb 5c				ld e, h 
09cc 55				ld d, l 
09cd			 
09cd			.srext: 
09cd 22 b3 f9			ld (store_readptr), hl     ; save the current extent to load 
09d0 ed 53 b1 f9		ld (store_readbuf), de     ; save the current buffer to load in to 
09d4			 
09d4 21 40 00			ld hl, STORE_BLOCK_PHY 
09d7				if DEBUG_STORESE 
09d7					DMARK "sre" 
09d7 f5				push af  
09d8 3a ec 09			ld a, (.dmark)  
09db 32 a6 fd			ld (debug_mark),a  
09de 3a ed 09			ld a, (.dmark+1)  
09e1 32 a7 fd			ld (debug_mark+1),a  
09e4 3a ee 09			ld a, (.dmark+2)  
09e7 32 a8 fd			ld (debug_mark+2),a  
09ea 18 03			jr .pastdmark  
09ec ..			.dmark: db "sre"  
09ef f1			.pastdmark: pop af  
09f0			endm  
# End of macro DMARK
09f0					CALLMONITOR 
09f0 cd aa fd			call debug_vector  
09f3				endm  
# End of macro CALLMONITOR
09f3				endif 
09f3 cd a4 07			call storage_findnextid 
09f6			 
09f6				if DEBUG_STORESE 
09f6					DMARK "srf" 
09f6 f5				push af  
09f7 3a 0b 0a			ld a, (.dmark)  
09fa 32 a6 fd			ld (debug_mark),a  
09fd 3a 0c 0a			ld a, (.dmark+1)  
0a00 32 a7 fd			ld (debug_mark+1),a  
0a03 3a 0d 0a			ld a, (.dmark+2)  
0a06 32 a8 fd			ld (debug_mark+2),a  
0a09 18 03			jr .pastdmark  
0a0b ..			.dmark: db "srf"  
0a0e f1			.pastdmark: pop af  
0a0f			endm  
# End of macro DMARK
0a0f					CALLMONITOR 
0a0f cd aa fd			call debug_vector  
0a12				endm  
# End of macro CALLMONITOR
0a12				endif 
0a12 cd 04 10			call ishlzero 
0a15			;	ld a, l 
0a15			;	add h 
0a15			;	cp 0 
0a15 28 b1			jr z,.sr_fail			; block not found so EOF 
0a17			 
0a17				; save current address for use by higher level words etc 
0a17			 
0a17 22 a6 f9			ld (store_openaddr),hl 
0a1a			 
0a1a			 
0a1a				; hl contains page number to load 
0a1a d1				pop de   ; get storage 
0a1b ed 53 b1 f9		ld (store_readbuf), de     ; current buffer to load in to 
0a1f d5				push de 
0a20				if DEBUG_STORESE 
0a20					DMARK "srg" 
0a20 f5				push af  
0a21 3a 35 0a			ld a, (.dmark)  
0a24 32 a6 fd			ld (debug_mark),a  
0a27 3a 36 0a			ld a, (.dmark+1)  
0a2a 32 a7 fd			ld (debug_mark+1),a  
0a2d 3a 37 0a			ld a, (.dmark+2)  
0a30 32 a8 fd			ld (debug_mark+2),a  
0a33 18 03			jr .pastdmark  
0a35 ..			.dmark: db "srg"  
0a38 f1			.pastdmark: pop af  
0a39			endm  
# End of macro DMARK
0a39					CALLMONITOR 
0a39 cd aa fd			call debug_vector  
0a3c				endm  
# End of macro CALLMONITOR
0a3c				endif 
0a3c cd 71 04			call storage_read_block 
0a3f			 
0a3f				; if this a continuation read??? 
0a3f			 
0a3f 2a b1 f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a42			 
0a42 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a44 cd db 0f			call addatohl 
0a47 7e				ld a,(hl) 
0a48 fe 00			cp 0 
0a4a 28 02			jr z, .markiscont 
0a4c 3e ff			ld a, 255 
0a4e			 
0a4e			.markiscont: 
0a4e 32 a8 f9			ld (store_readcont), a 
0a51			 
0a51				if DEBUG_STORESE 
0a51					DMARK "srC" 
0a51 f5				push af  
0a52 3a 66 0a			ld a, (.dmark)  
0a55 32 a6 fd			ld (debug_mark),a  
0a58 3a 67 0a			ld a, (.dmark+1)  
0a5b 32 a7 fd			ld (debug_mark+1),a  
0a5e 3a 68 0a			ld a, (.dmark+2)  
0a61 32 a8 fd			ld (debug_mark+2),a  
0a64 18 03			jr .pastdmark  
0a66 ..			.dmark: db "srC"  
0a69 f1			.pastdmark: pop af  
0a6a			endm  
# End of macro DMARK
0a6a					CALLMONITOR 
0a6a cd aa fd			call debug_vector  
0a6d				endm  
# End of macro CALLMONITOR
0a6d				endif 
0a6d				; only short reads enabled 
0a6d			 
0a6d 3a b0 f9			ld a, (store_longread) 
0a70 fe 00			cp 0 
0a72 ca 3f 0b			jp z, .readdone 
0a75			 
0a75			; TODO if block has no zeros then need to read next block  
0a75			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a75			; check last byte of physical block. 
0a75			; if not zero then the next block needs to be loaded 
0a75			 
0a75			 
0a75 2a b1 f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a78			 
0a78 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a7a cd db 0f			call addatohl 
0a7d				;dec hl 
0a7d 7e				ld a,(hl) 
0a7e				if DEBUG_STORESE 
0a7e					DMARK "sr?" 
0a7e f5				push af  
0a7f 3a 93 0a			ld a, (.dmark)  
0a82 32 a6 fd			ld (debug_mark),a  
0a85 3a 94 0a			ld a, (.dmark+1)  
0a88 32 a7 fd			ld (debug_mark+1),a  
0a8b 3a 95 0a			ld a, (.dmark+2)  
0a8e 32 a8 fd			ld (debug_mark+2),a  
0a91 18 03			jr .pastdmark  
0a93 ..			.dmark: db "sr?"  
0a96 f1			.pastdmark: pop af  
0a97			endm  
# End of macro DMARK
0a97					CALLMONITOR 
0a97 cd aa fd			call debug_vector  
0a9a				endm  
# End of macro CALLMONITOR
0a9a				endif 
0a9a fe 00			cp 0 
0a9c ca 3f 0b			jp z, .readdone 
0a9f			 
0a9f				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0a9f			 
0a9f 23				inc hl 
0aa0			 
0aa0 22 b1 f9			ld (store_readbuf), hl     ; save the current buffer to load in to 
0aa3			 
0aa3 ed 5b b3 f9		ld de, (store_readptr)     ; save the current extent to load 
0aa7			 
0aa7 eb				ex de, hl 
0aa8			 
0aa8				; next ext 
0aa8			 
0aa8 23				inc hl 
0aa9 22 b3 f9			ld  (store_readptr), hl     ; save the current extent to load 
0aac			 
0aac				if DEBUG_STORESE 
0aac					DMARK "sF2" 
0aac f5				push af  
0aad 3a c1 0a			ld a, (.dmark)  
0ab0 32 a6 fd			ld (debug_mark),a  
0ab3 3a c2 0a			ld a, (.dmark+1)  
0ab6 32 a7 fd			ld (debug_mark+1),a  
0ab9 3a c3 0a			ld a, (.dmark+2)  
0abc 32 a8 fd			ld (debug_mark+2),a  
0abf 18 03			jr .pastdmark  
0ac1 ..			.dmark: db "sF2"  
0ac4 f1			.pastdmark: pop af  
0ac5			endm  
# End of macro DMARK
0ac5					CALLMONITOR 
0ac5 cd aa fd			call debug_vector  
0ac8				endm  
# End of macro CALLMONITOR
0ac8				endif 
0ac8			 
0ac8				; get and load block 
0ac8			 
0ac8 cd a4 07			call storage_findnextid 
0acb			 
0acb				if DEBUG_STORESE 
0acb					DMARK "sf2" 
0acb f5				push af  
0acc 3a e0 0a			ld a, (.dmark)  
0acf 32 a6 fd			ld (debug_mark),a  
0ad2 3a e1 0a			ld a, (.dmark+1)  
0ad5 32 a7 fd			ld (debug_mark+1),a  
0ad8 3a e2 0a			ld a, (.dmark+2)  
0adb 32 a8 fd			ld (debug_mark+2),a  
0ade 18 03			jr .pastdmark  
0ae0 ..			.dmark: db "sf2"  
0ae3 f1			.pastdmark: pop af  
0ae4			endm  
# End of macro DMARK
0ae4					CALLMONITOR 
0ae4 cd aa fd			call debug_vector  
0ae7				endm  
# End of macro CALLMONITOR
0ae7				endif 
0ae7 cd 04 10			call ishlzero 
0aea			;	ld a, l 
0aea			;	add h 
0aea			;	cp 0 
0aea ca c8 09			jp z,.sr_fail			; block not found so EOF 
0aed				 
0aed				; save current address for use by higher level words etc 
0aed			 
0aed 22 a6 f9			ld (store_openaddr),hl 
0af0			 
0af0 cd 71 04			call storage_read_block 
0af3			 
0af3				; on a continuation block, we now have the file id and ext in the middle of the block 
0af3				; we need to pull everything back  
0af3			 
0af3 ed 5b b1 f9		ld de, (store_readbuf)     ; current buffer to nudge into 
0af7 2a b1 f9			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0afa 23				inc hl 
0afb 23				inc hl     ; skip id and ext 
0afc 01 40 00			ld bc, STORE_BLOCK_PHY 
0aff				if DEBUG_STORESE 
0aff					DMARK "SR<" 
0aff f5				push af  
0b00 3a 14 0b			ld a, (.dmark)  
0b03 32 a6 fd			ld (debug_mark),a  
0b06 3a 15 0b			ld a, (.dmark+1)  
0b09 32 a7 fd			ld (debug_mark+1),a  
0b0c 3a 16 0b			ld a, (.dmark+2)  
0b0f 32 a8 fd			ld (debug_mark+2),a  
0b12 18 03			jr .pastdmark  
0b14 ..			.dmark: db "SR<"  
0b17 f1			.pastdmark: pop af  
0b18			endm  
# End of macro DMARK
0b18					CALLMONITOR 
0b18 cd aa fd			call debug_vector  
0b1b				endm  
# End of macro CALLMONITOR
0b1b				endif 
0b1b ed b0			ldir     ; copy data 
0b1d			 
0b1d				; move the pointer back and pretend we have a full buffer for next recheck 
0b1d			 
0b1d 1b				dec de 
0b1e 1b				dec de 
0b1f			 
0b1f			; TODO do pop below now short circuit loop????? 
0b1f c1				pop bc     ; get rid of spare de on stack 
0b20				if DEBUG_STORESE 
0b20					DMARK "SR>" 
0b20 f5				push af  
0b21 3a 35 0b			ld a, (.dmark)  
0b24 32 a6 fd			ld (debug_mark),a  
0b27 3a 36 0b			ld a, (.dmark+1)  
0b2a 32 a7 fd			ld (debug_mark+1),a  
0b2d 3a 37 0b			ld a, (.dmark+2)  
0b30 32 a8 fd			ld (debug_mark+2),a  
0b33 18 03			jr .pastdmark  
0b35 ..			.dmark: db "SR>"  
0b38 f1			.pastdmark: pop af  
0b39			endm  
# End of macro DMARK
0b39					CALLMONITOR 
0b39 cd aa fd			call debug_vector  
0b3c				endm  
# End of macro CALLMONITOR
0b3c				endif 
0b3c c3 cd 09			jp .srext 
0b3f			 
0b3f			 
0b3f			 
0b3f			 
0b3f			 
0b3f			.readdone:		 
0b3f e1				pop hl 		 ; return start of data to show as not EOF 
0b40 23				inc hl   ; past file id 
0b41 23				inc hl   ; past ext 
0b42				if DEBUG_STORESE 
0b42					DMARK "SRe" 
0b42 f5				push af  
0b43 3a 57 0b			ld a, (.dmark)  
0b46 32 a6 fd			ld (debug_mark),a  
0b49 3a 58 0b			ld a, (.dmark+1)  
0b4c 32 a7 fd			ld (debug_mark+1),a  
0b4f 3a 59 0b			ld a, (.dmark+2)  
0b52 32 a8 fd			ld (debug_mark+2),a  
0b55 18 03			jr .pastdmark  
0b57 ..			.dmark: db "SRe"  
0b5a f1			.pastdmark: pop af  
0b5b			endm  
# End of macro DMARK
0b5b					CALLMONITOR 
0b5b cd aa fd			call debug_vector  
0b5e				endm  
# End of macro CALLMONITOR
0b5e				endif 
0b5e c9					ret 
0b5f			 
0b5f			 
0b5f			 
0b5f			; 
0b5f			; Append File 
0b5f			; 
0b5f			; hl - file id to locate 
0b5f			; de - pointer to (multi block) string to write 
0b5f			 
0b5f			.sa_notfound: 
0b5f d1				pop de 
0b60 c9				ret 
0b61			 
0b61			 
0b61			storage_append: 
0b61				; hl -  file id to append to 
0b61				; de - string to append 
0b61			 
0b61 d5				push de 
0b62				 
0b62				if DEBUG_STORESE 
0b62					DMARK "AP1" 
0b62 f5				push af  
0b63 3a 77 0b			ld a, (.dmark)  
0b66 32 a6 fd			ld (debug_mark),a  
0b69 3a 78 0b			ld a, (.dmark+1)  
0b6c 32 a7 fd			ld (debug_mark+1),a  
0b6f 3a 79 0b			ld a, (.dmark+2)  
0b72 32 a8 fd			ld (debug_mark+2),a  
0b75 18 03			jr .pastdmark  
0b77 ..			.dmark: db "AP1"  
0b7a f1			.pastdmark: pop af  
0b7b			endm  
# End of macro DMARK
0b7b					CALLMONITOR 
0b7b cd aa fd			call debug_vector  
0b7e				endm  
# End of macro CALLMONITOR
0b7e				endif 
0b7e			 
0b7e 7d				ld a, l 
0b7f 32 a9 f9			ld (store_tmpid), a 
0b82			 
0b82				; get file header  
0b82			 
0b82 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b84 3a a9 f9			ld a, (store_tmpid) 
0b87 5f				ld e, a 
0b88			 
0b88 21 40 00				ld hl, STORE_BLOCK_PHY 
0b8b cd a4 07				call storage_findnextid 
0b8e			 
0b8e cd 04 10			call ishlzero 
0b91 28 cc			jr z, .sa_notfound 
0b93			 
0b93 22 a0 f9			ld (store_tmppageid), hl 
0b96			 
0b96				; TODO handle file id not found 
0b96			 
0b96				if DEBUG_STORESE 
0b96					DMARK "AP2" 
0b96 f5				push af  
0b97 3a ab 0b			ld a, (.dmark)  
0b9a 32 a6 fd			ld (debug_mark),a  
0b9d 3a ac 0b			ld a, (.dmark+1)  
0ba0 32 a7 fd			ld (debug_mark+1),a  
0ba3 3a ad 0b			ld a, (.dmark+2)  
0ba6 32 a8 fd			ld (debug_mark+2),a  
0ba9 18 03			jr .pastdmark  
0bab ..			.dmark: db "AP2"  
0bae f1			.pastdmark: pop af  
0baf			endm  
# End of macro DMARK
0baf					CALLMONITOR 
0baf cd aa fd			call debug_vector  
0bb2				endm  
# End of macro CALLMONITOR
0bb2				endif 
0bb2			 
0bb2				; update file extent count 
0bb2			 
0bb2 11 b5 f9			ld de, store_page 
0bb5			 
0bb5 cd 71 04			call storage_read_block 
0bb8			 
0bb8				if DEBUG_STORESE 
0bb8					DMARK "AP3" 
0bb8 f5				push af  
0bb9 3a cd 0b			ld a, (.dmark)  
0bbc 32 a6 fd			ld (debug_mark),a  
0bbf 3a ce 0b			ld a, (.dmark+1)  
0bc2 32 a7 fd			ld (debug_mark+1),a  
0bc5 3a cf 0b			ld a, (.dmark+2)  
0bc8 32 a8 fd			ld (debug_mark+2),a  
0bcb 18 03			jr .pastdmark  
0bcd ..			.dmark: db "AP3"  
0bd0 f1			.pastdmark: pop af  
0bd1			endm  
# End of macro DMARK
0bd1					CALLMONITOR 
0bd1 cd aa fd			call debug_vector  
0bd4				endm  
# End of macro CALLMONITOR
0bd4				endif 
0bd4			;	ld (store_tmppageid), hl 
0bd4			 
0bd4 3a b7 f9			ld a, (store_page+2) 
0bd7 3c				inc a 
0bd8 32 b7 f9			ld (store_page+2), a 
0bdb 32 a8 f9			ld (store_tmpext), a 
0bde				 
0bde				if DEBUG_STORESE 
0bde					DMARK "AP3" 
0bde f5				push af  
0bdf 3a f3 0b			ld a, (.dmark)  
0be2 32 a6 fd			ld (debug_mark),a  
0be5 3a f4 0b			ld a, (.dmark+1)  
0be8 32 a7 fd			ld (debug_mark+1),a  
0beb 3a f5 0b			ld a, (.dmark+2)  
0bee 32 a8 fd			ld (debug_mark+2),a  
0bf1 18 03			jr .pastdmark  
0bf3 ..			.dmark: db "AP3"  
0bf6 f1			.pastdmark: pop af  
0bf7			endm  
# End of macro DMARK
0bf7					CALLMONITOR 
0bf7 cd aa fd			call debug_vector  
0bfa				endm  
# End of macro CALLMONITOR
0bfa				endif 
0bfa 2a a0 f9			ld hl, (store_tmppageid) 
0bfd 11 b5 f9			ld de, store_page 
0c00 cd d6 04			call storage_write_block 
0c03			 
0c03				; find free block 
0c03			 
0c03 11 00 00			ld de, 0			 ; file extent to locate 
0c06			 
0c06 21 40 00				ld hl, STORE_BLOCK_PHY 
0c09 cd a4 07				call storage_findnextid 
0c0c cd 04 10			call ishlzero 
0c0f ca 5f 0b			jp z, .sa_notfound 
0c12			 
0c12					; TODO handle no space left 
0c12					 
0c12 22 a0 f9				ld (store_tmppageid), hl 
0c15			 
0c15				if DEBUG_STORESE 
0c15					DMARK "AP4" 
0c15 f5				push af  
0c16 3a 2a 0c			ld a, (.dmark)  
0c19 32 a6 fd			ld (debug_mark),a  
0c1c 3a 2b 0c			ld a, (.dmark+1)  
0c1f 32 a7 fd			ld (debug_mark+1),a  
0c22 3a 2c 0c			ld a, (.dmark+2)  
0c25 32 a8 fd			ld (debug_mark+2),a  
0c28 18 03			jr .pastdmark  
0c2a ..			.dmark: db "AP4"  
0c2d f1			.pastdmark: pop af  
0c2e			endm  
# End of macro DMARK
0c2e					CALLMONITOR 
0c2e cd aa fd			call debug_vector  
0c31				endm  
# End of macro CALLMONITOR
0c31				endif 
0c31					; init the buffer with zeros so we can id if the buffer is full or not 
0c31			 
0c31 e5					push hl 
0c32 c5					push bc 
0c33			 
0c33 21 b5 f9				ld hl, store_page 
0c36 06 40				ld b, STORE_BLOCK_PHY 
0c38 3e 00				ld a, 0 
0c3a 77			.zeroblock:	ld (hl), a 
0c3b 23					inc hl 
0c3c 10 fc				djnz .zeroblock 
0c3e			 
0c3e c1					pop bc 
0c3f e1					pop hl 
0c40			 
0c40					; construct block 
0c40			 
0c40 3a a9 f9				ld a, (store_tmpid) 
0c43 32 b5 f9				ld (store_page), a   ; file id 
0c46 3a a8 f9				ld a, (store_tmpext)   ; extent for this block 
0c49 32 b6 f9				ld (store_page+1), a 
0c4c			 
0c4c e1					pop hl    ; get string to write 
0c4d 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c4f 11 b7 f9				ld de, store_page+2 
0c52			 
0c52				if DEBUG_STORESE 
0c52					DMARK "AP5" 
0c52 f5				push af  
0c53 3a 67 0c			ld a, (.dmark)  
0c56 32 a6 fd			ld (debug_mark),a  
0c59 3a 68 0c			ld a, (.dmark+1)  
0c5c 32 a7 fd			ld (debug_mark+1),a  
0c5f 3a 69 0c			ld a, (.dmark+2)  
0c62 32 a8 fd			ld (debug_mark+2),a  
0c65 18 03			jr .pastdmark  
0c67 ..			.dmark: db "AP5"  
0c6a f1			.pastdmark: pop af  
0c6b			endm  
# End of macro DMARK
0c6b					CALLMONITOR 
0c6b cd aa fd			call debug_vector  
0c6e				endm  
# End of macro CALLMONITOR
0c6e				endif 
0c6e			 
0c6e			 
0c6e			 
0c6e					; fill buffer with data until end of string or full block 
0c6e			 
0c6e 7e			.appd:		ld a, (hl) 
0c6f 12					ld (de), a 
0c70 fe 00				cp 0 
0c72 28 04				jr z, .appdone 
0c74 23					inc hl 
0c75 13					inc de 
0c76 10 f6				djnz .appd 
0c78			 
0c78 e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c79 f5					push af   		; save last byte dumped 
0c7a			 
0c7a			 
0c7a 2a a0 f9			ld hl, (store_tmppageid) 
0c7d 11 b5 f9			ld de, store_page 
0c80				if DEBUG_STORESE 
0c80					DMARK "AP6" 
0c80 f5				push af  
0c81 3a 95 0c			ld a, (.dmark)  
0c84 32 a6 fd			ld (debug_mark),a  
0c87 3a 96 0c			ld a, (.dmark+1)  
0c8a 32 a7 fd			ld (debug_mark+1),a  
0c8d 3a 97 0c			ld a, (.dmark+2)  
0c90 32 a8 fd			ld (debug_mark+2),a  
0c93 18 03			jr .pastdmark  
0c95 ..			.dmark: db "AP6"  
0c98 f1			.pastdmark: pop af  
0c99			endm  
# End of macro DMARK
0c99					CALLMONITOR 
0c99 cd aa fd			call debug_vector  
0c9c				endm  
# End of macro CALLMONITOR
0c9c				endif 
0c9c cd d6 04				call storage_write_block 
0c9f			 
0c9f			 
0c9f				; was that a full block of data written? 
0c9f				; any more to write out? 
0c9f			 
0c9f				; if yes then set vars and jump to start of function again 
0c9f			 
0c9f f1					pop af 
0ca0 d1					pop de 
0ca1			 
0ca1 fe 00				cp 0		 ; no, string was fully written 
0ca3 c8					ret z 
0ca4			 
0ca4					; setup vars for next cycle 
0ca4			 
0ca4 3a a9 f9				ld a, (store_tmpid) 
0ca7 6f					ld l, a 
0ca8 26 00				ld h, 0 
0caa			 
0caa c3 61 0b			 	jp storage_append	 ; yes, need to write out some more 
0cad			 
0cad			 
0cad			 
0cad			 
0cad			 
0cad			 
0cad			 
0cad			if DEBUG_STORECF 
0cad			storageput:	 
0cad					ret 
0cad			storageread: 
0cad					ld hl, store_page 
0cad					ld b, 200 
0cad					ld a,0 
0cad			.src:		ld (hl),a 
0cad					inc hl 
0cad					djnz .src 
0cad					 
0cad			 
0cad					ld de, 0 
0cad					ld bc, 1 
0cad					ld hl, store_page 
0cad					call cfRead 
0cad			 
0cad				call cfGetError 
0cad				ld hl,scratch 
0cad				call hexout 
0cad				ld hl, scratch+2 
0cad				ld a, 0 
0cad				ld (hl),a 
0cad				ld de, scratch 
0cad				ld a,display_row_1 
0cad				call str_at_display 
0cad				call update_display 
0cad			 
0cad					ld hl, store_page 
0cad					ld (os_cur_ptr),hl 
0cad			 
0cad					ret 
0cad			endif 
0cad			 
0cad			 
0cad			; Clear out the main buffer store (used to remove junk before writing a new block) 
0cad			 
0cad			storage_clear_page: 
0cad e5				push hl 
0cae d5				push de 
0caf c5				push bc 
0cb0 21 b5 f9			ld hl, store_page 
0cb3 3e 00			ld a, 0 
0cb5 77				ld (hl), a 
0cb6			 
0cb6 11 b6 f9			ld de, store_page+1 
0cb9 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0cbc			 
0cbc ed b0			ldir 
0cbe				 
0cbe c1				pop bc 
0cbf d1				pop de 
0cc0 e1				pop hl 
0cc1 c9				ret 
0cc2			 
0cc2			; eof 
# End of file firmware_storage.asm
0cc2			  
0cc2			; support routines for above hardware abstraction layer  
0cc2			  
0cc2			include "firmware_general.asm"        ; general support functions  
0cc2			 
0cc2			; word look up 
0cc2			 
0cc2			; in 
0cc2			; a is the index 
0cc2			; hl is pointer start of array 
0cc2			; 
0cc2			; returns 
0cc2			; hl to the word 
0cc2			; 
0cc2			 
0cc2			table_lookup:  
0cc2 d5					push de 
0cc3 eb					ex de, hl 
0cc4			 
0cc4 6f					ld l, a 
0cc5 26 00				ld h, 0 
0cc7 29					add hl, hl 
0cc8 19					add hl, de 
0cc9 7e					ld a, (hl) 
0cca 23					inc hl 
0ccb 66					ld h,(hl) 
0ccc 6f					ld l, a 
0ccd			 
0ccd d1					pop de 
0cce c9					ret 
0ccf			 
0ccf			; Delay loops 
0ccf			 
0ccf			 
0ccf			 
0ccf			aDelayInMS: 
0ccf c5				push bc 
0cd0 47				ld b,a 
0cd1			msdelay: 
0cd1 c5				push bc 
0cd2				 
0cd2			 
0cd2 01 41 00			ld bc,041h 
0cd5 cd ed 0c			call delayloop 
0cd8 c1				pop bc 
0cd9 05				dec b 
0cda 20 f5			jr nz,msdelay 
0cdc			 
0cdc			;if CPU_CLOCK_8MHZ 
0cdc			;msdelay8: 
0cdc			;	push bc 
0cdc			;	 
0cdc			; 
0cdc			;	ld bc,041h 
0cdc			;	call delayloop 
0cdc			;	pop bc 
0cdc			;	dec b 
0cdc			;	jr nz,msdelay8 
0cdc			;endif 
0cdc			 
0cdc			 
0cdc c1				pop bc 
0cdd c9				ret 
0cde			 
0cde			 
0cde			delay250ms: 
0cde				;push de 
0cde 01 00 40			ld bc, 04000h 
0ce1 c3 ed 0c			jp delayloop 
0ce4			delay500ms: 
0ce4				;push de 
0ce4 01 00 80			ld bc, 08000h 
0ce7 c3 ed 0c			jp delayloop 
0cea			delay1s: 
0cea				;push bc 
0cea			   ; Clobbers A, d and e 
0cea 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0ced			delayloop: 
0ced c5			    push bc 
0cee			 
0cee			if BASE_CPM 
0cee				ld bc, CPM_DELAY_TUNE 
0cee			.cpmloop: 
0cee				push bc 
0cee			 
0cee			endif 
0cee			 
0cee			 
0cee			 
0cee			delayloopi: 
0cee			;	push bc 
0cee			;.dl: 
0cee cb 47		    bit     0,a    	; 8 
0cf0 cb 47		    bit     0,a    	; 8 
0cf2 cb 47		    bit     0,a    	; 8 
0cf4 e6 ff		    and     255  	; 7 
0cf6 0b			    dec     bc      	; 6 
0cf7 79			    ld      a,c     	; 4 
0cf8 b0			    or      b     	; 4 
0cf9 c2 ee 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cfc			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cfc				;pop de 
0cfc			;pop bc 
0cfc			 
0cfc			if BASE_CPM 
0cfc				pop bc 
0cfc				 
0cfc			    dec     bc      	; 6 
0cfc			    ld      a,c     	; 4 
0cfc			    or      b     	; 4 
0cfc			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cfc				 
0cfc			 
0cfc			endif 
0cfc			;if CPU_CLOCK_8MHZ 
0cfc			;    pop bc 
0cfc			;    push bc 
0cfc			;.dl8: 
0cfc			;    bit     0,a    	; 8 
0cfc			;    bit     0,a    	; 8 
0cfc			;    bit     0,a    	; 8 
0cfc			;    and     255  	; 7 
0cfc			;    dec     bc      	; 6 
0cfc			;    ld      a,c     	; 4 
0cfc			;    or      b     	; 4 
0cfc			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cfc			;endif 
0cfc			 
0cfc			;if CPU_CLOCK_10MHZ 
0cfc			;    pop bc 
0cfc			;    push bc 
0cfc			;.dl8: 
0cfc			;    bit     0,a    	; 8 
0cfc			;    bit     0,a    	; 8 
0cfc			;    bit     0,a    	; 8 
0cfc			;    and     255  	; 7 
0cfc			;    dec     bc      	; 6 
0cfc			;    ld      a,c     	; 4 
0cfc			;    or      b     	; 4 
0cfc			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cfc			;endif 
0cfc c1			    pop bc 
0cfd			 
0cfd c9				ret 
0cfe			 
0cfe			 
0cfe			 
0cfe			; eof 
# End of file firmware_general.asm
0cfe			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0cfe			; display routines that use the physical hardware abstraction layer 
0cfe			 
0cfe			 
0cfe			; Display an activity indicator 
0cfe			; Each call returns the new char pointed to in hl 
0cfe			 
0cfe			active: 
0cfe 3a 01 fb			ld a, (display_active) 
0d01 fe 06			cp 6 
0d03			 
0d03 20 02			jr nz, .sne 
0d05				; gone past the last one reset sequence 
0d05 3e ff			ld a, 255 
0d07			 
0d07			.sne:   
0d07				; get the next char in seq 
0d07 3c				inc a 
0d08 32 01 fb			ld (display_active), a 
0d0b			 
0d0b				; look up the string in the table 
0d0b 21 22 0d			ld hl, actseq 
0d0e cb 27			sla a 
0d10 cd db 0f			call addatohl 
0d13 cd 6c 23			call loadwordinhl 
0d16			 
0d16				; forth will write the to string when pushing so move from rom to ram 
0d16			 
0d16 11 02 fb			ld de, display_active+1 
0d19 01 02 00			ld bc, 2 
0d1c ed b0			ldir 
0d1e			 
0d1e 21 02 fb			ld hl, display_active+1 
0d21 c9				ret 
0d22				 
0d22				 
0d22			 
0d22			 
0d22			;db "|/-\|-\" 
0d22			 
0d22			actseq: 
0d22			 
0d22 30 0d		dw spin0 
0d24 32 0d		dw spin1 
0d26 34 0d		dw spin2 
0d28 36 0d		dw spin3 
0d2a 34 0d		dw spin2 
0d2c 32 0d		dw spin1 
0d2e 30 0d		dw spin0 
0d30			 
0d30 .. 00		spin0: db " ", 0 
0d32 .. 00		spin1: db "-", 0 
0d34 .. 00		spin2: db "+", 0 
0d36 .. 00		spin3: db "#", 0 
0d38			 
0d38			 
0d38			; information window 
0d38			 
0d38			; pass hl with 1st string to display 
0d38			; pass de with 2nd string to display 
0d38			 
0d38			info_panel: 
0d38 e5				push hl 
0d39			 
0d39 2a 07 fb			ld hl, (display_fb_active) 
0d3c e5				push hl    ; future de destination 
0d3d 21 ec fc				ld hl, display_fb0 
0d40 22 07 fb				ld (display_fb_active), hl 
0d43			 
0d43			;	call clear_display 
0d43			 
0d43				if BASE_CPM 
0d43				ld a, '.' 
0d43				else 
0d43 3e a5			ld a, 165 
0d45				endif 
0d45 cd ac 0d			call fill_display 
0d48			 
0d48			 
0d48 3e 55			ld a, display_row_3 + 5 
0d4a cd ba 0d			call str_at_display 
0d4d			 
0d4d e1				pop hl 
0d4e d1				pop de 
0d4f			 
0d4f e5				push hl 
0d50			 
0d50			 
0d50 3e 2d			ld a, display_row_2 + 5 
0d52 cd ba 0d			call str_at_display 
0d55			 
0d55			 
0d55 cd ca 0d			call update_display 
0d58 cd a7 1f			call next_page_prompt 
0d5b cd a7 0d			call clear_display 
0d5e			 
0d5e				 
0d5e 21 4b fc				ld hl, display_fb1 
0d61 22 07 fb				ld (display_fb_active), hl 
0d64 cd ca 0d			call update_display 
0d67			 
0d67 e1				pop hl 
0d68			 
0d68 c9				ret 
0d69			 
0d69			 
0d69			 
0d69			 
0d69			; TODO windowing? 
0d69			 
0d69			; TODO scroll line up 
0d69			 
0d69			scroll_up: 
0d69			 
0d69 e5				push hl 
0d6a d5				push de 
0d6b c5				push bc 
0d6c			 
0d6c				; get frame buffer  
0d6c			 
0d6c 2a 07 fb			ld hl, (display_fb_active) 
0d6f e5				push hl    ; future de destination 
0d70			 
0d70 11 28 00			ld  de, display_cols 
0d73 19				add hl, de 
0d74			 
0d74 d1				pop de 
0d75			 
0d75				;ex de, hl 
0d75 01 9f 00			ld bc, display_fb_len -1  
0d78			;if DEBUG_FORTH_WORDS 
0d78			;	DMARK "SCL" 
0d78			;	CALLMONITOR 
0d78			;endif	 
0d78 ed b0			ldir 
0d7a			 
0d7a				; wipe bottom row 
0d7a			 
0d7a			 
0d7a 2a 07 fb			ld hl, (display_fb_active) 
0d7d 11 a0 00			ld de, display_cols*display_rows 
0d80 19				add hl, de 
0d81 06 28			ld b, display_cols 
0d83 3e 20			ld a, ' ' 
0d85			.scwipe: 
0d85 77				ld (hl), a 
0d86 2b				dec hl 
0d87 10 fc			djnz .scwipe 
0d89			 
0d89				;pop hl 
0d89			 
0d89 c1				pop bc 
0d8a d1				pop de 
0d8b e1				pop hl 
0d8c			 
0d8c c9				ret 
0d8d			 
0d8d			 
0d8d			;scroll_upo: 
0d8d			;	ld de, display_row_1 
0d8d			 ;	ld hl, display_row_2 
0d8d			;	ld bc, display_cols 
0d8d			;	ldir 
0d8d			;	ld de, display_row_2 
0d8d			 ;	ld hl, display_row_3 
0d8d			;	ld bc, display_cols 
0d8d			;	ldir 
0d8d			;	ld de, display_row_3 
0d8d			 ;	ld hl, display_row_4 
0d8d			;	ld bc, display_cols 
0d8d			;	ldir 
0d8d			 
0d8d			; TODO clear row 4 
0d8d			 
0d8d			;	ret 
0d8d			 
0d8d				 
0d8d			scroll_down: 
0d8d			 
0d8d e5				push hl 
0d8e d5				push de 
0d8f c5				push bc 
0d90			 
0d90				; get frame buffer  
0d90			 
0d90 2a 07 fb			ld hl, (display_fb_active) 
0d93			 
0d93 11 9f 00			ld de, display_fb_len - 1 
0d96 19				add hl, de 
0d97			 
0d97 e5			push hl    ; future de destination 
0d98			 
0d98 11 28 00			ld  de, display_cols 
0d9b ed 52			sbc hl, de 
0d9d			 
0d9d			 
0d9d d1				pop de 
0d9e			 
0d9e			;	ex de, hl 
0d9e 01 9f 00			ld bc, display_fb_len -1  
0da1			 
0da1			 
0da1				 
0da1			 
0da1 ed b0			ldir 
0da3			 
0da3				; wipe bottom row 
0da3			 
0da3			 
0da3			;	ld hl, (display_fb_active) 
0da3			;;	ld de, display_cols*display_rows 
0da3			;;	add hl, de 
0da3			;	ld b, display_cols 
0da3			;	ld a, ' ' 
0da3			;.scwiped: 
0da3			;	ld (hl), a 
0da3			;	dec hl 
0da3			;	djnz .scwiped 
0da3			 
0da3				;pop hl 
0da3			 
0da3 c1				pop bc 
0da4 d1				pop de 
0da5 e1				pop hl 
0da6			 
0da6 c9				ret 
0da7			;scroll_down: 
0da7			;	ld de, display_row_4 
0da7			;	ld hl, display_row_3 
0da7			;	ld bc, display_cols 
0da7			;	ldir 
0da7			;	ld de, display_row_3 
0da7			; 	ld hl, display_row_2 
0da7			;	ld bc, display_cols 
0da7			;	ldir 
0da7			;	ld de, display_row_2 
0da7			;	ld hl, display_row_1 
0da7			;	ld bc, display_cols 
0da7			;	ldir 
0da7			;;; TODO clear row 1 
0da7			;	ret 
0da7			 
0da7			 
0da7			 
0da7			 
0da7			 
0da7			; clear active frame buffer 
0da7			 
0da7			clear_display: 
0da7 3e 20			ld a, ' ' 
0da9 c3 ac 0d			jp fill_display 
0dac			 
0dac			; fill active frame buffer with a char in A 
0dac			 
0dac			fill_display: 
0dac 06 a0			ld b,display_fb_len 
0dae 2a 07 fb			ld hl, (display_fb_active) 
0db1 77			.fd1:	ld (hl),a 
0db2 23				inc hl 
0db3 10 fc			djnz .fd1 
0db5 23				inc hl 
0db6 3e 00			ld a,0 
0db8 77				ld (hl),a 
0db9			 
0db9			 
0db9 c9				ret 
0dba			; Write string (DE) at pos (A) to active frame buffer 
0dba			 
0dba 2a 07 fb		str_at_display:    ld hl,(display_fb_active) 
0dbd 06 00					ld b,0 
0dbf 4f					ld c,a 
0dc0 09					add hl,bc 
0dc1 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0dc2 b7			            OR   A              ;Null terminator? 
0dc3 c8			            RET  Z              ;Yes, so finished 
0dc4 77					ld (hl),a 
0dc5 23				inc hl 
0dc6 13			            INC  DE             ;Point to next character 
0dc7 18 f8		            JR   .sad1     ;Repeat 
0dc9 c9					ret 
0dca			 
0dca			; using current frame buffer write to physical display 
0dca			 
0dca			update_display: 
0dca e5				push hl 
0dcb 2a 07 fb			ld hl, (display_fb_active) 
0dce cd 79 6f			call write_display 
0dd1 e1				pop hl 
0dd2 c9				ret 
0dd3			 
0dd3			; TODO scrolling 
0dd3			 
0dd3			 
0dd3			; move cursor right one char 
0dd3			cursor_right: 
0dd3			 
0dd3				; TODO shift right 
0dd3				; TODO if beyond max col 
0dd3				; TODO       cursor_next_line 
0dd3			 
0dd3 c9				ret 
0dd4			 
0dd4			 
0dd4			cursor_next_line: 
0dd4				; TODO first char 
0dd4				; TODO line down 
0dd4				; TODO if past last row 
0dd4				; TODO    scroll up 
0dd4			 
0dd4 c9				ret 
0dd5			 
0dd5			cursor_left: 
0dd5				; TODO shift left 
0dd5				; TODO if beyond left  
0dd5				; TODO     cursor prev line 
0dd5				 
0dd5 c9				ret 
0dd6			 
0dd6			cursor_prev_line: 
0dd6				; TODO last char 
0dd6				; TODO line up 
0dd6				; TODO if past first row 
0dd6				; TODO   scroll down 
0dd6			 
0dd6 c9				ret 
0dd7			 
0dd7			 
0dd7			cout: 
0dd7				; A - char 
0dd7 c9				ret 
0dd8			 
0dd8			 
0dd8			; Display a menu and allow item selection (optional toggle items) 
0dd8			; 
0dd8			; format: 
0dd8			; hl pointer to word array with zero term for items 
0dd8			; e.g.    db item1 
0dd8			;         db .... 
0dd8			;         db 0 
0dd8			; 
0dd8			; a = starting menu item  
0dd8			; 
0dd8			; de = pointer item toggle array   (todo) 
0dd8			; 
0dd8			; returns item selected in a 1-... 
0dd8			; returns 0 if back button pressed 
0dd8			; 
0dd8			; NOTE: Uses system frame buffer to display 
0dd8			; 
0dd8			; LEFT, Q = go back 
0dd8			; RIGHT, SPACE, CR = select 
0dd8			; UP, A - Up 
0dd8			; DOWN, Z - Down 
0dd8			 
0dd8			 
0dd8			 
0dd8			 
0dd8			 
0dd8			menu: 
0dd8			 
0dd8					; keep array pointer 
0dd8			 
0dd8 22 ae f9				ld (store_tmp1), hl 
0ddb 32 ac f9				ld (store_tmp2), a 
0dde			 
0dde					; check for key bounce 
0dde			 
0dde			if BASE_KEV 
0dde			 
0dde cd c4 72		.mbounce:	call cin 
0de1 fe 00				cp 0 
0de3 20 f9				jr nz, .mbounce 
0de5			endif 
0de5					; for ease use ex 
0de5			 
0de5					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0de5 21 ec fc				ld hl, display_fb0 
0de8 22 07 fb				ld (display_fb_active), hl 
0deb			 
0deb cd a7 0d		.mloop:		call clear_display 
0dee cd ca 0d				call update_display 
0df1			 
0df1					; draw selection id '>' at 1 
0df1			 
0df1					; init start of list display 
0df1			 
0df1 3e 05				ld a, 5 
0df3 32 aa f9				ld (store_tmp3), a   ; display row count 
0df6 3a ac f9				ld a,( store_tmp2) 
0df9 32 ad f9				ld (store_tmp2+1), a   ; display item count 
0dfc			 
0dfc					 
0dfc			.mitem:	 
0dfc			 
0dfc			 
0dfc 3a ad f9				ld a,(store_tmp2+1) 
0dff 6f					ld l, a 
0e00 26 00				ld h, 0 
0e02 29					add hl, hl 
0e03 ed 5b ae f9			ld de, (store_tmp1) 
0e07 19					add hl, de 
0e08 7e					ld a, (hl) 
0e09 23					inc hl 
0e0a 66					ld h,(hl) 
0e0b 6f					ld l, a 
0e0c			 
0e0c cd 04 10				call ishlzero 
0e0f 28 1a				jr z, .mdone 
0e11			 
0e11 eb					ex de, hl 
0e12 3a aa f9				ld a, (store_tmp3) 
0e15 cd ba 0d				call str_at_display 
0e18					 
0e18			 
0e18					; next item 
0e18 3a ad f9				ld a, (store_tmp2+1) 
0e1b 3c					inc a 
0e1c 32 ad f9				ld (store_tmp2+1), a   ; display item count 
0e1f			 
0e1f			 		; next row 
0e1f			 
0e1f 3a aa f9				ld a, (store_tmp3) 
0e22 c6 28				add display_cols 
0e24 32 aa f9				ld (store_tmp3), a 
0e27			 
0e27					; at end of screen? 
0e27			 
0e27 fe 10				cp display_rows*4 
0e29 20 d1				jr nz, .mitem 
0e2b			 
0e2b			 
0e2b			.mdone: 
0e2b cd 04 10				call ishlzero 
0e2e 28 08				jr z, .nodn 
0e30			 
0e30 3e 78				ld a, display_row_4 
0e32 11 b1 0e				ld de, .mdown 
0e35 cd ba 0d				call str_at_display 
0e38			 
0e38					; draw options to fill the screens with active item on line 1 
0e38					; if current option is 2 or more then display ^ in top 
0e38			 
0e38 3a ac f9		.nodn:		ld a, (store_tmp2) 
0e3b fe 00				cp 0 
0e3d 28 08				jr z, .noup 
0e3f			 
0e3f 3e 00				ld a, 0 
0e41 11 af 0e				ld de, .mup 
0e44 cd ba 0d				call str_at_display 
0e47			 
0e47 3e 02		.noup:		ld a, 2 
0e49 11 ad 0e				ld de, .msel 
0e4c cd ba 0d				call str_at_display 
0e4f			 
0e4f					; if current option + 1 is not null then display V in bottom 
0e4f					; get key 
0e4f cd ca 0d				call update_display 
0e52			 
0e52			 
0e52					; handle key 
0e52			 
0e52 cd b3 72				call cin_wait 
0e55			 
0e55 fe 05				cp KEY_UP 
0e57 28 2b				jr z, .mgoup 
0e59 fe 61				cp 'a' 
0e5b 28 27				jr z, .mgoup 
0e5d fe 0a				cp KEY_DOWN 
0e5f 28 32				jr z, .mgod 
0e61 fe 7a				cp 'z' 
0e63 28 2e				jr z, .mgod 
0e65 fe 20				cp ' ' 
0e67 28 34				jr z, .goend 
0e69 fe 0c				cp KEY_RIGHT 
0e6b 28 30				jr z, .goend 
0e6d fe 0d				cp KEY_CR 
0e6f 28 2c				jr z, .goend 
0e71 fe 71				cp 'q' 
0e73 28 0b				jr z, .goback 
0e75			 
0e75 fe 0b				cp KEY_LEFT 
0e77 28 07				jr z, .goback 
0e79 fe 08				cp KEY_BS 
0e7b 28 03				jr z, .goback 
0e7d c3 eb 0d				jp .mloop 
0e80			 
0e80			.goback: 
0e80 3e 00			ld a, 0 
0e82 18 1d			jr .goend2 
0e84			 
0e84				; move up one 
0e84			.mgoup: 
0e84 3a ac f9				ld a, (store_tmp2) 
0e87 fe 00				cp 0 
0e89 ca eb 0d				jp z, .mloop 
0e8c 3d					dec a 
0e8d 32 ac f9				ld (store_tmp2), a 
0e90 c3 eb 0d				jp .mloop 
0e93			 
0e93				; move down one 
0e93			.mgod: 
0e93 3a ac f9				ld a, (store_tmp2) 
0e96 3c					inc a 
0e97 32 ac f9				ld (store_tmp2), a 
0e9a c3 eb 0d				jp .mloop 
0e9d			 
0e9d			 
0e9d			.goend: 
0e9d					; get selected item number 
0e9d			 
0e9d 3a ac f9				ld a, (store_tmp2) 
0ea0 3c					inc a 
0ea1			 
0ea1			.goend2: 
0ea1 f5					push af 
0ea2			 
0ea2					; restore active fb 
0ea2					; TODO BUG assumes fb1 
0ea2			 
0ea2 21 4b fc				ld hl, display_fb1 
0ea5 22 07 fb				ld (display_fb_active), hl 
0ea8			 
0ea8					; restore main regs 
0ea8			 
0ea8			 
0ea8 cd ca 0d				call update_display 
0eab			 
0eab f1					pop af 
0eac			 
0eac c9				ret 
0ead			 
0ead .. 00		.msel:   db ">",0 
0eaf .. 00		.mup:   db "^",0 
0eb1 .. 00		.mdown:   db "v",0 
0eb3			 
0eb3			 
0eb3			; eof 
0eb3			 
# End of file firmware_display.asm
0eb3			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0eb3			; random number generators 
0eb3			 
0eb3			 
0eb3			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0eb3			 
0eb3			 
0eb3			;-----> Generate a random number 
0eb3			; output a=answer 0<=a<=255 
0eb3			; all registers are preserved except: af 
0eb3			random: 
0eb3 e5			        push    hl 
0eb4 d5			        push    de 
0eb5 2a e6 fa		        ld      hl,(randData) 
0eb8 ed 5f		        ld      a,r 
0eba 57			        ld      d,a 
0ebb 5e			        ld      e,(hl) 
0ebc 19			        add     hl,de 
0ebd 85			        add     a,l 
0ebe ac			        xor     h 
0ebf 22 e6 fa		        ld      (randData),hl 
0ec2 d1			        pop     de 
0ec3 e1			        pop     hl 
0ec4 c9			        ret 
0ec5			 
0ec5			 
0ec5			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0ec5			 
0ec5			 
0ec5			 
0ec5			;------LFSR------ 
0ec5			;James Montelongo 
0ec5			;optimized by Spencer Putt 
0ec5			;out: 
0ec5			; a = 8 bit random number 
0ec5			RandLFSR: 
0ec5 21 ec fa		        ld hl,LFSRSeed+4 
0ec8 5e			        ld e,(hl) 
0ec9 23			        inc hl 
0eca 56			        ld d,(hl) 
0ecb 23			        inc hl 
0ecc 4e			        ld c,(hl) 
0ecd 23			        inc hl 
0ece 7e			        ld a,(hl) 
0ecf 47			        ld b,a 
0ed0 cb 13		        rl e  
0ed2 cb 12			rl d 
0ed4 cb 11		        rl c  
0ed6 17				rla 
0ed7 cb 13		        rl e  
0ed9 cb 12			rl d 
0edb cb 11		        rl c  
0edd 17				rla 
0ede cb 13		        rl e  
0ee0 cb 12			rl d 
0ee2 cb 11		        rl c  
0ee4 17				rla 
0ee5 67			        ld h,a 
0ee6 cb 13		        rl e  
0ee8 cb 12			rl d 
0eea cb 11		        rl c  
0eec 17				rla 
0eed a8			        xor b 
0eee cb 13		        rl e  
0ef0 cb 12			rl d 
0ef2 ac			        xor h 
0ef3 a9			        xor c 
0ef4 aa			        xor d 
0ef5 21 ee fa		        ld hl,LFSRSeed+6 
0ef8 11 ef fa		        ld de,LFSRSeed+7 
0efb 01 07 00		        ld bc,7 
0efe ed b8		        lddr 
0f00 12			        ld (de),a 
0f01 c9			        ret 
0f02			 
0f02			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0f02			 
0f02			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0f02			 
0f02			 
0f02			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0f02			 
0f02			prng16: 
0f02			;Inputs: 
0f02			;   (seed1) contains a 16-bit seed value 
0f02			;   (seed2) contains a NON-ZERO 16-bit seed value 
0f02			;Outputs: 
0f02			;   HL is the result 
0f02			;   BC is the result of the LCG, so not that great of quality 
0f02			;   DE is preserved 
0f02			;Destroys: 
0f02			;   AF 
0f02			;cycle: 4,294,901,760 (almost 4.3 billion) 
0f02			;160cc 
0f02			;26 bytes 
0f02 2a e0 fa		    ld hl,(seed1) 
0f05 44			    ld b,h 
0f06 4d			    ld c,l 
0f07 29			    add hl,hl 
0f08 29			    add hl,hl 
0f09 2c			    inc l 
0f0a 09			    add hl,bc 
0f0b 22 e0 fa		    ld (seed1),hl 
0f0e 2a de fa		    ld hl,(seed2) 
0f11 29			    add hl,hl 
0f12 9f			    sbc a,a 
0f13 e6 2d		    and %00101101 
0f15 ad			    xor l 
0f16 6f			    ld l,a 
0f17 22 de fa		    ld (seed2),hl 
0f1a 09			    add hl,bc 
0f1b c9			    ret 
0f1c			 
0f1c			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0f1c			 
0f1c			rand32: 
0f1c			;Inputs: 
0f1c			;   (seed1_0) holds the lower 16 bits of the first seed 
0f1c			;   (seed1_1) holds the upper 16 bits of the first seed 
0f1c			;   (seed2_0) holds the lower 16 bits of the second seed 
0f1c			;   (seed2_1) holds the upper 16 bits of the second seed 
0f1c			;   **NOTE: seed2 must be non-zero 
0f1c			;Outputs: 
0f1c			;   HL is the result 
0f1c			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0f1c			;Destroys: 
0f1c			;   AF 
0f1c			;Tested and passes all CAcert tests 
0f1c			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0f1c			;it has a period of 18,446,744,069,414,584,320 
0f1c			;roughly 18.4 quintillion. 
0f1c			;LFSR taps: 0,2,6,7  = 11000101 
0f1c			;291cc 
0f1c			;seed1_0=$+1 
0f1c			;    ld hl,12345 
0f1c			;seed1_1=$+1 
0f1c			;    ld de,6789 
0f1c			;    ld b,h 
0f1c			;    ld c,l 
0f1c			;    add hl,hl \ rl e \ rl d 
0f1c			;    add hl,hl \ rl e \ rl d 
0f1c			;    inc l 
0f1c			;    add hl,bc 
0f1c			;    ld (seed1_0),hl 
0f1c			;    ld hl,(seed1_1) 
0f1c			;    adc hl,de 
0f1c			;    ld (seed1_1),hl 
0f1c			;    ex de,hl 
0f1c			;seed2_0=$+1 
0f1c			;    ld hl,9876 
0f1c			;seed2_1=$+1 
0f1c			;    ld bc,54321 
0f1c			;    add hl,hl \ rl c \ rl b 
0f1c			;    ld (seed2_1),bc 
0f1c			;    sbc a,a 
0f1c			;    and %11000101 
0f1c			;    xor l 
0f1c			;    ld l,a 
0f1c			;    ld (seed2_0),hl 
0f1c			;    ex de,hl 
0f1c			;    add hl,bc 
0f1c			;    ret 
0f1c			; 
0f1c			 
0f1c			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0f1c			; 20 bytes, 86 cycles (excluding ret) 
0f1c			 
0f1c			; returns   hl = pseudorandom number 
0f1c			; corrupts   a 
0f1c			 
0f1c			; generates 16-bit pseudorandom numbers with a period of 65535 
0f1c			; using the xorshift method: 
0f1c			 
0f1c			; hl ^= hl << 7 
0f1c			; hl ^= hl >> 9 
0f1c			; hl ^= hl << 8 
0f1c			 
0f1c			; some alternative shift triplets which also perform well are: 
0f1c			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0f1c			 
0f1c			;  org 32768 
0f1c			 
0f1c			xrnd: 
0f1c 2a e4 fa		  ld hl,(xrandc)       ; seed must not be 0 
0f1f 3e 00		  ld a,0 
0f21 bd			  cp l 
0f22 20 02		  jr nz, .xrnd1 
0f24 2e 01		  ld l, 1 
0f26			.xrnd1: 
0f26			 
0f26 7c			  ld a,h 
0f27 1f			  rra 
0f28 7d			  ld a,l 
0f29 1f			  rra 
0f2a ac			  xor h 
0f2b 67			  ld h,a 
0f2c 7d			  ld a,l 
0f2d 1f			  rra 
0f2e 7c			  ld a,h 
0f2f 1f			  rra 
0f30 ad			  xor l 
0f31 6f			  ld l,a 
0f32 ac			  xor h 
0f33 67			  ld h,a 
0f34			 
0f34 22 e4 fa		  ld (xrandc),hl 
0f37			 
0f37 c9			  ret 
0f38			;  
0f38			 
0f38			 
0f38			;;;; int maths 
0f38			 
0f38			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f38			; Divide 16-bit values (with 16-bit result) 
0f38			; In: Divide BC by divider DE 
0f38			; Out: BC = result, HL = rest 
0f38			; 
0f38			Div16: 
0f38 21 00 00		    ld hl,0 
0f3b 78			    ld a,b 
0f3c 06 08		    ld b,8 
0f3e			Div16_Loop1: 
0f3e 17			    rla 
0f3f ed 6a		    adc hl,hl 
0f41 ed 52		    sbc hl,de 
0f43 30 01		    jr nc,Div16_NoAdd1 
0f45 19			    add hl,de 
0f46			Div16_NoAdd1: 
0f46 10 f6		    djnz Div16_Loop1 
0f48 17			    rla 
0f49 2f			    cpl 
0f4a 47			    ld b,a 
0f4b 79			    ld a,c 
0f4c 48			    ld c,b 
0f4d 06 08		    ld b,8 
0f4f			Div16_Loop2: 
0f4f 17			    rla 
0f50 ed 6a		    adc hl,hl 
0f52 ed 52		    sbc hl,de 
0f54 30 01		    jr nc,Div16_NoAdd2 
0f56 19			    add hl,de 
0f57			Div16_NoAdd2: 
0f57 10 f6		    djnz Div16_Loop2 
0f59 17			    rla 
0f5a 2f			    cpl 
0f5b 41			    ld b,c 
0f5c 4f			    ld c,a 
0f5d c9			ret 
0f5e			 
0f5e			 
0f5e			;http://z80-heaven.wikidot.com/math 
0f5e			; 
0f5e			;Inputs: 
0f5e			;     DE and A are factors 
0f5e			;Outputs: 
0f5e			;     A is not changed 
0f5e			;     B is 0 
0f5e			;     C is not changed 
0f5e			;     DE is not changed 
0f5e			;     HL is the product 
0f5e			;Time: 
0f5e			;     342+6x 
0f5e			; 
0f5e			Mult16: 
0f5e			 
0f5e 06 08		     ld b,8          ;7           7 
0f60 21 00 00		     ld hl,0         ;10         10 
0f63 29			       add hl,hl     ;11*8       88 
0f64 07			       rlca          ;4*8        32 
0f65 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f67 19			         add hl,de   ;--         -- 
0f68 10 f9		       djnz $-5      ;13*7+8     99 
0f6a c9			ret 
0f6b			 
0f6b			; 
0f6b			; Square root of 16-bit value 
0f6b			; In:  HL = value 
0f6b			; Out:  D = result (rounded down) 
0f6b			; 
0f6b			;Sqr16: 
0f6b			;    ld de,#0040 
0f6b			;    ld a,l 
0f6b			;    ld l,h 
0f6b			;    ld h,d 
0f6b			;    or a 
0f6b			;    ld b,8 
0f6b			;Sqr16_Loop: 
0f6b			;    sbc hl,de 
0f6b			;    jr nc,Sqr16_Skip 
0f6b			;    add hl,de 
0f6b			;Sqr16_Skip: 
0f6b			;    ccf 
0f6b			;    rl d 
0f6b			;    add a,a 
0f6b			;    adc hl,hl 
0f6b			;    add a,a 
0f6b			;    adc hl,hl 
0f6b			;    djnz Sqr16_Loop 
0f6b			;    ret 
0f6b			; 
0f6b			; 
0f6b			; Divide 8-bit values 
0f6b			; In: Divide E by divider C 
0f6b			; Out: A = result, B = rest 
0f6b			; 
0f6b			Div8: 
0f6b af			    xor a 
0f6c 06 08		    ld b,8 
0f6e			Div8_Loop: 
0f6e cb 13		    rl e 
0f70 17			    rla 
0f71 91			    sub c 
0f72 30 01		    jr nc,Div8_NoAdd 
0f74 81			    add a,c 
0f75			Div8_NoAdd: 
0f75 10 f7		    djnz Div8_Loop 
0f77 47			    ld b,a 
0f78 7b			    ld a,e 
0f79 17			    rla 
0f7a 2f			    cpl 
0f7b c9			    ret 
0f7c			 
0f7c			; 
0f7c			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f7c			; In: Multiply A with DE 
0f7c			; Out: HL = result 
0f7c			; 
0f7c			Mult12U: 
0f7c 2e 00		    ld l,0 
0f7e 87			    add a,a 
0f7f 30 01		    jr nc,Mult12U_NoAdd0 
0f81 19			    add hl,de 
0f82			Mult12U_NoAdd0: 
0f82 29			    add hl,hl 
0f83 87			    add a,a 
0f84 30 01		    jr nc,Mult12U_NoAdd1 
0f86 19			    add hl,de 
0f87			Mult12U_NoAdd1: 
0f87 29			    add hl,hl 
0f88 87			    add a,a 
0f89 30 01		    jr nc,Mult12U_NoAdd2 
0f8b 19			    add hl,de 
0f8c			Mult12U_NoAdd2: 
0f8c 29			    add hl,hl 
0f8d 87			    add a,a 
0f8e 30 01		    jr nc,Mult12U_NoAdd3 
0f90 19			    add hl,de 
0f91			Mult12U_NoAdd3: 
0f91 29			    add hl,hl 
0f92 87			    add a,a 
0f93 30 01		    jr nc,Mult12U_NoAdd4 
0f95 19			    add hl,de 
0f96			Mult12U_NoAdd4: 
0f96 29			    add hl,hl 
0f97 87			    add a,a 
0f98 30 01		    jr nc,Mult12U_NoAdd5 
0f9a 19			    add hl,de 
0f9b			Mult12U_NoAdd5: 
0f9b 29			    add hl,hl 
0f9c 87			    add a,a 
0f9d 30 01		    jr nc,Mult12U_NoAdd6 
0f9f 19			    add hl,de 
0fa0			Mult12U_NoAdd6: 
0fa0 29			    add hl,hl 
0fa1 87			    add a,a 
0fa2 d0			    ret nc 
0fa3 19			    add hl,de 
0fa4 c9			    ret 
0fa5			 
0fa5			; 
0fa5			; Multiply 8-bit value with a 16-bit value (right rotating) 
0fa5			; In: Multiply A with DE 
0fa5			;      Put lowest value in A for most efficient calculation 
0fa5			; Out: HL = result 
0fa5			; 
0fa5			Mult12R: 
0fa5 21 00 00		    ld hl,0 
0fa8			Mult12R_Loop: 
0fa8 cb 3f		    srl a 
0faa 30 01		    jr nc,Mult12R_NoAdd 
0fac 19			    add hl,de 
0fad			Mult12R_NoAdd: 
0fad cb 23		    sla e 
0faf cb 12		    rl d 
0fb1 b7			    or a 
0fb2 c2 a8 0f		    jp nz,Mult12R_Loop 
0fb5 c9			    ret 
0fb6			 
0fb6			; 
0fb6			; Multiply 16-bit values (with 32-bit result) 
0fb6			; In: Multiply BC with DE 
0fb6			; Out: BCHL = result 
0fb6			; 
0fb6			Mult32: 
0fb6 79			    ld a,c 
0fb7 48			    ld c,b 
0fb8 21 00 00		    ld hl,0 
0fbb 06 10		    ld b,16 
0fbd			Mult32_Loop: 
0fbd 29			    add hl,hl 
0fbe 17			    rla 
0fbf cb 11		    rl c 
0fc1 30 07		    jr nc,Mult32_NoAdd 
0fc3 19			    add hl,de 
0fc4 ce 00		    adc a,0 
0fc6 d2 ca 0f		    jp nc,Mult32_NoAdd 
0fc9 0c			    inc c 
0fca			Mult32_NoAdd: 
0fca 10 f1		    djnz Mult32_Loop 
0fcc 41			    ld b,c 
0fcd 4f			    ld c,a 
0fce c9			    ret 
0fcf			 
0fcf			 
0fcf			 
0fcf			; 
0fcf			; Multiply 8-bit values 
0fcf			; In:  Multiply H with E 
0fcf			; Out: HL = result 
0fcf			; 
0fcf			Mult8: 
0fcf 16 00		    ld d,0 
0fd1 6a			    ld l,d 
0fd2 06 08		    ld b,8 
0fd4			Mult8_Loop: 
0fd4 29			    add hl,hl 
0fd5 30 01		    jr nc,Mult8_NoAdd 
0fd7 19			    add hl,de 
0fd8			Mult8_NoAdd: 
0fd8 10 fa		    djnz Mult8_Loop 
0fda c9			    ret 
0fdb			 
0fdb			 
0fdb			 
0fdb			 
0fdb			 
0fdb			 
0fdb			 
0fdb			 
0fdb			;;http://z80-heaven.wikidot.com/math 
0fdb			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fdb			; 
0fdb			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fdb			;     ld a,16        ;7 
0fdb			;     ld hl,0        ;10 
0fdb			;     jp $+5         ;10 
0fdb			;.DivLoop: 
0fdb			;       add hl,bc    ;-- 
0fdb			;       dec a        ;64 
0fdb			;       jr z,.DivLoopEnd        ;86 
0fdb			; 
0fdb			;       sla e        ;128 
0fdb			;       rl d         ;128 
0fdb			;       adc hl,hl    ;240 
0fdb			;       sbc hl,bc    ;240 
0fdb			;       jr nc,.DivLoop ;23|21 
0fdb			;       inc e        ;-- 
0fdb			;       jp .DivLoop+1 
0fdb			; 
0fdb			;.DivLoopEnd: 
0fdb			 
0fdb			;HL_Div_C: 
0fdb			;Inputs: 
0fdb			;     HL is the numerator 
0fdb			;     C is the denominator 
0fdb			;Outputs: 
0fdb			;     A is the remainder 
0fdb			;     B is 0 
0fdb			;     C is not changed 
0fdb			;     DE is not changed 
0fdb			;     HL is the quotient 
0fdb			; 
0fdb			;       ld b,16 
0fdb			;       xor a 
0fdb			;         add hl,hl 
0fdb			;         rla 
0fdb			;         cp c 
0fdb			;         jr c,$+4 
0fdb			;           inc l 
0fdb			;           sub c 
0fdb			;         djnz $-7 
0fdb			 
0fdb			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fdb			 
0fdb			addatohl: 
0fdb 85			    add   a, l    ; A = A+L 
0fdc 6f			    ld    l, a    ; L = A+L 
0fdd 8c			    adc   a, h    ; A = A+L+H+carry 
0fde 95			    sub   l       ; A = H+carry 
0fdf 67			    ld    h, a    ; H = H+carry 
0fe0 c9			ret 
0fe1			 
0fe1			addatode: 
0fe1 83			    add   a, e    ; A = A+L 
0fe2 5f			    ld    e, a    ; L = A+L 
0fe3 8a			    adc   a, d    ; A = A+L+H+carry 
0fe4 93			    sub   e       ; A = H+carry 
0fe5 57			    ld    d, a    ; H = H+carry 
0fe6 c9			ret 
0fe7			 
0fe7			 
0fe7			addatobc: 
0fe7 81			    add   a, c    ; A = A+L 
0fe8 4f			    ld    c, a    ; L = A+L 
0fe9 88			    adc   a, b    ; A = A+L+H+carry 
0fea 91			    sub   c       ; A = H+carry 
0feb 47			    ld    b, a    ; H = H+carry 
0fec c9			ret 
0fed			 
0fed			subafromhl: 
0fed			   ; If A=0 do nothing 
0fed			    ; Otherwise flip A's sign. Since 
0fed			    ; the upper byte becomes -1, also 
0fed			    ; substract 1 from H. 
0fed ed 44		    neg 
0fef ca f8 0f		    jp    z, Skip 
0ff2 25			    dec   h 
0ff3			     
0ff3			    ; Now add the low byte as usual 
0ff3			    ; Two's complement takes care of 
0ff3			    ; ensuring the result is correct 
0ff3 85			    add   a, l 
0ff4 6f			    ld    l, a 
0ff5 8c			    adc   a, h 
0ff6 95			    sub   l 
0ff7 67			    ld    h, a 
0ff8			Skip: 
0ff8 c9				ret 
0ff9			 
0ff9			 
0ff9			; compare hl and de 
0ff9			; returns:  
0ff9			; if hl = de, z=1, s=0, c0=0 
0ff9			; if hl > de, z=0, s=0, c=0 
0ff9			; if hl < de, z=0, s=1, c=1 
0ff9			cmp16:	 
0ff9 b7				or a 
0ffa ed 52			sbc hl,de 
0ffc e0				ret po 
0ffd 7c				ld a,h 
0ffe 1f				rra 
0fff ee 40			xor 01000000B 
1001 37				scf 
1002 8f				adc a,a 
1003 c9				ret 
1004			 
1004			 
1004			; test if hl contains zero   - A is destroyed 
1004			 
1004			ishlzero:    
1004 b7				or a     ; reset flags 
1005 7c				ld a, h 
1006 b5				or l        	 
1007			 
1007 c9				ret 
1008			 
1008			 
1008			 
1008			 
1008			if FORTH_ENABLE_FLOATMATH 
1008			;include "float/bbcmath.z80" 
1008			include "float/lpfpcalc.asm" 
1008			endif 
1008			 
1008			 
1008			; eof 
1008			 
# End of file firmware_maths.asm
1008			include "firmware_strings.asm"   ; string handling  
1008			 
1008			 
1008			; TODO string len 
1008			; input text string, end on cr with zero term 
1008			; a offset into frame buffer to start prompt 
1008			; d is max length 
1008			; e is display size TODO 
1008			; c is current cursor position 
1008			; hl is ptr to where string will be stored and edited directly 
1008			 
1008			 
1008			; TODO check limit of buffer for new inserts 
1008			; TODO check insert does not push beyond buffer 
1008			; TODO scroll in a limited display area 
1008			; TODO scroll whole screen on page wrap 
1008			 
1008			 
1008			; TODO use LCD cursor? 
1008			 
1008			EDIT_V1: equ 0 
1008			EDIT_V2: equ 1 
1008			 
1008			 
1008			 
1008			if EDIT_V2 
1008			input_str: 
1008			 
1008 32 9f fd			    	ld (input_at_pos),a      ; save display position to start 
100b			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
100b 22 a2 fd				ld (input_start), hl     ; save ptr to buffer 
100e			;		ld a, c 
100e			;		call addatohl 
100e			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
100e 7a					ld a,d 
100f 32 a1 fd			        ld (input_size), a       ; save length of input area 
1012 79					ld a, c 
1013 32 90 fd				ld (input_cursor),a      ; init cursor start position relative to start of string 
1016 7b					ld a,e 
1017 32 a0 fd			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
101a			 
101a			 
101a					; add a trailing space to make screen refresh nicer 
101a			 
101a					;ld hl, (input_start) 
101a					;push hl 
101a					;ld a, 0 
101a					;call strlent 
101a					;ld a, l 
101a					;pop hl 
101a					;call addatohl 
101a					;dec hl 
101a					;ld a, ' ' 
101a					;ld (hl), a 
101a					;inc hl 
101a					;ld (hl), a 
101a					;inc hl 
101a					;ld a, 0 
101a					;ld (hl), a 
101a			 
101a			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
101a					; init cursor shape if not set by the cin routines 
101a 21 fc fa				ld hl, cursor_shape 
101d			if BASE_KEV 
101d 3e ff				ld a, 255 
101f			else 
101f					ld a, '#' 
101f			endif 
101f 77					ld (hl), a 
1020 23					inc hl 
1021 3e 00				ld a, 0 
1023 77					ld (hl), a 
1024			 
1024 3e 09				ld a, CUR_BLINK_RATE 
1026 32 9b fd				ld (input_cur_flash), a 
1029 3e 01				ld a, 1 
102b 32 9a fd				ld (input_cur_onoff),a 
102e			.inmain:	 
102e			 
102e cd 56 11				call input_disp_ref 
1031			 
1031					; save current length of string 
1031			 
1031 2a a2 fd				ld hl, (input_start) 
1034 3e 00				ld a, 0 
1036 cd 4c 13				call strlent 
1039 7d					ld a,l 
103a 32 95 fd				ld (input_len), a 
103d			 
103d					;call input_disp_oncur 
103d			 
103d					; display current state of input buffer 
103d			 
103d					; clean any backspace chars 
103d			 
103d 3e 20				ld a, " " 
103f 32 fc f0				ld (scratch),a 
1042 3e 00				ld a, 0 
1044 32 fd f0				ld (scratch+1),a 
1047 3a 9f fd				ld a,(input_at_pos) 
104a 85					add l 
104b 11 fc f0				ld de, scratch 
104e cd ba 0d				call str_at_display 
1051			 
1051					; pause 1ms 
1051			 
1051 3e 01				ld a, 1 
1053 cd cf 0c				call aDelayInMS 
1056			 
1056			; display cursor if visible on this cycle 
1056			 
1056					; dec flash counter 
1056 3a 9b fd				ld a, (input_cur_flash) 
1059 3d					dec a 
105a 32 9b fd				ld (input_cur_flash), a 
105d fe 00				cp 0 
105f 20 0d				jr nz, .inochgstate 
1061			 
1061			 
1061					; reset on change of state 
1061 3e 09				ld a, CUR_BLINK_RATE 
1063 32 9b fd				ld (input_cur_flash), a 
1066			 
1066					; change state 
1066 3a 9a fd				ld a,(input_cur_onoff) 
1069 ed 44				neg 
106b 32 9a fd				ld (input_cur_onoff),a 
106e			 
106e			 
106e			 
106e			 
106e					; TODO is cursor visible? 
106e					; TODO if so then over write the char at curspos pos with the cursor shape 
106e			 
106e								 
106e			 
106e			.inochgstate: 
106e 3a 9a fd				ld a,(input_cur_onoff) 
1071 fe ff				cp 255 
1073 28 0e				jr z, .skipcursor 
1075 3a 9f fd				ld a, (input_at_pos) 
1078 47					ld b, a 
1079 3a 90 fd				ld a, (input_cursor) 
107c 80					add b 
107d 11 fc fa				ld de, cursor_shape 
1080					 
1080 cd ba 0d				call str_at_display 
1083			 
1083			.skipcursor: 
1083				if DEBUG_INPUTV2 
1083			 
1083					ld a,(input_at_pos) 
1083					ld hl, LFSRSeed 
1083					call hexout 
1083					ld a, (input_cursor) 
1083					ld hl, LFSRSeed+2 
1083					call hexout 
1083					ld a,(input_size) 
1083					ld hl, LFSRSeed+4 
1083					call hexout 
1083			 
1083					ld a,(input_cur_onoff) 
1083					ld hl, LFSRSeed+6 
1083					call hexout 
1083			 
1083					ld a,(input_cur_flash) 
1083					ld hl, LFSRSeed+8 
1083					call hexout 
1083			 
1083					ld a,(input_len) 
1083					ld hl, LFSRSeed+10 
1083					call hexout 
1083					ld hl, LFSRSeed+12 
1083					ld a, 0 
1083					ld (hl),a 
1083					ld a, display_row_4 
1083					ld de, LFSRSeed 
1083					call str_at_display 
1083				endif 
1083 cd ca 0d				call update_display 
1086			 
1086					; TODO keyboard processing 
1086			 
1086			if BASE_CPM 
1086					call cin_wait 
1086			else 
1086 cd c4 72				call cin    ; _wait 
1089			endif 
1089 fe 00				cp 0 
108b ca 2e 10				jp z, .inmain 
108e			 
108e fe 0b				cp KEY_LEFT    ; cursor left 
1090 ca 48 11				jp z, input_left 
1093				 
1093 fe 0c				cp KEY_RIGHT      ; cursor right 
1095 ca 4f 11				jp z, input_right 
1098			 
1098 fe 0d				cp KEY_CR 
109a c8					ret z 
109b			 
109b fe 08				cp KEY_BS 
109d ca bd 11				jp z, input_delchar 
10a0			 
10a0 fe 06				cp KEY_NEXTWORD 
10a2 ca c9 10				jp z, input_nxtword 
10a5			 
10a5 fe 07				cp KEY_PREVWORD 
10a7 ca f0 10				jp z, input_prvword 
10aa			 
10aa fe 0e				cp KEY_HOME    ; jump to start of line 
10ac 20 08				jr nz, .ikh 
10ae 3e 00				ld a, 0 
10b0 32 90 fd				ld (input_cursor), a 
10b3 ca 2e 10				jp z, .inmain 
10b6			.ikh: 
10b6			 
10b6 fe 0f				cp KEY_END     ; jump to end of line 
10b8 20 09				jr nz, .ike 
10ba 3a 95 fd				ld a, (input_len) 
10bd 32 90 fd				ld (input_cursor),a 
10c0 ca 2e 10				jp z, .inmain 
10c3			.ike: 
10c3 fe 05			        cp KEY_UP      ; recall last command 
10c5 c8					ret z 
10c6			;jr nz, .irec 
10c6			; TODO next word 
10c6			; TODO prev word 
10c6			;  
10c6			; 
10c6			;	ld hl, scratch 
10c6			;	ld de, os_last_cmd 
10c6			;	call strcpy 
10c6			;		jp  .inmain 
10c6			.irec: 
10c6			;		jr .instr1 
10c6			 
10c6			 
10c6			 
10c6					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
10c6			 
10c6			; TODO return if any special keys are given 
10c6			;		ld l, a 
10c6			;		ld a, 28 ; KEY_F12   ; 27 
10c6			;		sub l 
10c6			;		ret m 
10c6			;		ld a, l 
10c6					; if no special key then insert as a char 
10c6			 
10c6 c3 8f 11				jp input_inschr 
10c9			 
10c9				 
10c9			input_nxtword: 
10c9				; jump to start next word after the cursor 
10c9			 
10c9			.insknwn:	 
10c9 cd 85 11				call input_curptr	 
10cc 7e					ld a,(hl)	 
10cd fe 00				cp 0 
10cf ca 2e 10				jp z, .inmain    ; end of string 
10d2			 
10d2			; if we are on a word, then move off of it 
10d2			 
10d2 fe 20				cp ' ' 
10d4 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
10d6 21 90 fd				ld hl, input_cursor 
10d9 34					inc (hl) 
10da 18 ed				jr .insknwn 
10dc			 
10dc			.inspace: 
10dc			 
10dc cd 85 11				call input_curptr	 
10df 7e					ld a,(hl)	 
10e0 fe 00				cp 0 
10e2 ca 2e 10				jp z, .inmain    ; end of string 
10e5			 
10e5			; if we are on a word, then move off of it 
10e5			 
10e5 fe 20				cp ' ' 
10e7 c2 2e 10				jp nz, .inmain     ; we are on non space so at next word 
10ea 21 90 fd				ld hl, input_cursor 
10ed 34					inc (hl) 
10ee 18 ec				jr .inspace 
10f0			 
10f0			 
10f0			 
10f0			 
10f0			input_prvword: 
10f0				; jump to the start of previous word before the cursor 
10f0			 
10f0			; where are we to start with currently? 
10f0			 
10f0 cd 85 11				call input_curptr	 
10f3 7e					ld a, (hl) 
10f4 fe 20				cp ' ' 
10f6 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
10f8			 
10f8			 
10f8			 
10f8			.inskpwn:	 
10f8 3a 90 fd				ld a,(input_cursor) 
10fb fe 00				cp 0 
10fd ca 2e 10				jp z, .inmain    ; start of string 
1100			 
1100			;if we are on a word, then move off of it 
1100			 
1100 cd 85 11				call input_curptr	 
1103 7e					ld a, (hl) 
1104 fe 20				cp ' ' 
1106 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
1108					;jp z, .inmain    ; start of string 
1108 21 90 fd				ld hl, input_cursor 
110b 35					dec (hl) 
110c 18 ea				jr .inskpwn 
110e			.iwstart: 
110e 21 90 fd				ld hl, input_cursor 
1111 34					inc (hl) 
1112 c3 2e 10				jp .inmain 
1115					 
1115			 
1115			.inspacep: 
1115			 
1115					;jp .inmain    ; start of string 
1115			 
1115			 
1115			 
1115 3a 90 fd				ld a,(input_cursor) 
1118 fe 00				cp 0 
111a ca 2e 10				jp z, .inmain    ; start of string 
111d			 
111d			; if we are on a word, then move off of it 
111d			 
111d cd 85 11				call input_curptr	 
1120 7e					ld a, (hl) 
1121 fe 20				cp ' ' 
1123 c2 2c 11				jp nz, .incharp     ; we are on non space so at end of prev word 
1126 21 90 fd				ld hl, input_cursor 
1129 35					dec (hl) 
112a 18 e9				jr .inspacep 
112c			 
112c			 
112c			.incharp:	 
112c					; eat the word to get to the start 
112c 3a 90 fd				ld a,(input_cursor) 
112f fe 00				cp 0 
1131 ca 2e 10				jp z, .inmain    ; start of string 
1134			 
1134			; if we are on a word, then move off of it 
1134			 
1134 cd 85 11				call input_curptr	 
1137 7e					ld a, (hl) 
1138 fe 20				cp ' ' 
113a 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
113c 21 90 fd				ld hl, input_cursor 
113f 35					dec (hl) 
1140 18 ea				jr .incharp 
1142			.ipwordst: 
1142					; at space before the prev word so reposition over it 
1142 21 90 fd				ld hl, input_cursor 
1145 34					inc (hl) 
1146 18 b0				jr .inskpwn 
1148					 
1148			 
1148			 
1148			input_left: 
1148				; move cursor left 
1148 21 90 fd			ld hl, input_cursor 
114b 35				dec (hl) 
114c			;	cp 0 
114c			;	jp z, .inmain    ; ignore left as at the start of the string 
114c c3 2e 10			jp .inmain 
114f			 
114f			input_right: 
114f				; move cursor right 
114f				 
114f				;ld a, (input_size) 
114f				;ld b, a 
114f 21 90 fd			ld hl, input_cursor 
1152 34				inc (hl) 
1153				;dec b 
1153				;cp 0 
1153				;jp z, .inmain   ; ignore as at end of the string buffer 
1153				;ld a, b 
1153				;inc a 
1153				;ld (input_cursor), a 
1153 c3 2e 10			jp .inmain 
1156			 
1156			 
1156			 
1156			input_disp_ref: 
1156				; display the text from start of buffer (ie full refresh) 
1156 3a 9f fd			ld a, (input_at_pos) 
1159 2a a2 fd			ld hl,(input_start) 
115c eb				ex de, hl 
115d cd ba 0d			call str_at_display  
1160 c9				ret 
1161			input_disp_oncur: 
1161				; display the text from cursor position to end of buffer 
1161				; TODO position start of string at cursor position on screen 
1161				; TODO draw from that point on 
1161 3a 90 fd			ld a, (input_cursor) 
1164 47				ld b, a 
1165 3a 9f fd			ld a, (input_at_pos) 
1168 80				add b 
1169 48				ld c, b     ; save a 
116a 78				ld a, b     ; inc string start for cursor 
116b 2a a2 fd			ld hl,(input_start) 
116e cd db 0f			call addatohl 
1171 eb				ex de, hl 
1172 79				ld a, c 
1173 cd ba 0d			call str_at_display  
1176 c9				ret 
1177			 
1177			input_nxtw: 
1177				; Find next word 
1177 c9				ret 
1178			 
1178			input_prvw: 
1178				; Find previous word 
1178 c9				ret 
1179			 
1179			input_lenrem:   
1179				; Calculate the length of string remaining from current cursor 
1179				; position to end of buffer (exc null term) 
1179				 
1179 3a 90 fd			ld a, (input_cursor) 
117c 4f				ld c, a 
117d 3a a1 fd			ld a, (input_size) 
1180 91				sub c 
1181 06 00			ld b, 0 
1183 0d				dec c 
1184 c9				ret	 
1185			 
1185			input_curptr: 
1185				; calc address of the character under the cursor 
1185				 
1185 2a a2 fd			ld hl, (input_start) 
1188 3a 90 fd			ld a, (input_cursor) 
118b cd db 0f			call addatohl 
118e c9				ret 
118f			 
118f			input_inschr: 
118f				; Insert char at cursor position 
118f f5				push af   ; save char 
1190				;call input_lenrem    ; get bc length of remaining string 
1190			 
1190				 
1190 cd 85 11			call input_curptr 
1193			;	ld hl, (input_start) 
1193			;	ld a, (input_cursor) 
1193			;	call addatohl 
1193				;push hl   ; save to come back to 
1193			 
1193				; shift everything up one to end of buffer 
1193			 
1193				;push hl 
1193				;dec de 
1193				;inc de 
1193			;	ldir 
1193				 
1193				;pop hl 
1193			 
1193				; are we adding to the end of line? 
1193			 
1193 3a 90 fd			ld a, (input_cursor) 
1196 47				ld b, a 
1197 3a 95 fd			ld a, (input_len) 
119a b8				cp b 
119b 20 09			jr nz, .insmid   ; no, insert in middle of text 
119d			 
119d				; tack on the end of the line 
119d f1				pop af 
119e 77				ld (hl), a   ; save new char 
119f 23				inc hl 
11a0 3e 00			ld a, 0 
11a2 77				ld (hl), a 
11a3 c3 4f 11			jp input_right 
11a6				 
11a6			.insmid: 
11a6				; hl has insertion point so move everything up one to allow for insertion 
11a6				;call input_shiftright 
11a6 f1				pop af 
11a7			 
11a7			.shufinsmid: 
11a7 47				ld b, a     ; b contains new char, c prev char at this position  
11a8 7e				ld a, (hl) 
11a9			 
11a9 fe 00			cp 0    ; at end of string need to then dump new char and add term 
11ab 28 07			jr z, .endinsmid 
11ad 4f				ld c, a 
11ae 78				ld a, b 
11af 77				ld (hl), a 
11b0 23				inc hl 
11b1 79				ld a, c 
11b2 18 f3			jr .shufinsmid 
11b4				 
11b4			 
11b4			 
11b4			 
11b4			.endinsmid: 
11b4 78				ld a, b 
11b5 77				ld (hl), a 
11b6 23				inc hl 
11b7 3e 00			ld a, 0 
11b9 77				ld (hl), a 
11ba			 
11ba			 
11ba			;	ld (hl), a   ; save new char 
11ba			 
11ba c3 4f 11			jp input_right 
11bd			 
11bd			;input_shiftright: 
11bd			;	; shift text right at cursor, hl has shift start 
11bd			;	push hl 
11bd			;	push de 
11bd			;	push bc 
11bd			; 
11bd			; 
11bd			;	; move to end of string past zero term 
11bd			;	ld hl,(input_start) 
11bd			;	ld a, (input_len) 
11bd			;	call addatohl 
11bd			;	inc hl 
11bd			;;	inc hl 
11bd			;;	inc hl 
11bd			;	ld a, 0 
11bd			;	ld (hl), a 
11bd			;;	dec hl 
11bd			;	 
11bd			;;	ld (hl), a 
11bd			;;	dec hl 
11bd			; 
11bd			;	push hl 
11bd			;	pop de 
11bd			;	inc de 
11bd			;	 
11bd			; 
11bd			;;	ld hl,(input_start) 
11bd			;;	ld a, (input_cursor) 
11bd			;;	call addatohl 
11bd			; 
11bd			; 
11bd			;	; calc how many bytes from cursor pos to end of string we need to shift 
11bd			;	call input_lenrem    ; get bc length of remaining string 
11bd			;	;ld a, (input_cursor) 
11bd			;	;ld c, a 
11bd			;	ld a, (input_len) 
11bd			;	cp 2 
11bd			;	jr z, .iskipzero	 
11bd			;	;sub c 
11bd			;	;inc a 
11bd			;	;ld c, a 
11bd			;	;ld b, 0 
11bd			;	inc c 
11bd			;	inc c 
11bd			;	; move data 
11bd			;	lddr 
11bd			;.iskipzero: 
11bd			; 
11bd			;	pop bc 
11bd			;	pop de 
11bd			;	pop hl 
11bd			;	ret	 
11bd			 
11bd			input_delchar: 
11bd				; Delete char at cursor position 
11bd cd 79 11			call input_lenrem    ; get bc length of remaining string 
11c0 2a a2 fd			ld hl, (input_start) 
11c3 3a 90 fd			ld a, (input_cursor) 
11c6 cd db 0f			call addatohl 
11c9			 
11c9 e5				push hl 
11ca d1				pop de 
11cb 1b				dec de 
11cc			 
11cc			.dl:	 
11cc ed a0			ldi  
11ce 7e				ld a, (hl) 
11cf fe 00			cp 0 
11d1 28 02			jr z, .dldone 
11d3 18 f7			jr .dl 
11d5			.dldone: 
11d5 ed a0			ldi 
11d7			 
11d7 c3 48 11			jp input_left 
11da			 
11da			 
11da			endif 
11da			 
11da			 
11da			 
11da			if EDIT_V1 
11da			input_str: 
11da			 
11da				    	ld (input_at_pos),a      ; save display position to start 
11da					add c 
11da					ld (input_at_cursor),a	; save draw pos of cursor 
11da					ld (input_start), hl     ; save ptr to buffer 
11da					ld a, c 
11da					call addatohl 
11da					ld (input_ptr), hl     ; save ptr to point under the cursor 
11da					ld a,d 
11da				        ld (input_size), a       ; save length of input area 
11da					ld a, c 
11da					ld (input_cursor),a      ; init cursor start position  
11da					ld a,e 
11da				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
11da					 
11da					 
11da			 
11da			;		ld a,(input_ptr) 
11da			;		ld (input_under_cursor),a 	; save what is under the cursor 
11da			 
11da			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
11da					; init cursor shape if not set by the cin routines 
11da					ld hl, cursor_shape 
11da			if BASE_KEV 
11da					ld a, 255 
11da			else 
11da					ld a, '#' 
11da			endif 
11da					ld (hl), a 
11da					inc hl 
11da					ld a, 0 
11da					ld (hl), a 
11da			 
11da					ld a, CUR_BLINK_RATE 
11da					ld (input_cur_flash), a 
11da					ld a, 1 
11da					ld (input_cur_onoff),a 
11da			 
11da			;	if DEBUG_INPUT 
11da			;		push af 
11da			;		ld a, 'I' 
11da			;		ld (debug_mark),a 
11da			;		pop af 
11da			;		CALLMONITOR 
11da			;	endif 
11da			.is1:		; main entry loop 
11da			 
11da			 
11da			 
11da					; pause 1ms 
11da			 
11da					ld a, 1 
11da					call aDelayInMS 
11da			 
11da					; dec flash counter 
11da					ld a, (input_cur_flash) 
11da					dec a 
11da					ld (input_cur_flash), a 
11da					cp 0 
11da					jr nz, .nochgstate 
11da			 
11da			 
11da					; change state 
11da					ld a,(input_cur_onoff) 
11da					neg 
11da					ld (input_cur_onoff),a 
11da			 
11da			 
11da					; reset on change of state 
11da					ld a, CUR_BLINK_RATE 
11da					ld (input_cur_flash), a 
11da			 
11da			.nochgstate: 
11da					 
11da					 
11da			 
11da					; display cursor  
11da			 
11da			;		ld hl, (input_start) 
11da			;		ld a, (input_cursor) 
11da			;		call addatohl 
11da			 
11da					; get char under cursor and replace with cursor 
11da			ld hl, (input_ptr) 
11da			;		ld a, (hl) 
11da			;		ld (input_under_cursor),a 
11da			;		ld a, '_' 
11da			;		ld (hl), a 
11da			 
11da					; display string 
11da			 
11da					ld de, (input_start) 
11da					ld a, (input_at_pos) 
11da					call str_at_display 
11da			;	        call update_display 
11da			 
11da					; find place to put the cursor 
11da			;		add h 
11da			;		ld l, display_row_1 
11da			;		sub l 
11da			; (input_at_pos) 
11da					;ld c, a 
11da			;		ld a, (input_cursor) 
11da			;		ld l, (input_at_pos) 
11da			;		;ld b, h 
11da			;		add l 
11da			;		ld (input_at_cursor),a 
11da					;ld l,h 
11da			 
11da			;		ld h, 0 
11da			;		ld l,(input_at_pos) 
11da			;		ld a, (input_cursor) 
11da			;		call addatohl 
11da			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
11da			;		call subafromhl 
11da			;		ld a,l 
11da			;		ld (input_at_cursor), a 
11da			 
11da				if DEBUG_INPUT 
11da					ld a, (hardware_diag) 
11da					cp 0 
11da					jr z, .skip_input_diag 
11da			 
11da					ld a,(input_at_pos) 
11da					ld hl, LFSRSeed 
11da					call hexout 
11da					ld a, (input_cursor) 
11da					ld hl, LFSRSeed+2 
11da					call hexout 
11da					ld a,(input_at_cursor) 
11da					ld hl, LFSRSeed+4 
11da					call hexout 
11da			 
11da					ld a,(input_cur_onoff) 
11da					ld hl, LFSRSeed+6 
11da					call hexout 
11da			 
11da					ld a,(input_cur_flash) 
11da					ld hl, LFSRSeed+8 
11da					call hexout 
11da			 
11da					ld a,(input_len) 
11da					ld hl, LFSRSeed+10 
11da					call hexout 
11da					ld hl, LFSRSeed+12 
11da					ld a, 0 
11da					ld (hl),a 
11da					ld a, display_row_4 
11da					ld de, LFSRSeed 
11da					call str_at_display 
11da					.skip_input_diag: 
11da				endif 
11da			 
11da					; decide on if we are showing the cursor this time round 
11da			 
11da					ld a, (input_cur_onoff) 
11da					cp 255 
11da					jr z, .skipcur 
11da			 
11da			 
11da					ld a,(input_at_cursor) 
11da					ld de, cursor_shape 
11da					call str_at_display 
11da			 
11da					; save length of current input string 
11da					ld hl, (input_start) 
11da					ld a, 0 
11da					call strlent 
11da					ld a,l 
11da					ld (input_len),a 
11da			 
11da			.skipcur: 
11da			 
11da				        call update_display 
11da					 
11da			 
11da			 
11da					; wait 
11da				 
11da					; TODO loop without wait to flash the cursor and char under cursor	 
11da					call cin    ; _wait 
11da			 
11da					cp 0 
11da					jp z, .is1 
11da			 
11da					; get ptr to char to input into 
11da			 
11da					ld c,a 
11da					ld hl, (input_start) 
11da					ld a, (input_cursor) 
11da					call addatohl 
11da					ld (input_ptr), hl 
11da					ld a,c 
11da			 
11da					; replace char under cursor 
11da			 
11da			;		ld hl, (input_ptr) 
11da			;		ld a, (input_under_cursor) 	; get what is under the cursor 
11da			;		ld (hl), a 
11da			 
11da			;	if DEBUG_INPUT 
11da			;		push af 
11da			;		ld a, 'i' 
11da			;		ld (debug_mark),a 
11da			;		pop af 
11da			;		CALLMONITOR 
11da			;	endif 
11da					cp KEY_HOME 
11da					jr nz, .iske 
11da			 
11da					ld a, (input_at_pos) 
11da					ld (input_at_cursor),a 
11da					ld a, 0 
11da					ld (input_cursor), a 
11da					jp .is1 
11da					 
11da			.iske:		cp KEY_END 
11da					jr nz, .isknw 
11da					jp .is1 
11da			 
11da			.isknw:		cp KEY_NEXTWORD 
11da					jr nz, .iskpw 
11da			 
11da			.isknwm:	ld hl, (input_ptr) 
11da					ld a,(hl)	 
11da					cp 0 
11da					jp z, .is1    ; end of string 
11da					cp ' ' 
11da					jp z, .is1    ; end of word 
11da					inc hl 
11da					ld (input_ptr), hl 
11da					ld a, (input_at_cursor) 
11da					inc a 
11da					ld (input_at_cursor), a 
11da					jr .isknwm 
11da			 
11da			.iskpw:		cp KEY_PREVWORD 
11da					jr nz, .iskl 
11da			.iskpwm:	 
11da					ld hl, (input_ptr) 
11da					ld a,(hl)	 
11da					cp 0  
11da					jp z, .is1    ; end of string 
11da					cp ' ' 
11da					jp z, .is1    ; end of word 
11da					dec hl 
11da					ld (input_ptr), hl 
11da					ld a, (input_at_cursor) 
11da					dec a 
11da					ld (input_at_cursor), a 
11da					jr .iskpwm 
11da			 
11da			 
11da			.iskl:		cp KEY_LEFT 
11da					jr nz, .isk1 
11da			 
11da					ld a, (input_cursor) 
11da			 
11da					cp 0 
11da					jp z, .is1 		; at start of line to ignore  
11da			 
11da					dec  a 		; TODO check underflow 
11da					ld (input_cursor), a 
11da			 
11da					ld hl, (input_ptr) 
11da					dec hl 
11da					ld (input_ptr), hl 
11da					 
11da					ld a, (input_at_cursor) 
11da					dec a 
11da					ld (input_at_cursor), a 
11da			 
11da					ld a, 1		; show cursor moving 
11da					ld (input_cur_onoff),a 
11da					ld a, CUR_BLINK_RATE 
11da					ld (input_cur_flash), a 
11da			 
11da					jp .is1 
11da			 
11da			.isk1:		cp KEY_RIGHT 
11da					jr nz, .isk2 
11da			 
11da					ld a,(input_len)		; TODO BUG why cant i load e direct? 
11da					ld e,a 
11da					ld a, (input_cursor) 
11da					cp e 
11da					jp z, .is1		; at the end of string so dont go right 
11da			 
11da					inc  a 		; TODO check overflow 
11da					ld (input_cursor), a 
11da			 
11da					ld a, (input_at_cursor) 
11da					inc a 
11da					ld (input_at_cursor), a 
11da			 
11da					ld hl, (input_ptr) 
11da					inc hl 
11da					ld (input_ptr), hl 
11da			 
11da					ld a, 1		; show cursor moving 
11da					ld (input_cur_onoff),a 
11da					ld a, CUR_BLINK_RATE 
11da					ld (input_cur_flash), a 
11da			 
11da					jp .is1 
11da			 
11da			.isk2:		cp KEY_UP 
11da			 
11da					jr nz, .isk3 
11da			 
11da					; swap last command with the current on 
11da			 
11da					; move cursor to start of string 
11da					ld hl, (input_start) 
11da					ld (input_ptr), hl 
11da			 
11da					ld a, (input_at_pos) 
11da					ld (input_at_cursor), a 
11da			 
11da					ld a, 0 
11da					ld (input_cursor), a 
11da					 
11da					; swap input and last command buffers 
11da			 
11da					ld hl, os_cli_cmd 
11da					ld de, os_last_cmd 
11da					ld b, 255 
11da			.swap1:		ld a, (hl) 
11da					ld c,a 
11da					ld a, (de) 
11da					ld (hl), a 
11da					ld a,c 
11da					ld (de),a 
11da					inc hl 
11da					inc de 
11da					djnz .swap1 
11da			 
11da			 
11da			 
11da			 
11da			 
11da					jp .is1 
11da			 
11da			.isk3:		cp KEY_BS 
11da					jr nz, .isk4 
11da			 
11da					ld a, (input_cursor) 
11da			 
11da					cp 0 
11da					jp z, .is1 		; at start of line to ignore  
11da			 
11da					dec  a 		; TODO check underflow 
11da					ld (input_cursor), a 
11da			 
11da					; hl is source 
11da					; de needs to be source - 1 
11da			 
11da			;		ld a, 0 
11da			;		dec hl 
11da			;		ld (hl), a 
11da			 
11da					ld hl, (input_ptr) 
11da					dec hl 
11da					ld (input_ptr), hl 
11da			 
11da					; shift all data 
11da			 
11da					push hl 
11da					inc hl 
11da					pop de 
11da					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
11da					ld c,a 
11da					ld b,0 
11da					ldir  
11da			 
11da			 
11da			 
11da			 
11da					ld a, (input_at_cursor) 
11da					dec a 
11da					ld (input_at_cursor), a 
11da			 
11da			 
11da					ld a, 1		; show cursor moving 
11da					ld (input_cur_onoff),a 
11da					ld a, CUR_BLINK_RATE 
11da					ld (input_cur_flash), a 
11da			 
11da					; remove char 
11da					ld a, (input_at_cursor) 
11da					inc a 
11da					ld de,.iblank 
11da					call str_at_display 
11da			 
11da					jp .is1 
11da			 
11da			.isk4:		cp KEY_CR 
11da					jr z, .endinput 
11da			 
11da					; else add the key press to the end 
11da			 
11da					ld c, a			; save key pressed 
11da			 
11da					ld a,(hl)		; get what is currently under char 
11da			 
11da					cp 0			; we are at the end of the string 
11da					jr nz, .onchar 
11da					 
11da					; add a char to the end of the string 
11da				 
11da					ld (hl),c 
11da					inc hl 
11da			;		ld a,' ' 
11da			;		ld (hl),a 
11da			;		inc hl 
11da					ld a,0 
11da					ld (hl),a 
11da					dec hl 
11da			 
11da					ld a, (input_cursor) 
11da					inc a				; TODO check max string length and scroll  
11da					ld (input_cursor), a		; inc cursor pos 
11da							 
11da					ld a, (input_at_cursor) 
11da					inc a 
11da					ld (input_at_cursor), a 
11da			 
11da					ld hl, (input_ptr) 
11da					inc hl 
11da					ld (input_ptr), hl 
11da			 
11da					ld hl, (input_ptr) 
11da					inc hl 
11da					ld (input_ptr), hl 
11da			;	if DEBUG_INPUT 
11da			;		push af 
11da			;		ld a, '+' 
11da			;		ld (debug_mark),a 
11da			;		pop af 
11da			;		CALLMONITOR 
11da			;	endif 
11da					ld a, 1		; show cursor moving 
11da					ld (input_cur_onoff),a 
11da					ld a, CUR_BLINK_RATE 
11da					ld (input_cur_flash), a 
11da					jp .is1 
11da					 
11da			 
11da			 
11da					; if on a char then insert 
11da			.onchar: 
11da			 
11da					; TODO over flow check: make sure insert does not blow out buffer 
11da			 
11da					; need to do some maths to use lddr 
11da			 
11da					push hl   ; save char pos 
11da					push bc 
11da			 
11da					ld hl, (input_start) 
11da					ld a, (input_len) 
11da					call addatohl  		; end of string 
11da					inc hl 
11da					inc hl		; past zero term 
11da					push hl 
11da					inc hl 
11da					push hl  
11da			 
11da								; start and end of lddr set, now how much to move? 
11da			 
11da							 
11da					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
11da					ld b,a 
11da					ld a,(input_len) 
11da					ld e,a 
11da					sub b 
11da					inc a		;?? 
11da					inc a		;?? 
11da					inc a		;?? 
11da			 
11da					ld b,0 
11da					ld c,a 
11da			 
11da				if DEBUG_INPUT 
11da					push af 
11da					ld a, 'i' 
11da					ld (debug_mark),a 
11da					pop af 
11da			;		CALLMONITOR 
11da				endif 
11da					pop de 
11da					pop hl 
11da				if DEBUG_INPUT 
11da					push af 
11da					ld a, 'I' 
11da					ld (debug_mark),a 
11da					pop af 
11da			;		CALLMONITOR 
11da				endif 
11da					lddr 
11da				 
11da			 
11da			 
11da					; TODO have a key for insert/overwrite mode???? 
11da					pop bc 
11da					pop hl 
11da					ld (hl), c		; otherwise overwrite current char 
11da					 
11da			 
11da			 
11da			 
11da					ld a, (input_cursor) 
11da					inc  a 		; TODO check overflow 
11da					ld (input_cursor), a 
11da			 
11da					ld a, (input_at_cursor) 
11da					inc a 
11da					ld (input_at_cursor), a 
11da			 
11da					jp .is1 
11da			 
11da			.endinput:	; TODO look for end of string 
11da			 
11da					; add trailing space for end of token 
11da			 
11da					ld hl, (input_start) 
11da					ld a,(input_len) 
11da					call addatohl 
11da					ld a, ' ' 
11da					ld (hl),a 
11da					; TODO eof of parse marker 
11da			 
11da					inc hl 
11da					ld a, 0 
11da					ld (hl),a 
11da			 
11da			 
11da					ret 
11da			 
11da			.iblank: db " ",0 
11da			 
11da			 
11da			input_str_prev:	ld (input_at_pos), a 
11da					ld (input_start), hl 
11da					ld a,1			; add cursor 
11da					ld (hl),a 
11da					inc hl 
11da					ld a,0 
11da					ld (hl),a 
11da					ld (input_ptr), hl 
11da					ld a,d 
11da					ld (input_size), a 
11da					ld a,0 
11da					ld (input_cursor),a 
11da			.instr1:	 
11da			 
11da					; TODO do block cursor 
11da					; TODO switch cursor depending on the modifer key 
11da			 
11da					; update cursor shape change on key hold 
11da			 
11da					ld hl, (input_ptr) 
11da					dec hl 
11da					ld a,(cursor_shape) 
11da					ld (hl), a 
11da			 
11da					; display entered text 
11da					ld a,(input_at_pos) 
11da			            	CALL fLCD_Pos       ;Position cursor to location in A 
11da			            	LD   de, (input_start) 
11da			            	CALL fLCD_Str       ;Display string pointed to by DE 
11da			 
11da					call cin 
11da					cp 0 
11da					jr z, .instr1 
11da			 
11da					; proecess keyboard controls first 
11da			 
11da					ld hl,(input_ptr) 
11da			 
11da					cp KEY_CR	 ; pressing enter ends input 
11da					jr z, .instrcr 
11da			 
11da					cp KEY_BS 	; back space 
11da					jr nz, .instr2 
11da					; process back space 
11da			 
11da					; TODO stop back space if at start of string 
11da					dec hl 
11da					dec hl ; to over write cursor 
11da					ld a,(cursor_shape) 
11da					;ld a,0 
11da					ld (hl),a 
11da					inc hl 
11da					ld a," " 
11da					ld (hl),a 
11da					ld (input_ptr),hl 
11da					 
11da			 
11da					jr .instr1 
11da			 
11da			.instr2:	cp KEY_LEFT    ; cursor left 
11da					jr nz, .instr3 
11da					dec hl 
11da					ld (input_ptr),hl 
11da					jr .instr1 
11da				 
11da			.instr3:	cp KEY_RIGHT      ; cursor right 
11da					jr nz, .instr4 
11da					inc hl 
11da					ld (input_ptr),hl 
11da					jr .instr1 
11da			 
11da			.instr4:	cp KEY_HOME    ; jump to start of line 
11da					jr nz, .instr5 
11da					dec hl 
11da					ld (input_ptr),hl 
11da					jr .instr1 
11da			 
11da			.instr5:	cp KEY_END     ; jump to end of line 
11da					jr nz, .instr6 
11da					dec hl 
11da					ld (input_ptr),hl 
11da					jr .instr1 
11da			.instr6:        cp KEY_UP      ; recall last command 
11da					jr nz, .instrnew 
11da			 
11da				ld hl, scratch 
11da				ld de, os_last_cmd 
11da				call strcpy 
11da					jr .instr1 
11da			 
11da			 
11da			.instrnew:	; no special key pressed to see if we have room to store it 
11da			 
11da					; TODO do string size test 
11da			 
11da					dec hl ; to over write cursor 
11da					ld (hl),a 
11da					inc hl 
11da					ld a,(cursor_shape) 
11da					ld (hl),a 
11da					inc hl 
11da					ld a,0 
11da					ld (hl),a 
11da			 
11da					ld (input_ptr),hl 
11da					 
11da					jr .instr1 
11da			.instrcr:	dec hl		; remove cursor 
11da					ld a,' '	; TODO add a trailing space for safety 
11da					ld (hl),a 
11da					inc hl 
11da					ld a,0 
11da					ld (hl),a 
11da			 
11da			 
11da					; if at end of line scroll up    
11da					; TODO detecting only end of line 4 for scroll up  
11da			 
11da					;ld   
11da			 
11da					ret 
11da			 
11da			 
11da			endif 
11da			; strcpy hl = dest, de source 
11da			 
11da 1a			strcpy:   LD   A, (DE)        ;Get character from string 
11db b7			            OR   A              ;Null terminator? 
11dc c8			            RET  Z              ;Yes, so finished 
11dd 1a					ld a,(de) 
11de 77					ld (hl),a 
11df 13			            INC  DE             ;Point to next character 
11e0 23					inc hl 
11e1 18 f7		            JR   strcpy       ;Repeat 
11e3 c9					ret 
11e4			 
11e4			 
11e4			; TODO string_at  
11e4			; pass string which starts with lcd offset address and then null term string 
11e4			 
11e4			; TODO string to dec 
11e4			; TODO string to hex 
11e4			; TODO byte to string hex 
11e4			; TODO byte to string dec 
11e4			 
11e4			 
11e4			 
11e4			; from z80uartmonitor 
11e4			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e4			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
11e4			; pass hl for where to put the text 
11e4			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e4 c5			hexout:	PUSH BC 
11e5 f5					PUSH AF 
11e6 47					LD B, A 
11e7					; Upper nybble 
11e7 cb 3f				SRL A 
11e9 cb 3f				SRL A 
11eb cb 3f				SRL A 
11ed cb 3f				SRL A 
11ef cd ff 11				CALL tohex 
11f2 77					ld (hl),a 
11f3 23					inc hl	 
11f4					 
11f4					; Lower nybble 
11f4 78					LD A, B 
11f5 e6 0f				AND 0FH 
11f7 cd ff 11				CALL tohex 
11fa 77					ld (hl),a 
11fb 23					inc hl	 
11fc					 
11fc f1					POP AF 
11fd c1					POP BC 
11fe c9					RET 
11ff					 
11ff			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11ff			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
11ff			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11ff			tohex: 
11ff e5					PUSH HL 
1200 d5					PUSH DE 
1201 16 00				LD D, 0 
1203 5f					LD E, A 
1204 21 0c 12				LD HL, .DATA 
1207 19					ADD HL, DE 
1208 7e					LD A, (HL) 
1209 d1					POP DE 
120a e1					POP HL 
120b c9					RET 
120c			 
120c			.DATA: 
120c 30					DEFB	30h	; 0 
120d 31					DEFB	31h	; 1 
120e 32					DEFB	32h	; 2 
120f 33					DEFB	33h	; 3 
1210 34					DEFB	34h	; 4 
1211 35					DEFB	35h	; 5 
1212 36					DEFB	36h	; 6 
1213 37					DEFB	37h	; 7 
1214 38					DEFB	38h	; 8 
1215 39					DEFB	39h	; 9 
1216 41					DEFB	41h	; A 
1217 42					DEFB	42h	; B 
1218 43					DEFB	43h	; C 
1219 44					DEFB	44h	; D 
121a 45					DEFB	45h	; E 
121b 46					DEFB	46h	; F 
121c			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121c			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
121c			;;    subtract $30, if result > 9 then subtract $7 more 
121c			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121c			atohex: 
121c d6 30				SUB $30 
121e fe 0a				CP 10 
1220 f8					RET M		; If result negative it was 0-9 so we're done 
1221 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
1223 c9					RET		 
1224			 
1224			 
1224			 
1224			 
1224			; Get 2 ASCII characters as hex byte from pointer in hl 
1224			 
1224			BYTERD: 
1224 16 00			LD	D,00h		;Set up 
1226 cd 2e 12			CALL	HEXCON		;Get byte and convert to hex 
1229 87				ADD	A,A		;First nibble so 
122a 87				ADD	A,A		;multiply by 16 
122b 87				ADD	A,A		; 
122c 87				ADD	A,A		; 
122d 57				LD	D,A		;Save hi nibble in D 
122e			HEXCON: 
122e 7e				ld a, (hl)		;Get next chr 
122f 23				inc hl 
1230 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1232 fe 0a			CP	00Ah		;Is it 0-9 ? 
1234 38 02			JR	C,NALPHA	;If so miss next bit 
1236 d6 07			SUB	007h		;Else convert alpha 
1238			NALPHA: 
1238 b2				OR	D		;Add hi nibble back 
1239 c9				RET			; 
123a			 
123a			 
123a			; 
123a			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
123a			; Since the routines get_byte and therefore get_nibble are called, only valid 
123a			; characters (0-9a-f) are accepted. 
123a			; 
123a			;get_word        push    af 
123a			;                call    get_byte        ; Get the upper byte 
123a			;                ld      h, a 
123a			;                call    get_byte        ; Get the lower byte 
123a			;                ld      l, a 
123a			;                pop     af 
123a			;                ret 
123a			; 
123a			; Get a byte in hexadecimal notation. The result is returned in A. Since 
123a			; the routine get_nibble is used only valid characters are accepted - the  
123a			; input routine only accepts characters 0-9a-f. 
123a			; 
123a c5			get_byte:        push    bc              ; Save contents of B (and C) 
123b 7e					ld a,(hl) 
123c 23					inc hl 
123d cd 62 12		                call    nibble2val      ; Get upper nibble 
1240 cb 07		                rlc     a 
1242 cb 07		                rlc     a 
1244 cb 07		                rlc     a 
1246 cb 07		                rlc     a 
1248 47			                ld      b, a            ; Save upper four bits 
1249 7e					ld a,(hl) 
124a cd 62 12		                call    nibble2val      ; Get lower nibble 
124d b0			                or      b               ; Combine both nibbles 
124e c1			                pop     bc              ; Restore B (and C) 
124f c9			                ret 
1250			; 
1250			; Get a hexadecimal digit from the serial line. This routine blocks until 
1250			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1250			; to the serial line interface. The lower 4 bits of A contain the value of  
1250			; that particular digit. 
1250			; 
1250			;get_nibble      ld a,(hl)           ; Read a character 
1250			;                call    to_upper        ; Convert to upper case 
1250			;                call    is_hex          ; Was it a hex digit? 
1250			;                jr      nc, get_nibble  ; No, get another character 
1250			 ;               call    nibble2val      ; Convert nibble to value 
1250			 ;               call    print_nibble 
1250			 ;               ret 
1250			; 
1250			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1250			; A valid hexadecimal digit is denoted by a set C flag. 
1250			; 
1250			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1250			;                ret     nc              ; Yes 
1250			;                cp      '0'             ; Less than '0'? 
1250			;                jr      nc, is_hex_1    ; No, continue 
1250			;                ccf                     ; Complement carry (i.e. clear it) 
1250			;                ret 
1250			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1250			;                ret     c               ; Yes 
1250			;                cp      'A'             ; Less than 'A'? 
1250			;                jr      nc, is_hex_2    ; No, continue 
1250			;                ccf                     ; Yes - clear carry and return 
1250			;                ret 
1250			;is_hex_2        scf                     ; Set carry 
1250			;                ret 
1250			; 
1250			; Convert a single character contained in A to upper case: 
1250			; 
1250 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1252 d8			                ret     c 
1253 fe 7b		                cp      'z' + 1         ; > 'z'? 
1255 d0			                ret     nc              ; Nothing to do, either 
1256 e6 5f		                and     $5f             ; Convert to upper case 
1258 c9			                ret 
1259			 
1259			 
1259			to_lower: 
1259			 
1259			   ; if char is in [A-Z] make it lower case 
1259			 
1259			   ; enter : a = char 
1259			   ; exit  : a = lower case char 
1259			   ; uses  : af 
1259			 
1259 fe 41		   cp 'A' 
125b d8			   ret c 
125c			    
125c fe 5b		   cp 'Z'+1 
125e d0			   ret nc 
125f			    
125f f6 20		   or $20 
1261 c9			   ret 
1262			 
1262			; 
1262			; Expects a hexadecimal digit (upper case!) in A and returns the 
1262			; corresponding value in A. 
1262			; 
1262 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1264 38 02		                jr      c, nibble2val_1 ; Yes 
1266 d6 07		                sub     7               ; Adjust for A-F 
1268 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
126a e6 0f		                and     $f              ; Only return lower 4 bits 
126c c9			                ret 
126d			; 
126d			; Print_nibble prints a single hex nibble which is contained in the lower  
126d			; four bits of A: 
126d			; 
126d			;print_nibble    push    af              ; We won't destroy the contents of A 
126d			;                and     $f              ; Just in case... 
126d			;                add     a, '0'             ; If we have a digit we are done here. 
126d			;                cp      '9' + 1         ; Is the result > 9? 
126d			;                jr      c, print_nibble_1 
126d			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
126d			;print_nibble_1  call    putc            ; Print the nibble and 
126d			;                pop     af              ; restore the original value of A 
126d			;                ret 
126d			;; 
126d			;; Send a CR/LF pair: 
126d			; 
126d			;crlf            push    af 
126d			;                ld      a, cr 
126d			;                call    putc 
126d			;                ld      a, lf 
126d			;                call    putc 
126d			;                pop     af 
126d			;                ret 
126d			; 
126d			; Print_word prints the four hex digits of a word to the serial line. The  
126d			; word is expected to be in HL. 
126d			; 
126d			;print_word      push    hl 
126d			;                push    af 
126d			;                ld      a, h 
126d			;                call    print_byte 
126d			;                ld      a, l 
126d			;                call    print_byte 
126d			;                pop     af 
126d			;                pop     hl 
126d			;                ret 
126d			; 
126d			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
126d			; The byte to be printed is expected to be in A. 
126d			; 
126d			;print_byte      push    af              ; Save the contents of the registers 
126d			;                push    bc 
126d			;                ld      b, a 
126d			;                rrca 
126d			;                rrca 
126d			;                rrca 
126d			;                rrca 
126d			;                call    print_nibble    ; Print high nibble 
126d			;                ld      a, b 
126d			;                call    print_nibble    ; Print low nibble 
126d			;                pop     bc              ; Restore original register contents 
126d			;                pop     af 
126d			;                ret 
126d			 
126d			 
126d			 
126d			 
126d			 
126d			fourehexhl:  
126d 7e				ld a,(hl) 
126e cd 1c 12			call atohex 
1271 cb 3f				SRL A 
1273 cb 3f				SRL A 
1275 cb 3f				SRL A 
1277 cb 3f				SRL A 
1279 47				ld b, a 
127a 23				inc hl 
127b 7e				ld a,(hl) 
127c 23				inc hl 
127d cd 1c 12			call atohex 
1280 80				add b 
1281 57				ld d,a 
1282 7e				ld a,(hl) 
1283 cd 1c 12			call atohex 
1286 cb 3f				SRL A 
1288 cb 3f				SRL A 
128a cb 3f				SRL A 
128c cb 3f				SRL A 
128e 47				ld b, a 
128f 23				inc hl 
1290 7e				ld a,(hl) 
1291 23				inc hl 
1292 cd 1c 12			call atohex 
1295 80				add b 
1296 5f				ld e, a 
1297 d5				push de 
1298 e1				pop hl 
1299 c9				ret 
129a			 
129a			; pass hl. returns z set if the byte at hl is a digit 
129a			;isdigithl:  
129a			;	push bc 
129a			;	ld a,(hl) 
129a			;	cp ':' 
129a			;	jr nc, .isdf 		; > 
129a			;	cp '0' 
129a			;	jr c, .isdf		; < 
129a			; 
129a			;	; TODO find a better way to set z 
129a			; 
129a			;	ld b,a 
129a			;	cp b 
129a			;	pop bc 
129a			;	ret 
129a			; 
129a			;.isdf:	; not digit so clear z 
129a			; 
129a			;	; TODO find a better way to unset z 
129a			; 
129a			;	ld b,a 
129a			;	inc b 
129a			;	cp b 
129a			; 
129a			;	pop bc 
129a			;	ret 
129a				 
129a				 
129a			 
129a			 
129a			; pass hl as the four byte address to load 
129a			 
129a			get_word_hl:  
129a e5				push hl 
129b cd 3a 12			call get_byte 
129e				 
129e 47				ld b, a 
129f			 
129f e1				pop hl 
12a0 23				inc hl 
12a1 23				inc hl 
12a2			 
12a2			; TODO not able to handle a-f  
12a2 7e				ld a,(hl) 
12a3			;	;cp ':' 
12a3			;	cp 'g' 
12a3			;	jr nc, .single_byte_hl 		; > 
12a3			;	cp 'G' 
12a3			;	jr nc, .single_byte_hl 		; > 
12a3			;	cp '0' 
12a3			;	jr c, .single_byte_hl		; < 
12a3			 
12a3				;call isdigithl 
12a3 fe 00			cp 0 
12a5 28 06			jr z, .single_byte_hl 
12a7			 
12a7			.getwhln:   ; hex word so get next byte 
12a7			 
12a7 cd 3a 12			call get_byte 
12aa 6f				ld l, a 
12ab 60				ld h,b 
12ac c9				ret 
12ad 68			.single_byte_hl:   ld l,b 
12ae 26 00				ld h,0 
12b0 c9					ret 
12b1			 
12b1			 
12b1			 
12b1			 
12b1 21 1e 1d			ld hl,asc+1 
12b4			;	ld a, (hl) 
12b4			;	call nibble2val 
12b4 cd 3a 12			call get_byte 
12b7			 
12b7			;	call fourehexhl 
12b7 32 30 f1			ld (scratch+52),a 
12ba				 
12ba 21 2e f1			ld hl,scratch+50 
12bd 22 1f f4			ld (os_cur_ptr),hl 
12c0			 
12c0 c9				ret 
12c1			 
12c1			 
12c1			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
12c1			 
12c1			; Decimal Unsigned Version 
12c1			 
12c1			;Number in a to decimal ASCII 
12c1			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
12c1			;Example: display a=56 as "056" 
12c1			;input: a = number 
12c1			;Output: a=0,value of a in the screen 
12c1			;destroys af,bc (don't know about hl and de) 
12c1			DispAToASCII: 
12c1 0e 9c			ld	c,-100 
12c3 cd cd 12			call	.Na1 
12c6 0e f6			ld	c,-10 
12c8 cd cd 12			call	.Na1 
12cb 0e ff			ld	c,-1 
12cd 06 2f		.Na1:	ld	b,'0'-1 
12cf 04			.Na2:	inc	b 
12d0 81				add	a,c 
12d1 38 fc			jr	c,.Na2 
12d3 91				sub	c		;works as add 100/10/1 
12d4 f5				push af		;safer than ld c,a 
12d5 78				ld	a,b		;char is in b 
12d6			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
12d6 f1				pop af		;safer than ld a,c 
12d7 c9				ret 
12d8			 
12d8			; Decimal Signed Version 
12d8			 
12d8			; DispA 
12d8			; -------------------------------------------------------------- 
12d8			; Converts a signed integer value to a zero-terminated ASCII 
12d8			; string representative of that value (using radix 10). 
12d8			; -------------------------------------------------------------- 
12d8			; INPUTS: 
12d8			;     HL     Value to convert (two's complement integer). 
12d8			;     DE     Base address of string destination. (pointer). 
12d8			; -------------------------------------------------------------- 
12d8			; OUTPUTS: 
12d8			;     None 
12d8			; -------------------------------------------------------------- 
12d8			; REGISTERS/MEMORY DESTROYED 
12d8			; AF HL 
12d8			; -------------------------------------------------------------- 
12d8			 
12d8			;DispHLToASCII: 
12d8			;   push    de 
12d8			;   push    bc 
12d8			; 
12d8			;; Detect sign of HL. 
12d8			;    bit    7, h 
12d8			;    jr     z, ._DoConvert 
12d8			; 
12d8			;; HL is negative. Output '-' to string and negate HL. 
12d8			;    ld     a, '-' 
12d8			;    ld     (de), a 
12d8			;    inc    de 
12d8			; 
12d8			;; Negate HL (using two's complement) 
12d8			;    xor    a 
12d8			;    sub    l 
12d8			;    ld     l, a 
12d8			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
12d8			;    sbc    a, h 
12d8			;    ld     h, a 
12d8			; 
12d8			;; Convert HL to digit characters 
12d8			;._DoConvert: 
12d8			;    ld     b, 0     ; B will count character length of number 
12d8			;-   ld     a, 10 
12d8			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
12d8			;    push   af 
12d8			;    inc    b 
12d8			;    ld     a, h 
12d8			;    or     l 
12d8			;    jr     nz, - 
12d8			; 
12d8			;; Retrieve digits from stack 
12d8			;-   pop    af 
12d8			;    or     $30 
12d8			;    ld     (de), a 
12d8			;    inc    de 
12d8			;    djnz   - 
12d8			; 
12d8			;; Terminate string with NULL 
12d8			;    xor    a 
12d8			;    ld     (de), a 
12d8			; 
12d8			;    pop    bc 
12d8			;    pop    de 
12d8			;    ret 
12d8			 
12d8			;Comments 
12d8			; 
12d8			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
12d8			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
12d8			;    Note that the output string will not be fixed-width. 
12d8			; 
12d8			;Example Usage 
12d8			; 
12d8			;    ld    hl, -1004 
12d8			;    ld    de, OP1 
12d8			;    call  DispA 
12d8			;    ld    hl, OP1 
12d8			;    syscall  PutS 
12d8			 
12d8			 
12d8			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12d8			 
12d8			 
12d8			;Converts an ASCII string to an unsigned 16-bit integer 
12d8			;Quits when it reaches a non-decimal digit 
12d8			 
12d8			string_to_uint16: 
12d8			atoui_16: 
12d8			;Input: 
12d8			;     DE points to the string 
12d8			;Outputs: 
12d8			;     HL is the result 
12d8			;     A is the 8-bit value of the number 
12d8			;     DE points to the byte after the number 
12d8			;Destroys: 
12d8			;     BC 
12d8			;       if the string is non-empty, BC is HL/10 
12d8			;Size:  24 bytes 
12d8			;Speed: 42+d(104+{0,9}) 
12d8			;       d is the number of digits in the number 
12d8			;       max is 640 cycles for a 5 digit number 
12d8			;Assuming no leading zeros: 
12d8			;1 digit:  146cc 
12d8			;2 digit:  250cc 
12d8			;3 digit:  354cc or 363cc (avg: 354.126cc) 
12d8			;4 digit:  458cc or 467cc (avg: 458.27cc) 
12d8			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
12d8			;avg: 544.81158447265625cc (544+13297/16384) 
12d8			;=============================================================== 
12d8 21 00 00		  ld hl,0 
12db			.u16a: 
12db 1a			  ld a,(de) 
12dc d6 30		  sub 30h 
12de fe 0a		  cp 10 
12e0 d0			  ret nc 
12e1 13			  inc de 
12e2 44			  ld b,h 
12e3 4d			  ld c,l 
12e4 29			  add hl,hl 
12e5 29			  add hl,hl 
12e6 09			  add hl,bc 
12e7 29			  add hl,hl 
12e8 85			  add a,l 
12e9 6f			  ld l,a 
12ea 30 ef		  jr nc,.u16a 
12ec 24			  inc h 
12ed c3 db 12		  jp .u16a 
12f0			 
12f0			 
12f0			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12f0			 
12f0			;written by Zeda 
12f0			;Converts a 16-bit unsigned integer to an ASCII string. 
12f0			 
12f0			uitoa_16: 
12f0			;Input: 
12f0			;   DE is the number to convert 
12f0			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
12f0			;Output: 
12f0			;   HL points to the null-terminated ASCII string 
12f0			;      NOTE: This isn't necessarily the same as the input HL. 
12f0 d5			  push de 
12f1 c5			  push bc 
12f2 f5			  push af 
12f3 eb			  ex de,hl 
12f4			 
12f4 01 f0 d8		  ld bc,-10000 
12f7 3e 2f		  ld a,'0'-1 
12f9 3c			  inc a 
12fa 09			  add hl,bc  
12fb 38 fc		   jr c,$-2 
12fd 12			  ld (de),a 
12fe 13			  inc de 
12ff			 
12ff 01 e8 03		  ld bc,1000 
1302 3e 3a		  ld a,'9'+1 
1304 3d			  dec a  
1305 09			  add hl,bc  
1306 30 fc		   jr nc,$-2 
1308 12			  ld (de),a 
1309 13			  inc de 
130a			 
130a 01 9c ff		  ld bc,-100 
130d 3e 2f		  ld a,'0'-1 
130f 3c			  inc a  
1310 09			  add hl,bc  
1311 38 fc		   jr c,$-2 
1313 12			  ld (de),a 
1314 13			  inc de 
1315			 
1315 7d			  ld a,l 
1316 26 3a		  ld h,'9'+1 
1318 25			  dec h  
1319 c6 0a		  add a,10  
131b 30 fb		   jr nc,$-3 
131d c6 30		  add a,'0' 
131f eb			  ex de,hl 
1320 72			  ld (hl),d 
1321 23			  inc hl 
1322 77			  ld (hl),a 
1323 23			  inc hl 
1324 36 00		  ld (hl),0 
1326			 
1326			;Now strip the leading zeros 
1326 0e fa		  ld c,-6 
1328 09			  add hl,bc 
1329 3e 30		  ld a,'0' 
132b 23			  inc hl  
132c be			  cp (hl)  
132d 28 fc		  jr z,$-2 
132f			 
132f			;Make sure that the string is non-empty! 
132f 7e			  ld a,(hl) 
1330 b7			  or a 
1331 20 01		  jr nz,.atoub 
1333 2b			  dec hl 
1334			.atoub: 
1334			 
1334 f1			  pop af 
1335 c1			  pop bc 
1336 d1			  pop de 
1337 c9			  ret 
1338			 
1338			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1338			 
1338			toUpper: 
1338			;A is the char. 
1338			;If A is a lowercase letter, this sets it to the matching uppercase 
1338			;18cc or 30cc or 41cc 
1338			;avg: 26.75cc 
1338 fe 61		  cp 'a' 
133a d8			  ret c 
133b fe 7b		  cp 'z'+1 
133d d0			  ret nc 
133e d6 20		  sub 'a'-'A' 
1340 c9			  ret 
1341			 
1341			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1341			 
1341			; String Length 
1341			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1341			 
1341			; Get the length of the null-terminated string starting at $8000 hl 
1341			;    LD     HL, $8000 
1341			 
1341			strlenz: 
1341			 
1341 af			    XOR    A               ; Zero is the value we are looking for. 
1342 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1343 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1344			                           ; 65, 536 bytes (the entire addressable memory space). 
1344 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1346			 
1346			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1346 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1347 6f			    LD     L, A             ; number of bytes 
1348 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
134a 2b			    DEC    HL              ; Compensate for null. 
134b c9				ret 
134c			 
134c			; Get the length of the A terminated string starting at $8000 hl 
134c			;    LD     HL, $8000 
134c			 
134c			strlent: 
134c			 
134c			                  ; A is the value we are looking for. 
134c 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
134e 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1350			                           ; 65, 536 bytes (the entire addressable memory space). 
1350 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1352			 
1352			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1352 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1354 2e 00		    LD     L, 0             ; number of bytes 
1356 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1358 2b			    DEC    HL              ; Compensate for null. 
1359 c9				ret 
135a			 
135a			 
135a			;Comparing Strings 
135a			 
135a			;IN    HL     Address of string1. 
135a			;      DE     Address of string2. 
135a			 
135a			; doc given but wrong??? 
135a			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
135a			;      carry  Set if string1 > string2, reset if string1 <= string2. 
135a			; tested 
135a			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
135a			 
135a			strcmp_old: 
135a e5			    PUSH   HL 
135b d5			    PUSH   DE 
135c			 
135c 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
135d be			    CP     (HL)            ; (want to minimize work). 
135e 38 01		    JR     C, Str1IsBigger 
1360 7e			    LD     A, (HL) 
1361			 
1361			Str1IsBigger: 
1361 4f			    LD     C, A             ; Put length in BC 
1362 06 00		    LD     B, 0 
1364 13			    INC    DE              ; Increment pointers to meat of string. 
1365 23			    INC    HL 
1366			 
1366			CmpLoop: 
1366 1a			    LD     A, (DE)          ; Compare bytes. 
1367 ed a1		    CPI 
1369 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
136b 13			    INC    DE              ; Update pointer. 
136c ea 66 13		    JP     PE, CmpLoop 
136f			 
136f d1			    POP    DE 
1370 e1			    POP    HL 
1371 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1372 be			    CP     (HL) 
1373 c9			    RET 
1374			 
1374			NoMatch: 
1374 2b			    DEC    HL 
1375 be			    CP     (HL)            ; Compare again to affect carry. 
1376 d1			    POP    DE 
1377 e1			    POP    HL 
1378 c9			    RET 
1379			 
1379			;; test strmp 
1379			; 
1379			;ld de, .str1 
1379			;ld hl, .str2 
1379			;call strcmp 
1379			;jr z, .z1 
1379			;;this 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "NZ1" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			;.z1: 
1379			; 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "ZZ1" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			; 
1379			;ld de, .str1 
1379			;ld hl, .str1 
1379			;call strcmp 
1379			;jr z, .z2 
1379			;;this 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "NZ2" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			;.z2: 
1379			; 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "ZZ2" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			; 
1379			;ld de, .str1 
1379			;ld hl, .str2 
1379			;call strcmp 
1379			;jr c, .c1 
1379			; 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "Nc1" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			;.c1: 
1379			;;this 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "cc1" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			; 
1379			;ld de, .str1 
1379			;ld hl, .str1 
1379			;call strcmp 
1379			;jr c, .c2 
1379			;;this 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "Nc2" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			;.c2: 
1379			; 
1379			;	if DEBUG_FORTH_WORDS 
1379			;		DMARK "cc2" 
1379			;		CALLMONITOR 
1379			;	endif 
1379			;	NEXTW 
1379			;.str1:   db "string1",0 
1379			;.str2:   db "string2",0 
1379			 
1379			; only care about direct match or not 
1379			; hl and de strings 
1379			; zero set if the same 
1379			 
1379			strcmp: 
1379 1a				ld a, (de) 
137a be				cp (hl) 
137b 28 02			jr z, .ssame 
137d b7				or a 
137e c9				ret 
137f			 
137f			.ssame:  
137f fe 00			cp 0 
1381 c8				ret z 
1382			 
1382 23				inc hl 
1383 13				inc de 
1384 18 f3			jr strcmp 
1386				 
1386				 
1386			 
1386			;Copyright (c) 2014, Luke Maurits 
1386			;All rights reserved. 
1386			; 
1386			;Redistribution and use in source and binary forms, with or without 
1386			;modification, are permitted provided that the following conditions are met: 
1386			; 
1386			;* Redistributions of source code must retain the above copyright notice, this 
1386			;  list of conditions and the following disclaimer. 
1386			; 
1386			;* Redistributions in binary form must reproduce the above copyright notice, 
1386			;  this list of conditions and the following disclaimer in the documentation 
1386			;  and/or other materials provided with the distribution. 
1386			; 
1386			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
1386			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
1386			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
1386			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
1386			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
1386			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
1386			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
1386			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
1386			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
1386			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
1386			 
1386			; https://github.com/lmaurits/lm512/blob/master/string.z80 
1386			 
1386			StrictStrCmp: 
1386				; Load next chars of each string 
1386 1a				ld a, (de) 
1387 47				ld b, a 
1388 7e				ld a, (hl) 
1389				; Compare 
1389 b8				cp b 
138a				; Return non-zero if chars don't match 
138a c0				ret nz 
138b				; Check for end of both strings 
138b fe 00			cp "\0" 
138d				; Return if strings have ended 
138d c8				ret z 
138e				; Otherwise, advance to next chars 
138e 23				inc hl 
138f 13				inc de 
1390 18 f4			jr StrictStrCmp 
1392			 
1392			;end 
1392			; eof 
1392			 
1392			 
1392			 
1392			 
1392			 
1392			 
# End of file firmware_strings.asm
1392			include "firmware_memory.asm"   ; malloc and free  
1392			 
1392			if DEBUG_FORTH_MALLOC_HIGH 
1392			.mallocsize: db "Wants malloc >256",0 
1392			.mallocasize: db "MALLOC gives >256",0 
1392			.malloczero: db "MALLOC gives zero",0 
1392			 
1392			malloc_guard_zerolen: 
1392				push hl 
1392				push de 
1392				push af 
1392			 
1392				ld de, 0 
1392			        call cmp16 
1392				jr nz, .lowalloz 
1392			 
1392				push hl 
1392				push de 
1392					ld hl, display_fb0 
1392					ld (display_fb_active), hl 
1392				call clear_display 
1392				ld a, 0 
1392				ld de, .malloczero 
1392				call str_at_display 
1392				call update_display 
1392				call delay1s 
1392				call delay1s 
1392				call bp_on 
1392			;	ld a, 0 
1392			;	ld (os_view_disable), a 
1392			 
1392				pop de 
1392				pop hl 
1392			 
1392				 
1392			 
1392				CALLMONITOR 
1392			.lowalloz: 
1392			 
1392			 
1392				pop af 
1392				pop de 
1392				pop hl 
1392			ret 
1392			 
1392			malloc_guard_entry: 
1392				push hl 
1392				push de 
1392				push af 
1392			 
1392			 	or a      ;clear carry flag 
1392				push hl 
1392				ld de, 255 
1392				sbc hl, de 
1392				jr c, .lowalloc 
1392			 
1392				push de 
1392					ld hl, display_fb0 
1392					ld (display_fb_active), hl 
1392				call clear_display 
1392				ld a, 0 
1392				ld de, .mallocsize 
1392				call str_at_display 
1392				call update_display 
1392				call delay1s 
1392				call delay1s 
1392			;	ld a, 0 
1392			;	ld (os_view_disable), a 
1392				call bp_on 
1392			 
1392				pop de 
1392				pop hl 
1392			 
1392				 
1392			 
1392				CALLMONITOR 
1392				jr .lowdone 
1392			.lowalloc: 
1392			 
1392			 
1392				pop hl 
1392			.lowdone:	pop af 
1392				pop de 
1392				pop hl 
1392			ret 
1392			 
1392			malloc_guard_exit: 
1392				push hl 
1392				push de 
1392				push af 
1392			 
1392			 	or a      ;clear carry flag 
1392				push hl 
1392				ld de, 255 
1392				sbc hl, de 
1392				jr c, .lowallocx 
1392			 
1392				push de 
1392					ld hl, display_fb0 
1392					ld (display_fb_active), hl 
1392				call clear_display 
1392				ld a, 0 
1392				ld de, .mallocasize 
1392				call str_at_display 
1392				call update_display 
1392				call delay1s 
1392				call delay1s 
1392			;	ld a, 0 
1392			;	ld (os_view_disable), a 
1392				call bp_on 
1392				pop de 
1392				pop hl 
1392			 
1392				CALLMONITOR 
1392				jr .lowdonex 
1392			.lowallocx: 
1392			 
1392				pop hl 
1392			.lowdonex:	pop af 
1392				pop de 
1392				pop hl 
1392			ret 
1392			endif 
1392			 
1392			if MALLOC_2 
1392			; Z80 Malloc and Free Functions 
1392			 
1392			; Malloc Function: 
1392			; Input: 
1392			;   HL: Size of block to allocate 
1392			; Output: 
1392			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1392			 
1392			malloc: 
1392				 
1392			if DEBUG_FORTH_MALLOC_HIGH 
1392			call malloc_guard_entry 
1392			endif 
1392			 
1392			 
1392			 
1392			 
1392					if DEBUG_FORTH_MALLOC 
1392						DMARK "mal" 
1392						CALLMONITOR 
1392					endif 
1392			    push af            ; Save AF register 
1392			    ld a, l            ; Load low byte of size into A 
1392			    or h               ; Check if size is zero 
1392			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1392			 
1392			    ; Allocate memory 
1392			    ld hl, (heap_start) ; Load start of heap into HL 
1392					if DEBUG_FORTH_MALLOC 
1392						DMARK "ma1" 
1392						CALLMONITOR 
1392					endif 
1392			    call malloc_internal ; Call internal malloc function 
1392			    pop af             ; Restore AF register 
1392			if DEBUG_FORTH_MALLOC_HIGH 
1392			call malloc_guard_exit 
1392			call malloc_guard_zerolen 
1392			endif 
1392			    ret                ; Return 
1392			 
1392			; Free Function: 
1392			; Input: 
1392			;   HL: Pointer to memory block to free 
1392			; Output: 
1392			;   None 
1392			 
1392			free: 
1392			    push af            ; Save AF register 
1392			    ld a, l            ; Load low byte of pointer into A 
1392			    or h               ; Check if pointer is NULL 
1392			    jp z, free_exit    ; If pointer is NULL, exit 
1392			 
1392			    ; Free memory 
1392			    ld hl, (heap_start) ; Load start of heap into HL 
1392			    call free_internal  ; Call internal free function 
1392			    pop af             ; Restore AF register 
1392			    ret                ; Return 
1392			 
1392			; Internal Malloc Function: 
1392			; Input: 
1392			;   HL: Size of block to allocate 
1392			; Output: 
1392			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1392			 
1392			malloc_internal: 
1392			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1392			    add hl, bc         ; Add management overhead to requested size 
1392			    ex de, hl          ; Save total size in DE, and keep it in HL 
1392					if DEBUG_FORTH_MALLOC 
1392						DMARK "ma2" 
1392						CALLMONITOR 
1392					endif 
1392			 
1392			    ; Search for free memory block 
1392			    ld de, (heap_end)  ; Load end of heap into DE 
1392			    ld bc, 0           ; Initialize counter 
1392			 
1392					if DEBUG_FORTH_MALLOC 
1392						DMARK "ma2" 
1392						CALLMONITOR 
1392					endif 
1392			malloc_search_loop: 
1392			    ; Check if current block is free 
1392			    ld a, (hl)         ; Load current block's status (free or used) 
1392			    cp 0               ; Compare with zero (free) 
1392			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1392			 
1392			    ; Check if current block is large enough 
1392			    ld a, (hl+1)       ; Load high byte of block size 
1392			    cp l               ; Compare with low byte of requested size 
1392			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1392			 
1392			    ld a, (hl+2)       ; Load low byte of block size 
1392			    cp h               ; Compare with high byte of requested size 
1392			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1392			 
1392			    ; Mark block as used 
1392			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1392			 
1392			    ; Calculate remaining space in block 
1392			    ld bc, 0           ; Clear BC 
1392			    add hl, bc         ; Increment HL to point to start of data block 
1392			    add hl, de         ; HL = HL + DE (total size) 
1392			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1392			    add hl, bc         ; Add management overhead to start of data block 
1392			 
1392			    ; Save pointer to allocated block in HL 
1392			if DEBUG_FORTH_MALLOC_HIGH 
1392						DMARK "ma5" 
1392			call malloc_guard_exit 
1392			call malloc_guard_zerolen 
1392			endif 
1392			    ret 
1392			 
1392			malloc_skip_block_check: 
1392			    ; Move to the next block 
1392			    ld bc, 3           ; Size of management overhead 
1392			    add hl, bc         ; Move to the next block 
1392			    inc de             ; Increment counter 
1392			 
1392			    ; Check if we have reached the end of heap 
1392			    ld a, e            ; Load low byte of heap end address 
1392			    cp (hl)            ; Compare with low byte of current address 
1392			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1392			    ld a, d            ; Load high byte of heap end address 
1392			    cp 0               ; Check if it's zero (end of memory) 
1392			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1392			 
1392			    ; If we reached here, allocation failed 
1392			    xor a              ; Set result to NULL 
1392			if DEBUG_FORTH_MALLOC_HIGH 
1392						DMARK "ma6" 
1392			call malloc_guard_exit 
1392			call malloc_guard_zerolen 
1392			endif 
1392			    ret 
1392			malloc_exit: 
1392			if DEBUG_FORTH_MALLOC_HIGH 
1392						DMARK "ma7" 
1392			call malloc_guard_exit 
1392			call malloc_guard_zerolen 
1392			endif 
1392			    ret 
1392			 
1392			; Internal Free Function: 
1392			; Input: 
1392			;   HL: Pointer to memory block to free 
1392			; Output: 
1392			;   None 
1392			 
1392			free_internal: 
1392			    ld de, (heap_start) ; Load start of heap into DE 
1392			    ld bc, 0            ; Initialize counter 
1392			 
1392			free_search_loop: 
1392			    ; Check if current block contains the pointer 
1392			    ld a, l             ; Load low byte of pointer 
1392			    cp (hl+1)           ; Compare with high byte of current block's address 
1392			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1392			    ld a, h             ; Load high byte of pointer 
1392			    cp (hl+2)           ; Compare with low byte of current block's address 
1392			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1392			 
1392			    ; Mark block as free 
1392			    ld (hl), 0          ; Set status byte to indicate free block 
1392			    ret                 ; Return 
1392			 
1392			free_skip_block_check: 
1392			    ; Move to the next block 
1392			    ld bc, 3            ; Size of management overhead 
1392			    add hl, bc          ; Move to the next block 
1392			    inc de              ; Increment counter 
1392			 
1392			    ; Check if we have reached the end of heap 
1392			    ld a, e             ; Load low byte of heap end address 
1392			    cp (hl)             ; Compare with low byte of current address 
1392			    jr nz, free_search_loop  ; If not equal, continue searching 
1392			    ld a, d             ; Load high byte of heap end address 
1392			    cp 0                ; Check if it's zero (end of memory) 
1392			    jr nz, free_search_loop  ; If not zero, continue searching 
1392			 
1392			    ; If we reached here, pointer is not found in heap 
1392			    ret 
1392			 
1392			free_exit: 
1392			    ret                 ; Return 
1392			 
1392			; Define heap start and end addresses 
1392			;heap_start:    .dw 0xC000   ; Start of heap 
1392			;heap_end:      .dw 0xE000   ; End of heap 
1392			 
1392			endif 
1392			 
1392			 
1392			if MALLOC_1 
1392			 
1392			 
1392			 
1392			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1392			 
1392			;moved to firmware.asm 
1392			;heap_start        .equ  0x9000      ; Starting address of heap 
1392			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1392			 
1392			;      .org 0 
1392			;      jp    main 
1392			 
1392			 
1392			;      .org  0x100 
1392			;main: 
1392			;      ld    HL, 0x8100 
1392			;      ld    SP, HL 
1392			; 
1392			;      call  heap_init 
1392			; 
1392			;      ; Make some allocations 
1392			;      ld    HL, 12 
1392			;      call  malloc            ; Allocates 0x9004 
1392			; 
1392			;      ld    HL, 12 
1392			;      call  malloc            ; Allocates 0x9014 
1392			; 
1392			;      ld    HL, 12 
1392			;      call  malloc            ; Allocates 0x9024 
1392			; 
1392			;      ; Free some allocations 
1392			;      ld    HL, 0x9014 
1392			;      call  free 
1392			; 
1392			;      ld    HL, 0x9004 
1392			;      call  free 
1392			; 
1392			;      ld    HL, 0x9024 
1392			;      call  free 
1392			; 
1392			; 
1392			;      halt 
1392			 
1392			 
1392			;------------------------------------------------------------------------------ 
1392			;     heap_init                                                               : 
1392			;                                                                             : 
1392			; Description                                                                 : 
1392			;     Initialise the heap and make it ready for malloc and free operations.   : 
1392			;                                                                             : 
1392			;     The heap is maintained as a linked list, starting with an initial       : 
1392			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1392			;     the first free block in the heap. Each block then points to the next    : 
1392			;     free block within the heap, and the free list ends at the first block   : 
1392			;     with a null pointer to the next free block.                             : 
1392			;                                                                             : 
1392			; Parameters                                                                  : 
1392			;     Inputs are compile-time only. Two defines which specify the starting    : 
1392			;     address of the heap and its size are required, along with a memory      : 
1392			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1392			;     principally stores a pointer to the first free block in the heap.       : 
1392			;                                                                             : 
1392			; Returns                                                                     : 
1392			;     Nothing                                                                 : 
1392			;------------------------------------------------------------------------------ 
1392			heap_init: 
1392 e5			      push  HL 
1393			 
1393			      ; Initialise free list struct 
1393 21 0e 80		      ld    HL, heap_start 
1396 22 0a 80		      ld    (free_list), HL 
1399 21 00 00		      ld    HL, 0 
139c 22 0c 80		      ld    (free_list+2), HL 
139f			 
139f			      ; Insert first free block at bottom of heap, consumes entire heap 
139f 21 d3 f0		      ld    HL, heap_start+heap_size-4 
13a2 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
13a5 21 c5 70		      ld    HL, heap_size-4 
13a8 22 10 80		      ld    (heap_start+2), HL      ; Block size 
13ab			 
13ab			      ; Insert end of free list block at top of heap - two null words will 
13ab			      ; terminate the free list 
13ab 21 00 00		      ld    HL, 0 
13ae 22 d5 f0		      ld    (heap_start+heap_size-2), HL 
13b1 22 d3 f0		      ld    (heap_start+heap_size-4), HL 
13b4			 
13b4 e1			      pop   HL 
13b5			 
13b5 c9			      ret 
13b6			 
13b6			 
13b6			;------------------------------------------------------------------------------ 
13b6			;     malloc                                                                  : 
13b6			;                                                                             : 
13b6			; Description                                                                 : 
13b6			;     Allocates the wanted space from the heap and returns the address of the : 
13b6			;     first useable byte of the allocation.                                   : 
13b6			;                                                                             : 
13b6			;     Allocations can happen in one of two ways:                              : 
13b6			;                                                                             : 
13b6			;     1. A free block may be found which is the exact size wanted. In this    : 
13b6			;        case the block is removed from the free list and retuedn to the      : 
13b6			;        caller.                                                              : 
13b6			;     2. A free block may be found which is larger than the size wanted. In   : 
13b6			;        this case, the larger block is split into two. The first portion of  : 
13b6			;        this block will become the requested space by the malloc call and    : 
13b6			;        is returned to the caller. The second portion becomes a new free     : 
13b6			;        block, and the free list is adjusted to maintain continuity via this : 
13b6			;        newly created block.                                                 : 
13b6			;                                                                             : 
13b6			;     malloc does not set any initial value in the allocated space, the       : 
13b6			;     caller is required to do this as required.                              : 
13b6			;                                                                             : 
13b6			;     This implementation of malloc uses the stack exclusively, and is        : 
13b6			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
13b6			;     advisable to disable interrupts before calling malloc, and recommended  : 
13b6			;     to avoid the use of malloc inside ISRs in general.                      : 
13b6			;                                                                             : 
13b6			;     NOTE: heap_init must be called before malloc and free can be used.      : 
13b6			;                                                                             : 
13b6			; Parameters                                                                  : 
13b6			;     HL  Number of bytes wanted                                              : 
13b6			;                                                                             : 
13b6			; Returns                                                                     : 
13b6			;     HL  Address of the first useable byte of the allocation                 : 
13b6			;                                                                             : 
13b6			; Flags                                                                       : 
13b6			;     Z   Set if the allocation did not succeed, clear otherwise              : 
13b6			;                                                                             : 
13b6			; Stack frame                                                                 : 
13b6			;       |             |                                                       : 
13b6			;       +-------------+                                                       : 
13b6			;       |     BC      |                                                       : 
13b6			;       +-------------+                                                       : 
13b6			;       |     DE      |                                                       : 
13b6			;       +-------------+                                                       : 
13b6			;       |     IX      |                                                       : 
13b6			;       +-------------+                                                       : 
13b6			;       |  prev_free  |                                                       : 
13b6			;   +4  +-------------+                                                       : 
13b6			;       |  this_free  |                                                       : 
13b6			;   +2  +-------------+                                                       : 
13b6			;       |  next_free  |                                                       : 
13b6			;   +0  +-------------+                                                       : 
13b6			;       |             |                                                       : 
13b6			;                                                                             : 
13b6			;------------------------------------------------------------------------------ 
13b6			 
13b6			 
13b6			;malloc: 
13b6			; 
13b6			;	SAVESP ON 1 
13b6			; 
13b6			;	call malloc_code 
13b6			; 
13b6			;	CHECKSP ON 1 
13b6			;	ret 
13b6			 
13b6			 
13b6			malloc: 
13b6 c5			      push  BC 
13b7 d5			      push  DE 
13b8 dd e5		      push  IX 
13ba			if DEBUG_FORTH_MALLOC_HIGH 
13ba			call malloc_guard_entry 
13ba			endif 
13ba			 
13ba					if DEBUG_FORTH_MALLOC 
13ba						DMARK "mal" 
13ba						CALLMONITOR 
13ba					endif 
13ba 7c			      ld    A, H                    ; Exit if no space requested 
13bb b5			      or    L 
13bc ca 7b 14		      jp    Z, malloc_early_exit 
13bf			 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			; 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			;inc hl 
13bf			 
13bf			 
13bf			 
13bf			 
13bf					if DEBUG_FORTH_MALLOC 
13bf						DMARK "maA" 
13bf						CALLMONITOR 
13bf					endif 
13bf			      ; Set up stack frame 
13bf eb			      ex    DE, HL 
13c0 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
13c3 39			      add   HL, SP 
13c4 f9			      ld    SP, HL 
13c5 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
13c9 dd 39		      add   IX, SP 
13cb			 
13cb			      ; Setup initial state 
13cb 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
13ce 19			      add   HL, DE 
13cf			 
13cf 44			      ld    B, H                    ; Move want to BC 
13d0 4d			      ld    C, L 
13d1			 
13d1 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
13d4 dd 75 04		      ld    (IX+4), L 
13d7 dd 74 05		      ld    (IX+5), H 
13da			 
13da 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
13db 23			      inc   HL 
13dc 56			      ld    D, (HL) 
13dd dd 73 02		      ld    (IX+2), E 
13e0 dd 72 03		      ld    (IX+3), D 
13e3 eb			      ex    DE, HL                  ; this_free ptr into HL 
13e4			 
13e4					if DEBUG_FORTH_MALLOC 
13e4						DMARK "maB" 
13e4						CALLMONITOR 
13e4					endif 
13e4			      ; Loop through free block list to find some space 
13e4			malloc_find_space: 
13e4 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
13e5 23			      inc   HL 
13e6 56			      ld    D, (HL) 
13e7			 
13e7 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
13e8 b3			      or    E 
13e9 ca 75 14		      jp    Z, malloc_no_space 
13ec			 
13ec dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
13ef dd 72 01		      ld    (IX+1), D 
13f2			 
13f2			      ; Does this block have enough space to make the allocation? 
13f2 23			      inc   HL                      ; Load free block size into DE 
13f3 5e			      ld    E, (HL) 
13f4 23			      inc   HL 
13f5 56			      ld    D, (HL) 
13f6			 
13f6 eb			      ex    DE, HL                  ; Check size of block against want 
13f7 b7			      or    A                       ; Ensure carry flag clear 
13f8 ed 42		      sbc   HL, BC 
13fa e5			      push  HL                      ; Store the result for later (new block size) 
13fb			 
13fb ca 4a 14		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
13fe 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1400			 
1400			      ; this_free block is not big enough, setup ptrs to test next free block 
1400 e1			      pop   HL                      ; Discard previous result 
1401			 
1401 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1404 dd 66 03		      ld    H, (IX+3) 
1407 dd 75 04		      ld    (IX+4), L 
140a dd 74 05		      ld    (IX+5), H 
140d			 
140d dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1410 dd 66 01		      ld    H, (IX+1) 
1413 dd 75 02		      ld    (IX+2), L 
1416 dd 74 03		      ld    (IX+3), H 
1419			 
1419					if DEBUG_FORTH_MALLOC 
1419						DMARK "MA>" 
1419						CALLMONITOR 
1419					endif 
1419 18 c9		      jr    malloc_find_space 
141b			 
141b			      ; split a bigger block into two - requested size and remaining size 
141b			malloc_alloc_split: 
141b					if DEBUG_FORTH_MALLOC 
141b						DMARK "MAs" 
141b						CALLMONITOR 
141b					endif 
141b eb			      ex    DE, HL                  ; Calculate address of new free block 
141c 2b			      dec   HL 
141d 2b			      dec   HL 
141e 2b			      dec   HL 
141f 09			      add   HL, BC 
1420			 
1420			      ; Create a new block and point it at next_free 
1420 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
1423 dd 56 01		      ld    D, (IX+1) 
1426			 
1426 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1427 23			      inc   HL 
1428 72			      ld    (HL), D 
1429			 
1429 d1			      pop   DE                      ; Store size of new block into new block 
142a 23			      inc   HL 
142b 73			      ld    (HL), E 
142c 23			      inc   HL 
142d 72			      ld    (HL), D 
142e			 
142e			      ; Update this_free ptr to point to new block 
142e 2b			      dec   HL 
142f 2b			      dec   HL 
1430 2b			      dec   HL 
1431			 
1431 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1434 dd 56 03		      ld    D, (IX+3) 
1437			 
1437 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
143a dd 74 03		      ld    (IX+3), H 
143d			 
143d			      ; Modify this_free block to be allocation 
143d eb			      ex    DE, HL 
143e af			      xor   A                       ; Null the next block ptr of allocated block 
143f 77			      ld    (HL), A 
1440 23			      inc   HL 
1441 77			      ld    (HL), A 
1442			 
1442 23			      inc   HL                      ; Store want size into allocated block 
1443 71			      ld    (HL), C 
1444 23			      inc   HL 
1445 70			      ld    (HL), B 
1446 23			      inc   HL 
1447 e5			      push  HL                      ; Address of allocation to return 
1448			 
1448 18 19		      jr    malloc_update_links 
144a			 
144a			malloc_alloc_fit: 
144a e1			      pop   HL                      ; Dont need new block size, want is exact fit 
144b			 
144b					if DEBUG_FORTH_MALLOC 
144b						DMARK "MAf" 
144b						CALLMONITOR 
144b					endif 
144b			      ; Modify this_free block to be allocation 
144b eb			      ex    DE, HL 
144c 2b			      dec   HL 
144d 2b			      dec   HL 
144e 2b			      dec   HL 
144f			 
144f af			      xor   A                       ; Null the next block ptr of allocated block 
1450 77			      ld    (HL), A 
1451 23			      inc   HL 
1452 77			      ld    (HL), A 
1453			 
1453 23			      inc   HL                      ; Store address of allocation to return 
1454 23			      inc   HL 
1455 23			      inc   HL 
1456 e5			      push  HL 
1457			 
1457			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1457 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
145a dd 66 01		      ld    H, (IX+1) 
145d			 
145d dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1460 dd 74 03		      ld    (IX+3), H 
1463			 
1463			 
1463			malloc_update_links: 
1463			      ; Update prev_free ptr to point to this_free 
1463 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1466 dd 66 05		      ld    H, (IX+5) 
1469			 
1469 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
146c dd 56 03		      ld    D, (IX+3) 
146f			 
146f 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1470 23			      inc   HL 
1471 72			      ld    (HL), D 
1472			 
1472					if DEBUG_FORTH_MALLOC 
1472						DMARK "Mul" 
1472						CALLMONITOR 
1472					endif 
1472			      ; Clear the Z flag to indicate successful allocation 
1472 7a			      ld    A, D 
1473 b3			      or    E 
1474			 
1474 d1			      pop   DE                      ; Address of allocation 
1475					if DEBUG_FORTH_MALLOC 
1475						DMARK "MAu" 
1475						CALLMONITOR 
1475					endif 
1475			 
1475			malloc_no_space: 
1475 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1478 39			      add   HL, SP 
1479 f9			      ld    SP, HL 
147a			 
147a eb			      ex    DE, HL                  ; Alloc addr into HL for return 
147b					if DEBUG_FORTH_MALLOC 
147b						DMARK "MAN" 
147b						CALLMONITOR 
147b					endif 
147b			 
147b			malloc_early_exit: 
147b					if DEBUG_FORTH_MALLOC 
147b						DMARK "MAx" 
147b						CALLMONITOR 
147b					endif 
147b dd e1		      pop   IX 
147d d1			      pop   DE 
147e c1			      pop   BC 
147f			 
147f			if DEBUG_FORTH_MALLOC_HIGH 
147f			call malloc_guard_exit 
147f			call malloc_guard_zerolen 
147f			endif 
147f c9			      ret 
1480			 
1480			 
1480			;------------------------------------------------------------------------------ 
1480			;     free                                                                    : 
1480			;                                                                             : 
1480			; Description                                                                 : 
1480			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1480			;     returned by malloc, otherwise the behaviour is undefined.               : 
1480			;                                                                             : 
1480			;     Where possible, directly adjacent free blocks will be merged together   : 
1480			;     into larger blocks to help ensure that the heap does not become         : 
1480			;     excessively fragmented.                                                 : 
1480			;                                                                             : 
1480			;     free does not clear or set any other value into the freed space, and    : 
1480			;     therefore its contents may be visible through subsequent malloc's. The  : 
1480			;     caller should clear the freed space as required.                        : 
1480			;                                                                             : 
1480			;     This implementation of free uses the stack exclusively, and is          : 
1480			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1480			;     advisable to disable interrupts before calling free, and recommended    : 
1480			;     to avoid the use of free inside ISRs in general.                        : 
1480			;                                                                             : 
1480			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1480			;                                                                             : 
1480			; Parameters                                                                  : 
1480			;     HL  Pointer to address of first byte of allocation to be freed          : 
1480			;                                                                             : 
1480			; Returns                                                                     : 
1480			;     Nothing                                                                 : 
1480			;                                                                             : 
1480			; Stack frame                                                                 : 
1480			;       |             |                                                       : 
1480			;       +-------------+                                                       : 
1480			;       |     BC      |                                                       : 
1480			;       +-------------+                                                       : 
1480			;       |     DE      |                                                       : 
1480			;       +-------------+                                                       : 
1480			;       |     IX      |                                                       : 
1480			;       +-------------+                                                       : 
1480			;       |  prev_free  |                                                       : 
1480			;   +2  +-------------+                                                       : 
1480			;       |  next_free  |                                                       : 
1480			;   +0  +-------------+                                                       : 
1480			;       |             |                                                       : 
1480			;                                                                             : 
1480			;------------------------------------------------------------------------------ 
1480			free: 
1480 c5			      push  BC 
1481 d5			      push  DE 
1482 dd e5		      push  IX 
1484			 
1484 7c			      ld    A, H                    ; Exit if ptr is null 
1485 b5			      or    L 
1486 ca 4a 15		      jp    Z, free_early_exit 
1489			 
1489			      ; Set up stack frame 
1489 eb			      ex    DE, HL 
148a 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
148d 39			      add   HL, SP 
148e f9			      ld    SP, HL 
148f dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1493 dd 39		      add   IX, SP 
1495			 
1495			      ; The address in HL points to the start of the useable allocated space, 
1495			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1495			      ; address of the block itself. 
1495 eb			      ex    DE, HL 
1496 11 fc ff		      ld    DE, -4 
1499 19			      add   HL, DE 
149a			 
149a			      ; An allocated block must have a null next block pointer in it 
149a 7e			      ld    A, (HL) 
149b 23			      inc   HL 
149c b6			      or    (HL) 
149d c2 45 15		      jp    NZ, free_done 
14a0			 
14a0 2b			      dec   HL 
14a1			 
14a1 44			      ld    B, H                    ; Copy HL to BC 
14a2 4d			      ld    C, L 
14a3			 
14a3			      ; Loop through the free list to find the first block with an address 
14a3			      ; higher than the block being freed 
14a3 21 0a 80		      ld    HL, free_list 
14a6			 
14a6			free_find_higher_block: 
14a6 5e			      ld    E, (HL)                 ; Load next ptr from free block 
14a7 23			      inc   HL 
14a8 56			      ld    D, (HL) 
14a9 2b			      dec   HL 
14aa			 
14aa dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
14ad dd 72 01		      ld    (IX+1), D 
14b0 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
14b3 dd 74 03		      ld    (IX+3), H 
14b6			 
14b6 78			      ld    A, B                    ; Check if DE is greater than BC 
14b7 ba			      cp    D                       ; Compare MSB first 
14b8 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
14ba 30 04		      jr    NC, free_find_higher_block_skip 
14bc 79			      ld    A, C 
14bd bb			      cp    E                       ; Then compare LSB 
14be 38 08		      jr    C, free_found_higher_block 
14c0			 
14c0			free_find_higher_block_skip: 
14c0 7a			      ld    A, D                    ; Reached the end of the free list? 
14c1 b3			      or    E 
14c2 ca 45 15		      jp    Z, free_done 
14c5			 
14c5 eb			      ex    DE, HL 
14c6			 
14c6 18 de		      jr    free_find_higher_block 
14c8			 
14c8			free_found_higher_block: 
14c8			      ; Insert freed block between prev and next free blocks 
14c8 71			      ld    (HL), C                 ; Point prev free block to freed block 
14c9 23			      inc   HL 
14ca 70			      ld    (HL), B 
14cb			 
14cb 60			      ld    H, B                    ; Point freed block at next free block 
14cc 69			      ld    L, C 
14cd 73			      ld    (HL), E 
14ce 23			      inc   HL 
14cf 72			      ld    (HL), D 
14d0			 
14d0			      ; Check if the freed block is adjacent to the next free block 
14d0 23			      inc   HL                      ; Load size of freed block into HL 
14d1 5e			      ld    E, (HL) 
14d2 23			      inc   HL 
14d3 56			      ld    D, (HL) 
14d4 eb			      ex    DE, HL 
14d5			 
14d5 09			      add   HL, BC                  ; Add addr of freed block and its size 
14d6			 
14d6 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
14d9 dd 56 01		      ld    D, (IX+1) 
14dc			 
14dc b7			      or    A                       ; Clear the carry flag 
14dd ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
14df 20 22		      jr    NZ, free_check_adjacent_to_prev 
14e1			 
14e1			      ; Freed block is adjacent to next, merge into one bigger block 
14e1 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
14e2 5e			      ld    E, (HL) 
14e3 23			      inc   HL 
14e4 56			      ld    D, (HL) 
14e5 e5			      push  HL                      ; Save ptr to next block for later 
14e6			 
14e6 60			      ld    H, B                    ; Store ptr from next block into freed block 
14e7 69			      ld    L, C 
14e8 73			      ld    (HL), E 
14e9 23			      inc   HL 
14ea 72			      ld    (HL), D 
14eb			 
14eb e1			      pop   HL                      ; Restore ptr to next block 
14ec 23			      inc   HL                      ; Load size of next block into DE 
14ed 5e			      ld    E, (HL) 
14ee 23			      inc   HL 
14ef 56			      ld    D, (HL) 
14f0 d5			      push  DE                      ; Save next block size for later 
14f1			 
14f1 60			      ld    H, B                    ; Load size of freed block into HL 
14f2 69			      ld    L, C 
14f3 23			      inc   HL 
14f4 23			      inc   HL 
14f5 5e			      ld    E, (HL) 
14f6 23			      inc   HL 
14f7 56			      ld    D, (HL) 
14f8 eb			      ex    DE, HL 
14f9			 
14f9 d1			      pop   DE                      ; Restore size of next block 
14fa 19			      add   HL, DE                  ; Add sizes of both blocks 
14fb eb			      ex    DE, HL 
14fc			 
14fc 60			      ld    H, B                    ; Store new bigger size into freed block 
14fd 69			      ld    L, C 
14fe 23			      inc   HL 
14ff 23			      inc   HL 
1500 73			      ld    (HL), E 
1501 23			      inc   HL 
1502 72			      ld    (HL), D 
1503			 
1503			free_check_adjacent_to_prev: 
1503			      ; Check if the freed block is adjacent to the prev free block 
1503 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1506 dd 66 03		      ld    H, (IX+3) 
1509			 
1509 23			      inc   HL                      ; Size of prev free block into DE 
150a 23			      inc   HL 
150b 5e			      ld    E, (HL) 
150c 23			      inc   HL 
150d 56			      ld    D, (HL) 
150e 2b			      dec   HL 
150f 2b			      dec   HL 
1510 2b			      dec   HL 
1511			 
1511 19			      add   HL, DE                  ; Add prev block addr and size 
1512			 
1512 b7			      or    A                       ; Clear the carry flag 
1513 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1515 20 2e		      jr    NZ, free_done 
1517			 
1517			      ; Freed block is adjacent to prev, merge into one bigger block 
1517 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1518 69			      ld    L, C 
1519 5e			      ld    E, (HL) 
151a 23			      inc   HL 
151b 56			      ld    D, (HL) 
151c e5			      push  HL                      ; Save freed block ptr for later 
151d			 
151d dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1520 dd 66 03		      ld    H, (IX+3) 
1523 73			      ld    (HL), E 
1524 23			      inc   HL 
1525 72			      ld    (HL), D 
1526			 
1526 e1			      pop   HL                      ; Restore freed block ptr 
1527 23			      inc   HL                      ; Load size of freed block into DE 
1528 5e			      ld    E, (HL) 
1529 23			      inc   HL 
152a 56			      ld    D, (HL) 
152b d5			      push  DE                      ; Save freed block size for later 
152c			 
152c dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
152f dd 66 03		      ld    H, (IX+3) 
1532 23			      inc   HL 
1533 23			      inc   HL 
1534 5e			      ld    E, (HL) 
1535 23			      inc   HL 
1536 56			      ld    D, (HL) 
1537			 
1537 e1			      pop   HL                      ; Add sizes of both blocks 
1538 19			      add   HL, DE 
1539 eb			      ex    DE, HL 
153a			 
153a dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
153d dd 66 03		      ld    H, (IX+3) 
1540 23			      inc   HL 
1541 23			      inc   HL 
1542 73			      ld    (HL), E 
1543 23			      inc   HL 
1544 72			      ld    (HL), D 
1545			 
1545			free_done: 
1545 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1548 39			      add   HL, SP 
1549 f9			      ld    SP, HL 
154a			 
154a			free_early_exit: 
154a dd e1		      pop   IX 
154c d1			      pop   DE 
154d c1			      pop   BC 
154e			 
154e c9			      ret 
154f			 
154f			; moved to firmware.asm 
154f			; 
154f			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
154f			;                  .dw   0 
154f			 
154f			 
154f			endif 
154f			 
154f			 
154f			if MALLOC_3 
154f			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
154f			;heap_start        .equ  0x9000      ; Starting address of heap 
154f			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
154f			; 
154f			 ;     .org 0 
154f			  ;    jp    main 
154f			; 
154f			; 
154f			 ;     .org  0x100 
154f			;main: 
154f			 ;     ld    HL, 0x8100 
154f			  ;    ld    SP, HL 
154f			; 
154f			;      call  heap_init 
154f			 
154f			      ; Make some allocations 
154f			;      ld    HL, 12 
154f			;      call  malloc            ; Allocates 0x9004 
154f			; 
154f			 ;     ld    HL, 12 
154f			;      call  malloc            ; Allocates 0x9014 
154f			 
154f			;      ld    HL, 12 
154f			;      call  malloc            ; Allocates 0x9024 
154f			 
154f			      ; Free some allocations 
154f			;      ld    HL, 0x9014 
154f			;      call  free 
154f			 
154f			;      ld    HL, 0x9004 
154f			;      call  free 
154f			; 
154f			;      ld    HL, 0x9024 
154f			;      call  free 
154f			 
154f			 
154f			 ;     halt 
154f			 
154f			 
154f			;------------------------------------------------------------------------------ 
154f			;     heap_init                                                               : 
154f			;                                                                             : 
154f			; Description                                                                 : 
154f			;     Initialise the heap and make it ready for malloc and free operations.   : 
154f			;                                                                             : 
154f			;     The heap is maintained as a linked list, starting with an initial       : 
154f			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
154f			;     the first free block in the heap. Each block then points to the next    : 
154f			;     free block within the heap, and the free list ends at the first block   : 
154f			;     with a null pointer to the next free block.                             : 
154f			;                                                                             : 
154f			; Parameters                                                                  : 
154f			;     Inputs are compile-time only. Two defines which specify the starting    : 
154f			;     address of the heap and its size are required, along with a memory      : 
154f			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
154f			;     principally stores a pointer to the first free block in the heap.       : 
154f			;                                                                             : 
154f			; Returns                                                                     : 
154f			;     Nothing                                                                 : 
154f			;------------------------------------------------------------------------------ 
154f			heap_init: 
154f			      push  HL 
154f			 
154f			      ; Initialise free list struct 
154f			      ld    HL, heap_start 
154f			      ld    (free_list), HL 
154f			      ld    HL, 0 
154f			      ld    (free_list+2), HL 
154f			 
154f			      ; Insert first free block at bottom of heap, consumes entire heap 
154f			      ld    HL, heap_start+heap_size-4 
154f			      ld    (heap_start), HL        ; Next block (end of free list) 
154f			      ld    HL, heap_size-4 
154f			      ld    (heap_start+2), HL      ; Block size 
154f			 
154f			      ; Insert end of free list block at top of heap - two null words will 
154f			      ; terminate the free list 
154f			      ld    HL, 0 
154f			      ld    (heap_start+heap_size-2), HL 
154f			      ld    (heap_start+heap_size-4), HL 
154f			 
154f			      pop   HL 
154f			 
154f			      ret 
154f			 
154f			 
154f			;------------------------------------------------------------------------------ 
154f			;     malloc                                                                  : 
154f			;                                                                             : 
154f			; Description                                                                 : 
154f			;     Allocates the wanted space from the heap and returns the address of the : 
154f			;     first useable byte of the allocation.                                   : 
154f			;                                                                             : 
154f			;     Allocations can happen in one of two ways:                              : 
154f			;                                                                             : 
154f			;     1. A free block may be found which is the exact size wanted. In this    : 
154f			;        case the block is removed from the free list and retuedn to the      : 
154f			;        caller.                                                              : 
154f			;     2. A free block may be found which is larger than the size wanted. In   : 
154f			;        this case, the larger block is split into two. The first portion of  : 
154f			;        this block will become the requested space by the malloc call and    : 
154f			;        is returned to the caller. The second portion becomes a new free     : 
154f			;        block, and the free list is adjusted to maintain continuity via this : 
154f			;        newly created block.                                                 : 
154f			;                                                                             : 
154f			;     malloc does not set any initial value in the allocated space, the       : 
154f			;     caller is required to do this as required.                              : 
154f			;                                                                             : 
154f			;     This implementation of malloc uses the stack exclusively, and is        : 
154f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
154f			;     advisable to disable interrupts before calling malloc, and recommended  : 
154f			;     to avoid the use of malloc inside ISRs in general.                      : 
154f			;                                                                             : 
154f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
154f			;                                                                             : 
154f			; Parameters                                                                  : 
154f			;     HL  Number of bytes wanted                                              : 
154f			;                                                                             : 
154f			; Returns                                                                     : 
154f			;     HL  Address of the first useable byte of the allocation                 : 
154f			;                                                                             : 
154f			; Flags                                                                       : 
154f			;     Z   Set if the allocation did not succeed, clear otherwise              : 
154f			;                                                                             : 
154f			; Stack frame                                                                 : 
154f			;       |             |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |     BC      |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |     DE      |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |     IX      |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |  prev_free  |                                                       : 
154f			;   +4  +-------------+                                                       : 
154f			;       |  this_free  |                                                       : 
154f			;   +2  +-------------+                                                       : 
154f			;       |  next_free  |                                                       : 
154f			;   +0  +-------------+                                                       : 
154f			;       |             |                                                       : 
154f			;                                                                             : 
154f			;------------------------------------------------------------------------------ 
154f			malloc: 
154f			      push  BC 
154f			      push  DE 
154f			      push  IX 
154f			 
154f			      ld    A, H                    ; Exit if no space requested 
154f			      or    L 
154f			      jp    Z, malloc_early_exit 
154f			 
154f			      ; Set up stack frame 
154f			      ex    DE, HL 
154f			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
154f			      add   HL, SP 
154f			      ld    SP, HL 
154f			      ld    IX, 0                   ; Use IX as a frame pointer 
154f			      add   IX, SP 
154f			 
154f			      ; Setup initial state 
154f			      ld    HL, 4                   ; want must also include space used by block struct 
154f			      add   HL, DE 
154f			 
154f			      ld    B, H                    ; Move want to BC 
154f			      ld    C, L 
154f			 
154f			      ld    HL, free_list           ; Store prev_free ptr to stack 
154f			      ld    (IX+4), L 
154f			      ld    (IX+5), H 
154f			 
154f			      ld    E, (HL)                 ; Store this_free ptr to stack 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      ld    (IX+2), E 
154f			      ld    (IX+3), D 
154f			      ex    DE, HL                  ; this_free ptr into HL 
154f			 
154f			      ; Loop through free block list to find some space 
154f			malloc_find_space: 
154f			      ld    E, (HL)                 ; Load next_free ptr into DE 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			 
154f			      ld    A, D                    ; Check for null next_free ptr - end of free list 
154f			      or    E 
154f			      jp    Z, malloc_no_space 
154f			 
154f			      ld    (IX+0), E               ; Store next_free ptr to stack 
154f			      ld    (IX+1), D 
154f			 
154f			      ; Does this block have enough space to make the allocation? 
154f			      inc   HL                      ; Load free block size into DE 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			 
154f			      ex    DE, HL                  ; Check size of block against want 
154f			      or    A                       ; Ensure carry flag clear 
154f			      sbc   HL, BC 
154f			      push  HL                      ; Store the result for later (new block size) 
154f			 
154f			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
154f			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
154f			 
154f			      ; this_free block is not big enough, setup ptrs to test next free block 
154f			      pop   HL                      ; Discard previous result 
154f			 
154f			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
154f			      ld    H, (IX+3) 
154f			      ld    (IX+4), L 
154f			      ld    (IX+5), H 
154f			 
154f			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
154f			      ld    H, (IX+1) 
154f			      ld    (IX+2), L 
154f			      ld    (IX+3), H 
154f			 
154f			      jr    malloc_find_space 
154f			 
154f			      ; split a bigger block into two - requested size and remaining size 
154f			malloc_alloc_split: 
154f			      ex    DE, HL                  ; Calculate address of new free block 
154f			      dec   HL 
154f			      dec   HL 
154f			      dec   HL 
154f			      add   HL, BC 
154f			 
154f			      ; Create a new block and point it at next_free 
154f			      ld    E, (IX+0)               ; Load next_free ptr into DE 
154f			      ld    D, (IX+1) 
154f			 
154f			      ld    (HL), E                 ; Store next_free ptr into new block 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			      pop   DE                      ; Store size of new block into new block 
154f			      inc   HL 
154f			      ld    (HL), E 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			      ; Update this_free ptr to point to new block 
154f			      dec   HL 
154f			      dec   HL 
154f			      dec   HL 
154f			 
154f			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
154f			      ld    D, (IX+3) 
154f			 
154f			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
154f			      ld    (IX+3), H 
154f			 
154f			      ; Modify this_free block to be allocation 
154f			      ex    DE, HL 
154f			      xor   A                       ; Null the next block ptr of allocated block 
154f			      ld    (HL), A 
154f			      inc   HL 
154f			      ld    (HL), A 
154f			 
154f			      inc   HL                      ; Store want size into allocated block 
154f			      ld    (HL), C 
154f			      inc   HL 
154f			      ld    (HL), B 
154f			      inc   HL 
154f			      push  HL                      ; Address of allocation to return 
154f			 
154f			      jr    malloc_update_links 
154f			 
154f			malloc_alloc_fit: 
154f			      pop   HL                      ; Dont need new block size, want is exact fit 
154f			 
154f			      ; Modify this_free block to be allocation 
154f			      ex    DE, HL 
154f			      dec   HL 
154f			      dec   HL 
154f			      dec   HL 
154f			 
154f			      xor   A                       ; Null the next block ptr of allocated block 
154f			      ld    (HL), A 
154f			      inc   HL 
154f			      ld    (HL), A 
154f			 
154f			      inc   HL                      ; Store address of allocation to return 
154f			      inc   HL 
154f			      inc   HL 
154f			      push  HL 
154f			 
154f			      ; Copy next_free ptr to this_free, remove allocated block from free list 
154f			      ld    L, (IX+0)               ; next_free to HL 
154f			      ld    H, (IX+1) 
154f			 
154f			      ld    (IX+2), L               ; HL to this_free 
154f			      ld    (IX+3), H 
154f			 
154f			 
154f			malloc_update_links: 
154f			      ; Update prev_free ptr to point to this_free 
154f			      ld    L, (IX+4)               ; prev_free ptr to HL 
154f			      ld    H, (IX+5) 
154f			 
154f			      ld    E, (IX+2)               ; this_free ptr to DE 
154f			      ld    D, (IX+3) 
154f			 
154f			      ld    (HL), E                 ; this_free ptr into prev_free 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			      ; Clear the Z flag to indicate successful allocation 
154f			      ld    A, D 
154f			      or    E 
154f			 
154f			      pop   DE                      ; Address of allocation 
154f			 
154f			malloc_no_space: 
154f			      ld    HL, 6                   ; Clean up stack frame 
154f			      add   HL, SP 
154f			      ld    SP, HL 
154f			 
154f			      ex    DE, HL                  ; Alloc addr into HL for return 
154f			 
154f			malloc_early_exit: 
154f			      pop   IX 
154f			      pop   DE 
154f			      pop   BC 
154f			 
154f			      ret 
154f			 
154f			 
154f			;------------------------------------------------------------------------------ 
154f			;     free                                                                    : 
154f			;                                                                             : 
154f			; Description                                                                 : 
154f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
154f			;     returned by malloc, otherwise the behaviour is undefined.               : 
154f			;                                                                             : 
154f			;     Where possible, directly adjacent free blocks will be merged together   : 
154f			;     into larger blocks to help ensure that the heap does not become         : 
154f			;     excessively fragmented.                                                 : 
154f			;                                                                             : 
154f			;     free does not clear or set any other value into the freed space, and    : 
154f			;     therefore its contents may be visible through subsequent malloc's. The  : 
154f			;     caller should clear the freed space as required.                        : 
154f			;                                                                             : 
154f			;     This implementation of free uses the stack exclusively, and is          : 
154f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
154f			;     advisable to disable interrupts before calling free, and recommended    : 
154f			;     to avoid the use of free inside ISRs in general.                        : 
154f			;                                                                             : 
154f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
154f			;                                                                             : 
154f			; Parameters                                                                  : 
154f			;     HL  Pointer to address of first byte of allocation to be freed          : 
154f			;                                                                             : 
154f			; Returns                                                                     : 
154f			;     Nothing                                                                 : 
154f			;                                                                             : 
154f			; Stack frame                                                                 : 
154f			;       |             |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |     BC      |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |     DE      |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |     IX      |                                                       : 
154f			;       +-------------+                                                       : 
154f			;       |  prev_free  |                                                       : 
154f			;   +2  +-------------+                                                       : 
154f			;       |  next_free  |                                                       : 
154f			;   +0  +-------------+                                                       : 
154f			;       |             |                                                       : 
154f			;                                                                             : 
154f			;------------------------------------------------------------------------------ 
154f			free: 
154f			      push  BC 
154f			      push  DE 
154f			      push  IX 
154f			 
154f			      ld    A, H                    ; Exit if ptr is null 
154f			      or    L 
154f			      jp    Z, free_early_exit 
154f			 
154f			      ; Set up stack frame 
154f			      ex    DE, HL 
154f			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
154f			      add   HL, SP 
154f			      ld    SP, HL 
154f			      ld    IX, 0                   ; Use IX as a frame pointer 
154f			      add   IX, SP 
154f			 
154f			      ; The address in HL points to the start of the useable allocated space, 
154f			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
154f			      ; address of the block itself. 
154f			      ex    DE, HL 
154f			      ld    DE, -4 
154f			      add   HL, DE 
154f			 
154f			      ; An allocated block must have a null next block pointer in it 
154f			      ld    A, (HL) 
154f			      inc   HL 
154f			      or    (HL) 
154f			      jp    NZ, free_done 
154f			 
154f			      dec   HL 
154f			 
154f			      ld    B, H                    ; Copy HL to BC 
154f			      ld    C, L 
154f			 
154f			      ; Loop through the free list to find the first block with an address 
154f			      ; higher than the block being freed 
154f			      ld    HL, free_list 
154f			 
154f			free_find_higher_block: 
154f			      ld    E, (HL)                 ; Load next ptr from free block 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      dec   HL 
154f			 
154f			      ld    (IX+0), E               ; Save ptr to next free block 
154f			      ld    (IX+1), D 
154f			      ld    (IX+2), L               ; Save ptr to prev free block 
154f			      ld    (IX+3), H 
154f			 
154f			      ld    A, B                    ; Check if DE is greater than BC 
154f			      cp    D                       ; Compare MSB first 
154f			      jr    Z, $+4                  ; MSB the same, compare LSB 
154f			      jr    NC, free_find_higher_block_skip 
154f			      ld    A, C 
154f			      cp    E                       ; Then compare LSB 
154f			      jr    C, free_found_higher_block 
154f			 
154f			free_find_higher_block_skip: 
154f			      ld    A, D                    ; Reached the end of the free list? 
154f			      or    E 
154f			      jp    Z, free_done 
154f			 
154f			      ex    DE, HL 
154f			 
154f			      jr    free_find_higher_block 
154f			 
154f			free_found_higher_block: 
154f			      ; Insert freed block between prev and next free blocks 
154f			      ld    (HL), C                 ; Point prev free block to freed block 
154f			      inc   HL 
154f			      ld    (HL), B 
154f			 
154f			      ld    H, B                    ; Point freed block at next free block 
154f			      ld    L, C 
154f			      ld    (HL), E 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			      ; Check if the freed block is adjacent to the next free block 
154f			      inc   HL                      ; Load size of freed block into HL 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      ex    DE, HL 
154f			 
154f			      add   HL, BC                  ; Add addr of freed block and its size 
154f			 
154f			      ld    E, (IX+0)               ; Load addr of next free block into DE 
154f			      ld    D, (IX+1) 
154f			 
154f			      or    A                       ; Clear the carry flag 
154f			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
154f			      jr    NZ, free_check_adjacent_to_prev 
154f			 
154f			      ; Freed block is adjacent to next, merge into one bigger block 
154f			      ex    DE, HL                  ; Load next ptr from next block into DE 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      push  HL                      ; Save ptr to next block for later 
154f			 
154f			      ld    H, B                    ; Store ptr from next block into freed block 
154f			      ld    L, C 
154f			      ld    (HL), E 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			      pop   HL                      ; Restore ptr to next block 
154f			      inc   HL                      ; Load size of next block into DE 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      push  DE                      ; Save next block size for later 
154f			 
154f			      ld    H, B                    ; Load size of freed block into HL 
154f			      ld    L, C 
154f			      inc   HL 
154f			      inc   HL 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      ex    DE, HL 
154f			 
154f			      pop   DE                      ; Restore size of next block 
154f			      add   HL, DE                  ; Add sizes of both blocks 
154f			      ex    DE, HL 
154f			 
154f			      ld    H, B                    ; Store new bigger size into freed block 
154f			      ld    L, C 
154f			      inc   HL 
154f			      inc   HL 
154f			      ld    (HL), E 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			free_check_adjacent_to_prev: 
154f			      ; Check if the freed block is adjacent to the prev free block 
154f			      ld    L, (IX+2)               ; Prev free block ptr into HL 
154f			      ld    H, (IX+3) 
154f			 
154f			      inc   HL                      ; Size of prev free block into DE 
154f			      inc   HL 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      dec   HL 
154f			      dec   HL 
154f			      dec   HL 
154f			 
154f			      add   HL, DE                  ; Add prev block addr and size 
154f			 
154f			      or    A                       ; Clear the carry flag 
154f			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
154f			      jr    NZ, free_done 
154f			 
154f			      ; Freed block is adjacent to prev, merge into one bigger block 
154f			      ld    H, B                    ; Load next ptr from freed block into DE 
154f			      ld    L, C 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      push  HL                      ; Save freed block ptr for later 
154f			 
154f			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
154f			      ld    H, (IX+3) 
154f			      ld    (HL), E 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			      pop   HL                      ; Restore freed block ptr 
154f			      inc   HL                      ; Load size of freed block into DE 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			      push  DE                      ; Save freed block size for later 
154f			 
154f			      ld    L, (IX+2)               ; Load size of prev block into DE 
154f			      ld    H, (IX+3) 
154f			      inc   HL 
154f			      inc   HL 
154f			      ld    E, (HL) 
154f			      inc   HL 
154f			      ld    D, (HL) 
154f			 
154f			      pop   HL                      ; Add sizes of both blocks 
154f			      add   HL, DE 
154f			      ex    DE, HL 
154f			 
154f			      ld    L, (IX+2)               ; Store new bigger size into prev block 
154f			      ld    H, (IX+3) 
154f			      inc   HL 
154f			      inc   HL 
154f			      ld    (HL), E 
154f			      inc   HL 
154f			      ld    (HL), D 
154f			 
154f			free_done: 
154f			      ld    HL, 4                   ; Clean up stack frame 
154f			      add   HL, SP 
154f			      ld    SP, HL 
154f			 
154f			free_early_exit: 
154f			      pop   IX 
154f			      pop   DE 
154f			      pop   BC 
154f			 
154f			      ret 
154f			 
154f			 
154f			;      .org 0x8000 
154f			; 
154f			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
154f			 ;                 .dw   0 
154f			 
154f			endif 
154f			 
154f			 
154f			if MALLOC_4 
154f			 
154f			; My memory allocation code. Very very simple.... 
154f			; allocate space under 250 chars 
154f			 
154f			heap_init: 
154f				; init start of heap as zero 
154f				;  
154f			 
154f				ld hl, heap_start 
154f				ld a, 0 
154f				ld (hl), a      ; empty block 
154f				inc hl 
154f				ld a, 0 
154f				ld (hl), a      ; length of block 
154f				; write end of list 
154f				inc hl 
154f				ld a,(hl) 
154f				inc hl 
154f				ld a,(hl) 
154f				 
154f			 
154f				; init some malloc vars 
154f			 
154f				ld hl, 0 
154f				ld (free_list), hl       ; store last malloc location 
154f			 
154f				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
154f				ld a, 0 
154f				ld (hl), a 
154f			 
154f			 
154f				ld hl, heap_start 
154f				;  
154f				  
154f				ret 
154f			 
154f			 
154f			;    free block marker 
154f			;    requested size  
154f			;    pointer to next block 
154f			;    .... 
154f			;    next block marker 
154f			 
154f			 
154f			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
154f			; 
154f			 
154f			 
154f			malloc:  
154f				push de 
154f				push bc 
154f				push af 
154f			 
154f				; hl space required 
154f				 
154f				ld c, l    ; hold space   (TODO only a max of 255) 
154f			 
154f			;	inc c     ; TODO BUG need to fix memory leak on push str 
154f			;	inc c 
154f			;	inc c 
154f			;	inc c 
154f			;	inc c 
154f			;	inc c 
154f			;	inc c 
154f			 
154f			 
154f			 
154f				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
154f			 
154f				ld a, (free_list+3) 
154f				cp 0 
154f				jr z, .contheap 
154f			 
154f				ld hl, (free_list)     ; get last alloc 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "mrs" 
154f						CALLMONITOR 
154f					endif 
154f				jr .startalloc 
154f			 
154f			.contheap: 
154f				ld hl, heap_start 
154f			 
154f			.startalloc: 
154f			 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "mym" 
154f						CALLMONITOR 
154f					endif 
154f			.findblock: 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "mmf" 
154f						CALLMONITOR 
154f					endif 
154f			 
154f				ld a,(hl)  
154f				; if byte is zero then clear to use 
154f			 
154f				cp 0 
154f				jr z, .foundemptyblock 
154f			 
154f				; if byte is not clear 
154f				;     then byte is offset to next block 
154f			 
154f				inc hl 
154f				ld a, (hl) ; get size 
154f			.nextblock:	inc hl 
154f					ld e, (hl) 
154f					inc hl 
154f					ld d, (hl) 
154f					ex de, hl 
154f			;	inc hl  ; move past the store space 
154f			;	inc hl  ; move past zero index  
154f			 
154f				; TODO detect no more space 
154f			 
154f				push hl 
154f				ld de, heap_end 
154f				call cmp16 
154f				pop hl 
154f				jr nc, .nospace 
154f			 
154f				jr .findblock 
154f			 
154f			.nospace: ld hl, 0 
154f				jp .exit 
154f			 
154f			 
154f			.foundemptyblock:	 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "mme" 
154f						CALLMONITOR 
154f					endif 
154f			 
154f			; TODO has block enough space if reusing??? 
154f			 
154f				;  
154f			 
154f			; see if this block has been previously used 
154f				inc hl 
154f				ld a, (hl) 
154f				dec hl 
154f				cp 0 
154f				jr z, .newblock 
154f			 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "meR" 
154f						CALLMONITOR 
154f					endif 
154f			 
154f			; no reusing previously allocated block 
154f			 
154f			; is it smaller than previously used? 
154f				 
154f				inc hl    ; move to size 
154f				ld a, c 
154f				sub (hl)        ; we want c < (hl) 
154f				dec hl    ; move back to marker 
154f			        jr z, .findblock 
154f			 
154f				; update with the new size which should be lower 
154f			 
154f			        ;inc  hl   ; negate next move. move back to size  
154f			 
154f			.newblock: 
154f				; need to be at marker here 
154f			 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "meN" 
154f						CALLMONITOR 
154f					endif 
154f			 
154f			 
154f				ld a, c 
154f			 
154f				ld (free_list+3), a	 ; flag resume from last malloc  
154f				ld (free_list), hl    ; save out last location 
154f			 
154f			 
154f				;inc a     ; space for length byte 
154f				ld (hl), a     ; save block in use marker 
154f			 
154f				inc hl   ; move to space marker 
154f				ld (hl), a    ; save new space 
154f			 
154f				inc hl   ; move to start of allocated area 
154f				 
154f			;	push hl     ; save where we are - 1  
154f			 
154f			;	inc hl  ; move past zero index  
154f				; skip space to set down new marker 
154f			 
154f				; provide some extra space for now 
154f			 
154f				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
154f				inc a 
154f				inc a 
154f			 
154f				push hl   ; save where we are in the node block 
154f			 
154f				call addatohl 
154f			 
154f				; write linked list point 
154f			 
154f				pop de     ; get our node position 
154f				ex de, hl 
154f			 
154f				ld (hl), e 
154f				inc hl 
154f				ld (hl), d 
154f			 
154f				inc hl 
154f			 
154f				; now at start of allocated data so save pointer 
154f			 
154f				push hl 
154f			 
154f				; jump to position of next node and setup empty header in DE 
154f			 
154f				ex de, hl 
154f			 
154f			;	inc hl ; move past end of block 
154f			 
154f				ld a, 0 
154f				ld (hl), a   ; empty marker 
154f				inc hl 
154f				ld (hl), a   ; size 
154f				inc hl  
154f				ld (hl), a   ; ptr 
154f				inc hl 
154f				ld (hl), a   ; ptr 
154f			 
154f			 
154f				pop hl 
154f			 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "mmr" 
154f						CALLMONITOR 
154f					endif 
154f			 
154f			.exit: 
154f				pop af 
154f				pop bc 
154f				pop de  
154f				ret 
154f			 
154f			 
154f			 
154f			 
154f			free:  
154f				push hl 
154f				push af 
154f				; get address in hl 
154f			 
154f					if DEBUG_FORTH_MALLOC_INT 
154f						DMARK "fre" 
154f						CALLMONITOR 
154f					endif 
154f				; data is at hl - move to block count 
154f				dec hl 
154f				dec hl    ; get past pointer 
154f				dec hl 
154f			 
154f				ld a, (hl)    ; need this for a validation check 
154f			 
154f				dec hl    ; move to block marker 
154f			 
154f				; now check that the block count and block marker are the same  
154f			        ; this checks that we are on a malloc node and not random memory 
154f			        ; OK a faint chance this could be a problem but rare - famous last words! 
154f			 
154f				ld c, a 
154f				ld a, (hl)    
154f			 
154f				cp c 
154f				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
154f			 
154f				; yes good chance we are on a malloc node 
154f			 
154f				ld a, 0      
154f				ld (hl), a   ; mark as free 
154f			 
154f				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
154f			 
154f			.freeignore:  
154f			 
154f				pop af 
154f				pop hl 
154f			 
154f				ret 
154f			 
154f			 
154f			 
154f			endif 
154f			 
154f			; eof 
# End of file firmware_memory.asm
154f			  
154f			; device C  
154f			; Now handled by SPI  
154f			;if SOUND_ENABLE  
154f			;	include "firmware_sound.asm"  
154f			;endif  
154f			  
154f			include "firmware_diags.asm"  
154f			; Hardware diags menu 
154f			 
154f			 
154f			config: 
154f			 
154f 3e 00			ld a, 0 
1551 21 7a 15			ld hl, .configmn 
1554 cd d8 0d			call menu 
1557			 
1557 fe 00			cp 0 
1559 c8				ret z 
155a			 
155a			;	cp 1 
155a			;	call z, .savetostore 
155a			 
155a fe 01			cp 1 
155c			if STARTUP_V1 
155c				call z, .selautoload 
155c			endif 
155c			 
155c			if STARTUP_V2 
155c cc 88 15			call z, .enautoload 
155f			endif 
155f fe 02			cp 2 
1561 cc 9f 15			call z, .disautoload 
1564			;	cp 3 
1564			;	call z, .selbank 
1564 fe 03			cp 3 
1566 cc 08 18			call z, .debug_tog 
1569 fe 04			cp 4 
156b cc 56 19			call z, .bpsgo 
156e fe 05			cp 5 
1570 cc 31 18			call z, hardware_diags 
1573			if STARTUP_V2 
1573 fe 06			cp 6 
1575 cc cb 15			call z, create_startup 
1578			endif 
1578 18 d5			jr config 
157a			 
157a			.configmn: 
157a			;	dw prom_c3 
157a 44 1b			dw prom_c2 
157c 5a 1b			dw prom_c2a 
157e			;	dw prom_c2b 
157e			;	dw prom_c4 
157e d1 1b			dw prom_m4 
1580 ec 1b			dw prom_m4b 
1582 f4 1b			dw prom_c1 
1584			if STARTUP_V2 
1584 03 1c			dw prom_c9 
1586			endif 
1586 00 00			dw 0 
1588				 
1588			 
1588			if STARTUP_V2 
1588			.enautoload: 
1588				if STORAGE_SE 
1588 3e fe			ld a, $fe      ; bit 0 clear 
158a 32 9b f9			ld (spi_device), a 
158d			 
158d cd 22 05			call storage_get_block_0 
1590			 
1590 3e 01			ld a, 1 
1592 32 d6 f9			ld (store_page+STORE_0_AUTOFILE), a 
1595			 
1595 21 00 00				ld hl, 0 
1598 11 b5 f9				ld de, store_page 
159b cd d6 04			call storage_write_block	 ; save update 
159e				else 
159e			 
159e				ld hl, prom_notav 
159e				ld de, prom_empty 
159e				call info_panel 
159e				endif 
159e			 
159e			 
159e c9				ret 
159f			endif 
159f			 
159f			.disautoload: 
159f				if STORAGE_SE 
159f 3e fe			ld a, $fe      ; bit 0 clear 
15a1 32 9b f9			ld (spi_device), a 
15a4			 
15a4 cd 22 05			call storage_get_block_0 
15a7			 
15a7 3e 00			ld a, 0 
15a9 32 d6 f9			ld (store_page+STORE_0_AUTOFILE), a 
15ac			 
15ac 21 00 00				ld hl, 0 
15af 11 b5 f9				ld de, store_page 
15b2 cd d6 04			call storage_write_block	 ; save update 
15b5				else 
15b5			 
15b5				ld hl, prom_notav 
15b5				ld de, prom_empty 
15b5				call info_panel 
15b5				endif 
15b5			 
15b5			 
15b5 c9				ret 
15b6			 
15b6			if STARTUP_V1 
15b6			 
15b6			; Select auto start 
15b6			 
15b6			.selautoload: 
15b6			 
15b6				 
15b6				if STORAGE_SE 
15b6			 
15b6					call config_dir 
15b6				        ld hl, scratch 
15b6					ld a, 0 
15b6					call menu 
15b6			 
15b6					cp 0 
15b6					ret z 
15b6			 
15b6					dec a 
15b6			 
15b6			 
15b6					; locate menu option 
15b6			 
15b6					ld hl, scratch 
15b6					call table_lookup 
15b6			 
15b6					if DEBUG_FORTH_WORDS 
15b6						DMARK "ALl" 
15b6						CALLMONITOR 
15b6					endif 
15b6					; with the pointer to the menu it, the byte following the zero term is the file id 
15b6			 
15b6					ld a, 0 
15b6					ld bc, 50   ; max of bytes to look at 
15b6					cpir  
15b6			 
15b6					if DEBUG_FORTH_WORDS 
15b6						DMARK "ALb" 
15b6						CALLMONITOR 
15b6					endif 
15b6					;inc hl 
15b6			 
15b6					ld a, (hl)   ; file id 
15b6					 
15b6				        ; save bank and file ids 
15b6			 
15b6					push af 
15b6			 
15b6			; TODO need to save to block 0 on bank 1	 
15b6			 
15b6					call storage_get_block_0 
15b6			 
15b6					if DEBUG_FORTH_WORDS 
15b6						DMARK "AL0" 
15b6						CALLMONITOR 
15b6					endif 
15b6					pop af 
15b6			 
15b6					ld (store_page+STORE_0_FILERUN),a 
15b6					 
15b6					; save bank id 
15b6			 
15b6					ld a,(spi_device) 
15b6					ld (store_page+STORE_0_BANKRUN),a 
15b6			 
15b6					; enable auto run of store file 
15b6			 
15b6					ld a, 1 
15b6					ld (store_page+STORE_0_AUTOFILE),a 
15b6			 
15b6					; save buffer 
15b6			 
15b6					ld hl, 0 
15b6					ld de, store_page 
15b6					if DEBUG_FORTH_WORDS 
15b6						DMARK "ALw" 
15b6						CALLMONITOR 
15b6					endif 
15b6				call storage_write_block	 ; save update 
15b6			  
15b6			 
15b6			 
15b6			 
15b6					ld hl, scratch 
15b6					call config_fdir 
15b6			 
15b6				else 
15b6			 
15b6				ld hl, prom_notav 
15b6				ld de, prom_empty 
15b6				call info_panel 
15b6			 
15b6				endif 
15b6				ret 
15b6			endif 
15b6			 
15b6			 
15b6			; Select storage bank 
15b6			 
15b6			.selbank: 
15b6			 
15b6			;	if STORAGE_SE 
15b6			;	else 
15b6			 
15b6 21 18 1c			ld hl, prom_notav 
15b9 11 2e 1c			ld de, prom_empty 
15bc cd 38 0d			call info_panel 
15bf			;	endif 
15bf				 
15bf c9				ret 
15c0			 
15c0			if STORAGE_SE 
15c0			 
15c0			.config_ldir:   
15c0				; Load storage bank labels into menu array 
15c0			 
15c0				 
15c0			 
15c0			 
15c0 c9				ret 
15c1			 
15c1			 
15c1			endif 
15c1			 
15c1			 
15c1			; Save user words to storage 
15c1			 
15c1			.savetostore: 
15c1			 
15c1			;	if STORAGE_SE 
15c1			; 
15c1			;		call config_dir 
15c1			;	        ld hl, scratch 
15c1			;		ld a, 0 
15c1			;		call menu 
15c1			;		 
15c1			;		ld hl, scratch 
15c1			;		call config_fdir 
15c1			; 
15c1			;	else 
15c1			 
15c1 21 18 1c			ld hl, prom_notav 
15c4 11 2e 1c			ld de, prom_empty 
15c7 cd 38 0d			call info_panel 
15ca			 
15ca			;	endif 
15ca			 
15ca c9				ret 
15cb			 
15cb			if STARTUP_V2 
15cb			 
15cb			create_startup: 
15cb			 
15cb 3e 00			ld a, 0 
15cd 21 2d 17			ld hl, .crstart 
15d0 cd d8 0d			call menu 
15d3			 
15d3 fe 00			cp 0 
15d5 c8				ret z 
15d6			 
15d6 fe 01			cp 1 
15d8 cc 14 16			call z, .genlsword 
15db fe 02			cp 2 
15dd cc 1e 16			call z, .genedword 
15e0			 
15e0 fe 03			cp 3 
15e2 cc 28 16			call z, .gendemword 
15e5			 
15e5 fe 04			cp 4 
15e7 cc 32 16			call z, .genutlword 
15ea fe 05			cp 5 
15ec cc 3c 16			call z, .genspiword 
15ef fe 06			cp 6 
15f1 cc 46 16			call z, .genkeyword 
15f4 fe 07			cp 7 
15f6 cc 0a 16			call z, .gensoundword 
15f9 fe 07			cp 7 
15fb cc 00 16			call z, .genhwword 
15fe 18 cb			jr create_startup 
1600			 
1600			.genhwword: 
1600 21 bb 1b			ld hl, crs_hw 
1603 11 93 16			ld de, .hwworddef 
1606 cd 50 16			call .genfile 
1609 c9				ret 
160a			.gensoundword: 
160a 21 af 1b			ld hl, crs_sound 
160d 11 a1 16			ld de, .soundworddef 
1610 cd 50 16			call .genfile 
1613 c9				ret 
1614			.genlsword: 
1614 21 71 1b			ld hl, crs_s1 
1617 11 c5 16			ld de, .lsworddef 
161a cd 50 16			call .genfile 
161d c9				ret 
161e			 
161e			.genedword: 
161e 11 c9 16			ld de, .edworddef 
1621 21 7a 1b			ld hl, crs_s2 
1624 cd 50 16			call .genfile 
1627 c9				ret 
1628			 
1628			.gendemword: 
1628 11 d1 16			ld de, .demoworddef 
162b 21 83 1b			ld hl, crs_s3 
162e cd 50 16			call .genfile 
1631 c9				ret 
1632			 
1632			.genutlword: 
1632 21 8f 1b			ld hl, crs_s4 
1635 11 b5 16			ld de, .utilwordef 
1638 cd 50 16			call .genfile 
163b c9				ret 
163c			.genspiword: 
163c 21 96 1b			ld hl, crs_s5 
163f 11 f3 16			ld de, .spiworddef 
1642 cd 50 16			call .genfile 
1645 c9				ret 
1646			.genkeyword: 
1646 21 a0 1b			ld hl, crs_s6 
1649 11 01 17			ld de, .keyworddef 
164c cd 50 16			call .genfile 
164f c9				ret 
1650			 
1650			; hl - points to file name 
1650			; de - points to strings to add to file 
1650			 
1650			.genfile: 
1650 e5				push hl 
1651 d5				push de 
1652			 
1652 cd a7 0d			call clear_display 
1655 3e 00			ld a, display_row_1 
1657 11 82 16			ld de, .genfiletxt 
165a cd ba 0d			call str_at_display 
165d cd ca 0d			call update_display 
1660			 
1660 d1				pop de 
1661 e1				pop hl 
1662			 
1662			 
1662 d5				push de 
1663 cd 74 08			call storage_create 
1666				; id in hl 
1666 d1				pop de   ; table of strings to add 
1667			 
1667			.genloop: 
1667			 
1667 e5				push hl ; save id for next time around 
1668 d5				push de ; save de for next time around 
1669			 
1669 eb				ex de, hl 
166a cd 6c 23			call loadwordinhl 
166d eb				ex de, hl 
166e			 
166e				; need hl to be the id 
166e				; need de to be the string ptr 
166e				 
166e cd 61 0b			call storage_append 
1671			 
1671 d1				pop de 
1672 e1				pop hl 
1673			 
1673 13				inc de 
1674 13				inc de 
1675			 
1675 1a				ld a,(de) 
1676 fe 00			cp 0 
1678 20 ed			jr nz, .genloop 
167a 13				inc de 
167b 1a				ld a, (de) 
167c 1b				dec de 
167d fe 00			cp 0 
167f 20 e6			jr nz, .genloop	 
1681			 
1681 c9				ret 
1682			 
1682 .. 00		.genfiletxt:  db "Creating file...",0 
1693			 
1693			.hwworddef: 
1693 03 65			dw test5 
1695 3b 65			dw test6 
1697 73 65			dw test7 
1699 87 65			dw test8 
169b b3 65			dw test9 
169d c9 65			dw test10 
169f 00 00			dw 0 
16a1			 
16a1			.soundworddef: 
16a1 ee 65			dw sound1 
16a3 12 66			dw sound2 
16a5 42 66			dw sound3 
16a7 67 66			dw sound4 
16a9 74 66			dw sound5 
16ab 81 66			dw sound6 
16ad 8e 66			dw sound7 
16af 9b 66			dw sound8 
16b1 b3 66			dw sound9 
16b3 00 00			dw 0 
16b5			 
16b5			.utilwordef: 
16b5 3c 63			dw strncpy 
16b7 17 63			dw type 
16b9 e3 62			dw clrstack 
16bb 9c 62			dw longread 
16bd 9d 63			dw start1 
16bf ad 63			dw start2 
16c1			; duplicated 
16c1			;	dw start3b 
16c1			;	dw start3c 
16c1 99 64			dw list 
16c3 00 00			dw 0 
16c5			 
16c5			.lsworddef: 
16c5 be 63			dw start3b 
16c7 00 00			dw 0 
16c9			 
16c9			.edworddef: 
16c9 fb 5e			dw edit1 
16cb 1c 5f			dw edit2 
16cd 51 5f			dw edit3 
16cf 00 00			dw 0 
16d1			 
16d1			.demoworddef: 
16d1 ca 66			dw game1 
16d3 db 66			dw game1a 
16d5 3d 67			dw game1b 
16d7 72 67			dw game1c 
16d9 a8 67			dw game1d 
16db d9 67			dw game1s 
16dd ed 67			dw game1t 
16df 02 68			dw game1f 
16e1 36 68			dw game1z 
16e3 7a 68			dw game1zz 
16e5 e3 68			dw ssv2 
16e7 19 69			dw ssv3 
16e9 35 69			dw ssv4 
16eb 51 69			dw ssv5 
16ed 6a 69			dw ssv1 
16ef b2 69			dw ssv1cpm	 
16f1			;	dw game2b 
16f1			;	dw game2bf 
16f1			;	dw game2mba 
16f1			;	dw game2mbas	 
16f1			;	dw game2mbht 
16f1			;	dw game2mbms 
16f1			;	dw game2mb 
16f1			;	dw game3w 
16f1			;	dw game3p 
16f1			;	dw game3sc 
16f1			;	dw game3vsi 
16f1			;	dw game3vs 
16f1 00 00			dw 0 
16f3			 
16f3			 
16f3			.spiworddef: 
16f3			 
16f3 89 5f		    dw spi1 
16f5 e2 5f		    dw spi2 
16f7 16 60		    dw spi2b 
16f9 9a 60		    dw spi3 
16fb 44 60		    dw spi4 
16fd 6d 60		    dw spi5 
16ff			;    dw spi6 
16ff			;    dw spi7 
16ff			 
16ff			;    dw spi8 
16ff			;    dw spi9 
16ff			;    dw spi10 
16ff 00 00		    dw 0 
1701			 
1701			.keyworddef: 
1701			 
1701 09 6a			dw keyup 
1703 17 6a			dw keydown 
1705 27 6a			dw keyleft 
1707 37 6a			dw keyright 
1709 48 6a			dw 	keyf1 
170b 56 6a			dw keyf2 
170d 64 6a			dw keyf3 
170f 72 6a			dw keyf4 
1711 80 6a			dw keyf5 
1713 8e 6a			dw keyf6 
1715 9c 6a			dw keyf7 
1717 aa 6a			dw keyf8 
1719 b8 6a			dw keyf9 
171b c6 6a			dw keyf10 
171d d5 6a			dw keyf11 
171f e4 6a			dw keyf12 
1721 f3 6a			dw keytab 
1723 02 6b			dw keycr 
1725 10 6b			dw keyhome 
1727 20 6b			dw keyend 
1729 2f 6b			dw keybs 
172b 00 00			dw 0 
172d			 
172d			.crstart: 
172d 71 1b			dw crs_s1 
172f 7a 1b			dw crs_s2 
1731 83 1b			dw crs_s3 
1733 8f 1b			dw crs_s4 
1735 96 1b			dw crs_s5 
1737 a0 1b			dw crs_s6 
1739 af 1b			dw crs_sound 
173b bb 1b			dw crs_hw 
173d 00 00			dw 0 
173f			 
173f			endif 
173f			 
173f			 
173f			if STORAGE_SE 
173f			 
173f			config_fdir: 
173f				; using the scratch dir go through and release the memory allocated for each string 
173f				 
173f 21 fc f0			ld hl, scratch 
1742 5e			.cfdir:	ld e,(hl) 
1743 23				inc hl 
1744 56				ld d,(hl) 
1745 23				inc hl 
1746			 
1746 eb				ex de, hl 
1747 cd 04 10			call ishlzero 
174a c8				ret z     ; return on null pointer 
174b cd 80 14			call free 
174e eb				ex de, hl 
174f 18 f1			jr .cfdir 
1751			 
1751			 
1751 c9				ret 
1752			 
1752			 
1752			config_dir: 
1752			 
1752				; for the config menus that need to build a directory of storage call this routine 
1752				; it will construct a menu in scratch to pass to menu 
1752			 
1752				; open storage device 
1752			 
1752				; execute DIR to build a list of files and their ids into scratch in menu format 
1752				; once the menu has finished then will need to call config_fdir to release the strings 
1752				 
1752				; c = number items 
1752			 
1752				 
1752 cd 22 05			call storage_get_block_0 
1755			 
1755 21 b5 f9			ld hl, store_page     ; get current id count 
1758 46				ld b, (hl) 
1759 0e 00			ld c, 0    ; count of files   
175b			 
175b			 
175b 21 fc f0			ld hl, scratch 
175e 22 ac f9			ld (store_tmp2), hl    ; location to poke strings 
1761			 
1761				; check for empty drive 
1761			 
1761 3e 00			ld a, 0 
1763 b8				cp b 
1764 ca fe 17			jp z, .dirdone 
1767			 
1767				 
1767					if DEBUG_FORTH_WORDS 
1767						DMARK "Cdc" 
1767 f5				push af  
1768 3a 7c 17			ld a, (.dmark)  
176b 32 a6 fd			ld (debug_mark),a  
176e 3a 7d 17			ld a, (.dmark+1)  
1771 32 a7 fd			ld (debug_mark+1),a  
1774 3a 7e 17			ld a, (.dmark+2)  
1777 32 a8 fd			ld (debug_mark+2),a  
177a 18 03			jr .pastdmark  
177c ..			.dmark: db "Cdc"  
177f f1			.pastdmark: pop af  
1780			endm  
# End of macro DMARK
1780						CALLMONITOR 
1780 cd aa fd			call debug_vector  
1783				endm  
# End of macro CALLMONITOR
1783					endif 
1783			 
1783			 
1783			.diritem:	 
1783 c5				push bc 
1784				; for each of the current ids do a search for them and if found push to stack 
1784			 
1784 21 40 00				ld hl, STORE_BLOCK_PHY 
1787 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
1789 58					ld e,b 
178a			 
178a cd a4 07				call storage_findnextid 
178d			 
178d			 
178d					; if found hl will be non zero 
178d			 
178d cd 04 10				call ishlzero 
1790 28 69				jr z, .dirnotfound 
1792			 
1792					; increase count 
1792			 
1792 c1					pop bc	 
1793 0c					inc c 
1794 c5					push bc 
1795					 
1795			 
1795					; get file header and push the file name 
1795			 
1795 11 b5 f9				ld de, store_page 
1798 cd 71 04				call storage_read_block 
179b			 
179b					; push file id to stack 
179b				 
179b 3a b5 f9				ld a, (store_page) 
179e 26 00				ld h, 0 
17a0 6f					ld l, a 
17a1			 
17a1					;call forth_push_numhl 
17a1					; TODO store id 
17a1			 
17a1 e5					push hl 
17a2			 
17a2					; push extent count to stack  
17a2				 
17a2 21 b8 f9				ld hl, store_page+3 
17a5			 
17a5					; get file name length 
17a5			 
17a5 cd 41 13				call strlenz   
17a8			 
17a8 23					inc hl   ; cover zero term 
17a9 23					inc hl  ; stick the id at the end of the area 
17aa			 
17aa e5					push hl 
17ab c1					pop bc    ; move length to bc 
17ac			 
17ac cd b6 13				call malloc 
17af			 
17af					; TODO save malloc area to scratch 
17af			 
17af eb					ex de, hl 
17b0 2a ac f9				ld hl, (store_tmp2) 
17b3 73					ld (hl), e 
17b4 23					inc hl 
17b5 72					ld (hl), d 
17b6 23					inc hl 
17b7 22 ac f9				ld (store_tmp2), hl 
17ba			 
17ba					 
17ba			 
17ba					;pop hl   ; get source 
17ba			;		ex de, hl    ; swap aronund	 
17ba			 
17ba 21 b8 f9				ld hl, store_page+3 
17bd					if DEBUG_FORTH_WORDS 
17bd						DMARK "CFd" 
17bd f5				push af  
17be 3a d2 17			ld a, (.dmark)  
17c1 32 a6 fd			ld (debug_mark),a  
17c4 3a d3 17			ld a, (.dmark+1)  
17c7 32 a7 fd			ld (debug_mark+1),a  
17ca 3a d4 17			ld a, (.dmark+2)  
17cd 32 a8 fd			ld (debug_mark+2),a  
17d0 18 03			jr .pastdmark  
17d2 ..			.dmark: db "CFd"  
17d5 f1			.pastdmark: pop af  
17d6			endm  
# End of macro DMARK
17d6						CALLMONITOR 
17d6 cd aa fd			call debug_vector  
17d9				endm  
# End of macro CALLMONITOR
17d9					endif 
17d9 ed b0				ldir 
17db			 
17db					; de is past string, move back one and store id 
17db					 
17db 1b					dec de 
17dc			 
17dc					; store file id 
17dc			 
17dc e1					pop hl 
17dd eb					ex de,hl 
17de 73					ld (hl), e 
17df			 
17df					if DEBUG_FORTH_WORDS 
17df						DMARK "Cdi" 
17df f5				push af  
17e0 3a f4 17			ld a, (.dmark)  
17e3 32 a6 fd			ld (debug_mark),a  
17e6 3a f5 17			ld a, (.dmark+1)  
17e9 32 a7 fd			ld (debug_mark+1),a  
17ec 3a f6 17			ld a, (.dmark+2)  
17ef 32 a8 fd			ld (debug_mark+2),a  
17f2 18 03			jr .pastdmark  
17f4 ..			.dmark: db "Cdi"  
17f7 f1			.pastdmark: pop af  
17f8			endm  
# End of macro DMARK
17f8						CALLMONITOR 
17f8 cd aa fd			call debug_vector  
17fb				endm  
# End of macro CALLMONITOR
17fb					endif 
17fb					 
17fb			.dirnotfound: 
17fb c1					pop bc     
17fc 10 85				djnz .diritem 
17fe				 
17fe			.dirdone:	 
17fe			 
17fe 3e 00				ld a, 0 
1800 2a ac f9				ld hl, (store_tmp2) 
1803 77					ld (hl), a 
1804 23					inc hl 
1805 77					ld (hl), a 
1806 23					inc hl 
1807					; push a count of the dir items found 
1807			 
1807			;		ld h, 0 
1807			;		ld l, c 
1807			 
1807 c9				ret 
1808			 
1808			endif 
1808			 
1808			 
1808			; Settings 
1808			; Run  
1808			 
1808			 
1808			 
1808			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
1808			;;hd_menu2:   db "        2: Editor",0   
1808			;hd_menu2:   db "        2: Editor       6: Menu",0   
1808			;hd_menu3:   db "        3: Storage",0 
1808			;hd_menu4:   db "0=quit  4: Debug",0 
1808			;hd_don:     db "ON",0 
1808			;hd_doff:     db "OFF",0 
1808			; 
1808			; 
1808			; 
1808			;hardware_diags_old:       
1808			; 
1808			;.diagmenu: 
1808			;	call clear_display 
1808			;	ld a, display_row_1 
1808			;	ld de, hd_menu1 
1808			;	call str_at_display 
1808			; 
1808			;	ld a, display_row_2 
1808			;	ld de, hd_menu2 
1808			;	call str_at_display 
1808			; 
1808			;	ld a, display_row_3 
1808			;	ld de, hd_menu3 
1808			;	call str_at_display 
1808			; 
1808			;	ld a,  display_row_4 
1808			;	ld de, hd_menu4 
1808			;	call str_at_display 
1808			; 
1808			;	; display debug state 
1808			; 
1808			;	ld de, hd_don 
1808			;	ld a, (os_view_disable) 
1808			;	cp 0 
1808			;	jr z, .distog 
1808			;	ld de, hd_doff 
1808			;.distog: ld a, display_row_4+17 
1808			;	call str_at_display 
1808			; 
1808			;	call update_display 
1808			; 
1808			;	call cin_wait 
1808			; 
1808			; 
1808			; 
1808			;	cp '4' 
1808			;	jr nz, .diagn1 
1808			; 
1808			;	; debug toggle 
1808			; 
1808			;	ld a, (os_view_disable) 
1808			;	ld b, '*' 
1808			;	cp 0 
1808			;	jr z, .debtog 
1808			;	ld b, 0 
1808			;.debtog:	 
1808			;	ld a,b 
1808			;	ld (os_view_disable),a 
1808			; 
1808			;.diagn1: cp '0' 
1808			;	 ret z 
1808			; 
1808			;;	cp '1' 
1808			;;       jp z, matrix	 
1808			;;   TODO keyboard matrix test 
1808			; 
1808			;	cp '2' 
1808			;	jp z, .diagedit 
1808			; 
1808			;;	cp '6' 
1808			;;	jp z, .menutest 
1808			;;if ENABLE_BASIC 
1808			;;	cp '6' 
1808			;;	jp z, basic 
1808			;;endif 
1808			 ; 
1808			;	jp .diagmenu 
1808			; 
1808			; 
1808			;	ret 
1808			 
1808			 
1808			.debug_tog: 
1808 21 52 18			ld hl, .menudebug 
180b				 
180b			;	ld a, (os_view_disable) 
180b			;	cp '*' 
180b 3a aa fd			ld a,(debug_vector) 
180e fe c9			cp $C9   ; RET 
1810 20 04			jr nz,.tdon  
1812 3e 01			ld a, 1 
1814 18 02			jr .tog1 
1816 3e 00		.tdon: ld a, 0 
1818			 
1818			.tog1: 
1818 cd d8 0d			call menu 
181b fe 00			cp 0 
181d c8				ret z 
181e fe 01			cp 1    ; disable debug 
1820 28 04			jr z, .dtog0 
1822 3e 2a			ld a, '*' 
1824 18 05			jr .dtogset 
1826			.dtog0:  
1826				;ld a, 0 
1826 cd 44 19			call bp_on 
1829 18 dd			jr .debug_tog 
182b			.dtogset:  
182b				; ld (os_view_disable), a 
182b cd 50 19			call bp_off 
182e c3 08 18			jp .debug_tog 
1831			 
1831			 
1831			hardware_diags:       
1831			 
1831			.diagm: 
1831 21 44 18			ld hl, .menuitems 
1834 3e 00			ld a, 0 
1836 cd d8 0d			call menu 
1839			 
1839 fe 00		         cp 0 
183b c8				 ret z 
183c			 
183c fe 02			cp 2 
183e ca 9d 18			jp z, .diagedit 
1841			 
1841			;	cp '6' 
1841			;	jp z, .menutest 
1841			;if ENABLE_BASIC 
1841			;	cp '6' 
1841			;	jp z, basic 
1841			;endif 
1841			  
1841 c3 31 18			jp .diagm 
1844			 
1844				 
1844 58 18		.menuitems:   	dw .m1 
1846 63 18				dw .m2 
1848 6a 18				dw .m3 
184a 72 18				dw .m5 
184c 78 18				dw .m5a 
184e 81 18				dw .m5b 
1850 00 00				dw 0 
1852			 
1852			.menudebug: 
1852 8a 18				dw .m6 
1854 93 18				dw .m7 
1856 00 00				dw 0 
1858			 
1858 .. 00		.m1:   db "Key Matrix",0 
1863 .. 00		.m2:   db "Editor",0 
186a .. 00		.m3:   db "Storage",0 
1872 .. 00		.m5:   db "Sound",0 
1878 .. 00		.m5a:  db "RAM Test",0 
1881 .. 00		.m5b:  db "LCD Test",0 
188a			 
188a .. 00		.m6:   db "Debug ON",0 
1893 .. 00		.m7:   db "Debug OFF",0 
189d			 
189d			; debug editor 
189d			 
189d			.diagedit: 
189d			 
189d 21 fc f0			ld hl, scratch 
18a0			;	ld bc, 250 
18a0			;	ldir 
18a0				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
18a0 3e 00			ld a, 0 
18a2 77				ld (hl), a 
18a3 23				inc hl 
18a4 77				ld (hl), a 
18a5 23				inc hl 
18a6 77				ld (hl), a 
18a7			 
18a7 cd a7 0d		        call clear_display 
18aa cd ca 0d			call update_display 
18ad				;ld a, 1 
18ad				;ld (hardware_diag), a 
18ad			.diloop: 
18ad 3e 00			ld a, display_row_1 
18af 0e 00			ld c, 0 
18b1 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
18b3 1e 28			ld e, 40 
18b5			 
18b5 21 fc f0			ld hl, scratch	 
18b8 cd 08 10			call input_str 
18bb			 
18bb 3e 28			ld a, display_row_2 
18bd 11 fc f0			ld de, scratch 
18c0 cd ba 0d			call str_at_display 
18c3 cd ca 0d			call update_display 
18c6			 
18c6 c3 ad 18			jp .diloop 
18c9			 
18c9			 
18c9			; pass word in hl 
18c9			; a has display location 
18c9			display_word_at: 
18c9 f5				push af 
18ca e5				push hl 
18cb 7c				ld a,h 
18cc 21 01 f4			ld hl, os_word_scratch 
18cf cd e4 11			call hexout 
18d2 e1				pop hl 
18d3 7d				ld a,l 
18d4 21 03 f4			ld hl, os_word_scratch+2 
18d7 cd e4 11			call hexout 
18da 21 05 f4			ld hl, os_word_scratch+4 
18dd 3e 00			ld a,0 
18df 77				ld (hl),a 
18e0 11 01 f4			ld de,os_word_scratch 
18e3 f1				pop af 
18e4 cd ba 0d				call str_at_display 
18e7 c9				ret 
18e8			 
18e8			display_ptr_state: 
18e8			 
18e8				; to restore afterwards 
18e8			 
18e8 d5				push de 
18e9 c5				push bc 
18ea e5				push hl 
18eb f5				push af 
18ec			 
18ec				; for use in here 
18ec			 
18ec			;	push bc 
18ec			;	push de 
18ec			;	push hl 
18ec			;	push af 
18ec			 
18ec cd a7 0d			call clear_display 
18ef			 
18ef 11 c7 1a			ld de, .ptrstate 
18f2 3e 00			ld a, display_row_1 
18f4 cd ba 0d			call str_at_display 
18f7			 
18f7				; display debug step 
18f7			 
18f7			 
18f7 11 a6 fd			ld de, debug_mark 
18fa 3e 26			ld a, display_row_1+display_cols-2 
18fc cd ba 0d			call str_at_display 
18ff			 
18ff				; display a 
18ff 11 d1 1a			ld de, .ptrcliptr 
1902 3e 28			ld a, display_row_2 
1904 cd ba 0d			call str_at_display 
1907			 
1907 f1				pop af 
1908 2a 7b f9			ld hl,(cli_ptr) 
190b 3e 30			ld a, display_row_2+8 
190d cd c9 18			call display_word_at 
1910			 
1910			 
1910				; display hl 
1910			 
1910			 
1910 11 d9 1a			ld de, .ptrclioptr 
1913 3e 32			ld a, display_row_2+10 
1915 cd ba 0d			call str_at_display 
1918			; 
1918			;	pop hl 
1918 3e 35			ld a, display_row_2+13 
191a 2a 79 f9			ld hl,(cli_origptr) 
191d cd c9 18			call display_word_at 
1920			; 
1920			;	 
1920			;	; display de 
1920			 
1920			;	ld de, .regstatede 
1920			;	ld a, display_row_3 
1920			;	call str_at_display 
1920			 
1920			;	pop de 
1920			;	ld h,d 
1920			;	ld l, e 
1920			;	ld a, display_row_3+3 
1920			;	call display_word_at 
1920			 
1920			 
1920				; display bc 
1920			 
1920			;	ld de, .regstatebc 
1920			;	ld a, display_row_3+10 
1920			;	call str_at_display 
1920			 
1920			;	pop bc 
1920			;	ld h,b 
1920			;	ld l, c 
1920			;	ld a, display_row_3+13 
1920			;	call display_word_at 
1920			 
1920			 
1920				; display dsp 
1920			 
1920			;	ld de, .regstatedsp 
1920			;	ld a, display_row_4 
1920			;	call str_at_display 
1920			 
1920				 
1920			;	ld hl,(cli_data_sp) 
1920			;	ld a, display_row_4+4 
1920			;	call display_word_at 
1920			 
1920				; display rsp 
1920			 
1920 11 08 1b			ld de, .regstatersp 
1923 3e 82			ld a, display_row_4+10 
1925 cd ba 0d			call str_at_display 
1928			 
1928				 
1928 2a 2d f9			ld hl,(cli_ret_sp) 
192b 3e 86			ld a, display_row_4+14 
192d cd c9 18			call display_word_at 
1930			 
1930 cd ca 0d			call update_display 
1933			 
1933 cd ea 0c			call delay1s 
1936 cd ea 0c			call delay1s 
1939 cd ea 0c			call delay1s 
193c			 
193c			 
193c cd a7 1f			call next_page_prompt 
193f			 
193f				; restore  
193f			 
193f f1				pop af 
1940 e1				pop hl 
1941 c1				pop bc 
1942 d1				pop de 
1943 c9				ret 
1944			 
1944			; Update the break point vector so that the user can hook a new routine 
1944			 
1944			bp_on: 
1944 3e c3			ld a, $c3    ; JP 
1946 32 aa fd			ld (debug_vector), a 
1949 21 56 19			ld hl, break_point_state 
194c 22 ab fd			ld (debug_vector+1), hl 
194f c9				ret 
1950			 
1950			bp_off: 
1950 3e c9			ld a, $c9    ; RET 
1952 32 aa fd			ld (debug_vector), a 
1955 c9				ret 
1956			 
1956			 
1956			break_point_state: 
1956			;	push af 
1956			; 
1956			;	; see if disabled 
1956			; 
1956			;	ld a, (os_view_disable) 
1956			;	cp '*' 
1956			;	jr nz, .bpsgo 
1956			;	pop af 
1956			;	ret 
1956			 
1956			.bpsgo: 
1956			;	pop af 
1956 f5				push af 
1957 22 de f0			ld (os_view_hl), hl 
195a ed 53 dc f0		ld (os_view_de), de 
195e ed 43 da f0		ld (os_view_bc), bc 
1962 e5				push hl 
1963 6f				ld l, a 
1964 26 00			ld h, 0 
1966 22 e0 f0			ld (os_view_af),hl 
1969			 
1969 21 ec fc				ld hl, display_fb0 
196c 22 07 fb				ld (display_fb_active), hl 
196f e1				pop hl	 
1970			 
1970 3e 31			ld a, '1' 
1972 fe 2a		.bps1:  cp '*' 
1974 cc 50 19			call z, bp_off 
1977			;	jr nz, .bps1b 
1977			;	ld (os_view_disable),a 
1977 fe 31		.bps1b:  cp '1' 
1979 20 14			jr nz, .bps2 
197b			 
197b				; display reg 
197b			 
197b				 
197b			 
197b 3a e0 f0			ld a, (os_view_af) 
197e 2a de f0			ld hl, (os_view_hl) 
1981 ed 5b dc f0		ld de, (os_view_de) 
1985 ed 4b da f0		ld bc, (os_view_bc) 
1989 cd 23 1a			call display_reg_state 
198c c3 0f 1a			jp .bpschk 
198f			 
198f fe 32		.bps2:  cp '2' 
1991 20 08			jr nz, .bps3 
1993				 
1993				; display hl 
1993 2a de f0			ld hl, (os_view_hl) 
1996 cd 0d 1b			call display_dump_at_hl 
1999			 
1999 18 74			jr .bpschk 
199b			 
199b fe 33		.bps3:  cp '3' 
199d 20 08			jr nz, .bps4 
199f			 
199f			        ; display de 
199f 2a dc f0			ld hl, (os_view_de) 
19a2 cd 0d 1b			call display_dump_at_hl 
19a5			 
19a5 18 68			jr .bpschk 
19a7 fe 34		.bps4:  cp '4' 
19a9 20 08			jr nz, .bps5 
19ab			 
19ab			        ; display bc 
19ab 2a da f0			ld hl, (os_view_bc) 
19ae cd 0d 1b			call display_dump_at_hl 
19b1			 
19b1 18 5c			jr .bpschk 
19b3 fe 35		.bps5:  cp '5' 
19b5 20 08		        jr nz, .bps7 
19b7			 
19b7				; display cur ptr 
19b7 2a 7b f9			ld hl, (cli_ptr) 
19ba cd 0d 1b			call display_dump_at_hl 
19bd			 
19bd 18 50			jr .bpschk 
19bf fe 36		.bps7:  cp '6' 
19c1 20 08			jr nz, .bps8b 
19c3				 
19c3				; display cur orig ptr 
19c3 2a 79 f9			ld hl, (cli_origptr) 
19c6 cd 0d 1b			call display_dump_at_hl 
19c9 18 44			jr .bpschk 
19cb fe 37		.bps8b:  cp '7' 
19cd 20 08			jr nz, .bps9 
19cf				 
19cf				; display dsp 
19cf 2a 29 f9			ld hl, (cli_data_sp) 
19d2 cd 0d 1b			call display_dump_at_hl 
19d5			 
19d5 18 38			jr .bpschk 
19d7 fe 39		.bps9:  cp '9' 
19d9 20 05			jr nz, .bps8c 
19db				 
19db				; display SP 
19db			;	ld hl, sp 
19db cd 0d 1b			call display_dump_at_hl 
19de			 
19de 18 2f			jr .bpschk 
19e0 fe 38		.bps8c:  cp '8' 
19e2 20 08			jr nz, .bps8d 
19e4				 
19e4				; display rsp 
19e4 2a 2d f9			ld hl, (cli_ret_sp) 
19e7 cd 0d 1b			call display_dump_at_hl 
19ea			 
19ea 18 23			jr .bpschk 
19ec fe 23		.bps8d:  cp '#'     ; access monitor sub system 
19ee 20 05			jr nz, .bps8 
19f0 cd 75 1d			call monitor 
19f3			 
19f3 18 1a			jr .bpschk 
19f5 fe 30		.bps8:  cp '0' 
19f7 20 16			jr nz, .bpschk 
19f9			 
19f9 21 4b fc				ld hl, display_fb1 
19fc 22 07 fb				ld (display_fb_active), hl 
19ff cd ca 0d				call update_display 
1a02			 
1a02				;ld a, (os_view_af) 
1a02 2a de f0			ld hl, (os_view_hl) 
1a05 ed 5b dc f0		ld de, (os_view_de) 
1a09 ed 4b da f0		ld bc, (os_view_bc) 
1a0d f1				pop af 
1a0e c9				ret 
1a0f			 
1a0f			.bpschk:   
1a0f cd ea 0c			call delay1s 
1a12 3e 9f		ld a,display_row_4 + display_cols - 1 
1a14 11 a5 1f		        ld de, endprg 
1a17 cd ba 0d			call str_at_display 
1a1a cd ca 0d			call update_display 
1a1d cd b3 72			call cin_wait 
1a20			 
1a20 c3 72 19			jp .bps1 
1a23			 
1a23			 
1a23			display_reg_state: 
1a23			 
1a23				; to restore afterwards 
1a23			 
1a23 d5				push de 
1a24 c5				push bc 
1a25 e5				push hl 
1a26 f5				push af 
1a27			 
1a27				; for use in here 
1a27			 
1a27 c5				push bc 
1a28 d5				push de 
1a29 e5				push hl 
1a2a f5				push af 
1a2b			 
1a2b cd a7 0d			call clear_display 
1a2e			 
1a2e 11 e3 1a			ld de, .regstate 
1a31 3e 00			ld a, display_row_1 
1a33 cd ba 0d			call str_at_display 
1a36			 
1a36				; display debug step 
1a36			 
1a36			 
1a36 11 a6 fd			ld de, debug_mark 
1a39 3e 25			ld a, display_row_1+display_cols-3 
1a3b cd ba 0d			call str_at_display 
1a3e			 
1a3e				; display a 
1a3e 11 ff 1a			ld de, .regstatea 
1a41 3e 28			ld a, display_row_2 
1a43 cd ba 0d			call str_at_display 
1a46			 
1a46 e1				pop hl 
1a47			;	ld h,0 
1a47			;	ld l, a 
1a47 3e 2b			ld a, display_row_2+3 
1a49 cd c9 18			call display_word_at 
1a4c			 
1a4c			 
1a4c				; display hl 
1a4c			 
1a4c			 
1a4c 11 f3 1a			ld de, .regstatehl 
1a4f 3e 32			ld a, display_row_2+10 
1a51 cd ba 0d			call str_at_display 
1a54			 
1a54 e1				pop hl 
1a55 3e 35			ld a, display_row_2+13 
1a57 cd c9 18			call display_word_at 
1a5a			 
1a5a				 
1a5a				; display de 
1a5a			 
1a5a 11 f7 1a			ld de, .regstatede 
1a5d 3e 50			ld a, display_row_3 
1a5f cd ba 0d			call str_at_display 
1a62			 
1a62 e1				pop hl 
1a63			;	ld h,d 
1a63			;	ld l, e 
1a63 3e 53			ld a, display_row_3+3 
1a65 cd c9 18			call display_word_at 
1a68			 
1a68			 
1a68				; display bc 
1a68			 
1a68 11 fb 1a			ld de, .regstatebc 
1a6b 3e 5a			ld a, display_row_3+10 
1a6d cd ba 0d			call str_at_display 
1a70			 
1a70 e1				pop hl 
1a71			;	ld h,b 
1a71			;	ld l, c 
1a71 3e 5d			ld a, display_row_3+13 
1a73 cd c9 18			call display_word_at 
1a76			 
1a76			 
1a76				; display dsp 
1a76			 
1a76 11 03 1b			ld de, .regstatedsp 
1a79 3e 78			ld a, display_row_4 
1a7b cd ba 0d			call str_at_display 
1a7e			 
1a7e				 
1a7e 2a 29 f9			ld hl,(cli_data_sp) 
1a81 3e 7c			ld a, display_row_4+4 
1a83 cd c9 18			call display_word_at 
1a86			 
1a86				; display rsp 
1a86			 
1a86 11 08 1b			ld de, .regstatersp 
1a89 3e 82			ld a, display_row_4+10 
1a8b cd ba 0d			call str_at_display 
1a8e			 
1a8e				 
1a8e 2a 2d f9			ld hl,(cli_ret_sp) 
1a91 3e 86			ld a, display_row_4+14 
1a93 cd c9 18			call display_word_at 
1a96			 
1a96 cd ca 0d			call update_display 
1a99			 
1a99			;	call delay1s 
1a99			;	call delay1s 
1a99			;	call delay1s 
1a99			 
1a99			 
1a99			;	call next_page_prompt 
1a99			 
1a99				; restore  
1a99			 
1a99 f1				pop af 
1a9a e1				pop hl 
1a9b c1				pop bc 
1a9c d1				pop de 
1a9d c9				ret 
1a9e			 
1a9e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1ab2 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1ac7 .. 00		.ptrstate:	db "Ptr State",0 
1ad1 .. 00		.ptrcliptr:     db "cli_ptr",0 
1ad9 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1ae3 .. 00		.regstate:	db "Reg State (1/0)",0 
1af3 .. 00		.regstatehl:	db "HL:",0 
1af7 .. 00		.regstatede:	db "DE:",0 
1afb .. 00		.regstatebc:	db "BC:",0 
1aff .. 00		.regstatea:	db "A :",0 
1b03 .. 00		.regstatedsp:	db "DSP:",0 
1b08 .. 00		.regstatersp:	db "RSP:",0 
1b0d			 
1b0d			display_dump_at_hl: 
1b0d e5				push hl 
1b0e d5				push de 
1b0f c5				push bc 
1b10 f5				push af 
1b11			 
1b11 22 1f f4			ld (os_cur_ptr),hl	 
1b14 cd a7 0d			call clear_display 
1b17 cd af 1e			call dumpcont 
1b1a			;	call delay1s 
1b1a			;	call next_page_prompt 
1b1a			 
1b1a			 
1b1a f1				pop af 
1b1b c1				pop bc 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e c9				ret 
1b1f			 
1b1f			;if ENABLE_BASIC 
1b1f			;	include "nascombasic.asm" 
1b1f			;	basic: 
1b1f			;	include "forth/FORTH.ASM" 
1b1f			;endif 
1b1f			 
1b1f			; eof 
1b1f			 
1b1f			 
# End of file firmware_diags.asm
1b1f			  
1b1f			include "firmware_prompts.asm"  
1b1f			; Prompts  
1b1f			 
1b1f			; boot messages 
1b1f			 
1b1f .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1b34 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1b44			 
1b44			 
1b44			; config menus 
1b44			 
1b44			;prom_c3: db "Add Dictionary To File",0 
1b44			 
1b44			if STARTUP_V1 
1b44			prom_c2: db "Select Autoload File",0 
1b44			prom_c2a: db "Disable Autoload File", 0 
1b44			endif 
1b44			 
1b44			if STARTUP_V2 
1b44 .. 00		prom_c2: db "Enable Autoload Files",0 
1b5a .. 00		prom_c2a: db "Disable Autoload Files", 0 
1b71			 
1b71 .. 00		crs_s1: db "*ls-word", 0 
1b7a .. 00		crs_s2: db "*ed-word", 0 
1b83 .. 00		crs_s3: db "*Demo-Games", 0 
1b8f .. 00		crs_s4: db "*Utils", 0 
1b96 .. 00		crs_s5: db "*SPI-Util", 0 
1ba0 .. 00		crs_s6: db "*Key-Constants", 0 
1baf .. 00		crs_sound: db "*Sound-Util", 0 
1bbb .. 00		crs_hw: db "*Hello-World",0 
1bc8			 
1bc8			 
1bc8			 
1bc8			endif 
1bc8			;prom_c2b: db "Select Storage Bank",0 
1bc8 .. 00		prom_c4: db "Settings",0 
1bd1 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1bec .. 00		prom_m4b:   db "Monitor",0 
1bf4 .. 00		prom_c1: db "Hardware Diags",0 
1c03			 
1c03			 
1c03			if STARTUP_V2 
1c03 .. 00		prom_c9: db "Create Startup Files",0 
1c18			endif 
1c18			 
1c18 .. 00		prom_notav:    db "Feature not available",0 
1c2e .. 00		prom_empty:    db "",0 
1c2f			 
1c2f			; eof 
1c2f			 
# End of file firmware_prompts.asm
1c2f			  
1c2f			  
1c2f			; eof  
1c2f			  
# End of file firmware.asm
1c2f			 
1c2f			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1c2f			;if BASE_KEV  
1c2f			;baseram: equ 08000h 
1c2f			;endif 
1c2f			 
1c2f			;if BASE_SC114 
1c2f			;baseram:     equ    endofcode 
1c2f			;endif 
1c2f			 
1c2f			 
1c2f			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1c2f			 
1c2f			; start system 
1c2f			 
1c2f			coldstart: 
1c2f				; set sp 
1c2f				; di/ei 
1c2f			 
1c2f f3				di 
1c30 31 fd ff			ld sp, tos 
1c33 cd 3a 6f			call init_nmi 
1c36			;	ei 
1c36			 
1c36				; init spinner 
1c36 3e 00			ld a,0 
1c38 32 01 fb			ld (display_active), a 
1c3b			 
1c3b				; disable breakpoint by default 
1c3b			 
1c3b				;ld a,'*' 
1c3b			;	ld a,' ' 
1c3b			;	ld (os_view_disable),a 
1c3b			 
1c3b				; set break point vector as new break point on or off 
1c3b cd 50 19			call bp_off 
1c3e			 
1c3e				; init hardware 
1c3e			 
1c3e				; init keyboard and screen hardware 
1c3e			 
1c3e cd 6c 00			call hardware_init 
1c41			 
1c41			 
1c41 cd ea 0c			call delay1s 
1c44 3e 58			ld a, display_row_3+8 
1c46 11 03 00			ld de, buildtime 
1c49 cd ba 0d			call str_at_display 
1c4c cd ca 0d			call update_display 
1c4f			 
1c4f cd ea 0c			call delay1s 
1c52 cd ea 0c			call delay1s 
1c55 cd ea 0c			call delay1s 
1c58			 
1c58				; detect if any keys are held down to enable breakpoints at start up 
1c58			 
1c58 cd c4 72			call cin  
1c5b fe 00			cp 0 
1c5d 28 03			jr z, .nokeys 
1c5f			 
1c5f				;call hardware_diags 
1c5f cd 4f 15			call config 
1c62			 
1c62			;	ld de, .bpen 
1c62			;	ld a, display_row_4 
1c62			;	call str_at_display 
1c62			;	call update_display 
1c62			; 
1c62			;	ld a,0 
1c62			;	ld (os_view_disable),a 
1c62			; 
1c62			;.bpwait: 
1c62			;	call cin 
1c62			;	cp 0 
1c62			;	jr z, .bpwait 
1c62			;	jr .nokeys 
1c62			; 
1c62			; 
1c62			;.bpen:  db "Break points enabled!",0 
1c62			 
1c62			 
1c62			 
1c62			 
1c62			 
1c62			 
1c62			.nokeys: 
1c62			 
1c62			 
1c62				 
1c62			 
1c62			;jp  testkey 
1c62			 
1c62			;call storage_get_block_0 
1c62			; 
1c62			;ld hl, 0 
1c62			;ld de, store_page 
1c62			;call storage_read_block 
1c62			 
1c62				 
1c62			;ld hl, 10 
1c62			;ld de, store_page 
1c62			;call storage_read_block 
1c62			 
1c62			 
1c62			 
1c62			 
1c62			 
1c62			;stop:	nop 
1c62			;	jp stop 
1c62			 
1c62			 
1c62			 
1c62			main: 
1c62 cd a7 0d			call clear_display 
1c65 cd ca 0d			call update_display 
1c68			 
1c68			 
1c68			 
1c68			;	call testlcd 
1c68			 
1c68			 
1c68			 
1c68 cd ba 23			call forth_init 
1c6b			 
1c6b			 
1c6b			warmstart: 
1c6b cd 90 23			call forth_warmstart 
1c6e			 
1c6e				; run startup word load 
1c6e			        ; TODO prevent this running at warmstart after crash  
1c6e			 
1c6e				if STARTUP_ENABLE 
1c6e			 
1c6e					if STARTUP_V1 
1c6e			 
1c6e						if STORAGE_SE 
1c6e							call forth_autoload 
1c6e						endif 
1c6e						call forth_startup 
1c6e					endif 
1c6e			 
1c6e					if STARTUP_V2 
1c6e			 
1c6e						if STORAGE_SE 
1c6e cd 68 6d						call forth_autoload 
1c71						else 
1c71							call forth_startup 
1c71						endif 
1c71			 
1c71			 
1c71					endif 
1c71			 
1c71				endif 
1c71			 
1c71			warmstart_afterauto: 
1c71			 
1c71				; show free memory after boot 
1c71 11 10 1d			ld de, freeram 
1c74 3e 00			ld a, display_row_1 
1c76 cd ba 0d			call str_at_display 
1c79			 
1c79				; get current heap start after loading any uwords 
1c79			 
1c79				;ld de, (os_last_new_uword) 
1c79				;ex de, hl 
1c79			 
1c79			; Or use heap_size word???? 
1c79				;ld hl, heap_end 
1c79				;ld hl, heap_size 
1c79				;ld de, topusermem 
1c79				;ld de, heap_start 
1c79 ed 5b 0a 80			ld de, (free_list )      
1c7d 21 d7 f0				ld hl, heap_end 
1c80 ed 52			sbc hl, de 
1c82				;push hl 
1c82				;ld a,h	         	 
1c82				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1c82				;call hexout 
1c82			   	;pop hl 
1c82			; 
1c82			;	ld a,l 
1c82			;	ld hl, os_word_scratch+2 
1c82			;	call hexout 
1c82			;	ld hl, os_word_scratch+4 
1c82			;	ld a, 0 
1c82			;	ld (hl),a 
1c82 eb				ex de, hl 
1c83 21 01 f4			ld hl, os_word_scratch 
1c86 cd f0 12			call uitoa_16 
1c89			 
1c89			 
1c89 11 01 f4			ld de, os_word_scratch 
1c8c 3e 0d			ld a, display_row_1 + 13 
1c8e cd ba 0d			call str_at_display 
1c91 cd ca 0d			call update_display 
1c94			 
1c94			 
1c94				;call demo 
1c94			 
1c94			 
1c94				; init scratch input area for cli commands 
1c94			 
1c94 21 23 f4			ld hl, os_cli_cmd 
1c97 3e 00			ld a,0 
1c99 77				ld (hl),a 
1c9a 23				inc hl 
1c9b 77				ld (hl),a 
1c9c			 
1c9c 3e 00			ld a,0 
1c9e 32 22 f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1ca1			 
1ca1 32 1f f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1ca4 32 20 f4			ld (os_cur_ptr+1),a	 
1ca7			 
1ca7 32 01 f4			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1caa 32 02 f4			ld (os_word_scratch+1),a	 
1cad				 
1cad			 
1cad				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cad 21 23 f4			ld hl, os_cli_cmd 
1cb0			 
1cb0 3e 00			ld a, 0		 ; init cli input 
1cb2 77				ld (hl), a 
1cb3 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cb5			cli: 
1cb5				; show cli prompt 
1cb5				;push af 
1cb5				;ld a, 0 
1cb5				;ld de, prompt 
1cb5				;call str_at_display 
1cb5			 
1cb5				;call update_display 
1cb5				;pop af 
1cb5				;inc a 
1cb5				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1cb5			 
1cb5			.lastrecall: 
1cb5			 
1cb5 0e 00			ld c, 0 
1cb7 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1cb9 1e 28			ld e, 40 
1cbb			 
1cbb 21 23 f4			ld hl, os_cli_cmd 
1cbe			 
1cbe				STACKFRAME OFF $fefe $9f9f 
1cbe				if DEBUG_STACK_IMB 
1cbe					if OFF 
1cbe						exx 
1cbe						ld de, $fefe 
1cbe						ld a, d 
1cbe						ld hl, curframe 
1cbe						call hexout 
1cbe						ld a, e 
1cbe						ld hl, curframe+2 
1cbe						call hexout 
1cbe						ld hl, $fefe 
1cbe						push hl 
1cbe						ld hl, $9f9f 
1cbe						push hl 
1cbe						exx 
1cbe					endif 
1cbe				endif 
1cbe			endm 
# End of macro STACKFRAME
1cbe			 
1cbe cd 08 10			call input_str 
1cc1			 
1cc1				STACKFRAMECHK OFF $fefe $9f9f 
1cc1				if DEBUG_STACK_IMB 
1cc1					if OFF 
1cc1						exx 
1cc1						ld hl, $9f9f 
1cc1						pop de   ; $9f9f 
1cc1						call cmp16 
1cc1						jr nz, .spnosame 
1cc1						ld hl, $fefe 
1cc1						pop de   ; $fefe 
1cc1						call cmp16 
1cc1						jr z, .spfrsame 
1cc1						.spnosame: call showsperror 
1cc1						.spfrsame: nop 
1cc1						exx 
1cc1					endif 
1cc1				endif 
1cc1			endm 
# End of macro STACKFRAMECHK
1cc1			 
1cc1			 
1cc1				; check to see if last line recall has been requested 
1cc1			 
1cc1			if EDIT_V2 
1cc1 fe 05			cp KEY_UP 
1cc3 20 0f			jr nz, .noexecline 
1cc5			 
1cc5 11 23 f4			ld de, os_cli_cmd 
1cc8 21 22 f5			ld hl, os_last_cmd 
1ccb 01 ff 00			ld bc, 255 
1cce ed b0			ldir 
1cd0 3e 00			ld a, 0 
1cd2 18 e1			jr .lastrecall 
1cd4			endif 
1cd4			 
1cd4			.noexecline: 
1cd4				; no so exec the line		 
1cd4			 
1cd4				; copy input to last command 
1cd4			 
1cd4 21 23 f4			ld hl, os_cli_cmd 
1cd7 11 22 f5			ld de, os_last_cmd 
1cda 01 ff 00			ld bc, 255 
1cdd ed b0			ldir 
1cdf			 
1cdf				; wipe current buffer 
1cdf			 
1cdf			;	ld a, 0 
1cdf			;	ld hl, os_cli_cmd 
1cdf			;	ld de, os_cli_cmd+1 
1cdf			;	ld bc, 254 
1cdf			;	ldir 
1cdf				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1cdf			;	call strcpy 
1cdf			;	ld a, 0 
1cdf			;	ld (hl), a 
1cdf			;	inc hl 
1cdf			;	ld (hl), a 
1cdf			;	inc hl 
1cdf			;	ld (hl), a 
1cdf			 
1cdf				; switch frame buffer to program  
1cdf			 
1cdf 21 4b fc				ld hl, display_fb1 
1ce2 22 07 fb				ld (display_fb_active), hl 
1ce5			 
1ce5			;	nop 
1ce5				STACKFRAME ON $fbfe $8f9f 
1ce5				if DEBUG_STACK_IMB 
1ce5					if ON 
1ce5						exx 
1ce5						ld de, $fbfe 
1ce5						ld a, d 
1ce5						ld hl, curframe 
1ce5						call hexout 
1ce5						ld a, e 
1ce5						ld hl, curframe+2 
1ce5						call hexout 
1ce5						ld hl, $fbfe 
1ce5						push hl 
1ce5						ld hl, $8f9f 
1ce5						push hl 
1ce5						exx 
1ce5					endif 
1ce5				endif 
1ce5			endm 
# End of macro STACKFRAME
1ce5				; first time into the parser so pass over the current scratch pad 
1ce5 21 23 f4			ld hl,os_cli_cmd 
1ce8				; tokenise the entered statement(s) in HL 
1ce8 cd 38 24			call forthparse 
1ceb			        ; exec forth statements in top of return stack 
1ceb cd 78 24			call forthexec 
1cee				;call forthexec_cleanup 
1cee			;	call parsenext 
1cee			 
1cee				STACKFRAMECHK ON $fbfe $8f9f 
1cee				if DEBUG_STACK_IMB 
1cee					if ON 
1cee						exx 
1cee						ld hl, $8f9f 
1cee						pop de   ; $8f9f 
1cee						call cmp16 
1cee						jr nz, .spnosame 
1cee						ld hl, $fbfe 
1cee						pop de   ; $fbfe 
1cee						call cmp16 
1cee						jr z, .spfrsame 
1cee						.spnosame: call showsperror 
1cee						.spfrsame: nop 
1cee						exx 
1cee					endif 
1cee				endif 
1cee			endm 
# End of macro STACKFRAMECHK
1cee				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1cee			 
1cee 3e 78			ld a, display_row_4 
1cf0 11 21 1d			ld de, endprog 
1cf3			 
1cf3 cd ca 0d			call update_display		 
1cf6			 
1cf6 cd a7 1f			call next_page_prompt 
1cf9			 
1cf9				; switch frame buffer to cli 
1cf9			 
1cf9 21 ec fc				ld hl, display_fb0 
1cfc 22 07 fb				ld (display_fb_active), hl 
1cff			 
1cff			 
1cff cd a7 0d		        call clear_display 
1d02 cd ca 0d			call update_display		 
1d05			 
1d05 21 23 f4			ld hl, os_cli_cmd 
1d08			 
1d08 3e 00			ld a, 0		 ; init cli input 
1d0a 77				ld (hl), a 
1d0b			 
1d0b				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1d0b			 
1d0b				; now on last line 
1d0b			 
1d0b				; TODO scroll screen up 
1d0b			 
1d0b				; TODO instead just clear screen and place at top of screen 
1d0b			 
1d0b			;	ld a, 0 
1d0b			;	ld (f_cursor_ptr),a 
1d0b			 
1d0b				;call clear_display 
1d0b				;call update_display 
1d0b			 
1d0b				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d0b 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d0d c3 b5 1c			jp cli 
1d10			 
1d10 .. 00		freeram: db "Free bytes: ",0 
1d1d ..			asc: db "1A2F" 
1d21 .. 00		endprog: db "End prog...",0 
1d2d			 
1d2d			testenter2:   
1d2d 21 2e f1			ld hl,scratch+50 
1d30 22 1f f4			ld (os_cur_ptr),hl 
1d33 c3 b5 1c			jp cli 
1d36			 
1d36			testenter:  
1d36			 
1d36 21 1d 1d			ld hl,asc 
1d39			;	ld a,(hl) 
1d39			;	call nibble2val 
1d39 cd 3a 12			call get_byte 
1d3c			 
1d3c			 
1d3c			;	ld a,(hl) 
1d3c			;	call atohex 
1d3c			 
1d3c			;	call fourehexhl 
1d3c 32 2e f1			ld (scratch+50),a 
1d3f			 
1d3f			 
1d3f			 
1d3f 21 1f 1d			ld hl,asc+2 
1d42			;	ld a, (hl) 
1d42			;	call nibble2val 
1d42 cd 3a 12			call get_byte 
1d45			 
1d45			;	call fourehexhl 
1d45 32 30 f1			ld (scratch+52),a 
1d48				 
1d48 21 2e f1			ld hl,scratch+50 
1d4b 22 1f f4			ld (os_cur_ptr),hl 
1d4e c3 b5 1c			jp cli 
1d51			 
1d51			enter:	 
1d51 3a 00 f1			ld a,(scratch+4) 
1d54 fe 00			cp 0 
1d56 28 0c			jr z, .entercont 
1d58				; no, not a null term line so has an address to work out.... 
1d58			 
1d58 21 fe f0			ld hl,scratch+2 
1d5b cd 9a 12			call get_word_hl 
1d5e			 
1d5e 22 1f f4			ld (os_cur_ptr),hl	 
1d61 c3 b5 1c			jp cli 
1d64			 
1d64			 
1d64			.entercont:  
1d64			 
1d64 21 fe f0			ld hl, scratch+2 
1d67 cd 3a 12			call get_byte 
1d6a			 
1d6a 2a 1f f4		   	ld hl,(os_cur_ptr) 
1d6d 77					ld (hl),a 
1d6e 23					inc hl 
1d6f 22 1f f4				ld (os_cur_ptr),hl 
1d72				 
1d72			; get byte  
1d72			 
1d72			 
1d72 c3 b5 1c			jp cli 
1d75			 
1d75			 
1d75			; basic monitor support 
1d75			 
1d75			monitor: 
1d75				;  
1d75 cd a7 0d			call clear_display 
1d78 3e 00			ld a, 0 
1d7a 11 c9 1d			ld de, .monprompt 
1d7d cd ba 0d			call str_at_display 
1d80 cd ca 0d			call update_display 
1d83			 
1d83				; get a monitor command 
1d83			 
1d83 0e 00			ld c, 0     ; entry at top left 
1d85 16 64			ld d, 100   ; max buffer size 
1d87 1e 0f			ld e, 15    ; input scroll area 
1d89 3e 00			ld a, 0     ; init string 
1d8b 21 fa f2			ld hl, os_input 
1d8e 77				ld (hl), a 
1d8f 23				inc hl 
1d90 77				ld (hl), a 
1d91 21 fa f2			ld hl, os_input 
1d94 3e 01			ld a, 1     ; init string 
1d96 cd 08 10			call input_str 
1d99			 
1d99 cd a7 0d		        call clear_display 
1d9c cd ca 0d			call update_display		 
1d9f			 
1d9f 3a fa f2			ld a, (os_input) 
1da2 cd 38 13			call toUpper 
1da5 fe 48		        cp 'H' 
1da7 ca 2e 1e		        jp z, .monhelp 
1daa fe 44			cp 'D'		; dump 
1dac ca 61 1e			jp z, .mondump	 
1daf fe 43			cp 'C'		; dump 
1db1 ca 7b 1e			jp z, .moncdump	 
1db4 fe 4d			cp 'M'		; dump 
1db6 ca cb 1d			jp z, .moneditstart 
1db9 fe 55			cp 'U'		; dump 
1dbb ca d7 1d			jp z, .monedit	 
1dbe fe 47			cp 'G'		; dump 
1dc0 ca 57 1e			jp z, .monjump 
1dc3 fe 51			cp 'Q'		; dump 
1dc5 c8				ret z	 
1dc6			 
1dc6			 
1dc6				; TODO "S" to access symbol by name and not need the address 
1dc6				; TODO "F" to find a string in memory 
1dc6			 
1dc6 c3 75 1d			jp monitor 
1dc9			 
1dc9 .. 00		.monprompt: db ">", 0 
1dcb			 
1dcb			.moneditstart: 
1dcb				; get starting address 
1dcb			 
1dcb 21 fc f2			ld hl,os_input+2 
1dce cd 9a 12			call get_word_hl 
1dd1			 
1dd1 22 1f f4			ld (os_cur_ptr),hl	 
1dd4			 
1dd4 c3 75 1d			jp monitor 
1dd7			 
1dd7			.monedit: 
1dd7				; get byte to load 
1dd7			 
1dd7 21 fc f2			ld hl,os_input+2 
1dda cd 3a 12			call get_byte 
1ddd			 
1ddd				; get address to update 
1ddd 2a 1f f4			ld hl, (os_cur_ptr) 
1de0			 
1de0				; update byte 
1de0			 
1de0 77				ld (hl), a 
1de1			 
1de1				; move to next address and save it 
1de1			 
1de1 23				inc hl 
1de2 22 1f f4			ld (os_cur_ptr),hl	 
1de5			 
1de5 c3 75 1d			jp monitor 
1de8			 
1de8			 
1de8 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1dfc .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1e18 .. 00		.monhelptext3:  db "G-Call address",0 
1e27 .. 00		.monhelptext4:  db "Q-Quit",0 
1e2e			        
1e2e			.monhelp: 
1e2e 3e 00			ld a, display_row_1 
1e30 11 e8 1d		        ld de, .monhelptext1 
1e33			 
1e33 cd ba 0d			call str_at_display 
1e36 3e 28			ld a, display_row_2 
1e38 11 fc 1d		        ld de, .monhelptext2 
1e3b					 
1e3b cd ba 0d			call str_at_display 
1e3e 3e 50			ld a, display_row_3 
1e40 11 18 1e		        ld de, .monhelptext3 
1e43					 
1e43 cd ba 0d			call str_at_display 
1e46 3e 78			ld a, display_row_4 
1e48 11 27 1e		        ld de, .monhelptext4 
1e4b cd ba 0d			call str_at_display 
1e4e			 
1e4e cd ca 0d			call update_display		 
1e51			 
1e51 cd a7 1f			call next_page_prompt 
1e54 c3 75 1d			jp monitor 
1e57			 
1e57			.monjump:    
1e57 21 fc f2			ld hl,os_input+2 
1e5a cd 9a 12			call get_word_hl 
1e5d			 
1e5d e9				jp (hl) 
1e5e c3 75 1d			jp monitor 
1e61			 
1e61			.mondump:    
1e61 21 fc f2			ld hl,os_input+2 
1e64 cd 9a 12			call get_word_hl 
1e67			 
1e67 22 1f f4			ld (os_cur_ptr),hl	 
1e6a cd af 1e			call dumpcont 
1e6d 3e 78			ld a, display_row_4 
1e6f 11 21 1d			ld de, endprog 
1e72			 
1e72 cd ca 0d			call update_display		 
1e75			 
1e75 cd a7 1f			call next_page_prompt 
1e78 c3 75 1d			jp monitor 
1e7b			.moncdump: 
1e7b cd af 1e			call dumpcont 
1e7e 3e 78			ld a, display_row_4 
1e80 11 21 1d			ld de, endprog 
1e83			 
1e83 cd ca 0d			call update_display		 
1e86			 
1e86 cd a7 1f			call next_page_prompt 
1e89 c3 75 1d			jp monitor 
1e8c			 
1e8c			 
1e8c			; TODO symbol access  
1e8c			 
1e8c			.symbols:     ;; A list of symbols that can be called up  
1e8c ec fc			dw display_fb0 
1e8e .. 00			db "fb0",0  
1e92 b5 f9		     	dw store_page 
1e94 .. 00			db "store_page",0 
1e9f			 
1e9f			 
1e9f			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1e9f			 
1e9f 3a fd f0			ld a,(scratch+1) 
1ea2 fe 00			cp 0 
1ea4 28 09			jr z, dumpcont 
1ea6			 
1ea6				; no, not a null term line so has an address to work out.... 
1ea6			 
1ea6 21 fe f0			ld hl,scratch+2 
1ea9 cd 9a 12			call get_word_hl 
1eac			 
1eac 22 1f f4			ld (os_cur_ptr),hl	 
1eaf			 
1eaf			 
1eaf			 
1eaf			dumpcont: 
1eaf			 
1eaf				; dump bytes at ptr 
1eaf			 
1eaf			 
1eaf 3e 00			ld a, display_row_1 
1eb1 2a 07 fb			ld hl, (display_fb_active) 
1eb4 cd db 0f			call addatohl 
1eb7 cd df 1e			call .dumpbyterow 
1eba			 
1eba 3e 28			ld a, display_row_2 
1ebc 2a 07 fb			ld hl, (display_fb_active) 
1ebf cd db 0f			call addatohl 
1ec2 cd df 1e			call .dumpbyterow 
1ec5			 
1ec5			 
1ec5 3e 50			ld a, display_row_3 
1ec7 2a 07 fb			ld hl, (display_fb_active) 
1eca cd db 0f			call addatohl 
1ecd cd df 1e			call .dumpbyterow 
1ed0			 
1ed0 3e 78			ld a, display_row_4 
1ed2 2a 07 fb			ld hl, (display_fb_active) 
1ed5 cd db 0f			call addatohl 
1ed8 cd df 1e			call .dumpbyterow 
1edb			 
1edb cd ca 0d			call update_display 
1ede			;		jp cli 
1ede c9				ret 
1edf			 
1edf			.dumpbyterow: 
1edf			 
1edf				;push af 
1edf			 
1edf e5				push hl 
1ee0			 
1ee0				; calc where to poke the ascii 
1ee0			if display_cols == 20 
1ee0				ld a, 16 
1ee0			else 
1ee0 3e 1f			ld a, 31 
1ee2			endif 
1ee2			 
1ee2 cd db 0f			call addatohl 
1ee5 22 01 f4			ld (os_word_scratch),hl  		; save pos for later 
1ee8			 
1ee8			 
1ee8			; display decoding address 
1ee8 2a 1f f4		   	ld hl,(os_cur_ptr) 
1eeb			 
1eeb 7c				ld a,h 
1eec e1				pop hl 
1eed e5				push hl 
1eee			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1eee cd e4 11			call hexout 
1ef1 2a 1f f4		   	ld hl,(os_cur_ptr) 
1ef4			 
1ef4 7d				ld a,l 
1ef5 e1				pop hl 
1ef6 23				inc hl 
1ef7 23				inc hl 
1ef8 e5				push hl 
1ef9			;	ld hl, os_word_scratch+2 
1ef9 cd e4 11			call hexout 
1efc e1				pop hl 
1efd 23				inc hl 
1efe 23				inc hl 
1eff				;ld hl, os_word_scratch+4 
1eff 3e 3a			ld a, ':' 
1f01 77				ld (hl),a 
1f02 23				inc hl 
1f03				;ld a, 0 
1f03				;ld (hl),a 
1f03				;ld de, os_word_scratch 
1f03				;pop af 
1f03				;push af 
1f03			;		ld a, display_row_2 
1f03			;		call str_at_display 
1f03			;		call update_display 
1f03			 
1f03			 
1f03			;pop af 
1f03			;	add 5 
1f03			 
1f03			if display_cols == 20 
1f03				ld b, 4 
1f03			else 
1f03 06 08			ld b, 8 
1f05			endif	 
1f05			 
1f05			.dumpbyte: 
1f05 c5				push bc 
1f06 e5				push hl 
1f07			 
1f07			 
1f07 2a 1f f4		   	ld hl,(os_cur_ptr) 
1f0a 7e					ld a,(hl) 
1f0b			 
1f0b					; poke the ascii to display 
1f0b 2a 01 f4				ld hl,(os_word_scratch) 
1f0e 77					ld (hl),a 
1f0f 23					inc hl 
1f10 22 01 f4				ld (os_word_scratch),hl 
1f13			 
1f13					 
1f13			 
1f13			 
1f13 e1					pop hl 
1f14 e5					push hl 
1f15			 
1f15 cd e4 11				call hexout 
1f18			 
1f18					 
1f18 2a 1f f4		   	ld hl,(os_cur_ptr) 
1f1b 23				inc hl 
1f1c 22 1f f4		   	ld (os_cur_ptr),hl 
1f1f			 
1f1f e1					pop hl 
1f20 23					inc hl 
1f21 23					inc hl 
1f22 23					inc hl 
1f23			 
1f23			 
1f23			 
1f23					;ld a,0 
1f23					;ld (os_word_scratch+2),a 
1f23					;pop af 
1f23					;push af 
1f23			 
1f23					;ld de, os_word_scratch 
1f23					;call str_at_display 
1f23			;		call update_display 
1f23			;		pop af 
1f23 c1					pop bc 
1f24 c6 03				add 3 
1f26 10 dd			djnz .dumpbyte 
1f28			 
1f28				 
1f28			 
1f28 c9				ret 
1f29			 
1f29			jump:	 
1f29			 
1f29 21 fe f0			ld hl,scratch+2 
1f2c cd 9a 12			call get_word_hl 
1f2f				;ld hl,(scratch+2) 
1f2f				;call fourehexhl 
1f2f			 
1f2f 22 1f f4			ld (os_cur_ptr),hl	 
1f32			 
1f32 e9				jp (hl) 
1f33			 
1f33			 
1f33			 
1f33			; TODO implement a basic monitor mode to start with 
1f33			 
1f33			 
1f33			 
1f33			 
1f33			 
1f33			 
1f33			 
1f33			 
1f33			 
1f33			; testing and demo code during development 
1f33			 
1f33			 
1f33 .. 00		str1: db "Enter some text...",0 
1f46 .. 00		clear: db "                    ",0 
1f5b			 
1f5b			demo: 
1f5b			 
1f5b			 
1f5b			 
1f5b			;	call update_display 
1f5b			 
1f5b				; init scratch input area for testing 
1f5b 21 fc f0			ld hl, scratch	 
1f5e 3e 00			ld a,0 
1f60 77				ld (hl),a 
1f61			 
1f61			 
1f61 3e 28		            LD   A, display_row_2 
1f63			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f63 11 33 1f		            LD   DE, str1 
1f66 cd ba 0d			call str_at_display 
1f69			 
1f69			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f69			cloop:	 
1f69 3e 50		            LD   A, display_row_3 
1f6b			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f6b 11 46 1f		            LD   DE, clear 
1f6e			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1f6e cd ba 0d				call str_at_display 
1f71 3e 78			ld a, display_row_4 
1f73 11 a3 1f			ld de, prompt 
1f76			 
1f76 cd ba 0d				call str_at_display 
1f79 cd ca 0d			call update_display 
1f7c			 
1f7c 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1f7e 16 0a			ld d, 10 
1f80 21 fc f0			ld hl, scratch	 
1f83 cd 08 10			call input_str 
1f86			 
1f86			;	call clear_display 
1f86			;'	call update_display 
1f86			 
1f86 3e 00		            LD   A, display_row_1 
1f88			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f88 11 46 1f		            LD   DE, clear 
1f8b cd ba 0d				call str_at_display 
1f8e			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f8e 3e 00		            LD   A, display_row_1 
1f90			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f90 11 fc f0		            LD   DE, scratch 
1f93			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f93 cd ba 0d				call str_at_display 
1f96 cd ca 0d			call update_display 
1f99			 
1f99 3e 00				ld a,0 
1f9b 21 fc f0			ld hl, scratch 
1f9e 77				ld (hl),a 
1f9f			 
1f9f 00				nop 
1fa0 c3 69 1f			jp cloop 
1fa3			 
1fa3			 
1fa3			 
1fa3			; OS Prompt 
1fa3			 
1fa3 .. 00		prompt: db ">",0 
1fa5 .. 00		endprg: db "?",0 
1fa7			 
1fa7			 
1fa7			; handy next page prompt 
1fa7			next_page_prompt: 
1fa7 e5				push hl 
1fa8 d5				push de 
1fa9 f5				push af 
1faa c5				push bc 
1fab			 
1fab 3e 9f			ld a,display_row_4 + display_cols - 1 
1fad 11 a5 1f		        ld de, endprg 
1fb0 cd ba 0d			call str_at_display 
1fb3 cd ca 0d			call update_display 
1fb6 cd b3 72			call cin_wait 
1fb9 c1				pop bc 
1fba f1				pop af 
1fbb d1				pop de 
1fbc e1				pop hl 
1fbd			 
1fbd			 
1fbd c9				ret 
1fbe			 
1fbe			 
1fbe			; forth parser 
1fbe			 
1fbe			; My forth kernel 
1fbe			include "forth_kernel.asm" 
1fbe			; 
1fbe			; kernel to the forth OS 
1fbe			 
1fbe			DS_TYPE_STR: equ 1     ; string type 
1fbe			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1fbe			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1fbe			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1fbe			 
1fbe			FORTH_PARSEV1: equ 0 
1fbe			FORTH_PARSEV2: equ 0 
1fbe			FORTH_PARSEV3: equ 0 
1fbe			FORTH_PARSEV4: equ 0 
1fbe			FORTH_PARSEV5: equ 1 
1fbe			 
1fbe			;if FORTH_PARSEV5 
1fbe			;	FORTH_END_BUFFER: equ 0 
1fbe			;else 
1fbe			FORTH_END_BUFFER: equ 127 
1fbe			;endif 
1fbe			 
1fbe			FORTH_TRUE: equ 1 
1fbe			FORTH_FALSE: equ 0 
1fbe			 
1fbe			if FORTH_PARSEV4 
1fbe			include "forth_stackops.asm" 
1fbe			endif 
1fbe			 
1fbe			if FORTH_PARSEV5 
1fbe			include "forth_stackopsv5.asm" 
1fbe			 
1fbe			; Stack operations for v5 parser on wards 
1fbe			; * DATA stack 
1fbe			; * LOOP stack 
1fbe			; * RETURN stack 
1fbe			 
1fbe			 
1fbe			 
1fbe			FORTH_CHK_DSP_UNDER: macro 
1fbe				push hl 
1fbe				push de 
1fbe				ld hl,(cli_data_sp) 
1fbe				ld de, cli_data_stack 
1fbe				call cmp16 
1fbe				jp c, fault_dsp_under 
1fbe				pop de 
1fbe				pop hl 
1fbe				endm 
1fbe			 
1fbe			 
1fbe			FORTH_CHK_RSP_UNDER: macro 
1fbe				push hl 
1fbe				push de 
1fbe				ld hl,(cli_ret_sp) 
1fbe				ld de, cli_ret_stack 
1fbe				call cmp16 
1fbe				jp c, fault_rsp_under 
1fbe				pop de 
1fbe				pop hl 
1fbe				endm 
1fbe			 
1fbe			FORTH_CHK_LOOP_UNDER: macro 
1fbe				push hl 
1fbe				push de 
1fbe				ld hl,(cli_loop_sp) 
1fbe				ld de, cli_loop_stack 
1fbe				call cmp16 
1fbe				jp c, fault_loop_under 
1fbe				pop de 
1fbe				pop hl 
1fbe				endm 
1fbe			 
1fbe			FORTH_ERR_TOS_NOTSTR: macro 
1fbe				; TOSO might need more for checks when used 
1fbe				push af 
1fbe				ld a,(hl) 
1fbe				cp DS_TYPE_STR 
1fbe				jp nz, type_faultn   
1fbe				pop af 
1fbe				endm 
1fbe			 
1fbe			FORTH_ERR_TOS_NOTNUM: macro 
1fbe				push af 
1fbe				ld a,(hl) 
1fbe				cp DS_TYPE_INUM 
1fbe				jp nz, type_faultn   
1fbe				pop af 
1fbe				endm 
1fbe			 
1fbe			 
1fbe			; increase data stack pointer and save hl to it 
1fbe				 
1fbe			FORTH_DSP_NEXT: macro 
1fbe				call macro_forth_dsp_next 
1fbe				endm 
1fbe			 
1fbe			 
1fbe			macro_forth_dsp_next: 
1fbe				if DEBUG_FORTH_STACK_GUARD 
1fbe cd 57 6b				call check_stacks 
1fc1				endif 
1fc1 e5				push hl 
1fc2 d5				push de 
1fc3 eb				ex de,hl 
1fc4 2a 29 f9			ld hl,(cli_data_sp) 
1fc7 23				inc hl 
1fc8 23				inc hl 
1fc9			 
1fc9			; PARSEV5 
1fc9 23				inc hl 
1fca 22 29 f9			ld (cli_data_sp),hl 
1fcd 73				ld (hl), e 
1fce 23				inc hl 
1fcf 72				ld (hl), d 
1fd0 d1				pop de 
1fd1 e1				pop hl 
1fd2				if DEBUG_FORTH_STACK_GUARD 
1fd2 cd 57 6b				call check_stacks 
1fd5				endif 
1fd5 c9				ret 
1fd6			 
1fd6			 
1fd6			; increase ret stack pointer and save hl to it 
1fd6				 
1fd6			FORTH_RSP_NEXT: macro 
1fd6				call macro_forth_rsp_next 
1fd6				endm 
1fd6			 
1fd6			macro_forth_rsp_next: 
1fd6				if DEBUG_FORTH_STACK_GUARD 
1fd6 cd 57 6b				call check_stacks 
1fd9				endif 
1fd9 e5				push hl 
1fda d5				push de 
1fdb eb				ex de,hl 
1fdc 2a 2d f9			ld hl,(cli_ret_sp) 
1fdf 23				inc hl 
1fe0 23				inc hl 
1fe1 22 2d f9			ld (cli_ret_sp),hl 
1fe4 73				ld (hl), e 
1fe5 23				inc hl 
1fe6 72				ld (hl), d 
1fe7 d1				pop de 
1fe8 e1				pop hl 
1fe9				if DEBUG_FORTH_STACK_GUARD 
1fe9 cd 57 6b				call check_stacks 
1fec				endif 
1fec c9				ret 
1fed			 
1fed			; get current ret stack pointer and save to hl  
1fed				 
1fed			FORTH_RSP_TOS: macro 
1fed				call macro_forth_rsp_tos 
1fed				endm 
1fed			 
1fed			macro_forth_rsp_tos: 
1fed				;push de 
1fed 2a 2d f9			ld hl,(cli_ret_sp) 
1ff0 cd 28 20			call loadhlptrtohl 
1ff3				;ld e, (hl) 
1ff3				;inc hl 
1ff3				;ld d, (hl) 
1ff3				;ex de, hl 
1ff3					if DEBUG_FORTH_WORDS 
1ff3			;			DMARK "RST" 
1ff3						CALLMONITOR 
1ff3 cd aa fd			call debug_vector  
1ff6				endm  
# End of macro CALLMONITOR
1ff6					endif 
1ff6				;pop de 
1ff6 c9				ret 
1ff7			 
1ff7			; pop ret stack pointer 
1ff7				 
1ff7			FORTH_RSP_POP: macro 
1ff7				call macro_forth_rsp_pop 
1ff7				endm 
1ff7			 
1ff7			 
1ff7			macro_forth_rsp_pop: 
1ff7				if DEBUG_FORTH_STACK_GUARD 
1ff7			;		DMARK "RPP" 
1ff7 cd 57 6b				call check_stacks 
1ffa					FORTH_CHK_RSP_UNDER 
1ffa e5				push hl 
1ffb d5				push de 
1ffc 2a 2d f9			ld hl,(cli_ret_sp) 
1fff 11 e7 f8			ld de, cli_ret_stack 
2002 cd f9 0f			call cmp16 
2005 da 6e 6c			jp c, fault_rsp_under 
2008 d1				pop de 
2009 e1				pop hl 
200a				endm 
# End of macro FORTH_CHK_RSP_UNDER
200a				endif 
200a e5				push hl 
200b 2a 2d f9			ld hl,(cli_ret_sp) 
200e			 
200e			 
200e				if FORTH_ENABLE_FREE 
200e			 
200e					; get pointer 
200e			 
200e					push de 
200e					push hl 
200e			 
200e					ld e, (hl) 
200e					inc hl 
200e					ld d, (hl) 
200e			 
200e					ex de, hl 
200e					call free 
200e			 
200e					pop hl 
200e					pop de 
200e			 
200e			 
200e				endif 
200e			 
200e			 
200e 2b				dec hl 
200f 2b				dec hl 
2010 22 2d f9			ld (cli_ret_sp), hl 
2013				; do stack underflow checks 
2013 e1				pop hl 
2014				if DEBUG_FORTH_STACK_GUARD 
2014 cd 57 6b				call check_stacks 
2017					FORTH_CHK_RSP_UNDER 
2017 e5				push hl 
2018 d5				push de 
2019 2a 2d f9			ld hl,(cli_ret_sp) 
201c 11 e7 f8			ld de, cli_ret_stack 
201f cd f9 0f			call cmp16 
2022 da 6e 6c			jp c, fault_rsp_under 
2025 d1				pop de 
2026 e1				pop hl 
2027				endm 
# End of macro FORTH_CHK_RSP_UNDER
2027				endif 
2027 c9				ret 
2028			 
2028			 
2028			 
2028			; routine to load word pointed to by hl into hl 
2028			 
2028			loadhlptrtohl: 
2028			 
2028 d5				push de 
2029 5e				ld e, (hl) 
202a 23				inc hl 
202b 56				ld d, (hl) 
202c eb				ex de, hl 
202d d1				pop de 
202e			 
202e c9				ret 
202f			 
202f			 
202f			 
202f			 
202f			 
202f			; push a number held in HL onto the data stack 
202f			; entry point for pushing a value when already in hl used in function above 
202f			 
202f			forth_push_numhl: 
202f			 
202f e5				push hl    ; save value to push 
2030			 
2030			if DEBUG_FORTH_PUSH 
2030				; see if disabled 
2030			 
2030			 
2030 f5				push af 
2031 3a aa fd			ld a,(debug_vector) 
2034 fe c9			cp $c9   ; ret 
2036			;	ld a, (os_view_disable) 
2036			;	cp '*' 
2036 28 34			jr z, .pskip2 
2038 e5				push hl 
2039 e5			push hl 
203a cd a7 0d			call clear_display 
203d e1			pop hl 
203e 7c				ld a,h 
203f 21 01 f4			ld hl, os_word_scratch 
2042 cd e4 11			call hexout 
2045 e1				pop hl 
2046 7d				ld a,l 
2047 21 03 f4			ld hl, os_word_scratch+2 
204a cd e4 11			call hexout 
204d			 
204d 21 05 f4			ld hl, os_word_scratch+4 
2050 3e 00			ld a,0 
2052 77				ld (hl),a 
2053 11 01 f4			ld de,os_word_scratch 
2056 3e 28				ld a, display_row_2 
2058 cd ba 0d				call str_at_display 
205b 11 65 5d			ld de, .push_num 
205e 3e 00			ld a, display_row_1 
2060			 
2060 cd ba 0d				call str_at_display 
2063			 
2063			 
2063 cd ca 0d			call update_display 
2066 cd ea 0c			call delay1s 
2069 cd ea 0c			call delay1s 
206c			.pskip2:  
206c			 
206c f1				pop af 
206d			endif	 
206d			 
206d			 
206d				FORTH_DSP_NEXT 
206d cd be 1f			call macro_forth_dsp_next 
2070				endm 
# End of macro FORTH_DSP_NEXT
2070			 
2070 2a 29 f9			ld hl, (cli_data_sp) 
2073			 
2073				; save item type 
2073 3e 02			ld a,  DS_TYPE_INUM 
2075 77				ld (hl), a 
2076 23				inc hl 
2077			 
2077				; get word off stack 
2077 d1				pop de 
2078 7b				ld a,e 
2079 77				ld (hl), a 
207a 23				inc hl 
207b 7a				ld a,d 
207c 77				ld (hl), a 
207d			 
207d			if DEBUG_FORTH_PUSH 
207d 2b				dec hl 
207e 2b				dec hl 
207f 2b				dec hl 
2080						DMARK "PH5" 
2080 f5				push af  
2081 3a 95 20			ld a, (.dmark)  
2084 32 a6 fd			ld (debug_mark),a  
2087 3a 96 20			ld a, (.dmark+1)  
208a 32 a7 fd			ld (debug_mark+1),a  
208d 3a 97 20			ld a, (.dmark+2)  
2090 32 a8 fd			ld (debug_mark+2),a  
2093 18 03			jr .pastdmark  
2095 ..			.dmark: db "PH5"  
2098 f1			.pastdmark: pop af  
2099			endm  
# End of macro DMARK
2099				CALLMONITOR 
2099 cd aa fd			call debug_vector  
209c				endm  
# End of macro CALLMONITOR
209c			endif	 
209c			 
209c c9				ret 
209d			 
209d			 
209d			; Push a string to stack pointed to by hl 
209d			 
209d			forth_push_str: 
209d			 
209d			if DEBUG_FORTH_PUSH 
209d						DMARK "PSQ" 
209d f5				push af  
209e 3a b2 20			ld a, (.dmark)  
20a1 32 a6 fd			ld (debug_mark),a  
20a4 3a b3 20			ld a, (.dmark+1)  
20a7 32 a7 fd			ld (debug_mark+1),a  
20aa 3a b4 20			ld a, (.dmark+2)  
20ad 32 a8 fd			ld (debug_mark+2),a  
20b0 18 03			jr .pastdmark  
20b2 ..			.dmark: db "PSQ"  
20b5 f1			.pastdmark: pop af  
20b6			endm  
# End of macro DMARK
20b6				CALLMONITOR 
20b6 cd aa fd			call debug_vector  
20b9				endm  
# End of macro CALLMONITOR
20b9			endif	 
20b9			 
20b9			 
20b9			    
20b9 e5				push hl 
20ba e5				push hl 
20bb			 
20bb			;	ld a, 0   ; find end of string 
20bb cd 41 13			call strlenz 
20be			if DEBUG_FORTH_PUSH 
20be						DMARK "PQ2" 
20be f5				push af  
20bf 3a d3 20			ld a, (.dmark)  
20c2 32 a6 fd			ld (debug_mark),a  
20c5 3a d4 20			ld a, (.dmark+1)  
20c8 32 a7 fd			ld (debug_mark+1),a  
20cb 3a d5 20			ld a, (.dmark+2)  
20ce 32 a8 fd			ld (debug_mark+2),a  
20d1 18 03			jr .pastdmark  
20d3 ..			.dmark: db "PQ2"  
20d6 f1			.pastdmark: pop af  
20d7			endm  
# End of macro DMARK
20d7				CALLMONITOR 
20d7 cd aa fd			call debug_vector  
20da				endm  
# End of macro CALLMONITOR
20da			endif	 
20da eb				ex de, hl 
20db e1				pop hl   ; get ptr to start of string 
20dc			if DEBUG_FORTH_PUSH 
20dc						DMARK "PQ3" 
20dc f5				push af  
20dd 3a f1 20			ld a, (.dmark)  
20e0 32 a6 fd			ld (debug_mark),a  
20e3 3a f2 20			ld a, (.dmark+1)  
20e6 32 a7 fd			ld (debug_mark+1),a  
20e9 3a f3 20			ld a, (.dmark+2)  
20ec 32 a8 fd			ld (debug_mark+2),a  
20ef 18 03			jr .pastdmark  
20f1 ..			.dmark: db "PQ3"  
20f4 f1			.pastdmark: pop af  
20f5			endm  
# End of macro DMARK
20f5				CALLMONITOR 
20f5 cd aa fd			call debug_vector  
20f8				endm  
# End of macro CALLMONITOR
20f8			endif	 
20f8 19				add hl,de 
20f9			if DEBUG_FORTH_PUSH 
20f9						DMARK "PQE" 
20f9 f5				push af  
20fa 3a 0e 21			ld a, (.dmark)  
20fd 32 a6 fd			ld (debug_mark),a  
2100 3a 0f 21			ld a, (.dmark+1)  
2103 32 a7 fd			ld (debug_mark+1),a  
2106 3a 10 21			ld a, (.dmark+2)  
2109 32 a8 fd			ld (debug_mark+2),a  
210c 18 03			jr .pastdmark  
210e ..			.dmark: db "PQE"  
2111 f1			.pastdmark: pop af  
2112			endm  
# End of macro DMARK
2112				CALLMONITOR 
2112 cd aa fd			call debug_vector  
2115				endm  
# End of macro CALLMONITOR
2115			endif	 
2115			 
2115 2b				dec hl    ; see if there is an optional trailing double quote 
2116 7e				ld a,(hl) 
2117 fe 22			cp '"' 
2119 20 03			jr nz, .strnoq 
211b 3e 00			ld a, 0      ; get rid of double quote 
211d 77				ld (hl), a 
211e 23			.strnoq: inc hl 
211f			 
211f 3e 00			ld a, 0 
2121 77				ld (hl), a     ; add null term and get rid of trailing double quote 
2122			 
2122 13				inc de ; add one for the type string 
2123 13				inc de ; add one for null term??? 
2124			 
2124				; tos is get string pointer again 
2124				; de contains space to allocate 
2124				 
2124 d5				push de 
2125			 
2125 eb				ex de, hl 
2126			 
2126				;push af 
2126			 
2126			if DEBUG_FORTH_PUSH 
2126						DMARK "PHm" 
2126 f5				push af  
2127 3a 3b 21			ld a, (.dmark)  
212a 32 a6 fd			ld (debug_mark),a  
212d 3a 3c 21			ld a, (.dmark+1)  
2130 32 a7 fd			ld (debug_mark+1),a  
2133 3a 3d 21			ld a, (.dmark+2)  
2136 32 a8 fd			ld (debug_mark+2),a  
2139 18 03			jr .pastdmark  
213b ..			.dmark: db "PHm"  
213e f1			.pastdmark: pop af  
213f			endm  
# End of macro DMARK
213f				CALLMONITOR 
213f cd aa fd			call debug_vector  
2142				endm  
# End of macro CALLMONITOR
2142			endif	 
2142 cd b6 13			call malloc	; on ret hl now contains allocated memory 
2145				if DEBUG_FORTH_MALLOC_GUARD 
2145 cc bd 5d				call z,malloc_error 
2148				endif 
2148			 
2148				 
2148 c1				pop bc    ; get length 
2149 d1				pop de   ;  get string start    
214a			 
214a				; hl has destination from malloc 
214a			 
214a eb				ex de, hl    ; prep for ldir 
214b			 
214b d5				push de   ; save malloc area for DSP later 
214c				;push hl   ; save malloc area for DSP later 
214c			 
214c			if DEBUG_FORTH_PUSH 
214c						DMARK "PHc" 
214c f5				push af  
214d 3a 61 21			ld a, (.dmark)  
2150 32 a6 fd			ld (debug_mark),a  
2153 3a 62 21			ld a, (.dmark+1)  
2156 32 a7 fd			ld (debug_mark+1),a  
2159 3a 63 21			ld a, (.dmark+2)  
215c 32 a8 fd			ld (debug_mark+2),a  
215f 18 03			jr .pastdmark  
2161 ..			.dmark: db "PHc"  
2164 f1			.pastdmark: pop af  
2165			endm  
# End of macro DMARK
2165				CALLMONITOR 
2165 cd aa fd			call debug_vector  
2168				endm  
# End of macro CALLMONITOR
2168			endif	 
2168			 
2168			 
2168 ed b0			ldir 
216a			 
216a			 
216a				; push malloc to data stack     macro?????  
216a			 
216a				FORTH_DSP_NEXT 
216a cd be 1f			call macro_forth_dsp_next 
216d				endm 
# End of macro FORTH_DSP_NEXT
216d			 
216d				; save value and type 
216d			 
216d 2a 29 f9			ld hl, (cli_data_sp) 
2170			 
2170				; save item type 
2170 3e 01			ld a,  DS_TYPE_STR 
2172 77				ld (hl), a 
2173 23				inc hl 
2174			 
2174				; get malloc word off stack 
2174 d1				pop de 
2175 73				ld (hl), e 
2176 23				inc hl 
2177 72				ld (hl), d 
2178			 
2178			 
2178			 
2178			if DEBUG_FORTH_PUSH 
2178 2a 29 f9			ld hl, (cli_data_sp) 
217b						DMARK "PHS" 
217b f5				push af  
217c 3a 90 21			ld a, (.dmark)  
217f 32 a6 fd			ld (debug_mark),a  
2182 3a 91 21			ld a, (.dmark+1)  
2185 32 a7 fd			ld (debug_mark+1),a  
2188 3a 92 21			ld a, (.dmark+2)  
218b 32 a8 fd			ld (debug_mark+2),a  
218e 18 03			jr .pastdmark  
2190 ..			.dmark: db "PHS"  
2193 f1			.pastdmark: pop af  
2194			endm  
# End of macro DMARK
2194				CALLMONITOR 
2194 cd aa fd			call debug_vector  
2197				endm  
# End of macro CALLMONITOR
2197			;	ex de,hl 
2197			endif	 
2197				; in case of spaces, skip the ptr past the copied string 
2197				;pop af 
2197				;ld (cli_origptr),hl 
2197			 
2197 c9				ret 
2198			 
2198			 
2198			 
2198			; TODO ascii push input onto stack given hl to start of input 
2198			 
2198			; identify type 
2198			; if starts with a " then a string 
2198			; otherwise it is a number 
2198			;  
2198			; if a string 
2198			;     scan for ending " to get length of string to malloc for + 1 
2198			;     malloc 
2198			;     put pointer to string on stack first byte flags as string 
2198			; 
2198			; else a number 
2198			;    look for number format identifier 
2198			;    $xx hex 
2198			;    %xxxxx bin 
2198			;    xxxxx decimal 
2198			;    convert number to 16bit word.  
2198			;    malloc word + 1 with flag to identiy as num 
2198			;    put pointer to number on stack 
2198			;   
2198			;  
2198			  
2198			forth_apush: 
2198				; kernel push 
2198			 
2198			if DEBUG_FORTH_PUSH 
2198						DMARK "PSH" 
2198 f5				push af  
2199 3a ad 21			ld a, (.dmark)  
219c 32 a6 fd			ld (debug_mark),a  
219f 3a ae 21			ld a, (.dmark+1)  
21a2 32 a7 fd			ld (debug_mark+1),a  
21a5 3a af 21			ld a, (.dmark+2)  
21a8 32 a8 fd			ld (debug_mark+2),a  
21ab 18 03			jr .pastdmark  
21ad ..			.dmark: db "PSH"  
21b0 f1			.pastdmark: pop af  
21b1			endm  
# End of macro DMARK
21b1				CALLMONITOR 
21b1 cd aa fd			call debug_vector  
21b4				endm  
# End of macro CALLMONITOR
21b4			endif	 
21b4				; identify input type 
21b4			 
21b4 7e				ld a,(hl) 
21b5			 
21b5 fe 23			cp '#' 
21b7 ca f1 21			jp z, .fapdec 
21ba			 
21ba			 
21ba fe 22			cp '"' 
21bc 28 0a			jr z, .fapstr 
21be fe 24			cp '$' 
21c0 ca e8 21			jp z, .faphex 
21c3 fe 25			cp '%' 
21c5 ca d0 21			jp z, .fapbin 
21c8			;	cp 'b' 
21c8			;	jp z, .fabin 
21c8				; else decimal 
21c8			 
21c8				; TODO do decimal conversion 
21c8				; decimal is stored as a 16bit word 
21c8			 
21c8				; by default everything is a string if type is not detected 
21c8			.fapstr: ; 
21c8 fe 22			cp '"' 
21ca 20 01			jr nz, .strnoqu 
21cc 23				inc hl 
21cd			.strnoqu: 
21cd c3 9d 20			jp forth_push_str 
21d0			 
21d0			 
21d0			 
21d0			.fapbin:    ; push a binary string.  
21d0 11 00 00			ld de, 0   ; hold a 16bit value 
21d3			 
21d3 23			.fapbinshift:	inc hl  
21d4 7e				ld a,(hl) 
21d5 fe 00			cp 0     ; done scanning  
21d7 28 0b			jr z, .fapbdone  	; got it in HL so push  
21d9			 
21d9				; left shift de 
21d9 eb				ex de, hl	 
21da 29				add hl, hl 
21db			 
21db				; is 1 
21db fe 31			cp '1' 
21dd 20 02			jr nz, .binzero 
21df cb 4d			bit 1, l 
21e1			.binzero: 
21e1 eb				ex de, hl	 ; save current de 
21e2 18 ef			jr .fapbinshift 
21e4			 
21e4			.fapbdone: 
21e4 eb				ex de, hl 
21e5 c3 2f 20			jp forth_push_numhl 
21e8			 
21e8			 
21e8			.faphex:   ; hex is always stored as a 16bit word 
21e8				; skip number prefix 
21e8 23				inc hl 
21e9				; turn ascii into number 
21e9 cd 9a 12			call get_word_hl	; ret 16bit word in hl 
21ec			 
21ec c3 2f 20			jp forth_push_numhl 
21ef			 
21ef 00				 nop 
21f0			 
21f0			.fabin:   ; TODO bin conversion 
21f0			 
21f0			 
21f0 c9				ret 
21f1			.fapdec:	 
21f1				; string to dec conversion 
21f1 23				inc hl 
21f2 eb				ex de, hl 
21f3 cd d8 12			call string_to_uint16 
21f6 c3 2f 20			jp forth_push_numhl 
21f9 c9				ret 
21fa				 
21fa			;atoui_16: 
21fa			 
21fa			; get either a string ptr or a 16bit word from the data stack 
21fa			 
21fa			FORTH_DSP: macro 
21fa				call macro_forth_dsp 
21fa				endm 
21fa			 
21fa			macro_forth_dsp: 
21fa				; data stack pointer points to current word on tos 
21fa			 
21fa 2a 29 f9			ld hl,(cli_data_sp) 
21fd			 
21fd				if DEBUG_FORTH_PUSH 
21fd						DMARK "DSP" 
21fd f5				push af  
21fe 3a 12 22			ld a, (.dmark)  
2201 32 a6 fd			ld (debug_mark),a  
2204 3a 13 22			ld a, (.dmark+1)  
2207 32 a7 fd			ld (debug_mark+1),a  
220a 3a 14 22			ld a, (.dmark+2)  
220d 32 a8 fd			ld (debug_mark+2),a  
2210 18 03			jr .pastdmark  
2212 ..			.dmark: db "DSP"  
2215 f1			.pastdmark: pop af  
2216			endm  
# End of macro DMARK
2216			 
2216 cd f0 5d				call display_data_sp 
2219				;call break_point_state 
2219				;rst 030h 
2219				CALLMONITOR 
2219 cd aa fd			call debug_vector  
221c				endm  
# End of macro CALLMONITOR
221c				endif 
221c			 
221c c9				ret 
221d			 
221d			; return hl to start of value on stack 
221d			 
221d			FORTH_DSP_VALUE: macro 
221d				call macro_forth_dsp_value 
221d				endm 
221d			 
221d			macro_forth_dsp_value: 
221d			 
221d				FORTH_DSP 
221d cd fa 21			call macro_forth_dsp 
2220				endm 
# End of macro FORTH_DSP
2220			 
2220 d5				push de 
2221			 
2221 23				inc hl ; skip type 
2222			 
2222 5e				ld e, (hl) 
2223 23				inc hl 
2224 56				ld d, (hl) 
2225 eb				ex de,hl  
2226			 
2226 d1				pop de 
2227			 
2227 c9				ret 
2228			 
2228			; return hl to start of value to second item on stack 
2228			 
2228			FORTH_DSP_VALUEM1: macro 
2228				call macro_forth_dsp_value_m1 
2228				endm 
2228			 
2228			macro_forth_dsp_value_m1: 
2228			 
2228				FORTH_DSP 
2228 cd fa 21			call macro_forth_dsp 
222b				endm 
# End of macro FORTH_DSP
222b			 
222b 2b				dec hl 
222c 2b				dec hl 
222d			;	dec hl 
222d			 
222d d5				push de 
222e			 
222e 5e				ld e, (hl) 
222f 23				inc hl 
2230 56				ld d, (hl) 
2231 eb				ex de,hl  
2232			 
2232 d1				pop de 
2233			 
2233 c9				ret 
2234			 
2234				 
2234			 
2234			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
2234			 
2234			FORTH_DSP_POP: macro 
2234				call macro_forth_dsp_pop 
2234				endm 
2234			 
2234			 
2234			; get the tos data type 
2234			 
2234			FORTH_DSP_TYPE:   macro 
2234			 
2234				;FORTH_DSP_VALUE 
2234				FORTH_DSP 
2234				 
2234				; hl points to value 
2234				; check type 
2234			 
2234				ld a,(hl) 
2234			 
2234				endm 
2234			 
2234			; load the tos value into hl 
2234			 
2234			 
2234			FORTH_DSP_VALUEHL:  macro 
2234				call macro_dsp_valuehl 
2234				endm 
2234			 
2234			 
2234			 
2234			macro_dsp_valuehl: 
2234				FORTH_DSP_VALUE 
2234 cd 1d 22			call macro_forth_dsp_value 
2237				endm 
# End of macro FORTH_DSP_VALUE
2237			 
2237				;FORTH_ERR_TOS_NOTNUM 
2237			 
2237				;inc hl   ; skip type id 
2237			 
2237			;	push de 
2237			; 
2237			;	ld e, (hl) 
2237			;	inc hl 
2237			;	ld d, (hl) 
2237			;	ex de,hl  
2237			 
2237			;	pop de 
2237			 
2237				if DEBUG_FORTH_PUSH 
2237						DMARK "DVL" 
2237 f5				push af  
2238 3a 4c 22			ld a, (.dmark)  
223b 32 a6 fd			ld (debug_mark),a  
223e 3a 4d 22			ld a, (.dmark+1)  
2241 32 a7 fd			ld (debug_mark+1),a  
2244 3a 4e 22			ld a, (.dmark+2)  
2247 32 a8 fd			ld (debug_mark+2),a  
224a 18 03			jr .pastdmark  
224c ..			.dmark: db "DVL"  
224f f1			.pastdmark: pop af  
2250			endm  
# End of macro DMARK
2250				CALLMONITOR 
2250 cd aa fd			call debug_vector  
2253				endm  
# End of macro CALLMONITOR
2253				endif 
2253 c9				ret 
2254			 
2254			forth_apushstrhl:      
2254				; push of string requires use of cli_origptr 
2254				; bodge use 
2254			 
2254				; get current cli_origptr, save, update with temp pointer  
2254 ed 5b 79 f9		ld de, (cli_origptr) 
2258 22 79 f9			ld (cli_origptr), hl 
225b d5				push de 
225c cd 98 21			call forth_apush 
225f d1				pop de 
2260 ed 53 79 f9		ld (cli_origptr), de 
2264 c9			        ret	 
2265			 
2265			 
2265			; increase loop stack pointer and save hl to it 
2265				 
2265			FORTH_LOOP_NEXT: macro 
2265				call macro_forth_loop_next 
2265				;nop 
2265				endm 
2265			 
2265			macro_forth_loop_next: 
2265				if DEBUG_FORTH_STACK_GUARD 
2265 cd 57 6b				call check_stacks 
2268				endif 
2268 e5				push hl 
2269 d5				push de 
226a eb				ex de,hl 
226b 2a 2b f9			ld hl,(cli_loop_sp) 
226e 23				inc hl 
226f 23				inc hl 
2270					if DEBUG_FORTH_WORDS 
2270						DMARK "LNX" 
2270 f5				push af  
2271 3a 85 22			ld a, (.dmark)  
2274 32 a6 fd			ld (debug_mark),a  
2277 3a 86 22			ld a, (.dmark+1)  
227a 32 a7 fd			ld (debug_mark+1),a  
227d 3a 87 22			ld a, (.dmark+2)  
2280 32 a8 fd			ld (debug_mark+2),a  
2283 18 03			jr .pastdmark  
2285 ..			.dmark: db "LNX"  
2288 f1			.pastdmark: pop af  
2289			endm  
# End of macro DMARK
2289						CALLMONITOR 
2289 cd aa fd			call debug_vector  
228c				endm  
# End of macro CALLMONITOR
228c					endif 
228c 22 2b f9			ld (cli_loop_sp),hl 
228f 73				ld (hl), e 
2290 23				inc hl 
2291 72				ld (hl), d 
2292 d1				pop de    ; been reversed so save a swap on restore 
2293 e1				pop hl 
2294				if DEBUG_FORTH_STACK_GUARD 
2294 cd 57 6b				call check_stacks 
2297				endif 
2297 c9				ret 
2298			 
2298			; get current ret stack pointer and save to hl  
2298				 
2298			FORTH_LOOP_TOS: macro 
2298				call macro_forth_loop_tos 
2298				endm 
2298			 
2298			macro_forth_loop_tos: 
2298 d5				push de 
2299 2a 2b f9			ld hl,(cli_loop_sp) 
229c 5e				ld e, (hl) 
229d 23				inc hl 
229e 56				ld d, (hl) 
229f eb				ex de, hl 
22a0 d1				pop de 
22a1 c9				ret 
22a2			 
22a2			; pop loop stack pointer 
22a2				 
22a2			FORTH_LOOP_POP: macro 
22a2				call macro_forth_loop_pop 
22a2				endm 
22a2			 
22a2			 
22a2			macro_forth_loop_pop: 
22a2				if DEBUG_FORTH_STACK_GUARD 
22a2					DMARK "LPP" 
22a2 f5				push af  
22a3 3a b7 22			ld a, (.dmark)  
22a6 32 a6 fd			ld (debug_mark),a  
22a9 3a b8 22			ld a, (.dmark+1)  
22ac 32 a7 fd			ld (debug_mark+1),a  
22af 3a b9 22			ld a, (.dmark+2)  
22b2 32 a8 fd			ld (debug_mark+2),a  
22b5 18 03			jr .pastdmark  
22b7 ..			.dmark: db "LPP"  
22ba f1			.pastdmark: pop af  
22bb			endm  
# End of macro DMARK
22bb cd 57 6b				call check_stacks 
22be					FORTH_CHK_LOOP_UNDER 
22be e5				push hl 
22bf d5				push de 
22c0 2a 2b f9			ld hl,(cli_loop_sp) 
22c3 11 65 f8			ld de, cli_loop_stack 
22c6 cd f9 0f			call cmp16 
22c9 da 74 6c			jp c, fault_loop_under 
22cc d1				pop de 
22cd e1				pop hl 
22ce				endm 
# End of macro FORTH_CHK_LOOP_UNDER
22ce				endif 
22ce e5				push hl 
22cf 2a 2b f9			ld hl,(cli_loop_sp) 
22d2 2b				dec hl 
22d3 2b				dec hl 
22d4 22 2b f9			ld (cli_loop_sp), hl 
22d7				; TODO do stack underflow checks 
22d7 e1				pop hl 
22d8				if DEBUG_FORTH_STACK_GUARD 
22d8 cd 57 6b				call check_stacks 
22db					FORTH_CHK_LOOP_UNDER 
22db e5				push hl 
22dc d5				push de 
22dd 2a 2b f9			ld hl,(cli_loop_sp) 
22e0 11 65 f8			ld de, cli_loop_stack 
22e3 cd f9 0f			call cmp16 
22e6 da 74 6c			jp c, fault_loop_under 
22e9 d1				pop de 
22ea e1				pop hl 
22eb				endm 
# End of macro FORTH_CHK_LOOP_UNDER
22eb				endif 
22eb c9				ret 
22ec			 
22ec			macro_forth_dsp_pop: 
22ec			 
22ec e5				push hl 
22ed			 
22ed				; release malloc data 
22ed			 
22ed				if DEBUG_FORTH_STACK_GUARD 
22ed cd 57 6b				call check_stacks 
22f0					FORTH_CHK_DSP_UNDER 
22f0 e5				push hl 
22f1 d5				push de 
22f2 2a 29 f9			ld hl,(cli_data_sp) 
22f5 11 63 f6			ld de, cli_data_stack 
22f8 cd f9 0f			call cmp16 
22fb da 68 6c			jp c, fault_dsp_under 
22fe d1				pop de 
22ff e1				pop hl 
2300				endm 
# End of macro FORTH_CHK_DSP_UNDER
2300				endif 
2300				;ld hl,(cli_data_sp) 
2300			if DEBUG_FORTH_DOT 
2300				DMARK "DPP" 
2300 f5				push af  
2301 3a 15 23			ld a, (.dmark)  
2304 32 a6 fd			ld (debug_mark),a  
2307 3a 16 23			ld a, (.dmark+1)  
230a 32 a7 fd			ld (debug_mark+1),a  
230d 3a 17 23			ld a, (.dmark+2)  
2310 32 a8 fd			ld (debug_mark+2),a  
2313 18 03			jr .pastdmark  
2315 ..			.dmark: db "DPP"  
2318 f1			.pastdmark: pop af  
2319			endm  
# End of macro DMARK
2319				CALLMONITOR 
2319 cd aa fd			call debug_vector  
231c				endm  
# End of macro CALLMONITOR
231c			endif	 
231c			 
231c			 
231c			if FORTH_ENABLE_DSPPOPFREE 
231c			 
231c				FORTH_DSP 
231c cd fa 21			call macro_forth_dsp 
231f				endm 
# End of macro FORTH_DSP
231f			 
231f 7e				ld a, (hl) 
2320 fe 01			cp DS_TYPE_STR 
2322 20 23			jr nz, .skippopfree 
2324			 
2324				FORTH_DSP_VALUEHL 
2324 cd 34 22			call macro_dsp_valuehl 
2327				endm 
# End of macro FORTH_DSP_VALUEHL
2327 00				nop 
2328			if DEBUG_FORTH_DOT 
2328				DMARK "DPf" 
2328 f5				push af  
2329 3a 3d 23			ld a, (.dmark)  
232c 32 a6 fd			ld (debug_mark),a  
232f 3a 3e 23			ld a, (.dmark+1)  
2332 32 a7 fd			ld (debug_mark+1),a  
2335 3a 3f 23			ld a, (.dmark+2)  
2338 32 a8 fd			ld (debug_mark+2),a  
233b 18 03			jr .pastdmark  
233d ..			.dmark: db "DPf"  
2340 f1			.pastdmark: pop af  
2341			endm  
# End of macro DMARK
2341				CALLMONITOR 
2341 cd aa fd			call debug_vector  
2344				endm  
# End of macro CALLMONITOR
2344			endif	 
2344 cd 80 14			call free 
2347			.skippopfree: 
2347				 
2347			 
2347			endif 
2347			 
2347			if DEBUG_FORTH_DOT_KEY 
2347				DMARK "DP2" 
2347				CALLMONITOR 
2347			endif	 
2347			 
2347				; move pointer down 
2347			 
2347 2a 29 f9			ld hl,(cli_data_sp) 
234a 2b				dec hl 
234b 2b				dec hl 
234c			; PARSEV5 
234c 2b				dec hl 
234d 22 29 f9			ld (cli_data_sp), hl 
2350			 
2350				if DEBUG_FORTH_STACK_GUARD 
2350 cd 57 6b				call check_stacks 
2353					FORTH_CHK_DSP_UNDER 
2353 e5				push hl 
2354 d5				push de 
2355 2a 29 f9			ld hl,(cli_data_sp) 
2358 11 63 f6			ld de, cli_data_stack 
235b cd f9 0f			call cmp16 
235e da 68 6c			jp c, fault_dsp_under 
2361 d1				pop de 
2362 e1				pop hl 
2363				endm 
# End of macro FORTH_CHK_DSP_UNDER
2363				endif 
2363			 
2363 e1				pop hl 
2364			 
2364 c9				ret 
2365			 
2365			getwordathl: 
2365				; hl points to an address 
2365				; load hl with the word at that address 
2365			 
2365 d5				push de 
2366			 
2366 5e				ld e, (hl) 
2367 23				inc hl 
2368 56				ld d, (hl) 
2369 eb				ex de, hl 
236a			 
236a d1				pop de 
236b c9				ret 
236c			 
236c			 
236c			 
236c			 
236c			 
236c			; eof 
236c			 
# End of file forth_stackopsv5.asm
236c			endif 
236c			 
236c			loadwordinhl:	 
236c			 
236c d5				push de 
236d			 
236d 5e				ld e, (hl) 
236e 23				inc hl 
236f 56				ld d, (hl) 
2370 eb				ex de,hl  
2371			 
2371 d1				pop de 
2372			 
2372 c9				ret 
2373			 
2373			user_word_eol:  
2373				; hl contains the pointer to where to create a linked list item from the end 
2373				; of the user dict to continue on at the system word dict 
2373				 
2373				; poke the stub of the word list linked list to repoint to rom words 
2373			 
2373				; stub format 
2373				; db   word id 
2373				; dw    link to next word 
2373			        ; db char length of token 
2373				; db string + 0 term 
2373				; db exec code....  
2373			 
2373 3e 00			ld a, WORD_SYS_ROOT     ; root word 
2375 77				ld (hl), a		; word id 
2376 23				inc hl 
2377			 
2377 11 42 25			ld de, sysdict 
237a 73				ld (hl), e		; next word link ie system dict 
237b 23				inc hl 
237c 72				ld (hl), d		; next word link ie system dict 
237d 23				inc hl	 
237e			 
237e			;	ld (hl), sysdict		; next word link ie system dict 
237e			;	inc hl 
237e			;	inc hl 
237e			 
237e			;	inc hl 
237e			;	inc hl 
237e			 
237e 3e 02			ld a, 2			; word length is 0 
2380 77				ld (hl), a	 
2381 23				inc hl 
2382			 
2382 3e 7e			ld a, '~'			; word length is 0 
2384 77				ld (hl), a	 
2385 23				inc hl 
2386 3e 00			ld a, 0			; save empty word 
2388 77				ld (hl), a 
2389			 
2389 c9				ret 
238a			 
238a				 
238a			 
238a			forthexec_cleanup: 
238a				FORTH_RSP_POP 
238a cd f7 1f			call macro_forth_rsp_pop 
238d				endm 
# End of macro FORTH_RSP_POP
238d c9				ret 
238e			 
238e			forth_call_hl: 
238e				; taking hl 
238e e5				push hl 
238f c9				ret 
2390			 
2390			; this is called to reset Forth system but keep existing uwords etc 
2390			 
2390			forth_warmstart: 
2390				; setup stack over/under flow checks 
2390				if DEBUG_FORTH_STACK_GUARD 
2390 cd 3d 6b				call chk_stk_init 
2393				endif 
2393			 
2393				; init stack pointers  - * these stacks go upwards *  
2393 21 e7 f8			ld hl, cli_ret_stack 
2396 22 2d f9			ld (cli_ret_sp), hl	 
2399				; set bottom of stack 
2399 3e 00			ld a,0 
239b 77				ld (hl),a 
239c 23				inc hl 
239d 77				ld (hl),a 
239e			 
239e 21 63 f6			ld hl, cli_data_stack 
23a1 22 29 f9			ld (cli_data_sp), hl	 
23a4				; set bottom of stack 
23a4 3e 00			ld a,0 
23a6 77				ld (hl),a 
23a7 23				inc hl 
23a8 77				ld (hl),a 
23a9			 
23a9 21 65 f8			ld hl, cli_loop_stack 
23ac 22 2b f9			ld (cli_loop_sp), hl	 
23af				; set bottom of stack 
23af 3e 00			ld a,0 
23b1 77				ld (hl),a 
23b2 23				inc hl 
23b3 77				ld (hl),a 
23b4			 
23b4				; init extent of current open file 
23b4			 
23b4 3e 00			ld a, 0 
23b6 32 a5 f9			ld (store_openext), a 
23b9			 
23b9 c9				ret 
23ba			 
23ba			 
23ba			 
23ba			; Cold Start - this is called to setup the whole Forth system 
23ba			 
23ba			forth_init: 
23ba			 
23ba				; setup stack over/under flow checks 
23ba			 
23ba			;	if DEBUG_FORTH_STACK_GUARD 
23ba			;		call chk_stk_init 
23ba			;	endif 
23ba			 
23ba				; enable auto display updates (slow.....) 
23ba			 
23ba 3e 01			ld a, 1 
23bc 32 77 f9			ld (cli_autodisplay), a 
23bf			 
23bf				; if storage is in use disable long reads for now 
23bf 3e 00			ld a, 0 
23c1 32 b0 f9			ld (store_longread), a 
23c4			 
23c4			 
23c4				; show start up screen 
23c4			 
23c4 cd a7 0d			call clear_display 
23c7			 
23c7 3e 00			ld a,0 
23c9 32 99 f9			ld (f_cursor_ptr), a 
23cc			 
23cc				; set start of word list in start of ram - for use when creating user words 
23cc			 
23cc 21 00 80			ld hl, baseram 
23cf 22 f9 f3			ld (os_last_new_uword), hl 
23d2 cd 73 23			call user_word_eol 
23d5				 
23d5			;		call display_data_sp 
23d5			;		call next_page_prompt 
23d5			 
23d5			 
23d5			 
23d5			 
23d5 c9				ret 
23d6			 
23d6 .. 00		.bootforth: db " Forth Kernel Init ",0 
23ea			 
23ea			; TODO push to stack 
23ea			 
23ea			;  
23ea			 
23ea			if FORTH_PARSEV2 
23ea			 
23ea			 
23ea				include "forth_parserv2.asm" 
23ea			 
23ea			endif 
23ea			 
23ea			 
23ea			; parse cli version 1 
23ea			 
23ea			if FORTH_PARSEV1 
23ea			 
23ea			 
23ea			 
23ea			      include "forth_parserv1.asm" 
23ea			endif 
23ea				 
23ea			if FORTH_PARSEV3 
23ea			 
23ea			 
23ea			 
23ea			      include "forth_parserv3.asm" 
23ea				include "forth_wordsv3.asm" 
23ea			endif 
23ea			 
23ea			if FORTH_PARSEV4 
23ea			 
23ea			 
23ea			 
23ea			      include "forth_parserv4.asm" 
23ea				include "forth_wordsv4.asm" 
23ea			endif 
23ea			 
23ea			if FORTH_PARSEV5 
23ea			 
23ea			 
23ea			 
23ea			      include "forth_parserv5.asm" 
23ea			 
23ea			 
23ea			; A better parser without using malloc and string copies all over the place.  
23ea			; Exec in situ should be faster 
23ea			 
23ea			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
23ea			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
23ea			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
23ea			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
23ea			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
23ea			WORD_SYS_END: equ 0   ; Opcode for all user words 
23ea			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
23ea			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
23ea			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
23ea			 
23ea			; Core word preamble macro 
23ea			 
23ea			CWHEAD:   macro nxtword opcode lit len opflags 
23ea				db WORD_SYS_CORE+opcode             
23ea				; internal op code number 
23ea				dw nxtword            
23ea				; link to next dict word block 
23ea				db len + 1 
23ea				; literal length of dict word inc zero term 
23ea				db lit,0              
23ea				; literal dict word 
23ea			        ; TODO db opflags        
23ea				endm 
23ea			 
23ea			 
23ea			NEXTW: macro  
23ea				jp macro_next 
23ea				endm 
23ea			 
23ea			macro_next: 
23ea			if DEBUG_FORTH_PARSE_KEY 
23ea				DMARK "NXT" 
23ea				CALLMONITOR 
23ea			endif	 
23ea			;	inc hl  ; skip token null term  
23ea ed 4b 7b f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
23ee ed 5b 79 f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
23f2 2a fd f3			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
23f5			if DEBUG_FORTH_PARSE_KEY 
23f5				DMARK "}AA" 
23f5				CALLMONITOR 
23f5			endif	 
23f5 c3 f8 24			jp execnext 
23f8				;jp exec1 
23f8			       
23f8			 
23f8			 
23f8			; Another go at the parser to compile  
23f8			 
23f8			 
23f8			; TODO rework parser to change all of the string words to byte tokens 
23f8			; TODO do a search for  
23f8			 
23f8			; TODO first run normal parser to zero term sections 
23f8			; TODO for each word do a token look up to get the op code 
23f8			; TODO need some means to flag to the exec that this is a byte code form    
23f8			 
23f8			 
23f8			forthcompile: 
23f8			 
23f8			; 
23f8			; line parse: 
23f8			;       parse raw input buffer 
23f8			;       tokenise the words 
23f8			;       malloc new copy (for looping etc) 
23f8			;       copy to malloc + current pc in line to start of string and add line term 
23f8			;       save on new rsp 
23f8			; 
23f8			 
23f8			; hl to point to the line to tokenise 
23f8			 
23f8			;	push hl 
23f8 22 fd f3			ld (os_tok_ptr), hl  ; save ptr to string 
23fb			 
23fb			;	ld a,0		; string term on input 
23fb			;	call strlent 
23fb			 
23fb			;	ld (os_tok_len), hl	 ; save string length 
23fb			 
23fb			;if DEBUG_FORTH_TOK 
23fb			;	ex de,hl		 
23fb			;endif 
23fb			 
23fb			;	pop hl 		; get back string pointer 
23fb			 
23fb			if DEBUG_FORTH_TOK 
23fb						DMARK "TOc" 
23fb				CALLMONITOR 
23fb			endif 
23fb 7e			.cptoken2:    ld a,(hl) 
23fc 23				inc hl 
23fd fe 7f			cp FORTH_END_BUFFER 
23ff 28 29			jr z, .cptokendone2 
2401 fe 00			cp 0 
2403 28 25			jr z, .cptokendone2 
2405 fe 22			cp '"' 
2407 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2409 fe 20			cp ' ' 
240b 20 ee			jr nz,  .cptoken2 
240d			 
240d			; TODO consume comments held between ( and ) 
240d			 
240d				; we have a space so change to zero term for dict match later 
240d 2b				dec hl 
240e 3e 00			ld a,0 
2410 77				ld (hl), a 
2411 23				inc hl 
2412 18 e7			jr .cptoken2 
2414				 
2414			 
2414			.cptokenstr2: 
2414				; skip all white space until either eol (because forgot to term) or end double quote 
2414			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2414				;inc hl ; skip current double quote 
2414 7e				ld a,(hl) 
2415 23				inc hl 
2416 fe 22			cp '"' 
2418 28 e1			jr z, .cptoken2 
241a fe 7f			cp FORTH_END_BUFFER 
241c 28 0c			jr z, .cptokendone2 
241e fe 00			cp 0 
2420 28 08			jr z, .cptokendone2 
2422 fe 20			cp ' ' 
2424 28 02			jr z, .cptmp2 
2426 18 ec			jr .cptokenstr2 
2428			 
2428			.cptmp2:	; we have a space so change to zero term for dict match later 
2428				;dec hl 
2428				;ld a,"-"	; TODO remove this when working 
2428				;ld (hl), a 
2428				;inc hl 
2428 18 ea			jr .cptokenstr2 
242a			 
242a			.cptokendone2: 
242a				;inc hl 
242a 3e 7f			ld a, FORTH_END_BUFFER 
242c 77				ld (hl),a 
242d 23				inc hl 
242e 3e 21			ld a, '!' 
2430 77				ld (hl),a 
2431			 
2431 2a fd f3			ld hl,(os_tok_ptr) 
2434			         
2434			if DEBUG_FORTH_TOK 
2434						DMARK "Tc1" 
2434				CALLMONITOR 
2434			endif 
2434			 
2434				; push exec string to top of return stack 
2434				FORTH_RSP_NEXT 
2434 cd d6 1f			call macro_forth_rsp_next 
2437				endm 
# End of macro FORTH_RSP_NEXT
2437 c9				ret 
2438			 
2438			; Another go at the parser need to simplify the process 
2438			 
2438			forthparse: 
2438			 
2438			; 
2438			; line parse: 
2438			;       parse raw input buffer 
2438			;       tokenise the words 
2438			;       malloc new copy (for looping etc) 
2438			;       copy to malloc + current pc in line to start of string and add line term 
2438			;       save on new rsp 
2438			; 
2438			 
2438			; hl to point to the line to tokenise 
2438			 
2438			;	push hl 
2438 22 fd f3			ld (os_tok_ptr), hl  ; save ptr to string 
243b			 
243b			;	ld a,0		; string term on input 
243b			;	call strlent 
243b			 
243b			;	ld (os_tok_len), hl	 ; save string length 
243b			 
243b			;if DEBUG_FORTH_TOK 
243b			;	ex de,hl		 
243b			;endif 
243b			 
243b			;	pop hl 		; get back string pointer 
243b			 
243b			if DEBUG_FORTH_TOK 
243b						DMARK "TOK" 
243b				CALLMONITOR 
243b			endif 
243b 7e			.ptoken2:    ld a,(hl) 
243c 23				inc hl 
243d fe 7f			cp FORTH_END_BUFFER 
243f 28 29			jr z, .ptokendone2 
2441 fe 00			cp 0 
2443 28 25			jr z, .ptokendone2 
2445 fe 22			cp '"' 
2447 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2449 fe 20			cp ' ' 
244b 20 ee			jr nz,  .ptoken2 
244d			 
244d			; TODO consume comments held between ( and ) 
244d			 
244d				; we have a space so change to zero term for dict match later 
244d 2b				dec hl 
244e 3e 00			ld a,0 
2450 77				ld (hl), a 
2451 23				inc hl 
2452 18 e7			jr .ptoken2 
2454				 
2454			 
2454			.ptokenstr2: 
2454				; skip all white space until either eol (because forgot to term) or end double quote 
2454			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2454				;inc hl ; skip current double quote 
2454 7e				ld a,(hl) 
2455 23				inc hl 
2456 fe 22			cp '"' 
2458 28 e1			jr z, .ptoken2 
245a fe 7f			cp FORTH_END_BUFFER 
245c 28 0c			jr z, .ptokendone2 
245e fe 00			cp 0 
2460 28 08			jr z, .ptokendone2 
2462 fe 20			cp ' ' 
2464 28 02			jr z, .ptmp2 
2466 18 ec			jr .ptokenstr2 
2468			 
2468			.ptmp2:	; we have a space so change to zero term for dict match later 
2468				;dec hl 
2468				;ld a,"-"	; TODO remove this when working 
2468				;ld (hl), a 
2468				;inc hl 
2468 18 ea			jr .ptokenstr2 
246a			 
246a			.ptokendone2: 
246a				;inc hl 
246a 3e 7f			ld a, FORTH_END_BUFFER 
246c 77				ld (hl),a 
246d 23				inc hl 
246e 3e 21			ld a, '!' 
2470 77				ld (hl),a 
2471			 
2471 2a fd f3			ld hl,(os_tok_ptr) 
2474			         
2474			if DEBUG_FORTH_TOK 
2474						DMARK "TK1" 
2474				CALLMONITOR 
2474			endif 
2474			 
2474				; push exec string to top of return stack 
2474				FORTH_RSP_NEXT 
2474 cd d6 1f			call macro_forth_rsp_next 
2477				endm 
# End of macro FORTH_RSP_NEXT
2477 c9				ret 
2478			 
2478			; 
2478			;	; malloc size + buffer pointer + if is loop flag 
2478			;	ld hl,(os_tok_len) 		 ; get string length 
2478			; 
2478			;	ld a,l 
2478			; 
2478			;	cp 0			; we dont want to use a null string 
2478			;	ret z 
2478			; 
2478			;;	add 3    ; prefix malloc with buffer for current word ptr 
2478			; 
2478			;	add 5     ; TODO when certain not over writing memory remove 
2478			; 
2478			;		 
2478			; 
2478			;if DEBUG_FORTH_TOK 
2478			;			DMARK "TKE" 
2478			;	CALLMONITOR 
2478			;endif 
2478			; 
2478			;	ld l,a 
2478			;	ld h,0 
2478			;;	push hl   ; save required space for the copy later 
2478			;	call malloc 
2478			;if DEBUG_FORTH_TOK 
2478			;			DMARK "TKM" 
2478			;	CALLMONITOR 
2478			;endif 
2478			;	if DEBUG_FORTH_MALLOC_GUARD 
2478			;		push af 
2478			;		call ishlzero 
2478			;;		ld a, l 
2478			;;		add h 
2478			;;		cp 0 
2478			;		pop af 
2478			;		 
2478			;		call z,malloc_error 
2478			;	endif 
2478			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2478			; 
2478			; 
2478			;if DEBUG_FORTH_TOK 
2478			;			DMARK "TKR" 
2478			;	CALLMONITOR 
2478			;endif 
2478			; 
2478			;	FORTH_RSP_NEXT 
2478			; 
2478			;	;inc hl	 ; go past current buffer pointer 
2478			;	;inc hl 
2478			;	;inc hl   ; and past if loop flag 
2478			;		; TODO Need to set flag  
2478			; 
2478			;	 
2478			;	 
2478			;	ex de,hl	; malloc is dest 
2478			;	ld hl, (os_tok_len) 
2478			;;	pop bc 
2478			;	ld c, l                
2478			;	ld b,0 
2478			;	ld hl, (os_tok_ptr) 
2478			; 
2478			;if DEBUG_FORTH_TOK 
2478			;			DMARK "TKT" 
2478			;	CALLMONITOR 
2478			;endif 
2478			; 
2478			;	; do str cpy 
2478			; 
2478			;	ldir      ; copy byte in hl to de 
2478			; 
2478			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2478			; 
2478			;if DEBUG_FORTH_TOK 
2478			; 
2478			;			DMARK "TKY" 
2478			;	CALLMONITOR 
2478			;endif 
2478			;	;ld a,0 
2478			;	;ld a,FORTH_END_BUFFER 
2478			;	ex de, hl 
2478			;	;dec hl			 ; go back over the space delim at the end of word 
2478			;	;ld (hl),a 
2478			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2478			;	ld a,FORTH_END_BUFFER 
2478			;	ld (hl),a 
2478			;	inc hl 
2478			;	ld a,FORTH_END_BUFFER 
2478			;	ld (hl),a 
2478			; 
2478			;	; init the malloc area data 
2478			;	; set pc for in current area 
2478			;	;ld hl, (os_tok_malloc) 
2478			;	;inc hl 
2478			;	;inc hl 
2478			;	;inc hl 
2478			;	;ex de,hl 
2478			;	;ld hl, (os_tok_malloc) 
2478			;	;ld (hl),e 
2478			;	;inc hl 
2478			;	;ld (hl),d 
2478			; 
2478			; 
2478			;	ld hl,(os_tok_malloc) 
2478			;if DEBUG_FORTH_PARSE_KEY 
2478			;			DMARK "TKU" 
2478			;	CALLMONITOR 
2478			;endif 
2478			; 
2478			;	ret 
2478			 
2478			forthexec: 
2478			 
2478			; line exec: 
2478			; forth parser 
2478			 
2478			; 
2478			;       get current exec line on rsp 
2478			 
2478				FORTH_RSP_TOS 
2478 cd ed 1f			call macro_forth_rsp_tos 
247b				endm 
# End of macro FORTH_RSP_TOS
247b			 
247b			;       restore current pc - hl points to malloc of data 
247b			 
247b				;ld e, (hl) 
247b				;inc hl 
247b				;ld d, (hl) 
247b				;ex de,hl 
247b			 
247b			 
247b			exec1: 
247b 22 fd f3			ld (os_tok_ptr), hl 
247e			 
247e				; copy our PC to working vars  
247e 22 7b f9			ld (cli_ptr), hl 
2481 22 79 f9			ld (cli_origptr), hl 
2484			 
2484 7e				ld a,(hl) 
2485 fe 7f			cp FORTH_END_BUFFER 
2487 c8				ret z 
2488			 
2488				; skip any nulls 
2488			 
2488 fe 00			cp 0 
248a 20 03			jr nz, .execword 
248c 23				inc hl 
248d 18 ec			jr exec1 
248f			 
248f			 
248f			.execword: 
248f			 
248f			 
248f			 
248f			if DEBUG_FORTH_PARSE_KEY 
248f						DMARK "KYQ" 
248f				CALLMONITOR 
248f			endif 
248f			;       while at start of word: 
248f			; get start of dict (in user area first) 
248f			 
248f 21 00 80		ld hl, baseram 
2492			;ld hl, sysdict 
2492 22 7d f9		ld (cli_nextword),hl 
2495			;           match word at pc 
2495			;           exec word 
2495			;           or push to dsp 
2495			;           forward to next token 
2495			;           if line term pop rsp and exit 
2495			;        
2495			 
2495			if DEBUG_FORTH_PARSE_KEY 
2495						DMARK "KYq" 
2495				CALLMONITOR 
2495			endif 
2495			 
2495			; 
2495			; word comp 
2495			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2495			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2495			;    move to start of word  
2495			;    compare word to cli_token 
2495			 
2495			.execpnword:	; HL at start of a word in the dictionary to check 
2495			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
2495			;	ld (cli_ptr), hl 
2495			 
2495 2a 7d f9			ld hl,(cli_nextword) 
2498			 
2498 cd 3b 25			call forth_tok_next 
249b			; tok next start here 
249b			;	; TODO skip compiled symbol for now 
249b			;	inc hl 
249b			; 
249b			;	; save pointer to next word 
249b			; 
249b			;	; hl now points to the address of the next word pointer  
249b			;	ld e, (hl) 
249b			;	inc hl 
249b			;	ld d, (hl) 
249b			;	inc l 
249b			; 
249b			;	ex de,hl 
249b			;if DEBUG_FORTH_PARSE_NEXTWORD 
249b			;	push bc 
249b			;	ld bc, (cli_nextword) 
249b			;			DMARK "NXW" 
249b			;	CALLMONITOR 
249b			;	pop bc 
249b			;endif 
249b			; tok next end here 
249b 22 7d f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
249e eb				ex de, hl 
249f			 
249f			 
249f				; save the pointer of the current token - 1 to check against 
249f				 
249f 22 81 f9			ld (cli_token), hl   
24a2				; TODO maybe remove below save if no debug 
24a2				; save token string ptr for any debug later 
24a2 23				inc hl  
24a3 22 83 f9			ld (cli_origtoken), hl 
24a6 2b				dec hl 
24a7				; save pointer to the start of the next dictionay word 
24a7 7e				ld a,(hl)   ; get string length 
24a8 47				ld b,a 
24a9			.execpnwordinc:  
24a9 23				inc hl 
24aa 10 fd			djnz .execpnwordinc 
24ac 22 7f f9			ld (cli_execword), hl      ; save start of this words code 
24af			 
24af				; now check the word token against the string being parsed 
24af			 
24af 2a 81 f9			ld hl,(cli_token) 
24b2 23				inc hl     ; skip string length (use zero term instead to end) 
24b3 22 81 f9			ld (cli_token), hl 
24b6			 
24b6			if DEBUG_FORTH_PARSE_KEY 
24b6						DMARK "KY2" 
24b6			endif 
24b6			if DEBUG_FORTH_PARSE_EXEC 
24b6				; see if disabled 
24b6			 
24b6			;	ld a, (os_view_disable) 
24b6			;	cp '*' 
24b6				ld a, (debug_vector) 
24b6				cp $c9   ; RET  
24b6				jr z, .skip 
24b6			 
24b6				push hl 
24b6				push hl 
24b6				call clear_display 
24b6				ld de, .compword 
24b6				ld a, display_row_1 
24b6				call str_at_display 
24b6				pop de 
24b6				ld a, display_row_2 
24b6				call str_at_display 
24b6				ld hl,(cli_ptr) 
24b6				ld a,(hl) 
24b6			        ld hl, os_word_scratch 
24b6				ld (hl),a 
24b6				ld a,0 
24b6				inc hl 
24b6				ld (hl),a 	 
24b6				ld de, os_word_scratch 
24b6				ld a, display_row_2+10 
24b6				call str_at_display 
24b6				call update_display 
24b6				ld a, 100 
24b6				call aDelayInMS 
24b6				if DEBUG_FORTH_PARSE_EXEC_SLOW 
24b6				call delay250ms 
24b6				endif 
24b6				pop hl 
24b6			.skip:  
24b6			endif	 
24b6			.execpnchar:    ; compare char between token and string to parse 
24b6			 
24b6			if DEBUG_FORTH_PARSE_KEY 
24b6						DMARK "Ky3" 
24b6			endif 
24b6			if DEBUG_FORTH_PARSE_EXEC 
24b6				; see if disabled 
24b6			 
24b6			;	ld a, (os_view_disable) 
24b6			;	cp '*' 
24b6				ld a, (debug_vector) 
24b6				cp $C9  ; RET 
24b6				jr z, .skip2 
24b6			 
24b6			;	call clear_display 
24b6			ld hl,(cli_token) 
24b6			ld a,(hl) 
24b6			ld (os_word_scratch),a 
24b6				ld hl,(cli_ptr) 
24b6			ld a,(hl) 
24b6				ld (os_word_scratch+1),a 
24b6				ld a,0 
24b6				ld (os_word_scratch+2),a 
24b6				ld de,os_word_scratch 
24b6				ld a,display_row_4 
24b6				call str_at_display 
24b6				call update_display 
24b6			.skip2:  
24b6			endif 
24b6 2a 81 f9			ld hl,(cli_token) 
24b9 7e				ld a, (hl)	 ; char in word token 
24ba 23				inc hl 		; move to next char 
24bb 22 81 f9			ld (cli_token), hl ; and save it 
24be 47				ld b,a 
24bf			 
24bf 2a 7b f9			ld hl,(cli_ptr) ;	get the char from the string to parse 
24c2 7e				ld a,(hl) 
24c3 23				inc hl 
24c4 22 7b f9			ld (cli_ptr), hl		; move to next char 
24c7 cd 38 13			call toUpper 		; make sure the input string matches case 
24ca			 
24ca			if DEBUG_FORTH_PARSE 
24ca			endif 
24ca			 
24ca				; input stream end of token is a space so get rid of it 
24ca			 
24ca			;	cp ' ' 
24ca			;	jr nz, .pnskipspace 
24ca			; 
24ca			;	ld a, 0		; make same term as word token term 
24ca			; 
24ca			;.pnskipspace: 
24ca			 
24ca			if DEBUG_FORTH_PARSE_KEY 
24ca						DMARK "KY7" 
24ca			endif 
24ca b8				cp b 
24cb c2 e1 24			jp nz, .execpnskipword	 ; no match so move to next word 
24ce				 
24ce			;    if same 
24ce			;       scan for string terms 0 for token and 32 for input 
24ce			 
24ce				 
24ce			if DEBUG_FORTH_PARSE_KEY 
24ce						DMARK "KY8" 
24ce			endif 
24ce			 
24ce 80				add b			 
24cf fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
24d1							; TODO need to make sure last word in zero term string is accounted for 
24d1 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
24d3			 
24d3			 
24d3				; at end of both strings so both are exact match 
24d3			 
24d3			;       skip ptr for next word 
24d3			 
24d3 2a 7b f9			ld hl,(cli_ptr) 	; at input string term 
24d6 23				inc hl			 ; at next char 
24d7 22 7b f9			ld (cli_ptr), hl     ; save for next round of the parser 
24da 22 79 f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
24dd				 
24dd				 
24dd			if DEBUG_FORTH_PARSE_KEY 
24dd						DMARK "KY3" 
24dd			endif 
24dd			 
24dd			 
24dd			 
24dd			;       exec code block 
24dd			if DEBUG_FORTH_JP 
24dd				call clear_display 
24dd				call update_display 
24dd				call delay1s 
24dd				ld hl, (cli_execword)     ; save for next check if no match on this word 
24dd				ld a,h 
24dd				ld hl, os_word_scratch 
24dd				call hexout 
24dd				ld hl, (cli_execword)     ; save for next check if no match on this word 
24dd				ld a,l 
24dd				ld hl, os_word_scratch+2 
24dd				call hexout 
24dd				ld hl, os_word_scratch+4 
24dd				ld a,0 
24dd				ld (hl),a 
24dd				ld de,os_word_scratch 
24dd				call str_at_display 
24dd					ld a, display_row_2 
24dd					call str_at_display 
24dd				ld de, (cli_origtoken) 
24dd				ld a, display_row_1+10 
24dd					call str_at_display 
24dd			 
24dd				ld a,display_row_1 
24dd				ld de, .foundword 
24dd				ld a, display_row_3 
24dd				call str_at_display 
24dd				call update_display 
24dd				call delay1s 
24dd				call delay1s 
24dd				call delay1s 
24dd			endif 
24dd			 
24dd			if DEBUG_FORTH_PARSE_KEY 
24dd						DMARK "KYj" 
24dd			endif 
24dd				; TODO save the word pointer in this exec 
24dd			 
24dd 2a 7f f9			ld hl,(cli_execword) 
24e0 e9				jp (hl) 
24e1			 
24e1			 
24e1			;    if not same 
24e1			;	scan for zero term 
24e1			;	get ptr for next word 
24e1			;	goto word comp 
24e1			 
24e1			.execpnskipword:	; get pointer to next word 
24e1 2a 7d f9			ld hl,(cli_nextword) 
24e4			 
24e4 7e				ld a,(hl) 
24e5 fe 00			cp WORD_SYS_END 
24e7			;	cp 0 
24e7 28 09			jr z, .execendofdict			 ; at end of words 
24e9			 
24e9			if DEBUG_FORTH_PARSE_KEY 
24e9						DMARK "KY4" 
24e9			endif 
24e9			if DEBUG_FORTH_PARSE_EXEC 
24e9			 
24e9				; see if disabled 
24e9			 
24e9			;	ld a, (os_view_disable) 
24e9			;	cp '*' 
24e9				ld a,(debug_vector) 
24e9				cp $c9   ; RET 
24e9				jr z, .noskip 
24e9			 
24e9			 
24e9				ld de, .nowordfound 
24e9				ld a, display_row_3 
24e9				call str_at_display 
24e9				call update_display 
24e9				ld a, 100 
24e9				call aDelayInMS 
24e9				 
24e9				if DEBUG_FORTH_PARSE_EXEC_SLOW 
24e9					call delay250ms 
24e9				endif 
24e9			.noskip:  
24e9			 
24e9			endif	 
24e9			 
24e9 2a 79 f9			ld hl,(cli_origptr) 
24ec 22 7b f9			ld (cli_ptr),hl 
24ef			 
24ef			if DEBUG_FORTH_PARSE_KEY 
24ef						DMARK "KY5" 
24ef			endif 
24ef c3 95 24			jp .execpnword			; else go to next word 
24f2			 
24f2			.execendofdict:  
24f2			 
24f2			if DEBUG_FORTH_PARSE_KEY 
24f2						DMARK "KYe" 
24f2			endif 
24f2			if DEBUG_FORTH_PARSE_EXEC 
24f2				; see if disabled 
24f2			 
24f2			;	ld a, (os_view_disable) 
24f2			;	cp '*' 
24f2				ld a,(debug_vector) 
24f2				cp $c9   ; ret 
24f2				jr z, .ispskip 
24f2			 
24f2				call clear_display 
24f2				call update_display 
24f2				call delay1s 
24f2				ld de, (cli_origptr) 
24f2				ld a, display_row_1 
24f2				call str_at_display 
24f2				 
24f2				ld de, .enddict 
24f2				ld a, display_row_3 
24f2				call str_at_display 
24f2				call update_display 
24f2				ld a, 100 
24f2				call aDelayInMS 
24f2				if DEBUG_FORTH_PARSE_EXEC_SLOW 
24f2				call delay1s 
24f2				call delay1s 
24f2				call delay1s 
24f2				endif 
24f2			.ispskip:  
24f2				 
24f2			endif	 
24f2			 
24f2			 
24f2			 
24f2				; if the word is not a keyword then must be a literal so push it to stack 
24f2			 
24f2			; push token to stack to end of word 
24f2			 
24f2				STACKFRAME ON $1efe $2f9f 
24f2				if DEBUG_STACK_IMB 
24f2					if ON 
24f2						exx 
24f2						ld de, $1efe 
24f2						ld a, d 
24f2						ld hl, curframe 
24f2						call hexout 
24f2						ld a, e 
24f2						ld hl, curframe+2 
24f2						call hexout 
24f2						ld hl, $1efe 
24f2						push hl 
24f2						ld hl, $2f9f 
24f2						push hl 
24f2						exx 
24f2					endif 
24f2				endif 
24f2			endm 
# End of macro STACKFRAME
24f2			 
24f2 2a fd f3		ld hl,(os_tok_ptr) 
24f5 cd 98 21		call forth_apush 
24f8			 
24f8				STACKFRAMECHK ON $1efe $2f9f 
24f8				if DEBUG_STACK_IMB 
24f8					if ON 
24f8						exx 
24f8						ld hl, $2f9f 
24f8						pop de   ; $2f9f 
24f8						call cmp16 
24f8						jr nz, .spnosame 
24f8						ld hl, $1efe 
24f8						pop de   ; $1efe 
24f8						call cmp16 
24f8						jr z, .spfrsame 
24f8						.spnosame: call showsperror 
24f8						.spfrsame: nop 
24f8						exx 
24f8					endif 
24f8				endif 
24f8			endm 
# End of macro STACKFRAMECHK
24f8			 
24f8			execnext: 
24f8			 
24f8			if DEBUG_FORTH_PARSE_KEY 
24f8						DMARK "KY>" 
24f8			endif 
24f8			; move past token to next word 
24f8			 
24f8 2a fd f3		ld hl, (os_tok_ptr) 
24fb 3e 00		ld a, 0 
24fd 01 ff 00		ld bc, 255     ; input buffer size 
2500 ed b1		cpir 
2502			 
2502			if DEBUG_FORTH_PARSE_KEY 
2502						DMARK "KY!" 
2502				CALLMONITOR 
2502			endif	 
2502			; TODO this might place hl on the null, so will need to forward on??? 
2502			;inc hl   ; see if this gets onto the next item 
2502			 
2502			 
2502			; TODO pass a pointer to the buffer to push 
2502			; TODO call function to push 
2502			 
2502			; look for end of input 
2502			 
2502			;inc hl 
2502			;ld a,(hl) 
2502			;cp FORTH_END_BUFFER 
2502			;ret z 
2502			 
2502			 
2502 c3 7b 24		jp exec1 
2505			 
2505			 
2505			 
2505			 
2505			 
2505			 
2505			 
2505			 
2505			 
2505			findnexttok: 
2505			 
2505				; hl is pointer to move 
2505				; de is the token to locate 
2505			 
2505					if DEBUG_FORTH 
2505						DMARK "NTK" 
2505						CALLMONITOR 
2505					endif 
2505 d5				push de 
2506			 
2506			.fnt1:	 
2506				; find first char of token to locate 
2506			 
2506 1a				ld a, (de) 
2507 4f				ld c,a 
2508 7e				ld a,(hl) 
2509 cd 38 13			call toUpper 
250c					if DEBUG_FORTH 
250c						DMARK "NT1" 
250c						CALLMONITOR 
250c					endif 
250c b9				cp c 
250d			 
250d 28 03			jr z, .fnt2cmpmorefirst	 
250f			 
250f				; first char not found move to next char 
250f			 
250f 23				inc hl 
2510 18 f4			jr .fnt1 
2512			 
2512			.fnt2cmpmorefirst:	 
2512				; first char of token found.  
2512			 
2512 e5				push hl     ; save start of token just in case it is the right one 
2513 d9				exx 
2514 e1				pop hl        ; save it to hl' 
2515 d9				exx 
2516			 
2516			 
2516			.fnt2cmpmore:	 
2516				; compare the rest 
2516				 
2516 23				inc hl 
2517 13				inc de 
2518				 
2518 1a				ld a, (de) 
2519 4f				ld c,a 
251a 7e				ld a,(hl) 
251b cd 38 13			call toUpper 
251e			 
251e					if DEBUG_FORTH 
251e						DMARK "NT2" 
251e						CALLMONITOR 
251e					endif 
251e				; c has the token to find char 
251e				; a has the mem to scan char 
251e			 
251e b9				cp c 
251f 28 04			jr z,.fntmatch1 
2521			 
2521				; they are not the same 
2521			 
2521					if DEBUG_FORTH 
2521						DMARK "NT3" 
2521						CALLMONITOR 
2521					endif 
2521 d1				pop de	; reset de token to look for 
2522 d5				push de 
2523 18 e1			jr .fnt1 
2525				 
2525			.fntmatch1: 
2525			 
2525				; is the same char a null which means we might have a full hit? 
2525					if DEBUG_FORTH 
2525						DMARK "NT4" 
2525						CALLMONITOR 
2525					endif 
2525			 
2525 fe 00			cp 0 
2527 28 0b			jr z, .fntmatchyes 
2529			 
2529				; are we at the end of the token to find? 
2529			 
2529					if DEBUG_FORTH 
2529						DMARK "NT5" 
2529						CALLMONITOR 
2529					endif 
2529 3e 00			ld a, 0 
252b b9				cp c 
252c			 
252c c2 16 25			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
252f			 
252f					if DEBUG_FORTH 
252f						DMARK "NT6" 
252f						CALLMONITOR 
252f					endif 
252f				; token to find is exhusted but no match to stream 
252f			 
252f				; restore tok pointer and continue on 
252f d1				pop de 
2530 d5				push de 
2531 c3 06 25			jp .fnt1 
2534			 
2534			 
2534			.fntmatchyes: 
2534			 
2534				; hl now contains the end of the found token 
2534			 
2534				; get rid of saved token pointer to find 
2534			 
2534 d1				pop de 
2535			 
2535					if DEBUG_FORTH 
2535						DMARK "NT9" 
2535						CALLMONITOR 
2535					endif 
2535			 
2535				; hl will be on the null term so forward on 
2535			 
2535				; get back the saved start of the token 
2535			 
2535 d9				exx 
2536 e5				push hl     ; save start of token just in case it is the right one 
2537 d9				exx 
2538 e1				pop hl        ; save it to hl 
2539			 
2539 c9				ret 
253a			 
253a			 
253a			; LIST needs to find a specific token   
253a			; FORGET needs to find a spefici token 
253a			 
253a			; SAVE needs to find all tokens by flag 
253a			; WORDS just needs to scan through all  by flag 
253a			; UWORDS needs to scan through all by flag 
253a			 
253a			 
253a			; given hl as pointer to start of dict look up string 
253a			; return hl as pointer to start of word block 
253a			; or 0 if not found 
253a			 
253a			forth_find_tok: 
253a c9				ret 
253b			 
253b			; given hl as pointer to dict structure 
253b			; move to the next dict block structure 
253b			 
253b			forth_tok_next: 
253b				; hl now points to the address of the next word pointer  
253b				; TODO skip compiled symbol for now 
253b			;	push de 
253b 23				inc hl 
253c 5e				ld e, (hl) 
253d 23				inc hl 
253e 56				ld d, (hl) 
253f 23				inc hl 
2540			 
2540 eb				ex de,hl 
2541			if DEBUG_FORTH_PARSE_NEXTWORD 
2541				push bc 
2541				ld bc, (cli_nextword) 
2541						DMARK "NXW" 
2541				CALLMONITOR 
2541				pop bc 
2541			endif 
2541			;	pop de	 
2541 c9				ret 
2542			 
2542			 
2542			 
2542			; eof 
# End of file forth_parserv5.asm
2542				include "forth_wordsv4.asm" 
2542			 
2542			; the core word dictionary v4 
2542			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
2542			 
2542			; this is a linked list for each of the system words used 
2542			; user defined words will follow the same format but will be in ram 
2542			 
2542			 
2542			; 
2542			; 
2542			; define linked list: 
2542			; 
2542			; 1. compiled byte op code 
2542			; 2. len of text word 
2542			; 3. text word 
2542			; 4. ptr to next dictionary word 
2542			; 5. asm, calls etc for the word 
2542			; 
2542			;  if 1 == 0 then last word in dict  
2542			;   
2542			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
2542			;  
2542			;  
2542			; create basic standard set of words 
2542			; 
2542			;  
2542			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
2542			; 2DUP 2DROP 2SWAP  
2542			; @ C@ - get byte  
2542			; ! C! - store byte 
2542			; 0< true if less than zero 
2542			; 0= true if zero 
2542			; < >  
2542			; = true if same 
2542			; variables 
2542			 
2542			 
2542			; Hardware specific words I may need 
2542			; 
2542			; IN OUT  
2542			; calls to key util functions 
2542			; calls to hardward abstraction stuff 
2542			; easy control of frame buffers and lcd i/o 
2542			; keyboard  
2542			 
2542			 
2542			;DICT: macro 
2542			; op_code, len, word, next 
2542			;    word: 
2542			;    db op_code 
2542			;    ds word zero term 
2542			;    dw next 
2542			;    endm 
2542			 
2542			 
2542			 
2542			 
2542			; op code 1 is a flag for user define words which are to be handled differently 
2542			 
2542			 
2542			; 
2542			; 
2542			;    TODO on entry to a word this should be the expected environment 
2542			;    hl - tos value if number then held, if string this is the ptr 
2542			;    de -  
2542			 
2542			 
2542			; opcode ranges 
2542			; 0 - end of word dict 
2542			; 255 - user define words 
2542			 
2542			sysdict: 
2542			include "forth_opcodes.asm" 
2542			; op codes for forth keywords 
2542			; free to use code 0  
2542				OPCODE_HEAP: equ  1 
2542				OPCODE_EXEC: equ 2 
2542				OPCODE_DUP: equ 3 
2542				OPCODE_SWAP: equ 4 
2542				OPCODE_COLN: equ 5 
2542				OPCODE_SCOLN: equ 6 
2542				OPCODE_DROP: equ 7 
2542				OPCODE_DUP2: equ 8 
2542				OPCODE_DROP2: equ 9 
2542				OPCODE_SWAP2: equ 10 
2542				OPCODE_AT: equ 11 
2542				OPCODE_CAT: equ 12 
2542				OPCODE_BANG: equ 13 
2542				OPCODE_CBANG: equ 14 
2542				OPCODE_SCALL: equ 15 
2542				OPCODE_DEPTH: equ 16 
2542				OPCODE_OVER: equ 17 
2542				OPCODE_PAUSE: equ 18 
2542				OPCODE_PAUSES: equ 19 
2542				OPCODE_ROT: equ 20 
2542			;free to reuse	OPCODE_WORDS: equ 21 
2542			        OPCODE_NOT: equ 21 
2542				OPCODE_UWORDS: equ 22 
2542				OPCODE_BP: equ 23 
2542				OPCODE_MONITOR: equ 24  
2542				OPCODE_MALLOC: equ 25 
2542				OPCODE_FREE: equ 26 
2542				OPCODE_LIST: equ 27 
2542				OPCODE_FORGET: equ 28 
2542				OPCODE_NOP: equ 29 
2542				OPCODE_COMO: equ 30 
2542				OPCODE_COMC: equ 31 
2542			;free to reuse	OPCODE_ENDCORE: equ 32 
2542				OPCODE_AFTERSOUND: equ 33 
2542				OPCODE_GP2: equ 34 
2542				OPCODE_GP3: equ 35 
2542				OPCODE_GP4: equ 36 
2542				OPCODE_SIN: equ 37 
2542				OPCODE_SOUT: equ 38 
2542				OPCODE_SPIO: equ 39 
2542				OPCODE_SPICEH: equ 40 
2542				OPCODE_SPIOb: equ 41 
2542				OPCODE_SPII: equ 42 
2542				OPCODE_SESEL: equ 43 
2542				OPCODE_CARTDEV: equ 44 
2542			; free to reuse	OPCODE_ENDDEVICE: equ 45 
2542				OPCODE_FB: equ 46 
2542				OPCODE_EMIT: equ 47 
2542				OPCODE_DOTH: equ 48 
2542				OPCODE_DOTF: equ 49 
2542				OPCODE_DOT: equ 50 
2542				OPCODE_CLS: equ 51 
2542				OPCODE_DRAW: equ 52 
2542				OPCODE_DUMP: equ 53 
2542				OPCODE_CDUMP: equ 54 
2542				OPCODE_DAT: equ 55 
2542				OPCODE_HOME: equ 56 
2542				OPCODE_SPACE: equ 57 
2542				OPCODE_SPACES: equ 58 
2542				OPCODE_SCROLL: equ 59 
2542				OPCODE_ATQ: equ 60 
2542				OPCODE_AUTODSP: equ 61 
2542				OPCODE_MENU: equ 62 
2542			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
2542				OPCODE_THEN: equ 64 
2542				OPCODE_ELSE: equ 65 
2542				OPCODE_DO: equ 66 
2542				OPCODE_LOOP: equ 67 
2542				OPCODE_I: equ 68 
2542				OPCODE_DLOOP: equ 69  
2542				OPCODE_REPEAT: equ 70  
2542				OPCODE_UNTIL: equ 71 
2542				OPCODE_ENDFLOW: equ 72 
2542				OPCODE_WAITK: equ 73 
2542				OPCODE_ACCEPT: equ 74 
2542				OPCODE_EDIT: equ 75 
2542			;free to reuse	OPCODE_ENDKEY: equ 76 
2542				OPCODE_LZERO: equ 77 
2542				OPCODE_TZERO: equ 78 
2542				OPCODE_LESS: equ 79 
2542				OPCODE_GT: equ 80 
2542				OPCODE_EQUAL: equ 81  
2542			;free to reuse	OPCODE_ENDLOGIC: equ 82 
2542				OPCODE_NEG: equ 83 
2542				OPCODE_DIV: equ 84 
2542				OPCODE_MUL: equ 85 
2542				OPCODE_MIN: equ 86 
2542				OPCODE_MAX: equ 87 
2542				OPCODE_RND16: equ 88 
2542				OPCODE_RND8: equ 89 
2542				OPCODE_RND: equ 90 
2542			;free to reuse	OPCODE_ENDMATHS: equ 91  
2542				OPCODE_BYNAME: equ 92 
2542				OPCODE_DIR: equ 93 
2542				OPCODE_SAVE: equ 94 
2542				OPCODE_LOAD: equ 95 
2542				OPCODE_BSAVE: equ 96 
2542				OPCODE_BLOAD: equ 97 
2542				OPCODE_SEO: equ 98  
2542				OPCODE_SEI: equ 99 
2542				OPCODE_SFREE: equ 100 
2542				OPCODE_SIZE: equ 101 
2542				OPCODE_CREATE: equ 102 
2542				OPCODE_APPEND: equ 103 
2542				OPCODE_SDEL: equ 104 
2542				OPCODE_OPEN: equ 105 
2542				OPCODE_READ: equ 106 
2542				OPCODE_EOF: equ 106 
2542				OPCODE_FORMAT: equ 107 
2542				OPCODE_LABEL: equ 108 
2542				OPCODE_LABELS: equ 109 
2542			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
2542				OPCODE_UPPER: equ 111 
2542				OPCODE_LOWER: equ 112 
2542				OPCODE_SUBSTR: equ 113 
2542				OPCODE_LEFT: equ 114 
2542				OPCODE_RIGHT: equ 115 
2542				OPCODE_STR2NUM: equ 116 
2542				OPCODE_NUM2STR: equ 117 
2542				OPCODE_CONCAT: equ 118 
2542				OPCODE_FIND: equ 119 
2542				OPCODE_LEN: equ 120 
2542				OPCODE_CHAR: equ 121 
2542			; free to reuse	OPCODE_STRLEN: equ 122 
2542			; free to reuse	OPCODE_ENDSTR: equ 123 
2542				OPCODE_V0S: equ 124 
2542				OPCODE_V0Q: equ 125 
2542				OPCODE_V1S: equ 126 
2542				OPCODE_V1Q: equ 127 
2542				OPCODE_V2S: equ 128 
2542				OPCODE_V2Q: equ 129 
2542				OPCODE_V3S: equ 130 
2542				OPCODE_V3Q: equ 131 
2542			;free to reuse	OPCODE_END: equ 132 
2542				OPCODE_ZDUP: equ 133 
2542			 
2542			; eof 
# End of file forth_opcodes.asm
2542			 
2542			include "forth_words_core.asm" 
2542			 
2542			; | ## Core Words 
2542			 
2542			;if MALLOC_4 
2542			 
2542			.HEAP: 
2542			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
2542 15				db WORD_SYS_CORE+OPCODE_HEAP             
2543 81 25			dw .EXEC            
2545 05				db 4 + 1 
2546 .. 00			db "HEAP",0              
254b				endm 
# End of macro CWHEAD
254b			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
254b			; | | u1 - Current number of bytes in the heap 
254b			; | | u2 - Remaining bytes left on the heap 
254b			; | |  
254b			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
254b			 
254b			 
254b				if DEBUG_FORTH_WORDS_KEY 
254b					DMARK "HEP" 
254b f5				push af  
254c 3a 60 25			ld a, (.dmark)  
254f 32 a6 fd			ld (debug_mark),a  
2552 3a 61 25			ld a, (.dmark+1)  
2555 32 a7 fd			ld (debug_mark+1),a  
2558 3a 62 25			ld a, (.dmark+2)  
255b 32 a8 fd			ld (debug_mark+2),a  
255e 18 03			jr .pastdmark  
2560 ..			.dmark: db "HEP"  
2563 f1			.pastdmark: pop af  
2564			endm  
# End of macro DMARK
2564					CALLMONITOR 
2564 cd aa fd			call debug_vector  
2567				endm  
# End of macro CALLMONITOR
2567				endif 
2567 2a 0a 80			ld hl, (free_list )      
256a 11 0e 80			ld de, heap_start 
256d			 
256d ed 52			sbc hl, de  
256f			 
256f cd 2f 20			call forth_push_numhl 
2572			 
2572			 
2572 ed 5b 0a 80		ld de, (free_list )      
2576 21 d7 f0			ld hl, heap_end 
2579			 
2579 ed 52			sbc hl, de 
257b			 
257b cd 2f 20			call forth_push_numhl 
257e				 
257e			 
257e				 
257e			 
257e			 
257e			 
257e				NEXTW 
257e c3 ea 23			jp macro_next 
2581				endm 
# End of macro NEXTW
2581			;endif 
2581			 
2581			.EXEC: 
2581			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2581			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2581			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2581			;; > > 
2581			;; > >   
2581			;	STACKFRAME OFF $5efe $5f9f 
2581			; 
2581			;		if DEBUG_FORTH_WORDS_KEY 
2581			;			DMARK "EXE" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			; 
2581			;	FORTH_DSP_VALUEHL 
2581			; 
2581			;	FORTH_DSP_POP 
2581			; 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX1" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;;	ld e,(hl) 
2581			;;	inc hl 
2581			;;	ld d,(hl) 
2581			;;	ex de,hl 
2581			; 
2581			;;		if DEBUG_FORTH_WORDS 
2581			;;			DMARK "EX2" 
2581			;;			CALLMONITOR 
2581			;;		endif 
2581			;	push hl 
2581			; 
2581			;	;ld a, 0 
2581			;	;ld a, FORTH_END_BUFFER 
2581			;	call strlenz 
2581			;	inc hl   ; include zero term to copy 
2581			;	inc hl   ; include term 
2581			;	inc hl   ; include term 
2581			;	ld b,0 
2581			;	ld c,l 
2581			;	pop hl 
2581			;	ld de, execscratch 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX3" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	ldir 
2581			; 
2581			; 
2581			;	ld hl, execscratch 
2581			; 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EXe" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			; 
2581			;	call forthparse 
2581			;	call forthexec 
2581			;;	call forthexec_cleanup 
2581			;;	call forthparse 
2581			;;	call forthexec 
2581			; 
2581			;	STACKFRAMECHK OFF $5efe $5f9f 
2581			; 
2581			;	; an immediate word so no need to process any more words 
2581			;	ret 
2581			;	NEXTW 
2581			 
2581			; dead code - old version  
2581			;	FORTH_RSP_NEXT 
2581			 
2581			;  
2581			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2581			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2581			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2581			;	push hl 
2581			;	push de 
2581			;	push bc 
2581			; 
2581			; 
2581			;		if DEBUG_FORTH_WORDS_KEY 
2581			;			DMARK "EXR" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			; 
2581			; 
2581			; 
2581			;	;v5 FORTH_DSP_VALUE 
2581			;	FORTH_DSP_VALUEHL 
2581			; 
2581			;	; TODO do string type checks 
2581			; 
2581			;;v5	inc hl   ; skip type 
2581			; 
2581			;	push hl  ; source code  
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX1" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	ld a, 0 
2581			;	call strlent 
2581			; 
2581			;	inc hl 
2581			;	inc hl 
2581			;	inc hl 
2581			;	inc hl 
2581			; 
2581			;	push hl    ; size 
2581			; 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX2" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	call malloc 
2581			; 
2581			;	ex de, hl    ; de now contains malloc area 
2581			;	pop bc   	; get byte count 
2581			;	pop hl      ; get string to copy 
2581			; 
2581			;	push de     ; save malloc for free later 
2581			; 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX3" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	ldir       ; duplicate string 
2581			; 
2581			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2581			;	 
2581			;	; TODO fix the parse would be better than this...  
2581			;	ex de, hl 
2581			;	dec hl 
2581			;	ld a, 0 
2581			;	ld (hl), a 
2581			;	dec hl 
2581			;	ld a, ' ' 
2581			;	ld (hl), a 
2581			;	dec hl 
2581			;	ld (hl), a 
2581			; 
2581			;	dec hl 
2581			;	ld (hl), a 
2581			; 
2581			; 
2581			;	FORTH_DSP_POP  
2581			; 
2581			;	pop hl     
2581			;	push hl    ; save malloc area 
2581			; 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX4" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			; 
2581			;	call forthparse 
2581			;	call forthexec 
2581			;	 
2581			;	pop hl 
2581			;	if DEBUG_FORTH_WORDS 
2581			;		DMARK "EX5" 
2581			;		CALLMONITOR 
2581			;	endif 
2581			; 
2581			;	if FORTH_ENABLE_FREE 
2581			;	call free 
2581			;	endif 
2581			; 
2581			;	if DEBUG_FORTH_WORDS 
2581			;		DMARK "EX6" 
2581			;		CALLMONITOR 
2581			;	endif 
2581			; 
2581			;	pop bc 
2581			;	pop de 
2581			;	pop hl 
2581			;;	FORTH_RSP_POP	  
2581			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2581			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2581			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2581			; 
2581			;	if DEBUG_FORTH_WORDS 
2581			;		DMARK "EX7" 
2581			;		CALLMONITOR 
2581			;	endif 
2581			;	NEXTW 
2581			 
2581			;.STKEXEC: 
2581			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2581			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2581			; 
2581			; 
2581			;		if DEBUG_FORTH_WORDS_KEY 
2581			;			DMARK "STX" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			; 
2581			;	FORTH_DSP_VALUEHL 
2581			; 
2581			;	ld (store_tmp1), hl    ; count 
2581			; 
2581			;	FORTH_DSP_POP 
2581			;.stkexec1: 
2581			;	ld hl, (store_tmp1)   ; count 
2581			;	ld a, 0 
2581			;	cp l 
2581			;	ret z 
2581			; 
2581			;	dec hl 
2581			;	ld (store_tmp1), hl    ; count 
2581			;	 
2581			;	FORTH_DSP_VALUEHL 
2581			;	push hl 
2581			;	 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EXp" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	FORTH_DSP_POP 
2581			; 
2581			;	call strlenz 
2581			;	inc hl   ; include zero term to copy 
2581			;	inc hl   ; include zero term to copy 
2581			;	inc hl   ; include zero term to copy 
2581			;	ld b,0 
2581			;	ld c,l 
2581			;	pop hl 
2581			;	ld de, execscratch 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EX3" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	ldir 
2581			; 
2581			; 
2581			;	ld hl, execscratch 
2581			; 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EXP" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			; 
2581			;	call forthparse 
2581			;	ld hl, execscratch 
2581			;		if DEBUG_FORTH_WORDS 
2581			;			DMARK "EXx" 
2581			;			CALLMONITOR 
2581			;		endif 
2581			;	call forthexec 
2581			; 
2581			;	jp .stkexec1 
2581			; 
2581			;	ret 
2581			 
2581			 
2581			.DUP: 
2581			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2581 17				db WORD_SYS_CORE+OPCODE_DUP             
2582 f7 25			dw .ZDUP            
2584 04				db 3 + 1 
2585 .. 00			db "DUP",0              
2589				endm 
# End of macro CWHEAD
2589			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
2589			 
2589				if DEBUG_FORTH_WORDS_KEY 
2589					DMARK "DUP" 
2589 f5				push af  
258a 3a 9e 25			ld a, (.dmark)  
258d 32 a6 fd			ld (debug_mark),a  
2590 3a 9f 25			ld a, (.dmark+1)  
2593 32 a7 fd			ld (debug_mark+1),a  
2596 3a a0 25			ld a, (.dmark+2)  
2599 32 a8 fd			ld (debug_mark+2),a  
259c 18 03			jr .pastdmark  
259e ..			.dmark: db "DUP"  
25a1 f1			.pastdmark: pop af  
25a2			endm  
# End of macro DMARK
25a2					CALLMONITOR 
25a2 cd aa fd			call debug_vector  
25a5				endm  
# End of macro CALLMONITOR
25a5				endif 
25a5			 
25a5				FORTH_DSP 
25a5 cd fa 21			call macro_forth_dsp 
25a8				endm 
# End of macro FORTH_DSP
25a8			 
25a8 7e				ld a, (HL) 
25a9 fe 01			cp DS_TYPE_STR 
25ab 20 25			jr nz, .dupinum 
25ad			 
25ad				; push another string 
25ad			 
25ad				FORTH_DSP_VALUEHL     		 
25ad cd 34 22			call macro_dsp_valuehl 
25b0				endm 
# End of macro FORTH_DSP_VALUEHL
25b0			 
25b0			if DEBUG_FORTH_WORDS 
25b0				DMARK "DUs" 
25b0 f5				push af  
25b1 3a c5 25			ld a, (.dmark)  
25b4 32 a6 fd			ld (debug_mark),a  
25b7 3a c6 25			ld a, (.dmark+1)  
25ba 32 a7 fd			ld (debug_mark+1),a  
25bd 3a c7 25			ld a, (.dmark+2)  
25c0 32 a8 fd			ld (debug_mark+2),a  
25c3 18 03			jr .pastdmark  
25c5 ..			.dmark: db "DUs"  
25c8 f1			.pastdmark: pop af  
25c9			endm  
# End of macro DMARK
25c9				CALLMONITOR 
25c9 cd aa fd			call debug_vector  
25cc				endm  
# End of macro CALLMONITOR
25cc			endif 
25cc cd 9d 20			call forth_push_str 
25cf			 
25cf				NEXTW 
25cf c3 ea 23			jp macro_next 
25d2				endm 
# End of macro NEXTW
25d2			 
25d2			 
25d2			.dupinum: 
25d2				 
25d2			 
25d2			 
25d2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25d2 cd 34 22			call macro_dsp_valuehl 
25d5				endm 
# End of macro FORTH_DSP_VALUEHL
25d5			 
25d5			; TODO add floating point number detection 
25d5			 
25d5			if DEBUG_FORTH_WORDS 
25d5				DMARK "DUi" 
25d5 f5				push af  
25d6 3a ea 25			ld a, (.dmark)  
25d9 32 a6 fd			ld (debug_mark),a  
25dc 3a eb 25			ld a, (.dmark+1)  
25df 32 a7 fd			ld (debug_mark+1),a  
25e2 3a ec 25			ld a, (.dmark+2)  
25e5 32 a8 fd			ld (debug_mark+2),a  
25e8 18 03			jr .pastdmark  
25ea ..			.dmark: db "DUi"  
25ed f1			.pastdmark: pop af  
25ee			endm  
# End of macro DMARK
25ee				CALLMONITOR 
25ee cd aa fd			call debug_vector  
25f1				endm  
# End of macro CALLMONITOR
25f1			endif 
25f1			 
25f1 cd 2f 20			call forth_push_numhl 
25f4				NEXTW 
25f4 c3 ea 23			jp macro_next 
25f7				endm 
# End of macro NEXTW
25f7			.ZDUP: 
25f7			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
25f7 99				db WORD_SYS_CORE+OPCODE_ZDUP             
25f8 2f 26			dw .SWAP            
25fa 05				db 4 + 1 
25fb .. 00			db "?DUP",0              
2600				endm 
# End of macro CWHEAD
2600			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | DONE 
2600			 
2600				if DEBUG_FORTH_WORDS_KEY 
2600					DMARK "qDU" 
2600 f5				push af  
2601 3a 15 26			ld a, (.dmark)  
2604 32 a6 fd			ld (debug_mark),a  
2607 3a 16 26			ld a, (.dmark+1)  
260a 32 a7 fd			ld (debug_mark+1),a  
260d 3a 17 26			ld a, (.dmark+2)  
2610 32 a8 fd			ld (debug_mark+2),a  
2613 18 03			jr .pastdmark  
2615 ..			.dmark: db "qDU"  
2618 f1			.pastdmark: pop af  
2619			endm  
# End of macro DMARK
2619					CALLMONITOR 
2619 cd aa fd			call debug_vector  
261c				endm  
# End of macro CALLMONITOR
261c				endif 
261c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
261c cd 34 22			call macro_dsp_valuehl 
261f				endm 
# End of macro FORTH_DSP_VALUEHL
261f			 
261f e5				push hl 
2620			 
2620				; is it a zero? 
2620			 
2620 3e 00			ld a, 0 
2622 84				add h 
2623 85				add l 
2624			 
2624 e1				pop hl 
2625			 
2625 fe 00			cp 0 
2627 28 03			jr z, .dup2orig 
2629			 
2629			 
2629 cd 2f 20			call forth_push_numhl 
262c			 
262c			 
262c			; TODO add floating point number detection 
262c			 
262c			.dup2orig: 
262c			 
262c				NEXTW 
262c c3 ea 23			jp macro_next 
262f				endm 
# End of macro NEXTW
262f			.SWAP: 
262f			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
262f 18				db WORD_SYS_CORE+OPCODE_SWAP             
2630 6e 26			dw .COLN            
2632 05				db 4 + 1 
2633 .. 00			db "SWAP",0              
2638				endm 
# End of macro CWHEAD
2638			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2638				if DEBUG_FORTH_WORDS_KEY 
2638					DMARK "SWP" 
2638 f5				push af  
2639 3a 4d 26			ld a, (.dmark)  
263c 32 a6 fd			ld (debug_mark),a  
263f 3a 4e 26			ld a, (.dmark+1)  
2642 32 a7 fd			ld (debug_mark+1),a  
2645 3a 4f 26			ld a, (.dmark+2)  
2648 32 a8 fd			ld (debug_mark+2),a  
264b 18 03			jr .pastdmark  
264d ..			.dmark: db "SWP"  
2650 f1			.pastdmark: pop af  
2651			endm  
# End of macro DMARK
2651					CALLMONITOR 
2651 cd aa fd			call debug_vector  
2654				endm  
# End of macro CALLMONITOR
2654				endif 
2654			 
2654			; TODO Use os stack swap memory 
2654				FORTH_DSP_VALUEHL 
2654 cd 34 22			call macro_dsp_valuehl 
2657				endm 
# End of macro FORTH_DSP_VALUEHL
2657 e5				push hl     ; w2 
2658			 
2658				FORTH_DSP_POP 
2658 cd ec 22			call macro_forth_dsp_pop 
265b				endm 
# End of macro FORTH_DSP_POP
265b			 
265b				FORTH_DSP_VALUEHL 
265b cd 34 22			call macro_dsp_valuehl 
265e				endm 
# End of macro FORTH_DSP_VALUEHL
265e			 
265e				FORTH_DSP_POP 
265e cd ec 22			call macro_forth_dsp_pop 
2661				endm 
# End of macro FORTH_DSP_POP
2661			 
2661 d1				pop de     ; w2	, hl = w1 
2662			 
2662 eb				ex de, hl 
2663 d5				push de 
2664			 
2664 cd 2f 20			call forth_push_numhl 
2667			 
2667 e1				pop hl 
2668			 
2668 cd 2f 20			call forth_push_numhl 
266b				 
266b			 
266b				NEXTW 
266b c3 ea 23			jp macro_next 
266e				endm 
# End of macro NEXTW
266e			.COLN: 
266e			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
266e 19				db WORD_SYS_CORE+OPCODE_COLN             
266f fa 27			dw .SCOLN            
2671 02				db 1 + 1 
2672 .. 00			db ":",0              
2674				endm 
# End of macro CWHEAD
2674			; | : ( -- )         Create new word | DONE 
2674			 
2674				if DEBUG_FORTH_WORDS_KEY 
2674					DMARK "CLN" 
2674 f5				push af  
2675 3a 89 26			ld a, (.dmark)  
2678 32 a6 fd			ld (debug_mark),a  
267b 3a 8a 26			ld a, (.dmark+1)  
267e 32 a7 fd			ld (debug_mark+1),a  
2681 3a 8b 26			ld a, (.dmark+2)  
2684 32 a8 fd			ld (debug_mark+2),a  
2687 18 03			jr .pastdmark  
2689 ..			.dmark: db "CLN"  
268c f1			.pastdmark: pop af  
268d			endm  
# End of macro DMARK
268d					CALLMONITOR 
268d cd aa fd			call debug_vector  
2690				endm  
# End of macro CALLMONITOR
2690				endif 
2690			STACKFRAME OFF $8efe $989f 
2690				if DEBUG_STACK_IMB 
2690					if OFF 
2690						exx 
2690						ld de, $8efe 
2690						ld a, d 
2690						ld hl, curframe 
2690						call hexout 
2690						ld a, e 
2690						ld hl, curframe+2 
2690						call hexout 
2690						ld hl, $8efe 
2690						push hl 
2690						ld hl, $989f 
2690						push hl 
2690						exx 
2690					endif 
2690				endif 
2690			endm 
# End of macro STACKFRAME
2690			; get parser buffer length  of new word 
2690			 
2690			 
2690			 
2690				; move tok past this to start of name defintition 
2690				; TODO get word to define 
2690				; TODO Move past word token 
2690				; TODO get length of string up to the ';' 
2690			 
2690 2a fd f3		ld hl, (os_tok_ptr) 
2693 23			inc hl 
2694 23			inc hl 
2695			 
2695 3e 3b		ld a, ';' 
2697 cd 4c 13		call strlent 
269a			 
269a 7d			ld a,l 
269b 32 ec f0		ld (os_new_parse_len), a 
269e			 
269e			 
269e			if DEBUG_FORTH_UWORD 
269e ed 5b fd f3	ld de, (os_tok_ptr) 
26a2					DMARK ":01" 
26a2 f5				push af  
26a3 3a b7 26			ld a, (.dmark)  
26a6 32 a6 fd			ld (debug_mark),a  
26a9 3a b8 26			ld a, (.dmark+1)  
26ac 32 a7 fd			ld (debug_mark+1),a  
26af 3a b9 26			ld a, (.dmark+2)  
26b2 32 a8 fd			ld (debug_mark+2),a  
26b5 18 03			jr .pastdmark  
26b7 ..			.dmark: db ":01"  
26ba f1			.pastdmark: pop af  
26bb			endm  
# End of macro DMARK
26bb			CALLMONITOR 
26bb cd aa fd			call debug_vector  
26be				endm  
# End of macro CALLMONITOR
26be			endif 
26be			 
26be			; 
26be			;  new word memory layout: 
26be			;  
26be			;    : adg 6666 ;  
26be			; 
26be			;    db   1     ; user defined word  
26be 23			inc hl    
26bf			;    dw   sysdict 
26bf 23			inc hl 
26c0 23			inc hl 
26c1			;    db <word len>+1 (for null) 
26c1 23			inc hl 
26c2			;    db .... <word> 
26c2			; 
26c2			 
26c2 23			inc hl    ; some extras for the word preamble before the above 
26c3 23			inc hl 
26c4 23			inc hl 
26c5 23			inc hl 
26c6 23			inc hl 
26c7 23			inc hl 
26c8 23			inc hl  
26c9 23			inc hl 
26ca 23			inc hl 
26cb 23			inc hl 
26cc 23			inc hl 
26cd 23			inc hl 
26ce 23			inc hl 
26cf 23			inc hl     ; TODO how many do we really need?     maybe only 6 
26d0			;       exec word buffer 
26d0			;	<ptr word>   
26d0 23			inc hl 
26d1 23			inc hl 
26d2			;       <word list><null term> 7F final term 
26d2			 
26d2			 
26d2			if DEBUG_FORTH_UWORD 
26d2					DMARK ":02" 
26d2 f5				push af  
26d3 3a e7 26			ld a, (.dmark)  
26d6 32 a6 fd			ld (debug_mark),a  
26d9 3a e8 26			ld a, (.dmark+1)  
26dc 32 a7 fd			ld (debug_mark+1),a  
26df 3a e9 26			ld a, (.dmark+2)  
26e2 32 a8 fd			ld (debug_mark+2),a  
26e5 18 03			jr .pastdmark  
26e7 ..			.dmark: db ":02"  
26ea f1			.pastdmark: pop af  
26eb			endm  
# End of macro DMARK
26eb			CALLMONITOR 
26eb cd aa fd			call debug_vector  
26ee				endm  
# End of macro CALLMONITOR
26ee			endif 
26ee			 
26ee			 
26ee				; malloc the size 
26ee			 
26ee cd b6 13			call malloc 
26f1 22 ee f0			ld (os_new_malloc), hl     ; save malloc start 
26f4			 
26f4			;    db   1     ; user defined word  
26f4 3e 01			ld a, WORD_SYS_UWORD  
26f6 77				ld (hl), a 
26f7			 
26f7 23			inc hl    
26f8			;    dw   sysdict 
26f8 11 42 25		ld de, sysdict       ; continue on with the scan to the system dict 
26fb 73			ld (hl), e 
26fc 23			inc hl 
26fd 72			ld (hl), d 
26fe 23			inc hl 
26ff			 
26ff			 
26ff			;    Setup dict word 
26ff			 
26ff 23			inc hl 
2700 22 e8 f0		ld (os_new_work_ptr), hl     ; save start of dict word  
2703			 
2703			; 1. get length of dict word 
2703			 
2703			 
2703 2a fd f3		ld hl, (os_tok_ptr) 
2706 23			inc hl 
2707 23			inc hl    ; position to start of dict word 
2708 3e 00		ld a, 0 
270a cd 4c 13		call strlent 
270d			 
270d			 
270d 23			inc hl    ; to include null??? 
270e			 
270e			; write length of dict word 
270e			 
270e ed 5b e8 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2712 1b			dec de 
2713 eb			ex de, hl 
2714 73			ld (hl), e 
2715 eb			ex de, hl 
2716			 
2716			 
2716			 
2716			; copy  
2716 4d			ld c, l 
2717 06 00		ld b, 0 
2719 ed 5b e8 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
271d 2a fd f3		ld hl, (os_tok_ptr) 
2720 23			inc hl 
2721 23			inc hl    ; position to start of dict word 
2722			 
2722			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2722			 
2722			; TODO need to convert word to upper case 
2722			 
2722			ucasetok:	 
2722 7e			ld a,(hl) 
2723 cd 38 13		call toUpper 
2726 77			ld (hl),a 
2727 ed a0		ldi 
2729 f2 22 27		jp p, ucasetok 
272c			 
272c			 
272c			 
272c			; de now points to start of where the word body code should be placed 
272c ed 53 e8 f0	ld (os_new_work_ptr), de 
2730			; hl now points to the words to throw at forthexec which needs to be copied 
2730 22 e6 f0		ld (os_new_src_ptr), hl 
2733			 
2733			; TODO add 'call to forthexec' 
2733			 
2733			if DEBUG_FORTH_UWORD 
2733 c5			push bc 
2734 ed 4b ee f0	ld bc, (os_new_malloc) 
2738					DMARK ":0x" 
2738 f5				push af  
2739 3a 4d 27			ld a, (.dmark)  
273c 32 a6 fd			ld (debug_mark),a  
273f 3a 4e 27			ld a, (.dmark+1)  
2742 32 a7 fd			ld (debug_mark+1),a  
2745 3a 4f 27			ld a, (.dmark+2)  
2748 32 a8 fd			ld (debug_mark+2),a  
274b 18 03			jr .pastdmark  
274d ..			.dmark: db ":0x"  
2750 f1			.pastdmark: pop af  
2751			endm  
# End of macro DMARK
2751			CALLMONITOR 
2751 cd aa fd			call debug_vector  
2754				endm  
# End of macro CALLMONITOR
2754 c1			pop bc 
2755			endif 
2755			 
2755			 
2755			; create word preamble which should be: 
2755			 
2755			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2755			 
2755			;    ld hl, <word code> 
2755			;    jp user_exec 
2755			;    <word code bytes> 
2755			 
2755			 
2755			;	inc de     ; TODO ??? or are we already past the word's null 
2755 eb			ex de, hl 
2756			 
2756 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
2758			 
2758 23			inc hl 
2759 22 e2 f0		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
275c 23			inc hl 
275d			 
275d 23			inc hl 
275e 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
2760			 
2760 01 eb 5c		ld bc, user_exec 
2763 23			inc hl 
2764 71			ld (hl), c     ; poke address of user_exec 
2765 23			inc hl 
2766 70			ld (hl), b     
2767			; 
2767			;	inc hl 
2767			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2767			; 
2767			; 
2767			;	ld bc, macro_forth_rsp_next 
2767			;	inc hl 
2767			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
2767			;	inc hl 
2767			;	ld (hl), b     
2767			; 
2767			;	inc hl 
2767			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2767			; 
2767			; 
2767			;	inc hl 
2767			;	ld bc, forthexec 
2767			;	ld (hl), c     ; poke address of forthexec 
2767			;	inc hl 
2767			;	ld (hl), b      
2767			; 
2767			;	inc hl 
2767			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
2767			; 
2767			;	ld bc, user_dict_next 
2767			;	inc hl 
2767			;	ld (hl), c     ; poke address of forthexec 
2767			;	inc hl 
2767			;	ld (hl), b      
2767			 
2767			; hl is now where we need to copy the word byte data to save this 
2767			 
2767 23			inc hl 
2768 22 e4 f0		ld (os_new_exec), hl 
276b			 
276b			; copy definition 
276b			 
276b eb			ex de, hl 
276c			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
276c			;	inc de    ; skip the PC for this parse 
276c 3a ec f0		ld a, (os_new_parse_len) 
276f 4f			ld c, a 
2770 06 00		ld b, 0 
2772 ed b0		ldir		 ; copy defintion 
2774			 
2774			 
2774			; poke the address of where the new word bytes live for forthexec 
2774			 
2774 2a e2 f0		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
2777			 
2777 ed 5b e4 f0	ld de, (os_new_exec)      
277b			 
277b 73			ld (hl), e 
277c 23			inc hl 
277d 72			ld (hl), d 
277e			 
277e				; TODO copy last user dict word next link to this word 
277e				; TODO update last user dict word to point to this word 
277e			; 
277e			; hl f923 de 812a ; bc 811a 
277e			 
277e			if DEBUG_FORTH_UWORD 
277e c5			push bc 
277f ed 4b ee f0	ld bc, (os_new_malloc) 
2783					DMARK ":0A" 
2783 f5				push af  
2784 3a 98 27			ld a, (.dmark)  
2787 32 a6 fd			ld (debug_mark),a  
278a 3a 99 27			ld a, (.dmark+1)  
278d 32 a7 fd			ld (debug_mark+1),a  
2790 3a 9a 27			ld a, (.dmark+2)  
2793 32 a8 fd			ld (debug_mark+2),a  
2796 18 03			jr .pastdmark  
2798 ..			.dmark: db ":0A"  
279b f1			.pastdmark: pop af  
279c			endm  
# End of macro DMARK
279c			CALLMONITOR 
279c cd aa fd			call debug_vector  
279f				endm  
# End of macro CALLMONITOR
279f c1			pop bc 
27a0			endif 
27a0			if DEBUG_FORTH_UWORD 
27a0 c5			push bc 
27a1 ed 4b ee f0	ld bc, (os_new_malloc) 
27a5 03			inc bc 
27a6 03			inc bc 
27a7 03			inc bc 
27a8 03			inc bc 
27a9 03			inc bc 
27aa 03			inc bc 
27ab 03			inc bc 
27ac 03			inc bc 
27ad			 
27ad					DMARK ":0B" 
27ad f5				push af  
27ae 3a c2 27			ld a, (.dmark)  
27b1 32 a6 fd			ld (debug_mark),a  
27b4 3a c3 27			ld a, (.dmark+1)  
27b7 32 a7 fd			ld (debug_mark+1),a  
27ba 3a c4 27			ld a, (.dmark+2)  
27bd 32 a8 fd			ld (debug_mark+2),a  
27c0 18 03			jr .pastdmark  
27c2 ..			.dmark: db ":0B"  
27c5 f1			.pastdmark: pop af  
27c6			endm  
# End of macro DMARK
27c6			CALLMONITOR 
27c6 cd aa fd			call debug_vector  
27c9				endm  
# End of macro CALLMONITOR
27c9 c1			pop bc 
27ca			endif 
27ca			 
27ca			; update word dict linked list for new word 
27ca			 
27ca			 
27ca 2a f9 f3		ld hl, (os_last_new_uword)		; get the start of the last added uword 
27cd 23			inc hl     ; move to next work linked list ptr 
27ce			 
27ce ed 5b ee f0	ld de, (os_new_malloc)		 ; new next word 
27d2 73			ld (hl), e 
27d3 23			inc hl 
27d4 72			ld (hl), d 
27d5			 
27d5			if DEBUG_FORTH_UWORD 
27d5 ed 4b f9 f3	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
27d9			endif 
27d9			 
27d9 ed 53 f9 f3	ld (os_last_new_uword), de      ; update last new uword ptr 
27dd			 
27dd			 
27dd			if DEBUG_FORTH_UWORD 
27dd					DMARK ":0+" 
27dd f5				push af  
27de 3a f2 27			ld a, (.dmark)  
27e1 32 a6 fd			ld (debug_mark),a  
27e4 3a f3 27			ld a, (.dmark+1)  
27e7 32 a7 fd			ld (debug_mark+1),a  
27ea 3a f4 27			ld a, (.dmark+2)  
27ed 32 a8 fd			ld (debug_mark+2),a  
27f0 18 03			jr .pastdmark  
27f2 ..			.dmark: db ":0+"  
27f5 f1			.pastdmark: pop af  
27f6			endm  
# End of macro DMARK
27f6			CALLMONITOR 
27f6 cd aa fd			call debug_vector  
27f9				endm  
# End of macro CALLMONITOR
27f9			endif 
27f9			 
27f9			STACKFRAMECHK OFF $8efe $989f 
27f9				if DEBUG_STACK_IMB 
27f9					if OFF 
27f9						exx 
27f9						ld hl, $989f 
27f9						pop de   ; $989f 
27f9						call cmp16 
27f9						jr nz, .spnosame 
27f9						ld hl, $8efe 
27f9						pop de   ; $8efe 
27f9						call cmp16 
27f9						jr z, .spfrsame 
27f9						.spnosame: call showsperror 
27f9						.spfrsame: nop 
27f9						exx 
27f9					endif 
27f9				endif 
27f9			endm 
# End of macro STACKFRAMECHK
27f9			 
27f9 c9			ret    ; dont process any remaining parser tokens as they form new word 
27fa			 
27fa			 
27fa			 
27fa			 
27fa			;		NEXT 
27fa			.SCOLN: 
27fa			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
27fa 06			db OPCODE_SCOLN 
27fb 46 28		dw .DROP 
27fd 02			db 2 
27fe .. 00		db ";",0           
2800			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2800				if DEBUG_FORTH_WORDS_KEY 
2800					DMARK "SCN" 
2800 f5				push af  
2801 3a 15 28			ld a, (.dmark)  
2804 32 a6 fd			ld (debug_mark),a  
2807 3a 16 28			ld a, (.dmark+1)  
280a 32 a7 fd			ld (debug_mark+1),a  
280d 3a 17 28			ld a, (.dmark+2)  
2810 32 a8 fd			ld (debug_mark+2),a  
2813 18 03			jr .pastdmark  
2815 ..			.dmark: db "SCN"  
2818 f1			.pastdmark: pop af  
2819			endm  
# End of macro DMARK
2819					CALLMONITOR 
2819 cd aa fd			call debug_vector  
281c				endm  
# End of macro CALLMONITOR
281c				endif 
281c				FORTH_RSP_TOS 
281c cd ed 1f			call macro_forth_rsp_tos 
281f				endm 
# End of macro FORTH_RSP_TOS
281f e5				push hl 
2820				FORTH_RSP_POP 
2820 cd f7 1f			call macro_forth_rsp_pop 
2823				endm 
# End of macro FORTH_RSP_POP
2823 e1				pop hl 
2824			;		ex de,hl 
2824 22 fd f3			ld (os_tok_ptr),hl 
2827			 
2827			if DEBUG_FORTH_UWORD 
2827					DMARK "SCL" 
2827 f5				push af  
2828 3a 3c 28			ld a, (.dmark)  
282b 32 a6 fd			ld (debug_mark),a  
282e 3a 3d 28			ld a, (.dmark+1)  
2831 32 a7 fd			ld (debug_mark+1),a  
2834 3a 3e 28			ld a, (.dmark+2)  
2837 32 a8 fd			ld (debug_mark+2),a  
283a 18 03			jr .pastdmark  
283c ..			.dmark: db "SCL"  
283f f1			.pastdmark: pop af  
2840			endm  
# End of macro DMARK
2840			CALLMONITOR 
2840 cd aa fd			call debug_vector  
2843				endm  
# End of macro CALLMONITOR
2843			endif 
2843				NEXTW 
2843 c3 ea 23			jp macro_next 
2846				endm 
# End of macro NEXTW
2846			 
2846			.DROP: 
2846			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2846 1b				db WORD_SYS_CORE+OPCODE_DROP             
2847 71 28			dw .DUP2            
2849 05				db 4 + 1 
284a .. 00			db "DROP",0              
284f				endm 
# End of macro CWHEAD
284f			; | DROP ( w -- )   drop the TOS item   | DONE 
284f				if DEBUG_FORTH_WORDS_KEY 
284f					DMARK "DRP" 
284f f5				push af  
2850 3a 64 28			ld a, (.dmark)  
2853 32 a6 fd			ld (debug_mark),a  
2856 3a 65 28			ld a, (.dmark+1)  
2859 32 a7 fd			ld (debug_mark+1),a  
285c 3a 66 28			ld a, (.dmark+2)  
285f 32 a8 fd			ld (debug_mark+2),a  
2862 18 03			jr .pastdmark  
2864 ..			.dmark: db "DRP"  
2867 f1			.pastdmark: pop af  
2868			endm  
# End of macro DMARK
2868					CALLMONITOR 
2868 cd aa fd			call debug_vector  
286b				endm  
# End of macro CALLMONITOR
286b				endif 
286b				FORTH_DSP_POP 
286b cd ec 22			call macro_forth_dsp_pop 
286e				endm 
# End of macro FORTH_DSP_POP
286e				NEXTW 
286e c3 ea 23			jp macro_next 
2871				endm 
# End of macro NEXTW
2871			.DUP2: 
2871			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2871 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2872 b6 28			dw .DROP2            
2874 05				db 4 + 1 
2875 .. 00			db "2DUP",0              
287a				endm 
# End of macro CWHEAD
287a			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | DONE 
287a				if DEBUG_FORTH_WORDS_KEY 
287a					DMARK "2DU" 
287a f5				push af  
287b 3a 8f 28			ld a, (.dmark)  
287e 32 a6 fd			ld (debug_mark),a  
2881 3a 90 28			ld a, (.dmark+1)  
2884 32 a7 fd			ld (debug_mark+1),a  
2887 3a 91 28			ld a, (.dmark+2)  
288a 32 a8 fd			ld (debug_mark+2),a  
288d 18 03			jr .pastdmark  
288f ..			.dmark: db "2DU"  
2892 f1			.pastdmark: pop af  
2893			endm  
# End of macro DMARK
2893					CALLMONITOR 
2893 cd aa fd			call debug_vector  
2896				endm  
# End of macro CALLMONITOR
2896				endif 
2896				FORTH_DSP_VALUEHL 
2896 cd 34 22			call macro_dsp_valuehl 
2899				endm 
# End of macro FORTH_DSP_VALUEHL
2899 e5				push hl      ; 2 
289a			 
289a				FORTH_DSP_POP 
289a cd ec 22			call macro_forth_dsp_pop 
289d				endm 
# End of macro FORTH_DSP_POP
289d				 
289d				FORTH_DSP_VALUEHL 
289d cd 34 22			call macro_dsp_valuehl 
28a0				endm 
# End of macro FORTH_DSP_VALUEHL
28a0			;		push hl      ; 1 
28a0			 
28a0				FORTH_DSP_POP 
28a0 cd ec 22			call macro_forth_dsp_pop 
28a3				endm 
# End of macro FORTH_DSP_POP
28a3			 
28a3			;		pop hl       ; 1 
28a3 d1				pop de       ; 2 
28a4			 
28a4 cd 2f 20			call forth_push_numhl 
28a7 eb				ex de, hl 
28a8 cd 2f 20			call forth_push_numhl 
28ab			 
28ab				 
28ab eb				ex de, hl 
28ac			 
28ac cd 2f 20			call forth_push_numhl 
28af eb				ex de, hl 
28b0 cd 2f 20			call forth_push_numhl 
28b3			 
28b3			 
28b3				NEXTW 
28b3 c3 ea 23			jp macro_next 
28b6				endm 
# End of macro NEXTW
28b6			.DROP2: 
28b6			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
28b6 1d				db WORD_SYS_CORE+OPCODE_DROP2             
28b7 e5 28			dw .SWAP2            
28b9 06				db 5 + 1 
28ba .. 00			db "2DROP",0              
28c0				endm 
# End of macro CWHEAD
28c0			; | 2DROP ( w w -- )    Double drop | DONE 
28c0				if DEBUG_FORTH_WORDS_KEY 
28c0					DMARK "2DR" 
28c0 f5				push af  
28c1 3a d5 28			ld a, (.dmark)  
28c4 32 a6 fd			ld (debug_mark),a  
28c7 3a d6 28			ld a, (.dmark+1)  
28ca 32 a7 fd			ld (debug_mark+1),a  
28cd 3a d7 28			ld a, (.dmark+2)  
28d0 32 a8 fd			ld (debug_mark+2),a  
28d3 18 03			jr .pastdmark  
28d5 ..			.dmark: db "2DR"  
28d8 f1			.pastdmark: pop af  
28d9			endm  
# End of macro DMARK
28d9					CALLMONITOR 
28d9 cd aa fd			call debug_vector  
28dc				endm  
# End of macro CALLMONITOR
28dc				endif 
28dc				FORTH_DSP_POP 
28dc cd ec 22			call macro_forth_dsp_pop 
28df				endm 
# End of macro FORTH_DSP_POP
28df				FORTH_DSP_POP 
28df cd ec 22			call macro_forth_dsp_pop 
28e2				endm 
# End of macro FORTH_DSP_POP
28e2				NEXTW 
28e2 c3 ea 23			jp macro_next 
28e5				endm 
# End of macro NEXTW
28e5			.SWAP2: 
28e5			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
28e5 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
28e6 0e 29			dw .AT            
28e8 06				db 5 + 1 
28e9 .. 00			db "2SWAP",0              
28ef				endm 
# End of macro CWHEAD
28ef			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
28ef				if DEBUG_FORTH_WORDS_KEY 
28ef					DMARK "2SW" 
28ef f5				push af  
28f0 3a 04 29			ld a, (.dmark)  
28f3 32 a6 fd			ld (debug_mark),a  
28f6 3a 05 29			ld a, (.dmark+1)  
28f9 32 a7 fd			ld (debug_mark+1),a  
28fc 3a 06 29			ld a, (.dmark+2)  
28ff 32 a8 fd			ld (debug_mark+2),a  
2902 18 03			jr .pastdmark  
2904 ..			.dmark: db "2SW"  
2907 f1			.pastdmark: pop af  
2908			endm  
# End of macro DMARK
2908					CALLMONITOR 
2908 cd aa fd			call debug_vector  
290b				endm  
# End of macro CALLMONITOR
290b				endif 
290b			; TODO Use os stack swap memory 
290b				NEXTW 
290b c3 ea 23			jp macro_next 
290e				endm 
# End of macro NEXTW
290e			.AT: 
290e			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
290e 1f				db WORD_SYS_CORE+OPCODE_AT             
290f 40 29			dw .CAT            
2911 02				db 1 + 1 
2912 .. 00			db "@",0              
2914				endm 
# End of macro CWHEAD
2914			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2914			 
2914				if DEBUG_FORTH_WORDS_KEY 
2914					DMARK "AT." 
2914 f5				push af  
2915 3a 29 29			ld a, (.dmark)  
2918 32 a6 fd			ld (debug_mark),a  
291b 3a 2a 29			ld a, (.dmark+1)  
291e 32 a7 fd			ld (debug_mark+1),a  
2921 3a 2b 29			ld a, (.dmark+2)  
2924 32 a8 fd			ld (debug_mark+2),a  
2927 18 03			jr .pastdmark  
2929 ..			.dmark: db "AT."  
292c f1			.pastdmark: pop af  
292d			endm  
# End of macro DMARK
292d					CALLMONITOR 
292d cd aa fd			call debug_vector  
2930				endm  
# End of macro CALLMONITOR
2930				endif 
2930			.getbyteat:	 
2930				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2930 cd 34 22			call macro_dsp_valuehl 
2933				endm 
# End of macro FORTH_DSP_VALUEHL
2933				 
2933			;		push hl 
2933			 
2933				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2933 cd ec 22			call macro_forth_dsp_pop 
2936				endm 
# End of macro FORTH_DSP_POP
2936			 
2936			;		pop hl 
2936			 
2936 7e				ld a, (hl) 
2937			 
2937 6f				ld l, a 
2938 26 00			ld h, 0 
293a cd 2f 20			call forth_push_numhl 
293d			 
293d				NEXTW 
293d c3 ea 23			jp macro_next 
2940				endm 
# End of macro NEXTW
2940			.CAT: 
2940			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2940 20				db WORD_SYS_CORE+OPCODE_CAT             
2941 69 29			dw .BANG            
2943 03				db 2 + 1 
2944 .. 00			db "C@",0              
2947				endm 
# End of macro CWHEAD
2947			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2947				if DEBUG_FORTH_WORDS_KEY 
2947					DMARK "CAA" 
2947 f5				push af  
2948 3a 5c 29			ld a, (.dmark)  
294b 32 a6 fd			ld (debug_mark),a  
294e 3a 5d 29			ld a, (.dmark+1)  
2951 32 a7 fd			ld (debug_mark+1),a  
2954 3a 5e 29			ld a, (.dmark+2)  
2957 32 a8 fd			ld (debug_mark+2),a  
295a 18 03			jr .pastdmark  
295c ..			.dmark: db "CAA"  
295f f1			.pastdmark: pop af  
2960			endm  
# End of macro DMARK
2960					CALLMONITOR 
2960 cd aa fd			call debug_vector  
2963				endm  
# End of macro CALLMONITOR
2963				endif 
2963 c3 30 29			jp .getbyteat 
2966				NEXTW 
2966 c3 ea 23			jp macro_next 
2969				endm 
# End of macro NEXTW
2969			.BANG: 
2969			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2969 21				db WORD_SYS_CORE+OPCODE_BANG             
296a 9f 29			dw .CBANG            
296c 02				db 1 + 1 
296d .. 00			db "!",0              
296f				endm 
# End of macro CWHEAD
296f			; | ! ( x w -- ) Store x at address w      | DONE 
296f				if DEBUG_FORTH_WORDS_KEY 
296f					DMARK "BNG" 
296f f5				push af  
2970 3a 84 29			ld a, (.dmark)  
2973 32 a6 fd			ld (debug_mark),a  
2976 3a 85 29			ld a, (.dmark+1)  
2979 32 a7 fd			ld (debug_mark+1),a  
297c 3a 86 29			ld a, (.dmark+2)  
297f 32 a8 fd			ld (debug_mark+2),a  
2982 18 03			jr .pastdmark  
2984 ..			.dmark: db "BNG"  
2987 f1			.pastdmark: pop af  
2988			endm  
# End of macro DMARK
2988					CALLMONITOR 
2988 cd aa fd			call debug_vector  
298b				endm  
# End of macro CALLMONITOR
298b				endif 
298b			 
298b			.storebyteat:		 
298b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
298b cd 34 22			call macro_dsp_valuehl 
298e				endm 
# End of macro FORTH_DSP_VALUEHL
298e				 
298e e5				push hl 
298f			 
298f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
298f cd ec 22			call macro_forth_dsp_pop 
2992				endm 
# End of macro FORTH_DSP_POP
2992			 
2992				; get byte to poke 
2992			 
2992				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2992 cd 34 22			call macro_dsp_valuehl 
2995				endm 
# End of macro FORTH_DSP_VALUEHL
2995 e5				push hl 
2996			 
2996			 
2996				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2996 cd ec 22			call macro_forth_dsp_pop 
2999				endm 
# End of macro FORTH_DSP_POP
2999			 
2999			 
2999 d1				pop de 
299a e1				pop hl 
299b			 
299b 73				ld (hl),e 
299c			 
299c			 
299c				NEXTW 
299c c3 ea 23			jp macro_next 
299f				endm 
# End of macro NEXTW
299f			.CBANG: 
299f			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
299f 22				db WORD_SYS_CORE+OPCODE_CBANG             
29a0 c8 29			dw .SCALL            
29a2 03				db 2 + 1 
29a3 .. 00			db "C!",0              
29a6				endm 
# End of macro CWHEAD
29a6			; | C!  ( x w -- ) Store x at address w  | DONE 
29a6				if DEBUG_FORTH_WORDS_KEY 
29a6					DMARK "CBA" 
29a6 f5				push af  
29a7 3a bb 29			ld a, (.dmark)  
29aa 32 a6 fd			ld (debug_mark),a  
29ad 3a bc 29			ld a, (.dmark+1)  
29b0 32 a7 fd			ld (debug_mark+1),a  
29b3 3a bd 29			ld a, (.dmark+2)  
29b6 32 a8 fd			ld (debug_mark+2),a  
29b9 18 03			jr .pastdmark  
29bb ..			.dmark: db "CBA"  
29be f1			.pastdmark: pop af  
29bf			endm  
# End of macro DMARK
29bf					CALLMONITOR 
29bf cd aa fd			call debug_vector  
29c2				endm  
# End of macro CALLMONITOR
29c2				endif 
29c2 c3 8b 29			jp .storebyteat 
29c5				NEXTW 
29c5 c3 ea 23			jp macro_next 
29c8				endm 
# End of macro NEXTW
29c8			.SCALL: 
29c8			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
29c8 23				db WORD_SYS_CORE+OPCODE_SCALL             
29c9 fc 29			dw .DEPTH            
29cb 05				db 4 + 1 
29cc .. 00			db "CALL",0              
29d1				endm 
# End of macro CWHEAD
29d1			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
29d1				if DEBUG_FORTH_WORDS_KEY 
29d1					DMARK "CLL" 
29d1 f5				push af  
29d2 3a e6 29			ld a, (.dmark)  
29d5 32 a6 fd			ld (debug_mark),a  
29d8 3a e7 29			ld a, (.dmark+1)  
29db 32 a7 fd			ld (debug_mark+1),a  
29de 3a e8 29			ld a, (.dmark+2)  
29e1 32 a8 fd			ld (debug_mark+2),a  
29e4 18 03			jr .pastdmark  
29e6 ..			.dmark: db "CLL"  
29e9 f1			.pastdmark: pop af  
29ea			endm  
# End of macro DMARK
29ea					CALLMONITOR 
29ea cd aa fd			call debug_vector  
29ed				endm  
# End of macro CALLMONITOR
29ed				endif 
29ed			 
29ed				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29ed cd 34 22			call macro_dsp_valuehl 
29f0				endm 
# End of macro FORTH_DSP_VALUEHL
29f0			 
29f0			;		push hl 
29f0			 
29f0				; destroy value TOS 
29f0			 
29f0				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29f0 cd ec 22			call macro_forth_dsp_pop 
29f3				endm 
# End of macro FORTH_DSP_POP
29f3			 
29f3					 
29f3			;		pop hl 
29f3			 
29f3				; how to do a call with hl???? save SP? 
29f3 cd 8e 23			call forth_call_hl 
29f6			 
29f6			 
29f6				; TODO push value back onto stack for another op etc 
29f6			 
29f6 cd 2f 20			call forth_push_numhl 
29f9				NEXTW 
29f9 c3 ea 23			jp macro_next 
29fc				endm 
# End of macro NEXTW
29fc			.DEPTH: 
29fc			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
29fc 24				db WORD_SYS_CORE+OPCODE_DEPTH             
29fd 39 2a			dw .OVER            
29ff 06				db 5 + 1 
2a00 .. 00			db "DEPTH",0              
2a06				endm 
# End of macro CWHEAD
2a06			; | DEPTH ( -- u ) Push count of stack | DONE 
2a06				; take current TOS and remove from base value div by two to get count 
2a06				if DEBUG_FORTH_WORDS_KEY 
2a06					DMARK "DEP" 
2a06 f5				push af  
2a07 3a 1b 2a			ld a, (.dmark)  
2a0a 32 a6 fd			ld (debug_mark),a  
2a0d 3a 1c 2a			ld a, (.dmark+1)  
2a10 32 a7 fd			ld (debug_mark+1),a  
2a13 3a 1d 2a			ld a, (.dmark+2)  
2a16 32 a8 fd			ld (debug_mark+2),a  
2a19 18 03			jr .pastdmark  
2a1b ..			.dmark: db "DEP"  
2a1e f1			.pastdmark: pop af  
2a1f			endm  
# End of macro DMARK
2a1f					CALLMONITOR 
2a1f cd aa fd			call debug_vector  
2a22				endm  
# End of macro CALLMONITOR
2a22				endif 
2a22			 
2a22			 
2a22 2a 29 f9		ld hl, (cli_data_sp) 
2a25 11 63 f6		ld de, cli_data_stack 
2a28 ed 52		sbc hl,de 
2a2a			 
2a2a			; div by size of stack item 
2a2a			 
2a2a 5d			ld e,l 
2a2b 0e 03		ld c, 3 
2a2d cd 6b 0f		call Div8 
2a30			 
2a30 6f			ld l,a 
2a31 26 00		ld h,0 
2a33			 
2a33			;srl h 
2a33			;rr l 
2a33			 
2a33 cd 2f 20			call forth_push_numhl 
2a36				NEXTW 
2a36 c3 ea 23			jp macro_next 
2a39				endm 
# End of macro NEXTW
2a39			.OVER: 
2a39			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2a39 42				db WORD_SYS_CORE+46             
2a3a 80 2a			dw .PAUSE            
2a3c 05				db 4 + 1 
2a3d .. 00			db "OVER",0              
2a42				endm 
# End of macro CWHEAD
2a42			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
2a42				if DEBUG_FORTH_WORDS_KEY 
2a42					DMARK "OVR" 
2a42 f5				push af  
2a43 3a 57 2a			ld a, (.dmark)  
2a46 32 a6 fd			ld (debug_mark),a  
2a49 3a 58 2a			ld a, (.dmark+1)  
2a4c 32 a7 fd			ld (debug_mark+1),a  
2a4f 3a 59 2a			ld a, (.dmark+2)  
2a52 32 a8 fd			ld (debug_mark+2),a  
2a55 18 03			jr .pastdmark  
2a57 ..			.dmark: db "OVR"  
2a5a f1			.pastdmark: pop af  
2a5b			endm  
# End of macro DMARK
2a5b					CALLMONITOR 
2a5b cd aa fd			call debug_vector  
2a5e				endm  
# End of macro CALLMONITOR
2a5e				endif 
2a5e			 
2a5e			; TODO Use os stack swap memory 
2a5e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a5e cd 34 22			call macro_dsp_valuehl 
2a61				endm 
# End of macro FORTH_DSP_VALUEHL
2a61 e5				push hl    ; n2 
2a62				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a62 cd ec 22			call macro_forth_dsp_pop 
2a65				endm 
# End of macro FORTH_DSP_POP
2a65			 
2a65				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a65 cd 34 22			call macro_dsp_valuehl 
2a68				endm 
# End of macro FORTH_DSP_VALUEHL
2a68 e5				push hl    ; n1 
2a69				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a69 cd ec 22			call macro_forth_dsp_pop 
2a6c				endm 
# End of macro FORTH_DSP_POP
2a6c			 
2a6c d1				pop de     ; n1 
2a6d e1				pop hl     ; n2 
2a6e			 
2a6e d5				push de 
2a6f e5				push hl 
2a70 d5				push de 
2a71			 
2a71				; push back  
2a71			 
2a71 e1				pop hl 
2a72 cd 2f 20			call forth_push_numhl 
2a75 e1				pop hl 
2a76 cd 2f 20			call forth_push_numhl 
2a79 e1				pop hl 
2a7a cd 2f 20			call forth_push_numhl 
2a7d				NEXTW 
2a7d c3 ea 23			jp macro_next 
2a80				endm 
# End of macro NEXTW
2a80			 
2a80			.PAUSE: 
2a80			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2a80 43				db WORD_SYS_CORE+47             
2a81 b5 2a			dw .PAUSES            
2a83 08				db 7 + 1 
2a84 .. 00			db "PAUSEMS",0              
2a8c				endm 
# End of macro CWHEAD
2a8c			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2a8c				if DEBUG_FORTH_WORDS_KEY 
2a8c					DMARK "PMS" 
2a8c f5				push af  
2a8d 3a a1 2a			ld a, (.dmark)  
2a90 32 a6 fd			ld (debug_mark),a  
2a93 3a a2 2a			ld a, (.dmark+1)  
2a96 32 a7 fd			ld (debug_mark+1),a  
2a99 3a a3 2a			ld a, (.dmark+2)  
2a9c 32 a8 fd			ld (debug_mark+2),a  
2a9f 18 03			jr .pastdmark  
2aa1 ..			.dmark: db "PMS"  
2aa4 f1			.pastdmark: pop af  
2aa5			endm  
# End of macro DMARK
2aa5					CALLMONITOR 
2aa5 cd aa fd			call debug_vector  
2aa8				endm  
# End of macro CALLMONITOR
2aa8				endif 
2aa8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2aa8 cd 34 22			call macro_dsp_valuehl 
2aab				endm 
# End of macro FORTH_DSP_VALUEHL
2aab			;		push hl    ; n2 
2aab				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2aab cd ec 22			call macro_forth_dsp_pop 
2aae				endm 
# End of macro FORTH_DSP_POP
2aae			;		pop hl 
2aae			 
2aae 7d				ld a, l 
2aaf cd cf 0c			call aDelayInMS 
2ab2			       NEXTW 
2ab2 c3 ea 23			jp macro_next 
2ab5				endm 
# End of macro NEXTW
2ab5			.PAUSES:  
2ab5			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2ab5 44				db WORD_SYS_CORE+48             
2ab6 24 2b			dw .ROT            
2ab8 06				db 5 + 1 
2ab9 .. 00			db "PAUSE",0              
2abf				endm 
# End of macro CWHEAD
2abf			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2abf				if DEBUG_FORTH_WORDS_KEY 
2abf					DMARK "PAU" 
2abf f5				push af  
2ac0 3a d4 2a			ld a, (.dmark)  
2ac3 32 a6 fd			ld (debug_mark),a  
2ac6 3a d5 2a			ld a, (.dmark+1)  
2ac9 32 a7 fd			ld (debug_mark+1),a  
2acc 3a d6 2a			ld a, (.dmark+2)  
2acf 32 a8 fd			ld (debug_mark+2),a  
2ad2 18 03			jr .pastdmark  
2ad4 ..			.dmark: db "PAU"  
2ad7 f1			.pastdmark: pop af  
2ad8			endm  
# End of macro DMARK
2ad8					CALLMONITOR 
2ad8 cd aa fd			call debug_vector  
2adb				endm  
# End of macro CALLMONITOR
2adb				endif 
2adb				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2adb cd 34 22			call macro_dsp_valuehl 
2ade				endm 
# End of macro FORTH_DSP_VALUEHL
2ade			;		push hl    ; n2 
2ade				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2ade cd ec 22			call macro_forth_dsp_pop 
2ae1				endm 
# End of macro FORTH_DSP_POP
2ae1			;		pop hl 
2ae1 45				ld b, l 
2ae2				if DEBUG_FORTH_WORDS 
2ae2					DMARK "PAU" 
2ae2 f5				push af  
2ae3 3a f7 2a			ld a, (.dmark)  
2ae6 32 a6 fd			ld (debug_mark),a  
2ae9 3a f8 2a			ld a, (.dmark+1)  
2aec 32 a7 fd			ld (debug_mark+1),a  
2aef 3a f9 2a			ld a, (.dmark+2)  
2af2 32 a8 fd			ld (debug_mark+2),a  
2af5 18 03			jr .pastdmark  
2af7 ..			.dmark: db "PAU"  
2afa f1			.pastdmark: pop af  
2afb			endm  
# End of macro DMARK
2afb					CALLMONITOR 
2afb cd aa fd			call debug_vector  
2afe				endm  
# End of macro CALLMONITOR
2afe				endif 
2afe c5			.pauses1:	push bc 
2aff cd ea 0c			call delay1s 
2b02 c1				pop bc 
2b03				if DEBUG_FORTH_WORDS 
2b03					DMARK "PA1" 
2b03 f5				push af  
2b04 3a 18 2b			ld a, (.dmark)  
2b07 32 a6 fd			ld (debug_mark),a  
2b0a 3a 19 2b			ld a, (.dmark+1)  
2b0d 32 a7 fd			ld (debug_mark+1),a  
2b10 3a 1a 2b			ld a, (.dmark+2)  
2b13 32 a8 fd			ld (debug_mark+2),a  
2b16 18 03			jr .pastdmark  
2b18 ..			.dmark: db "PA1"  
2b1b f1			.pastdmark: pop af  
2b1c			endm  
# End of macro DMARK
2b1c					CALLMONITOR 
2b1c cd aa fd			call debug_vector  
2b1f				endm  
# End of macro CALLMONITOR
2b1f				endif 
2b1f 10 dd			djnz .pauses1 
2b21			 
2b21			       NEXTW 
2b21 c3 ea 23			jp macro_next 
2b24				endm 
# End of macro NEXTW
2b24			.ROT: 
2b24			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2b24 45				db WORD_SYS_CORE+49             
2b25 72 2b			dw .UWORDS            
2b27 04				db 3 + 1 
2b28 .. 00			db "ROT",0              
2b2c				endm 
# End of macro CWHEAD
2b2c			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
2b2c				if DEBUG_FORTH_WORDS_KEY 
2b2c					DMARK "ROT" 
2b2c f5				push af  
2b2d 3a 41 2b			ld a, (.dmark)  
2b30 32 a6 fd			ld (debug_mark),a  
2b33 3a 42 2b			ld a, (.dmark+1)  
2b36 32 a7 fd			ld (debug_mark+1),a  
2b39 3a 43 2b			ld a, (.dmark+2)  
2b3c 32 a8 fd			ld (debug_mark+2),a  
2b3f 18 03			jr .pastdmark  
2b41 ..			.dmark: db "ROT"  
2b44 f1			.pastdmark: pop af  
2b45			endm  
# End of macro DMARK
2b45					CALLMONITOR 
2b45 cd aa fd			call debug_vector  
2b48				endm  
# End of macro CALLMONITOR
2b48				endif 
2b48			 
2b48			; TODO Use os stack swap memory 
2b48				FORTH_DSP_VALUEHL 
2b48 cd 34 22			call macro_dsp_valuehl 
2b4b				endm 
# End of macro FORTH_DSP_VALUEHL
2b4b e5				push hl    ; u3  
2b4c			 
2b4c				FORTH_DSP_POP 
2b4c cd ec 22			call macro_forth_dsp_pop 
2b4f				endm 
# End of macro FORTH_DSP_POP
2b4f			 
2b4f				FORTH_DSP_VALUEHL 
2b4f cd 34 22			call macro_dsp_valuehl 
2b52				endm 
# End of macro FORTH_DSP_VALUEHL
2b52 e5				push hl     ; u2 
2b53			 
2b53				FORTH_DSP_POP 
2b53 cd ec 22			call macro_forth_dsp_pop 
2b56				endm 
# End of macro FORTH_DSP_POP
2b56			 
2b56				FORTH_DSP_VALUEHL 
2b56 cd 34 22			call macro_dsp_valuehl 
2b59				endm 
# End of macro FORTH_DSP_VALUEHL
2b59 e5				push hl     ; u1 
2b5a			 
2b5a				FORTH_DSP_POP 
2b5a cd ec 22			call macro_forth_dsp_pop 
2b5d				endm 
# End of macro FORTH_DSP_POP
2b5d			 
2b5d c1				pop bc      ; u1 
2b5e e1				pop hl      ; u2 
2b5f d1				pop de      ; u3 
2b60			 
2b60			 
2b60 c5				push bc 
2b61 d5				push de 
2b62 e5				push hl 
2b63			 
2b63			 
2b63 e1				pop hl 
2b64 cd 2f 20			call forth_push_numhl 
2b67			 
2b67 e1				pop hl 
2b68 cd 2f 20			call forth_push_numhl 
2b6b			 
2b6b e1				pop hl 
2b6c cd 2f 20			call forth_push_numhl 
2b6f				 
2b6f			 
2b6f			 
2b6f			 
2b6f			 
2b6f			 
2b6f			       NEXTW 
2b6f c3 ea 23			jp macro_next 
2b72				endm 
# End of macro NEXTW
2b72			 
2b72			.UWORDS: 
2b72			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2b72 50				db WORD_SYS_CORE+60             
2b73 34 2c			dw .BP            
2b75 07				db 6 + 1 
2b76 .. 00			db "UWORDS",0              
2b7d				endm 
# End of macro CWHEAD
2b7d			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2b7d			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2b7d			; | | Following the count are the individual words. 
2b7d			; | | 
2b7d			; | | e.g. UWORDS 
2b7d			; | | BOX DIRLIST 2 
2b7d			; | |  
2b7d			; | | Can be used to save the words to storage via: 
2b7d			; | | UWORDS $01 DO $01 APPEND LOOP 
2b7d			if DEBUG_FORTH_WORDS_KEY 
2b7d				DMARK "UWR" 
2b7d f5				push af  
2b7e 3a 92 2b			ld a, (.dmark)  
2b81 32 a6 fd			ld (debug_mark),a  
2b84 3a 93 2b			ld a, (.dmark+1)  
2b87 32 a7 fd			ld (debug_mark+1),a  
2b8a 3a 94 2b			ld a, (.dmark+2)  
2b8d 32 a8 fd			ld (debug_mark+2),a  
2b90 18 03			jr .pastdmark  
2b92 ..			.dmark: db "UWR"  
2b95 f1			.pastdmark: pop af  
2b96			endm  
# End of macro DMARK
2b96				CALLMONITOR 
2b96 cd aa fd			call debug_vector  
2b99				endm  
# End of macro CALLMONITOR
2b99			endif 
2b99 21 00 80			ld hl, baseram 
2b9c				;ld hl, baseusermem 
2b9c 01 00 00			ld bc, 0    ; start a counter 
2b9f			 
2b9f			; skip dict stub 
2b9f			 
2b9f cd 3b 25			call forth_tok_next 
2ba2			 
2ba2			 
2ba2			; while we have words to look for 
2ba2			 
2ba2 7e			.douscan:	ld a, (hl)      
2ba3			if DEBUG_FORTH_WORDS 
2ba3				DMARK "UWs" 
2ba3 f5				push af  
2ba4 3a b8 2b			ld a, (.dmark)  
2ba7 32 a6 fd			ld (debug_mark),a  
2baa 3a b9 2b			ld a, (.dmark+1)  
2bad 32 a7 fd			ld (debug_mark+1),a  
2bb0 3a ba 2b			ld a, (.dmark+2)  
2bb3 32 a8 fd			ld (debug_mark+2),a  
2bb6 18 03			jr .pastdmark  
2bb8 ..			.dmark: db "UWs"  
2bbb f1			.pastdmark: pop af  
2bbc			endm  
# End of macro DMARK
2bbc				CALLMONITOR 
2bbc cd aa fd			call debug_vector  
2bbf				endm  
# End of macro CALLMONITOR
2bbf			endif 
2bbf fe 00			cp WORD_SYS_END 
2bc1 28 4d			jr z, .udone 
2bc3 fe 01			cp WORD_SYS_UWORD 
2bc5 20 44			jr nz, .nuword 
2bc7			 
2bc7			if DEBUG_FORTH_WORDS 
2bc7				DMARK "UWu" 
2bc7 f5				push af  
2bc8 3a dc 2b			ld a, (.dmark)  
2bcb 32 a6 fd			ld (debug_mark),a  
2bce 3a dd 2b			ld a, (.dmark+1)  
2bd1 32 a7 fd			ld (debug_mark+1),a  
2bd4 3a de 2b			ld a, (.dmark+2)  
2bd7 32 a8 fd			ld (debug_mark+2),a  
2bda 18 03			jr .pastdmark  
2bdc ..			.dmark: db "UWu"  
2bdf f1			.pastdmark: pop af  
2be0			endm  
# End of macro DMARK
2be0				CALLMONITOR 
2be0 cd aa fd			call debug_vector  
2be3				endm  
# End of macro CALLMONITOR
2be3			endif 
2be3				; we have a uword so push its name to the stack 
2be3			 
2be3 e5				push hl  ; save so we can move to next dict block 
2be4			 
2be4				; skip opcode 
2be4 23				inc hl  
2be5				; skip next ptr 
2be5 23				inc hl  
2be6 23				inc hl 
2be7				; skip len 
2be7 23				inc hl 
2be8			if DEBUG_FORTH_WORDS 
2be8				DMARK "UWt" 
2be8 f5				push af  
2be9 3a fd 2b			ld a, (.dmark)  
2bec 32 a6 fd			ld (debug_mark),a  
2bef 3a fe 2b			ld a, (.dmark+1)  
2bf2 32 a7 fd			ld (debug_mark+1),a  
2bf5 3a ff 2b			ld a, (.dmark+2)  
2bf8 32 a8 fd			ld (debug_mark+2),a  
2bfb 18 03			jr .pastdmark  
2bfd ..			.dmark: db "UWt"  
2c00 f1			.pastdmark: pop af  
2c01			endm  
# End of macro DMARK
2c01				CALLMONITOR 
2c01 cd aa fd			call debug_vector  
2c04				endm  
# End of macro CALLMONITOR
2c04			endif 
2c04 03				inc bc 
2c05			 
2c05 c5				push bc 
2c06 cd 9d 20			call forth_push_str 
2c09 c1				pop bc 
2c0a			 
2c0a e1				pop hl 	 
2c0b			 
2c0b cd 3b 25		.nuword:	call forth_tok_next 
2c0e 18 92			jr .douscan  
2c10			 
2c10			.udone:		 ; push count of uwords found 
2c10 c5				push bc 
2c11 e1				pop hl 
2c12			 
2c12			if DEBUG_FORTH_WORDS 
2c12				DMARK "UWc" 
2c12 f5				push af  
2c13 3a 27 2c			ld a, (.dmark)  
2c16 32 a6 fd			ld (debug_mark),a  
2c19 3a 28 2c			ld a, (.dmark+1)  
2c1c 32 a7 fd			ld (debug_mark+1),a  
2c1f 3a 29 2c			ld a, (.dmark+2)  
2c22 32 a8 fd			ld (debug_mark+2),a  
2c25 18 03			jr .pastdmark  
2c27 ..			.dmark: db "UWc"  
2c2a f1			.pastdmark: pop af  
2c2b			endm  
# End of macro DMARK
2c2b				CALLMONITOR 
2c2b cd aa fd			call debug_vector  
2c2e				endm  
# End of macro CALLMONITOR
2c2e			endif 
2c2e cd 2f 20			call forth_push_numhl 
2c31			 
2c31			 
2c31			       NEXTW 
2c31 c3 ea 23			jp macro_next 
2c34				endm 
# End of macro NEXTW
2c34			 
2c34			.BP: 
2c34			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2c34 54				db WORD_SYS_CORE+64             
2c35 6e 2c			dw .MONITOR            
2c37 03				db 2 + 1 
2c38 .. 00			db "BP",0              
2c3b				endm 
# End of macro CWHEAD
2c3b			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2c3b			; | | $00 Will enable the break points within specific code paths 
2c3b			; | | $01 Will disable break points 
2c3b			; | |  
2c3b			; | | By default break points are off. Either the above can be used to enable them 
2c3b			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2c3b			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2c3b			; | | can disable break points. Exiting will then continue boot process. 
2c3b				; get byte count 
2c3b				if DEBUG_FORTH_WORDS_KEY 
2c3b					DMARK "BP." 
2c3b f5				push af  
2c3c 3a 50 2c			ld a, (.dmark)  
2c3f 32 a6 fd			ld (debug_mark),a  
2c42 3a 51 2c			ld a, (.dmark+1)  
2c45 32 a7 fd			ld (debug_mark+1),a  
2c48 3a 52 2c			ld a, (.dmark+2)  
2c4b 32 a8 fd			ld (debug_mark+2),a  
2c4e 18 03			jr .pastdmark  
2c50 ..			.dmark: db "BP."  
2c53 f1			.pastdmark: pop af  
2c54			endm  
# End of macro DMARK
2c54					CALLMONITOR 
2c54 cd aa fd			call debug_vector  
2c57				endm  
# End of macro CALLMONITOR
2c57				endif 
2c57			 
2c57				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2c57 cd 34 22			call macro_dsp_valuehl 
2c5a				endm 
# End of macro FORTH_DSP_VALUEHL
2c5a			 
2c5a			;		push hl 
2c5a			 
2c5a				; destroy value TOS 
2c5a			 
2c5a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2c5a cd ec 22			call macro_forth_dsp_pop 
2c5d				endm 
# End of macro FORTH_DSP_POP
2c5d			 
2c5d			;		pop hl 
2c5d			 
2c5d 3e 00			ld a,0 
2c5f bd				cp l 
2c60 28 06			jr z, .bpset 
2c62			;		ld a, '*' 
2c62 cd 50 19			call bp_off 
2c65				NEXTW 
2c65 c3 ea 23			jp macro_next 
2c68				endm 
# End of macro NEXTW
2c68			 
2c68			.bpset:	 
2c68				;	ld (os_view_disable), a 
2c68 cd 44 19			call bp_on 
2c6b			 
2c6b			 
2c6b				NEXTW 
2c6b c3 ea 23			jp macro_next 
2c6e				endm 
# End of macro NEXTW
2c6e			 
2c6e			 
2c6e			.MONITOR: 
2c6e			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2c6e 55				db WORD_SYS_CORE+65             
2c6f 9f 2c			dw .MALLOC            
2c71 08				db 7 + 1 
2c72 .. 00			db "MONITOR",0              
2c7a				endm 
# End of macro CWHEAD
2c7a			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2c7a			; | | At start the current various registers will be displayed with contents. 
2c7a			; | | Top right corner will show the most recent debug marker seen. 
2c7a			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2c7a			; | | and the return stack pointer (RSP). 
2c7a			; | | Pressing: 
2c7a			; | |    1 - Initial screen 
2c7a			; | |    2 - Display a data dump of HL 
2c7a			; | |    3 - Display a data dump of DE 
2c7a			; | |    4 - Display a data dump of BC 
2c7a			; | |    5 - Display a data dump of HL 
2c7a			; | |    6 - Display a data dump of DSP 
2c7a			; | |    7 - Display a data dump of RSP 
2c7a			; | |    8 - Display a data dump of what is at DSP 
2c7a			; | |    9 - Display a data dump of what is at RSP 
2c7a			; | |    0 - Exit monitor and continue running. This will also enable break points 
2c7a			; | |    * - Disable break points 
2c7a			; | |    # - Enter traditional monitor mode 
2c7a			; | | 
2c7a			; | | Monitor Mode 
2c7a			; | | ------------ 
2c7a			; | | A prompt of '>' will be shown for various commands: 
2c7a			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2c7a			; | |    C - Continue display a data dump from the last set address 
2c7a			; | |    M xxxx - Set start of memory edit at address xx 
2c7a			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2c7a			; | |    G xxxx - Exec code at specific address 
2c7a			; | |    Q - Return to previous 
2c7a				if DEBUG_FORTH_WORDS_KEY 
2c7a					DMARK "MON" 
2c7a f5				push af  
2c7b 3a 8f 2c			ld a, (.dmark)  
2c7e 32 a6 fd			ld (debug_mark),a  
2c81 3a 90 2c			ld a, (.dmark+1)  
2c84 32 a7 fd			ld (debug_mark+1),a  
2c87 3a 91 2c			ld a, (.dmark+2)  
2c8a 32 a8 fd			ld (debug_mark+2),a  
2c8d 18 03			jr .pastdmark  
2c8f ..			.dmark: db "MON"  
2c92 f1			.pastdmark: pop af  
2c93			endm  
# End of macro DMARK
2c93					CALLMONITOR 
2c93 cd aa fd			call debug_vector  
2c96				endm  
# End of macro CALLMONITOR
2c96				endif 
2c96			;		ld a, 0 
2c96			;		ld (os_view_disable), a 
2c96 cd 44 19			call bp_on 
2c99			 
2c99				CALLMONITOR 
2c99 cd aa fd			call debug_vector  
2c9c				endm  
# End of macro CALLMONITOR
2c9c			 
2c9c			;	call monitor 
2c9c			 
2c9c				NEXTW 
2c9c c3 ea 23			jp macro_next 
2c9f				endm 
# End of macro NEXTW
2c9f			 
2c9f			 
2c9f			.MALLOC: 
2c9f			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2c9f 56				db WORD_SYS_CORE+66             
2ca0 c8 2c			dw .MALLOC2            
2ca2 06				db 5 + 1 
2ca3 .. 00			db "ALLOT",0              
2ca9				endm 
# End of macro CWHEAD
2ca9			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2ca9				if DEBUG_FORTH_WORDS_KEY 
2ca9					DMARK "ALL" 
2ca9 f5				push af  
2caa 3a be 2c			ld a, (.dmark)  
2cad 32 a6 fd			ld (debug_mark),a  
2cb0 3a bf 2c			ld a, (.dmark+1)  
2cb3 32 a7 fd			ld (debug_mark+1),a  
2cb6 3a c0 2c			ld a, (.dmark+2)  
2cb9 32 a8 fd			ld (debug_mark+2),a  
2cbc 18 03			jr .pastdmark  
2cbe ..			.dmark: db "ALL"  
2cc1 f1			.pastdmark: pop af  
2cc2			endm  
# End of macro DMARK
2cc2					CALLMONITOR 
2cc2 cd aa fd			call debug_vector  
2cc5				endm  
# End of macro CALLMONITOR
2cc5				endif 
2cc5 c3 ef 2c			jp .mallocc 
2cc8			.MALLOC2: 
2cc8			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2cc8 56				db WORD_SYS_CORE+66             
2cc9 06 2d			dw .FREE            
2ccb 07				db 6 + 1 
2ccc .. 00			db "MALLOC",0              
2cd3				endm 
# End of macro CWHEAD
2cd3			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2cd3				; get byte count 
2cd3				if DEBUG_FORTH_WORDS_KEY 
2cd3					DMARK "MAL" 
2cd3 f5				push af  
2cd4 3a e8 2c			ld a, (.dmark)  
2cd7 32 a6 fd			ld (debug_mark),a  
2cda 3a e9 2c			ld a, (.dmark+1)  
2cdd 32 a7 fd			ld (debug_mark+1),a  
2ce0 3a ea 2c			ld a, (.dmark+2)  
2ce3 32 a8 fd			ld (debug_mark+2),a  
2ce6 18 03			jr .pastdmark  
2ce8 ..			.dmark: db "MAL"  
2ceb f1			.pastdmark: pop af  
2cec			endm  
# End of macro DMARK
2cec					CALLMONITOR 
2cec cd aa fd			call debug_vector  
2cef				endm  
# End of macro CALLMONITOR
2cef				endif 
2cef			.mallocc: 
2cef				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2cef cd 34 22			call macro_dsp_valuehl 
2cf2				endm 
# End of macro FORTH_DSP_VALUEHL
2cf2			 
2cf2			;		push hl 
2cf2			 
2cf2				; destroy value TOS 
2cf2			 
2cf2				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2cf2 cd ec 22			call macro_forth_dsp_pop 
2cf5				endm 
# End of macro FORTH_DSP_POP
2cf5			 
2cf5			;		pop hl 
2cf5 cd b6 13			call malloc 
2cf8			if DEBUG_FORTH_MALLOC_GUARD 
2cf8 f5				push af 
2cf9 cd 04 10			call ishlzero 
2cfc			;		ld a, l 
2cfc			;		add h 
2cfc			;		cp 0 
2cfc f1				pop af 
2cfd				 
2cfd cc bd 5d			call z,malloc_error 
2d00			endif 
2d00			 
2d00 cd 2f 20			call forth_push_numhl 
2d03				NEXTW 
2d03 c3 ea 23			jp macro_next 
2d06				endm 
# End of macro NEXTW
2d06			 
2d06			.FREE: 
2d06			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2d06 57				db WORD_SYS_CORE+67             
2d07 37 2d			dw .LIST            
2d09 05				db 4 + 1 
2d0a .. 00			db "FREE",0              
2d0f				endm 
# End of macro CWHEAD
2d0f			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2d0f				if DEBUG_FORTH_WORDS_KEY 
2d0f					DMARK "FRE" 
2d0f f5				push af  
2d10 3a 24 2d			ld a, (.dmark)  
2d13 32 a6 fd			ld (debug_mark),a  
2d16 3a 25 2d			ld a, (.dmark+1)  
2d19 32 a7 fd			ld (debug_mark+1),a  
2d1c 3a 26 2d			ld a, (.dmark+2)  
2d1f 32 a8 fd			ld (debug_mark+2),a  
2d22 18 03			jr .pastdmark  
2d24 ..			.dmark: db "FRE"  
2d27 f1			.pastdmark: pop af  
2d28			endm  
# End of macro DMARK
2d28					CALLMONITOR 
2d28 cd aa fd			call debug_vector  
2d2b				endm  
# End of macro CALLMONITOR
2d2b				endif 
2d2b				; get address 
2d2b			 
2d2b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2d2b cd 34 22			call macro_dsp_valuehl 
2d2e				endm 
# End of macro FORTH_DSP_VALUEHL
2d2e			 
2d2e			;		push hl 
2d2e			 
2d2e				; destroy value TOS 
2d2e			 
2d2e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2d2e cd ec 22			call macro_forth_dsp_pop 
2d31				endm 
# End of macro FORTH_DSP_POP
2d31			 
2d31			;		pop hl 
2d31			if FORTH_ENABLE_MALLOCFREE 
2d31 cd 80 14			call free 
2d34			endif 
2d34				NEXTW 
2d34 c3 ea 23			jp macro_next 
2d37				endm 
# End of macro NEXTW
2d37			.LIST: 
2d37			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2d37 5c				db WORD_SYS_CORE+72             
2d38 27 2f			dw .FORGET            
2d3a 05				db 4 + 1 
2d3b .. 00			db "LIST",0              
2d40				endm 
# End of macro CWHEAD
2d40			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2d40			; | | The quoted word must be in upper case. 
2d40			if DEBUG_FORTH_WORDS_KEY 
2d40				DMARK "LST" 
2d40 f5				push af  
2d41 3a 55 2d			ld a, (.dmark)  
2d44 32 a6 fd			ld (debug_mark),a  
2d47 3a 56 2d			ld a, (.dmark+1)  
2d4a 32 a7 fd			ld (debug_mark+1),a  
2d4d 3a 57 2d			ld a, (.dmark+2)  
2d50 32 a8 fd			ld (debug_mark+2),a  
2d53 18 03			jr .pastdmark  
2d55 ..			.dmark: db "LST"  
2d58 f1			.pastdmark: pop af  
2d59			endm  
# End of macro DMARK
2d59				CALLMONITOR 
2d59 cd aa fd			call debug_vector  
2d5c				endm  
# End of macro CALLMONITOR
2d5c			endif 
2d5c			 
2d5c				FORTH_DSP_VALUEHL 
2d5c cd 34 22			call macro_dsp_valuehl 
2d5f				endm 
# End of macro FORTH_DSP_VALUEHL
2d5f			 
2d5f e5				push hl 
2d60				FORTH_DSP_POP 
2d60 cd ec 22			call macro_forth_dsp_pop 
2d63				endm 
# End of macro FORTH_DSP_POP
2d63 c1				pop bc 
2d64			 
2d64			; Start format of scratch string 
2d64			 
2d64 21 fc f0			ld hl, scratch 
2d67			 
2d67 3e 3a			ld a, ':' 
2d69 77				ld (hl),a 
2d6a 23				inc hl 
2d6b 3e 20			ld a, ' ' 
2d6d 77				ld (hl), a 
2d6e			 
2d6e				; Get ptr to the word we need to look up 
2d6e			 
2d6e			;		FORTH_DSP_VALUEHL 
2d6e				;v5 FORTH_DSP_VALUE 
2d6e			; TODO type check 
2d6e			;		inc hl    ; Skip type check  
2d6e			;		push hl 
2d6e			;		ex de, hl    ; put into DE 
2d6e			 
2d6e			 
2d6e 21 00 80			ld hl, baseram 
2d71				;ld hl, baseusermem 
2d71			 
2d71 e5			push hl   ; sacreifical push 
2d72			 
2d72			.ldouscanm: 
2d72 e1			pop hl 
2d73			.ldouscan: 
2d73			if DEBUG_FORTH_WORDS 
2d73				DMARK "LSs" 
2d73 f5				push af  
2d74 3a 88 2d			ld a, (.dmark)  
2d77 32 a6 fd			ld (debug_mark),a  
2d7a 3a 89 2d			ld a, (.dmark+1)  
2d7d 32 a7 fd			ld (debug_mark+1),a  
2d80 3a 8a 2d			ld a, (.dmark+2)  
2d83 32 a8 fd			ld (debug_mark+2),a  
2d86 18 03			jr .pastdmark  
2d88 ..			.dmark: db "LSs"  
2d8b f1			.pastdmark: pop af  
2d8c			endm  
# End of macro DMARK
2d8c				CALLMONITOR 
2d8c cd aa fd			call debug_vector  
2d8f				endm  
# End of macro CALLMONITOR
2d8f			endif 
2d8f			; skip dict stub 
2d8f cd 3b 25			call forth_tok_next 
2d92			 
2d92			 
2d92			; while we have words to look for 
2d92			 
2d92 7e			ld a, (hl)      
2d93			if DEBUG_FORTH_WORDS 
2d93				DMARK "LSk" 
2d93 f5				push af  
2d94 3a a8 2d			ld a, (.dmark)  
2d97 32 a6 fd			ld (debug_mark),a  
2d9a 3a a9 2d			ld a, (.dmark+1)  
2d9d 32 a7 fd			ld (debug_mark+1),a  
2da0 3a aa 2d			ld a, (.dmark+2)  
2da3 32 a8 fd			ld (debug_mark+2),a  
2da6 18 03			jr .pastdmark  
2da8 ..			.dmark: db "LSk"  
2dab f1			.pastdmark: pop af  
2dac			endm  
# End of macro DMARK
2dac				CALLMONITOR 
2dac cd aa fd			call debug_vector  
2daf				endm  
# End of macro CALLMONITOR
2daf			endif 
2daf				;cp WORD_SYS_END 
2daf				;jp z, .lunotfound 
2daf			 
2daf					; if we hit non uwords then gone too far 
2daf fe 01				cp WORD_SYS_UWORD 
2db1 c2 e3 2e				jp nz, .lunotfound 
2db4			 
2db4				if DEBUG_FORTH_WORDS 
2db4					DMARK "LSu" 
2db4 f5				push af  
2db5 3a c9 2d			ld a, (.dmark)  
2db8 32 a6 fd			ld (debug_mark),a  
2dbb 3a ca 2d			ld a, (.dmark+1)  
2dbe 32 a7 fd			ld (debug_mark+1),a  
2dc1 3a cb 2d			ld a, (.dmark+2)  
2dc4 32 a8 fd			ld (debug_mark+2),a  
2dc7 18 03			jr .pastdmark  
2dc9 ..			.dmark: db "LSu"  
2dcc f1			.pastdmark: pop af  
2dcd			endm  
# End of macro DMARK
2dcd					CALLMONITOR 
2dcd cd aa fd			call debug_vector  
2dd0				endm  
# End of macro CALLMONITOR
2dd0				endif 
2dd0			 
2dd0					; found a uword but is it the one we want... 
2dd0			 
2dd0 c5					push bc     ; uword to find is on bc 
2dd1 d1					pop de 
2dd2			 
2dd2 e5					push hl  ; to save the ptr 
2dd3			 
2dd3					; skip opcode 
2dd3 23					inc hl  
2dd4					; skip next ptr 
2dd4 23					inc hl  
2dd5 23					inc hl 
2dd6					; skip len 
2dd6 23					inc hl 
2dd7			 
2dd7				if DEBUG_FORTH_WORDS 
2dd7					DMARK "LSc" 
2dd7 f5				push af  
2dd8 3a ec 2d			ld a, (.dmark)  
2ddb 32 a6 fd			ld (debug_mark),a  
2dde 3a ed 2d			ld a, (.dmark+1)  
2de1 32 a7 fd			ld (debug_mark+1),a  
2de4 3a ee 2d			ld a, (.dmark+2)  
2de7 32 a8 fd			ld (debug_mark+2),a  
2dea 18 03			jr .pastdmark  
2dec ..			.dmark: db "LSc"  
2def f1			.pastdmark: pop af  
2df0			endm  
# End of macro DMARK
2df0					CALLMONITOR 
2df0 cd aa fd			call debug_vector  
2df3				endm  
# End of macro CALLMONITOR
2df3				endif 
2df3			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2df3			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2df3			; Nope that has gone the other way. It needs to be exact not on first zero 
2df3			;		call strcmp 
2df3 c5					push bc 
2df4 cd 86 13				call StrictStrCmp 
2df7 c1					pop bc 
2df8 c2 72 2d				jp nz, .ldouscanm 
2dfb				 
2dfb			 
2dfb			 
2dfb					; we have a uword so push its name to the stack 
2dfb			 
2dfb			;	   	push hl  ; save so we can move to next dict block 
2dfb e1			pop hl 
2dfc			 
2dfc				if DEBUG_FORTH_WORDS 
2dfc					DMARK "LSm" 
2dfc f5				push af  
2dfd 3a 11 2e			ld a, (.dmark)  
2e00 32 a6 fd			ld (debug_mark),a  
2e03 3a 12 2e			ld a, (.dmark+1)  
2e06 32 a7 fd			ld (debug_mark+1),a  
2e09 3a 13 2e			ld a, (.dmark+2)  
2e0c 32 a8 fd			ld (debug_mark+2),a  
2e0f 18 03			jr .pastdmark  
2e11 ..			.dmark: db "LSm"  
2e14 f1			.pastdmark: pop af  
2e15			endm  
# End of macro DMARK
2e15					CALLMONITOR 
2e15 cd aa fd			call debug_vector  
2e18				endm  
# End of macro CALLMONITOR
2e18				endif 
2e18			 
2e18					; skip opcode 
2e18 23					inc hl  
2e19					; skip next ptr 
2e19 23					inc hl  
2e1a 23					inc hl 
2e1b					; skip len 
2e1b 7e					ld a, (hl)   ; save length to add 
2e1c				if DEBUG_FORTH_WORDS 
2e1c					DMARK "LS2" 
2e1c f5				push af  
2e1d 3a 31 2e			ld a, (.dmark)  
2e20 32 a6 fd			ld (debug_mark),a  
2e23 3a 32 2e			ld a, (.dmark+1)  
2e26 32 a7 fd			ld (debug_mark+1),a  
2e29 3a 33 2e			ld a, (.dmark+2)  
2e2c 32 a8 fd			ld (debug_mark+2),a  
2e2f 18 03			jr .pastdmark  
2e31 ..			.dmark: db "LS2"  
2e34 f1			.pastdmark: pop af  
2e35			endm  
# End of macro DMARK
2e35					CALLMONITOR 
2e35 cd aa fd			call debug_vector  
2e38				endm  
# End of macro CALLMONITOR
2e38				endif 
2e38			 
2e38					; save this location 
2e38				 
2e38 e5					push hl 
2e39			 
2e39 23					inc hl 
2e3a 11 fe f0				ld de, scratch+2 
2e3d 4f					ld c, a 
2e3e 06 00				ld b, 0 
2e40			 
2e40				if DEBUG_FORTH_WORDS 
2e40					DMARK "LSn" 
2e40 f5				push af  
2e41 3a 55 2e			ld a, (.dmark)  
2e44 32 a6 fd			ld (debug_mark),a  
2e47 3a 56 2e			ld a, (.dmark+1)  
2e4a 32 a7 fd			ld (debug_mark+1),a  
2e4d 3a 57 2e			ld a, (.dmark+2)  
2e50 32 a8 fd			ld (debug_mark+2),a  
2e53 18 03			jr .pastdmark  
2e55 ..			.dmark: db "LSn"  
2e58 f1			.pastdmark: pop af  
2e59			endm  
# End of macro DMARK
2e59					CALLMONITOR 
2e59 cd aa fd			call debug_vector  
2e5c				endm  
# End of macro CALLMONITOR
2e5c				endif 
2e5c			 
2e5c					; copy uword name to scratch 
2e5c			 
2e5c ed b0				ldir 
2e5e			 
2e5e 1b					dec de 
2e5f 3e 20				ld a, ' '    ; change null to space 
2e61 12					ld (de), a 
2e62			 
2e62 13					inc de 
2e63			 
2e63 d5					push de 
2e64 c1					pop bc     ; move scratch pointer to end of word name and save it 
2e65			 
2e65 e1					pop hl 
2e66 7e					ld a, (hl) 
2e67					;inc hl 
2e67					; skip word string 
2e67 cd db 0f				call addatohl 
2e6a			 
2e6a 23					inc hl 
2e6b			 
2e6b				if DEBUG_FORTH_WORDS 
2e6b					DMARK "LS3" 
2e6b f5				push af  
2e6c 3a 80 2e			ld a, (.dmark)  
2e6f 32 a6 fd			ld (debug_mark),a  
2e72 3a 81 2e			ld a, (.dmark+1)  
2e75 32 a7 fd			ld (debug_mark+1),a  
2e78 3a 82 2e			ld a, (.dmark+2)  
2e7b 32 a8 fd			ld (debug_mark+2),a  
2e7e 18 03			jr .pastdmark  
2e80 ..			.dmark: db "LS3"  
2e83 f1			.pastdmark: pop af  
2e84			endm  
# End of macro DMARK
2e84					CALLMONITOR 
2e84 cd aa fd			call debug_vector  
2e87				endm  
# End of macro CALLMONITOR
2e87				endif 
2e87					; should now be at the start of the machine code to setup the eval of the uword 
2e87					; now locate the ptr to the string defintion 
2e87			 
2e87					; skip ld hl, 
2e87					; then load the ptr 
2e87			; TODO use get from hl ptr 
2e87 23					inc hl 
2e88 5e					ld e, (hl) 
2e89 23					inc hl 
2e8a 56					ld d, (hl) 
2e8b eb					ex de, hl 
2e8c			 
2e8c			 
2e8c				if DEBUG_FORTH_WORDS 
2e8c					DMARK "LSt" 
2e8c f5				push af  
2e8d 3a a1 2e			ld a, (.dmark)  
2e90 32 a6 fd			ld (debug_mark),a  
2e93 3a a2 2e			ld a, (.dmark+1)  
2e96 32 a7 fd			ld (debug_mark+1),a  
2e99 3a a3 2e			ld a, (.dmark+2)  
2e9c 32 a8 fd			ld (debug_mark+2),a  
2e9f 18 03			jr .pastdmark  
2ea1 ..			.dmark: db "LSt"  
2ea4 f1			.pastdmark: pop af  
2ea5			endm  
# End of macro DMARK
2ea5					CALLMONITOR 
2ea5 cd aa fd			call debug_vector  
2ea8				endm  
# End of macro CALLMONITOR
2ea8				endif 
2ea8			 
2ea8			; cant push right now due to tokenised strings  
2ea8			 
2ea8			; get the destination of where to copy this definition to. 
2ea8			 
2ea8 c5					push bc 
2ea9 d1					pop de 
2eaa			 
2eaa 7e			.listl:         ld a,(hl) 
2eab fe 00				cp 0 
2ead 28 09				jr z, .lreplsp     ; replace zero with space 
2eaf					;cp FORTH_END_BUFFER 
2eaf fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2eb1 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2eb3				 
2eb3					; just copy this char as is then 
2eb3			 
2eb3 12					ld (de), a 
2eb4			 
2eb4 23			.listnxt:	inc hl 
2eb5 13					inc de 
2eb6 18 f2				jr .listl 
2eb8			 
2eb8 3e 20		.lreplsp:	ld a,' ' 
2eba 12					ld (de), a 
2ebb 18 f7				jr .listnxt 
2ebd			 
2ebd			; close up uword def 
2ebd			 
2ebd			.listdone: 
2ebd 12					ld (de), a 
2ebe 13					inc de 
2ebf 3e 00				ld a, 0 
2ec1 12					ld (de), a 
2ec2			 
2ec2			; now have def so clean up and push to stack 
2ec2			 
2ec2 21 fc f0				ld hl, scratch 
2ec5				if DEBUG_FORTH_WORDS 
2ec5					DMARK "Ltp" 
2ec5 f5				push af  
2ec6 3a da 2e			ld a, (.dmark)  
2ec9 32 a6 fd			ld (debug_mark),a  
2ecc 3a db 2e			ld a, (.dmark+1)  
2ecf 32 a7 fd			ld (debug_mark+1),a  
2ed2 3a dc 2e			ld a, (.dmark+2)  
2ed5 32 a8 fd			ld (debug_mark+2),a  
2ed8 18 03			jr .pastdmark  
2eda ..			.dmark: db "Ltp"  
2edd f1			.pastdmark: pop af  
2ede			endm  
# End of macro DMARK
2ede					CALLMONITOR 
2ede cd aa fd			call debug_vector  
2ee1				endm  
# End of macro CALLMONITOR
2ee1				endif 
2ee1			 
2ee1 18 1f			jr .listpush 
2ee3			 
2ee3			;.lnuword:	pop hl 
2ee3			;		call forth_tok_next 
2ee3			;		jp .ldouscan  
2ee3			 
2ee3			.lunotfound:		  
2ee3			 
2ee3				if DEBUG_FORTH_WORDS 
2ee3					DMARK "LSn" 
2ee3 f5				push af  
2ee4 3a f8 2e			ld a, (.dmark)  
2ee7 32 a6 fd			ld (debug_mark),a  
2eea 3a f9 2e			ld a, (.dmark+1)  
2eed 32 a7 fd			ld (debug_mark+1),a  
2ef0 3a fa 2e			ld a, (.dmark+2)  
2ef3 32 a8 fd			ld (debug_mark+2),a  
2ef6 18 03			jr .pastdmark  
2ef8 ..			.dmark: db "LSn"  
2efb f1			.pastdmark: pop af  
2efc			endm  
# End of macro DMARK
2efc					CALLMONITOR 
2efc cd aa fd			call debug_vector  
2eff				endm  
# End of macro CALLMONITOR
2eff				endif 
2eff			 
2eff					 
2eff			;		FORTH_DSP_POP 
2eff			;		ld hl, .luno 
2eff			 
2eff					NEXTW			 
2eff c3 ea 23			jp macro_next 
2f02				endm 
# End of macro NEXTW
2f02			 
2f02			.listpush: 
2f02				if DEBUG_FORTH_WORDS 
2f02					DMARK "LS>" 
2f02 f5				push af  
2f03 3a 17 2f			ld a, (.dmark)  
2f06 32 a6 fd			ld (debug_mark),a  
2f09 3a 18 2f			ld a, (.dmark+1)  
2f0c 32 a7 fd			ld (debug_mark+1),a  
2f0f 3a 19 2f			ld a, (.dmark+2)  
2f12 32 a8 fd			ld (debug_mark+2),a  
2f15 18 03			jr .pastdmark  
2f17 ..			.dmark: db "LS>"  
2f1a f1			.pastdmark: pop af  
2f1b			endm  
# End of macro DMARK
2f1b					CALLMONITOR 
2f1b cd aa fd			call debug_vector  
2f1e				endm  
# End of macro CALLMONITOR
2f1e				endif 
2f1e cd 9d 20				call forth_push_str 
2f21			 
2f21			 
2f21			 
2f21					NEXTW 
2f21 c3 ea 23			jp macro_next 
2f24				endm 
# End of macro NEXTW
2f24			 
2f24			;.luno:    db "Word not found",0 
2f24			 
2f24			 
2f24			 
2f24			 
2f24			 
2f24			;		push hl   ; save pointer to start of uword def string 
2f24			; 
2f24			;; look for FORTH_EOL_LINE 
2f24			;		ld a, FORTH_END_BUFFER 
2f24			;		call strlent 
2f24			; 
2f24			;		inc hl		 ; space for coln def 
2f24			;		inc hl 
2f24			;		inc hl          ; space for terms 
2f24			;		inc hl 
2f24			; 
2f24			;		ld a, 20   ; TODO get actual length 
2f24			;		call addatohl    ; include a random amount of room for the uword name 
2f24			; 
2f24			;		 
2f24			;	if DEBUG_FORTH_WORDS 
2f24			;		DMARK "Lt1" 
2f24			;		CALLMONITOR 
2f24			;	endif 
2f24			;		 
2f24			; 
2f24			;; malloc space for the string because we cant change it 
2f24			; 
2f24			;		call malloc 
2f24			;	if DEBUG_FORTH_MALLOC_GUARD 
2f24			;		push af 
2f24			;		call ishlzero 
2f24			;		pop af 
2f24			;		 
2f24			;		call z,malloc_error 
2f24			;	endif 
2f24			; 
2f24			;	if DEBUG_FORTH_WORDS 
2f24			;		DMARK "Lt2" 
2f24			;		CALLMONITOR 
2f24			;	endif 
2f24			;		pop de 
2f24			;		push hl    ; push the malloc to release later 
2f24			;		push hl   ;  push back a copy for the later stack push 
2f24			;		 
2f24			;; copy the string swapping out the zero terms for spaces 
2f24			; 
2f24			;		; de has our source 
2f24			;		; hl has our dest 
2f24			; 
2f24			;; add the coln def 
2f24			; 
2f24			;		ld a, ':' 
2f24			;		ld (hl), a 
2f24			;		inc hl 
2f24			;		ld a, ' ' 
2f24			;		ld (hl), a 
2f24			;		inc hl 
2f24			; 
2f24			;; add the uname word 
2f24			;		push de   ; save our string for now 
2f24			;		ex de, hl 
2f24			; 
2f24			;		FORTH_DSP_VALUE 
2f24			;		;v5 FORTH_DSP_VALUE 
2f24			; 
2f24			;		inc hl   ; skip type but we know by now this is OK 
2f24			; 
2f24			;.luword:	ld a,(hl) 
2f24			;		cp 0 
2f24			;		jr z, .luword2 
2f24			;		ld (de), a 
2f24			;		inc de 
2f24			;		inc hl 
2f24			;		jr .luword 
2f24			; 
2f24			;.luword2:	ld a, ' ' 
2f24			;		ld (de), a 
2f24			;;		inc hl 
2f24			;;		inc de 
2f24			;;		ld (de), a 
2f24			;;		inc hl 
2f24			;		inc de 
2f24			; 
2f24			;		ex de, hl 
2f24			;		pop de 
2f24			;		 
2f24			;		 
2f24			; 
2f24			;; detoken that string and copy it 
2f24			; 
2f24			;	if DEBUG_FORTH_WORDS 
2f24			;		DMARK "Lt2" 
2f24			;		CALLMONITOR 
2f24			;	endif 
2f24			;.ldetok:	ld a, (de) 
2f24			;		cp FORTH_END_BUFFER 
2f24			;		jr z, .ldetokend 
2f24			;		; swap out any zero term for space 
2f24			;		cp 0 
2f24			;		jr nz, .ldetoknext 
2f24			;		ld a, ' ' 
2f24			; 
2f24			;	if DEBUG_FORTH_WORDS 
2f24			;		DMARK "LtS" 
2f24			;		CALLMONITOR 
2f24			;	endif 
2f24			;.ldetoknext:	ld (hl), a 
2f24			;		inc de 
2f24			;		inc hl 
2f24			;		jr .ldetok 
2f24			; 
2f24			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2f24			;		ld (hl), a  
2f24			; 
2f24			;; free that temp malloc 
2f24			; 
2f24			;		pop hl    
2f24			; 
2f24			;	if DEBUG_FORTH_WORDS 
2f24			;		DMARK "Lt4" 
2f24			;		CALLMONITOR 
2f24			;	endif 
2f24			;		call forth_apushstrhl 
2f24			; 
2f24			;		; get rid of temp malloc area 
2f24			; 
2f24			;		pop hl 
2f24			;		call free 
2f24			; 
2f24			;		jr .ludone 
2f24			; 
2f24			;.lnuword:	pop hl 
2f24			;		call forth_tok_next 
2f24			;		jp .ldouscan  
2f24			; 
2f24			;.ludone:		 pop hl 
2f24			; 
2f24					NEXTW 
2f24 c3 ea 23			jp macro_next 
2f27				endm 
# End of macro NEXTW
2f27			 
2f27			.FORGET: 
2f27				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2f27 5d				db WORD_SYS_CORE+73             
2f28 a0 2f			dw .NOP            
2f2a 07				db 6 + 1 
2f2b .. 00			db "FORGET",0              
2f32				endm 
# End of macro CWHEAD
2f32			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2f32			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2f32			; | |  
2f32			; | | e.g. "MORE" forget 
2f32					if DEBUG_FORTH_WORDS_KEY 
2f32						DMARK "FRG" 
2f32 f5				push af  
2f33 3a 47 2f			ld a, (.dmark)  
2f36 32 a6 fd			ld (debug_mark),a  
2f39 3a 48 2f			ld a, (.dmark+1)  
2f3c 32 a7 fd			ld (debug_mark+1),a  
2f3f 3a 49 2f			ld a, (.dmark+2)  
2f42 32 a8 fd			ld (debug_mark+2),a  
2f45 18 03			jr .pastdmark  
2f47 ..			.dmark: db "FRG"  
2f4a f1			.pastdmark: pop af  
2f4b			endm  
# End of macro DMARK
2f4b						CALLMONITOR 
2f4b cd aa fd			call debug_vector  
2f4e				endm  
# End of macro CALLMONITOR
2f4e					endif 
2f4e			 
2f4e				; find uword 
2f4e			        ; update start of word with "_" 
2f4e				; replace uword with deleted flag 
2f4e			 
2f4e			 
2f4e			;	if DEBUG_FORTH_WORDS 
2f4e			;		DMARK "FOG" 
2f4e			;		CALLMONITOR 
2f4e			;	endif 
2f4e			 
2f4e			 
2f4e					; Get ptr to the word we need to look up 
2f4e			 
2f4e					FORTH_DSP_VALUEHL 
2f4e cd 34 22			call macro_dsp_valuehl 
2f51				endm 
# End of macro FORTH_DSP_VALUEHL
2f51					;v5 FORTH_DSP_VALUE 
2f51				; TODO type check 
2f51			;		inc hl    ; Skip type check  
2f51 e5					push hl 
2f52 c1					pop bc 
2f53			;		ex de, hl    ; put into DE 
2f53			 
2f53			 
2f53 21 00 80				ld hl, baseram 
2f56					;ld hl, baseusermem 
2f56			 
2f56				; skip dict stub 
2f56			;	call forth_tok_next 
2f56 e5			push hl   ; sacreifical push 
2f57			 
2f57			.fldouscanm: 
2f57 e1				pop hl 
2f58			.fldouscan: 
2f58			;	if DEBUG_FORTH_WORDS 
2f58			;		DMARK "LSs" 
2f58			;		CALLMONITOR 
2f58			;	endif 
2f58				; skip dict stub 
2f58 cd 3b 25				call forth_tok_next 
2f5b			 
2f5b			 
2f5b			; while we have words to look for 
2f5b			 
2f5b 7e				ld a, (hl)      
2f5c			;	if DEBUG_FORTH_WORDS 
2f5c			;		DMARK "LSk" 
2f5c			;		CALLMONITOR 
2f5c			;	endif 
2f5c fe 00				cp WORD_SYS_END 
2f5e ca 9a 2f				jp z, .flunotfound 
2f61 fe 01				cp WORD_SYS_UWORD 
2f63 c2 58 2f				jp nz, .fldouscan 
2f66			 
2f66			;	if DEBUG_FORTH_WORDS 
2f66			;		DMARK "LSu" 
2f66			;		CALLMONITOR 
2f66			;	endif 
2f66			 
2f66					; found a uword but is it the one we want... 
2f66			 
2f66 c5					push bc     ; uword to find is on bc 
2f67 d1					pop de 
2f68			 
2f68 e5					push hl  ; to save the ptr 
2f69			 
2f69					; skip opcode 
2f69 23					inc hl  
2f6a					; skip next ptr 
2f6a 23					inc hl  
2f6b 23					inc hl 
2f6c					; skip len 
2f6c 23					inc hl 
2f6d			 
2f6d			;	if DEBUG_FORTH_WORDS 
2f6d			;		DMARK "LSc" 
2f6d			;		CALLMONITOR 
2f6d			;	endif 
2f6d cd 79 13				call strcmp 
2f70 c2 57 2f				jp nz, .fldouscanm 
2f73			; 
2f73			; 
2f73			;; while we have words to look for 
2f73			; 
2f73			;.fdouscan:	ld a, (hl)      
2f73			;	if DEBUG_FORTH_WORDS 
2f73			;		DMARK "LSs" 
2f73			;		CALLMONITOR 
2f73			;	endif 
2f73			;		cp WORD_SYS_END 
2f73			;		jp z, .fudone 
2f73			;		cp WORD_SYS_UWORD 
2f73			;		jp nz, .fnuword 
2f73			; 
2f73			;	if DEBUG_FORTH_WORDS 
2f73			;		DMARK "FGu" 
2f73			;		CALLMONITOR 
2f73			;	endif 
2f73			; 
2f73			;		; found a uword but is it the one we want... 
2f73			; 
2f73			; 
2f73			;	        pop de   ; get back the dsp name 
2f73			;		push de 
2f73			; 
2f73			;		push hl  ; to save the ptr 
2f73			; 
2f73			;		; skip opcode 
2f73			;		inc hl  
2f73			;		; skip next ptr 
2f73			;		inc hl  
2f73			;		inc hl 
2f73			;		; skip len 
2f73			;		inc hl 
2f73			; 
2f73			;	if DEBUG_FORTH_WORDS 
2f73			;		DMARK "FGc" 
2f73			;		CALLMONITOR 
2f73			;	endif 
2f73			;		call strcmp 
2f73			;		jp nz, .fnuword 
2f73			 
2f73			 
2f73 e1			pop hl 
2f74			 
2f74				 
2f74				if DEBUG_FORTH_WORDS 
2f74					DMARK "FGm" 
2f74 f5				push af  
2f75 3a 89 2f			ld a, (.dmark)  
2f78 32 a6 fd			ld (debug_mark),a  
2f7b 3a 8a 2f			ld a, (.dmark+1)  
2f7e 32 a7 fd			ld (debug_mark+1),a  
2f81 3a 8b 2f			ld a, (.dmark+2)  
2f84 32 a8 fd			ld (debug_mark+2),a  
2f87 18 03			jr .pastdmark  
2f89 ..			.dmark: db "FGm"  
2f8c f1			.pastdmark: pop af  
2f8d			endm  
# End of macro DMARK
2f8d					CALLMONITOR 
2f8d cd aa fd			call debug_vector  
2f90				endm  
# End of macro CALLMONITOR
2f90				endif 
2f90			 
2f90			 
2f90			 
2f90					; we have a uword so push its name to the stack 
2f90			 
2f90			;	   	push hl  ; save so we can move to next dict block 
2f90			;pop hl 
2f90			 
2f90					; update opcode to deleted 
2f90 3e 03				ld a, WORD_SYS_DELETED 
2f92 77					ld (hl), a 
2f93			 
2f93 23					inc hl  
2f94					; skip next ptr 
2f94 23					inc hl  
2f95 23					inc hl 
2f96					; skip len 
2f96 23					inc hl 
2f97			 
2f97					; TODO change parser to skip deleted words but for now mark it out 
2f97 3e 5f				ld a, "_" 
2f99 77					ld  (hl),a 
2f9a			 
2f9a			;		jr .fudone 
2f9a			; 
2f9a			;.fnuword:	pop hl 
2f9a			;		call forth_tok_next 
2f9a			;		jp .fdouscan  
2f9a			 
2f9a			.flunotfound:		  
2f9a			 
2f9a			 
2f9a					 
2f9a					FORTH_DSP_POP 
2f9a cd ec 22			call macro_forth_dsp_pop 
2f9d				endm 
# End of macro FORTH_DSP_POP
2f9d			;		ld hl, .luno 
2f9d			;.fudone:		 pop hl 
2f9d					NEXTW 
2f9d c3 ea 23			jp macro_next 
2fa0				endm 
# End of macro NEXTW
2fa0			.NOP: 
2fa0				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2fa0 61				db WORD_SYS_CORE+77             
2fa1 c7 2f			dw .COMO            
2fa3 04				db 3 + 1 
2fa4 .. 00			db "NOP",0              
2fa8				endm 
# End of macro CWHEAD
2fa8			; | NOP (  --  ) Do nothing | DONE 
2fa8					if DEBUG_FORTH_WORDS_KEY 
2fa8						DMARK "NOP" 
2fa8 f5				push af  
2fa9 3a bd 2f			ld a, (.dmark)  
2fac 32 a6 fd			ld (debug_mark),a  
2faf 3a be 2f			ld a, (.dmark+1)  
2fb2 32 a7 fd			ld (debug_mark+1),a  
2fb5 3a bf 2f			ld a, (.dmark+2)  
2fb8 32 a8 fd			ld (debug_mark+2),a  
2fbb 18 03			jr .pastdmark  
2fbd ..			.dmark: db "NOP"  
2fc0 f1			.pastdmark: pop af  
2fc1			endm  
# End of macro DMARK
2fc1						CALLMONITOR 
2fc1 cd aa fd			call debug_vector  
2fc4				endm  
# End of macro CALLMONITOR
2fc4					endif 
2fc4				       NEXTW 
2fc4 c3 ea 23			jp macro_next 
2fc7				endm 
# End of macro NEXTW
2fc7			.COMO: 
2fc7				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2fc7 6e				db WORD_SYS_CORE+90             
2fc8 19 30			dw .COMC            
2fca 02				db 1 + 1 
2fcb .. 00			db "(",0              
2fcd				endm 
# End of macro CWHEAD
2fcd			; | ( ( -- )  Start of comment | DONE 
2fcd			 
2fcd			 
2fcd 2a fd f3				ld hl, ( os_tok_ptr) 
2fd0 11 14 30			ld de, .closepar 
2fd3					 
2fd3					if DEBUG_FORTH_WORDS 
2fd3						DMARK ").." 
2fd3 f5				push af  
2fd4 3a e8 2f			ld a, (.dmark)  
2fd7 32 a6 fd			ld (debug_mark),a  
2fda 3a e9 2f			ld a, (.dmark+1)  
2fdd 32 a7 fd			ld (debug_mark+1),a  
2fe0 3a ea 2f			ld a, (.dmark+2)  
2fe3 32 a8 fd			ld (debug_mark+2),a  
2fe6 18 03			jr .pastdmark  
2fe8 ..			.dmark: db ").."  
2feb f1			.pastdmark: pop af  
2fec			endm  
# End of macro DMARK
2fec						CALLMONITOR 
2fec cd aa fd			call debug_vector  
2fef				endm  
# End of macro CALLMONITOR
2fef					endif 
2fef cd 05 25			call findnexttok  
2ff2			 
2ff2					if DEBUG_FORTH_WORDS 
2ff2						DMARK "IF5" 
2ff2 f5				push af  
2ff3 3a 07 30			ld a, (.dmark)  
2ff6 32 a6 fd			ld (debug_mark),a  
2ff9 3a 08 30			ld a, (.dmark+1)  
2ffc 32 a7 fd			ld (debug_mark+1),a  
2fff 3a 09 30			ld a, (.dmark+2)  
3002 32 a8 fd			ld (debug_mark+2),a  
3005 18 03			jr .pastdmark  
3007 ..			.dmark: db "IF5"  
300a f1			.pastdmark: pop af  
300b			endm  
# End of macro DMARK
300b						CALLMONITOR 
300b cd aa fd			call debug_vector  
300e				endm  
# End of macro CALLMONITOR
300e					endif 
300e				; replace below with ) exec using tok_ptr 
300e 22 fd f3			ld (os_tok_ptr), hl 
3011 c3 7b 24			jp exec1 
3014			 
3014 .. 00			.closepar:   db ")",0 
3016			 
3016				       NEXTW 
3016 c3 ea 23			jp macro_next 
3019				endm 
# End of macro NEXTW
3019			.COMC: 
3019				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
3019 6f				db WORD_SYS_CORE+91             
301a 22 30			dw .SCRATCH            
301c 02				db 1 + 1 
301d .. 00			db ")",0              
301f				endm 
# End of macro CWHEAD
301f			; | ) ( -- )  End of comment |  DONE  
301f				       NEXTW 
301f c3 ea 23			jp macro_next 
3022				endm 
# End of macro NEXTW
3022			 
3022			.SCRATCH: 
3022				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
3022 6f				db WORD_SYS_CORE+91             
3023 5d 30			dw .INC            
3025 08				db 7 + 1 
3026 .. 00			db "SCRATCH",0              
302e				endm 
# End of macro CWHEAD
302e			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
302e			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
302e			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
302e			; | |  
302e			; | | e.g.    : score $00 scratch ; 
302e			; | |  
302e			; | | $00 score ! 
302e			; | | $01 score +! 
302e			; | |  
302e			; | | e.g.   : varword $0a scratch ;  
302e			; | | 
302e			; | | $8000 varword ! 
302e					if DEBUG_FORTH_WORDS_KEY 
302e						DMARK "SCR" 
302e f5				push af  
302f 3a 43 30			ld a, (.dmark)  
3032 32 a6 fd			ld (debug_mark),a  
3035 3a 44 30			ld a, (.dmark+1)  
3038 32 a7 fd			ld (debug_mark+1),a  
303b 3a 45 30			ld a, (.dmark+2)  
303e 32 a8 fd			ld (debug_mark+2),a  
3041 18 03			jr .pastdmark  
3043 ..			.dmark: db "SCR"  
3046 f1			.pastdmark: pop af  
3047			endm  
# End of macro DMARK
3047						CALLMONITOR 
3047 cd aa fd			call debug_vector  
304a				endm  
# End of macro CALLMONITOR
304a					endif 
304a			 
304a					FORTH_DSP_VALUEHL 
304a cd 34 22			call macro_dsp_valuehl 
304d				endm 
# End of macro FORTH_DSP_VALUEHL
304d				 
304d					FORTH_DSP_POP 
304d cd ec 22			call macro_forth_dsp_pop 
3050				endm 
# End of macro FORTH_DSP_POP
3050			 
3050 7d					ld a, l 
3051 21 21 f6				ld hl, os_var_array 
3054 cd db 0f				call addatohl 
3057			 
3057 cd 2f 20				call forth_push_numhl 
305a			 
305a				       NEXTW 
305a c3 ea 23			jp macro_next 
305d				endm 
# End of macro NEXTW
305d			 
305d			.INC: 
305d				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
305d 6f				db WORD_SYS_CORE+91             
305e b3 30			dw .DEC            
3060 03				db 2 + 1 
3061 .. 00			db "+!",0              
3064				endm 
# End of macro CWHEAD
3064			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
3064					if DEBUG_FORTH_WORDS_KEY 
3064						DMARK "+s_" 
3064 f5				push af  
3065 3a 79 30			ld a, (.dmark)  
3068 32 a6 fd			ld (debug_mark),a  
306b 3a 7a 30			ld a, (.dmark+1)  
306e 32 a7 fd			ld (debug_mark+1),a  
3071 3a 7b 30			ld a, (.dmark+2)  
3074 32 a8 fd			ld (debug_mark+2),a  
3077 18 03			jr .pastdmark  
3079 ..			.dmark: db "+s_"  
307c f1			.pastdmark: pop af  
307d			endm  
# End of macro DMARK
307d						CALLMONITOR 
307d cd aa fd			call debug_vector  
3080				endm  
# End of macro CALLMONITOR
3080					endif 
3080			 
3080					FORTH_DSP_VALUEHL 
3080 cd 34 22			call macro_dsp_valuehl 
3083				endm 
# End of macro FORTH_DSP_VALUEHL
3083			 
3083 e5					push hl   ; save address 
3084			 
3084					FORTH_DSP_POP 
3084 cd ec 22			call macro_forth_dsp_pop 
3087				endm 
# End of macro FORTH_DSP_POP
3087			 
3087					FORTH_DSP_VALUEHL 
3087 cd 34 22			call macro_dsp_valuehl 
308a				endm 
# End of macro FORTH_DSP_VALUEHL
308a			 
308a e5					push hl 
308b					FORTH_DSP_POP 
308b cd ec 22			call macro_forth_dsp_pop 
308e				endm 
# End of macro FORTH_DSP_POP
308e e1					pop hl 
308f			 
308f					; hl contains value to add to byte at a 
308f				 
308f eb					ex de, hl 
3090			 
3090 e1					pop hl 
3091			 
3091					if DEBUG_FORTH_WORDS 
3091						DMARK "INC" 
3091 f5				push af  
3092 3a a6 30			ld a, (.dmark)  
3095 32 a6 fd			ld (debug_mark),a  
3098 3a a7 30			ld a, (.dmark+1)  
309b 32 a7 fd			ld (debug_mark+1),a  
309e 3a a8 30			ld a, (.dmark+2)  
30a1 32 a8 fd			ld (debug_mark+2),a  
30a4 18 03			jr .pastdmark  
30a6 ..			.dmark: db "INC"  
30a9 f1			.pastdmark: pop af  
30aa			endm  
# End of macro DMARK
30aa						CALLMONITOR 
30aa cd aa fd			call debug_vector  
30ad				endm  
# End of macro CALLMONITOR
30ad					endif 
30ad			 
30ad 7e					ld a,(hl) 
30ae 83					add e 
30af 77					ld (hl),a 
30b0			 
30b0			 
30b0			 
30b0				       NEXTW 
30b0 c3 ea 23			jp macro_next 
30b3				endm 
# End of macro NEXTW
30b3			 
30b3			.DEC: 
30b3				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
30b3 6f				db WORD_SYS_CORE+91             
30b4 07 31			dw .INC2            
30b6 03				db 2 + 1 
30b7 .. 00			db "-!",0              
30ba				endm 
# End of macro CWHEAD
30ba			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
30ba					if DEBUG_FORTH_WORDS_KEY 
30ba						DMARK "-s_" 
30ba f5				push af  
30bb 3a cf 30			ld a, (.dmark)  
30be 32 a6 fd			ld (debug_mark),a  
30c1 3a d0 30			ld a, (.dmark+1)  
30c4 32 a7 fd			ld (debug_mark+1),a  
30c7 3a d1 30			ld a, (.dmark+2)  
30ca 32 a8 fd			ld (debug_mark+2),a  
30cd 18 03			jr .pastdmark  
30cf ..			.dmark: db "-s_"  
30d2 f1			.pastdmark: pop af  
30d3			endm  
# End of macro DMARK
30d3						CALLMONITOR 
30d3 cd aa fd			call debug_vector  
30d6				endm  
# End of macro CALLMONITOR
30d6					endif 
30d6			 
30d6					FORTH_DSP_VALUEHL 
30d6 cd 34 22			call macro_dsp_valuehl 
30d9				endm 
# End of macro FORTH_DSP_VALUEHL
30d9			 
30d9 e5					push hl   ; save address 
30da			 
30da					FORTH_DSP_POP 
30da cd ec 22			call macro_forth_dsp_pop 
30dd				endm 
# End of macro FORTH_DSP_POP
30dd			 
30dd					FORTH_DSP_VALUEHL 
30dd cd 34 22			call macro_dsp_valuehl 
30e0				endm 
# End of macro FORTH_DSP_VALUEHL
30e0			 
30e0					; hl contains value to add to byte at a 
30e0				 
30e0 eb					ex de, hl 
30e1			 
30e1 e1					pop hl 
30e2			 
30e2					if DEBUG_FORTH_WORDS 
30e2						DMARK "DEC" 
30e2 f5				push af  
30e3 3a f7 30			ld a, (.dmark)  
30e6 32 a6 fd			ld (debug_mark),a  
30e9 3a f8 30			ld a, (.dmark+1)  
30ec 32 a7 fd			ld (debug_mark+1),a  
30ef 3a f9 30			ld a, (.dmark+2)  
30f2 32 a8 fd			ld (debug_mark+2),a  
30f5 18 03			jr .pastdmark  
30f7 ..			.dmark: db "DEC"  
30fa f1			.pastdmark: pop af  
30fb			endm  
# End of macro DMARK
30fb						CALLMONITOR 
30fb cd aa fd			call debug_vector  
30fe				endm  
# End of macro CALLMONITOR
30fe					endif 
30fe			 
30fe 7e					ld a,(hl) 
30ff 93					sub e 
3100 77					ld (hl),a 
3101			 
3101			 
3101					FORTH_DSP_POP 
3101 cd ec 22			call macro_forth_dsp_pop 
3104				endm 
# End of macro FORTH_DSP_POP
3104			 
3104				       NEXTW 
3104 c3 ea 23			jp macro_next 
3107				endm 
# End of macro NEXTW
3107			 
3107			.INC2: 
3107				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
3107 6f				db WORD_SYS_CORE+91             
3108 b4 31			dw .DEC2            
310a 04				db 3 + 1 
310b .. 00			db "+2!",0              
310f				endm 
# End of macro CWHEAD
310f			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
310f			 
310f					if DEBUG_FORTH_WORDS_KEY 
310f						DMARK "+2s" 
310f f5				push af  
3110 3a 24 31			ld a, (.dmark)  
3113 32 a6 fd			ld (debug_mark),a  
3116 3a 25 31			ld a, (.dmark+1)  
3119 32 a7 fd			ld (debug_mark+1),a  
311c 3a 26 31			ld a, (.dmark+2)  
311f 32 a8 fd			ld (debug_mark+2),a  
3122 18 03			jr .pastdmark  
3124 ..			.dmark: db "+2s"  
3127 f1			.pastdmark: pop af  
3128			endm  
# End of macro DMARK
3128						CALLMONITOR 
3128 cd aa fd			call debug_vector  
312b				endm  
# End of macro CALLMONITOR
312b					endif 
312b			 
312b					; Address 
312b			 
312b					FORTH_DSP_VALUEHL 
312b cd 34 22			call macro_dsp_valuehl 
312e				endm 
# End of macro FORTH_DSP_VALUEHL
312e			 
312e e5					push hl    ; save address 
312f			 
312f					; load content into de 
312f			 
312f 5e					ld e,(hl) 
3130 23					inc hl 
3131 56					ld d, (hl) 
3132			 
3132					if DEBUG_FORTH_WORDS 
3132						DMARK "+2a" 
3132 f5				push af  
3133 3a 47 31			ld a, (.dmark)  
3136 32 a6 fd			ld (debug_mark),a  
3139 3a 48 31			ld a, (.dmark+1)  
313c 32 a7 fd			ld (debug_mark+1),a  
313f 3a 49 31			ld a, (.dmark+2)  
3142 32 a8 fd			ld (debug_mark+2),a  
3145 18 03			jr .pastdmark  
3147 ..			.dmark: db "+2a"  
314a f1			.pastdmark: pop af  
314b			endm  
# End of macro DMARK
314b						CALLMONITOR 
314b cd aa fd			call debug_vector  
314e				endm  
# End of macro CALLMONITOR
314e					endif 
314e			 
314e					FORTH_DSP_POP 
314e cd ec 22			call macro_forth_dsp_pop 
3151				endm 
# End of macro FORTH_DSP_POP
3151			 
3151					; Get value to add 
3151			 
3151					FORTH_DSP_VALUE 
3151 cd 1d 22			call macro_forth_dsp_value 
3154				endm 
# End of macro FORTH_DSP_VALUE
3154			 
3154					if DEBUG_FORTH_WORDS 
3154						DMARK "+2v" 
3154 f5				push af  
3155 3a 69 31			ld a, (.dmark)  
3158 32 a6 fd			ld (debug_mark),a  
315b 3a 6a 31			ld a, (.dmark+1)  
315e 32 a7 fd			ld (debug_mark+1),a  
3161 3a 6b 31			ld a, (.dmark+2)  
3164 32 a8 fd			ld (debug_mark+2),a  
3167 18 03			jr .pastdmark  
3169 ..			.dmark: db "+2v"  
316c f1			.pastdmark: pop af  
316d			endm  
# End of macro DMARK
316d						CALLMONITOR 
316d cd aa fd			call debug_vector  
3170				endm  
# End of macro CALLMONITOR
3170					endif 
3170			 
3170 19					add hl, de 
3171			 
3171					if DEBUG_FORTH_WORDS 
3171						DMARK "+2+" 
3171 f5				push af  
3172 3a 86 31			ld a, (.dmark)  
3175 32 a6 fd			ld (debug_mark),a  
3178 3a 87 31			ld a, (.dmark+1)  
317b 32 a7 fd			ld (debug_mark+1),a  
317e 3a 88 31			ld a, (.dmark+2)  
3181 32 a8 fd			ld (debug_mark+2),a  
3184 18 03			jr .pastdmark  
3186 ..			.dmark: db "+2+"  
3189 f1			.pastdmark: pop af  
318a			endm  
# End of macro DMARK
318a						CALLMONITOR 
318a cd aa fd			call debug_vector  
318d				endm  
# End of macro CALLMONITOR
318d					endif 
318d			 
318d					; move result to de 
318d			 
318d eb					ex de, hl 
318e			 
318e					; Address 
318e			 
318e e1					pop hl 
318f			 
318f					; save it back 
318f			 
318f 73					ld (hl), e 
3190 23					inc hl 
3191 72					ld (hl), d 
3192			 
3192					if DEBUG_FORTH_WORDS 
3192						DMARK "+2e" 
3192 f5				push af  
3193 3a a7 31			ld a, (.dmark)  
3196 32 a6 fd			ld (debug_mark),a  
3199 3a a8 31			ld a, (.dmark+1)  
319c 32 a7 fd			ld (debug_mark+1),a  
319f 3a a9 31			ld a, (.dmark+2)  
31a2 32 a8 fd			ld (debug_mark+2),a  
31a5 18 03			jr .pastdmark  
31a7 ..			.dmark: db "+2e"  
31aa f1			.pastdmark: pop af  
31ab			endm  
# End of macro DMARK
31ab						CALLMONITOR 
31ab cd aa fd			call debug_vector  
31ae				endm  
# End of macro CALLMONITOR
31ae					endif 
31ae			 
31ae			 
31ae			 
31ae					FORTH_DSP_POP 
31ae cd ec 22			call macro_forth_dsp_pop 
31b1				endm 
# End of macro FORTH_DSP_POP
31b1			 
31b1			 
31b1				       NEXTW 
31b1 c3 ea 23			jp macro_next 
31b4				endm 
# End of macro NEXTW
31b4			 
31b4			.DEC2: 
31b4				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
31b4 6f				db WORD_SYS_CORE+91             
31b5 63 32			dw .GET2            
31b7 04				db 3 + 1 
31b8 .. 00			db "-2!",0              
31bc				endm 
# End of macro CWHEAD
31bc			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
31bc			 
31bc			 
31bc					if DEBUG_FORTH_WORDS_KEY 
31bc						DMARK "-2s" 
31bc f5				push af  
31bd 3a d1 31			ld a, (.dmark)  
31c0 32 a6 fd			ld (debug_mark),a  
31c3 3a d2 31			ld a, (.dmark+1)  
31c6 32 a7 fd			ld (debug_mark+1),a  
31c9 3a d3 31			ld a, (.dmark+2)  
31cc 32 a8 fd			ld (debug_mark+2),a  
31cf 18 03			jr .pastdmark  
31d1 ..			.dmark: db "-2s"  
31d4 f1			.pastdmark: pop af  
31d5			endm  
# End of macro DMARK
31d5						CALLMONITOR 
31d5 cd aa fd			call debug_vector  
31d8				endm  
# End of macro CALLMONITOR
31d8					endif 
31d8			 
31d8					; Address 
31d8			 
31d8					FORTH_DSP_VALUEHL 
31d8 cd 34 22			call macro_dsp_valuehl 
31db				endm 
# End of macro FORTH_DSP_VALUEHL
31db			 
31db e5					push hl    ; save address 
31dc			 
31dc					; load content into de 
31dc			 
31dc 5e					ld e,(hl) 
31dd 23					inc hl 
31de 56					ld d, (hl) 
31df			 
31df					if DEBUG_FORTH_WORDS 
31df						DMARK "-2a" 
31df f5				push af  
31e0 3a f4 31			ld a, (.dmark)  
31e3 32 a6 fd			ld (debug_mark),a  
31e6 3a f5 31			ld a, (.dmark+1)  
31e9 32 a7 fd			ld (debug_mark+1),a  
31ec 3a f6 31			ld a, (.dmark+2)  
31ef 32 a8 fd			ld (debug_mark+2),a  
31f2 18 03			jr .pastdmark  
31f4 ..			.dmark: db "-2a"  
31f7 f1			.pastdmark: pop af  
31f8			endm  
# End of macro DMARK
31f8						CALLMONITOR 
31f8 cd aa fd			call debug_vector  
31fb				endm  
# End of macro CALLMONITOR
31fb					endif 
31fb			 
31fb					FORTH_DSP_POP 
31fb cd ec 22			call macro_forth_dsp_pop 
31fe				endm 
# End of macro FORTH_DSP_POP
31fe			 
31fe					; Get value to remove 
31fe			 
31fe					FORTH_DSP_VALUE 
31fe cd 1d 22			call macro_forth_dsp_value 
3201				endm 
# End of macro FORTH_DSP_VALUE
3201			 
3201					if DEBUG_FORTH_WORDS 
3201						DMARK "-2v" 
3201 f5				push af  
3202 3a 16 32			ld a, (.dmark)  
3205 32 a6 fd			ld (debug_mark),a  
3208 3a 17 32			ld a, (.dmark+1)  
320b 32 a7 fd			ld (debug_mark+1),a  
320e 3a 18 32			ld a, (.dmark+2)  
3211 32 a8 fd			ld (debug_mark+2),a  
3214 18 03			jr .pastdmark  
3216 ..			.dmark: db "-2v"  
3219 f1			.pastdmark: pop af  
321a			endm  
# End of macro DMARK
321a						CALLMONITOR 
321a cd aa fd			call debug_vector  
321d				endm  
# End of macro CALLMONITOR
321d					endif 
321d			 
321d eb					ex de, hl 
321e ed 52				sbc hl, de 
3220			 
3220					if DEBUG_FORTH_WORDS 
3220						DMARK "-2d" 
3220 f5				push af  
3221 3a 35 32			ld a, (.dmark)  
3224 32 a6 fd			ld (debug_mark),a  
3227 3a 36 32			ld a, (.dmark+1)  
322a 32 a7 fd			ld (debug_mark+1),a  
322d 3a 37 32			ld a, (.dmark+2)  
3230 32 a8 fd			ld (debug_mark+2),a  
3233 18 03			jr .pastdmark  
3235 ..			.dmark: db "-2d"  
3238 f1			.pastdmark: pop af  
3239			endm  
# End of macro DMARK
3239						CALLMONITOR 
3239 cd aa fd			call debug_vector  
323c				endm  
# End of macro CALLMONITOR
323c					endif 
323c			 
323c					; move result to de 
323c			 
323c eb					ex de, hl 
323d			 
323d					; Address 
323d			 
323d e1					pop hl 
323e			 
323e					; save it back 
323e			 
323e 73					ld (hl), e 
323f 23					inc hl 
3240 72					ld (hl), d 
3241			 
3241					if DEBUG_FORTH_WORDS 
3241						DMARK "-2e" 
3241 f5				push af  
3242 3a 56 32			ld a, (.dmark)  
3245 32 a6 fd			ld (debug_mark),a  
3248 3a 57 32			ld a, (.dmark+1)  
324b 32 a7 fd			ld (debug_mark+1),a  
324e 3a 58 32			ld a, (.dmark+2)  
3251 32 a8 fd			ld (debug_mark+2),a  
3254 18 03			jr .pastdmark  
3256 ..			.dmark: db "-2e"  
3259 f1			.pastdmark: pop af  
325a			endm  
# End of macro DMARK
325a						CALLMONITOR 
325a cd aa fd			call debug_vector  
325d				endm  
# End of macro CALLMONITOR
325d					endif 
325d			 
325d			 
325d					FORTH_DSP_POP 
325d cd ec 22			call macro_forth_dsp_pop 
3260				endm 
# End of macro FORTH_DSP_POP
3260			 
3260			 
3260			 
3260				       NEXTW 
3260 c3 ea 23			jp macro_next 
3263				endm 
# End of macro NEXTW
3263			.GET2: 
3263				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
3263 6f				db WORD_SYS_CORE+91             
3264 98 32			dw .BANG2            
3266 03				db 2 + 1 
3267 .. 00			db "2@",0              
326a				endm 
# End of macro CWHEAD
326a			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
326a					if DEBUG_FORTH_WORDS_KEY 
326a						DMARK "2A_" 
326a f5				push af  
326b 3a 7f 32			ld a, (.dmark)  
326e 32 a6 fd			ld (debug_mark),a  
3271 3a 80 32			ld a, (.dmark+1)  
3274 32 a7 fd			ld (debug_mark+1),a  
3277 3a 81 32			ld a, (.dmark+2)  
327a 32 a8 fd			ld (debug_mark+2),a  
327d 18 03			jr .pastdmark  
327f ..			.dmark: db "2A_"  
3282 f1			.pastdmark: pop af  
3283			endm  
# End of macro DMARK
3283						CALLMONITOR 
3283 cd aa fd			call debug_vector  
3286				endm  
# End of macro CALLMONITOR
3286					endif 
3286			 
3286					FORTH_DSP_VALUEHL 
3286 cd 34 22			call macro_dsp_valuehl 
3289				endm 
# End of macro FORTH_DSP_VALUEHL
3289			 
3289 e5					push hl   ; save address 
328a			 
328a					FORTH_DSP_POP 
328a cd ec 22			call macro_forth_dsp_pop 
328d				endm 
# End of macro FORTH_DSP_POP
328d			 
328d e1					pop hl 
328e			 
328e 5e					ld e, (hl) 
328f 23					inc hl 
3290 56					ld d, (hl) 
3291			 
3291 eb					ex de, hl 
3292			 
3292 cd 2f 20				call forth_push_numhl 
3295			 
3295				       NEXTW 
3295 c3 ea 23			jp macro_next 
3298				endm 
# End of macro NEXTW
3298			.BANG2: 
3298				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
3298 6f				db WORD_SYS_CORE+91             
3299 d0 32			dw .CONFIG            
329b 03				db 2 + 1 
329c .. 00			db "2!",0              
329f				endm 
# End of macro CWHEAD
329f			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
329f					if DEBUG_FORTH_WORDS_KEY 
329f						DMARK "2S_" 
329f f5				push af  
32a0 3a b4 32			ld a, (.dmark)  
32a3 32 a6 fd			ld (debug_mark),a  
32a6 3a b5 32			ld a, (.dmark+1)  
32a9 32 a7 fd			ld (debug_mark+1),a  
32ac 3a b6 32			ld a, (.dmark+2)  
32af 32 a8 fd			ld (debug_mark+2),a  
32b2 18 03			jr .pastdmark  
32b4 ..			.dmark: db "2S_"  
32b7 f1			.pastdmark: pop af  
32b8			endm  
# End of macro DMARK
32b8						CALLMONITOR 
32b8 cd aa fd			call debug_vector  
32bb				endm  
# End of macro CALLMONITOR
32bb					endif 
32bb			 
32bb					FORTH_DSP_VALUEHL 
32bb cd 34 22			call macro_dsp_valuehl 
32be				endm 
# End of macro FORTH_DSP_VALUEHL
32be			 
32be e5					push hl   ; save address 
32bf			 
32bf			 
32bf					FORTH_DSP_POP 
32bf cd ec 22			call macro_forth_dsp_pop 
32c2				endm 
# End of macro FORTH_DSP_POP
32c2			 
32c2					 
32c2					FORTH_DSP_VALUEHL 
32c2 cd 34 22			call macro_dsp_valuehl 
32c5				endm 
# End of macro FORTH_DSP_VALUEHL
32c5			 
32c5					FORTH_DSP_POP 
32c5 cd ec 22			call macro_forth_dsp_pop 
32c8				endm 
# End of macro FORTH_DSP_POP
32c8			 
32c8 eb					ex de, hl    ; value now in de 
32c9			 
32c9 e1					pop hl 
32ca			 
32ca 73					ld (hl), e 
32cb			 
32cb 23					inc hl 
32cc			 
32cc 72					ld (hl), d 
32cd			 
32cd			 
32cd				       NEXTW 
32cd c3 ea 23			jp macro_next 
32d0				endm 
# End of macro NEXTW
32d0			.CONFIG: 
32d0				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
32d0 6f				db WORD_SYS_CORE+91             
32d1 e1 32			dw .ADTOS            
32d3 07				db 6 + 1 
32d4 .. 00			db "CONFIG",0              
32db				endm 
# End of macro CWHEAD
32db			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
32db			 
32db cd 4f 15				call config 
32de					NEXTW 
32de c3 ea 23			jp macro_next 
32e1				endm 
# End of macro NEXTW
32e1			 
32e1			.ADTOS: 
32e1				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
32e1 6f				db WORD_SYS_CORE+91             
32e2 f7 32			dw .SBTOS            
32e4 03				db 2 + 1 
32e5 .. 00			db "1+",0              
32e8				endm 
# End of macro CWHEAD
32e8			; | 1+ ( u -- u )  Increment value on TOS | DONE 
32e8			 
32e8					FORTH_DSP_VALUEHL 
32e8 cd 34 22			call macro_dsp_valuehl 
32eb				endm 
# End of macro FORTH_DSP_VALUEHL
32eb e5					push hl 
32ec			 
32ec					FORTH_DSP_POP 
32ec cd ec 22			call macro_forth_dsp_pop 
32ef				endm 
# End of macro FORTH_DSP_POP
32ef e1					pop hl 
32f0			 
32f0 23					inc hl 
32f1 cd 2f 20				call forth_push_numhl 
32f4					 
32f4					NEXTW 
32f4 c3 ea 23			jp macro_next 
32f7				endm 
# End of macro NEXTW
32f7			.SBTOS: 
32f7				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
32f7 6f				db WORD_SYS_CORE+91             
32f8 0d 33			dw .ADSTORE            
32fa 03				db 2 + 1 
32fb .. 00			db "1-",0              
32fe				endm 
# End of macro CWHEAD
32fe			; | 1- ( u -- u )  Decrement value on TOS | DONE 
32fe			 
32fe					FORTH_DSP_VALUEHL 
32fe cd 34 22			call macro_dsp_valuehl 
3301				endm 
# End of macro FORTH_DSP_VALUEHL
3301 e5					push hl 
3302			 
3302					FORTH_DSP_POP 
3302 cd ec 22			call macro_forth_dsp_pop 
3305				endm 
# End of macro FORTH_DSP_POP
3305 e1					pop hl 
3306			 
3306 2b					dec hl 
3307 cd 2f 20				call forth_push_numhl 
330a					 
330a					NEXTW 
330a c3 ea 23			jp macro_next 
330d				endm 
# End of macro NEXTW
330d			.ADSTORE: 
330d				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
330d 6f				db WORD_SYS_CORE+91             
330e 23 33			dw .ADWSTORE            
3310 04				db 3 + 1 
3311 .. 00			db "1+!",0              
3315				endm 
# End of macro CWHEAD
3315			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
3315			 
3315					FORTH_DSP_VALUEHL 
3315 cd 34 22			call macro_dsp_valuehl 
3318				endm 
# End of macro FORTH_DSP_VALUEHL
3318 e5					push hl 
3319			 
3319					FORTH_DSP_POP 
3319 cd ec 22			call macro_forth_dsp_pop 
331c				endm 
# End of macro FORTH_DSP_POP
331c e1					pop hl 
331d			 
331d 7e					ld a, (hl) 
331e 3c					inc a 
331f 77					ld (hl), a 
3320					 
3320					NEXTW 
3320 c3 ea 23			jp macro_next 
3323				endm 
# End of macro NEXTW
3323			.ADWSTORE: 
3323				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
3323 6f				db WORD_SYS_CORE+91             
3324 41 33			dw .SBSTORE            
3326 05				db 4 + 1 
3327 .. 00			db "1+2!",0              
332c				endm 
# End of macro CWHEAD
332c			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
332c			 
332c					FORTH_DSP_VALUEHL 
332c cd 34 22			call macro_dsp_valuehl 
332f				endm 
# End of macro FORTH_DSP_VALUEHL
332f e5					push hl 
3330			 
3330					FORTH_DSP_POP 
3330 cd ec 22			call macro_forth_dsp_pop 
3333				endm 
# End of macro FORTH_DSP_POP
3333 e1					pop hl 
3334			 
3334 e5					push hl 
3335			 
3335 cd 6c 23				call loadwordinhl 
3338 23					inc hl 
3339			 
3339 d1					pop de 
333a eb					ex de, hl 
333b 73					ld (hl), e 
333c 23					inc hl 
333d 72					ld (hl), d 
333e					 
333e					NEXTW 
333e c3 ea 23			jp macro_next 
3341				endm 
# End of macro NEXTW
3341			.SBSTORE: 
3341				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
3341 6f				db WORD_SYS_CORE+91             
3342 57 33			dw .SBWSTORE            
3344 04				db 3 + 1 
3345 .. 00			db "1-!",0              
3349				endm 
# End of macro CWHEAD
3349			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
3349			 
3349					FORTH_DSP_VALUEHL 
3349 cd 34 22			call macro_dsp_valuehl 
334c				endm 
# End of macro FORTH_DSP_VALUEHL
334c e5					push hl 
334d			 
334d					FORTH_DSP_POP 
334d cd ec 22			call macro_forth_dsp_pop 
3350				endm 
# End of macro FORTH_DSP_POP
3350 e1					pop hl 
3351			 
3351 7e					ld a, (hl) 
3352 3d					dec a 
3353 77					ld (hl), a 
3354					 
3354					NEXTW 
3354 c3 ea 23			jp macro_next 
3357				endm 
# End of macro NEXTW
3357			.SBWSTORE: 
3357				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
3357 6f				db WORD_SYS_CORE+91             
3358 75 33			dw .ENDCORE            
335a 05				db 4 + 1 
335b .. 00			db "1-2!",0              
3360				endm 
# End of macro CWHEAD
3360			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
3360			 
3360					FORTH_DSP_VALUEHL 
3360 cd 34 22			call macro_dsp_valuehl 
3363				endm 
# End of macro FORTH_DSP_VALUEHL
3363 e5					push hl 
3364			 
3364					FORTH_DSP_POP 
3364 cd ec 22			call macro_forth_dsp_pop 
3367				endm 
# End of macro FORTH_DSP_POP
3367 e1					pop hl 
3368			 
3368 e5					push hl 
3369			 
3369 cd 6c 23				call loadwordinhl 
336c 2b					dec hl 
336d			 
336d d1					pop de 
336e eb					ex de, hl 
336f 73					ld (hl), e 
3370 23					inc hl 
3371 72					ld (hl), d 
3372					 
3372					NEXTW 
3372 c3 ea 23			jp macro_next 
3375				endm 
# End of macro NEXTW
3375			.ENDCORE: 
3375			 
3375			; eof 
3375			 
3375			 
# End of file forth_words_core.asm
3375			include "forth_words_flow.asm" 
3375			 
3375			; | ## Program Flow Words 
3375			 
3375			.IF: 
3375				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
3375 1e				db WORD_SYS_CORE+10             
3376 6a 34			dw .THEN            
3378 03				db 2 + 1 
3379 .. 00			db "IF",0              
337c				endm 
# End of macro CWHEAD
337c			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
337c			; 
337c					if DEBUG_FORTH_WORDS_KEY 
337c						DMARK "IF." 
337c f5				push af  
337d 3a 91 33			ld a, (.dmark)  
3380 32 a6 fd			ld (debug_mark),a  
3383 3a 92 33			ld a, (.dmark+1)  
3386 32 a7 fd			ld (debug_mark+1),a  
3389 3a 93 33			ld a, (.dmark+2)  
338c 32 a8 fd			ld (debug_mark+2),a  
338f 18 03			jr .pastdmark  
3391 ..			.dmark: db "IF."  
3394 f1			.pastdmark: pop af  
3395			endm  
# End of macro DMARK
3395						CALLMONITOR 
3395 cd aa fd			call debug_vector  
3398				endm  
# End of macro CALLMONITOR
3398					endif 
3398			; eval TOS 
3398			 
3398				FORTH_DSP_VALUEHL 
3398 cd 34 22			call macro_dsp_valuehl 
339b				endm 
# End of macro FORTH_DSP_VALUEHL
339b			 
339b			;	push hl 
339b				FORTH_DSP_POP 
339b cd ec 22			call macro_forth_dsp_pop 
339e				endm 
# End of macro FORTH_DSP_POP
339e			;	pop hl 
339e			 
339e					if DEBUG_FORTH_WORDS 
339e						DMARK "IF1" 
339e f5				push af  
339f 3a b3 33			ld a, (.dmark)  
33a2 32 a6 fd			ld (debug_mark),a  
33a5 3a b4 33			ld a, (.dmark+1)  
33a8 32 a7 fd			ld (debug_mark+1),a  
33ab 3a b5 33			ld a, (.dmark+2)  
33ae 32 a8 fd			ld (debug_mark+2),a  
33b1 18 03			jr .pastdmark  
33b3 ..			.dmark: db "IF1"  
33b6 f1			.pastdmark: pop af  
33b7			endm  
# End of macro DMARK
33b7						CALLMONITOR 
33b7 cd aa fd			call debug_vector  
33ba				endm  
# End of macro CALLMONITOR
33ba					endif 
33ba b7				or a        ; clear carry flag 
33bb 11 00 00			ld de, 0 
33be eb				ex de,hl 
33bf ed 52			sbc hl, de 
33c1 c2 4b 34			jp nz, .iftrue 
33c4			 
33c4					if DEBUG_FORTH_WORDS 
33c4						DMARK "IF2" 
33c4 f5				push af  
33c5 3a d9 33			ld a, (.dmark)  
33c8 32 a6 fd			ld (debug_mark),a  
33cb 3a da 33			ld a, (.dmark+1)  
33ce 32 a7 fd			ld (debug_mark+1),a  
33d1 3a db 33			ld a, (.dmark+2)  
33d4 32 a8 fd			ld (debug_mark+2),a  
33d7 18 03			jr .pastdmark  
33d9 ..			.dmark: db "IF2"  
33dc f1			.pastdmark: pop af  
33dd			endm  
# End of macro DMARK
33dd						CALLMONITOR 
33dd cd aa fd			call debug_vector  
33e0				endm  
# End of macro CALLMONITOR
33e0					endif 
33e0			 
33e0			; if not true then skip to THEN 
33e0			 
33e0				; TODO get tok_ptr 
33e0				; TODO consume toks until we get to THEN 
33e0			 
33e0 2a fd f3			ld hl, (os_tok_ptr) 
33e3					if DEBUG_FORTH_WORDS 
33e3						DMARK "IF3" 
33e3 f5				push af  
33e4 3a f8 33			ld a, (.dmark)  
33e7 32 a6 fd			ld (debug_mark),a  
33ea 3a f9 33			ld a, (.dmark+1)  
33ed 32 a7 fd			ld (debug_mark+1),a  
33f0 3a fa 33			ld a, (.dmark+2)  
33f3 32 a8 fd			ld (debug_mark+2),a  
33f6 18 03			jr .pastdmark  
33f8 ..			.dmark: db "IF3"  
33fb f1			.pastdmark: pop af  
33fc			endm  
# End of macro DMARK
33fc						CALLMONITOR 
33fc cd aa fd			call debug_vector  
33ff				endm  
# End of macro CALLMONITOR
33ff						 
33ff					endif 
33ff 11 46 34			ld de, .ifthen 
3402					if DEBUG_FORTH_WORDS 
3402						DMARK "IF4" 
3402 f5				push af  
3403 3a 17 34			ld a, (.dmark)  
3406 32 a6 fd			ld (debug_mark),a  
3409 3a 18 34			ld a, (.dmark+1)  
340c 32 a7 fd			ld (debug_mark+1),a  
340f 3a 19 34			ld a, (.dmark+2)  
3412 32 a8 fd			ld (debug_mark+2),a  
3415 18 03			jr .pastdmark  
3417 ..			.dmark: db "IF4"  
341a f1			.pastdmark: pop af  
341b			endm  
# End of macro DMARK
341b						CALLMONITOR 
341b cd aa fd			call debug_vector  
341e				endm  
# End of macro CALLMONITOR
341e					endif 
341e cd 05 25			call findnexttok  
3421			 
3421					if DEBUG_FORTH_WORDS 
3421						DMARK "IF5" 
3421 f5				push af  
3422 3a 36 34			ld a, (.dmark)  
3425 32 a6 fd			ld (debug_mark),a  
3428 3a 37 34			ld a, (.dmark+1)  
342b 32 a7 fd			ld (debug_mark+1),a  
342e 3a 38 34			ld a, (.dmark+2)  
3431 32 a8 fd			ld (debug_mark+2),a  
3434 18 03			jr .pastdmark  
3436 ..			.dmark: db "IF5"  
3439 f1			.pastdmark: pop af  
343a			endm  
# End of macro DMARK
343a						CALLMONITOR 
343a cd aa fd			call debug_vector  
343d				endm  
# End of macro CALLMONITOR
343d					endif 
343d				; TODO replace below with ; exec using tok_ptr 
343d 22 fd f3			ld (os_tok_ptr), hl 
3440 c3 7b 24			jp exec1 
3443				NEXTW 
3443 c3 ea 23			jp macro_next 
3446				endm 
# End of macro NEXTW
3446			 
3446 .. 00		.ifthen:  db "THEN",0 
344b			 
344b			.iftrue:		 
344b				; Exec next words normally 
344b			 
344b				; if true then exec following IF as normal 
344b					if DEBUG_FORTH_WORDS 
344b						DMARK "IFT" 
344b f5				push af  
344c 3a 60 34			ld a, (.dmark)  
344f 32 a6 fd			ld (debug_mark),a  
3452 3a 61 34			ld a, (.dmark+1)  
3455 32 a7 fd			ld (debug_mark+1),a  
3458 3a 62 34			ld a, (.dmark+2)  
345b 32 a8 fd			ld (debug_mark+2),a  
345e 18 03			jr .pastdmark  
3460 ..			.dmark: db "IFT"  
3463 f1			.pastdmark: pop af  
3464			endm  
# End of macro DMARK
3464						CALLMONITOR 
3464 cd aa fd			call debug_vector  
3467				endm  
# End of macro CALLMONITOR
3467					endif 
3467			 
3467					NEXTW 
3467 c3 ea 23			jp macro_next 
346a				endm 
# End of macro NEXTW
346a			.THEN: 
346a				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
346a 1f				db WORD_SYS_CORE+11             
346b 92 34			dw .ELSE            
346d 05				db 4 + 1 
346e .. 00			db "THEN",0              
3473				endm 
# End of macro CWHEAD
3473			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3473					if DEBUG_FORTH_WORDS_KEY 
3473						DMARK "THN" 
3473 f5				push af  
3474 3a 88 34			ld a, (.dmark)  
3477 32 a6 fd			ld (debug_mark),a  
347a 3a 89 34			ld a, (.dmark+1)  
347d 32 a7 fd			ld (debug_mark+1),a  
3480 3a 8a 34			ld a, (.dmark+2)  
3483 32 a8 fd			ld (debug_mark+2),a  
3486 18 03			jr .pastdmark  
3488 ..			.dmark: db "THN"  
348b f1			.pastdmark: pop af  
348c			endm  
# End of macro DMARK
348c						CALLMONITOR 
348c cd aa fd			call debug_vector  
348f				endm  
# End of macro CALLMONITOR
348f					endif 
348f					NEXTW 
348f c3 ea 23			jp macro_next 
3492				endm 
# End of macro NEXTW
3492			.ELSE: 
3492				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3492 20				db WORD_SYS_CORE+12             
3493 ba 34			dw .DO            
3495 03				db 2 + 1 
3496 .. 00			db "ELSE",0              
349b				endm 
# End of macro CWHEAD
349b			; | ELSE ( -- ) Not supported - does nothing | TODO 
349b			 
349b					if DEBUG_FORTH_WORDS_KEY 
349b						DMARK "ELS" 
349b f5				push af  
349c 3a b0 34			ld a, (.dmark)  
349f 32 a6 fd			ld (debug_mark),a  
34a2 3a b1 34			ld a, (.dmark+1)  
34a5 32 a7 fd			ld (debug_mark+1),a  
34a8 3a b2 34			ld a, (.dmark+2)  
34ab 32 a8 fd			ld (debug_mark+2),a  
34ae 18 03			jr .pastdmark  
34b0 ..			.dmark: db "ELS"  
34b3 f1			.pastdmark: pop af  
34b4			endm  
# End of macro DMARK
34b4						CALLMONITOR 
34b4 cd aa fd			call debug_vector  
34b7				endm  
# End of macro CALLMONITOR
34b7					endif 
34b7			 
34b7			 
34b7					NEXTW 
34b7 c3 ea 23			jp macro_next 
34ba				endm 
# End of macro NEXTW
34ba			.DO: 
34ba				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
34ba 21				db WORD_SYS_CORE+13             
34bb e1 35			dw .LOOP            
34bd 03				db 2 + 1 
34be .. 00			db "DO",0              
34c1				endm 
# End of macro CWHEAD
34c1			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
34c1			 
34c1					if DEBUG_FORTH_WORDS_KEY 
34c1						DMARK "DO." 
34c1 f5				push af  
34c2 3a d6 34			ld a, (.dmark)  
34c5 32 a6 fd			ld (debug_mark),a  
34c8 3a d7 34			ld a, (.dmark+1)  
34cb 32 a7 fd			ld (debug_mark+1),a  
34ce 3a d8 34			ld a, (.dmark+2)  
34d1 32 a8 fd			ld (debug_mark+2),a  
34d4 18 03			jr .pastdmark  
34d6 ..			.dmark: db "DO."  
34d9 f1			.pastdmark: pop af  
34da			endm  
# End of macro DMARK
34da						CALLMONITOR 
34da cd aa fd			call debug_vector  
34dd				endm  
# End of macro CALLMONITOR
34dd					endif 
34dd			;  push pc to rsp stack past the DO 
34dd			 
34dd 2a fd f3				ld hl, (os_tok_ptr) 
34e0 23					inc hl   ; D 
34e1 23					inc hl  ; O 
34e2 23					inc hl   ; null 
34e3					if DEBUG_FORTH_WORDS 
34e3						DMARK "DO2" 
34e3 f5				push af  
34e4 3a f8 34			ld a, (.dmark)  
34e7 32 a6 fd			ld (debug_mark),a  
34ea 3a f9 34			ld a, (.dmark+1)  
34ed 32 a7 fd			ld (debug_mark+1),a  
34f0 3a fa 34			ld a, (.dmark+2)  
34f3 32 a8 fd			ld (debug_mark+2),a  
34f6 18 03			jr .pastdmark  
34f8 ..			.dmark: db "DO2"  
34fb f1			.pastdmark: pop af  
34fc			endm  
# End of macro DMARK
34fc						CALLMONITOR 
34fc cd aa fd			call debug_vector  
34ff				endm  
# End of macro CALLMONITOR
34ff					endif 
34ff					FORTH_RSP_NEXT 
34ff cd d6 1f			call macro_forth_rsp_next 
3502				endm 
# End of macro FORTH_RSP_NEXT
3502					if DEBUG_FORTH_WORDS 
3502						DMARK "DO3" 
3502 f5				push af  
3503 3a 17 35			ld a, (.dmark)  
3506 32 a6 fd			ld (debug_mark),a  
3509 3a 18 35			ld a, (.dmark+1)  
350c 32 a7 fd			ld (debug_mark+1),a  
350f 3a 19 35			ld a, (.dmark+2)  
3512 32 a8 fd			ld (debug_mark+2),a  
3515 18 03			jr .pastdmark  
3517 ..			.dmark: db "DO3"  
351a f1			.pastdmark: pop af  
351b			endm  
# End of macro DMARK
351b						CALLMONITOR 
351b cd aa fd			call debug_vector  
351e				endm  
# End of macro CALLMONITOR
351e					endif 
351e			 
351e					;if DEBUG_FORTH_WORDS 
351e				;		push hl 
351e			;		endif  
351e			 
351e			; get counters from data stack 
351e			 
351e			 
351e					FORTH_DSP_VALUEHL 
351e cd 34 22			call macro_dsp_valuehl 
3521				endm 
# End of macro FORTH_DSP_VALUEHL
3521 e5					push hl		 ; hl now has starting counter which needs to be tos 
3522			 
3522					if DEBUG_FORTH_WORDS 
3522						DMARK "DO4" 
3522 f5				push af  
3523 3a 37 35			ld a, (.dmark)  
3526 32 a6 fd			ld (debug_mark),a  
3529 3a 38 35			ld a, (.dmark+1)  
352c 32 a7 fd			ld (debug_mark+1),a  
352f 3a 39 35			ld a, (.dmark+2)  
3532 32 a8 fd			ld (debug_mark+2),a  
3535 18 03			jr .pastdmark  
3537 ..			.dmark: db "DO4"  
353a f1			.pastdmark: pop af  
353b			endm  
# End of macro DMARK
353b						CALLMONITOR 
353b cd aa fd			call debug_vector  
353e				endm  
# End of macro CALLMONITOR
353e					endif 
353e					FORTH_DSP_POP 
353e cd ec 22			call macro_forth_dsp_pop 
3541				endm 
# End of macro FORTH_DSP_POP
3541			 
3541					if DEBUG_FORTH_WORDS 
3541						DMARK "DO5" 
3541 f5				push af  
3542 3a 56 35			ld a, (.dmark)  
3545 32 a6 fd			ld (debug_mark),a  
3548 3a 57 35			ld a, (.dmark+1)  
354b 32 a7 fd			ld (debug_mark+1),a  
354e 3a 58 35			ld a, (.dmark+2)  
3551 32 a8 fd			ld (debug_mark+2),a  
3554 18 03			jr .pastdmark  
3556 ..			.dmark: db "DO5"  
3559 f1			.pastdmark: pop af  
355a			endm  
# End of macro DMARK
355a						CALLMONITOR 
355a cd aa fd			call debug_vector  
355d				endm  
# End of macro CALLMONITOR
355d					endif 
355d			 
355d					FORTH_DSP_VALUEHL 
355d cd 34 22			call macro_dsp_valuehl 
3560				endm 
# End of macro FORTH_DSP_VALUEHL
3560			;		push hl		 ; hl now has starting limit counter 
3560			 
3560					if DEBUG_FORTH_WORDS 
3560						DMARK "DO6" 
3560 f5				push af  
3561 3a 75 35			ld a, (.dmark)  
3564 32 a6 fd			ld (debug_mark),a  
3567 3a 76 35			ld a, (.dmark+1)  
356a 32 a7 fd			ld (debug_mark+1),a  
356d 3a 77 35			ld a, (.dmark+2)  
3570 32 a8 fd			ld (debug_mark+2),a  
3573 18 03			jr .pastdmark  
3575 ..			.dmark: db "DO6"  
3578 f1			.pastdmark: pop af  
3579			endm  
# End of macro DMARK
3579						CALLMONITOR 
3579 cd aa fd			call debug_vector  
357c				endm  
# End of macro CALLMONITOR
357c					endif 
357c					FORTH_DSP_POP 
357c cd ec 22			call macro_forth_dsp_pop 
357f				endm 
# End of macro FORTH_DSP_POP
357f			 
357f			; put counters on the loop stack 
357f			 
357f			;		pop hl			 ; limit counter 
357f d1					pop de			; start counter 
3580			 
3580					; push limit counter 
3580			 
3580					if DEBUG_FORTH_WORDS 
3580						DMARK "DO7" 
3580 f5				push af  
3581 3a 95 35			ld a, (.dmark)  
3584 32 a6 fd			ld (debug_mark),a  
3587 3a 96 35			ld a, (.dmark+1)  
358a 32 a7 fd			ld (debug_mark+1),a  
358d 3a 97 35			ld a, (.dmark+2)  
3590 32 a8 fd			ld (debug_mark+2),a  
3593 18 03			jr .pastdmark  
3595 ..			.dmark: db "DO7"  
3598 f1			.pastdmark: pop af  
3599			endm  
# End of macro DMARK
3599						CALLMONITOR 
3599 cd aa fd			call debug_vector  
359c				endm  
# End of macro CALLMONITOR
359c					endif 
359c					FORTH_LOOP_NEXT 
359c cd 65 22			call macro_forth_loop_next 
359f				endm 
# End of macro FORTH_LOOP_NEXT
359f			 
359f					; push start counter 
359f			 
359f eb					ex de, hl 
35a0					if DEBUG_FORTH_WORDS 
35a0						DMARK "DO7" 
35a0 f5				push af  
35a1 3a b5 35			ld a, (.dmark)  
35a4 32 a6 fd			ld (debug_mark),a  
35a7 3a b6 35			ld a, (.dmark+1)  
35aa 32 a7 fd			ld (debug_mark+1),a  
35ad 3a b7 35			ld a, (.dmark+2)  
35b0 32 a8 fd			ld (debug_mark+2),a  
35b3 18 03			jr .pastdmark  
35b5 ..			.dmark: db "DO7"  
35b8 f1			.pastdmark: pop af  
35b9			endm  
# End of macro DMARK
35b9						CALLMONITOR 
35b9 cd aa fd			call debug_vector  
35bc				endm  
# End of macro CALLMONITOR
35bc					endif 
35bc					FORTH_LOOP_NEXT 
35bc cd 65 22			call macro_forth_loop_next 
35bf				endm 
# End of macro FORTH_LOOP_NEXT
35bf			 
35bf			 
35bf					; init first round of I counter 
35bf			 
35bf 22 21 f4				ld (os_current_i), hl 
35c2			 
35c2					if DEBUG_FORTH_WORDS 
35c2						DMARK "DO8" 
35c2 f5				push af  
35c3 3a d7 35			ld a, (.dmark)  
35c6 32 a6 fd			ld (debug_mark),a  
35c9 3a d8 35			ld a, (.dmark+1)  
35cc 32 a7 fd			ld (debug_mark+1),a  
35cf 3a d9 35			ld a, (.dmark+2)  
35d2 32 a8 fd			ld (debug_mark+2),a  
35d5 18 03			jr .pastdmark  
35d7 ..			.dmark: db "DO8"  
35da f1			.pastdmark: pop af  
35db			endm  
# End of macro DMARK
35db						CALLMONITOR 
35db cd aa fd			call debug_vector  
35de				endm  
# End of macro CALLMONITOR
35de					endif 
35de			 
35de					NEXTW 
35de c3 ea 23			jp macro_next 
35e1				endm 
# End of macro NEXTW
35e1			.LOOP: 
35e1				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
35e1 22				db WORD_SYS_CORE+14             
35e2 f9 36			dw .I            
35e4 05				db 4 + 1 
35e5 .. 00			db "LOOP",0              
35ea				endm 
# End of macro CWHEAD
35ea			; | LOOP ( -- ) Increment and test loop counter  | DONE 
35ea			 
35ea				; pop tos as current loop count to hl 
35ea			 
35ea				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
35ea			 
35ea				FORTH_LOOP_TOS 
35ea cd 98 22			call macro_forth_loop_tos 
35ed				endm 
# End of macro FORTH_LOOP_TOS
35ed e5				push hl 
35ee			 
35ee					if DEBUG_FORTH_WORDS_KEY 
35ee						DMARK "LOP" 
35ee f5				push af  
35ef 3a 03 36			ld a, (.dmark)  
35f2 32 a6 fd			ld (debug_mark),a  
35f5 3a 04 36			ld a, (.dmark+1)  
35f8 32 a7 fd			ld (debug_mark+1),a  
35fb 3a 05 36			ld a, (.dmark+2)  
35fe 32 a8 fd			ld (debug_mark+2),a  
3601 18 03			jr .pastdmark  
3603 ..			.dmark: db "LOP"  
3606 f1			.pastdmark: pop af  
3607			endm  
# End of macro DMARK
3607						CALLMONITOR 
3607 cd aa fd			call debug_vector  
360a				endm  
# End of macro CALLMONITOR
360a					endif 
360a				; next item on the stack is the limit. get it 
360a			 
360a			 
360a				FORTH_LOOP_POP 
360a cd a2 22			call macro_forth_loop_pop 
360d				endm 
# End of macro FORTH_LOOP_POP
360d			 
360d				FORTH_LOOP_TOS 
360d cd 98 22			call macro_forth_loop_tos 
3610				endm 
# End of macro FORTH_LOOP_TOS
3610			 
3610 d1				pop de		 ; de = i, hl = limit 
3611			 
3611					if DEBUG_FORTH_WORDS 
3611						DMARK "LP1" 
3611 f5				push af  
3612 3a 26 36			ld a, (.dmark)  
3615 32 a6 fd			ld (debug_mark),a  
3618 3a 27 36			ld a, (.dmark+1)  
361b 32 a7 fd			ld (debug_mark+1),a  
361e 3a 28 36			ld a, (.dmark+2)  
3621 32 a8 fd			ld (debug_mark+2),a  
3624 18 03			jr .pastdmark  
3626 ..			.dmark: db "LP1"  
3629 f1			.pastdmark: pop af  
362a			endm  
# End of macro DMARK
362a						CALLMONITOR 
362a cd aa fd			call debug_vector  
362d				endm  
# End of macro CALLMONITOR
362d					endif 
362d			 
362d				; go back to previous word 
362d			 
362d d5				push de    ; save I for inc later 
362e			 
362e			 
362e				; get limit 
362e				;  is I at limit? 
362e			 
362e			 
362e					if DEBUG_FORTH_WORDS 
362e						DMARK "LP1" 
362e f5				push af  
362f 3a 43 36			ld a, (.dmark)  
3632 32 a6 fd			ld (debug_mark),a  
3635 3a 44 36			ld a, (.dmark+1)  
3638 32 a7 fd			ld (debug_mark+1),a  
363b 3a 45 36			ld a, (.dmark+2)  
363e 32 a8 fd			ld (debug_mark+2),a  
3641 18 03			jr .pastdmark  
3643 ..			.dmark: db "LP1"  
3646 f1			.pastdmark: pop af  
3647			endm  
# End of macro DMARK
3647						CALLMONITOR 
3647 cd aa fd			call debug_vector  
364a				endm  
# End of macro CALLMONITOR
364a					endif 
364a			 
364a ed 52			sbc hl, de 
364c			 
364c			 
364c				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
364c			 
364c 20 26				jr nz, .loopnotdone 
364e			 
364e e1				pop hl   ; get rid of saved I 
364f				FORTH_LOOP_POP     ; get rid of limit 
364f cd a2 22			call macro_forth_loop_pop 
3652				endm 
# End of macro FORTH_LOOP_POP
3652			 
3652				FORTH_RSP_POP     ; get rid of DO ptr 
3652 cd f7 1f			call macro_forth_rsp_pop 
3655				endm 
# End of macro FORTH_RSP_POP
3655			 
3655			if DEBUG_FORTH_WORDS 
3655						DMARK "LP>" 
3655 f5				push af  
3656 3a 6a 36			ld a, (.dmark)  
3659 32 a6 fd			ld (debug_mark),a  
365c 3a 6b 36			ld a, (.dmark+1)  
365f 32 a7 fd			ld (debug_mark+1),a  
3662 3a 6c 36			ld a, (.dmark+2)  
3665 32 a8 fd			ld (debug_mark+2),a  
3668 18 03			jr .pastdmark  
366a ..			.dmark: db "LP>"  
366d f1			.pastdmark: pop af  
366e			endm  
# End of macro DMARK
366e				CALLMONITOR 
366e cd aa fd			call debug_vector  
3671				endm  
# End of macro CALLMONITOR
3671			endif 
3671			 
3671					NEXTW 
3671 c3 ea 23			jp macro_next 
3674				endm 
# End of macro NEXTW
3674				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3674			 
3674			.loopnotdone: 
3674			 
3674 e1				pop hl    ; get I 
3675 23				inc hl 
3676			 
3676			   	; save new I 
3676			 
3676			 
3676					; set I counter 
3676			 
3676 22 21 f4				ld (os_current_i), hl 
3679			 
3679					if DEBUG_FORTH_WORDS 
3679						DMARK "LPN" 
3679 f5				push af  
367a 3a 8e 36			ld a, (.dmark)  
367d 32 a6 fd			ld (debug_mark),a  
3680 3a 8f 36			ld a, (.dmark+1)  
3683 32 a7 fd			ld (debug_mark+1),a  
3686 3a 90 36			ld a, (.dmark+2)  
3689 32 a8 fd			ld (debug_mark+2),a  
368c 18 03			jr .pastdmark  
368e ..			.dmark: db "LPN"  
3691 f1			.pastdmark: pop af  
3692			endm  
# End of macro DMARK
3692					CALLMONITOR 
3692 cd aa fd			call debug_vector  
3695				endm  
# End of macro CALLMONITOR
3695					endif 
3695					 
3695				FORTH_LOOP_NEXT 
3695 cd 65 22			call macro_forth_loop_next 
3698				endm 
# End of macro FORTH_LOOP_NEXT
3698			 
3698			 
3698					if DEBUG_FORTH_WORDS 
3698 eb						ex de,hl 
3699					endif 
3699			 
3699			;	; get DO ptr 
3699			; 
3699					if DEBUG_FORTH_WORDS 
3699						DMARK "LP7" 
3699 f5				push af  
369a 3a ae 36			ld a, (.dmark)  
369d 32 a6 fd			ld (debug_mark),a  
36a0 3a af 36			ld a, (.dmark+1)  
36a3 32 a7 fd			ld (debug_mark+1),a  
36a6 3a b0 36			ld a, (.dmark+2)  
36a9 32 a8 fd			ld (debug_mark+2),a  
36ac 18 03			jr .pastdmark  
36ae ..			.dmark: db "LP7"  
36b1 f1			.pastdmark: pop af  
36b2			endm  
# End of macro DMARK
36b2					CALLMONITOR 
36b2 cd aa fd			call debug_vector  
36b5				endm  
# End of macro CALLMONITOR
36b5					endif 
36b5				FORTH_RSP_TOS 
36b5 cd ed 1f			call macro_forth_rsp_tos 
36b8				endm 
# End of macro FORTH_RSP_TOS
36b8			 
36b8					if DEBUG_FORTH_WORDS 
36b8						DMARK "LP8" 
36b8 f5				push af  
36b9 3a cd 36			ld a, (.dmark)  
36bc 32 a6 fd			ld (debug_mark),a  
36bf 3a ce 36			ld a, (.dmark+1)  
36c2 32 a7 fd			ld (debug_mark+1),a  
36c5 3a cf 36			ld a, (.dmark+2)  
36c8 32 a8 fd			ld (debug_mark+2),a  
36cb 18 03			jr .pastdmark  
36cd ..			.dmark: db "LP8"  
36d0 f1			.pastdmark: pop af  
36d1			endm  
# End of macro DMARK
36d1					CALLMONITOR 
36d1 cd aa fd			call debug_vector  
36d4				endm  
# End of macro CALLMONITOR
36d4					endif 
36d4				;push hl 
36d4			 
36d4				; not going to DO any more 
36d4				; get rid of the RSP pointer as DO will add it back in 
36d4				;FORTH_RSP_POP 
36d4				;pop hl 
36d4			 
36d4				;ld hl,(cli_ret_sp) 
36d4				;ld e, (hl) 
36d4				;inc hl 
36d4				;ld d, (hl) 
36d4				;ex de,hl 
36d4 22 fd f3			ld (os_tok_ptr), hl 
36d7					if DEBUG_FORTH_WORDS 
36d7						DMARK "LP<" 
36d7 f5				push af  
36d8 3a ec 36			ld a, (.dmark)  
36db 32 a6 fd			ld (debug_mark),a  
36de 3a ed 36			ld a, (.dmark+1)  
36e1 32 a7 fd			ld (debug_mark+1),a  
36e4 3a ee 36			ld a, (.dmark+2)  
36e7 32 a8 fd			ld (debug_mark+2),a  
36ea 18 03			jr .pastdmark  
36ec ..			.dmark: db "LP<"  
36ef f1			.pastdmark: pop af  
36f0			endm  
# End of macro DMARK
36f0					CALLMONITOR 
36f0 cd aa fd			call debug_vector  
36f3				endm  
# End of macro CALLMONITOR
36f3				endif 
36f3 c3 7b 24			jp exec1 
36f6			 
36f6					 
36f6			 
36f6			 
36f6					NEXTW 
36f6 c3 ea 23			jp macro_next 
36f9				endm 
# End of macro NEXTW
36f9			.I:  
36f9			 
36f9				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
36f9 5e				db WORD_SYS_CORE+74             
36fa 24 37			dw .DLOOP            
36fc 02				db 1 + 1 
36fd .. 00			db "I",0              
36ff				endm 
# End of macro CWHEAD
36ff			; | I ( -- ) Current loop counter | DONE 
36ff					if DEBUG_FORTH_WORDS_KEY 
36ff						DMARK "I.." 
36ff f5				push af  
3700 3a 14 37			ld a, (.dmark)  
3703 32 a6 fd			ld (debug_mark),a  
3706 3a 15 37			ld a, (.dmark+1)  
3709 32 a7 fd			ld (debug_mark+1),a  
370c 3a 16 37			ld a, (.dmark+2)  
370f 32 a8 fd			ld (debug_mark+2),a  
3712 18 03			jr .pastdmark  
3714 ..			.dmark: db "I.."  
3717 f1			.pastdmark: pop af  
3718			endm  
# End of macro DMARK
3718						CALLMONITOR 
3718 cd aa fd			call debug_vector  
371b				endm  
# End of macro CALLMONITOR
371b					endif 
371b			 
371b 2a 21 f4				ld hl,(os_current_i) 
371e cd 2f 20				call forth_push_numhl 
3721			 
3721					NEXTW 
3721 c3 ea 23			jp macro_next 
3724				endm 
# End of macro NEXTW
3724			.DLOOP: 
3724				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
3724 5f				db WORD_SYS_CORE+75             
3725 05 38			dw .REPEAT            
3727 06				db 5 + 1 
3728 .. 00			db "-LOOP",0              
372e				endm 
# End of macro CWHEAD
372e			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
372e				; pop tos as current loop count to hl 
372e					if DEBUG_FORTH_WORDS_KEY 
372e						DMARK "-LP" 
372e f5				push af  
372f 3a 43 37			ld a, (.dmark)  
3732 32 a6 fd			ld (debug_mark),a  
3735 3a 44 37			ld a, (.dmark+1)  
3738 32 a7 fd			ld (debug_mark+1),a  
373b 3a 45 37			ld a, (.dmark+2)  
373e 32 a8 fd			ld (debug_mark+2),a  
3741 18 03			jr .pastdmark  
3743 ..			.dmark: db "-LP"  
3746 f1			.pastdmark: pop af  
3747			endm  
# End of macro DMARK
3747						CALLMONITOR 
3747 cd aa fd			call debug_vector  
374a				endm  
# End of macro CALLMONITOR
374a					endif 
374a			 
374a				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
374a			 
374a				FORTH_LOOP_TOS 
374a cd 98 22			call macro_forth_loop_tos 
374d				endm 
# End of macro FORTH_LOOP_TOS
374d e5				push hl 
374e			 
374e					if DEBUG_FORTH_WORDS 
374e						DMARK "-LP" 
374e f5				push af  
374f 3a 63 37			ld a, (.dmark)  
3752 32 a6 fd			ld (debug_mark),a  
3755 3a 64 37			ld a, (.dmark+1)  
3758 32 a7 fd			ld (debug_mark+1),a  
375b 3a 65 37			ld a, (.dmark+2)  
375e 32 a8 fd			ld (debug_mark+2),a  
3761 18 03			jr .pastdmark  
3763 ..			.dmark: db "-LP"  
3766 f1			.pastdmark: pop af  
3767			endm  
# End of macro DMARK
3767						CALLMONITOR 
3767 cd aa fd			call debug_vector  
376a				endm  
# End of macro CALLMONITOR
376a					endif 
376a				; next item on the stack is the limit. get it 
376a			 
376a			 
376a				FORTH_LOOP_POP 
376a cd a2 22			call macro_forth_loop_pop 
376d				endm 
# End of macro FORTH_LOOP_POP
376d			 
376d				FORTH_LOOP_TOS 
376d cd 98 22			call macro_forth_loop_tos 
3770				endm 
# End of macro FORTH_LOOP_TOS
3770			 
3770 d1				pop de		 ; de = i, hl = limit 
3771			 
3771					if DEBUG_FORTH_WORDS 
3771						DMARK "-L1" 
3771 f5				push af  
3772 3a 86 37			ld a, (.dmark)  
3775 32 a6 fd			ld (debug_mark),a  
3778 3a 87 37			ld a, (.dmark+1)  
377b 32 a7 fd			ld (debug_mark+1),a  
377e 3a 88 37			ld a, (.dmark+2)  
3781 32 a8 fd			ld (debug_mark+2),a  
3784 18 03			jr .pastdmark  
3786 ..			.dmark: db "-L1"  
3789 f1			.pastdmark: pop af  
378a			endm  
# End of macro DMARK
378a						CALLMONITOR 
378a cd aa fd			call debug_vector  
378d				endm  
# End of macro CALLMONITOR
378d					endif 
378d			 
378d				; go back to previous word 
378d			 
378d d5				push de    ; save I for inc later 
378e			 
378e			 
378e				; get limit 
378e				;  is I at limit? 
378e			 
378e			 
378e					if DEBUG_FORTH_WORDS 
378e						DMARK "-L1" 
378e f5				push af  
378f 3a a3 37			ld a, (.dmark)  
3792 32 a6 fd			ld (debug_mark),a  
3795 3a a4 37			ld a, (.dmark+1)  
3798 32 a7 fd			ld (debug_mark+1),a  
379b 3a a5 37			ld a, (.dmark+2)  
379e 32 a8 fd			ld (debug_mark+2),a  
37a1 18 03			jr .pastdmark  
37a3 ..			.dmark: db "-L1"  
37a6 f1			.pastdmark: pop af  
37a7			endm  
# End of macro DMARK
37a7						CALLMONITOR 
37a7 cd aa fd			call debug_vector  
37aa				endm  
# End of macro CALLMONITOR
37aa					endif 
37aa			 
37aa ed 52			sbc hl, de 
37ac			 
37ac			 
37ac				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
37ac			 
37ac 20 26				jr nz, .mloopnotdone 
37ae			 
37ae e1				pop hl   ; get rid of saved I 
37af				FORTH_LOOP_POP     ; get rid of limit 
37af cd a2 22			call macro_forth_loop_pop 
37b2				endm 
# End of macro FORTH_LOOP_POP
37b2			 
37b2				FORTH_RSP_POP     ; get rid of DO ptr 
37b2 cd f7 1f			call macro_forth_rsp_pop 
37b5				endm 
# End of macro FORTH_RSP_POP
37b5			 
37b5			if DEBUG_FORTH_WORDS 
37b5						DMARK "-L>" 
37b5 f5				push af  
37b6 3a ca 37			ld a, (.dmark)  
37b9 32 a6 fd			ld (debug_mark),a  
37bc 3a cb 37			ld a, (.dmark+1)  
37bf 32 a7 fd			ld (debug_mark+1),a  
37c2 3a cc 37			ld a, (.dmark+2)  
37c5 32 a8 fd			ld (debug_mark+2),a  
37c8 18 03			jr .pastdmark  
37ca ..			.dmark: db "-L>"  
37cd f1			.pastdmark: pop af  
37ce			endm  
# End of macro DMARK
37ce				CALLMONITOR 
37ce cd aa fd			call debug_vector  
37d1				endm  
# End of macro CALLMONITOR
37d1			endif 
37d1			 
37d1					NEXTW 
37d1 c3 ea 23			jp macro_next 
37d4				endm 
# End of macro NEXTW
37d4				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
37d4			 
37d4			.mloopnotdone: 
37d4			 
37d4 e1				pop hl    ; get I 
37d5 2b				dec hl 
37d6			 
37d6			   	; save new I 
37d6			 
37d6			 
37d6					; set I counter 
37d6			 
37d6 22 21 f4				ld (os_current_i), hl 
37d9			 
37d9					 
37d9				FORTH_LOOP_NEXT 
37d9 cd 65 22			call macro_forth_loop_next 
37dc				endm 
# End of macro FORTH_LOOP_NEXT
37dc			 
37dc			 
37dc					if DEBUG_FORTH_WORDS 
37dc eb						ex de,hl 
37dd					endif 
37dd			 
37dd			;	; get DO ptr 
37dd			; 
37dd				FORTH_RSP_TOS 
37dd cd ed 1f			call macro_forth_rsp_tos 
37e0				endm 
# End of macro FORTH_RSP_TOS
37e0			 
37e0				;push hl 
37e0			 
37e0				; not going to DO any more 
37e0				; get rid of the RSP pointer as DO will add it back in 
37e0				;FORTH_RSP_POP 
37e0				;pop hl 
37e0			 
37e0			 
37e0 22 fd f3			ld (os_tok_ptr), hl 
37e3					if DEBUG_FORTH_WORDS 
37e3						DMARK "-L<" 
37e3 f5				push af  
37e4 3a f8 37			ld a, (.dmark)  
37e7 32 a6 fd			ld (debug_mark),a  
37ea 3a f9 37			ld a, (.dmark+1)  
37ed 32 a7 fd			ld (debug_mark+1),a  
37f0 3a fa 37			ld a, (.dmark+2)  
37f3 32 a8 fd			ld (debug_mark+2),a  
37f6 18 03			jr .pastdmark  
37f8 ..			.dmark: db "-L<"  
37fb f1			.pastdmark: pop af  
37fc			endm  
# End of macro DMARK
37fc					CALLMONITOR 
37fc cd aa fd			call debug_vector  
37ff				endm  
# End of macro CALLMONITOR
37ff				endif 
37ff c3 7b 24			jp exec1 
3802			 
3802					 
3802			 
3802			 
3802			 
3802				NEXTW 
3802 c3 ea 23			jp macro_next 
3805				endm 
# End of macro NEXTW
3805			 
3805			 
3805			 
3805			 
3805			.REPEAT: 
3805				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3805 71				db WORD_SYS_CORE+93             
3806 58 38			dw .UNTIL            
3808 06				db 5 + 1 
3809 .. 00			db "REPEAT",0              
3810				endm 
# End of macro CWHEAD
3810			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3810			;  push pc to rsp stack past the REPEAT 
3810					if DEBUG_FORTH_WORDS_KEY 
3810						DMARK "REP" 
3810 f5				push af  
3811 3a 25 38			ld a, (.dmark)  
3814 32 a6 fd			ld (debug_mark),a  
3817 3a 26 38			ld a, (.dmark+1)  
381a 32 a7 fd			ld (debug_mark+1),a  
381d 3a 27 38			ld a, (.dmark+2)  
3820 32 a8 fd			ld (debug_mark+2),a  
3823 18 03			jr .pastdmark  
3825 ..			.dmark: db "REP"  
3828 f1			.pastdmark: pop af  
3829			endm  
# End of macro DMARK
3829						CALLMONITOR 
3829 cd aa fd			call debug_vector  
382c				endm  
# End of macro CALLMONITOR
382c					endif 
382c			 
382c 2a fd f3				ld hl, (os_tok_ptr) 
382f 23					inc hl   ; R 
3830 23					inc hl  ; E 
3831 23					inc hl   ; P 
3832 23					inc hl   ; E 
3833 23					inc hl   ; A 
3834 23					inc hl   ; T 
3835 23					inc hl   ; zero 
3836					FORTH_RSP_NEXT 
3836 cd d6 1f			call macro_forth_rsp_next 
3839				endm 
# End of macro FORTH_RSP_NEXT
3839			 
3839			 
3839					if DEBUG_FORTH_WORDS 
3839						DMARK "REP" 
3839 f5				push af  
383a 3a 4e 38			ld a, (.dmark)  
383d 32 a6 fd			ld (debug_mark),a  
3840 3a 4f 38			ld a, (.dmark+1)  
3843 32 a7 fd			ld (debug_mark+1),a  
3846 3a 50 38			ld a, (.dmark+2)  
3849 32 a8 fd			ld (debug_mark+2),a  
384c 18 03			jr .pastdmark  
384e ..			.dmark: db "REP"  
3851 f1			.pastdmark: pop af  
3852			endm  
# End of macro DMARK
3852						;pop bc    ; TODO BUG ?????? what is this for???? 
3852						CALLMONITOR 
3852 cd aa fd			call debug_vector  
3855				endm  
# End of macro CALLMONITOR
3855					endif 
3855			 
3855					NEXTW 
3855 c3 ea 23			jp macro_next 
3858				endm 
# End of macro NEXTW
3858			;	       NEXTW 
3858			 
3858			.UNTIL: 
3858				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3858 72				db WORD_SYS_CORE+94             
3859 ef 38			dw .ENDFLOW            
385b 06				db 5 + 1 
385c .. 00			db "UNTIL",0              
3862				endm 
# End of macro CWHEAD
3862			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3862			 
3862				; pop tos as check 
3862			 
3862				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3862			 
3862				FORTH_DSP_VALUEHL 
3862 cd 34 22			call macro_dsp_valuehl 
3865				endm 
# End of macro FORTH_DSP_VALUEHL
3865			 
3865					if DEBUG_FORTH_WORDS_KEY 
3865						DMARK "UNT" 
3865 f5				push af  
3866 3a 7a 38			ld a, (.dmark)  
3869 32 a6 fd			ld (debug_mark),a  
386c 3a 7b 38			ld a, (.dmark+1)  
386f 32 a7 fd			ld (debug_mark+1),a  
3872 3a 7c 38			ld a, (.dmark+2)  
3875 32 a8 fd			ld (debug_mark+2),a  
3878 18 03			jr .pastdmark  
387a ..			.dmark: db "UNT"  
387d f1			.pastdmark: pop af  
387e			endm  
# End of macro DMARK
387e						CALLMONITOR 
387e cd aa fd			call debug_vector  
3881				endm  
# End of macro CALLMONITOR
3881					endif 
3881			 
3881			;	push hl 
3881				FORTH_DSP_POP 
3881 cd ec 22			call macro_forth_dsp_pop 
3884				endm 
# End of macro FORTH_DSP_POP
3884			 
3884			;	pop hl 
3884			 
3884				; test if true 
3884			 
3884 cd 04 10			call ishlzero 
3887			;	ld a,l 
3887			;	add h 
3887			; 
3887			;	cp 0 
3887			 
3887 20 3e			jr nz, .untilnotdone 
3889			 
3889					if DEBUG_FORTH_WORDS 
3889						DMARK "UNf" 
3889 f5				push af  
388a 3a 9e 38			ld a, (.dmark)  
388d 32 a6 fd			ld (debug_mark),a  
3890 3a 9f 38			ld a, (.dmark+1)  
3893 32 a7 fd			ld (debug_mark+1),a  
3896 3a a0 38			ld a, (.dmark+2)  
3899 32 a8 fd			ld (debug_mark+2),a  
389c 18 03			jr .pastdmark  
389e ..			.dmark: db "UNf"  
38a1 f1			.pastdmark: pop af  
38a2			endm  
# End of macro DMARK
38a2						CALLMONITOR 
38a2 cd aa fd			call debug_vector  
38a5				endm  
# End of macro CALLMONITOR
38a5					endif 
38a5			 
38a5			 
38a5			 
38a5				FORTH_RSP_POP     ; get rid of DO ptr 
38a5 cd f7 1f			call macro_forth_rsp_pop 
38a8				endm 
# End of macro FORTH_RSP_POP
38a8			 
38a8			if DEBUG_FORTH_WORDS 
38a8						DMARK "UN>" 
38a8 f5				push af  
38a9 3a bd 38			ld a, (.dmark)  
38ac 32 a6 fd			ld (debug_mark),a  
38af 3a be 38			ld a, (.dmark+1)  
38b2 32 a7 fd			ld (debug_mark+1),a  
38b5 3a bf 38			ld a, (.dmark+2)  
38b8 32 a8 fd			ld (debug_mark+2),a  
38bb 18 03			jr .pastdmark  
38bd ..			.dmark: db "UN>"  
38c0 f1			.pastdmark: pop af  
38c1			endm  
# End of macro DMARK
38c1				CALLMONITOR 
38c1 cd aa fd			call debug_vector  
38c4				endm  
# End of macro CALLMONITOR
38c4			endif 
38c4			 
38c4					NEXTW 
38c4 c3 ea 23			jp macro_next 
38c7				endm 
# End of macro NEXTW
38c7				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
38c7			 
38c7			.untilnotdone: 
38c7			 
38c7			 
38c7			;	; get DO ptr 
38c7			; 
38c7				FORTH_RSP_TOS 
38c7 cd ed 1f			call macro_forth_rsp_tos 
38ca				endm 
# End of macro FORTH_RSP_TOS
38ca			 
38ca				;push hl 
38ca			 
38ca				; not going to DO any more 
38ca				; get rid of the RSP pointer as DO will add it back in 
38ca				;FORTH_RSP_POP 
38ca				;pop hl 
38ca			 
38ca			 
38ca 22 fd f3			ld (os_tok_ptr), hl 
38cd					if DEBUG_FORTH_WORDS 
38cd						DMARK "UN<" 
38cd f5				push af  
38ce 3a e2 38			ld a, (.dmark)  
38d1 32 a6 fd			ld (debug_mark),a  
38d4 3a e3 38			ld a, (.dmark+1)  
38d7 32 a7 fd			ld (debug_mark+1),a  
38da 3a e4 38			ld a, (.dmark+2)  
38dd 32 a8 fd			ld (debug_mark+2),a  
38e0 18 03			jr .pastdmark  
38e2 ..			.dmark: db "UN<"  
38e5 f1			.pastdmark: pop af  
38e6			endm  
# End of macro DMARK
38e6					CALLMONITOR 
38e6 cd aa fd			call debug_vector  
38e9				endm  
# End of macro CALLMONITOR
38e9				endif 
38e9 c3 7b 24			jp exec1 
38ec			 
38ec					 
38ec			 
38ec			 
38ec					NEXTW 
38ec c3 ea 23			jp macro_next 
38ef				endm 
# End of macro NEXTW
38ef			 
38ef			 
38ef			.ENDFLOW: 
38ef			 
38ef			; eof 
38ef			 
# End of file forth_words_flow.asm
38ef			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
38ef			include "forth_words_logic.asm" 
38ef			 
38ef			; | ## Logic Words 
38ef			 
38ef			.NOT: 
38ef				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
38ef 2d				db WORD_SYS_CORE+25             
38f0 37 39			dw .IS            
38f2 04				db 3 + 1 
38f3 .. 00			db "NOT",0              
38f7				endm 
# End of macro CWHEAD
38f7			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
38f7					if DEBUG_FORTH_WORDS_KEY 
38f7						DMARK "NOT" 
38f7 f5				push af  
38f8 3a 0c 39			ld a, (.dmark)  
38fb 32 a6 fd			ld (debug_mark),a  
38fe 3a 0d 39			ld a, (.dmark+1)  
3901 32 a7 fd			ld (debug_mark+1),a  
3904 3a 0e 39			ld a, (.dmark+2)  
3907 32 a8 fd			ld (debug_mark+2),a  
390a 18 03			jr .pastdmark  
390c ..			.dmark: db "NOT"  
390f f1			.pastdmark: pop af  
3910			endm  
# End of macro DMARK
3910						CALLMONITOR 
3910 cd aa fd			call debug_vector  
3913				endm  
# End of macro CALLMONITOR
3913					endif 
3913					FORTH_DSP 
3913 cd fa 21			call macro_forth_dsp 
3916				endm 
# End of macro FORTH_DSP
3916 7e					ld a,(hl)	; get type of value on TOS 
3917 fe 02				cp DS_TYPE_INUM  
3919 28 03				jr z, .noti 
391b					NEXTW 
391b c3 ea 23			jp macro_next 
391e				endm 
# End of macro NEXTW
391e			.noti:          FORTH_DSP_VALUEHL 
391e cd 34 22			call macro_dsp_valuehl 
3921				endm 
# End of macro FORTH_DSP_VALUEHL
3921			;		push hl 
3921					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3921 cd ec 22			call macro_forth_dsp_pop 
3924				endm 
# End of macro FORTH_DSP_POP
3924			;		pop hl 
3924 3e 00				ld a,0 
3926 bd					cp l 
3927 28 04				jr z, .not2t 
3929 2e 00				ld l, 0 
392b 18 02				jr .notip 
392d			 
392d 2e ff		.not2t:		ld l, 255 
392f			 
392f 26 00		.notip:		ld h, 0	 
3931			 
3931 cd 2f 20				call forth_push_numhl 
3934					NEXTW 
3934 c3 ea 23			jp macro_next 
3937				endm 
# End of macro NEXTW
3937			 
3937			.IS: 
3937				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
3937 2d				db WORD_SYS_CORE+25             
3938 5d 39			dw .LZERO            
393a 03				db 2 + 1 
393b .. 00			db "IS",0              
393e				endm 
# End of macro CWHEAD
393e			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
393e					if DEBUG_FORTH_WORDS_KEY 
393e						DMARK "IS." 
393e f5				push af  
393f 3a 53 39			ld a, (.dmark)  
3942 32 a6 fd			ld (debug_mark),a  
3945 3a 54 39			ld a, (.dmark+1)  
3948 32 a7 fd			ld (debug_mark+1),a  
394b 3a 55 39			ld a, (.dmark+2)  
394e 32 a8 fd			ld (debug_mark+2),a  
3951 18 03			jr .pastdmark  
3953 ..			.dmark: db "IS."  
3956 f1			.pastdmark: pop af  
3957			endm  
# End of macro DMARK
3957						CALLMONITOR 
3957 cd aa fd			call debug_vector  
395a				endm  
# End of macro CALLMONITOR
395a					endif 
395a					NEXTW 
395a c3 ea 23			jp macro_next 
395d				endm 
# End of macro NEXTW
395d			.LZERO: 
395d				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
395d 2d				db WORD_SYS_CORE+25             
395e 67 39			dw .TZERO            
3960 03				db 2 + 1 
3961 .. 00			db "0<",0              
3964				endm 
# End of macro CWHEAD
3964			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3964					NEXTW 
3964 c3 ea 23			jp macro_next 
3967				endm 
# End of macro NEXTW
3967			.TZERO: 
3967				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3967 2e				db WORD_SYS_CORE+26             
3968 ae 39			dw .LESS            
396a 03				db 2 + 1 
396b .. 00			db "0=",0              
396e				endm 
# End of macro CWHEAD
396e			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
396e				; TODO add floating point number detection 
396e					;v5 FORTH_DSP_VALUE 
396e					if DEBUG_FORTH_WORDS_KEY 
396e						DMARK "0=." 
396e f5				push af  
396f 3a 83 39			ld a, (.dmark)  
3972 32 a6 fd			ld (debug_mark),a  
3975 3a 84 39			ld a, (.dmark+1)  
3978 32 a7 fd			ld (debug_mark+1),a  
397b 3a 85 39			ld a, (.dmark+2)  
397e 32 a8 fd			ld (debug_mark+2),a  
3981 18 03			jr .pastdmark  
3983 ..			.dmark: db "0=."  
3986 f1			.pastdmark: pop af  
3987			endm  
# End of macro DMARK
3987						CALLMONITOR 
3987 cd aa fd			call debug_vector  
398a				endm  
# End of macro CALLMONITOR
398a					endif 
398a					FORTH_DSP 
398a cd fa 21			call macro_forth_dsp 
398d				endm 
# End of macro FORTH_DSP
398d 7e					ld a,(hl)	; get type of value on TOS 
398e fe 02				cp DS_TYPE_INUM  
3990 28 00				jr z, .tz_inum 
3992			 
3992				if FORTH_ENABLE_FLOATMATH 
3992					jr .tz_done 
3992			 
3992				endif 
3992					 
3992			 
3992			.tz_inum: 
3992					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3992 cd 34 22			call macro_dsp_valuehl 
3995				endm 
# End of macro FORTH_DSP_VALUEHL
3995			 
3995			;		push hl 
3995			 
3995					; destroy value TOS 
3995			 
3995					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3995 cd ec 22			call macro_forth_dsp_pop 
3998				endm 
# End of macro FORTH_DSP_POP
3998			 
3998			;		pop hl 
3998			 
3998 3e 00				ld a,0 
399a			 
399a bd					cp l 
399b 20 08				jr nz, .tz_notzero 
399d			 
399d bc					cp h 
399e			 
399e 20 05				jr nz, .tz_notzero 
39a0			 
39a0			 
39a0 21 01 00				ld hl, FORTH_TRUE 
39a3 18 03				jr .tz_done 
39a5			 
39a5 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
39a8			 
39a8					; push value back onto stack for another op etc 
39a8			 
39a8			.tz_done: 
39a8 cd 2f 20				call forth_push_numhl 
39ab			 
39ab					NEXTW 
39ab c3 ea 23			jp macro_next 
39ae				endm 
# End of macro NEXTW
39ae			.LESS: 
39ae				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
39ae 2f				db WORD_SYS_CORE+27             
39af 17 3a			dw .GT            
39b1 02				db 1 + 1 
39b2 .. 00			db "<",0              
39b4				endm 
# End of macro CWHEAD
39b4			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
39b4				; TODO add floating point number detection 
39b4					if DEBUG_FORTH_WORDS_KEY 
39b4						DMARK "LES" 
39b4 f5				push af  
39b5 3a c9 39			ld a, (.dmark)  
39b8 32 a6 fd			ld (debug_mark),a  
39bb 3a ca 39			ld a, (.dmark+1)  
39be 32 a7 fd			ld (debug_mark+1),a  
39c1 3a cb 39			ld a, (.dmark+2)  
39c4 32 a8 fd			ld (debug_mark+2),a  
39c7 18 03			jr .pastdmark  
39c9 ..			.dmark: db "LES"  
39cc f1			.pastdmark: pop af  
39cd			endm  
# End of macro DMARK
39cd						CALLMONITOR 
39cd cd aa fd			call debug_vector  
39d0				endm  
# End of macro CALLMONITOR
39d0					endif 
39d0					FORTH_DSP 
39d0 cd fa 21			call macro_forth_dsp 
39d3				endm 
# End of macro FORTH_DSP
39d3					;v5 FORTH_DSP_VALUE 
39d3 7e					ld a,(hl)	; get type of value on TOS 
39d4 fe 02				cp DS_TYPE_INUM  
39d6 28 00				jr z, .less_inum 
39d8			 
39d8				if FORTH_ENABLE_FLOATMATH 
39d8					jr .less_done 
39d8			 
39d8				endif 
39d8					 
39d8			 
39d8			.less_inum: 
39d8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
39d8 cd 34 22			call macro_dsp_valuehl 
39db				endm 
# End of macro FORTH_DSP_VALUEHL
39db			 
39db e5					push hl  ; u2 
39dc			 
39dc					; destroy value TOS 
39dc			 
39dc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39dc cd ec 22			call macro_forth_dsp_pop 
39df				endm 
# End of macro FORTH_DSP_POP
39df			 
39df			 
39df					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
39df cd 34 22			call macro_dsp_valuehl 
39e2				endm 
# End of macro FORTH_DSP_VALUEHL
39e2			 
39e2 e5					push hl    ; u1 
39e3			 
39e3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39e3 cd ec 22			call macro_forth_dsp_pop 
39e6				endm 
# End of macro FORTH_DSP_POP
39e6			 
39e6			 
39e6 b7			 or a      ;clear carry flag 
39e7 01 00 00		 ld bc, FORTH_FALSE 
39ea e1			  pop hl    ; u1 
39eb d1			  pop de    ; u2 
39ec ed 52		  sbc hl,de 
39ee 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
39f0			 
39f0 01 01 00		 ld bc, FORTH_TRUE 
39f3			.lscont:  
39f3 c5					push bc 
39f4 e1					pop hl 
39f5			 
39f5					if DEBUG_FORTH_WORDS 
39f5						DMARK "LT1" 
39f5 f5				push af  
39f6 3a 0a 3a			ld a, (.dmark)  
39f9 32 a6 fd			ld (debug_mark),a  
39fc 3a 0b 3a			ld a, (.dmark+1)  
39ff 32 a7 fd			ld (debug_mark+1),a  
3a02 3a 0c 3a			ld a, (.dmark+2)  
3a05 32 a8 fd			ld (debug_mark+2),a  
3a08 18 03			jr .pastdmark  
3a0a ..			.dmark: db "LT1"  
3a0d f1			.pastdmark: pop af  
3a0e			endm  
# End of macro DMARK
3a0e						CALLMONITOR 
3a0e cd aa fd			call debug_vector  
3a11				endm  
# End of macro CALLMONITOR
3a11					endif 
3a11 cd 2f 20				call forth_push_numhl 
3a14			 
3a14					NEXTW 
3a14 c3 ea 23			jp macro_next 
3a17				endm 
# End of macro NEXTW
3a17			.GT: 
3a17				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3a17 30				db WORD_SYS_CORE+28             
3a18 80 3a			dw .EQUAL            
3a1a 02				db 1 + 1 
3a1b .. 00			db ">",0              
3a1d				endm 
# End of macro CWHEAD
3a1d			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3a1d				; TODO add floating point number detection 
3a1d					if DEBUG_FORTH_WORDS_KEY 
3a1d						DMARK "GRT" 
3a1d f5				push af  
3a1e 3a 32 3a			ld a, (.dmark)  
3a21 32 a6 fd			ld (debug_mark),a  
3a24 3a 33 3a			ld a, (.dmark+1)  
3a27 32 a7 fd			ld (debug_mark+1),a  
3a2a 3a 34 3a			ld a, (.dmark+2)  
3a2d 32 a8 fd			ld (debug_mark+2),a  
3a30 18 03			jr .pastdmark  
3a32 ..			.dmark: db "GRT"  
3a35 f1			.pastdmark: pop af  
3a36			endm  
# End of macro DMARK
3a36						CALLMONITOR 
3a36 cd aa fd			call debug_vector  
3a39				endm  
# End of macro CALLMONITOR
3a39					endif 
3a39					FORTH_DSP 
3a39 cd fa 21			call macro_forth_dsp 
3a3c				endm 
# End of macro FORTH_DSP
3a3c					;FORTH_DSP_VALUE 
3a3c 7e					ld a,(hl)	; get type of value on TOS 
3a3d fe 02				cp DS_TYPE_INUM  
3a3f 28 00				jr z, .gt_inum 
3a41			 
3a41				if FORTH_ENABLE_FLOATMATH 
3a41					jr .gt_done 
3a41			 
3a41				endif 
3a41					 
3a41			 
3a41			.gt_inum: 
3a41					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a41 cd 34 22			call macro_dsp_valuehl 
3a44				endm 
# End of macro FORTH_DSP_VALUEHL
3a44			 
3a44 e5					push hl  ; u2 
3a45			 
3a45					; destroy value TOS 
3a45			 
3a45					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a45 cd ec 22			call macro_forth_dsp_pop 
3a48				endm 
# End of macro FORTH_DSP_POP
3a48			 
3a48			 
3a48					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a48 cd 34 22			call macro_dsp_valuehl 
3a4b				endm 
# End of macro FORTH_DSP_VALUEHL
3a4b			 
3a4b e5					push hl    ; u1 
3a4c			 
3a4c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a4c cd ec 22			call macro_forth_dsp_pop 
3a4f				endm 
# End of macro FORTH_DSP_POP
3a4f			 
3a4f			 
3a4f b7			 or a      ;clear carry flag 
3a50 01 00 00		 ld bc, FORTH_FALSE 
3a53 e1			  pop hl    ; u1 
3a54 d1			  pop de    ; u2 
3a55 ed 52		  sbc hl,de 
3a57 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3a59			 
3a59 01 01 00		 ld bc, FORTH_TRUE 
3a5c			.gtcont:  
3a5c c5					push bc 
3a5d e1					pop hl 
3a5e			 
3a5e					if DEBUG_FORTH_WORDS 
3a5e						DMARK "GT1" 
3a5e f5				push af  
3a5f 3a 73 3a			ld a, (.dmark)  
3a62 32 a6 fd			ld (debug_mark),a  
3a65 3a 74 3a			ld a, (.dmark+1)  
3a68 32 a7 fd			ld (debug_mark+1),a  
3a6b 3a 75 3a			ld a, (.dmark+2)  
3a6e 32 a8 fd			ld (debug_mark+2),a  
3a71 18 03			jr .pastdmark  
3a73 ..			.dmark: db "GT1"  
3a76 f1			.pastdmark: pop af  
3a77			endm  
# End of macro DMARK
3a77						CALLMONITOR 
3a77 cd aa fd			call debug_vector  
3a7a				endm  
# End of macro CALLMONITOR
3a7a					endif 
3a7a cd 2f 20				call forth_push_numhl 
3a7d			 
3a7d					NEXTW 
3a7d c3 ea 23			jp macro_next 
3a80				endm 
# End of macro NEXTW
3a80			.EQUAL: 
3a80				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3a80 31				db WORD_SYS_CORE+29             
3a81 eb 3a			dw .ENDLOGIC            
3a83 02				db 1 + 1 
3a84 .. 00			db "=",0              
3a86				endm 
# End of macro CWHEAD
3a86			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3a86				; TODO add floating point number detection 
3a86					if DEBUG_FORTH_WORDS_KEY 
3a86						DMARK "EQ." 
3a86 f5				push af  
3a87 3a 9b 3a			ld a, (.dmark)  
3a8a 32 a6 fd			ld (debug_mark),a  
3a8d 3a 9c 3a			ld a, (.dmark+1)  
3a90 32 a7 fd			ld (debug_mark+1),a  
3a93 3a 9d 3a			ld a, (.dmark+2)  
3a96 32 a8 fd			ld (debug_mark+2),a  
3a99 18 03			jr .pastdmark  
3a9b ..			.dmark: db "EQ."  
3a9e f1			.pastdmark: pop af  
3a9f			endm  
# End of macro DMARK
3a9f						CALLMONITOR 
3a9f cd aa fd			call debug_vector  
3aa2				endm  
# End of macro CALLMONITOR
3aa2					endif 
3aa2					FORTH_DSP 
3aa2 cd fa 21			call macro_forth_dsp 
3aa5				endm 
# End of macro FORTH_DSP
3aa5					;v5 FORTH_DSP_VALUE 
3aa5 7e					ld a,(hl)	; get type of value on TOS 
3aa6 fe 02				cp DS_TYPE_INUM  
3aa8 28 00				jr z, .eq_inum 
3aaa			 
3aaa				if FORTH_ENABLE_FLOATMATH 
3aaa					jr .eq_done 
3aaa			 
3aaa				endif 
3aaa					 
3aaa			 
3aaa			.eq_inum: 
3aaa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3aaa cd 34 22			call macro_dsp_valuehl 
3aad				endm 
# End of macro FORTH_DSP_VALUEHL
3aad			 
3aad e5					push hl 
3aae			 
3aae					; destroy value TOS 
3aae			 
3aae					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3aae cd ec 22			call macro_forth_dsp_pop 
3ab1				endm 
# End of macro FORTH_DSP_POP
3ab1			 
3ab1			 
3ab1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ab1 cd 34 22			call macro_dsp_valuehl 
3ab4				endm 
# End of macro FORTH_DSP_VALUEHL
3ab4			 
3ab4					; one value on hl get other one back 
3ab4			 
3ab4 e5					push hl 
3ab5			 
3ab5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ab5 cd ec 22			call macro_forth_dsp_pop 
3ab8				endm 
# End of macro FORTH_DSP_POP
3ab8			 
3ab8 0e 00				ld c, FORTH_FALSE 
3aba			 
3aba e1					pop hl 
3abb d1					pop de 
3abc			 
3abc 7b					ld a, e 
3abd bd					cp l 
3abe			 
3abe 20 06				jr nz, .eq_done 
3ac0			 
3ac0 7a					ld a, d 
3ac1 bc					cp h 
3ac2			 
3ac2 20 02				jr nz, .eq_done 
3ac4			 
3ac4 0e 01				ld c, FORTH_TRUE 
3ac6					 
3ac6			 
3ac6			 
3ac6			.eq_done: 
3ac6			 
3ac6					; TODO push value back onto stack for another op etc 
3ac6			 
3ac6 26 00				ld h, 0 
3ac8 69					ld l, c 
3ac9					if DEBUG_FORTH_WORDS 
3ac9						DMARK "EQ1" 
3ac9 f5				push af  
3aca 3a de 3a			ld a, (.dmark)  
3acd 32 a6 fd			ld (debug_mark),a  
3ad0 3a df 3a			ld a, (.dmark+1)  
3ad3 32 a7 fd			ld (debug_mark+1),a  
3ad6 3a e0 3a			ld a, (.dmark+2)  
3ad9 32 a8 fd			ld (debug_mark+2),a  
3adc 18 03			jr .pastdmark  
3ade ..			.dmark: db "EQ1"  
3ae1 f1			.pastdmark: pop af  
3ae2			endm  
# End of macro DMARK
3ae2						CALLMONITOR 
3ae2 cd aa fd			call debug_vector  
3ae5				endm  
# End of macro CALLMONITOR
3ae5					endif 
3ae5 cd 2f 20				call forth_push_numhl 
3ae8			 
3ae8					NEXTW 
3ae8 c3 ea 23			jp macro_next 
3aeb				endm 
# End of macro NEXTW
3aeb			 
3aeb			 
3aeb			.ENDLOGIC: 
3aeb			; eof 
3aeb			 
3aeb			 
# End of file forth_words_logic.asm
3aeb			include "forth_words_maths.asm" 
3aeb			 
3aeb			; | ## Maths Words 
3aeb			 
3aeb			.PLUS:	 
3aeb				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3aeb 15				db WORD_SYS_CORE+1             
3aec 49 3b			dw .NEG            
3aee 02				db 1 + 1 
3aef .. 00			db "+",0              
3af1				endm 
# End of macro CWHEAD
3af1			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3af1					if DEBUG_FORTH_WORDS_KEY 
3af1						DMARK "PLU" 
3af1 f5				push af  
3af2 3a 06 3b			ld a, (.dmark)  
3af5 32 a6 fd			ld (debug_mark),a  
3af8 3a 07 3b			ld a, (.dmark+1)  
3afb 32 a7 fd			ld (debug_mark+1),a  
3afe 3a 08 3b			ld a, (.dmark+2)  
3b01 32 a8 fd			ld (debug_mark+2),a  
3b04 18 03			jr .pastdmark  
3b06 ..			.dmark: db "PLU"  
3b09 f1			.pastdmark: pop af  
3b0a			endm  
# End of macro DMARK
3b0a						CALLMONITOR 
3b0a cd aa fd			call debug_vector  
3b0d				endm  
# End of macro CALLMONITOR
3b0d					endif 
3b0d					; add top two values and push back result 
3b0d			 
3b0d					;for v5 FORTH_DSP_VALUE 
3b0d					FORTH_DSP 
3b0d cd fa 21			call macro_forth_dsp 
3b10				endm 
# End of macro FORTH_DSP
3b10 7e					ld a,(hl)	; get type of value on TOS 
3b11 fe 02				cp DS_TYPE_INUM  
3b13 28 03				jr z, .dot_inum 
3b15			 
3b15					NEXTW 
3b15 c3 ea 23			jp macro_next 
3b18				endm 
# End of macro NEXTW
3b18			 
3b18			; float maths 
3b18			 
3b18				if FORTH_ENABLE_FLOATMATH 
3b18						inc hl      ; now at start of numeric as string 
3b18			 
3b18					if DEBUG_FORTH_MATHS 
3b18						DMARK "ADD" 
3b18				CALLMONITOR 
3b18					endif 
3b18			 
3b18					;ld ix, hl 
3b18					call CON 
3b18			 
3b18			 
3b18					push hl 
3b18					 
3b18					 
3b18			 
3b18						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3b18			 
3b18					; get next number 
3b18			 
3b18						FORTH_DSP_VALUE 
3b18			 
3b18						inc hl      ; now at start of numeric as string 
3b18			 
3b18					;ld ix, hl 
3b18					call CON 
3b18			 
3b18					push hl 
3b18			 
3b18			 
3b18						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b18			 
3b18						; TODO do add 
3b18			 
3b18						call IADD 
3b18			 
3b18						; TODO get result back as ascii 
3b18			 
3b18						; TODO push result  
3b18			 
3b18			 
3b18			 
3b18						jr .dot_done 
3b18				endif 
3b18			 
3b18			.dot_inum: 
3b18			 
3b18			 
3b18					if DEBUG_FORTH_DOT 
3b18						DMARK "+IT" 
3b18 f5				push af  
3b19 3a 2d 3b			ld a, (.dmark)  
3b1c 32 a6 fd			ld (debug_mark),a  
3b1f 3a 2e 3b			ld a, (.dmark+1)  
3b22 32 a7 fd			ld (debug_mark+1),a  
3b25 3a 2f 3b			ld a, (.dmark+2)  
3b28 32 a8 fd			ld (debug_mark+2),a  
3b2b 18 03			jr .pastdmark  
3b2d ..			.dmark: db "+IT"  
3b30 f1			.pastdmark: pop af  
3b31			endm  
# End of macro DMARK
3b31				CALLMONITOR 
3b31 cd aa fd			call debug_vector  
3b34				endm  
# End of macro CALLMONITOR
3b34					endif 
3b34			 
3b34					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b34 cd 34 22			call macro_dsp_valuehl 
3b37				endm 
# End of macro FORTH_DSP_VALUEHL
3b37			 
3b37				; TODO add floating point number detection 
3b37			 
3b37 e5					push hl 
3b38			 
3b38					; destroy value TOS 
3b38			 
3b38					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b38 cd ec 22			call macro_forth_dsp_pop 
3b3b				endm 
# End of macro FORTH_DSP_POP
3b3b			 
3b3b			 
3b3b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b3b cd 34 22			call macro_dsp_valuehl 
3b3e				endm 
# End of macro FORTH_DSP_VALUEHL
3b3e			 
3b3e					; one value on hl get other one back 
3b3e			 
3b3e d1					pop de 
3b3f			 
3b3f					; do the add 
3b3f			 
3b3f 19					add hl,de 
3b40			 
3b40					; save it 
3b40			 
3b40			;		push hl	 
3b40			 
3b40					; 
3b40			 
3b40					; destroy value TOS 
3b40			 
3b40					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b40 cd ec 22			call macro_forth_dsp_pop 
3b43				endm 
# End of macro FORTH_DSP_POP
3b43			 
3b43					; TODO push value back onto stack for another op etc 
3b43			 
3b43			;		pop hl 
3b43			 
3b43			.dot_done: 
3b43 cd 2f 20				call forth_push_numhl 
3b46			 
3b46					NEXTW 
3b46 c3 ea 23			jp macro_next 
3b49				endm 
# End of macro NEXTW
3b49			.NEG: 
3b49			 
3b49				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3b49 17				db WORD_SYS_CORE+3             
3b4a 8c 3b			dw .DIV            
3b4c 02				db 1 + 1 
3b4d .. 00			db "-",0              
3b4f				endm 
# End of macro CWHEAD
3b4f			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3b4f					if DEBUG_FORTH_WORDS_KEY 
3b4f						DMARK "SUB" 
3b4f f5				push af  
3b50 3a 64 3b			ld a, (.dmark)  
3b53 32 a6 fd			ld (debug_mark),a  
3b56 3a 65 3b			ld a, (.dmark+1)  
3b59 32 a7 fd			ld (debug_mark+1),a  
3b5c 3a 66 3b			ld a, (.dmark+2)  
3b5f 32 a8 fd			ld (debug_mark+2),a  
3b62 18 03			jr .pastdmark  
3b64 ..			.dmark: db "SUB"  
3b67 f1			.pastdmark: pop af  
3b68			endm  
# End of macro DMARK
3b68						CALLMONITOR 
3b68 cd aa fd			call debug_vector  
3b6b				endm  
# End of macro CALLMONITOR
3b6b					endif 
3b6b			 
3b6b			 
3b6b				; TODO add floating point number detection 
3b6b					; v5 FORTH_DSP_VALUE 
3b6b					FORTH_DSP 
3b6b cd fa 21			call macro_forth_dsp 
3b6e				endm 
# End of macro FORTH_DSP
3b6e 7e					ld a,(hl)	; get type of value on TOS 
3b6f fe 02				cp DS_TYPE_INUM  
3b71 28 03				jr z, .neg_inum 
3b73			 
3b73					NEXTW 
3b73 c3 ea 23			jp macro_next 
3b76				endm 
# End of macro NEXTW
3b76			 
3b76			; float maths 
3b76			 
3b76				if FORTH_ENABLE_FLOATMATH 
3b76					jr .neg_done 
3b76			 
3b76				endif 
3b76					 
3b76			 
3b76			.neg_inum: 
3b76					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b76 cd 34 22			call macro_dsp_valuehl 
3b79				endm 
# End of macro FORTH_DSP_VALUEHL
3b79			 
3b79 e5					push hl 
3b7a			 
3b7a					; destroy value TOS 
3b7a			 
3b7a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b7a cd ec 22			call macro_forth_dsp_pop 
3b7d				endm 
# End of macro FORTH_DSP_POP
3b7d			 
3b7d			 
3b7d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b7d cd 34 22			call macro_dsp_valuehl 
3b80				endm 
# End of macro FORTH_DSP_VALUEHL
3b80			 
3b80					; one value on hl get other one back 
3b80			 
3b80 d1					pop de 
3b81			 
3b81					; do the sub 
3b81			;		ex de, hl 
3b81			 
3b81 ed 52				sbc hl,de 
3b83			 
3b83					; save it 
3b83			 
3b83			;		push hl	 
3b83			 
3b83					; 
3b83			 
3b83					; destroy value TOS 
3b83			 
3b83					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b83 cd ec 22			call macro_forth_dsp_pop 
3b86				endm 
# End of macro FORTH_DSP_POP
3b86			 
3b86					; TODO push value back onto stack for another op etc 
3b86			 
3b86			;		pop hl 
3b86			 
3b86 cd 2f 20				call forth_push_numhl 
3b89			.neg_done: 
3b89			 
3b89					NEXTW 
3b89 c3 ea 23			jp macro_next 
3b8c				endm 
# End of macro NEXTW
3b8c			.DIV: 
3b8c				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3b8c 18				db WORD_SYS_CORE+4             
3b8d d9 3b			dw .MUL            
3b8f 02				db 1 + 1 
3b90 .. 00			db "/",0              
3b92				endm 
# End of macro CWHEAD
3b92			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3b92					if DEBUG_FORTH_WORDS_KEY 
3b92						DMARK "DIV" 
3b92 f5				push af  
3b93 3a a7 3b			ld a, (.dmark)  
3b96 32 a6 fd			ld (debug_mark),a  
3b99 3a a8 3b			ld a, (.dmark+1)  
3b9c 32 a7 fd			ld (debug_mark+1),a  
3b9f 3a a9 3b			ld a, (.dmark+2)  
3ba2 32 a8 fd			ld (debug_mark+2),a  
3ba5 18 03			jr .pastdmark  
3ba7 ..			.dmark: db "DIV"  
3baa f1			.pastdmark: pop af  
3bab			endm  
# End of macro DMARK
3bab						CALLMONITOR 
3bab cd aa fd			call debug_vector  
3bae				endm  
# End of macro CALLMONITOR
3bae					endif 
3bae				; TODO add floating point number detection 
3bae					; v5 FORTH_DSP_VALUE 
3bae					FORTH_DSP 
3bae cd fa 21			call macro_forth_dsp 
3bb1				endm 
# End of macro FORTH_DSP
3bb1 7e					ld a,(hl)	; get type of value on TOS 
3bb2 fe 02				cp DS_TYPE_INUM  
3bb4 28 03				jr z, .div_inum 
3bb6			 
3bb6				if FORTH_ENABLE_FLOATMATH 
3bb6					jr .div_done 
3bb6			 
3bb6				endif 
3bb6					NEXTW 
3bb6 c3 ea 23			jp macro_next 
3bb9				endm 
# End of macro NEXTW
3bb9			.div_inum: 
3bb9			 
3bb9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bb9 cd 34 22			call macro_dsp_valuehl 
3bbc				endm 
# End of macro FORTH_DSP_VALUEHL
3bbc			 
3bbc e5					push hl    ; to go to bc 
3bbd			 
3bbd					; destroy value TOS 
3bbd			 
3bbd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bbd cd ec 22			call macro_forth_dsp_pop 
3bc0				endm 
# End of macro FORTH_DSP_POP
3bc0			 
3bc0			 
3bc0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bc0 cd 34 22			call macro_dsp_valuehl 
3bc3				endm 
# End of macro FORTH_DSP_VALUEHL
3bc3			 
3bc3					; hl to go to de 
3bc3			 
3bc3 e5					push hl 
3bc4			 
3bc4 c1					pop bc 
3bc5 d1					pop de		 
3bc6			 
3bc6			 
3bc6					if DEBUG_FORTH_MATHS 
3bc6						DMARK "DIV" 
3bc6				CALLMONITOR 
3bc6					endif 
3bc6					; one value on hl but move to a get other one back 
3bc6			 
3bc6			        
3bc6 cd 38 0f			call Div16 
3bc9			 
3bc9			;	push af	 
3bc9 e5				push hl 
3bca c5				push bc 
3bcb			 
3bcb					if DEBUG_FORTH_MATHS 
3bcb						DMARK "DI1" 
3bcb				CALLMONITOR 
3bcb					endif 
3bcb			 
3bcb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bcb cd ec 22			call macro_forth_dsp_pop 
3bce				endm 
# End of macro FORTH_DSP_POP
3bce			 
3bce			 
3bce			 
3bce e1					pop hl    ; result 
3bcf			 
3bcf cd 2f 20				call forth_push_numhl 
3bd2			 
3bd2 e1					pop hl    ; reminder 
3bd3			;		ld h,0 
3bd3			;		ld l,d 
3bd3			 
3bd3 cd 2f 20				call forth_push_numhl 
3bd6			.div_done: 
3bd6					NEXTW 
3bd6 c3 ea 23			jp macro_next 
3bd9				endm 
# End of macro NEXTW
3bd9			.MUL: 
3bd9				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3bd9 19				db WORD_SYS_CORE+5             
3bda 1e 3c			dw .MIN            
3bdc 02				db 1 + 1 
3bdd .. 00			db "*",0              
3bdf				endm 
# End of macro CWHEAD
3bdf			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3bdf				; TODO add floating point number detection 
3bdf					if DEBUG_FORTH_WORDS_KEY 
3bdf						DMARK "MUL" 
3bdf f5				push af  
3be0 3a f4 3b			ld a, (.dmark)  
3be3 32 a6 fd			ld (debug_mark),a  
3be6 3a f5 3b			ld a, (.dmark+1)  
3be9 32 a7 fd			ld (debug_mark+1),a  
3bec 3a f6 3b			ld a, (.dmark+2)  
3bef 32 a8 fd			ld (debug_mark+2),a  
3bf2 18 03			jr .pastdmark  
3bf4 ..			.dmark: db "MUL"  
3bf7 f1			.pastdmark: pop af  
3bf8			endm  
# End of macro DMARK
3bf8						CALLMONITOR 
3bf8 cd aa fd			call debug_vector  
3bfb				endm  
# End of macro CALLMONITOR
3bfb					endif 
3bfb					FORTH_DSP 
3bfb cd fa 21			call macro_forth_dsp 
3bfe				endm 
# End of macro FORTH_DSP
3bfe					; v5 FORTH_DSP_VALUE 
3bfe 7e					ld a,(hl)	; get type of value on TOS 
3bff fe 02				cp DS_TYPE_INUM  
3c01 28 03				jr z, .mul_inum 
3c03			 
3c03				if FORTH_ENABLE_FLOATMATH 
3c03					jr .mul_done 
3c03			 
3c03				endif 
3c03			 
3c03					NEXTW 
3c03 c3 ea 23			jp macro_next 
3c06				endm 
# End of macro NEXTW
3c06			.mul_inum:	 
3c06			 
3c06					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c06 cd 34 22			call macro_dsp_valuehl 
3c09				endm 
# End of macro FORTH_DSP_VALUEHL
3c09			 
3c09 e5					push hl 
3c0a			 
3c0a					; destroy value TOS 
3c0a			 
3c0a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c0a cd ec 22			call macro_forth_dsp_pop 
3c0d				endm 
# End of macro FORTH_DSP_POP
3c0d			 
3c0d			 
3c0d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c0d cd 34 22			call macro_dsp_valuehl 
3c10				endm 
# End of macro FORTH_DSP_VALUEHL
3c10			 
3c10					; one value on hl but move to a get other one back 
3c10			 
3c10 7d					ld a, l 
3c11			 
3c11 d1					pop de 
3c12			 
3c12					; do the mull 
3c12			;		ex de, hl 
3c12			 
3c12 cd 5e 0f				call Mult16 
3c15					; save it 
3c15			 
3c15			;		push hl	 
3c15			 
3c15					; 
3c15			 
3c15					; destroy value TOS 
3c15			 
3c15					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c15 cd ec 22			call macro_forth_dsp_pop 
3c18				endm 
# End of macro FORTH_DSP_POP
3c18			 
3c18					; TODO push value back onto stack for another op etc 
3c18			 
3c18			;		pop hl 
3c18			 
3c18 cd 2f 20				call forth_push_numhl 
3c1b			 
3c1b			.mul_done: 
3c1b					NEXTW 
3c1b c3 ea 23			jp macro_next 
3c1e				endm 
# End of macro NEXTW
3c1e			 
3c1e			 
3c1e			 
3c1e			 
3c1e			.MIN: 
3c1e				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3c1e 49				db WORD_SYS_CORE+53             
3c1f 9f 3c			dw .MAX            
3c21 04				db 3 + 1 
3c22 .. 00			db "MIN",0              
3c26				endm 
# End of macro CWHEAD
3c26			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3c26					if DEBUG_FORTH_WORDS_KEY 
3c26						DMARK "MIN" 
3c26 f5				push af  
3c27 3a 3b 3c			ld a, (.dmark)  
3c2a 32 a6 fd			ld (debug_mark),a  
3c2d 3a 3c 3c			ld a, (.dmark+1)  
3c30 32 a7 fd			ld (debug_mark+1),a  
3c33 3a 3d 3c			ld a, (.dmark+2)  
3c36 32 a8 fd			ld (debug_mark+2),a  
3c39 18 03			jr .pastdmark  
3c3b ..			.dmark: db "MIN"  
3c3e f1			.pastdmark: pop af  
3c3f			endm  
# End of macro DMARK
3c3f						CALLMONITOR 
3c3f cd aa fd			call debug_vector  
3c42				endm  
# End of macro CALLMONITOR
3c42					endif 
3c42					; get u2 
3c42			 
3c42					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c42 cd 34 22			call macro_dsp_valuehl 
3c45				endm 
# End of macro FORTH_DSP_VALUEHL
3c45			 
3c45 e5					push hl   ; u2 
3c46			 
3c46					; destroy value TOS 
3c46			 
3c46					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c46 cd ec 22			call macro_forth_dsp_pop 
3c49				endm 
# End of macro FORTH_DSP_POP
3c49			 
3c49					; get u1 
3c49			 
3c49					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c49 cd 34 22			call macro_dsp_valuehl 
3c4c				endm 
# End of macro FORTH_DSP_VALUEHL
3c4c			 
3c4c e5					push hl  ; u1 
3c4d			 
3c4d					; destroy value TOS 
3c4d			 
3c4d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c4d cd ec 22			call macro_forth_dsp_pop 
3c50				endm 
# End of macro FORTH_DSP_POP
3c50			 
3c50 b7			 or a      ;clear carry flag 
3c51 e1			  pop hl    ; u1 
3c52 d1			  pop de    ; u2 
3c53 e5				push hl   ; saved in case hl is lowest 
3c54 ed 52		  sbc hl,de 
3c56 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3c58			 
3c58 e1				pop hl 
3c59					if DEBUG_FORTH_WORDS 
3c59						DMARK "MIN" 
3c59 f5				push af  
3c5a 3a 6e 3c			ld a, (.dmark)  
3c5d 32 a6 fd			ld (debug_mark),a  
3c60 3a 6f 3c			ld a, (.dmark+1)  
3c63 32 a7 fd			ld (debug_mark+1),a  
3c66 3a 70 3c			ld a, (.dmark+2)  
3c69 32 a8 fd			ld (debug_mark+2),a  
3c6c 18 03			jr .pastdmark  
3c6e ..			.dmark: db "MIN"  
3c71 f1			.pastdmark: pop af  
3c72			endm  
# End of macro DMARK
3c72						CALLMONITOR 
3c72 cd aa fd			call debug_vector  
3c75				endm  
# End of macro CALLMONITOR
3c75					endif 
3c75 cd 2f 20				call forth_push_numhl 
3c78			 
3c78				       NEXTW 
3c78 c3 ea 23			jp macro_next 
3c7b				endm 
# End of macro NEXTW
3c7b			 
3c7b			.mincont:  
3c7b c1				pop bc   ; tidy up 
3c7c eb				ex de , hl  
3c7d					if DEBUG_FORTH_WORDS 
3c7d						DMARK "MI1" 
3c7d f5				push af  
3c7e 3a 92 3c			ld a, (.dmark)  
3c81 32 a6 fd			ld (debug_mark),a  
3c84 3a 93 3c			ld a, (.dmark+1)  
3c87 32 a7 fd			ld (debug_mark+1),a  
3c8a 3a 94 3c			ld a, (.dmark+2)  
3c8d 32 a8 fd			ld (debug_mark+2),a  
3c90 18 03			jr .pastdmark  
3c92 ..			.dmark: db "MI1"  
3c95 f1			.pastdmark: pop af  
3c96			endm  
# End of macro DMARK
3c96						CALLMONITOR 
3c96 cd aa fd			call debug_vector  
3c99				endm  
# End of macro CALLMONITOR
3c99					endif 
3c99 cd 2f 20				call forth_push_numhl 
3c9c			 
3c9c				       NEXTW 
3c9c c3 ea 23			jp macro_next 
3c9f				endm 
# End of macro NEXTW
3c9f			.MAX: 
3c9f				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3c9f 4a				db WORD_SYS_CORE+54             
3ca0 20 3d			dw .RND16            
3ca2 04				db 3 + 1 
3ca3 .. 00			db "MAX",0              
3ca7				endm 
# End of macro CWHEAD
3ca7			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3ca7					if DEBUG_FORTH_WORDS_KEY 
3ca7						DMARK "MAX" 
3ca7 f5				push af  
3ca8 3a bc 3c			ld a, (.dmark)  
3cab 32 a6 fd			ld (debug_mark),a  
3cae 3a bd 3c			ld a, (.dmark+1)  
3cb1 32 a7 fd			ld (debug_mark+1),a  
3cb4 3a be 3c			ld a, (.dmark+2)  
3cb7 32 a8 fd			ld (debug_mark+2),a  
3cba 18 03			jr .pastdmark  
3cbc ..			.dmark: db "MAX"  
3cbf f1			.pastdmark: pop af  
3cc0			endm  
# End of macro DMARK
3cc0						CALLMONITOR 
3cc0 cd aa fd			call debug_vector  
3cc3				endm  
# End of macro CALLMONITOR
3cc3					endif 
3cc3					; get u2 
3cc3			 
3cc3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cc3 cd 34 22			call macro_dsp_valuehl 
3cc6				endm 
# End of macro FORTH_DSP_VALUEHL
3cc6			 
3cc6 e5					push hl   ; u2 
3cc7			 
3cc7					; destroy value TOS 
3cc7			 
3cc7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cc7 cd ec 22			call macro_forth_dsp_pop 
3cca				endm 
# End of macro FORTH_DSP_POP
3cca			 
3cca					; get u1 
3cca			 
3cca					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cca cd 34 22			call macro_dsp_valuehl 
3ccd				endm 
# End of macro FORTH_DSP_VALUEHL
3ccd			 
3ccd e5					push hl  ; u1 
3cce			 
3cce					; destroy value TOS 
3cce			 
3cce					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cce cd ec 22			call macro_forth_dsp_pop 
3cd1				endm 
# End of macro FORTH_DSP_POP
3cd1			 
3cd1 b7			 or a      ;clear carry flag 
3cd2 e1			  pop hl    ; u1 
3cd3 d1			  pop de    ; u2 
3cd4 e5				push hl   ; saved in case hl is lowest 
3cd5 ed 52		  sbc hl,de 
3cd7 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3cd9			 
3cd9 e1				pop hl 
3cda					if DEBUG_FORTH_WORDS 
3cda						DMARK "MAX" 
3cda f5				push af  
3cdb 3a ef 3c			ld a, (.dmark)  
3cde 32 a6 fd			ld (debug_mark),a  
3ce1 3a f0 3c			ld a, (.dmark+1)  
3ce4 32 a7 fd			ld (debug_mark+1),a  
3ce7 3a f1 3c			ld a, (.dmark+2)  
3cea 32 a8 fd			ld (debug_mark+2),a  
3ced 18 03			jr .pastdmark  
3cef ..			.dmark: db "MAX"  
3cf2 f1			.pastdmark: pop af  
3cf3			endm  
# End of macro DMARK
3cf3						CALLMONITOR 
3cf3 cd aa fd			call debug_vector  
3cf6				endm  
# End of macro CALLMONITOR
3cf6					endif 
3cf6 cd 2f 20				call forth_push_numhl 
3cf9			 
3cf9				       NEXTW 
3cf9 c3 ea 23			jp macro_next 
3cfc				endm 
# End of macro NEXTW
3cfc			 
3cfc			.maxcont:  
3cfc c1				pop bc   ; tidy up 
3cfd eb				ex de , hl  
3cfe					if DEBUG_FORTH_WORDS 
3cfe						DMARK "MA1" 
3cfe f5				push af  
3cff 3a 13 3d			ld a, (.dmark)  
3d02 32 a6 fd			ld (debug_mark),a  
3d05 3a 14 3d			ld a, (.dmark+1)  
3d08 32 a7 fd			ld (debug_mark+1),a  
3d0b 3a 15 3d			ld a, (.dmark+2)  
3d0e 32 a8 fd			ld (debug_mark+2),a  
3d11 18 03			jr .pastdmark  
3d13 ..			.dmark: db "MA1"  
3d16 f1			.pastdmark: pop af  
3d17			endm  
# End of macro DMARK
3d17						CALLMONITOR 
3d17 cd aa fd			call debug_vector  
3d1a				endm  
# End of macro CALLMONITOR
3d1a					endif 
3d1a cd 2f 20				call forth_push_numhl 
3d1d				       NEXTW 
3d1d c3 ea 23			jp macro_next 
3d20				endm 
# End of macro NEXTW
3d20			 
3d20			.RND16: 
3d20				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3d20 4e				db WORD_SYS_CORE+58             
3d21 4f 3d			dw .RND8            
3d23 06				db 5 + 1 
3d24 .. 00			db "RND16",0              
3d2a				endm 
# End of macro CWHEAD
3d2a			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3d2a					if DEBUG_FORTH_WORDS_KEY 
3d2a						DMARK "R16" 
3d2a f5				push af  
3d2b 3a 3f 3d			ld a, (.dmark)  
3d2e 32 a6 fd			ld (debug_mark),a  
3d31 3a 40 3d			ld a, (.dmark+1)  
3d34 32 a7 fd			ld (debug_mark+1),a  
3d37 3a 41 3d			ld a, (.dmark+2)  
3d3a 32 a8 fd			ld (debug_mark+2),a  
3d3d 18 03			jr .pastdmark  
3d3f ..			.dmark: db "R16"  
3d42 f1			.pastdmark: pop af  
3d43			endm  
# End of macro DMARK
3d43						CALLMONITOR 
3d43 cd aa fd			call debug_vector  
3d46				endm  
# End of macro CALLMONITOR
3d46					endif 
3d46 cd 02 0f				call prng16  
3d49 cd 2f 20				call forth_push_numhl 
3d4c				       NEXTW 
3d4c c3 ea 23			jp macro_next 
3d4f				endm 
# End of macro NEXTW
3d4f			.RND8: 
3d4f				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3d4f 60				db WORD_SYS_CORE+76             
3d50 84 3d			dw .RND            
3d52 05				db 4 + 1 
3d53 .. 00			db "RND8",0              
3d58				endm 
# End of macro CWHEAD
3d58			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3d58					if DEBUG_FORTH_WORDS_KEY 
3d58						DMARK "RN8" 
3d58 f5				push af  
3d59 3a 6d 3d			ld a, (.dmark)  
3d5c 32 a6 fd			ld (debug_mark),a  
3d5f 3a 6e 3d			ld a, (.dmark+1)  
3d62 32 a7 fd			ld (debug_mark+1),a  
3d65 3a 6f 3d			ld a, (.dmark+2)  
3d68 32 a8 fd			ld (debug_mark+2),a  
3d6b 18 03			jr .pastdmark  
3d6d ..			.dmark: db "RN8"  
3d70 f1			.pastdmark: pop af  
3d71			endm  
# End of macro DMARK
3d71						CALLMONITOR 
3d71 cd aa fd			call debug_vector  
3d74				endm  
# End of macro CALLMONITOR
3d74					endif 
3d74 2a e4 fa				ld hl,(xrandc) 
3d77 23					inc hl 
3d78 cd 1c 0f				call xrnd 
3d7b 6f					ld l,a	 
3d7c 26 00				ld h,0 
3d7e cd 2f 20				call forth_push_numhl 
3d81				       NEXTW 
3d81 c3 ea 23			jp macro_next 
3d84				endm 
# End of macro NEXTW
3d84			.RND: 
3d84				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3d84 60				db WORD_SYS_CORE+76             
3d85 8a 3e			dw .ENDMATHS            
3d87 04				db 3 + 1 
3d88 .. 00			db "RND",0              
3d8c				endm 
# End of macro CWHEAD
3d8c			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3d8c			 
3d8c					if DEBUG_FORTH_WORDS_KEY 
3d8c						DMARK "RND" 
3d8c f5				push af  
3d8d 3a a1 3d			ld a, (.dmark)  
3d90 32 a6 fd			ld (debug_mark),a  
3d93 3a a2 3d			ld a, (.dmark+1)  
3d96 32 a7 fd			ld (debug_mark+1),a  
3d99 3a a3 3d			ld a, (.dmark+2)  
3d9c 32 a8 fd			ld (debug_mark+2),a  
3d9f 18 03			jr .pastdmark  
3da1 ..			.dmark: db "RND"  
3da4 f1			.pastdmark: pop af  
3da5			endm  
# End of macro DMARK
3da5						CALLMONITOR 
3da5 cd aa fd			call debug_vector  
3da8				endm  
# End of macro CALLMONITOR
3da8					endif 
3da8					 
3da8					FORTH_DSP_VALUEHL    ; upper range 
3da8 cd 34 22			call macro_dsp_valuehl 
3dab				endm 
# End of macro FORTH_DSP_VALUEHL
3dab			 
3dab 22 e8 fa				ld (LFSRSeed), hl	 
3dae			 
3dae					if DEBUG_FORTH_WORDS 
3dae						DMARK "RN1" 
3dae f5				push af  
3daf 3a c3 3d			ld a, (.dmark)  
3db2 32 a6 fd			ld (debug_mark),a  
3db5 3a c4 3d			ld a, (.dmark+1)  
3db8 32 a7 fd			ld (debug_mark+1),a  
3dbb 3a c5 3d			ld a, (.dmark+2)  
3dbe 32 a8 fd			ld (debug_mark+2),a  
3dc1 18 03			jr .pastdmark  
3dc3 ..			.dmark: db "RN1"  
3dc6 f1			.pastdmark: pop af  
3dc7			endm  
# End of macro DMARK
3dc7						CALLMONITOR 
3dc7 cd aa fd			call debug_vector  
3dca				endm  
# End of macro CALLMONITOR
3dca					endif 
3dca					FORTH_DSP_POP 
3dca cd ec 22			call macro_forth_dsp_pop 
3dcd				endm 
# End of macro FORTH_DSP_POP
3dcd			 
3dcd					FORTH_DSP_VALUEHL    ; low range 
3dcd cd 34 22			call macro_dsp_valuehl 
3dd0				endm 
# End of macro FORTH_DSP_VALUEHL
3dd0			 
3dd0					if DEBUG_FORTH_WORDS 
3dd0						DMARK "RN2" 
3dd0 f5				push af  
3dd1 3a e5 3d			ld a, (.dmark)  
3dd4 32 a6 fd			ld (debug_mark),a  
3dd7 3a e6 3d			ld a, (.dmark+1)  
3dda 32 a7 fd			ld (debug_mark+1),a  
3ddd 3a e7 3d			ld a, (.dmark+2)  
3de0 32 a8 fd			ld (debug_mark+2),a  
3de3 18 03			jr .pastdmark  
3de5 ..			.dmark: db "RN2"  
3de8 f1			.pastdmark: pop af  
3de9			endm  
# End of macro DMARK
3de9						CALLMONITOR 
3de9 cd aa fd			call debug_vector  
3dec				endm  
# End of macro CALLMONITOR
3dec					endif 
3dec 22 ea fa				ld (LFSRSeed+2), hl 
3def			 
3def					FORTH_DSP_POP 
3def cd ec 22			call macro_forth_dsp_pop 
3df2				endm 
# End of macro FORTH_DSP_POP
3df2			 
3df2 e5					push hl 
3df3			 
3df3 e1			.inrange:	pop hl 
3df4 cd 02 0f				call prng16  
3df7					if DEBUG_FORTH_WORDS 
3df7						DMARK "RN3" 
3df7 f5				push af  
3df8 3a 0c 3e			ld a, (.dmark)  
3dfb 32 a6 fd			ld (debug_mark),a  
3dfe 3a 0d 3e			ld a, (.dmark+1)  
3e01 32 a7 fd			ld (debug_mark+1),a  
3e04 3a 0e 3e			ld a, (.dmark+2)  
3e07 32 a8 fd			ld (debug_mark+2),a  
3e0a 18 03			jr .pastdmark  
3e0c ..			.dmark: db "RN3"  
3e0f f1			.pastdmark: pop af  
3e10			endm  
# End of macro DMARK
3e10						CALLMONITOR 
3e10 cd aa fd			call debug_vector  
3e13				endm  
# End of macro CALLMONITOR
3e13					endif 
3e13					 
3e13					; if the range is 8bit knock out the high byte 
3e13			 
3e13 ed 5b e8 fa			ld de, (LFSRSeed)     ; check high level 
3e17			 
3e17 3e 00				ld a, 0 
3e19 ba					cp d  
3e1a 20 1e				jr nz, .hirange 
3e1c 26 00				ld h, 0   ; knock it down to 8bit 
3e1e			 
3e1e					if DEBUG_FORTH_WORDS 
3e1e						DMARK "RNk" 
3e1e f5				push af  
3e1f 3a 33 3e			ld a, (.dmark)  
3e22 32 a6 fd			ld (debug_mark),a  
3e25 3a 34 3e			ld a, (.dmark+1)  
3e28 32 a7 fd			ld (debug_mark+1),a  
3e2b 3a 35 3e			ld a, (.dmark+2)  
3e2e 32 a8 fd			ld (debug_mark+2),a  
3e31 18 03			jr .pastdmark  
3e33 ..			.dmark: db "RNk"  
3e36 f1			.pastdmark: pop af  
3e37			endm  
# End of macro DMARK
3e37						CALLMONITOR 
3e37 cd aa fd			call debug_vector  
3e3a				endm  
# End of macro CALLMONITOR
3e3a					endif 
3e3a			.hirange:   
3e3a e5					push hl  
3e3b b7					or a  
3e3c ed 52		                sbc hl, de 
3e3e			 
3e3e					;call cmp16 
3e3e			 
3e3e 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3e40 e1					pop hl 
3e41 e5					push hl 
3e42			 
3e42					if DEBUG_FORTH_WORDS 
3e42						DMARK "RN4" 
3e42 f5				push af  
3e43 3a 57 3e			ld a, (.dmark)  
3e46 32 a6 fd			ld (debug_mark),a  
3e49 3a 58 3e			ld a, (.dmark+1)  
3e4c 32 a7 fd			ld (debug_mark+1),a  
3e4f 3a 59 3e			ld a, (.dmark+2)  
3e52 32 a8 fd			ld (debug_mark+2),a  
3e55 18 03			jr .pastdmark  
3e57 ..			.dmark: db "RN4"  
3e5a f1			.pastdmark: pop af  
3e5b			endm  
# End of macro DMARK
3e5b						CALLMONITOR 
3e5b cd aa fd			call debug_vector  
3e5e				endm  
# End of macro CALLMONITOR
3e5e					endif 
3e5e ed 5b ea fa			ld de, (LFSRSeed+2)   ; check low range 
3e62					;call cmp16 
3e62				 
3e62 b7					or a  
3e63 ed 52		                sbc hl, de 
3e65 38 8c				jr c, .inrange 
3e67			 
3e67 e1					pop hl 
3e68					 
3e68					if DEBUG_FORTH_WORDS 
3e68						DMARK "RNd" 
3e68 f5				push af  
3e69 3a 7d 3e			ld a, (.dmark)  
3e6c 32 a6 fd			ld (debug_mark),a  
3e6f 3a 7e 3e			ld a, (.dmark+1)  
3e72 32 a7 fd			ld (debug_mark+1),a  
3e75 3a 7f 3e			ld a, (.dmark+2)  
3e78 32 a8 fd			ld (debug_mark+2),a  
3e7b 18 03			jr .pastdmark  
3e7d ..			.dmark: db "RNd"  
3e80 f1			.pastdmark: pop af  
3e81			endm  
# End of macro DMARK
3e81						CALLMONITOR 
3e81 cd aa fd			call debug_vector  
3e84				endm  
# End of macro CALLMONITOR
3e84					endif 
3e84			 
3e84			 
3e84 cd 2f 20				call forth_push_numhl 
3e87				       NEXTW 
3e87 c3 ea 23			jp macro_next 
3e8a				endm 
# End of macro NEXTW
3e8a			 
3e8a			.ENDMATHS: 
3e8a			 
3e8a			; eof 
3e8a			 
# End of file forth_words_maths.asm
3e8a			include "forth_words_display.asm" 
3e8a			 
3e8a			; | ## Display Words 
3e8a			 
3e8a			.ACT: 
3e8a			 
3e8a				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3e8a 62				db WORD_SYS_CORE+78             
3e8b d6 3e			dw .INFO            
3e8d 07				db 6 + 1 
3e8e .. 00			db "ACTIVE",0              
3e95				endm 
# End of macro CWHEAD
3e95			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3e95			;  
3e95			; | | To display a pulsing activity indicator in a processing loop do this... 
3e95			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3e95			 
3e95					if DEBUG_FORTH_WORDS_KEY 
3e95						DMARK "ACT" 
3e95 f5				push af  
3e96 3a aa 3e			ld a, (.dmark)  
3e99 32 a6 fd			ld (debug_mark),a  
3e9c 3a ab 3e			ld a, (.dmark+1)  
3e9f 32 a7 fd			ld (debug_mark+1),a  
3ea2 3a ac 3e			ld a, (.dmark+2)  
3ea5 32 a8 fd			ld (debug_mark+2),a  
3ea8 18 03			jr .pastdmark  
3eaa ..			.dmark: db "ACT"  
3ead f1			.pastdmark: pop af  
3eae			endm  
# End of macro DMARK
3eae						CALLMONITOR 
3eae cd aa fd			call debug_vector  
3eb1				endm  
# End of macro CALLMONITOR
3eb1					endif 
3eb1 cd fe 0c				call active 
3eb4					if DEBUG_FORTH_WORDS 
3eb4						DMARK "ACp" 
3eb4 f5				push af  
3eb5 3a c9 3e			ld a, (.dmark)  
3eb8 32 a6 fd			ld (debug_mark),a  
3ebb 3a ca 3e			ld a, (.dmark+1)  
3ebe 32 a7 fd			ld (debug_mark+1),a  
3ec1 3a cb 3e			ld a, (.dmark+2)  
3ec4 32 a8 fd			ld (debug_mark+2),a  
3ec7 18 03			jr .pastdmark  
3ec9 ..			.dmark: db "ACp"  
3ecc f1			.pastdmark: pop af  
3ecd			endm  
# End of macro DMARK
3ecd						CALLMONITOR 
3ecd cd aa fd			call debug_vector  
3ed0				endm  
# End of macro CALLMONITOR
3ed0					endif 
3ed0 cd 9d 20				call forth_push_str 
3ed3			 
3ed3					NEXTW 
3ed3 c3 ea 23			jp macro_next 
3ed6				endm 
# End of macro NEXTW
3ed6			.INFO: 
3ed6			 
3ed6				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3ed6 62				db WORD_SYS_CORE+78             
3ed7 f3 3e			dw .ATP            
3ed9 05				db 4 + 1 
3eda .. 00			db "INFO",0              
3edf				endm 
# End of macro CWHEAD
3edf			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3edf					FORTH_DSP_VALUEHL 
3edf cd 34 22			call macro_dsp_valuehl 
3ee2				endm 
# End of macro FORTH_DSP_VALUEHL
3ee2			 
3ee2					FORTH_DSP_POP 
3ee2 cd ec 22			call macro_forth_dsp_pop 
3ee5				endm 
# End of macro FORTH_DSP_POP
3ee5			 
3ee5 e5					push hl 
3ee6			 
3ee6					FORTH_DSP_VALUEHL 
3ee6 cd 34 22			call macro_dsp_valuehl 
3ee9				endm 
# End of macro FORTH_DSP_VALUEHL
3ee9			 
3ee9					FORTH_DSP_POP 
3ee9 cd ec 22			call macro_forth_dsp_pop 
3eec				endm 
# End of macro FORTH_DSP_POP
3eec			 
3eec d1					pop de 
3eed			 
3eed cd 38 0d				call info_panel 
3ef0			 
3ef0			 
3ef0					NEXTW 
3ef0 c3 ea 23			jp macro_next 
3ef3				endm 
# End of macro NEXTW
3ef3			.ATP: 
3ef3				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3ef3 62				db WORD_SYS_CORE+78             
3ef4 6a 3f			dw .FB            
3ef6 04				db 3 + 1 
3ef7 .. 00			db "AT?",0              
3efb				endm 
# End of macro CWHEAD
3efb			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3efb					if DEBUG_FORTH_WORDS_KEY 
3efb						DMARK "AT?" 
3efb f5				push af  
3efc 3a 10 3f			ld a, (.dmark)  
3eff 32 a6 fd			ld (debug_mark),a  
3f02 3a 11 3f			ld a, (.dmark+1)  
3f05 32 a7 fd			ld (debug_mark+1),a  
3f08 3a 12 3f			ld a, (.dmark+2)  
3f0b 32 a8 fd			ld (debug_mark+2),a  
3f0e 18 03			jr .pastdmark  
3f10 ..			.dmark: db "AT?"  
3f13 f1			.pastdmark: pop af  
3f14			endm  
# End of macro DMARK
3f14						CALLMONITOR 
3f14 cd aa fd			call debug_vector  
3f17				endm  
# End of macro CALLMONITOR
3f17					endif 
3f17 3a 99 f9				ld a, (f_cursor_ptr) 
3f1a			 
3f1a			if DEBUG_FORTH_WORDS 
3f1a				DMARK "AT?" 
3f1a f5				push af  
3f1b 3a 2f 3f			ld a, (.dmark)  
3f1e 32 a6 fd			ld (debug_mark),a  
3f21 3a 30 3f			ld a, (.dmark+1)  
3f24 32 a7 fd			ld (debug_mark+1),a  
3f27 3a 31 3f			ld a, (.dmark+2)  
3f2a 32 a8 fd			ld (debug_mark+2),a  
3f2d 18 03			jr .pastdmark  
3f2f ..			.dmark: db "AT?"  
3f32 f1			.pastdmark: pop af  
3f33			endm  
# End of macro DMARK
3f33				CALLMONITOR 
3f33 cd aa fd			call debug_vector  
3f36				endm  
# End of macro CALLMONITOR
3f36			endif	 
3f36					; count the number of rows 
3f36			 
3f36 06 00				ld b, 0 
3f38 4f			.atpr:		ld c, a    ; save in case we go below zero 
3f39 d6 28				sub display_cols 
3f3b f2 41 3f				jp p, .atprunder 
3f3e 04					inc b 
3f3f 18 f7				jr .atpr 
3f41			.atprunder:	 
3f41			if DEBUG_FORTH_WORDS 
3f41				DMARK "A?2" 
3f41 f5				push af  
3f42 3a 56 3f			ld a, (.dmark)  
3f45 32 a6 fd			ld (debug_mark),a  
3f48 3a 57 3f			ld a, (.dmark+1)  
3f4b 32 a7 fd			ld (debug_mark+1),a  
3f4e 3a 58 3f			ld a, (.dmark+2)  
3f51 32 a8 fd			ld (debug_mark+2),a  
3f54 18 03			jr .pastdmark  
3f56 ..			.dmark: db "A?2"  
3f59 f1			.pastdmark: pop af  
3f5a			endm  
# End of macro DMARK
3f5a				CALLMONITOR 
3f5a cd aa fd			call debug_vector  
3f5d				endm  
# End of macro CALLMONITOR
3f5d			endif	 
3f5d 26 00				ld h, 0 
3f5f 69					ld l, c 
3f60 cd 2f 20				call forth_push_numhl 
3f63 68					ld l, b  
3f64 cd 2f 20				call forth_push_numhl 
3f67			 
3f67			 
3f67				NEXTW 
3f67 c3 ea 23			jp macro_next 
3f6a				endm 
# End of macro NEXTW
3f6a			 
3f6a			.FB: 
3f6a				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3f6a 1b				db WORD_SYS_CORE+7             
3f6b b8 3f			dw .EMIT            
3f6d 03				db 2 + 1 
3f6e .. 00			db "FB",0              
3f71				endm 
# End of macro CWHEAD
3f71			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3f71			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3f71			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3f71			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3f71					if DEBUG_FORTH_WORDS_KEY 
3f71						DMARK "FB." 
3f71 f5				push af  
3f72 3a 86 3f			ld a, (.dmark)  
3f75 32 a6 fd			ld (debug_mark),a  
3f78 3a 87 3f			ld a, (.dmark+1)  
3f7b 32 a7 fd			ld (debug_mark+1),a  
3f7e 3a 88 3f			ld a, (.dmark+2)  
3f81 32 a8 fd			ld (debug_mark+2),a  
3f84 18 03			jr .pastdmark  
3f86 ..			.dmark: db "FB."  
3f89 f1			.pastdmark: pop af  
3f8a			endm  
# End of macro DMARK
3f8a						CALLMONITOR 
3f8a cd aa fd			call debug_vector  
3f8d				endm  
# End of macro CALLMONITOR
3f8d					endif 
3f8d			 
3f8d					FORTH_DSP_VALUEHL 
3f8d cd 34 22			call macro_dsp_valuehl 
3f90				endm 
# End of macro FORTH_DSP_VALUEHL
3f90			 
3f90 7d					ld a, l 
3f91 fe 01				cp 1 
3f93 20 05				jr nz, .fbn1 
3f95 21 4b fc				ld hl, display_fb1 
3f98 18 15				jr .fbset 
3f9a fe 02		.fbn1:		cp 2 
3f9c 20 05				jr nz, .fbn2 
3f9e 21 09 fb				ld hl, display_fb2 
3fa1 18 0c				jr .fbset 
3fa3 fe 03		.fbn2:		cp 3 
3fa5 20 05				jr nz, .fbn3 
3fa7 21 aa fb				ld hl, display_fb3 
3faa 18 03				jr .fbset 
3fac			.fbn3:		 ; if invalid number select first 
3fac 21 4b fc				ld hl, display_fb1 
3faf 22 07 fb		.fbset:		ld (display_fb_active), hl 
3fb2			 
3fb2					FORTH_DSP_POP 
3fb2 cd ec 22			call macro_forth_dsp_pop 
3fb5				endm 
# End of macro FORTH_DSP_POP
3fb5			 
3fb5					NEXTW 
3fb5 c3 ea 23			jp macro_next 
3fb8				endm 
# End of macro NEXTW
3fb8			 
3fb8			 
3fb8			.EMIT: 
3fb8				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3fb8 1b				db WORD_SYS_CORE+7             
3fb9 09 40			dw .DOTH            
3fbb 05				db 4 + 1 
3fbc .. 00			db "EMIT",0              
3fc1				endm 
# End of macro CWHEAD
3fc1			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3fc1					; get value off TOS and display it 
3fc1			 
3fc1					if DEBUG_FORTH_WORDS_KEY 
3fc1						DMARK "EMT" 
3fc1 f5				push af  
3fc2 3a d6 3f			ld a, (.dmark)  
3fc5 32 a6 fd			ld (debug_mark),a  
3fc8 3a d7 3f			ld a, (.dmark+1)  
3fcb 32 a7 fd			ld (debug_mark+1),a  
3fce 3a d8 3f			ld a, (.dmark+2)  
3fd1 32 a8 fd			ld (debug_mark+2),a  
3fd4 18 03			jr .pastdmark  
3fd6 ..			.dmark: db "EMT"  
3fd9 f1			.pastdmark: pop af  
3fda			endm  
# End of macro DMARK
3fda						CALLMONITOR 
3fda cd aa fd			call debug_vector  
3fdd				endm  
# End of macro CALLMONITOR
3fdd					endif 
3fdd			 
3fdd					FORTH_DSP_VALUEHL 
3fdd cd 34 22			call macro_dsp_valuehl 
3fe0				endm 
# End of macro FORTH_DSP_VALUEHL
3fe0			 
3fe0 7d					ld a,l 
3fe1			 
3fe1					; TODO write to display 
3fe1			 
3fe1 32 fa f2				ld (os_input), a 
3fe4 3e 00				ld a, 0 
3fe6 32 fb f2				ld (os_input+1), a 
3fe9					 
3fe9 3a 99 f9				ld a, (f_cursor_ptr) 
3fec 11 fa f2				ld de, os_input 
3fef cd ba 0d				call str_at_display 
3ff2			 
3ff2			 
3ff2 3a 77 f9				ld a,(cli_autodisplay) 
3ff5 fe 00				cp 0 
3ff7 28 03				jr z, .enoupdate 
3ff9 cd ca 0d						call update_display 
3ffc					.enoupdate: 
3ffc			 
3ffc 3a 99 f9				ld a, (f_cursor_ptr) 
3fff 3c					inc a 
4000 32 99 f9				ld (f_cursor_ptr), a   ; save new pos 
4003			 
4003			 
4003					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4003 cd ec 22			call macro_forth_dsp_pop 
4006				endm 
# End of macro FORTH_DSP_POP
4006			  
4006			 
4006					NEXTW 
4006 c3 ea 23			jp macro_next 
4009				endm 
# End of macro NEXTW
4009			.DOTH: 
4009				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
4009 1c				db WORD_SYS_CORE+8             
400a 39 40			dw .DOTF            
400c 03				db 2 + 1 
400d .. 00			db ".-",0              
4010				endm 
# End of macro CWHEAD
4010			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
4010					; get value off TOS and display it 
4010					if DEBUG_FORTH_WORDS_KEY 
4010						DMARK "DTD" 
4010 f5				push af  
4011 3a 25 40			ld a, (.dmark)  
4014 32 a6 fd			ld (debug_mark),a  
4017 3a 26 40			ld a, (.dmark+1)  
401a 32 a7 fd			ld (debug_mark+1),a  
401d 3a 27 40			ld a, (.dmark+2)  
4020 32 a8 fd			ld (debug_mark+2),a  
4023 18 03			jr .pastdmark  
4025 ..			.dmark: db "DTD"  
4028 f1			.pastdmark: pop af  
4029			endm  
# End of macro DMARK
4029						CALLMONITOR 
4029 cd aa fd			call debug_vector  
402c				endm  
# End of macro CALLMONITOR
402c					endif 
402c 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
402e 3e 00			ld a, 0 
4030 32 78 f9			ld (cli_mvdot), a 
4033 c3 90 40			jp .dotgo 
4036				NEXTW 
4036 c3 ea 23			jp macro_next 
4039				endm 
# End of macro NEXTW
4039			.DOTF: 
4039				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
4039 1c				db WORD_SYS_CORE+8             
403a 67 40			dw .DOT            
403c 03				db 2 + 1 
403d .. 00			db ".>",0              
4040				endm 
# End of macro CWHEAD
4040			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
4040					; get value off TOS and display it 
4040			        ; TODO BUG adds extra spaces 
4040			        ; TODO BUG handle numerics? 
4040					if DEBUG_FORTH_WORDS_KEY 
4040						DMARK "DTC" 
4040 f5				push af  
4041 3a 55 40			ld a, (.dmark)  
4044 32 a6 fd			ld (debug_mark),a  
4047 3a 56 40			ld a, (.dmark+1)  
404a 32 a7 fd			ld (debug_mark+1),a  
404d 3a 57 40			ld a, (.dmark+2)  
4050 32 a8 fd			ld (debug_mark+2),a  
4053 18 03			jr .pastdmark  
4055 ..			.dmark: db "DTC"  
4058 f1			.pastdmark: pop af  
4059			endm  
# End of macro DMARK
4059						CALLMONITOR 
4059 cd aa fd			call debug_vector  
405c				endm  
# End of macro CALLMONITOR
405c					endif 
405c 3e 01			ld a, 1 
405e 32 78 f9			ld (cli_mvdot), a 
4061 c3 90 40			jp .dotgo 
4064				NEXTW 
4064 c3 ea 23			jp macro_next 
4067				endm 
# End of macro NEXTW
4067			 
4067			.DOT: 
4067				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
4067 1c				db WORD_SYS_CORE+8             
4068 43 42			dw .CLS            
406a 02				db 1 + 1 
406b .. 00			db ".",0              
406d				endm 
# End of macro CWHEAD
406d			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
406d					; get value off TOS and display it 
406d			 
406d					if DEBUG_FORTH_WORDS_KEY 
406d						DMARK "DOT" 
406d f5				push af  
406e 3a 82 40			ld a, (.dmark)  
4071 32 a6 fd			ld (debug_mark),a  
4074 3a 83 40			ld a, (.dmark+1)  
4077 32 a7 fd			ld (debug_mark+1),a  
407a 3a 84 40			ld a, (.dmark+2)  
407d 32 a8 fd			ld (debug_mark+2),a  
4080 18 03			jr .pastdmark  
4082 ..			.dmark: db "DOT"  
4085 f1			.pastdmark: pop af  
4086			endm  
# End of macro DMARK
4086						CALLMONITOR 
4086 cd aa fd			call debug_vector  
4089				endm  
# End of macro CALLMONITOR
4089					endif 
4089 3e 00			ld a, 0 
408b 32 78 f9			ld (cli_mvdot), a 
408e 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
4090				 
4090			 
4090			.dotgo: 
4090			 
4090			; move up type to on stack for parserv5 
4090					FORTH_DSP 
4090 cd fa 21			call macro_forth_dsp 
4093				endm 
# End of macro FORTH_DSP
4093				;FORTH_DSP_VALUE  
4093			 
4093			if DEBUG_FORTH_DOT 
4093				DMARK "DOT" 
4093 f5				push af  
4094 3a a8 40			ld a, (.dmark)  
4097 32 a6 fd			ld (debug_mark),a  
409a 3a a9 40			ld a, (.dmark+1)  
409d 32 a7 fd			ld (debug_mark+1),a  
40a0 3a aa 40			ld a, (.dmark+2)  
40a3 32 a8 fd			ld (debug_mark+2),a  
40a6 18 03			jr .pastdmark  
40a8 ..			.dmark: db "DOT"  
40ab f1			.pastdmark: pop af  
40ac			endm  
# End of macro DMARK
40ac				CALLMONITOR 
40ac cd aa fd			call debug_vector  
40af				endm  
# End of macro CALLMONITOR
40af			endif	 
40af			;		.print: 
40af			 
40af 7e				ld a,(hl)  ; work out what type of value is on the TOS 
40b0 23				inc hl   ; position to the actual value 
40b1 fe 01			cp DS_TYPE_STR 
40b3 20 06			jr nz, .dotnum1  
40b5			 
40b5			; display string 
40b5				FORTH_DSP_VALUE  
40b5 cd 1d 22			call macro_forth_dsp_value 
40b8				endm 
# End of macro FORTH_DSP_VALUE
40b8 eb				ex de,hl 
40b9 18 49			jr .dotwrite 
40bb			 
40bb			.dotnum1: 
40bb fe 02			cp DS_TYPE_INUM 
40bd 20 44			jr nz, .dotflot 
40bf			 
40bf			 
40bf			; display number 
40bf			 
40bf			;	push hl 
40bf			;	call clear_display 
40bf			;	pop hl 
40bf			 
40bf 5e				ld e, (hl) 
40c0 23				inc hl 
40c1 56				ld d, (hl) 
40c2 21 fc f0			ld hl, scratch 
40c5			if DEBUG_FORTH_DOT 
40c5				DMARK "DT1" 
40c5 f5				push af  
40c6 3a da 40			ld a, (.dmark)  
40c9 32 a6 fd			ld (debug_mark),a  
40cc 3a db 40			ld a, (.dmark+1)  
40cf 32 a7 fd			ld (debug_mark+1),a  
40d2 3a dc 40			ld a, (.dmark+2)  
40d5 32 a8 fd			ld (debug_mark+2),a  
40d8 18 03			jr .pastdmark  
40da ..			.dmark: db "DT1"  
40dd f1			.pastdmark: pop af  
40de			endm  
# End of macro DMARK
40de				CALLMONITOR 
40de cd aa fd			call debug_vector  
40e1				endm  
# End of macro CALLMONITOR
40e1			endif	 
40e1			 
40e1 cd f0 12			call uitoa_16 
40e4 eb				ex de,hl 
40e5			 
40e5			if DEBUG_FORTH_DOT 
40e5				DMARK "DT2" 
40e5 f5				push af  
40e6 3a fa 40			ld a, (.dmark)  
40e9 32 a6 fd			ld (debug_mark),a  
40ec 3a fb 40			ld a, (.dmark+1)  
40ef 32 a7 fd			ld (debug_mark+1),a  
40f2 3a fc 40			ld a, (.dmark+2)  
40f5 32 a8 fd			ld (debug_mark+2),a  
40f8 18 03			jr .pastdmark  
40fa ..			.dmark: db "DT2"  
40fd f1			.pastdmark: pop af  
40fe			endm  
# End of macro DMARK
40fe				CALLMONITOR 
40fe cd aa fd			call debug_vector  
4101				endm  
# End of macro CALLMONITOR
4101			endif	 
4101			 
4101			;	ld de, os_word_scratch 
4101 18 01			jr .dotwrite 
4103			 
4103 00			.dotflot:   nop 
4104			; TODO print floating point number 
4104			 
4104			.dotwrite:		 
4104			 
4104					; if c is set then set all '-' to spaces 
4104					; need to also take into account .>  
4104			 
4104 3e 01				ld a, 1 
4106 b9					cp c 
4107 20 67				jr nz, .nodashswap 
4109			 
4109					; DE has the string to write, working with HL 
4109			 
4109 06 ff				ld b, 255 
410b d5					push de 
410c e1					pop hl 
410d			 
410d			if DEBUG_FORTH_DOT 
410d				DMARK "DT-" 
410d f5				push af  
410e 3a 22 41			ld a, (.dmark)  
4111 32 a6 fd			ld (debug_mark),a  
4114 3a 23 41			ld a, (.dmark+1)  
4117 32 a7 fd			ld (debug_mark+1),a  
411a 3a 24 41			ld a, (.dmark+2)  
411d 32 a8 fd			ld (debug_mark+2),a  
4120 18 03			jr .pastdmark  
4122 ..			.dmark: db "DT-"  
4125 f1			.pastdmark: pop af  
4126			endm  
# End of macro DMARK
4126				CALLMONITOR 
4126 cd aa fd			call debug_vector  
4129				endm  
# End of macro CALLMONITOR
4129			endif	 
4129 7e			.dashscan:	ld a, (hl) 
412a fe 00				cp 0 
412c 28 42				jr z, .nodashswap 
412e fe 2d				cp '-' 
4130 20 03				jr nz, .dashskip 
4132 3e 20				ld a, ' ' 
4134 77					ld (hl), a 
4135 23			.dashskip:	inc hl 
4136			if DEBUG_FORTH_DOT 
4136				DMARK "D-2" 
4136 f5				push af  
4137 3a 4b 41			ld a, (.dmark)  
413a 32 a6 fd			ld (debug_mark),a  
413d 3a 4c 41			ld a, (.dmark+1)  
4140 32 a7 fd			ld (debug_mark+1),a  
4143 3a 4d 41			ld a, (.dmark+2)  
4146 32 a8 fd			ld (debug_mark+2),a  
4149 18 03			jr .pastdmark  
414b ..			.dmark: db "D-2"  
414e f1			.pastdmark: pop af  
414f			endm  
# End of macro DMARK
414f				CALLMONITOR 
414f cd aa fd			call debug_vector  
4152				endm  
# End of macro CALLMONITOR
4152			endif	 
4152 10 d5				djnz .dashscan 
4154			 
4154			if DEBUG_FORTH_DOT 
4154				DMARK "D-1" 
4154 f5				push af  
4155 3a 69 41			ld a, (.dmark)  
4158 32 a6 fd			ld (debug_mark),a  
415b 3a 6a 41			ld a, (.dmark+1)  
415e 32 a7 fd			ld (debug_mark+1),a  
4161 3a 6b 41			ld a, (.dmark+2)  
4164 32 a8 fd			ld (debug_mark+2),a  
4167 18 03			jr .pastdmark  
4169 ..			.dmark: db "D-1"  
416c f1			.pastdmark: pop af  
416d			endm  
# End of macro DMARK
416d				CALLMONITOR 
416d cd aa fd			call debug_vector  
4170				endm  
# End of macro CALLMONITOR
4170			endif	 
4170			 
4170			.nodashswap: 
4170			 
4170			if DEBUG_FORTH_DOT 
4170				DMARK "D-o" 
4170 f5				push af  
4171 3a 85 41			ld a, (.dmark)  
4174 32 a6 fd			ld (debug_mark),a  
4177 3a 86 41			ld a, (.dmark+1)  
417a 32 a7 fd			ld (debug_mark+1),a  
417d 3a 87 41			ld a, (.dmark+2)  
4180 32 a8 fd			ld (debug_mark+2),a  
4183 18 03			jr .pastdmark  
4185 ..			.dmark: db "D-o"  
4188 f1			.pastdmark: pop af  
4189			endm  
# End of macro DMARK
4189				CALLMONITOR 
4189 cd aa fd			call debug_vector  
418c				endm  
# End of macro CALLMONITOR
418c			endif	 
418c			 
418c d5					push de   ; save string start in case we need to advance print 
418d			 
418d 3a 99 f9				ld a, (f_cursor_ptr) 
4190 cd ba 0d				call str_at_display 
4193 3a 77 f9				ld a,(cli_autodisplay) 
4196 fe 00				cp 0 
4198 28 03				jr z, .noupdate 
419a cd ca 0d						call update_display 
419d					.noupdate: 
419d			 
419d			 
419d					; see if we need to advance the print position 
419d			 
419d e1					pop hl   ; get back string 
419e			;		ex de,hl 
419e			 
419e 3a 78 f9				ld a, (cli_mvdot) 
41a1			if DEBUG_FORTH_DOT 
41a1			;		ld e,a 
41a1				DMARK "D>1" 
41a1 f5				push af  
41a2 3a b6 41			ld a, (.dmark)  
41a5 32 a6 fd			ld (debug_mark),a  
41a8 3a b7 41			ld a, (.dmark+1)  
41ab 32 a7 fd			ld (debug_mark+1),a  
41ae 3a b8 41			ld a, (.dmark+2)  
41b1 32 a8 fd			ld (debug_mark+2),a  
41b4 18 03			jr .pastdmark  
41b6 ..			.dmark: db "D>1"  
41b9 f1			.pastdmark: pop af  
41ba			endm  
# End of macro DMARK
41ba				CALLMONITOR 
41ba cd aa fd			call debug_vector  
41bd				endm  
# End of macro CALLMONITOR
41bd			endif	 
41bd fe 00				cp 0 
41bf 28 44				jr z, .noadv 
41c1					; yes, lets advance the print position 
41c1 3e 00				ld a, 0 
41c3 cd 4c 13				call strlent 
41c6			if DEBUG_FORTH_DOT 
41c6				DMARK "D-?" 
41c6 f5				push af  
41c7 3a db 41			ld a, (.dmark)  
41ca 32 a6 fd			ld (debug_mark),a  
41cd 3a dc 41			ld a, (.dmark+1)  
41d0 32 a7 fd			ld (debug_mark+1),a  
41d3 3a dd 41			ld a, (.dmark+2)  
41d6 32 a8 fd			ld (debug_mark+2),a  
41d9 18 03			jr .pastdmark  
41db ..			.dmark: db "D-?"  
41de f1			.pastdmark: pop af  
41df			endm  
# End of macro DMARK
41df				CALLMONITOR 
41df cd aa fd			call debug_vector  
41e2				endm  
# End of macro CALLMONITOR
41e2			endif	 
41e2 3a 99 f9				ld a, (f_cursor_ptr) 
41e5 85					add a,l 
41e6					;call addatohl 
41e6					;ld a, l 
41e6 32 99 f9				ld (f_cursor_ptr), a   ; save new pos 
41e9			 
41e9			if DEBUG_FORTH_DOT 
41e9				DMARK "D->" 
41e9 f5				push af  
41ea 3a fe 41			ld a, (.dmark)  
41ed 32 a6 fd			ld (debug_mark),a  
41f0 3a ff 41			ld a, (.dmark+1)  
41f3 32 a7 fd			ld (debug_mark+1),a  
41f6 3a 00 42			ld a, (.dmark+2)  
41f9 32 a8 fd			ld (debug_mark+2),a  
41fc 18 03			jr .pastdmark  
41fe ..			.dmark: db "D->"  
4201 f1			.pastdmark: pop af  
4202			endm  
# End of macro DMARK
4202				CALLMONITOR 
4202 cd aa fd			call debug_vector  
4205				endm  
# End of macro CALLMONITOR
4205			endif	 
4205			 
4205			.noadv:	 
4205			 
4205					if DEBUG_FORTH_DOT_WAIT 
4205							call next_page_prompt 
4205					endif	 
4205			; TODO this pop off the stack causes a crash. i dont know why 
4205			 
4205			 
4205			if DEBUG_FORTH_DOT 
4205				DMARK "DTh" 
4205 f5				push af  
4206 3a 1a 42			ld a, (.dmark)  
4209 32 a6 fd			ld (debug_mark),a  
420c 3a 1b 42			ld a, (.dmark+1)  
420f 32 a7 fd			ld (debug_mark+1),a  
4212 3a 1c 42			ld a, (.dmark+2)  
4215 32 a8 fd			ld (debug_mark+2),a  
4218 18 03			jr .pastdmark  
421a ..			.dmark: db "DTh"  
421d f1			.pastdmark: pop af  
421e			endm  
# End of macro DMARK
421e				CALLMONITOR 
421e cd aa fd			call debug_vector  
4221				endm  
# End of macro CALLMONITOR
4221			endif	 
4221			 
4221					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4221 cd ec 22			call macro_forth_dsp_pop 
4224				endm 
# End of macro FORTH_DSP_POP
4224			 
4224			if DEBUG_FORTH_DOT 
4224				DMARK "DTi" 
4224 f5				push af  
4225 3a 39 42			ld a, (.dmark)  
4228 32 a6 fd			ld (debug_mark),a  
422b 3a 3a 42			ld a, (.dmark+1)  
422e 32 a7 fd			ld (debug_mark+1),a  
4231 3a 3b 42			ld a, (.dmark+2)  
4234 32 a8 fd			ld (debug_mark+2),a  
4237 18 03			jr .pastdmark  
4239 ..			.dmark: db "DTi"  
423c f1			.pastdmark: pop af  
423d			endm  
# End of macro DMARK
423d				CALLMONITOR 
423d cd aa fd			call debug_vector  
4240				endm  
# End of macro CALLMONITOR
4240			endif	 
4240			 
4240			 
4240					NEXTW 
4240 c3 ea 23			jp macro_next 
4243				endm 
# End of macro NEXTW
4243			 
4243			.CLS: 
4243				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
4243 35				db WORD_SYS_CORE+33             
4244 70 42			dw .DRAW            
4246 04				db 3 + 1 
4247 .. 00			db "CLS",0              
424b				endm 
# End of macro CWHEAD
424b			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
424b					if DEBUG_FORTH_WORDS_KEY 
424b						DMARK "CLS" 
424b f5				push af  
424c 3a 60 42			ld a, (.dmark)  
424f 32 a6 fd			ld (debug_mark),a  
4252 3a 61 42			ld a, (.dmark+1)  
4255 32 a7 fd			ld (debug_mark+1),a  
4258 3a 62 42			ld a, (.dmark+2)  
425b 32 a8 fd			ld (debug_mark+2),a  
425e 18 03			jr .pastdmark  
4260 ..			.dmark: db "CLS"  
4263 f1			.pastdmark: pop af  
4264			endm  
# End of macro DMARK
4264						CALLMONITOR 
4264 cd aa fd			call debug_vector  
4267				endm  
# End of macro CALLMONITOR
4267					endif 
4267 cd a7 0d				call clear_display 
426a c3 7e 43				jp .home		; and home cursor 
426d					NEXTW 
426d c3 ea 23			jp macro_next 
4270				endm 
# End of macro NEXTW
4270			 
4270			.DRAW: 
4270				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
4270 36				db WORD_SYS_CORE+34             
4271 9b 42			dw .DUMP            
4273 05				db 4 + 1 
4274 .. 00			db "DRAW",0              
4279				endm 
# End of macro CWHEAD
4279			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
4279					if DEBUG_FORTH_WORDS_KEY 
4279						DMARK "DRW" 
4279 f5				push af  
427a 3a 8e 42			ld a, (.dmark)  
427d 32 a6 fd			ld (debug_mark),a  
4280 3a 8f 42			ld a, (.dmark+1)  
4283 32 a7 fd			ld (debug_mark+1),a  
4286 3a 90 42			ld a, (.dmark+2)  
4289 32 a8 fd			ld (debug_mark+2),a  
428c 18 03			jr .pastdmark  
428e ..			.dmark: db "DRW"  
4291 f1			.pastdmark: pop af  
4292			endm  
# End of macro DMARK
4292						CALLMONITOR 
4292 cd aa fd			call debug_vector  
4295				endm  
# End of macro CALLMONITOR
4295					endif 
4295 cd ca 0d				call update_display 
4298					NEXTW 
4298 c3 ea 23			jp macro_next 
429b				endm 
# End of macro NEXTW
429b			 
429b			.DUMP: 
429b				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
429b 37				db WORD_SYS_CORE+35             
429c d3 42			dw .CDUMP            
429e 05				db 4 + 1 
429f .. 00			db "DUMP",0              
42a4				endm 
# End of macro CWHEAD
42a4			; | DUMP ( x -- ) With address x display dump   | DONE 
42a4			; TODO pop address to use off of the stack 
42a4					if DEBUG_FORTH_WORDS_KEY 
42a4						DMARK "DUM" 
42a4 f5				push af  
42a5 3a b9 42			ld a, (.dmark)  
42a8 32 a6 fd			ld (debug_mark),a  
42ab 3a ba 42			ld a, (.dmark+1)  
42ae 32 a7 fd			ld (debug_mark+1),a  
42b1 3a bb 42			ld a, (.dmark+2)  
42b4 32 a8 fd			ld (debug_mark+2),a  
42b7 18 03			jr .pastdmark  
42b9 ..			.dmark: db "DUM"  
42bc f1			.pastdmark: pop af  
42bd			endm  
# End of macro DMARK
42bd						CALLMONITOR 
42bd cd aa fd			call debug_vector  
42c0				endm  
# End of macro CALLMONITOR
42c0					endif 
42c0 cd a7 0d				call clear_display 
42c3			 
42c3					; get address 
42c3			 
42c3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
42c3 cd 34 22			call macro_dsp_valuehl 
42c6				endm 
# End of macro FORTH_DSP_VALUEHL
42c6				 
42c6					; save it for cdump 
42c6			 
42c6 22 1f f4				ld (os_cur_ptr),hl 
42c9			 
42c9					; destroy value TOS 
42c9			 
42c9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42c9 cd ec 22			call macro_forth_dsp_pop 
42cc				endm 
# End of macro FORTH_DSP_POP
42cc			 
42cc cd af 1e				call dumpcont	; skip old style of param parsing	 
42cf c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
42d0					NEXTW 
42d0 c3 ea 23			jp macro_next 
42d3				endm 
# End of macro NEXTW
42d3			.CDUMP: 
42d3				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
42d3 38				db WORD_SYS_CORE+36             
42d4 03 43			dw .DAT            
42d6 06				db 5 + 1 
42d7 .. 00			db "CDUMP",0              
42dd				endm 
# End of macro CWHEAD
42dd			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
42dd					if DEBUG_FORTH_WORDS_KEY 
42dd						DMARK "CDP" 
42dd f5				push af  
42de 3a f2 42			ld a, (.dmark)  
42e1 32 a6 fd			ld (debug_mark),a  
42e4 3a f3 42			ld a, (.dmark+1)  
42e7 32 a7 fd			ld (debug_mark+1),a  
42ea 3a f4 42			ld a, (.dmark+2)  
42ed 32 a8 fd			ld (debug_mark+2),a  
42f0 18 03			jr .pastdmark  
42f2 ..			.dmark: db "CDP"  
42f5 f1			.pastdmark: pop af  
42f6			endm  
# End of macro DMARK
42f6						CALLMONITOR 
42f6 cd aa fd			call debug_vector  
42f9				endm  
# End of macro CALLMONITOR
42f9					endif 
42f9 cd a7 0d				call clear_display 
42fc cd af 1e				call dumpcont	 
42ff c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
4300					NEXTW 
4300 c3 ea 23			jp macro_next 
4303				endm 
# End of macro NEXTW
4303			 
4303			 
4303			 
4303			 
4303			.DAT: 
4303				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
4303 3d				db WORD_SYS_CORE+41             
4304 59 43			dw .HOME            
4306 03				db 2 + 1 
4307 .. 00			db "AT",0              
430a				endm 
# End of macro CWHEAD
430a			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
430a					if DEBUG_FORTH_WORDS_KEY 
430a						DMARK "AT." 
430a f5				push af  
430b 3a 1f 43			ld a, (.dmark)  
430e 32 a6 fd			ld (debug_mark),a  
4311 3a 20 43			ld a, (.dmark+1)  
4314 32 a7 fd			ld (debug_mark+1),a  
4317 3a 21 43			ld a, (.dmark+2)  
431a 32 a8 fd			ld (debug_mark+2),a  
431d 18 03			jr .pastdmark  
431f ..			.dmark: db "AT."  
4322 f1			.pastdmark: pop af  
4323			endm  
# End of macro DMARK
4323						CALLMONITOR 
4323 cd aa fd			call debug_vector  
4326				endm  
# End of macro CALLMONITOR
4326					endif 
4326					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4326 cd 34 22			call macro_dsp_valuehl 
4329				endm 
# End of macro FORTH_DSP_VALUEHL
4329			 
4329			 
4329					; TODO save cursor row 
4329 7d					ld a,l 
432a fe 02				cp 2 
432c 20 04				jr nz, .crow3 
432e 3e 28				ld a, display_row_2 
4330 18 12				jr .ccol1 
4332 fe 03		.crow3:		cp 3 
4334 20 04				jr nz, .crow4 
4336 3e 50				ld a, display_row_3 
4338 18 0a				jr .ccol1 
433a fe 04		.crow4:		cp 4 
433c 20 04				jr nz, .crow1 
433e 3e 78				ld a, display_row_4 
4340 18 02				jr .ccol1 
4342 3e 00		.crow1:		ld a,display_row_1 
4344 f5			.ccol1:		push af			; got row offset 
4345 6f					ld l,a 
4346 26 00				ld h,0 
4348					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4348 cd ec 22			call macro_forth_dsp_pop 
434b				endm 
# End of macro FORTH_DSP_POP
434b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
434b cd 34 22			call macro_dsp_valuehl 
434e				endm 
# End of macro FORTH_DSP_VALUEHL
434e					; TODO save cursor col 
434e f1					pop af 
434f 85					add l		; add col offset 
4350 32 99 f9				ld (f_cursor_ptr), a 
4353					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4353 cd ec 22			call macro_forth_dsp_pop 
4356				endm 
# End of macro FORTH_DSP_POP
4356			 
4356					; calculate  
4356			 
4356					NEXTW 
4356 c3 ea 23			jp macro_next 
4359				endm 
# End of macro NEXTW
4359			 
4359			 
4359			.HOME: 
4359				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
4359 41				db WORD_SYS_CORE+45             
435a 86 43			dw .CR            
435c 05				db 4 + 1 
435d .. 00			db "HOME",0              
4362				endm 
# End of macro CWHEAD
4362			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
4362					if DEBUG_FORTH_WORDS_KEY 
4362						DMARK "HOM" 
4362 f5				push af  
4363 3a 77 43			ld a, (.dmark)  
4366 32 a6 fd			ld (debug_mark),a  
4369 3a 78 43			ld a, (.dmark+1)  
436c 32 a7 fd			ld (debug_mark+1),a  
436f 3a 79 43			ld a, (.dmark+2)  
4372 32 a8 fd			ld (debug_mark+2),a  
4375 18 03			jr .pastdmark  
4377 ..			.dmark: db "HOM"  
437a f1			.pastdmark: pop af  
437b			endm  
# End of macro DMARK
437b						CALLMONITOR 
437b cd aa fd			call debug_vector  
437e				endm  
# End of macro CALLMONITOR
437e					endif 
437e 3e 00		.home:		ld a, 0		; and home cursor 
4380 32 99 f9				ld (f_cursor_ptr), a 
4383					NEXTW 
4383 c3 ea 23			jp macro_next 
4386				endm 
# End of macro NEXTW
4386			 
4386			 
4386			.CR: 
4386				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
4386 46				db WORD_SYS_CORE+50             
4387 c1 43			dw .SPACE            
4389 03				db 2 + 1 
438a .. 00			db "CR",0              
438d				endm 
# End of macro CWHEAD
438d			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
438d					if DEBUG_FORTH_WORDS_KEY 
438d						DMARK "CR." 
438d f5				push af  
438e 3a a2 43			ld a, (.dmark)  
4391 32 a6 fd			ld (debug_mark),a  
4394 3a a3 43			ld a, (.dmark+1)  
4397 32 a7 fd			ld (debug_mark+1),a  
439a 3a a4 43			ld a, (.dmark+2)  
439d 32 a8 fd			ld (debug_mark+2),a  
43a0 18 03			jr .pastdmark  
43a2 ..			.dmark: db "CR."  
43a5 f1			.pastdmark: pop af  
43a6			endm  
# End of macro DMARK
43a6						CALLMONITOR 
43a6 cd aa fd			call debug_vector  
43a9				endm  
# End of macro CALLMONITOR
43a9					endif 
43a9 3e 0d				ld a, 13 
43ab 32 fc f0				ld (scratch),a 
43ae 3e 0a				ld a, 10 
43b0 32 fd f0				ld (scratch+1),a 
43b3 3e 00				ld a, 0 
43b5 32 fe f0				ld (scratch+2),a 
43b8 21 fc f0				ld hl, scratch 
43bb cd 9d 20				call forth_push_str 
43be					 
43be				       NEXTW 
43be c3 ea 23			jp macro_next 
43c1				endm 
# End of macro NEXTW
43c1			.SPACE: 
43c1				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
43c1 46				db WORD_SYS_CORE+50             
43c2 f7 43			dw .SPACES            
43c4 03				db 2 + 1 
43c5 .. 00			db "BL",0              
43c8				endm 
# End of macro CWHEAD
43c8			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
43c8					if DEBUG_FORTH_WORDS_KEY 
43c8						DMARK "BL." 
43c8 f5				push af  
43c9 3a dd 43			ld a, (.dmark)  
43cc 32 a6 fd			ld (debug_mark),a  
43cf 3a de 43			ld a, (.dmark+1)  
43d2 32 a7 fd			ld (debug_mark+1),a  
43d5 3a df 43			ld a, (.dmark+2)  
43d8 32 a8 fd			ld (debug_mark+2),a  
43db 18 03			jr .pastdmark  
43dd ..			.dmark: db "BL."  
43e0 f1			.pastdmark: pop af  
43e1			endm  
# End of macro DMARK
43e1						CALLMONITOR 
43e1 cd aa fd			call debug_vector  
43e4				endm  
# End of macro CALLMONITOR
43e4					endif 
43e4 3e 20				ld a, " " 
43e6 32 fc f0				ld (scratch),a 
43e9 3e 00				ld a, 0 
43eb 32 fd f0				ld (scratch+1),a 
43ee 21 fc f0				ld hl, scratch 
43f1 cd 9d 20				call forth_push_str 
43f4					 
43f4				       NEXTW 
43f4 c3 ea 23			jp macro_next 
43f7				endm 
# End of macro NEXTW
43f7			 
43f7			;.blstr: db " ", 0 
43f7			 
43f7			.SPACES: 
43f7				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
43f7 47				db WORD_SYS_CORE+51             
43f8 92 44			dw .SCROLL            
43fa 07				db 6 + 1 
43fb .. 00			db "SPACES",0              
4402				endm 
# End of macro CWHEAD
4402			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
4402					if DEBUG_FORTH_WORDS_KEY 
4402						DMARK "SPS" 
4402 f5				push af  
4403 3a 17 44			ld a, (.dmark)  
4406 32 a6 fd			ld (debug_mark),a  
4409 3a 18 44			ld a, (.dmark+1)  
440c 32 a7 fd			ld (debug_mark+1),a  
440f 3a 19 44			ld a, (.dmark+2)  
4412 32 a8 fd			ld (debug_mark+2),a  
4415 18 03			jr .pastdmark  
4417 ..			.dmark: db "SPS"  
441a f1			.pastdmark: pop af  
441b			endm  
# End of macro DMARK
441b						CALLMONITOR 
441b cd aa fd			call debug_vector  
441e				endm  
# End of macro CALLMONITOR
441e					endif 
441e			 
441e			 
441e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
441e cd 34 22			call macro_dsp_valuehl 
4421				endm 
# End of macro FORTH_DSP_VALUEHL
4421			 
4421 e5					push hl    ; u 
4422					if DEBUG_FORTH_WORDS 
4422						DMARK "SPA" 
4422 f5				push af  
4423 3a 37 44			ld a, (.dmark)  
4426 32 a6 fd			ld (debug_mark),a  
4429 3a 38 44			ld a, (.dmark+1)  
442c 32 a7 fd			ld (debug_mark+1),a  
442f 3a 39 44			ld a, (.dmark+2)  
4432 32 a8 fd			ld (debug_mark+2),a  
4435 18 03			jr .pastdmark  
4437 ..			.dmark: db "SPA"  
443a f1			.pastdmark: pop af  
443b			endm  
# End of macro DMARK
443b						CALLMONITOR 
443b cd aa fd			call debug_vector  
443e				endm  
# End of macro CALLMONITOR
443e					endif 
443e			 
443e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
443e cd ec 22			call macro_forth_dsp_pop 
4441				endm 
# End of macro FORTH_DSP_POP
4441 e1					pop hl 
4442 0e 00				ld c, 0 
4444 45					ld b, l 
4445 21 fc f0				ld hl, scratch  
4448			 
4448					if DEBUG_FORTH_WORDS 
4448						DMARK "SP2" 
4448 f5				push af  
4449 3a 5d 44			ld a, (.dmark)  
444c 32 a6 fd			ld (debug_mark),a  
444f 3a 5e 44			ld a, (.dmark+1)  
4452 32 a7 fd			ld (debug_mark+1),a  
4455 3a 5f 44			ld a, (.dmark+2)  
4458 32 a8 fd			ld (debug_mark+2),a  
445b 18 03			jr .pastdmark  
445d ..			.dmark: db "SP2"  
4460 f1			.pastdmark: pop af  
4461			endm  
# End of macro DMARK
4461						CALLMONITOR 
4461 cd aa fd			call debug_vector  
4464				endm  
# End of macro CALLMONITOR
4464					endif 
4464 3e 20				ld a, ' ' 
4466			.spaces1:	 
4466 77					ld (hl),a 
4467 23					inc hl 
4468					 
4468 10 fc				djnz .spaces1 
446a 3e 00				ld a,0 
446c 77					ld (hl),a 
446d 21 fc f0				ld hl, scratch 
4470					if DEBUG_FORTH_WORDS 
4470						DMARK "SP3" 
4470 f5				push af  
4471 3a 85 44			ld a, (.dmark)  
4474 32 a6 fd			ld (debug_mark),a  
4477 3a 86 44			ld a, (.dmark+1)  
447a 32 a7 fd			ld (debug_mark+1),a  
447d 3a 87 44			ld a, (.dmark+2)  
4480 32 a8 fd			ld (debug_mark+2),a  
4483 18 03			jr .pastdmark  
4485 ..			.dmark: db "SP3"  
4488 f1			.pastdmark: pop af  
4489			endm  
# End of macro DMARK
4489						CALLMONITOR 
4489 cd aa fd			call debug_vector  
448c				endm  
# End of macro CALLMONITOR
448c					endif 
448c cd 9d 20				call forth_push_str 
448f			 
448f				       NEXTW 
448f c3 ea 23			jp macro_next 
4492				endm 
# End of macro NEXTW
4492			 
4492			 
4492			 
4492			.SCROLL: 
4492				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4492 53				db WORD_SYS_CORE+63             
4493 bf 44			dw .SCROLLD            
4495 07				db 6 + 1 
4496 .. 00			db "SCROLL",0              
449d				endm 
# End of macro CWHEAD
449d			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
449d					if DEBUG_FORTH_WORDS_KEY 
449d						DMARK "SCR" 
449d f5				push af  
449e 3a b2 44			ld a, (.dmark)  
44a1 32 a6 fd			ld (debug_mark),a  
44a4 3a b3 44			ld a, (.dmark+1)  
44a7 32 a7 fd			ld (debug_mark+1),a  
44aa 3a b4 44			ld a, (.dmark+2)  
44ad 32 a8 fd			ld (debug_mark+2),a  
44b0 18 03			jr .pastdmark  
44b2 ..			.dmark: db "SCR"  
44b5 f1			.pastdmark: pop af  
44b6			endm  
# End of macro DMARK
44b6						CALLMONITOR 
44b6 cd aa fd			call debug_vector  
44b9				endm  
# End of macro CALLMONITOR
44b9					endif 
44b9			 
44b9 cd 69 0d			call scroll_up 
44bc			;	call update_display 
44bc			 
44bc					NEXTW 
44bc c3 ea 23			jp macro_next 
44bf				endm 
# End of macro NEXTW
44bf			 
44bf			 
44bf			 
44bf			;		; get dir 
44bf			; 
44bf			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
44bf			; 
44bf			;		push hl 
44bf			; 
44bf			;		; destroy value TOS 
44bf			; 
44bf			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44bf			; 
44bf			;		; get count 
44bf			; 
44bf			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
44bf			; 
44bf			;		push hl 
44bf			; 
44bf			;		; destroy value TOS 
44bf			; 
44bf			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44bf			; 
44bf			;		; one value on hl get other one back 
44bf			; 
44bf			;		pop bc    ; count 
44bf			; 
44bf			;		pop de   ; dir 
44bf			; 
44bf			; 
44bf			;		ld b, c 
44bf			; 
44bf			;.scrolldir:     push bc 
44bf			;		push de 
44bf			; 
44bf			;		ld a, 0 
44bf			;		cp e 
44bf			;		jr z, .scrollup  
44bf			;		call scroll_down 
44bf			;		jr .scrollnext 
44bf			;.scrollup:	call scroll_up 
44bf			; 
44bf			;		 
44bf			;.scrollnext: 
44bf			;		pop de 
44bf			;		pop bc 
44bf			;		djnz .scrolldir 
44bf			; 
44bf			; 
44bf			; 
44bf			; 
44bf			; 
44bf			;		NEXTW 
44bf			 
44bf			.SCROLLD: 
44bf				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
44bf 53				db WORD_SYS_CORE+63             
44c0 ed 44			dw .ATQ            
44c2 08				db 7 + 1 
44c3 .. 00			db "SCROLLD",0              
44cb				endm 
# End of macro CWHEAD
44cb			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
44cb					if DEBUG_FORTH_WORDS_KEY 
44cb						DMARK "SCD" 
44cb f5				push af  
44cc 3a e0 44			ld a, (.dmark)  
44cf 32 a6 fd			ld (debug_mark),a  
44d2 3a e1 44			ld a, (.dmark+1)  
44d5 32 a7 fd			ld (debug_mark+1),a  
44d8 3a e2 44			ld a, (.dmark+2)  
44db 32 a8 fd			ld (debug_mark+2),a  
44de 18 03			jr .pastdmark  
44e0 ..			.dmark: db "SCD"  
44e3 f1			.pastdmark: pop af  
44e4			endm  
# End of macro DMARK
44e4						CALLMONITOR 
44e4 cd aa fd			call debug_vector  
44e7				endm  
# End of macro CALLMONITOR
44e7					endif 
44e7			 
44e7 cd 8d 0d			call scroll_down 
44ea			;	call update_display 
44ea			 
44ea					NEXTW 
44ea c3 ea 23			jp macro_next 
44ed				endm 
# End of macro NEXTW
44ed			 
44ed			 
44ed			.ATQ: 
44ed				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
44ed 62				db WORD_SYS_CORE+78             
44ee 4b 45			dw .AUTODSP            
44f0 04				db 3 + 1 
44f1 .. 00			db "AT@",0              
44f5				endm 
# End of macro CWHEAD
44f5			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
44f5					if DEBUG_FORTH_WORDS_KEY 
44f5						DMARK "ATA" 
44f5 f5				push af  
44f6 3a 0a 45			ld a, (.dmark)  
44f9 32 a6 fd			ld (debug_mark),a  
44fc 3a 0b 45			ld a, (.dmark+1)  
44ff 32 a7 fd			ld (debug_mark+1),a  
4502 3a 0c 45			ld a, (.dmark+2)  
4505 32 a8 fd			ld (debug_mark+2),a  
4508 18 03			jr .pastdmark  
450a ..			.dmark: db "ATA"  
450d f1			.pastdmark: pop af  
450e			endm  
# End of macro DMARK
450e						CALLMONITOR 
450e cd aa fd			call debug_vector  
4511				endm  
# End of macro CALLMONITOR
4511					endif 
4511			 
4511			 
4511					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4511 cd 34 22			call macro_dsp_valuehl 
4514				endm 
# End of macro FORTH_DSP_VALUEHL
4514			 
4514					; TODO save cursor row 
4514 7d					ld a,l 
4515 fe 02				cp 2 
4517 20 04				jr nz, .crow3aq 
4519 3e 28				ld a, display_row_2 
451b 18 12				jr .ccol1aq 
451d fe 03		.crow3aq:		cp 3 
451f 20 04				jr nz, .crow4aq 
4521 3e 50				ld a, display_row_3 
4523 18 0a				jr .ccol1aq 
4525 fe 04		.crow4aq:		cp 4 
4527 20 04				jr nz, .crow1aq 
4529 3e 78				ld a, display_row_4 
452b 18 02				jr .ccol1aq 
452d 3e 00		.crow1aq:		ld a,display_row_1 
452f f5			.ccol1aq:		push af			; got row offset 
4530 6f					ld l,a 
4531 26 00				ld h,0 
4533					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4533 cd ec 22			call macro_forth_dsp_pop 
4536				endm 
# End of macro FORTH_DSP_POP
4536					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4536 cd 34 22			call macro_dsp_valuehl 
4539				endm 
# End of macro FORTH_DSP_VALUEHL
4539					; TODO save cursor col 
4539 f1					pop af 
453a 85					add l		; add col offset 
453b			 
453b					; add current frame buffer address 
453b 2a 07 fb				ld hl, (display_fb_active) 
453e cd db 0f				call addatohl 
4541			 
4541			 
4541			 
4541			 
4541					; get char frame buffer location offset in hl 
4541			 
4541 7e					ld a,(hl) 
4542 26 00				ld h, 0 
4544 6f					ld l, a 
4545			 
4545 cd 2f 20				call forth_push_numhl 
4548			 
4548			 
4548					NEXTW 
4548 c3 ea 23			jp macro_next 
454b				endm 
# End of macro NEXTW
454b			 
454b			.AUTODSP: 
454b				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
454b 63				db WORD_SYS_CORE+79             
454c 61 45			dw .MENU            
454e 05				db 4 + 1 
454f .. 00			db "ADSP",0              
4554				endm 
# End of macro CWHEAD
4554			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
4554			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
4554			 
4554					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4554 cd 34 22			call macro_dsp_valuehl 
4557				endm 
# End of macro FORTH_DSP_VALUEHL
4557			 
4557			;		push hl 
4557			 
4557					; destroy value TOS 
4557			 
4557					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4557 cd ec 22			call macro_forth_dsp_pop 
455a				endm 
# End of macro FORTH_DSP_POP
455a			 
455a			;		pop hl 
455a			 
455a 7d					ld a,l 
455b 32 77 f9				ld (cli_autodisplay), a 
455e				       NEXTW 
455e c3 ea 23			jp macro_next 
4561				endm 
# End of macro NEXTW
4561			 
4561			.MENU: 
4561				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
4561 70				db WORD_SYS_CORE+92             
4562 0a 46			dw .ENDDISPLAY            
4564 05				db 4 + 1 
4565 .. 00			db "MENU",0              
456a				endm 
# End of macro CWHEAD
456a			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
456a			 
456a			;		; get number of items on the stack 
456a			; 
456a				 
456a					FORTH_DSP_VALUEHL 
456a cd 34 22			call macro_dsp_valuehl 
456d				endm 
# End of macro FORTH_DSP_VALUEHL
456d				 
456d					if DEBUG_FORTH_WORDS_KEY 
456d						DMARK "MNU" 
456d f5				push af  
456e 3a 82 45			ld a, (.dmark)  
4571 32 a6 fd			ld (debug_mark),a  
4574 3a 83 45			ld a, (.dmark+1)  
4577 32 a7 fd			ld (debug_mark+1),a  
457a 3a 84 45			ld a, (.dmark+2)  
457d 32 a8 fd			ld (debug_mark+2),a  
4580 18 03			jr .pastdmark  
4582 ..			.dmark: db "MNU"  
4585 f1			.pastdmark: pop af  
4586			endm  
# End of macro DMARK
4586						CALLMONITOR 
4586 cd aa fd			call debug_vector  
4589				endm  
# End of macro CALLMONITOR
4589					endif 
4589			 
4589 45					ld b, l	 
458a 05					dec b 
458b			 
458b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
458b cd ec 22			call macro_forth_dsp_pop 
458e				endm 
# End of macro FORTH_DSP_POP
458e			 
458e			 
458e					; go directly through the stack to pluck out the string pointers and build an array 
458e			 
458e			;		FORTH_DSP 
458e			 
458e					; hl contains top most stack item 
458e				 
458e 11 fc f0				ld de, scratch 
4591			 
4591			.mbuild: 
4591			 
4591					FORTH_DSP_VALUEHL 
4591 cd 34 22			call macro_dsp_valuehl 
4594				endm 
# End of macro FORTH_DSP_VALUEHL
4594			 
4594					if DEBUG_FORTH_WORDS 
4594						DMARK "MN3" 
4594 f5				push af  
4595 3a a9 45			ld a, (.dmark)  
4598 32 a6 fd			ld (debug_mark),a  
459b 3a aa 45			ld a, (.dmark+1)  
459e 32 a7 fd			ld (debug_mark+1),a  
45a1 3a ab 45			ld a, (.dmark+2)  
45a4 32 a8 fd			ld (debug_mark+2),a  
45a7 18 03			jr .pastdmark  
45a9 ..			.dmark: db "MN3"  
45ac f1			.pastdmark: pop af  
45ad			endm  
# End of macro DMARK
45ad						CALLMONITOR 
45ad cd aa fd			call debug_vector  
45b0				endm  
# End of macro CALLMONITOR
45b0					endif 
45b0 eb					ex de, hl 
45b1 73					ld (hl), e 
45b2 23					inc hl 
45b3 72					ld (hl), d 
45b4 23					inc hl 
45b5 eb					ex de, hl 
45b6			 
45b6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45b6 cd ec 22			call macro_forth_dsp_pop 
45b9				endm 
# End of macro FORTH_DSP_POP
45b9			 
45b9 10 d6				djnz .mbuild 
45bb			 
45bb					; done add term 
45bb			 
45bb eb					ex de, hl 
45bc 36 00				ld (hl), 0 
45be 23					inc hl 
45bf 36 00				ld (hl), 0 
45c1			 
45c1				 
45c1					 
45c1 21 fc f0				ld hl, scratch 
45c4			 
45c4					if DEBUG_FORTH_WORDS 
45c4						DMARK "MNx" 
45c4 f5				push af  
45c5 3a d9 45			ld a, (.dmark)  
45c8 32 a6 fd			ld (debug_mark),a  
45cb 3a da 45			ld a, (.dmark+1)  
45ce 32 a7 fd			ld (debug_mark+1),a  
45d1 3a db 45			ld a, (.dmark+2)  
45d4 32 a8 fd			ld (debug_mark+2),a  
45d7 18 03			jr .pastdmark  
45d9 ..			.dmark: db "MNx"  
45dc f1			.pastdmark: pop af  
45dd			endm  
# End of macro DMARK
45dd						CALLMONITOR 
45dd cd aa fd			call debug_vector  
45e0				endm  
# End of macro CALLMONITOR
45e0					endif 
45e0			 
45e0			 
45e0			 
45e0 3e 00				ld a, 0 
45e2 cd d8 0d				call menu 
45e5			 
45e5			 
45e5 6f					ld l, a 
45e6 26 00				ld h, 0 
45e8			 
45e8					if DEBUG_FORTH_WORDS 
45e8						DMARK "MNr" 
45e8 f5				push af  
45e9 3a fd 45			ld a, (.dmark)  
45ec 32 a6 fd			ld (debug_mark),a  
45ef 3a fe 45			ld a, (.dmark+1)  
45f2 32 a7 fd			ld (debug_mark+1),a  
45f5 3a ff 45			ld a, (.dmark+2)  
45f8 32 a8 fd			ld (debug_mark+2),a  
45fb 18 03			jr .pastdmark  
45fd ..			.dmark: db "MNr"  
4600 f1			.pastdmark: pop af  
4601			endm  
# End of macro DMARK
4601						CALLMONITOR 
4601 cd aa fd			call debug_vector  
4604				endm  
# End of macro CALLMONITOR
4604					endif 
4604			 
4604 cd 2f 20				call forth_push_numhl 
4607			 
4607			 
4607			 
4607			 
4607				       NEXTW 
4607 c3 ea 23			jp macro_next 
460a				endm 
# End of macro NEXTW
460a			 
460a			 
460a			.ENDDISPLAY: 
460a			 
460a			; eof 
# End of file forth_words_display.asm
460a			include "forth_words_str.asm" 
460a			 
460a			; | ## String Words 
460a			 
460a			.PTR:   
460a			 
460a				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
460a 48				db WORD_SYS_CORE+52             
460b 37 46			dw .STYPE            
460d 04				db 3 + 1 
460e .. 00			db "PTR",0              
4612				endm 
# End of macro CWHEAD
4612			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4612			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4612			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4612			 
4612					if DEBUG_FORTH_WORDS_KEY 
4612						DMARK "PTR" 
4612 f5				push af  
4613 3a 27 46			ld a, (.dmark)  
4616 32 a6 fd			ld (debug_mark),a  
4619 3a 28 46			ld a, (.dmark+1)  
461c 32 a7 fd			ld (debug_mark+1),a  
461f 3a 29 46			ld a, (.dmark+2)  
4622 32 a8 fd			ld (debug_mark+2),a  
4625 18 03			jr .pastdmark  
4627 ..			.dmark: db "PTR"  
462a f1			.pastdmark: pop af  
462b			endm  
# End of macro DMARK
462b						CALLMONITOR 
462b cd aa fd			call debug_vector  
462e				endm  
# End of macro CALLMONITOR
462e					endif 
462e					FORTH_DSP_VALUEHL 
462e cd 34 22			call macro_dsp_valuehl 
4631				endm 
# End of macro FORTH_DSP_VALUEHL
4631 cd 2f 20				call forth_push_numhl 
4634			 
4634			 
4634					NEXTW 
4634 c3 ea 23			jp macro_next 
4637				endm 
# End of macro NEXTW
4637			.STYPE: 
4637				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
4637 48				db WORD_SYS_CORE+52             
4638 86 46			dw .UPPER            
463a 06				db 5 + 1 
463b .. 00			db "STYPE",0              
4641				endm 
# End of macro CWHEAD
4641			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
4641					if DEBUG_FORTH_WORDS_KEY 
4641						DMARK "STY" 
4641 f5				push af  
4642 3a 56 46			ld a, (.dmark)  
4645 32 a6 fd			ld (debug_mark),a  
4648 3a 57 46			ld a, (.dmark+1)  
464b 32 a7 fd			ld (debug_mark+1),a  
464e 3a 58 46			ld a, (.dmark+2)  
4651 32 a8 fd			ld (debug_mark+2),a  
4654 18 03			jr .pastdmark  
4656 ..			.dmark: db "STY"  
4659 f1			.pastdmark: pop af  
465a			endm  
# End of macro DMARK
465a						CALLMONITOR 
465a cd aa fd			call debug_vector  
465d				endm  
# End of macro CALLMONITOR
465d					endif 
465d					FORTH_DSP 
465d cd fa 21			call macro_forth_dsp 
4660				endm 
# End of macro FORTH_DSP
4660					;v5 FORTH_DSP_VALUE 
4660			 
4660 7e					ld a, (hl) 
4661			 
4661 f5					push af 
4662			 
4662			; Dont destroy TOS		FORTH_DSP_POP 
4662			 
4662 f1					pop af 
4663			 
4663 fe 01				cp DS_TYPE_STR 
4665 28 09				jr z, .typestr 
4667			 
4667 fe 02				cp DS_TYPE_INUM 
4669 28 0a				jr z, .typeinum 
466b			 
466b 21 84 46				ld hl, .tna 
466e 18 0a				jr .tpush 
4670			 
4670 21 80 46		.typestr:	ld hl, .tstr 
4673 18 05				jr .tpush 
4675 21 82 46		.typeinum:	ld hl, .tinum 
4678 18 00				jr .tpush 
467a			 
467a			.tpush: 
467a			 
467a cd 9d 20				call forth_push_str 
467d			 
467d					NEXTW 
467d c3 ea 23			jp macro_next 
4680				endm 
# End of macro NEXTW
4680 .. 00		.tstr:	db "s",0 
4682 .. 00		.tinum:  db "i",0 
4684 .. 00		.tna:   db "?", 0 
4686			 
4686			 
4686			.UPPER: 
4686				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4686 48				db WORD_SYS_CORE+52             
4687 c1 46			dw .LOWER            
4689 06				db 5 + 1 
468a .. 00			db "UPPER",0              
4690				endm 
# End of macro CWHEAD
4690			; | UPPER ( s -- s ) Upper case string s  | DONE 
4690					if DEBUG_FORTH_WORDS_KEY 
4690						DMARK "UPR" 
4690 f5				push af  
4691 3a a5 46			ld a, (.dmark)  
4694 32 a6 fd			ld (debug_mark),a  
4697 3a a6 46			ld a, (.dmark+1)  
469a 32 a7 fd			ld (debug_mark+1),a  
469d 3a a7 46			ld a, (.dmark+2)  
46a0 32 a8 fd			ld (debug_mark+2),a  
46a3 18 03			jr .pastdmark  
46a5 ..			.dmark: db "UPR"  
46a8 f1			.pastdmark: pop af  
46a9			endm  
# End of macro DMARK
46a9						CALLMONITOR 
46a9 cd aa fd			call debug_vector  
46ac				endm  
# End of macro CALLMONITOR
46ac					endif 
46ac			 
46ac					FORTH_DSP 
46ac cd fa 21			call macro_forth_dsp 
46af				endm 
# End of macro FORTH_DSP
46af					 
46af			; TODO check is string type 
46af			 
46af					FORTH_DSP_VALUEHL 
46af cd 34 22			call macro_dsp_valuehl 
46b2				endm 
# End of macro FORTH_DSP_VALUEHL
46b2			; get pointer to string in hl 
46b2			 
46b2 7e			.toup:		ld a, (hl) 
46b3 fe 00				cp 0 
46b5 28 07				jr z, .toupdone 
46b7			 
46b7 cd 50 12				call to_upper 
46ba			 
46ba 77					ld (hl), a 
46bb 23					inc hl 
46bc 18 f4				jr .toup 
46be			 
46be					 
46be			 
46be			 
46be			; for each char convert to upper 
46be					 
46be			.toupdone: 
46be			 
46be			 
46be					NEXTW 
46be c3 ea 23			jp macro_next 
46c1				endm 
# End of macro NEXTW
46c1			.LOWER: 
46c1				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
46c1 48				db WORD_SYS_CORE+52             
46c2 fc 46			dw .TCASE            
46c4 06				db 5 + 1 
46c5 .. 00			db "LOWER",0              
46cb				endm 
# End of macro CWHEAD
46cb			; | LOWER ( s -- s ) Lower case string s  | DONE 
46cb					if DEBUG_FORTH_WORDS_KEY 
46cb						DMARK "LWR" 
46cb f5				push af  
46cc 3a e0 46			ld a, (.dmark)  
46cf 32 a6 fd			ld (debug_mark),a  
46d2 3a e1 46			ld a, (.dmark+1)  
46d5 32 a7 fd			ld (debug_mark+1),a  
46d8 3a e2 46			ld a, (.dmark+2)  
46db 32 a8 fd			ld (debug_mark+2),a  
46de 18 03			jr .pastdmark  
46e0 ..			.dmark: db "LWR"  
46e3 f1			.pastdmark: pop af  
46e4			endm  
# End of macro DMARK
46e4						CALLMONITOR 
46e4 cd aa fd			call debug_vector  
46e7				endm  
# End of macro CALLMONITOR
46e7					endif 
46e7			 
46e7					FORTH_DSP 
46e7 cd fa 21			call macro_forth_dsp 
46ea				endm 
# End of macro FORTH_DSP
46ea					 
46ea			; TODO check is string type 
46ea			 
46ea					FORTH_DSP_VALUEHL 
46ea cd 34 22			call macro_dsp_valuehl 
46ed				endm 
# End of macro FORTH_DSP_VALUEHL
46ed			; get pointer to string in hl 
46ed			 
46ed 7e			.tolow:		ld a, (hl) 
46ee fe 00				cp 0 
46f0 28 07				jr z, .tolowdone 
46f2			 
46f2 cd 59 12				call to_lower 
46f5			 
46f5 77					ld (hl), a 
46f6 23					inc hl 
46f7 18 f4				jr .tolow 
46f9			 
46f9					 
46f9			 
46f9			 
46f9			; for each char convert to low 
46f9					 
46f9			.tolowdone: 
46f9					NEXTW 
46f9 c3 ea 23			jp macro_next 
46fc				endm 
# End of macro NEXTW
46fc			.TCASE: 
46fc				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
46fc 48				db WORD_SYS_CORE+52             
46fd 32 48			dw .SUBSTR            
46ff 06				db 5 + 1 
4700 .. 00			db "TCASE",0              
4706				endm 
# End of macro CWHEAD
4706			; | TCASE ( s -- s ) Title case string s  | DONE 
4706					if DEBUG_FORTH_WORDS_KEY 
4706						DMARK "TCS" 
4706 f5				push af  
4707 3a 1b 47			ld a, (.dmark)  
470a 32 a6 fd			ld (debug_mark),a  
470d 3a 1c 47			ld a, (.dmark+1)  
4710 32 a7 fd			ld (debug_mark+1),a  
4713 3a 1d 47			ld a, (.dmark+2)  
4716 32 a8 fd			ld (debug_mark+2),a  
4719 18 03			jr .pastdmark  
471b ..			.dmark: db "TCS"  
471e f1			.pastdmark: pop af  
471f			endm  
# End of macro DMARK
471f						CALLMONITOR 
471f cd aa fd			call debug_vector  
4722				endm  
# End of macro CALLMONITOR
4722					endif 
4722			 
4722					FORTH_DSP 
4722 cd fa 21			call macro_forth_dsp 
4725				endm 
# End of macro FORTH_DSP
4725					 
4725			; TODO check is string type 
4725			 
4725					FORTH_DSP_VALUEHL 
4725 cd 34 22			call macro_dsp_valuehl 
4728				endm 
# End of macro FORTH_DSP_VALUEHL
4728			; get pointer to string in hl 
4728			 
4728					if DEBUG_FORTH_WORDS 
4728						DMARK "TC1" 
4728 f5				push af  
4729 3a 3d 47			ld a, (.dmark)  
472c 32 a6 fd			ld (debug_mark),a  
472f 3a 3e 47			ld a, (.dmark+1)  
4732 32 a7 fd			ld (debug_mark+1),a  
4735 3a 3f 47			ld a, (.dmark+2)  
4738 32 a8 fd			ld (debug_mark+2),a  
473b 18 03			jr .pastdmark  
473d ..			.dmark: db "TC1"  
4740 f1			.pastdmark: pop af  
4741			endm  
# End of macro DMARK
4741						CALLMONITOR 
4741 cd aa fd			call debug_vector  
4744				endm  
# End of macro CALLMONITOR
4744					endif 
4744			 
4744					; first time in turn to upper case first char 
4744			 
4744 7e					ld a, (hl) 
4745 c3 cf 47				jp .totsiptou 
4748			 
4748			 
4748 7e			.tot:		ld a, (hl) 
4749 fe 00				cp 0 
474b ca 13 48				jp z, .totdone 
474e			 
474e					if DEBUG_FORTH_WORDS 
474e						DMARK "TC2" 
474e f5				push af  
474f 3a 63 47			ld a, (.dmark)  
4752 32 a6 fd			ld (debug_mark),a  
4755 3a 64 47			ld a, (.dmark+1)  
4758 32 a7 fd			ld (debug_mark+1),a  
475b 3a 65 47			ld a, (.dmark+2)  
475e 32 a8 fd			ld (debug_mark+2),a  
4761 18 03			jr .pastdmark  
4763 ..			.dmark: db "TC2"  
4766 f1			.pastdmark: pop af  
4767			endm  
# End of macro DMARK
4767						CALLMONITOR 
4767 cd aa fd			call debug_vector  
476a				endm  
# End of macro CALLMONITOR
476a					endif 
476a					; check to see if current char is a space 
476a			 
476a fe 20				cp ' ' 
476c 28 21				jr z, .totsp 
476e cd 59 12				call to_lower 
4771					if DEBUG_FORTH_WORDS 
4771						DMARK "TC3" 
4771 f5				push af  
4772 3a 86 47			ld a, (.dmark)  
4775 32 a6 fd			ld (debug_mark),a  
4778 3a 87 47			ld a, (.dmark+1)  
477b 32 a7 fd			ld (debug_mark+1),a  
477e 3a 88 47			ld a, (.dmark+2)  
4781 32 a8 fd			ld (debug_mark+2),a  
4784 18 03			jr .pastdmark  
4786 ..			.dmark: db "TC3"  
4789 f1			.pastdmark: pop af  
478a			endm  
# End of macro DMARK
478a						CALLMONITOR 
478a cd aa fd			call debug_vector  
478d				endm  
# End of macro CALLMONITOR
478d					endif 
478d 18 63				jr .totnxt 
478f			 
478f			.totsp:         ; on a space, find next char which should be upper 
478f			 
478f					if DEBUG_FORTH_WORDS 
478f						DMARK "TC4" 
478f f5				push af  
4790 3a a4 47			ld a, (.dmark)  
4793 32 a6 fd			ld (debug_mark),a  
4796 3a a5 47			ld a, (.dmark+1)  
4799 32 a7 fd			ld (debug_mark+1),a  
479c 3a a6 47			ld a, (.dmark+2)  
479f 32 a8 fd			ld (debug_mark+2),a  
47a2 18 03			jr .pastdmark  
47a4 ..			.dmark: db "TC4"  
47a7 f1			.pastdmark: pop af  
47a8			endm  
# End of macro DMARK
47a8						CALLMONITOR 
47a8 cd aa fd			call debug_vector  
47ab				endm  
# End of macro CALLMONITOR
47ab					endif 
47ab					;; 
47ab			 
47ab fe 20				cp ' ' 
47ad 20 20				jr nz, .totsiptou 
47af 23					inc hl 
47b0 7e					ld a, (hl) 
47b1					if DEBUG_FORTH_WORDS 
47b1						DMARK "TC5" 
47b1 f5				push af  
47b2 3a c6 47			ld a, (.dmark)  
47b5 32 a6 fd			ld (debug_mark),a  
47b8 3a c7 47			ld a, (.dmark+1)  
47bb 32 a7 fd			ld (debug_mark+1),a  
47be 3a c8 47			ld a, (.dmark+2)  
47c1 32 a8 fd			ld (debug_mark+2),a  
47c4 18 03			jr .pastdmark  
47c6 ..			.dmark: db "TC5"  
47c9 f1			.pastdmark: pop af  
47ca			endm  
# End of macro DMARK
47ca						CALLMONITOR 
47ca cd aa fd			call debug_vector  
47cd				endm  
# End of macro CALLMONITOR
47cd					endif 
47cd 18 c0				jr .totsp 
47cf fe 00		.totsiptou:    cp 0 
47d1 28 40				jr z, .totdone 
47d3					; not space and not zero term so upper case it 
47d3 cd 50 12				call to_upper 
47d6			 
47d6					if DEBUG_FORTH_WORDS 
47d6						DMARK "TC6" 
47d6 f5				push af  
47d7 3a eb 47			ld a, (.dmark)  
47da 32 a6 fd			ld (debug_mark),a  
47dd 3a ec 47			ld a, (.dmark+1)  
47e0 32 a7 fd			ld (debug_mark+1),a  
47e3 3a ed 47			ld a, (.dmark+2)  
47e6 32 a8 fd			ld (debug_mark+2),a  
47e9 18 03			jr .pastdmark  
47eb ..			.dmark: db "TC6"  
47ee f1			.pastdmark: pop af  
47ef			endm  
# End of macro DMARK
47ef						CALLMONITOR 
47ef cd aa fd			call debug_vector  
47f2				endm  
# End of macro CALLMONITOR
47f2					endif 
47f2			 
47f2			 
47f2			.totnxt: 
47f2			 
47f2 77					ld (hl), a 
47f3 23					inc hl 
47f4					if DEBUG_FORTH_WORDS 
47f4						DMARK "TC7" 
47f4 f5				push af  
47f5 3a 09 48			ld a, (.dmark)  
47f8 32 a6 fd			ld (debug_mark),a  
47fb 3a 0a 48			ld a, (.dmark+1)  
47fe 32 a7 fd			ld (debug_mark+1),a  
4801 3a 0b 48			ld a, (.dmark+2)  
4804 32 a8 fd			ld (debug_mark+2),a  
4807 18 03			jr .pastdmark  
4809 ..			.dmark: db "TC7"  
480c f1			.pastdmark: pop af  
480d			endm  
# End of macro DMARK
480d						CALLMONITOR 
480d cd aa fd			call debug_vector  
4810				endm  
# End of macro CALLMONITOR
4810					endif 
4810 c3 48 47				jp .tot 
4813			 
4813					 
4813			 
4813			 
4813			; for each char convert to low 
4813					 
4813			.totdone: 
4813					if DEBUG_FORTH_WORDS 
4813						DMARK "TCd" 
4813 f5				push af  
4814 3a 28 48			ld a, (.dmark)  
4817 32 a6 fd			ld (debug_mark),a  
481a 3a 29 48			ld a, (.dmark+1)  
481d 32 a7 fd			ld (debug_mark+1),a  
4820 3a 2a 48			ld a, (.dmark+2)  
4823 32 a8 fd			ld (debug_mark+2),a  
4826 18 03			jr .pastdmark  
4828 ..			.dmark: db "TCd"  
482b f1			.pastdmark: pop af  
482c			endm  
# End of macro DMARK
482c						CALLMONITOR 
482c cd aa fd			call debug_vector  
482f				endm  
# End of macro CALLMONITOR
482f					endif 
482f					NEXTW 
482f c3 ea 23			jp macro_next 
4832				endm 
# End of macro NEXTW
4832			 
4832			.SUBSTR: 
4832				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4832 48				db WORD_SYS_CORE+52             
4833 90 48			dw .LEFT            
4835 07				db 6 + 1 
4836 .. 00			db "SUBSTR",0              
483d				endm 
# End of macro CWHEAD
483d			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
483d			 
483d					if DEBUG_FORTH_WORDS_KEY 
483d						DMARK "SST" 
483d f5				push af  
483e 3a 52 48			ld a, (.dmark)  
4841 32 a6 fd			ld (debug_mark),a  
4844 3a 53 48			ld a, (.dmark+1)  
4847 32 a7 fd			ld (debug_mark+1),a  
484a 3a 54 48			ld a, (.dmark+2)  
484d 32 a8 fd			ld (debug_mark+2),a  
4850 18 03			jr .pastdmark  
4852 ..			.dmark: db "SST"  
4855 f1			.pastdmark: pop af  
4856			endm  
# End of macro DMARK
4856						CALLMONITOR 
4856 cd aa fd			call debug_vector  
4859				endm  
# End of macro CALLMONITOR
4859					endif 
4859			; TODO check string type 
4859					FORTH_DSP_VALUEHL 
4859 cd 34 22			call macro_dsp_valuehl 
485c				endm 
# End of macro FORTH_DSP_VALUEHL
485c			 
485c e5					push hl      ; string length 
485d			 
485d					FORTH_DSP_POP 
485d cd ec 22			call macro_forth_dsp_pop 
4860				endm 
# End of macro FORTH_DSP_POP
4860			 
4860					FORTH_DSP_VALUEHL 
4860 cd 34 22			call macro_dsp_valuehl 
4863				endm 
# End of macro FORTH_DSP_VALUEHL
4863			 
4863 e5					push hl     ; start char 
4864			 
4864					FORTH_DSP_POP 
4864 cd ec 22			call macro_forth_dsp_pop 
4867				endm 
# End of macro FORTH_DSP_POP
4867			 
4867			 
4867					FORTH_DSP_VALUE 
4867 cd 1d 22			call macro_forth_dsp_value 
486a				endm 
# End of macro FORTH_DSP_VALUE
486a			 
486a d1					pop de    ; get start post offset 
486b			 
486b 19					add hl, de    ; starting offset 
486c			 
486c c1					pop bc 
486d c5					push bc      ; grab size of string 
486e			 
486e e5					push hl    ; save string start  
486f			 
486f 26 00				ld h, 0 
4871 69					ld l, c 
4872 23					inc hl 
4873 23					inc hl 
4874			 
4874 cd b6 13				call malloc 
4877				if DEBUG_FORTH_MALLOC_GUARD 
4877 cc bd 5d				call z,malloc_error 
487a				endif 
487a			 
487a eb					ex de, hl      ; save malloc area for string copy 
487b e1					pop hl    ; get back source 
487c c1					pop bc    ; get length of string back 
487d			 
487d d5					push de    ; save malloc area for after we push 
487e ed b0				ldir     ; copy substr 
4880			 
4880			 
4880 eb					ex de, hl 
4881 3e 00				ld a, 0 
4883 77					ld (hl), a   ; term substr 
4884			 
4884					 
4884 e1					pop hl    ; get malloc so we can push it 
4885 e5					push hl   ; save so we can free it afterwards 
4886			 
4886 cd 9d 20				call forth_push_str 
4889			 
4889 e1					pop hl 
488a cd 80 14				call free 
488d			 
488d					 
488d					 
488d			 
488d			 
488d					NEXTW 
488d c3 ea 23			jp macro_next 
4890				endm 
# End of macro NEXTW
4890			 
4890			.LEFT: 
4890				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4890 48				db WORD_SYS_CORE+52             
4891 b8 48			dw .RIGHT            
4893 05				db 4 + 1 
4894 .. 00			db "LEFT",0              
4899				endm 
# End of macro CWHEAD
4899			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
4899					if DEBUG_FORTH_WORDS_KEY 
4899						DMARK "LEF" 
4899 f5				push af  
489a 3a ae 48			ld a, (.dmark)  
489d 32 a6 fd			ld (debug_mark),a  
48a0 3a af 48			ld a, (.dmark+1)  
48a3 32 a7 fd			ld (debug_mark+1),a  
48a6 3a b0 48			ld a, (.dmark+2)  
48a9 32 a8 fd			ld (debug_mark+2),a  
48ac 18 03			jr .pastdmark  
48ae ..			.dmark: db "LEF"  
48b1 f1			.pastdmark: pop af  
48b2			endm  
# End of macro DMARK
48b2						CALLMONITOR 
48b2 cd aa fd			call debug_vector  
48b5				endm  
# End of macro CALLMONITOR
48b5					endif 
48b5			 
48b5					NEXTW 
48b5 c3 ea 23			jp macro_next 
48b8				endm 
# End of macro NEXTW
48b8			.RIGHT: 
48b8				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
48b8 48				db WORD_SYS_CORE+52             
48b9 e1 48			dw .STR2NUM            
48bb 06				db 5 + 1 
48bc .. 00			db "RIGHT",0              
48c2				endm 
# End of macro CWHEAD
48c2			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
48c2					if DEBUG_FORTH_WORDS_KEY 
48c2						DMARK "RIG" 
48c2 f5				push af  
48c3 3a d7 48			ld a, (.dmark)  
48c6 32 a6 fd			ld (debug_mark),a  
48c9 3a d8 48			ld a, (.dmark+1)  
48cc 32 a7 fd			ld (debug_mark+1),a  
48cf 3a d9 48			ld a, (.dmark+2)  
48d2 32 a8 fd			ld (debug_mark+2),a  
48d5 18 03			jr .pastdmark  
48d7 ..			.dmark: db "RIG"  
48da f1			.pastdmark: pop af  
48db			endm  
# End of macro DMARK
48db						CALLMONITOR 
48db cd aa fd			call debug_vector  
48de				endm  
# End of macro CALLMONITOR
48de					endif 
48de			 
48de					NEXTW 
48de c3 ea 23			jp macro_next 
48e1				endm 
# End of macro NEXTW
48e1			 
48e1			 
48e1			.STR2NUM: 
48e1				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
48e1 48				db WORD_SYS_CORE+52             
48e2 6d 49			dw .NUM2STR            
48e4 08				db 7 + 1 
48e5 .. 00			db "STR2NUM",0              
48ed				endm 
# End of macro CWHEAD
48ed			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
48ed			 
48ed			 
48ed			; TODO STR type check to do 
48ed					if DEBUG_FORTH_WORDS_KEY 
48ed						DMARK "S2N" 
48ed f5				push af  
48ee 3a 02 49			ld a, (.dmark)  
48f1 32 a6 fd			ld (debug_mark),a  
48f4 3a 03 49			ld a, (.dmark+1)  
48f7 32 a7 fd			ld (debug_mark+1),a  
48fa 3a 04 49			ld a, (.dmark+2)  
48fd 32 a8 fd			ld (debug_mark+2),a  
4900 18 03			jr .pastdmark  
4902 ..			.dmark: db "S2N"  
4905 f1			.pastdmark: pop af  
4906			endm  
# End of macro DMARK
4906						CALLMONITOR 
4906 cd aa fd			call debug_vector  
4909				endm  
# End of macro CALLMONITOR
4909					endif 
4909			 
4909					;FORTH_DSP 
4909					FORTH_DSP_VALUE 
4909 cd 1d 22			call macro_forth_dsp_value 
490c				endm 
# End of macro FORTH_DSP_VALUE
490c					;inc hl 
490c			 
490c eb					ex de, hl 
490d					if DEBUG_FORTH_WORDS 
490d						DMARK "S2a" 
490d f5				push af  
490e 3a 22 49			ld a, (.dmark)  
4911 32 a6 fd			ld (debug_mark),a  
4914 3a 23 49			ld a, (.dmark+1)  
4917 32 a7 fd			ld (debug_mark+1),a  
491a 3a 24 49			ld a, (.dmark+2)  
491d 32 a8 fd			ld (debug_mark+2),a  
4920 18 03			jr .pastdmark  
4922 ..			.dmark: db "S2a"  
4925 f1			.pastdmark: pop af  
4926			endm  
# End of macro DMARK
4926						CALLMONITOR 
4926 cd aa fd			call debug_vector  
4929				endm  
# End of macro CALLMONITOR
4929					endif 
4929 cd d8 12				call string_to_uint16 
492c			 
492c					if DEBUG_FORTH_WORDS 
492c						DMARK "S2b" 
492c f5				push af  
492d 3a 41 49			ld a, (.dmark)  
4930 32 a6 fd			ld (debug_mark),a  
4933 3a 42 49			ld a, (.dmark+1)  
4936 32 a7 fd			ld (debug_mark+1),a  
4939 3a 43 49			ld a, (.dmark+2)  
493c 32 a8 fd			ld (debug_mark+2),a  
493f 18 03			jr .pastdmark  
4941 ..			.dmark: db "S2b"  
4944 f1			.pastdmark: pop af  
4945			endm  
# End of macro DMARK
4945						CALLMONITOR 
4945 cd aa fd			call debug_vector  
4948				endm  
# End of macro CALLMONITOR
4948					endif 
4948			;		push hl 
4948					FORTH_DSP_POP 
4948 cd ec 22			call macro_forth_dsp_pop 
494b				endm 
# End of macro FORTH_DSP_POP
494b			;		pop hl 
494b					 
494b					if DEBUG_FORTH_WORDS 
494b						DMARK "S2b" 
494b f5				push af  
494c 3a 60 49			ld a, (.dmark)  
494f 32 a6 fd			ld (debug_mark),a  
4952 3a 61 49			ld a, (.dmark+1)  
4955 32 a7 fd			ld (debug_mark+1),a  
4958 3a 62 49			ld a, (.dmark+2)  
495b 32 a8 fd			ld (debug_mark+2),a  
495e 18 03			jr .pastdmark  
4960 ..			.dmark: db "S2b"  
4963 f1			.pastdmark: pop af  
4964			endm  
# End of macro DMARK
4964						CALLMONITOR 
4964 cd aa fd			call debug_vector  
4967				endm  
# End of macro CALLMONITOR
4967					endif 
4967 cd 2f 20				call forth_push_numhl	 
496a			 
496a				 
496a				       NEXTW 
496a c3 ea 23			jp macro_next 
496d				endm 
# End of macro NEXTW
496d			.NUM2STR: 
496d				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
496d 48				db WORD_SYS_CORE+52             
496e 7c 49			dw .CONCAT            
4970 08				db 7 + 1 
4971 .. 00			db "NUM2STR",0              
4979				endm 
# End of macro CWHEAD
4979			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
4979			 
4979			;		; malloc a string to target 
4979			;		ld hl, 10     ; TODO max string size should be fine 
4979			;		call malloc 
4979			;		push hl    ; save malloc location 
4979			; 
4979			; 
4979			;; TODO check int type 
4979			;		FORTH_DSP_VALUEHL 
4979			;		ld a, l 
4979			;		call DispAToASCII   
4979			;;TODO need to chage above call to dump into string 
4979			; 
4979			; 
4979			 
4979				       NEXTW 
4979 c3 ea 23			jp macro_next 
497c				endm 
# End of macro NEXTW
497c			 
497c			.CONCAT: 
497c				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
497c 48				db WORD_SYS_CORE+52             
497d 2f 4a			dw .FIND            
497f 07				db 6 + 1 
4980 .. 00			db "CONCAT",0              
4987				endm 
# End of macro CWHEAD
4987			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4987			 
4987			; TODO check string type 
4987			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4987			 
4987					if DEBUG_FORTH_WORDS_KEY 
4987						DMARK "CON" 
4987 f5				push af  
4988 3a 9c 49			ld a, (.dmark)  
498b 32 a6 fd			ld (debug_mark),a  
498e 3a 9d 49			ld a, (.dmark+1)  
4991 32 a7 fd			ld (debug_mark+1),a  
4994 3a 9e 49			ld a, (.dmark+2)  
4997 32 a8 fd			ld (debug_mark+2),a  
499a 18 03			jr .pastdmark  
499c ..			.dmark: db "CON"  
499f f1			.pastdmark: pop af  
49a0			endm  
# End of macro DMARK
49a0						CALLMONITOR 
49a0 cd aa fd			call debug_vector  
49a3				endm  
# End of macro CALLMONITOR
49a3					endif 
49a3			 
49a3			 
49a3					FORTH_DSP_VALUE 
49a3 cd 1d 22			call macro_forth_dsp_value 
49a6				endm 
# End of macro FORTH_DSP_VALUE
49a6 e5					push hl   ; s2 
49a7			 
49a7					FORTH_DSP_POP 
49a7 cd ec 22			call macro_forth_dsp_pop 
49aa				endm 
# End of macro FORTH_DSP_POP
49aa			 
49aa					FORTH_DSP_VALUE 
49aa cd 1d 22			call macro_forth_dsp_value 
49ad				endm 
# End of macro FORTH_DSP_VALUE
49ad			 
49ad e5					push hl   ; s1 
49ae			 
49ae					FORTH_DSP_POP 
49ae cd ec 22			call macro_forth_dsp_pop 
49b1				endm 
# End of macro FORTH_DSP_POP
49b1					 
49b1			 
49b1					; copy s1 
49b1			 
49b1				 
49b1					; save ptr 
49b1 e1					pop hl  
49b2 e5					push hl 
49b3 3e 00				ld a, 0 
49b5 cd 4c 13				call strlent 
49b8					;inc hl    ; zer0 
49b8 06 00				ld b, 0 
49ba 4d					ld c, l 
49bb e1					pop hl		 
49bc 11 fc f0				ld de, scratch	 
49bf					if DEBUG_FORTH_WORDS 
49bf						DMARK "CO1" 
49bf f5				push af  
49c0 3a d4 49			ld a, (.dmark)  
49c3 32 a6 fd			ld (debug_mark),a  
49c6 3a d5 49			ld a, (.dmark+1)  
49c9 32 a7 fd			ld (debug_mark+1),a  
49cc 3a d6 49			ld a, (.dmark+2)  
49cf 32 a8 fd			ld (debug_mark+2),a  
49d2 18 03			jr .pastdmark  
49d4 ..			.dmark: db "CO1"  
49d7 f1			.pastdmark: pop af  
49d8			endm  
# End of macro DMARK
49d8						CALLMONITOR 
49d8 cd aa fd			call debug_vector  
49db				endm  
# End of macro CALLMONITOR
49db					endif 
49db ed b0				ldir 
49dd			 
49dd e1					pop hl 
49de e5					push hl 
49df d5					push de 
49e0			 
49e0			 
49e0 3e 00				ld a, 0 
49e2 cd 4c 13				call strlent 
49e5 23					inc hl    ; zer0 
49e6 23					inc hl 
49e7 06 00				ld b, 0 
49e9 4d					ld c, l 
49ea d1					pop de 
49eb e1					pop hl		 
49ec					if DEBUG_FORTH_WORDS 
49ec						DMARK "CO2" 
49ec f5				push af  
49ed 3a 01 4a			ld a, (.dmark)  
49f0 32 a6 fd			ld (debug_mark),a  
49f3 3a 02 4a			ld a, (.dmark+1)  
49f6 32 a7 fd			ld (debug_mark+1),a  
49f9 3a 03 4a			ld a, (.dmark+2)  
49fc 32 a8 fd			ld (debug_mark+2),a  
49ff 18 03			jr .pastdmark  
4a01 ..			.dmark: db "CO2"  
4a04 f1			.pastdmark: pop af  
4a05			endm  
# End of macro DMARK
4a05						CALLMONITOR 
4a05 cd aa fd			call debug_vector  
4a08				endm  
# End of macro CALLMONITOR
4a08					endif 
4a08 ed b0				ldir 
4a0a			 
4a0a			 
4a0a			 
4a0a 21 fc f0				ld hl, scratch 
4a0d					if DEBUG_FORTH_WORDS 
4a0d						DMARK "CO5" 
4a0d f5				push af  
4a0e 3a 22 4a			ld a, (.dmark)  
4a11 32 a6 fd			ld (debug_mark),a  
4a14 3a 23 4a			ld a, (.dmark+1)  
4a17 32 a7 fd			ld (debug_mark+1),a  
4a1a 3a 24 4a			ld a, (.dmark+2)  
4a1d 32 a8 fd			ld (debug_mark+2),a  
4a20 18 03			jr .pastdmark  
4a22 ..			.dmark: db "CO5"  
4a25 f1			.pastdmark: pop af  
4a26			endm  
# End of macro DMARK
4a26						CALLMONITOR 
4a26 cd aa fd			call debug_vector  
4a29				endm  
# End of macro CALLMONITOR
4a29					endif 
4a29			 
4a29 cd 9d 20				call forth_push_str 
4a2c			 
4a2c			 
4a2c			 
4a2c			 
4a2c				       NEXTW 
4a2c c3 ea 23			jp macro_next 
4a2f				endm 
# End of macro NEXTW
4a2f			 
4a2f			 
4a2f			.FIND: 
4a2f				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4a2f 4b				db WORD_SYS_CORE+55             
4a30 ed 4a			dw .LEN            
4a32 05				db 4 + 1 
4a33 .. 00			db "FIND",0              
4a38				endm 
# End of macro CWHEAD
4a38			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4a38			 
4a38					if DEBUG_FORTH_WORDS_KEY 
4a38						DMARK "FND" 
4a38 f5				push af  
4a39 3a 4d 4a			ld a, (.dmark)  
4a3c 32 a6 fd			ld (debug_mark),a  
4a3f 3a 4e 4a			ld a, (.dmark+1)  
4a42 32 a7 fd			ld (debug_mark+1),a  
4a45 3a 4f 4a			ld a, (.dmark+2)  
4a48 32 a8 fd			ld (debug_mark+2),a  
4a4b 18 03			jr .pastdmark  
4a4d ..			.dmark: db "FND"  
4a50 f1			.pastdmark: pop af  
4a51			endm  
# End of macro DMARK
4a51						CALLMONITOR 
4a51 cd aa fd			call debug_vector  
4a54				endm  
# End of macro CALLMONITOR
4a54					endif 
4a54			 
4a54			; TODO check string type 
4a54					FORTH_DSP_VALUE 
4a54 cd 1d 22			call macro_forth_dsp_value 
4a57				endm 
# End of macro FORTH_DSP_VALUE
4a57			 
4a57 e5					push hl    
4a58 7e					ld a,(hl)    ; char to find   
4a59			; TODO change char to substr 
4a59			 
4a59 f5					push af 
4a5a					 
4a5a			 
4a5a			 
4a5a					if DEBUG_FORTH_WORDS 
4a5a						DMARK "FN1" 
4a5a f5				push af  
4a5b 3a 6f 4a			ld a, (.dmark)  
4a5e 32 a6 fd			ld (debug_mark),a  
4a61 3a 70 4a			ld a, (.dmark+1)  
4a64 32 a7 fd			ld (debug_mark+1),a  
4a67 3a 71 4a			ld a, (.dmark+2)  
4a6a 32 a8 fd			ld (debug_mark+2),a  
4a6d 18 03			jr .pastdmark  
4a6f ..			.dmark: db "FN1"  
4a72 f1			.pastdmark: pop af  
4a73			endm  
# End of macro DMARK
4a73						CALLMONITOR 
4a73 cd aa fd			call debug_vector  
4a76				endm  
# End of macro CALLMONITOR
4a76					endif 
4a76			 
4a76					FORTH_DSP_POP 
4a76 cd ec 22			call macro_forth_dsp_pop 
4a79				endm 
# End of macro FORTH_DSP_POP
4a79			 
4a79					; string to search 
4a79			 
4a79					FORTH_DSP_VALUE 
4a79 cd 1d 22			call macro_forth_dsp_value 
4a7c				endm 
# End of macro FORTH_DSP_VALUE
4a7c			 
4a7c d1					pop de  ; d is char to find  
4a7d			 
4a7d					if DEBUG_FORTH_WORDS 
4a7d						DMARK "FN2" 
4a7d f5				push af  
4a7e 3a 92 4a			ld a, (.dmark)  
4a81 32 a6 fd			ld (debug_mark),a  
4a84 3a 93 4a			ld a, (.dmark+1)  
4a87 32 a7 fd			ld (debug_mark+1),a  
4a8a 3a 94 4a			ld a, (.dmark+2)  
4a8d 32 a8 fd			ld (debug_mark+2),a  
4a90 18 03			jr .pastdmark  
4a92 ..			.dmark: db "FN2"  
4a95 f1			.pastdmark: pop af  
4a96			endm  
# End of macro DMARK
4a96						CALLMONITOR 
4a96 cd aa fd			call debug_vector  
4a99				endm  
# End of macro CALLMONITOR
4a99					endif 
4a99					 
4a99 01 00 00				ld bc, 0 
4a9c 7e			.findchar:      ld a,(hl) 
4a9d fe 00				cp 0   		 
4a9f 28 27				jr z, .finddone     
4aa1 ba					cp d 
4aa2 28 20				jr z, .foundchar 
4aa4 03					inc bc 
4aa5 23					inc hl 
4aa6					if DEBUG_FORTH_WORDS 
4aa6						DMARK "FN3" 
4aa6 f5				push af  
4aa7 3a bb 4a			ld a, (.dmark)  
4aaa 32 a6 fd			ld (debug_mark),a  
4aad 3a bc 4a			ld a, (.dmark+1)  
4ab0 32 a7 fd			ld (debug_mark+1),a  
4ab3 3a bd 4a			ld a, (.dmark+2)  
4ab6 32 a8 fd			ld (debug_mark+2),a  
4ab9 18 03			jr .pastdmark  
4abb ..			.dmark: db "FN3"  
4abe f1			.pastdmark: pop af  
4abf			endm  
# End of macro DMARK
4abf						CALLMONITOR 
4abf cd aa fd			call debug_vector  
4ac2				endm  
# End of macro CALLMONITOR
4ac2					endif 
4ac2 18 d8				jr .findchar 
4ac4			 
4ac4			 
4ac4 c5			.foundchar:	push bc 
4ac5 e1					pop hl 
4ac6 18 03				jr .findexit 
4ac8			 
4ac8			 
4ac8							 
4ac8			 
4ac8			.finddone:     ; got to end of string with no find 
4ac8 21 00 00				ld hl, 0 
4acb			.findexit: 
4acb			 
4acb					if DEBUG_FORTH_WORDS 
4acb						DMARK "FNd" 
4acb f5				push af  
4acc 3a e0 4a			ld a, (.dmark)  
4acf 32 a6 fd			ld (debug_mark),a  
4ad2 3a e1 4a			ld a, (.dmark+1)  
4ad5 32 a7 fd			ld (debug_mark+1),a  
4ad8 3a e2 4a			ld a, (.dmark+2)  
4adb 32 a8 fd			ld (debug_mark+2),a  
4ade 18 03			jr .pastdmark  
4ae0 ..			.dmark: db "FNd"  
4ae3 f1			.pastdmark: pop af  
4ae4			endm  
# End of macro DMARK
4ae4						CALLMONITOR 
4ae4 cd aa fd			call debug_vector  
4ae7				endm  
# End of macro CALLMONITOR
4ae7					endif 
4ae7 cd 2f 20			call forth_push_numhl 
4aea			 
4aea				       NEXTW 
4aea c3 ea 23			jp macro_next 
4aed				endm 
# End of macro NEXTW
4aed			 
4aed			.LEN: 
4aed				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4aed 4c				db WORD_SYS_CORE+56             
4aee 57 4b			dw .ASC            
4af0 06				db 5 + 1 
4af1 .. 00			db "COUNT",0              
4af7				endm 
# End of macro CWHEAD
4af7			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4af7			 
4af7					if DEBUG_FORTH_WORDS_KEY 
4af7						DMARK "CNT" 
4af7 f5				push af  
4af8 3a 0c 4b			ld a, (.dmark)  
4afb 32 a6 fd			ld (debug_mark),a  
4afe 3a 0d 4b			ld a, (.dmark+1)  
4b01 32 a7 fd			ld (debug_mark+1),a  
4b04 3a 0e 4b			ld a, (.dmark+2)  
4b07 32 a8 fd			ld (debug_mark+2),a  
4b0a 18 03			jr .pastdmark  
4b0c ..			.dmark: db "CNT"  
4b0f f1			.pastdmark: pop af  
4b10			endm  
# End of macro DMARK
4b10						CALLMONITOR 
4b10 cd aa fd			call debug_vector  
4b13				endm  
# End of macro CALLMONITOR
4b13					endif 
4b13			; TODO check string type 
4b13					FORTH_DSP_VALUE 
4b13 cd 1d 22			call macro_forth_dsp_value 
4b16				endm 
# End of macro FORTH_DSP_VALUE
4b16			 
4b16			 
4b16					if DEBUG_FORTH_WORDS 
4b16						DMARK "CN?" 
4b16 f5				push af  
4b17 3a 2b 4b			ld a, (.dmark)  
4b1a 32 a6 fd			ld (debug_mark),a  
4b1d 3a 2c 4b			ld a, (.dmark+1)  
4b20 32 a7 fd			ld (debug_mark+1),a  
4b23 3a 2d 4b			ld a, (.dmark+2)  
4b26 32 a8 fd			ld (debug_mark+2),a  
4b29 18 03			jr .pastdmark  
4b2b ..			.dmark: db "CN?"  
4b2e f1			.pastdmark: pop af  
4b2f			endm  
# End of macro DMARK
4b2f						CALLMONITOR 
4b2f cd aa fd			call debug_vector  
4b32				endm  
# End of macro CALLMONITOR
4b32					endif 
4b32 cd 41 13				call strlenz 
4b35					if DEBUG_FORTH_WORDS 
4b35						DMARK "CNl" 
4b35 f5				push af  
4b36 3a 4a 4b			ld a, (.dmark)  
4b39 32 a6 fd			ld (debug_mark),a  
4b3c 3a 4b 4b			ld a, (.dmark+1)  
4b3f 32 a7 fd			ld (debug_mark+1),a  
4b42 3a 4c 4b			ld a, (.dmark+2)  
4b45 32 a8 fd			ld (debug_mark+2),a  
4b48 18 03			jr .pastdmark  
4b4a ..			.dmark: db "CNl"  
4b4d f1			.pastdmark: pop af  
4b4e			endm  
# End of macro DMARK
4b4e						CALLMONITOR 
4b4e cd aa fd			call debug_vector  
4b51				endm  
# End of macro CALLMONITOR
4b51					endif 
4b51			 
4b51 cd 2f 20				call forth_push_numhl 
4b54			 
4b54			 
4b54			 
4b54				       NEXTW 
4b54 c3 ea 23			jp macro_next 
4b57				endm 
# End of macro NEXTW
4b57			.ASC: 
4b57				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4b57 4d				db WORD_SYS_CORE+57             
4b58 c5 4b			dw .CHR            
4b5a 04				db 3 + 1 
4b5b .. 00			db "ASC",0              
4b5f				endm 
# End of macro CWHEAD
4b5f			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4b5f					if DEBUG_FORTH_WORDS_KEY 
4b5f						DMARK "ASC" 
4b5f f5				push af  
4b60 3a 74 4b			ld a, (.dmark)  
4b63 32 a6 fd			ld (debug_mark),a  
4b66 3a 75 4b			ld a, (.dmark+1)  
4b69 32 a7 fd			ld (debug_mark+1),a  
4b6c 3a 76 4b			ld a, (.dmark+2)  
4b6f 32 a8 fd			ld (debug_mark+2),a  
4b72 18 03			jr .pastdmark  
4b74 ..			.dmark: db "ASC"  
4b77 f1			.pastdmark: pop af  
4b78			endm  
# End of macro DMARK
4b78						CALLMONITOR 
4b78 cd aa fd			call debug_vector  
4b7b				endm  
# End of macro CALLMONITOR
4b7b					endif 
4b7b					FORTH_DSP_VALUE 
4b7b cd 1d 22			call macro_forth_dsp_value 
4b7e				endm 
# End of macro FORTH_DSP_VALUE
4b7e					;v5 FORTH_DSP_VALUE 
4b7e			;		inc hl      ; now at start of numeric as string 
4b7e			 
4b7e e5					push hl 
4b7f			 
4b7f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4b7f cd ec 22			call macro_forth_dsp_pop 
4b82				endm 
# End of macro FORTH_DSP_POP
4b82			 
4b82 e1					pop hl 
4b83			 
4b83					if DEBUG_FORTH_WORDS 
4b83						DMARK "AS1" 
4b83 f5				push af  
4b84 3a 98 4b			ld a, (.dmark)  
4b87 32 a6 fd			ld (debug_mark),a  
4b8a 3a 99 4b			ld a, (.dmark+1)  
4b8d 32 a7 fd			ld (debug_mark+1),a  
4b90 3a 9a 4b			ld a, (.dmark+2)  
4b93 32 a8 fd			ld (debug_mark+2),a  
4b96 18 03			jr .pastdmark  
4b98 ..			.dmark: db "AS1"  
4b9b f1			.pastdmark: pop af  
4b9c			endm  
# End of macro DMARK
4b9c						CALLMONITOR 
4b9c cd aa fd			call debug_vector  
4b9f				endm  
# End of macro CALLMONITOR
4b9f					endif 
4b9f					; push the content of a onto the stack as a value 
4b9f			 
4b9f 7e					ld a,(hl)   ; get char 
4ba0 26 00				ld h,0 
4ba2 6f					ld l,a 
4ba3					if DEBUG_FORTH_WORDS 
4ba3						DMARK "AS2" 
4ba3 f5				push af  
4ba4 3a b8 4b			ld a, (.dmark)  
4ba7 32 a6 fd			ld (debug_mark),a  
4baa 3a b9 4b			ld a, (.dmark+1)  
4bad 32 a7 fd			ld (debug_mark+1),a  
4bb0 3a ba 4b			ld a, (.dmark+2)  
4bb3 32 a8 fd			ld (debug_mark+2),a  
4bb6 18 03			jr .pastdmark  
4bb8 ..			.dmark: db "AS2"  
4bbb f1			.pastdmark: pop af  
4bbc			endm  
# End of macro DMARK
4bbc						CALLMONITOR 
4bbc cd aa fd			call debug_vector  
4bbf				endm  
# End of macro CALLMONITOR
4bbf					endif 
4bbf cd 2f 20				call forth_push_numhl 
4bc2			 
4bc2				       NEXTW 
4bc2 c3 ea 23			jp macro_next 
4bc5				endm 
# End of macro NEXTW
4bc5			 
4bc5			.CHR: 
4bc5				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4bc5 4d				db WORD_SYS_CORE+57             
4bc6 01 4c			dw .ENDSTR            
4bc8 04				db 3 + 1 
4bc9 .. 00			db "CHR",0              
4bcd				endm 
# End of macro CWHEAD
4bcd			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4bcd					if DEBUG_FORTH_WORDS_KEY 
4bcd						DMARK "CHR" 
4bcd f5				push af  
4bce 3a e2 4b			ld a, (.dmark)  
4bd1 32 a6 fd			ld (debug_mark),a  
4bd4 3a e3 4b			ld a, (.dmark+1)  
4bd7 32 a7 fd			ld (debug_mark+1),a  
4bda 3a e4 4b			ld a, (.dmark+2)  
4bdd 32 a8 fd			ld (debug_mark+2),a  
4be0 18 03			jr .pastdmark  
4be2 ..			.dmark: db "CHR"  
4be5 f1			.pastdmark: pop af  
4be6			endm  
# End of macro DMARK
4be6						CALLMONITOR 
4be6 cd aa fd			call debug_vector  
4be9				endm  
# End of macro CALLMONITOR
4be9					endif 
4be9					FORTH_DSP_VALUEHL 
4be9 cd 34 22			call macro_dsp_valuehl 
4bec				endm 
# End of macro FORTH_DSP_VALUEHL
4bec			 
4bec					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4bec cd ec 22			call macro_forth_dsp_pop 
4bef				endm 
# End of macro FORTH_DSP_POP
4bef			 
4bef					; save asci byte as a zero term string and push string 
4bef			 
4bef 7d					ld a,l 
4bf0 32 fc f0				ld (scratch), a 
4bf3			 
4bf3 3e 00				ld a, 0 
4bf5 32 fd f0				ld (scratch+1), a 
4bf8			 
4bf8 21 fc f0				ld hl, scratch 
4bfb cd 9d 20				call forth_push_str 
4bfe			 
4bfe			 
4bfe				       NEXTW 
4bfe c3 ea 23			jp macro_next 
4c01				endm 
# End of macro NEXTW
4c01			 
4c01			 
4c01			 
4c01			 
4c01			.ENDSTR: 
4c01			; eof 
4c01			 
# End of file forth_words_str.asm
4c01			include "forth_words_key.asm" 
4c01			 
4c01			; | ## Keyboard Words 
4c01			 
4c01			.KEY: 
4c01				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
4c01 3e				db WORD_SYS_CORE+42             
4c02 31 4c			dw .WAITK            
4c04 04				db 3 + 1 
4c05 .. 00			db "KEY",0              
4c09				endm 
# End of macro CWHEAD
4c09			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4c09			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4c09			; | | Can use something like this to process: 
4c09			; | | > repeat active . key ?dup if emit then #1 until  
4c09			 
4c09					if DEBUG_FORTH_WORDS_KEY 
4c09						DMARK "KEY" 
4c09 f5				push af  
4c0a 3a 1e 4c			ld a, (.dmark)  
4c0d 32 a6 fd			ld (debug_mark),a  
4c10 3a 1f 4c			ld a, (.dmark+1)  
4c13 32 a7 fd			ld (debug_mark+1),a  
4c16 3a 20 4c			ld a, (.dmark+2)  
4c19 32 a8 fd			ld (debug_mark+2),a  
4c1c 18 03			jr .pastdmark  
4c1e ..			.dmark: db "KEY"  
4c21 f1			.pastdmark: pop af  
4c22			endm  
# End of macro DMARK
4c22						CALLMONITOR 
4c22 cd aa fd			call debug_vector  
4c25				endm  
# End of macro CALLMONITOR
4c25					endif 
4c25			; TODO currently waits 
4c25 cd c4 72				call cin 
4c28					;call cin_wait 
4c28 6f					ld l, a 
4c29 26 00				ld h, 0 
4c2b cd 2f 20				call forth_push_numhl 
4c2e					NEXTW 
4c2e c3 ea 23			jp macro_next 
4c31				endm 
# End of macro NEXTW
4c31			.WAITK: 
4c31				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4c31 3f				db WORD_SYS_CORE+43             
4c32 63 4c			dw .ACCEPT            
4c34 06				db 5 + 1 
4c35 .. 00			db "WAITK",0              
4c3b				endm 
# End of macro CWHEAD
4c3b			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4c3b					if DEBUG_FORTH_WORDS_KEY 
4c3b						DMARK "WAI" 
4c3b f5				push af  
4c3c 3a 50 4c			ld a, (.dmark)  
4c3f 32 a6 fd			ld (debug_mark),a  
4c42 3a 51 4c			ld a, (.dmark+1)  
4c45 32 a7 fd			ld (debug_mark+1),a  
4c48 3a 52 4c			ld a, (.dmark+2)  
4c4b 32 a8 fd			ld (debug_mark+2),a  
4c4e 18 03			jr .pastdmark  
4c50 ..			.dmark: db "WAI"  
4c53 f1			.pastdmark: pop af  
4c54			endm  
# End of macro DMARK
4c54						CALLMONITOR 
4c54 cd aa fd			call debug_vector  
4c57				endm  
# End of macro CALLMONITOR
4c57					endif 
4c57 cd b3 72				call cin_wait 
4c5a 6f					ld l, a 
4c5b 26 00				ld h, 0 
4c5d cd 2f 20				call forth_push_numhl 
4c60					NEXTW 
4c60 c3 ea 23			jp macro_next 
4c63				endm 
# End of macro NEXTW
4c63			.ACCEPT: 
4c63				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4c63 40				db WORD_SYS_CORE+44             
4c64 c1 4c			dw .EDIT            
4c66 07				db 6 + 1 
4c67 .. 00			db "ACCEPT",0              
4c6e				endm 
# End of macro CWHEAD
4c6e			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4c6e					; TODO crashes on push 
4c6e					if DEBUG_FORTH_WORDS_KEY 
4c6e						DMARK "ACC" 
4c6e f5				push af  
4c6f 3a 83 4c			ld a, (.dmark)  
4c72 32 a6 fd			ld (debug_mark),a  
4c75 3a 84 4c			ld a, (.dmark+1)  
4c78 32 a7 fd			ld (debug_mark+1),a  
4c7b 3a 85 4c			ld a, (.dmark+2)  
4c7e 32 a8 fd			ld (debug_mark+2),a  
4c81 18 03			jr .pastdmark  
4c83 ..			.dmark: db "ACC"  
4c86 f1			.pastdmark: pop af  
4c87			endm  
# End of macro DMARK
4c87						CALLMONITOR 
4c87 cd aa fd			call debug_vector  
4c8a				endm  
# End of macro CALLMONITOR
4c8a					endif 
4c8a 21 fa f2				ld hl, os_input 
4c8d 3e 00				ld a, 0 
4c8f 77					ld (hl),a 
4c90 3a 99 f9				ld a,(f_cursor_ptr) 
4c93 16 64				ld d, 100 
4c95 0e 00				ld c, 0 
4c97 1e 28				ld e, 40 
4c99 cd 08 10				call input_str 
4c9c					; TODO perhaps do a type check and wrap in quotes if not a number 
4c9c 21 fa f2				ld hl, os_input 
4c9f					if DEBUG_FORTH_WORDS 
4c9f						DMARK "AC1" 
4c9f f5				push af  
4ca0 3a b4 4c			ld a, (.dmark)  
4ca3 32 a6 fd			ld (debug_mark),a  
4ca6 3a b5 4c			ld a, (.dmark+1)  
4ca9 32 a7 fd			ld (debug_mark+1),a  
4cac 3a b6 4c			ld a, (.dmark+2)  
4caf 32 a8 fd			ld (debug_mark+2),a  
4cb2 18 03			jr .pastdmark  
4cb4 ..			.dmark: db "AC1"  
4cb7 f1			.pastdmark: pop af  
4cb8			endm  
# End of macro DMARK
4cb8						CALLMONITOR 
4cb8 cd aa fd			call debug_vector  
4cbb				endm  
# End of macro CALLMONITOR
4cbb					endif 
4cbb cd 9d 20				call forth_push_str 
4cbe					NEXTW 
4cbe c3 ea 23			jp macro_next 
4cc1				endm 
# End of macro NEXTW
4cc1			 
4cc1			.EDIT: 
4cc1				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4cc1 40				db WORD_SYS_CORE+44             
4cc2 63 4d			dw .DEDIT            
4cc4 05				db 4 + 1 
4cc5 .. 00			db "EDIT",0              
4cca				endm 
# End of macro CWHEAD
4cca			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4cca			 
4cca					; TODO does not copy from stack 
4cca					if DEBUG_FORTH_WORDS_KEY 
4cca						DMARK "EDT" 
4cca f5				push af  
4ccb 3a df 4c			ld a, (.dmark)  
4cce 32 a6 fd			ld (debug_mark),a  
4cd1 3a e0 4c			ld a, (.dmark+1)  
4cd4 32 a7 fd			ld (debug_mark+1),a  
4cd7 3a e1 4c			ld a, (.dmark+2)  
4cda 32 a8 fd			ld (debug_mark+2),a  
4cdd 18 03			jr .pastdmark  
4cdf ..			.dmark: db "EDT"  
4ce2 f1			.pastdmark: pop af  
4ce3			endm  
# End of macro DMARK
4ce3						CALLMONITOR 
4ce3 cd aa fd			call debug_vector  
4ce6				endm  
# End of macro CALLMONITOR
4ce6					endif 
4ce6			 
4ce6					;FORTH_DSP 
4ce6					FORTH_DSP_VALUEHL 
4ce6 cd 34 22			call macro_dsp_valuehl 
4ce9				endm 
# End of macro FORTH_DSP_VALUEHL
4ce9			;		inc hl    ; TODO do type check 
4ce9			 
4ce9			;		call get_word_hl 
4ce9 e5					push hl 
4cea					if DEBUG_FORTH_WORDS 
4cea						DMARK "EDp" 
4cea f5				push af  
4ceb 3a ff 4c			ld a, (.dmark)  
4cee 32 a6 fd			ld (debug_mark),a  
4cf1 3a 00 4d			ld a, (.dmark+1)  
4cf4 32 a7 fd			ld (debug_mark+1),a  
4cf7 3a 01 4d			ld a, (.dmark+2)  
4cfa 32 a8 fd			ld (debug_mark+2),a  
4cfd 18 03			jr .pastdmark  
4cff ..			.dmark: db "EDp"  
4d02 f1			.pastdmark: pop af  
4d03			endm  
# End of macro DMARK
4d03						CALLMONITOR 
4d03 cd aa fd			call debug_vector  
4d06				endm  
# End of macro CALLMONITOR
4d06					endif 
4d06				;	ld a, 0 
4d06 cd 41 13				call strlenz 
4d09 23					inc hl 
4d0a			 
4d0a 06 00				ld b, 0 
4d0c 4d					ld c, l 
4d0d			 
4d0d e1					pop hl 
4d0e 11 fa f2				ld de, os_input 
4d11					if DEBUG_FORTH_WORDS_KEY 
4d11						DMARK "EDc" 
4d11 f5				push af  
4d12 3a 26 4d			ld a, (.dmark)  
4d15 32 a6 fd			ld (debug_mark),a  
4d18 3a 27 4d			ld a, (.dmark+1)  
4d1b 32 a7 fd			ld (debug_mark+1),a  
4d1e 3a 28 4d			ld a, (.dmark+2)  
4d21 32 a8 fd			ld (debug_mark+2),a  
4d24 18 03			jr .pastdmark  
4d26 ..			.dmark: db "EDc"  
4d29 f1			.pastdmark: pop af  
4d2a			endm  
# End of macro DMARK
4d2a						CALLMONITOR 
4d2a cd aa fd			call debug_vector  
4d2d				endm  
# End of macro CALLMONITOR
4d2d					endif 
4d2d ed b0				ldir 
4d2f			 
4d2f			 
4d2f 21 fa f2				ld hl, os_input 
4d32					;ld a, 0 
4d32					;ld (hl),a 
4d32 3a 99 f9				ld a,(f_cursor_ptr) 
4d35 16 64				ld d, 100 
4d37 0e 00				ld c, 0 
4d39 1e 28				ld e, 40 
4d3b cd 08 10				call input_str 
4d3e					; TODO perhaps do a type check and wrap in quotes if not a number 
4d3e 21 fa f2				ld hl, os_input 
4d41					if DEBUG_FORTH_WORDS 
4d41						DMARK "ED1" 
4d41 f5				push af  
4d42 3a 56 4d			ld a, (.dmark)  
4d45 32 a6 fd			ld (debug_mark),a  
4d48 3a 57 4d			ld a, (.dmark+1)  
4d4b 32 a7 fd			ld (debug_mark+1),a  
4d4e 3a 58 4d			ld a, (.dmark+2)  
4d51 32 a8 fd			ld (debug_mark+2),a  
4d54 18 03			jr .pastdmark  
4d56 ..			.dmark: db "ED1"  
4d59 f1			.pastdmark: pop af  
4d5a			endm  
# End of macro DMARK
4d5a						CALLMONITOR 
4d5a cd aa fd			call debug_vector  
4d5d				endm  
# End of macro CALLMONITOR
4d5d					endif 
4d5d cd 9d 20				call forth_push_str 
4d60					NEXTW 
4d60 c3 ea 23			jp macro_next 
4d63				endm 
# End of macro NEXTW
4d63			 
4d63			.DEDIT: 
4d63				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4d63 40				db WORD_SYS_CORE+44             
4d64 c5 4d			dw .ENDKEY            
4d66 06				db 5 + 1 
4d67 .. 00			db "DEDIT",0              
4d6d				endm 
# End of macro CWHEAD
4d6d			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
4d6d			 
4d6d					; TODO does not copy from stack 
4d6d					if DEBUG_FORTH_WORDS_KEY 
4d6d						DMARK "DED" 
4d6d f5				push af  
4d6e 3a 82 4d			ld a, (.dmark)  
4d71 32 a6 fd			ld (debug_mark),a  
4d74 3a 83 4d			ld a, (.dmark+1)  
4d77 32 a7 fd			ld (debug_mark+1),a  
4d7a 3a 84 4d			ld a, (.dmark+2)  
4d7d 32 a8 fd			ld (debug_mark+2),a  
4d80 18 03			jr .pastdmark  
4d82 ..			.dmark: db "DED"  
4d85 f1			.pastdmark: pop af  
4d86			endm  
# End of macro DMARK
4d86						CALLMONITOR 
4d86 cd aa fd			call debug_vector  
4d89				endm  
# End of macro CALLMONITOR
4d89					endif 
4d89			 
4d89					;FORTH_DSP 
4d89					FORTH_DSP_VALUEHL 
4d89 cd 34 22			call macro_dsp_valuehl 
4d8c				endm 
# End of macro FORTH_DSP_VALUEHL
4d8c			;		inc hl    ; TODO do type check 
4d8c			 
4d8c			;		call get_word_hl 
4d8c e5					push hl 
4d8d e5					push hl 
4d8e					FORTH_DSP_POP 
4d8e cd ec 22			call macro_forth_dsp_pop 
4d91				endm 
# End of macro FORTH_DSP_POP
4d91 e1					pop hl 
4d92					if DEBUG_FORTH_WORDS 
4d92						DMARK "EDp" 
4d92 f5				push af  
4d93 3a a7 4d			ld a, (.dmark)  
4d96 32 a6 fd			ld (debug_mark),a  
4d99 3a a8 4d			ld a, (.dmark+1)  
4d9c 32 a7 fd			ld (debug_mark+1),a  
4d9f 3a a9 4d			ld a, (.dmark+2)  
4da2 32 a8 fd			ld (debug_mark+2),a  
4da5 18 03			jr .pastdmark  
4da7 ..			.dmark: db "EDp"  
4daa f1			.pastdmark: pop af  
4dab			endm  
# End of macro DMARK
4dab						CALLMONITOR 
4dab cd aa fd			call debug_vector  
4dae				endm  
# End of macro CALLMONITOR
4dae					endif 
4dae				;	ld a, 0 
4dae cd 41 13				call strlenz 
4db1 23					inc hl 
4db2			 
4db2 06 00				ld b, 0 
4db4 4d					ld c, l 
4db5			 
4db5 e1					pop hl 
4db6			 
4db6					;ld a, 0 
4db6					;ld (hl),a 
4db6 3a 99 f9				ld a,(f_cursor_ptr) 
4db9 16 64				ld d, 100 
4dbb 0e 00				ld c, 0 
4dbd 1e 28				ld e, 40 
4dbf cd 08 10				call input_str 
4dc2					; TODO perhaps do a type check and wrap in quotes if not a number 
4dc2					NEXTW 
4dc2 c3 ea 23			jp macro_next 
4dc5				endm 
# End of macro NEXTW
4dc5			 
4dc5			 
4dc5			.ENDKEY: 
4dc5			; eof 
4dc5			 
# End of file forth_words_key.asm
4dc5			include "forth_words_const.asm" 
4dc5			 
4dc5			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4dc5			 
4dc5			 
4dc5			.SPITIME: 
4dc5				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4dc5 77				db WORD_SYS_CORE+99             
4dc6 da 4d			dw .VA            
4dc8 08				db 7 + 1 
4dc9 .. 00			db "SPITIME",0              
4dd1				endm 
# End of macro CWHEAD
4dd1			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4dd1			; 
4dd1			; | | If using BANK devices then leave as is. 
4dd1			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4dd1			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4dd1			 
4dd1 21 9f f9				ld hl, spi_clktime  
4dd4 cd 2f 20				call forth_push_numhl 
4dd7			 
4dd7					NEXTW 
4dd7 c3 ea 23			jp macro_next 
4dda				endm 
# End of macro NEXTW
4dda			 
4dda			 
4dda			.VA: 
4dda				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4dda 77				db WORD_SYS_CORE+99             
4ddb ea 4d			dw .SYMBOL            
4ddd 03				db 2 + 1 
4dde .. 00			db "VA",0              
4de1				endm 
# End of macro CWHEAD
4de1			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4de1 21 63 f9				ld hl, cli_var_array 
4de4 cd 2f 20				call forth_push_numhl 
4de7			 
4de7					NEXTW 
4de7 c3 ea 23			jp macro_next 
4dea				endm 
# End of macro NEXTW
4dea			 
4dea			.SYMBOL: 
4dea				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4dea 77				db WORD_SYS_CORE+99             
4deb f4 4e			dw .ENDCONST            
4ded 07				db 6 + 1 
4dee .. 00			db "SYMBOL",0              
4df5				endm 
# End of macro CWHEAD
4df5			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4df5			; | 
4df5			; | | The value is the number reference and the final address is pushed to stack 
4df5			 
4df5			; | | ``` 
4df5			; | | dw sym_table 
4df5			; | | dw nmi_vector 
4df5			; | | dw cli_autodisplay 
4df5			; | | dw cli_data_sp 
4df5			; | | dw cli_data_stack 
4df5			; | | dw cli_loop_sp 
4df5			; | | dw cli_loop_stack 
4df5			; | | dw cli_var_array 
4df5			; | | dw cursor_col 
4df5			; | | dw cursor_ptr 
4df5			; | | ; 10 
4df5			; | | dw cursor_row 
4df5			; | | dw debug_mark 
4df5			; | | dw display_fb0 
4df5			; | | dw display_fb1 
4df5			; | | dw display_fb2 
4df5			; | | dw display_fb3 
4df5			; | | dw display_fb_active 
4df5			; | | dw execscratch 
4df5			; | | dw f_cursor_ptr 
4df5			; | | dw hardware_word 
4df5			; | | ;20 
4df5			; | | dw input_at_cursor 
4df5			; | | dw input_at_pos 
4df5			; | | dw input_cur_flash 
4df5			; | | dw input_cur_onoff 
4df5			; | | dw input_cursor 
4df5			; | | dw input_display_size 
4df5			; | | dw input_len 
4df5			; | | dw input_ptr 
4df5			; | | dw input_size 
4df5			; | | dw input_start 
4df5			; | | ; 30 
4df5			; | | dw input_str 
4df5			; | | dw input_under_cursor 
4df5			; | | dw os_cli_cmd 
4df5			; | | dw os_cur_ptr 
4df5			; | | dw os_current_i 
4df5			; | | dw os_input 
4df5			; | | dw os_last_cmd 
4df5			; | | dw os_last_new_uword 
4df5			; | | dw debug_vector 
4df5			; | | dw os_view_hl 
4df5			; | | ;40 
4df5			; | | dw os_word_scratch 
4df5			; | | dw portbctl 
4df5			; | | dw portbdata 
4df5			; | | dw spi_cartdev 
4df5			; | | dw spi_cartdev2 
4df5			; | | dw spi_clktime 
4df5			; | | dw spi_device 
4df5			; | | dw spi_device_id 
4df5			; | | dw spi_portbyte 
4df5			; | | dw stackstore 
4df5			; | | ; 50 
4df5			; | | if STORAGE_SE 
4df5			; | | dw storage_actl 
4df5			; | | dw storage_adata 
4df5			; | | else 
4df5			; | | dw 0 
4df5			; | | dw 0 
4df5			; | | endif 
4df5			; | | dw storage_append 
4df5			; | | if STORAGE_SE 
4df5			; | | dw storage_bctl 
4df5			; | | else 
4df5			; | | dw 0 
4df5			; | | endif 
4df5			; | | dw store_bank_active 
4df5			; | | dw store_filecache 
4df5			; | | dw store_longread 
4df5			; | | dw store_openaddr 
4df5			; | | dw store_openext 
4df5			; | | dw store_openmaxext 
4df5			; | | ; 60 
4df5			; | | dw store_page 
4df5			; | | dw store_readbuf 
4df5			; | | dw store_readcont 
4df5			; | | dw store_readptr 
4df5			; | | dw store_tmpext 
4df5			; | | dw store_tmpid 
4df5			; | | dw store_tmppageid 
4df5			; | | dw malloc 
4df5			; | | dw free 
4df5			; | | dw cin 
4df5			; | | ; 70 
4df5			; | | dw cin_wait 
4df5			; | | dw forth_push_numhl 
4df5			; | | dw forth_push_str 
4df5			; | | ``` 
4df5			 
4df5					if DEBUG_FORTH_WORDS_KEY 
4df5						DMARK "SYM" 
4df5 f5				push af  
4df6 3a 0a 4e			ld a, (.dmark)  
4df9 32 a6 fd			ld (debug_mark),a  
4dfc 3a 0b 4e			ld a, (.dmark+1)  
4dff 32 a7 fd			ld (debug_mark+1),a  
4e02 3a 0c 4e			ld a, (.dmark+2)  
4e05 32 a8 fd			ld (debug_mark+2),a  
4e08 18 03			jr .pastdmark  
4e0a ..			.dmark: db "SYM"  
4e0d f1			.pastdmark: pop af  
4e0e			endm  
# End of macro DMARK
4e0e						CALLMONITOR 
4e0e cd aa fd			call debug_vector  
4e11				endm  
# End of macro CALLMONITOR
4e11					endif 
4e11			 
4e11					FORTH_DSP_VALUEHL 
4e11 cd 34 22			call macro_dsp_valuehl 
4e14				endm 
# End of macro FORTH_DSP_VALUEHL
4e14			 
4e14 7d					ld a, l     
4e15			 
4e15			 
4e15					if DEBUG_FORTH_WORDS 
4e15						DMARK "SY1" 
4e15 f5				push af  
4e16 3a 2a 4e			ld a, (.dmark)  
4e19 32 a6 fd			ld (debug_mark),a  
4e1c 3a 2b 4e			ld a, (.dmark+1)  
4e1f 32 a7 fd			ld (debug_mark+1),a  
4e22 3a 2c 4e			ld a, (.dmark+2)  
4e25 32 a8 fd			ld (debug_mark+2),a  
4e28 18 03			jr .pastdmark  
4e2a ..			.dmark: db "SY1"  
4e2d f1			.pastdmark: pop af  
4e2e			endm  
# End of macro DMARK
4e2e						CALLMONITOR 
4e2e cd aa fd			call debug_vector  
4e31				endm  
# End of macro CALLMONITOR
4e31					endif 
4e31					 
4e31 f5					push af	 
4e32					FORTH_DSP_POP 
4e32 cd ec 22			call macro_forth_dsp_pop 
4e35				endm 
# End of macro FORTH_DSP_POP
4e35 f1					pop af 
4e36			 
4e36 cb 27				sla a  
4e38				 
4e38					 
4e38					if DEBUG_FORTH_WORDS 
4e38						DMARK "SY" 
4e38 f5				push af  
4e39 3a 4d 4e			ld a, (.dmark)  
4e3c 32 a6 fd			ld (debug_mark),a  
4e3f 3a 4e 4e			ld a, (.dmark+1)  
4e42 32 a7 fd			ld (debug_mark+1),a  
4e45 3a 4f 4e			ld a, (.dmark+2)  
4e48 32 a8 fd			ld (debug_mark+2),a  
4e4b 18 02			jr .pastdmark  
4e4d ..			.dmark: db "SY"  
4e4f f1			.pastdmark: pop af  
4e50			endm  
# End of macro DMARK
4e50						CALLMONITOR 
4e50 cd aa fd			call debug_vector  
4e53				endm  
# End of macro CALLMONITOR
4e53					endif 
4e53			 
4e53 21 62 4e				ld hl, sym_table 
4e56 cd db 0f				call addatohl 
4e59 cd 6c 23				call loadwordinhl 
4e5c cd 2f 20				call forth_push_numhl 
4e5f			 
4e5f			 
4e5f				       NEXTW 
4e5f c3 ea 23			jp macro_next 
4e62				endm 
# End of macro NEXTW
4e62			 
4e62			sym_table: 
4e62			 
4e62			; 0 
4e62 62 4e		dw sym_table 
4e64 ad fd		dw nmi_vector 
4e66 77 f9		dw cli_autodisplay 
4e68 29 f9		dw cli_data_sp 
4e6a 63 f6		dw cli_data_stack 
4e6c 2b f9		dw cli_loop_sp 
4e6e 65 f8		dw cli_loop_stack 
4e70 63 f9		dw cli_var_array 
4e72 00 fb		dw cursor_col 
4e74 fe fa		dw cursor_ptr 
4e76			; 10 
4e76 ff fa		dw cursor_row 
4e78 a6 fd		dw debug_mark 
4e7a ec fc		dw display_fb0 
4e7c 4b fc		dw display_fb1 
4e7e 09 fb		dw display_fb2 
4e80 aa fb		dw display_fb3 
4e82 07 fb		dw display_fb_active 
4e84 fb f1		dw execscratch 
4e86 99 f9		dw f_cursor_ptr 
4e88 b0 fd		dw hardware_word 
4e8a			;20 
4e8a 9d fd		dw input_at_cursor 
4e8c 9f fd		dw input_at_pos 
4e8e 9b fd		dw input_cur_flash 
4e90 9a fd		dw input_cur_onoff 
4e92 90 fd		dw input_cursor 
4e94 a0 fd		dw input_display_size 
4e96 95 fd		dw input_len 
4e98 a4 fd		dw input_ptr 
4e9a a1 fd		dw input_size 
4e9c a2 fd		dw input_start 
4e9e			; 30 
4e9e 08 10		dw input_str 
4ea0 9e fd		dw input_under_cursor 
4ea2 23 f4		dw os_cli_cmd 
4ea4 1f f4		dw os_cur_ptr 
4ea6 21 f4		dw os_current_i 
4ea8 fa f2		dw os_input 
4eaa 22 f5		dw os_last_cmd 
4eac f9 f3		dw os_last_new_uword 
4eae aa fd		dw debug_vector 
4eb0 de f0		dw os_view_hl 
4eb2			;40 
4eb2 01 f4		dw os_word_scratch 
4eb4 c3 00		dw portbctl 
4eb6 c1 00		dw portbdata 
4eb8 9e f9		dw spi_cartdev 
4eba 9d f9		dw spi_cartdev2 
4ebc 9f f9		dw spi_clktime 
4ebe 9b f9		dw spi_device 
4ec0 9a f9		dw spi_device_id 
4ec2 9c f9		dw spi_portbyte 
4ec4 e2 fa		dw stackstore 
4ec6			; 50 
4ec6			if STORAGE_SE 
4ec6 82 00		dw storage_actl 
4ec8 80 00		dw storage_adata 
4eca			else 
4eca			dw 0 
4eca			dw 0 
4eca			endif 
4eca 61 0b		dw storage_append 
4ecc			if STORAGE_SE 
4ecc 83 00		dw storage_bctl 
4ece			else 
4ece			dw 0 
4ece			endif 
4ece ce fa		dw store_bank_active 
4ed0 a2 f9		dw store_filecache 
4ed2 b0 f9		dw store_longread 
4ed4 a6 f9		dw store_openaddr 
4ed6 a5 f9		dw store_openext 
4ed8 a4 f9		dw store_openmaxext 
4eda			; 60 
4eda b5 f9		dw store_page 
4edc b1 f9		dw store_readbuf 
4ede a8 f9		dw store_readcont 
4ee0 b3 f9		dw store_readptr 
4ee2 a8 f9		dw store_tmpext 
4ee4 a9 f9		dw store_tmpid 
4ee6 a0 f9		dw store_tmppageid 
4ee8 b6 13		dw malloc 
4eea 80 14		dw free 
4eec c4 72		dw cin 
4eee			; 70 
4eee b3 72		dw cin_wait 
4ef0 2f 20		dw forth_push_numhl 
4ef2 9d 20		dw forth_push_str 
4ef4			 
4ef4			 
4ef4			.ENDCONST: 
4ef4			 
4ef4			; eof 
4ef4			 
4ef4			 
# End of file forth_words_const.asm
4ef4			 
4ef4			if STORAGE_SE 
4ef4			   	include "forth_words_storage.asm" 
4ef4			 
4ef4			; | ## Fixed Storage Words 
4ef4			 
4ef4			.RENAME: 
4ef4			  
4ef4				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
4ef4 3a				db WORD_SYS_CORE+38             
4ef5 ea 4f			dw .RECORD            
4ef7 07				db 6 + 1 
4ef8 .. 00			db "RENAME",0              
4eff				endm 
# End of macro CWHEAD
4eff			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
4eff			; | | > [!NOTE] 
4eff			; | | > Compatible with PicoSPINet  
4eff					if DEBUG_FORTH_WORDS_KEY 
4eff						DMARK "REN" 
4eff f5				push af  
4f00 3a 14 4f			ld a, (.dmark)  
4f03 32 a6 fd			ld (debug_mark),a  
4f06 3a 15 4f			ld a, (.dmark+1)  
4f09 32 a7 fd			ld (debug_mark+1),a  
4f0c 3a 16 4f			ld a, (.dmark+2)  
4f0f 32 a8 fd			ld (debug_mark+2),a  
4f12 18 03			jr .pastdmark  
4f14 ..			.dmark: db "REN"  
4f17 f1			.pastdmark: pop af  
4f18			endm  
# End of macro DMARK
4f18						CALLMONITOR 
4f18 cd aa fd			call debug_vector  
4f1b				endm  
# End of macro CALLMONITOR
4f1b					endif 
4f1b			 
4f1b			 
4f1b					; preserve some internal vars used by other file handing routines 
4f1b			 
4f1b 2a a6 f9				ld hl, (store_openaddr) 
4f1e e5					push hl 
4f1f 3a a8 f9				ld a, (store_readcont) 
4f22 f5					push af 
4f23			 
4f23					FORTH_DSP_VALUEHL 
4f23 cd 34 22			call macro_dsp_valuehl 
4f26				endm 
# End of macro FORTH_DSP_VALUEHL
4f26			 
4f26					; move ext and id around for the file header 
4f26			 
4f26 65					ld h, l 
4f27 2e 00				ld l, 0 
4f29			 
4f29 e5					push hl    ; id 
4f2a			 
4f2a					FORTH_DSP_POP 
4f2a cd ec 22			call macro_forth_dsp_pop 
4f2d				endm 
# End of macro FORTH_DSP_POP
4f2d			 
4f2d					; Locate the file header 
4f2d			 
4f2d e1					pop hl 
4f2e e5					push hl 
4f2f 11 b5 f9				ld de, store_page      ; get block zero of file 
4f32					if DEBUG_FORTH_WORDS 
4f32						DMARK "REr" 
4f32 f5				push af  
4f33 3a 47 4f			ld a, (.dmark)  
4f36 32 a6 fd			ld (debug_mark),a  
4f39 3a 48 4f			ld a, (.dmark+1)  
4f3c 32 a7 fd			ld (debug_mark+1),a  
4f3f 3a 49 4f			ld a, (.dmark+2)  
4f42 32 a8 fd			ld (debug_mark+2),a  
4f45 18 03			jr .pastdmark  
4f47 ..			.dmark: db "REr"  
4f4a f1			.pastdmark: pop af  
4f4b			endm  
# End of macro DMARK
4f4b						CALLMONITOR 
4f4b cd aa fd			call debug_vector  
4f4e				endm  
# End of macro CALLMONITOR
4f4e					endif 
4f4e cd ca 09				call storage_read 
4f51			 
4f51 cd 04 10			call ishlzero 
4f54 20 05			jr nz, .rnfound 
4f56			 
4f56				; file does not exist so indicate with 255 extents in use 
4f56			 
4f56 3e ff			ld a, 255 
4f58 e1				pop hl ; clear dup hl 
4f59 18 7b			jr .skiprneof 
4f5b			 
4f5b			 
4f5b			.rnfound: 
4f5b					; file found so rename 
4f5b			 
4f5b					FORTH_DSP_VALUEHL 
4f5b cd 34 22			call macro_dsp_valuehl 
4f5e				endm 
# End of macro FORTH_DSP_VALUEHL
4f5e			 
4f5e e5				push hl 
4f5f 3e 00			ld a, 0 
4f61 cd 4c 13			call strlent 
4f64 23				inc hl   ; cover zero term 
4f65 06 00			ld b,0 
4f67 4d				ld c,l 
4f68 e1				pop hl 
4f69 11 b8 f9				ld de, store_page + 3 
4f6c ed b0				ldir 
4f6e			 
4f6e 11 b5 f9				ld de, store_page 
4f71					if DEBUG_FORTH_WORDS 
4f71						DMARK "RER" 
4f71 f5				push af  
4f72 3a 86 4f			ld a, (.dmark)  
4f75 32 a6 fd			ld (debug_mark),a  
4f78 3a 87 4f			ld a, (.dmark+1)  
4f7b 32 a7 fd			ld (debug_mark+1),a  
4f7e 3a 88 4f			ld a, (.dmark+2)  
4f81 32 a8 fd			ld (debug_mark+2),a  
4f84 18 03			jr .pastdmark  
4f86 ..			.dmark: db "RER"  
4f89 f1			.pastdmark: pop af  
4f8a			endm  
# End of macro DMARK
4f8a						CALLMONITOR 
4f8a cd aa fd			call debug_vector  
4f8d				endm  
# End of macro CALLMONITOR
4f8d					endif 
4f8d			 
4f8d e1					pop hl    ; get orig file id and mangle it for find id 
4f8e 55					ld d, l 
4f8f 5c					ld e, h 
4f90			 
4f90 21 00 00				ld hl, 0 
4f93					if DEBUG_FORTH_WORDS 
4f93						DMARK "REf" 
4f93 f5				push af  
4f94 3a a8 4f			ld a, (.dmark)  
4f97 32 a6 fd			ld (debug_mark),a  
4f9a 3a a9 4f			ld a, (.dmark+1)  
4f9d 32 a7 fd			ld (debug_mark+1),a  
4fa0 3a aa 4f			ld a, (.dmark+2)  
4fa3 32 a8 fd			ld (debug_mark+2),a  
4fa6 18 03			jr .pastdmark  
4fa8 ..			.dmark: db "REf"  
4fab f1			.pastdmark: pop af  
4fac			endm  
# End of macro DMARK
4fac						CALLMONITOR 
4fac cd aa fd			call debug_vector  
4faf				endm  
# End of macro CALLMONITOR
4faf					endif 
4faf cd a4 07				call storage_findnextid 
4fb2 11 b5 f9				ld de, store_page 
4fb5					if DEBUG_FORTH_WORDS 
4fb5						DMARK "REw" 
4fb5 f5				push af  
4fb6 3a ca 4f			ld a, (.dmark)  
4fb9 32 a6 fd			ld (debug_mark),a  
4fbc 3a cb 4f			ld a, (.dmark+1)  
4fbf 32 a7 fd			ld (debug_mark+1),a  
4fc2 3a cc 4f			ld a, (.dmark+2)  
4fc5 32 a8 fd			ld (debug_mark+2),a  
4fc8 18 03			jr .pastdmark  
4fca ..			.dmark: db "REw"  
4fcd f1			.pastdmark: pop af  
4fce			endm  
# End of macro DMARK
4fce						CALLMONITOR 
4fce cd aa fd			call debug_vector  
4fd1				endm  
# End of macro CALLMONITOR
4fd1					endif 
4fd1 cd d6 04				call storage_write_block 
4fd4			 
4fd4 3e 00				ld a, 0 
4fd6			.skiprneof: 
4fd6					; drop file name 
4fd6					FORTH_DSP_POP 
4fd6 cd ec 22			call macro_forth_dsp_pop 
4fd9				endm 
# End of macro FORTH_DSP_POP
4fd9			 
4fd9 6f					ld l, a 
4fda 26 00				ld h, 0 
4fdc cd 2f 20				call forth_push_numhl 
4fdf			 
4fdf			 
4fdf f1					pop af 
4fe0 32 a8 f9				ld (store_readcont),a 
4fe3 e1					pop hl 
4fe4 22 a6 f9				ld (store_openaddr), hl 
4fe7						 
4fe7				NEXTW 
4fe7 c3 ea 23			jp macro_next 
4fea				endm 
# End of macro NEXTW
4fea			.RECORD: 
4fea			  
4fea				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
4fea 3a				db WORD_SYS_CORE+38             
4feb 8e 50			dw .BREAD            
4fed 07				db 6 + 1 
4fee .. 00			db "RECORD",0              
4ff5				endm 
# End of macro CWHEAD
4ff5			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
4ff5			; | | > [!NOTE] 
4ff5			; | | > Compatible with PicoSPINet  
4ff5			 
4ff5					if DEBUG_FORTH_WORDS_KEY 
4ff5						DMARK "REC" 
4ff5 f5				push af  
4ff6 3a 0a 50			ld a, (.dmark)  
4ff9 32 a6 fd			ld (debug_mark),a  
4ffc 3a 0b 50			ld a, (.dmark+1)  
4fff 32 a7 fd			ld (debug_mark+1),a  
5002 3a 0c 50			ld a, (.dmark+2)  
5005 32 a8 fd			ld (debug_mark+2),a  
5008 18 03			jr .pastdmark  
500a ..			.dmark: db "REC"  
500d f1			.pastdmark: pop af  
500e			endm  
# End of macro DMARK
500e						CALLMONITOR 
500e cd aa fd			call debug_vector  
5011				endm  
# End of macro CALLMONITOR
5011					endif 
5011			 
5011					FORTH_DSP_VALUEHL 
5011 cd 34 22			call macro_dsp_valuehl 
5014				endm 
# End of macro FORTH_DSP_VALUEHL
5014			 
5014 e5					push hl    ; id 
5015			 
5015					FORTH_DSP_POP 
5015 cd ec 22			call macro_forth_dsp_pop 
5018				endm 
# End of macro FORTH_DSP_POP
5018			 
5018					FORTH_DSP_VALUEHL 
5018 cd 34 22			call macro_dsp_valuehl 
501b				endm 
# End of macro FORTH_DSP_VALUEHL
501b			 
501b					FORTH_DSP_POP 
501b cd ec 22			call macro_forth_dsp_pop 
501e				endm 
# End of macro FORTH_DSP_POP
501e			 
501e d1					pop de     ; get file id 
501f			 
501f					; e = file id 
501f					; l = file extent 
501f			 
501f			 
501f					; construct request to access file extent 
501f			 
501f			;		ld a, e 
501f 63					ld h, e 
5020					 
5020					 
5020					 
5020			 
5020					; e has id 
5020			 
5020 11 b5 f9			ld de, store_page 
5023					if DEBUG_FORTH_WORDS 
5023						DMARK "REr" 
5023 f5				push af  
5024 3a 38 50			ld a, (.dmark)  
5027 32 a6 fd			ld (debug_mark),a  
502a 3a 39 50			ld a, (.dmark+1)  
502d 32 a7 fd			ld (debug_mark+1),a  
5030 3a 3a 50			ld a, (.dmark+2)  
5033 32 a8 fd			ld (debug_mark+2),a  
5036 18 03			jr .pastdmark  
5038 ..			.dmark: db "REr"  
503b f1			.pastdmark: pop af  
503c			endm  
# End of macro DMARK
503c						CALLMONITOR 
503c cd aa fd			call debug_vector  
503f				endm  
# End of macro CALLMONITOR
503f					endif 
503f cd ca 09				call storage_read 
5042 cd 04 10			call ishlzero 
5045 28 22			jr z, .recnotfound 
5047			 
5047			 
5047					if DEBUG_FORTH_WORDS 
5047						DMARK "REe" 
5047 f5				push af  
5048 3a 5c 50			ld a, (.dmark)  
504b 32 a6 fd			ld (debug_mark),a  
504e 3a 5d 50			ld a, (.dmark+1)  
5051 32 a7 fd			ld (debug_mark+1),a  
5054 3a 5e 50			ld a, (.dmark+2)  
5057 32 a8 fd			ld (debug_mark+2),a  
505a 18 03			jr .pastdmark  
505c ..			.dmark: db "REe"  
505f f1			.pastdmark: pop af  
5060			endm  
# End of macro DMARK
5060						CALLMONITOR 
5060 cd aa fd			call debug_vector  
5063				endm  
# End of macro CALLMONITOR
5063					endif 
5063 cd 9d 20			call forth_push_str 
5066			 
5066					NEXTW 
5066 c3 ea 23			jp macro_next 
5069				endm 
# End of macro NEXTW
5069			 
5069			.recnotfound: 
5069					if DEBUG_FORTH_WORDS 
5069						DMARK "REf" 
5069 f5				push af  
506a 3a 7e 50			ld a, (.dmark)  
506d 32 a6 fd			ld (debug_mark),a  
5070 3a 7f 50			ld a, (.dmark+1)  
5073 32 a7 fd			ld (debug_mark+1),a  
5076 3a 80 50			ld a, (.dmark+2)  
5079 32 a8 fd			ld (debug_mark+2),a  
507c 18 03			jr .pastdmark  
507e ..			.dmark: db "REf"  
5081 f1			.pastdmark: pop af  
5082			endm  
# End of macro DMARK
5082						CALLMONITOR 
5082 cd aa fd			call debug_vector  
5085				endm  
# End of macro CALLMONITOR
5085					endif 
5085 21 ff 00			ld hl, 255 
5088 cd 2f 20			call forth_push_numhl 
508b				NEXTW 
508b c3 ea 23			jp macro_next 
508e				endm 
# End of macro NEXTW
508e			 
508e			 
508e			.BREAD: 
508e			  
508e				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
508e 3a				db WORD_SYS_CORE+38             
508f 11 51			dw .BWRITE            
5091 06				db 5 + 1 
5092 .. 00			db "BREAD",0              
5098				endm 
# End of macro CWHEAD
5098			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
5098			; | | > [!NOTE] 
5098			; | | > Compatible with PicoSPINet  
5098				 
5098					if DEBUG_FORTH_WORDS_KEY 
5098						DMARK "BRD" 
5098 f5				push af  
5099 3a ad 50			ld a, (.dmark)  
509c 32 a6 fd			ld (debug_mark),a  
509f 3a ae 50			ld a, (.dmark+1)  
50a2 32 a7 fd			ld (debug_mark+1),a  
50a5 3a af 50			ld a, (.dmark+2)  
50a8 32 a8 fd			ld (debug_mark+2),a  
50ab 18 03			jr .pastdmark  
50ad ..			.dmark: db "BRD"  
50b0 f1			.pastdmark: pop af  
50b1			endm  
# End of macro DMARK
50b1						CALLMONITOR 
50b1 cd aa fd			call debug_vector  
50b4				endm  
# End of macro CALLMONITOR
50b4					endif 
50b4			 
50b4				FORTH_DSP_VALUEHL 
50b4 cd 34 22			call macro_dsp_valuehl 
50b7				endm 
# End of macro FORTH_DSP_VALUEHL
50b7			 
50b7				FORTH_DSP_POP 
50b7 cd ec 22			call macro_forth_dsp_pop 
50ba				endm 
# End of macro FORTH_DSP_POP
50ba			 
50ba				; calc block address 
50ba			 
50ba eb				ex de, hl 
50bb 3e 40			ld a, STORE_BLOCK_PHY 
50bd cd 5e 0f			call Mult16 
50c0			 
50c0			 
50c0 11 b5 f9			ld de, store_page 
50c3			 
50c3					if DEBUG_FORTH_WORDS 
50c3						DMARK "BR1" 
50c3 f5				push af  
50c4 3a d8 50			ld a, (.dmark)  
50c7 32 a6 fd			ld (debug_mark),a  
50ca 3a d9 50			ld a, (.dmark+1)  
50cd 32 a7 fd			ld (debug_mark+1),a  
50d0 3a da 50			ld a, (.dmark+2)  
50d3 32 a8 fd			ld (debug_mark+2),a  
50d6 18 03			jr .pastdmark  
50d8 ..			.dmark: db "BR1"  
50db f1			.pastdmark: pop af  
50dc			endm  
# End of macro DMARK
50dc						CALLMONITOR 
50dc cd aa fd			call debug_vector  
50df				endm  
# End of macro CALLMONITOR
50df					endif 
50df			 
50df cd 71 04			call storage_read_block 
50e2			 
50e2 cd 04 10			call ishlzero 
50e5 20 05			jr nz, .brfound 
50e7			 
50e7 cd 2f 20			call forth_push_numhl 
50ea 18 22			jr .brdone 
50ec			 
50ec			 
50ec			.brfound: 
50ec 21 b7 f9		        ld hl, store_page+2 
50ef			 
50ef					if DEBUG_FORTH_WORDS 
50ef						DMARK "BR2" 
50ef f5				push af  
50f0 3a 04 51			ld a, (.dmark)  
50f3 32 a6 fd			ld (debug_mark),a  
50f6 3a 05 51			ld a, (.dmark+1)  
50f9 32 a7 fd			ld (debug_mark+1),a  
50fc 3a 06 51			ld a, (.dmark+2)  
50ff 32 a8 fd			ld (debug_mark+2),a  
5102 18 03			jr .pastdmark  
5104 ..			.dmark: db "BR2"  
5107 f1			.pastdmark: pop af  
5108			endm  
# End of macro DMARK
5108						CALLMONITOR 
5108 cd aa fd			call debug_vector  
510b				endm  
# End of macro CALLMONITOR
510b					endif 
510b			 
510b cd 9d 20			call forth_push_str 
510e			 
510e			 
510e			.brdone: 
510e			 
510e					NEXTW 
510e c3 ea 23			jp macro_next 
5111				endm 
# End of macro NEXTW
5111			.BWRITE: 
5111				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
5111 3a				db WORD_SYS_CORE+38             
5112 a6 51			dw .BUPD            
5114 07				db 6 + 1 
5115 .. 00			db "BWRITE",0              
511c				endm 
# End of macro CWHEAD
511c			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
511c			; | | > [!NOTE] 
511c			; | | > Compatible with PicoSPINet  
511c			 
511c					if DEBUG_FORTH_WORDS_KEY 
511c						DMARK "BWR" 
511c f5				push af  
511d 3a 31 51			ld a, (.dmark)  
5120 32 a6 fd			ld (debug_mark),a  
5123 3a 32 51			ld a, (.dmark+1)  
5126 32 a7 fd			ld (debug_mark+1),a  
5129 3a 33 51			ld a, (.dmark+2)  
512c 32 a8 fd			ld (debug_mark+2),a  
512f 18 03			jr .pastdmark  
5131 ..			.dmark: db "BWR"  
5134 f1			.pastdmark: pop af  
5135			endm  
# End of macro DMARK
5135						CALLMONITOR 
5135 cd aa fd			call debug_vector  
5138				endm  
# End of macro CALLMONITOR
5138					endif 
5138			 
5138				FORTH_DSP_VALUEHL 
5138 cd 34 22			call macro_dsp_valuehl 
513b				endm 
# End of macro FORTH_DSP_VALUEHL
513b			 
513b				; calc block address 
513b			 
513b eb				ex de, hl 
513c 3e 40			ld a, STORE_BLOCK_PHY 
513e cd 5e 0f			call Mult16 
5141			 
5141 e5				push hl         ; address 
5142			 
5142				FORTH_DSP_POP 
5142 cd ec 22			call macro_forth_dsp_pop 
5145				endm 
# End of macro FORTH_DSP_POP
5145			 
5145				FORTH_DSP_VALUEHL 
5145 cd 34 22			call macro_dsp_valuehl 
5148				endm 
# End of macro FORTH_DSP_VALUEHL
5148			 
5148				FORTH_DSP_POP 
5148 cd ec 22			call macro_forth_dsp_pop 
514b				endm 
# End of macro FORTH_DSP_POP
514b			 
514b cd ad 0c			call storage_clear_page 
514e			 
514e				; copy string to store page 
514e			 
514e e5				push hl     ; save string address 
514f			 
514f 3e 00			ld a, 0 
5151 cd 4c 13			call strlent 
5154			 
5154 23				inc hl 
5155			 
5155 4d				ld c, l 
5156 06 00			ld b, 0 
5158			 
5158 e1				pop hl 
5159 11 b7 f9			ld de, store_page + 2 
515c					if DEBUG_FORTH_WORDS 
515c						DMARK "BW1" 
515c f5				push af  
515d 3a 71 51			ld a, (.dmark)  
5160 32 a6 fd			ld (debug_mark),a  
5163 3a 72 51			ld a, (.dmark+1)  
5166 32 a7 fd			ld (debug_mark+1),a  
5169 3a 73 51			ld a, (.dmark+2)  
516c 32 a8 fd			ld (debug_mark+2),a  
516f 18 03			jr .pastdmark  
5171 ..			.dmark: db "BW1"  
5174 f1			.pastdmark: pop af  
5175			endm  
# End of macro DMARK
5175						CALLMONITOR 
5175 cd aa fd			call debug_vector  
5178				endm  
# End of macro CALLMONITOR
5178					endif 
5178 ed b0			ldir 
517a			 
517a			 
517a				; poke the start of the block with flags to prevent high level file ops hitting the block 
517a			 
517a 21 ff ff			ld hl, $ffff 
517d			 
517d 22 b5 f9			ld (store_page), hl	 
5180				 
5180 e1				pop hl    ; get address 
5181 11 b5 f9			ld de, store_page 
5184			 
5184					if DEBUG_FORTH_WORDS 
5184						DMARK "BW2" 
5184 f5				push af  
5185 3a 99 51			ld a, (.dmark)  
5188 32 a6 fd			ld (debug_mark),a  
518b 3a 9a 51			ld a, (.dmark+1)  
518e 32 a7 fd			ld (debug_mark+1),a  
5191 3a 9b 51			ld a, (.dmark+2)  
5194 32 a8 fd			ld (debug_mark+2),a  
5197 18 03			jr .pastdmark  
5199 ..			.dmark: db "BW2"  
519c f1			.pastdmark: pop af  
519d			endm  
# End of macro DMARK
519d						CALLMONITOR 
519d cd aa fd			call debug_vector  
51a0				endm  
# End of macro CALLMONITOR
51a0					endif 
51a0			 
51a0 cd d6 04			call storage_write_block 
51a3			 
51a3					NEXTW 
51a3 c3 ea 23			jp macro_next 
51a6				endm 
# End of macro NEXTW
51a6			 
51a6			.BUPD: 
51a6				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
51a6 3a				db WORD_SYS_CORE+38             
51a7 fc 51			dw .BYID            
51a9 05				db 4 + 1 
51aa .. 00			db "BUPD",0              
51af				endm 
# End of macro CWHEAD
51af			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
51af			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
51af			; | | or completely different file system structure. 
51af			; | | > [!NOTE] 
51af			; | | > Compatible with PicoSPINet  
51af			 
51af					if DEBUG_FORTH_WORDS_KEY 
51af						DMARK "BUD" 
51af f5				push af  
51b0 3a c4 51			ld a, (.dmark)  
51b3 32 a6 fd			ld (debug_mark),a  
51b6 3a c5 51			ld a, (.dmark+1)  
51b9 32 a7 fd			ld (debug_mark+1),a  
51bc 3a c6 51			ld a, (.dmark+2)  
51bf 32 a8 fd			ld (debug_mark+2),a  
51c2 18 03			jr .pastdmark  
51c4 ..			.dmark: db "BUD"  
51c7 f1			.pastdmark: pop af  
51c8			endm  
# End of macro DMARK
51c8						CALLMONITOR 
51c8 cd aa fd			call debug_vector  
51cb				endm  
# End of macro CALLMONITOR
51cb					endif 
51cb			 
51cb				FORTH_DSP_VALUEHL 
51cb cd 34 22			call macro_dsp_valuehl 
51ce				endm 
# End of macro FORTH_DSP_VALUEHL
51ce			 
51ce				; calc block address 
51ce			 
51ce eb				ex de, hl 
51cf 3e 40			ld a, STORE_BLOCK_PHY 
51d1 cd 5e 0f			call Mult16 
51d4			 
51d4				FORTH_DSP_POP 
51d4 cd ec 22			call macro_forth_dsp_pop 
51d7				endm 
# End of macro FORTH_DSP_POP
51d7			 
51d7			 
51d7 11 b5 f9			ld de, store_page 
51da			 
51da					if DEBUG_FORTH_WORDS 
51da						DMARK "BUe" 
51da f5				push af  
51db 3a ef 51			ld a, (.dmark)  
51de 32 a6 fd			ld (debug_mark),a  
51e1 3a f0 51			ld a, (.dmark+1)  
51e4 32 a7 fd			ld (debug_mark+1),a  
51e7 3a f1 51			ld a, (.dmark+2)  
51ea 32 a8 fd			ld (debug_mark+2),a  
51ed 18 03			jr .pastdmark  
51ef ..			.dmark: db "BUe"  
51f2 f1			.pastdmark: pop af  
51f3			endm  
# End of macro DMARK
51f3						CALLMONITOR 
51f3 cd aa fd			call debug_vector  
51f6				endm  
# End of macro CALLMONITOR
51f6					endif 
51f6			 
51f6 cd d6 04			call storage_write_block 
51f9			 
51f9					NEXTW 
51f9 c3 ea 23			jp macro_next 
51fc				endm 
# End of macro NEXTW
51fc			 
51fc			.BYID: 
51fc			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
51fc			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
51fc			; 
51fc			;		 
51fc			;		if DEBUG_FORTH_WORDS_KEY 
51fc			;			DMARK "BYID" 
51fc			;			CALLMONITOR 
51fc			;		endif 
51fc			; 
51fc			;		; get direct address 
51fc			; 
51fc			;		FORTH_DSP_VALUEHL 
51fc			; 
51fc			;		FORTH_DSP_POP 
51fc			; 
51fc			;	; calc block address 
51fc			; 
51fc			;	ex de, hl 
51fc			;	ld a, STORE_BLOCK_PHY 
51fc			;	call Mult16 
51fc			;	;	do BREAD with number as param 
51fc			;	; push the file name	 
51fc			;	ld de, store_page 
51fc			;	call storage_read_block 
51fc			 ;       ld hl, store_page+2 
51fc			; 
51fc			; 
51fc			;		NEXTW 
51fc			;.BYNAME: 
51fc				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
51fc 3a				db WORD_SYS_CORE+38             
51fd 15 52			dw .DIR            
51ff 06				db 5 + 1 
5200 .. 00			db "GETID",0              
5206				endm 
# End of macro CWHEAD
5206			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
5206			; | | > [!NOTE] 
5206			; | | > Compatible with PicoSPINet  
5206			 
5206					; get pointer to file name to seek 
5206			 
5206					FORTH_DSP_VALUEHL 
5206 cd 34 22			call macro_dsp_valuehl 
5209				endm 
# End of macro FORTH_DSP_VALUEHL
5209			 
5209			 
5209 cd 98 03				call storage_getid  
520c			 
520c					FORTH_DSP_POP 
520c cd ec 22			call macro_forth_dsp_pop 
520f				endm 
# End of macro FORTH_DSP_POP
520f			 
520f cd 2f 20				call forth_push_numhl 
5212			 
5212					NEXTW 
5212 c3 ea 23			jp macro_next 
5215				endm 
# End of macro NEXTW
5215			; 
5215			.DIR: 
5215				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
5215 3a				db WORD_SYS_CORE+38             
5216 19 53			dw .SAVE            
5218 04				db 3 + 1 
5219 .. 00			db "DIR",0              
521d				endm 
# End of macro CWHEAD
521d			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
521d			; | | > [!NOTE] 
521d			; | | > Compatible with PicoSPINet  
521d			 
521d					if DEBUG_FORTH_WORDS_KEY 
521d						DMARK "DIR" 
521d f5				push af  
521e 3a 32 52			ld a, (.dmark)  
5221 32 a6 fd			ld (debug_mark),a  
5224 3a 33 52			ld a, (.dmark+1)  
5227 32 a7 fd			ld (debug_mark+1),a  
522a 3a 34 52			ld a, (.dmark+2)  
522d 32 a8 fd			ld (debug_mark+2),a  
5230 18 03			jr .pastdmark  
5232 ..			.dmark: db "DIR"  
5235 f1			.pastdmark: pop af  
5236			endm  
# End of macro DMARK
5236						CALLMONITOR 
5236 cd aa fd			call debug_vector  
5239				endm  
# End of macro CALLMONITOR
5239					endif 
5239 cd 22 05			call storage_get_block_0 
523c			 
523c 21 b5 f9			ld hl, store_page     ; get current id count 
523f 46				ld b, (hl) 
5240 0e 00			ld c, 0    ; count of files   
5242					if DEBUG_FORTH_WORDS 
5242						DMARK "DI1" 
5242 f5				push af  
5243 3a 57 52			ld a, (.dmark)  
5246 32 a6 fd			ld (debug_mark),a  
5249 3a 58 52			ld a, (.dmark+1)  
524c 32 a7 fd			ld (debug_mark+1),a  
524f 3a 59 52			ld a, (.dmark+2)  
5252 32 a8 fd			ld (debug_mark+2),a  
5255 18 03			jr .pastdmark  
5257 ..			.dmark: db "DI1"  
525a f1			.pastdmark: pop af  
525b			endm  
# End of macro DMARK
525b						CALLMONITOR 
525b cd aa fd			call debug_vector  
525e				endm  
# End of macro CALLMONITOR
525e					endif 
525e			 
525e				; check for empty drive 
525e			 
525e 3e 00			ld a, 0 
5260 b8				cp b 
5261 ca cf 52			jp z, .dirdone 
5264			 
5264				; for each of the current ids do a search for them and if found push to stack 
5264			 
5264 c5			.diritem:	push bc 
5265 21 40 00				ld hl, STORE_BLOCK_PHY 
5268 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
526a 58					ld e,b 
526b			 
526b			;		if DEBUG_FORTH_WORDS 
526b			;			DMARK "DI2" 
526b			;			CALLMONITOR 
526b			;		endif 
526b			 
526b cd a4 07				call storage_findnextid 
526e			 
526e			;		if DEBUG_FORTH_WORDS 
526e			;			DMARK "DI3" 
526e			;			CALLMONITOR 
526e			;		endif 
526e			 
526e					; if found hl will be non zero 
526e			 
526e cd 04 10				call ishlzero 
5271			;		ld a, l 
5271			;		add h 
5271			; 
5271			;		cp 0 
5271 28 59				jr z, .dirnotfound 
5273			 
5273					; increase count 
5273			 
5273 c1					pop bc	 
5274 0c					inc c 
5275 c5					push bc 
5276					 
5276			 
5276					; get file header and push the file name 
5276			 
5276 11 b5 f9				ld de, store_page 
5279 cd 71 04				call storage_read_block 
527c			 
527c					; push file id to stack 
527c				 
527c 3a b5 f9				ld a, (store_page) 
527f 26 00				ld h, 0 
5281 6f					ld l, a 
5282 cd 2f 20				call forth_push_numhl 
5285			 
5285					; push extent count to stack  
5285				 
5285 3a b7 f9				ld a, (store_page+2) 
5288 26 00				ld h, 0 
528a 6f					ld l, a 
528b cd 2f 20				call forth_push_numhl 
528e			 
528e					; push file name 
528e			 
528e 21 b8 f9				ld hl, store_page+3 
5291					if DEBUG_FORTH_WORDS 
5291						DMARK "DI5" 
5291 f5				push af  
5292 3a a6 52			ld a, (.dmark)  
5295 32 a6 fd			ld (debug_mark),a  
5298 3a a7 52			ld a, (.dmark+1)  
529b 32 a7 fd			ld (debug_mark+1),a  
529e 3a a8 52			ld a, (.dmark+2)  
52a1 32 a8 fd			ld (debug_mark+2),a  
52a4 18 03			jr .pastdmark  
52a6 ..			.dmark: db "DI5"  
52a9 f1			.pastdmark: pop af  
52aa			endm  
# End of macro DMARK
52aa						CALLMONITOR 
52aa cd aa fd			call debug_vector  
52ad				endm  
# End of macro CALLMONITOR
52ad					endif 
52ad cd 9d 20				call forth_push_str 
52b0					if DEBUG_FORTH_WORDS 
52b0						DMARK "DI6" 
52b0 f5				push af  
52b1 3a c5 52			ld a, (.dmark)  
52b4 32 a6 fd			ld (debug_mark),a  
52b7 3a c6 52			ld a, (.dmark+1)  
52ba 32 a7 fd			ld (debug_mark+1),a  
52bd 3a c7 52			ld a, (.dmark+2)  
52c0 32 a8 fd			ld (debug_mark+2),a  
52c3 18 03			jr .pastdmark  
52c5 ..			.dmark: db "DI6"  
52c8 f1			.pastdmark: pop af  
52c9			endm  
# End of macro DMARK
52c9						CALLMONITOR 
52c9 cd aa fd			call debug_vector  
52cc				endm  
# End of macro CALLMONITOR
52cc					endif 
52cc			.dirnotfound: 
52cc c1					pop bc     
52cd 10 95				djnz .diritem 
52cf				 
52cf			.dirdone:	 
52cf					if DEBUG_FORTH_WORDS 
52cf						DMARK "DI7" 
52cf f5				push af  
52d0 3a e4 52			ld a, (.dmark)  
52d3 32 a6 fd			ld (debug_mark),a  
52d6 3a e5 52			ld a, (.dmark+1)  
52d9 32 a7 fd			ld (debug_mark+1),a  
52dc 3a e6 52			ld a, (.dmark+2)  
52df 32 a8 fd			ld (debug_mark+2),a  
52e2 18 03			jr .pastdmark  
52e4 ..			.dmark: db "DI7"  
52e7 f1			.pastdmark: pop af  
52e8			endm  
# End of macro DMARK
52e8						CALLMONITOR 
52e8 cd aa fd			call debug_vector  
52eb				endm  
# End of macro CALLMONITOR
52eb					endif 
52eb			 
52eb					; push a count of the dir items found 
52eb			 
52eb 26 00				ld h, 0 
52ed 69					ld l, c 
52ee cd 2f 20				call forth_push_numhl 
52f1			 
52f1					; push the bank label 
52f1			 
52f1 cd 22 05				call storage_get_block_0 
52f4			 
52f4				 
52f4 21 b8 f9		 		ld hl, store_page+3 
52f7			 
52f7					if DEBUG_FORTH_WORDS 
52f7						DMARK "DI8" 
52f7 f5				push af  
52f8 3a 0c 53			ld a, (.dmark)  
52fb 32 a6 fd			ld (debug_mark),a  
52fe 3a 0d 53			ld a, (.dmark+1)  
5301 32 a7 fd			ld (debug_mark+1),a  
5304 3a 0e 53			ld a, (.dmark+2)  
5307 32 a8 fd			ld (debug_mark+2),a  
530a 18 03			jr .pastdmark  
530c ..			.dmark: db "DI8"  
530f f1			.pastdmark: pop af  
5310			endm  
# End of macro DMARK
5310						CALLMONITOR 
5310 cd aa fd			call debug_vector  
5313				endm  
# End of macro CALLMONITOR
5313					endif 
5313 cd 9d 20				call forth_push_str 
5316			 
5316			 
5316				 
5316					NEXTW 
5316 c3 ea 23			jp macro_next 
5319				endm 
# End of macro NEXTW
5319			.SAVE: 
5319			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
5319			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
5319			;		NEXTW 
5319			;.LOAD: 
5319			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
5319			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
5319			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
5319			;; > > The LOAD command can not be used in any user words or compound lines. 
5319			; 
5319			;		; store_openext use it. If zero it is EOF 
5319			; 
5319			;		; read block from current stream id 
5319			;		; if the block does not contain zero term keep reading blocks until zero found 
5319			;		; push the block to stack 
5319			;		; save the block id to stream 
5319			; 
5319			; 
5319			;		FORTH_DSP_VALUEHL 
5319			; 
5319			;;		push hl 
5319			; 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LOA" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;		FORTH_DSP_POP 
5319			; 
5319			;;		pop hl 
5319			; 
5319			;		ld h, l 
5319			;		ld l, 0 
5319			; 
5319			;		push hl     ; stack holds current file id and extent to work with 
5319			; 
5319			; 
5319			;		ld de, store_page      ; get block zero of file 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LO0" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;		call storage_read 
5319			; 
5319			;		ld a, (store_page+2)    ; max extents for this file 
5319			;		ld  (store_openmaxext),a   ; get our limit 
5319			; 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LOE" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			; 
5319			;; TODO dont know why max extents are not present 
5319			;;		cp 0 
5319			;;		jp z, .loadeof     ; dont read past eof 
5319			; 
5319			;;		ld a, 1   ; start from the head of the file 
5319			; 
5319			;.loadline:	pop hl 
5319			;		inc hl 
5319			;		ld  a, (store_openmaxext)   ; get our limit 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LOx" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;		inc a 
5319			;		cp l 
5319			;		jp z, .loadeof 
5319			;		push hl    ; save current extent 
5319			; 
5319			;		ld de, store_page 
5319			; 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LO1" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;		call storage_read 
5319			; 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LO2" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;	call ishlzero 
5319			;	ld a, l 
5319			;	add h 
5319			;	cp 0 
5319			;	jr z, .loadeof 
5319			; 
5319			;	; not eof so hl should point to data to exec 
5319			; 
5319			;	; will need to add the FORTH_END_BUFFER flag 
5319			 ; 
5319			;	ld hl, store_page+2 
5319			;	ld bc, 255 
5319			;	ld a, 0 
5319			;	cpir 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LOt" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;	dec hl 
5319			;	ld a, ' ' 
5319			;	ld (hl), a 
5319			;	inc hl 
5319			;	ld (hl), a 
5319			;	inc hl 
5319			;	ld (hl), a 
5319			;	inc hl 
5319			;	ld a, FORTH_END_BUFFER 
5319			;	ld (hl), a 
5319			; 
5319			;	; TODO handle more than a single block read 
5319			; 
5319			; 
5319			;	ld hl, store_page+2 
5319			; 
5319			;	ld (os_tok_ptr), hl 
5319			; 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LO3" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			; 
5319			;	call forthparse 
5319			;	call forthexec 
5319			;	call forthexec_cleanup 
5319			; 
5319			;	; go to next extent 
5319			; 
5319			;	; get next block  or mark as eof 
5319			;	jp .loadline 
5319			; 
5319			; 
5319			; 
5319			;	       NEXTW 
5319			;.loadeof:	ld a, 0 
5319			;		ld (store_openext), a 
5319			; 
5319			;	if DEBUG_STORESE 
5319			;		DMARK "LOF" 
5319			;		CALLMONITOR 
5319			;	endif 
5319			;		ret 
5319			;		;NEXTW 
5319			;.BSAVE:   
5319			; 
5319			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
5319			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
5319			;		NEXTW 
5319			;.BLOAD: 
5319			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
5319			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
5319			;		NEXTW 
5319			;;;; counter gap 
5319			 
5319			 
5319			.SEO: 
5319				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
5319 64				db WORD_SYS_CORE+80             
531a 38 53			dw .SEI            
531c 04				db 3 + 1 
531d .. 00			db "SEO",0              
5321				endm 
# End of macro CWHEAD
5321			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
5321			 
5321					; get port 
5321			 
5321					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5321 cd 34 22			call macro_dsp_valuehl 
5324				endm 
# End of macro FORTH_DSP_VALUEHL
5324			 
5324 e5					push hl    ; u2 - byte 
5325			 
5325					; destroy value TOS 
5325			 
5325					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5325 cd ec 22			call macro_forth_dsp_pop 
5328				endm 
# End of macro FORTH_DSP_POP
5328			 
5328					; get byte to send 
5328			 
5328					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5328 cd 34 22			call macro_dsp_valuehl 
532b				endm 
# End of macro FORTH_DSP_VALUEHL
532b			 
532b e5					push hl    ; u1 - addr 
532c			 
532c					; destroy value TOS 
532c			 
532c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
532c cd ec 22			call macro_forth_dsp_pop 
532f				endm 
# End of macro FORTH_DSP_POP
532f			 
532f					; one value on hl get other one back 
532f			 
532f d1					pop de   ; u1 - byte 
5330			 
5330 e1					pop hl   ; u2 - addr 
5331			 
5331					; TODO Send SPI byte 
5331			 
5331			 
5331 7b					ld a, e 
5332 cd 76 02				call se_writebyte 
5335			 
5335					 
5335			 
5335					NEXTW 
5335 c3 ea 23			jp macro_next 
5338				endm 
# End of macro NEXTW
5338			 
5338			.SEI: 
5338				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
5338 65				db WORD_SYS_CORE+81             
5339 52 53			dw .SFREE            
533b 04				db 3 + 1 
533c .. 00			db "SEI",0              
5340				endm 
# End of macro CWHEAD
5340			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
5340			 
5340					; get port 
5340			 
5340					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5340 cd 34 22			call macro_dsp_valuehl 
5343				endm 
# End of macro FORTH_DSP_VALUEHL
5343			 
5343			;		push hl 
5343			 
5343					; destroy value TOS 
5343			 
5343					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5343 cd ec 22			call macro_forth_dsp_pop 
5346				endm 
# End of macro FORTH_DSP_POP
5346			 
5346					; one value on hl get other one back 
5346			 
5346			;		pop hl 
5346			 
5346			 
5346					; TODO Get SPI byte 
5346			 
5346 cd 18 03				call se_readbyte 
5349			 
5349 26 00				ld h, 0 
534b 6f					ld l, a 
534c cd 2f 20				call forth_push_numhl 
534f			 
534f					NEXTW 
534f c3 ea 23			jp macro_next 
5352				endm 
# End of macro NEXTW
5352			 
5352			.SFREE: 
5352				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
5352 67				db WORD_SYS_CORE+83             
5353 81 53			dw .SIZE            
5355 06				db 5 + 1 
5356 .. 00			db "FFREE",0              
535c				endm 
# End of macro CWHEAD
535c			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
535c			; | | > [!NOTE] 
535c			; | | > Compatible with PicoSPINet  
535c					if DEBUG_FORTH_WORDS_KEY 
535c						DMARK "FFR" 
535c f5				push af  
535d 3a 71 53			ld a, (.dmark)  
5360 32 a6 fd			ld (debug_mark),a  
5363 3a 72 53			ld a, (.dmark+1)  
5366 32 a7 fd			ld (debug_mark+1),a  
5369 3a 73 53			ld a, (.dmark+2)  
536c 32 a8 fd			ld (debug_mark+2),a  
536f 18 03			jr .pastdmark  
5371 ..			.dmark: db "FFR"  
5374 f1			.pastdmark: pop af  
5375			endm  
# End of macro DMARK
5375						CALLMONITOR 
5375 cd aa fd			call debug_vector  
5378				endm  
# End of macro CALLMONITOR
5378					endif 
5378			 
5378 cd 3e 08				call storage_freeblocks 
537b			 
537b cd 2f 20				call forth_push_numhl 
537e			 
537e				       NEXTW 
537e c3 ea 23			jp macro_next 
5381				endm 
# End of macro NEXTW
5381			.SIZE: 
5381				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
5381 67				db WORD_SYS_CORE+83             
5382 b5 53			dw .CREATE            
5384 05				db 4 + 1 
5385 .. 00			db "SIZE",0              
538a				endm 
# End of macro CWHEAD
538a			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
538a			; | | > [!NOTE] 
538a			; | | > Compatible with PicoSPINet  
538a					if DEBUG_FORTH_WORDS_KEY 
538a						DMARK "SIZ" 
538a f5				push af  
538b 3a 9f 53			ld a, (.dmark)  
538e 32 a6 fd			ld (debug_mark),a  
5391 3a a0 53			ld a, (.dmark+1)  
5394 32 a7 fd			ld (debug_mark+1),a  
5397 3a a1 53			ld a, (.dmark+2)  
539a 32 a8 fd			ld (debug_mark+2),a  
539d 18 03			jr .pastdmark  
539f ..			.dmark: db "SIZ"  
53a2 f1			.pastdmark: pop af  
53a3			endm  
# End of macro DMARK
53a3						CALLMONITOR 
53a3 cd aa fd			call debug_vector  
53a6				endm  
# End of macro CALLMONITOR
53a6					endif 
53a6			 
53a6					FORTH_DSP_VALUEHL 
53a6 cd 34 22			call macro_dsp_valuehl 
53a9				endm 
# End of macro FORTH_DSP_VALUEHL
53a9			;		push hl 
53a9					FORTH_DSP_POP 
53a9 cd ec 22			call macro_forth_dsp_pop 
53ac				endm 
# End of macro FORTH_DSP_POP
53ac			;		pop hl 
53ac cd a0 04				call storage_file_size 
53af			 
53af cd 2f 20				call forth_push_numhl 
53b2			  
53b2			 
53b2				       NEXTW 
53b2 c3 ea 23			jp macro_next 
53b5				endm 
# End of macro NEXTW
53b5			 
53b5			.CREATE: 
53b5				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
53b5 68				db WORD_SYS_CORE+84             
53b6 23 54			dw .APPEND            
53b8 07				db 6 + 1 
53b9 .. 00			db "CREATE",0              
53c0				endm 
# End of macro CWHEAD
53c0			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
53c0			; | | e.g.  
53c0			; | | TestProgram CREATE 
53c0			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
53c0			; | |  
53c0			; | | Max file IDs are 255. 
53c0			; | |  
53c0			; | | > [!NOTE] 
53c0			; | | > Compatible with PicoSPINet  
53c0					 
53c0					if DEBUG_FORTH_WORDS_KEY 
53c0						DMARK "CRT" 
53c0 f5				push af  
53c1 3a d5 53			ld a, (.dmark)  
53c4 32 a6 fd			ld (debug_mark),a  
53c7 3a d6 53			ld a, (.dmark+1)  
53ca 32 a7 fd			ld (debug_mark+1),a  
53cd 3a d7 53			ld a, (.dmark+2)  
53d0 32 a8 fd			ld (debug_mark+2),a  
53d3 18 03			jr .pastdmark  
53d5 ..			.dmark: db "CRT"  
53d8 f1			.pastdmark: pop af  
53d9			endm  
# End of macro DMARK
53d9						CALLMONITOR 
53d9 cd aa fd			call debug_vector  
53dc				endm  
# End of macro CALLMONITOR
53dc					endif 
53dc			;		call storage_get_block_0 
53dc			 
53dc					; TODO pop hl 
53dc			 
53dc					;v5 FORTH_DSP_VALUE 
53dc					FORTH_DSP_VALUE 
53dc cd 1d 22			call macro_forth_dsp_value 
53df				endm 
# End of macro FORTH_DSP_VALUE
53df			 
53df				if DEBUG_STORESE 
53df					DMARK "CR1" 
53df f5				push af  
53e0 3a f4 53			ld a, (.dmark)  
53e3 32 a6 fd			ld (debug_mark),a  
53e6 3a f5 53			ld a, (.dmark+1)  
53e9 32 a7 fd			ld (debug_mark+1),a  
53ec 3a f6 53			ld a, (.dmark+2)  
53ef 32 a8 fd			ld (debug_mark+2),a  
53f2 18 03			jr .pastdmark  
53f4 ..			.dmark: db "CR1"  
53f7 f1			.pastdmark: pop af  
53f8			endm  
# End of macro DMARK
53f8					CALLMONITOR 
53f8 cd aa fd			call debug_vector  
53fb				endm  
# End of macro CALLMONITOR
53fb				endif 
53fb			;		push hl 
53fb			;		FORTH_DSP_POP 
53fb			;		pop hl 
53fb			 
53fb			;		inc hl   ; move past the type marker 
53fb			 
53fb cd 74 08				call storage_create 
53fe			 
53fe				if DEBUG_STORESE 
53fe					DMARK "CT1" 
53fe f5				push af  
53ff 3a 13 54			ld a, (.dmark)  
5402 32 a6 fd			ld (debug_mark),a  
5405 3a 14 54			ld a, (.dmark+1)  
5408 32 a7 fd			ld (debug_mark+1),a  
540b 3a 15 54			ld a, (.dmark+2)  
540e 32 a8 fd			ld (debug_mark+2),a  
5411 18 03			jr .pastdmark  
5413 ..			.dmark: db "CT1"  
5416 f1			.pastdmark: pop af  
5417			endm  
# End of macro DMARK
5417					CALLMONITOR 
5417 cd aa fd			call debug_vector  
541a				endm  
# End of macro CALLMONITOR
541a				endif 
541a			;		push hl 
541a					FORTH_DSP_POP 
541a cd ec 22			call macro_forth_dsp_pop 
541d				endm 
# End of macro FORTH_DSP_POP
541d			;		pop hl 
541d					; push file id to stack 
541d cd 2f 20				call forth_push_numhl 
5420			 
5420			 
5420			 
5420				       NEXTW 
5420 c3 ea 23			jp macro_next 
5423				endm 
# End of macro NEXTW
5423			 
5423			.APPEND: 
5423				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
5423 69				db WORD_SYS_CORE+85             
5424 b4 54			dw .SDEL            
5426 07				db 6 + 1 
5427 .. 00			db "APPEND",0              
542e				endm 
# End of macro CWHEAD
542e			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
542e			; | | e.g. 
542e			; | | Test CREATE      -> $01 
542e			; | | "A string to add to file" $01 APPEND 
542e			; | |  
542e			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
542e			; | | > [!NOTE] 
542e			; | | > Compatible with PicoSPINet  
542e					if DEBUG_FORTH_WORDS_KEY 
542e						DMARK "APP" 
542e f5				push af  
542f 3a 43 54			ld a, (.dmark)  
5432 32 a6 fd			ld (debug_mark),a  
5435 3a 44 54			ld a, (.dmark+1)  
5438 32 a7 fd			ld (debug_mark+1),a  
543b 3a 45 54			ld a, (.dmark+2)  
543e 32 a8 fd			ld (debug_mark+2),a  
5441 18 03			jr .pastdmark  
5443 ..			.dmark: db "APP"  
5446 f1			.pastdmark: pop af  
5447			endm  
# End of macro DMARK
5447						CALLMONITOR 
5447 cd aa fd			call debug_vector  
544a				endm  
# End of macro CALLMONITOR
544a					endif 
544a			 
544a					FORTH_DSP_VALUEHL 
544a cd 34 22			call macro_dsp_valuehl 
544d				endm 
# End of macro FORTH_DSP_VALUEHL
544d e5					push hl 	; save file id 
544e			 
544e				if DEBUG_STORESE 
544e					DMARK "AP1" 
544e f5				push af  
544f 3a 63 54			ld a, (.dmark)  
5452 32 a6 fd			ld (debug_mark),a  
5455 3a 64 54			ld a, (.dmark+1)  
5458 32 a7 fd			ld (debug_mark+1),a  
545b 3a 65 54			ld a, (.dmark+2)  
545e 32 a8 fd			ld (debug_mark+2),a  
5461 18 03			jr .pastdmark  
5463 ..			.dmark: db "AP1"  
5466 f1			.pastdmark: pop af  
5467			endm  
# End of macro DMARK
5467					CALLMONITOR 
5467 cd aa fd			call debug_vector  
546a				endm  
# End of macro CALLMONITOR
546a				endif 
546a					FORTH_DSP_POP 
546a cd ec 22			call macro_forth_dsp_pop 
546d				endm 
# End of macro FORTH_DSP_POP
546d			 
546d					FORTH_DSP_VALUEHL 
546d cd 34 22			call macro_dsp_valuehl 
5470				endm 
# End of macro FORTH_DSP_VALUEHL
5470					;v5 FORTH_DSP_VALUE 
5470 e5					push hl 	; save ptr to string to save 
5471			 
5471				if DEBUG_STORESE 
5471					DMARK "AP1" 
5471 f5				push af  
5472 3a 86 54			ld a, (.dmark)  
5475 32 a6 fd			ld (debug_mark),a  
5478 3a 87 54			ld a, (.dmark+1)  
547b 32 a7 fd			ld (debug_mark+1),a  
547e 3a 88 54			ld a, (.dmark+2)  
5481 32 a8 fd			ld (debug_mark+2),a  
5484 18 03			jr .pastdmark  
5486 ..			.dmark: db "AP1"  
5489 f1			.pastdmark: pop af  
548a			endm  
# End of macro DMARK
548a					CALLMONITOR 
548a cd aa fd			call debug_vector  
548d				endm  
# End of macro CALLMONITOR
548d				endif 
548d					FORTH_DSP_POP 
548d cd ec 22			call macro_forth_dsp_pop 
5490				endm 
# End of macro FORTH_DSP_POP
5490			 
5490 d1					pop de 
5491 e1					pop hl 
5492				if DEBUG_STORESE 
5492					DMARK "AP2" 
5492 f5				push af  
5493 3a a7 54			ld a, (.dmark)  
5496 32 a6 fd			ld (debug_mark),a  
5499 3a a8 54			ld a, (.dmark+1)  
549c 32 a7 fd			ld (debug_mark+1),a  
549f 3a a9 54			ld a, (.dmark+2)  
54a2 32 a8 fd			ld (debug_mark+2),a  
54a5 18 03			jr .pastdmark  
54a7 ..			.dmark: db "AP2"  
54aa f1			.pastdmark: pop af  
54ab			endm  
# End of macro DMARK
54ab					CALLMONITOR 
54ab cd aa fd			call debug_vector  
54ae				endm  
# End of macro CALLMONITOR
54ae				endif 
54ae					;inc de ; skip var type indicator 
54ae			 
54ae					; TODO how to append numerics???? 
54ae			 
54ae cd 61 0b				call storage_append		 
54b1			 
54b1				       NEXTW 
54b1 c3 ea 23			jp macro_next 
54b4				endm 
# End of macro NEXTW
54b4			.SDEL: 
54b4				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
54b4 6a				db WORD_SYS_CORE+86             
54b5 00 55			dw .OPEN            
54b7 05				db 4 + 1 
54b8 .. 00			db "ERA",0              
54bc				endm 
# End of macro CWHEAD
54bc			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
54bc			; | | > [!NOTE] 
54bc			; | | > Compatible with PicoSPINet  
54bc					FORTH_DSP_VALUEHL 
54bc cd 34 22			call macro_dsp_valuehl 
54bf				endm 
# End of macro FORTH_DSP_VALUEHL
54bf			;		push hl 	; save file id 
54bf			 
54bf					if DEBUG_FORTH_WORDS_KEY 
54bf						DMARK "ERA" 
54bf f5				push af  
54c0 3a d4 54			ld a, (.dmark)  
54c3 32 a6 fd			ld (debug_mark),a  
54c6 3a d5 54			ld a, (.dmark+1)  
54c9 32 a7 fd			ld (debug_mark+1),a  
54cc 3a d6 54			ld a, (.dmark+2)  
54cf 32 a8 fd			ld (debug_mark+2),a  
54d2 18 03			jr .pastdmark  
54d4 ..			.dmark: db "ERA"  
54d7 f1			.pastdmark: pop af  
54d8			endm  
# End of macro DMARK
54d8						CALLMONITOR 
54d8 cd aa fd			call debug_vector  
54db				endm  
# End of macro CALLMONITOR
54db					endif 
54db				if DEBUG_STORESE 
54db					DMARK "ER1" 
54db f5				push af  
54dc 3a f0 54			ld a, (.dmark)  
54df 32 a6 fd			ld (debug_mark),a  
54e2 3a f1 54			ld a, (.dmark+1)  
54e5 32 a7 fd			ld (debug_mark+1),a  
54e8 3a f2 54			ld a, (.dmark+2)  
54eb 32 a8 fd			ld (debug_mark+2),a  
54ee 18 03			jr .pastdmark  
54f0 ..			.dmark: db "ER1"  
54f3 f1			.pastdmark: pop af  
54f4			endm  
# End of macro DMARK
54f4					CALLMONITOR 
54f4 cd aa fd			call debug_vector  
54f7				endm  
# End of macro CALLMONITOR
54f7				endif 
54f7					FORTH_DSP_POP 
54f7 cd ec 22			call macro_forth_dsp_pop 
54fa				endm 
# End of macro FORTH_DSP_POP
54fa			 
54fa			;		pop hl 
54fa			 
54fa cd b3 06				call storage_erase 
54fd				       NEXTW 
54fd c3 ea 23			jp macro_next 
5500				endm 
# End of macro NEXTW
5500			 
5500			.OPEN: 
5500				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
5500 6b				db WORD_SYS_CORE+87             
5501 94 55			dw .READ            
5503 05				db 4 + 1 
5504 .. 00			db "OPEN",0              
5509				endm 
# End of macro CWHEAD
5509			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
5509			; | | e.g. 
5509			; | | $01 OPEN $01 DO $01 READ . LOOP 
5509			; | | 
5509			; | | Will return with 255 blocks if the file does not exist 
5509			; | | > [!NOTE] 
5509			; | | > Compatible with PicoSPINet  
5509			 
5509					if DEBUG_FORTH_WORDS_KEY 
5509						DMARK "OPN" 
5509 f5				push af  
550a 3a 1e 55			ld a, (.dmark)  
550d 32 a6 fd			ld (debug_mark),a  
5510 3a 1f 55			ld a, (.dmark+1)  
5513 32 a7 fd			ld (debug_mark+1),a  
5516 3a 20 55			ld a, (.dmark+2)  
5519 32 a8 fd			ld (debug_mark+2),a  
551c 18 03			jr .pastdmark  
551e ..			.dmark: db "OPN"  
5521 f1			.pastdmark: pop af  
5522			endm  
# End of macro DMARK
5522						CALLMONITOR 
5522 cd aa fd			call debug_vector  
5525				endm  
# End of macro CALLMONITOR
5525					endif 
5525					; TODO handle multiple file opens 
5525			 
5525 3e 01			       	ld a, 1 
5527 32 a5 f9				ld (store_openext), a 
552a			 
552a					; get max extents for this file 
552a				 
552a								 
552a					FORTH_DSP_VALUEHL 
552a cd 34 22			call macro_dsp_valuehl 
552d				endm 
# End of macro FORTH_DSP_VALUEHL
552d			 
552d 65					ld h, l 
552e 2e 00				ld l, 0 
5530			 
5530					; store file id 
5530			 
5530 7c					ld a, h 
5531 32 a2 f9				ld (store_filecache), a 
5534			 
5534				if DEBUG_STORESE 
5534					DMARK "OPN" 
5534 f5				push af  
5535 3a 49 55			ld a, (.dmark)  
5538 32 a6 fd			ld (debug_mark),a  
553b 3a 4a 55			ld a, (.dmark+1)  
553e 32 a7 fd			ld (debug_mark+1),a  
5541 3a 4b 55			ld a, (.dmark+2)  
5544 32 a8 fd			ld (debug_mark+2),a  
5547 18 03			jr .pastdmark  
5549 ..			.dmark: db "OPN"  
554c f1			.pastdmark: pop af  
554d			endm  
# End of macro DMARK
554d					CALLMONITOR 
554d cd aa fd			call debug_vector  
5550				endm  
# End of macro CALLMONITOR
5550				endif 
5550			;		push hl 
5550					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
5550 cd ec 22			call macro_forth_dsp_pop 
5553				endm 
# End of macro FORTH_DSP_POP
5553			;		pop hl 
5553						 
5553 11 b5 f9				ld de, store_page      ; get block zero of file 
5556 cd ca 09				call storage_read 
5559 cd 04 10			call ishlzero 
555c 20 04			jr nz, .opfound 
555e			 
555e				; file does not exist so indicate with 255 extents in use 
555e			 
555e 3e ff			ld a, 255 
5560 18 29			jr .skipopeneof 
5562			 
5562			 
5562			.opfound: 
5562			 
5562			 
5562 3a b7 f9				ld a, (store_page+2)    ; max extents for this file 
5565 32 a4 f9				ld  (store_openmaxext), a   ; get our limit and push 
5568					 
5568				if DEBUG_STORESE 
5568					DMARK "OPx" 
5568 f5				push af  
5569 3a 7d 55			ld a, (.dmark)  
556c 32 a6 fd			ld (debug_mark),a  
556f 3a 7e 55			ld a, (.dmark+1)  
5572 32 a7 fd			ld (debug_mark+1),a  
5575 3a 7f 55			ld a, (.dmark+2)  
5578 32 a8 fd			ld (debug_mark+2),a  
557b 18 03			jr .pastdmark  
557d ..			.dmark: db "OPx"  
5580 f1			.pastdmark: pop af  
5581			endm  
# End of macro DMARK
5581					CALLMONITOR 
5581 cd aa fd			call debug_vector  
5584				endm  
# End of macro CALLMONITOR
5584				endif 
5584 fe 00				cp 0 
5586 20 03				jr nz, .skipopeneof 
5588					; have opened an empty file 
5588					 
5588 32 a5 f9				ld (store_openext), a 
558b			 
558b			.skipopeneof: 
558b			 
558b 6f					ld l, a 
558c 26 00				ld h, 0 
558e cd 2f 20				call forth_push_numhl 
5591			 
5591			 
5591				       NEXTW 
5591 c3 ea 23			jp macro_next 
5594				endm 
# End of macro NEXTW
5594			.READ: 
5594				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
5594 6c				db WORD_SYS_CORE+88             
5595 be 56			dw .EOF            
5597 05				db 4 + 1 
5598 .. 00			db "READ",0              
559d				endm 
# End of macro CWHEAD
559d			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
559d			; | | e.g. 
559d			; | | $01 OPEN $01 DO READ . LOOP 
559d			; | | 
559d			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
559d			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
559d			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
559d			; | | two bytes contain the file id and extent. 
559d			; | |  
559d			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
559d			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
559d			; | | > [!NOTE] 
559d			; | | > Compatible with PicoSPINet  
559d			 
559d					if DEBUG_FORTH_WORDS_KEY 
559d						DMARK "REA" 
559d f5				push af  
559e 3a b2 55			ld a, (.dmark)  
55a1 32 a6 fd			ld (debug_mark),a  
55a4 3a b3 55			ld a, (.dmark+1)  
55a7 32 a7 fd			ld (debug_mark+1),a  
55aa 3a b4 55			ld a, (.dmark+2)  
55ad 32 a8 fd			ld (debug_mark+2),a  
55b0 18 03			jr .pastdmark  
55b2 ..			.dmark: db "REA"  
55b5 f1			.pastdmark: pop af  
55b6			endm  
# End of macro DMARK
55b6						CALLMONITOR 
55b6 cd aa fd			call debug_vector  
55b9				endm  
# End of macro CALLMONITOR
55b9					endif 
55b9					; store_openext use it. If zero it is EOF 
55b9			 
55b9					; read block from current stream id 
55b9					; if the block does not contain zero term keep reading blocks until zero found 
55b9					; push the block to stack 
55b9					; save the block id to stream 
55b9			 
55b9			 
55b9 cd eb 56				call .testeof 
55bc 3e 01				ld a, 1 
55be bd					cp l 
55bf ca 9a 56				jp z, .ateof 
55c2			 
55c2			 
55c2			;		FORTH_DSP_VALUEHL 
55c2			 
55c2			;		push hl 
55c2			 
55c2			;	if DEBUG_STORESE 
55c2			;		DMARK "REA" 
55c2			;		CALLMONITOR 
55c2			;	endif 
55c2			;		FORTH_DSP_POP 
55c2			 
55c2			;		pop hl 
55c2				 
55c2 3a a2 f9				ld a, (store_filecache) 
55c5 67					ld h,a 
55c6			 
55c6 3a a5 f9				ld a, (store_openext) 
55c9 6f					ld l, a 
55ca					 
55ca fe 00				cp 0 
55cc ca 9a 56				jp z, .ateof     ; dont read past eof 
55cf			 
55cf cd ad 0c				call storage_clear_page 
55d2			 
55d2 11 b5 f9				ld de, store_page 
55d5				if DEBUG_STORESE 
55d5					DMARK "RE1" 
55d5 f5				push af  
55d6 3a ea 55			ld a, (.dmark)  
55d9 32 a6 fd			ld (debug_mark),a  
55dc 3a eb 55			ld a, (.dmark+1)  
55df 32 a7 fd			ld (debug_mark+1),a  
55e2 3a ec 55			ld a, (.dmark+2)  
55e5 32 a8 fd			ld (debug_mark+2),a  
55e8 18 03			jr .pastdmark  
55ea ..			.dmark: db "RE1"  
55ed f1			.pastdmark: pop af  
55ee			endm  
# End of macro DMARK
55ee					CALLMONITOR 
55ee cd aa fd			call debug_vector  
55f1				endm  
# End of macro CALLMONITOR
55f1				endif 
55f1 cd ca 09				call storage_read 
55f4			 
55f4				if DEBUG_STORESE 
55f4					DMARK "RE2" 
55f4 f5				push af  
55f5 3a 09 56			ld a, (.dmark)  
55f8 32 a6 fd			ld (debug_mark),a  
55fb 3a 0a 56			ld a, (.dmark+1)  
55fe 32 a7 fd			ld (debug_mark+1),a  
5601 3a 0b 56			ld a, (.dmark+2)  
5604 32 a8 fd			ld (debug_mark+2),a  
5607 18 03			jr .pastdmark  
5609 ..			.dmark: db "RE2"  
560c f1			.pastdmark: pop af  
560d			endm  
# End of macro DMARK
560d					CALLMONITOR 
560d cd aa fd			call debug_vector  
5610				endm  
# End of macro CALLMONITOR
5610				endif 
5610 cd 04 10			call ishlzero 
5613			;	ld a, l 
5613			;	add h 
5613			;	cp 0 
5613 ca 9a 56			jp z, .readeof 
5616			 
5616				; not eof so hl should point to data to push to stack 
5616			 
5616				if DEBUG_STORESE 
5616					DMARK "RE3" 
5616 f5				push af  
5617 3a 2b 56			ld a, (.dmark)  
561a 32 a6 fd			ld (debug_mark),a  
561d 3a 2c 56			ld a, (.dmark+1)  
5620 32 a7 fd			ld (debug_mark+1),a  
5623 3a 2d 56			ld a, (.dmark+2)  
5626 32 a8 fd			ld (debug_mark+2),a  
5629 18 03			jr .pastdmark  
562b ..			.dmark: db "RE3"  
562e f1			.pastdmark: pop af  
562f			endm  
# End of macro DMARK
562f					CALLMONITOR 
562f cd aa fd			call debug_vector  
5632				endm  
# End of macro CALLMONITOR
5632				endif 
5632 cd 9d 20			call forth_push_str 
5635			 
5635				if DEBUG_STORESE 
5635					DMARK "RE4" 
5635 f5				push af  
5636 3a 4a 56			ld a, (.dmark)  
5639 32 a6 fd			ld (debug_mark),a  
563c 3a 4b 56			ld a, (.dmark+1)  
563f 32 a7 fd			ld (debug_mark+1),a  
5642 3a 4c 56			ld a, (.dmark+2)  
5645 32 a8 fd			ld (debug_mark+2),a  
5648 18 03			jr .pastdmark  
564a ..			.dmark: db "RE4"  
564d f1			.pastdmark: pop af  
564e			endm  
# End of macro DMARK
564e					CALLMONITOR 
564e cd aa fd			call debug_vector  
5651				endm  
# End of macro CALLMONITOR
5651				endif 
5651				; get next block  or mark as eof 
5651			 
5651 3a a4 f9			ld a, (store_openmaxext)   ; get our limit 
5654 4f				ld c, a	 
5655 3a a5 f9			ld a, (store_openext) 
5658			 
5658				if DEBUG_STORESE 
5658					DMARK "RE5" 
5658 f5				push af  
5659 3a 6d 56			ld a, (.dmark)  
565c 32 a6 fd			ld (debug_mark),a  
565f 3a 6e 56			ld a, (.dmark+1)  
5662 32 a7 fd			ld (debug_mark+1),a  
5665 3a 6f 56			ld a, (.dmark+2)  
5668 32 a8 fd			ld (debug_mark+2),a  
566b 18 03			jr .pastdmark  
566d ..			.dmark: db "RE5"  
5670 f1			.pastdmark: pop af  
5671			endm  
# End of macro DMARK
5671					CALLMONITOR 
5671 cd aa fd			call debug_vector  
5674				endm  
# End of macro CALLMONITOR
5674				endif 
5674 b9				cp c 
5675 28 23			jr z, .readeof     ; at last extent 
5677			 
5677 3c					inc a 
5678 32 a5 f9				ld (store_openext), a 
567b			 
567b				if DEBUG_STORESE 
567b					DMARK "RE6" 
567b f5				push af  
567c 3a 90 56			ld a, (.dmark)  
567f 32 a6 fd			ld (debug_mark),a  
5682 3a 91 56			ld a, (.dmark+1)  
5685 32 a7 fd			ld (debug_mark+1),a  
5688 3a 92 56			ld a, (.dmark+2)  
568b 32 a8 fd			ld (debug_mark+2),a  
568e 18 03			jr .pastdmark  
5690 ..			.dmark: db "RE6"  
5693 f1			.pastdmark: pop af  
5694			endm  
# End of macro DMARK
5694					CALLMONITOR 
5694 cd aa fd			call debug_vector  
5697				endm  
# End of macro CALLMONITOR
5697				endif 
5697			 
5697			 
5697				       NEXTW 
5697 c3 ea 23			jp macro_next 
569a				endm 
# End of macro NEXTW
569a			.ateof: 
569a				;	ld hl, .showeof 
569a				;	call forth_push_str 
569a 3e 00		.readeof:	ld a, 0 
569c 32 a5 f9				ld (store_openext), a 
569f			 
569f					 
569f				if DEBUG_STORESE 
569f					DMARK "REF" 
569f f5				push af  
56a0 3a b4 56			ld a, (.dmark)  
56a3 32 a6 fd			ld (debug_mark),a  
56a6 3a b5 56			ld a, (.dmark+1)  
56a9 32 a7 fd			ld (debug_mark+1),a  
56ac 3a b6 56			ld a, (.dmark+2)  
56af 32 a8 fd			ld (debug_mark+2),a  
56b2 18 03			jr .pastdmark  
56b4 ..			.dmark: db "REF"  
56b7 f1			.pastdmark: pop af  
56b8			endm  
# End of macro DMARK
56b8					CALLMONITOR 
56b8 cd aa fd			call debug_vector  
56bb				endm  
# End of macro CALLMONITOR
56bb				endif 
56bb				       NEXTW 
56bb c3 ea 23			jp macro_next 
56be				endm 
# End of macro NEXTW
56be			 
56be			;.showeof:   db "eof", 0 
56be			 
56be			 
56be			.EOF: 
56be				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
56be 6d				db WORD_SYS_CORE+89             
56bf 00 57			dw .FORMAT            
56c1 04				db 3 + 1 
56c2 .. 00			db "EOF",0              
56c6				endm 
# End of macro CWHEAD
56c6			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
56c6			; | | e.g. 
56c6			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
56c6			; | | > [!NOTE] 
56c6			; | | > Compatible with PicoSPINet  
56c6					; TODO if current block id for stream is zero then push true else false 
56c6			 
56c6					if DEBUG_FORTH_WORDS_KEY 
56c6						DMARK "EOF" 
56c6 f5				push af  
56c7 3a db 56			ld a, (.dmark)  
56ca 32 a6 fd			ld (debug_mark),a  
56cd 3a dc 56			ld a, (.dmark+1)  
56d0 32 a7 fd			ld (debug_mark+1),a  
56d3 3a dd 56			ld a, (.dmark+2)  
56d6 32 a8 fd			ld (debug_mark+2),a  
56d9 18 03			jr .pastdmark  
56db ..			.dmark: db "EOF"  
56de f1			.pastdmark: pop af  
56df			endm  
# End of macro DMARK
56df						CALLMONITOR 
56df cd aa fd			call debug_vector  
56e2				endm  
# End of macro CALLMONITOR
56e2					endif 
56e2			 
56e2					; TODO handlue multiple file streams 
56e2			 
56e2			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
56e2 cd eb 56				call .testeof 
56e5 cd 2f 20				call forth_push_numhl 
56e8			 
56e8			 
56e8				       NEXTW 
56e8 c3 ea 23			jp macro_next 
56eb				endm 
# End of macro NEXTW
56eb			 
56eb			.testeof: 
56eb 2e 01				ld l, 1 
56ed 3a a4 f9				ld a, (store_openmaxext) 
56f0 fe 00				cp 0 
56f2 28 09				jr  z, .eofdone   ; empty file 
56f4 3a a5 f9				ld a, (store_openext) 
56f7 fe 00				cp 0 
56f9 28 02				jr  z, .eofdone 
56fb 2e 00				ld l, 0 
56fd 26 00		.eofdone:	ld h, 0 
56ff c9					ret 
5700			 
5700			 
5700			 
5700			 
5700			.FORMAT: 
5700				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
5700 6d				db WORD_SYS_CORE+89             
5701 51 57			dw .LABEL            
5703 07				db 6 + 1 
5704 .. 00			db "FORMAT",0              
570b				endm 
# End of macro CWHEAD
570b			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
570b			; | | > [!NOTE] 
570b			; | | > Compatible with PicoSPINet  
570b					; TODO if current block id for stream is zero then push true else false 
570b				 
570b				if DEBUG_STORESE 
570b					DMARK "FOR" 
570b f5				push af  
570c 3a 20 57			ld a, (.dmark)  
570f 32 a6 fd			ld (debug_mark),a  
5712 3a 21 57			ld a, (.dmark+1)  
5715 32 a7 fd			ld (debug_mark+1),a  
5718 3a 22 57			ld a, (.dmark+2)  
571b 32 a8 fd			ld (debug_mark+2),a  
571e 18 03			jr .pastdmark  
5720 ..			.dmark: db "FOR"  
5723 f1			.pastdmark: pop af  
5724			endm  
# End of macro DMARK
5724					CALLMONITOR 
5724 cd aa fd			call debug_vector  
5727				endm  
# End of macro CALLMONITOR
5727				endif 
5727					; Wipes the bank check flags to cause a reformat on next block 0 read 
5727			 
5727 21 01 00				ld hl, 1 
572a 3e 00				ld a, 0 
572c cd 76 02				call se_writebyte 
572f			 
572f				if DEBUG_STORESE 
572f					DMARK "FO0" 
572f f5				push af  
5730 3a 44 57			ld a, (.dmark)  
5733 32 a6 fd			ld (debug_mark),a  
5736 3a 45 57			ld a, (.dmark+1)  
5739 32 a7 fd			ld (debug_mark+1),a  
573c 3a 46 57			ld a, (.dmark+2)  
573f 32 a8 fd			ld (debug_mark+2),a  
5742 18 03			jr .pastdmark  
5744 ..			.dmark: db "FO0"  
5747 f1			.pastdmark: pop af  
5748			endm  
# End of macro DMARK
5748					CALLMONITOR 
5748 cd aa fd			call debug_vector  
574b				endm  
# End of macro CALLMONITOR
574b				endif 
574b					; force bank init 
574b			 
574b cd 22 05				call storage_get_block_0 
574e					 
574e				       NEXTW 
574e c3 ea 23			jp macro_next 
5751				endm 
# End of macro NEXTW
5751			.LABEL: 
5751				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
5751 6d				db WORD_SYS_CORE+89             
5752 9f 57			dw .STOREPAGE            
5754 06				db 5 + 1 
5755 .. 00			db "LABEL",0              
575b				endm 
# End of macro CWHEAD
575b			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
575b			; | | > [!NOTE] 
575b			; | | > Compatible with PicoSPINet  
575b					; TODO test to see if bank is selected 
575b				 
575b					if DEBUG_FORTH_WORDS_KEY 
575b						DMARK "LBL" 
575b f5				push af  
575c 3a 70 57			ld a, (.dmark)  
575f 32 a6 fd			ld (debug_mark),a  
5762 3a 71 57			ld a, (.dmark+1)  
5765 32 a7 fd			ld (debug_mark+1),a  
5768 3a 72 57			ld a, (.dmark+2)  
576b 32 a8 fd			ld (debug_mark+2),a  
576e 18 03			jr .pastdmark  
5770 ..			.dmark: db "LBL"  
5773 f1			.pastdmark: pop af  
5774			endm  
# End of macro DMARK
5774						CALLMONITOR 
5774 cd aa fd			call debug_vector  
5777				endm  
# End of macro CALLMONITOR
5777					endif 
5777			;	if DEBUG_STORESE 
5777			;		DMARK "LBL" 
5777			;		CALLMONITOR 
5777			;	endif 
5777					FORTH_DSP_VALUEHL 
5777 cd 34 22			call macro_dsp_valuehl 
577a				endm 
# End of macro FORTH_DSP_VALUEHL
577a					;v5FORTH_DSP_VALUE 
577a					 
577a			;		push hl 
577a					FORTH_DSP_POP 
577a cd ec 22			call macro_forth_dsp_pop 
577d				endm 
# End of macro FORTH_DSP_POP
577d			;		pop hl 
577d			 
577d			;v5		inc hl   ; move past the type marker 
577d			 
577d				if DEBUG_STORESE 
577d					DMARK "LBl" 
577d f5				push af  
577e 3a 92 57			ld a, (.dmark)  
5781 32 a6 fd			ld (debug_mark),a  
5784 3a 93 57			ld a, (.dmark+1)  
5787 32 a7 fd			ld (debug_mark+1),a  
578a 3a 94 57			ld a, (.dmark+2)  
578d 32 a8 fd			ld (debug_mark+2),a  
5790 18 03			jr .pastdmark  
5792 ..			.dmark: db "LBl"  
5795 f1			.pastdmark: pop af  
5796			endm  
# End of macro DMARK
5796					CALLMONITOR 
5796 cd aa fd			call debug_vector  
5799				endm  
# End of macro CALLMONITOR
5799				endif 
5799 cd 46 06				call storage_label 
579c			 
579c				       NEXTW 
579c c3 ea 23			jp macro_next 
579f				endm 
# End of macro NEXTW
579f			.STOREPAGE: 
579f				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
579f 6d				db WORD_SYS_CORE+89             
57a0 d2 57			dw .LABELS            
57a2 0a				db 9 + 1 
57a3 .. 00			db "STOREPAGE",0              
57ad				endm 
# End of macro CWHEAD
57ad			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
57ad			; | | > [!NOTE] 
57ad			; | | > Compatible with PicoSPINet  
57ad					; TODO test to see if bank is selected 
57ad				 
57ad					if DEBUG_FORTH_WORDS_KEY 
57ad						DMARK "STP" 
57ad f5				push af  
57ae 3a c2 57			ld a, (.dmark)  
57b1 32 a6 fd			ld (debug_mark),a  
57b4 3a c3 57			ld a, (.dmark+1)  
57b7 32 a7 fd			ld (debug_mark+1),a  
57ba 3a c4 57			ld a, (.dmark+2)  
57bd 32 a8 fd			ld (debug_mark+2),a  
57c0 18 03			jr .pastdmark  
57c2 ..			.dmark: db "STP"  
57c5 f1			.pastdmark: pop af  
57c6			endm  
# End of macro DMARK
57c6						CALLMONITOR 
57c6 cd aa fd			call debug_vector  
57c9				endm  
# End of macro CALLMONITOR
57c9					endif 
57c9			;	if DEBUG_STORESE 
57c9			;		DMARK "STP" 
57c9			;		CALLMONITOR 
57c9			;	endif 
57c9			 
57c9 21 b5 f9			ld hl, store_page 
57cc cd 2f 20			call forth_push_numhl 
57cf			 
57cf			 
57cf				       NEXTW 
57cf c3 ea 23			jp macro_next 
57d2				endm 
# End of macro NEXTW
57d2			.LABELS: 
57d2				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
57d2 6d				db WORD_SYS_CORE+89             
57d3 5c 58			dw .SCONST1            
57d5 07				db 6 + 1 
57d6 .. 00			db "LABELS",0              
57dd				endm 
# End of macro CWHEAD
57dd			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | DONE 
57dd			; | | > [!CAUTION] 
57dd			; | | > *NOT* Compatible with PicoSPINet  
57dd					;  
57dd			 
57dd					; save the current device selected to restore afterwards 
57dd				 
57dd 3a 9b f9				ld a, (spi_device) 
57e0 f5					push af 
57e1			 
57e1			 
57e1					; run through each of the banks 
57e1			 
57e1 21 01 00				ld hl, 1 
57e4 cd 2f 20				call forth_push_numhl 
57e7 3e ff				ld a, SPI_CE_HIGH 
57e9 cb 87				res SPI_CE0, a 
57eb 32 9b f9				ld (spi_device), a 
57ee cd 22 05				call storage_get_block_0 
57f1 21 b8 f9				ld hl, store_page+3 
57f4 cd 9d 20				call forth_push_str 
57f7			 
57f7					 
57f7 21 02 00				ld hl, 2 
57fa cd 2f 20				call forth_push_numhl 
57fd 3e ff				ld a, SPI_CE_HIGH 
57ff cb 8f				res SPI_CE1, a 
5801 32 9b f9				ld (spi_device), a 
5804 cd 22 05				call storage_get_block_0 
5807 21 b8 f9				ld hl, store_page+3 
580a cd 9d 20				call forth_push_str 
580d			 
580d					 
580d 21 03 00				ld hl, 3 
5810 cd 2f 20				call forth_push_numhl 
5813 3e ff				ld a, SPI_CE_HIGH 
5815 cb 97				res SPI_CE2, a 
5817 32 9b f9				ld (spi_device), a 
581a cd 22 05				call storage_get_block_0 
581d 21 b8 f9				ld hl, store_page+3 
5820 cd 9d 20				call forth_push_str 
5823			 
5823			 
5823 21 04 00				ld hl, 4 
5826 cd 2f 20				call forth_push_numhl 
5829 3e ff				ld a, SPI_CE_HIGH 
582b cb 9f				res SPI_CE3, a 
582d 32 9b f9				ld (spi_device), a 
5830 cd 22 05				call storage_get_block_0 
5833 21 b8 f9				ld hl, store_page+3 
5836 cd 9d 20				call forth_push_str 
5839			 
5839					 
5839			 
5839 21 05 00				ld hl, 5 
583c cd 2f 20				call forth_push_numhl 
583f 3e ff				ld a, SPI_CE_HIGH 
5841 cb a7				res SPI_CE4, a 
5843 32 9b f9				ld (spi_device), a 
5846 cd 22 05				call storage_get_block_0 
5849 21 b8 f9				ld hl, store_page+3 
584c cd 9d 20				call forth_push_str 
584f			 
584f					 
584f					; push fixed count of storage devices (on board) for now 
584f			 
584f 21 05 00				ld hl, 5 
5852 cd 2f 20				call forth_push_numhl 
5855			 
5855					; restore selected device  
5855				 
5855 f1					pop af 
5856 32 9b f9				ld (spi_device), a 
5859			 
5859				       NEXTW 
5859 c3 ea 23			jp macro_next 
585c				endm 
# End of macro NEXTW
585c			 
585c			.SCONST1: 
585c				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
585c 6d				db WORD_SYS_CORE+89             
585d 73 58			dw .SCONST2            
585f 07				db 6 + 1 
5860 .. 00			db "FILEID",0              
5867				endm 
# End of macro CWHEAD
5867			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
5867			; | | > [!NOTE] 
5867			; | | > Compatible with PicoSPINet  
5867 3a a2 f9				ld a, (store_filecache) 
586a 26 00				ld h, 0 
586c 6f					ld l, a 
586d cd 2f 20				call forth_push_numhl 
5870					NEXTW 
5870 c3 ea 23			jp macro_next 
5873				endm 
# End of macro NEXTW
5873			.SCONST2: 
5873				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
5873 6d				db WORD_SYS_CORE+89             
5874 8b 58			dw .SCONST3            
5876 08				db 7 + 1 
5877 .. 00			db "FILEEXT",0              
587f				endm 
# End of macro CWHEAD
587f			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
587f			; | | > [!NOTE] 
587f			; | | > Compatible with PicoSPINet  
587f 3a a5 f9				ld a, (store_openext) 
5882 26 00				ld h, 0 
5884 6f					ld l, a 
5885 cd 2f 20				call forth_push_numhl 
5888					NEXTW 
5888 c3 ea 23			jp macro_next 
588b				endm 
# End of macro NEXTW
588b			.SCONST3: 
588b				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
588b 6d				db WORD_SYS_CORE+89             
588c a3 58			dw .SCONST4            
588e 08				db 7 + 1 
588f .. 00			db "FILEMAX",0              
5897				endm 
# End of macro CWHEAD
5897			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5897			; | | > [!NOTE] 
5897			; | | > Compatible with PicoSPINet  
5897 3a a4 f9				ld a, (store_openmaxext) 
589a 26 00				ld h, 0 
589c 6f					ld l, a 
589d cd 2f 20				call forth_push_numhl 
58a0					NEXTW 
58a0 c3 ea 23			jp macro_next 
58a3				endm 
# End of macro NEXTW
58a3			.SCONST4: 
58a3				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
58a3 6d				db WORD_SYS_CORE+89             
58a4 b9 58			dw .SCONST5            
58a6 09				db 8 + 1 
58a7 .. 00			db "FILEADDR",0              
58b0				endm 
# End of macro CWHEAD
58b0			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currently open file to stack | DONE 
58b0			; | | > [!NOTE] 
58b0			; | | > Compatible with PicoSPINet  
58b0 2a a6 f9				ld hl, (store_openaddr) 
58b3 cd 2f 20				call forth_push_numhl 
58b6					NEXTW 
58b6 c3 ea 23			jp macro_next 
58b9				endm 
# End of macro NEXTW
58b9			.SCONST5: 
58b9				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
58b9 6d				db WORD_SYS_CORE+89             
58ba da 58			dw .SCONST6            
58bc 09				db 8 + 1 
58bd .. 00			db "FILEPAGE",0              
58c6				endm 
# End of macro CWHEAD
58c6			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
58c6			; | | > [!NOTE] 
58c6			; | | > Compatible with PicoSPINet  
58c6 2a a6 f9				ld hl, (store_openaddr) 
58c9 e5					push hl 
58ca c1					pop bc 
58cb 16 00				ld d, 0 
58cd 1e 40				ld e, STORE_BLOCK_PHY 
58cf cd 38 0f				call Div16 
58d2 c5					push bc 
58d3 e1					pop hl 
58d4 cd 2f 20				call forth_push_numhl 
58d7					NEXTW 
58d7 c3 ea 23			jp macro_next 
58da				endm 
# End of macro NEXTW
58da			.SCONST6: 
58da				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
58da 6d				db WORD_SYS_CORE+89             
58db f3 58			dw .ENDSTORAGE            
58dd 09				db 8 + 1 
58de .. 00			db "READCONT",0              
58e7				endm 
# End of macro CWHEAD
58e7			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
58e7			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
58e7			; | | a further read should, if applicable, be CONCAT to the previous read. 
58e7			; | | > [!NOTE] 
58e7			; | | > Compatible with PicoSPINet  
58e7 3a a8 f9				ld a, (store_readcont) 
58ea 26 00				ld h, 0 
58ec 6f					ld l, a 
58ed cd 2f 20				call forth_push_numhl 
58f0					NEXTW 
58f0 c3 ea 23			jp macro_next 
58f3				endm 
# End of macro NEXTW
58f3			.ENDSTORAGE: 
58f3			; eof 
# End of file forth_words_storage.asm
58f3			endif 
58f3				include "forth_words_device.asm" 
58f3			; Device related words 
58f3			 
58f3			; | ## Device Words 
58f3			 
58f3			;if SOUND_ENABLE 
58f3			;.NOTE: 
58f3			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
58f3			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
58f3			;		if DEBUG_FORTH_WORDS_KEY 
58f3			;			DMARK "NTE" 
58f3			;			CALLMONITOR 
58f3			;		endif 
58f3			; 
58f3			;	 
58f3			; 
58f3			;		NEXTW 
58f3			;.AFTERSOUND: 
58f3			;endif 
58f3			 
58f3			 
58f3			USE_GPIO: equ 0 
58f3			 
58f3			if USE_GPIO 
58f3			.GP1: 
58f3				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
58f3			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
58f3					NEXTW 
58f3			.GP2: 
58f3				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
58f3			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
58f3			 
58f3					NEXTW 
58f3			 
58f3			.GP3: 
58f3				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
58f3			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
58f3			 
58f3					NEXTW 
58f3			 
58f3			.GP4: 
58f3				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
58f3			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
58f3			 
58f3					NEXTW 
58f3			.SIN: 
58f3			 
58f3			 
58f3			endif 
58f3			 
58f3			 
58f3				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
58f3 33				db WORD_SYS_CORE+31             
58f4 28 59			dw .SOUT            
58f6 03				db 2 + 1 
58f7 .. 00			db "IN",0              
58fa				endm 
# End of macro CWHEAD
58fa			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
58fa					if DEBUG_FORTH_WORDS_KEY 
58fa						DMARK "IN." 
58fa f5				push af  
58fb 3a 0f 59			ld a, (.dmark)  
58fe 32 a6 fd			ld (debug_mark),a  
5901 3a 10 59			ld a, (.dmark+1)  
5904 32 a7 fd			ld (debug_mark+1),a  
5907 3a 11 59			ld a, (.dmark+2)  
590a 32 a8 fd			ld (debug_mark+2),a  
590d 18 03			jr .pastdmark  
590f ..			.dmark: db "IN."  
5912 f1			.pastdmark: pop af  
5913			endm  
# End of macro DMARK
5913						CALLMONITOR 
5913 cd aa fd			call debug_vector  
5916				endm  
# End of macro CALLMONITOR
5916					endif 
5916					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5916 cd 34 22			call macro_dsp_valuehl 
5919				endm 
# End of macro FORTH_DSP_VALUEHL
5919			 
5919 e5					push hl 
591a			 
591a					; destroy value TOS 
591a			 
591a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
591a cd ec 22			call macro_forth_dsp_pop 
591d				endm 
# End of macro FORTH_DSP_POP
591d			 
591d					; one value on hl get other one back 
591d			 
591d c1					pop bc 
591e			 
591e					; do the sub 
591e			;		ex de, hl 
591e			 
591e ed 68				in l,(c) 
5920			 
5920					; save it 
5920			 
5920 26 00				ld h,0 
5922			 
5922					; TODO push value back onto stack for another op etc 
5922			 
5922 cd 2f 20				call forth_push_numhl 
5925					NEXTW 
5925 c3 ea 23			jp macro_next 
5928				endm 
# End of macro NEXTW
5928			.SOUT: 
5928				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
5928 34				db WORD_SYS_CORE+32             
5929 7b 59			dw .SPIO            
592b 04				db 3 + 1 
592c .. 00			db "OUT",0              
5930				endm 
# End of macro CWHEAD
5930			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
5930					if DEBUG_FORTH_WORDS_KEY 
5930						DMARK "OUT" 
5930 f5				push af  
5931 3a 45 59			ld a, (.dmark)  
5934 32 a6 fd			ld (debug_mark),a  
5937 3a 46 59			ld a, (.dmark+1)  
593a 32 a7 fd			ld (debug_mark+1),a  
593d 3a 47 59			ld a, (.dmark+2)  
5940 32 a8 fd			ld (debug_mark+2),a  
5943 18 03			jr .pastdmark  
5945 ..			.dmark: db "OUT"  
5948 f1			.pastdmark: pop af  
5949			endm  
# End of macro DMARK
5949						CALLMONITOR 
5949 cd aa fd			call debug_vector  
594c				endm  
# End of macro CALLMONITOR
594c					endif 
594c			 
594c					; get port 
594c			 
594c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
594c cd 34 22			call macro_dsp_valuehl 
594f				endm 
# End of macro FORTH_DSP_VALUEHL
594f			 
594f e5					push hl 
5950			 
5950					; destroy value TOS 
5950			 
5950					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5950 cd ec 22			call macro_forth_dsp_pop 
5953				endm 
# End of macro FORTH_DSP_POP
5953			 
5953					; get byte to send 
5953			 
5953					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5953 cd 34 22			call macro_dsp_valuehl 
5956				endm 
# End of macro FORTH_DSP_VALUEHL
5956			 
5956			;		push hl 
5956			 
5956					; destroy value TOS 
5956			 
5956					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5956 cd ec 22			call macro_forth_dsp_pop 
5959				endm 
# End of macro FORTH_DSP_POP
5959			 
5959					; one value on hl get other one back 
5959			 
5959			;		pop hl 
5959			 
5959 c1					pop bc 
595a			 
595a					if DEBUG_FORTH_WORDS 
595a						DMARK "OUT" 
595a f5				push af  
595b 3a 6f 59			ld a, (.dmark)  
595e 32 a6 fd			ld (debug_mark),a  
5961 3a 70 59			ld a, (.dmark+1)  
5964 32 a7 fd			ld (debug_mark+1),a  
5967 3a 71 59			ld a, (.dmark+2)  
596a 32 a8 fd			ld (debug_mark+2),a  
596d 18 03			jr .pastdmark  
596f ..			.dmark: db "OUT"  
5972 f1			.pastdmark: pop af  
5973			endm  
# End of macro DMARK
5973						CALLMONITOR 
5973 cd aa fd			call debug_vector  
5976				endm  
# End of macro CALLMONITOR
5976					endif 
5976			 
5976 ed 69				out (c), l 
5978			 
5978					NEXTW 
5978 c3 ea 23			jp macro_next 
597b				endm 
# End of macro NEXTW
597b			 
597b			 
597b			.SPIO: 
597b			 
597b			if STORAGE_SE 
597b				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
597b 51				db WORD_SYS_CORE+61             
597c 8c 59			dw .SPICEH            
597e 07				db 6 + 1 
597f .. 00			db "SPICEL",0              
5986				endm 
# End of macro CWHEAD
5986			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5986			 
5986 cd 1f 02				call spi_ce_low 
5989			    NEXTW 
5989 c3 ea 23			jp macro_next 
598c				endm 
# End of macro NEXTW
598c			 
598c			.SPICEH: 
598c				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
598c 51				db WORD_SYS_CORE+61             
598d 9d 59			dw .SPIOb            
598f 07				db 6 + 1 
5990 .. 00			db "SPICEH",0              
5997				endm 
# End of macro CWHEAD
5997			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
5997			 
5997 cd 0e 02				call spi_ce_high 
599a			    NEXTW 
599a c3 ea 23			jp macro_next 
599d				endm 
# End of macro NEXTW
599d			 
599d			 
599d			.SPIOb: 
599d			 
599d				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
599d 51				db WORD_SYS_CORE+61             
599e cf 59			dw .SPII            
59a0 05				db 4 + 1 
59a1 .. 00			db "SPIO",0              
59a6				endm 
# End of macro CWHEAD
59a6			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
59a6			 
59a6					if DEBUG_FORTH_WORDS_KEY 
59a6						DMARK "SPo" 
59a6 f5				push af  
59a7 3a bb 59			ld a, (.dmark)  
59aa 32 a6 fd			ld (debug_mark),a  
59ad 3a bc 59			ld a, (.dmark+1)  
59b0 32 a7 fd			ld (debug_mark+1),a  
59b3 3a bd 59			ld a, (.dmark+2)  
59b6 32 a8 fd			ld (debug_mark+2),a  
59b9 18 03			jr .pastdmark  
59bb ..			.dmark: db "SPo"  
59be f1			.pastdmark: pop af  
59bf			endm  
# End of macro DMARK
59bf						CALLMONITOR 
59bf cd aa fd			call debug_vector  
59c2				endm  
# End of macro CALLMONITOR
59c2					endif 
59c2					; get port 
59c2			 
59c2			 
59c2					; get byte to send 
59c2			 
59c2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
59c2 cd 34 22			call macro_dsp_valuehl 
59c5				endm 
# End of macro FORTH_DSP_VALUEHL
59c5			 
59c5			;		push hl    ; u1  
59c5			 
59c5					; destroy value TOS 
59c5			 
59c5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
59c5 cd ec 22			call macro_forth_dsp_pop 
59c8				endm 
# End of macro FORTH_DSP_POP
59c8			 
59c8					; one value on hl get other one back 
59c8			 
59c8			;		pop hl   ; u2 - addr 
59c8			 
59c8					; TODO Send SPI byte 
59c8			 
59c8			;		push hl 
59c8			;		call spi_ce_low 
59c8			;		pop hl 
59c8 7d					ld a, l 
59c9 cd 0d 01				call spi_send_byte 
59cc			;		call spi_ce_high 
59cc			 
59cc					NEXTW 
59cc c3 ea 23			jp macro_next 
59cf				endm 
# End of macro NEXTW
59cf			 
59cf			.SPII: 
59cf				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
59cf 52				db WORD_SYS_CORE+62             
59d0 38 5a			dw .SESEL            
59d2 06				db 5 + 1 
59d3 .. 00			db "SPII",0              
59d8				endm 
# End of macro CWHEAD
59d8			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
59d8					if DEBUG_FORTH_WORDS_KEY 
59d8						DMARK "SPi" 
59d8 f5				push af  
59d9 3a ed 59			ld a, (.dmark)  
59dc 32 a6 fd			ld (debug_mark),a  
59df 3a ee 59			ld a, (.dmark+1)  
59e2 32 a7 fd			ld (debug_mark+1),a  
59e5 3a ef 59			ld a, (.dmark+2)  
59e8 32 a8 fd			ld (debug_mark+2),a  
59eb 18 03			jr .pastdmark  
59ed ..			.dmark: db "SPi"  
59f0 f1			.pastdmark: pop af  
59f1			endm  
# End of macro DMARK
59f1						CALLMONITOR 
59f1 cd aa fd			call debug_vector  
59f4				endm  
# End of macro CALLMONITOR
59f4					endif 
59f4			 
59f4					; TODO Get SPI byte 
59f4			 
59f4 cd 34 01				call spi_read_byte 
59f7			 
59f7					if DEBUG_FORTH_WORDS 
59f7						DMARK "Si2" 
59f7 f5				push af  
59f8 3a 0c 5a			ld a, (.dmark)  
59fb 32 a6 fd			ld (debug_mark),a  
59fe 3a 0d 5a			ld a, (.dmark+1)  
5a01 32 a7 fd			ld (debug_mark+1),a  
5a04 3a 0e 5a			ld a, (.dmark+2)  
5a07 32 a8 fd			ld (debug_mark+2),a  
5a0a 18 03			jr .pastdmark  
5a0c ..			.dmark: db "Si2"  
5a0f f1			.pastdmark: pop af  
5a10			endm  
# End of macro DMARK
5a10						CALLMONITOR 
5a10 cd aa fd			call debug_vector  
5a13				endm  
# End of macro CALLMONITOR
5a13					endif 
5a13 26 00				ld h, 0 
5a15 6f					ld l, a 
5a16					if DEBUG_FORTH_WORDS 
5a16						DMARK "Si3" 
5a16 f5				push af  
5a17 3a 2b 5a			ld a, (.dmark)  
5a1a 32 a6 fd			ld (debug_mark),a  
5a1d 3a 2c 5a			ld a, (.dmark+1)  
5a20 32 a7 fd			ld (debug_mark+1),a  
5a23 3a 2d 5a			ld a, (.dmark+2)  
5a26 32 a8 fd			ld (debug_mark+2),a  
5a29 18 03			jr .pastdmark  
5a2b ..			.dmark: db "Si3"  
5a2e f1			.pastdmark: pop af  
5a2f			endm  
# End of macro DMARK
5a2f						CALLMONITOR 
5a2f cd aa fd			call debug_vector  
5a32				endm  
# End of macro CALLMONITOR
5a32					endif 
5a32 cd 2f 20				call forth_push_numhl 
5a35			 
5a35					NEXTW 
5a35 c3 ea 23			jp macro_next 
5a38				endm 
# End of macro NEXTW
5a38			 
5a38			 
5a38			 
5a38			.SESEL: 
5a38				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
5a38 66				db WORD_SYS_CORE+82             
5a39 e1 5a			dw .CARTDEV            
5a3b 05				db 4 + 1 
5a3c .. 00			db "BANK",0              
5a41				endm 
# End of macro CWHEAD
5a41			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
5a41					if DEBUG_FORTH_WORDS_KEY 
5a41						DMARK "BNK" 
5a41 f5				push af  
5a42 3a 56 5a			ld a, (.dmark)  
5a45 32 a6 fd			ld (debug_mark),a  
5a48 3a 57 5a			ld a, (.dmark+1)  
5a4b 32 a7 fd			ld (debug_mark+1),a  
5a4e 3a 58 5a			ld a, (.dmark+2)  
5a51 32 a8 fd			ld (debug_mark+2),a  
5a54 18 03			jr .pastdmark  
5a56 ..			.dmark: db "BNK"  
5a59 f1			.pastdmark: pop af  
5a5a			endm  
# End of macro DMARK
5a5a						CALLMONITOR 
5a5a cd aa fd			call debug_vector  
5a5d				endm  
# End of macro CALLMONITOR
5a5d					endif 
5a5d			 
5a5d 3e ff				ld a, 255 
5a5f 32 9e f9				ld (spi_cartdev), a 
5a62			 
5a62					; get bank 
5a62			 
5a62					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5a62 cd 34 22			call macro_dsp_valuehl 
5a65				endm 
# End of macro FORTH_DSP_VALUEHL
5a65			 
5a65			;		push hl 
5a65			 
5a65					; destroy value TOS 
5a65			 
5a65					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5a65 cd ec 22			call macro_forth_dsp_pop 
5a68				endm 
# End of macro FORTH_DSP_POP
5a68			 
5a68					; one value on hl get other one back 
5a68			 
5a68			;		pop hl 
5a68			 
5a68			 
5a68 0e ff				ld c, SPI_CE_HIGH 
5a6a 06 30				ld b, '0'    ; human readable bank number 
5a6c			 
5a6c 7d					ld a, l 
5a6d			 
5a6d					if DEBUG_FORTH_WORDS 
5a6d						DMARK "BNK" 
5a6d f5				push af  
5a6e 3a 82 5a			ld a, (.dmark)  
5a71 32 a6 fd			ld (debug_mark),a  
5a74 3a 83 5a			ld a, (.dmark+1)  
5a77 32 a7 fd			ld (debug_mark+1),a  
5a7a 3a 84 5a			ld a, (.dmark+2)  
5a7d 32 a8 fd			ld (debug_mark+2),a  
5a80 18 03			jr .pastdmark  
5a82 ..			.dmark: db "BNK"  
5a85 f1			.pastdmark: pop af  
5a86			endm  
# End of macro DMARK
5a86						CALLMONITOR 
5a86 cd aa fd			call debug_vector  
5a89				endm  
# End of macro CALLMONITOR
5a89					endif 
5a89			 
5a89					; active low 
5a89			 
5a89 fe 00				cp 0 
5a8b 28 28				jr z, .bset 
5a8d fe 01				cp 1 
5a8f 20 04				jr nz, .b2 
5a91 cb 81				res 0, c 
5a93 06 31				ld b, '1'    ; human readable bank number 
5a95 fe 02		.b2:		cp 2 
5a97 20 04				jr nz, .b3 
5a99 cb 89				res 1, c 
5a9b 06 32				ld b, '2'    ; human readable bank number 
5a9d fe 03		.b3:		cp 3 
5a9f 20 04				jr nz, .b4 
5aa1 cb 91				res 2, c 
5aa3 06 33				ld b, '3'    ; human readable bank number 
5aa5 fe 04		.b4:		cp 4 
5aa7 20 04				jr nz, .b5 
5aa9 cb 99				res 3, c 
5aab 06 34				ld b, '4'    ; human readable bank number 
5aad fe 05		.b5:		cp 5 
5aaf 20 04				jr nz, .bset 
5ab1 cb a1				res 4, c 
5ab3 06 35				ld b, '5'    ; human readable bank number 
5ab5			 
5ab5			.bset: 
5ab5 79					ld a, c 
5ab6 32 9b f9				ld (spi_device),a 
5ab9 78					ld a, b 
5aba 32 9a f9				ld (spi_device_id),a 
5abd					if DEBUG_FORTH_WORDS 
5abd						DMARK "BN2" 
5abd f5				push af  
5abe 3a d2 5a			ld a, (.dmark)  
5ac1 32 a6 fd			ld (debug_mark),a  
5ac4 3a d3 5a			ld a, (.dmark+1)  
5ac7 32 a7 fd			ld (debug_mark+1),a  
5aca 3a d4 5a			ld a, (.dmark+2)  
5acd 32 a8 fd			ld (debug_mark+2),a  
5ad0 18 03			jr .pastdmark  
5ad2 ..			.dmark: db "BN2"  
5ad5 f1			.pastdmark: pop af  
5ad6			endm  
# End of macro DMARK
5ad6						CALLMONITOR 
5ad6 cd aa fd			call debug_vector  
5ad9				endm  
# End of macro CALLMONITOR
5ad9					endif 
5ad9			 
5ad9					; set default SPI clk pulse time as disabled for BANK use 
5ad9			 
5ad9 3e 00				ld a, 0 
5adb 32 9f f9				ld (spi_clktime), a 
5ade			 
5ade					NEXTW 
5ade c3 ea 23			jp macro_next 
5ae1				endm 
# End of macro NEXTW
5ae1			 
5ae1			.CARTDEV: 
5ae1				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5ae1 66				db WORD_SYS_CORE+82             
5ae2 8f 5b			dw .ENDDEVICE            
5ae4 08				db 7 + 1 
5ae5 .. 00			db "CARTDEV",0              
5aed				endm 
# End of macro CWHEAD
5aed			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
5aed					if DEBUG_FORTH_WORDS_KEY 
5aed						DMARK "CDV" 
5aed f5				push af  
5aee 3a 02 5b			ld a, (.dmark)  
5af1 32 a6 fd			ld (debug_mark),a  
5af4 3a 03 5b			ld a, (.dmark+1)  
5af7 32 a7 fd			ld (debug_mark+1),a  
5afa 3a 04 5b			ld a, (.dmark+2)  
5afd 32 a8 fd			ld (debug_mark+2),a  
5b00 18 03			jr .pastdmark  
5b02 ..			.dmark: db "CDV"  
5b05 f1			.pastdmark: pop af  
5b06			endm  
# End of macro DMARK
5b06						CALLMONITOR 
5b06 cd aa fd			call debug_vector  
5b09				endm  
# End of macro CALLMONITOR
5b09					endif 
5b09			 
5b09					; disable se storage bank selection 
5b09			 
5b09 3e ff				ld a, SPI_CE_HIGH		; ce high 
5b0b 32 9b f9				ld (spi_device), a 
5b0e			 
5b0e					; get bank 
5b0e			 
5b0e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5b0e cd 34 22			call macro_dsp_valuehl 
5b11				endm 
# End of macro FORTH_DSP_VALUEHL
5b11			 
5b11			;		push hl 
5b11			 
5b11					; destroy value TOS 
5b11			 
5b11					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5b11 cd ec 22			call macro_forth_dsp_pop 
5b14				endm 
# End of macro FORTH_DSP_POP
5b14			 
5b14					; one value on hl get other one back 
5b14			 
5b14			;		pop hl 
5b14			 
5b14					; active low 
5b14			 
5b14 0e ff				ld c, 255 
5b16			 
5b16 7d					ld a, l 
5b17					if DEBUG_FORTH_WORDS 
5b17						DMARK "CDV" 
5b17 f5				push af  
5b18 3a 2c 5b			ld a, (.dmark)  
5b1b 32 a6 fd			ld (debug_mark),a  
5b1e 3a 2d 5b			ld a, (.dmark+1)  
5b21 32 a7 fd			ld (debug_mark+1),a  
5b24 3a 2e 5b			ld a, (.dmark+2)  
5b27 32 a8 fd			ld (debug_mark+2),a  
5b2a 18 03			jr .pastdmark  
5b2c ..			.dmark: db "CDV"  
5b2f f1			.pastdmark: pop af  
5b30			endm  
# End of macro DMARK
5b30						CALLMONITOR 
5b30 cd aa fd			call debug_vector  
5b33				endm  
# End of macro CALLMONITOR
5b33					endif 
5b33 fe 00				cp 0 
5b35 28 30				jr z, .cset 
5b37 fe 01				cp 1 
5b39 20 02				jr nz, .c2 
5b3b cb 81				res 0, c 
5b3d fe 02		.c2:		cp 2 
5b3f 20 02				jr nz, .c3 
5b41 cb 89				res 1, c 
5b43 fe 03		.c3:		cp 3 
5b45 20 02				jr nz, .c4 
5b47 cb 91				res 2, c 
5b49 fe 04		.c4:		cp 4 
5b4b 20 02				jr nz, .c5 
5b4d cb 99				res 3, c 
5b4f fe 05		.c5:		cp 5 
5b51 20 02				jr nz, .c6 
5b53 cb a1				res 4, c 
5b55 fe 06		.c6:		cp 6 
5b57 20 02				jr nz, .c7 
5b59 cb a9				res 5, c 
5b5b fe 07		.c7:		cp 7 
5b5d 20 02				jr nz, .c8 
5b5f cb b1				res 6, c 
5b61 fe 08		.c8:		cp 8 
5b63 20 02				jr nz, .cset 
5b65 cb b9				res 7, c 
5b67 79			.cset:		ld a, c 
5b68 32 9e f9				ld (spi_cartdev),a 
5b6b			 
5b6b					if DEBUG_FORTH_WORDS 
5b6b						DMARK "CD2" 
5b6b f5				push af  
5b6c 3a 80 5b			ld a, (.dmark)  
5b6f 32 a6 fd			ld (debug_mark),a  
5b72 3a 81 5b			ld a, (.dmark+1)  
5b75 32 a7 fd			ld (debug_mark+1),a  
5b78 3a 82 5b			ld a, (.dmark+2)  
5b7b 32 a8 fd			ld (debug_mark+2),a  
5b7e 18 03			jr .pastdmark  
5b80 ..			.dmark: db "CD2"  
5b83 f1			.pastdmark: pop af  
5b84			endm  
# End of macro DMARK
5b84						CALLMONITOR 
5b84 cd aa fd			call debug_vector  
5b87				endm  
# End of macro CALLMONITOR
5b87					endif 
5b87			 
5b87					; set default SPI clk pulse time as 10ms for CARTDEV use 
5b87			 
5b87 3e 0a				ld a, $0a 
5b89 32 9f f9				ld (spi_clktime), a 
5b8c					NEXTW 
5b8c c3 ea 23			jp macro_next 
5b8f				endm 
# End of macro NEXTW
5b8f			endif 
5b8f			 
5b8f			.ENDDEVICE: 
5b8f			; eof 
5b8f			 
# End of file forth_words_device.asm
5b8f			 
5b8f			; var handler 
5b8f			 
5b8f			 
5b8f			.VARS: 
5b8f				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
5b8f 77				db WORD_SYS_CORE+99             
5b90 40 5c			dw .V0            
5b92 04				db 3 + 1 
5b93 .. 00			db "VAR",0              
5b97				endm 
# End of macro CWHEAD
5b97			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
5b97			;| 
5b97			;| The variable name should consist of a single letter. e.g. "a" 
5b97			;! If a full string is passed then only the first char is looked at 
5b97			;| Any other char could exceed bounds checks!  
5b97			 
5b97					if DEBUG_FORTH_WORDS_KEY 
5b97						DMARK "VAR" 
5b97 f5				push af  
5b98 3a ac 5b			ld a, (.dmark)  
5b9b 32 a6 fd			ld (debug_mark),a  
5b9e 3a ad 5b			ld a, (.dmark+1)  
5ba1 32 a7 fd			ld (debug_mark+1),a  
5ba4 3a ae 5b			ld a, (.dmark+2)  
5ba7 32 a8 fd			ld (debug_mark+2),a  
5baa 18 03			jr .pastdmark  
5bac ..			.dmark: db "VAR"  
5baf f1			.pastdmark: pop af  
5bb0			endm  
# End of macro DMARK
5bb0						CALLMONITOR 
5bb0 cd aa fd			call debug_vector  
5bb3				endm  
# End of macro CALLMONITOR
5bb3					endif 
5bb3			 
5bb3					FORTH_DSP_VALUEHL 
5bb3 cd 34 22			call macro_dsp_valuehl 
5bb6				endm 
# End of macro FORTH_DSP_VALUEHL
5bb6			 
5bb6 7e					ld a, (hl)    ; get first char on of the string 
5bb7			 
5bb7			 
5bb7					if DEBUG_FORTH_WORDS 
5bb7						DMARK "VR1" 
5bb7 f5				push af  
5bb8 3a cc 5b			ld a, (.dmark)  
5bbb 32 a6 fd			ld (debug_mark),a  
5bbe 3a cd 5b			ld a, (.dmark+1)  
5bc1 32 a7 fd			ld (debug_mark+1),a  
5bc4 3a ce 5b			ld a, (.dmark+2)  
5bc7 32 a8 fd			ld (debug_mark+2),a  
5bca 18 03			jr .pastdmark  
5bcc ..			.dmark: db "VR1"  
5bcf f1			.pastdmark: pop af  
5bd0			endm  
# End of macro DMARK
5bd0						CALLMONITOR 
5bd0 cd aa fd			call debug_vector  
5bd3				endm  
# End of macro CALLMONITOR
5bd3					endif 
5bd3					 
5bd3 f5					push af	 
5bd4					FORTH_DSP_POP 
5bd4 cd ec 22			call macro_forth_dsp_pop 
5bd7				endm 
# End of macro FORTH_DSP_POP
5bd7 f1					pop af 
5bd8			 
5bd8					; convert to upper 
5bd8			 
5bd8 cd 50 12				call to_upper 
5bdb					if DEBUG_FORTH_WORDS 
5bdb						DMARK "Vaa" 
5bdb f5				push af  
5bdc 3a f0 5b			ld a, (.dmark)  
5bdf 32 a6 fd			ld (debug_mark),a  
5be2 3a f1 5b			ld a, (.dmark+1)  
5be5 32 a7 fd			ld (debug_mark+1),a  
5be8 3a f2 5b			ld a, (.dmark+2)  
5beb 32 a8 fd			ld (debug_mark+2),a  
5bee 18 03			jr .pastdmark  
5bf0 ..			.dmark: db "Vaa"  
5bf3 f1			.pastdmark: pop af  
5bf4			endm  
# End of macro DMARK
5bf4						CALLMONITOR 
5bf4 cd aa fd			call debug_vector  
5bf7				endm  
# End of macro CALLMONITOR
5bf7					endif 
5bf7 06 41				ld b, 'A' 
5bf9 90					sub b			; set offset 
5bfa					if DEBUG_FORTH_WORDS 
5bfa						DMARK "Vbb" 
5bfa f5				push af  
5bfb 3a 0f 5c			ld a, (.dmark)  
5bfe 32 a6 fd			ld (debug_mark),a  
5c01 3a 10 5c			ld a, (.dmark+1)  
5c04 32 a7 fd			ld (debug_mark+1),a  
5c07 3a 11 5c			ld a, (.dmark+2)  
5c0a 32 a8 fd			ld (debug_mark+2),a  
5c0d 18 03			jr .pastdmark  
5c0f ..			.dmark: db "Vbb"  
5c12 f1			.pastdmark: pop af  
5c13			endm  
# End of macro DMARK
5c13						CALLMONITOR 
5c13 cd aa fd			call debug_vector  
5c16				endm  
# End of macro CALLMONITOR
5c16					endif 
5c16 cb 27				sla a  
5c18				 
5c18					 
5c18					if DEBUG_FORTH_WORDS 
5c18						DMARK "VR2" 
5c18 f5				push af  
5c19 3a 2d 5c			ld a, (.dmark)  
5c1c 32 a6 fd			ld (debug_mark),a  
5c1f 3a 2e 5c			ld a, (.dmark+1)  
5c22 32 a7 fd			ld (debug_mark+1),a  
5c25 3a 2f 5c			ld a, (.dmark+2)  
5c28 32 a8 fd			ld (debug_mark+2),a  
5c2b 18 03			jr .pastdmark  
5c2d ..			.dmark: db "VR2"  
5c30 f1			.pastdmark: pop af  
5c31			endm  
# End of macro DMARK
5c31						CALLMONITOR 
5c31 cd aa fd			call debug_vector  
5c34				endm  
# End of macro CALLMONITOR
5c34					endif 
5c34			 
5c34 21 2f f9				ld hl, cli_var_array2 
5c37 cd db 0f				call addatohl 
5c3a cd 2f 20				call forth_push_numhl 
5c3d			 
5c3d			 
5c3d				       NEXTW 
5c3d c3 ea 23			jp macro_next 
5c40				endm 
# End of macro NEXTW
5c40			.V0: 
5c40				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
5c40 78				db WORD_SYS_CORE+100             
5c41 58 5c			dw .V0Q            
5c43 04				db 3 + 1 
5c44 .. 00			db "V0!",0              
5c48				endm 
# End of macro CWHEAD
5c48			;| V0! ( u1 -- )  Store value to v0  | DONE 
5c48			 
5c48					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c48 cd 34 22			call macro_dsp_valuehl 
5c4b				endm 
# End of macro FORTH_DSP_VALUEHL
5c4b			 
5c4b 11 63 f9				ld de, cli_var_array 
5c4e			 
5c4e eb					ex de, hl 
5c4f 73					ld (hl), e 
5c50 23					inc hl 
5c51 72					ld (hl), d 
5c52			 
5c52					; destroy value TOS 
5c52			 
5c52					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5c52 cd ec 22			call macro_forth_dsp_pop 
5c55				endm 
# End of macro FORTH_DSP_POP
5c55			 
5c55				       NEXTW 
5c55 c3 ea 23			jp macro_next 
5c58				endm 
# End of macro NEXTW
5c58			.V0Q: 
5c58				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
5c58 79				db WORD_SYS_CORE+101             
5c59 69 5c			dw .V1S            
5c5b 04				db 3 + 1 
5c5c .. 00			db "V0@",0              
5c60				endm 
# End of macro CWHEAD
5c60			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5c60 2a 63 f9				ld hl, (cli_var_array) 
5c63 cd 2f 20				call forth_push_numhl 
5c66			 
5c66				       NEXTW 
5c66 c3 ea 23			jp macro_next 
5c69				endm 
# End of macro NEXTW
5c69			.V1S: 
5c69				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
5c69 7a				db WORD_SYS_CORE+102             
5c6a 81 5c			dw .V1Q            
5c6c 04				db 3 + 1 
5c6d .. 00			db "V1!",0              
5c71				endm 
# End of macro CWHEAD
5c71			;| V1! ( u1 -- )  Store value to v1 | DONE 
5c71					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c71 cd 34 22			call macro_dsp_valuehl 
5c74				endm 
# End of macro FORTH_DSP_VALUEHL
5c74			 
5c74 11 65 f9				ld de, cli_var_array+2 
5c77				 
5c77 eb					ex de, hl 
5c78 73					ld (hl), e 
5c79 23					inc hl 
5c7a 72					ld (hl), d 
5c7b			 
5c7b					; destroy value TOS 
5c7b			 
5c7b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5c7b cd ec 22			call macro_forth_dsp_pop 
5c7e				endm 
# End of macro FORTH_DSP_POP
5c7e				       NEXTW 
5c7e c3 ea 23			jp macro_next 
5c81				endm 
# End of macro NEXTW
5c81			.V1Q: 
5c81				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5c81 7b				db WORD_SYS_CORE+103             
5c82 92 5c			dw .V2S            
5c84 04				db 3 + 1 
5c85 .. 00			db "V1@",0              
5c89				endm 
# End of macro CWHEAD
5c89			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5c89 2a 65 f9				ld hl, (cli_var_array+2) 
5c8c cd 2f 20				call forth_push_numhl 
5c8f				       NEXTW 
5c8f c3 ea 23			jp macro_next 
5c92				endm 
# End of macro NEXTW
5c92			.V2S: 
5c92				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
5c92 7c				db WORD_SYS_CORE+104             
5c93 aa 5c			dw .V2Q            
5c95 04				db 3 + 1 
5c96 .. 00			db "V2!",0              
5c9a				endm 
# End of macro CWHEAD
5c9a			;| V2! ( u1 -- )  Store value to v2 | DONE 
5c9a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c9a cd 34 22			call macro_dsp_valuehl 
5c9d				endm 
# End of macro FORTH_DSP_VALUEHL
5c9d			 
5c9d 11 67 f9				ld de, cli_var_array+4 
5ca0				 
5ca0 eb					ex de, hl 
5ca1 73					ld (hl), e 
5ca2 23					inc hl 
5ca3 72					ld (hl), d 
5ca4			 
5ca4					; destroy value TOS 
5ca4			 
5ca4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5ca4 cd ec 22			call macro_forth_dsp_pop 
5ca7				endm 
# End of macro FORTH_DSP_POP
5ca7				       NEXTW 
5ca7 c3 ea 23			jp macro_next 
5caa				endm 
# End of macro NEXTW
5caa			.V2Q: 
5caa				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5caa 7d				db WORD_SYS_CORE+105             
5cab bb 5c			dw .V3S            
5cad 04				db 3 + 1 
5cae .. 00			db "V2@",0              
5cb2				endm 
# End of macro CWHEAD
5cb2			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
5cb2 2a 67 f9				ld hl, (cli_var_array+4) 
5cb5 cd 2f 20				call forth_push_numhl 
5cb8				       NEXTW 
5cb8 c3 ea 23			jp macro_next 
5cbb				endm 
# End of macro NEXTW
5cbb			.V3S: 
5cbb				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5cbb 7c				db WORD_SYS_CORE+104             
5cbc d3 5c			dw .V3Q            
5cbe 04				db 3 + 1 
5cbf .. 00			db "V3!",0              
5cc3				endm 
# End of macro CWHEAD
5cc3			;| V3! ( u1 -- )  Store value to v3 | DONE 
5cc3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5cc3 cd 34 22			call macro_dsp_valuehl 
5cc6				endm 
# End of macro FORTH_DSP_VALUEHL
5cc6			 
5cc6 11 69 f9				ld de, cli_var_array+6 
5cc9				 
5cc9 eb					ex de, hl 
5cca 73					ld (hl), e 
5ccb 23					inc hl 
5ccc 72					ld (hl), d 
5ccd			 
5ccd					; destroy value TOS 
5ccd			 
5ccd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5ccd cd ec 22			call macro_forth_dsp_pop 
5cd0				endm 
# End of macro FORTH_DSP_POP
5cd0				       NEXTW 
5cd0 c3 ea 23			jp macro_next 
5cd3				endm 
# End of macro NEXTW
5cd3			.V3Q: 
5cd3				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
5cd3 7d				db WORD_SYS_CORE+105             
5cd4 e4 5c			dw .END            
5cd6 04				db 3 + 1 
5cd7 .. 00			db "V3@",0              
5cdb				endm 
# End of macro CWHEAD
5cdb			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5cdb 2a 69 f9				ld hl, (cli_var_array+6) 
5cde cd 2f 20				call forth_push_numhl 
5ce1				       NEXTW 
5ce1 c3 ea 23			jp macro_next 
5ce4				endm 
# End of macro NEXTW
5ce4			 
5ce4			 
5ce4			 
5ce4			 
5ce4			 
5ce4			; end of dict marker 
5ce4			 
5ce4 00			.END:    db WORD_SYS_END 
5ce5 00 00			dw 0 
5ce7 00				db 0 
5ce8			 
5ce8			; use to jp here for user dict words to save on macro expansion  
5ce8			 
5ce8			user_dict_next: 
5ce8				NEXTW 
5ce8 c3 ea 23			jp macro_next 
5ceb				endm 
# End of macro NEXTW
5ceb			 
5ceb			 
5ceb			user_exec: 
5ceb				;    ld hl, <word code> 
5ceb				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
5ceb				;    call forthexec 
5ceb				;    jp user_dict_next   (NEXT) 
5ceb			        ;    <word code bytes> 
5ceb eb				ex de, hl 
5cec 2a fd f3			ld hl,(os_tok_ptr) 
5cef				 
5cef				FORTH_RSP_NEXT 
5cef cd d6 1f			call macro_forth_rsp_next 
5cf2				endm 
# End of macro FORTH_RSP_NEXT
5cf2			 
5cf2			if DEBUG_FORTH_UWORD 
5cf2						DMARK "UEX" 
5cf2 f5				push af  
5cf3 3a 07 5d			ld a, (.dmark)  
5cf6 32 a6 fd			ld (debug_mark),a  
5cf9 3a 08 5d			ld a, (.dmark+1)  
5cfc 32 a7 fd			ld (debug_mark+1),a  
5cff 3a 09 5d			ld a, (.dmark+2)  
5d02 32 a8 fd			ld (debug_mark+2),a  
5d05 18 03			jr .pastdmark  
5d07 ..			.dmark: db "UEX"  
5d0a f1			.pastdmark: pop af  
5d0b			endm  
# End of macro DMARK
5d0b				CALLMONITOR 
5d0b cd aa fd			call debug_vector  
5d0e				endm  
# End of macro CALLMONITOR
5d0e			endif 
5d0e			 
5d0e			 
5d0e			 
5d0e eb				ex de, hl 
5d0f 22 fd f3			ld (os_tok_ptr), hl 
5d12				 
5d12				; Don't use next - Skips the first word in uword. 
5d12			 
5d12 c3 7b 24			jp exec1 
5d15			;	NEXT 
5d15			 
5d15			 
5d15			; eof 
# End of file forth_wordsv4.asm
5d15			endif 
5d15			;;;;;;;;;;;;;; Debug code 
5d15			 
5d15			 
5d15			;if DEBUG_FORTH_PARSE 
5d15 .. 00		.nowordfound: db "No match",0 
5d1e .. 00		.compword:	db "Comparing word ",0 
5d2e .. 00		.nextwordat:	db "Next word at",0 
5d3b .. 00		.charmatch:	db "Char match",0 
5d46			;endif 
5d46			if DEBUG_FORTH_JP 
5d46			.foundword:	db "Word match. Exec..",0 
5d46			endif 
5d46			;if DEBUG_FORTH_PUSH 
5d46 .. 00		.enddict:	db "Dict end. Push.",0 
5d56 .. 00		.push_str:	db "Pushing string",0 
5d65 .. 00		.push_num:	db "Pushing number",0 
5d74 .. 00		.data_sp:	db "SP:",0 
5d78 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5d8a .. 00		.wordinde:	db "Word in DE (3/0):",0 
5d9c .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5dae			;endif 
5dae			;if DEBUG_FORTH_MALLOC 
5dae .. 00		.push_malloc:	db "Malloc address",0 
5dbd			;endif 
5dbd			 
5dbd			 
5dbd			 
5dbd			; display malloc address and current data stack pointer  
5dbd			 
5dbd			malloc_error: 
5dbd d5				push de 
5dbe f5				push af 
5dbf e5				push hl 
5dc0 cd a7 0d			call clear_display 
5dc3 11 e3 5d			ld de, .mallocerr 
5dc6 3e 00			ld a,0 
5dc8			;	ld de,os_word_scratch 
5dc8 cd ba 0d			call str_at_display 
5dcb 3e 11			ld a, display_row_1+17 
5dcd 11 a6 fd			ld de, debug_mark 
5dd0 cd ba 0d			call str_at_display 
5dd3 cd ca 0d			call update_display 
5dd6				;call break_point_state 
5dd6 cd b3 72			call cin_wait 
5dd9			 
5dd9			;	ld a, ' ' 
5dd9			;	ld (os_view_disable), a 
5dd9 cd 44 19			call bp_on 
5ddc e1				pop hl 
5ddd f1				pop af 
5dde d1				pop de	 
5ddf				CALLMONITOR 
5ddf cd aa fd			call debug_vector  
5de2				endm  
# End of macro CALLMONITOR
5de2 c9				ret 
5de3			 
5de3 .. 00		.mallocerr: 	db "Malloc Error",0 
5df0			;if DEBUG_FORTH_PUSH 
5df0			display_data_sp: 
5df0 f5				push af 
5df1			 
5df1				; see if disabled 
5df1			 
5df1			 
5df1 3a aa fd			ld a, (debug_vector) 
5df4 fe c9			cp $C9  ; RET 
5df6				;ld a, (os_view_disable) 
5df6				;cp '*' 
5df6 28 67			jr z, .skipdsp 
5df8			 
5df8 e5				push hl 
5df9 e5				push hl 
5dfa e5			push hl 
5dfb cd a7 0d			call clear_display 
5dfe e1			pop hl 
5dff 7c				ld a,h 
5e00 21 01 f4			ld hl, os_word_scratch 
5e03 cd e4 11			call hexout 
5e06 e1				pop hl 
5e07 7d				ld a,l 
5e08 21 03 f4			ld hl, os_word_scratch+2 
5e0b cd e4 11			call hexout 
5e0e 21 05 f4			ld hl, os_word_scratch+4 
5e11 3e 00			ld a,0 
5e13 77				ld (hl),a 
5e14 11 01 f4			ld de,os_word_scratch 
5e17 3e 28				ld a, display_row_2 
5e19 cd ba 0d				call str_at_display 
5e1c 11 78 5d			ld de, .wordinhl 
5e1f 3e 00			ld a, display_row_1 
5e21			 
5e21 cd ba 0d				call str_at_display 
5e24 11 a6 fd			ld de, debug_mark 
5e27 3e 11			ld a, display_row_1+17 
5e29			 
5e29 cd ba 0d				call str_at_display 
5e2c			 
5e2c				; display current data stack pointer 
5e2c 11 74 5d			ld de,.data_sp 
5e2f 3e 30				ld a, display_row_2 + 8 
5e31 cd ba 0d				call str_at_display 
5e34			 
5e34 2a 29 f9			ld hl,(cli_data_sp) 
5e37 e5				push hl 
5e38 7c				ld a,h 
5e39 21 01 f4			ld hl, os_word_scratch 
5e3c cd e4 11			call hexout 
5e3f e1				pop hl 
5e40 7d				ld a,l 
5e41 21 03 f4			ld hl, os_word_scratch+2 
5e44 cd e4 11			call hexout 
5e47 21 05 f4			ld hl, os_word_scratch+4 
5e4a 3e 00			ld a,0 
5e4c 77				ld (hl),a 
5e4d 11 01 f4			ld de,os_word_scratch 
5e50 3e 33				ld a, display_row_2 + 11 
5e52 cd ba 0d				call str_at_display 
5e55			 
5e55			 
5e55 cd ca 0d			call update_display 
5e58 cd ea 0c			call delay1s 
5e5b cd ea 0c			call delay1s 
5e5e e1				pop hl 
5e5f			.skipdsp: 
5e5f f1				pop af 
5e60 c9				ret 
5e61			 
5e61			display_data_malloc: 
5e61			 
5e61 f5				push af 
5e62 e5				push hl 
5e63 e5				push hl 
5e64 e5			push hl 
5e65 cd a7 0d			call clear_display 
5e68 e1			pop hl 
5e69 7c				ld a,h 
5e6a 21 01 f4			ld hl, os_word_scratch 
5e6d cd e4 11			call hexout 
5e70 e1				pop hl 
5e71 7d				ld a,l 
5e72 21 03 f4			ld hl, os_word_scratch+2 
5e75 cd e4 11			call hexout 
5e78 21 05 f4			ld hl, os_word_scratch+4 
5e7b 3e 00			ld a,0 
5e7d 77				ld (hl),a 
5e7e 11 01 f4			ld de,os_word_scratch 
5e81 3e 28				ld a, display_row_2 
5e83 cd ba 0d				call str_at_display 
5e86 11 ae 5d			ld de, .push_malloc 
5e89 3e 00			ld a, display_row_1 
5e8b			 
5e8b cd ba 0d				call str_at_display 
5e8e			 
5e8e				; display current data stack pointer 
5e8e 11 74 5d			ld de,.data_sp 
5e91 3e 30				ld a, display_row_2 + 8 
5e93 cd ba 0d				call str_at_display 
5e96			 
5e96 2a 29 f9			ld hl,(cli_data_sp) 
5e99 e5				push hl 
5e9a 7c				ld a,h 
5e9b 21 01 f4			ld hl, os_word_scratch 
5e9e cd e4 11			call hexout 
5ea1 e1				pop hl 
5ea2 7d				ld a,l 
5ea3 21 03 f4			ld hl, os_word_scratch+2 
5ea6 cd e4 11			call hexout 
5ea9 21 05 f4			ld hl, os_word_scratch+4 
5eac 3e 00			ld a,0 
5eae 77				ld (hl),a 
5eaf 11 01 f4			ld de,os_word_scratch 
5eb2 3e 33				ld a, display_row_2 + 11 
5eb4 cd ba 0d				call str_at_display 
5eb7			 
5eb7 cd ca 0d			call update_display 
5eba cd ea 0c			call delay1s 
5ebd cd ea 0c			call delay1s 
5ec0 e1				pop hl 
5ec1 f1				pop af 
5ec2 c9				ret 
5ec3			;endif 
5ec3			 
5ec3			include "forth_autostart.asm" 
5ec3			; list of commands to perform at system start up 
5ec3			 
5ec3			startcmds: 
5ec3			;	dw test11 
5ec3			;	dw test12 
5ec3			;	dw test13 
5ec3			;	dw test14 
5ec3			;	dw test15 
5ec3			;	dw test16 
5ec3			;	dw test17 
5ec3			;	dw ifthtest1 
5ec3			;	dw ifthtest2 
5ec3			;	dw ifthtest3 
5ec3			;	dw mmtest1 
5ec3			;	dw mmtest2 
5ec3			;	dw mmtest3 
5ec3			;	dw mmtest4 
5ec3			;	dw mmtest5 
5ec3			;	dw mmtest6 
5ec3			;	dw iftest1 
5ec3			;	dw iftest2 
5ec3			;	dw iftest3 
5ec3			;	dw looptest1 
5ec3			;	dw looptest2 
5ec3			;	dw test1 
5ec3			;	dw test2 
5ec3			;	dw test3 
5ec3			;	dw test4 
5ec3			;	dw game2r 
5ec3			;	dw game2b1 
5ec3			;	dw game2b2 
5ec3			 
5ec3				; start up words that are actually useful 
5ec3			 
5ec3			;    dw spi1 
5ec3			;    dw spi2 
5ec3			;    dw spi3 
5ec3			;    dw spi4 
5ec3			;    dw spi5 
5ec3			;    dw spi6 
5ec3			;    dw spi7 
5ec3			; 
5ec3			;    dw spi8 
5ec3			;    dw spi9 
5ec3			;    dw spi10 
5ec3			 
5ec3			; file editor 
5ec3			;	dw edit1 
5ec3			;	dw edit2 
5ec3			;	dw edit3 
5ec3			 
5ec3			;	dw longread 
5ec3 e3 62			dw clrstack 
5ec5 17 63			dw type 
5ec7			;	dw stest 
5ec7 3c 63			dw strncpy 
5ec9			;	dw list 
5ec9 9d 63			dw start1 
5ecb ad 63			dw start2 
5ecd			;	dw start3 
5ecd			;	dw start3b 
5ecd			;	dw start3c 
5ecd			 
5ecd				; (unit) testing words 
5ecd			 
5ecd			;	dw mtesta 
5ecd			;	dw mtestb 
5ecd			;	dw mtestc 
5ecd			;	dw mtestd 
5ecd			;	dw mteste 
5ecd			 
5ecd				; demo/game words 
5ecd			 
5ecd			;        dw game3w 
5ecd			;        dw game3p 
5ecd			;        dw game3sc 
5ecd			;        dw game3vsi 
5ecd			;        dw game3vs 
5ecd				 
5ecd			;	dw game2b 
5ecd			;	dw game2bf 
5ecd			;	dw game2mba 
5ecd			;	dw game2mbas 
5ecd			;	dw game2mb 
5ecd			 
5ecd ca 66			dw game1 
5ecf db 66			dw game1a 
5ed1 3d 67			dw game1b 
5ed3 72 67			dw game1c 
5ed5 a8 67			dw game1d 
5ed7 d9 67			dw game1s 
5ed9 ed 67			dw game1t 
5edb 02 68			dw game1f 
5edd 36 68			dw game1z 
5edf 7a 68			dw game1zz 
5ee1			 
5ee1 03 65			dw test5 
5ee3 3b 65			dw test6 
5ee5 73 65			dw test7 
5ee7 87 65			dw test8 
5ee9 b3 65			dw test9 
5eeb c9 65			dw test10 
5eed				 
5eed 51 69		        dw ssv5 
5eef 35 69		        dw ssv4 
5ef1 19 69		        dw ssv3 
5ef3 e3 68		        dw ssv2 
5ef5 6a 69		        dw ssv1 
5ef7 b2 69		        dw ssv1cpm 
5ef9			;	dw keyup 
5ef9			;	dw keydown 
5ef9			;	dw keyleft 
5ef9			;	dw keyright 
5ef9			;	dw 	keyf1 
5ef9			;	dw keyf2 
5ef9			;	dw keyf3 
5ef9			;	dw keyf4 
5ef9			;	dw keyf5 
5ef9			;	dw keyf6 
5ef9			;	dw keyf7 
5ef9			;	dw keyf8 
5ef9			;	dw keyf9 
5ef9			;	dw keyf10 
5ef9			;	dw keyf11 
5ef9			;	dw keyf12 
5ef9			;	dw keytab 
5ef9			;	dw keycr 
5ef9			;	dw keyhome 
5ef9			;	dw keyend 
5ef9			;	dw keybs 
5ef9 00 00			db 0, 0	 
5efb			 
5efb			 
5efb			; File Editor 
5efb			 
5efb			; ( id - ) use 'e' to edit the displayed line 
5efb .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
5f1c .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5f51			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5f51 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
5f89			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
5f89			 
5f89			; SPI Net support words 
5f89			 
5f89			; v0! = node to send to 
5f89			; ( str count - ) 
5f89 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
5fe2			 
5fe2			; spiputc ( char node - ) 
5fe2 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
6016			; spiputc ( u node - ) 
6016 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
6044			 
6044			; spigetc ( - n ) 
6044 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
606d			 
606d			; getnode ( - n ) 
606d .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
609a			 
609a			; ( str node - )  
609a .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
6100			; store string ( str i - ) 
6100			 
6100			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
6100 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
6155			 
6155			; get string ( addr i -  )    TO FIX 
6155			 
6155 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
61ad			 
61ad			 
61ad			; NETCHAT (TODO) 
61ad			; Program to allow two nodes to chat with eachother 
61ad			; 
61ad			; v0 - target node 
61ad			;  
61ad			; accept input at 0,0 
61ad			; if input is string send spitype to target node 
61ad			; starting at row 2,0 , while spigetchr is not zero ->  
61ad			; 
61ad			; 
61ad			; TODO add paging of get request 
61ad			 
61ad			; ( node - ) 
61ad .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
61cc .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
6224 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
629c			 
629c			 
629c			; Long read of currently open file 
629c .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
62e3			 
62e3			; clear stack  
62e3			 
62e3 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
6317			 
6317			; type ( addr count - ) 
6317 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
633c			 
633c			; some direct memory words 
633c			; strncpy ( len t f -- t ) 
633c			 
633c .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
639d			 
639d .. 00		start1:     	db ": bpon $00 bp ;",0 
63ad .. 00		start2:     	db ": bpoff $01 bp ;",0 
63be .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
6439 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
6499			 
6499			 
6499			; a handy word to list items on the stack 
6499			 
6499 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
6503			 
6503			 
6503			; test stack  
6503			; rnd8 stest 
6503			 
6503			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
6503			 
6503			; random malloc and free cycles 
6503			 
6503			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
6503			 
6503			; fixed malloc and free cycles 
6503			 
6503			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
6503			 
6503			; fixed double string push and drop cycle  
6503			 
6503			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
6503			 
6503			; consistent fixed string push and drop cycle  
6503			 
6503			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6503			 
6503			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6503			 
6503			;test1:		db ": aa 1 2 3 ;", 0 
6503			;test2:     	db "111 aa 888 999",0 
6503			;test3:     	db ": bb 77 ;",0 
6503			;test4:     	db "$02 $01 do i . loop bb",0 
6503			 
6503 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
653b .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
6573 .. 00		test7:     	db ": box hline vline ;",0 
6587 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
65b3 .. 00		test9:     	db ": sw $01 adsp world ;",0 
65c9 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
65ee			;test11:     	db "hello create .",0 
65ee			;test12:     	db "hello2 create .",0 
65ee			 
65ee			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
65ee			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
65ee			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
65ee			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
65ee			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
65ee			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
65ee			 
65ee			;iftest1:     	db "$0001 IF cls .",0 
65ee			;iftest2:     	db "$0000 IF cls .",0 
65ee			;iftest3:     	db "$0002 $0003 - IF cls .",0 
65ee			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
65ee			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
65ee			 
65ee			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
65ee			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
65ee			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
65ee			 
65ee			 
65ee .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
6612 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
6642 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
6667 .. 00		sound4: db ": cha $00 ; ",0 
6674 .. 00		sound5: db ": chb $20 ; ",0 
6681 .. 00		sound6: db ": chc $40 ; ",0 
668e .. 00		sound7: db ": chd $60 ; ",0 
669b .. 00		sound8: db ": cnote $80 + + note ; ", 0 
66b3 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
66ca			 
66ca			 
66ca			 
66ca			 
66ca			; a small guess the number game 
66ca			 
66ca .. 00		game1:          db ": gsn rnd8 v1! ;",0 
66db .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
673d			 
673d .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
6772 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
67a8 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
67d9 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
67ed .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
6802 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
6836 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
687a			 
687a			; Using 'ga' save a high score across multiple runs using external storage 
687a			 
687a .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
68e3			 
68e3			 
68e3			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
68e3			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
68e3			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
68e3			 
68e3			; simple screen saver to test code memory reuse to destruction 
68e3			 
68e3 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
6919 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
6935 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
6951 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
696a .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
69b2 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
6a09			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
6a09			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
6a09			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
6a09			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
6a09			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
6a09			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
6a09			 
6a09			 
6a09			 
6a09			; minesweeper/battleship finding game 
6a09			; draws a game board of random ship/mine positions 
6a09			; user enters coords to see if it hits on 
6a09			; game ends when all are hit 
6a09			; when hit or miss says how many may be in the area 
6a09			 
6a09			; setup the game board and then hide it 
6a09			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
6a09			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
6a09			;; prompt for where to target 
6a09			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
6a09			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
6a09			;; TODO see if the entered coords hits or misses pushes char hit of miss 
6a09			;game2mbht:      db ": mbckht nop ;",0 
6a09			;game2mbms:      db ": mbcms nop ;",0 
6a09			; TODO how many might be near by 
6a09			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
6a09			 
6a09			; Game 3 
6a09			 
6a09			; Vert scroller ski game - avoid the trees! 
6a09			 
6a09			; v0 score (ie turns) 
6a09			; v1 player pos 
6a09			; v2 left wall 
6a09			; v3 right wall 
6a09			 
6a09			; Draw side walls randomly 
6a09			 
6a09			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
6a09			 
6a09			; Draw player 
6a09			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
6a09			 
6a09			; TODO Get Key 
6a09			 
6a09			; TODO Move left right 
6a09			 
6a09			; scroll and move walls a bit 
6a09			 
6a09			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
6a09			 
6a09			; main game loop 
6a09			 
6a09			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
6a09			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
6a09			 
6a09			; key board defs 
6a09			 
6a09 .. 00		keyup:       db ": keyup $05 ;",0 
6a17 .. 00		keydown:       db ": keydown $0a ;",0 
6a27 .. 00		keyleft:       db ": keyleft $0b ;",0 
6a37 .. 00		keyright:       db ": keyright $0c ;",0 
6a48 .. 00		keyf1:       db ": keyf1 $10 ;",0 
6a56 .. 00		keyf2:       db ": keyf2 $11 ;",0 
6a64 .. 00		keyf3:       db ": keyf3 $12 ;",0 
6a72 .. 00		keyf4:       db ": keyf4 $13 ;",0 
6a80 .. 00		keyf5:       db ": keyf5 $14 ;",0 
6a8e .. 00		keyf6:       db ": keyf6 $15 ;",0 
6a9c .. 00		keyf7:       db ": keyf7 $16 ;",0 
6aaa .. 00		keyf8:       db ": keyf8 $17 ;",0 
6ab8 .. 00		keyf9:       db ": keyf9 $18 ;",0 
6ac6 .. 00		keyf10:       db ": keyf10 $19 ;",0 
6ad5 .. 00		keyf11:       db ": keyf11 $1a ;",0 
6ae4 .. 00		keyf12:       db ": keyf12 $1b ;",0 
6af3			 
6af3 .. 00		keytab:       db ": keytab $09 ;",0 
6b02 .. 00		keycr:       db ": keycr $0d ;",0 
6b10 .. 00		keyhome:       db ": keyhome $0e ;",0 
6b20 .. 00		keyend:       db ": keyend $0f ;",0 
6b2f .. 00		keybs:       db ": keybs $08 ;",0 
6b3d			 
6b3d			   
6b3d			 
6b3d			 
6b3d			 
6b3d			; eof 
# End of file forth_autostart.asm
6b3d			 
6b3d			 
6b3d			 
6b3d			; stack over and underflow checks 
6b3d			 
6b3d			; init the words to detect the under/overflow 
6b3d			 
6b3d			chk_stk_init: 
6b3d				; a vague random number to check so we dont get any "lucky" hits 
6b3d 3e 2d			ld a, 45 
6b3f 6f				ld l, a 
6b40 00				nop 
6b41 3e 17			ld a, 23 
6b43 67				ld h, a 
6b44			 
6b44 22 d8 f0			ld (chk_word), hl     ; the word we need to check against 
6b47			 
6b47			;	ld (chk_stund), hl	; stack points.... 
6b47 22 3b fe			ld (chk_stovr), hl 
6b4a 22 27 f9			ld (chk_ret_und), hl 
6b4d 22 e5 f8			ld (chk_ret_ovr), hl 
6b50 22 63 f8			ld (chk_loop_ovr), hl 
6b53 22 61 f6			ld (chk_data_ovr), hl 
6b56 c9				ret 
6b57				 
6b57			check_stacks: 
6b57				; check all stack words 
6b57			 
6b57 e5				push hl 
6b58 d5				push de 
6b59			 
6b59			;	ld de,(chk_word) 
6b59			;	ld hl, (chk_stund)	; stack points.... 
6b59			;	if DEBUG_STK_FAULT 
6b59			;		DMARK "FAa" 
6b59			;		CALLMONITOR 
6b59			;	endif 
6b59			;	call cmp16 
6b59			;	jp z, .chk_faulta 
6b59			; 
6b59			;	ld de, sfaultsu 
6b59			;	jp .chk_fault 
6b59			 
6b59 2a 3b fe		.chk_faulta: ld hl, (chk_stovr) 
6b5c ed 5b d8 f0		ld de,(chk_word) 
6b60				if DEBUG_STK_FAULT 
6b60					DMARK "FAb" 
6b60					CALLMONITOR 
6b60				endif 
6b60 cd f9 0f			call cmp16 
6b63 28 06			jr z, .chk_fault1 
6b65 11 09 6c			ld de, sfaultso 
6b68 c3 ba 6b			jp .chk_fault 
6b6b			.chk_fault1:  
6b6b 2a 27 f9			ld hl, (chk_ret_und) 
6b6e ed 5b d8 f0		ld de,(chk_word) 
6b72				if DEBUG_STK_FAULT 
6b72					DMARK "FAU" 
6b72					CALLMONITOR 
6b72				endif 
6b72 cd f9 0f			call cmp16 
6b75 ca 7e 6b			jp z, .chk_fault2 
6b78 11 19 6c			ld de, sfaultru 
6b7b c3 ba 6b			jp .chk_fault 
6b7e			.chk_fault2:  
6b7e 2a e5 f8			ld hl, (chk_ret_ovr) 
6b81 ed 5b d8 f0		ld de,(chk_word) 
6b85				if DEBUG_STK_FAULT 
6b85					DMARK "FA1" 
6b85					CALLMONITOR 
6b85				endif 
6b85 cd f9 0f			call cmp16 
6b88 ca 91 6b			jp z, .chk_fault3 
6b8b 11 27 6c			ld de, sfaultro 
6b8e c3 ba 6b			jp .chk_fault 
6b91			.chk_fault3:  
6b91 2a 63 f8			ld hl, (chk_loop_ovr) 
6b94 ed 5b d8 f0		ld de,(chk_word) 
6b98				if DEBUG_STK_FAULT 
6b98					DMARK "FA2" 
6b98					CALLMONITOR 
6b98				endif 
6b98 cd f9 0f			call cmp16 
6b9b ca a4 6b			jp z, .chk_fault4 
6b9e 11 41 6c			ld de, sfaultlo 
6ba1 c3 ba 6b			jp .chk_fault 
6ba4			.chk_fault4:  
6ba4 2a 61 f6			ld hl, (chk_data_ovr) 
6ba7 ed 5b d8 f0		ld de,(chk_word) 
6bab				if DEBUG_STK_FAULT 
6bab					DMARK "FA3" 
6bab					CALLMONITOR 
6bab				endif 
6bab cd f9 0f			call cmp16 
6bae ca b7 6b			jp z, .chk_fault5 
6bb1 11 5b 6c			ld de, sfaultdo 
6bb4 c3 ba 6b			jp .chk_fault 
6bb7			 
6bb7			 
6bb7			.chk_fault5:  
6bb7 d1				pop de 
6bb8 e1				pop hl 
6bb9			 
6bb9 c9				ret 
6bba			 
6bba cd a7 0d		.chk_fault: 	call clear_display 
6bbd 3e 28				ld a, display_row_2 
6bbf cd ba 0d				call str_at_display 
6bc2 11 eb 6b				   ld de, .stackfault 
6bc5 3e 00				ld a, display_row_1 
6bc7 cd ba 0d				call str_at_display 
6bca 11 a6 fd				    ld de, debug_mark 
6bcd 3e 11				ld a, display_row_1+17 
6bcf cd ba 0d				call str_at_display 
6bd2 cd ca 0d				call update_display 
6bd5			 
6bd5				; prompt before entering montior for investigating issue 
6bd5			 
6bd5 3e 78			ld a, display_row_4 
6bd7 11 21 1d			ld de, endprog 
6bda			 
6bda cd ca 0d			call update_display		 
6bdd			 
6bdd cd a7 1f			call next_page_prompt 
6be0			 
6be0 d1				pop de 
6be1 e1				pop hl 
6be2 cd 75 1d				call monitor 
6be5 cd 90 23				call forth_warmstart 
6be8 c3 71 1c				jp warmstart_afterauto 
6beb					;jp 0 
6beb					;halt 
6beb			 
6beb			 
6beb			 
6beb .. 00		.stackfault: 	db "Stack fault:",0 
6bf8			 
6bf8 .. 00		sfaultsu: 	db	"Stack under flow",0 
6c09 .. 00		sfaultso: 	db	"Stack over flow",0 
6c19 .. 00		sfaultru:	db "RTS underflow",0 
6c27 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
6c41 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
6c5b .. 00		sfaultdo:	db "DTS overflow", 0 
6c68			 
6c68			 
6c68			fault_dsp_under: 
6c68 11 7a 6c			ld de, .dsp_under 
6c6b c3 30 6d			jp .show_fault 
6c6e			 
6c6e			fault_rsp_under: 
6c6e 11 88 6c			ld de, .rsp_under 
6c71 c3 30 6d			jp .show_fault 
6c74			fault_loop_under: 
6c74 11 96 6c			ld de, .loop_under 
6c77 c3 30 6d			jp .show_fault 
6c7a			 
6c7a .. 00		.dsp_under: db "DSP Underflow",0 
6c88 .. 00		.rsp_under: db "RSP Underflow",0 
6c96 .. 00		.loop_under: db "LOOP Underflow",0 
6ca5			 
6ca5			 
6ca5 d5			type_faultn: 	push de 
6ca6 e5					push hl 
6ca7 cd a7 0d				call clear_display 
6caa 11 d4 6c				   ld de, .typefaultn 
6cad 3e 00				ld a, display_row_1 
6caf cd ba 0d				call str_at_display 
6cb2 11 a6 fd				    ld de, debug_mark 
6cb5 3e 11				ld a, display_row_1+17 
6cb7 cd ba 0d				call str_at_display 
6cba cd ca 0d				call update_display 
6cbd			 
6cbd				; prompt before entering montior for investigating issue 
6cbd			 
6cbd 3e 78			ld a, display_row_4 
6cbf 11 21 1d			ld de, endprog 
6cc2			 
6cc2 cd ca 0d			call update_display		 
6cc5			 
6cc5 cd a7 1f			call next_page_prompt 
6cc8			 
6cc8 e5					push hl 
6cc9 d5					push de 
6cca cd 75 1d				call monitor 
6ccd cd 90 23				call forth_warmstart 
6cd0 c3 71 1c				jp warmstart_afterauto 
6cd3 76					halt 
6cd4			 
6cd4			 
6cd4 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
6ceb			 
6ceb d5			type_faults: 	push de 
6cec e5					push hl 
6ced cd a7 0d				call clear_display 
6cf0 11 19 6d				   ld de, .typefaults 
6cf3 3e 00				ld a, display_row_1 
6cf5 cd ba 0d				call str_at_display 
6cf8 11 a6 fd				    ld de, debug_mark 
6cfb 3e 11				ld a, display_row_1+17 
6cfd cd ba 0d				call str_at_display 
6d00 cd ca 0d				call update_display 
6d03			 
6d03				; prompt before entering montior for investigating issue 
6d03			 
6d03 3e 78			ld a, display_row_4 
6d05 11 21 1d			ld de, endprog 
6d08			 
6d08 cd ca 0d			call update_display		 
6d0b			 
6d0b cd a7 1f			call next_page_prompt 
6d0e			 
6d0e e1					pop hl 
6d0f d1					pop de 
6d10 cd 75 1d				call monitor 
6d13 cd 90 23				call forth_warmstart 
6d16 c3 71 1c				jp warmstart_afterauto 
6d19			 
6d19			 
6d19 .. 00		.typefaults: db "STR Type Expected TOS!",0 
6d30			 
6d30			.show_fault: 	 
6d30 d5					push de 
6d31 cd a7 0d				call clear_display 
6d34 d1					pop de 
6d35 3e 00				ld a, display_row_1 
6d37 cd ba 0d				call str_at_display 
6d3a 11 a6 fd				    ld de, debug_mark 
6d3d 3e 11				ld a, display_row_1+17 
6d3f cd ba 0d				call str_at_display 
6d42 cd ca 0d				call update_display 
6d45			 
6d45				; prompt before entering montior for investigating issue 
6d45			 
6d45 3e 78			ld a, display_row_4 
6d47 11 21 1d			ld de, endprog 
6d4a			 
6d4a cd ca 0d			call update_display		 
6d4d			 
6d4d cd a7 1f			call next_page_prompt 
6d50			 
6d50 e1					pop hl 
6d51 d1					pop de 
6d52 cd 75 1d				call monitor 
6d55			; do a dump to cli and not warmstart so we preserve all of the uwords.  
6d55			; TODO Make optional fault restart to cli or warm boot? 
6d55					;jp warmstart 
6d55 c3 b5 1c				jp cli 
6d58 76					halt 
6d59			 
6d59			; handle the auto run of code from files in storage 
6d59			 
6d59			 
6d59			include "forth_startup.asm" 
6d59			; Which startup method to use? 
6d59			; 
6d59			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
6d59			; followed by loading of a list of scripts in eeprom 
6d59			 
6d59			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
6d59			; from eeprom 
6d59			 
6d59			; Select with define in main stubs 
6d59			 
6d59			if STARTUP_V1 
6d59				include "forth_startupv1.asm" 
6d59			endif 
6d59			if STARTUP_V2 
6d59				include "forth_startupv2.asm" 
6d59			; Version 2 of the startup  
6d59			;  
6d59			; Auto load any files in bank 1 that start with a '*' 
6d59			; If no se storage then revert to using eprom 
6d59			 
6d59			 
6d59			if STORAGE_SE = 0 
6d59			 
6d59			sprompt1: db "Startup load...",0 
6d59			sprompt2: db "Run? 1=No *=End #=All",0 
6d59			 
6d59			 
6d59			 
6d59			 
6d59			forth_startup: 
6d59				ld hl, startcmds 
6d59				ld a, 0 
6d59				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
6d59			 
6d59			.start1:	push hl 
6d59				call clear_display 
6d59				ld de, sprompt1 
6d59			        ld a, display_row_1 
6d59				call str_at_display 
6d59				ld de, sprompt2 
6d59			        ld a, display_row_2 
6d59				call str_at_display 
6d59				pop hl 
6d59				push hl 
6d59				ld e,(hl) 
6d59				inc hl 
6d59				ld d,(hl) 
6d59			        ld a, display_row_3 
6d59				call str_at_display 
6d59				call update_display 
6d59			 
6d59			 
6d59				ld a, (os_last_cmd) 
6d59				cp 0 
6d59				jr z, .startprompt 
6d59				call delay250ms 
6d59				jr .startdo 
6d59				 
6d59				 
6d59			 
6d59			.startprompt: 
6d59			 
6d59				ld a,display_row_4 + display_cols - 1 
6d59			        ld de, endprg 
6d59				call str_at_display 
6d59				call update_display 
6d59				call delay1s 
6d59				call cin_wait 
6d59						 
6d59				cp '*' 
6d59				jr z, .startupend1 
6d59				cp '#' 
6d59				jr nz, .startno 
6d59				ld a, 1 
6d59				ld (os_last_cmd),a 
6d59				jr .startdo 
6d59			.startno:	cp '1' 
6d59				jr z,.startnxt  
6d59			 
6d59				; exec startup line 
6d59			.startdo:	 
6d59				pop hl 
6d59				push hl 
6d59				 
6d59				ld e,(hl) 
6d59				inc hl 
6d59				ld d,(hl) 
6d59				ex de,hl 
6d59			 
6d59				push hl 
6d59			 
6d59				ld a, 0 
6d59				;ld a, FORTH_END_BUFFER 
6d59				call strlent 
6d59				inc hl   ; include zero term to copy 
6d59				ld b,0 
6d59				ld c,l 
6d59				pop hl 
6d59				ld de, scratch 
6d59				ldir 
6d59			 
6d59			 
6d59				ld hl, scratch 
6d59				call forthparse 
6d59				call forthexec 
6d59				call forthexec_cleanup 
6d59			 
6d59				ld a, display_row_4 
6d59				ld de, endprog 
6d59			 
6d59				call update_display		 
6d59			 
6d59				ld a, (os_last_cmd) 
6d59				cp 0 
6d59				jr nz, .startnxt 
6d59				call next_page_prompt 
6d59			        call clear_display 
6d59				call update_display		 
6d59			 
6d59				; move onto next startup line? 
6d59			.startnxt: 
6d59			 
6d59				call delay250ms 
6d59				pop hl 
6d59			 
6d59				inc hl 
6d59				inc hl 
6d59			 
6d59				push hl 
6d59				ld e, (hl) 
6d59				inc hl 
6d59				ld d, (hl) 
6d59				pop hl 
6d59				; TODO replace 0 test 
6d59			 
6d59				ex de, hl 
6d59				call ishlzero 
6d59			;	ld a,e 
6d59			;	add d 
6d59			;	cp 0    ; any left to do? 
6d59				ex de, hl 
6d59				jp nz, .start1 
6d59				jr .startupend 
6d59			 
6d59			.startupend1: pop hl 
6d59			.startupend: 
6d59			 
6d59				call clear_display 
6d59				call update_display 
6d59				ret 
6d59			endif 
6d59			 
6d59			 
6d59			if STORAGE_SE 
6d59			 
6d59			;sprompt3: db "Loading from start-up file:",0 
6d59 .. 00		sprompt3: db "  Searching...",0 
6d68			;sprompt4: db "(Any key to stop)",0 
6d68			 
6d68			 
6d68			forth_autoload: 
6d68			 
6d68				; load block 0 of store 1 
6d68				 
6d68 3e fe			ld a, $fe      ; bit 0 clear 
6d6a 32 9b f9			ld (spi_device), a 
6d6d			 
6d6d cd 22 05			call storage_get_block_0 
6d70			 
6d70 3a d6 f9			ld a, (store_page+STORE_0_AUTOFILE) 
6d73			 
6d73 fe 00			cp 0 
6d75 c8				ret z     ; auto start not enabled 
6d76			 
6d76 cd a7 0d			call clear_display 
6d79			 
6d79				; set bank 
6d79			 
6d79 3a d8 f9				ld a, (store_page+STORE_0_BANKRUN) 
6d7c 32 9b f9				ld (spi_device), a 
6d7f			 
6d7f			 
6d7f				; generate a directory of bank 1 and search for flagged files 
6d7f			 
6d7f					if DEBUG_FORTH_WORDS_KEY 
6d7f						DMARK "DIR" 
6d7f f5				push af  
6d80 3a 94 6d			ld a, (.dmark)  
6d83 32 a6 fd			ld (debug_mark),a  
6d86 3a 95 6d			ld a, (.dmark+1)  
6d89 32 a7 fd			ld (debug_mark+1),a  
6d8c 3a 96 6d			ld a, (.dmark+2)  
6d8f 32 a8 fd			ld (debug_mark+2),a  
6d92 18 03			jr .pastdmark  
6d94 ..			.dmark: db "DIR"  
6d97 f1			.pastdmark: pop af  
6d98			endm  
# End of macro DMARK
6d98						CALLMONITOR 
6d98 cd aa fd			call debug_vector  
6d9b				endm  
# End of macro CALLMONITOR
6d9b					endif 
6d9b			 
6d9b cd 22 05			call storage_get_block_0 
6d9e			 
6d9e 21 b5 f9			ld hl, store_page     ; get current id count 
6da1 46				ld b, (hl) 
6da2 0e 00			ld c, 0    ; count of files   
6da4					if DEBUG_FORTH_WORDS 
6da4						DMARK "DI1" 
6da4 f5				push af  
6da5 3a b9 6d			ld a, (.dmark)  
6da8 32 a6 fd			ld (debug_mark),a  
6dab 3a ba 6d			ld a, (.dmark+1)  
6dae 32 a7 fd			ld (debug_mark+1),a  
6db1 3a bb 6d			ld a, (.dmark+2)  
6db4 32 a8 fd			ld (debug_mark+2),a  
6db7 18 03			jr .pastdmark  
6db9 ..			.dmark: db "DI1"  
6dbc f1			.pastdmark: pop af  
6dbd			endm  
# End of macro DMARK
6dbd						CALLMONITOR 
6dbd cd aa fd			call debug_vector  
6dc0				endm  
# End of macro CALLMONITOR
6dc0					endif 
6dc0			 
6dc0				; check for empty drive 
6dc0			 
6dc0 3e 00			ld a, 0 
6dc2 b8				cp b 
6dc3 ca 10 6e			jp z, .dirdone 
6dc6			 
6dc6				; for each of the current ids do a search for them and if found push to stack 
6dc6			 
6dc6 c5			.diritem:	push bc 
6dc7 21 40 00				ld hl, STORE_BLOCK_PHY 
6dca 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
6dcc 58					ld e,b 
6dcd			 
6dcd d5					push de 
6dce e5					push hl 
6dcf cd a7 0d			call clear_display 
6dd2 3e 32			ld a, display_row_2 + 10 
6dd4 11 59 6d			ld de, sprompt3 
6dd7 cd ba 0d			call str_at_display 
6dda cd fe 0c			call active 
6ddd eb				ex de, hl 
6dde 3e 2f			ld a, display_row_2 + 7 
6de0 cd ba 0d			call str_at_display 
6de3 cd ca 0d			call update_display 
6de6 e1				pop hl 
6de7 d1				pop de 
6de8			 
6de8			;		if DEBUG_FORTH_WORDS 
6de8			;			DMARK "DI2" 
6de8			;			CALLMONITOR 
6de8			;		endif 
6de8			 
6de8 cd a4 07				call storage_findnextid 
6deb			 
6deb			;		if DEBUG_FORTH_WORDS 
6deb			;			DMARK "DI3" 
6deb			;			CALLMONITOR 
6deb			;		endif 
6deb			 
6deb					; if found hl will be non zero 
6deb			 
6deb cd 04 10				call ishlzero 
6dee			;		ld a, l 
6dee			;		add h 
6dee			; 
6dee			;		cp 0 
6dee 28 1d				jr z, .dirnotfound 
6df0			 
6df0					; increase count 
6df0			 
6df0 c1					pop bc	 
6df1 0c					inc c 
6df2 c5					push bc 
6df3					 
6df3			 
6df3					; get file header and push the file name 
6df3			 
6df3 11 b5 f9				ld de, store_page 
6df6 cd 71 04				call storage_read_block 
6df9			 
6df9					; push file id to stack 
6df9				 
6df9			 
6df9					; is this a file we want to run? 
6df9			 
6df9 21 b8 f9				ld hl, store_page+3 
6dfc 7e					ld a,(hl) 
6dfd fe 2a				cp '*' 
6dff 20 0c				jr nz,  .dirnotfound 
6e01					 
6e01			 
6e01			 
6e01 3a b5 f9				ld a, (store_page) 
6e04 d5					push de 
6e05 e5					push hl 
6e06 c5					push bc 
6e07 cd 33 6e				call .autorunf 
6e0a c1					pop bc 
6e0b e1					pop hl 
6e0c d1					pop de 
6e0d			 
6e0d			 
6e0d			 
6e0d				; save this extent 
6e0d			 
6e0d					; push file name 
6e0d			;display file name to run 
6e0d			 
6e0d			;		ld hl, store_page+3 
6e0d			;		if DEBUG_FORTH_WORDS 
6e0d			;			DMARK "DI5" 
6e0d			;			CALLMONITOR 
6e0d			;		endif 
6e0d			; 
6e0d			;		 
6e0d			; 
6e0d			;		call forth_push_str 
6e0d			;		if DEBUG_FORTH_WORDS 
6e0d			;			DMARK "DI6" 
6e0d			;			CALLMONITOR 
6e0d			;		endif 
6e0d			.dirnotfound: 
6e0d c1					pop bc     
6e0e 10 b6				djnz .diritem 
6e10				 
6e10			.dirdone:	 
6e10					if DEBUG_FORTH_WORDS 
6e10						DMARK "DI7" 
6e10 f5				push af  
6e11 3a 25 6e			ld a, (.dmark)  
6e14 32 a6 fd			ld (debug_mark),a  
6e17 3a 26 6e			ld a, (.dmark+1)  
6e1a 32 a7 fd			ld (debug_mark+1),a  
6e1d 3a 27 6e			ld a, (.dmark+2)  
6e20 32 a8 fd			ld (debug_mark+2),a  
6e23 18 03			jr .pastdmark  
6e25 ..			.dmark: db "DI7"  
6e28 f1			.pastdmark: pop af  
6e29			endm  
# End of macro DMARK
6e29						CALLMONITOR 
6e29 cd aa fd			call debug_vector  
6e2c				endm  
# End of macro CALLMONITOR
6e2c					endif 
6e2c			 
6e2c cd a7 0d				call clear_display 
6e2f cd ca 0d				call update_display 
6e32			 
6e32 c9					ret 
6e33			 
6e33			 
6e33			 
6e33			 
6e33			 
6e33			.autorunf: 
6e33			 
6e33			 
6e33				; get file id to load from and get the file name to display 
6e33			 
6e33			;		ld a, (store_page+STORE_0_FILERUN) 
6e33			 
6e33 2e 00				ld l, 0 
6e35 67					ld h, a 
6e36 11 b5 f9				ld de, store_page 
6e39			 
6e39					if DEBUG_FORTH_WORDS 
6e39						DMARK "ASp" 
6e39 f5				push af  
6e3a 3a 4e 6e			ld a, (.dmark)  
6e3d 32 a6 fd			ld (debug_mark),a  
6e40 3a 4f 6e			ld a, (.dmark+1)  
6e43 32 a7 fd			ld (debug_mark+1),a  
6e46 3a 50 6e			ld a, (.dmark+2)  
6e49 32 a8 fd			ld (debug_mark+2),a  
6e4c 18 03			jr .pastdmark  
6e4e ..			.dmark: db "ASp"  
6e51 f1			.pastdmark: pop af  
6e52			endm  
# End of macro DMARK
6e52						CALLMONITOR 
6e52 cd aa fd			call debug_vector  
6e55				endm  
# End of macro CALLMONITOR
6e55					endif 
6e55 cd ca 09				call storage_read 
6e58			 
6e58					if DEBUG_FORTH_WORDS 
6e58						DMARK "ASr" 
6e58 f5				push af  
6e59 3a 6d 6e			ld a, (.dmark)  
6e5c 32 a6 fd			ld (debug_mark),a  
6e5f 3a 6e 6e			ld a, (.dmark+1)  
6e62 32 a7 fd			ld (debug_mark+1),a  
6e65 3a 6f 6e			ld a, (.dmark+2)  
6e68 32 a8 fd			ld (debug_mark+2),a  
6e6b 18 03			jr .pastdmark  
6e6d ..			.dmark: db "ASr"  
6e70 f1			.pastdmark: pop af  
6e71			endm  
# End of macro DMARK
6e71						CALLMONITOR 
6e71 cd aa fd			call debug_vector  
6e74				endm  
# End of macro CALLMONITOR
6e74					endif 
6e74			 
6e74 cd 04 10				call ishlzero 
6e77 c8					ret z             ; file not found 
6e78			 
6e78					; display file name we are loading 
6e78			 
6e78 cd a7 0d				call clear_display 
6e7b			 
6e7b 3e 32				ld a, display_row_2 + 10 
6e7d 11 b8 f9				ld de, store_page+3 
6e80 cd ba 0d				call str_at_display 
6e83				 
6e83			; 
6e83			 
6e83			;	ld a, display_row_1+5 
6e83			;	ld de, sprompt3 
6e83			;	call str_at_display 
6e83			;	ld a, display_row_2+7 
6e83			;	call active 
6e83			;	ex de, hl 
6e83			;;	ld de, sprompt4 
6e83			;	call str_at_display 
6e83			; 
6e83 cd ca 0d			call update_display 
6e86			 
6e86			;	call cin_wait 
6e86			;	cp 'n' 
6e86			;	ret z 
6e86			;	cp 'N' 
6e86			;	ret z 
6e86			 
6e86			;	call delay1s 
6e86			 
6e86 3a b7 f9			ld a, (store_page+2) 
6e89 32 a4 f9			ld (store_openmaxext), a    ; save count of ext 
6e8c 3e 01			ld a, 1  
6e8e 32 a5 f9			ld (store_openext), a    ; save count of ext 
6e91			 
6e91			.autof: 
6e91				; begin to read a line from file 
6e91			 
6e91 21 23 f4			ld hl, os_cli_cmd 
6e94 22 21 f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
6e97			  
6e97			.readext: 
6e97 3a a5 f9			ld a, (store_openext) 
6e9a 6f				ld l , a 
6e9b				 
6e9b 3a b5 f9			ld a, (store_page) 
6e9e 67				ld h, a	 
6e9f 11 b5 f9			ld de, store_page 
6ea2					if DEBUG_FORTH_WORDS 
6ea2						DMARK "ASl" 
6ea2 f5				push af  
6ea3 3a b7 6e			ld a, (.dmark)  
6ea6 32 a6 fd			ld (debug_mark),a  
6ea9 3a b8 6e			ld a, (.dmark+1)  
6eac 32 a7 fd			ld (debug_mark+1),a  
6eaf 3a b9 6e			ld a, (.dmark+2)  
6eb2 32 a8 fd			ld (debug_mark+2),a  
6eb5 18 03			jr .pastdmark  
6eb7 ..			.dmark: db "ASl"  
6eba f1			.pastdmark: pop af  
6ebb			endm  
# End of macro DMARK
6ebb						CALLMONITOR 
6ebb cd aa fd			call debug_vector  
6ebe				endm  
# End of macro CALLMONITOR
6ebe					endif 
6ebe cd ca 09				call storage_read 
6ec1 cd 04 10			call ishlzero 
6ec4 c8				ret z 
6ec5			 
6ec5			; TODO copy to exec buffer 
6ec5			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
6ec5			 
6ec5				; copy the record buffer to the cli buffer 
6ec5			 
6ec5 ed 5b 21 f6		ld de, (os_var_array) 
6ec9 21 b7 f9			ld hl, store_page+2 
6ecc			;	ex de, hl 
6ecc 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
6ecf ed b0			ldir 
6ed1 ed 53 21 f6		ld (os_var_array), de 
6ed5				 
6ed5 3a a5 f9			ld a, (store_openext) 
6ed8 3c				inc a 
6ed9 32 a5 f9			ld (store_openext), a    ; save count of ext 
6edc			 
6edc			 
6edc			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
6edc				 
6edc 3a a8 f9			ld a, (store_readcont) 
6edf fe 00			cp 0 
6ee1 20 b4			jr nz, .readext 
6ee3			 
6ee3			;	jr z, .autoend 
6ee3			 
6ee3					if DEBUG_FORTH_WORDS 
6ee3						DMARK "ASc" 
6ee3 f5				push af  
6ee4 3a f8 6e			ld a, (.dmark)  
6ee7 32 a6 fd			ld (debug_mark),a  
6eea 3a f9 6e			ld a, (.dmark+1)  
6eed 32 a7 fd			ld (debug_mark+1),a  
6ef0 3a fa 6e			ld a, (.dmark+2)  
6ef3 32 a8 fd			ld (debug_mark+2),a  
6ef6 18 03			jr .pastdmark  
6ef8 ..			.dmark: db "ASc"  
6efb f1			.pastdmark: pop af  
6efc			endm  
# End of macro DMARK
6efc						CALLMONITOR 
6efc cd aa fd			call debug_vector  
6eff				endm  
# End of macro CALLMONITOR
6eff					endif 
6eff e5				push hl	 
6f00 d5				push de 
6f01 cd fe 0c			call active 
6f04 eb				ex de, hl 
6f05 3e 2f			ld a, display_row_2 + 7 
6f07 cd ba 0d			call str_at_display 
6f0a			 
6f0a cd ca 0d			call update_display 
6f0d d1				pop de  
6f0e e1				pop hl 
6f0f			;	call delay250ms 
6f0f			 
6f0f			 
6f0f			 
6f0f			 
6f0f			.autoexec: 
6f0f			 
6f0f			 
6f0f 21 23 f4			ld hl, os_cli_cmd 
6f12					if DEBUG_FORTH_WORDS 
6f12						DMARK "ASx" 
6f12 f5				push af  
6f13 3a 27 6f			ld a, (.dmark)  
6f16 32 a6 fd			ld (debug_mark),a  
6f19 3a 28 6f			ld a, (.dmark+1)  
6f1c 32 a7 fd			ld (debug_mark+1),a  
6f1f 3a 29 6f			ld a, (.dmark+2)  
6f22 32 a8 fd			ld (debug_mark+2),a  
6f25 18 03			jr .pastdmark  
6f27 ..			.dmark: db "ASx"  
6f2a f1			.pastdmark: pop af  
6f2b			endm  
# End of macro DMARK
6f2b						CALLMONITOR 
6f2b cd aa fd			call debug_vector  
6f2e				endm  
# End of macro CALLMONITOR
6f2e					endif 
6f2e cd 38 24			call forthparse 
6f31 cd 78 24			call forthexec 
6f34 cd 8a 23			call forthexec_cleanup 
6f37			 
6f37			 
6f37			 
6f37 c3 91 6e			jp .autof 
6f3a			;.autofdone: 
6f3a			; 
6f3a			;		if DEBUG_FORTH_WORDS 
6f3a			;			DMARK "ASx" 
6f3a			;			CALLMONITOR 
6f3a			;		endif 
6f3a			;;	call clear_display 
6f3a			;	ret 
6f3a			 
6f3a			 
6f3a			 
6f3a			endif 
# End of file forth_startupv2.asm
6f3a			endif 
6f3a			 
# End of file forth_startup.asm
6f3a			 
6f3a			; eof 
# End of file forth_kernel.asm
6f3a			;include "nascombasic.asm" 
6f3a			 
6f3a			 
6f3a			; find out where the code ends if loaded into RAM (for SC114) 
6f3a			;endofcode:  
6f3a			;	nop 
6f3a			 
6f3a			 
6f3a			; jump to nmi vector 
6f3a			 
6f3a			init_nmi: 
6f3a 3e c9			ld a, $c9   ; RET 
6f3c 32 ad fd			ld (nmi_vector), a 
6f3f c9				ret 
6f40			nmi: 
6f40 e5				push hl 
6f41 d5				push de 
6f42 c5				push bc 
6f43 f5				push af 
6f44 cd ad fd			call nmi_vector 
6f47 f5				push af 
6f48 c5				push bc 
6f49 d5				push de 
6f4a e5				push hl 
6f4b ed 4d			reti 
6f4d			 
6f4d			 
6f4d			; eof 
6f4d			 
# End of file main.asm
6f4d			include "firmware_lcd_4x40.asm" 
6f4d			; **********************************************************************  
6f4d			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
6f4d			; **********************************************************************  
6f4d			;  
6f4d			; **  Written as a Small Computer Monitor App  
6f4d			; **  www.scc.me.uk  
6f4d			;  
6f4d			; History  
6f4d			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
6f4d			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
6f4d			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
6f4d			;  
6f4d			; **********************************************************************  
6f4d			;  
6f4d			; This program is an example of one of the methods of interfacing an   
6f4d			; alphanumeric LCD module.   
6f4d			;  
6f4d			; In this example the display is connected to either a Z80 PIO or a   
6f4d			; simple 8-bit output port.   
6f4d			;  
6f4d			; This interfacing method uses 4-bit data mode and uses time delays  
6f4d			; rather than polling the display's ready status. As a result the   
6f4d			; interface only requires 6 simple output lines:  
6f4d			;   Output bit 0 = not used  
6f4d			;   Output bit 1 = not used  
6f4d			;   Output bit 2 = RS         High = data, Low = instruction  
6f4d			;   Output bit 3 = E          Active high  
6f4d			;   Output bit 4 = DB4  
6f4d			;   Output bit 5 = DB5  
6f4d			;   Output bit 6 = DB6  
6f4d			;   Output bit 7 = DB7  
6f4d			; Display's R/W is connected to 0v so it is always in write mode  
6f4d			;  
6f4d			; This set up should work with any system supporting the RC2014 bus  
6f4d			  
6f4d			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
6f4d			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
6f4d			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
6f4d			;  
6f4d			; **********************************************************************  
6f4d			  
6f4d			; Additonal for 4x40. E1 and E2 instead of just E   
6f4d			; TODO swipe vidout signal on port a to activate E2  
6f4d			  
6f4d			; **********************************************************************  
6f4d			; **  Constants  
6f4d			; **********************************************************************  
6f4d			; LCD constants required by LCD support module  
6f4d			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
6f4d			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
6f4d			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
6f4d			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
6f4d			; TODO Decide which E is being set  
6f4d			kLCDWidth:  EQU display_cols             ;Width in characters  
6f4d			  
6f4d			; **********************************************************************  
6f4d			; **  Code library usage  
6f4d			; **********************************************************************  
6f4d			  
6f4d			; send character to current cursor position  
6f4d			; wraps and/or scrolls screen automatically  
6f4d			  
6f4d			  
6f4d			  
6f4d			lcd_init:  
6f4d			  
6f4d			; SCMonAPI functions used  
6f4d			  
6f4d			; Alphanumeric LCD functions used  
6f4d			; no need to specify specific functions for this module  
6f4d			  
6f4d 3e cf		            LD   A, 11001111b  
6f4f d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
6f51 3e 00		            LD   A, 00000000b  
6f53 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
6f55			  
6f55			; Initialise alphanumeric LCD module  
6f55 3e 00				ld a, 0  
6f57 32 06 fb				ld (display_lcde1e2), a  
6f5a cd db 6f		            CALL fLCD_Init      ;Initialise LCD module  
6f5d 3e 01				ld a, 1  
6f5f 32 06 fb				ld (display_lcde1e2), a  
6f62 cd db 6f		            CALL fLCD_Init      ;Initialise LCD module  
6f65			  
6f65 c9				ret  
6f66			  
6f66			;  
6f66			;;  
6f66			; lcd functions  
6f66			;  
6f66			;  
6f66			  
6f66			; what is at cursor position   
6f66			  
6f66			;get_cursor:	ld de, (cursor_row)   ;  row + col  
6f66			;		call curptr  
6f66			;		ret  
6f66			  
6f66			  
6f66			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
6f66			  
6f66			curptr:  
6f66 c5				push bc  
6f67 21 ec fc			ld hl, display_fb0  
6f6a			cpr:	  
6f6a				; loop for cursor whole row  
6f6a 0e 28			ld c, display_cols  
6f6c 23			cpr1:	inc hl  
6f6d 0d				dec c  
6f6e 20 fc			jr nz, cpr1  
6f70 05				dec b  
6f71 20 f7			jr nz, cpr  
6f73			  
6f73				; add col	  
6f73			  
6f73 23			cpr2:	inc hl  
6f74 1d				dec e  
6f75 20 fc			jr nz, cpr2  
6f77			  
6f77 c1				pop bc  
6f78 c9				ret  
6f79				  
6f79			  
6f79			  
6f79			  
6f79			  
6f79			; write the frame buffer given in hl to hardware   
6f79 22 04 fb		write_display: ld (display_write_tmp), hl 	   
6f7c 3e 00			ld a, kLCD_Line1  
6f7e cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
6f81 06 28			ld b, display_cols  
6f83 ed 5b 04 fb		ld de, (display_write_tmp)  
6f87 cd d3 6f			call write_len_string  
6f8a				  
6f8a				  
6f8a 2a 04 fb			ld hl, (display_write_tmp)  
6f8d 11 28 00			ld de, display_cols  
6f90 19				add hl,de  
6f91 22 04 fb			ld (display_write_tmp),hl  
6f94			  
6f94				  
6f94 3e 28			ld a, kLCD_Line2  
6f96 cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
6f99 06 28			ld b, display_cols  
6f9b ed 5b 04 fb		ld de, (display_write_tmp)  
6f9f cd d3 6f			call write_len_string  
6fa2				  
6fa2 2a 04 fb			ld hl, (display_write_tmp)  
6fa5 11 28 00			ld de, display_cols  
6fa8 19				add hl,de  
6fa9 22 04 fb			ld (display_write_tmp),hl  
6fac			  
6fac				  
6fac 3e 50			ld a, kLCD_Line3  
6fae cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
6fb1 06 28			ld b, display_cols  
6fb3 ed 5b 04 fb		ld de, (display_write_tmp)  
6fb7 cd d3 6f			call write_len_string  
6fba				  
6fba 2a 04 fb			ld hl, (display_write_tmp)  
6fbd 11 28 00			ld de, display_cols  
6fc0 19				add hl,de  
6fc1 22 04 fb			ld (display_write_tmp),hl  
6fc4			  
6fc4				  
6fc4 3e 78			ld a, kLCD_Line4  
6fc6 cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
6fc9 06 28			ld b, display_cols  
6fcb ed 5b 04 fb		ld de, (display_write_tmp)  
6fcf cd d3 6f			call write_len_string  
6fd2 c9					ret  
6fd3				  
6fd3				; write out a fixed length string given in b from de  
6fd3			  
6fd3 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
6fd4 cd 40 70		            CALL fLCD_Data      ;Write character to display  
6fd7 13				inc de  
6fd8 10 f9			djnz write_len_string  
6fda c9				ret  
6fdb			  
6fdb			; Some other things to do  
6fdb			;            LD   A, kLCD_Clear ;Display clear  
6fdb			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
6fdb			;            LD   A, kLCD_Under ;Display on with underscore cursor  
6fdb			;            LD   A, kLCD_On     ;Display on with no cursor  
6fdb			;            ;LD   A, kLCD_Off   ;Display off  
6fdb			;            CALL fLCD_Inst      ;Send instruction to display  
6fdb			;  
6fdb			;  
6fdb			;            halt  
6fdb			;  
6fdb			;  
6fdb			;MsgHello:   DB  "Hello World!",0  
6fdb			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
6fdb			  
6fdb			; Custom characters 5 pixels wide by 8 pixels high  
6fdb			; Up to 8 custom characters can be defined  
6fdb			;BitMaps:      
6fdb			;; Character 0x00 = Battery icon  
6fdb			;            DB  01110b  
6fdb			;            DB  11011b  
6fdb			;            DB  10001b  
6fdb			;            DB  10001b  
6fdb			;            DB  11111b  
6fdb			;            DB  11111b  
6fdb			;            DB  11111b  
6fdb			;            DB  11111b  
6fdb			;; Character 0x01 = Bluetooth icon  
6fdb			;            DB  01100b  
6fdb			;            DB  01010b  
6fdb			;            DB  11100b  
6fdb			;            DB  01000b  
6fdb			;            DB  11100b  
6fdb			;            DB  01010b  
6fdb			;            DB  01100b  
6fdb			;            DB  00000b  
6fdb			;  
6fdb			  
6fdb			  
6fdb			; **********************************************************************  
6fdb			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
6fdb			; **********************************************************************  
6fdb			;  
6fdb			; **  Written as a Small Computer Monitor App   
6fdb			; **  Version 0.1 SCC 2018-05-16  
6fdb			; **  www.scc.me.uk  
6fdb			;  
6fdb			; **********************************************************************  
6fdb			;  
6fdb			; This module provides support for alphanumeric LCD modules using with  
6fdb			; *  HD44780 (or compatible) controller  
6fdb			; *  5 x 7 pixel fonts  
6fdb			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
6fdb			; *  Interface via six digital outputs to the display (see below)  
6fdb			;  
6fdb			; LCD module pinout:  
6fdb			;   1  Vss   0v supply  
6fdb			;   2  Vdd   5v supply  
6fdb			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
6fdb			;   4  RS    High = data, Low = instruction  
6fdb			;   5  R/W   High = Read, Low = Write  
6fdb			;   6  E     Enable signal (active high)  
6fdb			;   7  DB0   Data bit 0  
6fdb			;   8  DB1   Data bit 1  
6fdb			;   9  DB2   Data bit 2  
6fdb			;  10  DB3   Data bit 3  
6fdb			;  11  DB4   Data bit 4  
6fdb			;  12  DB5   Data bit 5  
6fdb			;  13  DB6   Data bit 6  
6fdb			;  14  DB7   Data bit 7  
6fdb			;  15  A     Backlight anode (+)  
6fdb			;  16  K     Backlight cathode (-)  
6fdb			;  
6fdb			; This interfacing method uses 4-bit data mode and uses time delays  
6fdb			; rather than polling the display's ready status. As a result the   
6fdb			; interface only requires 6 simple output lines:  
6fdb			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
6fdb			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
6fdb			;   LCD DB4 = Microcomputer output port bit 4  
6fdb			;   LCD DB5 = Microcomputer output port bit 5  
6fdb			;   LCD DB6 = Microcomputer output port bit 6  
6fdb			;   LCD DB7 = Microcomputer output port bit 7  
6fdb			; Display's R/W is connected to 0v so it is always in write mode  
6fdb			; All 6 connections must be on the same port address <kLCDPrt>  
6fdb			; This method also allows a decent length of cable from micro to LCD  
6fdb			;  
6fdb			; **********************************************************************  
6fdb			;  
6fdb			; To include the code for any given function provided by this module,   
6fdb			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
6fdb			; the parent source file.  
6fdb			; For example:  #REQUIRES   uHexPrefix  
6fdb			;  
6fdb			; Also #INCLUDE this file at some point after the #REQUIRES statements  
6fdb			; in the parent source file.  
6fdb			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
6fdb			;  
6fdb			; These are the function names provided by this module:  
6fdb			; fLCD_Init                     ;Initialise LCD  
6fdb			; fLCD_Inst                     ;Send instruction to LCD  
6fdb			; fLCD_Data                     ;Send data byte to LCD  
6fdb			; fLCD_Pos                      ;Position cursor  
6fdb			; fLCD_Str                      ;Display string  
6fdb			; fLCD_Def                      ;Define custom character  
6fdb			;  
6fdb			; **********************************************************************  
6fdb			;  
6fdb			; Requires SCMonAPI.asm to also be included in the project  
6fdb			;  
6fdb			  
6fdb			  
6fdb			; **********************************************************************  
6fdb			; **  Constants  
6fdb			; **********************************************************************  
6fdb			  
6fdb			; Constants that must be defined externally  
6fdb			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
6fdb			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
6fdb			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
6fdb			;kLCDWidth: EQU 20             ;Width in characters  
6fdb			  
6fdb			; general line offsets in any frame buffer  
6fdb			  
6fdb			  
6fdb			display_row_1: equ 0  
6fdb			display_row_2: equ display_row_1+display_cols  
6fdb			display_row_3: equ display_row_2 + display_cols  
6fdb			display_row_4: equ display_row_3 + display_cols  
6fdb			;display_row_4_eol:   
6fdb			  
6fdb			  
6fdb			; Cursor position values for the start of each line  
6fdb			  
6fdb			; E  
6fdb			kLCD_Line1: EQU 0x00   
6fdb			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
6fdb			; E1  
6fdb			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
6fdb			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
6fdb			  
6fdb			; Instructions to send as A register to fLCD_Inst  
6fdb			kLCD_Clear: EQU 00000001b     ;LCD clear  
6fdb			kLCD_Off:   EQU 00001000b     ;LCD off  
6fdb			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
6fdb			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
6fdb			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
6fdb			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
6fdb			  
6fdb			; Constants used by this code module  
6fdb			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
6fdb			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
6fdb			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
6fdb			  
6fdb			  
6fdb			  
6fdb			; **********************************************************************  
6fdb			; **  LCD support functions  
6fdb			; **********************************************************************  
6fdb			  
6fdb			; Initialise alphanumeric LCD module  
6fdb			; LCD control register codes:  
6fdb			;   DL   0 = 4-bit mode        1 = 8-bit mode  
6fdb			;   N    0 = 1-line mode       1 = 2-line mode  
6fdb			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
6fdb			;   D    0 = Display off       1 = Display on  
6fdb			;   C    0 = Cursor off        1 = Cursor on  
6fdb			;   B    0 = Blinking off      1 = Blinking on  
6fdb			;   ID   0 = Decrement mode    1 = Increment mode  
6fdb			;   SH   0 = Entire shift off  1 = Entire shift on  
6fdb 3e 28		fLCD_Init:  LD   A, 40  
6fdd cd 02 71		            CALL LCDDelay       ;Delay 40ms after power up  
6fe0			; For reliable reset set 8-bit mode - 3 times  
6fe0 cd d2 70		            CALL WrFn8bit       ;Function = 8-bit mode  
6fe3 cd d2 70		            CALL WrFn8bit       ;Function = 8-bit mode  
6fe6 cd d2 70		            CALL WrFn8bit       ;Function = 8-bit mode  
6fe9			; Set 4-bit mode  
6fe9 cd ce 70		            CALL WrFn4bit       ;Function = 4-bit mode  
6fec cd 00 71		            CALL LCDDelay1      ;Delay 37 us or more  
6fef			; Function set  
6fef 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
6ff1 cd 04 70		            CALL fLCD_Inst      ;2 line, display on  
6ff4			; Display On/Off control  
6ff4 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
6ff6 cd 04 70		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
6ff9			; Display Clear  
6ff9 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
6ffb cd 04 70		            CALL fLCD_Inst      ;Clear display  
6ffe			; Entry mode  
6ffe 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
7000 cd 04 70		            CALL fLCD_Inst      ;Increment mode, shift off  
7003			; Display module now initialised  
7003 c9			            RET  
7004			; ok to here  
7004			  
7004			; Write instruction to LCD  
7004			;   On entry: A = Instruction byte to be written  
7004			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7004 f5			fLCD_Inst:  PUSH AF  
7005 f5			            PUSH AF  
7006 cd 18 70		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
7009 f1			            POP  AF  
700a 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
700b 17			            RLA  
700c 17			            RLA  
700d 17			            RLA  
700e cd 18 70		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
7011 3e 02		            LD   A, 2  
7013 cd 02 71		            CALL LCDDelay       ;Delay 2 ms to complete   
7016 f1			            POP  AF  
7017 c9			            RET  
7018			Wr4bits:   
7018 f5					push af  
7019 3a 06 fb				ld a, (display_lcde1e2)  
701c fe 00				cp 0     ; e  
701e 20 10				jr nz, .wea2	  
7020 f1					pop af  
7021 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7023 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7025 cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
7027 cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
7029 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
702b cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
702d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
702f c9			            RET  
7030 f1			.wea2:		pop af  
7031 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7033 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7035 cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
7037 cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
7039 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
703b cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
703d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
703f c9			            RET  
7040			  
7040			  
7040			; Write data to LCD  
7040			;   On entry: A = Data byte to be written  
7040			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7040 f5			fLCD_Data:  PUSH AF  
7041 f5			            PUSH AF  
7042 cd 54 70		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
7045 f1			            POP  AF  
7046 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
7047 17			            RLA  
7048 17			            RLA  
7049 17			            RLA  
704a cd 54 70		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
704d 3e 96		            LD   A, 150  
704f 3d			Wait:      DEC  A              ;Wait a while to allow data   
7050 20 fd		            JR   NZ, Wait      ;  write to complete  
7052 f1			            POP  AF  
7053 c9			            RET  
7054			Wr4bitsa:     
7054 f5					push af  
7055 3a 06 fb				ld a, (display_lcde1e2)  
7058 fe 00				cp 0     ; e1  
705a 20 16				jr nz, .we2	  
705c f1					pop af  
705d e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
705f cb d7		            SET  kLCDBitRS, A  
7061 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7063 cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
7065 cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
7067 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
7069 cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
706b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
706d cb 97		            RES  kLCDBitRS, A  
706f d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7071 c9			            RET  
7072 f1			.we2:		pop af  
7073 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7075 cb d7		            SET  kLCDBitRS, A  
7077 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7079 cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
707b cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
707d d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
707f cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
7081 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7083 cb 97		            RES  kLCDBitRS, A  
7085 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7087 c9			            RET  
7088			  
7088			  
7088			; Position cursor to specified location  
7088			;   On entry: A = Cursor position  
7088			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7088 f5			fLCD_Pos:   PUSH AF  
7089					; at this point set the E1 or E2 flag depending on position  
7089			  
7089 c5					push bc  
708a			;		push af  
708a 06 00				ld b, 0  
708c 4f					ld c, a  
708d 3e 4f				ld a, kLCD_Line3-1  
708f b7			 		or a      ;clear carry flag  
7090 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
7091 38 04				jr c, .pe1  
7093			  
7093					; E selection  
7093 cb 80				res 0, b         ; bit 0 unset e  
7095			;		pop af    ; before line 3 so recover orig pos  
7095			;		ld c, a    ; save for poking back  
7095 18 06				jr .peset	          
7097			.pe1:          	; E2 selection  
7097 cb c0				set 0, b         ; bit 0 set e1  
7099 79					ld a, c  
709a de 4f				sbc a, kLCD_Line3-1  
709c 4f					ld c, a	         ; save caculated offset  
709d			;		pop af     ; bin this original value now we have calculated form  
709d			  
709d			.peset:		; set bit  
709d 78					ld a, b  
709e 32 06 fb				ld (display_lcde1e2), a 	  
70a1 79					ld a, c  
70a2 c1					pop bc  
70a3			  
70a3 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
70a5 cd 04 70		            CALL fLCD_Inst      ;Write instruction to LCD  
70a8 f1			            POP  AF  
70a9 c9			            RET  
70aa			  
70aa			  
70aa			; Output text string to LCD  
70aa			;   On entry: DE = Pointer to null terminated text string  
70aa			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
70aa 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
70ab b7			            OR   A              ;Null terminator?  
70ac c8			            RET  Z              ;Yes, so finished  
70ad cd 40 70		            CALL fLCD_Data      ;Write character to display  
70b0 13			            INC  DE             ;Point to next character  
70b1 18 f7		            JR   fLCD_Str       ;Repeat  
70b3 c9					ret  
70b4			  
70b4			; Define custom character  
70b4			;   On entry: A = Character number (0 to 7)  
70b4			;             DE = Pointer to character bitmap data  
70b4			;   On exit:  A = Next character number  
70b4			;             DE = Next location following bitmap  
70b4			;             BC HL IX IY I AF' BC' DE' HL' preserved  
70b4			; Character is   
70b4 c5			fLCD_Def:   PUSH BC  
70b5 f5			            PUSH AF  
70b6 07			            RLCA                ;Calculate location  
70b7 07			            RLCA                ;  for bitmap data  
70b8 07			            RLCA                ;  = 8 x CharacterNumber  
70b9 f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
70bb cd 04 70		            CALL fLCD_Inst      ;Write instruction to LCD  
70be 06 00		            LD   B, 0  
70c0 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
70c1 cd 40 70		            CALL fLCD_Data      ;Write byte to display  
70c4 13			            INC  DE             ;Point to next byte  
70c5 04			            INC  B              ;Count bytes  
70c6 cb 58		            BIT  3, B           ;Finish all 8 bytes?  
70c8 28 f6		            JR   Z, Loop       ;No, so repeat  
70ca f1			            POP  AF  
70cb 3c			            INC  A              ;Increment character number  
70cc c1			            POP  BC  
70cd c9			            RET  
70ce			  
70ce			  
70ce			; **********************************************************************  
70ce			; **  Private functions  
70ce			; **********************************************************************  
70ce			  
70ce			; Write function to LCD  
70ce			;   On entry: A = Function byte to be written  
70ce			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
70ce 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
70d0 18 02		            JR   WrFunc  
70d2 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
70d4 f5			WrFunc:     PUSH AF  
70d5 f5					push af  
70d6 3a 06 fb				ld a, (display_lcde1e2)  
70d9 fe 00				cp 0     ; e1  
70db 20 0f				jr nz, .wfea2	  
70dd f1					pop af  
70de d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70e0 cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
70e2 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
70e4 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
70e6 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
70e8 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70ea 18 0d			jr .wfskip  
70ec f1			.wfea2:		pop af  
70ed d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70ef cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
70f1 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
70f3 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
70f5 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
70f7 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
70f9 3e 05		.wfskip:            LD  A, 5  
70fb cd 02 71		            CALL LCDDelay       ;Delay 5 ms to complete  
70fe f1			            POP  AF  
70ff c9			            RET  
7100			  
7100			  
7100			; Delay in milliseconds  
7100			;   On entry: A = Number of milliseconds delay  
7100			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7100 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
7102 d5			LCDDelay:   PUSH DE  
7103 5f			            LD   E, A           ;Delay by 'A' ms  
7104 16 00		            LD   D, 0  
7106 cd cf 0c		            CALL aDelayInMS  
7109 d1			            POP  DE  
710a c9			            RET  
710b			  
710b			  
710b			testlcd:  
710b 3e 00			ld a, kLCD_Line1  
710d cd 88 70			call fLCD_Pos  
7110 06 28			ld b, 40  
7112 11 40 71			ld de, .ttext1  
7115 cd d3 6f			call write_len_string  
7118			  
7118 3e 28			ld a, kLCD_Line2  
711a cd 88 70			call fLCD_Pos  
711d 06 28			ld b, 40  
711f 11 69 71			ld de, .ttext2  
7122 cd d3 6f			call write_len_string  
7125 3e 50			ld a, kLCD_Line3  
7127 cd 88 70			call fLCD_Pos  
712a 06 28			ld b, 40  
712c 11 92 71			ld de, .ttext3  
712f cd d3 6f			call write_len_string  
7132 3e 78			ld a, kLCD_Line4  
7134 cd 88 70			call fLCD_Pos  
7137 06 28			ld b, 40  
7139 11 bb 71			ld de, .ttext4  
713c cd d3 6f			call write_len_string  
713f			  
713f 76				halt  
7140			  
7140			  
7140 .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
7169 .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
7192 .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
71bb .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
71e4			   
71e4			  
71e4			  
71e4			; eof  
71e4			  
# End of file firmware_lcd_4x40.asm
71e4			;include "firmware_lcd_4x20.asm" 
71e4			include "firmware_key_5x10.asm" 
71e4			; 5 x 10 decade counter scanner  
71e4			  
71e4			  
71e4			; TODO do cursor shape change for shift keys  
71e4			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
71e4			  
71e4			  
71e4			; bit mask for each scan column and row for teing the matrix  
71e4			  
71e4			  
71e4			key_init:  
71e4			  
71e4			; SCMonAPI functions used  
71e4			  
71e4			; Alphanumeric LCD functions used  
71e4			; no need to specify specific functions for this module  
71e4			  
71e4			  
71e4 3e cf		            LD   A, 11001111b  
71e6 d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
71e8			;            LD   A, 00000000b  
71e8 3e 1f		            LD   A, 00011111b  
71ea d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
71ec			  
71ec			  
71ec				; TODO Configure cursor shapes  
71ec			  
71ec				; Load cursor shapes   
71ec 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
71ee 11 fe 71		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
71f1 06 02		            LD   B, 2           ;Number of characters to define  
71f3 cd b4 70		.DefLoop:   CALL fLCD_Def       ;Define custom character  
71f6 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
71f8			  
71f8 3e 01				ld a, 1  
71fa 32 fc fa			ld (cursor_shape),a  
71fd c9				ret  
71fe			  
71fe			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
71fe			; Up to 8 custom characters can be defined  
71fe			.cursor_shapes:      
71fe			;; Character 0x00 = Normal  
71fe 1f			            DB  11111b  
71ff 1f			            DB  11111b  
7200 1f			            DB  11111b  
7201 1f			            DB  11111b  
7202 1f			            DB  11111b  
7203 1f			            DB  11111b  
7204 1f			            DB  11111b  
7205 1f			            DB  11111b  
7206			;; Character 0x01 = Modifier  
7206 1f			            DB  11111b  
7207 1b			            DB  11011b  
7208 1b			            DB  11011b  
7209 1b			            DB  11011b  
720a 1b			            DB  11011b  
720b 1f			            DB  11111b  
720c 1b			            DB  11011b  
720d 1f			            DB  11111b  
720e			  
720e			  
720e			  
720e			  
720e			; Display custom character 0  
720e			;            LD   A, kLCD_Line1+14  
720e			;            CALL fLCD_Pos       ;Position cursor to location in A  
720e			;            LD   A, 0  
720e			;            CALL fLCD_Data      ;Write character in A at cursor  
720e			  
720e			; Display custom character 1  
720e			;            LD   A, kLCD_Line2+14  
720e			;            CALL fLCD_Pos      ;Position cursor to location in A  
720e			;            LD   A, 1  
720e			;            CALL fLCD_Data     ;Write character in A at cursor  
720e			  
720e			; keyboard scanning   
720e			  
720e			; character in from keyboard  
720e			  
720e			; mapping for the pcb layout  
720e			  
720e			.matrix_to_char:  
720e .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
7219 .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
7224 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
722f 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
723a .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
7245			.matrix_to_shift:  
7245			  
7245 .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
7250 .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
725b 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
7266 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
7271 .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
727c			  
727c			.matrix_to_symbolshift:  
727c			  
727c fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
7287 .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
7292 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
729d			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
729d 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
72a8 .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
72b3			  
72b3			  
72b3			  
72b3			; mapping for a simple straight through breadboard layout  
72b3			  
72b3			;.matrix_to_char:  
72b3			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
72b3			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
72b3			;		db "asdfghjkl",KEY_CR,0  
72b3			;		db "qwertyuiop",0  
72b3			;		 db "1234567890",0  
72b3			;.matrix_to_shift:  
72b3			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
72b3			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
72b3			;		db "ASDFGHJKL",KEY_CR,0  
72b3			;		db "QWERTYUIOP",0  
72b3			;		 db "!",'"',"#$%^&*()",0  
72b3			;.matrix_to_symbolshift:  
72b3			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
72b3			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
72b3			;		db "_?*fghjk=",KEY_CR,0  
72b3			;		db "-/+*[]{}@#",0  
72b3			;		 db "1234567890",0  
72b3			  
72b3			;.matrix_to_char: db "D#0*C987B654A321"  
72b3			  
72b3			  
72b3				  
72b3			  
72b3			; add cin and cin_wait  
72b3			  
72b3 cd c4 72		cin_wait: 	call cin  
72b6						if DEBUG_KEYCINWAIT  
72b6							push af  
72b6							  
72b6							ld hl,key_repeat_ct  
72b6							ld (hl),a  
72b6							inc hl  
72b6							call hexout  
72b6							ld hl,key_repeat_ct+3  
72b6							ld a,0  
72b6							ld (hl),a  
72b6			  
72b6							    LD   A, kLCD_Line1+11  
72b6							    CALL fLCD_Pos       ;Position cursor to location in A  
72b6							    LD   DE, key_repeat_ct  
72b6							    ;LD   DE, MsgHello  
72b6							    CALL fLCD_Str       ;Display string pointed to by DE  
72b6			  
72b6			  
72b6			  
72b6							pop af  
72b6						endif  
72b6 fe 00			cp 0  
72b8 28 f9			jr z, cin_wait   ; block until key press  
72ba			  
72ba							if DEBUG_KEYCINWAIT  
72ba								push af  
72ba			  
72ba								ld a, 'A'	  
72ba								ld hl,key_repeat_ct  
72ba								ld (hl),a  
72ba								inc hl  
72ba								ld a,0  
72ba								ld (hl),a  
72ba			  
72ba								    LD   A, kLCD_Line2+11  
72ba								    CALL fLCD_Pos       ;Position cursor to location in A  
72ba								    LD   DE, key_repeat_ct  
72ba								    ;LD   DE, MsgHello  
72ba								    CALL fLCD_Str       ;Display string pointed to by DE  
72ba			  
72ba							call delay500ms  
72ba			  
72ba								pop af  
72ba							endif  
72ba f5				push af   ; save key pressed  
72bb			  
72bb			.cin_wait1:	  
72bb							if DEBUG_KEYCINWAIT  
72bb								push af  
72bb			  
72bb								ld a, 'b'	  
72bb								ld hl,key_repeat_ct  
72bb								ld (hl),a  
72bb								inc hl  
72bb								ld a,0  
72bb								ld (hl),a  
72bb			  
72bb								    LD   A, kLCD_Line2+11  
72bb								    CALL fLCD_Pos       ;Position cursor to location in A  
72bb								    LD   DE, key_repeat_ct  
72bb								    ;LD   DE, MsgHello  
72bb								    CALL fLCD_Str       ;Display string pointed to by DE  
72bb			  
72bb			  
72bb							call delay500ms  
72bb			  
72bb								pop af  
72bb							endif  
72bb			  
72bb cd c4 72		call cin  
72be fe 00			cp 0  
72c0 20 f9			jr nz, .cin_wait1  	; wait for key release  
72c2			if DEBUG_KEYCINWAIT  
72c2				push af  
72c2			  
72c2				ld a, '3'	  
72c2				ld hl,key_repeat_ct  
72c2				ld (hl),a  
72c2				inc hl  
72c2				ld a,0  
72c2				ld (hl),a  
72c2			  
72c2			            LD   A, kLCD_Line2+11  
72c2			            CALL fLCD_Pos       ;Position cursor to location in A  
72c2			            LD   DE, key_repeat_ct  
72c2			            ;LD   DE, MsgHello  
72c2			            CALL fLCD_Str       ;Display string pointed to by DE  
72c2			  
72c2			  
72c2			call delay500ms  
72c2			  
72c2				pop af  
72c2			endif  
72c2			  
72c2 f1				pop af   ; get key  
72c3 c9				ret  
72c4			  
72c4			  
72c4 cd d8 72		cin: 	call .mtoc  
72c7			  
72c7			if DEBUG_KEYCIN  
72c7				push af  
72c7				  
72c7				ld hl,key_repeat_ct  
72c7				ld (hl),a  
72c7				inc hl  
72c7				call hexout  
72c7				ld hl,key_repeat_ct+3  
72c7				ld a,0  
72c7				ld (hl),a  
72c7			  
72c7			            LD   A, kLCD_Line3+15  
72c7			            CALL fLCD_Pos       ;Position cursor to location in A  
72c7			            LD   DE, key_repeat_ct  
72c7			            ;LD   DE, MsgHello  
72c7			            CALL fLCD_Str       ;Display string pointed to by DE  
72c7			  
72c7			  
72c7			call delay500ms  
72c7			  
72c7				pop af  
72c7			endif  
72c7			  
72c7			  
72c7				; no key held  
72c7 fe 00			cp 0  
72c9 c8				ret z  
72ca			  
72ca			if DEBUG_KEYCIN  
72ca				push af  
72ca			  
72ca				ld a, '1'	  
72ca				ld hl,key_repeat_ct  
72ca				ld (hl),a  
72ca				inc hl  
72ca				ld a,0  
72ca				ld (hl),a  
72ca			  
72ca			            LD   A, kLCD_Line4+15  
72ca			            CALL fLCD_Pos       ;Position cursor to location in A  
72ca			            LD   DE, key_repeat_ct  
72ca			            ;LD   DE, MsgHello  
72ca			            CALL fLCD_Str       ;Display string pointed to by DE  
72ca			  
72ca			  
72ca			call delay500ms  
72ca			  
72ca				pop af  
72ca			endif  
72ca			  
72ca				; stop key bounce  
72ca			  
72ca 32 c6 fd			ld (key_held),a		 ; save it  
72cd 47				ld b, a  
72ce			  
72ce c5			.cina1:	push bc  
72cf			if DEBUG_KEYCIN  
72cf				push af  
72cf			  
72cf				ld hl,key_repeat_ct  
72cf				inc hl  
72cf				call hexout  
72cf				ld hl,key_repeat_ct+3  
72cf				ld a,0  
72cf				ld (hl),a  
72cf				ld hl,key_repeat_ct  
72cf				ld a, '2'	  
72cf				ld (hl),a  
72cf			  
72cf			            LD   A, kLCD_Line4+15  
72cf			            CALL fLCD_Pos       ;Position cursor to location in A  
72cf			            LD   DE, key_repeat_ct  
72cf			            ;LD   DE, MsgHello  
72cf			            CALL fLCD_Str       ;Display string pointed to by DE  
72cf			  
72cf				pop af  
72cf			endif  
72cf cd d8 72			call .mtoc  
72d2 c1				pop bc  
72d3 b8				cp b  
72d4 28 f8			jr z, .cina1  
72d6 78				ld a,b		  
72d7			if DEBUG_KEYCIN  
72d7				push af  
72d7			  
72d7				ld hl,key_repeat_ct  
72d7				inc hl  
72d7				call hexout  
72d7				ld hl,key_repeat_ct+3  
72d7				ld a,0  
72d7				ld (hl),a  
72d7				ld hl,key_repeat_ct  
72d7				ld a, '3'	  
72d7				ld (hl),a  
72d7			  
72d7			            LD   A, kLCD_Line4+15  
72d7			            CALL fLCD_Pos       ;Position cursor to location in A  
72d7			            LD   DE, key_repeat_ct  
72d7			            ;LD   DE, MsgHello  
72d7			            CALL fLCD_Str       ;Display string pointed to by DE  
72d7			  
72d7				pop af  
72d7			endif  
72d7 c9				ret  
72d8			  
72d8			; detect keyboard modifier key press and apply new overlay to the face key held  
72d8			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
72d8			  
72d8			;.cin_map_modifier:   
72d8			;	ld a, (hl)  
72d8			;	and 255  
72d8			;	ret NZ		; modifier key not flagged  
72d8			;  
72d8			;	; get key face  
72d8			;  
72d8			;	ld b,(key_face_held)  
72d8			;  
72d8			;	ld b, key_cols * key_rows  
72d8			;  
72d8			;	push de  
72d8			;	pop hl  
72d8			;  
72d8			;.mmod1: ld a,(hl)   ; get map test  
72d8			;	cp b  
72d8			;	jr z, .mmod2  
72d8			;  
72d8			;  
72d8			;  
72d8			;.mmod2: inc hl    ;   
72d8			;  
72d8			;	  
72d8			;  
72d8			;	  
72d8			;  
72d8			;	ld hl,key_actual_pressed  
72d8			;	ld (hl),a,  
72d8			;	ret  
72d8			  
72d8			; map matrix key held to char on face of key  
72d8			  
72d8			.mtoc:  
72d8			  
72d8			; test decade counter strobes  
72d8			  
72d8			;.decadetest1:  
72d8			  
72d8			; reset counter  
72d8			;ld a, 128  
72d8			;out (portbdata),a  
72d8			  
72d8			  
72d8			;ld b, 5  
72d8			;.dec1:  
72d8			;ld a, 0  
72d8			;out (portbdata),a  
72d8			;call delay1s  
72d8			  
72d8			;ld a, 32  
72d8			;out (portbdata),a  
72d8			;call delay1s  
72d8			;call delay1s  
72d8			;call delay1s  
72d8			;  
72d8			;ld a, 64+32  
72d8			;out (portbdata),a  
72d8			;call delay1s  
72d8			;;djnz .dec1  
72d8			;  
72d8			;jp .decadetest1  
72d8			  
72d8			  
72d8			  
72d8			  
72d8			  
72d8			  
72d8			  
72d8			  
72d8			  
72d8			  
72d8				; scan keyboard matrix and generate raw scan map  
72d8 cd 6b 73			call matrix  
72db			  
72db				; reuse c bit 0 left modifer button - ie shift  
72db			        ; reuse c bit 1 for right modifer button - ie symbol shift  
72db				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
72db			  
72db 0e 00			ld c, 0  
72dd			  
72dd				; TODO set flags for modifer key presses   
72dd				; TODO do a search for modifer key...  
72dd			  
72dd				;ld hl,keyscan_table_row4  
72dd 21 25 fe			ld hl,keyscan_table_row2  
72e0			  
72e0 7e				ld a, (hl)  
72e1 fe 23			cp '#'  
72e3 20 07			jr nz, .nextmodcheck  
72e5 cb c1			set 0, c  
72e7 21 45 72			ld hl, .matrix_to_shift  
72ea 18 21			jr .dokeymap  
72ec				; TODO for now igonre  
72ec			.nextmodcheck:  
72ec 21 1a fe			ld hl,keyscan_table_row3  
72ef			  
72ef 7e				ld a, (hl)  
72f0 fe 23			cp '#'  
72f2 20 07			jr nz, .nextmodcheck2  
72f4 cb c9			set 1, c   
72f6 21 7c 72			ld hl, .matrix_to_symbolshift  
72f9 18 12			jr .dokeymap  
72fb			.nextmodcheck2:  
72fb 21 2e fe			ld hl,keyscan_table_row2+9    ; right shift  
72fe			  
72fe 7e				ld a, (hl)  
72ff fe 23			cp '#'  
7301 20 07			jr nz, .donemodcheck  
7303 cb c9			set 1, c   
7305 21 45 72			ld hl, .matrix_to_shift  
7308 18 03			jr .dokeymap  
730a			  
730a				; no modifer found so just map to normal keys  
730a				; get mtoc map matrix to respective keys  
730a			;	ld hl, .matrix_to_char  
730a			;	ld hl, .matrix_to_char  
730a			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
730a			;	ld a, KEY_SHIFT  
730a			;	call findchar  
730a			;  
730a			;	; got offset to key modifer in b  
730a			;  
730a			;	ld hl,keyscan_table_row5  
730a			;  
730a			;	ld a,b  
730a			;	call addatohl  
730a			;	ld a,(hl)  
730a			;  
730a			;	cp '#'  
730a			;	jr nz, .nextmodcheck  
730a			;	set 0, c  
730a			;	ld hl, .matrix_to_char  
730a			;	jr .dokeymap  
730a			;	; TODO for now igonre  
730a			;.nextmodcheck:  
730a			;	ld hl, .matrix_to_symbolshift  
730a			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
730a			;	ld a, KEY_SYMBOLSHIFT  
730a			;	call findchar  
730a			;  
730a			;  
730a			;	; got offset to key modifer in b  
730a			;  
730a			;	ld hl,keyscan_table_row5  
730a			;  
730a			;	ld a,b  
730a			;	call addatohl  
730a			;	ld a,(hl)  
730a			;  
730a			;	cp '#'  
730a			;	jr nz, .donemodcheck  
730a			;	set 1, c   
730a			;	ld hl, .matrix_to_symbolshift  
730a			;	jr .dokeymap  
730a			  
730a			  
730a			  
730a			.donemodcheck:  
730a				; no modifer found so just map to normal keys  
730a				; get mtoc map matrix to respective keys  
730a 21 0e 72			ld hl, .matrix_to_char  
730d			  
730d			.dokeymap:  
730d				;ld (key_fa), c   
730d cd 26 73			call .mapkeys  
7310			  
7310			  
7310			if DEBUG_KEY  
7310			  
7310			; Display text on first line  
7310			            LD   A, kLCD_Line1  
7310			            CALL fLCD_Pos       ;Position cursor to location in A  
7310			            LD   DE, keyscan_table_row1  
7310			            ;LD   DE, MsgHello  
7310			            CALL fLCD_Str       ;Display string pointed to by DE  
7310			  
7310			; Display text on second line  
7310			            LD   A, kLCD_Line2  
7310			            CALL fLCD_Pos       ;Position cursor to location in A  
7310			            LD   DE, keyscan_table_row2  
7310			            CALL fLCD_Str       ;Display string pointed to by DE  
7310			            LD   A, kLCD_Line3  
7310			            CALL fLCD_Pos       ;Position cursor to location in A  
7310			            LD   DE, keyscan_table_row3  
7310			            CALL fLCD_Str       ;Display string pointed to by DE  
7310			            LD   A, kLCD_Line4  
7310			            CALL fLCD_Pos       ;Position cursor to location in A  
7310			            LD   DE, keyscan_table_row4  
7310			            CALL fLCD_Str       ;Display string pointed to by DE  
7310			            LD   A, kLCD_Line1+10  
7310			            CALL fLCD_Pos       ;Position cursor to location in A  
7310			            LD   DE, keyscan_table_row5  
7310			            CALL fLCD_Str       ;Display string pointed to by DE  
7310			  
7310				;call delay250ms  
7310			endif  
7310			;	jp testkey  
7310			  
7310			; get first char reported  
7310			  
7310 21 04 fe			ld hl,keyscan_table_row5  
7313			  
7313				;ld b, 46   ; 30 keys to remap + 8 nulls   
7313 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
7315			.findkey:  
7315 7e				ld a,(hl)  
7316 fe 00			cp 0  
7318 28 04			jr z, .nextkey  
731a fe 7e			cp KEY_MATRIX_NO_PRESS  
731c 20 06			jr nz, .foundkey  
731e			.nextkey:  
731e 23				inc hl  
731f 10 f4			djnz .findkey  
7321 3e 00			ld a,0  
7323 c9				ret  
7324			.foundkey:  
7324 7e				ld a,(hl)  
7325 c9				ret  
7326				  
7326			  
7326			; convert the raw key map given hl for destination key  
7326			.mapkeys:  
7326 11 04 fe			ld de,keyscan_table_row5  
7329			  
7329 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
732b			.remap:  
732b 1a				ld a,(de)  
732c fe 23			cp '#'  
732e 20 02			jr nz, .remapnext  
7330				;CALLMONITOR  
7330 7e				ld a,(hl)  
7331 12				ld (de),a  
7332			  
7332			  
7332			  
7332			.remapnext:  
7332 23				inc hl  
7333 13				inc de  
7334 10 f5			djnz .remap  
7336				  
7336 c9				ret  
7337			  
7337			  
7337			  
7337			.mtocold2:  
7337			  
7337			;	; flag if key D is held down and remove from reporting  
7337			;	ld bc, .key_map_fd    
7337			;	ld hl, keyscan_table  
7337			;	ld de, key_fd  
7337			;	call .key_shift_hold  
7337			;	cp 255  
7337			;	jr z, .cinmap  
7337			;	; flag if key C is held down and remove from reporting  
7337			;	ld bc, .key_map_fc    
7337			;	ld hl, keyscan_table+key_cols  
7337			;	ld de, key_fc  
7337			;	call .key_shift_hold  
7337			;	cp 255  
7337			;	jr z, .cinmap  
7337			;	; flag if key B is held down and remove from reporting  
7337			;	ld bc, .key_map_fb    
7337			;	ld hl, keyscan_table+(key_cols*2)  
7337			;	ld de, key_fb  
7337			;	call .key_shift_hold  
7337			;	cp 255  
7337			;	jr z, .cinmap  
7337			;	; flag if key A is held down and remove from reporting  
7337			;	ld bc, .key_map_fa    
7337			;	ld hl, keyscan_table+(key_cols*3)  
7337			;	ld de, key_fa  
7337			;	call .key_shift_hold  
7337			;	cp 255  
7337			;	jr z, .cinmap  
7337			  
7337 11 0e 72			ld de, .matrix_to_char  
733a			  
733a			  
733a			.cinmap1:   
733a				if DEBUG_KEY  
733a			            LD   A, kLCD_Line4  
733a			            CALL fLCD_Pos       ;Position cursor to location in A  
733a					push de  
733a			            LD   DE, keyscan_table  
733a			            CALL fLCD_Str       ;Display string pointed to by DE  
733a					pop de  
733a				endif  
733a			  
733a				; scan key matrix table for any held key  
733a			  
733a				; de holds either the default matrix or one selected above  
733a			  
733a 21 d1 fd			ld hl, keyscan_table  
733d 06 32			ld b,key_cols*key_rows  
733f			  
733f 7e			.cin11:	ld a,(hl)  
7340 fe 23			cp '#'  
7342 28 08			jr z, .cinhit1  
7344 23				inc hl  
7345 13				inc de  
7346 05				dec b  
7347 20 f6			jr nz, .cin11  
7349				; no key found held  
7349 3e 00			ld a,0  
734b c9				ret  
734c d5			.cinhit1: push de  
734d e1				pop hl  
734e 7e				ld a,(hl)  
734f c9				ret  
7350			  
7350			; flag a control key is held   
7350			; hl is key pin, de is flag indicator  
7350			  
7350			.key_shift_hold1:  
7350 c5				push bc  
7351 3e 01			ld a, 1  
7353 32 fc fa			ld (cursor_shape),a  
7356 06 00			ld b, 0  
7358 7e				ld a, (hl)  
7359 fe 2e			cp '.'  
735b 28 0a			jr z, .key_shift11  
735d 06 ff			ld b, 255  
735f 3e 2b			ld a, '+'    ; hide key from later scans  
7361 77				ld (hl),a  
7362 3e 02			ld a, 2  
7364 32 fc fa			ld (cursor_shape),a  
7367			.key_shift11:  
7367				; write flag indicator  
7367 78				ld a,b  
7368 12				ld (de),a  
7369			  
7369 d1				pop de    ; de now holds the key map ptr  
736a c9				ret  
736b			  
736b				  
736b			  
736b			; scans keyboard matrix and flags key press in memory array	  
736b				  
736b			matrix:  
736b				;call matrix  
736b				; TODO optimise the code....  
736b			  
736b			  
736b			;ld hl, keyscan_table_row1  
736b			;ld de, keyscan_table_row1+1  
736b			;ld bc,46  
736b			;ld a,KEY_MATRIX_NO_PRESS  
736b			;ldir  
736b			  
736b			  
736b			  
736b			; reset counter  
736b 3e 80		ld a, 128  
736d d3 c1		out (portbdata),a  
736f			  
736f 06 0a		ld b, 10  
7371 0e 00		ld c, 0       ; current clock toggle  
7373			  
7373			.colscan:  
7373			  
7373			; set current column  
7373			; disable clock enable and set clock low  
7373			  
7373			;ld a, 0  
7373			;out (portbdata),a  
7373			  
7373			; For each column scan for switches  
7373			  
7373 c5			push bc  
7374 21 c7 fd		ld hl, keyscan_scancol  
7377 cd 80 74		call .rowscan  
737a c1			pop bc  
737b			  
737b			  
737b			; get back current column  
737b			  
737b			; translate the row scan  
737b			  
737b			;   
737b			; row 1  
737b			  
737b 78			ld a,b  
737c			  
737c 21 3a fe		LD   hl, keyscan_table_row1+10  
737f			  
737f cd ed 0f		call subafromhl  
7382			;call addatohl  
7382			  
7382 11 c7 fd		ld de, keyscan_scancol  
7385			  
7385 1a			ld a,(de)  
7386 77			ld (hl),a  
7387			  
7387			  
7387			  
7387			  
7387			; row 2  
7387			  
7387 78			ld a,b  
7388			  
7388 21 2f fe		LD   hl, keyscan_table_row2+10  
738b			  
738b			;call addatohl  
738b cd ed 0f		call subafromhl  
738e			  
738e			  
738e 11 c8 fd		ld de, keyscan_scancol+1  
7391			  
7391 1a			ld a,(de)  
7392 77			ld (hl),a  
7393			  
7393			  
7393			; row 3  
7393			  
7393 78			ld a,b  
7394			  
7394 21 24 fe		LD   hl, keyscan_table_row3+10  
7397			  
7397			;call addatohl  
7397 cd ed 0f		call subafromhl  
739a			  
739a 11 c9 fd		ld de, keyscan_scancol+2  
739d			  
739d 1a			ld a,(de)  
739e 77			ld (hl),a  
739f			  
739f			  
739f			  
739f			; row 4  
739f			  
739f 78			ld a,b  
73a0			  
73a0 21 19 fe		LD   hl, keyscan_table_row4+10  
73a3			  
73a3			;call addatohl  
73a3 cd ed 0f		call subafromhl  
73a6			  
73a6 11 ca fd		ld de, keyscan_scancol+3  
73a9			  
73a9 1a			ld a,(de)  
73aa 77			ld (hl),a  
73ab			  
73ab			; row 5  
73ab			  
73ab 78			ld a,b  
73ac			  
73ac 21 0e fe		LD   hl, keyscan_table_row5+10  
73af			  
73af			;call addatohl  
73af cd ed 0f		call subafromhl  
73b2			  
73b2 11 cb fd		ld de, keyscan_scancol+4  
73b5			  
73b5 1a			ld a,(de)  
73b6 77			ld (hl),a  
73b7			  
73b7			; handshake next column  
73b7			  
73b7			  
73b7 3e 40		ld a, 64  
73b9 d3 c1		out (portbdata),a  
73bb			  
73bb 3e 00		ld a, 0  
73bd d3 c1		out (portbdata),a  
73bf			  
73bf			; toggle clk and move to next column  
73bf			;ld a, 64  
73bf			;cp c  
73bf			;  
73bf			;jr z, .coltoglow  
73bf			;ld c, a  
73bf			;jr .coltog  
73bf			;.coltoglow:  
73bf			;ld c, 0  
73bf			;.coltog:  
73bf			;ld a, c  
73bf			;out (portbdata),a  
73bf			  
73bf 10 b2		djnz .colscan  
73c1			  
73c1 3e 0a		ld a,10  
73c3 21 30 fe		LD   hl, keyscan_table_row1  
73c6 cd db 0f		call addatohl  
73c9 3e 00		ld a, 0  
73cb 77			ld (hl), a  
73cc			  
73cc			  
73cc 3e 0a		ld a,10  
73ce 21 25 fe		LD   hl, keyscan_table_row2  
73d1 cd db 0f		call addatohl  
73d4 3e 00		ld a, 0  
73d6 77			ld (hl), a  
73d7			  
73d7 3e 0a		ld a,10  
73d9 21 1a fe		LD   hl, keyscan_table_row3  
73dc cd db 0f		call addatohl  
73df 3e 00		ld a, 0  
73e1 77			ld (hl), a  
73e2			  
73e2 3e 0a		ld a,10  
73e4 21 0f fe		LD   hl, keyscan_table_row4  
73e7 cd db 0f		call addatohl  
73ea 3e 00		ld a, 0  
73ec 77			ld (hl), a  
73ed			  
73ed 3e 0a		ld a,10  
73ef 21 04 fe		LD   hl, keyscan_table_row5  
73f2 cd db 0f		call addatohl  
73f5 3e 00		ld a, 0  
73f7 77			ld (hl), a  
73f8			  
73f8			if DEBUG_KEY_MATRIX  
73f8			  
73f8			; Display text on first line  
73f8			            LD   A, kLCD_Line1  
73f8			            CALL fLCD_Pos       ;Position cursor to location in A  
73f8			            LD   DE, keyscan_table_row1  
73f8			            ;LD   DE, MsgHello  
73f8			            CALL fLCD_Str       ;Display string pointed to by DE  
73f8			  
73f8			; Display text on second line  
73f8			            LD   A, kLCD_Line2  
73f8			            CALL fLCD_Pos       ;Position cursor to location in A  
73f8			            LD   DE, keyscan_table_row2  
73f8			            CALL fLCD_Str       ;Display string pointed to by DE  
73f8			            LD   A, kLCD_Line3  
73f8			            CALL fLCD_Pos       ;Position cursor to location in A  
73f8			            LD   DE, keyscan_table_row3  
73f8			            CALL fLCD_Str       ;Display string pointed to by DE  
73f8			            LD   A, kLCD_Line4  
73f8			            CALL fLCD_Pos       ;Position cursor to location in A  
73f8			            LD   DE, keyscan_table_row4  
73f8			            CALL fLCD_Str       ;Display string pointed to by DE  
73f8			            LD   A, kLCD_Line4+10  
73f8			            CALL fLCD_Pos       ;Position cursor to location in A  
73f8			            LD   DE, keyscan_table_row5  
73f8			            CALL fLCD_Str       ;Display string pointed to by DE  
73f8			  
73f8			;call delay250ms  
73f8				jp matrix  
73f8			endif  
73f8 c9			ret  
73f9			  
73f9			; using decade counter....  
73f9			  
73f9			  
73f9			; TODO reset decade counter to start of scan  
73f9			  
73f9			; reset 15  
73f9			; clock 14  
73f9			; ce 13  
73f9			  
73f9			; 1 - q5  
73f9			; 2 - q1  
73f9			; 3 - q0  
73f9			; 4 - q2  
73f9			; 5 - q6  
73f9			; 6 - q7  
73f9			; 7 - q3  
73f9			; 8 - vss  
73f9			; 9 - q8  
73f9			; 10 - q4  
73f9			; 11 - q9  
73f9			; 12 - cout  
73f9			; 16 - vdd  
73f9			  
73f9			; clock      ce       reset     output  
73f9			; 0          x        0         n  
73f9			; x          1        0         n  
73f9			; x          x        1         q0  
73f9			; rising     0        0         n+1  
73f9			; falling    x        0         n  
73f9			; x          rising   0         n  
73f9			; 1          falling  0         x+1  
73f9			;  
73f9			; x = dont care, if n < 5 carry = 1 otherwise 0  
73f9			  
73f9			;   
73f9			; reset   
73f9			; 13=0, 14=0, 15=1 .. 15=0  
73f9			;  
73f9			; handshake line  
73f9			; 14=1.... read line 14=0  
73f9			  
73f9			  
73f9			  
73f9			  
73f9			  
73f9			; TODO hand shake clock for next column scan  
73f9			; TODO detect each row  
73f9			  
73f9			  
73f9			  
73f9			  
73f9			; reset 128  
73f9			; clock 64  
73f9			; ce 32  
73f9			  
73f9			  
73f9			.cyclestart:  
73f9			  
73f9			; reset counter  
73f9 3e 80		ld a, 128  
73fb d3 c1		out (portbdata),a  
73fd			  
73fd			; loop leds  
73fd 06 0a		ld b,10  
73ff			  
73ff			.cycle1:  
73ff c5			push bc  
7400 3e 00		ld a, 0  
7402 d3 c1		out (portbdata),a  
7404 cd de 0c		call delay250ms  
7407			  
7407 3e 40		ld a, 64  
7409 d3 c1		out (portbdata),a  
740b cd de 0c		call delay250ms  
740e			  
740e 3e 00		ld a, 0  
7410 d3 c1		out (portbdata),a  
7412 cd de 0c		call delay250ms  
7415			  
7415 c1			pop bc  
7416 10 e7		djnz .cycle1  
7418			  
7418			  
7418 18 df		jr .cyclestart  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			; map matrix key held to char on face of key  
741a			  
741a			;.mtocold:  
741a			;  
741a			;  
741a			;; reset counter  
741a			;ld a, 128  
741a			;out (portbdata),a  
741a			;  
741a			;  
741a			;; scan keyboard row 1  
741a			;ld a, 0  
741a			;out (portbdata),a  
741a			;;ld a, 64  
741a			;;out (portbdata),a  
741a			;  
741a			;  
741a			;	ld a, 128  
741a			;	ld hl, keyscan_table  
741a			;	call .rowscan  
741a			;  
741a			;;ld a, 0  
741a			;;out (portbdata),a  
741a			;ld a, 64  
741a			;out (portbdata),a  
741a			;  
741a			;	ld a, 64  
741a			;	ld hl, keyscan_table+key_cols  
741a			;	call .rowscan  
741a			;  
741a			;ld a, 0  
741a			;out (portbdata),a  
741a			;;ld a, 64  
741a			;;out (portbdata),a  
741a			;	ld a, 32  
741a			;	ld hl, keyscan_table+(key_cols*2)  
741a			;	call .rowscan  
741a			;  
741a			;  
741a			;;ld a, 0  
741a			;;out (portbdata),a  
741a			;ld a, 64  
741a			;out (portbdata),a  
741a			;  
741a			;	ld a, 16  
741a			;	ld hl, keyscan_table+(key_cols*3)  
741a			;	call .rowscan  
741a			;  
741a			;  
741a			;	; flag if key D is held down and remove from reporting  
741a			;	ld bc, .key_map_fd    
741a			;	ld hl, keyscan_table  
741a			;	ld de, key_fd  
741a			;	call .key_shift_hold  
741a			;	cp 255  
741a			;	jr z, .cinmap  
741a			;	; flag if key C is held down and remove from reporting  
741a			;	ld bc, .key_map_fc    
741a			;	ld hl, keyscan_table+key_cols  
741a			;	ld de, key_fc  
741a			;	call .key_shift_hold  
741a			;	cp 255  
741a			;	jr z, .cinmap  
741a			;	; flag if key B is held down and remove from reporting  
741a			;	ld bc, .key_map_fb    
741a			;	ld hl, keyscan_table+(key_cols*2)  
741a			;	ld de, key_fb  
741a			;	call .key_shift_hold  
741a			;	cp 255  
741a			;	jr z, .cinmap  
741a			;	; flag if key A is held down and remove from reporting  
741a			;	ld bc, .key_map_fa    
741a			;	ld hl, keyscan_table+(key_cols*3)  
741a			;	ld de, key_fa  
741a			;	call .key_shift_hold  
741a			;	cp 255  
741a			;	jr z, .cinmap  
741a			;  
741a			;	ld de, .matrix_to_char  
741a			;  
741a			;  
741a			;.cinmap:   
741a			;	if DEBUG_KEY  
741a			;            LD   A, kLCD_Line4  
741a			;            CALL fLCD_Pos       ;Position cursor to location in A  
741a			;		push de  
741a			;            LD   DE, keyscan_table  
741a			;            CALL fLCD_Str       ;Display string pointed to by DE  
741a			;		pop de  
741a			;	endif  
741a			  
741a				; scan key matrix table for any held key  
741a			  
741a				; de holds either the default matrix or one selected above  
741a			  
741a			;	ld hl, keyscan_table  
741a			;	ld b,key_cols*key_rows  
741a			;  
741a			;.cin1:	ld a,(hl)  
741a			;	cp '#'  
741a			;	jr z, .cinhit  
741a			;	inc hl  
741a			;	inc de  
741a			;	dec b  
741a			;	jr nz, .cin1  
741a			;	; no key found held  
741a			;	ld a,0  
741a			;	ret  
741a			;.cinhit: push de  
741a			;	pop hl  
741a			;	ld a,(hl)  
741a			;	ret  
741a			  
741a			; flag a control key is held   
741a			; hl is key pin, de is flag indicator  
741a			  
741a			;.key_shift_hold:  
741a			;	push bc  
741a			;	ld a, 1  
741a			;	ld (cursor_shape),a  
741a			;	ld b, 0  
741a			;	ld a, (hl)  
741a			;	cp '.'  
741a			;	jr z, .key_shift1  
741a			;	ld b, 255  
741a			;	ld a, '+'    ; hide key from later scans  
741a			;	ld (hl),a  
741a			;	ld a, 2  
741a			;	ld (cursor_shape),a  
741a			;.key_shift1:  
741a			;	; write flag indicator  
741a			;	ld a,b  
741a			;	ld (de),a  
741a			;  
741a			;	pop de    ; de now holds the key map ptr  
741a			;	ret  
741a			  
741a				  
741a				  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			  
741a			;	push hl  
741a			;	push de  
741a			;	push bc  
741a			;	call keyscan  
741a			;	; map key matrix to ascii value of key face  
741a			;  
741a			;	ld hl, key_face_map  
741a			;	ld de, keyscan_table  
741a			;  
741a			;	; get how many keys to look at  
741a			;	ld b, keyscan_table_len  
741a			;	  
741a			;  
741a			;	; at this stage fall out on first key hit  
741a			;	; TODO handle multiple key press  
741a			;  
741a			;map1:	ld a,(hl)  
741a			;	cp '#'  
741a			;	jr z, keyhit  
741a			;	inc hl  
741a			;	inc de  
741a			;	dec b  
741a			;	jr nz, map1  
741a			;nohit:	ld a, 0  
741a			;	jr keydone  
741a			;keyhit: push de  
741a			;	pop hl  
741a			;	ld a,(hl)  
741a			;keydone:  
741a			;	push bc  
741a			;	push de  
741a			; 	push hl  
741a			;	ret   
741a			;  
741a			  
741a			  
741a			  
741a			  
741a			; scan physical key matrix  
741a			  
741a			  
741a			;keyscan:  
741a			;  
741a			;; for each key_row use keyscanr bit mask for out  
741a			;; then read in for keyscanc bitmask  
741a			;; save result of row scan to keyscantable  
741a			;  
741a			;; scan keyboard row 1  
741a			;  
741a			;	ld b, key_rows  
741a			;	ld hl, key_scanr  
741a			;	ld de, keyscan_table  
741a			;  
741a			;rowloop:  
741a			;  
741a			;	ld a,(hl)		; out bit mask to energise keyboard row  
741a			;	call rowscan  
741a			;	inc hl  
741a			;	dec b  
741a			;	jr nz, rowloop  
741a			;  
741a			;	ret  
741a			;  
741a			;  
741a			;; pass a out bitmask, b row number  
741a			;arowscan:   
741a			;	push bc  
741a			;  
741a			;	ld d, b  
741a			;  
741a			;	; calculate buffer location for this row  
741a			;  
741a			;	ld hl, keyscan_table	  
741a			;kbufr:  ld e, key_cols  
741a			;kbufc:	inc hl  
741a			;	dec e  
741a			;	jr nz, kbufc  
741a			;	dec d  
741a			;	jr nz, kbufr  
741a			;  
741a			;	; energise row and read columns  
741a			;  
741a			;	out (portbdata),a  
741a			;	in a,(portbdata)  
741a			;	ld c,a  
741a			;  
741a			;  
741a			;	; save buffer loc  
741a			;  
741a			;	ld (keybufptr), hl  
741a			;  
741a			;	ld hl, key_scanc  
741a			;	ld d, key_cols  
741a			;  
741a			;	; for each column check each bit mask  
741a			;  
741a			;colloop:  
741a			;	  
741a			;  
741a			;	; reset flags for the row   
741a			;  
741a			;	ld b,'.'  
741a			;	and (hl)  
741a			;	jr z, maskskip  
741a			;	ld b,'#'  
741a			;maskskip:  
741a			;	; save  key state  
741a			;	push hl  
741a			;	ld hl, (keybufptr)  
741a			;	ld (hl), b  
741a			;	inc hl  
741a			;	ld (keybufptr), hl  
741a			;  
741a			;	; move to next bit mask  
741a			;	pop hl  
741a			;	inc hl  
741a			;  
741a			;	dec d  
741a			;	jr nz, colloop  
741a			;  
741a			;	ret  
741a			;  
741a			;  
741a			;;  
741a			; lcd functions  
741a			;  
741a			;  
741a			  
741a			;if DEBUG_KEY_MATRIX  
741a			  
741a			; test function to display hardware view of matrix state  
741a			  
741a			matrixold:  
741a			  
741a			  
741a			  
741a			; reset counter  
741a 3e 80		ld a, 128  
741c d3 c1		out (portbdata),a  
741e			; scan keyboard row 1  
741e 3e 00		ld a, 0  
7420 d3 c1		out (portbdata),a  
7422			;ld a, 64  
7422			;out (portbdata),a  
7422 3e 80			ld a, 128  
7424 21 30 fe			ld hl, keyscan_table_row1  
7427 cd 80 74			call .rowscan  
742a			  
742a			;ld a, 0  
742a			;out (portbdata),a  
742a 3e 40		ld a, 64  
742c d3 c1		out (portbdata),a  
742e 3e 40			ld a, 64  
7430 21 25 fe			ld hl, keyscan_table_row2  
7433 cd 80 74			call .rowscan  
7436			  
7436 3e 00		ld a, 0  
7438 d3 c1		out (portbdata),a  
743a			;ld a, 64  
743a			;out (portbdata),a  
743a 3e 20			ld a, 32  
743c 21 1a fe			ld hl, keyscan_table_row3  
743f cd 80 74			call .rowscan  
7442			  
7442			;ld a, 0  
7442			;out (portbdata),a  
7442 3e 40		ld a, 64  
7444 d3 c1		out (portbdata),a  
7446 3e 10			ld a, 16  
7448 21 0f fe			ld hl, keyscan_table_row4  
744b cd 80 74			call .rowscan  
744e			  
744e			; Display text on first line  
744e 3e 00		            LD   A, kLCD_Line1  
7450 cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
7453 11 30 fe		            LD   DE, keyscan_table_row1  
7456			            ;LD   DE, MsgHello  
7456 cd aa 70		            CALL fLCD_Str       ;Display string pointed to by DE  
7459			  
7459			; Display text on second line  
7459 3e 28		            LD   A, kLCD_Line2  
745b cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
745e 11 25 fe		            LD   DE, keyscan_table_row2  
7461 cd aa 70		            CALL fLCD_Str       ;Display string pointed to by DE  
7464 3e 50		            LD   A, kLCD_Line3  
7466 cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
7469 11 1a fe		            LD   DE, keyscan_table_row3  
746c cd aa 70		            CALL fLCD_Str       ;Display string pointed to by DE  
746f 3e 78		            LD   A, kLCD_Line4  
7471 cd 88 70		            CALL fLCD_Pos       ;Position cursor to location in A  
7474 11 0f fe		            LD   DE, keyscan_table_row4  
7477 cd aa 70		            CALL fLCD_Str       ;Display string pointed to by DE  
747a			  
747a cd de 0c			call delay250ms  
747d c3 6b 73			jp matrix  
7480			  
7480			; pass de as row display flags  
7480			.rowscan:   
7480			;	out (portbdata),a  
7480 db c1			in a,(portbdata)  
7482 4f				ld c,a  
7483				; reset flags for the row   
7483 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7485 e6 01			and 1  
7487 28 02			jr z, .p1on  
7489 06 23			ld b,'#'  
748b			.p1on:  
748b 70				ld (hl), b  
748c 23				inc hl  
748d			  
748d 06 7e			ld b,KEY_MATRIX_NO_PRESS  
748f 79				ld a,c  
7490 e6 02			and 2  
7492			;	bit 0,a  
7492 28 02			jr z, .p2on  
7494 06 23			ld b,'#'  
7496			.p2on:  
7496 70				ld (hl), b  
7497 23				inc hl  
7498			;  
7498 06 7e			ld b,KEY_MATRIX_NO_PRESS  
749a 79				ld a,c  
749b e6 04			and 4  
749d			;;	bit 0,a  
749d 28 02			jr z, .p3on  
749f 06 23			ld b,'#'  
74a1			.p3on:  
74a1 70				ld (hl), b  
74a2 23				inc hl  
74a3			;;  
74a3 06 7e			ld b,KEY_MATRIX_NO_PRESS  
74a5			;;	bit 0,a  
74a5 79				ld a,c  
74a6 e6 08			and 8  
74a8 28 02			jr z, .p4on  
74aa 06 23			ld b,'#'  
74ac			.p4on:  
74ac 70				ld (hl), b  
74ad 23				inc hl  
74ae			  
74ae 06 7e			ld b,KEY_MATRIX_NO_PRESS  
74b0			;;	bit 0,a  
74b0 79				ld a,c  
74b1 e6 10			and 16  
74b3 28 02			jr z, .p5on  
74b5 06 23			ld b,'#'  
74b7			.p5on:  
74b7 70				ld (hl), b  
74b8 23				inc hl  
74b9			; zero term  
74b9 06 00			ld b,0  
74bb 70				ld (hl), b  
74bc			  
74bc c9			.rscandone: ret  
74bd			  
74bd			;addatohl:  
74bd			;  
74bd			 ;add   a, l    ; A = A+L  
74bd			  ;  ld    l, a    ; L = A+L  
74bd			   ; adc   a, h    ; A = A+L+H+carry  
74bd			   ; sub   l       ; A = H+carry  
74bd			   ; ld    h, a    ; H = H+carry  
74bd			  
74bd			;ret  
74bd			; eof  
# End of file firmware_key_5x10.asm
74bd			;include "firmware_key_4x10.asm" 
74bd			 
74bd			heap_size:    equ heap_end - heap_start 
74bd			;eof 
# End of file os_mega.asm
74bd
