# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_cpm.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 1 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; Use this to tune the delay functions if your CPU is a bit quick. i.e. RunCPM on a PC 
0000			 
0000			CPM_DELAY_TUNE: equ 4000 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0100			endif 
0100 c3 7c 17			jp coldstart     ; rst 0 - cold boot 
0103			 
0103			 
0103 ..			buildtime: db   "Build: " 
010a					include "romtimestamp.asm" 
010a ..			db '2025-09-04 17:03' 
# End of file romtimestamp.asm
011a 00				   db 0 
011b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
011f			 
011f			 
011f			 
011f			;        nop  
011f			;        nop 
011f			;;	org 05h		; null out bdos call 
011f			; 
011f			;        nop  
011f			;        nop  
011f			;        nop 
011f			;;	org 08h 
011f			;;; 
011f			;;	jp cin		; rst 8 - char in 
011f			;;; 
011f			; 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;	org 010h 
011f			;; 
011f			;	jp cout		; rest 010h  - char out 
011f			;; 
011f			;	org 01bh   
011f			; 
011f			;	;jp  		; rst 01bh   - write string to display 
011f			;	jp str_at_display 
011f			; 
011f			; 
011f			;	org 020h 
011f			; 
011f			;	; jp		 ; rst 020h - read char at screen location 
011f			; 
011f			;	org 028h 
011f			 
011f				; jp		 ; rst 028h  - storage i/o 
011f			 
011f			; 	org 030h 
011f			;	jp break_point_state 
011f			  
011f			; $30  
011f			; org 038h 
011f			; $38 
011f			 
011f			; TODO any more important entry points to add to jump table for easier coding use? 
011f			 
011f			if BASE_KEV = 1  
011f			 
011f				; need to be at $66 for nmi support 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255 
011f				jp nmi 
011f			endif 
011f			 
011f			include "firmware.asm" 
011f			  
011f			; main constants (used here and in firmware)  
011f			  
011f			; TODO have page 0 of storage as bios  
011f			  
011f			Device_A: equ 0h  
011f			Device_B: equ 040h          ; Sound  
011f			  
011f			if BASE_KEV  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_SC114  
011f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			; TODO fixup for CPM  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			Device_D: equ 0c0h             ; Keyboard and LCD  
011f			  
011f			; Odd specific debug points for testing hardware dev  
011f			  
011f			;if DEBUG_LEVEL0  
011f			;	include "debug_level0.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL1  
011f			;	include "debug_level1.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL2  
011f			;	include "debug_level2.asm"  
011f			;endif  
011f			  
011f			  
011f			CALLMONITOR: macro  
011f			;	call break_point_state  
011f			; now use the break point debug vector  
011f				call debug_vector  
011f				endm  
011f			  
011f			MALLOC_1: equ 1        ; from dk88   
011f			MALLOC_2: equ 0           ; broke  
011f			MALLOC_3: equ 0           ; really broke  
011f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
011f			  
011f			if BASE_KEV   
011f			;stacksize: equ 256  
011f			; each stack entry is three bytes (type + word)  
011f			stacksize: equ 3*150  
011f			  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 512  
011f			endif  
011f			if BASE_SC114  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			;if STORAGE_SE == 0  
011f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
011f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
011f			;endif  
011f			  
011f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
011f			  
011f			STORE_0_AUTORUN: equ $20  
011f			  
011f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
011f			  
011f			STORE_0_AUTOFILE: equ $21  
011f			STORE_0_BANKRUN: equ $23  
011f			STORE_0_FILERUN: equ $24  
011f			  
011f			; Block 0 offsets for settings  
011f			  
011f			; if set then skip prompt for start up and accept all  
011f			  
011f			STORE_0_QUICKSTART: equ $25  
011f			  
011f			; Blocks where directory table is held  
011f			  
011f			; Reducing the number of entries increases the max file size  
011f			  
011f			;STORE_DIR_START: equ 1  
011f			;STORE_DIR_END: equ 33  
011f			  
011f			; Blocks from where file data is stored  
011f			  
011f			;STORE_DATA_START: equ STORE_DIR_END + 1  
011f			  
011f			; Block indicators (<32 are data files)  
011f			  
011f			;STORE_BLOCK_CFG: equ $8f       ; config block  
011f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
011f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
011f			;STORE_BLOCK_FREE: equ $85       ; data block free  
011f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
011f			  
011f			  
011f			  
011f			; Directory entry flags  
011f			  
011f			;STORE_DIR_FREE: equ 0  
011f			;STORE_DIR_FILE:  equ 1  
011f			  
011f			; Structure offsets to directory entries  
011f			;STORE_DE_FLAG: equ 0  
011f			;STORE_DE_MAXEXT: equ 1  
011f			;STORE_DE_FILENAME: equ 2  
011f			  
011f			; Structure offsets to block 0  
011f			  
011f			;STORE_BK0_ISFOR: equ 1  
011f			;STORE_BK0_LABEL: equ 3  
011f			  
011f			; memory allocation   
011f			  
011f			chk_stund: equ tos+2           ; underflow check word  
011f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
011f			  
011f			; keyscan table needs rows x cols buffer  
011f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
011f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
011f			  
011f			keyscan_table_row1: equ chk_stovr -key_cols-1  
011f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
011f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
011f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
011f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
011f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
011f			keyscan_scancol: equ keyscan_table-key_cols  
011f			;keyscan_table_len: equ key_rows*key_cols  
011f			;keybufptr: equ keyscan_table - 2  
011f			;keysymbol: equ keybufptr - 1  
011f			key_held: equ keyscan_scancol-1	; currently held  
011f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
011f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
011f			key_fa: equ key_repeat_ct -1 ;  
011f			key_fb: equ key_fa -1 ;  
011f			key_fc: equ key_fb -1 ;  
011f			key_fd: equ key_fc -1 ;  
011f			key_face_held: equ key_fd - 1   
011f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
011f			  
011f			hardware_config: equ key_face_held - 10  
011f			  
011f			; hardware config switches  
011f			; TODO add bitmasks on includes for hardware  
011f			; high byte for expansion ids  
011f			;     0000 0000  no card inserted  
011f			;     0000 0001  storage card inserted  
011f			;     0000 0010  spi sd card active  
011f			  
011f			;       
011f			; low byte:  
011f			;     0000 0001   4x4 keypad  
011f			;     0000 0010   full keyboard  
011f			;     0000 0011   spi/ext keyboard  
011f			;     0000 0100   20x4 lcd  
011f			;     0000 1000   40x4 lcd  
011f			;     0000 1100   spi/ext display  
011f			;     0001 0000   ide interface available  
011f			  
011f			hardware_word: equ hardware_config - 2  
011f			  
011f			; debug marker - optional display of debug point on the debug screens  
011f			  
011f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
011f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
011f			  
011f			debug_umark: equ debug_vector - 6  ; current user mark  
011f			debug_mark: equ debug_umark - 4    ; internal word debug points  
011f			  
011f			; input_str vars  
011f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
011f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
011f			input_size: equ input_start -1  ; number of chars  
011f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
011f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
011f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
011f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
011f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
011f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
011f			input_len: equ input_cur_onoff - 5 ; length of current input  
011f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
011f			  
011f			; cursor blink rate  
011f			CUR_BLINK_RATE: equ $09  
011f			;CUR_BLINK_RATE: equ 15  
011f			  
011f			key_actual_pressed: equ input_cursor - 1   
011f			key_symbol: equ key_actual_pressed - 1   
011f			key_shift: equ key_symbol - 1   
011f			  
011f			; Display allocation  
011f			  
011f			;display_rows: equ 4     ; move out to mini and mega files  
011f			;display_cols: equ 20  
011f			  
011f			display_fb_len: equ display_rows*display_cols  
011f			  
011f			; primary frame buffer     
011f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
011f			; working frame buffers  
011f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
011f			display_fb3: equ  display_fb1-display_fb_len - 1  
011f			display_fb2: equ  display_fb3-display_fb_len - 1  
011f			;  
011f			; pointer to active frame buffer  
011f			display_fb_active: equ display_fb2 - 2  
011f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
011f			display_write_tmp: equ display_lcde1e2 - 2  
011f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
011f			  
011f			;  
011f			  
011f			;; can load into de directory  
011f			cursor_col: equ display_active-1  
011f			cursor_row: equ cursor_col-1  
011f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
011f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
011f			  
011f			; maths vars  
011f			  
011f			LFSRSeed: equ cursor_shape -20   
011f			randData: equ LFSRSeed - 2  
011f			xrandc: equ randData - 2  
011f			stackstore: equ xrandc - 2  
011f			seed1: equ  stackstore -2   
011f			seed2: equ seed1 - 2  
011f			  
011f			; cf storage vars  
011f			  
011f			iErrorNum:  equ seed2-1         ;Error number  
011f			iErrorReg:  equ iErrorNum -1              ;Error register  
011f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
011f			  
011f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
011f			  
011f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
011f			  
011f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
011f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
011f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
011f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
011f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
011f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
011f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
011f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
011f			store_tmpid: equ store_tmp3 - 1		; page temp id  
011f			store_tmpext: equ store_tmpid - 1		; file extent temp  
011f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
011f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
011f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
011f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
011f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
011f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
011f			;  
011f			; spi vars  
011f			  
011f			  
011f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
011f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
011f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
011f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
011f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
011f			spi_device_id: equ spi_device - 1    ; human readable bank number  
011f			  
011f			;;;;; forth cli params  
011f			  
011f			; TODO use a different frame buffer for forth???  
011f			  
011f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
011f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
011f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
011f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
011f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
011f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
011f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
011f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
011f			  
011f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
011f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
011f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
011f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
011f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
011f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
011f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
011f			  
011f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
011f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
011f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
011f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
011f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
011f			  
011f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
011f			  
011f			; os/forth token vars  
011f			  
011f			os_last_cmd: equ os_var_array-255  
011f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
011f			os_current_i: equ os_cli_cmd-2  
011f			os_cur_ptr: equ os_current_i-2  
011f			os_word_scratch: equ os_cur_ptr-30  
011f			os_tok_len: equ os_word_scratch - 2  
011f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
011f			os_tok_malloc: equ os_tok_ptr - 2  
011f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
011f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
011f			execscratch: equ os_input-255        ; exec cmd eval buffer  
011f			scratch: equ execscratch-255  
011f			  
011f			os_stack_1: equ scratch - 3       ; stack holding area 1  
011f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
011f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
011f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
011f			  
011f			  
011f			; temp locations for new word processing to save on adding more   
011f			  
011f			os_new_malloc: equ os_stack_4-2  
011f			os_new_parse_len: equ os_new_malloc - 2  
011f			os_new_word_len: equ os_new_parse_len - 2  
011f			os_new_work_ptr: equ os_new_word_len - 2  
011f			os_new_src_ptr: equ os_new_work_ptr - 2  
011f			os_new_exec: equ os_new_src_ptr - 2  
011f			os_new_exec_ptr: equ os_new_exec - 2  
011f			  
011f			; resume memory alloocations....  
011f			  
011f			;os_view_disable: equ os_new_exec_ptr - 1  
011f			os_view_af: equ os_new_exec_ptr - 2  
011f			os_view_hl: equ os_view_af -2  
011f			os_view_de: equ os_view_hl - 2  
011f			os_view_bc: equ os_view_de - 2  
011f			  
011f			; stack checksum word  
011f			if DEBUG_STACK_IMB  
011f				curframe: equ  os_view_de - 5  
011f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
011f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			else  
011f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			endif  
011f			  
011f			; with data stack could see memory filled with junk. need some memory management   
011f			; malloc and free entry points added  
011f			  
011f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
011f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			;heap_end: equ free_list-1  ; Starting address of heap  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			heap_end: equ chk_word-1  ; Starting address of heap  
011f			  
011f			  
011f			;if BASE_KEV   
011f			;heap_start: equ 0800eh  ; Starting address of heap  
011f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;heap_start: equ baseram+15  ; Starting address of heap  
011f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;endif  
011f			  
011f			  
011f			;;;;  
011f			  
011f			  
011f			; change below to point to last memory alloc above  
011f			topusermem:  equ   heap_start  
011f			  
011f			;if BASE_KEV   
011f			;baseusermem: equ 08000h  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;;aseusermem:     equ    12  
011f			;baseusermem:     equ    prompt  
011f			;;baseusermem:     equ    endofcode  
011f			;endif  
011f			  
011f			  
011f			; **********************************************************************  
011f			; **  Constants  
011f			; **********************************************************************  
011f			  
011f			; Constants used by this code module  
011f			kDataReg:   EQU Device_D           ;PIO port A data register  
011f			kContReg:   EQU Device_D+2           ;PIO port A control register  
011f			  
011f			  
011f			portbdata:  equ Device_D+1    ; port b data  
011f			portbctl:   equ Device_D+3    ; port b control  
011f			  
011f			  
011f			;KEY_SHIFT:   equ 5  
011f			;KEY_SYMBOLSHIFT:  equ 6  
011f			  
011f			KEY_SHIFTLOCK: equ 4  
011f			  
011f			  
011f			KEY_UP: equ 5  
011f			KEY_NEXTWORD: equ 6  
011f			KEY_PREVWORD: equ 7  
011f			KEY_BS: equ 8  
011f			KEY_TAB:  equ 9  
011f			KEY_DOWN: equ 10  
011f			KEY_LEFT: equ 11  
011f			KEY_RIGHT: equ 12  
011f			KEY_CR:   equ 13  
011f			KEY_HOME: equ 14  
011f			KEY_END: equ 15  
011f			  
011f			KEY_F1: equ 16  
011f			KEY_F2: equ 17  
011f			KEY_F3: equ 18  
011f			KEY_F4: equ 19  
011f			  
011f			KEY_F5: equ 20  
011f			KEY_F6: equ 21  
011f			KEY_F7: equ 22  
011f			KEY_F8: equ 23  
011f			  
011f			KEY_F9: equ 24  
011f			KEY_F10: equ 25  
011f			KEY_F11: equ 26  
011f			KEY_F12: equ 27  
011f			  
011f			;if DEBUG_KEY  
011f			;	KEY_MATRIX_NO_PRESS: equ '.'  
011f			;	KEY_SHIFT:   equ '.'  
011f			;	KEY_SYMBOLSHIFT:  equ '.'  
011f			;else  
011f				KEY_SHIFT:   equ '~'  
011f				KEY_SYMBOLSHIFT:  equ '~'  
011f				KEY_MATRIX_NO_PRESS: equ '~'  
011f			;endi  
011f			  
011f			  
011f			  
011f			  
011f			; Macro to make adding debug marks easier  
011f			  
011f			DMARK: macro str  
011f				push af  
011f				ld a, (.dmark)  
011f				ld (debug_mark),a  
011f				ld a, (.dmark+1)  
011f				ld (debug_mark+1),a  
011f				ld a, (.dmark+2)  
011f				ld (debug_mark+2),a  
011f				jr .pastdmark  
011f			.dmark: db str  
011f			.pastdmark: pop af  
011f			  
011f			endm  
011f			  
011f			  
011f			; macro to detect for stack imbalances  
011f			  
011f			include "stackimbal.asm"  
011f			; Macro and code to detect stock imbalances 
011f			 
011f			SPPUSH: equ 0 
011f			 
011f			; Add a stack frame which can be checked before return 
011f			 
011f			STACKFRAME: macro onoff frame1 frame2 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f						exx 
011f			 
011f						ld de, frame1 
011f						ld a, d 
011f						ld hl, curframe 
011f						call hexout 
011f						ld a, e 
011f						ld hl, curframe+2 
011f						call hexout 
011f			  
011f						ld hl, frame1 
011f						push hl 
011f						ld hl, frame2 
011f						push hl 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			endm 
011f			 
011f			STACKFRAMECHK: macro onoff frame1 frame2 
011f			 
011f					 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						exx 
011f						; check stack frame SP 
011f			 
011f						ld hl, frame2 
011f						pop de   ; frame2 
011f			 
011f						call cmp16 
011f						jr nz, .spnosame 
011f						 
011f			 
011f						ld hl, frame1 
011f						pop de   ; frame1 
011f			 
011f						call cmp16 
011f						jr z, .spfrsame 
011f			 
011f						.spnosame: call showsperror 
011f			 
011f						.spfrsame: nop 
011f			 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			 
011f			 
011f			endm 
011f			 
011f			 
011f			; for a sub routine, wrap SP collection and comparisons 
011f			 
011f			; Usage: 
011f			; 
011f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
011f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
011f			 
011f			SAVESP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f			 
011f						ld (store_sp+(storeword*4)), sp 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			CHECKSP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f			 
011f						; save SP after last save 
011f				 
011f						ld (store_sp+(storeword*4)+2), sp 
011f			 
011f						push hl 
011f						ld hl, store_sp+(storeword*4) 
011f						call check_stack_sp  
011f						pop hl 
011f			 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			if DEBUG_STACK_IMB 
011f			 
011f			check_stack_sp: 
011f					push de 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					push de 
011f			 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					pop hl 
011f			 
011f			 
011f					; check to see if the same 
011f			 
011f					call cmp16 
011f					jr z, .spsame 
011f			 
011f					; not same 
011f			 
011f					call showsperror 
011f			.spsame: 
011f			 
011f					pop de 
011f			 
011f					ret 
011f			 
011f			.sperr:  db "Stack imbalance",0 
011f			 
011f			 
011f			showsperror: 
011f			 
011f			 
011f				push hl 
011f				push af 
011f				push de 
011f				call clear_display 
011f				ld de, .sperr 
011f				ld a,0 
011f			;	ld de,os_word_scratch 
011f				call str_at_display 
011f				ld a, display_row_1+17 
011f				ld de, debug_mark 
011f				call str_at_display 
011f				ld a, 0 
011f				ld (curframe+4),a 
011f				ld hl, curframe 
011f				ld de, os_word_scratch 
011f				ld a, display_row_4 
011f				call str_at_display 
011f				call update_display 
011f				;call break_point_state 
011f				call cin_wait 
011f			 
011f			;	ld a, ' ' 
011f			;	ld (os_view_disable), a 
011f				call bp_on 
011f				pop de	 
011f				pop af 
011f				pop hl 
011f				CALLMONITOR 
011f				ret 
011f			 
011f			endif 
011f			 
011f			 
011f			 
011f			; eof 
# End of file stackimbal.asm
011f			  
011f			;TODO macro to calc col and row offset into screen  
011f			  
011f			  
011f			  
011f			hardware_init:  
011f			  
011f				  
011f			  
011f					;ld a, 0  
011f					;ld (hardware_diag), a  
011f			  
011f					; clear all the buffers  
011f			  
011f 21 0a ed				ld hl, display_fb1  
0122 22 c6 eb				ld (display_fb_active), hl  
0125			  
0125 cd c8 0b				call clear_display  
0128			  
0128 21 c8 eb				ld hl, display_fb2  
012b 22 c6 eb				ld (display_fb_active), hl  
012e			  
012e cd c8 0b				call clear_display  
0131			  
0131					; init primary frame buffer area  
0131 21 ab ed				ld hl, display_fb0  
0134 22 c6 eb				ld (display_fb_active), hl  
0137			  
0137 cd c8 0b				call clear_display  
013a			  
013a			  
013a cd ea 5f				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
013d			  
013d cd d8 60			call key_init  
0140 cd ad 01			call storage_init  
0143			  
0143				; setup malloc functions  
0143			  
0143				if MALLOC_1  
0143 cd ac 11				call  heap_init  
0146				endif  
0146				if MALLOC_4  
0146					call  heap_init  
0146				endif  
0146			  
0146				; init sound hardware if present  
0146			  
0146				if SOUND_ENABLE  
0146					call sound_init  
0146				endif  
0146			  
0146				; lcd test sequence  
0146					  
0146 cd eb 0b			call update_display  
0149 cd 00 0b			call delay1s  
014c 3e 2b			ld a,'+'  
014e cd cd 0b			call fill_display  
0151 cd eb 0b			call update_display  
0154 cd 00 0b			call delay1s  
0157 3e 2a			ld a,'*'  
0159 cd cd 0b			call fill_display  
015c cd eb 0b			call update_display  
015f cd 00 0b			call delay1s  
0162 3e 2d			ld a,'-'  
0164 cd cd 0b			call fill_display  
0167 cd eb 0b			call update_display  
016a cd 00 0b			call delay1s  
016d			  
016d			; boot splash screen  
016d			if display_cols == 20	  
016d			        ld a, display_row_1    
016d			else  
016d 3e 0a		        ld a, display_row_1 +10   
016f			endif  
016f 11 da 16			ld de, prom_bootmsg  
0172 cd db 0b			call str_at_display  
0175 cd eb 0b			call update_display  
0178			  
0178			  
0178 cd 00 0b			call delay1s  
017b cd 00 0b			call delay1s  
017e			if display_cols == 20	  
017e			            LD   A, display_row_3+2  
017e			else  
017e 3e 5c		            LD   A, display_row_3+12  
0180			endif  
0180 11 ef 16			ld de, prom_bootmsg1  
0183 cd db 0b			call str_at_display  
0186			; display debug level  
0186 3e 78		            LD   A, display_row_4  
0188 11 1b 01			ld de, debuglevel  
018b cd db 0b			call str_at_display  
018e			  
018e cd eb 0b			call update_display  
0191 cd 00 0b			call delay1s  
0194 cd 00 0b			call delay1s  
0197			  
0197			;	ld a, display_row_4+3  
0197			;	ld de, bootmsg2  
0197			;	call str_at_display  
0197			;	call update_display  
0197			;	call delay1s  
0197			;	call delay1s  
0197			  
0197			; debug mark setup  
0197			  
0197 3e 5f		ld a, '_'  
0199 32 65 ee		ld (debug_mark),a  
019c 32 66 ee		ld (debug_mark+1),a  
019f 32 67 ee		ld (debug_mark+2),a  
01a2 3e 00		ld a,0  
01a4 32 68 ee		ld (debug_mark+3),a  
01a7 32 69 ee		ld (debug_umark),a  
01aa			  
01aa c9					ret  
01ab			  
01ab			  
01ab			;bootmsg2:	db "Firmware v0.1",0  
01ab			  
01ab			; a 4x20 lcd  
01ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
01ab			  
01ab			;if display_cols == 20  
01ab			;	include "firmware_lcd_4x20.asm"  
01ab			;endif  
01ab			  
01ab			;if display_cols == 40  
01ab			;	include "firmware_lcd_4x40.asm"  
01ab			;endif  
01ab			  
01ab			;  
01ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
01ab			; TODO abstract the bit bang video out interface for dual display  
01ab			; TODO wire video out to tx pin on rc2014 bus  
01ab			  
01ab			; must supply cin, and cin_wait for low level hardware abstraction   
01ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
01ab			; test scancode  
01ab			  
01ab			;;;;;  
01ab			;;;  
01ab			; Moved out to mini and maxi versions  
01ab			;  
01ab			; include "firmware_key_4x4.asm"  
01ab			; using existing 4 wire x 4 resistor array for input  
01ab			;include "firmware_key_4x10.asm"  
01ab			; need to mod the board for 5 rows due to resistor array  
01ab			;include "firmware_key_5x10.asm"  
01ab			  
01ab			; storage hardware interface  
01ab			  
01ab			; use microchip serial eeprom for storage  
01ab			  
01ab			  
01ab			if STORAGE_SE  
01ab				include "firmware_spi.asm"  
01ab				include "firmware_seeprom.asm"  
01ab			else  
01ab			   ; create some stubs for the labels  
01ab c9			se_readbyte: ret  
01ac c9			se_writebyte: ret  
01ad c9			storage_init: ret  
01ae			  
01ae			endif  
01ae			  
01ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
01ae			;include "firmware_cf.asm"  
01ae			  
01ae			; load up high level storage hardward abstractions  
01ae			include "firmware_storage.asm"  
01ae			 
01ae			; persisent storage hardware abstraction layer  
01ae			 
01ae			 
01ae			 
01ae			; Block 0 on storage is a config state 
01ae			 
01ae			 
01ae			 
01ae			; TODO add read phy block and write phy block functions 
01ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
01ae			 
01ae			; Abstraction layer  
01ae			 
01ae			; Logocial block size is same size as physical size - using tape concept 
01ae			 
01ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
01ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
01ae			 
01ae			 
01ae			 
01ae			; Filesystem layout (Logical layout) 
01ae			; 
01ae			; Block 0 - Bank config  
01ae			; 
01ae			;      Byte - 0 file id counter 
01ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
01ae			;      Byte - 3-20 zero terminated bank label 
01ae			; 
01ae			; Block 1 > File storage 
01ae			; 
01ae			;      Byte 0 file id    - block 0 file details 
01ae			;      Byte 1 block id - block 0 is file  
01ae			;            Byte 2-15 - File name 
01ae			; 
01ae			;       - to end of block data 
01ae			; 
01ae			 
01ae			; Get ID for the file named in pointer held HL 
01ae			; Returns ID in HL = 255 if no file found 
01ae			 
01ae			storage_getid: 
01ae			 
01ae 22 6d ea			ld (store_tmp1), hl 
01b1			 
01b1				if DEBUG_STORESE 
01b1					DMARK "SGI" 
01b1 f5				push af  
01b2 3a c6 01			ld a, (.dmark)  
01b5 32 65 ee			ld (debug_mark),a  
01b8 3a c7 01			ld a, (.dmark+1)  
01bb 32 66 ee			ld (debug_mark+1),a  
01be 3a c8 01			ld a, (.dmark+2)  
01c1 32 67 ee			ld (debug_mark+2),a  
01c4 18 03			jr .pastdmark  
01c6 ..			.dmark: db "SGI"  
01c9 f1			.pastdmark: pop af  
01ca			endm  
# End of macro DMARK
01ca					CALLMONITOR 
01ca cd 6f ee			call debug_vector  
01cd				endm  
# End of macro CALLMONITOR
01cd				endif 
01cd				; get block 0 and set counter for number of files to scan 
01cd			 
01cd cd 38 03			call storage_get_block_0 
01d0			 
01d0 3a 74 ea			ld a, (store_page) 
01d3 47				ld b, a 
01d4			 
01d4				; get extent 0 of each file id 
01d4			 
01d4				if DEBUG_STORESE 
01d4					DMARK "SGc" 
01d4 f5				push af  
01d5 3a e9 01			ld a, (.dmark)  
01d8 32 65 ee			ld (debug_mark),a  
01db 3a ea 01			ld a, (.dmark+1)  
01de 32 66 ee			ld (debug_mark+1),a  
01e1 3a eb 01			ld a, (.dmark+2)  
01e4 32 67 ee			ld (debug_mark+2),a  
01e7 18 03			jr .pastdmark  
01e9 ..			.dmark: db "SGc"  
01ec f1			.pastdmark: pop af  
01ed			endm  
# End of macro DMARK
01ed					CALLMONITOR 
01ed cd 6f ee			call debug_vector  
01f0				endm  
# End of macro CALLMONITOR
01f0				endif 
01f0 60			.getloop:	ld h, b 
01f1 2e 00				ld l, 0 
01f3 c5					push bc 
01f4			 
01f4 11 74 ea				ld de, store_page 
01f7				if DEBUG_STORESE 
01f7					DMARK "SGr" 
01f7 f5				push af  
01f8 3a 0c 02			ld a, (.dmark)  
01fb 32 65 ee			ld (debug_mark),a  
01fe 3a 0d 02			ld a, (.dmark+1)  
0201 32 66 ee			ld (debug_mark+1),a  
0204 3a 0e 02			ld a, (.dmark+2)  
0207 32 67 ee			ld (debug_mark+2),a  
020a 18 03			jr .pastdmark  
020c ..			.dmark: db "SGr"  
020f f1			.pastdmark: pop af  
0210			endm  
# End of macro DMARK
0210					CALLMONITOR 
0210 cd 6f ee			call debug_vector  
0213				endm  
# End of macro CALLMONITOR
0213				endif 
0213 cd e0 07				call storage_read 
0216 cd 1e 0e				call ishlzero 
0219 28 2d				jr z, .gap 
021b					 
021b					; have a file name read. Is it one we want. 
021b			 
021b 2a 6d ea				ld hl, (store_tmp1) 
021e 11 77 ea				ld de, store_page+3   ; file name 
0221			 
0221				if DEBUG_STORESE 
0221					DMARK "SGc" 
0221 f5				push af  
0222 3a 36 02			ld a, (.dmark)  
0225 32 65 ee			ld (debug_mark),a  
0228 3a 37 02			ld a, (.dmark+1)  
022b 32 66 ee			ld (debug_mark+1),a  
022e 3a 38 02			ld a, (.dmark+2)  
0231 32 67 ee			ld (debug_mark+2),a  
0234 18 03			jr .pastdmark  
0236 ..			.dmark: db "SGc"  
0239 f1			.pastdmark: pop af  
023a			endm  
# End of macro DMARK
023a					CALLMONITOR 
023a cd 6f ee			call debug_vector  
023d				endm  
# End of macro CALLMONITOR
023d				endif 
023d cd 93 11				call strcmp 
0240 20 06				jr nz, .gap   ; not this one 
0242			 
0242 c1				        pop bc 
0243			 
0243 26 00				ld h, 0 
0245 68					ld l, b 
0246 18 22				jr .getdone 
0248						 
0248			 
0248			 
0248			 
0248			.gap: 
0248				if DEBUG_STORESE 
0248					DMARK "SGg" 
0248 f5				push af  
0249 3a 5d 02			ld a, (.dmark)  
024c 32 65 ee			ld (debug_mark),a  
024f 3a 5e 02			ld a, (.dmark+1)  
0252 32 66 ee			ld (debug_mark+1),a  
0255 3a 5f 02			ld a, (.dmark+2)  
0258 32 67 ee			ld (debug_mark+2),a  
025b 18 03			jr .pastdmark  
025d ..			.dmark: db "SGg"  
0260 f1			.pastdmark: pop af  
0261			endm  
# End of macro DMARK
0261					CALLMONITOR 
0261 cd 6f ee			call debug_vector  
0264				endm  
# End of macro CALLMONITOR
0264				endif 
0264			 
0264 c1					pop bc 
0265 10 89				djnz .getloop 
0267 21 ff 00				ld hl, 255 
026a			.getdone: 
026a			 
026a				if DEBUG_STORESE 
026a					DMARK "SGe" 
026a f5				push af  
026b 3a 7f 02			ld a, (.dmark)  
026e 32 65 ee			ld (debug_mark),a  
0271 3a 80 02			ld a, (.dmark+1)  
0274 32 66 ee			ld (debug_mark+1),a  
0277 3a 81 02			ld a, (.dmark+2)  
027a 32 67 ee			ld (debug_mark+2),a  
027d 18 03			jr .pastdmark  
027f ..			.dmark: db "SGe"  
0282 f1			.pastdmark: pop af  
0283			endm  
# End of macro DMARK
0283					CALLMONITOR 
0283 cd 6f ee			call debug_vector  
0286				endm  
# End of macro CALLMONITOR
0286				endif 
0286			 
0286 c9				ret 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			; Read Block 
0287			; ---------- 
0287			; 
0287			; With current bank 
0287			;  
0287			; Get block number to read 
0287			; Load physical blocks starting at start block into buffer 
0287			 
0287			; de points to buffer to use 
0287			; hl holds logical block number  
0287			 
0287			storage_read_block: 
0287			 
0287				; TODO bank selection 
0287			 
0287				; for each of the physical blocks read it into the buffer 
0287 06 40			ld b, STORE_BLOCK_PHY 
0289			 
0289				if DEBUG_STORESE 
0289 d5					push de 
028a				endif 
028a				 
028a			.rl1:    
028a			 
028a				; read physical block at hl into de 
028a			        ; increment hl and de to next read position on exit 
028a			 
028a e5				push hl 
028b d5				push de	 
028c c5				push bc 
028d			;	if DEBUG_STORESE 
028d			;		push af 
028d			;		ld a, 'R' 
028d			;		ld (debug_mark),a 
028d			;		pop af 
028d			;		CALLMONITOR 
028d			;	endif 
028d cd ab 01			call se_readbyte 
0290			;	if DEBUG_STORESE 
0290			;		ld a,(spi_portbyte) 
0290			;		ld l, a 
0290			;		push af 
0290			;		ld a, '1' 
0290			;		ld (debug_mark),a 
0290			;		pop af 
0290			;		CALLMONITOR 
0290			;	endif 
0290 c1				pop bc 
0291 d1				pop de 
0292 e1				pop hl 
0293 12				ld (de),a 
0294 23				inc hl 
0295 13				inc de 
0296			 
0296			;	if DEBUG_STORESE 
0296			;		push af 
0296			;		ld a, 'r' 
0296			;		ld (debug_mark),a 
0296			;		pop af 
0296			;		CALLMONITOR 
0296			;	endif 
0296			 
0296 10 f2			djnz .rl1 
0298			 
0298				if DEBUG_STORESE 
0298					DMARK "SRB" 
0298 f5				push af  
0299 3a ad 02			ld a, (.dmark)  
029c 32 65 ee			ld (debug_mark),a  
029f 3a ae 02			ld a, (.dmark+1)  
02a2 32 66 ee			ld (debug_mark+1),a  
02a5 3a af 02			ld a, (.dmark+2)  
02a8 32 67 ee			ld (debug_mark+2),a  
02ab 18 03			jr .pastdmark  
02ad ..			.dmark: db "SRB"  
02b0 f1			.pastdmark: pop af  
02b1			endm  
# End of macro DMARK
02b1 d1					pop de 
02b2			; 
02b2			;		push af 
02b2			;		ld a, 'R' 
02b2			;		ld (debug_mark),a 
02b2			;		pop af 
02b2					CALLMONITOR 
02b2 cd 6f ee			call debug_vector  
02b5				endm  
# End of macro CALLMONITOR
02b5				endif 
02b5 c9				ret	 
02b6				 
02b6			 
02b6			; File Size 
02b6			; --------- 
02b6			; 
02b6			;   hl file id 
02b6			; 
02b6			;  returns in hl the number of blocks 
02b6			 
02b6			storage_file_size: 
02b6 5d				ld e, l 
02b7 16 00			ld d, 0 
02b9 21 40 00			ld hl, STORE_BLOCK_PHY 
02bc					if DEBUG_FORTH_WORDS 
02bc						DMARK "SIZ" 
02bc f5				push af  
02bd 3a d1 02			ld a, (.dmark)  
02c0 32 65 ee			ld (debug_mark),a  
02c3 3a d2 02			ld a, (.dmark+1)  
02c6 32 66 ee			ld (debug_mark+1),a  
02c9 3a d3 02			ld a, (.dmark+2)  
02cc 32 67 ee			ld (debug_mark+2),a  
02cf 18 03			jr .pastdmark  
02d1 ..			.dmark: db "SIZ"  
02d4 f1			.pastdmark: pop af  
02d5			endm  
# End of macro DMARK
02d5						CALLMONITOR 
02d5 cd 6f ee			call debug_vector  
02d8				endm  
# End of macro CALLMONITOR
02d8					endif 
02d8 cd ba 05			call storage_findnextid 
02db			 
02db cd 1e 0e			call ishlzero 
02de			;	ld a, l 
02de			;	add h 
02de			;	cp 0 
02de c8				ret z			; block not found so EOF 
02df			 
02df 11 74 ea			ld de, store_page 
02e2 cd 87 02			call storage_read_block 
02e5			 
02e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
02e8 6f				ld l, a 
02e9 26 00			ld h, 0 
02eb c9			 	ret 
02ec			 
02ec			 
02ec			; Write Block 
02ec			; ----------- 
02ec			; 
02ec			; With current bank 
02ec			;  
02ec			; Get block number to write 
02ec			; Write physical blocks starting at start block from buffer 
02ec			  
02ec			storage_write_block: 
02ec				; TODO bank selection 
02ec			 
02ec				; for each of the physical blocks read it into the buffer 
02ec 06 40			ld b, STORE_BLOCK_PHY 
02ee			 
02ee				if DEBUG_STORESE 
02ee					DMARK "SWB" 
02ee f5				push af  
02ef 3a 03 03			ld a, (.dmark)  
02f2 32 65 ee			ld (debug_mark),a  
02f5 3a 04 03			ld a, (.dmark+1)  
02f8 32 66 ee			ld (debug_mark+1),a  
02fb 3a 05 03			ld a, (.dmark+2)  
02fe 32 67 ee			ld (debug_mark+2),a  
0301 18 03			jr .pastdmark  
0303 ..			.dmark: db "SWB"  
0306 f1			.pastdmark: pop af  
0307			endm  
# End of macro DMARK
0307			 
0307					;push af 
0307					;ld a, 'W' 
0307					;ld (debug_mark),a 
0307					;pop af 
0307					CALLMONITOR 
0307 cd 6f ee			call debug_vector  
030a				endm  
# End of macro CALLMONITOR
030a				endif 
030a			 
030a			; might not be working 
030a			;	call se_writepage 
030a			 
030a			;	ret 
030a			; 
030a			 
030a			 
030a			 
030a			.wl1:    
030a			 
030a				; read physical block at hl into de 
030a			        ; increment hl and de to next read position on exit 
030a			 
030a e5				push hl 
030b d5				push de	 
030c c5				push bc 
030d 1a				ld a,(de) 
030e				;if DEBUG_STORESE 
030e			;		push af 
030e			;		ld a, 'W' 
030e			;		ld (debug_mark),a 
030e			;		pop af 
030e			;		CALLMONITOR 
030e			;	endif 
030e cd ac 01			call se_writebyte 
0311			;	call delay250ms 
0311 00				nop 
0312 00				nop 
0313 00				nop 
0314			;	if DEBUG_STORESE 
0314			;		push af 
0314			;		ld a, 'w' 
0314			;		ld (debug_mark),a 
0314			;		pop af 
0314			;		CALLMONITOR 
0314			;	endif 
0314 c1				pop bc 
0315 d1				pop de 
0316 e1				pop hl 
0317 23				inc hl 
0318 13				inc de 
0319			 
0319			 
0319 10 ef			djnz .wl1 
031b			 
031b				if DEBUG_STORESE 
031b					DMARK "SW2" 
031b f5				push af  
031c 3a 30 03			ld a, (.dmark)  
031f 32 65 ee			ld (debug_mark),a  
0322 3a 31 03			ld a, (.dmark+1)  
0325 32 66 ee			ld (debug_mark+1),a  
0328 3a 32 03			ld a, (.dmark+2)  
032b 32 67 ee			ld (debug_mark+2),a  
032e 18 03			jr .pastdmark  
0330 ..			.dmark: db "SW2"  
0333 f1			.pastdmark: pop af  
0334			endm  
# End of macro DMARK
0334			 
0334					;push af 
0334					;ld a, 'W' 
0334					;ld (debug_mark),a 
0334					;pop af 
0334					CALLMONITOR 
0334 cd 6f ee			call debug_vector  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338			 
0338			; Init bank 
0338			; --------- 
0338			; 
0338			; With current bank 
0338			; 
0338			; Setup block 0 config 
0338			;     Set 0 file id counter 
0338			;     Set formatted byte pattern 
0338			;     Zero out bank label 
0338			;      
0338			; For every logical block write 0-1 byte as null 
0338			 
0338			storage_get_block_0: 
0338			 
0338				; TODO check presence 
0338			 
0338				; get block 0 config 
0338			 
0338 21 00 00			ld hl, 0 
033b 11 74 ea			ld de, store_page 
033e cd 87 02			call storage_read_block 
0341			 
0341				if DEBUG_STORESE 
0341					DMARK "SB0" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 65 ee			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 66 ee			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 67 ee			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SB0"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a 11 74 ea				ld de, store_page 
035d			;		push af 
035d			;		ld a, 'i' 
035d			;		ld (debug_mark),a 
035d			;		pop af 
035d					CALLMONITOR 
035d cd 6f ee			call debug_vector  
0360				endm  
# End of macro CALLMONITOR
0360				endif 
0360			 
0360				; is this area formatted? 
0360			 
0360			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0360 2a 75 ea			ld hl, (store_page+1) 
0363 3e 80			ld a,0x80 
0365 bd				cp l 
0366 20 22			jr nz, .ininotformatted 
0368				; do a double check 
0368 3e 27			ld a, 0x27 
036a bc				cp h 
036b 20 1d			jr nz, .ininotformatted 
036d			 
036d				; formatted then 
036d			 
036d				if DEBUG_STORESE 
036d					DMARK "SB1" 
036d f5				push af  
036e 3a 82 03			ld a, (.dmark)  
0371 32 65 ee			ld (debug_mark),a  
0374 3a 83 03			ld a, (.dmark+1)  
0377 32 66 ee			ld (debug_mark+1),a  
037a 3a 84 03			ld a, (.dmark+2)  
037d 32 67 ee			ld (debug_mark+2),a  
0380 18 03			jr .pastdmark  
0382 ..			.dmark: db "SB1"  
0385 f1			.pastdmark: pop af  
0386			endm  
# End of macro DMARK
0386					;push af 
0386					;ld a, 'I' 
0386					;ld (debug_mark),a 
0386					;pop af 
0386					CALLMONITOR 
0386 cd 6f ee			call debug_vector  
0389				endm  
# End of macro CALLMONITOR
0389				endif 
0389 c9				ret 
038a			 
038a			.ininotformatted: 
038a				; bank not formatted so poke various bits to make sure 
038a			 
038a				if DEBUG_STORESE 
038a					DMARK "SB2" 
038a f5				push af  
038b 3a 9f 03			ld a, (.dmark)  
038e 32 65 ee			ld (debug_mark),a  
0391 3a a0 03			ld a, (.dmark+1)  
0394 32 66 ee			ld (debug_mark+1),a  
0397 3a a1 03			ld a, (.dmark+2)  
039a 32 67 ee			ld (debug_mark+2),a  
039d 18 03			jr .pastdmark  
039f ..			.dmark: db "SB2"  
03a2 f1			.pastdmark: pop af  
03a3			endm  
# End of macro DMARK
03a3					;push af 
03a3					;ld a, 'f' 
03a3					;ld (debug_mark),a 
03a3					;pop af 
03a3					CALLMONITOR 
03a3 cd 6f ee			call debug_vector  
03a6				endm  
# End of macro CALLMONITOR
03a6				endif 
03a6			 
03a6 cd c3 0a			call storage_clear_page 
03a9			 
03a9 21 74 ea			ld hl, store_page 
03ac 3e 00			ld a, 0 
03ae				 
03ae 77				ld (hl),a   ; reset file counter 
03af			 
03af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03b2 22 75 ea		 	ld (store_page+1), hl	 
03b5			 
03b5				; set default label 
03b5			 
03b5 21 51 04			ld hl, .defaultbanklabl 
03b8 11 77 ea		 	ld de, store_page+3 
03bb 01 0f 00			ld bc, 15 
03be ed b0			ldir 
03c0			 
03c0				; Append the current bank id 
03c0 21 80 ea			ld hl, store_page+3+9 
03c3 3a 59 ea			ld a, (spi_device_id) 
03c6 77				ld (hl), a 
03c7			 
03c7				; save default page 0 
03c7			 
03c7 21 00 00			ld hl, 0 
03ca 11 74 ea			ld de, store_page 
03cd				if DEBUG_STORESE 
03cd					DMARK "SB3" 
03cd f5				push af  
03ce 3a e2 03			ld a, (.dmark)  
03d1 32 65 ee			ld (debug_mark),a  
03d4 3a e3 03			ld a, (.dmark+1)  
03d7 32 66 ee			ld (debug_mark+1),a  
03da 3a e4 03			ld a, (.dmark+2)  
03dd 32 67 ee			ld (debug_mark+2),a  
03e0 18 03			jr .pastdmark  
03e2 ..			.dmark: db "SB3"  
03e5 f1			.pastdmark: pop af  
03e6			endm  
# End of macro DMARK
03e6			;		push af 
03e6			;		ld a, 'F' 
03e6			;		ld (debug_mark),a 
03e6			;		pop af 
03e6					CALLMONITOR 
03e6 cd 6f ee			call debug_vector  
03e9				endm  
# End of macro CALLMONITOR
03e9				endif 
03e9 cd ec 02			call storage_write_block 
03ec				if DEBUG_STORESE 
03ec					DMARK "SB4" 
03ec f5				push af  
03ed 3a 01 04			ld a, (.dmark)  
03f0 32 65 ee			ld (debug_mark),a  
03f3 3a 02 04			ld a, (.dmark+1)  
03f6 32 66 ee			ld (debug_mark+1),a  
03f9 3a 03 04			ld a, (.dmark+2)  
03fc 32 67 ee			ld (debug_mark+2),a  
03ff 18 03			jr .pastdmark  
0401 ..			.dmark: db "SB4"  
0404 f1			.pastdmark: pop af  
0405			endm  
# End of macro DMARK
0405			;		push af 
0405			;		ld a, '>' 
0405			;		ld (debug_mark),a 
0405			;		pop af 
0405					CALLMONITOR 
0405 cd 6f ee			call debug_vector  
0408				endm  
# End of macro CALLMONITOR
0408				endif 
0408			 
0408 00				nop 
0409 00				nop 
040a 00				nop 
040b			 
040b				; now set 0 in every page to mark as a free block 
040b			 
040b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
040d 21 40 00			ld hl, STORE_BLOCK_PHY 
0410			 
0410 3e 00		.setmark1:   	ld a,0 
0412 e5					push hl 
0413 c5					push bc 
0414 cd ac 01				call se_writebyte 
0417 3e 0a			ld a, 10 
0419 cd e5 0a			call aDelayInMS 
041c 23				inc hl 
041d cd ac 01				call se_writebyte 
0420 3e 0a			ld a, 10 
0422 cd e5 0a			call aDelayInMS 
0425 2b				dec hl 
0426 c1					pop bc 
0427 e1					pop hl 
0428 3e 40				ld a, STORE_BLOCK_PHY 
042a cd f5 0d				call addatohl 
042d 10 e1				djnz .setmark1 
042f			 
042f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0431 3e 00		.setmark2:   	ld a,0 
0433 e5					push hl 
0434 c5					push bc 
0435 cd ac 01				call se_writebyte 
0438 3e 0a			ld a, 10 
043a cd e5 0a			call aDelayInMS 
043d 23				inc hl 
043e cd ac 01				call se_writebyte 
0441 3e 0a			ld a, 10 
0443 cd e5 0a			call aDelayInMS 
0446 2b				dec hl 
0447 c1					pop bc 
0448 e1					pop hl 
0449 3e 40				ld a, STORE_BLOCK_PHY 
044b cd f5 0d				call addatohl 
044e 10 e1				djnz .setmark2 
0450			 
0450					 
0450			 
0450			 
0450 c9				ret 
0451			 
0451			 
0451			 
0451			 
0451 .. 00		.defaultbanklabl:   db "BankLabel_",0 
045c			 
045c			 
045c			 
045c			; Label Bank 
045c			; ---------- 
045c			; 
045c			; With current bank 
045c			; Read block 0 
045c			; Set label 
045c			; Write block 0 
045c			 
045c			; label str pointer in hl 
045c			 
045c			storage_label:     
045c			 
045c				if DEBUG_STORESE 
045c					DMARK "LBL" 
045c f5				push af  
045d 3a 71 04			ld a, (.dmark)  
0460 32 65 ee			ld (debug_mark),a  
0463 3a 72 04			ld a, (.dmark+1)  
0466 32 66 ee			ld (debug_mark+1),a  
0469 3a 73 04			ld a, (.dmark+2)  
046c 32 67 ee			ld (debug_mark+2),a  
046f 18 03			jr .pastdmark  
0471 ..			.dmark: db "LBL"  
0474 f1			.pastdmark: pop af  
0475			endm  
# End of macro DMARK
0475					CALLMONITOR 
0475 cd 6f ee			call debug_vector  
0478				endm  
# End of macro CALLMONITOR
0478				endif 
0478			 
0478 e5				push hl 
0479			 
0479 cd 38 03			call storage_get_block_0 
047c			 
047c				; set default label 
047c			 
047c e1				pop hl 
047d			 
047d 11 77 ea		 	ld de, store_page+3 
0480 01 0f 00			ld bc, 15 
0483				if DEBUG_STORESE 
0483					DMARK "LB3" 
0483 f5				push af  
0484 3a 98 04			ld a, (.dmark)  
0487 32 65 ee			ld (debug_mark),a  
048a 3a 99 04			ld a, (.dmark+1)  
048d 32 66 ee			ld (debug_mark+1),a  
0490 3a 9a 04			ld a, (.dmark+2)  
0493 32 67 ee			ld (debug_mark+2),a  
0496 18 03			jr .pastdmark  
0498 ..			.dmark: db "LB3"  
049b f1			.pastdmark: pop af  
049c			endm  
# End of macro DMARK
049c					CALLMONITOR 
049c cd 6f ee			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f ed b0			ldir 
04a1				; save default page 0 
04a1			 
04a1 21 00 00			ld hl, 0 
04a4 11 74 ea			ld de, store_page 
04a7				if DEBUG_STORESE 
04a7					DMARK "LBW" 
04a7 f5				push af  
04a8 3a bc 04			ld a, (.dmark)  
04ab 32 65 ee			ld (debug_mark),a  
04ae 3a bd 04			ld a, (.dmark+1)  
04b1 32 66 ee			ld (debug_mark+1),a  
04b4 3a be 04			ld a, (.dmark+2)  
04b7 32 67 ee			ld (debug_mark+2),a  
04ba 18 03			jr .pastdmark  
04bc ..			.dmark: db "LBW"  
04bf f1			.pastdmark: pop af  
04c0			endm  
# End of macro DMARK
04c0					CALLMONITOR 
04c0 cd 6f ee			call debug_vector  
04c3				endm  
# End of macro CALLMONITOR
04c3				endif 
04c3 cd ec 02			call storage_write_block 
04c6			 
04c6 c9				ret 
04c7			 
04c7			 
04c7			 
04c7			; Read Block 0 - Config 
04c7			; --------------------- 
04c7			; 
04c7			; With current bank 
04c7			; Call presence test 
04c7			;    If not present format/init bank  
04c7			; Read block 0  
04c7			;  
04c7			 
04c7			 
04c7			; Dir 
04c7			; --- 
04c7			; 
04c7			; With current bank 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block read byte 2 
04c7			;      if first block of file 
04c7			;         Display file name 
04c7			;         Display type flags for file 
04c7			;        
04c7			 
04c7			; moving to words as this requires stack control 
04c7			 
04c7			 
04c7			; Delete File 
04c7			; ----------- 
04c7			; 
04c7			; With current bank 
04c7			; 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block file id 
04c7			;      If first block of file and dont have file id 
04c7			;         if file to delete 
04c7			;         Save file id 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			;      If file id is one saved 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			 
04c7			 
04c7			.se_done: 
04c7 e1				pop hl 
04c8 c9				ret 
04c9			 
04c9			storage_erase: 
04c9			 
04c9				; hl contains the file id 
04c9			 
04c9 5d				ld e, l 
04ca 16 00			ld d, 0 
04cc 21 40 00			ld hl, STORE_BLOCK_PHY 
04cf					if DEBUG_FORTH_WORDS 
04cf						DMARK "ERA" 
04cf f5				push af  
04d0 3a e4 04			ld a, (.dmark)  
04d3 32 65 ee			ld (debug_mark),a  
04d6 3a e5 04			ld a, (.dmark+1)  
04d9 32 66 ee			ld (debug_mark+1),a  
04dc 3a e6 04			ld a, (.dmark+2)  
04df 32 67 ee			ld (debug_mark+2),a  
04e2 18 03			jr .pastdmark  
04e4 ..			.dmark: db "ERA"  
04e7 f1			.pastdmark: pop af  
04e8			endm  
# End of macro DMARK
04e8						CALLMONITOR 
04e8 cd 6f ee			call debug_vector  
04eb				endm  
# End of macro CALLMONITOR
04eb					endif 
04eb cd ba 05			call storage_findnextid 
04ee cd 1e 0e			call ishlzero 
04f1 c8				ret z 
04f2			 
04f2 e5				push hl 
04f3			 
04f3				; TODO check file not found 
04f3			 
04f3 11 74 ea			ld de, store_page 
04f6 cd 87 02			call storage_read_block 
04f9			 
04f9 cd 1e 0e			call ishlzero 
04fc ca c7 04			jp z,.se_done 
04ff			 
04ff					if DEBUG_FORTH_WORDS 
04ff						DMARK "ER1" 
04ff f5				push af  
0500 3a 14 05			ld a, (.dmark)  
0503 32 65 ee			ld (debug_mark),a  
0506 3a 15 05			ld a, (.dmark+1)  
0509 32 66 ee			ld (debug_mark+1),a  
050c 3a 16 05			ld a, (.dmark+2)  
050f 32 67 ee			ld (debug_mark+2),a  
0512 18 03			jr .pastdmark  
0514 ..			.dmark: db "ER1"  
0517 f1			.pastdmark: pop af  
0518			endm  
# End of macro DMARK
0518						CALLMONITOR 
0518 cd 6f ee			call debug_vector  
051b				endm  
# End of macro CALLMONITOR
051b					endif 
051b 3a 74 ea			ld a, (store_page)	; get file id 
051e 32 68 ea			ld (store_tmpid), a 
0521			 
0521 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
0524 32 67 ea			ld (store_tmpext), a 
0527			 
0527				; wipe file header 
0527			 
0527 e1				pop hl 
0528 3e 00			ld a, 0 
052a 32 74 ea			ld (store_page), a 
052d 32 75 ea			ld (store_page+1),a 
0530 11 74 ea			ld de, store_page 
0533					if DEBUG_FORTH_WORDS 
0533						DMARK "ER2" 
0533 f5				push af  
0534 3a 48 05			ld a, (.dmark)  
0537 32 65 ee			ld (debug_mark),a  
053a 3a 49 05			ld a, (.dmark+1)  
053d 32 66 ee			ld (debug_mark+1),a  
0540 3a 4a 05			ld a, (.dmark+2)  
0543 32 67 ee			ld (debug_mark+2),a  
0546 18 03			jr .pastdmark  
0548 ..			.dmark: db "ER2"  
054b f1			.pastdmark: pop af  
054c			endm  
# End of macro DMARK
054c						CALLMONITOR 
054c cd 6f ee			call debug_vector  
054f				endm  
# End of macro CALLMONITOR
054f					endif 
054f cd ec 02			call storage_write_block 
0552			 
0552			 
0552				; wipe file extents 
0552			 
0552 3a 67 ea			ld a, (store_tmpext) 
0555 47				ld b, a 
0556			 
0556			.eraext:	  
0556 c5				push bc 
0557			 
0557 21 40 00			ld hl, STORE_BLOCK_PHY 
055a 3a 68 ea			ld a,(store_tmpid) 
055d 5f				ld e, a 
055e 50				ld d, b	 
055f					if DEBUG_FORTH_WORDS 
055f						DMARK "ER3" 
055f f5				push af  
0560 3a 74 05			ld a, (.dmark)  
0563 32 65 ee			ld (debug_mark),a  
0566 3a 75 05			ld a, (.dmark+1)  
0569 32 66 ee			ld (debug_mark+1),a  
056c 3a 76 05			ld a, (.dmark+2)  
056f 32 67 ee			ld (debug_mark+2),a  
0572 18 03			jr .pastdmark  
0574 ..			.dmark: db "ER3"  
0577 f1			.pastdmark: pop af  
0578			endm  
# End of macro DMARK
0578						CALLMONITOR 
0578 cd 6f ee			call debug_vector  
057b				endm  
# End of macro CALLMONITOR
057b					endif 
057b cd ba 05			call storage_findnextid 
057e cd 1e 0e			call ishlzero 
0581 ca c7 04			jp z,.se_done 
0584			 
0584 e5				push hl 
0585 11 74 ea			ld de, store_page 
0588 cd 87 02			call storage_read_block 
058b			 
058b				; free block	 
058b			 
058b 3e 00			ld a, 0 
058d 32 74 ea			ld (store_page), a 
0590 32 75 ea			ld (store_page+1),a 
0593 11 74 ea			ld de, store_page 
0596 e1				pop hl 
0597					if DEBUG_FORTH_WORDS 
0597						DMARK "ER4" 
0597 f5				push af  
0598 3a ac 05			ld a, (.dmark)  
059b 32 65 ee			ld (debug_mark),a  
059e 3a ad 05			ld a, (.dmark+1)  
05a1 32 66 ee			ld (debug_mark+1),a  
05a4 3a ae 05			ld a, (.dmark+2)  
05a7 32 67 ee			ld (debug_mark+2),a  
05aa 18 03			jr .pastdmark  
05ac ..			.dmark: db "ER4"  
05af f1			.pastdmark: pop af  
05b0			endm  
# End of macro DMARK
05b0						CALLMONITOR 
05b0 cd 6f ee			call debug_vector  
05b3				endm  
# End of macro CALLMONITOR
05b3					endif 
05b3 cd ec 02			call storage_write_block 
05b6			 
05b6 c1				pop bc 
05b7 10 9d			djnz .eraext 
05b9			 
05b9 c9				ret 
05ba			 
05ba			 
05ba			; Find Free Block 
05ba			; --------------- 
05ba			; 
05ba			; With current bank 
05ba			;  
05ba			; From given starting logical block 
05ba			;    Read block  
05ba			;    If no file id 
05ba			;         Return block id 
05ba			 
05ba			 
05ba			; hl starting page number 
05ba			; hl contains free page number or zero if no pages free 
05ba			; e contains the file id to locate 
05ba			; d contains the block number 
05ba			 
05ba			; TODO change to find file id and use zero for free block 
05ba			 
05ba			storage_findnextid: 
05ba			 
05ba				; now locate first 0 page to mark as a free block 
05ba			 
05ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05bc			;	ld hl, STORE_BLOCK_PHY 
05bc			 
05bc					if DEBUG_FORTH_WORDS 
05bc					DMARK "FNI" 
05bc f5				push af  
05bd 3a d1 05			ld a, (.dmark)  
05c0 32 65 ee			ld (debug_mark),a  
05c3 3a d2 05			ld a, (.dmark+1)  
05c6 32 66 ee			ld (debug_mark+1),a  
05c9 3a d3 05			ld a, (.dmark+2)  
05cc 32 67 ee			ld (debug_mark+2),a  
05cf 18 03			jr .pastdmark  
05d1 ..			.dmark: db "FNI"  
05d4 f1			.pastdmark: pop af  
05d5			endm  
# End of macro DMARK
05d5						CALLMONITOR 
05d5 cd 6f ee			call debug_vector  
05d8				endm  
# End of macro CALLMONITOR
05d8					endif 
05d8			.ff1:   	 
05d8 e5					push hl 
05d9 c5					push bc 
05da d5					push de 
05db cd ab 01				call se_readbyte 
05de 5f					ld e,a 
05df 23					inc hl 
05e0 cd ab 01				call se_readbyte 
05e3 57					ld d, a 
05e4 e1					pop hl 
05e5 e5					push hl 
05e6 cd 13 0e				call cmp16 
05e9 28 49				jr z, .fffound 
05eb			 
05eb d1					pop de 
05ec c1					pop bc 
05ed e1					pop hl 
05ee			 
05ee					; is found? 
05ee					;cp e 
05ee					;ret z 
05ee			 
05ee 3e 40				ld a, STORE_BLOCK_PHY 
05f0 cd f5 0d				call addatohl 
05f3 10 e3				djnz .ff1 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7			.ff2:   	 
05f7			 
05f7 e5					push hl 
05f8 c5					push bc 
05f9 d5					push de 
05fa cd ab 01				call se_readbyte 
05fd 5f					ld e,a 
05fe 23					inc hl 
05ff cd ab 01				call se_readbyte 
0602 57					ld d, a 
0603			 
0603 e1					pop hl 
0604 e5					push hl 
0605 cd 13 0e				call cmp16 
0608 28 2a				jr z, .fffound 
060a			 
060a d1					pop de 
060b c1					pop bc 
060c e1					pop hl 
060d					; is found? 
060d					;cp e 
060d					;ret z 
060d			 
060d 3e 40				ld a, STORE_BLOCK_PHY 
060f cd f5 0d				call addatohl 
0612 10 e3				djnz .ff2 
0614			 
0614			 
0614					if DEBUG_FORTH_WORDS 
0614					DMARK "FN-" 
0614 f5				push af  
0615 3a 29 06			ld a, (.dmark)  
0618 32 65 ee			ld (debug_mark),a  
061b 3a 2a 06			ld a, (.dmark+1)  
061e 32 66 ee			ld (debug_mark+1),a  
0621 3a 2b 06			ld a, (.dmark+2)  
0624 32 67 ee			ld (debug_mark+2),a  
0627 18 03			jr .pastdmark  
0629 ..			.dmark: db "FN-"  
062c f1			.pastdmark: pop af  
062d			endm  
# End of macro DMARK
062d					;	push af 
062d					;	ld a, 'n' 
062d					;	ld (debug_mark),a 
062d					;	pop af 
062d						CALLMONITOR 
062d cd 6f ee			call debug_vector  
0630				endm  
# End of macro CALLMONITOR
0630					endif 
0630				; no free marks! 
0630 21 00 00				ld hl, 0 
0633 c9				ret 
0634			.fffound: 
0634				 
0634			 
0634 d1					pop de 
0635 c1					pop bc 
0636 e1					pop hl 
0637					if DEBUG_FORTH_WORDS 
0637					DMARK "FNF" 
0637 f5				push af  
0638 3a 4c 06			ld a, (.dmark)  
063b 32 65 ee			ld (debug_mark),a  
063e 3a 4d 06			ld a, (.dmark+1)  
0641 32 66 ee			ld (debug_mark+1),a  
0644 3a 4e 06			ld a, (.dmark+2)  
0647 32 67 ee			ld (debug_mark+2),a  
064a 18 03			jr .pastdmark  
064c ..			.dmark: db "FNF"  
064f f1			.pastdmark: pop af  
0650			endm  
# End of macro DMARK
0650					;	push af 
0650					;	ld a, 'n' 
0650					;	ld (debug_mark),a 
0650					;	pop af 
0650						CALLMONITOR 
0650 cd 6f ee			call debug_vector  
0653				endm  
# End of macro CALLMONITOR
0653					endif 
0653 c9				ret 
0654			 
0654			 
0654			 
0654			; Free Space 
0654			; ---------- 
0654			; 
0654			; With current bank 
0654			; 
0654			; Set block count to zero 
0654			; Starting with first logical block 
0654			;      Find free block  
0654			;      If block id given, increment block count 
0654			; 
0654			;  
0654			 
0654			 
0654			; hl contains count of free blocks 
0654			 
0654			storage_freeblocks: 
0654			 
0654				; now locate first 0 page to mark as a free block 
0654			 
0654 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0656 21 40 00			ld hl, STORE_BLOCK_PHY 
0659 11 00 00			ld de, 0 
065c			 
065c			.fb1:   	 
065c e5					push hl 
065d c5					push bc 
065e d5					push de 
065f cd ab 01				call se_readbyte 
0662 d1					pop de 
0663 c1					pop bc 
0664 e1					pop hl 
0665			 
0665					; is free? 
0665 fe 00				cp 0 
0667 20 01				jr nz, .ff1cont 
0669 13					inc de 
066a			 
066a			.ff1cont: 
066a			 
066a			 
066a 3e 40				ld a, STORE_BLOCK_PHY 
066c cd f5 0d				call addatohl 
066f 10 eb				djnz .fb1 
0671			 
0671 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0673			.fb2:   	 
0673 e5					push hl 
0674 c5					push bc 
0675 d5					push de 
0676 cd ab 01				call se_readbyte 
0679 d1					pop de 
067a c1					pop bc 
067b e1					pop hl 
067c			 
067c					; is free? 
067c fe 00				cp 0 
067e 20 01				jr nz, .ff2cont 
0680 13					inc de 
0681			 
0681			.ff2cont: 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd f5 0d				call addatohl 
0686 10 eb				djnz .fb2 
0688			 
0688 eb				ex de, hl 
0689 c9				ret 
068a			 
068a			; Get File ID 
068a			; ----------- 
068a			; 
068a			; With current bank 
068a			;  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; For each logical block 
068a			;    Read block file id 
068a			;      If first block of file and dont have file id 
068a			;         if file get id and exit 
068a			 
068a			 
068a			 
068a			 
068a			; Create File 
068a			; ----------- 
068a			; 
068a			; With current bank  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; Increment file id number 
068a			; Save Config 
068a			; Find free block 
068a			; Set buffer with file name and file id 
068a			; Write buffer to free block  
068a			 
068a			 
068a			; hl point to file name 
068a			; hl returns file id 
068a			 
068a			; file format: 
068a			; byte 0 - file id 
068a			; byte 1 - extent number 
068a			; byte 2-> data 
068a			 
068a			; format for extent number 0: 
068a			; 
068a			; byte 0 - file id 
068a			; byte 1 - extent 0 
068a			; byte 2 - extent count 
068a			; byte 3 -> file name and meta data 
068a			 
068a			 
068a			storage_create: 
068a				if DEBUG_STORESE 
068a					DMARK "SCR" 
068a f5				push af  
068b 3a 9f 06			ld a, (.dmark)  
068e 32 65 ee			ld (debug_mark),a  
0691 3a a0 06			ld a, (.dmark+1)  
0694 32 66 ee			ld (debug_mark+1),a  
0697 3a a1 06			ld a, (.dmark+2)  
069a 32 67 ee			ld (debug_mark+2),a  
069d 18 03			jr .pastdmark  
069f ..			.dmark: db "SCR"  
06a2 f1			.pastdmark: pop af  
06a3			endm  
# End of macro DMARK
06a3					CALLMONITOR 
06a3 cd 6f ee			call debug_vector  
06a6				endm  
# End of macro CALLMONITOR
06a6				endif 
06a6			 
06a6 e5				push hl		; save file name pointer 
06a7			 
06a7 cd 38 03			call storage_get_block_0 
06aa			 
06aa 3a 74 ea			ld a,(store_page)	; get current file id 
06ad 3c				inc a 
06ae 32 74 ea			ld (store_page),a 
06b1				 
06b1 32 68 ea			ld (store_tmpid),a			; save id 
06b4			 
06b4 21 00 00			ld hl, 0 
06b7 11 74 ea			ld de, store_page 
06ba				if DEBUG_STORESE 
06ba					DMARK "SCw" 
06ba f5				push af  
06bb 3a cf 06			ld a, (.dmark)  
06be 32 65 ee			ld (debug_mark),a  
06c1 3a d0 06			ld a, (.dmark+1)  
06c4 32 66 ee			ld (debug_mark+1),a  
06c7 3a d1 06			ld a, (.dmark+2)  
06ca 32 67 ee			ld (debug_mark+2),a  
06cd 18 03			jr .pastdmark  
06cf ..			.dmark: db "SCw"  
06d2 f1			.pastdmark: pop af  
06d3			endm  
# End of macro DMARK
06d3					CALLMONITOR 
06d3 cd 6f ee			call debug_vector  
06d6				endm  
# End of macro CALLMONITOR
06d6				endif 
06d6 cd ec 02			call storage_write_block	 ; save update 
06d9			 
06d9				if DEBUG_STORESE 
06d9 11 74 ea				ld de, store_page 
06dc					DMARK "SCC" 
06dc f5				push af  
06dd 3a f1 06			ld a, (.dmark)  
06e0 32 65 ee			ld (debug_mark),a  
06e3 3a f2 06			ld a, (.dmark+1)  
06e6 32 66 ee			ld (debug_mark+1),a  
06e9 3a f3 06			ld a, (.dmark+2)  
06ec 32 67 ee			ld (debug_mark+2),a  
06ef 18 03			jr .pastdmark  
06f1 ..			.dmark: db "SCC"  
06f4 f1			.pastdmark: pop af  
06f5			endm  
# End of macro DMARK
06f5					CALLMONITOR 
06f5 cd 6f ee			call debug_vector  
06f8				endm  
# End of macro CALLMONITOR
06f8				endif 
06f8				;  
06f8				 
06f8 21 40 00			ld hl, STORE_BLOCK_PHY 
06fb 11 00 00			ld de, 0 
06fe cd ba 05			call storage_findnextid 
0701			 
0701 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
0704			 
0704				; TODO detect 0 = no spare blocks 
0704			 
0704				; hl now contains the free page to use for the file header page 
0704			 
0704				if DEBUG_STORESE 
0704				DMARK "SCF" 
0704 f5				push af  
0705 3a 19 07			ld a, (.dmark)  
0708 32 65 ee			ld (debug_mark),a  
070b 3a 1a 07			ld a, (.dmark+1)  
070e 32 66 ee			ld (debug_mark+1),a  
0711 3a 1b 07			ld a, (.dmark+2)  
0714 32 67 ee			ld (debug_mark+2),a  
0717 18 03			jr .pastdmark  
0719 ..			.dmark: db "SCF"  
071c f1			.pastdmark: pop af  
071d			endm  
# End of macro DMARK
071d					CALLMONITOR 
071d cd 6f ee			call debug_vector  
0720				endm  
# End of macro CALLMONITOR
0720				endif 
0720			 
0720 22 5f ea			ld (store_tmppageid), hl 
0723				 
0723 3a 68 ea			ld a,(store_tmpid)    ; get file id 
0726			;	ld a, (store_filecache)			; save to cache 
0726			 
0726 32 74 ea			ld (store_page),a    ; set page id 
0729 3e 00			ld a, 0			 ; extent 0 is file header 
072b 32 75 ea			ld (store_page+1), a   ; set file extent 
072e			 
072e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
0731			 
0731			;	inc hl 		; init block 0 of file 
0731			;	inc hl   		; skip file and extent id 
0731			 ;       ld a, 0 
0731			;	ld (hl),a 
0731			;	ld a, (store_filecache+1)  	; save to cache 
0731			 
0731			;	inc hl    ; file name 
0731				 
0731				 
0731 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
0734				if DEBUG_STORESE 
0734					DMARK "SCc" 
0734 f5				push af  
0735 3a 49 07			ld a, (.dmark)  
0738 32 65 ee			ld (debug_mark),a  
073b 3a 4a 07			ld a, (.dmark+1)  
073e 32 66 ee			ld (debug_mark+1),a  
0741 3a 4b 07			ld a, (.dmark+2)  
0744 32 67 ee			ld (debug_mark+2),a  
0747 18 03			jr .pastdmark  
0749 ..			.dmark: db "SCc"  
074c f1			.pastdmark: pop af  
074d			endm  
# End of macro DMARK
074d					CALLMONITOR 
074d cd 6f ee			call debug_vector  
0750				endm  
# End of macro CALLMONITOR
0750				endif 
0750 e1				pop hl    ; get zero term string 
0751 e5				push hl 
0752 3e 00			ld a, 0 
0754 cd 66 11			call strlent 
0757 23				inc hl   ; cover zero term 
0758 06 00			ld b,0 
075a 4d				ld c,l 
075b e1				pop hl 
075c				;ex de, hl 
075c				if DEBUG_STORESE 
075c					DMARK "SCa" 
075c f5				push af  
075d 3a 71 07			ld a, (.dmark)  
0760 32 65 ee			ld (debug_mark),a  
0763 3a 72 07			ld a, (.dmark+1)  
0766 32 66 ee			ld (debug_mark+1),a  
0769 3a 73 07			ld a, (.dmark+2)  
076c 32 67 ee			ld (debug_mark+2),a  
076f 18 03			jr .pastdmark  
0771 ..			.dmark: db "SCa"  
0774 f1			.pastdmark: pop af  
0775			endm  
# End of macro DMARK
0775					;push af 
0775					;ld a, 'a' 
0775					;ld (debug_mark),a 
0775					;pop af 
0775					CALLMONITOR 
0775 cd 6f ee			call debug_vector  
0778				endm  
# End of macro CALLMONITOR
0778				endif 
0778 ed b0			ldir    ; copy zero term string 
077a				if DEBUG_STORESE 
077a					DMARK "SCA" 
077a f5				push af  
077b 3a 8f 07			ld a, (.dmark)  
077e 32 65 ee			ld (debug_mark),a  
0781 3a 90 07			ld a, (.dmark+1)  
0784 32 66 ee			ld (debug_mark+1),a  
0787 3a 91 07			ld a, (.dmark+2)  
078a 32 67 ee			ld (debug_mark+2),a  
078d 18 03			jr .pastdmark  
078f ..			.dmark: db "SCA"  
0792 f1			.pastdmark: pop af  
0793			endm  
# End of macro DMARK
0793					CALLMONITOR 
0793 cd 6f ee			call debug_vector  
0796				endm  
# End of macro CALLMONITOR
0796				endif 
0796			 
0796				; write file header page 
0796			 
0796 2a 5f ea			ld hl,(store_tmppageid) 
0799 11 74 ea			ld de, store_page 
079c				if DEBUG_STORESE 
079c					DMARK "SCb" 
079c f5				push af  
079d 3a b1 07			ld a, (.dmark)  
07a0 32 65 ee			ld (debug_mark),a  
07a3 3a b2 07			ld a, (.dmark+1)  
07a6 32 66 ee			ld (debug_mark+1),a  
07a9 3a b3 07			ld a, (.dmark+2)  
07ac 32 67 ee			ld (debug_mark+2),a  
07af 18 03			jr .pastdmark  
07b1 ..			.dmark: db "SCb"  
07b4 f1			.pastdmark: pop af  
07b5			endm  
# End of macro DMARK
07b5					;push af 
07b5					;ld a, 'b' 
07b5					;ld (debug_mark),a 
07b5					;pop af 
07b5					CALLMONITOR 
07b5 cd 6f ee			call debug_vector  
07b8				endm  
# End of macro CALLMONITOR
07b8				endif 
07b8 cd ec 02			call storage_write_block 
07bb			 
07bb 3a 68 ea			ld a, (store_tmpid) 
07be 6f				ld l, a 
07bf 26 00			ld h,0 
07c1				if DEBUG_STORESE 
07c1					DMARK "SCz" 
07c1 f5				push af  
07c2 3a d6 07			ld a, (.dmark)  
07c5 32 65 ee			ld (debug_mark),a  
07c8 3a d7 07			ld a, (.dmark+1)  
07cb 32 66 ee			ld (debug_mark+1),a  
07ce 3a d8 07			ld a, (.dmark+2)  
07d1 32 67 ee			ld (debug_mark+2),a  
07d4 18 03			jr .pastdmark  
07d6 ..			.dmark: db "SCz"  
07d9 f1			.pastdmark: pop af  
07da			endm  
# End of macro DMARK
07da					CALLMONITOR 
07da cd 6f ee			call debug_vector  
07dd				endm  
# End of macro CALLMONITOR
07dd				endif 
07dd c9				ret 
07de				 
07de			 
07de			 
07de			; 
07de			; Read File 
07de			; 
07de			; h - file id to locate 
07de			; l - extent to locate 
07de			; de - pointer to string to read into 
07de			; 
07de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
07de			 
07de			.sr_fail: 
07de d1				pop de 
07df c9				ret 
07e0			 
07e0			storage_read: 
07e0			 
07e0			 
07e0 d5				push de 
07e1			 
07e1			; TODO BUG the above push is it popped before the RET Z? 
07e1			 
07e1			; TODO how to handle multiple part blocks 
07e1			 
07e1				; locate file extent to read 
07e1			 
07e1 5c				ld e, h 
07e2 55				ld d, l 
07e3			 
07e3			.srext: 
07e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
07e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
07ea			 
07ea 21 40 00			ld hl, STORE_BLOCK_PHY 
07ed				if DEBUG_STORESE 
07ed					DMARK "sre" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 65 ee			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 66 ee			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 67 ee			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "sre"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 6f ee			call debug_vector  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809 cd ba 05			call storage_findnextid 
080c			 
080c				if DEBUG_STORESE 
080c					DMARK "srf" 
080c f5				push af  
080d 3a 21 08			ld a, (.dmark)  
0810 32 65 ee			ld (debug_mark),a  
0813 3a 22 08			ld a, (.dmark+1)  
0816 32 66 ee			ld (debug_mark+1),a  
0819 3a 23 08			ld a, (.dmark+2)  
081c 32 67 ee			ld (debug_mark+2),a  
081f 18 03			jr .pastdmark  
0821 ..			.dmark: db "srf"  
0824 f1			.pastdmark: pop af  
0825			endm  
# End of macro DMARK
0825					CALLMONITOR 
0825 cd 6f ee			call debug_vector  
0828				endm  
# End of macro CALLMONITOR
0828				endif 
0828 cd 1e 0e			call ishlzero 
082b			;	ld a, l 
082b			;	add h 
082b			;	cp 0 
082b 28 b1			jr z,.sr_fail			; block not found so EOF 
082d			 
082d				; save current address for use by higher level words etc 
082d			 
082d 22 65 ea			ld (store_openaddr),hl 
0830			 
0830			 
0830				; hl contains page number to load 
0830 d1				pop de   ; get storage 
0831 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
0835 d5				push de 
0836				if DEBUG_STORESE 
0836					DMARK "srg" 
0836 f5				push af  
0837 3a 4b 08			ld a, (.dmark)  
083a 32 65 ee			ld (debug_mark),a  
083d 3a 4c 08			ld a, (.dmark+1)  
0840 32 66 ee			ld (debug_mark+1),a  
0843 3a 4d 08			ld a, (.dmark+2)  
0846 32 67 ee			ld (debug_mark+2),a  
0849 18 03			jr .pastdmark  
084b ..			.dmark: db "srg"  
084e f1			.pastdmark: pop af  
084f			endm  
# End of macro DMARK
084f					CALLMONITOR 
084f cd 6f ee			call debug_vector  
0852				endm  
# End of macro CALLMONITOR
0852				endif 
0852 cd 87 02			call storage_read_block 
0855			 
0855				; if this a continuation read??? 
0855			 
0855 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
0858			 
0858 3e 3f			ld a, STORE_BLOCK_PHY-1 
085a cd f5 0d			call addatohl 
085d 7e				ld a,(hl) 
085e fe 00			cp 0 
0860 28 02			jr z, .markiscont 
0862 3e ff			ld a, 255 
0864			 
0864			.markiscont: 
0864 32 67 ea			ld (store_readcont), a 
0867			 
0867				if DEBUG_STORESE 
0867					DMARK "srC" 
0867 f5				push af  
0868 3a 7c 08			ld a, (.dmark)  
086b 32 65 ee			ld (debug_mark),a  
086e 3a 7d 08			ld a, (.dmark+1)  
0871 32 66 ee			ld (debug_mark+1),a  
0874 3a 7e 08			ld a, (.dmark+2)  
0877 32 67 ee			ld (debug_mark+2),a  
087a 18 03			jr .pastdmark  
087c ..			.dmark: db "srC"  
087f f1			.pastdmark: pop af  
0880			endm  
# End of macro DMARK
0880					CALLMONITOR 
0880 cd 6f ee			call debug_vector  
0883				endm  
# End of macro CALLMONITOR
0883				endif 
0883				; only short reads enabled 
0883			 
0883 3a 6f ea			ld a, (store_longread) 
0886 fe 00			cp 0 
0888 ca 55 09			jp z, .readdone 
088b			 
088b			; TODO if block has no zeros then need to read next block  
088b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
088b			; check last byte of physical block. 
088b			; if not zero then the next block needs to be loaded 
088b			 
088b			 
088b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
088e			 
088e 3e 3f			ld a, STORE_BLOCK_PHY-1 
0890 cd f5 0d			call addatohl 
0893				;dec hl 
0893 7e				ld a,(hl) 
0894				if DEBUG_STORESE 
0894					DMARK "sr?" 
0894 f5				push af  
0895 3a a9 08			ld a, (.dmark)  
0898 32 65 ee			ld (debug_mark),a  
089b 3a aa 08			ld a, (.dmark+1)  
089e 32 66 ee			ld (debug_mark+1),a  
08a1 3a ab 08			ld a, (.dmark+2)  
08a4 32 67 ee			ld (debug_mark+2),a  
08a7 18 03			jr .pastdmark  
08a9 ..			.dmark: db "sr?"  
08ac f1			.pastdmark: pop af  
08ad			endm  
# End of macro DMARK
08ad					CALLMONITOR 
08ad cd 6f ee			call debug_vector  
08b0				endm  
# End of macro CALLMONITOR
08b0				endif 
08b0 fe 00			cp 0 
08b2 ca 55 09			jp z, .readdone 
08b5			 
08b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
08b5			 
08b5 23				inc hl 
08b6			 
08b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
08b9			 
08b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
08bd			 
08bd eb				ex de, hl 
08be			 
08be				; next ext 
08be			 
08be 23				inc hl 
08bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
08c2			 
08c2				if DEBUG_STORESE 
08c2					DMARK "sF2" 
08c2 f5				push af  
08c3 3a d7 08			ld a, (.dmark)  
08c6 32 65 ee			ld (debug_mark),a  
08c9 3a d8 08			ld a, (.dmark+1)  
08cc 32 66 ee			ld (debug_mark+1),a  
08cf 3a d9 08			ld a, (.dmark+2)  
08d2 32 67 ee			ld (debug_mark+2),a  
08d5 18 03			jr .pastdmark  
08d7 ..			.dmark: db "sF2"  
08da f1			.pastdmark: pop af  
08db			endm  
# End of macro DMARK
08db					CALLMONITOR 
08db cd 6f ee			call debug_vector  
08de				endm  
# End of macro CALLMONITOR
08de				endif 
08de			 
08de				; get and load block 
08de			 
08de cd ba 05			call storage_findnextid 
08e1			 
08e1				if DEBUG_STORESE 
08e1					DMARK "sf2" 
08e1 f5				push af  
08e2 3a f6 08			ld a, (.dmark)  
08e5 32 65 ee			ld (debug_mark),a  
08e8 3a f7 08			ld a, (.dmark+1)  
08eb 32 66 ee			ld (debug_mark+1),a  
08ee 3a f8 08			ld a, (.dmark+2)  
08f1 32 67 ee			ld (debug_mark+2),a  
08f4 18 03			jr .pastdmark  
08f6 ..			.dmark: db "sf2"  
08f9 f1			.pastdmark: pop af  
08fa			endm  
# End of macro DMARK
08fa					CALLMONITOR 
08fa cd 6f ee			call debug_vector  
08fd				endm  
# End of macro CALLMONITOR
08fd				endif 
08fd cd 1e 0e			call ishlzero 
0900			;	ld a, l 
0900			;	add h 
0900			;	cp 0 
0900 ca de 07			jp z,.sr_fail			; block not found so EOF 
0903				 
0903				; save current address for use by higher level words etc 
0903			 
0903 22 65 ea			ld (store_openaddr),hl 
0906			 
0906 cd 87 02			call storage_read_block 
0909			 
0909				; on a continuation block, we now have the file id and ext in the middle of the block 
0909				; we need to pull everything back  
0909			 
0909 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
090d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0910 23				inc hl 
0911 23				inc hl     ; skip id and ext 
0912 01 40 00			ld bc, STORE_BLOCK_PHY 
0915				if DEBUG_STORESE 
0915					DMARK "SR<" 
0915 f5				push af  
0916 3a 2a 09			ld a, (.dmark)  
0919 32 65 ee			ld (debug_mark),a  
091c 3a 2b 09			ld a, (.dmark+1)  
091f 32 66 ee			ld (debug_mark+1),a  
0922 3a 2c 09			ld a, (.dmark+2)  
0925 32 67 ee			ld (debug_mark+2),a  
0928 18 03			jr .pastdmark  
092a ..			.dmark: db "SR<"  
092d f1			.pastdmark: pop af  
092e			endm  
# End of macro DMARK
092e					CALLMONITOR 
092e cd 6f ee			call debug_vector  
0931				endm  
# End of macro CALLMONITOR
0931				endif 
0931 ed b0			ldir     ; copy data 
0933			 
0933				; move the pointer back and pretend we have a full buffer for next recheck 
0933			 
0933 1b				dec de 
0934 1b				dec de 
0935			 
0935			; TODO do pop below now short circuit loop????? 
0935 c1				pop bc     ; get rid of spare de on stack 
0936				if DEBUG_STORESE 
0936					DMARK "SR>" 
0936 f5				push af  
0937 3a 4b 09			ld a, (.dmark)  
093a 32 65 ee			ld (debug_mark),a  
093d 3a 4c 09			ld a, (.dmark+1)  
0940 32 66 ee			ld (debug_mark+1),a  
0943 3a 4d 09			ld a, (.dmark+2)  
0946 32 67 ee			ld (debug_mark+2),a  
0949 18 03			jr .pastdmark  
094b ..			.dmark: db "SR>"  
094e f1			.pastdmark: pop af  
094f			endm  
# End of macro DMARK
094f					CALLMONITOR 
094f cd 6f ee			call debug_vector  
0952				endm  
# End of macro CALLMONITOR
0952				endif 
0952 c3 e3 07			jp .srext 
0955			 
0955			 
0955			 
0955			 
0955			 
0955			.readdone:		 
0955 e1				pop hl 		 ; return start of data to show as not EOF 
0956 23				inc hl   ; past file id 
0957 23				inc hl   ; past ext 
0958				if DEBUG_STORESE 
0958					DMARK "SRe" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 65 ee			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 66 ee			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 67 ee			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SRe"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6f ee			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974 c9					ret 
0975			 
0975			 
0975			 
0975			; 
0975			; Append File 
0975			; 
0975			; hl - file id to locate 
0975			; de - pointer to (multi block) string to write 
0975			 
0975			.sa_notfound: 
0975 d1				pop de 
0976 c9				ret 
0977			 
0977			 
0977			storage_append: 
0977				; hl -  file id to append to 
0977				; de - string to append 
0977			 
0977 d5				push de 
0978				 
0978				if DEBUG_STORESE 
0978					DMARK "AP1" 
0978 f5				push af  
0979 3a 8d 09			ld a, (.dmark)  
097c 32 65 ee			ld (debug_mark),a  
097f 3a 8e 09			ld a, (.dmark+1)  
0982 32 66 ee			ld (debug_mark+1),a  
0985 3a 8f 09			ld a, (.dmark+2)  
0988 32 67 ee			ld (debug_mark+2),a  
098b 18 03			jr .pastdmark  
098d ..			.dmark: db "AP1"  
0990 f1			.pastdmark: pop af  
0991			endm  
# End of macro DMARK
0991					CALLMONITOR 
0991 cd 6f ee			call debug_vector  
0994				endm  
# End of macro CALLMONITOR
0994				endif 
0994			 
0994 7d				ld a, l 
0995 32 68 ea			ld (store_tmpid), a 
0998			 
0998				; get file header  
0998			 
0998 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
099a 3a 68 ea			ld a, (store_tmpid) 
099d 5f				ld e, a 
099e			 
099e 21 40 00				ld hl, STORE_BLOCK_PHY 
09a1 cd ba 05				call storage_findnextid 
09a4			 
09a4 cd 1e 0e			call ishlzero 
09a7 28 cc			jr z, .sa_notfound 
09a9			 
09a9 22 5f ea			ld (store_tmppageid), hl 
09ac			 
09ac				; TODO handle file id not found 
09ac			 
09ac				if DEBUG_STORESE 
09ac					DMARK "AP2" 
09ac f5				push af  
09ad 3a c1 09			ld a, (.dmark)  
09b0 32 65 ee			ld (debug_mark),a  
09b3 3a c2 09			ld a, (.dmark+1)  
09b6 32 66 ee			ld (debug_mark+1),a  
09b9 3a c3 09			ld a, (.dmark+2)  
09bc 32 67 ee			ld (debug_mark+2),a  
09bf 18 03			jr .pastdmark  
09c1 ..			.dmark: db "AP2"  
09c4 f1			.pastdmark: pop af  
09c5			endm  
# End of macro DMARK
09c5					CALLMONITOR 
09c5 cd 6f ee			call debug_vector  
09c8				endm  
# End of macro CALLMONITOR
09c8				endif 
09c8			 
09c8				; update file extent count 
09c8			 
09c8 11 74 ea			ld de, store_page 
09cb			 
09cb cd 87 02			call storage_read_block 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP3" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 65 ee			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 66 ee			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 67 ee			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP3"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 6f ee			call debug_vector  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			;	ld (store_tmppageid), hl 
09ea			 
09ea 3a 76 ea			ld a, (store_page+2) 
09ed 3c				inc a 
09ee 32 76 ea			ld (store_page+2), a 
09f1 32 67 ea			ld (store_tmpext), a 
09f4				 
09f4				if DEBUG_STORESE 
09f4					DMARK "AP3" 
09f4 f5				push af  
09f5 3a 09 0a			ld a, (.dmark)  
09f8 32 65 ee			ld (debug_mark),a  
09fb 3a 0a 0a			ld a, (.dmark+1)  
09fe 32 66 ee			ld (debug_mark+1),a  
0a01 3a 0b 0a			ld a, (.dmark+2)  
0a04 32 67 ee			ld (debug_mark+2),a  
0a07 18 03			jr .pastdmark  
0a09 ..			.dmark: db "AP3"  
0a0c f1			.pastdmark: pop af  
0a0d			endm  
# End of macro DMARK
0a0d					CALLMONITOR 
0a0d cd 6f ee			call debug_vector  
0a10				endm  
# End of macro CALLMONITOR
0a10				endif 
0a10 2a 5f ea			ld hl, (store_tmppageid) 
0a13 11 74 ea			ld de, store_page 
0a16 cd ec 02			call storage_write_block 
0a19			 
0a19				; find free block 
0a19			 
0a19 11 00 00			ld de, 0			 ; file extent to locate 
0a1c			 
0a1c 21 40 00				ld hl, STORE_BLOCK_PHY 
0a1f cd ba 05				call storage_findnextid 
0a22 cd 1e 0e			call ishlzero 
0a25 ca 75 09			jp z, .sa_notfound 
0a28			 
0a28					; TODO handle no space left 
0a28					 
0a28 22 5f ea				ld (store_tmppageid), hl 
0a2b			 
0a2b				if DEBUG_STORESE 
0a2b					DMARK "AP4" 
0a2b f5				push af  
0a2c 3a 40 0a			ld a, (.dmark)  
0a2f 32 65 ee			ld (debug_mark),a  
0a32 3a 41 0a			ld a, (.dmark+1)  
0a35 32 66 ee			ld (debug_mark+1),a  
0a38 3a 42 0a			ld a, (.dmark+2)  
0a3b 32 67 ee			ld (debug_mark+2),a  
0a3e 18 03			jr .pastdmark  
0a40 ..			.dmark: db "AP4"  
0a43 f1			.pastdmark: pop af  
0a44			endm  
# End of macro DMARK
0a44					CALLMONITOR 
0a44 cd 6f ee			call debug_vector  
0a47				endm  
# End of macro CALLMONITOR
0a47				endif 
0a47					; init the buffer with zeros so we can id if the buffer is full or not 
0a47			 
0a47 e5					push hl 
0a48 c5					push bc 
0a49			 
0a49 21 74 ea				ld hl, store_page 
0a4c 06 40				ld b, STORE_BLOCK_PHY 
0a4e 3e 00				ld a, 0 
0a50 77			.zeroblock:	ld (hl), a 
0a51 23					inc hl 
0a52 10 fc				djnz .zeroblock 
0a54			 
0a54 c1					pop bc 
0a55 e1					pop hl 
0a56			 
0a56					; construct block 
0a56			 
0a56 3a 68 ea				ld a, (store_tmpid) 
0a59 32 74 ea				ld (store_page), a   ; file id 
0a5c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
0a5f 32 75 ea				ld (store_page+1), a 
0a62			 
0a62 e1					pop hl    ; get string to write 
0a63 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0a65 11 76 ea				ld de, store_page+2 
0a68			 
0a68				if DEBUG_STORESE 
0a68					DMARK "AP5" 
0a68 f5				push af  
0a69 3a 7d 0a			ld a, (.dmark)  
0a6c 32 65 ee			ld (debug_mark),a  
0a6f 3a 7e 0a			ld a, (.dmark+1)  
0a72 32 66 ee			ld (debug_mark+1),a  
0a75 3a 7f 0a			ld a, (.dmark+2)  
0a78 32 67 ee			ld (debug_mark+2),a  
0a7b 18 03			jr .pastdmark  
0a7d ..			.dmark: db "AP5"  
0a80 f1			.pastdmark: pop af  
0a81			endm  
# End of macro DMARK
0a81					CALLMONITOR 
0a81 cd 6f ee			call debug_vector  
0a84				endm  
# End of macro CALLMONITOR
0a84				endif 
0a84			 
0a84			 
0a84			 
0a84					; fill buffer with data until end of string or full block 
0a84			 
0a84 7e			.appd:		ld a, (hl) 
0a85 12					ld (de), a 
0a86 fe 00				cp 0 
0a88 28 04				jr z, .appdone 
0a8a 23					inc hl 
0a8b 13					inc de 
0a8c 10 f6				djnz .appd 
0a8e			 
0a8e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0a8f f5					push af   		; save last byte dumped 
0a90			 
0a90			 
0a90 2a 5f ea			ld hl, (store_tmppageid) 
0a93 11 74 ea			ld de, store_page 
0a96				if DEBUG_STORESE 
0a96					DMARK "AP6" 
0a96 f5				push af  
0a97 3a ab 0a			ld a, (.dmark)  
0a9a 32 65 ee			ld (debug_mark),a  
0a9d 3a ac 0a			ld a, (.dmark+1)  
0aa0 32 66 ee			ld (debug_mark+1),a  
0aa3 3a ad 0a			ld a, (.dmark+2)  
0aa6 32 67 ee			ld (debug_mark+2),a  
0aa9 18 03			jr .pastdmark  
0aab ..			.dmark: db "AP6"  
0aae f1			.pastdmark: pop af  
0aaf			endm  
# End of macro DMARK
0aaf					CALLMONITOR 
0aaf cd 6f ee			call debug_vector  
0ab2				endm  
# End of macro CALLMONITOR
0ab2				endif 
0ab2 cd ec 02				call storage_write_block 
0ab5			 
0ab5			 
0ab5				; was that a full block of data written? 
0ab5				; any more to write out? 
0ab5			 
0ab5				; if yes then set vars and jump to start of function again 
0ab5			 
0ab5 f1					pop af 
0ab6 d1					pop de 
0ab7			 
0ab7 fe 00				cp 0		 ; no, string was fully written 
0ab9 c8					ret z 
0aba			 
0aba					; setup vars for next cycle 
0aba			 
0aba 3a 68 ea				ld a, (store_tmpid) 
0abd 6f					ld l, a 
0abe 26 00				ld h, 0 
0ac0			 
0ac0 c3 77 09			 	jp storage_append	 ; yes, need to write out some more 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			if DEBUG_STORECF 
0ac3			storageput:	 
0ac3					ret 
0ac3			storageread: 
0ac3					ld hl, store_page 
0ac3					ld b, 200 
0ac3					ld a,0 
0ac3			.src:		ld (hl),a 
0ac3					inc hl 
0ac3					djnz .src 
0ac3					 
0ac3			 
0ac3					ld de, 0 
0ac3					ld bc, 1 
0ac3					ld hl, store_page 
0ac3					call cfRead 
0ac3			 
0ac3				call cfGetError 
0ac3				ld hl,scratch 
0ac3				call hexout 
0ac3				ld hl, scratch+2 
0ac3				ld a, 0 
0ac3				ld (hl),a 
0ac3				ld de, scratch 
0ac3				ld a,display_row_1 
0ac3				call str_at_display 
0ac3				call update_display 
0ac3			 
0ac3					ld hl, store_page 
0ac3					ld (os_cur_ptr),hl 
0ac3			 
0ac3					ret 
0ac3			endif 
0ac3			 
0ac3			 
0ac3			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ac3			 
0ac3			storage_clear_page: 
0ac3 e5				push hl 
0ac4 d5				push de 
0ac5 c5				push bc 
0ac6 21 74 ea			ld hl, store_page 
0ac9 3e 00			ld a, 0 
0acb 77				ld (hl), a 
0acc			 
0acc 11 75 ea			ld de, store_page+1 
0acf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0ad2			 
0ad2 ed b0			ldir 
0ad4				 
0ad4 c1				pop bc 
0ad5 d1				pop de 
0ad6 e1				pop hl 
0ad7 c9				ret 
0ad8			 
0ad8			; eof 
# End of file firmware_storage.asm
0ad8			  
0ad8			; support routines for above hardware abstraction layer  
0ad8			  
0ad8			include "firmware_general.asm"        ; general support functions  
0ad8			 
0ad8			; word look up 
0ad8			 
0ad8			; in 
0ad8			; a is the index 
0ad8			; hl is pointer start of array 
0ad8			; 
0ad8			; returns 
0ad8			; hl to the word 
0ad8			; 
0ad8			 
0ad8			table_lookup:  
0ad8 d5					push de 
0ad9 eb					ex de, hl 
0ada			 
0ada 6f					ld l, a 
0adb 26 00				ld h, 0 
0add 29					add hl, hl 
0ade 19					add hl, de 
0adf 7e					ld a, (hl) 
0ae0 23					inc hl 
0ae1 66					ld h,(hl) 
0ae2 6f					ld l, a 
0ae3			 
0ae3 d1					pop de 
0ae4 c9					ret 
0ae5			 
0ae5			; Delay loops 
0ae5			 
0ae5			 
0ae5			 
0ae5			aDelayInMS: 
0ae5 c5				push bc 
0ae6 47				ld b,a 
0ae7			msdelay: 
0ae7 c5				push bc 
0ae8				 
0ae8			 
0ae8 01 41 00			ld bc,041h 
0aeb cd 03 0b			call delayloop 
0aee c1				pop bc 
0aef 05				dec b 
0af0 20 f5			jr nz,msdelay 
0af2			 
0af2			;if CPU_CLOCK_8MHZ 
0af2			;msdelay8: 
0af2			;	push bc 
0af2			;	 
0af2			; 
0af2			;	ld bc,041h 
0af2			;	call delayloop 
0af2			;	pop bc 
0af2			;	dec b 
0af2			;	jr nz,msdelay8 
0af2			;endif 
0af2			 
0af2			 
0af2 c1				pop bc 
0af3 c9				ret 
0af4			 
0af4			 
0af4			delay250ms: 
0af4				;push de 
0af4 01 00 40			ld bc, 04000h 
0af7 c3 03 0b			jp delayloop 
0afa			delay500ms: 
0afa				;push de 
0afa 01 00 80			ld bc, 08000h 
0afd c3 03 0b			jp delayloop 
0b00			delay1s: 
0b00				;push bc 
0b00			   ; Clobbers A, d and e 
0b00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0b03			delayloop: 
0b03 c5			    push bc 
0b04			 
0b04			if BASE_CPM 
0b04 01 a0 0f			ld bc, CPM_DELAY_TUNE 
0b07			.cpmloop: 
0b07 c5				push bc 
0b08			 
0b08			endif 
0b08			 
0b08			 
0b08			 
0b08			delayloopi: 
0b08			;	push bc 
0b08			;.dl: 
0b08 cb 47		    bit     0,a    	; 8 
0b0a cb 47		    bit     0,a    	; 8 
0b0c cb 47		    bit     0,a    	; 8 
0b0e e6 ff		    and     255  	; 7 
0b10 0b			    dec     bc      	; 6 
0b11 79			    ld      a,c     	; 4 
0b12 b0			    or      b     	; 4 
0b13 c2 08 0b		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0b16			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0b16				;pop de 
0b16			;pop bc 
0b16			 
0b16			if BASE_CPM 
0b16 c1				pop bc 
0b17				 
0b17 0b			    dec     bc      	; 6 
0b18 79			    ld      a,c     	; 4 
0b19 b0			    or      b     	; 4 
0b1a c2 07 0b		    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0b1d				 
0b1d			 
0b1d			endif 
0b1d			;if CPU_CLOCK_8MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d			 
0b1d			;if CPU_CLOCK_10MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d c1			    pop bc 
0b1e			 
0b1e c9				ret 
0b1f			 
0b1f			 
0b1f			 
0b1f			; eof 
# End of file firmware_general.asm
0b1f			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0b1f			; display routines that use the physical hardware abstraction layer 
0b1f			 
0b1f			 
0b1f			; Display an activity indicator 
0b1f			; Each call returns the new char pointed to in hl 
0b1f			 
0b1f			active: 
0b1f 3a c0 eb			ld a, (display_active) 
0b22 fe 06			cp 6 
0b24			 
0b24 20 02			jr nz, .sne 
0b26				; gone past the last one reset sequence 
0b26 3e ff			ld a, 255 
0b28			 
0b28			.sne:   
0b28				; get the next char in seq 
0b28 3c				inc a 
0b29 32 c0 eb			ld (display_active), a 
0b2c			 
0b2c				; look up the string in the table 
0b2c 21 43 0b			ld hl, actseq 
0b2f cb 27			sla a 
0b31 cd f5 0d			call addatohl 
0b34 cd 03 1f			call loadwordinhl 
0b37			 
0b37				; forth will write the to string when pushing so move from rom to ram 
0b37			 
0b37 11 c1 eb			ld de, display_active+1 
0b3a 01 02 00			ld bc, 2 
0b3d ed b0			ldir 
0b3f			 
0b3f 21 c1 eb			ld hl, display_active+1 
0b42 c9				ret 
0b43				 
0b43				 
0b43			 
0b43			 
0b43			;db "|/-\|-\" 
0b43			 
0b43			actseq: 
0b43			 
0b43 51 0b		dw spin0 
0b45 53 0b		dw spin1 
0b47 55 0b		dw spin2 
0b49 57 0b		dw spin3 
0b4b 55 0b		dw spin2 
0b4d 53 0b		dw spin1 
0b4f 51 0b		dw spin0 
0b51			 
0b51 .. 00		spin0: db " ", 0 
0b53 .. 00		spin1: db "-", 0 
0b55 .. 00		spin2: db "+", 0 
0b57 .. 00		spin3: db "#", 0 
0b59			 
0b59			 
0b59			; information window 
0b59			 
0b59			; pass hl with 1st string to display 
0b59			; pass de with 2nd string to display 
0b59			 
0b59			info_panel: 
0b59 e5				push hl 
0b5a			 
0b5a 2a c6 eb			ld hl, (display_fb_active) 
0b5d e5				push hl    ; future de destination 
0b5e 21 ab ed				ld hl, display_fb0 
0b61 22 c6 eb				ld (display_fb_active), hl 
0b64			 
0b64			;	call clear_display 
0b64			 
0b64				if BASE_CPM 
0b64 3e 2e			ld a, '.' 
0b66				else 
0b66				ld a, 165 
0b66				endif 
0b66 cd cd 0b			call fill_display 
0b69			 
0b69			 
0b69 3e 55			ld a, display_row_3 + 5 
0b6b cd db 0b			call str_at_display 
0b6e			 
0b6e e1				pop hl 
0b6f d1				pop de 
0b70			 
0b70 e5				push hl 
0b71			 
0b71			 
0b71 3e 2d			ld a, display_row_2 + 5 
0b73 cd db 0b			call str_at_display 
0b76			 
0b76			 
0b76 cd eb 0b			call update_display 
0b79 cd 08 1b			call next_page_prompt 
0b7c cd c8 0b			call clear_display 
0b7f			 
0b7f				 
0b7f 21 0a ed				ld hl, display_fb1 
0b82 22 c6 eb				ld (display_fb_active), hl 
0b85 cd eb 0b			call update_display 
0b88			 
0b88 e1				pop hl 
0b89			 
0b89 c9				ret 
0b8a			 
0b8a			 
0b8a			 
0b8a			 
0b8a			; TODO windowing? 
0b8a			 
0b8a			; TODO scroll line up 
0b8a			 
0b8a			scroll_up: 
0b8a			 
0b8a e5				push hl 
0b8b d5				push de 
0b8c c5				push bc 
0b8d			 
0b8d				; get frame buffer  
0b8d			 
0b8d 2a c6 eb			ld hl, (display_fb_active) 
0b90 e5				push hl    ; future de destination 
0b91			 
0b91 11 28 00			ld  de, display_cols 
0b94 19				add hl, de 
0b95			 
0b95 d1				pop de 
0b96			 
0b96				;ex de, hl 
0b96 01 9f 00			ld bc, display_fb_len -1  
0b99			;if DEBUG_FORTH_WORDS 
0b99			;	DMARK "SCL" 
0b99			;	CALLMONITOR 
0b99			;endif	 
0b99 ed b0			ldir 
0b9b			 
0b9b				; wipe bottom row 
0b9b			 
0b9b			 
0b9b 2a c6 eb			ld hl, (display_fb_active) 
0b9e 11 a0 00			ld de, display_cols*display_rows 
0ba1 19				add hl, de 
0ba2 06 28			ld b, display_cols 
0ba4 3e 20			ld a, ' ' 
0ba6			.scwipe: 
0ba6 77				ld (hl), a 
0ba7 2b				dec hl 
0ba8 10 fc			djnz .scwipe 
0baa			 
0baa				;pop hl 
0baa			 
0baa c1				pop bc 
0bab d1				pop de 
0bac e1				pop hl 
0bad			 
0bad c9				ret 
0bae			 
0bae			 
0bae			;scroll_upo: 
0bae			;	ld de, display_row_1 
0bae			 ;	ld hl, display_row_2 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_2 
0bae			 ;	ld hl, display_row_3 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_3 
0bae			 ;	ld hl, display_row_4 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			 
0bae			; TODO clear row 4 
0bae			 
0bae			;	ret 
0bae			 
0bae				 
0bae			scroll_down: 
0bae			 
0bae e5				push hl 
0baf d5				push de 
0bb0 c5				push bc 
0bb1			 
0bb1				; get frame buffer  
0bb1			 
0bb1 2a c6 eb			ld hl, (display_fb_active) 
0bb4			 
0bb4 11 9f 00			ld de, display_fb_len - 1 
0bb7 19				add hl, de 
0bb8			 
0bb8 e5			push hl    ; future de destination 
0bb9			 
0bb9 11 28 00			ld  de, display_cols 
0bbc ed 52			sbc hl, de 
0bbe			 
0bbe			 
0bbe d1				pop de 
0bbf			 
0bbf			;	ex de, hl 
0bbf 01 9f 00			ld bc, display_fb_len -1  
0bc2			 
0bc2			 
0bc2				 
0bc2			 
0bc2 ed b0			ldir 
0bc4			 
0bc4				; wipe bottom row 
0bc4			 
0bc4			 
0bc4			;	ld hl, (display_fb_active) 
0bc4			;;	ld de, display_cols*display_rows 
0bc4			;;	add hl, de 
0bc4			;	ld b, display_cols 
0bc4			;	ld a, ' ' 
0bc4			;.scwiped: 
0bc4			;	ld (hl), a 
0bc4			;	dec hl 
0bc4			;	djnz .scwiped 
0bc4			 
0bc4				;pop hl 
0bc4			 
0bc4 c1				pop bc 
0bc5 d1				pop de 
0bc6 e1				pop hl 
0bc7			 
0bc7 c9				ret 
0bc8			;scroll_down: 
0bc8			;	ld de, display_row_4 
0bc8			;	ld hl, display_row_3 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_3 
0bc8			; 	ld hl, display_row_2 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_2 
0bc8			;	ld hl, display_row_1 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;;; TODO clear row 1 
0bc8			;	ret 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			; clear active frame buffer 
0bc8			 
0bc8			clear_display: 
0bc8 3e 20			ld a, ' ' 
0bca c3 cd 0b			jp fill_display 
0bcd			 
0bcd			; fill active frame buffer with a char in A 
0bcd			 
0bcd			fill_display: 
0bcd 06 a0			ld b,display_fb_len 
0bcf 2a c6 eb			ld hl, (display_fb_active) 
0bd2 77			.fd1:	ld (hl),a 
0bd3 23				inc hl 
0bd4 10 fc			djnz .fd1 
0bd6 23				inc hl 
0bd7 3e 00			ld a,0 
0bd9 77				ld (hl),a 
0bda			 
0bda			 
0bda c9				ret 
0bdb			; Write string (DE) at pos (A) to active frame buffer 
0bdb			 
0bdb 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
0bde 06 00					ld b,0 
0be0 4f					ld c,a 
0be1 09					add hl,bc 
0be2 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0be3 b7			            OR   A              ;Null terminator? 
0be4 c8			            RET  Z              ;Yes, so finished 
0be5 77					ld (hl),a 
0be6 23				inc hl 
0be7 13			            INC  DE             ;Point to next character 
0be8 18 f8		            JR   .sad1     ;Repeat 
0bea c9					ret 
0beb			 
0beb			; using current frame buffer write to physical display 
0beb			 
0beb			update_display: 
0beb e5				push hl 
0bec 2a c6 eb			ld hl, (display_fb_active) 
0bef cd 27 60			call write_display 
0bf2 e1				pop hl 
0bf3 c9				ret 
0bf4			 
0bf4			; TODO scrolling 
0bf4			 
0bf4			 
0bf4			; move cursor right one char 
0bf4			cursor_right: 
0bf4			 
0bf4				; TODO shift right 
0bf4				; TODO if beyond max col 
0bf4				; TODO       cursor_next_line 
0bf4			 
0bf4 c9				ret 
0bf5			 
0bf5			 
0bf5			cursor_next_line: 
0bf5				; TODO first char 
0bf5				; TODO line down 
0bf5				; TODO if past last row 
0bf5				; TODO    scroll up 
0bf5			 
0bf5 c9				ret 
0bf6			 
0bf6			cursor_left: 
0bf6				; TODO shift left 
0bf6				; TODO if beyond left  
0bf6				; TODO     cursor prev line 
0bf6				 
0bf6 c9				ret 
0bf7			 
0bf7			cursor_prev_line: 
0bf7				; TODO last char 
0bf7				; TODO line up 
0bf7				; TODO if past first row 
0bf7				; TODO   scroll down 
0bf7			 
0bf7 c9				ret 
0bf8			 
0bf8			 
0bf8			cout: 
0bf8				; A - char 
0bf8 c9				ret 
0bf9			 
0bf9			 
0bf9			; Display a menu and allow item selection (optional toggle items) 
0bf9			; 
0bf9			; format: 
0bf9			; hl pointer to word array with zero term for items 
0bf9			; e.g.    db item1 
0bf9			;         db .... 
0bf9			;         db 0 
0bf9			; 
0bf9			; a = starting menu item  
0bf9			; 
0bf9			; de = pointer item toggle array   (todo) 
0bf9			; 
0bf9			; returns item selected in a 1-... 
0bf9			; returns 0 if back button pressed 
0bf9			; 
0bf9			; NOTE: Uses system frame buffer to display 
0bf9			; 
0bf9			; LEFT, Q = go back 
0bf9			; RIGHT, SPACE, CR = select 
0bf9			; UP, A - Up 
0bf9			; DOWN, Z - Down 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			menu: 
0bf9			 
0bf9					; keep array pointer 
0bf9			 
0bf9 22 6d ea				ld (store_tmp1), hl 
0bfc 32 6b ea				ld (store_tmp2), a 
0bff			 
0bff					; check for key bounce 
0bff			 
0bff			if BASE_KEV 
0bff			 
0bff			.mbounce:	call cin 
0bff					cp 0 
0bff					jr nz, .mbounce 
0bff			endif 
0bff					; for ease use ex 
0bff			 
0bff					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0bff 21 ab ed				ld hl, display_fb0 
0c02 22 c6 eb				ld (display_fb_active), hl 
0c05			 
0c05 cd c8 0b		.mloop:		call clear_display 
0c08 cd eb 0b				call update_display 
0c0b			 
0c0b					; draw selection id '>' at 1 
0c0b			 
0c0b					; init start of list display 
0c0b			 
0c0b 3e 05				ld a, 5 
0c0d 32 69 ea				ld (store_tmp3), a   ; display row count 
0c10 3a 6b ea				ld a,( store_tmp2) 
0c13 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c16			 
0c16					 
0c16			.mitem:	 
0c16			 
0c16			 
0c16 3a 6c ea				ld a,(store_tmp2+1) 
0c19 6f					ld l, a 
0c1a 26 00				ld h, 0 
0c1c 29					add hl, hl 
0c1d ed 5b 6d ea			ld de, (store_tmp1) 
0c21 19					add hl, de 
0c22 7e					ld a, (hl) 
0c23 23					inc hl 
0c24 66					ld h,(hl) 
0c25 6f					ld l, a 
0c26			 
0c26 cd 1e 0e				call ishlzero 
0c29 28 1a				jr z, .mdone 
0c2b			 
0c2b eb					ex de, hl 
0c2c 3a 69 ea				ld a, (store_tmp3) 
0c2f cd db 0b				call str_at_display 
0c32					 
0c32			 
0c32					; next item 
0c32 3a 6c ea				ld a, (store_tmp2+1) 
0c35 3c					inc a 
0c36 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c39			 
0c39			 		; next row 
0c39			 
0c39 3a 69 ea				ld a, (store_tmp3) 
0c3c c6 28				add display_cols 
0c3e 32 69 ea				ld (store_tmp3), a 
0c41			 
0c41					; at end of screen? 
0c41			 
0c41 fe 10				cp display_rows*4 
0c43 20 d1				jr nz, .mitem 
0c45			 
0c45			 
0c45			.mdone: 
0c45 cd 1e 0e				call ishlzero 
0c48 28 08				jr z, .nodn 
0c4a			 
0c4a 3e 78				ld a, display_row_4 
0c4c 11 cb 0c				ld de, .mdown 
0c4f cd db 0b				call str_at_display 
0c52			 
0c52					; draw options to fill the screens with active item on line 1 
0c52					; if current option is 2 or more then display ^ in top 
0c52			 
0c52 3a 6b ea		.nodn:		ld a, (store_tmp2) 
0c55 fe 00				cp 0 
0c57 28 08				jr z, .noup 
0c59			 
0c59 3e 00				ld a, 0 
0c5b 11 c9 0c				ld de, .mup 
0c5e cd db 0b				call str_at_display 
0c61			 
0c61 3e 02		.noup:		ld a, 2 
0c63 11 c7 0c				ld de, .msel 
0c66 cd db 0b				call str_at_display 
0c69			 
0c69					; if current option + 1 is not null then display V in bottom 
0c69					; get key 
0c69 cd eb 0b				call update_display 
0c6c			 
0c6c			 
0c6c					; handle key 
0c6c			 
0c6c cd d9 60				call cin_wait 
0c6f			 
0c6f fe 05				cp KEY_UP 
0c71 28 2b				jr z, .mgoup 
0c73 fe 61				cp 'a' 
0c75 28 27				jr z, .mgoup 
0c77 fe 0a				cp KEY_DOWN 
0c79 28 32				jr z, .mgod 
0c7b fe 7a				cp 'z' 
0c7d 28 2e				jr z, .mgod 
0c7f fe 20				cp ' ' 
0c81 28 34				jr z, .goend 
0c83 fe 0c				cp KEY_RIGHT 
0c85 28 30				jr z, .goend 
0c87 fe 0d				cp KEY_CR 
0c89 28 2c				jr z, .goend 
0c8b fe 71				cp 'q' 
0c8d 28 0b				jr z, .goback 
0c8f			 
0c8f fe 0b				cp KEY_LEFT 
0c91 28 07				jr z, .goback 
0c93 fe 08				cp KEY_BS 
0c95 28 03				jr z, .goback 
0c97 c3 05 0c				jp .mloop 
0c9a			 
0c9a			.goback: 
0c9a 3e 00			ld a, 0 
0c9c 18 1d			jr .goend2 
0c9e			 
0c9e				; move up one 
0c9e			.mgoup: 
0c9e 3a 6b ea				ld a, (store_tmp2) 
0ca1 fe 00				cp 0 
0ca3 ca 05 0c				jp z, .mloop 
0ca6 3d					dec a 
0ca7 32 6b ea				ld (store_tmp2), a 
0caa c3 05 0c				jp .mloop 
0cad			 
0cad				; move down one 
0cad			.mgod: 
0cad 3a 6b ea				ld a, (store_tmp2) 
0cb0 3c					inc a 
0cb1 32 6b ea				ld (store_tmp2), a 
0cb4 c3 05 0c				jp .mloop 
0cb7			 
0cb7			 
0cb7			.goend: 
0cb7					; get selected item number 
0cb7			 
0cb7 3a 6b ea				ld a, (store_tmp2) 
0cba 3c					inc a 
0cbb			 
0cbb			.goend2: 
0cbb f5					push af 
0cbc			 
0cbc					; restore active fb 
0cbc					; TODO BUG assumes fb1 
0cbc			 
0cbc 21 0a ed				ld hl, display_fb1 
0cbf 22 c6 eb				ld (display_fb_active), hl 
0cc2			 
0cc2					; restore main regs 
0cc2			 
0cc2			 
0cc2 cd eb 0b				call update_display 
0cc5			 
0cc5 f1					pop af 
0cc6			 
0cc6 c9				ret 
0cc7			 
0cc7 .. 00		.msel:   db ">",0 
0cc9 .. 00		.mup:   db "^",0 
0ccb .. 00		.mdown:   db "v",0 
0ccd			 
0ccd			 
0ccd			; eof 
0ccd			 
# End of file firmware_display.asm
0ccd			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ccd			; random number generators 
0ccd			 
0ccd			 
0ccd			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ccd			 
0ccd			 
0ccd			;-----> Generate a random number 
0ccd			; output a=answer 0<=a<=255 
0ccd			; all registers are preserved except: af 
0ccd			random: 
0ccd e5			        push    hl 
0cce d5			        push    de 
0ccf 2a a5 eb		        ld      hl,(randData) 
0cd2 ed 5f		        ld      a,r 
0cd4 57			        ld      d,a 
0cd5 5e			        ld      e,(hl) 
0cd6 19			        add     hl,de 
0cd7 85			        add     a,l 
0cd8 ac			        xor     h 
0cd9 22 a5 eb		        ld      (randData),hl 
0cdc d1			        pop     de 
0cdd e1			        pop     hl 
0cde c9			        ret 
0cdf			 
0cdf			 
0cdf			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0cdf			 
0cdf			 
0cdf			 
0cdf			;------LFSR------ 
0cdf			;James Montelongo 
0cdf			;optimized by Spencer Putt 
0cdf			;out: 
0cdf			; a = 8 bit random number 
0cdf			RandLFSR: 
0cdf 21 ab eb		        ld hl,LFSRSeed+4 
0ce2 5e			        ld e,(hl) 
0ce3 23			        inc hl 
0ce4 56			        ld d,(hl) 
0ce5 23			        inc hl 
0ce6 4e			        ld c,(hl) 
0ce7 23			        inc hl 
0ce8 7e			        ld a,(hl) 
0ce9 47			        ld b,a 
0cea cb 13		        rl e  
0cec cb 12			rl d 
0cee cb 11		        rl c  
0cf0 17				rla 
0cf1 cb 13		        rl e  
0cf3 cb 12			rl d 
0cf5 cb 11		        rl c  
0cf7 17				rla 
0cf8 cb 13		        rl e  
0cfa cb 12			rl d 
0cfc cb 11		        rl c  
0cfe 17				rla 
0cff 67			        ld h,a 
0d00 cb 13		        rl e  
0d02 cb 12			rl d 
0d04 cb 11		        rl c  
0d06 17				rla 
0d07 a8			        xor b 
0d08 cb 13		        rl e  
0d0a cb 12			rl d 
0d0c ac			        xor h 
0d0d a9			        xor c 
0d0e aa			        xor d 
0d0f 21 ad eb		        ld hl,LFSRSeed+6 
0d12 11 ae eb		        ld de,LFSRSeed+7 
0d15 01 07 00		        ld bc,7 
0d18 ed b8		        lddr 
0d1a 12			        ld (de),a 
0d1b c9			        ret 
0d1c			 
0d1c			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0d1c			 
0d1c			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0d1c			 
0d1c			 
0d1c			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0d1c			 
0d1c			prng16: 
0d1c			;Inputs: 
0d1c			;   (seed1) contains a 16-bit seed value 
0d1c			;   (seed2) contains a NON-ZERO 16-bit seed value 
0d1c			;Outputs: 
0d1c			;   HL is the result 
0d1c			;   BC is the result of the LCG, so not that great of quality 
0d1c			;   DE is preserved 
0d1c			;Destroys: 
0d1c			;   AF 
0d1c			;cycle: 4,294,901,760 (almost 4.3 billion) 
0d1c			;160cc 
0d1c			;26 bytes 
0d1c 2a 9f eb		    ld hl,(seed1) 
0d1f 44			    ld b,h 
0d20 4d			    ld c,l 
0d21 29			    add hl,hl 
0d22 29			    add hl,hl 
0d23 2c			    inc l 
0d24 09			    add hl,bc 
0d25 22 9f eb		    ld (seed1),hl 
0d28 2a 9d eb		    ld hl,(seed2) 
0d2b 29			    add hl,hl 
0d2c 9f			    sbc a,a 
0d2d e6 2d		    and %00101101 
0d2f ad			    xor l 
0d30 6f			    ld l,a 
0d31 22 9d eb		    ld (seed2),hl 
0d34 09			    add hl,bc 
0d35 c9			    ret 
0d36			 
0d36			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0d36			 
0d36			rand32: 
0d36			;Inputs: 
0d36			;   (seed1_0) holds the lower 16 bits of the first seed 
0d36			;   (seed1_1) holds the upper 16 bits of the first seed 
0d36			;   (seed2_0) holds the lower 16 bits of the second seed 
0d36			;   (seed2_1) holds the upper 16 bits of the second seed 
0d36			;   **NOTE: seed2 must be non-zero 
0d36			;Outputs: 
0d36			;   HL is the result 
0d36			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0d36			;Destroys: 
0d36			;   AF 
0d36			;Tested and passes all CAcert tests 
0d36			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0d36			;it has a period of 18,446,744,069,414,584,320 
0d36			;roughly 18.4 quintillion. 
0d36			;LFSR taps: 0,2,6,7  = 11000101 
0d36			;291cc 
0d36			;seed1_0=$+1 
0d36			;    ld hl,12345 
0d36			;seed1_1=$+1 
0d36			;    ld de,6789 
0d36			;    ld b,h 
0d36			;    ld c,l 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    inc l 
0d36			;    add hl,bc 
0d36			;    ld (seed1_0),hl 
0d36			;    ld hl,(seed1_1) 
0d36			;    adc hl,de 
0d36			;    ld (seed1_1),hl 
0d36			;    ex de,hl 
0d36			;seed2_0=$+1 
0d36			;    ld hl,9876 
0d36			;seed2_1=$+1 
0d36			;    ld bc,54321 
0d36			;    add hl,hl \ rl c \ rl b 
0d36			;    ld (seed2_1),bc 
0d36			;    sbc a,a 
0d36			;    and %11000101 
0d36			;    xor l 
0d36			;    ld l,a 
0d36			;    ld (seed2_0),hl 
0d36			;    ex de,hl 
0d36			;    add hl,bc 
0d36			;    ret 
0d36			; 
0d36			 
0d36			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0d36			; 20 bytes, 86 cycles (excluding ret) 
0d36			 
0d36			; returns   hl = pseudorandom number 
0d36			; corrupts   a 
0d36			 
0d36			; generates 16-bit pseudorandom numbers with a period of 65535 
0d36			; using the xorshift method: 
0d36			 
0d36			; hl ^= hl << 7 
0d36			; hl ^= hl >> 9 
0d36			; hl ^= hl << 8 
0d36			 
0d36			; some alternative shift triplets which also perform well are: 
0d36			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0d36			 
0d36			;  org 32768 
0d36			 
0d36			xrnd: 
0d36 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
0d39 3e 00		  ld a,0 
0d3b bd			  cp l 
0d3c 20 02		  jr nz, .xrnd1 
0d3e 2e 01		  ld l, 1 
0d40			.xrnd1: 
0d40			 
0d40 7c			  ld a,h 
0d41 1f			  rra 
0d42 7d			  ld a,l 
0d43 1f			  rra 
0d44 ac			  xor h 
0d45 67			  ld h,a 
0d46 7d			  ld a,l 
0d47 1f			  rra 
0d48 7c			  ld a,h 
0d49 1f			  rra 
0d4a ad			  xor l 
0d4b 6f			  ld l,a 
0d4c ac			  xor h 
0d4d 67			  ld h,a 
0d4e			 
0d4e 22 a3 eb		  ld (xrandc),hl 
0d51			 
0d51 c9			  ret 
0d52			;  
0d52			 
0d52			 
0d52			;;;; int maths 
0d52			 
0d52			; https://map.grauw.nl/articles/mult_div_shifts.php 
0d52			; Divide 16-bit values (with 16-bit result) 
0d52			; In: Divide BC by divider DE 
0d52			; Out: BC = result, HL = rest 
0d52			; 
0d52			Div16: 
0d52 21 00 00		    ld hl,0 
0d55 78			    ld a,b 
0d56 06 08		    ld b,8 
0d58			Div16_Loop1: 
0d58 17			    rla 
0d59 ed 6a		    adc hl,hl 
0d5b ed 52		    sbc hl,de 
0d5d 30 01		    jr nc,Div16_NoAdd1 
0d5f 19			    add hl,de 
0d60			Div16_NoAdd1: 
0d60 10 f6		    djnz Div16_Loop1 
0d62 17			    rla 
0d63 2f			    cpl 
0d64 47			    ld b,a 
0d65 79			    ld a,c 
0d66 48			    ld c,b 
0d67 06 08		    ld b,8 
0d69			Div16_Loop2: 
0d69 17			    rla 
0d6a ed 6a		    adc hl,hl 
0d6c ed 52		    sbc hl,de 
0d6e 30 01		    jr nc,Div16_NoAdd2 
0d70 19			    add hl,de 
0d71			Div16_NoAdd2: 
0d71 10 f6		    djnz Div16_Loop2 
0d73 17			    rla 
0d74 2f			    cpl 
0d75 41			    ld b,c 
0d76 4f			    ld c,a 
0d77 c9			ret 
0d78			 
0d78			 
0d78			;http://z80-heaven.wikidot.com/math 
0d78			; 
0d78			;Inputs: 
0d78			;     DE and A are factors 
0d78			;Outputs: 
0d78			;     A is not changed 
0d78			;     B is 0 
0d78			;     C is not changed 
0d78			;     DE is not changed 
0d78			;     HL is the product 
0d78			;Time: 
0d78			;     342+6x 
0d78			; 
0d78			Mult16: 
0d78			 
0d78 06 08		     ld b,8          ;7           7 
0d7a 21 00 00		     ld hl,0         ;10         10 
0d7d 29			       add hl,hl     ;11*8       88 
0d7e 07			       rlca          ;4*8        32 
0d7f 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0d81 19			         add hl,de   ;--         -- 
0d82 10 f9		       djnz $-5      ;13*7+8     99 
0d84 c9			ret 
0d85			 
0d85			; 
0d85			; Square root of 16-bit value 
0d85			; In:  HL = value 
0d85			; Out:  D = result (rounded down) 
0d85			; 
0d85			;Sqr16: 
0d85			;    ld de,#0040 
0d85			;    ld a,l 
0d85			;    ld l,h 
0d85			;    ld h,d 
0d85			;    or a 
0d85			;    ld b,8 
0d85			;Sqr16_Loop: 
0d85			;    sbc hl,de 
0d85			;    jr nc,Sqr16_Skip 
0d85			;    add hl,de 
0d85			;Sqr16_Skip: 
0d85			;    ccf 
0d85			;    rl d 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    djnz Sqr16_Loop 
0d85			;    ret 
0d85			; 
0d85			; 
0d85			; Divide 8-bit values 
0d85			; In: Divide E by divider C 
0d85			; Out: A = result, B = rest 
0d85			; 
0d85			Div8: 
0d85 af			    xor a 
0d86 06 08		    ld b,8 
0d88			Div8_Loop: 
0d88 cb 13		    rl e 
0d8a 17			    rla 
0d8b 91			    sub c 
0d8c 30 01		    jr nc,Div8_NoAdd 
0d8e 81			    add a,c 
0d8f			Div8_NoAdd: 
0d8f 10 f7		    djnz Div8_Loop 
0d91 47			    ld b,a 
0d92 7b			    ld a,e 
0d93 17			    rla 
0d94 2f			    cpl 
0d95 c9			    ret 
0d96			 
0d96			; 
0d96			; Multiply 8-bit value with a 16-bit value (unrolled) 
0d96			; In: Multiply A with DE 
0d96			; Out: HL = result 
0d96			; 
0d96			Mult12U: 
0d96 2e 00		    ld l,0 
0d98 87			    add a,a 
0d99 30 01		    jr nc,Mult12U_NoAdd0 
0d9b 19			    add hl,de 
0d9c			Mult12U_NoAdd0: 
0d9c 29			    add hl,hl 
0d9d 87			    add a,a 
0d9e 30 01		    jr nc,Mult12U_NoAdd1 
0da0 19			    add hl,de 
0da1			Mult12U_NoAdd1: 
0da1 29			    add hl,hl 
0da2 87			    add a,a 
0da3 30 01		    jr nc,Mult12U_NoAdd2 
0da5 19			    add hl,de 
0da6			Mult12U_NoAdd2: 
0da6 29			    add hl,hl 
0da7 87			    add a,a 
0da8 30 01		    jr nc,Mult12U_NoAdd3 
0daa 19			    add hl,de 
0dab			Mult12U_NoAdd3: 
0dab 29			    add hl,hl 
0dac 87			    add a,a 
0dad 30 01		    jr nc,Mult12U_NoAdd4 
0daf 19			    add hl,de 
0db0			Mult12U_NoAdd4: 
0db0 29			    add hl,hl 
0db1 87			    add a,a 
0db2 30 01		    jr nc,Mult12U_NoAdd5 
0db4 19			    add hl,de 
0db5			Mult12U_NoAdd5: 
0db5 29			    add hl,hl 
0db6 87			    add a,a 
0db7 30 01		    jr nc,Mult12U_NoAdd6 
0db9 19			    add hl,de 
0dba			Mult12U_NoAdd6: 
0dba 29			    add hl,hl 
0dbb 87			    add a,a 
0dbc d0			    ret nc 
0dbd 19			    add hl,de 
0dbe c9			    ret 
0dbf			 
0dbf			; 
0dbf			; Multiply 8-bit value with a 16-bit value (right rotating) 
0dbf			; In: Multiply A with DE 
0dbf			;      Put lowest value in A for most efficient calculation 
0dbf			; Out: HL = result 
0dbf			; 
0dbf			Mult12R: 
0dbf 21 00 00		    ld hl,0 
0dc2			Mult12R_Loop: 
0dc2 cb 3f		    srl a 
0dc4 30 01		    jr nc,Mult12R_NoAdd 
0dc6 19			    add hl,de 
0dc7			Mult12R_NoAdd: 
0dc7 cb 23		    sla e 
0dc9 cb 12		    rl d 
0dcb b7			    or a 
0dcc c2 c2 0d		    jp nz,Mult12R_Loop 
0dcf c9			    ret 
0dd0			 
0dd0			; 
0dd0			; Multiply 16-bit values (with 32-bit result) 
0dd0			; In: Multiply BC with DE 
0dd0			; Out: BCHL = result 
0dd0			; 
0dd0			Mult32: 
0dd0 79			    ld a,c 
0dd1 48			    ld c,b 
0dd2 21 00 00		    ld hl,0 
0dd5 06 10		    ld b,16 
0dd7			Mult32_Loop: 
0dd7 29			    add hl,hl 
0dd8 17			    rla 
0dd9 cb 11		    rl c 
0ddb 30 07		    jr nc,Mult32_NoAdd 
0ddd 19			    add hl,de 
0dde ce 00		    adc a,0 
0de0 d2 e4 0d		    jp nc,Mult32_NoAdd 
0de3 0c			    inc c 
0de4			Mult32_NoAdd: 
0de4 10 f1		    djnz Mult32_Loop 
0de6 41			    ld b,c 
0de7 4f			    ld c,a 
0de8 c9			    ret 
0de9			 
0de9			 
0de9			 
0de9			; 
0de9			; Multiply 8-bit values 
0de9			; In:  Multiply H with E 
0de9			; Out: HL = result 
0de9			; 
0de9			Mult8: 
0de9 16 00		    ld d,0 
0deb 6a			    ld l,d 
0dec 06 08		    ld b,8 
0dee			Mult8_Loop: 
0dee 29			    add hl,hl 
0def 30 01		    jr nc,Mult8_NoAdd 
0df1 19			    add hl,de 
0df2			Mult8_NoAdd: 
0df2 10 fa		    djnz Mult8_Loop 
0df4 c9			    ret 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			;;http://z80-heaven.wikidot.com/math 
0df5			;;This divides DE by BC, storing the result in DE, remainder in HL 
0df5			; 
0df5			;DE_Div_BC:          ;1281-2x, x is at most 16 
0df5			;     ld a,16        ;7 
0df5			;     ld hl,0        ;10 
0df5			;     jp $+5         ;10 
0df5			;.DivLoop: 
0df5			;       add hl,bc    ;-- 
0df5			;       dec a        ;64 
0df5			;       jr z,.DivLoopEnd        ;86 
0df5			; 
0df5			;       sla e        ;128 
0df5			;       rl d         ;128 
0df5			;       adc hl,hl    ;240 
0df5			;       sbc hl,bc    ;240 
0df5			;       jr nc,.DivLoop ;23|21 
0df5			;       inc e        ;-- 
0df5			;       jp .DivLoop+1 
0df5			; 
0df5			;.DivLoopEnd: 
0df5			 
0df5			;HL_Div_C: 
0df5			;Inputs: 
0df5			;     HL is the numerator 
0df5			;     C is the denominator 
0df5			;Outputs: 
0df5			;     A is the remainder 
0df5			;     B is 0 
0df5			;     C is not changed 
0df5			;     DE is not changed 
0df5			;     HL is the quotient 
0df5			; 
0df5			;       ld b,16 
0df5			;       xor a 
0df5			;         add hl,hl 
0df5			;         rla 
0df5			;         cp c 
0df5			;         jr c,$+4 
0df5			;           inc l 
0df5			;           sub c 
0df5			;         djnz $-7 
0df5			 
0df5			; https://plutiedev.com/z80-add-8bit-to-16bit 
0df5			 
0df5			addatohl: 
0df5 85			    add   a, l    ; A = A+L 
0df6 6f			    ld    l, a    ; L = A+L 
0df7 8c			    adc   a, h    ; A = A+L+H+carry 
0df8 95			    sub   l       ; A = H+carry 
0df9 67			    ld    h, a    ; H = H+carry 
0dfa c9			ret 
0dfb			 
0dfb			addatode: 
0dfb 83			    add   a, e    ; A = A+L 
0dfc 5f			    ld    e, a    ; L = A+L 
0dfd 8a			    adc   a, d    ; A = A+L+H+carry 
0dfe 93			    sub   e       ; A = H+carry 
0dff 57			    ld    d, a    ; H = H+carry 
0e00 c9			ret 
0e01			 
0e01			 
0e01			addatobc: 
0e01 81			    add   a, c    ; A = A+L 
0e02 4f			    ld    c, a    ; L = A+L 
0e03 88			    adc   a, b    ; A = A+L+H+carry 
0e04 91			    sub   c       ; A = H+carry 
0e05 47			    ld    b, a    ; H = H+carry 
0e06 c9			ret 
0e07			 
0e07			subafromhl: 
0e07			   ; If A=0 do nothing 
0e07			    ; Otherwise flip A's sign. Since 
0e07			    ; the upper byte becomes -1, also 
0e07			    ; substract 1 from H. 
0e07 ed 44		    neg 
0e09 ca 12 0e		    jp    z, Skip 
0e0c 25			    dec   h 
0e0d			     
0e0d			    ; Now add the low byte as usual 
0e0d			    ; Two's complement takes care of 
0e0d			    ; ensuring the result is correct 
0e0d 85			    add   a, l 
0e0e 6f			    ld    l, a 
0e0f 8c			    adc   a, h 
0e10 95			    sub   l 
0e11 67			    ld    h, a 
0e12			Skip: 
0e12 c9				ret 
0e13			 
0e13			 
0e13			; compare hl and de 
0e13			; returns:  
0e13			; if hl = de, z=1, s=0, c0=0 
0e13			; if hl > de, z=0, s=0, c=0 
0e13			; if hl < de, z=0, s=1, c=1 
0e13			cmp16:	 
0e13 b7				or a 
0e14 ed 52			sbc hl,de 
0e16 e0				ret po 
0e17 7c				ld a,h 
0e18 1f				rra 
0e19 ee 40			xor 01000000B 
0e1b 37				scf 
0e1c 8f				adc a,a 
0e1d c9				ret 
0e1e			 
0e1e			 
0e1e			; test if hl contains zero   - A is destroyed 
0e1e			 
0e1e			ishlzero:    
0e1e b7				or a     ; reset flags 
0e1f 7c				ld a, h 
0e20 b5				or l        	 
0e21			 
0e21 c9				ret 
0e22			 
0e22			 
0e22			 
0e22			 
0e22			if FORTH_ENABLE_FLOATMATH 
0e22			;include "float/bbcmath.z80" 
0e22			include "float/lpfpcalc.asm" 
0e22			endif 
0e22			 
0e22			 
0e22			; eof 
0e22			 
# End of file firmware_maths.asm
0e22			include "firmware_strings.asm"   ; string handling  
0e22			 
0e22			 
0e22			; TODO string len 
0e22			; input text string, end on cr with zero term 
0e22			; a offset into frame buffer to start prompt 
0e22			; d is max length 
0e22			; e is display size TODO 
0e22			; c is current cursor position 
0e22			; hl is ptr to where string will be stored and edited directly 
0e22			 
0e22			 
0e22			; TODO check limit of buffer for new inserts 
0e22			; TODO check insert does not push beyond buffer 
0e22			; TODO scroll in a limited display area 
0e22			; TODO scroll whole screen on page wrap 
0e22			 
0e22			 
0e22			; TODO use LCD cursor? 
0e22			 
0e22			EDIT_V1: equ 0 
0e22			EDIT_V2: equ 1 
0e22			 
0e22			 
0e22			 
0e22			if EDIT_V2 
0e22			input_str: 
0e22			 
0e22 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
0e25			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0e25 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
0e28			;		ld a, c 
0e28			;		call addatohl 
0e28			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0e28 7a					ld a,d 
0e29 32 60 ee			        ld (input_size), a       ; save length of input area 
0e2c 79					ld a, c 
0e2d 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
0e30 7b					ld a,e 
0e31 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0e34			 
0e34			 
0e34					; add a trailing space to make screen refresh nicer 
0e34			 
0e34					;ld hl, (input_start) 
0e34					;push hl 
0e34					;ld a, 0 
0e34					;call strlent 
0e34					;ld a, l 
0e34					;pop hl 
0e34					;call addatohl 
0e34					;dec hl 
0e34					;ld a, ' ' 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld a, 0 
0e34					;ld (hl), a 
0e34			 
0e34			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0e34					; init cursor shape if not set by the cin routines 
0e34 21 bb eb				ld hl, cursor_shape 
0e37			if BASE_KEV 
0e37					ld a, 255 
0e37			else 
0e37 3e 23				ld a, '#' 
0e39			endif 
0e39 77					ld (hl), a 
0e3a 23					inc hl 
0e3b 3e 00				ld a, 0 
0e3d 77					ld (hl), a 
0e3e			 
0e3e 3e 09				ld a, CUR_BLINK_RATE 
0e40 32 5a ee				ld (input_cur_flash), a 
0e43 3e 01				ld a, 1 
0e45 32 59 ee				ld (input_cur_onoff),a 
0e48			.inmain:	 
0e48			 
0e48 cd 70 0f				call input_disp_ref 
0e4b			 
0e4b					; save current length of string 
0e4b			 
0e4b 2a 61 ee				ld hl, (input_start) 
0e4e 3e 00				ld a, 0 
0e50 cd 66 11				call strlent 
0e53 7d					ld a,l 
0e54 32 54 ee				ld (input_len), a 
0e57			 
0e57					;call input_disp_oncur 
0e57			 
0e57					; display current state of input buffer 
0e57			 
0e57					; clean any backspace chars 
0e57			 
0e57 3e 20				ld a, " " 
0e59 32 bb e2				ld (scratch),a 
0e5c 3e 00				ld a, 0 
0e5e 32 bc e2				ld (scratch+1),a 
0e61 3a 5e ee				ld a,(input_at_pos) 
0e64 85					add l 
0e65 11 bb e2				ld de, scratch 
0e68 cd db 0b				call str_at_display 
0e6b			 
0e6b					; pause 1ms 
0e6b			 
0e6b 3e 01				ld a, 1 
0e6d cd e5 0a				call aDelayInMS 
0e70			 
0e70			; display cursor if visible on this cycle 
0e70			 
0e70					; dec flash counter 
0e70 3a 5a ee				ld a, (input_cur_flash) 
0e73 3d					dec a 
0e74 32 5a ee				ld (input_cur_flash), a 
0e77 fe 00				cp 0 
0e79 20 0d				jr nz, .inochgstate 
0e7b			 
0e7b			 
0e7b					; reset on change of state 
0e7b 3e 09				ld a, CUR_BLINK_RATE 
0e7d 32 5a ee				ld (input_cur_flash), a 
0e80			 
0e80					; change state 
0e80 3a 59 ee				ld a,(input_cur_onoff) 
0e83 ed 44				neg 
0e85 32 59 ee				ld (input_cur_onoff),a 
0e88			 
0e88			 
0e88			 
0e88			 
0e88					; TODO is cursor visible? 
0e88					; TODO if so then over write the char at curspos pos with the cursor shape 
0e88			 
0e88								 
0e88			 
0e88			.inochgstate: 
0e88 3a 59 ee				ld a,(input_cur_onoff) 
0e8b fe ff				cp 255 
0e8d 28 0e				jr z, .skipcursor 
0e8f 3a 5e ee				ld a, (input_at_pos) 
0e92 47					ld b, a 
0e93 3a 4f ee				ld a, (input_cursor) 
0e96 80					add b 
0e97 11 bb eb				ld de, cursor_shape 
0e9a					 
0e9a cd db 0b				call str_at_display 
0e9d			 
0e9d			.skipcursor: 
0e9d				if DEBUG_INPUTV2 
0e9d			 
0e9d					ld a,(input_at_pos) 
0e9d					ld hl, LFSRSeed 
0e9d					call hexout 
0e9d					ld a, (input_cursor) 
0e9d					ld hl, LFSRSeed+2 
0e9d					call hexout 
0e9d					ld a,(input_size) 
0e9d					ld hl, LFSRSeed+4 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_onoff) 
0e9d					ld hl, LFSRSeed+6 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_flash) 
0e9d					ld hl, LFSRSeed+8 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_len) 
0e9d					ld hl, LFSRSeed+10 
0e9d					call hexout 
0e9d					ld hl, LFSRSeed+12 
0e9d					ld a, 0 
0e9d					ld (hl),a 
0e9d					ld a, display_row_4 
0e9d					ld de, LFSRSeed 
0e9d					call str_at_display 
0e9d				endif 
0e9d cd eb 0b				call update_display 
0ea0			 
0ea0					; TODO keyboard processing 
0ea0			 
0ea0			if BASE_CPM 
0ea0 cd d9 60				call cin_wait 
0ea3			else 
0ea3					call cin    ; _wait 
0ea3			endif 
0ea3 fe 00				cp 0 
0ea5 ca 48 0e				jp z, .inmain 
0ea8			 
0ea8 fe 0b				cp KEY_LEFT    ; cursor left 
0eaa ca 62 0f				jp z, input_left 
0ead				 
0ead fe 0c				cp KEY_RIGHT      ; cursor right 
0eaf ca 69 0f				jp z, input_right 
0eb2			 
0eb2 fe 0d				cp KEY_CR 
0eb4 c8					ret z 
0eb5			 
0eb5 fe 08				cp KEY_BS 
0eb7 ca d7 0f				jp z, input_delchar 
0eba			 
0eba fe 06				cp KEY_NEXTWORD 
0ebc ca e3 0e				jp z, input_nxtword 
0ebf			 
0ebf fe 07				cp KEY_PREVWORD 
0ec1 ca 0a 0f				jp z, input_prvword 
0ec4			 
0ec4 fe 0e				cp KEY_HOME    ; jump to start of line 
0ec6 20 08				jr nz, .ikh 
0ec8 3e 00				ld a, 0 
0eca 32 4f ee				ld (input_cursor), a 
0ecd ca 48 0e				jp z, .inmain 
0ed0			.ikh: 
0ed0			 
0ed0 fe 0f				cp KEY_END     ; jump to end of line 
0ed2 20 09				jr nz, .ike 
0ed4 3a 54 ee				ld a, (input_len) 
0ed7 32 4f ee				ld (input_cursor),a 
0eda ca 48 0e				jp z, .inmain 
0edd			.ike: 
0edd fe 05			        cp KEY_UP      ; recall last command 
0edf c8					ret z 
0ee0			;jr nz, .irec 
0ee0			; TODO next word 
0ee0			; TODO prev word 
0ee0			;  
0ee0			; 
0ee0			;	ld hl, scratch 
0ee0			;	ld de, os_last_cmd 
0ee0			;	call strcpy 
0ee0			;		jp  .inmain 
0ee0			.irec: 
0ee0			;		jr .instr1 
0ee0			 
0ee0			 
0ee0			 
0ee0					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
0ee0			 
0ee0			; TODO return if any special keys are given 
0ee0			;		ld l, a 
0ee0			;		ld a, 28 ; KEY_F12   ; 27 
0ee0			;		sub l 
0ee0			;		ret m 
0ee0			;		ld a, l 
0ee0					; if no special key then insert as a char 
0ee0			 
0ee0 c3 a9 0f				jp input_inschr 
0ee3			 
0ee3				 
0ee3			input_nxtword: 
0ee3				; jump to start next word after the cursor 
0ee3			 
0ee3			.insknwn:	 
0ee3 cd 9f 0f				call input_curptr	 
0ee6 7e					ld a,(hl)	 
0ee7 fe 00				cp 0 
0ee9 ca 48 0e				jp z, .inmain    ; end of string 
0eec			 
0eec			; if we are on a word, then move off of it 
0eec			 
0eec fe 20				cp ' ' 
0eee 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
0ef0 21 4f ee				ld hl, input_cursor 
0ef3 34					inc (hl) 
0ef4 18 ed				jr .insknwn 
0ef6			 
0ef6			.inspace: 
0ef6			 
0ef6 cd 9f 0f				call input_curptr	 
0ef9 7e					ld a,(hl)	 
0efa fe 00				cp 0 
0efc ca 48 0e				jp z, .inmain    ; end of string 
0eff			 
0eff			; if we are on a word, then move off of it 
0eff			 
0eff fe 20				cp ' ' 
0f01 c2 48 0e				jp nz, .inmain     ; we are on non space so at next word 
0f04 21 4f ee				ld hl, input_cursor 
0f07 34					inc (hl) 
0f08 18 ec				jr .inspace 
0f0a			 
0f0a			 
0f0a			 
0f0a			 
0f0a			input_prvword: 
0f0a				; jump to the start of previous word before the cursor 
0f0a			 
0f0a			; where are we to start with currently? 
0f0a			 
0f0a cd 9f 0f				call input_curptr	 
0f0d 7e					ld a, (hl) 
0f0e fe 20				cp ' ' 
0f10 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
0f12			 
0f12			 
0f12			 
0f12			.inskpwn:	 
0f12 3a 4f ee				ld a,(input_cursor) 
0f15 fe 00				cp 0 
0f17 ca 48 0e				jp z, .inmain    ; start of string 
0f1a			 
0f1a			;if we are on a word, then move off of it 
0f1a			 
0f1a cd 9f 0f				call input_curptr	 
0f1d 7e					ld a, (hl) 
0f1e fe 20				cp ' ' 
0f20 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
0f22					;jp z, .inmain    ; start of string 
0f22 21 4f ee				ld hl, input_cursor 
0f25 35					dec (hl) 
0f26 18 ea				jr .inskpwn 
0f28			.iwstart: 
0f28 21 4f ee				ld hl, input_cursor 
0f2b 34					inc (hl) 
0f2c c3 48 0e				jp .inmain 
0f2f					 
0f2f			 
0f2f			.inspacep: 
0f2f			 
0f2f					;jp .inmain    ; start of string 
0f2f			 
0f2f			 
0f2f			 
0f2f 3a 4f ee				ld a,(input_cursor) 
0f32 fe 00				cp 0 
0f34 ca 48 0e				jp z, .inmain    ; start of string 
0f37			 
0f37			; if we are on a word, then move off of it 
0f37			 
0f37 cd 9f 0f				call input_curptr	 
0f3a 7e					ld a, (hl) 
0f3b fe 20				cp ' ' 
0f3d c2 46 0f				jp nz, .incharp     ; we are on non space so at end of prev word 
0f40 21 4f ee				ld hl, input_cursor 
0f43 35					dec (hl) 
0f44 18 e9				jr .inspacep 
0f46			 
0f46			 
0f46			.incharp:	 
0f46					; eat the word to get to the start 
0f46 3a 4f ee				ld a,(input_cursor) 
0f49 fe 00				cp 0 
0f4b ca 48 0e				jp z, .inmain    ; start of string 
0f4e			 
0f4e			; if we are on a word, then move off of it 
0f4e			 
0f4e cd 9f 0f				call input_curptr	 
0f51 7e					ld a, (hl) 
0f52 fe 20				cp ' ' 
0f54 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
0f56 21 4f ee				ld hl, input_cursor 
0f59 35					dec (hl) 
0f5a 18 ea				jr .incharp 
0f5c			.ipwordst: 
0f5c					; at space before the prev word so reposition over it 
0f5c 21 4f ee				ld hl, input_cursor 
0f5f 34					inc (hl) 
0f60 18 b0				jr .inskpwn 
0f62					 
0f62			 
0f62			 
0f62			input_left: 
0f62				; move cursor left 
0f62 21 4f ee			ld hl, input_cursor 
0f65 35				dec (hl) 
0f66			;	cp 0 
0f66			;	jp z, .inmain    ; ignore left as at the start of the string 
0f66 c3 48 0e			jp .inmain 
0f69			 
0f69			input_right: 
0f69				; move cursor right 
0f69				 
0f69				;ld a, (input_size) 
0f69				;ld b, a 
0f69 21 4f ee			ld hl, input_cursor 
0f6c 34				inc (hl) 
0f6d				;dec b 
0f6d				;cp 0 
0f6d				;jp z, .inmain   ; ignore as at end of the string buffer 
0f6d				;ld a, b 
0f6d				;inc a 
0f6d				;ld (input_cursor), a 
0f6d c3 48 0e			jp .inmain 
0f70			 
0f70			 
0f70			 
0f70			input_disp_ref: 
0f70				; display the text from start of buffer (ie full refresh) 
0f70 3a 5e ee			ld a, (input_at_pos) 
0f73 2a 61 ee			ld hl,(input_start) 
0f76 eb				ex de, hl 
0f77 cd db 0b			call str_at_display  
0f7a c9				ret 
0f7b			input_disp_oncur: 
0f7b				; display the text from cursor position to end of buffer 
0f7b				; TODO position start of string at cursor position on screen 
0f7b				; TODO draw from that point on 
0f7b 3a 4f ee			ld a, (input_cursor) 
0f7e 47				ld b, a 
0f7f 3a 5e ee			ld a, (input_at_pos) 
0f82 80				add b 
0f83 48				ld c, b     ; save a 
0f84 78				ld a, b     ; inc string start for cursor 
0f85 2a 61 ee			ld hl,(input_start) 
0f88 cd f5 0d			call addatohl 
0f8b eb				ex de, hl 
0f8c 79				ld a, c 
0f8d cd db 0b			call str_at_display  
0f90 c9				ret 
0f91			 
0f91			input_nxtw: 
0f91				; Find next word 
0f91 c9				ret 
0f92			 
0f92			input_prvw: 
0f92				; Find previous word 
0f92 c9				ret 
0f93			 
0f93			input_lenrem:   
0f93				; Calculate the length of string remaining from current cursor 
0f93				; position to end of buffer (exc null term) 
0f93				 
0f93 3a 4f ee			ld a, (input_cursor) 
0f96 4f				ld c, a 
0f97 3a 60 ee			ld a, (input_size) 
0f9a 91				sub c 
0f9b 06 00			ld b, 0 
0f9d 0d				dec c 
0f9e c9				ret	 
0f9f			 
0f9f			input_curptr: 
0f9f				; calc address of the character under the cursor 
0f9f				 
0f9f 2a 61 ee			ld hl, (input_start) 
0fa2 3a 4f ee			ld a, (input_cursor) 
0fa5 cd f5 0d			call addatohl 
0fa8 c9				ret 
0fa9			 
0fa9			input_inschr: 
0fa9				; Insert char at cursor position 
0fa9 f5				push af   ; save char 
0faa				;call input_lenrem    ; get bc length of remaining string 
0faa			 
0faa				 
0faa cd 9f 0f			call input_curptr 
0fad			;	ld hl, (input_start) 
0fad			;	ld a, (input_cursor) 
0fad			;	call addatohl 
0fad				;push hl   ; save to come back to 
0fad			 
0fad				; shift everything up one to end of buffer 
0fad			 
0fad				;push hl 
0fad				;dec de 
0fad				;inc de 
0fad			;	ldir 
0fad				 
0fad				;pop hl 
0fad			 
0fad				; are we adding to the end of line? 
0fad			 
0fad 3a 4f ee			ld a, (input_cursor) 
0fb0 47				ld b, a 
0fb1 3a 54 ee			ld a, (input_len) 
0fb4 b8				cp b 
0fb5 20 09			jr nz, .insmid   ; no, insert in middle of text 
0fb7			 
0fb7				; tack on the end of the line 
0fb7 f1				pop af 
0fb8 77				ld (hl), a   ; save new char 
0fb9 23				inc hl 
0fba 3e 00			ld a, 0 
0fbc 77				ld (hl), a 
0fbd c3 69 0f			jp input_right 
0fc0				 
0fc0			.insmid: 
0fc0				; hl has insertion point so move everything up one to allow for insertion 
0fc0				;call input_shiftright 
0fc0 f1				pop af 
0fc1			 
0fc1			.shufinsmid: 
0fc1 47				ld b, a     ; b contains new char, c prev char at this position  
0fc2 7e				ld a, (hl) 
0fc3			 
0fc3 fe 00			cp 0    ; at end of string need to then dump new char and add term 
0fc5 28 07			jr z, .endinsmid 
0fc7 4f				ld c, a 
0fc8 78				ld a, b 
0fc9 77				ld (hl), a 
0fca 23				inc hl 
0fcb 79				ld a, c 
0fcc 18 f3			jr .shufinsmid 
0fce				 
0fce			 
0fce			 
0fce			 
0fce			.endinsmid: 
0fce 78				ld a, b 
0fcf 77				ld (hl), a 
0fd0 23				inc hl 
0fd1 3e 00			ld a, 0 
0fd3 77				ld (hl), a 
0fd4			 
0fd4			 
0fd4			;	ld (hl), a   ; save new char 
0fd4			 
0fd4 c3 69 0f			jp input_right 
0fd7			 
0fd7			;input_shiftright: 
0fd7			;	; shift text right at cursor, hl has shift start 
0fd7			;	push hl 
0fd7			;	push de 
0fd7			;	push bc 
0fd7			; 
0fd7			; 
0fd7			;	; move to end of string past zero term 
0fd7			;	ld hl,(input_start) 
0fd7			;	ld a, (input_len) 
0fd7			;	call addatohl 
0fd7			;	inc hl 
0fd7			;;	inc hl 
0fd7			;;	inc hl 
0fd7			;	ld a, 0 
0fd7			;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			;	 
0fd7			;;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			; 
0fd7			;	push hl 
0fd7			;	pop de 
0fd7			;	inc de 
0fd7			;	 
0fd7			; 
0fd7			;;	ld hl,(input_start) 
0fd7			;;	ld a, (input_cursor) 
0fd7			;;	call addatohl 
0fd7			; 
0fd7			; 
0fd7			;	; calc how many bytes from cursor pos to end of string we need to shift 
0fd7			;	call input_lenrem    ; get bc length of remaining string 
0fd7			;	;ld a, (input_cursor) 
0fd7			;	;ld c, a 
0fd7			;	ld a, (input_len) 
0fd7			;	cp 2 
0fd7			;	jr z, .iskipzero	 
0fd7			;	;sub c 
0fd7			;	;inc a 
0fd7			;	;ld c, a 
0fd7			;	;ld b, 0 
0fd7			;	inc c 
0fd7			;	inc c 
0fd7			;	; move data 
0fd7			;	lddr 
0fd7			;.iskipzero: 
0fd7			; 
0fd7			;	pop bc 
0fd7			;	pop de 
0fd7			;	pop hl 
0fd7			;	ret	 
0fd7			 
0fd7			input_delchar: 
0fd7				; Delete char at cursor position 
0fd7 cd 93 0f			call input_lenrem    ; get bc length of remaining string 
0fda 2a 61 ee			ld hl, (input_start) 
0fdd 3a 4f ee			ld a, (input_cursor) 
0fe0 cd f5 0d			call addatohl 
0fe3			 
0fe3 e5				push hl 
0fe4 d1				pop de 
0fe5 1b				dec de 
0fe6			 
0fe6			.dl:	 
0fe6 ed a0			ldi  
0fe8 7e				ld a, (hl) 
0fe9 fe 00			cp 0 
0feb 28 02			jr z, .dldone 
0fed 18 f7			jr .dl 
0fef			.dldone: 
0fef ed a0			ldi 
0ff1			 
0ff1 c3 62 0f			jp input_left 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			 
0ff4			 
0ff4			 
0ff4			if EDIT_V1 
0ff4			input_str: 
0ff4			 
0ff4				    	ld (input_at_pos),a      ; save display position to start 
0ff4					add c 
0ff4					ld (input_at_cursor),a	; save draw pos of cursor 
0ff4					ld (input_start), hl     ; save ptr to buffer 
0ff4					ld a, c 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl     ; save ptr to point under the cursor 
0ff4					ld a,d 
0ff4				        ld (input_size), a       ; save length of input area 
0ff4					ld a, c 
0ff4					ld (input_cursor),a      ; init cursor start position  
0ff4					ld a,e 
0ff4				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0ff4					 
0ff4					 
0ff4			 
0ff4			;		ld a,(input_ptr) 
0ff4			;		ld (input_under_cursor),a 	; save what is under the cursor 
0ff4			 
0ff4			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0ff4					; init cursor shape if not set by the cin routines 
0ff4					ld hl, cursor_shape 
0ff4			if BASE_KEV 
0ff4					ld a, 255 
0ff4			else 
0ff4					ld a, '#' 
0ff4			endif 
0ff4					ld (hl), a 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl), a 
0ff4			 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					ld a, 1 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'I' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4			.is1:		; main entry loop 
0ff4			 
0ff4			 
0ff4			 
0ff4					; pause 1ms 
0ff4			 
0ff4					ld a, 1 
0ff4					call aDelayInMS 
0ff4			 
0ff4					; dec flash counter 
0ff4					ld a, (input_cur_flash) 
0ff4					dec a 
0ff4					ld (input_cur_flash), a 
0ff4					cp 0 
0ff4					jr nz, .nochgstate 
0ff4			 
0ff4			 
0ff4					; change state 
0ff4					ld a,(input_cur_onoff) 
0ff4					neg 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			 
0ff4					; reset on change of state 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4			.nochgstate: 
0ff4					 
0ff4					 
0ff4			 
0ff4					; display cursor  
0ff4			 
0ff4			;		ld hl, (input_start) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			 
0ff4					; get char under cursor and replace with cursor 
0ff4			ld hl, (input_ptr) 
0ff4			;		ld a, (hl) 
0ff4			;		ld (input_under_cursor),a 
0ff4			;		ld a, '_' 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					; display string 
0ff4			 
0ff4					ld de, (input_start) 
0ff4					ld a, (input_at_pos) 
0ff4					call str_at_display 
0ff4			;	        call update_display 
0ff4			 
0ff4					; find place to put the cursor 
0ff4			;		add h 
0ff4			;		ld l, display_row_1 
0ff4			;		sub l 
0ff4			; (input_at_pos) 
0ff4					;ld c, a 
0ff4			;		ld a, (input_cursor) 
0ff4			;		ld l, (input_at_pos) 
0ff4			;		;ld b, h 
0ff4			;		add l 
0ff4			;		ld (input_at_cursor),a 
0ff4					;ld l,h 
0ff4			 
0ff4			;		ld h, 0 
0ff4			;		ld l,(input_at_pos) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0ff4			;		call subafromhl 
0ff4			;		ld a,l 
0ff4			;		ld (input_at_cursor), a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					ld a, (hardware_diag) 
0ff4					cp 0 
0ff4					jr z, .skip_input_diag 
0ff4			 
0ff4					ld a,(input_at_pos) 
0ff4					ld hl, LFSRSeed 
0ff4					call hexout 
0ff4					ld a, (input_cursor) 
0ff4					ld hl, LFSRSeed+2 
0ff4					call hexout 
0ff4					ld a,(input_at_cursor) 
0ff4					ld hl, LFSRSeed+4 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_onoff) 
0ff4					ld hl, LFSRSeed+6 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_flash) 
0ff4					ld hl, LFSRSeed+8 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_len) 
0ff4					ld hl, LFSRSeed+10 
0ff4					call hexout 
0ff4					ld hl, LFSRSeed+12 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4					ld a, display_row_4 
0ff4					ld de, LFSRSeed 
0ff4					call str_at_display 
0ff4					.skip_input_diag: 
0ff4				endif 
0ff4			 
0ff4					; decide on if we are showing the cursor this time round 
0ff4			 
0ff4					ld a, (input_cur_onoff) 
0ff4					cp 255 
0ff4					jr z, .skipcur 
0ff4			 
0ff4			 
0ff4					ld a,(input_at_cursor) 
0ff4					ld de, cursor_shape 
0ff4					call str_at_display 
0ff4			 
0ff4					; save length of current input string 
0ff4					ld hl, (input_start) 
0ff4					ld a, 0 
0ff4					call strlent 
0ff4					ld a,l 
0ff4					ld (input_len),a 
0ff4			 
0ff4			.skipcur: 
0ff4			 
0ff4				        call update_display 
0ff4					 
0ff4			 
0ff4			 
0ff4					; wait 
0ff4				 
0ff4					; TODO loop without wait to flash the cursor and char under cursor	 
0ff4					call cin    ; _wait 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 
0ff4			 
0ff4					; get ptr to char to input into 
0ff4			 
0ff4					ld c,a 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_cursor) 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl 
0ff4					ld a,c 
0ff4			 
0ff4					; replace char under cursor 
0ff4			 
0ff4			;		ld hl, (input_ptr) 
0ff4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0ff4			;		ld (hl), a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'i' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					cp KEY_HOME 
0ff4					jr nz, .iske 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor),a 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					jp .is1 
0ff4					 
0ff4			.iske:		cp KEY_END 
0ff4					jr nz, .isknw 
0ff4					jp .is1 
0ff4			 
0ff4			.isknw:		cp KEY_NEXTWORD 
0ff4					jr nz, .iskpw 
0ff4			 
0ff4			.isknwm:	ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0 
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .isknwm 
0ff4			 
0ff4			.iskpw:		cp KEY_PREVWORD 
0ff4					jr nz, .iskl 
0ff4			.iskpwm:	 
0ff4					ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0  
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .iskpwm 
0ff4			 
0ff4			 
0ff4			.iskl:		cp KEY_LEFT 
0ff4					jr nz, .isk1 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk1:		cp KEY_RIGHT 
0ff4					jr nz, .isk2 
0ff4			 
0ff4					ld a,(input_len)		; TODO BUG why cant i load e direct? 
0ff4					ld e,a 
0ff4					ld a, (input_cursor) 
0ff4					cp e 
0ff4					jp z, .is1		; at the end of string so dont go right 
0ff4			 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk2:		cp KEY_UP 
0ff4			 
0ff4					jr nz, .isk3 
0ff4			 
0ff4					; swap last command with the current on 
0ff4			 
0ff4					; move cursor to start of string 
0ff4					ld hl, (input_start) 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					 
0ff4					; swap input and last command buffers 
0ff4			 
0ff4					ld hl, os_cli_cmd 
0ff4					ld de, os_last_cmd 
0ff4					ld b, 255 
0ff4			.swap1:		ld a, (hl) 
0ff4					ld c,a 
0ff4					ld a, (de) 
0ff4					ld (hl), a 
0ff4					ld a,c 
0ff4					ld (de),a 
0ff4					inc hl 
0ff4					inc de 
0ff4					djnz .swap1 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk3:		cp KEY_BS 
0ff4					jr nz, .isk4 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					; hl is source 
0ff4					; de needs to be source - 1 
0ff4			 
0ff4			;		ld a, 0 
0ff4			;		dec hl 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					; shift all data 
0ff4			 
0ff4					push hl 
0ff4					inc hl 
0ff4					pop de 
0ff4					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ff4					ld c,a 
0ff4					ld b,0 
0ff4					ldir  
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					; remove char 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld de,.iblank 
0ff4					call str_at_display 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk4:		cp KEY_CR 
0ff4					jr z, .endinput 
0ff4			 
0ff4					; else add the key press to the end 
0ff4			 
0ff4					ld c, a			; save key pressed 
0ff4			 
0ff4					ld a,(hl)		; get what is currently under char 
0ff4			 
0ff4					cp 0			; we are at the end of the string 
0ff4					jr nz, .onchar 
0ff4					 
0ff4					; add a char to the end of the string 
0ff4				 
0ff4					ld (hl),c 
0ff4					inc hl 
0ff4			;		ld a,' ' 
0ff4			;		ld (hl),a 
0ff4			;		inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					dec hl 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc a				; TODO check max string length and scroll  
0ff4					ld (input_cursor), a		; inc cursor pos 
0ff4							 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, '+' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					jp .is1 
0ff4					 
0ff4			 
0ff4			 
0ff4					; if on a char then insert 
0ff4			.onchar: 
0ff4			 
0ff4					; TODO over flow check: make sure insert does not blow out buffer 
0ff4			 
0ff4					; need to do some maths to use lddr 
0ff4			 
0ff4					push hl   ; save char pos 
0ff4					push bc 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_len) 
0ff4					call addatohl  		; end of string 
0ff4					inc hl 
0ff4					inc hl		; past zero term 
0ff4					push hl 
0ff4					inc hl 
0ff4					push hl  
0ff4			 
0ff4								; start and end of lddr set, now how much to move? 
0ff4			 
0ff4							 
0ff4					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0ff4					ld b,a 
0ff4					ld a,(input_len) 
0ff4					ld e,a 
0ff4					sub b 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4			 
0ff4					ld b,0 
0ff4					ld c,a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'i' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					pop de 
0ff4					pop hl 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'I' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					lddr 
0ff4				 
0ff4			 
0ff4			 
0ff4					; TODO have a key for insert/overwrite mode???? 
0ff4					pop bc 
0ff4					pop hl 
0ff4					ld (hl), c		; otherwise overwrite current char 
0ff4					 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.endinput:	; TODO look for end of string 
0ff4			 
0ff4					; add trailing space for end of token 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a,(input_len) 
0ff4					call addatohl 
0ff4					ld a, ' ' 
0ff4					ld (hl),a 
0ff4					; TODO eof of parse marker 
0ff4			 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					ret 
0ff4			 
0ff4			.iblank: db " ",0 
0ff4			 
0ff4			 
0ff4			input_str_prev:	ld (input_at_pos), a 
0ff4					ld (input_start), hl 
0ff4					ld a,1			; add cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					ld (input_ptr), hl 
0ff4					ld a,d 
0ff4					ld (input_size), a 
0ff4					ld a,0 
0ff4					ld (input_cursor),a 
0ff4			.instr1:	 
0ff4			 
0ff4					; TODO do block cursor 
0ff4					; TODO switch cursor depending on the modifer key 
0ff4			 
0ff4					; update cursor shape change on key hold 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl), a 
0ff4			 
0ff4					; display entered text 
0ff4					ld a,(input_at_pos) 
0ff4			            	CALL fLCD_Pos       ;Position cursor to location in A 
0ff4			            	LD   de, (input_start) 
0ff4			            	CALL fLCD_Str       ;Display string pointed to by DE 
0ff4			 
0ff4					call cin 
0ff4					cp 0 
0ff4					jr z, .instr1 
0ff4			 
0ff4					; proecess keyboard controls first 
0ff4			 
0ff4					ld hl,(input_ptr) 
0ff4			 
0ff4					cp KEY_CR	 ; pressing enter ends input 
0ff4					jr z, .instrcr 
0ff4			 
0ff4					cp KEY_BS 	; back space 
0ff4					jr nz, .instr2 
0ff4					; process back space 
0ff4			 
0ff4					; TODO stop back space if at start of string 
0ff4					dec hl 
0ff4					dec hl ; to over write cursor 
0ff4					ld a,(cursor_shape) 
0ff4					;ld a,0 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a," " 
0ff4					ld (hl),a 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4			 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr2:	cp KEY_LEFT    ; cursor left 
0ff4					jr nz, .instr3 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4				 
0ff4			.instr3:	cp KEY_RIGHT      ; cursor right 
0ff4					jr nz, .instr4 
0ff4					inc hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr4:	cp KEY_HOME    ; jump to start of line 
0ff4					jr nz, .instr5 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr5:	cp KEY_END     ; jump to end of line 
0ff4					jr nz, .instr6 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			.instr6:        cp KEY_UP      ; recall last command 
0ff4					jr nz, .instrnew 
0ff4			 
0ff4				ld hl, scratch 
0ff4				ld de, os_last_cmd 
0ff4				call strcpy 
0ff4					jr .instr1 
0ff4			 
0ff4			 
0ff4			.instrnew:	; no special key pressed to see if we have room to store it 
0ff4			 
0ff4					; TODO do string size test 
0ff4			 
0ff4					dec hl ; to over write cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4					jr .instr1 
0ff4			.instrcr:	dec hl		; remove cursor 
0ff4					ld a,' '	; TODO add a trailing space for safety 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					; if at end of line scroll up    
0ff4					; TODO detecting only end of line 4 for scroll up  
0ff4			 
0ff4					;ld   
0ff4			 
0ff4					ret 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			; strcpy hl = dest, de source 
0ff4			 
0ff4 1a			strcpy:   LD   A, (DE)        ;Get character from string 
0ff5 b7			            OR   A              ;Null terminator? 
0ff6 c8			            RET  Z              ;Yes, so finished 
0ff7 1a					ld a,(de) 
0ff8 77					ld (hl),a 
0ff9 13			            INC  DE             ;Point to next character 
0ffa 23					inc hl 
0ffb 18 f7		            JR   strcpy       ;Repeat 
0ffd c9					ret 
0ffe			 
0ffe			 
0ffe			; TODO string_at  
0ffe			; pass string which starts with lcd offset address and then null term string 
0ffe			 
0ffe			; TODO string to dec 
0ffe			; TODO string to hex 
0ffe			; TODO byte to string hex 
0ffe			; TODO byte to string dec 
0ffe			 
0ffe			 
0ffe			 
0ffe			; from z80uartmonitor 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
0ffe			; pass hl for where to put the text 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe c5			hexout:	PUSH BC 
0fff f5					PUSH AF 
1000 47					LD B, A 
1001					; Upper nybble 
1001 cb 3f				SRL A 
1003 cb 3f				SRL A 
1005 cb 3f				SRL A 
1007 cb 3f				SRL A 
1009 cd 19 10				CALL tohex 
100c 77					ld (hl),a 
100d 23					inc hl	 
100e					 
100e					; Lower nybble 
100e 78					LD A, B 
100f e6 0f				AND 0FH 
1011 cd 19 10				CALL tohex 
1014 77					ld (hl),a 
1015 23					inc hl	 
1016					 
1016 f1					POP AF 
1017 c1					POP BC 
1018 c9					RET 
1019					 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			tohex: 
1019 e5					PUSH HL 
101a d5					PUSH DE 
101b 16 00				LD D, 0 
101d 5f					LD E, A 
101e 21 26 10				LD HL, .DATA 
1021 19					ADD HL, DE 
1022 7e					LD A, (HL) 
1023 d1					POP DE 
1024 e1					POP HL 
1025 c9					RET 
1026			 
1026			.DATA: 
1026 30					DEFB	30h	; 0 
1027 31					DEFB	31h	; 1 
1028 32					DEFB	32h	; 2 
1029 33					DEFB	33h	; 3 
102a 34					DEFB	34h	; 4 
102b 35					DEFB	35h	; 5 
102c 36					DEFB	36h	; 6 
102d 37					DEFB	37h	; 7 
102e 38					DEFB	38h	; 8 
102f 39					DEFB	39h	; 9 
1030 41					DEFB	41h	; A 
1031 42					DEFB	42h	; B 
1032 43					DEFB	43h	; C 
1033 44					DEFB	44h	; D 
1034 45					DEFB	45h	; E 
1035 46					DEFB	46h	; F 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1036			;;    subtract $30, if result > 9 then subtract $7 more 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			atohex: 
1036 d6 30				SUB $30 
1038 fe 0a				CP 10 
103a f8					RET M		; If result negative it was 0-9 so we're done 
103b d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
103d c9					RET		 
103e			 
103e			 
103e			 
103e			 
103e			; Get 2 ASCII characters as hex byte from pointer in hl 
103e			 
103e			BYTERD: 
103e 16 00			LD	D,00h		;Set up 
1040 cd 48 10			CALL	HEXCON		;Get byte and convert to hex 
1043 87				ADD	A,A		;First nibble so 
1044 87				ADD	A,A		;multiply by 16 
1045 87				ADD	A,A		; 
1046 87				ADD	A,A		; 
1047 57				LD	D,A		;Save hi nibble in D 
1048			HEXCON: 
1048 7e				ld a, (hl)		;Get next chr 
1049 23				inc hl 
104a d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
104c fe 0a			CP	00Ah		;Is it 0-9 ? 
104e 38 02			JR	C,NALPHA	;If so miss next bit 
1050 d6 07			SUB	007h		;Else convert alpha 
1052			NALPHA: 
1052 b2				OR	D		;Add hi nibble back 
1053 c9				RET			; 
1054			 
1054			 
1054			; 
1054			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1054			; Since the routines get_byte and therefore get_nibble are called, only valid 
1054			; characters (0-9a-f) are accepted. 
1054			; 
1054			;get_word        push    af 
1054			;                call    get_byte        ; Get the upper byte 
1054			;                ld      h, a 
1054			;                call    get_byte        ; Get the lower byte 
1054			;                ld      l, a 
1054			;                pop     af 
1054			;                ret 
1054			; 
1054			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1054			; the routine get_nibble is used only valid characters are accepted - the  
1054			; input routine only accepts characters 0-9a-f. 
1054			; 
1054 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1055 7e					ld a,(hl) 
1056 23					inc hl 
1057 cd 7c 10		                call    nibble2val      ; Get upper nibble 
105a cb 07		                rlc     a 
105c cb 07		                rlc     a 
105e cb 07		                rlc     a 
1060 cb 07		                rlc     a 
1062 47			                ld      b, a            ; Save upper four bits 
1063 7e					ld a,(hl) 
1064 cd 7c 10		                call    nibble2val      ; Get lower nibble 
1067 b0			                or      b               ; Combine both nibbles 
1068 c1			                pop     bc              ; Restore B (and C) 
1069 c9			                ret 
106a			; 
106a			; Get a hexadecimal digit from the serial line. This routine blocks until 
106a			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
106a			; to the serial line interface. The lower 4 bits of A contain the value of  
106a			; that particular digit. 
106a			; 
106a			;get_nibble      ld a,(hl)           ; Read a character 
106a			;                call    to_upper        ; Convert to upper case 
106a			;                call    is_hex          ; Was it a hex digit? 
106a			;                jr      nc, get_nibble  ; No, get another character 
106a			 ;               call    nibble2val      ; Convert nibble to value 
106a			 ;               call    print_nibble 
106a			 ;               ret 
106a			; 
106a			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
106a			; A valid hexadecimal digit is denoted by a set C flag. 
106a			; 
106a			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
106a			;                ret     nc              ; Yes 
106a			;                cp      '0'             ; Less than '0'? 
106a			;                jr      nc, is_hex_1    ; No, continue 
106a			;                ccf                     ; Complement carry (i.e. clear it) 
106a			;                ret 
106a			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
106a			;                ret     c               ; Yes 
106a			;                cp      'A'             ; Less than 'A'? 
106a			;                jr      nc, is_hex_2    ; No, continue 
106a			;                ccf                     ; Yes - clear carry and return 
106a			;                ret 
106a			;is_hex_2        scf                     ; Set carry 
106a			;                ret 
106a			; 
106a			; Convert a single character contained in A to upper case: 
106a			; 
106a fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
106c d8			                ret     c 
106d fe 7b		                cp      'z' + 1         ; > 'z'? 
106f d0			                ret     nc              ; Nothing to do, either 
1070 e6 5f		                and     $5f             ; Convert to upper case 
1072 c9			                ret 
1073			 
1073			 
1073			to_lower: 
1073			 
1073			   ; if char is in [A-Z] make it lower case 
1073			 
1073			   ; enter : a = char 
1073			   ; exit  : a = lower case char 
1073			   ; uses  : af 
1073			 
1073 fe 41		   cp 'A' 
1075 d8			   ret c 
1076			    
1076 fe 5b		   cp 'Z'+1 
1078 d0			   ret nc 
1079			    
1079 f6 20		   or $20 
107b c9			   ret 
107c			 
107c			; 
107c			; Expects a hexadecimal digit (upper case!) in A and returns the 
107c			; corresponding value in A. 
107c			; 
107c fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
107e 38 02		                jr      c, nibble2val_1 ; Yes 
1080 d6 07		                sub     7               ; Adjust for A-F 
1082 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1084 e6 0f		                and     $f              ; Only return lower 4 bits 
1086 c9			                ret 
1087			; 
1087			; Print_nibble prints a single hex nibble which is contained in the lower  
1087			; four bits of A: 
1087			; 
1087			;print_nibble    push    af              ; We won't destroy the contents of A 
1087			;                and     $f              ; Just in case... 
1087			;                add     a, '0'             ; If we have a digit we are done here. 
1087			;                cp      '9' + 1         ; Is the result > 9? 
1087			;                jr      c, print_nibble_1 
1087			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1087			;print_nibble_1  call    putc            ; Print the nibble and 
1087			;                pop     af              ; restore the original value of A 
1087			;                ret 
1087			;; 
1087			;; Send a CR/LF pair: 
1087			; 
1087			;crlf            push    af 
1087			;                ld      a, cr 
1087			;                call    putc 
1087			;                ld      a, lf 
1087			;                call    putc 
1087			;                pop     af 
1087			;                ret 
1087			; 
1087			; Print_word prints the four hex digits of a word to the serial line. The  
1087			; word is expected to be in HL. 
1087			; 
1087			;print_word      push    hl 
1087			;                push    af 
1087			;                ld      a, h 
1087			;                call    print_byte 
1087			;                ld      a, l 
1087			;                call    print_byte 
1087			;                pop     af 
1087			;                pop     hl 
1087			;                ret 
1087			; 
1087			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1087			; The byte to be printed is expected to be in A. 
1087			; 
1087			;print_byte      push    af              ; Save the contents of the registers 
1087			;                push    bc 
1087			;                ld      b, a 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                call    print_nibble    ; Print high nibble 
1087			;                ld      a, b 
1087			;                call    print_nibble    ; Print low nibble 
1087			;                pop     bc              ; Restore original register contents 
1087			;                pop     af 
1087			;                ret 
1087			 
1087			 
1087			 
1087			 
1087			 
1087			fourehexhl:  
1087 7e				ld a,(hl) 
1088 cd 36 10			call atohex 
108b cb 3f				SRL A 
108d cb 3f				SRL A 
108f cb 3f				SRL A 
1091 cb 3f				SRL A 
1093 47				ld b, a 
1094 23				inc hl 
1095 7e				ld a,(hl) 
1096 23				inc hl 
1097 cd 36 10			call atohex 
109a 80				add b 
109b 57				ld d,a 
109c 7e				ld a,(hl) 
109d cd 36 10			call atohex 
10a0 cb 3f				SRL A 
10a2 cb 3f				SRL A 
10a4 cb 3f				SRL A 
10a6 cb 3f				SRL A 
10a8 47				ld b, a 
10a9 23				inc hl 
10aa 7e				ld a,(hl) 
10ab 23				inc hl 
10ac cd 36 10			call atohex 
10af 80				add b 
10b0 5f				ld e, a 
10b1 d5				push de 
10b2 e1				pop hl 
10b3 c9				ret 
10b4			 
10b4			; pass hl. returns z set if the byte at hl is a digit 
10b4			;isdigithl:  
10b4			;	push bc 
10b4			;	ld a,(hl) 
10b4			;	cp ':' 
10b4			;	jr nc, .isdf 		; > 
10b4			;	cp '0' 
10b4			;	jr c, .isdf		; < 
10b4			; 
10b4			;	; TODO find a better way to set z 
10b4			; 
10b4			;	ld b,a 
10b4			;	cp b 
10b4			;	pop bc 
10b4			;	ret 
10b4			; 
10b4			;.isdf:	; not digit so clear z 
10b4			; 
10b4			;	; TODO find a better way to unset z 
10b4			; 
10b4			;	ld b,a 
10b4			;	inc b 
10b4			;	cp b 
10b4			; 
10b4			;	pop bc 
10b4			;	ret 
10b4				 
10b4				 
10b4			 
10b4			 
10b4			; pass hl as the four byte address to load 
10b4			 
10b4			get_word_hl:  
10b4 e5				push hl 
10b5 cd 54 10			call get_byte 
10b8				 
10b8 47				ld b, a 
10b9			 
10b9 e1				pop hl 
10ba 23				inc hl 
10bb 23				inc hl 
10bc			 
10bc			; TODO not able to handle a-f  
10bc 7e				ld a,(hl) 
10bd			;	;cp ':' 
10bd			;	cp 'g' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp 'G' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp '0' 
10bd			;	jr c, .single_byte_hl		; < 
10bd			 
10bd				;call isdigithl 
10bd fe 00			cp 0 
10bf 28 06			jr z, .single_byte_hl 
10c1			 
10c1			.getwhln:   ; hex word so get next byte 
10c1			 
10c1 cd 54 10			call get_byte 
10c4 6f				ld l, a 
10c5 60				ld h,b 
10c6 c9				ret 
10c7 68			.single_byte_hl:   ld l,b 
10c8 26 00				ld h,0 
10ca c9					ret 
10cb			 
10cb			 
10cb			 
10cb			 
10cb 21 6b 18			ld hl,asc+1 
10ce			;	ld a, (hl) 
10ce			;	call nibble2val 
10ce cd 54 10			call get_byte 
10d1			 
10d1			;	call fourehexhl 
10d1 32 ef e2			ld (scratch+52),a 
10d4				 
10d4 21 ed e2			ld hl,scratch+50 
10d7 22 de e5			ld (os_cur_ptr),hl 
10da			 
10da c9				ret 
10db			 
10db			 
10db			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10db			 
10db			; Decimal Unsigned Version 
10db			 
10db			;Number in a to decimal ASCII 
10db			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10db			;Example: display a=56 as "056" 
10db			;input: a = number 
10db			;Output: a=0,value of a in the screen 
10db			;destroys af,bc (don't know about hl and de) 
10db			DispAToASCII: 
10db 0e 9c			ld	c,-100 
10dd cd e7 10			call	.Na1 
10e0 0e f6			ld	c,-10 
10e2 cd e7 10			call	.Na1 
10e5 0e ff			ld	c,-1 
10e7 06 2f		.Na1:	ld	b,'0'-1 
10e9 04			.Na2:	inc	b 
10ea 81				add	a,c 
10eb 38 fc			jr	c,.Na2 
10ed 91				sub	c		;works as add 100/10/1 
10ee f5				push af		;safer than ld c,a 
10ef 78				ld	a,b		;char is in b 
10f0			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10f0 f1				pop af		;safer than ld a,c 
10f1 c9				ret 
10f2			 
10f2			; Decimal Signed Version 
10f2			 
10f2			; DispA 
10f2			; -------------------------------------------------------------- 
10f2			; Converts a signed integer value to a zero-terminated ASCII 
10f2			; string representative of that value (using radix 10). 
10f2			; -------------------------------------------------------------- 
10f2			; INPUTS: 
10f2			;     HL     Value to convert (two's complement integer). 
10f2			;     DE     Base address of string destination. (pointer). 
10f2			; -------------------------------------------------------------- 
10f2			; OUTPUTS: 
10f2			;     None 
10f2			; -------------------------------------------------------------- 
10f2			; REGISTERS/MEMORY DESTROYED 
10f2			; AF HL 
10f2			; -------------------------------------------------------------- 
10f2			 
10f2			;DispHLToASCII: 
10f2			;   push    de 
10f2			;   push    bc 
10f2			; 
10f2			;; Detect sign of HL. 
10f2			;    bit    7, h 
10f2			;    jr     z, ._DoConvert 
10f2			; 
10f2			;; HL is negative. Output '-' to string and negate HL. 
10f2			;    ld     a, '-' 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			; 
10f2			;; Negate HL (using two's complement) 
10f2			;    xor    a 
10f2			;    sub    l 
10f2			;    ld     l, a 
10f2			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10f2			;    sbc    a, h 
10f2			;    ld     h, a 
10f2			; 
10f2			;; Convert HL to digit characters 
10f2			;._DoConvert: 
10f2			;    ld     b, 0     ; B will count character length of number 
10f2			;-   ld     a, 10 
10f2			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10f2			;    push   af 
10f2			;    inc    b 
10f2			;    ld     a, h 
10f2			;    or     l 
10f2			;    jr     nz, - 
10f2			; 
10f2			;; Retrieve digits from stack 
10f2			;-   pop    af 
10f2			;    or     $30 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			;    djnz   - 
10f2			; 
10f2			;; Terminate string with NULL 
10f2			;    xor    a 
10f2			;    ld     (de), a 
10f2			; 
10f2			;    pop    bc 
10f2			;    pop    de 
10f2			;    ret 
10f2			 
10f2			;Comments 
10f2			; 
10f2			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10f2			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10f2			;    Note that the output string will not be fixed-width. 
10f2			; 
10f2			;Example Usage 
10f2			; 
10f2			;    ld    hl, -1004 
10f2			;    ld    de, OP1 
10f2			;    call  DispA 
10f2			;    ld    hl, OP1 
10f2			;    syscall  PutS 
10f2			 
10f2			 
10f2			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10f2			 
10f2			 
10f2			;Converts an ASCII string to an unsigned 16-bit integer 
10f2			;Quits when it reaches a non-decimal digit 
10f2			 
10f2			string_to_uint16: 
10f2			atoui_16: 
10f2			;Input: 
10f2			;     DE points to the string 
10f2			;Outputs: 
10f2			;     HL is the result 
10f2			;     A is the 8-bit value of the number 
10f2			;     DE points to the byte after the number 
10f2			;Destroys: 
10f2			;     BC 
10f2			;       if the string is non-empty, BC is HL/10 
10f2			;Size:  24 bytes 
10f2			;Speed: 42+d(104+{0,9}) 
10f2			;       d is the number of digits in the number 
10f2			;       max is 640 cycles for a 5 digit number 
10f2			;Assuming no leading zeros: 
10f2			;1 digit:  146cc 
10f2			;2 digit:  250cc 
10f2			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10f2			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10f2			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10f2			;avg: 544.81158447265625cc (544+13297/16384) 
10f2			;=============================================================== 
10f2 21 00 00		  ld hl,0 
10f5			.u16a: 
10f5 1a			  ld a,(de) 
10f6 d6 30		  sub 30h 
10f8 fe 0a		  cp 10 
10fa d0			  ret nc 
10fb 13			  inc de 
10fc 44			  ld b,h 
10fd 4d			  ld c,l 
10fe 29			  add hl,hl 
10ff 29			  add hl,hl 
1100 09			  add hl,bc 
1101 29			  add hl,hl 
1102 85			  add a,l 
1103 6f			  ld l,a 
1104 30 ef		  jr nc,.u16a 
1106 24			  inc h 
1107 c3 f5 10		  jp .u16a 
110a			 
110a			 
110a			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110a			 
110a			;written by Zeda 
110a			;Converts a 16-bit unsigned integer to an ASCII string. 
110a			 
110a			uitoa_16: 
110a			;Input: 
110a			;   DE is the number to convert 
110a			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
110a			;Output: 
110a			;   HL points to the null-terminated ASCII string 
110a			;      NOTE: This isn't necessarily the same as the input HL. 
110a d5			  push de 
110b c5			  push bc 
110c f5			  push af 
110d eb			  ex de,hl 
110e			 
110e 01 f0 d8		  ld bc,-10000 
1111 3e 2f		  ld a,'0'-1 
1113 3c			  inc a 
1114 09			  add hl,bc  
1115 38 fc		   jr c,$-2 
1117 12			  ld (de),a 
1118 13			  inc de 
1119			 
1119 01 e8 03		  ld bc,1000 
111c 3e 3a		  ld a,'9'+1 
111e 3d			  dec a  
111f 09			  add hl,bc  
1120 30 fc		   jr nc,$-2 
1122 12			  ld (de),a 
1123 13			  inc de 
1124			 
1124 01 9c ff		  ld bc,-100 
1127 3e 2f		  ld a,'0'-1 
1129 3c			  inc a  
112a 09			  add hl,bc  
112b 38 fc		   jr c,$-2 
112d 12			  ld (de),a 
112e 13			  inc de 
112f			 
112f 7d			  ld a,l 
1130 26 3a		  ld h,'9'+1 
1132 25			  dec h  
1133 c6 0a		  add a,10  
1135 30 fb		   jr nc,$-3 
1137 c6 30		  add a,'0' 
1139 eb			  ex de,hl 
113a 72			  ld (hl),d 
113b 23			  inc hl 
113c 77			  ld (hl),a 
113d 23			  inc hl 
113e 36 00		  ld (hl),0 
1140			 
1140			;Now strip the leading zeros 
1140 0e fa		  ld c,-6 
1142 09			  add hl,bc 
1143 3e 30		  ld a,'0' 
1145 23			  inc hl  
1146 be			  cp (hl)  
1147 28 fc		  jr z,$-2 
1149			 
1149			;Make sure that the string is non-empty! 
1149 7e			  ld a,(hl) 
114a b7			  or a 
114b 20 01		  jr nz,.atoub 
114d 2b			  dec hl 
114e			.atoub: 
114e			 
114e f1			  pop af 
114f c1			  pop bc 
1150 d1			  pop de 
1151 c9			  ret 
1152			 
1152			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1152			 
1152			toUpper: 
1152			;A is the char. 
1152			;If A is a lowercase letter, this sets it to the matching uppercase 
1152			;18cc or 30cc or 41cc 
1152			;avg: 26.75cc 
1152 fe 61		  cp 'a' 
1154 d8			  ret c 
1155 fe 7b		  cp 'z'+1 
1157 d0			  ret nc 
1158 d6 20		  sub 'a'-'A' 
115a c9			  ret 
115b			 
115b			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
115b			 
115b			; String Length 
115b			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
115b			 
115b			; Get the length of the null-terminated string starting at $8000 hl 
115b			;    LD     HL, $8000 
115b			 
115b			strlenz: 
115b			 
115b af			    XOR    A               ; Zero is the value we are looking for. 
115c 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
115d 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
115e			                           ; 65, 536 bytes (the entire addressable memory space). 
115e ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1160			 
1160			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1160 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1161 6f			    LD     L, A             ; number of bytes 
1162 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1164 2b			    DEC    HL              ; Compensate for null. 
1165 c9				ret 
1166			 
1166			; Get the length of the A terminated string starting at $8000 hl 
1166			;    LD     HL, $8000 
1166			 
1166			strlent: 
1166			 
1166			                  ; A is the value we are looking for. 
1166 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1168 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
116e 2e 00		    LD     L, 0             ; number of bytes 
1170 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1172 2b			    DEC    HL              ; Compensate for null. 
1173 c9				ret 
1174			 
1174			 
1174			;Comparing Strings 
1174			 
1174			;IN    HL     Address of string1. 
1174			;      DE     Address of string2. 
1174			 
1174			; doc given but wrong??? 
1174			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1174			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1174			; tested 
1174			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1174			 
1174			strcmp_old: 
1174 e5			    PUSH   HL 
1175 d5			    PUSH   DE 
1176			 
1176 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1177 be			    CP     (HL)            ; (want to minimize work). 
1178 38 01		    JR     C, Str1IsBigger 
117a 7e			    LD     A, (HL) 
117b			 
117b			Str1IsBigger: 
117b 4f			    LD     C, A             ; Put length in BC 
117c 06 00		    LD     B, 0 
117e 13			    INC    DE              ; Increment pointers to meat of string. 
117f 23			    INC    HL 
1180			 
1180			CmpLoop: 
1180 1a			    LD     A, (DE)          ; Compare bytes. 
1181 ed a1		    CPI 
1183 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1185 13			    INC    DE              ; Update pointer. 
1186 ea 80 11		    JP     PE, CmpLoop 
1189			 
1189 d1			    POP    DE 
118a e1			    POP    HL 
118b 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
118c be			    CP     (HL) 
118d c9			    RET 
118e			 
118e			NoMatch: 
118e 2b			    DEC    HL 
118f be			    CP     (HL)            ; Compare again to affect carry. 
1190 d1			    POP    DE 
1191 e1			    POP    HL 
1192 c9			    RET 
1193			 
1193			;; test strmp 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr z, .z1 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z1: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr z, .z2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr c, .c1 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c1: 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr c, .c2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;	NEXTW 
1193			;.str1:   db "string1",0 
1193			;.str2:   db "string2",0 
1193			 
1193			; only care about direct match or not 
1193			; hl and de strings 
1193			; zero set if the same 
1193			 
1193			strcmp: 
1193 1a				ld a, (de) 
1194 be				cp (hl) 
1195 28 02			jr z, .ssame 
1197 b7				or a 
1198 c9				ret 
1199			 
1199			.ssame:  
1199 fe 00			cp 0 
119b c8				ret z 
119c			 
119c 23				inc hl 
119d 13				inc de 
119e 18 f3			jr strcmp 
11a0				 
11a0				 
11a0			 
11a0			;Copyright (c) 2014, Luke Maurits 
11a0			;All rights reserved. 
11a0			; 
11a0			;Redistribution and use in source and binary forms, with or without 
11a0			;modification, are permitted provided that the following conditions are met: 
11a0			; 
11a0			;* Redistributions of source code must retain the above copyright notice, this 
11a0			;  list of conditions and the following disclaimer. 
11a0			; 
11a0			;* Redistributions in binary form must reproduce the above copyright notice, 
11a0			;  this list of conditions and the following disclaimer in the documentation 
11a0			;  and/or other materials provided with the distribution. 
11a0			; 
11a0			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
11a0			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
11a0			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
11a0			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
11a0			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
11a0			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
11a0			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
11a0			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
11a0			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
11a0			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
11a0			 
11a0			; https://github.com/lmaurits/lm512/blob/master/string.z80 
11a0			 
11a0			StrictStrCmp: 
11a0				; Load next chars of each string 
11a0 1a				ld a, (de) 
11a1 47				ld b, a 
11a2 7e				ld a, (hl) 
11a3				; Compare 
11a3 b8				cp b 
11a4				; Return non-zero if chars don't match 
11a4 c0				ret nz 
11a5				; Check for end of both strings 
11a5 fe 00			cp "\0" 
11a7				; Return if strings have ended 
11a7 c8				ret z 
11a8				; Otherwise, advance to next chars 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f4			jr StrictStrCmp 
11ac			 
11ac			;end 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				call bp_on 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 09 61		      ld    HL, heap_start 
11b0 22 04 61		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 06 61		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 92 e2		      ld    HL, heap_start+heap_size-4 
11bc 22 09 61		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 89 81		      ld    HL, heap_size-4 
11c2 22 0b 61		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 94 e2		      ld    (heap_start+heap_size-2), HL 
11cb 22 92 e2		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 04 61		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 04 61		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			; Now handled by SPI  
1369			;if SOUND_ENABLE  
1369			;	include "firmware_sound.asm"  
1369			;endif  
1369			  
1369			include "firmware_diags.asm"  
1369			; Hardware diags menu 
1369			 
1369			 
1369			config: 
1369			 
1369 3e 00			ld a, 0 
136b 21 8f 13			ld hl, .configmn 
136e cd f9 0b			call menu 
1371			 
1371 fe 00			cp 0 
1373 c8				ret z 
1374			 
1374			;	cp 1 
1374			;	call z, .savetostore 
1374			 
1374 fe 01			cp 1 
1376			if STARTUP_V1 
1376 cc a5 13			call z, .selautoload 
1379			endif 
1379			 
1379			if STARTUP_V2 
1379				call z, .enautoload 
1379			endif 
1379 fe 02			cp 2 
137b cc 9b 13			call z, .disautoload 
137e			;	cp 3 
137e			;	call z, .selbank 
137e fe 03			cp 3 
1380 cc c3 13			call z, .debug_tog 
1383 fe 04			cp 4 
1385 cc 11 15			call z, .bpsgo 
1388 fe 05			cp 5 
138a cc ec 13			call z, hardware_diags 
138d			if STARTUP_V2 
138d				cp 6 
138d				call z, create_startup 
138d			endif 
138d 18 da			jr config 
138f			 
138f			.configmn: 
138f			;	dw prom_c3 
138f ff 16			dw prom_c2 
1391 14 17			dw prom_c2a 
1393			;	dw prom_c2b 
1393			;	dw prom_c4 
1393 33 17			dw prom_m4 
1395 4e 17			dw prom_m4b 
1397 56 17			dw prom_c1 
1399			if STARTUP_V2 
1399				dw prom_c9 
1399			endif 
1399 00 00			dw 0 
139b				 
139b			 
139b			if STARTUP_V2 
139b			.enautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 1 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b				ld hl, prom_notav 
139b				ld de, prom_empty 
139b				call info_panel 
139b				endif 
139b			 
139b			 
139b				ret 
139b			endif 
139b			 
139b			.disautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 0 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b 21 65 17			ld hl, prom_notav 
139e 11 7b 17			ld de, prom_empty 
13a1 cd 59 0b			call info_panel 
13a4				endif 
13a4			 
13a4			 
13a4 c9				ret 
13a5			 
13a5			if STARTUP_V1 
13a5			 
13a5			; Select auto start 
13a5			 
13a5			.selautoload: 
13a5			 
13a5				 
13a5				if STORAGE_SE 
13a5			 
13a5					call config_dir 
13a5				        ld hl, scratch 
13a5					ld a, 0 
13a5					call menu 
13a5			 
13a5					cp 0 
13a5					ret z 
13a5			 
13a5					dec a 
13a5			 
13a5			 
13a5					; locate menu option 
13a5			 
13a5					ld hl, scratch 
13a5					call table_lookup 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALl" 
13a5						CALLMONITOR 
13a5					endif 
13a5					; with the pointer to the menu it, the byte following the zero term is the file id 
13a5			 
13a5					ld a, 0 
13a5					ld bc, 50   ; max of bytes to look at 
13a5					cpir  
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALb" 
13a5						CALLMONITOR 
13a5					endif 
13a5					;inc hl 
13a5			 
13a5					ld a, (hl)   ; file id 
13a5					 
13a5				        ; save bank and file ids 
13a5			 
13a5					push af 
13a5			 
13a5			; TODO need to save to block 0 on bank 1	 
13a5			 
13a5					call storage_get_block_0 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "AL0" 
13a5						CALLMONITOR 
13a5					endif 
13a5					pop af 
13a5			 
13a5					ld (store_page+STORE_0_FILERUN),a 
13a5					 
13a5					; save bank id 
13a5			 
13a5					ld a,(spi_device) 
13a5					ld (store_page+STORE_0_BANKRUN),a 
13a5			 
13a5					; enable auto run of store file 
13a5			 
13a5					ld a, 1 
13a5					ld (store_page+STORE_0_AUTOFILE),a 
13a5			 
13a5					; save buffer 
13a5			 
13a5					ld hl, 0 
13a5					ld de, store_page 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALw" 
13a5						CALLMONITOR 
13a5					endif 
13a5				call storage_write_block	 ; save update 
13a5			  
13a5			 
13a5			 
13a5			 
13a5					ld hl, scratch 
13a5					call config_fdir 
13a5			 
13a5				else 
13a5			 
13a5 21 65 17			ld hl, prom_notav 
13a8 11 7b 17			ld de, prom_empty 
13ab cd 59 0b			call info_panel 
13ae			 
13ae				endif 
13ae c9				ret 
13af			endif 
13af			 
13af			 
13af			; Select storage bank 
13af			 
13af			.selbank: 
13af			 
13af			;	if STORAGE_SE 
13af			;	else 
13af			 
13af 21 65 17			ld hl, prom_notav 
13b2 11 7b 17			ld de, prom_empty 
13b5 cd 59 0b			call info_panel 
13b8			;	endif 
13b8				 
13b8 c9				ret 
13b9			 
13b9			if STORAGE_SE 
13b9			 
13b9			.config_ldir:   
13b9				; Load storage bank labels into menu array 
13b9			 
13b9				 
13b9			 
13b9			 
13b9				ret 
13b9			 
13b9			 
13b9			endif 
13b9			 
13b9			 
13b9			; Save user words to storage 
13b9			 
13b9			.savetostore: 
13b9			 
13b9			;	if STORAGE_SE 
13b9			; 
13b9			;		call config_dir 
13b9			;	        ld hl, scratch 
13b9			;		ld a, 0 
13b9			;		call menu 
13b9			;		 
13b9			;		ld hl, scratch 
13b9			;		call config_fdir 
13b9			; 
13b9			;	else 
13b9			 
13b9 21 65 17			ld hl, prom_notav 
13bc 11 7b 17			ld de, prom_empty 
13bf cd 59 0b			call info_panel 
13c2			 
13c2			;	endif 
13c2			 
13c2 c9				ret 
13c3			 
13c3			if STARTUP_V2 
13c3			 
13c3			create_startup: 
13c3			 
13c3				ld a, 0 
13c3				ld hl, .crstart 
13c3				call menu 
13c3			 
13c3				cp 0 
13c3				ret z 
13c3			 
13c3				cp 1 
13c3				call z, .genlsword 
13c3				cp 2 
13c3				call z, .genedword 
13c3			 
13c3				cp 3 
13c3				call z, .gendemword 
13c3			 
13c3				cp 4 
13c3				call z, .genutlword 
13c3				cp 5 
13c3				call z, .genspiword 
13c3				cp 6 
13c3				call z, .genkeyword 
13c3				cp 7 
13c3				call z, .gensoundword 
13c3				cp 7 
13c3				call z, .genhwword 
13c3				jr create_startup 
13c3			 
13c3			.genhwword: 
13c3				ld hl, crs_hw 
13c3				ld de, .hwworddef 
13c3				call .genfile 
13c3				ret 
13c3			.gensoundword: 
13c3				ld hl, crs_sound 
13c3				ld de, .soundworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genlsword: 
13c3				ld hl, crs_s1 
13c3				ld de, .lsworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genedword: 
13c3				ld de, .edworddef 
13c3				ld hl, crs_s2 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.gendemword: 
13c3				ld de, .demoworddef 
13c3				ld hl, crs_s3 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genutlword: 
13c3				ld hl, crs_s4 
13c3				ld de, .utilwordef 
13c3				call .genfile 
13c3				ret 
13c3			.genspiword: 
13c3				ld hl, crs_s5 
13c3				ld de, .spiworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genkeyword: 
13c3				ld hl, crs_s6 
13c3				ld de, .keyworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			; hl - points to file name 
13c3			; de - points to strings to add to file 
13c3			 
13c3			.genfile: 
13c3				push hl 
13c3				push de 
13c3			 
13c3				call clear_display 
13c3				ld a, display_row_1 
13c3				ld de, .genfiletxt 
13c3				call str_at_display 
13c3				call update_display 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3			 
13c3				push de 
13c3				call storage_create 
13c3				; id in hl 
13c3				pop de   ; table of strings to add 
13c3			 
13c3			.genloop: 
13c3			 
13c3				push hl ; save id for next time around 
13c3				push de ; save de for next time around 
13c3			 
13c3				ex de, hl 
13c3				call loadwordinhl 
13c3				ex de, hl 
13c3			 
13c3				; need hl to be the id 
13c3				; need de to be the string ptr 
13c3				 
13c3				call storage_append 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3				inc de 
13c3				inc de 
13c3			 
13c3				ld a,(de) 
13c3				cp 0 
13c3				jr nz, .genloop 
13c3				inc de 
13c3				ld a, (de) 
13c3				dec de 
13c3				cp 0 
13c3				jr nz, .genloop	 
13c3			 
13c3				ret 
13c3			 
13c3			.genfiletxt:  db "Creating file...",0 
13c3			 
13c3			.hwworddef: 
13c3				dw test5 
13c3				dw test6 
13c3				dw test7 
13c3				dw test8 
13c3				dw test9 
13c3				dw test10 
13c3				dw 0 
13c3			 
13c3			.soundworddef: 
13c3				dw sound1 
13c3				dw sound2 
13c3				dw sound3 
13c3				dw sound4 
13c3				dw sound5 
13c3				dw sound6 
13c3				dw sound7 
13c3				dw sound8 
13c3				dw sound9 
13c3				dw 0 
13c3			 
13c3			.utilwordef: 
13c3				dw strncpy 
13c3				dw type 
13c3				dw tuck 
13c3				dw clrstack 
13c3				dw longread 
13c3				dw start1 
13c3				dw start2 
13c3			; duplicated 
13c3			;	dw start3b 
13c3			;	dw start3c 
13c3				dw list 
13c3				dw 0 
13c3			 
13c3			.lsworddef: 
13c3				dw start3b 
13c3				dw 0 
13c3			 
13c3			.edworddef: 
13c3				dw edit1 
13c3				dw edit2 
13c3				dw edit3 
13c3				dw 0 
13c3			 
13c3			.demoworddef: 
13c3				dw game1 
13c3				dw game1a 
13c3				dw game1b 
13c3				dw game1c 
13c3				dw game1d 
13c3				dw game1s 
13c3				dw game1t 
13c3				dw game1f 
13c3				dw game1z 
13c3				dw game1zz 
13c3				dw ssv2 
13c3				dw ssv3 
13c3				dw ssv4 
13c3				dw ssv5 
13c3				dw ssv1 
13c3				dw ssv1cpm	 
13c3			;	dw game2b 
13c3			;	dw game2bf 
13c3			;	dw game2mba 
13c3			;	dw game2mbas	 
13c3			;	dw game2mbht 
13c3			;	dw game2mbms 
13c3			;	dw game2mb 
13c3			;	dw game3w 
13c3			;	dw game3p 
13c3			;	dw game3sc 
13c3			;	dw game3vsi 
13c3			;	dw game3vs 
13c3				dw 0 
13c3			 
13c3			 
13c3			.spiworddef: 
13c3			 
13c3			    dw spi1 
13c3			    dw spi2 
13c3			    dw spi2b 
13c3			    dw spi3 
13c3			    dw spi4 
13c3			    dw spi5 
13c3			;    dw spi6 
13c3			;    dw spi7 
13c3			 
13c3			;    dw spi8 
13c3			;    dw spi9 
13c3			;    dw spi10 
13c3			    dw 0 
13c3			 
13c3			.keyworddef: 
13c3			 
13c3				dw keyup 
13c3				dw keydown 
13c3				dw keyleft 
13c3				dw keyright 
13c3				dw 	keyf1 
13c3				dw keyf2 
13c3				dw keyf3 
13c3				dw keyf4 
13c3				dw keyf5 
13c3				dw keyf6 
13c3				dw keyf7 
13c3				dw keyf8 
13c3				dw keyf9 
13c3				dw keyf10 
13c3				dw keyf11 
13c3				dw keyf12 
13c3				dw keytab 
13c3				dw keycr 
13c3				dw keyhome 
13c3				dw keyend 
13c3				dw keybs 
13c3				dw 0 
13c3			 
13c3			.crstart: 
13c3				dw crs_s1 
13c3				dw crs_s2 
13c3				dw crs_s3 
13c3				dw crs_s4 
13c3				dw crs_s5 
13c3				dw crs_s6 
13c3				dw crs_sound 
13c3				dw crs_hw 
13c3				dw 0 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			if STORAGE_SE 
13c3			 
13c3			config_fdir: 
13c3				; using the scratch dir go through and release the memory allocated for each string 
13c3				 
13c3				ld hl, scratch 
13c3			.cfdir:	ld e,(hl) 
13c3				inc hl 
13c3				ld d,(hl) 
13c3				inc hl 
13c3			 
13c3				ex de, hl 
13c3				call ishlzero 
13c3				ret z     ; return on null pointer 
13c3				call free 
13c3				ex de, hl 
13c3				jr .cfdir 
13c3			 
13c3			 
13c3				ret 
13c3			 
13c3			 
13c3			config_dir: 
13c3			 
13c3				; for the config menus that need to build a directory of storage call this routine 
13c3				; it will construct a menu in scratch to pass to menu 
13c3			 
13c3				; open storage device 
13c3			 
13c3				; execute DIR to build a list of files and their ids into scratch in menu format 
13c3				; once the menu has finished then will need to call config_fdir to release the strings 
13c3				 
13c3				; c = number items 
13c3			 
13c3				 
13c3				call storage_get_block_0 
13c3			 
13c3				ld hl, store_page     ; get current id count 
13c3				ld b, (hl) 
13c3				ld c, 0    ; count of files   
13c3			 
13c3			 
13c3				ld hl, scratch 
13c3				ld (store_tmp2), hl    ; location to poke strings 
13c3			 
13c3				; check for empty drive 
13c3			 
13c3				ld a, 0 
13c3				cp b 
13c3				jp z, .dirdone 
13c3			 
13c3				 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdc" 
13c3						CALLMONITOR 
13c3					endif 
13c3			 
13c3			 
13c3			.diritem:	 
13c3				push bc 
13c3				; for each of the current ids do a search for them and if found push to stack 
13c3			 
13c3					ld hl, STORE_BLOCK_PHY 
13c3					ld d, 0		 ; look for extent 0 of block id as this contains file name 
13c3					ld e,b 
13c3			 
13c3					call storage_findnextid 
13c3			 
13c3			 
13c3					; if found hl will be non zero 
13c3			 
13c3					call ishlzero 
13c3					jr z, .dirnotfound 
13c3			 
13c3					; increase count 
13c3			 
13c3					pop bc	 
13c3					inc c 
13c3					push bc 
13c3					 
13c3			 
13c3					; get file header and push the file name 
13c3			 
13c3					ld de, store_page 
13c3					call storage_read_block 
13c3			 
13c3					; push file id to stack 
13c3				 
13c3					ld a, (store_page) 
13c3					ld h, 0 
13c3					ld l, a 
13c3			 
13c3					;call forth_push_numhl 
13c3					; TODO store id 
13c3			 
13c3					push hl 
13c3			 
13c3					; push extent count to stack  
13c3				 
13c3					ld hl, store_page+3 
13c3			 
13c3					; get file name length 
13c3			 
13c3					call strlenz   
13c3			 
13c3					inc hl   ; cover zero term 
13c3					inc hl  ; stick the id at the end of the area 
13c3			 
13c3					push hl 
13c3					pop bc    ; move length to bc 
13c3			 
13c3					call malloc 
13c3			 
13c3					; TODO save malloc area to scratch 
13c3			 
13c3					ex de, hl 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), e 
13c3					inc hl 
13c3					ld (hl), d 
13c3					inc hl 
13c3					ld (store_tmp2), hl 
13c3			 
13c3					 
13c3			 
13c3					;pop hl   ; get source 
13c3			;		ex de, hl    ; swap aronund	 
13c3			 
13c3					ld hl, store_page+3 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "CFd" 
13c3						CALLMONITOR 
13c3					endif 
13c3					ldir 
13c3			 
13c3					; de is past string, move back one and store id 
13c3					 
13c3					dec de 
13c3			 
13c3					; store file id 
13c3			 
13c3					pop hl 
13c3					ex de,hl 
13c3					ld (hl), e 
13c3			 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdi" 
13c3						CALLMONITOR 
13c3					endif 
13c3					 
13c3			.dirnotfound: 
13c3					pop bc     
13c3					djnz .diritem 
13c3				 
13c3			.dirdone:	 
13c3			 
13c3					ld a, 0 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), a 
13c3					inc hl 
13c3					ld (hl), a 
13c3					inc hl 
13c3					; push a count of the dir items found 
13c3			 
13c3			;		ld h, 0 
13c3			;		ld l, c 
13c3			 
13c3				ret 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			; Settings 
13c3			; Run  
13c3			 
13c3			 
13c3			 
13c3			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
13c3			;;hd_menu2:   db "        2: Editor",0   
13c3			;hd_menu2:   db "        2: Editor       6: Menu",0   
13c3			;hd_menu3:   db "        3: Storage",0 
13c3			;hd_menu4:   db "0=quit  4: Debug",0 
13c3			;hd_don:     db "ON",0 
13c3			;hd_doff:     db "OFF",0 
13c3			; 
13c3			; 
13c3			; 
13c3			;hardware_diags_old:       
13c3			; 
13c3			;.diagmenu: 
13c3			;	call clear_display 
13c3			;	ld a, display_row_1 
13c3			;	ld de, hd_menu1 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_2 
13c3			;	ld de, hd_menu2 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_3 
13c3			;	ld de, hd_menu3 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a,  display_row_4 
13c3			;	ld de, hd_menu4 
13c3			;	call str_at_display 
13c3			; 
13c3			;	; display debug state 
13c3			; 
13c3			;	ld de, hd_don 
13c3			;	ld a, (os_view_disable) 
13c3			;	cp 0 
13c3			;	jr z, .distog 
13c3			;	ld de, hd_doff 
13c3			;.distog: ld a, display_row_4+17 
13c3			;	call str_at_display 
13c3			; 
13c3			;	call update_display 
13c3			; 
13c3			;	call cin_wait 
13c3			; 
13c3			; 
13c3			; 
13c3			;	cp '4' 
13c3			;	jr nz, .diagn1 
13c3			; 
13c3			;	; debug toggle 
13c3			; 
13c3			;	ld a, (os_view_disable) 
13c3			;	ld b, '*' 
13c3			;	cp 0 
13c3			;	jr z, .debtog 
13c3			;	ld b, 0 
13c3			;.debtog:	 
13c3			;	ld a,b 
13c3			;	ld (os_view_disable),a 
13c3			; 
13c3			;.diagn1: cp '0' 
13c3			;	 ret z 
13c3			; 
13c3			;;	cp '1' 
13c3			;;       jp z, matrix	 
13c3			;;   TODO keyboard matrix test 
13c3			; 
13c3			;	cp '2' 
13c3			;	jp z, .diagedit 
13c3			; 
13c3			;;	cp '6' 
13c3			;;	jp z, .menutest 
13c3			;;if ENABLE_BASIC 
13c3			;;	cp '6' 
13c3			;;	jp z, basic 
13c3			;;endif 
13c3			 ; 
13c3			;	jp .diagmenu 
13c3			; 
13c3			; 
13c3			;	ret 
13c3			 
13c3			 
13c3			.debug_tog: 
13c3 21 0d 14			ld hl, .menudebug 
13c6				 
13c6			;	ld a, (os_view_disable) 
13c6			;	cp '*' 
13c6 3a 6f ee			ld a,(debug_vector) 
13c9 fe c9			cp $C9   ; RET 
13cb 20 04			jr nz,.tdon  
13cd 3e 01			ld a, 1 
13cf 18 02			jr .tog1 
13d1 3e 00		.tdon: ld a, 0 
13d3			 
13d3			.tog1: 
13d3 cd f9 0b			call menu 
13d6 fe 00			cp 0 
13d8 c8				ret z 
13d9 fe 01			cp 1    ; disable debug 
13db 28 04			jr z, .dtog0 
13dd 3e 2a			ld a, '*' 
13df 18 05			jr .dtogset 
13e1			.dtog0:  
13e1				;ld a, 0 
13e1 cd ff 14			call bp_on 
13e4 18 dd			jr .debug_tog 
13e6			.dtogset:  
13e6				; ld (os_view_disable), a 
13e6 cd 0b 15			call bp_off 
13e9 c3 c3 13			jp .debug_tog 
13ec			 
13ec			 
13ec			hardware_diags:       
13ec			 
13ec			.diagm: 
13ec 21 ff 13			ld hl, .menuitems 
13ef 3e 00			ld a, 0 
13f1 cd f9 0b			call menu 
13f4			 
13f4 fe 00		         cp 0 
13f6 c8				 ret z 
13f7			 
13f7 fe 02			cp 2 
13f9 ca 58 14			jp z, .diagedit 
13fc			 
13fc			;	cp '6' 
13fc			;	jp z, .menutest 
13fc			;if ENABLE_BASIC 
13fc			;	cp '6' 
13fc			;	jp z, basic 
13fc			;endif 
13fc			  
13fc c3 ec 13			jp .diagm 
13ff			 
13ff				 
13ff 13 14		.menuitems:   	dw .m1 
1401 1e 14				dw .m2 
1403 25 14				dw .m3 
1405 2d 14				dw .m5 
1407 33 14				dw .m5a 
1409 3c 14				dw .m5b 
140b 00 00				dw 0 
140d			 
140d			.menudebug: 
140d 45 14				dw .m6 
140f 4e 14				dw .m7 
1411 00 00				dw 0 
1413			 
1413 .. 00		.m1:   db "Key Matrix",0 
141e .. 00		.m2:   db "Editor",0 
1425 .. 00		.m3:   db "Storage",0 
142d .. 00		.m5:   db "Sound",0 
1433 .. 00		.m5a:  db "RAM Test",0 
143c .. 00		.m5b:  db "LCD Test",0 
1445			 
1445 .. 00		.m6:   db "Debug ON",0 
144e .. 00		.m7:   db "Debug OFF",0 
1458			 
1458			; debug editor 
1458			 
1458			.diagedit: 
1458			 
1458 21 bb e2			ld hl, scratch 
145b			;	ld bc, 250 
145b			;	ldir 
145b				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
145b 3e 00			ld a, 0 
145d 77				ld (hl), a 
145e 23				inc hl 
145f 77				ld (hl), a 
1460 23				inc hl 
1461 77				ld (hl), a 
1462			 
1462 cd c8 0b		        call clear_display 
1465 cd eb 0b			call update_display 
1468				;ld a, 1 
1468				;ld (hardware_diag), a 
1468			.diloop: 
1468 3e 00			ld a, display_row_1 
146a 0e 00			ld c, 0 
146c 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
146e 1e 28			ld e, 40 
1470			 
1470 21 bb e2			ld hl, scratch	 
1473 cd 22 0e			call input_str 
1476			 
1476 3e 28			ld a, display_row_2 
1478 11 bb e2			ld de, scratch 
147b cd db 0b			call str_at_display 
147e cd eb 0b			call update_display 
1481			 
1481 c3 68 14			jp .diloop 
1484			 
1484			 
1484			; pass word in hl 
1484			; a has display location 
1484			display_word_at: 
1484 f5				push af 
1485 e5				push hl 
1486 7c				ld a,h 
1487 21 c0 e5			ld hl, os_word_scratch 
148a cd fe 0f			call hexout 
148d e1				pop hl 
148e 7d				ld a,l 
148f 21 c2 e5			ld hl, os_word_scratch+2 
1492 cd fe 0f			call hexout 
1495 21 c4 e5			ld hl, os_word_scratch+4 
1498 3e 00			ld a,0 
149a 77				ld (hl),a 
149b 11 c0 e5			ld de,os_word_scratch 
149e f1				pop af 
149f cd db 0b				call str_at_display 
14a2 c9				ret 
14a3			 
14a3			display_ptr_state: 
14a3			 
14a3				; to restore afterwards 
14a3			 
14a3 d5				push de 
14a4 c5				push bc 
14a5 e5				push hl 
14a6 f5				push af 
14a7			 
14a7				; for use in here 
14a7			 
14a7			;	push bc 
14a7			;	push de 
14a7			;	push hl 
14a7			;	push af 
14a7			 
14a7 cd c8 0b			call clear_display 
14aa			 
14aa 11 82 16			ld de, .ptrstate 
14ad 3e 00			ld a, display_row_1 
14af cd db 0b			call str_at_display 
14b2			 
14b2				; display debug step 
14b2			 
14b2			 
14b2 11 65 ee			ld de, debug_mark 
14b5 3e 26			ld a, display_row_1+display_cols-2 
14b7 cd db 0b			call str_at_display 
14ba			 
14ba				; display a 
14ba 11 8c 16			ld de, .ptrcliptr 
14bd 3e 28			ld a, display_row_2 
14bf cd db 0b			call str_at_display 
14c2			 
14c2 f1				pop af 
14c3 2a 3a ea			ld hl,(cli_ptr) 
14c6 3e 30			ld a, display_row_2+8 
14c8 cd 84 14			call display_word_at 
14cb			 
14cb			 
14cb				; display hl 
14cb			 
14cb			 
14cb 11 94 16			ld de, .ptrclioptr 
14ce 3e 32			ld a, display_row_2+10 
14d0 cd db 0b			call str_at_display 
14d3			; 
14d3			;	pop hl 
14d3 3e 35			ld a, display_row_2+13 
14d5 2a 38 ea			ld hl,(cli_origptr) 
14d8 cd 84 14			call display_word_at 
14db			; 
14db			;	 
14db			;	; display de 
14db			 
14db			;	ld de, .regstatede 
14db			;	ld a, display_row_3 
14db			;	call str_at_display 
14db			 
14db			;	pop de 
14db			;	ld h,d 
14db			;	ld l, e 
14db			;	ld a, display_row_3+3 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display bc 
14db			 
14db			;	ld de, .regstatebc 
14db			;	ld a, display_row_3+10 
14db			;	call str_at_display 
14db			 
14db			;	pop bc 
14db			;	ld h,b 
14db			;	ld l, c 
14db			;	ld a, display_row_3+13 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display dsp 
14db			 
14db			;	ld de, .regstatedsp 
14db			;	ld a, display_row_4 
14db			;	call str_at_display 
14db			 
14db				 
14db			;	ld hl,(cli_data_sp) 
14db			;	ld a, display_row_4+4 
14db			;	call display_word_at 
14db			 
14db				; display rsp 
14db			 
14db 11 c3 16			ld de, .regstatersp 
14de 3e 82			ld a, display_row_4+10 
14e0 cd db 0b			call str_at_display 
14e3			 
14e3				 
14e3 2a ec e9			ld hl,(cli_ret_sp) 
14e6 3e 86			ld a, display_row_4+14 
14e8 cd 84 14			call display_word_at 
14eb			 
14eb cd eb 0b			call update_display 
14ee			 
14ee cd 00 0b			call delay1s 
14f1 cd 00 0b			call delay1s 
14f4 cd 00 0b			call delay1s 
14f7			 
14f7			 
14f7 cd 08 1b			call next_page_prompt 
14fa			 
14fa				; restore  
14fa			 
14fa f1				pop af 
14fb e1				pop hl 
14fc c1				pop bc 
14fd d1				pop de 
14fe c9				ret 
14ff			 
14ff			; Update the break point vector so that the user can hook a new routine 
14ff			 
14ff			bp_on: 
14ff 3e c3			ld a, $c3    ; JP 
1501 32 6f ee			ld (debug_vector), a 
1504 21 11 15			ld hl, break_point_state 
1507 22 70 ee			ld (debug_vector+1), hl 
150a c9				ret 
150b			 
150b			bp_off: 
150b 3e c9			ld a, $c9    ; RET 
150d 32 6f ee			ld (debug_vector), a 
1510 c9				ret 
1511			 
1511			 
1511			break_point_state: 
1511			;	push af 
1511			; 
1511			;	; see if disabled 
1511			; 
1511			;	ld a, (os_view_disable) 
1511			;	cp '*' 
1511			;	jr nz, .bpsgo 
1511			;	pop af 
1511			;	ret 
1511			 
1511			.bpsgo: 
1511			;	pop af 
1511 f5				push af 
1512 22 9d e2			ld (os_view_hl), hl 
1515 ed 53 9b e2		ld (os_view_de), de 
1519 ed 43 99 e2		ld (os_view_bc), bc 
151d e5				push hl 
151e 6f				ld l, a 
151f 26 00			ld h, 0 
1521 22 9f e2			ld (os_view_af),hl 
1524			 
1524 21 ab ed				ld hl, display_fb0 
1527 22 c6 eb				ld (display_fb_active), hl 
152a e1				pop hl	 
152b			 
152b 3e 31			ld a, '1' 
152d fe 2a		.bps1:  cp '*' 
152f cc 0b 15			call z, bp_off 
1532			;	jr nz, .bps1b 
1532			;	ld (os_view_disable),a 
1532 fe 31		.bps1b:  cp '1' 
1534 20 14			jr nz, .bps2 
1536			 
1536				; display reg 
1536			 
1536				 
1536			 
1536 3a 9f e2			ld a, (os_view_af) 
1539 2a 9d e2			ld hl, (os_view_hl) 
153c ed 5b 9b e2		ld de, (os_view_de) 
1540 ed 4b 99 e2		ld bc, (os_view_bc) 
1544 cd de 15			call display_reg_state 
1547 c3 ca 15			jp .bpschk 
154a			 
154a fe 32		.bps2:  cp '2' 
154c 20 08			jr nz, .bps3 
154e				 
154e				; display hl 
154e 2a 9d e2			ld hl, (os_view_hl) 
1551 cd c8 16			call display_dump_at_hl 
1554			 
1554 18 74			jr .bpschk 
1556			 
1556 fe 33		.bps3:  cp '3' 
1558 20 08			jr nz, .bps4 
155a			 
155a			        ; display de 
155a 2a 9b e2			ld hl, (os_view_de) 
155d cd c8 16			call display_dump_at_hl 
1560			 
1560 18 68			jr .bpschk 
1562 fe 34		.bps4:  cp '4' 
1564 20 08			jr nz, .bps5 
1566			 
1566			        ; display bc 
1566 2a 99 e2			ld hl, (os_view_bc) 
1569 cd c8 16			call display_dump_at_hl 
156c			 
156c 18 5c			jr .bpschk 
156e fe 35		.bps5:  cp '5' 
1570 20 08		        jr nz, .bps7 
1572			 
1572				; display cur ptr 
1572 2a 3a ea			ld hl, (cli_ptr) 
1575 cd c8 16			call display_dump_at_hl 
1578			 
1578 18 50			jr .bpschk 
157a fe 36		.bps7:  cp '6' 
157c 20 08			jr nz, .bps8b 
157e				 
157e				; display cur orig ptr 
157e 2a 38 ea			ld hl, (cli_origptr) 
1581 cd c8 16			call display_dump_at_hl 
1584 18 44			jr .bpschk 
1586 fe 37		.bps8b:  cp '7' 
1588 20 08			jr nz, .bps9 
158a				 
158a				; display dsp 
158a 2a e8 e9			ld hl, (cli_data_sp) 
158d cd c8 16			call display_dump_at_hl 
1590			 
1590 18 38			jr .bpschk 
1592 fe 39		.bps9:  cp '9' 
1594 20 05			jr nz, .bps8c 
1596				 
1596				; display SP 
1596			;	ld hl, sp 
1596 cd c8 16			call display_dump_at_hl 
1599			 
1599 18 2f			jr .bpschk 
159b fe 38		.bps8c:  cp '8' 
159d 20 08			jr nz, .bps8d 
159f				 
159f				; display rsp 
159f 2a ec e9			ld hl, (cli_ret_sp) 
15a2 cd c8 16			call display_dump_at_hl 
15a5			 
15a5 18 23			jr .bpschk 
15a7 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
15a9 20 05			jr nz, .bps8 
15ab cd c2 18			call monitor 
15ae			 
15ae 18 1a			jr .bpschk 
15b0 fe 30		.bps8:  cp '0' 
15b2 20 16			jr nz, .bpschk 
15b4			 
15b4 21 0a ed				ld hl, display_fb1 
15b7 22 c6 eb				ld (display_fb_active), hl 
15ba cd eb 0b				call update_display 
15bd			 
15bd				;ld a, (os_view_af) 
15bd 2a 9d e2			ld hl, (os_view_hl) 
15c0 ed 5b 9b e2		ld de, (os_view_de) 
15c4 ed 4b 99 e2		ld bc, (os_view_bc) 
15c8 f1				pop af 
15c9 c9				ret 
15ca			 
15ca			.bpschk:   
15ca cd 00 0b			call delay1s 
15cd 3e 9f		ld a,display_row_4 + display_cols - 1 
15cf 11 06 1b		        ld de, endprg 
15d2 cd db 0b			call str_at_display 
15d5 cd eb 0b			call update_display 
15d8 cd d9 60			call cin_wait 
15db			 
15db c3 2d 15			jp .bps1 
15de			 
15de			 
15de			display_reg_state: 
15de			 
15de				; to restore afterwards 
15de			 
15de d5				push de 
15df c5				push bc 
15e0 e5				push hl 
15e1 f5				push af 
15e2			 
15e2				; for use in here 
15e2			 
15e2 c5				push bc 
15e3 d5				push de 
15e4 e5				push hl 
15e5 f5				push af 
15e6			 
15e6 cd c8 0b			call clear_display 
15e9			 
15e9 11 9e 16			ld de, .regstate 
15ec 3e 00			ld a, display_row_1 
15ee cd db 0b			call str_at_display 
15f1			 
15f1				; display debug step 
15f1			 
15f1			 
15f1 11 65 ee			ld de, debug_mark 
15f4 3e 25			ld a, display_row_1+display_cols-3 
15f6 cd db 0b			call str_at_display 
15f9			 
15f9				; display a 
15f9 11 ba 16			ld de, .regstatea 
15fc 3e 28			ld a, display_row_2 
15fe cd db 0b			call str_at_display 
1601			 
1601 e1				pop hl 
1602			;	ld h,0 
1602			;	ld l, a 
1602 3e 2b			ld a, display_row_2+3 
1604 cd 84 14			call display_word_at 
1607			 
1607			 
1607				; display hl 
1607			 
1607			 
1607 11 ae 16			ld de, .regstatehl 
160a 3e 32			ld a, display_row_2+10 
160c cd db 0b			call str_at_display 
160f			 
160f e1				pop hl 
1610 3e 35			ld a, display_row_2+13 
1612 cd 84 14			call display_word_at 
1615			 
1615				 
1615				; display de 
1615			 
1615 11 b2 16			ld de, .regstatede 
1618 3e 50			ld a, display_row_3 
161a cd db 0b			call str_at_display 
161d			 
161d e1				pop hl 
161e			;	ld h,d 
161e			;	ld l, e 
161e 3e 53			ld a, display_row_3+3 
1620 cd 84 14			call display_word_at 
1623			 
1623			 
1623				; display bc 
1623			 
1623 11 b6 16			ld de, .regstatebc 
1626 3e 5a			ld a, display_row_3+10 
1628 cd db 0b			call str_at_display 
162b			 
162b e1				pop hl 
162c			;	ld h,b 
162c			;	ld l, c 
162c 3e 5d			ld a, display_row_3+13 
162e cd 84 14			call display_word_at 
1631			 
1631			 
1631				; display dsp 
1631			 
1631 11 be 16			ld de, .regstatedsp 
1634 3e 78			ld a, display_row_4 
1636 cd db 0b			call str_at_display 
1639			 
1639				 
1639 2a e8 e9			ld hl,(cli_data_sp) 
163c 3e 7c			ld a, display_row_4+4 
163e cd 84 14			call display_word_at 
1641			 
1641				; display rsp 
1641			 
1641 11 c3 16			ld de, .regstatersp 
1644 3e 82			ld a, display_row_4+10 
1646 cd db 0b			call str_at_display 
1649			 
1649				 
1649 2a ec e9			ld hl,(cli_ret_sp) 
164c 3e 86			ld a, display_row_4+14 
164e cd 84 14			call display_word_at 
1651			 
1651 cd eb 0b			call update_display 
1654			 
1654			;	call delay1s 
1654			;	call delay1s 
1654			;	call delay1s 
1654			 
1654			 
1654			;	call next_page_prompt 
1654			 
1654				; restore  
1654			 
1654 f1				pop af 
1655 e1				pop hl 
1656 c1				pop bc 
1657 d1				pop de 
1658 c9				ret 
1659			 
1659 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
166d .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1682 .. 00		.ptrstate:	db "Ptr State",0 
168c .. 00		.ptrcliptr:     db "cli_ptr",0 
1694 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
169e .. 00		.regstate:	db "Reg State (1/0)",0 
16ae .. 00		.regstatehl:	db "HL:",0 
16b2 .. 00		.regstatede:	db "DE:",0 
16b6 .. 00		.regstatebc:	db "BC:",0 
16ba .. 00		.regstatea:	db "A :",0 
16be .. 00		.regstatedsp:	db "DSP:",0 
16c3 .. 00		.regstatersp:	db "RSP:",0 
16c8			 
16c8			display_dump_at_hl: 
16c8 e5				push hl 
16c9 d5				push de 
16ca c5				push bc 
16cb f5				push af 
16cc			 
16cc 22 de e5			ld (os_cur_ptr),hl	 
16cf cd c8 0b			call clear_display 
16d2 cd 10 1a			call dumpcont 
16d5			;	call delay1s 
16d5			;	call next_page_prompt 
16d5			 
16d5			 
16d5 f1				pop af 
16d6 c1				pop bc 
16d7 d1				pop de 
16d8 e1				pop hl 
16d9 c9				ret 
16da			 
16da			;if ENABLE_BASIC 
16da			;	include "nascombasic.asm" 
16da			;	basic: 
16da			;	include "forth/FORTH.ASM" 
16da			;endif 
16da			 
16da			; eof 
16da			 
16da			 
# End of file firmware_diags.asm
16da			  
16da			include "firmware_prompts.asm"  
16da			; Prompts  
16da			 
16da			; boot messages 
16da			 
16da .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
16ef .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
16ff			 
16ff			 
16ff			; config menus 
16ff			 
16ff			;prom_c3: db "Add Dictionary To File",0 
16ff			 
16ff			if STARTUP_V1 
16ff .. 00		prom_c2: db "Select Autoload File",0 
1714 .. 00		prom_c2a: db "Disable Autoload File", 0 
172a			endif 
172a			 
172a			if STARTUP_V2 
172a			prom_c2: db "Enable Autoload Files",0 
172a			prom_c2a: db "Disable Autoload Files", 0 
172a			 
172a			crs_s1: db "*ls-word", 0 
172a			crs_s2: db "*ed-word", 0 
172a			crs_s3: db "*Demo-Games", 0 
172a			crs_s4: db "*Utils", 0 
172a			crs_s5: db "*SPI-Util", 0 
172a			crs_s6: db "*Key-Constants", 0 
172a			crs_sound: db "*Sound-Util", 0 
172a			crs_hw: db "*Hello-World",0 
172a			 
172a			 
172a			 
172a			endif 
172a			;prom_c2b: db "Select Storage Bank",0 
172a .. 00		prom_c4: db "Settings",0 
1733 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
174e .. 00		prom_m4b:   db "Monitor",0 
1756 .. 00		prom_c1: db "Hardware Diags",0 
1765			 
1765			 
1765			if STARTUP_V2 
1765			prom_c9: db "Create Startup Files",0 
1765			endif 
1765			 
1765 .. 00		prom_notav:    db "Feature not available",0 
177b .. 00		prom_empty:    db "",0 
177c			 
177c			; eof 
177c			 
# End of file firmware_prompts.asm
177c			  
177c			  
177c			; eof  
177c			  
# End of file firmware.asm
177c			 
177c			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
177c			;if BASE_KEV  
177c			;baseram: equ 08000h 
177c			;endif 
177c			 
177c			;if BASE_SC114 
177c			;baseram:     equ    endofcode 
177c			;endif 
177c			 
177c			 
177c			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
177c			 
177c			; start system 
177c			 
177c			coldstart: 
177c				; set sp 
177c				; di/ei 
177c			 
177c f3				di 
177d 31 00 f0			ld sp, tos 
1780 cd d7 5f			call init_nmi 
1783			;	ei 
1783			 
1783				; init spinner 
1783 3e 00			ld a,0 
1785 32 c0 eb			ld (display_active), a 
1788			 
1788				; disable breakpoint by default 
1788			 
1788				;ld a,'*' 
1788			;	ld a,' ' 
1788			;	ld (os_view_disable),a 
1788			 
1788				; set break point vector as new break point on or off 
1788 cd 0b 15			call bp_off 
178b			 
178b				; init hardware 
178b			 
178b				; init keyboard and screen hardware 
178b			 
178b cd 1f 01			call hardware_init 
178e			 
178e			 
178e cd 00 0b			call delay1s 
1791 3e 58			ld a, display_row_3+8 
1793 11 03 01			ld de, buildtime 
1796 cd db 0b			call str_at_display 
1799 cd eb 0b			call update_display 
179c			 
179c cd 00 0b			call delay1s 
179f cd 00 0b			call delay1s 
17a2 cd 00 0b			call delay1s 
17a5			 
17a5				; detect if any keys are held down to enable breakpoints at start up 
17a5			 
17a5 cd e1 60			call cin  
17a8 fe 00			cp 0 
17aa 28 03			jr z, .nokeys 
17ac			 
17ac				;call hardware_diags 
17ac cd 69 13			call config 
17af			 
17af			;	ld de, .bpen 
17af			;	ld a, display_row_4 
17af			;	call str_at_display 
17af			;	call update_display 
17af			; 
17af			;	ld a,0 
17af			;	ld (os_view_disable),a 
17af			; 
17af			;.bpwait: 
17af			;	call cin 
17af			;	cp 0 
17af			;	jr z, .bpwait 
17af			;	jr .nokeys 
17af			; 
17af			; 
17af			;.bpen:  db "Break points enabled!",0 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			.nokeys: 
17af			 
17af			 
17af				 
17af			 
17af			;jp  testkey 
17af			 
17af			;call storage_get_block_0 
17af			; 
17af			;ld hl, 0 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af				 
17af			;ld hl, 10 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			;stop:	nop 
17af			;	jp stop 
17af			 
17af			 
17af			 
17af			main: 
17af cd c8 0b			call clear_display 
17b2 cd eb 0b			call update_display 
17b5			 
17b5			 
17b5			 
17b5			;	call testlcd 
17b5			 
17b5			 
17b5			 
17b5 cd 51 1f			call forth_init 
17b8			 
17b8			 
17b8			warmstart: 
17b8 cd 27 1f			call forth_warmstart 
17bb			 
17bb				; run startup word load 
17bb			        ; TODO prevent this running at warmstart after crash  
17bb			 
17bb				if STARTUP_ENABLE 
17bb			 
17bb					if STARTUP_V1 
17bb			 
17bb						if STORAGE_SE 
17bb							call forth_autoload 
17bb						endif 
17bb cd 27 5f					call forth_startup 
17be					endif 
17be			 
17be					if STARTUP_V2 
17be			 
17be						if STORAGE_SE 
17be							call forth_autoload 
17be						else 
17be							call forth_startup 
17be						endif 
17be			 
17be			 
17be					endif 
17be			 
17be				endif 
17be			 
17be			warmstart_afterauto: 
17be			 
17be				; show free memory after boot 
17be 11 5d 18			ld de, freeram 
17c1 3e 00			ld a, display_row_1 
17c3 cd db 0b			call str_at_display 
17c6			 
17c6				; get current heap start after loading any uwords 
17c6			 
17c6				;ld de, (os_last_new_uword) 
17c6				;ex de, hl 
17c6			 
17c6			; Or use heap_size word???? 
17c6				;ld hl, heap_end 
17c6				;ld hl, heap_size 
17c6				;ld de, topusermem 
17c6				;ld de, heap_start 
17c6 ed 5b 04 61			ld de, (free_list )      
17ca 21 96 e2				ld hl, heap_end 
17cd ed 52			sbc hl, de 
17cf				;push hl 
17cf				;ld a,h	         	 
17cf				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
17cf				;call hexout 
17cf			   	;pop hl 
17cf			; 
17cf			;	ld a,l 
17cf			;	ld hl, os_word_scratch+2 
17cf			;	call hexout 
17cf			;	ld hl, os_word_scratch+4 
17cf			;	ld a, 0 
17cf			;	ld (hl),a 
17cf eb				ex de, hl 
17d0 21 c0 e5			ld hl, os_word_scratch 
17d3 cd 0a 11			call uitoa_16 
17d6			 
17d6			 
17d6 11 c0 e5			ld de, os_word_scratch 
17d9 3e 0d			ld a, display_row_1 + 13 
17db cd db 0b			call str_at_display 
17de cd eb 0b			call update_display 
17e1			 
17e1			 
17e1				;call demo 
17e1			 
17e1			 
17e1				; init scratch input area for cli commands 
17e1			 
17e1 21 e2 e5			ld hl, os_cli_cmd 
17e4 3e 00			ld a,0 
17e6 77				ld (hl),a 
17e7 23				inc hl 
17e8 77				ld (hl),a 
17e9			 
17e9 3e 00			ld a,0 
17eb 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
17ee			 
17ee 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
17f1 32 df e5			ld (os_cur_ptr+1),a	 
17f4			 
17f4 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
17f7 32 c1 e5			ld (os_word_scratch+1),a	 
17fa				 
17fa			 
17fa				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
17fa 21 e2 e5			ld hl, os_cli_cmd 
17fd			 
17fd 3e 00			ld a, 0		 ; init cli input 
17ff 77				ld (hl), a 
1800 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1802			cli: 
1802				; show cli prompt 
1802				;push af 
1802				;ld a, 0 
1802				;ld de, prompt 
1802				;call str_at_display 
1802			 
1802				;call update_display 
1802				;pop af 
1802				;inc a 
1802				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1802			 
1802			.lastrecall: 
1802			 
1802 0e 00			ld c, 0 
1804 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1806 1e 28			ld e, 40 
1808			 
1808 21 e2 e5			ld hl, os_cli_cmd 
180b			 
180b				STACKFRAME OFF $fefe $9f9f 
180b				if DEBUG_STACK_IMB 
180b					if OFF 
180b						exx 
180b						ld de, $fefe 
180b						ld a, d 
180b						ld hl, curframe 
180b						call hexout 
180b						ld a, e 
180b						ld hl, curframe+2 
180b						call hexout 
180b						ld hl, $fefe 
180b						push hl 
180b						ld hl, $9f9f 
180b						push hl 
180b						exx 
180b					endif 
180b				endif 
180b			endm 
# End of macro STACKFRAME
180b			 
180b cd 22 0e			call input_str 
180e			 
180e				STACKFRAMECHK OFF $fefe $9f9f 
180e				if DEBUG_STACK_IMB 
180e					if OFF 
180e						exx 
180e						ld hl, $9f9f 
180e						pop de   ; $9f9f 
180e						call cmp16 
180e						jr nz, .spnosame 
180e						ld hl, $fefe 
180e						pop de   ; $fefe 
180e						call cmp16 
180e						jr z, .spfrsame 
180e						.spnosame: call showsperror 
180e						.spfrsame: nop 
180e						exx 
180e					endif 
180e				endif 
180e			endm 
# End of macro STACKFRAMECHK
180e			 
180e			 
180e				; check to see if last line recall has been requested 
180e			 
180e			if EDIT_V2 
180e fe 05			cp KEY_UP 
1810 20 0f			jr nz, .noexecline 
1812			 
1812 11 e2 e5			ld de, os_cli_cmd 
1815 21 e1 e6			ld hl, os_last_cmd 
1818 01 ff 00			ld bc, 255 
181b ed b0			ldir 
181d 3e 00			ld a, 0 
181f 18 e1			jr .lastrecall 
1821			endif 
1821			 
1821			.noexecline: 
1821				; no so exec the line		 
1821			 
1821				; copy input to last command 
1821			 
1821 21 e2 e5			ld hl, os_cli_cmd 
1824 11 e1 e6			ld de, os_last_cmd 
1827 01 ff 00			ld bc, 255 
182a ed b0			ldir 
182c			 
182c				; wipe current buffer 
182c			 
182c			;	ld a, 0 
182c			;	ld hl, os_cli_cmd 
182c			;	ld de, os_cli_cmd+1 
182c			;	ld bc, 254 
182c			;	ldir 
182c				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
182c			;	call strcpy 
182c			;	ld a, 0 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			 
182c				; switch frame buffer to program  
182c			 
182c 21 0a ed				ld hl, display_fb1 
182f 22 c6 eb				ld (display_fb_active), hl 
1832			 
1832			;	nop 
1832				STACKFRAME ON $fbfe $8f9f 
1832				if DEBUG_STACK_IMB 
1832					if ON 
1832						exx 
1832						ld de, $fbfe 
1832						ld a, d 
1832						ld hl, curframe 
1832						call hexout 
1832						ld a, e 
1832						ld hl, curframe+2 
1832						call hexout 
1832						ld hl, $fbfe 
1832						push hl 
1832						ld hl, $8f9f 
1832						push hl 
1832						exx 
1832					endif 
1832				endif 
1832			endm 
# End of macro STACKFRAME
1832				; first time into the parser so pass over the current scratch pad 
1832 21 e2 e5			ld hl,os_cli_cmd 
1835				; tokenise the entered statement(s) in HL 
1835 cd cb 1f			call forthparse 
1838			        ; exec forth statements in top of return stack 
1838 cd 07 20			call forthexec 
183b				;call forthexec_cleanup 
183b			;	call parsenext 
183b			 
183b				STACKFRAMECHK ON $fbfe $8f9f 
183b				if DEBUG_STACK_IMB 
183b					if ON 
183b						exx 
183b						ld hl, $8f9f 
183b						pop de   ; $8f9f 
183b						call cmp16 
183b						jr nz, .spnosame 
183b						ld hl, $fbfe 
183b						pop de   ; $fbfe 
183b						call cmp16 
183b						jr z, .spfrsame 
183b						.spnosame: call showsperror 
183b						.spfrsame: nop 
183b						exx 
183b					endif 
183b				endif 
183b			endm 
# End of macro STACKFRAMECHK
183b				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
183b			 
183b 3e 78			ld a, display_row_4 
183d 11 6e 18			ld de, endprog 
1840			 
1840 cd eb 0b			call update_display		 
1843			 
1843 cd 08 1b			call next_page_prompt 
1846			 
1846				; switch frame buffer to cli 
1846			 
1846 21 ab ed				ld hl, display_fb0 
1849 22 c6 eb				ld (display_fb_active), hl 
184c			 
184c			 
184c cd c8 0b		        call clear_display 
184f cd eb 0b			call update_display		 
1852			 
1852 21 e2 e5			ld hl, os_cli_cmd 
1855			 
1855 3e 00			ld a, 0		 ; init cli input 
1857 77				ld (hl), a 
1858			 
1858				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1858			 
1858				; now on last line 
1858			 
1858				; TODO scroll screen up 
1858			 
1858				; TODO instead just clear screen and place at top of screen 
1858			 
1858			;	ld a, 0 
1858			;	ld (f_cursor_ptr),a 
1858			 
1858				;call clear_display 
1858				;call update_display 
1858			 
1858				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1858 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
185a c3 02 18			jp cli 
185d			 
185d .. 00		freeram: db "Free bytes: ",0 
186a ..			asc: db "1A2F" 
186e .. 00		endprog: db "End prog...",0 
187a			 
187a			testenter2:   
187a 21 ed e2			ld hl,scratch+50 
187d 22 de e5			ld (os_cur_ptr),hl 
1880 c3 02 18			jp cli 
1883			 
1883			testenter:  
1883			 
1883 21 6a 18			ld hl,asc 
1886			;	ld a,(hl) 
1886			;	call nibble2val 
1886 cd 54 10			call get_byte 
1889			 
1889			 
1889			;	ld a,(hl) 
1889			;	call atohex 
1889			 
1889			;	call fourehexhl 
1889 32 ed e2			ld (scratch+50),a 
188c			 
188c			 
188c			 
188c 21 6c 18			ld hl,asc+2 
188f			;	ld a, (hl) 
188f			;	call nibble2val 
188f cd 54 10			call get_byte 
1892			 
1892			;	call fourehexhl 
1892 32 ef e2			ld (scratch+52),a 
1895				 
1895 21 ed e2			ld hl,scratch+50 
1898 22 de e5			ld (os_cur_ptr),hl 
189b c3 02 18			jp cli 
189e			 
189e			enter:	 
189e 3a bf e2			ld a,(scratch+4) 
18a1 fe 00			cp 0 
18a3 28 0c			jr z, .entercont 
18a5				; no, not a null term line so has an address to work out.... 
18a5			 
18a5 21 bd e2			ld hl,scratch+2 
18a8 cd b4 10			call get_word_hl 
18ab			 
18ab 22 de e5			ld (os_cur_ptr),hl	 
18ae c3 02 18			jp cli 
18b1			 
18b1			 
18b1			.entercont:  
18b1			 
18b1 21 bd e2			ld hl, scratch+2 
18b4 cd 54 10			call get_byte 
18b7			 
18b7 2a de e5		   	ld hl,(os_cur_ptr) 
18ba 77					ld (hl),a 
18bb 23					inc hl 
18bc 22 de e5				ld (os_cur_ptr),hl 
18bf				 
18bf			; get byte  
18bf			 
18bf			 
18bf c3 02 18			jp cli 
18c2			 
18c2			 
18c2			; basic monitor support 
18c2			 
18c2			monitor: 
18c2				;  
18c2 cd c8 0b			call clear_display 
18c5 3e 00			ld a, 0 
18c7 11 1b 19			ld de, .monprompt 
18ca cd db 0b			call str_at_display 
18cd cd eb 0b			call update_display 
18d0			 
18d0				; get a monitor command 
18d0			 
18d0 0e 00			ld c, 0     ; entry at top left 
18d2 16 64			ld d, 100   ; max buffer size 
18d4 1e 0f			ld e, 15    ; input scroll area 
18d6 3e 00			ld a, 0     ; init string 
18d8 21 b9 e4			ld hl, os_input 
18db 77				ld (hl), a 
18dc 23				inc hl 
18dd 77				ld (hl), a 
18de 21 b9 e4			ld hl, os_input 
18e1 3e 01			ld a, 1     ; init string 
18e3 cd 22 0e			call input_str 
18e6			 
18e6 cd c8 0b		        call clear_display 
18e9 cd eb 0b			call update_display		 
18ec			 
18ec 3a b9 e4			ld a, (os_input) 
18ef cd 52 11			call toUpper 
18f2 fe 48		        cp 'H' 
18f4 ca 8f 19		        jp z, .monhelp 
18f7 fe 44			cp 'D'		; dump 
18f9 ca c2 19			jp z, .mondump	 
18fc fe 43			cp 'C'		; dump 
18fe ca dc 19			jp z, .moncdump	 
1901 fe 4d			cp 'M'		; dump 
1903 ca 1d 19			jp z, .moneditstart 
1906 fe 55			cp 'U'		; dump 
1908 ca 29 19			jp z, .monedit	 
190b fe 47			cp 'G'		; dump 
190d ca b8 19			jp z, .monjump 
1910 fe 42			cp 'B'		; forth breakpoint 
1912 cc 11 15			call z, break_point_state 
1915 fe 51			cp 'Q'		; dump 
1917 c8				ret z	 
1918			 
1918			 
1918				; TODO "S" to access symbol by name and not need the address 
1918				; TODO "F" to find a string in memory 
1918			 
1918 c3 c2 18			jp monitor 
191b			 
191b .. 00		.monprompt: db ">", 0 
191d			 
191d			.moneditstart: 
191d				; get starting address 
191d			 
191d 21 bb e4			ld hl,os_input+2 
1920 cd b4 10			call get_word_hl 
1923			 
1923 22 de e5			ld (os_cur_ptr),hl	 
1926			 
1926 c3 c2 18			jp monitor 
1929			 
1929			.monedit: 
1929				; get byte to load 
1929			 
1929 21 bb e4			ld hl,os_input+2 
192c cd 54 10			call get_byte 
192f			 
192f				; get address to update 
192f 2a de e5			ld hl, (os_cur_ptr) 
1932			 
1932				; update byte 
1932			 
1932 77				ld (hl), a 
1933			 
1933				; move to next address and save it 
1933			 
1933 23				inc hl 
1934 22 de e5			ld (os_cur_ptr),hl	 
1937			 
1937 c3 c2 18			jp monitor 
193a			 
193a			 
193a .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
194e .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
196a .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1988 .. 00		.monhelptext4:  db "Q-Quit",0 
198f			        
198f			.monhelp: 
198f 3e 00			ld a, display_row_1 
1991 11 3a 19		        ld de, .monhelptext1 
1994			 
1994 cd db 0b			call str_at_display 
1997 3e 28			ld a, display_row_2 
1999 11 4e 19		        ld de, .monhelptext2 
199c					 
199c cd db 0b			call str_at_display 
199f 3e 50			ld a, display_row_3 
19a1 11 6a 19		        ld de, .monhelptext3 
19a4					 
19a4 cd db 0b			call str_at_display 
19a7 3e 78			ld a, display_row_4 
19a9 11 88 19		        ld de, .monhelptext4 
19ac cd db 0b			call str_at_display 
19af			 
19af cd eb 0b			call update_display		 
19b2			 
19b2 cd 08 1b			call next_page_prompt 
19b5 c3 c2 18			jp monitor 
19b8			 
19b8			.monjump:    
19b8 21 bb e4			ld hl,os_input+2 
19bb cd b4 10			call get_word_hl 
19be			 
19be e9				jp (hl) 
19bf c3 c2 18			jp monitor 
19c2			 
19c2			.mondump:    
19c2 21 bb e4			ld hl,os_input+2 
19c5 cd b4 10			call get_word_hl 
19c8			 
19c8 22 de e5			ld (os_cur_ptr),hl	 
19cb cd 10 1a			call dumpcont 
19ce 3e 78			ld a, display_row_4 
19d0 11 6e 18			ld de, endprog 
19d3			 
19d3 cd eb 0b			call update_display		 
19d6			 
19d6 cd 08 1b			call next_page_prompt 
19d9 c3 c2 18			jp monitor 
19dc			.moncdump: 
19dc cd 10 1a			call dumpcont 
19df 3e 78			ld a, display_row_4 
19e1 11 6e 18			ld de, endprog 
19e4			 
19e4 cd eb 0b			call update_display		 
19e7			 
19e7 cd 08 1b			call next_page_prompt 
19ea c3 c2 18			jp monitor 
19ed			 
19ed			 
19ed			; TODO symbol access  
19ed			 
19ed			.symbols:     ;; A list of symbols that can be called up  
19ed ab ed			dw display_fb0 
19ef .. 00			db "fb0",0  
19f3 74 ea		     	dw store_page 
19f5 .. 00			db "store_page",0 
1a00			 
1a00			 
1a00			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a00			 
1a00 3a bc e2			ld a,(scratch+1) 
1a03 fe 00			cp 0 
1a05 28 09			jr z, dumpcont 
1a07			 
1a07				; no, not a null term line so has an address to work out.... 
1a07			 
1a07 21 bd e2			ld hl,scratch+2 
1a0a cd b4 10			call get_word_hl 
1a0d			 
1a0d 22 de e5			ld (os_cur_ptr),hl	 
1a10			 
1a10			 
1a10			 
1a10			dumpcont: 
1a10			 
1a10				; dump bytes at ptr 
1a10			 
1a10			 
1a10 3e 00			ld a, display_row_1 
1a12 2a c6 eb			ld hl, (display_fb_active) 
1a15 cd f5 0d			call addatohl 
1a18 cd 40 1a			call .dumpbyterow 
1a1b			 
1a1b 3e 28			ld a, display_row_2 
1a1d 2a c6 eb			ld hl, (display_fb_active) 
1a20 cd f5 0d			call addatohl 
1a23 cd 40 1a			call .dumpbyterow 
1a26			 
1a26			 
1a26 3e 50			ld a, display_row_3 
1a28 2a c6 eb			ld hl, (display_fb_active) 
1a2b cd f5 0d			call addatohl 
1a2e cd 40 1a			call .dumpbyterow 
1a31			 
1a31 3e 78			ld a, display_row_4 
1a33 2a c6 eb			ld hl, (display_fb_active) 
1a36 cd f5 0d			call addatohl 
1a39 cd 40 1a			call .dumpbyterow 
1a3c			 
1a3c cd eb 0b			call update_display 
1a3f			;		jp cli 
1a3f c9				ret 
1a40			 
1a40			.dumpbyterow: 
1a40			 
1a40				;push af 
1a40			 
1a40 e5				push hl 
1a41			 
1a41				; calc where to poke the ascii 
1a41			if display_cols == 20 
1a41				ld a, 16 
1a41			else 
1a41 3e 1f			ld a, 31 
1a43			endif 
1a43			 
1a43 cd f5 0d			call addatohl 
1a46 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
1a49			 
1a49			 
1a49			; display decoding address 
1a49 2a de e5		   	ld hl,(os_cur_ptr) 
1a4c			 
1a4c 7c				ld a,h 
1a4d e1				pop hl 
1a4e e5				push hl 
1a4f			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1a4f cd fe 0f			call hexout 
1a52 2a de e5		   	ld hl,(os_cur_ptr) 
1a55			 
1a55 7d				ld a,l 
1a56 e1				pop hl 
1a57 23				inc hl 
1a58 23				inc hl 
1a59 e5				push hl 
1a5a			;	ld hl, os_word_scratch+2 
1a5a cd fe 0f			call hexout 
1a5d e1				pop hl 
1a5e 23				inc hl 
1a5f 23				inc hl 
1a60				;ld hl, os_word_scratch+4 
1a60 3e 3a			ld a, ':' 
1a62 77				ld (hl),a 
1a63 23				inc hl 
1a64				;ld a, 0 
1a64				;ld (hl),a 
1a64				;ld de, os_word_scratch 
1a64				;pop af 
1a64				;push af 
1a64			;		ld a, display_row_2 
1a64			;		call str_at_display 
1a64			;		call update_display 
1a64			 
1a64			 
1a64			;pop af 
1a64			;	add 5 
1a64			 
1a64			if display_cols == 20 
1a64				ld b, 4 
1a64			else 
1a64 06 08			ld b, 8 
1a66			endif	 
1a66			 
1a66			.dumpbyte: 
1a66 c5				push bc 
1a67 e5				push hl 
1a68			 
1a68			 
1a68 2a de e5		   	ld hl,(os_cur_ptr) 
1a6b 7e					ld a,(hl) 
1a6c			 
1a6c					; poke the ascii to display 
1a6c 2a c0 e5				ld hl,(os_word_scratch) 
1a6f 77					ld (hl),a 
1a70 23					inc hl 
1a71 22 c0 e5				ld (os_word_scratch),hl 
1a74			 
1a74					 
1a74			 
1a74			 
1a74 e1					pop hl 
1a75 e5					push hl 
1a76			 
1a76 cd fe 0f				call hexout 
1a79			 
1a79					 
1a79 2a de e5		   	ld hl,(os_cur_ptr) 
1a7c 23				inc hl 
1a7d 22 de e5		   	ld (os_cur_ptr),hl 
1a80			 
1a80 e1					pop hl 
1a81 23					inc hl 
1a82 23					inc hl 
1a83 23					inc hl 
1a84			 
1a84			 
1a84			 
1a84					;ld a,0 
1a84					;ld (os_word_scratch+2),a 
1a84					;pop af 
1a84					;push af 
1a84			 
1a84					;ld de, os_word_scratch 
1a84					;call str_at_display 
1a84			;		call update_display 
1a84			;		pop af 
1a84 c1					pop bc 
1a85 c6 03				add 3 
1a87 10 dd			djnz .dumpbyte 
1a89			 
1a89				 
1a89			 
1a89 c9				ret 
1a8a			 
1a8a			jump:	 
1a8a			 
1a8a 21 bd e2			ld hl,scratch+2 
1a8d cd b4 10			call get_word_hl 
1a90				;ld hl,(scratch+2) 
1a90				;call fourehexhl 
1a90			 
1a90 22 de e5			ld (os_cur_ptr),hl	 
1a93			 
1a93 e9				jp (hl) 
1a94			 
1a94			 
1a94			 
1a94			; TODO implement a basic monitor mode to start with 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			; testing and demo code during development 
1a94			 
1a94			 
1a94 .. 00		str1: db "Enter some text...",0 
1aa7 .. 00		clear: db "                    ",0 
1abc			 
1abc			demo: 
1abc			 
1abc			 
1abc			 
1abc			;	call update_display 
1abc			 
1abc				; init scratch input area for testing 
1abc 21 bb e2			ld hl, scratch	 
1abf 3e 00			ld a,0 
1ac1 77				ld (hl),a 
1ac2			 
1ac2			 
1ac2 3e 28		            LD   A, display_row_2 
1ac4			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ac4 11 94 1a		            LD   DE, str1 
1ac7 cd db 0b			call str_at_display 
1aca			 
1aca			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aca			cloop:	 
1aca 3e 50		            LD   A, display_row_3 
1acc			;            CALL fLCD_Pos       ;Position cursor to location in A 
1acc 11 a7 1a		            LD   DE, clear 
1acf			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1acf cd db 0b				call str_at_display 
1ad2 3e 78			ld a, display_row_4 
1ad4 11 04 1b			ld de, prompt 
1ad7			 
1ad7 cd db 0b				call str_at_display 
1ada cd eb 0b			call update_display 
1add			 
1add 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1adf 16 0a			ld d, 10 
1ae1 21 bb e2			ld hl, scratch	 
1ae4 cd 22 0e			call input_str 
1ae7			 
1ae7			;	call clear_display 
1ae7			;'	call update_display 
1ae7			 
1ae7 3e 00		            LD   A, display_row_1 
1ae9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ae9 11 a7 1a		            LD   DE, clear 
1aec cd db 0b				call str_at_display 
1aef			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aef 3e 00		            LD   A, display_row_1 
1af1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1af1 11 bb e2		            LD   DE, scratch 
1af4			;            CALL fLCD_Str       ;Display string pointed to by DE 
1af4 cd db 0b				call str_at_display 
1af7 cd eb 0b			call update_display 
1afa			 
1afa 3e 00				ld a,0 
1afc 21 bb e2			ld hl, scratch 
1aff 77				ld (hl),a 
1b00			 
1b00 00				nop 
1b01 c3 ca 1a			jp cloop 
1b04			 
1b04			 
1b04			 
1b04			; OS Prompt 
1b04			 
1b04 .. 00		prompt: db ">",0 
1b06 .. 00		endprg: db "?",0 
1b08			 
1b08			 
1b08			; handy next page prompt 
1b08			next_page_prompt: 
1b08 e5				push hl 
1b09 d5				push de 
1b0a f5				push af 
1b0b c5				push bc 
1b0c			 
1b0c 3e 9f			ld a,display_row_4 + display_cols - 1 
1b0e 11 06 1b		        ld de, endprg 
1b11 cd db 0b			call str_at_display 
1b14 cd eb 0b			call update_display 
1b17 cd d9 60			call cin_wait 
1b1a c1				pop bc 
1b1b f1				pop af 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e			 
1b1e			 
1b1e c9				ret 
1b1f			 
1b1f			 
1b1f			; forth parser 
1b1f			 
1b1f			; My forth kernel 
1b1f			include "forth_kernel.asm" 
1b1f			; 
1b1f			; kernel to the forth OS 
1b1f			 
1b1f			DS_TYPE_STR: equ 1     ; string type 
1b1f			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1b1f			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1b1f			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1b1f			 
1b1f			FORTH_PARSEV1: equ 0 
1b1f			FORTH_PARSEV2: equ 0 
1b1f			FORTH_PARSEV3: equ 0 
1b1f			FORTH_PARSEV4: equ 0 
1b1f			FORTH_PARSEV5: equ 0 
1b1f			FORTH_PARSEV6: equ 1 
1b1f			 
1b1f			;if FORTH_PARSEV5 
1b1f			;	FORTH_END_BUFFER: equ 0 
1b1f			;else 
1b1f			FORTH_END_BUFFER: equ 127 
1b1f			;endif 
1b1f			 
1b1f			FORTH_TRUE: equ 1 
1b1f			FORTH_FALSE: equ 0 
1b1f			 
1b1f			if FORTH_PARSEV4 
1b1f			include "forth_stackops.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV5 
1b1f			include "forth_stackopsv5.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV6 
1b1f			include "forth_stackopsv5.asm" 
1b1f			 
1b1f			; Stack operations for v5 parser on wards 
1b1f			; * DATA stack 
1b1f			; * LOOP stack 
1b1f			; * RETURN stack 
1b1f			 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_DSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_data_sp) 
1b1f				ld de, cli_data_stack 
1b1f				call cmp16 
1b1f				jp c, fault_dsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_RSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_ret_sp) 
1b1f				ld de, cli_ret_stack 
1b1f				call cmp16 
1b1f				jp c, fault_rsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_CHK_LOOP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_loop_sp) 
1b1f				ld de, cli_loop_stack 
1b1f				call cmp16 
1b1f				jp c, fault_loop_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTSTR: macro 
1b1f				; TOSO might need more for checks when used 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_STR 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTNUM: macro 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_INUM 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			; increase data stack pointer and save hl to it 
1b1f				 
1b1f			FORTH_DSP_NEXT: macro 
1b1f				call macro_forth_dsp_next 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			macro_forth_dsp_next: 
1b1f				if DEBUG_FORTH_STACK_GUARD 
1b1f cd ff 5c				call check_stacks 
1b22				endif 
1b22 e5				push hl 
1b23 d5				push de 
1b24 eb				ex de,hl 
1b25 2a e8 e9			ld hl,(cli_data_sp) 
1b28 23				inc hl 
1b29 23				inc hl 
1b2a			 
1b2a			; PARSEV5 
1b2a 23				inc hl 
1b2b 22 e8 e9			ld (cli_data_sp),hl 
1b2e 73				ld (hl), e 
1b2f 23				inc hl 
1b30 72				ld (hl), d 
1b31 d1				pop de 
1b32 e1				pop hl 
1b33				if DEBUG_FORTH_STACK_GUARD 
1b33 cd ff 5c				call check_stacks 
1b36				endif 
1b36 c9				ret 
1b37			 
1b37			 
1b37			; increase ret stack pointer and save hl to it 
1b37				 
1b37			FORTH_RSP_NEXT: macro 
1b37				call macro_forth_rsp_next 
1b37				endm 
1b37			 
1b37			macro_forth_rsp_next: 
1b37				if DEBUG_FORTH_STACK_GUARD 
1b37 cd ff 5c				call check_stacks 
1b3a				endif 
1b3a e5				push hl 
1b3b d5				push de 
1b3c eb				ex de,hl 
1b3d 2a ec e9			ld hl,(cli_ret_sp) 
1b40 23				inc hl 
1b41 23				inc hl 
1b42 22 ec e9			ld (cli_ret_sp),hl 
1b45 73				ld (hl), e 
1b46 23				inc hl 
1b47 72				ld (hl), d 
1b48 d1				pop de 
1b49 e1				pop hl 
1b4a				if DEBUG_FORTH_STACK_GUARD 
1b4a cd ff 5c				call check_stacks 
1b4d				endif 
1b4d c9				ret 
1b4e			 
1b4e			; get current ret stack pointer and save to hl  
1b4e				 
1b4e			FORTH_RSP_TOS: macro 
1b4e				call macro_forth_rsp_tos 
1b4e				endm 
1b4e			 
1b4e			macro_forth_rsp_tos: 
1b4e				;push de 
1b4e 2a ec e9			ld hl,(cli_ret_sp) 
1b51 cd 89 1b			call loadhlptrtohl 
1b54				;ld e, (hl) 
1b54				;inc hl 
1b54				;ld d, (hl) 
1b54				;ex de, hl 
1b54					if DEBUG_FORTH_WORDS 
1b54			;			DMARK "RST" 
1b54						CALLMONITOR 
1b54 cd 6f ee			call debug_vector  
1b57				endm  
# End of macro CALLMONITOR
1b57					endif 
1b57				;pop de 
1b57 c9				ret 
1b58			 
1b58			; pop ret stack pointer 
1b58				 
1b58			FORTH_RSP_POP: macro 
1b58				call macro_forth_rsp_pop 
1b58				endm 
1b58			 
1b58			 
1b58			macro_forth_rsp_pop: 
1b58				if DEBUG_FORTH_STACK_GUARD 
1b58			;		DMARK "RPP" 
1b58 cd ff 5c				call check_stacks 
1b5b					FORTH_CHK_RSP_UNDER 
1b5b e5				push hl 
1b5c d5				push de 
1b5d 2a ec e9			ld hl,(cli_ret_sp) 
1b60 11 a6 e9			ld de, cli_ret_stack 
1b63 cd 13 0e			call cmp16 
1b66 da 16 5e			jp c, fault_rsp_under 
1b69 d1				pop de 
1b6a e1				pop hl 
1b6b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b6b				endif 
1b6b e5				push hl 
1b6c 2a ec e9			ld hl,(cli_ret_sp) 
1b6f			 
1b6f			 
1b6f				if FORTH_ENABLE_FREE 
1b6f			 
1b6f					; get pointer 
1b6f			 
1b6f					push de 
1b6f					push hl 
1b6f			 
1b6f					ld e, (hl) 
1b6f					inc hl 
1b6f					ld d, (hl) 
1b6f			 
1b6f					ex de, hl 
1b6f					call free 
1b6f			 
1b6f					pop hl 
1b6f					pop de 
1b6f			 
1b6f			 
1b6f				endif 
1b6f			 
1b6f			 
1b6f 2b				dec hl 
1b70 2b				dec hl 
1b71 22 ec e9			ld (cli_ret_sp), hl 
1b74				; do stack underflow checks 
1b74 e1				pop hl 
1b75				if DEBUG_FORTH_STACK_GUARD 
1b75 cd ff 5c				call check_stacks 
1b78					FORTH_CHK_RSP_UNDER 
1b78 e5				push hl 
1b79 d5				push de 
1b7a 2a ec e9			ld hl,(cli_ret_sp) 
1b7d 11 a6 e9			ld de, cli_ret_stack 
1b80 cd 13 0e			call cmp16 
1b83 da 16 5e			jp c, fault_rsp_under 
1b86 d1				pop de 
1b87 e1				pop hl 
1b88				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b88				endif 
1b88 c9				ret 
1b89			 
1b89			 
1b89			 
1b89			; routine to load word pointed to by hl into hl 
1b89			 
1b89			loadhlptrtohl: 
1b89			 
1b89 d5				push de 
1b8a 5e				ld e, (hl) 
1b8b 23				inc hl 
1b8c 56				ld d, (hl) 
1b8d eb				ex de, hl 
1b8e d1				pop de 
1b8f			 
1b8f c9				ret 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			; push a number held in HL onto the data stack 
1b90			; entry point for pushing a value when already in hl used in function above 
1b90			 
1b90			forth_push_numhl: 
1b90			 
1b90 e5				push hl    ; save value to push 
1b91			 
1b91			if DEBUG_FORTH_PUSH 
1b91				; see if disabled 
1b91			 
1b91			 
1b91 f5				push af 
1b92 3a 6f ee			ld a,(debug_vector) 
1b95 fe c9			cp $c9   ; ret 
1b97			;	ld a, (os_view_disable) 
1b97			;	cp '*' 
1b97 28 34			jr z, .pskip2 
1b99 e5				push hl 
1b9a e5			push hl 
1b9b cd c8 0b			call clear_display 
1b9e e1			pop hl 
1b9f 7c				ld a,h 
1ba0 21 c0 e5			ld hl, os_word_scratch 
1ba3 cd fe 0f			call hexout 
1ba6 e1				pop hl 
1ba7 7d				ld a,l 
1ba8 21 c2 e5			ld hl, os_word_scratch+2 
1bab cd fe 0f			call hexout 
1bae			 
1bae 21 c4 e5			ld hl, os_word_scratch+4 
1bb1 3e 00			ld a,0 
1bb3 77				ld (hl),a 
1bb4 11 c0 e5			ld de,os_word_scratch 
1bb7 3e 28				ld a, display_row_2 
1bb9 cd db 0b				call str_at_display 
1bbc 11 fa 4e			ld de, .push_num 
1bbf 3e 00			ld a, display_row_1 
1bc1			 
1bc1 cd db 0b				call str_at_display 
1bc4			 
1bc4			 
1bc4 cd eb 0b			call update_display 
1bc7 cd 00 0b			call delay1s 
1bca cd 00 0b			call delay1s 
1bcd			.pskip2:  
1bcd			 
1bcd f1				pop af 
1bce			endif	 
1bce			 
1bce			 
1bce				FORTH_DSP_NEXT 
1bce cd 1f 1b			call macro_forth_dsp_next 
1bd1				endm 
# End of macro FORTH_DSP_NEXT
1bd1			 
1bd1 2a e8 e9			ld hl, (cli_data_sp) 
1bd4			 
1bd4				; save item type 
1bd4 3e 02			ld a,  DS_TYPE_INUM 
1bd6 77				ld (hl), a 
1bd7 23				inc hl 
1bd8			 
1bd8				; get word off stack 
1bd8 d1				pop de 
1bd9 7b				ld a,e 
1bda 77				ld (hl), a 
1bdb 23				inc hl 
1bdc 7a				ld a,d 
1bdd 77				ld (hl), a 
1bde			 
1bde			if DEBUG_FORTH_PUSH 
1bde 2b				dec hl 
1bdf 2b				dec hl 
1be0 2b				dec hl 
1be1						DMARK "PH5" 
1be1 f5				push af  
1be2 3a f6 1b			ld a, (.dmark)  
1be5 32 65 ee			ld (debug_mark),a  
1be8 3a f7 1b			ld a, (.dmark+1)  
1beb 32 66 ee			ld (debug_mark+1),a  
1bee 3a f8 1b			ld a, (.dmark+2)  
1bf1 32 67 ee			ld (debug_mark+2),a  
1bf4 18 03			jr .pastdmark  
1bf6 ..			.dmark: db "PH5"  
1bf9 f1			.pastdmark: pop af  
1bfa			endm  
# End of macro DMARK
1bfa				CALLMONITOR 
1bfa cd 6f ee			call debug_vector  
1bfd				endm  
# End of macro CALLMONITOR
1bfd			endif	 
1bfd			 
1bfd c9				ret 
1bfe			 
1bfe			 
1bfe			; Push a string to stack pointed to by hl 
1bfe			 
1bfe			forth_push_str: 
1bfe			 
1bfe			if DEBUG_FORTH_PUSH 
1bfe						DMARK "PSQ" 
1bfe f5				push af  
1bff 3a 13 1c			ld a, (.dmark)  
1c02 32 65 ee			ld (debug_mark),a  
1c05 3a 14 1c			ld a, (.dmark+1)  
1c08 32 66 ee			ld (debug_mark+1),a  
1c0b 3a 15 1c			ld a, (.dmark+2)  
1c0e 32 67 ee			ld (debug_mark+2),a  
1c11 18 03			jr .pastdmark  
1c13 ..			.dmark: db "PSQ"  
1c16 f1			.pastdmark: pop af  
1c17			endm  
# End of macro DMARK
1c17				CALLMONITOR 
1c17 cd 6f ee			call debug_vector  
1c1a				endm  
# End of macro CALLMONITOR
1c1a			endif	 
1c1a			 
1c1a			 
1c1a			    
1c1a e5				push hl 
1c1b e5				push hl 
1c1c			 
1c1c			;	ld a, 0   ; find end of string 
1c1c cd 5b 11			call strlenz 
1c1f			if DEBUG_FORTH_PUSH 
1c1f						DMARK "PQ2" 
1c1f f5				push af  
1c20 3a 34 1c			ld a, (.dmark)  
1c23 32 65 ee			ld (debug_mark),a  
1c26 3a 35 1c			ld a, (.dmark+1)  
1c29 32 66 ee			ld (debug_mark+1),a  
1c2c 3a 36 1c			ld a, (.dmark+2)  
1c2f 32 67 ee			ld (debug_mark+2),a  
1c32 18 03			jr .pastdmark  
1c34 ..			.dmark: db "PQ2"  
1c37 f1			.pastdmark: pop af  
1c38			endm  
# End of macro DMARK
1c38				CALLMONITOR 
1c38 cd 6f ee			call debug_vector  
1c3b				endm  
# End of macro CALLMONITOR
1c3b			endif	 
1c3b eb				ex de, hl 
1c3c e1				pop hl   ; get ptr to start of string 
1c3d			if DEBUG_FORTH_PUSH 
1c3d						DMARK "PQ3" 
1c3d f5				push af  
1c3e 3a 52 1c			ld a, (.dmark)  
1c41 32 65 ee			ld (debug_mark),a  
1c44 3a 53 1c			ld a, (.dmark+1)  
1c47 32 66 ee			ld (debug_mark+1),a  
1c4a 3a 54 1c			ld a, (.dmark+2)  
1c4d 32 67 ee			ld (debug_mark+2),a  
1c50 18 03			jr .pastdmark  
1c52 ..			.dmark: db "PQ3"  
1c55 f1			.pastdmark: pop af  
1c56			endm  
# End of macro DMARK
1c56				CALLMONITOR 
1c56 cd 6f ee			call debug_vector  
1c59				endm  
# End of macro CALLMONITOR
1c59			endif	 
1c59 19				add hl,de 
1c5a			if DEBUG_FORTH_PUSH 
1c5a						DMARK "PQE" 
1c5a f5				push af  
1c5b 3a 6f 1c			ld a, (.dmark)  
1c5e 32 65 ee			ld (debug_mark),a  
1c61 3a 70 1c			ld a, (.dmark+1)  
1c64 32 66 ee			ld (debug_mark+1),a  
1c67 3a 71 1c			ld a, (.dmark+2)  
1c6a 32 67 ee			ld (debug_mark+2),a  
1c6d 18 03			jr .pastdmark  
1c6f ..			.dmark: db "PQE"  
1c72 f1			.pastdmark: pop af  
1c73			endm  
# End of macro DMARK
1c73				CALLMONITOR 
1c73 cd 6f ee			call debug_vector  
1c76				endm  
# End of macro CALLMONITOR
1c76			endif	 
1c76			 
1c76 2b				dec hl    ; see if there is an optional trailing double quote 
1c77 7e				ld a,(hl) 
1c78 fe 22			cp '"' 
1c7a 20 03			jr nz, .strnoq 
1c7c 3e 00			ld a, 0      ; get rid of double quote 
1c7e 77				ld (hl), a 
1c7f 23			.strnoq: inc hl 
1c80			 
1c80 3e 00			ld a, 0 
1c82 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1c83			 
1c83 13				inc de ; add one for the type string 
1c84 13				inc de ; add one for null term??? 
1c85			 
1c85				; tos is get string pointer again 
1c85				; de contains space to allocate 
1c85				 
1c85 d5				push de 
1c86			 
1c86 eb				ex de, hl 
1c87			 
1c87				;push af 
1c87			 
1c87			if DEBUG_FORTH_PUSH 
1c87						DMARK "PHm" 
1c87 f5				push af  
1c88 3a 9c 1c			ld a, (.dmark)  
1c8b 32 65 ee			ld (debug_mark),a  
1c8e 3a 9d 1c			ld a, (.dmark+1)  
1c91 32 66 ee			ld (debug_mark+1),a  
1c94 3a 9e 1c			ld a, (.dmark+2)  
1c97 32 67 ee			ld (debug_mark+2),a  
1c9a 18 03			jr .pastdmark  
1c9c ..			.dmark: db "PHm"  
1c9f f1			.pastdmark: pop af  
1ca0			endm  
# End of macro DMARK
1ca0				CALLMONITOR 
1ca0 cd 6f ee			call debug_vector  
1ca3				endm  
# End of macro CALLMONITOR
1ca3			endif	 
1ca3 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1ca6				if DEBUG_FORTH_MALLOC_GUARD 
1ca6 cc 52 4f				call z,malloc_error 
1ca9				endif 
1ca9			 
1ca9				 
1ca9 c1				pop bc    ; get length 
1caa d1				pop de   ;  get string start    
1cab			 
1cab				; hl has destination from malloc 
1cab			 
1cab eb				ex de, hl    ; prep for ldir 
1cac			 
1cac d5				push de   ; save malloc area for DSP later 
1cad				;push hl   ; save malloc area for DSP later 
1cad			 
1cad			if DEBUG_FORTH_PUSH 
1cad						DMARK "PHc" 
1cad f5				push af  
1cae 3a c2 1c			ld a, (.dmark)  
1cb1 32 65 ee			ld (debug_mark),a  
1cb4 3a c3 1c			ld a, (.dmark+1)  
1cb7 32 66 ee			ld (debug_mark+1),a  
1cba 3a c4 1c			ld a, (.dmark+2)  
1cbd 32 67 ee			ld (debug_mark+2),a  
1cc0 18 03			jr .pastdmark  
1cc2 ..			.dmark: db "PHc"  
1cc5 f1			.pastdmark: pop af  
1cc6			endm  
# End of macro DMARK
1cc6				CALLMONITOR 
1cc6 cd 6f ee			call debug_vector  
1cc9				endm  
# End of macro CALLMONITOR
1cc9			endif	 
1cc9			 
1cc9			 
1cc9 ed b0			ldir 
1ccb			 
1ccb			 
1ccb				; push malloc to data stack     macro?????  
1ccb			 
1ccb				FORTH_DSP_NEXT 
1ccb cd 1f 1b			call macro_forth_dsp_next 
1cce				endm 
# End of macro FORTH_DSP_NEXT
1cce			 
1cce				; save value and type 
1cce			 
1cce 2a e8 e9			ld hl, (cli_data_sp) 
1cd1			 
1cd1				; save item type 
1cd1 3e 01			ld a,  DS_TYPE_STR 
1cd3 77				ld (hl), a 
1cd4 23				inc hl 
1cd5			 
1cd5				; get malloc word off stack 
1cd5 d1				pop de 
1cd6 73				ld (hl), e 
1cd7 23				inc hl 
1cd8 72				ld (hl), d 
1cd9			 
1cd9			 
1cd9			 
1cd9			if DEBUG_FORTH_PUSH 
1cd9 2a e8 e9			ld hl, (cli_data_sp) 
1cdc						DMARK "PHS" 
1cdc f5				push af  
1cdd 3a f1 1c			ld a, (.dmark)  
1ce0 32 65 ee			ld (debug_mark),a  
1ce3 3a f2 1c			ld a, (.dmark+1)  
1ce6 32 66 ee			ld (debug_mark+1),a  
1ce9 3a f3 1c			ld a, (.dmark+2)  
1cec 32 67 ee			ld (debug_mark+2),a  
1cef 18 03			jr .pastdmark  
1cf1 ..			.dmark: db "PHS"  
1cf4 f1			.pastdmark: pop af  
1cf5			endm  
# End of macro DMARK
1cf5				CALLMONITOR 
1cf5 cd 6f ee			call debug_vector  
1cf8				endm  
# End of macro CALLMONITOR
1cf8			;	ex de,hl 
1cf8			endif	 
1cf8				; in case of spaces, skip the ptr past the copied string 
1cf8				;pop af 
1cf8				;ld (cli_origptr),hl 
1cf8			 
1cf8 c9				ret 
1cf9			 
1cf9			 
1cf9			 
1cf9			; TODO ascii push input onto stack given hl to start of input 
1cf9			 
1cf9			; identify type 
1cf9			; if starts with a " then a string 
1cf9			; otherwise it is a number 
1cf9			;  
1cf9			; if a string 
1cf9			;     scan for ending " to get length of string to malloc for + 1 
1cf9			;     malloc 
1cf9			;     put pointer to string on stack first byte flags as string 
1cf9			; 
1cf9			; else a number 
1cf9			;    look for number format identifier 
1cf9			;    $xx hex 
1cf9			;    %xxxxx bin 
1cf9			;    xxxxx decimal 
1cf9			;    convert number to 16bit word.  
1cf9			;    malloc word + 1 with flag to identiy as num 
1cf9			;    put pointer to number on stack 
1cf9			;   
1cf9			;  
1cf9			  
1cf9			forth_apush: 
1cf9				; kernel push 
1cf9			 
1cf9			if DEBUG_FORTH_PUSH 
1cf9						DMARK "PSH" 
1cf9 f5				push af  
1cfa 3a 0e 1d			ld a, (.dmark)  
1cfd 32 65 ee			ld (debug_mark),a  
1d00 3a 0f 1d			ld a, (.dmark+1)  
1d03 32 66 ee			ld (debug_mark+1),a  
1d06 3a 10 1d			ld a, (.dmark+2)  
1d09 32 67 ee			ld (debug_mark+2),a  
1d0c 18 03			jr .pastdmark  
1d0e ..			.dmark: db "PSH"  
1d11 f1			.pastdmark: pop af  
1d12			endm  
# End of macro DMARK
1d12				CALLMONITOR 
1d12 cd 6f ee			call debug_vector  
1d15				endm  
# End of macro CALLMONITOR
1d15			endif	 
1d15				; identify input type 
1d15			 
1d15 7e				ld a,(hl) 
1d16			 
1d16 fe 23			cp '#' 
1d18 ca 52 1d			jp z, .fapdec 
1d1b			 
1d1b			 
1d1b fe 22			cp '"' 
1d1d 28 0a			jr z, .fapstr 
1d1f fe 24			cp '$' 
1d21 ca 49 1d			jp z, .faphex 
1d24 fe 25			cp '%' 
1d26 ca 31 1d			jp z, .fapbin 
1d29			;	cp 'b' 
1d29			;	jp z, .fabin 
1d29				; else decimal 
1d29			 
1d29				; TODO do decimal conversion 
1d29				; decimal is stored as a 16bit word 
1d29			 
1d29				; by default everything is a string if type is not detected 
1d29			.fapstr: ; 
1d29 fe 22			cp '"' 
1d2b 20 01			jr nz, .strnoqu 
1d2d 23				inc hl 
1d2e			.strnoqu: 
1d2e c3 fe 1b			jp forth_push_str 
1d31			 
1d31			 
1d31			 
1d31			.fapbin:    ; push a binary string.  
1d31 11 00 00			ld de, 0   ; hold a 16bit value 
1d34			 
1d34 23			.fapbinshift:	inc hl  
1d35 7e				ld a,(hl) 
1d36 fe 00			cp 0     ; done scanning  
1d38 28 0b			jr z, .fapbdone  	; got it in HL so push  
1d3a			 
1d3a				; left shift de 
1d3a eb				ex de, hl	 
1d3b 29				add hl, hl 
1d3c			 
1d3c				; is 1 
1d3c fe 31			cp '1' 
1d3e 20 02			jr nz, .binzero 
1d40 cb 4d			bit 1, l 
1d42			.binzero: 
1d42 eb				ex de, hl	 ; save current de 
1d43 18 ef			jr .fapbinshift 
1d45			 
1d45			.fapbdone: 
1d45 eb				ex de, hl 
1d46 c3 90 1b			jp forth_push_numhl 
1d49			 
1d49			 
1d49			.faphex:   ; hex is always stored as a 16bit word 
1d49				; skip number prefix 
1d49 23				inc hl 
1d4a				; turn ascii into number 
1d4a cd b4 10			call get_word_hl	; ret 16bit word in hl 
1d4d			 
1d4d c3 90 1b			jp forth_push_numhl 
1d50			 
1d50 00				 nop 
1d51			 
1d51			.fabin:   ; TODO bin conversion 
1d51			 
1d51			 
1d51 c9				ret 
1d52			.fapdec:	 
1d52				; string to dec conversion 
1d52 23				inc hl 
1d53 eb				ex de, hl 
1d54 cd f2 10			call string_to_uint16 
1d57 c3 90 1b			jp forth_push_numhl 
1d5a c9				ret 
1d5b				 
1d5b			;atoui_16: 
1d5b			 
1d5b			; get either a string ptr or a 16bit word from the data stack 
1d5b			 
1d5b			FORTH_DSP: macro 
1d5b				call macro_forth_dsp 
1d5b				endm 
1d5b			 
1d5b			macro_forth_dsp: 
1d5b				; data stack pointer points to current word on tos 
1d5b			 
1d5b 2a e8 e9			ld hl,(cli_data_sp) 
1d5e			 
1d5e				if DEBUG_FORTH_PUSH 
1d5e						DMARK "DSP" 
1d5e f5				push af  
1d5f 3a 73 1d			ld a, (.dmark)  
1d62 32 65 ee			ld (debug_mark),a  
1d65 3a 74 1d			ld a, (.dmark+1)  
1d68 32 66 ee			ld (debug_mark+1),a  
1d6b 3a 75 1d			ld a, (.dmark+2)  
1d6e 32 67 ee			ld (debug_mark+2),a  
1d71 18 03			jr .pastdmark  
1d73 ..			.dmark: db "DSP"  
1d76 f1			.pastdmark: pop af  
1d77			endm  
# End of macro DMARK
1d77			 
1d77 cd 85 4f				call display_data_sp 
1d7a				;call break_point_state 
1d7a				;rst 030h 
1d7a				CALLMONITOR 
1d7a cd 6f ee			call debug_vector  
1d7d				endm  
# End of macro CALLMONITOR
1d7d				endif 
1d7d			 
1d7d c9				ret 
1d7e			 
1d7e			; return hl to start of value on stack 
1d7e			 
1d7e			FORTH_DSP_VALUE: macro 
1d7e				call macro_forth_dsp_value 
1d7e				endm 
1d7e			 
1d7e			macro_forth_dsp_value: 
1d7e			 
1d7e				FORTH_DSP 
1d7e cd 5b 1d			call macro_forth_dsp 
1d81				endm 
# End of macro FORTH_DSP
1d81			 
1d81 d5				push de 
1d82			 
1d82 23				inc hl ; skip type 
1d83			 
1d83 5e				ld e, (hl) 
1d84 23				inc hl 
1d85 56				ld d, (hl) 
1d86 eb				ex de,hl  
1d87			 
1d87 d1				pop de 
1d88			 
1d88 c9				ret 
1d89			 
1d89			; return hl to start of value to second item on stack 
1d89			 
1d89			FORTH_DSP_VALUEM1: macro 
1d89				call macro_forth_dsp_value_m1 
1d89				endm 
1d89			 
1d89			macro_forth_dsp_value_m1: 
1d89			 
1d89				FORTH_DSP 
1d89 cd 5b 1d			call macro_forth_dsp 
1d8c				endm 
# End of macro FORTH_DSP
1d8c			 
1d8c 2b				dec hl 
1d8d 2b				dec hl 
1d8e			;	dec hl 
1d8e			 
1d8e d5				push de 
1d8f			 
1d8f 5e				ld e, (hl) 
1d90 23				inc hl 
1d91 56				ld d, (hl) 
1d92 eb				ex de,hl  
1d93			 
1d93 d1				pop de 
1d94			 
1d94 c9				ret 
1d95			 
1d95				 
1d95			 
1d95			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1d95			 
1d95			FORTH_DSP_POP: macro 
1d95				call macro_forth_dsp_pop 
1d95				endm 
1d95			 
1d95			 
1d95			; get the tos data type 
1d95			 
1d95			FORTH_DSP_TYPE:   macro 
1d95			 
1d95				;FORTH_DSP_VALUE 
1d95				FORTH_DSP 
1d95				 
1d95				; hl points to value 
1d95				; check type 
1d95			 
1d95				ld a,(hl) 
1d95			 
1d95				endm 
1d95			 
1d95			; load the tos value into hl 
1d95			 
1d95			 
1d95			FORTH_DSP_VALUEHL:  macro 
1d95				call macro_dsp_valuehl 
1d95				endm 
1d95			 
1d95			 
1d95			 
1d95			macro_dsp_valuehl: 
1d95				FORTH_DSP_VALUE 
1d95 cd 7e 1d			call macro_forth_dsp_value 
1d98				endm 
# End of macro FORTH_DSP_VALUE
1d98			 
1d98				;FORTH_ERR_TOS_NOTNUM 
1d98			 
1d98				;inc hl   ; skip type id 
1d98			 
1d98			;	push de 
1d98			; 
1d98			;	ld e, (hl) 
1d98			;	inc hl 
1d98			;	ld d, (hl) 
1d98			;	ex de,hl  
1d98			 
1d98			;	pop de 
1d98			 
1d98				if DEBUG_FORTH_PUSH 
1d98						DMARK "DVL" 
1d98 f5				push af  
1d99 3a ad 1d			ld a, (.dmark)  
1d9c 32 65 ee			ld (debug_mark),a  
1d9f 3a ae 1d			ld a, (.dmark+1)  
1da2 32 66 ee			ld (debug_mark+1),a  
1da5 3a af 1d			ld a, (.dmark+2)  
1da8 32 67 ee			ld (debug_mark+2),a  
1dab 18 03			jr .pastdmark  
1dad ..			.dmark: db "DVL"  
1db0 f1			.pastdmark: pop af  
1db1			endm  
# End of macro DMARK
1db1				CALLMONITOR 
1db1 cd 6f ee			call debug_vector  
1db4				endm  
# End of macro CALLMONITOR
1db4				endif 
1db4 c9				ret 
1db5			 
1db5			forth_apushstrhl:      
1db5				; push of string requires use of cli_origptr 
1db5				; bodge use 
1db5			 
1db5				; get current cli_origptr, save, update with temp pointer  
1db5 ed 5b 38 ea		ld de, (cli_origptr) 
1db9 22 38 ea			ld (cli_origptr), hl 
1dbc d5				push de 
1dbd cd f9 1c			call forth_apush 
1dc0 d1				pop de 
1dc1 ed 53 38 ea		ld (cli_origptr), de 
1dc5 c9			        ret	 
1dc6			 
1dc6			 
1dc6			; increase loop stack pointer and save hl to it 
1dc6				 
1dc6			FORTH_LOOP_NEXT: macro 
1dc6				call macro_forth_loop_next 
1dc6				;nop 
1dc6				endm 
1dc6			 
1dc6			macro_forth_loop_next: 
1dc6				if DEBUG_FORTH_STACK_GUARD 
1dc6 cd ff 5c				call check_stacks 
1dc9				endif 
1dc9 e5				push hl 
1dca d5				push de 
1dcb eb				ex de,hl 
1dcc 2a ea e9			ld hl,(cli_loop_sp) 
1dcf 23				inc hl 
1dd0 23				inc hl 
1dd1					if DEBUG_FORTH_WORDS 
1dd1						DMARK "LNX" 
1dd1 f5				push af  
1dd2 3a e6 1d			ld a, (.dmark)  
1dd5 32 65 ee			ld (debug_mark),a  
1dd8 3a e7 1d			ld a, (.dmark+1)  
1ddb 32 66 ee			ld (debug_mark+1),a  
1dde 3a e8 1d			ld a, (.dmark+2)  
1de1 32 67 ee			ld (debug_mark+2),a  
1de4 18 03			jr .pastdmark  
1de6 ..			.dmark: db "LNX"  
1de9 f1			.pastdmark: pop af  
1dea			endm  
# End of macro DMARK
1dea						CALLMONITOR 
1dea cd 6f ee			call debug_vector  
1ded				endm  
# End of macro CALLMONITOR
1ded					endif 
1ded 22 ea e9			ld (cli_loop_sp),hl 
1df0 73				ld (hl), e 
1df1 23				inc hl 
1df2 72				ld (hl), d 
1df3 d1				pop de    ; been reversed so save a swap on restore 
1df4 e1				pop hl 
1df5				if DEBUG_FORTH_STACK_GUARD 
1df5 cd ff 5c				call check_stacks 
1df8				endif 
1df8 c9				ret 
1df9			 
1df9			; get current ret stack pointer and save to hl  
1df9				 
1df9			FORTH_LOOP_TOS: macro 
1df9				call macro_forth_loop_tos 
1df9				endm 
1df9			 
1df9			macro_forth_loop_tos: 
1df9 d5				push de 
1dfa 2a ea e9			ld hl,(cli_loop_sp) 
1dfd 5e				ld e, (hl) 
1dfe 23				inc hl 
1dff 56				ld d, (hl) 
1e00 eb				ex de, hl 
1e01 d1				pop de 
1e02 c9				ret 
1e03			 
1e03			; pop loop stack pointer 
1e03				 
1e03			FORTH_LOOP_POP: macro 
1e03				call macro_forth_loop_pop 
1e03				endm 
1e03			 
1e03			 
1e03			macro_forth_loop_pop: 
1e03				if DEBUG_FORTH_STACK_GUARD 
1e03					DMARK "LPP" 
1e03 f5				push af  
1e04 3a 18 1e			ld a, (.dmark)  
1e07 32 65 ee			ld (debug_mark),a  
1e0a 3a 19 1e			ld a, (.dmark+1)  
1e0d 32 66 ee			ld (debug_mark+1),a  
1e10 3a 1a 1e			ld a, (.dmark+2)  
1e13 32 67 ee			ld (debug_mark+2),a  
1e16 18 03			jr .pastdmark  
1e18 ..			.dmark: db "LPP"  
1e1b f1			.pastdmark: pop af  
1e1c			endm  
# End of macro DMARK
1e1c cd ff 5c				call check_stacks 
1e1f					FORTH_CHK_LOOP_UNDER 
1e1f e5				push hl 
1e20 d5				push de 
1e21 2a ea e9			ld hl,(cli_loop_sp) 
1e24 11 24 e9			ld de, cli_loop_stack 
1e27 cd 13 0e			call cmp16 
1e2a da 1c 5e			jp c, fault_loop_under 
1e2d d1				pop de 
1e2e e1				pop hl 
1e2f				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e2f				endif 
1e2f e5				push hl 
1e30 2a ea e9			ld hl,(cli_loop_sp) 
1e33 2b				dec hl 
1e34 2b				dec hl 
1e35 22 ea e9			ld (cli_loop_sp), hl 
1e38				; TODO do stack underflow checks 
1e38 e1				pop hl 
1e39				if DEBUG_FORTH_STACK_GUARD 
1e39 cd ff 5c				call check_stacks 
1e3c					FORTH_CHK_LOOP_UNDER 
1e3c e5				push hl 
1e3d d5				push de 
1e3e 2a ea e9			ld hl,(cli_loop_sp) 
1e41 11 24 e9			ld de, cli_loop_stack 
1e44 cd 13 0e			call cmp16 
1e47 da 1c 5e			jp c, fault_loop_under 
1e4a d1				pop de 
1e4b e1				pop hl 
1e4c				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e4c				endif 
1e4c c9				ret 
1e4d			 
1e4d			macro_forth_dsp_pop: 
1e4d			 
1e4d e5				push hl 
1e4e			 
1e4e				; release malloc data 
1e4e			 
1e4e				if DEBUG_FORTH_STACK_GUARD 
1e4e cd ff 5c				call check_stacks 
1e51					FORTH_CHK_DSP_UNDER 
1e51 e5				push hl 
1e52 d5				push de 
1e53 2a e8 e9			ld hl,(cli_data_sp) 
1e56 11 22 e8			ld de, cli_data_stack 
1e59 cd 13 0e			call cmp16 
1e5c da 10 5e			jp c, fault_dsp_under 
1e5f d1				pop de 
1e60 e1				pop hl 
1e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
1e61				endif 
1e61				;ld hl,(cli_data_sp) 
1e61			if DEBUG_FORTH_DOT 
1e61				DMARK "DPP" 
1e61 f5				push af  
1e62 3a 76 1e			ld a, (.dmark)  
1e65 32 65 ee			ld (debug_mark),a  
1e68 3a 77 1e			ld a, (.dmark+1)  
1e6b 32 66 ee			ld (debug_mark+1),a  
1e6e 3a 78 1e			ld a, (.dmark+2)  
1e71 32 67 ee			ld (debug_mark+2),a  
1e74 18 03			jr .pastdmark  
1e76 ..			.dmark: db "DPP"  
1e79 f1			.pastdmark: pop af  
1e7a			endm  
# End of macro DMARK
1e7a				CALLMONITOR 
1e7a cd 6f ee			call debug_vector  
1e7d				endm  
# End of macro CALLMONITOR
1e7d			endif	 
1e7d			 
1e7d			 
1e7d			if FORTH_ENABLE_DSPPOPFREE 
1e7d			 
1e7d				FORTH_DSP 
1e7d cd 5b 1d			call macro_forth_dsp 
1e80				endm 
# End of macro FORTH_DSP
1e80			 
1e80 7e				ld a, (hl) 
1e81 fe 01			cp DS_TYPE_STR 
1e83 20 23			jr nz, .skippopfree 
1e85			 
1e85				FORTH_DSP_VALUEHL 
1e85 cd 95 1d			call macro_dsp_valuehl 
1e88				endm 
# End of macro FORTH_DSP_VALUEHL
1e88 00				nop 
1e89			if DEBUG_FORTH_DOT 
1e89				DMARK "DPf" 
1e89 f5				push af  
1e8a 3a 9e 1e			ld a, (.dmark)  
1e8d 32 65 ee			ld (debug_mark),a  
1e90 3a 9f 1e			ld a, (.dmark+1)  
1e93 32 66 ee			ld (debug_mark+1),a  
1e96 3a a0 1e			ld a, (.dmark+2)  
1e99 32 67 ee			ld (debug_mark+2),a  
1e9c 18 03			jr .pastdmark  
1e9e ..			.dmark: db "DPf"  
1ea1 f1			.pastdmark: pop af  
1ea2			endm  
# End of macro DMARK
1ea2				CALLMONITOR 
1ea2 cd 6f ee			call debug_vector  
1ea5				endm  
# End of macro CALLMONITOR
1ea5			endif	 
1ea5 cd 9a 12			call free 
1ea8			.skippopfree: 
1ea8				 
1ea8			 
1ea8			endif 
1ea8			 
1ea8			if DEBUG_FORTH_DOT_KEY 
1ea8				DMARK "DP2" 
1ea8				CALLMONITOR 
1ea8			endif	 
1ea8			 
1ea8				; move pointer down 
1ea8			 
1ea8 2a e8 e9			ld hl,(cli_data_sp) 
1eab 2b				dec hl 
1eac 2b				dec hl 
1ead			; PARSEV5 
1ead 2b				dec hl 
1eae 22 e8 e9			ld (cli_data_sp), hl 
1eb1			 
1eb1				if DEBUG_FORTH_STACK_GUARD 
1eb1 cd ff 5c				call check_stacks 
1eb4					FORTH_CHK_DSP_UNDER 
1eb4 e5				push hl 
1eb5 d5				push de 
1eb6 2a e8 e9			ld hl,(cli_data_sp) 
1eb9 11 22 e8			ld de, cli_data_stack 
1ebc cd 13 0e			call cmp16 
1ebf da 10 5e			jp c, fault_dsp_under 
1ec2 d1				pop de 
1ec3 e1				pop hl 
1ec4				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ec4				endif 
1ec4			 
1ec4 e1				pop hl 
1ec5			 
1ec5 c9				ret 
1ec6			 
1ec6			getwordathl: 
1ec6				; hl points to an address 
1ec6				; load hl with the word at that address 
1ec6			 
1ec6 d5				push de 
1ec7			 
1ec7 5e				ld e, (hl) 
1ec8 23				inc hl 
1ec9 56				ld d, (hl) 
1eca eb				ex de, hl 
1ecb			 
1ecb d1				pop de 
1ecc c9				ret 
1ecd			 
1ecd			 
1ecd			; functions to manuplite stack pointers 
1ecd			 
1ecd			; generate fragment to set hl to be pointer to a stack item 
1ecd			 
1ecd			FORTH_DSP_PTR: macro  x 
1ecd				ld hl,(cli_data_sp) 
1ecd				ld de, x * 3 
1ecd				sbc hl, de 
1ecd				endm 
1ecd			 
1ecd			 
1ecd			 
1ecd			; copy point in hl to stack tmp storage slots 1-4 
1ecd			hltostack1: 
1ecd 11 b8 e2			ld de, os_stack_1  
1ed0 c3 fb 1e			jp hltostackmv 
1ed3			 
1ed3			hltostack2:  
1ed3 11 b5 e2			ld de, os_stack_2 
1ed6 c3 fb 1e			jp hltostackmv 
1ed9			 
1ed9			hltostack3:  
1ed9 11 b2 e2			ld de, os_stack_3 
1edc c3 fb 1e			jp hltostackmv 
1edf			 
1edf			hltostack4:  
1edf 11 af e2			ld de, os_stack_4  
1ee2 c3 fb 1e			jp hltostackmv 
1ee5			 
1ee5			; copy to point in hl from stack tmp storage slots 1-4 
1ee5			hlfromstack1: 
1ee5 11 b8 e2			ld de, os_stack_1 
1ee8 c3 fa 1e			jp hlfromsttackmv 
1eeb			 
1eeb			hlfromstack2:  
1eeb 11 b5 e2			ld de, os_stack_2 
1eee c3 fa 1e			jp hlfromsttackmv 
1ef1			 
1ef1			hlfromstack3:  
1ef1 11 b2 e2			ld de, os_stack_3 
1ef4 c3 fa 1e			jp hlfromsttackmv 
1ef7			 
1ef7			hlfromstack4:  
1ef7 11 af e2			ld de, os_stack_4 
1efa			 
1efa			hlfromsttackmv: 
1efa eb				ex de, hl 
1efb			 
1efb			hltostackmv: 
1efb			 
1efb				; do stack move 
1efb c5				push bc 
1efc 01 03 00			ld bc, 3 
1eff ed b0			ldir  
1f01 c1				pop bc	 
1f02 c9				ret 
1f03			 
1f03			; eof 
1f03			 
# End of file forth_stackopsv5.asm
1f03			endif 
1f03			loadwordinhl:	 
1f03			 
1f03 d5				push de 
1f04			 
1f04 5e				ld e, (hl) 
1f05 23				inc hl 
1f06 56				ld d, (hl) 
1f07 eb				ex de,hl  
1f08			 
1f08 d1				pop de 
1f09			 
1f09 c9				ret 
1f0a			 
1f0a			user_word_eol:  
1f0a				; hl contains the pointer to where to create a linked list item from the end 
1f0a				; of the user dict to continue on at the system word dict 
1f0a				 
1f0a				; poke the stub of the word list linked list to repoint to rom words 
1f0a			 
1f0a				; stub format 
1f0a				; db   word id 
1f0a				; dw    link to next word 
1f0a			        ; db char length of token 
1f0a				; db string + 0 term 
1f0a				; db exec code....  
1f0a			 
1f0a 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f0c 77				ld (hl), a		; word id 
1f0d 23				inc hl 
1f0e			 
1f0e 11 c5 20			ld de, sysdict 
1f11 73				ld (hl), e		; next word link ie system dict 
1f12 23				inc hl 
1f13 72				ld (hl), d		; next word link ie system dict 
1f14 23				inc hl	 
1f15			 
1f15			;	ld (hl), sysdict		; next word link ie system dict 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15 3e 02			ld a, 2			; word length is 0 
1f17 77				ld (hl), a	 
1f18 23				inc hl 
1f19			 
1f19 3e 7e			ld a, '~'			; word length is 0 
1f1b 77				ld (hl), a	 
1f1c 23				inc hl 
1f1d 3e 00			ld a, 0			; save empty word 
1f1f 77				ld (hl), a 
1f20			 
1f20 c9				ret 
1f21			 
1f21				 
1f21			 
1f21			forthexec_cleanup: 
1f21				FORTH_RSP_POP 
1f21 cd 58 1b			call macro_forth_rsp_pop 
1f24				endm 
# End of macro FORTH_RSP_POP
1f24 c9				ret 
1f25			 
1f25			forth_call_hl: 
1f25				; taking hl 
1f25 e5				push hl 
1f26 c9				ret 
1f27			 
1f27			; this is called to reset Forth system but keep existing uwords etc 
1f27			 
1f27			forth_warmstart: 
1f27				; setup stack over/under flow checks 
1f27				if DEBUG_FORTH_STACK_GUARD 
1f27 cd e5 5c				call chk_stk_init 
1f2a				endif 
1f2a			 
1f2a				; init stack pointers  - * these stacks go upwards *  
1f2a 21 a6 e9			ld hl, cli_ret_stack 
1f2d 22 ec e9			ld (cli_ret_sp), hl	 
1f30				; set bottom of stack 
1f30 3e 00			ld a,0 
1f32 77				ld (hl),a 
1f33 23				inc hl 
1f34 77				ld (hl),a 
1f35			 
1f35 21 22 e8			ld hl, cli_data_stack 
1f38 22 e8 e9			ld (cli_data_sp), hl	 
1f3b				; set bottom of stack 
1f3b 3e 00			ld a,0 
1f3d 77				ld (hl),a 
1f3e 23				inc hl 
1f3f 77				ld (hl),a 
1f40			 
1f40 21 24 e9			ld hl, cli_loop_stack 
1f43 22 ea e9			ld (cli_loop_sp), hl	 
1f46				; set bottom of stack 
1f46 3e 00			ld a,0 
1f48 77				ld (hl),a 
1f49 23				inc hl 
1f4a 77				ld (hl),a 
1f4b			 
1f4b				; init extent of current open file 
1f4b			 
1f4b 3e 00			ld a, 0 
1f4d 32 64 ea			ld (store_openext), a 
1f50			 
1f50 c9				ret 
1f51			 
1f51			 
1f51			 
1f51			; Cold Start - this is called to setup the whole Forth system 
1f51			 
1f51			forth_init: 
1f51			 
1f51				; setup stack over/under flow checks 
1f51			 
1f51			;	if DEBUG_FORTH_STACK_GUARD 
1f51			;		call chk_stk_init 
1f51			;	endif 
1f51			 
1f51				; enable auto display updates (slow.....) 
1f51			 
1f51 3e 01			ld a, 1 
1f53 32 36 ea			ld (cli_autodisplay), a 
1f56			 
1f56				; if storage is in use disable long reads for now 
1f56 3e 00			ld a, 0 
1f58 32 6f ea			ld (store_longread), a 
1f5b			 
1f5b			 
1f5b				; show start up screen 
1f5b			 
1f5b cd c8 0b			call clear_display 
1f5e			 
1f5e 3e 00			ld a,0 
1f60 32 58 ea			ld (f_cursor_ptr), a 
1f63			 
1f63				; set start of word list in start of ram - for use when creating user words 
1f63			 
1f63 21 fa 60			ld hl, baseram 
1f66 22 b8 e5			ld (os_last_new_uword), hl 
1f69 cd 0a 1f			call user_word_eol 
1f6c				 
1f6c			;		call display_data_sp 
1f6c			;		call next_page_prompt 
1f6c			 
1f6c			 
1f6c			 
1f6c			 
1f6c c9				ret 
1f6d			 
1f6d .. 00		.bootforth: db " Forth Kernel Init ",0 
1f81			 
1f81			; TODO push to stack 
1f81			 
1f81			;  
1f81			 
1f81			if FORTH_PARSEV2 
1f81			 
1f81			 
1f81				include "forth_parserv2.asm" 
1f81			 
1f81			endif 
1f81			 
1f81			 
1f81			; parse cli version 1 
1f81			 
1f81			if FORTH_PARSEV1 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv1.asm" 
1f81			endif 
1f81				 
1f81			if FORTH_PARSEV3 
1f81			      include "forth_parserv3.asm" 
1f81				include "forth_wordsv3.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV4 
1f81			      include "forth_parserv4.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV5 
1f81			      include "forth_parserv5.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV6 
1f81			      include "forth_parserv6.asm" 
1f81			 
1f81			 
1f81			; A better parser without using malloc and string copies all over the place.  
1f81			; Exec in situ should be faster 
1f81			 
1f81			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f81			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f81			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f81			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f81			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f81			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f81			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f81			 
1f81			; Core word preamble macro 
1f81			 
1f81			CWHEAD:   macro nxtword opcode lit len opflags 
1f81				db WORD_SYS_CORE+opcode             
1f81				; internal op code number 
1f81				dw nxtword            
1f81				; link to next dict word block 
1f81				db len + 1 
1f81				; literal length of dict word inc zero term 
1f81				db lit,0              
1f81				; literal dict word 
1f81			        ; TODO db opflags        
1f81				endm 
1f81			 
1f81			 
1f81			NEXTW: macro  
1f81				jp macro_next 
1f81				endm 
1f81			 
1f81			macro_next: 
1f81			if DEBUG_FORTH_PARSE_EXEC 
1f81				DMARK "NXT" 
1f81				CALLMONITOR 
1f81			endif	 
1f81			;	inc hl  ; skip token null term  
1f81 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f85 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f89 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f8c			if DEBUG_FORTH_PARSE_EXEC 
1f8c				DMARK "}AA" 
1f8c				CALLMONITOR 
1f8c			endif	 
1f8c c3 7b 20			jp execnext 
1f8f				;jp exec1 
1f8f			       
1f8f			 
1f8f			 
1f8f			; Another go at the parser to compile  
1f8f			 
1f8f			 
1f8f			; TODO rework parser to change all of the string words to byte tokens 
1f8f			; TODO do a search for  
1f8f			 
1f8f			; TODO first run normal parser to zero term sections 
1f8f			; TODO for each word do a token look up to get the op code 
1f8f			; TODO need some means to flag to the exec that this is a byte code form    
1f8f			 
1f8f			 
1f8f			forthcompile: 
1f8f			 
1f8f			; 
1f8f			; line parse: 
1f8f			;       parse raw input buffer 
1f8f			;       tokenise the words 
1f8f			;       malloc new copy (for looping etc) 
1f8f			;       copy to malloc + current pc in line to start of string and add line term 
1f8f			;       save on new rsp 
1f8f			; 
1f8f			 
1f8f			; hl to point to the line to tokenise 
1f8f			 
1f8f			;	push hl 
1f8f 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1f92			 
1f92			;	ld a,0		; string term on input 
1f92			;	call strlent 
1f92			 
1f92			;	ld (os_tok_len), hl	 ; save string length 
1f92			 
1f92			;if DEBUG_FORTH_TOK 
1f92			;	ex de,hl		 
1f92			;endif 
1f92			 
1f92			;	pop hl 		; get back string pointer 
1f92			 
1f92			if DEBUG_FORTH_TOK 
1f92						DMARK "TOc" 
1f92				CALLMONITOR 
1f92			endif 
1f92 7e			.cptoken2:    ld a,(hl) 
1f93 23				inc hl 
1f94 fe 7f			cp FORTH_END_BUFFER 
1f96 28 29			jr z, .cptokendone2 
1f98 fe 00			cp 0 
1f9a 28 25			jr z, .cptokendone2 
1f9c fe 22			cp '"' 
1f9e 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1fa0 fe 20			cp ' ' 
1fa2 20 ee			jr nz,  .cptoken2 
1fa4			 
1fa4			; TODO consume comments held between ( and ) 
1fa4			 
1fa4				; we have a space so change to zero term for dict match later 
1fa4 2b				dec hl 
1fa5 3e 00			ld a,0 
1fa7 77				ld (hl), a 
1fa8 23				inc hl 
1fa9 18 e7			jr .cptoken2 
1fab				 
1fab			 
1fab			.cptokenstr2: 
1fab				; skip all white space until either eol (because forgot to term) or end double quote 
1fab			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fab				;inc hl ; skip current double quote 
1fab 7e				ld a,(hl) 
1fac 23				inc hl 
1fad fe 22			cp '"' 
1faf 28 e1			jr z, .cptoken2 
1fb1 fe 7f			cp FORTH_END_BUFFER 
1fb3 28 0c			jr z, .cptokendone2 
1fb5 fe 00			cp 0 
1fb7 28 08			jr z, .cptokendone2 
1fb9 fe 20			cp ' ' 
1fbb 28 02			jr z, .cptmp2 
1fbd 18 ec			jr .cptokenstr2 
1fbf			 
1fbf			.cptmp2:	; we have a space so change to zero term for dict match later 
1fbf				;dec hl 
1fbf				;ld a,"-"	; TODO remove this when working 
1fbf				;ld (hl), a 
1fbf				;inc hl 
1fbf 18 ea			jr .cptokenstr2 
1fc1			 
1fc1			.cptokendone2: 
1fc1				;inc hl 
1fc1 3e 7f			ld a, FORTH_END_BUFFER 
1fc3 77				ld (hl),a 
1fc4			;	inc hl 
1fc4			;	ld a, '!' 
1fc4			;	ld (hl),a 
1fc4			 
1fc4 2a bc e5			ld hl,(os_tok_ptr) 
1fc7			         
1fc7			if DEBUG_FORTH_TOK 
1fc7						DMARK "Tc1" 
1fc7				CALLMONITOR 
1fc7			endif 
1fc7			 
1fc7				; push exec string to top of return stack 
1fc7				FORTH_RSP_NEXT 
1fc7 cd 37 1b			call macro_forth_rsp_next 
1fca				endm 
# End of macro FORTH_RSP_NEXT
1fca c9				ret 
1fcb			 
1fcb			; Another go at the parser need to simplify the process 
1fcb			 
1fcb			forthparse: 
1fcb			 
1fcb			; 
1fcb			; line parse: 
1fcb			;       parse raw input buffer 
1fcb			;       tokenise the words 
1fcb			;       malloc new copy (for looping etc) 
1fcb			;       copy to malloc + current pc in line to start of string and add line term 
1fcb			;       save on new rsp 
1fcb			; 
1fcb			 
1fcb			; hl to point to the line to tokenise 
1fcb			 
1fcb			;	push hl 
1fcb 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1fce			 
1fce			;	ld a,0		; string term on input 
1fce			;	call strlent 
1fce			 
1fce			;	ld (os_tok_len), hl	 ; save string length 
1fce			 
1fce			;if DEBUG_FORTH_TOK 
1fce			;	ex de,hl		 
1fce			;endif 
1fce			 
1fce			;	pop hl 		; get back string pointer 
1fce			 
1fce			if DEBUG_FORTH_TOK 
1fce						DMARK "TOK" 
1fce				CALLMONITOR 
1fce			endif 
1fce 7e			.ptoken2:    ld a,(hl) 
1fcf 23				inc hl 
1fd0 fe 7f			cp FORTH_END_BUFFER 
1fd2 28 29			jr z, .ptokendone2 
1fd4 fe 00			cp 0 
1fd6 28 25			jr z, .ptokendone2 
1fd8 fe 22			cp '"' 
1fda 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fdc fe 20			cp ' ' 
1fde 20 ee			jr nz,  .ptoken2 
1fe0			 
1fe0			; TODO consume comments held between ( and ) 
1fe0			 
1fe0				; we have a space so change to zero term for dict match later 
1fe0 2b				dec hl 
1fe1 3e 00			ld a,0 
1fe3 77				ld (hl), a 
1fe4 23				inc hl 
1fe5 18 e7			jr .ptoken2 
1fe7				 
1fe7			 
1fe7			.ptokenstr2: 
1fe7				; skip all white space until either eol (because forgot to term) or end double quote 
1fe7			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fe7				;inc hl ; skip current double quote 
1fe7 7e				ld a,(hl) 
1fe8 23				inc hl 
1fe9 fe 22			cp '"' 
1feb 28 e1			jr z, .ptoken2 
1fed fe 7f			cp FORTH_END_BUFFER 
1fef 28 0c			jr z, .ptokendone2 
1ff1 fe 00			cp 0 
1ff3 28 08			jr z, .ptokendone2 
1ff5 fe 20			cp ' ' 
1ff7 28 02			jr z, .ptmp2 
1ff9 18 ec			jr .ptokenstr2 
1ffb			 
1ffb			.ptmp2:	; we have a space so change to zero term for dict match later 
1ffb				;dec hl 
1ffb				;ld a,"-"	; TODO remove this when working 
1ffb				;ld (hl), a 
1ffb				;inc hl 
1ffb 18 ea			jr .ptokenstr2 
1ffd			 
1ffd			.ptokendone2: 
1ffd				;inc hl 
1ffd 3e 7f			ld a, FORTH_END_BUFFER 
1fff 77				ld (hl),a 
2000			;	inc hl 
2000			;	ld a, '!' 
2000			;	ld (hl),a 
2000			 
2000 2a bc e5			ld hl,(os_tok_ptr) 
2003			         
2003			if DEBUG_FORTH_TOK 
2003						DMARK "TK1" 
2003				CALLMONITOR 
2003			endif 
2003			 
2003				; push exec string to top of return stack 
2003				FORTH_RSP_NEXT 
2003 cd 37 1b			call macro_forth_rsp_next 
2006				endm 
# End of macro FORTH_RSP_NEXT
2006 c9				ret 
2007			 
2007			; 
2007			;	; malloc size + buffer pointer + if is loop flag 
2007			;	ld hl,(os_tok_len) 		 ; get string length 
2007			; 
2007			;	ld a,l 
2007			; 
2007			;	cp 0			; we dont want to use a null string 
2007			;	ret z 
2007			; 
2007			;;	add 3    ; prefix malloc with buffer for current word ptr 
2007			; 
2007			;	add 5     ; TODO when certain not over writing memory remove 
2007			; 
2007			;		 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKE" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	ld l,a 
2007			;	ld h,0 
2007			;;	push hl   ; save required space for the copy later 
2007			;	call malloc 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKM" 
2007			;	CALLMONITOR 
2007			;endif 
2007			;	if DEBUG_FORTH_MALLOC_GUARD 
2007			;		push af 
2007			;		call ishlzero 
2007			;;		ld a, l 
2007			;;		add h 
2007			;;		cp 0 
2007			;		pop af 
2007			;		 
2007			;		call z,malloc_error 
2007			;	endif 
2007			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2007			; 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKR" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	FORTH_RSP_NEXT 
2007			; 
2007			;	;inc hl	 ; go past current buffer pointer 
2007			;	;inc hl 
2007			;	;inc hl   ; and past if loop flag 
2007			;		; TODO Need to set flag  
2007			; 
2007			;	 
2007			;	 
2007			;	ex de,hl	; malloc is dest 
2007			;	ld hl, (os_tok_len) 
2007			;;	pop bc 
2007			;	ld c, l                
2007			;	ld b,0 
2007			;	ld hl, (os_tok_ptr) 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKT" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	; do str cpy 
2007			; 
2007			;	ldir      ; copy byte in hl to de 
2007			; 
2007			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			; 
2007			;			DMARK "TKY" 
2007			;	CALLMONITOR 
2007			;endif 
2007			;	;ld a,0 
2007			;	;ld a,FORTH_END_BUFFER 
2007			;	ex de, hl 
2007			;	;dec hl			 ; go back over the space delim at the end of word 
2007			;	;ld (hl),a 
2007			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2007			;	ld a,FORTH_END_BUFFER 
2007			;	ld (hl),a 
2007			;	inc hl 
2007			;	ld a,FORTH_END_BUFFER 
2007			;	ld (hl),a 
2007			; 
2007			;	; init the malloc area data 
2007			;	; set pc for in current area 
2007			;	;ld hl, (os_tok_malloc) 
2007			;	;inc hl 
2007			;	;inc hl 
2007			;	;inc hl 
2007			;	;ex de,hl 
2007			;	;ld hl, (os_tok_malloc) 
2007			;	;ld (hl),e 
2007			;	;inc hl 
2007			;	;ld (hl),d 
2007			; 
2007			; 
2007			;	ld hl,(os_tok_malloc) 
2007			;if DEBUG_FORTH_PARSE_KEY 
2007			;			DMARK "TKU" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	ret 
2007			 
2007			forthexec: 
2007			 
2007			; line exec: 
2007			; forth parser 
2007			 
2007			; 
2007			;       get current exec line on rsp 
2007			 
2007				FORTH_RSP_TOS 
2007 cd 4e 1b			call macro_forth_rsp_tos 
200a				endm 
# End of macro FORTH_RSP_TOS
200a			 
200a			;       restore current pc - hl points to malloc of data 
200a			 
200a				;ld e, (hl) 
200a				;inc hl 
200a				;ld d, (hl) 
200a				;ex de,hl 
200a			 
200a			 
200a			exec1: 
200a 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
200d			 
200d				; copy our PC to working vars  
200d 22 3a ea			ld (cli_ptr), hl                    ; here 
2010 22 38 ea			ld (cli_origptr), hl                ; here 
2013			 
2013 7e				ld a,(hl)                           ; here make hl be the ram ptr 
2014 fe 7f			cp FORTH_END_BUFFER 
2016 c8				ret z 
2017			 
2017				; skip any nulls 
2017			 
2017 fe 00			cp 0 
2019 20 03			jr nz, .execword 
201b 23				inc hl 
201c 18 ec			jr exec1 
201e			 
201e			 
201e			.execword: 
201e			 
201e			 
201e			 
201e			if DEBUG_FORTH_PARSE_EXEC 
201e						DMARK "KYQ" 
201e				CALLMONITOR 
201e			endif 
201e			;       while at start of word: 
201e			; get start of dict (in user area first) 
201e			 
201e 21 fa 60		ld hl, baseram 
2021			;ld hl, sysdict 
2021 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
2024			;           match word at pc 
2024			;           exec word 
2024			;           or push to dsp 
2024			;           forward to next token 
2024			;           if line term pop rsp and exit 
2024			;        
2024			 
2024			if DEBUG_FORTH_PARSE_EXEC 
2024						DMARK "KYq" 
2024				CALLMONITOR 
2024			endif 
2024			 
2024			; 
2024			; word comp 
2024			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2024			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2024			;    move to start of word  
2024			;    compare word to cli_token 
2024			 
2024			.execpnword:	; HL at start of a word in the dictionary to check 
2024			 
2024 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
2027			 
2027 cd be 20			call forth_tok_next 
202a			; tok next end here 
202a 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
202d eb				ex de, hl 
202e			 
202e			 
202e				; save the pointer of the current token - 1 to check against 
202e				 
202e 22 40 ea			ld (cli_token), hl   
2031				; TODO maybe remove below save if no debug 
2031				; save token string ptr for any debug later 
2031 23				inc hl  
2032 22 42 ea			ld (cli_origtoken), hl 
2035 2b				dec hl 
2036				; save pointer to the start of the next dictionay word 
2036 7e				ld a,(hl)   ; get string length 
2037 47				ld b,a 
2038			.execpnwordinc:  
2038 23				inc hl 
2039 10 fd			djnz .execpnwordinc 
203b 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
203e			 
203e				; now check the word token against the string being parsed 
203e			 
203e 2a 40 ea			ld hl,(cli_token) 
2041 23				inc hl     ; skip string length (use zero term instead to end) 
2042				;ld (cli_token), hl 
2042			 
2042			.execpnchar:    ; compare char between token and string to parse 
2042			 
2042			 
2042				;ld hl, (cli_token)     ; the dict word  
2042 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
2046			 
2046			 
2046			.execpncharl:    ; compare char between token and string to parse (loop) 
2046			 
2046 1a				ld a,(de) 
2047 cd 52 11			call toUpper 		; make sure the input string matches case 
204a be				cp (hl) 
204b			 
204b c2 64 20			jp nz, .execpnskipword	 ; no match so move to next word 
204e				 
204e			;    if same 
204e			;       scan for string terms 0 for token and 32 for input 
204e 46				ld b,(hl) 
204f 80				add b			 
2050 23				inc hl 
2051 13				inc de 
2052 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2054							; TODO need to make sure last word in zero term string is accounted for 
2054 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
2056			 
2056			 
2056				; at end of both strings so both are exact match 
2056			 
2056			;       skip ptr for next word 
2056			 
2056 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
2059 23				inc hl			 ; at next char 
205a 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
205d 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2060				 
2060				 
2060			 
2060			 
2060			 
2060			;       exec code block 
2060			if DEBUG_FORTH_JP 
2060				call clear_display 
2060				call update_display 
2060				call delay1s 
2060				ld hl, (cli_execword)     ; save for next check if no match on this word 
2060				ld a,h 
2060				ld hl, os_word_scratch 
2060				call hexout 
2060				ld hl, (cli_execword)     ; save for next check if no match on this word 
2060				ld a,l 
2060				ld hl, os_word_scratch+2 
2060				call hexout 
2060				ld hl, os_word_scratch+4 
2060				ld a,0 
2060				ld (hl),a 
2060				ld de,os_word_scratch 
2060				call str_at_display 
2060					ld a, display_row_2 
2060					call str_at_display 
2060				ld de, (cli_origtoken) 
2060				ld a, display_row_1+10 
2060					call str_at_display 
2060			 
2060				ld a,display_row_1 
2060				ld de, .foundword 
2060				ld a, display_row_3 
2060				call str_at_display 
2060				call update_display 
2060				call delay1s 
2060				call delay1s 
2060				call delay1s 
2060			endif 
2060			 
2060			if DEBUG_FORTH_PARSE_EXEC 
2060						DMARK "KYj" 
2060			endif 
2060				; TODO save the word pointer in this exec 
2060			 
2060 2a 3e ea			ld hl,(cli_execword) 
2063 e9				jp (hl) 
2064			 
2064			 
2064			;    if not same 
2064			;	scan for zero term 
2064			;	get ptr for next word 
2064			;	goto word comp 
2064			 
2064			.execpnskipword:	; get pointer to next word 
2064 2a 3c ea			ld hl,(cli_nextword) 
2067			 
2067 7e				ld a,(hl) 
2068 fe 00			cp WORD_SYS_END 
206a			;	cp 0 
206a 28 09			jr z, .execendofdict			 ; at end of words 
206c			 
206c			if DEBUG_FORTH_PARSE_EXEC 
206c						DMARK "KY4" 
206c			endif 
206c			if DEBUG_FORTH_PARSE_EXEC 
206c			 
206c				; see if disabled 
206c			 
206c			;	ld a, (os_view_disable) 
206c			;	cp '*' 
206c				ld a,(debug_vector) 
206c				cp $c9   ; RET 
206c				jr z, .noskip 
206c			 
206c			 
206c				ld de, .nowordfound 
206c				ld a, display_row_3 
206c				call str_at_display 
206c				call update_display 
206c				ld a, 100 
206c				call aDelayInMS 
206c				 
206c				if DEBUG_FORTH_PARSE_EXEC_SLOW 
206c					call delay250ms 
206c				endif 
206c			.noskip:  
206c			 
206c			endif	 
206c			 
206c 2a 38 ea			ld hl,(cli_origptr) 
206f 22 3a ea			ld (cli_ptr),hl 
2072			 
2072			if DEBUG_FORTH_PARSE_EXEC 
2072						DMARK "KY5" 
2072			endif 
2072 c3 24 20			jp .execpnword			; else go to next word 
2075			 
2075			.execendofdict:  
2075			 
2075			if DEBUG_FORTH_PARSE_EXEC 
2075						DMARK "KYe" 
2075			endif 
2075			if DEBUG_FORTH_PARSE_EXEC 
2075				; see if disabled 
2075			 
2075			;	ld a, (os_view_disable) 
2075			;	cp '*' 
2075				ld a,(debug_vector) 
2075				cp $c9   ; ret 
2075				jr z, .ispskip 
2075			 
2075				call clear_display 
2075				call update_display 
2075				call delay1s 
2075				ld de, (cli_origptr) 
2075				ld a, display_row_1 
2075				call str_at_display 
2075				 
2075				ld de, .enddict 
2075				ld a, display_row_3 
2075				call str_at_display 
2075				call update_display 
2075				ld a, 100 
2075				call aDelayInMS 
2075				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2075				call delay1s 
2075				call delay1s 
2075				call delay1s 
2075				endif 
2075			.ispskip:  
2075				 
2075			endif	 
2075			 
2075			 
2075			 
2075				; if the word is not a keyword then must be a literal so push it to stack 
2075			 
2075			; push token to stack to end of word 
2075			 
2075				STACKFRAME ON $1efe $2f9f 
2075				if DEBUG_STACK_IMB 
2075					if ON 
2075						exx 
2075						ld de, $1efe 
2075						ld a, d 
2075						ld hl, curframe 
2075						call hexout 
2075						ld a, e 
2075						ld hl, curframe+2 
2075						call hexout 
2075						ld hl, $1efe 
2075						push hl 
2075						ld hl, $2f9f 
2075						push hl 
2075						exx 
2075					endif 
2075				endif 
2075			endm 
# End of macro STACKFRAME
2075			 
2075 2a bc e5		ld hl,(os_tok_ptr) 
2078 cd f9 1c		call forth_apush 
207b			 
207b				STACKFRAMECHK ON $1efe $2f9f 
207b				if DEBUG_STACK_IMB 
207b					if ON 
207b						exx 
207b						ld hl, $2f9f 
207b						pop de   ; $2f9f 
207b						call cmp16 
207b						jr nz, .spnosame 
207b						ld hl, $1efe 
207b						pop de   ; $1efe 
207b						call cmp16 
207b						jr z, .spfrsame 
207b						.spnosame: call showsperror 
207b						.spfrsame: nop 
207b						exx 
207b					endif 
207b				endif 
207b			endm 
# End of macro STACKFRAMECHK
207b			 
207b			execnext: 
207b			 
207b			if DEBUG_FORTH_PARSE_EXEC 
207b						DMARK "KY>" 
207b			endif 
207b			; move past token to next word 
207b			 
207b 2a bc e5		ld hl, (os_tok_ptr) 
207e 3e 00		ld a, 0 
2080 01 ff 00		ld bc, 255     ; input buffer size 
2083 ed b1		cpir 
2085			 
2085			if DEBUG_FORTH_PARSE_EXEC 
2085						DMARK "KY!" 
2085				CALLMONITOR 
2085			endif	 
2085			; TODO this might place hl on the null, so will need to forward on??? 
2085			;inc hl   ; see if this gets onto the next item 
2085			 
2085			 
2085			; TODO pass a pointer to the buffer to push 
2085			; TODO call function to push 
2085			 
2085			; look for end of input 
2085			 
2085			;inc hl 
2085			;ld a,(hl) 
2085			;cp FORTH_END_BUFFER 
2085			;ret z 
2085			 
2085			 
2085 c3 0a 20		jp exec1 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			findnexttok: 
2088			 
2088				; hl is pointer to move 
2088				; de is the token to locate 
2088			 
2088					if DEBUG_FORTH 
2088						DMARK "NTK" 
2088						CALLMONITOR 
2088					endif 
2088 d5				push de 
2089			 
2089			.fnt1:	 
2089				; find first char of token to locate 
2089			 
2089 1a				ld a, (de) 
208a 4f				ld c,a 
208b 7e				ld a,(hl) 
208c cd 52 11			call toUpper 
208f					if DEBUG_FORTH 
208f						DMARK "NT1" 
208f						CALLMONITOR 
208f					endif 
208f b9				cp c 
2090			 
2090 28 03			jr z, .fnt2cmpmorefirst	 
2092			 
2092				; first char not found move to next char 
2092			 
2092 23				inc hl 
2093 18 f4			jr .fnt1 
2095			 
2095			.fnt2cmpmorefirst:	 
2095				; first char of token found.  
2095			 
2095 e5				push hl     ; save start of token just in case it is the right one 
2096 d9				exx 
2097 e1				pop hl        ; save it to hl' 
2098 d9				exx 
2099			 
2099			 
2099			.fnt2cmpmore:	 
2099				; compare the rest 
2099				 
2099 23				inc hl 
209a 13				inc de 
209b				 
209b 1a				ld a, (de) 
209c 4f				ld c,a 
209d 7e				ld a,(hl) 
209e cd 52 11			call toUpper 
20a1			 
20a1					if DEBUG_FORTH 
20a1						DMARK "NT2" 
20a1						CALLMONITOR 
20a1					endif 
20a1				; c has the token to find char 
20a1				; a has the mem to scan char 
20a1			 
20a1 b9				cp c 
20a2 28 04			jr z,.fntmatch1 
20a4			 
20a4				; they are not the same 
20a4			 
20a4					if DEBUG_FORTH 
20a4						DMARK "NT3" 
20a4						CALLMONITOR 
20a4					endif 
20a4 d1				pop de	; reset de token to look for 
20a5 d5				push de 
20a6 18 e1			jr .fnt1 
20a8				 
20a8			.fntmatch1: 
20a8			 
20a8				; is the same char a null which means we might have a full hit? 
20a8					if DEBUG_FORTH 
20a8						DMARK "NT4" 
20a8						CALLMONITOR 
20a8					endif 
20a8			 
20a8 fe 00			cp 0 
20aa 28 0b			jr z, .fntmatchyes 
20ac			 
20ac				; are we at the end of the token to find? 
20ac			 
20ac					if DEBUG_FORTH 
20ac						DMARK "NT5" 
20ac						CALLMONITOR 
20ac					endif 
20ac 3e 00			ld a, 0 
20ae b9				cp c 
20af			 
20af c2 99 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20b2			 
20b2					if DEBUG_FORTH 
20b2						DMARK "NT6" 
20b2						CALLMONITOR 
20b2					endif 
20b2				; token to find is exhusted but no match to stream 
20b2			 
20b2				; restore tok pointer and continue on 
20b2 d1				pop de 
20b3 d5				push de 
20b4 c3 89 20			jp .fnt1 
20b7			 
20b7			 
20b7			.fntmatchyes: 
20b7			 
20b7				; hl now contains the end of the found token 
20b7			 
20b7				; get rid of saved token pointer to find 
20b7			 
20b7 d1				pop de 
20b8			 
20b8					if DEBUG_FORTH 
20b8						DMARK "NT9" 
20b8						CALLMONITOR 
20b8					endif 
20b8			 
20b8				; hl will be on the null term so forward on 
20b8			 
20b8				; get back the saved start of the token 
20b8			 
20b8 d9				exx 
20b9 e5				push hl     ; save start of token just in case it is the right one 
20ba d9				exx 
20bb e1				pop hl        ; save it to hl 
20bc			 
20bc c9				ret 
20bd			 
20bd			 
20bd			; LIST needs to find a specific token   
20bd			; FORGET needs to find a spefici token 
20bd			 
20bd			; SAVE needs to find all tokens by flag 
20bd			; WORDS just needs to scan through all  by flag 
20bd			; UWORDS needs to scan through all by flag 
20bd			 
20bd			 
20bd			; given hl as pointer to start of dict look up string 
20bd			; return hl as pointer to start of word block 
20bd			; or 0 if not found 
20bd			 
20bd			forth_find_tok: 
20bd c9				ret 
20be			 
20be			; given hl as pointer to dict structure 
20be			; move to the next dict block structure 
20be			 
20be			forth_tok_next: 
20be				; hl now points to the address of the next word pointer  
20be				; TODO skip compiled symbol for now 
20be			;	push de 
20be 23				inc hl 
20bf 5e				ld e, (hl) 
20c0 23				inc hl 
20c1 56				ld d, (hl) 
20c2 23				inc hl 
20c3			 
20c3 eb				ex de,hl 
20c4			if DEBUG_FORTH_PARSE_NEXTWORD 
20c4				push bc 
20c4				ld bc, (cli_nextword) 
20c4						DMARK "NXW" 
20c4				CALLMONITOR 
20c4				pop bc 
20c4			endif 
20c4			;	pop de	 
20c4 c9				ret 
20c5			 
20c5			 
20c5			 
20c5			; eof 
# End of file forth_parserv6.asm
20c5				include "forth_wordsv4.asm" 
20c5			 
20c5			; the core word dictionary v4 
20c5			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20c5			 
20c5			; this is a linked list for each of the system words used 
20c5			; user defined words will follow the same format but will be in ram 
20c5			 
20c5			 
20c5			; 
20c5			; 
20c5			; define linked list: 
20c5			; 
20c5			; 1. compiled byte op code 
20c5			; 2. len of text word 
20c5			; 3. text word 
20c5			; 4. ptr to next dictionary word 
20c5			; 5. asm, calls etc for the word 
20c5			; 
20c5			;  if 1 == 0 then last word in dict  
20c5			;   
20c5			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20c5			;  
20c5			;  
20c5			; create basic standard set of words 
20c5			; 
20c5			;  
20c5			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20c5			; 2DUP 2DROP 2SWAP  
20c5			; @ C@ - get byte  
20c5			; ! C! - store byte 
20c5			; 0< true if less than zero 
20c5			; 0= true if zero 
20c5			; < >  
20c5			; = true if same 
20c5			; variables 
20c5			 
20c5			 
20c5			; Hardware specific words I may need 
20c5			; 
20c5			; IN OUT  
20c5			; calls to key util functions 
20c5			; calls to hardward abstraction stuff 
20c5			; easy control of frame buffers and lcd i/o 
20c5			; keyboard  
20c5			 
20c5			 
20c5			;DICT: macro 
20c5			; op_code, len, word, next 
20c5			;    word: 
20c5			;    db op_code 
20c5			;    ds word zero term 
20c5			;    dw next 
20c5			;    endm 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			; op code 1 is a flag for user define words which are to be handled differently 
20c5			 
20c5			 
20c5			; 
20c5			; 
20c5			;    TODO on entry to a word this should be the expected environment 
20c5			;    hl - tos value if number then held, if string this is the ptr 
20c5			;    de -  
20c5			 
20c5			 
20c5			; opcode ranges 
20c5			; 0 - end of word dict 
20c5			; 255 - user define words 
20c5			 
20c5			sysdict: 
20c5			include "forth_opcodes.asm" 
20c5			; op codes for forth keywords 
20c5			 
20c5			; Changing use of opcodes to flag is the word exists in compiled form or not.  
20c5			; This provides a means to compile uwords if required for higher performance 
20c5			; by avoiding the use of the keyword parser and just jumping directly to the code 
20c5			; Actually there is already a flag for if the code exists as binary thinking about it... 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			; free to use code 0  
20c5				OPCODE_HEAP: equ  1 
20c5				OPCODE_EXEC: equ 2 
20c5				OPCODE_DUP: equ 3 
20c5				OPCODE_SWAP: equ 4 
20c5				OPCODE_COLN: equ 5 
20c5				OPCODE_SCOLN: equ 6 
20c5				OPCODE_DROP: equ 7 
20c5				OPCODE_DUP2: equ 8 
20c5				OPCODE_DROP2: equ 9 
20c5				OPCODE_SWAP2: equ 10 
20c5				OPCODE_AT: equ 11 
20c5				OPCODE_CAT: equ 12 
20c5				OPCODE_BANG: equ 13 
20c5				OPCODE_CBANG: equ 14 
20c5				OPCODE_SCALL: equ 15 
20c5				OPCODE_DEPTH: equ 16 
20c5				OPCODE_OVER: equ 17 
20c5				OPCODE_PAUSE: equ 18 
20c5				OPCODE_PAUSES: equ 19 
20c5				OPCODE_ROT: equ 20 
20c5			;free to reuse	OPCODE_WORDS: equ 21 
20c5			        OPCODE_NOT: equ 21 
20c5				OPCODE_UWORDS: equ 22 
20c5				OPCODE_BP: equ 23 
20c5				OPCODE_MONITOR: equ 24  
20c5				OPCODE_MALLOC: equ 25 
20c5				OPCODE_FREE: equ 26 
20c5				OPCODE_LIST: equ 27 
20c5				OPCODE_FORGET: equ 28 
20c5				OPCODE_NOP: equ 29 
20c5				OPCODE_COMO: equ 30 
20c5				OPCODE_COMC: equ 31 
20c5			;free to reuse	OPCODE_ENDCORE: equ 32 
20c5				OPCODE_AFTERSOUND: equ 33 
20c5				OPCODE_GP2: equ 34 
20c5				OPCODE_GP3: equ 35 
20c5				OPCODE_GP4: equ 36 
20c5				OPCODE_SIN: equ 37 
20c5				OPCODE_SOUT: equ 38 
20c5				OPCODE_SPIO: equ 39 
20c5				OPCODE_SPICEH: equ 40 
20c5				OPCODE_SPIOb: equ 41 
20c5				OPCODE_SPII: equ 42 
20c5				OPCODE_SESEL: equ 43 
20c5				OPCODE_CARTDEV: equ 44 
20c5			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20c5				OPCODE_FB: equ 46 
20c5				OPCODE_EMIT: equ 47 
20c5				OPCODE_DOTH: equ 48 
20c5				OPCODE_DOTF: equ 49 
20c5				OPCODE_DOT: equ 50 
20c5				OPCODE_CLS: equ 51 
20c5				OPCODE_DRAW: equ 52 
20c5				OPCODE_DUMP: equ 53 
20c5				OPCODE_CDUMP: equ 54 
20c5				OPCODE_DAT: equ 55 
20c5				OPCODE_HOME: equ 56 
20c5				OPCODE_SPACE: equ 57 
20c5				OPCODE_SPACES: equ 58 
20c5				OPCODE_SCROLL: equ 59 
20c5				OPCODE_ATQ: equ 60 
20c5				OPCODE_AUTODSP: equ 61 
20c5				OPCODE_MENU: equ 62 
20c5			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20c5				OPCODE_THEN: equ 64 
20c5				OPCODE_ELSE: equ 65 
20c5				OPCODE_DO: equ 66 
20c5				OPCODE_LOOP: equ 67 
20c5				OPCODE_I: equ 68 
20c5				OPCODE_DLOOP: equ 69  
20c5				OPCODE_REPEAT: equ 70  
20c5				OPCODE_UNTIL: equ 71 
20c5				OPCODE_ENDFLOW: equ 72 
20c5				OPCODE_WAITK: equ 73 
20c5				OPCODE_ACCEPT: equ 74 
20c5				OPCODE_EDIT: equ 75 
20c5			;free to reuse	OPCODE_ENDKEY: equ 76 
20c5				OPCODE_LZERO: equ 77 
20c5				OPCODE_TZERO: equ 78 
20c5				OPCODE_LESS: equ 79 
20c5				OPCODE_GT: equ 80 
20c5				OPCODE_EQUAL: equ 81  
20c5			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20c5				OPCODE_NEG: equ 83 
20c5				OPCODE_DIV: equ 84 
20c5				OPCODE_MUL: equ 85 
20c5				OPCODE_MIN: equ 86 
20c5				OPCODE_MAX: equ 87 
20c5				OPCODE_RND16: equ 88 
20c5				OPCODE_RND8: equ 89 
20c5				OPCODE_RND: equ 90 
20c5			;free to reuse	OPCODE_ENDMATHS: equ 91  
20c5				OPCODE_BYNAME: equ 92 
20c5				OPCODE_DIR: equ 93 
20c5				OPCODE_SAVE: equ 94 
20c5				OPCODE_LOAD: equ 95 
20c5				OPCODE_BSAVE: equ 96 
20c5				OPCODE_BLOAD: equ 97 
20c5				OPCODE_SEO: equ 98  
20c5				OPCODE_SEI: equ 99 
20c5				OPCODE_SFREE: equ 100 
20c5				OPCODE_SIZE: equ 101 
20c5				OPCODE_CREATE: equ 102 
20c5				OPCODE_APPEND: equ 103 
20c5				OPCODE_SDEL: equ 104 
20c5				OPCODE_OPEN: equ 105 
20c5				OPCODE_READ: equ 106 
20c5				OPCODE_EOF: equ 106 
20c5				OPCODE_FORMAT: equ 107 
20c5				OPCODE_LABEL: equ 108 
20c5				OPCODE_LABELS: equ 109 
20c5			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20c5				OPCODE_UPPER: equ 111 
20c5				OPCODE_LOWER: equ 112 
20c5				OPCODE_SUBSTR: equ 113 
20c5				OPCODE_LEFT: equ 114 
20c5				OPCODE_RIGHT: equ 115 
20c5				OPCODE_STR2NUM: equ 116 
20c5				OPCODE_NUM2STR: equ 117 
20c5				OPCODE_CONCAT: equ 118 
20c5				OPCODE_FIND: equ 119 
20c5				OPCODE_LEN: equ 120 
20c5				OPCODE_CHAR: equ 121 
20c5			; free to reuse	OPCODE_STRLEN: equ 122 
20c5			; free to reuse	OPCODE_ENDSTR: equ 123 
20c5				OPCODE_V0S: equ 124 
20c5				OPCODE_V0Q: equ 125 
20c5				OPCODE_V1S: equ 126 
20c5				OPCODE_V1Q: equ 127 
20c5				OPCODE_V2S: equ 128 
20c5				OPCODE_V2Q: equ 129 
20c5				OPCODE_V3S: equ 130 
20c5				OPCODE_V3Q: equ 131 
20c5			;free to reuse	OPCODE_END: equ 132 
20c5				OPCODE_ZDUP: equ 133 
20c5			 
20c5			; eof 
# End of file forth_opcodes.asm
20c5			 
20c5			include "forth_words_core.asm" 
20c5			 
20c5			; | ## Core Words 
20c5			 
20c5			;if MALLOC_4 
20c5			 
20c5			.HEAP: 
20c5			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20c5 15				db WORD_SYS_CORE+OPCODE_HEAP             
20c6 04 21			dw .EXEC            
20c8 05				db 4 + 1 
20c9 .. 00			db "HEAP",0              
20ce				endm 
# End of macro CWHEAD
20ce			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20ce			; | | u1 - Current number of bytes in the heap 
20ce			; | | u2 - Remaining bytes left on the heap 
20ce			; | |  
20ce			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20ce			 
20ce			 
20ce				if DEBUG_FORTH_WORDS_KEY 
20ce					DMARK "HEP" 
20ce f5				push af  
20cf 3a e3 20			ld a, (.dmark)  
20d2 32 65 ee			ld (debug_mark),a  
20d5 3a e4 20			ld a, (.dmark+1)  
20d8 32 66 ee			ld (debug_mark+1),a  
20db 3a e5 20			ld a, (.dmark+2)  
20de 32 67 ee			ld (debug_mark+2),a  
20e1 18 03			jr .pastdmark  
20e3 ..			.dmark: db "HEP"  
20e6 f1			.pastdmark: pop af  
20e7			endm  
# End of macro DMARK
20e7					CALLMONITOR 
20e7 cd 6f ee			call debug_vector  
20ea				endm  
# End of macro CALLMONITOR
20ea				endif 
20ea 2a 04 61			ld hl, (free_list )      
20ed 11 09 61			ld de, heap_start 
20f0			 
20f0 ed 52			sbc hl, de  
20f2			 
20f2 cd 90 1b			call forth_push_numhl 
20f5			 
20f5			 
20f5 ed 5b 04 61		ld de, (free_list )      
20f9 21 96 e2			ld hl, heap_end 
20fc			 
20fc ed 52			sbc hl, de 
20fe			 
20fe cd 90 1b			call forth_push_numhl 
2101				 
2101			 
2101				 
2101			 
2101			 
2101			 
2101				NEXTW 
2101 c3 81 1f			jp macro_next 
2104				endm 
# End of macro NEXTW
2104			;endif 
2104			 
2104			.EXEC: 
2104			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2104			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2104			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2104			;; > > 
2104			;; > >   
2104			;	STACKFRAME OFF $5efe $5f9f 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "EXE" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	FORTH_DSP_POP 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX1" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;;	ld e,(hl) 
2104			;;	inc hl 
2104			;;	ld d,(hl) 
2104			;;	ex de,hl 
2104			; 
2104			;;		if DEBUG_FORTH_WORDS 
2104			;;			DMARK "EX2" 
2104			;;			CALLMONITOR 
2104			;;		endif 
2104			;	push hl 
2104			; 
2104			;	;ld a, 0 
2104			;	;ld a, FORTH_END_BUFFER 
2104			;	call strlenz 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include term 
2104			;	inc hl   ; include term 
2104			;	ld b,0 
2104			;	ld c,l 
2104			;	pop hl 
2104			;	ld de, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir 
2104			; 
2104			; 
2104			;	ld hl, execscratch 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXe" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	call forthexec 
2104			;;	call forthexec_cleanup 
2104			;;	call forthparse 
2104			;;	call forthexec 
2104			; 
2104			;	STACKFRAMECHK OFF $5efe $5f9f 
2104			; 
2104			;	; an immediate word so no need to process any more words 
2104			;	ret 
2104			;	NEXTW 
2104			 
2104			; dead code - old version  
2104			;	FORTH_RSP_NEXT 
2104			 
2104			;  
2104			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2104			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2104			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2104			;	push hl 
2104			;	push de 
2104			;	push bc 
2104			; 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "EXR" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			; 
2104			; 
2104			;	;v5 FORTH_DSP_VALUE 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	; TODO do string type checks 
2104			; 
2104			;;v5	inc hl   ; skip type 
2104			; 
2104			;	push hl  ; source code  
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX1" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ld a, 0 
2104			;	call strlent 
2104			; 
2104			;	inc hl 
2104			;	inc hl 
2104			;	inc hl 
2104			;	inc hl 
2104			; 
2104			;	push hl    ; size 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX2" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	call malloc 
2104			; 
2104			;	ex de, hl    ; de now contains malloc area 
2104			;	pop bc   	; get byte count 
2104			;	pop hl      ; get string to copy 
2104			; 
2104			;	push de     ; save malloc for free later 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir       ; duplicate string 
2104			; 
2104			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2104			;	 
2104			;	; TODO fix the parse would be better than this...  
2104			;	ex de, hl 
2104			;	dec hl 
2104			;	ld a, 0 
2104			;	ld (hl), a 
2104			;	dec hl 
2104			;	ld a, ' ' 
2104			;	ld (hl), a 
2104			;	dec hl 
2104			;	ld (hl), a 
2104			; 
2104			;	dec hl 
2104			;	ld (hl), a 
2104			; 
2104			; 
2104			;	FORTH_DSP_POP  
2104			; 
2104			;	pop hl     
2104			;	push hl    ; save malloc area 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX4" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	call forthexec 
2104			;	 
2104			;	pop hl 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX5" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			; 
2104			;	if FORTH_ENABLE_FREE 
2104			;	call free 
2104			;	endif 
2104			; 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX6" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			; 
2104			;	pop bc 
2104			;	pop de 
2104			;	pop hl 
2104			;;	FORTH_RSP_POP	  
2104			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2104			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2104			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2104			; 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX7" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			;	NEXTW 
2104			 
2104			;.STKEXEC: 
2104			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2104			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2104			; 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "STX" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	ld (store_tmp1), hl    ; count 
2104			; 
2104			;	FORTH_DSP_POP 
2104			;.stkexec1: 
2104			;	ld hl, (store_tmp1)   ; count 
2104			;	ld a, 0 
2104			;	cp l 
2104			;	ret z 
2104			; 
2104			;	dec hl 
2104			;	ld (store_tmp1), hl    ; count 
2104			;	 
2104			;	FORTH_DSP_VALUEHL 
2104			;	push hl 
2104			;	 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXp" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	FORTH_DSP_POP 
2104			; 
2104			;	call strlenz 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include zero term to copy 
2104			;	ld b,0 
2104			;	ld c,l 
2104			;	pop hl 
2104			;	ld de, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir 
2104			; 
2104			; 
2104			;	ld hl, execscratch 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXP" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	ld hl, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXx" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	call forthexec 
2104			; 
2104			;	jp .stkexec1 
2104			; 
2104			;	ret 
2104			 
2104			 
2104			.DUP: 
2104			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2104 17				db WORD_SYS_CORE+OPCODE_DUP             
2105 7a 21			dw .ZDUP            
2107 04				db 3 + 1 
2108 .. 00			db "DUP",0              
210c				endm 
# End of macro CWHEAD
210c			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
210c			 
210c				if DEBUG_FORTH_WORDS_KEY 
210c					DMARK "DUP" 
210c f5				push af  
210d 3a 21 21			ld a, (.dmark)  
2110 32 65 ee			ld (debug_mark),a  
2113 3a 22 21			ld a, (.dmark+1)  
2116 32 66 ee			ld (debug_mark+1),a  
2119 3a 23 21			ld a, (.dmark+2)  
211c 32 67 ee			ld (debug_mark+2),a  
211f 18 03			jr .pastdmark  
2121 ..			.dmark: db "DUP"  
2124 f1			.pastdmark: pop af  
2125			endm  
# End of macro DMARK
2125					CALLMONITOR 
2125 cd 6f ee			call debug_vector  
2128				endm  
# End of macro CALLMONITOR
2128				endif 
2128			 
2128				FORTH_DSP 
2128 cd 5b 1d			call macro_forth_dsp 
212b				endm 
# End of macro FORTH_DSP
212b			 
212b 7e				ld a, (HL) 
212c fe 01			cp DS_TYPE_STR 
212e 20 25			jr nz, .dupinum 
2130			 
2130				; push another string 
2130			 
2130				FORTH_DSP_VALUEHL     		 
2130 cd 95 1d			call macro_dsp_valuehl 
2133				endm 
# End of macro FORTH_DSP_VALUEHL
2133			 
2133			if DEBUG_FORTH_WORDS 
2133				DMARK "DUs" 
2133 f5				push af  
2134 3a 48 21			ld a, (.dmark)  
2137 32 65 ee			ld (debug_mark),a  
213a 3a 49 21			ld a, (.dmark+1)  
213d 32 66 ee			ld (debug_mark+1),a  
2140 3a 4a 21			ld a, (.dmark+2)  
2143 32 67 ee			ld (debug_mark+2),a  
2146 18 03			jr .pastdmark  
2148 ..			.dmark: db "DUs"  
214b f1			.pastdmark: pop af  
214c			endm  
# End of macro DMARK
214c				CALLMONITOR 
214c cd 6f ee			call debug_vector  
214f				endm  
# End of macro CALLMONITOR
214f			endif 
214f cd fe 1b			call forth_push_str 
2152			 
2152				NEXTW 
2152 c3 81 1f			jp macro_next 
2155				endm 
# End of macro NEXTW
2155			 
2155			 
2155			.dupinum: 
2155				 
2155			 
2155			 
2155				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2155 cd 95 1d			call macro_dsp_valuehl 
2158				endm 
# End of macro FORTH_DSP_VALUEHL
2158			 
2158			; TODO add floating point number detection 
2158			 
2158			if DEBUG_FORTH_WORDS 
2158				DMARK "DUi" 
2158 f5				push af  
2159 3a 6d 21			ld a, (.dmark)  
215c 32 65 ee			ld (debug_mark),a  
215f 3a 6e 21			ld a, (.dmark+1)  
2162 32 66 ee			ld (debug_mark+1),a  
2165 3a 6f 21			ld a, (.dmark+2)  
2168 32 67 ee			ld (debug_mark+2),a  
216b 18 03			jr .pastdmark  
216d ..			.dmark: db "DUi"  
2170 f1			.pastdmark: pop af  
2171			endm  
# End of macro DMARK
2171				CALLMONITOR 
2171 cd 6f ee			call debug_vector  
2174				endm  
# End of macro CALLMONITOR
2174			endif 
2174			 
2174 cd 90 1b			call forth_push_numhl 
2177				NEXTW 
2177 c3 81 1f			jp macro_next 
217a				endm 
# End of macro NEXTW
217a			.ZDUP: 
217a			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
217a 99				db WORD_SYS_CORE+OPCODE_ZDUP             
217b b2 21			dw .SWAP            
217d 05				db 4 + 1 
217e .. 00			db "?DUP",0              
2183				endm 
# End of macro CWHEAD
2183			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
2183			 
2183				if DEBUG_FORTH_WORDS_KEY 
2183					DMARK "qDU" 
2183 f5				push af  
2184 3a 98 21			ld a, (.dmark)  
2187 32 65 ee			ld (debug_mark),a  
218a 3a 99 21			ld a, (.dmark+1)  
218d 32 66 ee			ld (debug_mark+1),a  
2190 3a 9a 21			ld a, (.dmark+2)  
2193 32 67 ee			ld (debug_mark+2),a  
2196 18 03			jr .pastdmark  
2198 ..			.dmark: db "qDU"  
219b f1			.pastdmark: pop af  
219c			endm  
# End of macro DMARK
219c					CALLMONITOR 
219c cd 6f ee			call debug_vector  
219f				endm  
# End of macro CALLMONITOR
219f				endif 
219f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
219f cd 95 1d			call macro_dsp_valuehl 
21a2				endm 
# End of macro FORTH_DSP_VALUEHL
21a2			 
21a2 e5				push hl 
21a3			 
21a3				; is it a zero? 
21a3			 
21a3 3e 00			ld a, 0 
21a5 84				add h 
21a6 85				add l 
21a7			 
21a7 e1				pop hl 
21a8			 
21a8 fe 00			cp 0 
21aa 28 03			jr z, .dup2orig 
21ac			 
21ac			 
21ac cd 90 1b			call forth_push_numhl 
21af			 
21af			 
21af			; TODO add floating point number detection 
21af			 
21af			.dup2orig: 
21af			 
21af				NEXTW 
21af c3 81 1f			jp macro_next 
21b2				endm 
# End of macro NEXTW
21b2			.SWAP: 
21b2			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
21b2 18				db WORD_SYS_CORE+OPCODE_SWAP             
21b3 06 22			dw .COLN            
21b5 05				db 4 + 1 
21b6 .. 00			db "SWAP",0              
21bb				endm 
# End of macro CWHEAD
21bb			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
21bb				if DEBUG_FORTH_WORDS_KEY 
21bb					DMARK "SWP" 
21bb f5				push af  
21bc 3a d0 21			ld a, (.dmark)  
21bf 32 65 ee			ld (debug_mark),a  
21c2 3a d1 21			ld a, (.dmark+1)  
21c5 32 66 ee			ld (debug_mark+1),a  
21c8 3a d2 21			ld a, (.dmark+2)  
21cb 32 67 ee			ld (debug_mark+2),a  
21ce 18 03			jr .pastdmark  
21d0 ..			.dmark: db "SWP"  
21d3 f1			.pastdmark: pop af  
21d4			endm  
# End of macro DMARK
21d4					CALLMONITOR 
21d4 cd 6f ee			call debug_vector  
21d7				endm  
# End of macro CALLMONITOR
21d7				endif 
21d7			 
21d7			; DONE Use os stack swap memory 
21d7			 
21d7				FORTH_DSP_PTR 0     ; TOS 
21d7 2a e8 e9			ld hl,(cli_data_sp) 
21da 11 00 00			ld de, 0 * 3 
21dd ed 52			sbc hl, de 
21df				endm 
# End of macro FORTH_DSP_PTR
21df cd cd 1e			call hltostack1 
21e2			  
21e2				FORTH_DSP_PTR 1     ; TOS 
21e2 2a e8 e9			ld hl,(cli_data_sp) 
21e5 11 03 00			ld de, 1 * 3 
21e8 ed 52			sbc hl, de 
21ea				endm 
# End of macro FORTH_DSP_PTR
21ea cd d3 1e			call hltostack2 
21ed			 
21ed				FORTH_DSP_PTR 0     ; TOS 
21ed 2a e8 e9			ld hl,(cli_data_sp) 
21f0 11 00 00			ld de, 0 * 3 
21f3 ed 52			sbc hl, de 
21f5				endm 
# End of macro FORTH_DSP_PTR
21f5 cd eb 1e			call hlfromstack2 
21f8			 
21f8				FORTH_DSP_PTR 1     ; TOS 
21f8 2a e8 e9			ld hl,(cli_data_sp) 
21fb 11 03 00			ld de, 1 * 3 
21fe ed 52			sbc hl, de 
2200				endm 
# End of macro FORTH_DSP_PTR
2200 cd e5 1e			call hlfromstack1 
2203			;	FORTH_DSP_VALUEHL 
2203			;	push hl     ; w2 
2203			; 
2203			;	FORTH_DSP_POP 
2203			; 
2203			;	FORTH_DSP_VALUEHL 
2203			; 
2203			;	FORTH_DSP_POP 
2203			; 
2203			;	pop de     ; w2	, hl = w1 
2203			; 
2203			;	ex de, hl 
2203			;	push de 
2203			; 
2203			;	call forth_push_numhl 
2203			; 
2203			;	pop hl 
2203			; 
2203			;	call forth_push_numhl 
2203				 
2203			 
2203				NEXTW 
2203 c3 81 1f			jp macro_next 
2206				endm 
# End of macro NEXTW
2206			.COLN: 
2206			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2206 19				db WORD_SYS_CORE+OPCODE_COLN             
2207 92 23			dw .SCOLN            
2209 02				db 1 + 1 
220a .. 00			db ":",0              
220c				endm 
# End of macro CWHEAD
220c			; | : ( -- )         Create new word | DONE 
220c			 
220c				if DEBUG_FORTH_WORDS_KEY 
220c					DMARK "CLN" 
220c f5				push af  
220d 3a 21 22			ld a, (.dmark)  
2210 32 65 ee			ld (debug_mark),a  
2213 3a 22 22			ld a, (.dmark+1)  
2216 32 66 ee			ld (debug_mark+1),a  
2219 3a 23 22			ld a, (.dmark+2)  
221c 32 67 ee			ld (debug_mark+2),a  
221f 18 03			jr .pastdmark  
2221 ..			.dmark: db "CLN"  
2224 f1			.pastdmark: pop af  
2225			endm  
# End of macro DMARK
2225					CALLMONITOR 
2225 cd 6f ee			call debug_vector  
2228				endm  
# End of macro CALLMONITOR
2228				endif 
2228			STACKFRAME OFF $8efe $989f 
2228				if DEBUG_STACK_IMB 
2228					if OFF 
2228						exx 
2228						ld de, $8efe 
2228						ld a, d 
2228						ld hl, curframe 
2228						call hexout 
2228						ld a, e 
2228						ld hl, curframe+2 
2228						call hexout 
2228						ld hl, $8efe 
2228						push hl 
2228						ld hl, $989f 
2228						push hl 
2228						exx 
2228					endif 
2228				endif 
2228			endm 
# End of macro STACKFRAME
2228			; get parser buffer length  of new word 
2228			 
2228			 
2228			 
2228				; move tok past this to start of name defintition 
2228				; TODO get word to define 
2228				; TODO Move past word token 
2228				; TODO get length of string up to the ';' 
2228			 
2228 2a bc e5		ld hl, (os_tok_ptr) 
222b 23			inc hl 
222c 23			inc hl 
222d			 
222d 3e 3b		ld a, ';' 
222f cd 66 11		call strlent 
2232			 
2232 7d			ld a,l 
2233 32 ab e2		ld (os_new_parse_len), a 
2236			 
2236			 
2236			if DEBUG_FORTH_UWORD 
2236 ed 5b bc e5	ld de, (os_tok_ptr) 
223a					DMARK ":01" 
223a f5				push af  
223b 3a 4f 22			ld a, (.dmark)  
223e 32 65 ee			ld (debug_mark),a  
2241 3a 50 22			ld a, (.dmark+1)  
2244 32 66 ee			ld (debug_mark+1),a  
2247 3a 51 22			ld a, (.dmark+2)  
224a 32 67 ee			ld (debug_mark+2),a  
224d 18 03			jr .pastdmark  
224f ..			.dmark: db ":01"  
2252 f1			.pastdmark: pop af  
2253			endm  
# End of macro DMARK
2253			CALLMONITOR 
2253 cd 6f ee			call debug_vector  
2256				endm  
# End of macro CALLMONITOR
2256			endif 
2256			 
2256			; 
2256			;  new word memory layout: 
2256			;  
2256			;    : adg 6666 ;  
2256			; 
2256			;    db   1     ; user defined word  
2256 23			inc hl    
2257			;    dw   sysdict 
2257 23			inc hl 
2258 23			inc hl 
2259			;    db <word len>+1 (for null) 
2259 23			inc hl 
225a			;    db .... <word> 
225a			; 
225a			 
225a 23			inc hl    ; some extras for the word preamble before the above 
225b 23			inc hl 
225c 23			inc hl 
225d 23			inc hl 
225e 23			inc hl 
225f 23			inc hl 
2260 23			inc hl  
2261 23			inc hl 
2262 23			inc hl 
2263 23			inc hl 
2264 23			inc hl 
2265 23			inc hl 
2266 23			inc hl 
2267 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2268			;       exec word buffer 
2268			;	<ptr word>   
2268 23			inc hl 
2269 23			inc hl 
226a			;       <word list><null term> 7F final term 
226a			 
226a			 
226a			if DEBUG_FORTH_UWORD 
226a					DMARK ":02" 
226a f5				push af  
226b 3a 7f 22			ld a, (.dmark)  
226e 32 65 ee			ld (debug_mark),a  
2271 3a 80 22			ld a, (.dmark+1)  
2274 32 66 ee			ld (debug_mark+1),a  
2277 3a 81 22			ld a, (.dmark+2)  
227a 32 67 ee			ld (debug_mark+2),a  
227d 18 03			jr .pastdmark  
227f ..			.dmark: db ":02"  
2282 f1			.pastdmark: pop af  
2283			endm  
# End of macro DMARK
2283			CALLMONITOR 
2283 cd 6f ee			call debug_vector  
2286				endm  
# End of macro CALLMONITOR
2286			endif 
2286			 
2286			 
2286				; malloc the size 
2286			 
2286 cd d0 11			call malloc 
2289 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
228c			 
228c			;    db   1     ; user defined word  
228c 3e 01			ld a, WORD_SYS_UWORD  
228e 77				ld (hl), a 
228f			 
228f 23			inc hl    
2290			;    dw   sysdict 
2290 11 c5 20		ld de, sysdict       ; continue on with the scan to the system dict 
2293 73			ld (hl), e 
2294 23			inc hl 
2295 72			ld (hl), d 
2296 23			inc hl 
2297			 
2297			 
2297			;    Setup dict word 
2297			 
2297 23			inc hl 
2298 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
229b			 
229b			; 1. get length of dict word 
229b			 
229b			 
229b 2a bc e5		ld hl, (os_tok_ptr) 
229e 23			inc hl 
229f 23			inc hl    ; position to start of dict word 
22a0 3e 00		ld a, 0 
22a2 cd 66 11		call strlent 
22a5			 
22a5			 
22a5 23			inc hl    ; to include null??? 
22a6			 
22a6			; write length of dict word 
22a6			 
22a6 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
22aa 1b			dec de 
22ab eb			ex de, hl 
22ac 73			ld (hl), e 
22ad eb			ex de, hl 
22ae			 
22ae			 
22ae			 
22ae			; copy  
22ae 4d			ld c, l 
22af 06 00		ld b, 0 
22b1 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
22b5 2a bc e5		ld hl, (os_tok_ptr) 
22b8 23			inc hl 
22b9 23			inc hl    ; position to start of dict word 
22ba			 
22ba			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
22ba			 
22ba			; TODO need to convert word to upper case 
22ba			 
22ba			ucasetok:	 
22ba 7e			ld a,(hl) 
22bb cd 52 11		call toUpper 
22be 77			ld (hl),a 
22bf ed a0		ldi 
22c1 f2 ba 22		jp p, ucasetok 
22c4			 
22c4			 
22c4			 
22c4			; de now points to start of where the word body code should be placed 
22c4 ed 53 a7 e2	ld (os_new_work_ptr), de 
22c8			; hl now points to the words to throw at forthexec which needs to be copied 
22c8 22 a5 e2		ld (os_new_src_ptr), hl 
22cb			 
22cb			; TODO add 'call to forthexec' 
22cb			 
22cb			if DEBUG_FORTH_UWORD 
22cb c5			push bc 
22cc ed 4b ad e2	ld bc, (os_new_malloc) 
22d0					DMARK ":0x" 
22d0 f5				push af  
22d1 3a e5 22			ld a, (.dmark)  
22d4 32 65 ee			ld (debug_mark),a  
22d7 3a e6 22			ld a, (.dmark+1)  
22da 32 66 ee			ld (debug_mark+1),a  
22dd 3a e7 22			ld a, (.dmark+2)  
22e0 32 67 ee			ld (debug_mark+2),a  
22e3 18 03			jr .pastdmark  
22e5 ..			.dmark: db ":0x"  
22e8 f1			.pastdmark: pop af  
22e9			endm  
# End of macro DMARK
22e9			CALLMONITOR 
22e9 cd 6f ee			call debug_vector  
22ec				endm  
# End of macro CALLMONITOR
22ec c1			pop bc 
22ed			endif 
22ed			 
22ed			 
22ed			; create word preamble which should be: 
22ed			 
22ed			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
22ed			 
22ed			;    ld hl, <word code> 
22ed			;    jp user_exec 
22ed			;    <word code bytes> 
22ed			 
22ed			 
22ed			;	inc de     ; TODO ??? or are we already past the word's null 
22ed eb			ex de, hl 
22ee			 
22ee 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
22f0			 
22f0 23			inc hl 
22f1 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
22f4 23			inc hl 
22f5			 
22f5 23			inc hl 
22f6 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
22f8			 
22f8 01 80 4e		ld bc, user_exec 
22fb 23			inc hl 
22fc 71			ld (hl), c     ; poke address of user_exec 
22fd 23			inc hl 
22fe 70			ld (hl), b     
22ff			; 
22ff			;	inc hl 
22ff			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
22ff			; 
22ff			; 
22ff			;	ld bc, macro_forth_rsp_next 
22ff			;	inc hl 
22ff			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
22ff			;	inc hl 
22ff			;	ld (hl), b     
22ff			; 
22ff			;	inc hl 
22ff			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
22ff			; 
22ff			; 
22ff			;	inc hl 
22ff			;	ld bc, forthexec 
22ff			;	ld (hl), c     ; poke address of forthexec 
22ff			;	inc hl 
22ff			;	ld (hl), b      
22ff			; 
22ff			;	inc hl 
22ff			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
22ff			; 
22ff			;	ld bc, user_dict_next 
22ff			;	inc hl 
22ff			;	ld (hl), c     ; poke address of forthexec 
22ff			;	inc hl 
22ff			;	ld (hl), b      
22ff			 
22ff			; hl is now where we need to copy the word byte data to save this 
22ff			 
22ff 23			inc hl 
2300 22 a3 e2		ld (os_new_exec), hl 
2303			 
2303			; copy definition 
2303			 
2303 eb			ex de, hl 
2304			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
2304			;	inc de    ; skip the PC for this parse 
2304 3a ab e2		ld a, (os_new_parse_len) 
2307 4f			ld c, a 
2308 06 00		ld b, 0 
230a ed b0		ldir		 ; copy defintion 
230c			 
230c			 
230c			; poke the address of where the new word bytes live for forthexec 
230c			 
230c 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
230f			 
230f ed 5b a3 e2	ld de, (os_new_exec)      
2313			 
2313 73			ld (hl), e 
2314 23			inc hl 
2315 72			ld (hl), d 
2316			 
2316				; TODO copy last user dict word next link to this word 
2316				; TODO update last user dict word to point to this word 
2316			; 
2316			; hl f923 de 812a ; bc 811a 
2316			 
2316			if DEBUG_FORTH_UWORD 
2316 c5			push bc 
2317 ed 4b ad e2	ld bc, (os_new_malloc) 
231b					DMARK ":0A" 
231b f5				push af  
231c 3a 30 23			ld a, (.dmark)  
231f 32 65 ee			ld (debug_mark),a  
2322 3a 31 23			ld a, (.dmark+1)  
2325 32 66 ee			ld (debug_mark+1),a  
2328 3a 32 23			ld a, (.dmark+2)  
232b 32 67 ee			ld (debug_mark+2),a  
232e 18 03			jr .pastdmark  
2330 ..			.dmark: db ":0A"  
2333 f1			.pastdmark: pop af  
2334			endm  
# End of macro DMARK
2334			CALLMONITOR 
2334 cd 6f ee			call debug_vector  
2337				endm  
# End of macro CALLMONITOR
2337 c1			pop bc 
2338			endif 
2338			if DEBUG_FORTH_UWORD 
2338 c5			push bc 
2339 ed 4b ad e2	ld bc, (os_new_malloc) 
233d 03			inc bc 
233e 03			inc bc 
233f 03			inc bc 
2340 03			inc bc 
2341 03			inc bc 
2342 03			inc bc 
2343 03			inc bc 
2344 03			inc bc 
2345			 
2345					DMARK ":0B" 
2345 f5				push af  
2346 3a 5a 23			ld a, (.dmark)  
2349 32 65 ee			ld (debug_mark),a  
234c 3a 5b 23			ld a, (.dmark+1)  
234f 32 66 ee			ld (debug_mark+1),a  
2352 3a 5c 23			ld a, (.dmark+2)  
2355 32 67 ee			ld (debug_mark+2),a  
2358 18 03			jr .pastdmark  
235a ..			.dmark: db ":0B"  
235d f1			.pastdmark: pop af  
235e			endm  
# End of macro DMARK
235e			CALLMONITOR 
235e cd 6f ee			call debug_vector  
2361				endm  
# End of macro CALLMONITOR
2361 c1			pop bc 
2362			endif 
2362			 
2362			; update word dict linked list for new word 
2362			 
2362			 
2362 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
2365 23			inc hl     ; move to next work linked list ptr 
2366			 
2366 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
236a 73			ld (hl), e 
236b 23			inc hl 
236c 72			ld (hl), d 
236d			 
236d			if DEBUG_FORTH_UWORD 
236d ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2371			endif 
2371			 
2371 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
2375			 
2375			 
2375			if DEBUG_FORTH_UWORD 
2375					DMARK ":0+" 
2375 f5				push af  
2376 3a 8a 23			ld a, (.dmark)  
2379 32 65 ee			ld (debug_mark),a  
237c 3a 8b 23			ld a, (.dmark+1)  
237f 32 66 ee			ld (debug_mark+1),a  
2382 3a 8c 23			ld a, (.dmark+2)  
2385 32 67 ee			ld (debug_mark+2),a  
2388 18 03			jr .pastdmark  
238a ..			.dmark: db ":0+"  
238d f1			.pastdmark: pop af  
238e			endm  
# End of macro DMARK
238e			CALLMONITOR 
238e cd 6f ee			call debug_vector  
2391				endm  
# End of macro CALLMONITOR
2391			endif 
2391			 
2391			STACKFRAMECHK OFF $8efe $989f 
2391				if DEBUG_STACK_IMB 
2391					if OFF 
2391						exx 
2391						ld hl, $989f 
2391						pop de   ; $989f 
2391						call cmp16 
2391						jr nz, .spnosame 
2391						ld hl, $8efe 
2391						pop de   ; $8efe 
2391						call cmp16 
2391						jr z, .spfrsame 
2391						.spnosame: call showsperror 
2391						.spfrsame: nop 
2391						exx 
2391					endif 
2391				endif 
2391			endm 
# End of macro STACKFRAMECHK
2391			 
2391 c9			ret    ; dont process any remaining parser tokens as they form new word 
2392			 
2392			 
2392			 
2392			 
2392			;		NEXT 
2392			.SCOLN: 
2392			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
2392 06			db OPCODE_SCOLN 
2393 de 23		dw .DROP 
2395 02			db 2 
2396 .. 00		db ";",0           
2398			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2398				if DEBUG_FORTH_WORDS_KEY 
2398					DMARK "SCN" 
2398 f5				push af  
2399 3a ad 23			ld a, (.dmark)  
239c 32 65 ee			ld (debug_mark),a  
239f 3a ae 23			ld a, (.dmark+1)  
23a2 32 66 ee			ld (debug_mark+1),a  
23a5 3a af 23			ld a, (.dmark+2)  
23a8 32 67 ee			ld (debug_mark+2),a  
23ab 18 03			jr .pastdmark  
23ad ..			.dmark: db "SCN"  
23b0 f1			.pastdmark: pop af  
23b1			endm  
# End of macro DMARK
23b1					CALLMONITOR 
23b1 cd 6f ee			call debug_vector  
23b4				endm  
# End of macro CALLMONITOR
23b4				endif 
23b4				FORTH_RSP_TOS 
23b4 cd 4e 1b			call macro_forth_rsp_tos 
23b7				endm 
# End of macro FORTH_RSP_TOS
23b7 e5				push hl 
23b8				FORTH_RSP_POP 
23b8 cd 58 1b			call macro_forth_rsp_pop 
23bb				endm 
# End of macro FORTH_RSP_POP
23bb e1				pop hl 
23bc			;		ex de,hl 
23bc 22 bc e5			ld (os_tok_ptr),hl 
23bf			 
23bf			if DEBUG_FORTH_UWORD 
23bf					DMARK "SCL" 
23bf f5				push af  
23c0 3a d4 23			ld a, (.dmark)  
23c3 32 65 ee			ld (debug_mark),a  
23c6 3a d5 23			ld a, (.dmark+1)  
23c9 32 66 ee			ld (debug_mark+1),a  
23cc 3a d6 23			ld a, (.dmark+2)  
23cf 32 67 ee			ld (debug_mark+2),a  
23d2 18 03			jr .pastdmark  
23d4 ..			.dmark: db "SCL"  
23d7 f1			.pastdmark: pop af  
23d8			endm  
# End of macro DMARK
23d8			CALLMONITOR 
23d8 cd 6f ee			call debug_vector  
23db				endm  
# End of macro CALLMONITOR
23db			endif 
23db				NEXTW 
23db c3 81 1f			jp macro_next 
23de				endm 
# End of macro NEXTW
23de			 
23de			.DROP: 
23de			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
23de 1b				db WORD_SYS_CORE+OPCODE_DROP             
23df 09 24			dw .DUP2            
23e1 05				db 4 + 1 
23e2 .. 00			db "DROP",0              
23e7				endm 
# End of macro CWHEAD
23e7			; | DROP ( w -- )   drop the TOS item   | DONE 
23e7				if DEBUG_FORTH_WORDS_KEY 
23e7					DMARK "DRP" 
23e7 f5				push af  
23e8 3a fc 23			ld a, (.dmark)  
23eb 32 65 ee			ld (debug_mark),a  
23ee 3a fd 23			ld a, (.dmark+1)  
23f1 32 66 ee			ld (debug_mark+1),a  
23f4 3a fe 23			ld a, (.dmark+2)  
23f7 32 67 ee			ld (debug_mark+2),a  
23fa 18 03			jr .pastdmark  
23fc ..			.dmark: db "DRP"  
23ff f1			.pastdmark: pop af  
2400			endm  
# End of macro DMARK
2400					CALLMONITOR 
2400 cd 6f ee			call debug_vector  
2403				endm  
# End of macro CALLMONITOR
2403				endif 
2403				FORTH_DSP_POP 
2403 cd 4d 1e			call macro_forth_dsp_pop 
2406				endm 
# End of macro FORTH_DSP_POP
2406				NEXTW 
2406 c3 81 1f			jp macro_next 
2409				endm 
# End of macro NEXTW
2409			.DUP2: 
2409			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2409 1c				db WORD_SYS_CORE+OPCODE_DUP2             
240a 4e 24			dw .DROP2            
240c 05				db 4 + 1 
240d .. 00			db "2DUP",0              
2412				endm 
# End of macro CWHEAD
2412			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
2412				if DEBUG_FORTH_WORDS_KEY 
2412					DMARK "2DU" 
2412 f5				push af  
2413 3a 27 24			ld a, (.dmark)  
2416 32 65 ee			ld (debug_mark),a  
2419 3a 28 24			ld a, (.dmark+1)  
241c 32 66 ee			ld (debug_mark+1),a  
241f 3a 29 24			ld a, (.dmark+2)  
2422 32 67 ee			ld (debug_mark+2),a  
2425 18 03			jr .pastdmark  
2427 ..			.dmark: db "2DU"  
242a f1			.pastdmark: pop af  
242b			endm  
# End of macro DMARK
242b					CALLMONITOR 
242b cd 6f ee			call debug_vector  
242e				endm  
# End of macro CALLMONITOR
242e				endif 
242e				FORTH_DSP_VALUEHL 
242e cd 95 1d			call macro_dsp_valuehl 
2431				endm 
# End of macro FORTH_DSP_VALUEHL
2431 e5				push hl      ; 2 
2432			 
2432				FORTH_DSP_POP 
2432 cd 4d 1e			call macro_forth_dsp_pop 
2435				endm 
# End of macro FORTH_DSP_POP
2435				 
2435				FORTH_DSP_VALUEHL 
2435 cd 95 1d			call macro_dsp_valuehl 
2438				endm 
# End of macro FORTH_DSP_VALUEHL
2438			;		push hl      ; 1 
2438			 
2438				FORTH_DSP_POP 
2438 cd 4d 1e			call macro_forth_dsp_pop 
243b				endm 
# End of macro FORTH_DSP_POP
243b			 
243b			;		pop hl       ; 1 
243b d1				pop de       ; 2 
243c			 
243c cd 90 1b			call forth_push_numhl 
243f eb				ex de, hl 
2440 cd 90 1b			call forth_push_numhl 
2443			 
2443				 
2443 eb				ex de, hl 
2444			 
2444 cd 90 1b			call forth_push_numhl 
2447 eb				ex de, hl 
2448 cd 90 1b			call forth_push_numhl 
244b			 
244b			 
244b				NEXTW 
244b c3 81 1f			jp macro_next 
244e				endm 
# End of macro NEXTW
244e			.DROP2: 
244e			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
244e 1d				db WORD_SYS_CORE+OPCODE_DROP2             
244f 7d 24			dw .PICK            
2451 06				db 5 + 1 
2452 .. 00			db "2DROP",0              
2458				endm 
# End of macro CWHEAD
2458			; | 2DROP ( w w -- )    Double drop | DONE 
2458				if DEBUG_FORTH_WORDS_KEY 
2458					DMARK "2DR" 
2458 f5				push af  
2459 3a 6d 24			ld a, (.dmark)  
245c 32 65 ee			ld (debug_mark),a  
245f 3a 6e 24			ld a, (.dmark+1)  
2462 32 66 ee			ld (debug_mark+1),a  
2465 3a 6f 24			ld a, (.dmark+2)  
2468 32 67 ee			ld (debug_mark+2),a  
246b 18 03			jr .pastdmark  
246d ..			.dmark: db "2DR"  
2470 f1			.pastdmark: pop af  
2471			endm  
# End of macro DMARK
2471					CALLMONITOR 
2471 cd 6f ee			call debug_vector  
2474				endm  
# End of macro CALLMONITOR
2474				endif 
2474				FORTH_DSP_POP 
2474 cd 4d 1e			call macro_forth_dsp_pop 
2477				endm 
# End of macro FORTH_DSP_POP
2477				FORTH_DSP_POP 
2477 cd 4d 1e			call macro_forth_dsp_pop 
247a				endm 
# End of macro FORTH_DSP_POP
247a				NEXTW 
247a c3 81 1f			jp macro_next 
247d				endm 
# End of macro NEXTW
247d			.PICK: 
247d			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
247d 77				db WORD_SYS_CORE+99             
247e bc 24			dw .SWAP2            
2480 05				db 4 + 1 
2481 .. 00			db "PICK",0              
2486				endm 
# End of macro CWHEAD
2486			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
2486				if DEBUG_FORTH_WORDS_KEY 
2486					DMARK "PIK" 
2486 f5				push af  
2487 3a 9b 24			ld a, (.dmark)  
248a 32 65 ee			ld (debug_mark),a  
248d 3a 9c 24			ld a, (.dmark+1)  
2490 32 66 ee			ld (debug_mark+1),a  
2493 3a 9d 24			ld a, (.dmark+2)  
2496 32 67 ee			ld (debug_mark+2),a  
2499 18 03			jr .pastdmark  
249b ..			.dmark: db "PIK"  
249e f1			.pastdmark: pop af  
249f			endm  
# End of macro DMARK
249f					CALLMONITOR 
249f cd 6f ee			call debug_vector  
24a2				endm  
# End of macro CALLMONITOR
24a2				endif 
24a2			 
24a2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
24a2 cd 95 1d			call macro_dsp_valuehl 
24a5				endm 
# End of macro FORTH_DSP_VALUEHL
24a5				 
24a5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
24a5 cd 4d 1e			call macro_forth_dsp_pop 
24a8				endm 
# End of macro FORTH_DSP_POP
24a8			 
24a8				; init from TOS 
24a8 45				ld b, l 
24a9 21 e8 e9			ld hl, cli_data_sp 
24ac			.pkl: 
24ac 2b				dec hl 
24ad 2b				dec hl 
24ae 2b				dec hl 
24af			 
24af 10 fb			djnz .pkl 
24b1			 
24b1				 
24b1				; TODO do type check with correct push 
24b1			 
24b1 23				inc hl 
24b2				;call loadwordinhl 
24b2 5e				ld e, (hl) 
24b3 23				inc hl 
24b4 56				ld d, (hl) 
24b5 eb				ex de,hl 
24b6 cd 90 1b			call forth_push_numhl 
24b9			 
24b9				NEXTW 
24b9 c3 81 1f			jp macro_next 
24bc				endm 
# End of macro NEXTW
24bc			.SWAP2: 
24bc			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
24bc 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
24bd e5 24			dw .AT            
24bf 06				db 5 + 1 
24c0 .. 00			db "2SWAP",0              
24c6				endm 
# End of macro CWHEAD
24c6			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
24c6				if DEBUG_FORTH_WORDS_KEY 
24c6					DMARK "2SW" 
24c6 f5				push af  
24c7 3a db 24			ld a, (.dmark)  
24ca 32 65 ee			ld (debug_mark),a  
24cd 3a dc 24			ld a, (.dmark+1)  
24d0 32 66 ee			ld (debug_mark+1),a  
24d3 3a dd 24			ld a, (.dmark+2)  
24d6 32 67 ee			ld (debug_mark+2),a  
24d9 18 03			jr .pastdmark  
24db ..			.dmark: db "2SW"  
24de f1			.pastdmark: pop af  
24df			endm  
# End of macro DMARK
24df					CALLMONITOR 
24df cd 6f ee			call debug_vector  
24e2				endm  
# End of macro CALLMONITOR
24e2				endif 
24e2			; TODO Use os stack swap memory 
24e2				NEXTW 
24e2 c3 81 1f			jp macro_next 
24e5				endm 
# End of macro NEXTW
24e5			.AT: 
24e5			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
24e5 1f				db WORD_SYS_CORE+OPCODE_AT             
24e6 17 25			dw .CAT            
24e8 02				db 1 + 1 
24e9 .. 00			db "@",0              
24eb				endm 
# End of macro CWHEAD
24eb			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
24eb			 
24eb				if DEBUG_FORTH_WORDS_KEY 
24eb					DMARK "AT." 
24eb f5				push af  
24ec 3a 00 25			ld a, (.dmark)  
24ef 32 65 ee			ld (debug_mark),a  
24f2 3a 01 25			ld a, (.dmark+1)  
24f5 32 66 ee			ld (debug_mark+1),a  
24f8 3a 02 25			ld a, (.dmark+2)  
24fb 32 67 ee			ld (debug_mark+2),a  
24fe 18 03			jr .pastdmark  
2500 ..			.dmark: db "AT."  
2503 f1			.pastdmark: pop af  
2504			endm  
# End of macro DMARK
2504					CALLMONITOR 
2504 cd 6f ee			call debug_vector  
2507				endm  
# End of macro CALLMONITOR
2507				endif 
2507			.getbyteat:	 
2507				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2507 cd 95 1d			call macro_dsp_valuehl 
250a				endm 
# End of macro FORTH_DSP_VALUEHL
250a				 
250a			;		push hl 
250a			 
250a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
250a cd 4d 1e			call macro_forth_dsp_pop 
250d				endm 
# End of macro FORTH_DSP_POP
250d			 
250d			;		pop hl 
250d			 
250d 7e				ld a, (hl) 
250e			 
250e 6f				ld l, a 
250f 26 00			ld h, 0 
2511 cd 90 1b			call forth_push_numhl 
2514			 
2514				NEXTW 
2514 c3 81 1f			jp macro_next 
2517				endm 
# End of macro NEXTW
2517			.CAT: 
2517			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2517 20				db WORD_SYS_CORE+OPCODE_CAT             
2518 40 25			dw .BANG            
251a 03				db 2 + 1 
251b .. 00			db "C@",0              
251e				endm 
# End of macro CWHEAD
251e			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
251e				if DEBUG_FORTH_WORDS_KEY 
251e					DMARK "CAA" 
251e f5				push af  
251f 3a 33 25			ld a, (.dmark)  
2522 32 65 ee			ld (debug_mark),a  
2525 3a 34 25			ld a, (.dmark+1)  
2528 32 66 ee			ld (debug_mark+1),a  
252b 3a 35 25			ld a, (.dmark+2)  
252e 32 67 ee			ld (debug_mark+2),a  
2531 18 03			jr .pastdmark  
2533 ..			.dmark: db "CAA"  
2536 f1			.pastdmark: pop af  
2537			endm  
# End of macro DMARK
2537					CALLMONITOR 
2537 cd 6f ee			call debug_vector  
253a				endm  
# End of macro CALLMONITOR
253a				endif 
253a c3 07 25			jp .getbyteat 
253d				NEXTW 
253d c3 81 1f			jp macro_next 
2540				endm 
# End of macro NEXTW
2540			.BANG: 
2540			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2540 21				db WORD_SYS_CORE+OPCODE_BANG             
2541 76 25			dw .CBANG            
2543 02				db 1 + 1 
2544 .. 00			db "!",0              
2546				endm 
# End of macro CWHEAD
2546			; | ! ( x w -- ) Store x at address w      | DONE 
2546				if DEBUG_FORTH_WORDS_KEY 
2546					DMARK "BNG" 
2546 f5				push af  
2547 3a 5b 25			ld a, (.dmark)  
254a 32 65 ee			ld (debug_mark),a  
254d 3a 5c 25			ld a, (.dmark+1)  
2550 32 66 ee			ld (debug_mark+1),a  
2553 3a 5d 25			ld a, (.dmark+2)  
2556 32 67 ee			ld (debug_mark+2),a  
2559 18 03			jr .pastdmark  
255b ..			.dmark: db "BNG"  
255e f1			.pastdmark: pop af  
255f			endm  
# End of macro DMARK
255f					CALLMONITOR 
255f cd 6f ee			call debug_vector  
2562				endm  
# End of macro CALLMONITOR
2562				endif 
2562			 
2562			.storebyteat:		 
2562				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2562 cd 95 1d			call macro_dsp_valuehl 
2565				endm 
# End of macro FORTH_DSP_VALUEHL
2565				 
2565 e5				push hl 
2566			 
2566				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2566 cd 4d 1e			call macro_forth_dsp_pop 
2569				endm 
# End of macro FORTH_DSP_POP
2569			 
2569				; get byte to poke 
2569			 
2569				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2569 cd 95 1d			call macro_dsp_valuehl 
256c				endm 
# End of macro FORTH_DSP_VALUEHL
256c e5				push hl 
256d			 
256d			 
256d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
256d cd 4d 1e			call macro_forth_dsp_pop 
2570				endm 
# End of macro FORTH_DSP_POP
2570			 
2570			 
2570 d1				pop de 
2571 e1				pop hl 
2572			 
2572 73				ld (hl),e 
2573			 
2573			 
2573				NEXTW 
2573 c3 81 1f			jp macro_next 
2576				endm 
# End of macro NEXTW
2576			.CBANG: 
2576			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2576 22				db WORD_SYS_CORE+OPCODE_CBANG             
2577 9f 25			dw .SCALL            
2579 03				db 2 + 1 
257a .. 00			db "C!",0              
257d				endm 
# End of macro CWHEAD
257d			; | C!  ( x w -- ) Store x at address w  | DONE 
257d				if DEBUG_FORTH_WORDS_KEY 
257d					DMARK "CBA" 
257d f5				push af  
257e 3a 92 25			ld a, (.dmark)  
2581 32 65 ee			ld (debug_mark),a  
2584 3a 93 25			ld a, (.dmark+1)  
2587 32 66 ee			ld (debug_mark+1),a  
258a 3a 94 25			ld a, (.dmark+2)  
258d 32 67 ee			ld (debug_mark+2),a  
2590 18 03			jr .pastdmark  
2592 ..			.dmark: db "CBA"  
2595 f1			.pastdmark: pop af  
2596			endm  
# End of macro DMARK
2596					CALLMONITOR 
2596 cd 6f ee			call debug_vector  
2599				endm  
# End of macro CALLMONITOR
2599				endif 
2599 c3 62 25			jp .storebyteat 
259c				NEXTW 
259c c3 81 1f			jp macro_next 
259f				endm 
# End of macro NEXTW
259f			.SCALL: 
259f			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
259f 23				db WORD_SYS_CORE+OPCODE_SCALL             
25a0 d3 25			dw .DEPTH            
25a2 05				db 4 + 1 
25a3 .. 00			db "CALL",0              
25a8				endm 
# End of macro CWHEAD
25a8			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
25a8				if DEBUG_FORTH_WORDS_KEY 
25a8					DMARK "CLL" 
25a8 f5				push af  
25a9 3a bd 25			ld a, (.dmark)  
25ac 32 65 ee			ld (debug_mark),a  
25af 3a be 25			ld a, (.dmark+1)  
25b2 32 66 ee			ld (debug_mark+1),a  
25b5 3a bf 25			ld a, (.dmark+2)  
25b8 32 67 ee			ld (debug_mark+2),a  
25bb 18 03			jr .pastdmark  
25bd ..			.dmark: db "CLL"  
25c0 f1			.pastdmark: pop af  
25c1			endm  
# End of macro DMARK
25c1					CALLMONITOR 
25c1 cd 6f ee			call debug_vector  
25c4				endm  
# End of macro CALLMONITOR
25c4				endif 
25c4			 
25c4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25c4 cd 95 1d			call macro_dsp_valuehl 
25c7				endm 
# End of macro FORTH_DSP_VALUEHL
25c7			 
25c7			;		push hl 
25c7			 
25c7				; destroy value TOS 
25c7			 
25c7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25c7 cd 4d 1e			call macro_forth_dsp_pop 
25ca				endm 
# End of macro FORTH_DSP_POP
25ca			 
25ca					 
25ca			;		pop hl 
25ca			 
25ca				; how to do a call with hl???? save SP? 
25ca cd 25 1f			call forth_call_hl 
25cd			 
25cd			 
25cd				; TODO push value back onto stack for another op etc 
25cd			 
25cd cd 90 1b			call forth_push_numhl 
25d0				NEXTW 
25d0 c3 81 1f			jp macro_next 
25d3				endm 
# End of macro NEXTW
25d3			.DEPTH: 
25d3			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
25d3 24				db WORD_SYS_CORE+OPCODE_DEPTH             
25d4 10 26			dw .OVER            
25d6 06				db 5 + 1 
25d7 .. 00			db "DEPTH",0              
25dd				endm 
# End of macro CWHEAD
25dd			; | DEPTH ( -- u ) Push count of stack | DONE 
25dd				; take current TOS and remove from base value div by two to get count 
25dd				if DEBUG_FORTH_WORDS_KEY 
25dd					DMARK "DEP" 
25dd f5				push af  
25de 3a f2 25			ld a, (.dmark)  
25e1 32 65 ee			ld (debug_mark),a  
25e4 3a f3 25			ld a, (.dmark+1)  
25e7 32 66 ee			ld (debug_mark+1),a  
25ea 3a f4 25			ld a, (.dmark+2)  
25ed 32 67 ee			ld (debug_mark+2),a  
25f0 18 03			jr .pastdmark  
25f2 ..			.dmark: db "DEP"  
25f5 f1			.pastdmark: pop af  
25f6			endm  
# End of macro DMARK
25f6					CALLMONITOR 
25f6 cd 6f ee			call debug_vector  
25f9				endm  
# End of macro CALLMONITOR
25f9				endif 
25f9			 
25f9			 
25f9 2a e8 e9		ld hl, (cli_data_sp) 
25fc 11 22 e8		ld de, cli_data_stack 
25ff ed 52		sbc hl,de 
2601			 
2601			; div by size of stack item 
2601			 
2601 5d			ld e,l 
2602 0e 03		ld c, 3 
2604 cd 85 0d		call Div8 
2607			 
2607 6f			ld l,a 
2608 26 00		ld h,0 
260a			 
260a			;srl h 
260a			;rr l 
260a			 
260a cd 90 1b			call forth_push_numhl 
260d				NEXTW 
260d c3 81 1f			jp macro_next 
2610				endm 
# End of macro NEXTW
2610			.OVER: 
2610			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2610 42				db WORD_SYS_CORE+46             
2611 57 26			dw .PAUSE            
2613 05				db 4 + 1 
2614 .. 00			db "OVER",0              
2619				endm 
# End of macro CWHEAD
2619			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
2619				if DEBUG_FORTH_WORDS_KEY 
2619					DMARK "OVR" 
2619 f5				push af  
261a 3a 2e 26			ld a, (.dmark)  
261d 32 65 ee			ld (debug_mark),a  
2620 3a 2f 26			ld a, (.dmark+1)  
2623 32 66 ee			ld (debug_mark+1),a  
2626 3a 30 26			ld a, (.dmark+2)  
2629 32 67 ee			ld (debug_mark+2),a  
262c 18 03			jr .pastdmark  
262e ..			.dmark: db "OVR"  
2631 f1			.pastdmark: pop af  
2632			endm  
# End of macro DMARK
2632					CALLMONITOR 
2632 cd 6f ee			call debug_vector  
2635				endm  
# End of macro CALLMONITOR
2635				endif 
2635			 
2635			; TODO Use os stack swap memory 
2635			 
2635				; work out what type we are looking at 
2635			 
2635				FORTH_DSP_PTR 1 
2635 2a e8 e9			ld hl,(cli_data_sp) 
2638 11 03 00			ld de, 1 * 3 
263b ed 52			sbc hl, de 
263d				endm 
# End of macro FORTH_DSP_PTR
263d			 
263d 7e				ld a, (hl) 
263e				 
263e f5				push af 
263f				; whatever the type lets get the pointer or word 
263f 23				inc hl 
2640			;; 
2640			 
2640				; type check now to decide on how to push  
2640			 
2640 cd 03 1f			call loadwordinhl 
2643 f1				pop af 
2644 fe 01			cp DS_TYPE_STR 
2646 28 06			jr z, .ovstr 
2648			 
2648				; we have a numeric so load the word and push 
2648			;	ld e, (hl) 
2648			;	inc hl 
2648			;	ld d, (hl) 
2648			;	ex de, hl 
2648 cd 90 1b			call forth_push_numhl 
264b				NEXTW 
264b c3 81 1f			jp macro_next 
264e				endm 
# End of macro NEXTW
264e			 
264e			.ovstr: 
264e				; ok, a string so get the pointer and push as a string 
264e			 
264e			;	call loadwordinhl 
264e cd fe 1b			call forth_push_str 
2651				NEXTW 
2651 c3 81 1f			jp macro_next 
2654				endm 
# End of macro NEXTW
2654			 
2654			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2654			;	push hl    ; n2 
2654			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2654			; 
2654			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2654			;	push hl    ; n1 
2654			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2654			; 
2654			;	pop de     ; n1 
2654			;	pop hl     ; n2 
2654			; 
2654			;	push de 
2654			;	push hl 
2654			;	push de 
2654			 
2654				; push back  
2654			 
2654			;	pop hl 
2654			;	call forth_push_numhl 
2654			;	pop hl 
2654			;	call forth_push_numhl 
2654			;	pop hl 
2654			;	call forth_push_numhl 
2654				NEXTW 
2654 c3 81 1f			jp macro_next 
2657				endm 
# End of macro NEXTW
2657			 
2657			.PAUSE: 
2657			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2657 43				db WORD_SYS_CORE+47             
2658 8c 26			dw .PAUSES            
265a 08				db 7 + 1 
265b .. 00			db "PAUSEMS",0              
2663				endm 
# End of macro CWHEAD
2663			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2663				if DEBUG_FORTH_WORDS_KEY 
2663					DMARK "PMS" 
2663 f5				push af  
2664 3a 78 26			ld a, (.dmark)  
2667 32 65 ee			ld (debug_mark),a  
266a 3a 79 26			ld a, (.dmark+1)  
266d 32 66 ee			ld (debug_mark+1),a  
2670 3a 7a 26			ld a, (.dmark+2)  
2673 32 67 ee			ld (debug_mark+2),a  
2676 18 03			jr .pastdmark  
2678 ..			.dmark: db "PMS"  
267b f1			.pastdmark: pop af  
267c			endm  
# End of macro DMARK
267c					CALLMONITOR 
267c cd 6f ee			call debug_vector  
267f				endm  
# End of macro CALLMONITOR
267f				endif 
267f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
267f cd 95 1d			call macro_dsp_valuehl 
2682				endm 
# End of macro FORTH_DSP_VALUEHL
2682			;		push hl    ; n2 
2682				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2682 cd 4d 1e			call macro_forth_dsp_pop 
2685				endm 
# End of macro FORTH_DSP_POP
2685			;		pop hl 
2685			 
2685 7d				ld a, l 
2686 cd e5 0a			call aDelayInMS 
2689			       NEXTW 
2689 c3 81 1f			jp macro_next 
268c				endm 
# End of macro NEXTW
268c			.PAUSES:  
268c			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
268c 44				db WORD_SYS_CORE+48             
268d fb 26			dw .ROT            
268f 06				db 5 + 1 
2690 .. 00			db "PAUSE",0              
2696				endm 
# End of macro CWHEAD
2696			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2696				if DEBUG_FORTH_WORDS_KEY 
2696					DMARK "PAU" 
2696 f5				push af  
2697 3a ab 26			ld a, (.dmark)  
269a 32 65 ee			ld (debug_mark),a  
269d 3a ac 26			ld a, (.dmark+1)  
26a0 32 66 ee			ld (debug_mark+1),a  
26a3 3a ad 26			ld a, (.dmark+2)  
26a6 32 67 ee			ld (debug_mark+2),a  
26a9 18 03			jr .pastdmark  
26ab ..			.dmark: db "PAU"  
26ae f1			.pastdmark: pop af  
26af			endm  
# End of macro DMARK
26af					CALLMONITOR 
26af cd 6f ee			call debug_vector  
26b2				endm  
# End of macro CALLMONITOR
26b2				endif 
26b2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26b2 cd 95 1d			call macro_dsp_valuehl 
26b5				endm 
# End of macro FORTH_DSP_VALUEHL
26b5			;		push hl    ; n2 
26b5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26b5 cd 4d 1e			call macro_forth_dsp_pop 
26b8				endm 
# End of macro FORTH_DSP_POP
26b8			;		pop hl 
26b8 45				ld b, l 
26b9				if DEBUG_FORTH_WORDS 
26b9					DMARK "PAU" 
26b9 f5				push af  
26ba 3a ce 26			ld a, (.dmark)  
26bd 32 65 ee			ld (debug_mark),a  
26c0 3a cf 26			ld a, (.dmark+1)  
26c3 32 66 ee			ld (debug_mark+1),a  
26c6 3a d0 26			ld a, (.dmark+2)  
26c9 32 67 ee			ld (debug_mark+2),a  
26cc 18 03			jr .pastdmark  
26ce ..			.dmark: db "PAU"  
26d1 f1			.pastdmark: pop af  
26d2			endm  
# End of macro DMARK
26d2					CALLMONITOR 
26d2 cd 6f ee			call debug_vector  
26d5				endm  
# End of macro CALLMONITOR
26d5				endif 
26d5 c5			.pauses1:	push bc 
26d6 cd 00 0b			call delay1s 
26d9 c1				pop bc 
26da				if DEBUG_FORTH_WORDS 
26da					DMARK "PA1" 
26da f5				push af  
26db 3a ef 26			ld a, (.dmark)  
26de 32 65 ee			ld (debug_mark),a  
26e1 3a f0 26			ld a, (.dmark+1)  
26e4 32 66 ee			ld (debug_mark+1),a  
26e7 3a f1 26			ld a, (.dmark+2)  
26ea 32 67 ee			ld (debug_mark+2),a  
26ed 18 03			jr .pastdmark  
26ef ..			.dmark: db "PA1"  
26f2 f1			.pastdmark: pop af  
26f3			endm  
# End of macro DMARK
26f3					CALLMONITOR 
26f3 cd 6f ee			call debug_vector  
26f6				endm  
# End of macro CALLMONITOR
26f6				endif 
26f6 10 dd			djnz .pauses1 
26f8			 
26f8			       NEXTW 
26f8 c3 81 1f			jp macro_next 
26fb				endm 
# End of macro NEXTW
26fb			.ROT: 
26fb			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
26fb 45				db WORD_SYS_CORE+49             
26fc 64 27			dw .UWORDS            
26fe 04				db 3 + 1 
26ff .. 00			db "ROT",0              
2703				endm 
# End of macro CWHEAD
2703			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
2703				if DEBUG_FORTH_WORDS_KEY 
2703					DMARK "ROT" 
2703 f5				push af  
2704 3a 18 27			ld a, (.dmark)  
2707 32 65 ee			ld (debug_mark),a  
270a 3a 19 27			ld a, (.dmark+1)  
270d 32 66 ee			ld (debug_mark+1),a  
2710 3a 1a 27			ld a, (.dmark+2)  
2713 32 67 ee			ld (debug_mark+2),a  
2716 18 03			jr .pastdmark  
2718 ..			.dmark: db "ROT"  
271b f1			.pastdmark: pop af  
271c			endm  
# End of macro DMARK
271c					CALLMONITOR 
271c cd 6f ee			call debug_vector  
271f				endm  
# End of macro CALLMONITOR
271f				endif 
271f			 
271f			; DONE Use os stack swap memory 
271f			 
271f				FORTH_DSP_PTR 0     ; u3 
271f 2a e8 e9			ld hl,(cli_data_sp) 
2722 11 00 00			ld de, 0 * 3 
2725 ed 52			sbc hl, de 
2727				endm 
# End of macro FORTH_DSP_PTR
2727 cd cd 1e			call hltostack1     
272a			  
272a				FORTH_DSP_PTR 1     ; u2 
272a 2a e8 e9			ld hl,(cli_data_sp) 
272d 11 03 00			ld de, 1 * 3 
2730 ed 52			sbc hl, de 
2732				endm 
# End of macro FORTH_DSP_PTR
2732 cd d3 1e			call hltostack2      
2735			 
2735				FORTH_DSP_PTR 2     ; u1 
2735 2a e8 e9			ld hl,(cli_data_sp) 
2738 11 06 00			ld de, 2 * 3 
273b ed 52			sbc hl, de 
273d				endm 
# End of macro FORTH_DSP_PTR
273d cd d9 1e			call hltostack3 
2740			 
2740			 
2740				FORTH_DSP_PTR 0     ;  
2740 2a e8 e9			ld hl,(cli_data_sp) 
2743 11 00 00			ld de, 0 * 3 
2746 ed 52			sbc hl, de 
2748				endm 
# End of macro FORTH_DSP_PTR
2748 cd f1 1e			call hlfromstack3 
274b			 
274b				FORTH_DSP_PTR 1     ; TOS 
274b 2a e8 e9			ld hl,(cli_data_sp) 
274e 11 03 00			ld de, 1 * 3 
2751 ed 52			sbc hl, de 
2753				endm 
# End of macro FORTH_DSP_PTR
2753 cd e5 1e			call hlfromstack1 
2756			 
2756				FORTH_DSP_PTR 2     ; TOS 
2756 2a e8 e9			ld hl,(cli_data_sp) 
2759 11 06 00			ld de, 2 * 3 
275c ed 52			sbc hl, de 
275e				endm 
# End of macro FORTH_DSP_PTR
275e cd eb 1e			call hlfromstack2 
2761			 
2761			 
2761			;	FORTH_DSP_VALUEHL 
2761			;	push hl    ; u3  
2761			; 
2761			;	FORTH_DSP_POP 
2761			; 
2761			;	FORTH_DSP_VALUEHL 
2761			;	push hl     ; u2 
2761			; 
2761			;	FORTH_DSP_POP 
2761			; 
2761			;	FORTH_DSP_VALUEHL 
2761			;	push hl     ; u1 
2761			; 
2761			;	FORTH_DSP_POP 
2761			; 
2761			;	pop bc      ; u1 
2761			;	pop hl      ; u2 
2761			;	pop de      ; u3 
2761			; 
2761			; 
2761			;	push bc 
2761			;	push de 
2761			;	push hl 
2761			; 
2761			; 
2761			;	pop hl 
2761			;	call forth_push_numhl 
2761			; 
2761			;	pop hl 
2761			;	call forth_push_numhl 
2761			; 
2761			;	pop hl 
2761			;	call forth_push_numhl 
2761				 
2761			 
2761			 
2761			 
2761			 
2761			 
2761			       NEXTW 
2761 c3 81 1f			jp macro_next 
2764				endm 
# End of macro NEXTW
2764			 
2764			.UWORDS: 
2764			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2764 50				db WORD_SYS_CORE+60             
2765 26 28			dw .BP            
2767 07				db 6 + 1 
2768 .. 00			db "UWORDS",0              
276f				endm 
# End of macro CWHEAD
276f			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
276f			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
276f			; | | Following the count are the individual words. 
276f			; | | 
276f			; | | e.g. UWORDS 
276f			; | | BOX DIRLIST 2 
276f			; | |  
276f			; | | Can be used to save the words to storage via: 
276f			; | | UWORDS $01 DO $01 APPEND LOOP 
276f			if DEBUG_FORTH_WORDS_KEY 
276f				DMARK "UWR" 
276f f5				push af  
2770 3a 84 27			ld a, (.dmark)  
2773 32 65 ee			ld (debug_mark),a  
2776 3a 85 27			ld a, (.dmark+1)  
2779 32 66 ee			ld (debug_mark+1),a  
277c 3a 86 27			ld a, (.dmark+2)  
277f 32 67 ee			ld (debug_mark+2),a  
2782 18 03			jr .pastdmark  
2784 ..			.dmark: db "UWR"  
2787 f1			.pastdmark: pop af  
2788			endm  
# End of macro DMARK
2788				CALLMONITOR 
2788 cd 6f ee			call debug_vector  
278b				endm  
# End of macro CALLMONITOR
278b			endif 
278b 21 fa 60			ld hl, baseram 
278e				;ld hl, baseusermem 
278e 01 00 00			ld bc, 0    ; start a counter 
2791			 
2791			; skip dict stub 
2791			 
2791 cd be 20			call forth_tok_next 
2794			 
2794			 
2794			; while we have words to look for 
2794			 
2794 7e			.douscan:	ld a, (hl)      
2795			if DEBUG_FORTH_WORDS 
2795				DMARK "UWs" 
2795 f5				push af  
2796 3a aa 27			ld a, (.dmark)  
2799 32 65 ee			ld (debug_mark),a  
279c 3a ab 27			ld a, (.dmark+1)  
279f 32 66 ee			ld (debug_mark+1),a  
27a2 3a ac 27			ld a, (.dmark+2)  
27a5 32 67 ee			ld (debug_mark+2),a  
27a8 18 03			jr .pastdmark  
27aa ..			.dmark: db "UWs"  
27ad f1			.pastdmark: pop af  
27ae			endm  
# End of macro DMARK
27ae				CALLMONITOR 
27ae cd 6f ee			call debug_vector  
27b1				endm  
# End of macro CALLMONITOR
27b1			endif 
27b1 fe 00			cp WORD_SYS_END 
27b3 28 4d			jr z, .udone 
27b5 fe 01			cp WORD_SYS_UWORD 
27b7 20 44			jr nz, .nuword 
27b9			 
27b9			if DEBUG_FORTH_WORDS 
27b9				DMARK "UWu" 
27b9 f5				push af  
27ba 3a ce 27			ld a, (.dmark)  
27bd 32 65 ee			ld (debug_mark),a  
27c0 3a cf 27			ld a, (.dmark+1)  
27c3 32 66 ee			ld (debug_mark+1),a  
27c6 3a d0 27			ld a, (.dmark+2)  
27c9 32 67 ee			ld (debug_mark+2),a  
27cc 18 03			jr .pastdmark  
27ce ..			.dmark: db "UWu"  
27d1 f1			.pastdmark: pop af  
27d2			endm  
# End of macro DMARK
27d2				CALLMONITOR 
27d2 cd 6f ee			call debug_vector  
27d5				endm  
# End of macro CALLMONITOR
27d5			endif 
27d5				; we have a uword so push its name to the stack 
27d5			 
27d5 e5				push hl  ; save so we can move to next dict block 
27d6			 
27d6				; skip opcode 
27d6 23				inc hl  
27d7				; skip next ptr 
27d7 23				inc hl  
27d8 23				inc hl 
27d9				; skip len 
27d9 23				inc hl 
27da			if DEBUG_FORTH_WORDS 
27da				DMARK "UWt" 
27da f5				push af  
27db 3a ef 27			ld a, (.dmark)  
27de 32 65 ee			ld (debug_mark),a  
27e1 3a f0 27			ld a, (.dmark+1)  
27e4 32 66 ee			ld (debug_mark+1),a  
27e7 3a f1 27			ld a, (.dmark+2)  
27ea 32 67 ee			ld (debug_mark+2),a  
27ed 18 03			jr .pastdmark  
27ef ..			.dmark: db "UWt"  
27f2 f1			.pastdmark: pop af  
27f3			endm  
# End of macro DMARK
27f3				CALLMONITOR 
27f3 cd 6f ee			call debug_vector  
27f6				endm  
# End of macro CALLMONITOR
27f6			endif 
27f6 03				inc bc 
27f7			 
27f7 c5				push bc 
27f8 cd fe 1b			call forth_push_str 
27fb c1				pop bc 
27fc			 
27fc e1				pop hl 	 
27fd			 
27fd cd be 20		.nuword:	call forth_tok_next 
2800 18 92			jr .douscan  
2802			 
2802			.udone:		 ; push count of uwords found 
2802 c5				push bc 
2803 e1				pop hl 
2804			 
2804			if DEBUG_FORTH_WORDS 
2804				DMARK "UWc" 
2804 f5				push af  
2805 3a 19 28			ld a, (.dmark)  
2808 32 65 ee			ld (debug_mark),a  
280b 3a 1a 28			ld a, (.dmark+1)  
280e 32 66 ee			ld (debug_mark+1),a  
2811 3a 1b 28			ld a, (.dmark+2)  
2814 32 67 ee			ld (debug_mark+2),a  
2817 18 03			jr .pastdmark  
2819 ..			.dmark: db "UWc"  
281c f1			.pastdmark: pop af  
281d			endm  
# End of macro DMARK
281d				CALLMONITOR 
281d cd 6f ee			call debug_vector  
2820				endm  
# End of macro CALLMONITOR
2820			endif 
2820 cd 90 1b			call forth_push_numhl 
2823			 
2823			 
2823			       NEXTW 
2823 c3 81 1f			jp macro_next 
2826				endm 
# End of macro NEXTW
2826			 
2826			.BP: 
2826			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2826 54				db WORD_SYS_CORE+64             
2827 60 28			dw .MONITOR            
2829 03				db 2 + 1 
282a .. 00			db "BP",0              
282d				endm 
# End of macro CWHEAD
282d			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
282d			; | | $00 Will enable the break points within specific code paths 
282d			; | | $01 Will disable break points 
282d			; | |  
282d			; | | By default break points are off. Either the above can be used to enable them 
282d			; | | or if a key is held down during start up the spashscreen will appear to freeze 
282d			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
282d			; | | can disable break points. Exiting will then continue boot process. 
282d				; get byte count 
282d				if DEBUG_FORTH_WORDS_KEY 
282d					DMARK "BP." 
282d f5				push af  
282e 3a 42 28			ld a, (.dmark)  
2831 32 65 ee			ld (debug_mark),a  
2834 3a 43 28			ld a, (.dmark+1)  
2837 32 66 ee			ld (debug_mark+1),a  
283a 3a 44 28			ld a, (.dmark+2)  
283d 32 67 ee			ld (debug_mark+2),a  
2840 18 03			jr .pastdmark  
2842 ..			.dmark: db "BP."  
2845 f1			.pastdmark: pop af  
2846			endm  
# End of macro DMARK
2846					CALLMONITOR 
2846 cd 6f ee			call debug_vector  
2849				endm  
# End of macro CALLMONITOR
2849				endif 
2849			 
2849				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2849 cd 95 1d			call macro_dsp_valuehl 
284c				endm 
# End of macro FORTH_DSP_VALUEHL
284c			 
284c			;		push hl 
284c			 
284c				; destroy value TOS 
284c			 
284c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
284c cd 4d 1e			call macro_forth_dsp_pop 
284f				endm 
# End of macro FORTH_DSP_POP
284f			 
284f			;		pop hl 
284f			 
284f 3e 00			ld a,0 
2851 bd				cp l 
2852 28 06			jr z, .bpset 
2854			;		ld a, '*' 
2854 cd 0b 15			call bp_off 
2857				NEXTW 
2857 c3 81 1f			jp macro_next 
285a				endm 
# End of macro NEXTW
285a			 
285a			.bpset:	 
285a				;	ld (os_view_disable), a 
285a cd ff 14			call bp_on 
285d			 
285d			 
285d				NEXTW 
285d c3 81 1f			jp macro_next 
2860				endm 
# End of macro NEXTW
2860			 
2860			 
2860			.MONITOR: 
2860			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2860 55				db WORD_SYS_CORE+65             
2861 91 28			dw .MALLOC            
2863 08				db 7 + 1 
2864 .. 00			db "MONITOR",0              
286c				endm 
# End of macro CWHEAD
286c			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
286c			; | | At start the current various registers will be displayed with contents. 
286c			; | | Top right corner will show the most recent debug marker seen. 
286c			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
286c			; | | and the return stack pointer (RSP). 
286c			; | | Pressing: 
286c			; | |    1 - Initial screen 
286c			; | |    2 - Display a data dump of HL 
286c			; | |    3 - Display a data dump of DE 
286c			; | |    4 - Display a data dump of BC 
286c			; | |    5 - Display a data dump of HL 
286c			; | |    6 - Display a data dump of DSP 
286c			; | |    7 - Display a data dump of RSP 
286c			; | |    8 - Display a data dump of what is at DSP 
286c			; | |    9 - Display a data dump of what is at RSP 
286c			; | |    0 - Exit monitor and continue running. This will also enable break points 
286c			; | |    * - Disable break points 
286c			; | |    # - Enter traditional monitor mode 
286c			; | | 
286c			; | | Monitor Mode 
286c			; | | ------------ 
286c			; | | A prompt of '>' will be shown for various commands: 
286c			; | |    D xxxx - Display a data dump starting from hex address xxxx 
286c			; | |    C - Continue display a data dump from the last set address 
286c			; | |    M xxxx - Set start of memory edit at address xx 
286c			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
286c			; | |    G xxxx - Exec code at specific address 
286c			; | |    Q - Return to previous 
286c				if DEBUG_FORTH_WORDS_KEY 
286c					DMARK "MON" 
286c f5				push af  
286d 3a 81 28			ld a, (.dmark)  
2870 32 65 ee			ld (debug_mark),a  
2873 3a 82 28			ld a, (.dmark+1)  
2876 32 66 ee			ld (debug_mark+1),a  
2879 3a 83 28			ld a, (.dmark+2)  
287c 32 67 ee			ld (debug_mark+2),a  
287f 18 03			jr .pastdmark  
2881 ..			.dmark: db "MON"  
2884 f1			.pastdmark: pop af  
2885			endm  
# End of macro DMARK
2885					CALLMONITOR 
2885 cd 6f ee			call debug_vector  
2888				endm  
# End of macro CALLMONITOR
2888				endif 
2888			;		ld a, 0 
2888			;		ld (os_view_disable), a 
2888 cd ff 14			call bp_on 
288b			 
288b				CALLMONITOR 
288b cd 6f ee			call debug_vector  
288e				endm  
# End of macro CALLMONITOR
288e			 
288e			;	call monitor 
288e			 
288e				NEXTW 
288e c3 81 1f			jp macro_next 
2891				endm 
# End of macro NEXTW
2891			 
2891			 
2891			.MALLOC: 
2891			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2891 56				db WORD_SYS_CORE+66             
2892 ba 28			dw .MALLOC2            
2894 06				db 5 + 1 
2895 .. 00			db "ALLOT",0              
289b				endm 
# End of macro CWHEAD
289b			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
289b				if DEBUG_FORTH_WORDS_KEY 
289b					DMARK "ALL" 
289b f5				push af  
289c 3a b0 28			ld a, (.dmark)  
289f 32 65 ee			ld (debug_mark),a  
28a2 3a b1 28			ld a, (.dmark+1)  
28a5 32 66 ee			ld (debug_mark+1),a  
28a8 3a b2 28			ld a, (.dmark+2)  
28ab 32 67 ee			ld (debug_mark+2),a  
28ae 18 03			jr .pastdmark  
28b0 ..			.dmark: db "ALL"  
28b3 f1			.pastdmark: pop af  
28b4			endm  
# End of macro DMARK
28b4					CALLMONITOR 
28b4 cd 6f ee			call debug_vector  
28b7				endm  
# End of macro CALLMONITOR
28b7				endif 
28b7 c3 e1 28			jp .mallocc 
28ba			.MALLOC2: 
28ba			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
28ba 56				db WORD_SYS_CORE+66             
28bb f8 28			dw .FREE            
28bd 07				db 6 + 1 
28be .. 00			db "MALLOC",0              
28c5				endm 
# End of macro CWHEAD
28c5			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
28c5				; get byte count 
28c5				if DEBUG_FORTH_WORDS_KEY 
28c5					DMARK "MAL" 
28c5 f5				push af  
28c6 3a da 28			ld a, (.dmark)  
28c9 32 65 ee			ld (debug_mark),a  
28cc 3a db 28			ld a, (.dmark+1)  
28cf 32 66 ee			ld (debug_mark+1),a  
28d2 3a dc 28			ld a, (.dmark+2)  
28d5 32 67 ee			ld (debug_mark+2),a  
28d8 18 03			jr .pastdmark  
28da ..			.dmark: db "MAL"  
28dd f1			.pastdmark: pop af  
28de			endm  
# End of macro DMARK
28de					CALLMONITOR 
28de cd 6f ee			call debug_vector  
28e1				endm  
# End of macro CALLMONITOR
28e1				endif 
28e1			.mallocc: 
28e1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
28e1 cd 95 1d			call macro_dsp_valuehl 
28e4				endm 
# End of macro FORTH_DSP_VALUEHL
28e4			 
28e4			;		push hl 
28e4			 
28e4				; destroy value TOS 
28e4			 
28e4				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
28e4 cd 4d 1e			call macro_forth_dsp_pop 
28e7				endm 
# End of macro FORTH_DSP_POP
28e7			 
28e7			;		pop hl 
28e7 cd d0 11			call malloc 
28ea			if DEBUG_FORTH_MALLOC_GUARD 
28ea f5				push af 
28eb cd 1e 0e			call ishlzero 
28ee			;		ld a, l 
28ee			;		add h 
28ee			;		cp 0 
28ee f1				pop af 
28ef				 
28ef cc 52 4f			call z,malloc_error 
28f2			endif 
28f2			 
28f2 cd 90 1b			call forth_push_numhl 
28f5				NEXTW 
28f5 c3 81 1f			jp macro_next 
28f8				endm 
# End of macro NEXTW
28f8			 
28f8			.FREE: 
28f8			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
28f8 57				db WORD_SYS_CORE+67             
28f9 29 29			dw .LIST            
28fb 05				db 4 + 1 
28fc .. 00			db "FREE",0              
2901				endm 
# End of macro CWHEAD
2901			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2901				if DEBUG_FORTH_WORDS_KEY 
2901					DMARK "FRE" 
2901 f5				push af  
2902 3a 16 29			ld a, (.dmark)  
2905 32 65 ee			ld (debug_mark),a  
2908 3a 17 29			ld a, (.dmark+1)  
290b 32 66 ee			ld (debug_mark+1),a  
290e 3a 18 29			ld a, (.dmark+2)  
2911 32 67 ee			ld (debug_mark+2),a  
2914 18 03			jr .pastdmark  
2916 ..			.dmark: db "FRE"  
2919 f1			.pastdmark: pop af  
291a			endm  
# End of macro DMARK
291a					CALLMONITOR 
291a cd 6f ee			call debug_vector  
291d				endm  
# End of macro CALLMONITOR
291d				endif 
291d				; get address 
291d			 
291d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
291d cd 95 1d			call macro_dsp_valuehl 
2920				endm 
# End of macro FORTH_DSP_VALUEHL
2920			 
2920			;		push hl 
2920			 
2920				; destroy value TOS 
2920			 
2920				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2920 cd 4d 1e			call macro_forth_dsp_pop 
2923				endm 
# End of macro FORTH_DSP_POP
2923			 
2923			;		pop hl 
2923			if FORTH_ENABLE_MALLOCFREE 
2923 cd 9a 12			call free 
2926			endif 
2926				NEXTW 
2926 c3 81 1f			jp macro_next 
2929				endm 
# End of macro NEXTW
2929			.LIST: 
2929			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2929 5c				db WORD_SYS_CORE+72             
292a 25 2b			dw .FORGET            
292c 05				db 4 + 1 
292d .. 00			db "LIST",0              
2932				endm 
# End of macro CWHEAD
2932			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2932			; | | The quoted word must be in upper case. 
2932			if DEBUG_FORTH_WORDS_KEY 
2932				DMARK "LST" 
2932 f5				push af  
2933 3a 47 29			ld a, (.dmark)  
2936 32 65 ee			ld (debug_mark),a  
2939 3a 48 29			ld a, (.dmark+1)  
293c 32 66 ee			ld (debug_mark+1),a  
293f 3a 49 29			ld a, (.dmark+2)  
2942 32 67 ee			ld (debug_mark+2),a  
2945 18 03			jr .pastdmark  
2947 ..			.dmark: db "LST"  
294a f1			.pastdmark: pop af  
294b			endm  
# End of macro DMARK
294b				CALLMONITOR 
294b cd 6f ee			call debug_vector  
294e				endm  
# End of macro CALLMONITOR
294e			endif 
294e			 
294e				FORTH_DSP_VALUEHL 
294e cd 95 1d			call macro_dsp_valuehl 
2951				endm 
# End of macro FORTH_DSP_VALUEHL
2951			 
2951 e5				push hl 
2952				FORTH_DSP_POP 
2952 cd 4d 1e			call macro_forth_dsp_pop 
2955				endm 
# End of macro FORTH_DSP_POP
2955 c1				pop bc 
2956			 
2956			; Start format of scratch string 
2956			 
2956 21 bb e2			ld hl, scratch 
2959			 
2959 3e 3a			ld a, ':' 
295b 77				ld (hl),a 
295c 23				inc hl 
295d 3e 20			ld a, ' ' 
295f 77				ld (hl), a 
2960			 
2960				; Get ptr to the word we need to look up 
2960			 
2960			;		FORTH_DSP_VALUEHL 
2960				;v5 FORTH_DSP_VALUE 
2960			; TODO type check 
2960			;		inc hl    ; Skip type check  
2960			;		push hl 
2960			;		ex de, hl    ; put into DE 
2960			 
2960			 
2960 21 fa 60			ld hl, baseram 
2963				;ld hl, baseusermem 
2963			 
2963 e5			push hl   ; sacreifical push 
2964			 
2964			.ldouscanm: 
2964 e1			pop hl 
2965			.ldouscan: 
2965			if DEBUG_FORTH_WORDS 
2965				DMARK "LSs" 
2965 f5				push af  
2966 3a 7a 29			ld a, (.dmark)  
2969 32 65 ee			ld (debug_mark),a  
296c 3a 7b 29			ld a, (.dmark+1)  
296f 32 66 ee			ld (debug_mark+1),a  
2972 3a 7c 29			ld a, (.dmark+2)  
2975 32 67 ee			ld (debug_mark+2),a  
2978 18 03			jr .pastdmark  
297a ..			.dmark: db "LSs"  
297d f1			.pastdmark: pop af  
297e			endm  
# End of macro DMARK
297e				CALLMONITOR 
297e cd 6f ee			call debug_vector  
2981				endm  
# End of macro CALLMONITOR
2981			endif 
2981			; skip dict stub 
2981 cd be 20			call forth_tok_next 
2984			 
2984			 
2984			; while we have words to look for 
2984			 
2984 7e			ld a, (hl)      
2985			if DEBUG_FORTH_WORDS 
2985				DMARK "LSk" 
2985 f5				push af  
2986 3a 9a 29			ld a, (.dmark)  
2989 32 65 ee			ld (debug_mark),a  
298c 3a 9b 29			ld a, (.dmark+1)  
298f 32 66 ee			ld (debug_mark+1),a  
2992 3a 9c 29			ld a, (.dmark+2)  
2995 32 67 ee			ld (debug_mark+2),a  
2998 18 03			jr .pastdmark  
299a ..			.dmark: db "LSk"  
299d f1			.pastdmark: pop af  
299e			endm  
# End of macro DMARK
299e				CALLMONITOR 
299e cd 6f ee			call debug_vector  
29a1				endm  
# End of macro CALLMONITOR
29a1			endif 
29a1				;cp WORD_SYS_END 
29a1				;jp z, .lunotfound 
29a1			 
29a1					; if we hit non uwords then gone too far 
29a1 fe 01				cp WORD_SYS_UWORD 
29a3 c2 e1 2a				jp nz, .lunotfound 
29a6			 
29a6				if DEBUG_FORTH_WORDS 
29a6					DMARK "LSu" 
29a6 f5				push af  
29a7 3a bb 29			ld a, (.dmark)  
29aa 32 65 ee			ld (debug_mark),a  
29ad 3a bc 29			ld a, (.dmark+1)  
29b0 32 66 ee			ld (debug_mark+1),a  
29b3 3a bd 29			ld a, (.dmark+2)  
29b6 32 67 ee			ld (debug_mark+2),a  
29b9 18 03			jr .pastdmark  
29bb ..			.dmark: db "LSu"  
29be f1			.pastdmark: pop af  
29bf			endm  
# End of macro DMARK
29bf					CALLMONITOR 
29bf cd 6f ee			call debug_vector  
29c2				endm  
# End of macro CALLMONITOR
29c2				endif 
29c2			 
29c2					; found a uword but is it the one we want... 
29c2			 
29c2 c5					push bc     ; uword to find is on bc 
29c3 d1					pop de 
29c4			 
29c4 e5					push hl  ; to save the ptr 
29c5			 
29c5					; skip opcode 
29c5 23					inc hl  
29c6					; skip next ptr 
29c6 23					inc hl  
29c7 23					inc hl 
29c8					; skip len 
29c8 23					inc hl 
29c9			 
29c9				if DEBUG_FORTH_WORDS 
29c9					DMARK "LSc" 
29c9 f5				push af  
29ca 3a de 29			ld a, (.dmark)  
29cd 32 65 ee			ld (debug_mark),a  
29d0 3a df 29			ld a, (.dmark+1)  
29d3 32 66 ee			ld (debug_mark+1),a  
29d6 3a e0 29			ld a, (.dmark+2)  
29d9 32 67 ee			ld (debug_mark+2),a  
29dc 18 03			jr .pastdmark  
29de ..			.dmark: db "LSc"  
29e1 f1			.pastdmark: pop af  
29e2			endm  
# End of macro DMARK
29e2					CALLMONITOR 
29e2 cd 6f ee			call debug_vector  
29e5				endm  
# End of macro CALLMONITOR
29e5				endif 
29e5			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
29e5			; ie. If WOO is defined first and then WO. Couldnt list WO. 
29e5			; Nope that has gone the other way. It needs to be exact not on first zero 
29e5			;		call strcmp 
29e5 c5					push bc 
29e6 cd a0 11				call StrictStrCmp 
29e9 c1					pop bc 
29ea c2 64 29				jp nz, .ldouscanm 
29ed				 
29ed			 
29ed			 
29ed					; we have a uword so push its name to the stack 
29ed			 
29ed			;	   	push hl  ; save so we can move to next dict block 
29ed e1			pop hl 
29ee			 
29ee				if DEBUG_FORTH_WORDS 
29ee					DMARK "LSm" 
29ee f5				push af  
29ef 3a 03 2a			ld a, (.dmark)  
29f2 32 65 ee			ld (debug_mark),a  
29f5 3a 04 2a			ld a, (.dmark+1)  
29f8 32 66 ee			ld (debug_mark+1),a  
29fb 3a 05 2a			ld a, (.dmark+2)  
29fe 32 67 ee			ld (debug_mark+2),a  
2a01 18 03			jr .pastdmark  
2a03 ..			.dmark: db "LSm"  
2a06 f1			.pastdmark: pop af  
2a07			endm  
# End of macro DMARK
2a07					CALLMONITOR 
2a07 cd 6f ee			call debug_vector  
2a0a				endm  
# End of macro CALLMONITOR
2a0a				endif 
2a0a			 
2a0a					; skip opcode 
2a0a 23					inc hl  
2a0b					; skip next ptr 
2a0b 23					inc hl  
2a0c 23					inc hl 
2a0d					; skip len 
2a0d 7e					ld a, (hl)   ; save length to add 
2a0e				if DEBUG_FORTH_WORDS 
2a0e					DMARK "LS2" 
2a0e f5				push af  
2a0f 3a 23 2a			ld a, (.dmark)  
2a12 32 65 ee			ld (debug_mark),a  
2a15 3a 24 2a			ld a, (.dmark+1)  
2a18 32 66 ee			ld (debug_mark+1),a  
2a1b 3a 25 2a			ld a, (.dmark+2)  
2a1e 32 67 ee			ld (debug_mark+2),a  
2a21 18 03			jr .pastdmark  
2a23 ..			.dmark: db "LS2"  
2a26 f1			.pastdmark: pop af  
2a27			endm  
# End of macro DMARK
2a27					CALLMONITOR 
2a27 cd 6f ee			call debug_vector  
2a2a				endm  
# End of macro CALLMONITOR
2a2a				endif 
2a2a			 
2a2a					; save this location 
2a2a				 
2a2a e5					push hl 
2a2b			 
2a2b 23					inc hl 
2a2c 11 bd e2				ld de, scratch+2 
2a2f 4f					ld c, a 
2a30 06 00				ld b, 0 
2a32			 
2a32				if DEBUG_FORTH_WORDS 
2a32					DMARK "LSn" 
2a32 f5				push af  
2a33 3a 47 2a			ld a, (.dmark)  
2a36 32 65 ee			ld (debug_mark),a  
2a39 3a 48 2a			ld a, (.dmark+1)  
2a3c 32 66 ee			ld (debug_mark+1),a  
2a3f 3a 49 2a			ld a, (.dmark+2)  
2a42 32 67 ee			ld (debug_mark+2),a  
2a45 18 03			jr .pastdmark  
2a47 ..			.dmark: db "LSn"  
2a4a f1			.pastdmark: pop af  
2a4b			endm  
# End of macro DMARK
2a4b					CALLMONITOR 
2a4b cd 6f ee			call debug_vector  
2a4e				endm  
# End of macro CALLMONITOR
2a4e				endif 
2a4e			 
2a4e					; copy uword name to scratch 
2a4e			 
2a4e			;		ldir 
2a4e			.licplw:	; copy uword name to scratch converting to lower case as we go 
2a4e ed a0				ldi 
2a50 1b					dec de 
2a51 1a					ld a, (de) 
2a52 cd 73 10				call to_lower 
2a55 12					ld (de),a 
2a56 13					inc de 
2a57 3e 00				ld a, 0 
2a59 b9					cp c 
2a5a 20 f2				jr nz, .licplw 
2a5c			 
2a5c			 
2a5c			 
2a5c 1b					dec de 
2a5d 3e 20				ld a, ' '    ; change null to space 
2a5f 12					ld (de), a 
2a60			 
2a60 13					inc de 
2a61			 
2a61 d5					push de 
2a62 c1					pop bc     ; move scratch pointer to end of word name and save it 
2a63			 
2a63 e1					pop hl 
2a64 7e					ld a, (hl) 
2a65					;inc hl 
2a65					; skip word string 
2a65 cd f5 0d				call addatohl 
2a68			 
2a68 23					inc hl 
2a69			 
2a69				if DEBUG_FORTH_WORDS 
2a69					DMARK "LS3" 
2a69 f5				push af  
2a6a 3a 7e 2a			ld a, (.dmark)  
2a6d 32 65 ee			ld (debug_mark),a  
2a70 3a 7f 2a			ld a, (.dmark+1)  
2a73 32 66 ee			ld (debug_mark+1),a  
2a76 3a 80 2a			ld a, (.dmark+2)  
2a79 32 67 ee			ld (debug_mark+2),a  
2a7c 18 03			jr .pastdmark  
2a7e ..			.dmark: db "LS3"  
2a81 f1			.pastdmark: pop af  
2a82			endm  
# End of macro DMARK
2a82					CALLMONITOR 
2a82 cd 6f ee			call debug_vector  
2a85				endm  
# End of macro CALLMONITOR
2a85				endif 
2a85					; should now be at the start of the machine code to setup the eval of the uword 
2a85					; now locate the ptr to the string defintion 
2a85			 
2a85					; skip ld hl, 
2a85					; then load the ptr 
2a85			; TODO use get from hl ptr 
2a85 23					inc hl 
2a86 5e					ld e, (hl) 
2a87 23					inc hl 
2a88 56					ld d, (hl) 
2a89 eb					ex de, hl 
2a8a			 
2a8a			 
2a8a				if DEBUG_FORTH_WORDS 
2a8a					DMARK "LSt" 
2a8a f5				push af  
2a8b 3a 9f 2a			ld a, (.dmark)  
2a8e 32 65 ee			ld (debug_mark),a  
2a91 3a a0 2a			ld a, (.dmark+1)  
2a94 32 66 ee			ld (debug_mark+1),a  
2a97 3a a1 2a			ld a, (.dmark+2)  
2a9a 32 67 ee			ld (debug_mark+2),a  
2a9d 18 03			jr .pastdmark  
2a9f ..			.dmark: db "LSt"  
2aa2 f1			.pastdmark: pop af  
2aa3			endm  
# End of macro DMARK
2aa3					CALLMONITOR 
2aa3 cd 6f ee			call debug_vector  
2aa6				endm  
# End of macro CALLMONITOR
2aa6				endif 
2aa6			 
2aa6			; cant push right now due to tokenised strings  
2aa6			 
2aa6			; get the destination of where to copy this definition to. 
2aa6			 
2aa6 c5					push bc 
2aa7 d1					pop de 
2aa8			 
2aa8 7e			.listl:         ld a,(hl) 
2aa9 fe 00				cp 0 
2aab 28 09				jr z, .lreplsp     ; replace zero with space 
2aad					;cp FORTH_END_BUFFER 
2aad fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2aaf 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2ab1				 
2ab1					; just copy this char as is then 
2ab1			 
2ab1 12					ld (de), a 
2ab2			 
2ab2 23			.listnxt:	inc hl 
2ab3 13					inc de 
2ab4 18 f2				jr .listl 
2ab6			 
2ab6 3e 20		.lreplsp:	ld a,' ' 
2ab8 12					ld (de), a 
2ab9 18 f7				jr .listnxt 
2abb			 
2abb			; close up uword def 
2abb			 
2abb			.listdone: 
2abb 12					ld (de), a 
2abc 13					inc de 
2abd 3e 00				ld a, 0 
2abf 12					ld (de), a 
2ac0			 
2ac0			; now have def so clean up and push to stack 
2ac0			 
2ac0 21 bb e2				ld hl, scratch 
2ac3				if DEBUG_FORTH_WORDS 
2ac3					DMARK "Ltp" 
2ac3 f5				push af  
2ac4 3a d8 2a			ld a, (.dmark)  
2ac7 32 65 ee			ld (debug_mark),a  
2aca 3a d9 2a			ld a, (.dmark+1)  
2acd 32 66 ee			ld (debug_mark+1),a  
2ad0 3a da 2a			ld a, (.dmark+2)  
2ad3 32 67 ee			ld (debug_mark+2),a  
2ad6 18 03			jr .pastdmark  
2ad8 ..			.dmark: db "Ltp"  
2adb f1			.pastdmark: pop af  
2adc			endm  
# End of macro DMARK
2adc					CALLMONITOR 
2adc cd 6f ee			call debug_vector  
2adf				endm  
# End of macro CALLMONITOR
2adf				endif 
2adf			 
2adf 18 1f			jr .listpush 
2ae1			 
2ae1			;.lnuword:	pop hl 
2ae1			;		call forth_tok_next 
2ae1			;		jp .ldouscan  
2ae1			 
2ae1			.lunotfound:		  
2ae1			 
2ae1				if DEBUG_FORTH_WORDS 
2ae1					DMARK "LSn" 
2ae1 f5				push af  
2ae2 3a f6 2a			ld a, (.dmark)  
2ae5 32 65 ee			ld (debug_mark),a  
2ae8 3a f7 2a			ld a, (.dmark+1)  
2aeb 32 66 ee			ld (debug_mark+1),a  
2aee 3a f8 2a			ld a, (.dmark+2)  
2af1 32 67 ee			ld (debug_mark+2),a  
2af4 18 03			jr .pastdmark  
2af6 ..			.dmark: db "LSn"  
2af9 f1			.pastdmark: pop af  
2afa			endm  
# End of macro DMARK
2afa					CALLMONITOR 
2afa cd 6f ee			call debug_vector  
2afd				endm  
# End of macro CALLMONITOR
2afd				endif 
2afd			 
2afd					 
2afd			;		FORTH_DSP_POP 
2afd			;		ld hl, .luno 
2afd			 
2afd					NEXTW			 
2afd c3 81 1f			jp macro_next 
2b00				endm 
# End of macro NEXTW
2b00			 
2b00			.listpush: 
2b00				if DEBUG_FORTH_WORDS 
2b00					DMARK "LS>" 
2b00 f5				push af  
2b01 3a 15 2b			ld a, (.dmark)  
2b04 32 65 ee			ld (debug_mark),a  
2b07 3a 16 2b			ld a, (.dmark+1)  
2b0a 32 66 ee			ld (debug_mark+1),a  
2b0d 3a 17 2b			ld a, (.dmark+2)  
2b10 32 67 ee			ld (debug_mark+2),a  
2b13 18 03			jr .pastdmark  
2b15 ..			.dmark: db "LS>"  
2b18 f1			.pastdmark: pop af  
2b19			endm  
# End of macro DMARK
2b19					CALLMONITOR 
2b19 cd 6f ee			call debug_vector  
2b1c				endm  
# End of macro CALLMONITOR
2b1c				endif 
2b1c cd fe 1b				call forth_push_str 
2b1f			 
2b1f			 
2b1f			 
2b1f					NEXTW 
2b1f c3 81 1f			jp macro_next 
2b22				endm 
# End of macro NEXTW
2b22			 
2b22			;.luno:    db "Word not found",0 
2b22			 
2b22			 
2b22			 
2b22			 
2b22			 
2b22			;		push hl   ; save pointer to start of uword def string 
2b22			; 
2b22			;; look for FORTH_EOL_LINE 
2b22			;		ld a, FORTH_END_BUFFER 
2b22			;		call strlent 
2b22			; 
2b22			;		inc hl		 ; space for coln def 
2b22			;		inc hl 
2b22			;		inc hl          ; space for terms 
2b22			;		inc hl 
2b22			; 
2b22			;		ld a, 20   ; TODO get actual length 
2b22			;		call addatohl    ; include a random amount of room for the uword name 
2b22			; 
2b22			;		 
2b22			;	if DEBUG_FORTH_WORDS 
2b22			;		DMARK "Lt1" 
2b22			;		CALLMONITOR 
2b22			;	endif 
2b22			;		 
2b22			; 
2b22			;; malloc space for the string because we cant change it 
2b22			; 
2b22			;		call malloc 
2b22			;	if DEBUG_FORTH_MALLOC_GUARD 
2b22			;		push af 
2b22			;		call ishlzero 
2b22			;		pop af 
2b22			;		 
2b22			;		call z,malloc_error 
2b22			;	endif 
2b22			; 
2b22			;	if DEBUG_FORTH_WORDS 
2b22			;		DMARK "Lt2" 
2b22			;		CALLMONITOR 
2b22			;	endif 
2b22			;		pop de 
2b22			;		push hl    ; push the malloc to release later 
2b22			;		push hl   ;  push back a copy for the later stack push 
2b22			;		 
2b22			;; copy the string swapping out the zero terms for spaces 
2b22			; 
2b22			;		; de has our source 
2b22			;		; hl has our dest 
2b22			; 
2b22			;; add the coln def 
2b22			; 
2b22			;		ld a, ':' 
2b22			;		ld (hl), a 
2b22			;		inc hl 
2b22			;		ld a, ' ' 
2b22			;		ld (hl), a 
2b22			;		inc hl 
2b22			; 
2b22			;; add the uname word 
2b22			;		push de   ; save our string for now 
2b22			;		ex de, hl 
2b22			; 
2b22			;		FORTH_DSP_VALUE 
2b22			;		;v5 FORTH_DSP_VALUE 
2b22			; 
2b22			;		inc hl   ; skip type but we know by now this is OK 
2b22			; 
2b22			;.luword:	ld a,(hl) 
2b22			;		cp 0 
2b22			;		jr z, .luword2 
2b22			;		ld (de), a 
2b22			;		inc de 
2b22			;		inc hl 
2b22			;		jr .luword 
2b22			; 
2b22			;.luword2:	ld a, ' ' 
2b22			;		ld (de), a 
2b22			;;		inc hl 
2b22			;;		inc de 
2b22			;;		ld (de), a 
2b22			;;		inc hl 
2b22			;		inc de 
2b22			; 
2b22			;		ex de, hl 
2b22			;		pop de 
2b22			;		 
2b22			;		 
2b22			; 
2b22			;; detoken that string and copy it 
2b22			; 
2b22			;	if DEBUG_FORTH_WORDS 
2b22			;		DMARK "Lt2" 
2b22			;		CALLMONITOR 
2b22			;	endif 
2b22			;.ldetok:	ld a, (de) 
2b22			;		cp FORTH_END_BUFFER 
2b22			;		jr z, .ldetokend 
2b22			;		; swap out any zero term for space 
2b22			;		cp 0 
2b22			;		jr nz, .ldetoknext 
2b22			;		ld a, ' ' 
2b22			; 
2b22			;	if DEBUG_FORTH_WORDS 
2b22			;		DMARK "LtS" 
2b22			;		CALLMONITOR 
2b22			;	endif 
2b22			;.ldetoknext:	ld (hl), a 
2b22			;		inc de 
2b22			;		inc hl 
2b22			;		jr .ldetok 
2b22			; 
2b22			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2b22			;		ld (hl), a  
2b22			; 
2b22			;; free that temp malloc 
2b22			; 
2b22			;		pop hl    
2b22			; 
2b22			;	if DEBUG_FORTH_WORDS 
2b22			;		DMARK "Lt4" 
2b22			;		CALLMONITOR 
2b22			;	endif 
2b22			;		call forth_apushstrhl 
2b22			; 
2b22			;		; get rid of temp malloc area 
2b22			; 
2b22			;		pop hl 
2b22			;		call free 
2b22			; 
2b22			;		jr .ludone 
2b22			; 
2b22			;.lnuword:	pop hl 
2b22			;		call forth_tok_next 
2b22			;		jp .ldouscan  
2b22			; 
2b22			;.ludone:		 pop hl 
2b22			; 
2b22					NEXTW 
2b22 c3 81 1f			jp macro_next 
2b25				endm 
# End of macro NEXTW
2b25			 
2b25			.FORGET: 
2b25				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2b25 5d				db WORD_SYS_CORE+73             
2b26 9e 2b			dw .NOP            
2b28 07				db 6 + 1 
2b29 .. 00			db "FORGET",0              
2b30				endm 
# End of macro CWHEAD
2b30			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2b30			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2b30			; | |  
2b30			; | | e.g. "MORE" forget 
2b30					if DEBUG_FORTH_WORDS_KEY 
2b30						DMARK "FRG" 
2b30 f5				push af  
2b31 3a 45 2b			ld a, (.dmark)  
2b34 32 65 ee			ld (debug_mark),a  
2b37 3a 46 2b			ld a, (.dmark+1)  
2b3a 32 66 ee			ld (debug_mark+1),a  
2b3d 3a 47 2b			ld a, (.dmark+2)  
2b40 32 67 ee			ld (debug_mark+2),a  
2b43 18 03			jr .pastdmark  
2b45 ..			.dmark: db "FRG"  
2b48 f1			.pastdmark: pop af  
2b49			endm  
# End of macro DMARK
2b49						CALLMONITOR 
2b49 cd 6f ee			call debug_vector  
2b4c				endm  
# End of macro CALLMONITOR
2b4c					endif 
2b4c			 
2b4c				; find uword 
2b4c			        ; update start of word with "_" 
2b4c				; replace uword with deleted flag 
2b4c			 
2b4c			 
2b4c			;	if DEBUG_FORTH_WORDS 
2b4c			;		DMARK "FOG" 
2b4c			;		CALLMONITOR 
2b4c			;	endif 
2b4c			 
2b4c			 
2b4c					; Get ptr to the word we need to look up 
2b4c			 
2b4c					FORTH_DSP_VALUEHL 
2b4c cd 95 1d			call macro_dsp_valuehl 
2b4f				endm 
# End of macro FORTH_DSP_VALUEHL
2b4f					;v5 FORTH_DSP_VALUE 
2b4f				; TODO type check 
2b4f			;		inc hl    ; Skip type check  
2b4f e5					push hl 
2b50 c1					pop bc 
2b51			;		ex de, hl    ; put into DE 
2b51			 
2b51			 
2b51 21 fa 60				ld hl, baseram 
2b54					;ld hl, baseusermem 
2b54			 
2b54				; skip dict stub 
2b54			;	call forth_tok_next 
2b54 e5			push hl   ; sacreifical push 
2b55			 
2b55			.fldouscanm: 
2b55 e1				pop hl 
2b56			.fldouscan: 
2b56			;	if DEBUG_FORTH_WORDS 
2b56			;		DMARK "LSs" 
2b56			;		CALLMONITOR 
2b56			;	endif 
2b56				; skip dict stub 
2b56 cd be 20				call forth_tok_next 
2b59			 
2b59			 
2b59			; while we have words to look for 
2b59			 
2b59 7e				ld a, (hl)      
2b5a			;	if DEBUG_FORTH_WORDS 
2b5a			;		DMARK "LSk" 
2b5a			;		CALLMONITOR 
2b5a			;	endif 
2b5a fe 00				cp WORD_SYS_END 
2b5c ca 98 2b				jp z, .flunotfound 
2b5f fe 01				cp WORD_SYS_UWORD 
2b61 c2 56 2b				jp nz, .fldouscan 
2b64			 
2b64			;	if DEBUG_FORTH_WORDS 
2b64			;		DMARK "LSu" 
2b64			;		CALLMONITOR 
2b64			;	endif 
2b64			 
2b64					; found a uword but is it the one we want... 
2b64			 
2b64 c5					push bc     ; uword to find is on bc 
2b65 d1					pop de 
2b66			 
2b66 e5					push hl  ; to save the ptr 
2b67			 
2b67					; skip opcode 
2b67 23					inc hl  
2b68					; skip next ptr 
2b68 23					inc hl  
2b69 23					inc hl 
2b6a					; skip len 
2b6a 23					inc hl 
2b6b			 
2b6b			;	if DEBUG_FORTH_WORDS 
2b6b			;		DMARK "LSc" 
2b6b			;		CALLMONITOR 
2b6b			;	endif 
2b6b cd 93 11				call strcmp 
2b6e c2 55 2b				jp nz, .fldouscanm 
2b71			; 
2b71			; 
2b71			;; while we have words to look for 
2b71			; 
2b71			;.fdouscan:	ld a, (hl)      
2b71			;	if DEBUG_FORTH_WORDS 
2b71			;		DMARK "LSs" 
2b71			;		CALLMONITOR 
2b71			;	endif 
2b71			;		cp WORD_SYS_END 
2b71			;		jp z, .fudone 
2b71			;		cp WORD_SYS_UWORD 
2b71			;		jp nz, .fnuword 
2b71			; 
2b71			;	if DEBUG_FORTH_WORDS 
2b71			;		DMARK "FGu" 
2b71			;		CALLMONITOR 
2b71			;	endif 
2b71			; 
2b71			;		; found a uword but is it the one we want... 
2b71			; 
2b71			; 
2b71			;	        pop de   ; get back the dsp name 
2b71			;		push de 
2b71			; 
2b71			;		push hl  ; to save the ptr 
2b71			; 
2b71			;		; skip opcode 
2b71			;		inc hl  
2b71			;		; skip next ptr 
2b71			;		inc hl  
2b71			;		inc hl 
2b71			;		; skip len 
2b71			;		inc hl 
2b71			; 
2b71			;	if DEBUG_FORTH_WORDS 
2b71			;		DMARK "FGc" 
2b71			;		CALLMONITOR 
2b71			;	endif 
2b71			;		call strcmp 
2b71			;		jp nz, .fnuword 
2b71			 
2b71			 
2b71 e1			pop hl 
2b72			 
2b72				 
2b72				if DEBUG_FORTH_WORDS 
2b72					DMARK "FGm" 
2b72 f5				push af  
2b73 3a 87 2b			ld a, (.dmark)  
2b76 32 65 ee			ld (debug_mark),a  
2b79 3a 88 2b			ld a, (.dmark+1)  
2b7c 32 66 ee			ld (debug_mark+1),a  
2b7f 3a 89 2b			ld a, (.dmark+2)  
2b82 32 67 ee			ld (debug_mark+2),a  
2b85 18 03			jr .pastdmark  
2b87 ..			.dmark: db "FGm"  
2b8a f1			.pastdmark: pop af  
2b8b			endm  
# End of macro DMARK
2b8b					CALLMONITOR 
2b8b cd 6f ee			call debug_vector  
2b8e				endm  
# End of macro CALLMONITOR
2b8e				endif 
2b8e			 
2b8e			 
2b8e			 
2b8e					; we have a uword so push its name to the stack 
2b8e			 
2b8e			;	   	push hl  ; save so we can move to next dict block 
2b8e			;pop hl 
2b8e			 
2b8e					; update opcode to deleted 
2b8e 3e 03				ld a, WORD_SYS_DELETED 
2b90 77					ld (hl), a 
2b91			 
2b91 23					inc hl  
2b92					; skip next ptr 
2b92 23					inc hl  
2b93 23					inc hl 
2b94					; skip len 
2b94 23					inc hl 
2b95			 
2b95					; TODO change parser to skip deleted words but for now mark it out 
2b95 3e 5f				ld a, "_" 
2b97 77					ld  (hl),a 
2b98			 
2b98			;		jr .fudone 
2b98			; 
2b98			;.fnuword:	pop hl 
2b98			;		call forth_tok_next 
2b98			;		jp .fdouscan  
2b98			 
2b98			.flunotfound:		  
2b98			 
2b98			 
2b98					 
2b98					FORTH_DSP_POP 
2b98 cd 4d 1e			call macro_forth_dsp_pop 
2b9b				endm 
# End of macro FORTH_DSP_POP
2b9b			;		ld hl, .luno 
2b9b			;.fudone:		 pop hl 
2b9b					NEXTW 
2b9b c3 81 1f			jp macro_next 
2b9e				endm 
# End of macro NEXTW
2b9e			.NOP: 
2b9e				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2b9e 61				db WORD_SYS_CORE+77             
2b9f c5 2b			dw .COMO            
2ba1 04				db 3 + 1 
2ba2 .. 00			db "NOP",0              
2ba6				endm 
# End of macro CWHEAD
2ba6			; | NOP (  --  ) Do nothing | DONE 
2ba6					if DEBUG_FORTH_WORDS_KEY 
2ba6						DMARK "NOP" 
2ba6 f5				push af  
2ba7 3a bb 2b			ld a, (.dmark)  
2baa 32 65 ee			ld (debug_mark),a  
2bad 3a bc 2b			ld a, (.dmark+1)  
2bb0 32 66 ee			ld (debug_mark+1),a  
2bb3 3a bd 2b			ld a, (.dmark+2)  
2bb6 32 67 ee			ld (debug_mark+2),a  
2bb9 18 03			jr .pastdmark  
2bbb ..			.dmark: db "NOP"  
2bbe f1			.pastdmark: pop af  
2bbf			endm  
# End of macro DMARK
2bbf						CALLMONITOR 
2bbf cd 6f ee			call debug_vector  
2bc2				endm  
# End of macro CALLMONITOR
2bc2					endif 
2bc2				       NEXTW 
2bc2 c3 81 1f			jp macro_next 
2bc5				endm 
# End of macro NEXTW
2bc5			.COMO: 
2bc5				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2bc5 6e				db WORD_SYS_CORE+90             
2bc6 17 2c			dw .COMC            
2bc8 02				db 1 + 1 
2bc9 .. 00			db "(",0              
2bcb				endm 
# End of macro CWHEAD
2bcb			; | ( ( -- )  Start of comment | DONE 
2bcb			 
2bcb			 
2bcb 2a bc e5				ld hl, ( os_tok_ptr) 
2bce 11 12 2c			ld de, .closepar 
2bd1					 
2bd1					if DEBUG_FORTH_WORDS 
2bd1						DMARK ").." 
2bd1 f5				push af  
2bd2 3a e6 2b			ld a, (.dmark)  
2bd5 32 65 ee			ld (debug_mark),a  
2bd8 3a e7 2b			ld a, (.dmark+1)  
2bdb 32 66 ee			ld (debug_mark+1),a  
2bde 3a e8 2b			ld a, (.dmark+2)  
2be1 32 67 ee			ld (debug_mark+2),a  
2be4 18 03			jr .pastdmark  
2be6 ..			.dmark: db ").."  
2be9 f1			.pastdmark: pop af  
2bea			endm  
# End of macro DMARK
2bea						CALLMONITOR 
2bea cd 6f ee			call debug_vector  
2bed				endm  
# End of macro CALLMONITOR
2bed					endif 
2bed cd 88 20			call findnexttok  
2bf0			 
2bf0					if DEBUG_FORTH_WORDS 
2bf0						DMARK "IF5" 
2bf0 f5				push af  
2bf1 3a 05 2c			ld a, (.dmark)  
2bf4 32 65 ee			ld (debug_mark),a  
2bf7 3a 06 2c			ld a, (.dmark+1)  
2bfa 32 66 ee			ld (debug_mark+1),a  
2bfd 3a 07 2c			ld a, (.dmark+2)  
2c00 32 67 ee			ld (debug_mark+2),a  
2c03 18 03			jr .pastdmark  
2c05 ..			.dmark: db "IF5"  
2c08 f1			.pastdmark: pop af  
2c09			endm  
# End of macro DMARK
2c09						CALLMONITOR 
2c09 cd 6f ee			call debug_vector  
2c0c				endm  
# End of macro CALLMONITOR
2c0c					endif 
2c0c				; replace below with ) exec using tok_ptr 
2c0c 22 bc e5			ld (os_tok_ptr), hl 
2c0f c3 0a 20			jp exec1 
2c12			 
2c12 .. 00			.closepar:   db ")",0 
2c14			 
2c14				       NEXTW 
2c14 c3 81 1f			jp macro_next 
2c17				endm 
# End of macro NEXTW
2c17			.COMC: 
2c17				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2c17 6f				db WORD_SYS_CORE+91             
2c18 20 2c			dw .SCRATCH            
2c1a 02				db 1 + 1 
2c1b .. 00			db ")",0              
2c1d				endm 
# End of macro CWHEAD
2c1d			; | ) ( -- )  End of comment |  DONE  
2c1d				       NEXTW 
2c1d c3 81 1f			jp macro_next 
2c20				endm 
# End of macro NEXTW
2c20			 
2c20			.SCRATCH: 
2c20				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2c20 6f				db WORD_SYS_CORE+91             
2c21 5b 2c			dw .INC            
2c23 08				db 7 + 1 
2c24 .. 00			db "SCRATCH",0              
2c2c				endm 
# End of macro CWHEAD
2c2c			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2c2c			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2c2c			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2c2c			; | |  
2c2c			; | | e.g.    : score $00 scratch ; 
2c2c			; | |  
2c2c			; | | $00 score ! 
2c2c			; | | $01 score +! 
2c2c			; | |  
2c2c			; | | e.g.   : varword $0a scratch ;  
2c2c			; | | 
2c2c			; | | $8000 varword ! 
2c2c					if DEBUG_FORTH_WORDS_KEY 
2c2c						DMARK "SCR" 
2c2c f5				push af  
2c2d 3a 41 2c			ld a, (.dmark)  
2c30 32 65 ee			ld (debug_mark),a  
2c33 3a 42 2c			ld a, (.dmark+1)  
2c36 32 66 ee			ld (debug_mark+1),a  
2c39 3a 43 2c			ld a, (.dmark+2)  
2c3c 32 67 ee			ld (debug_mark+2),a  
2c3f 18 03			jr .pastdmark  
2c41 ..			.dmark: db "SCR"  
2c44 f1			.pastdmark: pop af  
2c45			endm  
# End of macro DMARK
2c45						CALLMONITOR 
2c45 cd 6f ee			call debug_vector  
2c48				endm  
# End of macro CALLMONITOR
2c48					endif 
2c48			 
2c48					FORTH_DSP_VALUEHL 
2c48 cd 95 1d			call macro_dsp_valuehl 
2c4b				endm 
# End of macro FORTH_DSP_VALUEHL
2c4b				 
2c4b					FORTH_DSP_POP 
2c4b cd 4d 1e			call macro_forth_dsp_pop 
2c4e				endm 
# End of macro FORTH_DSP_POP
2c4e			 
2c4e 7d					ld a, l 
2c4f 21 e0 e7				ld hl, os_var_array 
2c52 cd f5 0d				call addatohl 
2c55			 
2c55 cd 90 1b				call forth_push_numhl 
2c58			 
2c58				       NEXTW 
2c58 c3 81 1f			jp macro_next 
2c5b				endm 
# End of macro NEXTW
2c5b			 
2c5b			.INC: 
2c5b				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2c5b 6f				db WORD_SYS_CORE+91             
2c5c b1 2c			dw .DEC            
2c5e 03				db 2 + 1 
2c5f .. 00			db "+!",0              
2c62				endm 
# End of macro CWHEAD
2c62			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2c62					if DEBUG_FORTH_WORDS_KEY 
2c62						DMARK "+s_" 
2c62 f5				push af  
2c63 3a 77 2c			ld a, (.dmark)  
2c66 32 65 ee			ld (debug_mark),a  
2c69 3a 78 2c			ld a, (.dmark+1)  
2c6c 32 66 ee			ld (debug_mark+1),a  
2c6f 3a 79 2c			ld a, (.dmark+2)  
2c72 32 67 ee			ld (debug_mark+2),a  
2c75 18 03			jr .pastdmark  
2c77 ..			.dmark: db "+s_"  
2c7a f1			.pastdmark: pop af  
2c7b			endm  
# End of macro DMARK
2c7b						CALLMONITOR 
2c7b cd 6f ee			call debug_vector  
2c7e				endm  
# End of macro CALLMONITOR
2c7e					endif 
2c7e			 
2c7e					FORTH_DSP_VALUEHL 
2c7e cd 95 1d			call macro_dsp_valuehl 
2c81				endm 
# End of macro FORTH_DSP_VALUEHL
2c81			 
2c81 e5					push hl   ; save address 
2c82			 
2c82					FORTH_DSP_POP 
2c82 cd 4d 1e			call macro_forth_dsp_pop 
2c85				endm 
# End of macro FORTH_DSP_POP
2c85			 
2c85					FORTH_DSP_VALUEHL 
2c85 cd 95 1d			call macro_dsp_valuehl 
2c88				endm 
# End of macro FORTH_DSP_VALUEHL
2c88			 
2c88 e5					push hl 
2c89					FORTH_DSP_POP 
2c89 cd 4d 1e			call macro_forth_dsp_pop 
2c8c				endm 
# End of macro FORTH_DSP_POP
2c8c e1					pop hl 
2c8d			 
2c8d					; hl contains value to add to byte at a 
2c8d				 
2c8d eb					ex de, hl 
2c8e			 
2c8e e1					pop hl 
2c8f			 
2c8f					if DEBUG_FORTH_WORDS 
2c8f						DMARK "INC" 
2c8f f5				push af  
2c90 3a a4 2c			ld a, (.dmark)  
2c93 32 65 ee			ld (debug_mark),a  
2c96 3a a5 2c			ld a, (.dmark+1)  
2c99 32 66 ee			ld (debug_mark+1),a  
2c9c 3a a6 2c			ld a, (.dmark+2)  
2c9f 32 67 ee			ld (debug_mark+2),a  
2ca2 18 03			jr .pastdmark  
2ca4 ..			.dmark: db "INC"  
2ca7 f1			.pastdmark: pop af  
2ca8			endm  
# End of macro DMARK
2ca8						CALLMONITOR 
2ca8 cd 6f ee			call debug_vector  
2cab				endm  
# End of macro CALLMONITOR
2cab					endif 
2cab			 
2cab 7e					ld a,(hl) 
2cac 83					add e 
2cad 77					ld (hl),a 
2cae			 
2cae			 
2cae			 
2cae				       NEXTW 
2cae c3 81 1f			jp macro_next 
2cb1				endm 
# End of macro NEXTW
2cb1			 
2cb1			.DEC: 
2cb1				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2cb1 6f				db WORD_SYS_CORE+91             
2cb2 05 2d			dw .INC2            
2cb4 03				db 2 + 1 
2cb5 .. 00			db "-!",0              
2cb8				endm 
# End of macro CWHEAD
2cb8			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2cb8					if DEBUG_FORTH_WORDS_KEY 
2cb8						DMARK "-s_" 
2cb8 f5				push af  
2cb9 3a cd 2c			ld a, (.dmark)  
2cbc 32 65 ee			ld (debug_mark),a  
2cbf 3a ce 2c			ld a, (.dmark+1)  
2cc2 32 66 ee			ld (debug_mark+1),a  
2cc5 3a cf 2c			ld a, (.dmark+2)  
2cc8 32 67 ee			ld (debug_mark+2),a  
2ccb 18 03			jr .pastdmark  
2ccd ..			.dmark: db "-s_"  
2cd0 f1			.pastdmark: pop af  
2cd1			endm  
# End of macro DMARK
2cd1						CALLMONITOR 
2cd1 cd 6f ee			call debug_vector  
2cd4				endm  
# End of macro CALLMONITOR
2cd4					endif 
2cd4			 
2cd4					FORTH_DSP_VALUEHL 
2cd4 cd 95 1d			call macro_dsp_valuehl 
2cd7				endm 
# End of macro FORTH_DSP_VALUEHL
2cd7			 
2cd7 e5					push hl   ; save address 
2cd8			 
2cd8					FORTH_DSP_POP 
2cd8 cd 4d 1e			call macro_forth_dsp_pop 
2cdb				endm 
# End of macro FORTH_DSP_POP
2cdb			 
2cdb					FORTH_DSP_VALUEHL 
2cdb cd 95 1d			call macro_dsp_valuehl 
2cde				endm 
# End of macro FORTH_DSP_VALUEHL
2cde			 
2cde					; hl contains value to add to byte at a 
2cde				 
2cde eb					ex de, hl 
2cdf			 
2cdf e1					pop hl 
2ce0			 
2ce0					if DEBUG_FORTH_WORDS 
2ce0						DMARK "DEC" 
2ce0 f5				push af  
2ce1 3a f5 2c			ld a, (.dmark)  
2ce4 32 65 ee			ld (debug_mark),a  
2ce7 3a f6 2c			ld a, (.dmark+1)  
2cea 32 66 ee			ld (debug_mark+1),a  
2ced 3a f7 2c			ld a, (.dmark+2)  
2cf0 32 67 ee			ld (debug_mark+2),a  
2cf3 18 03			jr .pastdmark  
2cf5 ..			.dmark: db "DEC"  
2cf8 f1			.pastdmark: pop af  
2cf9			endm  
# End of macro DMARK
2cf9						CALLMONITOR 
2cf9 cd 6f ee			call debug_vector  
2cfc				endm  
# End of macro CALLMONITOR
2cfc					endif 
2cfc			 
2cfc 7e					ld a,(hl) 
2cfd 93					sub e 
2cfe 77					ld (hl),a 
2cff			 
2cff			 
2cff					FORTH_DSP_POP 
2cff cd 4d 1e			call macro_forth_dsp_pop 
2d02				endm 
# End of macro FORTH_DSP_POP
2d02			 
2d02				       NEXTW 
2d02 c3 81 1f			jp macro_next 
2d05				endm 
# End of macro NEXTW
2d05			 
2d05			.INC2: 
2d05				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2d05 6f				db WORD_SYS_CORE+91             
2d06 b2 2d			dw .DEC2            
2d08 04				db 3 + 1 
2d09 .. 00			db "+2!",0              
2d0d				endm 
# End of macro CWHEAD
2d0d			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2d0d			 
2d0d					if DEBUG_FORTH_WORDS_KEY 
2d0d						DMARK "+2s" 
2d0d f5				push af  
2d0e 3a 22 2d			ld a, (.dmark)  
2d11 32 65 ee			ld (debug_mark),a  
2d14 3a 23 2d			ld a, (.dmark+1)  
2d17 32 66 ee			ld (debug_mark+1),a  
2d1a 3a 24 2d			ld a, (.dmark+2)  
2d1d 32 67 ee			ld (debug_mark+2),a  
2d20 18 03			jr .pastdmark  
2d22 ..			.dmark: db "+2s"  
2d25 f1			.pastdmark: pop af  
2d26			endm  
# End of macro DMARK
2d26						CALLMONITOR 
2d26 cd 6f ee			call debug_vector  
2d29				endm  
# End of macro CALLMONITOR
2d29					endif 
2d29			 
2d29					; Address 
2d29			 
2d29					FORTH_DSP_VALUEHL 
2d29 cd 95 1d			call macro_dsp_valuehl 
2d2c				endm 
# End of macro FORTH_DSP_VALUEHL
2d2c			 
2d2c e5					push hl    ; save address 
2d2d			 
2d2d					; load content into de 
2d2d			 
2d2d 5e					ld e,(hl) 
2d2e 23					inc hl 
2d2f 56					ld d, (hl) 
2d30			 
2d30					if DEBUG_FORTH_WORDS 
2d30						DMARK "+2a" 
2d30 f5				push af  
2d31 3a 45 2d			ld a, (.dmark)  
2d34 32 65 ee			ld (debug_mark),a  
2d37 3a 46 2d			ld a, (.dmark+1)  
2d3a 32 66 ee			ld (debug_mark+1),a  
2d3d 3a 47 2d			ld a, (.dmark+2)  
2d40 32 67 ee			ld (debug_mark+2),a  
2d43 18 03			jr .pastdmark  
2d45 ..			.dmark: db "+2a"  
2d48 f1			.pastdmark: pop af  
2d49			endm  
# End of macro DMARK
2d49						CALLMONITOR 
2d49 cd 6f ee			call debug_vector  
2d4c				endm  
# End of macro CALLMONITOR
2d4c					endif 
2d4c			 
2d4c					FORTH_DSP_POP 
2d4c cd 4d 1e			call macro_forth_dsp_pop 
2d4f				endm 
# End of macro FORTH_DSP_POP
2d4f			 
2d4f					; Get value to add 
2d4f			 
2d4f					FORTH_DSP_VALUE 
2d4f cd 7e 1d			call macro_forth_dsp_value 
2d52				endm 
# End of macro FORTH_DSP_VALUE
2d52			 
2d52					if DEBUG_FORTH_WORDS 
2d52						DMARK "+2v" 
2d52 f5				push af  
2d53 3a 67 2d			ld a, (.dmark)  
2d56 32 65 ee			ld (debug_mark),a  
2d59 3a 68 2d			ld a, (.dmark+1)  
2d5c 32 66 ee			ld (debug_mark+1),a  
2d5f 3a 69 2d			ld a, (.dmark+2)  
2d62 32 67 ee			ld (debug_mark+2),a  
2d65 18 03			jr .pastdmark  
2d67 ..			.dmark: db "+2v"  
2d6a f1			.pastdmark: pop af  
2d6b			endm  
# End of macro DMARK
2d6b						CALLMONITOR 
2d6b cd 6f ee			call debug_vector  
2d6e				endm  
# End of macro CALLMONITOR
2d6e					endif 
2d6e			 
2d6e 19					add hl, de 
2d6f			 
2d6f					if DEBUG_FORTH_WORDS 
2d6f						DMARK "+2+" 
2d6f f5				push af  
2d70 3a 84 2d			ld a, (.dmark)  
2d73 32 65 ee			ld (debug_mark),a  
2d76 3a 85 2d			ld a, (.dmark+1)  
2d79 32 66 ee			ld (debug_mark+1),a  
2d7c 3a 86 2d			ld a, (.dmark+2)  
2d7f 32 67 ee			ld (debug_mark+2),a  
2d82 18 03			jr .pastdmark  
2d84 ..			.dmark: db "+2+"  
2d87 f1			.pastdmark: pop af  
2d88			endm  
# End of macro DMARK
2d88						CALLMONITOR 
2d88 cd 6f ee			call debug_vector  
2d8b				endm  
# End of macro CALLMONITOR
2d8b					endif 
2d8b			 
2d8b					; move result to de 
2d8b			 
2d8b eb					ex de, hl 
2d8c			 
2d8c					; Address 
2d8c			 
2d8c e1					pop hl 
2d8d			 
2d8d					; save it back 
2d8d			 
2d8d 73					ld (hl), e 
2d8e 23					inc hl 
2d8f 72					ld (hl), d 
2d90			 
2d90					if DEBUG_FORTH_WORDS 
2d90						DMARK "+2e" 
2d90 f5				push af  
2d91 3a a5 2d			ld a, (.dmark)  
2d94 32 65 ee			ld (debug_mark),a  
2d97 3a a6 2d			ld a, (.dmark+1)  
2d9a 32 66 ee			ld (debug_mark+1),a  
2d9d 3a a7 2d			ld a, (.dmark+2)  
2da0 32 67 ee			ld (debug_mark+2),a  
2da3 18 03			jr .pastdmark  
2da5 ..			.dmark: db "+2e"  
2da8 f1			.pastdmark: pop af  
2da9			endm  
# End of macro DMARK
2da9						CALLMONITOR 
2da9 cd 6f ee			call debug_vector  
2dac				endm  
# End of macro CALLMONITOR
2dac					endif 
2dac			 
2dac			 
2dac			 
2dac					FORTH_DSP_POP 
2dac cd 4d 1e			call macro_forth_dsp_pop 
2daf				endm 
# End of macro FORTH_DSP_POP
2daf			 
2daf			 
2daf				       NEXTW 
2daf c3 81 1f			jp macro_next 
2db2				endm 
# End of macro NEXTW
2db2			 
2db2			.DEC2: 
2db2				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2db2 6f				db WORD_SYS_CORE+91             
2db3 61 2e			dw .GET2            
2db5 04				db 3 + 1 
2db6 .. 00			db "-2!",0              
2dba				endm 
# End of macro CWHEAD
2dba			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2dba			 
2dba			 
2dba					if DEBUG_FORTH_WORDS_KEY 
2dba						DMARK "-2s" 
2dba f5				push af  
2dbb 3a cf 2d			ld a, (.dmark)  
2dbe 32 65 ee			ld (debug_mark),a  
2dc1 3a d0 2d			ld a, (.dmark+1)  
2dc4 32 66 ee			ld (debug_mark+1),a  
2dc7 3a d1 2d			ld a, (.dmark+2)  
2dca 32 67 ee			ld (debug_mark+2),a  
2dcd 18 03			jr .pastdmark  
2dcf ..			.dmark: db "-2s"  
2dd2 f1			.pastdmark: pop af  
2dd3			endm  
# End of macro DMARK
2dd3						CALLMONITOR 
2dd3 cd 6f ee			call debug_vector  
2dd6				endm  
# End of macro CALLMONITOR
2dd6					endif 
2dd6			 
2dd6					; Address 
2dd6			 
2dd6					FORTH_DSP_VALUEHL 
2dd6 cd 95 1d			call macro_dsp_valuehl 
2dd9				endm 
# End of macro FORTH_DSP_VALUEHL
2dd9			 
2dd9 e5					push hl    ; save address 
2dda			 
2dda					; load content into de 
2dda			 
2dda 5e					ld e,(hl) 
2ddb 23					inc hl 
2ddc 56					ld d, (hl) 
2ddd			 
2ddd					if DEBUG_FORTH_WORDS 
2ddd						DMARK "-2a" 
2ddd f5				push af  
2dde 3a f2 2d			ld a, (.dmark)  
2de1 32 65 ee			ld (debug_mark),a  
2de4 3a f3 2d			ld a, (.dmark+1)  
2de7 32 66 ee			ld (debug_mark+1),a  
2dea 3a f4 2d			ld a, (.dmark+2)  
2ded 32 67 ee			ld (debug_mark+2),a  
2df0 18 03			jr .pastdmark  
2df2 ..			.dmark: db "-2a"  
2df5 f1			.pastdmark: pop af  
2df6			endm  
# End of macro DMARK
2df6						CALLMONITOR 
2df6 cd 6f ee			call debug_vector  
2df9				endm  
# End of macro CALLMONITOR
2df9					endif 
2df9			 
2df9					FORTH_DSP_POP 
2df9 cd 4d 1e			call macro_forth_dsp_pop 
2dfc				endm 
# End of macro FORTH_DSP_POP
2dfc			 
2dfc					; Get value to remove 
2dfc			 
2dfc					FORTH_DSP_VALUE 
2dfc cd 7e 1d			call macro_forth_dsp_value 
2dff				endm 
# End of macro FORTH_DSP_VALUE
2dff			 
2dff					if DEBUG_FORTH_WORDS 
2dff						DMARK "-2v" 
2dff f5				push af  
2e00 3a 14 2e			ld a, (.dmark)  
2e03 32 65 ee			ld (debug_mark),a  
2e06 3a 15 2e			ld a, (.dmark+1)  
2e09 32 66 ee			ld (debug_mark+1),a  
2e0c 3a 16 2e			ld a, (.dmark+2)  
2e0f 32 67 ee			ld (debug_mark+2),a  
2e12 18 03			jr .pastdmark  
2e14 ..			.dmark: db "-2v"  
2e17 f1			.pastdmark: pop af  
2e18			endm  
# End of macro DMARK
2e18						CALLMONITOR 
2e18 cd 6f ee			call debug_vector  
2e1b				endm  
# End of macro CALLMONITOR
2e1b					endif 
2e1b			 
2e1b eb					ex de, hl 
2e1c ed 52				sbc hl, de 
2e1e			 
2e1e					if DEBUG_FORTH_WORDS 
2e1e						DMARK "-2d" 
2e1e f5				push af  
2e1f 3a 33 2e			ld a, (.dmark)  
2e22 32 65 ee			ld (debug_mark),a  
2e25 3a 34 2e			ld a, (.dmark+1)  
2e28 32 66 ee			ld (debug_mark+1),a  
2e2b 3a 35 2e			ld a, (.dmark+2)  
2e2e 32 67 ee			ld (debug_mark+2),a  
2e31 18 03			jr .pastdmark  
2e33 ..			.dmark: db "-2d"  
2e36 f1			.pastdmark: pop af  
2e37			endm  
# End of macro DMARK
2e37						CALLMONITOR 
2e37 cd 6f ee			call debug_vector  
2e3a				endm  
# End of macro CALLMONITOR
2e3a					endif 
2e3a			 
2e3a					; move result to de 
2e3a			 
2e3a eb					ex de, hl 
2e3b			 
2e3b					; Address 
2e3b			 
2e3b e1					pop hl 
2e3c			 
2e3c					; save it back 
2e3c			 
2e3c 73					ld (hl), e 
2e3d 23					inc hl 
2e3e 72					ld (hl), d 
2e3f			 
2e3f					if DEBUG_FORTH_WORDS 
2e3f						DMARK "-2e" 
2e3f f5				push af  
2e40 3a 54 2e			ld a, (.dmark)  
2e43 32 65 ee			ld (debug_mark),a  
2e46 3a 55 2e			ld a, (.dmark+1)  
2e49 32 66 ee			ld (debug_mark+1),a  
2e4c 3a 56 2e			ld a, (.dmark+2)  
2e4f 32 67 ee			ld (debug_mark+2),a  
2e52 18 03			jr .pastdmark  
2e54 ..			.dmark: db "-2e"  
2e57 f1			.pastdmark: pop af  
2e58			endm  
# End of macro DMARK
2e58						CALLMONITOR 
2e58 cd 6f ee			call debug_vector  
2e5b				endm  
# End of macro CALLMONITOR
2e5b					endif 
2e5b			 
2e5b			 
2e5b					FORTH_DSP_POP 
2e5b cd 4d 1e			call macro_forth_dsp_pop 
2e5e				endm 
# End of macro FORTH_DSP_POP
2e5e			 
2e5e			 
2e5e			 
2e5e				       NEXTW 
2e5e c3 81 1f			jp macro_next 
2e61				endm 
# End of macro NEXTW
2e61			.GET2: 
2e61				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2e61 6f				db WORD_SYS_CORE+91             
2e62 96 2e			dw .BANG2            
2e64 03				db 2 + 1 
2e65 .. 00			db "2@",0              
2e68				endm 
# End of macro CWHEAD
2e68			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2e68					if DEBUG_FORTH_WORDS_KEY 
2e68						DMARK "2A_" 
2e68 f5				push af  
2e69 3a 7d 2e			ld a, (.dmark)  
2e6c 32 65 ee			ld (debug_mark),a  
2e6f 3a 7e 2e			ld a, (.dmark+1)  
2e72 32 66 ee			ld (debug_mark+1),a  
2e75 3a 7f 2e			ld a, (.dmark+2)  
2e78 32 67 ee			ld (debug_mark+2),a  
2e7b 18 03			jr .pastdmark  
2e7d ..			.dmark: db "2A_"  
2e80 f1			.pastdmark: pop af  
2e81			endm  
# End of macro DMARK
2e81						CALLMONITOR 
2e81 cd 6f ee			call debug_vector  
2e84				endm  
# End of macro CALLMONITOR
2e84					endif 
2e84			 
2e84					FORTH_DSP_VALUEHL 
2e84 cd 95 1d			call macro_dsp_valuehl 
2e87				endm 
# End of macro FORTH_DSP_VALUEHL
2e87			 
2e87 e5					push hl   ; save address 
2e88			 
2e88					FORTH_DSP_POP 
2e88 cd 4d 1e			call macro_forth_dsp_pop 
2e8b				endm 
# End of macro FORTH_DSP_POP
2e8b			 
2e8b e1					pop hl 
2e8c			 
2e8c 5e					ld e, (hl) 
2e8d 23					inc hl 
2e8e 56					ld d, (hl) 
2e8f			 
2e8f eb					ex de, hl 
2e90			 
2e90 cd 90 1b				call forth_push_numhl 
2e93			 
2e93				       NEXTW 
2e93 c3 81 1f			jp macro_next 
2e96				endm 
# End of macro NEXTW
2e96			.BANG2: 
2e96				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2e96 6f				db WORD_SYS_CORE+91             
2e97 ce 2e			dw .CONFIG            
2e99 03				db 2 + 1 
2e9a .. 00			db "2!",0              
2e9d				endm 
# End of macro CWHEAD
2e9d			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2e9d					if DEBUG_FORTH_WORDS_KEY 
2e9d						DMARK "2S_" 
2e9d f5				push af  
2e9e 3a b2 2e			ld a, (.dmark)  
2ea1 32 65 ee			ld (debug_mark),a  
2ea4 3a b3 2e			ld a, (.dmark+1)  
2ea7 32 66 ee			ld (debug_mark+1),a  
2eaa 3a b4 2e			ld a, (.dmark+2)  
2ead 32 67 ee			ld (debug_mark+2),a  
2eb0 18 03			jr .pastdmark  
2eb2 ..			.dmark: db "2S_"  
2eb5 f1			.pastdmark: pop af  
2eb6			endm  
# End of macro DMARK
2eb6						CALLMONITOR 
2eb6 cd 6f ee			call debug_vector  
2eb9				endm  
# End of macro CALLMONITOR
2eb9					endif 
2eb9			 
2eb9					FORTH_DSP_VALUEHL 
2eb9 cd 95 1d			call macro_dsp_valuehl 
2ebc				endm 
# End of macro FORTH_DSP_VALUEHL
2ebc			 
2ebc e5					push hl   ; save address 
2ebd			 
2ebd			 
2ebd					FORTH_DSP_POP 
2ebd cd 4d 1e			call macro_forth_dsp_pop 
2ec0				endm 
# End of macro FORTH_DSP_POP
2ec0			 
2ec0					 
2ec0					FORTH_DSP_VALUEHL 
2ec0 cd 95 1d			call macro_dsp_valuehl 
2ec3				endm 
# End of macro FORTH_DSP_VALUEHL
2ec3			 
2ec3					FORTH_DSP_POP 
2ec3 cd 4d 1e			call macro_forth_dsp_pop 
2ec6				endm 
# End of macro FORTH_DSP_POP
2ec6			 
2ec6 eb					ex de, hl    ; value now in de 
2ec7			 
2ec7 e1					pop hl 
2ec8			 
2ec8 73					ld (hl), e 
2ec9			 
2ec9 23					inc hl 
2eca			 
2eca 72					ld (hl), d 
2ecb			 
2ecb			 
2ecb				       NEXTW 
2ecb c3 81 1f			jp macro_next 
2ece				endm 
# End of macro NEXTW
2ece			.CONFIG: 
2ece				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
2ece 6f				db WORD_SYS_CORE+91             
2ecf df 2e			dw .ADTOS            
2ed1 07				db 6 + 1 
2ed2 .. 00			db "CONFIG",0              
2ed9				endm 
# End of macro CWHEAD
2ed9			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
2ed9			 
2ed9 cd 69 13				call config 
2edc					NEXTW 
2edc c3 81 1f			jp macro_next 
2edf				endm 
# End of macro NEXTW
2edf			 
2edf			.ADTOS: 
2edf				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
2edf 6f				db WORD_SYS_CORE+91             
2ee0 f5 2e			dw .SBTOS            
2ee2 03				db 2 + 1 
2ee3 .. 00			db "1+",0              
2ee6				endm 
# End of macro CWHEAD
2ee6			; | 1+ ( u -- u )  Increment value on TOS | DONE 
2ee6			 
2ee6					FORTH_DSP_VALUEHL 
2ee6 cd 95 1d			call macro_dsp_valuehl 
2ee9				endm 
# End of macro FORTH_DSP_VALUEHL
2ee9 e5					push hl 
2eea			 
2eea					FORTH_DSP_POP 
2eea cd 4d 1e			call macro_forth_dsp_pop 
2eed				endm 
# End of macro FORTH_DSP_POP
2eed e1					pop hl 
2eee			 
2eee 23					inc hl 
2eef cd 90 1b				call forth_push_numhl 
2ef2					 
2ef2					NEXTW 
2ef2 c3 81 1f			jp macro_next 
2ef5				endm 
# End of macro NEXTW
2ef5			.SBTOS: 
2ef5				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
2ef5 6f				db WORD_SYS_CORE+91             
2ef6 0b 2f			dw .ADSTORE            
2ef8 03				db 2 + 1 
2ef9 .. 00			db "1-",0              
2efc				endm 
# End of macro CWHEAD
2efc			; | 1- ( u -- u )  Decrement value on TOS | DONE 
2efc			 
2efc					FORTH_DSP_VALUEHL 
2efc cd 95 1d			call macro_dsp_valuehl 
2eff				endm 
# End of macro FORTH_DSP_VALUEHL
2eff e5					push hl 
2f00			 
2f00					FORTH_DSP_POP 
2f00 cd 4d 1e			call macro_forth_dsp_pop 
2f03				endm 
# End of macro FORTH_DSP_POP
2f03 e1					pop hl 
2f04			 
2f04 2b					dec hl 
2f05 cd 90 1b				call forth_push_numhl 
2f08					 
2f08					NEXTW 
2f08 c3 81 1f			jp macro_next 
2f0b				endm 
# End of macro NEXTW
2f0b			.ADSTORE: 
2f0b				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
2f0b 6f				db WORD_SYS_CORE+91             
2f0c 21 2f			dw .ADWSTORE            
2f0e 04				db 3 + 1 
2f0f .. 00			db "1+!",0              
2f13				endm 
# End of macro CWHEAD
2f13			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
2f13			 
2f13					FORTH_DSP_VALUEHL 
2f13 cd 95 1d			call macro_dsp_valuehl 
2f16				endm 
# End of macro FORTH_DSP_VALUEHL
2f16 e5					push hl 
2f17			 
2f17					FORTH_DSP_POP 
2f17 cd 4d 1e			call macro_forth_dsp_pop 
2f1a				endm 
# End of macro FORTH_DSP_POP
2f1a e1					pop hl 
2f1b			 
2f1b 7e					ld a, (hl) 
2f1c 3c					inc a 
2f1d 77					ld (hl), a 
2f1e					 
2f1e					NEXTW 
2f1e c3 81 1f			jp macro_next 
2f21				endm 
# End of macro NEXTW
2f21			.ADWSTORE: 
2f21				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
2f21 6f				db WORD_SYS_CORE+91             
2f22 3f 2f			dw .SBSTORE            
2f24 05				db 4 + 1 
2f25 .. 00			db "1+2!",0              
2f2a				endm 
# End of macro CWHEAD
2f2a			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
2f2a			 
2f2a					FORTH_DSP_VALUEHL 
2f2a cd 95 1d			call macro_dsp_valuehl 
2f2d				endm 
# End of macro FORTH_DSP_VALUEHL
2f2d e5					push hl 
2f2e			 
2f2e					FORTH_DSP_POP 
2f2e cd 4d 1e			call macro_forth_dsp_pop 
2f31				endm 
# End of macro FORTH_DSP_POP
2f31 e1					pop hl 
2f32			 
2f32 e5					push hl 
2f33			 
2f33 cd 03 1f				call loadwordinhl 
2f36 23					inc hl 
2f37			 
2f37 d1					pop de 
2f38 eb					ex de, hl 
2f39 73					ld (hl), e 
2f3a 23					inc hl 
2f3b 72					ld (hl), d 
2f3c					 
2f3c					NEXTW 
2f3c c3 81 1f			jp macro_next 
2f3f				endm 
# End of macro NEXTW
2f3f			.SBSTORE: 
2f3f				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
2f3f 6f				db WORD_SYS_CORE+91             
2f40 55 2f			dw .SBWSTORE            
2f42 04				db 3 + 1 
2f43 .. 00			db "1-!",0              
2f47				endm 
# End of macro CWHEAD
2f47			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
2f47			 
2f47					FORTH_DSP_VALUEHL 
2f47 cd 95 1d			call macro_dsp_valuehl 
2f4a				endm 
# End of macro FORTH_DSP_VALUEHL
2f4a e5					push hl 
2f4b			 
2f4b					FORTH_DSP_POP 
2f4b cd 4d 1e			call macro_forth_dsp_pop 
2f4e				endm 
# End of macro FORTH_DSP_POP
2f4e e1					pop hl 
2f4f			 
2f4f 7e					ld a, (hl) 
2f50 3d					dec a 
2f51 77					ld (hl), a 
2f52					 
2f52					NEXTW 
2f52 c3 81 1f			jp macro_next 
2f55				endm 
# End of macro NEXTW
2f55			.SBWSTORE: 
2f55				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
2f55 6f				db WORD_SYS_CORE+91             
2f56 73 2f			dw .ENDCORE            
2f58 05				db 4 + 1 
2f59 .. 00			db "1-2!",0              
2f5e				endm 
# End of macro CWHEAD
2f5e			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
2f5e			 
2f5e					FORTH_DSP_VALUEHL 
2f5e cd 95 1d			call macro_dsp_valuehl 
2f61				endm 
# End of macro FORTH_DSP_VALUEHL
2f61 e5					push hl 
2f62			 
2f62					FORTH_DSP_POP 
2f62 cd 4d 1e			call macro_forth_dsp_pop 
2f65				endm 
# End of macro FORTH_DSP_POP
2f65 e1					pop hl 
2f66			 
2f66 e5					push hl 
2f67			 
2f67 cd 03 1f				call loadwordinhl 
2f6a 2b					dec hl 
2f6b			 
2f6b d1					pop de 
2f6c eb					ex de, hl 
2f6d 73					ld (hl), e 
2f6e 23					inc hl 
2f6f 72					ld (hl), d 
2f70					 
2f70					NEXTW 
2f70 c3 81 1f			jp macro_next 
2f73				endm 
# End of macro NEXTW
2f73			.ENDCORE: 
2f73			 
2f73			; eof 
2f73			 
2f73			 
# End of file forth_words_core.asm
2f73			include "forth_words_flow.asm" 
2f73			 
2f73			; | ## Program Flow Words 
2f73			 
2f73			.IF: 
2f73				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
2f73 1e				db WORD_SYS_CORE+10             
2f74 68 30			dw .THEN            
2f76 03				db 2 + 1 
2f77 .. 00			db "IF",0              
2f7a				endm 
# End of macro CWHEAD
2f7a			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
2f7a			; 
2f7a					if DEBUG_FORTH_WORDS_KEY 
2f7a						DMARK "IF." 
2f7a f5				push af  
2f7b 3a 8f 2f			ld a, (.dmark)  
2f7e 32 65 ee			ld (debug_mark),a  
2f81 3a 90 2f			ld a, (.dmark+1)  
2f84 32 66 ee			ld (debug_mark+1),a  
2f87 3a 91 2f			ld a, (.dmark+2)  
2f8a 32 67 ee			ld (debug_mark+2),a  
2f8d 18 03			jr .pastdmark  
2f8f ..			.dmark: db "IF."  
2f92 f1			.pastdmark: pop af  
2f93			endm  
# End of macro DMARK
2f93						CALLMONITOR 
2f93 cd 6f ee			call debug_vector  
2f96				endm  
# End of macro CALLMONITOR
2f96					endif 
2f96			; eval TOS 
2f96			 
2f96				FORTH_DSP_VALUEHL 
2f96 cd 95 1d			call macro_dsp_valuehl 
2f99				endm 
# End of macro FORTH_DSP_VALUEHL
2f99			 
2f99			;	push hl 
2f99				FORTH_DSP_POP 
2f99 cd 4d 1e			call macro_forth_dsp_pop 
2f9c				endm 
# End of macro FORTH_DSP_POP
2f9c			;	pop hl 
2f9c			 
2f9c					if DEBUG_FORTH_WORDS 
2f9c						DMARK "IF1" 
2f9c f5				push af  
2f9d 3a b1 2f			ld a, (.dmark)  
2fa0 32 65 ee			ld (debug_mark),a  
2fa3 3a b2 2f			ld a, (.dmark+1)  
2fa6 32 66 ee			ld (debug_mark+1),a  
2fa9 3a b3 2f			ld a, (.dmark+2)  
2fac 32 67 ee			ld (debug_mark+2),a  
2faf 18 03			jr .pastdmark  
2fb1 ..			.dmark: db "IF1"  
2fb4 f1			.pastdmark: pop af  
2fb5			endm  
# End of macro DMARK
2fb5						CALLMONITOR 
2fb5 cd 6f ee			call debug_vector  
2fb8				endm  
# End of macro CALLMONITOR
2fb8					endif 
2fb8 b7				or a        ; clear carry flag 
2fb9 11 00 00			ld de, 0 
2fbc eb				ex de,hl 
2fbd ed 52			sbc hl, de 
2fbf c2 49 30			jp nz, .iftrue 
2fc2			 
2fc2					if DEBUG_FORTH_WORDS 
2fc2						DMARK "IF2" 
2fc2 f5				push af  
2fc3 3a d7 2f			ld a, (.dmark)  
2fc6 32 65 ee			ld (debug_mark),a  
2fc9 3a d8 2f			ld a, (.dmark+1)  
2fcc 32 66 ee			ld (debug_mark+1),a  
2fcf 3a d9 2f			ld a, (.dmark+2)  
2fd2 32 67 ee			ld (debug_mark+2),a  
2fd5 18 03			jr .pastdmark  
2fd7 ..			.dmark: db "IF2"  
2fda f1			.pastdmark: pop af  
2fdb			endm  
# End of macro DMARK
2fdb						CALLMONITOR 
2fdb cd 6f ee			call debug_vector  
2fde				endm  
# End of macro CALLMONITOR
2fde					endif 
2fde			 
2fde			; if not true then skip to THEN 
2fde			 
2fde				; TODO get tok_ptr 
2fde				; TODO consume toks until we get to THEN 
2fde			 
2fde 2a bc e5			ld hl, (os_tok_ptr) 
2fe1					if DEBUG_FORTH_WORDS 
2fe1						DMARK "IF3" 
2fe1 f5				push af  
2fe2 3a f6 2f			ld a, (.dmark)  
2fe5 32 65 ee			ld (debug_mark),a  
2fe8 3a f7 2f			ld a, (.dmark+1)  
2feb 32 66 ee			ld (debug_mark+1),a  
2fee 3a f8 2f			ld a, (.dmark+2)  
2ff1 32 67 ee			ld (debug_mark+2),a  
2ff4 18 03			jr .pastdmark  
2ff6 ..			.dmark: db "IF3"  
2ff9 f1			.pastdmark: pop af  
2ffa			endm  
# End of macro DMARK
2ffa						CALLMONITOR 
2ffa cd 6f ee			call debug_vector  
2ffd				endm  
# End of macro CALLMONITOR
2ffd						 
2ffd					endif 
2ffd 11 44 30			ld de, .ifthen 
3000					if DEBUG_FORTH_WORDS 
3000						DMARK "IF4" 
3000 f5				push af  
3001 3a 15 30			ld a, (.dmark)  
3004 32 65 ee			ld (debug_mark),a  
3007 3a 16 30			ld a, (.dmark+1)  
300a 32 66 ee			ld (debug_mark+1),a  
300d 3a 17 30			ld a, (.dmark+2)  
3010 32 67 ee			ld (debug_mark+2),a  
3013 18 03			jr .pastdmark  
3015 ..			.dmark: db "IF4"  
3018 f1			.pastdmark: pop af  
3019			endm  
# End of macro DMARK
3019						CALLMONITOR 
3019 cd 6f ee			call debug_vector  
301c				endm  
# End of macro CALLMONITOR
301c					endif 
301c cd 88 20			call findnexttok  
301f			 
301f					if DEBUG_FORTH_WORDS 
301f						DMARK "IF5" 
301f f5				push af  
3020 3a 34 30			ld a, (.dmark)  
3023 32 65 ee			ld (debug_mark),a  
3026 3a 35 30			ld a, (.dmark+1)  
3029 32 66 ee			ld (debug_mark+1),a  
302c 3a 36 30			ld a, (.dmark+2)  
302f 32 67 ee			ld (debug_mark+2),a  
3032 18 03			jr .pastdmark  
3034 ..			.dmark: db "IF5"  
3037 f1			.pastdmark: pop af  
3038			endm  
# End of macro DMARK
3038						CALLMONITOR 
3038 cd 6f ee			call debug_vector  
303b				endm  
# End of macro CALLMONITOR
303b					endif 
303b				; TODO replace below with ; exec using tok_ptr 
303b 22 bc e5			ld (os_tok_ptr), hl 
303e c3 0a 20			jp exec1 
3041				NEXTW 
3041 c3 81 1f			jp macro_next 
3044				endm 
# End of macro NEXTW
3044			 
3044 .. 00		.ifthen:  db "THEN",0 
3049			 
3049			.iftrue:		 
3049				; Exec next words normally 
3049			 
3049				; if true then exec following IF as normal 
3049					if DEBUG_FORTH_WORDS 
3049						DMARK "IFT" 
3049 f5				push af  
304a 3a 5e 30			ld a, (.dmark)  
304d 32 65 ee			ld (debug_mark),a  
3050 3a 5f 30			ld a, (.dmark+1)  
3053 32 66 ee			ld (debug_mark+1),a  
3056 3a 60 30			ld a, (.dmark+2)  
3059 32 67 ee			ld (debug_mark+2),a  
305c 18 03			jr .pastdmark  
305e ..			.dmark: db "IFT"  
3061 f1			.pastdmark: pop af  
3062			endm  
# End of macro DMARK
3062						CALLMONITOR 
3062 cd 6f ee			call debug_vector  
3065				endm  
# End of macro CALLMONITOR
3065					endif 
3065			 
3065					NEXTW 
3065 c3 81 1f			jp macro_next 
3068				endm 
# End of macro NEXTW
3068			.THEN: 
3068				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
3068 1f				db WORD_SYS_CORE+11             
3069 90 30			dw .ELSE            
306b 05				db 4 + 1 
306c .. 00			db "THEN",0              
3071				endm 
# End of macro CWHEAD
3071			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3071					if DEBUG_FORTH_WORDS_KEY 
3071						DMARK "THN" 
3071 f5				push af  
3072 3a 86 30			ld a, (.dmark)  
3075 32 65 ee			ld (debug_mark),a  
3078 3a 87 30			ld a, (.dmark+1)  
307b 32 66 ee			ld (debug_mark+1),a  
307e 3a 88 30			ld a, (.dmark+2)  
3081 32 67 ee			ld (debug_mark+2),a  
3084 18 03			jr .pastdmark  
3086 ..			.dmark: db "THN"  
3089 f1			.pastdmark: pop af  
308a			endm  
# End of macro DMARK
308a						CALLMONITOR 
308a cd 6f ee			call debug_vector  
308d				endm  
# End of macro CALLMONITOR
308d					endif 
308d					NEXTW 
308d c3 81 1f			jp macro_next 
3090				endm 
# End of macro NEXTW
3090			.ELSE: 
3090				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3090 20				db WORD_SYS_CORE+12             
3091 b8 30			dw .DO            
3093 03				db 2 + 1 
3094 .. 00			db "ELSE",0              
3099				endm 
# End of macro CWHEAD
3099			; | ELSE ( -- ) Not supported - does nothing | TODO 
3099			 
3099					if DEBUG_FORTH_WORDS_KEY 
3099						DMARK "ELS" 
3099 f5				push af  
309a 3a ae 30			ld a, (.dmark)  
309d 32 65 ee			ld (debug_mark),a  
30a0 3a af 30			ld a, (.dmark+1)  
30a3 32 66 ee			ld (debug_mark+1),a  
30a6 3a b0 30			ld a, (.dmark+2)  
30a9 32 67 ee			ld (debug_mark+2),a  
30ac 18 03			jr .pastdmark  
30ae ..			.dmark: db "ELS"  
30b1 f1			.pastdmark: pop af  
30b2			endm  
# End of macro DMARK
30b2						CALLMONITOR 
30b2 cd 6f ee			call debug_vector  
30b5				endm  
# End of macro CALLMONITOR
30b5					endif 
30b5			 
30b5			 
30b5					NEXTW 
30b5 c3 81 1f			jp macro_next 
30b8				endm 
# End of macro NEXTW
30b8			.DO: 
30b8				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
30b8 21				db WORD_SYS_CORE+13             
30b9 df 31			dw .LOOP            
30bb 03				db 2 + 1 
30bc .. 00			db "DO",0              
30bf				endm 
# End of macro CWHEAD
30bf			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
30bf			 
30bf					if DEBUG_FORTH_WORDS_KEY 
30bf						DMARK "DO." 
30bf f5				push af  
30c0 3a d4 30			ld a, (.dmark)  
30c3 32 65 ee			ld (debug_mark),a  
30c6 3a d5 30			ld a, (.dmark+1)  
30c9 32 66 ee			ld (debug_mark+1),a  
30cc 3a d6 30			ld a, (.dmark+2)  
30cf 32 67 ee			ld (debug_mark+2),a  
30d2 18 03			jr .pastdmark  
30d4 ..			.dmark: db "DO."  
30d7 f1			.pastdmark: pop af  
30d8			endm  
# End of macro DMARK
30d8						CALLMONITOR 
30d8 cd 6f ee			call debug_vector  
30db				endm  
# End of macro CALLMONITOR
30db					endif 
30db			;  push pc to rsp stack past the DO 
30db			 
30db 2a bc e5				ld hl, (os_tok_ptr) 
30de 23					inc hl   ; D 
30df 23					inc hl  ; O 
30e0 23					inc hl   ; null 
30e1					if DEBUG_FORTH_WORDS 
30e1						DMARK "DO2" 
30e1 f5				push af  
30e2 3a f6 30			ld a, (.dmark)  
30e5 32 65 ee			ld (debug_mark),a  
30e8 3a f7 30			ld a, (.dmark+1)  
30eb 32 66 ee			ld (debug_mark+1),a  
30ee 3a f8 30			ld a, (.dmark+2)  
30f1 32 67 ee			ld (debug_mark+2),a  
30f4 18 03			jr .pastdmark  
30f6 ..			.dmark: db "DO2"  
30f9 f1			.pastdmark: pop af  
30fa			endm  
# End of macro DMARK
30fa						CALLMONITOR 
30fa cd 6f ee			call debug_vector  
30fd				endm  
# End of macro CALLMONITOR
30fd					endif 
30fd					FORTH_RSP_NEXT 
30fd cd 37 1b			call macro_forth_rsp_next 
3100				endm 
# End of macro FORTH_RSP_NEXT
3100					if DEBUG_FORTH_WORDS 
3100						DMARK "DO3" 
3100 f5				push af  
3101 3a 15 31			ld a, (.dmark)  
3104 32 65 ee			ld (debug_mark),a  
3107 3a 16 31			ld a, (.dmark+1)  
310a 32 66 ee			ld (debug_mark+1),a  
310d 3a 17 31			ld a, (.dmark+2)  
3110 32 67 ee			ld (debug_mark+2),a  
3113 18 03			jr .pastdmark  
3115 ..			.dmark: db "DO3"  
3118 f1			.pastdmark: pop af  
3119			endm  
# End of macro DMARK
3119						CALLMONITOR 
3119 cd 6f ee			call debug_vector  
311c				endm  
# End of macro CALLMONITOR
311c					endif 
311c			 
311c					;if DEBUG_FORTH_WORDS 
311c				;		push hl 
311c			;		endif  
311c			 
311c			; get counters from data stack 
311c			 
311c			 
311c					FORTH_DSP_VALUEHL 
311c cd 95 1d			call macro_dsp_valuehl 
311f				endm 
# End of macro FORTH_DSP_VALUEHL
311f e5					push hl		 ; hl now has starting counter which needs to be tos 
3120			 
3120					if DEBUG_FORTH_WORDS 
3120						DMARK "DO4" 
3120 f5				push af  
3121 3a 35 31			ld a, (.dmark)  
3124 32 65 ee			ld (debug_mark),a  
3127 3a 36 31			ld a, (.dmark+1)  
312a 32 66 ee			ld (debug_mark+1),a  
312d 3a 37 31			ld a, (.dmark+2)  
3130 32 67 ee			ld (debug_mark+2),a  
3133 18 03			jr .pastdmark  
3135 ..			.dmark: db "DO4"  
3138 f1			.pastdmark: pop af  
3139			endm  
# End of macro DMARK
3139						CALLMONITOR 
3139 cd 6f ee			call debug_vector  
313c				endm  
# End of macro CALLMONITOR
313c					endif 
313c					FORTH_DSP_POP 
313c cd 4d 1e			call macro_forth_dsp_pop 
313f				endm 
# End of macro FORTH_DSP_POP
313f			 
313f					if DEBUG_FORTH_WORDS 
313f						DMARK "DO5" 
313f f5				push af  
3140 3a 54 31			ld a, (.dmark)  
3143 32 65 ee			ld (debug_mark),a  
3146 3a 55 31			ld a, (.dmark+1)  
3149 32 66 ee			ld (debug_mark+1),a  
314c 3a 56 31			ld a, (.dmark+2)  
314f 32 67 ee			ld (debug_mark+2),a  
3152 18 03			jr .pastdmark  
3154 ..			.dmark: db "DO5"  
3157 f1			.pastdmark: pop af  
3158			endm  
# End of macro DMARK
3158						CALLMONITOR 
3158 cd 6f ee			call debug_vector  
315b				endm  
# End of macro CALLMONITOR
315b					endif 
315b			 
315b					FORTH_DSP_VALUEHL 
315b cd 95 1d			call macro_dsp_valuehl 
315e				endm 
# End of macro FORTH_DSP_VALUEHL
315e			;		push hl		 ; hl now has starting limit counter 
315e			 
315e					if DEBUG_FORTH_WORDS 
315e						DMARK "DO6" 
315e f5				push af  
315f 3a 73 31			ld a, (.dmark)  
3162 32 65 ee			ld (debug_mark),a  
3165 3a 74 31			ld a, (.dmark+1)  
3168 32 66 ee			ld (debug_mark+1),a  
316b 3a 75 31			ld a, (.dmark+2)  
316e 32 67 ee			ld (debug_mark+2),a  
3171 18 03			jr .pastdmark  
3173 ..			.dmark: db "DO6"  
3176 f1			.pastdmark: pop af  
3177			endm  
# End of macro DMARK
3177						CALLMONITOR 
3177 cd 6f ee			call debug_vector  
317a				endm  
# End of macro CALLMONITOR
317a					endif 
317a					FORTH_DSP_POP 
317a cd 4d 1e			call macro_forth_dsp_pop 
317d				endm 
# End of macro FORTH_DSP_POP
317d			 
317d			; put counters on the loop stack 
317d			 
317d			;		pop hl			 ; limit counter 
317d d1					pop de			; start counter 
317e			 
317e					; push limit counter 
317e			 
317e					if DEBUG_FORTH_WORDS 
317e						DMARK "DO7" 
317e f5				push af  
317f 3a 93 31			ld a, (.dmark)  
3182 32 65 ee			ld (debug_mark),a  
3185 3a 94 31			ld a, (.dmark+1)  
3188 32 66 ee			ld (debug_mark+1),a  
318b 3a 95 31			ld a, (.dmark+2)  
318e 32 67 ee			ld (debug_mark+2),a  
3191 18 03			jr .pastdmark  
3193 ..			.dmark: db "DO7"  
3196 f1			.pastdmark: pop af  
3197			endm  
# End of macro DMARK
3197						CALLMONITOR 
3197 cd 6f ee			call debug_vector  
319a				endm  
# End of macro CALLMONITOR
319a					endif 
319a					FORTH_LOOP_NEXT 
319a cd c6 1d			call macro_forth_loop_next 
319d				endm 
# End of macro FORTH_LOOP_NEXT
319d			 
319d					; push start counter 
319d			 
319d eb					ex de, hl 
319e					if DEBUG_FORTH_WORDS 
319e						DMARK "DO7" 
319e f5				push af  
319f 3a b3 31			ld a, (.dmark)  
31a2 32 65 ee			ld (debug_mark),a  
31a5 3a b4 31			ld a, (.dmark+1)  
31a8 32 66 ee			ld (debug_mark+1),a  
31ab 3a b5 31			ld a, (.dmark+2)  
31ae 32 67 ee			ld (debug_mark+2),a  
31b1 18 03			jr .pastdmark  
31b3 ..			.dmark: db "DO7"  
31b6 f1			.pastdmark: pop af  
31b7			endm  
# End of macro DMARK
31b7						CALLMONITOR 
31b7 cd 6f ee			call debug_vector  
31ba				endm  
# End of macro CALLMONITOR
31ba					endif 
31ba					FORTH_LOOP_NEXT 
31ba cd c6 1d			call macro_forth_loop_next 
31bd				endm 
# End of macro FORTH_LOOP_NEXT
31bd			 
31bd			 
31bd					; init first round of I counter 
31bd			 
31bd 22 e0 e5				ld (os_current_i), hl 
31c0			 
31c0					if DEBUG_FORTH_WORDS 
31c0						DMARK "DO8" 
31c0 f5				push af  
31c1 3a d5 31			ld a, (.dmark)  
31c4 32 65 ee			ld (debug_mark),a  
31c7 3a d6 31			ld a, (.dmark+1)  
31ca 32 66 ee			ld (debug_mark+1),a  
31cd 3a d7 31			ld a, (.dmark+2)  
31d0 32 67 ee			ld (debug_mark+2),a  
31d3 18 03			jr .pastdmark  
31d5 ..			.dmark: db "DO8"  
31d8 f1			.pastdmark: pop af  
31d9			endm  
# End of macro DMARK
31d9						CALLMONITOR 
31d9 cd 6f ee			call debug_vector  
31dc				endm  
# End of macro CALLMONITOR
31dc					endif 
31dc			 
31dc					NEXTW 
31dc c3 81 1f			jp macro_next 
31df				endm 
# End of macro NEXTW
31df			.LOOP: 
31df				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
31df 22				db WORD_SYS_CORE+14             
31e0 f7 32			dw .I            
31e2 05				db 4 + 1 
31e3 .. 00			db "LOOP",0              
31e8				endm 
# End of macro CWHEAD
31e8			; | LOOP ( -- ) Increment and test loop counter  | DONE 
31e8			 
31e8				; pop tos as current loop count to hl 
31e8			 
31e8				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
31e8			 
31e8				FORTH_LOOP_TOS 
31e8 cd f9 1d			call macro_forth_loop_tos 
31eb				endm 
# End of macro FORTH_LOOP_TOS
31eb e5				push hl 
31ec			 
31ec					if DEBUG_FORTH_WORDS_KEY 
31ec						DMARK "LOP" 
31ec f5				push af  
31ed 3a 01 32			ld a, (.dmark)  
31f0 32 65 ee			ld (debug_mark),a  
31f3 3a 02 32			ld a, (.dmark+1)  
31f6 32 66 ee			ld (debug_mark+1),a  
31f9 3a 03 32			ld a, (.dmark+2)  
31fc 32 67 ee			ld (debug_mark+2),a  
31ff 18 03			jr .pastdmark  
3201 ..			.dmark: db "LOP"  
3204 f1			.pastdmark: pop af  
3205			endm  
# End of macro DMARK
3205						CALLMONITOR 
3205 cd 6f ee			call debug_vector  
3208				endm  
# End of macro CALLMONITOR
3208					endif 
3208				; next item on the stack is the limit. get it 
3208			 
3208			 
3208				FORTH_LOOP_POP 
3208 cd 03 1e			call macro_forth_loop_pop 
320b				endm 
# End of macro FORTH_LOOP_POP
320b			 
320b				FORTH_LOOP_TOS 
320b cd f9 1d			call macro_forth_loop_tos 
320e				endm 
# End of macro FORTH_LOOP_TOS
320e			 
320e d1				pop de		 ; de = i, hl = limit 
320f			 
320f					if DEBUG_FORTH_WORDS 
320f						DMARK "LP1" 
320f f5				push af  
3210 3a 24 32			ld a, (.dmark)  
3213 32 65 ee			ld (debug_mark),a  
3216 3a 25 32			ld a, (.dmark+1)  
3219 32 66 ee			ld (debug_mark+1),a  
321c 3a 26 32			ld a, (.dmark+2)  
321f 32 67 ee			ld (debug_mark+2),a  
3222 18 03			jr .pastdmark  
3224 ..			.dmark: db "LP1"  
3227 f1			.pastdmark: pop af  
3228			endm  
# End of macro DMARK
3228						CALLMONITOR 
3228 cd 6f ee			call debug_vector  
322b				endm  
# End of macro CALLMONITOR
322b					endif 
322b			 
322b				; go back to previous word 
322b			 
322b d5				push de    ; save I for inc later 
322c			 
322c			 
322c				; get limit 
322c				;  is I at limit? 
322c			 
322c			 
322c					if DEBUG_FORTH_WORDS 
322c						DMARK "LP1" 
322c f5				push af  
322d 3a 41 32			ld a, (.dmark)  
3230 32 65 ee			ld (debug_mark),a  
3233 3a 42 32			ld a, (.dmark+1)  
3236 32 66 ee			ld (debug_mark+1),a  
3239 3a 43 32			ld a, (.dmark+2)  
323c 32 67 ee			ld (debug_mark+2),a  
323f 18 03			jr .pastdmark  
3241 ..			.dmark: db "LP1"  
3244 f1			.pastdmark: pop af  
3245			endm  
# End of macro DMARK
3245						CALLMONITOR 
3245 cd 6f ee			call debug_vector  
3248				endm  
# End of macro CALLMONITOR
3248					endif 
3248			 
3248 ed 52			sbc hl, de 
324a			 
324a			 
324a				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
324a			 
324a 20 26				jr nz, .loopnotdone 
324c			 
324c e1				pop hl   ; get rid of saved I 
324d				FORTH_LOOP_POP     ; get rid of limit 
324d cd 03 1e			call macro_forth_loop_pop 
3250				endm 
# End of macro FORTH_LOOP_POP
3250			 
3250				FORTH_RSP_POP     ; get rid of DO ptr 
3250 cd 58 1b			call macro_forth_rsp_pop 
3253				endm 
# End of macro FORTH_RSP_POP
3253			 
3253			if DEBUG_FORTH_WORDS 
3253						DMARK "LP>" 
3253 f5				push af  
3254 3a 68 32			ld a, (.dmark)  
3257 32 65 ee			ld (debug_mark),a  
325a 3a 69 32			ld a, (.dmark+1)  
325d 32 66 ee			ld (debug_mark+1),a  
3260 3a 6a 32			ld a, (.dmark+2)  
3263 32 67 ee			ld (debug_mark+2),a  
3266 18 03			jr .pastdmark  
3268 ..			.dmark: db "LP>"  
326b f1			.pastdmark: pop af  
326c			endm  
# End of macro DMARK
326c				CALLMONITOR 
326c cd 6f ee			call debug_vector  
326f				endm  
# End of macro CALLMONITOR
326f			endif 
326f			 
326f					NEXTW 
326f c3 81 1f			jp macro_next 
3272				endm 
# End of macro NEXTW
3272				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3272			 
3272			.loopnotdone: 
3272			 
3272 e1				pop hl    ; get I 
3273 23				inc hl 
3274			 
3274			   	; save new I 
3274			 
3274			 
3274					; set I counter 
3274			 
3274 22 e0 e5				ld (os_current_i), hl 
3277			 
3277					if DEBUG_FORTH_WORDS 
3277						DMARK "LPN" 
3277 f5				push af  
3278 3a 8c 32			ld a, (.dmark)  
327b 32 65 ee			ld (debug_mark),a  
327e 3a 8d 32			ld a, (.dmark+1)  
3281 32 66 ee			ld (debug_mark+1),a  
3284 3a 8e 32			ld a, (.dmark+2)  
3287 32 67 ee			ld (debug_mark+2),a  
328a 18 03			jr .pastdmark  
328c ..			.dmark: db "LPN"  
328f f1			.pastdmark: pop af  
3290			endm  
# End of macro DMARK
3290					CALLMONITOR 
3290 cd 6f ee			call debug_vector  
3293				endm  
# End of macro CALLMONITOR
3293					endif 
3293					 
3293				FORTH_LOOP_NEXT 
3293 cd c6 1d			call macro_forth_loop_next 
3296				endm 
# End of macro FORTH_LOOP_NEXT
3296			 
3296			 
3296					if DEBUG_FORTH_WORDS 
3296 eb						ex de,hl 
3297					endif 
3297			 
3297			;	; get DO ptr 
3297			; 
3297					if DEBUG_FORTH_WORDS 
3297						DMARK "LP7" 
3297 f5				push af  
3298 3a ac 32			ld a, (.dmark)  
329b 32 65 ee			ld (debug_mark),a  
329e 3a ad 32			ld a, (.dmark+1)  
32a1 32 66 ee			ld (debug_mark+1),a  
32a4 3a ae 32			ld a, (.dmark+2)  
32a7 32 67 ee			ld (debug_mark+2),a  
32aa 18 03			jr .pastdmark  
32ac ..			.dmark: db "LP7"  
32af f1			.pastdmark: pop af  
32b0			endm  
# End of macro DMARK
32b0					CALLMONITOR 
32b0 cd 6f ee			call debug_vector  
32b3				endm  
# End of macro CALLMONITOR
32b3					endif 
32b3				FORTH_RSP_TOS 
32b3 cd 4e 1b			call macro_forth_rsp_tos 
32b6				endm 
# End of macro FORTH_RSP_TOS
32b6			 
32b6					if DEBUG_FORTH_WORDS 
32b6						DMARK "LP8" 
32b6 f5				push af  
32b7 3a cb 32			ld a, (.dmark)  
32ba 32 65 ee			ld (debug_mark),a  
32bd 3a cc 32			ld a, (.dmark+1)  
32c0 32 66 ee			ld (debug_mark+1),a  
32c3 3a cd 32			ld a, (.dmark+2)  
32c6 32 67 ee			ld (debug_mark+2),a  
32c9 18 03			jr .pastdmark  
32cb ..			.dmark: db "LP8"  
32ce f1			.pastdmark: pop af  
32cf			endm  
# End of macro DMARK
32cf					CALLMONITOR 
32cf cd 6f ee			call debug_vector  
32d2				endm  
# End of macro CALLMONITOR
32d2					endif 
32d2				;push hl 
32d2			 
32d2				; not going to DO any more 
32d2				; get rid of the RSP pointer as DO will add it back in 
32d2				;FORTH_RSP_POP 
32d2				;pop hl 
32d2			 
32d2				;ld hl,(cli_ret_sp) 
32d2				;ld e, (hl) 
32d2				;inc hl 
32d2				;ld d, (hl) 
32d2				;ex de,hl 
32d2 22 bc e5			ld (os_tok_ptr), hl 
32d5					if DEBUG_FORTH_WORDS 
32d5						DMARK "LP<" 
32d5 f5				push af  
32d6 3a ea 32			ld a, (.dmark)  
32d9 32 65 ee			ld (debug_mark),a  
32dc 3a eb 32			ld a, (.dmark+1)  
32df 32 66 ee			ld (debug_mark+1),a  
32e2 3a ec 32			ld a, (.dmark+2)  
32e5 32 67 ee			ld (debug_mark+2),a  
32e8 18 03			jr .pastdmark  
32ea ..			.dmark: db "LP<"  
32ed f1			.pastdmark: pop af  
32ee			endm  
# End of macro DMARK
32ee					CALLMONITOR 
32ee cd 6f ee			call debug_vector  
32f1				endm  
# End of macro CALLMONITOR
32f1				endif 
32f1 c3 0a 20			jp exec1 
32f4			 
32f4					 
32f4			 
32f4			 
32f4					NEXTW 
32f4 c3 81 1f			jp macro_next 
32f7				endm 
# End of macro NEXTW
32f7			.I:  
32f7			 
32f7				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
32f7 5e				db WORD_SYS_CORE+74             
32f8 22 33			dw .DLOOP            
32fa 02				db 1 + 1 
32fb .. 00			db "I",0              
32fd				endm 
# End of macro CWHEAD
32fd			; | I ( -- ) Current loop counter | DONE 
32fd					if DEBUG_FORTH_WORDS_KEY 
32fd						DMARK "I.." 
32fd f5				push af  
32fe 3a 12 33			ld a, (.dmark)  
3301 32 65 ee			ld (debug_mark),a  
3304 3a 13 33			ld a, (.dmark+1)  
3307 32 66 ee			ld (debug_mark+1),a  
330a 3a 14 33			ld a, (.dmark+2)  
330d 32 67 ee			ld (debug_mark+2),a  
3310 18 03			jr .pastdmark  
3312 ..			.dmark: db "I.."  
3315 f1			.pastdmark: pop af  
3316			endm  
# End of macro DMARK
3316						CALLMONITOR 
3316 cd 6f ee			call debug_vector  
3319				endm  
# End of macro CALLMONITOR
3319					endif 
3319			 
3319 2a e0 e5				ld hl,(os_current_i) 
331c cd 90 1b				call forth_push_numhl 
331f			 
331f					NEXTW 
331f c3 81 1f			jp macro_next 
3322				endm 
# End of macro NEXTW
3322			.DLOOP: 
3322				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
3322 5f				db WORD_SYS_CORE+75             
3323 03 34			dw .REPEAT            
3325 06				db 5 + 1 
3326 .. 00			db "-LOOP",0              
332c				endm 
# End of macro CWHEAD
332c			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
332c				; pop tos as current loop count to hl 
332c					if DEBUG_FORTH_WORDS_KEY 
332c						DMARK "-LP" 
332c f5				push af  
332d 3a 41 33			ld a, (.dmark)  
3330 32 65 ee			ld (debug_mark),a  
3333 3a 42 33			ld a, (.dmark+1)  
3336 32 66 ee			ld (debug_mark+1),a  
3339 3a 43 33			ld a, (.dmark+2)  
333c 32 67 ee			ld (debug_mark+2),a  
333f 18 03			jr .pastdmark  
3341 ..			.dmark: db "-LP"  
3344 f1			.pastdmark: pop af  
3345			endm  
# End of macro DMARK
3345						CALLMONITOR 
3345 cd 6f ee			call debug_vector  
3348				endm  
# End of macro CALLMONITOR
3348					endif 
3348			 
3348				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3348			 
3348				FORTH_LOOP_TOS 
3348 cd f9 1d			call macro_forth_loop_tos 
334b				endm 
# End of macro FORTH_LOOP_TOS
334b e5				push hl 
334c			 
334c					if DEBUG_FORTH_WORDS 
334c						DMARK "-LP" 
334c f5				push af  
334d 3a 61 33			ld a, (.dmark)  
3350 32 65 ee			ld (debug_mark),a  
3353 3a 62 33			ld a, (.dmark+1)  
3356 32 66 ee			ld (debug_mark+1),a  
3359 3a 63 33			ld a, (.dmark+2)  
335c 32 67 ee			ld (debug_mark+2),a  
335f 18 03			jr .pastdmark  
3361 ..			.dmark: db "-LP"  
3364 f1			.pastdmark: pop af  
3365			endm  
# End of macro DMARK
3365						CALLMONITOR 
3365 cd 6f ee			call debug_vector  
3368				endm  
# End of macro CALLMONITOR
3368					endif 
3368				; next item on the stack is the limit. get it 
3368			 
3368			 
3368				FORTH_LOOP_POP 
3368 cd 03 1e			call macro_forth_loop_pop 
336b				endm 
# End of macro FORTH_LOOP_POP
336b			 
336b				FORTH_LOOP_TOS 
336b cd f9 1d			call macro_forth_loop_tos 
336e				endm 
# End of macro FORTH_LOOP_TOS
336e			 
336e d1				pop de		 ; de = i, hl = limit 
336f			 
336f					if DEBUG_FORTH_WORDS 
336f						DMARK "-L1" 
336f f5				push af  
3370 3a 84 33			ld a, (.dmark)  
3373 32 65 ee			ld (debug_mark),a  
3376 3a 85 33			ld a, (.dmark+1)  
3379 32 66 ee			ld (debug_mark+1),a  
337c 3a 86 33			ld a, (.dmark+2)  
337f 32 67 ee			ld (debug_mark+2),a  
3382 18 03			jr .pastdmark  
3384 ..			.dmark: db "-L1"  
3387 f1			.pastdmark: pop af  
3388			endm  
# End of macro DMARK
3388						CALLMONITOR 
3388 cd 6f ee			call debug_vector  
338b				endm  
# End of macro CALLMONITOR
338b					endif 
338b			 
338b				; go back to previous word 
338b			 
338b d5				push de    ; save I for inc later 
338c			 
338c			 
338c				; get limit 
338c				;  is I at limit? 
338c			 
338c			 
338c					if DEBUG_FORTH_WORDS 
338c						DMARK "-L1" 
338c f5				push af  
338d 3a a1 33			ld a, (.dmark)  
3390 32 65 ee			ld (debug_mark),a  
3393 3a a2 33			ld a, (.dmark+1)  
3396 32 66 ee			ld (debug_mark+1),a  
3399 3a a3 33			ld a, (.dmark+2)  
339c 32 67 ee			ld (debug_mark+2),a  
339f 18 03			jr .pastdmark  
33a1 ..			.dmark: db "-L1"  
33a4 f1			.pastdmark: pop af  
33a5			endm  
# End of macro DMARK
33a5						CALLMONITOR 
33a5 cd 6f ee			call debug_vector  
33a8				endm  
# End of macro CALLMONITOR
33a8					endif 
33a8			 
33a8 ed 52			sbc hl, de 
33aa			 
33aa			 
33aa				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
33aa			 
33aa 20 26				jr nz, .mloopnotdone 
33ac			 
33ac e1				pop hl   ; get rid of saved I 
33ad				FORTH_LOOP_POP     ; get rid of limit 
33ad cd 03 1e			call macro_forth_loop_pop 
33b0				endm 
# End of macro FORTH_LOOP_POP
33b0			 
33b0				FORTH_RSP_POP     ; get rid of DO ptr 
33b0 cd 58 1b			call macro_forth_rsp_pop 
33b3				endm 
# End of macro FORTH_RSP_POP
33b3			 
33b3			if DEBUG_FORTH_WORDS 
33b3						DMARK "-L>" 
33b3 f5				push af  
33b4 3a c8 33			ld a, (.dmark)  
33b7 32 65 ee			ld (debug_mark),a  
33ba 3a c9 33			ld a, (.dmark+1)  
33bd 32 66 ee			ld (debug_mark+1),a  
33c0 3a ca 33			ld a, (.dmark+2)  
33c3 32 67 ee			ld (debug_mark+2),a  
33c6 18 03			jr .pastdmark  
33c8 ..			.dmark: db "-L>"  
33cb f1			.pastdmark: pop af  
33cc			endm  
# End of macro DMARK
33cc				CALLMONITOR 
33cc cd 6f ee			call debug_vector  
33cf				endm  
# End of macro CALLMONITOR
33cf			endif 
33cf			 
33cf					NEXTW 
33cf c3 81 1f			jp macro_next 
33d2				endm 
# End of macro NEXTW
33d2				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
33d2			 
33d2			.mloopnotdone: 
33d2			 
33d2 e1				pop hl    ; get I 
33d3 2b				dec hl 
33d4			 
33d4			   	; save new I 
33d4			 
33d4			 
33d4					; set I counter 
33d4			 
33d4 22 e0 e5				ld (os_current_i), hl 
33d7			 
33d7					 
33d7				FORTH_LOOP_NEXT 
33d7 cd c6 1d			call macro_forth_loop_next 
33da				endm 
# End of macro FORTH_LOOP_NEXT
33da			 
33da			 
33da					if DEBUG_FORTH_WORDS 
33da eb						ex de,hl 
33db					endif 
33db			 
33db			;	; get DO ptr 
33db			; 
33db				FORTH_RSP_TOS 
33db cd 4e 1b			call macro_forth_rsp_tos 
33de				endm 
# End of macro FORTH_RSP_TOS
33de			 
33de				;push hl 
33de			 
33de				; not going to DO any more 
33de				; get rid of the RSP pointer as DO will add it back in 
33de				;FORTH_RSP_POP 
33de				;pop hl 
33de			 
33de			 
33de 22 bc e5			ld (os_tok_ptr), hl 
33e1					if DEBUG_FORTH_WORDS 
33e1						DMARK "-L<" 
33e1 f5				push af  
33e2 3a f6 33			ld a, (.dmark)  
33e5 32 65 ee			ld (debug_mark),a  
33e8 3a f7 33			ld a, (.dmark+1)  
33eb 32 66 ee			ld (debug_mark+1),a  
33ee 3a f8 33			ld a, (.dmark+2)  
33f1 32 67 ee			ld (debug_mark+2),a  
33f4 18 03			jr .pastdmark  
33f6 ..			.dmark: db "-L<"  
33f9 f1			.pastdmark: pop af  
33fa			endm  
# End of macro DMARK
33fa					CALLMONITOR 
33fa cd 6f ee			call debug_vector  
33fd				endm  
# End of macro CALLMONITOR
33fd				endif 
33fd c3 0a 20			jp exec1 
3400			 
3400					 
3400			 
3400			 
3400			 
3400				NEXTW 
3400 c3 81 1f			jp macro_next 
3403				endm 
# End of macro NEXTW
3403			 
3403			 
3403			 
3403			 
3403			.REPEAT: 
3403				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3403 71				db WORD_SYS_CORE+93             
3404 56 34			dw .UNTIL            
3406 06				db 5 + 1 
3407 .. 00			db "REPEAT",0              
340e				endm 
# End of macro CWHEAD
340e			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
340e			;  push pc to rsp stack past the REPEAT 
340e					if DEBUG_FORTH_WORDS_KEY 
340e						DMARK "REP" 
340e f5				push af  
340f 3a 23 34			ld a, (.dmark)  
3412 32 65 ee			ld (debug_mark),a  
3415 3a 24 34			ld a, (.dmark+1)  
3418 32 66 ee			ld (debug_mark+1),a  
341b 3a 25 34			ld a, (.dmark+2)  
341e 32 67 ee			ld (debug_mark+2),a  
3421 18 03			jr .pastdmark  
3423 ..			.dmark: db "REP"  
3426 f1			.pastdmark: pop af  
3427			endm  
# End of macro DMARK
3427						CALLMONITOR 
3427 cd 6f ee			call debug_vector  
342a				endm  
# End of macro CALLMONITOR
342a					endif 
342a			 
342a 2a bc e5				ld hl, (os_tok_ptr) 
342d 23					inc hl   ; R 
342e 23					inc hl  ; E 
342f 23					inc hl   ; P 
3430 23					inc hl   ; E 
3431 23					inc hl   ; A 
3432 23					inc hl   ; T 
3433 23					inc hl   ; zero 
3434					FORTH_RSP_NEXT 
3434 cd 37 1b			call macro_forth_rsp_next 
3437				endm 
# End of macro FORTH_RSP_NEXT
3437			 
3437			 
3437					if DEBUG_FORTH_WORDS 
3437						DMARK "REP" 
3437 f5				push af  
3438 3a 4c 34			ld a, (.dmark)  
343b 32 65 ee			ld (debug_mark),a  
343e 3a 4d 34			ld a, (.dmark+1)  
3441 32 66 ee			ld (debug_mark+1),a  
3444 3a 4e 34			ld a, (.dmark+2)  
3447 32 67 ee			ld (debug_mark+2),a  
344a 18 03			jr .pastdmark  
344c ..			.dmark: db "REP"  
344f f1			.pastdmark: pop af  
3450			endm  
# End of macro DMARK
3450						;pop bc    ; TODO BUG ?????? what is this for???? 
3450						CALLMONITOR 
3450 cd 6f ee			call debug_vector  
3453				endm  
# End of macro CALLMONITOR
3453					endif 
3453			 
3453					NEXTW 
3453 c3 81 1f			jp macro_next 
3456				endm 
# End of macro NEXTW
3456			;	       NEXTW 
3456			 
3456			.UNTIL: 
3456				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3456 72				db WORD_SYS_CORE+94             
3457 ed 34			dw .ENDFLOW            
3459 06				db 5 + 1 
345a .. 00			db "UNTIL",0              
3460				endm 
# End of macro CWHEAD
3460			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3460			 
3460				; pop tos as check 
3460			 
3460				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3460			 
3460				FORTH_DSP_VALUEHL 
3460 cd 95 1d			call macro_dsp_valuehl 
3463				endm 
# End of macro FORTH_DSP_VALUEHL
3463			 
3463					if DEBUG_FORTH_WORDS_KEY 
3463						DMARK "UNT" 
3463 f5				push af  
3464 3a 78 34			ld a, (.dmark)  
3467 32 65 ee			ld (debug_mark),a  
346a 3a 79 34			ld a, (.dmark+1)  
346d 32 66 ee			ld (debug_mark+1),a  
3470 3a 7a 34			ld a, (.dmark+2)  
3473 32 67 ee			ld (debug_mark+2),a  
3476 18 03			jr .pastdmark  
3478 ..			.dmark: db "UNT"  
347b f1			.pastdmark: pop af  
347c			endm  
# End of macro DMARK
347c						CALLMONITOR 
347c cd 6f ee			call debug_vector  
347f				endm  
# End of macro CALLMONITOR
347f					endif 
347f			 
347f			;	push hl 
347f				FORTH_DSP_POP 
347f cd 4d 1e			call macro_forth_dsp_pop 
3482				endm 
# End of macro FORTH_DSP_POP
3482			 
3482			;	pop hl 
3482			 
3482				; test if true 
3482			 
3482 cd 1e 0e			call ishlzero 
3485			;	ld a,l 
3485			;	add h 
3485			; 
3485			;	cp 0 
3485			 
3485 20 3e			jr nz, .untilnotdone 
3487			 
3487					if DEBUG_FORTH_WORDS 
3487						DMARK "UNf" 
3487 f5				push af  
3488 3a 9c 34			ld a, (.dmark)  
348b 32 65 ee			ld (debug_mark),a  
348e 3a 9d 34			ld a, (.dmark+1)  
3491 32 66 ee			ld (debug_mark+1),a  
3494 3a 9e 34			ld a, (.dmark+2)  
3497 32 67 ee			ld (debug_mark+2),a  
349a 18 03			jr .pastdmark  
349c ..			.dmark: db "UNf"  
349f f1			.pastdmark: pop af  
34a0			endm  
# End of macro DMARK
34a0						CALLMONITOR 
34a0 cd 6f ee			call debug_vector  
34a3				endm  
# End of macro CALLMONITOR
34a3					endif 
34a3			 
34a3			 
34a3			 
34a3				FORTH_RSP_POP     ; get rid of DO ptr 
34a3 cd 58 1b			call macro_forth_rsp_pop 
34a6				endm 
# End of macro FORTH_RSP_POP
34a6			 
34a6			if DEBUG_FORTH_WORDS 
34a6						DMARK "UN>" 
34a6 f5				push af  
34a7 3a bb 34			ld a, (.dmark)  
34aa 32 65 ee			ld (debug_mark),a  
34ad 3a bc 34			ld a, (.dmark+1)  
34b0 32 66 ee			ld (debug_mark+1),a  
34b3 3a bd 34			ld a, (.dmark+2)  
34b6 32 67 ee			ld (debug_mark+2),a  
34b9 18 03			jr .pastdmark  
34bb ..			.dmark: db "UN>"  
34be f1			.pastdmark: pop af  
34bf			endm  
# End of macro DMARK
34bf				CALLMONITOR 
34bf cd 6f ee			call debug_vector  
34c2				endm  
# End of macro CALLMONITOR
34c2			endif 
34c2			 
34c2					NEXTW 
34c2 c3 81 1f			jp macro_next 
34c5				endm 
# End of macro NEXTW
34c5				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
34c5			 
34c5			.untilnotdone: 
34c5			 
34c5			 
34c5			;	; get DO ptr 
34c5			; 
34c5				FORTH_RSP_TOS 
34c5 cd 4e 1b			call macro_forth_rsp_tos 
34c8				endm 
# End of macro FORTH_RSP_TOS
34c8			 
34c8				;push hl 
34c8			 
34c8				; not going to DO any more 
34c8				; get rid of the RSP pointer as DO will add it back in 
34c8				;FORTH_RSP_POP 
34c8				;pop hl 
34c8			 
34c8			 
34c8 22 bc e5			ld (os_tok_ptr), hl 
34cb					if DEBUG_FORTH_WORDS 
34cb						DMARK "UN<" 
34cb f5				push af  
34cc 3a e0 34			ld a, (.dmark)  
34cf 32 65 ee			ld (debug_mark),a  
34d2 3a e1 34			ld a, (.dmark+1)  
34d5 32 66 ee			ld (debug_mark+1),a  
34d8 3a e2 34			ld a, (.dmark+2)  
34db 32 67 ee			ld (debug_mark+2),a  
34de 18 03			jr .pastdmark  
34e0 ..			.dmark: db "UN<"  
34e3 f1			.pastdmark: pop af  
34e4			endm  
# End of macro DMARK
34e4					CALLMONITOR 
34e4 cd 6f ee			call debug_vector  
34e7				endm  
# End of macro CALLMONITOR
34e7				endif 
34e7 c3 0a 20			jp exec1 
34ea			 
34ea					 
34ea			 
34ea			 
34ea					NEXTW 
34ea c3 81 1f			jp macro_next 
34ed				endm 
# End of macro NEXTW
34ed			 
34ed			 
34ed			.ENDFLOW: 
34ed			 
34ed			; eof 
34ed			 
# End of file forth_words_flow.asm
34ed			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
34ed			include "forth_words_logic.asm" 
34ed			 
34ed			; | ## Logic Words 
34ed			 
34ed			.NOT: 
34ed				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
34ed 2d				db WORD_SYS_CORE+25             
34ee 35 35			dw .IS            
34f0 04				db 3 + 1 
34f1 .. 00			db "NOT",0              
34f5				endm 
# End of macro CWHEAD
34f5			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
34f5					if DEBUG_FORTH_WORDS_KEY 
34f5						DMARK "NOT" 
34f5 f5				push af  
34f6 3a 0a 35			ld a, (.dmark)  
34f9 32 65 ee			ld (debug_mark),a  
34fc 3a 0b 35			ld a, (.dmark+1)  
34ff 32 66 ee			ld (debug_mark+1),a  
3502 3a 0c 35			ld a, (.dmark+2)  
3505 32 67 ee			ld (debug_mark+2),a  
3508 18 03			jr .pastdmark  
350a ..			.dmark: db "NOT"  
350d f1			.pastdmark: pop af  
350e			endm  
# End of macro DMARK
350e						CALLMONITOR 
350e cd 6f ee			call debug_vector  
3511				endm  
# End of macro CALLMONITOR
3511					endif 
3511					FORTH_DSP 
3511 cd 5b 1d			call macro_forth_dsp 
3514				endm 
# End of macro FORTH_DSP
3514 7e					ld a,(hl)	; get type of value on TOS 
3515 fe 02				cp DS_TYPE_INUM  
3517 28 03				jr z, .noti 
3519					NEXTW 
3519 c3 81 1f			jp macro_next 
351c				endm 
# End of macro NEXTW
351c			.noti:          FORTH_DSP_VALUEHL 
351c cd 95 1d			call macro_dsp_valuehl 
351f				endm 
# End of macro FORTH_DSP_VALUEHL
351f			;		push hl 
351f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
351f cd 4d 1e			call macro_forth_dsp_pop 
3522				endm 
# End of macro FORTH_DSP_POP
3522			;		pop hl 
3522 3e 00				ld a,0 
3524 bd					cp l 
3525 28 04				jr z, .not2t 
3527 2e 00				ld l, 0 
3529 18 02				jr .notip 
352b			 
352b 2e ff		.not2t:		ld l, 255 
352d			 
352d 26 00		.notip:		ld h, 0	 
352f			 
352f cd 90 1b				call forth_push_numhl 
3532					NEXTW 
3532 c3 81 1f			jp macro_next 
3535				endm 
# End of macro NEXTW
3535			 
3535			.IS: 
3535				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
3535 2d				db WORD_SYS_CORE+25             
3536 5b 35			dw .LZERO            
3538 03				db 2 + 1 
3539 .. 00			db "IS",0              
353c				endm 
# End of macro CWHEAD
353c			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
353c					if DEBUG_FORTH_WORDS_KEY 
353c						DMARK "IS." 
353c f5				push af  
353d 3a 51 35			ld a, (.dmark)  
3540 32 65 ee			ld (debug_mark),a  
3543 3a 52 35			ld a, (.dmark+1)  
3546 32 66 ee			ld (debug_mark+1),a  
3549 3a 53 35			ld a, (.dmark+2)  
354c 32 67 ee			ld (debug_mark+2),a  
354f 18 03			jr .pastdmark  
3551 ..			.dmark: db "IS."  
3554 f1			.pastdmark: pop af  
3555			endm  
# End of macro DMARK
3555						CALLMONITOR 
3555 cd 6f ee			call debug_vector  
3558				endm  
# End of macro CALLMONITOR
3558					endif 
3558					NEXTW 
3558 c3 81 1f			jp macro_next 
355b				endm 
# End of macro NEXTW
355b			.LZERO: 
355b				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
355b 2d				db WORD_SYS_CORE+25             
355c 65 35			dw .TZERO            
355e 03				db 2 + 1 
355f .. 00			db "0<",0              
3562				endm 
# End of macro CWHEAD
3562			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3562					NEXTW 
3562 c3 81 1f			jp macro_next 
3565				endm 
# End of macro NEXTW
3565			.TZERO: 
3565				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3565 2e				db WORD_SYS_CORE+26             
3566 ac 35			dw .LESS            
3568 03				db 2 + 1 
3569 .. 00			db "0=",0              
356c				endm 
# End of macro CWHEAD
356c			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
356c				; TODO add floating point number detection 
356c					;v5 FORTH_DSP_VALUE 
356c					if DEBUG_FORTH_WORDS_KEY 
356c						DMARK "0=." 
356c f5				push af  
356d 3a 81 35			ld a, (.dmark)  
3570 32 65 ee			ld (debug_mark),a  
3573 3a 82 35			ld a, (.dmark+1)  
3576 32 66 ee			ld (debug_mark+1),a  
3579 3a 83 35			ld a, (.dmark+2)  
357c 32 67 ee			ld (debug_mark+2),a  
357f 18 03			jr .pastdmark  
3581 ..			.dmark: db "0=."  
3584 f1			.pastdmark: pop af  
3585			endm  
# End of macro DMARK
3585						CALLMONITOR 
3585 cd 6f ee			call debug_vector  
3588				endm  
# End of macro CALLMONITOR
3588					endif 
3588					FORTH_DSP 
3588 cd 5b 1d			call macro_forth_dsp 
358b				endm 
# End of macro FORTH_DSP
358b 7e					ld a,(hl)	; get type of value on TOS 
358c fe 02				cp DS_TYPE_INUM  
358e 28 00				jr z, .tz_inum 
3590			 
3590				if FORTH_ENABLE_FLOATMATH 
3590					jr .tz_done 
3590			 
3590				endif 
3590					 
3590			 
3590			.tz_inum: 
3590					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3590 cd 95 1d			call macro_dsp_valuehl 
3593				endm 
# End of macro FORTH_DSP_VALUEHL
3593			 
3593			;		push hl 
3593			 
3593					; destroy value TOS 
3593			 
3593					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3593 cd 4d 1e			call macro_forth_dsp_pop 
3596				endm 
# End of macro FORTH_DSP_POP
3596			 
3596			;		pop hl 
3596			 
3596 3e 00				ld a,0 
3598			 
3598 bd					cp l 
3599 20 08				jr nz, .tz_notzero 
359b			 
359b bc					cp h 
359c			 
359c 20 05				jr nz, .tz_notzero 
359e			 
359e			 
359e 21 01 00				ld hl, FORTH_TRUE 
35a1 18 03				jr .tz_done 
35a3			 
35a3 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
35a6			 
35a6					; push value back onto stack for another op etc 
35a6			 
35a6			.tz_done: 
35a6 cd 90 1b				call forth_push_numhl 
35a9			 
35a9					NEXTW 
35a9 c3 81 1f			jp macro_next 
35ac				endm 
# End of macro NEXTW
35ac			.LESS: 
35ac				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
35ac 2f				db WORD_SYS_CORE+27             
35ad 15 36			dw .GT            
35af 02				db 1 + 1 
35b0 .. 00			db "<",0              
35b2				endm 
# End of macro CWHEAD
35b2			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
35b2				; TODO add floating point number detection 
35b2					if DEBUG_FORTH_WORDS_KEY 
35b2						DMARK "LES" 
35b2 f5				push af  
35b3 3a c7 35			ld a, (.dmark)  
35b6 32 65 ee			ld (debug_mark),a  
35b9 3a c8 35			ld a, (.dmark+1)  
35bc 32 66 ee			ld (debug_mark+1),a  
35bf 3a c9 35			ld a, (.dmark+2)  
35c2 32 67 ee			ld (debug_mark+2),a  
35c5 18 03			jr .pastdmark  
35c7 ..			.dmark: db "LES"  
35ca f1			.pastdmark: pop af  
35cb			endm  
# End of macro DMARK
35cb						CALLMONITOR 
35cb cd 6f ee			call debug_vector  
35ce				endm  
# End of macro CALLMONITOR
35ce					endif 
35ce					FORTH_DSP 
35ce cd 5b 1d			call macro_forth_dsp 
35d1				endm 
# End of macro FORTH_DSP
35d1					;v5 FORTH_DSP_VALUE 
35d1 7e					ld a,(hl)	; get type of value on TOS 
35d2 fe 02				cp DS_TYPE_INUM  
35d4 28 00				jr z, .less_inum 
35d6			 
35d6				if FORTH_ENABLE_FLOATMATH 
35d6					jr .less_done 
35d6			 
35d6				endif 
35d6					 
35d6			 
35d6			.less_inum: 
35d6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35d6 cd 95 1d			call macro_dsp_valuehl 
35d9				endm 
# End of macro FORTH_DSP_VALUEHL
35d9			 
35d9 e5					push hl  ; u2 
35da			 
35da					; destroy value TOS 
35da			 
35da					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35da cd 4d 1e			call macro_forth_dsp_pop 
35dd				endm 
# End of macro FORTH_DSP_POP
35dd			 
35dd			 
35dd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35dd cd 95 1d			call macro_dsp_valuehl 
35e0				endm 
# End of macro FORTH_DSP_VALUEHL
35e0			 
35e0 e5					push hl    ; u1 
35e1			 
35e1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35e1 cd 4d 1e			call macro_forth_dsp_pop 
35e4				endm 
# End of macro FORTH_DSP_POP
35e4			 
35e4			 
35e4 b7			 or a      ;clear carry flag 
35e5 01 00 00		 ld bc, FORTH_FALSE 
35e8 e1			  pop hl    ; u1 
35e9 d1			  pop de    ; u2 
35ea ed 52		  sbc hl,de 
35ec 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
35ee			 
35ee 01 01 00		 ld bc, FORTH_TRUE 
35f1			.lscont:  
35f1 c5					push bc 
35f2 e1					pop hl 
35f3			 
35f3					if DEBUG_FORTH_WORDS 
35f3						DMARK "LT1" 
35f3 f5				push af  
35f4 3a 08 36			ld a, (.dmark)  
35f7 32 65 ee			ld (debug_mark),a  
35fa 3a 09 36			ld a, (.dmark+1)  
35fd 32 66 ee			ld (debug_mark+1),a  
3600 3a 0a 36			ld a, (.dmark+2)  
3603 32 67 ee			ld (debug_mark+2),a  
3606 18 03			jr .pastdmark  
3608 ..			.dmark: db "LT1"  
360b f1			.pastdmark: pop af  
360c			endm  
# End of macro DMARK
360c						CALLMONITOR 
360c cd 6f ee			call debug_vector  
360f				endm  
# End of macro CALLMONITOR
360f					endif 
360f cd 90 1b				call forth_push_numhl 
3612			 
3612					NEXTW 
3612 c3 81 1f			jp macro_next 
3615				endm 
# End of macro NEXTW
3615			.GT: 
3615				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3615 30				db WORD_SYS_CORE+28             
3616 7e 36			dw .EQUAL            
3618 02				db 1 + 1 
3619 .. 00			db ">",0              
361b				endm 
# End of macro CWHEAD
361b			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
361b				; TODO add floating point number detection 
361b					if DEBUG_FORTH_WORDS_KEY 
361b						DMARK "GRT" 
361b f5				push af  
361c 3a 30 36			ld a, (.dmark)  
361f 32 65 ee			ld (debug_mark),a  
3622 3a 31 36			ld a, (.dmark+1)  
3625 32 66 ee			ld (debug_mark+1),a  
3628 3a 32 36			ld a, (.dmark+2)  
362b 32 67 ee			ld (debug_mark+2),a  
362e 18 03			jr .pastdmark  
3630 ..			.dmark: db "GRT"  
3633 f1			.pastdmark: pop af  
3634			endm  
# End of macro DMARK
3634						CALLMONITOR 
3634 cd 6f ee			call debug_vector  
3637				endm  
# End of macro CALLMONITOR
3637					endif 
3637					FORTH_DSP 
3637 cd 5b 1d			call macro_forth_dsp 
363a				endm 
# End of macro FORTH_DSP
363a					;FORTH_DSP_VALUE 
363a 7e					ld a,(hl)	; get type of value on TOS 
363b fe 02				cp DS_TYPE_INUM  
363d 28 00				jr z, .gt_inum 
363f			 
363f				if FORTH_ENABLE_FLOATMATH 
363f					jr .gt_done 
363f			 
363f				endif 
363f					 
363f			 
363f			.gt_inum: 
363f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
363f cd 95 1d			call macro_dsp_valuehl 
3642				endm 
# End of macro FORTH_DSP_VALUEHL
3642			 
3642 e5					push hl  ; u2 
3643			 
3643					; destroy value TOS 
3643			 
3643					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3643 cd 4d 1e			call macro_forth_dsp_pop 
3646				endm 
# End of macro FORTH_DSP_POP
3646			 
3646			 
3646					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3646 cd 95 1d			call macro_dsp_valuehl 
3649				endm 
# End of macro FORTH_DSP_VALUEHL
3649			 
3649 e5					push hl    ; u1 
364a			 
364a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
364a cd 4d 1e			call macro_forth_dsp_pop 
364d				endm 
# End of macro FORTH_DSP_POP
364d			 
364d			 
364d b7			 or a      ;clear carry flag 
364e 01 00 00		 ld bc, FORTH_FALSE 
3651 e1			  pop hl    ; u1 
3652 d1			  pop de    ; u2 
3653 ed 52		  sbc hl,de 
3655 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3657			 
3657 01 01 00		 ld bc, FORTH_TRUE 
365a			.gtcont:  
365a c5					push bc 
365b e1					pop hl 
365c			 
365c					if DEBUG_FORTH_WORDS 
365c						DMARK "GT1" 
365c f5				push af  
365d 3a 71 36			ld a, (.dmark)  
3660 32 65 ee			ld (debug_mark),a  
3663 3a 72 36			ld a, (.dmark+1)  
3666 32 66 ee			ld (debug_mark+1),a  
3669 3a 73 36			ld a, (.dmark+2)  
366c 32 67 ee			ld (debug_mark+2),a  
366f 18 03			jr .pastdmark  
3671 ..			.dmark: db "GT1"  
3674 f1			.pastdmark: pop af  
3675			endm  
# End of macro DMARK
3675						CALLMONITOR 
3675 cd 6f ee			call debug_vector  
3678				endm  
# End of macro CALLMONITOR
3678					endif 
3678 cd 90 1b				call forth_push_numhl 
367b			 
367b					NEXTW 
367b c3 81 1f			jp macro_next 
367e				endm 
# End of macro NEXTW
367e			.EQUAL: 
367e				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
367e 31				db WORD_SYS_CORE+29             
367f e9 36			dw .ENDLOGIC            
3681 02				db 1 + 1 
3682 .. 00			db "=",0              
3684				endm 
# End of macro CWHEAD
3684			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3684				; TODO add floating point number detection 
3684					if DEBUG_FORTH_WORDS_KEY 
3684						DMARK "EQ." 
3684 f5				push af  
3685 3a 99 36			ld a, (.dmark)  
3688 32 65 ee			ld (debug_mark),a  
368b 3a 9a 36			ld a, (.dmark+1)  
368e 32 66 ee			ld (debug_mark+1),a  
3691 3a 9b 36			ld a, (.dmark+2)  
3694 32 67 ee			ld (debug_mark+2),a  
3697 18 03			jr .pastdmark  
3699 ..			.dmark: db "EQ."  
369c f1			.pastdmark: pop af  
369d			endm  
# End of macro DMARK
369d						CALLMONITOR 
369d cd 6f ee			call debug_vector  
36a0				endm  
# End of macro CALLMONITOR
36a0					endif 
36a0					FORTH_DSP 
36a0 cd 5b 1d			call macro_forth_dsp 
36a3				endm 
# End of macro FORTH_DSP
36a3					;v5 FORTH_DSP_VALUE 
36a3 7e					ld a,(hl)	; get type of value on TOS 
36a4 fe 02				cp DS_TYPE_INUM  
36a6 28 00				jr z, .eq_inum 
36a8			 
36a8				if FORTH_ENABLE_FLOATMATH 
36a8					jr .eq_done 
36a8			 
36a8				endif 
36a8					 
36a8			 
36a8			.eq_inum: 
36a8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36a8 cd 95 1d			call macro_dsp_valuehl 
36ab				endm 
# End of macro FORTH_DSP_VALUEHL
36ab			 
36ab e5					push hl 
36ac			 
36ac					; destroy value TOS 
36ac			 
36ac					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36ac cd 4d 1e			call macro_forth_dsp_pop 
36af				endm 
# End of macro FORTH_DSP_POP
36af			 
36af			 
36af					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36af cd 95 1d			call macro_dsp_valuehl 
36b2				endm 
# End of macro FORTH_DSP_VALUEHL
36b2			 
36b2					; one value on hl get other one back 
36b2			 
36b2 e5					push hl 
36b3			 
36b3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36b3 cd 4d 1e			call macro_forth_dsp_pop 
36b6				endm 
# End of macro FORTH_DSP_POP
36b6			 
36b6 0e 00				ld c, FORTH_FALSE 
36b8			 
36b8 e1					pop hl 
36b9 d1					pop de 
36ba			 
36ba 7b					ld a, e 
36bb bd					cp l 
36bc			 
36bc 20 06				jr nz, .eq_done 
36be			 
36be 7a					ld a, d 
36bf bc					cp h 
36c0			 
36c0 20 02				jr nz, .eq_done 
36c2			 
36c2 0e 01				ld c, FORTH_TRUE 
36c4					 
36c4			 
36c4			 
36c4			.eq_done: 
36c4			 
36c4					; TODO push value back onto stack for another op etc 
36c4			 
36c4 26 00				ld h, 0 
36c6 69					ld l, c 
36c7					if DEBUG_FORTH_WORDS 
36c7						DMARK "EQ1" 
36c7 f5				push af  
36c8 3a dc 36			ld a, (.dmark)  
36cb 32 65 ee			ld (debug_mark),a  
36ce 3a dd 36			ld a, (.dmark+1)  
36d1 32 66 ee			ld (debug_mark+1),a  
36d4 3a de 36			ld a, (.dmark+2)  
36d7 32 67 ee			ld (debug_mark+2),a  
36da 18 03			jr .pastdmark  
36dc ..			.dmark: db "EQ1"  
36df f1			.pastdmark: pop af  
36e0			endm  
# End of macro DMARK
36e0						CALLMONITOR 
36e0 cd 6f ee			call debug_vector  
36e3				endm  
# End of macro CALLMONITOR
36e3					endif 
36e3 cd 90 1b				call forth_push_numhl 
36e6			 
36e6					NEXTW 
36e6 c3 81 1f			jp macro_next 
36e9				endm 
# End of macro NEXTW
36e9			 
36e9			 
36e9			.ENDLOGIC: 
36e9			; eof 
36e9			 
36e9			 
# End of file forth_words_logic.asm
36e9			include "forth_words_maths.asm" 
36e9			 
36e9			; | ## Maths Words 
36e9			 
36e9			.PLUS:	 
36e9				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
36e9 15				db WORD_SYS_CORE+1             
36ea 47 37			dw .NEG            
36ec 02				db 1 + 1 
36ed .. 00			db "+",0              
36ef				endm 
# End of macro CWHEAD
36ef			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
36ef					if DEBUG_FORTH_WORDS_KEY 
36ef						DMARK "PLU" 
36ef f5				push af  
36f0 3a 04 37			ld a, (.dmark)  
36f3 32 65 ee			ld (debug_mark),a  
36f6 3a 05 37			ld a, (.dmark+1)  
36f9 32 66 ee			ld (debug_mark+1),a  
36fc 3a 06 37			ld a, (.dmark+2)  
36ff 32 67 ee			ld (debug_mark+2),a  
3702 18 03			jr .pastdmark  
3704 ..			.dmark: db "PLU"  
3707 f1			.pastdmark: pop af  
3708			endm  
# End of macro DMARK
3708						CALLMONITOR 
3708 cd 6f ee			call debug_vector  
370b				endm  
# End of macro CALLMONITOR
370b					endif 
370b					; add top two values and push back result 
370b			 
370b					;for v5 FORTH_DSP_VALUE 
370b					FORTH_DSP 
370b cd 5b 1d			call macro_forth_dsp 
370e				endm 
# End of macro FORTH_DSP
370e 7e					ld a,(hl)	; get type of value on TOS 
370f fe 02				cp DS_TYPE_INUM  
3711 28 03				jr z, .dot_inum 
3713			 
3713					NEXTW 
3713 c3 81 1f			jp macro_next 
3716				endm 
# End of macro NEXTW
3716			 
3716			; float maths 
3716			 
3716				if FORTH_ENABLE_FLOATMATH 
3716						inc hl      ; now at start of numeric as string 
3716			 
3716					if DEBUG_FORTH_MATHS 
3716						DMARK "ADD" 
3716				CALLMONITOR 
3716					endif 
3716			 
3716					;ld ix, hl 
3716					call CON 
3716			 
3716			 
3716					push hl 
3716					 
3716					 
3716			 
3716						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3716			 
3716					; get next number 
3716			 
3716						FORTH_DSP_VALUE 
3716			 
3716						inc hl      ; now at start of numeric as string 
3716			 
3716					;ld ix, hl 
3716					call CON 
3716			 
3716					push hl 
3716			 
3716			 
3716						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3716			 
3716						; TODO do add 
3716			 
3716						call IADD 
3716			 
3716						; TODO get result back as ascii 
3716			 
3716						; TODO push result  
3716			 
3716			 
3716			 
3716						jr .dot_done 
3716				endif 
3716			 
3716			.dot_inum: 
3716			 
3716			 
3716					if DEBUG_FORTH_DOT 
3716						DMARK "+IT" 
3716 f5				push af  
3717 3a 2b 37			ld a, (.dmark)  
371a 32 65 ee			ld (debug_mark),a  
371d 3a 2c 37			ld a, (.dmark+1)  
3720 32 66 ee			ld (debug_mark+1),a  
3723 3a 2d 37			ld a, (.dmark+2)  
3726 32 67 ee			ld (debug_mark+2),a  
3729 18 03			jr .pastdmark  
372b ..			.dmark: db "+IT"  
372e f1			.pastdmark: pop af  
372f			endm  
# End of macro DMARK
372f				CALLMONITOR 
372f cd 6f ee			call debug_vector  
3732				endm  
# End of macro CALLMONITOR
3732					endif 
3732			 
3732					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3732 cd 95 1d			call macro_dsp_valuehl 
3735				endm 
# End of macro FORTH_DSP_VALUEHL
3735			 
3735				; TODO add floating point number detection 
3735			 
3735 e5					push hl 
3736			 
3736					; destroy value TOS 
3736			 
3736					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3736 cd 4d 1e			call macro_forth_dsp_pop 
3739				endm 
# End of macro FORTH_DSP_POP
3739			 
3739			 
3739					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3739 cd 95 1d			call macro_dsp_valuehl 
373c				endm 
# End of macro FORTH_DSP_VALUEHL
373c			 
373c					; one value on hl get other one back 
373c			 
373c d1					pop de 
373d			 
373d					; do the add 
373d			 
373d 19					add hl,de 
373e			 
373e					; save it 
373e			 
373e			;		push hl	 
373e			 
373e					; 
373e			 
373e					; destroy value TOS 
373e			 
373e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
373e cd 4d 1e			call macro_forth_dsp_pop 
3741				endm 
# End of macro FORTH_DSP_POP
3741			 
3741					; TODO push value back onto stack for another op etc 
3741			 
3741			;		pop hl 
3741			 
3741			.dot_done: 
3741 cd 90 1b				call forth_push_numhl 
3744			 
3744					NEXTW 
3744 c3 81 1f			jp macro_next 
3747				endm 
# End of macro NEXTW
3747			.NEG: 
3747			 
3747				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3747 17				db WORD_SYS_CORE+3             
3748 8a 37			dw .DIV            
374a 02				db 1 + 1 
374b .. 00			db "-",0              
374d				endm 
# End of macro CWHEAD
374d			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
374d					if DEBUG_FORTH_WORDS_KEY 
374d						DMARK "SUB" 
374d f5				push af  
374e 3a 62 37			ld a, (.dmark)  
3751 32 65 ee			ld (debug_mark),a  
3754 3a 63 37			ld a, (.dmark+1)  
3757 32 66 ee			ld (debug_mark+1),a  
375a 3a 64 37			ld a, (.dmark+2)  
375d 32 67 ee			ld (debug_mark+2),a  
3760 18 03			jr .pastdmark  
3762 ..			.dmark: db "SUB"  
3765 f1			.pastdmark: pop af  
3766			endm  
# End of macro DMARK
3766						CALLMONITOR 
3766 cd 6f ee			call debug_vector  
3769				endm  
# End of macro CALLMONITOR
3769					endif 
3769			 
3769			 
3769				; TODO add floating point number detection 
3769					; v5 FORTH_DSP_VALUE 
3769					FORTH_DSP 
3769 cd 5b 1d			call macro_forth_dsp 
376c				endm 
# End of macro FORTH_DSP
376c 7e					ld a,(hl)	; get type of value on TOS 
376d fe 02				cp DS_TYPE_INUM  
376f 28 03				jr z, .neg_inum 
3771			 
3771					NEXTW 
3771 c3 81 1f			jp macro_next 
3774				endm 
# End of macro NEXTW
3774			 
3774			; float maths 
3774			 
3774				if FORTH_ENABLE_FLOATMATH 
3774					jr .neg_done 
3774			 
3774				endif 
3774					 
3774			 
3774			.neg_inum: 
3774					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3774 cd 95 1d			call macro_dsp_valuehl 
3777				endm 
# End of macro FORTH_DSP_VALUEHL
3777			 
3777 e5					push hl 
3778			 
3778					; destroy value TOS 
3778			 
3778					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3778 cd 4d 1e			call macro_forth_dsp_pop 
377b				endm 
# End of macro FORTH_DSP_POP
377b			 
377b			 
377b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
377b cd 95 1d			call macro_dsp_valuehl 
377e				endm 
# End of macro FORTH_DSP_VALUEHL
377e			 
377e					; one value on hl get other one back 
377e			 
377e d1					pop de 
377f			 
377f					; do the sub 
377f			;		ex de, hl 
377f			 
377f ed 52				sbc hl,de 
3781			 
3781					; save it 
3781			 
3781			;		push hl	 
3781			 
3781					; 
3781			 
3781					; destroy value TOS 
3781			 
3781					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3781 cd 4d 1e			call macro_forth_dsp_pop 
3784				endm 
# End of macro FORTH_DSP_POP
3784			 
3784					; TODO push value back onto stack for another op etc 
3784			 
3784			;		pop hl 
3784			 
3784 cd 90 1b				call forth_push_numhl 
3787			.neg_done: 
3787			 
3787					NEXTW 
3787 c3 81 1f			jp macro_next 
378a				endm 
# End of macro NEXTW
378a			.DIV: 
378a				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
378a 18				db WORD_SYS_CORE+4             
378b d7 37			dw .MUL            
378d 02				db 1 + 1 
378e .. 00			db "/",0              
3790				endm 
# End of macro CWHEAD
3790			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3790					if DEBUG_FORTH_WORDS_KEY 
3790						DMARK "DIV" 
3790 f5				push af  
3791 3a a5 37			ld a, (.dmark)  
3794 32 65 ee			ld (debug_mark),a  
3797 3a a6 37			ld a, (.dmark+1)  
379a 32 66 ee			ld (debug_mark+1),a  
379d 3a a7 37			ld a, (.dmark+2)  
37a0 32 67 ee			ld (debug_mark+2),a  
37a3 18 03			jr .pastdmark  
37a5 ..			.dmark: db "DIV"  
37a8 f1			.pastdmark: pop af  
37a9			endm  
# End of macro DMARK
37a9						CALLMONITOR 
37a9 cd 6f ee			call debug_vector  
37ac				endm  
# End of macro CALLMONITOR
37ac					endif 
37ac				; TODO add floating point number detection 
37ac					; v5 FORTH_DSP_VALUE 
37ac					FORTH_DSP 
37ac cd 5b 1d			call macro_forth_dsp 
37af				endm 
# End of macro FORTH_DSP
37af 7e					ld a,(hl)	; get type of value on TOS 
37b0 fe 02				cp DS_TYPE_INUM  
37b2 28 03				jr z, .div_inum 
37b4			 
37b4				if FORTH_ENABLE_FLOATMATH 
37b4					jr .div_done 
37b4			 
37b4				endif 
37b4					NEXTW 
37b4 c3 81 1f			jp macro_next 
37b7				endm 
# End of macro NEXTW
37b7			.div_inum: 
37b7			 
37b7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37b7 cd 95 1d			call macro_dsp_valuehl 
37ba				endm 
# End of macro FORTH_DSP_VALUEHL
37ba			 
37ba e5					push hl    ; to go to bc 
37bb			 
37bb					; destroy value TOS 
37bb			 
37bb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37bb cd 4d 1e			call macro_forth_dsp_pop 
37be				endm 
# End of macro FORTH_DSP_POP
37be			 
37be			 
37be					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37be cd 95 1d			call macro_dsp_valuehl 
37c1				endm 
# End of macro FORTH_DSP_VALUEHL
37c1			 
37c1					; hl to go to de 
37c1			 
37c1 e5					push hl 
37c2			 
37c2 c1					pop bc 
37c3 d1					pop de		 
37c4			 
37c4			 
37c4					if DEBUG_FORTH_MATHS 
37c4						DMARK "DIV" 
37c4				CALLMONITOR 
37c4					endif 
37c4					; one value on hl but move to a get other one back 
37c4			 
37c4			        
37c4 cd 52 0d			call Div16 
37c7			 
37c7			;	push af	 
37c7 e5				push hl 
37c8 c5				push bc 
37c9			 
37c9					if DEBUG_FORTH_MATHS 
37c9						DMARK "DI1" 
37c9				CALLMONITOR 
37c9					endif 
37c9			 
37c9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37c9 cd 4d 1e			call macro_forth_dsp_pop 
37cc				endm 
# End of macro FORTH_DSP_POP
37cc			 
37cc			 
37cc			 
37cc e1					pop hl    ; result 
37cd			 
37cd cd 90 1b				call forth_push_numhl 
37d0			 
37d0 e1					pop hl    ; reminder 
37d1			;		ld h,0 
37d1			;		ld l,d 
37d1			 
37d1 cd 90 1b				call forth_push_numhl 
37d4			.div_done: 
37d4					NEXTW 
37d4 c3 81 1f			jp macro_next 
37d7				endm 
# End of macro NEXTW
37d7			.MUL: 
37d7				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
37d7 19				db WORD_SYS_CORE+5             
37d8 1c 38			dw .MIN            
37da 02				db 1 + 1 
37db .. 00			db "*",0              
37dd				endm 
# End of macro CWHEAD
37dd			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
37dd				; TODO add floating point number detection 
37dd					if DEBUG_FORTH_WORDS_KEY 
37dd						DMARK "MUL" 
37dd f5				push af  
37de 3a f2 37			ld a, (.dmark)  
37e1 32 65 ee			ld (debug_mark),a  
37e4 3a f3 37			ld a, (.dmark+1)  
37e7 32 66 ee			ld (debug_mark+1),a  
37ea 3a f4 37			ld a, (.dmark+2)  
37ed 32 67 ee			ld (debug_mark+2),a  
37f0 18 03			jr .pastdmark  
37f2 ..			.dmark: db "MUL"  
37f5 f1			.pastdmark: pop af  
37f6			endm  
# End of macro DMARK
37f6						CALLMONITOR 
37f6 cd 6f ee			call debug_vector  
37f9				endm  
# End of macro CALLMONITOR
37f9					endif 
37f9					FORTH_DSP 
37f9 cd 5b 1d			call macro_forth_dsp 
37fc				endm 
# End of macro FORTH_DSP
37fc					; v5 FORTH_DSP_VALUE 
37fc 7e					ld a,(hl)	; get type of value on TOS 
37fd fe 02				cp DS_TYPE_INUM  
37ff 28 03				jr z, .mul_inum 
3801			 
3801				if FORTH_ENABLE_FLOATMATH 
3801					jr .mul_done 
3801			 
3801				endif 
3801			 
3801					NEXTW 
3801 c3 81 1f			jp macro_next 
3804				endm 
# End of macro NEXTW
3804			.mul_inum:	 
3804			 
3804					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3804 cd 95 1d			call macro_dsp_valuehl 
3807				endm 
# End of macro FORTH_DSP_VALUEHL
3807			 
3807 e5					push hl 
3808			 
3808					; destroy value TOS 
3808			 
3808					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3808 cd 4d 1e			call macro_forth_dsp_pop 
380b				endm 
# End of macro FORTH_DSP_POP
380b			 
380b			 
380b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
380b cd 95 1d			call macro_dsp_valuehl 
380e				endm 
# End of macro FORTH_DSP_VALUEHL
380e			 
380e					; one value on hl but move to a get other one back 
380e			 
380e 7d					ld a, l 
380f			 
380f d1					pop de 
3810			 
3810					; do the mull 
3810			;		ex de, hl 
3810			 
3810 cd 78 0d				call Mult16 
3813					; save it 
3813			 
3813			;		push hl	 
3813			 
3813					; 
3813			 
3813					; destroy value TOS 
3813			 
3813					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3813 cd 4d 1e			call macro_forth_dsp_pop 
3816				endm 
# End of macro FORTH_DSP_POP
3816			 
3816					; TODO push value back onto stack for another op etc 
3816			 
3816			;		pop hl 
3816			 
3816 cd 90 1b				call forth_push_numhl 
3819			 
3819			.mul_done: 
3819					NEXTW 
3819 c3 81 1f			jp macro_next 
381c				endm 
# End of macro NEXTW
381c			 
381c			 
381c			 
381c			 
381c			.MIN: 
381c				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
381c 49				db WORD_SYS_CORE+53             
381d 9d 38			dw .MAX            
381f 04				db 3 + 1 
3820 .. 00			db "MIN",0              
3824				endm 
# End of macro CWHEAD
3824			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3824					if DEBUG_FORTH_WORDS_KEY 
3824						DMARK "MIN" 
3824 f5				push af  
3825 3a 39 38			ld a, (.dmark)  
3828 32 65 ee			ld (debug_mark),a  
382b 3a 3a 38			ld a, (.dmark+1)  
382e 32 66 ee			ld (debug_mark+1),a  
3831 3a 3b 38			ld a, (.dmark+2)  
3834 32 67 ee			ld (debug_mark+2),a  
3837 18 03			jr .pastdmark  
3839 ..			.dmark: db "MIN"  
383c f1			.pastdmark: pop af  
383d			endm  
# End of macro DMARK
383d						CALLMONITOR 
383d cd 6f ee			call debug_vector  
3840				endm  
# End of macro CALLMONITOR
3840					endif 
3840					; get u2 
3840			 
3840					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3840 cd 95 1d			call macro_dsp_valuehl 
3843				endm 
# End of macro FORTH_DSP_VALUEHL
3843			 
3843 e5					push hl   ; u2 
3844			 
3844					; destroy value TOS 
3844			 
3844					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3844 cd 4d 1e			call macro_forth_dsp_pop 
3847				endm 
# End of macro FORTH_DSP_POP
3847			 
3847					; get u1 
3847			 
3847					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3847 cd 95 1d			call macro_dsp_valuehl 
384a				endm 
# End of macro FORTH_DSP_VALUEHL
384a			 
384a e5					push hl  ; u1 
384b			 
384b					; destroy value TOS 
384b			 
384b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
384b cd 4d 1e			call macro_forth_dsp_pop 
384e				endm 
# End of macro FORTH_DSP_POP
384e			 
384e b7			 or a      ;clear carry flag 
384f e1			  pop hl    ; u1 
3850 d1			  pop de    ; u2 
3851 e5				push hl   ; saved in case hl is lowest 
3852 ed 52		  sbc hl,de 
3854 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3856			 
3856 e1				pop hl 
3857					if DEBUG_FORTH_WORDS 
3857						DMARK "MIN" 
3857 f5				push af  
3858 3a 6c 38			ld a, (.dmark)  
385b 32 65 ee			ld (debug_mark),a  
385e 3a 6d 38			ld a, (.dmark+1)  
3861 32 66 ee			ld (debug_mark+1),a  
3864 3a 6e 38			ld a, (.dmark+2)  
3867 32 67 ee			ld (debug_mark+2),a  
386a 18 03			jr .pastdmark  
386c ..			.dmark: db "MIN"  
386f f1			.pastdmark: pop af  
3870			endm  
# End of macro DMARK
3870						CALLMONITOR 
3870 cd 6f ee			call debug_vector  
3873				endm  
# End of macro CALLMONITOR
3873					endif 
3873 cd 90 1b				call forth_push_numhl 
3876			 
3876				       NEXTW 
3876 c3 81 1f			jp macro_next 
3879				endm 
# End of macro NEXTW
3879			 
3879			.mincont:  
3879 c1				pop bc   ; tidy up 
387a eb				ex de , hl  
387b					if DEBUG_FORTH_WORDS 
387b						DMARK "MI1" 
387b f5				push af  
387c 3a 90 38			ld a, (.dmark)  
387f 32 65 ee			ld (debug_mark),a  
3882 3a 91 38			ld a, (.dmark+1)  
3885 32 66 ee			ld (debug_mark+1),a  
3888 3a 92 38			ld a, (.dmark+2)  
388b 32 67 ee			ld (debug_mark+2),a  
388e 18 03			jr .pastdmark  
3890 ..			.dmark: db "MI1"  
3893 f1			.pastdmark: pop af  
3894			endm  
# End of macro DMARK
3894						CALLMONITOR 
3894 cd 6f ee			call debug_vector  
3897				endm  
# End of macro CALLMONITOR
3897					endif 
3897 cd 90 1b				call forth_push_numhl 
389a			 
389a				       NEXTW 
389a c3 81 1f			jp macro_next 
389d				endm 
# End of macro NEXTW
389d			.MAX: 
389d				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
389d 4a				db WORD_SYS_CORE+54             
389e 1e 39			dw .RND16            
38a0 04				db 3 + 1 
38a1 .. 00			db "MAX",0              
38a5				endm 
# End of macro CWHEAD
38a5			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
38a5					if DEBUG_FORTH_WORDS_KEY 
38a5						DMARK "MAX" 
38a5 f5				push af  
38a6 3a ba 38			ld a, (.dmark)  
38a9 32 65 ee			ld (debug_mark),a  
38ac 3a bb 38			ld a, (.dmark+1)  
38af 32 66 ee			ld (debug_mark+1),a  
38b2 3a bc 38			ld a, (.dmark+2)  
38b5 32 67 ee			ld (debug_mark+2),a  
38b8 18 03			jr .pastdmark  
38ba ..			.dmark: db "MAX"  
38bd f1			.pastdmark: pop af  
38be			endm  
# End of macro DMARK
38be						CALLMONITOR 
38be cd 6f ee			call debug_vector  
38c1				endm  
# End of macro CALLMONITOR
38c1					endif 
38c1					; get u2 
38c1			 
38c1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38c1 cd 95 1d			call macro_dsp_valuehl 
38c4				endm 
# End of macro FORTH_DSP_VALUEHL
38c4			 
38c4 e5					push hl   ; u2 
38c5			 
38c5					; destroy value TOS 
38c5			 
38c5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38c5 cd 4d 1e			call macro_forth_dsp_pop 
38c8				endm 
# End of macro FORTH_DSP_POP
38c8			 
38c8					; get u1 
38c8			 
38c8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38c8 cd 95 1d			call macro_dsp_valuehl 
38cb				endm 
# End of macro FORTH_DSP_VALUEHL
38cb			 
38cb e5					push hl  ; u1 
38cc			 
38cc					; destroy value TOS 
38cc			 
38cc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38cc cd 4d 1e			call macro_forth_dsp_pop 
38cf				endm 
# End of macro FORTH_DSP_POP
38cf			 
38cf b7			 or a      ;clear carry flag 
38d0 e1			  pop hl    ; u1 
38d1 d1			  pop de    ; u2 
38d2 e5				push hl   ; saved in case hl is lowest 
38d3 ed 52		  sbc hl,de 
38d5 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
38d7			 
38d7 e1				pop hl 
38d8					if DEBUG_FORTH_WORDS 
38d8						DMARK "MAX" 
38d8 f5				push af  
38d9 3a ed 38			ld a, (.dmark)  
38dc 32 65 ee			ld (debug_mark),a  
38df 3a ee 38			ld a, (.dmark+1)  
38e2 32 66 ee			ld (debug_mark+1),a  
38e5 3a ef 38			ld a, (.dmark+2)  
38e8 32 67 ee			ld (debug_mark+2),a  
38eb 18 03			jr .pastdmark  
38ed ..			.dmark: db "MAX"  
38f0 f1			.pastdmark: pop af  
38f1			endm  
# End of macro DMARK
38f1						CALLMONITOR 
38f1 cd 6f ee			call debug_vector  
38f4				endm  
# End of macro CALLMONITOR
38f4					endif 
38f4 cd 90 1b				call forth_push_numhl 
38f7			 
38f7				       NEXTW 
38f7 c3 81 1f			jp macro_next 
38fa				endm 
# End of macro NEXTW
38fa			 
38fa			.maxcont:  
38fa c1				pop bc   ; tidy up 
38fb eb				ex de , hl  
38fc					if DEBUG_FORTH_WORDS 
38fc						DMARK "MA1" 
38fc f5				push af  
38fd 3a 11 39			ld a, (.dmark)  
3900 32 65 ee			ld (debug_mark),a  
3903 3a 12 39			ld a, (.dmark+1)  
3906 32 66 ee			ld (debug_mark+1),a  
3909 3a 13 39			ld a, (.dmark+2)  
390c 32 67 ee			ld (debug_mark+2),a  
390f 18 03			jr .pastdmark  
3911 ..			.dmark: db "MA1"  
3914 f1			.pastdmark: pop af  
3915			endm  
# End of macro DMARK
3915						CALLMONITOR 
3915 cd 6f ee			call debug_vector  
3918				endm  
# End of macro CALLMONITOR
3918					endif 
3918 cd 90 1b				call forth_push_numhl 
391b				       NEXTW 
391b c3 81 1f			jp macro_next 
391e				endm 
# End of macro NEXTW
391e			 
391e			.RND16: 
391e				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
391e 4e				db WORD_SYS_CORE+58             
391f 4d 39			dw .RND8            
3921 06				db 5 + 1 
3922 .. 00			db "RND16",0              
3928				endm 
# End of macro CWHEAD
3928			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3928					if DEBUG_FORTH_WORDS_KEY 
3928						DMARK "R16" 
3928 f5				push af  
3929 3a 3d 39			ld a, (.dmark)  
392c 32 65 ee			ld (debug_mark),a  
392f 3a 3e 39			ld a, (.dmark+1)  
3932 32 66 ee			ld (debug_mark+1),a  
3935 3a 3f 39			ld a, (.dmark+2)  
3938 32 67 ee			ld (debug_mark+2),a  
393b 18 03			jr .pastdmark  
393d ..			.dmark: db "R16"  
3940 f1			.pastdmark: pop af  
3941			endm  
# End of macro DMARK
3941						CALLMONITOR 
3941 cd 6f ee			call debug_vector  
3944				endm  
# End of macro CALLMONITOR
3944					endif 
3944 cd 1c 0d				call prng16  
3947 cd 90 1b				call forth_push_numhl 
394a				       NEXTW 
394a c3 81 1f			jp macro_next 
394d				endm 
# End of macro NEXTW
394d			.RND8: 
394d				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
394d 60				db WORD_SYS_CORE+76             
394e 82 39			dw .RND            
3950 05				db 4 + 1 
3951 .. 00			db "RND8",0              
3956				endm 
# End of macro CWHEAD
3956			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3956					if DEBUG_FORTH_WORDS_KEY 
3956						DMARK "RN8" 
3956 f5				push af  
3957 3a 6b 39			ld a, (.dmark)  
395a 32 65 ee			ld (debug_mark),a  
395d 3a 6c 39			ld a, (.dmark+1)  
3960 32 66 ee			ld (debug_mark+1),a  
3963 3a 6d 39			ld a, (.dmark+2)  
3966 32 67 ee			ld (debug_mark+2),a  
3969 18 03			jr .pastdmark  
396b ..			.dmark: db "RN8"  
396e f1			.pastdmark: pop af  
396f			endm  
# End of macro DMARK
396f						CALLMONITOR 
396f cd 6f ee			call debug_vector  
3972				endm  
# End of macro CALLMONITOR
3972					endif 
3972 2a a3 eb				ld hl,(xrandc) 
3975 23					inc hl 
3976 cd 36 0d				call xrnd 
3979 6f					ld l,a	 
397a 26 00				ld h,0 
397c cd 90 1b				call forth_push_numhl 
397f				       NEXTW 
397f c3 81 1f			jp macro_next 
3982				endm 
# End of macro NEXTW
3982			.RND: 
3982				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3982 60				db WORD_SYS_CORE+76             
3983 88 3a			dw .ENDMATHS            
3985 04				db 3 + 1 
3986 .. 00			db "RND",0              
398a				endm 
# End of macro CWHEAD
398a			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
398a			 
398a					if DEBUG_FORTH_WORDS_KEY 
398a						DMARK "RND" 
398a f5				push af  
398b 3a 9f 39			ld a, (.dmark)  
398e 32 65 ee			ld (debug_mark),a  
3991 3a a0 39			ld a, (.dmark+1)  
3994 32 66 ee			ld (debug_mark+1),a  
3997 3a a1 39			ld a, (.dmark+2)  
399a 32 67 ee			ld (debug_mark+2),a  
399d 18 03			jr .pastdmark  
399f ..			.dmark: db "RND"  
39a2 f1			.pastdmark: pop af  
39a3			endm  
# End of macro DMARK
39a3						CALLMONITOR 
39a3 cd 6f ee			call debug_vector  
39a6				endm  
# End of macro CALLMONITOR
39a6					endif 
39a6					 
39a6					FORTH_DSP_VALUEHL    ; upper range 
39a6 cd 95 1d			call macro_dsp_valuehl 
39a9				endm 
# End of macro FORTH_DSP_VALUEHL
39a9			 
39a9 22 a7 eb				ld (LFSRSeed), hl	 
39ac			 
39ac					if DEBUG_FORTH_WORDS 
39ac						DMARK "RN1" 
39ac f5				push af  
39ad 3a c1 39			ld a, (.dmark)  
39b0 32 65 ee			ld (debug_mark),a  
39b3 3a c2 39			ld a, (.dmark+1)  
39b6 32 66 ee			ld (debug_mark+1),a  
39b9 3a c3 39			ld a, (.dmark+2)  
39bc 32 67 ee			ld (debug_mark+2),a  
39bf 18 03			jr .pastdmark  
39c1 ..			.dmark: db "RN1"  
39c4 f1			.pastdmark: pop af  
39c5			endm  
# End of macro DMARK
39c5						CALLMONITOR 
39c5 cd 6f ee			call debug_vector  
39c8				endm  
# End of macro CALLMONITOR
39c8					endif 
39c8					FORTH_DSP_POP 
39c8 cd 4d 1e			call macro_forth_dsp_pop 
39cb				endm 
# End of macro FORTH_DSP_POP
39cb			 
39cb					FORTH_DSP_VALUEHL    ; low range 
39cb cd 95 1d			call macro_dsp_valuehl 
39ce				endm 
# End of macro FORTH_DSP_VALUEHL
39ce			 
39ce					if DEBUG_FORTH_WORDS 
39ce						DMARK "RN2" 
39ce f5				push af  
39cf 3a e3 39			ld a, (.dmark)  
39d2 32 65 ee			ld (debug_mark),a  
39d5 3a e4 39			ld a, (.dmark+1)  
39d8 32 66 ee			ld (debug_mark+1),a  
39db 3a e5 39			ld a, (.dmark+2)  
39de 32 67 ee			ld (debug_mark+2),a  
39e1 18 03			jr .pastdmark  
39e3 ..			.dmark: db "RN2"  
39e6 f1			.pastdmark: pop af  
39e7			endm  
# End of macro DMARK
39e7						CALLMONITOR 
39e7 cd 6f ee			call debug_vector  
39ea				endm  
# End of macro CALLMONITOR
39ea					endif 
39ea 22 a9 eb				ld (LFSRSeed+2), hl 
39ed			 
39ed					FORTH_DSP_POP 
39ed cd 4d 1e			call macro_forth_dsp_pop 
39f0				endm 
# End of macro FORTH_DSP_POP
39f0			 
39f0 e5					push hl 
39f1			 
39f1 e1			.inrange:	pop hl 
39f2 cd 1c 0d				call prng16  
39f5					if DEBUG_FORTH_WORDS 
39f5						DMARK "RN3" 
39f5 f5				push af  
39f6 3a 0a 3a			ld a, (.dmark)  
39f9 32 65 ee			ld (debug_mark),a  
39fc 3a 0b 3a			ld a, (.dmark+1)  
39ff 32 66 ee			ld (debug_mark+1),a  
3a02 3a 0c 3a			ld a, (.dmark+2)  
3a05 32 67 ee			ld (debug_mark+2),a  
3a08 18 03			jr .pastdmark  
3a0a ..			.dmark: db "RN3"  
3a0d f1			.pastdmark: pop af  
3a0e			endm  
# End of macro DMARK
3a0e						CALLMONITOR 
3a0e cd 6f ee			call debug_vector  
3a11				endm  
# End of macro CALLMONITOR
3a11					endif 
3a11					 
3a11					; if the range is 8bit knock out the high byte 
3a11			 
3a11 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
3a15			 
3a15 3e 00				ld a, 0 
3a17 ba					cp d  
3a18 20 1e				jr nz, .hirange 
3a1a 26 00				ld h, 0   ; knock it down to 8bit 
3a1c			 
3a1c					if DEBUG_FORTH_WORDS 
3a1c						DMARK "RNk" 
3a1c f5				push af  
3a1d 3a 31 3a			ld a, (.dmark)  
3a20 32 65 ee			ld (debug_mark),a  
3a23 3a 32 3a			ld a, (.dmark+1)  
3a26 32 66 ee			ld (debug_mark+1),a  
3a29 3a 33 3a			ld a, (.dmark+2)  
3a2c 32 67 ee			ld (debug_mark+2),a  
3a2f 18 03			jr .pastdmark  
3a31 ..			.dmark: db "RNk"  
3a34 f1			.pastdmark: pop af  
3a35			endm  
# End of macro DMARK
3a35						CALLMONITOR 
3a35 cd 6f ee			call debug_vector  
3a38				endm  
# End of macro CALLMONITOR
3a38					endif 
3a38			.hirange:   
3a38 e5					push hl  
3a39 b7					or a  
3a3a ed 52		                sbc hl, de 
3a3c			 
3a3c					;call cmp16 
3a3c			 
3a3c 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3a3e e1					pop hl 
3a3f e5					push hl 
3a40			 
3a40					if DEBUG_FORTH_WORDS 
3a40						DMARK "RN4" 
3a40 f5				push af  
3a41 3a 55 3a			ld a, (.dmark)  
3a44 32 65 ee			ld (debug_mark),a  
3a47 3a 56 3a			ld a, (.dmark+1)  
3a4a 32 66 ee			ld (debug_mark+1),a  
3a4d 3a 57 3a			ld a, (.dmark+2)  
3a50 32 67 ee			ld (debug_mark+2),a  
3a53 18 03			jr .pastdmark  
3a55 ..			.dmark: db "RN4"  
3a58 f1			.pastdmark: pop af  
3a59			endm  
# End of macro DMARK
3a59						CALLMONITOR 
3a59 cd 6f ee			call debug_vector  
3a5c				endm  
# End of macro CALLMONITOR
3a5c					endif 
3a5c ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
3a60					;call cmp16 
3a60				 
3a60 b7					or a  
3a61 ed 52		                sbc hl, de 
3a63 38 8c				jr c, .inrange 
3a65			 
3a65 e1					pop hl 
3a66					 
3a66					if DEBUG_FORTH_WORDS 
3a66						DMARK "RNd" 
3a66 f5				push af  
3a67 3a 7b 3a			ld a, (.dmark)  
3a6a 32 65 ee			ld (debug_mark),a  
3a6d 3a 7c 3a			ld a, (.dmark+1)  
3a70 32 66 ee			ld (debug_mark+1),a  
3a73 3a 7d 3a			ld a, (.dmark+2)  
3a76 32 67 ee			ld (debug_mark+2),a  
3a79 18 03			jr .pastdmark  
3a7b ..			.dmark: db "RNd"  
3a7e f1			.pastdmark: pop af  
3a7f			endm  
# End of macro DMARK
3a7f						CALLMONITOR 
3a7f cd 6f ee			call debug_vector  
3a82				endm  
# End of macro CALLMONITOR
3a82					endif 
3a82			 
3a82			 
3a82 cd 90 1b				call forth_push_numhl 
3a85				       NEXTW 
3a85 c3 81 1f			jp macro_next 
3a88				endm 
# End of macro NEXTW
3a88			 
3a88			.ENDMATHS: 
3a88			 
3a88			; eof 
3a88			 
# End of file forth_words_maths.asm
3a88			include "forth_words_display.asm" 
3a88			 
3a88			; | ## Display Words 
3a88			 
3a88			.ACT: 
3a88			 
3a88				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3a88 62				db WORD_SYS_CORE+78             
3a89 d4 3a			dw .INFO            
3a8b 07				db 6 + 1 
3a8c .. 00			db "ACTIVE",0              
3a93				endm 
# End of macro CWHEAD
3a93			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3a93			;  
3a93			; | | To display a pulsing activity indicator in a processing loop do this... 
3a93			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3a93			 
3a93					if DEBUG_FORTH_WORDS_KEY 
3a93						DMARK "ACT" 
3a93 f5				push af  
3a94 3a a8 3a			ld a, (.dmark)  
3a97 32 65 ee			ld (debug_mark),a  
3a9a 3a a9 3a			ld a, (.dmark+1)  
3a9d 32 66 ee			ld (debug_mark+1),a  
3aa0 3a aa 3a			ld a, (.dmark+2)  
3aa3 32 67 ee			ld (debug_mark+2),a  
3aa6 18 03			jr .pastdmark  
3aa8 ..			.dmark: db "ACT"  
3aab f1			.pastdmark: pop af  
3aac			endm  
# End of macro DMARK
3aac						CALLMONITOR 
3aac cd 6f ee			call debug_vector  
3aaf				endm  
# End of macro CALLMONITOR
3aaf					endif 
3aaf cd 1f 0b				call active 
3ab2					if DEBUG_FORTH_WORDS 
3ab2						DMARK "ACp" 
3ab2 f5				push af  
3ab3 3a c7 3a			ld a, (.dmark)  
3ab6 32 65 ee			ld (debug_mark),a  
3ab9 3a c8 3a			ld a, (.dmark+1)  
3abc 32 66 ee			ld (debug_mark+1),a  
3abf 3a c9 3a			ld a, (.dmark+2)  
3ac2 32 67 ee			ld (debug_mark+2),a  
3ac5 18 03			jr .pastdmark  
3ac7 ..			.dmark: db "ACp"  
3aca f1			.pastdmark: pop af  
3acb			endm  
# End of macro DMARK
3acb						CALLMONITOR 
3acb cd 6f ee			call debug_vector  
3ace				endm  
# End of macro CALLMONITOR
3ace					endif 
3ace cd fe 1b				call forth_push_str 
3ad1			 
3ad1					NEXTW 
3ad1 c3 81 1f			jp macro_next 
3ad4				endm 
# End of macro NEXTW
3ad4			.INFO: 
3ad4			 
3ad4				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3ad4 62				db WORD_SYS_CORE+78             
3ad5 f1 3a			dw .ATP            
3ad7 05				db 4 + 1 
3ad8 .. 00			db "INFO",0              
3add				endm 
# End of macro CWHEAD
3add			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3add					FORTH_DSP_VALUEHL 
3add cd 95 1d			call macro_dsp_valuehl 
3ae0				endm 
# End of macro FORTH_DSP_VALUEHL
3ae0			 
3ae0					FORTH_DSP_POP 
3ae0 cd 4d 1e			call macro_forth_dsp_pop 
3ae3				endm 
# End of macro FORTH_DSP_POP
3ae3			 
3ae3 e5					push hl 
3ae4			 
3ae4					FORTH_DSP_VALUEHL 
3ae4 cd 95 1d			call macro_dsp_valuehl 
3ae7				endm 
# End of macro FORTH_DSP_VALUEHL
3ae7			 
3ae7					FORTH_DSP_POP 
3ae7 cd 4d 1e			call macro_forth_dsp_pop 
3aea				endm 
# End of macro FORTH_DSP_POP
3aea			 
3aea d1					pop de 
3aeb			 
3aeb cd 59 0b				call info_panel 
3aee			 
3aee			 
3aee					NEXTW 
3aee c3 81 1f			jp macro_next 
3af1				endm 
# End of macro NEXTW
3af1			.ATP: 
3af1				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3af1 62				db WORD_SYS_CORE+78             
3af2 68 3b			dw .FB            
3af4 04				db 3 + 1 
3af5 .. 00			db "AT?",0              
3af9				endm 
# End of macro CWHEAD
3af9			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3af9					if DEBUG_FORTH_WORDS_KEY 
3af9						DMARK "AT?" 
3af9 f5				push af  
3afa 3a 0e 3b			ld a, (.dmark)  
3afd 32 65 ee			ld (debug_mark),a  
3b00 3a 0f 3b			ld a, (.dmark+1)  
3b03 32 66 ee			ld (debug_mark+1),a  
3b06 3a 10 3b			ld a, (.dmark+2)  
3b09 32 67 ee			ld (debug_mark+2),a  
3b0c 18 03			jr .pastdmark  
3b0e ..			.dmark: db "AT?"  
3b11 f1			.pastdmark: pop af  
3b12			endm  
# End of macro DMARK
3b12						CALLMONITOR 
3b12 cd 6f ee			call debug_vector  
3b15				endm  
# End of macro CALLMONITOR
3b15					endif 
3b15 3a 58 ea				ld a, (f_cursor_ptr) 
3b18			 
3b18			if DEBUG_FORTH_WORDS 
3b18				DMARK "AT?" 
3b18 f5				push af  
3b19 3a 2d 3b			ld a, (.dmark)  
3b1c 32 65 ee			ld (debug_mark),a  
3b1f 3a 2e 3b			ld a, (.dmark+1)  
3b22 32 66 ee			ld (debug_mark+1),a  
3b25 3a 2f 3b			ld a, (.dmark+2)  
3b28 32 67 ee			ld (debug_mark+2),a  
3b2b 18 03			jr .pastdmark  
3b2d ..			.dmark: db "AT?"  
3b30 f1			.pastdmark: pop af  
3b31			endm  
# End of macro DMARK
3b31				CALLMONITOR 
3b31 cd 6f ee			call debug_vector  
3b34				endm  
# End of macro CALLMONITOR
3b34			endif	 
3b34					; count the number of rows 
3b34			 
3b34 06 00				ld b, 0 
3b36 4f			.atpr:		ld c, a    ; save in case we go below zero 
3b37 d6 28				sub display_cols 
3b39 f2 3f 3b				jp p, .atprunder 
3b3c 04					inc b 
3b3d 18 f7				jr .atpr 
3b3f			.atprunder:	 
3b3f			if DEBUG_FORTH_WORDS 
3b3f				DMARK "A?2" 
3b3f f5				push af  
3b40 3a 54 3b			ld a, (.dmark)  
3b43 32 65 ee			ld (debug_mark),a  
3b46 3a 55 3b			ld a, (.dmark+1)  
3b49 32 66 ee			ld (debug_mark+1),a  
3b4c 3a 56 3b			ld a, (.dmark+2)  
3b4f 32 67 ee			ld (debug_mark+2),a  
3b52 18 03			jr .pastdmark  
3b54 ..			.dmark: db "A?2"  
3b57 f1			.pastdmark: pop af  
3b58			endm  
# End of macro DMARK
3b58				CALLMONITOR 
3b58 cd 6f ee			call debug_vector  
3b5b				endm  
# End of macro CALLMONITOR
3b5b			endif	 
3b5b 26 00				ld h, 0 
3b5d 69					ld l, c 
3b5e cd 90 1b				call forth_push_numhl 
3b61 68					ld l, b  
3b62 cd 90 1b				call forth_push_numhl 
3b65			 
3b65			 
3b65				NEXTW 
3b65 c3 81 1f			jp macro_next 
3b68				endm 
# End of macro NEXTW
3b68			 
3b68			.FB: 
3b68				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3b68 1b				db WORD_SYS_CORE+7             
3b69 b6 3b			dw .EMIT            
3b6b 03				db 2 + 1 
3b6c .. 00			db "FB",0              
3b6f				endm 
# End of macro CWHEAD
3b6f			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3b6f			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3b6f			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3b6f			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3b6f					if DEBUG_FORTH_WORDS_KEY 
3b6f						DMARK "FB." 
3b6f f5				push af  
3b70 3a 84 3b			ld a, (.dmark)  
3b73 32 65 ee			ld (debug_mark),a  
3b76 3a 85 3b			ld a, (.dmark+1)  
3b79 32 66 ee			ld (debug_mark+1),a  
3b7c 3a 86 3b			ld a, (.dmark+2)  
3b7f 32 67 ee			ld (debug_mark+2),a  
3b82 18 03			jr .pastdmark  
3b84 ..			.dmark: db "FB."  
3b87 f1			.pastdmark: pop af  
3b88			endm  
# End of macro DMARK
3b88						CALLMONITOR 
3b88 cd 6f ee			call debug_vector  
3b8b				endm  
# End of macro CALLMONITOR
3b8b					endif 
3b8b			 
3b8b					FORTH_DSP_VALUEHL 
3b8b cd 95 1d			call macro_dsp_valuehl 
3b8e				endm 
# End of macro FORTH_DSP_VALUEHL
3b8e			 
3b8e 7d					ld a, l 
3b8f fe 01				cp 1 
3b91 20 05				jr nz, .fbn1 
3b93 21 0a ed				ld hl, display_fb1 
3b96 18 15				jr .fbset 
3b98 fe 02		.fbn1:		cp 2 
3b9a 20 05				jr nz, .fbn2 
3b9c 21 c8 eb				ld hl, display_fb2 
3b9f 18 0c				jr .fbset 
3ba1 fe 03		.fbn2:		cp 3 
3ba3 20 05				jr nz, .fbn3 
3ba5 21 69 ec				ld hl, display_fb3 
3ba8 18 03				jr .fbset 
3baa			.fbn3:		 ; if invalid number select first 
3baa 21 0a ed				ld hl, display_fb1 
3bad 22 c6 eb		.fbset:		ld (display_fb_active), hl 
3bb0			 
3bb0					FORTH_DSP_POP 
3bb0 cd 4d 1e			call macro_forth_dsp_pop 
3bb3				endm 
# End of macro FORTH_DSP_POP
3bb3			 
3bb3					NEXTW 
3bb3 c3 81 1f			jp macro_next 
3bb6				endm 
# End of macro NEXTW
3bb6			 
3bb6			 
3bb6			.EMIT: 
3bb6				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3bb6 1b				db WORD_SYS_CORE+7             
3bb7 07 3c			dw .DOTH            
3bb9 05				db 4 + 1 
3bba .. 00			db "EMIT",0              
3bbf				endm 
# End of macro CWHEAD
3bbf			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3bbf					; get value off TOS and display it 
3bbf			 
3bbf					if DEBUG_FORTH_WORDS_KEY 
3bbf						DMARK "EMT" 
3bbf f5				push af  
3bc0 3a d4 3b			ld a, (.dmark)  
3bc3 32 65 ee			ld (debug_mark),a  
3bc6 3a d5 3b			ld a, (.dmark+1)  
3bc9 32 66 ee			ld (debug_mark+1),a  
3bcc 3a d6 3b			ld a, (.dmark+2)  
3bcf 32 67 ee			ld (debug_mark+2),a  
3bd2 18 03			jr .pastdmark  
3bd4 ..			.dmark: db "EMT"  
3bd7 f1			.pastdmark: pop af  
3bd8			endm  
# End of macro DMARK
3bd8						CALLMONITOR 
3bd8 cd 6f ee			call debug_vector  
3bdb				endm  
# End of macro CALLMONITOR
3bdb					endif 
3bdb			 
3bdb					FORTH_DSP_VALUEHL 
3bdb cd 95 1d			call macro_dsp_valuehl 
3bde				endm 
# End of macro FORTH_DSP_VALUEHL
3bde			 
3bde 7d					ld a,l 
3bdf			 
3bdf					; TODO write to display 
3bdf			 
3bdf 32 b9 e4				ld (os_input), a 
3be2 3e 00				ld a, 0 
3be4 32 ba e4				ld (os_input+1), a 
3be7					 
3be7 3a 58 ea				ld a, (f_cursor_ptr) 
3bea 11 b9 e4				ld de, os_input 
3bed cd db 0b				call str_at_display 
3bf0			 
3bf0			 
3bf0 3a 36 ea				ld a,(cli_autodisplay) 
3bf3 fe 00				cp 0 
3bf5 28 03				jr z, .enoupdate 
3bf7 cd eb 0b						call update_display 
3bfa					.enoupdate: 
3bfa			 
3bfa 3a 58 ea				ld a, (f_cursor_ptr) 
3bfd 3c					inc a 
3bfe 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3c01			 
3c01			 
3c01					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c01 cd 4d 1e			call macro_forth_dsp_pop 
3c04				endm 
# End of macro FORTH_DSP_POP
3c04			  
3c04			 
3c04					NEXTW 
3c04 c3 81 1f			jp macro_next 
3c07				endm 
# End of macro NEXTW
3c07			.DOTH: 
3c07				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3c07 1c				db WORD_SYS_CORE+8             
3c08 37 3c			dw .DOTF            
3c0a 03				db 2 + 1 
3c0b .. 00			db ".-",0              
3c0e				endm 
# End of macro CWHEAD
3c0e			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3c0e					; get value off TOS and display it 
3c0e					if DEBUG_FORTH_WORDS_KEY 
3c0e						DMARK "DTD" 
3c0e f5				push af  
3c0f 3a 23 3c			ld a, (.dmark)  
3c12 32 65 ee			ld (debug_mark),a  
3c15 3a 24 3c			ld a, (.dmark+1)  
3c18 32 66 ee			ld (debug_mark+1),a  
3c1b 3a 25 3c			ld a, (.dmark+2)  
3c1e 32 67 ee			ld (debug_mark+2),a  
3c21 18 03			jr .pastdmark  
3c23 ..			.dmark: db "DTD"  
3c26 f1			.pastdmark: pop af  
3c27			endm  
# End of macro DMARK
3c27						CALLMONITOR 
3c27 cd 6f ee			call debug_vector  
3c2a				endm  
# End of macro CALLMONITOR
3c2a					endif 
3c2a 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3c2c 3e 00			ld a, 0 
3c2e 32 37 ea			ld (cli_mvdot), a 
3c31 c3 8e 3c			jp .dotgo 
3c34				NEXTW 
3c34 c3 81 1f			jp macro_next 
3c37				endm 
# End of macro NEXTW
3c37			.DOTF: 
3c37				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3c37 1c				db WORD_SYS_CORE+8             
3c38 65 3c			dw .DOT            
3c3a 03				db 2 + 1 
3c3b .. 00			db ".>",0              
3c3e				endm 
# End of macro CWHEAD
3c3e			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
3c3e					; get value off TOS and display it 
3c3e			        ; TODO BUG adds extra spaces 
3c3e			        ; TODO BUG handle numerics? 
3c3e					if DEBUG_FORTH_WORDS_KEY 
3c3e						DMARK "DTC" 
3c3e f5				push af  
3c3f 3a 53 3c			ld a, (.dmark)  
3c42 32 65 ee			ld (debug_mark),a  
3c45 3a 54 3c			ld a, (.dmark+1)  
3c48 32 66 ee			ld (debug_mark+1),a  
3c4b 3a 55 3c			ld a, (.dmark+2)  
3c4e 32 67 ee			ld (debug_mark+2),a  
3c51 18 03			jr .pastdmark  
3c53 ..			.dmark: db "DTC"  
3c56 f1			.pastdmark: pop af  
3c57			endm  
# End of macro DMARK
3c57						CALLMONITOR 
3c57 cd 6f ee			call debug_vector  
3c5a				endm  
# End of macro CALLMONITOR
3c5a					endif 
3c5a 3e 01			ld a, 1 
3c5c 32 37 ea			ld (cli_mvdot), a 
3c5f c3 8e 3c			jp .dotgo 
3c62				NEXTW 
3c62 c3 81 1f			jp macro_next 
3c65				endm 
# End of macro NEXTW
3c65			 
3c65			.DOT: 
3c65				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3c65 1c				db WORD_SYS_CORE+8             
3c66 41 3e			dw .CLS            
3c68 02				db 1 + 1 
3c69 .. 00			db ".",0              
3c6b				endm 
# End of macro CWHEAD
3c6b			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
3c6b					; get value off TOS and display it 
3c6b			 
3c6b					if DEBUG_FORTH_WORDS_KEY 
3c6b						DMARK "DOT" 
3c6b f5				push af  
3c6c 3a 80 3c			ld a, (.dmark)  
3c6f 32 65 ee			ld (debug_mark),a  
3c72 3a 81 3c			ld a, (.dmark+1)  
3c75 32 66 ee			ld (debug_mark+1),a  
3c78 3a 82 3c			ld a, (.dmark+2)  
3c7b 32 67 ee			ld (debug_mark+2),a  
3c7e 18 03			jr .pastdmark  
3c80 ..			.dmark: db "DOT"  
3c83 f1			.pastdmark: pop af  
3c84			endm  
# End of macro DMARK
3c84						CALLMONITOR 
3c84 cd 6f ee			call debug_vector  
3c87				endm  
# End of macro CALLMONITOR
3c87					endif 
3c87 3e 00			ld a, 0 
3c89 32 37 ea			ld (cli_mvdot), a 
3c8c 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3c8e				 
3c8e			 
3c8e			.dotgo: 
3c8e			 
3c8e			; move up type to on stack for parserv5 
3c8e					FORTH_DSP 
3c8e cd 5b 1d			call macro_forth_dsp 
3c91				endm 
# End of macro FORTH_DSP
3c91				;FORTH_DSP_VALUE  
3c91			 
3c91			if DEBUG_FORTH_DOT 
3c91				DMARK "DOT" 
3c91 f5				push af  
3c92 3a a6 3c			ld a, (.dmark)  
3c95 32 65 ee			ld (debug_mark),a  
3c98 3a a7 3c			ld a, (.dmark+1)  
3c9b 32 66 ee			ld (debug_mark+1),a  
3c9e 3a a8 3c			ld a, (.dmark+2)  
3ca1 32 67 ee			ld (debug_mark+2),a  
3ca4 18 03			jr .pastdmark  
3ca6 ..			.dmark: db "DOT"  
3ca9 f1			.pastdmark: pop af  
3caa			endm  
# End of macro DMARK
3caa				CALLMONITOR 
3caa cd 6f ee			call debug_vector  
3cad				endm  
# End of macro CALLMONITOR
3cad			endif	 
3cad			;		.print: 
3cad			 
3cad 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3cae 23				inc hl   ; position to the actual value 
3caf fe 01			cp DS_TYPE_STR 
3cb1 20 06			jr nz, .dotnum1  
3cb3			 
3cb3			; display string 
3cb3				FORTH_DSP_VALUE  
3cb3 cd 7e 1d			call macro_forth_dsp_value 
3cb6				endm 
# End of macro FORTH_DSP_VALUE
3cb6 eb				ex de,hl 
3cb7 18 49			jr .dotwrite 
3cb9			 
3cb9			.dotnum1: 
3cb9 fe 02			cp DS_TYPE_INUM 
3cbb 20 44			jr nz, .dotflot 
3cbd			 
3cbd			 
3cbd			; display number 
3cbd			 
3cbd			;	push hl 
3cbd			;	call clear_display 
3cbd			;	pop hl 
3cbd			 
3cbd 5e				ld e, (hl) 
3cbe 23				inc hl 
3cbf 56				ld d, (hl) 
3cc0 21 bb e2			ld hl, scratch 
3cc3			if DEBUG_FORTH_DOT 
3cc3				DMARK "DT1" 
3cc3 f5				push af  
3cc4 3a d8 3c			ld a, (.dmark)  
3cc7 32 65 ee			ld (debug_mark),a  
3cca 3a d9 3c			ld a, (.dmark+1)  
3ccd 32 66 ee			ld (debug_mark+1),a  
3cd0 3a da 3c			ld a, (.dmark+2)  
3cd3 32 67 ee			ld (debug_mark+2),a  
3cd6 18 03			jr .pastdmark  
3cd8 ..			.dmark: db "DT1"  
3cdb f1			.pastdmark: pop af  
3cdc			endm  
# End of macro DMARK
3cdc				CALLMONITOR 
3cdc cd 6f ee			call debug_vector  
3cdf				endm  
# End of macro CALLMONITOR
3cdf			endif	 
3cdf			 
3cdf cd 0a 11			call uitoa_16 
3ce2 eb				ex de,hl 
3ce3			 
3ce3			if DEBUG_FORTH_DOT 
3ce3				DMARK "DT2" 
3ce3 f5				push af  
3ce4 3a f8 3c			ld a, (.dmark)  
3ce7 32 65 ee			ld (debug_mark),a  
3cea 3a f9 3c			ld a, (.dmark+1)  
3ced 32 66 ee			ld (debug_mark+1),a  
3cf0 3a fa 3c			ld a, (.dmark+2)  
3cf3 32 67 ee			ld (debug_mark+2),a  
3cf6 18 03			jr .pastdmark  
3cf8 ..			.dmark: db "DT2"  
3cfb f1			.pastdmark: pop af  
3cfc			endm  
# End of macro DMARK
3cfc				CALLMONITOR 
3cfc cd 6f ee			call debug_vector  
3cff				endm  
# End of macro CALLMONITOR
3cff			endif	 
3cff			 
3cff			;	ld de, os_word_scratch 
3cff 18 01			jr .dotwrite 
3d01			 
3d01 00			.dotflot:   nop 
3d02			; TODO print floating point number 
3d02			 
3d02			.dotwrite:		 
3d02			 
3d02					; if c is set then set all '-' to spaces 
3d02					; need to also take into account .>  
3d02			 
3d02 3e 01				ld a, 1 
3d04 b9					cp c 
3d05 20 67				jr nz, .nodashswap 
3d07			 
3d07					; DE has the string to write, working with HL 
3d07			 
3d07 06 ff				ld b, 255 
3d09 d5					push de 
3d0a e1					pop hl 
3d0b			 
3d0b			if DEBUG_FORTH_DOT 
3d0b				DMARK "DT-" 
3d0b f5				push af  
3d0c 3a 20 3d			ld a, (.dmark)  
3d0f 32 65 ee			ld (debug_mark),a  
3d12 3a 21 3d			ld a, (.dmark+1)  
3d15 32 66 ee			ld (debug_mark+1),a  
3d18 3a 22 3d			ld a, (.dmark+2)  
3d1b 32 67 ee			ld (debug_mark+2),a  
3d1e 18 03			jr .pastdmark  
3d20 ..			.dmark: db "DT-"  
3d23 f1			.pastdmark: pop af  
3d24			endm  
# End of macro DMARK
3d24				CALLMONITOR 
3d24 cd 6f ee			call debug_vector  
3d27				endm  
# End of macro CALLMONITOR
3d27			endif	 
3d27 7e			.dashscan:	ld a, (hl) 
3d28 fe 00				cp 0 
3d2a 28 42				jr z, .nodashswap 
3d2c fe 2d				cp '-' 
3d2e 20 03				jr nz, .dashskip 
3d30 3e 20				ld a, ' ' 
3d32 77					ld (hl), a 
3d33 23			.dashskip:	inc hl 
3d34			if DEBUG_FORTH_DOT 
3d34				DMARK "D-2" 
3d34 f5				push af  
3d35 3a 49 3d			ld a, (.dmark)  
3d38 32 65 ee			ld (debug_mark),a  
3d3b 3a 4a 3d			ld a, (.dmark+1)  
3d3e 32 66 ee			ld (debug_mark+1),a  
3d41 3a 4b 3d			ld a, (.dmark+2)  
3d44 32 67 ee			ld (debug_mark+2),a  
3d47 18 03			jr .pastdmark  
3d49 ..			.dmark: db "D-2"  
3d4c f1			.pastdmark: pop af  
3d4d			endm  
# End of macro DMARK
3d4d				CALLMONITOR 
3d4d cd 6f ee			call debug_vector  
3d50				endm  
# End of macro CALLMONITOR
3d50			endif	 
3d50 10 d5				djnz .dashscan 
3d52			 
3d52			if DEBUG_FORTH_DOT 
3d52				DMARK "D-1" 
3d52 f5				push af  
3d53 3a 67 3d			ld a, (.dmark)  
3d56 32 65 ee			ld (debug_mark),a  
3d59 3a 68 3d			ld a, (.dmark+1)  
3d5c 32 66 ee			ld (debug_mark+1),a  
3d5f 3a 69 3d			ld a, (.dmark+2)  
3d62 32 67 ee			ld (debug_mark+2),a  
3d65 18 03			jr .pastdmark  
3d67 ..			.dmark: db "D-1"  
3d6a f1			.pastdmark: pop af  
3d6b			endm  
# End of macro DMARK
3d6b				CALLMONITOR 
3d6b cd 6f ee			call debug_vector  
3d6e				endm  
# End of macro CALLMONITOR
3d6e			endif	 
3d6e			 
3d6e			.nodashswap: 
3d6e			 
3d6e			if DEBUG_FORTH_DOT 
3d6e				DMARK "D-o" 
3d6e f5				push af  
3d6f 3a 83 3d			ld a, (.dmark)  
3d72 32 65 ee			ld (debug_mark),a  
3d75 3a 84 3d			ld a, (.dmark+1)  
3d78 32 66 ee			ld (debug_mark+1),a  
3d7b 3a 85 3d			ld a, (.dmark+2)  
3d7e 32 67 ee			ld (debug_mark+2),a  
3d81 18 03			jr .pastdmark  
3d83 ..			.dmark: db "D-o"  
3d86 f1			.pastdmark: pop af  
3d87			endm  
# End of macro DMARK
3d87				CALLMONITOR 
3d87 cd 6f ee			call debug_vector  
3d8a				endm  
# End of macro CALLMONITOR
3d8a			endif	 
3d8a			 
3d8a d5					push de   ; save string start in case we need to advance print 
3d8b			 
3d8b 3a 58 ea				ld a, (f_cursor_ptr) 
3d8e cd db 0b				call str_at_display 
3d91 3a 36 ea				ld a,(cli_autodisplay) 
3d94 fe 00				cp 0 
3d96 28 03				jr z, .noupdate 
3d98 cd eb 0b						call update_display 
3d9b					.noupdate: 
3d9b			 
3d9b			 
3d9b					; see if we need to advance the print position 
3d9b			 
3d9b e1					pop hl   ; get back string 
3d9c			;		ex de,hl 
3d9c			 
3d9c 3a 37 ea				ld a, (cli_mvdot) 
3d9f			if DEBUG_FORTH_DOT 
3d9f			;		ld e,a 
3d9f				DMARK "D>1" 
3d9f f5				push af  
3da0 3a b4 3d			ld a, (.dmark)  
3da3 32 65 ee			ld (debug_mark),a  
3da6 3a b5 3d			ld a, (.dmark+1)  
3da9 32 66 ee			ld (debug_mark+1),a  
3dac 3a b6 3d			ld a, (.dmark+2)  
3daf 32 67 ee			ld (debug_mark+2),a  
3db2 18 03			jr .pastdmark  
3db4 ..			.dmark: db "D>1"  
3db7 f1			.pastdmark: pop af  
3db8			endm  
# End of macro DMARK
3db8				CALLMONITOR 
3db8 cd 6f ee			call debug_vector  
3dbb				endm  
# End of macro CALLMONITOR
3dbb			endif	 
3dbb fe 00				cp 0 
3dbd 28 44				jr z, .noadv 
3dbf					; yes, lets advance the print position 
3dbf 3e 00				ld a, 0 
3dc1 cd 66 11				call strlent 
3dc4			if DEBUG_FORTH_DOT 
3dc4				DMARK "D-?" 
3dc4 f5				push af  
3dc5 3a d9 3d			ld a, (.dmark)  
3dc8 32 65 ee			ld (debug_mark),a  
3dcb 3a da 3d			ld a, (.dmark+1)  
3dce 32 66 ee			ld (debug_mark+1),a  
3dd1 3a db 3d			ld a, (.dmark+2)  
3dd4 32 67 ee			ld (debug_mark+2),a  
3dd7 18 03			jr .pastdmark  
3dd9 ..			.dmark: db "D-?"  
3ddc f1			.pastdmark: pop af  
3ddd			endm  
# End of macro DMARK
3ddd				CALLMONITOR 
3ddd cd 6f ee			call debug_vector  
3de0				endm  
# End of macro CALLMONITOR
3de0			endif	 
3de0 3a 58 ea				ld a, (f_cursor_ptr) 
3de3 85					add a,l 
3de4					;call addatohl 
3de4					;ld a, l 
3de4 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3de7			 
3de7			if DEBUG_FORTH_DOT 
3de7				DMARK "D->" 
3de7 f5				push af  
3de8 3a fc 3d			ld a, (.dmark)  
3deb 32 65 ee			ld (debug_mark),a  
3dee 3a fd 3d			ld a, (.dmark+1)  
3df1 32 66 ee			ld (debug_mark+1),a  
3df4 3a fe 3d			ld a, (.dmark+2)  
3df7 32 67 ee			ld (debug_mark+2),a  
3dfa 18 03			jr .pastdmark  
3dfc ..			.dmark: db "D->"  
3dff f1			.pastdmark: pop af  
3e00			endm  
# End of macro DMARK
3e00				CALLMONITOR 
3e00 cd 6f ee			call debug_vector  
3e03				endm  
# End of macro CALLMONITOR
3e03			endif	 
3e03			 
3e03			.noadv:	 
3e03			 
3e03					if DEBUG_FORTH_DOT_WAIT 
3e03							call next_page_prompt 
3e03					endif	 
3e03			; TODO this pop off the stack causes a crash. i dont know why 
3e03			 
3e03			 
3e03			if DEBUG_FORTH_DOT 
3e03				DMARK "DTh" 
3e03 f5				push af  
3e04 3a 18 3e			ld a, (.dmark)  
3e07 32 65 ee			ld (debug_mark),a  
3e0a 3a 19 3e			ld a, (.dmark+1)  
3e0d 32 66 ee			ld (debug_mark+1),a  
3e10 3a 1a 3e			ld a, (.dmark+2)  
3e13 32 67 ee			ld (debug_mark+2),a  
3e16 18 03			jr .pastdmark  
3e18 ..			.dmark: db "DTh"  
3e1b f1			.pastdmark: pop af  
3e1c			endm  
# End of macro DMARK
3e1c				CALLMONITOR 
3e1c cd 6f ee			call debug_vector  
3e1f				endm  
# End of macro CALLMONITOR
3e1f			endif	 
3e1f			 
3e1f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e1f cd 4d 1e			call macro_forth_dsp_pop 
3e22				endm 
# End of macro FORTH_DSP_POP
3e22			 
3e22			if DEBUG_FORTH_DOT 
3e22				DMARK "DTi" 
3e22 f5				push af  
3e23 3a 37 3e			ld a, (.dmark)  
3e26 32 65 ee			ld (debug_mark),a  
3e29 3a 38 3e			ld a, (.dmark+1)  
3e2c 32 66 ee			ld (debug_mark+1),a  
3e2f 3a 39 3e			ld a, (.dmark+2)  
3e32 32 67 ee			ld (debug_mark+2),a  
3e35 18 03			jr .pastdmark  
3e37 ..			.dmark: db "DTi"  
3e3a f1			.pastdmark: pop af  
3e3b			endm  
# End of macro DMARK
3e3b				CALLMONITOR 
3e3b cd 6f ee			call debug_vector  
3e3e				endm  
# End of macro CALLMONITOR
3e3e			endif	 
3e3e			 
3e3e			 
3e3e					NEXTW 
3e3e c3 81 1f			jp macro_next 
3e41				endm 
# End of macro NEXTW
3e41			 
3e41			.CLS: 
3e41				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3e41 35				db WORD_SYS_CORE+33             
3e42 6e 3e			dw .DRAW            
3e44 04				db 3 + 1 
3e45 .. 00			db "CLS",0              
3e49				endm 
# End of macro CWHEAD
3e49			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3e49					if DEBUG_FORTH_WORDS_KEY 
3e49						DMARK "CLS" 
3e49 f5				push af  
3e4a 3a 5e 3e			ld a, (.dmark)  
3e4d 32 65 ee			ld (debug_mark),a  
3e50 3a 5f 3e			ld a, (.dmark+1)  
3e53 32 66 ee			ld (debug_mark+1),a  
3e56 3a 60 3e			ld a, (.dmark+2)  
3e59 32 67 ee			ld (debug_mark+2),a  
3e5c 18 03			jr .pastdmark  
3e5e ..			.dmark: db "CLS"  
3e61 f1			.pastdmark: pop af  
3e62			endm  
# End of macro DMARK
3e62						CALLMONITOR 
3e62 cd 6f ee			call debug_vector  
3e65				endm  
# End of macro CALLMONITOR
3e65					endif 
3e65 cd c8 0b				call clear_display 
3e68 c3 7c 3f				jp .home		; and home cursor 
3e6b					NEXTW 
3e6b c3 81 1f			jp macro_next 
3e6e				endm 
# End of macro NEXTW
3e6e			 
3e6e			.DRAW: 
3e6e				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3e6e 36				db WORD_SYS_CORE+34             
3e6f 99 3e			dw .DUMP            
3e71 05				db 4 + 1 
3e72 .. 00			db "DRAW",0              
3e77				endm 
# End of macro CWHEAD
3e77			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3e77					if DEBUG_FORTH_WORDS_KEY 
3e77						DMARK "DRW" 
3e77 f5				push af  
3e78 3a 8c 3e			ld a, (.dmark)  
3e7b 32 65 ee			ld (debug_mark),a  
3e7e 3a 8d 3e			ld a, (.dmark+1)  
3e81 32 66 ee			ld (debug_mark+1),a  
3e84 3a 8e 3e			ld a, (.dmark+2)  
3e87 32 67 ee			ld (debug_mark+2),a  
3e8a 18 03			jr .pastdmark  
3e8c ..			.dmark: db "DRW"  
3e8f f1			.pastdmark: pop af  
3e90			endm  
# End of macro DMARK
3e90						CALLMONITOR 
3e90 cd 6f ee			call debug_vector  
3e93				endm  
# End of macro CALLMONITOR
3e93					endif 
3e93 cd eb 0b				call update_display 
3e96					NEXTW 
3e96 c3 81 1f			jp macro_next 
3e99				endm 
# End of macro NEXTW
3e99			 
3e99			.DUMP: 
3e99				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3e99 37				db WORD_SYS_CORE+35             
3e9a d1 3e			dw .CDUMP            
3e9c 05				db 4 + 1 
3e9d .. 00			db "DUMP",0              
3ea2				endm 
# End of macro CWHEAD
3ea2			; | DUMP ( x -- ) With address x display dump   | DONE 
3ea2			; TODO pop address to use off of the stack 
3ea2					if DEBUG_FORTH_WORDS_KEY 
3ea2						DMARK "DUM" 
3ea2 f5				push af  
3ea3 3a b7 3e			ld a, (.dmark)  
3ea6 32 65 ee			ld (debug_mark),a  
3ea9 3a b8 3e			ld a, (.dmark+1)  
3eac 32 66 ee			ld (debug_mark+1),a  
3eaf 3a b9 3e			ld a, (.dmark+2)  
3eb2 32 67 ee			ld (debug_mark+2),a  
3eb5 18 03			jr .pastdmark  
3eb7 ..			.dmark: db "DUM"  
3eba f1			.pastdmark: pop af  
3ebb			endm  
# End of macro DMARK
3ebb						CALLMONITOR 
3ebb cd 6f ee			call debug_vector  
3ebe				endm  
# End of macro CALLMONITOR
3ebe					endif 
3ebe cd c8 0b				call clear_display 
3ec1			 
3ec1					; get address 
3ec1			 
3ec1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ec1 cd 95 1d			call macro_dsp_valuehl 
3ec4				endm 
# End of macro FORTH_DSP_VALUEHL
3ec4				 
3ec4					; save it for cdump 
3ec4			 
3ec4 22 de e5				ld (os_cur_ptr),hl 
3ec7			 
3ec7					; destroy value TOS 
3ec7			 
3ec7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ec7 cd 4d 1e			call macro_forth_dsp_pop 
3eca				endm 
# End of macro FORTH_DSP_POP
3eca			 
3eca cd 10 1a				call dumpcont	; skip old style of param parsing	 
3ecd c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3ece					NEXTW 
3ece c3 81 1f			jp macro_next 
3ed1				endm 
# End of macro NEXTW
3ed1			.CDUMP: 
3ed1				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3ed1 38				db WORD_SYS_CORE+36             
3ed2 01 3f			dw .DAT            
3ed4 06				db 5 + 1 
3ed5 .. 00			db "CDUMP",0              
3edb				endm 
# End of macro CWHEAD
3edb			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3edb					if DEBUG_FORTH_WORDS_KEY 
3edb						DMARK "CDP" 
3edb f5				push af  
3edc 3a f0 3e			ld a, (.dmark)  
3edf 32 65 ee			ld (debug_mark),a  
3ee2 3a f1 3e			ld a, (.dmark+1)  
3ee5 32 66 ee			ld (debug_mark+1),a  
3ee8 3a f2 3e			ld a, (.dmark+2)  
3eeb 32 67 ee			ld (debug_mark+2),a  
3eee 18 03			jr .pastdmark  
3ef0 ..			.dmark: db "CDP"  
3ef3 f1			.pastdmark: pop af  
3ef4			endm  
# End of macro DMARK
3ef4						CALLMONITOR 
3ef4 cd 6f ee			call debug_vector  
3ef7				endm  
# End of macro CALLMONITOR
3ef7					endif 
3ef7 cd c8 0b				call clear_display 
3efa cd 10 1a				call dumpcont	 
3efd c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
3efe					NEXTW 
3efe c3 81 1f			jp macro_next 
3f01				endm 
# End of macro NEXTW
3f01			 
3f01			 
3f01			 
3f01			 
3f01			.DAT: 
3f01				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
3f01 3d				db WORD_SYS_CORE+41             
3f02 57 3f			dw .HOME            
3f04 03				db 2 + 1 
3f05 .. 00			db "AT",0              
3f08				endm 
# End of macro CWHEAD
3f08			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
3f08					if DEBUG_FORTH_WORDS_KEY 
3f08						DMARK "AT." 
3f08 f5				push af  
3f09 3a 1d 3f			ld a, (.dmark)  
3f0c 32 65 ee			ld (debug_mark),a  
3f0f 3a 1e 3f			ld a, (.dmark+1)  
3f12 32 66 ee			ld (debug_mark+1),a  
3f15 3a 1f 3f			ld a, (.dmark+2)  
3f18 32 67 ee			ld (debug_mark+2),a  
3f1b 18 03			jr .pastdmark  
3f1d ..			.dmark: db "AT."  
3f20 f1			.pastdmark: pop af  
3f21			endm  
# End of macro DMARK
3f21						CALLMONITOR 
3f21 cd 6f ee			call debug_vector  
3f24				endm  
# End of macro CALLMONITOR
3f24					endif 
3f24					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f24 cd 95 1d			call macro_dsp_valuehl 
3f27				endm 
# End of macro FORTH_DSP_VALUEHL
3f27			 
3f27			 
3f27					; TODO save cursor row 
3f27 7d					ld a,l 
3f28 fe 02				cp 2 
3f2a 20 04				jr nz, .crow3 
3f2c 3e 28				ld a, display_row_2 
3f2e 18 12				jr .ccol1 
3f30 fe 03		.crow3:		cp 3 
3f32 20 04				jr nz, .crow4 
3f34 3e 50				ld a, display_row_3 
3f36 18 0a				jr .ccol1 
3f38 fe 04		.crow4:		cp 4 
3f3a 20 04				jr nz, .crow1 
3f3c 3e 78				ld a, display_row_4 
3f3e 18 02				jr .ccol1 
3f40 3e 00		.crow1:		ld a,display_row_1 
3f42 f5			.ccol1:		push af			; got row offset 
3f43 6f					ld l,a 
3f44 26 00				ld h,0 
3f46					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f46 cd 4d 1e			call macro_forth_dsp_pop 
3f49				endm 
# End of macro FORTH_DSP_POP
3f49					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f49 cd 95 1d			call macro_dsp_valuehl 
3f4c				endm 
# End of macro FORTH_DSP_VALUEHL
3f4c					; TODO save cursor col 
3f4c f1					pop af 
3f4d 85					add l		; add col offset 
3f4e 32 58 ea				ld (f_cursor_ptr), a 
3f51					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f51 cd 4d 1e			call macro_forth_dsp_pop 
3f54				endm 
# End of macro FORTH_DSP_POP
3f54			 
3f54					; calculate  
3f54			 
3f54					NEXTW 
3f54 c3 81 1f			jp macro_next 
3f57				endm 
# End of macro NEXTW
3f57			 
3f57			 
3f57			.HOME: 
3f57				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
3f57 41				db WORD_SYS_CORE+45             
3f58 84 3f			dw .CR            
3f5a 05				db 4 + 1 
3f5b .. 00			db "HOME",0              
3f60				endm 
# End of macro CWHEAD
3f60			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
3f60					if DEBUG_FORTH_WORDS_KEY 
3f60						DMARK "HOM" 
3f60 f5				push af  
3f61 3a 75 3f			ld a, (.dmark)  
3f64 32 65 ee			ld (debug_mark),a  
3f67 3a 76 3f			ld a, (.dmark+1)  
3f6a 32 66 ee			ld (debug_mark+1),a  
3f6d 3a 77 3f			ld a, (.dmark+2)  
3f70 32 67 ee			ld (debug_mark+2),a  
3f73 18 03			jr .pastdmark  
3f75 ..			.dmark: db "HOM"  
3f78 f1			.pastdmark: pop af  
3f79			endm  
# End of macro DMARK
3f79						CALLMONITOR 
3f79 cd 6f ee			call debug_vector  
3f7c				endm  
# End of macro CALLMONITOR
3f7c					endif 
3f7c 3e 00		.home:		ld a, 0		; and home cursor 
3f7e 32 58 ea				ld (f_cursor_ptr), a 
3f81					NEXTW 
3f81 c3 81 1f			jp macro_next 
3f84				endm 
# End of macro NEXTW
3f84			 
3f84			 
3f84			.CR: 
3f84				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
3f84 46				db WORD_SYS_CORE+50             
3f85 bf 3f			dw .SPACE            
3f87 03				db 2 + 1 
3f88 .. 00			db "CR",0              
3f8b				endm 
# End of macro CWHEAD
3f8b			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
3f8b					if DEBUG_FORTH_WORDS_KEY 
3f8b						DMARK "CR." 
3f8b f5				push af  
3f8c 3a a0 3f			ld a, (.dmark)  
3f8f 32 65 ee			ld (debug_mark),a  
3f92 3a a1 3f			ld a, (.dmark+1)  
3f95 32 66 ee			ld (debug_mark+1),a  
3f98 3a a2 3f			ld a, (.dmark+2)  
3f9b 32 67 ee			ld (debug_mark+2),a  
3f9e 18 03			jr .pastdmark  
3fa0 ..			.dmark: db "CR."  
3fa3 f1			.pastdmark: pop af  
3fa4			endm  
# End of macro DMARK
3fa4						CALLMONITOR 
3fa4 cd 6f ee			call debug_vector  
3fa7				endm  
# End of macro CALLMONITOR
3fa7					endif 
3fa7 3e 0d				ld a, 13 
3fa9 32 bb e2				ld (scratch),a 
3fac 3e 0a				ld a, 10 
3fae 32 bc e2				ld (scratch+1),a 
3fb1 3e 00				ld a, 0 
3fb3 32 bd e2				ld (scratch+2),a 
3fb6 21 bb e2				ld hl, scratch 
3fb9 cd fe 1b				call forth_push_str 
3fbc					 
3fbc				       NEXTW 
3fbc c3 81 1f			jp macro_next 
3fbf				endm 
# End of macro NEXTW
3fbf			.SPACE: 
3fbf				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
3fbf 46				db WORD_SYS_CORE+50             
3fc0 f5 3f			dw .SPACES            
3fc2 03				db 2 + 1 
3fc3 .. 00			db "BL",0              
3fc6				endm 
# End of macro CWHEAD
3fc6			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
3fc6					if DEBUG_FORTH_WORDS_KEY 
3fc6						DMARK "BL." 
3fc6 f5				push af  
3fc7 3a db 3f			ld a, (.dmark)  
3fca 32 65 ee			ld (debug_mark),a  
3fcd 3a dc 3f			ld a, (.dmark+1)  
3fd0 32 66 ee			ld (debug_mark+1),a  
3fd3 3a dd 3f			ld a, (.dmark+2)  
3fd6 32 67 ee			ld (debug_mark+2),a  
3fd9 18 03			jr .pastdmark  
3fdb ..			.dmark: db "BL."  
3fde f1			.pastdmark: pop af  
3fdf			endm  
# End of macro DMARK
3fdf						CALLMONITOR 
3fdf cd 6f ee			call debug_vector  
3fe2				endm  
# End of macro CALLMONITOR
3fe2					endif 
3fe2 3e 20				ld a, " " 
3fe4 32 bb e2				ld (scratch),a 
3fe7 3e 00				ld a, 0 
3fe9 32 bc e2				ld (scratch+1),a 
3fec 21 bb e2				ld hl, scratch 
3fef cd fe 1b				call forth_push_str 
3ff2					 
3ff2				       NEXTW 
3ff2 c3 81 1f			jp macro_next 
3ff5				endm 
# End of macro NEXTW
3ff5			 
3ff5			;.blstr: db " ", 0 
3ff5			 
3ff5			.SPACES: 
3ff5				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
3ff5 47				db WORD_SYS_CORE+51             
3ff6 90 40			dw .SCROLL            
3ff8 07				db 6 + 1 
3ff9 .. 00			db "SPACES",0              
4000				endm 
# End of macro CWHEAD
4000			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
4000					if DEBUG_FORTH_WORDS_KEY 
4000						DMARK "SPS" 
4000 f5				push af  
4001 3a 15 40			ld a, (.dmark)  
4004 32 65 ee			ld (debug_mark),a  
4007 3a 16 40			ld a, (.dmark+1)  
400a 32 66 ee			ld (debug_mark+1),a  
400d 3a 17 40			ld a, (.dmark+2)  
4010 32 67 ee			ld (debug_mark+2),a  
4013 18 03			jr .pastdmark  
4015 ..			.dmark: db "SPS"  
4018 f1			.pastdmark: pop af  
4019			endm  
# End of macro DMARK
4019						CALLMONITOR 
4019 cd 6f ee			call debug_vector  
401c				endm  
# End of macro CALLMONITOR
401c					endif 
401c			 
401c			 
401c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
401c cd 95 1d			call macro_dsp_valuehl 
401f				endm 
# End of macro FORTH_DSP_VALUEHL
401f			 
401f e5					push hl    ; u 
4020					if DEBUG_FORTH_WORDS 
4020						DMARK "SPA" 
4020 f5				push af  
4021 3a 35 40			ld a, (.dmark)  
4024 32 65 ee			ld (debug_mark),a  
4027 3a 36 40			ld a, (.dmark+1)  
402a 32 66 ee			ld (debug_mark+1),a  
402d 3a 37 40			ld a, (.dmark+2)  
4030 32 67 ee			ld (debug_mark+2),a  
4033 18 03			jr .pastdmark  
4035 ..			.dmark: db "SPA"  
4038 f1			.pastdmark: pop af  
4039			endm  
# End of macro DMARK
4039						CALLMONITOR 
4039 cd 6f ee			call debug_vector  
403c				endm  
# End of macro CALLMONITOR
403c					endif 
403c			 
403c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
403c cd 4d 1e			call macro_forth_dsp_pop 
403f				endm 
# End of macro FORTH_DSP_POP
403f e1					pop hl 
4040 0e 00				ld c, 0 
4042 45					ld b, l 
4043 21 bb e2				ld hl, scratch  
4046			 
4046					if DEBUG_FORTH_WORDS 
4046						DMARK "SP2" 
4046 f5				push af  
4047 3a 5b 40			ld a, (.dmark)  
404a 32 65 ee			ld (debug_mark),a  
404d 3a 5c 40			ld a, (.dmark+1)  
4050 32 66 ee			ld (debug_mark+1),a  
4053 3a 5d 40			ld a, (.dmark+2)  
4056 32 67 ee			ld (debug_mark+2),a  
4059 18 03			jr .pastdmark  
405b ..			.dmark: db "SP2"  
405e f1			.pastdmark: pop af  
405f			endm  
# End of macro DMARK
405f						CALLMONITOR 
405f cd 6f ee			call debug_vector  
4062				endm  
# End of macro CALLMONITOR
4062					endif 
4062 3e 20				ld a, ' ' 
4064			.spaces1:	 
4064 77					ld (hl),a 
4065 23					inc hl 
4066					 
4066 10 fc				djnz .spaces1 
4068 3e 00				ld a,0 
406a 77					ld (hl),a 
406b 21 bb e2				ld hl, scratch 
406e					if DEBUG_FORTH_WORDS 
406e						DMARK "SP3" 
406e f5				push af  
406f 3a 83 40			ld a, (.dmark)  
4072 32 65 ee			ld (debug_mark),a  
4075 3a 84 40			ld a, (.dmark+1)  
4078 32 66 ee			ld (debug_mark+1),a  
407b 3a 85 40			ld a, (.dmark+2)  
407e 32 67 ee			ld (debug_mark+2),a  
4081 18 03			jr .pastdmark  
4083 ..			.dmark: db "SP3"  
4086 f1			.pastdmark: pop af  
4087			endm  
# End of macro DMARK
4087						CALLMONITOR 
4087 cd 6f ee			call debug_vector  
408a				endm  
# End of macro CALLMONITOR
408a					endif 
408a cd fe 1b				call forth_push_str 
408d			 
408d				       NEXTW 
408d c3 81 1f			jp macro_next 
4090				endm 
# End of macro NEXTW
4090			 
4090			 
4090			 
4090			.SCROLL: 
4090				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4090 53				db WORD_SYS_CORE+63             
4091 bd 40			dw .SCROLLD            
4093 07				db 6 + 1 
4094 .. 00			db "SCROLL",0              
409b				endm 
# End of macro CWHEAD
409b			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
409b					if DEBUG_FORTH_WORDS_KEY 
409b						DMARK "SCR" 
409b f5				push af  
409c 3a b0 40			ld a, (.dmark)  
409f 32 65 ee			ld (debug_mark),a  
40a2 3a b1 40			ld a, (.dmark+1)  
40a5 32 66 ee			ld (debug_mark+1),a  
40a8 3a b2 40			ld a, (.dmark+2)  
40ab 32 67 ee			ld (debug_mark+2),a  
40ae 18 03			jr .pastdmark  
40b0 ..			.dmark: db "SCR"  
40b3 f1			.pastdmark: pop af  
40b4			endm  
# End of macro DMARK
40b4						CALLMONITOR 
40b4 cd 6f ee			call debug_vector  
40b7				endm  
# End of macro CALLMONITOR
40b7					endif 
40b7			 
40b7 cd 8a 0b			call scroll_up 
40ba			;	call update_display 
40ba			 
40ba					NEXTW 
40ba c3 81 1f			jp macro_next 
40bd				endm 
# End of macro NEXTW
40bd			 
40bd			 
40bd			 
40bd			;		; get dir 
40bd			; 
40bd			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40bd			; 
40bd			;		push hl 
40bd			; 
40bd			;		; destroy value TOS 
40bd			; 
40bd			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40bd			; 
40bd			;		; get count 
40bd			; 
40bd			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40bd			; 
40bd			;		push hl 
40bd			; 
40bd			;		; destroy value TOS 
40bd			; 
40bd			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40bd			; 
40bd			;		; one value on hl get other one back 
40bd			; 
40bd			;		pop bc    ; count 
40bd			; 
40bd			;		pop de   ; dir 
40bd			; 
40bd			; 
40bd			;		ld b, c 
40bd			; 
40bd			;.scrolldir:     push bc 
40bd			;		push de 
40bd			; 
40bd			;		ld a, 0 
40bd			;		cp e 
40bd			;		jr z, .scrollup  
40bd			;		call scroll_down 
40bd			;		jr .scrollnext 
40bd			;.scrollup:	call scroll_up 
40bd			; 
40bd			;		 
40bd			;.scrollnext: 
40bd			;		pop de 
40bd			;		pop bc 
40bd			;		djnz .scrolldir 
40bd			; 
40bd			; 
40bd			; 
40bd			; 
40bd			; 
40bd			;		NEXTW 
40bd			 
40bd			.SCROLLD: 
40bd				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
40bd 53				db WORD_SYS_CORE+63             
40be eb 40			dw .ATQ            
40c0 08				db 7 + 1 
40c1 .. 00			db "SCROLLD",0              
40c9				endm 
# End of macro CWHEAD
40c9			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
40c9					if DEBUG_FORTH_WORDS_KEY 
40c9						DMARK "SCD" 
40c9 f5				push af  
40ca 3a de 40			ld a, (.dmark)  
40cd 32 65 ee			ld (debug_mark),a  
40d0 3a df 40			ld a, (.dmark+1)  
40d3 32 66 ee			ld (debug_mark+1),a  
40d6 3a e0 40			ld a, (.dmark+2)  
40d9 32 67 ee			ld (debug_mark+2),a  
40dc 18 03			jr .pastdmark  
40de ..			.dmark: db "SCD"  
40e1 f1			.pastdmark: pop af  
40e2			endm  
# End of macro DMARK
40e2						CALLMONITOR 
40e2 cd 6f ee			call debug_vector  
40e5				endm  
# End of macro CALLMONITOR
40e5					endif 
40e5			 
40e5 cd ae 0b			call scroll_down 
40e8			;	call update_display 
40e8			 
40e8					NEXTW 
40e8 c3 81 1f			jp macro_next 
40eb				endm 
# End of macro NEXTW
40eb			 
40eb			 
40eb			.ATQ: 
40eb				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
40eb 62				db WORD_SYS_CORE+78             
40ec 49 41			dw .AUTODSP            
40ee 04				db 3 + 1 
40ef .. 00			db "AT@",0              
40f3				endm 
# End of macro CWHEAD
40f3			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
40f3					if DEBUG_FORTH_WORDS_KEY 
40f3						DMARK "ATA" 
40f3 f5				push af  
40f4 3a 08 41			ld a, (.dmark)  
40f7 32 65 ee			ld (debug_mark),a  
40fa 3a 09 41			ld a, (.dmark+1)  
40fd 32 66 ee			ld (debug_mark+1),a  
4100 3a 0a 41			ld a, (.dmark+2)  
4103 32 67 ee			ld (debug_mark+2),a  
4106 18 03			jr .pastdmark  
4108 ..			.dmark: db "ATA"  
410b f1			.pastdmark: pop af  
410c			endm  
# End of macro DMARK
410c						CALLMONITOR 
410c cd 6f ee			call debug_vector  
410f				endm  
# End of macro CALLMONITOR
410f					endif 
410f			 
410f			 
410f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
410f cd 95 1d			call macro_dsp_valuehl 
4112				endm 
# End of macro FORTH_DSP_VALUEHL
4112			 
4112					; TODO save cursor row 
4112 7d					ld a,l 
4113 fe 02				cp 2 
4115 20 04				jr nz, .crow3aq 
4117 3e 28				ld a, display_row_2 
4119 18 12				jr .ccol1aq 
411b fe 03		.crow3aq:		cp 3 
411d 20 04				jr nz, .crow4aq 
411f 3e 50				ld a, display_row_3 
4121 18 0a				jr .ccol1aq 
4123 fe 04		.crow4aq:		cp 4 
4125 20 04				jr nz, .crow1aq 
4127 3e 78				ld a, display_row_4 
4129 18 02				jr .ccol1aq 
412b 3e 00		.crow1aq:		ld a,display_row_1 
412d f5			.ccol1aq:		push af			; got row offset 
412e 6f					ld l,a 
412f 26 00				ld h,0 
4131					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4131 cd 4d 1e			call macro_forth_dsp_pop 
4134				endm 
# End of macro FORTH_DSP_POP
4134					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4134 cd 95 1d			call macro_dsp_valuehl 
4137				endm 
# End of macro FORTH_DSP_VALUEHL
4137					; TODO save cursor col 
4137 f1					pop af 
4138 85					add l		; add col offset 
4139			 
4139					; add current frame buffer address 
4139 2a c6 eb				ld hl, (display_fb_active) 
413c cd f5 0d				call addatohl 
413f			 
413f			 
413f			 
413f			 
413f					; get char frame buffer location offset in hl 
413f			 
413f 7e					ld a,(hl) 
4140 26 00				ld h, 0 
4142 6f					ld l, a 
4143			 
4143 cd 90 1b				call forth_push_numhl 
4146			 
4146			 
4146					NEXTW 
4146 c3 81 1f			jp macro_next 
4149				endm 
# End of macro NEXTW
4149			 
4149			.AUTODSP: 
4149				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
4149 63				db WORD_SYS_CORE+79             
414a 5f 41			dw .MENU            
414c 05				db 4 + 1 
414d .. 00			db "ADSP",0              
4152				endm 
# End of macro CWHEAD
4152			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
4152			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
4152			 
4152					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4152 cd 95 1d			call macro_dsp_valuehl 
4155				endm 
# End of macro FORTH_DSP_VALUEHL
4155			 
4155			;		push hl 
4155			 
4155					; destroy value TOS 
4155			 
4155					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4155 cd 4d 1e			call macro_forth_dsp_pop 
4158				endm 
# End of macro FORTH_DSP_POP
4158			 
4158			;		pop hl 
4158			 
4158 7d					ld a,l 
4159 32 36 ea				ld (cli_autodisplay), a 
415c				       NEXTW 
415c c3 81 1f			jp macro_next 
415f				endm 
# End of macro NEXTW
415f			 
415f			.MENU: 
415f				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
415f 70				db WORD_SYS_CORE+92             
4160 08 42			dw .ENDDISPLAY            
4162 05				db 4 + 1 
4163 .. 00			db "MENU",0              
4168				endm 
# End of macro CWHEAD
4168			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
4168			 
4168			;		; get number of items on the stack 
4168			; 
4168				 
4168					FORTH_DSP_VALUEHL 
4168 cd 95 1d			call macro_dsp_valuehl 
416b				endm 
# End of macro FORTH_DSP_VALUEHL
416b				 
416b					if DEBUG_FORTH_WORDS_KEY 
416b						DMARK "MNU" 
416b f5				push af  
416c 3a 80 41			ld a, (.dmark)  
416f 32 65 ee			ld (debug_mark),a  
4172 3a 81 41			ld a, (.dmark+1)  
4175 32 66 ee			ld (debug_mark+1),a  
4178 3a 82 41			ld a, (.dmark+2)  
417b 32 67 ee			ld (debug_mark+2),a  
417e 18 03			jr .pastdmark  
4180 ..			.dmark: db "MNU"  
4183 f1			.pastdmark: pop af  
4184			endm  
# End of macro DMARK
4184						CALLMONITOR 
4184 cd 6f ee			call debug_vector  
4187				endm  
# End of macro CALLMONITOR
4187					endif 
4187			 
4187 45					ld b, l	 
4188 05					dec b 
4189			 
4189					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4189 cd 4d 1e			call macro_forth_dsp_pop 
418c				endm 
# End of macro FORTH_DSP_POP
418c			 
418c			 
418c					; go directly through the stack to pluck out the string pointers and build an array 
418c			 
418c			;		FORTH_DSP 
418c			 
418c					; hl contains top most stack item 
418c				 
418c 11 bb e2				ld de, scratch 
418f			 
418f			.mbuild: 
418f			 
418f					FORTH_DSP_VALUEHL 
418f cd 95 1d			call macro_dsp_valuehl 
4192				endm 
# End of macro FORTH_DSP_VALUEHL
4192			 
4192					if DEBUG_FORTH_WORDS 
4192						DMARK "MN3" 
4192 f5				push af  
4193 3a a7 41			ld a, (.dmark)  
4196 32 65 ee			ld (debug_mark),a  
4199 3a a8 41			ld a, (.dmark+1)  
419c 32 66 ee			ld (debug_mark+1),a  
419f 3a a9 41			ld a, (.dmark+2)  
41a2 32 67 ee			ld (debug_mark+2),a  
41a5 18 03			jr .pastdmark  
41a7 ..			.dmark: db "MN3"  
41aa f1			.pastdmark: pop af  
41ab			endm  
# End of macro DMARK
41ab						CALLMONITOR 
41ab cd 6f ee			call debug_vector  
41ae				endm  
# End of macro CALLMONITOR
41ae					endif 
41ae eb					ex de, hl 
41af 73					ld (hl), e 
41b0 23					inc hl 
41b1 72					ld (hl), d 
41b2 23					inc hl 
41b3 eb					ex de, hl 
41b4			 
41b4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41b4 cd 4d 1e			call macro_forth_dsp_pop 
41b7				endm 
# End of macro FORTH_DSP_POP
41b7			 
41b7 10 d6				djnz .mbuild 
41b9			 
41b9					; done add term 
41b9			 
41b9 eb					ex de, hl 
41ba 36 00				ld (hl), 0 
41bc 23					inc hl 
41bd 36 00				ld (hl), 0 
41bf			 
41bf				 
41bf					 
41bf 21 bb e2				ld hl, scratch 
41c2			 
41c2					if DEBUG_FORTH_WORDS 
41c2						DMARK "MNx" 
41c2 f5				push af  
41c3 3a d7 41			ld a, (.dmark)  
41c6 32 65 ee			ld (debug_mark),a  
41c9 3a d8 41			ld a, (.dmark+1)  
41cc 32 66 ee			ld (debug_mark+1),a  
41cf 3a d9 41			ld a, (.dmark+2)  
41d2 32 67 ee			ld (debug_mark+2),a  
41d5 18 03			jr .pastdmark  
41d7 ..			.dmark: db "MNx"  
41da f1			.pastdmark: pop af  
41db			endm  
# End of macro DMARK
41db						CALLMONITOR 
41db cd 6f ee			call debug_vector  
41de				endm  
# End of macro CALLMONITOR
41de					endif 
41de			 
41de			 
41de			 
41de 3e 00				ld a, 0 
41e0 cd f9 0b				call menu 
41e3			 
41e3			 
41e3 6f					ld l, a 
41e4 26 00				ld h, 0 
41e6			 
41e6					if DEBUG_FORTH_WORDS 
41e6						DMARK "MNr" 
41e6 f5				push af  
41e7 3a fb 41			ld a, (.dmark)  
41ea 32 65 ee			ld (debug_mark),a  
41ed 3a fc 41			ld a, (.dmark+1)  
41f0 32 66 ee			ld (debug_mark+1),a  
41f3 3a fd 41			ld a, (.dmark+2)  
41f6 32 67 ee			ld (debug_mark+2),a  
41f9 18 03			jr .pastdmark  
41fb ..			.dmark: db "MNr"  
41fe f1			.pastdmark: pop af  
41ff			endm  
# End of macro DMARK
41ff						CALLMONITOR 
41ff cd 6f ee			call debug_vector  
4202				endm  
# End of macro CALLMONITOR
4202					endif 
4202			 
4202 cd 90 1b				call forth_push_numhl 
4205			 
4205			 
4205			 
4205			 
4205				       NEXTW 
4205 c3 81 1f			jp macro_next 
4208				endm 
# End of macro NEXTW
4208			 
4208			 
4208			.ENDDISPLAY: 
4208			 
4208			; eof 
# End of file forth_words_display.asm
4208			include "forth_words_str.asm" 
4208			 
4208			; | ## String Words 
4208			 
4208			.SPLIT:   
4208			 
4208				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
4208 48				db WORD_SYS_CORE+52             
4209 fd 42			dw .PTR            
420b 06				db 5 + 1 
420c .. 00			db "SPLIT",0              
4212				endm 
# End of macro CWHEAD
4212			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
4212					if DEBUG_FORTH_WORDS_KEY 
4212						DMARK "SPT" 
4212 f5				push af  
4213 3a 27 42			ld a, (.dmark)  
4216 32 65 ee			ld (debug_mark),a  
4219 3a 28 42			ld a, (.dmark+1)  
421c 32 66 ee			ld (debug_mark+1),a  
421f 3a 29 42			ld a, (.dmark+2)  
4222 32 67 ee			ld (debug_mark+2),a  
4225 18 03			jr .pastdmark  
4227 ..			.dmark: db "SPT"  
422a f1			.pastdmark: pop af  
422b			endm  
# End of macro DMARK
422b						CALLMONITOR 
422b cd 6f ee			call debug_vector  
422e				endm  
# End of macro CALLMONITOR
422e					endif 
422e			 
422e					; get delim 
422e					FORTH_DSP_VALUEHL 
422e cd 95 1d			call macro_dsp_valuehl 
4231				endm 
# End of macro FORTH_DSP_VALUEHL
4231			 
4231					FORTH_DSP_POP 
4231 cd 4d 1e			call macro_forth_dsp_pop 
4234				endm 
# End of macro FORTH_DSP_POP
4234					 
4234			 
4234 45					ld b, l    ; move delim to b 
4235 0e 01				ld c, 1   ; count of poritions 
4237			 
4237 c5					push bc 
4238			 
4238					if DEBUG_FORTH_WORDS 
4238						DMARK "SPa" 
4238 f5				push af  
4239 3a 4d 42			ld a, (.dmark)  
423c 32 65 ee			ld (debug_mark),a  
423f 3a 4e 42			ld a, (.dmark+1)  
4242 32 66 ee			ld (debug_mark+1),a  
4245 3a 4f 42			ld a, (.dmark+2)  
4248 32 67 ee			ld (debug_mark+2),a  
424b 18 03			jr .pastdmark  
424d ..			.dmark: db "SPa"  
4250 f1			.pastdmark: pop af  
4251			endm  
# End of macro DMARK
4251						CALLMONITOR 
4251 cd 6f ee			call debug_vector  
4254				endm  
# End of macro CALLMONITOR
4254					endif 
4254					; get pointer to string to chop up 
4254					FORTH_DSP_VALUEHL 
4254 cd 95 1d			call macro_dsp_valuehl 
4257				endm 
# End of macro FORTH_DSP_VALUEHL
4257			 
4257			;		push hl 
4257 11 bb e2				ld de, scratch 
425a			.spllop: 
425a c1					pop bc 
425b c5					push bc 
425c			;		pop hl 
425c					if DEBUG_FORTH_WORDS 
425c						DMARK "SPl" 
425c f5				push af  
425d 3a 71 42			ld a, (.dmark)  
4260 32 65 ee			ld (debug_mark),a  
4263 3a 72 42			ld a, (.dmark+1)  
4266 32 66 ee			ld (debug_mark+1),a  
4269 3a 73 42			ld a, (.dmark+2)  
426c 32 67 ee			ld (debug_mark+2),a  
426f 18 03			jr .pastdmark  
4271 ..			.dmark: db "SPl"  
4274 f1			.pastdmark: pop af  
4275			endm  
# End of macro DMARK
4275						CALLMONITOR 
4275 cd 6f ee			call debug_vector  
4278				endm  
# End of macro CALLMONITOR
4278					endif 
4278 7e					ld a, (hl) 
4279 b8					cp b 
427a 28 08				jr z, .splnxt 
427c fe 00				cp 0 
427e 28 34				jr z, .splend 
4280 ed a0				ldi 
4282 18 d6				jr .spllop 
4284			 
4284					; hit dlim 
4284			 
4284			.splnxt: 
4284					if DEBUG_FORTH_WORDS 
4284						DMARK "SPx" 
4284 f5				push af  
4285 3a 99 42			ld a, (.dmark)  
4288 32 65 ee			ld (debug_mark),a  
428b 3a 9a 42			ld a, (.dmark+1)  
428e 32 66 ee			ld (debug_mark+1),a  
4291 3a 9b 42			ld a, (.dmark+2)  
4294 32 67 ee			ld (debug_mark+2),a  
4297 18 03			jr .pastdmark  
4299 ..			.dmark: db "SPx"  
429c f1			.pastdmark: pop af  
429d			endm  
# End of macro DMARK
429d						CALLMONITOR 
429d cd 6f ee			call debug_vector  
42a0				endm  
# End of macro CALLMONITOR
42a0					endif 
42a0 3e 00				ld a, 0 
42a2 12					ld (de), a 
42a3					;ex de, hl 
42a3 e5					push hl 
42a4 21 bb e2				ld hl, scratch 
42a7 cd fe 1b				call forth_push_str 
42aa e1					pop hl 
42ab					;ex de, hl 
42ab 23					inc hl 
42ac c1					pop bc 
42ad 0c					inc c 
42ae c5					push bc 
42af 11 bb e2				ld de, scratch 
42b2 18 a6				jr .spllop 
42b4			 
42b4			.splend:		 
42b4					if DEBUG_FORTH_WORDS 
42b4						DMARK "SPe" 
42b4 f5				push af  
42b5 3a c9 42			ld a, (.dmark)  
42b8 32 65 ee			ld (debug_mark),a  
42bb 3a ca 42			ld a, (.dmark+1)  
42be 32 66 ee			ld (debug_mark+1),a  
42c1 3a cb 42			ld a, (.dmark+2)  
42c4 32 67 ee			ld (debug_mark+2),a  
42c7 18 03			jr .pastdmark  
42c9 ..			.dmark: db "SPe"  
42cc f1			.pastdmark: pop af  
42cd			endm  
# End of macro DMARK
42cd						CALLMONITOR 
42cd cd 6f ee			call debug_vector  
42d0				endm  
# End of macro CALLMONITOR
42d0					endif 
42d0 12					ld (de), a 
42d1 eb					ex de, hl 
42d2			;		push hl 
42d2 21 bb e2				ld hl, scratch 
42d5 cd fe 1b				call forth_push_str 
42d8					 
42d8					if DEBUG_FORTH_WORDS 
42d8						DMARK "SPc" 
42d8 f5				push af  
42d9 3a ed 42			ld a, (.dmark)  
42dc 32 65 ee			ld (debug_mark),a  
42df 3a ee 42			ld a, (.dmark+1)  
42e2 32 66 ee			ld (debug_mark+1),a  
42e5 3a ef 42			ld a, (.dmark+2)  
42e8 32 67 ee			ld (debug_mark+2),a  
42eb 18 03			jr .pastdmark  
42ed ..			.dmark: db "SPc"  
42f0 f1			.pastdmark: pop af  
42f1			endm  
# End of macro DMARK
42f1						CALLMONITOR 
42f1 cd 6f ee			call debug_vector  
42f4				endm  
# End of macro CALLMONITOR
42f4					endif 
42f4			 
42f4 e1					pop hl    ; get counter from bc which has been push 
42f5 26 00				ld h, 0 
42f7			;		ld l, c 
42f7 cd 90 1b				call forth_push_numhl 
42fa			 
42fa			 
42fa				NEXTW 
42fa c3 81 1f			jp macro_next 
42fd				endm 
# End of macro NEXTW
42fd			.PTR:   
42fd			 
42fd				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
42fd 48				db WORD_SYS_CORE+52             
42fe 2a 43			dw .STYPE            
4300 04				db 3 + 1 
4301 .. 00			db "PTR",0              
4305				endm 
# End of macro CWHEAD
4305			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4305			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4305			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4305			 
4305					if DEBUG_FORTH_WORDS_KEY 
4305						DMARK "PTR" 
4305 f5				push af  
4306 3a 1a 43			ld a, (.dmark)  
4309 32 65 ee			ld (debug_mark),a  
430c 3a 1b 43			ld a, (.dmark+1)  
430f 32 66 ee			ld (debug_mark+1),a  
4312 3a 1c 43			ld a, (.dmark+2)  
4315 32 67 ee			ld (debug_mark+2),a  
4318 18 03			jr .pastdmark  
431a ..			.dmark: db "PTR"  
431d f1			.pastdmark: pop af  
431e			endm  
# End of macro DMARK
431e						CALLMONITOR 
431e cd 6f ee			call debug_vector  
4321				endm  
# End of macro CALLMONITOR
4321					endif 
4321					FORTH_DSP_VALUEHL 
4321 cd 95 1d			call macro_dsp_valuehl 
4324				endm 
# End of macro FORTH_DSP_VALUEHL
4324 cd 90 1b				call forth_push_numhl 
4327			 
4327			 
4327					NEXTW 
4327 c3 81 1f			jp macro_next 
432a				endm 
# End of macro NEXTW
432a			.STYPE: 
432a				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
432a 48				db WORD_SYS_CORE+52             
432b 79 43			dw .UPPER            
432d 06				db 5 + 1 
432e .. 00			db "STYPE",0              
4334				endm 
# End of macro CWHEAD
4334			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
4334					if DEBUG_FORTH_WORDS_KEY 
4334						DMARK "STY" 
4334 f5				push af  
4335 3a 49 43			ld a, (.dmark)  
4338 32 65 ee			ld (debug_mark),a  
433b 3a 4a 43			ld a, (.dmark+1)  
433e 32 66 ee			ld (debug_mark+1),a  
4341 3a 4b 43			ld a, (.dmark+2)  
4344 32 67 ee			ld (debug_mark+2),a  
4347 18 03			jr .pastdmark  
4349 ..			.dmark: db "STY"  
434c f1			.pastdmark: pop af  
434d			endm  
# End of macro DMARK
434d						CALLMONITOR 
434d cd 6f ee			call debug_vector  
4350				endm  
# End of macro CALLMONITOR
4350					endif 
4350					FORTH_DSP 
4350 cd 5b 1d			call macro_forth_dsp 
4353				endm 
# End of macro FORTH_DSP
4353					;v5 FORTH_DSP_VALUE 
4353			 
4353 7e					ld a, (hl) 
4354			 
4354 f5					push af 
4355			 
4355			; Dont destroy TOS		FORTH_DSP_POP 
4355			 
4355 f1					pop af 
4356			 
4356 fe 01				cp DS_TYPE_STR 
4358 28 09				jr z, .typestr 
435a			 
435a fe 02				cp DS_TYPE_INUM 
435c 28 0a				jr z, .typeinum 
435e			 
435e 21 77 43				ld hl, .tna 
4361 18 0a				jr .tpush 
4363			 
4363 21 73 43		.typestr:	ld hl, .tstr 
4366 18 05				jr .tpush 
4368 21 75 43		.typeinum:	ld hl, .tinum 
436b 18 00				jr .tpush 
436d			 
436d			.tpush: 
436d			 
436d cd fe 1b				call forth_push_str 
4370			 
4370					NEXTW 
4370 c3 81 1f			jp macro_next 
4373				endm 
# End of macro NEXTW
4373 .. 00		.tstr:	db "s",0 
4375 .. 00		.tinum:  db "i",0 
4377 .. 00		.tna:   db "?", 0 
4379			 
4379			 
4379			.UPPER: 
4379				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4379 48				db WORD_SYS_CORE+52             
437a b4 43			dw .LOWER            
437c 06				db 5 + 1 
437d .. 00			db "UPPER",0              
4383				endm 
# End of macro CWHEAD
4383			; | UPPER ( s -- s ) Upper case string s  | DONE 
4383					if DEBUG_FORTH_WORDS_KEY 
4383						DMARK "UPR" 
4383 f5				push af  
4384 3a 98 43			ld a, (.dmark)  
4387 32 65 ee			ld (debug_mark),a  
438a 3a 99 43			ld a, (.dmark+1)  
438d 32 66 ee			ld (debug_mark+1),a  
4390 3a 9a 43			ld a, (.dmark+2)  
4393 32 67 ee			ld (debug_mark+2),a  
4396 18 03			jr .pastdmark  
4398 ..			.dmark: db "UPR"  
439b f1			.pastdmark: pop af  
439c			endm  
# End of macro DMARK
439c						CALLMONITOR 
439c cd 6f ee			call debug_vector  
439f				endm  
# End of macro CALLMONITOR
439f					endif 
439f			 
439f					FORTH_DSP 
439f cd 5b 1d			call macro_forth_dsp 
43a2				endm 
# End of macro FORTH_DSP
43a2					 
43a2			; TODO check is string type 
43a2			 
43a2					FORTH_DSP_VALUEHL 
43a2 cd 95 1d			call macro_dsp_valuehl 
43a5				endm 
# End of macro FORTH_DSP_VALUEHL
43a5			; get pointer to string in hl 
43a5			 
43a5 7e			.toup:		ld a, (hl) 
43a6 fe 00				cp 0 
43a8 28 07				jr z, .toupdone 
43aa			 
43aa cd 6a 10				call to_upper 
43ad			 
43ad 77					ld (hl), a 
43ae 23					inc hl 
43af 18 f4				jr .toup 
43b1			 
43b1					 
43b1			 
43b1			 
43b1			; for each char convert to upper 
43b1					 
43b1			.toupdone: 
43b1			 
43b1			 
43b1					NEXTW 
43b1 c3 81 1f			jp macro_next 
43b4				endm 
# End of macro NEXTW
43b4			.LOWER: 
43b4				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
43b4 48				db WORD_SYS_CORE+52             
43b5 ef 43			dw .TCASE            
43b7 06				db 5 + 1 
43b8 .. 00			db "LOWER",0              
43be				endm 
# End of macro CWHEAD
43be			; | LOWER ( s -- s ) Lower case string s  | DONE 
43be					if DEBUG_FORTH_WORDS_KEY 
43be						DMARK "LWR" 
43be f5				push af  
43bf 3a d3 43			ld a, (.dmark)  
43c2 32 65 ee			ld (debug_mark),a  
43c5 3a d4 43			ld a, (.dmark+1)  
43c8 32 66 ee			ld (debug_mark+1),a  
43cb 3a d5 43			ld a, (.dmark+2)  
43ce 32 67 ee			ld (debug_mark+2),a  
43d1 18 03			jr .pastdmark  
43d3 ..			.dmark: db "LWR"  
43d6 f1			.pastdmark: pop af  
43d7			endm  
# End of macro DMARK
43d7						CALLMONITOR 
43d7 cd 6f ee			call debug_vector  
43da				endm  
# End of macro CALLMONITOR
43da					endif 
43da			 
43da					FORTH_DSP 
43da cd 5b 1d			call macro_forth_dsp 
43dd				endm 
# End of macro FORTH_DSP
43dd					 
43dd			; TODO check is string type 
43dd			 
43dd					FORTH_DSP_VALUEHL 
43dd cd 95 1d			call macro_dsp_valuehl 
43e0				endm 
# End of macro FORTH_DSP_VALUEHL
43e0			; get pointer to string in hl 
43e0			 
43e0 7e			.tolow:		ld a, (hl) 
43e1 fe 00				cp 0 
43e3 28 07				jr z, .tolowdone 
43e5			 
43e5 cd 73 10				call to_lower 
43e8			 
43e8 77					ld (hl), a 
43e9 23					inc hl 
43ea 18 f4				jr .tolow 
43ec			 
43ec					 
43ec			 
43ec			 
43ec			; for each char convert to low 
43ec					 
43ec			.tolowdone: 
43ec					NEXTW 
43ec c3 81 1f			jp macro_next 
43ef				endm 
# End of macro NEXTW
43ef			.TCASE: 
43ef				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
43ef 48				db WORD_SYS_CORE+52             
43f0 25 45			dw .SUBSTR            
43f2 06				db 5 + 1 
43f3 .. 00			db "TCASE",0              
43f9				endm 
# End of macro CWHEAD
43f9			; | TCASE ( s -- s ) Title case string s  | DONE 
43f9					if DEBUG_FORTH_WORDS_KEY 
43f9						DMARK "TCS" 
43f9 f5				push af  
43fa 3a 0e 44			ld a, (.dmark)  
43fd 32 65 ee			ld (debug_mark),a  
4400 3a 0f 44			ld a, (.dmark+1)  
4403 32 66 ee			ld (debug_mark+1),a  
4406 3a 10 44			ld a, (.dmark+2)  
4409 32 67 ee			ld (debug_mark+2),a  
440c 18 03			jr .pastdmark  
440e ..			.dmark: db "TCS"  
4411 f1			.pastdmark: pop af  
4412			endm  
# End of macro DMARK
4412						CALLMONITOR 
4412 cd 6f ee			call debug_vector  
4415				endm  
# End of macro CALLMONITOR
4415					endif 
4415			 
4415					FORTH_DSP 
4415 cd 5b 1d			call macro_forth_dsp 
4418				endm 
# End of macro FORTH_DSP
4418					 
4418			; TODO check is string type 
4418			 
4418					FORTH_DSP_VALUEHL 
4418 cd 95 1d			call macro_dsp_valuehl 
441b				endm 
# End of macro FORTH_DSP_VALUEHL
441b			; get pointer to string in hl 
441b			 
441b					if DEBUG_FORTH_WORDS 
441b						DMARK "TC1" 
441b f5				push af  
441c 3a 30 44			ld a, (.dmark)  
441f 32 65 ee			ld (debug_mark),a  
4422 3a 31 44			ld a, (.dmark+1)  
4425 32 66 ee			ld (debug_mark+1),a  
4428 3a 32 44			ld a, (.dmark+2)  
442b 32 67 ee			ld (debug_mark+2),a  
442e 18 03			jr .pastdmark  
4430 ..			.dmark: db "TC1"  
4433 f1			.pastdmark: pop af  
4434			endm  
# End of macro DMARK
4434						CALLMONITOR 
4434 cd 6f ee			call debug_vector  
4437				endm  
# End of macro CALLMONITOR
4437					endif 
4437			 
4437					; first time in turn to upper case first char 
4437			 
4437 7e					ld a, (hl) 
4438 c3 c2 44				jp .totsiptou 
443b			 
443b			 
443b 7e			.tot:		ld a, (hl) 
443c fe 00				cp 0 
443e ca 06 45				jp z, .totdone 
4441			 
4441					if DEBUG_FORTH_WORDS 
4441						DMARK "TC2" 
4441 f5				push af  
4442 3a 56 44			ld a, (.dmark)  
4445 32 65 ee			ld (debug_mark),a  
4448 3a 57 44			ld a, (.dmark+1)  
444b 32 66 ee			ld (debug_mark+1),a  
444e 3a 58 44			ld a, (.dmark+2)  
4451 32 67 ee			ld (debug_mark+2),a  
4454 18 03			jr .pastdmark  
4456 ..			.dmark: db "TC2"  
4459 f1			.pastdmark: pop af  
445a			endm  
# End of macro DMARK
445a						CALLMONITOR 
445a cd 6f ee			call debug_vector  
445d				endm  
# End of macro CALLMONITOR
445d					endif 
445d					; check to see if current char is a space 
445d			 
445d fe 20				cp ' ' 
445f 28 21				jr z, .totsp 
4461 cd 73 10				call to_lower 
4464					if DEBUG_FORTH_WORDS 
4464						DMARK "TC3" 
4464 f5				push af  
4465 3a 79 44			ld a, (.dmark)  
4468 32 65 ee			ld (debug_mark),a  
446b 3a 7a 44			ld a, (.dmark+1)  
446e 32 66 ee			ld (debug_mark+1),a  
4471 3a 7b 44			ld a, (.dmark+2)  
4474 32 67 ee			ld (debug_mark+2),a  
4477 18 03			jr .pastdmark  
4479 ..			.dmark: db "TC3"  
447c f1			.pastdmark: pop af  
447d			endm  
# End of macro DMARK
447d						CALLMONITOR 
447d cd 6f ee			call debug_vector  
4480				endm  
# End of macro CALLMONITOR
4480					endif 
4480 18 63				jr .totnxt 
4482			 
4482			.totsp:         ; on a space, find next char which should be upper 
4482			 
4482					if DEBUG_FORTH_WORDS 
4482						DMARK "TC4" 
4482 f5				push af  
4483 3a 97 44			ld a, (.dmark)  
4486 32 65 ee			ld (debug_mark),a  
4489 3a 98 44			ld a, (.dmark+1)  
448c 32 66 ee			ld (debug_mark+1),a  
448f 3a 99 44			ld a, (.dmark+2)  
4492 32 67 ee			ld (debug_mark+2),a  
4495 18 03			jr .pastdmark  
4497 ..			.dmark: db "TC4"  
449a f1			.pastdmark: pop af  
449b			endm  
# End of macro DMARK
449b						CALLMONITOR 
449b cd 6f ee			call debug_vector  
449e				endm  
# End of macro CALLMONITOR
449e					endif 
449e					;; 
449e			 
449e fe 20				cp ' ' 
44a0 20 20				jr nz, .totsiptou 
44a2 23					inc hl 
44a3 7e					ld a, (hl) 
44a4					if DEBUG_FORTH_WORDS 
44a4						DMARK "TC5" 
44a4 f5				push af  
44a5 3a b9 44			ld a, (.dmark)  
44a8 32 65 ee			ld (debug_mark),a  
44ab 3a ba 44			ld a, (.dmark+1)  
44ae 32 66 ee			ld (debug_mark+1),a  
44b1 3a bb 44			ld a, (.dmark+2)  
44b4 32 67 ee			ld (debug_mark+2),a  
44b7 18 03			jr .pastdmark  
44b9 ..			.dmark: db "TC5"  
44bc f1			.pastdmark: pop af  
44bd			endm  
# End of macro DMARK
44bd						CALLMONITOR 
44bd cd 6f ee			call debug_vector  
44c0				endm  
# End of macro CALLMONITOR
44c0					endif 
44c0 18 c0				jr .totsp 
44c2 fe 00		.totsiptou:    cp 0 
44c4 28 40				jr z, .totdone 
44c6					; not space and not zero term so upper case it 
44c6 cd 6a 10				call to_upper 
44c9			 
44c9					if DEBUG_FORTH_WORDS 
44c9						DMARK "TC6" 
44c9 f5				push af  
44ca 3a de 44			ld a, (.dmark)  
44cd 32 65 ee			ld (debug_mark),a  
44d0 3a df 44			ld a, (.dmark+1)  
44d3 32 66 ee			ld (debug_mark+1),a  
44d6 3a e0 44			ld a, (.dmark+2)  
44d9 32 67 ee			ld (debug_mark+2),a  
44dc 18 03			jr .pastdmark  
44de ..			.dmark: db "TC6"  
44e1 f1			.pastdmark: pop af  
44e2			endm  
# End of macro DMARK
44e2						CALLMONITOR 
44e2 cd 6f ee			call debug_vector  
44e5				endm  
# End of macro CALLMONITOR
44e5					endif 
44e5			 
44e5			 
44e5			.totnxt: 
44e5			 
44e5 77					ld (hl), a 
44e6 23					inc hl 
44e7					if DEBUG_FORTH_WORDS 
44e7						DMARK "TC7" 
44e7 f5				push af  
44e8 3a fc 44			ld a, (.dmark)  
44eb 32 65 ee			ld (debug_mark),a  
44ee 3a fd 44			ld a, (.dmark+1)  
44f1 32 66 ee			ld (debug_mark+1),a  
44f4 3a fe 44			ld a, (.dmark+2)  
44f7 32 67 ee			ld (debug_mark+2),a  
44fa 18 03			jr .pastdmark  
44fc ..			.dmark: db "TC7"  
44ff f1			.pastdmark: pop af  
4500			endm  
# End of macro DMARK
4500						CALLMONITOR 
4500 cd 6f ee			call debug_vector  
4503				endm  
# End of macro CALLMONITOR
4503					endif 
4503 c3 3b 44				jp .tot 
4506			 
4506					 
4506			 
4506			 
4506			; for each char convert to low 
4506					 
4506			.totdone: 
4506					if DEBUG_FORTH_WORDS 
4506						DMARK "TCd" 
4506 f5				push af  
4507 3a 1b 45			ld a, (.dmark)  
450a 32 65 ee			ld (debug_mark),a  
450d 3a 1c 45			ld a, (.dmark+1)  
4510 32 66 ee			ld (debug_mark+1),a  
4513 3a 1d 45			ld a, (.dmark+2)  
4516 32 67 ee			ld (debug_mark+2),a  
4519 18 03			jr .pastdmark  
451b ..			.dmark: db "TCd"  
451e f1			.pastdmark: pop af  
451f			endm  
# End of macro DMARK
451f						CALLMONITOR 
451f cd 6f ee			call debug_vector  
4522				endm  
# End of macro CALLMONITOR
4522					endif 
4522					NEXTW 
4522 c3 81 1f			jp macro_next 
4525				endm 
# End of macro NEXTW
4525			 
4525			.SUBSTR: 
4525				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4525 48				db WORD_SYS_CORE+52             
4526 83 45			dw .LEFT            
4528 07				db 6 + 1 
4529 .. 00			db "SUBSTR",0              
4530				endm 
# End of macro CWHEAD
4530			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
4530			 
4530					if DEBUG_FORTH_WORDS_KEY 
4530						DMARK "SST" 
4530 f5				push af  
4531 3a 45 45			ld a, (.dmark)  
4534 32 65 ee			ld (debug_mark),a  
4537 3a 46 45			ld a, (.dmark+1)  
453a 32 66 ee			ld (debug_mark+1),a  
453d 3a 47 45			ld a, (.dmark+2)  
4540 32 67 ee			ld (debug_mark+2),a  
4543 18 03			jr .pastdmark  
4545 ..			.dmark: db "SST"  
4548 f1			.pastdmark: pop af  
4549			endm  
# End of macro DMARK
4549						CALLMONITOR 
4549 cd 6f ee			call debug_vector  
454c				endm  
# End of macro CALLMONITOR
454c					endif 
454c			; TODO check string type 
454c					FORTH_DSP_VALUEHL 
454c cd 95 1d			call macro_dsp_valuehl 
454f				endm 
# End of macro FORTH_DSP_VALUEHL
454f			 
454f e5					push hl      ; string length 
4550			 
4550					FORTH_DSP_POP 
4550 cd 4d 1e			call macro_forth_dsp_pop 
4553				endm 
# End of macro FORTH_DSP_POP
4553			 
4553					FORTH_DSP_VALUEHL 
4553 cd 95 1d			call macro_dsp_valuehl 
4556				endm 
# End of macro FORTH_DSP_VALUEHL
4556			 
4556 e5					push hl     ; start char 
4557			 
4557					FORTH_DSP_POP 
4557 cd 4d 1e			call macro_forth_dsp_pop 
455a				endm 
# End of macro FORTH_DSP_POP
455a			 
455a			 
455a					FORTH_DSP_VALUE 
455a cd 7e 1d			call macro_forth_dsp_value 
455d				endm 
# End of macro FORTH_DSP_VALUE
455d			 
455d d1					pop de    ; get start post offset 
455e			 
455e 19					add hl, de    ; starting offset 
455f			 
455f c1					pop bc 
4560 c5					push bc      ; grab size of string 
4561			 
4561 e5					push hl    ; save string start  
4562			 
4562 26 00				ld h, 0 
4564 69					ld l, c 
4565 23					inc hl 
4566 23					inc hl 
4567			 
4567 cd d0 11				call malloc 
456a				if DEBUG_FORTH_MALLOC_GUARD 
456a cc 52 4f				call z,malloc_error 
456d				endif 
456d			 
456d eb					ex de, hl      ; save malloc area for string copy 
456e e1					pop hl    ; get back source 
456f c1					pop bc    ; get length of string back 
4570			 
4570 d5					push de    ; save malloc area for after we push 
4571 ed b0				ldir     ; copy substr 
4573			 
4573			 
4573 eb					ex de, hl 
4574 3e 00				ld a, 0 
4576 77					ld (hl), a   ; term substr 
4577			 
4577					 
4577 e1					pop hl    ; get malloc so we can push it 
4578 e5					push hl   ; save so we can free it afterwards 
4579			 
4579 cd fe 1b				call forth_push_str 
457c			 
457c e1					pop hl 
457d cd 9a 12				call free 
4580			 
4580					 
4580					 
4580			 
4580			 
4580					NEXTW 
4580 c3 81 1f			jp macro_next 
4583				endm 
# End of macro NEXTW
4583			 
4583			.LEFT: 
4583				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4583 48				db WORD_SYS_CORE+52             
4584 ab 45			dw .RIGHT            
4586 05				db 4 + 1 
4587 .. 00			db "LEFT",0              
458c				endm 
# End of macro CWHEAD
458c			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
458c					if DEBUG_FORTH_WORDS_KEY 
458c						DMARK "LEF" 
458c f5				push af  
458d 3a a1 45			ld a, (.dmark)  
4590 32 65 ee			ld (debug_mark),a  
4593 3a a2 45			ld a, (.dmark+1)  
4596 32 66 ee			ld (debug_mark+1),a  
4599 3a a3 45			ld a, (.dmark+2)  
459c 32 67 ee			ld (debug_mark+2),a  
459f 18 03			jr .pastdmark  
45a1 ..			.dmark: db "LEF"  
45a4 f1			.pastdmark: pop af  
45a5			endm  
# End of macro DMARK
45a5						CALLMONITOR 
45a5 cd 6f ee			call debug_vector  
45a8				endm  
# End of macro CALLMONITOR
45a8					endif 
45a8			 
45a8					NEXTW 
45a8 c3 81 1f			jp macro_next 
45ab				endm 
# End of macro NEXTW
45ab			.RIGHT: 
45ab				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
45ab 48				db WORD_SYS_CORE+52             
45ac d4 45			dw .STR2NUM            
45ae 06				db 5 + 1 
45af .. 00			db "RIGHT",0              
45b5				endm 
# End of macro CWHEAD
45b5			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
45b5					if DEBUG_FORTH_WORDS_KEY 
45b5						DMARK "RIG" 
45b5 f5				push af  
45b6 3a ca 45			ld a, (.dmark)  
45b9 32 65 ee			ld (debug_mark),a  
45bc 3a cb 45			ld a, (.dmark+1)  
45bf 32 66 ee			ld (debug_mark+1),a  
45c2 3a cc 45			ld a, (.dmark+2)  
45c5 32 67 ee			ld (debug_mark+2),a  
45c8 18 03			jr .pastdmark  
45ca ..			.dmark: db "RIG"  
45cd f1			.pastdmark: pop af  
45ce			endm  
# End of macro DMARK
45ce						CALLMONITOR 
45ce cd 6f ee			call debug_vector  
45d1				endm  
# End of macro CALLMONITOR
45d1					endif 
45d1			 
45d1					NEXTW 
45d1 c3 81 1f			jp macro_next 
45d4				endm 
# End of macro NEXTW
45d4			 
45d4			 
45d4			.STR2NUM: 
45d4				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
45d4 48				db WORD_SYS_CORE+52             
45d5 60 46			dw .NUM2STR            
45d7 08				db 7 + 1 
45d8 .. 00			db "STR2NUM",0              
45e0				endm 
# End of macro CWHEAD
45e0			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
45e0			 
45e0			 
45e0			; TODO STR type check to do 
45e0					if DEBUG_FORTH_WORDS_KEY 
45e0						DMARK "S2N" 
45e0 f5				push af  
45e1 3a f5 45			ld a, (.dmark)  
45e4 32 65 ee			ld (debug_mark),a  
45e7 3a f6 45			ld a, (.dmark+1)  
45ea 32 66 ee			ld (debug_mark+1),a  
45ed 3a f7 45			ld a, (.dmark+2)  
45f0 32 67 ee			ld (debug_mark+2),a  
45f3 18 03			jr .pastdmark  
45f5 ..			.dmark: db "S2N"  
45f8 f1			.pastdmark: pop af  
45f9			endm  
# End of macro DMARK
45f9						CALLMONITOR 
45f9 cd 6f ee			call debug_vector  
45fc				endm  
# End of macro CALLMONITOR
45fc					endif 
45fc			 
45fc					;FORTH_DSP 
45fc					FORTH_DSP_VALUE 
45fc cd 7e 1d			call macro_forth_dsp_value 
45ff				endm 
# End of macro FORTH_DSP_VALUE
45ff					;inc hl 
45ff			 
45ff eb					ex de, hl 
4600					if DEBUG_FORTH_WORDS 
4600						DMARK "S2a" 
4600 f5				push af  
4601 3a 15 46			ld a, (.dmark)  
4604 32 65 ee			ld (debug_mark),a  
4607 3a 16 46			ld a, (.dmark+1)  
460a 32 66 ee			ld (debug_mark+1),a  
460d 3a 17 46			ld a, (.dmark+2)  
4610 32 67 ee			ld (debug_mark+2),a  
4613 18 03			jr .pastdmark  
4615 ..			.dmark: db "S2a"  
4618 f1			.pastdmark: pop af  
4619			endm  
# End of macro DMARK
4619						CALLMONITOR 
4619 cd 6f ee			call debug_vector  
461c				endm  
# End of macro CALLMONITOR
461c					endif 
461c cd f2 10				call string_to_uint16 
461f			 
461f					if DEBUG_FORTH_WORDS 
461f						DMARK "S2b" 
461f f5				push af  
4620 3a 34 46			ld a, (.dmark)  
4623 32 65 ee			ld (debug_mark),a  
4626 3a 35 46			ld a, (.dmark+1)  
4629 32 66 ee			ld (debug_mark+1),a  
462c 3a 36 46			ld a, (.dmark+2)  
462f 32 67 ee			ld (debug_mark+2),a  
4632 18 03			jr .pastdmark  
4634 ..			.dmark: db "S2b"  
4637 f1			.pastdmark: pop af  
4638			endm  
# End of macro DMARK
4638						CALLMONITOR 
4638 cd 6f ee			call debug_vector  
463b				endm  
# End of macro CALLMONITOR
463b					endif 
463b			;		push hl 
463b					FORTH_DSP_POP 
463b cd 4d 1e			call macro_forth_dsp_pop 
463e				endm 
# End of macro FORTH_DSP_POP
463e			;		pop hl 
463e					 
463e					if DEBUG_FORTH_WORDS 
463e						DMARK "S2b" 
463e f5				push af  
463f 3a 53 46			ld a, (.dmark)  
4642 32 65 ee			ld (debug_mark),a  
4645 3a 54 46			ld a, (.dmark+1)  
4648 32 66 ee			ld (debug_mark+1),a  
464b 3a 55 46			ld a, (.dmark+2)  
464e 32 67 ee			ld (debug_mark+2),a  
4651 18 03			jr .pastdmark  
4653 ..			.dmark: db "S2b"  
4656 f1			.pastdmark: pop af  
4657			endm  
# End of macro DMARK
4657						CALLMONITOR 
4657 cd 6f ee			call debug_vector  
465a				endm  
# End of macro CALLMONITOR
465a					endif 
465a cd 90 1b				call forth_push_numhl	 
465d			 
465d				 
465d				       NEXTW 
465d c3 81 1f			jp macro_next 
4660				endm 
# End of macro NEXTW
4660			.NUM2STR: 
4660				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4660 48				db WORD_SYS_CORE+52             
4661 f2 46			dw .CONCAT            
4663 08				db 7 + 1 
4664 .. 00			db "NUM2STR",0              
466c				endm 
# End of macro CWHEAD
466c			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
466c			 
466c			;		; malloc a string to target 
466c			;		ld hl, 10     ; TODO max string size should be fine 
466c			;		call malloc 
466c			;		push hl    ; save malloc location 
466c			; 
466c			; 
466c			;; TODO check int type 
466c					if DEBUG_FORTH_WORDS_KEY 
466c						DMARK "N2S" 
466c f5				push af  
466d 3a 81 46			ld a, (.dmark)  
4670 32 65 ee			ld (debug_mark),a  
4673 3a 82 46			ld a, (.dmark+1)  
4676 32 66 ee			ld (debug_mark+1),a  
4679 3a 83 46			ld a, (.dmark+2)  
467c 32 67 ee			ld (debug_mark+2),a  
467f 18 03			jr .pastdmark  
4681 ..			.dmark: db "N2S"  
4684 f1			.pastdmark: pop af  
4685			endm  
# End of macro DMARK
4685						CALLMONITOR 
4685 cd 6f ee			call debug_vector  
4688				endm  
# End of macro CALLMONITOR
4688					endif 
4688			 
4688					FORTH_DSP_VALUEHL 
4688 cd 95 1d			call macro_dsp_valuehl 
468b				endm 
# End of macro FORTH_DSP_VALUEHL
468b			 
468b					if DEBUG_FORTH_WORDS 
468b						DMARK "NS1" 
468b f5				push af  
468c 3a a0 46			ld a, (.dmark)  
468f 32 65 ee			ld (debug_mark),a  
4692 3a a1 46			ld a, (.dmark+1)  
4695 32 66 ee			ld (debug_mark+1),a  
4698 3a a2 46			ld a, (.dmark+2)  
469b 32 67 ee			ld (debug_mark+2),a  
469e 18 03			jr .pastdmark  
46a0 ..			.dmark: db "NS1"  
46a3 f1			.pastdmark: pop af  
46a4			endm  
# End of macro DMARK
46a4						CALLMONITOR 
46a4 cd 6f ee			call debug_vector  
46a7				endm  
# End of macro CALLMONITOR
46a7					endif 
46a7					FORTH_DSP_POP 
46a7 cd 4d 1e			call macro_forth_dsp_pop 
46aa				endm 
# End of macro FORTH_DSP_POP
46aa			 
46aa eb					ex de, hl 
46ab 21 bb e2				ld hl, scratch 
46ae					if DEBUG_FORTH_WORDS 
46ae						DMARK "NS2" 
46ae f5				push af  
46af 3a c3 46			ld a, (.dmark)  
46b2 32 65 ee			ld (debug_mark),a  
46b5 3a c4 46			ld a, (.dmark+1)  
46b8 32 66 ee			ld (debug_mark+1),a  
46bb 3a c5 46			ld a, (.dmark+2)  
46be 32 67 ee			ld (debug_mark+2),a  
46c1 18 03			jr .pastdmark  
46c3 ..			.dmark: db "NS2"  
46c6 f1			.pastdmark: pop af  
46c7			endm  
# End of macro DMARK
46c7						CALLMONITOR 
46c7 cd 6f ee			call debug_vector  
46ca				endm  
# End of macro CALLMONITOR
46ca					endif 
46ca cd 0a 11				call uitoa_16 
46cd 21 bb e2				ld hl, scratch 
46d0					if DEBUG_FORTH_WORDS 
46d0						DMARK "NS3" 
46d0 f5				push af  
46d1 3a e5 46			ld a, (.dmark)  
46d4 32 65 ee			ld (debug_mark),a  
46d7 3a e6 46			ld a, (.dmark+1)  
46da 32 66 ee			ld (debug_mark+1),a  
46dd 3a e7 46			ld a, (.dmark+2)  
46e0 32 67 ee			ld (debug_mark+2),a  
46e3 18 03			jr .pastdmark  
46e5 ..			.dmark: db "NS3"  
46e8 f1			.pastdmark: pop af  
46e9			endm  
# End of macro DMARK
46e9						CALLMONITOR 
46e9 cd 6f ee			call debug_vector  
46ec				endm  
# End of macro CALLMONITOR
46ec					endif 
46ec cd fe 1b				call forth_push_str 
46ef			;		ld a, l 
46ef			;		call DispAToASCII   
46ef			;;TODO need to chage above call to dump into string 
46ef			; 
46ef			; 
46ef			 
46ef				       NEXTW 
46ef c3 81 1f			jp macro_next 
46f2				endm 
# End of macro NEXTW
46f2			 
46f2			.CONCAT: 
46f2				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
46f2 48				db WORD_SYS_CORE+52             
46f3 a5 47			dw .FIND            
46f5 07				db 6 + 1 
46f6 .. 00			db "CONCAT",0              
46fd				endm 
# End of macro CWHEAD
46fd			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
46fd			 
46fd			; TODO check string type 
46fd			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
46fd			 
46fd					if DEBUG_FORTH_WORDS_KEY 
46fd						DMARK "CON" 
46fd f5				push af  
46fe 3a 12 47			ld a, (.dmark)  
4701 32 65 ee			ld (debug_mark),a  
4704 3a 13 47			ld a, (.dmark+1)  
4707 32 66 ee			ld (debug_mark+1),a  
470a 3a 14 47			ld a, (.dmark+2)  
470d 32 67 ee			ld (debug_mark+2),a  
4710 18 03			jr .pastdmark  
4712 ..			.dmark: db "CON"  
4715 f1			.pastdmark: pop af  
4716			endm  
# End of macro DMARK
4716						CALLMONITOR 
4716 cd 6f ee			call debug_vector  
4719				endm  
# End of macro CALLMONITOR
4719					endif 
4719			 
4719			 
4719					FORTH_DSP_VALUE 
4719 cd 7e 1d			call macro_forth_dsp_value 
471c				endm 
# End of macro FORTH_DSP_VALUE
471c e5					push hl   ; s2 
471d			 
471d					FORTH_DSP_POP 
471d cd 4d 1e			call macro_forth_dsp_pop 
4720				endm 
# End of macro FORTH_DSP_POP
4720			 
4720					FORTH_DSP_VALUE 
4720 cd 7e 1d			call macro_forth_dsp_value 
4723				endm 
# End of macro FORTH_DSP_VALUE
4723			 
4723 e5					push hl   ; s1 
4724			 
4724					FORTH_DSP_POP 
4724 cd 4d 1e			call macro_forth_dsp_pop 
4727				endm 
# End of macro FORTH_DSP_POP
4727					 
4727			 
4727					; copy s1 
4727			 
4727				 
4727					; save ptr 
4727 e1					pop hl  
4728 e5					push hl 
4729 3e 00				ld a, 0 
472b cd 66 11				call strlent 
472e					;inc hl    ; zer0 
472e 06 00				ld b, 0 
4730 4d					ld c, l 
4731 e1					pop hl		 
4732 11 bb e2				ld de, scratch	 
4735					if DEBUG_FORTH_WORDS 
4735						DMARK "CO1" 
4735 f5				push af  
4736 3a 4a 47			ld a, (.dmark)  
4739 32 65 ee			ld (debug_mark),a  
473c 3a 4b 47			ld a, (.dmark+1)  
473f 32 66 ee			ld (debug_mark+1),a  
4742 3a 4c 47			ld a, (.dmark+2)  
4745 32 67 ee			ld (debug_mark+2),a  
4748 18 03			jr .pastdmark  
474a ..			.dmark: db "CO1"  
474d f1			.pastdmark: pop af  
474e			endm  
# End of macro DMARK
474e						CALLMONITOR 
474e cd 6f ee			call debug_vector  
4751				endm  
# End of macro CALLMONITOR
4751					endif 
4751 ed b0				ldir 
4753			 
4753 e1					pop hl 
4754 e5					push hl 
4755 d5					push de 
4756			 
4756			 
4756 3e 00				ld a, 0 
4758 cd 66 11				call strlent 
475b 23					inc hl    ; zer0 
475c 23					inc hl 
475d 06 00				ld b, 0 
475f 4d					ld c, l 
4760 d1					pop de 
4761 e1					pop hl		 
4762					if DEBUG_FORTH_WORDS 
4762						DMARK "CO2" 
4762 f5				push af  
4763 3a 77 47			ld a, (.dmark)  
4766 32 65 ee			ld (debug_mark),a  
4769 3a 78 47			ld a, (.dmark+1)  
476c 32 66 ee			ld (debug_mark+1),a  
476f 3a 79 47			ld a, (.dmark+2)  
4772 32 67 ee			ld (debug_mark+2),a  
4775 18 03			jr .pastdmark  
4777 ..			.dmark: db "CO2"  
477a f1			.pastdmark: pop af  
477b			endm  
# End of macro DMARK
477b						CALLMONITOR 
477b cd 6f ee			call debug_vector  
477e				endm  
# End of macro CALLMONITOR
477e					endif 
477e ed b0				ldir 
4780			 
4780			 
4780			 
4780 21 bb e2				ld hl, scratch 
4783					if DEBUG_FORTH_WORDS 
4783						DMARK "CO5" 
4783 f5				push af  
4784 3a 98 47			ld a, (.dmark)  
4787 32 65 ee			ld (debug_mark),a  
478a 3a 99 47			ld a, (.dmark+1)  
478d 32 66 ee			ld (debug_mark+1),a  
4790 3a 9a 47			ld a, (.dmark+2)  
4793 32 67 ee			ld (debug_mark+2),a  
4796 18 03			jr .pastdmark  
4798 ..			.dmark: db "CO5"  
479b f1			.pastdmark: pop af  
479c			endm  
# End of macro DMARK
479c						CALLMONITOR 
479c cd 6f ee			call debug_vector  
479f				endm  
# End of macro CALLMONITOR
479f					endif 
479f			 
479f cd fe 1b				call forth_push_str 
47a2			 
47a2			 
47a2			 
47a2			 
47a2				       NEXTW 
47a2 c3 81 1f			jp macro_next 
47a5				endm 
# End of macro NEXTW
47a5			 
47a5			 
47a5			.FIND: 
47a5				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
47a5 4b				db WORD_SYS_CORE+55             
47a6 63 48			dw .LEN            
47a8 05				db 4 + 1 
47a9 .. 00			db "FIND",0              
47ae				endm 
# End of macro CWHEAD
47ae			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
47ae			 
47ae					if DEBUG_FORTH_WORDS_KEY 
47ae						DMARK "FND" 
47ae f5				push af  
47af 3a c3 47			ld a, (.dmark)  
47b2 32 65 ee			ld (debug_mark),a  
47b5 3a c4 47			ld a, (.dmark+1)  
47b8 32 66 ee			ld (debug_mark+1),a  
47bb 3a c5 47			ld a, (.dmark+2)  
47be 32 67 ee			ld (debug_mark+2),a  
47c1 18 03			jr .pastdmark  
47c3 ..			.dmark: db "FND"  
47c6 f1			.pastdmark: pop af  
47c7			endm  
# End of macro DMARK
47c7						CALLMONITOR 
47c7 cd 6f ee			call debug_vector  
47ca				endm  
# End of macro CALLMONITOR
47ca					endif 
47ca			 
47ca			; TODO check string type 
47ca					FORTH_DSP_VALUE 
47ca cd 7e 1d			call macro_forth_dsp_value 
47cd				endm 
# End of macro FORTH_DSP_VALUE
47cd			 
47cd e5					push hl    
47ce 7e					ld a,(hl)    ; char to find   
47cf			; TODO change char to substr 
47cf			 
47cf f5					push af 
47d0					 
47d0			 
47d0			 
47d0					if DEBUG_FORTH_WORDS 
47d0						DMARK "FN1" 
47d0 f5				push af  
47d1 3a e5 47			ld a, (.dmark)  
47d4 32 65 ee			ld (debug_mark),a  
47d7 3a e6 47			ld a, (.dmark+1)  
47da 32 66 ee			ld (debug_mark+1),a  
47dd 3a e7 47			ld a, (.dmark+2)  
47e0 32 67 ee			ld (debug_mark+2),a  
47e3 18 03			jr .pastdmark  
47e5 ..			.dmark: db "FN1"  
47e8 f1			.pastdmark: pop af  
47e9			endm  
# End of macro DMARK
47e9						CALLMONITOR 
47e9 cd 6f ee			call debug_vector  
47ec				endm  
# End of macro CALLMONITOR
47ec					endif 
47ec			 
47ec					FORTH_DSP_POP 
47ec cd 4d 1e			call macro_forth_dsp_pop 
47ef				endm 
# End of macro FORTH_DSP_POP
47ef			 
47ef					; string to search 
47ef			 
47ef					FORTH_DSP_VALUE 
47ef cd 7e 1d			call macro_forth_dsp_value 
47f2				endm 
# End of macro FORTH_DSP_VALUE
47f2			 
47f2 d1					pop de  ; d is char to find  
47f3			 
47f3					if DEBUG_FORTH_WORDS 
47f3						DMARK "FN2" 
47f3 f5				push af  
47f4 3a 08 48			ld a, (.dmark)  
47f7 32 65 ee			ld (debug_mark),a  
47fa 3a 09 48			ld a, (.dmark+1)  
47fd 32 66 ee			ld (debug_mark+1),a  
4800 3a 0a 48			ld a, (.dmark+2)  
4803 32 67 ee			ld (debug_mark+2),a  
4806 18 03			jr .pastdmark  
4808 ..			.dmark: db "FN2"  
480b f1			.pastdmark: pop af  
480c			endm  
# End of macro DMARK
480c						CALLMONITOR 
480c cd 6f ee			call debug_vector  
480f				endm  
# End of macro CALLMONITOR
480f					endif 
480f					 
480f 01 00 00				ld bc, 0 
4812 7e			.findchar:      ld a,(hl) 
4813 fe 00				cp 0   		 
4815 28 27				jr z, .finddone     
4817 ba					cp d 
4818 28 20				jr z, .foundchar 
481a 03					inc bc 
481b 23					inc hl 
481c					if DEBUG_FORTH_WORDS 
481c						DMARK "FN3" 
481c f5				push af  
481d 3a 31 48			ld a, (.dmark)  
4820 32 65 ee			ld (debug_mark),a  
4823 3a 32 48			ld a, (.dmark+1)  
4826 32 66 ee			ld (debug_mark+1),a  
4829 3a 33 48			ld a, (.dmark+2)  
482c 32 67 ee			ld (debug_mark+2),a  
482f 18 03			jr .pastdmark  
4831 ..			.dmark: db "FN3"  
4834 f1			.pastdmark: pop af  
4835			endm  
# End of macro DMARK
4835						CALLMONITOR 
4835 cd 6f ee			call debug_vector  
4838				endm  
# End of macro CALLMONITOR
4838					endif 
4838 18 d8				jr .findchar 
483a			 
483a			 
483a c5			.foundchar:	push bc 
483b e1					pop hl 
483c 18 03				jr .findexit 
483e			 
483e			 
483e							 
483e			 
483e			.finddone:     ; got to end of string with no find 
483e 21 00 00				ld hl, 0 
4841			.findexit: 
4841			 
4841					if DEBUG_FORTH_WORDS 
4841						DMARK "FNd" 
4841 f5				push af  
4842 3a 56 48			ld a, (.dmark)  
4845 32 65 ee			ld (debug_mark),a  
4848 3a 57 48			ld a, (.dmark+1)  
484b 32 66 ee			ld (debug_mark+1),a  
484e 3a 58 48			ld a, (.dmark+2)  
4851 32 67 ee			ld (debug_mark+2),a  
4854 18 03			jr .pastdmark  
4856 ..			.dmark: db "FNd"  
4859 f1			.pastdmark: pop af  
485a			endm  
# End of macro DMARK
485a						CALLMONITOR 
485a cd 6f ee			call debug_vector  
485d				endm  
# End of macro CALLMONITOR
485d					endif 
485d cd 90 1b			call forth_push_numhl 
4860			 
4860				       NEXTW 
4860 c3 81 1f			jp macro_next 
4863				endm 
# End of macro NEXTW
4863			 
4863			.LEN: 
4863				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4863 4c				db WORD_SYS_CORE+56             
4864 cd 48			dw .ASC            
4866 06				db 5 + 1 
4867 .. 00			db "COUNT",0              
486d				endm 
# End of macro CWHEAD
486d			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
486d			 
486d					if DEBUG_FORTH_WORDS_KEY 
486d						DMARK "CNT" 
486d f5				push af  
486e 3a 82 48			ld a, (.dmark)  
4871 32 65 ee			ld (debug_mark),a  
4874 3a 83 48			ld a, (.dmark+1)  
4877 32 66 ee			ld (debug_mark+1),a  
487a 3a 84 48			ld a, (.dmark+2)  
487d 32 67 ee			ld (debug_mark+2),a  
4880 18 03			jr .pastdmark  
4882 ..			.dmark: db "CNT"  
4885 f1			.pastdmark: pop af  
4886			endm  
# End of macro DMARK
4886						CALLMONITOR 
4886 cd 6f ee			call debug_vector  
4889				endm  
# End of macro CALLMONITOR
4889					endif 
4889			; TODO check string type 
4889					FORTH_DSP_VALUE 
4889 cd 7e 1d			call macro_forth_dsp_value 
488c				endm 
# End of macro FORTH_DSP_VALUE
488c			 
488c			 
488c					if DEBUG_FORTH_WORDS 
488c						DMARK "CN?" 
488c f5				push af  
488d 3a a1 48			ld a, (.dmark)  
4890 32 65 ee			ld (debug_mark),a  
4893 3a a2 48			ld a, (.dmark+1)  
4896 32 66 ee			ld (debug_mark+1),a  
4899 3a a3 48			ld a, (.dmark+2)  
489c 32 67 ee			ld (debug_mark+2),a  
489f 18 03			jr .pastdmark  
48a1 ..			.dmark: db "CN?"  
48a4 f1			.pastdmark: pop af  
48a5			endm  
# End of macro DMARK
48a5						CALLMONITOR 
48a5 cd 6f ee			call debug_vector  
48a8				endm  
# End of macro CALLMONITOR
48a8					endif 
48a8 cd 5b 11				call strlenz 
48ab					if DEBUG_FORTH_WORDS 
48ab						DMARK "CNl" 
48ab f5				push af  
48ac 3a c0 48			ld a, (.dmark)  
48af 32 65 ee			ld (debug_mark),a  
48b2 3a c1 48			ld a, (.dmark+1)  
48b5 32 66 ee			ld (debug_mark+1),a  
48b8 3a c2 48			ld a, (.dmark+2)  
48bb 32 67 ee			ld (debug_mark+2),a  
48be 18 03			jr .pastdmark  
48c0 ..			.dmark: db "CNl"  
48c3 f1			.pastdmark: pop af  
48c4			endm  
# End of macro DMARK
48c4						CALLMONITOR 
48c4 cd 6f ee			call debug_vector  
48c7				endm  
# End of macro CALLMONITOR
48c7					endif 
48c7			 
48c7 cd 90 1b				call forth_push_numhl 
48ca			 
48ca			 
48ca			 
48ca				       NEXTW 
48ca c3 81 1f			jp macro_next 
48cd				endm 
# End of macro NEXTW
48cd			.ASC: 
48cd				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
48cd 4d				db WORD_SYS_CORE+57             
48ce 3b 49			dw .CHR            
48d0 04				db 3 + 1 
48d1 .. 00			db "ASC",0              
48d5				endm 
# End of macro CWHEAD
48d5			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
48d5					if DEBUG_FORTH_WORDS_KEY 
48d5						DMARK "ASC" 
48d5 f5				push af  
48d6 3a ea 48			ld a, (.dmark)  
48d9 32 65 ee			ld (debug_mark),a  
48dc 3a eb 48			ld a, (.dmark+1)  
48df 32 66 ee			ld (debug_mark+1),a  
48e2 3a ec 48			ld a, (.dmark+2)  
48e5 32 67 ee			ld (debug_mark+2),a  
48e8 18 03			jr .pastdmark  
48ea ..			.dmark: db "ASC"  
48ed f1			.pastdmark: pop af  
48ee			endm  
# End of macro DMARK
48ee						CALLMONITOR 
48ee cd 6f ee			call debug_vector  
48f1				endm  
# End of macro CALLMONITOR
48f1					endif 
48f1					FORTH_DSP_VALUE 
48f1 cd 7e 1d			call macro_forth_dsp_value 
48f4				endm 
# End of macro FORTH_DSP_VALUE
48f4					;v5 FORTH_DSP_VALUE 
48f4			;		inc hl      ; now at start of numeric as string 
48f4			 
48f4 e5					push hl 
48f5			 
48f5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
48f5 cd 4d 1e			call macro_forth_dsp_pop 
48f8				endm 
# End of macro FORTH_DSP_POP
48f8			 
48f8 e1					pop hl 
48f9			 
48f9					if DEBUG_FORTH_WORDS 
48f9						DMARK "AS1" 
48f9 f5				push af  
48fa 3a 0e 49			ld a, (.dmark)  
48fd 32 65 ee			ld (debug_mark),a  
4900 3a 0f 49			ld a, (.dmark+1)  
4903 32 66 ee			ld (debug_mark+1),a  
4906 3a 10 49			ld a, (.dmark+2)  
4909 32 67 ee			ld (debug_mark+2),a  
490c 18 03			jr .pastdmark  
490e ..			.dmark: db "AS1"  
4911 f1			.pastdmark: pop af  
4912			endm  
# End of macro DMARK
4912						CALLMONITOR 
4912 cd 6f ee			call debug_vector  
4915				endm  
# End of macro CALLMONITOR
4915					endif 
4915					; push the content of a onto the stack as a value 
4915			 
4915 7e					ld a,(hl)   ; get char 
4916 26 00				ld h,0 
4918 6f					ld l,a 
4919					if DEBUG_FORTH_WORDS 
4919						DMARK "AS2" 
4919 f5				push af  
491a 3a 2e 49			ld a, (.dmark)  
491d 32 65 ee			ld (debug_mark),a  
4920 3a 2f 49			ld a, (.dmark+1)  
4923 32 66 ee			ld (debug_mark+1),a  
4926 3a 30 49			ld a, (.dmark+2)  
4929 32 67 ee			ld (debug_mark+2),a  
492c 18 03			jr .pastdmark  
492e ..			.dmark: db "AS2"  
4931 f1			.pastdmark: pop af  
4932			endm  
# End of macro DMARK
4932						CALLMONITOR 
4932 cd 6f ee			call debug_vector  
4935				endm  
# End of macro CALLMONITOR
4935					endif 
4935 cd 90 1b				call forth_push_numhl 
4938			 
4938				       NEXTW 
4938 c3 81 1f			jp macro_next 
493b				endm 
# End of macro NEXTW
493b			 
493b			.CHR: 
493b				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
493b 4d				db WORD_SYS_CORE+57             
493c 77 49			dw .ENDSTR            
493e 04				db 3 + 1 
493f .. 00			db "CHR",0              
4943				endm 
# End of macro CWHEAD
4943			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4943					if DEBUG_FORTH_WORDS_KEY 
4943						DMARK "CHR" 
4943 f5				push af  
4944 3a 58 49			ld a, (.dmark)  
4947 32 65 ee			ld (debug_mark),a  
494a 3a 59 49			ld a, (.dmark+1)  
494d 32 66 ee			ld (debug_mark+1),a  
4950 3a 5a 49			ld a, (.dmark+2)  
4953 32 67 ee			ld (debug_mark+2),a  
4956 18 03			jr .pastdmark  
4958 ..			.dmark: db "CHR"  
495b f1			.pastdmark: pop af  
495c			endm  
# End of macro DMARK
495c						CALLMONITOR 
495c cd 6f ee			call debug_vector  
495f				endm  
# End of macro CALLMONITOR
495f					endif 
495f					FORTH_DSP_VALUEHL 
495f cd 95 1d			call macro_dsp_valuehl 
4962				endm 
# End of macro FORTH_DSP_VALUEHL
4962			 
4962					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4962 cd 4d 1e			call macro_forth_dsp_pop 
4965				endm 
# End of macro FORTH_DSP_POP
4965			 
4965					; save asci byte as a zero term string and push string 
4965			 
4965 7d					ld a,l 
4966 32 bb e2				ld (scratch), a 
4969			 
4969 3e 00				ld a, 0 
496b 32 bc e2				ld (scratch+1), a 
496e			 
496e 21 bb e2				ld hl, scratch 
4971 cd fe 1b				call forth_push_str 
4974			 
4974			 
4974				       NEXTW 
4974 c3 81 1f			jp macro_next 
4977				endm 
# End of macro NEXTW
4977			 
4977			 
4977			 
4977			 
4977			.ENDSTR: 
4977			; eof 
4977			 
# End of file forth_words_str.asm
4977			include "forth_words_key.asm" 
4977			 
4977			; | ## Keyboard Words 
4977			 
4977			.KEY: 
4977				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
4977 3e				db WORD_SYS_CORE+42             
4978 a7 49			dw .KEYDB            
497a 04				db 3 + 1 
497b .. 00			db "KEY",0              
497f				endm 
# End of macro CWHEAD
497f			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
497f			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
497f			; | | Can use something like this to process: 
497f			; | | > repeat active . key ?dup if emit then #1 until  
497f			 
497f					if DEBUG_FORTH_WORDS_KEY 
497f						DMARK "KEY" 
497f f5				push af  
4980 3a 94 49			ld a, (.dmark)  
4983 32 65 ee			ld (debug_mark),a  
4986 3a 95 49			ld a, (.dmark+1)  
4989 32 66 ee			ld (debug_mark+1),a  
498c 3a 96 49			ld a, (.dmark+2)  
498f 32 67 ee			ld (debug_mark+2),a  
4992 18 03			jr .pastdmark  
4994 ..			.dmark: db "KEY"  
4997 f1			.pastdmark: pop af  
4998			endm  
# End of macro DMARK
4998						CALLMONITOR 
4998 cd 6f ee			call debug_vector  
499b				endm  
# End of macro CALLMONITOR
499b					endif 
499b			; TODO currently waits 
499b cd e1 60				call cinndb 
499e					;call cin_wait 
499e 6f					ld l, a 
499f 26 00				ld h, 0 
49a1 cd 90 1b				call forth_push_numhl 
49a4					NEXTW 
49a4 c3 81 1f			jp macro_next 
49a7				endm 
# End of macro NEXTW
49a7			.KEYDB: 
49a7				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
49a7 3e				db WORD_SYS_CORE+42             
49a8 d9 49			dw .WAITK            
49aa 06				db 5 + 1 
49ab .. 00			db "KEYDB",0              
49b1				endm 
# End of macro CWHEAD
49b1			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
49b1			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
49b1			; | | Can use something like this to process: 
49b1			; | | > repeat active . key ?dup if emit then #1 until  
49b1			 
49b1					if DEBUG_FORTH_WORDS_KEY 
49b1						DMARK "KEB" 
49b1 f5				push af  
49b2 3a c6 49			ld a, (.dmark)  
49b5 32 65 ee			ld (debug_mark),a  
49b8 3a c7 49			ld a, (.dmark+1)  
49bb 32 66 ee			ld (debug_mark+1),a  
49be 3a c8 49			ld a, (.dmark+2)  
49c1 32 67 ee			ld (debug_mark+2),a  
49c4 18 03			jr .pastdmark  
49c6 ..			.dmark: db "KEB"  
49c9 f1			.pastdmark: pop af  
49ca			endm  
# End of macro DMARK
49ca						CALLMONITOR 
49ca cd 6f ee			call debug_vector  
49cd				endm  
# End of macro CALLMONITOR
49cd					endif 
49cd			; TODO currently waits 
49cd cd e1 60				call cin 
49d0					;call cin_wait 
49d0 6f					ld l, a 
49d1 26 00				ld h, 0 
49d3 cd 90 1b				call forth_push_numhl 
49d6					NEXTW 
49d6 c3 81 1f			jp macro_next 
49d9				endm 
# End of macro NEXTW
49d9			.WAITK: 
49d9				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
49d9 3f				db WORD_SYS_CORE+43             
49da 0b 4a			dw .ACCEPT            
49dc 06				db 5 + 1 
49dd .. 00			db "WAITK",0              
49e3				endm 
# End of macro CWHEAD
49e3			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
49e3					if DEBUG_FORTH_WORDS_KEY 
49e3						DMARK "WAI" 
49e3 f5				push af  
49e4 3a f8 49			ld a, (.dmark)  
49e7 32 65 ee			ld (debug_mark),a  
49ea 3a f9 49			ld a, (.dmark+1)  
49ed 32 66 ee			ld (debug_mark+1),a  
49f0 3a fa 49			ld a, (.dmark+2)  
49f3 32 67 ee			ld (debug_mark+2),a  
49f6 18 03			jr .pastdmark  
49f8 ..			.dmark: db "WAI"  
49fb f1			.pastdmark: pop af  
49fc			endm  
# End of macro DMARK
49fc						CALLMONITOR 
49fc cd 6f ee			call debug_vector  
49ff				endm  
# End of macro CALLMONITOR
49ff					endif 
49ff cd d9 60				call cin_wait 
4a02 6f					ld l, a 
4a03 26 00				ld h, 0 
4a05 cd 90 1b				call forth_push_numhl 
4a08					NEXTW 
4a08 c3 81 1f			jp macro_next 
4a0b				endm 
# End of macro NEXTW
4a0b			.ACCEPT: 
4a0b				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4a0b 40				db WORD_SYS_CORE+44             
4a0c 69 4a			dw .EDIT            
4a0e 07				db 6 + 1 
4a0f .. 00			db "ACCEPT",0              
4a16				endm 
# End of macro CWHEAD
4a16			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4a16					; TODO crashes on push 
4a16					if DEBUG_FORTH_WORDS_KEY 
4a16						DMARK "ACC" 
4a16 f5				push af  
4a17 3a 2b 4a			ld a, (.dmark)  
4a1a 32 65 ee			ld (debug_mark),a  
4a1d 3a 2c 4a			ld a, (.dmark+1)  
4a20 32 66 ee			ld (debug_mark+1),a  
4a23 3a 2d 4a			ld a, (.dmark+2)  
4a26 32 67 ee			ld (debug_mark+2),a  
4a29 18 03			jr .pastdmark  
4a2b ..			.dmark: db "ACC"  
4a2e f1			.pastdmark: pop af  
4a2f			endm  
# End of macro DMARK
4a2f						CALLMONITOR 
4a2f cd 6f ee			call debug_vector  
4a32				endm  
# End of macro CALLMONITOR
4a32					endif 
4a32 21 b9 e4				ld hl, os_input 
4a35 3e 00				ld a, 0 
4a37 77					ld (hl),a 
4a38 3a 58 ea				ld a,(f_cursor_ptr) 
4a3b 16 64				ld d, 100 
4a3d 0e 00				ld c, 0 
4a3f 1e 28				ld e, 40 
4a41 cd 22 0e				call input_str 
4a44					; TODO perhaps do a type check and wrap in quotes if not a number 
4a44 21 b9 e4				ld hl, os_input 
4a47					if DEBUG_FORTH_WORDS 
4a47						DMARK "AC1" 
4a47 f5				push af  
4a48 3a 5c 4a			ld a, (.dmark)  
4a4b 32 65 ee			ld (debug_mark),a  
4a4e 3a 5d 4a			ld a, (.dmark+1)  
4a51 32 66 ee			ld (debug_mark+1),a  
4a54 3a 5e 4a			ld a, (.dmark+2)  
4a57 32 67 ee			ld (debug_mark+2),a  
4a5a 18 03			jr .pastdmark  
4a5c ..			.dmark: db "AC1"  
4a5f f1			.pastdmark: pop af  
4a60			endm  
# End of macro DMARK
4a60						CALLMONITOR 
4a60 cd 6f ee			call debug_vector  
4a63				endm  
# End of macro CALLMONITOR
4a63					endif 
4a63 cd fe 1b				call forth_push_str 
4a66					NEXTW 
4a66 c3 81 1f			jp macro_next 
4a69				endm 
# End of macro NEXTW
4a69			 
4a69			.EDIT: 
4a69				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4a69 40				db WORD_SYS_CORE+44             
4a6a 0b 4b			dw .DEDIT            
4a6c 05				db 4 + 1 
4a6d .. 00			db "EDIT",0              
4a72				endm 
# End of macro CWHEAD
4a72			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4a72			 
4a72					; TODO does not copy from stack 
4a72					if DEBUG_FORTH_WORDS_KEY 
4a72						DMARK "EDT" 
4a72 f5				push af  
4a73 3a 87 4a			ld a, (.dmark)  
4a76 32 65 ee			ld (debug_mark),a  
4a79 3a 88 4a			ld a, (.dmark+1)  
4a7c 32 66 ee			ld (debug_mark+1),a  
4a7f 3a 89 4a			ld a, (.dmark+2)  
4a82 32 67 ee			ld (debug_mark+2),a  
4a85 18 03			jr .pastdmark  
4a87 ..			.dmark: db "EDT"  
4a8a f1			.pastdmark: pop af  
4a8b			endm  
# End of macro DMARK
4a8b						CALLMONITOR 
4a8b cd 6f ee			call debug_vector  
4a8e				endm  
# End of macro CALLMONITOR
4a8e					endif 
4a8e			 
4a8e					;FORTH_DSP 
4a8e					FORTH_DSP_VALUEHL 
4a8e cd 95 1d			call macro_dsp_valuehl 
4a91				endm 
# End of macro FORTH_DSP_VALUEHL
4a91			;		inc hl    ; TODO do type check 
4a91			 
4a91			;		call get_word_hl 
4a91 e5					push hl 
4a92					if DEBUG_FORTH_WORDS 
4a92						DMARK "EDp" 
4a92 f5				push af  
4a93 3a a7 4a			ld a, (.dmark)  
4a96 32 65 ee			ld (debug_mark),a  
4a99 3a a8 4a			ld a, (.dmark+1)  
4a9c 32 66 ee			ld (debug_mark+1),a  
4a9f 3a a9 4a			ld a, (.dmark+2)  
4aa2 32 67 ee			ld (debug_mark+2),a  
4aa5 18 03			jr .pastdmark  
4aa7 ..			.dmark: db "EDp"  
4aaa f1			.pastdmark: pop af  
4aab			endm  
# End of macro DMARK
4aab						CALLMONITOR 
4aab cd 6f ee			call debug_vector  
4aae				endm  
# End of macro CALLMONITOR
4aae					endif 
4aae				;	ld a, 0 
4aae cd 5b 11				call strlenz 
4ab1 23					inc hl 
4ab2			 
4ab2 06 00				ld b, 0 
4ab4 4d					ld c, l 
4ab5			 
4ab5 e1					pop hl 
4ab6 11 b9 e4				ld de, os_input 
4ab9					if DEBUG_FORTH_WORDS_KEY 
4ab9						DMARK "EDc" 
4ab9 f5				push af  
4aba 3a ce 4a			ld a, (.dmark)  
4abd 32 65 ee			ld (debug_mark),a  
4ac0 3a cf 4a			ld a, (.dmark+1)  
4ac3 32 66 ee			ld (debug_mark+1),a  
4ac6 3a d0 4a			ld a, (.dmark+2)  
4ac9 32 67 ee			ld (debug_mark+2),a  
4acc 18 03			jr .pastdmark  
4ace ..			.dmark: db "EDc"  
4ad1 f1			.pastdmark: pop af  
4ad2			endm  
# End of macro DMARK
4ad2						CALLMONITOR 
4ad2 cd 6f ee			call debug_vector  
4ad5				endm  
# End of macro CALLMONITOR
4ad5					endif 
4ad5 ed b0				ldir 
4ad7			 
4ad7			 
4ad7 21 b9 e4				ld hl, os_input 
4ada					;ld a, 0 
4ada					;ld (hl),a 
4ada 3a 58 ea				ld a,(f_cursor_ptr) 
4add 16 64				ld d, 100 
4adf 0e 00				ld c, 0 
4ae1 1e 28				ld e, 40 
4ae3 cd 22 0e				call input_str 
4ae6					; TODO perhaps do a type check and wrap in quotes if not a number 
4ae6 21 b9 e4				ld hl, os_input 
4ae9					if DEBUG_FORTH_WORDS 
4ae9						DMARK "ED1" 
4ae9 f5				push af  
4aea 3a fe 4a			ld a, (.dmark)  
4aed 32 65 ee			ld (debug_mark),a  
4af0 3a ff 4a			ld a, (.dmark+1)  
4af3 32 66 ee			ld (debug_mark+1),a  
4af6 3a 00 4b			ld a, (.dmark+2)  
4af9 32 67 ee			ld (debug_mark+2),a  
4afc 18 03			jr .pastdmark  
4afe ..			.dmark: db "ED1"  
4b01 f1			.pastdmark: pop af  
4b02			endm  
# End of macro DMARK
4b02						CALLMONITOR 
4b02 cd 6f ee			call debug_vector  
4b05				endm  
# End of macro CALLMONITOR
4b05					endif 
4b05 cd fe 1b				call forth_push_str 
4b08					NEXTW 
4b08 c3 81 1f			jp macro_next 
4b0b				endm 
# End of macro NEXTW
4b0b			 
4b0b			.DEDIT: 
4b0b				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4b0b 40				db WORD_SYS_CORE+44             
4b0c 6d 4b			dw .ENDKEY            
4b0e 06				db 5 + 1 
4b0f .. 00			db "DEDIT",0              
4b15				endm 
# End of macro CWHEAD
4b15			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
4b15			 
4b15					; TODO does not copy from stack 
4b15					if DEBUG_FORTH_WORDS_KEY 
4b15						DMARK "DED" 
4b15 f5				push af  
4b16 3a 2a 4b			ld a, (.dmark)  
4b19 32 65 ee			ld (debug_mark),a  
4b1c 3a 2b 4b			ld a, (.dmark+1)  
4b1f 32 66 ee			ld (debug_mark+1),a  
4b22 3a 2c 4b			ld a, (.dmark+2)  
4b25 32 67 ee			ld (debug_mark+2),a  
4b28 18 03			jr .pastdmark  
4b2a ..			.dmark: db "DED"  
4b2d f1			.pastdmark: pop af  
4b2e			endm  
# End of macro DMARK
4b2e						CALLMONITOR 
4b2e cd 6f ee			call debug_vector  
4b31				endm  
# End of macro CALLMONITOR
4b31					endif 
4b31			 
4b31					;FORTH_DSP 
4b31					FORTH_DSP_VALUEHL 
4b31 cd 95 1d			call macro_dsp_valuehl 
4b34				endm 
# End of macro FORTH_DSP_VALUEHL
4b34			;		inc hl    ; TODO do type check 
4b34			 
4b34			;		call get_word_hl 
4b34 e5					push hl 
4b35 e5					push hl 
4b36					FORTH_DSP_POP 
4b36 cd 4d 1e			call macro_forth_dsp_pop 
4b39				endm 
# End of macro FORTH_DSP_POP
4b39 e1					pop hl 
4b3a					if DEBUG_FORTH_WORDS 
4b3a						DMARK "EDp" 
4b3a f5				push af  
4b3b 3a 4f 4b			ld a, (.dmark)  
4b3e 32 65 ee			ld (debug_mark),a  
4b41 3a 50 4b			ld a, (.dmark+1)  
4b44 32 66 ee			ld (debug_mark+1),a  
4b47 3a 51 4b			ld a, (.dmark+2)  
4b4a 32 67 ee			ld (debug_mark+2),a  
4b4d 18 03			jr .pastdmark  
4b4f ..			.dmark: db "EDp"  
4b52 f1			.pastdmark: pop af  
4b53			endm  
# End of macro DMARK
4b53						CALLMONITOR 
4b53 cd 6f ee			call debug_vector  
4b56				endm  
# End of macro CALLMONITOR
4b56					endif 
4b56				;	ld a, 0 
4b56 cd 5b 11				call strlenz 
4b59 23					inc hl 
4b5a			 
4b5a 06 00				ld b, 0 
4b5c 4d					ld c, l 
4b5d			 
4b5d e1					pop hl 
4b5e			 
4b5e					;ld a, 0 
4b5e					;ld (hl),a 
4b5e 3a 58 ea				ld a,(f_cursor_ptr) 
4b61 16 64				ld d, 100 
4b63 0e 00				ld c, 0 
4b65 1e 28				ld e, 40 
4b67 cd 22 0e				call input_str 
4b6a					; TODO perhaps do a type check and wrap in quotes if not a number 
4b6a					NEXTW 
4b6a c3 81 1f			jp macro_next 
4b6d				endm 
# End of macro NEXTW
4b6d			 
4b6d			 
4b6d			.ENDKEY: 
4b6d			; eof 
4b6d			 
# End of file forth_words_key.asm
4b6d			include "forth_words_const.asm" 
4b6d			 
4b6d			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4b6d			 
4b6d			 
4b6d			.SPITIME: 
4b6d				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4b6d 77				db WORD_SYS_CORE+99             
4b6e 82 4b			dw .VA            
4b70 08				db 7 + 1 
4b71 .. 00			db "SPITIME",0              
4b79				endm 
# End of macro CWHEAD
4b79			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4b79			; 
4b79			; | | If using BANK devices then leave as is. 
4b79			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4b79			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4b79			 
4b79 21 5e ea				ld hl, spi_clktime  
4b7c cd 90 1b				call forth_push_numhl 
4b7f			 
4b7f					NEXTW 
4b7f c3 81 1f			jp macro_next 
4b82				endm 
# End of macro NEXTW
4b82			 
4b82			 
4b82			.VA: 
4b82				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4b82 77				db WORD_SYS_CORE+99             
4b83 92 4b			dw .SYMBOL            
4b85 03				db 2 + 1 
4b86 .. 00			db "VA",0              
4b89				endm 
# End of macro CWHEAD
4b89			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4b89 21 22 ea				ld hl, cli_var_array 
4b8c cd 90 1b				call forth_push_numhl 
4b8f			 
4b8f					NEXTW 
4b8f c3 81 1f			jp macro_next 
4b92				endm 
# End of macro NEXTW
4b92			 
4b92			.SYMBOL: 
4b92				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4b92 77				db WORD_SYS_CORE+99             
4b93 9c 4c			dw .ENDCONST            
4b95 07				db 6 + 1 
4b96 .. 00			db "SYMBOL",0              
4b9d				endm 
# End of macro CWHEAD
4b9d			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4b9d			; | 
4b9d			; | | The value is the number reference and the final address is pushed to stack 
4b9d			 
4b9d			; | | ``` 
4b9d			; | | dw sym_table 
4b9d			; | | dw nmi_vector 
4b9d			; | | dw cli_autodisplay 
4b9d			; | | dw cli_data_sp 
4b9d			; | | dw cli_data_stack 
4b9d			; | | dw cli_loop_sp 
4b9d			; | | dw cli_loop_stack 
4b9d			; | | dw cli_var_array 
4b9d			; | | dw cursor_col 
4b9d			; | | dw cursor_ptr 
4b9d			; | | ; 10 
4b9d			; | | dw cursor_row 
4b9d			; | | dw debug_mark 
4b9d			; | | dw display_fb0 
4b9d			; | | dw display_fb1 
4b9d			; | | dw display_fb2 
4b9d			; | | dw display_fb3 
4b9d			; | | dw display_fb_active 
4b9d			; | | dw execscratch 
4b9d			; | | dw f_cursor_ptr 
4b9d			; | | dw hardware_word 
4b9d			; | | ;20 
4b9d			; | | dw input_at_cursor 
4b9d			; | | dw input_at_pos 
4b9d			; | | dw input_cur_flash 
4b9d			; | | dw input_cur_onoff 
4b9d			; | | dw input_cursor 
4b9d			; | | dw input_display_size 
4b9d			; | | dw input_len 
4b9d			; | | dw input_ptr 
4b9d			; | | dw input_size 
4b9d			; | | dw input_start 
4b9d			; | | ; 30 
4b9d			; | | dw input_str 
4b9d			; | | dw input_under_cursor 
4b9d			; | | dw os_cli_cmd 
4b9d			; | | dw os_cur_ptr 
4b9d			; | | dw os_current_i 
4b9d			; | | dw os_input 
4b9d			; | | dw os_last_cmd 
4b9d			; | | dw os_last_new_uword 
4b9d			; | | dw debug_vector 
4b9d			; | | dw os_view_hl 
4b9d			; | | ;40 
4b9d			; | | dw os_word_scratch 
4b9d			; | | dw portbctl 
4b9d			; | | dw portbdata 
4b9d			; | | dw spi_cartdev 
4b9d			; | | dw spi_cartdev2 
4b9d			; | | dw spi_clktime 
4b9d			; | | dw spi_device 
4b9d			; | | dw spi_device_id 
4b9d			; | | dw spi_portbyte 
4b9d			; | | dw stackstore 
4b9d			; | | ; 50 
4b9d			; | | if STORAGE_SE 
4b9d			; | | dw storage_actl 
4b9d			; | | dw storage_adata 
4b9d			; | | else 
4b9d			; | | dw 0 
4b9d			; | | dw 0 
4b9d			; | | endif 
4b9d			; | | dw storage_append 
4b9d			; | | if STORAGE_SE 
4b9d			; | | dw storage_bctl 
4b9d			; | | else 
4b9d			; | | dw 0 
4b9d			; | | endif 
4b9d			; | | dw store_bank_active 
4b9d			; | | dw store_filecache 
4b9d			; | | dw store_longread 
4b9d			; | | dw store_openaddr 
4b9d			; | | dw store_openext 
4b9d			; | | dw store_openmaxext 
4b9d			; | | ; 60 
4b9d			; | | dw store_page 
4b9d			; | | dw store_readbuf 
4b9d			; | | dw store_readcont 
4b9d			; | | dw store_readptr 
4b9d			; | | dw store_tmpext 
4b9d			; | | dw store_tmpid 
4b9d			; | | dw store_tmppageid 
4b9d			; | | dw malloc 
4b9d			; | | dw free 
4b9d			; | | dw cin 
4b9d			; | | ; 70 
4b9d			; | | dw cin_wait 
4b9d			; | | dw forth_push_numhl 
4b9d			; | | dw forth_push_str 
4b9d			; | | ``` 
4b9d			 
4b9d					if DEBUG_FORTH_WORDS_KEY 
4b9d						DMARK "SYM" 
4b9d f5				push af  
4b9e 3a b2 4b			ld a, (.dmark)  
4ba1 32 65 ee			ld (debug_mark),a  
4ba4 3a b3 4b			ld a, (.dmark+1)  
4ba7 32 66 ee			ld (debug_mark+1),a  
4baa 3a b4 4b			ld a, (.dmark+2)  
4bad 32 67 ee			ld (debug_mark+2),a  
4bb0 18 03			jr .pastdmark  
4bb2 ..			.dmark: db "SYM"  
4bb5 f1			.pastdmark: pop af  
4bb6			endm  
# End of macro DMARK
4bb6						CALLMONITOR 
4bb6 cd 6f ee			call debug_vector  
4bb9				endm  
# End of macro CALLMONITOR
4bb9					endif 
4bb9			 
4bb9					FORTH_DSP_VALUEHL 
4bb9 cd 95 1d			call macro_dsp_valuehl 
4bbc				endm 
# End of macro FORTH_DSP_VALUEHL
4bbc			 
4bbc 7d					ld a, l     
4bbd			 
4bbd			 
4bbd					if DEBUG_FORTH_WORDS 
4bbd						DMARK "SY1" 
4bbd f5				push af  
4bbe 3a d2 4b			ld a, (.dmark)  
4bc1 32 65 ee			ld (debug_mark),a  
4bc4 3a d3 4b			ld a, (.dmark+1)  
4bc7 32 66 ee			ld (debug_mark+1),a  
4bca 3a d4 4b			ld a, (.dmark+2)  
4bcd 32 67 ee			ld (debug_mark+2),a  
4bd0 18 03			jr .pastdmark  
4bd2 ..			.dmark: db "SY1"  
4bd5 f1			.pastdmark: pop af  
4bd6			endm  
# End of macro DMARK
4bd6						CALLMONITOR 
4bd6 cd 6f ee			call debug_vector  
4bd9				endm  
# End of macro CALLMONITOR
4bd9					endif 
4bd9					 
4bd9 f5					push af	 
4bda					FORTH_DSP_POP 
4bda cd 4d 1e			call macro_forth_dsp_pop 
4bdd				endm 
# End of macro FORTH_DSP_POP
4bdd f1					pop af 
4bde			 
4bde cb 27				sla a  
4be0				 
4be0					 
4be0					if DEBUG_FORTH_WORDS 
4be0						DMARK "SY" 
4be0 f5				push af  
4be1 3a f5 4b			ld a, (.dmark)  
4be4 32 65 ee			ld (debug_mark),a  
4be7 3a f6 4b			ld a, (.dmark+1)  
4bea 32 66 ee			ld (debug_mark+1),a  
4bed 3a f7 4b			ld a, (.dmark+2)  
4bf0 32 67 ee			ld (debug_mark+2),a  
4bf3 18 02			jr .pastdmark  
4bf5 ..			.dmark: db "SY"  
4bf7 f1			.pastdmark: pop af  
4bf8			endm  
# End of macro DMARK
4bf8						CALLMONITOR 
4bf8 cd 6f ee			call debug_vector  
4bfb				endm  
# End of macro CALLMONITOR
4bfb					endif 
4bfb			 
4bfb 21 0a 4c				ld hl, sym_table 
4bfe cd f5 0d				call addatohl 
4c01 cd 03 1f				call loadwordinhl 
4c04 cd 90 1b				call forth_push_numhl 
4c07			 
4c07			 
4c07				       NEXTW 
4c07 c3 81 1f			jp macro_next 
4c0a				endm 
# End of macro NEXTW
4c0a			 
4c0a			sym_table: 
4c0a			 
4c0a			; 0 
4c0a 0a 4c		dw sym_table 
4c0c 72 ee		dw nmi_vector 
4c0e 36 ea		dw cli_autodisplay 
4c10 e8 e9		dw cli_data_sp 
4c12 22 e8		dw cli_data_stack 
4c14 ea e9		dw cli_loop_sp 
4c16 24 e9		dw cli_loop_stack 
4c18 22 ea		dw cli_var_array 
4c1a bf eb		dw cursor_col 
4c1c bd eb		dw cursor_ptr 
4c1e			; 10 
4c1e be eb		dw cursor_row 
4c20 65 ee		dw debug_mark 
4c22 ab ed		dw display_fb0 
4c24 0a ed		dw display_fb1 
4c26 c8 eb		dw display_fb2 
4c28 69 ec		dw display_fb3 
4c2a c6 eb		dw display_fb_active 
4c2c ba e3		dw execscratch 
4c2e 58 ea		dw f_cursor_ptr 
4c30 75 ee		dw hardware_word 
4c32			;20 
4c32 5c ee		dw input_at_cursor 
4c34 5e ee		dw input_at_pos 
4c36 5a ee		dw input_cur_flash 
4c38 59 ee		dw input_cur_onoff 
4c3a 4f ee		dw input_cursor 
4c3c 5f ee		dw input_display_size 
4c3e 54 ee		dw input_len 
4c40 63 ee		dw input_ptr 
4c42 60 ee		dw input_size 
4c44 61 ee		dw input_start 
4c46			; 30 
4c46 22 0e		dw input_str 
4c48 5d ee		dw input_under_cursor 
4c4a e2 e5		dw os_cli_cmd 
4c4c de e5		dw os_cur_ptr 
4c4e e0 e5		dw os_current_i 
4c50 b9 e4		dw os_input 
4c52 e1 e6		dw os_last_cmd 
4c54 b8 e5		dw os_last_new_uword 
4c56 6f ee		dw debug_vector 
4c58 9d e2		dw os_view_hl 
4c5a			;40 
4c5a c0 e5		dw os_word_scratch 
4c5c c3 00		dw portbctl 
4c5e c1 00		dw portbdata 
4c60 5d ea		dw spi_cartdev 
4c62 5c ea		dw spi_cartdev2 
4c64 5e ea		dw spi_clktime 
4c66 5a ea		dw spi_device 
4c68 59 ea		dw spi_device_id 
4c6a 5b ea		dw spi_portbyte 
4c6c a1 eb		dw stackstore 
4c6e			; 50 
4c6e			if STORAGE_SE 
4c6e			dw storage_actl 
4c6e			dw storage_adata 
4c6e			else 
4c6e 00 00		dw 0 
4c70 00 00		dw 0 
4c72			endif 
4c72 77 09		dw storage_append 
4c74			if STORAGE_SE 
4c74			dw storage_bctl 
4c74			else 
4c74 00 00		dw 0 
4c76			endif 
4c76 8d eb		dw store_bank_active 
4c78 61 ea		dw store_filecache 
4c7a 6f ea		dw store_longread 
4c7c 65 ea		dw store_openaddr 
4c7e 64 ea		dw store_openext 
4c80 63 ea		dw store_openmaxext 
4c82			; 60 
4c82 74 ea		dw store_page 
4c84 70 ea		dw store_readbuf 
4c86 67 ea		dw store_readcont 
4c88 72 ea		dw store_readptr 
4c8a 67 ea		dw store_tmpext 
4c8c 68 ea		dw store_tmpid 
4c8e 5f ea		dw store_tmppageid 
4c90 d0 11		dw malloc 
4c92 9a 12		dw free 
4c94 e1 60		dw cin 
4c96			; 70 
4c96 d9 60		dw cin_wait 
4c98 90 1b		dw forth_push_numhl 
4c9a fe 1b		dw forth_push_str 
4c9c			 
4c9c			 
4c9c			.ENDCONST: 
4c9c			 
4c9c			; eof 
4c9c			 
4c9c			 
# End of file forth_words_const.asm
4c9c			 
4c9c			if STORAGE_SE 
4c9c			   	include "forth_words_storage.asm" 
4c9c			endif 
4c9c				include "forth_words_device.asm" 
4c9c			; Device related words 
4c9c			 
4c9c			; | ## Device Words 
4c9c			 
4c9c			;if SOUND_ENABLE 
4c9c			;.NOTE: 
4c9c			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4c9c			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
4c9c			;		if DEBUG_FORTH_WORDS_KEY 
4c9c			;			DMARK "NTE" 
4c9c			;			CALLMONITOR 
4c9c			;		endif 
4c9c			; 
4c9c			;	 
4c9c			; 
4c9c			;		NEXTW 
4c9c			;.AFTERSOUND: 
4c9c			;endif 
4c9c			 
4c9c			 
4c9c			USE_GPIO: equ 0 
4c9c			 
4c9c			if USE_GPIO 
4c9c			.GP1: 
4c9c				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4c9c			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
4c9c					NEXTW 
4c9c			.GP2: 
4c9c				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4c9c			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
4c9c			 
4c9c					NEXTW 
4c9c			 
4c9c			.GP3: 
4c9c				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4c9c			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
4c9c			 
4c9c					NEXTW 
4c9c			 
4c9c			.GP4: 
4c9c				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4c9c			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
4c9c			 
4c9c					NEXTW 
4c9c			.SIN: 
4c9c			 
4c9c			 
4c9c			endif 
4c9c			 
4c9c			 
4c9c				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4c9c 33				db WORD_SYS_CORE+31             
4c9d d1 4c			dw .SOUT            
4c9f 03				db 2 + 1 
4ca0 .. 00			db "IN",0              
4ca3				endm 
# End of macro CWHEAD
4ca3			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4ca3					if DEBUG_FORTH_WORDS_KEY 
4ca3						DMARK "IN." 
4ca3 f5				push af  
4ca4 3a b8 4c			ld a, (.dmark)  
4ca7 32 65 ee			ld (debug_mark),a  
4caa 3a b9 4c			ld a, (.dmark+1)  
4cad 32 66 ee			ld (debug_mark+1),a  
4cb0 3a ba 4c			ld a, (.dmark+2)  
4cb3 32 67 ee			ld (debug_mark+2),a  
4cb6 18 03			jr .pastdmark  
4cb8 ..			.dmark: db "IN."  
4cbb f1			.pastdmark: pop af  
4cbc			endm  
# End of macro DMARK
4cbc						CALLMONITOR 
4cbc cd 6f ee			call debug_vector  
4cbf				endm  
# End of macro CALLMONITOR
4cbf					endif 
4cbf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4cbf cd 95 1d			call macro_dsp_valuehl 
4cc2				endm 
# End of macro FORTH_DSP_VALUEHL
4cc2			 
4cc2 e5					push hl 
4cc3			 
4cc3					; destroy value TOS 
4cc3			 
4cc3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4cc3 cd 4d 1e			call macro_forth_dsp_pop 
4cc6				endm 
# End of macro FORTH_DSP_POP
4cc6			 
4cc6					; one value on hl get other one back 
4cc6			 
4cc6 c1					pop bc 
4cc7			 
4cc7					; do the sub 
4cc7			;		ex de, hl 
4cc7			 
4cc7 ed 68				in l,(c) 
4cc9			 
4cc9					; save it 
4cc9			 
4cc9 26 00				ld h,0 
4ccb			 
4ccb					; TODO push value back onto stack for another op etc 
4ccb			 
4ccb cd 90 1b				call forth_push_numhl 
4cce					NEXTW 
4cce c3 81 1f			jp macro_next 
4cd1				endm 
# End of macro NEXTW
4cd1			.SOUT: 
4cd1				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4cd1 34				db WORD_SYS_CORE+32             
4cd2 24 4d			dw .SPIO            
4cd4 04				db 3 + 1 
4cd5 .. 00			db "OUT",0              
4cd9				endm 
# End of macro CWHEAD
4cd9			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4cd9					if DEBUG_FORTH_WORDS_KEY 
4cd9						DMARK "OUT" 
4cd9 f5				push af  
4cda 3a ee 4c			ld a, (.dmark)  
4cdd 32 65 ee			ld (debug_mark),a  
4ce0 3a ef 4c			ld a, (.dmark+1)  
4ce3 32 66 ee			ld (debug_mark+1),a  
4ce6 3a f0 4c			ld a, (.dmark+2)  
4ce9 32 67 ee			ld (debug_mark+2),a  
4cec 18 03			jr .pastdmark  
4cee ..			.dmark: db "OUT"  
4cf1 f1			.pastdmark: pop af  
4cf2			endm  
# End of macro DMARK
4cf2						CALLMONITOR 
4cf2 cd 6f ee			call debug_vector  
4cf5				endm  
# End of macro CALLMONITOR
4cf5					endif 
4cf5			 
4cf5					; get port 
4cf5			 
4cf5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4cf5 cd 95 1d			call macro_dsp_valuehl 
4cf8				endm 
# End of macro FORTH_DSP_VALUEHL
4cf8			 
4cf8 e5					push hl 
4cf9			 
4cf9					; destroy value TOS 
4cf9			 
4cf9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4cf9 cd 4d 1e			call macro_forth_dsp_pop 
4cfc				endm 
# End of macro FORTH_DSP_POP
4cfc			 
4cfc					; get byte to send 
4cfc			 
4cfc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4cfc cd 95 1d			call macro_dsp_valuehl 
4cff				endm 
# End of macro FORTH_DSP_VALUEHL
4cff			 
4cff			;		push hl 
4cff			 
4cff					; destroy value TOS 
4cff			 
4cff					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4cff cd 4d 1e			call macro_forth_dsp_pop 
4d02				endm 
# End of macro FORTH_DSP_POP
4d02			 
4d02					; one value on hl get other one back 
4d02			 
4d02			;		pop hl 
4d02			 
4d02 c1					pop bc 
4d03			 
4d03					if DEBUG_FORTH_WORDS 
4d03						DMARK "OUT" 
4d03 f5				push af  
4d04 3a 18 4d			ld a, (.dmark)  
4d07 32 65 ee			ld (debug_mark),a  
4d0a 3a 19 4d			ld a, (.dmark+1)  
4d0d 32 66 ee			ld (debug_mark+1),a  
4d10 3a 1a 4d			ld a, (.dmark+2)  
4d13 32 67 ee			ld (debug_mark+2),a  
4d16 18 03			jr .pastdmark  
4d18 ..			.dmark: db "OUT"  
4d1b f1			.pastdmark: pop af  
4d1c			endm  
# End of macro DMARK
4d1c						CALLMONITOR 
4d1c cd 6f ee			call debug_vector  
4d1f				endm  
# End of macro CALLMONITOR
4d1f					endif 
4d1f			 
4d1f ed 69				out (c), l 
4d21			 
4d21					NEXTW 
4d21 c3 81 1f			jp macro_next 
4d24				endm 
# End of macro NEXTW
4d24			 
4d24			 
4d24			.SPIO: 
4d24			 
4d24			if STORAGE_SE 
4d24				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4d24			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4d24			 
4d24					call spi_ce_low 
4d24			    NEXTW 
4d24			 
4d24			.SPICEH: 
4d24				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4d24			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4d24			 
4d24					call spi_ce_high 
4d24			    NEXTW 
4d24			 
4d24			 
4d24			.SPIOb: 
4d24			 
4d24				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4d24			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4d24			 
4d24					if DEBUG_FORTH_WORDS_KEY 
4d24						DMARK "SPo" 
4d24						CALLMONITOR 
4d24					endif 
4d24					; get port 
4d24			 
4d24			 
4d24					; get byte to send 
4d24			 
4d24					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d24			 
4d24			;		push hl    ; u1  
4d24			 
4d24					; destroy value TOS 
4d24			 
4d24					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d24			 
4d24					; one value on hl get other one back 
4d24			 
4d24			;		pop hl   ; u2 - addr 
4d24			 
4d24					; TODO Send SPI byte 
4d24			 
4d24			;		push hl 
4d24			;		call spi_ce_low 
4d24			;		pop hl 
4d24					ld a, l 
4d24					call spi_send_byte 
4d24			;		call spi_ce_high 
4d24			 
4d24					NEXTW 
4d24			 
4d24			.SPII: 
4d24				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4d24			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4d24					if DEBUG_FORTH_WORDS_KEY 
4d24						DMARK "SPi" 
4d24						CALLMONITOR 
4d24					endif 
4d24			 
4d24					; TODO Get SPI byte 
4d24			 
4d24					call spi_read_byte 
4d24			 
4d24					if DEBUG_FORTH_WORDS 
4d24						DMARK "Si2" 
4d24						CALLMONITOR 
4d24					endif 
4d24					ld h, 0 
4d24					ld l, a 
4d24					if DEBUG_FORTH_WORDS 
4d24						DMARK "Si3" 
4d24						CALLMONITOR 
4d24					endif 
4d24					call forth_push_numhl 
4d24			 
4d24					NEXTW 
4d24			 
4d24			 
4d24			 
4d24			.SESEL: 
4d24				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4d24			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4d24					if DEBUG_FORTH_WORDS_KEY 
4d24						DMARK "BNK" 
4d24						CALLMONITOR 
4d24					endif 
4d24			 
4d24					ld a, 255 
4d24					ld (spi_cartdev), a 
4d24			 
4d24					; get bank 
4d24			 
4d24					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d24			 
4d24			;		push hl 
4d24			 
4d24					; destroy value TOS 
4d24			 
4d24					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d24			 
4d24					; one value on hl get other one back 
4d24			 
4d24			;		pop hl 
4d24			 
4d24			 
4d24					ld c, SPI_CE_HIGH 
4d24					ld b, '0'    ; human readable bank number 
4d24			 
4d24					ld a, l 
4d24			 
4d24					if DEBUG_FORTH_WORDS 
4d24						DMARK "BNK" 
4d24						CALLMONITOR 
4d24					endif 
4d24			 
4d24					; active low 
4d24			 
4d24					cp 0 
4d24					jr z, .bset 
4d24					cp 1 
4d24					jr nz, .b2 
4d24					res 0, c 
4d24					ld b, '1'    ; human readable bank number 
4d24			.b2:		cp 2 
4d24					jr nz, .b3 
4d24					res 1, c 
4d24					ld b, '2'    ; human readable bank number 
4d24			.b3:		cp 3 
4d24					jr nz, .b4 
4d24					res 2, c 
4d24					ld b, '3'    ; human readable bank number 
4d24			.b4:		cp 4 
4d24					jr nz, .b5 
4d24					res 3, c 
4d24					ld b, '4'    ; human readable bank number 
4d24			.b5:		cp 5 
4d24					jr nz, .bset 
4d24					res 4, c 
4d24					ld b, '5'    ; human readable bank number 
4d24			 
4d24			.bset: 
4d24					ld a, c 
4d24					ld (spi_device),a 
4d24					ld a, b 
4d24					ld (spi_device_id),a 
4d24					if DEBUG_FORTH_WORDS 
4d24						DMARK "BN2" 
4d24						CALLMONITOR 
4d24					endif 
4d24			 
4d24					; set default SPI clk pulse time as disabled for BANK use 
4d24			 
4d24					ld a, 0 
4d24					ld (spi_clktime), a 
4d24			 
4d24					NEXTW 
4d24			 
4d24			.CARTDEV: 
4d24				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4d24			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4d24					if DEBUG_FORTH_WORDS_KEY 
4d24						DMARK "CDV" 
4d24						CALLMONITOR 
4d24					endif 
4d24			 
4d24					; disable se storage bank selection 
4d24			 
4d24					ld a, SPI_CE_HIGH		; ce high 
4d24					ld (spi_device), a 
4d24			 
4d24					; get bank 
4d24			 
4d24					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d24			 
4d24			;		push hl 
4d24			 
4d24					; destroy value TOS 
4d24			 
4d24					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d24			 
4d24					; one value on hl get other one back 
4d24			 
4d24			;		pop hl 
4d24			 
4d24					; active low 
4d24			 
4d24					ld c, 255 
4d24			 
4d24					ld a, l 
4d24					if DEBUG_FORTH_WORDS 
4d24						DMARK "CDV" 
4d24						CALLMONITOR 
4d24					endif 
4d24					cp 0 
4d24					jr z, .cset 
4d24					cp 1 
4d24					jr nz, .c2 
4d24					res 0, c 
4d24			.c2:		cp 2 
4d24					jr nz, .c3 
4d24					res 1, c 
4d24			.c3:		cp 3 
4d24					jr nz, .c4 
4d24					res 2, c 
4d24			.c4:		cp 4 
4d24					jr nz, .c5 
4d24					res 3, c 
4d24			.c5:		cp 5 
4d24					jr nz, .c6 
4d24					res 4, c 
4d24			.c6:		cp 6 
4d24					jr nz, .c7 
4d24					res 5, c 
4d24			.c7:		cp 7 
4d24					jr nz, .c8 
4d24					res 6, c 
4d24			.c8:		cp 8 
4d24					jr nz, .cset 
4d24					res 7, c 
4d24			.cset:		ld a, c 
4d24					ld (spi_cartdev),a 
4d24			 
4d24					if DEBUG_FORTH_WORDS 
4d24						DMARK "CD2" 
4d24						CALLMONITOR 
4d24					endif 
4d24			 
4d24					; set default SPI clk pulse time as 10ms for CARTDEV use 
4d24			 
4d24					ld a, $0a 
4d24					ld (spi_clktime), a 
4d24					NEXTW 
4d24			endif 
4d24			 
4d24			.ENDDEVICE: 
4d24			; eof 
4d24			 
# End of file forth_words_device.asm
4d24			 
4d24			; var handler 
4d24			 
4d24			 
4d24			.VARS: 
4d24				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
4d24 77				db WORD_SYS_CORE+99             
4d25 d5 4d			dw .V0            
4d27 04				db 3 + 1 
4d28 .. 00			db "VAR",0              
4d2c				endm 
# End of macro CWHEAD
4d2c			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
4d2c			;| 
4d2c			;| The variable name should consist of a single letter. e.g. "a" 
4d2c			;! If a full string is passed then only the first char is looked at 
4d2c			;| Any other char could exceed bounds checks!  
4d2c			 
4d2c					if DEBUG_FORTH_WORDS_KEY 
4d2c						DMARK "VAR" 
4d2c f5				push af  
4d2d 3a 41 4d			ld a, (.dmark)  
4d30 32 65 ee			ld (debug_mark),a  
4d33 3a 42 4d			ld a, (.dmark+1)  
4d36 32 66 ee			ld (debug_mark+1),a  
4d39 3a 43 4d			ld a, (.dmark+2)  
4d3c 32 67 ee			ld (debug_mark+2),a  
4d3f 18 03			jr .pastdmark  
4d41 ..			.dmark: db "VAR"  
4d44 f1			.pastdmark: pop af  
4d45			endm  
# End of macro DMARK
4d45						CALLMONITOR 
4d45 cd 6f ee			call debug_vector  
4d48				endm  
# End of macro CALLMONITOR
4d48					endif 
4d48			 
4d48					FORTH_DSP_VALUEHL 
4d48 cd 95 1d			call macro_dsp_valuehl 
4d4b				endm 
# End of macro FORTH_DSP_VALUEHL
4d4b			 
4d4b 7e					ld a, (hl)    ; get first char on of the string 
4d4c			 
4d4c			 
4d4c					if DEBUG_FORTH_WORDS 
4d4c						DMARK "VR1" 
4d4c f5				push af  
4d4d 3a 61 4d			ld a, (.dmark)  
4d50 32 65 ee			ld (debug_mark),a  
4d53 3a 62 4d			ld a, (.dmark+1)  
4d56 32 66 ee			ld (debug_mark+1),a  
4d59 3a 63 4d			ld a, (.dmark+2)  
4d5c 32 67 ee			ld (debug_mark+2),a  
4d5f 18 03			jr .pastdmark  
4d61 ..			.dmark: db "VR1"  
4d64 f1			.pastdmark: pop af  
4d65			endm  
# End of macro DMARK
4d65						CALLMONITOR 
4d65 cd 6f ee			call debug_vector  
4d68				endm  
# End of macro CALLMONITOR
4d68					endif 
4d68					 
4d68 f5					push af	 
4d69					FORTH_DSP_POP 
4d69 cd 4d 1e			call macro_forth_dsp_pop 
4d6c				endm 
# End of macro FORTH_DSP_POP
4d6c f1					pop af 
4d6d			 
4d6d					; convert to upper 
4d6d			 
4d6d cd 6a 10				call to_upper 
4d70					if DEBUG_FORTH_WORDS 
4d70						DMARK "Vaa" 
4d70 f5				push af  
4d71 3a 85 4d			ld a, (.dmark)  
4d74 32 65 ee			ld (debug_mark),a  
4d77 3a 86 4d			ld a, (.dmark+1)  
4d7a 32 66 ee			ld (debug_mark+1),a  
4d7d 3a 87 4d			ld a, (.dmark+2)  
4d80 32 67 ee			ld (debug_mark+2),a  
4d83 18 03			jr .pastdmark  
4d85 ..			.dmark: db "Vaa"  
4d88 f1			.pastdmark: pop af  
4d89			endm  
# End of macro DMARK
4d89						CALLMONITOR 
4d89 cd 6f ee			call debug_vector  
4d8c				endm  
# End of macro CALLMONITOR
4d8c					endif 
4d8c 06 41				ld b, 'A' 
4d8e 90					sub b			; set offset 
4d8f					if DEBUG_FORTH_WORDS 
4d8f						DMARK "Vbb" 
4d8f f5				push af  
4d90 3a a4 4d			ld a, (.dmark)  
4d93 32 65 ee			ld (debug_mark),a  
4d96 3a a5 4d			ld a, (.dmark+1)  
4d99 32 66 ee			ld (debug_mark+1),a  
4d9c 3a a6 4d			ld a, (.dmark+2)  
4d9f 32 67 ee			ld (debug_mark+2),a  
4da2 18 03			jr .pastdmark  
4da4 ..			.dmark: db "Vbb"  
4da7 f1			.pastdmark: pop af  
4da8			endm  
# End of macro DMARK
4da8						CALLMONITOR 
4da8 cd 6f ee			call debug_vector  
4dab				endm  
# End of macro CALLMONITOR
4dab					endif 
4dab cb 27				sla a  
4dad				 
4dad					 
4dad					if DEBUG_FORTH_WORDS 
4dad						DMARK "VR2" 
4dad f5				push af  
4dae 3a c2 4d			ld a, (.dmark)  
4db1 32 65 ee			ld (debug_mark),a  
4db4 3a c3 4d			ld a, (.dmark+1)  
4db7 32 66 ee			ld (debug_mark+1),a  
4dba 3a c4 4d			ld a, (.dmark+2)  
4dbd 32 67 ee			ld (debug_mark+2),a  
4dc0 18 03			jr .pastdmark  
4dc2 ..			.dmark: db "VR2"  
4dc5 f1			.pastdmark: pop af  
4dc6			endm  
# End of macro DMARK
4dc6						CALLMONITOR 
4dc6 cd 6f ee			call debug_vector  
4dc9				endm  
# End of macro CALLMONITOR
4dc9					endif 
4dc9			 
4dc9 21 ee e9				ld hl, cli_var_array2 
4dcc cd f5 0d				call addatohl 
4dcf cd 90 1b				call forth_push_numhl 
4dd2			 
4dd2			 
4dd2				       NEXTW 
4dd2 c3 81 1f			jp macro_next 
4dd5				endm 
# End of macro NEXTW
4dd5			.V0: 
4dd5				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
4dd5 78				db WORD_SYS_CORE+100             
4dd6 ed 4d			dw .V0Q            
4dd8 04				db 3 + 1 
4dd9 .. 00			db "V0!",0              
4ddd				endm 
# End of macro CWHEAD
4ddd			;| V0! ( u1 -- )  Store value to v0  | DONE 
4ddd			 
4ddd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ddd cd 95 1d			call macro_dsp_valuehl 
4de0				endm 
# End of macro FORTH_DSP_VALUEHL
4de0			 
4de0 11 22 ea				ld de, cli_var_array 
4de3			 
4de3 eb					ex de, hl 
4de4 73					ld (hl), e 
4de5 23					inc hl 
4de6 72					ld (hl), d 
4de7			 
4de7					; destroy value TOS 
4de7			 
4de7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4de7 cd 4d 1e			call macro_forth_dsp_pop 
4dea				endm 
# End of macro FORTH_DSP_POP
4dea			 
4dea				       NEXTW 
4dea c3 81 1f			jp macro_next 
4ded				endm 
# End of macro NEXTW
4ded			.V0Q: 
4ded				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
4ded 79				db WORD_SYS_CORE+101             
4dee fe 4d			dw .V1S            
4df0 04				db 3 + 1 
4df1 .. 00			db "V0@",0              
4df5				endm 
# End of macro CWHEAD
4df5			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
4df5 2a 22 ea				ld hl, (cli_var_array) 
4df8 cd 90 1b				call forth_push_numhl 
4dfb			 
4dfb				       NEXTW 
4dfb c3 81 1f			jp macro_next 
4dfe				endm 
# End of macro NEXTW
4dfe			.V1S: 
4dfe				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
4dfe 7a				db WORD_SYS_CORE+102             
4dff 16 4e			dw .V1Q            
4e01 04				db 3 + 1 
4e02 .. 00			db "V1!",0              
4e06				endm 
# End of macro CWHEAD
4e06			;| V1! ( u1 -- )  Store value to v1 | DONE 
4e06					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e06 cd 95 1d			call macro_dsp_valuehl 
4e09				endm 
# End of macro FORTH_DSP_VALUEHL
4e09			 
4e09 11 24 ea				ld de, cli_var_array+2 
4e0c				 
4e0c eb					ex de, hl 
4e0d 73					ld (hl), e 
4e0e 23					inc hl 
4e0f 72					ld (hl), d 
4e10			 
4e10					; destroy value TOS 
4e10			 
4e10					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e10 cd 4d 1e			call macro_forth_dsp_pop 
4e13				endm 
# End of macro FORTH_DSP_POP
4e13				       NEXTW 
4e13 c3 81 1f			jp macro_next 
4e16				endm 
# End of macro NEXTW
4e16			.V1Q: 
4e16				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
4e16 7b				db WORD_SYS_CORE+103             
4e17 27 4e			dw .V2S            
4e19 04				db 3 + 1 
4e1a .. 00			db "V1@",0              
4e1e				endm 
# End of macro CWHEAD
4e1e			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
4e1e 2a 24 ea				ld hl, (cli_var_array+2) 
4e21 cd 90 1b				call forth_push_numhl 
4e24				       NEXTW 
4e24 c3 81 1f			jp macro_next 
4e27				endm 
# End of macro NEXTW
4e27			.V2S: 
4e27				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
4e27 7c				db WORD_SYS_CORE+104             
4e28 3f 4e			dw .V2Q            
4e2a 04				db 3 + 1 
4e2b .. 00			db "V2!",0              
4e2f				endm 
# End of macro CWHEAD
4e2f			;| V2! ( u1 -- )  Store value to v2 | DONE 
4e2f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e2f cd 95 1d			call macro_dsp_valuehl 
4e32				endm 
# End of macro FORTH_DSP_VALUEHL
4e32			 
4e32 11 26 ea				ld de, cli_var_array+4 
4e35				 
4e35 eb					ex de, hl 
4e36 73					ld (hl), e 
4e37 23					inc hl 
4e38 72					ld (hl), d 
4e39			 
4e39					; destroy value TOS 
4e39			 
4e39					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e39 cd 4d 1e			call macro_forth_dsp_pop 
4e3c				endm 
# End of macro FORTH_DSP_POP
4e3c				       NEXTW 
4e3c c3 81 1f			jp macro_next 
4e3f				endm 
# End of macro NEXTW
4e3f			.V2Q: 
4e3f				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
4e3f 7d				db WORD_SYS_CORE+105             
4e40 50 4e			dw .V3S            
4e42 04				db 3 + 1 
4e43 .. 00			db "V2@",0              
4e47				endm 
# End of macro CWHEAD
4e47			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
4e47 2a 26 ea				ld hl, (cli_var_array+4) 
4e4a cd 90 1b				call forth_push_numhl 
4e4d				       NEXTW 
4e4d c3 81 1f			jp macro_next 
4e50				endm 
# End of macro NEXTW
4e50			.V3S: 
4e50				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
4e50 7c				db WORD_SYS_CORE+104             
4e51 68 4e			dw .V3Q            
4e53 04				db 3 + 1 
4e54 .. 00			db "V3!",0              
4e58				endm 
# End of macro CWHEAD
4e58			;| V3! ( u1 -- )  Store value to v3 | DONE 
4e58					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e58 cd 95 1d			call macro_dsp_valuehl 
4e5b				endm 
# End of macro FORTH_DSP_VALUEHL
4e5b			 
4e5b 11 28 ea				ld de, cli_var_array+6 
4e5e				 
4e5e eb					ex de, hl 
4e5f 73					ld (hl), e 
4e60 23					inc hl 
4e61 72					ld (hl), d 
4e62			 
4e62					; destroy value TOS 
4e62			 
4e62					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e62 cd 4d 1e			call macro_forth_dsp_pop 
4e65				endm 
# End of macro FORTH_DSP_POP
4e65				       NEXTW 
4e65 c3 81 1f			jp macro_next 
4e68				endm 
# End of macro NEXTW
4e68			.V3Q: 
4e68				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
4e68 7d				db WORD_SYS_CORE+105             
4e69 79 4e			dw .END            
4e6b 04				db 3 + 1 
4e6c .. 00			db "V3@",0              
4e70				endm 
# End of macro CWHEAD
4e70			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
4e70 2a 28 ea				ld hl, (cli_var_array+6) 
4e73 cd 90 1b				call forth_push_numhl 
4e76				       NEXTW 
4e76 c3 81 1f			jp macro_next 
4e79				endm 
# End of macro NEXTW
4e79			 
4e79			 
4e79			 
4e79			 
4e79			 
4e79			; end of dict marker 
4e79			 
4e79 00			.END:    db WORD_SYS_END 
4e7a 00 00			dw 0 
4e7c 00				db 0 
4e7d			 
4e7d			; use to jp here for user dict words to save on macro expansion  
4e7d			 
4e7d			user_dict_next: 
4e7d				NEXTW 
4e7d c3 81 1f			jp macro_next 
4e80				endm 
# End of macro NEXTW
4e80			 
4e80			 
4e80			user_exec: 
4e80				;    ld hl, <word code> 
4e80				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
4e80				;    call forthexec 
4e80				;    jp user_dict_next   (NEXT) 
4e80			        ;    <word code bytes> 
4e80 eb				ex de, hl 
4e81 2a bc e5			ld hl,(os_tok_ptr) 
4e84				 
4e84				FORTH_RSP_NEXT 
4e84 cd 37 1b			call macro_forth_rsp_next 
4e87				endm 
# End of macro FORTH_RSP_NEXT
4e87			 
4e87			if DEBUG_FORTH_UWORD 
4e87						DMARK "UEX" 
4e87 f5				push af  
4e88 3a 9c 4e			ld a, (.dmark)  
4e8b 32 65 ee			ld (debug_mark),a  
4e8e 3a 9d 4e			ld a, (.dmark+1)  
4e91 32 66 ee			ld (debug_mark+1),a  
4e94 3a 9e 4e			ld a, (.dmark+2)  
4e97 32 67 ee			ld (debug_mark+2),a  
4e9a 18 03			jr .pastdmark  
4e9c ..			.dmark: db "UEX"  
4e9f f1			.pastdmark: pop af  
4ea0			endm  
# End of macro DMARK
4ea0				CALLMONITOR 
4ea0 cd 6f ee			call debug_vector  
4ea3				endm  
# End of macro CALLMONITOR
4ea3			endif 
4ea3			 
4ea3			 
4ea3			 
4ea3 eb				ex de, hl 
4ea4 22 bc e5			ld (os_tok_ptr), hl 
4ea7				 
4ea7				; Don't use next - Skips the first word in uword. 
4ea7			 
4ea7 c3 0a 20			jp exec1 
4eaa			;	NEXT 
4eaa			 
4eaa			 
4eaa			; eof 
# End of file forth_wordsv4.asm
4eaa			endif 
4eaa			;;;;;;;;;;;;;; Debug code 
4eaa			 
4eaa			 
4eaa			;if DEBUG_FORTH_PARSE 
4eaa .. 00		.nowordfound: db "No match",0 
4eb3 .. 00		.compword:	db "Comparing word ",0 
4ec3 .. 00		.nextwordat:	db "Next word at",0 
4ed0 .. 00		.charmatch:	db "Char match",0 
4edb			;endif 
4edb			if DEBUG_FORTH_JP 
4edb			.foundword:	db "Word match. Exec..",0 
4edb			endif 
4edb			;if DEBUG_FORTH_PUSH 
4edb .. 00		.enddict:	db "Dict end. Push.",0 
4eeb .. 00		.push_str:	db "Pushing string",0 
4efa .. 00		.push_num:	db "Pushing number",0 
4f09 .. 00		.data_sp:	db "SP:",0 
4f0d .. 00		.wordinhl:	db "Word in HL (2/0):",0 
4f1f .. 00		.wordinde:	db "Word in DE (3/0):",0 
4f31 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
4f43			;endif 
4f43			;if DEBUG_FORTH_MALLOC 
4f43 .. 00		.push_malloc:	db "Malloc address",0 
4f52			;endif 
4f52			 
4f52			 
4f52			 
4f52			; display malloc address and current data stack pointer  
4f52			 
4f52			malloc_error: 
4f52 d5				push de 
4f53 f5				push af 
4f54 e5				push hl 
4f55 cd c8 0b			call clear_display 
4f58 11 78 4f			ld de, .mallocerr 
4f5b 3e 00			ld a,0 
4f5d			;	ld de,os_word_scratch 
4f5d cd db 0b			call str_at_display 
4f60 3e 11			ld a, display_row_1+17 
4f62 11 65 ee			ld de, debug_mark 
4f65 cd db 0b			call str_at_display 
4f68 cd eb 0b			call update_display 
4f6b				;call break_point_state 
4f6b cd d9 60			call cin_wait 
4f6e			 
4f6e			;	ld a, ' ' 
4f6e			;	ld (os_view_disable), a 
4f6e cd ff 14			call bp_on 
4f71 e1				pop hl 
4f72 f1				pop af 
4f73 d1				pop de	 
4f74				CALLMONITOR 
4f74 cd 6f ee			call debug_vector  
4f77				endm  
# End of macro CALLMONITOR
4f77 c9				ret 
4f78			 
4f78 .. 00		.mallocerr: 	db "Malloc Error",0 
4f85			;if DEBUG_FORTH_PUSH 
4f85			display_data_sp: 
4f85 f5				push af 
4f86			 
4f86				; see if disabled 
4f86			 
4f86			 
4f86 3a 6f ee			ld a, (debug_vector) 
4f89 fe c9			cp $C9  ; RET 
4f8b				;ld a, (os_view_disable) 
4f8b				;cp '*' 
4f8b 28 67			jr z, .skipdsp 
4f8d			 
4f8d e5				push hl 
4f8e e5				push hl 
4f8f e5			push hl 
4f90 cd c8 0b			call clear_display 
4f93 e1			pop hl 
4f94 7c				ld a,h 
4f95 21 c0 e5			ld hl, os_word_scratch 
4f98 cd fe 0f			call hexout 
4f9b e1				pop hl 
4f9c 7d				ld a,l 
4f9d 21 c2 e5			ld hl, os_word_scratch+2 
4fa0 cd fe 0f			call hexout 
4fa3 21 c4 e5			ld hl, os_word_scratch+4 
4fa6 3e 00			ld a,0 
4fa8 77				ld (hl),a 
4fa9 11 c0 e5			ld de,os_word_scratch 
4fac 3e 28				ld a, display_row_2 
4fae cd db 0b				call str_at_display 
4fb1 11 0d 4f			ld de, .wordinhl 
4fb4 3e 00			ld a, display_row_1 
4fb6			 
4fb6 cd db 0b				call str_at_display 
4fb9 11 65 ee			ld de, debug_mark 
4fbc 3e 11			ld a, display_row_1+17 
4fbe			 
4fbe cd db 0b				call str_at_display 
4fc1			 
4fc1				; display current data stack pointer 
4fc1 11 09 4f			ld de,.data_sp 
4fc4 3e 30				ld a, display_row_2 + 8 
4fc6 cd db 0b				call str_at_display 
4fc9			 
4fc9 2a e8 e9			ld hl,(cli_data_sp) 
4fcc e5				push hl 
4fcd 7c				ld a,h 
4fce 21 c0 e5			ld hl, os_word_scratch 
4fd1 cd fe 0f			call hexout 
4fd4 e1				pop hl 
4fd5 7d				ld a,l 
4fd6 21 c2 e5			ld hl, os_word_scratch+2 
4fd9 cd fe 0f			call hexout 
4fdc 21 c4 e5			ld hl, os_word_scratch+4 
4fdf 3e 00			ld a,0 
4fe1 77				ld (hl),a 
4fe2 11 c0 e5			ld de,os_word_scratch 
4fe5 3e 33				ld a, display_row_2 + 11 
4fe7 cd db 0b				call str_at_display 
4fea			 
4fea			 
4fea cd eb 0b			call update_display 
4fed cd 00 0b			call delay1s 
4ff0 cd 00 0b			call delay1s 
4ff3 e1				pop hl 
4ff4			.skipdsp: 
4ff4 f1				pop af 
4ff5 c9				ret 
4ff6			 
4ff6			display_data_malloc: 
4ff6			 
4ff6 f5				push af 
4ff7 e5				push hl 
4ff8 e5				push hl 
4ff9 e5			push hl 
4ffa cd c8 0b			call clear_display 
4ffd e1			pop hl 
4ffe 7c				ld a,h 
4fff 21 c0 e5			ld hl, os_word_scratch 
5002 cd fe 0f			call hexout 
5005 e1				pop hl 
5006 7d				ld a,l 
5007 21 c2 e5			ld hl, os_word_scratch+2 
500a cd fe 0f			call hexout 
500d 21 c4 e5			ld hl, os_word_scratch+4 
5010 3e 00			ld a,0 
5012 77				ld (hl),a 
5013 11 c0 e5			ld de,os_word_scratch 
5016 3e 28				ld a, display_row_2 
5018 cd db 0b				call str_at_display 
501b 11 43 4f			ld de, .push_malloc 
501e 3e 00			ld a, display_row_1 
5020			 
5020 cd db 0b				call str_at_display 
5023			 
5023				; display current data stack pointer 
5023 11 09 4f			ld de,.data_sp 
5026 3e 30				ld a, display_row_2 + 8 
5028 cd db 0b				call str_at_display 
502b			 
502b 2a e8 e9			ld hl,(cli_data_sp) 
502e e5				push hl 
502f 7c				ld a,h 
5030 21 c0 e5			ld hl, os_word_scratch 
5033 cd fe 0f			call hexout 
5036 e1				pop hl 
5037 7d				ld a,l 
5038 21 c2 e5			ld hl, os_word_scratch+2 
503b cd fe 0f			call hexout 
503e 21 c4 e5			ld hl, os_word_scratch+4 
5041 3e 00			ld a,0 
5043 77				ld (hl),a 
5044 11 c0 e5			ld de,os_word_scratch 
5047 3e 33				ld a, display_row_2 + 11 
5049 cd db 0b				call str_at_display 
504c			 
504c cd eb 0b			call update_display 
504f cd 00 0b			call delay1s 
5052 cd 00 0b			call delay1s 
5055 e1				pop hl 
5056 f1				pop af 
5057 c9				ret 
5058			;endif 
5058			 
5058			include "forth_autostart.asm" 
5058			; list of commands to perform at system start up 
5058			 
5058			startcmds: 
5058			;	dw test11 
5058			;	dw test12 
5058			;	dw test13 
5058			;	dw test14 
5058			;	dw test15 
5058			;	dw test16 
5058			;	dw test17 
5058			;	dw ifthtest1 
5058			;	dw ifthtest2 
5058			;	dw ifthtest3 
5058			;	dw mmtest1 
5058			;	dw mmtest2 
5058			;	dw mmtest3 
5058			;	dw mmtest4 
5058			;	dw mmtest5 
5058			;	dw mmtest6 
5058			;	dw iftest1 
5058			;	dw iftest2 
5058			;	dw iftest3 
5058			;	dw looptest1 
5058			;	dw looptest2 
5058			;	dw test1 
5058			;	dw test2 
5058			;	dw test3 
5058			;	dw test4 
5058			;	dw game2r 
5058			;	dw game2b1 
5058			;	dw game2b2 
5058			 
5058				; start up words that are actually useful 
5058			 
5058			;    dw spi1 
5058			;    dw spi2 
5058			;    dw spi3 
5058			;    dw spi4 
5058			;    dw spi5 
5058			;    dw spi6 
5058			;    dw spi7 
5058			; 
5058			;    dw spi8 
5058			;    dw spi9 
5058			;    dw spi10 
5058			 
5058			; file editor 
5058			;	dw edit1 
5058			;	dw edit2 
5058			;	dw edit3 
5058			 
5058			;	dw longread 
5058 78 54			dw clrstack 
505a ac 54			dw type 
505c			;	dw stest 
505c d1 54			dw strncpy 
505e			;	dw list 
505e 32 55			dw start1 
5060 42 55			dw start2 
5062			;	dw start3 
5062			;	dw start3b 
5062			;	dw start3c 
5062			 
5062				; (unit) testing words 
5062			 
5062			;	dw mtesta 
5062			;	dw mtestb 
5062			;	dw mtestc 
5062			;	dw mtestd 
5062			;	dw mteste 
5062			 
5062				; demo/game words 
5062			 
5062			;        dw game3w 
5062			;        dw game3p 
5062			;        dw game3sc 
5062			;        dw game3vsi 
5062			;        dw game3vs 
5062				 
5062			;	dw game2b 
5062			;	dw game2bf 
5062			;	dw game2mba 
5062			;	dw game2mbas 
5062			;	dw game2mb 
5062			 
5062 72 58			dw game1 
5064 83 58			dw game1a 
5066 e5 58			dw game1b 
5068 1a 59			dw game1c 
506a 50 59			dw game1d 
506c 81 59			dw game1s 
506e 95 59			dw game1t 
5070 aa 59			dw game1f 
5072 de 59			dw game1z 
5074 22 5a			dw game1zz 
5076			 
5076 ab 56			dw test5 
5078 e3 56			dw test6 
507a 1b 57			dw test7 
507c 2f 57			dw test8 
507e 5b 57			dw test9 
5080 71 57			dw test10 
5082				 
5082 f9 5a		        dw ssv5 
5084 dd 5a		        dw ssv4 
5086 c1 5a		        dw ssv3 
5088 8b 5a		        dw ssv2 
508a 12 5b		        dw ssv1 
508c 5a 5b		        dw ssv1cpm 
508e			;	dw keyup 
508e			;	dw keydown 
508e			;	dw keyleft 
508e			;	dw keyright 
508e			;	dw 	keyf1 
508e			;	dw keyf2 
508e			;	dw keyf3 
508e			;	dw keyf4 
508e			;	dw keyf5 
508e			;	dw keyf6 
508e			;	dw keyf7 
508e			;	dw keyf8 
508e			;	dw keyf9 
508e			;	dw keyf10 
508e			;	dw keyf11 
508e			;	dw keyf12 
508e			;	dw keytab 
508e			;	dw keycr 
508e			;	dw keyhome 
508e			;	dw keyend 
508e			;	dw keybs 
508e 00 00			db 0, 0	 
5090			 
5090			 
5090			; File Editor 
5090			 
5090			; ( id - ) use 'e' to edit the displayed line 
5090 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
50b1 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
50e6			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
50e6 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
511e			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
511e			 
511e			; SPI Net support words 
511e			 
511e			; v0! = node to send to 
511e			; ( str count - ) 
511e .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
5177			 
5177			; spiputc ( char node - ) 
5177 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
51ab			; spiputc ( u node - ) 
51ab .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
51d9			 
51d9			; spigetc ( - n ) 
51d9 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
5202			 
5202			; getnode ( - n ) 
5202 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
522f			 
522f			; ( str node - )  
522f .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
5295			; store string ( str i - ) 
5295			 
5295			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
5295 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
52ea			 
52ea			; get string ( addr i -  )    TO FIX 
52ea			 
52ea .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
5342			 
5342			 
5342			; NETCHAT (TODO) 
5342			; Program to allow two nodes to chat with eachother 
5342			; 
5342			; v0 - target node 
5342			;  
5342			; accept input at 0,0 
5342			; if input is string send spitype to target node 
5342			; starting at row 2,0 , while spigetchr is not zero ->  
5342			; 
5342			; 
5342			; TODO add paging of get request 
5342			 
5342			; ( node - ) 
5342 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
5361 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
53b9 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
5431			 
5431			 
5431			; Long read of currently open file 
5431 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
5478			 
5478			; clear stack  
5478			 
5478 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
54ac			 
54ac			; type ( addr count - ) 
54ac .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
54d1			 
54d1			; some direct memory words 
54d1			; strncpy ( len t f -- t ) 
54d1			 
54d1 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
5532			 
5532 .. 00		start1:     	db ": bpon $00 bp ;",0 
5542 .. 00		start2:     	db ": bpoff $01 bp ;",0 
5553 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
55ce .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
562e			 
562e .. 00		tuck:         db ": tuck swap over ;", 0 
5641			 
5641			; a handy word to list items on the stack 
5641			 
5641 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
56ab			 
56ab			 
56ab			; test stack  
56ab			; rnd8 stest 
56ab			 
56ab			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
56ab			 
56ab			; random malloc and free cycles 
56ab			 
56ab			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
56ab			 
56ab			; fixed malloc and free cycles 
56ab			 
56ab			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
56ab			 
56ab			; fixed double string push and drop cycle  
56ab			 
56ab			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
56ab			 
56ab			; consistent fixed string push and drop cycle  
56ab			 
56ab			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
56ab			 
56ab			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
56ab			 
56ab			;test1:		db ": aa 1 2 3 ;", 0 
56ab			;test2:     	db "111 aa 888 999",0 
56ab			;test3:     	db ": bb 77 ;",0 
56ab			;test4:     	db "$02 $01 do i . loop bb",0 
56ab			 
56ab .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
56e3 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
571b .. 00		test7:     	db ": box hline vline ;",0 
572f .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
575b .. 00		test9:     	db ": sw $01 adsp world ;",0 
5771 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
5796			;test11:     	db "hello create .",0 
5796			;test12:     	db "hello2 create .",0 
5796			 
5796			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
5796			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
5796			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
5796			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
5796			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
5796			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
5796			 
5796			;iftest1:     	db "$0001 IF cls .",0 
5796			;iftest2:     	db "$0000 IF cls .",0 
5796			;iftest3:     	db "$0002 $0003 - IF cls .",0 
5796			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
5796			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
5796			 
5796			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
5796			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
5796			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
5796			 
5796			 
5796 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
57ba .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
57ea .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
580f .. 00		sound4: db ": cha $00 ; ",0 
581c .. 00		sound5: db ": chb $20 ; ",0 
5829 .. 00		sound6: db ": chc $40 ; ",0 
5836 .. 00		sound7: db ": chd $60 ; ",0 
5843 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
585b .. 00		sound9: db ": cvol $90 + + note ; ", 0 
5872			 
5872			 
5872			 
5872			 
5872			; a small guess the number game 
5872			 
5872 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
5883 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
58e5			 
58e5 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
591a .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5950 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5981 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
5995 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
59aa .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
59de .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5a22			 
5a22			; Using 'ga' save a high score across multiple runs using external storage 
5a22			 
5a22 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5a8b			 
5a8b			 
5a8b			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5a8b			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5a8b			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5a8b			 
5a8b			; simple screen saver to test code memory reuse to destruction 
5a8b			 
5a8b .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5ac1 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5add .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5af9 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5b12 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5b5a .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5bb1			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5bb1			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5bb1			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5bb1			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5bb1			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5bb1			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5bb1			 
5bb1			 
5bb1			 
5bb1			; minesweeper/battleship finding game 
5bb1			; draws a game board of random ship/mine positions 
5bb1			; user enters coords to see if it hits on 
5bb1			; game ends when all are hit 
5bb1			; when hit or miss says how many may be in the area 
5bb1			 
5bb1			; setup the game board and then hide it 
5bb1			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5bb1			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5bb1			;; prompt for where to target 
5bb1			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5bb1			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5bb1			;; TODO see if the entered coords hits or misses pushes char hit of miss 
5bb1			;game2mbht:      db ": mbckht nop ;",0 
5bb1			;game2mbms:      db ": mbcms nop ;",0 
5bb1			; TODO how many might be near by 
5bb1			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5bb1			 
5bb1			; Game 3 
5bb1			 
5bb1			; Vert scroller ski game - avoid the trees! 
5bb1			 
5bb1			; v0 score (ie turns) 
5bb1			; v1 player pos 
5bb1			; v2 left wall 
5bb1			; v3 right wall 
5bb1			 
5bb1			; Draw side walls randomly 
5bb1			 
5bb1			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5bb1			 
5bb1			; Draw player 
5bb1			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5bb1			 
5bb1			; TODO Get Key 
5bb1			 
5bb1			; TODO Move left right 
5bb1			 
5bb1			; scroll and move walls a bit 
5bb1			 
5bb1			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5bb1			 
5bb1			; main game loop 
5bb1			 
5bb1			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5bb1			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
5bb1			 
5bb1			; key board defs 
5bb1			 
5bb1 .. 00		keyup:       db ": keyup $05 ;",0 
5bbf .. 00		keydown:       db ": keydown $0a ;",0 
5bcf .. 00		keyleft:       db ": keyleft $0b ;",0 
5bdf .. 00		keyright:       db ": keyright $0c ;",0 
5bf0 .. 00		keyf1:       db ": keyf1 $10 ;",0 
5bfe .. 00		keyf2:       db ": keyf2 $11 ;",0 
5c0c .. 00		keyf3:       db ": keyf3 $12 ;",0 
5c1a .. 00		keyf4:       db ": keyf4 $13 ;",0 
5c28 .. 00		keyf5:       db ": keyf5 $14 ;",0 
5c36 .. 00		keyf6:       db ": keyf6 $15 ;",0 
5c44 .. 00		keyf7:       db ": keyf7 $16 ;",0 
5c52 .. 00		keyf8:       db ": keyf8 $17 ;",0 
5c60 .. 00		keyf9:       db ": keyf9 $18 ;",0 
5c6e .. 00		keyf10:       db ": keyf10 $19 ;",0 
5c7d .. 00		keyf11:       db ": keyf11 $1a ;",0 
5c8c .. 00		keyf12:       db ": keyf12 $1b ;",0 
5c9b			 
5c9b .. 00		keytab:       db ": keytab $09 ;",0 
5caa .. 00		keycr:       db ": keycr $0d ;",0 
5cb8 .. 00		keyhome:       db ": keyhome $0e ;",0 
5cc8 .. 00		keyend:       db ": keyend $0f ;",0 
5cd7 .. 00		keybs:       db ": keybs $08 ;",0 
5ce5			 
5ce5			   
5ce5			 
5ce5			 
5ce5			 
5ce5			; eof 
# End of file forth_autostart.asm
5ce5			 
5ce5			 
5ce5			 
5ce5			; stack over and underflow checks 
5ce5			 
5ce5			; init the words to detect the under/overflow 
5ce5			 
5ce5			chk_stk_init: 
5ce5				; a vague random number to check so we dont get any "lucky" hits 
5ce5 3e 2d			ld a, 45 
5ce7 6f				ld l, a 
5ce8 00				nop 
5ce9 3e 17			ld a, 23 
5ceb 67				ld h, a 
5cec			 
5cec 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
5cef			 
5cef			;	ld (chk_stund), hl	; stack points.... 
5cef 22 00 ef			ld (chk_stovr), hl 
5cf2 22 e6 e9			ld (chk_ret_und), hl 
5cf5 22 a4 e9			ld (chk_ret_ovr), hl 
5cf8 22 22 e9			ld (chk_loop_ovr), hl 
5cfb 22 20 e8			ld (chk_data_ovr), hl 
5cfe c9				ret 
5cff				 
5cff			check_stacks: 
5cff				; check all stack words 
5cff			 
5cff e5				push hl 
5d00 d5				push de 
5d01			 
5d01			;	ld de,(chk_word) 
5d01			;	ld hl, (chk_stund)	; stack points.... 
5d01			;	if DEBUG_STK_FAULT 
5d01			;		DMARK "FAa" 
5d01			;		CALLMONITOR 
5d01			;	endif 
5d01			;	call cmp16 
5d01			;	jp z, .chk_faulta 
5d01			; 
5d01			;	ld de, sfaultsu 
5d01			;	jp .chk_fault 
5d01			 
5d01 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
5d04 ed 5b 97 e2		ld de,(chk_word) 
5d08				if DEBUG_STK_FAULT 
5d08					DMARK "FAb" 
5d08					CALLMONITOR 
5d08				endif 
5d08 cd 13 0e			call cmp16 
5d0b 28 06			jr z, .chk_fault1 
5d0d 11 b1 5d			ld de, sfaultso 
5d10 c3 62 5d			jp .chk_fault 
5d13			.chk_fault1:  
5d13 2a e6 e9			ld hl, (chk_ret_und) 
5d16 ed 5b 97 e2		ld de,(chk_word) 
5d1a				if DEBUG_STK_FAULT 
5d1a					DMARK "FAU" 
5d1a					CALLMONITOR 
5d1a				endif 
5d1a cd 13 0e			call cmp16 
5d1d ca 26 5d			jp z, .chk_fault2 
5d20 11 c1 5d			ld de, sfaultru 
5d23 c3 62 5d			jp .chk_fault 
5d26			.chk_fault2:  
5d26 2a a4 e9			ld hl, (chk_ret_ovr) 
5d29 ed 5b 97 e2		ld de,(chk_word) 
5d2d				if DEBUG_STK_FAULT 
5d2d					DMARK "FA1" 
5d2d					CALLMONITOR 
5d2d				endif 
5d2d cd 13 0e			call cmp16 
5d30 ca 39 5d			jp z, .chk_fault3 
5d33 11 cf 5d			ld de, sfaultro 
5d36 c3 62 5d			jp .chk_fault 
5d39			.chk_fault3:  
5d39 2a 22 e9			ld hl, (chk_loop_ovr) 
5d3c ed 5b 97 e2		ld de,(chk_word) 
5d40				if DEBUG_STK_FAULT 
5d40					DMARK "FA2" 
5d40					CALLMONITOR 
5d40				endif 
5d40 cd 13 0e			call cmp16 
5d43 ca 4c 5d			jp z, .chk_fault4 
5d46 11 e9 5d			ld de, sfaultlo 
5d49 c3 62 5d			jp .chk_fault 
5d4c			.chk_fault4:  
5d4c 2a 20 e8			ld hl, (chk_data_ovr) 
5d4f ed 5b 97 e2		ld de,(chk_word) 
5d53				if DEBUG_STK_FAULT 
5d53					DMARK "FA3" 
5d53					CALLMONITOR 
5d53				endif 
5d53 cd 13 0e			call cmp16 
5d56 ca 5f 5d			jp z, .chk_fault5 
5d59 11 03 5e			ld de, sfaultdo 
5d5c c3 62 5d			jp .chk_fault 
5d5f			 
5d5f			 
5d5f			.chk_fault5:  
5d5f d1				pop de 
5d60 e1				pop hl 
5d61			 
5d61 c9				ret 
5d62			 
5d62 cd c8 0b		.chk_fault: 	call clear_display 
5d65 3e 28				ld a, display_row_2 
5d67 cd db 0b				call str_at_display 
5d6a 11 93 5d				   ld de, .stackfault 
5d6d 3e 00				ld a, display_row_1 
5d6f cd db 0b				call str_at_display 
5d72 11 65 ee				    ld de, debug_mark 
5d75 3e 11				ld a, display_row_1+17 
5d77 cd db 0b				call str_at_display 
5d7a cd eb 0b				call update_display 
5d7d			 
5d7d				; prompt before entering montior for investigating issue 
5d7d			 
5d7d 3e 78			ld a, display_row_4 
5d7f 11 6e 18			ld de, endprog 
5d82			 
5d82 cd eb 0b			call update_display		 
5d85			 
5d85 cd 08 1b			call next_page_prompt 
5d88			 
5d88 d1				pop de 
5d89 e1				pop hl 
5d8a cd c2 18				call monitor 
5d8d cd 27 1f				call forth_warmstart 
5d90 c3 be 17				jp warmstart_afterauto 
5d93					;jp 0 
5d93					;halt 
5d93			 
5d93			 
5d93			 
5d93 .. 00		.stackfault: 	db "Stack fault:",0 
5da0			 
5da0 .. 00		sfaultsu: 	db	"Stack under flow",0 
5db1 .. 00		sfaultso: 	db	"Stack over flow",0 
5dc1 .. 00		sfaultru:	db "RTS underflow",0 
5dcf .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
5de9 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
5e03 .. 00		sfaultdo:	db "DTS overflow", 0 
5e10			 
5e10			 
5e10			fault_dsp_under: 
5e10 11 22 5e			ld de, .dsp_under 
5e13 c3 d8 5e			jp .show_fault 
5e16			 
5e16			fault_rsp_under: 
5e16 11 30 5e			ld de, .rsp_under 
5e19 c3 d8 5e			jp .show_fault 
5e1c			fault_loop_under: 
5e1c 11 3e 5e			ld de, .loop_under 
5e1f c3 d8 5e			jp .show_fault 
5e22			 
5e22 .. 00		.dsp_under: db "DSP Underflow",0 
5e30 .. 00		.rsp_under: db "RSP Underflow",0 
5e3e .. 00		.loop_under: db "LOOP Underflow",0 
5e4d			 
5e4d			 
5e4d d5			type_faultn: 	push de 
5e4e e5					push hl 
5e4f cd c8 0b				call clear_display 
5e52 11 7c 5e				   ld de, .typefaultn 
5e55 3e 00				ld a, display_row_1 
5e57 cd db 0b				call str_at_display 
5e5a 11 65 ee				    ld de, debug_mark 
5e5d 3e 11				ld a, display_row_1+17 
5e5f cd db 0b				call str_at_display 
5e62 cd eb 0b				call update_display 
5e65			 
5e65				; prompt before entering montior for investigating issue 
5e65			 
5e65 3e 78			ld a, display_row_4 
5e67 11 6e 18			ld de, endprog 
5e6a			 
5e6a cd eb 0b			call update_display		 
5e6d			 
5e6d cd 08 1b			call next_page_prompt 
5e70			 
5e70 e5					push hl 
5e71 d5					push de 
5e72 cd c2 18				call monitor 
5e75 cd 27 1f				call forth_warmstart 
5e78 c3 be 17				jp warmstart_afterauto 
5e7b 76					halt 
5e7c			 
5e7c			 
5e7c .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
5e93			 
5e93 d5			type_faults: 	push de 
5e94 e5					push hl 
5e95 cd c8 0b				call clear_display 
5e98 11 c1 5e				   ld de, .typefaults 
5e9b 3e 00				ld a, display_row_1 
5e9d cd db 0b				call str_at_display 
5ea0 11 65 ee				    ld de, debug_mark 
5ea3 3e 11				ld a, display_row_1+17 
5ea5 cd db 0b				call str_at_display 
5ea8 cd eb 0b				call update_display 
5eab			 
5eab				; prompt before entering montior for investigating issue 
5eab			 
5eab 3e 78			ld a, display_row_4 
5ead 11 6e 18			ld de, endprog 
5eb0			 
5eb0 cd eb 0b			call update_display		 
5eb3			 
5eb3 cd 08 1b			call next_page_prompt 
5eb6			 
5eb6 e1					pop hl 
5eb7 d1					pop de 
5eb8 cd c2 18				call monitor 
5ebb cd 27 1f				call forth_warmstart 
5ebe c3 be 17				jp warmstart_afterauto 
5ec1			 
5ec1			 
5ec1 .. 00		.typefaults: db "STR Type Expected TOS!",0 
5ed8			 
5ed8			.show_fault: 	 
5ed8 d5					push de 
5ed9 cd c8 0b				call clear_display 
5edc d1					pop de 
5edd 3e 00				ld a, display_row_1 
5edf cd db 0b				call str_at_display 
5ee2 11 65 ee				    ld de, debug_mark 
5ee5 3e 11				ld a, display_row_1+17 
5ee7 cd db 0b				call str_at_display 
5eea cd eb 0b				call update_display 
5eed			 
5eed				; prompt before entering montior for investigating issue 
5eed			 
5eed 3e 78			ld a, display_row_4 
5eef 11 6e 18			ld de, endprog 
5ef2			 
5ef2 cd eb 0b			call update_display		 
5ef5			 
5ef5 cd 08 1b			call next_page_prompt 
5ef8			 
5ef8 e1					pop hl 
5ef9 d1					pop de 
5efa cd c2 18				call monitor 
5efd			; do a dump to cli and not warmstart so we preserve all of the uwords.  
5efd			; TODO Make optional fault restart to cli or warm boot? 
5efd					;jp warmstart 
5efd c3 02 18				jp cli 
5f00 76					halt 
5f01			 
5f01			 
5f01			; handle the auto run of code from files in storage 
5f01			 
5f01			 
5f01			include "forth_startup.asm" 
5f01			; Which startup method to use? 
5f01			; 
5f01			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
5f01			; followed by loading of a list of scripts in eeprom 
5f01			 
5f01			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
5f01			; from eeprom 
5f01			 
5f01			; Select with define in main stubs 
5f01			 
5f01			if STARTUP_V1 
5f01				include "forth_startupv1.asm" 
5f01			; Startup script loading version 1 
5f01			 
5f01			; If SE storage is available first stage is to use the selected file 
5f01			; then go through the eeprom list 
5f01			 
5f01 .. 00		sprompt1: db "Startup load...",0 
5f11 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
5f27			 
5f27			 
5f27			 
5f27			 
5f27			forth_startup: 
5f27 21 58 50			ld hl, startcmds 
5f2a 3e 00			ld a, 0 
5f2c 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
5f2f			 
5f2f e5			.start1:	push hl 
5f30 cd c8 0b			call clear_display 
5f33 11 01 5f			ld de, sprompt1 
5f36 3e 00		        ld a, display_row_1 
5f38 cd db 0b			call str_at_display 
5f3b 11 11 5f			ld de, sprompt2 
5f3e 3e 28		        ld a, display_row_2 
5f40 cd db 0b			call str_at_display 
5f43 e1				pop hl 
5f44 e5				push hl 
5f45 5e				ld e,(hl) 
5f46 23				inc hl 
5f47 56				ld d,(hl) 
5f48 3e 50		        ld a, display_row_3 
5f4a cd db 0b			call str_at_display 
5f4d cd eb 0b			call update_display 
5f50			 
5f50			 
5f50 3a e1 e6			ld a, (os_last_cmd) 
5f53 fe 00			cp 0 
5f55 28 05			jr z, .startprompt 
5f57 cd f4 0a			call delay250ms 
5f5a 18 24			jr .startdo 
5f5c				 
5f5c				 
5f5c			 
5f5c			.startprompt: 
5f5c			 
5f5c 3e 9f			ld a,display_row_4 + display_cols - 1 
5f5e 11 06 1b		        ld de, endprg 
5f61 cd db 0b			call str_at_display 
5f64 cd eb 0b			call update_display 
5f67 cd 00 0b			call delay1s 
5f6a cd d9 60			call cin_wait 
5f6d						 
5f6d fe 2a			cp '*' 
5f6f 28 5e			jr z, .startupend1 
5f71 fe 23			cp '#' 
5f73 20 07			jr nz, .startno 
5f75 3e 01			ld a, 1 
5f77 32 e1 e6			ld (os_last_cmd),a 
5f7a 18 04			jr .startdo 
5f7c fe 31		.startno:	cp '1' 
5f7e 28 3a			jr z,.startnxt  
5f80			 
5f80				; exec startup line 
5f80			.startdo:	 
5f80 e1				pop hl 
5f81 e5				push hl 
5f82				 
5f82 5e				ld e,(hl) 
5f83 23				inc hl 
5f84 56				ld d,(hl) 
5f85 eb				ex de,hl 
5f86			 
5f86 e5				push hl 
5f87			 
5f87 3e 00			ld a, 0 
5f89				;ld a, FORTH_END_BUFFER 
5f89 cd 66 11			call strlent 
5f8c 23				inc hl   ; include zero term to copy 
5f8d 06 00			ld b,0 
5f8f 4d				ld c,l 
5f90 e1				pop hl 
5f91 11 bb e2			ld de, scratch 
5f94 ed b0			ldir 
5f96			 
5f96			 
5f96 21 bb e2			ld hl, scratch 
5f99 cd cb 1f			call forthparse 
5f9c cd 07 20			call forthexec 
5f9f cd 21 1f			call forthexec_cleanup 
5fa2			 
5fa2 3e 78			ld a, display_row_4 
5fa4 11 6e 18			ld de, endprog 
5fa7			 
5fa7 cd eb 0b			call update_display		 
5faa			 
5faa 3a e1 e6			ld a, (os_last_cmd) 
5fad fe 00			cp 0 
5faf 20 09			jr nz, .startnxt 
5fb1 cd 08 1b			call next_page_prompt 
5fb4 cd c8 0b		        call clear_display 
5fb7 cd eb 0b			call update_display		 
5fba			 
5fba				; move onto next startup line? 
5fba			.startnxt: 
5fba			 
5fba cd f4 0a			call delay250ms 
5fbd e1				pop hl 
5fbe			 
5fbe 23				inc hl 
5fbf 23				inc hl 
5fc0			 
5fc0 e5				push hl 
5fc1 5e				ld e, (hl) 
5fc2 23				inc hl 
5fc3 56				ld d, (hl) 
5fc4 e1				pop hl 
5fc5				; TODO replace 0 test 
5fc5			 
5fc5 eb				ex de, hl 
5fc6 cd 1e 0e			call ishlzero 
5fc9			;	ld a,e 
5fc9			;	add d 
5fc9			;	cp 0    ; any left to do? 
5fc9 eb				ex de, hl 
5fca c2 2f 5f			jp nz, .start1 
5fcd 18 01			jr .startupend 
5fcf			 
5fcf e1			.startupend1: pop hl 
5fd0			.startupend: 
5fd0			 
5fd0 cd c8 0b			call clear_display 
5fd3 cd eb 0b			call update_display 
5fd6 c9				ret 
5fd7			if STORAGE_SE 
5fd7			 
5fd7			sprompt3: db "Loading from start-up file?:",0 
5fd7			sprompt4: db "(Y=Any key/N=No)",0 
5fd7			 
5fd7			 
5fd7			forth_autoload: 
5fd7			 
5fd7				; load block 0 of store 1 
5fd7				 
5fd7				ld a, $fe      ; bit 0 clear 
5fd7				ld (spi_device), a 
5fd7			 
5fd7				call storage_get_block_0 
5fd7			 
5fd7				ld a, (store_page+STORE_0_AUTOFILE) 
5fd7			 
5fd7				cp 0 
5fd7				ret z     ; auto start not enabled 
5fd7			 
5fd7				call clear_display 
5fd7			 
5fd7				; set bank 
5fd7			 
5fd7					ld a, (store_page+STORE_0_BANKRUN) 
5fd7					ld (spi_device), a 
5fd7			 
5fd7				; get file id to load from and get the file name to display 
5fd7			 
5fd7					ld a, (store_page+STORE_0_FILERUN) 
5fd7			 
5fd7					ld l, 0 
5fd7					ld h, a 
5fd7					ld de, store_page 
5fd7			 
5fd7					if DEBUG_FORTH_WORDS 
5fd7						DMARK "ASp" 
5fd7						CALLMONITOR 
5fd7					endif 
5fd7					call storage_read 
5fd7			 
5fd7					if DEBUG_FORTH_WORDS 
5fd7						DMARK "ASr" 
5fd7						CALLMONITOR 
5fd7					endif 
5fd7			 
5fd7					call ishlzero 
5fd7					ret z             ; file not found 
5fd7			 
5fd7					ld a, display_row_2 + 10 
5fd7					ld de, store_page+3 
5fd7					call str_at_display 
5fd7				 
5fd7			; 
5fd7			 
5fd7				ld a, display_row_1+5 
5fd7				ld de, sprompt3 
5fd7				call str_at_display 
5fd7				ld a, display_row_3+15 
5fd7				ld de, sprompt4 
5fd7				call str_at_display 
5fd7			 
5fd7				call update_display 
5fd7			 
5fd7				call cin_wait 
5fd7				cp 'n' 
5fd7				ret z 
5fd7				cp 'N' 
5fd7				ret z 
5fd7			 
5fd7				call delay1s 
5fd7			 
5fd7				ld a, (store_page+2) 
5fd7				ld (store_openmaxext), a    ; save count of ext 
5fd7				ld a, 1  
5fd7				ld (store_openext), a    ; save count of ext 
5fd7			 
5fd7			.autof:  
5fd7				ld l , a 
5fd7				 
5fd7				ld a, (store_page) 
5fd7				ld h, a	 
5fd7				ld de, store_page 
5fd7					if DEBUG_FORTH_WORDS 
5fd7						DMARK "ASl" 
5fd7						CALLMONITOR 
5fd7					endif 
5fd7					call storage_read 
5fd7				call ishlzero 
5fd7				ret z 
5fd7			;	jr z, .autoend 
5fd7			 
5fd7					if DEBUG_FORTH_WORDS 
5fd7						DMARK "ASc" 
5fd7						CALLMONITOR 
5fd7					endif 
5fd7				ld de, store_page+2 
5fd7				ld a, display_row_4 
5fd7				call str_at_display 
5fd7			 
5fd7				call update_display 
5fd7				call delay250ms 
5fd7			 
5fd7			 
5fd7			 
5fd7				ld hl, store_page+2 
5fd7				call forthparse 
5fd7				call forthexec 
5fd7				call forthexec_cleanup 
5fd7			 
5fd7				 
5fd7				ld a, (store_openext) 
5fd7				inc a 
5fd7				ld (store_openext), a    ; save count of ext 
5fd7			 
5fd7				jr .autof 
5fd7			;.autofdone: 
5fd7			; 
5fd7			;		if DEBUG_FORTH_WORDS 
5fd7			;			DMARK "ASx" 
5fd7			;			CALLMONITOR 
5fd7			;		endif 
5fd7			;;	call clear_display 
5fd7			;	ret 
5fd7			 
5fd7			 
5fd7			 
5fd7			endif 
# End of file forth_startupv1.asm
5fd7			endif 
5fd7			if STARTUP_V2 
5fd7				include "forth_startupv2.asm" 
5fd7			endif 
5fd7			 
# End of file forth_startup.asm
5fd7			 
5fd7			; eof 
# End of file forth_kernel.asm
5fd7			;include "nascombasic.asm" 
5fd7			 
5fd7			 
5fd7			; find out where the code ends if loaded into RAM (for SC114) 
5fd7			;endofcode:  
5fd7			;	nop 
5fd7			 
5fd7			 
5fd7			; jump to nmi vector 
5fd7			 
5fd7			init_nmi: 
5fd7 3e c9			ld a, $c9   ; RET 
5fd9 32 72 ee			ld (nmi_vector), a 
5fdc c9				ret 
5fdd			nmi: 
5fdd e5				push hl 
5fde d5				push de 
5fdf c5				push bc 
5fe0 f5				push af 
5fe1 cd 72 ee			call nmi_vector 
5fe4 f5				push af 
5fe5 c5				push bc 
5fe6 d5				push de 
5fe7 e5				push hl 
5fe8 ed 4d			reti 
5fea			 
5fea			 
5fea			; eof 
5fea			 
# End of file main.asm
5fea			;include "firmware_lcd_4x40.asm" 
5fea			;;include "firmware_lcd_4x20.asm" 
5fea			include "firmware_cpm_display.asm" 
5fea			 
5fea			; Serial display interface for SC114 
5fea			 
5fea			 
5fea			display_row_1: equ 0 
5fea			display_row_2: equ display_row_1+display_cols 
5fea			display_row_3: equ display_row_2 + display_cols 
5fea			display_row_4: equ display_row_3 + display_cols 
5fea			 
5fea			kLCDWidth:  EQU display_cols             ;Width in characters 
5fea			kLCD_Line1: EQU 0x00  
5fea			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
5fea			; E1 
5fea			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
5fea			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
5fea			 
5fea			lcd_init: 
5fea				; no init as handled by the SCM bios 
5fea c9				ret 
5feb			 
5feb			 
5feb			; low level functions for direct screen writes 
5feb			 
5feb			; output char at pos? 
5feb			fLCD_Str: 
5feb			        ;out (SC114_SIO_1_OUT),a 
5feb c5				push bc 
5fec d5				push de 
5fed 5f				ld e, a 
5fee			; TODO Replace with CP/M BIOS call 
5fee 0e 02			ld c, $02 
5ff0 cd 05 00			call 5 
5ff3 d1				pop de 
5ff4 c1				pop bc 
5ff5 c9				ret 
5ff6			 
5ff6			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
5ff6			fLCD_Pos: 
5ff6				; use ASCII escape to position 
5ff6			        ;out (SC114_SIO_1_OUT),a 
5ff6 c5				push bc 
5ff7 d5				push de 
5ff8 5f				ld e, a 
5ff9 0e 02			ld c, $02 
5ffb			; TODO Replace with CP/M BIOS call 
5ffb cd 05 00			call 5 
5ffe d1				pop de 
5fff c1				pop bc 
6000			 
6000 c9				ret 
6001			 
6001			; output char at pos 
6001			fLCD_Data: 
6001			      ;  out (SC114_SIO_1_OUT),a 
6001 c5				push bc 
6002 d5				push de 
6003 0e 02			ld c, $02 
6005 5f				ld e, a 
6006			; TODO Replace with CP/M BIOS call 
6006 cd 05 00			call 5 
6009 d1				pop de 
600a c1				pop bc 
600b			 
600b c9				ret 
600c			 
600c			; ascii cls  
600c			 
600c 1b 5b 48 24	.cls:   db 27, '[', 'H', "$" 
6010			 
6010 0d 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ..	.clscpm: db 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,10,10,10,10,10,"$" 
6027			;.clscpm: db 3, $3c,"$" 
6027			 
6027			; write the frame buffer given in hl to hardware  
6027			write_display: 
6027			 
6027			API: equ 0 
6027			 
6027			if API 
6027				push bc 
6027				ld b, 4 
6027			 
6027			        ld (display_write_tmp), hl 	  
6027			 
6027				; clear and home cursor 
6027			 
6027				ld c, 9 
6027				ld de, .cls 
6027			; TODO Replace with CP/M BIOS call 
6027				call 5 
6027			 
6027			 
6027			.writeln: 
6027			 
6027				ld de, (display_write_tmp) 
6027				ld c, 6 
6027			; TODO Replace with CP/M BIOS call 
6027				rst $30 
6027				ld c, 7 
6027				rst $30 
6027			 
6027				ld hl, (display_write_tmp) 
6027				ld de, display_cols 
6027				add hl,de 
6027				ld (display_write_tmp),hl 
6027			 
6027				djnz  .writeln 
6027			 
6027				pop bc 
6027			 
6027			 
6027				ret 
6027			endif 
6027 e5				push hl 
6028 c5				push bc 
6029 d5				push de 
602a			 
602a			;	ld c, 2 
602a			;	;ld de, .cls 
602a			;	ld a, 27 
602a			;	rst $30 
602a			;	ld c, 2 
602a			;	;ld de, .cls 
602a			;	ld a, '[' 
602a			;	rst $30 
602a			; 
602a			;	ld c, 2 
602a			;	;ld de, .cls 
602a			;	ld a, 'H' 
602a			;	rst $30 
602a			; 
602a			 
602a			 
602a			; lots of CR/LF 
602a			;	ld c, 9 
602a			;	ld de, .clscpm 
602a			;	call 5 
602a			 
602a			; xterm cls 
602a 0e 02			ld c, 2 
602c 1e 1b			ld e, 27 
602e cd 05 00			call 5 
6031			; cls causes too much flicker 
6031			;	ld c, 2 
6031			;	ld e, 'c' 
6031			;	call 5 
6031			 
6031			; use xterm home instead 
6031 0e 02			ld c, 2 
6033 1e 5b			ld e, '[' 
6035 cd 05 00			call 5 
6038 0e 02			ld c, 2 
603a 1e 48			ld e, 'H' 
603c cd 05 00			call 5 
603f			LLL: equ 0 
603f			 
603f			if LLL 
603f			 
603f				ld c, 2 
603f				;ld de, .cls 
603f				ld e, 27 
603f			; TODO Replace with CP/M BIOS call 
603f				call 5 
603f			 
603f			 
603f				ld c, 2 
603f				;ld de, .cls 
603f				ld e, '[' 
603f			; TODO Replace with CP/M BIOS call 
603f				call 5 
603f				ld c, 2 
603f				;ld de, .cls 
603f				ld e, '2' 
603f			; TODO Replace with CP/M BIOS call 
603f				call 5 
603f				ld c, 2 
603f				;ld de, .cls 
603f				ld e, 'J' 
603f			; TODO Replace with CP/M BIOS call 
603f				call 5 
603f			 
603f			endif 
603f			 
603f d1				pop de 
6040 c1				pop bc 
6041 e1				pop hl 
6042			 
6042			 
6042 22 c3 eb		        ld (display_write_tmp), hl 	  
6045 3e 00			ld a, kLCD_Line1 
6047			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
6047 06 28			ld b, display_cols 
6049 ed 5b c3 eb		ld de, (display_write_tmp) 
604d cd d0 60			call write_len_string 
6050				 
6050			 
6050 e5			push hl 
6051 d5			push de 
6052 c5			push bc 
6053 0e 02			ld c, 2 
6055 1e 0a			ld e, 10 
6057 cd 05 00			call 5 
605a 0e 02			ld c, 2 
605c 1e 0d			ld e, 13 
605e cd 05 00			call 5 
6061			; TODO Replace with CP/M BIOS call 
6061				;rst $30 
6061 c1			pop bc 
6062 d1			pop de 
6063 e1			pop hl 
6064			 
6064				 
6064 2a c3 eb			ld hl, (display_write_tmp) 
6067 11 28 00			ld de, display_cols 
606a 19				add hl,de 
606b 22 c3 eb			ld (display_write_tmp),hl 
606e			 
606e				 
606e 3e 28			ld a, kLCD_Line2 
6070			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
6070 06 28			ld b, display_cols 
6072 ed 5b c3 eb		ld de, (display_write_tmp) 
6076 cd d0 60			call write_len_string 
6079				 
6079 2a c3 eb			ld hl, (display_write_tmp) 
607c 11 28 00			ld de, display_cols 
607f 19				add hl,de 
6080 22 c3 eb			ld (display_write_tmp),hl 
6083			 
6083 e5			push hl 
6084 d5			push de 
6085 c5			push bc 
6086 0e 07			ld c, 7 
6088			; TODO Replace with CP/M BIOS call 
6088				;rst $30 
6088 0e 02			ld c, 2 
608a 1e 0a			ld e, 10 
608c cd 05 00			call 5 
608f 0e 02			ld c, 2 
6091 1e 0d			ld e, 13 
6093 cd 05 00			call 5 
6096 c1			pop bc 
6097 d1			pop de 
6098 e1			pop hl 
6099			 
6099				 
6099 3e 50			ld a, kLCD_Line3 
609b			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
609b 06 28			ld b, display_cols 
609d ed 5b c3 eb		ld de, (display_write_tmp) 
60a1 cd d0 60			call write_len_string 
60a4				 
60a4 2a c3 eb			ld hl, (display_write_tmp) 
60a7 11 28 00			ld de, display_cols 
60aa 19				add hl,de 
60ab 22 c3 eb			ld (display_write_tmp),hl 
60ae			 
60ae e5			push hl 
60af d5			push de 
60b0 c5			push bc 
60b1 0e 07			ld c, 7 
60b3			; TODO Replace with CP/M BIOS call 
60b3				;rst $30 
60b3 0e 02			ld c, 2 
60b5 1e 0a			ld e, 10 
60b7 cd 05 00			call 5 
60ba 0e 02			ld c, 2 
60bc 1e 0d			ld e, 13 
60be cd 05 00			call 5 
60c1 c1			pop bc 
60c2 d1			pop de 
60c3 e1			pop hl 
60c4			 
60c4				 
60c4 3e 78			ld a, kLCD_Line4 
60c6			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
60c6 06 28			ld b, display_cols 
60c8 ed 5b c3 eb		ld de, (display_write_tmp) 
60cc cd d0 60			call write_len_string 
60cf c9					ret 
60d0			 
60d0			 
60d0				; write out a fixed length string given in b from de 
60d0			 
60d0 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
60d1 cd 01 60		            CALL fLCD_Data      ;Write character to display 
60d4 13				inc de 
60d5 10 f9			djnz write_len_string 
60d7 c9				ret 
60d8			 
60d8			 
60d8			; eof 
# End of file firmware_cpm_display.asm
60d8			;include "firmware_key_5x10.asm" 
60d8			;;include "firmware_key_4x10.asm" 
60d8			include "firmware_key_cpm.asm" 
60d8			; Serial keyboard interface for SC114 
60d8			 
60d8			 
60d8			key_init: 
60d8				; no init as handled by the SCM bios 
60d8 c9				ret 
60d9			 
60d9			 
60d9			cin_wait: 
60d9			;	ld a, 0 
60d9			;	ret 
60d9			 
60d9				;in a,(SC114_SIO_1_IN) 
60d9			        ; Use SCM API to get from whatever console device we are using 
60d9			 
60d9			; TODO Replace with CP/M BIOS call 
60d9 c5				push bc 
60da 0e 01			ld c, $01 
60dc cd 05 00			call 5 
60df c1				pop bc 
60e0 c9				ret 
60e1			 
60e1			cinndb:  
60e1			cin: 
60e1			 
60e1			 
60e1 c5				push bc 
60e2			 
60e2				; any key waiting to process? 
60e2			; TODO Replace with CP/M BIOS call 
60e2 0e 06			ld c, $06 
60e4 cd 05 00			call 5 
60e7 28 0d			jr z, .cin_skip 
60e9			 
60e9				; yep, get it 
60e9			 
60e9 0e 01			ld c, $01 
60eb			; TODO Replace with CP/M BIOS call 
60eb cd 05 00			call 5 
60ee			 
60ee fe 7f			cp $7f     ; back space 
60f0 20 02			jr nz, .skipbs 
60f2 3e 08			ld a, KEY_BS 
60f4			.skipbs: 
60f4			 
60f4 c1				pop bc 
60f5 c9				ret 
60f6			.cin_skip: 
60f6 3e 00			ld a, 0 
60f8 c1				pop bc 
60f9 c9				ret 
60fa			 
60fa			 
60fa			 
60fa			 
# End of file firmware_key_cpm.asm
60fa			endofcode:  
60fa			baseram:  
60fa 00				nop 
60fb			 
60fb			heap_start: equ baseram+15  ; Starting address of heap 
60fb			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
60fb			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
60fb			;VDU:  EQU     endofcode           ; BASIC Work space 
60fb			; eof 
60fb			 
# End of file os_mega_cpm.asm
60fb
